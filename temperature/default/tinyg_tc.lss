
tinyg_tc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002462  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000030a  00800100  00800100  000024d6  2**0
                  ALLOC
  2 .debug_aranges 000000e0  00000000  00000000  000024d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000549  00000000  00000000  000025b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001d79  00000000  00000000  00002aff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000802  00000000  00000000  00004878  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001290  00000000  00000000  0000507a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000450  00000000  00000000  0000630c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000b07  00000000  00000000  0000675c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
       4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
       8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
       c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      10:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      14:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      18:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      1c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      20:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      24:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      28:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      2c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      30:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      38:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <__vector_14>
      3c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      40:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      44:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__vector_17>
      48:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__vector_18>
      4c:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <__vector_19>
      50:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      54:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      58:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      5c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      60:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      64:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>

00000068 <initialized>:
      68:	0a 44 65 76 69 63 65 20 49 6e 69 74 69 61 6c 69     .Device Initiali
      78:	7a 65 64 0a 00                                      zed..

0000007d <msg_scode0>:
      7d:	49 64 6c 65 00                                      Idle.

00000082 <msg_scode1>:
      82:	54 61 6b 69 6e 67 20 52 65 61 64 69 6e 67 00        Taking Reading.

00000091 <msg_scode2>:
      91:	42 61 64 20 52 65 61 64 69 6e 67 00                 Bad Reading.

0000009d <msg_scode3>:
      9d:	44 69 73 63 6f 6e 6e 65 63 74 65 64 00              Disconnected.

000000aa <msg_scode4>:
      aa:	4e 6f 20 50 6f 77 65 72 00                          No Power.

000000b3 <msg_scode>:
      b3:	7d 00 82 00 91 00 9d 00 aa 00                       }.........

000000bd <__c.1908>:
      bd:	0a 44 65 76 69 63 65 20 49 6e 69 74 69 61 6c 69     .Device Initiali
      cd:	7a 65 64 0a 00                                      zed..

000000d2 <__c.1920>:
      d2:	20 20 00                                              .

000000d5 <__c.1918>:
      d5:	20 50 57 4d 3a 20 00                                 PWM: .

000000dc <__c.1916>:
      dc:	20 45 72 72 6f 72 3a 20 00                           Error: .

000000e5 <__c.1914>:
      e5:	20 53 74 64 44 65 76 3a 20 00                        StdDev: .

000000ef <__c.1912>:
      ef:	54 65 6d 70 3a 20 00                                Temp: .

000000f6 <__c.1932>:
      f6:	0a 00                                               ..

000000f8 <__c.1930>:
      f8:	20 20 50 49 44 3a 20 00                               PID: .

00000100 <__c.1928>:
     100:	54 65 6d 70 3a 20 00                                Temp: .

00000107 <__c.1941>:
     107:	0a 00 00                                            ...

0000010a <__ctors_end>:
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf ef       	ldi	r28, 0xFF	; 255
     110:	d8 e0       	ldi	r29, 0x08	; 8
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_clear_bss>:
     116:	14 e0       	ldi	r17, 0x04	; 4
     118:	a0 e0       	ldi	r26, 0x00	; 0
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	aa 30       	cpi	r26, 0x0A	; 10
     122:	b1 07       	cpc	r27, r17
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
     126:	0e 94 99 00 	call	0x132	; 0x132 <main>
     12a:	0c 94 2f 12 	jmp	0x245e	; 0x245e <_exit>

0000012e <__bad_interrupt>:
     12e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000132 <main>:
 *
 *	Device and Kinen initialization
 *	Main loop handler
 */
int main(void)
{
     132:	df 93       	push	r29
     134:	cf 93       	push	r28
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
	cli();						// initializations
     13a:	f8 94       	cli
	kinen_init();				// do this first
     13c:	0e 94 ca 09 	call	0x1394	; 0x1394 <kinen_init>
	device_init();				// handles all the low-level device peripheral inits
     140:	0e 94 b6 00 	call	0x16c	; 0x16c <device_init>
	serial_init(BAUD_RATE);
     144:	60 e8       	ldi	r22, 0x80	; 128
     146:	75 e2       	ldi	r23, 0x25	; 37
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <serial_init>
	heater_init();				// setup the heater module and subordinate functions
     150:	0e 94 de 00 	call	0x1bc	; 0x1bc <heater_init>
	sei(); 						// enable interrupts
     154:	78 94       	sei

	UNIT_TESTS;					// uncomment __UNIT_TEST_TC to enable unit tests

	heater_on(140);				// turn heater on for testing
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	70 e0       	ldi	r23, 0x00	; 0
     15a:	8c e0       	ldi	r24, 0x0C	; 12
     15c:	93 e4       	ldi	r25, 0x43	; 67
     15e:	0e 94 27 01 	call	0x24e	; 0x24e <heater_on>
	rpt_initialized();			// send initalization string
     162:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <rpt_initialized>

	while (true) {				// go to the controller loop and never return
		_controller();
     166:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_controller>
     16a:	fd cf       	rjmp	.-6      	; 0x166 <main+0x34>

0000016c <device_init>:

/*
 * Device Init 
 */
void device_init(void)
{
     16c:	df 93       	push	r29
     16e:	cf 93       	push	r28
     170:	cd b7       	in	r28, 0x3d	; 61
     172:	de b7       	in	r29, 0x3e	; 62
	DDRB = PORTB_DIR;			// initialize all ports for proper IO function
     174:	e4 e2       	ldi	r30, 0x24	; 36
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	80 e1       	ldi	r24, 0x10	; 16
     17a:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
     17c:	e7 e2       	ldi	r30, 0x27	; 39
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
     182:	ea e2       	ldi	r30, 0x2A	; 42
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	8c e0       	ldi	r24, 0x0C	; 12
     188:	80 83       	st	Z, r24

	adc_init(ADC_CHANNEL);
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <adc_init>
	pwm_init();
     190:	0e 94 50 07 	call	0xea0	; 0xea0 <pwm_init>
	tick_init();
     194:	0e 94 b5 08 	call	0x116a	; 0x116a <tick_init>
	led_off();					// put off the red light [~Sting, 1978]
     198:	0e 94 5e 09 	call	0x12bc	; 0x12bc <led_off>
}
     19c:	cf 91       	pop	r28
     19e:	df 91       	pop	r29
     1a0:	08 95       	ret

000001a2 <_controller>:
 *	start of the list. For any other status code exceution continues down the list
 */

#define	DISPATCH(func) if (func == SC_EAGAIN) return; 
static void _controller()
{
     1a2:	df 93       	push	r29
     1a4:	cf 93       	push	r28
     1a6:	cd b7       	in	r28, 0x3d	; 61
     1a8:	de b7       	in	r29, 0x3e	; 62
	DISPATCH(kinen_callback());		// intercept low-level communication events
     1aa:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <kinen_callback>
     1ae:	82 30       	cpi	r24, 0x02	; 2
     1b0:	11 f0       	breq	.+4      	; 0x1b6 <_controller+0x14>
	DISPATCH(tick_callback());		// regular interval timer clock handler (ticks)
     1b2:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <tick_callback>
}
     1b6:	cf 91       	pop	r28
     1b8:	df 91       	pop	r29
     1ba:	08 95       	ret

000001bc <heater_init>:
 * heater_off()	 - turn heater off	
 * heater_callback() - 100ms timed loop for heater control
 */

void heater_init()
{ 
     1bc:	df 93       	push	r29
     1be:	cf 93       	push	r28
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
	// initialize heater, start PID and PWM
	// note: PWM and ADC are initialized as part of the device init
	memset(&heater, 0, sizeof(Heater));
     1c4:	87 e0       	ldi	r24, 0x07	; 7
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	41 e2       	ldi	r20, 0x21	; 33
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	0e 94 28 12 	call	0x2450	; 0x2450 <memset>
	heater.ambient_timeout = HEATER_AMBIENT_TIMEOUT;
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	a4 eb       	ldi	r26, 0xB4	; 180
     1da:	b2 e4       	ldi	r27, 0x42	; 66
     1dc:	80 93 18 01 	sts	0x0118, r24
     1e0:	90 93 19 01 	sts	0x0119, r25
     1e4:	a0 93 1a 01 	sts	0x011A, r26
     1e8:	b0 93 1b 01 	sts	0x011B, r27
	heater.regulation_timeout = HEATER_REGULATION_TIMEOUT;
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	a6 e9       	ldi	r26, 0x96	; 150
     1f2:	b3 e4       	ldi	r27, 0x43	; 67
     1f4:	80 93 1c 01 	sts	0x011C, r24
     1f8:	90 93 1d 01 	sts	0x011D, r25
     1fc:	a0 93 1e 01 	sts	0x011E, r26
     200:	b0 93 1f 01 	sts	0x011F, r27
	heater.ambient_temperature = HEATER_AMBIENT_TEMPERATURE;
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	a0 e2       	ldi	r26, 0x20	; 32
     20a:	b2 e4       	ldi	r27, 0x42	; 66
     20c:	80 93 20 01 	sts	0x0120, r24
     210:	90 93 21 01 	sts	0x0121, r25
     214:	a0 93 22 01 	sts	0x0122, r26
     218:	b0 93 23 01 	sts	0x0123, r27
	heater.overheat_temperature = HEATER_OVERHEAT_TEMPERATURE;
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	a6 e9       	ldi	r26, 0x96	; 150
     222:	b3 e4       	ldi	r27, 0x43	; 67
     224:	80 93 24 01 	sts	0x0124, r24
     228:	90 93 25 01 	sts	0x0125, r25
     22c:	a0 93 26 01 	sts	0x0126, r26
     230:	b0 93 27 01 	sts	0x0127, r27
	heater.bad_reading_count = HEATER_BAD_READING_COUNT;
     234:	8a e0       	ldi	r24, 0x0A	; 10
     236:	80 93 0a 01 	sts	0x010A, r24
	heater.regulation_count = HEATER_REGULATION_COUNT;
     23a:	8a e0       	ldi	r24, 0x0A	; 10
     23c:	80 93 0b 01 	sts	0x010B, r24
	sensor_init();					// setup the temperature sensor module
     240:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <sensor_init>
	pid_init();
     244:	0e 94 88 02 	call	0x510	; 0x510 <pid_init>
}
     248:	cf 91       	pop	r28
     24a:	df 91       	pop	r29
     24c:	08 95       	ret

0000024e <heater_on>:

void heater_on(double setpoint)
{
     24e:	df 93       	push	r29
     250:	cf 93       	push	r28
     252:	00 d0       	rcall	.+0      	; 0x254 <heater_on+0x6>
     254:	00 d0       	rcall	.+0      	; 0x256 <heater_on+0x8>
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	69 83       	std	Y+1, r22	; 0x01
     25c:	7a 83       	std	Y+2, r23	; 0x02
     25e:	8b 83       	std	Y+3, r24	; 0x03
     260:	9c 83       	std	Y+4, r25	; 0x04
	// no action if heater is already on
	if ((heater.state == HEATER_HEATING) || (heater.state == HEATER_REGULATED)) {
     262:	80 91 07 01 	lds	r24, 0x0107
     266:	82 30       	cpi	r24, 0x02	; 2
     268:	19 f1       	breq	.+70     	; 0x2b0 <heater_on+0x62>
     26a:	80 91 07 01 	lds	r24, 0x0107
     26e:	83 30       	cpi	r24, 0x03	; 3
     270:	f9 f0       	breq	.+62     	; 0x2b0 <heater_on+0x62>
		return;
	}
	// turn on lower level functions
	sensor_on();					// enable the sensor
     272:	0e 94 27 05 	call	0xa4e	; 0xa4e <sensor_on>
	sensor_start_reading();			// now start a reading
     276:	0e 94 3a 05 	call	0xa74	; 0xa74 <sensor_start_reading>
	pid_reset();
     27a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <pid_reset>
	pwm_on(PWM_FREQUENCY, 0);		// duty cycle will be set by PID loop
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	8a e7       	ldi	r24, 0x7A	; 122
     284:	94 e4       	ldi	r25, 0x44	; 68
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	0e 94 82 07 	call	0xf04	; 0xf04 <pwm_on>
	heater.setpoint = setpoint;
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	9a 81       	ldd	r25, Y+2	; 0x02
     296:	ab 81       	ldd	r26, Y+3	; 0x03
     298:	bc 81       	ldd	r27, Y+4	; 0x04
     29a:	80 93 10 01 	sts	0x0110, r24
     29e:	90 93 11 01 	sts	0x0111, r25
     2a2:	a0 93 12 01 	sts	0x0112, r26
     2a6:	b0 93 13 01 	sts	0x0113, r27
	heater.state = HEATER_HEATING;
     2aa:	82 e0       	ldi	r24, 0x02	; 2
     2ac:	80 93 07 01 	sts	0x0107, r24
}
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	cf 91       	pop	r28
     2ba:	df 91       	pop	r29
     2bc:	08 95       	ret

000002be <heater_off>:

void heater_off(uint8_t state, uint8_t code) 
{
     2be:	df 93       	push	r29
     2c0:	cf 93       	push	r28
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <heater_off+0x6>
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	89 83       	std	Y+1, r24	; 0x01
     2ca:	6a 83       	std	Y+2, r22	; 0x02
	pwm_off();						// stop sending current to the heater
     2cc:	0e 94 af 07 	call	0xf5e	; 0xf5e <pwm_off>
	sensor_off();					// stop taking readings
     2d0:	0e 94 31 05 	call	0xa62	; 0xa62 <sensor_off>
	heater.state = state;
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	80 93 07 01 	sts	0x0107, r24
	heater.code = code;
     2da:	8a 81       	ldd	r24, Y+2	; 0x02
     2dc:	80 93 08 01 	sts	0x0108, r24
	led_off();
     2e0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <led_off>
}
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0
     2e8:	cf 91       	pop	r28
     2ea:	df 91       	pop	r29
     2ec:	08 95       	ret

000002ee <heater_callback>:

void heater_callback()
{
     2ee:	df 93       	push	r29
     2f0:	cf 93       	push	r28
     2f2:	00 d0       	rcall	.+0      	; 0x2f4 <heater_callback+0x6>
     2f4:	00 d0       	rcall	.+0      	; 0x2f6 <heater_callback+0x8>
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
	// catch the no-op cases
	if ((heater.state == HEATER_OFF) || (heater.state == HEATER_SHUTDOWN)) { return;}
     2fa:	80 91 07 01 	lds	r24, 0x0107
     2fe:	88 23       	and	r24, r24
     300:	09 f4       	brne	.+2      	; 0x304 <heater_callback+0x16>
     302:	ff c0       	rjmp	.+510    	; 0x502 <heater_callback+0x214>
     304:	80 91 07 01 	lds	r24, 0x0107
     308:	81 30       	cpi	r24, 0x01	; 1
     30a:	09 f4       	brne	.+2      	; 0x30e <heater_callback+0x20>
     30c:	fa c0       	rjmp	.+500    	; 0x502 <heater_callback+0x214>

	rpt_readout();
     30e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <rpt_readout>

	// get current temp or an error if there is no temperature reading
	if ((heater.temperature = sensor_get_temperature()) < ABSOLUTE_ZERO) {
     312:	0e 94 58 05 	call	0xab0	; 0xab0 <sensor_get_temperature>
     316:	dc 01       	movw	r26, r24
     318:	cb 01       	movw	r24, r22
     31a:	80 93 0c 01 	sts	0x010C, r24
     31e:	90 93 0d 01 	sts	0x010D, r25
     322:	a0 93 0e 01 	sts	0x010E, r26
     326:	b0 93 0f 01 	sts	0x010F, r27
     32a:	80 91 0c 01 	lds	r24, 0x010C
     32e:	90 91 0d 01 	lds	r25, 0x010D
     332:	a0 91 0e 01 	lds	r26, 0x010E
     336:	b0 91 0f 01 	lds	r27, 0x010F
     33a:	bc 01       	movw	r22, r24
     33c:	cd 01       	movw	r24, r26
     33e:	23 e3       	ldi	r18, 0x33	; 51
     340:	33 e9       	ldi	r19, 0x93	; 147
     342:	48 e8       	ldi	r20, 0x88	; 136
     344:	53 ec       	ldi	r21, 0xC3	; 195
     346:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
     34a:	88 23       	and	r24, r24
     34c:	0c f4       	brge	.+2      	; 0x350 <heater_callback+0x62>
     34e:	d9 c0       	rjmp	.+434    	; 0x502 <heater_callback+0x214>
		return;
	}
	if (heater.temperature > heater.overheat_temperature) {
     350:	80 91 0c 01 	lds	r24, 0x010C
     354:	90 91 0d 01 	lds	r25, 0x010D
     358:	a0 91 0e 01 	lds	r26, 0x010E
     35c:	b0 91 0f 01 	lds	r27, 0x010F
     360:	20 91 24 01 	lds	r18, 0x0124
     364:	30 91 25 01 	lds	r19, 0x0125
     368:	40 91 26 01 	lds	r20, 0x0126
     36c:	50 91 27 01 	lds	r21, 0x0127
     370:	bc 01       	movw	r22, r24
     372:	cd 01       	movw	r24, r26
     374:	0e 94 45 11 	call	0x228a	; 0x228a <__gesf2>
     378:	18 16       	cp	r1, r24
     37a:	2c f4       	brge	.+10     	; 0x386 <heater_callback+0x98>
		heater_off(HEATER_SHUTDOWN, HEATER_OVERHEATED);
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	63 e0       	ldi	r22, 0x03	; 3
     380:	0e 94 5f 01 	call	0x2be	; 0x2be <heater_off>
     384:	be c0       	rjmp	.+380    	; 0x502 <heater_callback+0x214>
		return;
	}
	sensor_start_reading();		// start next reading
     386:	0e 94 3a 05 	call	0xa74	; 0xa74 <sensor_start_reading>

	// calculate the next PWM level via the PID
	double duty_cycle = pid_calculate(heater.setpoint, heater.temperature);
     38a:	80 91 10 01 	lds	r24, 0x0110
     38e:	90 91 11 01 	lds	r25, 0x0111
     392:	a0 91 12 01 	lds	r26, 0x0112
     396:	b0 91 13 01 	lds	r27, 0x0113
     39a:	20 91 0c 01 	lds	r18, 0x010C
     39e:	30 91 0d 01 	lds	r19, 0x010D
     3a2:	40 91 0e 01 	lds	r20, 0x010E
     3a6:	50 91 0f 01 	lds	r21, 0x010F
     3aa:	bc 01       	movw	r22, r24
     3ac:	cd 01       	movw	r24, r26
     3ae:	0e 94 0d 03 	call	0x61a	; 0x61a <pid_calculate>
     3b2:	dc 01       	movw	r26, r24
     3b4:	cb 01       	movw	r24, r22
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	9a 83       	std	Y+2, r25	; 0x02
     3ba:	ab 83       	std	Y+3, r26	; 0x03
     3bc:	bc 83       	std	Y+4, r27	; 0x04
	pwm_set_duty(duty_cycle);
     3be:	89 81       	ldd	r24, Y+1	; 0x01
     3c0:	9a 81       	ldd	r25, Y+2	; 0x02
     3c2:	ab 81       	ldd	r26, Y+3	; 0x03
     3c4:	bc 81       	ldd	r27, Y+4	; 0x04
     3c6:	bc 01       	movw	r22, r24
     3c8:	cd 01       	movw	r24, r26
     3ca:	0e 94 2a 08 	call	0x1054	; 0x1054 <pwm_set_duty>


	// handle HEATER exceptions
	if (heater.state == HEATER_HEATING) {
     3ce:	80 91 07 01 	lds	r24, 0x0107
     3d2:	82 30       	cpi	r24, 0x02	; 2
     3d4:	09 f0       	breq	.+2      	; 0x3d8 <heater_callback+0xea>
     3d6:	7c c0       	rjmp	.+248    	; 0x4d0 <heater_callback+0x1e2>
		heater.regulation_timer += HEATER_TICK_SECONDS;
     3d8:	80 91 14 01 	lds	r24, 0x0114
     3dc:	90 91 15 01 	lds	r25, 0x0115
     3e0:	a0 91 16 01 	lds	r26, 0x0116
     3e4:	b0 91 17 01 	lds	r27, 0x0117
     3e8:	bc 01       	movw	r22, r24
     3ea:	cd 01       	movw	r24, r26
     3ec:	2d ec       	ldi	r18, 0xCD	; 205
     3ee:	3c ec       	ldi	r19, 0xCC	; 204
     3f0:	4c ec       	ldi	r20, 0xCC	; 204
     3f2:	5d e3       	ldi	r21, 0x3D	; 61
     3f4:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__addsf3>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	80 93 14 01 	sts	0x0114, r24
     400:	90 93 15 01 	sts	0x0115, r25
     404:	a0 93 16 01 	sts	0x0116, r26
     408:	b0 93 17 01 	sts	0x0117, r27

		if ((heater.temperature < heater.ambient_temperature) &&
     40c:	80 91 0c 01 	lds	r24, 0x010C
     410:	90 91 0d 01 	lds	r25, 0x010D
     414:	a0 91 0e 01 	lds	r26, 0x010E
     418:	b0 91 0f 01 	lds	r27, 0x010F
     41c:	20 91 20 01 	lds	r18, 0x0120
     420:	30 91 21 01 	lds	r19, 0x0121
     424:	40 91 22 01 	lds	r20, 0x0122
     428:	50 91 23 01 	lds	r21, 0x0123
     42c:	bc 01       	movw	r22, r24
     42e:	cd 01       	movw	r24, r26
     430:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
     434:	88 23       	and	r24, r24
     436:	dc f4       	brge	.+54     	; 0x46e <heater_callback+0x180>
     438:	80 91 14 01 	lds	r24, 0x0114
     43c:	90 91 15 01 	lds	r25, 0x0115
     440:	a0 91 16 01 	lds	r26, 0x0116
     444:	b0 91 17 01 	lds	r27, 0x0117
     448:	20 91 18 01 	lds	r18, 0x0118
     44c:	30 91 19 01 	lds	r19, 0x0119
     450:	40 91 1a 01 	lds	r20, 0x011A
     454:	50 91 1b 01 	lds	r21, 0x011B
     458:	bc 01       	movw	r22, r24
     45a:	cd 01       	movw	r24, r26
     45c:	0e 94 45 11 	call	0x228a	; 0x228a <__gesf2>
     460:	18 16       	cp	r1, r24
     462:	2c f4       	brge	.+10     	; 0x46e <heater_callback+0x180>
			(heater.regulation_timer > heater.ambient_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_AMBIENT_TIMED_OUT);
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	0e 94 5f 01 	call	0x2be	; 0x2be <heater_off>
     46c:	4a c0       	rjmp	.+148    	; 0x502 <heater_callback+0x214>
			return;
		}
		if ((heater.temperature < heater.setpoint) &&
     46e:	80 91 0c 01 	lds	r24, 0x010C
     472:	90 91 0d 01 	lds	r25, 0x010D
     476:	a0 91 0e 01 	lds	r26, 0x010E
     47a:	b0 91 0f 01 	lds	r27, 0x010F
     47e:	20 91 10 01 	lds	r18, 0x0110
     482:	30 91 11 01 	lds	r19, 0x0111
     486:	40 91 12 01 	lds	r20, 0x0112
     48a:	50 91 13 01 	lds	r21, 0x0113
     48e:	bc 01       	movw	r22, r24
     490:	cd 01       	movw	r24, r26
     492:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
     496:	88 23       	and	r24, r24
     498:	dc f4       	brge	.+54     	; 0x4d0 <heater_callback+0x1e2>
     49a:	80 91 14 01 	lds	r24, 0x0114
     49e:	90 91 15 01 	lds	r25, 0x0115
     4a2:	a0 91 16 01 	lds	r26, 0x0116
     4a6:	b0 91 17 01 	lds	r27, 0x0117
     4aa:	20 91 1c 01 	lds	r18, 0x011C
     4ae:	30 91 1d 01 	lds	r19, 0x011D
     4b2:	40 91 1e 01 	lds	r20, 0x011E
     4b6:	50 91 1f 01 	lds	r21, 0x011F
     4ba:	bc 01       	movw	r22, r24
     4bc:	cd 01       	movw	r24, r26
     4be:	0e 94 45 11 	call	0x228a	; 0x228a <__gesf2>
     4c2:	18 16       	cp	r1, r24
     4c4:	2c f4       	brge	.+10     	; 0x4d0 <heater_callback+0x1e2>
			(heater.regulation_timer > heater.regulation_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_REGULATION_TIMED_OUT);
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	62 e0       	ldi	r22, 0x02	; 2
     4ca:	0e 94 5f 01 	call	0x2be	; 0x2be <heater_off>
     4ce:	19 c0       	rjmp	.+50     	; 0x502 <heater_callback+0x214>
			return;
		}
	}
	// manage heater state and LED indicator
	if (heater.regulation_count > 0) {
     4d0:	80 91 0b 01 	lds	r24, 0x010B
     4d4:	88 23       	and	r24, r24
     4d6:	61 f0       	breq	.+24     	; 0x4f0 <heater_callback+0x202>
		if (--heater.regulation_count <= 0) {
     4d8:	80 91 0b 01 	lds	r24, 0x010B
     4dc:	81 50       	subi	r24, 0x01	; 1
     4de:	80 93 0b 01 	sts	0x010B, r24
     4e2:	80 91 0b 01 	lds	r24, 0x010B
     4e6:	88 23       	and	r24, r24
     4e8:	19 f4       	brne	.+6      	; 0x4f0 <heater_callback+0x202>
			heater.state = HEATER_REGULATED;
     4ea:	83 e0       	ldi	r24, 0x03	; 3
     4ec:	80 93 07 01 	sts	0x0107, r24
		}
	}
	if (heater.state == HEATER_REGULATED) {
     4f0:	80 91 07 01 	lds	r24, 0x0107
     4f4:	83 30       	cpi	r24, 0x03	; 3
     4f6:	19 f4       	brne	.+6      	; 0x4fe <heater_callback+0x210>
		led_on();
     4f8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <led_on>
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <heater_callback+0x214>
	} else {
		led_toggle();
     4fe:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <led_toggle>
	}
}
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	cf 91       	pop	r28
     50c:	df 91       	pop	r29
     50e:	08 95       	ret

00000510 <pid_init>:
 * pid_reset() - reset PID values to cold start
 * pid_calc() - derived from: http://www.embeddedheaven.com/pid-control-algorithm-c-language.htm
 */

void pid_init() 
{
     510:	df 93       	push	r29
     512:	cf 93       	push	r28
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
	memset(&pid, 0, sizeof(struct PIDstruct));
     518:	88 e2       	ldi	r24, 0x28	; 40
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	46 e3       	ldi	r20, 0x36	; 54
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	0e 94 28 12 	call	0x2450	; 0x2450 <memset>
	pid.dt = PID_DT;
     528:	8d ec       	ldi	r24, 0xCD	; 205
     52a:	9c ec       	ldi	r25, 0xCC	; 204
     52c:	ac ec       	ldi	r26, 0xCC	; 204
     52e:	bd e3       	ldi	r27, 0x3D	; 61
     530:	80 93 46 01 	sts	0x0146, r24
     534:	90 93 47 01 	sts	0x0147, r25
     538:	a0 93 48 01 	sts	0x0148, r26
     53c:	b0 93 49 01 	sts	0x0149, r27
	pid.Kp = PID_Kp;
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	a0 e8       	ldi	r26, 0x80	; 128
     546:	b0 e4       	ldi	r27, 0x40	; 64
     548:	80 93 4a 01 	sts	0x014A, r24
     54c:	90 93 4b 01 	sts	0x014B, r25
     550:	a0 93 4c 01 	sts	0x014C, r26
     554:	b0 93 4d 01 	sts	0x014D, r27
	pid.Ki = PID_Ki;
     558:	8d ec       	ldi	r24, 0xCD	; 205
     55a:	9c ec       	ldi	r25, 0xCC	; 204
     55c:	ac ec       	ldi	r26, 0xCC	; 204
     55e:	bd e3       	ldi	r27, 0x3D	; 61
     560:	80 93 4e 01 	sts	0x014E, r24
     564:	90 93 4f 01 	sts	0x014F, r25
     568:	a0 93 50 01 	sts	0x0150, r26
     56c:	b0 93 51 01 	sts	0x0151, r27
	pid.Kd = PID_Kd;
     570:	8a e0       	ldi	r24, 0x0A	; 10
     572:	97 ed       	ldi	r25, 0xD7	; 215
     574:	a3 e2       	ldi	r26, 0x23	; 35
     576:	bc e3       	ldi	r27, 0x3C	; 60
     578:	80 93 52 01 	sts	0x0152, r24
     57c:	90 93 53 01 	sts	0x0153, r25
     580:	a0 93 54 01 	sts	0x0154, r26
     584:	b0 93 55 01 	sts	0x0155, r27
	pid.output_max = PID_MAX_OUTPUT;		// saturation filter max value
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	a8 ec       	ldi	r26, 0xC8	; 200
     58e:	b2 e4       	ldi	r27, 0x42	; 66
     590:	80 93 2e 01 	sts	0x012E, r24
     594:	90 93 2f 01 	sts	0x012F, r25
     598:	a0 93 30 01 	sts	0x0130, r26
     59c:	b0 93 31 01 	sts	0x0131, r27
	pid.output_min = PID_MIN_OUTPUT;		// saturation filter min value
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	a0 e0       	ldi	r26, 0x00	; 0
     5a6:	b0 e0       	ldi	r27, 0x00	; 0
     5a8:	80 93 32 01 	sts	0x0132, r24
     5ac:	90 93 33 01 	sts	0x0133, r25
     5b0:	a0 93 34 01 	sts	0x0134, r26
     5b4:	b0 93 35 01 	sts	0x0135, r27
	pid.state = PID_ON;
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	80 93 28 01 	sts	0x0128, r24
}
     5be:	cf 91       	pop	r28
     5c0:	df 91       	pop	r29
     5c2:	08 95       	ret

000005c4 <pid_reset>:

void pid_reset()
{
     5c4:	df 93       	push	r29
     5c6:	cf 93       	push	r28
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
	pid.output = 0;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	a0 e0       	ldi	r26, 0x00	; 0
     5d2:	b0 e0       	ldi	r27, 0x00	; 0
     5d4:	80 93 2a 01 	sts	0x012A, r24
     5d8:	90 93 2b 01 	sts	0x012B, r25
     5dc:	a0 93 2c 01 	sts	0x012C, r26
     5e0:	b0 93 2d 01 	sts	0x012D, r27
	pid.integral = 0;
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	a0 e0       	ldi	r26, 0x00	; 0
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	80 93 3e 01 	sts	0x013E, r24
     5f0:	90 93 3f 01 	sts	0x013F, r25
     5f4:	a0 93 40 01 	sts	0x0140, r26
     5f8:	b0 93 41 01 	sts	0x0141, r27
	pid.prev_error = 0;
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	a0 e0       	ldi	r26, 0x00	; 0
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	80 93 3a 01 	sts	0x013A, r24
     608:	90 93 3b 01 	sts	0x013B, r25
     60c:	a0 93 3c 01 	sts	0x013C, r26
     610:	b0 93 3d 01 	sts	0x013D, r27
}
     614:	cf 91       	pop	r28
     616:	df 91       	pop	r29
     618:	08 95       	ret

0000061a <pid_calculate>:

double pid_calculate(double setpoint,double temperature)
{
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	2c 97       	sbiw	r28, 0x0c	; 12
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	69 83       	std	Y+1, r22	; 0x01
     638:	7a 83       	std	Y+2, r23	; 0x02
     63a:	8b 83       	std	Y+3, r24	; 0x03
     63c:	9c 83       	std	Y+4, r25	; 0x04
     63e:	2d 83       	std	Y+5, r18	; 0x05
     640:	3e 83       	std	Y+6, r19	; 0x06
     642:	4f 83       	std	Y+7, r20	; 0x07
     644:	58 87       	std	Y+8, r21	; 0x08
	if (pid.state == PID_OFF) { return (0);}
     646:	80 91 28 01 	lds	r24, 0x0128
     64a:	88 23       	and	r24, r24
     64c:	49 f4       	brne	.+18     	; 0x660 <pid_calculate+0x46>
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	a0 e0       	ldi	r26, 0x00	; 0
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	89 87       	std	Y+9, r24	; 0x09
     658:	9a 87       	std	Y+10, r25	; 0x0a
     65a:	ab 87       	std	Y+11, r26	; 0x0b
     65c:	bc 87       	std	Y+12, r27	; 0x0c
     65e:	99 c1       	rjmp	.+818    	; 0x992 <__stack+0x93>

	pid.setpoint = setpoint;		// ++++ test
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	9a 81       	ldd	r25, Y+2	; 0x02
     664:	ab 81       	ldd	r26, Y+3	; 0x03
     666:	bc 81       	ldd	r27, Y+4	; 0x04
     668:	80 93 5a 01 	sts	0x015A, r24
     66c:	90 93 5b 01 	sts	0x015B, r25
     670:	a0 93 5c 01 	sts	0x015C, r26
     674:	b0 93 5d 01 	sts	0x015D, r27
	pid.temperature = temperature;	// ++++ test
     678:	8d 81       	ldd	r24, Y+5	; 0x05
     67a:	9e 81       	ldd	r25, Y+6	; 0x06
     67c:	af 81       	ldd	r26, Y+7	; 0x07
     67e:	b8 85       	ldd	r27, Y+8	; 0x08
     680:	80 93 56 01 	sts	0x0156, r24
     684:	90 93 57 01 	sts	0x0157, r25
     688:	a0 93 58 01 	sts	0x0158, r26
     68c:	b0 93 59 01 	sts	0x0159, r27

	pid.error = setpoint - temperature;		// current error term
     690:	69 81       	ldd	r22, Y+1	; 0x01
     692:	7a 81       	ldd	r23, Y+2	; 0x02
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9c 81       	ldd	r25, Y+4	; 0x04
     698:	2d 81       	ldd	r18, Y+5	; 0x05
     69a:	3e 81       	ldd	r19, Y+6	; 0x06
     69c:	4f 81       	ldd	r20, Y+7	; 0x07
     69e:	58 85       	ldd	r21, Y+8	; 0x08
     6a0:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__subsf3>
     6a4:	dc 01       	movw	r26, r24
     6a6:	cb 01       	movw	r24, r22
     6a8:	80 93 36 01 	sts	0x0136, r24
     6ac:	90 93 37 01 	sts	0x0137, r25
     6b0:	a0 93 38 01 	sts	0x0138, r26
     6b4:	b0 93 39 01 	sts	0x0139, r27

//	if (fabs(pid.error) > PID_EPSILON) {	// stop integration if error term is too small
	if ((fabs(pid.error) > PID_EPSILON) ||	// stop integration if error term is too small
     6b8:	80 91 36 01 	lds	r24, 0x0136
     6bc:	90 91 37 01 	lds	r25, 0x0137
     6c0:	a0 91 38 01 	lds	r26, 0x0138
     6c4:	b0 91 39 01 	lds	r27, 0x0139
     6c8:	bf 77       	andi	r27, 0x7F	; 127
     6ca:	bc 01       	movw	r22, r24
     6cc:	cd 01       	movw	r24, r26
     6ce:	2a e0       	ldi	r18, 0x0A	; 10
     6d0:	37 ed       	ldi	r19, 0xD7	; 215
     6d2:	43 e2       	ldi	r20, 0x23	; 35
     6d4:	5c e3       	ldi	r21, 0x3C	; 60
     6d6:	0e 94 45 11 	call	0x228a	; 0x228a <__gesf2>
     6da:	18 16       	cp	r1, r24
     6dc:	14 f1       	brlt	.+68     	; 0x722 <pid_calculate+0x108>
     6de:	e0 90 2a 01 	lds	r14, 0x012A
     6e2:	f0 90 2b 01 	lds	r15, 0x012B
     6e6:	00 91 2c 01 	lds	r16, 0x012C
     6ea:	10 91 2d 01 	lds	r17, 0x012D
     6ee:	80 91 2e 01 	lds	r24, 0x012E
     6f2:	90 91 2f 01 	lds	r25, 0x012F
     6f6:	a0 91 30 01 	lds	r26, 0x0130
     6fa:	b0 91 31 01 	lds	r27, 0x0131
     6fe:	bc 01       	movw	r22, r24
     700:	cd 01       	movw	r24, r26
     702:	2c ea       	ldi	r18, 0xAC	; 172
     704:	35 ec       	ldi	r19, 0xC5	; 197
     706:	47 e2       	ldi	r20, 0x27	; 39
     708:	57 e3       	ldi	r21, 0x37	; 55
     70a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__subsf3>
     70e:	dc 01       	movw	r26, r24
     710:	cb 01       	movw	r24, r22
     712:	9c 01       	movw	r18, r24
     714:	ad 01       	movw	r20, r26
     716:	c8 01       	movw	r24, r16
     718:	b7 01       	movw	r22, r14
     71a:	0e 94 45 11 	call	0x228a	; 0x228a <__gesf2>
     71e:	88 23       	and	r24, r24
     720:	74 f1       	brlt	.+92     	; 0x77e <pid_calculate+0x164>
		(pid.output >= (pid.output_max - EPSILON))) {//...or output is too large (anti-windup)
		pid.integral += (pid.error * pid.dt);
     722:	e0 90 3e 01 	lds	r14, 0x013E
     726:	f0 90 3f 01 	lds	r15, 0x013F
     72a:	00 91 40 01 	lds	r16, 0x0140
     72e:	10 91 41 01 	lds	r17, 0x0141
     732:	80 91 36 01 	lds	r24, 0x0136
     736:	90 91 37 01 	lds	r25, 0x0137
     73a:	a0 91 38 01 	lds	r26, 0x0138
     73e:	b0 91 39 01 	lds	r27, 0x0139
     742:	20 91 46 01 	lds	r18, 0x0146
     746:	30 91 47 01 	lds	r19, 0x0147
     74a:	40 91 48 01 	lds	r20, 0x0148
     74e:	50 91 49 01 	lds	r21, 0x0149
     752:	bc 01       	movw	r22, r24
     754:	cd 01       	movw	r24, r26
     756:	0e 94 49 11 	call	0x2292	; 0x2292 <__mulsf3>
     75a:	dc 01       	movw	r26, r24
     75c:	cb 01       	movw	r24, r22
     75e:	9c 01       	movw	r18, r24
     760:	ad 01       	movw	r20, r26
     762:	c8 01       	movw	r24, r16
     764:	b7 01       	movw	r22, r14
     766:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__addsf3>
     76a:	dc 01       	movw	r26, r24
     76c:	cb 01       	movw	r24, r22
     76e:	80 93 3e 01 	sts	0x013E, r24
     772:	90 93 3f 01 	sts	0x013F, r25
     776:	a0 93 40 01 	sts	0x0140, r26
     77a:	b0 93 41 01 	sts	0x0141, r27
	}
	pid.derivative = (pid.error - pid.prev_error) / pid.dt;
     77e:	80 91 36 01 	lds	r24, 0x0136
     782:	90 91 37 01 	lds	r25, 0x0137
     786:	a0 91 38 01 	lds	r26, 0x0138
     78a:	b0 91 39 01 	lds	r27, 0x0139
     78e:	20 91 3a 01 	lds	r18, 0x013A
     792:	30 91 3b 01 	lds	r19, 0x013B
     796:	40 91 3c 01 	lds	r20, 0x013C
     79a:	50 91 3d 01 	lds	r21, 0x013D
     79e:	bc 01       	movw	r22, r24
     7a0:	cd 01       	movw	r24, r26
     7a2:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__subsf3>
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	20 91 46 01 	lds	r18, 0x0146
     7ae:	30 91 47 01 	lds	r19, 0x0147
     7b2:	40 91 48 01 	lds	r20, 0x0148
     7b6:	50 91 49 01 	lds	r21, 0x0149
     7ba:	bc 01       	movw	r22, r24
     7bc:	cd 01       	movw	r24, r26
     7be:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divsf3>
     7c2:	dc 01       	movw	r26, r24
     7c4:	cb 01       	movw	r24, r22
     7c6:	80 93 42 01 	sts	0x0142, r24
     7ca:	90 93 43 01 	sts	0x0143, r25
     7ce:	a0 93 44 01 	sts	0x0144, r26
     7d2:	b0 93 45 01 	sts	0x0145, r27
	pid.output = pid.Kp * pid.error + pid.Ki * pid.integral + pid.Kd * pid.derivative;
     7d6:	80 91 4a 01 	lds	r24, 0x014A
     7da:	90 91 4b 01 	lds	r25, 0x014B
     7de:	a0 91 4c 01 	lds	r26, 0x014C
     7e2:	b0 91 4d 01 	lds	r27, 0x014D
     7e6:	20 91 36 01 	lds	r18, 0x0136
     7ea:	30 91 37 01 	lds	r19, 0x0137
     7ee:	40 91 38 01 	lds	r20, 0x0138
     7f2:	50 91 39 01 	lds	r21, 0x0139
     7f6:	bc 01       	movw	r22, r24
     7f8:	cd 01       	movw	r24, r26
     7fa:	0e 94 49 11 	call	0x2292	; 0x2292 <__mulsf3>
     7fe:	dc 01       	movw	r26, r24
     800:	cb 01       	movw	r24, r22
     802:	7c 01       	movw	r14, r24
     804:	8d 01       	movw	r16, r26
     806:	80 91 4e 01 	lds	r24, 0x014E
     80a:	90 91 4f 01 	lds	r25, 0x014F
     80e:	a0 91 50 01 	lds	r26, 0x0150
     812:	b0 91 51 01 	lds	r27, 0x0151
     816:	20 91 3e 01 	lds	r18, 0x013E
     81a:	30 91 3f 01 	lds	r19, 0x013F
     81e:	40 91 40 01 	lds	r20, 0x0140
     822:	50 91 41 01 	lds	r21, 0x0141
     826:	bc 01       	movw	r22, r24
     828:	cd 01       	movw	r24, r26
     82a:	0e 94 49 11 	call	0x2292	; 0x2292 <__mulsf3>
     82e:	dc 01       	movw	r26, r24
     830:	cb 01       	movw	r24, r22
     832:	9c 01       	movw	r18, r24
     834:	ad 01       	movw	r20, r26
     836:	c8 01       	movw	r24, r16
     838:	b7 01       	movw	r22, r14
     83a:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__addsf3>
     83e:	dc 01       	movw	r26, r24
     840:	cb 01       	movw	r24, r22
     842:	7c 01       	movw	r14, r24
     844:	8d 01       	movw	r16, r26
     846:	80 91 52 01 	lds	r24, 0x0152
     84a:	90 91 53 01 	lds	r25, 0x0153
     84e:	a0 91 54 01 	lds	r26, 0x0154
     852:	b0 91 55 01 	lds	r27, 0x0155
     856:	20 91 42 01 	lds	r18, 0x0142
     85a:	30 91 43 01 	lds	r19, 0x0143
     85e:	40 91 44 01 	lds	r20, 0x0144
     862:	50 91 45 01 	lds	r21, 0x0145
     866:	bc 01       	movw	r22, r24
     868:	cd 01       	movw	r24, r26
     86a:	0e 94 49 11 	call	0x2292	; 0x2292 <__mulsf3>
     86e:	dc 01       	movw	r26, r24
     870:	cb 01       	movw	r24, r22
     872:	9c 01       	movw	r18, r24
     874:	ad 01       	movw	r20, r26
     876:	c8 01       	movw	r24, r16
     878:	b7 01       	movw	r22, r14
     87a:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__addsf3>
     87e:	dc 01       	movw	r26, r24
     880:	cb 01       	movw	r24, r22
     882:	80 93 2a 01 	sts	0x012A, r24
     886:	90 93 2b 01 	sts	0x012B, r25
     88a:	a0 93 2c 01 	sts	0x012C, r26
     88e:	b0 93 2d 01 	sts	0x012D, r27

	if(pid.output > pid.output_max) { 		// saturation filter
     892:	80 91 2a 01 	lds	r24, 0x012A
     896:	90 91 2b 01 	lds	r25, 0x012B
     89a:	a0 91 2c 01 	lds	r26, 0x012C
     89e:	b0 91 2d 01 	lds	r27, 0x012D
     8a2:	20 91 2e 01 	lds	r18, 0x012E
     8a6:	30 91 2f 01 	lds	r19, 0x012F
     8aa:	40 91 30 01 	lds	r20, 0x0130
     8ae:	50 91 31 01 	lds	r21, 0x0131
     8b2:	bc 01       	movw	r22, r24
     8b4:	cd 01       	movw	r24, r26
     8b6:	0e 94 45 11 	call	0x228a	; 0x228a <__gesf2>
     8ba:	18 16       	cp	r1, r24
     8bc:	8c f4       	brge	.+34     	; 0x8e0 <pid_calculate+0x2c6>
		pid.output = pid.output_max;
     8be:	80 91 2e 01 	lds	r24, 0x012E
     8c2:	90 91 2f 01 	lds	r25, 0x012F
     8c6:	a0 91 30 01 	lds	r26, 0x0130
     8ca:	b0 91 31 01 	lds	r27, 0x0131
     8ce:	80 93 2a 01 	sts	0x012A, r24
     8d2:	90 93 2b 01 	sts	0x012B, r25
     8d6:	a0 93 2c 01 	sts	0x012C, r26
     8da:	b0 93 2d 01 	sts	0x012D, r27
     8de:	26 c0       	rjmp	.+76     	; 0x92c <__stack+0x2d>
	} else if(pid.output < pid.output_min) {
     8e0:	80 91 2a 01 	lds	r24, 0x012A
     8e4:	90 91 2b 01 	lds	r25, 0x012B
     8e8:	a0 91 2c 01 	lds	r26, 0x012C
     8ec:	b0 91 2d 01 	lds	r27, 0x012D
     8f0:	20 91 32 01 	lds	r18, 0x0132
     8f4:	30 91 33 01 	lds	r19, 0x0133
     8f8:	40 91 34 01 	lds	r20, 0x0134
     8fc:	50 91 35 01 	lds	r21, 0x0135
     900:	bc 01       	movw	r22, r24
     902:	cd 01       	movw	r24, r26
     904:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
     908:	88 23       	and	r24, r24
     90a:	84 f4       	brge	.+32     	; 0x92c <__stack+0x2d>
		pid.output = pid.output_min;
     90c:	80 91 32 01 	lds	r24, 0x0132
     910:	90 91 33 01 	lds	r25, 0x0133
     914:	a0 91 34 01 	lds	r26, 0x0134
     918:	b0 91 35 01 	lds	r27, 0x0135
     91c:	80 93 2a 01 	sts	0x012A, r24
     920:	90 93 2b 01 	sts	0x012B, r25
     924:	a0 93 2c 01 	sts	0x012C, r26
     928:	b0 93 2d 01 	sts	0x012D, r27
	}
	pid.prev_error = pid.error;
     92c:	80 91 36 01 	lds	r24, 0x0136
     930:	90 91 37 01 	lds	r25, 0x0137
     934:	a0 91 38 01 	lds	r26, 0x0138
     938:	b0 91 39 01 	lds	r27, 0x0139
     93c:	80 93 3a 01 	sts	0x013A, r24
     940:	90 93 3b 01 	sts	0x013B, r25
     944:	a0 93 3c 01 	sts	0x013C, r26
     948:	b0 93 3d 01 	sts	0x013D, r27
	if (pid.output > 50) { led_on();} else { led_off();}
     94c:	80 91 2a 01 	lds	r24, 0x012A
     950:	90 91 2b 01 	lds	r25, 0x012B
     954:	a0 91 2c 01 	lds	r26, 0x012C
     958:	b0 91 2d 01 	lds	r27, 0x012D
     95c:	bc 01       	movw	r22, r24
     95e:	cd 01       	movw	r24, r26
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	48 e4       	ldi	r20, 0x48	; 72
     966:	52 e4       	ldi	r21, 0x42	; 66
     968:	0e 94 45 11 	call	0x228a	; 0x228a <__gesf2>
     96c:	18 16       	cp	r1, r24
     96e:	1c f4       	brge	.+6      	; 0x976 <__stack+0x77>
     970:	0e 94 50 09 	call	0x12a0	; 0x12a0 <led_on>
     974:	02 c0       	rjmp	.+4      	; 0x97a <__stack+0x7b>
     976:	0e 94 5e 09 	call	0x12bc	; 0x12bc <led_off>

	return pid.output;
     97a:	80 91 2a 01 	lds	r24, 0x012A
     97e:	90 91 2b 01 	lds	r25, 0x012B
     982:	a0 91 2c 01 	lds	r26, 0x012C
     986:	b0 91 2d 01 	lds	r27, 0x012D
     98a:	89 87       	std	Y+9, r24	; 0x09
     98c:	9a 87       	std	Y+10, r25	; 0x0a
     98e:	ab 87       	std	Y+11, r26	; 0x0b
     990:	bc 87       	std	Y+12, r27	; 0x0c
     992:	89 85       	ldd	r24, Y+9	; 0x09
     994:	9a 85       	ldd	r25, Y+10	; 0x0a
     996:	ab 85       	ldd	r26, Y+11	; 0x0b
     998:	bc 85       	ldd	r27, Y+12	; 0x0c
}
     99a:	bc 01       	movw	r22, r24
     99c:	cd 01       	movw	r24, r26
     99e:	2c 96       	adiw	r28, 0x0c	; 12
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
     9aa:	cf 91       	pop	r28
     9ac:	df 91       	pop	r29
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	ff 90       	pop	r15
     9b4:	ef 90       	pop	r14
     9b6:	08 95       	ret

000009b8 <sensor_init>:
 * sensor_get_code()		- return latest sensor code
 * sensor_callback() 		- perform sensor sampling / reading
 */

void sensor_init()
{
     9b8:	df 93       	push	r29
     9ba:	cf 93       	push	r28
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
	memset(&sensor, 0, sizeof(Sensor));
     9c0:	80 e7       	ldi	r24, 0x70	; 112
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	4f e6       	ldi	r20, 0x6F	; 111
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	0e 94 28 12 	call	0x2450	; 0x2450 <memset>
	sensor.temperature = ABSOLUTE_ZERO;
     9d0:	83 e3       	ldi	r24, 0x33	; 51
     9d2:	93 e9       	ldi	r25, 0x93	; 147
     9d4:	a8 e8       	ldi	r26, 0x88	; 136
     9d6:	b3 ec       	ldi	r27, 0xC3	; 195
     9d8:	80 93 73 01 	sts	0x0173, r24
     9dc:	90 93 74 01 	sts	0x0174, r25
     9e0:	a0 93 75 01 	sts	0x0175, r26
     9e4:	b0 93 76 01 	sts	0x0176, r27
	sensor.sample_variance_max = SENSOR_SAMPLE_VARIANCE_MAX;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	a0 e0       	ldi	r26, 0x00	; 0
     9ee:	b0 e4       	ldi	r27, 0x40	; 64
     9f0:	80 93 7b 01 	sts	0x017B, r24
     9f4:	90 93 7c 01 	sts	0x017C, r25
     9f8:	a0 93 7d 01 	sts	0x017D, r26
     9fc:	b0 93 7e 01 	sts	0x017E, r27
	sensor.reading_variance_max = SENSOR_READING_VARIANCE_MAX;
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	a0 ea       	ldi	r26, 0xA0	; 160
     a06:	b1 e4       	ldi	r27, 0x41	; 65
     a08:	80 93 7f 01 	sts	0x017F, r24
     a0c:	90 93 80 01 	sts	0x0180, r25
     a10:	a0 93 81 01 	sts	0x0181, r26
     a14:	b0 93 82 01 	sts	0x0182, r27
	sensor.disconnect_temperature = SENSOR_DISCONNECTED_TEMPERATURE;
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	a8 ec       	ldi	r26, 0xC8	; 200
     a1e:	b3 e4       	ldi	r27, 0x43	; 67
     a20:	80 93 83 01 	sts	0x0183, r24
     a24:	90 93 84 01 	sts	0x0184, r25
     a28:	a0 93 85 01 	sts	0x0185, r26
     a2c:	b0 93 86 01 	sts	0x0186, r27
	sensor.no_power_temperature = SENSOR_NO_POWER_TEMPERATURE;
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 ec       	ldi	r27, 0xC0	; 192
     a38:	80 93 87 01 	sts	0x0187, r24
     a3c:	90 93 88 01 	sts	0x0188, r25
     a40:	a0 93 89 01 	sts	0x0189, r26
     a44:	b0 93 8a 01 	sts	0x018A, r27
}
     a48:	cf 91       	pop	r28
     a4a:	df 91       	pop	r29
     a4c:	08 95       	ret

00000a4e <sensor_on>:

void sensor_on()
{
     a4e:	df 93       	push	r29
     a50:	cf 93       	push	r28
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_NO_DATA;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	80 93 70 01 	sts	0x0170, r24
}
     a5c:	cf 91       	pop	r28
     a5e:	df 91       	pop	r29
     a60:	08 95       	ret

00000a62 <sensor_off>:

void sensor_off()
{
     a62:	df 93       	push	r29
     a64:	cf 93       	push	r28
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_OFF;
     a6a:	10 92 70 01 	sts	0x0170, r1
}
     a6e:	cf 91       	pop	r28
     a70:	df 91       	pop	r29
     a72:	08 95       	ret

00000a74 <sensor_start_reading>:

void sensor_start_reading() 
{ 
     a74:	df 93       	push	r29
     a76:	cf 93       	push	r28
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
	sensor.sample_idx = 0;
     a7c:	10 92 72 01 	sts	0x0172, r1
//	adc_read(ADC_CHANNEL);
	sensor.code = SENSOR_TAKING_READING;
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	80 93 71 01 	sts	0x0171, r24
}
     a86:	cf 91       	pop	r28
     a88:	df 91       	pop	r29
     a8a:	08 95       	ret

00000a8c <sensor_get_state>:

uint8_t sensor_get_state() { return (sensor.state);}
     a8c:	df 93       	push	r29
     a8e:	cf 93       	push	r28
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	80 91 70 01 	lds	r24, 0x0170
     a98:	cf 91       	pop	r28
     a9a:	df 91       	pop	r29
     a9c:	08 95       	ret

00000a9e <sensor_get_code>:
uint8_t sensor_get_code() { return (sensor.code);}
     a9e:	df 93       	push	r29
     aa0:	cf 93       	push	r28
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
     aa6:	80 91 71 01 	lds	r24, 0x0171
     aaa:	cf 91       	pop	r28
     aac:	df 91       	pop	r29
     aae:	08 95       	ret

00000ab0 <sensor_get_temperature>:

double sensor_get_temperature() 
{ 
     ab0:	df 93       	push	r29
     ab2:	cf 93       	push	r28
     ab4:	00 d0       	rcall	.+0      	; 0xab6 <sensor_get_temperature+0x6>
     ab6:	00 d0       	rcall	.+0      	; 0xab8 <sensor_get_temperature+0x8>
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
	if (sensor.state == SENSOR_HAS_DATA) { 
     abc:	80 91 70 01 	lds	r24, 0x0170
     ac0:	83 30       	cpi	r24, 0x03	; 3
     ac2:	69 f4       	brne	.+26     	; 0xade <sensor_get_temperature+0x2e>
		return (sensor.temperature);
     ac4:	80 91 73 01 	lds	r24, 0x0173
     ac8:	90 91 74 01 	lds	r25, 0x0174
     acc:	a0 91 75 01 	lds	r26, 0x0175
     ad0:	b0 91 76 01 	lds	r27, 0x0176
     ad4:	89 83       	std	Y+1, r24	; 0x01
     ad6:	9a 83       	std	Y+2, r25	; 0x02
     ad8:	ab 83       	std	Y+3, r26	; 0x03
     ada:	bc 83       	std	Y+4, r27	; 0x04
     adc:	08 c0       	rjmp	.+16     	; 0xaee <sensor_get_temperature+0x3e>
	} else {
		return (LESS_THAN_ZERO);	// an impossible temperature value
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	a9 e8       	ldi	r26, 0x89	; 137
     ae4:	b3 ec       	ldi	r27, 0xC3	; 195
     ae6:	89 83       	std	Y+1, r24	; 0x01
     ae8:	9a 83       	std	Y+2, r25	; 0x02
     aea:	ab 83       	std	Y+3, r26	; 0x03
     aec:	bc 83       	std	Y+4, r27	; 0x04
     aee:	89 81       	ldd	r24, Y+1	; 0x01
     af0:	9a 81       	ldd	r25, Y+2	; 0x02
     af2:	ab 81       	ldd	r26, Y+3	; 0x03
     af4:	bc 81       	ldd	r27, Y+4	; 0x04
	}
}
     af6:	bc 01       	movw	r22, r24
     af8:	cd 01       	movw	r24, r26
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	cf 91       	pop	r28
     b04:	df 91       	pop	r29
     b06:	08 95       	ret

00000b08 <sensor_callback>:
 *	loop. Each sampling interval must be requested explicitly by calling 
 *	sensor_start_sample(). It does not free-run.
 */

void sensor_callback()
{
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	df 93       	push	r29
     b12:	cf 93       	push	r28
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
     b18:	29 97       	sbiw	r28, 0x09	; 9
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	cd bf       	out	0x3d, r28	; 61
	// cases where you don't execute the callback:
	if ((sensor.state == SENSOR_OFF) || (sensor.code != SENSOR_TAKING_READING)) {
     b24:	80 91 70 01 	lds	r24, 0x0170
     b28:	88 23       	and	r24, r24
     b2a:	09 f4       	brne	.+2      	; 0xb2e <sensor_callback+0x26>
     b2c:	2f c1       	rjmp	.+606    	; 0xd8c <sensor_callback+0x284>
     b2e:	80 91 71 01 	lds	r24, 0x0171
     b32:	81 30       	cpi	r24, 0x01	; 1
     b34:	09 f0       	breq	.+2      	; 0xb38 <sensor_callback+0x30>
     b36:	2a c1       	rjmp	.+596    	; 0xd8c <sensor_callback+0x284>
		return;
	}

	// get a sample and return if still in the reading period
	sensor.sample[sensor.sample_idx] = _sensor_sample(ADC_CHANNEL);
     b38:	80 91 72 01 	lds	r24, 0x0172
     b3c:	08 2f       	mov	r16, r24
     b3e:	10 e0       	ldi	r17, 0x00	; 0
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	0e 94 d3 06 	call	0xda6	; 0xda6 <_sensor_sample>
     b46:	9b 01       	movw	r18, r22
     b48:	ac 01       	movw	r20, r24
     b4a:	c8 01       	movw	r24, r16
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	fc 01       	movw	r30, r24
     b56:	e5 57       	subi	r30, 0x75	; 117
     b58:	fe 4f       	sbci	r31, 0xFE	; 254
     b5a:	20 83       	st	Z, r18
     b5c:	31 83       	std	Z+1, r19	; 0x01
     b5e:	42 83       	std	Z+2, r20	; 0x02
     b60:	53 83       	std	Z+3, r21	; 0x03
	if ((++sensor.sample_idx) < SENSOR_SAMPLES) { return; }
     b62:	80 91 72 01 	lds	r24, 0x0172
     b66:	8f 5f       	subi	r24, 0xFF	; 255
     b68:	80 93 72 01 	sts	0x0172, r24
     b6c:	80 91 72 01 	lds	r24, 0x0172
     b70:	84 31       	cpi	r24, 0x14	; 20
     b72:	08 f4       	brcc	.+2      	; 0xb76 <sensor_callback+0x6e>
     b74:	0b c1       	rjmp	.+534    	; 0xd8c <sensor_callback+0x284>

	// process the array to clean up samples
	double mean;
	sensor.std_dev = std_dev(sensor.sample, SENSOR_SAMPLES, &mean);
     b76:	8b e8       	ldi	r24, 0x8B	; 139
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	9e 01       	movw	r18, r28
     b7c:	2a 5f       	subi	r18, 0xFA	; 250
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
     b80:	64 e1       	ldi	r22, 0x14	; 20
     b82:	a9 01       	movw	r20, r18
     b84:	0e 94 c6 0a 	call	0x158c	; 0x158c <std_dev>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	80 93 77 01 	sts	0x0177, r24
     b90:	90 93 78 01 	sts	0x0178, r25
     b94:	a0 93 79 01 	sts	0x0179, r26
     b98:	b0 93 7a 01 	sts	0x017A, r27
	if (sensor.std_dev > sensor.reading_variance_max) {
     b9c:	80 91 77 01 	lds	r24, 0x0177
     ba0:	90 91 78 01 	lds	r25, 0x0178
     ba4:	a0 91 79 01 	lds	r26, 0x0179
     ba8:	b0 91 7a 01 	lds	r27, 0x017A
     bac:	20 91 7f 01 	lds	r18, 0x017F
     bb0:	30 91 80 01 	lds	r19, 0x0180
     bb4:	40 91 81 01 	lds	r20, 0x0181
     bb8:	50 91 82 01 	lds	r21, 0x0182
     bbc:	bc 01       	movw	r22, r24
     bbe:	cd 01       	movw	r24, r26
     bc0:	0e 94 45 11 	call	0x228a	; 0x228a <__gesf2>
     bc4:	18 16       	cp	r1, r24
     bc6:	3c f4       	brge	.+14     	; 0xbd6 <sensor_callback+0xce>
		sensor.state = SENSOR_ERROR;
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	80 93 70 01 	sts	0x0170, r24
		sensor.code = SENSOR_ERROR_BAD_READINGS;
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	80 93 71 01 	sts	0x0171, r24
     bd4:	db c0       	rjmp	.+438    	; 0xd8c <sensor_callback+0x284>
		return;
	}

	// reject the outlier samples and re-compute the average
	double count = 0;
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	8a 83       	std	Y+2, r24	; 0x02
     be0:	9b 83       	std	Y+3, r25	; 0x03
     be2:	ac 83       	std	Y+4, r26	; 0x04
     be4:	bd 83       	std	Y+5, r27	; 0x05
	sensor.temperature = 0;
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	80 93 73 01 	sts	0x0173, r24
     bf2:	90 93 74 01 	sts	0x0174, r25
     bf6:	a0 93 75 01 	sts	0x0175, r26
     bfa:	b0 93 76 01 	sts	0x0176, r27
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     bfe:	19 82       	std	Y+1, r1	; 0x01
     c00:	71 c0       	rjmp	.+226    	; 0xce4 <sensor_callback+0x1dc>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	fc 01       	movw	r30, r24
     c12:	e5 57       	subi	r30, 0x75	; 117
     c14:	fe 4f       	sbci	r31, 0xFE	; 254
     c16:	80 81       	ld	r24, Z
     c18:	91 81       	ldd	r25, Z+1	; 0x01
     c1a:	a2 81       	ldd	r26, Z+2	; 0x02
     c1c:	b3 81       	ldd	r27, Z+3	; 0x03
     c1e:	2e 81       	ldd	r18, Y+6	; 0x06
     c20:	3f 81       	ldd	r19, Y+7	; 0x07
     c22:	48 85       	ldd	r20, Y+8	; 0x08
     c24:	59 85       	ldd	r21, Y+9	; 0x09
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__subsf3>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	7c 01       	movw	r14, r24
     c34:	8d 01       	movw	r16, r26
     c36:	e8 94       	clt
     c38:	17 f9       	bld	r17, 7
     c3a:	80 91 7b 01 	lds	r24, 0x017B
     c3e:	90 91 7c 01 	lds	r25, 0x017C
     c42:	a0 91 7d 01 	lds	r26, 0x017D
     c46:	b0 91 7e 01 	lds	r27, 0x017E
     c4a:	20 91 77 01 	lds	r18, 0x0177
     c4e:	30 91 78 01 	lds	r19, 0x0178
     c52:	40 91 79 01 	lds	r20, 0x0179
     c56:	50 91 7a 01 	lds	r21, 0x017A
     c5a:	bc 01       	movw	r22, r24
     c5c:	cd 01       	movw	r24, r26
     c5e:	0e 94 49 11 	call	0x2292	; 0x2292 <__mulsf3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	9c 01       	movw	r18, r24
     c68:	ad 01       	movw	r20, r26
     c6a:	c8 01       	movw	r24, r16
     c6c:	b7 01       	movw	r22, r14
     c6e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
     c72:	88 23       	and	r24, r24
     c74:	a4 f5       	brge	.+104    	; 0xcde <sensor_callback+0x1d6>
			sensor.temperature += sensor.sample[i];
     c76:	e0 90 73 01 	lds	r14, 0x0173
     c7a:	f0 90 74 01 	lds	r15, 0x0174
     c7e:	00 91 75 01 	lds	r16, 0x0175
     c82:	10 91 76 01 	lds	r17, 0x0176
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	fc 01       	movw	r30, r24
     c96:	e5 57       	subi	r30, 0x75	; 117
     c98:	fe 4f       	sbci	r31, 0xFE	; 254
     c9a:	20 81       	ld	r18, Z
     c9c:	31 81       	ldd	r19, Z+1	; 0x01
     c9e:	42 81       	ldd	r20, Z+2	; 0x02
     ca0:	53 81       	ldd	r21, Z+3	; 0x03
     ca2:	c8 01       	movw	r24, r16
     ca4:	b7 01       	movw	r22, r14
     ca6:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__addsf3>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	80 93 73 01 	sts	0x0173, r24
     cb2:	90 93 74 01 	sts	0x0174, r25
     cb6:	a0 93 75 01 	sts	0x0175, r26
     cba:	b0 93 76 01 	sts	0x0176, r27
			count++;
     cbe:	6a 81       	ldd	r22, Y+2	; 0x02
     cc0:	7b 81       	ldd	r23, Y+3	; 0x03
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	9d 81       	ldd	r25, Y+5	; 0x05
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e8       	ldi	r20, 0x80	; 128
     ccc:	5f e3       	ldi	r21, 0x3F	; 63
     cce:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__addsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	8a 83       	std	Y+2, r24	; 0x02
     cd8:	9b 83       	std	Y+3, r25	; 0x03
     cda:	ac 83       	std	Y+4, r26	; 0x04
     cdc:	bd 83       	std	Y+5, r27	; 0x05
	}

	// reject the outlier samples and re-compute the average
	double count = 0;
	sensor.temperature = 0;
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	8f 5f       	subi	r24, 0xFF	; 255
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	84 31       	cpi	r24, 0x14	; 20
     ce8:	08 f4       	brcc	.+2      	; 0xcec <sensor_callback+0x1e4>
     cea:	8b cf       	rjmp	.-234    	; 0xc02 <sensor_callback+0xfa>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
			sensor.temperature += sensor.sample[i];
			count++;
		}
	}
	sensor.temperature /= count; 		// calculate mean temp w/o the outliers
     cec:	80 91 73 01 	lds	r24, 0x0173
     cf0:	90 91 74 01 	lds	r25, 0x0174
     cf4:	a0 91 75 01 	lds	r26, 0x0175
     cf8:	b0 91 76 01 	lds	r27, 0x0176
     cfc:	bc 01       	movw	r22, r24
     cfe:	cd 01       	movw	r24, r26
     d00:	2a 81       	ldd	r18, Y+2	; 0x02
     d02:	3b 81       	ldd	r19, Y+3	; 0x03
     d04:	4c 81       	ldd	r20, Y+4	; 0x04
     d06:	5d 81       	ldd	r21, Y+5	; 0x05
     d08:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divsf3>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	80 93 73 01 	sts	0x0173, r24
     d14:	90 93 74 01 	sts	0x0174, r25
     d18:	a0 93 75 01 	sts	0x0175, r26
     d1c:	b0 93 76 01 	sts	0x0176, r27
	sensor.state = SENSOR_HAS_DATA;
     d20:	83 e0       	ldi	r24, 0x03	; 3
     d22:	80 93 70 01 	sts	0x0170, r24
	sensor.code = SENSOR_IDLE;			// we are done. Flip it back to idle
     d26:	10 92 71 01 	sts	0x0171, r1

	// process the exception cases
	if (sensor.temperature > SENSOR_DISCONNECTED_TEMPERATURE) {
     d2a:	80 91 73 01 	lds	r24, 0x0173
     d2e:	90 91 74 01 	lds	r25, 0x0174
     d32:	a0 91 75 01 	lds	r26, 0x0175
     d36:	b0 91 76 01 	lds	r27, 0x0176
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	48 ec       	ldi	r20, 0xC8	; 200
     d44:	53 e4       	ldi	r21, 0x43	; 67
     d46:	0e 94 45 11 	call	0x228a	; 0x228a <__gesf2>
     d4a:	18 16       	cp	r1, r24
     d4c:	3c f4       	brge	.+14     	; 0xd5c <sensor_callback+0x254>
		sensor.state = SENSOR_ERROR;
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	80 93 70 01 	sts	0x0170, r24
		sensor.code = SENSOR_ERROR_DISCONNECTED;
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	80 93 71 01 	sts	0x0171, r24
     d5a:	18 c0       	rjmp	.+48     	; 0xd8c <sensor_callback+0x284>
	} else if (sensor.temperature < SENSOR_NO_POWER_TEMPERATURE) {
     d5c:	80 91 73 01 	lds	r24, 0x0173
     d60:	90 91 74 01 	lds	r25, 0x0174
     d64:	a0 91 75 01 	lds	r26, 0x0175
     d68:	b0 91 76 01 	lds	r27, 0x0176
     d6c:	bc 01       	movw	r22, r24
     d6e:	cd 01       	movw	r24, r26
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	50 ec       	ldi	r21, 0xC0	; 192
     d78:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
     d7c:	88 23       	and	r24, r24
     d7e:	34 f4       	brge	.+12     	; 0xd8c <sensor_callback+0x284>
		sensor.state = SENSOR_ERROR;
     d80:	82 e0       	ldi	r24, 0x02	; 2
     d82:	80 93 70 01 	sts	0x0170, r24
		sensor.code = SENSOR_ERROR_NO_POWER;
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	80 93 71 01 	sts	0x0171, r24
	}
}
     d8c:	29 96       	adiw	r28, 0x09	; 9
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	08 95       	ret

00000da6 <_sensor_sample>:
 *
 *		temp = (adc_value * 1.456355556) - -120.7135972
 */

static inline double _sensor_sample(uint8_t adc_channel)
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	0f 92       	push	r0
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	89 83       	std	Y+1, r24	; 0x01
	double random_gain = 5;
	double random_variation = ((double)(rand() - RAND_MAX/2) / RAND_MAX/2) * random_gain;
	double reading = 60 + random_variation;
	return (((double)reading * SENSOR_SLOPE) + SENSOR_OFFSET);	// useful for testing the math
#else
	return (((double)adc_read() * SENSOR_SLOPE) + SENSOR_OFFSET);
     db2:	0e 94 2c 07 	call	0xe58	; 0xe58 <adc_read>
     db6:	cc 01       	movw	r24, r24
     db8:	a0 e0       	ldi	r26, 0x00	; 0
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	0e 94 93 10 	call	0x2126	; 0x2126 <__floatunsisf>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	bc 01       	movw	r22, r24
     dca:	cd 01       	movw	r24, r26
     dcc:	26 e0       	ldi	r18, 0x06	; 6
     dce:	3f ea       	ldi	r19, 0xAF	; 175
     dd0:	4a ef       	ldi	r20, 0xFA	; 250
     dd2:	5e e3       	ldi	r21, 0x3E	; 62
     dd4:	0e 94 49 11 	call	0x2292	; 0x2292 <__mulsf3>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	23 ed       	ldi	r18, 0xD3	; 211
     de2:	31 eb       	ldi	r19, 0xB1	; 177
     de4:	46 ed       	ldi	r20, 0xD6	; 214
     de6:	5e e3       	ldi	r21, 0x3E	; 62
     de8:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__subsf3>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
#endif
}
     df0:	bc 01       	movw	r22, r24
     df2:	cd 01       	movw	r24, r26
     df4:	0f 90       	pop	r0
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <adc_init>:
 *	There's a weird bug where somethimes the first conversion returns zero. 
 *	I need to fund out why this is happening and stop it.
 *	In the mean time there is a do-while loop in the read function.
 */
void adc_init(uint8_t channel)
{
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	0f 92       	push	r0
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	89 83       	std	Y+1, r24	; 0x01
	ADMUX  = (ADC_REFS | channel);	 // setup ADC Vref and channel
     e08:	ec e7       	ldi	r30, 0x7C	; 124
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	80 64       	ori	r24, 0x40	; 64
     e10:	80 83       	st	Z, r24
	ADCSRA = (ADC_ENABLE | ADC_PRESCALE);// Enable ADC (bit 7) & set prescaler
     e12:	ea e7       	ldi	r30, 0x7A	; 122
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	86 e8       	ldi	r24, 0x86	; 134
     e18:	80 83       	st	Z, r24

	ADMUX &= 0xF0;						// clobber the channel
     e1a:	ac e7       	ldi	r26, 0x7C	; 124
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ec e7       	ldi	r30, 0x7C	; 124
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	80 7f       	andi	r24, 0xF0	; 240
     e26:	8c 93       	st	X, r24
	ADMUX |= 0x0F & ADC_CHANNEL;		// set the channel
     e28:	ac e7       	ldi	r26, 0x7C	; 124
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	ec e7       	ldi	r30, 0x7C	; 124
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	8c 93       	st	X, r24
	DIDR0 = (1<<channel);				// disable digital input
     e34:	ee e7       	ldi	r30, 0x7E	; 126
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 2e       	mov	r0, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <adc_init+0x4e>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <adc_init+0x4a>
     e4e:	80 83       	st	Z, r24
}
     e50:	0f 90       	pop	r0
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <adc_read>:

uint16_t adc_read()
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	0f 92       	push	r0
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
	do {
		ADCSRA |= ADC_START_CONVERSION; // start the conversion
     e62:	aa e7       	ldi	r26, 0x7A	; 122
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	ea e7       	ldi	r30, 0x7A	; 122
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	80 64       	ori	r24, 0x40	; 64
     e6e:	8c 93       	st	X, r24
		while (ADCSRA && (1<<ADIF) == 0);// wait about 100 uSec
     e70:	ea e7       	ldi	r30, 0x7A	; 122
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
		ADCSRA |= (1<<ADIF);			// clear the conversion flag
     e76:	aa e7       	ldi	r26, 0x7A	; 122
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	ea e7       	ldi	r30, 0x7A	; 122
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	80 61       	ori	r24, 0x10	; 16
     e82:	8c 93       	st	X, r24
	} while (ADC == 0);
     e84:	e8 e7       	ldi	r30, 0x78	; 120
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	91 81       	ldd	r25, Z+1	; 0x01
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	49 f3       	breq	.-46     	; 0xe62 <adc_read+0xa>
	return (ADC);
     e90:	e8 e7       	ldi	r30, 0x78	; 120
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	91 81       	ldd	r25, Z+1	; 0x01

		if (ADC > 0) break;
	}
*/
	return (ADC);
}
     e98:	0f 90       	pop	r0
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <pwm_init>:
 * 	Configure timer 2 for extruder heater PWM
 *	Mode: 8 bit Fast PWM Fast w/OCR2A setting PWM freq (TOP value)
 *		  and OCR2B setting the duty cycle as a fraction of OCR2A seeting
 */
void pwm_init(void)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
	TCCR2A  = PWM_INVERTED;		// alternative is PWM_NONINVERTED
     ea8:	e0 eb       	ldi	r30, 0xB0	; 176
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 ef       	ldi	r24, 0xF0	; 240
     eae:	80 83       	st	Z, r24
	TCCR2A |= 0b00000011;		// Waveform generation set to MODE 7 - here...
     eb0:	a0 eb       	ldi	r26, 0xB0	; 176
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e0 eb       	ldi	r30, 0xB0	; 176
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	83 60       	ori	r24, 0x03	; 3
     ebc:	8c 93       	st	X, r24
	TCCR2B  = 0b00001000;		// ...continued here
     ebe:	e1 eb       	ldi	r30, 0xB1	; 177
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	88 e0       	ldi	r24, 0x08	; 8
     ec4:	80 83       	st	Z, r24
	TCCR2B |= PWM_PRESCALE_SET;	// set clock and prescaler
     ec6:	a1 eb       	ldi	r26, 0xB1	; 177
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e1 eb       	ldi	r30, 0xB1	; 177
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	84 60       	ori	r24, 0x04	; 4
     ed2:	8c 93       	st	X, r24
	TIMSK1 = 0; 				// disable PWM interrupts
     ed4:	ef e6       	ldi	r30, 0x6F	; 111
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	10 82       	st	Z, r1
	OCR2A = 0;					// clear PWM frequency (TOP value)
     eda:	e3 eb       	ldi	r30, 0xB3	; 179
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	10 82       	st	Z, r1
	OCR2B = 0;					// clear PWM duty cycle as % of TOP value
     ee0:	e4 eb       	ldi	r30, 0xB4	; 180
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	10 82       	st	Z, r1
	device.pwm_freq = 0;
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	a0 e0       	ldi	r26, 0x00	; 0
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	80 93 e3 01 	sts	0x01E3, r24
     ef2:	90 93 e4 01 	sts	0x01E4, r25
     ef6:	a0 93 e5 01 	sts	0x01E5, r26
     efa:	b0 93 e6 01 	sts	0x01E6, r27
}
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <pwm_on>:

void pwm_on(double freq, double duty)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	28 97       	sbiw	r28, 0x08	; 8
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	69 83       	std	Y+1, r22	; 0x01
     f1a:	7a 83       	std	Y+2, r23	; 0x02
     f1c:	8b 83       	std	Y+3, r24	; 0x03
     f1e:	9c 83       	std	Y+4, r25	; 0x04
     f20:	2d 83       	std	Y+5, r18	; 0x05
     f22:	3e 83       	std	Y+6, r19	; 0x06
     f24:	4f 83       	std	Y+7, r20	; 0x07
     f26:	58 87       	std	Y+8, r21	; 0x08
	pwm_init();
     f28:	0e 94 50 07 	call	0xea0	; 0xea0 <pwm_init>
	pwm_set_freq(freq);
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	ab 81       	ldd	r26, Y+3	; 0x03
     f32:	bc 81       	ldd	r27, Y+4	; 0x04
     f34:	bc 01       	movw	r22, r24
     f36:	cd 01       	movw	r24, r26
     f38:	0e 94 c0 07 	call	0xf80	; 0xf80 <pwm_set_freq>
	pwm_set_duty(duty);
     f3c:	8d 81       	ldd	r24, Y+5	; 0x05
     f3e:	9e 81       	ldd	r25, Y+6	; 0x06
     f40:	af 81       	ldd	r26, Y+7	; 0x07
     f42:	b8 85       	ldd	r27, Y+8	; 0x08
     f44:	bc 01       	movw	r22, r24
     f46:	cd 01       	movw	r24, r26
     f48:	0e 94 2a 08 	call	0x1054	; 0x1054 <pwm_set_duty>
}
     f4c:	28 96       	adiw	r28, 0x08	; 8
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <pwm_off>:

void pwm_off(void)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
	pwm_on(0,0);
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	0e 94 82 07 	call	0xf04	; 0xf04 <pwm_on>
}
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <pwm_set_freq>:
 *
 *	At current settings the range is from about 500 Hz to about 6000 Hz  
 */

uint8_t pwm_set_freq(double freq)
{
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	00 d0       	rcall	.+0      	; 0xf8a <pwm_set_freq+0xa>
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <pwm_set_freq+0xc>
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	69 83       	std	Y+1, r22	; 0x01
     f92:	7a 83       	std	Y+2, r23	; 0x02
     f94:	8b 83       	std	Y+3, r24	; 0x03
     f96:	9c 83       	std	Y+4, r25	; 0x04
	device.pwm_freq = F_CPU / PWM_PRESCALE / freq;
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	74 e2       	ldi	r23, 0x24	; 36
     f9c:	84 ef       	ldi	r24, 0xF4	; 244
     f9e:	97 e4       	ldi	r25, 0x47	; 71
     fa0:	29 81       	ldd	r18, Y+1	; 0x01
     fa2:	3a 81       	ldd	r19, Y+2	; 0x02
     fa4:	4b 81       	ldd	r20, Y+3	; 0x03
     fa6:	5c 81       	ldd	r21, Y+4	; 0x04
     fa8:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	80 93 e3 01 	sts	0x01E3, r24
     fb4:	90 93 e4 01 	sts	0x01E4, r25
     fb8:	a0 93 e5 01 	sts	0x01E5, r26
     fbc:	b0 93 e6 01 	sts	0x01E6, r27
	if (device.pwm_freq < PWM_MIN_RES) { 
     fc0:	80 91 e3 01 	lds	r24, 0x01E3
     fc4:	90 91 e4 01 	lds	r25, 0x01E4
     fc8:	a0 91 e5 01 	lds	r26, 0x01E5
     fcc:	b0 91 e6 01 	lds	r27, 0x01E6
     fd0:	bc 01       	movw	r22, r24
     fd2:	cd 01       	movw	r24, r26
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 ea       	ldi	r20, 0xA0	; 160
     fda:	51 e4       	ldi	r21, 0x41	; 65
     fdc:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
     fe0:	88 23       	and	r24, r24
     fe2:	2c f4       	brge	.+10     	; 0xfee <pwm_set_freq+0x6e>
		OCR2A = PWM_MIN_RES;
     fe4:	e3 eb       	ldi	r30, 0xB3	; 179
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	84 e1       	ldi	r24, 0x14	; 20
     fea:	80 83       	st	Z, r24
     fec:	29 c0       	rjmp	.+82     	; 0x1040 <pwm_set_freq+0xc0>
	} else if (device.pwm_freq >= PWM_MAX_RES) { 
     fee:	80 91 e3 01 	lds	r24, 0x01E3
     ff2:	90 91 e4 01 	lds	r25, 0x01E4
     ff6:	a0 91 e5 01 	lds	r26, 0x01E5
     ffa:	b0 91 e6 01 	lds	r27, 0x01E6
     ffe:	bc 01       	movw	r22, r24
    1000:	cd 01       	movw	r24, r26
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	4f e7       	ldi	r20, 0x7F	; 127
    1008:	53 e4       	ldi	r21, 0x43	; 67
    100a:	0e 94 45 11 	call	0x228a	; 0x228a <__gesf2>
    100e:	88 23       	and	r24, r24
    1010:	2c f0       	brlt	.+10     	; 0x101c <pwm_set_freq+0x9c>
		OCR2A = PWM_MAX_RES;
    1012:	e3 eb       	ldi	r30, 0xB3	; 179
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	8f ef       	ldi	r24, 0xFF	; 255
    1018:	80 83       	st	Z, r24
    101a:	12 c0       	rjmp	.+36     	; 0x1040 <pwm_set_freq+0xc0>
	} else { 
		OCR2A = (uint8_t)device.pwm_freq;
    101c:	03 eb       	ldi	r16, 0xB3	; 179
    101e:	10 e0       	ldi	r17, 0x00	; 0
    1020:	80 91 e3 01 	lds	r24, 0x01E3
    1024:	90 91 e4 01 	lds	r25, 0x01E4
    1028:	a0 91 e5 01 	lds	r26, 0x01E5
    102c:	b0 91 e6 01 	lds	r27, 0x01E6
    1030:	bc 01       	movw	r22, r24
    1032:	cd 01       	movw	r24, r26
    1034:	0e 94 67 10 	call	0x20ce	; 0x20ce <__fixunssfsi>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	f8 01       	movw	r30, r16
    103e:	80 83       	st	Z, r24
	}
	return (SC_OK);
    1040:	80 e0       	ldi	r24, 0x00	; 0
}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	08 95       	ret

00001054 <pwm_set_duty>:
 *	Since I can't seem to get the output pin to work in non-inverted mode
 *	it's done in software in this routine.
 */

uint8_t pwm_set_duty(double duty)
{
    1054:	cf 92       	push	r12
    1056:	df 92       	push	r13
    1058:	ef 92       	push	r14
    105a:	ff 92       	push	r15
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	00 d0       	rcall	.+0      	; 0x1066 <pwm_set_duty+0x12>
    1066:	00 d0       	rcall	.+0      	; 0x1068 <pwm_set_duty+0x14>
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	69 83       	std	Y+1, r22	; 0x01
    106e:	7a 83       	std	Y+2, r23	; 0x02
    1070:	8b 83       	std	Y+3, r24	; 0x03
    1072:	9c 83       	std	Y+4, r25	; 0x04
	if (duty < 0.01) {				// anything approaching 0% 
    1074:	69 81       	ldd	r22, Y+1	; 0x01
    1076:	7a 81       	ldd	r23, Y+2	; 0x02
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	2a e0       	ldi	r18, 0x0A	; 10
    107e:	37 ed       	ldi	r19, 0xD7	; 215
    1080:	43 e2       	ldi	r20, 0x23	; 35
    1082:	5c e3       	ldi	r21, 0x3C	; 60
    1084:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    1088:	88 23       	and	r24, r24
    108a:	2c f4       	brge	.+10     	; 0x1096 <pwm_set_duty+0x42>
		OCR2B = 255;
    108c:	e4 eb       	ldi	r30, 0xB4	; 180
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	80 83       	st	Z, r24
    1094:	4a c0       	rjmp	.+148    	; 0x112a <pwm_set_duty+0xd6>
	} else if (duty > 99.9) { 		// anything approaching 100%
    1096:	69 81       	ldd	r22, Y+1	; 0x01
    1098:	7a 81       	ldd	r23, Y+2	; 0x02
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	2d ec       	ldi	r18, 0xCD	; 205
    10a0:	3c ec       	ldi	r19, 0xCC	; 204
    10a2:	47 ec       	ldi	r20, 0xC7	; 199
    10a4:	52 e4       	ldi	r21, 0x42	; 66
    10a6:	0e 94 45 11 	call	0x228a	; 0x228a <__gesf2>
    10aa:	18 16       	cp	r1, r24
    10ac:	24 f4       	brge	.+8      	; 0x10b6 <pwm_set_duty+0x62>
		OCR2B = 0;
    10ae:	e4 eb       	ldi	r30, 0xB4	; 180
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	10 82       	st	Z, r1
    10b4:	3a c0       	rjmp	.+116    	; 0x112a <pwm_set_duty+0xd6>
	} else {
		OCR2B = (uint8_t)(OCR2A * (1-(duty/100)));
    10b6:	0f 2e       	mov	r0, r31
    10b8:	f4 eb       	ldi	r31, 0xB4	; 180
    10ba:	cf 2e       	mov	r12, r31
    10bc:	dd 24       	eor	r13, r13
    10be:	f0 2d       	mov	r31, r0
    10c0:	e3 eb       	ldi	r30, 0xB3	; 179
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	aa 27       	eor	r26, r26
    10cc:	97 fd       	sbrc	r25, 7
    10ce:	a0 95       	com	r26
    10d0:	ba 2f       	mov	r27, r26
    10d2:	bc 01       	movw	r22, r24
    10d4:	cd 01       	movw	r24, r26
    10d6:	0e 94 95 10 	call	0x212a	; 0x212a <__floatsisf>
    10da:	7b 01       	movw	r14, r22
    10dc:	8c 01       	movw	r16, r24
    10de:	69 81       	ldd	r22, Y+1	; 0x01
    10e0:	7a 81       	ldd	r23, Y+2	; 0x02
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	9c 81       	ldd	r25, Y+4	; 0x04
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	48 ec       	ldi	r20, 0xC8	; 200
    10ec:	52 ec       	ldi	r21, 0xC2	; 194
    10ee:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	bc 01       	movw	r22, r24
    10f8:	cd 01       	movw	r24, r26
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e8       	ldi	r20, 0x80	; 128
    1100:	5f e3       	ldi	r21, 0x3F	; 63
    1102:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__addsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	9c 01       	movw	r18, r24
    110c:	ad 01       	movw	r20, r26
    110e:	c8 01       	movw	r24, r16
    1110:	b7 01       	movw	r22, r14
    1112:	0e 94 49 11 	call	0x2292	; 0x2292 <__mulsf3>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	bc 01       	movw	r22, r24
    111c:	cd 01       	movw	r24, r26
    111e:	0e 94 67 10 	call	0x20ce	; 0x20ce <__fixunssfsi>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	f6 01       	movw	r30, r12
    1128:	80 83       	st	Z, r24
	}
	OCR2A = (uint8_t)device.pwm_freq;
    112a:	03 eb       	ldi	r16, 0xB3	; 179
    112c:	10 e0       	ldi	r17, 0x00	; 0
    112e:	80 91 e3 01 	lds	r24, 0x01E3
    1132:	90 91 e4 01 	lds	r25, 0x01E4
    1136:	a0 91 e5 01 	lds	r26, 0x01E5
    113a:	b0 91 e6 01 	lds	r27, 0x01E6
    113e:	bc 01       	movw	r22, r24
    1140:	cd 01       	movw	r24, r26
    1142:	0e 94 67 10 	call	0x20ce	; 0x20ce <__fixunssfsi>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	f8 01       	movw	r30, r16
    114c:	80 83       	st	Z, r24
	return (SC_OK);
    114e:	80 e0       	ldi	r24, 0x00	; 0
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	ff 90       	pop	r15
    1162:	ef 90       	pop	r14
    1164:	df 90       	pop	r13
    1166:	cf 90       	pop	r12
    1168:	08 95       	ret

0000116a <tick_init>:
 * tick_100ms()	  - tasks that run every 100 ms
 * tick_1sec()	  - tasks that run every 100 ms
 */

void tick_init(void)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = TICK_MODE;				// mode_settings
    1172:	e4 e4       	ldi	r30, 0x44	; 68
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	82 e0       	ldi	r24, 0x02	; 2
    1178:	80 83       	st	Z, r24
	TCCR0B = TICK_PRESCALER;		// 1024 ~= 7800 Hz
    117a:	e5 e4       	ldi	r30, 0x45	; 69
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	80 83       	st	Z, r24
	OCR0A = TICK_COUNT;
    1182:	e7 e4       	ldi	r30, 0x47	; 71
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8d e7       	ldi	r24, 0x7D	; 125
    1188:	80 83       	st	Z, r24
	TIMSK0 = (1<<OCIE0A);			// enable compare interrupts
    118a:	ee e6       	ldi	r30, 0x6E	; 110
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	80 83       	st	Z, r24
	device.tick_10ms_count = 10;
    1192:	8a e0       	ldi	r24, 0x0A	; 10
    1194:	80 93 e0 01 	sts	0x01E0, r24
	device.tick_100ms_count = 10;
    1198:	8a e0       	ldi	r24, 0x0A	; 10
    119a:	80 93 e1 01 	sts	0x01E1, r24
	device.tick_1sec_count = 10;	
    119e:	8a e0       	ldi	r24, 0x0A	; 10
    11a0:	80 93 e2 01 	sts	0x01E2, r24
}
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
    11aa:	1f 92       	push	r1
    11ac:	0f 92       	push	r0
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	0f 92       	push	r0
    11b2:	11 24       	eor	r1, r1
    11b4:	8f 93       	push	r24
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
	device.tick_flag = true;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 df 01 	sts	0x01DF, r24
}
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	8f 91       	pop	r24
    11ca:	0f 90       	pop	r0
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	0f 90       	pop	r0
    11d0:	1f 90       	pop	r1
    11d2:	18 95       	reti

000011d4 <tick_callback>:

uint8_t tick_callback(void)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
	if (device.tick_flag == false) { return (SC_NOOP);}
    11de:	80 91 df 01 	lds	r24, 0x01DF
    11e2:	88 23       	and	r24, r24
    11e4:	19 f4       	brne	.+6      	; 0x11ec <tick_callback+0x18>
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	35 c0       	rjmp	.+106    	; 0x1256 <tick_callback+0x82>

	device.tick_flag = false;
    11ec:	10 92 df 01 	sts	0x01DF, r1
	tick_1ms();
    11f0:	0e 94 30 09 	call	0x1260	; 0x1260 <tick_1ms>

	if (--device.tick_10ms_count != 0) { return (SC_OK);}
    11f4:	80 91 e0 01 	lds	r24, 0x01E0
    11f8:	81 50       	subi	r24, 0x01	; 1
    11fa:	80 93 e0 01 	sts	0x01E0, r24
    11fe:	80 91 e0 01 	lds	r24, 0x01E0
    1202:	88 23       	and	r24, r24
    1204:	11 f0       	breq	.+4      	; 0x120a <tick_callback+0x36>
    1206:	19 82       	std	Y+1, r1	; 0x01
    1208:	26 c0       	rjmp	.+76     	; 0x1256 <tick_callback+0x82>
	device.tick_10ms_count = 10;
    120a:	8a e0       	ldi	r24, 0x0A	; 10
    120c:	80 93 e0 01 	sts	0x01E0, r24
	tick_10ms();
    1210:	0e 94 39 09 	call	0x1272	; 0x1272 <tick_10ms>

	if (--device.tick_100ms_count != 0) { return (SC_OK);}
    1214:	80 91 e1 01 	lds	r24, 0x01E1
    1218:	81 50       	subi	r24, 0x01	; 1
    121a:	80 93 e1 01 	sts	0x01E1, r24
    121e:	80 91 e1 01 	lds	r24, 0x01E1
    1222:	88 23       	and	r24, r24
    1224:	11 f0       	breq	.+4      	; 0x122a <tick_callback+0x56>
    1226:	19 82       	std	Y+1, r1	; 0x01
    1228:	16 c0       	rjmp	.+44     	; 0x1256 <tick_callback+0x82>
	device.tick_100ms_count = 10;
    122a:	8a e0       	ldi	r24, 0x0A	; 10
    122c:	80 93 e1 01 	sts	0x01E1, r24
	tick_100ms();
    1230:	0e 94 40 09 	call	0x1280	; 0x1280 <tick_100ms>

	if (--device.tick_1sec_count != 0) { return (SC_OK);}
    1234:	80 91 e2 01 	lds	r24, 0x01E2
    1238:	81 50       	subi	r24, 0x01	; 1
    123a:	80 93 e2 01 	sts	0x01E2, r24
    123e:	80 91 e2 01 	lds	r24, 0x01E2
    1242:	88 23       	and	r24, r24
    1244:	11 f0       	breq	.+4      	; 0x124a <tick_callback+0x76>
    1246:	19 82       	std	Y+1, r1	; 0x01
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <tick_callback+0x82>
	device.tick_1sec_count = 10;
    124a:	8a e0       	ldi	r24, 0x0A	; 10
    124c:	80 93 e2 01 	sts	0x01E2, r24
	tick_1sec();
    1250:	0e 94 49 09 	call	0x1292	; 0x1292 <tick_1sec>

	return (SC_OK);
    1254:	19 82       	std	Y+1, r1	; 0x01
    1256:	89 81       	ldd	r24, Y+1	; 0x01
}
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <tick_1ms>:

void tick_1ms(void)				// 1ms callout
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
	sensor_callback();
    1268:	0e 94 84 05 	call	0xb08	; 0xb08 <sensor_callback>
}
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <tick_10ms>:

void tick_10ms(void)			// 10 ms callout
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
//	sensor_callback();
}
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <tick_100ms>:

void tick_100ms(void)			// 100ms callout
{
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
	heater_callback();
    1288:	0e 94 77 01 	call	0x2ee	; 0x2ee <heater_callback>
}
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <tick_1sec>:

void tick_1sec(void)			// 1 second callout
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
//	led_toggle();
}
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <led_on>:
 * led_off()
 * led_toggle()
 */

void led_on(void) 
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
	LED_PORT &= ~(LED_PIN);
    12a8:	ab e2       	ldi	r26, 0x2B	; 43
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	eb e2       	ldi	r30, 0x2B	; 43
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8b 7f       	andi	r24, 0xFB	; 251
    12b4:	8c 93       	st	X, r24
}
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <led_off>:

void led_off(void) 
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
	LED_PORT |= LED_PIN;
    12c4:	ab e2       	ldi	r26, 0x2B	; 43
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	eb e2       	ldi	r30, 0x2B	; 43
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	84 60       	ori	r24, 0x04	; 4
    12d0:	8c 93       	st	X, r24
}
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <led_toggle>:

void led_toggle(void) 
{
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	if (LED_PORT && LED_PIN) {
    12e0:	eb e2       	ldi	r30, 0x2B	; 43
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	88 23       	and	r24, r24
    12e8:	19 f0       	breq	.+6      	; 0x12f0 <led_toggle+0x18>
		led_on();
    12ea:	0e 94 50 09 	call	0x12a0	; 0x12a0 <led_on>
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <led_toggle+0x1c>
	} else {
		led_off();
    12f0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <led_off>
	}
}
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <device_reset>:
 *	device_read_byte() 	- read a byte from Kinen channel into device structs
 *	device_write_byte() - write a byte from device to Kinen channel
 */

void device_reset(void)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
	return;
}
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <device_read_byte>:

uint8_t device_read_byte(uint8_t addr, uint8_t *data)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	00 d0       	rcall	.+0      	; 0x130e <device_read_byte+0x6>
    130e:	00 d0       	rcall	.+0      	; 0x1310 <device_read_byte+0x8>
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	7b 83       	std	Y+3, r23	; 0x03
    1318:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	80 51       	subi	r24, 0x10	; 16
    131e:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	8b 30       	cpi	r24, 0x0B	; 11
    1324:	18 f0       	brcs	.+6      	; 0x132c <device_read_byte+0x24>
    1326:	88 e1       	ldi	r24, 0x18	; 24
    1328:	8c 83       	std	Y+4, r24	; 0x04
    132a:	0b c0       	rjmp	.+22     	; 0x1342 <device_read_byte+0x3a>
	*data = device.array[addr];
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	fc 01       	movw	r30, r24
    1334:	e9 51       	subi	r30, 0x19	; 25
    1336:	fe 4f       	sbci	r31, 0xFE	; 254
    1338:	80 81       	ld	r24, Z
    133a:	ea 81       	ldd	r30, Y+2	; 0x02
    133c:	fb 81       	ldd	r31, Y+3	; 0x03
    133e:	80 83       	st	Z, r24
	return (SC_OK);
    1340:	1c 82       	std	Y+4, r1	; 0x04
    1342:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <device_write_byte>:

uint8_t device_write_byte(uint8_t addr, uint8_t data)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	00 d0       	rcall	.+0      	; 0x1358 <device_write_byte+0x6>
    1358:	0f 92       	push	r0
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	80 51       	subi	r24, 0x10	; 16
    1366:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	8b 30       	cpi	r24, 0x0B	; 11
    136c:	18 f0       	brcs	.+6      	; 0x1374 <device_write_byte+0x22>
    136e:	88 e1       	ldi	r24, 0x18	; 24
    1370:	8b 83       	std	Y+3, r24	; 0x03
    1372:	09 c0       	rjmp	.+18     	; 0x1386 <device_write_byte+0x34>
	// There are no checks in here for read-only locations
	// Assumes all locations are writable.
	device.array[addr] = data;
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	88 2f       	mov	r24, r24
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	fc 01       	movw	r30, r24
    137c:	e9 51       	subi	r30, 0x19	; 25
    137e:	fe 4f       	sbci	r31, 0xFE	; 254
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	80 83       	st	Z, r24
	return (SC_OK);
    1384:	1b 82       	std	Y+3, r1	; 0x03
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <kinen_init>:
 * kinen_init() - set up Kinen subsystems; master or slave
 *
 *	Would like some kind of auto-detect here. For now it's just commenting
 */
void kinen_init(void)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
//	kinen_master_init();
	kinen_slave_init();
    139c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <kinen_slave_init>
}
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <kinen_callback>:
 *	Returns SC_NOOP if no operation was performed
 *	Returns EAGAIN if the function should block lower-priority functions
 *	in the main DISPATCH loop
 */
uint8_t kinen_callback(void)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
//	return (SC_OK);			// return from a successful operation
//	return (SC_EAGAIN);		// return if lower priority tasks should be blocked
	return (SC_NOOP);		// return if no operation was performed 
    13ae:	83 e0       	ldi	r24, 0x03	; 3
}
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <kinen_slave_init>:

/*
 * kinen_slave_init() - setup atmega SPI peripheral to be the OCB slave 
 */
void kinen_slave_init(void)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62

//	PRR |= 0x07;				// don't screw with the power reduction register
	DDRB &= ~(1<<DDB4);			// Set MISO output, all others unaffected
    13be:	a4 e2       	ldi	r26, 0x24	; 36
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e4 e2       	ldi	r30, 0x24	; 36
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	8f 7e       	andi	r24, 0xEF	; 239
    13ca:	8c 93       	st	X, r24
	SPCR = (1<<SPIE | 1<<SPE);	// Enable SPI and its interrupt, set MSB first, slave mode
    13cc:	ec e4       	ldi	r30, 0x4C	; 76
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 ec       	ldi	r24, 0xC0	; 192
    13d2:	80 83       	st	Z, r24
	SPCR = (1<<CPOL | 1<<CPHA);	// Uncomment for mode 3 operation, comment for mode 0
    13d4:	ec e4       	ldi	r30, 0x4C	; 76
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	8c e0       	ldi	r24, 0x0C	; 12
    13da:	80 83       	st	Z, r24
	memset(&ki.array, 0, sizeof(ki.array));
    13dc:	80 e6       	ldi	r24, 0x60	; 96
    13de:	91 e0       	ldi	r25, 0x01	; 1
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	40 e1       	ldi	r20, 0x10	; 16
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	0e 94 28 12 	call	0x2450	; 0x2450 <memset>

	ki_wait_time = DEVICE_WAIT_TIME;	// setup read-only values
    13ec:	8a e0       	ldi	r24, 0x0A	; 10
    13ee:	80 93 63 01 	sts	0x0163, r24
	ki_device_type = DEVICE_TYPE;
    13f2:	84 e0       	ldi	r24, 0x04	; 4
    13f4:	80 93 68 01 	sts	0x0168, r24
	ki_device_id_hi = DEVICE_ID_HI;
    13f8:	10 92 69 01 	sts	0x0169, r1
	ki_device_id_lo = DEVICE_ID_LO;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	80 93 6a 01 	sts	0x016A, r24
	ki_device_rev_major = DEVICE_REV_MAJOR;
    1402:	10 92 6b 01 	sts	0x016B, r1
	ki_device_rev_minor = DEVICE_REV_MINOR;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	80 93 6c 01 	sts	0x016C, r24
	ki_device_uuid_1 = DEVICE_UUID_1;
    140c:	10 92 6d 01 	sts	0x016D, r1
	ki_device_uuid_2 = DEVICE_UUID_2;
    1410:	10 92 6e 01 	sts	0x016E, r1
	ki_device_uuid_3 = DEVICE_UUID_3;
    1414:	10 92 6f 01 	sts	0x016F, r1

	ki_status = SC_OK;
    1418:	10 92 61 01 	sts	0x0161, r1
	SPDR = ki_status;
    141c:	ee e4       	ldi	r30, 0x4E	; 78
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 91 61 01 	lds	r24, 0x0161
    1424:	80 83       	st	Z, r24
}
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <__vector_17>:
 * SPI Slave RX Interrupt() - interrupts on byte received
 *
 * Uses a 2 phase state machine to toggle back and forth between ADDR and DATA bytes
 */
ISR(SPI_STC_vect)
{
    142c:	1f 92       	push	r1
    142e:	0f 92       	push	r0
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	0f 92       	push	r0
    1434:	11 24       	eor	r1, r1
    1436:	2f 93       	push	r18
    1438:	3f 93       	push	r19
    143a:	4f 93       	push	r20
    143c:	5f 93       	push	r21
    143e:	6f 93       	push	r22
    1440:	7f 93       	push	r23
    1442:	8f 93       	push	r24
    1444:	9f 93       	push	r25
    1446:	af 93       	push	r26
    1448:	bf 93       	push	r27
    144a:	ef 93       	push	r30
    144c:	ff 93       	push	r31
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
	// receive address byte
	if (ki_slave.phase == KINEN_ADDR) {
    1456:	80 91 00 01 	lds	r24, 0x0100
    145a:	88 23       	and	r24, r24
    145c:	c9 f5       	brne	.+114    	; 0x14d0 <__vector_17+0xa4>
		ki_slave.phase = KINEN_DATA;	// advance phase
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	80 93 00 01 	sts	0x0100, r24
		ki_slave.addr = SPDR;		// read and save the address byte
    1464:	ee e4       	ldi	r30, 0x4E	; 78
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	80 93 01 01 	sts	0x0101, r24
		if (ki_command == KINEN_WRITE) { // write is simple...
    146e:	80 91 60 01 	lds	r24, 0x0160
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	29 f4       	brne	.+10     	; 0x1480 <__vector_17+0x54>
			SPDR = KINEN_OK_BYTE;			// already saved addr, now return an OK
    1476:	ee e4       	ldi	r30, 0x4E	; 78
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	8a e5       	ldi	r24, 0x5A	; 90
    147c:	80 83       	st	Z, r24
    147e:	4a c0       	rjmp	.+148    	; 0x1514 <__vector_17+0xe8>
		} else {
			if (ki_slave.addr < KINEN_COMMON_MAX) {	// handle OCB address space
    1480:	80 91 01 01 	lds	r24, 0x0101
    1484:	80 31       	cpi	r24, 0x10	; 16
    1486:	60 f4       	brcc	.+24     	; 0x14a0 <__vector_17+0x74>
				SPDR = ki.array[ki_slave.addr];
    1488:	ae e4       	ldi	r26, 0x4E	; 78
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	80 91 01 01 	lds	r24, 0x0101
    1490:	88 2f       	mov	r24, r24
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	fc 01       	movw	r30, r24
    1496:	e0 5a       	subi	r30, 0xA0	; 160
    1498:	fe 4f       	sbci	r31, 0xFE	; 254
    149a:	80 81       	ld	r24, Z
    149c:	8c 93       	st	X, r24
    149e:	3a c0       	rjmp	.+116    	; 0x1514 <__vector_17+0xe8>
			} else {								// handle device address space
				if ((ki_status = device_read_byte(ki_slave.addr, &ki_slave.data)) == SC_OK) {
    14a0:	80 91 01 01 	lds	r24, 0x0101
    14a4:	22 e0       	ldi	r18, 0x02	; 2
    14a6:	31 e0       	ldi	r19, 0x01	; 1
    14a8:	b9 01       	movw	r22, r18
    14aa:	0e 94 84 09 	call	0x1308	; 0x1308 <device_read_byte>
    14ae:	80 93 61 01 	sts	0x0161, r24
    14b2:	80 91 61 01 	lds	r24, 0x0161
    14b6:	88 23       	and	r24, r24
    14b8:	31 f4       	brne	.+12     	; 0x14c6 <__vector_17+0x9a>
					SPDR = ki_slave.data;
    14ba:	ee e4       	ldi	r30, 0x4E	; 78
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 91 02 01 	lds	r24, 0x0102
    14c2:	80 83       	st	Z, r24
    14c4:	27 c0       	rjmp	.+78     	; 0x1514 <__vector_17+0xe8>
				} else {
					SPDR = KINEN_ERR_BYTE;
    14c6:	ee e4       	ldi	r30, 0x4E	; 78
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	85 ea       	ldi	r24, 0xA5	; 165
    14cc:	80 83       	st	Z, r24
    14ce:	22 c0       	rjmp	.+68     	; 0x1514 <__vector_17+0xe8>
			}
		}

	// receive data byte
	} else {
		ki_slave.phase = KINEN_ADDR;	// advance phase
    14d0:	10 92 00 01 	sts	0x0100, r1
		ki_slave.data = SPDR;		// read and save the data byte
    14d4:	ee e4       	ldi	r30, 0x4E	; 78
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	80 93 02 01 	sts	0x0102, r24
		if (ki_command == KINEN_WRITE) {
    14de:	80 91 60 01 	lds	r24, 0x0160
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	b9 f4       	brne	.+46     	; 0x1514 <__vector_17+0xe8>
			if (ki_slave.addr < KINEN_COMMON_MAX) {
    14e6:	80 91 01 01 	lds	r24, 0x0101
    14ea:	80 31       	cpi	r24, 0x10	; 16
    14ec:	50 f4       	brcc	.+20     	; 0x1502 <__vector_17+0xd6>
				ki_status = _slave_write_byte(ki_slave.addr, ki_slave.data);
    14ee:	80 91 01 01 	lds	r24, 0x0101
    14f2:	90 91 02 01 	lds	r25, 0x0102
    14f6:	69 2f       	mov	r22, r25
    14f8:	0e 94 9d 0a 	call	0x153a	; 0x153a <_slave_write_byte>
    14fc:	80 93 61 01 	sts	0x0161, r24
    1500:	09 c0       	rjmp	.+18     	; 0x1514 <__vector_17+0xe8>
			} else {
				ki_status = device_write_byte(ki_slave.addr, ki_slave.data);
    1502:	80 91 01 01 	lds	r24, 0x0101
    1506:	90 91 02 01 	lds	r25, 0x0102
    150a:	69 2f       	mov	r22, r25
    150c:	0e 94 a9 09 	call	0x1352	; 0x1352 <device_write_byte>
    1510:	80 93 61 01 	sts	0x0161, r24
			}
		}
	}
}
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	ff 91       	pop	r31
    151a:	ef 91       	pop	r30
    151c:	bf 91       	pop	r27
    151e:	af 91       	pop	r26
    1520:	9f 91       	pop	r25
    1522:	8f 91       	pop	r24
    1524:	7f 91       	pop	r23
    1526:	6f 91       	pop	r22
    1528:	5f 91       	pop	r21
    152a:	4f 91       	pop	r20
    152c:	3f 91       	pop	r19
    152e:	2f 91       	pop	r18
    1530:	0f 90       	pop	r0
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	0f 90       	pop	r0
    1536:	1f 90       	pop	r1
    1538:	18 95       	reti

0000153a <_slave_write_byte>:

/* 
 * _slave_write_byte() - helper to write byte to a non-device address
 */
static uint8_t _slave_write_byte(const uint8_t addr, const uint8_t data)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	00 d0       	rcall	.+0      	; 0x1540 <_slave_write_byte+0x6>
    1540:	0f 92       	push	r0
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	6a 83       	std	Y+2, r22	; 0x02
	if (addr == KINEN_COMMAND) {
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	88 23       	and	r24, r24
    154e:	21 f4       	brne	.+8      	; 0x1558 <_slave_write_byte+0x1e>
		ki_command = data; 
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	80 93 60 01 	sts	0x0160, r24
    1556:	12 c0       	rjmp	.+36     	; 0x157c <_slave_write_byte+0x42>

	} else if (addr == KINEN_ADDR_PAGE) { 
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	84 30       	cpi	r24, 0x04	; 4
    155c:	21 f4       	brne	.+8      	; 0x1566 <_slave_write_byte+0x2c>
		ki_addr_page = data; 
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	80 93 64 01 	sts	0x0164, r24
    1564:	0b c0       	rjmp	.+22     	; 0x157c <_slave_write_byte+0x42>

	} else if (addr == KINEN_RESET) {
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	85 30       	cpi	r24, 0x05	; 5
    156a:	29 f4       	brne	.+10     	; 0x1576 <_slave_write_byte+0x3c>
		kinen_slave_init();
    156c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <kinen_slave_init>
		device_reset();
    1570:	0e 94 7d 09 	call	0x12fa	; 0x12fa <device_reset>
    1574:	03 c0       	rjmp	.+6      	; 0x157c <_slave_write_byte+0x42>

	} else {
		return (SC_READ_ONLY_ADDRESS);
    1576:	89 e1       	ldi	r24, 0x19	; 25
    1578:	8b 83       	std	Y+3, r24	; 0x03
    157a:	01 c0       	rjmp	.+2      	; 0x157e <_slave_write_byte+0x44>
	}
	return (SC_OK);
    157c:	1b 82       	std	Y+3, r1	; 0x03
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <std_dev>:
 *
 *	"A lot of people talk about standard deviation but what is a standard deviant?"
 */

double std_dev(double a[], uint8_t n, double *mean) 
{
    158c:	ef 92       	push	r14
    158e:	ff 92       	push	r15
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	66 97       	sbiw	r28, 0x16	; 22
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	9f 87       	std	Y+15, r25	; 0x0f
    15aa:	8e 87       	std	Y+14, r24	; 0x0e
    15ac:	68 8b       	std	Y+16, r22	; 0x10
    15ae:	5a 8b       	std	Y+18, r21	; 0x12
    15b0:	49 8b       	std	Y+17, r20	; 0x11
	if(n == 0) { return (0);}
    15b2:	88 89       	ldd	r24, Y+16	; 0x10
    15b4:	88 23       	and	r24, r24
    15b6:	49 f4       	brne	.+18     	; 0x15ca <std_dev+0x3e>
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a0 e0       	ldi	r26, 0x00	; 0
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	8b 8b       	std	Y+19, r24	; 0x13
    15c2:	9c 8b       	std	Y+20, r25	; 0x14
    15c4:	ad 8b       	std	Y+21, r26	; 0x15
    15c6:	be 8b       	std	Y+22, r27	; 0x16
    15c8:	ae c0       	rjmp	.+348    	; 0x1726 <std_dev+0x19a>
	double sum = 0;
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	a0 e0       	ldi	r26, 0x00	; 0
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	8a 87       	std	Y+10, r24	; 0x0a
    15d4:	9b 87       	std	Y+11, r25	; 0x0b
    15d6:	ac 87       	std	Y+12, r26	; 0x0c
    15d8:	bd 87       	std	Y+13, r27	; 0x0d
	double sq_sum = 0;
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	a0 e0       	ldi	r26, 0x00	; 0
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	8e 83       	std	Y+6, r24	; 0x06
    15e4:	9f 83       	std	Y+7, r25	; 0x07
    15e6:	a8 87       	std	Y+8, r26	; 0x08
    15e8:	b9 87       	std	Y+9, r27	; 0x09
	for(uint8_t i=0; i<n; ++i) {
    15ea:	19 82       	std	Y+1, r1	; 0x01
    15ec:	43 c0       	rjmp	.+134    	; 0x1674 <std_dev+0xe8>
		sum += a[i];
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	9c 01       	movw	r18, r24
    15f6:	22 0f       	add	r18, r18
    15f8:	33 1f       	adc	r19, r19
    15fa:	22 0f       	add	r18, r18
    15fc:	33 1f       	adc	r19, r19
    15fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1600:	9f 85       	ldd	r25, Y+15	; 0x0f
    1602:	fc 01       	movw	r30, r24
    1604:	e2 0f       	add	r30, r18
    1606:	f3 1f       	adc	r31, r19
    1608:	20 81       	ld	r18, Z
    160a:	31 81       	ldd	r19, Z+1	; 0x01
    160c:	42 81       	ldd	r20, Z+2	; 0x02
    160e:	53 81       	ldd	r21, Z+3	; 0x03
    1610:	6a 85       	ldd	r22, Y+10	; 0x0a
    1612:	7b 85       	ldd	r23, Y+11	; 0x0b
    1614:	8c 85       	ldd	r24, Y+12	; 0x0c
    1616:	9d 85       	ldd	r25, Y+13	; 0x0d
    1618:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__addsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	8a 87       	std	Y+10, r24	; 0x0a
    1622:	9b 87       	std	Y+11, r25	; 0x0b
    1624:	ac 87       	std	Y+12, r26	; 0x0c
    1626:	bd 87       	std	Y+13, r27	; 0x0d
		sq_sum += square(a[i]);
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	88 2f       	mov	r24, r24
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	9c 01       	movw	r18, r24
    1630:	22 0f       	add	r18, r18
    1632:	33 1f       	adc	r19, r19
    1634:	22 0f       	add	r18, r18
    1636:	33 1f       	adc	r19, r19
    1638:	8e 85       	ldd	r24, Y+14	; 0x0e
    163a:	9f 85       	ldd	r25, Y+15	; 0x0f
    163c:	fc 01       	movw	r30, r24
    163e:	e2 0f       	add	r30, r18
    1640:	f3 1f       	adc	r31, r19
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	a2 81       	ldd	r26, Z+2	; 0x02
    1648:	b3 81       	ldd	r27, Z+3	; 0x03
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 ee 11 	call	0x23dc	; 0x23dc <square>
    1652:	9b 01       	movw	r18, r22
    1654:	ac 01       	movw	r20, r24
    1656:	6e 81       	ldd	r22, Y+6	; 0x06
    1658:	7f 81       	ldd	r23, Y+7	; 0x07
    165a:	88 85       	ldd	r24, Y+8	; 0x08
    165c:	99 85       	ldd	r25, Y+9	; 0x09
    165e:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__addsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	8e 83       	std	Y+6, r24	; 0x06
    1668:	9f 83       	std	Y+7, r25	; 0x07
    166a:	a8 87       	std	Y+8, r26	; 0x08
    166c:	b9 87       	std	Y+9, r27	; 0x09
double std_dev(double a[], uint8_t n, double *mean) 
{
	if(n == 0) { return (0);}
	double sum = 0;
	double sq_sum = 0;
	for(uint8_t i=0; i<n; ++i) {
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	8f 5f       	subi	r24, 0xFF	; 255
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	99 81       	ldd	r25, Y+1	; 0x01
    1676:	88 89       	ldd	r24, Y+16	; 0x10
    1678:	98 17       	cp	r25, r24
    167a:	08 f4       	brcc	.+2      	; 0x167e <std_dev+0xf2>
    167c:	b8 cf       	rjmp	.-144    	; 0x15ee <std_dev+0x62>
		sum += a[i];
		sq_sum += square(a[i]);
	}
	*mean = sum / n;
    167e:	88 89       	ldd	r24, Y+16	; 0x10
    1680:	88 2f       	mov	r24, r24
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	aa 27       	eor	r26, r26
    1686:	97 fd       	sbrc	r25, 7
    1688:	a0 95       	com	r26
    168a:	ba 2f       	mov	r27, r26
    168c:	bc 01       	movw	r22, r24
    168e:	cd 01       	movw	r24, r26
    1690:	0e 94 95 10 	call	0x212a	; 0x212a <__floatsisf>
    1694:	9b 01       	movw	r18, r22
    1696:	ac 01       	movw	r20, r24
    1698:	6a 85       	ldd	r22, Y+10	; 0x0a
    169a:	7b 85       	ldd	r23, Y+11	; 0x0b
    169c:	8c 85       	ldd	r24, Y+12	; 0x0c
    169e:	9d 85       	ldd	r25, Y+13	; 0x0d
    16a0:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	e9 89       	ldd	r30, Y+17	; 0x11
    16aa:	fa 89       	ldd	r31, Y+18	; 0x12
    16ac:	80 83       	st	Z, r24
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	a2 83       	std	Z+2, r26	; 0x02
    16b2:	b3 83       	std	Z+3, r27	; 0x03
	double variance = (sq_sum / n) - square(*mean);
    16b4:	88 89       	ldd	r24, Y+16	; 0x10
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	aa 27       	eor	r26, r26
    16bc:	97 fd       	sbrc	r25, 7
    16be:	a0 95       	com	r26
    16c0:	ba 2f       	mov	r27, r26
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	0e 94 95 10 	call	0x212a	; 0x212a <__floatsisf>
    16ca:	9b 01       	movw	r18, r22
    16cc:	ac 01       	movw	r20, r24
    16ce:	6e 81       	ldd	r22, Y+6	; 0x06
    16d0:	7f 81       	ldd	r23, Y+7	; 0x07
    16d2:	88 85       	ldd	r24, Y+8	; 0x08
    16d4:	99 85       	ldd	r25, Y+9	; 0x09
    16d6:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__divsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	7c 01       	movw	r14, r24
    16e0:	8d 01       	movw	r16, r26
    16e2:	e9 89       	ldd	r30, Y+17	; 0x11
    16e4:	fa 89       	ldd	r31, Y+18	; 0x12
    16e6:	80 81       	ld	r24, Z
    16e8:	91 81       	ldd	r25, Z+1	; 0x01
    16ea:	a2 81       	ldd	r26, Z+2	; 0x02
    16ec:	b3 81       	ldd	r27, Z+3	; 0x03
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 ee 11 	call	0x23dc	; 0x23dc <square>
    16f6:	9b 01       	movw	r18, r22
    16f8:	ac 01       	movw	r20, r24
    16fa:	c8 01       	movw	r24, r16
    16fc:	b7 01       	movw	r22, r14
    16fe:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__subsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	8a 83       	std	Y+2, r24	; 0x02
    1708:	9b 83       	std	Y+3, r25	; 0x03
    170a:	ac 83       	std	Y+4, r26	; 0x04
    170c:	bd 83       	std	Y+5, r27	; 0x05
	return sqrt(variance);
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	9b 81       	ldd	r25, Y+3	; 0x03
    1712:	ac 81       	ldd	r26, Y+4	; 0x04
    1714:	bd 81       	ldd	r27, Y+5	; 0x05
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 b0 11 	call	0x2360	; 0x2360 <sqrt>
    171e:	6b 8b       	std	Y+19, r22	; 0x13
    1720:	7c 8b       	std	Y+20, r23	; 0x14
    1722:	8d 8b       	std	Y+21, r24	; 0x15
    1724:	9e 8b       	std	Y+22, r25	; 0x16
    1726:	8b 89       	ldd	r24, Y+19	; 0x13
    1728:	9c 89       	ldd	r25, Y+20	; 0x14
    172a:	ad 89       	ldd	r26, Y+21	; 0x15
    172c:	be 89       	ldd	r27, Y+22	; 0x16
}
    172e:	bc 01       	movw	r22, r24
    1730:	cd 01       	movw	r24, r26
    1732:	66 96       	adiw	r28, 0x16	; 22
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	1f 91       	pop	r17
    1744:	0f 91       	pop	r16
    1746:	ff 90       	pop	r15
    1748:	ef 90       	pop	r14
    174a:	08 95       	ret

0000174c <set_baud_rate>:
uint8_t rx_buffer_tail = 0;
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_buffer_head = 0;
volatile uint8_t tx_buffer_tail = 0;

static void set_baud_rate(long baud) {
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <set_baud_rate+0x6>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <set_baud_rate+0x8>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <set_baud_rate+0xa>
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	6b 83       	std	Y+3, r22	; 0x03
    175c:	7c 83       	std	Y+4, r23	; 0x04
    175e:	8d 83       	std	Y+5, r24	; 0x05
    1760:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t UBRR0_value = (F_CPU / (8 * baud)) - 1;
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	ad 81       	ldd	r26, Y+5	; 0x05
    1768:	be 81       	ldd	r27, Y+6	; 0x06
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	aa 1f       	adc	r26, r26
    1770:	bb 1f       	adc	r27, r27
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	aa 1f       	adc	r26, r26
    1778:	bb 1f       	adc	r27, r27
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	aa 1f       	adc	r26, r26
    1780:	bb 1f       	adc	r27, r27
    1782:	9c 01       	movw	r18, r24
    1784:	ad 01       	movw	r20, r26
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	92 e1       	ldi	r25, 0x12	; 18
    178a:	aa e7       	ldi	r26, 0x7A	; 122
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	0e 94 06 12 	call	0x240c	; 0x240c <__udivmodsi4>
    1796:	da 01       	movw	r26, r20
    1798:	c9 01       	movw	r24, r18
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	9a 83       	std	Y+2, r25	; 0x02
    179e:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = UBRR0_value >> 8;
    17a0:	e5 ec       	ldi	r30, 0xC5	; 197
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	9a 81       	ldd	r25, Y+2	; 0x02
    17a8:	89 2f       	mov	r24, r25
    17aa:	99 27       	eor	r25, r25
    17ac:	80 83       	st	Z, r24
	UBRR0L = UBRR0_value;
    17ae:	e4 ec       	ldi	r30, 0xC4	; 196
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	80 83       	st	Z, r24
	UCSR0A &= ~(1<<U2X0);		// baud doubler off
    17b6:	a0 ec       	ldi	r26, 0xC0	; 192
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e0 ec       	ldi	r30, 0xC0	; 192
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	8d 7f       	andi	r24, 0xFD	; 253
    17c2:	8c 93       	st	X, r24
}
    17c4:	26 96       	adiw	r28, 0x06	; 6
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <serial_init>:

void serial_init(long baud)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	00 d0       	rcall	.+0      	; 0x17dc <serial_init+0x6>
    17dc:	00 d0       	rcall	.+0      	; 0x17de <serial_init+0x8>
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	69 83       	std	Y+1, r22	; 0x01
    17e4:	7a 83       	std	Y+2, r23	; 0x02
    17e6:	8b 83       	std	Y+3, r24	; 0x03
    17e8:	9c 83       	std	Y+4, r25	; 0x04
	set_baud_rate(baud);
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	ab 81       	ldd	r26, Y+3	; 0x03
    17f0:	bc 81       	ldd	r27, Y+4	; 0x04
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	0e 94 a6 0b 	call	0x174c	; 0x174c <set_baud_rate>
	UCSR0B |= 1<<RXEN0;			// enable rx and tx
    17fa:	a1 ec       	ldi	r26, 0xC1	; 193
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e1 ec       	ldi	r30, 0xC1	; 193
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	80 61       	ori	r24, 0x10	; 16
    1806:	8c 93       	st	X, r24
	UCSR0B |= 1<<TXEN0;	
    1808:	a1 ec       	ldi	r26, 0xC1	; 193
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e1 ec       	ldi	r30, 0xC1	; 193
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	88 60       	ori	r24, 0x08	; 8
    1814:	8c 93       	st	X, r24
	UCSR0B |= 1<<RXCIE0;		// enable interrupt on complete reception of a byte
    1816:	a1 ec       	ldi	r26, 0xC1	; 193
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e1 ec       	ldi	r30, 0xC1	; 193
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	80 68       	ori	r24, 0x80	; 128
    1822:	8c 93       	st	X, r24
	// USART defaults to 8-bit, no parity, 1 stop bit
}
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <serial_write>:

void serial_write(uint8_t data) {
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	00 d0       	rcall	.+0      	; 0x1838 <serial_write+0x6>
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = tx_buffer_head + 1;	// Calculate next head
    183e:	80 91 05 01 	lds	r24, 0x0105
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	89 83       	std	Y+1, r24	; 0x01
	if (next_head == TX_BUFFER_SIZE) {
		next_head = 0; 
	}
	// Enable Data Register Empty Interrupt to make sure tx-streaming is running
	UCSR0B |= (1<<UDRIE0); 
    1846:	a1 ec       	ldi	r26, 0xC1	; 193
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e1 ec       	ldi	r30, 0xC1	; 193
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	80 62       	ori	r24, 0x20	; 32
    1852:	8c 93       	st	X, r24
	while (next_head == tx_buffer_tail); 	// Wait until there is space in the buffer
    1854:	90 91 06 01 	lds	r25, 0x0106
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	89 17       	cp	r24, r25
    185c:	d9 f3       	breq	.-10     	; 0x1854 <serial_write+0x22>

	tx_buffer[tx_buffer_head] = data;		// Store data and advance head
    185e:	80 91 05 01 	lds	r24, 0x0105
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	fc 01       	movw	r30, r24
    1868:	ee 50       	subi	r30, 0x0E	; 14
    186a:	fd 4f       	sbci	r31, 0xFD	; 253
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	80 83       	st	Z, r24
	tx_buffer_head = next_head;
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	80 93 05 01 	sts	0x0105, r24
}
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <__vector_19>:

// Data Register Empty Interrupt handler
ISR(USART_UDRE_vect)
{
    1880:	1f 92       	push	r1
    1882:	0f 92       	push	r0
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	0f 92       	push	r0
    1888:	11 24       	eor	r1, r1
    188a:	8f 93       	push	r24
    188c:	9f 93       	push	r25
    188e:	af 93       	push	r26
    1890:	bf 93       	push	r27
    1892:	ef 93       	push	r30
    1894:	ff 93       	push	r31
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	0f 92       	push	r0
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
	uint8_t tail = tx_buffer_tail;	// Temporary tx_buffer_tail (to optimize for volatile)
    18a0:	80 91 06 01 	lds	r24, 0x0106
    18a4:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = tx_buffer[tail];			// Send a byte from the buffer	
    18a6:	a6 ec       	ldi	r26, 0xC6	; 198
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	fc 01       	movw	r30, r24
    18b2:	ee 50       	subi	r30, 0x0E	; 14
    18b4:	fd 4f       	sbci	r31, 0xFD	; 253
    18b6:	80 81       	ld	r24, Z
    18b8:	8c 93       	st	X, r24
    tail++;							// Update tail position
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	8f 5f       	subi	r24, 0xFF	; 255
    18be:	89 83       	std	Y+1, r24	; 0x01
    if (tail == TX_BUFFER_SIZE) { tail = 0; }
	tx_buffer_tail = tail;
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	80 93 06 01 	sts	0x0106, r24

	// Turn off Data Register Empty Interrupt to stop tx-streaming if this concludes the transfer
	if (tail == tx_buffer_head) { 
    18c6:	90 91 05 01 	lds	r25, 0x0105
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	89 17       	cp	r24, r25
    18ce:	39 f4       	brne	.+14     	; 0x18de <__vector_19+0x5e>
		UCSR0B &= ~(1<<UDRIE0);
    18d0:	a1 ec       	ldi	r26, 0xC1	; 193
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e1 ec       	ldi	r30, 0xC1	; 193
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	8f 7d       	andi	r24, 0xDF	; 223
    18dc:	8c 93       	st	X, r24
	}
}
    18de:	0f 90       	pop	r0
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	ff 91       	pop	r31
    18e6:	ef 91       	pop	r30
    18e8:	bf 91       	pop	r27
    18ea:	af 91       	pop	r26
    18ec:	9f 91       	pop	r25
    18ee:	8f 91       	pop	r24
    18f0:	0f 90       	pop	r0
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	0f 90       	pop	r0
    18f6:	1f 90       	pop	r1
    18f8:	18 95       	reti

000018fa <serial_read>:

uint8_t serial_read()
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <serial_read+0x6>
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
	if (rx_buffer_head == rx_buffer_tail) {
    1904:	90 91 03 01 	lds	r25, 0x0103
    1908:	80 91 04 01 	lds	r24, 0x0104
    190c:	98 17       	cp	r25, r24
    190e:	19 f4       	brne	.+6      	; 0x1916 <serial_read+0x1c>
		return SERIAL_NO_DATA;
    1910:	8f ef       	ldi	r24, 0xFF	; 255
    1912:	8a 83       	std	Y+2, r24	; 0x02
    1914:	10 c0       	rjmp	.+32     	; 0x1936 <serial_read+0x3c>
	} else {
		uint8_t data = rx_buffer[rx_buffer_tail];
    1916:	80 91 04 01 	lds	r24, 0x0104
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	fc 01       	movw	r30, r24
    1920:	ee 50       	subi	r30, 0x0E	; 14
    1922:	fe 4f       	sbci	r31, 0xFE	; 254
    1924:	80 81       	ld	r24, Z
    1926:	89 83       	std	Y+1, r24	; 0x01
		rx_buffer_tail++;
    1928:	80 91 04 01 	lds	r24, 0x0104
    192c:	8f 5f       	subi	r24, 0xFF	; 255
    192e:	80 93 04 01 	sts	0x0104, r24
		if (rx_buffer_tail == RX_BUFFER_SIZE) { rx_buffer_tail = 0; }
		return data;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	8a 83       	std	Y+2, r24	; 0x02
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <__vector_18>:

ISR(USART_RX_vect)
{
    1942:	1f 92       	push	r1
    1944:	0f 92       	push	r0
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	0f 92       	push	r0
    194a:	11 24       	eor	r1, r1
    194c:	8f 93       	push	r24
    194e:	9f 93       	push	r25
    1950:	ef 93       	push	r30
    1952:	ff 93       	push	r31
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	00 d0       	rcall	.+0      	; 0x195a <__vector_18+0x18>
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = UDR0;
    195e:	e6 ec       	ldi	r30, 0xC6	; 198
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = rx_buffer_head + 1;
    1966:	80 91 03 01 	lds	r24, 0x0103
    196a:	8f 5f       	subi	r24, 0xFF	; 255
    196c:	89 83       	std	Y+1, r24	; 0x01
	
	if (next_head == RX_BUFFER_SIZE) { 
		next_head = 0;
	}
	if (next_head != rx_buffer_tail) {      // Write data to buffer unless it is full.
    196e:	90 91 04 01 	lds	r25, 0x0104
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	89 17       	cp	r24, r25
    1976:	61 f0       	breq	.+24     	; 0x1990 <__vector_18+0x4e>
		rx_buffer[rx_buffer_head] = data;
    1978:	80 91 03 01 	lds	r24, 0x0103
    197c:	88 2f       	mov	r24, r24
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	fc 01       	movw	r30, r24
    1982:	ee 50       	subi	r30, 0x0E	; 14
    1984:	fe 4f       	sbci	r31, 0xFE	; 254
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	80 83       	st	Z, r24
		rx_buffer_head = next_head;    
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	80 93 03 01 	sts	0x0103, r24
	}
}
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	ff 91       	pop	r31
    199a:	ef 91       	pop	r30
    199c:	9f 91       	pop	r25
    199e:	8f 91       	pop	r24
    19a0:	0f 90       	pop	r0
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	0f 90       	pop	r0
    19a6:	1f 90       	pop	r1
    19a8:	18 95       	reti

000019aa <serial_reset_read_buffer>:

void serial_reset_read_buffer() 
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
  rx_buffer_tail = rx_buffer_head;
    19b2:	80 91 03 01 	lds	r24, 0x0103
    19b6:	80 93 04 01 	sts	0x0104, r24
}
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <printString>:

#include "print.h"
#include "serial.h"

void printString(const char *s)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <printString+0x6>
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	89 83       	std	Y+1, r24	; 0x01
    19ce:	0b c0       	rjmp	.+22     	; 0x19e6 <printString+0x26>
  while (*s)
    serial_write(*s++);
    19d0:	e9 81       	ldd	r30, Y+1	; 0x01
    19d2:	fa 81       	ldd	r31, Y+2	; 0x02
    19d4:	20 81       	ld	r18, Z
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	9a 83       	std	Y+2, r25	; 0x02
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	82 2f       	mov	r24, r18
    19e2:	0e 94 19 0c 	call	0x1832	; 0x1832 <serial_write>
#include "print.h"
#include "serial.h"

void printString(const char *s)
{
  while (*s)
    19e6:	e9 81       	ldd	r30, Y+1	; 0x01
    19e8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ea:	80 81       	ld	r24, Z
    19ec:	88 23       	and	r24, r24
    19ee:	81 f7       	brne	.-32     	; 0x19d0 <printString+0x10>
    serial_write(*s++);
}
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <printPgmString+0x6>
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <printPgmString+0x8>
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <printPgmString+0xa>
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	9e 83       	std	Y+6, r25	; 0x06
    1a0a:	8d 83       	std	Y+5, r24	; 0x05
    1a0c:	03 c0       	rjmp	.+6      	; 0x1a14 <printPgmString+0x1a>
  char c;
  while ((c = pgm_read_byte_near(s++)))
    serial_write(c);
    1a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a10:	0e 94 19 0c 	call	0x1832	; 0x1832 <serial_write>

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
  while ((c = pgm_read_byte_near(s++)))
    1a14:	8d 81       	ldd	r24, Y+5	; 0x05
    1a16:	9e 81       	ldd	r25, Y+6	; 0x06
    1a18:	9b 83       	std	Y+3, r25	; 0x03
    1a1a:	8a 83       	std	Y+2, r24	; 0x02
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	9e 83       	std	Y+6, r25	; 0x06
    1a24:	8d 83       	std	Y+5, r24	; 0x05
    1a26:	ea 81       	ldd	r30, Y+2	; 0x02
    1a28:	fb 81       	ldd	r31, Y+3	; 0x03
    1a2a:	84 91       	lpm	r24, Z+
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	8c 83       	std	Y+4, r24	; 0x04
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	88 23       	and	r24, r24
    1a36:	59 f7       	brne	.-42     	; 0x1a0e <printPgmString+0x14>
    serial_write(c);
}
    1a38:	26 96       	adiw	r28, 0x06	; 6
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <print_uint8_base2>:
// 			'0' + buf[i - 1] :
// 			'A' + buf[i - 1] - 10);
// }

void print_uint8_base2(uint8_t n)
{ 
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	2a 97       	sbiw	r28, 0x0a	; 10
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char buf[8];
	uint8_t i = 0;
    1a60:	19 82       	std	Y+1, r1	; 0x01
    1a62:	12 c0       	rjmp	.+36     	; 0x1a88 <print_uint8_base2+0x3e>

	for (; i < 8; i++) {
		buf[i] = n & 1;
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a6c:	48 2f       	mov	r20, r24
    1a6e:	41 70       	andi	r20, 0x01	; 1
    1a70:	ce 01       	movw	r24, r28
    1a72:	02 96       	adiw	r24, 0x02	; 2
    1a74:	fc 01       	movw	r30, r24
    1a76:	e2 0f       	add	r30, r18
    1a78:	f3 1f       	adc	r31, r19
    1a7a:	40 83       	st	Z, r20
		n >>= 1;
    1a7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a7e:	86 95       	lsr	r24
    1a80:	8a 87       	std	Y+10, r24	; 0x0a
void print_uint8_base2(uint8_t n)
{ 
	unsigned char buf[8];
	uint8_t i = 0;

	for (; i < 8; i++) {
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	8f 5f       	subi	r24, 0xFF	; 255
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	88 30       	cpi	r24, 0x08	; 8
    1a8c:	58 f3       	brcs	.-42     	; 0x1a64 <print_uint8_base2+0x1a>
    1a8e:	12 c0       	rjmp	.+36     	; 0x1ab4 <print_uint8_base2+0x6a>
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
		serial_write('0' + buf[i - 1]);
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	88 2f       	mov	r24, r24
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	9c 01       	movw	r18, r24
    1a98:	21 50       	subi	r18, 0x01	; 1
    1a9a:	30 40       	sbci	r19, 0x00	; 0
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	02 96       	adiw	r24, 0x02	; 2
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	e2 0f       	add	r30, r18
    1aa4:	f3 1f       	adc	r31, r19
    1aa6:	80 81       	ld	r24, Z
    1aa8:	80 5d       	subi	r24, 0xD0	; 208
    1aaa:	0e 94 19 0c 	call	0x1832	; 0x1832 <serial_write>
	for (; i < 8; i++) {
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	81 50       	subi	r24, 0x01	; 1
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	88 23       	and	r24, r24
    1ab8:	59 f7       	brne	.-42     	; 0x1a90 <print_uint8_base2+0x46>
		serial_write('0' + buf[i - 1]);
}
    1aba:	2a 96       	adiw	r28, 0x0a	; 10
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <print_uint32_base10>:

static void print_uint32_base10(unsigned long n)
{ 
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	2f 97       	sbiw	r28, 0x0f	; 15
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	6c 87       	std	Y+12, r22	; 0x0c
    1ae6:	7d 87       	std	Y+13, r23	; 0x0d
    1ae8:	8e 87       	std	Y+14, r24	; 0x0e
    1aea:	9f 87       	std	Y+15, r25	; 0x0f
  unsigned char buf[10]; 
  uint8_t i = 0;
    1aec:	19 82       	std	Y+1, r1	; 0x01
  
  if (n == 0) {
    1aee:	8c 85       	ldd	r24, Y+12	; 0x0c
    1af0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1af2:	ae 85       	ldd	r26, Y+14	; 0x0e
    1af4:	bf 85       	ldd	r27, Y+15	; 0x0f
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	a1 05       	cpc	r26, r1
    1afa:	b1 05       	cpc	r27, r1
    1afc:	91 f5       	brne	.+100    	; 0x1b62 <print_uint32_base10+0x96>
    serial_write('0');
    1afe:	80 e3       	ldi	r24, 0x30	; 48
    1b00:	0e 94 19 0c 	call	0x1832	; 0x1832 <serial_write>
    1b04:	4b c0       	rjmp	.+150    	; 0x1b9c <print_uint32_base10+0xd0>
    return;
  } 
  
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	08 2f       	mov	r16, r24
    1b0a:	10 e0       	ldi	r17, 0x00	; 0
    1b0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b0e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b10:	ae 85       	ldd	r26, Y+14	; 0x0e
    1b12:	bf 85       	ldd	r27, Y+15	; 0x0f
    1b14:	2a e0       	ldi	r18, 0x0A	; 10
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	50 e0       	ldi	r21, 0x00	; 0
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	cd 01       	movw	r24, r26
    1b20:	0e 94 06 12 	call	0x240c	; 0x240c <__udivmodsi4>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	28 2f       	mov	r18, r24
    1b2a:	20 5d       	subi	r18, 0xD0	; 208
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	02 96       	adiw	r24, 0x02	; 2
    1b30:	fc 01       	movw	r30, r24
    1b32:	e0 0f       	add	r30, r16
    1b34:	f1 1f       	adc	r31, r17
    1b36:	20 83       	st	Z, r18
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	8f 5f       	subi	r24, 0xFF	; 255
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    n /= 10;
    1b3e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b40:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b42:	ae 85       	ldd	r26, Y+14	; 0x0e
    1b44:	bf 85       	ldd	r27, Y+15	; 0x0f
    1b46:	2a e0       	ldi	r18, 0x0A	; 10
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 06 12 	call	0x240c	; 0x240c <__udivmodsi4>
    1b56:	da 01       	movw	r26, r20
    1b58:	c9 01       	movw	r24, r18
    1b5a:	8c 87       	std	Y+12, r24	; 0x0c
    1b5c:	9d 87       	std	Y+13, r25	; 0x0d
    1b5e:	ae 87       	std	Y+14, r26	; 0x0e
    1b60:	bf 87       	std	Y+15, r27	; 0x0f
  if (n == 0) {
    serial_write('0');
    return;
  } 
  
  while (n > 0) {
    1b62:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b64:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b66:	ae 85       	ldd	r26, Y+14	; 0x0e
    1b68:	bf 85       	ldd	r27, Y+15	; 0x0f
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	a1 05       	cpc	r26, r1
    1b6e:	b1 05       	cpc	r27, r1
    1b70:	51 f6       	brne	.-108    	; 0x1b06 <print_uint32_base10+0x3a>
    1b72:	11 c0       	rjmp	.+34     	; 0x1b96 <print_uint32_base10+0xca>
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    serial_write(buf[i-1]);
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	88 2f       	mov	r24, r24
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9c 01       	movw	r18, r24
    1b7c:	21 50       	subi	r18, 0x01	; 1
    1b7e:	30 40       	sbci	r19, 0x00	; 0
    1b80:	ce 01       	movw	r24, r28
    1b82:	02 96       	adiw	r24, 0x02	; 2
    1b84:	fc 01       	movw	r30, r24
    1b86:	e2 0f       	add	r30, r18
    1b88:	f3 1f       	adc	r31, r19
    1b8a:	80 81       	ld	r24, Z
    1b8c:	0e 94 19 0c 	call	0x1832	; 0x1832 <serial_write>
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	81 50       	subi	r24, 0x01	; 1
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	88 23       	and	r24, r24
    1b9a:	61 f7       	brne	.-40     	; 0x1b74 <print_uint32_base10+0xa8>
    serial_write(buf[i-1]);
}
    1b9c:	2f 96       	adiw	r28, 0x0f	; 15
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	08 95       	ret

00001bb2 <printInteger>:

void printInteger(uint32_t n)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <printInteger+0x6>
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <printInteger+0x8>
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	69 83       	std	Y+1, r22	; 0x01
    1bc0:	7a 83       	std	Y+2, r23	; 0x02
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
    1bc4:	9c 83       	std	Y+4, r25	; 0x04
  if (n < 0) {
    serial_write('-');
    n = -n;
  }
  print_uint32_base10(n);
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	ab 81       	ldd	r26, Y+3	; 0x03
    1bcc:	bc 81       	ldd	r27, Y+4	; 0x04
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	0e 94 66 0d 	call	0x1acc	; 0x1acc <print_uint32_base10>
}
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up 
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n)
{
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	64 97       	sbiw	r28, 0x14	; 20
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	69 8b       	std	Y+17, r22	; 0x11
    1bfe:	7a 8b       	std	Y+18, r23	; 0x12
    1c00:	8b 8b       	std	Y+19, r24	; 0x13
    1c02:	9c 8b       	std	Y+20, r25	; 0x14
	if (n < 0) {
    1c04:	69 89       	ldd	r22, Y+17	; 0x11
    1c06:	7a 89       	ldd	r23, Y+18	; 0x12
    1c08:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	50 e0       	ldi	r21, 0x00	; 0
    1c14:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__cmpsf2>
    1c18:	88 23       	and	r24, r24
    1c1a:	64 f4       	brge	.+24     	; 0x1c34 <printFloat+0x50>
		serial_write('-');
    1c1c:	8d e2       	ldi	r24, 0x2D	; 45
    1c1e:	0e 94 19 0c 	call	0x1832	; 0x1832 <serial_write>
		n = -n;
    1c22:	89 89       	ldd	r24, Y+17	; 0x11
    1c24:	9a 89       	ldd	r25, Y+18	; 0x12
    1c26:	ab 89       	ldd	r26, Y+19	; 0x13
    1c28:	bc 89       	ldd	r27, Y+20	; 0x14
    1c2a:	b0 58       	subi	r27, 0x80	; 128
    1c2c:	89 8b       	std	Y+17, r24	; 0x11
    1c2e:	9a 8b       	std	Y+18, r25	; 0x12
    1c30:	ab 8b       	std	Y+19, r26	; 0x13
    1c32:	bc 8b       	std	Y+20, r27	; 0x14
	}

	uint8_t decimals = DECIMAL_PLACES;
    1c34:	82 e0       	ldi	r24, 0x02	; 2
    1c36:	8e 83       	std	Y+6, r24	; 0x06
    1c38:	13 c0       	rjmp	.+38     	; 0x1c60 <printFloat+0x7c>
	while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
		n *= 100;
    1c3a:	69 89       	ldd	r22, Y+17	; 0x11
    1c3c:	7a 89       	ldd	r23, Y+18	; 0x12
    1c3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c40:	9c 89       	ldd	r25, Y+20	; 0x14
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	48 ec       	ldi	r20, 0xC8	; 200
    1c48:	52 e4       	ldi	r21, 0x42	; 66
    1c4a:	0e 94 49 11 	call	0x2292	; 0x2292 <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	89 8b       	std	Y+17, r24	; 0x11
    1c54:	9a 8b       	std	Y+18, r25	; 0x12
    1c56:	ab 8b       	std	Y+19, r26	; 0x13
    1c58:	bc 8b       	std	Y+20, r27	; 0x14
		decimals -= 2;
    1c5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c5c:	82 50       	subi	r24, 0x02	; 2
    1c5e:	8e 83       	std	Y+6, r24	; 0x06
		serial_write('-');
		n = -n;
	}

	uint8_t decimals = DECIMAL_PLACES;
	while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
    1c60:	8e 81       	ldd	r24, Y+6	; 0x06
    1c62:	82 30       	cpi	r24, 0x02	; 2
    1c64:	50 f7       	brcc	.-44     	; 0x1c3a <printFloat+0x56>
		n *= 100;
		decimals -= 2;
	}
	if (decimals) { n *= 10; }
    1c66:	8e 81       	ldd	r24, Y+6	; 0x06
    1c68:	88 23       	and	r24, r24
    1c6a:	81 f0       	breq	.+32     	; 0x1c8c <printFloat+0xa8>
    1c6c:	69 89       	ldd	r22, Y+17	; 0x11
    1c6e:	7a 89       	ldd	r23, Y+18	; 0x12
    1c70:	8b 89       	ldd	r24, Y+19	; 0x13
    1c72:	9c 89       	ldd	r25, Y+20	; 0x14
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	40 e2       	ldi	r20, 0x20	; 32
    1c7a:	51 e4       	ldi	r21, 0x41	; 65
    1c7c:	0e 94 49 11 	call	0x2292	; 0x2292 <__mulsf3>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	89 8b       	std	Y+17, r24	; 0x11
    1c86:	9a 8b       	std	Y+18, r25	; 0x12
    1c88:	ab 8b       	std	Y+19, r26	; 0x13
    1c8a:	bc 8b       	std	Y+20, r27	; 0x14
	n += 0.5; // Add rounding factor. Ensures carryover through entire value.
    1c8c:	69 89       	ldd	r22, Y+17	; 0x11
    1c8e:	7a 89       	ldd	r23, Y+18	; 0x12
    1c90:	8b 89       	ldd	r24, Y+19	; 0x13
    1c92:	9c 89       	ldd	r25, Y+20	; 0x14
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e0       	ldi	r20, 0x00	; 0
    1c9a:	5f e3       	ldi	r21, 0x3F	; 63
    1c9c:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__addsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	89 8b       	std	Y+17, r24	; 0x11
    1ca6:	9a 8b       	std	Y+18, r25	; 0x12
    1ca8:	ab 8b       	std	Y+19, r26	; 0x13
    1caa:	bc 8b       	std	Y+20, r27	; 0x14
    
	// Generate digits backwards and store in string.
	unsigned char buf[10]; 
	uint8_t i = 0;
    1cac:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t a = (long)n;  
    1cae:	69 89       	ldd	r22, Y+17	; 0x11
    1cb0:	7a 89       	ldd	r23, Y+18	; 0x12
    1cb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__fixsfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	ab 83       	std	Y+3, r26	; 0x03
    1cc4:	bc 83       	std	Y+4, r27	; 0x04
	buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
    1cc6:	8e e2       	ldi	r24, 0x2E	; 46
    1cc8:	89 87       	std	Y+9, r24	; 0x09
    1cca:	34 c0       	rjmp	.+104    	; 0x1d34 <printFloat+0x150>
	while(a > 0) {
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
    1ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cce:	82 30       	cpi	r24, 0x02	; 2
    1cd0:	19 f4       	brne	.+6      	; 0x1cd8 <printFloat+0xf4>
    1cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd4:	8f 5f       	subi	r24, 0xFF	; 255
    1cd6:	8d 83       	std	Y+5, r24	; 0x05
		buf[i++] = (a % 10) + '0'; // Get digit
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	08 2f       	mov	r16, r24
    1cdc:	10 e0       	ldi	r17, 0x00	; 0
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce2:	ab 81       	ldd	r26, Y+3	; 0x03
    1ce4:	bc 81       	ldd	r27, Y+4	; 0x04
    1ce6:	2a e0       	ldi	r18, 0x0A	; 10
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	50 e0       	ldi	r21, 0x00	; 0
    1cee:	bc 01       	movw	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	0e 94 06 12 	call	0x240c	; 0x240c <__udivmodsi4>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	20 5d       	subi	r18, 0xD0	; 208
    1cfe:	ce 01       	movw	r24, r28
    1d00:	07 96       	adiw	r24, 0x07	; 7
    1d02:	fc 01       	movw	r30, r24
    1d04:	e0 0f       	add	r30, r16
    1d06:	f1 1f       	adc	r31, r17
    1d08:	20 83       	st	Z, r18
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	8f 5f       	subi	r24, 0xFF	; 255
    1d0e:	8d 83       	std	Y+5, r24	; 0x05
		a /= 10;
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	9a 81       	ldd	r25, Y+2	; 0x02
    1d14:	ab 81       	ldd	r26, Y+3	; 0x03
    1d16:	bc 81       	ldd	r27, Y+4	; 0x04
    1d18:	2a e0       	ldi	r18, 0x0A	; 10
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	bc 01       	movw	r22, r24
    1d22:	cd 01       	movw	r24, r26
    1d24:	0e 94 06 12 	call	0x240c	; 0x240c <__udivmodsi4>
    1d28:	da 01       	movw	r26, r20
    1d2a:	c9 01       	movw	r24, r18
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	9a 83       	std	Y+2, r25	; 0x02
    1d30:	ab 83       	std	Y+3, r26	; 0x03
    1d32:	bc 83       	std	Y+4, r27	; 0x04
	// Generate digits backwards and store in string.
	unsigned char buf[10]; 
	uint8_t i = 0;
	uint32_t a = (long)n;  
	buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
	while(a > 0) {
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	ab 81       	ldd	r26, Y+3	; 0x03
    1d3a:	bc 81       	ldd	r27, Y+4	; 0x04
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	a1 05       	cpc	r26, r1
    1d40:	b1 05       	cpc	r27, r1
    1d42:	21 f6       	brne	.-120    	; 0x1ccc <printFloat+0xe8>
    1d44:	0d c0       	rjmp	.+26     	; 0x1d60 <printFloat+0x17c>
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
		buf[i++] = (a % 10) + '0'; // Get digit
		a /= 10;
	}
	while (i < DECIMAL_PLACES) { 
		buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	ce 01       	movw	r24, r28
    1d4e:	07 96       	adiw	r24, 0x07	; 7
    1d50:	fc 01       	movw	r30, r24
    1d52:	e2 0f       	add	r30, r18
    1d54:	f3 1f       	adc	r31, r19
    1d56:	80 e3       	ldi	r24, 0x30	; 48
    1d58:	80 83       	st	Z, r24
    1d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5c:	8f 5f       	subi	r24, 0xFF	; 255
    1d5e:	8d 83       	std	Y+5, r24	; 0x05
	while(a > 0) {
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
		buf[i++] = (a % 10) + '0'; // Get digit
		a /= 10;
	}
	while (i < DECIMAL_PLACES) { 
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	82 30       	cpi	r24, 0x02	; 2
    1d64:	80 f3       	brcs	.-32     	; 0x1d46 <printFloat+0x162>
		buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
	}
	if (i == DECIMAL_PLACES) { // Fill in leading zero, if needed.
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	82 30       	cpi	r24, 0x02	; 2
    1d6a:	11 f5       	brne	.+68     	; 0x1db0 <printFloat+0x1cc>
		i++;
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	8f 5f       	subi	r24, 0xFF	; 255
    1d70:	8d 83       	std	Y+5, r24	; 0x05
		buf[i++] = '0'; 
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	ce 01       	movw	r24, r28
    1d7a:	07 96       	adiw	r24, 0x07	; 7
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	e2 0f       	add	r30, r18
    1d80:	f3 1f       	adc	r31, r19
    1d82:	80 e3       	ldi	r24, 0x30	; 48
    1d84:	80 83       	st	Z, r24
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	8f 5f       	subi	r24, 0xFF	; 255
    1d8a:	8d 83       	std	Y+5, r24	; 0x05
    1d8c:	11 c0       	rjmp	.+34     	; 0x1db0 <printFloat+0x1cc>
	}

	// Print the generated string.
	for (; i > 0; i--)
		serial_write(buf[i-1]);
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	88 2f       	mov	r24, r24
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9c 01       	movw	r18, r24
    1d96:	21 50       	subi	r18, 0x01	; 1
    1d98:	30 40       	sbci	r19, 0x00	; 0
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	07 96       	adiw	r24, 0x07	; 7
    1d9e:	fc 01       	movw	r30, r24
    1da0:	e2 0f       	add	r30, r18
    1da2:	f3 1f       	adc	r31, r19
    1da4:	80 81       	ld	r24, Z
    1da6:	0e 94 19 0c 	call	0x1832	; 0x1832 <serial_write>
		i++;
		buf[i++] = '0'; 
	}

	// Print the generated string.
	for (; i > 0; i--)
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	81 50       	subi	r24, 0x01	; 1
    1dae:	8d 83       	std	Y+5, r24	; 0x05
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	88 23       	and	r24, r24
    1db4:	61 f7       	brne	.-40     	; 0x1d8e <printFloat+0x1aa>
		serial_write(buf[i-1]);
}
    1db6:	64 96       	adiw	r28, 0x14	; 20
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	1f 91       	pop	r17
    1dc8:	0f 91       	pop	r16
    1dca:	08 95       	ret

00001dcc <rpt_initialized>:
static PGM_P const msg_scode[] PROGMEM = { msg_scode0, msg_scode1, msg_scode2, msg_scode3, msg_scode4};

/*** Display routines ***/

void rpt_initialized()
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
//	printPgmString((PGM_P)(pgm_read_word(initialized))); 
	printPgmString(PSTR("\nDevice Initialized\n")); 
    1dd4:	8d eb       	ldi	r24, 0xBD	; 189
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <printPgmString>
}
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <rpt_readout>:

void rpt_readout()
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
	printPgmString(PSTR("Temp: ")); printFloat(sensor.temperature);
    1dea:	8f ee       	ldi	r24, 0xEF	; 239
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <printPgmString>
    1df2:	80 91 73 01 	lds	r24, 0x0173
    1df6:	90 91 74 01 	lds	r25, 0x0174
    1dfa:	a0 91 75 01 	lds	r26, 0x0175
    1dfe:	b0 91 76 01 	lds	r27, 0x0176
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printFloat>
//	printPgmString(PSTR(" s[0]: ")); printFloat(sensor.sample[0]);				//++++++
	printPgmString(PSTR(" StdDev: ")); printFloat(sensor.std_dev);				//++++++
    1e0a:	85 ee       	ldi	r24, 0xE5	; 229
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <printPgmString>
    1e12:	80 91 77 01 	lds	r24, 0x0177
    1e16:	90 91 78 01 	lds	r25, 0x0178
    1e1a:	a0 91 79 01 	lds	r26, 0x0179
    1e1e:	b0 91 7a 01 	lds	r27, 0x017A
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printFloat>
	printPgmString(PSTR(" Error: ")); printFloat(pid.error);				//++++++
    1e2a:	8c ed       	ldi	r24, 0xDC	; 220
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <printPgmString>
    1e32:	80 91 36 01 	lds	r24, 0x0136
    1e36:	90 91 37 01 	lds	r25, 0x0137
    1e3a:	a0 91 38 01 	lds	r26, 0x0138
    1e3e:	b0 91 39 01 	lds	r27, 0x0139
    1e42:	bc 01       	movw	r22, r24
    1e44:	cd 01       	movw	r24, r26
    1e46:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printFloat>
	printPgmString(PSTR(" PWM: ")); printFloat(pid.output);
    1e4a:	85 ed       	ldi	r24, 0xD5	; 213
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <printPgmString>
    1e52:	80 91 2a 01 	lds	r24, 0x012A
    1e56:	90 91 2b 01 	lds	r25, 0x012B
    1e5a:	a0 91 2c 01 	lds	r26, 0x012C
    1e5e:	b0 91 2d 01 	lds	r27, 0x012D
    1e62:	bc 01       	movw	r22, r24
    1e64:	cd 01       	movw	r24, r26
    1e66:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printFloat>
	printPgmString(PSTR("  "));
    1e6a:	82 ed       	ldi	r24, 0xD2	; 210
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <printPgmString>
	rpt_sensor();
    1e72:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <rpt_sensor>
}
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <rpt_heater_readout>:

void rpt_heater_readout()
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
	printPgmString(PSTR("Temp: "));  printFloat(heater.temperature);
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	91 e0       	ldi	r25, 0x01	; 1
    1e88:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <printPgmString>
    1e8c:	80 91 0c 01 	lds	r24, 0x010C
    1e90:	90 91 0d 01 	lds	r25, 0x010D
    1e94:	a0 91 0e 01 	lds	r26, 0x010E
    1e98:	b0 91 0f 01 	lds	r27, 0x010F
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	cd 01       	movw	r24, r26
    1ea0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printFloat>
	printPgmString(PSTR("  PID: ")); printFloat(pid.output);
    1ea4:	88 ef       	ldi	r24, 0xF8	; 248
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <printPgmString>
    1eac:	80 91 2a 01 	lds	r24, 0x012A
    1eb0:	90 91 2b 01 	lds	r25, 0x012B
    1eb4:	a0 91 2c 01 	lds	r26, 0x012C
    1eb8:	b0 91 2d 01 	lds	r27, 0x012D
    1ebc:	bc 01       	movw	r22, r24
    1ebe:	cd 01       	movw	r24, r26
    1ec0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printFloat>
	printPgmString(PSTR("\n")); 
    1ec4:	86 ef       	ldi	r24, 0xF6	; 246
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <printPgmString>
}
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <rpt_sensor>:

void rpt_sensor()
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <rpt_sensor+0x6>
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <rpt_sensor+0x8>
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
	printPgmString((PGM_P)pgm_read_word(&msg_scode[sensor.code]));
    1ede:	80 91 71 01 	lds	r24, 0x0171
    1ee2:	88 2f       	mov	r24, r24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	8d 54       	subi	r24, 0x4D	; 77
    1eec:	9f 4f       	sbci	r25, 0xFF	; 255
    1eee:	9c 83       	std	Y+4, r25	; 0x04
    1ef0:	8b 83       	std	Y+3, r24	; 0x03
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	85 91       	lpm	r24, Z+
    1efa:	94 91       	lpm	r25, Z+
    1efc:	9a 83       	std	Y+2, r25	; 0x02
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	fc 83       	std	Y+4, r31	; 0x04
    1f02:	eb 83       	std	Y+3, r30	; 0x03
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <printPgmString>
	printPgmString(PSTR("\n")); 
    1f0c:	87 e0       	ldi	r24, 0x07	; 7
    1f0e:	91 e0       	ldi	r25, 0x01	; 1
    1f10:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <printPgmString>
//	strncpy_P(msg,(PGM_P)pgm_read_word(&msg_scode[sensor.code]), MSGLEN);
//	printString(msg);

//	printPgmString(PSTR(pgm_read_word(&msg_scode[sensor.code]));
//	printPgmString(&msg_scode[sensor.code]);
}
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	08 95       	ret

00001f22 <__subsf3>:
    1f22:	50 58       	subi	r21, 0x80	; 128

00001f24 <__addsf3>:
    1f24:	bb 27       	eor	r27, r27
    1f26:	aa 27       	eor	r26, r26
    1f28:	0e d0       	rcall	.+28     	; 0x1f46 <__addsf3x>
    1f2a:	75 c1       	rjmp	.+746    	; 0x2216 <__fp_round>
    1f2c:	66 d1       	rcall	.+716    	; 0x21fa <__fp_pscA>
    1f2e:	30 f0       	brcs	.+12     	; 0x1f3c <__addsf3+0x18>
    1f30:	6b d1       	rcall	.+726    	; 0x2208 <__fp_pscB>
    1f32:	20 f0       	brcs	.+8      	; 0x1f3c <__addsf3+0x18>
    1f34:	31 f4       	brne	.+12     	; 0x1f42 <__addsf3+0x1e>
    1f36:	9f 3f       	cpi	r25, 0xFF	; 255
    1f38:	11 f4       	brne	.+4      	; 0x1f3e <__addsf3+0x1a>
    1f3a:	1e f4       	brtc	.+6      	; 0x1f42 <__addsf3+0x1e>
    1f3c:	5b c1       	rjmp	.+694    	; 0x21f4 <__fp_nan>
    1f3e:	0e f4       	brtc	.+2      	; 0x1f42 <__addsf3+0x1e>
    1f40:	e0 95       	com	r30
    1f42:	e7 fb       	bst	r30, 7
    1f44:	51 c1       	rjmp	.+674    	; 0x21e8 <__fp_inf>

00001f46 <__addsf3x>:
    1f46:	e9 2f       	mov	r30, r25
    1f48:	77 d1       	rcall	.+750    	; 0x2238 <__fp_split3>
    1f4a:	80 f3       	brcs	.-32     	; 0x1f2c <__addsf3+0x8>
    1f4c:	ba 17       	cp	r27, r26
    1f4e:	62 07       	cpc	r22, r18
    1f50:	73 07       	cpc	r23, r19
    1f52:	84 07       	cpc	r24, r20
    1f54:	95 07       	cpc	r25, r21
    1f56:	18 f0       	brcs	.+6      	; 0x1f5e <__addsf3x+0x18>
    1f58:	71 f4       	brne	.+28     	; 0x1f76 <__addsf3x+0x30>
    1f5a:	9e f5       	brtc	.+102    	; 0x1fc2 <__addsf3x+0x7c>
    1f5c:	8f c1       	rjmp	.+798    	; 0x227c <__fp_zero>
    1f5e:	0e f4       	brtc	.+2      	; 0x1f62 <__addsf3x+0x1c>
    1f60:	e0 95       	com	r30
    1f62:	0b 2e       	mov	r0, r27
    1f64:	ba 2f       	mov	r27, r26
    1f66:	a0 2d       	mov	r26, r0
    1f68:	0b 01       	movw	r0, r22
    1f6a:	b9 01       	movw	r22, r18
    1f6c:	90 01       	movw	r18, r0
    1f6e:	0c 01       	movw	r0, r24
    1f70:	ca 01       	movw	r24, r20
    1f72:	a0 01       	movw	r20, r0
    1f74:	11 24       	eor	r1, r1
    1f76:	ff 27       	eor	r31, r31
    1f78:	59 1b       	sub	r21, r25
    1f7a:	99 f0       	breq	.+38     	; 0x1fa2 <__addsf3x+0x5c>
    1f7c:	59 3f       	cpi	r21, 0xF9	; 249
    1f7e:	50 f4       	brcc	.+20     	; 0x1f94 <__addsf3x+0x4e>
    1f80:	50 3e       	cpi	r21, 0xE0	; 224
    1f82:	68 f1       	brcs	.+90     	; 0x1fde <__addsf3x+0x98>
    1f84:	1a 16       	cp	r1, r26
    1f86:	f0 40       	sbci	r31, 0x00	; 0
    1f88:	a2 2f       	mov	r26, r18
    1f8a:	23 2f       	mov	r18, r19
    1f8c:	34 2f       	mov	r19, r20
    1f8e:	44 27       	eor	r20, r20
    1f90:	58 5f       	subi	r21, 0xF8	; 248
    1f92:	f3 cf       	rjmp	.-26     	; 0x1f7a <__addsf3x+0x34>
    1f94:	46 95       	lsr	r20
    1f96:	37 95       	ror	r19
    1f98:	27 95       	ror	r18
    1f9a:	a7 95       	ror	r26
    1f9c:	f0 40       	sbci	r31, 0x00	; 0
    1f9e:	53 95       	inc	r21
    1fa0:	c9 f7       	brne	.-14     	; 0x1f94 <__addsf3x+0x4e>
    1fa2:	7e f4       	brtc	.+30     	; 0x1fc2 <__addsf3x+0x7c>
    1fa4:	1f 16       	cp	r1, r31
    1fa6:	ba 0b       	sbc	r27, r26
    1fa8:	62 0b       	sbc	r22, r18
    1faa:	73 0b       	sbc	r23, r19
    1fac:	84 0b       	sbc	r24, r20
    1fae:	ba f0       	brmi	.+46     	; 0x1fde <__addsf3x+0x98>
    1fb0:	91 50       	subi	r25, 0x01	; 1
    1fb2:	a1 f0       	breq	.+40     	; 0x1fdc <__addsf3x+0x96>
    1fb4:	ff 0f       	add	r31, r31
    1fb6:	bb 1f       	adc	r27, r27
    1fb8:	66 1f       	adc	r22, r22
    1fba:	77 1f       	adc	r23, r23
    1fbc:	88 1f       	adc	r24, r24
    1fbe:	c2 f7       	brpl	.-16     	; 0x1fb0 <__addsf3x+0x6a>
    1fc0:	0e c0       	rjmp	.+28     	; 0x1fde <__addsf3x+0x98>
    1fc2:	ba 0f       	add	r27, r26
    1fc4:	62 1f       	adc	r22, r18
    1fc6:	73 1f       	adc	r23, r19
    1fc8:	84 1f       	adc	r24, r20
    1fca:	48 f4       	brcc	.+18     	; 0x1fde <__addsf3x+0x98>
    1fcc:	87 95       	ror	r24
    1fce:	77 95       	ror	r23
    1fd0:	67 95       	ror	r22
    1fd2:	b7 95       	ror	r27
    1fd4:	f7 95       	ror	r31
    1fd6:	9e 3f       	cpi	r25, 0xFE	; 254
    1fd8:	08 f0       	brcs	.+2      	; 0x1fdc <__addsf3x+0x96>
    1fda:	b3 cf       	rjmp	.-154    	; 0x1f42 <__addsf3+0x1e>
    1fdc:	93 95       	inc	r25
    1fde:	88 0f       	add	r24, r24
    1fe0:	08 f0       	brcs	.+2      	; 0x1fe4 <__addsf3x+0x9e>
    1fe2:	99 27       	eor	r25, r25
    1fe4:	ee 0f       	add	r30, r30
    1fe6:	97 95       	ror	r25
    1fe8:	87 95       	ror	r24
    1fea:	08 95       	ret

00001fec <__cmpsf2>:
    1fec:	d9 d0       	rcall	.+434    	; 0x21a0 <__fp_cmp>
    1fee:	08 f4       	brcc	.+2      	; 0x1ff2 <__cmpsf2+0x6>
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	08 95       	ret

00001ff4 <__divsf3>:
    1ff4:	0c d0       	rcall	.+24     	; 0x200e <__divsf3x>
    1ff6:	0f c1       	rjmp	.+542    	; 0x2216 <__fp_round>
    1ff8:	07 d1       	rcall	.+526    	; 0x2208 <__fp_pscB>
    1ffa:	40 f0       	brcs	.+16     	; 0x200c <__divsf3+0x18>
    1ffc:	fe d0       	rcall	.+508    	; 0x21fa <__fp_pscA>
    1ffe:	30 f0       	brcs	.+12     	; 0x200c <__divsf3+0x18>
    2000:	21 f4       	brne	.+8      	; 0x200a <__divsf3+0x16>
    2002:	5f 3f       	cpi	r21, 0xFF	; 255
    2004:	19 f0       	breq	.+6      	; 0x200c <__divsf3+0x18>
    2006:	f0 c0       	rjmp	.+480    	; 0x21e8 <__fp_inf>
    2008:	51 11       	cpse	r21, r1
    200a:	39 c1       	rjmp	.+626    	; 0x227e <__fp_szero>
    200c:	f3 c0       	rjmp	.+486    	; 0x21f4 <__fp_nan>

0000200e <__divsf3x>:
    200e:	14 d1       	rcall	.+552    	; 0x2238 <__fp_split3>
    2010:	98 f3       	brcs	.-26     	; 0x1ff8 <__divsf3+0x4>

00002012 <__divsf3_pse>:
    2012:	99 23       	and	r25, r25
    2014:	c9 f3       	breq	.-14     	; 0x2008 <__divsf3+0x14>
    2016:	55 23       	and	r21, r21
    2018:	b1 f3       	breq	.-20     	; 0x2006 <__divsf3+0x12>
    201a:	95 1b       	sub	r25, r21
    201c:	55 0b       	sbc	r21, r21
    201e:	bb 27       	eor	r27, r27
    2020:	aa 27       	eor	r26, r26
    2022:	62 17       	cp	r22, r18
    2024:	73 07       	cpc	r23, r19
    2026:	84 07       	cpc	r24, r20
    2028:	38 f0       	brcs	.+14     	; 0x2038 <__divsf3_pse+0x26>
    202a:	9f 5f       	subi	r25, 0xFF	; 255
    202c:	5f 4f       	sbci	r21, 0xFF	; 255
    202e:	22 0f       	add	r18, r18
    2030:	33 1f       	adc	r19, r19
    2032:	44 1f       	adc	r20, r20
    2034:	aa 1f       	adc	r26, r26
    2036:	a9 f3       	breq	.-22     	; 0x2022 <__divsf3_pse+0x10>
    2038:	33 d0       	rcall	.+102    	; 0x20a0 <__divsf3_pse+0x8e>
    203a:	0e 2e       	mov	r0, r30
    203c:	3a f0       	brmi	.+14     	; 0x204c <__divsf3_pse+0x3a>
    203e:	e0 e8       	ldi	r30, 0x80	; 128
    2040:	30 d0       	rcall	.+96     	; 0x20a2 <__divsf3_pse+0x90>
    2042:	91 50       	subi	r25, 0x01	; 1
    2044:	50 40       	sbci	r21, 0x00	; 0
    2046:	e6 95       	lsr	r30
    2048:	00 1c       	adc	r0, r0
    204a:	ca f7       	brpl	.-14     	; 0x203e <__divsf3_pse+0x2c>
    204c:	29 d0       	rcall	.+82     	; 0x20a0 <__divsf3_pse+0x8e>
    204e:	fe 2f       	mov	r31, r30
    2050:	27 d0       	rcall	.+78     	; 0x20a0 <__divsf3_pse+0x8e>
    2052:	66 0f       	add	r22, r22
    2054:	77 1f       	adc	r23, r23
    2056:	88 1f       	adc	r24, r24
    2058:	bb 1f       	adc	r27, r27
    205a:	26 17       	cp	r18, r22
    205c:	37 07       	cpc	r19, r23
    205e:	48 07       	cpc	r20, r24
    2060:	ab 07       	cpc	r26, r27
    2062:	b0 e8       	ldi	r27, 0x80	; 128
    2064:	09 f0       	breq	.+2      	; 0x2068 <__divsf3_pse+0x56>
    2066:	bb 0b       	sbc	r27, r27
    2068:	80 2d       	mov	r24, r0
    206a:	bf 01       	movw	r22, r30
    206c:	ff 27       	eor	r31, r31
    206e:	93 58       	subi	r25, 0x83	; 131
    2070:	5f 4f       	sbci	r21, 0xFF	; 255
    2072:	2a f0       	brmi	.+10     	; 0x207e <__divsf3_pse+0x6c>
    2074:	9e 3f       	cpi	r25, 0xFE	; 254
    2076:	51 05       	cpc	r21, r1
    2078:	68 f0       	brcs	.+26     	; 0x2094 <__divsf3_pse+0x82>
    207a:	b6 c0       	rjmp	.+364    	; 0x21e8 <__fp_inf>
    207c:	00 c1       	rjmp	.+512    	; 0x227e <__fp_szero>
    207e:	5f 3f       	cpi	r21, 0xFF	; 255
    2080:	ec f3       	brlt	.-6      	; 0x207c <__divsf3_pse+0x6a>
    2082:	98 3e       	cpi	r25, 0xE8	; 232
    2084:	dc f3       	brlt	.-10     	; 0x207c <__divsf3_pse+0x6a>
    2086:	86 95       	lsr	r24
    2088:	77 95       	ror	r23
    208a:	67 95       	ror	r22
    208c:	b7 95       	ror	r27
    208e:	f7 95       	ror	r31
    2090:	9f 5f       	subi	r25, 0xFF	; 255
    2092:	c9 f7       	brne	.-14     	; 0x2086 <__divsf3_pse+0x74>
    2094:	88 0f       	add	r24, r24
    2096:	91 1d       	adc	r25, r1
    2098:	96 95       	lsr	r25
    209a:	87 95       	ror	r24
    209c:	97 f9       	bld	r25, 7
    209e:	08 95       	ret
    20a0:	e1 e0       	ldi	r30, 0x01	; 1
    20a2:	66 0f       	add	r22, r22
    20a4:	77 1f       	adc	r23, r23
    20a6:	88 1f       	adc	r24, r24
    20a8:	bb 1f       	adc	r27, r27
    20aa:	62 17       	cp	r22, r18
    20ac:	73 07       	cpc	r23, r19
    20ae:	84 07       	cpc	r24, r20
    20b0:	ba 07       	cpc	r27, r26
    20b2:	20 f0       	brcs	.+8      	; 0x20bc <__divsf3_pse+0xaa>
    20b4:	62 1b       	sub	r22, r18
    20b6:	73 0b       	sbc	r23, r19
    20b8:	84 0b       	sbc	r24, r20
    20ba:	ba 0b       	sbc	r27, r26
    20bc:	ee 1f       	adc	r30, r30
    20be:	88 f7       	brcc	.-30     	; 0x20a2 <__divsf3_pse+0x90>
    20c0:	e0 95       	com	r30
    20c2:	08 95       	ret

000020c4 <__fixsfsi>:
    20c4:	04 d0       	rcall	.+8      	; 0x20ce <__fixunssfsi>
    20c6:	68 94       	set
    20c8:	b1 11       	cpse	r27, r1
    20ca:	d9 c0       	rjmp	.+434    	; 0x227e <__fp_szero>
    20cc:	08 95       	ret

000020ce <__fixunssfsi>:
    20ce:	bc d0       	rcall	.+376    	; 0x2248 <__fp_splitA>
    20d0:	88 f0       	brcs	.+34     	; 0x20f4 <__fixunssfsi+0x26>
    20d2:	9f 57       	subi	r25, 0x7F	; 127
    20d4:	90 f0       	brcs	.+36     	; 0x20fa <__fixunssfsi+0x2c>
    20d6:	b9 2f       	mov	r27, r25
    20d8:	99 27       	eor	r25, r25
    20da:	b7 51       	subi	r27, 0x17	; 23
    20dc:	a0 f0       	brcs	.+40     	; 0x2106 <__fixunssfsi+0x38>
    20de:	d1 f0       	breq	.+52     	; 0x2114 <__fixunssfsi+0x46>
    20e0:	66 0f       	add	r22, r22
    20e2:	77 1f       	adc	r23, r23
    20e4:	88 1f       	adc	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	1a f0       	brmi	.+6      	; 0x20f0 <__fixunssfsi+0x22>
    20ea:	ba 95       	dec	r27
    20ec:	c9 f7       	brne	.-14     	; 0x20e0 <__fixunssfsi+0x12>
    20ee:	12 c0       	rjmp	.+36     	; 0x2114 <__fixunssfsi+0x46>
    20f0:	b1 30       	cpi	r27, 0x01	; 1
    20f2:	81 f0       	breq	.+32     	; 0x2114 <__fixunssfsi+0x46>
    20f4:	c3 d0       	rcall	.+390    	; 0x227c <__fp_zero>
    20f6:	b1 e0       	ldi	r27, 0x01	; 1
    20f8:	08 95       	ret
    20fa:	c0 c0       	rjmp	.+384    	; 0x227c <__fp_zero>
    20fc:	67 2f       	mov	r22, r23
    20fe:	78 2f       	mov	r23, r24
    2100:	88 27       	eor	r24, r24
    2102:	b8 5f       	subi	r27, 0xF8	; 248
    2104:	39 f0       	breq	.+14     	; 0x2114 <__fixunssfsi+0x46>
    2106:	b9 3f       	cpi	r27, 0xF9	; 249
    2108:	cc f3       	brlt	.-14     	; 0x20fc <__fixunssfsi+0x2e>
    210a:	86 95       	lsr	r24
    210c:	77 95       	ror	r23
    210e:	67 95       	ror	r22
    2110:	b3 95       	inc	r27
    2112:	d9 f7       	brne	.-10     	; 0x210a <__fixunssfsi+0x3c>
    2114:	3e f4       	brtc	.+14     	; 0x2124 <__fixunssfsi+0x56>
    2116:	90 95       	com	r25
    2118:	80 95       	com	r24
    211a:	70 95       	com	r23
    211c:	61 95       	neg	r22
    211e:	7f 4f       	sbci	r23, 0xFF	; 255
    2120:	8f 4f       	sbci	r24, 0xFF	; 255
    2122:	9f 4f       	sbci	r25, 0xFF	; 255
    2124:	08 95       	ret

00002126 <__floatunsisf>:
    2126:	e8 94       	clt
    2128:	09 c0       	rjmp	.+18     	; 0x213c <__floatsisf+0x12>

0000212a <__floatsisf>:
    212a:	97 fb       	bst	r25, 7
    212c:	3e f4       	brtc	.+14     	; 0x213c <__floatsisf+0x12>
    212e:	90 95       	com	r25
    2130:	80 95       	com	r24
    2132:	70 95       	com	r23
    2134:	61 95       	neg	r22
    2136:	7f 4f       	sbci	r23, 0xFF	; 255
    2138:	8f 4f       	sbci	r24, 0xFF	; 255
    213a:	9f 4f       	sbci	r25, 0xFF	; 255
    213c:	99 23       	and	r25, r25
    213e:	a9 f0       	breq	.+42     	; 0x216a <__floatsisf+0x40>
    2140:	f9 2f       	mov	r31, r25
    2142:	96 e9       	ldi	r25, 0x96	; 150
    2144:	bb 27       	eor	r27, r27
    2146:	93 95       	inc	r25
    2148:	f6 95       	lsr	r31
    214a:	87 95       	ror	r24
    214c:	77 95       	ror	r23
    214e:	67 95       	ror	r22
    2150:	b7 95       	ror	r27
    2152:	f1 11       	cpse	r31, r1
    2154:	f8 cf       	rjmp	.-16     	; 0x2146 <__floatsisf+0x1c>
    2156:	fa f4       	brpl	.+62     	; 0x2196 <__floatsisf+0x6c>
    2158:	bb 0f       	add	r27, r27
    215a:	11 f4       	brne	.+4      	; 0x2160 <__floatsisf+0x36>
    215c:	60 ff       	sbrs	r22, 0
    215e:	1b c0       	rjmp	.+54     	; 0x2196 <__floatsisf+0x6c>
    2160:	6f 5f       	subi	r22, 0xFF	; 255
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	8f 4f       	sbci	r24, 0xFF	; 255
    2166:	9f 4f       	sbci	r25, 0xFF	; 255
    2168:	16 c0       	rjmp	.+44     	; 0x2196 <__floatsisf+0x6c>
    216a:	88 23       	and	r24, r24
    216c:	11 f0       	breq	.+4      	; 0x2172 <__floatsisf+0x48>
    216e:	96 e9       	ldi	r25, 0x96	; 150
    2170:	11 c0       	rjmp	.+34     	; 0x2194 <__floatsisf+0x6a>
    2172:	77 23       	and	r23, r23
    2174:	21 f0       	breq	.+8      	; 0x217e <__floatsisf+0x54>
    2176:	9e e8       	ldi	r25, 0x8E	; 142
    2178:	87 2f       	mov	r24, r23
    217a:	76 2f       	mov	r23, r22
    217c:	05 c0       	rjmp	.+10     	; 0x2188 <__floatsisf+0x5e>
    217e:	66 23       	and	r22, r22
    2180:	71 f0       	breq	.+28     	; 0x219e <__floatsisf+0x74>
    2182:	96 e8       	ldi	r25, 0x86	; 134
    2184:	86 2f       	mov	r24, r22
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	60 e0       	ldi	r22, 0x00	; 0
    218a:	2a f0       	brmi	.+10     	; 0x2196 <__floatsisf+0x6c>
    218c:	9a 95       	dec	r25
    218e:	66 0f       	add	r22, r22
    2190:	77 1f       	adc	r23, r23
    2192:	88 1f       	adc	r24, r24
    2194:	da f7       	brpl	.-10     	; 0x218c <__floatsisf+0x62>
    2196:	88 0f       	add	r24, r24
    2198:	96 95       	lsr	r25
    219a:	87 95       	ror	r24
    219c:	97 f9       	bld	r25, 7
    219e:	08 95       	ret

000021a0 <__fp_cmp>:
    21a0:	99 0f       	add	r25, r25
    21a2:	00 08       	sbc	r0, r0
    21a4:	55 0f       	add	r21, r21
    21a6:	aa 0b       	sbc	r26, r26
    21a8:	e0 e8       	ldi	r30, 0x80	; 128
    21aa:	fe ef       	ldi	r31, 0xFE	; 254
    21ac:	16 16       	cp	r1, r22
    21ae:	17 06       	cpc	r1, r23
    21b0:	e8 07       	cpc	r30, r24
    21b2:	f9 07       	cpc	r31, r25
    21b4:	c0 f0       	brcs	.+48     	; 0x21e6 <__fp_cmp+0x46>
    21b6:	12 16       	cp	r1, r18
    21b8:	13 06       	cpc	r1, r19
    21ba:	e4 07       	cpc	r30, r20
    21bc:	f5 07       	cpc	r31, r21
    21be:	98 f0       	brcs	.+38     	; 0x21e6 <__fp_cmp+0x46>
    21c0:	62 1b       	sub	r22, r18
    21c2:	73 0b       	sbc	r23, r19
    21c4:	84 0b       	sbc	r24, r20
    21c6:	95 0b       	sbc	r25, r21
    21c8:	39 f4       	brne	.+14     	; 0x21d8 <__fp_cmp+0x38>
    21ca:	0a 26       	eor	r0, r26
    21cc:	61 f0       	breq	.+24     	; 0x21e6 <__fp_cmp+0x46>
    21ce:	23 2b       	or	r18, r19
    21d0:	24 2b       	or	r18, r20
    21d2:	25 2b       	or	r18, r21
    21d4:	21 f4       	brne	.+8      	; 0x21de <__fp_cmp+0x3e>
    21d6:	08 95       	ret
    21d8:	0a 26       	eor	r0, r26
    21da:	09 f4       	brne	.+2      	; 0x21de <__fp_cmp+0x3e>
    21dc:	a1 40       	sbci	r26, 0x01	; 1
    21de:	a6 95       	lsr	r26
    21e0:	8f ef       	ldi	r24, 0xFF	; 255
    21e2:	81 1d       	adc	r24, r1
    21e4:	81 1d       	adc	r24, r1
    21e6:	08 95       	ret

000021e8 <__fp_inf>:
    21e8:	97 f9       	bld	r25, 7
    21ea:	9f 67       	ori	r25, 0x7F	; 127
    21ec:	80 e8       	ldi	r24, 0x80	; 128
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	08 95       	ret

000021f4 <__fp_nan>:
    21f4:	9f ef       	ldi	r25, 0xFF	; 255
    21f6:	80 ec       	ldi	r24, 0xC0	; 192
    21f8:	08 95       	ret

000021fa <__fp_pscA>:
    21fa:	00 24       	eor	r0, r0
    21fc:	0a 94       	dec	r0
    21fe:	16 16       	cp	r1, r22
    2200:	17 06       	cpc	r1, r23
    2202:	18 06       	cpc	r1, r24
    2204:	09 06       	cpc	r0, r25
    2206:	08 95       	ret

00002208 <__fp_pscB>:
    2208:	00 24       	eor	r0, r0
    220a:	0a 94       	dec	r0
    220c:	12 16       	cp	r1, r18
    220e:	13 06       	cpc	r1, r19
    2210:	14 06       	cpc	r1, r20
    2212:	05 06       	cpc	r0, r21
    2214:	08 95       	ret

00002216 <__fp_round>:
    2216:	09 2e       	mov	r0, r25
    2218:	03 94       	inc	r0
    221a:	00 0c       	add	r0, r0
    221c:	11 f4       	brne	.+4      	; 0x2222 <__fp_round+0xc>
    221e:	88 23       	and	r24, r24
    2220:	52 f0       	brmi	.+20     	; 0x2236 <__fp_round+0x20>
    2222:	bb 0f       	add	r27, r27
    2224:	40 f4       	brcc	.+16     	; 0x2236 <__fp_round+0x20>
    2226:	bf 2b       	or	r27, r31
    2228:	11 f4       	brne	.+4      	; 0x222e <__fp_round+0x18>
    222a:	60 ff       	sbrs	r22, 0
    222c:	04 c0       	rjmp	.+8      	; 0x2236 <__fp_round+0x20>
    222e:	6f 5f       	subi	r22, 0xFF	; 255
    2230:	7f 4f       	sbci	r23, 0xFF	; 255
    2232:	8f 4f       	sbci	r24, 0xFF	; 255
    2234:	9f 4f       	sbci	r25, 0xFF	; 255
    2236:	08 95       	ret

00002238 <__fp_split3>:
    2238:	57 fd       	sbrc	r21, 7
    223a:	90 58       	subi	r25, 0x80	; 128
    223c:	44 0f       	add	r20, r20
    223e:	55 1f       	adc	r21, r21
    2240:	59 f0       	breq	.+22     	; 0x2258 <__fp_splitA+0x10>
    2242:	5f 3f       	cpi	r21, 0xFF	; 255
    2244:	71 f0       	breq	.+28     	; 0x2262 <__fp_splitA+0x1a>
    2246:	47 95       	ror	r20

00002248 <__fp_splitA>:
    2248:	88 0f       	add	r24, r24
    224a:	97 fb       	bst	r25, 7
    224c:	99 1f       	adc	r25, r25
    224e:	61 f0       	breq	.+24     	; 0x2268 <__fp_splitA+0x20>
    2250:	9f 3f       	cpi	r25, 0xFF	; 255
    2252:	79 f0       	breq	.+30     	; 0x2272 <__fp_splitA+0x2a>
    2254:	87 95       	ror	r24
    2256:	08 95       	ret
    2258:	12 16       	cp	r1, r18
    225a:	13 06       	cpc	r1, r19
    225c:	14 06       	cpc	r1, r20
    225e:	55 1f       	adc	r21, r21
    2260:	f2 cf       	rjmp	.-28     	; 0x2246 <__fp_split3+0xe>
    2262:	46 95       	lsr	r20
    2264:	f1 df       	rcall	.-30     	; 0x2248 <__fp_splitA>
    2266:	08 c0       	rjmp	.+16     	; 0x2278 <__fp_splitA+0x30>
    2268:	16 16       	cp	r1, r22
    226a:	17 06       	cpc	r1, r23
    226c:	18 06       	cpc	r1, r24
    226e:	99 1f       	adc	r25, r25
    2270:	f1 cf       	rjmp	.-30     	; 0x2254 <__fp_splitA+0xc>
    2272:	86 95       	lsr	r24
    2274:	71 05       	cpc	r23, r1
    2276:	61 05       	cpc	r22, r1
    2278:	08 94       	sec
    227a:	08 95       	ret

0000227c <__fp_zero>:
    227c:	e8 94       	clt

0000227e <__fp_szero>:
    227e:	bb 27       	eor	r27, r27
    2280:	66 27       	eor	r22, r22
    2282:	77 27       	eor	r23, r23
    2284:	cb 01       	movw	r24, r22
    2286:	97 f9       	bld	r25, 7
    2288:	08 95       	ret

0000228a <__gesf2>:
    228a:	8a df       	rcall	.-236    	; 0x21a0 <__fp_cmp>
    228c:	08 f4       	brcc	.+2      	; 0x2290 <__gesf2+0x6>
    228e:	8f ef       	ldi	r24, 0xFF	; 255
    2290:	08 95       	ret

00002292 <__mulsf3>:
    2292:	0b d0       	rcall	.+22     	; 0x22aa <__mulsf3x>
    2294:	c0 cf       	rjmp	.-128    	; 0x2216 <__fp_round>
    2296:	b1 df       	rcall	.-158    	; 0x21fa <__fp_pscA>
    2298:	28 f0       	brcs	.+10     	; 0x22a4 <__mulsf3+0x12>
    229a:	b6 df       	rcall	.-148    	; 0x2208 <__fp_pscB>
    229c:	18 f0       	brcs	.+6      	; 0x22a4 <__mulsf3+0x12>
    229e:	95 23       	and	r25, r21
    22a0:	09 f0       	breq	.+2      	; 0x22a4 <__mulsf3+0x12>
    22a2:	a2 cf       	rjmp	.-188    	; 0x21e8 <__fp_inf>
    22a4:	a7 cf       	rjmp	.-178    	; 0x21f4 <__fp_nan>
    22a6:	11 24       	eor	r1, r1
    22a8:	ea cf       	rjmp	.-44     	; 0x227e <__fp_szero>

000022aa <__mulsf3x>:
    22aa:	c6 df       	rcall	.-116    	; 0x2238 <__fp_split3>
    22ac:	a0 f3       	brcs	.-24     	; 0x2296 <__mulsf3+0x4>

000022ae <__mulsf3_pse>:
    22ae:	95 9f       	mul	r25, r21
    22b0:	d1 f3       	breq	.-12     	; 0x22a6 <__mulsf3+0x14>
    22b2:	95 0f       	add	r25, r21
    22b4:	50 e0       	ldi	r21, 0x00	; 0
    22b6:	55 1f       	adc	r21, r21
    22b8:	62 9f       	mul	r22, r18
    22ba:	f0 01       	movw	r30, r0
    22bc:	72 9f       	mul	r23, r18
    22be:	bb 27       	eor	r27, r27
    22c0:	f0 0d       	add	r31, r0
    22c2:	b1 1d       	adc	r27, r1
    22c4:	63 9f       	mul	r22, r19
    22c6:	aa 27       	eor	r26, r26
    22c8:	f0 0d       	add	r31, r0
    22ca:	b1 1d       	adc	r27, r1
    22cc:	aa 1f       	adc	r26, r26
    22ce:	64 9f       	mul	r22, r20
    22d0:	66 27       	eor	r22, r22
    22d2:	b0 0d       	add	r27, r0
    22d4:	a1 1d       	adc	r26, r1
    22d6:	66 1f       	adc	r22, r22
    22d8:	82 9f       	mul	r24, r18
    22da:	22 27       	eor	r18, r18
    22dc:	b0 0d       	add	r27, r0
    22de:	a1 1d       	adc	r26, r1
    22e0:	62 1f       	adc	r22, r18
    22e2:	73 9f       	mul	r23, r19
    22e4:	b0 0d       	add	r27, r0
    22e6:	a1 1d       	adc	r26, r1
    22e8:	62 1f       	adc	r22, r18
    22ea:	83 9f       	mul	r24, r19
    22ec:	a0 0d       	add	r26, r0
    22ee:	61 1d       	adc	r22, r1
    22f0:	22 1f       	adc	r18, r18
    22f2:	74 9f       	mul	r23, r20
    22f4:	33 27       	eor	r19, r19
    22f6:	a0 0d       	add	r26, r0
    22f8:	61 1d       	adc	r22, r1
    22fa:	23 1f       	adc	r18, r19
    22fc:	84 9f       	mul	r24, r20
    22fe:	60 0d       	add	r22, r0
    2300:	21 1d       	adc	r18, r1
    2302:	82 2f       	mov	r24, r18
    2304:	76 2f       	mov	r23, r22
    2306:	6a 2f       	mov	r22, r26
    2308:	11 24       	eor	r1, r1
    230a:	9f 57       	subi	r25, 0x7F	; 127
    230c:	50 40       	sbci	r21, 0x00	; 0
    230e:	8a f0       	brmi	.+34     	; 0x2332 <__mulsf3_pse+0x84>
    2310:	e1 f0       	breq	.+56     	; 0x234a <__mulsf3_pse+0x9c>
    2312:	88 23       	and	r24, r24
    2314:	4a f0       	brmi	.+18     	; 0x2328 <__mulsf3_pse+0x7a>
    2316:	ee 0f       	add	r30, r30
    2318:	ff 1f       	adc	r31, r31
    231a:	bb 1f       	adc	r27, r27
    231c:	66 1f       	adc	r22, r22
    231e:	77 1f       	adc	r23, r23
    2320:	88 1f       	adc	r24, r24
    2322:	91 50       	subi	r25, 0x01	; 1
    2324:	50 40       	sbci	r21, 0x00	; 0
    2326:	a9 f7       	brne	.-22     	; 0x2312 <__mulsf3_pse+0x64>
    2328:	9e 3f       	cpi	r25, 0xFE	; 254
    232a:	51 05       	cpc	r21, r1
    232c:	70 f0       	brcs	.+28     	; 0x234a <__mulsf3_pse+0x9c>
    232e:	5c cf       	rjmp	.-328    	; 0x21e8 <__fp_inf>
    2330:	a6 cf       	rjmp	.-180    	; 0x227e <__fp_szero>
    2332:	5f 3f       	cpi	r21, 0xFF	; 255
    2334:	ec f3       	brlt	.-6      	; 0x2330 <__mulsf3_pse+0x82>
    2336:	98 3e       	cpi	r25, 0xE8	; 232
    2338:	dc f3       	brlt	.-10     	; 0x2330 <__mulsf3_pse+0x82>
    233a:	86 95       	lsr	r24
    233c:	77 95       	ror	r23
    233e:	67 95       	ror	r22
    2340:	b7 95       	ror	r27
    2342:	f7 95       	ror	r31
    2344:	e7 95       	ror	r30
    2346:	9f 5f       	subi	r25, 0xFF	; 255
    2348:	c1 f7       	brne	.-16     	; 0x233a <__mulsf3_pse+0x8c>
    234a:	fe 2b       	or	r31, r30
    234c:	88 0f       	add	r24, r24
    234e:	91 1d       	adc	r25, r1
    2350:	96 95       	lsr	r25
    2352:	87 95       	ror	r24
    2354:	97 f9       	bld	r25, 7
    2356:	08 95       	ret
    2358:	11 f4       	brne	.+4      	; 0x235e <__mulsf3_pse+0xb0>
    235a:	0e f4       	brtc	.+2      	; 0x235e <__mulsf3_pse+0xb0>
    235c:	4b cf       	rjmp	.-362    	; 0x21f4 <__fp_nan>
    235e:	41 c0       	rjmp	.+130    	; 0x23e2 <__fp_mpack>

00002360 <sqrt>:
    2360:	73 df       	rcall	.-282    	; 0x2248 <__fp_splitA>
    2362:	d0 f3       	brcs	.-12     	; 0x2358 <__mulsf3_pse+0xaa>
    2364:	99 23       	and	r25, r25
    2366:	d9 f3       	breq	.-10     	; 0x235e <__mulsf3_pse+0xb0>
    2368:	ce f3       	brts	.-14     	; 0x235c <__mulsf3_pse+0xae>
    236a:	9f 57       	subi	r25, 0x7F	; 127
    236c:	55 0b       	sbc	r21, r21
    236e:	87 ff       	sbrs	r24, 7
    2370:	46 d0       	rcall	.+140    	; 0x23fe <__fp_norm2>
    2372:	00 24       	eor	r0, r0
    2374:	a0 e6       	ldi	r26, 0x60	; 96
    2376:	40 ea       	ldi	r20, 0xA0	; 160
    2378:	90 01       	movw	r18, r0
    237a:	80 58       	subi	r24, 0x80	; 128
    237c:	56 95       	lsr	r21
    237e:	97 95       	ror	r25
    2380:	28 f4       	brcc	.+10     	; 0x238c <sqrt+0x2c>
    2382:	80 5c       	subi	r24, 0xC0	; 192
    2384:	66 0f       	add	r22, r22
    2386:	77 1f       	adc	r23, r23
    2388:	88 1f       	adc	r24, r24
    238a:	20 f0       	brcs	.+8      	; 0x2394 <sqrt+0x34>
    238c:	26 17       	cp	r18, r22
    238e:	37 07       	cpc	r19, r23
    2390:	48 07       	cpc	r20, r24
    2392:	30 f4       	brcc	.+12     	; 0x23a0 <sqrt+0x40>
    2394:	62 1b       	sub	r22, r18
    2396:	73 0b       	sbc	r23, r19
    2398:	84 0b       	sbc	r24, r20
    239a:	20 29       	or	r18, r0
    239c:	31 29       	or	r19, r1
    239e:	4a 2b       	or	r20, r26
    23a0:	a6 95       	lsr	r26
    23a2:	17 94       	ror	r1
    23a4:	07 94       	ror	r0
    23a6:	20 25       	eor	r18, r0
    23a8:	31 25       	eor	r19, r1
    23aa:	4a 27       	eor	r20, r26
    23ac:	58 f7       	brcc	.-42     	; 0x2384 <sqrt+0x24>
    23ae:	66 0f       	add	r22, r22
    23b0:	77 1f       	adc	r23, r23
    23b2:	88 1f       	adc	r24, r24
    23b4:	20 f0       	brcs	.+8      	; 0x23be <sqrt+0x5e>
    23b6:	26 17       	cp	r18, r22
    23b8:	37 07       	cpc	r19, r23
    23ba:	48 07       	cpc	r20, r24
    23bc:	30 f4       	brcc	.+12     	; 0x23ca <sqrt+0x6a>
    23be:	62 0b       	sbc	r22, r18
    23c0:	73 0b       	sbc	r23, r19
    23c2:	84 0b       	sbc	r24, r20
    23c4:	20 0d       	add	r18, r0
    23c6:	31 1d       	adc	r19, r1
    23c8:	41 1d       	adc	r20, r1
    23ca:	a0 95       	com	r26
    23cc:	81 f7       	brne	.-32     	; 0x23ae <sqrt+0x4e>
    23ce:	b9 01       	movw	r22, r18
    23d0:	84 2f       	mov	r24, r20
    23d2:	91 58       	subi	r25, 0x81	; 129
    23d4:	88 0f       	add	r24, r24
    23d6:	96 95       	lsr	r25
    23d8:	87 95       	ror	r24
    23da:	08 95       	ret

000023dc <square>:
    23dc:	9b 01       	movw	r18, r22
    23de:	ac 01       	movw	r20, r24
    23e0:	58 cf       	rjmp	.-336    	; 0x2292 <__mulsf3>

000023e2 <__fp_mpack>:
    23e2:	9f 3f       	cpi	r25, 0xFF	; 255
    23e4:	31 f0       	breq	.+12     	; 0x23f2 <__fp_mpack_finite+0xc>

000023e6 <__fp_mpack_finite>:
    23e6:	91 50       	subi	r25, 0x01	; 1
    23e8:	20 f4       	brcc	.+8      	; 0x23f2 <__fp_mpack_finite+0xc>
    23ea:	87 95       	ror	r24
    23ec:	77 95       	ror	r23
    23ee:	67 95       	ror	r22
    23f0:	b7 95       	ror	r27
    23f2:	88 0f       	add	r24, r24
    23f4:	91 1d       	adc	r25, r1
    23f6:	96 95       	lsr	r25
    23f8:	87 95       	ror	r24
    23fa:	97 f9       	bld	r25, 7
    23fc:	08 95       	ret

000023fe <__fp_norm2>:
    23fe:	91 50       	subi	r25, 0x01	; 1
    2400:	50 40       	sbci	r21, 0x00	; 0
    2402:	66 0f       	add	r22, r22
    2404:	77 1f       	adc	r23, r23
    2406:	88 1f       	adc	r24, r24
    2408:	d2 f7       	brpl	.-12     	; 0x23fe <__fp_norm2>
    240a:	08 95       	ret

0000240c <__udivmodsi4>:
    240c:	a1 e2       	ldi	r26, 0x21	; 33
    240e:	1a 2e       	mov	r1, r26
    2410:	aa 1b       	sub	r26, r26
    2412:	bb 1b       	sub	r27, r27
    2414:	fd 01       	movw	r30, r26
    2416:	0d c0       	rjmp	.+26     	; 0x2432 <__udivmodsi4_ep>

00002418 <__udivmodsi4_loop>:
    2418:	aa 1f       	adc	r26, r26
    241a:	bb 1f       	adc	r27, r27
    241c:	ee 1f       	adc	r30, r30
    241e:	ff 1f       	adc	r31, r31
    2420:	a2 17       	cp	r26, r18
    2422:	b3 07       	cpc	r27, r19
    2424:	e4 07       	cpc	r30, r20
    2426:	f5 07       	cpc	r31, r21
    2428:	20 f0       	brcs	.+8      	; 0x2432 <__udivmodsi4_ep>
    242a:	a2 1b       	sub	r26, r18
    242c:	b3 0b       	sbc	r27, r19
    242e:	e4 0b       	sbc	r30, r20
    2430:	f5 0b       	sbc	r31, r21

00002432 <__udivmodsi4_ep>:
    2432:	66 1f       	adc	r22, r22
    2434:	77 1f       	adc	r23, r23
    2436:	88 1f       	adc	r24, r24
    2438:	99 1f       	adc	r25, r25
    243a:	1a 94       	dec	r1
    243c:	69 f7       	brne	.-38     	; 0x2418 <__udivmodsi4_loop>
    243e:	60 95       	com	r22
    2440:	70 95       	com	r23
    2442:	80 95       	com	r24
    2444:	90 95       	com	r25
    2446:	9b 01       	movw	r18, r22
    2448:	ac 01       	movw	r20, r24
    244a:	bd 01       	movw	r22, r26
    244c:	cf 01       	movw	r24, r30
    244e:	08 95       	ret

00002450 <memset>:
    2450:	dc 01       	movw	r26, r24
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <memset+0x6>
    2454:	6d 93       	st	X+, r22
    2456:	41 50       	subi	r20, 0x01	; 1
    2458:	50 40       	sbci	r21, 0x00	; 0
    245a:	e0 f7       	brcc	.-8      	; 0x2454 <memset+0x4>
    245c:	08 95       	ret

0000245e <_exit>:
    245e:	f8 94       	cli

00002460 <__stop_program>:
    2460:	ff cf       	rjmp	.-2      	; 0x2460 <__stop_program>
