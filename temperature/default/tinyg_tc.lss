
tinyg_tc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002420  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000002dd  00800100  00800100  00002494  2**0
                  ALLOC
  2 .debug_aranges 000000e0  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000053c  00000000  00000000  00002574  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001d31  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000802  00000000  00000000  000047e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001260  00000000  00000000  00004fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000440  00000000  00000000  00006244  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000aee  00000000  00000000  00006684  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 84 00 	jmp	0x108	; 0x108 <__ctors_end>
       4:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
       8:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
       c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      10:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      14:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      18:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      1c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      20:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      24:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      28:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      2c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      30:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      34:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      38:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      3c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      40:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_16>
      44:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__vector_17>
      48:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <__vector_18>
      4c:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__vector_19>
      50:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      54:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      58:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      5c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      60:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      64:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>

00000068 <initialized>:
      68:	0a 44 65 76 69 63 65 20 49 6e 69 74 69 61 6c 69     .Device Initiali
      78:	7a 65 64 0a 00                                      zed..

0000007d <msg_scode0>:
      7d:	49 64 6c 65 00                                      Idle.

00000082 <msg_scode1>:
      82:	54 61 6b 69 6e 67 20 52 65 61 64 69 6e 67 00        Taking Reading.

00000091 <msg_scode2>:
      91:	42 61 64 20 52 65 61 64 69 6e 67 00                 Bad Reading.

0000009d <msg_scode3>:
      9d:	44 69 73 63 6f 6e 6e 65 63 74 65 64 00              Disconnected.

000000aa <msg_scode4>:
      aa:	4e 6f 20 50 6f 77 65 72 00                          No Power.

000000b3 <msg_scode>:
      b3:	7d 00 82 00 91 00 9d 00 aa 00                       }.........

000000bd <__c.1905>:
      bd:	0a 44 65 76 69 63 65 20 49 6e 69 74 69 61 6c 69     .Device Initiali
      cd:	7a 65 64 0a 00                                      zed..

000000d2 <__c.1917>:
      d2:	20 20 00                                              .

000000d5 <__c.1915>:
      d5:	20 50 57 4d 3a 20 00                                 PWM: .

000000dc <__c.1913>:
      dc:	20 73 5b 30 5d 3a 20 00                              s[0]: .

000000e4 <__c.1911>:
      e4:	20 53 74 64 44 65 76 3a 20 00                        StdDev: .

000000ee <__c.1909>:
      ee:	54 65 6d 70 3a 20 00                                Temp: .

000000f5 <__c.1929>:
      f5:	0a 00                                               ..

000000f7 <__c.1927>:
      f7:	20 20 50 49 44 3a 20 00                               PID: .

000000ff <__c.1925>:
      ff:	54 65 6d 70 3a 20 00                                Temp: .

00000106 <__c.1938>:
     106:	0a 00                                               ..

00000108 <__ctors_end>:
     108:	11 24       	eor	r1, r1
     10a:	1f be       	out	0x3f, r1	; 63
     10c:	cf ef       	ldi	r28, 0xFF	; 255
     10e:	d8 e0       	ldi	r29, 0x08	; 8
     110:	de bf       	out	0x3e, r29	; 62
     112:	cd bf       	out	0x3d, r28	; 61

00000114 <__do_clear_bss>:
     114:	13 e0       	ldi	r17, 0x03	; 3
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	01 c0       	rjmp	.+2      	; 0x11e <.do_clear_bss_start>

0000011c <.do_clear_bss_loop>:
     11c:	1d 92       	st	X+, r1

0000011e <.do_clear_bss_start>:
     11e:	ad 3d       	cpi	r26, 0xDD	; 221
     120:	b1 07       	cpc	r27, r17
     122:	e1 f7       	brne	.-8      	; 0x11c <.do_clear_bss_loop>
     124:	0e 94 98 00 	call	0x130	; 0x130 <main>
     128:	0c 94 0e 12 	jmp	0x241c	; 0x241c <_exit>

0000012c <__bad_interrupt>:
     12c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000130 <main>:
 *
 *	Device and Kinen initialization
 *	Main loop handler
 */
int main(void)
{
     130:	df 93       	push	r29
     132:	cf 93       	push	r28
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
	cli();						// initializations
     138:	f8 94       	cli
	kinen_init();				// do this first
     13a:	0e 94 a9 09 	call	0x1352	; 0x1352 <kinen_init>
	device_init();				// handles all the low-level device peripheral inits
     13e:	0e 94 b5 00 	call	0x16a	; 0x16a <device_init>
	serial_init(BAUD_RATE);
     142:	60 e8       	ldi	r22, 0x80	; 128
     144:	75 e2       	ldi	r23, 0x25	; 37
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <serial_init>
	heater_init();				// setup the heater module and subordinate functions
     14e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <heater_init>
	sei(); 						// enable interrupts
     152:	78 94       	sei

	UNIT_TESTS;					// uncomment __UNIT_TEST_TC to enable unit tests

	heater_on(140);				// turn heater on for testing
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	8c e0       	ldi	r24, 0x0C	; 12
     15a:	93 e4       	ldi	r25, 0x43	; 67
     15c:	0e 94 25 01 	call	0x24a	; 0x24a <heater_on>
	rpt_initialized();			// send initalization string
     160:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <rpt_initialized>

	while (true) {				// go to the controller loop and never return
		_controller();
     164:	0e 94 cf 00 	call	0x19e	; 0x19e <_controller>
     168:	fd cf       	rjmp	.-6      	; 0x164 <main+0x34>

0000016a <device_init>:

/*
 * Device Init 
 */
void device_init(void)
{
     16a:	df 93       	push	r29
     16c:	cf 93       	push	r28
     16e:	cd b7       	in	r28, 0x3d	; 61
     170:	de b7       	in	r29, 0x3e	; 62
	DDRB = PORTB_DIR;			// initialize all ports for proper IO function
     172:	e4 e2       	ldi	r30, 0x24	; 36
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 e1       	ldi	r24, 0x10	; 16
     178:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
     17a:	e7 e2       	ldi	r30, 0x27	; 39
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
     180:	ea e2       	ldi	r30, 0x2A	; 42
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	8c e0       	ldi	r24, 0x0C	; 12
     186:	80 83       	st	Z, r24

	adc_init();
     188:	0e 94 fd 06 	call	0xdfa	; 0xdfa <adc_init>
	pwm_init();
     18c:	0e 94 42 07 	call	0xe84	; 0xe84 <pwm_init>
	tick_init();
     190:	0e 94 a7 08 	call	0x114e	; 0x114e <tick_init>
	led_off();					// put off the red light [~Sting, 1978]
     194:	0e 94 3d 09 	call	0x127a	; 0x127a <led_off>
}
     198:	cf 91       	pop	r28
     19a:	df 91       	pop	r29
     19c:	08 95       	ret

0000019e <_controller>:
 *	start of the list. For any other status code exceution continues down the list
 */

#define	DISPATCH(func) if (func == SC_EAGAIN) return; 
static void _controller()
{
     19e:	df 93       	push	r29
     1a0:	cf 93       	push	r28
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
	DISPATCH(kinen_callback());		// intercept low-level communication events
     1a6:	0e 94 b2 09 	call	0x1364	; 0x1364 <kinen_callback>
     1aa:	82 30       	cpi	r24, 0x02	; 2
     1ac:	11 f0       	breq	.+4      	; 0x1b2 <_controller+0x14>
	DISPATCH(tick_callback());		// regular interval timer clock handler (ticks)
     1ae:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <tick_callback>
}
     1b2:	cf 91       	pop	r28
     1b4:	df 91       	pop	r29
     1b6:	08 95       	ret

000001b8 <heater_init>:
 * heater_off()	 - turn heater off	
 * heater_callback() - 100ms timed loop for heater control
 */

void heater_init()
{ 
     1b8:	df 93       	push	r29
     1ba:	cf 93       	push	r28
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
	// initialize heater, start PID and PWM
	// note: PWM and ADC are initialized as part of the device init
	memset(&heater, 0, sizeof(Heater));
     1c0:	87 e0       	ldi	r24, 0x07	; 7
     1c2:	91 e0       	ldi	r25, 0x01	; 1
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	70 e0       	ldi	r23, 0x00	; 0
     1c8:	41 e2       	ldi	r20, 0x21	; 33
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	0e 94 07 12 	call	0x240e	; 0x240e <memset>
	heater.ambient_timeout = HEATER_AMBIENT_TIMEOUT;
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	a4 eb       	ldi	r26, 0xB4	; 180
     1d6:	b2 e4       	ldi	r27, 0x42	; 66
     1d8:	80 93 18 01 	sts	0x0118, r24
     1dc:	90 93 19 01 	sts	0x0119, r25
     1e0:	a0 93 1a 01 	sts	0x011A, r26
     1e4:	b0 93 1b 01 	sts	0x011B, r27
	heater.regulation_timeout = HEATER_REGULATION_TIMEOUT;
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	a6 e9       	ldi	r26, 0x96	; 150
     1ee:	b3 e4       	ldi	r27, 0x43	; 67
     1f0:	80 93 1c 01 	sts	0x011C, r24
     1f4:	90 93 1d 01 	sts	0x011D, r25
     1f8:	a0 93 1e 01 	sts	0x011E, r26
     1fc:	b0 93 1f 01 	sts	0x011F, r27
	heater.ambient_temperature = HEATER_AMBIENT_TEMPERATURE;
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	a0 e2       	ldi	r26, 0x20	; 32
     206:	b2 e4       	ldi	r27, 0x42	; 66
     208:	80 93 20 01 	sts	0x0120, r24
     20c:	90 93 21 01 	sts	0x0121, r25
     210:	a0 93 22 01 	sts	0x0122, r26
     214:	b0 93 23 01 	sts	0x0123, r27
	heater.overheat_temperature = HEATER_OVERHEAT_TEMPERATURE;
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	a6 e9       	ldi	r26, 0x96	; 150
     21e:	b3 e4       	ldi	r27, 0x43	; 67
     220:	80 93 24 01 	sts	0x0124, r24
     224:	90 93 25 01 	sts	0x0125, r25
     228:	a0 93 26 01 	sts	0x0126, r26
     22c:	b0 93 27 01 	sts	0x0127, r27
	heater.bad_reading_count = HEATER_BAD_READING_COUNT;
     230:	8a e0       	ldi	r24, 0x0A	; 10
     232:	80 93 0a 01 	sts	0x010A, r24
	heater.regulation_count = HEATER_REGULATION_COUNT;
     236:	8a e0       	ldi	r24, 0x0A	; 10
     238:	80 93 0b 01 	sts	0x010B, r24
	sensor_init();					// setup the temperature sensor module
     23c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <sensor_init>
	pid_init();
     240:	0e 94 86 02 	call	0x50c	; 0x50c <pid_init>
}
     244:	cf 91       	pop	r28
     246:	df 91       	pop	r29
     248:	08 95       	ret

0000024a <heater_on>:

void heater_on(double setpoint)
{
     24a:	df 93       	push	r29
     24c:	cf 93       	push	r28
     24e:	00 d0       	rcall	.+0      	; 0x250 <heater_on+0x6>
     250:	00 d0       	rcall	.+0      	; 0x252 <heater_on+0x8>
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
     256:	69 83       	std	Y+1, r22	; 0x01
     258:	7a 83       	std	Y+2, r23	; 0x02
     25a:	8b 83       	std	Y+3, r24	; 0x03
     25c:	9c 83       	std	Y+4, r25	; 0x04
	// no action if heater is already on
	if ((heater.state == HEATER_HEATING) || (heater.state == HEATER_REGULATED)) {
     25e:	80 91 07 01 	lds	r24, 0x0107
     262:	82 30       	cpi	r24, 0x02	; 2
     264:	19 f1       	breq	.+70     	; 0x2ac <heater_on+0x62>
     266:	80 91 07 01 	lds	r24, 0x0107
     26a:	83 30       	cpi	r24, 0x03	; 3
     26c:	f9 f0       	breq	.+62     	; 0x2ac <heater_on+0x62>
		return;
	}
	// turn on lower level functions
	sensor_on();					// enable the sensor
     26e:	0e 94 25 05 	call	0xa4a	; 0xa4a <sensor_on>
	sensor_start_reading();			// now start a reading
     272:	0e 94 38 05 	call	0xa70	; 0xa70 <sensor_start_reading>
	pid_reset();
     276:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pid_reset>
	pwm_on(PWM_FREQUENCY, 0);		// duty cycle will be set by PID loop
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	8a e7       	ldi	r24, 0x7A	; 122
     280:	94 e4       	ldi	r25, 0x44	; 68
     282:	20 e0       	ldi	r18, 0x00	; 0
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	40 e0       	ldi	r20, 0x00	; 0
     288:	50 e0       	ldi	r21, 0x00	; 0
     28a:	0e 94 74 07 	call	0xee8	; 0xee8 <pwm_on>
	heater.setpoint = setpoint;
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	9a 81       	ldd	r25, Y+2	; 0x02
     292:	ab 81       	ldd	r26, Y+3	; 0x03
     294:	bc 81       	ldd	r27, Y+4	; 0x04
     296:	80 93 10 01 	sts	0x0110, r24
     29a:	90 93 11 01 	sts	0x0111, r25
     29e:	a0 93 12 01 	sts	0x0112, r26
     2a2:	b0 93 13 01 	sts	0x0113, r27
	heater.state = HEATER_HEATING;
     2a6:	82 e0       	ldi	r24, 0x02	; 2
     2a8:	80 93 07 01 	sts	0x0107, r24
}
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	cf 91       	pop	r28
     2b6:	df 91       	pop	r29
     2b8:	08 95       	ret

000002ba <heater_off>:

void heater_off(uint8_t state, uint8_t code) 
{
     2ba:	df 93       	push	r29
     2bc:	cf 93       	push	r28
     2be:	00 d0       	rcall	.+0      	; 0x2c0 <heater_off+0x6>
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	89 83       	std	Y+1, r24	; 0x01
     2c6:	6a 83       	std	Y+2, r22	; 0x02
	pwm_off();						// stop sending current to the heater
     2c8:	0e 94 a1 07 	call	0xf42	; 0xf42 <pwm_off>
	sensor_off();					// stop taking readings
     2cc:	0e 94 2f 05 	call	0xa5e	; 0xa5e <sensor_off>
	heater.state = state;
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	80 93 07 01 	sts	0x0107, r24
	heater.code = code;
     2d6:	8a 81       	ldd	r24, Y+2	; 0x02
     2d8:	80 93 08 01 	sts	0x0108, r24
	led_off();
     2dc:	0e 94 3d 09 	call	0x127a	; 0x127a <led_off>
}
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	cf 91       	pop	r28
     2e6:	df 91       	pop	r29
     2e8:	08 95       	ret

000002ea <heater_callback>:

void heater_callback()
{
     2ea:	df 93       	push	r29
     2ec:	cf 93       	push	r28
     2ee:	00 d0       	rcall	.+0      	; 0x2f0 <heater_callback+0x6>
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <heater_callback+0x8>
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
	// catch the no-op cases
	if ((heater.state == HEATER_OFF) || (heater.state == HEATER_SHUTDOWN)) { return;}
     2f6:	80 91 07 01 	lds	r24, 0x0107
     2fa:	88 23       	and	r24, r24
     2fc:	09 f4       	brne	.+2      	; 0x300 <heater_callback+0x16>
     2fe:	ff c0       	rjmp	.+510    	; 0x4fe <heater_callback+0x214>
     300:	80 91 07 01 	lds	r24, 0x0107
     304:	81 30       	cpi	r24, 0x01	; 1
     306:	09 f4       	brne	.+2      	; 0x30a <heater_callback+0x20>
     308:	fa c0       	rjmp	.+500    	; 0x4fe <heater_callback+0x214>

	rpt_readout();
     30a:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <rpt_readout>

	// get current temp or an error if there is no temperature reading
	if ((heater.temperature = sensor_get_temperature()) < ABSOLUTE_ZERO) {
     30e:	0e 94 56 05 	call	0xaac	; 0xaac <sensor_get_temperature>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	80 93 0c 01 	sts	0x010C, r24
     31a:	90 93 0d 01 	sts	0x010D, r25
     31e:	a0 93 0e 01 	sts	0x010E, r26
     322:	b0 93 0f 01 	sts	0x010F, r27
     326:	80 91 0c 01 	lds	r24, 0x010C
     32a:	90 91 0d 01 	lds	r25, 0x010D
     32e:	a0 91 0e 01 	lds	r26, 0x010E
     332:	b0 91 0f 01 	lds	r27, 0x010F
     336:	bc 01       	movw	r22, r24
     338:	cd 01       	movw	r24, r26
     33a:	23 e3       	ldi	r18, 0x33	; 51
     33c:	33 e9       	ldi	r19, 0x93	; 147
     33e:	48 e8       	ldi	r20, 0x88	; 136
     340:	53 ec       	ldi	r21, 0xC3	; 195
     342:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__cmpsf2>
     346:	88 23       	and	r24, r24
     348:	0c f4       	brge	.+2      	; 0x34c <heater_callback+0x62>
     34a:	d9 c0       	rjmp	.+434    	; 0x4fe <heater_callback+0x214>
		return;
	}
	if (heater.temperature > heater.overheat_temperature) {
     34c:	80 91 0c 01 	lds	r24, 0x010C
     350:	90 91 0d 01 	lds	r25, 0x010D
     354:	a0 91 0e 01 	lds	r26, 0x010E
     358:	b0 91 0f 01 	lds	r27, 0x010F
     35c:	20 91 24 01 	lds	r18, 0x0124
     360:	30 91 25 01 	lds	r19, 0x0125
     364:	40 91 26 01 	lds	r20, 0x0126
     368:	50 91 27 01 	lds	r21, 0x0127
     36c:	bc 01       	movw	r22, r24
     36e:	cd 01       	movw	r24, r26
     370:	0e 94 24 11 	call	0x2248	; 0x2248 <__gesf2>
     374:	18 16       	cp	r1, r24
     376:	2c f4       	brge	.+10     	; 0x382 <heater_callback+0x98>
		heater_off(HEATER_SHUTDOWN, HEATER_OVERHEATED);
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	63 e0       	ldi	r22, 0x03	; 3
     37c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <heater_off>
     380:	be c0       	rjmp	.+380    	; 0x4fe <heater_callback+0x214>
		return;
	}
	sensor_start_reading();		// start next reading
     382:	0e 94 38 05 	call	0xa70	; 0xa70 <sensor_start_reading>

	// calculate the next PWM level via the PID
	double duty_cycle = pid_calculate(heater.setpoint, heater.temperature);
     386:	80 91 10 01 	lds	r24, 0x0110
     38a:	90 91 11 01 	lds	r25, 0x0111
     38e:	a0 91 12 01 	lds	r26, 0x0112
     392:	b0 91 13 01 	lds	r27, 0x0113
     396:	20 91 0c 01 	lds	r18, 0x010C
     39a:	30 91 0d 01 	lds	r19, 0x010D
     39e:	40 91 0e 01 	lds	r20, 0x010E
     3a2:	50 91 0f 01 	lds	r21, 0x010F
     3a6:	bc 01       	movw	r22, r24
     3a8:	cd 01       	movw	r24, r26
     3aa:	0e 94 0b 03 	call	0x616	; 0x616 <pid_calculate>
     3ae:	dc 01       	movw	r26, r24
     3b0:	cb 01       	movw	r24, r22
     3b2:	89 83       	std	Y+1, r24	; 0x01
     3b4:	9a 83       	std	Y+2, r25	; 0x02
     3b6:	ab 83       	std	Y+3, r26	; 0x03
     3b8:	bc 83       	std	Y+4, r27	; 0x04
	pwm_set_duty(duty_cycle);
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	9a 81       	ldd	r25, Y+2	; 0x02
     3be:	ab 81       	ldd	r26, Y+3	; 0x03
     3c0:	bc 81       	ldd	r27, Y+4	; 0x04
     3c2:	bc 01       	movw	r22, r24
     3c4:	cd 01       	movw	r24, r26
     3c6:	0e 94 1c 08 	call	0x1038	; 0x1038 <pwm_set_duty>


	// handle HEATER exceptions
	if (heater.state == HEATER_HEATING) {
     3ca:	80 91 07 01 	lds	r24, 0x0107
     3ce:	82 30       	cpi	r24, 0x02	; 2
     3d0:	09 f0       	breq	.+2      	; 0x3d4 <heater_callback+0xea>
     3d2:	7c c0       	rjmp	.+248    	; 0x4cc <heater_callback+0x1e2>
		heater.regulation_timer += HEATER_TICK_SECONDS;
     3d4:	80 91 14 01 	lds	r24, 0x0114
     3d8:	90 91 15 01 	lds	r25, 0x0115
     3dc:	a0 91 16 01 	lds	r26, 0x0116
     3e0:	b0 91 17 01 	lds	r27, 0x0117
     3e4:	bc 01       	movw	r22, r24
     3e6:	cd 01       	movw	r24, r26
     3e8:	2d ec       	ldi	r18, 0xCD	; 205
     3ea:	3c ec       	ldi	r19, 0xCC	; 204
     3ec:	4c ec       	ldi	r20, 0xCC	; 204
     3ee:	5d e3       	ldi	r21, 0x3D	; 61
     3f0:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__addsf3>
     3f4:	dc 01       	movw	r26, r24
     3f6:	cb 01       	movw	r24, r22
     3f8:	80 93 14 01 	sts	0x0114, r24
     3fc:	90 93 15 01 	sts	0x0115, r25
     400:	a0 93 16 01 	sts	0x0116, r26
     404:	b0 93 17 01 	sts	0x0117, r27

		if ((heater.temperature < heater.ambient_temperature) &&
     408:	80 91 0c 01 	lds	r24, 0x010C
     40c:	90 91 0d 01 	lds	r25, 0x010D
     410:	a0 91 0e 01 	lds	r26, 0x010E
     414:	b0 91 0f 01 	lds	r27, 0x010F
     418:	20 91 20 01 	lds	r18, 0x0120
     41c:	30 91 21 01 	lds	r19, 0x0121
     420:	40 91 22 01 	lds	r20, 0x0122
     424:	50 91 23 01 	lds	r21, 0x0123
     428:	bc 01       	movw	r22, r24
     42a:	cd 01       	movw	r24, r26
     42c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__cmpsf2>
     430:	88 23       	and	r24, r24
     432:	dc f4       	brge	.+54     	; 0x46a <heater_callback+0x180>
     434:	80 91 14 01 	lds	r24, 0x0114
     438:	90 91 15 01 	lds	r25, 0x0115
     43c:	a0 91 16 01 	lds	r26, 0x0116
     440:	b0 91 17 01 	lds	r27, 0x0117
     444:	20 91 18 01 	lds	r18, 0x0118
     448:	30 91 19 01 	lds	r19, 0x0119
     44c:	40 91 1a 01 	lds	r20, 0x011A
     450:	50 91 1b 01 	lds	r21, 0x011B
     454:	bc 01       	movw	r22, r24
     456:	cd 01       	movw	r24, r26
     458:	0e 94 24 11 	call	0x2248	; 0x2248 <__gesf2>
     45c:	18 16       	cp	r1, r24
     45e:	2c f4       	brge	.+10     	; 0x46a <heater_callback+0x180>
			(heater.regulation_timer > heater.ambient_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_AMBIENT_TIMED_OUT);
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	61 e0       	ldi	r22, 0x01	; 1
     464:	0e 94 5d 01 	call	0x2ba	; 0x2ba <heater_off>
     468:	4a c0       	rjmp	.+148    	; 0x4fe <heater_callback+0x214>
			return;
		}
		if ((heater.temperature < heater.setpoint) &&
     46a:	80 91 0c 01 	lds	r24, 0x010C
     46e:	90 91 0d 01 	lds	r25, 0x010D
     472:	a0 91 0e 01 	lds	r26, 0x010E
     476:	b0 91 0f 01 	lds	r27, 0x010F
     47a:	20 91 10 01 	lds	r18, 0x0110
     47e:	30 91 11 01 	lds	r19, 0x0111
     482:	40 91 12 01 	lds	r20, 0x0112
     486:	50 91 13 01 	lds	r21, 0x0113
     48a:	bc 01       	movw	r22, r24
     48c:	cd 01       	movw	r24, r26
     48e:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__cmpsf2>
     492:	88 23       	and	r24, r24
     494:	dc f4       	brge	.+54     	; 0x4cc <heater_callback+0x1e2>
     496:	80 91 14 01 	lds	r24, 0x0114
     49a:	90 91 15 01 	lds	r25, 0x0115
     49e:	a0 91 16 01 	lds	r26, 0x0116
     4a2:	b0 91 17 01 	lds	r27, 0x0117
     4a6:	20 91 1c 01 	lds	r18, 0x011C
     4aa:	30 91 1d 01 	lds	r19, 0x011D
     4ae:	40 91 1e 01 	lds	r20, 0x011E
     4b2:	50 91 1f 01 	lds	r21, 0x011F
     4b6:	bc 01       	movw	r22, r24
     4b8:	cd 01       	movw	r24, r26
     4ba:	0e 94 24 11 	call	0x2248	; 0x2248 <__gesf2>
     4be:	18 16       	cp	r1, r24
     4c0:	2c f4       	brge	.+10     	; 0x4cc <heater_callback+0x1e2>
			(heater.regulation_timer > heater.regulation_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_REGULATION_TIMED_OUT);
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	62 e0       	ldi	r22, 0x02	; 2
     4c6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <heater_off>
     4ca:	19 c0       	rjmp	.+50     	; 0x4fe <heater_callback+0x214>
			return;
		}
	}
	// manage heater state and LED indicator
	if (heater.regulation_count > 0) {
     4cc:	80 91 0b 01 	lds	r24, 0x010B
     4d0:	88 23       	and	r24, r24
     4d2:	61 f0       	breq	.+24     	; 0x4ec <heater_callback+0x202>
		if (--heater.regulation_count <= 0) {
     4d4:	80 91 0b 01 	lds	r24, 0x010B
     4d8:	81 50       	subi	r24, 0x01	; 1
     4da:	80 93 0b 01 	sts	0x010B, r24
     4de:	80 91 0b 01 	lds	r24, 0x010B
     4e2:	88 23       	and	r24, r24
     4e4:	19 f4       	brne	.+6      	; 0x4ec <heater_callback+0x202>
			heater.state = HEATER_REGULATED;
     4e6:	83 e0       	ldi	r24, 0x03	; 3
     4e8:	80 93 07 01 	sts	0x0107, r24
		}
	}
	if (heater.state == HEATER_REGULATED) {
     4ec:	80 91 07 01 	lds	r24, 0x0107
     4f0:	83 30       	cpi	r24, 0x03	; 3
     4f2:	19 f4       	brne	.+6      	; 0x4fa <heater_callback+0x210>
		led_on();
     4f4:	0e 94 2f 09 	call	0x125e	; 0x125e <led_on>
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <heater_callback+0x214>
	} else {
		led_toggle();
     4fa:	0e 94 4b 09 	call	0x1296	; 0x1296 <led_toggle>
	}
}
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	cf 91       	pop	r28
     508:	df 91       	pop	r29
     50a:	08 95       	ret

0000050c <pid_init>:
 * pid_reset() - reset PID values to cold start
 * pid_calc() - derived from: http://www.embeddedheaven.com/pid-control-algorithm-c-language.htm
 */

void pid_init() 
{
     50c:	df 93       	push	r29
     50e:	cf 93       	push	r28
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
	memset(&pid, 0, sizeof(struct PIDstruct));
     514:	88 e2       	ldi	r24, 0x28	; 40
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	46 e3       	ldi	r20, 0x36	; 54
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	0e 94 07 12 	call	0x240e	; 0x240e <memset>
	pid.dt = PID_DT;
     524:	8d ec       	ldi	r24, 0xCD	; 205
     526:	9c ec       	ldi	r25, 0xCC	; 204
     528:	ac ec       	ldi	r26, 0xCC	; 204
     52a:	bd e3       	ldi	r27, 0x3D	; 61
     52c:	80 93 46 01 	sts	0x0146, r24
     530:	90 93 47 01 	sts	0x0147, r25
     534:	a0 93 48 01 	sts	0x0148, r26
     538:	b0 93 49 01 	sts	0x0149, r27
	pid.Kp = PID_Kp;
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	a0 e8       	ldi	r26, 0x80	; 128
     542:	b0 e4       	ldi	r27, 0x40	; 64
     544:	80 93 4a 01 	sts	0x014A, r24
     548:	90 93 4b 01 	sts	0x014B, r25
     54c:	a0 93 4c 01 	sts	0x014C, r26
     550:	b0 93 4d 01 	sts	0x014D, r27
	pid.Ki = PID_Ki;
     554:	8d ec       	ldi	r24, 0xCD	; 205
     556:	9c ec       	ldi	r25, 0xCC	; 204
     558:	ac ec       	ldi	r26, 0xCC	; 204
     55a:	bd e3       	ldi	r27, 0x3D	; 61
     55c:	80 93 4e 01 	sts	0x014E, r24
     560:	90 93 4f 01 	sts	0x014F, r25
     564:	a0 93 50 01 	sts	0x0150, r26
     568:	b0 93 51 01 	sts	0x0151, r27
	pid.Kd = PID_Kd;
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	a0 e0       	ldi	r26, 0x00	; 0
     572:	b0 e0       	ldi	r27, 0x00	; 0
     574:	80 93 52 01 	sts	0x0152, r24
     578:	90 93 53 01 	sts	0x0153, r25
     57c:	a0 93 54 01 	sts	0x0154, r26
     580:	b0 93 55 01 	sts	0x0155, r27
	pid.output_max = PID_MAX_OUTPUT;		// saturation filter max value
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	a8 ec       	ldi	r26, 0xC8	; 200
     58a:	b2 e4       	ldi	r27, 0x42	; 66
     58c:	80 93 2e 01 	sts	0x012E, r24
     590:	90 93 2f 01 	sts	0x012F, r25
     594:	a0 93 30 01 	sts	0x0130, r26
     598:	b0 93 31 01 	sts	0x0131, r27
	pid.output_min = PID_MIN_OUTPUT;		// saturation filter min value
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	a0 e0       	ldi	r26, 0x00	; 0
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	80 93 32 01 	sts	0x0132, r24
     5a8:	90 93 33 01 	sts	0x0133, r25
     5ac:	a0 93 34 01 	sts	0x0134, r26
     5b0:	b0 93 35 01 	sts	0x0135, r27
	pid.state = PID_ON;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	80 93 28 01 	sts	0x0128, r24
}
     5ba:	cf 91       	pop	r28
     5bc:	df 91       	pop	r29
     5be:	08 95       	ret

000005c0 <pid_reset>:

void pid_reset()
{
     5c0:	df 93       	push	r29
     5c2:	cf 93       	push	r28
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
	pid.output = 0;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	a0 e0       	ldi	r26, 0x00	; 0
     5ce:	b0 e0       	ldi	r27, 0x00	; 0
     5d0:	80 93 2a 01 	sts	0x012A, r24
     5d4:	90 93 2b 01 	sts	0x012B, r25
     5d8:	a0 93 2c 01 	sts	0x012C, r26
     5dc:	b0 93 2d 01 	sts	0x012D, r27
	pid.integral = 0;
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	a0 e0       	ldi	r26, 0x00	; 0
     5e6:	b0 e0       	ldi	r27, 0x00	; 0
     5e8:	80 93 3e 01 	sts	0x013E, r24
     5ec:	90 93 3f 01 	sts	0x013F, r25
     5f0:	a0 93 40 01 	sts	0x0140, r26
     5f4:	b0 93 41 01 	sts	0x0141, r27
	pid.prev_error = 0;
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	a0 e0       	ldi	r26, 0x00	; 0
     5fe:	b0 e0       	ldi	r27, 0x00	; 0
     600:	80 93 3a 01 	sts	0x013A, r24
     604:	90 93 3b 01 	sts	0x013B, r25
     608:	a0 93 3c 01 	sts	0x013C, r26
     60c:	b0 93 3d 01 	sts	0x013D, r27
}
     610:	cf 91       	pop	r28
     612:	df 91       	pop	r29
     614:	08 95       	ret

00000616 <pid_calculate>:

double pid_calculate(double setpoint,double temperature)
{
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	df 93       	push	r29
     620:	cf 93       	push	r28
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	2c 97       	sbiw	r28, 0x0c	; 12
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
     632:	69 83       	std	Y+1, r22	; 0x01
     634:	7a 83       	std	Y+2, r23	; 0x02
     636:	8b 83       	std	Y+3, r24	; 0x03
     638:	9c 83       	std	Y+4, r25	; 0x04
     63a:	2d 83       	std	Y+5, r18	; 0x05
     63c:	3e 83       	std	Y+6, r19	; 0x06
     63e:	4f 83       	std	Y+7, r20	; 0x07
     640:	58 87       	std	Y+8, r21	; 0x08
	if (pid.state == PID_OFF) { return (0);}
     642:	80 91 28 01 	lds	r24, 0x0128
     646:	88 23       	and	r24, r24
     648:	49 f4       	brne	.+18     	; 0x65c <pid_calculate+0x46>
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	a0 e0       	ldi	r26, 0x00	; 0
     650:	b0 e0       	ldi	r27, 0x00	; 0
     652:	89 87       	std	Y+9, r24	; 0x09
     654:	9a 87       	std	Y+10, r25	; 0x0a
     656:	ab 87       	std	Y+11, r26	; 0x0b
     658:	bc 87       	std	Y+12, r27	; 0x0c
     65a:	99 c1       	rjmp	.+818    	; 0x98e <__stack+0x8f>

	pid.setpoint = setpoint;		// ++++ test
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	9a 81       	ldd	r25, Y+2	; 0x02
     660:	ab 81       	ldd	r26, Y+3	; 0x03
     662:	bc 81       	ldd	r27, Y+4	; 0x04
     664:	80 93 5a 01 	sts	0x015A, r24
     668:	90 93 5b 01 	sts	0x015B, r25
     66c:	a0 93 5c 01 	sts	0x015C, r26
     670:	b0 93 5d 01 	sts	0x015D, r27
	pid.temperature = temperature;	// ++++ test
     674:	8d 81       	ldd	r24, Y+5	; 0x05
     676:	9e 81       	ldd	r25, Y+6	; 0x06
     678:	af 81       	ldd	r26, Y+7	; 0x07
     67a:	b8 85       	ldd	r27, Y+8	; 0x08
     67c:	80 93 56 01 	sts	0x0156, r24
     680:	90 93 57 01 	sts	0x0157, r25
     684:	a0 93 58 01 	sts	0x0158, r26
     688:	b0 93 59 01 	sts	0x0159, r27

	pid.error = setpoint - temperature;		// current error term
     68c:	69 81       	ldd	r22, Y+1	; 0x01
     68e:	7a 81       	ldd	r23, Y+2	; 0x02
     690:	8b 81       	ldd	r24, Y+3	; 0x03
     692:	9c 81       	ldd	r25, Y+4	; 0x04
     694:	2d 81       	ldd	r18, Y+5	; 0x05
     696:	3e 81       	ldd	r19, Y+6	; 0x06
     698:	4f 81       	ldd	r20, Y+7	; 0x07
     69a:	58 85       	ldd	r21, Y+8	; 0x08
     69c:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__subsf3>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	80 93 36 01 	sts	0x0136, r24
     6a8:	90 93 37 01 	sts	0x0137, r25
     6ac:	a0 93 38 01 	sts	0x0138, r26
     6b0:	b0 93 39 01 	sts	0x0139, r27

//	if (fabs(pid.error) > PID_EPSILON) {	// stop integration if error term is too small
	if ((fabs(pid.error) > PID_EPSILON) ||	// stop integration if error term is too small
     6b4:	80 91 36 01 	lds	r24, 0x0136
     6b8:	90 91 37 01 	lds	r25, 0x0137
     6bc:	a0 91 38 01 	lds	r26, 0x0138
     6c0:	b0 91 39 01 	lds	r27, 0x0139
     6c4:	bf 77       	andi	r27, 0x7F	; 127
     6c6:	bc 01       	movw	r22, r24
     6c8:	cd 01       	movw	r24, r26
     6ca:	2a e0       	ldi	r18, 0x0A	; 10
     6cc:	37 ed       	ldi	r19, 0xD7	; 215
     6ce:	43 e2       	ldi	r20, 0x23	; 35
     6d0:	5c e3       	ldi	r21, 0x3C	; 60
     6d2:	0e 94 24 11 	call	0x2248	; 0x2248 <__gesf2>
     6d6:	18 16       	cp	r1, r24
     6d8:	14 f1       	brlt	.+68     	; 0x71e <pid_calculate+0x108>
     6da:	e0 90 2a 01 	lds	r14, 0x012A
     6de:	f0 90 2b 01 	lds	r15, 0x012B
     6e2:	00 91 2c 01 	lds	r16, 0x012C
     6e6:	10 91 2d 01 	lds	r17, 0x012D
     6ea:	80 91 2e 01 	lds	r24, 0x012E
     6ee:	90 91 2f 01 	lds	r25, 0x012F
     6f2:	a0 91 30 01 	lds	r26, 0x0130
     6f6:	b0 91 31 01 	lds	r27, 0x0131
     6fa:	bc 01       	movw	r22, r24
     6fc:	cd 01       	movw	r24, r26
     6fe:	2c ea       	ldi	r18, 0xAC	; 172
     700:	35 ec       	ldi	r19, 0xC5	; 197
     702:	47 e2       	ldi	r20, 0x27	; 39
     704:	57 e3       	ldi	r21, 0x37	; 55
     706:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__subsf3>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	9c 01       	movw	r18, r24
     710:	ad 01       	movw	r20, r26
     712:	c8 01       	movw	r24, r16
     714:	b7 01       	movw	r22, r14
     716:	0e 94 24 11 	call	0x2248	; 0x2248 <__gesf2>
     71a:	88 23       	and	r24, r24
     71c:	74 f1       	brlt	.+92     	; 0x77a <pid_calculate+0x164>
		(pid.output >= (pid.output_max - EPSILON))) {//...or output is too large (anti-windup)
		pid.integral += (pid.error * pid.dt);
     71e:	e0 90 3e 01 	lds	r14, 0x013E
     722:	f0 90 3f 01 	lds	r15, 0x013F
     726:	00 91 40 01 	lds	r16, 0x0140
     72a:	10 91 41 01 	lds	r17, 0x0141
     72e:	80 91 36 01 	lds	r24, 0x0136
     732:	90 91 37 01 	lds	r25, 0x0137
     736:	a0 91 38 01 	lds	r26, 0x0138
     73a:	b0 91 39 01 	lds	r27, 0x0139
     73e:	20 91 46 01 	lds	r18, 0x0146
     742:	30 91 47 01 	lds	r19, 0x0147
     746:	40 91 48 01 	lds	r20, 0x0148
     74a:	50 91 49 01 	lds	r21, 0x0149
     74e:	bc 01       	movw	r22, r24
     750:	cd 01       	movw	r24, r26
     752:	0e 94 28 11 	call	0x2250	; 0x2250 <__mulsf3>
     756:	dc 01       	movw	r26, r24
     758:	cb 01       	movw	r24, r22
     75a:	9c 01       	movw	r18, r24
     75c:	ad 01       	movw	r20, r26
     75e:	c8 01       	movw	r24, r16
     760:	b7 01       	movw	r22, r14
     762:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__addsf3>
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	80 93 3e 01 	sts	0x013E, r24
     76e:	90 93 3f 01 	sts	0x013F, r25
     772:	a0 93 40 01 	sts	0x0140, r26
     776:	b0 93 41 01 	sts	0x0141, r27
	}
	pid.derivative = (pid.error - pid.prev_error) / pid.dt;
     77a:	80 91 36 01 	lds	r24, 0x0136
     77e:	90 91 37 01 	lds	r25, 0x0137
     782:	a0 91 38 01 	lds	r26, 0x0138
     786:	b0 91 39 01 	lds	r27, 0x0139
     78a:	20 91 3a 01 	lds	r18, 0x013A
     78e:	30 91 3b 01 	lds	r19, 0x013B
     792:	40 91 3c 01 	lds	r20, 0x013C
     796:	50 91 3d 01 	lds	r21, 0x013D
     79a:	bc 01       	movw	r22, r24
     79c:	cd 01       	movw	r24, r26
     79e:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__subsf3>
     7a2:	dc 01       	movw	r26, r24
     7a4:	cb 01       	movw	r24, r22
     7a6:	20 91 46 01 	lds	r18, 0x0146
     7aa:	30 91 47 01 	lds	r19, 0x0147
     7ae:	40 91 48 01 	lds	r20, 0x0148
     7b2:	50 91 49 01 	lds	r21, 0x0149
     7b6:	bc 01       	movw	r22, r24
     7b8:	cd 01       	movw	r24, r26
     7ba:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__divsf3>
     7be:	dc 01       	movw	r26, r24
     7c0:	cb 01       	movw	r24, r22
     7c2:	80 93 42 01 	sts	0x0142, r24
     7c6:	90 93 43 01 	sts	0x0143, r25
     7ca:	a0 93 44 01 	sts	0x0144, r26
     7ce:	b0 93 45 01 	sts	0x0145, r27
	pid.output = pid.Kp * pid.error + pid.Ki * pid.integral + pid.Kd * pid.derivative;
     7d2:	80 91 4a 01 	lds	r24, 0x014A
     7d6:	90 91 4b 01 	lds	r25, 0x014B
     7da:	a0 91 4c 01 	lds	r26, 0x014C
     7de:	b0 91 4d 01 	lds	r27, 0x014D
     7e2:	20 91 36 01 	lds	r18, 0x0136
     7e6:	30 91 37 01 	lds	r19, 0x0137
     7ea:	40 91 38 01 	lds	r20, 0x0138
     7ee:	50 91 39 01 	lds	r21, 0x0139
     7f2:	bc 01       	movw	r22, r24
     7f4:	cd 01       	movw	r24, r26
     7f6:	0e 94 28 11 	call	0x2250	; 0x2250 <__mulsf3>
     7fa:	dc 01       	movw	r26, r24
     7fc:	cb 01       	movw	r24, r22
     7fe:	7c 01       	movw	r14, r24
     800:	8d 01       	movw	r16, r26
     802:	80 91 4e 01 	lds	r24, 0x014E
     806:	90 91 4f 01 	lds	r25, 0x014F
     80a:	a0 91 50 01 	lds	r26, 0x0150
     80e:	b0 91 51 01 	lds	r27, 0x0151
     812:	20 91 3e 01 	lds	r18, 0x013E
     816:	30 91 3f 01 	lds	r19, 0x013F
     81a:	40 91 40 01 	lds	r20, 0x0140
     81e:	50 91 41 01 	lds	r21, 0x0141
     822:	bc 01       	movw	r22, r24
     824:	cd 01       	movw	r24, r26
     826:	0e 94 28 11 	call	0x2250	; 0x2250 <__mulsf3>
     82a:	dc 01       	movw	r26, r24
     82c:	cb 01       	movw	r24, r22
     82e:	9c 01       	movw	r18, r24
     830:	ad 01       	movw	r20, r26
     832:	c8 01       	movw	r24, r16
     834:	b7 01       	movw	r22, r14
     836:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__addsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	7c 01       	movw	r14, r24
     840:	8d 01       	movw	r16, r26
     842:	80 91 52 01 	lds	r24, 0x0152
     846:	90 91 53 01 	lds	r25, 0x0153
     84a:	a0 91 54 01 	lds	r26, 0x0154
     84e:	b0 91 55 01 	lds	r27, 0x0155
     852:	20 91 42 01 	lds	r18, 0x0142
     856:	30 91 43 01 	lds	r19, 0x0143
     85a:	40 91 44 01 	lds	r20, 0x0144
     85e:	50 91 45 01 	lds	r21, 0x0145
     862:	bc 01       	movw	r22, r24
     864:	cd 01       	movw	r24, r26
     866:	0e 94 28 11 	call	0x2250	; 0x2250 <__mulsf3>
     86a:	dc 01       	movw	r26, r24
     86c:	cb 01       	movw	r24, r22
     86e:	9c 01       	movw	r18, r24
     870:	ad 01       	movw	r20, r26
     872:	c8 01       	movw	r24, r16
     874:	b7 01       	movw	r22, r14
     876:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__addsf3>
     87a:	dc 01       	movw	r26, r24
     87c:	cb 01       	movw	r24, r22
     87e:	80 93 2a 01 	sts	0x012A, r24
     882:	90 93 2b 01 	sts	0x012B, r25
     886:	a0 93 2c 01 	sts	0x012C, r26
     88a:	b0 93 2d 01 	sts	0x012D, r27

	if(pid.output > pid.output_max) { 		// saturation filter
     88e:	80 91 2a 01 	lds	r24, 0x012A
     892:	90 91 2b 01 	lds	r25, 0x012B
     896:	a0 91 2c 01 	lds	r26, 0x012C
     89a:	b0 91 2d 01 	lds	r27, 0x012D
     89e:	20 91 2e 01 	lds	r18, 0x012E
     8a2:	30 91 2f 01 	lds	r19, 0x012F
     8a6:	40 91 30 01 	lds	r20, 0x0130
     8aa:	50 91 31 01 	lds	r21, 0x0131
     8ae:	bc 01       	movw	r22, r24
     8b0:	cd 01       	movw	r24, r26
     8b2:	0e 94 24 11 	call	0x2248	; 0x2248 <__gesf2>
     8b6:	18 16       	cp	r1, r24
     8b8:	8c f4       	brge	.+34     	; 0x8dc <pid_calculate+0x2c6>
		pid.output = pid.output_max;
     8ba:	80 91 2e 01 	lds	r24, 0x012E
     8be:	90 91 2f 01 	lds	r25, 0x012F
     8c2:	a0 91 30 01 	lds	r26, 0x0130
     8c6:	b0 91 31 01 	lds	r27, 0x0131
     8ca:	80 93 2a 01 	sts	0x012A, r24
     8ce:	90 93 2b 01 	sts	0x012B, r25
     8d2:	a0 93 2c 01 	sts	0x012C, r26
     8d6:	b0 93 2d 01 	sts	0x012D, r27
     8da:	26 c0       	rjmp	.+76     	; 0x928 <__stack+0x29>
	} else if(pid.output < pid.output_min) {
     8dc:	80 91 2a 01 	lds	r24, 0x012A
     8e0:	90 91 2b 01 	lds	r25, 0x012B
     8e4:	a0 91 2c 01 	lds	r26, 0x012C
     8e8:	b0 91 2d 01 	lds	r27, 0x012D
     8ec:	20 91 32 01 	lds	r18, 0x0132
     8f0:	30 91 33 01 	lds	r19, 0x0133
     8f4:	40 91 34 01 	lds	r20, 0x0134
     8f8:	50 91 35 01 	lds	r21, 0x0135
     8fc:	bc 01       	movw	r22, r24
     8fe:	cd 01       	movw	r24, r26
     900:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__cmpsf2>
     904:	88 23       	and	r24, r24
     906:	84 f4       	brge	.+32     	; 0x928 <__stack+0x29>
		pid.output = pid.output_min;
     908:	80 91 32 01 	lds	r24, 0x0132
     90c:	90 91 33 01 	lds	r25, 0x0133
     910:	a0 91 34 01 	lds	r26, 0x0134
     914:	b0 91 35 01 	lds	r27, 0x0135
     918:	80 93 2a 01 	sts	0x012A, r24
     91c:	90 93 2b 01 	sts	0x012B, r25
     920:	a0 93 2c 01 	sts	0x012C, r26
     924:	b0 93 2d 01 	sts	0x012D, r27
	}
	pid.prev_error = pid.error;
     928:	80 91 36 01 	lds	r24, 0x0136
     92c:	90 91 37 01 	lds	r25, 0x0137
     930:	a0 91 38 01 	lds	r26, 0x0138
     934:	b0 91 39 01 	lds	r27, 0x0139
     938:	80 93 3a 01 	sts	0x013A, r24
     93c:	90 93 3b 01 	sts	0x013B, r25
     940:	a0 93 3c 01 	sts	0x013C, r26
     944:	b0 93 3d 01 	sts	0x013D, r27
	if (pid.output > 50) { led_on();} else { led_off();}
     948:	80 91 2a 01 	lds	r24, 0x012A
     94c:	90 91 2b 01 	lds	r25, 0x012B
     950:	a0 91 2c 01 	lds	r26, 0x012C
     954:	b0 91 2d 01 	lds	r27, 0x012D
     958:	bc 01       	movw	r22, r24
     95a:	cd 01       	movw	r24, r26
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	48 e4       	ldi	r20, 0x48	; 72
     962:	52 e4       	ldi	r21, 0x42	; 66
     964:	0e 94 24 11 	call	0x2248	; 0x2248 <__gesf2>
     968:	18 16       	cp	r1, r24
     96a:	1c f4       	brge	.+6      	; 0x972 <__stack+0x73>
     96c:	0e 94 2f 09 	call	0x125e	; 0x125e <led_on>
     970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x77>
     972:	0e 94 3d 09 	call	0x127a	; 0x127a <led_off>

	return pid.output;
     976:	80 91 2a 01 	lds	r24, 0x012A
     97a:	90 91 2b 01 	lds	r25, 0x012B
     97e:	a0 91 2c 01 	lds	r26, 0x012C
     982:	b0 91 2d 01 	lds	r27, 0x012D
     986:	89 87       	std	Y+9, r24	; 0x09
     988:	9a 87       	std	Y+10, r25	; 0x0a
     98a:	ab 87       	std	Y+11, r26	; 0x0b
     98c:	bc 87       	std	Y+12, r27	; 0x0c
     98e:	89 85       	ldd	r24, Y+9	; 0x09
     990:	9a 85       	ldd	r25, Y+10	; 0x0a
     992:	ab 85       	ldd	r26, Y+11	; 0x0b
     994:	bc 85       	ldd	r27, Y+12	; 0x0c
}
     996:	bc 01       	movw	r22, r24
     998:	cd 01       	movw	r24, r26
     99a:	2c 96       	adiw	r28, 0x0c	; 12
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	cf 91       	pop	r28
     9a8:	df 91       	pop	r29
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	08 95       	ret

000009b4 <sensor_init>:
 * sensor_get_code()		- return latest sensor code
 * sensor_callback() 		- perform sensor sampling / reading
 */

void sensor_init()
{
     9b4:	df 93       	push	r29
     9b6:	cf 93       	push	r28
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
	memset(&sensor, 0, sizeof(Sensor));
     9bc:	80 e7       	ldi	r24, 0x70	; 112
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	43 e4       	ldi	r20, 0x43	; 67
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	0e 94 07 12 	call	0x240e	; 0x240e <memset>
	sensor.temperature = ABSOLUTE_ZERO;
     9cc:	83 e3       	ldi	r24, 0x33	; 51
     9ce:	93 e9       	ldi	r25, 0x93	; 147
     9d0:	a8 e8       	ldi	r26, 0x88	; 136
     9d2:	b3 ec       	ldi	r27, 0xC3	; 195
     9d4:	80 93 73 01 	sts	0x0173, r24
     9d8:	90 93 74 01 	sts	0x0174, r25
     9dc:	a0 93 75 01 	sts	0x0175, r26
     9e0:	b0 93 76 01 	sts	0x0176, r27
	sensor.sample_variance_max = SENSOR_SAMPLE_VARIANCE_MAX;
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	a0 ea       	ldi	r26, 0xA0	; 160
     9ea:	bf e3       	ldi	r27, 0x3F	; 63
     9ec:	80 93 7b 01 	sts	0x017B, r24
     9f0:	90 93 7c 01 	sts	0x017C, r25
     9f4:	a0 93 7d 01 	sts	0x017D, r26
     9f8:	b0 93 7e 01 	sts	0x017E, r27
	sensor.reading_variance_max = SENSOR_READING_VARIANCE_MAX;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	a0 ea       	ldi	r26, 0xA0	; 160
     a02:	b1 e4       	ldi	r27, 0x41	; 65
     a04:	80 93 7f 01 	sts	0x017F, r24
     a08:	90 93 80 01 	sts	0x0180, r25
     a0c:	a0 93 81 01 	sts	0x0181, r26
     a10:	b0 93 82 01 	sts	0x0182, r27
	sensor.disconnect_temperature = SENSOR_DISCONNECTED_TEMPERATURE;
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a8 ec       	ldi	r26, 0xC8	; 200
     a1a:	b3 e4       	ldi	r27, 0x43	; 67
     a1c:	80 93 83 01 	sts	0x0183, r24
     a20:	90 93 84 01 	sts	0x0184, r25
     a24:	a0 93 85 01 	sts	0x0185, r26
     a28:	b0 93 86 01 	sts	0x0186, r27
	sensor.no_power_temperature = SENSOR_NO_POWER_TEMPERATURE;
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	a0 e0       	ldi	r26, 0x00	; 0
     a32:	b0 ec       	ldi	r27, 0xC0	; 192
     a34:	80 93 87 01 	sts	0x0187, r24
     a38:	90 93 88 01 	sts	0x0188, r25
     a3c:	a0 93 89 01 	sts	0x0189, r26
     a40:	b0 93 8a 01 	sts	0x018A, r27
}
     a44:	cf 91       	pop	r28
     a46:	df 91       	pop	r29
     a48:	08 95       	ret

00000a4a <sensor_on>:

void sensor_on()
{
     a4a:	df 93       	push	r29
     a4c:	cf 93       	push	r28
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_NO_DATA;
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	80 93 70 01 	sts	0x0170, r24
}
     a58:	cf 91       	pop	r28
     a5a:	df 91       	pop	r29
     a5c:	08 95       	ret

00000a5e <sensor_off>:

void sensor_off()
{
     a5e:	df 93       	push	r29
     a60:	cf 93       	push	r28
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_OFF;
     a66:	10 92 70 01 	sts	0x0170, r1
}
     a6a:	cf 91       	pop	r28
     a6c:	df 91       	pop	r29
     a6e:	08 95       	ret

00000a70 <sensor_start_reading>:

void sensor_start_reading() 
{ 
     a70:	df 93       	push	r29
     a72:	cf 93       	push	r28
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
	sensor.sample_idx = 0;
     a78:	10 92 72 01 	sts	0x0172, r1
//	adc_read(ADC_CHANNEL);
	sensor.code = SENSOR_TAKING_READING;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	80 93 71 01 	sts	0x0171, r24
}
     a82:	cf 91       	pop	r28
     a84:	df 91       	pop	r29
     a86:	08 95       	ret

00000a88 <sensor_get_state>:

uint8_t sensor_get_state() { return (sensor.state);}
     a88:	df 93       	push	r29
     a8a:	cf 93       	push	r28
     a8c:	cd b7       	in	r28, 0x3d	; 61
     a8e:	de b7       	in	r29, 0x3e	; 62
     a90:	80 91 70 01 	lds	r24, 0x0170
     a94:	cf 91       	pop	r28
     a96:	df 91       	pop	r29
     a98:	08 95       	ret

00000a9a <sensor_get_code>:
uint8_t sensor_get_code() { return (sensor.code);}
     a9a:	df 93       	push	r29
     a9c:	cf 93       	push	r28
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	80 91 71 01 	lds	r24, 0x0171
     aa6:	cf 91       	pop	r28
     aa8:	df 91       	pop	r29
     aaa:	08 95       	ret

00000aac <sensor_get_temperature>:

double sensor_get_temperature() 
{ 
     aac:	df 93       	push	r29
     aae:	cf 93       	push	r28
     ab0:	00 d0       	rcall	.+0      	; 0xab2 <sensor_get_temperature+0x6>
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <sensor_get_temperature+0x8>
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
	if (sensor.state == SENSOR_HAS_DATA) { 
     ab8:	80 91 70 01 	lds	r24, 0x0170
     abc:	83 30       	cpi	r24, 0x03	; 3
     abe:	69 f4       	brne	.+26     	; 0xada <sensor_get_temperature+0x2e>
		return (sensor.temperature);
     ac0:	80 91 73 01 	lds	r24, 0x0173
     ac4:	90 91 74 01 	lds	r25, 0x0174
     ac8:	a0 91 75 01 	lds	r26, 0x0175
     acc:	b0 91 76 01 	lds	r27, 0x0176
     ad0:	89 83       	std	Y+1, r24	; 0x01
     ad2:	9a 83       	std	Y+2, r25	; 0x02
     ad4:	ab 83       	std	Y+3, r26	; 0x03
     ad6:	bc 83       	std	Y+4, r27	; 0x04
     ad8:	08 c0       	rjmp	.+16     	; 0xaea <sensor_get_temperature+0x3e>
	} else {
		return (LESS_THAN_ZERO);	// an impossible temperature value
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a9 e8       	ldi	r26, 0x89	; 137
     ae0:	b3 ec       	ldi	r27, 0xC3	; 195
     ae2:	89 83       	std	Y+1, r24	; 0x01
     ae4:	9a 83       	std	Y+2, r25	; 0x02
     ae6:	ab 83       	std	Y+3, r26	; 0x03
     ae8:	bc 83       	std	Y+4, r27	; 0x04
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
     aee:	ab 81       	ldd	r26, Y+3	; 0x03
     af0:	bc 81       	ldd	r27, Y+4	; 0x04
	}
}
     af2:	bc 01       	movw	r22, r24
     af4:	cd 01       	movw	r24, r26
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	cf 91       	pop	r28
     b00:	df 91       	pop	r29
     b02:	08 95       	ret

00000b04 <sensor_callback>:
 *	loop. Each sampling interval must be requested explicitly by calling 
 *	sensor_start_sample(). It does not free-run.
 */

void sensor_callback()
{
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	df 93       	push	r29
     b0e:	cf 93       	push	r28
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	29 97       	sbiw	r28, 0x09	; 9
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
	// cases where you don't execute the callback:
	if ((sensor.state == SENSOR_OFF) || (sensor.code != SENSOR_TAKING_READING)) {
     b20:	80 91 70 01 	lds	r24, 0x0170
     b24:	88 23       	and	r24, r24
     b26:	09 f4       	brne	.+2      	; 0xb2a <sensor_callback+0x26>
     b28:	2f c1       	rjmp	.+606    	; 0xd88 <sensor_callback+0x284>
     b2a:	80 91 71 01 	lds	r24, 0x0171
     b2e:	81 30       	cpi	r24, 0x01	; 1
     b30:	09 f0       	breq	.+2      	; 0xb34 <sensor_callback+0x30>
     b32:	2a c1       	rjmp	.+596    	; 0xd88 <sensor_callback+0x284>
		return;
	}

	// get a sample and return if still in the reading period
	sensor.sample[sensor.sample_idx] = _sensor_sample(ADC_CHANNEL);
     b34:	80 91 72 01 	lds	r24, 0x0172
     b38:	08 2f       	mov	r16, r24
     b3a:	10 e0       	ldi	r17, 0x00	; 0
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 d1 06 	call	0xda2	; 0xda2 <_sensor_sample>
     b42:	9b 01       	movw	r18, r22
     b44:	ac 01       	movw	r20, r24
     b46:	c8 01       	movw	r24, r16
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	fc 01       	movw	r30, r24
     b52:	e5 57       	subi	r30, 0x75	; 117
     b54:	fe 4f       	sbci	r31, 0xFE	; 254
     b56:	20 83       	st	Z, r18
     b58:	31 83       	std	Z+1, r19	; 0x01
     b5a:	42 83       	std	Z+2, r20	; 0x02
     b5c:	53 83       	std	Z+3, r21	; 0x03

//	printFloat(sensor.sample[sensor.sample_idx]); //++++++++++++++++++++++++
//	printPgmString(PSTR("\n")); 

	if ((++sensor.sample_idx) < SENSOR_SAMPLES) { 
     b5e:	80 91 72 01 	lds	r24, 0x0172
     b62:	8f 5f       	subi	r24, 0xFF	; 255
     b64:	80 93 72 01 	sts	0x0172, r24
     b68:	80 91 72 01 	lds	r24, 0x0172
     b6c:	89 30       	cpi	r24, 0x09	; 9
     b6e:	08 f4       	brcc	.+2      	; 0xb72 <sensor_callback+0x6e>
     b70:	0b c1       	rjmp	.+534    	; 0xd88 <sensor_callback+0x284>
		return;
	}

	// process the array to clean up samples
	double mean;
	sensor.std_dev = std_dev(sensor.sample, SENSOR_SAMPLES, &mean);
     b72:	8b e8       	ldi	r24, 0x8B	; 139
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	9e 01       	movw	r18, r28
     b78:	2a 5f       	subi	r18, 0xFA	; 250
     b7a:	3f 4f       	sbci	r19, 0xFF	; 255
     b7c:	69 e0       	ldi	r22, 0x09	; 9
     b7e:	a9 01       	movw	r20, r18
     b80:	0e 94 a5 0a 	call	0x154a	; 0x154a <std_dev>
     b84:	dc 01       	movw	r26, r24
     b86:	cb 01       	movw	r24, r22
     b88:	80 93 77 01 	sts	0x0177, r24
     b8c:	90 93 78 01 	sts	0x0178, r25
     b90:	a0 93 79 01 	sts	0x0179, r26
     b94:	b0 93 7a 01 	sts	0x017A, r27
	if (sensor.std_dev > sensor.reading_variance_max) {
     b98:	80 91 77 01 	lds	r24, 0x0177
     b9c:	90 91 78 01 	lds	r25, 0x0178
     ba0:	a0 91 79 01 	lds	r26, 0x0179
     ba4:	b0 91 7a 01 	lds	r27, 0x017A
     ba8:	20 91 7f 01 	lds	r18, 0x017F
     bac:	30 91 80 01 	lds	r19, 0x0180
     bb0:	40 91 81 01 	lds	r20, 0x0181
     bb4:	50 91 82 01 	lds	r21, 0x0182
     bb8:	bc 01       	movw	r22, r24
     bba:	cd 01       	movw	r24, r26
     bbc:	0e 94 24 11 	call	0x2248	; 0x2248 <__gesf2>
     bc0:	18 16       	cp	r1, r24
     bc2:	3c f4       	brge	.+14     	; 0xbd2 <sensor_callback+0xce>
		sensor.state = SENSOR_ERROR;
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	80 93 70 01 	sts	0x0170, r24
		sensor.code = SENSOR_ERROR_BAD_READINGS;
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	80 93 71 01 	sts	0x0171, r24
     bd0:	db c0       	rjmp	.+438    	; 0xd88 <sensor_callback+0x284>
		return;
	}

	// reject the outlier samples and re-compute the average
	double count = 0;
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	a0 e0       	ldi	r26, 0x00	; 0
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	8a 83       	std	Y+2, r24	; 0x02
     bdc:	9b 83       	std	Y+3, r25	; 0x03
     bde:	ac 83       	std	Y+4, r26	; 0x04
     be0:	bd 83       	std	Y+5, r27	; 0x05
	sensor.temperature = 0;
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	a0 e0       	ldi	r26, 0x00	; 0
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	80 93 73 01 	sts	0x0173, r24
     bee:	90 93 74 01 	sts	0x0174, r25
     bf2:	a0 93 75 01 	sts	0x0175, r26
     bf6:	b0 93 76 01 	sts	0x0176, r27
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     bfa:	19 82       	std	Y+1, r1	; 0x01
     bfc:	71 c0       	rjmp	.+226    	; 0xce0 <sensor_callback+0x1dc>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	fc 01       	movw	r30, r24
     c0e:	e5 57       	subi	r30, 0x75	; 117
     c10:	fe 4f       	sbci	r31, 0xFE	; 254
     c12:	80 81       	ld	r24, Z
     c14:	91 81       	ldd	r25, Z+1	; 0x01
     c16:	a2 81       	ldd	r26, Z+2	; 0x02
     c18:	b3 81       	ldd	r27, Z+3	; 0x03
     c1a:	2e 81       	ldd	r18, Y+6	; 0x06
     c1c:	3f 81       	ldd	r19, Y+7	; 0x07
     c1e:	48 85       	ldd	r20, Y+8	; 0x08
     c20:	59 85       	ldd	r21, Y+9	; 0x09
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__subsf3>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	7c 01       	movw	r14, r24
     c30:	8d 01       	movw	r16, r26
     c32:	e8 94       	clt
     c34:	17 f9       	bld	r17, 7
     c36:	80 91 7b 01 	lds	r24, 0x017B
     c3a:	90 91 7c 01 	lds	r25, 0x017C
     c3e:	a0 91 7d 01 	lds	r26, 0x017D
     c42:	b0 91 7e 01 	lds	r27, 0x017E
     c46:	20 91 77 01 	lds	r18, 0x0177
     c4a:	30 91 78 01 	lds	r19, 0x0178
     c4e:	40 91 79 01 	lds	r20, 0x0179
     c52:	50 91 7a 01 	lds	r21, 0x017A
     c56:	bc 01       	movw	r22, r24
     c58:	cd 01       	movw	r24, r26
     c5a:	0e 94 28 11 	call	0x2250	; 0x2250 <__mulsf3>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	9c 01       	movw	r18, r24
     c64:	ad 01       	movw	r20, r26
     c66:	c8 01       	movw	r24, r16
     c68:	b7 01       	movw	r22, r14
     c6a:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__cmpsf2>
     c6e:	88 23       	and	r24, r24
     c70:	a4 f5       	brge	.+104    	; 0xcda <sensor_callback+0x1d6>
			sensor.temperature += sensor.sample[i];
     c72:	e0 90 73 01 	lds	r14, 0x0173
     c76:	f0 90 74 01 	lds	r15, 0x0174
     c7a:	00 91 75 01 	lds	r16, 0x0175
     c7e:	10 91 76 01 	lds	r17, 0x0176
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	88 2f       	mov	r24, r24
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	fc 01       	movw	r30, r24
     c92:	e5 57       	subi	r30, 0x75	; 117
     c94:	fe 4f       	sbci	r31, 0xFE	; 254
     c96:	20 81       	ld	r18, Z
     c98:	31 81       	ldd	r19, Z+1	; 0x01
     c9a:	42 81       	ldd	r20, Z+2	; 0x02
     c9c:	53 81       	ldd	r21, Z+3	; 0x03
     c9e:	c8 01       	movw	r24, r16
     ca0:	b7 01       	movw	r22, r14
     ca2:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__addsf3>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	80 93 73 01 	sts	0x0173, r24
     cae:	90 93 74 01 	sts	0x0174, r25
     cb2:	a0 93 75 01 	sts	0x0175, r26
     cb6:	b0 93 76 01 	sts	0x0176, r27
			count++;
     cba:	6a 81       	ldd	r22, Y+2	; 0x02
     cbc:	7b 81       	ldd	r23, Y+3	; 0x03
     cbe:	8c 81       	ldd	r24, Y+4	; 0x04
     cc0:	9d 81       	ldd	r25, Y+5	; 0x05
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	40 e8       	ldi	r20, 0x80	; 128
     cc8:	5f e3       	ldi	r21, 0x3F	; 63
     cca:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__addsf3>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	8a 83       	std	Y+2, r24	; 0x02
     cd4:	9b 83       	std	Y+3, r25	; 0x03
     cd6:	ac 83       	std	Y+4, r26	; 0x04
     cd8:	bd 83       	std	Y+5, r27	; 0x05
	}

	// reject the outlier samples and re-compute the average
	double count = 0;
	sensor.temperature = 0;
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	8f 5f       	subi	r24, 0xFF	; 255
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	89 30       	cpi	r24, 0x09	; 9
     ce4:	08 f4       	brcc	.+2      	; 0xce8 <sensor_callback+0x1e4>
     ce6:	8b cf       	rjmp	.-234    	; 0xbfe <sensor_callback+0xfa>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
			sensor.temperature += sensor.sample[i];
			count++;
		}
	}
	sensor.temperature /= count; 		// calculate mean temp w/o the outliers
     ce8:	80 91 73 01 	lds	r24, 0x0173
     cec:	90 91 74 01 	lds	r25, 0x0174
     cf0:	a0 91 75 01 	lds	r26, 0x0175
     cf4:	b0 91 76 01 	lds	r27, 0x0176
     cf8:	bc 01       	movw	r22, r24
     cfa:	cd 01       	movw	r24, r26
     cfc:	2a 81       	ldd	r18, Y+2	; 0x02
     cfe:	3b 81       	ldd	r19, Y+3	; 0x03
     d00:	4c 81       	ldd	r20, Y+4	; 0x04
     d02:	5d 81       	ldd	r21, Y+5	; 0x05
     d04:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__divsf3>
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	80 93 73 01 	sts	0x0173, r24
     d10:	90 93 74 01 	sts	0x0174, r25
     d14:	a0 93 75 01 	sts	0x0175, r26
     d18:	b0 93 76 01 	sts	0x0176, r27
	sensor.state = SENSOR_HAS_DATA;
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	80 93 70 01 	sts	0x0170, r24
	sensor.code = SENSOR_IDLE;			// we are done. Flip it back to idle
     d22:	10 92 71 01 	sts	0x0171, r1

	// process the exception cases
	if (sensor.temperature > SENSOR_DISCONNECTED_TEMPERATURE) {
     d26:	80 91 73 01 	lds	r24, 0x0173
     d2a:	90 91 74 01 	lds	r25, 0x0174
     d2e:	a0 91 75 01 	lds	r26, 0x0175
     d32:	b0 91 76 01 	lds	r27, 0x0176
     d36:	bc 01       	movw	r22, r24
     d38:	cd 01       	movw	r24, r26
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	48 ec       	ldi	r20, 0xC8	; 200
     d40:	53 e4       	ldi	r21, 0x43	; 67
     d42:	0e 94 24 11 	call	0x2248	; 0x2248 <__gesf2>
     d46:	18 16       	cp	r1, r24
     d48:	3c f4       	brge	.+14     	; 0xd58 <sensor_callback+0x254>
		sensor.state = SENSOR_ERROR;
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	80 93 70 01 	sts	0x0170, r24
		sensor.code = SENSOR_ERROR_DISCONNECTED;
     d50:	83 e0       	ldi	r24, 0x03	; 3
     d52:	80 93 71 01 	sts	0x0171, r24
     d56:	18 c0       	rjmp	.+48     	; 0xd88 <sensor_callback+0x284>
	} else if (sensor.temperature < SENSOR_NO_POWER_TEMPERATURE) {
     d58:	80 91 73 01 	lds	r24, 0x0173
     d5c:	90 91 74 01 	lds	r25, 0x0174
     d60:	a0 91 75 01 	lds	r26, 0x0175
     d64:	b0 91 76 01 	lds	r27, 0x0176
     d68:	bc 01       	movw	r22, r24
     d6a:	cd 01       	movw	r24, r26
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	50 ec       	ldi	r21, 0xC0	; 192
     d74:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__cmpsf2>
     d78:	88 23       	and	r24, r24
     d7a:	34 f4       	brge	.+12     	; 0xd88 <sensor_callback+0x284>
		sensor.state = SENSOR_ERROR;
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	80 93 70 01 	sts	0x0170, r24
		sensor.code = SENSOR_ERROR_NO_POWER;
     d82:	84 e0       	ldi	r24, 0x04	; 4
     d84:	80 93 71 01 	sts	0x0171, r24
	}
}
     d88:	29 96       	adiw	r28, 0x09	; 9
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	ff 90       	pop	r15
     d9e:	ef 90       	pop	r14
     da0:	08 95       	ret

00000da2 <_sensor_sample>:
 *
 *		temp = (adc_value * 1.456355556) - -120.7135972
 */

static inline double _sensor_sample(uint8_t adc_channel)
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	0f 92       	push	r0
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	89 83       	std	Y+1, r24	; 0x01
	double random_gain = 5;
	double random_variation = ((double)(rand() - RAND_MAX/2) / RAND_MAX/2) * random_gain;
	double reading = 60 + random_variation;
	return (((double)reading * SENSOR_SLOPE) + SENSOR_OFFSET);	// useful for testing the math
#else
	return (((double)adc_read(adc_channel) * SENSOR_SLOPE) + SENSOR_OFFSET);
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	0e 94 0c 07 	call	0xe18	; 0xe18 <adc_read>
     db4:	cc 01       	movw	r24, r24
     db6:	a0 e0       	ldi	r26, 0x00	; 0
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	bc 01       	movw	r22, r24
     dbc:	cd 01       	movw	r24, r26
     dbe:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__floatunsisf>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	bc 01       	movw	r22, r24
     dc8:	cd 01       	movw	r24, r26
     dca:	26 e0       	ldi	r18, 0x06	; 6
     dcc:	3f ea       	ldi	r19, 0xAF	; 175
     dce:	4a ef       	ldi	r20, 0xFA	; 250
     dd0:	5e e3       	ldi	r21, 0x3E	; 62
     dd2:	0e 94 28 11 	call	0x2250	; 0x2250 <__mulsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	bc 01       	movw	r22, r24
     ddc:	cd 01       	movw	r24, r26
     dde:	23 ed       	ldi	r18, 0xD3	; 211
     de0:	31 eb       	ldi	r19, 0xB1	; 177
     de2:	46 ed       	ldi	r20, 0xD6	; 214
     de4:	5e e3       	ldi	r21, 0x3E	; 62
     de6:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__subsf3>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
#endif
}
     dee:	bc 01       	movw	r22, r24
     df0:	cd 01       	movw	r24, r26
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <adc_init>:
/*
 * adc_init() - initialize ADC. See tinyg_tc.h for settings used
 * adc_read() - returns a single ADC reading (raw). See __sensor_sample notes for more
 */
void adc_init(void)
{
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
	ADMUX  = (ADC_REFS | ADC_CHANNEL);	 // setup ADC Vref and channel 0
     e02:	ec e7       	ldi	r30, 0x7C	; 124
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 e4       	ldi	r24, 0x40	; 64
     e08:	80 83       	st	Z, r24
	ADCSRA = (ADC_ENABLE | ADC_PRESCALE);// Enable ADC (bit 7) & set prescaler
     e0a:	ea e7       	ldi	r30, 0x7A	; 122
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	86 e8       	ldi	r24, 0x86	; 134
     e10:	80 83       	st	Z, r24

//	ADMUX &= 0xF0;						// clobber the channel
//	ADMUX |= 0x0F & ADC_CHANNEL;		// set the channel
}
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <adc_read>:

uint16_t adc_read(uint8_t channel)
{
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <adc_read+0x6>
     e1e:	0f 92       	push	r0
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xF0;						// clobber the channel
     e26:	ac e7       	ldi	r26, 0x7C	; 124
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	ec e7       	ldi	r30, 0x7C	; 124
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	80 7f       	andi	r24, 0xF0	; 240
     e32:	8c 93       	st	X, r24
	ADMUX |= 0x0F & channel;			// set the channel
     e34:	ac e7       	ldi	r26, 0x7C	; 124
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	ec e7       	ldi	r30, 0x7C	; 124
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	98 2f       	mov	r25, r24
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	8f 70       	andi	r24, 0x0F	; 15
     e44:	89 2b       	or	r24, r25
     e46:	8c 93       	st	X, r24

	while (ADCSRA && (1<<ADIF) == 0);	// wait if conversion is in progress
     e48:	ea e7       	ldi	r30, 0x7A	; 122
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
	ADCSRA |= ADC_START_CONVERSION;		// start the conversion
     e4e:	aa e7       	ldi	r26, 0x7A	; 122
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	ea e7       	ldi	r30, 0x7A	; 122
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	80 64       	ori	r24, 0x40	; 64
     e5a:	8c 93       	st	X, r24
	while (ADCSRA && (1<<ADIF) == 0);	// wait about 100 uSec
     e5c:	ea e7       	ldi	r30, 0x7A	; 122
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
	ADCSRA |= (1<<ADIF);				// clear the conversion flag
     e62:	aa e7       	ldi	r26, 0x7A	; 122
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	ea e7       	ldi	r30, 0x7A	; 122
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	80 61       	ori	r24, 0x10	; 16
     e6e:	8c 93       	st	X, r24
	return (ADC);
     e70:	e8 e7       	ldi	r30, 0x78	; 120
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	91 81       	ldd	r25, Z+1	; 0x01
}
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <pwm_init>:
 * 	Configure timer 2 for extruder heater PWM
 *	Mode: 8 bit Fast PWM Fast w/OCR2A setting PWM freq (TOP value)
 *		  and OCR2B setting the duty cycle as a fraction of OCR2A seeting
 */
void pwm_init(void)
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
	TCCR2A  = PWM_INVERTED;		// alternative is PWM_NONINVERTED
     e8c:	e0 eb       	ldi	r30, 0xB0	; 176
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 ef       	ldi	r24, 0xF0	; 240
     e92:	80 83       	st	Z, r24
	TCCR2A |= 0b00000011;		// Waveform generation set to MODE 7 - here...
     e94:	a0 eb       	ldi	r26, 0xB0	; 176
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e0 eb       	ldi	r30, 0xB0	; 176
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	83 60       	ori	r24, 0x03	; 3
     ea0:	8c 93       	st	X, r24
	TCCR2B  = 0b00001000;		// ...continued here
     ea2:	e1 eb       	ldi	r30, 0xB1	; 177
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	88 e0       	ldi	r24, 0x08	; 8
     ea8:	80 83       	st	Z, r24
	TCCR2B |= PWM_PRESCALE_SET;	// set clock and prescaler
     eaa:	a1 eb       	ldi	r26, 0xB1	; 177
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e1 eb       	ldi	r30, 0xB1	; 177
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	84 60       	ori	r24, 0x04	; 4
     eb6:	8c 93       	st	X, r24
	TIMSK1 = 0; 				// disable PWM interrupts
     eb8:	ef e6       	ldi	r30, 0x6F	; 111
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	10 82       	st	Z, r1
	OCR2A = 0;					// clear PWM frequency (TOP value)
     ebe:	e3 eb       	ldi	r30, 0xB3	; 179
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	10 82       	st	Z, r1
	OCR2B = 0;					// clear PWM duty cycle as % of TOP value
     ec4:	e4 eb       	ldi	r30, 0xB4	; 180
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	10 82       	st	Z, r1
	device.pwm_freq = 0;
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	a0 e0       	ldi	r26, 0x00	; 0
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	80 93 b6 01 	sts	0x01B6, r24
     ed6:	90 93 b7 01 	sts	0x01B7, r25
     eda:	a0 93 b8 01 	sts	0x01B8, r26
     ede:	b0 93 b9 01 	sts	0x01B9, r27
}
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <pwm_on>:

void pwm_on(double freq, double duty)
{
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	28 97       	sbiw	r28, 0x08	; 8
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	69 83       	std	Y+1, r22	; 0x01
     efe:	7a 83       	std	Y+2, r23	; 0x02
     f00:	8b 83       	std	Y+3, r24	; 0x03
     f02:	9c 83       	std	Y+4, r25	; 0x04
     f04:	2d 83       	std	Y+5, r18	; 0x05
     f06:	3e 83       	std	Y+6, r19	; 0x06
     f08:	4f 83       	std	Y+7, r20	; 0x07
     f0a:	58 87       	std	Y+8, r21	; 0x08
	pwm_init();
     f0c:	0e 94 42 07 	call	0xe84	; 0xe84 <pwm_init>
	pwm_set_freq(freq);
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	ab 81       	ldd	r26, Y+3	; 0x03
     f16:	bc 81       	ldd	r27, Y+4	; 0x04
     f18:	bc 01       	movw	r22, r24
     f1a:	cd 01       	movw	r24, r26
     f1c:	0e 94 b2 07 	call	0xf64	; 0xf64 <pwm_set_freq>
	pwm_set_duty(duty);
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
     f22:	9e 81       	ldd	r25, Y+6	; 0x06
     f24:	af 81       	ldd	r26, Y+7	; 0x07
     f26:	b8 85       	ldd	r27, Y+8	; 0x08
     f28:	bc 01       	movw	r22, r24
     f2a:	cd 01       	movw	r24, r26
     f2c:	0e 94 1c 08 	call	0x1038	; 0x1038 <pwm_set_duty>
}
     f30:	28 96       	adiw	r28, 0x08	; 8
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <pwm_off>:

void pwm_off(void)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
	pwm_on(0,0);
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	0e 94 74 07 	call	0xee8	; 0xee8 <pwm_on>
}
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <pwm_set_freq>:
 *
 *	At current settings the range is from about 500 Hz to about 6000 Hz  
 */

uint8_t pwm_set_freq(double freq)
{
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <pwm_set_freq+0xa>
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <pwm_set_freq+0xc>
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	69 83       	std	Y+1, r22	; 0x01
     f76:	7a 83       	std	Y+2, r23	; 0x02
     f78:	8b 83       	std	Y+3, r24	; 0x03
     f7a:	9c 83       	std	Y+4, r25	; 0x04
	device.pwm_freq = F_CPU / PWM_PRESCALE / freq;
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	74 e2       	ldi	r23, 0x24	; 36
     f80:	84 ef       	ldi	r24, 0xF4	; 244
     f82:	97 e4       	ldi	r25, 0x47	; 71
     f84:	29 81       	ldd	r18, Y+1	; 0x01
     f86:	3a 81       	ldd	r19, Y+2	; 0x02
     f88:	4b 81       	ldd	r20, Y+3	; 0x03
     f8a:	5c 81       	ldd	r21, Y+4	; 0x04
     f8c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__divsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	80 93 b6 01 	sts	0x01B6, r24
     f98:	90 93 b7 01 	sts	0x01B7, r25
     f9c:	a0 93 b8 01 	sts	0x01B8, r26
     fa0:	b0 93 b9 01 	sts	0x01B9, r27
	if (device.pwm_freq < PWM_MIN_RES) { 
     fa4:	80 91 b6 01 	lds	r24, 0x01B6
     fa8:	90 91 b7 01 	lds	r25, 0x01B7
     fac:	a0 91 b8 01 	lds	r26, 0x01B8
     fb0:	b0 91 b9 01 	lds	r27, 0x01B9
     fb4:	bc 01       	movw	r22, r24
     fb6:	cd 01       	movw	r24, r26
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 ea       	ldi	r20, 0xA0	; 160
     fbe:	51 e4       	ldi	r21, 0x41	; 65
     fc0:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__cmpsf2>
     fc4:	88 23       	and	r24, r24
     fc6:	2c f4       	brge	.+10     	; 0xfd2 <pwm_set_freq+0x6e>
		OCR2A = PWM_MIN_RES;
     fc8:	e3 eb       	ldi	r30, 0xB3	; 179
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	84 e1       	ldi	r24, 0x14	; 20
     fce:	80 83       	st	Z, r24
     fd0:	29 c0       	rjmp	.+82     	; 0x1024 <pwm_set_freq+0xc0>
	} else if (device.pwm_freq >= PWM_MAX_RES) { 
     fd2:	80 91 b6 01 	lds	r24, 0x01B6
     fd6:	90 91 b7 01 	lds	r25, 0x01B7
     fda:	a0 91 b8 01 	lds	r26, 0x01B8
     fde:	b0 91 b9 01 	lds	r27, 0x01B9
     fe2:	bc 01       	movw	r22, r24
     fe4:	cd 01       	movw	r24, r26
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	4f e7       	ldi	r20, 0x7F	; 127
     fec:	53 e4       	ldi	r21, 0x43	; 67
     fee:	0e 94 24 11 	call	0x2248	; 0x2248 <__gesf2>
     ff2:	88 23       	and	r24, r24
     ff4:	2c f0       	brlt	.+10     	; 0x1000 <pwm_set_freq+0x9c>
		OCR2A = PWM_MAX_RES;
     ff6:	e3 eb       	ldi	r30, 0xB3	; 179
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	80 83       	st	Z, r24
     ffe:	12 c0       	rjmp	.+36     	; 0x1024 <pwm_set_freq+0xc0>
	} else { 
		OCR2A = (uint8_t)device.pwm_freq;
    1000:	03 eb       	ldi	r16, 0xB3	; 179
    1002:	10 e0       	ldi	r17, 0x00	; 0
    1004:	80 91 b6 01 	lds	r24, 0x01B6
    1008:	90 91 b7 01 	lds	r25, 0x01B7
    100c:	a0 91 b8 01 	lds	r26, 0x01B8
    1010:	b0 91 b9 01 	lds	r27, 0x01B9
    1014:	bc 01       	movw	r22, r24
    1016:	cd 01       	movw	r24, r26
    1018:	0e 94 46 10 	call	0x208c	; 0x208c <__fixunssfsi>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	f8 01       	movw	r30, r16
    1022:	80 83       	st	Z, r24
	}
	return (SC_OK);
    1024:	80 e0       	ldi	r24, 0x00	; 0
}
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	08 95       	ret

00001038 <pwm_set_duty>:
 *	Since I can't seem to get the output pin to work in non-inverted mode
 *	it's done in software in this routine.
 */

uint8_t pwm_set_duty(double duty)
{
    1038:	cf 92       	push	r12
    103a:	df 92       	push	r13
    103c:	ef 92       	push	r14
    103e:	ff 92       	push	r15
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <pwm_set_duty+0x12>
    104a:	00 d0       	rcall	.+0      	; 0x104c <pwm_set_duty+0x14>
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	69 83       	std	Y+1, r22	; 0x01
    1052:	7a 83       	std	Y+2, r23	; 0x02
    1054:	8b 83       	std	Y+3, r24	; 0x03
    1056:	9c 83       	std	Y+4, r25	; 0x04
	if (duty < 0.01) {				// anything approaching 0% 
    1058:	69 81       	ldd	r22, Y+1	; 0x01
    105a:	7a 81       	ldd	r23, Y+2	; 0x02
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	2a e0       	ldi	r18, 0x0A	; 10
    1062:	37 ed       	ldi	r19, 0xD7	; 215
    1064:	43 e2       	ldi	r20, 0x23	; 35
    1066:	5c e3       	ldi	r21, 0x3C	; 60
    1068:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__cmpsf2>
    106c:	88 23       	and	r24, r24
    106e:	2c f4       	brge	.+10     	; 0x107a <pwm_set_duty+0x42>
		OCR2B = 255;
    1070:	e4 eb       	ldi	r30, 0xB4	; 180
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	8f ef       	ldi	r24, 0xFF	; 255
    1076:	80 83       	st	Z, r24
    1078:	4a c0       	rjmp	.+148    	; 0x110e <pwm_set_duty+0xd6>
	} else if (duty > 99.9) { 		// anything approaching 100%
    107a:	69 81       	ldd	r22, Y+1	; 0x01
    107c:	7a 81       	ldd	r23, Y+2	; 0x02
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	2d ec       	ldi	r18, 0xCD	; 205
    1084:	3c ec       	ldi	r19, 0xCC	; 204
    1086:	47 ec       	ldi	r20, 0xC7	; 199
    1088:	52 e4       	ldi	r21, 0x42	; 66
    108a:	0e 94 24 11 	call	0x2248	; 0x2248 <__gesf2>
    108e:	18 16       	cp	r1, r24
    1090:	24 f4       	brge	.+8      	; 0x109a <pwm_set_duty+0x62>
		OCR2B = 0;
    1092:	e4 eb       	ldi	r30, 0xB4	; 180
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	10 82       	st	Z, r1
    1098:	3a c0       	rjmp	.+116    	; 0x110e <pwm_set_duty+0xd6>
	} else {
		OCR2B = (uint8_t)(OCR2A * (1-(duty/100)));
    109a:	0f 2e       	mov	r0, r31
    109c:	f4 eb       	ldi	r31, 0xB4	; 180
    109e:	cf 2e       	mov	r12, r31
    10a0:	dd 24       	eor	r13, r13
    10a2:	f0 2d       	mov	r31, r0
    10a4:	e3 eb       	ldi	r30, 0xB3	; 179
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	aa 27       	eor	r26, r26
    10b0:	97 fd       	sbrc	r25, 7
    10b2:	a0 95       	com	r26
    10b4:	ba 2f       	mov	r27, r26
    10b6:	bc 01       	movw	r22, r24
    10b8:	cd 01       	movw	r24, r26
    10ba:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__floatsisf>
    10be:	7b 01       	movw	r14, r22
    10c0:	8c 01       	movw	r16, r24
    10c2:	69 81       	ldd	r22, Y+1	; 0x01
    10c4:	7a 81       	ldd	r23, Y+2	; 0x02
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	48 ec       	ldi	r20, 0xC8	; 200
    10d0:	52 ec       	ldi	r21, 0xC2	; 194
    10d2:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__divsf3>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e8       	ldi	r20, 0x80	; 128
    10e4:	5f e3       	ldi	r21, 0x3F	; 63
    10e6:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__addsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	9c 01       	movw	r18, r24
    10f0:	ad 01       	movw	r20, r26
    10f2:	c8 01       	movw	r24, r16
    10f4:	b7 01       	movw	r22, r14
    10f6:	0e 94 28 11 	call	0x2250	; 0x2250 <__mulsf3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	0e 94 46 10 	call	0x208c	; 0x208c <__fixunssfsi>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	f6 01       	movw	r30, r12
    110c:	80 83       	st	Z, r24
	}
	OCR2A = (uint8_t)device.pwm_freq;
    110e:	03 eb       	ldi	r16, 0xB3	; 179
    1110:	10 e0       	ldi	r17, 0x00	; 0
    1112:	80 91 b6 01 	lds	r24, 0x01B6
    1116:	90 91 b7 01 	lds	r25, 0x01B7
    111a:	a0 91 b8 01 	lds	r26, 0x01B8
    111e:	b0 91 b9 01 	lds	r27, 0x01B9
    1122:	bc 01       	movw	r22, r24
    1124:	cd 01       	movw	r24, r26
    1126:	0e 94 46 10 	call	0x208c	; 0x208c <__fixunssfsi>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	f8 01       	movw	r30, r16
    1130:	80 83       	st	Z, r24
	return (SC_OK);
    1132:	80 e0       	ldi	r24, 0x00	; 0
}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	08 95       	ret

0000114e <tick_init>:
 * tick_100ms()	  - tasks that run every 100 ms
 * tick_1sec()	  - tasks that run every 100 ms
 */

void tick_init(void)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0x00;					// normal mode, no compare values
    1156:	e4 e4       	ldi	r30, 0x44	; 68
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	10 82       	st	Z, r1
	TCCR0B = 0x05;					// normal mode, internal clock / 1024 ~= 7800 Hz
    115c:	e5 e4       	ldi	r30, 0x45	; 69
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	85 e0       	ldi	r24, 0x05	; 5
    1162:	80 83       	st	Z, r24
	TCNT0 = (256 - TICK_10MS_COUNT);// set timer for approx 10 ms overflow
    1164:	e6 e4       	ldi	r30, 0x46	; 70
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	82 eb       	ldi	r24, 0xB2	; 178
    116a:	80 83       	st	Z, r24
	TIMSK0 = (1<<TOIE0);			// enable overflow interrupts
    116c:	ee e6       	ldi	r30, 0x6E	; 110
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	80 83       	st	Z, r24
	device.tick_100ms_count = 10;
    1174:	8a e0       	ldi	r24, 0x0A	; 10
    1176:	80 93 b4 01 	sts	0x01B4, r24
	device.tick_1sec_count = 10;	
    117a:	8a e0       	ldi	r24, 0x0A	; 10
    117c:	80 93 b5 01 	sts	0x01B5, r24
}
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	8f 93       	push	r24
    1192:	ef 93       	push	r30
    1194:	ff 93       	push	r31
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = (256 - TICK_10MS_COUNT);// reset timer for approx 10 ms overflow
    119e:	e6 e4       	ldi	r30, 0x46	; 70
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	82 eb       	ldi	r24, 0xB2	; 178
    11a4:	80 83       	st	Z, r24
	device.tick_flag = true;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	80 93 b3 01 	sts	0x01B3, r24
}
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	ff 91       	pop	r31
    11b2:	ef 91       	pop	r30
    11b4:	8f 91       	pop	r24
    11b6:	0f 90       	pop	r0
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	0f 90       	pop	r0
    11bc:	1f 90       	pop	r1
    11be:	18 95       	reti

000011c0 <tick_callback>:

uint8_t tick_callback(void)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	0f 92       	push	r0
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	if (device.tick_flag == false) { return (SC_NOOP);}
    11ca:	80 91 b3 01 	lds	r24, 0x01B3
    11ce:	88 23       	and	r24, r24
    11d0:	19 f4       	brne	.+6      	; 0x11d8 <tick_callback+0x18>
    11d2:	83 e0       	ldi	r24, 0x03	; 3
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	25 c0       	rjmp	.+74     	; 0x1222 <tick_callback+0x62>

	device.tick_flag = false;
    11d8:	10 92 b3 01 	sts	0x01B3, r1
	tick_10ms();
    11dc:	0e 94 16 09 	call	0x122c	; 0x122c <tick_10ms>

	if (--device.tick_100ms_count != 0) { return (SC_OK);}
    11e0:	80 91 b4 01 	lds	r24, 0x01B4
    11e4:	81 50       	subi	r24, 0x01	; 1
    11e6:	80 93 b4 01 	sts	0x01B4, r24
    11ea:	80 91 b4 01 	lds	r24, 0x01B4
    11ee:	88 23       	and	r24, r24
    11f0:	11 f0       	breq	.+4      	; 0x11f6 <tick_callback+0x36>
    11f2:	19 82       	std	Y+1, r1	; 0x01
    11f4:	16 c0       	rjmp	.+44     	; 0x1222 <tick_callback+0x62>
	device.tick_100ms_count = 10;
    11f6:	8a e0       	ldi	r24, 0x0A	; 10
    11f8:	80 93 b4 01 	sts	0x01B4, r24
	tick_100ms();
    11fc:	0e 94 1f 09 	call	0x123e	; 0x123e <tick_100ms>

	if (--device.tick_1sec_count != 0) { return (SC_OK);}
    1200:	80 91 b5 01 	lds	r24, 0x01B5
    1204:	81 50       	subi	r24, 0x01	; 1
    1206:	80 93 b5 01 	sts	0x01B5, r24
    120a:	80 91 b5 01 	lds	r24, 0x01B5
    120e:	88 23       	and	r24, r24
    1210:	11 f0       	breq	.+4      	; 0x1216 <tick_callback+0x56>
    1212:	19 82       	std	Y+1, r1	; 0x01
    1214:	06 c0       	rjmp	.+12     	; 0x1222 <tick_callback+0x62>
	device.tick_1sec_count = 10;
    1216:	8a e0       	ldi	r24, 0x0A	; 10
    1218:	80 93 b5 01 	sts	0x01B5, r24
	tick_1sec();
    121c:	0e 94 28 09 	call	0x1250	; 0x1250 <tick_1sec>

	return (SC_OK);
    1220:	19 82       	std	Y+1, r1	; 0x01
    1222:	89 81       	ldd	r24, Y+1	; 0x01
}
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <tick_10ms>:

void tick_10ms(void)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
	sensor_callback();			// run the temperature sensor every 10 ms.
    1234:	0e 94 82 05 	call	0xb04	; 0xb04 <sensor_callback>
}
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <tick_100ms>:

void tick_100ms(void)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
	heater_callback();			// run the heater controller every 100 ms.
    1246:	0e 94 75 01 	call	0x2ea	; 0x2ea <heater_callback>
}
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <tick_1sec>:

void tick_1sec(void)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
//	led_toggle();
	return;
}
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <led_on>:
 * led_off()
 * led_toggle()
 */

void led_on(void) 
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
	LED_PORT &= ~(LED_PIN);
    1266:	ab e2       	ldi	r26, 0x2B	; 43
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	eb e2       	ldi	r30, 0x2B	; 43
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	8b 7f       	andi	r24, 0xFB	; 251
    1272:	8c 93       	st	X, r24
}
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <led_off>:

void led_off(void) 
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
	LED_PORT |= LED_PIN;
    1282:	ab e2       	ldi	r26, 0x2B	; 43
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	eb e2       	ldi	r30, 0x2B	; 43
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	84 60       	ori	r24, 0x04	; 4
    128e:	8c 93       	st	X, r24
}
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <led_toggle>:

void led_toggle(void) 
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
	if (LED_PORT && LED_PIN) {
    129e:	eb e2       	ldi	r30, 0x2B	; 43
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	88 23       	and	r24, r24
    12a6:	19 f0       	breq	.+6      	; 0x12ae <led_toggle+0x18>
		led_on();
    12a8:	0e 94 2f 09 	call	0x125e	; 0x125e <led_on>
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <led_toggle+0x1c>
	} else {
		led_off();
    12ae:	0e 94 3d 09 	call	0x127a	; 0x127a <led_off>
	}
}
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <device_reset>:
 *	device_read_byte() 	- read a byte from Kinen channel into device structs
 *	device_write_byte() - write a byte from device to Kinen channel
 */

void device_reset(void)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
	return;
}
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <device_read_byte>:

uint8_t device_read_byte(uint8_t addr, uint8_t *data)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <device_read_byte+0x6>
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <device_read_byte+0x8>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	7b 83       	std	Y+3, r23	; 0x03
    12d6:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	80 51       	subi	r24, 0x10	; 16
    12dc:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	8b 30       	cpi	r24, 0x0B	; 11
    12e2:	18 f0       	brcs	.+6      	; 0x12ea <device_read_byte+0x24>
    12e4:	88 e1       	ldi	r24, 0x18	; 24
    12e6:	8c 83       	std	Y+4, r24	; 0x04
    12e8:	0b c0       	rjmp	.+22     	; 0x1300 <device_read_byte+0x3a>
	*data = device.array[addr];
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	88 2f       	mov	r24, r24
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	fc 01       	movw	r30, r24
    12f2:	e6 54       	subi	r30, 0x46	; 70
    12f4:	fe 4f       	sbci	r31, 0xFE	; 254
    12f6:	80 81       	ld	r24, Z
    12f8:	ea 81       	ldd	r30, Y+2	; 0x02
    12fa:	fb 81       	ldd	r31, Y+3	; 0x03
    12fc:	80 83       	st	Z, r24
	return (SC_OK);
    12fe:	1c 82       	std	Y+4, r1	; 0x04
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <device_write_byte>:

uint8_t device_write_byte(uint8_t addr, uint8_t data)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <device_write_byte+0x6>
    1316:	0f 92       	push	r0
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	80 51       	subi	r24, 0x10	; 16
    1324:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	8b 30       	cpi	r24, 0x0B	; 11
    132a:	18 f0       	brcs	.+6      	; 0x1332 <device_write_byte+0x22>
    132c:	88 e1       	ldi	r24, 0x18	; 24
    132e:	8b 83       	std	Y+3, r24	; 0x03
    1330:	09 c0       	rjmp	.+18     	; 0x1344 <device_write_byte+0x34>
	// There are no checks in here for read-only locations
	// Assumes all locations are writable.
	device.array[addr] = data;
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	fc 01       	movw	r30, r24
    133a:	e6 54       	subi	r30, 0x46	; 70
    133c:	fe 4f       	sbci	r31, 0xFE	; 254
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	80 83       	st	Z, r24
	return (SC_OK);
    1342:	1b 82       	std	Y+3, r1	; 0x03
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <kinen_init>:
 * kinen_init() - set up Kinen subsystems; master or slave
 *
 *	Would like some kind of auto-detect here. For now it's just commenting
 */
void kinen_init(void)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
//	kinen_master_init();
	kinen_slave_init();
    135a:	0e 94 ba 09 	call	0x1374	; 0x1374 <kinen_slave_init>
}
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <kinen_callback>:
 *	Returns SC_NOOP if no operation was performed
 *	Returns EAGAIN if the function should block lower-priority functions
 *	in the main DISPATCH loop
 */
uint8_t kinen_callback(void)
{
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
//	return (SC_OK);			// return from a successful operation
//	return (SC_EAGAIN);		// return if lower priority tasks should be blocked
	return (SC_NOOP);		// return if no operation was performed 
    136c:	83 e0       	ldi	r24, 0x03	; 3
}
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <kinen_slave_init>:

/*
 * kinen_slave_init() - setup atmega SPI peripheral to be the OCB slave 
 */
void kinen_slave_init(void)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62

//	PRR |= 0x07;				// don't screw with the power reduction register
	DDRB &= ~(1<<DDB4);			// Set MISO output, all others unaffected
    137c:	a4 e2       	ldi	r26, 0x24	; 36
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e4 e2       	ldi	r30, 0x24	; 36
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	8f 7e       	andi	r24, 0xEF	; 239
    1388:	8c 93       	st	X, r24
	SPCR = (1<<SPIE | 1<<SPE);	// Enable SPI and its interrupt, set MSB first, slave mode
    138a:	ec e4       	ldi	r30, 0x4C	; 76
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 ec       	ldi	r24, 0xC0	; 192
    1390:	80 83       	st	Z, r24
	SPCR = (1<<CPOL | 1<<CPHA);	// Uncomment for mode 3 operation, comment for mode 0
    1392:	ec e4       	ldi	r30, 0x4C	; 76
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	8c e0       	ldi	r24, 0x0C	; 12
    1398:	80 83       	st	Z, r24
	memset(&ki.array, 0, sizeof(ki.array));
    139a:	80 e6       	ldi	r24, 0x60	; 96
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	40 e1       	ldi	r20, 0x10	; 16
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	0e 94 07 12 	call	0x240e	; 0x240e <memset>

	ki_wait_time = DEVICE_WAIT_TIME;	// setup read-only values
    13aa:	8a e0       	ldi	r24, 0x0A	; 10
    13ac:	80 93 63 01 	sts	0x0163, r24
	ki_device_type = DEVICE_TYPE;
    13b0:	84 e0       	ldi	r24, 0x04	; 4
    13b2:	80 93 68 01 	sts	0x0168, r24
	ki_device_id_hi = DEVICE_ID_HI;
    13b6:	10 92 69 01 	sts	0x0169, r1
	ki_device_id_lo = DEVICE_ID_LO;
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	80 93 6a 01 	sts	0x016A, r24
	ki_device_rev_major = DEVICE_REV_MAJOR;
    13c0:	10 92 6b 01 	sts	0x016B, r1
	ki_device_rev_minor = DEVICE_REV_MINOR;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	80 93 6c 01 	sts	0x016C, r24
	ki_device_uuid_1 = DEVICE_UUID_1;
    13ca:	10 92 6d 01 	sts	0x016D, r1
	ki_device_uuid_2 = DEVICE_UUID_2;
    13ce:	10 92 6e 01 	sts	0x016E, r1
	ki_device_uuid_3 = DEVICE_UUID_3;
    13d2:	10 92 6f 01 	sts	0x016F, r1

	ki_status = SC_OK;
    13d6:	10 92 61 01 	sts	0x0161, r1
	SPDR = ki_status;
    13da:	ee e4       	ldi	r30, 0x4E	; 78
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 91 61 01 	lds	r24, 0x0161
    13e2:	80 83       	st	Z, r24
}
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <__vector_17>:
 * SPI Slave RX Interrupt() - interrupts on byte received
 *
 * Uses a 2 phase state machine to toggle back and forth between ADDR and DATA bytes
 */
ISR(SPI_STC_vect)
{
    13ea:	1f 92       	push	r1
    13ec:	0f 92       	push	r0
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	0f 92       	push	r0
    13f2:	11 24       	eor	r1, r1
    13f4:	2f 93       	push	r18
    13f6:	3f 93       	push	r19
    13f8:	4f 93       	push	r20
    13fa:	5f 93       	push	r21
    13fc:	6f 93       	push	r22
    13fe:	7f 93       	push	r23
    1400:	8f 93       	push	r24
    1402:	9f 93       	push	r25
    1404:	af 93       	push	r26
    1406:	bf 93       	push	r27
    1408:	ef 93       	push	r30
    140a:	ff 93       	push	r31
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
	// receive address byte
	if (ki_slave.phase == KINEN_ADDR) {
    1414:	80 91 00 01 	lds	r24, 0x0100
    1418:	88 23       	and	r24, r24
    141a:	c9 f5       	brne	.+114    	; 0x148e <__vector_17+0xa4>
		ki_slave.phase = KINEN_DATA;	// advance phase
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	80 93 00 01 	sts	0x0100, r24
		ki_slave.addr = SPDR;		// read and save the address byte
    1422:	ee e4       	ldi	r30, 0x4E	; 78
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	80 93 01 01 	sts	0x0101, r24
		if (ki_command == KINEN_WRITE) { // write is simple...
    142c:	80 91 60 01 	lds	r24, 0x0160
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	29 f4       	brne	.+10     	; 0x143e <__vector_17+0x54>
			SPDR = KINEN_OK_BYTE;			// already saved addr, now return an OK
    1434:	ee e4       	ldi	r30, 0x4E	; 78
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	8a e5       	ldi	r24, 0x5A	; 90
    143a:	80 83       	st	Z, r24
    143c:	4a c0       	rjmp	.+148    	; 0x14d2 <__vector_17+0xe8>
		} else {
			if (ki_slave.addr < KINEN_COMMON_MAX) {	// handle OCB address space
    143e:	80 91 01 01 	lds	r24, 0x0101
    1442:	80 31       	cpi	r24, 0x10	; 16
    1444:	60 f4       	brcc	.+24     	; 0x145e <__vector_17+0x74>
				SPDR = ki.array[ki_slave.addr];
    1446:	ae e4       	ldi	r26, 0x4E	; 78
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	80 91 01 01 	lds	r24, 0x0101
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	fc 01       	movw	r30, r24
    1454:	e0 5a       	subi	r30, 0xA0	; 160
    1456:	fe 4f       	sbci	r31, 0xFE	; 254
    1458:	80 81       	ld	r24, Z
    145a:	8c 93       	st	X, r24
    145c:	3a c0       	rjmp	.+116    	; 0x14d2 <__vector_17+0xe8>
			} else {								// handle device address space
				if ((ki_status = device_read_byte(ki_slave.addr, &ki_slave.data)) == SC_OK) {
    145e:	80 91 01 01 	lds	r24, 0x0101
    1462:	22 e0       	ldi	r18, 0x02	; 2
    1464:	31 e0       	ldi	r19, 0x01	; 1
    1466:	b9 01       	movw	r22, r18
    1468:	0e 94 63 09 	call	0x12c6	; 0x12c6 <device_read_byte>
    146c:	80 93 61 01 	sts	0x0161, r24
    1470:	80 91 61 01 	lds	r24, 0x0161
    1474:	88 23       	and	r24, r24
    1476:	31 f4       	brne	.+12     	; 0x1484 <__vector_17+0x9a>
					SPDR = ki_slave.data;
    1478:	ee e4       	ldi	r30, 0x4E	; 78
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 91 02 01 	lds	r24, 0x0102
    1480:	80 83       	st	Z, r24
    1482:	27 c0       	rjmp	.+78     	; 0x14d2 <__vector_17+0xe8>
				} else {
					SPDR = KINEN_ERR_BYTE;
    1484:	ee e4       	ldi	r30, 0x4E	; 78
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	85 ea       	ldi	r24, 0xA5	; 165
    148a:	80 83       	st	Z, r24
    148c:	22 c0       	rjmp	.+68     	; 0x14d2 <__vector_17+0xe8>
			}
		}

	// receive data byte
	} else {
		ki_slave.phase = KINEN_ADDR;	// advance phase
    148e:	10 92 00 01 	sts	0x0100, r1
		ki_slave.data = SPDR;		// read and save the data byte
    1492:	ee e4       	ldi	r30, 0x4E	; 78
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	80 93 02 01 	sts	0x0102, r24
		if (ki_command == KINEN_WRITE) {
    149c:	80 91 60 01 	lds	r24, 0x0160
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	b9 f4       	brne	.+46     	; 0x14d2 <__vector_17+0xe8>
			if (ki_slave.addr < KINEN_COMMON_MAX) {
    14a4:	80 91 01 01 	lds	r24, 0x0101
    14a8:	80 31       	cpi	r24, 0x10	; 16
    14aa:	50 f4       	brcc	.+20     	; 0x14c0 <__vector_17+0xd6>
				ki_status = _slave_write_byte(ki_slave.addr, ki_slave.data);
    14ac:	80 91 01 01 	lds	r24, 0x0101
    14b0:	90 91 02 01 	lds	r25, 0x0102
    14b4:	69 2f       	mov	r22, r25
    14b6:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <_slave_write_byte>
    14ba:	80 93 61 01 	sts	0x0161, r24
    14be:	09 c0       	rjmp	.+18     	; 0x14d2 <__vector_17+0xe8>
			} else {
				ki_status = device_write_byte(ki_slave.addr, ki_slave.data);
    14c0:	80 91 01 01 	lds	r24, 0x0101
    14c4:	90 91 02 01 	lds	r25, 0x0102
    14c8:	69 2f       	mov	r22, r25
    14ca:	0e 94 88 09 	call	0x1310	; 0x1310 <device_write_byte>
    14ce:	80 93 61 01 	sts	0x0161, r24
			}
		}
	}
}
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	3f 91       	pop	r19
    14ec:	2f 91       	pop	r18
    14ee:	0f 90       	pop	r0
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	0f 90       	pop	r0
    14f4:	1f 90       	pop	r1
    14f6:	18 95       	reti

000014f8 <_slave_write_byte>:

/* 
 * _slave_write_byte() - helper to write byte to a non-device address
 */
static uint8_t _slave_write_byte(const uint8_t addr, const uint8_t data)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <_slave_write_byte+0x6>
    14fe:	0f 92       	push	r0
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	6a 83       	std	Y+2, r22	; 0x02
	if (addr == KINEN_COMMAND) {
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	88 23       	and	r24, r24
    150c:	21 f4       	brne	.+8      	; 0x1516 <_slave_write_byte+0x1e>
		ki_command = data; 
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	80 93 60 01 	sts	0x0160, r24
    1514:	12 c0       	rjmp	.+36     	; 0x153a <_slave_write_byte+0x42>

	} else if (addr == KINEN_ADDR_PAGE) { 
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	84 30       	cpi	r24, 0x04	; 4
    151a:	21 f4       	brne	.+8      	; 0x1524 <_slave_write_byte+0x2c>
		ki_addr_page = data; 
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	80 93 64 01 	sts	0x0164, r24
    1522:	0b c0       	rjmp	.+22     	; 0x153a <_slave_write_byte+0x42>

	} else if (addr == KINEN_RESET) {
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	85 30       	cpi	r24, 0x05	; 5
    1528:	29 f4       	brne	.+10     	; 0x1534 <_slave_write_byte+0x3c>
		kinen_slave_init();
    152a:	0e 94 ba 09 	call	0x1374	; 0x1374 <kinen_slave_init>
		device_reset();
    152e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <device_reset>
    1532:	03 c0       	rjmp	.+6      	; 0x153a <_slave_write_byte+0x42>

	} else {
		return (SC_READ_ONLY_ADDRESS);
    1534:	89 e1       	ldi	r24, 0x19	; 25
    1536:	8b 83       	std	Y+3, r24	; 0x03
    1538:	01 c0       	rjmp	.+2      	; 0x153c <_slave_write_byte+0x44>
	}
	return (SC_OK);
    153a:	1b 82       	std	Y+3, r1	; 0x03
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <std_dev>:
 *
 *	"A lot of people talk about standard deviation but what is a standard deviant?"
 */

double std_dev(double a[], uint8_t n, double *mean) 
{
    154a:	ef 92       	push	r14
    154c:	ff 92       	push	r15
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	66 97       	sbiw	r28, 0x16	; 22
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	9f 87       	std	Y+15, r25	; 0x0f
    1568:	8e 87       	std	Y+14, r24	; 0x0e
    156a:	68 8b       	std	Y+16, r22	; 0x10
    156c:	5a 8b       	std	Y+18, r21	; 0x12
    156e:	49 8b       	std	Y+17, r20	; 0x11
	if(n == 0) { return (0);}
    1570:	88 89       	ldd	r24, Y+16	; 0x10
    1572:	88 23       	and	r24, r24
    1574:	49 f4       	brne	.+18     	; 0x1588 <std_dev+0x3e>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	a0 e0       	ldi	r26, 0x00	; 0
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	8b 8b       	std	Y+19, r24	; 0x13
    1580:	9c 8b       	std	Y+20, r25	; 0x14
    1582:	ad 8b       	std	Y+21, r26	; 0x15
    1584:	be 8b       	std	Y+22, r27	; 0x16
    1586:	ae c0       	rjmp	.+348    	; 0x16e4 <std_dev+0x19a>
	double sum = 0;
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a0 e0       	ldi	r26, 0x00	; 0
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	8a 87       	std	Y+10, r24	; 0x0a
    1592:	9b 87       	std	Y+11, r25	; 0x0b
    1594:	ac 87       	std	Y+12, r26	; 0x0c
    1596:	bd 87       	std	Y+13, r27	; 0x0d
	double sq_sum = 0;
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	a0 e0       	ldi	r26, 0x00	; 0
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	8e 83       	std	Y+6, r24	; 0x06
    15a2:	9f 83       	std	Y+7, r25	; 0x07
    15a4:	a8 87       	std	Y+8, r26	; 0x08
    15a6:	b9 87       	std	Y+9, r27	; 0x09
	for(uint8_t i=0; i<n; ++i) {
    15a8:	19 82       	std	Y+1, r1	; 0x01
    15aa:	43 c0       	rjmp	.+134    	; 0x1632 <std_dev+0xe8>
		sum += a[i];
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	9c 01       	movw	r18, r24
    15b4:	22 0f       	add	r18, r18
    15b6:	33 1f       	adc	r19, r19
    15b8:	22 0f       	add	r18, r18
    15ba:	33 1f       	adc	r19, r19
    15bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    15be:	9f 85       	ldd	r25, Y+15	; 0x0f
    15c0:	fc 01       	movw	r30, r24
    15c2:	e2 0f       	add	r30, r18
    15c4:	f3 1f       	adc	r31, r19
    15c6:	20 81       	ld	r18, Z
    15c8:	31 81       	ldd	r19, Z+1	; 0x01
    15ca:	42 81       	ldd	r20, Z+2	; 0x02
    15cc:	53 81       	ldd	r21, Z+3	; 0x03
    15ce:	6a 85       	ldd	r22, Y+10	; 0x0a
    15d0:	7b 85       	ldd	r23, Y+11	; 0x0b
    15d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    15d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    15d6:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__addsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	8a 87       	std	Y+10, r24	; 0x0a
    15e0:	9b 87       	std	Y+11, r25	; 0x0b
    15e2:	ac 87       	std	Y+12, r26	; 0x0c
    15e4:	bd 87       	std	Y+13, r27	; 0x0d
		sq_sum += square(a[i]);
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	88 2f       	mov	r24, r24
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	9c 01       	movw	r18, r24
    15ee:	22 0f       	add	r18, r18
    15f0:	33 1f       	adc	r19, r19
    15f2:	22 0f       	add	r18, r18
    15f4:	33 1f       	adc	r19, r19
    15f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    15f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    15fa:	fc 01       	movw	r30, r24
    15fc:	e2 0f       	add	r30, r18
    15fe:	f3 1f       	adc	r31, r19
    1600:	80 81       	ld	r24, Z
    1602:	91 81       	ldd	r25, Z+1	; 0x01
    1604:	a2 81       	ldd	r26, Z+2	; 0x02
    1606:	b3 81       	ldd	r27, Z+3	; 0x03
    1608:	bc 01       	movw	r22, r24
    160a:	cd 01       	movw	r24, r26
    160c:	0e 94 cd 11 	call	0x239a	; 0x239a <square>
    1610:	9b 01       	movw	r18, r22
    1612:	ac 01       	movw	r20, r24
    1614:	6e 81       	ldd	r22, Y+6	; 0x06
    1616:	7f 81       	ldd	r23, Y+7	; 0x07
    1618:	88 85       	ldd	r24, Y+8	; 0x08
    161a:	99 85       	ldd	r25, Y+9	; 0x09
    161c:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__addsf3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	8e 83       	std	Y+6, r24	; 0x06
    1626:	9f 83       	std	Y+7, r25	; 0x07
    1628:	a8 87       	std	Y+8, r26	; 0x08
    162a:	b9 87       	std	Y+9, r27	; 0x09
double std_dev(double a[], uint8_t n, double *mean) 
{
	if(n == 0) { return (0);}
	double sum = 0;
	double sq_sum = 0;
	for(uint8_t i=0; i<n; ++i) {
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	8f 5f       	subi	r24, 0xFF	; 255
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	99 81       	ldd	r25, Y+1	; 0x01
    1634:	88 89       	ldd	r24, Y+16	; 0x10
    1636:	98 17       	cp	r25, r24
    1638:	08 f4       	brcc	.+2      	; 0x163c <std_dev+0xf2>
    163a:	b8 cf       	rjmp	.-144    	; 0x15ac <std_dev+0x62>
		sum += a[i];
		sq_sum += square(a[i]);
	}
	*mean = sum / n;
    163c:	88 89       	ldd	r24, Y+16	; 0x10
    163e:	88 2f       	mov	r24, r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	aa 27       	eor	r26, r26
    1644:	97 fd       	sbrc	r25, 7
    1646:	a0 95       	com	r26
    1648:	ba 2f       	mov	r27, r26
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__floatsisf>
    1652:	9b 01       	movw	r18, r22
    1654:	ac 01       	movw	r20, r24
    1656:	6a 85       	ldd	r22, Y+10	; 0x0a
    1658:	7b 85       	ldd	r23, Y+11	; 0x0b
    165a:	8c 85       	ldd	r24, Y+12	; 0x0c
    165c:	9d 85       	ldd	r25, Y+13	; 0x0d
    165e:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__divsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	e9 89       	ldd	r30, Y+17	; 0x11
    1668:	fa 89       	ldd	r31, Y+18	; 0x12
    166a:	80 83       	st	Z, r24
    166c:	91 83       	std	Z+1, r25	; 0x01
    166e:	a2 83       	std	Z+2, r26	; 0x02
    1670:	b3 83       	std	Z+3, r27	; 0x03
	double variance = (sq_sum / n) - square(*mean);
    1672:	88 89       	ldd	r24, Y+16	; 0x10
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	aa 27       	eor	r26, r26
    167a:	97 fd       	sbrc	r25, 7
    167c:	a0 95       	com	r26
    167e:	ba 2f       	mov	r27, r26
    1680:	bc 01       	movw	r22, r24
    1682:	cd 01       	movw	r24, r26
    1684:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__floatsisf>
    1688:	9b 01       	movw	r18, r22
    168a:	ac 01       	movw	r20, r24
    168c:	6e 81       	ldd	r22, Y+6	; 0x06
    168e:	7f 81       	ldd	r23, Y+7	; 0x07
    1690:	88 85       	ldd	r24, Y+8	; 0x08
    1692:	99 85       	ldd	r25, Y+9	; 0x09
    1694:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__divsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	7c 01       	movw	r14, r24
    169e:	8d 01       	movw	r16, r26
    16a0:	e9 89       	ldd	r30, Y+17	; 0x11
    16a2:	fa 89       	ldd	r31, Y+18	; 0x12
    16a4:	80 81       	ld	r24, Z
    16a6:	91 81       	ldd	r25, Z+1	; 0x01
    16a8:	a2 81       	ldd	r26, Z+2	; 0x02
    16aa:	b3 81       	ldd	r27, Z+3	; 0x03
    16ac:	bc 01       	movw	r22, r24
    16ae:	cd 01       	movw	r24, r26
    16b0:	0e 94 cd 11 	call	0x239a	; 0x239a <square>
    16b4:	9b 01       	movw	r18, r22
    16b6:	ac 01       	movw	r20, r24
    16b8:	c8 01       	movw	r24, r16
    16ba:	b7 01       	movw	r22, r14
    16bc:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__subsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	8a 83       	std	Y+2, r24	; 0x02
    16c6:	9b 83       	std	Y+3, r25	; 0x03
    16c8:	ac 83       	std	Y+4, r26	; 0x04
    16ca:	bd 83       	std	Y+5, r27	; 0x05
	return sqrt(variance);
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	9b 81       	ldd	r25, Y+3	; 0x03
    16d0:	ac 81       	ldd	r26, Y+4	; 0x04
    16d2:	bd 81       	ldd	r27, Y+5	; 0x05
    16d4:	bc 01       	movw	r22, r24
    16d6:	cd 01       	movw	r24, r26
    16d8:	0e 94 8f 11 	call	0x231e	; 0x231e <sqrt>
    16dc:	6b 8b       	std	Y+19, r22	; 0x13
    16de:	7c 8b       	std	Y+20, r23	; 0x14
    16e0:	8d 8b       	std	Y+21, r24	; 0x15
    16e2:	9e 8b       	std	Y+22, r25	; 0x16
    16e4:	8b 89       	ldd	r24, Y+19	; 0x13
    16e6:	9c 89       	ldd	r25, Y+20	; 0x14
    16e8:	ad 89       	ldd	r26, Y+21	; 0x15
    16ea:	be 89       	ldd	r27, Y+22	; 0x16
}
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	66 96       	adiw	r28, 0x16	; 22
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	ff 90       	pop	r15
    1706:	ef 90       	pop	r14
    1708:	08 95       	ret

0000170a <set_baud_rate>:
uint8_t rx_buffer_tail = 0;
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_buffer_head = 0;
volatile uint8_t tx_buffer_tail = 0;

static void set_baud_rate(long baud) {
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <set_baud_rate+0x6>
    1710:	00 d0       	rcall	.+0      	; 0x1712 <set_baud_rate+0x8>
    1712:	00 d0       	rcall	.+0      	; 0x1714 <set_baud_rate+0xa>
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	6b 83       	std	Y+3, r22	; 0x03
    171a:	7c 83       	std	Y+4, r23	; 0x04
    171c:	8d 83       	std	Y+5, r24	; 0x05
    171e:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t UBRR0_value = (F_CPU / (8 * baud)) - 1;
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	9c 81       	ldd	r25, Y+4	; 0x04
    1724:	ad 81       	ldd	r26, Y+5	; 0x05
    1726:	be 81       	ldd	r27, Y+6	; 0x06
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	aa 1f       	adc	r26, r26
    172e:	bb 1f       	adc	r27, r27
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	aa 1f       	adc	r26, r26
    1736:	bb 1f       	adc	r27, r27
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	aa 1f       	adc	r26, r26
    173e:	bb 1f       	adc	r27, r27
    1740:	9c 01       	movw	r18, r24
    1742:	ad 01       	movw	r20, r26
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	92 e1       	ldi	r25, 0x12	; 18
    1748:	aa e7       	ldi	r26, 0x7A	; 122
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__udivmodsi4>
    1754:	da 01       	movw	r26, r20
    1756:	c9 01       	movw	r24, r18
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	9a 83       	std	Y+2, r25	; 0x02
    175c:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = UBRR0_value >> 8;
    175e:	e5 ec       	ldi	r30, 0xC5	; 197
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	89 2f       	mov	r24, r25
    1768:	99 27       	eor	r25, r25
    176a:	80 83       	st	Z, r24
	UBRR0L = UBRR0_value;
    176c:	e4 ec       	ldi	r30, 0xC4	; 196
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	80 83       	st	Z, r24
	UCSR0A &= ~(1<<U2X0);		// baud doubler off
    1774:	a0 ec       	ldi	r26, 0xC0	; 192
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e0 ec       	ldi	r30, 0xC0	; 192
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	8d 7f       	andi	r24, 0xFD	; 253
    1780:	8c 93       	st	X, r24
}
    1782:	26 96       	adiw	r28, 0x06	; 6
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <serial_init>:

void serial_init(long baud)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <serial_init+0x6>
    179a:	00 d0       	rcall	.+0      	; 0x179c <serial_init+0x8>
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	69 83       	std	Y+1, r22	; 0x01
    17a2:	7a 83       	std	Y+2, r23	; 0x02
    17a4:	8b 83       	std	Y+3, r24	; 0x03
    17a6:	9c 83       	std	Y+4, r25	; 0x04
	set_baud_rate(baud);
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	ab 81       	ldd	r26, Y+3	; 0x03
    17ae:	bc 81       	ldd	r27, Y+4	; 0x04
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 85 0b 	call	0x170a	; 0x170a <set_baud_rate>
	UCSR0B |= 1<<RXEN0;			// enable rx and tx
    17b8:	a1 ec       	ldi	r26, 0xC1	; 193
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e1 ec       	ldi	r30, 0xC1	; 193
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	80 61       	ori	r24, 0x10	; 16
    17c4:	8c 93       	st	X, r24
	UCSR0B |= 1<<TXEN0;	
    17c6:	a1 ec       	ldi	r26, 0xC1	; 193
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e1 ec       	ldi	r30, 0xC1	; 193
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	88 60       	ori	r24, 0x08	; 8
    17d2:	8c 93       	st	X, r24
	UCSR0B |= 1<<RXCIE0;		// enable interrupt on complete reception of a byte
    17d4:	a1 ec       	ldi	r26, 0xC1	; 193
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e1 ec       	ldi	r30, 0xC1	; 193
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	80 68       	ori	r24, 0x80	; 128
    17e0:	8c 93       	st	X, r24
	// USART defaults to 8-bit, no parity, 1 stop bit
}
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <serial_write>:

void serial_write(uint8_t data) {
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <serial_write+0x6>
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = tx_buffer_head + 1;	// Calculate next head
    17fc:	80 91 05 01 	lds	r24, 0x0105
    1800:	8f 5f       	subi	r24, 0xFF	; 255
    1802:	89 83       	std	Y+1, r24	; 0x01
	if (next_head == TX_BUFFER_SIZE) {
		next_head = 0; 
	}
	// Enable Data Register Empty Interrupt to make sure tx-streaming is running
	UCSR0B |= (1<<UDRIE0); 
    1804:	a1 ec       	ldi	r26, 0xC1	; 193
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e1 ec       	ldi	r30, 0xC1	; 193
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	80 62       	ori	r24, 0x20	; 32
    1810:	8c 93       	st	X, r24
	while (next_head == tx_buffer_tail); 	// Wait until there is space in the buffer
    1812:	90 91 06 01 	lds	r25, 0x0106
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	89 17       	cp	r24, r25
    181a:	d9 f3       	breq	.-10     	; 0x1812 <serial_write+0x22>

	tx_buffer[tx_buffer_head] = data;		// Store data and advance head
    181c:	80 91 05 01 	lds	r24, 0x0105
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	fc 01       	movw	r30, r24
    1826:	eb 53       	subi	r30, 0x3B	; 59
    1828:	fd 4f       	sbci	r31, 0xFD	; 253
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	80 83       	st	Z, r24
	tx_buffer_head = next_head;
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	80 93 05 01 	sts	0x0105, r24
}
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <__vector_19>:

// Data Register Empty Interrupt handler
ISR(USART_UDRE_vect)
{
    183e:	1f 92       	push	r1
    1840:	0f 92       	push	r0
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	0f 92       	push	r0
    1846:	11 24       	eor	r1, r1
    1848:	8f 93       	push	r24
    184a:	9f 93       	push	r25
    184c:	af 93       	push	r26
    184e:	bf 93       	push	r27
    1850:	ef 93       	push	r30
    1852:	ff 93       	push	r31
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	0f 92       	push	r0
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
	uint8_t tail = tx_buffer_tail;	// Temporary tx_buffer_tail (to optimize for volatile)
    185e:	80 91 06 01 	lds	r24, 0x0106
    1862:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = tx_buffer[tail];			// Send a byte from the buffer	
    1864:	a6 ec       	ldi	r26, 0xC6	; 198
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	88 2f       	mov	r24, r24
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	fc 01       	movw	r30, r24
    1870:	eb 53       	subi	r30, 0x3B	; 59
    1872:	fd 4f       	sbci	r31, 0xFD	; 253
    1874:	80 81       	ld	r24, Z
    1876:	8c 93       	st	X, r24
    tail++;							// Update tail position
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	8f 5f       	subi	r24, 0xFF	; 255
    187c:	89 83       	std	Y+1, r24	; 0x01
    if (tail == TX_BUFFER_SIZE) { tail = 0; }
	tx_buffer_tail = tail;
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	80 93 06 01 	sts	0x0106, r24

	// Turn off Data Register Empty Interrupt to stop tx-streaming if this concludes the transfer
	if (tail == tx_buffer_head) { 
    1884:	90 91 05 01 	lds	r25, 0x0105
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	89 17       	cp	r24, r25
    188c:	39 f4       	brne	.+14     	; 0x189c <__vector_19+0x5e>
		UCSR0B &= ~(1<<UDRIE0);
    188e:	a1 ec       	ldi	r26, 0xC1	; 193
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e1 ec       	ldi	r30, 0xC1	; 193
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	8f 7d       	andi	r24, 0xDF	; 223
    189a:	8c 93       	st	X, r24
	}
}
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	ff 91       	pop	r31
    18a4:	ef 91       	pop	r30
    18a6:	bf 91       	pop	r27
    18a8:	af 91       	pop	r26
    18aa:	9f 91       	pop	r25
    18ac:	8f 91       	pop	r24
    18ae:	0f 90       	pop	r0
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	0f 90       	pop	r0
    18b4:	1f 90       	pop	r1
    18b6:	18 95       	reti

000018b8 <serial_read>:

uint8_t serial_read()
{
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	00 d0       	rcall	.+0      	; 0x18be <serial_read+0x6>
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
	if (rx_buffer_head == rx_buffer_tail) {
    18c2:	90 91 03 01 	lds	r25, 0x0103
    18c6:	80 91 04 01 	lds	r24, 0x0104
    18ca:	98 17       	cp	r25, r24
    18cc:	19 f4       	brne	.+6      	; 0x18d4 <serial_read+0x1c>
		return SERIAL_NO_DATA;
    18ce:	8f ef       	ldi	r24, 0xFF	; 255
    18d0:	8a 83       	std	Y+2, r24	; 0x02
    18d2:	10 c0       	rjmp	.+32     	; 0x18f4 <serial_read+0x3c>
	} else {
		uint8_t data = rx_buffer[rx_buffer_tail];
    18d4:	80 91 04 01 	lds	r24, 0x0104
    18d8:	88 2f       	mov	r24, r24
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	fc 01       	movw	r30, r24
    18de:	eb 53       	subi	r30, 0x3B	; 59
    18e0:	fe 4f       	sbci	r31, 0xFE	; 254
    18e2:	80 81       	ld	r24, Z
    18e4:	89 83       	std	Y+1, r24	; 0x01
		rx_buffer_tail++;
    18e6:	80 91 04 01 	lds	r24, 0x0104
    18ea:	8f 5f       	subi	r24, 0xFF	; 255
    18ec:	80 93 04 01 	sts	0x0104, r24
		if (rx_buffer_tail == RX_BUFFER_SIZE) { rx_buffer_tail = 0; }
		return data;
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	8a 83       	std	Y+2, r24	; 0x02
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <__vector_18>:

ISR(USART_RX_vect)
{
    1900:	1f 92       	push	r1
    1902:	0f 92       	push	r0
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	0f 92       	push	r0
    1908:	11 24       	eor	r1, r1
    190a:	8f 93       	push	r24
    190c:	9f 93       	push	r25
    190e:	ef 93       	push	r30
    1910:	ff 93       	push	r31
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	00 d0       	rcall	.+0      	; 0x1918 <__vector_18+0x18>
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = UDR0;
    191c:	e6 ec       	ldi	r30, 0xC6	; 198
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = rx_buffer_head + 1;
    1924:	80 91 03 01 	lds	r24, 0x0103
    1928:	8f 5f       	subi	r24, 0xFF	; 255
    192a:	89 83       	std	Y+1, r24	; 0x01
	
	if (next_head == RX_BUFFER_SIZE) { 
		next_head = 0;
	}
	if (next_head != rx_buffer_tail) {      // Write data to buffer unless it is full.
    192c:	90 91 04 01 	lds	r25, 0x0104
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	89 17       	cp	r24, r25
    1934:	61 f0       	breq	.+24     	; 0x194e <__vector_18+0x4e>
		rx_buffer[rx_buffer_head] = data;
    1936:	80 91 03 01 	lds	r24, 0x0103
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	fc 01       	movw	r30, r24
    1940:	eb 53       	subi	r30, 0x3B	; 59
    1942:	fe 4f       	sbci	r31, 0xFE	; 254
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	80 83       	st	Z, r24
		rx_buffer_head = next_head;    
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	80 93 03 01 	sts	0x0103, r24
	}
}
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	ff 91       	pop	r31
    1958:	ef 91       	pop	r30
    195a:	9f 91       	pop	r25
    195c:	8f 91       	pop	r24
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	0f 90       	pop	r0
    1964:	1f 90       	pop	r1
    1966:	18 95       	reti

00001968 <serial_reset_read_buffer>:

void serial_reset_read_buffer() 
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
  rx_buffer_tail = rx_buffer_head;
    1970:	80 91 03 01 	lds	r24, 0x0103
    1974:	80 93 04 01 	sts	0x0104, r24
}
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <printString>:

#include "print.h"
#include "serial.h"

void printString(const char *s)
{
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	00 d0       	rcall	.+0      	; 0x1984 <printString+0x6>
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	0b c0       	rjmp	.+22     	; 0x19a4 <printString+0x26>
  while (*s)
    serial_write(*s++);
    198e:	e9 81       	ldd	r30, Y+1	; 0x01
    1990:	fa 81       	ldd	r31, Y+2	; 0x02
    1992:	20 81       	ld	r18, Z
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	9a 81       	ldd	r25, Y+2	; 0x02
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	82 2f       	mov	r24, r18
    19a0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <serial_write>
#include "print.h"
#include "serial.h"

void printString(const char *s)
{
  while (*s)
    19a4:	e9 81       	ldd	r30, Y+1	; 0x01
    19a6:	fa 81       	ldd	r31, Y+2	; 0x02
    19a8:	80 81       	ld	r24, Z
    19aa:	88 23       	and	r24, r24
    19ac:	81 f7       	brne	.-32     	; 0x198e <printString+0x10>
    serial_write(*s++);
}
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <printPgmString+0x6>
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <printPgmString+0x8>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <printPgmString+0xa>
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	9e 83       	std	Y+6, r25	; 0x06
    19c8:	8d 83       	std	Y+5, r24	; 0x05
    19ca:	03 c0       	rjmp	.+6      	; 0x19d2 <printPgmString+0x1a>
  char c;
  while ((c = pgm_read_byte_near(s++)))
    serial_write(c);
    19cc:	8c 81       	ldd	r24, Y+4	; 0x04
    19ce:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <serial_write>

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
  while ((c = pgm_read_byte_near(s++)))
    19d2:	8d 81       	ldd	r24, Y+5	; 0x05
    19d4:	9e 81       	ldd	r25, Y+6	; 0x06
    19d6:	9b 83       	std	Y+3, r25	; 0x03
    19d8:	8a 83       	std	Y+2, r24	; 0x02
    19da:	8d 81       	ldd	r24, Y+5	; 0x05
    19dc:	9e 81       	ldd	r25, Y+6	; 0x06
    19de:	01 96       	adiw	r24, 0x01	; 1
    19e0:	9e 83       	std	Y+6, r25	; 0x06
    19e2:	8d 83       	std	Y+5, r24	; 0x05
    19e4:	ea 81       	ldd	r30, Y+2	; 0x02
    19e6:	fb 81       	ldd	r31, Y+3	; 0x03
    19e8:	84 91       	lpm	r24, Z+
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	8c 83       	std	Y+4, r24	; 0x04
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
    19f2:	88 23       	and	r24, r24
    19f4:	59 f7       	brne	.-42     	; 0x19cc <printPgmString+0x14>
    serial_write(c);
}
    19f6:	26 96       	adiw	r28, 0x06	; 6
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <print_uint8_base2>:
// 			'0' + buf[i - 1] :
// 			'A' + buf[i - 1] - 10);
// }

void print_uint8_base2(uint8_t n)
{ 
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	2a 97       	sbiw	r28, 0x0a	; 10
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char buf[8];
	uint8_t i = 0;
    1a1e:	19 82       	std	Y+1, r1	; 0x01
    1a20:	12 c0       	rjmp	.+36     	; 0x1a46 <print_uint8_base2+0x3e>

	for (; i < 8; i++) {
		buf[i] = n & 1;
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	41 70       	andi	r20, 0x01	; 1
    1a2e:	ce 01       	movw	r24, r28
    1a30:	02 96       	adiw	r24, 0x02	; 2
    1a32:	fc 01       	movw	r30, r24
    1a34:	e2 0f       	add	r30, r18
    1a36:	f3 1f       	adc	r31, r19
    1a38:	40 83       	st	Z, r20
		n >>= 1;
    1a3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a3c:	86 95       	lsr	r24
    1a3e:	8a 87       	std	Y+10, r24	; 0x0a
void print_uint8_base2(uint8_t n)
{ 
	unsigned char buf[8];
	uint8_t i = 0;

	for (; i < 8; i++) {
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	8f 5f       	subi	r24, 0xFF	; 255
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	88 30       	cpi	r24, 0x08	; 8
    1a4a:	58 f3       	brcs	.-42     	; 0x1a22 <print_uint8_base2+0x1a>
    1a4c:	12 c0       	rjmp	.+36     	; 0x1a72 <print_uint8_base2+0x6a>
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
		serial_write('0' + buf[i - 1]);
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9c 01       	movw	r18, r24
    1a56:	21 50       	subi	r18, 0x01	; 1
    1a58:	30 40       	sbci	r19, 0x00	; 0
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	02 96       	adiw	r24, 0x02	; 2
    1a5e:	fc 01       	movw	r30, r24
    1a60:	e2 0f       	add	r30, r18
    1a62:	f3 1f       	adc	r31, r19
    1a64:	80 81       	ld	r24, Z
    1a66:	80 5d       	subi	r24, 0xD0	; 208
    1a68:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <serial_write>
	for (; i < 8; i++) {
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	81 50       	subi	r24, 0x01	; 1
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	88 23       	and	r24, r24
    1a76:	59 f7       	brne	.-42     	; 0x1a4e <print_uint8_base2+0x46>
		serial_write('0' + buf[i - 1]);
}
    1a78:	2a 96       	adiw	r28, 0x0a	; 10
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <print_uint32_base10>:

static void print_uint32_base10(unsigned long n)
{ 
    1a8a:	0f 93       	push	r16
    1a8c:	1f 93       	push	r17
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	2f 97       	sbiw	r28, 0x0f	; 15
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	6c 87       	std	Y+12, r22	; 0x0c
    1aa4:	7d 87       	std	Y+13, r23	; 0x0d
    1aa6:	8e 87       	std	Y+14, r24	; 0x0e
    1aa8:	9f 87       	std	Y+15, r25	; 0x0f
  unsigned char buf[10]; 
  uint8_t i = 0;
    1aaa:	19 82       	std	Y+1, r1	; 0x01
  
  if (n == 0) {
    1aac:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aae:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ab0:	ae 85       	ldd	r26, Y+14	; 0x0e
    1ab2:	bf 85       	ldd	r27, Y+15	; 0x0f
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	a1 05       	cpc	r26, r1
    1ab8:	b1 05       	cpc	r27, r1
    1aba:	91 f5       	brne	.+100    	; 0x1b20 <print_uint32_base10+0x96>
    serial_write('0');
    1abc:	80 e3       	ldi	r24, 0x30	; 48
    1abe:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <serial_write>
    1ac2:	4b c0       	rjmp	.+150    	; 0x1b5a <print_uint32_base10+0xd0>
    return;
  } 
  
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	08 2f       	mov	r16, r24
    1ac8:	10 e0       	ldi	r17, 0x00	; 0
    1aca:	8c 85       	ldd	r24, Y+12	; 0x0c
    1acc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ace:	ae 85       	ldd	r26, Y+14	; 0x0e
    1ad0:	bf 85       	ldd	r27, Y+15	; 0x0f
    1ad2:	2a e0       	ldi	r18, 0x0A	; 10
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e0       	ldi	r20, 0x00	; 0
    1ad8:	50 e0       	ldi	r21, 0x00	; 0
    1ada:	bc 01       	movw	r22, r24
    1adc:	cd 01       	movw	r24, r26
    1ade:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__udivmodsi4>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	20 5d       	subi	r18, 0xD0	; 208
    1aea:	ce 01       	movw	r24, r28
    1aec:	02 96       	adiw	r24, 0x02	; 2
    1aee:	fc 01       	movw	r30, r24
    1af0:	e0 0f       	add	r30, r16
    1af2:	f1 1f       	adc	r31, r17
    1af4:	20 83       	st	Z, r18
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	8f 5f       	subi	r24, 0xFF	; 255
    1afa:	89 83       	std	Y+1, r24	; 0x01
    n /= 10;
    1afc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1afe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b00:	ae 85       	ldd	r26, Y+14	; 0x0e
    1b02:	bf 85       	ldd	r27, Y+15	; 0x0f
    1b04:	2a e0       	ldi	r18, 0x0A	; 10
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__udivmodsi4>
    1b14:	da 01       	movw	r26, r20
    1b16:	c9 01       	movw	r24, r18
    1b18:	8c 87       	std	Y+12, r24	; 0x0c
    1b1a:	9d 87       	std	Y+13, r25	; 0x0d
    1b1c:	ae 87       	std	Y+14, r26	; 0x0e
    1b1e:	bf 87       	std	Y+15, r27	; 0x0f
  if (n == 0) {
    serial_write('0');
    return;
  } 
  
  while (n > 0) {
    1b20:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b22:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b24:	ae 85       	ldd	r26, Y+14	; 0x0e
    1b26:	bf 85       	ldd	r27, Y+15	; 0x0f
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	a1 05       	cpc	r26, r1
    1b2c:	b1 05       	cpc	r27, r1
    1b2e:	51 f6       	brne	.-108    	; 0x1ac4 <print_uint32_base10+0x3a>
    1b30:	11 c0       	rjmp	.+34     	; 0x1b54 <print_uint32_base10+0xca>
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    serial_write(buf[i-1]);
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	88 2f       	mov	r24, r24
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9c 01       	movw	r18, r24
    1b3a:	21 50       	subi	r18, 0x01	; 1
    1b3c:	30 40       	sbci	r19, 0x00	; 0
    1b3e:	ce 01       	movw	r24, r28
    1b40:	02 96       	adiw	r24, 0x02	; 2
    1b42:	fc 01       	movw	r30, r24
    1b44:	e2 0f       	add	r30, r18
    1b46:	f3 1f       	adc	r31, r19
    1b48:	80 81       	ld	r24, Z
    1b4a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <serial_write>
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	81 50       	subi	r24, 0x01	; 1
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	88 23       	and	r24, r24
    1b58:	61 f7       	brne	.-40     	; 0x1b32 <print_uint32_base10+0xa8>
    serial_write(buf[i-1]);
}
    1b5a:	2f 96       	adiw	r28, 0x0f	; 15
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	1f 91       	pop	r17
    1b6c:	0f 91       	pop	r16
    1b6e:	08 95       	ret

00001b70 <printInteger>:

void printInteger(uint32_t n)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <printInteger+0x6>
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <printInteger+0x8>
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	69 83       	std	Y+1, r22	; 0x01
    1b7e:	7a 83       	std	Y+2, r23	; 0x02
    1b80:	8b 83       	std	Y+3, r24	; 0x03
    1b82:	9c 83       	std	Y+4, r25	; 0x04
  if (n < 0) {
    serial_write('-');
    n = -n;
  }
  print_uint32_base10(n);
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	9a 81       	ldd	r25, Y+2	; 0x02
    1b88:	ab 81       	ldd	r26, Y+3	; 0x03
    1b8a:	bc 81       	ldd	r27, Y+4	; 0x04
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <print_uint32_base10>
}
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up 
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n)
{
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	64 97       	sbiw	r28, 0x14	; 20
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	69 8b       	std	Y+17, r22	; 0x11
    1bbc:	7a 8b       	std	Y+18, r23	; 0x12
    1bbe:	8b 8b       	std	Y+19, r24	; 0x13
    1bc0:	9c 8b       	std	Y+20, r25	; 0x14
	if (n < 0) {
    1bc2:	69 89       	ldd	r22, Y+17	; 0x11
    1bc4:	7a 89       	ldd	r23, Y+18	; 0x12
    1bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__cmpsf2>
    1bd6:	88 23       	and	r24, r24
    1bd8:	64 f4       	brge	.+24     	; 0x1bf2 <printFloat+0x50>
		serial_write('-');
    1bda:	8d e2       	ldi	r24, 0x2D	; 45
    1bdc:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <serial_write>
		n = -n;
    1be0:	89 89       	ldd	r24, Y+17	; 0x11
    1be2:	9a 89       	ldd	r25, Y+18	; 0x12
    1be4:	ab 89       	ldd	r26, Y+19	; 0x13
    1be6:	bc 89       	ldd	r27, Y+20	; 0x14
    1be8:	b0 58       	subi	r27, 0x80	; 128
    1bea:	89 8b       	std	Y+17, r24	; 0x11
    1bec:	9a 8b       	std	Y+18, r25	; 0x12
    1bee:	ab 8b       	std	Y+19, r26	; 0x13
    1bf0:	bc 8b       	std	Y+20, r27	; 0x14
	}

	uint8_t decimals = DECIMAL_PLACES;
    1bf2:	82 e0       	ldi	r24, 0x02	; 2
    1bf4:	8e 83       	std	Y+6, r24	; 0x06
    1bf6:	13 c0       	rjmp	.+38     	; 0x1c1e <printFloat+0x7c>
	while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
		n *= 100;
    1bf8:	69 89       	ldd	r22, Y+17	; 0x11
    1bfa:	7a 89       	ldd	r23, Y+18	; 0x12
    1bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	48 ec       	ldi	r20, 0xC8	; 200
    1c06:	52 e4       	ldi	r21, 0x42	; 66
    1c08:	0e 94 28 11 	call	0x2250	; 0x2250 <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	89 8b       	std	Y+17, r24	; 0x11
    1c12:	9a 8b       	std	Y+18, r25	; 0x12
    1c14:	ab 8b       	std	Y+19, r26	; 0x13
    1c16:	bc 8b       	std	Y+20, r27	; 0x14
		decimals -= 2;
    1c18:	8e 81       	ldd	r24, Y+6	; 0x06
    1c1a:	82 50       	subi	r24, 0x02	; 2
    1c1c:	8e 83       	std	Y+6, r24	; 0x06
		serial_write('-');
		n = -n;
	}

	uint8_t decimals = DECIMAL_PLACES;
	while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
    1c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c20:	82 30       	cpi	r24, 0x02	; 2
    1c22:	50 f7       	brcc	.-44     	; 0x1bf8 <printFloat+0x56>
		n *= 100;
		decimals -= 2;
	}
	if (decimals) { n *= 10; }
    1c24:	8e 81       	ldd	r24, Y+6	; 0x06
    1c26:	88 23       	and	r24, r24
    1c28:	81 f0       	breq	.+32     	; 0x1c4a <printFloat+0xa8>
    1c2a:	69 89       	ldd	r22, Y+17	; 0x11
    1c2c:	7a 89       	ldd	r23, Y+18	; 0x12
    1c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c30:	9c 89       	ldd	r25, Y+20	; 0x14
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e2       	ldi	r20, 0x20	; 32
    1c38:	51 e4       	ldi	r21, 0x41	; 65
    1c3a:	0e 94 28 11 	call	0x2250	; 0x2250 <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	89 8b       	std	Y+17, r24	; 0x11
    1c44:	9a 8b       	std	Y+18, r25	; 0x12
    1c46:	ab 8b       	std	Y+19, r26	; 0x13
    1c48:	bc 8b       	std	Y+20, r27	; 0x14
	n += 0.5; // Add rounding factor. Ensures carryover through entire value.
    1c4a:	69 89       	ldd	r22, Y+17	; 0x11
    1c4c:	7a 89       	ldd	r23, Y+18	; 0x12
    1c4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c50:	9c 89       	ldd	r25, Y+20	; 0x14
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e0       	ldi	r20, 0x00	; 0
    1c58:	5f e3       	ldi	r21, 0x3F	; 63
    1c5a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__addsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	89 8b       	std	Y+17, r24	; 0x11
    1c64:	9a 8b       	std	Y+18, r25	; 0x12
    1c66:	ab 8b       	std	Y+19, r26	; 0x13
    1c68:	bc 8b       	std	Y+20, r27	; 0x14
    
	// Generate digits backwards and store in string.
	unsigned char buf[10]; 
	uint8_t i = 0;
    1c6a:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t a = (long)n;  
    1c6c:	69 89       	ldd	r22, Y+17	; 0x11
    1c6e:	7a 89       	ldd	r23, Y+18	; 0x12
    1c70:	8b 89       	ldd	r24, Y+19	; 0x13
    1c72:	9c 89       	ldd	r25, Y+20	; 0x14
    1c74:	0e 94 41 10 	call	0x2082	; 0x2082 <__fixsfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	ab 83       	std	Y+3, r26	; 0x03
    1c82:	bc 83       	std	Y+4, r27	; 0x04
	buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
    1c84:	8e e2       	ldi	r24, 0x2E	; 46
    1c86:	89 87       	std	Y+9, r24	; 0x09
    1c88:	34 c0       	rjmp	.+104    	; 0x1cf2 <printFloat+0x150>
	while(a > 0) {
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	82 30       	cpi	r24, 0x02	; 2
    1c8e:	19 f4       	brne	.+6      	; 0x1c96 <printFloat+0xf4>
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	8f 5f       	subi	r24, 0xFF	; 255
    1c94:	8d 83       	std	Y+5, r24	; 0x05
		buf[i++] = (a % 10) + '0'; // Get digit
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
    1c98:	08 2f       	mov	r16, r24
    1c9a:	10 e0       	ldi	r17, 0x00	; 0
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca0:	ab 81       	ldd	r26, Y+3	; 0x03
    1ca2:	bc 81       	ldd	r27, Y+4	; 0x04
    1ca4:	2a e0       	ldi	r18, 0x0A	; 10
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e0       	ldi	r20, 0x00	; 0
    1caa:	50 e0       	ldi	r21, 0x00	; 0
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__udivmodsi4>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	28 2f       	mov	r18, r24
    1cba:	20 5d       	subi	r18, 0xD0	; 208
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	07 96       	adiw	r24, 0x07	; 7
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	e0 0f       	add	r30, r16
    1cc4:	f1 1f       	adc	r31, r17
    1cc6:	20 83       	st	Z, r18
    1cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cca:	8f 5f       	subi	r24, 0xFF	; 255
    1ccc:	8d 83       	std	Y+5, r24	; 0x05
		a /= 10;
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	ab 81       	ldd	r26, Y+3	; 0x03
    1cd4:	bc 81       	ldd	r27, Y+4	; 0x04
    1cd6:	2a e0       	ldi	r18, 0x0A	; 10
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e0       	ldi	r20, 0x00	; 0
    1cdc:	50 e0       	ldi	r21, 0x00	; 0
    1cde:	bc 01       	movw	r22, r24
    1ce0:	cd 01       	movw	r24, r26
    1ce2:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__udivmodsi4>
    1ce6:	da 01       	movw	r26, r20
    1ce8:	c9 01       	movw	r24, r18
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	ab 83       	std	Y+3, r26	; 0x03
    1cf0:	bc 83       	std	Y+4, r27	; 0x04
	// Generate digits backwards and store in string.
	unsigned char buf[10]; 
	uint8_t i = 0;
	uint32_t a = (long)n;  
	buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
	while(a > 0) {
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf6:	ab 81       	ldd	r26, Y+3	; 0x03
    1cf8:	bc 81       	ldd	r27, Y+4	; 0x04
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	a1 05       	cpc	r26, r1
    1cfe:	b1 05       	cpc	r27, r1
    1d00:	21 f6       	brne	.-120    	; 0x1c8a <printFloat+0xe8>
    1d02:	0d c0       	rjmp	.+26     	; 0x1d1e <printFloat+0x17c>
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
		buf[i++] = (a % 10) + '0'; // Get digit
		a /= 10;
	}
	while (i < DECIMAL_PLACES) { 
		buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	07 96       	adiw	r24, 0x07	; 7
    1d0e:	fc 01       	movw	r30, r24
    1d10:	e2 0f       	add	r30, r18
    1d12:	f3 1f       	adc	r31, r19
    1d14:	80 e3       	ldi	r24, 0x30	; 48
    1d16:	80 83       	st	Z, r24
    1d18:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1a:	8f 5f       	subi	r24, 0xFF	; 255
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
	while(a > 0) {
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
		buf[i++] = (a % 10) + '0'; // Get digit
		a /= 10;
	}
	while (i < DECIMAL_PLACES) { 
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	82 30       	cpi	r24, 0x02	; 2
    1d22:	80 f3       	brcs	.-32     	; 0x1d04 <printFloat+0x162>
		buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
	}
	if (i == DECIMAL_PLACES) { // Fill in leading zero, if needed.
    1d24:	8d 81       	ldd	r24, Y+5	; 0x05
    1d26:	82 30       	cpi	r24, 0x02	; 2
    1d28:	11 f5       	brne	.+68     	; 0x1d6e <printFloat+0x1cc>
		i++;
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	8f 5f       	subi	r24, 0xFF	; 255
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
		buf[i++] = '0'; 
    1d30:	8d 81       	ldd	r24, Y+5	; 0x05
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	ce 01       	movw	r24, r28
    1d38:	07 96       	adiw	r24, 0x07	; 7
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	e2 0f       	add	r30, r18
    1d3e:	f3 1f       	adc	r31, r19
    1d40:	80 e3       	ldi	r24, 0x30	; 48
    1d42:	80 83       	st	Z, r24
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	8f 5f       	subi	r24, 0xFF	; 255
    1d48:	8d 83       	std	Y+5, r24	; 0x05
    1d4a:	11 c0       	rjmp	.+34     	; 0x1d6e <printFloat+0x1cc>
	}

	// Print the generated string.
	for (; i > 0; i--)
		serial_write(buf[i-1]);
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	9c 01       	movw	r18, r24
    1d54:	21 50       	subi	r18, 0x01	; 1
    1d56:	30 40       	sbci	r19, 0x00	; 0
    1d58:	ce 01       	movw	r24, r28
    1d5a:	07 96       	adiw	r24, 0x07	; 7
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	e2 0f       	add	r30, r18
    1d60:	f3 1f       	adc	r31, r19
    1d62:	80 81       	ld	r24, Z
    1d64:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <serial_write>
		i++;
		buf[i++] = '0'; 
	}

	// Print the generated string.
	for (; i > 0; i--)
    1d68:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6a:	81 50       	subi	r24, 0x01	; 1
    1d6c:	8d 83       	std	Y+5, r24	; 0x05
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	88 23       	and	r24, r24
    1d72:	61 f7       	brne	.-40     	; 0x1d4c <printFloat+0x1aa>
		serial_write(buf[i-1]);
}
    1d74:	64 96       	adiw	r28, 0x14	; 20
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	1f 91       	pop	r17
    1d86:	0f 91       	pop	r16
    1d88:	08 95       	ret

00001d8a <rpt_initialized>:
static PGM_P const msg_scode[] PROGMEM = { msg_scode0, msg_scode1, msg_scode2, msg_scode3, msg_scode4};

/*** Display routines ***/

void rpt_initialized()
{
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
//	printPgmString((PGM_P)(pgm_read_word(initialized))); 
	printPgmString(PSTR("\nDevice Initialized\n")); 
    1d92:	8d eb       	ldi	r24, 0xBD	; 189
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <printPgmString>
}
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <rpt_readout>:

void rpt_readout()
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
	printPgmString(PSTR("Temp: ")); printFloat(sensor.temperature);
    1da8:	8e ee       	ldi	r24, 0xEE	; 238
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <printPgmString>
    1db0:	80 91 73 01 	lds	r24, 0x0173
    1db4:	90 91 74 01 	lds	r25, 0x0174
    1db8:	a0 91 75 01 	lds	r26, 0x0175
    1dbc:	b0 91 76 01 	lds	r27, 0x0176
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printFloat>
	printPgmString(PSTR(" StdDev: ")); printFloat(sensor.std_dev);				//++++++
    1dc8:	84 ee       	ldi	r24, 0xE4	; 228
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <printPgmString>
    1dd0:	80 91 77 01 	lds	r24, 0x0177
    1dd4:	90 91 78 01 	lds	r25, 0x0178
    1dd8:	a0 91 79 01 	lds	r26, 0x0179
    1ddc:	b0 91 7a 01 	lds	r27, 0x017A
    1de0:	bc 01       	movw	r22, r24
    1de2:	cd 01       	movw	r24, r26
    1de4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printFloat>
	printPgmString(PSTR(" s[0]: ")); printFloat(sensor.sample[0]);				//++++++
    1de8:	8c ed       	ldi	r24, 0xDC	; 220
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <printPgmString>
    1df0:	80 91 8b 01 	lds	r24, 0x018B
    1df4:	90 91 8c 01 	lds	r25, 0x018C
    1df8:	a0 91 8d 01 	lds	r26, 0x018D
    1dfc:	b0 91 8e 01 	lds	r27, 0x018E
    1e00:	bc 01       	movw	r22, r24
    1e02:	cd 01       	movw	r24, r26
    1e04:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printFloat>
	printPgmString(PSTR(" PWM: ")); printFloat(pid.output);
    1e08:	85 ed       	ldi	r24, 0xD5	; 213
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <printPgmString>
    1e10:	80 91 2a 01 	lds	r24, 0x012A
    1e14:	90 91 2b 01 	lds	r25, 0x012B
    1e18:	a0 91 2c 01 	lds	r26, 0x012C
    1e1c:	b0 91 2d 01 	lds	r27, 0x012D
    1e20:	bc 01       	movw	r22, r24
    1e22:	cd 01       	movw	r24, r26
    1e24:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printFloat>
//	printPgmString(PSTR(" Error: ")); printFloat(pid.error);				//++++++
	printPgmString(PSTR("  "));
    1e28:	82 ed       	ldi	r24, 0xD2	; 210
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <printPgmString>
	rpt_sensor();
    1e30:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <rpt_sensor>
}
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <rpt_heater_readout>:

void rpt_heater_readout()
{
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
	printPgmString(PSTR("Temp: "));  printFloat(heater.temperature);
    1e42:	8f ef       	ldi	r24, 0xFF	; 255
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <printPgmString>
    1e4a:	80 91 0c 01 	lds	r24, 0x010C
    1e4e:	90 91 0d 01 	lds	r25, 0x010D
    1e52:	a0 91 0e 01 	lds	r26, 0x010E
    1e56:	b0 91 0f 01 	lds	r27, 0x010F
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printFloat>
	printPgmString(PSTR("  PID: ")); printFloat(pid.output);
    1e62:	87 ef       	ldi	r24, 0xF7	; 247
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <printPgmString>
    1e6a:	80 91 2a 01 	lds	r24, 0x012A
    1e6e:	90 91 2b 01 	lds	r25, 0x012B
    1e72:	a0 91 2c 01 	lds	r26, 0x012C
    1e76:	b0 91 2d 01 	lds	r27, 0x012D
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	cd 01       	movw	r24, r26
    1e7e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printFloat>
	printPgmString(PSTR("\n")); 
    1e82:	85 ef       	ldi	r24, 0xF5	; 245
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <printPgmString>
}
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <rpt_sensor>:

void rpt_sensor()
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <rpt_sensor+0x6>
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <rpt_sensor+0x8>
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
	printPgmString((PGM_P)pgm_read_word(&msg_scode[sensor.code]));
    1e9c:	80 91 71 01 	lds	r24, 0x0171
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	8d 54       	subi	r24, 0x4D	; 77
    1eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1eac:	9c 83       	std	Y+4, r25	; 0x04
    1eae:	8b 83       	std	Y+3, r24	; 0x03
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	85 91       	lpm	r24, Z+
    1eb8:	94 91       	lpm	r25, Z+
    1eba:	9a 83       	std	Y+2, r25	; 0x02
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	fc 83       	std	Y+4, r31	; 0x04
    1ec0:	eb 83       	std	Y+3, r30	; 0x03
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <printPgmString>
	printPgmString(PSTR("\n")); 
    1eca:	86 e0       	ldi	r24, 0x06	; 6
    1ecc:	91 e0       	ldi	r25, 0x01	; 1
    1ece:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <printPgmString>
//	strncpy_P(msg,(PGM_P)pgm_read_word(&msg_scode[sensor.code]), MSGLEN);
//	printString(msg);

//	printPgmString(PSTR(pgm_read_word(&msg_scode[sensor.code]));
//	printPgmString(&msg_scode[sensor.code]);
}
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <__subsf3>:
    1ee0:	50 58       	subi	r21, 0x80	; 128

00001ee2 <__addsf3>:
    1ee2:	bb 27       	eor	r27, r27
    1ee4:	aa 27       	eor	r26, r26
    1ee6:	0e d0       	rcall	.+28     	; 0x1f04 <__addsf3x>
    1ee8:	75 c1       	rjmp	.+746    	; 0x21d4 <__fp_round>
    1eea:	66 d1       	rcall	.+716    	; 0x21b8 <__fp_pscA>
    1eec:	30 f0       	brcs	.+12     	; 0x1efa <__addsf3+0x18>
    1eee:	6b d1       	rcall	.+726    	; 0x21c6 <__fp_pscB>
    1ef0:	20 f0       	brcs	.+8      	; 0x1efa <__addsf3+0x18>
    1ef2:	31 f4       	brne	.+12     	; 0x1f00 <__addsf3+0x1e>
    1ef4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ef6:	11 f4       	brne	.+4      	; 0x1efc <__addsf3+0x1a>
    1ef8:	1e f4       	brtc	.+6      	; 0x1f00 <__addsf3+0x1e>
    1efa:	5b c1       	rjmp	.+694    	; 0x21b2 <__fp_nan>
    1efc:	0e f4       	brtc	.+2      	; 0x1f00 <__addsf3+0x1e>
    1efe:	e0 95       	com	r30
    1f00:	e7 fb       	bst	r30, 7
    1f02:	51 c1       	rjmp	.+674    	; 0x21a6 <__fp_inf>

00001f04 <__addsf3x>:
    1f04:	e9 2f       	mov	r30, r25
    1f06:	77 d1       	rcall	.+750    	; 0x21f6 <__fp_split3>
    1f08:	80 f3       	brcs	.-32     	; 0x1eea <__addsf3+0x8>
    1f0a:	ba 17       	cp	r27, r26
    1f0c:	62 07       	cpc	r22, r18
    1f0e:	73 07       	cpc	r23, r19
    1f10:	84 07       	cpc	r24, r20
    1f12:	95 07       	cpc	r25, r21
    1f14:	18 f0       	brcs	.+6      	; 0x1f1c <__addsf3x+0x18>
    1f16:	71 f4       	brne	.+28     	; 0x1f34 <__addsf3x+0x30>
    1f18:	9e f5       	brtc	.+102    	; 0x1f80 <__addsf3x+0x7c>
    1f1a:	8f c1       	rjmp	.+798    	; 0x223a <__fp_zero>
    1f1c:	0e f4       	brtc	.+2      	; 0x1f20 <__addsf3x+0x1c>
    1f1e:	e0 95       	com	r30
    1f20:	0b 2e       	mov	r0, r27
    1f22:	ba 2f       	mov	r27, r26
    1f24:	a0 2d       	mov	r26, r0
    1f26:	0b 01       	movw	r0, r22
    1f28:	b9 01       	movw	r22, r18
    1f2a:	90 01       	movw	r18, r0
    1f2c:	0c 01       	movw	r0, r24
    1f2e:	ca 01       	movw	r24, r20
    1f30:	a0 01       	movw	r20, r0
    1f32:	11 24       	eor	r1, r1
    1f34:	ff 27       	eor	r31, r31
    1f36:	59 1b       	sub	r21, r25
    1f38:	99 f0       	breq	.+38     	; 0x1f60 <__addsf3x+0x5c>
    1f3a:	59 3f       	cpi	r21, 0xF9	; 249
    1f3c:	50 f4       	brcc	.+20     	; 0x1f52 <__addsf3x+0x4e>
    1f3e:	50 3e       	cpi	r21, 0xE0	; 224
    1f40:	68 f1       	brcs	.+90     	; 0x1f9c <__addsf3x+0x98>
    1f42:	1a 16       	cp	r1, r26
    1f44:	f0 40       	sbci	r31, 0x00	; 0
    1f46:	a2 2f       	mov	r26, r18
    1f48:	23 2f       	mov	r18, r19
    1f4a:	34 2f       	mov	r19, r20
    1f4c:	44 27       	eor	r20, r20
    1f4e:	58 5f       	subi	r21, 0xF8	; 248
    1f50:	f3 cf       	rjmp	.-26     	; 0x1f38 <__addsf3x+0x34>
    1f52:	46 95       	lsr	r20
    1f54:	37 95       	ror	r19
    1f56:	27 95       	ror	r18
    1f58:	a7 95       	ror	r26
    1f5a:	f0 40       	sbci	r31, 0x00	; 0
    1f5c:	53 95       	inc	r21
    1f5e:	c9 f7       	brne	.-14     	; 0x1f52 <__addsf3x+0x4e>
    1f60:	7e f4       	brtc	.+30     	; 0x1f80 <__addsf3x+0x7c>
    1f62:	1f 16       	cp	r1, r31
    1f64:	ba 0b       	sbc	r27, r26
    1f66:	62 0b       	sbc	r22, r18
    1f68:	73 0b       	sbc	r23, r19
    1f6a:	84 0b       	sbc	r24, r20
    1f6c:	ba f0       	brmi	.+46     	; 0x1f9c <__addsf3x+0x98>
    1f6e:	91 50       	subi	r25, 0x01	; 1
    1f70:	a1 f0       	breq	.+40     	; 0x1f9a <__addsf3x+0x96>
    1f72:	ff 0f       	add	r31, r31
    1f74:	bb 1f       	adc	r27, r27
    1f76:	66 1f       	adc	r22, r22
    1f78:	77 1f       	adc	r23, r23
    1f7a:	88 1f       	adc	r24, r24
    1f7c:	c2 f7       	brpl	.-16     	; 0x1f6e <__addsf3x+0x6a>
    1f7e:	0e c0       	rjmp	.+28     	; 0x1f9c <__addsf3x+0x98>
    1f80:	ba 0f       	add	r27, r26
    1f82:	62 1f       	adc	r22, r18
    1f84:	73 1f       	adc	r23, r19
    1f86:	84 1f       	adc	r24, r20
    1f88:	48 f4       	brcc	.+18     	; 0x1f9c <__addsf3x+0x98>
    1f8a:	87 95       	ror	r24
    1f8c:	77 95       	ror	r23
    1f8e:	67 95       	ror	r22
    1f90:	b7 95       	ror	r27
    1f92:	f7 95       	ror	r31
    1f94:	9e 3f       	cpi	r25, 0xFE	; 254
    1f96:	08 f0       	brcs	.+2      	; 0x1f9a <__addsf3x+0x96>
    1f98:	b3 cf       	rjmp	.-154    	; 0x1f00 <__addsf3+0x1e>
    1f9a:	93 95       	inc	r25
    1f9c:	88 0f       	add	r24, r24
    1f9e:	08 f0       	brcs	.+2      	; 0x1fa2 <__addsf3x+0x9e>
    1fa0:	99 27       	eor	r25, r25
    1fa2:	ee 0f       	add	r30, r30
    1fa4:	97 95       	ror	r25
    1fa6:	87 95       	ror	r24
    1fa8:	08 95       	ret

00001faa <__cmpsf2>:
    1faa:	d9 d0       	rcall	.+434    	; 0x215e <__fp_cmp>
    1fac:	08 f4       	brcc	.+2      	; 0x1fb0 <__cmpsf2+0x6>
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	08 95       	ret

00001fb2 <__divsf3>:
    1fb2:	0c d0       	rcall	.+24     	; 0x1fcc <__divsf3x>
    1fb4:	0f c1       	rjmp	.+542    	; 0x21d4 <__fp_round>
    1fb6:	07 d1       	rcall	.+526    	; 0x21c6 <__fp_pscB>
    1fb8:	40 f0       	brcs	.+16     	; 0x1fca <__divsf3+0x18>
    1fba:	fe d0       	rcall	.+508    	; 0x21b8 <__fp_pscA>
    1fbc:	30 f0       	brcs	.+12     	; 0x1fca <__divsf3+0x18>
    1fbe:	21 f4       	brne	.+8      	; 0x1fc8 <__divsf3+0x16>
    1fc0:	5f 3f       	cpi	r21, 0xFF	; 255
    1fc2:	19 f0       	breq	.+6      	; 0x1fca <__divsf3+0x18>
    1fc4:	f0 c0       	rjmp	.+480    	; 0x21a6 <__fp_inf>
    1fc6:	51 11       	cpse	r21, r1
    1fc8:	39 c1       	rjmp	.+626    	; 0x223c <__fp_szero>
    1fca:	f3 c0       	rjmp	.+486    	; 0x21b2 <__fp_nan>

00001fcc <__divsf3x>:
    1fcc:	14 d1       	rcall	.+552    	; 0x21f6 <__fp_split3>
    1fce:	98 f3       	brcs	.-26     	; 0x1fb6 <__divsf3+0x4>

00001fd0 <__divsf3_pse>:
    1fd0:	99 23       	and	r25, r25
    1fd2:	c9 f3       	breq	.-14     	; 0x1fc6 <__divsf3+0x14>
    1fd4:	55 23       	and	r21, r21
    1fd6:	b1 f3       	breq	.-20     	; 0x1fc4 <__divsf3+0x12>
    1fd8:	95 1b       	sub	r25, r21
    1fda:	55 0b       	sbc	r21, r21
    1fdc:	bb 27       	eor	r27, r27
    1fde:	aa 27       	eor	r26, r26
    1fe0:	62 17       	cp	r22, r18
    1fe2:	73 07       	cpc	r23, r19
    1fe4:	84 07       	cpc	r24, r20
    1fe6:	38 f0       	brcs	.+14     	; 0x1ff6 <__divsf3_pse+0x26>
    1fe8:	9f 5f       	subi	r25, 0xFF	; 255
    1fea:	5f 4f       	sbci	r21, 0xFF	; 255
    1fec:	22 0f       	add	r18, r18
    1fee:	33 1f       	adc	r19, r19
    1ff0:	44 1f       	adc	r20, r20
    1ff2:	aa 1f       	adc	r26, r26
    1ff4:	a9 f3       	breq	.-22     	; 0x1fe0 <__divsf3_pse+0x10>
    1ff6:	33 d0       	rcall	.+102    	; 0x205e <__divsf3_pse+0x8e>
    1ff8:	0e 2e       	mov	r0, r30
    1ffa:	3a f0       	brmi	.+14     	; 0x200a <__divsf3_pse+0x3a>
    1ffc:	e0 e8       	ldi	r30, 0x80	; 128
    1ffe:	30 d0       	rcall	.+96     	; 0x2060 <__divsf3_pse+0x90>
    2000:	91 50       	subi	r25, 0x01	; 1
    2002:	50 40       	sbci	r21, 0x00	; 0
    2004:	e6 95       	lsr	r30
    2006:	00 1c       	adc	r0, r0
    2008:	ca f7       	brpl	.-14     	; 0x1ffc <__divsf3_pse+0x2c>
    200a:	29 d0       	rcall	.+82     	; 0x205e <__divsf3_pse+0x8e>
    200c:	fe 2f       	mov	r31, r30
    200e:	27 d0       	rcall	.+78     	; 0x205e <__divsf3_pse+0x8e>
    2010:	66 0f       	add	r22, r22
    2012:	77 1f       	adc	r23, r23
    2014:	88 1f       	adc	r24, r24
    2016:	bb 1f       	adc	r27, r27
    2018:	26 17       	cp	r18, r22
    201a:	37 07       	cpc	r19, r23
    201c:	48 07       	cpc	r20, r24
    201e:	ab 07       	cpc	r26, r27
    2020:	b0 e8       	ldi	r27, 0x80	; 128
    2022:	09 f0       	breq	.+2      	; 0x2026 <__divsf3_pse+0x56>
    2024:	bb 0b       	sbc	r27, r27
    2026:	80 2d       	mov	r24, r0
    2028:	bf 01       	movw	r22, r30
    202a:	ff 27       	eor	r31, r31
    202c:	93 58       	subi	r25, 0x83	; 131
    202e:	5f 4f       	sbci	r21, 0xFF	; 255
    2030:	2a f0       	brmi	.+10     	; 0x203c <__divsf3_pse+0x6c>
    2032:	9e 3f       	cpi	r25, 0xFE	; 254
    2034:	51 05       	cpc	r21, r1
    2036:	68 f0       	brcs	.+26     	; 0x2052 <__divsf3_pse+0x82>
    2038:	b6 c0       	rjmp	.+364    	; 0x21a6 <__fp_inf>
    203a:	00 c1       	rjmp	.+512    	; 0x223c <__fp_szero>
    203c:	5f 3f       	cpi	r21, 0xFF	; 255
    203e:	ec f3       	brlt	.-6      	; 0x203a <__divsf3_pse+0x6a>
    2040:	98 3e       	cpi	r25, 0xE8	; 232
    2042:	dc f3       	brlt	.-10     	; 0x203a <__divsf3_pse+0x6a>
    2044:	86 95       	lsr	r24
    2046:	77 95       	ror	r23
    2048:	67 95       	ror	r22
    204a:	b7 95       	ror	r27
    204c:	f7 95       	ror	r31
    204e:	9f 5f       	subi	r25, 0xFF	; 255
    2050:	c9 f7       	brne	.-14     	; 0x2044 <__divsf3_pse+0x74>
    2052:	88 0f       	add	r24, r24
    2054:	91 1d       	adc	r25, r1
    2056:	96 95       	lsr	r25
    2058:	87 95       	ror	r24
    205a:	97 f9       	bld	r25, 7
    205c:	08 95       	ret
    205e:	e1 e0       	ldi	r30, 0x01	; 1
    2060:	66 0f       	add	r22, r22
    2062:	77 1f       	adc	r23, r23
    2064:	88 1f       	adc	r24, r24
    2066:	bb 1f       	adc	r27, r27
    2068:	62 17       	cp	r22, r18
    206a:	73 07       	cpc	r23, r19
    206c:	84 07       	cpc	r24, r20
    206e:	ba 07       	cpc	r27, r26
    2070:	20 f0       	brcs	.+8      	; 0x207a <__divsf3_pse+0xaa>
    2072:	62 1b       	sub	r22, r18
    2074:	73 0b       	sbc	r23, r19
    2076:	84 0b       	sbc	r24, r20
    2078:	ba 0b       	sbc	r27, r26
    207a:	ee 1f       	adc	r30, r30
    207c:	88 f7       	brcc	.-30     	; 0x2060 <__divsf3_pse+0x90>
    207e:	e0 95       	com	r30
    2080:	08 95       	ret

00002082 <__fixsfsi>:
    2082:	04 d0       	rcall	.+8      	; 0x208c <__fixunssfsi>
    2084:	68 94       	set
    2086:	b1 11       	cpse	r27, r1
    2088:	d9 c0       	rjmp	.+434    	; 0x223c <__fp_szero>
    208a:	08 95       	ret

0000208c <__fixunssfsi>:
    208c:	bc d0       	rcall	.+376    	; 0x2206 <__fp_splitA>
    208e:	88 f0       	brcs	.+34     	; 0x20b2 <__fixunssfsi+0x26>
    2090:	9f 57       	subi	r25, 0x7F	; 127
    2092:	90 f0       	brcs	.+36     	; 0x20b8 <__fixunssfsi+0x2c>
    2094:	b9 2f       	mov	r27, r25
    2096:	99 27       	eor	r25, r25
    2098:	b7 51       	subi	r27, 0x17	; 23
    209a:	a0 f0       	brcs	.+40     	; 0x20c4 <__fixunssfsi+0x38>
    209c:	d1 f0       	breq	.+52     	; 0x20d2 <__fixunssfsi+0x46>
    209e:	66 0f       	add	r22, r22
    20a0:	77 1f       	adc	r23, r23
    20a2:	88 1f       	adc	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	1a f0       	brmi	.+6      	; 0x20ae <__fixunssfsi+0x22>
    20a8:	ba 95       	dec	r27
    20aa:	c9 f7       	brne	.-14     	; 0x209e <__fixunssfsi+0x12>
    20ac:	12 c0       	rjmp	.+36     	; 0x20d2 <__fixunssfsi+0x46>
    20ae:	b1 30       	cpi	r27, 0x01	; 1
    20b0:	81 f0       	breq	.+32     	; 0x20d2 <__fixunssfsi+0x46>
    20b2:	c3 d0       	rcall	.+390    	; 0x223a <__fp_zero>
    20b4:	b1 e0       	ldi	r27, 0x01	; 1
    20b6:	08 95       	ret
    20b8:	c0 c0       	rjmp	.+384    	; 0x223a <__fp_zero>
    20ba:	67 2f       	mov	r22, r23
    20bc:	78 2f       	mov	r23, r24
    20be:	88 27       	eor	r24, r24
    20c0:	b8 5f       	subi	r27, 0xF8	; 248
    20c2:	39 f0       	breq	.+14     	; 0x20d2 <__fixunssfsi+0x46>
    20c4:	b9 3f       	cpi	r27, 0xF9	; 249
    20c6:	cc f3       	brlt	.-14     	; 0x20ba <__fixunssfsi+0x2e>
    20c8:	86 95       	lsr	r24
    20ca:	77 95       	ror	r23
    20cc:	67 95       	ror	r22
    20ce:	b3 95       	inc	r27
    20d0:	d9 f7       	brne	.-10     	; 0x20c8 <__fixunssfsi+0x3c>
    20d2:	3e f4       	brtc	.+14     	; 0x20e2 <__fixunssfsi+0x56>
    20d4:	90 95       	com	r25
    20d6:	80 95       	com	r24
    20d8:	70 95       	com	r23
    20da:	61 95       	neg	r22
    20dc:	7f 4f       	sbci	r23, 0xFF	; 255
    20de:	8f 4f       	sbci	r24, 0xFF	; 255
    20e0:	9f 4f       	sbci	r25, 0xFF	; 255
    20e2:	08 95       	ret

000020e4 <__floatunsisf>:
    20e4:	e8 94       	clt
    20e6:	09 c0       	rjmp	.+18     	; 0x20fa <__floatsisf+0x12>

000020e8 <__floatsisf>:
    20e8:	97 fb       	bst	r25, 7
    20ea:	3e f4       	brtc	.+14     	; 0x20fa <__floatsisf+0x12>
    20ec:	90 95       	com	r25
    20ee:	80 95       	com	r24
    20f0:	70 95       	com	r23
    20f2:	61 95       	neg	r22
    20f4:	7f 4f       	sbci	r23, 0xFF	; 255
    20f6:	8f 4f       	sbci	r24, 0xFF	; 255
    20f8:	9f 4f       	sbci	r25, 0xFF	; 255
    20fa:	99 23       	and	r25, r25
    20fc:	a9 f0       	breq	.+42     	; 0x2128 <__floatsisf+0x40>
    20fe:	f9 2f       	mov	r31, r25
    2100:	96 e9       	ldi	r25, 0x96	; 150
    2102:	bb 27       	eor	r27, r27
    2104:	93 95       	inc	r25
    2106:	f6 95       	lsr	r31
    2108:	87 95       	ror	r24
    210a:	77 95       	ror	r23
    210c:	67 95       	ror	r22
    210e:	b7 95       	ror	r27
    2110:	f1 11       	cpse	r31, r1
    2112:	f8 cf       	rjmp	.-16     	; 0x2104 <__floatsisf+0x1c>
    2114:	fa f4       	brpl	.+62     	; 0x2154 <__floatsisf+0x6c>
    2116:	bb 0f       	add	r27, r27
    2118:	11 f4       	brne	.+4      	; 0x211e <__floatsisf+0x36>
    211a:	60 ff       	sbrs	r22, 0
    211c:	1b c0       	rjmp	.+54     	; 0x2154 <__floatsisf+0x6c>
    211e:	6f 5f       	subi	r22, 0xFF	; 255
    2120:	7f 4f       	sbci	r23, 0xFF	; 255
    2122:	8f 4f       	sbci	r24, 0xFF	; 255
    2124:	9f 4f       	sbci	r25, 0xFF	; 255
    2126:	16 c0       	rjmp	.+44     	; 0x2154 <__floatsisf+0x6c>
    2128:	88 23       	and	r24, r24
    212a:	11 f0       	breq	.+4      	; 0x2130 <__floatsisf+0x48>
    212c:	96 e9       	ldi	r25, 0x96	; 150
    212e:	11 c0       	rjmp	.+34     	; 0x2152 <__floatsisf+0x6a>
    2130:	77 23       	and	r23, r23
    2132:	21 f0       	breq	.+8      	; 0x213c <__floatsisf+0x54>
    2134:	9e e8       	ldi	r25, 0x8E	; 142
    2136:	87 2f       	mov	r24, r23
    2138:	76 2f       	mov	r23, r22
    213a:	05 c0       	rjmp	.+10     	; 0x2146 <__floatsisf+0x5e>
    213c:	66 23       	and	r22, r22
    213e:	71 f0       	breq	.+28     	; 0x215c <__floatsisf+0x74>
    2140:	96 e8       	ldi	r25, 0x86	; 134
    2142:	86 2f       	mov	r24, r22
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	60 e0       	ldi	r22, 0x00	; 0
    2148:	2a f0       	brmi	.+10     	; 0x2154 <__floatsisf+0x6c>
    214a:	9a 95       	dec	r25
    214c:	66 0f       	add	r22, r22
    214e:	77 1f       	adc	r23, r23
    2150:	88 1f       	adc	r24, r24
    2152:	da f7       	brpl	.-10     	; 0x214a <__floatsisf+0x62>
    2154:	88 0f       	add	r24, r24
    2156:	96 95       	lsr	r25
    2158:	87 95       	ror	r24
    215a:	97 f9       	bld	r25, 7
    215c:	08 95       	ret

0000215e <__fp_cmp>:
    215e:	99 0f       	add	r25, r25
    2160:	00 08       	sbc	r0, r0
    2162:	55 0f       	add	r21, r21
    2164:	aa 0b       	sbc	r26, r26
    2166:	e0 e8       	ldi	r30, 0x80	; 128
    2168:	fe ef       	ldi	r31, 0xFE	; 254
    216a:	16 16       	cp	r1, r22
    216c:	17 06       	cpc	r1, r23
    216e:	e8 07       	cpc	r30, r24
    2170:	f9 07       	cpc	r31, r25
    2172:	c0 f0       	brcs	.+48     	; 0x21a4 <__fp_cmp+0x46>
    2174:	12 16       	cp	r1, r18
    2176:	13 06       	cpc	r1, r19
    2178:	e4 07       	cpc	r30, r20
    217a:	f5 07       	cpc	r31, r21
    217c:	98 f0       	brcs	.+38     	; 0x21a4 <__fp_cmp+0x46>
    217e:	62 1b       	sub	r22, r18
    2180:	73 0b       	sbc	r23, r19
    2182:	84 0b       	sbc	r24, r20
    2184:	95 0b       	sbc	r25, r21
    2186:	39 f4       	brne	.+14     	; 0x2196 <__fp_cmp+0x38>
    2188:	0a 26       	eor	r0, r26
    218a:	61 f0       	breq	.+24     	; 0x21a4 <__fp_cmp+0x46>
    218c:	23 2b       	or	r18, r19
    218e:	24 2b       	or	r18, r20
    2190:	25 2b       	or	r18, r21
    2192:	21 f4       	brne	.+8      	; 0x219c <__fp_cmp+0x3e>
    2194:	08 95       	ret
    2196:	0a 26       	eor	r0, r26
    2198:	09 f4       	brne	.+2      	; 0x219c <__fp_cmp+0x3e>
    219a:	a1 40       	sbci	r26, 0x01	; 1
    219c:	a6 95       	lsr	r26
    219e:	8f ef       	ldi	r24, 0xFF	; 255
    21a0:	81 1d       	adc	r24, r1
    21a2:	81 1d       	adc	r24, r1
    21a4:	08 95       	ret

000021a6 <__fp_inf>:
    21a6:	97 f9       	bld	r25, 7
    21a8:	9f 67       	ori	r25, 0x7F	; 127
    21aa:	80 e8       	ldi	r24, 0x80	; 128
    21ac:	70 e0       	ldi	r23, 0x00	; 0
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	08 95       	ret

000021b2 <__fp_nan>:
    21b2:	9f ef       	ldi	r25, 0xFF	; 255
    21b4:	80 ec       	ldi	r24, 0xC0	; 192
    21b6:	08 95       	ret

000021b8 <__fp_pscA>:
    21b8:	00 24       	eor	r0, r0
    21ba:	0a 94       	dec	r0
    21bc:	16 16       	cp	r1, r22
    21be:	17 06       	cpc	r1, r23
    21c0:	18 06       	cpc	r1, r24
    21c2:	09 06       	cpc	r0, r25
    21c4:	08 95       	ret

000021c6 <__fp_pscB>:
    21c6:	00 24       	eor	r0, r0
    21c8:	0a 94       	dec	r0
    21ca:	12 16       	cp	r1, r18
    21cc:	13 06       	cpc	r1, r19
    21ce:	14 06       	cpc	r1, r20
    21d0:	05 06       	cpc	r0, r21
    21d2:	08 95       	ret

000021d4 <__fp_round>:
    21d4:	09 2e       	mov	r0, r25
    21d6:	03 94       	inc	r0
    21d8:	00 0c       	add	r0, r0
    21da:	11 f4       	brne	.+4      	; 0x21e0 <__fp_round+0xc>
    21dc:	88 23       	and	r24, r24
    21de:	52 f0       	brmi	.+20     	; 0x21f4 <__fp_round+0x20>
    21e0:	bb 0f       	add	r27, r27
    21e2:	40 f4       	brcc	.+16     	; 0x21f4 <__fp_round+0x20>
    21e4:	bf 2b       	or	r27, r31
    21e6:	11 f4       	brne	.+4      	; 0x21ec <__fp_round+0x18>
    21e8:	60 ff       	sbrs	r22, 0
    21ea:	04 c0       	rjmp	.+8      	; 0x21f4 <__fp_round+0x20>
    21ec:	6f 5f       	subi	r22, 0xFF	; 255
    21ee:	7f 4f       	sbci	r23, 0xFF	; 255
    21f0:	8f 4f       	sbci	r24, 0xFF	; 255
    21f2:	9f 4f       	sbci	r25, 0xFF	; 255
    21f4:	08 95       	ret

000021f6 <__fp_split3>:
    21f6:	57 fd       	sbrc	r21, 7
    21f8:	90 58       	subi	r25, 0x80	; 128
    21fa:	44 0f       	add	r20, r20
    21fc:	55 1f       	adc	r21, r21
    21fe:	59 f0       	breq	.+22     	; 0x2216 <__fp_splitA+0x10>
    2200:	5f 3f       	cpi	r21, 0xFF	; 255
    2202:	71 f0       	breq	.+28     	; 0x2220 <__fp_splitA+0x1a>
    2204:	47 95       	ror	r20

00002206 <__fp_splitA>:
    2206:	88 0f       	add	r24, r24
    2208:	97 fb       	bst	r25, 7
    220a:	99 1f       	adc	r25, r25
    220c:	61 f0       	breq	.+24     	; 0x2226 <__fp_splitA+0x20>
    220e:	9f 3f       	cpi	r25, 0xFF	; 255
    2210:	79 f0       	breq	.+30     	; 0x2230 <__fp_splitA+0x2a>
    2212:	87 95       	ror	r24
    2214:	08 95       	ret
    2216:	12 16       	cp	r1, r18
    2218:	13 06       	cpc	r1, r19
    221a:	14 06       	cpc	r1, r20
    221c:	55 1f       	adc	r21, r21
    221e:	f2 cf       	rjmp	.-28     	; 0x2204 <__fp_split3+0xe>
    2220:	46 95       	lsr	r20
    2222:	f1 df       	rcall	.-30     	; 0x2206 <__fp_splitA>
    2224:	08 c0       	rjmp	.+16     	; 0x2236 <__fp_splitA+0x30>
    2226:	16 16       	cp	r1, r22
    2228:	17 06       	cpc	r1, r23
    222a:	18 06       	cpc	r1, r24
    222c:	99 1f       	adc	r25, r25
    222e:	f1 cf       	rjmp	.-30     	; 0x2212 <__fp_splitA+0xc>
    2230:	86 95       	lsr	r24
    2232:	71 05       	cpc	r23, r1
    2234:	61 05       	cpc	r22, r1
    2236:	08 94       	sec
    2238:	08 95       	ret

0000223a <__fp_zero>:
    223a:	e8 94       	clt

0000223c <__fp_szero>:
    223c:	bb 27       	eor	r27, r27
    223e:	66 27       	eor	r22, r22
    2240:	77 27       	eor	r23, r23
    2242:	cb 01       	movw	r24, r22
    2244:	97 f9       	bld	r25, 7
    2246:	08 95       	ret

00002248 <__gesf2>:
    2248:	8a df       	rcall	.-236    	; 0x215e <__fp_cmp>
    224a:	08 f4       	brcc	.+2      	; 0x224e <__gesf2+0x6>
    224c:	8f ef       	ldi	r24, 0xFF	; 255
    224e:	08 95       	ret

00002250 <__mulsf3>:
    2250:	0b d0       	rcall	.+22     	; 0x2268 <__mulsf3x>
    2252:	c0 cf       	rjmp	.-128    	; 0x21d4 <__fp_round>
    2254:	b1 df       	rcall	.-158    	; 0x21b8 <__fp_pscA>
    2256:	28 f0       	brcs	.+10     	; 0x2262 <__mulsf3+0x12>
    2258:	b6 df       	rcall	.-148    	; 0x21c6 <__fp_pscB>
    225a:	18 f0       	brcs	.+6      	; 0x2262 <__mulsf3+0x12>
    225c:	95 23       	and	r25, r21
    225e:	09 f0       	breq	.+2      	; 0x2262 <__mulsf3+0x12>
    2260:	a2 cf       	rjmp	.-188    	; 0x21a6 <__fp_inf>
    2262:	a7 cf       	rjmp	.-178    	; 0x21b2 <__fp_nan>
    2264:	11 24       	eor	r1, r1
    2266:	ea cf       	rjmp	.-44     	; 0x223c <__fp_szero>

00002268 <__mulsf3x>:
    2268:	c6 df       	rcall	.-116    	; 0x21f6 <__fp_split3>
    226a:	a0 f3       	brcs	.-24     	; 0x2254 <__mulsf3+0x4>

0000226c <__mulsf3_pse>:
    226c:	95 9f       	mul	r25, r21
    226e:	d1 f3       	breq	.-12     	; 0x2264 <__mulsf3+0x14>
    2270:	95 0f       	add	r25, r21
    2272:	50 e0       	ldi	r21, 0x00	; 0
    2274:	55 1f       	adc	r21, r21
    2276:	62 9f       	mul	r22, r18
    2278:	f0 01       	movw	r30, r0
    227a:	72 9f       	mul	r23, r18
    227c:	bb 27       	eor	r27, r27
    227e:	f0 0d       	add	r31, r0
    2280:	b1 1d       	adc	r27, r1
    2282:	63 9f       	mul	r22, r19
    2284:	aa 27       	eor	r26, r26
    2286:	f0 0d       	add	r31, r0
    2288:	b1 1d       	adc	r27, r1
    228a:	aa 1f       	adc	r26, r26
    228c:	64 9f       	mul	r22, r20
    228e:	66 27       	eor	r22, r22
    2290:	b0 0d       	add	r27, r0
    2292:	a1 1d       	adc	r26, r1
    2294:	66 1f       	adc	r22, r22
    2296:	82 9f       	mul	r24, r18
    2298:	22 27       	eor	r18, r18
    229a:	b0 0d       	add	r27, r0
    229c:	a1 1d       	adc	r26, r1
    229e:	62 1f       	adc	r22, r18
    22a0:	73 9f       	mul	r23, r19
    22a2:	b0 0d       	add	r27, r0
    22a4:	a1 1d       	adc	r26, r1
    22a6:	62 1f       	adc	r22, r18
    22a8:	83 9f       	mul	r24, r19
    22aa:	a0 0d       	add	r26, r0
    22ac:	61 1d       	adc	r22, r1
    22ae:	22 1f       	adc	r18, r18
    22b0:	74 9f       	mul	r23, r20
    22b2:	33 27       	eor	r19, r19
    22b4:	a0 0d       	add	r26, r0
    22b6:	61 1d       	adc	r22, r1
    22b8:	23 1f       	adc	r18, r19
    22ba:	84 9f       	mul	r24, r20
    22bc:	60 0d       	add	r22, r0
    22be:	21 1d       	adc	r18, r1
    22c0:	82 2f       	mov	r24, r18
    22c2:	76 2f       	mov	r23, r22
    22c4:	6a 2f       	mov	r22, r26
    22c6:	11 24       	eor	r1, r1
    22c8:	9f 57       	subi	r25, 0x7F	; 127
    22ca:	50 40       	sbci	r21, 0x00	; 0
    22cc:	8a f0       	brmi	.+34     	; 0x22f0 <__mulsf3_pse+0x84>
    22ce:	e1 f0       	breq	.+56     	; 0x2308 <__mulsf3_pse+0x9c>
    22d0:	88 23       	and	r24, r24
    22d2:	4a f0       	brmi	.+18     	; 0x22e6 <__mulsf3_pse+0x7a>
    22d4:	ee 0f       	add	r30, r30
    22d6:	ff 1f       	adc	r31, r31
    22d8:	bb 1f       	adc	r27, r27
    22da:	66 1f       	adc	r22, r22
    22dc:	77 1f       	adc	r23, r23
    22de:	88 1f       	adc	r24, r24
    22e0:	91 50       	subi	r25, 0x01	; 1
    22e2:	50 40       	sbci	r21, 0x00	; 0
    22e4:	a9 f7       	brne	.-22     	; 0x22d0 <__mulsf3_pse+0x64>
    22e6:	9e 3f       	cpi	r25, 0xFE	; 254
    22e8:	51 05       	cpc	r21, r1
    22ea:	70 f0       	brcs	.+28     	; 0x2308 <__mulsf3_pse+0x9c>
    22ec:	5c cf       	rjmp	.-328    	; 0x21a6 <__fp_inf>
    22ee:	a6 cf       	rjmp	.-180    	; 0x223c <__fp_szero>
    22f0:	5f 3f       	cpi	r21, 0xFF	; 255
    22f2:	ec f3       	brlt	.-6      	; 0x22ee <__mulsf3_pse+0x82>
    22f4:	98 3e       	cpi	r25, 0xE8	; 232
    22f6:	dc f3       	brlt	.-10     	; 0x22ee <__mulsf3_pse+0x82>
    22f8:	86 95       	lsr	r24
    22fa:	77 95       	ror	r23
    22fc:	67 95       	ror	r22
    22fe:	b7 95       	ror	r27
    2300:	f7 95       	ror	r31
    2302:	e7 95       	ror	r30
    2304:	9f 5f       	subi	r25, 0xFF	; 255
    2306:	c1 f7       	brne	.-16     	; 0x22f8 <__mulsf3_pse+0x8c>
    2308:	fe 2b       	or	r31, r30
    230a:	88 0f       	add	r24, r24
    230c:	91 1d       	adc	r25, r1
    230e:	96 95       	lsr	r25
    2310:	87 95       	ror	r24
    2312:	97 f9       	bld	r25, 7
    2314:	08 95       	ret
    2316:	11 f4       	brne	.+4      	; 0x231c <__mulsf3_pse+0xb0>
    2318:	0e f4       	brtc	.+2      	; 0x231c <__mulsf3_pse+0xb0>
    231a:	4b cf       	rjmp	.-362    	; 0x21b2 <__fp_nan>
    231c:	41 c0       	rjmp	.+130    	; 0x23a0 <__fp_mpack>

0000231e <sqrt>:
    231e:	73 df       	rcall	.-282    	; 0x2206 <__fp_splitA>
    2320:	d0 f3       	brcs	.-12     	; 0x2316 <__mulsf3_pse+0xaa>
    2322:	99 23       	and	r25, r25
    2324:	d9 f3       	breq	.-10     	; 0x231c <__mulsf3_pse+0xb0>
    2326:	ce f3       	brts	.-14     	; 0x231a <__mulsf3_pse+0xae>
    2328:	9f 57       	subi	r25, 0x7F	; 127
    232a:	55 0b       	sbc	r21, r21
    232c:	87 ff       	sbrs	r24, 7
    232e:	46 d0       	rcall	.+140    	; 0x23bc <__fp_norm2>
    2330:	00 24       	eor	r0, r0
    2332:	a0 e6       	ldi	r26, 0x60	; 96
    2334:	40 ea       	ldi	r20, 0xA0	; 160
    2336:	90 01       	movw	r18, r0
    2338:	80 58       	subi	r24, 0x80	; 128
    233a:	56 95       	lsr	r21
    233c:	97 95       	ror	r25
    233e:	28 f4       	brcc	.+10     	; 0x234a <sqrt+0x2c>
    2340:	80 5c       	subi	r24, 0xC0	; 192
    2342:	66 0f       	add	r22, r22
    2344:	77 1f       	adc	r23, r23
    2346:	88 1f       	adc	r24, r24
    2348:	20 f0       	brcs	.+8      	; 0x2352 <sqrt+0x34>
    234a:	26 17       	cp	r18, r22
    234c:	37 07       	cpc	r19, r23
    234e:	48 07       	cpc	r20, r24
    2350:	30 f4       	brcc	.+12     	; 0x235e <sqrt+0x40>
    2352:	62 1b       	sub	r22, r18
    2354:	73 0b       	sbc	r23, r19
    2356:	84 0b       	sbc	r24, r20
    2358:	20 29       	or	r18, r0
    235a:	31 29       	or	r19, r1
    235c:	4a 2b       	or	r20, r26
    235e:	a6 95       	lsr	r26
    2360:	17 94       	ror	r1
    2362:	07 94       	ror	r0
    2364:	20 25       	eor	r18, r0
    2366:	31 25       	eor	r19, r1
    2368:	4a 27       	eor	r20, r26
    236a:	58 f7       	brcc	.-42     	; 0x2342 <sqrt+0x24>
    236c:	66 0f       	add	r22, r22
    236e:	77 1f       	adc	r23, r23
    2370:	88 1f       	adc	r24, r24
    2372:	20 f0       	brcs	.+8      	; 0x237c <sqrt+0x5e>
    2374:	26 17       	cp	r18, r22
    2376:	37 07       	cpc	r19, r23
    2378:	48 07       	cpc	r20, r24
    237a:	30 f4       	brcc	.+12     	; 0x2388 <sqrt+0x6a>
    237c:	62 0b       	sbc	r22, r18
    237e:	73 0b       	sbc	r23, r19
    2380:	84 0b       	sbc	r24, r20
    2382:	20 0d       	add	r18, r0
    2384:	31 1d       	adc	r19, r1
    2386:	41 1d       	adc	r20, r1
    2388:	a0 95       	com	r26
    238a:	81 f7       	brne	.-32     	; 0x236c <sqrt+0x4e>
    238c:	b9 01       	movw	r22, r18
    238e:	84 2f       	mov	r24, r20
    2390:	91 58       	subi	r25, 0x81	; 129
    2392:	88 0f       	add	r24, r24
    2394:	96 95       	lsr	r25
    2396:	87 95       	ror	r24
    2398:	08 95       	ret

0000239a <square>:
    239a:	9b 01       	movw	r18, r22
    239c:	ac 01       	movw	r20, r24
    239e:	58 cf       	rjmp	.-336    	; 0x2250 <__mulsf3>

000023a0 <__fp_mpack>:
    23a0:	9f 3f       	cpi	r25, 0xFF	; 255
    23a2:	31 f0       	breq	.+12     	; 0x23b0 <__fp_mpack_finite+0xc>

000023a4 <__fp_mpack_finite>:
    23a4:	91 50       	subi	r25, 0x01	; 1
    23a6:	20 f4       	brcc	.+8      	; 0x23b0 <__fp_mpack_finite+0xc>
    23a8:	87 95       	ror	r24
    23aa:	77 95       	ror	r23
    23ac:	67 95       	ror	r22
    23ae:	b7 95       	ror	r27
    23b0:	88 0f       	add	r24, r24
    23b2:	91 1d       	adc	r25, r1
    23b4:	96 95       	lsr	r25
    23b6:	87 95       	ror	r24
    23b8:	97 f9       	bld	r25, 7
    23ba:	08 95       	ret

000023bc <__fp_norm2>:
    23bc:	91 50       	subi	r25, 0x01	; 1
    23be:	50 40       	sbci	r21, 0x00	; 0
    23c0:	66 0f       	add	r22, r22
    23c2:	77 1f       	adc	r23, r23
    23c4:	88 1f       	adc	r24, r24
    23c6:	d2 f7       	brpl	.-12     	; 0x23bc <__fp_norm2>
    23c8:	08 95       	ret

000023ca <__udivmodsi4>:
    23ca:	a1 e2       	ldi	r26, 0x21	; 33
    23cc:	1a 2e       	mov	r1, r26
    23ce:	aa 1b       	sub	r26, r26
    23d0:	bb 1b       	sub	r27, r27
    23d2:	fd 01       	movw	r30, r26
    23d4:	0d c0       	rjmp	.+26     	; 0x23f0 <__udivmodsi4_ep>

000023d6 <__udivmodsi4_loop>:
    23d6:	aa 1f       	adc	r26, r26
    23d8:	bb 1f       	adc	r27, r27
    23da:	ee 1f       	adc	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	a2 17       	cp	r26, r18
    23e0:	b3 07       	cpc	r27, r19
    23e2:	e4 07       	cpc	r30, r20
    23e4:	f5 07       	cpc	r31, r21
    23e6:	20 f0       	brcs	.+8      	; 0x23f0 <__udivmodsi4_ep>
    23e8:	a2 1b       	sub	r26, r18
    23ea:	b3 0b       	sbc	r27, r19
    23ec:	e4 0b       	sbc	r30, r20
    23ee:	f5 0b       	sbc	r31, r21

000023f0 <__udivmodsi4_ep>:
    23f0:	66 1f       	adc	r22, r22
    23f2:	77 1f       	adc	r23, r23
    23f4:	88 1f       	adc	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	1a 94       	dec	r1
    23fa:	69 f7       	brne	.-38     	; 0x23d6 <__udivmodsi4_loop>
    23fc:	60 95       	com	r22
    23fe:	70 95       	com	r23
    2400:	80 95       	com	r24
    2402:	90 95       	com	r25
    2404:	9b 01       	movw	r18, r22
    2406:	ac 01       	movw	r20, r24
    2408:	bd 01       	movw	r22, r26
    240a:	cf 01       	movw	r24, r30
    240c:	08 95       	ret

0000240e <memset>:
    240e:	dc 01       	movw	r26, r24
    2410:	01 c0       	rjmp	.+2      	; 0x2414 <memset+0x6>
    2412:	6d 93       	st	X+, r22
    2414:	41 50       	subi	r20, 0x01	; 1
    2416:	50 40       	sbci	r21, 0x00	; 0
    2418:	e0 f7       	brcc	.-8      	; 0x2412 <memset+0x4>
    241a:	08 95       	ret

0000241c <_exit>:
    241c:	f8 94       	cli

0000241e <__stop_program>:
    241e:	ff cf       	rjmp	.-2      	; 0x241e <__stop_program>
