
tinyg_tc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000002c5  00800100  00800100  00002338  2**0
                  ALLOC
  2 .debug_aranges 000000e0  00000000  00000000  00002338  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000515  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001ad9  00000000  00000000  0000292d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000007ce  00000000  00000000  00004406  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000011cd  00000000  00000000  00004bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000420  00000000  00000000  00005da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000a6f  00000000  00000000  000061c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
       4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__vector_16>
      44:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__vector_17>
      48:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__vector_18>
      4c:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__vector_19>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>

00000068 <__c.1893>:
      68:	0a 44 65 76 69 63 65 20 49 6e 69 74 69 61 6c 69     .Device Initiali
      78:	7a 65 64 0a 00                                      zed..

0000007d <__c.1901>:
      7d:	0a 00                                               ..

0000007f <__c.1899>:
      7f:	20 20 50 49 44 3a 20 00                               PID: .

00000087 <__c.1897>:
      87:	54 65 6d 70 3a 20 00                                Temp: .

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d8 e0       	ldi	r29, 0x08	; 8
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_clear_bss>:
      9a:	13 e0       	ldi	r17, 0x03	; 3
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	a5 3c       	cpi	r26, 0xC5	; 197
      a6:	b1 07       	cpc	r27, r17
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
      aa:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
      ae:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <main>:
 *
 *	Device and Kinen initialization
 *	Main loop handler
 */
int main(void)
{
      b6:	df 93       	push	r29
      b8:	cf 93       	push	r28
      ba:	cd b7       	in	r28, 0x3d	; 61
      bc:	de b7       	in	r29, 0x3e	; 62
	cli();						// initializations
      be:	f8 94       	cli
	kinen_init();				// do this first
      c0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <kinen_init>
	device_init();				// handles all the low-level device peripheral inits
      c4:	0e 94 78 00 	call	0xf0	; 0xf0 <device_init>

	serial_init(BAUD_RATE);
      c8:	60 e8       	ldi	r22, 0x80	; 128
      ca:	75 e2       	ldi	r23, 0x25	; 37
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	0e 94 85 0b 	call	0x170a	; 0x170a <serial_init>

	heater_init();				// setup the heater module and subordinate functions
      d4:	0e 94 9f 00 	call	0x13e	; 0x13e <heater_init>
	sei(); 						// enable interrupts
      d8:	78 94       	sei

	UNIT_TESTS;					// uncomment __UNIT_TEST_TC to enable unit tests

//	while (true) { printPgmString(PSTR("Test..."));}

	heater_on(100);				// ++++ turn heater on for testing
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	88 ec       	ldi	r24, 0xC8	; 200
      e0:	92 e4       	ldi	r25, 0x42	; 66
      e2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <heater_on>
	rpt_initialized();			// send initalization string
      e6:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <rpt_initialized>

	while (true) {				// go to the controller loop and never return
		_controller();
      ea:	0e 94 92 00 	call	0x124	; 0x124 <_controller>
      ee:	fd cf       	rjmp	.-6      	; 0xea <main+0x34>

000000f0 <device_init>:

/*
 * Device Init 
 */
void device_init(void)
{
      f0:	df 93       	push	r29
      f2:	cf 93       	push	r28
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
	DDRB = PORTB_DIR;			// initialize all ports for proper IO function
      f8:	e4 e2       	ldi	r30, 0x24	; 36
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 e1       	ldi	r24, 0x10	; 16
      fe:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
     100:	e7 e2       	ldi	r30, 0x27	; 39
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
     106:	ea e2       	ldi	r30, 0x2A	; 42
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	8c e0       	ldi	r24, 0x0C	; 12
     10c:	80 83       	st	Z, r24

	tick_init();
     10e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <tick_init>
	adc_init();
     112:	0e 94 bd 06 	call	0xd7a	; 0xd7a <adc_init>
	pwm_init();
     116:	0e 94 fd 06 	call	0xdfa	; 0xdfa <pwm_init>
	led_off();					// put off the red light [~Sting, 1978]
     11a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <led_off>
}
     11e:	cf 91       	pop	r28
     120:	df 91       	pop	r29
     122:	08 95       	ret

00000124 <_controller>:
 *	start of the list. For any other status code exceution continues down the list
 */

#define	DISPATCH(func) if (func == SC_EAGAIN) return; 
static void _controller()
{
     124:	df 93       	push	r29
     126:	cf 93       	push	r28
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
	DISPATCH(kinen_callback());		// intercept low-level communication events
     12c:	0e 94 6d 09 	call	0x12da	; 0x12da <kinen_callback>
     130:	82 30       	cpi	r24, 0x02	; 2
     132:	11 f0       	breq	.+4      	; 0x138 <_controller+0x14>
	DISPATCH(tick_callback());		// regular interval timer clock handler (ticks)
     134:	0e 94 9b 08 	call	0x1136	; 0x1136 <tick_callback>
}
     138:	cf 91       	pop	r28
     13a:	df 91       	pop	r29
     13c:	08 95       	ret

0000013e <heater_init>:
 * heater_off()	 - turn heater off	
 * heater_callback() - 100ms timed loop for heater control
 */

void heater_init()
{ 
     13e:	df 93       	push	r29
     140:	cf 93       	push	r28
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
	// initialize heater, start PID and PWM
	memset(&heater, 0, sizeof(Heater));
     146:	87 e0       	ldi	r24, 0x07	; 7
     148:	91 e0       	ldi	r25, 0x01	; 1
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	70 e0       	ldi	r23, 0x00	; 0
     14e:	41 e2       	ldi	r20, 0x21	; 33
     150:	50 e0       	ldi	r21, 0x00	; 0
     152:	0e 94 59 11 	call	0x22b2	; 0x22b2 <memset>
	heater.ambient_timeout = HEATER_AMBIENT_TIMEOUT;
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	a4 eb       	ldi	r26, 0xB4	; 180
     15c:	b2 e4       	ldi	r27, 0x42	; 66
     15e:	80 93 18 01 	sts	0x0118, r24
     162:	90 93 19 01 	sts	0x0119, r25
     166:	a0 93 1a 01 	sts	0x011A, r26
     16a:	b0 93 1b 01 	sts	0x011B, r27
	heater.regulation_timeout = HEATER_REGULATION_TIMEOUT;
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	a6 e9       	ldi	r26, 0x96	; 150
     174:	b3 e4       	ldi	r27, 0x43	; 67
     176:	80 93 1c 01 	sts	0x011C, r24
     17a:	90 93 1d 01 	sts	0x011D, r25
     17e:	a0 93 1e 01 	sts	0x011E, r26
     182:	b0 93 1f 01 	sts	0x011F, r27
	heater.ambient_temperature = HEATER_AMBIENT_TEMPERATURE;
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	a0 e2       	ldi	r26, 0x20	; 32
     18c:	b2 e4       	ldi	r27, 0x42	; 66
     18e:	80 93 20 01 	sts	0x0120, r24
     192:	90 93 21 01 	sts	0x0121, r25
     196:	a0 93 22 01 	sts	0x0122, r26
     19a:	b0 93 23 01 	sts	0x0123, r27
	heater.overheat_temperature = HEATER_OVERHEAT_TEMPERATURE;
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	a6 e9       	ldi	r26, 0x96	; 150
     1a4:	b3 e4       	ldi	r27, 0x43	; 67
     1a6:	80 93 24 01 	sts	0x0124, r24
     1aa:	90 93 25 01 	sts	0x0125, r25
     1ae:	a0 93 26 01 	sts	0x0126, r26
     1b2:	b0 93 27 01 	sts	0x0127, r27

	// initialize lower-level functions used by heater
	// note: PWM and ADC are initialized as part of the device init
	sensor_init();					// setup the temperature sensor module
     1b6:	0e 94 9a 04 	call	0x934	; 0x934 <sensor_init>
	pid_init();
     1ba:	0e 94 46 02 	call	0x48c	; 0x48c <pid_init>
}
     1be:	cf 91       	pop	r28
     1c0:	df 91       	pop	r29
     1c2:	08 95       	ret

000001c4 <heater_on>:

void heater_on(double setpoint)
{
     1c4:	df 93       	push	r29
     1c6:	cf 93       	push	r28
     1c8:	00 d0       	rcall	.+0      	; 0x1ca <heater_on+0x6>
     1ca:	00 d0       	rcall	.+0      	; 0x1cc <heater_on+0x8>
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
     1d0:	69 83       	std	Y+1, r22	; 0x01
     1d2:	7a 83       	std	Y+2, r23	; 0x02
     1d4:	8b 83       	std	Y+3, r24	; 0x03
     1d6:	9c 83       	std	Y+4, r25	; 0x04
	// no action if heater is already on
	if ((heater.state == HEATER_HEATING) || (heater.state == HEATER_REGULATED)) {
     1d8:	80 91 07 01 	lds	r24, 0x0107
     1dc:	82 30       	cpi	r24, 0x02	; 2
     1de:	31 f1       	breq	.+76     	; 0x22c <heater_on+0x68>
     1e0:	80 91 07 01 	lds	r24, 0x0107
     1e4:	83 30       	cpi	r24, 0x03	; 3
     1e6:	11 f1       	breq	.+68     	; 0x22c <heater_on+0x68>
		return;
	}
	// turn on lower level functions
	sensor_on();					// enable the sensor
     1e8:	0e 94 e5 04 	call	0x9ca	; 0x9ca <sensor_on>
	sensor_start_reading();			// now start a reading
     1ec:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <sensor_start_reading>
	pid_reset();
     1f0:	0e 94 a0 02 	call	0x540	; 0x540 <pid_reset>
	pwm_on(PWM_FREQUENCY, 0);		// duty cycle will be set by PID loop
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	8a e7       	ldi	r24, 0x7A	; 122
     1fa:	94 e4       	ldi	r25, 0x44	; 68
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	40 e0       	ldi	r20, 0x00	; 0
     202:	50 e0       	ldi	r21, 0x00	; 0
     204:	0e 94 2f 07 	call	0xe5e	; 0xe5e <pwm_on>
	heater.setpoint = setpoint;
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	9a 81       	ldd	r25, Y+2	; 0x02
     20c:	ab 81       	ldd	r26, Y+3	; 0x03
     20e:	bc 81       	ldd	r27, Y+4	; 0x04
     210:	80 93 10 01 	sts	0x0110, r24
     214:	90 93 11 01 	sts	0x0111, r25
     218:	a0 93 12 01 	sts	0x0112, r26
     21c:	b0 93 13 01 	sts	0x0113, r27
	heater.regulation_count = HEATER_REGULATION_COUNT;
     220:	8a e0       	ldi	r24, 0x0A	; 10
     222:	80 93 0b 01 	sts	0x010B, r24
	heater.state = HEATER_HEATING;
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	80 93 07 01 	sts	0x0107, r24
}
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	cf 91       	pop	r28
     236:	df 91       	pop	r29
     238:	08 95       	ret

0000023a <heater_off>:

void heater_off(uint8_t state, uint8_t code) 
{
     23a:	df 93       	push	r29
     23c:	cf 93       	push	r28
     23e:	00 d0       	rcall	.+0      	; 0x240 <heater_off+0x6>
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	89 83       	std	Y+1, r24	; 0x01
     246:	6a 83       	std	Y+2, r22	; 0x02
	pwm_off();						// stop sending current to the heater
     248:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <pwm_off>
	sensor_off();					// stop taking readings
     24c:	0e 94 ef 04 	call	0x9de	; 0x9de <sensor_off>
	heater.state = state;
     250:	89 81       	ldd	r24, Y+1	; 0x01
     252:	80 93 07 01 	sts	0x0107, r24
	heater.code = code;
     256:	8a 81       	ldd	r24, Y+2	; 0x02
     258:	80 93 08 01 	sts	0x0108, r24
	led_off();
     25c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <led_off>
}
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	cf 91       	pop	r28
     266:	df 91       	pop	r29
     268:	08 95       	ret

0000026a <heater_callback>:

void heater_callback()
{
     26a:	df 93       	push	r29
     26c:	cf 93       	push	r28
     26e:	00 d0       	rcall	.+0      	; 0x270 <heater_callback+0x6>
     270:	00 d0       	rcall	.+0      	; 0x272 <heater_callback+0x8>
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
	// catch the no-op cases
	if ((heater.state == HEATER_OFF) || (heater.state == HEATER_SHUTDOWN)) { return;}
     276:	80 91 07 01 	lds	r24, 0x0107
     27a:	88 23       	and	r24, r24
     27c:	09 f4       	brne	.+2      	; 0x280 <heater_callback+0x16>
     27e:	ff c0       	rjmp	.+510    	; 0x47e <heater_callback+0x214>
     280:	80 91 07 01 	lds	r24, 0x0107
     284:	81 30       	cpi	r24, 0x01	; 1
     286:	09 f4       	brne	.+2      	; 0x28a <heater_callback+0x20>
     288:	fa c0       	rjmp	.+500    	; 0x47e <heater_callback+0x214>

	// get current temp or an error if there is no temperature reading
	if ((heater.temperature = sensor_get_temperature()) < ABSOLUTE_ZERO) { 
     28a:	0e 94 16 05 	call	0xa2c	; 0xa2c <sensor_get_temperature>
     28e:	dc 01       	movw	r26, r24
     290:	cb 01       	movw	r24, r22
     292:	80 93 0c 01 	sts	0x010C, r24
     296:	90 93 0d 01 	sts	0x010D, r25
     29a:	a0 93 0e 01 	sts	0x010E, r26
     29e:	b0 93 0f 01 	sts	0x010F, r27
     2a2:	80 91 0c 01 	lds	r24, 0x010C
     2a6:	90 91 0d 01 	lds	r25, 0x010D
     2aa:	a0 91 0e 01 	lds	r26, 0x010E
     2ae:	b0 91 0f 01 	lds	r27, 0x010F
     2b2:	bc 01       	movw	r22, r24
     2b4:	cd 01       	movw	r24, r26
     2b6:	23 e3       	ldi	r18, 0x33	; 51
     2b8:	33 e9       	ldi	r19, 0x93	; 147
     2ba:	48 e8       	ldi	r20, 0x88	; 136
     2bc:	53 ec       	ldi	r21, 0xC3	; 195
     2be:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__cmpsf2>
     2c2:	88 23       	and	r24, r24
     2c4:	0c f4       	brge	.+2      	; 0x2c8 <heater_callback+0x5e>
     2c6:	db c0       	rjmp	.+438    	; 0x47e <heater_callback+0x214>
		return;
	}
	if (heater.temperature > heater.overheat_temperature) {
     2c8:	80 91 0c 01 	lds	r24, 0x010C
     2cc:	90 91 0d 01 	lds	r25, 0x010D
     2d0:	a0 91 0e 01 	lds	r26, 0x010E
     2d4:	b0 91 0f 01 	lds	r27, 0x010F
     2d8:	20 91 24 01 	lds	r18, 0x0124
     2dc:	30 91 25 01 	lds	r19, 0x0125
     2e0:	40 91 26 01 	lds	r20, 0x0126
     2e4:	50 91 27 01 	lds	r21, 0x0127
     2e8:	bc 01       	movw	r22, r24
     2ea:	cd 01       	movw	r24, r26
     2ec:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     2f0:	18 16       	cp	r1, r24
     2f2:	2c f4       	brge	.+10     	; 0x2fe <heater_callback+0x94>
		heater_off(HEATER_SHUTDOWN, HEATER_OVERHEATED);
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	63 e0       	ldi	r22, 0x03	; 3
     2f8:	0e 94 1d 01 	call	0x23a	; 0x23a <heater_off>
     2fc:	c0 c0       	rjmp	.+384    	; 0x47e <heater_callback+0x214>
		return;
	}
	sensor_start_reading();		// start next reading
     2fe:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <sensor_start_reading>

	// calculate the next PWM level via the PID
	double duty_cycle = pid_calculate(heater.setpoint, heater.temperature);
     302:	80 91 10 01 	lds	r24, 0x0110
     306:	90 91 11 01 	lds	r25, 0x0111
     30a:	a0 91 12 01 	lds	r26, 0x0112
     30e:	b0 91 13 01 	lds	r27, 0x0113
     312:	20 91 0c 01 	lds	r18, 0x010C
     316:	30 91 0d 01 	lds	r19, 0x010D
     31a:	40 91 0e 01 	lds	r20, 0x010E
     31e:	50 91 0f 01 	lds	r21, 0x010F
     322:	bc 01       	movw	r22, r24
     324:	cd 01       	movw	r24, r26
     326:	0e 94 cb 02 	call	0x596	; 0x596 <pid_calculate>
     32a:	dc 01       	movw	r26, r24
     32c:	cb 01       	movw	r24, r22
     32e:	89 83       	std	Y+1, r24	; 0x01
     330:	9a 83       	std	Y+2, r25	; 0x02
     332:	ab 83       	std	Y+3, r26	; 0x03
     334:	bc 83       	std	Y+4, r27	; 0x04
	pwm_set_duty(duty_cycle);
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	ab 81       	ldd	r26, Y+3	; 0x03
     33c:	bc 81       	ldd	r27, Y+4	; 0x04
     33e:	bc 01       	movw	r22, r24
     340:	cd 01       	movw	r24, r26
     342:	0e 94 d7 07 	call	0xfae	; 0xfae <pwm_set_duty>
	rpt_heater_readout();
     346:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <rpt_heater_readout>

	// handle HEATER exceptions
	if (heater.state == HEATER_HEATING) {
     34a:	80 91 07 01 	lds	r24, 0x0107
     34e:	82 30       	cpi	r24, 0x02	; 2
     350:	09 f0       	breq	.+2      	; 0x354 <heater_callback+0xea>
     352:	7c c0       	rjmp	.+248    	; 0x44c <heater_callback+0x1e2>
		heater.regulation_timer += HEATER_TICK_SECONDS;
     354:	80 91 14 01 	lds	r24, 0x0114
     358:	90 91 15 01 	lds	r25, 0x0115
     35c:	a0 91 16 01 	lds	r26, 0x0116
     360:	b0 91 17 01 	lds	r27, 0x0117
     364:	bc 01       	movw	r22, r24
     366:	cd 01       	movw	r24, r26
     368:	2d ec       	ldi	r18, 0xCD	; 205
     36a:	3c ec       	ldi	r19, 0xCC	; 204
     36c:	4c ec       	ldi	r20, 0xCC	; 204
     36e:	5d e3       	ldi	r21, 0x3D	; 61
     370:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__addsf3>
     374:	dc 01       	movw	r26, r24
     376:	cb 01       	movw	r24, r22
     378:	80 93 14 01 	sts	0x0114, r24
     37c:	90 93 15 01 	sts	0x0115, r25
     380:	a0 93 16 01 	sts	0x0116, r26
     384:	b0 93 17 01 	sts	0x0117, r27

		if ((heater.temperature < heater.ambient_temperature) &&
     388:	80 91 0c 01 	lds	r24, 0x010C
     38c:	90 91 0d 01 	lds	r25, 0x010D
     390:	a0 91 0e 01 	lds	r26, 0x010E
     394:	b0 91 0f 01 	lds	r27, 0x010F
     398:	20 91 20 01 	lds	r18, 0x0120
     39c:	30 91 21 01 	lds	r19, 0x0121
     3a0:	40 91 22 01 	lds	r20, 0x0122
     3a4:	50 91 23 01 	lds	r21, 0x0123
     3a8:	bc 01       	movw	r22, r24
     3aa:	cd 01       	movw	r24, r26
     3ac:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__cmpsf2>
     3b0:	88 23       	and	r24, r24
     3b2:	dc f4       	brge	.+54     	; 0x3ea <heater_callback+0x180>
     3b4:	80 91 14 01 	lds	r24, 0x0114
     3b8:	90 91 15 01 	lds	r25, 0x0115
     3bc:	a0 91 16 01 	lds	r26, 0x0116
     3c0:	b0 91 17 01 	lds	r27, 0x0117
     3c4:	20 91 18 01 	lds	r18, 0x0118
     3c8:	30 91 19 01 	lds	r19, 0x0119
     3cc:	40 91 1a 01 	lds	r20, 0x011A
     3d0:	50 91 1b 01 	lds	r21, 0x011B
     3d4:	bc 01       	movw	r22, r24
     3d6:	cd 01       	movw	r24, r26
     3d8:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     3dc:	18 16       	cp	r1, r24
     3de:	2c f4       	brge	.+10     	; 0x3ea <heater_callback+0x180>
			(heater.regulation_timer > heater.ambient_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_AMBIENT_TIMED_OUT);
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	0e 94 1d 01 	call	0x23a	; 0x23a <heater_off>
     3e8:	4a c0       	rjmp	.+148    	; 0x47e <heater_callback+0x214>
			return;
		}
		if ((heater.temperature < heater.setpoint) &&
     3ea:	80 91 0c 01 	lds	r24, 0x010C
     3ee:	90 91 0d 01 	lds	r25, 0x010D
     3f2:	a0 91 0e 01 	lds	r26, 0x010E
     3f6:	b0 91 0f 01 	lds	r27, 0x010F
     3fa:	20 91 10 01 	lds	r18, 0x0110
     3fe:	30 91 11 01 	lds	r19, 0x0111
     402:	40 91 12 01 	lds	r20, 0x0112
     406:	50 91 13 01 	lds	r21, 0x0113
     40a:	bc 01       	movw	r22, r24
     40c:	cd 01       	movw	r24, r26
     40e:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__cmpsf2>
     412:	88 23       	and	r24, r24
     414:	dc f4       	brge	.+54     	; 0x44c <heater_callback+0x1e2>
     416:	80 91 14 01 	lds	r24, 0x0114
     41a:	90 91 15 01 	lds	r25, 0x0115
     41e:	a0 91 16 01 	lds	r26, 0x0116
     422:	b0 91 17 01 	lds	r27, 0x0117
     426:	20 91 1c 01 	lds	r18, 0x011C
     42a:	30 91 1d 01 	lds	r19, 0x011D
     42e:	40 91 1e 01 	lds	r20, 0x011E
     432:	50 91 1f 01 	lds	r21, 0x011F
     436:	bc 01       	movw	r22, r24
     438:	cd 01       	movw	r24, r26
     43a:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     43e:	18 16       	cp	r1, r24
     440:	2c f4       	brge	.+10     	; 0x44c <heater_callback+0x1e2>
			(heater.regulation_timer > heater.regulation_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_REGULATION_TIMED_OUT);
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	62 e0       	ldi	r22, 0x02	; 2
     446:	0e 94 1d 01 	call	0x23a	; 0x23a <heater_off>
     44a:	19 c0       	rjmp	.+50     	; 0x47e <heater_callback+0x214>
			return;
		}
	}
	// manage heater state and LED indicator
	if (heater.regulation_count > 0) {
     44c:	80 91 0b 01 	lds	r24, 0x010B
     450:	88 23       	and	r24, r24
     452:	61 f0       	breq	.+24     	; 0x46c <heater_callback+0x202>
		if (--heater.regulation_count <= 0) {
     454:	80 91 0b 01 	lds	r24, 0x010B
     458:	81 50       	subi	r24, 0x01	; 1
     45a:	80 93 0b 01 	sts	0x010B, r24
     45e:	80 91 0b 01 	lds	r24, 0x010B
     462:	88 23       	and	r24, r24
     464:	19 f4       	brne	.+6      	; 0x46c <heater_callback+0x202>
			heater.state = HEATER_REGULATED;
     466:	83 e0       	ldi	r24, 0x03	; 3
     468:	80 93 07 01 	sts	0x0107, r24
		}
	}
	if (heater.state == HEATER_REGULATED) {
     46c:	80 91 07 01 	lds	r24, 0x0107
     470:	83 30       	cpi	r24, 0x03	; 3
     472:	19 f4       	brne	.+6      	; 0x47a <heater_callback+0x210>
		led_on();
     474:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <led_on>
     478:	02 c0       	rjmp	.+4      	; 0x47e <heater_callback+0x214>
	} else {
		led_toggle();
     47a:	0e 94 06 09 	call	0x120c	; 0x120c <led_toggle>
	}
}
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	cf 91       	pop	r28
     488:	df 91       	pop	r29
     48a:	08 95       	ret

0000048c <pid_init>:
 * pid_reset() - reset PID values to cold start
 * pid_calc() - derived from: http://www.embeddedheaven.com/pid-control-algorithm-c-language.htm
 */

void pid_init() 
{
     48c:	df 93       	push	r29
     48e:	cf 93       	push	r28
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
	memset(&pid, 0, sizeof(struct PIDstruct));
     494:	88 e2       	ldi	r24, 0x28	; 40
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	46 e3       	ldi	r20, 0x36	; 54
     49e:	50 e0       	ldi	r21, 0x00	; 0
     4a0:	0e 94 59 11 	call	0x22b2	; 0x22b2 <memset>
	pid.dt = PID_DT;
     4a4:	8d ec       	ldi	r24, 0xCD	; 205
     4a6:	9c ec       	ldi	r25, 0xCC	; 204
     4a8:	ac ec       	ldi	r26, 0xCC	; 204
     4aa:	bd e3       	ldi	r27, 0x3D	; 61
     4ac:	80 93 46 01 	sts	0x0146, r24
     4b0:	90 93 47 01 	sts	0x0147, r25
     4b4:	a0 93 48 01 	sts	0x0148, r26
     4b8:	b0 93 49 01 	sts	0x0149, r27
	pid.Kp = PID_Kp;
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	a0 e0       	ldi	r26, 0x00	; 0
     4c2:	bf e3       	ldi	r27, 0x3F	; 63
     4c4:	80 93 4a 01 	sts	0x014A, r24
     4c8:	90 93 4b 01 	sts	0x014B, r25
     4cc:	a0 93 4c 01 	sts	0x014C, r26
     4d0:	b0 93 4d 01 	sts	0x014D, r27
	pid.Ki = PID_Ki;
     4d4:	8f e6       	ldi	r24, 0x6F	; 111
     4d6:	92 e1       	ldi	r25, 0x12	; 18
     4d8:	a3 e8       	ldi	r26, 0x83	; 131
     4da:	ba e3       	ldi	r27, 0x3A	; 58
     4dc:	80 93 4e 01 	sts	0x014E, r24
     4e0:	90 93 4f 01 	sts	0x014F, r25
     4e4:	a0 93 50 01 	sts	0x0150, r26
     4e8:	b0 93 51 01 	sts	0x0151, r27
	pid.Kd = PID_Kd;
     4ec:	8a e0       	ldi	r24, 0x0A	; 10
     4ee:	97 ed       	ldi	r25, 0xD7	; 215
     4f0:	a3 e2       	ldi	r26, 0x23	; 35
     4f2:	bc e3       	ldi	r27, 0x3C	; 60
     4f4:	80 93 52 01 	sts	0x0152, r24
     4f8:	90 93 53 01 	sts	0x0153, r25
     4fc:	a0 93 54 01 	sts	0x0154, r26
     500:	b0 93 55 01 	sts	0x0155, r27
	pid.output_max = PID_MAX_OUTPUT;		// saturation filter max value
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	a8 ec       	ldi	r26, 0xC8	; 200
     50a:	b2 e4       	ldi	r27, 0x42	; 66
     50c:	80 93 2e 01 	sts	0x012E, r24
     510:	90 93 2f 01 	sts	0x012F, r25
     514:	a0 93 30 01 	sts	0x0130, r26
     518:	b0 93 31 01 	sts	0x0131, r27
	pid.output_min = PID_MIN_OUTPUT;		// saturation filter min value
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	a0 e0       	ldi	r26, 0x00	; 0
     522:	b0 e0       	ldi	r27, 0x00	; 0
     524:	80 93 32 01 	sts	0x0132, r24
     528:	90 93 33 01 	sts	0x0133, r25
     52c:	a0 93 34 01 	sts	0x0134, r26
     530:	b0 93 35 01 	sts	0x0135, r27
	pid.state = PID_ON;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	80 93 28 01 	sts	0x0128, r24
}
     53a:	cf 91       	pop	r28
     53c:	df 91       	pop	r29
     53e:	08 95       	ret

00000540 <pid_reset>:

void pid_reset()
{
     540:	df 93       	push	r29
     542:	cf 93       	push	r28
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
	pid.output = 0;
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	80 93 2a 01 	sts	0x012A, r24
     554:	90 93 2b 01 	sts	0x012B, r25
     558:	a0 93 2c 01 	sts	0x012C, r26
     55c:	b0 93 2d 01 	sts	0x012D, r27
	pid.integral = 0;
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	a0 e0       	ldi	r26, 0x00	; 0
     566:	b0 e0       	ldi	r27, 0x00	; 0
     568:	80 93 3e 01 	sts	0x013E, r24
     56c:	90 93 3f 01 	sts	0x013F, r25
     570:	a0 93 40 01 	sts	0x0140, r26
     574:	b0 93 41 01 	sts	0x0141, r27
	pid.prev_error = 0;
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	a0 e0       	ldi	r26, 0x00	; 0
     57e:	b0 e0       	ldi	r27, 0x00	; 0
     580:	80 93 3a 01 	sts	0x013A, r24
     584:	90 93 3b 01 	sts	0x013B, r25
     588:	a0 93 3c 01 	sts	0x013C, r26
     58c:	b0 93 3d 01 	sts	0x013D, r27
}
     590:	cf 91       	pop	r28
     592:	df 91       	pop	r29
     594:	08 95       	ret

00000596 <pid_calculate>:

double pid_calculate(double setpoint,double temperature)
{
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	df 93       	push	r29
     5a0:	cf 93       	push	r28
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	2c 97       	sbiw	r28, 0x0c	; 12
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
     5b2:	69 83       	std	Y+1, r22	; 0x01
     5b4:	7a 83       	std	Y+2, r23	; 0x02
     5b6:	8b 83       	std	Y+3, r24	; 0x03
     5b8:	9c 83       	std	Y+4, r25	; 0x04
     5ba:	2d 83       	std	Y+5, r18	; 0x05
     5bc:	3e 83       	std	Y+6, r19	; 0x06
     5be:	4f 83       	std	Y+7, r20	; 0x07
     5c0:	58 87       	std	Y+8, r21	; 0x08
	if (pid.state == PID_OFF) { return (0);}
     5c2:	80 91 28 01 	lds	r24, 0x0128
     5c6:	88 23       	and	r24, r24
     5c8:	49 f4       	brne	.+18     	; 0x5dc <pid_calculate+0x46>
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	a0 e0       	ldi	r26, 0x00	; 0
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	89 87       	std	Y+9, r24	; 0x09
     5d4:	9a 87       	std	Y+10, r25	; 0x0a
     5d6:	ab 87       	std	Y+11, r26	; 0x0b
     5d8:	bc 87       	std	Y+12, r27	; 0x0c
     5da:	99 c1       	rjmp	.+818    	; 0x90e <__stack+0xf>

	pid.setpoint = setpoint;		// ++++ test
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	9a 81       	ldd	r25, Y+2	; 0x02
     5e0:	ab 81       	ldd	r26, Y+3	; 0x03
     5e2:	bc 81       	ldd	r27, Y+4	; 0x04
     5e4:	80 93 5a 01 	sts	0x015A, r24
     5e8:	90 93 5b 01 	sts	0x015B, r25
     5ec:	a0 93 5c 01 	sts	0x015C, r26
     5f0:	b0 93 5d 01 	sts	0x015D, r27
	pid.temperature = temperature;	// ++++ test
     5f4:	8d 81       	ldd	r24, Y+5	; 0x05
     5f6:	9e 81       	ldd	r25, Y+6	; 0x06
     5f8:	af 81       	ldd	r26, Y+7	; 0x07
     5fa:	b8 85       	ldd	r27, Y+8	; 0x08
     5fc:	80 93 56 01 	sts	0x0156, r24
     600:	90 93 57 01 	sts	0x0157, r25
     604:	a0 93 58 01 	sts	0x0158, r26
     608:	b0 93 59 01 	sts	0x0159, r27

	pid.error = setpoint - temperature;		// current error term
     60c:	69 81       	ldd	r22, Y+1	; 0x01
     60e:	7a 81       	ldd	r23, Y+2	; 0x02
     610:	8b 81       	ldd	r24, Y+3	; 0x03
     612:	9c 81       	ldd	r25, Y+4	; 0x04
     614:	2d 81       	ldd	r18, Y+5	; 0x05
     616:	3e 81       	ldd	r19, Y+6	; 0x06
     618:	4f 81       	ldd	r20, Y+7	; 0x07
     61a:	58 85       	ldd	r21, Y+8	; 0x08
     61c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__subsf3>
     620:	dc 01       	movw	r26, r24
     622:	cb 01       	movw	r24, r22
     624:	80 93 36 01 	sts	0x0136, r24
     628:	90 93 37 01 	sts	0x0137, r25
     62c:	a0 93 38 01 	sts	0x0138, r26
     630:	b0 93 39 01 	sts	0x0139, r27

//	if (fabs(pid.error) > PID_EPSILON) {	// stop integration if error term is too small
	if ((fabs(pid.error) > PID_EPSILON) ||	// stop integration if error term is too small
     634:	80 91 36 01 	lds	r24, 0x0136
     638:	90 91 37 01 	lds	r25, 0x0137
     63c:	a0 91 38 01 	lds	r26, 0x0138
     640:	b0 91 39 01 	lds	r27, 0x0139
     644:	bf 77       	andi	r27, 0x7F	; 127
     646:	bc 01       	movw	r22, r24
     648:	cd 01       	movw	r24, r26
     64a:	2a e0       	ldi	r18, 0x0A	; 10
     64c:	37 ed       	ldi	r19, 0xD7	; 215
     64e:	43 e2       	ldi	r20, 0x23	; 35
     650:	5c e3       	ldi	r21, 0x3C	; 60
     652:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     656:	18 16       	cp	r1, r24
     658:	14 f1       	brlt	.+68     	; 0x69e <pid_calculate+0x108>
     65a:	e0 90 2a 01 	lds	r14, 0x012A
     65e:	f0 90 2b 01 	lds	r15, 0x012B
     662:	00 91 2c 01 	lds	r16, 0x012C
     666:	10 91 2d 01 	lds	r17, 0x012D
     66a:	80 91 2e 01 	lds	r24, 0x012E
     66e:	90 91 2f 01 	lds	r25, 0x012F
     672:	a0 91 30 01 	lds	r26, 0x0130
     676:	b0 91 31 01 	lds	r27, 0x0131
     67a:	bc 01       	movw	r22, r24
     67c:	cd 01       	movw	r24, r26
     67e:	2c ea       	ldi	r18, 0xAC	; 172
     680:	35 ec       	ldi	r19, 0xC5	; 197
     682:	47 e2       	ldi	r20, 0x27	; 39
     684:	57 e3       	ldi	r21, 0x37	; 55
     686:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__subsf3>
     68a:	dc 01       	movw	r26, r24
     68c:	cb 01       	movw	r24, r22
     68e:	9c 01       	movw	r18, r24
     690:	ad 01       	movw	r20, r26
     692:	c8 01       	movw	r24, r16
     694:	b7 01       	movw	r22, r14
     696:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     69a:	88 23       	and	r24, r24
     69c:	74 f1       	brlt	.+92     	; 0x6fa <pid_calculate+0x164>
		(pid.output >= (pid.output_max - EPSILON))) {//...or output is too large (anti-windup)
		pid.integral += (pid.error * pid.dt);
     69e:	e0 90 3e 01 	lds	r14, 0x013E
     6a2:	f0 90 3f 01 	lds	r15, 0x013F
     6a6:	00 91 40 01 	lds	r16, 0x0140
     6aa:	10 91 41 01 	lds	r17, 0x0141
     6ae:	80 91 36 01 	lds	r24, 0x0136
     6b2:	90 91 37 01 	lds	r25, 0x0137
     6b6:	a0 91 38 01 	lds	r26, 0x0138
     6ba:	b0 91 39 01 	lds	r27, 0x0139
     6be:	20 91 46 01 	lds	r18, 0x0146
     6c2:	30 91 47 01 	lds	r19, 0x0147
     6c6:	40 91 48 01 	lds	r20, 0x0148
     6ca:	50 91 49 01 	lds	r21, 0x0149
     6ce:	bc 01       	movw	r22, r24
     6d0:	cd 01       	movw	r24, r26
     6d2:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__mulsf3>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9c 01       	movw	r18, r24
     6dc:	ad 01       	movw	r20, r26
     6de:	c8 01       	movw	r24, r16
     6e0:	b7 01       	movw	r22, r14
     6e2:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__addsf3>
     6e6:	dc 01       	movw	r26, r24
     6e8:	cb 01       	movw	r24, r22
     6ea:	80 93 3e 01 	sts	0x013E, r24
     6ee:	90 93 3f 01 	sts	0x013F, r25
     6f2:	a0 93 40 01 	sts	0x0140, r26
     6f6:	b0 93 41 01 	sts	0x0141, r27
	}
	pid.derivative = (pid.error - pid.prev_error) / pid.dt;
     6fa:	80 91 36 01 	lds	r24, 0x0136
     6fe:	90 91 37 01 	lds	r25, 0x0137
     702:	a0 91 38 01 	lds	r26, 0x0138
     706:	b0 91 39 01 	lds	r27, 0x0139
     70a:	20 91 3a 01 	lds	r18, 0x013A
     70e:	30 91 3b 01 	lds	r19, 0x013B
     712:	40 91 3c 01 	lds	r20, 0x013C
     716:	50 91 3d 01 	lds	r21, 0x013D
     71a:	bc 01       	movw	r22, r24
     71c:	cd 01       	movw	r24, r26
     71e:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__subsf3>
     722:	dc 01       	movw	r26, r24
     724:	cb 01       	movw	r24, r22
     726:	20 91 46 01 	lds	r18, 0x0146
     72a:	30 91 47 01 	lds	r19, 0x0147
     72e:	40 91 48 01 	lds	r20, 0x0148
     732:	50 91 49 01 	lds	r21, 0x0149
     736:	bc 01       	movw	r22, r24
     738:	cd 01       	movw	r24, r26
     73a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <__divsf3>
     73e:	dc 01       	movw	r26, r24
     740:	cb 01       	movw	r24, r22
     742:	80 93 42 01 	sts	0x0142, r24
     746:	90 93 43 01 	sts	0x0143, r25
     74a:	a0 93 44 01 	sts	0x0144, r26
     74e:	b0 93 45 01 	sts	0x0145, r27
	pid.output = pid.Kp * pid.error + pid.Ki * pid.integral + pid.Kd * pid.derivative;
     752:	80 91 4a 01 	lds	r24, 0x014A
     756:	90 91 4b 01 	lds	r25, 0x014B
     75a:	a0 91 4c 01 	lds	r26, 0x014C
     75e:	b0 91 4d 01 	lds	r27, 0x014D
     762:	20 91 36 01 	lds	r18, 0x0136
     766:	30 91 37 01 	lds	r19, 0x0137
     76a:	40 91 38 01 	lds	r20, 0x0138
     76e:	50 91 39 01 	lds	r21, 0x0139
     772:	bc 01       	movw	r22, r24
     774:	cd 01       	movw	r24, r26
     776:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__mulsf3>
     77a:	dc 01       	movw	r26, r24
     77c:	cb 01       	movw	r24, r22
     77e:	7c 01       	movw	r14, r24
     780:	8d 01       	movw	r16, r26
     782:	80 91 4e 01 	lds	r24, 0x014E
     786:	90 91 4f 01 	lds	r25, 0x014F
     78a:	a0 91 50 01 	lds	r26, 0x0150
     78e:	b0 91 51 01 	lds	r27, 0x0151
     792:	20 91 3e 01 	lds	r18, 0x013E
     796:	30 91 3f 01 	lds	r19, 0x013F
     79a:	40 91 40 01 	lds	r20, 0x0140
     79e:	50 91 41 01 	lds	r21, 0x0141
     7a2:	bc 01       	movw	r22, r24
     7a4:	cd 01       	movw	r24, r26
     7a6:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__mulsf3>
     7aa:	dc 01       	movw	r26, r24
     7ac:	cb 01       	movw	r24, r22
     7ae:	9c 01       	movw	r18, r24
     7b0:	ad 01       	movw	r20, r26
     7b2:	c8 01       	movw	r24, r16
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__addsf3>
     7ba:	dc 01       	movw	r26, r24
     7bc:	cb 01       	movw	r24, r22
     7be:	7c 01       	movw	r14, r24
     7c0:	8d 01       	movw	r16, r26
     7c2:	80 91 52 01 	lds	r24, 0x0152
     7c6:	90 91 53 01 	lds	r25, 0x0153
     7ca:	a0 91 54 01 	lds	r26, 0x0154
     7ce:	b0 91 55 01 	lds	r27, 0x0155
     7d2:	20 91 42 01 	lds	r18, 0x0142
     7d6:	30 91 43 01 	lds	r19, 0x0143
     7da:	40 91 44 01 	lds	r20, 0x0144
     7de:	50 91 45 01 	lds	r21, 0x0145
     7e2:	bc 01       	movw	r22, r24
     7e4:	cd 01       	movw	r24, r26
     7e6:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__mulsf3>
     7ea:	dc 01       	movw	r26, r24
     7ec:	cb 01       	movw	r24, r22
     7ee:	9c 01       	movw	r18, r24
     7f0:	ad 01       	movw	r20, r26
     7f2:	c8 01       	movw	r24, r16
     7f4:	b7 01       	movw	r22, r14
     7f6:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__addsf3>
     7fa:	dc 01       	movw	r26, r24
     7fc:	cb 01       	movw	r24, r22
     7fe:	80 93 2a 01 	sts	0x012A, r24
     802:	90 93 2b 01 	sts	0x012B, r25
     806:	a0 93 2c 01 	sts	0x012C, r26
     80a:	b0 93 2d 01 	sts	0x012D, r27

	if(pid.output > pid.output_max) { 		// saturation filter
     80e:	80 91 2a 01 	lds	r24, 0x012A
     812:	90 91 2b 01 	lds	r25, 0x012B
     816:	a0 91 2c 01 	lds	r26, 0x012C
     81a:	b0 91 2d 01 	lds	r27, 0x012D
     81e:	20 91 2e 01 	lds	r18, 0x012E
     822:	30 91 2f 01 	lds	r19, 0x012F
     826:	40 91 30 01 	lds	r20, 0x0130
     82a:	50 91 31 01 	lds	r21, 0x0131
     82e:	bc 01       	movw	r22, r24
     830:	cd 01       	movw	r24, r26
     832:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     836:	18 16       	cp	r1, r24
     838:	8c f4       	brge	.+34     	; 0x85c <pid_calculate+0x2c6>
		pid.output = pid.output_max;
     83a:	80 91 2e 01 	lds	r24, 0x012E
     83e:	90 91 2f 01 	lds	r25, 0x012F
     842:	a0 91 30 01 	lds	r26, 0x0130
     846:	b0 91 31 01 	lds	r27, 0x0131
     84a:	80 93 2a 01 	sts	0x012A, r24
     84e:	90 93 2b 01 	sts	0x012B, r25
     852:	a0 93 2c 01 	sts	0x012C, r26
     856:	b0 93 2d 01 	sts	0x012D, r27
     85a:	26 c0       	rjmp	.+76     	; 0x8a8 <pid_calculate+0x312>
	} else if(pid.output < pid.output_min) {
     85c:	80 91 2a 01 	lds	r24, 0x012A
     860:	90 91 2b 01 	lds	r25, 0x012B
     864:	a0 91 2c 01 	lds	r26, 0x012C
     868:	b0 91 2d 01 	lds	r27, 0x012D
     86c:	20 91 32 01 	lds	r18, 0x0132
     870:	30 91 33 01 	lds	r19, 0x0133
     874:	40 91 34 01 	lds	r20, 0x0134
     878:	50 91 35 01 	lds	r21, 0x0135
     87c:	bc 01       	movw	r22, r24
     87e:	cd 01       	movw	r24, r26
     880:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__cmpsf2>
     884:	88 23       	and	r24, r24
     886:	84 f4       	brge	.+32     	; 0x8a8 <pid_calculate+0x312>
		pid.output = pid.output_min;
     888:	80 91 32 01 	lds	r24, 0x0132
     88c:	90 91 33 01 	lds	r25, 0x0133
     890:	a0 91 34 01 	lds	r26, 0x0134
     894:	b0 91 35 01 	lds	r27, 0x0135
     898:	80 93 2a 01 	sts	0x012A, r24
     89c:	90 93 2b 01 	sts	0x012B, r25
     8a0:	a0 93 2c 01 	sts	0x012C, r26
     8a4:	b0 93 2d 01 	sts	0x012D, r27
	}
	pid.prev_error = pid.error;
     8a8:	80 91 36 01 	lds	r24, 0x0136
     8ac:	90 91 37 01 	lds	r25, 0x0137
     8b0:	a0 91 38 01 	lds	r26, 0x0138
     8b4:	b0 91 39 01 	lds	r27, 0x0139
     8b8:	80 93 3a 01 	sts	0x013A, r24
     8bc:	90 93 3b 01 	sts	0x013B, r25
     8c0:	a0 93 3c 01 	sts	0x013C, r26
     8c4:	b0 93 3d 01 	sts	0x013D, r27
	if (pid.output > 50) { led_on();} else { led_off();}
     8c8:	80 91 2a 01 	lds	r24, 0x012A
     8cc:	90 91 2b 01 	lds	r25, 0x012B
     8d0:	a0 91 2c 01 	lds	r26, 0x012C
     8d4:	b0 91 2d 01 	lds	r27, 0x012D
     8d8:	bc 01       	movw	r22, r24
     8da:	cd 01       	movw	r24, r26
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	48 e4       	ldi	r20, 0x48	; 72
     8e2:	52 e4       	ldi	r21, 0x42	; 66
     8e4:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     8e8:	18 16       	cp	r1, r24
     8ea:	1c f4       	brge	.+6      	; 0x8f2 <pid_calculate+0x35c>
     8ec:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <led_on>
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <pid_calculate+0x360>
     8f2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <led_off>

	return pid.output;
     8f6:	80 91 2a 01 	lds	r24, 0x012A
     8fa:	90 91 2b 01 	lds	r25, 0x012B
     8fe:	a0 91 2c 01 	lds	r26, 0x012C
     902:	b0 91 2d 01 	lds	r27, 0x012D
     906:	89 87       	std	Y+9, r24	; 0x09
     908:	9a 87       	std	Y+10, r25	; 0x0a
     90a:	ab 87       	std	Y+11, r26	; 0x0b
     90c:	bc 87       	std	Y+12, r27	; 0x0c
     90e:	89 85       	ldd	r24, Y+9	; 0x09
     910:	9a 85       	ldd	r25, Y+10	; 0x0a
     912:	ab 85       	ldd	r26, Y+11	; 0x0b
     914:	bc 85       	ldd	r27, Y+12	; 0x0c
}
     916:	bc 01       	movw	r22, r24
     918:	cd 01       	movw	r24, r26
     91a:	2c 96       	adiw	r28, 0x0c	; 12
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	cf 91       	pop	r28
     928:	df 91       	pop	r29
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	08 95       	ret

00000934 <sensor_init>:
 * sensor_get_code()		- return latest sensor code
 * sensor_callback() 		- perform sensor sampling / reading
 */

void sensor_init()
{
     934:	df 93       	push	r29
     936:	cf 93       	push	r28
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
	memset(&sensor, 0, sizeof(Sensor));
     93c:	80 e7       	ldi	r24, 0x70	; 112
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	43 e4       	ldi	r20, 0x43	; 67
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	0e 94 59 11 	call	0x22b2	; 0x22b2 <memset>
	sensor.temperature = ABSOLUTE_ZERO;
     94c:	83 e3       	ldi	r24, 0x33	; 51
     94e:	93 e9       	ldi	r25, 0x93	; 147
     950:	a8 e8       	ldi	r26, 0x88	; 136
     952:	b3 ec       	ldi	r27, 0xC3	; 195
     954:	80 93 73 01 	sts	0x0173, r24
     958:	90 93 74 01 	sts	0x0174, r25
     95c:	a0 93 75 01 	sts	0x0175, r26
     960:	b0 93 76 01 	sts	0x0176, r27
	sensor.sample_variance_max = SENSOR_SAMPLE_VARIANCE_MAX;
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	a0 ea       	ldi	r26, 0xA0	; 160
     96a:	bf e3       	ldi	r27, 0x3F	; 63
     96c:	80 93 7b 01 	sts	0x017B, r24
     970:	90 93 7c 01 	sts	0x017C, r25
     974:	a0 93 7d 01 	sts	0x017D, r26
     978:	b0 93 7e 01 	sts	0x017E, r27
	sensor.reading_variance_max = SENSOR_READING_VARIANCE_MAX;
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	a0 ea       	ldi	r26, 0xA0	; 160
     982:	b1 e4       	ldi	r27, 0x41	; 65
     984:	80 93 7f 01 	sts	0x017F, r24
     988:	90 93 80 01 	sts	0x0180, r25
     98c:	a0 93 81 01 	sts	0x0181, r26
     990:	b0 93 82 01 	sts	0x0182, r27
	sensor.disconnect_temperature = SENSOR_DISCONNECTED_TEMPERATURE;
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	a8 ec       	ldi	r26, 0xC8	; 200
     99a:	b3 e4       	ldi	r27, 0x43	; 67
     99c:	80 93 83 01 	sts	0x0183, r24
     9a0:	90 93 84 01 	sts	0x0184, r25
     9a4:	a0 93 85 01 	sts	0x0185, r26
     9a8:	b0 93 86 01 	sts	0x0186, r27
	sensor.no_power_temperature = SENSOR_NO_POWER_TEMPERATURE;
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 ec       	ldi	r27, 0xC0	; 192
     9b4:	80 93 87 01 	sts	0x0187, r24
     9b8:	90 93 88 01 	sts	0x0188, r25
     9bc:	a0 93 89 01 	sts	0x0189, r26
     9c0:	b0 93 8a 01 	sts	0x018A, r27
}
     9c4:	cf 91       	pop	r28
     9c6:	df 91       	pop	r29
     9c8:	08 95       	ret

000009ca <sensor_on>:

void sensor_on()
{
     9ca:	df 93       	push	r29
     9cc:	cf 93       	push	r28
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_NO_DATA;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	80 93 70 01 	sts	0x0170, r24
}
     9d8:	cf 91       	pop	r28
     9da:	df 91       	pop	r29
     9dc:	08 95       	ret

000009de <sensor_off>:

void sensor_off()
{
     9de:	df 93       	push	r29
     9e0:	cf 93       	push	r28
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_OFF;
     9e6:	10 92 70 01 	sts	0x0170, r1
}
     9ea:	cf 91       	pop	r28
     9ec:	df 91       	pop	r29
     9ee:	08 95       	ret

000009f0 <sensor_start_reading>:

void sensor_start_reading() 
{ 
     9f0:	df 93       	push	r29
     9f2:	cf 93       	push	r28
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
	sensor.sample_idx = 0;
     9f8:	10 92 72 01 	sts	0x0172, r1
	sensor.code = SENSOR_TAKING_READING;
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	80 93 71 01 	sts	0x0171, r24
}
     a02:	cf 91       	pop	r28
     a04:	df 91       	pop	r29
     a06:	08 95       	ret

00000a08 <sensor_get_state>:

uint8_t sensor_get_state() { return (sensor.state);}
     a08:	df 93       	push	r29
     a0a:	cf 93       	push	r28
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	80 91 70 01 	lds	r24, 0x0170
     a14:	cf 91       	pop	r28
     a16:	df 91       	pop	r29
     a18:	08 95       	ret

00000a1a <sensor_get_code>:
uint8_t sensor_get_code() { return (sensor.code);}
     a1a:	df 93       	push	r29
     a1c:	cf 93       	push	r28
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	80 91 71 01 	lds	r24, 0x0171
     a26:	cf 91       	pop	r28
     a28:	df 91       	pop	r29
     a2a:	08 95       	ret

00000a2c <sensor_get_temperature>:

double sensor_get_temperature() 
{ 
     a2c:	df 93       	push	r29
     a2e:	cf 93       	push	r28
     a30:	00 d0       	rcall	.+0      	; 0xa32 <sensor_get_temperature+0x6>
     a32:	00 d0       	rcall	.+0      	; 0xa34 <sensor_get_temperature+0x8>
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
	if (sensor.state == SENSOR_HAS_DATA) { 
     a38:	80 91 70 01 	lds	r24, 0x0170
     a3c:	83 30       	cpi	r24, 0x03	; 3
     a3e:	69 f4       	brne	.+26     	; 0xa5a <sensor_get_temperature+0x2e>
		return (sensor.temperature);
     a40:	80 91 73 01 	lds	r24, 0x0173
     a44:	90 91 74 01 	lds	r25, 0x0174
     a48:	a0 91 75 01 	lds	r26, 0x0175
     a4c:	b0 91 76 01 	lds	r27, 0x0176
     a50:	89 83       	std	Y+1, r24	; 0x01
     a52:	9a 83       	std	Y+2, r25	; 0x02
     a54:	ab 83       	std	Y+3, r26	; 0x03
     a56:	bc 83       	std	Y+4, r27	; 0x04
     a58:	08 c0       	rjmp	.+16     	; 0xa6a <sensor_get_temperature+0x3e>
	} else {
		return (LESS_THAN_ZERO);	// an impossible temperature value
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a9 e8       	ldi	r26, 0x89	; 137
     a60:	b3 ec       	ldi	r27, 0xC3	; 195
     a62:	89 83       	std	Y+1, r24	; 0x01
     a64:	9a 83       	std	Y+2, r25	; 0x02
     a66:	ab 83       	std	Y+3, r26	; 0x03
     a68:	bc 83       	std	Y+4, r27	; 0x04
     a6a:	89 81       	ldd	r24, Y+1	; 0x01
     a6c:	9a 81       	ldd	r25, Y+2	; 0x02
     a6e:	ab 81       	ldd	r26, Y+3	; 0x03
     a70:	bc 81       	ldd	r27, Y+4	; 0x04
	}
}
     a72:	bc 01       	movw	r22, r24
     a74:	cd 01       	movw	r24, r26
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	cf 91       	pop	r28
     a80:	df 91       	pop	r29
     a82:	08 95       	ret

00000a84 <sensor_callback>:
 *	loop. Each sampling interval must be requested explicitly by calling 
 *	sensor_start_sample(). It does not free-run.
 */

void sensor_callback()
{
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	df 93       	push	r29
     a8e:	cf 93       	push	r28
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	29 97       	sbiw	r28, 0x09	; 9
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	cd bf       	out	0x3d, r28	; 61
	// cases where you don't execute the callback:
	if ((sensor.state == SENSOR_OFF) || (sensor.code != SENSOR_TAKING_READING)) {
     aa0:	80 91 70 01 	lds	r24, 0x0170
     aa4:	88 23       	and	r24, r24
     aa6:	09 f4       	brne	.+2      	; 0xaaa <sensor_callback+0x26>
     aa8:	2f c1       	rjmp	.+606    	; 0xd08 <sensor_callback+0x284>
     aaa:	80 91 71 01 	lds	r24, 0x0171
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	09 f0       	breq	.+2      	; 0xab4 <sensor_callback+0x30>
     ab2:	2a c1       	rjmp	.+596    	; 0xd08 <sensor_callback+0x284>
		return;
	}

	// get a sample and return if still in the reading period
	sensor.sample[sensor.sample_idx] = _sensor_sample(ADC_CHANNEL);
     ab4:	80 91 72 01 	lds	r24, 0x0172
     ab8:	08 2f       	mov	r16, r24
     aba:	10 e0       	ldi	r17, 0x00	; 0
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	0e 94 91 06 	call	0xd22	; 0xd22 <_sensor_sample>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	c8 01       	movw	r24, r16
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	fc 01       	movw	r30, r24
     ad2:	e5 57       	subi	r30, 0x75	; 117
     ad4:	fe 4f       	sbci	r31, 0xFE	; 254
     ad6:	20 83       	st	Z, r18
     ad8:	31 83       	std	Z+1, r19	; 0x01
     ada:	42 83       	std	Z+2, r20	; 0x02
     adc:	53 83       	std	Z+3, r21	; 0x03
	if ((++sensor.sample_idx) < SENSOR_SAMPLES) { 
     ade:	80 91 72 01 	lds	r24, 0x0172
     ae2:	8f 5f       	subi	r24, 0xFF	; 255
     ae4:	80 93 72 01 	sts	0x0172, r24
     ae8:	80 91 72 01 	lds	r24, 0x0172
     aec:	89 30       	cpi	r24, 0x09	; 9
     aee:	08 f4       	brcc	.+2      	; 0xaf2 <sensor_callback+0x6e>
     af0:	0b c1       	rjmp	.+534    	; 0xd08 <sensor_callback+0x284>
		return;
	}

	// process the array to clean up samples
	double mean;
	sensor.std_dev = std_dev(sensor.sample, SENSOR_SAMPLES, &mean);
     af2:	8b e8       	ldi	r24, 0x8B	; 139
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	9e 01       	movw	r18, r28
     af8:	2a 5f       	subi	r18, 0xFA	; 250
     afa:	3f 4f       	sbci	r19, 0xFF	; 255
     afc:	69 e0       	ldi	r22, 0x09	; 9
     afe:	a9 01       	movw	r20, r18
     b00:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <std_dev>
     b04:	dc 01       	movw	r26, r24
     b06:	cb 01       	movw	r24, r22
     b08:	80 93 77 01 	sts	0x0177, r24
     b0c:	90 93 78 01 	sts	0x0178, r25
     b10:	a0 93 79 01 	sts	0x0179, r26
     b14:	b0 93 7a 01 	sts	0x017A, r27
	if (sensor.std_dev > sensor.reading_variance_max) {
     b18:	80 91 77 01 	lds	r24, 0x0177
     b1c:	90 91 78 01 	lds	r25, 0x0178
     b20:	a0 91 79 01 	lds	r26, 0x0179
     b24:	b0 91 7a 01 	lds	r27, 0x017A
     b28:	20 91 7f 01 	lds	r18, 0x017F
     b2c:	30 91 80 01 	lds	r19, 0x0180
     b30:	40 91 81 01 	lds	r20, 0x0181
     b34:	50 91 82 01 	lds	r21, 0x0182
     b38:	bc 01       	movw	r22, r24
     b3a:	cd 01       	movw	r24, r26
     b3c:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     b40:	18 16       	cp	r1, r24
     b42:	3c f4       	brge	.+14     	; 0xb52 <sensor_callback+0xce>
		sensor.state = SENSOR_ERROR;
     b44:	82 e0       	ldi	r24, 0x02	; 2
     b46:	80 93 70 01 	sts	0x0170, r24
		sensor.code = SENSOR_BAD_READINGS;
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	80 93 71 01 	sts	0x0171, r24
     b50:	db c0       	rjmp	.+438    	; 0xd08 <sensor_callback+0x284>
		return;
	}

	// reject the outlier samples and re-compute the average
	double count = 0;
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	9b 83       	std	Y+3, r25	; 0x03
     b5e:	ac 83       	std	Y+4, r26	; 0x04
     b60:	bd 83       	std	Y+5, r27	; 0x05
	sensor.temperature = 0;
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	80 93 73 01 	sts	0x0173, r24
     b6e:	90 93 74 01 	sts	0x0174, r25
     b72:	a0 93 75 01 	sts	0x0175, r26
     b76:	b0 93 76 01 	sts	0x0176, r27
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     b7a:	19 82       	std	Y+1, r1	; 0x01
     b7c:	71 c0       	rjmp	.+226    	; 0xc60 <sensor_callback+0x1dc>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	88 2f       	mov	r24, r24
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	fc 01       	movw	r30, r24
     b8e:	e5 57       	subi	r30, 0x75	; 117
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	80 81       	ld	r24, Z
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	a2 81       	ldd	r26, Z+2	; 0x02
     b98:	b3 81       	ldd	r27, Z+3	; 0x03
     b9a:	2e 81       	ldd	r18, Y+6	; 0x06
     b9c:	3f 81       	ldd	r19, Y+7	; 0x07
     b9e:	48 85       	ldd	r20, Y+8	; 0x08
     ba0:	59 85       	ldd	r21, Y+9	; 0x09
     ba2:	bc 01       	movw	r22, r24
     ba4:	cd 01       	movw	r24, r26
     ba6:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__subsf3>
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	7c 01       	movw	r14, r24
     bb0:	8d 01       	movw	r16, r26
     bb2:	e8 94       	clt
     bb4:	17 f9       	bld	r17, 7
     bb6:	80 91 7b 01 	lds	r24, 0x017B
     bba:	90 91 7c 01 	lds	r25, 0x017C
     bbe:	a0 91 7d 01 	lds	r26, 0x017D
     bc2:	b0 91 7e 01 	lds	r27, 0x017E
     bc6:	20 91 77 01 	lds	r18, 0x0177
     bca:	30 91 78 01 	lds	r19, 0x0178
     bce:	40 91 79 01 	lds	r20, 0x0179
     bd2:	50 91 7a 01 	lds	r21, 0x017A
     bd6:	bc 01       	movw	r22, r24
     bd8:	cd 01       	movw	r24, r26
     bda:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__mulsf3>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	9c 01       	movw	r18, r24
     be4:	ad 01       	movw	r20, r26
     be6:	c8 01       	movw	r24, r16
     be8:	b7 01       	movw	r22, r14
     bea:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__cmpsf2>
     bee:	88 23       	and	r24, r24
     bf0:	a4 f5       	brge	.+104    	; 0xc5a <sensor_callback+0x1d6>
			sensor.temperature += sensor.sample[i];
     bf2:	e0 90 73 01 	lds	r14, 0x0173
     bf6:	f0 90 74 01 	lds	r15, 0x0174
     bfa:	00 91 75 01 	lds	r16, 0x0175
     bfe:	10 91 76 01 	lds	r17, 0x0176
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	fc 01       	movw	r30, r24
     c12:	e5 57       	subi	r30, 0x75	; 117
     c14:	fe 4f       	sbci	r31, 0xFE	; 254
     c16:	20 81       	ld	r18, Z
     c18:	31 81       	ldd	r19, Z+1	; 0x01
     c1a:	42 81       	ldd	r20, Z+2	; 0x02
     c1c:	53 81       	ldd	r21, Z+3	; 0x03
     c1e:	c8 01       	movw	r24, r16
     c20:	b7 01       	movw	r22, r14
     c22:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__addsf3>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	80 93 73 01 	sts	0x0173, r24
     c2e:	90 93 74 01 	sts	0x0174, r25
     c32:	a0 93 75 01 	sts	0x0175, r26
     c36:	b0 93 76 01 	sts	0x0176, r27
			count++;
     c3a:	6a 81       	ldd	r22, Y+2	; 0x02
     c3c:	7b 81       	ldd	r23, Y+3	; 0x03
     c3e:	8c 81       	ldd	r24, Y+4	; 0x04
     c40:	9d 81       	ldd	r25, Y+5	; 0x05
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	40 e8       	ldi	r20, 0x80	; 128
     c48:	5f e3       	ldi	r21, 0x3F	; 63
     c4a:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__addsf3>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	8a 83       	std	Y+2, r24	; 0x02
     c54:	9b 83       	std	Y+3, r25	; 0x03
     c56:	ac 83       	std	Y+4, r26	; 0x04
     c58:	bd 83       	std	Y+5, r27	; 0x05
	}

	// reject the outlier samples and re-compute the average
	double count = 0;
	sensor.temperature = 0;
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	8f 5f       	subi	r24, 0xFF	; 255
     c5e:	89 83       	std	Y+1, r24	; 0x01
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	89 30       	cpi	r24, 0x09	; 9
     c64:	08 f4       	brcc	.+2      	; 0xc68 <sensor_callback+0x1e4>
     c66:	8b cf       	rjmp	.-234    	; 0xb7e <sensor_callback+0xfa>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
			sensor.temperature += sensor.sample[i];
			count++;
		}
	}
	sensor.temperature /= count; 
     c68:	80 91 73 01 	lds	r24, 0x0173
     c6c:	90 91 74 01 	lds	r25, 0x0174
     c70:	a0 91 75 01 	lds	r26, 0x0175
     c74:	b0 91 76 01 	lds	r27, 0x0176
     c78:	bc 01       	movw	r22, r24
     c7a:	cd 01       	movw	r24, r26
     c7c:	2a 81       	ldd	r18, Y+2	; 0x02
     c7e:	3b 81       	ldd	r19, Y+3	; 0x03
     c80:	4c 81       	ldd	r20, Y+4	; 0x04
     c82:	5d 81       	ldd	r21, Y+5	; 0x05
     c84:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <__divsf3>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	80 93 73 01 	sts	0x0173, r24
     c90:	90 93 74 01 	sts	0x0174, r25
     c94:	a0 93 75 01 	sts	0x0175, r26
     c98:	b0 93 76 01 	sts	0x0176, r27
	sensor.code = SENSOR_IDLE;			// we are done. Flip it back to idle
     c9c:	10 92 71 01 	sts	0x0171, r1
	sensor.state = SENSOR_HAS_DATA;
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	80 93 70 01 	sts	0x0170, r24

//	if (sensor.temperature <= -1) led_on();	

	// process the exception cases
	if (sensor.temperature > SENSOR_DISCONNECTED_TEMPERATURE) {
     ca6:	80 91 73 01 	lds	r24, 0x0173
     caa:	90 91 74 01 	lds	r25, 0x0174
     cae:	a0 91 75 01 	lds	r26, 0x0175
     cb2:	b0 91 76 01 	lds	r27, 0x0176
     cb6:	bc 01       	movw	r22, r24
     cb8:	cd 01       	movw	r24, r26
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	48 ec       	ldi	r20, 0xC8	; 200
     cc0:	53 e4       	ldi	r21, 0x43	; 67
     cc2:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     cc6:	18 16       	cp	r1, r24
     cc8:	3c f4       	brge	.+14     	; 0xcd8 <sensor_callback+0x254>
		sensor.state = SENSOR_ERROR;
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	80 93 70 01 	sts	0x0170, r24
		sensor.code = SENSOR_DISCONNECTED;
     cd0:	83 e0       	ldi	r24, 0x03	; 3
     cd2:	80 93 71 01 	sts	0x0171, r24
     cd6:	18 c0       	rjmp	.+48     	; 0xd08 <sensor_callback+0x284>
	} else if (sensor.temperature < SENSOR_NO_POWER_TEMPERATURE) {
     cd8:	80 91 73 01 	lds	r24, 0x0173
     cdc:	90 91 74 01 	lds	r25, 0x0174
     ce0:	a0 91 75 01 	lds	r26, 0x0175
     ce4:	b0 91 76 01 	lds	r27, 0x0176
     ce8:	bc 01       	movw	r22, r24
     cea:	cd 01       	movw	r24, r26
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	50 ec       	ldi	r21, 0xC0	; 192
     cf4:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__cmpsf2>
     cf8:	88 23       	and	r24, r24
     cfa:	34 f4       	brge	.+12     	; 0xd08 <sensor_callback+0x284>
		sensor.state = SENSOR_ERROR;
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	80 93 70 01 	sts	0x0170, r24
		sensor.code = SENSOR_NO_POWER;
     d02:	84 e0       	ldi	r24, 0x04	; 4
     d04:	80 93 71 01 	sts	0x0171, r24
	}
}
     d08:	29 96       	adiw	r28, 0x09	; 9
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	08 95       	ret

00000d22 <_sensor_sample>:
 *
 *		temp = (adc_value * 1.456355556) - -120.7135972
 */

static inline double _sensor_sample(uint8_t adc_channel)
{
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	0f 92       	push	r0
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	89 83       	std	Y+1, r24	; 0x01
	double random_gain = 5;
	double random_variation = ((double)(rand() - RAND_MAX/2) / RAND_MAX/2) * random_gain;
	double reading = 60 + random_variation;
	return (((double)reading * SENSOR_SLOPE) + SENSOR_OFFSET);	// useful for testing the math
#else
	return (((double)adc_read(adc_channel) * SENSOR_SLOPE) + SENSOR_OFFSET);
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	0e 94 cc 06 	call	0xd98	; 0xd98 <adc_read>
     d34:	cc 01       	movw	r24, r24
     d36:	a0 e0       	ldi	r26, 0x00	; 0
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__floatunsisf>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	bc 01       	movw	r22, r24
     d48:	cd 01       	movw	r24, r26
     d4a:	26 e0       	ldi	r18, 0x06	; 6
     d4c:	3f ea       	ldi	r19, 0xAF	; 175
     d4e:	4a ef       	ldi	r20, 0xFA	; 250
     d50:	5e e3       	ldi	r21, 0x3E	; 62
     d52:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__mulsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	23 ed       	ldi	r18, 0xD3	; 211
     d60:	31 eb       	ldi	r19, 0xB1	; 177
     d62:	46 ed       	ldi	r20, 0xD6	; 214
     d64:	5e e3       	ldi	r21, 0x3E	; 62
     d66:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__subsf3>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
#endif
}
     d6e:	bc 01       	movw	r22, r24
     d70:	cd 01       	movw	r24, r26
     d72:	0f 90       	pop	r0
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <adc_init>:
/*
 * adc_init() - initialize ADC. See tinyg_tc.h for settings used
 * adc_read() - returns a single ADC reading (raw). See __sensor_sample notes for more
 */
void adc_init(void)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
	ADMUX  = (ADC_REFS | ADC_CHANNEL);	 // setup ADC Vref and channel 0
     d82:	ec e7       	ldi	r30, 0x7C	; 124
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 e4       	ldi	r24, 0x40	; 64
     d88:	80 83       	st	Z, r24
	ADCSRA = (ADC_ENABLE | ADC_PRESCALE);// Enable ADC (bit 7) & set prescaler
     d8a:	ea e7       	ldi	r30, 0x7A	; 122
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	86 e8       	ldi	r24, 0x86	; 134
     d90:	80 83       	st	Z, r24
}
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <adc_read>:

uint16_t adc_read(uint8_t channel)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <adc_read+0x6>
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xF0;						// clobber the channel
     da4:	ac e7       	ldi	r26, 0x7C	; 124
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	ec e7       	ldi	r30, 0x7C	; 124
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	80 7f       	andi	r24, 0xF0	; 240
     db0:	8c 93       	st	X, r24
	ADMUX |= 0x0F & channel;			// set the channel
     db2:	ac e7       	ldi	r26, 0x7C	; 124
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	ec e7       	ldi	r30, 0x7C	; 124
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	98 2f       	mov	r25, r24
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	8f 70       	andi	r24, 0x0F	; 15
     dc2:	89 2b       	or	r24, r25
     dc4:	8c 93       	st	X, r24

	ADCSRA |= ADC_START_CONVERSION;		// start the conversion
     dc6:	aa e7       	ldi	r26, 0x7A	; 122
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	ea e7       	ldi	r30, 0x7A	; 122
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	80 64       	ori	r24, 0x40	; 64
     dd2:	8c 93       	st	X, r24
	while (ADCSRA && (1<<ADIF) == 0);	// wait about 100 uSec
     dd4:	ea e7       	ldi	r30, 0x7A	; 122
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
	ADCSRA |= (1<<ADIF);				// clear the conversion flag
     dda:	aa e7       	ldi	r26, 0x7A	; 122
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	ea e7       	ldi	r30, 0x7A	; 122
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	80 61       	ori	r24, 0x10	; 16
     de6:	8c 93       	st	X, r24
	return (ADC);
     de8:	e8 e7       	ldi	r30, 0x78	; 120
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	91 81       	ldd	r25, Z+1	; 0x01
}
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <pwm_init>:
 * 	Configure timer 2 for extruder heater PWM
 *	Mode: 8 bit Fast PWM Fast w/OCR2A setting PWM freq (TOP value)
 *		  and OCR2B setting the duty cycle as a fraction of OCR2A seeting
 */
void pwm_init(void)
{
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
	TCCR2A  = PWM_INVERTED;		// alternative is PWM_NONINVERTED
     e02:	e0 eb       	ldi	r30, 0xB0	; 176
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 ef       	ldi	r24, 0xF0	; 240
     e08:	80 83       	st	Z, r24
	TCCR2A |= 0b00000011;		// Waveform generation set to MODE 7 - here...
     e0a:	a0 eb       	ldi	r26, 0xB0	; 176
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e0 eb       	ldi	r30, 0xB0	; 176
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	83 60       	ori	r24, 0x03	; 3
     e16:	8c 93       	st	X, r24
	TCCR2B  = 0b00001000;		// ...continued here
     e18:	e1 eb       	ldi	r30, 0xB1	; 177
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	88 e0       	ldi	r24, 0x08	; 8
     e1e:	80 83       	st	Z, r24
	TCCR2B |= PWM_PRESCALE_SET;	// set clock and prescaler
     e20:	a1 eb       	ldi	r26, 0xB1	; 177
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e1 eb       	ldi	r30, 0xB1	; 177
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	84 60       	ori	r24, 0x04	; 4
     e2c:	8c 93       	st	X, r24
	TIMSK1 = 0; 				// disable PWM interrupts
     e2e:	ef e6       	ldi	r30, 0x6F	; 111
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	10 82       	st	Z, r1
	OCR2A = 0;					// clear PWM frequency (TOP value)
     e34:	e3 eb       	ldi	r30, 0xB3	; 179
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	10 82       	st	Z, r1
	OCR2B = 0;					// clear PWM duty cycle as % of TOP value
     e3a:	e4 eb       	ldi	r30, 0xB4	; 180
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	10 82       	st	Z, r1
	device.pwm_freq = 0;
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	a0 e0       	ldi	r26, 0x00	; 0
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	80 93 b6 01 	sts	0x01B6, r24
     e4c:	90 93 b7 01 	sts	0x01B7, r25
     e50:	a0 93 b8 01 	sts	0x01B8, r26
     e54:	b0 93 b9 01 	sts	0x01B9, r27
}
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <pwm_on>:

void pwm_on(double freq, double duty)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	28 97       	sbiw	r28, 0x08	; 8
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	69 83       	std	Y+1, r22	; 0x01
     e74:	7a 83       	std	Y+2, r23	; 0x02
     e76:	8b 83       	std	Y+3, r24	; 0x03
     e78:	9c 83       	std	Y+4, r25	; 0x04
     e7a:	2d 83       	std	Y+5, r18	; 0x05
     e7c:	3e 83       	std	Y+6, r19	; 0x06
     e7e:	4f 83       	std	Y+7, r20	; 0x07
     e80:	58 87       	std	Y+8, r21	; 0x08
	pwm_init();
     e82:	0e 94 fd 06 	call	0xdfa	; 0xdfa <pwm_init>
	pwm_set_freq(freq);
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	ab 81       	ldd	r26, Y+3	; 0x03
     e8c:	bc 81       	ldd	r27, Y+4	; 0x04
     e8e:	bc 01       	movw	r22, r24
     e90:	cd 01       	movw	r24, r26
     e92:	0e 94 6d 07 	call	0xeda	; 0xeda <pwm_set_freq>
	pwm_set_duty(duty);
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	af 81       	ldd	r26, Y+7	; 0x07
     e9c:	b8 85       	ldd	r27, Y+8	; 0x08
     e9e:	bc 01       	movw	r22, r24
     ea0:	cd 01       	movw	r24, r26
     ea2:	0e 94 d7 07 	call	0xfae	; 0xfae <pwm_set_duty>
}
     ea6:	28 96       	adiw	r28, 0x08	; 8
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <pwm_off>:

void pwm_off(void)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
	pwm_on(0,0);
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	0e 94 2f 07 	call	0xe5e	; 0xe5e <pwm_on>
}
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <pwm_set_freq>:
 *
 *	At current settings the range is from about 500 Hz to about 6000 Hz  
 */

uint8_t pwm_set_freq(double freq)
{
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <pwm_set_freq+0xa>
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <pwm_set_freq+0xc>
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	69 83       	std	Y+1, r22	; 0x01
     eec:	7a 83       	std	Y+2, r23	; 0x02
     eee:	8b 83       	std	Y+3, r24	; 0x03
     ef0:	9c 83       	std	Y+4, r25	; 0x04
	device.pwm_freq = F_CPU / PWM_PRESCALE / freq;
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	74 e2       	ldi	r23, 0x24	; 36
     ef6:	84 ef       	ldi	r24, 0xF4	; 244
     ef8:	97 e4       	ldi	r25, 0x47	; 71
     efa:	29 81       	ldd	r18, Y+1	; 0x01
     efc:	3a 81       	ldd	r19, Y+2	; 0x02
     efe:	4b 81       	ldd	r20, Y+3	; 0x03
     f00:	5c 81       	ldd	r21, Y+4	; 0x04
     f02:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <__divsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	80 93 b6 01 	sts	0x01B6, r24
     f0e:	90 93 b7 01 	sts	0x01B7, r25
     f12:	a0 93 b8 01 	sts	0x01B8, r26
     f16:	b0 93 b9 01 	sts	0x01B9, r27
	if (device.pwm_freq < PWM_MIN_RES) { 
     f1a:	80 91 b6 01 	lds	r24, 0x01B6
     f1e:	90 91 b7 01 	lds	r25, 0x01B7
     f22:	a0 91 b8 01 	lds	r26, 0x01B8
     f26:	b0 91 b9 01 	lds	r27, 0x01B9
     f2a:	bc 01       	movw	r22, r24
     f2c:	cd 01       	movw	r24, r26
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 ea       	ldi	r20, 0xA0	; 160
     f34:	51 e4       	ldi	r21, 0x41	; 65
     f36:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__cmpsf2>
     f3a:	88 23       	and	r24, r24
     f3c:	2c f4       	brge	.+10     	; 0xf48 <pwm_set_freq+0x6e>
		OCR2A = PWM_MIN_RES;
     f3e:	e3 eb       	ldi	r30, 0xB3	; 179
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	84 e1       	ldi	r24, 0x14	; 20
     f44:	80 83       	st	Z, r24
     f46:	29 c0       	rjmp	.+82     	; 0xf9a <pwm_set_freq+0xc0>
	} else if (device.pwm_freq >= PWM_MAX_RES) { 
     f48:	80 91 b6 01 	lds	r24, 0x01B6
     f4c:	90 91 b7 01 	lds	r25, 0x01B7
     f50:	a0 91 b8 01 	lds	r26, 0x01B8
     f54:	b0 91 b9 01 	lds	r27, 0x01B9
     f58:	bc 01       	movw	r22, r24
     f5a:	cd 01       	movw	r24, r26
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	4f e7       	ldi	r20, 0x7F	; 127
     f62:	53 e4       	ldi	r21, 0x43	; 67
     f64:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
     f68:	88 23       	and	r24, r24
     f6a:	2c f0       	brlt	.+10     	; 0xf76 <pwm_set_freq+0x9c>
		OCR2A = PWM_MAX_RES;
     f6c:	e3 eb       	ldi	r30, 0xB3	; 179
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	8f ef       	ldi	r24, 0xFF	; 255
     f72:	80 83       	st	Z, r24
     f74:	12 c0       	rjmp	.+36     	; 0xf9a <pwm_set_freq+0xc0>
	} else { 
		OCR2A = (uint8_t)device.pwm_freq;
     f76:	03 eb       	ldi	r16, 0xB3	; 179
     f78:	10 e0       	ldi	r17, 0x00	; 0
     f7a:	80 91 b6 01 	lds	r24, 0x01B6
     f7e:	90 91 b7 01 	lds	r25, 0x01B7
     f82:	a0 91 b8 01 	lds	r26, 0x01B8
     f86:	b0 91 b9 01 	lds	r27, 0x01B9
     f8a:	bc 01       	movw	r22, r24
     f8c:	cd 01       	movw	r24, r26
     f8e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__fixunssfsi>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	f8 01       	movw	r30, r16
     f98:	80 83       	st	Z, r24
	}
	return (SC_OK);
     f9a:	80 e0       	ldi	r24, 0x00	; 0
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	08 95       	ret

00000fae <pwm_set_duty>:
 *	Since I can't seem to get the output pin to work in non-inverted mode
 *	it's done in software in this routine.
 */

uint8_t pwm_set_duty(double duty)
{
     fae:	cf 92       	push	r12
     fb0:	df 92       	push	r13
     fb2:	ef 92       	push	r14
     fb4:	ff 92       	push	r15
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <pwm_set_duty+0x12>
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <pwm_set_duty+0x14>
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	69 83       	std	Y+1, r22	; 0x01
     fc8:	7a 83       	std	Y+2, r23	; 0x02
     fca:	8b 83       	std	Y+3, r24	; 0x03
     fcc:	9c 83       	std	Y+4, r25	; 0x04
	if (duty < 0.01) {				// anything approaching 0% 
     fce:	69 81       	ldd	r22, Y+1	; 0x01
     fd0:	7a 81       	ldd	r23, Y+2	; 0x02
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	9c 81       	ldd	r25, Y+4	; 0x04
     fd6:	2a e0       	ldi	r18, 0x0A	; 10
     fd8:	37 ed       	ldi	r19, 0xD7	; 215
     fda:	43 e2       	ldi	r20, 0x23	; 35
     fdc:	5c e3       	ldi	r21, 0x3C	; 60
     fde:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__cmpsf2>
     fe2:	88 23       	and	r24, r24
     fe4:	2c f4       	brge	.+10     	; 0xff0 <pwm_set_duty+0x42>
		OCR2B = 255;
     fe6:	e4 eb       	ldi	r30, 0xB4	; 180
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	80 83       	st	Z, r24
     fee:	4a c0       	rjmp	.+148    	; 0x1084 <pwm_set_duty+0xd6>
	} else if (duty > 99.9) { 		// anything approaching 100%
     ff0:	69 81       	ldd	r22, Y+1	; 0x01
     ff2:	7a 81       	ldd	r23, Y+2	; 0x02
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	9c 81       	ldd	r25, Y+4	; 0x04
     ff8:	2d ec       	ldi	r18, 0xCD	; 205
     ffa:	3c ec       	ldi	r19, 0xCC	; 204
     ffc:	47 ec       	ldi	r20, 0xC7	; 199
     ffe:	52 e4       	ldi	r21, 0x42	; 66
    1000:	0e 94 76 10 	call	0x20ec	; 0x20ec <__gesf2>
    1004:	18 16       	cp	r1, r24
    1006:	24 f4       	brge	.+8      	; 0x1010 <pwm_set_duty+0x62>
		OCR2B = 0;
    1008:	e4 eb       	ldi	r30, 0xB4	; 180
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	10 82       	st	Z, r1
    100e:	3a c0       	rjmp	.+116    	; 0x1084 <pwm_set_duty+0xd6>
	} else {
		OCR2B = (uint8_t)(OCR2A * (1-(duty/100)));
    1010:	0f 2e       	mov	r0, r31
    1012:	f4 eb       	ldi	r31, 0xB4	; 180
    1014:	cf 2e       	mov	r12, r31
    1016:	dd 24       	eor	r13, r13
    1018:	f0 2d       	mov	r31, r0
    101a:	e3 eb       	ldi	r30, 0xB3	; 179
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	aa 27       	eor	r26, r26
    1026:	97 fd       	sbrc	r25, 7
    1028:	a0 95       	com	r26
    102a:	ba 2f       	mov	r27, r26
    102c:	bc 01       	movw	r22, r24
    102e:	cd 01       	movw	r24, r26
    1030:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__floatsisf>
    1034:	7b 01       	movw	r14, r22
    1036:	8c 01       	movw	r16, r24
    1038:	69 81       	ldd	r22, Y+1	; 0x01
    103a:	7a 81       	ldd	r23, Y+2	; 0x02
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	48 ec       	ldi	r20, 0xC8	; 200
    1046:	52 ec       	ldi	r21, 0xC2	; 194
    1048:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <__divsf3>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	bc 01       	movw	r22, r24
    1052:	cd 01       	movw	r24, r26
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e8       	ldi	r20, 0x80	; 128
    105a:	5f e3       	ldi	r21, 0x3F	; 63
    105c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__addsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	9c 01       	movw	r18, r24
    1066:	ad 01       	movw	r20, r26
    1068:	c8 01       	movw	r24, r16
    106a:	b7 01       	movw	r22, r14
    106c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__mulsf3>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	bc 01       	movw	r22, r24
    1076:	cd 01       	movw	r24, r26
    1078:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	f6 01       	movw	r30, r12
    1082:	80 83       	st	Z, r24
	}
	OCR2A = (uint8_t)device.pwm_freq;
    1084:	03 eb       	ldi	r16, 0xB3	; 179
    1086:	10 e0       	ldi	r17, 0x00	; 0
    1088:	80 91 b6 01 	lds	r24, 0x01B6
    108c:	90 91 b7 01 	lds	r25, 0x01B7
    1090:	a0 91 b8 01 	lds	r26, 0x01B8
    1094:	b0 91 b9 01 	lds	r27, 0x01B9
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__fixunssfsi>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	f8 01       	movw	r30, r16
    10a6:	80 83       	st	Z, r24
	return (SC_OK);
    10a8:	80 e0       	ldi	r24, 0x00	; 0
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	ff 90       	pop	r15
    10bc:	ef 90       	pop	r14
    10be:	df 90       	pop	r13
    10c0:	cf 90       	pop	r12
    10c2:	08 95       	ret

000010c4 <tick_init>:
 * tick_100ms()	  - tasks that run every 100 ms
 * tick_1sec()	  - tasks that run every 100 ms
 */

void tick_init(void)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0x00;				// normal mode, no compare values
    10cc:	e4 e4       	ldi	r30, 0x44	; 68
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	10 82       	st	Z, r1
	TCCR0B = 0x05;				// normal mode, internal clock / 1024 ~= 7800 Hz
    10d2:	e5 e4       	ldi	r30, 0x45	; 69
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	85 e0       	ldi	r24, 0x05	; 5
    10d8:	80 83       	st	Z, r24
	TCNT0 = (256 - TICK_10MS_COUNT);// set timer for approx 10 ms overflow
    10da:	e6 e4       	ldi	r30, 0x46	; 70
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	82 eb       	ldi	r24, 0xB2	; 178
    10e0:	80 83       	st	Z, r24
	TIMSK0 = (1<<TOIE0);		// enable overflow interrupts
    10e2:	ee e6       	ldi	r30, 0x6E	; 110
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	80 83       	st	Z, r24
	device.tick_100ms_count = 10;
    10ea:	8a e0       	ldi	r24, 0x0A	; 10
    10ec:	80 93 b4 01 	sts	0x01B4, r24
	device.tick_1sec_count = 10;	
    10f0:	8a e0       	ldi	r24, 0x0A	; 10
    10f2:	80 93 b5 01 	sts	0x01B5, r24
}
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <__vector_16>:

ISR(TIMER0_OVF_vect)
{
    10fc:	1f 92       	push	r1
    10fe:	0f 92       	push	r0
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	0f 92       	push	r0
    1104:	11 24       	eor	r1, r1
    1106:	8f 93       	push	r24
    1108:	ef 93       	push	r30
    110a:	ff 93       	push	r31
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = (256 - TICK_10MS_COUNT);	// reset timer for approx 10 ms overflow
    1114:	e6 e4       	ldi	r30, 0x46	; 70
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	82 eb       	ldi	r24, 0xB2	; 178
    111a:	80 83       	st	Z, r24
	device.tick_flag = true;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	80 93 b3 01 	sts	0x01B3, r24
}
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	8f 91       	pop	r24
    112c:	0f 90       	pop	r0
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	0f 90       	pop	r0
    1132:	1f 90       	pop	r1
    1134:	18 95       	reti

00001136 <tick_callback>:

uint8_t tick_callback(void)
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	0f 92       	push	r0
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
	if (device.tick_flag == false) { return (SC_NOOP);}
    1140:	80 91 b3 01 	lds	r24, 0x01B3
    1144:	88 23       	and	r24, r24
    1146:	19 f4       	brne	.+6      	; 0x114e <tick_callback+0x18>
    1148:	83 e0       	ldi	r24, 0x03	; 3
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	25 c0       	rjmp	.+74     	; 0x1198 <tick_callback+0x62>
	device.tick_flag = false;
    114e:	10 92 b3 01 	sts	0x01B3, r1

	tick_10ms();
    1152:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <tick_10ms>

	if (--device.tick_100ms_count != 0) { return (SC_OK);}
    1156:	80 91 b4 01 	lds	r24, 0x01B4
    115a:	81 50       	subi	r24, 0x01	; 1
    115c:	80 93 b4 01 	sts	0x01B4, r24
    1160:	80 91 b4 01 	lds	r24, 0x01B4
    1164:	88 23       	and	r24, r24
    1166:	11 f0       	breq	.+4      	; 0x116c <tick_callback+0x36>
    1168:	19 82       	std	Y+1, r1	; 0x01
    116a:	16 c0       	rjmp	.+44     	; 0x1198 <tick_callback+0x62>
	device.tick_100ms_count = 10;
    116c:	8a e0       	ldi	r24, 0x0A	; 10
    116e:	80 93 b4 01 	sts	0x01B4, r24
	tick_100ms();
    1172:	0e 94 da 08 	call	0x11b4	; 0x11b4 <tick_100ms>

	if (--device.tick_1sec_count != 0) { return (SC_OK);}
    1176:	80 91 b5 01 	lds	r24, 0x01B5
    117a:	81 50       	subi	r24, 0x01	; 1
    117c:	80 93 b5 01 	sts	0x01B5, r24
    1180:	80 91 b5 01 	lds	r24, 0x01B5
    1184:	88 23       	and	r24, r24
    1186:	11 f0       	breq	.+4      	; 0x118c <tick_callback+0x56>
    1188:	19 82       	std	Y+1, r1	; 0x01
    118a:	06 c0       	rjmp	.+12     	; 0x1198 <tick_callback+0x62>
	device.tick_1sec_count = 10;
    118c:	8a e0       	ldi	r24, 0x0A	; 10
    118e:	80 93 b5 01 	sts	0x01B5, r24
	tick_1sec();
    1192:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <tick_1sec>

	return (SC_OK);
    1196:	19 82       	std	Y+1, r1	; 0x01
    1198:	89 81       	ldd	r24, Y+1	; 0x01
}
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <tick_10ms>:

void tick_10ms(void)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
	sensor_callback();			// run the temperature sensor every 10 ms.
    11aa:	0e 94 42 05 	call	0xa84	; 0xa84 <sensor_callback>
}
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <tick_100ms>:

void tick_100ms(void)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
	heater_callback();			// run the heater controller every 100 ms.
    11bc:	0e 94 35 01 	call	0x26a	; 0x26a <heater_callback>
}
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <tick_1sec>:

void tick_1sec(void)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
//	led_toggle();
	return;
}
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <led_on>:
 * led_off()
 * led_toggle()
 */

void led_on(void) 
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
	LED_PORT &= ~(LED_PIN);
    11dc:	ab e2       	ldi	r26, 0x2B	; 43
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	eb e2       	ldi	r30, 0x2B	; 43
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	8b 7f       	andi	r24, 0xFB	; 251
    11e8:	8c 93       	st	X, r24
}
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <led_off>:

void led_off(void) 
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
	LED_PORT |= LED_PIN;
    11f8:	ab e2       	ldi	r26, 0x2B	; 43
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	eb e2       	ldi	r30, 0x2B	; 43
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	84 60       	ori	r24, 0x04	; 4
    1204:	8c 93       	st	X, r24
}
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <led_toggle>:

void led_toggle(void) 
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
	if (LED_PORT && LED_PIN) {
    1214:	eb e2       	ldi	r30, 0x2B	; 43
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	88 23       	and	r24, r24
    121c:	19 f0       	breq	.+6      	; 0x1224 <led_toggle+0x18>
		led_on();
    121e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <led_on>
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <led_toggle+0x1c>
	} else {
		led_off();
    1224:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <led_off>
	}
}
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <device_reset>:
 *	device_read_byte() 	- read a byte from Kinen channel into device structs
 *	device_write_byte() - write a byte from device to Kinen channel
 */

void device_reset(void)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
	return;
}
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <device_read_byte>:

uint8_t device_read_byte(uint8_t addr, uint8_t *data)
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	00 d0       	rcall	.+0      	; 0x1242 <device_read_byte+0x6>
    1242:	00 d0       	rcall	.+0      	; 0x1244 <device_read_byte+0x8>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	7b 83       	std	Y+3, r23	; 0x03
    124c:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	80 51       	subi	r24, 0x10	; 16
    1252:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	8b 30       	cpi	r24, 0x0B	; 11
    1258:	18 f0       	brcs	.+6      	; 0x1260 <device_read_byte+0x24>
    125a:	88 e1       	ldi	r24, 0x18	; 24
    125c:	8c 83       	std	Y+4, r24	; 0x04
    125e:	0b c0       	rjmp	.+22     	; 0x1276 <device_read_byte+0x3a>
	*data = device.array[addr];
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	fc 01       	movw	r30, r24
    1268:	e6 54       	subi	r30, 0x46	; 70
    126a:	fe 4f       	sbci	r31, 0xFE	; 254
    126c:	80 81       	ld	r24, Z
    126e:	ea 81       	ldd	r30, Y+2	; 0x02
    1270:	fb 81       	ldd	r31, Y+3	; 0x03
    1272:	80 83       	st	Z, r24
	return (SC_OK);
    1274:	1c 82       	std	Y+4, r1	; 0x04
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <device_write_byte>:

uint8_t device_write_byte(uint8_t addr, uint8_t data)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <device_write_byte+0x6>
    128c:	0f 92       	push	r0
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	80 51       	subi	r24, 0x10	; 16
    129a:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	8b 30       	cpi	r24, 0x0B	; 11
    12a0:	18 f0       	brcs	.+6      	; 0x12a8 <device_write_byte+0x22>
    12a2:	88 e1       	ldi	r24, 0x18	; 24
    12a4:	8b 83       	std	Y+3, r24	; 0x03
    12a6:	09 c0       	rjmp	.+18     	; 0x12ba <device_write_byte+0x34>
	// There are no checks in here for read-only locations
	// Assumes all locations are writable.
	device.array[addr] = data;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	fc 01       	movw	r30, r24
    12b0:	e6 54       	subi	r30, 0x46	; 70
    12b2:	fe 4f       	sbci	r31, 0xFE	; 254
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	80 83       	st	Z, r24
	return (SC_OK);
    12b8:	1b 82       	std	Y+3, r1	; 0x03
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
}
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <kinen_init>:
 * kinen_init() - set up Kinen subsystems; master or slave
 *
 *	Would like some kind of auto-detect here. For now it's just commenting
 */
void kinen_init(void)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
//	kinen_master_init();
	kinen_slave_init();
    12d0:	0e 94 75 09 	call	0x12ea	; 0x12ea <kinen_slave_init>
}
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <kinen_callback>:
 *	Returns SC_NOOP if no operation was performed
 *	Returns EAGAIN if the function should block lower-priority functions
 *	in the main DISPATCH loop
 */
uint8_t kinen_callback(void)
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
//	return (SC_OK);			// return from a successful operation
//	return (SC_EAGAIN);		// return if lower priority tasks should be blocked
	return (SC_NOOP);		// return if no operation was performed 
    12e2:	83 e0       	ldi	r24, 0x03	; 3
}
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <kinen_slave_init>:

/*
 * kinen_slave_init() - setup atmega SPI peripheral to be the OCB slave 
 */
void kinen_slave_init(void)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62

//	PRR |= 0x07;				// don't screw with the power reduction register
	DDRB &= ~(1<<DDB4);			// Set MISO output, all others unaffected
    12f2:	a4 e2       	ldi	r26, 0x24	; 36
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e4 e2       	ldi	r30, 0x24	; 36
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	8f 7e       	andi	r24, 0xEF	; 239
    12fe:	8c 93       	st	X, r24
	SPCR = (1<<SPIE | 1<<SPE);	// Enable SPI and its interrupt, set MSB first, slave mode
    1300:	ec e4       	ldi	r30, 0x4C	; 76
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 ec       	ldi	r24, 0xC0	; 192
    1306:	80 83       	st	Z, r24
	SPCR = (1<<CPOL | 1<<CPHA);	// Uncomment for mode 3 operation, comment for mode 0
    1308:	ec e4       	ldi	r30, 0x4C	; 76
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	8c e0       	ldi	r24, 0x0C	; 12
    130e:	80 83       	st	Z, r24
	memset(&ki.array, 0, sizeof(ki.array));
    1310:	80 e6       	ldi	r24, 0x60	; 96
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	40 e1       	ldi	r20, 0x10	; 16
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <memset>

	ki_wait_time = DEVICE_WAIT_TIME;	// setup read-only values
    1320:	8a e0       	ldi	r24, 0x0A	; 10
    1322:	80 93 63 01 	sts	0x0163, r24
	ki_device_type = DEVICE_TYPE;
    1326:	84 e0       	ldi	r24, 0x04	; 4
    1328:	80 93 68 01 	sts	0x0168, r24
	ki_device_id_hi = DEVICE_ID_HI;
    132c:	10 92 69 01 	sts	0x0169, r1
	ki_device_id_lo = DEVICE_ID_LO;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	80 93 6a 01 	sts	0x016A, r24
	ki_device_rev_major = DEVICE_REV_MAJOR;
    1336:	10 92 6b 01 	sts	0x016B, r1
	ki_device_rev_minor = DEVICE_REV_MINOR;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	80 93 6c 01 	sts	0x016C, r24
	ki_device_uuid_1 = DEVICE_UUID_1;
    1340:	10 92 6d 01 	sts	0x016D, r1
	ki_device_uuid_2 = DEVICE_UUID_2;
    1344:	10 92 6e 01 	sts	0x016E, r1
	ki_device_uuid_3 = DEVICE_UUID_3;
    1348:	10 92 6f 01 	sts	0x016F, r1

	ki_status = SC_OK;
    134c:	10 92 61 01 	sts	0x0161, r1
	SPDR = ki_status;
    1350:	ee e4       	ldi	r30, 0x4E	; 78
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 91 61 01 	lds	r24, 0x0161
    1358:	80 83       	st	Z, r24
}
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <__vector_17>:
 * SPI Slave RX Interrupt() - interrupts on byte received
 *
 * Uses a 2 phase state machine to toggle back and forth between ADDR and DATA bytes
 */
ISR(SPI_STC_vect)
{
    1360:	1f 92       	push	r1
    1362:	0f 92       	push	r0
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	0f 92       	push	r0
    1368:	11 24       	eor	r1, r1
    136a:	2f 93       	push	r18
    136c:	3f 93       	push	r19
    136e:	4f 93       	push	r20
    1370:	5f 93       	push	r21
    1372:	6f 93       	push	r22
    1374:	7f 93       	push	r23
    1376:	8f 93       	push	r24
    1378:	9f 93       	push	r25
    137a:	af 93       	push	r26
    137c:	bf 93       	push	r27
    137e:	ef 93       	push	r30
    1380:	ff 93       	push	r31
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
	// receive address byte
	if (ki_slave.phase == KINEN_ADDR) {
    138a:	80 91 00 01 	lds	r24, 0x0100
    138e:	88 23       	and	r24, r24
    1390:	c9 f5       	brne	.+114    	; 0x1404 <__vector_17+0xa4>
		ki_slave.phase = KINEN_DATA;	// advance phase
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	80 93 00 01 	sts	0x0100, r24
		ki_slave.addr = SPDR;		// read and save the address byte
    1398:	ee e4       	ldi	r30, 0x4E	; 78
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	80 93 01 01 	sts	0x0101, r24
		if (ki_command == KINEN_WRITE) { // write is simple...
    13a2:	80 91 60 01 	lds	r24, 0x0160
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	29 f4       	brne	.+10     	; 0x13b4 <__vector_17+0x54>
			SPDR = KINEN_OK_BYTE;			// already saved addr, now return an OK
    13aa:	ee e4       	ldi	r30, 0x4E	; 78
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	8a e5       	ldi	r24, 0x5A	; 90
    13b0:	80 83       	st	Z, r24
    13b2:	4a c0       	rjmp	.+148    	; 0x1448 <__vector_17+0xe8>
		} else {
			if (ki_slave.addr < KINEN_COMMON_MAX) {	// handle OCB address space
    13b4:	80 91 01 01 	lds	r24, 0x0101
    13b8:	80 31       	cpi	r24, 0x10	; 16
    13ba:	60 f4       	brcc	.+24     	; 0x13d4 <__vector_17+0x74>
				SPDR = ki.array[ki_slave.addr];
    13bc:	ae e4       	ldi	r26, 0x4E	; 78
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	80 91 01 01 	lds	r24, 0x0101
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	fc 01       	movw	r30, r24
    13ca:	e0 5a       	subi	r30, 0xA0	; 160
    13cc:	fe 4f       	sbci	r31, 0xFE	; 254
    13ce:	80 81       	ld	r24, Z
    13d0:	8c 93       	st	X, r24
    13d2:	3a c0       	rjmp	.+116    	; 0x1448 <__vector_17+0xe8>
			} else {								// handle device address space
				if ((ki_status = device_read_byte(ki_slave.addr, &ki_slave.data)) == SC_OK) {
    13d4:	80 91 01 01 	lds	r24, 0x0101
    13d8:	22 e0       	ldi	r18, 0x02	; 2
    13da:	31 e0       	ldi	r19, 0x01	; 1
    13dc:	b9 01       	movw	r22, r18
    13de:	0e 94 1e 09 	call	0x123c	; 0x123c <device_read_byte>
    13e2:	80 93 61 01 	sts	0x0161, r24
    13e6:	80 91 61 01 	lds	r24, 0x0161
    13ea:	88 23       	and	r24, r24
    13ec:	31 f4       	brne	.+12     	; 0x13fa <__vector_17+0x9a>
					SPDR = ki_slave.data;
    13ee:	ee e4       	ldi	r30, 0x4E	; 78
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 91 02 01 	lds	r24, 0x0102
    13f6:	80 83       	st	Z, r24
    13f8:	27 c0       	rjmp	.+78     	; 0x1448 <__vector_17+0xe8>
				} else {
					SPDR = KINEN_ERR_BYTE;
    13fa:	ee e4       	ldi	r30, 0x4E	; 78
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	85 ea       	ldi	r24, 0xA5	; 165
    1400:	80 83       	st	Z, r24
    1402:	22 c0       	rjmp	.+68     	; 0x1448 <__vector_17+0xe8>
			}
		}

	// receive data byte
	} else {
		ki_slave.phase = KINEN_ADDR;	// advance phase
    1404:	10 92 00 01 	sts	0x0100, r1
		ki_slave.data = SPDR;		// read and save the data byte
    1408:	ee e4       	ldi	r30, 0x4E	; 78
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	80 93 02 01 	sts	0x0102, r24
		if (ki_command == KINEN_WRITE) {
    1412:	80 91 60 01 	lds	r24, 0x0160
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	b9 f4       	brne	.+46     	; 0x1448 <__vector_17+0xe8>
			if (ki_slave.addr < KINEN_COMMON_MAX) {
    141a:	80 91 01 01 	lds	r24, 0x0101
    141e:	80 31       	cpi	r24, 0x10	; 16
    1420:	50 f4       	brcc	.+20     	; 0x1436 <__vector_17+0xd6>
				ki_status = _slave_write_byte(ki_slave.addr, ki_slave.data);
    1422:	80 91 01 01 	lds	r24, 0x0101
    1426:	90 91 02 01 	lds	r25, 0x0102
    142a:	69 2f       	mov	r22, r25
    142c:	0e 94 37 0a 	call	0x146e	; 0x146e <_slave_write_byte>
    1430:	80 93 61 01 	sts	0x0161, r24
    1434:	09 c0       	rjmp	.+18     	; 0x1448 <__vector_17+0xe8>
			} else {
				ki_status = device_write_byte(ki_slave.addr, ki_slave.data);
    1436:	80 91 01 01 	lds	r24, 0x0101
    143a:	90 91 02 01 	lds	r25, 0x0102
    143e:	69 2f       	mov	r22, r25
    1440:	0e 94 43 09 	call	0x1286	; 0x1286 <device_write_byte>
    1444:	80 93 61 01 	sts	0x0161, r24
			}
		}
	}
}
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	ff 91       	pop	r31
    144e:	ef 91       	pop	r30
    1450:	bf 91       	pop	r27
    1452:	af 91       	pop	r26
    1454:	9f 91       	pop	r25
    1456:	8f 91       	pop	r24
    1458:	7f 91       	pop	r23
    145a:	6f 91       	pop	r22
    145c:	5f 91       	pop	r21
    145e:	4f 91       	pop	r20
    1460:	3f 91       	pop	r19
    1462:	2f 91       	pop	r18
    1464:	0f 90       	pop	r0
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	0f 90       	pop	r0
    146a:	1f 90       	pop	r1
    146c:	18 95       	reti

0000146e <_slave_write_byte>:

/* 
 * _slave_write_byte() - helper to write byte to a non-device address
 */
static uint8_t _slave_write_byte(const uint8_t addr, const uint8_t data)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <_slave_write_byte+0x6>
    1474:	0f 92       	push	r0
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	6a 83       	std	Y+2, r22	; 0x02
	if (addr == KINEN_COMMAND) {
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	88 23       	and	r24, r24
    1482:	21 f4       	brne	.+8      	; 0x148c <_slave_write_byte+0x1e>
		ki_command = data; 
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	80 93 60 01 	sts	0x0160, r24
    148a:	12 c0       	rjmp	.+36     	; 0x14b0 <_slave_write_byte+0x42>

	} else if (addr == KINEN_ADDR_PAGE) { 
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	84 30       	cpi	r24, 0x04	; 4
    1490:	21 f4       	brne	.+8      	; 0x149a <_slave_write_byte+0x2c>
		ki_addr_page = data; 
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	80 93 64 01 	sts	0x0164, r24
    1498:	0b c0       	rjmp	.+22     	; 0x14b0 <_slave_write_byte+0x42>

	} else if (addr == KINEN_RESET) {
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	85 30       	cpi	r24, 0x05	; 5
    149e:	29 f4       	brne	.+10     	; 0x14aa <_slave_write_byte+0x3c>
		kinen_slave_init();
    14a0:	0e 94 75 09 	call	0x12ea	; 0x12ea <kinen_slave_init>
		device_reset();
    14a4:	0e 94 17 09 	call	0x122e	; 0x122e <device_reset>
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <_slave_write_byte+0x42>

	} else {
		return (SC_READ_ONLY_ADDRESS);
    14aa:	89 e1       	ldi	r24, 0x19	; 25
    14ac:	8b 83       	std	Y+3, r24	; 0x03
    14ae:	01 c0       	rjmp	.+2      	; 0x14b2 <_slave_write_byte+0x44>
	}
	return (SC_OK);
    14b0:	1b 82       	std	Y+3, r1	; 0x03
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <std_dev>:
 *
 *	"A lot of people talk about standard deviation but what is a standard deviant?"
 */

double std_dev(double a[], uint8_t n, double *mean) 
{
    14c0:	ef 92       	push	r14
    14c2:	ff 92       	push	r15
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	66 97       	sbiw	r28, 0x16	; 22
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	9f 87       	std	Y+15, r25	; 0x0f
    14de:	8e 87       	std	Y+14, r24	; 0x0e
    14e0:	68 8b       	std	Y+16, r22	; 0x10
    14e2:	5a 8b       	std	Y+18, r21	; 0x12
    14e4:	49 8b       	std	Y+17, r20	; 0x11
	if(n == 0) { return (0);}
    14e6:	88 89       	ldd	r24, Y+16	; 0x10
    14e8:	88 23       	and	r24, r24
    14ea:	49 f4       	brne	.+18     	; 0x14fe <std_dev+0x3e>
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a0 e0       	ldi	r26, 0x00	; 0
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	8b 8b       	std	Y+19, r24	; 0x13
    14f6:	9c 8b       	std	Y+20, r25	; 0x14
    14f8:	ad 8b       	std	Y+21, r26	; 0x15
    14fa:	be 8b       	std	Y+22, r27	; 0x16
    14fc:	ae c0       	rjmp	.+348    	; 0x165a <std_dev+0x19a>
	double sum = 0;
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a0 e0       	ldi	r26, 0x00	; 0
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	8a 87       	std	Y+10, r24	; 0x0a
    1508:	9b 87       	std	Y+11, r25	; 0x0b
    150a:	ac 87       	std	Y+12, r26	; 0x0c
    150c:	bd 87       	std	Y+13, r27	; 0x0d
	double sq_sum = 0;
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a0 e0       	ldi	r26, 0x00	; 0
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	8e 83       	std	Y+6, r24	; 0x06
    1518:	9f 83       	std	Y+7, r25	; 0x07
    151a:	a8 87       	std	Y+8, r26	; 0x08
    151c:	b9 87       	std	Y+9, r27	; 0x09
	for(uint8_t i=0; i<n; ++i) {
    151e:	19 82       	std	Y+1, r1	; 0x01
    1520:	43 c0       	rjmp	.+134    	; 0x15a8 <std_dev+0xe8>
		sum += a[i];
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	88 2f       	mov	r24, r24
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	9c 01       	movw	r18, r24
    152a:	22 0f       	add	r18, r18
    152c:	33 1f       	adc	r19, r19
    152e:	22 0f       	add	r18, r18
    1530:	33 1f       	adc	r19, r19
    1532:	8e 85       	ldd	r24, Y+14	; 0x0e
    1534:	9f 85       	ldd	r25, Y+15	; 0x0f
    1536:	fc 01       	movw	r30, r24
    1538:	e2 0f       	add	r30, r18
    153a:	f3 1f       	adc	r31, r19
    153c:	20 81       	ld	r18, Z
    153e:	31 81       	ldd	r19, Z+1	; 0x01
    1540:	42 81       	ldd	r20, Z+2	; 0x02
    1542:	53 81       	ldd	r21, Z+3	; 0x03
    1544:	6a 85       	ldd	r22, Y+10	; 0x0a
    1546:	7b 85       	ldd	r23, Y+11	; 0x0b
    1548:	8c 85       	ldd	r24, Y+12	; 0x0c
    154a:	9d 85       	ldd	r25, Y+13	; 0x0d
    154c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__addsf3>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	8a 87       	std	Y+10, r24	; 0x0a
    1556:	9b 87       	std	Y+11, r25	; 0x0b
    1558:	ac 87       	std	Y+12, r26	; 0x0c
    155a:	bd 87       	std	Y+13, r27	; 0x0d
		sq_sum += square(a[i]);
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	88 2f       	mov	r24, r24
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9c 01       	movw	r18, r24
    1564:	22 0f       	add	r18, r18
    1566:	33 1f       	adc	r19, r19
    1568:	22 0f       	add	r18, r18
    156a:	33 1f       	adc	r19, r19
    156c:	8e 85       	ldd	r24, Y+14	; 0x0e
    156e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1570:	fc 01       	movw	r30, r24
    1572:	e2 0f       	add	r30, r18
    1574:	f3 1f       	adc	r31, r19
    1576:	80 81       	ld	r24, Z
    1578:	91 81       	ldd	r25, Z+1	; 0x01
    157a:	a2 81       	ldd	r26, Z+2	; 0x02
    157c:	b3 81       	ldd	r27, Z+3	; 0x03
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	0e 94 1f 11 	call	0x223e	; 0x223e <square>
    1586:	9b 01       	movw	r18, r22
    1588:	ac 01       	movw	r20, r24
    158a:	6e 81       	ldd	r22, Y+6	; 0x06
    158c:	7f 81       	ldd	r23, Y+7	; 0x07
    158e:	88 85       	ldd	r24, Y+8	; 0x08
    1590:	99 85       	ldd	r25, Y+9	; 0x09
    1592:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__addsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	8e 83       	std	Y+6, r24	; 0x06
    159c:	9f 83       	std	Y+7, r25	; 0x07
    159e:	a8 87       	std	Y+8, r26	; 0x08
    15a0:	b9 87       	std	Y+9, r27	; 0x09
double std_dev(double a[], uint8_t n, double *mean) 
{
	if(n == 0) { return (0);}
	double sum = 0;
	double sq_sum = 0;
	for(uint8_t i=0; i<n; ++i) {
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	8f 5f       	subi	r24, 0xFF	; 255
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	99 81       	ldd	r25, Y+1	; 0x01
    15aa:	88 89       	ldd	r24, Y+16	; 0x10
    15ac:	98 17       	cp	r25, r24
    15ae:	08 f4       	brcc	.+2      	; 0x15b2 <std_dev+0xf2>
    15b0:	b8 cf       	rjmp	.-144    	; 0x1522 <std_dev+0x62>
		sum += a[i];
		sq_sum += square(a[i]);
	}
	*mean = sum / n;
    15b2:	88 89       	ldd	r24, Y+16	; 0x10
    15b4:	88 2f       	mov	r24, r24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	aa 27       	eor	r26, r26
    15ba:	97 fd       	sbrc	r25, 7
    15bc:	a0 95       	com	r26
    15be:	ba 2f       	mov	r27, r26
    15c0:	bc 01       	movw	r22, r24
    15c2:	cd 01       	movw	r24, r26
    15c4:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__floatsisf>
    15c8:	9b 01       	movw	r18, r22
    15ca:	ac 01       	movw	r20, r24
    15cc:	6a 85       	ldd	r22, Y+10	; 0x0a
    15ce:	7b 85       	ldd	r23, Y+11	; 0x0b
    15d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    15d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    15d4:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <__divsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	e9 89       	ldd	r30, Y+17	; 0x11
    15de:	fa 89       	ldd	r31, Y+18	; 0x12
    15e0:	80 83       	st	Z, r24
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	a2 83       	std	Z+2, r26	; 0x02
    15e6:	b3 83       	std	Z+3, r27	; 0x03
	double variance = (sq_sum / n) - square(*mean);
    15e8:	88 89       	ldd	r24, Y+16	; 0x10
    15ea:	88 2f       	mov	r24, r24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	aa 27       	eor	r26, r26
    15f0:	97 fd       	sbrc	r25, 7
    15f2:	a0 95       	com	r26
    15f4:	ba 2f       	mov	r27, r26
    15f6:	bc 01       	movw	r22, r24
    15f8:	cd 01       	movw	r24, r26
    15fa:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__floatsisf>
    15fe:	9b 01       	movw	r18, r22
    1600:	ac 01       	movw	r20, r24
    1602:	6e 81       	ldd	r22, Y+6	; 0x06
    1604:	7f 81       	ldd	r23, Y+7	; 0x07
    1606:	88 85       	ldd	r24, Y+8	; 0x08
    1608:	99 85       	ldd	r25, Y+9	; 0x09
    160a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <__divsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	7c 01       	movw	r14, r24
    1614:	8d 01       	movw	r16, r26
    1616:	e9 89       	ldd	r30, Y+17	; 0x11
    1618:	fa 89       	ldd	r31, Y+18	; 0x12
    161a:	80 81       	ld	r24, Z
    161c:	91 81       	ldd	r25, Z+1	; 0x01
    161e:	a2 81       	ldd	r26, Z+2	; 0x02
    1620:	b3 81       	ldd	r27, Z+3	; 0x03
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	0e 94 1f 11 	call	0x223e	; 0x223e <square>
    162a:	9b 01       	movw	r18, r22
    162c:	ac 01       	movw	r20, r24
    162e:	c8 01       	movw	r24, r16
    1630:	b7 01       	movw	r22, r14
    1632:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__subsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	8a 83       	std	Y+2, r24	; 0x02
    163c:	9b 83       	std	Y+3, r25	; 0x03
    163e:	ac 83       	std	Y+4, r26	; 0x04
    1640:	bd 83       	std	Y+5, r27	; 0x05
	return sqrt(variance);
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	9b 81       	ldd	r25, Y+3	; 0x03
    1646:	ac 81       	ldd	r26, Y+4	; 0x04
    1648:	bd 81       	ldd	r27, Y+5	; 0x05
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <sqrt>
    1652:	6b 8b       	std	Y+19, r22	; 0x13
    1654:	7c 8b       	std	Y+20, r23	; 0x14
    1656:	8d 8b       	std	Y+21, r24	; 0x15
    1658:	9e 8b       	std	Y+22, r25	; 0x16
    165a:	8b 89       	ldd	r24, Y+19	; 0x13
    165c:	9c 89       	ldd	r25, Y+20	; 0x14
    165e:	ad 89       	ldd	r26, Y+21	; 0x15
    1660:	be 89       	ldd	r27, Y+22	; 0x16
}
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	66 96       	adiw	r28, 0x16	; 22
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	08 95       	ret

00001680 <set_baud_rate>:
uint8_t rx_buffer_tail = 0;
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_buffer_head = 0;
volatile uint8_t tx_buffer_tail = 0;

static void set_baud_rate(long baud) {
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	00 d0       	rcall	.+0      	; 0x1686 <set_baud_rate+0x6>
    1686:	00 d0       	rcall	.+0      	; 0x1688 <set_baud_rate+0x8>
    1688:	00 d0       	rcall	.+0      	; 0x168a <set_baud_rate+0xa>
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	6b 83       	std	Y+3, r22	; 0x03
    1690:	7c 83       	std	Y+4, r23	; 0x04
    1692:	8d 83       	std	Y+5, r24	; 0x05
    1694:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t UBRR0_value = (F_CPU / (8 * baud)) - 1;
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	ad 81       	ldd	r26, Y+5	; 0x05
    169c:	be 81       	ldd	r27, Y+6	; 0x06
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	aa 1f       	adc	r26, r26
    16a4:	bb 1f       	adc	r27, r27
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	aa 1f       	adc	r26, r26
    16ac:	bb 1f       	adc	r27, r27
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	aa 1f       	adc	r26, r26
    16b4:	bb 1f       	adc	r27, r27
    16b6:	9c 01       	movw	r18, r24
    16b8:	ad 01       	movw	r20, r26
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	92 e1       	ldi	r25, 0x12	; 18
    16be:	aa e7       	ldi	r26, 0x7A	; 122
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    16ca:	da 01       	movw	r26, r20
    16cc:	c9 01       	movw	r24, r18
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	9a 83       	std	Y+2, r25	; 0x02
    16d2:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = UBRR0_value >> 8;
    16d4:	e5 ec       	ldi	r30, 0xC5	; 197
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	89 2f       	mov	r24, r25
    16de:	99 27       	eor	r25, r25
    16e0:	80 83       	st	Z, r24
	UBRR0L = UBRR0_value;
    16e2:	e4 ec       	ldi	r30, 0xC4	; 196
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	80 83       	st	Z, r24
	UCSR0A &= ~(1<<U2X0);		// baud doubler off
    16ea:	a0 ec       	ldi	r26, 0xC0	; 192
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e0 ec       	ldi	r30, 0xC0	; 192
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	8d 7f       	andi	r24, 0xFD	; 253
    16f6:	8c 93       	st	X, r24
}
    16f8:	26 96       	adiw	r28, 0x06	; 6
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <serial_init>:

void serial_init(long baud)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <serial_init+0x6>
    1710:	00 d0       	rcall	.+0      	; 0x1712 <serial_init+0x8>
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	69 83       	std	Y+1, r22	; 0x01
    1718:	7a 83       	std	Y+2, r23	; 0x02
    171a:	8b 83       	std	Y+3, r24	; 0x03
    171c:	9c 83       	std	Y+4, r25	; 0x04
	set_baud_rate(baud);
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	9a 81       	ldd	r25, Y+2	; 0x02
    1722:	ab 81       	ldd	r26, Y+3	; 0x03
    1724:	bc 81       	ldd	r27, Y+4	; 0x04
    1726:	bc 01       	movw	r22, r24
    1728:	cd 01       	movw	r24, r26
    172a:	0e 94 40 0b 	call	0x1680	; 0x1680 <set_baud_rate>
	UCSR0B |= 1<<RXEN0;			// enable rx and tx
    172e:	a1 ec       	ldi	r26, 0xC1	; 193
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e1 ec       	ldi	r30, 0xC1	; 193
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	80 61       	ori	r24, 0x10	; 16
    173a:	8c 93       	st	X, r24
	UCSR0B |= 1<<TXEN0;	
    173c:	a1 ec       	ldi	r26, 0xC1	; 193
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e1 ec       	ldi	r30, 0xC1	; 193
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	88 60       	ori	r24, 0x08	; 8
    1748:	8c 93       	st	X, r24
	UCSR0B |= 1<<RXCIE0;		// enable interrupt on complete reception of a byte
    174a:	a1 ec       	ldi	r26, 0xC1	; 193
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e1 ec       	ldi	r30, 0xC1	; 193
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	80 68       	ori	r24, 0x80	; 128
    1756:	8c 93       	st	X, r24
	// USART defaults to 8-bit, no parity, 1 stop bit
}
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <serial_write>:

void serial_write(uint8_t data) {
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <serial_write+0x6>
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = tx_buffer_head + 1;	// Calculate next head
    1772:	80 91 05 01 	lds	r24, 0x0105
    1776:	8f 5f       	subi	r24, 0xFF	; 255
    1778:	89 83       	std	Y+1, r24	; 0x01
	if (next_head == TX_BUFFER_SIZE) {
		next_head = 0; 
	}
	// Enable Data Register Empty Interrupt to make sure tx-streaming is running
	UCSR0B |= (1<<UDRIE0); 
    177a:	a1 ec       	ldi	r26, 0xC1	; 193
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e1 ec       	ldi	r30, 0xC1	; 193
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	80 62       	ori	r24, 0x20	; 32
    1786:	8c 93       	st	X, r24
	while (next_head == tx_buffer_tail); 	// Wait until there is space in the buffer
    1788:	90 91 06 01 	lds	r25, 0x0106
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	89 17       	cp	r24, r25
    1790:	d9 f3       	breq	.-10     	; 0x1788 <serial_write+0x22>

	tx_buffer[tx_buffer_head] = data;		// Store data and advance head
    1792:	80 91 05 01 	lds	r24, 0x0105
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	fc 01       	movw	r30, r24
    179c:	eb 53       	subi	r30, 0x3B	; 59
    179e:	fd 4f       	sbci	r31, 0xFD	; 253
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	80 83       	st	Z, r24
	tx_buffer_head = next_head;
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	80 93 05 01 	sts	0x0105, r24
}
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <__vector_19>:

// Data Register Empty Interrupt handler
ISR(USART_UDRE_vect)
{
    17b4:	1f 92       	push	r1
    17b6:	0f 92       	push	r0
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	0f 92       	push	r0
    17bc:	11 24       	eor	r1, r1
    17be:	8f 93       	push	r24
    17c0:	9f 93       	push	r25
    17c2:	af 93       	push	r26
    17c4:	bf 93       	push	r27
    17c6:	ef 93       	push	r30
    17c8:	ff 93       	push	r31
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	0f 92       	push	r0
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
	uint8_t tail = tx_buffer_tail;	// Temporary tx_buffer_tail (to optimize for volatile)
    17d4:	80 91 06 01 	lds	r24, 0x0106
    17d8:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = tx_buffer[tail];			// Send a byte from the buffer	
    17da:	a6 ec       	ldi	r26, 0xC6	; 198
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	fc 01       	movw	r30, r24
    17e6:	eb 53       	subi	r30, 0x3B	; 59
    17e8:	fd 4f       	sbci	r31, 0xFD	; 253
    17ea:	80 81       	ld	r24, Z
    17ec:	8c 93       	st	X, r24
    tail++;							// Update tail position
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	8f 5f       	subi	r24, 0xFF	; 255
    17f2:	89 83       	std	Y+1, r24	; 0x01
    if (tail == TX_BUFFER_SIZE) { tail = 0; }
	tx_buffer_tail = tail;
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	80 93 06 01 	sts	0x0106, r24

	// Turn off Data Register Empty Interrupt to stop tx-streaming if this concludes the transfer
	if (tail == tx_buffer_head) { 
    17fa:	90 91 05 01 	lds	r25, 0x0105
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	89 17       	cp	r24, r25
    1802:	39 f4       	brne	.+14     	; 0x1812 <__vector_19+0x5e>
		UCSR0B &= ~(1<<UDRIE0);
    1804:	a1 ec       	ldi	r26, 0xC1	; 193
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e1 ec       	ldi	r30, 0xC1	; 193
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	8f 7d       	andi	r24, 0xDF	; 223
    1810:	8c 93       	st	X, r24
	}
}
    1812:	0f 90       	pop	r0
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	ff 91       	pop	r31
    181a:	ef 91       	pop	r30
    181c:	bf 91       	pop	r27
    181e:	af 91       	pop	r26
    1820:	9f 91       	pop	r25
    1822:	8f 91       	pop	r24
    1824:	0f 90       	pop	r0
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	0f 90       	pop	r0
    182a:	1f 90       	pop	r1
    182c:	18 95       	reti

0000182e <serial_read>:

uint8_t serial_read()
{
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	00 d0       	rcall	.+0      	; 0x1834 <serial_read+0x6>
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
	if (rx_buffer_head == rx_buffer_tail) {
    1838:	90 91 03 01 	lds	r25, 0x0103
    183c:	80 91 04 01 	lds	r24, 0x0104
    1840:	98 17       	cp	r25, r24
    1842:	19 f4       	brne	.+6      	; 0x184a <serial_read+0x1c>
		return SERIAL_NO_DATA;
    1844:	8f ef       	ldi	r24, 0xFF	; 255
    1846:	8a 83       	std	Y+2, r24	; 0x02
    1848:	10 c0       	rjmp	.+32     	; 0x186a <serial_read+0x3c>
	} else {
		uint8_t data = rx_buffer[rx_buffer_tail];
    184a:	80 91 04 01 	lds	r24, 0x0104
    184e:	88 2f       	mov	r24, r24
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	fc 01       	movw	r30, r24
    1854:	eb 53       	subi	r30, 0x3B	; 59
    1856:	fe 4f       	sbci	r31, 0xFE	; 254
    1858:	80 81       	ld	r24, Z
    185a:	89 83       	std	Y+1, r24	; 0x01
		rx_buffer_tail++;
    185c:	80 91 04 01 	lds	r24, 0x0104
    1860:	8f 5f       	subi	r24, 0xFF	; 255
    1862:	80 93 04 01 	sts	0x0104, r24
		if (rx_buffer_tail == RX_BUFFER_SIZE) { rx_buffer_tail = 0; }
		return data;
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	8a 83       	std	Y+2, r24	; 0x02
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <__vector_18>:

ISR(USART_RX_vect)
{
    1876:	1f 92       	push	r1
    1878:	0f 92       	push	r0
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	0f 92       	push	r0
    187e:	11 24       	eor	r1, r1
    1880:	8f 93       	push	r24
    1882:	9f 93       	push	r25
    1884:	ef 93       	push	r30
    1886:	ff 93       	push	r31
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	00 d0       	rcall	.+0      	; 0x188e <__vector_18+0x18>
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = UDR0;
    1892:	e6 ec       	ldi	r30, 0xC6	; 198
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = rx_buffer_head + 1;
    189a:	80 91 03 01 	lds	r24, 0x0103
    189e:	8f 5f       	subi	r24, 0xFF	; 255
    18a0:	89 83       	std	Y+1, r24	; 0x01
	
	if (next_head == RX_BUFFER_SIZE) { 
		next_head = 0;
	}
	if (next_head != rx_buffer_tail) {      // Write data to buffer unless it is full.
    18a2:	90 91 04 01 	lds	r25, 0x0104
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	89 17       	cp	r24, r25
    18aa:	61 f0       	breq	.+24     	; 0x18c4 <__vector_18+0x4e>
		rx_buffer[rx_buffer_head] = data;
    18ac:	80 91 03 01 	lds	r24, 0x0103
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	fc 01       	movw	r30, r24
    18b6:	eb 53       	subi	r30, 0x3B	; 59
    18b8:	fe 4f       	sbci	r31, 0xFE	; 254
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	80 83       	st	Z, r24
		rx_buffer_head = next_head;    
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	80 93 03 01 	sts	0x0103, r24
	}
}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	ff 91       	pop	r31
    18ce:	ef 91       	pop	r30
    18d0:	9f 91       	pop	r25
    18d2:	8f 91       	pop	r24
    18d4:	0f 90       	pop	r0
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	0f 90       	pop	r0
    18da:	1f 90       	pop	r1
    18dc:	18 95       	reti

000018de <serial_reset_read_buffer>:

void serial_reset_read_buffer() 
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
  rx_buffer_tail = rx_buffer_head;
    18e6:	80 91 03 01 	lds	r24, 0x0103
    18ea:	80 93 04 01 	sts	0x0104, r24

  #ifdef ENABLE_XONXOFF
    flow_ctrl = XON_SENT;
  #endif
}
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <printString>:

#include "print.h"
#include "serial.h"

void printString(const char *s)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <printString+0x6>
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	0b c0       	rjmp	.+22     	; 0x191a <printString+0x26>
  while (*s)
    serial_write(*s++);
    1904:	e9 81       	ldd	r30, Y+1	; 0x01
    1906:	fa 81       	ldd	r31, Y+2	; 0x02
    1908:	20 81       	ld	r18, Z
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	9a 83       	std	Y+2, r25	; 0x02
    1912:	89 83       	std	Y+1, r24	; 0x01
    1914:	82 2f       	mov	r24, r18
    1916:	0e 94 b3 0b 	call	0x1766	; 0x1766 <serial_write>
#include "print.h"
#include "serial.h"

void printString(const char *s)
{
  while (*s)
    191a:	e9 81       	ldd	r30, Y+1	; 0x01
    191c:	fa 81       	ldd	r31, Y+2	; 0x02
    191e:	80 81       	ld	r24, Z
    1920:	88 23       	and	r24, r24
    1922:	81 f7       	brne	.-32     	; 0x1904 <printString+0x10>
    serial_write(*s++);
}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <printPgmString+0x6>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <printPgmString+0x8>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <printPgmString+0xa>
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	03 c0       	rjmp	.+6      	; 0x1948 <printPgmString+0x1a>
  char c;
  while ((c = pgm_read_byte_near(s++)))
    serial_write(c);
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	0e 94 b3 0b 	call	0x1766	; 0x1766 <serial_write>

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
  while ((c = pgm_read_byte_near(s++)))
    1948:	8d 81       	ldd	r24, Y+5	; 0x05
    194a:	9e 81       	ldd	r25, Y+6	; 0x06
    194c:	9b 83       	std	Y+3, r25	; 0x03
    194e:	8a 83       	std	Y+2, r24	; 0x02
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	9e 81       	ldd	r25, Y+6	; 0x06
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	9e 83       	std	Y+6, r25	; 0x06
    1958:	8d 83       	std	Y+5, r24	; 0x05
    195a:	ea 81       	ldd	r30, Y+2	; 0x02
    195c:	fb 81       	ldd	r31, Y+3	; 0x03
    195e:	84 91       	lpm	r24, Z+
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	8c 83       	std	Y+4, r24	; 0x04
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	88 23       	and	r24, r24
    196a:	59 f7       	brne	.-42     	; 0x1942 <printPgmString+0x14>
    serial_write(c);
}
    196c:	26 96       	adiw	r28, 0x06	; 6
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	cd bf       	out	0x3d, r28	; 61
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <print_uint8_base2>:
// 			'0' + buf[i - 1] :
// 			'A' + buf[i - 1] - 10);
// }

void print_uint8_base2(uint8_t n)
{ 
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	2a 97       	sbiw	r28, 0x0a	; 10
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char buf[8];
	uint8_t i = 0;
    1994:	19 82       	std	Y+1, r1	; 0x01
    1996:	12 c0       	rjmp	.+36     	; 0x19bc <print_uint8_base2+0x3e>

	for (; i < 8; i++) {
		buf[i] = n & 1;
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	8a 85       	ldd	r24, Y+10	; 0x0a
    19a0:	48 2f       	mov	r20, r24
    19a2:	41 70       	andi	r20, 0x01	; 1
    19a4:	ce 01       	movw	r24, r28
    19a6:	02 96       	adiw	r24, 0x02	; 2
    19a8:	fc 01       	movw	r30, r24
    19aa:	e2 0f       	add	r30, r18
    19ac:	f3 1f       	adc	r31, r19
    19ae:	40 83       	st	Z, r20
		n >>= 1;
    19b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    19b2:	86 95       	lsr	r24
    19b4:	8a 87       	std	Y+10, r24	; 0x0a
void print_uint8_base2(uint8_t n)
{ 
	unsigned char buf[8];
	uint8_t i = 0;

	for (; i < 8; i++) {
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	8f 5f       	subi	r24, 0xFF	; 255
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	88 30       	cpi	r24, 0x08	; 8
    19c0:	58 f3       	brcs	.-42     	; 0x1998 <print_uint8_base2+0x1a>
    19c2:	12 c0       	rjmp	.+36     	; 0x19e8 <print_uint8_base2+0x6a>
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
		serial_write('0' + buf[i - 1]);
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	88 2f       	mov	r24, r24
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9c 01       	movw	r18, r24
    19cc:	21 50       	subi	r18, 0x01	; 1
    19ce:	30 40       	sbci	r19, 0x00	; 0
    19d0:	ce 01       	movw	r24, r28
    19d2:	02 96       	adiw	r24, 0x02	; 2
    19d4:	fc 01       	movw	r30, r24
    19d6:	e2 0f       	add	r30, r18
    19d8:	f3 1f       	adc	r31, r19
    19da:	80 81       	ld	r24, Z
    19dc:	80 5d       	subi	r24, 0xD0	; 208
    19de:	0e 94 b3 0b 	call	0x1766	; 0x1766 <serial_write>
	for (; i < 8; i++) {
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	81 50       	subi	r24, 0x01	; 1
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	88 23       	and	r24, r24
    19ec:	59 f7       	brne	.-42     	; 0x19c4 <print_uint8_base2+0x46>
		serial_write('0' + buf[i - 1]);
}
    19ee:	2a 96       	adiw	r28, 0x0a	; 10
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <print_uint32_base10>:

static void print_uint32_base10(unsigned long n)
{ 
    1a00:	0f 93       	push	r16
    1a02:	1f 93       	push	r17
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	2f 97       	sbiw	r28, 0x0f	; 15
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	6c 87       	std	Y+12, r22	; 0x0c
    1a1a:	7d 87       	std	Y+13, r23	; 0x0d
    1a1c:	8e 87       	std	Y+14, r24	; 0x0e
    1a1e:	9f 87       	std	Y+15, r25	; 0x0f
  unsigned char buf[10]; 
  uint8_t i = 0;
    1a20:	19 82       	std	Y+1, r1	; 0x01
  
  if (n == 0) {
    1a22:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a24:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a26:	ae 85       	ldd	r26, Y+14	; 0x0e
    1a28:	bf 85       	ldd	r27, Y+15	; 0x0f
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	a1 05       	cpc	r26, r1
    1a2e:	b1 05       	cpc	r27, r1
    1a30:	91 f5       	brne	.+100    	; 0x1a96 <print_uint32_base10+0x96>
    serial_write('0');
    1a32:	80 e3       	ldi	r24, 0x30	; 48
    1a34:	0e 94 b3 0b 	call	0x1766	; 0x1766 <serial_write>
    1a38:	4b c0       	rjmp	.+150    	; 0x1ad0 <print_uint32_base10+0xd0>
    return;
  } 
  
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	08 2f       	mov	r16, r24
    1a3e:	10 e0       	ldi	r17, 0x00	; 0
    1a40:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a42:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a44:	ae 85       	ldd	r26, Y+14	; 0x0e
    1a46:	bf 85       	ldd	r27, Y+15	; 0x0f
    1a48:	2a e0       	ldi	r18, 0x0A	; 10
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	20 5d       	subi	r18, 0xD0	; 208
    1a60:	ce 01       	movw	r24, r28
    1a62:	02 96       	adiw	r24, 0x02	; 2
    1a64:	fc 01       	movw	r30, r24
    1a66:	e0 0f       	add	r30, r16
    1a68:	f1 1f       	adc	r31, r17
    1a6a:	20 83       	st	Z, r18
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	8f 5f       	subi	r24, 0xFF	; 255
    1a70:	89 83       	std	Y+1, r24	; 0x01
    n /= 10;
    1a72:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a74:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a76:	ae 85       	ldd	r26, Y+14	; 0x0e
    1a78:	bf 85       	ldd	r27, Y+15	; 0x0f
    1a7a:	2a e0       	ldi	r18, 0x0A	; 10
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	50 e0       	ldi	r21, 0x00	; 0
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    1a8a:	da 01       	movw	r26, r20
    1a8c:	c9 01       	movw	r24, r18
    1a8e:	8c 87       	std	Y+12, r24	; 0x0c
    1a90:	9d 87       	std	Y+13, r25	; 0x0d
    1a92:	ae 87       	std	Y+14, r26	; 0x0e
    1a94:	bf 87       	std	Y+15, r27	; 0x0f
  if (n == 0) {
    serial_write('0');
    return;
  } 
  
  while (n > 0) {
    1a96:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a98:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a9a:	ae 85       	ldd	r26, Y+14	; 0x0e
    1a9c:	bf 85       	ldd	r27, Y+15	; 0x0f
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	a1 05       	cpc	r26, r1
    1aa2:	b1 05       	cpc	r27, r1
    1aa4:	51 f6       	brne	.-108    	; 0x1a3a <print_uint32_base10+0x3a>
    1aa6:	11 c0       	rjmp	.+34     	; 0x1aca <print_uint32_base10+0xca>
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    serial_write(buf[i-1]);
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	88 2f       	mov	r24, r24
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9c 01       	movw	r18, r24
    1ab0:	21 50       	subi	r18, 0x01	; 1
    1ab2:	30 40       	sbci	r19, 0x00	; 0
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	02 96       	adiw	r24, 0x02	; 2
    1ab8:	fc 01       	movw	r30, r24
    1aba:	e2 0f       	add	r30, r18
    1abc:	f3 1f       	adc	r31, r19
    1abe:	80 81       	ld	r24, Z
    1ac0:	0e 94 b3 0b 	call	0x1766	; 0x1766 <serial_write>
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	81 50       	subi	r24, 0x01	; 1
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	88 23       	and	r24, r24
    1ace:	61 f7       	brne	.-40     	; 0x1aa8 <print_uint32_base10+0xa8>
    serial_write(buf[i-1]);
}
    1ad0:	2f 96       	adiw	r28, 0x0f	; 15
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	1f 91       	pop	r17
    1ae2:	0f 91       	pop	r16
    1ae4:	08 95       	ret

00001ae6 <printInteger>:

void printInteger(uint32_t n)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	00 d0       	rcall	.+0      	; 0x1aec <printInteger+0x6>
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <printInteger+0x8>
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	69 83       	std	Y+1, r22	; 0x01
    1af4:	7a 83       	std	Y+2, r23	; 0x02
    1af6:	8b 83       	std	Y+3, r24	; 0x03
    1af8:	9c 83       	std	Y+4, r25	; 0x04
  if (n < 0) {
    serial_write('-');
    n = -n;
  }
  print_uint32_base10(n);
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	9a 81       	ldd	r25, Y+2	; 0x02
    1afe:	ab 81       	ldd	r26, Y+3	; 0x03
    1b00:	bc 81       	ldd	r27, Y+4	; 0x04
    1b02:	bc 01       	movw	r22, r24
    1b04:	cd 01       	movw	r24, r26
    1b06:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <print_uint32_base10>
}
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up 
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n)
{
    1b18:	0f 93       	push	r16
    1b1a:	1f 93       	push	r17
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	64 97       	sbiw	r28, 0x14	; 20
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	69 8b       	std	Y+17, r22	; 0x11
    1b32:	7a 8b       	std	Y+18, r23	; 0x12
    1b34:	8b 8b       	std	Y+19, r24	; 0x13
    1b36:	9c 8b       	std	Y+20, r25	; 0x14
  if (n < 0) {
    1b38:	69 89       	ldd	r22, Y+17	; 0x11
    1b3a:	7a 89       	ldd	r23, Y+18	; 0x12
    1b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__cmpsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	64 f4       	brge	.+24     	; 0x1b68 <printFloat+0x50>
    serial_write('-');
    1b50:	8d e2       	ldi	r24, 0x2D	; 45
    1b52:	0e 94 b3 0b 	call	0x1766	; 0x1766 <serial_write>
    n = -n;
    1b56:	89 89       	ldd	r24, Y+17	; 0x11
    1b58:	9a 89       	ldd	r25, Y+18	; 0x12
    1b5a:	ab 89       	ldd	r26, Y+19	; 0x13
    1b5c:	bc 89       	ldd	r27, Y+20	; 0x14
    1b5e:	b0 58       	subi	r27, 0x80	; 128
    1b60:	89 8b       	std	Y+17, r24	; 0x11
    1b62:	9a 8b       	std	Y+18, r25	; 0x12
    1b64:	ab 8b       	std	Y+19, r26	; 0x13
    1b66:	bc 8b       	std	Y+20, r27	; 0x14
  }

  uint8_t decimals = DECIMAL_PLACES;
    1b68:	82 e0       	ldi	r24, 0x02	; 2
    1b6a:	8e 83       	std	Y+6, r24	; 0x06
    1b6c:	13 c0       	rjmp	.+38     	; 0x1b94 <printFloat+0x7c>
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
    n *= 100;
    1b6e:	69 89       	ldd	r22, Y+17	; 0x11
    1b70:	7a 89       	ldd	r23, Y+18	; 0x12
    1b72:	8b 89       	ldd	r24, Y+19	; 0x13
    1b74:	9c 89       	ldd	r25, Y+20	; 0x14
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	48 ec       	ldi	r20, 0xC8	; 200
    1b7c:	52 e4       	ldi	r21, 0x42	; 66
    1b7e:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	89 8b       	std	Y+17, r24	; 0x11
    1b88:	9a 8b       	std	Y+18, r25	; 0x12
    1b8a:	ab 8b       	std	Y+19, r26	; 0x13
    1b8c:	bc 8b       	std	Y+20, r27	; 0x14
    decimals -= 2;
    1b8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b90:	82 50       	subi	r24, 0x02	; 2
    1b92:	8e 83       	std	Y+6, r24	; 0x06
    serial_write('-');
    n = -n;
  }

  uint8_t decimals = DECIMAL_PLACES;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
    1b94:	8e 81       	ldd	r24, Y+6	; 0x06
    1b96:	82 30       	cpi	r24, 0x02	; 2
    1b98:	50 f7       	brcc	.-44     	; 0x1b6e <printFloat+0x56>
    n *= 100;
    decimals -= 2;
  }
  if (decimals) { n *= 10; }
    1b9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9c:	88 23       	and	r24, r24
    1b9e:	81 f0       	breq	.+32     	; 0x1bc0 <printFloat+0xa8>
    1ba0:	69 89       	ldd	r22, Y+17	; 0x11
    1ba2:	7a 89       	ldd	r23, Y+18	; 0x12
    1ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e2       	ldi	r20, 0x20	; 32
    1bae:	51 e4       	ldi	r21, 0x41	; 65
    1bb0:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	89 8b       	std	Y+17, r24	; 0x11
    1bba:	9a 8b       	std	Y+18, r25	; 0x12
    1bbc:	ab 8b       	std	Y+19, r26	; 0x13
    1bbe:	bc 8b       	std	Y+20, r27	; 0x14
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
    1bc0:	69 89       	ldd	r22, Y+17	; 0x11
    1bc2:	7a 89       	ldd	r23, Y+18	; 0x12
    1bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__addsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	89 8b       	std	Y+17, r24	; 0x11
    1bda:	9a 8b       	std	Y+18, r25	; 0x12
    1bdc:	ab 8b       	std	Y+19, r26	; 0x13
    1bde:	bc 8b       	std	Y+20, r27	; 0x14
    
  // Generate digits backwards and store in string.
  unsigned char buf[10]; 
  uint8_t i = 0;
    1be0:	1d 82       	std	Y+5, r1	; 0x05
  uint32_t a = (long)n;  
    1be2:	69 89       	ldd	r22, Y+17	; 0x11
    1be4:	7a 89       	ldd	r23, Y+18	; 0x12
    1be6:	8b 89       	ldd	r24, Y+19	; 0x13
    1be8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bea:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__fixsfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	9a 83       	std	Y+2, r25	; 0x02
    1bf6:	ab 83       	std	Y+3, r26	; 0x03
    1bf8:	bc 83       	std	Y+4, r27	; 0x04
  buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
    1bfa:	8e e2       	ldi	r24, 0x2E	; 46
    1bfc:	89 87       	std	Y+9, r24	; 0x09
    1bfe:	34 c0       	rjmp	.+104    	; 0x1c68 <printFloat+0x150>
  while(a > 0) {
    if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
    1c00:	8d 81       	ldd	r24, Y+5	; 0x05
    1c02:	82 30       	cpi	r24, 0x02	; 2
    1c04:	19 f4       	brne	.+6      	; 0x1c0c <printFloat+0xf4>
    1c06:	8d 81       	ldd	r24, Y+5	; 0x05
    1c08:	8f 5f       	subi	r24, 0xFF	; 255
    1c0a:	8d 83       	std	Y+5, r24	; 0x05
    buf[i++] = (a % 10) + '0'; // Get digit
    1c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0e:	08 2f       	mov	r16, r24
    1c10:	10 e0       	ldi	r17, 0x00	; 0
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	ab 81       	ldd	r26, Y+3	; 0x03
    1c18:	bc 81       	ldd	r27, Y+4	; 0x04
    1c1a:	2a e0       	ldi	r18, 0x0A	; 10
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	28 2f       	mov	r18, r24
    1c30:	20 5d       	subi	r18, 0xD0	; 208
    1c32:	ce 01       	movw	r24, r28
    1c34:	07 96       	adiw	r24, 0x07	; 7
    1c36:	fc 01       	movw	r30, r24
    1c38:	e0 0f       	add	r30, r16
    1c3a:	f1 1f       	adc	r31, r17
    1c3c:	20 83       	st	Z, r18
    1c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c40:	8f 5f       	subi	r24, 0xFF	; 255
    1c42:	8d 83       	std	Y+5, r24	; 0x05
    a /= 10;
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	9a 81       	ldd	r25, Y+2	; 0x02
    1c48:	ab 81       	ldd	r26, Y+3	; 0x03
    1c4a:	bc 81       	ldd	r27, Y+4	; 0x04
    1c4c:	2a e0       	ldi	r18, 0x0A	; 10
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	50 e0       	ldi	r21, 0x00	; 0
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    1c5c:	da 01       	movw	r26, r20
    1c5e:	c9 01       	movw	r24, r18
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	9a 83       	std	Y+2, r25	; 0x02
    1c64:	ab 83       	std	Y+3, r26	; 0x03
    1c66:	bc 83       	std	Y+4, r27	; 0x04
  // Generate digits backwards and store in string.
  unsigned char buf[10]; 
  uint8_t i = 0;
  uint32_t a = (long)n;  
  buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
  while(a > 0) {
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6c:	ab 81       	ldd	r26, Y+3	; 0x03
    1c6e:	bc 81       	ldd	r27, Y+4	; 0x04
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	a1 05       	cpc	r26, r1
    1c74:	b1 05       	cpc	r27, r1
    1c76:	21 f6       	brne	.-120    	; 0x1c00 <printFloat+0xe8>
    1c78:	0d c0       	rjmp	.+26     	; 0x1c94 <printFloat+0x17c>
    if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
    buf[i++] = (a % 10) + '0'; // Get digit
    a /= 10;
  }
  while (i < DECIMAL_PLACES) { 
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
    1c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	ce 01       	movw	r24, r28
    1c82:	07 96       	adiw	r24, 0x07	; 7
    1c84:	fc 01       	movw	r30, r24
    1c86:	e2 0f       	add	r30, r18
    1c88:	f3 1f       	adc	r31, r19
    1c8a:	80 e3       	ldi	r24, 0x30	; 48
    1c8c:	80 83       	st	Z, r24
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	8f 5f       	subi	r24, 0xFF	; 255
    1c92:	8d 83       	std	Y+5, r24	; 0x05
  while(a > 0) {
    if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
    buf[i++] = (a % 10) + '0'; // Get digit
    a /= 10;
  }
  while (i < DECIMAL_PLACES) { 
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
    1c96:	82 30       	cpi	r24, 0x02	; 2
    1c98:	80 f3       	brcs	.-32     	; 0x1c7a <printFloat+0x162>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
  }
  if (i == DECIMAL_PLACES) { // Fill in leading zero, if needed.
    1c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9c:	82 30       	cpi	r24, 0x02	; 2
    1c9e:	11 f5       	brne	.+68     	; 0x1ce4 <printFloat+0x1cc>
    i++;
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	8f 5f       	subi	r24, 0xFF	; 255
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    buf[i++] = '0'; 
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	ce 01       	movw	r24, r28
    1cae:	07 96       	adiw	r24, 0x07	; 7
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	e2 0f       	add	r30, r18
    1cb4:	f3 1f       	adc	r31, r19
    1cb6:	80 e3       	ldi	r24, 0x30	; 48
    1cb8:	80 83       	st	Z, r24
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	8f 5f       	subi	r24, 0xFF	; 255
    1cbe:	8d 83       	std	Y+5, r24	; 0x05
    1cc0:	11 c0       	rjmp	.+34     	; 0x1ce4 <printFloat+0x1cc>
  }   
  
  // Print the generated string.
  for (; i > 0; i--)
    serial_write(buf[i-1]);
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	88 2f       	mov	r24, r24
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9c 01       	movw	r18, r24
    1cca:	21 50       	subi	r18, 0x01	; 1
    1ccc:	30 40       	sbci	r19, 0x00	; 0
    1cce:	ce 01       	movw	r24, r28
    1cd0:	07 96       	adiw	r24, 0x07	; 7
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	e2 0f       	add	r30, r18
    1cd6:	f3 1f       	adc	r31, r19
    1cd8:	80 81       	ld	r24, Z
    1cda:	0e 94 b3 0b 	call	0x1766	; 0x1766 <serial_write>
    i++;
    buf[i++] = '0'; 
  }   
  
  // Print the generated string.
  for (; i > 0; i--)
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	81 50       	subi	r24, 0x01	; 1
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	88 23       	and	r24, r24
    1ce8:	61 f7       	brne	.-40     	; 0x1cc2 <printFloat+0x1aa>
    serial_write(buf[i-1]);
}
    1cea:	64 96       	adiw	r28, 0x14	; 20
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	08 95       	ret

00001d00 <rpt_initialized>:
#include "print.h"
#include "report.h"
#include "tinyg_tc.h"

void rpt_initialized()
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
	printPgmString(PSTR("\nDevice Initialized\n")); 
    1d08:	88 e6       	ldi	r24, 0x68	; 104
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	0e 94 97 0c 	call	0x192e	; 0x192e <printPgmString>
}
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <rpt_heater_readout>:

void rpt_heater_readout()
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
	if (--heater.readout < 0) {
    1d1e:	80 91 0a 01 	lds	r24, 0x010A
    1d22:	81 50       	subi	r24, 0x01	; 1
    1d24:	80 93 0a 01 	sts	0x010A, r24
    1d28:	80 91 0a 01 	lds	r24, 0x010A
    1d2c:	88 23       	and	r24, r24
    1d2e:	3c f5       	brge	.+78     	; 0x1d7e <rpt_heater_readout+0x68>
		heater.readout = 5;
    1d30:	85 e0       	ldi	r24, 0x05	; 5
    1d32:	80 93 0a 01 	sts	0x010A, r24
		printPgmString(PSTR("Temp: ")); 
    1d36:	87 e8       	ldi	r24, 0x87	; 135
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	0e 94 97 0c 	call	0x192e	; 0x192e <printPgmString>
		printFloat(heater.temperature);
    1d3e:	80 91 0c 01 	lds	r24, 0x010C
    1d42:	90 91 0d 01 	lds	r25, 0x010D
    1d46:	a0 91 0e 01 	lds	r26, 0x010E
    1d4a:	b0 91 0f 01 	lds	r27, 0x010F
    1d4e:	bc 01       	movw	r22, r24
    1d50:	cd 01       	movw	r24, r26
    1d52:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <printFloat>
		printPgmString(PSTR("  PID: ")); 
    1d56:	8f e7       	ldi	r24, 0x7F	; 127
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	0e 94 97 0c 	call	0x192e	; 0x192e <printPgmString>
		printFloat(pid.output);
    1d5e:	80 91 2a 01 	lds	r24, 0x012A
    1d62:	90 91 2b 01 	lds	r25, 0x012B
    1d66:	a0 91 2c 01 	lds	r26, 0x012C
    1d6a:	b0 91 2d 01 	lds	r27, 0x012D
    1d6e:	bc 01       	movw	r22, r24
    1d70:	cd 01       	movw	r24, r26
    1d72:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <printFloat>
		printPgmString(PSTR("\n")); 
    1d76:	8d e7       	ldi	r24, 0x7D	; 125
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	0e 94 97 0c 	call	0x192e	; 0x192e <printPgmString>
	}
}
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <__subsf3>:
    1d84:	50 58       	subi	r21, 0x80	; 128

00001d86 <__addsf3>:
    1d86:	bb 27       	eor	r27, r27
    1d88:	aa 27       	eor	r26, r26
    1d8a:	0e d0       	rcall	.+28     	; 0x1da8 <__addsf3x>
    1d8c:	75 c1       	rjmp	.+746    	; 0x2078 <__fp_round>
    1d8e:	66 d1       	rcall	.+716    	; 0x205c <__fp_pscA>
    1d90:	30 f0       	brcs	.+12     	; 0x1d9e <__addsf3+0x18>
    1d92:	6b d1       	rcall	.+726    	; 0x206a <__fp_pscB>
    1d94:	20 f0       	brcs	.+8      	; 0x1d9e <__addsf3+0x18>
    1d96:	31 f4       	brne	.+12     	; 0x1da4 <__addsf3+0x1e>
    1d98:	9f 3f       	cpi	r25, 0xFF	; 255
    1d9a:	11 f4       	brne	.+4      	; 0x1da0 <__addsf3+0x1a>
    1d9c:	1e f4       	brtc	.+6      	; 0x1da4 <__addsf3+0x1e>
    1d9e:	5b c1       	rjmp	.+694    	; 0x2056 <__fp_nan>
    1da0:	0e f4       	brtc	.+2      	; 0x1da4 <__addsf3+0x1e>
    1da2:	e0 95       	com	r30
    1da4:	e7 fb       	bst	r30, 7
    1da6:	51 c1       	rjmp	.+674    	; 0x204a <__fp_inf>

00001da8 <__addsf3x>:
    1da8:	e9 2f       	mov	r30, r25
    1daa:	77 d1       	rcall	.+750    	; 0x209a <__fp_split3>
    1dac:	80 f3       	brcs	.-32     	; 0x1d8e <__addsf3+0x8>
    1dae:	ba 17       	cp	r27, r26
    1db0:	62 07       	cpc	r22, r18
    1db2:	73 07       	cpc	r23, r19
    1db4:	84 07       	cpc	r24, r20
    1db6:	95 07       	cpc	r25, r21
    1db8:	18 f0       	brcs	.+6      	; 0x1dc0 <__addsf3x+0x18>
    1dba:	71 f4       	brne	.+28     	; 0x1dd8 <__addsf3x+0x30>
    1dbc:	9e f5       	brtc	.+102    	; 0x1e24 <__addsf3x+0x7c>
    1dbe:	8f c1       	rjmp	.+798    	; 0x20de <__fp_zero>
    1dc0:	0e f4       	brtc	.+2      	; 0x1dc4 <__addsf3x+0x1c>
    1dc2:	e0 95       	com	r30
    1dc4:	0b 2e       	mov	r0, r27
    1dc6:	ba 2f       	mov	r27, r26
    1dc8:	a0 2d       	mov	r26, r0
    1dca:	0b 01       	movw	r0, r22
    1dcc:	b9 01       	movw	r22, r18
    1dce:	90 01       	movw	r18, r0
    1dd0:	0c 01       	movw	r0, r24
    1dd2:	ca 01       	movw	r24, r20
    1dd4:	a0 01       	movw	r20, r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	ff 27       	eor	r31, r31
    1dda:	59 1b       	sub	r21, r25
    1ddc:	99 f0       	breq	.+38     	; 0x1e04 <__addsf3x+0x5c>
    1dde:	59 3f       	cpi	r21, 0xF9	; 249
    1de0:	50 f4       	brcc	.+20     	; 0x1df6 <__addsf3x+0x4e>
    1de2:	50 3e       	cpi	r21, 0xE0	; 224
    1de4:	68 f1       	brcs	.+90     	; 0x1e40 <__addsf3x+0x98>
    1de6:	1a 16       	cp	r1, r26
    1de8:	f0 40       	sbci	r31, 0x00	; 0
    1dea:	a2 2f       	mov	r26, r18
    1dec:	23 2f       	mov	r18, r19
    1dee:	34 2f       	mov	r19, r20
    1df0:	44 27       	eor	r20, r20
    1df2:	58 5f       	subi	r21, 0xF8	; 248
    1df4:	f3 cf       	rjmp	.-26     	; 0x1ddc <__addsf3x+0x34>
    1df6:	46 95       	lsr	r20
    1df8:	37 95       	ror	r19
    1dfa:	27 95       	ror	r18
    1dfc:	a7 95       	ror	r26
    1dfe:	f0 40       	sbci	r31, 0x00	; 0
    1e00:	53 95       	inc	r21
    1e02:	c9 f7       	brne	.-14     	; 0x1df6 <__addsf3x+0x4e>
    1e04:	7e f4       	brtc	.+30     	; 0x1e24 <__addsf3x+0x7c>
    1e06:	1f 16       	cp	r1, r31
    1e08:	ba 0b       	sbc	r27, r26
    1e0a:	62 0b       	sbc	r22, r18
    1e0c:	73 0b       	sbc	r23, r19
    1e0e:	84 0b       	sbc	r24, r20
    1e10:	ba f0       	brmi	.+46     	; 0x1e40 <__addsf3x+0x98>
    1e12:	91 50       	subi	r25, 0x01	; 1
    1e14:	a1 f0       	breq	.+40     	; 0x1e3e <__addsf3x+0x96>
    1e16:	ff 0f       	add	r31, r31
    1e18:	bb 1f       	adc	r27, r27
    1e1a:	66 1f       	adc	r22, r22
    1e1c:	77 1f       	adc	r23, r23
    1e1e:	88 1f       	adc	r24, r24
    1e20:	c2 f7       	brpl	.-16     	; 0x1e12 <__addsf3x+0x6a>
    1e22:	0e c0       	rjmp	.+28     	; 0x1e40 <__addsf3x+0x98>
    1e24:	ba 0f       	add	r27, r26
    1e26:	62 1f       	adc	r22, r18
    1e28:	73 1f       	adc	r23, r19
    1e2a:	84 1f       	adc	r24, r20
    1e2c:	48 f4       	brcc	.+18     	; 0x1e40 <__addsf3x+0x98>
    1e2e:	87 95       	ror	r24
    1e30:	77 95       	ror	r23
    1e32:	67 95       	ror	r22
    1e34:	b7 95       	ror	r27
    1e36:	f7 95       	ror	r31
    1e38:	9e 3f       	cpi	r25, 0xFE	; 254
    1e3a:	08 f0       	brcs	.+2      	; 0x1e3e <__addsf3x+0x96>
    1e3c:	b3 cf       	rjmp	.-154    	; 0x1da4 <__addsf3+0x1e>
    1e3e:	93 95       	inc	r25
    1e40:	88 0f       	add	r24, r24
    1e42:	08 f0       	brcs	.+2      	; 0x1e46 <__addsf3x+0x9e>
    1e44:	99 27       	eor	r25, r25
    1e46:	ee 0f       	add	r30, r30
    1e48:	97 95       	ror	r25
    1e4a:	87 95       	ror	r24
    1e4c:	08 95       	ret

00001e4e <__cmpsf2>:
    1e4e:	d9 d0       	rcall	.+434    	; 0x2002 <__fp_cmp>
    1e50:	08 f4       	brcc	.+2      	; 0x1e54 <__cmpsf2+0x6>
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	08 95       	ret

00001e56 <__divsf3>:
    1e56:	0c d0       	rcall	.+24     	; 0x1e70 <__divsf3x>
    1e58:	0f c1       	rjmp	.+542    	; 0x2078 <__fp_round>
    1e5a:	07 d1       	rcall	.+526    	; 0x206a <__fp_pscB>
    1e5c:	40 f0       	brcs	.+16     	; 0x1e6e <__divsf3+0x18>
    1e5e:	fe d0       	rcall	.+508    	; 0x205c <__fp_pscA>
    1e60:	30 f0       	brcs	.+12     	; 0x1e6e <__divsf3+0x18>
    1e62:	21 f4       	brne	.+8      	; 0x1e6c <__divsf3+0x16>
    1e64:	5f 3f       	cpi	r21, 0xFF	; 255
    1e66:	19 f0       	breq	.+6      	; 0x1e6e <__divsf3+0x18>
    1e68:	f0 c0       	rjmp	.+480    	; 0x204a <__fp_inf>
    1e6a:	51 11       	cpse	r21, r1
    1e6c:	39 c1       	rjmp	.+626    	; 0x20e0 <__fp_szero>
    1e6e:	f3 c0       	rjmp	.+486    	; 0x2056 <__fp_nan>

00001e70 <__divsf3x>:
    1e70:	14 d1       	rcall	.+552    	; 0x209a <__fp_split3>
    1e72:	98 f3       	brcs	.-26     	; 0x1e5a <__divsf3+0x4>

00001e74 <__divsf3_pse>:
    1e74:	99 23       	and	r25, r25
    1e76:	c9 f3       	breq	.-14     	; 0x1e6a <__divsf3+0x14>
    1e78:	55 23       	and	r21, r21
    1e7a:	b1 f3       	breq	.-20     	; 0x1e68 <__divsf3+0x12>
    1e7c:	95 1b       	sub	r25, r21
    1e7e:	55 0b       	sbc	r21, r21
    1e80:	bb 27       	eor	r27, r27
    1e82:	aa 27       	eor	r26, r26
    1e84:	62 17       	cp	r22, r18
    1e86:	73 07       	cpc	r23, r19
    1e88:	84 07       	cpc	r24, r20
    1e8a:	38 f0       	brcs	.+14     	; 0x1e9a <__divsf3_pse+0x26>
    1e8c:	9f 5f       	subi	r25, 0xFF	; 255
    1e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e90:	22 0f       	add	r18, r18
    1e92:	33 1f       	adc	r19, r19
    1e94:	44 1f       	adc	r20, r20
    1e96:	aa 1f       	adc	r26, r26
    1e98:	a9 f3       	breq	.-22     	; 0x1e84 <__divsf3_pse+0x10>
    1e9a:	33 d0       	rcall	.+102    	; 0x1f02 <__divsf3_pse+0x8e>
    1e9c:	0e 2e       	mov	r0, r30
    1e9e:	3a f0       	brmi	.+14     	; 0x1eae <__divsf3_pse+0x3a>
    1ea0:	e0 e8       	ldi	r30, 0x80	; 128
    1ea2:	30 d0       	rcall	.+96     	; 0x1f04 <__divsf3_pse+0x90>
    1ea4:	91 50       	subi	r25, 0x01	; 1
    1ea6:	50 40       	sbci	r21, 0x00	; 0
    1ea8:	e6 95       	lsr	r30
    1eaa:	00 1c       	adc	r0, r0
    1eac:	ca f7       	brpl	.-14     	; 0x1ea0 <__divsf3_pse+0x2c>
    1eae:	29 d0       	rcall	.+82     	; 0x1f02 <__divsf3_pse+0x8e>
    1eb0:	fe 2f       	mov	r31, r30
    1eb2:	27 d0       	rcall	.+78     	; 0x1f02 <__divsf3_pse+0x8e>
    1eb4:	66 0f       	add	r22, r22
    1eb6:	77 1f       	adc	r23, r23
    1eb8:	88 1f       	adc	r24, r24
    1eba:	bb 1f       	adc	r27, r27
    1ebc:	26 17       	cp	r18, r22
    1ebe:	37 07       	cpc	r19, r23
    1ec0:	48 07       	cpc	r20, r24
    1ec2:	ab 07       	cpc	r26, r27
    1ec4:	b0 e8       	ldi	r27, 0x80	; 128
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <__divsf3_pse+0x56>
    1ec8:	bb 0b       	sbc	r27, r27
    1eca:	80 2d       	mov	r24, r0
    1ecc:	bf 01       	movw	r22, r30
    1ece:	ff 27       	eor	r31, r31
    1ed0:	93 58       	subi	r25, 0x83	; 131
    1ed2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed4:	2a f0       	brmi	.+10     	; 0x1ee0 <__divsf3_pse+0x6c>
    1ed6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ed8:	51 05       	cpc	r21, r1
    1eda:	68 f0       	brcs	.+26     	; 0x1ef6 <__divsf3_pse+0x82>
    1edc:	b6 c0       	rjmp	.+364    	; 0x204a <__fp_inf>
    1ede:	00 c1       	rjmp	.+512    	; 0x20e0 <__fp_szero>
    1ee0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ee2:	ec f3       	brlt	.-6      	; 0x1ede <__divsf3_pse+0x6a>
    1ee4:	98 3e       	cpi	r25, 0xE8	; 232
    1ee6:	dc f3       	brlt	.-10     	; 0x1ede <__divsf3_pse+0x6a>
    1ee8:	86 95       	lsr	r24
    1eea:	77 95       	ror	r23
    1eec:	67 95       	ror	r22
    1eee:	b7 95       	ror	r27
    1ef0:	f7 95       	ror	r31
    1ef2:	9f 5f       	subi	r25, 0xFF	; 255
    1ef4:	c9 f7       	brne	.-14     	; 0x1ee8 <__divsf3_pse+0x74>
    1ef6:	88 0f       	add	r24, r24
    1ef8:	91 1d       	adc	r25, r1
    1efa:	96 95       	lsr	r25
    1efc:	87 95       	ror	r24
    1efe:	97 f9       	bld	r25, 7
    1f00:	08 95       	ret
    1f02:	e1 e0       	ldi	r30, 0x01	; 1
    1f04:	66 0f       	add	r22, r22
    1f06:	77 1f       	adc	r23, r23
    1f08:	88 1f       	adc	r24, r24
    1f0a:	bb 1f       	adc	r27, r27
    1f0c:	62 17       	cp	r22, r18
    1f0e:	73 07       	cpc	r23, r19
    1f10:	84 07       	cpc	r24, r20
    1f12:	ba 07       	cpc	r27, r26
    1f14:	20 f0       	brcs	.+8      	; 0x1f1e <__divsf3_pse+0xaa>
    1f16:	62 1b       	sub	r22, r18
    1f18:	73 0b       	sbc	r23, r19
    1f1a:	84 0b       	sbc	r24, r20
    1f1c:	ba 0b       	sbc	r27, r26
    1f1e:	ee 1f       	adc	r30, r30
    1f20:	88 f7       	brcc	.-30     	; 0x1f04 <__divsf3_pse+0x90>
    1f22:	e0 95       	com	r30
    1f24:	08 95       	ret

00001f26 <__fixsfsi>:
    1f26:	04 d0       	rcall	.+8      	; 0x1f30 <__fixunssfsi>
    1f28:	68 94       	set
    1f2a:	b1 11       	cpse	r27, r1
    1f2c:	d9 c0       	rjmp	.+434    	; 0x20e0 <__fp_szero>
    1f2e:	08 95       	ret

00001f30 <__fixunssfsi>:
    1f30:	bc d0       	rcall	.+376    	; 0x20aa <__fp_splitA>
    1f32:	88 f0       	brcs	.+34     	; 0x1f56 <__fixunssfsi+0x26>
    1f34:	9f 57       	subi	r25, 0x7F	; 127
    1f36:	90 f0       	brcs	.+36     	; 0x1f5c <__fixunssfsi+0x2c>
    1f38:	b9 2f       	mov	r27, r25
    1f3a:	99 27       	eor	r25, r25
    1f3c:	b7 51       	subi	r27, 0x17	; 23
    1f3e:	a0 f0       	brcs	.+40     	; 0x1f68 <__fixunssfsi+0x38>
    1f40:	d1 f0       	breq	.+52     	; 0x1f76 <__fixunssfsi+0x46>
    1f42:	66 0f       	add	r22, r22
    1f44:	77 1f       	adc	r23, r23
    1f46:	88 1f       	adc	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	1a f0       	brmi	.+6      	; 0x1f52 <__fixunssfsi+0x22>
    1f4c:	ba 95       	dec	r27
    1f4e:	c9 f7       	brne	.-14     	; 0x1f42 <__fixunssfsi+0x12>
    1f50:	12 c0       	rjmp	.+36     	; 0x1f76 <__fixunssfsi+0x46>
    1f52:	b1 30       	cpi	r27, 0x01	; 1
    1f54:	81 f0       	breq	.+32     	; 0x1f76 <__fixunssfsi+0x46>
    1f56:	c3 d0       	rcall	.+390    	; 0x20de <__fp_zero>
    1f58:	b1 e0       	ldi	r27, 0x01	; 1
    1f5a:	08 95       	ret
    1f5c:	c0 c0       	rjmp	.+384    	; 0x20de <__fp_zero>
    1f5e:	67 2f       	mov	r22, r23
    1f60:	78 2f       	mov	r23, r24
    1f62:	88 27       	eor	r24, r24
    1f64:	b8 5f       	subi	r27, 0xF8	; 248
    1f66:	39 f0       	breq	.+14     	; 0x1f76 <__fixunssfsi+0x46>
    1f68:	b9 3f       	cpi	r27, 0xF9	; 249
    1f6a:	cc f3       	brlt	.-14     	; 0x1f5e <__fixunssfsi+0x2e>
    1f6c:	86 95       	lsr	r24
    1f6e:	77 95       	ror	r23
    1f70:	67 95       	ror	r22
    1f72:	b3 95       	inc	r27
    1f74:	d9 f7       	brne	.-10     	; 0x1f6c <__fixunssfsi+0x3c>
    1f76:	3e f4       	brtc	.+14     	; 0x1f86 <__fixunssfsi+0x56>
    1f78:	90 95       	com	r25
    1f7a:	80 95       	com	r24
    1f7c:	70 95       	com	r23
    1f7e:	61 95       	neg	r22
    1f80:	7f 4f       	sbci	r23, 0xFF	; 255
    1f82:	8f 4f       	sbci	r24, 0xFF	; 255
    1f84:	9f 4f       	sbci	r25, 0xFF	; 255
    1f86:	08 95       	ret

00001f88 <__floatunsisf>:
    1f88:	e8 94       	clt
    1f8a:	09 c0       	rjmp	.+18     	; 0x1f9e <__floatsisf+0x12>

00001f8c <__floatsisf>:
    1f8c:	97 fb       	bst	r25, 7
    1f8e:	3e f4       	brtc	.+14     	; 0x1f9e <__floatsisf+0x12>
    1f90:	90 95       	com	r25
    1f92:	80 95       	com	r24
    1f94:	70 95       	com	r23
    1f96:	61 95       	neg	r22
    1f98:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9e:	99 23       	and	r25, r25
    1fa0:	a9 f0       	breq	.+42     	; 0x1fcc <__floatsisf+0x40>
    1fa2:	f9 2f       	mov	r31, r25
    1fa4:	96 e9       	ldi	r25, 0x96	; 150
    1fa6:	bb 27       	eor	r27, r27
    1fa8:	93 95       	inc	r25
    1faa:	f6 95       	lsr	r31
    1fac:	87 95       	ror	r24
    1fae:	77 95       	ror	r23
    1fb0:	67 95       	ror	r22
    1fb2:	b7 95       	ror	r27
    1fb4:	f1 11       	cpse	r31, r1
    1fb6:	f8 cf       	rjmp	.-16     	; 0x1fa8 <__floatsisf+0x1c>
    1fb8:	fa f4       	brpl	.+62     	; 0x1ff8 <__floatsisf+0x6c>
    1fba:	bb 0f       	add	r27, r27
    1fbc:	11 f4       	brne	.+4      	; 0x1fc2 <__floatsisf+0x36>
    1fbe:	60 ff       	sbrs	r22, 0
    1fc0:	1b c0       	rjmp	.+54     	; 0x1ff8 <__floatsisf+0x6c>
    1fc2:	6f 5f       	subi	r22, 0xFF	; 255
    1fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fca:	16 c0       	rjmp	.+44     	; 0x1ff8 <__floatsisf+0x6c>
    1fcc:	88 23       	and	r24, r24
    1fce:	11 f0       	breq	.+4      	; 0x1fd4 <__floatsisf+0x48>
    1fd0:	96 e9       	ldi	r25, 0x96	; 150
    1fd2:	11 c0       	rjmp	.+34     	; 0x1ff6 <__floatsisf+0x6a>
    1fd4:	77 23       	and	r23, r23
    1fd6:	21 f0       	breq	.+8      	; 0x1fe0 <__floatsisf+0x54>
    1fd8:	9e e8       	ldi	r25, 0x8E	; 142
    1fda:	87 2f       	mov	r24, r23
    1fdc:	76 2f       	mov	r23, r22
    1fde:	05 c0       	rjmp	.+10     	; 0x1fea <__floatsisf+0x5e>
    1fe0:	66 23       	and	r22, r22
    1fe2:	71 f0       	breq	.+28     	; 0x2000 <__floatsisf+0x74>
    1fe4:	96 e8       	ldi	r25, 0x86	; 134
    1fe6:	86 2f       	mov	r24, r22
    1fe8:	70 e0       	ldi	r23, 0x00	; 0
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	2a f0       	brmi	.+10     	; 0x1ff8 <__floatsisf+0x6c>
    1fee:	9a 95       	dec	r25
    1ff0:	66 0f       	add	r22, r22
    1ff2:	77 1f       	adc	r23, r23
    1ff4:	88 1f       	adc	r24, r24
    1ff6:	da f7       	brpl	.-10     	; 0x1fee <__floatsisf+0x62>
    1ff8:	88 0f       	add	r24, r24
    1ffa:	96 95       	lsr	r25
    1ffc:	87 95       	ror	r24
    1ffe:	97 f9       	bld	r25, 7
    2000:	08 95       	ret

00002002 <__fp_cmp>:
    2002:	99 0f       	add	r25, r25
    2004:	00 08       	sbc	r0, r0
    2006:	55 0f       	add	r21, r21
    2008:	aa 0b       	sbc	r26, r26
    200a:	e0 e8       	ldi	r30, 0x80	; 128
    200c:	fe ef       	ldi	r31, 0xFE	; 254
    200e:	16 16       	cp	r1, r22
    2010:	17 06       	cpc	r1, r23
    2012:	e8 07       	cpc	r30, r24
    2014:	f9 07       	cpc	r31, r25
    2016:	c0 f0       	brcs	.+48     	; 0x2048 <__fp_cmp+0x46>
    2018:	12 16       	cp	r1, r18
    201a:	13 06       	cpc	r1, r19
    201c:	e4 07       	cpc	r30, r20
    201e:	f5 07       	cpc	r31, r21
    2020:	98 f0       	brcs	.+38     	; 0x2048 <__fp_cmp+0x46>
    2022:	62 1b       	sub	r22, r18
    2024:	73 0b       	sbc	r23, r19
    2026:	84 0b       	sbc	r24, r20
    2028:	95 0b       	sbc	r25, r21
    202a:	39 f4       	brne	.+14     	; 0x203a <__fp_cmp+0x38>
    202c:	0a 26       	eor	r0, r26
    202e:	61 f0       	breq	.+24     	; 0x2048 <__fp_cmp+0x46>
    2030:	23 2b       	or	r18, r19
    2032:	24 2b       	or	r18, r20
    2034:	25 2b       	or	r18, r21
    2036:	21 f4       	brne	.+8      	; 0x2040 <__fp_cmp+0x3e>
    2038:	08 95       	ret
    203a:	0a 26       	eor	r0, r26
    203c:	09 f4       	brne	.+2      	; 0x2040 <__fp_cmp+0x3e>
    203e:	a1 40       	sbci	r26, 0x01	; 1
    2040:	a6 95       	lsr	r26
    2042:	8f ef       	ldi	r24, 0xFF	; 255
    2044:	81 1d       	adc	r24, r1
    2046:	81 1d       	adc	r24, r1
    2048:	08 95       	ret

0000204a <__fp_inf>:
    204a:	97 f9       	bld	r25, 7
    204c:	9f 67       	ori	r25, 0x7F	; 127
    204e:	80 e8       	ldi	r24, 0x80	; 128
    2050:	70 e0       	ldi	r23, 0x00	; 0
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	08 95       	ret

00002056 <__fp_nan>:
    2056:	9f ef       	ldi	r25, 0xFF	; 255
    2058:	80 ec       	ldi	r24, 0xC0	; 192
    205a:	08 95       	ret

0000205c <__fp_pscA>:
    205c:	00 24       	eor	r0, r0
    205e:	0a 94       	dec	r0
    2060:	16 16       	cp	r1, r22
    2062:	17 06       	cpc	r1, r23
    2064:	18 06       	cpc	r1, r24
    2066:	09 06       	cpc	r0, r25
    2068:	08 95       	ret

0000206a <__fp_pscB>:
    206a:	00 24       	eor	r0, r0
    206c:	0a 94       	dec	r0
    206e:	12 16       	cp	r1, r18
    2070:	13 06       	cpc	r1, r19
    2072:	14 06       	cpc	r1, r20
    2074:	05 06       	cpc	r0, r21
    2076:	08 95       	ret

00002078 <__fp_round>:
    2078:	09 2e       	mov	r0, r25
    207a:	03 94       	inc	r0
    207c:	00 0c       	add	r0, r0
    207e:	11 f4       	brne	.+4      	; 0x2084 <__fp_round+0xc>
    2080:	88 23       	and	r24, r24
    2082:	52 f0       	brmi	.+20     	; 0x2098 <__fp_round+0x20>
    2084:	bb 0f       	add	r27, r27
    2086:	40 f4       	brcc	.+16     	; 0x2098 <__fp_round+0x20>
    2088:	bf 2b       	or	r27, r31
    208a:	11 f4       	brne	.+4      	; 0x2090 <__fp_round+0x18>
    208c:	60 ff       	sbrs	r22, 0
    208e:	04 c0       	rjmp	.+8      	; 0x2098 <__fp_round+0x20>
    2090:	6f 5f       	subi	r22, 0xFF	; 255
    2092:	7f 4f       	sbci	r23, 0xFF	; 255
    2094:	8f 4f       	sbci	r24, 0xFF	; 255
    2096:	9f 4f       	sbci	r25, 0xFF	; 255
    2098:	08 95       	ret

0000209a <__fp_split3>:
    209a:	57 fd       	sbrc	r21, 7
    209c:	90 58       	subi	r25, 0x80	; 128
    209e:	44 0f       	add	r20, r20
    20a0:	55 1f       	adc	r21, r21
    20a2:	59 f0       	breq	.+22     	; 0x20ba <__fp_splitA+0x10>
    20a4:	5f 3f       	cpi	r21, 0xFF	; 255
    20a6:	71 f0       	breq	.+28     	; 0x20c4 <__fp_splitA+0x1a>
    20a8:	47 95       	ror	r20

000020aa <__fp_splitA>:
    20aa:	88 0f       	add	r24, r24
    20ac:	97 fb       	bst	r25, 7
    20ae:	99 1f       	adc	r25, r25
    20b0:	61 f0       	breq	.+24     	; 0x20ca <__fp_splitA+0x20>
    20b2:	9f 3f       	cpi	r25, 0xFF	; 255
    20b4:	79 f0       	breq	.+30     	; 0x20d4 <__fp_splitA+0x2a>
    20b6:	87 95       	ror	r24
    20b8:	08 95       	ret
    20ba:	12 16       	cp	r1, r18
    20bc:	13 06       	cpc	r1, r19
    20be:	14 06       	cpc	r1, r20
    20c0:	55 1f       	adc	r21, r21
    20c2:	f2 cf       	rjmp	.-28     	; 0x20a8 <__fp_split3+0xe>
    20c4:	46 95       	lsr	r20
    20c6:	f1 df       	rcall	.-30     	; 0x20aa <__fp_splitA>
    20c8:	08 c0       	rjmp	.+16     	; 0x20da <__fp_splitA+0x30>
    20ca:	16 16       	cp	r1, r22
    20cc:	17 06       	cpc	r1, r23
    20ce:	18 06       	cpc	r1, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	f1 cf       	rjmp	.-30     	; 0x20b6 <__fp_splitA+0xc>
    20d4:	86 95       	lsr	r24
    20d6:	71 05       	cpc	r23, r1
    20d8:	61 05       	cpc	r22, r1
    20da:	08 94       	sec
    20dc:	08 95       	ret

000020de <__fp_zero>:
    20de:	e8 94       	clt

000020e0 <__fp_szero>:
    20e0:	bb 27       	eor	r27, r27
    20e2:	66 27       	eor	r22, r22
    20e4:	77 27       	eor	r23, r23
    20e6:	cb 01       	movw	r24, r22
    20e8:	97 f9       	bld	r25, 7
    20ea:	08 95       	ret

000020ec <__gesf2>:
    20ec:	8a df       	rcall	.-236    	; 0x2002 <__fp_cmp>
    20ee:	08 f4       	brcc	.+2      	; 0x20f2 <__gesf2+0x6>
    20f0:	8f ef       	ldi	r24, 0xFF	; 255
    20f2:	08 95       	ret

000020f4 <__mulsf3>:
    20f4:	0b d0       	rcall	.+22     	; 0x210c <__mulsf3x>
    20f6:	c0 cf       	rjmp	.-128    	; 0x2078 <__fp_round>
    20f8:	b1 df       	rcall	.-158    	; 0x205c <__fp_pscA>
    20fa:	28 f0       	brcs	.+10     	; 0x2106 <__mulsf3+0x12>
    20fc:	b6 df       	rcall	.-148    	; 0x206a <__fp_pscB>
    20fe:	18 f0       	brcs	.+6      	; 0x2106 <__mulsf3+0x12>
    2100:	95 23       	and	r25, r21
    2102:	09 f0       	breq	.+2      	; 0x2106 <__mulsf3+0x12>
    2104:	a2 cf       	rjmp	.-188    	; 0x204a <__fp_inf>
    2106:	a7 cf       	rjmp	.-178    	; 0x2056 <__fp_nan>
    2108:	11 24       	eor	r1, r1
    210a:	ea cf       	rjmp	.-44     	; 0x20e0 <__fp_szero>

0000210c <__mulsf3x>:
    210c:	c6 df       	rcall	.-116    	; 0x209a <__fp_split3>
    210e:	a0 f3       	brcs	.-24     	; 0x20f8 <__mulsf3+0x4>

00002110 <__mulsf3_pse>:
    2110:	95 9f       	mul	r25, r21
    2112:	d1 f3       	breq	.-12     	; 0x2108 <__mulsf3+0x14>
    2114:	95 0f       	add	r25, r21
    2116:	50 e0       	ldi	r21, 0x00	; 0
    2118:	55 1f       	adc	r21, r21
    211a:	62 9f       	mul	r22, r18
    211c:	f0 01       	movw	r30, r0
    211e:	72 9f       	mul	r23, r18
    2120:	bb 27       	eor	r27, r27
    2122:	f0 0d       	add	r31, r0
    2124:	b1 1d       	adc	r27, r1
    2126:	63 9f       	mul	r22, r19
    2128:	aa 27       	eor	r26, r26
    212a:	f0 0d       	add	r31, r0
    212c:	b1 1d       	adc	r27, r1
    212e:	aa 1f       	adc	r26, r26
    2130:	64 9f       	mul	r22, r20
    2132:	66 27       	eor	r22, r22
    2134:	b0 0d       	add	r27, r0
    2136:	a1 1d       	adc	r26, r1
    2138:	66 1f       	adc	r22, r22
    213a:	82 9f       	mul	r24, r18
    213c:	22 27       	eor	r18, r18
    213e:	b0 0d       	add	r27, r0
    2140:	a1 1d       	adc	r26, r1
    2142:	62 1f       	adc	r22, r18
    2144:	73 9f       	mul	r23, r19
    2146:	b0 0d       	add	r27, r0
    2148:	a1 1d       	adc	r26, r1
    214a:	62 1f       	adc	r22, r18
    214c:	83 9f       	mul	r24, r19
    214e:	a0 0d       	add	r26, r0
    2150:	61 1d       	adc	r22, r1
    2152:	22 1f       	adc	r18, r18
    2154:	74 9f       	mul	r23, r20
    2156:	33 27       	eor	r19, r19
    2158:	a0 0d       	add	r26, r0
    215a:	61 1d       	adc	r22, r1
    215c:	23 1f       	adc	r18, r19
    215e:	84 9f       	mul	r24, r20
    2160:	60 0d       	add	r22, r0
    2162:	21 1d       	adc	r18, r1
    2164:	82 2f       	mov	r24, r18
    2166:	76 2f       	mov	r23, r22
    2168:	6a 2f       	mov	r22, r26
    216a:	11 24       	eor	r1, r1
    216c:	9f 57       	subi	r25, 0x7F	; 127
    216e:	50 40       	sbci	r21, 0x00	; 0
    2170:	8a f0       	brmi	.+34     	; 0x2194 <__mulsf3_pse+0x84>
    2172:	e1 f0       	breq	.+56     	; 0x21ac <__mulsf3_pse+0x9c>
    2174:	88 23       	and	r24, r24
    2176:	4a f0       	brmi	.+18     	; 0x218a <__mulsf3_pse+0x7a>
    2178:	ee 0f       	add	r30, r30
    217a:	ff 1f       	adc	r31, r31
    217c:	bb 1f       	adc	r27, r27
    217e:	66 1f       	adc	r22, r22
    2180:	77 1f       	adc	r23, r23
    2182:	88 1f       	adc	r24, r24
    2184:	91 50       	subi	r25, 0x01	; 1
    2186:	50 40       	sbci	r21, 0x00	; 0
    2188:	a9 f7       	brne	.-22     	; 0x2174 <__mulsf3_pse+0x64>
    218a:	9e 3f       	cpi	r25, 0xFE	; 254
    218c:	51 05       	cpc	r21, r1
    218e:	70 f0       	brcs	.+28     	; 0x21ac <__mulsf3_pse+0x9c>
    2190:	5c cf       	rjmp	.-328    	; 0x204a <__fp_inf>
    2192:	a6 cf       	rjmp	.-180    	; 0x20e0 <__fp_szero>
    2194:	5f 3f       	cpi	r21, 0xFF	; 255
    2196:	ec f3       	brlt	.-6      	; 0x2192 <__mulsf3_pse+0x82>
    2198:	98 3e       	cpi	r25, 0xE8	; 232
    219a:	dc f3       	brlt	.-10     	; 0x2192 <__mulsf3_pse+0x82>
    219c:	86 95       	lsr	r24
    219e:	77 95       	ror	r23
    21a0:	67 95       	ror	r22
    21a2:	b7 95       	ror	r27
    21a4:	f7 95       	ror	r31
    21a6:	e7 95       	ror	r30
    21a8:	9f 5f       	subi	r25, 0xFF	; 255
    21aa:	c1 f7       	brne	.-16     	; 0x219c <__mulsf3_pse+0x8c>
    21ac:	fe 2b       	or	r31, r30
    21ae:	88 0f       	add	r24, r24
    21b0:	91 1d       	adc	r25, r1
    21b2:	96 95       	lsr	r25
    21b4:	87 95       	ror	r24
    21b6:	97 f9       	bld	r25, 7
    21b8:	08 95       	ret
    21ba:	11 f4       	brne	.+4      	; 0x21c0 <__mulsf3_pse+0xb0>
    21bc:	0e f4       	brtc	.+2      	; 0x21c0 <__mulsf3_pse+0xb0>
    21be:	4b cf       	rjmp	.-362    	; 0x2056 <__fp_nan>
    21c0:	41 c0       	rjmp	.+130    	; 0x2244 <__fp_mpack>

000021c2 <sqrt>:
    21c2:	73 df       	rcall	.-282    	; 0x20aa <__fp_splitA>
    21c4:	d0 f3       	brcs	.-12     	; 0x21ba <__mulsf3_pse+0xaa>
    21c6:	99 23       	and	r25, r25
    21c8:	d9 f3       	breq	.-10     	; 0x21c0 <__mulsf3_pse+0xb0>
    21ca:	ce f3       	brts	.-14     	; 0x21be <__mulsf3_pse+0xae>
    21cc:	9f 57       	subi	r25, 0x7F	; 127
    21ce:	55 0b       	sbc	r21, r21
    21d0:	87 ff       	sbrs	r24, 7
    21d2:	46 d0       	rcall	.+140    	; 0x2260 <__fp_norm2>
    21d4:	00 24       	eor	r0, r0
    21d6:	a0 e6       	ldi	r26, 0x60	; 96
    21d8:	40 ea       	ldi	r20, 0xA0	; 160
    21da:	90 01       	movw	r18, r0
    21dc:	80 58       	subi	r24, 0x80	; 128
    21de:	56 95       	lsr	r21
    21e0:	97 95       	ror	r25
    21e2:	28 f4       	brcc	.+10     	; 0x21ee <sqrt+0x2c>
    21e4:	80 5c       	subi	r24, 0xC0	; 192
    21e6:	66 0f       	add	r22, r22
    21e8:	77 1f       	adc	r23, r23
    21ea:	88 1f       	adc	r24, r24
    21ec:	20 f0       	brcs	.+8      	; 0x21f6 <sqrt+0x34>
    21ee:	26 17       	cp	r18, r22
    21f0:	37 07       	cpc	r19, r23
    21f2:	48 07       	cpc	r20, r24
    21f4:	30 f4       	brcc	.+12     	; 0x2202 <sqrt+0x40>
    21f6:	62 1b       	sub	r22, r18
    21f8:	73 0b       	sbc	r23, r19
    21fa:	84 0b       	sbc	r24, r20
    21fc:	20 29       	or	r18, r0
    21fe:	31 29       	or	r19, r1
    2200:	4a 2b       	or	r20, r26
    2202:	a6 95       	lsr	r26
    2204:	17 94       	ror	r1
    2206:	07 94       	ror	r0
    2208:	20 25       	eor	r18, r0
    220a:	31 25       	eor	r19, r1
    220c:	4a 27       	eor	r20, r26
    220e:	58 f7       	brcc	.-42     	; 0x21e6 <sqrt+0x24>
    2210:	66 0f       	add	r22, r22
    2212:	77 1f       	adc	r23, r23
    2214:	88 1f       	adc	r24, r24
    2216:	20 f0       	brcs	.+8      	; 0x2220 <sqrt+0x5e>
    2218:	26 17       	cp	r18, r22
    221a:	37 07       	cpc	r19, r23
    221c:	48 07       	cpc	r20, r24
    221e:	30 f4       	brcc	.+12     	; 0x222c <sqrt+0x6a>
    2220:	62 0b       	sbc	r22, r18
    2222:	73 0b       	sbc	r23, r19
    2224:	84 0b       	sbc	r24, r20
    2226:	20 0d       	add	r18, r0
    2228:	31 1d       	adc	r19, r1
    222a:	41 1d       	adc	r20, r1
    222c:	a0 95       	com	r26
    222e:	81 f7       	brne	.-32     	; 0x2210 <sqrt+0x4e>
    2230:	b9 01       	movw	r22, r18
    2232:	84 2f       	mov	r24, r20
    2234:	91 58       	subi	r25, 0x81	; 129
    2236:	88 0f       	add	r24, r24
    2238:	96 95       	lsr	r25
    223a:	87 95       	ror	r24
    223c:	08 95       	ret

0000223e <square>:
    223e:	9b 01       	movw	r18, r22
    2240:	ac 01       	movw	r20, r24
    2242:	58 cf       	rjmp	.-336    	; 0x20f4 <__mulsf3>

00002244 <__fp_mpack>:
    2244:	9f 3f       	cpi	r25, 0xFF	; 255
    2246:	31 f0       	breq	.+12     	; 0x2254 <__fp_mpack_finite+0xc>

00002248 <__fp_mpack_finite>:
    2248:	91 50       	subi	r25, 0x01	; 1
    224a:	20 f4       	brcc	.+8      	; 0x2254 <__fp_mpack_finite+0xc>
    224c:	87 95       	ror	r24
    224e:	77 95       	ror	r23
    2250:	67 95       	ror	r22
    2252:	b7 95       	ror	r27
    2254:	88 0f       	add	r24, r24
    2256:	91 1d       	adc	r25, r1
    2258:	96 95       	lsr	r25
    225a:	87 95       	ror	r24
    225c:	97 f9       	bld	r25, 7
    225e:	08 95       	ret

00002260 <__fp_norm2>:
    2260:	91 50       	subi	r25, 0x01	; 1
    2262:	50 40       	sbci	r21, 0x00	; 0
    2264:	66 0f       	add	r22, r22
    2266:	77 1f       	adc	r23, r23
    2268:	88 1f       	adc	r24, r24
    226a:	d2 f7       	brpl	.-12     	; 0x2260 <__fp_norm2>
    226c:	08 95       	ret

0000226e <__udivmodsi4>:
    226e:	a1 e2       	ldi	r26, 0x21	; 33
    2270:	1a 2e       	mov	r1, r26
    2272:	aa 1b       	sub	r26, r26
    2274:	bb 1b       	sub	r27, r27
    2276:	fd 01       	movw	r30, r26
    2278:	0d c0       	rjmp	.+26     	; 0x2294 <__udivmodsi4_ep>

0000227a <__udivmodsi4_loop>:
    227a:	aa 1f       	adc	r26, r26
    227c:	bb 1f       	adc	r27, r27
    227e:	ee 1f       	adc	r30, r30
    2280:	ff 1f       	adc	r31, r31
    2282:	a2 17       	cp	r26, r18
    2284:	b3 07       	cpc	r27, r19
    2286:	e4 07       	cpc	r30, r20
    2288:	f5 07       	cpc	r31, r21
    228a:	20 f0       	brcs	.+8      	; 0x2294 <__udivmodsi4_ep>
    228c:	a2 1b       	sub	r26, r18
    228e:	b3 0b       	sbc	r27, r19
    2290:	e4 0b       	sbc	r30, r20
    2292:	f5 0b       	sbc	r31, r21

00002294 <__udivmodsi4_ep>:
    2294:	66 1f       	adc	r22, r22
    2296:	77 1f       	adc	r23, r23
    2298:	88 1f       	adc	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	1a 94       	dec	r1
    229e:	69 f7       	brne	.-38     	; 0x227a <__udivmodsi4_loop>
    22a0:	60 95       	com	r22
    22a2:	70 95       	com	r23
    22a4:	80 95       	com	r24
    22a6:	90 95       	com	r25
    22a8:	9b 01       	movw	r18, r22
    22aa:	ac 01       	movw	r20, r24
    22ac:	bd 01       	movw	r22, r26
    22ae:	cf 01       	movw	r24, r30
    22b0:	08 95       	ret

000022b2 <memset>:
    22b2:	dc 01       	movw	r26, r24
    22b4:	01 c0       	rjmp	.+2      	; 0x22b8 <memset+0x6>
    22b6:	6d 93       	st	X+, r22
    22b8:	41 50       	subi	r20, 0x01	; 1
    22ba:	50 40       	sbci	r21, 0x00	; 0
    22bc:	e0 f7       	brcc	.-8      	; 0x22b6 <memset+0x4>
    22be:	08 95       	ret

000022c0 <_exit>:
    22c0:	f8 94       	cli

000022c2 <__stop_program>:
    22c2:	ff cf       	rjmp	.-2      	; 0x22c2 <__stop_program>
