
tinyg_tc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000303  00800100  00800100  0000254e  2**0
                  ALLOC
  2 .debug_aranges 000000e0  00000000  00000000  0000254e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000523  00000000  00000000  0000262e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001e05  00000000  00000000  00002b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000081b  00000000  00000000  00004956  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000012b0  00000000  00000000  00005171  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000430  00000000  00000000  00006424  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000b29  00000000  00000000  00006854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c1 00 	jmp	0x182	; 0x182 <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 34 09 	jmp	0x1268	; 0x1268 <__vector_14>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      44:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__vector_17>
      48:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__vector_18>
      4c:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <__vector_19>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

00000068 <__c.2102>:
      68:	48 65 61 74 65 72 20 54 69 6d 65 6f 75 74 20 45     Heater Timeout E
      78:	72 72 6f 72 20 53 68 75 74 64 6f 77 6e 0a 00        rror Shutdown..

00000087 <__c.2100>:
      87:	48 65 61 74 65 72 20 41 6d 62 69 65 6e 74 20 45     Heater Ambient E
      97:	72 72 6f 72 20 53 68 75 74 64 6f 77 6e 0a 00        rror Shutdown..

000000a6 <__c.2097>:
      a6:	48 65 61 74 65 72 20 53 65 6e 73 6f 72 20 45 72     Heater Sensor Er
      b6:	72 6f 72 20 53 68 75 74 64 6f 77 6e 0a 00           ror Shutdown..

000000c4 <initialized>:
      c4:	0a 44 65 76 69 63 65 20 49 6e 69 74 69 61 6c 69     .Device Initiali
      d4:	7a 65 64 0a 00                                      zed..

000000d9 <msg_scode0>:
	...

000000da <msg_scode1>:
      da:	20 20 54 61 6b 69 6e 67 20 52 65 61 64 69 6e 67       Taking Reading
	...

000000eb <msg_scode2>:
      eb:	20 20 42 61 64 20 52 65 61 64 69 6e 67 00             Bad Reading.

000000f9 <msg_scode3>:
      f9:	20 20 44 69 73 63 6f 6e 6e 65 63 74 65 64 00          Disconnected.

00000108 <msg_scode4>:
     108:	20 20 4e 6f 20 50 6f 77 65 72 00                      No Power.

00000113 <msg_scode>:
     113:	d9 00 da 00 eb 00 f9 00 08 01                       ..........

0000011d <msg_hstate0>:
     11d:	20 20 4f 4b 00                                        OK.

00000122 <msg_hstate1>:
     122:	20 20 53 68 75 74 64 6f 77 6e 00                      Shutdown.

0000012d <msg_hstate2>:
     12d:	20 20 48 65 61 74 69 6e 67 00                         Heating.

00000137 <msg_hstate3>:
     137:	20 20 52 45 47 55 4c 41 54 45 44 00                   REGULATED.

00000143 <msg_hstate>:
     143:	1d 01 22 01 2d 01 37 01                             ..".-.7.

0000014b <__c.1908>:
     14b:	0a 44 65 76 69 63 65 20 49 6e 69 74 69 61 6c 69     .Device Initiali
     15b:	7a 65 64 0a 00                                      zed..

00000160 <__c.1925>:
     160:	0a 00                                               ..

00000162 <__c.1920>:
     162:	20 20 48 79 3a 00                                     Hy:.

00000168 <__c.1918>:
     168:	20 20 49 3a 00                                        I:.

0000016d <__c.1916>:
     16d:	20 20 45 72 72 3a 00                                  Err:.

00000174 <__c.1914>:
     174:	20 20 50 57 4d 3a 00                                  PWM:.

0000017b <__c.1912>:
     17b:	54 65 6d 70 3a 00 00                                Temp:..

00000182 <__ctors_end>:
     182:	11 24       	eor	r1, r1
     184:	1f be       	out	0x3f, r1	; 63
     186:	cf ef       	ldi	r28, 0xFF	; 255
     188:	d8 e0       	ldi	r29, 0x08	; 8
     18a:	de bf       	out	0x3e, r29	; 62
     18c:	cd bf       	out	0x3d, r28	; 61

0000018e <__do_clear_bss>:
     18e:	14 e0       	ldi	r17, 0x04	; 4
     190:	a0 e0       	ldi	r26, 0x00	; 0
     192:	b1 e0       	ldi	r27, 0x01	; 1
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a3 30       	cpi	r26, 0x03	; 3
     19a:	b1 07       	cpc	r27, r17
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
     1a2:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <main>:
 *
 *	Device and Kinen initialization
 *	Main loop handler
 */
int main(void)
{
     1aa:	df 93       	push	r29
     1ac:	cf 93       	push	r28
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
	cli();						// initializations
     1b2:	f8 94       	cli
	kinen_init();				// do this first
     1b4:	0e 94 29 0a 	call	0x1452	; 0x1452 <kinen_init>
	device_init();				// handles all the low-level device peripheral inits
     1b8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <device_init>
	serial_init(BAUD_RATE);
     1bc:	60 e8       	ldi	r22, 0x80	; 128
     1be:	75 e2       	ldi	r23, 0x25	; 37
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 4a 0c 	call	0x1894	; 0x1894 <serial_init>
	heater_init();				// setup the heater module and subordinate functions
     1c8:	0e 94 1a 01 	call	0x234	; 0x234 <heater_init>
	sei(); 						// enable interrupts
     1cc:	78 94       	sei

	UNIT_TESTS;					// uncomment __UNIT_TEST_TC to enable unit tests

	heater_on(140);				// turn heater on for testing
     1ce:	60 e0       	ldi	r22, 0x00	; 0
     1d0:	70 e0       	ldi	r23, 0x00	; 0
     1d2:	8c e0       	ldi	r24, 0x0C	; 12
     1d4:	93 e4       	ldi	r25, 0x43	; 67
     1d6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <heater_on>
	rpt_initialized();			// send initalization string
     1da:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <rpt_initialized>

	while (true) {				// go to the controller loop and never return
		_controller();
     1de:	0e 94 0d 01 	call	0x21a	; 0x21a <_controller>
     1e2:	fd cf       	rjmp	.-6      	; 0x1de <main+0x34>

000001e4 <device_init>:

/*
 * Device Init 
 */
void device_init(void)
{
     1e4:	df 93       	push	r29
     1e6:	cf 93       	push	r28
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
	DDRB = PORTB_DIR;			// initialize all ports for proper IO function
     1ec:	e4 e2       	ldi	r30, 0x24	; 36
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 e1       	ldi	r24, 0x10	; 16
     1f2:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
     1f4:	e7 e2       	ldi	r30, 0x27	; 39
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
     1fa:	ea e2       	ldi	r30, 0x2A	; 42
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	8c e0       	ldi	r24, 0x0C	; 12
     200:	80 83       	st	Z, r24

	adc_init(ADC_CHANNEL);
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	0e 94 5d 07 	call	0xeba	; 0xeba <adc_init>
	pwm_init();
     208:	0e 94 af 07 	call	0xf5e	; 0xf5e <pwm_init>
	tick_init();
     20c:	0e 94 14 09 	call	0x1228	; 0x1228 <tick_init>
	led_off();					// put off the red light [~Sting, 1978]
     210:	0e 94 bd 09 	call	0x137a	; 0x137a <led_off>
}
     214:	cf 91       	pop	r28
     216:	df 91       	pop	r29
     218:	08 95       	ret

0000021a <_controller>:
 *	start of the list. For any other status code exceution continues down the list
 */

#define	DISPATCH(func) if (func == SC_EAGAIN) return; 
static void _controller()
{
     21a:	df 93       	push	r29
     21c:	cf 93       	push	r28
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
	DISPATCH(kinen_callback());		// intercept low-level communication events
     222:	0e 94 32 0a 	call	0x1464	; 0x1464 <kinen_callback>
     226:	82 30       	cpi	r24, 0x02	; 2
     228:	11 f0       	breq	.+4      	; 0x22e <_controller+0x14>
	DISPATCH(tick_callback());		// regular interval timer clock handler (ticks)
     22a:	0e 94 49 09 	call	0x1292	; 0x1292 <tick_callback>
}
     22e:	cf 91       	pop	r28
     230:	df 91       	pop	r29
     232:	08 95       	ret

00000234 <heater_init>:
 *	heater_init() sets default values that may be overwritten via Kinen communications. 
 *	heater_on() sets initial values used regardless of any changes made to settings.
 */

void heater_init()
{ 
     234:	df 93       	push	r29
     236:	cf 93       	push	r28
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
	// initialize heater, start PID and PWM
	// note: PWM and ADC are initialized as part of the device init
	memset(&heater, 0, sizeof(Heater));
     23c:	87 e0       	ldi	r24, 0x07	; 7
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	60 e0       	ldi	r22, 0x00	; 0
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	46 e2       	ldi	r20, 0x26	; 38
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	0e 94 64 12 	call	0x24c8	; 0x24c8 <memset>
	heater.regulation_range = HEATER_REGULATION_RANGE;
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	a0 e4       	ldi	r26, 0x40	; 64
     252:	b0 e4       	ldi	r27, 0x40	; 64
     254:	80 93 15 01 	sts	0x0115, r24
     258:	90 93 16 01 	sts	0x0116, r25
     25c:	a0 93 17 01 	sts	0x0117, r26
     260:	b0 93 18 01 	sts	0x0118, r27
	heater.ambient_timeout = HEATER_AMBIENT_TIMEOUT;
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	a4 eb       	ldi	r26, 0xB4	; 180
     26a:	b2 e4       	ldi	r27, 0x42	; 66
     26c:	80 93 1d 01 	sts	0x011D, r24
     270:	90 93 1e 01 	sts	0x011E, r25
     274:	a0 93 1f 01 	sts	0x011F, r26
     278:	b0 93 20 01 	sts	0x0120, r27
	heater.regulation_timeout = HEATER_REGULATION_TIMEOUT;
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	a6 e9       	ldi	r26, 0x96	; 150
     282:	b3 e4       	ldi	r27, 0x43	; 67
     284:	80 93 21 01 	sts	0x0121, r24
     288:	90 93 22 01 	sts	0x0122, r25
     28c:	a0 93 23 01 	sts	0x0123, r26
     290:	b0 93 24 01 	sts	0x0124, r27
	heater.ambient_temperature = HEATER_AMBIENT_TEMPERATURE;
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	a0 e2       	ldi	r26, 0x20	; 32
     29a:	b2 e4       	ldi	r27, 0x42	; 66
     29c:	80 93 25 01 	sts	0x0125, r24
     2a0:	90 93 26 01 	sts	0x0126, r25
     2a4:	a0 93 27 01 	sts	0x0127, r26
     2a8:	b0 93 28 01 	sts	0x0128, r27
	heater.overheat_temperature = HEATER_OVERHEAT_TEMPERATURE;
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	a6 e9       	ldi	r26, 0x96	; 150
     2b2:	b3 e4       	ldi	r27, 0x43	; 67
     2b4:	80 93 29 01 	sts	0x0129, r24
     2b8:	90 93 2a 01 	sts	0x012A, r25
     2bc:	a0 93 2b 01 	sts	0x012B, r26
     2c0:	b0 93 2c 01 	sts	0x012C, r27
	heater.bad_reading_max = HEATER_BAD_READING_MAX;
     2c4:	85 e0       	ldi	r24, 0x05	; 5
     2c6:	80 93 0b 01 	sts	0x010B, r24
	sensor_init();
     2ca:	0e 94 43 05 	call	0xa86	; 0xa86 <sensor_init>
	pid_init();
     2ce:	0e 94 39 03 	call	0x672	; 0x672 <pid_init>
}
     2d2:	cf 91       	pop	r28
     2d4:	df 91       	pop	r29
     2d6:	08 95       	ret

000002d8 <heater_on>:

void heater_on(double setpoint)
{
     2d8:	df 93       	push	r29
     2da:	cf 93       	push	r28
     2dc:	00 d0       	rcall	.+0      	; 0x2de <heater_on+0x6>
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <heater_on+0x8>
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	69 83       	std	Y+1, r22	; 0x01
     2e6:	7a 83       	std	Y+2, r23	; 0x02
     2e8:	8b 83       	std	Y+3, r24	; 0x03
     2ea:	9c 83       	std	Y+4, r25	; 0x04
	// no action if heater is already on
	if ((heater.state == HEATER_HEATING) || (heater.state == HEATER_REGULATED)) {
     2ec:	80 91 07 01 	lds	r24, 0x0107
     2f0:	82 30       	cpi	r24, 0x02	; 2
     2f2:	a9 f1       	breq	.+106    	; 0x35e <heater_on+0x86>
     2f4:	80 91 07 01 	lds	r24, 0x0107
     2f8:	83 30       	cpi	r24, 0x03	; 3
     2fa:	89 f1       	breq	.+98     	; 0x35e <heater_on+0x86>
		return;
	}
	// turn on lower level functions
	sensor_on();						// enable the sensor
     2fc:	0e 94 8e 05 	call	0xb1c	; 0xb1c <sensor_on>
	sensor_start_reading();				// now start a reading
     300:	0e 94 a1 05 	call	0xb42	; 0xb42 <sensor_start_reading>
	pid_reset();
     304:	0e 94 87 03 	call	0x70e	; 0x70e <pid_reset>
	pwm_on(PWM_FREQUENCY, 0);			// duty cycle will be set by PID loop
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	8a e7       	ldi	r24, 0x7A	; 122
     30e:	94 e4       	ldi	r25, 0x44	; 68
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <pwm_on>

	// initialize values for a heater cycle
	heater.setpoint = setpoint;
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	9a 81       	ldd	r25, Y+2	; 0x02
     320:	ab 81       	ldd	r26, Y+3	; 0x03
     322:	bc 81       	ldd	r27, Y+4	; 0x04
     324:	80 93 11 01 	sts	0x0111, r24
     328:	90 93 12 01 	sts	0x0112, r25
     32c:	a0 93 13 01 	sts	0x0113, r26
     330:	b0 93 14 01 	sts	0x0114, r27
	heater.hysteresis = 0;
     334:	10 92 0a 01 	sts	0x010A, r1
	heater.bad_reading_count = 0;
     338:	10 92 0c 01 	sts	0x010C, r1
	heater.regulation_timer = 0;		// reset timeouts
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	a0 e0       	ldi	r26, 0x00	; 0
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	80 93 19 01 	sts	0x0119, r24
     348:	90 93 1a 01 	sts	0x011A, r25
     34c:	a0 93 1b 01 	sts	0x011B, r26
     350:	b0 93 1c 01 	sts	0x011C, r27
	heater.state = HEATER_HEATING;
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	80 93 07 01 	sts	0x0107, r24
	led_off();
     35a:	0e 94 bd 09 	call	0x137a	; 0x137a <led_off>
}
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	cf 91       	pop	r28
     368:	df 91       	pop	r29
     36a:	08 95       	ret

0000036c <heater_off>:

void heater_off(uint8_t state, uint8_t code) 
{
     36c:	df 93       	push	r29
     36e:	cf 93       	push	r28
     370:	00 d0       	rcall	.+0      	; 0x372 <heater_off+0x6>
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	89 83       	std	Y+1, r24	; 0x01
     378:	6a 83       	std	Y+2, r22	; 0x02
	pwm_off();							// stop sending current to the heater
     37a:	0e 94 0e 08 	call	0x101c	; 0x101c <pwm_off>
	sensor_off();						// stop taking readings
     37e:	0e 94 98 05 	call	0xb30	; 0xb30 <sensor_off>
	heater.state = state;
     382:	89 81       	ldd	r24, Y+1	; 0x01
     384:	80 93 07 01 	sts	0x0107, r24
	heater.code = code;
     388:	8a 81       	ldd	r24, Y+2	; 0x02
     38a:	80 93 08 01 	sts	0x0108, r24
	led_off();
     38e:	0e 94 bd 09 	call	0x137a	; 0x137a <led_off>
}
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	cf 91       	pop	r28
     398:	df 91       	pop	r29
     39a:	08 95       	ret

0000039c <heater_callback>:

void heater_callback()
{
     39c:	df 93       	push	r29
     39e:	cf 93       	push	r28
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <heater_callback+0x6>
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <heater_callback+0x8>
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
	// catch the no-op cases
	if ((heater.state == HEATER_OFF) || (heater.state == HEATER_SHUTDOWN)) { return;}
     3a8:	80 91 07 01 	lds	r24, 0x0107
     3ac:	88 23       	and	r24, r24
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <heater_callback+0x16>
     3b0:	59 c1       	rjmp	.+690    	; 0x664 <heater_callback+0x2c8>
     3b2:	80 91 07 01 	lds	r24, 0x0107
     3b6:	81 30       	cpi	r24, 0x01	; 1
     3b8:	09 f4       	brne	.+2      	; 0x3bc <heater_callback+0x20>
     3ba:	54 c1       	rjmp	.+680    	; 0x664 <heater_callback+0x2c8>
	rpt_readout();
     3bc:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <rpt_readout>

	// get current temperature from the sensor
	heater.temperature = sensor_get_temperature();
     3c0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <sensor_get_temperature>
     3c4:	dc 01       	movw	r26, r24
     3c6:	cb 01       	movw	r24, r22
     3c8:	80 93 0d 01 	sts	0x010D, r24
     3cc:	90 93 0e 01 	sts	0x010E, r25
     3d0:	a0 93 0f 01 	sts	0x010F, r26
     3d4:	b0 93 10 01 	sts	0x0110, r27

	// trap overheat condition
	if (heater.temperature > heater.overheat_temperature) {
     3d8:	80 91 0d 01 	lds	r24, 0x010D
     3dc:	90 91 0e 01 	lds	r25, 0x010E
     3e0:	a0 91 0f 01 	lds	r26, 0x010F
     3e4:	b0 91 10 01 	lds	r27, 0x0110
     3e8:	20 91 29 01 	lds	r18, 0x0129
     3ec:	30 91 2a 01 	lds	r19, 0x012A
     3f0:	40 91 2b 01 	lds	r20, 0x012B
     3f4:	50 91 2c 01 	lds	r21, 0x012C
     3f8:	bc 01       	movw	r22, r24
     3fa:	cd 01       	movw	r24, r26
     3fc:	0e 94 81 11 	call	0x2302	; 0x2302 <__gesf2>
     400:	18 16       	cp	r1, r24
     402:	2c f4       	brge	.+10     	; 0x40e <heater_callback+0x72>
		heater_off(HEATER_SHUTDOWN, HEATER_OVERHEATED);
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	63 e0       	ldi	r22, 0x03	; 3
     408:	0e 94 b6 01 	call	0x36c	; 0x36c <heater_off>
     40c:	2b c1       	rjmp	.+598    	; 0x664 <heater_callback+0x2c8>
		return;
	}

	sensor_start_reading();				// start reading for the next interval
     40e:	0e 94 a1 05 	call	0xb42	; 0xb42 <sensor_start_reading>

	// handle bad readings from the sensor
	if (heater.temperature < ABSOLUTE_ZERO) {
     412:	80 91 0d 01 	lds	r24, 0x010D
     416:	90 91 0e 01 	lds	r25, 0x010E
     41a:	a0 91 0f 01 	lds	r26, 0x010F
     41e:	b0 91 10 01 	lds	r27, 0x0110
     422:	bc 01       	movw	r22, r24
     424:	cd 01       	movw	r24, r26
     426:	23 e3       	ldi	r18, 0x33	; 51
     428:	33 e9       	ldi	r19, 0x93	; 147
     42a:	48 e8       	ldi	r20, 0x88	; 136
     42c:	53 ec       	ldi	r21, 0xC3	; 195
     42e:	0e 94 32 10 	call	0x2064	; 0x2064 <__cmpsf2>
     432:	88 23       	and	r24, r24
     434:	ac f4       	brge	.+42     	; 0x460 <heater_callback+0xc4>
		if (++heater.bad_reading_count > heater.bad_reading_max) {
     436:	80 91 0c 01 	lds	r24, 0x010C
     43a:	8f 5f       	subi	r24, 0xFF	; 255
     43c:	80 93 0c 01 	sts	0x010C, r24
     440:	90 91 0c 01 	lds	r25, 0x010C
     444:	80 91 0b 01 	lds	r24, 0x010B
     448:	89 17       	cp	r24, r25
     44a:	08 f0       	brcs	.+2      	; 0x44e <heater_callback+0xb2>
     44c:	0b c1       	rjmp	.+534    	; 0x664 <heater_callback+0x2c8>
			heater_off(HEATER_SHUTDOWN, HEATER_SENSOR_ERROR);
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	64 e0       	ldi	r22, 0x04	; 4
     452:	0e 94 b6 01 	call	0x36c	; 0x36c <heater_off>
			printPgmString(PSTR("Heater Sensor Error Shutdown\n"));	
     456:	86 ea       	ldi	r24, 0xA6	; 166
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printPgmString>
     45e:	02 c1       	rjmp	.+516    	; 0x664 <heater_callback+0x2c8>
		}
		return;
	}
	heater.bad_reading_count = 0;		// reset the bad reading counter
     460:	10 92 0c 01 	sts	0x010C, r1

	double duty_cycle = pid_calculate(heater.setpoint, heater.temperature);
     464:	80 91 11 01 	lds	r24, 0x0111
     468:	90 91 12 01 	lds	r25, 0x0112
     46c:	a0 91 13 01 	lds	r26, 0x0113
     470:	b0 91 14 01 	lds	r27, 0x0114
     474:	20 91 0d 01 	lds	r18, 0x010D
     478:	30 91 0e 01 	lds	r19, 0x010E
     47c:	40 91 0f 01 	lds	r20, 0x010F
     480:	50 91 10 01 	lds	r21, 0x0110
     484:	bc 01       	movw	r22, r24
     486:	cd 01       	movw	r24, r26
     488:	0e 94 b2 03 	call	0x764	; 0x764 <pid_calculate>
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	89 83       	std	Y+1, r24	; 0x01
     492:	9a 83       	std	Y+2, r25	; 0x02
     494:	ab 83       	std	Y+3, r26	; 0x03
     496:	bc 83       	std	Y+4, r27	; 0x04
	pwm_set_duty(duty_cycle);
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	9a 81       	ldd	r25, Y+2	; 0x02
     49c:	ab 81       	ldd	r26, Y+3	; 0x03
     49e:	bc 81       	ldd	r27, Y+4	; 0x04
     4a0:	bc 01       	movw	r22, r24
     4a2:	cd 01       	movw	r24, r26
     4a4:	0e 94 89 08 	call	0x1112	; 0x1112 <pwm_set_duty>

	// handle HEATER exceptions
	if (heater.state == HEATER_HEATING) {
     4a8:	80 91 07 01 	lds	r24, 0x0107
     4ac:	82 30       	cpi	r24, 0x02	; 2
     4ae:	09 f0       	breq	.+2      	; 0x4b2 <heater_callback+0x116>
     4b0:	84 c0       	rjmp	.+264    	; 0x5ba <heater_callback+0x21e>
		heater.regulation_timer += HEATER_TICK_SECONDS;
     4b2:	80 91 19 01 	lds	r24, 0x0119
     4b6:	90 91 1a 01 	lds	r25, 0x011A
     4ba:	a0 91 1b 01 	lds	r26, 0x011B
     4be:	b0 91 1c 01 	lds	r27, 0x011C
     4c2:	bc 01       	movw	r22, r24
     4c4:	cd 01       	movw	r24, r26
     4c6:	2d ec       	ldi	r18, 0xCD	; 205
     4c8:	3c ec       	ldi	r19, 0xCC	; 204
     4ca:	4c ec       	ldi	r20, 0xCC	; 204
     4cc:	5d e3       	ldi	r21, 0x3D	; 61
     4ce:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__addsf3>
     4d2:	dc 01       	movw	r26, r24
     4d4:	cb 01       	movw	r24, r22
     4d6:	80 93 19 01 	sts	0x0119, r24
     4da:	90 93 1a 01 	sts	0x011A, r25
     4de:	a0 93 1b 01 	sts	0x011B, r26
     4e2:	b0 93 1c 01 	sts	0x011C, r27

		if ((heater.temperature < heater.ambient_temperature) &&
     4e6:	80 91 0d 01 	lds	r24, 0x010D
     4ea:	90 91 0e 01 	lds	r25, 0x010E
     4ee:	a0 91 0f 01 	lds	r26, 0x010F
     4f2:	b0 91 10 01 	lds	r27, 0x0110
     4f6:	20 91 25 01 	lds	r18, 0x0125
     4fa:	30 91 26 01 	lds	r19, 0x0126
     4fe:	40 91 27 01 	lds	r20, 0x0127
     502:	50 91 28 01 	lds	r21, 0x0128
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 32 10 	call	0x2064	; 0x2064 <__cmpsf2>
     50e:	88 23       	and	r24, r24
     510:	fc f4       	brge	.+62     	; 0x550 <heater_callback+0x1b4>
     512:	80 91 19 01 	lds	r24, 0x0119
     516:	90 91 1a 01 	lds	r25, 0x011A
     51a:	a0 91 1b 01 	lds	r26, 0x011B
     51e:	b0 91 1c 01 	lds	r27, 0x011C
     522:	20 91 1d 01 	lds	r18, 0x011D
     526:	30 91 1e 01 	lds	r19, 0x011E
     52a:	40 91 1f 01 	lds	r20, 0x011F
     52e:	50 91 20 01 	lds	r21, 0x0120
     532:	bc 01       	movw	r22, r24
     534:	cd 01       	movw	r24, r26
     536:	0e 94 81 11 	call	0x2302	; 0x2302 <__gesf2>
     53a:	18 16       	cp	r1, r24
     53c:	4c f4       	brge	.+18     	; 0x550 <heater_callback+0x1b4>
			(heater.regulation_timer > heater.ambient_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_AMBIENT_TIMED_OUT);
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	61 e0       	ldi	r22, 0x01	; 1
     542:	0e 94 b6 01 	call	0x36c	; 0x36c <heater_off>
			printPgmString(PSTR("Heater Ambient Error Shutdown\n"));	
     546:	87 e8       	ldi	r24, 0x87	; 135
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printPgmString>
     54e:	8a c0       	rjmp	.+276    	; 0x664 <heater_callback+0x2c8>
			return;
		}
		if ((heater.temperature < heater.setpoint) &&
     550:	80 91 0d 01 	lds	r24, 0x010D
     554:	90 91 0e 01 	lds	r25, 0x010E
     558:	a0 91 0f 01 	lds	r26, 0x010F
     55c:	b0 91 10 01 	lds	r27, 0x0110
     560:	20 91 11 01 	lds	r18, 0x0111
     564:	30 91 12 01 	lds	r19, 0x0112
     568:	40 91 13 01 	lds	r20, 0x0113
     56c:	50 91 14 01 	lds	r21, 0x0114
     570:	bc 01       	movw	r22, r24
     572:	cd 01       	movw	r24, r26
     574:	0e 94 32 10 	call	0x2064	; 0x2064 <__cmpsf2>
     578:	88 23       	and	r24, r24
     57a:	fc f4       	brge	.+62     	; 0x5ba <heater_callback+0x21e>
     57c:	80 91 19 01 	lds	r24, 0x0119
     580:	90 91 1a 01 	lds	r25, 0x011A
     584:	a0 91 1b 01 	lds	r26, 0x011B
     588:	b0 91 1c 01 	lds	r27, 0x011C
     58c:	20 91 21 01 	lds	r18, 0x0121
     590:	30 91 22 01 	lds	r19, 0x0122
     594:	40 91 23 01 	lds	r20, 0x0123
     598:	50 91 24 01 	lds	r21, 0x0124
     59c:	bc 01       	movw	r22, r24
     59e:	cd 01       	movw	r24, r26
     5a0:	0e 94 81 11 	call	0x2302	; 0x2302 <__gesf2>
     5a4:	18 16       	cp	r1, r24
     5a6:	4c f4       	brge	.+18     	; 0x5ba <heater_callback+0x21e>
			(heater.regulation_timer > heater.regulation_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_REGULATION_TIMED_OUT);
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	62 e0       	ldi	r22, 0x02	; 2
     5ac:	0e 94 b6 01 	call	0x36c	; 0x36c <heater_off>
			printPgmString(PSTR("Heater Timeout Error Shutdown\n"));	
     5b0:	88 e6       	ldi	r24, 0x68	; 104
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printPgmString>
     5b8:	55 c0       	rjmp	.+170    	; 0x664 <heater_callback+0x2c8>
	// Manage regulation state and LED indicator
	// Heater.regulation_count is a hysteresis register that increments if the 
	// heater is at temp, decrements if not. It pegs at max and min values.
	// The LED flashes if the heater is not in regulation and goes solid if it is.

	if (fabs(pid.error) <= heater.regulation_range) {
     5ba:	80 91 3b 01 	lds	r24, 0x013B
     5be:	90 91 3c 01 	lds	r25, 0x013C
     5c2:	a0 91 3d 01 	lds	r26, 0x013D
     5c6:	b0 91 3e 01 	lds	r27, 0x013E
     5ca:	bf 77       	andi	r27, 0x7F	; 127
     5cc:	20 91 15 01 	lds	r18, 0x0115
     5d0:	30 91 16 01 	lds	r19, 0x0116
     5d4:	40 91 17 01 	lds	r20, 0x0117
     5d8:	50 91 18 01 	lds	r21, 0x0118
     5dc:	bc 01       	movw	r22, r24
     5de:	cd 01       	movw	r24, r26
     5e0:	0e 94 32 10 	call	0x2064	; 0x2064 <__cmpsf2>
     5e4:	18 16       	cp	r1, r24
     5e6:	84 f0       	brlt	.+32     	; 0x608 <heater_callback+0x26c>
		if (++heater.hysteresis > HEATER_HYSTERESIS) {
     5e8:	80 91 0a 01 	lds	r24, 0x010A
     5ec:	8f 5f       	subi	r24, 0xFF	; 255
     5ee:	80 93 0a 01 	sts	0x010A, r24
     5f2:	80 91 0a 01 	lds	r24, 0x010A
     5f6:	8b 30       	cpi	r24, 0x0B	; 11
     5f8:	0c f1       	brlt	.+66     	; 0x63c <heater_callback+0x2a0>
			heater.hysteresis = HEATER_HYSTERESIS;
     5fa:	8a e0       	ldi	r24, 0x0A	; 10
     5fc:	80 93 0a 01 	sts	0x010A, r24
			heater.state = HEATER_REGULATED;
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	80 93 07 01 	sts	0x0107, r24
     606:	1a c0       	rjmp	.+52     	; 0x63c <heater_callback+0x2a0>
		}
	} else {
		if (--heater.hysteresis <= 0) {
     608:	80 91 0a 01 	lds	r24, 0x010A
     60c:	81 50       	subi	r24, 0x01	; 1
     60e:	80 93 0a 01 	sts	0x010A, r24
     612:	80 91 0a 01 	lds	r24, 0x010A
     616:	18 16       	cp	r1, r24
     618:	8c f0       	brlt	.+34     	; 0x63c <heater_callback+0x2a0>
			heater.hysteresis = 0;
     61a:	10 92 0a 01 	sts	0x010A, r1
			heater.regulation_timer = 0;			// reset timeouts
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	a0 e0       	ldi	r26, 0x00	; 0
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	80 93 19 01 	sts	0x0119, r24
     62a:	90 93 1a 01 	sts	0x011A, r25
     62e:	a0 93 1b 01 	sts	0x011B, r26
     632:	b0 93 1c 01 	sts	0x011C, r27
			heater.state = HEATER_HEATING;
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	80 93 07 01 	sts	0x0107, r24
		}
	}
	if (heater.state == HEATER_REGULATED) {
     63c:	80 91 07 01 	lds	r24, 0x0107
     640:	83 30       	cpi	r24, 0x03	; 3
     642:	19 f4       	brne	.+6      	; 0x64a <heater_callback+0x2ae>
		led_on();
     644:	0e 94 af 09 	call	0x135e	; 0x135e <led_on>
     648:	0d c0       	rjmp	.+26     	; 0x664 <heater_callback+0x2c8>
	} else {
		if (++heater.toggle > 3) {
     64a:	80 91 09 01 	lds	r24, 0x0109
     64e:	8f 5f       	subi	r24, 0xFF	; 255
     650:	80 93 09 01 	sts	0x0109, r24
     654:	80 91 09 01 	lds	r24, 0x0109
     658:	84 30       	cpi	r24, 0x04	; 4
     65a:	20 f0       	brcs	.+8      	; 0x664 <heater_callback+0x2c8>
			heater.toggle = 0;
     65c:	10 92 09 01 	sts	0x0109, r1
			led_toggle();
     660:	0e 94 cb 09 	call	0x1396	; 0x1396 <led_toggle>
		}
	}
}
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	cf 91       	pop	r28
     66e:	df 91       	pop	r29
     670:	08 95       	ret

00000672 <pid_init>:
 * pid_reset() - reset PID values to cold start
 * pid_calc() - derived from: http://www.embeddedheaven.com/pid-control-algorithm-c-language.htm
 */

void pid_init() 
{
     672:	df 93       	push	r29
     674:	cf 93       	push	r28
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
	memset(&pid, 0, sizeof(struct PIDstruct));
     67a:	8d e2       	ldi	r24, 0x2D	; 45
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	4a e2       	ldi	r20, 0x2A	; 42
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	0e 94 64 12 	call	0x24c8	; 0x24c8 <memset>
	pid.Kp = PID_Kp;
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 ea       	ldi	r26, 0xA0	; 160
     690:	b0 e4       	ldi	r27, 0x40	; 64
     692:	80 93 4b 01 	sts	0x014B, r24
     696:	90 93 4c 01 	sts	0x014C, r25
     69a:	a0 93 4d 01 	sts	0x014D, r26
     69e:	b0 93 4e 01 	sts	0x014E, r27
	pid.Ki = PID_Ki;
     6a2:	8d ec       	ldi	r24, 0xCD	; 205
     6a4:	9c ec       	ldi	r25, 0xCC	; 204
     6a6:	ac ec       	ldi	r26, 0xCC	; 204
     6a8:	bd e3       	ldi	r27, 0x3D	; 61
     6aa:	80 93 4f 01 	sts	0x014F, r24
     6ae:	90 93 50 01 	sts	0x0150, r25
     6b2:	a0 93 51 01 	sts	0x0151, r26
     6b6:	b0 93 52 01 	sts	0x0152, r27
	pid.Kd = PID_Kd;
     6ba:	8d ec       	ldi	r24, 0xCD	; 205
     6bc:	9c ec       	ldi	r25, 0xCC	; 204
     6be:	ac ec       	ldi	r26, 0xCC	; 204
     6c0:	bd e3       	ldi	r27, 0x3D	; 61
     6c2:	80 93 53 01 	sts	0x0153, r24
     6c6:	90 93 54 01 	sts	0x0154, r25
     6ca:	a0 93 55 01 	sts	0x0155, r26
     6ce:	b0 93 56 01 	sts	0x0156, r27
	pid.output_max = PID_MAX_OUTPUT;		// saturation filter max value
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	a8 ec       	ldi	r26, 0xC8	; 200
     6d8:	b2 e4       	ldi	r27, 0x42	; 66
     6da:	80 93 33 01 	sts	0x0133, r24
     6de:	90 93 34 01 	sts	0x0134, r25
     6e2:	a0 93 35 01 	sts	0x0135, r26
     6e6:	b0 93 36 01 	sts	0x0136, r27
	pid.output_min = PID_MIN_OUTPUT;		// saturation filter min value
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	a0 e0       	ldi	r26, 0x00	; 0
     6f0:	b0 e0       	ldi	r27, 0x00	; 0
     6f2:	80 93 37 01 	sts	0x0137, r24
     6f6:	90 93 38 01 	sts	0x0138, r25
     6fa:	a0 93 39 01 	sts	0x0139, r26
     6fe:	b0 93 3a 01 	sts	0x013A, r27
	pid.state = PID_ON;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	80 93 2d 01 	sts	0x012D, r24
}
     708:	cf 91       	pop	r28
     70a:	df 91       	pop	r29
     70c:	08 95       	ret

0000070e <pid_reset>:

void pid_reset()
{
     70e:	df 93       	push	r29
     710:	cf 93       	push	r28
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
	pid.output = 0;
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	a0 e0       	ldi	r26, 0x00	; 0
     71c:	b0 e0       	ldi	r27, 0x00	; 0
     71e:	80 93 2f 01 	sts	0x012F, r24
     722:	90 93 30 01 	sts	0x0130, r25
     726:	a0 93 31 01 	sts	0x0131, r26
     72a:	b0 93 32 01 	sts	0x0132, r27
	pid.integral = PID_INITIAL_INTEGRAL;
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	a8 e4       	ldi	r26, 0x48	; 72
     734:	b3 e4       	ldi	r27, 0x43	; 67
     736:	80 93 43 01 	sts	0x0143, r24
     73a:	90 93 44 01 	sts	0x0144, r25
     73e:	a0 93 45 01 	sts	0x0145, r26
     742:	b0 93 46 01 	sts	0x0146, r27
	pid.prev_error = 0;
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	a0 e0       	ldi	r26, 0x00	; 0
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	80 93 3f 01 	sts	0x013F, r24
     752:	90 93 40 01 	sts	0x0140, r25
     756:	a0 93 41 01 	sts	0x0141, r26
     75a:	b0 93 42 01 	sts	0x0142, r27
}
     75e:	cf 91       	pop	r28
     760:	df 91       	pop	r29
     762:	08 95       	ret

00000764 <pid_calculate>:

double pid_calculate(double setpoint,double temperature)
{
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	df 93       	push	r29
     76e:	cf 93       	push	r28
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	2c 97       	sbiw	r28, 0x0c	; 12
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	69 83       	std	Y+1, r22	; 0x01
     782:	7a 83       	std	Y+2, r23	; 0x02
     784:	8b 83       	std	Y+3, r24	; 0x03
     786:	9c 83       	std	Y+4, r25	; 0x04
     788:	2d 83       	std	Y+5, r18	; 0x05
     78a:	3e 83       	std	Y+6, r19	; 0x06
     78c:	4f 83       	std	Y+7, r20	; 0x07
     78e:	58 87       	std	Y+8, r21	; 0x08
	if (pid.state == PID_OFF) { return (pid.output_min);}
     790:	80 91 2d 01 	lds	r24, 0x012D
     794:	88 23       	and	r24, r24
     796:	69 f4       	brne	.+26     	; 0x7b2 <pid_calculate+0x4e>
     798:	80 91 37 01 	lds	r24, 0x0137
     79c:	90 91 38 01 	lds	r25, 0x0138
     7a0:	a0 91 39 01 	lds	r26, 0x0139
     7a4:	b0 91 3a 01 	lds	r27, 0x013A
     7a8:	89 87       	std	Y+9, r24	; 0x09
     7aa:	9a 87       	std	Y+10, r25	; 0x0a
     7ac:	ab 87       	std	Y+11, r26	; 0x0b
     7ae:	bc 87       	std	Y+12, r27	; 0x0c
     7b0:	57 c1       	rjmp	.+686    	; 0xa60 <__stack+0x161>

	pid.error = setpoint - temperature;		// current error term
     7b2:	69 81       	ldd	r22, Y+1	; 0x01
     7b4:	7a 81       	ldd	r23, Y+2	; 0x02
     7b6:	8b 81       	ldd	r24, Y+3	; 0x03
     7b8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ba:	2d 81       	ldd	r18, Y+5	; 0x05
     7bc:	3e 81       	ldd	r19, Y+6	; 0x06
     7be:	4f 81       	ldd	r20, Y+7	; 0x07
     7c0:	58 85       	ldd	r21, Y+8	; 0x08
     7c2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
     7c6:	dc 01       	movw	r26, r24
     7c8:	cb 01       	movw	r24, r22
     7ca:	80 93 3b 01 	sts	0x013B, r24
     7ce:	90 93 3c 01 	sts	0x013C, r25
     7d2:	a0 93 3d 01 	sts	0x013D, r26
     7d6:	b0 93 3e 01 	sts	0x013E, r27

	// perform integration only if GT epsilon error, and with anti-windup
	if ((fabs(pid.error) > PID_EPSILON) && (pid.output < pid.output_max)) {	
     7da:	80 91 3b 01 	lds	r24, 0x013B
     7de:	90 91 3c 01 	lds	r25, 0x013C
     7e2:	a0 91 3d 01 	lds	r26, 0x013D
     7e6:	b0 91 3e 01 	lds	r27, 0x013E
     7ea:	bf 77       	andi	r27, 0x7F	; 127
     7ec:	bc 01       	movw	r22, r24
     7ee:	cd 01       	movw	r24, r26
     7f0:	2d ec       	ldi	r18, 0xCD	; 205
     7f2:	3c ec       	ldi	r19, 0xCC	; 204
     7f4:	4c ec       	ldi	r20, 0xCC	; 204
     7f6:	5d e3       	ldi	r21, 0x3D	; 61
     7f8:	0e 94 81 11 	call	0x2302	; 0x2302 <__gesf2>
     7fc:	18 16       	cp	r1, r24
     7fe:	0c f0       	brlt	.+2      	; 0x802 <pid_calculate+0x9e>
     800:	40 c0       	rjmp	.+128    	; 0x882 <pid_calculate+0x11e>
     802:	80 91 2f 01 	lds	r24, 0x012F
     806:	90 91 30 01 	lds	r25, 0x0130
     80a:	a0 91 31 01 	lds	r26, 0x0131
     80e:	b0 91 32 01 	lds	r27, 0x0132
     812:	20 91 33 01 	lds	r18, 0x0133
     816:	30 91 34 01 	lds	r19, 0x0134
     81a:	40 91 35 01 	lds	r20, 0x0135
     81e:	50 91 36 01 	lds	r21, 0x0136
     822:	bc 01       	movw	r22, r24
     824:	cd 01       	movw	r24, r26
     826:	0e 94 32 10 	call	0x2064	; 0x2064 <__cmpsf2>
     82a:	88 23       	and	r24, r24
     82c:	54 f5       	brge	.+84     	; 0x882 <pid_calculate+0x11e>
		pid.integral += (pid.error * PID_DT);
     82e:	e0 90 43 01 	lds	r14, 0x0143
     832:	f0 90 44 01 	lds	r15, 0x0144
     836:	00 91 45 01 	lds	r16, 0x0145
     83a:	10 91 46 01 	lds	r17, 0x0146
     83e:	80 91 3b 01 	lds	r24, 0x013B
     842:	90 91 3c 01 	lds	r25, 0x013C
     846:	a0 91 3d 01 	lds	r26, 0x013D
     84a:	b0 91 3e 01 	lds	r27, 0x013E
     84e:	bc 01       	movw	r22, r24
     850:	cd 01       	movw	r24, r26
     852:	2d ec       	ldi	r18, 0xCD	; 205
     854:	3c ec       	ldi	r19, 0xCC	; 204
     856:	4c ec       	ldi	r20, 0xCC	; 204
     858:	5d e3       	ldi	r21, 0x3D	; 61
     85a:	0e 94 85 11 	call	0x230a	; 0x230a <__mulsf3>
     85e:	dc 01       	movw	r26, r24
     860:	cb 01       	movw	r24, r22
     862:	9c 01       	movw	r18, r24
     864:	ad 01       	movw	r20, r26
     866:	c8 01       	movw	r24, r16
     868:	b7 01       	movw	r22, r14
     86a:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__addsf3>
     86e:	dc 01       	movw	r26, r24
     870:	cb 01       	movw	r24, r22
     872:	80 93 43 01 	sts	0x0143, r24
     876:	90 93 44 01 	sts	0x0144, r25
     87a:	a0 93 45 01 	sts	0x0145, r26
     87e:	b0 93 46 01 	sts	0x0146, r27
	}
	// compute derivative and output
	pid.derivative = (pid.error - pid.prev_error) / PID_DT;
     882:	80 91 3b 01 	lds	r24, 0x013B
     886:	90 91 3c 01 	lds	r25, 0x013C
     88a:	a0 91 3d 01 	lds	r26, 0x013D
     88e:	b0 91 3e 01 	lds	r27, 0x013E
     892:	20 91 3f 01 	lds	r18, 0x013F
     896:	30 91 40 01 	lds	r19, 0x0140
     89a:	40 91 41 01 	lds	r20, 0x0141
     89e:	50 91 42 01 	lds	r21, 0x0142
     8a2:	bc 01       	movw	r22, r24
     8a4:	cd 01       	movw	r24, r26
     8a6:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
     8aa:	dc 01       	movw	r26, r24
     8ac:	cb 01       	movw	r24, r22
     8ae:	bc 01       	movw	r22, r24
     8b0:	cd 01       	movw	r24, r26
     8b2:	2d ec       	ldi	r18, 0xCD	; 205
     8b4:	3c ec       	ldi	r19, 0xCC	; 204
     8b6:	4c ec       	ldi	r20, 0xCC	; 204
     8b8:	5d e3       	ldi	r21, 0x3D	; 61
     8ba:	0e 94 36 10 	call	0x206c	; 0x206c <__divsf3>
     8be:	dc 01       	movw	r26, r24
     8c0:	cb 01       	movw	r24, r22
     8c2:	80 93 47 01 	sts	0x0147, r24
     8c6:	90 93 48 01 	sts	0x0148, r25
     8ca:	a0 93 49 01 	sts	0x0149, r26
     8ce:	b0 93 4a 01 	sts	0x014A, r27
	pid.output = pid.Kp * pid.error + pid.Ki * pid.integral + pid.Kd * pid.derivative;
     8d2:	80 91 4b 01 	lds	r24, 0x014B
     8d6:	90 91 4c 01 	lds	r25, 0x014C
     8da:	a0 91 4d 01 	lds	r26, 0x014D
     8de:	b0 91 4e 01 	lds	r27, 0x014E
     8e2:	20 91 3b 01 	lds	r18, 0x013B
     8e6:	30 91 3c 01 	lds	r19, 0x013C
     8ea:	40 91 3d 01 	lds	r20, 0x013D
     8ee:	50 91 3e 01 	lds	r21, 0x013E
     8f2:	bc 01       	movw	r22, r24
     8f4:	cd 01       	movw	r24, r26
     8f6:	0e 94 85 11 	call	0x230a	; 0x230a <__mulsf3>
     8fa:	dc 01       	movw	r26, r24
     8fc:	cb 01       	movw	r24, r22
     8fe:	7c 01       	movw	r14, r24
     900:	8d 01       	movw	r16, r26
     902:	80 91 4f 01 	lds	r24, 0x014F
     906:	90 91 50 01 	lds	r25, 0x0150
     90a:	a0 91 51 01 	lds	r26, 0x0151
     90e:	b0 91 52 01 	lds	r27, 0x0152
     912:	20 91 43 01 	lds	r18, 0x0143
     916:	30 91 44 01 	lds	r19, 0x0144
     91a:	40 91 45 01 	lds	r20, 0x0145
     91e:	50 91 46 01 	lds	r21, 0x0146
     922:	bc 01       	movw	r22, r24
     924:	cd 01       	movw	r24, r26
     926:	0e 94 85 11 	call	0x230a	; 0x230a <__mulsf3>
     92a:	dc 01       	movw	r26, r24
     92c:	cb 01       	movw	r24, r22
     92e:	9c 01       	movw	r18, r24
     930:	ad 01       	movw	r20, r26
     932:	c8 01       	movw	r24, r16
     934:	b7 01       	movw	r22, r14
     936:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__addsf3>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	7c 01       	movw	r14, r24
     940:	8d 01       	movw	r16, r26
     942:	80 91 53 01 	lds	r24, 0x0153
     946:	90 91 54 01 	lds	r25, 0x0154
     94a:	a0 91 55 01 	lds	r26, 0x0155
     94e:	b0 91 56 01 	lds	r27, 0x0156
     952:	20 91 47 01 	lds	r18, 0x0147
     956:	30 91 48 01 	lds	r19, 0x0148
     95a:	40 91 49 01 	lds	r20, 0x0149
     95e:	50 91 4a 01 	lds	r21, 0x014A
     962:	bc 01       	movw	r22, r24
     964:	cd 01       	movw	r24, r26
     966:	0e 94 85 11 	call	0x230a	; 0x230a <__mulsf3>
     96a:	dc 01       	movw	r26, r24
     96c:	cb 01       	movw	r24, r22
     96e:	9c 01       	movw	r18, r24
     970:	ad 01       	movw	r20, r26
     972:	c8 01       	movw	r24, r16
     974:	b7 01       	movw	r22, r14
     976:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__addsf3>
     97a:	dc 01       	movw	r26, r24
     97c:	cb 01       	movw	r24, r22
     97e:	80 93 2f 01 	sts	0x012F, r24
     982:	90 93 30 01 	sts	0x0130, r25
     986:	a0 93 31 01 	sts	0x0131, r26
     98a:	b0 93 32 01 	sts	0x0132, r27

	// saturation filter - fix min amd max outputs
	if(pid.output > pid.output_max) { pid.output = pid.output_max; } else
     98e:	80 91 2f 01 	lds	r24, 0x012F
     992:	90 91 30 01 	lds	r25, 0x0130
     996:	a0 91 31 01 	lds	r26, 0x0131
     99a:	b0 91 32 01 	lds	r27, 0x0132
     99e:	20 91 33 01 	lds	r18, 0x0133
     9a2:	30 91 34 01 	lds	r19, 0x0134
     9a6:	40 91 35 01 	lds	r20, 0x0135
     9aa:	50 91 36 01 	lds	r21, 0x0136
     9ae:	bc 01       	movw	r22, r24
     9b0:	cd 01       	movw	r24, r26
     9b2:	0e 94 81 11 	call	0x2302	; 0x2302 <__gesf2>
     9b6:	18 16       	cp	r1, r24
     9b8:	8c f4       	brge	.+34     	; 0x9dc <__stack+0xdd>
     9ba:	80 91 33 01 	lds	r24, 0x0133
     9be:	90 91 34 01 	lds	r25, 0x0134
     9c2:	a0 91 35 01 	lds	r26, 0x0135
     9c6:	b0 91 36 01 	lds	r27, 0x0136
     9ca:	80 93 2f 01 	sts	0x012F, r24
     9ce:	90 93 30 01 	sts	0x0130, r25
     9d2:	a0 93 31 01 	sts	0x0131, r26
     9d6:	b0 93 32 01 	sts	0x0132, r27
     9da:	26 c0       	rjmp	.+76     	; 0xa28 <__stack+0x129>
	if(pid.output < pid.output_min) { pid.output = pid.output_min; }
     9dc:	80 91 2f 01 	lds	r24, 0x012F
     9e0:	90 91 30 01 	lds	r25, 0x0130
     9e4:	a0 91 31 01 	lds	r26, 0x0131
     9e8:	b0 91 32 01 	lds	r27, 0x0132
     9ec:	20 91 37 01 	lds	r18, 0x0137
     9f0:	30 91 38 01 	lds	r19, 0x0138
     9f4:	40 91 39 01 	lds	r20, 0x0139
     9f8:	50 91 3a 01 	lds	r21, 0x013A
     9fc:	bc 01       	movw	r22, r24
     9fe:	cd 01       	movw	r24, r26
     a00:	0e 94 32 10 	call	0x2064	; 0x2064 <__cmpsf2>
     a04:	88 23       	and	r24, r24
     a06:	84 f4       	brge	.+32     	; 0xa28 <__stack+0x129>
     a08:	80 91 37 01 	lds	r24, 0x0137
     a0c:	90 91 38 01 	lds	r25, 0x0138
     a10:	a0 91 39 01 	lds	r26, 0x0139
     a14:	b0 91 3a 01 	lds	r27, 0x013A
     a18:	80 93 2f 01 	sts	0x012F, r24
     a1c:	90 93 30 01 	sts	0x0130, r25
     a20:	a0 93 31 01 	sts	0x0131, r26
     a24:	b0 93 32 01 	sts	0x0132, r27
	pid.prev_error = pid.error;
     a28:	80 91 3b 01 	lds	r24, 0x013B
     a2c:	90 91 3c 01 	lds	r25, 0x013C
     a30:	a0 91 3d 01 	lds	r26, 0x013D
     a34:	b0 91 3e 01 	lds	r27, 0x013E
     a38:	80 93 3f 01 	sts	0x013F, r24
     a3c:	90 93 40 01 	sts	0x0140, r25
     a40:	a0 93 41 01 	sts	0x0141, r26
     a44:	b0 93 42 01 	sts	0x0142, r27

	return pid.output;
     a48:	80 91 2f 01 	lds	r24, 0x012F
     a4c:	90 91 30 01 	lds	r25, 0x0130
     a50:	a0 91 31 01 	lds	r26, 0x0131
     a54:	b0 91 32 01 	lds	r27, 0x0132
     a58:	89 87       	std	Y+9, r24	; 0x09
     a5a:	9a 87       	std	Y+10, r25	; 0x0a
     a5c:	ab 87       	std	Y+11, r26	; 0x0b
     a5e:	bc 87       	std	Y+12, r27	; 0x0c
     a60:	89 85       	ldd	r24, Y+9	; 0x09
     a62:	9a 85       	ldd	r25, Y+10	; 0x0a
     a64:	ab 85       	ldd	r26, Y+11	; 0x0b
     a66:	bc 85       	ldd	r27, Y+12	; 0x0c
}
     a68:	bc 01       	movw	r22, r24
     a6a:	cd 01       	movw	r24, r26
     a6c:	2c 96       	adiw	r28, 0x0c	; 12
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	cf 91       	pop	r28
     a7a:	df 91       	pop	r29
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	08 95       	ret

00000a86 <sensor_init>:
 * sensor_get_code()		- return latest sensor code
 * sensor_callback() 		- perform sensor sampling / reading
 */

void sensor_init()
{
     a86:	df 93       	push	r29
     a88:	cf 93       	push	r28
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
	memset(&sensor, 0, sizeof(Sensor));
     a8e:	89 e6       	ldi	r24, 0x69	; 105
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	40 e7       	ldi	r20, 0x70	; 112
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	0e 94 64 12 	call	0x24c8	; 0x24c8 <memset>
	sensor.temperature = ABSOLUTE_ZERO;
     a9e:	83 e3       	ldi	r24, 0x33	; 51
     aa0:	93 e9       	ldi	r25, 0x93	; 147
     aa2:	a8 e8       	ldi	r26, 0x88	; 136
     aa4:	b3 ec       	ldi	r27, 0xC3	; 195
     aa6:	80 93 6d 01 	sts	0x016D, r24
     aaa:	90 93 6e 01 	sts	0x016E, r25
     aae:	a0 93 6f 01 	sts	0x016F, r26
     ab2:	b0 93 70 01 	sts	0x0170, r27
	sensor.sample_variance_max = SENSOR_SAMPLE_VARIANCE_MAX;
     ab6:	8d ec       	ldi	r24, 0xCD	; 205
     ab8:	9c ec       	ldi	r25, 0xCC	; 204
     aba:	ac e8       	ldi	r26, 0x8C	; 140
     abc:	bf e3       	ldi	r27, 0x3F	; 63
     abe:	80 93 75 01 	sts	0x0175, r24
     ac2:	90 93 76 01 	sts	0x0176, r25
     ac6:	a0 93 77 01 	sts	0x0177, r26
     aca:	b0 93 78 01 	sts	0x0178, r27
	sensor.reading_variance_max = SENSOR_READING_VARIANCE_MAX;
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 ea       	ldi	r26, 0xA0	; 160
     ad4:	b1 e4       	ldi	r27, 0x41	; 65
     ad6:	80 93 79 01 	sts	0x0179, r24
     ada:	90 93 7a 01 	sts	0x017A, r25
     ade:	a0 93 7b 01 	sts	0x017B, r26
     ae2:	b0 93 7c 01 	sts	0x017C, r27
	sensor.disconnect_temperature = SENSOR_DISCONNECTED_TEMPERATURE;
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a8 ec       	ldi	r26, 0xC8	; 200
     aec:	b3 e4       	ldi	r27, 0x43	; 67
     aee:	80 93 7d 01 	sts	0x017D, r24
     af2:	90 93 7e 01 	sts	0x017E, r25
     af6:	a0 93 7f 01 	sts	0x017F, r26
     afa:	b0 93 80 01 	sts	0x0180, r27
	sensor.no_power_temperature = SENSOR_NO_POWER_TEMPERATURE;
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e0       	ldi	r26, 0x00	; 0
     b04:	b0 ec       	ldi	r27, 0xC0	; 192
     b06:	80 93 81 01 	sts	0x0181, r24
     b0a:	90 93 82 01 	sts	0x0182, r25
     b0e:	a0 93 83 01 	sts	0x0183, r26
     b12:	b0 93 84 01 	sts	0x0184, r27
}
     b16:	cf 91       	pop	r28
     b18:	df 91       	pop	r29
     b1a:	08 95       	ret

00000b1c <sensor_on>:

void sensor_on()
{
     b1c:	df 93       	push	r29
     b1e:	cf 93       	push	r28
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_NO_DATA;
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	80 93 69 01 	sts	0x0169, r24
}
     b2a:	cf 91       	pop	r28
     b2c:	df 91       	pop	r29
     b2e:	08 95       	ret

00000b30 <sensor_off>:

void sensor_off()
{
     b30:	df 93       	push	r29
     b32:	cf 93       	push	r28
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_OFF;
     b38:	10 92 69 01 	sts	0x0169, r1
}
     b3c:	cf 91       	pop	r28
     b3e:	df 91       	pop	r29
     b40:	08 95       	ret

00000b42 <sensor_start_reading>:

void sensor_start_reading() 
{ 
     b42:	df 93       	push	r29
     b44:	cf 93       	push	r28
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
	sensor.sample_idx = 0;
     b4a:	10 92 6b 01 	sts	0x016B, r1
	sensor.code = SENSOR_TAKING_READING;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	80 93 6a 01 	sts	0x016A, r24
}
     b54:	cf 91       	pop	r28
     b56:	df 91       	pop	r29
     b58:	08 95       	ret

00000b5a <sensor_get_state>:

uint8_t sensor_get_state() { return (sensor.state);}
     b5a:	df 93       	push	r29
     b5c:	cf 93       	push	r28
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	80 91 69 01 	lds	r24, 0x0169
     b66:	cf 91       	pop	r28
     b68:	df 91       	pop	r29
     b6a:	08 95       	ret

00000b6c <sensor_get_code>:
uint8_t sensor_get_code() { return (sensor.code);}
     b6c:	df 93       	push	r29
     b6e:	cf 93       	push	r28
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	80 91 6a 01 	lds	r24, 0x016A
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <sensor_get_temperature>:

double sensor_get_temperature() 
{ 
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	00 d0       	rcall	.+0      	; 0xb84 <sensor_get_temperature+0x6>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <sensor_get_temperature+0x8>
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
	if (sensor.state == SENSOR_HAS_DATA) { 
     b8a:	80 91 69 01 	lds	r24, 0x0169
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	69 f4       	brne	.+26     	; 0xbac <sensor_get_temperature+0x2e>
		return (sensor.temperature);
     b92:	80 91 6d 01 	lds	r24, 0x016D
     b96:	90 91 6e 01 	lds	r25, 0x016E
     b9a:	a0 91 6f 01 	lds	r26, 0x016F
     b9e:	b0 91 70 01 	lds	r27, 0x0170
     ba2:	89 83       	std	Y+1, r24	; 0x01
     ba4:	9a 83       	std	Y+2, r25	; 0x02
     ba6:	ab 83       	std	Y+3, r26	; 0x03
     ba8:	bc 83       	std	Y+4, r27	; 0x04
     baa:	08 c0       	rjmp	.+16     	; 0xbbc <sensor_get_temperature+0x3e>
	} else {
		return (LESS_THAN_ZERO);	// an impossible temperature value
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	a9 e8       	ldi	r26, 0x89	; 137
     bb2:	b3 ec       	ldi	r27, 0xC3	; 195
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	9a 83       	std	Y+2, r25	; 0x02
     bb8:	ab 83       	std	Y+3, r26	; 0x03
     bba:	bc 83       	std	Y+4, r27	; 0x04
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	9a 81       	ldd	r25, Y+2	; 0x02
     bc0:	ab 81       	ldd	r26, Y+3	; 0x03
     bc2:	bc 81       	ldd	r27, Y+4	; 0x04
	}
}
     bc4:	bc 01       	movw	r22, r24
     bc6:	cd 01       	movw	r24, r26
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	08 95       	ret

00000bd6 <sensor_callback>:
 *	loop. Each sampling interval must be requested explicitly by calling 
 *	sensor_start_sample(). It does not free-run.
 */

void sensor_callback()
{
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <sensor_callback+0xe>
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <sensor_callback+0x10>
     be6:	0f 92       	push	r0
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
	// cases where you don't execute the callback:
	if ((sensor.state == SENSOR_OFF) || (sensor.code != SENSOR_TAKING_READING)) {
     bec:	80 91 69 01 	lds	r24, 0x0169
     bf0:	88 23       	and	r24, r24
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <sensor_callback+0x20>
     bf4:	2b c1       	rjmp	.+598    	; 0xe4c <sensor_callback+0x276>
     bf6:	80 91 6a 01 	lds	r24, 0x016A
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	09 f0       	breq	.+2      	; 0xc00 <sensor_callback+0x2a>
     bfe:	26 c1       	rjmp	.+588    	; 0xe4c <sensor_callback+0x276>
		return;
	}

	// get a sample and return if still in the reading period
	sensor.sample[sensor.sample_idx] = _sensor_sample(ADC_CHANNEL);
     c00:	80 91 6b 01 	lds	r24, 0x016B
     c04:	08 2f       	mov	r16, r24
     c06:	10 e0       	ldi	r17, 0x00	; 0
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	0e 94 32 07 	call	0xe64	; 0xe64 <_sensor_sample>
     c0e:	9b 01       	movw	r18, r22
     c10:	ac 01       	movw	r20, r24
     c12:	c8 01       	movw	r24, r16
     c14:	07 96       	adiw	r24, 0x07	; 7
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	fc 01       	movw	r30, r24
     c20:	e7 59       	subi	r30, 0x97	; 151
     c22:	fe 4f       	sbci	r31, 0xFE	; 254
     c24:	20 83       	st	Z, r18
     c26:	31 83       	std	Z+1, r19	; 0x01
     c28:	42 83       	std	Z+2, r20	; 0x02
     c2a:	53 83       	std	Z+3, r21	; 0x03
	if ((++sensor.sample_idx) < SENSOR_SAMPLES) { return; }
     c2c:	80 91 6b 01 	lds	r24, 0x016B
     c30:	8f 5f       	subi	r24, 0xFF	; 255
     c32:	80 93 6b 01 	sts	0x016B, r24
     c36:	80 91 6b 01 	lds	r24, 0x016B
     c3a:	84 31       	cpi	r24, 0x14	; 20
     c3c:	08 f4       	brcc	.+2      	; 0xc40 <sensor_callback+0x6a>
     c3e:	06 c1       	rjmp	.+524    	; 0xe4c <sensor_callback+0x276>

	// process the array to clean up samples
	double mean;
	sensor.std_dev = std_dev(sensor.sample, SENSOR_SAMPLES, &mean);
     c40:	85 e8       	ldi	r24, 0x85	; 133
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	9e 01       	movw	r18, r28
     c46:	2e 5f       	subi	r18, 0xFE	; 254
     c48:	3f 4f       	sbci	r19, 0xFF	; 255
     c4a:	64 e1       	ldi	r22, 0x14	; 20
     c4c:	a9 01       	movw	r20, r18
     c4e:	0e 94 25 0b 	call	0x164a	; 0x164a <std_dev>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	80 93 71 01 	sts	0x0171, r24
     c5a:	90 93 72 01 	sts	0x0172, r25
     c5e:	a0 93 73 01 	sts	0x0173, r26
     c62:	b0 93 74 01 	sts	0x0174, r27
	if (sensor.std_dev > sensor.reading_variance_max) {
     c66:	80 91 71 01 	lds	r24, 0x0171
     c6a:	90 91 72 01 	lds	r25, 0x0172
     c6e:	a0 91 73 01 	lds	r26, 0x0173
     c72:	b0 91 74 01 	lds	r27, 0x0174
     c76:	20 91 79 01 	lds	r18, 0x0179
     c7a:	30 91 7a 01 	lds	r19, 0x017A
     c7e:	40 91 7b 01 	lds	r20, 0x017B
     c82:	50 91 7c 01 	lds	r21, 0x017C
     c86:	bc 01       	movw	r22, r24
     c88:	cd 01       	movw	r24, r26
     c8a:	0e 94 81 11 	call	0x2302	; 0x2302 <__gesf2>
     c8e:	18 16       	cp	r1, r24
     c90:	3c f4       	brge	.+14     	; 0xca0 <sensor_callback+0xca>
		sensor.state = SENSOR_ERROR;
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	80 93 69 01 	sts	0x0169, r24
		sensor.code = SENSOR_ERROR_BAD_READINGS;
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	80 93 6a 01 	sts	0x016A, r24
     c9e:	d6 c0       	rjmp	.+428    	; 0xe4c <sensor_callback+0x276>
		return;
	}

	// reject the outlier samples and re-compute the average
	sensor.samples = 0;
     ca0:	10 92 6c 01 	sts	0x016C, r1
	sensor.temperature = 0;
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	a0 e0       	ldi	r26, 0x00	; 0
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	80 93 6d 01 	sts	0x016D, r24
     cb0:	90 93 6e 01 	sts	0x016E, r25
     cb4:	a0 93 6f 01 	sts	0x016F, r26
     cb8:	b0 93 70 01 	sts	0x0170, r27
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     cbc:	19 82       	std	Y+1, r1	; 0x01
     cbe:	68 c0       	rjmp	.+208    	; 0xd90 <sensor_callback+0x1ba>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	88 2f       	mov	r24, r24
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	07 96       	adiw	r24, 0x07	; 7
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	fc 01       	movw	r30, r24
     cd2:	e7 59       	subi	r30, 0x97	; 151
     cd4:	fe 4f       	sbci	r31, 0xFE	; 254
     cd6:	80 81       	ld	r24, Z
     cd8:	91 81       	ldd	r25, Z+1	; 0x01
     cda:	a2 81       	ldd	r26, Z+2	; 0x02
     cdc:	b3 81       	ldd	r27, Z+3	; 0x03
     cde:	2a 81       	ldd	r18, Y+2	; 0x02
     ce0:	3b 81       	ldd	r19, Y+3	; 0x03
     ce2:	4c 81       	ldd	r20, Y+4	; 0x04
     ce4:	5d 81       	ldd	r21, Y+5	; 0x05
     ce6:	bc 01       	movw	r22, r24
     ce8:	cd 01       	movw	r24, r26
     cea:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	7c 01       	movw	r14, r24
     cf4:	8d 01       	movw	r16, r26
     cf6:	e8 94       	clt
     cf8:	17 f9       	bld	r17, 7
     cfa:	80 91 75 01 	lds	r24, 0x0175
     cfe:	90 91 76 01 	lds	r25, 0x0176
     d02:	a0 91 77 01 	lds	r26, 0x0177
     d06:	b0 91 78 01 	lds	r27, 0x0178
     d0a:	20 91 71 01 	lds	r18, 0x0171
     d0e:	30 91 72 01 	lds	r19, 0x0172
     d12:	40 91 73 01 	lds	r20, 0x0173
     d16:	50 91 74 01 	lds	r21, 0x0174
     d1a:	bc 01       	movw	r22, r24
     d1c:	cd 01       	movw	r24, r26
     d1e:	0e 94 85 11 	call	0x230a	; 0x230a <__mulsf3>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	9c 01       	movw	r18, r24
     d28:	ad 01       	movw	r20, r26
     d2a:	c8 01       	movw	r24, r16
     d2c:	b7 01       	movw	r22, r14
     d2e:	0e 94 32 10 	call	0x2064	; 0x2064 <__cmpsf2>
     d32:	88 23       	and	r24, r24
     d34:	54 f5       	brge	.+84     	; 0xd8a <sensor_callback+0x1b4>
			sensor.temperature += sensor.sample[i];
     d36:	e0 90 6d 01 	lds	r14, 0x016D
     d3a:	f0 90 6e 01 	lds	r15, 0x016E
     d3e:	00 91 6f 01 	lds	r16, 0x016F
     d42:	10 91 70 01 	lds	r17, 0x0170
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	88 2f       	mov	r24, r24
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	07 96       	adiw	r24, 0x07	; 7
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	fc 01       	movw	r30, r24
     d58:	e7 59       	subi	r30, 0x97	; 151
     d5a:	fe 4f       	sbci	r31, 0xFE	; 254
     d5c:	20 81       	ld	r18, Z
     d5e:	31 81       	ldd	r19, Z+1	; 0x01
     d60:	42 81       	ldd	r20, Z+2	; 0x02
     d62:	53 81       	ldd	r21, Z+3	; 0x03
     d64:	c8 01       	movw	r24, r16
     d66:	b7 01       	movw	r22, r14
     d68:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__addsf3>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	80 93 6d 01 	sts	0x016D, r24
     d74:	90 93 6e 01 	sts	0x016E, r25
     d78:	a0 93 6f 01 	sts	0x016F, r26
     d7c:	b0 93 70 01 	sts	0x0170, r27
			sensor.samples++;
     d80:	80 91 6c 01 	lds	r24, 0x016C
     d84:	8f 5f       	subi	r24, 0xFF	; 255
     d86:	80 93 6c 01 	sts	0x016C, r24
	}

	// reject the outlier samples and re-compute the average
	sensor.samples = 0;
	sensor.temperature = 0;
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	84 31       	cpi	r24, 0x14	; 20
     d94:	08 f4       	brcc	.+2      	; 0xd98 <sensor_callback+0x1c2>
     d96:	94 cf       	rjmp	.-216    	; 0xcc0 <sensor_callback+0xea>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
			sensor.temperature += sensor.sample[i];
			sensor.samples++;
		}
	}
	sensor.temperature /= sensor.samples;// calculate mean temp w/o the outliers
     d98:	e0 90 6d 01 	lds	r14, 0x016D
     d9c:	f0 90 6e 01 	lds	r15, 0x016E
     da0:	00 91 6f 01 	lds	r16, 0x016F
     da4:	10 91 70 01 	lds	r17, 0x0170
     da8:	80 91 6c 01 	lds	r24, 0x016C
     dac:	88 2f       	mov	r24, r24
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	aa 27       	eor	r26, r26
     db2:	97 fd       	sbrc	r25, 7
     db4:	a0 95       	com	r26
     db6:	ba 2f       	mov	r27, r26
     db8:	bc 01       	movw	r22, r24
     dba:	cd 01       	movw	r24, r26
     dbc:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__floatsisf>
     dc0:	9b 01       	movw	r18, r22
     dc2:	ac 01       	movw	r20, r24
     dc4:	c8 01       	movw	r24, r16
     dc6:	b7 01       	movw	r22, r14
     dc8:	0e 94 36 10 	call	0x206c	; 0x206c <__divsf3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	80 93 6d 01 	sts	0x016D, r24
     dd4:	90 93 6e 01 	sts	0x016E, r25
     dd8:	a0 93 6f 01 	sts	0x016F, r26
     ddc:	b0 93 70 01 	sts	0x0170, r27
	sensor.state = SENSOR_HAS_DATA;
     de0:	83 e0       	ldi	r24, 0x03	; 3
     de2:	80 93 69 01 	sts	0x0169, r24
	sensor.code = SENSOR_IDLE;			// we are done. Flip it back to idle
     de6:	10 92 6a 01 	sts	0x016A, r1

	// process the exception cases
	if (sensor.temperature > SENSOR_DISCONNECTED_TEMPERATURE) {
     dea:	80 91 6d 01 	lds	r24, 0x016D
     dee:	90 91 6e 01 	lds	r25, 0x016E
     df2:	a0 91 6f 01 	lds	r26, 0x016F
     df6:	b0 91 70 01 	lds	r27, 0x0170
     dfa:	bc 01       	movw	r22, r24
     dfc:	cd 01       	movw	r24, r26
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	48 ec       	ldi	r20, 0xC8	; 200
     e04:	53 e4       	ldi	r21, 0x43	; 67
     e06:	0e 94 81 11 	call	0x2302	; 0x2302 <__gesf2>
     e0a:	18 16       	cp	r1, r24
     e0c:	3c f4       	brge	.+14     	; 0xe1c <sensor_callback+0x246>
		sensor.state = SENSOR_ERROR;
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	80 93 69 01 	sts	0x0169, r24
		sensor.code = SENSOR_ERROR_DISCONNECTED;
     e14:	83 e0       	ldi	r24, 0x03	; 3
     e16:	80 93 6a 01 	sts	0x016A, r24
     e1a:	18 c0       	rjmp	.+48     	; 0xe4c <sensor_callback+0x276>
	} else if (sensor.temperature < SENSOR_NO_POWER_TEMPERATURE) {
     e1c:	80 91 6d 01 	lds	r24, 0x016D
     e20:	90 91 6e 01 	lds	r25, 0x016E
     e24:	a0 91 6f 01 	lds	r26, 0x016F
     e28:	b0 91 70 01 	lds	r27, 0x0170
     e2c:	bc 01       	movw	r22, r24
     e2e:	cd 01       	movw	r24, r26
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	40 e0       	ldi	r20, 0x00	; 0
     e36:	50 ec       	ldi	r21, 0xC0	; 192
     e38:	0e 94 32 10 	call	0x2064	; 0x2064 <__cmpsf2>
     e3c:	88 23       	and	r24, r24
     e3e:	34 f4       	brge	.+12     	; 0xe4c <sensor_callback+0x276>
		sensor.state = SENSOR_ERROR;
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	80 93 69 01 	sts	0x0169, r24
		sensor.code = SENSOR_ERROR_NO_POWER;
     e46:	84 e0       	ldi	r24, 0x04	; 4
     e48:	80 93 6a 01 	sts	0x016A, r24
	}
}
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	08 95       	ret

00000e64 <_sensor_sample>:
 *
 *		temp = (adc_value * 1.456355556) - -120.7135972
 */

static inline double _sensor_sample(uint8_t adc_channel)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	0f 92       	push	r0
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	89 83       	std	Y+1, r24	; 0x01
	double random_gain = 5;
	double random_variation = ((double)(rand() - RAND_MAX/2) / RAND_MAX/2) * random_gain;
	double reading = 60 + random_variation;
	return (((double)reading * SENSOR_SLOPE) + SENSOR_OFFSET);	// useful for testing the math
#else
	return (((double)adc_read() * SENSOR_SLOPE) + SENSOR_OFFSET);
     e70:	0e 94 8b 07 	call	0xf16	; 0xf16 <adc_read>
     e74:	cc 01       	movw	r24, r24
     e76:	a0 e0       	ldi	r26, 0x00	; 0
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	bc 01       	movw	r22, r24
     e7c:	cd 01       	movw	r24, r26
     e7e:	0e 94 cf 10 	call	0x219e	; 0x219e <__floatunsisf>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	26 e0       	ldi	r18, 0x06	; 6
     e8c:	3f ea       	ldi	r19, 0xAF	; 175
     e8e:	4a ef       	ldi	r20, 0xFA	; 250
     e90:	5e e3       	ldi	r21, 0x3E	; 62
     e92:	0e 94 85 11 	call	0x230a	; 0x230a <__mulsf3>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	bc 01       	movw	r22, r24
     e9c:	cd 01       	movw	r24, r26
     e9e:	23 ed       	ldi	r18, 0xD3	; 211
     ea0:	31 eb       	ldi	r19, 0xB1	; 177
     ea2:	46 ed       	ldi	r20, 0xD6	; 214
     ea4:	5e e3       	ldi	r21, 0x3E	; 62
     ea6:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
#endif
}
     eae:	bc 01       	movw	r22, r24
     eb0:	cd 01       	movw	r24, r26
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <adc_init>:
 *	There's a weird bug where somethimes the first conversion returns zero. 
 *	I need to fund out why this is happening and stop it.
 *	In the mean time there is a do-while loop in the read function.
 */
void adc_init(uint8_t channel)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	0f 92       	push	r0
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX  = (ADC_REFS | channel);	 // setup ADC Vref and channel
     ec6:	ec e7       	ldi	r30, 0x7C	; 124
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	80 64       	ori	r24, 0x40	; 64
     ece:	80 83       	st	Z, r24
	ADCSRA = (ADC_ENABLE | ADC_PRESCALE);// Enable ADC (bit 7) & set prescaler
     ed0:	ea e7       	ldi	r30, 0x7A	; 122
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	86 e8       	ldi	r24, 0x86	; 134
     ed6:	80 83       	st	Z, r24

	ADMUX &= 0xF0;						// clobber the channel
     ed8:	ac e7       	ldi	r26, 0x7C	; 124
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	ec e7       	ldi	r30, 0x7C	; 124
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 7f       	andi	r24, 0xF0	; 240
     ee4:	8c 93       	st	X, r24
	ADMUX |= 0x0F & ADC_CHANNEL;		// set the channel
     ee6:	ac e7       	ldi	r26, 0x7C	; 124
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	ec e7       	ldi	r30, 0x7C	; 124
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8c 93       	st	X, r24
	DIDR0 = (1<<channel);				// disable digital input
     ef2:	ee e7       	ldi	r30, 0x7E	; 126
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <adc_init+0x4e>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <adc_init+0x4a>
     f0c:	80 83       	st	Z, r24
}
     f0e:	0f 90       	pop	r0
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <adc_read>:

uint16_t adc_read()
{
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	0f 92       	push	r0
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
	do {
		ADCSRA |= ADC_START_CONVERSION; // start the conversion
     f20:	aa e7       	ldi	r26, 0x7A	; 122
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	ea e7       	ldi	r30, 0x7A	; 122
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	80 64       	ori	r24, 0x40	; 64
     f2c:	8c 93       	st	X, r24
		while (ADCSRA && (1<<ADIF) == 0);// wait about 100 uSec
     f2e:	ea e7       	ldi	r30, 0x7A	; 122
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
		ADCSRA |= (1<<ADIF);			// clear the conversion flag
     f34:	aa e7       	ldi	r26, 0x7A	; 122
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ea e7       	ldi	r30, 0x7A	; 122
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	80 61       	ori	r24, 0x10	; 16
     f40:	8c 93       	st	X, r24
	} while (ADC == 0);
     f42:	e8 e7       	ldi	r30, 0x78	; 120
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	91 81       	ldd	r25, Z+1	; 0x01
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	49 f3       	breq	.-46     	; 0xf20 <adc_read+0xa>
	return (ADC);
     f4e:	e8 e7       	ldi	r30, 0x78	; 120
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	91 81       	ldd	r25, Z+1	; 0x01
}
     f56:	0f 90       	pop	r0
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <pwm_init>:
 * 	Configure timer 2 for extruder heater PWM
 *	Mode: 8 bit Fast PWM Fast w/OCR2A setting PWM freq (TOP value)
 *		  and OCR2B setting the duty cycle as a fraction of OCR2A seeting
 */
void pwm_init(void)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
	TCCR2A  = PWM_INVERTED;		// alternative is PWM_NONINVERTED
     f66:	e0 eb       	ldi	r30, 0xB0	; 176
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 ef       	ldi	r24, 0xF0	; 240
     f6c:	80 83       	st	Z, r24
	TCCR2A |= 0b00000011;		// Waveform generation set to MODE 7 - here...
     f6e:	a0 eb       	ldi	r26, 0xB0	; 176
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e0 eb       	ldi	r30, 0xB0	; 176
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	83 60       	ori	r24, 0x03	; 3
     f7a:	8c 93       	st	X, r24
	TCCR2B  = 0b00001000;		// ...continued here
     f7c:	e1 eb       	ldi	r30, 0xB1	; 177
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	88 e0       	ldi	r24, 0x08	; 8
     f82:	80 83       	st	Z, r24
	TCCR2B |= PWM_PRESCALE_SET;	// set clock and prescaler
     f84:	a1 eb       	ldi	r26, 0xB1	; 177
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e1 eb       	ldi	r30, 0xB1	; 177
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	84 60       	ori	r24, 0x04	; 4
     f90:	8c 93       	st	X, r24
	TIMSK1 = 0; 				// disable PWM interrupts
     f92:	ef e6       	ldi	r30, 0x6F	; 111
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	10 82       	st	Z, r1
	OCR2A = 0;					// clear PWM frequency (TOP value)
     f98:	e3 eb       	ldi	r30, 0xB3	; 179
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	10 82       	st	Z, r1
	OCR2B = 0;					// clear PWM duty cycle as % of TOP value
     f9e:	e4 eb       	ldi	r30, 0xB4	; 180
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	10 82       	st	Z, r1
	device.pwm_freq = 0;
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	a0 e0       	ldi	r26, 0x00	; 0
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	80 93 dd 01 	sts	0x01DD, r24
     fb0:	90 93 de 01 	sts	0x01DE, r25
     fb4:	a0 93 df 01 	sts	0x01DF, r26
     fb8:	b0 93 e0 01 	sts	0x01E0, r27
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <pwm_on>:

void pwm_on(double freq, double duty)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	28 97       	sbiw	r28, 0x08	; 8
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	69 83       	std	Y+1, r22	; 0x01
     fd8:	7a 83       	std	Y+2, r23	; 0x02
     fda:	8b 83       	std	Y+3, r24	; 0x03
     fdc:	9c 83       	std	Y+4, r25	; 0x04
     fde:	2d 83       	std	Y+5, r18	; 0x05
     fe0:	3e 83       	std	Y+6, r19	; 0x06
     fe2:	4f 83       	std	Y+7, r20	; 0x07
     fe4:	58 87       	std	Y+8, r21	; 0x08
	pwm_init();
     fe6:	0e 94 af 07 	call	0xf5e	; 0xf5e <pwm_init>
	pwm_set_freq(freq);
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	9a 81       	ldd	r25, Y+2	; 0x02
     fee:	ab 81       	ldd	r26, Y+3	; 0x03
     ff0:	bc 81       	ldd	r27, Y+4	; 0x04
     ff2:	bc 01       	movw	r22, r24
     ff4:	cd 01       	movw	r24, r26
     ff6:	0e 94 1f 08 	call	0x103e	; 0x103e <pwm_set_freq>
	pwm_set_duty(duty);
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	9e 81       	ldd	r25, Y+6	; 0x06
     ffe:	af 81       	ldd	r26, Y+7	; 0x07
    1000:	b8 85       	ldd	r27, Y+8	; 0x08
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	0e 94 89 08 	call	0x1112	; 0x1112 <pwm_set_duty>
}
    100a:	28 96       	adiw	r28, 0x08	; 8
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <pwm_off>:

void pwm_off(void)
{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
	pwm_on(0,0);
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <pwm_on>
}
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <pwm_set_freq>:
 *
 *	At current settings the range is from about 500 Hz to about 6000 Hz  
 */

uint8_t pwm_set_freq(double freq)
{
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	00 d0       	rcall	.+0      	; 0x1048 <pwm_set_freq+0xa>
    1048:	00 d0       	rcall	.+0      	; 0x104a <pwm_set_freq+0xc>
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	69 83       	std	Y+1, r22	; 0x01
    1050:	7a 83       	std	Y+2, r23	; 0x02
    1052:	8b 83       	std	Y+3, r24	; 0x03
    1054:	9c 83       	std	Y+4, r25	; 0x04
	device.pwm_freq = F_CPU / PWM_PRESCALE / freq;
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	74 e2       	ldi	r23, 0x24	; 36
    105a:	84 ef       	ldi	r24, 0xF4	; 244
    105c:	97 e4       	ldi	r25, 0x47	; 71
    105e:	29 81       	ldd	r18, Y+1	; 0x01
    1060:	3a 81       	ldd	r19, Y+2	; 0x02
    1062:	4b 81       	ldd	r20, Y+3	; 0x03
    1064:	5c 81       	ldd	r21, Y+4	; 0x04
    1066:	0e 94 36 10 	call	0x206c	; 0x206c <__divsf3>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	80 93 dd 01 	sts	0x01DD, r24
    1072:	90 93 de 01 	sts	0x01DE, r25
    1076:	a0 93 df 01 	sts	0x01DF, r26
    107a:	b0 93 e0 01 	sts	0x01E0, r27
	if (device.pwm_freq < PWM_MIN_RES) { 
    107e:	80 91 dd 01 	lds	r24, 0x01DD
    1082:	90 91 de 01 	lds	r25, 0x01DE
    1086:	a0 91 df 01 	lds	r26, 0x01DF
    108a:	b0 91 e0 01 	lds	r27, 0x01E0
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 ea       	ldi	r20, 0xA0	; 160
    1098:	51 e4       	ldi	r21, 0x41	; 65
    109a:	0e 94 32 10 	call	0x2064	; 0x2064 <__cmpsf2>
    109e:	88 23       	and	r24, r24
    10a0:	2c f4       	brge	.+10     	; 0x10ac <pwm_set_freq+0x6e>
		OCR2A = PWM_MIN_RES;
    10a2:	e3 eb       	ldi	r30, 0xB3	; 179
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	84 e1       	ldi	r24, 0x14	; 20
    10a8:	80 83       	st	Z, r24
    10aa:	29 c0       	rjmp	.+82     	; 0x10fe <pwm_set_freq+0xc0>
	} else if (device.pwm_freq >= PWM_MAX_RES) { 
    10ac:	80 91 dd 01 	lds	r24, 0x01DD
    10b0:	90 91 de 01 	lds	r25, 0x01DE
    10b4:	a0 91 df 01 	lds	r26, 0x01DF
    10b8:	b0 91 e0 01 	lds	r27, 0x01E0
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	4f e7       	ldi	r20, 0x7F	; 127
    10c6:	53 e4       	ldi	r21, 0x43	; 67
    10c8:	0e 94 81 11 	call	0x2302	; 0x2302 <__gesf2>
    10cc:	88 23       	and	r24, r24
    10ce:	2c f0       	brlt	.+10     	; 0x10da <pwm_set_freq+0x9c>
		OCR2A = PWM_MAX_RES;
    10d0:	e3 eb       	ldi	r30, 0xB3	; 179
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	8f ef       	ldi	r24, 0xFF	; 255
    10d6:	80 83       	st	Z, r24
    10d8:	12 c0       	rjmp	.+36     	; 0x10fe <pwm_set_freq+0xc0>
	} else { 
		OCR2A = (uint8_t)device.pwm_freq;
    10da:	03 eb       	ldi	r16, 0xB3	; 179
    10dc:	10 e0       	ldi	r17, 0x00	; 0
    10de:	80 91 dd 01 	lds	r24, 0x01DD
    10e2:	90 91 de 01 	lds	r25, 0x01DE
    10e6:	a0 91 df 01 	lds	r26, 0x01DF
    10ea:	b0 91 e0 01 	lds	r27, 0x01E0
    10ee:	bc 01       	movw	r22, r24
    10f0:	cd 01       	movw	r24, r26
    10f2:	0e 94 a3 10 	call	0x2146	; 0x2146 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	f8 01       	movw	r30, r16
    10fc:	80 83       	st	Z, r24
	}
	return (SC_OK);
    10fe:	80 e0       	ldi	r24, 0x00	; 0
}
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	08 95       	ret

00001112 <pwm_set_duty>:
 *	Since I can't seem to get the output pin to work in non-inverted mode
 *	it's done in software in this routine.
 */

uint8_t pwm_set_duty(double duty)
{
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <pwm_set_duty+0x12>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <pwm_set_duty+0x14>
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	69 83       	std	Y+1, r22	; 0x01
    112c:	7a 83       	std	Y+2, r23	; 0x02
    112e:	8b 83       	std	Y+3, r24	; 0x03
    1130:	9c 83       	std	Y+4, r25	; 0x04
	if (duty < 0.01) {				// anything approaching 0% 
    1132:	69 81       	ldd	r22, Y+1	; 0x01
    1134:	7a 81       	ldd	r23, Y+2	; 0x02
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	2a e0       	ldi	r18, 0x0A	; 10
    113c:	37 ed       	ldi	r19, 0xD7	; 215
    113e:	43 e2       	ldi	r20, 0x23	; 35
    1140:	5c e3       	ldi	r21, 0x3C	; 60
    1142:	0e 94 32 10 	call	0x2064	; 0x2064 <__cmpsf2>
    1146:	88 23       	and	r24, r24
    1148:	2c f4       	brge	.+10     	; 0x1154 <pwm_set_duty+0x42>
		OCR2B = 255;
    114a:	e4 eb       	ldi	r30, 0xB4	; 180
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	80 83       	st	Z, r24
    1152:	4a c0       	rjmp	.+148    	; 0x11e8 <pwm_set_duty+0xd6>
	} else if (duty > 99.9) { 		// anything approaching 100%
    1154:	69 81       	ldd	r22, Y+1	; 0x01
    1156:	7a 81       	ldd	r23, Y+2	; 0x02
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	2d ec       	ldi	r18, 0xCD	; 205
    115e:	3c ec       	ldi	r19, 0xCC	; 204
    1160:	47 ec       	ldi	r20, 0xC7	; 199
    1162:	52 e4       	ldi	r21, 0x42	; 66
    1164:	0e 94 81 11 	call	0x2302	; 0x2302 <__gesf2>
    1168:	18 16       	cp	r1, r24
    116a:	24 f4       	brge	.+8      	; 0x1174 <pwm_set_duty+0x62>
		OCR2B = 0;
    116c:	e4 eb       	ldi	r30, 0xB4	; 180
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	10 82       	st	Z, r1
    1172:	3a c0       	rjmp	.+116    	; 0x11e8 <pwm_set_duty+0xd6>
	} else {
		OCR2B = (uint8_t)(OCR2A * (1-(duty/100)));
    1174:	0f 2e       	mov	r0, r31
    1176:	f4 eb       	ldi	r31, 0xB4	; 180
    1178:	cf 2e       	mov	r12, r31
    117a:	dd 24       	eor	r13, r13
    117c:	f0 2d       	mov	r31, r0
    117e:	e3 eb       	ldi	r30, 0xB3	; 179
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	aa 27       	eor	r26, r26
    118a:	97 fd       	sbrc	r25, 7
    118c:	a0 95       	com	r26
    118e:	ba 2f       	mov	r27, r26
    1190:	bc 01       	movw	r22, r24
    1192:	cd 01       	movw	r24, r26
    1194:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__floatsisf>
    1198:	7b 01       	movw	r14, r22
    119a:	8c 01       	movw	r16, r24
    119c:	69 81       	ldd	r22, Y+1	; 0x01
    119e:	7a 81       	ldd	r23, Y+2	; 0x02
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	48 ec       	ldi	r20, 0xC8	; 200
    11aa:	52 ec       	ldi	r21, 0xC2	; 194
    11ac:	0e 94 36 10 	call	0x206c	; 0x206c <__divsf3>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	bc 01       	movw	r22, r24
    11b6:	cd 01       	movw	r24, r26
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 e8       	ldi	r20, 0x80	; 128
    11be:	5f e3       	ldi	r21, 0x3F	; 63
    11c0:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__addsf3>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	9c 01       	movw	r18, r24
    11ca:	ad 01       	movw	r20, r26
    11cc:	c8 01       	movw	r24, r16
    11ce:	b7 01       	movw	r22, r14
    11d0:	0e 94 85 11 	call	0x230a	; 0x230a <__mulsf3>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	bc 01       	movw	r22, r24
    11da:	cd 01       	movw	r24, r26
    11dc:	0e 94 a3 10 	call	0x2146	; 0x2146 <__fixunssfsi>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	f6 01       	movw	r30, r12
    11e6:	80 83       	st	Z, r24
	}
	OCR2A = (uint8_t)device.pwm_freq;
    11e8:	03 eb       	ldi	r16, 0xB3	; 179
    11ea:	10 e0       	ldi	r17, 0x00	; 0
    11ec:	80 91 dd 01 	lds	r24, 0x01DD
    11f0:	90 91 de 01 	lds	r25, 0x01DE
    11f4:	a0 91 df 01 	lds	r26, 0x01DF
    11f8:	b0 91 e0 01 	lds	r27, 0x01E0
    11fc:	bc 01       	movw	r22, r24
    11fe:	cd 01       	movw	r24, r26
    1200:	0e 94 a3 10 	call	0x2146	; 0x2146 <__fixunssfsi>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	f8 01       	movw	r30, r16
    120a:	80 83       	st	Z, r24
	return (SC_OK);
    120c:	80 e0       	ldi	r24, 0x00	; 0
}
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	1f 91       	pop	r17
    121c:	0f 91       	pop	r16
    121e:	ff 90       	pop	r15
    1220:	ef 90       	pop	r14
    1222:	df 90       	pop	r13
    1224:	cf 90       	pop	r12
    1226:	08 95       	ret

00001228 <tick_init>:
 * tick_100ms()	  - tasks that run every 100 ms
 * tick_1sec()	  - tasks that run every 100 ms
 */

void tick_init(void)
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = TICK_MODE;				// mode_settings
    1230:	e4 e4       	ldi	r30, 0x44	; 68
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	80 83       	st	Z, r24
	TCCR0B = TICK_PRESCALER;		// 1024 ~= 7800 Hz
    1238:	e5 e4       	ldi	r30, 0x45	; 69
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	83 e0       	ldi	r24, 0x03	; 3
    123e:	80 83       	st	Z, r24
	OCR0A = TICK_COUNT;
    1240:	e7 e4       	ldi	r30, 0x47	; 71
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	8d e7       	ldi	r24, 0x7D	; 125
    1246:	80 83       	st	Z, r24
	TIMSK0 = (1<<OCIE0A);			// enable compare interrupts
    1248:	ee e6       	ldi	r30, 0x6E	; 110
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	80 83       	st	Z, r24
	device.tick_10ms_count = 10;
    1250:	8a e0       	ldi	r24, 0x0A	; 10
    1252:	80 93 da 01 	sts	0x01DA, r24
	device.tick_100ms_count = 10;
    1256:	8a e0       	ldi	r24, 0x0A	; 10
    1258:	80 93 db 01 	sts	0x01DB, r24
	device.tick_1sec_count = 10;	
    125c:	8a e0       	ldi	r24, 0x0A	; 10
    125e:	80 93 dc 01 	sts	0x01DC, r24
}
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
    1268:	1f 92       	push	r1
    126a:	0f 92       	push	r0
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	0f 92       	push	r0
    1270:	11 24       	eor	r1, r1
    1272:	8f 93       	push	r24
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
	device.tick_flag = true;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 93 d9 01 	sts	0x01D9, r24
}
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	8f 91       	pop	r24
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0
    128e:	1f 90       	pop	r1
    1290:	18 95       	reti

00001292 <tick_callback>:

uint8_t tick_callback(void)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	0f 92       	push	r0
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	if (device.tick_flag == false) { return (SC_NOOP);}
    129c:	80 91 d9 01 	lds	r24, 0x01D9
    12a0:	88 23       	and	r24, r24
    12a2:	19 f4       	brne	.+6      	; 0x12aa <tick_callback+0x18>
    12a4:	83 e0       	ldi	r24, 0x03	; 3
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	35 c0       	rjmp	.+106    	; 0x1314 <tick_callback+0x82>

	device.tick_flag = false;
    12aa:	10 92 d9 01 	sts	0x01D9, r1
	tick_1ms();
    12ae:	0e 94 8f 09 	call	0x131e	; 0x131e <tick_1ms>

	if (--device.tick_10ms_count != 0) { return (SC_OK);}
    12b2:	80 91 da 01 	lds	r24, 0x01DA
    12b6:	81 50       	subi	r24, 0x01	; 1
    12b8:	80 93 da 01 	sts	0x01DA, r24
    12bc:	80 91 da 01 	lds	r24, 0x01DA
    12c0:	88 23       	and	r24, r24
    12c2:	11 f0       	breq	.+4      	; 0x12c8 <tick_callback+0x36>
    12c4:	19 82       	std	Y+1, r1	; 0x01
    12c6:	26 c0       	rjmp	.+76     	; 0x1314 <tick_callback+0x82>
	device.tick_10ms_count = 10;
    12c8:	8a e0       	ldi	r24, 0x0A	; 10
    12ca:	80 93 da 01 	sts	0x01DA, r24
	tick_10ms();
    12ce:	0e 94 98 09 	call	0x1330	; 0x1330 <tick_10ms>

	if (--device.tick_100ms_count != 0) { return (SC_OK);}
    12d2:	80 91 db 01 	lds	r24, 0x01DB
    12d6:	81 50       	subi	r24, 0x01	; 1
    12d8:	80 93 db 01 	sts	0x01DB, r24
    12dc:	80 91 db 01 	lds	r24, 0x01DB
    12e0:	88 23       	and	r24, r24
    12e2:	11 f0       	breq	.+4      	; 0x12e8 <tick_callback+0x56>
    12e4:	19 82       	std	Y+1, r1	; 0x01
    12e6:	16 c0       	rjmp	.+44     	; 0x1314 <tick_callback+0x82>
	device.tick_100ms_count = 10;
    12e8:	8a e0       	ldi	r24, 0x0A	; 10
    12ea:	80 93 db 01 	sts	0x01DB, r24
	tick_100ms();
    12ee:	0e 94 9f 09 	call	0x133e	; 0x133e <tick_100ms>

	if (--device.tick_1sec_count != 0) { return (SC_OK);}
    12f2:	80 91 dc 01 	lds	r24, 0x01DC
    12f6:	81 50       	subi	r24, 0x01	; 1
    12f8:	80 93 dc 01 	sts	0x01DC, r24
    12fc:	80 91 dc 01 	lds	r24, 0x01DC
    1300:	88 23       	and	r24, r24
    1302:	11 f0       	breq	.+4      	; 0x1308 <tick_callback+0x76>
    1304:	19 82       	std	Y+1, r1	; 0x01
    1306:	06 c0       	rjmp	.+12     	; 0x1314 <tick_callback+0x82>
	device.tick_1sec_count = 10;
    1308:	8a e0       	ldi	r24, 0x0A	; 10
    130a:	80 93 dc 01 	sts	0x01DC, r24
	tick_1sec();
    130e:	0e 94 a8 09 	call	0x1350	; 0x1350 <tick_1sec>

	return (SC_OK);
    1312:	19 82       	std	Y+1, r1	; 0x01
    1314:	89 81       	ldd	r24, Y+1	; 0x01
}
    1316:	0f 90       	pop	r0
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <tick_1ms>:

void tick_1ms(void)				// 1ms callout
{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
	sensor_callback();
    1326:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <sensor_callback>
}
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <tick_10ms>:

void tick_10ms(void)			// 10 ms callout
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
}
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <tick_100ms>:

void tick_100ms(void)			// 100ms callout
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
	heater_callback();
    1346:	0e 94 ce 01 	call	0x39c	; 0x39c <heater_callback>
}
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <tick_1sec>:

void tick_1sec(void)			// 1 second callout
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
//	led_toggle();
}
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <led_on>:
 * led_off()
 * led_toggle()
 */

void led_on(void) 
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
	LED_PORT &= ~(LED_PIN);
    1366:	ab e2       	ldi	r26, 0x2B	; 43
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	eb e2       	ldi	r30, 0x2B	; 43
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8b 7f       	andi	r24, 0xFB	; 251
    1372:	8c 93       	st	X, r24
}
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <led_off>:

void led_off(void) 
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
	LED_PORT |= LED_PIN;
    1382:	ab e2       	ldi	r26, 0x2B	; 43
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	eb e2       	ldi	r30, 0x2B	; 43
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	84 60       	ori	r24, 0x04	; 4
    138e:	8c 93       	st	X, r24
}
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <led_toggle>:

void led_toggle(void) 
{
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
	if (LED_PORT && LED_PIN) {
    139e:	eb e2       	ldi	r30, 0x2B	; 43
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	88 23       	and	r24, r24
    13a6:	19 f0       	breq	.+6      	; 0x13ae <led_toggle+0x18>
		led_on();
    13a8:	0e 94 af 09 	call	0x135e	; 0x135e <led_on>
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <led_toggle+0x1c>
	} else {
		led_off();
    13ae:	0e 94 bd 09 	call	0x137a	; 0x137a <led_off>
	}
}
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <device_reset>:
 *	device_read_byte() 	- read a byte from Kinen channel into device structs
 *	device_write_byte() - write a byte from device to Kinen channel
 */

void device_reset(void)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
	return;
}
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <device_read_byte>:

uint8_t device_read_byte(uint8_t addr, uint8_t *data)
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <device_read_byte+0x6>
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <device_read_byte+0x8>
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	7b 83       	std	Y+3, r23	; 0x03
    13d6:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	80 51       	subi	r24, 0x10	; 16
    13dc:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	8a 30       	cpi	r24, 0x0A	; 10
    13e2:	18 f0       	brcs	.+6      	; 0x13ea <device_read_byte+0x24>
    13e4:	88 e1       	ldi	r24, 0x18	; 24
    13e6:	8c 83       	std	Y+4, r24	; 0x04
    13e8:	0b c0       	rjmp	.+22     	; 0x1400 <device_read_byte+0x3a>
	*data = device.array[addr];
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	88 2f       	mov	r24, r24
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	fc 01       	movw	r30, r24
    13f2:	ef 51       	subi	r30, 0x1F	; 31
    13f4:	fe 4f       	sbci	r31, 0xFE	; 254
    13f6:	80 81       	ld	r24, Z
    13f8:	ea 81       	ldd	r30, Y+2	; 0x02
    13fa:	fb 81       	ldd	r31, Y+3	; 0x03
    13fc:	80 83       	st	Z, r24
	return (SC_OK);
    13fe:	1c 82       	std	Y+4, r1	; 0x04
    1400:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <device_write_byte>:

uint8_t device_write_byte(uint8_t addr, uint8_t data)
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	00 d0       	rcall	.+0      	; 0x1416 <device_write_byte+0x6>
    1416:	0f 92       	push	r0
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	80 51       	subi	r24, 0x10	; 16
    1424:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	8a 30       	cpi	r24, 0x0A	; 10
    142a:	18 f0       	brcs	.+6      	; 0x1432 <device_write_byte+0x22>
    142c:	88 e1       	ldi	r24, 0x18	; 24
    142e:	8b 83       	std	Y+3, r24	; 0x03
    1430:	09 c0       	rjmp	.+18     	; 0x1444 <device_write_byte+0x34>
	// There are no checks in here for read-only locations
	// Assumes all locations are writable.
	device.array[addr] = data;
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	fc 01       	movw	r30, r24
    143a:	ef 51       	subi	r30, 0x1F	; 31
    143c:	fe 4f       	sbci	r31, 0xFE	; 254
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	80 83       	st	Z, r24
	return (SC_OK);
    1442:	1b 82       	std	Y+3, r1	; 0x03
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <kinen_init>:
 * kinen_init() - set up Kinen subsystems; master or slave
 *
 *	Would like some kind of auto-detect here. For now it's just commenting
 */
void kinen_init(void)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
//	kinen_master_init();
	kinen_slave_init();
    145a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <kinen_slave_init>
}
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <kinen_callback>:
 *	Returns SC_NOOP if no operation was performed
 *	Returns EAGAIN if the function should block lower-priority functions
 *	in the main DISPATCH loop
 */
uint8_t kinen_callback(void)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
//	return (SC_OK);			// return from a successful operation
//	return (SC_EAGAIN);		// return if lower priority tasks should be blocked
	return (SC_NOOP);		// return if no operation was performed 
    146c:	83 e0       	ldi	r24, 0x03	; 3
}
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <kinen_slave_init>:

/*
 * kinen_slave_init() - setup atmega SPI peripheral to be the OCB slave 
 */
void kinen_slave_init(void)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62

//	PRR |= 0x07;				// don't screw with the power reduction register
	DDRB &= ~(1<<DDB4);			// Set MISO output, all others unaffected
    147c:	a4 e2       	ldi	r26, 0x24	; 36
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e4 e2       	ldi	r30, 0x24	; 36
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	8f 7e       	andi	r24, 0xEF	; 239
    1488:	8c 93       	st	X, r24
	SPCR = (1<<SPIE | 1<<SPE);	// Enable SPI and its interrupt, set MSB first, slave mode
    148a:	ec e4       	ldi	r30, 0x4C	; 76
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 ec       	ldi	r24, 0xC0	; 192
    1490:	80 83       	st	Z, r24
	SPCR = (1<<CPOL | 1<<CPHA);	// Uncomment for mode 3 operation, comment for mode 0
    1492:	ec e4       	ldi	r30, 0x4C	; 76
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	8c e0       	ldi	r24, 0x0C	; 12
    1498:	80 83       	st	Z, r24
	memset(&ki.array, 0, sizeof(ki.array));
    149a:	89 e5       	ldi	r24, 0x59	; 89
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	40 e1       	ldi	r20, 0x10	; 16
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	0e 94 64 12 	call	0x24c8	; 0x24c8 <memset>

	ki_wait_time = DEVICE_WAIT_TIME;	// setup read-only values
    14aa:	8a e0       	ldi	r24, 0x0A	; 10
    14ac:	80 93 5c 01 	sts	0x015C, r24
	ki_device_type = DEVICE_TYPE;
    14b0:	84 e0       	ldi	r24, 0x04	; 4
    14b2:	80 93 61 01 	sts	0x0161, r24
	ki_device_id_hi = DEVICE_ID_HI;
    14b6:	10 92 62 01 	sts	0x0162, r1
	ki_device_id_lo = DEVICE_ID_LO;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	80 93 63 01 	sts	0x0163, r24
	ki_device_rev_major = DEVICE_REV_MAJOR;
    14c0:	10 92 64 01 	sts	0x0164, r1
	ki_device_rev_minor = DEVICE_REV_MINOR;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	80 93 65 01 	sts	0x0165, r24
	ki_device_uuid_1 = DEVICE_UUID_1;
    14ca:	10 92 66 01 	sts	0x0166, r1
	ki_device_uuid_2 = DEVICE_UUID_2;
    14ce:	10 92 67 01 	sts	0x0167, r1
	ki_device_uuid_3 = DEVICE_UUID_3;
    14d2:	10 92 68 01 	sts	0x0168, r1

	ki_status = SC_OK;
    14d6:	10 92 5a 01 	sts	0x015A, r1
	SPDR = ki_status;
    14da:	ee e4       	ldi	r30, 0x4E	; 78
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 91 5a 01 	lds	r24, 0x015A
    14e2:	80 83       	st	Z, r24
}
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <__vector_17>:
 * SPI Slave RX Interrupt() - interrupts on byte received
 *
 * Uses a 2 phase state machine to toggle back and forth between ADDR and DATA bytes
 */
ISR(SPI_STC_vect)
{
    14ea:	1f 92       	push	r1
    14ec:	0f 92       	push	r0
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	0f 92       	push	r0
    14f2:	11 24       	eor	r1, r1
    14f4:	2f 93       	push	r18
    14f6:	3f 93       	push	r19
    14f8:	4f 93       	push	r20
    14fa:	5f 93       	push	r21
    14fc:	6f 93       	push	r22
    14fe:	7f 93       	push	r23
    1500:	8f 93       	push	r24
    1502:	9f 93       	push	r25
    1504:	af 93       	push	r26
    1506:	bf 93       	push	r27
    1508:	ef 93       	push	r30
    150a:	ff 93       	push	r31
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
	// receive address byte
	if (ki_slave.phase == KINEN_ADDR) {
    1514:	80 91 00 01 	lds	r24, 0x0100
    1518:	88 23       	and	r24, r24
    151a:	c9 f5       	brne	.+114    	; 0x158e <__vector_17+0xa4>
		ki_slave.phase = KINEN_DATA;	// advance phase
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	80 93 00 01 	sts	0x0100, r24
		ki_slave.addr = SPDR;		// read and save the address byte
    1522:	ee e4       	ldi	r30, 0x4E	; 78
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	80 93 01 01 	sts	0x0101, r24
		if (ki_command == KINEN_WRITE) { // write is simple...
    152c:	80 91 59 01 	lds	r24, 0x0159
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	29 f4       	brne	.+10     	; 0x153e <__vector_17+0x54>
			SPDR = KINEN_OK_BYTE;			// already saved addr, now return an OK
    1534:	ee e4       	ldi	r30, 0x4E	; 78
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	8a e5       	ldi	r24, 0x5A	; 90
    153a:	80 83       	st	Z, r24
    153c:	4a c0       	rjmp	.+148    	; 0x15d2 <__vector_17+0xe8>
		} else {
			if (ki_slave.addr < KINEN_COMMON_MAX) {	// handle OCB address space
    153e:	80 91 01 01 	lds	r24, 0x0101
    1542:	80 31       	cpi	r24, 0x10	; 16
    1544:	60 f4       	brcc	.+24     	; 0x155e <__vector_17+0x74>
				SPDR = ki.array[ki_slave.addr];
    1546:	ae e4       	ldi	r26, 0x4E	; 78
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	80 91 01 01 	lds	r24, 0x0101
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	fc 01       	movw	r30, r24
    1554:	e7 5a       	subi	r30, 0xA7	; 167
    1556:	fe 4f       	sbci	r31, 0xFE	; 254
    1558:	80 81       	ld	r24, Z
    155a:	8c 93       	st	X, r24
    155c:	3a c0       	rjmp	.+116    	; 0x15d2 <__vector_17+0xe8>
			} else {								// handle device address space
				if ((ki_status = device_read_byte(ki_slave.addr, &ki_slave.data)) == SC_OK) {
    155e:	80 91 01 01 	lds	r24, 0x0101
    1562:	22 e0       	ldi	r18, 0x02	; 2
    1564:	31 e0       	ldi	r19, 0x01	; 1
    1566:	b9 01       	movw	r22, r18
    1568:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <device_read_byte>
    156c:	80 93 5a 01 	sts	0x015A, r24
    1570:	80 91 5a 01 	lds	r24, 0x015A
    1574:	88 23       	and	r24, r24
    1576:	31 f4       	brne	.+12     	; 0x1584 <__vector_17+0x9a>
					SPDR = ki_slave.data;
    1578:	ee e4       	ldi	r30, 0x4E	; 78
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 91 02 01 	lds	r24, 0x0102
    1580:	80 83       	st	Z, r24
    1582:	27 c0       	rjmp	.+78     	; 0x15d2 <__vector_17+0xe8>
				} else {
					SPDR = KINEN_ERR_BYTE;
    1584:	ee e4       	ldi	r30, 0x4E	; 78
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	85 ea       	ldi	r24, 0xA5	; 165
    158a:	80 83       	st	Z, r24
    158c:	22 c0       	rjmp	.+68     	; 0x15d2 <__vector_17+0xe8>
			}
		}

	// receive data byte
	} else {
		ki_slave.phase = KINEN_ADDR;	// advance phase
    158e:	10 92 00 01 	sts	0x0100, r1
		ki_slave.data = SPDR;		// read and save the data byte
    1592:	ee e4       	ldi	r30, 0x4E	; 78
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	80 93 02 01 	sts	0x0102, r24
		if (ki_command == KINEN_WRITE) {
    159c:	80 91 59 01 	lds	r24, 0x0159
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	b9 f4       	brne	.+46     	; 0x15d2 <__vector_17+0xe8>
			if (ki_slave.addr < KINEN_COMMON_MAX) {
    15a4:	80 91 01 01 	lds	r24, 0x0101
    15a8:	80 31       	cpi	r24, 0x10	; 16
    15aa:	50 f4       	brcc	.+20     	; 0x15c0 <__vector_17+0xd6>
				ki_status = _slave_write_byte(ki_slave.addr, ki_slave.data);
    15ac:	80 91 01 01 	lds	r24, 0x0101
    15b0:	90 91 02 01 	lds	r25, 0x0102
    15b4:	69 2f       	mov	r22, r25
    15b6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_slave_write_byte>
    15ba:	80 93 5a 01 	sts	0x015A, r24
    15be:	09 c0       	rjmp	.+18     	; 0x15d2 <__vector_17+0xe8>
			} else {
				ki_status = device_write_byte(ki_slave.addr, ki_slave.data);
    15c0:	80 91 01 01 	lds	r24, 0x0101
    15c4:	90 91 02 01 	lds	r25, 0x0102
    15c8:	69 2f       	mov	r22, r25
    15ca:	0e 94 08 0a 	call	0x1410	; 0x1410 <device_write_byte>
    15ce:	80 93 5a 01 	sts	0x015A, r24
			}
		}
	}
}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	ff 91       	pop	r31
    15d8:	ef 91       	pop	r30
    15da:	bf 91       	pop	r27
    15dc:	af 91       	pop	r26
    15de:	9f 91       	pop	r25
    15e0:	8f 91       	pop	r24
    15e2:	7f 91       	pop	r23
    15e4:	6f 91       	pop	r22
    15e6:	5f 91       	pop	r21
    15e8:	4f 91       	pop	r20
    15ea:	3f 91       	pop	r19
    15ec:	2f 91       	pop	r18
    15ee:	0f 90       	pop	r0
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	0f 90       	pop	r0
    15f4:	1f 90       	pop	r1
    15f6:	18 95       	reti

000015f8 <_slave_write_byte>:

/* 
 * _slave_write_byte() - helper to write byte to a non-device address
 */
static uint8_t _slave_write_byte(const uint8_t addr, const uint8_t data)
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <_slave_write_byte+0x6>
    15fe:	0f 92       	push	r0
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	6a 83       	std	Y+2, r22	; 0x02
	if (addr == KINEN_COMMAND) {
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	88 23       	and	r24, r24
    160c:	21 f4       	brne	.+8      	; 0x1616 <_slave_write_byte+0x1e>
		ki_command = data; 
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	80 93 59 01 	sts	0x0159, r24
    1614:	12 c0       	rjmp	.+36     	; 0x163a <_slave_write_byte+0x42>

	} else if (addr == KINEN_ADDR_PAGE) { 
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	84 30       	cpi	r24, 0x04	; 4
    161a:	21 f4       	brne	.+8      	; 0x1624 <_slave_write_byte+0x2c>
		ki_addr_page = data; 
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	80 93 5d 01 	sts	0x015D, r24
    1622:	0b c0       	rjmp	.+22     	; 0x163a <_slave_write_byte+0x42>

	} else if (addr == KINEN_RESET) {
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	85 30       	cpi	r24, 0x05	; 5
    1628:	29 f4       	brne	.+10     	; 0x1634 <_slave_write_byte+0x3c>
		kinen_slave_init();
    162a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <kinen_slave_init>
		device_reset();
    162e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <device_reset>
    1632:	03 c0       	rjmp	.+6      	; 0x163a <_slave_write_byte+0x42>

	} else {
		return (SC_READ_ONLY_ADDRESS);
    1634:	89 e1       	ldi	r24, 0x19	; 25
    1636:	8b 83       	std	Y+3, r24	; 0x03
    1638:	01 c0       	rjmp	.+2      	; 0x163c <_slave_write_byte+0x44>
	}
	return (SC_OK);
    163a:	1b 82       	std	Y+3, r1	; 0x03
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <std_dev>:
 *
 *	"A lot of people talk about standard deviation but what is a standard deviant?"
 */

double std_dev(double a[], uint8_t n, double *mean) 
{
    164a:	ef 92       	push	r14
    164c:	ff 92       	push	r15
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	66 97       	sbiw	r28, 0x16	; 22
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	9f 87       	std	Y+15, r25	; 0x0f
    1668:	8e 87       	std	Y+14, r24	; 0x0e
    166a:	68 8b       	std	Y+16, r22	; 0x10
    166c:	5a 8b       	std	Y+18, r21	; 0x12
    166e:	49 8b       	std	Y+17, r20	; 0x11
	if(n == 0) { return (0);}
    1670:	88 89       	ldd	r24, Y+16	; 0x10
    1672:	88 23       	and	r24, r24
    1674:	49 f4       	brne	.+18     	; 0x1688 <std_dev+0x3e>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a0 e0       	ldi	r26, 0x00	; 0
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	8b 8b       	std	Y+19, r24	; 0x13
    1680:	9c 8b       	std	Y+20, r25	; 0x14
    1682:	ad 8b       	std	Y+21, r26	; 0x15
    1684:	be 8b       	std	Y+22, r27	; 0x16
    1686:	ae c0       	rjmp	.+348    	; 0x17e4 <std_dev+0x19a>
	double sum = 0;
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	a0 e0       	ldi	r26, 0x00	; 0
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	8a 87       	std	Y+10, r24	; 0x0a
    1692:	9b 87       	std	Y+11, r25	; 0x0b
    1694:	ac 87       	std	Y+12, r26	; 0x0c
    1696:	bd 87       	std	Y+13, r27	; 0x0d
	double sq_sum = 0;
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	a0 e0       	ldi	r26, 0x00	; 0
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	8e 83       	std	Y+6, r24	; 0x06
    16a2:	9f 83       	std	Y+7, r25	; 0x07
    16a4:	a8 87       	std	Y+8, r26	; 0x08
    16a6:	b9 87       	std	Y+9, r27	; 0x09
	for(uint8_t i=0; i<n; ++i) {
    16a8:	19 82       	std	Y+1, r1	; 0x01
    16aa:	43 c0       	rjmp	.+134    	; 0x1732 <std_dev+0xe8>
		sum += a[i];
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9c 01       	movw	r18, r24
    16b4:	22 0f       	add	r18, r18
    16b6:	33 1f       	adc	r19, r19
    16b8:	22 0f       	add	r18, r18
    16ba:	33 1f       	adc	r19, r19
    16bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    16be:	9f 85       	ldd	r25, Y+15	; 0x0f
    16c0:	fc 01       	movw	r30, r24
    16c2:	e2 0f       	add	r30, r18
    16c4:	f3 1f       	adc	r31, r19
    16c6:	20 81       	ld	r18, Z
    16c8:	31 81       	ldd	r19, Z+1	; 0x01
    16ca:	42 81       	ldd	r20, Z+2	; 0x02
    16cc:	53 81       	ldd	r21, Z+3	; 0x03
    16ce:	6a 85       	ldd	r22, Y+10	; 0x0a
    16d0:	7b 85       	ldd	r23, Y+11	; 0x0b
    16d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    16d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    16d6:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__addsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	8a 87       	std	Y+10, r24	; 0x0a
    16e0:	9b 87       	std	Y+11, r25	; 0x0b
    16e2:	ac 87       	std	Y+12, r26	; 0x0c
    16e4:	bd 87       	std	Y+13, r27	; 0x0d
		sq_sum += square(a[i]);
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	9c 01       	movw	r18, r24
    16ee:	22 0f       	add	r18, r18
    16f0:	33 1f       	adc	r19, r19
    16f2:	22 0f       	add	r18, r18
    16f4:	33 1f       	adc	r19, r19
    16f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    16f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    16fa:	fc 01       	movw	r30, r24
    16fc:	e2 0f       	add	r30, r18
    16fe:	f3 1f       	adc	r31, r19
    1700:	80 81       	ld	r24, Z
    1702:	91 81       	ldd	r25, Z+1	; 0x01
    1704:	a2 81       	ldd	r26, Z+2	; 0x02
    1706:	b3 81       	ldd	r27, Z+3	; 0x03
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	0e 94 2a 12 	call	0x2454	; 0x2454 <square>
    1710:	9b 01       	movw	r18, r22
    1712:	ac 01       	movw	r20, r24
    1714:	6e 81       	ldd	r22, Y+6	; 0x06
    1716:	7f 81       	ldd	r23, Y+7	; 0x07
    1718:	88 85       	ldd	r24, Y+8	; 0x08
    171a:	99 85       	ldd	r25, Y+9	; 0x09
    171c:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__addsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	8e 83       	std	Y+6, r24	; 0x06
    1726:	9f 83       	std	Y+7, r25	; 0x07
    1728:	a8 87       	std	Y+8, r26	; 0x08
    172a:	b9 87       	std	Y+9, r27	; 0x09
double std_dev(double a[], uint8_t n, double *mean) 
{
	if(n == 0) { return (0);}
	double sum = 0;
	double sq_sum = 0;
	for(uint8_t i=0; i<n; ++i) {
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	8f 5f       	subi	r24, 0xFF	; 255
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	99 81       	ldd	r25, Y+1	; 0x01
    1734:	88 89       	ldd	r24, Y+16	; 0x10
    1736:	98 17       	cp	r25, r24
    1738:	08 f4       	brcc	.+2      	; 0x173c <std_dev+0xf2>
    173a:	b8 cf       	rjmp	.-144    	; 0x16ac <std_dev+0x62>
		sum += a[i];
		sq_sum += square(a[i]);
	}
	*mean = sum / n;
    173c:	88 89       	ldd	r24, Y+16	; 0x10
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	aa 27       	eor	r26, r26
    1744:	97 fd       	sbrc	r25, 7
    1746:	a0 95       	com	r26
    1748:	ba 2f       	mov	r27, r26
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__floatsisf>
    1752:	9b 01       	movw	r18, r22
    1754:	ac 01       	movw	r20, r24
    1756:	6a 85       	ldd	r22, Y+10	; 0x0a
    1758:	7b 85       	ldd	r23, Y+11	; 0x0b
    175a:	8c 85       	ldd	r24, Y+12	; 0x0c
    175c:	9d 85       	ldd	r25, Y+13	; 0x0d
    175e:	0e 94 36 10 	call	0x206c	; 0x206c <__divsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	e9 89       	ldd	r30, Y+17	; 0x11
    1768:	fa 89       	ldd	r31, Y+18	; 0x12
    176a:	80 83       	st	Z, r24
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	a2 83       	std	Z+2, r26	; 0x02
    1770:	b3 83       	std	Z+3, r27	; 0x03
	double variance = (sq_sum / n) - square(*mean);
    1772:	88 89       	ldd	r24, Y+16	; 0x10
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	aa 27       	eor	r26, r26
    177a:	97 fd       	sbrc	r25, 7
    177c:	a0 95       	com	r26
    177e:	ba 2f       	mov	r27, r26
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__floatsisf>
    1788:	9b 01       	movw	r18, r22
    178a:	ac 01       	movw	r20, r24
    178c:	6e 81       	ldd	r22, Y+6	; 0x06
    178e:	7f 81       	ldd	r23, Y+7	; 0x07
    1790:	88 85       	ldd	r24, Y+8	; 0x08
    1792:	99 85       	ldd	r25, Y+9	; 0x09
    1794:	0e 94 36 10 	call	0x206c	; 0x206c <__divsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	7c 01       	movw	r14, r24
    179e:	8d 01       	movw	r16, r26
    17a0:	e9 89       	ldd	r30, Y+17	; 0x11
    17a2:	fa 89       	ldd	r31, Y+18	; 0x12
    17a4:	80 81       	ld	r24, Z
    17a6:	91 81       	ldd	r25, Z+1	; 0x01
    17a8:	a2 81       	ldd	r26, Z+2	; 0x02
    17aa:	b3 81       	ldd	r27, Z+3	; 0x03
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	0e 94 2a 12 	call	0x2454	; 0x2454 <square>
    17b4:	9b 01       	movw	r18, r22
    17b6:	ac 01       	movw	r20, r24
    17b8:	c8 01       	movw	r24, r16
    17ba:	b7 01       	movw	r22, r14
    17bc:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	8a 83       	std	Y+2, r24	; 0x02
    17c6:	9b 83       	std	Y+3, r25	; 0x03
    17c8:	ac 83       	std	Y+4, r26	; 0x04
    17ca:	bd 83       	std	Y+5, r27	; 0x05
	return sqrt(variance);
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	9b 81       	ldd	r25, Y+3	; 0x03
    17d0:	ac 81       	ldd	r26, Y+4	; 0x04
    17d2:	bd 81       	ldd	r27, Y+5	; 0x05
    17d4:	bc 01       	movw	r22, r24
    17d6:	cd 01       	movw	r24, r26
    17d8:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <sqrt>
    17dc:	6b 8b       	std	Y+19, r22	; 0x13
    17de:	7c 8b       	std	Y+20, r23	; 0x14
    17e0:	8d 8b       	std	Y+21, r24	; 0x15
    17e2:	9e 8b       	std	Y+22, r25	; 0x16
    17e4:	8b 89       	ldd	r24, Y+19	; 0x13
    17e6:	9c 89       	ldd	r25, Y+20	; 0x14
    17e8:	ad 89       	ldd	r26, Y+21	; 0x15
    17ea:	be 89       	ldd	r27, Y+22	; 0x16
}
    17ec:	bc 01       	movw	r22, r24
    17ee:	cd 01       	movw	r24, r26
    17f0:	66 96       	adiw	r28, 0x16	; 22
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	08 95       	ret

0000180a <set_baud_rate>:
uint8_t rx_buffer_tail = 0;
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_buffer_head = 0;
volatile uint8_t tx_buffer_tail = 0;

static void set_baud_rate(long baud) {
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	00 d0       	rcall	.+0      	; 0x1810 <set_baud_rate+0x6>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <set_baud_rate+0x8>
    1812:	00 d0       	rcall	.+0      	; 0x1814 <set_baud_rate+0xa>
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	6b 83       	std	Y+3, r22	; 0x03
    181a:	7c 83       	std	Y+4, r23	; 0x04
    181c:	8d 83       	std	Y+5, r24	; 0x05
    181e:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t UBRR0_value = (F_CPU / (8 * baud)) - 1;
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	ad 81       	ldd	r26, Y+5	; 0x05
    1826:	be 81       	ldd	r27, Y+6	; 0x06
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	aa 1f       	adc	r26, r26
    182e:	bb 1f       	adc	r27, r27
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	aa 1f       	adc	r26, r26
    1836:	bb 1f       	adc	r27, r27
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	aa 1f       	adc	r26, r26
    183e:	bb 1f       	adc	r27, r27
    1840:	9c 01       	movw	r18, r24
    1842:	ad 01       	movw	r20, r26
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	92 e1       	ldi	r25, 0x12	; 18
    1848:	aa e7       	ldi	r26, 0x7A	; 122
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 42 12 	call	0x2484	; 0x2484 <__udivmodsi4>
    1854:	da 01       	movw	r26, r20
    1856:	c9 01       	movw	r24, r18
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	9a 83       	std	Y+2, r25	; 0x02
    185c:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = UBRR0_value >> 8;
    185e:	e5 ec       	ldi	r30, 0xC5	; 197
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
    1866:	89 2f       	mov	r24, r25
    1868:	99 27       	eor	r25, r25
    186a:	80 83       	st	Z, r24
	UBRR0L = UBRR0_value;
    186c:	e4 ec       	ldi	r30, 0xC4	; 196
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	80 83       	st	Z, r24
	UCSR0A &= ~(1<<U2X0);		// baud doubler off
    1874:	a0 ec       	ldi	r26, 0xC0	; 192
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e0 ec       	ldi	r30, 0xC0	; 192
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	8d 7f       	andi	r24, 0xFD	; 253
    1880:	8c 93       	st	X, r24
}
    1882:	26 96       	adiw	r28, 0x06	; 6
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <serial_init>:

void serial_init(long baud)
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	00 d0       	rcall	.+0      	; 0x189a <serial_init+0x6>
    189a:	00 d0       	rcall	.+0      	; 0x189c <serial_init+0x8>
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	69 83       	std	Y+1, r22	; 0x01
    18a2:	7a 83       	std	Y+2, r23	; 0x02
    18a4:	8b 83       	std	Y+3, r24	; 0x03
    18a6:	9c 83       	std	Y+4, r25	; 0x04
	set_baud_rate(baud);
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	9a 81       	ldd	r25, Y+2	; 0x02
    18ac:	ab 81       	ldd	r26, Y+3	; 0x03
    18ae:	bc 81       	ldd	r27, Y+4	; 0x04
    18b0:	bc 01       	movw	r22, r24
    18b2:	cd 01       	movw	r24, r26
    18b4:	0e 94 05 0c 	call	0x180a	; 0x180a <set_baud_rate>
	UCSR0B |= 1<<RXEN0;			// enable rx and tx
    18b8:	a1 ec       	ldi	r26, 0xC1	; 193
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e1 ec       	ldi	r30, 0xC1	; 193
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	80 61       	ori	r24, 0x10	; 16
    18c4:	8c 93       	st	X, r24
	UCSR0B |= 1<<TXEN0;	
    18c6:	a1 ec       	ldi	r26, 0xC1	; 193
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e1 ec       	ldi	r30, 0xC1	; 193
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	88 60       	ori	r24, 0x08	; 8
    18d2:	8c 93       	st	X, r24
	UCSR0B |= 1<<RXCIE0;		// enable interrupt on complete reception of a byte
    18d4:	a1 ec       	ldi	r26, 0xC1	; 193
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e1 ec       	ldi	r30, 0xC1	; 193
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	80 68       	ori	r24, 0x80	; 128
    18e0:	8c 93       	st	X, r24
	// USART defaults to 8-bit, no parity, 1 stop bit
}
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <serial_write>:

void serial_write(uint8_t data) {
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <serial_write+0x6>
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = tx_buffer_head + 1;	// Calculate next head
    18fc:	80 91 05 01 	lds	r24, 0x0105
    1900:	8f 5f       	subi	r24, 0xFF	; 255
    1902:	89 83       	std	Y+1, r24	; 0x01
	if (next_head == TX_BUFFER_SIZE) {
		next_head = 0; 
	}
	// Enable Data Register Empty Interrupt to make sure tx-streaming is running
	UCSR0B |= (1<<UDRIE0); 
    1904:	a1 ec       	ldi	r26, 0xC1	; 193
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e1 ec       	ldi	r30, 0xC1	; 193
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	80 62       	ori	r24, 0x20	; 32
    1910:	8c 93       	st	X, r24
	while (next_head == tx_buffer_tail); 	// Wait until there is space in the buffer
    1912:	90 91 06 01 	lds	r25, 0x0106
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	89 17       	cp	r24, r25
    191a:	d9 f3       	breq	.-10     	; 0x1912 <serial_write+0x22>

	tx_buffer[tx_buffer_head] = data;		// Store data and advance head
    191c:	80 91 05 01 	lds	r24, 0x0105
    1920:	88 2f       	mov	r24, r24
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	fc 01       	movw	r30, r24
    1926:	e5 51       	subi	r30, 0x15	; 21
    1928:	fd 4f       	sbci	r31, 0xFD	; 253
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	80 83       	st	Z, r24
	tx_buffer_head = next_head;
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	80 93 05 01 	sts	0x0105, r24
}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <__vector_19>:

// Data Register Empty Interrupt handler
ISR(USART_UDRE_vect)
{
    193e:	1f 92       	push	r1
    1940:	0f 92       	push	r0
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	0f 92       	push	r0
    1946:	11 24       	eor	r1, r1
    1948:	8f 93       	push	r24
    194a:	9f 93       	push	r25
    194c:	af 93       	push	r26
    194e:	bf 93       	push	r27
    1950:	ef 93       	push	r30
    1952:	ff 93       	push	r31
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	0f 92       	push	r0
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
	uint8_t tail = tx_buffer_tail;	// Temporary tx_buffer_tail (to optimize for volatile)
    195e:	80 91 06 01 	lds	r24, 0x0106
    1962:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = tx_buffer[tail];			// Send a byte from the buffer	
    1964:	a6 ec       	ldi	r26, 0xC6	; 198
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	88 2f       	mov	r24, r24
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	fc 01       	movw	r30, r24
    1970:	e5 51       	subi	r30, 0x15	; 21
    1972:	fd 4f       	sbci	r31, 0xFD	; 253
    1974:	80 81       	ld	r24, Z
    1976:	8c 93       	st	X, r24
    tail++;							// Update tail position
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	8f 5f       	subi	r24, 0xFF	; 255
    197c:	89 83       	std	Y+1, r24	; 0x01
    if (tail == TX_BUFFER_SIZE) { tail = 0; }
	tx_buffer_tail = tail;
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	80 93 06 01 	sts	0x0106, r24

	// Turn off Data Register Empty Interrupt to stop tx-streaming if this concludes the transfer
	if (tail == tx_buffer_head) { 
    1984:	90 91 05 01 	lds	r25, 0x0105
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	89 17       	cp	r24, r25
    198c:	39 f4       	brne	.+14     	; 0x199c <__vector_19+0x5e>
		UCSR0B &= ~(1<<UDRIE0);
    198e:	a1 ec       	ldi	r26, 0xC1	; 193
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e1 ec       	ldi	r30, 0xC1	; 193
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	8f 7d       	andi	r24, 0xDF	; 223
    199a:	8c 93       	st	X, r24
	}
}
    199c:	0f 90       	pop	r0
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	ff 91       	pop	r31
    19a4:	ef 91       	pop	r30
    19a6:	bf 91       	pop	r27
    19a8:	af 91       	pop	r26
    19aa:	9f 91       	pop	r25
    19ac:	8f 91       	pop	r24
    19ae:	0f 90       	pop	r0
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	0f 90       	pop	r0
    19b4:	1f 90       	pop	r1
    19b6:	18 95       	reti

000019b8 <serial_read>:

uint8_t serial_read()
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <serial_read+0x6>
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
	if (rx_buffer_head == rx_buffer_tail) {
    19c2:	90 91 03 01 	lds	r25, 0x0103
    19c6:	80 91 04 01 	lds	r24, 0x0104
    19ca:	98 17       	cp	r25, r24
    19cc:	19 f4       	brne	.+6      	; 0x19d4 <serial_read+0x1c>
		return SERIAL_NO_DATA;
    19ce:	8f ef       	ldi	r24, 0xFF	; 255
    19d0:	8a 83       	std	Y+2, r24	; 0x02
    19d2:	10 c0       	rjmp	.+32     	; 0x19f4 <serial_read+0x3c>
	} else {
		uint8_t data = rx_buffer[rx_buffer_tail];
    19d4:	80 91 04 01 	lds	r24, 0x0104
    19d8:	88 2f       	mov	r24, r24
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	fc 01       	movw	r30, r24
    19de:	e5 51       	subi	r30, 0x15	; 21
    19e0:	fe 4f       	sbci	r31, 0xFE	; 254
    19e2:	80 81       	ld	r24, Z
    19e4:	89 83       	std	Y+1, r24	; 0x01
		rx_buffer_tail++;
    19e6:	80 91 04 01 	lds	r24, 0x0104
    19ea:	8f 5f       	subi	r24, 0xFF	; 255
    19ec:	80 93 04 01 	sts	0x0104, r24
		if (rx_buffer_tail == RX_BUFFER_SIZE) { rx_buffer_tail = 0; }
		return data;
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	8a 83       	std	Y+2, r24	; 0x02
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <__vector_18>:

ISR(USART_RX_vect)
{
    1a00:	1f 92       	push	r1
    1a02:	0f 92       	push	r0
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	0f 92       	push	r0
    1a08:	11 24       	eor	r1, r1
    1a0a:	8f 93       	push	r24
    1a0c:	9f 93       	push	r25
    1a0e:	ef 93       	push	r30
    1a10:	ff 93       	push	r31
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <__vector_18+0x18>
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = UDR0;
    1a1c:	e6 ec       	ldi	r30, 0xC6	; 198
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = rx_buffer_head + 1;
    1a24:	80 91 03 01 	lds	r24, 0x0103
    1a28:	8f 5f       	subi	r24, 0xFF	; 255
    1a2a:	89 83       	std	Y+1, r24	; 0x01
	
	if (next_head == RX_BUFFER_SIZE) { 
		next_head = 0;
	}
	if (next_head != rx_buffer_tail) {      // Write data to buffer unless it is full.
    1a2c:	90 91 04 01 	lds	r25, 0x0104
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	89 17       	cp	r24, r25
    1a34:	61 f0       	breq	.+24     	; 0x1a4e <__vector_18+0x4e>
		rx_buffer[rx_buffer_head] = data;
    1a36:	80 91 03 01 	lds	r24, 0x0103
    1a3a:	88 2f       	mov	r24, r24
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	fc 01       	movw	r30, r24
    1a40:	e5 51       	subi	r30, 0x15	; 21
    1a42:	fe 4f       	sbci	r31, 0xFE	; 254
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	80 83       	st	Z, r24
		rx_buffer_head = next_head;    
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	80 93 03 01 	sts	0x0103, r24
	}
}
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	ff 91       	pop	r31
    1a58:	ef 91       	pop	r30
    1a5a:	9f 91       	pop	r25
    1a5c:	8f 91       	pop	r24
    1a5e:	0f 90       	pop	r0
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	0f 90       	pop	r0
    1a64:	1f 90       	pop	r1
    1a66:	18 95       	reti

00001a68 <serial_reset_read_buffer>:

void serial_reset_read_buffer() 
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
  rx_buffer_tail = rx_buffer_head;
    1a70:	80 91 03 01 	lds	r24, 0x0103
    1a74:	80 93 04 01 	sts	0x0104, r24
}
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <printString>:

#include "print.h"
#include "serial.h"

void printString(const char *s)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <printString+0x6>
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	9a 83       	std	Y+2, r25	; 0x02
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	0b c0       	rjmp	.+22     	; 0x1aa4 <printString+0x26>
  while (*s)
    serial_write(*s++);
    1a8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a90:	fa 81       	ldd	r31, Y+2	; 0x02
    1a92:	20 81       	ld	r18, Z
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	9a 81       	ldd	r25, Y+2	; 0x02
    1a98:	01 96       	adiw	r24, 0x01	; 1
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	82 2f       	mov	r24, r18
    1aa0:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <serial_write>
#include "print.h"
#include "serial.h"

void printString(const char *s)
{
  while (*s)
    1aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa8:	80 81       	ld	r24, Z
    1aaa:	88 23       	and	r24, r24
    1aac:	81 f7       	brne	.-32     	; 0x1a8e <printString+0x10>
    serial_write(*s++);
}
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <printPgmString+0x6>
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <printPgmString+0x8>
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <printPgmString+0xa>
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	9e 83       	std	Y+6, r25	; 0x06
    1ac8:	8d 83       	std	Y+5, r24	; 0x05
    1aca:	03 c0       	rjmp	.+6      	; 0x1ad2 <printPgmString+0x1a>
  char c;
  while ((c = pgm_read_byte_near(s++)))
    serial_write(c);
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <serial_write>

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
  while ((c = pgm_read_byte_near(s++)))
    1ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad6:	9b 83       	std	Y+3, r25	; 0x03
    1ad8:	8a 83       	std	Y+2, r24	; 0x02
    1ada:	8d 81       	ldd	r24, Y+5	; 0x05
    1adc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ade:	01 96       	adiw	r24, 0x01	; 1
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
    1ae4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ae6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ae8:	84 91       	lpm	r24, Z+
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	8c 83       	std	Y+4, r24	; 0x04
    1af0:	8c 81       	ldd	r24, Y+4	; 0x04
    1af2:	88 23       	and	r24, r24
    1af4:	59 f7       	brne	.-42     	; 0x1acc <printPgmString+0x14>
    serial_write(c);
}
    1af6:	26 96       	adiw	r28, 0x06	; 6
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <print_uint8_base2>:
// 			'0' + buf[i - 1] :
// 			'A' + buf[i - 1] - 10);
// }

void print_uint8_base2(uint8_t n)
{ 
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	2a 97       	sbiw	r28, 0x0a	; 10
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char buf[8];
	uint8_t i = 0;
    1b1e:	19 82       	std	Y+1, r1	; 0x01
    1b20:	12 c0       	rjmp	.+36     	; 0x1b46 <print_uint8_base2+0x3e>

	for (; i < 8; i++) {
		buf[i] = n & 1;
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b2a:	48 2f       	mov	r20, r24
    1b2c:	41 70       	andi	r20, 0x01	; 1
    1b2e:	ce 01       	movw	r24, r28
    1b30:	02 96       	adiw	r24, 0x02	; 2
    1b32:	fc 01       	movw	r30, r24
    1b34:	e2 0f       	add	r30, r18
    1b36:	f3 1f       	adc	r31, r19
    1b38:	40 83       	st	Z, r20
		n >>= 1;
    1b3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b3c:	86 95       	lsr	r24
    1b3e:	8a 87       	std	Y+10, r24	; 0x0a
void print_uint8_base2(uint8_t n)
{ 
	unsigned char buf[8];
	uint8_t i = 0;

	for (; i < 8; i++) {
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	8f 5f       	subi	r24, 0xFF	; 255
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	88 30       	cpi	r24, 0x08	; 8
    1b4a:	58 f3       	brcs	.-42     	; 0x1b22 <print_uint8_base2+0x1a>
    1b4c:	12 c0       	rjmp	.+36     	; 0x1b72 <print_uint8_base2+0x6a>
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
		serial_write('0' + buf[i - 1]);
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	88 2f       	mov	r24, r24
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9c 01       	movw	r18, r24
    1b56:	21 50       	subi	r18, 0x01	; 1
    1b58:	30 40       	sbci	r19, 0x00	; 0
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	02 96       	adiw	r24, 0x02	; 2
    1b5e:	fc 01       	movw	r30, r24
    1b60:	e2 0f       	add	r30, r18
    1b62:	f3 1f       	adc	r31, r19
    1b64:	80 81       	ld	r24, Z
    1b66:	80 5d       	subi	r24, 0xD0	; 208
    1b68:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <serial_write>
	for (; i < 8; i++) {
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	81 50       	subi	r24, 0x01	; 1
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	88 23       	and	r24, r24
    1b76:	59 f7       	brne	.-42     	; 0x1b4e <print_uint8_base2+0x46>
		serial_write('0' + buf[i - 1]);
}
    1b78:	2a 96       	adiw	r28, 0x0a	; 10
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <print_uint32_base10>:

static void print_uint32_base10(unsigned long n)
{ 
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	2f 97       	sbiw	r28, 0x0f	; 15
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	6c 87       	std	Y+12, r22	; 0x0c
    1ba4:	7d 87       	std	Y+13, r23	; 0x0d
    1ba6:	8e 87       	std	Y+14, r24	; 0x0e
    1ba8:	9f 87       	std	Y+15, r25	; 0x0f
  unsigned char buf[10]; 
  uint8_t i = 0;
    1baa:	19 82       	std	Y+1, r1	; 0x01
  
  if (n == 0) {
    1bac:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bae:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bb0:	ae 85       	ldd	r26, Y+14	; 0x0e
    1bb2:	bf 85       	ldd	r27, Y+15	; 0x0f
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	a1 05       	cpc	r26, r1
    1bb8:	b1 05       	cpc	r27, r1
    1bba:	91 f5       	brne	.+100    	; 0x1c20 <print_uint32_base10+0x96>
    serial_write('0');
    1bbc:	80 e3       	ldi	r24, 0x30	; 48
    1bbe:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <serial_write>
    1bc2:	4b c0       	rjmp	.+150    	; 0x1c5a <print_uint32_base10+0xd0>
    return;
  } 
  
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	08 2f       	mov	r16, r24
    1bc8:	10 e0       	ldi	r17, 0x00	; 0
    1bca:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bcc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bce:	ae 85       	ldd	r26, Y+14	; 0x0e
    1bd0:	bf 85       	ldd	r27, Y+15	; 0x0f
    1bd2:	2a e0       	ldi	r18, 0x0A	; 10
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e0       	ldi	r20, 0x00	; 0
    1bd8:	50 e0       	ldi	r21, 0x00	; 0
    1bda:	bc 01       	movw	r22, r24
    1bdc:	cd 01       	movw	r24, r26
    1bde:	0e 94 42 12 	call	0x2484	; 0x2484 <__udivmodsi4>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	28 2f       	mov	r18, r24
    1be8:	20 5d       	subi	r18, 0xD0	; 208
    1bea:	ce 01       	movw	r24, r28
    1bec:	02 96       	adiw	r24, 0x02	; 2
    1bee:	fc 01       	movw	r30, r24
    1bf0:	e0 0f       	add	r30, r16
    1bf2:	f1 1f       	adc	r31, r17
    1bf4:	20 83       	st	Z, r18
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	8f 5f       	subi	r24, 0xFF	; 255
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    n /= 10;
    1bfc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bfe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c00:	ae 85       	ldd	r26, Y+14	; 0x0e
    1c02:	bf 85       	ldd	r27, Y+15	; 0x0f
    1c04:	2a e0       	ldi	r18, 0x0A	; 10
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 42 12 	call	0x2484	; 0x2484 <__udivmodsi4>
    1c14:	da 01       	movw	r26, r20
    1c16:	c9 01       	movw	r24, r18
    1c18:	8c 87       	std	Y+12, r24	; 0x0c
    1c1a:	9d 87       	std	Y+13, r25	; 0x0d
    1c1c:	ae 87       	std	Y+14, r26	; 0x0e
    1c1e:	bf 87       	std	Y+15, r27	; 0x0f
  if (n == 0) {
    serial_write('0');
    return;
  } 
  
  while (n > 0) {
    1c20:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c22:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c24:	ae 85       	ldd	r26, Y+14	; 0x0e
    1c26:	bf 85       	ldd	r27, Y+15	; 0x0f
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	a1 05       	cpc	r26, r1
    1c2c:	b1 05       	cpc	r27, r1
    1c2e:	51 f6       	brne	.-108    	; 0x1bc4 <print_uint32_base10+0x3a>
    1c30:	11 c0       	rjmp	.+34     	; 0x1c54 <print_uint32_base10+0xca>
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    serial_write(buf[i-1]);
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	88 2f       	mov	r24, r24
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9c 01       	movw	r18, r24
    1c3a:	21 50       	subi	r18, 0x01	; 1
    1c3c:	30 40       	sbci	r19, 0x00	; 0
    1c3e:	ce 01       	movw	r24, r28
    1c40:	02 96       	adiw	r24, 0x02	; 2
    1c42:	fc 01       	movw	r30, r24
    1c44:	e2 0f       	add	r30, r18
    1c46:	f3 1f       	adc	r31, r19
    1c48:	80 81       	ld	r24, Z
    1c4a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <serial_write>
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	81 50       	subi	r24, 0x01	; 1
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	88 23       	and	r24, r24
    1c58:	61 f7       	brne	.-40     	; 0x1c32 <print_uint32_base10+0xa8>
    serial_write(buf[i-1]);
}
    1c5a:	2f 96       	adiw	r28, 0x0f	; 15
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	08 95       	ret

00001c70 <printInteger>:

void printInteger(uint32_t n)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <printInteger+0x6>
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <printInteger+0x8>
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	69 83       	std	Y+1, r22	; 0x01
    1c7e:	7a 83       	std	Y+2, r23	; 0x02
    1c80:	8b 83       	std	Y+3, r24	; 0x03
    1c82:	9c 83       	std	Y+4, r25	; 0x04
  if (n < 0) {
    serial_write('-');
    n = -n;
  }
  print_uint32_base10(n);
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	9a 81       	ldd	r25, Y+2	; 0x02
    1c88:	ab 81       	ldd	r26, Y+3	; 0x03
    1c8a:	bc 81       	ldd	r27, Y+4	; 0x04
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	cd 01       	movw	r24, r26
    1c90:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <print_uint32_base10>
}
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up 
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n)
{
    1ca2:	0f 93       	push	r16
    1ca4:	1f 93       	push	r17
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	64 97       	sbiw	r28, 0x14	; 20
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	69 8b       	std	Y+17, r22	; 0x11
    1cbc:	7a 8b       	std	Y+18, r23	; 0x12
    1cbe:	8b 8b       	std	Y+19, r24	; 0x13
    1cc0:	9c 8b       	std	Y+20, r25	; 0x14
	if (n < 0) {
    1cc2:	69 89       	ldd	r22, Y+17	; 0x11
    1cc4:	7a 89       	ldd	r23, Y+18	; 0x12
    1cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	0e 94 32 10 	call	0x2064	; 0x2064 <__cmpsf2>
    1cd6:	88 23       	and	r24, r24
    1cd8:	64 f4       	brge	.+24     	; 0x1cf2 <printFloat+0x50>
		serial_write('-');
    1cda:	8d e2       	ldi	r24, 0x2D	; 45
    1cdc:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <serial_write>
		n = -n;
    1ce0:	89 89       	ldd	r24, Y+17	; 0x11
    1ce2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce4:	ab 89       	ldd	r26, Y+19	; 0x13
    1ce6:	bc 89       	ldd	r27, Y+20	; 0x14
    1ce8:	b0 58       	subi	r27, 0x80	; 128
    1cea:	89 8b       	std	Y+17, r24	; 0x11
    1cec:	9a 8b       	std	Y+18, r25	; 0x12
    1cee:	ab 8b       	std	Y+19, r26	; 0x13
    1cf0:	bc 8b       	std	Y+20, r27	; 0x14
	}

	uint8_t decimals = DECIMAL_PLACES;
    1cf2:	82 e0       	ldi	r24, 0x02	; 2
    1cf4:	8e 83       	std	Y+6, r24	; 0x06
    1cf6:	13 c0       	rjmp	.+38     	; 0x1d1e <printFloat+0x7c>
	while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
		n *= 100;
    1cf8:	69 89       	ldd	r22, Y+17	; 0x11
    1cfa:	7a 89       	ldd	r23, Y+18	; 0x12
    1cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	48 ec       	ldi	r20, 0xC8	; 200
    1d06:	52 e4       	ldi	r21, 0x42	; 66
    1d08:	0e 94 85 11 	call	0x230a	; 0x230a <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	89 8b       	std	Y+17, r24	; 0x11
    1d12:	9a 8b       	std	Y+18, r25	; 0x12
    1d14:	ab 8b       	std	Y+19, r26	; 0x13
    1d16:	bc 8b       	std	Y+20, r27	; 0x14
		decimals -= 2;
    1d18:	8e 81       	ldd	r24, Y+6	; 0x06
    1d1a:	82 50       	subi	r24, 0x02	; 2
    1d1c:	8e 83       	std	Y+6, r24	; 0x06
		serial_write('-');
		n = -n;
	}

	uint8_t decimals = DECIMAL_PLACES;
	while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
    1d1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d20:	82 30       	cpi	r24, 0x02	; 2
    1d22:	50 f7       	brcc	.-44     	; 0x1cf8 <printFloat+0x56>
		n *= 100;
		decimals -= 2;
	}
	if (decimals) { n *= 10; }
    1d24:	8e 81       	ldd	r24, Y+6	; 0x06
    1d26:	88 23       	and	r24, r24
    1d28:	81 f0       	breq	.+32     	; 0x1d4a <printFloat+0xa8>
    1d2a:	69 89       	ldd	r22, Y+17	; 0x11
    1d2c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d30:	9c 89       	ldd	r25, Y+20	; 0x14
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e2       	ldi	r20, 0x20	; 32
    1d38:	51 e4       	ldi	r21, 0x41	; 65
    1d3a:	0e 94 85 11 	call	0x230a	; 0x230a <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	89 8b       	std	Y+17, r24	; 0x11
    1d44:	9a 8b       	std	Y+18, r25	; 0x12
    1d46:	ab 8b       	std	Y+19, r26	; 0x13
    1d48:	bc 8b       	std	Y+20, r27	; 0x14
	n += 0.5; // Add rounding factor. Ensures carryover through entire value.
    1d4a:	69 89       	ldd	r22, Y+17	; 0x11
    1d4c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d50:	9c 89       	ldd	r25, Y+20	; 0x14
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e0       	ldi	r20, 0x00	; 0
    1d58:	5f e3       	ldi	r21, 0x3F	; 63
    1d5a:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__addsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	89 8b       	std	Y+17, r24	; 0x11
    1d64:	9a 8b       	std	Y+18, r25	; 0x12
    1d66:	ab 8b       	std	Y+19, r26	; 0x13
    1d68:	bc 8b       	std	Y+20, r27	; 0x14
    
	// Generate digits backwards and store in string.
	unsigned char buf[10]; 
	uint8_t i = 0;
    1d6a:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t a = (long)n;  
    1d6c:	69 89       	ldd	r22, Y+17	; 0x11
    1d6e:	7a 89       	ldd	r23, Y+18	; 0x12
    1d70:	8b 89       	ldd	r24, Y+19	; 0x13
    1d72:	9c 89       	ldd	r25, Y+20	; 0x14
    1d74:	0e 94 9e 10 	call	0x213c	; 0x213c <__fixsfsi>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	ab 83       	std	Y+3, r26	; 0x03
    1d82:	bc 83       	std	Y+4, r27	; 0x04
	buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
    1d84:	8e e2       	ldi	r24, 0x2E	; 46
    1d86:	89 87       	std	Y+9, r24	; 0x09
    1d88:	34 c0       	rjmp	.+104    	; 0x1df2 <printFloat+0x150>
	while(a > 0) {
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8c:	82 30       	cpi	r24, 0x02	; 2
    1d8e:	19 f4       	brne	.+6      	; 0x1d96 <printFloat+0xf4>
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	8f 5f       	subi	r24, 0xFF	; 255
    1d94:	8d 83       	std	Y+5, r24	; 0x05
		buf[i++] = (a % 10) + '0'; // Get digit
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	08 2f       	mov	r16, r24
    1d9a:	10 e0       	ldi	r17, 0x00	; 0
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1da0:	ab 81       	ldd	r26, Y+3	; 0x03
    1da2:	bc 81       	ldd	r27, Y+4	; 0x04
    1da4:	2a e0       	ldi	r18, 0x0A	; 10
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e0       	ldi	r20, 0x00	; 0
    1daa:	50 e0       	ldi	r21, 0x00	; 0
    1dac:	bc 01       	movw	r22, r24
    1dae:	cd 01       	movw	r24, r26
    1db0:	0e 94 42 12 	call	0x2484	; 0x2484 <__udivmodsi4>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	28 2f       	mov	r18, r24
    1dba:	20 5d       	subi	r18, 0xD0	; 208
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	07 96       	adiw	r24, 0x07	; 7
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	e0 0f       	add	r30, r16
    1dc4:	f1 1f       	adc	r31, r17
    1dc6:	20 83       	st	Z, r18
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	8f 5f       	subi	r24, 0xFF	; 255
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
		a /= 10;
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd2:	ab 81       	ldd	r26, Y+3	; 0x03
    1dd4:	bc 81       	ldd	r27, Y+4	; 0x04
    1dd6:	2a e0       	ldi	r18, 0x0A	; 10
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 42 12 	call	0x2484	; 0x2484 <__udivmodsi4>
    1de6:	da 01       	movw	r26, r20
    1de8:	c9 01       	movw	r24, r18
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	ab 83       	std	Y+3, r26	; 0x03
    1df0:	bc 83       	std	Y+4, r27	; 0x04
	// Generate digits backwards and store in string.
	unsigned char buf[10]; 
	uint8_t i = 0;
	uint32_t a = (long)n;  
	buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
	while(a > 0) {
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	9a 81       	ldd	r25, Y+2	; 0x02
    1df6:	ab 81       	ldd	r26, Y+3	; 0x03
    1df8:	bc 81       	ldd	r27, Y+4	; 0x04
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	a1 05       	cpc	r26, r1
    1dfe:	b1 05       	cpc	r27, r1
    1e00:	21 f6       	brne	.-120    	; 0x1d8a <printFloat+0xe8>
    1e02:	0d c0       	rjmp	.+26     	; 0x1e1e <printFloat+0x17c>
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
		buf[i++] = (a % 10) + '0'; // Get digit
		a /= 10;
	}
	while (i < DECIMAL_PLACES) { 
		buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
    1e04:	8d 81       	ldd	r24, Y+5	; 0x05
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	07 96       	adiw	r24, 0x07	; 7
    1e0e:	fc 01       	movw	r30, r24
    1e10:	e2 0f       	add	r30, r18
    1e12:	f3 1f       	adc	r31, r19
    1e14:	80 e3       	ldi	r24, 0x30	; 48
    1e16:	80 83       	st	Z, r24
    1e18:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1a:	8f 5f       	subi	r24, 0xFF	; 255
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
	while(a > 0) {
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
		buf[i++] = (a % 10) + '0'; // Get digit
		a /= 10;
	}
	while (i < DECIMAL_PLACES) { 
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e20:	82 30       	cpi	r24, 0x02	; 2
    1e22:	80 f3       	brcs	.-32     	; 0x1e04 <printFloat+0x162>
		buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
	}
	if (i == DECIMAL_PLACES) { // Fill in leading zero, if needed.
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	82 30       	cpi	r24, 0x02	; 2
    1e28:	11 f5       	brne	.+68     	; 0x1e6e <printFloat+0x1cc>
		i++;
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	8f 5f       	subi	r24, 0xFF	; 255
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
		buf[i++] = '0'; 
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	ce 01       	movw	r24, r28
    1e38:	07 96       	adiw	r24, 0x07	; 7
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	e2 0f       	add	r30, r18
    1e3e:	f3 1f       	adc	r31, r19
    1e40:	80 e3       	ldi	r24, 0x30	; 48
    1e42:	80 83       	st	Z, r24
    1e44:	8d 81       	ldd	r24, Y+5	; 0x05
    1e46:	8f 5f       	subi	r24, 0xFF	; 255
    1e48:	8d 83       	std	Y+5, r24	; 0x05
    1e4a:	11 c0       	rjmp	.+34     	; 0x1e6e <printFloat+0x1cc>
	}

	// Print the generated string.
	for (; i > 0; i--)
		serial_write(buf[i-1]);
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	88 2f       	mov	r24, r24
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9c 01       	movw	r18, r24
    1e54:	21 50       	subi	r18, 0x01	; 1
    1e56:	30 40       	sbci	r19, 0x00	; 0
    1e58:	ce 01       	movw	r24, r28
    1e5a:	07 96       	adiw	r24, 0x07	; 7
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	e2 0f       	add	r30, r18
    1e60:	f3 1f       	adc	r31, r19
    1e62:	80 81       	ld	r24, Z
    1e64:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <serial_write>
		i++;
		buf[i++] = '0'; 
	}

	// Print the generated string.
	for (; i > 0; i--)
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	81 50       	subi	r24, 0x01	; 1
    1e6c:	8d 83       	std	Y+5, r24	; 0x05
    1e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e70:	88 23       	and	r24, r24
    1e72:	61 f7       	brne	.-40     	; 0x1e4c <printFloat+0x1aa>
		serial_write(buf[i-1]);
}
    1e74:	64 96       	adiw	r28, 0x14	; 20
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	1f 91       	pop	r17
    1e86:	0f 91       	pop	r16
    1e88:	08 95       	ret

00001e8a <rpt_initialized>:
static PGM_P const msg_hstate[] PROGMEM = { msg_hstate0, msg_hstate1, msg_hstate2, msg_hstate3 };

/*** Display routines ***/

void rpt_initialized()
{
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
//	printPgmString((PGM_P)(pgm_read_word(initialized))); 
	printPgmString(PSTR("\nDevice Initialized\n")); 
    1e92:	8b e4       	ldi	r24, 0x4B	; 75
    1e94:	91 e0       	ldi	r25, 0x01	; 1
    1e96:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printPgmString>
}
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <rpt_readout>:

void rpt_readout()
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <rpt_readout+0x6>
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <rpt_readout+0x8>
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
	printPgmString(PSTR("Temp:")); printFloat(sensor.temperature);
    1eac:	8b e7       	ldi	r24, 0x7B	; 123
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printPgmString>
    1eb4:	80 91 6d 01 	lds	r24, 0x016D
    1eb8:	90 91 6e 01 	lds	r25, 0x016E
    1ebc:	a0 91 6f 01 	lds	r26, 0x016F
    1ec0:	b0 91 70 01 	lds	r27, 0x0170
    1ec4:	bc 01       	movw	r22, r24
    1ec6:	cd 01       	movw	r24, r26
    1ec8:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <printFloat>
	printPgmString(PSTR("  PWM:")); printFloat(pid.output);
    1ecc:	84 e7       	ldi	r24, 0x74	; 116
    1ece:	91 e0       	ldi	r25, 0x01	; 1
    1ed0:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printPgmString>
    1ed4:	80 91 2f 01 	lds	r24, 0x012F
    1ed8:	90 91 30 01 	lds	r25, 0x0130
    1edc:	a0 91 31 01 	lds	r26, 0x0131
    1ee0:	b0 91 32 01 	lds	r27, 0x0132
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <printFloat>
//	printPgmString(PSTR("  s[0]:")); printFloat(sensor.sample[0]);
//	printPgmString(PSTR("  StdDev:")); printFloat(sensor.std_dev);
//	printPgmString(PSTR("  Samples:")); printFloat(sensor.samples);
	printPgmString(PSTR("  Err:")); printFloat(pid.error);
    1eec:	8d e6       	ldi	r24, 0x6D	; 109
    1eee:	91 e0       	ldi	r25, 0x01	; 1
    1ef0:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printPgmString>
    1ef4:	80 91 3b 01 	lds	r24, 0x013B
    1ef8:	90 91 3c 01 	lds	r25, 0x013C
    1efc:	a0 91 3d 01 	lds	r26, 0x013D
    1f00:	b0 91 3e 01 	lds	r27, 0x013E
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <printFloat>
	printPgmString(PSTR("  I:")); printFloat(pid.integral);
    1f0c:	88 e6       	ldi	r24, 0x68	; 104
    1f0e:	91 e0       	ldi	r25, 0x01	; 1
    1f10:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printPgmString>
    1f14:	80 91 43 01 	lds	r24, 0x0143
    1f18:	90 91 44 01 	lds	r25, 0x0144
    1f1c:	a0 91 45 01 	lds	r26, 0x0145
    1f20:	b0 91 46 01 	lds	r27, 0x0146
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <printFloat>
//	printPgmString(PSTR("  D:")); printFloat(pid.derivative);
	printPgmString(PSTR("  Hy:")); printFloat(heater.hysteresis);
    1f2c:	82 e6       	ldi	r24, 0x62	; 98
    1f2e:	91 e0       	ldi	r25, 0x01	; 1
    1f30:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printPgmString>
    1f34:	80 91 0a 01 	lds	r24, 0x010A
    1f38:	99 27       	eor	r25, r25
    1f3a:	87 fd       	sbrc	r24, 7
    1f3c:	90 95       	com	r25
    1f3e:	a9 2f       	mov	r26, r25
    1f40:	b9 2f       	mov	r27, r25
    1f42:	bc 01       	movw	r22, r24
    1f44:	cd 01       	movw	r24, r26
    1f46:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__floatsisf>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <printFloat>

	printPgmString((PGM_P)pgm_read_word(&msg_hstate[heater.state]));
    1f56:	80 91 07 01 	lds	r24, 0x0107
    1f5a:	88 2f       	mov	r24, r24
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	8d 5b       	subi	r24, 0xBD	; 189
    1f64:	9e 4f       	sbci	r25, 0xFE	; 254
    1f66:	9c 83       	std	Y+4, r25	; 0x04
    1f68:	8b 83       	std	Y+3, r24	; 0x03
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6e:	fc 01       	movw	r30, r24
    1f70:	85 91       	lpm	r24, Z+
    1f72:	94 91       	lpm	r25, Z+
    1f74:	9a 83       	std	Y+2, r25	; 0x02
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	fc 83       	std	Y+4, r31	; 0x04
    1f7a:	eb 83       	std	Y+3, r30	; 0x03
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f80:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printPgmString>
//	printPgmString((PGM_P)pgm_read_word(&msg_scode[sensor.code]));

	printPgmString(PSTR("\n")); 
    1f84:	80 e6       	ldi	r24, 0x60	; 96
    1f86:	91 e0       	ldi	r25, 0x01	; 1
    1f88:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printPgmString>

}
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret

00001f9a <__subsf3>:
    1f9a:	50 58       	subi	r21, 0x80	; 128

00001f9c <__addsf3>:
    1f9c:	bb 27       	eor	r27, r27
    1f9e:	aa 27       	eor	r26, r26
    1fa0:	0e d0       	rcall	.+28     	; 0x1fbe <__addsf3x>
    1fa2:	75 c1       	rjmp	.+746    	; 0x228e <__fp_round>
    1fa4:	66 d1       	rcall	.+716    	; 0x2272 <__fp_pscA>
    1fa6:	30 f0       	brcs	.+12     	; 0x1fb4 <__addsf3+0x18>
    1fa8:	6b d1       	rcall	.+726    	; 0x2280 <__fp_pscB>
    1faa:	20 f0       	brcs	.+8      	; 0x1fb4 <__addsf3+0x18>
    1fac:	31 f4       	brne	.+12     	; 0x1fba <__addsf3+0x1e>
    1fae:	9f 3f       	cpi	r25, 0xFF	; 255
    1fb0:	11 f4       	brne	.+4      	; 0x1fb6 <__addsf3+0x1a>
    1fb2:	1e f4       	brtc	.+6      	; 0x1fba <__addsf3+0x1e>
    1fb4:	5b c1       	rjmp	.+694    	; 0x226c <__fp_nan>
    1fb6:	0e f4       	brtc	.+2      	; 0x1fba <__addsf3+0x1e>
    1fb8:	e0 95       	com	r30
    1fba:	e7 fb       	bst	r30, 7
    1fbc:	51 c1       	rjmp	.+674    	; 0x2260 <__fp_inf>

00001fbe <__addsf3x>:
    1fbe:	e9 2f       	mov	r30, r25
    1fc0:	77 d1       	rcall	.+750    	; 0x22b0 <__fp_split3>
    1fc2:	80 f3       	brcs	.-32     	; 0x1fa4 <__addsf3+0x8>
    1fc4:	ba 17       	cp	r27, r26
    1fc6:	62 07       	cpc	r22, r18
    1fc8:	73 07       	cpc	r23, r19
    1fca:	84 07       	cpc	r24, r20
    1fcc:	95 07       	cpc	r25, r21
    1fce:	18 f0       	brcs	.+6      	; 0x1fd6 <__addsf3x+0x18>
    1fd0:	71 f4       	brne	.+28     	; 0x1fee <__addsf3x+0x30>
    1fd2:	9e f5       	brtc	.+102    	; 0x203a <__addsf3x+0x7c>
    1fd4:	8f c1       	rjmp	.+798    	; 0x22f4 <__fp_zero>
    1fd6:	0e f4       	brtc	.+2      	; 0x1fda <__addsf3x+0x1c>
    1fd8:	e0 95       	com	r30
    1fda:	0b 2e       	mov	r0, r27
    1fdc:	ba 2f       	mov	r27, r26
    1fde:	a0 2d       	mov	r26, r0
    1fe0:	0b 01       	movw	r0, r22
    1fe2:	b9 01       	movw	r22, r18
    1fe4:	90 01       	movw	r18, r0
    1fe6:	0c 01       	movw	r0, r24
    1fe8:	ca 01       	movw	r24, r20
    1fea:	a0 01       	movw	r20, r0
    1fec:	11 24       	eor	r1, r1
    1fee:	ff 27       	eor	r31, r31
    1ff0:	59 1b       	sub	r21, r25
    1ff2:	99 f0       	breq	.+38     	; 0x201a <__addsf3x+0x5c>
    1ff4:	59 3f       	cpi	r21, 0xF9	; 249
    1ff6:	50 f4       	brcc	.+20     	; 0x200c <__addsf3x+0x4e>
    1ff8:	50 3e       	cpi	r21, 0xE0	; 224
    1ffa:	68 f1       	brcs	.+90     	; 0x2056 <__addsf3x+0x98>
    1ffc:	1a 16       	cp	r1, r26
    1ffe:	f0 40       	sbci	r31, 0x00	; 0
    2000:	a2 2f       	mov	r26, r18
    2002:	23 2f       	mov	r18, r19
    2004:	34 2f       	mov	r19, r20
    2006:	44 27       	eor	r20, r20
    2008:	58 5f       	subi	r21, 0xF8	; 248
    200a:	f3 cf       	rjmp	.-26     	; 0x1ff2 <__addsf3x+0x34>
    200c:	46 95       	lsr	r20
    200e:	37 95       	ror	r19
    2010:	27 95       	ror	r18
    2012:	a7 95       	ror	r26
    2014:	f0 40       	sbci	r31, 0x00	; 0
    2016:	53 95       	inc	r21
    2018:	c9 f7       	brne	.-14     	; 0x200c <__addsf3x+0x4e>
    201a:	7e f4       	brtc	.+30     	; 0x203a <__addsf3x+0x7c>
    201c:	1f 16       	cp	r1, r31
    201e:	ba 0b       	sbc	r27, r26
    2020:	62 0b       	sbc	r22, r18
    2022:	73 0b       	sbc	r23, r19
    2024:	84 0b       	sbc	r24, r20
    2026:	ba f0       	brmi	.+46     	; 0x2056 <__addsf3x+0x98>
    2028:	91 50       	subi	r25, 0x01	; 1
    202a:	a1 f0       	breq	.+40     	; 0x2054 <__addsf3x+0x96>
    202c:	ff 0f       	add	r31, r31
    202e:	bb 1f       	adc	r27, r27
    2030:	66 1f       	adc	r22, r22
    2032:	77 1f       	adc	r23, r23
    2034:	88 1f       	adc	r24, r24
    2036:	c2 f7       	brpl	.-16     	; 0x2028 <__addsf3x+0x6a>
    2038:	0e c0       	rjmp	.+28     	; 0x2056 <__addsf3x+0x98>
    203a:	ba 0f       	add	r27, r26
    203c:	62 1f       	adc	r22, r18
    203e:	73 1f       	adc	r23, r19
    2040:	84 1f       	adc	r24, r20
    2042:	48 f4       	brcc	.+18     	; 0x2056 <__addsf3x+0x98>
    2044:	87 95       	ror	r24
    2046:	77 95       	ror	r23
    2048:	67 95       	ror	r22
    204a:	b7 95       	ror	r27
    204c:	f7 95       	ror	r31
    204e:	9e 3f       	cpi	r25, 0xFE	; 254
    2050:	08 f0       	brcs	.+2      	; 0x2054 <__addsf3x+0x96>
    2052:	b3 cf       	rjmp	.-154    	; 0x1fba <__addsf3+0x1e>
    2054:	93 95       	inc	r25
    2056:	88 0f       	add	r24, r24
    2058:	08 f0       	brcs	.+2      	; 0x205c <__addsf3x+0x9e>
    205a:	99 27       	eor	r25, r25
    205c:	ee 0f       	add	r30, r30
    205e:	97 95       	ror	r25
    2060:	87 95       	ror	r24
    2062:	08 95       	ret

00002064 <__cmpsf2>:
    2064:	d9 d0       	rcall	.+434    	; 0x2218 <__fp_cmp>
    2066:	08 f4       	brcc	.+2      	; 0x206a <__cmpsf2+0x6>
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	08 95       	ret

0000206c <__divsf3>:
    206c:	0c d0       	rcall	.+24     	; 0x2086 <__divsf3x>
    206e:	0f c1       	rjmp	.+542    	; 0x228e <__fp_round>
    2070:	07 d1       	rcall	.+526    	; 0x2280 <__fp_pscB>
    2072:	40 f0       	brcs	.+16     	; 0x2084 <__divsf3+0x18>
    2074:	fe d0       	rcall	.+508    	; 0x2272 <__fp_pscA>
    2076:	30 f0       	brcs	.+12     	; 0x2084 <__divsf3+0x18>
    2078:	21 f4       	brne	.+8      	; 0x2082 <__divsf3+0x16>
    207a:	5f 3f       	cpi	r21, 0xFF	; 255
    207c:	19 f0       	breq	.+6      	; 0x2084 <__divsf3+0x18>
    207e:	f0 c0       	rjmp	.+480    	; 0x2260 <__fp_inf>
    2080:	51 11       	cpse	r21, r1
    2082:	39 c1       	rjmp	.+626    	; 0x22f6 <__fp_szero>
    2084:	f3 c0       	rjmp	.+486    	; 0x226c <__fp_nan>

00002086 <__divsf3x>:
    2086:	14 d1       	rcall	.+552    	; 0x22b0 <__fp_split3>
    2088:	98 f3       	brcs	.-26     	; 0x2070 <__divsf3+0x4>

0000208a <__divsf3_pse>:
    208a:	99 23       	and	r25, r25
    208c:	c9 f3       	breq	.-14     	; 0x2080 <__divsf3+0x14>
    208e:	55 23       	and	r21, r21
    2090:	b1 f3       	breq	.-20     	; 0x207e <__divsf3+0x12>
    2092:	95 1b       	sub	r25, r21
    2094:	55 0b       	sbc	r21, r21
    2096:	bb 27       	eor	r27, r27
    2098:	aa 27       	eor	r26, r26
    209a:	62 17       	cp	r22, r18
    209c:	73 07       	cpc	r23, r19
    209e:	84 07       	cpc	r24, r20
    20a0:	38 f0       	brcs	.+14     	; 0x20b0 <__divsf3_pse+0x26>
    20a2:	9f 5f       	subi	r25, 0xFF	; 255
    20a4:	5f 4f       	sbci	r21, 0xFF	; 255
    20a6:	22 0f       	add	r18, r18
    20a8:	33 1f       	adc	r19, r19
    20aa:	44 1f       	adc	r20, r20
    20ac:	aa 1f       	adc	r26, r26
    20ae:	a9 f3       	breq	.-22     	; 0x209a <__divsf3_pse+0x10>
    20b0:	33 d0       	rcall	.+102    	; 0x2118 <__divsf3_pse+0x8e>
    20b2:	0e 2e       	mov	r0, r30
    20b4:	3a f0       	brmi	.+14     	; 0x20c4 <__divsf3_pse+0x3a>
    20b6:	e0 e8       	ldi	r30, 0x80	; 128
    20b8:	30 d0       	rcall	.+96     	; 0x211a <__divsf3_pse+0x90>
    20ba:	91 50       	subi	r25, 0x01	; 1
    20bc:	50 40       	sbci	r21, 0x00	; 0
    20be:	e6 95       	lsr	r30
    20c0:	00 1c       	adc	r0, r0
    20c2:	ca f7       	brpl	.-14     	; 0x20b6 <__divsf3_pse+0x2c>
    20c4:	29 d0       	rcall	.+82     	; 0x2118 <__divsf3_pse+0x8e>
    20c6:	fe 2f       	mov	r31, r30
    20c8:	27 d0       	rcall	.+78     	; 0x2118 <__divsf3_pse+0x8e>
    20ca:	66 0f       	add	r22, r22
    20cc:	77 1f       	adc	r23, r23
    20ce:	88 1f       	adc	r24, r24
    20d0:	bb 1f       	adc	r27, r27
    20d2:	26 17       	cp	r18, r22
    20d4:	37 07       	cpc	r19, r23
    20d6:	48 07       	cpc	r20, r24
    20d8:	ab 07       	cpc	r26, r27
    20da:	b0 e8       	ldi	r27, 0x80	; 128
    20dc:	09 f0       	breq	.+2      	; 0x20e0 <__divsf3_pse+0x56>
    20de:	bb 0b       	sbc	r27, r27
    20e0:	80 2d       	mov	r24, r0
    20e2:	bf 01       	movw	r22, r30
    20e4:	ff 27       	eor	r31, r31
    20e6:	93 58       	subi	r25, 0x83	; 131
    20e8:	5f 4f       	sbci	r21, 0xFF	; 255
    20ea:	2a f0       	brmi	.+10     	; 0x20f6 <__divsf3_pse+0x6c>
    20ec:	9e 3f       	cpi	r25, 0xFE	; 254
    20ee:	51 05       	cpc	r21, r1
    20f0:	68 f0       	brcs	.+26     	; 0x210c <__divsf3_pse+0x82>
    20f2:	b6 c0       	rjmp	.+364    	; 0x2260 <__fp_inf>
    20f4:	00 c1       	rjmp	.+512    	; 0x22f6 <__fp_szero>
    20f6:	5f 3f       	cpi	r21, 0xFF	; 255
    20f8:	ec f3       	brlt	.-6      	; 0x20f4 <__divsf3_pse+0x6a>
    20fa:	98 3e       	cpi	r25, 0xE8	; 232
    20fc:	dc f3       	brlt	.-10     	; 0x20f4 <__divsf3_pse+0x6a>
    20fe:	86 95       	lsr	r24
    2100:	77 95       	ror	r23
    2102:	67 95       	ror	r22
    2104:	b7 95       	ror	r27
    2106:	f7 95       	ror	r31
    2108:	9f 5f       	subi	r25, 0xFF	; 255
    210a:	c9 f7       	brne	.-14     	; 0x20fe <__divsf3_pse+0x74>
    210c:	88 0f       	add	r24, r24
    210e:	91 1d       	adc	r25, r1
    2110:	96 95       	lsr	r25
    2112:	87 95       	ror	r24
    2114:	97 f9       	bld	r25, 7
    2116:	08 95       	ret
    2118:	e1 e0       	ldi	r30, 0x01	; 1
    211a:	66 0f       	add	r22, r22
    211c:	77 1f       	adc	r23, r23
    211e:	88 1f       	adc	r24, r24
    2120:	bb 1f       	adc	r27, r27
    2122:	62 17       	cp	r22, r18
    2124:	73 07       	cpc	r23, r19
    2126:	84 07       	cpc	r24, r20
    2128:	ba 07       	cpc	r27, r26
    212a:	20 f0       	brcs	.+8      	; 0x2134 <__divsf3_pse+0xaa>
    212c:	62 1b       	sub	r22, r18
    212e:	73 0b       	sbc	r23, r19
    2130:	84 0b       	sbc	r24, r20
    2132:	ba 0b       	sbc	r27, r26
    2134:	ee 1f       	adc	r30, r30
    2136:	88 f7       	brcc	.-30     	; 0x211a <__divsf3_pse+0x90>
    2138:	e0 95       	com	r30
    213a:	08 95       	ret

0000213c <__fixsfsi>:
    213c:	04 d0       	rcall	.+8      	; 0x2146 <__fixunssfsi>
    213e:	68 94       	set
    2140:	b1 11       	cpse	r27, r1
    2142:	d9 c0       	rjmp	.+434    	; 0x22f6 <__fp_szero>
    2144:	08 95       	ret

00002146 <__fixunssfsi>:
    2146:	bc d0       	rcall	.+376    	; 0x22c0 <__fp_splitA>
    2148:	88 f0       	brcs	.+34     	; 0x216c <__fixunssfsi+0x26>
    214a:	9f 57       	subi	r25, 0x7F	; 127
    214c:	90 f0       	brcs	.+36     	; 0x2172 <__fixunssfsi+0x2c>
    214e:	b9 2f       	mov	r27, r25
    2150:	99 27       	eor	r25, r25
    2152:	b7 51       	subi	r27, 0x17	; 23
    2154:	a0 f0       	brcs	.+40     	; 0x217e <__fixunssfsi+0x38>
    2156:	d1 f0       	breq	.+52     	; 0x218c <__fixunssfsi+0x46>
    2158:	66 0f       	add	r22, r22
    215a:	77 1f       	adc	r23, r23
    215c:	88 1f       	adc	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	1a f0       	brmi	.+6      	; 0x2168 <__fixunssfsi+0x22>
    2162:	ba 95       	dec	r27
    2164:	c9 f7       	brne	.-14     	; 0x2158 <__fixunssfsi+0x12>
    2166:	12 c0       	rjmp	.+36     	; 0x218c <__fixunssfsi+0x46>
    2168:	b1 30       	cpi	r27, 0x01	; 1
    216a:	81 f0       	breq	.+32     	; 0x218c <__fixunssfsi+0x46>
    216c:	c3 d0       	rcall	.+390    	; 0x22f4 <__fp_zero>
    216e:	b1 e0       	ldi	r27, 0x01	; 1
    2170:	08 95       	ret
    2172:	c0 c0       	rjmp	.+384    	; 0x22f4 <__fp_zero>
    2174:	67 2f       	mov	r22, r23
    2176:	78 2f       	mov	r23, r24
    2178:	88 27       	eor	r24, r24
    217a:	b8 5f       	subi	r27, 0xF8	; 248
    217c:	39 f0       	breq	.+14     	; 0x218c <__fixunssfsi+0x46>
    217e:	b9 3f       	cpi	r27, 0xF9	; 249
    2180:	cc f3       	brlt	.-14     	; 0x2174 <__fixunssfsi+0x2e>
    2182:	86 95       	lsr	r24
    2184:	77 95       	ror	r23
    2186:	67 95       	ror	r22
    2188:	b3 95       	inc	r27
    218a:	d9 f7       	brne	.-10     	; 0x2182 <__fixunssfsi+0x3c>
    218c:	3e f4       	brtc	.+14     	; 0x219c <__fixunssfsi+0x56>
    218e:	90 95       	com	r25
    2190:	80 95       	com	r24
    2192:	70 95       	com	r23
    2194:	61 95       	neg	r22
    2196:	7f 4f       	sbci	r23, 0xFF	; 255
    2198:	8f 4f       	sbci	r24, 0xFF	; 255
    219a:	9f 4f       	sbci	r25, 0xFF	; 255
    219c:	08 95       	ret

0000219e <__floatunsisf>:
    219e:	e8 94       	clt
    21a0:	09 c0       	rjmp	.+18     	; 0x21b4 <__floatsisf+0x12>

000021a2 <__floatsisf>:
    21a2:	97 fb       	bst	r25, 7
    21a4:	3e f4       	brtc	.+14     	; 0x21b4 <__floatsisf+0x12>
    21a6:	90 95       	com	r25
    21a8:	80 95       	com	r24
    21aa:	70 95       	com	r23
    21ac:	61 95       	neg	r22
    21ae:	7f 4f       	sbci	r23, 0xFF	; 255
    21b0:	8f 4f       	sbci	r24, 0xFF	; 255
    21b2:	9f 4f       	sbci	r25, 0xFF	; 255
    21b4:	99 23       	and	r25, r25
    21b6:	a9 f0       	breq	.+42     	; 0x21e2 <__floatsisf+0x40>
    21b8:	f9 2f       	mov	r31, r25
    21ba:	96 e9       	ldi	r25, 0x96	; 150
    21bc:	bb 27       	eor	r27, r27
    21be:	93 95       	inc	r25
    21c0:	f6 95       	lsr	r31
    21c2:	87 95       	ror	r24
    21c4:	77 95       	ror	r23
    21c6:	67 95       	ror	r22
    21c8:	b7 95       	ror	r27
    21ca:	f1 11       	cpse	r31, r1
    21cc:	f8 cf       	rjmp	.-16     	; 0x21be <__floatsisf+0x1c>
    21ce:	fa f4       	brpl	.+62     	; 0x220e <__floatsisf+0x6c>
    21d0:	bb 0f       	add	r27, r27
    21d2:	11 f4       	brne	.+4      	; 0x21d8 <__floatsisf+0x36>
    21d4:	60 ff       	sbrs	r22, 0
    21d6:	1b c0       	rjmp	.+54     	; 0x220e <__floatsisf+0x6c>
    21d8:	6f 5f       	subi	r22, 0xFF	; 255
    21da:	7f 4f       	sbci	r23, 0xFF	; 255
    21dc:	8f 4f       	sbci	r24, 0xFF	; 255
    21de:	9f 4f       	sbci	r25, 0xFF	; 255
    21e0:	16 c0       	rjmp	.+44     	; 0x220e <__floatsisf+0x6c>
    21e2:	88 23       	and	r24, r24
    21e4:	11 f0       	breq	.+4      	; 0x21ea <__floatsisf+0x48>
    21e6:	96 e9       	ldi	r25, 0x96	; 150
    21e8:	11 c0       	rjmp	.+34     	; 0x220c <__floatsisf+0x6a>
    21ea:	77 23       	and	r23, r23
    21ec:	21 f0       	breq	.+8      	; 0x21f6 <__floatsisf+0x54>
    21ee:	9e e8       	ldi	r25, 0x8E	; 142
    21f0:	87 2f       	mov	r24, r23
    21f2:	76 2f       	mov	r23, r22
    21f4:	05 c0       	rjmp	.+10     	; 0x2200 <__floatsisf+0x5e>
    21f6:	66 23       	and	r22, r22
    21f8:	71 f0       	breq	.+28     	; 0x2216 <__floatsisf+0x74>
    21fa:	96 e8       	ldi	r25, 0x86	; 134
    21fc:	86 2f       	mov	r24, r22
    21fe:	70 e0       	ldi	r23, 0x00	; 0
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	2a f0       	brmi	.+10     	; 0x220e <__floatsisf+0x6c>
    2204:	9a 95       	dec	r25
    2206:	66 0f       	add	r22, r22
    2208:	77 1f       	adc	r23, r23
    220a:	88 1f       	adc	r24, r24
    220c:	da f7       	brpl	.-10     	; 0x2204 <__floatsisf+0x62>
    220e:	88 0f       	add	r24, r24
    2210:	96 95       	lsr	r25
    2212:	87 95       	ror	r24
    2214:	97 f9       	bld	r25, 7
    2216:	08 95       	ret

00002218 <__fp_cmp>:
    2218:	99 0f       	add	r25, r25
    221a:	00 08       	sbc	r0, r0
    221c:	55 0f       	add	r21, r21
    221e:	aa 0b       	sbc	r26, r26
    2220:	e0 e8       	ldi	r30, 0x80	; 128
    2222:	fe ef       	ldi	r31, 0xFE	; 254
    2224:	16 16       	cp	r1, r22
    2226:	17 06       	cpc	r1, r23
    2228:	e8 07       	cpc	r30, r24
    222a:	f9 07       	cpc	r31, r25
    222c:	c0 f0       	brcs	.+48     	; 0x225e <__fp_cmp+0x46>
    222e:	12 16       	cp	r1, r18
    2230:	13 06       	cpc	r1, r19
    2232:	e4 07       	cpc	r30, r20
    2234:	f5 07       	cpc	r31, r21
    2236:	98 f0       	brcs	.+38     	; 0x225e <__fp_cmp+0x46>
    2238:	62 1b       	sub	r22, r18
    223a:	73 0b       	sbc	r23, r19
    223c:	84 0b       	sbc	r24, r20
    223e:	95 0b       	sbc	r25, r21
    2240:	39 f4       	brne	.+14     	; 0x2250 <__fp_cmp+0x38>
    2242:	0a 26       	eor	r0, r26
    2244:	61 f0       	breq	.+24     	; 0x225e <__fp_cmp+0x46>
    2246:	23 2b       	or	r18, r19
    2248:	24 2b       	or	r18, r20
    224a:	25 2b       	or	r18, r21
    224c:	21 f4       	brne	.+8      	; 0x2256 <__fp_cmp+0x3e>
    224e:	08 95       	ret
    2250:	0a 26       	eor	r0, r26
    2252:	09 f4       	brne	.+2      	; 0x2256 <__fp_cmp+0x3e>
    2254:	a1 40       	sbci	r26, 0x01	; 1
    2256:	a6 95       	lsr	r26
    2258:	8f ef       	ldi	r24, 0xFF	; 255
    225a:	81 1d       	adc	r24, r1
    225c:	81 1d       	adc	r24, r1
    225e:	08 95       	ret

00002260 <__fp_inf>:
    2260:	97 f9       	bld	r25, 7
    2262:	9f 67       	ori	r25, 0x7F	; 127
    2264:	80 e8       	ldi	r24, 0x80	; 128
    2266:	70 e0       	ldi	r23, 0x00	; 0
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	08 95       	ret

0000226c <__fp_nan>:
    226c:	9f ef       	ldi	r25, 0xFF	; 255
    226e:	80 ec       	ldi	r24, 0xC0	; 192
    2270:	08 95       	ret

00002272 <__fp_pscA>:
    2272:	00 24       	eor	r0, r0
    2274:	0a 94       	dec	r0
    2276:	16 16       	cp	r1, r22
    2278:	17 06       	cpc	r1, r23
    227a:	18 06       	cpc	r1, r24
    227c:	09 06       	cpc	r0, r25
    227e:	08 95       	ret

00002280 <__fp_pscB>:
    2280:	00 24       	eor	r0, r0
    2282:	0a 94       	dec	r0
    2284:	12 16       	cp	r1, r18
    2286:	13 06       	cpc	r1, r19
    2288:	14 06       	cpc	r1, r20
    228a:	05 06       	cpc	r0, r21
    228c:	08 95       	ret

0000228e <__fp_round>:
    228e:	09 2e       	mov	r0, r25
    2290:	03 94       	inc	r0
    2292:	00 0c       	add	r0, r0
    2294:	11 f4       	brne	.+4      	; 0x229a <__fp_round+0xc>
    2296:	88 23       	and	r24, r24
    2298:	52 f0       	brmi	.+20     	; 0x22ae <__fp_round+0x20>
    229a:	bb 0f       	add	r27, r27
    229c:	40 f4       	brcc	.+16     	; 0x22ae <__fp_round+0x20>
    229e:	bf 2b       	or	r27, r31
    22a0:	11 f4       	brne	.+4      	; 0x22a6 <__fp_round+0x18>
    22a2:	60 ff       	sbrs	r22, 0
    22a4:	04 c0       	rjmp	.+8      	; 0x22ae <__fp_round+0x20>
    22a6:	6f 5f       	subi	r22, 0xFF	; 255
    22a8:	7f 4f       	sbci	r23, 0xFF	; 255
    22aa:	8f 4f       	sbci	r24, 0xFF	; 255
    22ac:	9f 4f       	sbci	r25, 0xFF	; 255
    22ae:	08 95       	ret

000022b0 <__fp_split3>:
    22b0:	57 fd       	sbrc	r21, 7
    22b2:	90 58       	subi	r25, 0x80	; 128
    22b4:	44 0f       	add	r20, r20
    22b6:	55 1f       	adc	r21, r21
    22b8:	59 f0       	breq	.+22     	; 0x22d0 <__fp_splitA+0x10>
    22ba:	5f 3f       	cpi	r21, 0xFF	; 255
    22bc:	71 f0       	breq	.+28     	; 0x22da <__fp_splitA+0x1a>
    22be:	47 95       	ror	r20

000022c0 <__fp_splitA>:
    22c0:	88 0f       	add	r24, r24
    22c2:	97 fb       	bst	r25, 7
    22c4:	99 1f       	adc	r25, r25
    22c6:	61 f0       	breq	.+24     	; 0x22e0 <__fp_splitA+0x20>
    22c8:	9f 3f       	cpi	r25, 0xFF	; 255
    22ca:	79 f0       	breq	.+30     	; 0x22ea <__fp_splitA+0x2a>
    22cc:	87 95       	ror	r24
    22ce:	08 95       	ret
    22d0:	12 16       	cp	r1, r18
    22d2:	13 06       	cpc	r1, r19
    22d4:	14 06       	cpc	r1, r20
    22d6:	55 1f       	adc	r21, r21
    22d8:	f2 cf       	rjmp	.-28     	; 0x22be <__fp_split3+0xe>
    22da:	46 95       	lsr	r20
    22dc:	f1 df       	rcall	.-30     	; 0x22c0 <__fp_splitA>
    22de:	08 c0       	rjmp	.+16     	; 0x22f0 <__fp_splitA+0x30>
    22e0:	16 16       	cp	r1, r22
    22e2:	17 06       	cpc	r1, r23
    22e4:	18 06       	cpc	r1, r24
    22e6:	99 1f       	adc	r25, r25
    22e8:	f1 cf       	rjmp	.-30     	; 0x22cc <__fp_splitA+0xc>
    22ea:	86 95       	lsr	r24
    22ec:	71 05       	cpc	r23, r1
    22ee:	61 05       	cpc	r22, r1
    22f0:	08 94       	sec
    22f2:	08 95       	ret

000022f4 <__fp_zero>:
    22f4:	e8 94       	clt

000022f6 <__fp_szero>:
    22f6:	bb 27       	eor	r27, r27
    22f8:	66 27       	eor	r22, r22
    22fa:	77 27       	eor	r23, r23
    22fc:	cb 01       	movw	r24, r22
    22fe:	97 f9       	bld	r25, 7
    2300:	08 95       	ret

00002302 <__gesf2>:
    2302:	8a df       	rcall	.-236    	; 0x2218 <__fp_cmp>
    2304:	08 f4       	brcc	.+2      	; 0x2308 <__gesf2+0x6>
    2306:	8f ef       	ldi	r24, 0xFF	; 255
    2308:	08 95       	ret

0000230a <__mulsf3>:
    230a:	0b d0       	rcall	.+22     	; 0x2322 <__mulsf3x>
    230c:	c0 cf       	rjmp	.-128    	; 0x228e <__fp_round>
    230e:	b1 df       	rcall	.-158    	; 0x2272 <__fp_pscA>
    2310:	28 f0       	brcs	.+10     	; 0x231c <__mulsf3+0x12>
    2312:	b6 df       	rcall	.-148    	; 0x2280 <__fp_pscB>
    2314:	18 f0       	brcs	.+6      	; 0x231c <__mulsf3+0x12>
    2316:	95 23       	and	r25, r21
    2318:	09 f0       	breq	.+2      	; 0x231c <__mulsf3+0x12>
    231a:	a2 cf       	rjmp	.-188    	; 0x2260 <__fp_inf>
    231c:	a7 cf       	rjmp	.-178    	; 0x226c <__fp_nan>
    231e:	11 24       	eor	r1, r1
    2320:	ea cf       	rjmp	.-44     	; 0x22f6 <__fp_szero>

00002322 <__mulsf3x>:
    2322:	c6 df       	rcall	.-116    	; 0x22b0 <__fp_split3>
    2324:	a0 f3       	brcs	.-24     	; 0x230e <__mulsf3+0x4>

00002326 <__mulsf3_pse>:
    2326:	95 9f       	mul	r25, r21
    2328:	d1 f3       	breq	.-12     	; 0x231e <__mulsf3+0x14>
    232a:	95 0f       	add	r25, r21
    232c:	50 e0       	ldi	r21, 0x00	; 0
    232e:	55 1f       	adc	r21, r21
    2330:	62 9f       	mul	r22, r18
    2332:	f0 01       	movw	r30, r0
    2334:	72 9f       	mul	r23, r18
    2336:	bb 27       	eor	r27, r27
    2338:	f0 0d       	add	r31, r0
    233a:	b1 1d       	adc	r27, r1
    233c:	63 9f       	mul	r22, r19
    233e:	aa 27       	eor	r26, r26
    2340:	f0 0d       	add	r31, r0
    2342:	b1 1d       	adc	r27, r1
    2344:	aa 1f       	adc	r26, r26
    2346:	64 9f       	mul	r22, r20
    2348:	66 27       	eor	r22, r22
    234a:	b0 0d       	add	r27, r0
    234c:	a1 1d       	adc	r26, r1
    234e:	66 1f       	adc	r22, r22
    2350:	82 9f       	mul	r24, r18
    2352:	22 27       	eor	r18, r18
    2354:	b0 0d       	add	r27, r0
    2356:	a1 1d       	adc	r26, r1
    2358:	62 1f       	adc	r22, r18
    235a:	73 9f       	mul	r23, r19
    235c:	b0 0d       	add	r27, r0
    235e:	a1 1d       	adc	r26, r1
    2360:	62 1f       	adc	r22, r18
    2362:	83 9f       	mul	r24, r19
    2364:	a0 0d       	add	r26, r0
    2366:	61 1d       	adc	r22, r1
    2368:	22 1f       	adc	r18, r18
    236a:	74 9f       	mul	r23, r20
    236c:	33 27       	eor	r19, r19
    236e:	a0 0d       	add	r26, r0
    2370:	61 1d       	adc	r22, r1
    2372:	23 1f       	adc	r18, r19
    2374:	84 9f       	mul	r24, r20
    2376:	60 0d       	add	r22, r0
    2378:	21 1d       	adc	r18, r1
    237a:	82 2f       	mov	r24, r18
    237c:	76 2f       	mov	r23, r22
    237e:	6a 2f       	mov	r22, r26
    2380:	11 24       	eor	r1, r1
    2382:	9f 57       	subi	r25, 0x7F	; 127
    2384:	50 40       	sbci	r21, 0x00	; 0
    2386:	8a f0       	brmi	.+34     	; 0x23aa <__mulsf3_pse+0x84>
    2388:	e1 f0       	breq	.+56     	; 0x23c2 <__mulsf3_pse+0x9c>
    238a:	88 23       	and	r24, r24
    238c:	4a f0       	brmi	.+18     	; 0x23a0 <__mulsf3_pse+0x7a>
    238e:	ee 0f       	add	r30, r30
    2390:	ff 1f       	adc	r31, r31
    2392:	bb 1f       	adc	r27, r27
    2394:	66 1f       	adc	r22, r22
    2396:	77 1f       	adc	r23, r23
    2398:	88 1f       	adc	r24, r24
    239a:	91 50       	subi	r25, 0x01	; 1
    239c:	50 40       	sbci	r21, 0x00	; 0
    239e:	a9 f7       	brne	.-22     	; 0x238a <__mulsf3_pse+0x64>
    23a0:	9e 3f       	cpi	r25, 0xFE	; 254
    23a2:	51 05       	cpc	r21, r1
    23a4:	70 f0       	brcs	.+28     	; 0x23c2 <__mulsf3_pse+0x9c>
    23a6:	5c cf       	rjmp	.-328    	; 0x2260 <__fp_inf>
    23a8:	a6 cf       	rjmp	.-180    	; 0x22f6 <__fp_szero>
    23aa:	5f 3f       	cpi	r21, 0xFF	; 255
    23ac:	ec f3       	brlt	.-6      	; 0x23a8 <__mulsf3_pse+0x82>
    23ae:	98 3e       	cpi	r25, 0xE8	; 232
    23b0:	dc f3       	brlt	.-10     	; 0x23a8 <__mulsf3_pse+0x82>
    23b2:	86 95       	lsr	r24
    23b4:	77 95       	ror	r23
    23b6:	67 95       	ror	r22
    23b8:	b7 95       	ror	r27
    23ba:	f7 95       	ror	r31
    23bc:	e7 95       	ror	r30
    23be:	9f 5f       	subi	r25, 0xFF	; 255
    23c0:	c1 f7       	brne	.-16     	; 0x23b2 <__mulsf3_pse+0x8c>
    23c2:	fe 2b       	or	r31, r30
    23c4:	88 0f       	add	r24, r24
    23c6:	91 1d       	adc	r25, r1
    23c8:	96 95       	lsr	r25
    23ca:	87 95       	ror	r24
    23cc:	97 f9       	bld	r25, 7
    23ce:	08 95       	ret
    23d0:	11 f4       	brne	.+4      	; 0x23d6 <__mulsf3_pse+0xb0>
    23d2:	0e f4       	brtc	.+2      	; 0x23d6 <__mulsf3_pse+0xb0>
    23d4:	4b cf       	rjmp	.-362    	; 0x226c <__fp_nan>
    23d6:	41 c0       	rjmp	.+130    	; 0x245a <__fp_mpack>

000023d8 <sqrt>:
    23d8:	73 df       	rcall	.-282    	; 0x22c0 <__fp_splitA>
    23da:	d0 f3       	brcs	.-12     	; 0x23d0 <__mulsf3_pse+0xaa>
    23dc:	99 23       	and	r25, r25
    23de:	d9 f3       	breq	.-10     	; 0x23d6 <__mulsf3_pse+0xb0>
    23e0:	ce f3       	brts	.-14     	; 0x23d4 <__mulsf3_pse+0xae>
    23e2:	9f 57       	subi	r25, 0x7F	; 127
    23e4:	55 0b       	sbc	r21, r21
    23e6:	87 ff       	sbrs	r24, 7
    23e8:	46 d0       	rcall	.+140    	; 0x2476 <__fp_norm2>
    23ea:	00 24       	eor	r0, r0
    23ec:	a0 e6       	ldi	r26, 0x60	; 96
    23ee:	40 ea       	ldi	r20, 0xA0	; 160
    23f0:	90 01       	movw	r18, r0
    23f2:	80 58       	subi	r24, 0x80	; 128
    23f4:	56 95       	lsr	r21
    23f6:	97 95       	ror	r25
    23f8:	28 f4       	brcc	.+10     	; 0x2404 <sqrt+0x2c>
    23fa:	80 5c       	subi	r24, 0xC0	; 192
    23fc:	66 0f       	add	r22, r22
    23fe:	77 1f       	adc	r23, r23
    2400:	88 1f       	adc	r24, r24
    2402:	20 f0       	brcs	.+8      	; 0x240c <sqrt+0x34>
    2404:	26 17       	cp	r18, r22
    2406:	37 07       	cpc	r19, r23
    2408:	48 07       	cpc	r20, r24
    240a:	30 f4       	brcc	.+12     	; 0x2418 <sqrt+0x40>
    240c:	62 1b       	sub	r22, r18
    240e:	73 0b       	sbc	r23, r19
    2410:	84 0b       	sbc	r24, r20
    2412:	20 29       	or	r18, r0
    2414:	31 29       	or	r19, r1
    2416:	4a 2b       	or	r20, r26
    2418:	a6 95       	lsr	r26
    241a:	17 94       	ror	r1
    241c:	07 94       	ror	r0
    241e:	20 25       	eor	r18, r0
    2420:	31 25       	eor	r19, r1
    2422:	4a 27       	eor	r20, r26
    2424:	58 f7       	brcc	.-42     	; 0x23fc <sqrt+0x24>
    2426:	66 0f       	add	r22, r22
    2428:	77 1f       	adc	r23, r23
    242a:	88 1f       	adc	r24, r24
    242c:	20 f0       	brcs	.+8      	; 0x2436 <sqrt+0x5e>
    242e:	26 17       	cp	r18, r22
    2430:	37 07       	cpc	r19, r23
    2432:	48 07       	cpc	r20, r24
    2434:	30 f4       	brcc	.+12     	; 0x2442 <sqrt+0x6a>
    2436:	62 0b       	sbc	r22, r18
    2438:	73 0b       	sbc	r23, r19
    243a:	84 0b       	sbc	r24, r20
    243c:	20 0d       	add	r18, r0
    243e:	31 1d       	adc	r19, r1
    2440:	41 1d       	adc	r20, r1
    2442:	a0 95       	com	r26
    2444:	81 f7       	brne	.-32     	; 0x2426 <sqrt+0x4e>
    2446:	b9 01       	movw	r22, r18
    2448:	84 2f       	mov	r24, r20
    244a:	91 58       	subi	r25, 0x81	; 129
    244c:	88 0f       	add	r24, r24
    244e:	96 95       	lsr	r25
    2450:	87 95       	ror	r24
    2452:	08 95       	ret

00002454 <square>:
    2454:	9b 01       	movw	r18, r22
    2456:	ac 01       	movw	r20, r24
    2458:	58 cf       	rjmp	.-336    	; 0x230a <__mulsf3>

0000245a <__fp_mpack>:
    245a:	9f 3f       	cpi	r25, 0xFF	; 255
    245c:	31 f0       	breq	.+12     	; 0x246a <__fp_mpack_finite+0xc>

0000245e <__fp_mpack_finite>:
    245e:	91 50       	subi	r25, 0x01	; 1
    2460:	20 f4       	brcc	.+8      	; 0x246a <__fp_mpack_finite+0xc>
    2462:	87 95       	ror	r24
    2464:	77 95       	ror	r23
    2466:	67 95       	ror	r22
    2468:	b7 95       	ror	r27
    246a:	88 0f       	add	r24, r24
    246c:	91 1d       	adc	r25, r1
    246e:	96 95       	lsr	r25
    2470:	87 95       	ror	r24
    2472:	97 f9       	bld	r25, 7
    2474:	08 95       	ret

00002476 <__fp_norm2>:
    2476:	91 50       	subi	r25, 0x01	; 1
    2478:	50 40       	sbci	r21, 0x00	; 0
    247a:	66 0f       	add	r22, r22
    247c:	77 1f       	adc	r23, r23
    247e:	88 1f       	adc	r24, r24
    2480:	d2 f7       	brpl	.-12     	; 0x2476 <__fp_norm2>
    2482:	08 95       	ret

00002484 <__udivmodsi4>:
    2484:	a1 e2       	ldi	r26, 0x21	; 33
    2486:	1a 2e       	mov	r1, r26
    2488:	aa 1b       	sub	r26, r26
    248a:	bb 1b       	sub	r27, r27
    248c:	fd 01       	movw	r30, r26
    248e:	0d c0       	rjmp	.+26     	; 0x24aa <__udivmodsi4_ep>

00002490 <__udivmodsi4_loop>:
    2490:	aa 1f       	adc	r26, r26
    2492:	bb 1f       	adc	r27, r27
    2494:	ee 1f       	adc	r30, r30
    2496:	ff 1f       	adc	r31, r31
    2498:	a2 17       	cp	r26, r18
    249a:	b3 07       	cpc	r27, r19
    249c:	e4 07       	cpc	r30, r20
    249e:	f5 07       	cpc	r31, r21
    24a0:	20 f0       	brcs	.+8      	; 0x24aa <__udivmodsi4_ep>
    24a2:	a2 1b       	sub	r26, r18
    24a4:	b3 0b       	sbc	r27, r19
    24a6:	e4 0b       	sbc	r30, r20
    24a8:	f5 0b       	sbc	r31, r21

000024aa <__udivmodsi4_ep>:
    24aa:	66 1f       	adc	r22, r22
    24ac:	77 1f       	adc	r23, r23
    24ae:	88 1f       	adc	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	1a 94       	dec	r1
    24b4:	69 f7       	brne	.-38     	; 0x2490 <__udivmodsi4_loop>
    24b6:	60 95       	com	r22
    24b8:	70 95       	com	r23
    24ba:	80 95       	com	r24
    24bc:	90 95       	com	r25
    24be:	9b 01       	movw	r18, r22
    24c0:	ac 01       	movw	r20, r24
    24c2:	bd 01       	movw	r22, r26
    24c4:	cf 01       	movw	r24, r30
    24c6:	08 95       	ret

000024c8 <memset>:
    24c8:	dc 01       	movw	r26, r24
    24ca:	01 c0       	rjmp	.+2      	; 0x24ce <memset+0x6>
    24cc:	6d 93       	st	X+, r22
    24ce:	41 50       	subi	r20, 0x01	; 1
    24d0:	50 40       	sbci	r21, 0x00	; 0
    24d2:	e0 f7       	brcc	.-8      	; 0x24cc <memset+0x4>
    24d4:	08 95       	ret

000024d6 <_exit>:
    24d6:	f8 94       	cli

000024d8 <__stop_program>:
    24d8:	ff cf       	rjmp	.-2      	; 0x24d8 <__stop_program>
