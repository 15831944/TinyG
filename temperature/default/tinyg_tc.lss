
tinyg_tc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000243a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000002dd  00800100  00800100  000024ae  2**0
                  ALLOC
  2 .debug_aranges 000000e0  00000000  00000000  000024ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000053c  00000000  00000000  0000258e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001d31  00000000  00000000  00002aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000802  00000000  00000000  000047fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001268  00000000  00000000  00004ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000440  00000000  00000000  00006268  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000aee  00000000  00000000  000066a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 84 00 	jmp	0x108	; 0x108 <__ctors_end>
       4:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
       8:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
       c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      10:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      14:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      18:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      1c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      20:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      24:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      28:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      2c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      30:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      34:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      38:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      3c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      40:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__vector_16>
      44:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__vector_17>
      48:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__vector_18>
      4c:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__vector_19>
      50:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      54:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      58:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      5c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      60:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      64:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>

00000068 <initialized>:
      68:	0a 44 65 76 69 63 65 20 49 6e 69 74 69 61 6c 69     .Device Initiali
      78:	7a 65 64 0a 00                                      zed..

0000007d <msg_scode0>:
      7d:	49 64 6c 65 00                                      Idle.

00000082 <msg_scode1>:
      82:	54 61 6b 69 6e 67 20 52 65 61 64 69 6e 67 00        Taking Reading.

00000091 <msg_scode2>:
      91:	42 61 64 20 52 65 61 64 69 6e 67 00                 Bad Reading.

0000009d <msg_scode3>:
      9d:	44 69 73 63 6f 6e 6e 65 63 74 65 64 00              Disconnected.

000000aa <msg_scode4>:
      aa:	4e 6f 20 50 6f 77 65 72 00                          No Power.

000000b3 <msg_scode>:
      b3:	7d 00 82 00 91 00 9d 00 aa 00                       }.........

000000bd <__c.1905>:
      bd:	0a 44 65 76 69 63 65 20 49 6e 69 74 69 61 6c 69     .Device Initiali
      cd:	7a 65 64 0a 00                                      zed..

000000d2 <__c.1917>:
      d2:	20 20 00                                              .

000000d5 <__c.1915>:
      d5:	20 50 57 4d 3a 20 00                                 PWM: .

000000dc <__c.1913>:
      dc:	20 73 5b 30 5d 3a 20 00                              s[0]: .

000000e4 <__c.1911>:
      e4:	20 53 74 64 44 65 76 3a 20 00                        StdDev: .

000000ee <__c.1909>:
      ee:	54 65 6d 70 3a 20 00                                Temp: .

000000f5 <__c.1929>:
      f5:	0a 00                                               ..

000000f7 <__c.1927>:
      f7:	20 20 50 49 44 3a 20 00                               PID: .

000000ff <__c.1925>:
      ff:	54 65 6d 70 3a 20 00                                Temp: .

00000106 <__c.1938>:
     106:	0a 00                                               ..

00000108 <__ctors_end>:
     108:	11 24       	eor	r1, r1
     10a:	1f be       	out	0x3f, r1	; 63
     10c:	cf ef       	ldi	r28, 0xFF	; 255
     10e:	d8 e0       	ldi	r29, 0x08	; 8
     110:	de bf       	out	0x3e, r29	; 62
     112:	cd bf       	out	0x3d, r28	; 61

00000114 <__do_clear_bss>:
     114:	13 e0       	ldi	r17, 0x03	; 3
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	01 c0       	rjmp	.+2      	; 0x11e <.do_clear_bss_start>

0000011c <.do_clear_bss_loop>:
     11c:	1d 92       	st	X+, r1

0000011e <.do_clear_bss_start>:
     11e:	ad 3d       	cpi	r26, 0xDD	; 221
     120:	b1 07       	cpc	r27, r17
     122:	e1 f7       	brne	.-8      	; 0x11c <.do_clear_bss_loop>
     124:	0e 94 98 00 	call	0x130	; 0x130 <main>
     128:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <_exit>

0000012c <__bad_interrupt>:
     12c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000130 <main>:
 *
 *	Device and Kinen initialization
 *	Main loop handler
 */
int main(void)
{
     130:	df 93       	push	r29
     132:	cf 93       	push	r28
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
	cli();						// initializations
     138:	f8 94       	cli
	kinen_init();				// do this first
     13a:	0e 94 b6 09 	call	0x136c	; 0x136c <kinen_init>
	device_init();				// handles all the low-level device peripheral inits
     13e:	0e 94 b5 00 	call	0x16a	; 0x16a <device_init>
	serial_init(BAUD_RATE);
     142:	60 e8       	ldi	r22, 0x80	; 128
     144:	75 e2       	ldi	r23, 0x25	; 37
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <serial_init>
	heater_init();				// setup the heater module and subordinate functions
     14e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <heater_init>
	sei(); 						// enable interrupts
     152:	78 94       	sei

	UNIT_TESTS;					// uncomment __UNIT_TEST_TC to enable unit tests

	heater_on(140);				// turn heater on for testing
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	8c e0       	ldi	r24, 0x0C	; 12
     15a:	93 e4       	ldi	r25, 0x43	; 67
     15c:	0e 94 26 01 	call	0x24c	; 0x24c <heater_on>
	rpt_initialized();			// send initalization string
     160:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <rpt_initialized>

	while (true) {				// go to the controller loop and never return
		_controller();
     164:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_controller>
     168:	fd cf       	rjmp	.-6      	; 0x164 <main+0x34>

0000016a <device_init>:

/*
 * Device Init 
 */
void device_init(void)
{
     16a:	df 93       	push	r29
     16c:	cf 93       	push	r28
     16e:	cd b7       	in	r28, 0x3d	; 61
     170:	de b7       	in	r29, 0x3e	; 62
	DDRB = PORTB_DIR;			// initialize all ports for proper IO function
     172:	e4 e2       	ldi	r30, 0x24	; 36
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 e1       	ldi	r24, 0x10	; 16
     178:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
     17a:	e7 e2       	ldi	r30, 0x27	; 39
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
     180:	ea e2       	ldi	r30, 0x2A	; 42
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	8c e0       	ldi	r24, 0x0C	; 12
     186:	80 83       	st	Z, r24

	adc_init(ADC_CHANNEL);
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <adc_init>
	pwm_init();
     18e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <pwm_init>
	tick_init();
     192:	0e 94 b4 08 	call	0x1168	; 0x1168 <tick_init>
	led_off();					// put off the red light [~Sting, 1978]
     196:	0e 94 4a 09 	call	0x1294	; 0x1294 <led_off>
}
     19a:	cf 91       	pop	r28
     19c:	df 91       	pop	r29
     19e:	08 95       	ret

000001a0 <_controller>:
 *	start of the list. For any other status code exceution continues down the list
 */

#define	DISPATCH(func) if (func == SC_EAGAIN) return; 
static void _controller()
{
     1a0:	df 93       	push	r29
     1a2:	cf 93       	push	r28
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
	DISPATCH(kinen_callback());		// intercept low-level communication events
     1a8:	0e 94 bf 09 	call	0x137e	; 0x137e <kinen_callback>
     1ac:	82 30       	cpi	r24, 0x02	; 2
     1ae:	11 f0       	breq	.+4      	; 0x1b4 <_controller+0x14>
	DISPATCH(tick_callback());		// regular interval timer clock handler (ticks)
     1b0:	0e 94 ed 08 	call	0x11da	; 0x11da <tick_callback>
}
     1b4:	cf 91       	pop	r28
     1b6:	df 91       	pop	r29
     1b8:	08 95       	ret

000001ba <heater_init>:
 * heater_off()	 - turn heater off	
 * heater_callback() - 100ms timed loop for heater control
 */

void heater_init()
{ 
     1ba:	df 93       	push	r29
     1bc:	cf 93       	push	r28
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
	// initialize heater, start PID and PWM
	// note: PWM and ADC are initialized as part of the device init
	memset(&heater, 0, sizeof(Heater));
     1c2:	87 e0       	ldi	r24, 0x07	; 7
     1c4:	91 e0       	ldi	r25, 0x01	; 1
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	41 e2       	ldi	r20, 0x21	; 33
     1cc:	50 e0       	ldi	r21, 0x00	; 0
     1ce:	0e 94 14 12 	call	0x2428	; 0x2428 <memset>
	heater.ambient_timeout = HEATER_AMBIENT_TIMEOUT;
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	a4 eb       	ldi	r26, 0xB4	; 180
     1d8:	b2 e4       	ldi	r27, 0x42	; 66
     1da:	80 93 18 01 	sts	0x0118, r24
     1de:	90 93 19 01 	sts	0x0119, r25
     1e2:	a0 93 1a 01 	sts	0x011A, r26
     1e6:	b0 93 1b 01 	sts	0x011B, r27
	heater.regulation_timeout = HEATER_REGULATION_TIMEOUT;
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	a6 e9       	ldi	r26, 0x96	; 150
     1f0:	b3 e4       	ldi	r27, 0x43	; 67
     1f2:	80 93 1c 01 	sts	0x011C, r24
     1f6:	90 93 1d 01 	sts	0x011D, r25
     1fa:	a0 93 1e 01 	sts	0x011E, r26
     1fe:	b0 93 1f 01 	sts	0x011F, r27
	heater.ambient_temperature = HEATER_AMBIENT_TEMPERATURE;
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	a0 e2       	ldi	r26, 0x20	; 32
     208:	b2 e4       	ldi	r27, 0x42	; 66
     20a:	80 93 20 01 	sts	0x0120, r24
     20e:	90 93 21 01 	sts	0x0121, r25
     212:	a0 93 22 01 	sts	0x0122, r26
     216:	b0 93 23 01 	sts	0x0123, r27
	heater.overheat_temperature = HEATER_OVERHEAT_TEMPERATURE;
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	a6 e9       	ldi	r26, 0x96	; 150
     220:	b3 e4       	ldi	r27, 0x43	; 67
     222:	80 93 24 01 	sts	0x0124, r24
     226:	90 93 25 01 	sts	0x0125, r25
     22a:	a0 93 26 01 	sts	0x0126, r26
     22e:	b0 93 27 01 	sts	0x0127, r27
	heater.bad_reading_count = HEATER_BAD_READING_COUNT;
     232:	8a e0       	ldi	r24, 0x0A	; 10
     234:	80 93 0a 01 	sts	0x010A, r24
	heater.regulation_count = HEATER_REGULATION_COUNT;
     238:	8a e0       	ldi	r24, 0x0A	; 10
     23a:	80 93 0b 01 	sts	0x010B, r24
	sensor_init();					// setup the temperature sensor module
     23e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <sensor_init>
	pid_init();
     242:	0e 94 87 02 	call	0x50e	; 0x50e <pid_init>
}
     246:	cf 91       	pop	r28
     248:	df 91       	pop	r29
     24a:	08 95       	ret

0000024c <heater_on>:

void heater_on(double setpoint)
{
     24c:	df 93       	push	r29
     24e:	cf 93       	push	r28
     250:	00 d0       	rcall	.+0      	; 0x252 <heater_on+0x6>
     252:	00 d0       	rcall	.+0      	; 0x254 <heater_on+0x8>
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	69 83       	std	Y+1, r22	; 0x01
     25a:	7a 83       	std	Y+2, r23	; 0x02
     25c:	8b 83       	std	Y+3, r24	; 0x03
     25e:	9c 83       	std	Y+4, r25	; 0x04
	// no action if heater is already on
	if ((heater.state == HEATER_HEATING) || (heater.state == HEATER_REGULATED)) {
     260:	80 91 07 01 	lds	r24, 0x0107
     264:	82 30       	cpi	r24, 0x02	; 2
     266:	19 f1       	breq	.+70     	; 0x2ae <heater_on+0x62>
     268:	80 91 07 01 	lds	r24, 0x0107
     26c:	83 30       	cpi	r24, 0x03	; 3
     26e:	f9 f0       	breq	.+62     	; 0x2ae <heater_on+0x62>
		return;
	}
	// turn on lower level functions
	sensor_on();					// enable the sensor
     270:	0e 94 26 05 	call	0xa4c	; 0xa4c <sensor_on>
	sensor_start_reading();			// now start a reading
     274:	0e 94 39 05 	call	0xa72	; 0xa72 <sensor_start_reading>
	pid_reset();
     278:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <pid_reset>
	pwm_on(PWM_FREQUENCY, 0);		// duty cycle will be set by PID loop
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	8a e7       	ldi	r24, 0x7A	; 122
     282:	94 e4       	ldi	r25, 0x44	; 68
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	0e 94 81 07 	call	0xf02	; 0xf02 <pwm_on>
	heater.setpoint = setpoint;
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	9a 81       	ldd	r25, Y+2	; 0x02
     294:	ab 81       	ldd	r26, Y+3	; 0x03
     296:	bc 81       	ldd	r27, Y+4	; 0x04
     298:	80 93 10 01 	sts	0x0110, r24
     29c:	90 93 11 01 	sts	0x0111, r25
     2a0:	a0 93 12 01 	sts	0x0112, r26
     2a4:	b0 93 13 01 	sts	0x0113, r27
	heater.state = HEATER_HEATING;
     2a8:	82 e0       	ldi	r24, 0x02	; 2
     2aa:	80 93 07 01 	sts	0x0107, r24
}
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	cf 91       	pop	r28
     2b8:	df 91       	pop	r29
     2ba:	08 95       	ret

000002bc <heater_off>:

void heater_off(uint8_t state, uint8_t code) 
{
     2bc:	df 93       	push	r29
     2be:	cf 93       	push	r28
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <heater_off+0x6>
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
     2c6:	89 83       	std	Y+1, r24	; 0x01
     2c8:	6a 83       	std	Y+2, r22	; 0x02
	pwm_off();						// stop sending current to the heater
     2ca:	0e 94 ae 07 	call	0xf5c	; 0xf5c <pwm_off>
	sensor_off();					// stop taking readings
     2ce:	0e 94 30 05 	call	0xa60	; 0xa60 <sensor_off>
	heater.state = state;
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	80 93 07 01 	sts	0x0107, r24
	heater.code = code;
     2d8:	8a 81       	ldd	r24, Y+2	; 0x02
     2da:	80 93 08 01 	sts	0x0108, r24
	led_off();
     2de:	0e 94 4a 09 	call	0x1294	; 0x1294 <led_off>
}
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	cf 91       	pop	r28
     2e8:	df 91       	pop	r29
     2ea:	08 95       	ret

000002ec <heater_callback>:

void heater_callback()
{
     2ec:	df 93       	push	r29
     2ee:	cf 93       	push	r28
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <heater_callback+0x6>
     2f2:	00 d0       	rcall	.+0      	; 0x2f4 <heater_callback+0x8>
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
	// catch the no-op cases
	if ((heater.state == HEATER_OFF) || (heater.state == HEATER_SHUTDOWN)) { return;}
     2f8:	80 91 07 01 	lds	r24, 0x0107
     2fc:	88 23       	and	r24, r24
     2fe:	09 f4       	brne	.+2      	; 0x302 <heater_callback+0x16>
     300:	ff c0       	rjmp	.+510    	; 0x500 <heater_callback+0x214>
     302:	80 91 07 01 	lds	r24, 0x0107
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	09 f4       	brne	.+2      	; 0x30c <heater_callback+0x20>
     30a:	fa c0       	rjmp	.+500    	; 0x500 <heater_callback+0x214>

	rpt_readout();
     30c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <rpt_readout>

	// get current temp or an error if there is no temperature reading
	if ((heater.temperature = sensor_get_temperature()) < ABSOLUTE_ZERO) {
     310:	0e 94 57 05 	call	0xaae	; 0xaae <sensor_get_temperature>
     314:	dc 01       	movw	r26, r24
     316:	cb 01       	movw	r24, r22
     318:	80 93 0c 01 	sts	0x010C, r24
     31c:	90 93 0d 01 	sts	0x010D, r25
     320:	a0 93 0e 01 	sts	0x010E, r26
     324:	b0 93 0f 01 	sts	0x010F, r27
     328:	80 91 0c 01 	lds	r24, 0x010C
     32c:	90 91 0d 01 	lds	r25, 0x010D
     330:	a0 91 0e 01 	lds	r26, 0x010E
     334:	b0 91 0f 01 	lds	r27, 0x010F
     338:	bc 01       	movw	r22, r24
     33a:	cd 01       	movw	r24, r26
     33c:	23 e3       	ldi	r18, 0x33	; 51
     33e:	33 e9       	ldi	r19, 0x93	; 147
     340:	48 e8       	ldi	r20, 0x88	; 136
     342:	53 ec       	ldi	r21, 0xC3	; 195
     344:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__cmpsf2>
     348:	88 23       	and	r24, r24
     34a:	0c f4       	brge	.+2      	; 0x34e <heater_callback+0x62>
     34c:	d9 c0       	rjmp	.+434    	; 0x500 <heater_callback+0x214>
		return;
	}
	if (heater.temperature > heater.overheat_temperature) {
     34e:	80 91 0c 01 	lds	r24, 0x010C
     352:	90 91 0d 01 	lds	r25, 0x010D
     356:	a0 91 0e 01 	lds	r26, 0x010E
     35a:	b0 91 0f 01 	lds	r27, 0x010F
     35e:	20 91 24 01 	lds	r18, 0x0124
     362:	30 91 25 01 	lds	r19, 0x0125
     366:	40 91 26 01 	lds	r20, 0x0126
     36a:	50 91 27 01 	lds	r21, 0x0127
     36e:	bc 01       	movw	r22, r24
     370:	cd 01       	movw	r24, r26
     372:	0e 94 31 11 	call	0x2262	; 0x2262 <__gesf2>
     376:	18 16       	cp	r1, r24
     378:	2c f4       	brge	.+10     	; 0x384 <heater_callback+0x98>
		heater_off(HEATER_SHUTDOWN, HEATER_OVERHEATED);
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	63 e0       	ldi	r22, 0x03	; 3
     37e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <heater_off>
     382:	be c0       	rjmp	.+380    	; 0x500 <heater_callback+0x214>
		return;
	}
	sensor_start_reading();		// start next reading
     384:	0e 94 39 05 	call	0xa72	; 0xa72 <sensor_start_reading>

	// calculate the next PWM level via the PID
	double duty_cycle = pid_calculate(heater.setpoint, heater.temperature);
     388:	80 91 10 01 	lds	r24, 0x0110
     38c:	90 91 11 01 	lds	r25, 0x0111
     390:	a0 91 12 01 	lds	r26, 0x0112
     394:	b0 91 13 01 	lds	r27, 0x0113
     398:	20 91 0c 01 	lds	r18, 0x010C
     39c:	30 91 0d 01 	lds	r19, 0x010D
     3a0:	40 91 0e 01 	lds	r20, 0x010E
     3a4:	50 91 0f 01 	lds	r21, 0x010F
     3a8:	bc 01       	movw	r22, r24
     3aa:	cd 01       	movw	r24, r26
     3ac:	0e 94 0c 03 	call	0x618	; 0x618 <pid_calculate>
     3b0:	dc 01       	movw	r26, r24
     3b2:	cb 01       	movw	r24, r22
     3b4:	89 83       	std	Y+1, r24	; 0x01
     3b6:	9a 83       	std	Y+2, r25	; 0x02
     3b8:	ab 83       	std	Y+3, r26	; 0x03
     3ba:	bc 83       	std	Y+4, r27	; 0x04
	pwm_set_duty(duty_cycle);
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	9a 81       	ldd	r25, Y+2	; 0x02
     3c0:	ab 81       	ldd	r26, Y+3	; 0x03
     3c2:	bc 81       	ldd	r27, Y+4	; 0x04
     3c4:	bc 01       	movw	r22, r24
     3c6:	cd 01       	movw	r24, r26
     3c8:	0e 94 29 08 	call	0x1052	; 0x1052 <pwm_set_duty>


	// handle HEATER exceptions
	if (heater.state == HEATER_HEATING) {
     3cc:	80 91 07 01 	lds	r24, 0x0107
     3d0:	82 30       	cpi	r24, 0x02	; 2
     3d2:	09 f0       	breq	.+2      	; 0x3d6 <heater_callback+0xea>
     3d4:	7c c0       	rjmp	.+248    	; 0x4ce <heater_callback+0x1e2>
		heater.regulation_timer += HEATER_TICK_SECONDS;
     3d6:	80 91 14 01 	lds	r24, 0x0114
     3da:	90 91 15 01 	lds	r25, 0x0115
     3de:	a0 91 16 01 	lds	r26, 0x0116
     3e2:	b0 91 17 01 	lds	r27, 0x0117
     3e6:	bc 01       	movw	r22, r24
     3e8:	cd 01       	movw	r24, r26
     3ea:	2d ec       	ldi	r18, 0xCD	; 205
     3ec:	3c ec       	ldi	r19, 0xCC	; 204
     3ee:	4c ec       	ldi	r20, 0xCC	; 204
     3f0:	5d e3       	ldi	r21, 0x3D	; 61
     3f2:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__addsf3>
     3f6:	dc 01       	movw	r26, r24
     3f8:	cb 01       	movw	r24, r22
     3fa:	80 93 14 01 	sts	0x0114, r24
     3fe:	90 93 15 01 	sts	0x0115, r25
     402:	a0 93 16 01 	sts	0x0116, r26
     406:	b0 93 17 01 	sts	0x0117, r27

		if ((heater.temperature < heater.ambient_temperature) &&
     40a:	80 91 0c 01 	lds	r24, 0x010C
     40e:	90 91 0d 01 	lds	r25, 0x010D
     412:	a0 91 0e 01 	lds	r26, 0x010E
     416:	b0 91 0f 01 	lds	r27, 0x010F
     41a:	20 91 20 01 	lds	r18, 0x0120
     41e:	30 91 21 01 	lds	r19, 0x0121
     422:	40 91 22 01 	lds	r20, 0x0122
     426:	50 91 23 01 	lds	r21, 0x0123
     42a:	bc 01       	movw	r22, r24
     42c:	cd 01       	movw	r24, r26
     42e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__cmpsf2>
     432:	88 23       	and	r24, r24
     434:	dc f4       	brge	.+54     	; 0x46c <heater_callback+0x180>
     436:	80 91 14 01 	lds	r24, 0x0114
     43a:	90 91 15 01 	lds	r25, 0x0115
     43e:	a0 91 16 01 	lds	r26, 0x0116
     442:	b0 91 17 01 	lds	r27, 0x0117
     446:	20 91 18 01 	lds	r18, 0x0118
     44a:	30 91 19 01 	lds	r19, 0x0119
     44e:	40 91 1a 01 	lds	r20, 0x011A
     452:	50 91 1b 01 	lds	r21, 0x011B
     456:	bc 01       	movw	r22, r24
     458:	cd 01       	movw	r24, r26
     45a:	0e 94 31 11 	call	0x2262	; 0x2262 <__gesf2>
     45e:	18 16       	cp	r1, r24
     460:	2c f4       	brge	.+10     	; 0x46c <heater_callback+0x180>
			(heater.regulation_timer > heater.ambient_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_AMBIENT_TIMED_OUT);
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	0e 94 5e 01 	call	0x2bc	; 0x2bc <heater_off>
     46a:	4a c0       	rjmp	.+148    	; 0x500 <heater_callback+0x214>
			return;
		}
		if ((heater.temperature < heater.setpoint) &&
     46c:	80 91 0c 01 	lds	r24, 0x010C
     470:	90 91 0d 01 	lds	r25, 0x010D
     474:	a0 91 0e 01 	lds	r26, 0x010E
     478:	b0 91 0f 01 	lds	r27, 0x010F
     47c:	20 91 10 01 	lds	r18, 0x0110
     480:	30 91 11 01 	lds	r19, 0x0111
     484:	40 91 12 01 	lds	r20, 0x0112
     488:	50 91 13 01 	lds	r21, 0x0113
     48c:	bc 01       	movw	r22, r24
     48e:	cd 01       	movw	r24, r26
     490:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__cmpsf2>
     494:	88 23       	and	r24, r24
     496:	dc f4       	brge	.+54     	; 0x4ce <heater_callback+0x1e2>
     498:	80 91 14 01 	lds	r24, 0x0114
     49c:	90 91 15 01 	lds	r25, 0x0115
     4a0:	a0 91 16 01 	lds	r26, 0x0116
     4a4:	b0 91 17 01 	lds	r27, 0x0117
     4a8:	20 91 1c 01 	lds	r18, 0x011C
     4ac:	30 91 1d 01 	lds	r19, 0x011D
     4b0:	40 91 1e 01 	lds	r20, 0x011E
     4b4:	50 91 1f 01 	lds	r21, 0x011F
     4b8:	bc 01       	movw	r22, r24
     4ba:	cd 01       	movw	r24, r26
     4bc:	0e 94 31 11 	call	0x2262	; 0x2262 <__gesf2>
     4c0:	18 16       	cp	r1, r24
     4c2:	2c f4       	brge	.+10     	; 0x4ce <heater_callback+0x1e2>
			(heater.regulation_timer > heater.regulation_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_REGULATION_TIMED_OUT);
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	62 e0       	ldi	r22, 0x02	; 2
     4c8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <heater_off>
     4cc:	19 c0       	rjmp	.+50     	; 0x500 <heater_callback+0x214>
			return;
		}
	}
	// manage heater state and LED indicator
	if (heater.regulation_count > 0) {
     4ce:	80 91 0b 01 	lds	r24, 0x010B
     4d2:	88 23       	and	r24, r24
     4d4:	61 f0       	breq	.+24     	; 0x4ee <heater_callback+0x202>
		if (--heater.regulation_count <= 0) {
     4d6:	80 91 0b 01 	lds	r24, 0x010B
     4da:	81 50       	subi	r24, 0x01	; 1
     4dc:	80 93 0b 01 	sts	0x010B, r24
     4e0:	80 91 0b 01 	lds	r24, 0x010B
     4e4:	88 23       	and	r24, r24
     4e6:	19 f4       	brne	.+6      	; 0x4ee <heater_callback+0x202>
			heater.state = HEATER_REGULATED;
     4e8:	83 e0       	ldi	r24, 0x03	; 3
     4ea:	80 93 07 01 	sts	0x0107, r24
		}
	}
	if (heater.state == HEATER_REGULATED) {
     4ee:	80 91 07 01 	lds	r24, 0x0107
     4f2:	83 30       	cpi	r24, 0x03	; 3
     4f4:	19 f4       	brne	.+6      	; 0x4fc <heater_callback+0x210>
		led_on();
     4f6:	0e 94 3c 09 	call	0x1278	; 0x1278 <led_on>
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <heater_callback+0x214>
	} else {
		led_toggle();
     4fc:	0e 94 58 09 	call	0x12b0	; 0x12b0 <led_toggle>
	}
}
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	cf 91       	pop	r28
     50a:	df 91       	pop	r29
     50c:	08 95       	ret

0000050e <pid_init>:
 * pid_reset() - reset PID values to cold start
 * pid_calc() - derived from: http://www.embeddedheaven.com/pid-control-algorithm-c-language.htm
 */

void pid_init() 
{
     50e:	df 93       	push	r29
     510:	cf 93       	push	r28
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
	memset(&pid, 0, sizeof(struct PIDstruct));
     516:	88 e2       	ldi	r24, 0x28	; 40
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	46 e3       	ldi	r20, 0x36	; 54
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	0e 94 14 12 	call	0x2428	; 0x2428 <memset>
	pid.dt = PID_DT;
     526:	8d ec       	ldi	r24, 0xCD	; 205
     528:	9c ec       	ldi	r25, 0xCC	; 204
     52a:	ac ec       	ldi	r26, 0xCC	; 204
     52c:	bd e3       	ldi	r27, 0x3D	; 61
     52e:	80 93 46 01 	sts	0x0146, r24
     532:	90 93 47 01 	sts	0x0147, r25
     536:	a0 93 48 01 	sts	0x0148, r26
     53a:	b0 93 49 01 	sts	0x0149, r27
	pid.Kp = PID_Kp;
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e8       	ldi	r26, 0x80	; 128
     544:	b0 e4       	ldi	r27, 0x40	; 64
     546:	80 93 4a 01 	sts	0x014A, r24
     54a:	90 93 4b 01 	sts	0x014B, r25
     54e:	a0 93 4c 01 	sts	0x014C, r26
     552:	b0 93 4d 01 	sts	0x014D, r27
	pid.Ki = PID_Ki;
     556:	8d ec       	ldi	r24, 0xCD	; 205
     558:	9c ec       	ldi	r25, 0xCC	; 204
     55a:	ac ec       	ldi	r26, 0xCC	; 204
     55c:	bd e3       	ldi	r27, 0x3D	; 61
     55e:	80 93 4e 01 	sts	0x014E, r24
     562:	90 93 4f 01 	sts	0x014F, r25
     566:	a0 93 50 01 	sts	0x0150, r26
     56a:	b0 93 51 01 	sts	0x0151, r27
	pid.Kd = PID_Kd;
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	a0 e0       	ldi	r26, 0x00	; 0
     574:	b0 e0       	ldi	r27, 0x00	; 0
     576:	80 93 52 01 	sts	0x0152, r24
     57a:	90 93 53 01 	sts	0x0153, r25
     57e:	a0 93 54 01 	sts	0x0154, r26
     582:	b0 93 55 01 	sts	0x0155, r27
	pid.output_max = PID_MAX_OUTPUT;		// saturation filter max value
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	a8 ec       	ldi	r26, 0xC8	; 200
     58c:	b2 e4       	ldi	r27, 0x42	; 66
     58e:	80 93 2e 01 	sts	0x012E, r24
     592:	90 93 2f 01 	sts	0x012F, r25
     596:	a0 93 30 01 	sts	0x0130, r26
     59a:	b0 93 31 01 	sts	0x0131, r27
	pid.output_min = PID_MIN_OUTPUT;		// saturation filter min value
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	a0 e0       	ldi	r26, 0x00	; 0
     5a4:	b0 e0       	ldi	r27, 0x00	; 0
     5a6:	80 93 32 01 	sts	0x0132, r24
     5aa:	90 93 33 01 	sts	0x0133, r25
     5ae:	a0 93 34 01 	sts	0x0134, r26
     5b2:	b0 93 35 01 	sts	0x0135, r27
	pid.state = PID_ON;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	80 93 28 01 	sts	0x0128, r24
}
     5bc:	cf 91       	pop	r28
     5be:	df 91       	pop	r29
     5c0:	08 95       	ret

000005c2 <pid_reset>:

void pid_reset()
{
     5c2:	df 93       	push	r29
     5c4:	cf 93       	push	r28
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
	pid.output = 0;
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	a0 e0       	ldi	r26, 0x00	; 0
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	80 93 2a 01 	sts	0x012A, r24
     5d6:	90 93 2b 01 	sts	0x012B, r25
     5da:	a0 93 2c 01 	sts	0x012C, r26
     5de:	b0 93 2d 01 	sts	0x012D, r27
	pid.integral = 0;
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	a0 e0       	ldi	r26, 0x00	; 0
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	80 93 3e 01 	sts	0x013E, r24
     5ee:	90 93 3f 01 	sts	0x013F, r25
     5f2:	a0 93 40 01 	sts	0x0140, r26
     5f6:	b0 93 41 01 	sts	0x0141, r27
	pid.prev_error = 0;
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	a0 e0       	ldi	r26, 0x00	; 0
     600:	b0 e0       	ldi	r27, 0x00	; 0
     602:	80 93 3a 01 	sts	0x013A, r24
     606:	90 93 3b 01 	sts	0x013B, r25
     60a:	a0 93 3c 01 	sts	0x013C, r26
     60e:	b0 93 3d 01 	sts	0x013D, r27
}
     612:	cf 91       	pop	r28
     614:	df 91       	pop	r29
     616:	08 95       	ret

00000618 <pid_calculate>:

double pid_calculate(double setpoint,double temperature)
{
     618:	ef 92       	push	r14
     61a:	ff 92       	push	r15
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	df 93       	push	r29
     622:	cf 93       	push	r28
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62
     628:	2c 97       	sbiw	r28, 0x0c	; 12
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
     634:	69 83       	std	Y+1, r22	; 0x01
     636:	7a 83       	std	Y+2, r23	; 0x02
     638:	8b 83       	std	Y+3, r24	; 0x03
     63a:	9c 83       	std	Y+4, r25	; 0x04
     63c:	2d 83       	std	Y+5, r18	; 0x05
     63e:	3e 83       	std	Y+6, r19	; 0x06
     640:	4f 83       	std	Y+7, r20	; 0x07
     642:	58 87       	std	Y+8, r21	; 0x08
	if (pid.state == PID_OFF) { return (0);}
     644:	80 91 28 01 	lds	r24, 0x0128
     648:	88 23       	and	r24, r24
     64a:	49 f4       	brne	.+18     	; 0x65e <pid_calculate+0x46>
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	a0 e0       	ldi	r26, 0x00	; 0
     652:	b0 e0       	ldi	r27, 0x00	; 0
     654:	89 87       	std	Y+9, r24	; 0x09
     656:	9a 87       	std	Y+10, r25	; 0x0a
     658:	ab 87       	std	Y+11, r26	; 0x0b
     65a:	bc 87       	std	Y+12, r27	; 0x0c
     65c:	99 c1       	rjmp	.+818    	; 0x990 <__stack+0x91>

	pid.setpoint = setpoint;		// ++++ test
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	ab 81       	ldd	r26, Y+3	; 0x03
     664:	bc 81       	ldd	r27, Y+4	; 0x04
     666:	80 93 5a 01 	sts	0x015A, r24
     66a:	90 93 5b 01 	sts	0x015B, r25
     66e:	a0 93 5c 01 	sts	0x015C, r26
     672:	b0 93 5d 01 	sts	0x015D, r27
	pid.temperature = temperature;	// ++++ test
     676:	8d 81       	ldd	r24, Y+5	; 0x05
     678:	9e 81       	ldd	r25, Y+6	; 0x06
     67a:	af 81       	ldd	r26, Y+7	; 0x07
     67c:	b8 85       	ldd	r27, Y+8	; 0x08
     67e:	80 93 56 01 	sts	0x0156, r24
     682:	90 93 57 01 	sts	0x0157, r25
     686:	a0 93 58 01 	sts	0x0158, r26
     68a:	b0 93 59 01 	sts	0x0159, r27

	pid.error = setpoint - temperature;		// current error term
     68e:	69 81       	ldd	r22, Y+1	; 0x01
     690:	7a 81       	ldd	r23, Y+2	; 0x02
     692:	8b 81       	ldd	r24, Y+3	; 0x03
     694:	9c 81       	ldd	r25, Y+4	; 0x04
     696:	2d 81       	ldd	r18, Y+5	; 0x05
     698:	3e 81       	ldd	r19, Y+6	; 0x06
     69a:	4f 81       	ldd	r20, Y+7	; 0x07
     69c:	58 85       	ldd	r21, Y+8	; 0x08
     69e:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__subsf3>
     6a2:	dc 01       	movw	r26, r24
     6a4:	cb 01       	movw	r24, r22
     6a6:	80 93 36 01 	sts	0x0136, r24
     6aa:	90 93 37 01 	sts	0x0137, r25
     6ae:	a0 93 38 01 	sts	0x0138, r26
     6b2:	b0 93 39 01 	sts	0x0139, r27

//	if (fabs(pid.error) > PID_EPSILON) {	// stop integration if error term is too small
	if ((fabs(pid.error) > PID_EPSILON) ||	// stop integration if error term is too small
     6b6:	80 91 36 01 	lds	r24, 0x0136
     6ba:	90 91 37 01 	lds	r25, 0x0137
     6be:	a0 91 38 01 	lds	r26, 0x0138
     6c2:	b0 91 39 01 	lds	r27, 0x0139
     6c6:	bf 77       	andi	r27, 0x7F	; 127
     6c8:	bc 01       	movw	r22, r24
     6ca:	cd 01       	movw	r24, r26
     6cc:	2a e0       	ldi	r18, 0x0A	; 10
     6ce:	37 ed       	ldi	r19, 0xD7	; 215
     6d0:	43 e2       	ldi	r20, 0x23	; 35
     6d2:	5c e3       	ldi	r21, 0x3C	; 60
     6d4:	0e 94 31 11 	call	0x2262	; 0x2262 <__gesf2>
     6d8:	18 16       	cp	r1, r24
     6da:	14 f1       	brlt	.+68     	; 0x720 <pid_calculate+0x108>
     6dc:	e0 90 2a 01 	lds	r14, 0x012A
     6e0:	f0 90 2b 01 	lds	r15, 0x012B
     6e4:	00 91 2c 01 	lds	r16, 0x012C
     6e8:	10 91 2d 01 	lds	r17, 0x012D
     6ec:	80 91 2e 01 	lds	r24, 0x012E
     6f0:	90 91 2f 01 	lds	r25, 0x012F
     6f4:	a0 91 30 01 	lds	r26, 0x0130
     6f8:	b0 91 31 01 	lds	r27, 0x0131
     6fc:	bc 01       	movw	r22, r24
     6fe:	cd 01       	movw	r24, r26
     700:	2c ea       	ldi	r18, 0xAC	; 172
     702:	35 ec       	ldi	r19, 0xC5	; 197
     704:	47 e2       	ldi	r20, 0x27	; 39
     706:	57 e3       	ldi	r21, 0x37	; 55
     708:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__subsf3>
     70c:	dc 01       	movw	r26, r24
     70e:	cb 01       	movw	r24, r22
     710:	9c 01       	movw	r18, r24
     712:	ad 01       	movw	r20, r26
     714:	c8 01       	movw	r24, r16
     716:	b7 01       	movw	r22, r14
     718:	0e 94 31 11 	call	0x2262	; 0x2262 <__gesf2>
     71c:	88 23       	and	r24, r24
     71e:	74 f1       	brlt	.+92     	; 0x77c <pid_calculate+0x164>
		(pid.output >= (pid.output_max - EPSILON))) {//...or output is too large (anti-windup)
		pid.integral += (pid.error * pid.dt);
     720:	e0 90 3e 01 	lds	r14, 0x013E
     724:	f0 90 3f 01 	lds	r15, 0x013F
     728:	00 91 40 01 	lds	r16, 0x0140
     72c:	10 91 41 01 	lds	r17, 0x0141
     730:	80 91 36 01 	lds	r24, 0x0136
     734:	90 91 37 01 	lds	r25, 0x0137
     738:	a0 91 38 01 	lds	r26, 0x0138
     73c:	b0 91 39 01 	lds	r27, 0x0139
     740:	20 91 46 01 	lds	r18, 0x0146
     744:	30 91 47 01 	lds	r19, 0x0147
     748:	40 91 48 01 	lds	r20, 0x0148
     74c:	50 91 49 01 	lds	r21, 0x0149
     750:	bc 01       	movw	r22, r24
     752:	cd 01       	movw	r24, r26
     754:	0e 94 35 11 	call	0x226a	; 0x226a <__mulsf3>
     758:	dc 01       	movw	r26, r24
     75a:	cb 01       	movw	r24, r22
     75c:	9c 01       	movw	r18, r24
     75e:	ad 01       	movw	r20, r26
     760:	c8 01       	movw	r24, r16
     762:	b7 01       	movw	r22, r14
     764:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__addsf3>
     768:	dc 01       	movw	r26, r24
     76a:	cb 01       	movw	r24, r22
     76c:	80 93 3e 01 	sts	0x013E, r24
     770:	90 93 3f 01 	sts	0x013F, r25
     774:	a0 93 40 01 	sts	0x0140, r26
     778:	b0 93 41 01 	sts	0x0141, r27
	}
	pid.derivative = (pid.error - pid.prev_error) / pid.dt;
     77c:	80 91 36 01 	lds	r24, 0x0136
     780:	90 91 37 01 	lds	r25, 0x0137
     784:	a0 91 38 01 	lds	r26, 0x0138
     788:	b0 91 39 01 	lds	r27, 0x0139
     78c:	20 91 3a 01 	lds	r18, 0x013A
     790:	30 91 3b 01 	lds	r19, 0x013B
     794:	40 91 3c 01 	lds	r20, 0x013C
     798:	50 91 3d 01 	lds	r21, 0x013D
     79c:	bc 01       	movw	r22, r24
     79e:	cd 01       	movw	r24, r26
     7a0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__subsf3>
     7a4:	dc 01       	movw	r26, r24
     7a6:	cb 01       	movw	r24, r22
     7a8:	20 91 46 01 	lds	r18, 0x0146
     7ac:	30 91 47 01 	lds	r19, 0x0147
     7b0:	40 91 48 01 	lds	r20, 0x0148
     7b4:	50 91 49 01 	lds	r21, 0x0149
     7b8:	bc 01       	movw	r22, r24
     7ba:	cd 01       	movw	r24, r26
     7bc:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__divsf3>
     7c0:	dc 01       	movw	r26, r24
     7c2:	cb 01       	movw	r24, r22
     7c4:	80 93 42 01 	sts	0x0142, r24
     7c8:	90 93 43 01 	sts	0x0143, r25
     7cc:	a0 93 44 01 	sts	0x0144, r26
     7d0:	b0 93 45 01 	sts	0x0145, r27
	pid.output = pid.Kp * pid.error + pid.Ki * pid.integral + pid.Kd * pid.derivative;
     7d4:	80 91 4a 01 	lds	r24, 0x014A
     7d8:	90 91 4b 01 	lds	r25, 0x014B
     7dc:	a0 91 4c 01 	lds	r26, 0x014C
     7e0:	b0 91 4d 01 	lds	r27, 0x014D
     7e4:	20 91 36 01 	lds	r18, 0x0136
     7e8:	30 91 37 01 	lds	r19, 0x0137
     7ec:	40 91 38 01 	lds	r20, 0x0138
     7f0:	50 91 39 01 	lds	r21, 0x0139
     7f4:	bc 01       	movw	r22, r24
     7f6:	cd 01       	movw	r24, r26
     7f8:	0e 94 35 11 	call	0x226a	; 0x226a <__mulsf3>
     7fc:	dc 01       	movw	r26, r24
     7fe:	cb 01       	movw	r24, r22
     800:	7c 01       	movw	r14, r24
     802:	8d 01       	movw	r16, r26
     804:	80 91 4e 01 	lds	r24, 0x014E
     808:	90 91 4f 01 	lds	r25, 0x014F
     80c:	a0 91 50 01 	lds	r26, 0x0150
     810:	b0 91 51 01 	lds	r27, 0x0151
     814:	20 91 3e 01 	lds	r18, 0x013E
     818:	30 91 3f 01 	lds	r19, 0x013F
     81c:	40 91 40 01 	lds	r20, 0x0140
     820:	50 91 41 01 	lds	r21, 0x0141
     824:	bc 01       	movw	r22, r24
     826:	cd 01       	movw	r24, r26
     828:	0e 94 35 11 	call	0x226a	; 0x226a <__mulsf3>
     82c:	dc 01       	movw	r26, r24
     82e:	cb 01       	movw	r24, r22
     830:	9c 01       	movw	r18, r24
     832:	ad 01       	movw	r20, r26
     834:	c8 01       	movw	r24, r16
     836:	b7 01       	movw	r22, r14
     838:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__addsf3>
     83c:	dc 01       	movw	r26, r24
     83e:	cb 01       	movw	r24, r22
     840:	7c 01       	movw	r14, r24
     842:	8d 01       	movw	r16, r26
     844:	80 91 52 01 	lds	r24, 0x0152
     848:	90 91 53 01 	lds	r25, 0x0153
     84c:	a0 91 54 01 	lds	r26, 0x0154
     850:	b0 91 55 01 	lds	r27, 0x0155
     854:	20 91 42 01 	lds	r18, 0x0142
     858:	30 91 43 01 	lds	r19, 0x0143
     85c:	40 91 44 01 	lds	r20, 0x0144
     860:	50 91 45 01 	lds	r21, 0x0145
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	0e 94 35 11 	call	0x226a	; 0x226a <__mulsf3>
     86c:	dc 01       	movw	r26, r24
     86e:	cb 01       	movw	r24, r22
     870:	9c 01       	movw	r18, r24
     872:	ad 01       	movw	r20, r26
     874:	c8 01       	movw	r24, r16
     876:	b7 01       	movw	r22, r14
     878:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__addsf3>
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	80 93 2a 01 	sts	0x012A, r24
     884:	90 93 2b 01 	sts	0x012B, r25
     888:	a0 93 2c 01 	sts	0x012C, r26
     88c:	b0 93 2d 01 	sts	0x012D, r27

	if(pid.output > pid.output_max) { 		// saturation filter
     890:	80 91 2a 01 	lds	r24, 0x012A
     894:	90 91 2b 01 	lds	r25, 0x012B
     898:	a0 91 2c 01 	lds	r26, 0x012C
     89c:	b0 91 2d 01 	lds	r27, 0x012D
     8a0:	20 91 2e 01 	lds	r18, 0x012E
     8a4:	30 91 2f 01 	lds	r19, 0x012F
     8a8:	40 91 30 01 	lds	r20, 0x0130
     8ac:	50 91 31 01 	lds	r21, 0x0131
     8b0:	bc 01       	movw	r22, r24
     8b2:	cd 01       	movw	r24, r26
     8b4:	0e 94 31 11 	call	0x2262	; 0x2262 <__gesf2>
     8b8:	18 16       	cp	r1, r24
     8ba:	8c f4       	brge	.+34     	; 0x8de <pid_calculate+0x2c6>
		pid.output = pid.output_max;
     8bc:	80 91 2e 01 	lds	r24, 0x012E
     8c0:	90 91 2f 01 	lds	r25, 0x012F
     8c4:	a0 91 30 01 	lds	r26, 0x0130
     8c8:	b0 91 31 01 	lds	r27, 0x0131
     8cc:	80 93 2a 01 	sts	0x012A, r24
     8d0:	90 93 2b 01 	sts	0x012B, r25
     8d4:	a0 93 2c 01 	sts	0x012C, r26
     8d8:	b0 93 2d 01 	sts	0x012D, r27
     8dc:	26 c0       	rjmp	.+76     	; 0x92a <__stack+0x2b>
	} else if(pid.output < pid.output_min) {
     8de:	80 91 2a 01 	lds	r24, 0x012A
     8e2:	90 91 2b 01 	lds	r25, 0x012B
     8e6:	a0 91 2c 01 	lds	r26, 0x012C
     8ea:	b0 91 2d 01 	lds	r27, 0x012D
     8ee:	20 91 32 01 	lds	r18, 0x0132
     8f2:	30 91 33 01 	lds	r19, 0x0133
     8f6:	40 91 34 01 	lds	r20, 0x0134
     8fa:	50 91 35 01 	lds	r21, 0x0135
     8fe:	bc 01       	movw	r22, r24
     900:	cd 01       	movw	r24, r26
     902:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__cmpsf2>
     906:	88 23       	and	r24, r24
     908:	84 f4       	brge	.+32     	; 0x92a <__stack+0x2b>
		pid.output = pid.output_min;
     90a:	80 91 32 01 	lds	r24, 0x0132
     90e:	90 91 33 01 	lds	r25, 0x0133
     912:	a0 91 34 01 	lds	r26, 0x0134
     916:	b0 91 35 01 	lds	r27, 0x0135
     91a:	80 93 2a 01 	sts	0x012A, r24
     91e:	90 93 2b 01 	sts	0x012B, r25
     922:	a0 93 2c 01 	sts	0x012C, r26
     926:	b0 93 2d 01 	sts	0x012D, r27
	}
	pid.prev_error = pid.error;
     92a:	80 91 36 01 	lds	r24, 0x0136
     92e:	90 91 37 01 	lds	r25, 0x0137
     932:	a0 91 38 01 	lds	r26, 0x0138
     936:	b0 91 39 01 	lds	r27, 0x0139
     93a:	80 93 3a 01 	sts	0x013A, r24
     93e:	90 93 3b 01 	sts	0x013B, r25
     942:	a0 93 3c 01 	sts	0x013C, r26
     946:	b0 93 3d 01 	sts	0x013D, r27
	if (pid.output > 50) { led_on();} else { led_off();}
     94a:	80 91 2a 01 	lds	r24, 0x012A
     94e:	90 91 2b 01 	lds	r25, 0x012B
     952:	a0 91 2c 01 	lds	r26, 0x012C
     956:	b0 91 2d 01 	lds	r27, 0x012D
     95a:	bc 01       	movw	r22, r24
     95c:	cd 01       	movw	r24, r26
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	48 e4       	ldi	r20, 0x48	; 72
     964:	52 e4       	ldi	r21, 0x42	; 66
     966:	0e 94 31 11 	call	0x2262	; 0x2262 <__gesf2>
     96a:	18 16       	cp	r1, r24
     96c:	1c f4       	brge	.+6      	; 0x974 <__stack+0x75>
     96e:	0e 94 3c 09 	call	0x1278	; 0x1278 <led_on>
     972:	02 c0       	rjmp	.+4      	; 0x978 <__stack+0x79>
     974:	0e 94 4a 09 	call	0x1294	; 0x1294 <led_off>

	return pid.output;
     978:	80 91 2a 01 	lds	r24, 0x012A
     97c:	90 91 2b 01 	lds	r25, 0x012B
     980:	a0 91 2c 01 	lds	r26, 0x012C
     984:	b0 91 2d 01 	lds	r27, 0x012D
     988:	89 87       	std	Y+9, r24	; 0x09
     98a:	9a 87       	std	Y+10, r25	; 0x0a
     98c:	ab 87       	std	Y+11, r26	; 0x0b
     98e:	bc 87       	std	Y+12, r27	; 0x0c
     990:	89 85       	ldd	r24, Y+9	; 0x09
     992:	9a 85       	ldd	r25, Y+10	; 0x0a
     994:	ab 85       	ldd	r26, Y+11	; 0x0b
     996:	bc 85       	ldd	r27, Y+12	; 0x0c
}
     998:	bc 01       	movw	r22, r24
     99a:	cd 01       	movw	r24, r26
     99c:	2c 96       	adiw	r28, 0x0c	; 12
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	cd bf       	out	0x3d, r28	; 61
     9a8:	cf 91       	pop	r28
     9aa:	df 91       	pop	r29
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	08 95       	ret

000009b6 <sensor_init>:
 * sensor_get_code()		- return latest sensor code
 * sensor_callback() 		- perform sensor sampling / reading
 */

void sensor_init()
{
     9b6:	df 93       	push	r29
     9b8:	cf 93       	push	r28
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
	memset(&sensor, 0, sizeof(Sensor));
     9be:	80 e7       	ldi	r24, 0x70	; 112
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	43 e4       	ldi	r20, 0x43	; 67
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	0e 94 14 12 	call	0x2428	; 0x2428 <memset>
	sensor.temperature = ABSOLUTE_ZERO;
     9ce:	83 e3       	ldi	r24, 0x33	; 51
     9d0:	93 e9       	ldi	r25, 0x93	; 147
     9d2:	a8 e8       	ldi	r26, 0x88	; 136
     9d4:	b3 ec       	ldi	r27, 0xC3	; 195
     9d6:	80 93 73 01 	sts	0x0173, r24
     9da:	90 93 74 01 	sts	0x0174, r25
     9de:	a0 93 75 01 	sts	0x0175, r26
     9e2:	b0 93 76 01 	sts	0x0176, r27
	sensor.sample_variance_max = SENSOR_SAMPLE_VARIANCE_MAX;
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	a0 ea       	ldi	r26, 0xA0	; 160
     9ec:	bf e3       	ldi	r27, 0x3F	; 63
     9ee:	80 93 7b 01 	sts	0x017B, r24
     9f2:	90 93 7c 01 	sts	0x017C, r25
     9f6:	a0 93 7d 01 	sts	0x017D, r26
     9fa:	b0 93 7e 01 	sts	0x017E, r27
	sensor.reading_variance_max = SENSOR_READING_VARIANCE_MAX;
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	a0 ea       	ldi	r26, 0xA0	; 160
     a04:	b1 e4       	ldi	r27, 0x41	; 65
     a06:	80 93 7f 01 	sts	0x017F, r24
     a0a:	90 93 80 01 	sts	0x0180, r25
     a0e:	a0 93 81 01 	sts	0x0181, r26
     a12:	b0 93 82 01 	sts	0x0182, r27
	sensor.disconnect_temperature = SENSOR_DISCONNECTED_TEMPERATURE;
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	a8 ec       	ldi	r26, 0xC8	; 200
     a1c:	b3 e4       	ldi	r27, 0x43	; 67
     a1e:	80 93 83 01 	sts	0x0183, r24
     a22:	90 93 84 01 	sts	0x0184, r25
     a26:	a0 93 85 01 	sts	0x0185, r26
     a2a:	b0 93 86 01 	sts	0x0186, r27
	sensor.no_power_temperature = SENSOR_NO_POWER_TEMPERATURE;
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 ec       	ldi	r27, 0xC0	; 192
     a36:	80 93 87 01 	sts	0x0187, r24
     a3a:	90 93 88 01 	sts	0x0188, r25
     a3e:	a0 93 89 01 	sts	0x0189, r26
     a42:	b0 93 8a 01 	sts	0x018A, r27
}
     a46:	cf 91       	pop	r28
     a48:	df 91       	pop	r29
     a4a:	08 95       	ret

00000a4c <sensor_on>:

void sensor_on()
{
     a4c:	df 93       	push	r29
     a4e:	cf 93       	push	r28
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_NO_DATA;
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	80 93 70 01 	sts	0x0170, r24
}
     a5a:	cf 91       	pop	r28
     a5c:	df 91       	pop	r29
     a5e:	08 95       	ret

00000a60 <sensor_off>:

void sensor_off()
{
     a60:	df 93       	push	r29
     a62:	cf 93       	push	r28
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_OFF;
     a68:	10 92 70 01 	sts	0x0170, r1
}
     a6c:	cf 91       	pop	r28
     a6e:	df 91       	pop	r29
     a70:	08 95       	ret

00000a72 <sensor_start_reading>:

void sensor_start_reading() 
{ 
     a72:	df 93       	push	r29
     a74:	cf 93       	push	r28
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
	sensor.sample_idx = 0;
     a7a:	10 92 72 01 	sts	0x0172, r1
//	adc_read(ADC_CHANNEL);
	sensor.code = SENSOR_TAKING_READING;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 71 01 	sts	0x0171, r24
}
     a84:	cf 91       	pop	r28
     a86:	df 91       	pop	r29
     a88:	08 95       	ret

00000a8a <sensor_get_state>:

uint8_t sensor_get_state() { return (sensor.state);}
     a8a:	df 93       	push	r29
     a8c:	cf 93       	push	r28
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	80 91 70 01 	lds	r24, 0x0170
     a96:	cf 91       	pop	r28
     a98:	df 91       	pop	r29
     a9a:	08 95       	ret

00000a9c <sensor_get_code>:
uint8_t sensor_get_code() { return (sensor.code);}
     a9c:	df 93       	push	r29
     a9e:	cf 93       	push	r28
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	80 91 71 01 	lds	r24, 0x0171
     aa8:	cf 91       	pop	r28
     aaa:	df 91       	pop	r29
     aac:	08 95       	ret

00000aae <sensor_get_temperature>:

double sensor_get_temperature() 
{ 
     aae:	df 93       	push	r29
     ab0:	cf 93       	push	r28
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <sensor_get_temperature+0x6>
     ab4:	00 d0       	rcall	.+0      	; 0xab6 <sensor_get_temperature+0x8>
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
	if (sensor.state == SENSOR_HAS_DATA) { 
     aba:	80 91 70 01 	lds	r24, 0x0170
     abe:	83 30       	cpi	r24, 0x03	; 3
     ac0:	69 f4       	brne	.+26     	; 0xadc <sensor_get_temperature+0x2e>
		return (sensor.temperature);
     ac2:	80 91 73 01 	lds	r24, 0x0173
     ac6:	90 91 74 01 	lds	r25, 0x0174
     aca:	a0 91 75 01 	lds	r26, 0x0175
     ace:	b0 91 76 01 	lds	r27, 0x0176
     ad2:	89 83       	std	Y+1, r24	; 0x01
     ad4:	9a 83       	std	Y+2, r25	; 0x02
     ad6:	ab 83       	std	Y+3, r26	; 0x03
     ad8:	bc 83       	std	Y+4, r27	; 0x04
     ada:	08 c0       	rjmp	.+16     	; 0xaec <sensor_get_temperature+0x3e>
	} else {
		return (LESS_THAN_ZERO);	// an impossible temperature value
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	a9 e8       	ldi	r26, 0x89	; 137
     ae2:	b3 ec       	ldi	r27, 0xC3	; 195
     ae4:	89 83       	std	Y+1, r24	; 0x01
     ae6:	9a 83       	std	Y+2, r25	; 0x02
     ae8:	ab 83       	std	Y+3, r26	; 0x03
     aea:	bc 83       	std	Y+4, r27	; 0x04
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	9a 81       	ldd	r25, Y+2	; 0x02
     af0:	ab 81       	ldd	r26, Y+3	; 0x03
     af2:	bc 81       	ldd	r27, Y+4	; 0x04
	}
}
     af4:	bc 01       	movw	r22, r24
     af6:	cd 01       	movw	r24, r26
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	cf 91       	pop	r28
     b02:	df 91       	pop	r29
     b04:	08 95       	ret

00000b06 <sensor_callback>:
 *	loop. Each sampling interval must be requested explicitly by calling 
 *	sensor_start_sample(). It does not free-run.
 */

void sensor_callback()
{
     b06:	ef 92       	push	r14
     b08:	ff 92       	push	r15
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	df 93       	push	r29
     b10:	cf 93       	push	r28
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	29 97       	sbiw	r28, 0x09	; 9
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
	// cases where you don't execute the callback:
	if ((sensor.state == SENSOR_OFF) || (sensor.code != SENSOR_TAKING_READING)) {
     b22:	80 91 70 01 	lds	r24, 0x0170
     b26:	88 23       	and	r24, r24
     b28:	09 f4       	brne	.+2      	; 0xb2c <sensor_callback+0x26>
     b2a:	2f c1       	rjmp	.+606    	; 0xd8a <sensor_callback+0x284>
     b2c:	80 91 71 01 	lds	r24, 0x0171
     b30:	81 30       	cpi	r24, 0x01	; 1
     b32:	09 f0       	breq	.+2      	; 0xb36 <sensor_callback+0x30>
     b34:	2a c1       	rjmp	.+596    	; 0xd8a <sensor_callback+0x284>
		return;
	}

	// get a sample and return if still in the reading period
	sensor.sample[sensor.sample_idx] = _sensor_sample(ADC_CHANNEL);
     b36:	80 91 72 01 	lds	r24, 0x0172
     b3a:	08 2f       	mov	r16, r24
     b3c:	10 e0       	ldi	r17, 0x00	; 0
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	0e 94 d2 06 	call	0xda4	; 0xda4 <_sensor_sample>
     b44:	9b 01       	movw	r18, r22
     b46:	ac 01       	movw	r20, r24
     b48:	c8 01       	movw	r24, r16
     b4a:	88 0f       	add	r24, r24
     b4c:	99 1f       	adc	r25, r25
     b4e:	88 0f       	add	r24, r24
     b50:	99 1f       	adc	r25, r25
     b52:	fc 01       	movw	r30, r24
     b54:	e5 57       	subi	r30, 0x75	; 117
     b56:	fe 4f       	sbci	r31, 0xFE	; 254
     b58:	20 83       	st	Z, r18
     b5a:	31 83       	std	Z+1, r19	; 0x01
     b5c:	42 83       	std	Z+2, r20	; 0x02
     b5e:	53 83       	std	Z+3, r21	; 0x03

//	printFloat(sensor.sample[sensor.sample_idx]); //++++++++++++++++++++++++
//	printPgmString(PSTR("\n")); 

	if ((++sensor.sample_idx) < SENSOR_SAMPLES) { 
     b60:	80 91 72 01 	lds	r24, 0x0172
     b64:	8f 5f       	subi	r24, 0xFF	; 255
     b66:	80 93 72 01 	sts	0x0172, r24
     b6a:	80 91 72 01 	lds	r24, 0x0172
     b6e:	89 30       	cpi	r24, 0x09	; 9
     b70:	08 f4       	brcc	.+2      	; 0xb74 <sensor_callback+0x6e>
     b72:	0b c1       	rjmp	.+534    	; 0xd8a <sensor_callback+0x284>
		return;
	}

	// process the array to clean up samples
	double mean;
	sensor.std_dev = std_dev(sensor.sample, SENSOR_SAMPLES, &mean);
     b74:	8b e8       	ldi	r24, 0x8B	; 139
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	9e 01       	movw	r18, r28
     b7a:	2a 5f       	subi	r18, 0xFA	; 250
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	69 e0       	ldi	r22, 0x09	; 9
     b80:	a9 01       	movw	r20, r18
     b82:	0e 94 b2 0a 	call	0x1564	; 0x1564 <std_dev>
     b86:	dc 01       	movw	r26, r24
     b88:	cb 01       	movw	r24, r22
     b8a:	80 93 77 01 	sts	0x0177, r24
     b8e:	90 93 78 01 	sts	0x0178, r25
     b92:	a0 93 79 01 	sts	0x0179, r26
     b96:	b0 93 7a 01 	sts	0x017A, r27
	if (sensor.std_dev > sensor.reading_variance_max) {
     b9a:	80 91 77 01 	lds	r24, 0x0177
     b9e:	90 91 78 01 	lds	r25, 0x0178
     ba2:	a0 91 79 01 	lds	r26, 0x0179
     ba6:	b0 91 7a 01 	lds	r27, 0x017A
     baa:	20 91 7f 01 	lds	r18, 0x017F
     bae:	30 91 80 01 	lds	r19, 0x0180
     bb2:	40 91 81 01 	lds	r20, 0x0181
     bb6:	50 91 82 01 	lds	r21, 0x0182
     bba:	bc 01       	movw	r22, r24
     bbc:	cd 01       	movw	r24, r26
     bbe:	0e 94 31 11 	call	0x2262	; 0x2262 <__gesf2>
     bc2:	18 16       	cp	r1, r24
     bc4:	3c f4       	brge	.+14     	; 0xbd4 <sensor_callback+0xce>
		sensor.state = SENSOR_ERROR;
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	80 93 70 01 	sts	0x0170, r24
		sensor.code = SENSOR_ERROR_BAD_READINGS;
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	80 93 71 01 	sts	0x0171, r24
     bd2:	db c0       	rjmp	.+438    	; 0xd8a <sensor_callback+0x284>
		return;
	}

	// reject the outlier samples and re-compute the average
	double count = 0;
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	a0 e0       	ldi	r26, 0x00	; 0
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	8a 83       	std	Y+2, r24	; 0x02
     bde:	9b 83       	std	Y+3, r25	; 0x03
     be0:	ac 83       	std	Y+4, r26	; 0x04
     be2:	bd 83       	std	Y+5, r27	; 0x05
	sensor.temperature = 0;
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	a0 e0       	ldi	r26, 0x00	; 0
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	80 93 73 01 	sts	0x0173, r24
     bf0:	90 93 74 01 	sts	0x0174, r25
     bf4:	a0 93 75 01 	sts	0x0175, r26
     bf8:	b0 93 76 01 	sts	0x0176, r27
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     bfc:	19 82       	std	Y+1, r1	; 0x01
     bfe:	71 c0       	rjmp	.+226    	; 0xce2 <sensor_callback+0x1dc>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	88 2f       	mov	r24, r24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	fc 01       	movw	r30, r24
     c10:	e5 57       	subi	r30, 0x75	; 117
     c12:	fe 4f       	sbci	r31, 0xFE	; 254
     c14:	80 81       	ld	r24, Z
     c16:	91 81       	ldd	r25, Z+1	; 0x01
     c18:	a2 81       	ldd	r26, Z+2	; 0x02
     c1a:	b3 81       	ldd	r27, Z+3	; 0x03
     c1c:	2e 81       	ldd	r18, Y+6	; 0x06
     c1e:	3f 81       	ldd	r19, Y+7	; 0x07
     c20:	48 85       	ldd	r20, Y+8	; 0x08
     c22:	59 85       	ldd	r21, Y+9	; 0x09
     c24:	bc 01       	movw	r22, r24
     c26:	cd 01       	movw	r24, r26
     c28:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__subsf3>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	7c 01       	movw	r14, r24
     c32:	8d 01       	movw	r16, r26
     c34:	e8 94       	clt
     c36:	17 f9       	bld	r17, 7
     c38:	80 91 7b 01 	lds	r24, 0x017B
     c3c:	90 91 7c 01 	lds	r25, 0x017C
     c40:	a0 91 7d 01 	lds	r26, 0x017D
     c44:	b0 91 7e 01 	lds	r27, 0x017E
     c48:	20 91 77 01 	lds	r18, 0x0177
     c4c:	30 91 78 01 	lds	r19, 0x0178
     c50:	40 91 79 01 	lds	r20, 0x0179
     c54:	50 91 7a 01 	lds	r21, 0x017A
     c58:	bc 01       	movw	r22, r24
     c5a:	cd 01       	movw	r24, r26
     c5c:	0e 94 35 11 	call	0x226a	; 0x226a <__mulsf3>
     c60:	dc 01       	movw	r26, r24
     c62:	cb 01       	movw	r24, r22
     c64:	9c 01       	movw	r18, r24
     c66:	ad 01       	movw	r20, r26
     c68:	c8 01       	movw	r24, r16
     c6a:	b7 01       	movw	r22, r14
     c6c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__cmpsf2>
     c70:	88 23       	and	r24, r24
     c72:	a4 f5       	brge	.+104    	; 0xcdc <sensor_callback+0x1d6>
			sensor.temperature += sensor.sample[i];
     c74:	e0 90 73 01 	lds	r14, 0x0173
     c78:	f0 90 74 01 	lds	r15, 0x0174
     c7c:	00 91 75 01 	lds	r16, 0x0175
     c80:	10 91 76 01 	lds	r17, 0x0176
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	fc 01       	movw	r30, r24
     c94:	e5 57       	subi	r30, 0x75	; 117
     c96:	fe 4f       	sbci	r31, 0xFE	; 254
     c98:	20 81       	ld	r18, Z
     c9a:	31 81       	ldd	r19, Z+1	; 0x01
     c9c:	42 81       	ldd	r20, Z+2	; 0x02
     c9e:	53 81       	ldd	r21, Z+3	; 0x03
     ca0:	c8 01       	movw	r24, r16
     ca2:	b7 01       	movw	r22, r14
     ca4:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__addsf3>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	80 93 73 01 	sts	0x0173, r24
     cb0:	90 93 74 01 	sts	0x0174, r25
     cb4:	a0 93 75 01 	sts	0x0175, r26
     cb8:	b0 93 76 01 	sts	0x0176, r27
			count++;
     cbc:	6a 81       	ldd	r22, Y+2	; 0x02
     cbe:	7b 81       	ldd	r23, Y+3	; 0x03
     cc0:	8c 81       	ldd	r24, Y+4	; 0x04
     cc2:	9d 81       	ldd	r25, Y+5	; 0x05
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	40 e8       	ldi	r20, 0x80	; 128
     cca:	5f e3       	ldi	r21, 0x3F	; 63
     ccc:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__addsf3>
     cd0:	dc 01       	movw	r26, r24
     cd2:	cb 01       	movw	r24, r22
     cd4:	8a 83       	std	Y+2, r24	; 0x02
     cd6:	9b 83       	std	Y+3, r25	; 0x03
     cd8:	ac 83       	std	Y+4, r26	; 0x04
     cda:	bd 83       	std	Y+5, r27	; 0x05
	}

	// reject the outlier samples and re-compute the average
	double count = 0;
	sensor.temperature = 0;
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	8f 5f       	subi	r24, 0xFF	; 255
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	89 30       	cpi	r24, 0x09	; 9
     ce6:	08 f4       	brcc	.+2      	; 0xcea <sensor_callback+0x1e4>
     ce8:	8b cf       	rjmp	.-234    	; 0xc00 <sensor_callback+0xfa>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
			sensor.temperature += sensor.sample[i];
			count++;
		}
	}
	sensor.temperature /= count; 		// calculate mean temp w/o the outliers
     cea:	80 91 73 01 	lds	r24, 0x0173
     cee:	90 91 74 01 	lds	r25, 0x0174
     cf2:	a0 91 75 01 	lds	r26, 0x0175
     cf6:	b0 91 76 01 	lds	r27, 0x0176
     cfa:	bc 01       	movw	r22, r24
     cfc:	cd 01       	movw	r24, r26
     cfe:	2a 81       	ldd	r18, Y+2	; 0x02
     d00:	3b 81       	ldd	r19, Y+3	; 0x03
     d02:	4c 81       	ldd	r20, Y+4	; 0x04
     d04:	5d 81       	ldd	r21, Y+5	; 0x05
     d06:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__divsf3>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	80 93 73 01 	sts	0x0173, r24
     d12:	90 93 74 01 	sts	0x0174, r25
     d16:	a0 93 75 01 	sts	0x0175, r26
     d1a:	b0 93 76 01 	sts	0x0176, r27
	sensor.state = SENSOR_HAS_DATA;
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	80 93 70 01 	sts	0x0170, r24
	sensor.code = SENSOR_IDLE;			// we are done. Flip it back to idle
     d24:	10 92 71 01 	sts	0x0171, r1

	// process the exception cases
	if (sensor.temperature > SENSOR_DISCONNECTED_TEMPERATURE) {
     d28:	80 91 73 01 	lds	r24, 0x0173
     d2c:	90 91 74 01 	lds	r25, 0x0174
     d30:	a0 91 75 01 	lds	r26, 0x0175
     d34:	b0 91 76 01 	lds	r27, 0x0176
     d38:	bc 01       	movw	r22, r24
     d3a:	cd 01       	movw	r24, r26
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	48 ec       	ldi	r20, 0xC8	; 200
     d42:	53 e4       	ldi	r21, 0x43	; 67
     d44:	0e 94 31 11 	call	0x2262	; 0x2262 <__gesf2>
     d48:	18 16       	cp	r1, r24
     d4a:	3c f4       	brge	.+14     	; 0xd5a <sensor_callback+0x254>
		sensor.state = SENSOR_ERROR;
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	80 93 70 01 	sts	0x0170, r24
		sensor.code = SENSOR_ERROR_DISCONNECTED;
     d52:	83 e0       	ldi	r24, 0x03	; 3
     d54:	80 93 71 01 	sts	0x0171, r24
     d58:	18 c0       	rjmp	.+48     	; 0xd8a <sensor_callback+0x284>
	} else if (sensor.temperature < SENSOR_NO_POWER_TEMPERATURE) {
     d5a:	80 91 73 01 	lds	r24, 0x0173
     d5e:	90 91 74 01 	lds	r25, 0x0174
     d62:	a0 91 75 01 	lds	r26, 0x0175
     d66:	b0 91 76 01 	lds	r27, 0x0176
     d6a:	bc 01       	movw	r22, r24
     d6c:	cd 01       	movw	r24, r26
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	50 ec       	ldi	r21, 0xC0	; 192
     d76:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__cmpsf2>
     d7a:	88 23       	and	r24, r24
     d7c:	34 f4       	brge	.+12     	; 0xd8a <sensor_callback+0x284>
		sensor.state = SENSOR_ERROR;
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	80 93 70 01 	sts	0x0170, r24
		sensor.code = SENSOR_ERROR_NO_POWER;
     d84:	84 e0       	ldi	r24, 0x04	; 4
     d86:	80 93 71 01 	sts	0x0171, r24
	}
}
     d8a:	29 96       	adiw	r28, 0x09	; 9
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	ff 90       	pop	r15
     da0:	ef 90       	pop	r14
     da2:	08 95       	ret

00000da4 <_sensor_sample>:
 *
 *		temp = (adc_value * 1.456355556) - -120.7135972
 */

static inline double _sensor_sample(uint8_t adc_channel)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	0f 92       	push	r0
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	89 83       	std	Y+1, r24	; 0x01
	double random_gain = 5;
	double random_variation = ((double)(rand() - RAND_MAX/2) / RAND_MAX/2) * random_gain;
	double reading = 60 + random_variation;
	return (((double)reading * SENSOR_SLOPE) + SENSOR_OFFSET);	// useful for testing the math
#else
	return (((double)adc_read() * SENSOR_SLOPE) + SENSOR_OFFSET);
     db0:	0e 94 2b 07 	call	0xe56	; 0xe56 <adc_read>
     db4:	cc 01       	movw	r24, r24
     db6:	a0 e0       	ldi	r26, 0x00	; 0
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	bc 01       	movw	r22, r24
     dbc:	cd 01       	movw	r24, r26
     dbe:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__floatunsisf>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	bc 01       	movw	r22, r24
     dc8:	cd 01       	movw	r24, r26
     dca:	26 e0       	ldi	r18, 0x06	; 6
     dcc:	3f ea       	ldi	r19, 0xAF	; 175
     dce:	4a ef       	ldi	r20, 0xFA	; 250
     dd0:	5e e3       	ldi	r21, 0x3E	; 62
     dd2:	0e 94 35 11 	call	0x226a	; 0x226a <__mulsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	bc 01       	movw	r22, r24
     ddc:	cd 01       	movw	r24, r26
     dde:	23 ed       	ldi	r18, 0xD3	; 211
     de0:	31 eb       	ldi	r19, 0xB1	; 177
     de2:	46 ed       	ldi	r20, 0xD6	; 214
     de4:	5e e3       	ldi	r21, 0x3E	; 62
     de6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__subsf3>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
#endif
}
     dee:	bc 01       	movw	r22, r24
     df0:	cd 01       	movw	r24, r26
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <adc_init>:
 *	There's a weird bug where somethimes the first conversion returns zero. 
 *	I need to fund out why this is happening and stop it.
 *	In the mean time there is a do-while loop in the read function.
 */
void adc_init(uint8_t channel)
{
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	0f 92       	push	r0
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	89 83       	std	Y+1, r24	; 0x01
	ADMUX  = (ADC_REFS | channel);	 // setup ADC Vref and channel
     e06:	ec e7       	ldi	r30, 0x7C	; 124
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	80 64       	ori	r24, 0x40	; 64
     e0e:	80 83       	st	Z, r24
	ADCSRA = (ADC_ENABLE | ADC_PRESCALE);// Enable ADC (bit 7) & set prescaler
     e10:	ea e7       	ldi	r30, 0x7A	; 122
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	86 e8       	ldi	r24, 0x86	; 134
     e16:	80 83       	st	Z, r24

	ADMUX &= 0xF0;						// clobber the channel
     e18:	ac e7       	ldi	r26, 0x7C	; 124
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	ec e7       	ldi	r30, 0x7C	; 124
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	80 7f       	andi	r24, 0xF0	; 240
     e24:	8c 93       	st	X, r24
	ADMUX |= 0x0F & ADC_CHANNEL;		// set the channel
     e26:	ac e7       	ldi	r26, 0x7C	; 124
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	ec e7       	ldi	r30, 0x7C	; 124
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	8c 93       	st	X, r24
	DIDR0 = (1<<channel);				// disable digital input
     e32:	ee e7       	ldi	r30, 0x7E	; 126
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <adc_init+0x4e>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <adc_init+0x4a>
     e4c:	80 83       	st	Z, r24
}
     e4e:	0f 90       	pop	r0
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <adc_read>:

uint16_t adc_read()
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	0f 92       	push	r0
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	do {
		ADCSRA |= ADC_START_CONVERSION; // start the conversion
     e60:	aa e7       	ldi	r26, 0x7A	; 122
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ea e7       	ldi	r30, 0x7A	; 122
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 64       	ori	r24, 0x40	; 64
     e6c:	8c 93       	st	X, r24
		while (ADCSRA && (1<<ADIF) == 0);// wait about 100 uSec
     e6e:	ea e7       	ldi	r30, 0x7A	; 122
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
		ADCSRA |= (1<<ADIF);			// clear the conversion flag
     e74:	aa e7       	ldi	r26, 0x7A	; 122
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	ea e7       	ldi	r30, 0x7A	; 122
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	80 61       	ori	r24, 0x10	; 16
     e80:	8c 93       	st	X, r24
	} while (ADC == 0);					// try it again if the reading was zero (HACK)
     e82:	e8 e7       	ldi	r30, 0x78	; 120
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	91 81       	ldd	r25, Z+1	; 0x01
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	49 f3       	breq	.-46     	; 0xe60 <adc_read+0xa>
	return (ADC);
     e8e:	e8 e7       	ldi	r30, 0x78	; 120
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	91 81       	ldd	r25, Z+1	; 0x01
}
     e96:	0f 90       	pop	r0
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <pwm_init>:
 * 	Configure timer 2 for extruder heater PWM
 *	Mode: 8 bit Fast PWM Fast w/OCR2A setting PWM freq (TOP value)
 *		  and OCR2B setting the duty cycle as a fraction of OCR2A seeting
 */
void pwm_init(void)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
	TCCR2A  = PWM_INVERTED;		// alternative is PWM_NONINVERTED
     ea6:	e0 eb       	ldi	r30, 0xB0	; 176
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 ef       	ldi	r24, 0xF0	; 240
     eac:	80 83       	st	Z, r24
	TCCR2A |= 0b00000011;		// Waveform generation set to MODE 7 - here...
     eae:	a0 eb       	ldi	r26, 0xB0	; 176
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e0 eb       	ldi	r30, 0xB0	; 176
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	83 60       	ori	r24, 0x03	; 3
     eba:	8c 93       	st	X, r24
	TCCR2B  = 0b00001000;		// ...continued here
     ebc:	e1 eb       	ldi	r30, 0xB1	; 177
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	88 e0       	ldi	r24, 0x08	; 8
     ec2:	80 83       	st	Z, r24
	TCCR2B |= PWM_PRESCALE_SET;	// set clock and prescaler
     ec4:	a1 eb       	ldi	r26, 0xB1	; 177
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e1 eb       	ldi	r30, 0xB1	; 177
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	84 60       	ori	r24, 0x04	; 4
     ed0:	8c 93       	st	X, r24
	TIMSK1 = 0; 				// disable PWM interrupts
     ed2:	ef e6       	ldi	r30, 0x6F	; 111
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	10 82       	st	Z, r1
	OCR2A = 0;					// clear PWM frequency (TOP value)
     ed8:	e3 eb       	ldi	r30, 0xB3	; 179
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	10 82       	st	Z, r1
	OCR2B = 0;					// clear PWM duty cycle as % of TOP value
     ede:	e4 eb       	ldi	r30, 0xB4	; 180
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	10 82       	st	Z, r1
	device.pwm_freq = 0;
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a0 e0       	ldi	r26, 0x00	; 0
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	80 93 b6 01 	sts	0x01B6, r24
     ef0:	90 93 b7 01 	sts	0x01B7, r25
     ef4:	a0 93 b8 01 	sts	0x01B8, r26
     ef8:	b0 93 b9 01 	sts	0x01B9, r27
}
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <pwm_on>:

void pwm_on(double freq, double duty)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	28 97       	sbiw	r28, 0x08	; 8
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	69 83       	std	Y+1, r22	; 0x01
     f18:	7a 83       	std	Y+2, r23	; 0x02
     f1a:	8b 83       	std	Y+3, r24	; 0x03
     f1c:	9c 83       	std	Y+4, r25	; 0x04
     f1e:	2d 83       	std	Y+5, r18	; 0x05
     f20:	3e 83       	std	Y+6, r19	; 0x06
     f22:	4f 83       	std	Y+7, r20	; 0x07
     f24:	58 87       	std	Y+8, r21	; 0x08
	pwm_init();
     f26:	0e 94 4f 07 	call	0xe9e	; 0xe9e <pwm_init>
	pwm_set_freq(freq);
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	ab 81       	ldd	r26, Y+3	; 0x03
     f30:	bc 81       	ldd	r27, Y+4	; 0x04
     f32:	bc 01       	movw	r22, r24
     f34:	cd 01       	movw	r24, r26
     f36:	0e 94 bf 07 	call	0xf7e	; 0xf7e <pwm_set_freq>
	pwm_set_duty(duty);
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	af 81       	ldd	r26, Y+7	; 0x07
     f40:	b8 85       	ldd	r27, Y+8	; 0x08
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	0e 94 29 08 	call	0x1052	; 0x1052 <pwm_set_duty>
}
     f4a:	28 96       	adiw	r28, 0x08	; 8
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	f8 94       	cli
     f50:	de bf       	out	0x3e, r29	; 62
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	cd bf       	out	0x3d, r28	; 61
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <pwm_off>:

void pwm_off(void)
{
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
	pwm_on(0,0);
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	0e 94 81 07 	call	0xf02	; 0xf02 <pwm_on>
}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <pwm_set_freq>:
 *
 *	At current settings the range is from about 500 Hz to about 6000 Hz  
 */

uint8_t pwm_set_freq(double freq)
{
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	00 d0       	rcall	.+0      	; 0xf88 <pwm_set_freq+0xa>
     f88:	00 d0       	rcall	.+0      	; 0xf8a <pwm_set_freq+0xc>
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	69 83       	std	Y+1, r22	; 0x01
     f90:	7a 83       	std	Y+2, r23	; 0x02
     f92:	8b 83       	std	Y+3, r24	; 0x03
     f94:	9c 83       	std	Y+4, r25	; 0x04
	device.pwm_freq = F_CPU / PWM_PRESCALE / freq;
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	74 e2       	ldi	r23, 0x24	; 36
     f9a:	84 ef       	ldi	r24, 0xF4	; 244
     f9c:	97 e4       	ldi	r25, 0x47	; 71
     f9e:	29 81       	ldd	r18, Y+1	; 0x01
     fa0:	3a 81       	ldd	r19, Y+2	; 0x02
     fa2:	4b 81       	ldd	r20, Y+3	; 0x03
     fa4:	5c 81       	ldd	r21, Y+4	; 0x04
     fa6:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__divsf3>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	80 93 b6 01 	sts	0x01B6, r24
     fb2:	90 93 b7 01 	sts	0x01B7, r25
     fb6:	a0 93 b8 01 	sts	0x01B8, r26
     fba:	b0 93 b9 01 	sts	0x01B9, r27
	if (device.pwm_freq < PWM_MIN_RES) { 
     fbe:	80 91 b6 01 	lds	r24, 0x01B6
     fc2:	90 91 b7 01 	lds	r25, 0x01B7
     fc6:	a0 91 b8 01 	lds	r26, 0x01B8
     fca:	b0 91 b9 01 	lds	r27, 0x01B9
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 ea       	ldi	r20, 0xA0	; 160
     fd8:	51 e4       	ldi	r21, 0x41	; 65
     fda:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__cmpsf2>
     fde:	88 23       	and	r24, r24
     fe0:	2c f4       	brge	.+10     	; 0xfec <pwm_set_freq+0x6e>
		OCR2A = PWM_MIN_RES;
     fe2:	e3 eb       	ldi	r30, 0xB3	; 179
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	84 e1       	ldi	r24, 0x14	; 20
     fe8:	80 83       	st	Z, r24
     fea:	29 c0       	rjmp	.+82     	; 0x103e <pwm_set_freq+0xc0>
	} else if (device.pwm_freq >= PWM_MAX_RES) { 
     fec:	80 91 b6 01 	lds	r24, 0x01B6
     ff0:	90 91 b7 01 	lds	r25, 0x01B7
     ff4:	a0 91 b8 01 	lds	r26, 0x01B8
     ff8:	b0 91 b9 01 	lds	r27, 0x01B9
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	4f e7       	ldi	r20, 0x7F	; 127
    1006:	53 e4       	ldi	r21, 0x43	; 67
    1008:	0e 94 31 11 	call	0x2262	; 0x2262 <__gesf2>
    100c:	88 23       	and	r24, r24
    100e:	2c f0       	brlt	.+10     	; 0x101a <pwm_set_freq+0x9c>
		OCR2A = PWM_MAX_RES;
    1010:	e3 eb       	ldi	r30, 0xB3	; 179
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	8f ef       	ldi	r24, 0xFF	; 255
    1016:	80 83       	st	Z, r24
    1018:	12 c0       	rjmp	.+36     	; 0x103e <pwm_set_freq+0xc0>
	} else { 
		OCR2A = (uint8_t)device.pwm_freq;
    101a:	03 eb       	ldi	r16, 0xB3	; 179
    101c:	10 e0       	ldi	r17, 0x00	; 0
    101e:	80 91 b6 01 	lds	r24, 0x01B6
    1022:	90 91 b7 01 	lds	r25, 0x01B7
    1026:	a0 91 b8 01 	lds	r26, 0x01B8
    102a:	b0 91 b9 01 	lds	r27, 0x01B9
    102e:	bc 01       	movw	r22, r24
    1030:	cd 01       	movw	r24, r26
    1032:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__fixunssfsi>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	f8 01       	movw	r30, r16
    103c:	80 83       	st	Z, r24
	}
	return (SC_OK);
    103e:	80 e0       	ldi	r24, 0x00	; 0
}
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	08 95       	ret

00001052 <pwm_set_duty>:
 *	Since I can't seem to get the output pin to work in non-inverted mode
 *	it's done in software in this routine.
 */

uint8_t pwm_set_duty(double duty)
{
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	00 d0       	rcall	.+0      	; 0x1064 <pwm_set_duty+0x12>
    1064:	00 d0       	rcall	.+0      	; 0x1066 <pwm_set_duty+0x14>
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	69 83       	std	Y+1, r22	; 0x01
    106c:	7a 83       	std	Y+2, r23	; 0x02
    106e:	8b 83       	std	Y+3, r24	; 0x03
    1070:	9c 83       	std	Y+4, r25	; 0x04
	if (duty < 0.01) {				// anything approaching 0% 
    1072:	69 81       	ldd	r22, Y+1	; 0x01
    1074:	7a 81       	ldd	r23, Y+2	; 0x02
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	9c 81       	ldd	r25, Y+4	; 0x04
    107a:	2a e0       	ldi	r18, 0x0A	; 10
    107c:	37 ed       	ldi	r19, 0xD7	; 215
    107e:	43 e2       	ldi	r20, 0x23	; 35
    1080:	5c e3       	ldi	r21, 0x3C	; 60
    1082:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__cmpsf2>
    1086:	88 23       	and	r24, r24
    1088:	2c f4       	brge	.+10     	; 0x1094 <pwm_set_duty+0x42>
		OCR2B = 255;
    108a:	e4 eb       	ldi	r30, 0xB4	; 180
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	8f ef       	ldi	r24, 0xFF	; 255
    1090:	80 83       	st	Z, r24
    1092:	4a c0       	rjmp	.+148    	; 0x1128 <pwm_set_duty+0xd6>
	} else if (duty > 99.9) { 		// anything approaching 100%
    1094:	69 81       	ldd	r22, Y+1	; 0x01
    1096:	7a 81       	ldd	r23, Y+2	; 0x02
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	2d ec       	ldi	r18, 0xCD	; 205
    109e:	3c ec       	ldi	r19, 0xCC	; 204
    10a0:	47 ec       	ldi	r20, 0xC7	; 199
    10a2:	52 e4       	ldi	r21, 0x42	; 66
    10a4:	0e 94 31 11 	call	0x2262	; 0x2262 <__gesf2>
    10a8:	18 16       	cp	r1, r24
    10aa:	24 f4       	brge	.+8      	; 0x10b4 <pwm_set_duty+0x62>
		OCR2B = 0;
    10ac:	e4 eb       	ldi	r30, 0xB4	; 180
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	10 82       	st	Z, r1
    10b2:	3a c0       	rjmp	.+116    	; 0x1128 <pwm_set_duty+0xd6>
	} else {
		OCR2B = (uint8_t)(OCR2A * (1-(duty/100)));
    10b4:	0f 2e       	mov	r0, r31
    10b6:	f4 eb       	ldi	r31, 0xB4	; 180
    10b8:	cf 2e       	mov	r12, r31
    10ba:	dd 24       	eor	r13, r13
    10bc:	f0 2d       	mov	r31, r0
    10be:	e3 eb       	ldi	r30, 0xB3	; 179
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	aa 27       	eor	r26, r26
    10ca:	97 fd       	sbrc	r25, 7
    10cc:	a0 95       	com	r26
    10ce:	ba 2f       	mov	r27, r26
    10d0:	bc 01       	movw	r22, r24
    10d2:	cd 01       	movw	r24, r26
    10d4:	0e 94 81 10 	call	0x2102	; 0x2102 <__floatsisf>
    10d8:	7b 01       	movw	r14, r22
    10da:	8c 01       	movw	r16, r24
    10dc:	69 81       	ldd	r22, Y+1	; 0x01
    10de:	7a 81       	ldd	r23, Y+2	; 0x02
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	48 ec       	ldi	r20, 0xC8	; 200
    10ea:	52 ec       	ldi	r21, 0xC2	; 194
    10ec:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__divsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	bc 01       	movw	r22, r24
    10f6:	cd 01       	movw	r24, r26
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	40 e8       	ldi	r20, 0x80	; 128
    10fe:	5f e3       	ldi	r21, 0x3F	; 63
    1100:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__addsf3>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9c 01       	movw	r18, r24
    110a:	ad 01       	movw	r20, r26
    110c:	c8 01       	movw	r24, r16
    110e:	b7 01       	movw	r22, r14
    1110:	0e 94 35 11 	call	0x226a	; 0x226a <__mulsf3>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	f6 01       	movw	r30, r12
    1126:	80 83       	st	Z, r24
	}
	OCR2A = (uint8_t)device.pwm_freq;
    1128:	03 eb       	ldi	r16, 0xB3	; 179
    112a:	10 e0       	ldi	r17, 0x00	; 0
    112c:	80 91 b6 01 	lds	r24, 0x01B6
    1130:	90 91 b7 01 	lds	r25, 0x01B7
    1134:	a0 91 b8 01 	lds	r26, 0x01B8
    1138:	b0 91 b9 01 	lds	r27, 0x01B9
    113c:	bc 01       	movw	r22, r24
    113e:	cd 01       	movw	r24, r26
    1140:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__fixunssfsi>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	f8 01       	movw	r30, r16
    114a:	80 83       	st	Z, r24
	return (SC_OK);
    114c:	80 e0       	ldi	r24, 0x00	; 0
}
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	df 90       	pop	r13
    1164:	cf 90       	pop	r12
    1166:	08 95       	ret

00001168 <tick_init>:
 * tick_100ms()	  - tasks that run every 100 ms
 * tick_1sec()	  - tasks that run every 100 ms
 */

void tick_init(void)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0x00;					// normal mode, no compare values
    1170:	e4 e4       	ldi	r30, 0x44	; 68
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	10 82       	st	Z, r1
	TCCR0B = 0x05;					// normal mode, internal clock / 1024 ~= 7800 Hz
    1176:	e5 e4       	ldi	r30, 0x45	; 69
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	85 e0       	ldi	r24, 0x05	; 5
    117c:	80 83       	st	Z, r24
	TCNT0 = (256 - TICK_10MS_COUNT);// set timer for approx 10 ms overflow
    117e:	e6 e4       	ldi	r30, 0x46	; 70
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	82 eb       	ldi	r24, 0xB2	; 178
    1184:	80 83       	st	Z, r24
	TIMSK0 = (1<<TOIE0);			// enable overflow interrupts
    1186:	ee e6       	ldi	r30, 0x6E	; 110
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 83       	st	Z, r24
	device.tick_100ms_count = 10;
    118e:	8a e0       	ldi	r24, 0x0A	; 10
    1190:	80 93 b4 01 	sts	0x01B4, r24
	device.tick_1sec_count = 10;	
    1194:	8a e0       	ldi	r24, 0x0A	; 10
    1196:	80 93 b5 01 	sts	0x01B5, r24
}
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
    11a0:	1f 92       	push	r1
    11a2:	0f 92       	push	r0
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	0f 92       	push	r0
    11a8:	11 24       	eor	r1, r1
    11aa:	8f 93       	push	r24
    11ac:	ef 93       	push	r30
    11ae:	ff 93       	push	r31
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = (256 - TICK_10MS_COUNT);// reset timer for approx 10 ms overflow
    11b8:	e6 e4       	ldi	r30, 0x46	; 70
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	82 eb       	ldi	r24, 0xB2	; 178
    11be:	80 83       	st	Z, r24
	device.tick_flag = true;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	80 93 b3 01 	sts	0x01B3, r24
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	ff 91       	pop	r31
    11cc:	ef 91       	pop	r30
    11ce:	8f 91       	pop	r24
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	0f 90       	pop	r0
    11d6:	1f 90       	pop	r1
    11d8:	18 95       	reti

000011da <tick_callback>:

uint8_t tick_callback(void)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	if (device.tick_flag == false) { return (SC_NOOP);}
    11e4:	80 91 b3 01 	lds	r24, 0x01B3
    11e8:	88 23       	and	r24, r24
    11ea:	19 f4       	brne	.+6      	; 0x11f2 <tick_callback+0x18>
    11ec:	83 e0       	ldi	r24, 0x03	; 3
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	25 c0       	rjmp	.+74     	; 0x123c <tick_callback+0x62>

	device.tick_flag = false;
    11f2:	10 92 b3 01 	sts	0x01B3, r1
	tick_10ms();
    11f6:	0e 94 23 09 	call	0x1246	; 0x1246 <tick_10ms>

	if (--device.tick_100ms_count != 0) { return (SC_OK);}
    11fa:	80 91 b4 01 	lds	r24, 0x01B4
    11fe:	81 50       	subi	r24, 0x01	; 1
    1200:	80 93 b4 01 	sts	0x01B4, r24
    1204:	80 91 b4 01 	lds	r24, 0x01B4
    1208:	88 23       	and	r24, r24
    120a:	11 f0       	breq	.+4      	; 0x1210 <tick_callback+0x36>
    120c:	19 82       	std	Y+1, r1	; 0x01
    120e:	16 c0       	rjmp	.+44     	; 0x123c <tick_callback+0x62>
	device.tick_100ms_count = 10;
    1210:	8a e0       	ldi	r24, 0x0A	; 10
    1212:	80 93 b4 01 	sts	0x01B4, r24
	tick_100ms();
    1216:	0e 94 2c 09 	call	0x1258	; 0x1258 <tick_100ms>

	if (--device.tick_1sec_count != 0) { return (SC_OK);}
    121a:	80 91 b5 01 	lds	r24, 0x01B5
    121e:	81 50       	subi	r24, 0x01	; 1
    1220:	80 93 b5 01 	sts	0x01B5, r24
    1224:	80 91 b5 01 	lds	r24, 0x01B5
    1228:	88 23       	and	r24, r24
    122a:	11 f0       	breq	.+4      	; 0x1230 <tick_callback+0x56>
    122c:	19 82       	std	Y+1, r1	; 0x01
    122e:	06 c0       	rjmp	.+12     	; 0x123c <tick_callback+0x62>
	device.tick_1sec_count = 10;
    1230:	8a e0       	ldi	r24, 0x0A	; 10
    1232:	80 93 b5 01 	sts	0x01B5, r24
	tick_1sec();
    1236:	0e 94 35 09 	call	0x126a	; 0x126a <tick_1sec>

	return (SC_OK);
    123a:	19 82       	std	Y+1, r1	; 0x01
    123c:	89 81       	ldd	r24, Y+1	; 0x01
}
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <tick_10ms>:

void tick_10ms(void)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
	sensor_callback();			// run the temperature sensor every 10 ms.
    124e:	0e 94 83 05 	call	0xb06	; 0xb06 <sensor_callback>
}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <tick_100ms>:

void tick_100ms(void)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
	heater_callback();			// run the heater controller every 100 ms.
    1260:	0e 94 76 01 	call	0x2ec	; 0x2ec <heater_callback>
}
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <tick_1sec>:

void tick_1sec(void)
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
//	led_toggle();
	return;
}
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <led_on>:
 * led_off()
 * led_toggle()
 */

void led_on(void) 
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
	LED_PORT &= ~(LED_PIN);
    1280:	ab e2       	ldi	r26, 0x2B	; 43
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	eb e2       	ldi	r30, 0x2B	; 43
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8b 7f       	andi	r24, 0xFB	; 251
    128c:	8c 93       	st	X, r24
}
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <led_off>:

void led_off(void) 
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	LED_PORT |= LED_PIN;
    129c:	ab e2       	ldi	r26, 0x2B	; 43
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	eb e2       	ldi	r30, 0x2B	; 43
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	84 60       	ori	r24, 0x04	; 4
    12a8:	8c 93       	st	X, r24
}
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <led_toggle>:

void led_toggle(void) 
{
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
	if (LED_PORT && LED_PIN) {
    12b8:	eb e2       	ldi	r30, 0x2B	; 43
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	88 23       	and	r24, r24
    12c0:	19 f0       	breq	.+6      	; 0x12c8 <led_toggle+0x18>
		led_on();
    12c2:	0e 94 3c 09 	call	0x1278	; 0x1278 <led_on>
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <led_toggle+0x1c>
	} else {
		led_off();
    12c8:	0e 94 4a 09 	call	0x1294	; 0x1294 <led_off>
	}
}
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <device_reset>:
 *	device_read_byte() 	- read a byte from Kinen channel into device structs
 *	device_write_byte() - write a byte from device to Kinen channel
 */

void device_reset(void)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
	return;
}
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <device_read_byte>:

uint8_t device_read_byte(uint8_t addr, uint8_t *data)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <device_read_byte+0x6>
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <device_read_byte+0x8>
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	7b 83       	std	Y+3, r23	; 0x03
    12f0:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	80 51       	subi	r24, 0x10	; 16
    12f6:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	8b 30       	cpi	r24, 0x0B	; 11
    12fc:	18 f0       	brcs	.+6      	; 0x1304 <device_read_byte+0x24>
    12fe:	88 e1       	ldi	r24, 0x18	; 24
    1300:	8c 83       	std	Y+4, r24	; 0x04
    1302:	0b c0       	rjmp	.+22     	; 0x131a <device_read_byte+0x3a>
	*data = device.array[addr];
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	fc 01       	movw	r30, r24
    130c:	e6 54       	subi	r30, 0x46	; 70
    130e:	fe 4f       	sbci	r31, 0xFE	; 254
    1310:	80 81       	ld	r24, Z
    1312:	ea 81       	ldd	r30, Y+2	; 0x02
    1314:	fb 81       	ldd	r31, Y+3	; 0x03
    1316:	80 83       	st	Z, r24
	return (SC_OK);
    1318:	1c 82       	std	Y+4, r1	; 0x04
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <device_write_byte>:

uint8_t device_write_byte(uint8_t addr, uint8_t data)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	00 d0       	rcall	.+0      	; 0x1330 <device_write_byte+0x6>
    1330:	0f 92       	push	r0
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	80 51       	subi	r24, 0x10	; 16
    133e:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	8b 30       	cpi	r24, 0x0B	; 11
    1344:	18 f0       	brcs	.+6      	; 0x134c <device_write_byte+0x22>
    1346:	88 e1       	ldi	r24, 0x18	; 24
    1348:	8b 83       	std	Y+3, r24	; 0x03
    134a:	09 c0       	rjmp	.+18     	; 0x135e <device_write_byte+0x34>
	// There are no checks in here for read-only locations
	// Assumes all locations are writable.
	device.array[addr] = data;
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	fc 01       	movw	r30, r24
    1354:	e6 54       	subi	r30, 0x46	; 70
    1356:	fe 4f       	sbci	r31, 0xFE	; 254
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	80 83       	st	Z, r24
	return (SC_OK);
    135c:	1b 82       	std	Y+3, r1	; 0x03
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <kinen_init>:
 * kinen_init() - set up Kinen subsystems; master or slave
 *
 *	Would like some kind of auto-detect here. For now it's just commenting
 */
void kinen_init(void)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
//	kinen_master_init();
	kinen_slave_init();
    1374:	0e 94 c7 09 	call	0x138e	; 0x138e <kinen_slave_init>
}
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <kinen_callback>:
 *	Returns SC_NOOP if no operation was performed
 *	Returns EAGAIN if the function should block lower-priority functions
 *	in the main DISPATCH loop
 */
uint8_t kinen_callback(void)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
//	return (SC_OK);			// return from a successful operation
//	return (SC_EAGAIN);		// return if lower priority tasks should be blocked
	return (SC_NOOP);		// return if no operation was performed 
    1386:	83 e0       	ldi	r24, 0x03	; 3
}
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <kinen_slave_init>:

/*
 * kinen_slave_init() - setup atmega SPI peripheral to be the OCB slave 
 */
void kinen_slave_init(void)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62

//	PRR |= 0x07;				// don't screw with the power reduction register
	DDRB &= ~(1<<DDB4);			// Set MISO output, all others unaffected
    1396:	a4 e2       	ldi	r26, 0x24	; 36
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e4 e2       	ldi	r30, 0x24	; 36
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	8f 7e       	andi	r24, 0xEF	; 239
    13a2:	8c 93       	st	X, r24
	SPCR = (1<<SPIE | 1<<SPE);	// Enable SPI and its interrupt, set MSB first, slave mode
    13a4:	ec e4       	ldi	r30, 0x4C	; 76
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 ec       	ldi	r24, 0xC0	; 192
    13aa:	80 83       	st	Z, r24
	SPCR = (1<<CPOL | 1<<CPHA);	// Uncomment for mode 3 operation, comment for mode 0
    13ac:	ec e4       	ldi	r30, 0x4C	; 76
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	8c e0       	ldi	r24, 0x0C	; 12
    13b2:	80 83       	st	Z, r24
	memset(&ki.array, 0, sizeof(ki.array));
    13b4:	80 e6       	ldi	r24, 0x60	; 96
    13b6:	91 e0       	ldi	r25, 0x01	; 1
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	40 e1       	ldi	r20, 0x10	; 16
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	0e 94 14 12 	call	0x2428	; 0x2428 <memset>

	ki_wait_time = DEVICE_WAIT_TIME;	// setup read-only values
    13c4:	8a e0       	ldi	r24, 0x0A	; 10
    13c6:	80 93 63 01 	sts	0x0163, r24
	ki_device_type = DEVICE_TYPE;
    13ca:	84 e0       	ldi	r24, 0x04	; 4
    13cc:	80 93 68 01 	sts	0x0168, r24
	ki_device_id_hi = DEVICE_ID_HI;
    13d0:	10 92 69 01 	sts	0x0169, r1
	ki_device_id_lo = DEVICE_ID_LO;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	80 93 6a 01 	sts	0x016A, r24
	ki_device_rev_major = DEVICE_REV_MAJOR;
    13da:	10 92 6b 01 	sts	0x016B, r1
	ki_device_rev_minor = DEVICE_REV_MINOR;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	80 93 6c 01 	sts	0x016C, r24
	ki_device_uuid_1 = DEVICE_UUID_1;
    13e4:	10 92 6d 01 	sts	0x016D, r1
	ki_device_uuid_2 = DEVICE_UUID_2;
    13e8:	10 92 6e 01 	sts	0x016E, r1
	ki_device_uuid_3 = DEVICE_UUID_3;
    13ec:	10 92 6f 01 	sts	0x016F, r1

	ki_status = SC_OK;
    13f0:	10 92 61 01 	sts	0x0161, r1
	SPDR = ki_status;
    13f4:	ee e4       	ldi	r30, 0x4E	; 78
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 91 61 01 	lds	r24, 0x0161
    13fc:	80 83       	st	Z, r24
}
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <__vector_17>:
 * SPI Slave RX Interrupt() - interrupts on byte received
 *
 * Uses a 2 phase state machine to toggle back and forth between ADDR and DATA bytes
 */
ISR(SPI_STC_vect)
{
    1404:	1f 92       	push	r1
    1406:	0f 92       	push	r0
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	0f 92       	push	r0
    140c:	11 24       	eor	r1, r1
    140e:	2f 93       	push	r18
    1410:	3f 93       	push	r19
    1412:	4f 93       	push	r20
    1414:	5f 93       	push	r21
    1416:	6f 93       	push	r22
    1418:	7f 93       	push	r23
    141a:	8f 93       	push	r24
    141c:	9f 93       	push	r25
    141e:	af 93       	push	r26
    1420:	bf 93       	push	r27
    1422:	ef 93       	push	r30
    1424:	ff 93       	push	r31
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
	// receive address byte
	if (ki_slave.phase == KINEN_ADDR) {
    142e:	80 91 00 01 	lds	r24, 0x0100
    1432:	88 23       	and	r24, r24
    1434:	c9 f5       	brne	.+114    	; 0x14a8 <__vector_17+0xa4>
		ki_slave.phase = KINEN_DATA;	// advance phase
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	80 93 00 01 	sts	0x0100, r24
		ki_slave.addr = SPDR;		// read and save the address byte
    143c:	ee e4       	ldi	r30, 0x4E	; 78
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	80 93 01 01 	sts	0x0101, r24
		if (ki_command == KINEN_WRITE) { // write is simple...
    1446:	80 91 60 01 	lds	r24, 0x0160
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	29 f4       	brne	.+10     	; 0x1458 <__vector_17+0x54>
			SPDR = KINEN_OK_BYTE;			// already saved addr, now return an OK
    144e:	ee e4       	ldi	r30, 0x4E	; 78
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	8a e5       	ldi	r24, 0x5A	; 90
    1454:	80 83       	st	Z, r24
    1456:	4a c0       	rjmp	.+148    	; 0x14ec <__vector_17+0xe8>
		} else {
			if (ki_slave.addr < KINEN_COMMON_MAX) {	// handle OCB address space
    1458:	80 91 01 01 	lds	r24, 0x0101
    145c:	80 31       	cpi	r24, 0x10	; 16
    145e:	60 f4       	brcc	.+24     	; 0x1478 <__vector_17+0x74>
				SPDR = ki.array[ki_slave.addr];
    1460:	ae e4       	ldi	r26, 0x4E	; 78
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	80 91 01 01 	lds	r24, 0x0101
    1468:	88 2f       	mov	r24, r24
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	fc 01       	movw	r30, r24
    146e:	e0 5a       	subi	r30, 0xA0	; 160
    1470:	fe 4f       	sbci	r31, 0xFE	; 254
    1472:	80 81       	ld	r24, Z
    1474:	8c 93       	st	X, r24
    1476:	3a c0       	rjmp	.+116    	; 0x14ec <__vector_17+0xe8>
			} else {								// handle device address space
				if ((ki_status = device_read_byte(ki_slave.addr, &ki_slave.data)) == SC_OK) {
    1478:	80 91 01 01 	lds	r24, 0x0101
    147c:	22 e0       	ldi	r18, 0x02	; 2
    147e:	31 e0       	ldi	r19, 0x01	; 1
    1480:	b9 01       	movw	r22, r18
    1482:	0e 94 70 09 	call	0x12e0	; 0x12e0 <device_read_byte>
    1486:	80 93 61 01 	sts	0x0161, r24
    148a:	80 91 61 01 	lds	r24, 0x0161
    148e:	88 23       	and	r24, r24
    1490:	31 f4       	brne	.+12     	; 0x149e <__vector_17+0x9a>
					SPDR = ki_slave.data;
    1492:	ee e4       	ldi	r30, 0x4E	; 78
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 91 02 01 	lds	r24, 0x0102
    149a:	80 83       	st	Z, r24
    149c:	27 c0       	rjmp	.+78     	; 0x14ec <__vector_17+0xe8>
				} else {
					SPDR = KINEN_ERR_BYTE;
    149e:	ee e4       	ldi	r30, 0x4E	; 78
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	85 ea       	ldi	r24, 0xA5	; 165
    14a4:	80 83       	st	Z, r24
    14a6:	22 c0       	rjmp	.+68     	; 0x14ec <__vector_17+0xe8>
			}
		}

	// receive data byte
	} else {
		ki_slave.phase = KINEN_ADDR;	// advance phase
    14a8:	10 92 00 01 	sts	0x0100, r1
		ki_slave.data = SPDR;		// read and save the data byte
    14ac:	ee e4       	ldi	r30, 0x4E	; 78
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	80 93 02 01 	sts	0x0102, r24
		if (ki_command == KINEN_WRITE) {
    14b6:	80 91 60 01 	lds	r24, 0x0160
    14ba:	81 30       	cpi	r24, 0x01	; 1
    14bc:	b9 f4       	brne	.+46     	; 0x14ec <__vector_17+0xe8>
			if (ki_slave.addr < KINEN_COMMON_MAX) {
    14be:	80 91 01 01 	lds	r24, 0x0101
    14c2:	80 31       	cpi	r24, 0x10	; 16
    14c4:	50 f4       	brcc	.+20     	; 0x14da <__vector_17+0xd6>
				ki_status = _slave_write_byte(ki_slave.addr, ki_slave.data);
    14c6:	80 91 01 01 	lds	r24, 0x0101
    14ca:	90 91 02 01 	lds	r25, 0x0102
    14ce:	69 2f       	mov	r22, r25
    14d0:	0e 94 89 0a 	call	0x1512	; 0x1512 <_slave_write_byte>
    14d4:	80 93 61 01 	sts	0x0161, r24
    14d8:	09 c0       	rjmp	.+18     	; 0x14ec <__vector_17+0xe8>
			} else {
				ki_status = device_write_byte(ki_slave.addr, ki_slave.data);
    14da:	80 91 01 01 	lds	r24, 0x0101
    14de:	90 91 02 01 	lds	r25, 0x0102
    14e2:	69 2f       	mov	r22, r25
    14e4:	0e 94 95 09 	call	0x132a	; 0x132a <device_write_byte>
    14e8:	80 93 61 01 	sts	0x0161, r24
			}
		}
	}
}
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	ff 91       	pop	r31
    14f2:	ef 91       	pop	r30
    14f4:	bf 91       	pop	r27
    14f6:	af 91       	pop	r26
    14f8:	9f 91       	pop	r25
    14fa:	8f 91       	pop	r24
    14fc:	7f 91       	pop	r23
    14fe:	6f 91       	pop	r22
    1500:	5f 91       	pop	r21
    1502:	4f 91       	pop	r20
    1504:	3f 91       	pop	r19
    1506:	2f 91       	pop	r18
    1508:	0f 90       	pop	r0
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	0f 90       	pop	r0
    150e:	1f 90       	pop	r1
    1510:	18 95       	reti

00001512 <_slave_write_byte>:

/* 
 * _slave_write_byte() - helper to write byte to a non-device address
 */
static uint8_t _slave_write_byte(const uint8_t addr, const uint8_t data)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <_slave_write_byte+0x6>
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	6a 83       	std	Y+2, r22	; 0x02
	if (addr == KINEN_COMMAND) {
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	88 23       	and	r24, r24
    1526:	21 f4       	brne	.+8      	; 0x1530 <_slave_write_byte+0x1e>
		ki_command = data; 
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	80 93 60 01 	sts	0x0160, r24
    152e:	12 c0       	rjmp	.+36     	; 0x1554 <_slave_write_byte+0x42>

	} else if (addr == KINEN_ADDR_PAGE) { 
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	84 30       	cpi	r24, 0x04	; 4
    1534:	21 f4       	brne	.+8      	; 0x153e <_slave_write_byte+0x2c>
		ki_addr_page = data; 
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	80 93 64 01 	sts	0x0164, r24
    153c:	0b c0       	rjmp	.+22     	; 0x1554 <_slave_write_byte+0x42>

	} else if (addr == KINEN_RESET) {
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	85 30       	cpi	r24, 0x05	; 5
    1542:	29 f4       	brne	.+10     	; 0x154e <_slave_write_byte+0x3c>
		kinen_slave_init();
    1544:	0e 94 c7 09 	call	0x138e	; 0x138e <kinen_slave_init>
		device_reset();
    1548:	0e 94 69 09 	call	0x12d2	; 0x12d2 <device_reset>
    154c:	03 c0       	rjmp	.+6      	; 0x1554 <_slave_write_byte+0x42>

	} else {
		return (SC_READ_ONLY_ADDRESS);
    154e:	89 e1       	ldi	r24, 0x19	; 25
    1550:	8b 83       	std	Y+3, r24	; 0x03
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <_slave_write_byte+0x44>
	}
	return (SC_OK);
    1554:	1b 82       	std	Y+3, r1	; 0x03
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <std_dev>:
 *
 *	"A lot of people talk about standard deviation but what is a standard deviant?"
 */

double std_dev(double a[], uint8_t n, double *mean) 
{
    1564:	ef 92       	push	r14
    1566:	ff 92       	push	r15
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	66 97       	sbiw	r28, 0x16	; 22
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	9f 87       	std	Y+15, r25	; 0x0f
    1582:	8e 87       	std	Y+14, r24	; 0x0e
    1584:	68 8b       	std	Y+16, r22	; 0x10
    1586:	5a 8b       	std	Y+18, r21	; 0x12
    1588:	49 8b       	std	Y+17, r20	; 0x11
	if(n == 0) { return (0);}
    158a:	88 89       	ldd	r24, Y+16	; 0x10
    158c:	88 23       	and	r24, r24
    158e:	49 f4       	brne	.+18     	; 0x15a2 <std_dev+0x3e>
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	a0 e0       	ldi	r26, 0x00	; 0
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	8b 8b       	std	Y+19, r24	; 0x13
    159a:	9c 8b       	std	Y+20, r25	; 0x14
    159c:	ad 8b       	std	Y+21, r26	; 0x15
    159e:	be 8b       	std	Y+22, r27	; 0x16
    15a0:	ae c0       	rjmp	.+348    	; 0x16fe <std_dev+0x19a>
	double sum = 0;
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a0 e0       	ldi	r26, 0x00	; 0
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	8a 87       	std	Y+10, r24	; 0x0a
    15ac:	9b 87       	std	Y+11, r25	; 0x0b
    15ae:	ac 87       	std	Y+12, r26	; 0x0c
    15b0:	bd 87       	std	Y+13, r27	; 0x0d
	double sq_sum = 0;
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a0 e0       	ldi	r26, 0x00	; 0
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	8e 83       	std	Y+6, r24	; 0x06
    15bc:	9f 83       	std	Y+7, r25	; 0x07
    15be:	a8 87       	std	Y+8, r26	; 0x08
    15c0:	b9 87       	std	Y+9, r27	; 0x09
	for(uint8_t i=0; i<n; ++i) {
    15c2:	19 82       	std	Y+1, r1	; 0x01
    15c4:	43 c0       	rjmp	.+134    	; 0x164c <std_dev+0xe8>
		sum += a[i];
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	88 2f       	mov	r24, r24
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	9c 01       	movw	r18, r24
    15ce:	22 0f       	add	r18, r18
    15d0:	33 1f       	adc	r19, r19
    15d2:	22 0f       	add	r18, r18
    15d4:	33 1f       	adc	r19, r19
    15d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    15d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    15da:	fc 01       	movw	r30, r24
    15dc:	e2 0f       	add	r30, r18
    15de:	f3 1f       	adc	r31, r19
    15e0:	20 81       	ld	r18, Z
    15e2:	31 81       	ldd	r19, Z+1	; 0x01
    15e4:	42 81       	ldd	r20, Z+2	; 0x02
    15e6:	53 81       	ldd	r21, Z+3	; 0x03
    15e8:	6a 85       	ldd	r22, Y+10	; 0x0a
    15ea:	7b 85       	ldd	r23, Y+11	; 0x0b
    15ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    15ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    15f0:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__addsf3>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	8a 87       	std	Y+10, r24	; 0x0a
    15fa:	9b 87       	std	Y+11, r25	; 0x0b
    15fc:	ac 87       	std	Y+12, r26	; 0x0c
    15fe:	bd 87       	std	Y+13, r27	; 0x0d
		sq_sum += square(a[i]);
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	9c 01       	movw	r18, r24
    1608:	22 0f       	add	r18, r18
    160a:	33 1f       	adc	r19, r19
    160c:	22 0f       	add	r18, r18
    160e:	33 1f       	adc	r19, r19
    1610:	8e 85       	ldd	r24, Y+14	; 0x0e
    1612:	9f 85       	ldd	r25, Y+15	; 0x0f
    1614:	fc 01       	movw	r30, r24
    1616:	e2 0f       	add	r30, r18
    1618:	f3 1f       	adc	r31, r19
    161a:	80 81       	ld	r24, Z
    161c:	91 81       	ldd	r25, Z+1	; 0x01
    161e:	a2 81       	ldd	r26, Z+2	; 0x02
    1620:	b3 81       	ldd	r27, Z+3	; 0x03
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	0e 94 da 11 	call	0x23b4	; 0x23b4 <square>
    162a:	9b 01       	movw	r18, r22
    162c:	ac 01       	movw	r20, r24
    162e:	6e 81       	ldd	r22, Y+6	; 0x06
    1630:	7f 81       	ldd	r23, Y+7	; 0x07
    1632:	88 85       	ldd	r24, Y+8	; 0x08
    1634:	99 85       	ldd	r25, Y+9	; 0x09
    1636:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__addsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	8e 83       	std	Y+6, r24	; 0x06
    1640:	9f 83       	std	Y+7, r25	; 0x07
    1642:	a8 87       	std	Y+8, r26	; 0x08
    1644:	b9 87       	std	Y+9, r27	; 0x09
double std_dev(double a[], uint8_t n, double *mean) 
{
	if(n == 0) { return (0);}
	double sum = 0;
	double sq_sum = 0;
	for(uint8_t i=0; i<n; ++i) {
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	8f 5f       	subi	r24, 0xFF	; 255
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	99 81       	ldd	r25, Y+1	; 0x01
    164e:	88 89       	ldd	r24, Y+16	; 0x10
    1650:	98 17       	cp	r25, r24
    1652:	08 f4       	brcc	.+2      	; 0x1656 <std_dev+0xf2>
    1654:	b8 cf       	rjmp	.-144    	; 0x15c6 <std_dev+0x62>
		sum += a[i];
		sq_sum += square(a[i]);
	}
	*mean = sum / n;
    1656:	88 89       	ldd	r24, Y+16	; 0x10
    1658:	88 2f       	mov	r24, r24
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	aa 27       	eor	r26, r26
    165e:	97 fd       	sbrc	r25, 7
    1660:	a0 95       	com	r26
    1662:	ba 2f       	mov	r27, r26
    1664:	bc 01       	movw	r22, r24
    1666:	cd 01       	movw	r24, r26
    1668:	0e 94 81 10 	call	0x2102	; 0x2102 <__floatsisf>
    166c:	9b 01       	movw	r18, r22
    166e:	ac 01       	movw	r20, r24
    1670:	6a 85       	ldd	r22, Y+10	; 0x0a
    1672:	7b 85       	ldd	r23, Y+11	; 0x0b
    1674:	8c 85       	ldd	r24, Y+12	; 0x0c
    1676:	9d 85       	ldd	r25, Y+13	; 0x0d
    1678:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__divsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	e9 89       	ldd	r30, Y+17	; 0x11
    1682:	fa 89       	ldd	r31, Y+18	; 0x12
    1684:	80 83       	st	Z, r24
    1686:	91 83       	std	Z+1, r25	; 0x01
    1688:	a2 83       	std	Z+2, r26	; 0x02
    168a:	b3 83       	std	Z+3, r27	; 0x03
	double variance = (sq_sum / n) - square(*mean);
    168c:	88 89       	ldd	r24, Y+16	; 0x10
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	aa 27       	eor	r26, r26
    1694:	97 fd       	sbrc	r25, 7
    1696:	a0 95       	com	r26
    1698:	ba 2f       	mov	r27, r26
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	0e 94 81 10 	call	0x2102	; 0x2102 <__floatsisf>
    16a2:	9b 01       	movw	r18, r22
    16a4:	ac 01       	movw	r20, r24
    16a6:	6e 81       	ldd	r22, Y+6	; 0x06
    16a8:	7f 81       	ldd	r23, Y+7	; 0x07
    16aa:	88 85       	ldd	r24, Y+8	; 0x08
    16ac:	99 85       	ldd	r25, Y+9	; 0x09
    16ae:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__divsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	7c 01       	movw	r14, r24
    16b8:	8d 01       	movw	r16, r26
    16ba:	e9 89       	ldd	r30, Y+17	; 0x11
    16bc:	fa 89       	ldd	r31, Y+18	; 0x12
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	a2 81       	ldd	r26, Z+2	; 0x02
    16c4:	b3 81       	ldd	r27, Z+3	; 0x03
    16c6:	bc 01       	movw	r22, r24
    16c8:	cd 01       	movw	r24, r26
    16ca:	0e 94 da 11 	call	0x23b4	; 0x23b4 <square>
    16ce:	9b 01       	movw	r18, r22
    16d0:	ac 01       	movw	r20, r24
    16d2:	c8 01       	movw	r24, r16
    16d4:	b7 01       	movw	r22, r14
    16d6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__subsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	8a 83       	std	Y+2, r24	; 0x02
    16e0:	9b 83       	std	Y+3, r25	; 0x03
    16e2:	ac 83       	std	Y+4, r26	; 0x04
    16e4:	bd 83       	std	Y+5, r27	; 0x05
	return sqrt(variance);
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ea:	ac 81       	ldd	r26, Y+4	; 0x04
    16ec:	bd 81       	ldd	r27, Y+5	; 0x05
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 9c 11 	call	0x2338	; 0x2338 <sqrt>
    16f6:	6b 8b       	std	Y+19, r22	; 0x13
    16f8:	7c 8b       	std	Y+20, r23	; 0x14
    16fa:	8d 8b       	std	Y+21, r24	; 0x15
    16fc:	9e 8b       	std	Y+22, r25	; 0x16
    16fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1700:	9c 89       	ldd	r25, Y+20	; 0x14
    1702:	ad 89       	ldd	r26, Y+21	; 0x15
    1704:	be 89       	ldd	r27, Y+22	; 0x16
}
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	66 96       	adiw	r28, 0x16	; 22
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	08 95       	ret

00001724 <set_baud_rate>:
uint8_t rx_buffer_tail = 0;
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_buffer_head = 0;
volatile uint8_t tx_buffer_tail = 0;

static void set_baud_rate(long baud) {
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	00 d0       	rcall	.+0      	; 0x172a <set_baud_rate+0x6>
    172a:	00 d0       	rcall	.+0      	; 0x172c <set_baud_rate+0x8>
    172c:	00 d0       	rcall	.+0      	; 0x172e <set_baud_rate+0xa>
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	6b 83       	std	Y+3, r22	; 0x03
    1734:	7c 83       	std	Y+4, r23	; 0x04
    1736:	8d 83       	std	Y+5, r24	; 0x05
    1738:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t UBRR0_value = (F_CPU / (8 * baud)) - 1;
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	ad 81       	ldd	r26, Y+5	; 0x05
    1740:	be 81       	ldd	r27, Y+6	; 0x06
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	aa 1f       	adc	r26, r26
    1748:	bb 1f       	adc	r27, r27
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	aa 1f       	adc	r26, r26
    1750:	bb 1f       	adc	r27, r27
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	aa 1f       	adc	r26, r26
    1758:	bb 1f       	adc	r27, r27
    175a:	9c 01       	movw	r18, r24
    175c:	ad 01       	movw	r20, r26
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	92 e1       	ldi	r25, 0x12	; 18
    1762:	aa e7       	ldi	r26, 0x7A	; 122
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__udivmodsi4>
    176e:	da 01       	movw	r26, r20
    1770:	c9 01       	movw	r24, r18
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	9a 83       	std	Y+2, r25	; 0x02
    1776:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = UBRR0_value >> 8;
    1778:	e5 ec       	ldi	r30, 0xC5	; 197
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	9a 81       	ldd	r25, Y+2	; 0x02
    1780:	89 2f       	mov	r24, r25
    1782:	99 27       	eor	r25, r25
    1784:	80 83       	st	Z, r24
	UBRR0L = UBRR0_value;
    1786:	e4 ec       	ldi	r30, 0xC4	; 196
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	80 83       	st	Z, r24
	UCSR0A &= ~(1<<U2X0);		// baud doubler off
    178e:	a0 ec       	ldi	r26, 0xC0	; 192
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e0 ec       	ldi	r30, 0xC0	; 192
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	8d 7f       	andi	r24, 0xFD	; 253
    179a:	8c 93       	st	X, r24
}
    179c:	26 96       	adiw	r28, 0x06	; 6
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <serial_init>:

void serial_init(long baud)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <serial_init+0x6>
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <serial_init+0x8>
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	69 83       	std	Y+1, r22	; 0x01
    17bc:	7a 83       	std	Y+2, r23	; 0x02
    17be:	8b 83       	std	Y+3, r24	; 0x03
    17c0:	9c 83       	std	Y+4, r25	; 0x04
	set_baud_rate(baud);
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	ab 81       	ldd	r26, Y+3	; 0x03
    17c8:	bc 81       	ldd	r27, Y+4	; 0x04
    17ca:	bc 01       	movw	r22, r24
    17cc:	cd 01       	movw	r24, r26
    17ce:	0e 94 92 0b 	call	0x1724	; 0x1724 <set_baud_rate>
	UCSR0B |= 1<<RXEN0;			// enable rx and tx
    17d2:	a1 ec       	ldi	r26, 0xC1	; 193
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e1 ec       	ldi	r30, 0xC1	; 193
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	80 61       	ori	r24, 0x10	; 16
    17de:	8c 93       	st	X, r24
	UCSR0B |= 1<<TXEN0;	
    17e0:	a1 ec       	ldi	r26, 0xC1	; 193
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e1 ec       	ldi	r30, 0xC1	; 193
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	88 60       	ori	r24, 0x08	; 8
    17ec:	8c 93       	st	X, r24
	UCSR0B |= 1<<RXCIE0;		// enable interrupt on complete reception of a byte
    17ee:	a1 ec       	ldi	r26, 0xC1	; 193
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e1 ec       	ldi	r30, 0xC1	; 193
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	80 68       	ori	r24, 0x80	; 128
    17fa:	8c 93       	st	X, r24
	// USART defaults to 8-bit, no parity, 1 stop bit
}
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <serial_write>:

void serial_write(uint8_t data) {
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	00 d0       	rcall	.+0      	; 0x1810 <serial_write+0x6>
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = tx_buffer_head + 1;	// Calculate next head
    1816:	80 91 05 01 	lds	r24, 0x0105
    181a:	8f 5f       	subi	r24, 0xFF	; 255
    181c:	89 83       	std	Y+1, r24	; 0x01
	if (next_head == TX_BUFFER_SIZE) {
		next_head = 0; 
	}
	// Enable Data Register Empty Interrupt to make sure tx-streaming is running
	UCSR0B |= (1<<UDRIE0); 
    181e:	a1 ec       	ldi	r26, 0xC1	; 193
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e1 ec       	ldi	r30, 0xC1	; 193
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	80 62       	ori	r24, 0x20	; 32
    182a:	8c 93       	st	X, r24
	while (next_head == tx_buffer_tail); 	// Wait until there is space in the buffer
    182c:	90 91 06 01 	lds	r25, 0x0106
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	89 17       	cp	r24, r25
    1834:	d9 f3       	breq	.-10     	; 0x182c <serial_write+0x22>

	tx_buffer[tx_buffer_head] = data;		// Store data and advance head
    1836:	80 91 05 01 	lds	r24, 0x0105
    183a:	88 2f       	mov	r24, r24
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	fc 01       	movw	r30, r24
    1840:	eb 53       	subi	r30, 0x3B	; 59
    1842:	fd 4f       	sbci	r31, 0xFD	; 253
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	80 83       	st	Z, r24
	tx_buffer_head = next_head;
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	80 93 05 01 	sts	0x0105, r24
}
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <__vector_19>:

// Data Register Empty Interrupt handler
ISR(USART_UDRE_vect)
{
    1858:	1f 92       	push	r1
    185a:	0f 92       	push	r0
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	0f 92       	push	r0
    1860:	11 24       	eor	r1, r1
    1862:	8f 93       	push	r24
    1864:	9f 93       	push	r25
    1866:	af 93       	push	r26
    1868:	bf 93       	push	r27
    186a:	ef 93       	push	r30
    186c:	ff 93       	push	r31
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	0f 92       	push	r0
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
	uint8_t tail = tx_buffer_tail;	// Temporary tx_buffer_tail (to optimize for volatile)
    1878:	80 91 06 01 	lds	r24, 0x0106
    187c:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = tx_buffer[tail];			// Send a byte from the buffer	
    187e:	a6 ec       	ldi	r26, 0xC6	; 198
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	88 2f       	mov	r24, r24
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	fc 01       	movw	r30, r24
    188a:	eb 53       	subi	r30, 0x3B	; 59
    188c:	fd 4f       	sbci	r31, 0xFD	; 253
    188e:	80 81       	ld	r24, Z
    1890:	8c 93       	st	X, r24
    tail++;							// Update tail position
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	8f 5f       	subi	r24, 0xFF	; 255
    1896:	89 83       	std	Y+1, r24	; 0x01
    if (tail == TX_BUFFER_SIZE) { tail = 0; }
	tx_buffer_tail = tail;
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	80 93 06 01 	sts	0x0106, r24

	// Turn off Data Register Empty Interrupt to stop tx-streaming if this concludes the transfer
	if (tail == tx_buffer_head) { 
    189e:	90 91 05 01 	lds	r25, 0x0105
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	89 17       	cp	r24, r25
    18a6:	39 f4       	brne	.+14     	; 0x18b6 <__vector_19+0x5e>
		UCSR0B &= ~(1<<UDRIE0);
    18a8:	a1 ec       	ldi	r26, 0xC1	; 193
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e1 ec       	ldi	r30, 0xC1	; 193
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	8f 7d       	andi	r24, 0xDF	; 223
    18b4:	8c 93       	st	X, r24
	}
}
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	ff 91       	pop	r31
    18be:	ef 91       	pop	r30
    18c0:	bf 91       	pop	r27
    18c2:	af 91       	pop	r26
    18c4:	9f 91       	pop	r25
    18c6:	8f 91       	pop	r24
    18c8:	0f 90       	pop	r0
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	0f 90       	pop	r0
    18ce:	1f 90       	pop	r1
    18d0:	18 95       	reti

000018d2 <serial_read>:

uint8_t serial_read()
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <serial_read+0x6>
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
	if (rx_buffer_head == rx_buffer_tail) {
    18dc:	90 91 03 01 	lds	r25, 0x0103
    18e0:	80 91 04 01 	lds	r24, 0x0104
    18e4:	98 17       	cp	r25, r24
    18e6:	19 f4       	brne	.+6      	; 0x18ee <serial_read+0x1c>
		return SERIAL_NO_DATA;
    18e8:	8f ef       	ldi	r24, 0xFF	; 255
    18ea:	8a 83       	std	Y+2, r24	; 0x02
    18ec:	10 c0       	rjmp	.+32     	; 0x190e <serial_read+0x3c>
	} else {
		uint8_t data = rx_buffer[rx_buffer_tail];
    18ee:	80 91 04 01 	lds	r24, 0x0104
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	fc 01       	movw	r30, r24
    18f8:	eb 53       	subi	r30, 0x3B	; 59
    18fa:	fe 4f       	sbci	r31, 0xFE	; 254
    18fc:	80 81       	ld	r24, Z
    18fe:	89 83       	std	Y+1, r24	; 0x01
		rx_buffer_tail++;
    1900:	80 91 04 01 	lds	r24, 0x0104
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	80 93 04 01 	sts	0x0104, r24
		if (rx_buffer_tail == RX_BUFFER_SIZE) { rx_buffer_tail = 0; }
		return data;
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	8a 83       	std	Y+2, r24	; 0x02
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <__vector_18>:

ISR(USART_RX_vect)
{
    191a:	1f 92       	push	r1
    191c:	0f 92       	push	r0
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	0f 92       	push	r0
    1922:	11 24       	eor	r1, r1
    1924:	8f 93       	push	r24
    1926:	9f 93       	push	r25
    1928:	ef 93       	push	r30
    192a:	ff 93       	push	r31
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	00 d0       	rcall	.+0      	; 0x1932 <__vector_18+0x18>
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = UDR0;
    1936:	e6 ec       	ldi	r30, 0xC6	; 198
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = rx_buffer_head + 1;
    193e:	80 91 03 01 	lds	r24, 0x0103
    1942:	8f 5f       	subi	r24, 0xFF	; 255
    1944:	89 83       	std	Y+1, r24	; 0x01
	
	if (next_head == RX_BUFFER_SIZE) { 
		next_head = 0;
	}
	if (next_head != rx_buffer_tail) {      // Write data to buffer unless it is full.
    1946:	90 91 04 01 	lds	r25, 0x0104
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	89 17       	cp	r24, r25
    194e:	61 f0       	breq	.+24     	; 0x1968 <__vector_18+0x4e>
		rx_buffer[rx_buffer_head] = data;
    1950:	80 91 03 01 	lds	r24, 0x0103
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	fc 01       	movw	r30, r24
    195a:	eb 53       	subi	r30, 0x3B	; 59
    195c:	fe 4f       	sbci	r31, 0xFE	; 254
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	80 83       	st	Z, r24
		rx_buffer_head = next_head;    
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	80 93 03 01 	sts	0x0103, r24
	}
}
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	ff 91       	pop	r31
    1972:	ef 91       	pop	r30
    1974:	9f 91       	pop	r25
    1976:	8f 91       	pop	r24
    1978:	0f 90       	pop	r0
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	0f 90       	pop	r0
    197e:	1f 90       	pop	r1
    1980:	18 95       	reti

00001982 <serial_reset_read_buffer>:

void serial_reset_read_buffer() 
{
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
  rx_buffer_tail = rx_buffer_head;
    198a:	80 91 03 01 	lds	r24, 0x0103
    198e:	80 93 04 01 	sts	0x0104, r24
}
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <printString>:

#include "print.h"
#include "serial.h"

void printString(const char *s)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <printString+0x6>
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	9a 83       	std	Y+2, r25	; 0x02
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	0b c0       	rjmp	.+22     	; 0x19be <printString+0x26>
  while (*s)
    serial_write(*s++);
    19a8:	e9 81       	ldd	r30, Y+1	; 0x01
    19aa:	fa 81       	ldd	r31, Y+2	; 0x02
    19ac:	20 81       	ld	r18, Z
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	9a 81       	ldd	r25, Y+2	; 0x02
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	9a 83       	std	Y+2, r25	; 0x02
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	82 2f       	mov	r24, r18
    19ba:	0e 94 05 0c 	call	0x180a	; 0x180a <serial_write>
#include "print.h"
#include "serial.h"

void printString(const char *s)
{
  while (*s)
    19be:	e9 81       	ldd	r30, Y+1	; 0x01
    19c0:	fa 81       	ldd	r31, Y+2	; 0x02
    19c2:	80 81       	ld	r24, Z
    19c4:	88 23       	and	r24, r24
    19c6:	81 f7       	brne	.-32     	; 0x19a8 <printString+0x10>
    serial_write(*s++);
}
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <printPgmString+0x6>
    19d8:	00 d0       	rcall	.+0      	; 0x19da <printPgmString+0x8>
    19da:	00 d0       	rcall	.+0      	; 0x19dc <printPgmString+0xa>
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	9e 83       	std	Y+6, r25	; 0x06
    19e2:	8d 83       	std	Y+5, r24	; 0x05
    19e4:	03 c0       	rjmp	.+6      	; 0x19ec <printPgmString+0x1a>
  char c;
  while ((c = pgm_read_byte_near(s++)))
    serial_write(c);
    19e6:	8c 81       	ldd	r24, Y+4	; 0x04
    19e8:	0e 94 05 0c 	call	0x180a	; 0x180a <serial_write>

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
  while ((c = pgm_read_byte_near(s++)))
    19ec:	8d 81       	ldd	r24, Y+5	; 0x05
    19ee:	9e 81       	ldd	r25, Y+6	; 0x06
    19f0:	9b 83       	std	Y+3, r25	; 0x03
    19f2:	8a 83       	std	Y+2, r24	; 0x02
    19f4:	8d 81       	ldd	r24, Y+5	; 0x05
    19f6:	9e 81       	ldd	r25, Y+6	; 0x06
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	9e 83       	std	Y+6, r25	; 0x06
    19fc:	8d 83       	std	Y+5, r24	; 0x05
    19fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1a00:	fb 81       	ldd	r31, Y+3	; 0x03
    1a02:	84 91       	lpm	r24, Z+
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	8c 83       	std	Y+4, r24	; 0x04
    1a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0c:	88 23       	and	r24, r24
    1a0e:	59 f7       	brne	.-42     	; 0x19e6 <printPgmString+0x14>
    serial_write(c);
}
    1a10:	26 96       	adiw	r28, 0x06	; 6
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <print_uint8_base2>:
// 			'0' + buf[i - 1] :
// 			'A' + buf[i - 1] - 10);
// }

void print_uint8_base2(uint8_t n)
{ 
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	2a 97       	sbiw	r28, 0x0a	; 10
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char buf[8];
	uint8_t i = 0;
    1a38:	19 82       	std	Y+1, r1	; 0x01
    1a3a:	12 c0       	rjmp	.+36     	; 0x1a60 <print_uint8_base2+0x3e>

	for (; i < 8; i++) {
		buf[i] = n & 1;
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a44:	48 2f       	mov	r20, r24
    1a46:	41 70       	andi	r20, 0x01	; 1
    1a48:	ce 01       	movw	r24, r28
    1a4a:	02 96       	adiw	r24, 0x02	; 2
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	e2 0f       	add	r30, r18
    1a50:	f3 1f       	adc	r31, r19
    1a52:	40 83       	st	Z, r20
		n >>= 1;
    1a54:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a56:	86 95       	lsr	r24
    1a58:	8a 87       	std	Y+10, r24	; 0x0a
void print_uint8_base2(uint8_t n)
{ 
	unsigned char buf[8];
	uint8_t i = 0;

	for (; i < 8; i++) {
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	8f 5f       	subi	r24, 0xFF	; 255
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	88 30       	cpi	r24, 0x08	; 8
    1a64:	58 f3       	brcs	.-42     	; 0x1a3c <print_uint8_base2+0x1a>
    1a66:	12 c0       	rjmp	.+36     	; 0x1a8c <print_uint8_base2+0x6a>
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
		serial_write('0' + buf[i - 1]);
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	88 2f       	mov	r24, r24
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	9c 01       	movw	r18, r24
    1a70:	21 50       	subi	r18, 0x01	; 1
    1a72:	30 40       	sbci	r19, 0x00	; 0
    1a74:	ce 01       	movw	r24, r28
    1a76:	02 96       	adiw	r24, 0x02	; 2
    1a78:	fc 01       	movw	r30, r24
    1a7a:	e2 0f       	add	r30, r18
    1a7c:	f3 1f       	adc	r31, r19
    1a7e:	80 81       	ld	r24, Z
    1a80:	80 5d       	subi	r24, 0xD0	; 208
    1a82:	0e 94 05 0c 	call	0x180a	; 0x180a <serial_write>
	for (; i < 8; i++) {
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	81 50       	subi	r24, 0x01	; 1
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	88 23       	and	r24, r24
    1a90:	59 f7       	brne	.-42     	; 0x1a68 <print_uint8_base2+0x46>
		serial_write('0' + buf[i - 1]);
}
    1a92:	2a 96       	adiw	r28, 0x0a	; 10
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <print_uint32_base10>:

static void print_uint32_base10(unsigned long n)
{ 
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	2f 97       	sbiw	r28, 0x0f	; 15
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	6c 87       	std	Y+12, r22	; 0x0c
    1abe:	7d 87       	std	Y+13, r23	; 0x0d
    1ac0:	8e 87       	std	Y+14, r24	; 0x0e
    1ac2:	9f 87       	std	Y+15, r25	; 0x0f
  unsigned char buf[10]; 
  uint8_t i = 0;
    1ac4:	19 82       	std	Y+1, r1	; 0x01
  
  if (n == 0) {
    1ac6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ac8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1aca:	ae 85       	ldd	r26, Y+14	; 0x0e
    1acc:	bf 85       	ldd	r27, Y+15	; 0x0f
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	a1 05       	cpc	r26, r1
    1ad2:	b1 05       	cpc	r27, r1
    1ad4:	91 f5       	brne	.+100    	; 0x1b3a <print_uint32_base10+0x96>
    serial_write('0');
    1ad6:	80 e3       	ldi	r24, 0x30	; 48
    1ad8:	0e 94 05 0c 	call	0x180a	; 0x180a <serial_write>
    1adc:	4b c0       	rjmp	.+150    	; 0x1b74 <print_uint32_base10+0xd0>
    return;
  } 
  
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	08 2f       	mov	r16, r24
    1ae2:	10 e0       	ldi	r17, 0x00	; 0
    1ae4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ae6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ae8:	ae 85       	ldd	r26, Y+14	; 0x0e
    1aea:	bf 85       	ldd	r27, Y+15	; 0x0f
    1aec:	2a e0       	ldi	r18, 0x0A	; 10
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	50 e0       	ldi	r21, 0x00	; 0
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__udivmodsi4>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	28 2f       	mov	r18, r24
    1b02:	20 5d       	subi	r18, 0xD0	; 208
    1b04:	ce 01       	movw	r24, r28
    1b06:	02 96       	adiw	r24, 0x02	; 2
    1b08:	fc 01       	movw	r30, r24
    1b0a:	e0 0f       	add	r30, r16
    1b0c:	f1 1f       	adc	r31, r17
    1b0e:	20 83       	st	Z, r18
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	8f 5f       	subi	r24, 0xFF	; 255
    1b14:	89 83       	std	Y+1, r24	; 0x01
    n /= 10;
    1b16:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b18:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b1a:	ae 85       	ldd	r26, Y+14	; 0x0e
    1b1c:	bf 85       	ldd	r27, Y+15	; 0x0f
    1b1e:	2a e0       	ldi	r18, 0x0A	; 10
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e0       	ldi	r20, 0x00	; 0
    1b24:	50 e0       	ldi	r21, 0x00	; 0
    1b26:	bc 01       	movw	r22, r24
    1b28:	cd 01       	movw	r24, r26
    1b2a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__udivmodsi4>
    1b2e:	da 01       	movw	r26, r20
    1b30:	c9 01       	movw	r24, r18
    1b32:	8c 87       	std	Y+12, r24	; 0x0c
    1b34:	9d 87       	std	Y+13, r25	; 0x0d
    1b36:	ae 87       	std	Y+14, r26	; 0x0e
    1b38:	bf 87       	std	Y+15, r27	; 0x0f
  if (n == 0) {
    serial_write('0');
    return;
  } 
  
  while (n > 0) {
    1b3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b3e:	ae 85       	ldd	r26, Y+14	; 0x0e
    1b40:	bf 85       	ldd	r27, Y+15	; 0x0f
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	a1 05       	cpc	r26, r1
    1b46:	b1 05       	cpc	r27, r1
    1b48:	51 f6       	brne	.-108    	; 0x1ade <print_uint32_base10+0x3a>
    1b4a:	11 c0       	rjmp	.+34     	; 0x1b6e <print_uint32_base10+0xca>
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    serial_write(buf[i-1]);
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	88 2f       	mov	r24, r24
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9c 01       	movw	r18, r24
    1b54:	21 50       	subi	r18, 0x01	; 1
    1b56:	30 40       	sbci	r19, 0x00	; 0
    1b58:	ce 01       	movw	r24, r28
    1b5a:	02 96       	adiw	r24, 0x02	; 2
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	e2 0f       	add	r30, r18
    1b60:	f3 1f       	adc	r31, r19
    1b62:	80 81       	ld	r24, Z
    1b64:	0e 94 05 0c 	call	0x180a	; 0x180a <serial_write>
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	81 50       	subi	r24, 0x01	; 1
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	88 23       	and	r24, r24
    1b72:	61 f7       	brne	.-40     	; 0x1b4c <print_uint32_base10+0xa8>
    serial_write(buf[i-1]);
}
    1b74:	2f 96       	adiw	r28, 0x0f	; 15
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	1f 91       	pop	r17
    1b86:	0f 91       	pop	r16
    1b88:	08 95       	ret

00001b8a <printInteger>:

void printInteger(uint32_t n)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <printInteger+0x6>
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <printInteger+0x8>
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	69 83       	std	Y+1, r22	; 0x01
    1b98:	7a 83       	std	Y+2, r23	; 0x02
    1b9a:	8b 83       	std	Y+3, r24	; 0x03
    1b9c:	9c 83       	std	Y+4, r25	; 0x04
  if (n < 0) {
    serial_write('-');
    n = -n;
  }
  print_uint32_base10(n);
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	ab 81       	ldd	r26, Y+3	; 0x03
    1ba4:	bc 81       	ldd	r27, Y+4	; 0x04
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <print_uint32_base10>
}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up 
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n)
{
    1bbc:	0f 93       	push	r16
    1bbe:	1f 93       	push	r17
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	64 97       	sbiw	r28, 0x14	; 20
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	69 8b       	std	Y+17, r22	; 0x11
    1bd6:	7a 8b       	std	Y+18, r23	; 0x12
    1bd8:	8b 8b       	std	Y+19, r24	; 0x13
    1bda:	9c 8b       	std	Y+20, r25	; 0x14
	if (n < 0) {
    1bdc:	69 89       	ldd	r22, Y+17	; 0x11
    1bde:	7a 89       	ldd	r23, Y+18	; 0x12
    1be0:	8b 89       	ldd	r24, Y+19	; 0x13
    1be2:	9c 89       	ldd	r25, Y+20	; 0x14
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e0       	ldi	r20, 0x00	; 0
    1bea:	50 e0       	ldi	r21, 0x00	; 0
    1bec:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__cmpsf2>
    1bf0:	88 23       	and	r24, r24
    1bf2:	64 f4       	brge	.+24     	; 0x1c0c <printFloat+0x50>
		serial_write('-');
    1bf4:	8d e2       	ldi	r24, 0x2D	; 45
    1bf6:	0e 94 05 0c 	call	0x180a	; 0x180a <serial_write>
		n = -n;
    1bfa:	89 89       	ldd	r24, Y+17	; 0x11
    1bfc:	9a 89       	ldd	r25, Y+18	; 0x12
    1bfe:	ab 89       	ldd	r26, Y+19	; 0x13
    1c00:	bc 89       	ldd	r27, Y+20	; 0x14
    1c02:	b0 58       	subi	r27, 0x80	; 128
    1c04:	89 8b       	std	Y+17, r24	; 0x11
    1c06:	9a 8b       	std	Y+18, r25	; 0x12
    1c08:	ab 8b       	std	Y+19, r26	; 0x13
    1c0a:	bc 8b       	std	Y+20, r27	; 0x14
	}

	uint8_t decimals = DECIMAL_PLACES;
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	8e 83       	std	Y+6, r24	; 0x06
    1c10:	13 c0       	rjmp	.+38     	; 0x1c38 <printFloat+0x7c>
	while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
		n *= 100;
    1c12:	69 89       	ldd	r22, Y+17	; 0x11
    1c14:	7a 89       	ldd	r23, Y+18	; 0x12
    1c16:	8b 89       	ldd	r24, Y+19	; 0x13
    1c18:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	48 ec       	ldi	r20, 0xC8	; 200
    1c20:	52 e4       	ldi	r21, 0x42	; 66
    1c22:	0e 94 35 11 	call	0x226a	; 0x226a <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	89 8b       	std	Y+17, r24	; 0x11
    1c2c:	9a 8b       	std	Y+18, r25	; 0x12
    1c2e:	ab 8b       	std	Y+19, r26	; 0x13
    1c30:	bc 8b       	std	Y+20, r27	; 0x14
		decimals -= 2;
    1c32:	8e 81       	ldd	r24, Y+6	; 0x06
    1c34:	82 50       	subi	r24, 0x02	; 2
    1c36:	8e 83       	std	Y+6, r24	; 0x06
		serial_write('-');
		n = -n;
	}

	uint8_t decimals = DECIMAL_PLACES;
	while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
    1c38:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3a:	82 30       	cpi	r24, 0x02	; 2
    1c3c:	50 f7       	brcc	.-44     	; 0x1c12 <printFloat+0x56>
		n *= 100;
		decimals -= 2;
	}
	if (decimals) { n *= 10; }
    1c3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c40:	88 23       	and	r24, r24
    1c42:	81 f0       	breq	.+32     	; 0x1c64 <printFloat+0xa8>
    1c44:	69 89       	ldd	r22, Y+17	; 0x11
    1c46:	7a 89       	ldd	r23, Y+18	; 0x12
    1c48:	8b 89       	ldd	r24, Y+19	; 0x13
    1c4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e2       	ldi	r20, 0x20	; 32
    1c52:	51 e4       	ldi	r21, 0x41	; 65
    1c54:	0e 94 35 11 	call	0x226a	; 0x226a <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	89 8b       	std	Y+17, r24	; 0x11
    1c5e:	9a 8b       	std	Y+18, r25	; 0x12
    1c60:	ab 8b       	std	Y+19, r26	; 0x13
    1c62:	bc 8b       	std	Y+20, r27	; 0x14
	n += 0.5; // Add rounding factor. Ensures carryover through entire value.
    1c64:	69 89       	ldd	r22, Y+17	; 0x11
    1c66:	7a 89       	ldd	r23, Y+18	; 0x12
    1c68:	8b 89       	ldd	r24, Y+19	; 0x13
    1c6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e0       	ldi	r20, 0x00	; 0
    1c72:	5f e3       	ldi	r21, 0x3F	; 63
    1c74:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__addsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	89 8b       	std	Y+17, r24	; 0x11
    1c7e:	9a 8b       	std	Y+18, r25	; 0x12
    1c80:	ab 8b       	std	Y+19, r26	; 0x13
    1c82:	bc 8b       	std	Y+20, r27	; 0x14
    
	// Generate digits backwards and store in string.
	unsigned char buf[10]; 
	uint8_t i = 0;
    1c84:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t a = (long)n;  
    1c86:	69 89       	ldd	r22, Y+17	; 0x11
    1c88:	7a 89       	ldd	r23, Y+18	; 0x12
    1c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8e:	0e 94 4e 10 	call	0x209c	; 0x209c <__fixsfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	9a 83       	std	Y+2, r25	; 0x02
    1c9a:	ab 83       	std	Y+3, r26	; 0x03
    1c9c:	bc 83       	std	Y+4, r27	; 0x04
	buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
    1c9e:	8e e2       	ldi	r24, 0x2E	; 46
    1ca0:	89 87       	std	Y+9, r24	; 0x09
    1ca2:	34 c0       	rjmp	.+104    	; 0x1d0c <printFloat+0x150>
	while(a > 0) {
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
    1ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca6:	82 30       	cpi	r24, 0x02	; 2
    1ca8:	19 f4       	brne	.+6      	; 0x1cb0 <printFloat+0xf4>
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	8f 5f       	subi	r24, 0xFF	; 255
    1cae:	8d 83       	std	Y+5, r24	; 0x05
		buf[i++] = (a % 10) + '0'; // Get digit
    1cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb2:	08 2f       	mov	r16, r24
    1cb4:	10 e0       	ldi	r17, 0x00	; 0
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cba:	ab 81       	ldd	r26, Y+3	; 0x03
    1cbc:	bc 81       	ldd	r27, Y+4	; 0x04
    1cbe:	2a e0       	ldi	r18, 0x0A	; 10
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	cd 01       	movw	r24, r26
    1cca:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__udivmodsi4>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	20 5d       	subi	r18, 0xD0	; 208
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	07 96       	adiw	r24, 0x07	; 7
    1cda:	fc 01       	movw	r30, r24
    1cdc:	e0 0f       	add	r30, r16
    1cde:	f1 1f       	adc	r31, r17
    1ce0:	20 83       	st	Z, r18
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	8f 5f       	subi	r24, 0xFF	; 255
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
		a /= 10;
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	ab 81       	ldd	r26, Y+3	; 0x03
    1cee:	bc 81       	ldd	r27, Y+4	; 0x04
    1cf0:	2a e0       	ldi	r18, 0x0A	; 10
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e0       	ldi	r20, 0x00	; 0
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__udivmodsi4>
    1d00:	da 01       	movw	r26, r20
    1d02:	c9 01       	movw	r24, r18
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	ab 83       	std	Y+3, r26	; 0x03
    1d0a:	bc 83       	std	Y+4, r27	; 0x04
	// Generate digits backwards and store in string.
	unsigned char buf[10]; 
	uint8_t i = 0;
	uint32_t a = (long)n;  
	buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
	while(a > 0) {
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d10:	ab 81       	ldd	r26, Y+3	; 0x03
    1d12:	bc 81       	ldd	r27, Y+4	; 0x04
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	a1 05       	cpc	r26, r1
    1d18:	b1 05       	cpc	r27, r1
    1d1a:	21 f6       	brne	.-120    	; 0x1ca4 <printFloat+0xe8>
    1d1c:	0d c0       	rjmp	.+26     	; 0x1d38 <printFloat+0x17c>
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
		buf[i++] = (a % 10) + '0'; // Get digit
		a /= 10;
	}
	while (i < DECIMAL_PLACES) { 
		buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	ce 01       	movw	r24, r28
    1d26:	07 96       	adiw	r24, 0x07	; 7
    1d28:	fc 01       	movw	r30, r24
    1d2a:	e2 0f       	add	r30, r18
    1d2c:	f3 1f       	adc	r31, r19
    1d2e:	80 e3       	ldi	r24, 0x30	; 48
    1d30:	80 83       	st	Z, r24
    1d32:	8d 81       	ldd	r24, Y+5	; 0x05
    1d34:	8f 5f       	subi	r24, 0xFF	; 255
    1d36:	8d 83       	std	Y+5, r24	; 0x05
	while(a > 0) {
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
		buf[i++] = (a % 10) + '0'; // Get digit
		a /= 10;
	}
	while (i < DECIMAL_PLACES) { 
    1d38:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3a:	82 30       	cpi	r24, 0x02	; 2
    1d3c:	80 f3       	brcs	.-32     	; 0x1d1e <printFloat+0x162>
		buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
	}
	if (i == DECIMAL_PLACES) { // Fill in leading zero, if needed.
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	82 30       	cpi	r24, 0x02	; 2
    1d42:	11 f5       	brne	.+68     	; 0x1d88 <printFloat+0x1cc>
		i++;
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	8f 5f       	subi	r24, 0xFF	; 255
    1d48:	8d 83       	std	Y+5, r24	; 0x05
		buf[i++] = '0'; 
    1d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	ce 01       	movw	r24, r28
    1d52:	07 96       	adiw	r24, 0x07	; 7
    1d54:	fc 01       	movw	r30, r24
    1d56:	e2 0f       	add	r30, r18
    1d58:	f3 1f       	adc	r31, r19
    1d5a:	80 e3       	ldi	r24, 0x30	; 48
    1d5c:	80 83       	st	Z, r24
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	8f 5f       	subi	r24, 0xFF	; 255
    1d62:	8d 83       	std	Y+5, r24	; 0x05
    1d64:	11 c0       	rjmp	.+34     	; 0x1d88 <printFloat+0x1cc>
	}

	// Print the generated string.
	for (; i > 0; i--)
		serial_write(buf[i-1]);
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	88 2f       	mov	r24, r24
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9c 01       	movw	r18, r24
    1d6e:	21 50       	subi	r18, 0x01	; 1
    1d70:	30 40       	sbci	r19, 0x00	; 0
    1d72:	ce 01       	movw	r24, r28
    1d74:	07 96       	adiw	r24, 0x07	; 7
    1d76:	fc 01       	movw	r30, r24
    1d78:	e2 0f       	add	r30, r18
    1d7a:	f3 1f       	adc	r31, r19
    1d7c:	80 81       	ld	r24, Z
    1d7e:	0e 94 05 0c 	call	0x180a	; 0x180a <serial_write>
		i++;
		buf[i++] = '0'; 
	}

	// Print the generated string.
	for (; i > 0; i--)
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	81 50       	subi	r24, 0x01	; 1
    1d86:	8d 83       	std	Y+5, r24	; 0x05
    1d88:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8a:	88 23       	and	r24, r24
    1d8c:	61 f7       	brne	.-40     	; 0x1d66 <printFloat+0x1aa>
		serial_write(buf[i-1]);
}
    1d8e:	64 96       	adiw	r28, 0x14	; 20
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	08 95       	ret

00001da4 <rpt_initialized>:
static PGM_P const msg_scode[] PROGMEM = { msg_scode0, msg_scode1, msg_scode2, msg_scode3, msg_scode4};

/*** Display routines ***/

void rpt_initialized()
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
//	printPgmString((PGM_P)(pgm_read_word(initialized))); 
	printPgmString(PSTR("\nDevice Initialized\n")); 
    1dac:	8d eb       	ldi	r24, 0xBD	; 189
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <printPgmString>
}
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <rpt_readout>:

void rpt_readout()
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
	printPgmString(PSTR("Temp: ")); printFloat(sensor.temperature);
    1dc2:	8e ee       	ldi	r24, 0xEE	; 238
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <printPgmString>
    1dca:	80 91 73 01 	lds	r24, 0x0173
    1dce:	90 91 74 01 	lds	r25, 0x0174
    1dd2:	a0 91 75 01 	lds	r26, 0x0175
    1dd6:	b0 91 76 01 	lds	r27, 0x0176
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <printFloat>
	printPgmString(PSTR(" StdDev: ")); printFloat(sensor.std_dev);				//++++++
    1de2:	84 ee       	ldi	r24, 0xE4	; 228
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <printPgmString>
    1dea:	80 91 77 01 	lds	r24, 0x0177
    1dee:	90 91 78 01 	lds	r25, 0x0178
    1df2:	a0 91 79 01 	lds	r26, 0x0179
    1df6:	b0 91 7a 01 	lds	r27, 0x017A
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <printFloat>
	printPgmString(PSTR(" s[0]: ")); printFloat(sensor.sample[0]);				//++++++
    1e02:	8c ed       	ldi	r24, 0xDC	; 220
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <printPgmString>
    1e0a:	80 91 8b 01 	lds	r24, 0x018B
    1e0e:	90 91 8c 01 	lds	r25, 0x018C
    1e12:	a0 91 8d 01 	lds	r26, 0x018D
    1e16:	b0 91 8e 01 	lds	r27, 0x018E
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <printFloat>
	printPgmString(PSTR(" PWM: ")); printFloat(pid.output);
    1e22:	85 ed       	ldi	r24, 0xD5	; 213
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <printPgmString>
    1e2a:	80 91 2a 01 	lds	r24, 0x012A
    1e2e:	90 91 2b 01 	lds	r25, 0x012B
    1e32:	a0 91 2c 01 	lds	r26, 0x012C
    1e36:	b0 91 2d 01 	lds	r27, 0x012D
    1e3a:	bc 01       	movw	r22, r24
    1e3c:	cd 01       	movw	r24, r26
    1e3e:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <printFloat>
//	printPgmString(PSTR(" Error: ")); printFloat(pid.error);				//++++++
	printPgmString(PSTR("  "));
    1e42:	82 ed       	ldi	r24, 0xD2	; 210
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <printPgmString>
	rpt_sensor();
    1e4a:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <rpt_sensor>
}
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <rpt_heater_readout>:

void rpt_heater_readout()
{
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
	printPgmString(PSTR("Temp: "));  printFloat(heater.temperature);
    1e5c:	8f ef       	ldi	r24, 0xFF	; 255
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <printPgmString>
    1e64:	80 91 0c 01 	lds	r24, 0x010C
    1e68:	90 91 0d 01 	lds	r25, 0x010D
    1e6c:	a0 91 0e 01 	lds	r26, 0x010E
    1e70:	b0 91 0f 01 	lds	r27, 0x010F
    1e74:	bc 01       	movw	r22, r24
    1e76:	cd 01       	movw	r24, r26
    1e78:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <printFloat>
	printPgmString(PSTR("  PID: ")); printFloat(pid.output);
    1e7c:	87 ef       	ldi	r24, 0xF7	; 247
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <printPgmString>
    1e84:	80 91 2a 01 	lds	r24, 0x012A
    1e88:	90 91 2b 01 	lds	r25, 0x012B
    1e8c:	a0 91 2c 01 	lds	r26, 0x012C
    1e90:	b0 91 2d 01 	lds	r27, 0x012D
    1e94:	bc 01       	movw	r22, r24
    1e96:	cd 01       	movw	r24, r26
    1e98:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <printFloat>
	printPgmString(PSTR("\n")); 
    1e9c:	85 ef       	ldi	r24, 0xF5	; 245
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <printPgmString>
}
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <rpt_sensor>:

void rpt_sensor()
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <rpt_sensor+0x6>
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <rpt_sensor+0x8>
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
	printPgmString((PGM_P)pgm_read_word(&msg_scode[sensor.code]));
    1eb6:	80 91 71 01 	lds	r24, 0x0171
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	8d 54       	subi	r24, 0x4D	; 77
    1ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec6:	9c 83       	std	Y+4, r25	; 0x04
    1ec8:	8b 83       	std	Y+3, r24	; 0x03
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ece:	fc 01       	movw	r30, r24
    1ed0:	85 91       	lpm	r24, Z+
    1ed2:	94 91       	lpm	r25, Z+
    1ed4:	9a 83       	std	Y+2, r25	; 0x02
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	fc 83       	std	Y+4, r31	; 0x04
    1eda:	eb 83       	std	Y+3, r30	; 0x03
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee0:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <printPgmString>
	printPgmString(PSTR("\n")); 
    1ee4:	86 e0       	ldi	r24, 0x06	; 6
    1ee6:	91 e0       	ldi	r25, 0x01	; 1
    1ee8:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <printPgmString>
//	strncpy_P(msg,(PGM_P)pgm_read_word(&msg_scode[sensor.code]), MSGLEN);
//	printString(msg);

//	printPgmString(PSTR(pgm_read_word(&msg_scode[sensor.code]));
//	printPgmString(&msg_scode[sensor.code]);
}
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <__subsf3>:
    1efa:	50 58       	subi	r21, 0x80	; 128

00001efc <__addsf3>:
    1efc:	bb 27       	eor	r27, r27
    1efe:	aa 27       	eor	r26, r26
    1f00:	0e d0       	rcall	.+28     	; 0x1f1e <__addsf3x>
    1f02:	75 c1       	rjmp	.+746    	; 0x21ee <__fp_round>
    1f04:	66 d1       	rcall	.+716    	; 0x21d2 <__fp_pscA>
    1f06:	30 f0       	brcs	.+12     	; 0x1f14 <__addsf3+0x18>
    1f08:	6b d1       	rcall	.+726    	; 0x21e0 <__fp_pscB>
    1f0a:	20 f0       	brcs	.+8      	; 0x1f14 <__addsf3+0x18>
    1f0c:	31 f4       	brne	.+12     	; 0x1f1a <__addsf3+0x1e>
    1f0e:	9f 3f       	cpi	r25, 0xFF	; 255
    1f10:	11 f4       	brne	.+4      	; 0x1f16 <__addsf3+0x1a>
    1f12:	1e f4       	brtc	.+6      	; 0x1f1a <__addsf3+0x1e>
    1f14:	5b c1       	rjmp	.+694    	; 0x21cc <__fp_nan>
    1f16:	0e f4       	brtc	.+2      	; 0x1f1a <__addsf3+0x1e>
    1f18:	e0 95       	com	r30
    1f1a:	e7 fb       	bst	r30, 7
    1f1c:	51 c1       	rjmp	.+674    	; 0x21c0 <__fp_inf>

00001f1e <__addsf3x>:
    1f1e:	e9 2f       	mov	r30, r25
    1f20:	77 d1       	rcall	.+750    	; 0x2210 <__fp_split3>
    1f22:	80 f3       	brcs	.-32     	; 0x1f04 <__addsf3+0x8>
    1f24:	ba 17       	cp	r27, r26
    1f26:	62 07       	cpc	r22, r18
    1f28:	73 07       	cpc	r23, r19
    1f2a:	84 07       	cpc	r24, r20
    1f2c:	95 07       	cpc	r25, r21
    1f2e:	18 f0       	brcs	.+6      	; 0x1f36 <__addsf3x+0x18>
    1f30:	71 f4       	brne	.+28     	; 0x1f4e <__addsf3x+0x30>
    1f32:	9e f5       	brtc	.+102    	; 0x1f9a <__addsf3x+0x7c>
    1f34:	8f c1       	rjmp	.+798    	; 0x2254 <__fp_zero>
    1f36:	0e f4       	brtc	.+2      	; 0x1f3a <__addsf3x+0x1c>
    1f38:	e0 95       	com	r30
    1f3a:	0b 2e       	mov	r0, r27
    1f3c:	ba 2f       	mov	r27, r26
    1f3e:	a0 2d       	mov	r26, r0
    1f40:	0b 01       	movw	r0, r22
    1f42:	b9 01       	movw	r22, r18
    1f44:	90 01       	movw	r18, r0
    1f46:	0c 01       	movw	r0, r24
    1f48:	ca 01       	movw	r24, r20
    1f4a:	a0 01       	movw	r20, r0
    1f4c:	11 24       	eor	r1, r1
    1f4e:	ff 27       	eor	r31, r31
    1f50:	59 1b       	sub	r21, r25
    1f52:	99 f0       	breq	.+38     	; 0x1f7a <__addsf3x+0x5c>
    1f54:	59 3f       	cpi	r21, 0xF9	; 249
    1f56:	50 f4       	brcc	.+20     	; 0x1f6c <__addsf3x+0x4e>
    1f58:	50 3e       	cpi	r21, 0xE0	; 224
    1f5a:	68 f1       	brcs	.+90     	; 0x1fb6 <__addsf3x+0x98>
    1f5c:	1a 16       	cp	r1, r26
    1f5e:	f0 40       	sbci	r31, 0x00	; 0
    1f60:	a2 2f       	mov	r26, r18
    1f62:	23 2f       	mov	r18, r19
    1f64:	34 2f       	mov	r19, r20
    1f66:	44 27       	eor	r20, r20
    1f68:	58 5f       	subi	r21, 0xF8	; 248
    1f6a:	f3 cf       	rjmp	.-26     	; 0x1f52 <__addsf3x+0x34>
    1f6c:	46 95       	lsr	r20
    1f6e:	37 95       	ror	r19
    1f70:	27 95       	ror	r18
    1f72:	a7 95       	ror	r26
    1f74:	f0 40       	sbci	r31, 0x00	; 0
    1f76:	53 95       	inc	r21
    1f78:	c9 f7       	brne	.-14     	; 0x1f6c <__addsf3x+0x4e>
    1f7a:	7e f4       	brtc	.+30     	; 0x1f9a <__addsf3x+0x7c>
    1f7c:	1f 16       	cp	r1, r31
    1f7e:	ba 0b       	sbc	r27, r26
    1f80:	62 0b       	sbc	r22, r18
    1f82:	73 0b       	sbc	r23, r19
    1f84:	84 0b       	sbc	r24, r20
    1f86:	ba f0       	brmi	.+46     	; 0x1fb6 <__addsf3x+0x98>
    1f88:	91 50       	subi	r25, 0x01	; 1
    1f8a:	a1 f0       	breq	.+40     	; 0x1fb4 <__addsf3x+0x96>
    1f8c:	ff 0f       	add	r31, r31
    1f8e:	bb 1f       	adc	r27, r27
    1f90:	66 1f       	adc	r22, r22
    1f92:	77 1f       	adc	r23, r23
    1f94:	88 1f       	adc	r24, r24
    1f96:	c2 f7       	brpl	.-16     	; 0x1f88 <__addsf3x+0x6a>
    1f98:	0e c0       	rjmp	.+28     	; 0x1fb6 <__addsf3x+0x98>
    1f9a:	ba 0f       	add	r27, r26
    1f9c:	62 1f       	adc	r22, r18
    1f9e:	73 1f       	adc	r23, r19
    1fa0:	84 1f       	adc	r24, r20
    1fa2:	48 f4       	brcc	.+18     	; 0x1fb6 <__addsf3x+0x98>
    1fa4:	87 95       	ror	r24
    1fa6:	77 95       	ror	r23
    1fa8:	67 95       	ror	r22
    1faa:	b7 95       	ror	r27
    1fac:	f7 95       	ror	r31
    1fae:	9e 3f       	cpi	r25, 0xFE	; 254
    1fb0:	08 f0       	brcs	.+2      	; 0x1fb4 <__addsf3x+0x96>
    1fb2:	b3 cf       	rjmp	.-154    	; 0x1f1a <__addsf3+0x1e>
    1fb4:	93 95       	inc	r25
    1fb6:	88 0f       	add	r24, r24
    1fb8:	08 f0       	brcs	.+2      	; 0x1fbc <__addsf3x+0x9e>
    1fba:	99 27       	eor	r25, r25
    1fbc:	ee 0f       	add	r30, r30
    1fbe:	97 95       	ror	r25
    1fc0:	87 95       	ror	r24
    1fc2:	08 95       	ret

00001fc4 <__cmpsf2>:
    1fc4:	d9 d0       	rcall	.+434    	; 0x2178 <__fp_cmp>
    1fc6:	08 f4       	brcc	.+2      	; 0x1fca <__cmpsf2+0x6>
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	08 95       	ret

00001fcc <__divsf3>:
    1fcc:	0c d0       	rcall	.+24     	; 0x1fe6 <__divsf3x>
    1fce:	0f c1       	rjmp	.+542    	; 0x21ee <__fp_round>
    1fd0:	07 d1       	rcall	.+526    	; 0x21e0 <__fp_pscB>
    1fd2:	40 f0       	brcs	.+16     	; 0x1fe4 <__divsf3+0x18>
    1fd4:	fe d0       	rcall	.+508    	; 0x21d2 <__fp_pscA>
    1fd6:	30 f0       	brcs	.+12     	; 0x1fe4 <__divsf3+0x18>
    1fd8:	21 f4       	brne	.+8      	; 0x1fe2 <__divsf3+0x16>
    1fda:	5f 3f       	cpi	r21, 0xFF	; 255
    1fdc:	19 f0       	breq	.+6      	; 0x1fe4 <__divsf3+0x18>
    1fde:	f0 c0       	rjmp	.+480    	; 0x21c0 <__fp_inf>
    1fe0:	51 11       	cpse	r21, r1
    1fe2:	39 c1       	rjmp	.+626    	; 0x2256 <__fp_szero>
    1fe4:	f3 c0       	rjmp	.+486    	; 0x21cc <__fp_nan>

00001fe6 <__divsf3x>:
    1fe6:	14 d1       	rcall	.+552    	; 0x2210 <__fp_split3>
    1fe8:	98 f3       	brcs	.-26     	; 0x1fd0 <__divsf3+0x4>

00001fea <__divsf3_pse>:
    1fea:	99 23       	and	r25, r25
    1fec:	c9 f3       	breq	.-14     	; 0x1fe0 <__divsf3+0x14>
    1fee:	55 23       	and	r21, r21
    1ff0:	b1 f3       	breq	.-20     	; 0x1fde <__divsf3+0x12>
    1ff2:	95 1b       	sub	r25, r21
    1ff4:	55 0b       	sbc	r21, r21
    1ff6:	bb 27       	eor	r27, r27
    1ff8:	aa 27       	eor	r26, r26
    1ffa:	62 17       	cp	r22, r18
    1ffc:	73 07       	cpc	r23, r19
    1ffe:	84 07       	cpc	r24, r20
    2000:	38 f0       	brcs	.+14     	; 0x2010 <__divsf3_pse+0x26>
    2002:	9f 5f       	subi	r25, 0xFF	; 255
    2004:	5f 4f       	sbci	r21, 0xFF	; 255
    2006:	22 0f       	add	r18, r18
    2008:	33 1f       	adc	r19, r19
    200a:	44 1f       	adc	r20, r20
    200c:	aa 1f       	adc	r26, r26
    200e:	a9 f3       	breq	.-22     	; 0x1ffa <__divsf3_pse+0x10>
    2010:	33 d0       	rcall	.+102    	; 0x2078 <__divsf3_pse+0x8e>
    2012:	0e 2e       	mov	r0, r30
    2014:	3a f0       	brmi	.+14     	; 0x2024 <__divsf3_pse+0x3a>
    2016:	e0 e8       	ldi	r30, 0x80	; 128
    2018:	30 d0       	rcall	.+96     	; 0x207a <__divsf3_pse+0x90>
    201a:	91 50       	subi	r25, 0x01	; 1
    201c:	50 40       	sbci	r21, 0x00	; 0
    201e:	e6 95       	lsr	r30
    2020:	00 1c       	adc	r0, r0
    2022:	ca f7       	brpl	.-14     	; 0x2016 <__divsf3_pse+0x2c>
    2024:	29 d0       	rcall	.+82     	; 0x2078 <__divsf3_pse+0x8e>
    2026:	fe 2f       	mov	r31, r30
    2028:	27 d0       	rcall	.+78     	; 0x2078 <__divsf3_pse+0x8e>
    202a:	66 0f       	add	r22, r22
    202c:	77 1f       	adc	r23, r23
    202e:	88 1f       	adc	r24, r24
    2030:	bb 1f       	adc	r27, r27
    2032:	26 17       	cp	r18, r22
    2034:	37 07       	cpc	r19, r23
    2036:	48 07       	cpc	r20, r24
    2038:	ab 07       	cpc	r26, r27
    203a:	b0 e8       	ldi	r27, 0x80	; 128
    203c:	09 f0       	breq	.+2      	; 0x2040 <__divsf3_pse+0x56>
    203e:	bb 0b       	sbc	r27, r27
    2040:	80 2d       	mov	r24, r0
    2042:	bf 01       	movw	r22, r30
    2044:	ff 27       	eor	r31, r31
    2046:	93 58       	subi	r25, 0x83	; 131
    2048:	5f 4f       	sbci	r21, 0xFF	; 255
    204a:	2a f0       	brmi	.+10     	; 0x2056 <__divsf3_pse+0x6c>
    204c:	9e 3f       	cpi	r25, 0xFE	; 254
    204e:	51 05       	cpc	r21, r1
    2050:	68 f0       	brcs	.+26     	; 0x206c <__divsf3_pse+0x82>
    2052:	b6 c0       	rjmp	.+364    	; 0x21c0 <__fp_inf>
    2054:	00 c1       	rjmp	.+512    	; 0x2256 <__fp_szero>
    2056:	5f 3f       	cpi	r21, 0xFF	; 255
    2058:	ec f3       	brlt	.-6      	; 0x2054 <__divsf3_pse+0x6a>
    205a:	98 3e       	cpi	r25, 0xE8	; 232
    205c:	dc f3       	brlt	.-10     	; 0x2054 <__divsf3_pse+0x6a>
    205e:	86 95       	lsr	r24
    2060:	77 95       	ror	r23
    2062:	67 95       	ror	r22
    2064:	b7 95       	ror	r27
    2066:	f7 95       	ror	r31
    2068:	9f 5f       	subi	r25, 0xFF	; 255
    206a:	c9 f7       	brne	.-14     	; 0x205e <__divsf3_pse+0x74>
    206c:	88 0f       	add	r24, r24
    206e:	91 1d       	adc	r25, r1
    2070:	96 95       	lsr	r25
    2072:	87 95       	ror	r24
    2074:	97 f9       	bld	r25, 7
    2076:	08 95       	ret
    2078:	e1 e0       	ldi	r30, 0x01	; 1
    207a:	66 0f       	add	r22, r22
    207c:	77 1f       	adc	r23, r23
    207e:	88 1f       	adc	r24, r24
    2080:	bb 1f       	adc	r27, r27
    2082:	62 17       	cp	r22, r18
    2084:	73 07       	cpc	r23, r19
    2086:	84 07       	cpc	r24, r20
    2088:	ba 07       	cpc	r27, r26
    208a:	20 f0       	brcs	.+8      	; 0x2094 <__divsf3_pse+0xaa>
    208c:	62 1b       	sub	r22, r18
    208e:	73 0b       	sbc	r23, r19
    2090:	84 0b       	sbc	r24, r20
    2092:	ba 0b       	sbc	r27, r26
    2094:	ee 1f       	adc	r30, r30
    2096:	88 f7       	brcc	.-30     	; 0x207a <__divsf3_pse+0x90>
    2098:	e0 95       	com	r30
    209a:	08 95       	ret

0000209c <__fixsfsi>:
    209c:	04 d0       	rcall	.+8      	; 0x20a6 <__fixunssfsi>
    209e:	68 94       	set
    20a0:	b1 11       	cpse	r27, r1
    20a2:	d9 c0       	rjmp	.+434    	; 0x2256 <__fp_szero>
    20a4:	08 95       	ret

000020a6 <__fixunssfsi>:
    20a6:	bc d0       	rcall	.+376    	; 0x2220 <__fp_splitA>
    20a8:	88 f0       	brcs	.+34     	; 0x20cc <__fixunssfsi+0x26>
    20aa:	9f 57       	subi	r25, 0x7F	; 127
    20ac:	90 f0       	brcs	.+36     	; 0x20d2 <__fixunssfsi+0x2c>
    20ae:	b9 2f       	mov	r27, r25
    20b0:	99 27       	eor	r25, r25
    20b2:	b7 51       	subi	r27, 0x17	; 23
    20b4:	a0 f0       	brcs	.+40     	; 0x20de <__fixunssfsi+0x38>
    20b6:	d1 f0       	breq	.+52     	; 0x20ec <__fixunssfsi+0x46>
    20b8:	66 0f       	add	r22, r22
    20ba:	77 1f       	adc	r23, r23
    20bc:	88 1f       	adc	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	1a f0       	brmi	.+6      	; 0x20c8 <__fixunssfsi+0x22>
    20c2:	ba 95       	dec	r27
    20c4:	c9 f7       	brne	.-14     	; 0x20b8 <__fixunssfsi+0x12>
    20c6:	12 c0       	rjmp	.+36     	; 0x20ec <__fixunssfsi+0x46>
    20c8:	b1 30       	cpi	r27, 0x01	; 1
    20ca:	81 f0       	breq	.+32     	; 0x20ec <__fixunssfsi+0x46>
    20cc:	c3 d0       	rcall	.+390    	; 0x2254 <__fp_zero>
    20ce:	b1 e0       	ldi	r27, 0x01	; 1
    20d0:	08 95       	ret
    20d2:	c0 c0       	rjmp	.+384    	; 0x2254 <__fp_zero>
    20d4:	67 2f       	mov	r22, r23
    20d6:	78 2f       	mov	r23, r24
    20d8:	88 27       	eor	r24, r24
    20da:	b8 5f       	subi	r27, 0xF8	; 248
    20dc:	39 f0       	breq	.+14     	; 0x20ec <__fixunssfsi+0x46>
    20de:	b9 3f       	cpi	r27, 0xF9	; 249
    20e0:	cc f3       	brlt	.-14     	; 0x20d4 <__fixunssfsi+0x2e>
    20e2:	86 95       	lsr	r24
    20e4:	77 95       	ror	r23
    20e6:	67 95       	ror	r22
    20e8:	b3 95       	inc	r27
    20ea:	d9 f7       	brne	.-10     	; 0x20e2 <__fixunssfsi+0x3c>
    20ec:	3e f4       	brtc	.+14     	; 0x20fc <__fixunssfsi+0x56>
    20ee:	90 95       	com	r25
    20f0:	80 95       	com	r24
    20f2:	70 95       	com	r23
    20f4:	61 95       	neg	r22
    20f6:	7f 4f       	sbci	r23, 0xFF	; 255
    20f8:	8f 4f       	sbci	r24, 0xFF	; 255
    20fa:	9f 4f       	sbci	r25, 0xFF	; 255
    20fc:	08 95       	ret

000020fe <__floatunsisf>:
    20fe:	e8 94       	clt
    2100:	09 c0       	rjmp	.+18     	; 0x2114 <__floatsisf+0x12>

00002102 <__floatsisf>:
    2102:	97 fb       	bst	r25, 7
    2104:	3e f4       	brtc	.+14     	; 0x2114 <__floatsisf+0x12>
    2106:	90 95       	com	r25
    2108:	80 95       	com	r24
    210a:	70 95       	com	r23
    210c:	61 95       	neg	r22
    210e:	7f 4f       	sbci	r23, 0xFF	; 255
    2110:	8f 4f       	sbci	r24, 0xFF	; 255
    2112:	9f 4f       	sbci	r25, 0xFF	; 255
    2114:	99 23       	and	r25, r25
    2116:	a9 f0       	breq	.+42     	; 0x2142 <__floatsisf+0x40>
    2118:	f9 2f       	mov	r31, r25
    211a:	96 e9       	ldi	r25, 0x96	; 150
    211c:	bb 27       	eor	r27, r27
    211e:	93 95       	inc	r25
    2120:	f6 95       	lsr	r31
    2122:	87 95       	ror	r24
    2124:	77 95       	ror	r23
    2126:	67 95       	ror	r22
    2128:	b7 95       	ror	r27
    212a:	f1 11       	cpse	r31, r1
    212c:	f8 cf       	rjmp	.-16     	; 0x211e <__floatsisf+0x1c>
    212e:	fa f4       	brpl	.+62     	; 0x216e <__floatsisf+0x6c>
    2130:	bb 0f       	add	r27, r27
    2132:	11 f4       	brne	.+4      	; 0x2138 <__floatsisf+0x36>
    2134:	60 ff       	sbrs	r22, 0
    2136:	1b c0       	rjmp	.+54     	; 0x216e <__floatsisf+0x6c>
    2138:	6f 5f       	subi	r22, 0xFF	; 255
    213a:	7f 4f       	sbci	r23, 0xFF	; 255
    213c:	8f 4f       	sbci	r24, 0xFF	; 255
    213e:	9f 4f       	sbci	r25, 0xFF	; 255
    2140:	16 c0       	rjmp	.+44     	; 0x216e <__floatsisf+0x6c>
    2142:	88 23       	and	r24, r24
    2144:	11 f0       	breq	.+4      	; 0x214a <__floatsisf+0x48>
    2146:	96 e9       	ldi	r25, 0x96	; 150
    2148:	11 c0       	rjmp	.+34     	; 0x216c <__floatsisf+0x6a>
    214a:	77 23       	and	r23, r23
    214c:	21 f0       	breq	.+8      	; 0x2156 <__floatsisf+0x54>
    214e:	9e e8       	ldi	r25, 0x8E	; 142
    2150:	87 2f       	mov	r24, r23
    2152:	76 2f       	mov	r23, r22
    2154:	05 c0       	rjmp	.+10     	; 0x2160 <__floatsisf+0x5e>
    2156:	66 23       	and	r22, r22
    2158:	71 f0       	breq	.+28     	; 0x2176 <__floatsisf+0x74>
    215a:	96 e8       	ldi	r25, 0x86	; 134
    215c:	86 2f       	mov	r24, r22
    215e:	70 e0       	ldi	r23, 0x00	; 0
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	2a f0       	brmi	.+10     	; 0x216e <__floatsisf+0x6c>
    2164:	9a 95       	dec	r25
    2166:	66 0f       	add	r22, r22
    2168:	77 1f       	adc	r23, r23
    216a:	88 1f       	adc	r24, r24
    216c:	da f7       	brpl	.-10     	; 0x2164 <__floatsisf+0x62>
    216e:	88 0f       	add	r24, r24
    2170:	96 95       	lsr	r25
    2172:	87 95       	ror	r24
    2174:	97 f9       	bld	r25, 7
    2176:	08 95       	ret

00002178 <__fp_cmp>:
    2178:	99 0f       	add	r25, r25
    217a:	00 08       	sbc	r0, r0
    217c:	55 0f       	add	r21, r21
    217e:	aa 0b       	sbc	r26, r26
    2180:	e0 e8       	ldi	r30, 0x80	; 128
    2182:	fe ef       	ldi	r31, 0xFE	; 254
    2184:	16 16       	cp	r1, r22
    2186:	17 06       	cpc	r1, r23
    2188:	e8 07       	cpc	r30, r24
    218a:	f9 07       	cpc	r31, r25
    218c:	c0 f0       	brcs	.+48     	; 0x21be <__fp_cmp+0x46>
    218e:	12 16       	cp	r1, r18
    2190:	13 06       	cpc	r1, r19
    2192:	e4 07       	cpc	r30, r20
    2194:	f5 07       	cpc	r31, r21
    2196:	98 f0       	brcs	.+38     	; 0x21be <__fp_cmp+0x46>
    2198:	62 1b       	sub	r22, r18
    219a:	73 0b       	sbc	r23, r19
    219c:	84 0b       	sbc	r24, r20
    219e:	95 0b       	sbc	r25, r21
    21a0:	39 f4       	brne	.+14     	; 0x21b0 <__fp_cmp+0x38>
    21a2:	0a 26       	eor	r0, r26
    21a4:	61 f0       	breq	.+24     	; 0x21be <__fp_cmp+0x46>
    21a6:	23 2b       	or	r18, r19
    21a8:	24 2b       	or	r18, r20
    21aa:	25 2b       	or	r18, r21
    21ac:	21 f4       	brne	.+8      	; 0x21b6 <__fp_cmp+0x3e>
    21ae:	08 95       	ret
    21b0:	0a 26       	eor	r0, r26
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <__fp_cmp+0x3e>
    21b4:	a1 40       	sbci	r26, 0x01	; 1
    21b6:	a6 95       	lsr	r26
    21b8:	8f ef       	ldi	r24, 0xFF	; 255
    21ba:	81 1d       	adc	r24, r1
    21bc:	81 1d       	adc	r24, r1
    21be:	08 95       	ret

000021c0 <__fp_inf>:
    21c0:	97 f9       	bld	r25, 7
    21c2:	9f 67       	ori	r25, 0x7F	; 127
    21c4:	80 e8       	ldi	r24, 0x80	; 128
    21c6:	70 e0       	ldi	r23, 0x00	; 0
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	08 95       	ret

000021cc <__fp_nan>:
    21cc:	9f ef       	ldi	r25, 0xFF	; 255
    21ce:	80 ec       	ldi	r24, 0xC0	; 192
    21d0:	08 95       	ret

000021d2 <__fp_pscA>:
    21d2:	00 24       	eor	r0, r0
    21d4:	0a 94       	dec	r0
    21d6:	16 16       	cp	r1, r22
    21d8:	17 06       	cpc	r1, r23
    21da:	18 06       	cpc	r1, r24
    21dc:	09 06       	cpc	r0, r25
    21de:	08 95       	ret

000021e0 <__fp_pscB>:
    21e0:	00 24       	eor	r0, r0
    21e2:	0a 94       	dec	r0
    21e4:	12 16       	cp	r1, r18
    21e6:	13 06       	cpc	r1, r19
    21e8:	14 06       	cpc	r1, r20
    21ea:	05 06       	cpc	r0, r21
    21ec:	08 95       	ret

000021ee <__fp_round>:
    21ee:	09 2e       	mov	r0, r25
    21f0:	03 94       	inc	r0
    21f2:	00 0c       	add	r0, r0
    21f4:	11 f4       	brne	.+4      	; 0x21fa <__fp_round+0xc>
    21f6:	88 23       	and	r24, r24
    21f8:	52 f0       	brmi	.+20     	; 0x220e <__fp_round+0x20>
    21fa:	bb 0f       	add	r27, r27
    21fc:	40 f4       	brcc	.+16     	; 0x220e <__fp_round+0x20>
    21fe:	bf 2b       	or	r27, r31
    2200:	11 f4       	brne	.+4      	; 0x2206 <__fp_round+0x18>
    2202:	60 ff       	sbrs	r22, 0
    2204:	04 c0       	rjmp	.+8      	; 0x220e <__fp_round+0x20>
    2206:	6f 5f       	subi	r22, 0xFF	; 255
    2208:	7f 4f       	sbci	r23, 0xFF	; 255
    220a:	8f 4f       	sbci	r24, 0xFF	; 255
    220c:	9f 4f       	sbci	r25, 0xFF	; 255
    220e:	08 95       	ret

00002210 <__fp_split3>:
    2210:	57 fd       	sbrc	r21, 7
    2212:	90 58       	subi	r25, 0x80	; 128
    2214:	44 0f       	add	r20, r20
    2216:	55 1f       	adc	r21, r21
    2218:	59 f0       	breq	.+22     	; 0x2230 <__fp_splitA+0x10>
    221a:	5f 3f       	cpi	r21, 0xFF	; 255
    221c:	71 f0       	breq	.+28     	; 0x223a <__fp_splitA+0x1a>
    221e:	47 95       	ror	r20

00002220 <__fp_splitA>:
    2220:	88 0f       	add	r24, r24
    2222:	97 fb       	bst	r25, 7
    2224:	99 1f       	adc	r25, r25
    2226:	61 f0       	breq	.+24     	; 0x2240 <__fp_splitA+0x20>
    2228:	9f 3f       	cpi	r25, 0xFF	; 255
    222a:	79 f0       	breq	.+30     	; 0x224a <__fp_splitA+0x2a>
    222c:	87 95       	ror	r24
    222e:	08 95       	ret
    2230:	12 16       	cp	r1, r18
    2232:	13 06       	cpc	r1, r19
    2234:	14 06       	cpc	r1, r20
    2236:	55 1f       	adc	r21, r21
    2238:	f2 cf       	rjmp	.-28     	; 0x221e <__fp_split3+0xe>
    223a:	46 95       	lsr	r20
    223c:	f1 df       	rcall	.-30     	; 0x2220 <__fp_splitA>
    223e:	08 c0       	rjmp	.+16     	; 0x2250 <__fp_splitA+0x30>
    2240:	16 16       	cp	r1, r22
    2242:	17 06       	cpc	r1, r23
    2244:	18 06       	cpc	r1, r24
    2246:	99 1f       	adc	r25, r25
    2248:	f1 cf       	rjmp	.-30     	; 0x222c <__fp_splitA+0xc>
    224a:	86 95       	lsr	r24
    224c:	71 05       	cpc	r23, r1
    224e:	61 05       	cpc	r22, r1
    2250:	08 94       	sec
    2252:	08 95       	ret

00002254 <__fp_zero>:
    2254:	e8 94       	clt

00002256 <__fp_szero>:
    2256:	bb 27       	eor	r27, r27
    2258:	66 27       	eor	r22, r22
    225a:	77 27       	eor	r23, r23
    225c:	cb 01       	movw	r24, r22
    225e:	97 f9       	bld	r25, 7
    2260:	08 95       	ret

00002262 <__gesf2>:
    2262:	8a df       	rcall	.-236    	; 0x2178 <__fp_cmp>
    2264:	08 f4       	brcc	.+2      	; 0x2268 <__gesf2+0x6>
    2266:	8f ef       	ldi	r24, 0xFF	; 255
    2268:	08 95       	ret

0000226a <__mulsf3>:
    226a:	0b d0       	rcall	.+22     	; 0x2282 <__mulsf3x>
    226c:	c0 cf       	rjmp	.-128    	; 0x21ee <__fp_round>
    226e:	b1 df       	rcall	.-158    	; 0x21d2 <__fp_pscA>
    2270:	28 f0       	brcs	.+10     	; 0x227c <__mulsf3+0x12>
    2272:	b6 df       	rcall	.-148    	; 0x21e0 <__fp_pscB>
    2274:	18 f0       	brcs	.+6      	; 0x227c <__mulsf3+0x12>
    2276:	95 23       	and	r25, r21
    2278:	09 f0       	breq	.+2      	; 0x227c <__mulsf3+0x12>
    227a:	a2 cf       	rjmp	.-188    	; 0x21c0 <__fp_inf>
    227c:	a7 cf       	rjmp	.-178    	; 0x21cc <__fp_nan>
    227e:	11 24       	eor	r1, r1
    2280:	ea cf       	rjmp	.-44     	; 0x2256 <__fp_szero>

00002282 <__mulsf3x>:
    2282:	c6 df       	rcall	.-116    	; 0x2210 <__fp_split3>
    2284:	a0 f3       	brcs	.-24     	; 0x226e <__mulsf3+0x4>

00002286 <__mulsf3_pse>:
    2286:	95 9f       	mul	r25, r21
    2288:	d1 f3       	breq	.-12     	; 0x227e <__mulsf3+0x14>
    228a:	95 0f       	add	r25, r21
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	55 1f       	adc	r21, r21
    2290:	62 9f       	mul	r22, r18
    2292:	f0 01       	movw	r30, r0
    2294:	72 9f       	mul	r23, r18
    2296:	bb 27       	eor	r27, r27
    2298:	f0 0d       	add	r31, r0
    229a:	b1 1d       	adc	r27, r1
    229c:	63 9f       	mul	r22, r19
    229e:	aa 27       	eor	r26, r26
    22a0:	f0 0d       	add	r31, r0
    22a2:	b1 1d       	adc	r27, r1
    22a4:	aa 1f       	adc	r26, r26
    22a6:	64 9f       	mul	r22, r20
    22a8:	66 27       	eor	r22, r22
    22aa:	b0 0d       	add	r27, r0
    22ac:	a1 1d       	adc	r26, r1
    22ae:	66 1f       	adc	r22, r22
    22b0:	82 9f       	mul	r24, r18
    22b2:	22 27       	eor	r18, r18
    22b4:	b0 0d       	add	r27, r0
    22b6:	a1 1d       	adc	r26, r1
    22b8:	62 1f       	adc	r22, r18
    22ba:	73 9f       	mul	r23, r19
    22bc:	b0 0d       	add	r27, r0
    22be:	a1 1d       	adc	r26, r1
    22c0:	62 1f       	adc	r22, r18
    22c2:	83 9f       	mul	r24, r19
    22c4:	a0 0d       	add	r26, r0
    22c6:	61 1d       	adc	r22, r1
    22c8:	22 1f       	adc	r18, r18
    22ca:	74 9f       	mul	r23, r20
    22cc:	33 27       	eor	r19, r19
    22ce:	a0 0d       	add	r26, r0
    22d0:	61 1d       	adc	r22, r1
    22d2:	23 1f       	adc	r18, r19
    22d4:	84 9f       	mul	r24, r20
    22d6:	60 0d       	add	r22, r0
    22d8:	21 1d       	adc	r18, r1
    22da:	82 2f       	mov	r24, r18
    22dc:	76 2f       	mov	r23, r22
    22de:	6a 2f       	mov	r22, r26
    22e0:	11 24       	eor	r1, r1
    22e2:	9f 57       	subi	r25, 0x7F	; 127
    22e4:	50 40       	sbci	r21, 0x00	; 0
    22e6:	8a f0       	brmi	.+34     	; 0x230a <__mulsf3_pse+0x84>
    22e8:	e1 f0       	breq	.+56     	; 0x2322 <__mulsf3_pse+0x9c>
    22ea:	88 23       	and	r24, r24
    22ec:	4a f0       	brmi	.+18     	; 0x2300 <__mulsf3_pse+0x7a>
    22ee:	ee 0f       	add	r30, r30
    22f0:	ff 1f       	adc	r31, r31
    22f2:	bb 1f       	adc	r27, r27
    22f4:	66 1f       	adc	r22, r22
    22f6:	77 1f       	adc	r23, r23
    22f8:	88 1f       	adc	r24, r24
    22fa:	91 50       	subi	r25, 0x01	; 1
    22fc:	50 40       	sbci	r21, 0x00	; 0
    22fe:	a9 f7       	brne	.-22     	; 0x22ea <__mulsf3_pse+0x64>
    2300:	9e 3f       	cpi	r25, 0xFE	; 254
    2302:	51 05       	cpc	r21, r1
    2304:	70 f0       	brcs	.+28     	; 0x2322 <__mulsf3_pse+0x9c>
    2306:	5c cf       	rjmp	.-328    	; 0x21c0 <__fp_inf>
    2308:	a6 cf       	rjmp	.-180    	; 0x2256 <__fp_szero>
    230a:	5f 3f       	cpi	r21, 0xFF	; 255
    230c:	ec f3       	brlt	.-6      	; 0x2308 <__mulsf3_pse+0x82>
    230e:	98 3e       	cpi	r25, 0xE8	; 232
    2310:	dc f3       	brlt	.-10     	; 0x2308 <__mulsf3_pse+0x82>
    2312:	86 95       	lsr	r24
    2314:	77 95       	ror	r23
    2316:	67 95       	ror	r22
    2318:	b7 95       	ror	r27
    231a:	f7 95       	ror	r31
    231c:	e7 95       	ror	r30
    231e:	9f 5f       	subi	r25, 0xFF	; 255
    2320:	c1 f7       	brne	.-16     	; 0x2312 <__mulsf3_pse+0x8c>
    2322:	fe 2b       	or	r31, r30
    2324:	88 0f       	add	r24, r24
    2326:	91 1d       	adc	r25, r1
    2328:	96 95       	lsr	r25
    232a:	87 95       	ror	r24
    232c:	97 f9       	bld	r25, 7
    232e:	08 95       	ret
    2330:	11 f4       	brne	.+4      	; 0x2336 <__mulsf3_pse+0xb0>
    2332:	0e f4       	brtc	.+2      	; 0x2336 <__mulsf3_pse+0xb0>
    2334:	4b cf       	rjmp	.-362    	; 0x21cc <__fp_nan>
    2336:	41 c0       	rjmp	.+130    	; 0x23ba <__fp_mpack>

00002338 <sqrt>:
    2338:	73 df       	rcall	.-282    	; 0x2220 <__fp_splitA>
    233a:	d0 f3       	brcs	.-12     	; 0x2330 <__mulsf3_pse+0xaa>
    233c:	99 23       	and	r25, r25
    233e:	d9 f3       	breq	.-10     	; 0x2336 <__mulsf3_pse+0xb0>
    2340:	ce f3       	brts	.-14     	; 0x2334 <__mulsf3_pse+0xae>
    2342:	9f 57       	subi	r25, 0x7F	; 127
    2344:	55 0b       	sbc	r21, r21
    2346:	87 ff       	sbrs	r24, 7
    2348:	46 d0       	rcall	.+140    	; 0x23d6 <__fp_norm2>
    234a:	00 24       	eor	r0, r0
    234c:	a0 e6       	ldi	r26, 0x60	; 96
    234e:	40 ea       	ldi	r20, 0xA0	; 160
    2350:	90 01       	movw	r18, r0
    2352:	80 58       	subi	r24, 0x80	; 128
    2354:	56 95       	lsr	r21
    2356:	97 95       	ror	r25
    2358:	28 f4       	brcc	.+10     	; 0x2364 <sqrt+0x2c>
    235a:	80 5c       	subi	r24, 0xC0	; 192
    235c:	66 0f       	add	r22, r22
    235e:	77 1f       	adc	r23, r23
    2360:	88 1f       	adc	r24, r24
    2362:	20 f0       	brcs	.+8      	; 0x236c <sqrt+0x34>
    2364:	26 17       	cp	r18, r22
    2366:	37 07       	cpc	r19, r23
    2368:	48 07       	cpc	r20, r24
    236a:	30 f4       	brcc	.+12     	; 0x2378 <sqrt+0x40>
    236c:	62 1b       	sub	r22, r18
    236e:	73 0b       	sbc	r23, r19
    2370:	84 0b       	sbc	r24, r20
    2372:	20 29       	or	r18, r0
    2374:	31 29       	or	r19, r1
    2376:	4a 2b       	or	r20, r26
    2378:	a6 95       	lsr	r26
    237a:	17 94       	ror	r1
    237c:	07 94       	ror	r0
    237e:	20 25       	eor	r18, r0
    2380:	31 25       	eor	r19, r1
    2382:	4a 27       	eor	r20, r26
    2384:	58 f7       	brcc	.-42     	; 0x235c <sqrt+0x24>
    2386:	66 0f       	add	r22, r22
    2388:	77 1f       	adc	r23, r23
    238a:	88 1f       	adc	r24, r24
    238c:	20 f0       	brcs	.+8      	; 0x2396 <sqrt+0x5e>
    238e:	26 17       	cp	r18, r22
    2390:	37 07       	cpc	r19, r23
    2392:	48 07       	cpc	r20, r24
    2394:	30 f4       	brcc	.+12     	; 0x23a2 <sqrt+0x6a>
    2396:	62 0b       	sbc	r22, r18
    2398:	73 0b       	sbc	r23, r19
    239a:	84 0b       	sbc	r24, r20
    239c:	20 0d       	add	r18, r0
    239e:	31 1d       	adc	r19, r1
    23a0:	41 1d       	adc	r20, r1
    23a2:	a0 95       	com	r26
    23a4:	81 f7       	brne	.-32     	; 0x2386 <sqrt+0x4e>
    23a6:	b9 01       	movw	r22, r18
    23a8:	84 2f       	mov	r24, r20
    23aa:	91 58       	subi	r25, 0x81	; 129
    23ac:	88 0f       	add	r24, r24
    23ae:	96 95       	lsr	r25
    23b0:	87 95       	ror	r24
    23b2:	08 95       	ret

000023b4 <square>:
    23b4:	9b 01       	movw	r18, r22
    23b6:	ac 01       	movw	r20, r24
    23b8:	58 cf       	rjmp	.-336    	; 0x226a <__mulsf3>

000023ba <__fp_mpack>:
    23ba:	9f 3f       	cpi	r25, 0xFF	; 255
    23bc:	31 f0       	breq	.+12     	; 0x23ca <__fp_mpack_finite+0xc>

000023be <__fp_mpack_finite>:
    23be:	91 50       	subi	r25, 0x01	; 1
    23c0:	20 f4       	brcc	.+8      	; 0x23ca <__fp_mpack_finite+0xc>
    23c2:	87 95       	ror	r24
    23c4:	77 95       	ror	r23
    23c6:	67 95       	ror	r22
    23c8:	b7 95       	ror	r27
    23ca:	88 0f       	add	r24, r24
    23cc:	91 1d       	adc	r25, r1
    23ce:	96 95       	lsr	r25
    23d0:	87 95       	ror	r24
    23d2:	97 f9       	bld	r25, 7
    23d4:	08 95       	ret

000023d6 <__fp_norm2>:
    23d6:	91 50       	subi	r25, 0x01	; 1
    23d8:	50 40       	sbci	r21, 0x00	; 0
    23da:	66 0f       	add	r22, r22
    23dc:	77 1f       	adc	r23, r23
    23de:	88 1f       	adc	r24, r24
    23e0:	d2 f7       	brpl	.-12     	; 0x23d6 <__fp_norm2>
    23e2:	08 95       	ret

000023e4 <__udivmodsi4>:
    23e4:	a1 e2       	ldi	r26, 0x21	; 33
    23e6:	1a 2e       	mov	r1, r26
    23e8:	aa 1b       	sub	r26, r26
    23ea:	bb 1b       	sub	r27, r27
    23ec:	fd 01       	movw	r30, r26
    23ee:	0d c0       	rjmp	.+26     	; 0x240a <__udivmodsi4_ep>

000023f0 <__udivmodsi4_loop>:
    23f0:	aa 1f       	adc	r26, r26
    23f2:	bb 1f       	adc	r27, r27
    23f4:	ee 1f       	adc	r30, r30
    23f6:	ff 1f       	adc	r31, r31
    23f8:	a2 17       	cp	r26, r18
    23fa:	b3 07       	cpc	r27, r19
    23fc:	e4 07       	cpc	r30, r20
    23fe:	f5 07       	cpc	r31, r21
    2400:	20 f0       	brcs	.+8      	; 0x240a <__udivmodsi4_ep>
    2402:	a2 1b       	sub	r26, r18
    2404:	b3 0b       	sbc	r27, r19
    2406:	e4 0b       	sbc	r30, r20
    2408:	f5 0b       	sbc	r31, r21

0000240a <__udivmodsi4_ep>:
    240a:	66 1f       	adc	r22, r22
    240c:	77 1f       	adc	r23, r23
    240e:	88 1f       	adc	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	1a 94       	dec	r1
    2414:	69 f7       	brne	.-38     	; 0x23f0 <__udivmodsi4_loop>
    2416:	60 95       	com	r22
    2418:	70 95       	com	r23
    241a:	80 95       	com	r24
    241c:	90 95       	com	r25
    241e:	9b 01       	movw	r18, r22
    2420:	ac 01       	movw	r20, r24
    2422:	bd 01       	movw	r22, r26
    2424:	cf 01       	movw	r24, r30
    2426:	08 95       	ret

00002428 <memset>:
    2428:	dc 01       	movw	r26, r24
    242a:	01 c0       	rjmp	.+2      	; 0x242e <memset+0x6>
    242c:	6d 93       	st	X+, r22
    242e:	41 50       	subi	r20, 0x01	; 1
    2430:	50 40       	sbci	r21, 0x00	; 0
    2432:	e0 f7       	brcc	.-8      	; 0x242c <memset+0x4>
    2434:	08 95       	ret

00002436 <_exit>:
    2436:	f8 94       	cli

00002438 <__stop_program>:
    2438:	ff cf       	rjmp	.-2      	; 0x2438 <__stop_program>
