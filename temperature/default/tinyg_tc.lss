
tinyg_tc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000002c5  00800100  00800100  0000235a  2**0
                  ALLOC
  2 .debug_aranges 000000c0  00000000  00000000  0000235a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000045d  00000000  00000000  0000241a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001337  00000000  00000000  00002877  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000604  00000000  00000000  00003bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001123  00000000  00000000  000041b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000003f0  00000000  00000000  000052d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000a25  00000000  00000000  000056c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
       4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__vector_16>
      44:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__vector_17>
      48:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__vector_18>
      4c:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__vector_19>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>

00000068 <__c.2055>:
      68:	20 42 41 55 44 0a 00                                 BAUD..

0000006f <__c.2053>:
      6f:	0a 49 6e 69 74 69 61 6c 69 7a 65 64 20 00           .Initialized .

0000007d <__c.2095>:
      7d:	0a 00                                               ..

0000007f <__c.2093>:
      7f:	20 20 50 49 44 3a 20 00                               PID: .

00000087 <__c.2091>:
      87:	54 65 6d 70 3a 20 00                                Temp: .

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d8 e0       	ldi	r29, 0x08	; 8
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_clear_bss>:
      9a:	13 e0       	ldi	r17, 0x03	; 3
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	a5 3c       	cpi	r26, 0xC5	; 197
      a6:	b1 07       	cpc	r27, r17
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
      aa:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
      ae:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <main>:
 *
 *	Device and Kinen initialization
 *	Main loop handler
 */
int main(void)
{
      b6:	df 93       	push	r29
      b8:	cf 93       	push	r28
      ba:	cd b7       	in	r28, 0x3d	; 61
      bc:	de b7       	in	r29, 0x3e	; 62
	cli();						// initializations
      be:	f8 94       	cli
	kinen_init();				// do this first
      c0:	0e 94 9f 09 	call	0x133e	; 0x133e <kinen_init>
	device_init();				// handles all the low-level device peripheral inits
      c4:	0e 94 84 00 	call	0x108	; 0x108 <device_init>
	serial_init(BAUD_RATE);
      c8:	60 e0       	ldi	r22, 0x00	; 0
      ca:	76 e9       	ldi	r23, 0x96	; 150
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	0e 94 c0 0b 	call	0x1780	; 0x1780 <serial_init>
	heater_init();				// setup the heater module and subordinate functions
      d4:	0e 94 ab 00 	call	0x156	; 0x156 <heater_init>
	sei(); 						// enable interrupts
      d8:	78 94       	sei

	UNIT_TESTS;					// uncomment __UNIT_TEST_TC to enable unit tests

	heater_on(140);				// ++++ turn heater on for testing
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	8c e0       	ldi	r24, 0x0C	; 12
      e0:	93 e4       	ldi	r25, 0x43	; 67
      e2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <heater_on>

	printPgmString(PSTR("\nInitialized ")); 
      e6:	8f e6       	ldi	r24, 0x6F	; 111
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <printPgmString>
	printFloat(BAUD_RATE);
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	86 e1       	ldi	r24, 0x16	; 22
      f4:	97 e4       	ldi	r25, 0x47	; 71
      f6:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <printFloat>
	printPgmString(PSTR(" BAUD\n")); 
      fa:	88 e6       	ldi	r24, 0x68	; 104
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <printPgmString>

	while (true) {				// go to the controller loop and never return
		_controller();
     102:	0e 94 9e 00 	call	0x13c	; 0x13c <_controller>
     106:	fd cf       	rjmp	.-6      	; 0x102 <main+0x4c>

00000108 <device_init>:

/*
 * Device Init 
 */
void device_init(void)
{
     108:	df 93       	push	r29
     10a:	cf 93       	push	r28
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
	DDRB = PORTB_DIR;			// initialize all ports for proper IO function
     110:	e4 e2       	ldi	r30, 0x24	; 36
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 e1       	ldi	r24, 0x10	; 16
     116:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
     118:	e7 e2       	ldi	r30, 0x27	; 39
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
     11e:	ea e2       	ldi	r30, 0x2A	; 42
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	8c e0       	ldi	r24, 0x0C	; 12
     124:	80 83       	st	Z, r24

	tick_init();
     126:	0e 94 9d 08 	call	0x113a	; 0x113a <tick_init>
	pwm_init();
     12a:	0e 94 38 07 	call	0xe70	; 0xe70 <pwm_init>
	adc_init();
     12e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <adc_init>

	led_off();					// put off the red light [~Sting, 1978]
     132:	0e 94 33 09 	call	0x1266	; 0x1266 <led_off>
}
     136:	cf 91       	pop	r28
     138:	df 91       	pop	r29
     13a:	08 95       	ret

0000013c <_controller>:
 *	start of the list. For any other status code exceution continues down the list
 */

#define	DISPATCH(func) if (func == SC_EAGAIN) return; 
static void _controller()
{
     13c:	df 93       	push	r29
     13e:	cf 93       	push	r28
     140:	cd b7       	in	r28, 0x3d	; 61
     142:	de b7       	in	r29, 0x3e	; 62
	DISPATCH(kinen_callback());		// intercept low-level communication events
     144:	0e 94 a8 09 	call	0x1350	; 0x1350 <kinen_callback>
     148:	82 30       	cpi	r24, 0x02	; 2
     14a:	11 f0       	breq	.+4      	; 0x150 <_controller+0x14>
	DISPATCH(tick_callback());		// regular interval timer clock handler (ticks)
     14c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <tick_callback>
}
     150:	cf 91       	pop	r28
     152:	df 91       	pop	r29
     154:	08 95       	ret

00000156 <heater_init>:
 * heater_off()	 - turn heater off	
 * heater_callback() - 100ms timed loop for heater control
 */

void heater_init()
{ 
     156:	df 93       	push	r29
     158:	cf 93       	push	r28
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
	// initialize heater, start PID and PWM
	memset(&heater, 0, sizeof(struct Heater));
     15e:	82 e1       	ldi	r24, 0x12	; 18
     160:	91 e0       	ldi	r25, 0x01	; 1
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	41 e2       	ldi	r20, 0x21	; 33
     168:	50 e0       	ldi	r21, 0x00	; 0
     16a:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <memset>
	heater.ambient_timeout = HEATER_AMBIENT_TIMEOUT;
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	a4 eb       	ldi	r26, 0xB4	; 180
     174:	b2 e4       	ldi	r27, 0x42	; 66
     176:	80 93 23 01 	sts	0x0123, r24
     17a:	90 93 24 01 	sts	0x0124, r25
     17e:	a0 93 25 01 	sts	0x0125, r26
     182:	b0 93 26 01 	sts	0x0126, r27
	heater.regulation_timeout = HEATER_REGULATION_TIMEOUT;
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	a6 e9       	ldi	r26, 0x96	; 150
     18c:	b3 e4       	ldi	r27, 0x43	; 67
     18e:	80 93 27 01 	sts	0x0127, r24
     192:	90 93 28 01 	sts	0x0128, r25
     196:	a0 93 29 01 	sts	0x0129, r26
     19a:	b0 93 2a 01 	sts	0x012A, r27
	heater.ambient_temperature = HEATER_AMBIENT_TEMPERATURE;
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	a0 e2       	ldi	r26, 0x20	; 32
     1a4:	b2 e4       	ldi	r27, 0x42	; 66
     1a6:	80 93 2b 01 	sts	0x012B, r24
     1aa:	90 93 2c 01 	sts	0x012C, r25
     1ae:	a0 93 2d 01 	sts	0x012D, r26
     1b2:	b0 93 2e 01 	sts	0x012E, r27
	heater.overheat_temperature = HEATER_OVERHEAT_TEMPERATURE;
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	a6 e9       	ldi	r26, 0x96	; 150
     1bc:	b3 e4       	ldi	r27, 0x43	; 67
     1be:	80 93 2f 01 	sts	0x012F, r24
     1c2:	90 93 30 01 	sts	0x0130, r25
     1c6:	a0 93 31 01 	sts	0x0131, r26
     1ca:	b0 93 32 01 	sts	0x0132, r27

	// initialize lower-level functions used by heater
	// note: PWM and ADC are initialized as part of the device init
	sensor_init();					// setup the temperature sensor module
     1ce:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <sensor_init>
	pid_init();
     1d2:	0e 94 80 02 	call	0x500	; 0x500 <pid_init>
}
     1d6:	cf 91       	pop	r28
     1d8:	df 91       	pop	r29
     1da:	08 95       	ret

000001dc <heater_on>:

void heater_on(double setpoint)
{
     1dc:	df 93       	push	r29
     1de:	cf 93       	push	r28
     1e0:	00 d0       	rcall	.+0      	; 0x1e2 <heater_on+0x6>
     1e2:	00 d0       	rcall	.+0      	; 0x1e4 <heater_on+0x8>
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
     1e8:	69 83       	std	Y+1, r22	; 0x01
     1ea:	7a 83       	std	Y+2, r23	; 0x02
     1ec:	8b 83       	std	Y+3, r24	; 0x03
     1ee:	9c 83       	std	Y+4, r25	; 0x04
	// no action if heater is already on
	if ((heater.state == HEATER_HEATING) || (heater.state == HEATER_REGULATED)) {
     1f0:	80 91 12 01 	lds	r24, 0x0112
     1f4:	82 30       	cpi	r24, 0x02	; 2
     1f6:	31 f1       	breq	.+76     	; 0x244 <heater_on+0x68>
     1f8:	80 91 12 01 	lds	r24, 0x0112
     1fc:	83 30       	cpi	r24, 0x03	; 3
     1fe:	11 f1       	breq	.+68     	; 0x244 <heater_on+0x68>
		return;
	}
	// turn on lower level functions
	sensor_on();					// enable the sensor
     200:	0e 94 1f 05 	call	0xa3e	; 0xa3e <sensor_on>
	sensor_start_reading();			// now start a reading
     204:	0e 94 32 05 	call	0xa64	; 0xa64 <sensor_start_reading>
	pid_reset();
     208:	0e 94 da 02 	call	0x5b4	; 0x5b4 <pid_reset>
	pwm_on(PWM_FREQUENCY, 0);		// duty cycle will be set by PID loop
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	8a e7       	ldi	r24, 0x7A	; 122
     212:	94 e4       	ldi	r25, 0x44	; 68
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	0e 94 6a 07 	call	0xed4	; 0xed4 <pwm_on>
	heater.setpoint = setpoint;
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	9a 81       	ldd	r25, Y+2	; 0x02
     224:	ab 81       	ldd	r26, Y+3	; 0x03
     226:	bc 81       	ldd	r27, Y+4	; 0x04
     228:	80 93 1b 01 	sts	0x011B, r24
     22c:	90 93 1c 01 	sts	0x011C, r25
     230:	a0 93 1d 01 	sts	0x011D, r26
     234:	b0 93 1e 01 	sts	0x011E, r27
	heater.regulation_count = HEATER_REGULATION_COUNT;
     238:	8a e0       	ldi	r24, 0x0A	; 10
     23a:	80 93 16 01 	sts	0x0116, r24
	heater.state = HEATER_HEATING;
     23e:	82 e0       	ldi	r24, 0x02	; 2
     240:	80 93 12 01 	sts	0x0112, r24
}
     244:	0f 90       	pop	r0
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	cf 91       	pop	r28
     24e:	df 91       	pop	r29
     250:	08 95       	ret

00000252 <heater_off>:

void heater_off(uint8_t state, uint8_t code) 
{
     252:	df 93       	push	r29
     254:	cf 93       	push	r28
     256:	00 d0       	rcall	.+0      	; 0x258 <heater_off+0x6>
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
     25c:	89 83       	std	Y+1, r24	; 0x01
     25e:	6a 83       	std	Y+2, r22	; 0x02
	pwm_off();						// stop sending current to the heater
     260:	0e 94 97 07 	call	0xf2e	; 0xf2e <pwm_off>
	sensor_off();					// stop taking readings
     264:	0e 94 29 05 	call	0xa52	; 0xa52 <sensor_off>
	heater.state = state;
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	80 93 12 01 	sts	0x0112, r24
	heater.code = code;
     26e:	8a 81       	ldd	r24, Y+2	; 0x02
     270:	80 93 13 01 	sts	0x0113, r24
	led_off();
     274:	0e 94 33 09 	call	0x1266	; 0x1266 <led_off>
}
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	cf 91       	pop	r28
     27e:	df 91       	pop	r29
     280:	08 95       	ret

00000282 <heater_callback>:

void heater_callback()
{
     282:	df 93       	push	r29
     284:	cf 93       	push	r28
     286:	00 d0       	rcall	.+0      	; 0x288 <heater_callback+0x6>
     288:	00 d0       	rcall	.+0      	; 0x28a <heater_callback+0x8>
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
	// catch the no-op cases
	if ((heater.state == HEATER_OFF) || (heater.state == HEATER_SHUTDOWN)) { return;}
     28e:	80 91 12 01 	lds	r24, 0x0112
     292:	88 23       	and	r24, r24
     294:	09 f4       	brne	.+2      	; 0x298 <heater_callback+0x16>
     296:	2d c1       	rjmp	.+602    	; 0x4f2 <heater_callback+0x270>
     298:	80 91 12 01 	lds	r24, 0x0112
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	09 f4       	brne	.+2      	; 0x2a2 <heater_callback+0x20>
     2a0:	28 c1       	rjmp	.+592    	; 0x4f2 <heater_callback+0x270>

	// get current temp or an error if there is no temperature reading
	if ((heater.temperature = sensor_get_temperature()) < ABSOLUTE_ZERO) { 
     2a2:	0e 94 50 05 	call	0xaa0	; 0xaa0 <sensor_get_temperature>
     2a6:	dc 01       	movw	r26, r24
     2a8:	cb 01       	movw	r24, r22
     2aa:	80 93 17 01 	sts	0x0117, r24
     2ae:	90 93 18 01 	sts	0x0118, r25
     2b2:	a0 93 19 01 	sts	0x0119, r26
     2b6:	b0 93 1a 01 	sts	0x011A, r27
     2ba:	80 91 17 01 	lds	r24, 0x0117
     2be:	90 91 18 01 	lds	r25, 0x0118
     2c2:	a0 91 19 01 	lds	r26, 0x0119
     2c6:	b0 91 1a 01 	lds	r27, 0x011A
     2ca:	bc 01       	movw	r22, r24
     2cc:	cd 01       	movw	r24, r26
     2ce:	23 e3       	ldi	r18, 0x33	; 51
     2d0:	33 e9       	ldi	r19, 0x93	; 147
     2d2:	48 e8       	ldi	r20, 0x88	; 136
     2d4:	53 ec       	ldi	r21, 0xC3	; 195
     2d6:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__cmpsf2>
     2da:	88 23       	and	r24, r24
     2dc:	0c f4       	brge	.+2      	; 0x2e0 <heater_callback+0x5e>
     2de:	09 c1       	rjmp	.+530    	; 0x4f2 <heater_callback+0x270>
		return;
	}
	if (heater.temperature > heater.overheat_temperature) {
     2e0:	80 91 17 01 	lds	r24, 0x0117
     2e4:	90 91 18 01 	lds	r25, 0x0118
     2e8:	a0 91 19 01 	lds	r26, 0x0119
     2ec:	b0 91 1a 01 	lds	r27, 0x011A
     2f0:	20 91 2f 01 	lds	r18, 0x012F
     2f4:	30 91 30 01 	lds	r19, 0x0130
     2f8:	40 91 31 01 	lds	r20, 0x0131
     2fc:	50 91 32 01 	lds	r21, 0x0132
     300:	bc 01       	movw	r22, r24
     302:	cd 01       	movw	r24, r26
     304:	0e 94 87 10 	call	0x210e	; 0x210e <__gesf2>
     308:	18 16       	cp	r1, r24
     30a:	2c f4       	brge	.+10     	; 0x316 <heater_callback+0x94>
		heater_off(HEATER_SHUTDOWN, HEATER_OVERHEATED);
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	63 e0       	ldi	r22, 0x03	; 3
     310:	0e 94 29 01 	call	0x252	; 0x252 <heater_off>
     314:	ee c0       	rjmp	.+476    	; 0x4f2 <heater_callback+0x270>
		return;
	}
	sensor_start_reading();		// start next reading
     316:	0e 94 32 05 	call	0xa64	; 0xa64 <sensor_start_reading>

	// calculate the next PWM level via the PID
	double duty_cycle = pid_calculate(heater.setpoint, heater.temperature);
     31a:	80 91 1b 01 	lds	r24, 0x011B
     31e:	90 91 1c 01 	lds	r25, 0x011C
     322:	a0 91 1d 01 	lds	r26, 0x011D
     326:	b0 91 1e 01 	lds	r27, 0x011E
     32a:	20 91 17 01 	lds	r18, 0x0117
     32e:	30 91 18 01 	lds	r19, 0x0118
     332:	40 91 19 01 	lds	r20, 0x0119
     336:	50 91 1a 01 	lds	r21, 0x011A
     33a:	bc 01       	movw	r22, r24
     33c:	cd 01       	movw	r24, r26
     33e:	0e 94 05 03 	call	0x60a	; 0x60a <pid_calculate>
     342:	dc 01       	movw	r26, r24
     344:	cb 01       	movw	r24, r22
     346:	89 83       	std	Y+1, r24	; 0x01
     348:	9a 83       	std	Y+2, r25	; 0x02
     34a:	ab 83       	std	Y+3, r26	; 0x03
     34c:	bc 83       	std	Y+4, r27	; 0x04
	pwm_set_duty(duty_cycle);
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	9a 81       	ldd	r25, Y+2	; 0x02
     352:	ab 81       	ldd	r26, Y+3	; 0x03
     354:	bc 81       	ldd	r27, Y+4	; 0x04
     356:	bc 01       	movw	r22, r24
     358:	cd 01       	movw	r24, r26
     35a:	0e 94 12 08 	call	0x1024	; 0x1024 <pwm_set_duty>

	if (--heater.readout < 0) {
     35e:	80 91 15 01 	lds	r24, 0x0115
     362:	81 50       	subi	r24, 0x01	; 1
     364:	80 93 15 01 	sts	0x0115, r24
     368:	80 91 15 01 	lds	r24, 0x0115
     36c:	88 23       	and	r24, r24
     36e:	3c f5       	brge	.+78     	; 0x3be <heater_callback+0x13c>
		heater.readout = 5;
     370:	85 e0       	ldi	r24, 0x05	; 5
     372:	80 93 15 01 	sts	0x0115, r24
		printPgmString(PSTR("Temp: ")); 
     376:	87 e8       	ldi	r24, 0x87	; 135
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <printPgmString>
		printFloat(heater.temperature);
     37e:	80 91 17 01 	lds	r24, 0x0117
     382:	90 91 18 01 	lds	r25, 0x0118
     386:	a0 91 19 01 	lds	r26, 0x0119
     38a:	b0 91 1a 01 	lds	r27, 0x011A
     38e:	bc 01       	movw	r22, r24
     390:	cd 01       	movw	r24, r26
     392:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <printFloat>
		printPgmString(PSTR("  PID: ")); 
     396:	8f e7       	ldi	r24, 0x7F	; 127
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <printPgmString>
		printFloat(pid.output);
     39e:	80 91 35 01 	lds	r24, 0x0135
     3a2:	90 91 36 01 	lds	r25, 0x0136
     3a6:	a0 91 37 01 	lds	r26, 0x0137
     3aa:	b0 91 38 01 	lds	r27, 0x0138
     3ae:	bc 01       	movw	r22, r24
     3b0:	cd 01       	movw	r24, r26
     3b2:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <printFloat>
		printPgmString(PSTR("\n")); 
     3b6:	8d e7       	ldi	r24, 0x7D	; 125
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <printPgmString>
	}

	// handle HEATER exceptions
	if (heater.state == HEATER_HEATING) {
     3be:	80 91 12 01 	lds	r24, 0x0112
     3c2:	82 30       	cpi	r24, 0x02	; 2
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <heater_callback+0x146>
     3c6:	7c c0       	rjmp	.+248    	; 0x4c0 <heater_callback+0x23e>
		heater.regulation_timer += HEATER_TICK_SECONDS;
     3c8:	80 91 1f 01 	lds	r24, 0x011F
     3cc:	90 91 20 01 	lds	r25, 0x0120
     3d0:	a0 91 21 01 	lds	r26, 0x0121
     3d4:	b0 91 22 01 	lds	r27, 0x0122
     3d8:	bc 01       	movw	r22, r24
     3da:	cd 01       	movw	r24, r26
     3dc:	2d ec       	ldi	r18, 0xCD	; 205
     3de:	3c ec       	ldi	r19, 0xCC	; 204
     3e0:	4c ec       	ldi	r20, 0xCC	; 204
     3e2:	5d e3       	ldi	r21, 0x3D	; 61
     3e4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__addsf3>
     3e8:	dc 01       	movw	r26, r24
     3ea:	cb 01       	movw	r24, r22
     3ec:	80 93 1f 01 	sts	0x011F, r24
     3f0:	90 93 20 01 	sts	0x0120, r25
     3f4:	a0 93 21 01 	sts	0x0121, r26
     3f8:	b0 93 22 01 	sts	0x0122, r27

		if ((heater.temperature < heater.ambient_temperature) &&
     3fc:	80 91 17 01 	lds	r24, 0x0117
     400:	90 91 18 01 	lds	r25, 0x0118
     404:	a0 91 19 01 	lds	r26, 0x0119
     408:	b0 91 1a 01 	lds	r27, 0x011A
     40c:	20 91 2b 01 	lds	r18, 0x012B
     410:	30 91 2c 01 	lds	r19, 0x012C
     414:	40 91 2d 01 	lds	r20, 0x012D
     418:	50 91 2e 01 	lds	r21, 0x012E
     41c:	bc 01       	movw	r22, r24
     41e:	cd 01       	movw	r24, r26
     420:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__cmpsf2>
     424:	88 23       	and	r24, r24
     426:	dc f4       	brge	.+54     	; 0x45e <heater_callback+0x1dc>
     428:	80 91 1f 01 	lds	r24, 0x011F
     42c:	90 91 20 01 	lds	r25, 0x0120
     430:	a0 91 21 01 	lds	r26, 0x0121
     434:	b0 91 22 01 	lds	r27, 0x0122
     438:	20 91 23 01 	lds	r18, 0x0123
     43c:	30 91 24 01 	lds	r19, 0x0124
     440:	40 91 25 01 	lds	r20, 0x0125
     444:	50 91 26 01 	lds	r21, 0x0126
     448:	bc 01       	movw	r22, r24
     44a:	cd 01       	movw	r24, r26
     44c:	0e 94 87 10 	call	0x210e	; 0x210e <__gesf2>
     450:	18 16       	cp	r1, r24
     452:	2c f4       	brge	.+10     	; 0x45e <heater_callback+0x1dc>
			(heater.regulation_timer > heater.ambient_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_AMBIENT_TIMED_OUT);
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	61 e0       	ldi	r22, 0x01	; 1
     458:	0e 94 29 01 	call	0x252	; 0x252 <heater_off>
     45c:	4a c0       	rjmp	.+148    	; 0x4f2 <heater_callback+0x270>
			return;
		}
		if ((heater.temperature < heater.setpoint) &&
     45e:	80 91 17 01 	lds	r24, 0x0117
     462:	90 91 18 01 	lds	r25, 0x0118
     466:	a0 91 19 01 	lds	r26, 0x0119
     46a:	b0 91 1a 01 	lds	r27, 0x011A
     46e:	20 91 1b 01 	lds	r18, 0x011B
     472:	30 91 1c 01 	lds	r19, 0x011C
     476:	40 91 1d 01 	lds	r20, 0x011D
     47a:	50 91 1e 01 	lds	r21, 0x011E
     47e:	bc 01       	movw	r22, r24
     480:	cd 01       	movw	r24, r26
     482:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__cmpsf2>
     486:	88 23       	and	r24, r24
     488:	dc f4       	brge	.+54     	; 0x4c0 <heater_callback+0x23e>
     48a:	80 91 1f 01 	lds	r24, 0x011F
     48e:	90 91 20 01 	lds	r25, 0x0120
     492:	a0 91 21 01 	lds	r26, 0x0121
     496:	b0 91 22 01 	lds	r27, 0x0122
     49a:	20 91 27 01 	lds	r18, 0x0127
     49e:	30 91 28 01 	lds	r19, 0x0128
     4a2:	40 91 29 01 	lds	r20, 0x0129
     4a6:	50 91 2a 01 	lds	r21, 0x012A
     4aa:	bc 01       	movw	r22, r24
     4ac:	cd 01       	movw	r24, r26
     4ae:	0e 94 87 10 	call	0x210e	; 0x210e <__gesf2>
     4b2:	18 16       	cp	r1, r24
     4b4:	2c f4       	brge	.+10     	; 0x4c0 <heater_callback+0x23e>
			(heater.regulation_timer > heater.regulation_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_REGULATION_TIMED_OUT);
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	62 e0       	ldi	r22, 0x02	; 2
     4ba:	0e 94 29 01 	call	0x252	; 0x252 <heater_off>
     4be:	19 c0       	rjmp	.+50     	; 0x4f2 <heater_callback+0x270>
			return;
		}
	}
	// manage heater state and LED indicator
	if (heater.regulation_count > 0) {
     4c0:	80 91 16 01 	lds	r24, 0x0116
     4c4:	88 23       	and	r24, r24
     4c6:	61 f0       	breq	.+24     	; 0x4e0 <heater_callback+0x25e>
		if (--heater.regulation_count <= 0) {
     4c8:	80 91 16 01 	lds	r24, 0x0116
     4cc:	81 50       	subi	r24, 0x01	; 1
     4ce:	80 93 16 01 	sts	0x0116, r24
     4d2:	80 91 16 01 	lds	r24, 0x0116
     4d6:	88 23       	and	r24, r24
     4d8:	19 f4       	brne	.+6      	; 0x4e0 <heater_callback+0x25e>
			heater.state = HEATER_REGULATED;
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	80 93 12 01 	sts	0x0112, r24
		}
	}
	if (heater.state == HEATER_REGULATED) {
     4e0:	80 91 12 01 	lds	r24, 0x0112
     4e4:	83 30       	cpi	r24, 0x03	; 3
     4e6:	19 f4       	brne	.+6      	; 0x4ee <heater_callback+0x26c>
		led_on();
     4e8:	0e 94 25 09 	call	0x124a	; 0x124a <led_on>
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <heater_callback+0x270>
	} else {
		led_toggle();
     4ee:	0e 94 41 09 	call	0x1282	; 0x1282 <led_toggle>
	}
}
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	cf 91       	pop	r28
     4fc:	df 91       	pop	r29
     4fe:	08 95       	ret

00000500 <pid_init>:
 * pid_reset() - reset PID values to cold start
 * pid_calc() - derived from: http://www.embeddedheaven.com/pid-control-algorithm-c-language.htm
 */

void pid_init() 
{
     500:	df 93       	push	r29
     502:	cf 93       	push	r28
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
	memset(&pid, 0, sizeof(struct PIDstruct));
     508:	83 e3       	ldi	r24, 0x33	; 51
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	46 e3       	ldi	r20, 0x36	; 54
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <memset>
	pid.dt = PID_DT;
     518:	8d ec       	ldi	r24, 0xCD	; 205
     51a:	9c ec       	ldi	r25, 0xCC	; 204
     51c:	ac ec       	ldi	r26, 0xCC	; 204
     51e:	bd e3       	ldi	r27, 0x3D	; 61
     520:	80 93 51 01 	sts	0x0151, r24
     524:	90 93 52 01 	sts	0x0152, r25
     528:	a0 93 53 01 	sts	0x0153, r26
     52c:	b0 93 54 01 	sts	0x0154, r27
	pid.Kp = PID_Kp;
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	a0 e0       	ldi	r26, 0x00	; 0
     536:	bf e3       	ldi	r27, 0x3F	; 63
     538:	80 93 55 01 	sts	0x0155, r24
     53c:	90 93 56 01 	sts	0x0156, r25
     540:	a0 93 57 01 	sts	0x0157, r26
     544:	b0 93 58 01 	sts	0x0158, r27
	pid.Ki = PID_Ki;
     548:	8a e0       	ldi	r24, 0x0A	; 10
     54a:	97 ed       	ldi	r25, 0xD7	; 215
     54c:	a3 ea       	ldi	r26, 0xA3	; 163
     54e:	bb e3       	ldi	r27, 0x3B	; 59
     550:	80 93 59 01 	sts	0x0159, r24
     554:	90 93 5a 01 	sts	0x015A, r25
     558:	a0 93 5b 01 	sts	0x015B, r26
     55c:	b0 93 5c 01 	sts	0x015C, r27
	pid.Kd = PID_Kd;
     560:	8a e0       	ldi	r24, 0x0A	; 10
     562:	97 ed       	ldi	r25, 0xD7	; 215
     564:	a3 e2       	ldi	r26, 0x23	; 35
     566:	bc e3       	ldi	r27, 0x3C	; 60
     568:	80 93 5d 01 	sts	0x015D, r24
     56c:	90 93 5e 01 	sts	0x015E, r25
     570:	a0 93 5f 01 	sts	0x015F, r26
     574:	b0 93 60 01 	sts	0x0160, r27
	pid.output_max = PID_MAX_OUTPUT;		// saturation filter max value
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	a8 ec       	ldi	r26, 0xC8	; 200
     57e:	b2 e4       	ldi	r27, 0x42	; 66
     580:	80 93 39 01 	sts	0x0139, r24
     584:	90 93 3a 01 	sts	0x013A, r25
     588:	a0 93 3b 01 	sts	0x013B, r26
     58c:	b0 93 3c 01 	sts	0x013C, r27
	pid.output_min = PID_MIN_OUTPUT;		// saturation filter min value
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e0       	ldi	r27, 0x00	; 0
     598:	80 93 3d 01 	sts	0x013D, r24
     59c:	90 93 3e 01 	sts	0x013E, r25
     5a0:	a0 93 3f 01 	sts	0x013F, r26
     5a4:	b0 93 40 01 	sts	0x0140, r27
	pid.state = PID_ON;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	80 93 33 01 	sts	0x0133, r24
}
     5ae:	cf 91       	pop	r28
     5b0:	df 91       	pop	r29
     5b2:	08 95       	ret

000005b4 <pid_reset>:

void pid_reset()
{
     5b4:	df 93       	push	r29
     5b6:	cf 93       	push	r28
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
	pid.output = 0;
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	a0 e0       	ldi	r26, 0x00	; 0
     5c2:	b0 e0       	ldi	r27, 0x00	; 0
     5c4:	80 93 35 01 	sts	0x0135, r24
     5c8:	90 93 36 01 	sts	0x0136, r25
     5cc:	a0 93 37 01 	sts	0x0137, r26
     5d0:	b0 93 38 01 	sts	0x0138, r27
	pid.integral = 0;
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	a0 e0       	ldi	r26, 0x00	; 0
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	80 93 49 01 	sts	0x0149, r24
     5e0:	90 93 4a 01 	sts	0x014A, r25
     5e4:	a0 93 4b 01 	sts	0x014B, r26
     5e8:	b0 93 4c 01 	sts	0x014C, r27
	pid.prev_error = 0;
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	a0 e0       	ldi	r26, 0x00	; 0
     5f2:	b0 e0       	ldi	r27, 0x00	; 0
     5f4:	80 93 45 01 	sts	0x0145, r24
     5f8:	90 93 46 01 	sts	0x0146, r25
     5fc:	a0 93 47 01 	sts	0x0147, r26
     600:	b0 93 48 01 	sts	0x0148, r27
}
     604:	cf 91       	pop	r28
     606:	df 91       	pop	r29
     608:	08 95       	ret

0000060a <pid_calculate>:

double pid_calculate(double setpoint,double temperature)
{
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	df 93       	push	r29
     614:	cf 93       	push	r28
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	2c 97       	sbiw	r28, 0x0c	; 12
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	de bf       	out	0x3e, r29	; 62
     622:	0f be       	out	0x3f, r0	; 63
     624:	cd bf       	out	0x3d, r28	; 61
     626:	69 83       	std	Y+1, r22	; 0x01
     628:	7a 83       	std	Y+2, r23	; 0x02
     62a:	8b 83       	std	Y+3, r24	; 0x03
     62c:	9c 83       	std	Y+4, r25	; 0x04
     62e:	2d 83       	std	Y+5, r18	; 0x05
     630:	3e 83       	std	Y+6, r19	; 0x06
     632:	4f 83       	std	Y+7, r20	; 0x07
     634:	58 87       	std	Y+8, r21	; 0x08
	if (pid.state == PID_OFF) { return (0);}
     636:	80 91 33 01 	lds	r24, 0x0133
     63a:	88 23       	and	r24, r24
     63c:	49 f4       	brne	.+18     	; 0x650 <pid_calculate+0x46>
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	a0 e0       	ldi	r26, 0x00	; 0
     644:	b0 e0       	ldi	r27, 0x00	; 0
     646:	89 87       	std	Y+9, r24	; 0x09
     648:	9a 87       	std	Y+10, r25	; 0x0a
     64a:	ab 87       	std	Y+11, r26	; 0x0b
     64c:	bc 87       	std	Y+12, r27	; 0x0c
     64e:	99 c1       	rjmp	.+818    	; 0x982 <__stack+0x83>

	pid.setpoint = setpoint;		// ++++ test
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	9a 81       	ldd	r25, Y+2	; 0x02
     654:	ab 81       	ldd	r26, Y+3	; 0x03
     656:	bc 81       	ldd	r27, Y+4	; 0x04
     658:	80 93 65 01 	sts	0x0165, r24
     65c:	90 93 66 01 	sts	0x0166, r25
     660:	a0 93 67 01 	sts	0x0167, r26
     664:	b0 93 68 01 	sts	0x0168, r27
	pid.temperature = temperature;	// ++++ test
     668:	8d 81       	ldd	r24, Y+5	; 0x05
     66a:	9e 81       	ldd	r25, Y+6	; 0x06
     66c:	af 81       	ldd	r26, Y+7	; 0x07
     66e:	b8 85       	ldd	r27, Y+8	; 0x08
     670:	80 93 61 01 	sts	0x0161, r24
     674:	90 93 62 01 	sts	0x0162, r25
     678:	a0 93 63 01 	sts	0x0163, r26
     67c:	b0 93 64 01 	sts	0x0164, r27

	pid.error = setpoint - temperature;		// current error term
     680:	69 81       	ldd	r22, Y+1	; 0x01
     682:	7a 81       	ldd	r23, Y+2	; 0x02
     684:	8b 81       	ldd	r24, Y+3	; 0x03
     686:	9c 81       	ldd	r25, Y+4	; 0x04
     688:	2d 81       	ldd	r18, Y+5	; 0x05
     68a:	3e 81       	ldd	r19, Y+6	; 0x06
     68c:	4f 81       	ldd	r20, Y+7	; 0x07
     68e:	58 85       	ldd	r21, Y+8	; 0x08
     690:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__subsf3>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	80 93 41 01 	sts	0x0141, r24
     69c:	90 93 42 01 	sts	0x0142, r25
     6a0:	a0 93 43 01 	sts	0x0143, r26
     6a4:	b0 93 44 01 	sts	0x0144, r27

//	if (fabs(pid.error) > PID_EPSILON) {	// stop integration if error term is too small
	if ((fabs(pid.error) > PID_EPSILON) ||	// stop integration if error term is too small
     6a8:	80 91 41 01 	lds	r24, 0x0141
     6ac:	90 91 42 01 	lds	r25, 0x0142
     6b0:	a0 91 43 01 	lds	r26, 0x0143
     6b4:	b0 91 44 01 	lds	r27, 0x0144
     6b8:	bf 77       	andi	r27, 0x7F	; 127
     6ba:	bc 01       	movw	r22, r24
     6bc:	cd 01       	movw	r24, r26
     6be:	2a e0       	ldi	r18, 0x0A	; 10
     6c0:	37 ed       	ldi	r19, 0xD7	; 215
     6c2:	43 e2       	ldi	r20, 0x23	; 35
     6c4:	5c e3       	ldi	r21, 0x3C	; 60
     6c6:	0e 94 87 10 	call	0x210e	; 0x210e <__gesf2>
     6ca:	18 16       	cp	r1, r24
     6cc:	14 f1       	brlt	.+68     	; 0x712 <pid_calculate+0x108>
     6ce:	e0 90 35 01 	lds	r14, 0x0135
     6d2:	f0 90 36 01 	lds	r15, 0x0136
     6d6:	00 91 37 01 	lds	r16, 0x0137
     6da:	10 91 38 01 	lds	r17, 0x0138
     6de:	80 91 39 01 	lds	r24, 0x0139
     6e2:	90 91 3a 01 	lds	r25, 0x013A
     6e6:	a0 91 3b 01 	lds	r26, 0x013B
     6ea:	b0 91 3c 01 	lds	r27, 0x013C
     6ee:	bc 01       	movw	r22, r24
     6f0:	cd 01       	movw	r24, r26
     6f2:	2c ea       	ldi	r18, 0xAC	; 172
     6f4:	35 ec       	ldi	r19, 0xC5	; 197
     6f6:	47 e2       	ldi	r20, 0x27	; 39
     6f8:	57 e3       	ldi	r21, 0x37	; 55
     6fa:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__subsf3>
     6fe:	dc 01       	movw	r26, r24
     700:	cb 01       	movw	r24, r22
     702:	9c 01       	movw	r18, r24
     704:	ad 01       	movw	r20, r26
     706:	c8 01       	movw	r24, r16
     708:	b7 01       	movw	r22, r14
     70a:	0e 94 87 10 	call	0x210e	; 0x210e <__gesf2>
     70e:	88 23       	and	r24, r24
     710:	74 f1       	brlt	.+92     	; 0x76e <pid_calculate+0x164>
		(pid.output >= (pid.output_max - EPSILON))) {//...or output is too large (anti-windup)
		pid.integral += (pid.error * pid.dt);
     712:	e0 90 49 01 	lds	r14, 0x0149
     716:	f0 90 4a 01 	lds	r15, 0x014A
     71a:	00 91 4b 01 	lds	r16, 0x014B
     71e:	10 91 4c 01 	lds	r17, 0x014C
     722:	80 91 41 01 	lds	r24, 0x0141
     726:	90 91 42 01 	lds	r25, 0x0142
     72a:	a0 91 43 01 	lds	r26, 0x0143
     72e:	b0 91 44 01 	lds	r27, 0x0144
     732:	20 91 51 01 	lds	r18, 0x0151
     736:	30 91 52 01 	lds	r19, 0x0152
     73a:	40 91 53 01 	lds	r20, 0x0153
     73e:	50 91 54 01 	lds	r21, 0x0154
     742:	bc 01       	movw	r22, r24
     744:	cd 01       	movw	r24, r26
     746:	0e 94 8b 10 	call	0x2116	; 0x2116 <__mulsf3>
     74a:	dc 01       	movw	r26, r24
     74c:	cb 01       	movw	r24, r22
     74e:	9c 01       	movw	r18, r24
     750:	ad 01       	movw	r20, r26
     752:	c8 01       	movw	r24, r16
     754:	b7 01       	movw	r22, r14
     756:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__addsf3>
     75a:	dc 01       	movw	r26, r24
     75c:	cb 01       	movw	r24, r22
     75e:	80 93 49 01 	sts	0x0149, r24
     762:	90 93 4a 01 	sts	0x014A, r25
     766:	a0 93 4b 01 	sts	0x014B, r26
     76a:	b0 93 4c 01 	sts	0x014C, r27
	}
	pid.derivative = (pid.error - pid.prev_error) / pid.dt;
     76e:	80 91 41 01 	lds	r24, 0x0141
     772:	90 91 42 01 	lds	r25, 0x0142
     776:	a0 91 43 01 	lds	r26, 0x0143
     77a:	b0 91 44 01 	lds	r27, 0x0144
     77e:	20 91 45 01 	lds	r18, 0x0145
     782:	30 91 46 01 	lds	r19, 0x0146
     786:	40 91 47 01 	lds	r20, 0x0147
     78a:	50 91 48 01 	lds	r21, 0x0148
     78e:	bc 01       	movw	r22, r24
     790:	cd 01       	movw	r24, r26
     792:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__subsf3>
     796:	dc 01       	movw	r26, r24
     798:	cb 01       	movw	r24, r22
     79a:	20 91 51 01 	lds	r18, 0x0151
     79e:	30 91 52 01 	lds	r19, 0x0152
     7a2:	40 91 53 01 	lds	r20, 0x0153
     7a6:	50 91 54 01 	lds	r21, 0x0154
     7aa:	bc 01       	movw	r22, r24
     7ac:	cd 01       	movw	r24, r26
     7ae:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divsf3>
     7b2:	dc 01       	movw	r26, r24
     7b4:	cb 01       	movw	r24, r22
     7b6:	80 93 4d 01 	sts	0x014D, r24
     7ba:	90 93 4e 01 	sts	0x014E, r25
     7be:	a0 93 4f 01 	sts	0x014F, r26
     7c2:	b0 93 50 01 	sts	0x0150, r27
	pid.output = pid.Kp * pid.error + pid.Ki * pid.integral + pid.Kd * pid.derivative;
     7c6:	80 91 55 01 	lds	r24, 0x0155
     7ca:	90 91 56 01 	lds	r25, 0x0156
     7ce:	a0 91 57 01 	lds	r26, 0x0157
     7d2:	b0 91 58 01 	lds	r27, 0x0158
     7d6:	20 91 41 01 	lds	r18, 0x0141
     7da:	30 91 42 01 	lds	r19, 0x0142
     7de:	40 91 43 01 	lds	r20, 0x0143
     7e2:	50 91 44 01 	lds	r21, 0x0144
     7e6:	bc 01       	movw	r22, r24
     7e8:	cd 01       	movw	r24, r26
     7ea:	0e 94 8b 10 	call	0x2116	; 0x2116 <__mulsf3>
     7ee:	dc 01       	movw	r26, r24
     7f0:	cb 01       	movw	r24, r22
     7f2:	7c 01       	movw	r14, r24
     7f4:	8d 01       	movw	r16, r26
     7f6:	80 91 59 01 	lds	r24, 0x0159
     7fa:	90 91 5a 01 	lds	r25, 0x015A
     7fe:	a0 91 5b 01 	lds	r26, 0x015B
     802:	b0 91 5c 01 	lds	r27, 0x015C
     806:	20 91 49 01 	lds	r18, 0x0149
     80a:	30 91 4a 01 	lds	r19, 0x014A
     80e:	40 91 4b 01 	lds	r20, 0x014B
     812:	50 91 4c 01 	lds	r21, 0x014C
     816:	bc 01       	movw	r22, r24
     818:	cd 01       	movw	r24, r26
     81a:	0e 94 8b 10 	call	0x2116	; 0x2116 <__mulsf3>
     81e:	dc 01       	movw	r26, r24
     820:	cb 01       	movw	r24, r22
     822:	9c 01       	movw	r18, r24
     824:	ad 01       	movw	r20, r26
     826:	c8 01       	movw	r24, r16
     828:	b7 01       	movw	r22, r14
     82a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__addsf3>
     82e:	dc 01       	movw	r26, r24
     830:	cb 01       	movw	r24, r22
     832:	7c 01       	movw	r14, r24
     834:	8d 01       	movw	r16, r26
     836:	80 91 5d 01 	lds	r24, 0x015D
     83a:	90 91 5e 01 	lds	r25, 0x015E
     83e:	a0 91 5f 01 	lds	r26, 0x015F
     842:	b0 91 60 01 	lds	r27, 0x0160
     846:	20 91 4d 01 	lds	r18, 0x014D
     84a:	30 91 4e 01 	lds	r19, 0x014E
     84e:	40 91 4f 01 	lds	r20, 0x014F
     852:	50 91 50 01 	lds	r21, 0x0150
     856:	bc 01       	movw	r22, r24
     858:	cd 01       	movw	r24, r26
     85a:	0e 94 8b 10 	call	0x2116	; 0x2116 <__mulsf3>
     85e:	dc 01       	movw	r26, r24
     860:	cb 01       	movw	r24, r22
     862:	9c 01       	movw	r18, r24
     864:	ad 01       	movw	r20, r26
     866:	c8 01       	movw	r24, r16
     868:	b7 01       	movw	r22, r14
     86a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__addsf3>
     86e:	dc 01       	movw	r26, r24
     870:	cb 01       	movw	r24, r22
     872:	80 93 35 01 	sts	0x0135, r24
     876:	90 93 36 01 	sts	0x0136, r25
     87a:	a0 93 37 01 	sts	0x0137, r26
     87e:	b0 93 38 01 	sts	0x0138, r27

	if(pid.output > pid.output_max) { 		// saturation filter
     882:	80 91 35 01 	lds	r24, 0x0135
     886:	90 91 36 01 	lds	r25, 0x0136
     88a:	a0 91 37 01 	lds	r26, 0x0137
     88e:	b0 91 38 01 	lds	r27, 0x0138
     892:	20 91 39 01 	lds	r18, 0x0139
     896:	30 91 3a 01 	lds	r19, 0x013A
     89a:	40 91 3b 01 	lds	r20, 0x013B
     89e:	50 91 3c 01 	lds	r21, 0x013C
     8a2:	bc 01       	movw	r22, r24
     8a4:	cd 01       	movw	r24, r26
     8a6:	0e 94 87 10 	call	0x210e	; 0x210e <__gesf2>
     8aa:	18 16       	cp	r1, r24
     8ac:	8c f4       	brge	.+34     	; 0x8d0 <pid_calculate+0x2c6>
		pid.output = pid.output_max;
     8ae:	80 91 39 01 	lds	r24, 0x0139
     8b2:	90 91 3a 01 	lds	r25, 0x013A
     8b6:	a0 91 3b 01 	lds	r26, 0x013B
     8ba:	b0 91 3c 01 	lds	r27, 0x013C
     8be:	80 93 35 01 	sts	0x0135, r24
     8c2:	90 93 36 01 	sts	0x0136, r25
     8c6:	a0 93 37 01 	sts	0x0137, r26
     8ca:	b0 93 38 01 	sts	0x0138, r27
     8ce:	26 c0       	rjmp	.+76     	; 0x91c <__stack+0x1d>
	} else if(pid.output < pid.output_min) {
     8d0:	80 91 35 01 	lds	r24, 0x0135
     8d4:	90 91 36 01 	lds	r25, 0x0136
     8d8:	a0 91 37 01 	lds	r26, 0x0137
     8dc:	b0 91 38 01 	lds	r27, 0x0138
     8e0:	20 91 3d 01 	lds	r18, 0x013D
     8e4:	30 91 3e 01 	lds	r19, 0x013E
     8e8:	40 91 3f 01 	lds	r20, 0x013F
     8ec:	50 91 40 01 	lds	r21, 0x0140
     8f0:	bc 01       	movw	r22, r24
     8f2:	cd 01       	movw	r24, r26
     8f4:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__cmpsf2>
     8f8:	88 23       	and	r24, r24
     8fa:	84 f4       	brge	.+32     	; 0x91c <__stack+0x1d>
		pid.output = pid.output_min;
     8fc:	80 91 3d 01 	lds	r24, 0x013D
     900:	90 91 3e 01 	lds	r25, 0x013E
     904:	a0 91 3f 01 	lds	r26, 0x013F
     908:	b0 91 40 01 	lds	r27, 0x0140
     90c:	80 93 35 01 	sts	0x0135, r24
     910:	90 93 36 01 	sts	0x0136, r25
     914:	a0 93 37 01 	sts	0x0137, r26
     918:	b0 93 38 01 	sts	0x0138, r27
	}
	pid.prev_error = pid.error;
     91c:	80 91 41 01 	lds	r24, 0x0141
     920:	90 91 42 01 	lds	r25, 0x0142
     924:	a0 91 43 01 	lds	r26, 0x0143
     928:	b0 91 44 01 	lds	r27, 0x0144
     92c:	80 93 45 01 	sts	0x0145, r24
     930:	90 93 46 01 	sts	0x0146, r25
     934:	a0 93 47 01 	sts	0x0147, r26
     938:	b0 93 48 01 	sts	0x0148, r27
	if (pid.output > 50) { led_on();} else { led_off();}
     93c:	80 91 35 01 	lds	r24, 0x0135
     940:	90 91 36 01 	lds	r25, 0x0136
     944:	a0 91 37 01 	lds	r26, 0x0137
     948:	b0 91 38 01 	lds	r27, 0x0138
     94c:	bc 01       	movw	r22, r24
     94e:	cd 01       	movw	r24, r26
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	48 e4       	ldi	r20, 0x48	; 72
     956:	52 e4       	ldi	r21, 0x42	; 66
     958:	0e 94 87 10 	call	0x210e	; 0x210e <__gesf2>
     95c:	18 16       	cp	r1, r24
     95e:	1c f4       	brge	.+6      	; 0x966 <__stack+0x67>
     960:	0e 94 25 09 	call	0x124a	; 0x124a <led_on>
     964:	02 c0       	rjmp	.+4      	; 0x96a <__stack+0x6b>
     966:	0e 94 33 09 	call	0x1266	; 0x1266 <led_off>

	return pid.output;
     96a:	80 91 35 01 	lds	r24, 0x0135
     96e:	90 91 36 01 	lds	r25, 0x0136
     972:	a0 91 37 01 	lds	r26, 0x0137
     976:	b0 91 38 01 	lds	r27, 0x0138
     97a:	89 87       	std	Y+9, r24	; 0x09
     97c:	9a 87       	std	Y+10, r25	; 0x0a
     97e:	ab 87       	std	Y+11, r26	; 0x0b
     980:	bc 87       	std	Y+12, r27	; 0x0c
     982:	89 85       	ldd	r24, Y+9	; 0x09
     984:	9a 85       	ldd	r25, Y+10	; 0x0a
     986:	ab 85       	ldd	r26, Y+11	; 0x0b
     988:	bc 85       	ldd	r27, Y+12	; 0x0c
}
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	2c 96       	adiw	r28, 0x0c	; 12
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	cf 91       	pop	r28
     99c:	df 91       	pop	r29
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	ff 90       	pop	r15
     9a4:	ef 90       	pop	r14
     9a6:	08 95       	ret

000009a8 <sensor_init>:
 * sensor_get_code()		- return latest sensor code
 * sensor_callback() 		- perform sensor sampling / reading
 */

void sensor_init()
{
     9a8:	df 93       	push	r29
     9aa:	cf 93       	push	r28
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
	memset(&sensor, 0, sizeof(struct TemperatureSensor));
     9b0:	89 e6       	ldi	r24, 0x69	; 105
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	43 e4       	ldi	r20, 0x43	; 67
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <memset>
	sensor.temperature = ABSOLUTE_ZERO;
     9c0:	83 e3       	ldi	r24, 0x33	; 51
     9c2:	93 e9       	ldi	r25, 0x93	; 147
     9c4:	a8 e8       	ldi	r26, 0x88	; 136
     9c6:	b3 ec       	ldi	r27, 0xC3	; 195
     9c8:	80 93 6c 01 	sts	0x016C, r24
     9cc:	90 93 6d 01 	sts	0x016D, r25
     9d0:	a0 93 6e 01 	sts	0x016E, r26
     9d4:	b0 93 6f 01 	sts	0x016F, r27
	sensor.sample_variance_max = SENSOR_SAMPLE_VARIANCE_MAX;
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 ea       	ldi	r26, 0xA0	; 160
     9de:	bf e3       	ldi	r27, 0x3F	; 63
     9e0:	80 93 74 01 	sts	0x0174, r24
     9e4:	90 93 75 01 	sts	0x0175, r25
     9e8:	a0 93 76 01 	sts	0x0176, r26
     9ec:	b0 93 77 01 	sts	0x0177, r27
	sensor.reading_variance_max = SENSOR_READING_VARIANCE_MAX;
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	a0 ea       	ldi	r26, 0xA0	; 160
     9f6:	b1 e4       	ldi	r27, 0x41	; 65
     9f8:	80 93 78 01 	sts	0x0178, r24
     9fc:	90 93 79 01 	sts	0x0179, r25
     a00:	a0 93 7a 01 	sts	0x017A, r26
     a04:	b0 93 7b 01 	sts	0x017B, r27
	sensor.disconnect_temperature = SENSOR_DISCONNECTED_TEMPERATURE;
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a8 ec       	ldi	r26, 0xC8	; 200
     a0e:	b3 e4       	ldi	r27, 0x43	; 67
     a10:	80 93 7c 01 	sts	0x017C, r24
     a14:	90 93 7d 01 	sts	0x017D, r25
     a18:	a0 93 7e 01 	sts	0x017E, r26
     a1c:	b0 93 7f 01 	sts	0x017F, r27
	sensor.no_power_temperature = SENSOR_NO_POWER_TEMPERATURE;
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	a0 e0       	ldi	r26, 0x00	; 0
     a26:	b0 ec       	ldi	r27, 0xC0	; 192
     a28:	80 93 80 01 	sts	0x0180, r24
     a2c:	90 93 81 01 	sts	0x0181, r25
     a30:	a0 93 82 01 	sts	0x0182, r26
     a34:	b0 93 83 01 	sts	0x0183, r27
}
     a38:	cf 91       	pop	r28
     a3a:	df 91       	pop	r29
     a3c:	08 95       	ret

00000a3e <sensor_on>:

void sensor_on()
{
     a3e:	df 93       	push	r29
     a40:	cf 93       	push	r28
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_NO_DATA;
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	80 93 69 01 	sts	0x0169, r24
}
     a4c:	cf 91       	pop	r28
     a4e:	df 91       	pop	r29
     a50:	08 95       	ret

00000a52 <sensor_off>:

void sensor_off()
{
     a52:	df 93       	push	r29
     a54:	cf 93       	push	r28
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_OFF;
     a5a:	10 92 69 01 	sts	0x0169, r1
}
     a5e:	cf 91       	pop	r28
     a60:	df 91       	pop	r29
     a62:	08 95       	ret

00000a64 <sensor_start_reading>:

void sensor_start_reading() 
{ 
     a64:	df 93       	push	r29
     a66:	cf 93       	push	r28
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
	sensor.sample_idx = 0;
     a6c:	10 92 6b 01 	sts	0x016B, r1
	sensor.code = SENSOR_TAKING_READING;
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	80 93 6a 01 	sts	0x016A, r24
}
     a76:	cf 91       	pop	r28
     a78:	df 91       	pop	r29
     a7a:	08 95       	ret

00000a7c <sensor_get_state>:

uint8_t sensor_get_state() { return (sensor.state);}
     a7c:	df 93       	push	r29
     a7e:	cf 93       	push	r28
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	80 91 69 01 	lds	r24, 0x0169
     a88:	cf 91       	pop	r28
     a8a:	df 91       	pop	r29
     a8c:	08 95       	ret

00000a8e <sensor_get_code>:
uint8_t sensor_get_code() { return (sensor.code);}
     a8e:	df 93       	push	r29
     a90:	cf 93       	push	r28
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
     a96:	80 91 6a 01 	lds	r24, 0x016A
     a9a:	cf 91       	pop	r28
     a9c:	df 91       	pop	r29
     a9e:	08 95       	ret

00000aa0 <sensor_get_temperature>:

double sensor_get_temperature() 
{ 
     aa0:	df 93       	push	r29
     aa2:	cf 93       	push	r28
     aa4:	00 d0       	rcall	.+0      	; 0xaa6 <sensor_get_temperature+0x6>
     aa6:	00 d0       	rcall	.+0      	; 0xaa8 <sensor_get_temperature+0x8>
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
	if (sensor.state == SENSOR_HAS_DATA) { 
     aac:	80 91 69 01 	lds	r24, 0x0169
     ab0:	83 30       	cpi	r24, 0x03	; 3
     ab2:	69 f4       	brne	.+26     	; 0xace <sensor_get_temperature+0x2e>
		return (sensor.temperature);
     ab4:	80 91 6c 01 	lds	r24, 0x016C
     ab8:	90 91 6d 01 	lds	r25, 0x016D
     abc:	a0 91 6e 01 	lds	r26, 0x016E
     ac0:	b0 91 6f 01 	lds	r27, 0x016F
     ac4:	89 83       	std	Y+1, r24	; 0x01
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	ab 83       	std	Y+3, r26	; 0x03
     aca:	bc 83       	std	Y+4, r27	; 0x04
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <sensor_get_temperature+0x40>
	} else {
		return (_sensor_sample(0));
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	0e 94 cc 06 	call	0xd98	; 0xd98 <_sensor_sample>
     ad4:	dc 01       	movw	r26, r24
     ad6:	cb 01       	movw	r24, r22
     ad8:	89 83       	std	Y+1, r24	; 0x01
     ada:	9a 83       	std	Y+2, r25	; 0x02
     adc:	ab 83       	std	Y+3, r26	; 0x03
     ade:	bc 83       	std	Y+4, r27	; 0x04
     ae0:	89 81       	ldd	r24, Y+1	; 0x01
     ae2:	9a 81       	ldd	r25, Y+2	; 0x02
     ae4:	ab 81       	ldd	r26, Y+3	; 0x03
     ae6:	bc 81       	ldd	r27, Y+4	; 0x04
//		return (LESS_THAN_ZERO);	// an impossible temperature value
	}
}
     ae8:	bc 01       	movw	r22, r24
     aea:	cd 01       	movw	r24, r26
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	cf 91       	pop	r28
     af6:	df 91       	pop	r29
     af8:	08 95       	ret

00000afa <sensor_callback>:
 *	loop. Each sampling interval must be requested explicitly by calling 
 *	sensor_start_sample(). It does not free-run.
 */

void sensor_callback()
{
     afa:	ef 92       	push	r14
     afc:	ff 92       	push	r15
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	df 93       	push	r29
     b04:	cf 93       	push	r28
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
     b0a:	29 97       	sbiw	r28, 0x09	; 9
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	f8 94       	cli
     b10:	de bf       	out	0x3e, r29	; 62
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	cd bf       	out	0x3d, r28	; 61
	// cases where you don't execute the callback:
	if ((sensor.state == SENSOR_OFF) || (sensor.code != SENSOR_TAKING_READING)) {
     b16:	80 91 69 01 	lds	r24, 0x0169
     b1a:	88 23       	and	r24, r24
     b1c:	09 f4       	brne	.+2      	; 0xb20 <sensor_callback+0x26>
     b1e:	2f c1       	rjmp	.+606    	; 0xd7e <sensor_callback+0x284>
     b20:	80 91 6a 01 	lds	r24, 0x016A
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	09 f0       	breq	.+2      	; 0xb2a <sensor_callback+0x30>
     b28:	2a c1       	rjmp	.+596    	; 0xd7e <sensor_callback+0x284>
		return;
	}

	// get a sample and return if still in the reading period
	sensor.sample[sensor.sample_idx] = _sensor_sample(ADC_CHANNEL);
     b2a:	80 91 6b 01 	lds	r24, 0x016B
     b2e:	08 2f       	mov	r16, r24
     b30:	10 e0       	ldi	r17, 0x00	; 0
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	0e 94 cc 06 	call	0xd98	; 0xd98 <_sensor_sample>
     b38:	9b 01       	movw	r18, r22
     b3a:	ac 01       	movw	r20, r24
     b3c:	c8 01       	movw	r24, r16
     b3e:	88 0f       	add	r24, r24
     b40:	99 1f       	adc	r25, r25
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	fc 01       	movw	r30, r24
     b48:	ec 57       	subi	r30, 0x7C	; 124
     b4a:	fe 4f       	sbci	r31, 0xFE	; 254
     b4c:	20 83       	st	Z, r18
     b4e:	31 83       	std	Z+1, r19	; 0x01
     b50:	42 83       	std	Z+2, r20	; 0x02
     b52:	53 83       	std	Z+3, r21	; 0x03
	if ((++sensor.sample_idx) < SENSOR_SAMPLES) { 
     b54:	80 91 6b 01 	lds	r24, 0x016B
     b58:	8f 5f       	subi	r24, 0xFF	; 255
     b5a:	80 93 6b 01 	sts	0x016B, r24
     b5e:	80 91 6b 01 	lds	r24, 0x016B
     b62:	89 30       	cpi	r24, 0x09	; 9
     b64:	08 f4       	brcc	.+2      	; 0xb68 <sensor_callback+0x6e>
     b66:	0b c1       	rjmp	.+534    	; 0xd7e <sensor_callback+0x284>
		return;
	}

	// process the array to clean up samples
	double mean;
	sensor.std_dev = std_dev(sensor.sample, SENSOR_SAMPLES, &mean);
     b68:	84 e8       	ldi	r24, 0x84	; 132
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	9e 01       	movw	r18, r28
     b6e:	2a 5f       	subi	r18, 0xFA	; 250
     b70:	3f 4f       	sbci	r19, 0xFF	; 255
     b72:	69 e0       	ldi	r22, 0x09	; 9
     b74:	a9 01       	movw	r20, r18
     b76:	0e 94 9b 0a 	call	0x1536	; 0x1536 <std_dev>
     b7a:	dc 01       	movw	r26, r24
     b7c:	cb 01       	movw	r24, r22
     b7e:	80 93 70 01 	sts	0x0170, r24
     b82:	90 93 71 01 	sts	0x0171, r25
     b86:	a0 93 72 01 	sts	0x0172, r26
     b8a:	b0 93 73 01 	sts	0x0173, r27
	if (sensor.std_dev > sensor.reading_variance_max) {
     b8e:	80 91 70 01 	lds	r24, 0x0170
     b92:	90 91 71 01 	lds	r25, 0x0171
     b96:	a0 91 72 01 	lds	r26, 0x0172
     b9a:	b0 91 73 01 	lds	r27, 0x0173
     b9e:	20 91 78 01 	lds	r18, 0x0178
     ba2:	30 91 79 01 	lds	r19, 0x0179
     ba6:	40 91 7a 01 	lds	r20, 0x017A
     baa:	50 91 7b 01 	lds	r21, 0x017B
     bae:	bc 01       	movw	r22, r24
     bb0:	cd 01       	movw	r24, r26
     bb2:	0e 94 87 10 	call	0x210e	; 0x210e <__gesf2>
     bb6:	18 16       	cp	r1, r24
     bb8:	3c f4       	brge	.+14     	; 0xbc8 <sensor_callback+0xce>
		sensor.state = SENSOR_ERROR;
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	80 93 69 01 	sts	0x0169, r24
		sensor.code = SENSOR_BAD_READINGS;
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	80 93 6a 01 	sts	0x016A, r24
     bc6:	db c0       	rjmp	.+438    	; 0xd7e <sensor_callback+0x284>
		return;
	}

	// reject the outlier samples and re-compute the average
	double count = 0;
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	8a 83       	std	Y+2, r24	; 0x02
     bd2:	9b 83       	std	Y+3, r25	; 0x03
     bd4:	ac 83       	std	Y+4, r26	; 0x04
     bd6:	bd 83       	std	Y+5, r27	; 0x05
	sensor.temperature = 0;
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	a0 e0       	ldi	r26, 0x00	; 0
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	80 93 6c 01 	sts	0x016C, r24
     be4:	90 93 6d 01 	sts	0x016D, r25
     be8:	a0 93 6e 01 	sts	0x016E, r26
     bec:	b0 93 6f 01 	sts	0x016F, r27
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     bf0:	19 82       	std	Y+1, r1	; 0x01
     bf2:	71 c0       	rjmp	.+226    	; 0xcd6 <sensor_callback+0x1dc>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	88 2f       	mov	r24, r24
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	fc 01       	movw	r30, r24
     c04:	ec 57       	subi	r30, 0x7C	; 124
     c06:	fe 4f       	sbci	r31, 0xFE	; 254
     c08:	80 81       	ld	r24, Z
     c0a:	91 81       	ldd	r25, Z+1	; 0x01
     c0c:	a2 81       	ldd	r26, Z+2	; 0x02
     c0e:	b3 81       	ldd	r27, Z+3	; 0x03
     c10:	2e 81       	ldd	r18, Y+6	; 0x06
     c12:	3f 81       	ldd	r19, Y+7	; 0x07
     c14:	48 85       	ldd	r20, Y+8	; 0x08
     c16:	59 85       	ldd	r21, Y+9	; 0x09
     c18:	bc 01       	movw	r22, r24
     c1a:	cd 01       	movw	r24, r26
     c1c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__subsf3>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	7c 01       	movw	r14, r24
     c26:	8d 01       	movw	r16, r26
     c28:	e8 94       	clt
     c2a:	17 f9       	bld	r17, 7
     c2c:	80 91 74 01 	lds	r24, 0x0174
     c30:	90 91 75 01 	lds	r25, 0x0175
     c34:	a0 91 76 01 	lds	r26, 0x0176
     c38:	b0 91 77 01 	lds	r27, 0x0177
     c3c:	20 91 70 01 	lds	r18, 0x0170
     c40:	30 91 71 01 	lds	r19, 0x0171
     c44:	40 91 72 01 	lds	r20, 0x0172
     c48:	50 91 73 01 	lds	r21, 0x0173
     c4c:	bc 01       	movw	r22, r24
     c4e:	cd 01       	movw	r24, r26
     c50:	0e 94 8b 10 	call	0x2116	; 0x2116 <__mulsf3>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	9c 01       	movw	r18, r24
     c5a:	ad 01       	movw	r20, r26
     c5c:	c8 01       	movw	r24, r16
     c5e:	b7 01       	movw	r22, r14
     c60:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__cmpsf2>
     c64:	88 23       	and	r24, r24
     c66:	a4 f5       	brge	.+104    	; 0xcd0 <sensor_callback+0x1d6>
			sensor.temperature += sensor.sample[i];
     c68:	e0 90 6c 01 	lds	r14, 0x016C
     c6c:	f0 90 6d 01 	lds	r15, 0x016D
     c70:	00 91 6e 01 	lds	r16, 0x016E
     c74:	10 91 6f 01 	lds	r17, 0x016F
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	88 2f       	mov	r24, r24
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	fc 01       	movw	r30, r24
     c88:	ec 57       	subi	r30, 0x7C	; 124
     c8a:	fe 4f       	sbci	r31, 0xFE	; 254
     c8c:	20 81       	ld	r18, Z
     c8e:	31 81       	ldd	r19, Z+1	; 0x01
     c90:	42 81       	ldd	r20, Z+2	; 0x02
     c92:	53 81       	ldd	r21, Z+3	; 0x03
     c94:	c8 01       	movw	r24, r16
     c96:	b7 01       	movw	r22, r14
     c98:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__addsf3>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	80 93 6c 01 	sts	0x016C, r24
     ca4:	90 93 6d 01 	sts	0x016D, r25
     ca8:	a0 93 6e 01 	sts	0x016E, r26
     cac:	b0 93 6f 01 	sts	0x016F, r27
			count++;
     cb0:	6a 81       	ldd	r22, Y+2	; 0x02
     cb2:	7b 81       	ldd	r23, Y+3	; 0x03
     cb4:	8c 81       	ldd	r24, Y+4	; 0x04
     cb6:	9d 81       	ldd	r25, Y+5	; 0x05
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	40 e8       	ldi	r20, 0x80	; 128
     cbe:	5f e3       	ldi	r21, 0x3F	; 63
     cc0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__addsf3>
     cc4:	dc 01       	movw	r26, r24
     cc6:	cb 01       	movw	r24, r22
     cc8:	8a 83       	std	Y+2, r24	; 0x02
     cca:	9b 83       	std	Y+3, r25	; 0x03
     ccc:	ac 83       	std	Y+4, r26	; 0x04
     cce:	bd 83       	std	Y+5, r27	; 0x05
	}

	// reject the outlier samples and re-compute the average
	double count = 0;
	sensor.temperature = 0;
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	8f 5f       	subi	r24, 0xFF	; 255
     cd4:	89 83       	std	Y+1, r24	; 0x01
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	89 30       	cpi	r24, 0x09	; 9
     cda:	08 f4       	brcc	.+2      	; 0xcde <sensor_callback+0x1e4>
     cdc:	8b cf       	rjmp	.-234    	; 0xbf4 <sensor_callback+0xfa>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
			sensor.temperature += sensor.sample[i];
			count++;
		}
	}
	sensor.temperature /= count; 
     cde:	80 91 6c 01 	lds	r24, 0x016C
     ce2:	90 91 6d 01 	lds	r25, 0x016D
     ce6:	a0 91 6e 01 	lds	r26, 0x016E
     cea:	b0 91 6f 01 	lds	r27, 0x016F
     cee:	bc 01       	movw	r22, r24
     cf0:	cd 01       	movw	r24, r26
     cf2:	2a 81       	ldd	r18, Y+2	; 0x02
     cf4:	3b 81       	ldd	r19, Y+3	; 0x03
     cf6:	4c 81       	ldd	r20, Y+4	; 0x04
     cf8:	5d 81       	ldd	r21, Y+5	; 0x05
     cfa:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	80 93 6c 01 	sts	0x016C, r24
     d06:	90 93 6d 01 	sts	0x016D, r25
     d0a:	a0 93 6e 01 	sts	0x016E, r26
     d0e:	b0 93 6f 01 	sts	0x016F, r27
	sensor.code = SENSOR_IDLE;			// we are done. Flip it back to idle
     d12:	10 92 6a 01 	sts	0x016A, r1
	sensor.state = SENSOR_HAS_DATA;
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	80 93 69 01 	sts	0x0169, r24

//	if (sensor.temperature <= -1) led_on();	

	// process the exception cases
	if (sensor.temperature > SENSOR_DISCONNECTED_TEMPERATURE) {
     d1c:	80 91 6c 01 	lds	r24, 0x016C
     d20:	90 91 6d 01 	lds	r25, 0x016D
     d24:	a0 91 6e 01 	lds	r26, 0x016E
     d28:	b0 91 6f 01 	lds	r27, 0x016F
     d2c:	bc 01       	movw	r22, r24
     d2e:	cd 01       	movw	r24, r26
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	48 ec       	ldi	r20, 0xC8	; 200
     d36:	53 e4       	ldi	r21, 0x43	; 67
     d38:	0e 94 87 10 	call	0x210e	; 0x210e <__gesf2>
     d3c:	18 16       	cp	r1, r24
     d3e:	3c f4       	brge	.+14     	; 0xd4e <sensor_callback+0x254>
		sensor.state = SENSOR_ERROR;
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	80 93 69 01 	sts	0x0169, r24
		sensor.code = SENSOR_DISCONNECTED;
     d46:	83 e0       	ldi	r24, 0x03	; 3
     d48:	80 93 6a 01 	sts	0x016A, r24
     d4c:	18 c0       	rjmp	.+48     	; 0xd7e <sensor_callback+0x284>
	} else if (sensor.temperature < SENSOR_NO_POWER_TEMPERATURE) {
     d4e:	80 91 6c 01 	lds	r24, 0x016C
     d52:	90 91 6d 01 	lds	r25, 0x016D
     d56:	a0 91 6e 01 	lds	r26, 0x016E
     d5a:	b0 91 6f 01 	lds	r27, 0x016F
     d5e:	bc 01       	movw	r22, r24
     d60:	cd 01       	movw	r24, r26
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	50 ec       	ldi	r21, 0xC0	; 192
     d6a:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__cmpsf2>
     d6e:	88 23       	and	r24, r24
     d70:	34 f4       	brge	.+12     	; 0xd7e <sensor_callback+0x284>
		sensor.state = SENSOR_ERROR;
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	80 93 69 01 	sts	0x0169, r24
		sensor.code = SENSOR_NO_POWER;
     d78:	84 e0       	ldi	r24, 0x04	; 4
     d7a:	80 93 6a 01 	sts	0x016A, r24
	}
}
     d7e:	29 96       	adiw	r28, 0x09	; 9
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	08 95       	ret

00000d98 <_sensor_sample>:
 *
 *		temp = (adc_value * 1.456355556) - -120.7135972
 */

static inline double _sensor_sample(uint8_t adc_channel)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	0f 92       	push	r0
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	89 83       	std	Y+1, r24	; 0x01
	double random_gain = 5;
	double random_variation = ((double)(rand() - RAND_MAX/2) / RAND_MAX/2) * random_gain;
	double reading = 60 + random_variation;
	return (((double)reading * SENSOR_SLOPE) + SENSOR_OFFSET);	// useful for testing the math
#else
	return (((double)adc_read(adc_channel) * SENSOR_SLOPE) + SENSOR_OFFSET);
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	0e 94 07 07 	call	0xe0e	; 0xe0e <adc_read>
     daa:	cc 01       	movw	r24, r24
     dac:	a0 e0       	ldi	r26, 0x00	; 0
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	bc 01       	movw	r22, r24
     db2:	cd 01       	movw	r24, r26
     db4:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__floatunsisf>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	26 e0       	ldi	r18, 0x06	; 6
     dc2:	3f ea       	ldi	r19, 0xAF	; 175
     dc4:	4a ef       	ldi	r20, 0xFA	; 250
     dc6:	5e e3       	ldi	r21, 0x3E	; 62
     dc8:	0e 94 8b 10 	call	0x2116	; 0x2116 <__mulsf3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	bc 01       	movw	r22, r24
     dd2:	cd 01       	movw	r24, r26
     dd4:	23 ed       	ldi	r18, 0xD3	; 211
     dd6:	31 eb       	ldi	r19, 0xB1	; 177
     dd8:	46 ed       	ldi	r20, 0xD6	; 214
     dda:	5e e3       	ldi	r21, 0x3E	; 62
     ddc:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__subsf3>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
#endif
}
     de4:	bc 01       	movw	r22, r24
     de6:	cd 01       	movw	r24, r26
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <adc_init>:
/*
 * adc_init() - initialize ADC. See tinyg_tc.h for settings used
 * adc_read() - returns a single ADC reading (raw). See __sensor_sample notes for more
 */
void adc_init(void)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	ADMUX  = (ADC_REFS | ADC_CHANNEL);	 // setup ADC Vref and channel 0
     df8:	ec e7       	ldi	r30, 0x7C	; 124
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 e4       	ldi	r24, 0x40	; 64
     dfe:	80 83       	st	Z, r24
	ADCSRA = (ADC_ENABLE | ADC_PRESCALE);// Enable ADC (bit 7) & set prescaler
     e00:	ea e7       	ldi	r30, 0x7A	; 122
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	86 e8       	ldi	r24, 0x86	; 134
     e06:	80 83       	st	Z, r24
}
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <adc_read>:

uint16_t adc_read(uint8_t channel)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	00 d0       	rcall	.+0      	; 0xe14 <adc_read+0x6>
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xF0;						// clobber the channel
     e1a:	ac e7       	ldi	r26, 0x7C	; 124
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ec e7       	ldi	r30, 0x7C	; 124
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	80 7f       	andi	r24, 0xF0	; 240
     e26:	8c 93       	st	X, r24
	ADMUX |= 0x0F & channel;			// set the channel
     e28:	ac e7       	ldi	r26, 0x7C	; 124
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	ec e7       	ldi	r30, 0x7C	; 124
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	98 2f       	mov	r25, r24
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	8f 70       	andi	r24, 0x0F	; 15
     e38:	89 2b       	or	r24, r25
     e3a:	8c 93       	st	X, r24

	ADCSRA |= ADC_START_CONVERSION;		// start the conversion
     e3c:	aa e7       	ldi	r26, 0x7A	; 122
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	ea e7       	ldi	r30, 0x7A	; 122
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	80 64       	ori	r24, 0x40	; 64
     e48:	8c 93       	st	X, r24
	while (ADCSRA && (1<<ADIF) == 0);	// wait about 100 uSec
     e4a:	ea e7       	ldi	r30, 0x7A	; 122
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
	ADCSRA |= (1<<ADIF);				// clear the conversion flag
     e50:	aa e7       	ldi	r26, 0x7A	; 122
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ea e7       	ldi	r30, 0x7A	; 122
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	80 61       	ori	r24, 0x10	; 16
     e5c:	8c 93       	st	X, r24
	return (ADC);
     e5e:	e8 e7       	ldi	r30, 0x78	; 120
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
}
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <pwm_init>:
 * 	Configure timer 2 for extruder heater PWM
 *	Mode: 8 bit Fast PWM Fast w/OCR2A setting PWM freq (TOP value)
 *		  and OCR2B setting the duty cycle as a fraction of OCR2A seeting
 */
void pwm_init(void)
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
	TCCR2A  = PWM_INVERTED;		// alternative is PWM_NONINVERTED
     e78:	e0 eb       	ldi	r30, 0xB0	; 176
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 ef       	ldi	r24, 0xF0	; 240
     e7e:	80 83       	st	Z, r24
	TCCR2A |= 0b00000011;		// Waveform generation set to MODE 7 - here...
     e80:	a0 eb       	ldi	r26, 0xB0	; 176
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e0 eb       	ldi	r30, 0xB0	; 176
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	83 60       	ori	r24, 0x03	; 3
     e8c:	8c 93       	st	X, r24
	TCCR2B  = 0b00001000;		// ...continued here
     e8e:	e1 eb       	ldi	r30, 0xB1	; 177
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	88 e0       	ldi	r24, 0x08	; 8
     e94:	80 83       	st	Z, r24
	TCCR2B |= PWM_PRESCALE_SET;	// set clock and prescaler
     e96:	a1 eb       	ldi	r26, 0xB1	; 177
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e1 eb       	ldi	r30, 0xB1	; 177
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	84 60       	ori	r24, 0x04	; 4
     ea2:	8c 93       	st	X, r24
	TIMSK1 = 0; 				// disable PWM interrupts
     ea4:	ef e6       	ldi	r30, 0x6F	; 111
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	10 82       	st	Z, r1
	OCR2A = 0;					// clear PWM frequency (TOP value)
     eaa:	e3 eb       	ldi	r30, 0xB3	; 179
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	10 82       	st	Z, r1
	OCR2B = 0;					// clear PWM duty cycle as % of TOP value
     eb0:	e4 eb       	ldi	r30, 0xB4	; 180
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	10 82       	st	Z, r1
	device.pwm_freq = 0;
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	a0 e0       	ldi	r26, 0x00	; 0
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	80 93 03 01 	sts	0x0103, r24
     ec2:	90 93 04 01 	sts	0x0104, r25
     ec6:	a0 93 05 01 	sts	0x0105, r26
     eca:	b0 93 06 01 	sts	0x0106, r27
}
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <pwm_on>:

void pwm_on(double freq, double duty)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	28 97       	sbiw	r28, 0x08	; 8
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	69 83       	std	Y+1, r22	; 0x01
     eea:	7a 83       	std	Y+2, r23	; 0x02
     eec:	8b 83       	std	Y+3, r24	; 0x03
     eee:	9c 83       	std	Y+4, r25	; 0x04
     ef0:	2d 83       	std	Y+5, r18	; 0x05
     ef2:	3e 83       	std	Y+6, r19	; 0x06
     ef4:	4f 83       	std	Y+7, r20	; 0x07
     ef6:	58 87       	std	Y+8, r21	; 0x08
	pwm_init();
     ef8:	0e 94 38 07 	call	0xe70	; 0xe70 <pwm_init>
	pwm_set_freq(freq);
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	ab 81       	ldd	r26, Y+3	; 0x03
     f02:	bc 81       	ldd	r27, Y+4	; 0x04
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	0e 94 a8 07 	call	0xf50	; 0xf50 <pwm_set_freq>
	pwm_set_duty(duty);
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
     f0e:	9e 81       	ldd	r25, Y+6	; 0x06
     f10:	af 81       	ldd	r26, Y+7	; 0x07
     f12:	b8 85       	ldd	r27, Y+8	; 0x08
     f14:	bc 01       	movw	r22, r24
     f16:	cd 01       	movw	r24, r26
     f18:	0e 94 12 08 	call	0x1024	; 0x1024 <pwm_set_duty>
}
     f1c:	28 96       	adiw	r28, 0x08	; 8
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <pwm_off>:

void pwm_off(void)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
	pwm_on(0,0);
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	0e 94 6a 07 	call	0xed4	; 0xed4 <pwm_on>
}
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <pwm_set_freq>:
 *
 *	At current settings the range is from about 500 Hz to about 6000 Hz  
 */

uint8_t pwm_set_freq(double freq)
{
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	00 d0       	rcall	.+0      	; 0xf5a <pwm_set_freq+0xa>
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <pwm_set_freq+0xc>
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	69 83       	std	Y+1, r22	; 0x01
     f62:	7a 83       	std	Y+2, r23	; 0x02
     f64:	8b 83       	std	Y+3, r24	; 0x03
     f66:	9c 83       	std	Y+4, r25	; 0x04
	device.pwm_freq = F_CPU / PWM_PRESCALE / freq;
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	74 e2       	ldi	r23, 0x24	; 36
     f6c:	84 ef       	ldi	r24, 0xF4	; 244
     f6e:	97 e4       	ldi	r25, 0x47	; 71
     f70:	29 81       	ldd	r18, Y+1	; 0x01
     f72:	3a 81       	ldd	r19, Y+2	; 0x02
     f74:	4b 81       	ldd	r20, Y+3	; 0x03
     f76:	5c 81       	ldd	r21, Y+4	; 0x04
     f78:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	80 93 03 01 	sts	0x0103, r24
     f84:	90 93 04 01 	sts	0x0104, r25
     f88:	a0 93 05 01 	sts	0x0105, r26
     f8c:	b0 93 06 01 	sts	0x0106, r27
	if (device.pwm_freq < PWM_MIN_RES) { 
     f90:	80 91 03 01 	lds	r24, 0x0103
     f94:	90 91 04 01 	lds	r25, 0x0104
     f98:	a0 91 05 01 	lds	r26, 0x0105
     f9c:	b0 91 06 01 	lds	r27, 0x0106
     fa0:	bc 01       	movw	r22, r24
     fa2:	cd 01       	movw	r24, r26
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 ea       	ldi	r20, 0xA0	; 160
     faa:	51 e4       	ldi	r21, 0x41	; 65
     fac:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__cmpsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <pwm_set_freq+0x6e>
		OCR2A = PWM_MIN_RES;
     fb4:	e3 eb       	ldi	r30, 0xB3	; 179
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	84 e1       	ldi	r24, 0x14	; 20
     fba:	80 83       	st	Z, r24
     fbc:	29 c0       	rjmp	.+82     	; 0x1010 <pwm_set_freq+0xc0>
	} else if (device.pwm_freq >= PWM_MAX_RES) { 
     fbe:	80 91 03 01 	lds	r24, 0x0103
     fc2:	90 91 04 01 	lds	r25, 0x0104
     fc6:	a0 91 05 01 	lds	r26, 0x0105
     fca:	b0 91 06 01 	lds	r27, 0x0106
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	4f e7       	ldi	r20, 0x7F	; 127
     fd8:	53 e4       	ldi	r21, 0x43	; 67
     fda:	0e 94 87 10 	call	0x210e	; 0x210e <__gesf2>
     fde:	88 23       	and	r24, r24
     fe0:	2c f0       	brlt	.+10     	; 0xfec <pwm_set_freq+0x9c>
		OCR2A = PWM_MAX_RES;
     fe2:	e3 eb       	ldi	r30, 0xB3	; 179
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	80 83       	st	Z, r24
     fea:	12 c0       	rjmp	.+36     	; 0x1010 <pwm_set_freq+0xc0>
	} else { 
		OCR2A = (uint8_t)device.pwm_freq;
     fec:	03 eb       	ldi	r16, 0xB3	; 179
     fee:	10 e0       	ldi	r17, 0x00	; 0
     ff0:	80 91 03 01 	lds	r24, 0x0103
     ff4:	90 91 04 01 	lds	r25, 0x0104
     ff8:	a0 91 05 01 	lds	r26, 0x0105
     ffc:	b0 91 06 01 	lds	r27, 0x0106
    1000:	bc 01       	movw	r22, r24
    1002:	cd 01       	movw	r24, r26
    1004:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <__fixunssfsi>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	f8 01       	movw	r30, r16
    100e:	80 83       	st	Z, r24
	}
	return (SC_OK);
    1010:	80 e0       	ldi	r24, 0x00	; 0
}
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	08 95       	ret

00001024 <pwm_set_duty>:
 *	Since I can't seem to get the output pin to work in non-inverted mode
 *	it's done in software in this routine.
 */

uint8_t pwm_set_duty(double duty)
{
    1024:	cf 92       	push	r12
    1026:	df 92       	push	r13
    1028:	ef 92       	push	r14
    102a:	ff 92       	push	r15
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <pwm_set_duty+0x12>
    1036:	00 d0       	rcall	.+0      	; 0x1038 <pwm_set_duty+0x14>
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	69 83       	std	Y+1, r22	; 0x01
    103e:	7a 83       	std	Y+2, r23	; 0x02
    1040:	8b 83       	std	Y+3, r24	; 0x03
    1042:	9c 83       	std	Y+4, r25	; 0x04
	if (duty < 0.01) {				// anything approaching 0% 
    1044:	69 81       	ldd	r22, Y+1	; 0x01
    1046:	7a 81       	ldd	r23, Y+2	; 0x02
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	2a e0       	ldi	r18, 0x0A	; 10
    104e:	37 ed       	ldi	r19, 0xD7	; 215
    1050:	43 e2       	ldi	r20, 0x23	; 35
    1052:	5c e3       	ldi	r21, 0x3C	; 60
    1054:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__cmpsf2>
    1058:	88 23       	and	r24, r24
    105a:	2c f4       	brge	.+10     	; 0x1066 <pwm_set_duty+0x42>
		OCR2B = 255;
    105c:	e4 eb       	ldi	r30, 0xB4	; 180
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	8f ef       	ldi	r24, 0xFF	; 255
    1062:	80 83       	st	Z, r24
    1064:	4a c0       	rjmp	.+148    	; 0x10fa <pwm_set_duty+0xd6>
	} else if (duty > 99.9) { 		// anything approaching 100%
    1066:	69 81       	ldd	r22, Y+1	; 0x01
    1068:	7a 81       	ldd	r23, Y+2	; 0x02
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	2d ec       	ldi	r18, 0xCD	; 205
    1070:	3c ec       	ldi	r19, 0xCC	; 204
    1072:	47 ec       	ldi	r20, 0xC7	; 199
    1074:	52 e4       	ldi	r21, 0x42	; 66
    1076:	0e 94 87 10 	call	0x210e	; 0x210e <__gesf2>
    107a:	18 16       	cp	r1, r24
    107c:	24 f4       	brge	.+8      	; 0x1086 <pwm_set_duty+0x62>
		OCR2B = 0;
    107e:	e4 eb       	ldi	r30, 0xB4	; 180
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	10 82       	st	Z, r1
    1084:	3a c0       	rjmp	.+116    	; 0x10fa <pwm_set_duty+0xd6>
	} else {
		OCR2B = (uint8_t)(OCR2A * (1-(duty/100)));
    1086:	0f 2e       	mov	r0, r31
    1088:	f4 eb       	ldi	r31, 0xB4	; 180
    108a:	cf 2e       	mov	r12, r31
    108c:	dd 24       	eor	r13, r13
    108e:	f0 2d       	mov	r31, r0
    1090:	e3 eb       	ldi	r30, 0xB3	; 179
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	88 2f       	mov	r24, r24
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	aa 27       	eor	r26, r26
    109c:	97 fd       	sbrc	r25, 7
    109e:	a0 95       	com	r26
    10a0:	ba 2f       	mov	r27, r26
    10a2:	bc 01       	movw	r22, r24
    10a4:	cd 01       	movw	r24, r26
    10a6:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__floatsisf>
    10aa:	7b 01       	movw	r14, r22
    10ac:	8c 01       	movw	r16, r24
    10ae:	69 81       	ldd	r22, Y+1	; 0x01
    10b0:	7a 81       	ldd	r23, Y+2	; 0x02
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	9c 81       	ldd	r25, Y+4	; 0x04
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	48 ec       	ldi	r20, 0xC8	; 200
    10bc:	52 ec       	ldi	r21, 0xC2	; 194
    10be:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divsf3>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	bc 01       	movw	r22, r24
    10c8:	cd 01       	movw	r24, r26
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e8       	ldi	r20, 0x80	; 128
    10d0:	5f e3       	ldi	r21, 0x3F	; 63
    10d2:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__addsf3>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	9c 01       	movw	r18, r24
    10dc:	ad 01       	movw	r20, r26
    10de:	c8 01       	movw	r24, r16
    10e0:	b7 01       	movw	r22, r14
    10e2:	0e 94 8b 10 	call	0x2116	; 0x2116 <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	f6 01       	movw	r30, r12
    10f8:	80 83       	st	Z, r24
	}
	OCR2A = (uint8_t)device.pwm_freq;
    10fa:	03 eb       	ldi	r16, 0xB3	; 179
    10fc:	10 e0       	ldi	r17, 0x00	; 0
    10fe:	80 91 03 01 	lds	r24, 0x0103
    1102:	90 91 04 01 	lds	r25, 0x0104
    1106:	a0 91 05 01 	lds	r26, 0x0105
    110a:	b0 91 06 01 	lds	r27, 0x0106
    110e:	bc 01       	movw	r22, r24
    1110:	cd 01       	movw	r24, r26
    1112:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <__fixunssfsi>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	f8 01       	movw	r30, r16
    111c:	80 83       	st	Z, r24
	return (SC_OK);
    111e:	80 e0       	ldi	r24, 0x00	; 0
}
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	08 95       	ret

0000113a <tick_init>:
 * tick_100ms()	  - tasks that run every 100 ms
 * tick_1sec()	  - tasks that run every 100 ms
 */

void tick_init(void)
{
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0x00;				// normal mode, no compare values
    1142:	e4 e4       	ldi	r30, 0x44	; 68
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	10 82       	st	Z, r1
	TCCR0B = 0x05;				// normal mode, internal clock / 1024 ~= 7800 Hz
    1148:	e5 e4       	ldi	r30, 0x45	; 69
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	85 e0       	ldi	r24, 0x05	; 5
    114e:	80 83       	st	Z, r24
	TCNT0 = (256 - TICK_10MS_COUNT);// set timer for approx 10 ms overflow
    1150:	e6 e4       	ldi	r30, 0x46	; 70
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	82 eb       	ldi	r24, 0xB2	; 178
    1156:	80 83       	st	Z, r24
	TIMSK0 = (1<<TOIE0);		// enable overflow interrupts
    1158:	ee e6       	ldi	r30, 0x6E	; 110
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	80 83       	st	Z, r24
	device.tick_100ms_count = 10;
    1160:	8a e0       	ldi	r24, 0x0A	; 10
    1162:	80 93 01 01 	sts	0x0101, r24
	device.tick_1sec_count = 10;	
    1166:	8a e0       	ldi	r24, 0x0A	; 10
    1168:	80 93 02 01 	sts	0x0102, r24
}
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
    1172:	1f 92       	push	r1
    1174:	0f 92       	push	r0
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	0f 92       	push	r0
    117a:	11 24       	eor	r1, r1
    117c:	8f 93       	push	r24
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = (256 - TICK_10MS_COUNT);	// reset timer for approx 10 ms overflow
    118a:	e6 e4       	ldi	r30, 0x46	; 70
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	82 eb       	ldi	r24, 0xB2	; 178
    1190:	80 83       	st	Z, r24
	device.tick_flag = true;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	80 93 00 01 	sts	0x0100, r24
}
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	ff 91       	pop	r31
    119e:	ef 91       	pop	r30
    11a0:	8f 91       	pop	r24
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <tick_callback>:

uint8_t tick_callback(void)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	0f 92       	push	r0
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
	if (device.tick_flag == false) { return (SC_NOOP);}
    11b6:	80 91 00 01 	lds	r24, 0x0100
    11ba:	88 23       	and	r24, r24
    11bc:	19 f4       	brne	.+6      	; 0x11c4 <tick_callback+0x18>
    11be:	83 e0       	ldi	r24, 0x03	; 3
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	25 c0       	rjmp	.+74     	; 0x120e <tick_callback+0x62>
	device.tick_flag = false;
    11c4:	10 92 00 01 	sts	0x0100, r1

	tick_10ms();
    11c8:	0e 94 0c 09 	call	0x1218	; 0x1218 <tick_10ms>

	if (--device.tick_100ms_count != 0) { return (SC_OK);}
    11cc:	80 91 01 01 	lds	r24, 0x0101
    11d0:	81 50       	subi	r24, 0x01	; 1
    11d2:	80 93 01 01 	sts	0x0101, r24
    11d6:	80 91 01 01 	lds	r24, 0x0101
    11da:	88 23       	and	r24, r24
    11dc:	11 f0       	breq	.+4      	; 0x11e2 <tick_callback+0x36>
    11de:	19 82       	std	Y+1, r1	; 0x01
    11e0:	16 c0       	rjmp	.+44     	; 0x120e <tick_callback+0x62>
	device.tick_100ms_count = 10;
    11e2:	8a e0       	ldi	r24, 0x0A	; 10
    11e4:	80 93 01 01 	sts	0x0101, r24
	tick_100ms();
    11e8:	0e 94 15 09 	call	0x122a	; 0x122a <tick_100ms>

	if (--device.tick_1sec_count != 0) { return (SC_OK);}
    11ec:	80 91 02 01 	lds	r24, 0x0102
    11f0:	81 50       	subi	r24, 0x01	; 1
    11f2:	80 93 02 01 	sts	0x0102, r24
    11f6:	80 91 02 01 	lds	r24, 0x0102
    11fa:	88 23       	and	r24, r24
    11fc:	11 f0       	breq	.+4      	; 0x1202 <tick_callback+0x56>
    11fe:	19 82       	std	Y+1, r1	; 0x01
    1200:	06 c0       	rjmp	.+12     	; 0x120e <tick_callback+0x62>
	device.tick_1sec_count = 10;
    1202:	8a e0       	ldi	r24, 0x0A	; 10
    1204:	80 93 02 01 	sts	0x0102, r24
	tick_1sec();
    1208:	0e 94 1e 09 	call	0x123c	; 0x123c <tick_1sec>

	return (SC_OK);
    120c:	19 82       	std	Y+1, r1	; 0x01
    120e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <tick_10ms>:

void tick_10ms(void)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
	sensor_callback();			// run the temperature sensor every 10 ms.
    1220:	0e 94 7d 05 	call	0xafa	; 0xafa <sensor_callback>
}
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <tick_100ms>:

void tick_100ms(void)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
	heater_callback();			// run the heater controller every 100 ms.
    1232:	0e 94 41 01 	call	0x282	; 0x282 <heater_callback>
}
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <tick_1sec>:

void tick_1sec(void)
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
//	led_toggle();
	return;
}
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <led_on>:
 * led_off()
 * led_toggle()
 */

void led_on(void) 
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
	LED_PORT &= ~(LED_PIN);
    1252:	ab e2       	ldi	r26, 0x2B	; 43
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	eb e2       	ldi	r30, 0x2B	; 43
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8b 7f       	andi	r24, 0xFB	; 251
    125e:	8c 93       	st	X, r24
}
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <led_off>:

void led_off(void) 
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	LED_PORT |= LED_PIN;
    126e:	ab e2       	ldi	r26, 0x2B	; 43
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	eb e2       	ldi	r30, 0x2B	; 43
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	84 60       	ori	r24, 0x04	; 4
    127a:	8c 93       	st	X, r24
}
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <led_toggle>:

void led_toggle(void) 
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	if (LED_PORT && LED_PIN) {
    128a:	eb e2       	ldi	r30, 0x2B	; 43
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	88 23       	and	r24, r24
    1292:	19 f0       	breq	.+6      	; 0x129a <led_toggle+0x18>
		led_on();
    1294:	0e 94 25 09 	call	0x124a	; 0x124a <led_on>
    1298:	02 c0       	rjmp	.+4      	; 0x129e <led_toggle+0x1c>
	} else {
		led_off();
    129a:	0e 94 33 09 	call	0x1266	; 0x1266 <led_off>
	}
}
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <device_reset>:
 *	device_read_byte() 	- read a byte from Kinen channel into device structs
 *	device_write_byte() - write a byte from device to Kinen channel
 */

void device_reset(void)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
	return;
}
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <device_read_byte>:

uint8_t device_read_byte(uint8_t addr, uint8_t *data)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <device_read_byte+0x6>
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <device_read_byte+0x8>
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	7b 83       	std	Y+3, r23	; 0x03
    12c2:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	80 51       	subi	r24, 0x10	; 16
    12c8:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	8b 30       	cpi	r24, 0x0B	; 11
    12ce:	18 f0       	brcs	.+6      	; 0x12d6 <device_read_byte+0x24>
    12d0:	88 e1       	ldi	r24, 0x18	; 24
    12d2:	8c 83       	std	Y+4, r24	; 0x04
    12d4:	0b c0       	rjmp	.+22     	; 0x12ec <device_read_byte+0x3a>
	*data = device.array[addr];
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	fc 01       	movw	r30, r24
    12de:	e9 5f       	subi	r30, 0xF9	; 249
    12e0:	fe 4f       	sbci	r31, 0xFE	; 254
    12e2:	80 81       	ld	r24, Z
    12e4:	ea 81       	ldd	r30, Y+2	; 0x02
    12e6:	fb 81       	ldd	r31, Y+3	; 0x03
    12e8:	80 83       	st	Z, r24
	return (SC_OK);
    12ea:	1c 82       	std	Y+4, r1	; 0x04
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
}
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <device_write_byte>:

uint8_t device_write_byte(uint8_t addr, uint8_t data)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	00 d0       	rcall	.+0      	; 0x1302 <device_write_byte+0x6>
    1302:	0f 92       	push	r0
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	80 51       	subi	r24, 0x10	; 16
    1310:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	8b 30       	cpi	r24, 0x0B	; 11
    1316:	18 f0       	brcs	.+6      	; 0x131e <device_write_byte+0x22>
    1318:	88 e1       	ldi	r24, 0x18	; 24
    131a:	8b 83       	std	Y+3, r24	; 0x03
    131c:	09 c0       	rjmp	.+18     	; 0x1330 <device_write_byte+0x34>
	// There are no checks in here for read-only locations
	// Assumes all locations are writable.
	device.array[addr] = data;
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	fc 01       	movw	r30, r24
    1326:	e9 5f       	subi	r30, 0xF9	; 249
    1328:	fe 4f       	sbci	r31, 0xFE	; 254
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	80 83       	st	Z, r24
	return (SC_OK);
    132e:	1b 82       	std	Y+3, r1	; 0x03
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <kinen_init>:
 * kinen_init() - set up Kinen subsystems; master or slave
 *
 *	Would like some kind of auto-detect here. For now it's just commenting
 */
void kinen_init(void)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
//	kinen_master_init();
	kinen_slave_init();
    1346:	0e 94 b0 09 	call	0x1360	; 0x1360 <kinen_slave_init>
}
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <kinen_callback>:
 *	Returns SC_NOOP if no operation was performed
 *	Returns EAGAIN if the function should block lower-priority functions
 *	in the main DISPATCH loop
 */
uint8_t kinen_callback(void)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
//	return (SC_OK);			// return from a successful operation
//	return (SC_EAGAIN);		// return if lower priority tasks should be blocked
	return (SC_NOOP);		// return if no operation was performed 
    1358:	83 e0       	ldi	r24, 0x03	; 3
}
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <kinen_slave_init>:

/*
 * kinen_slave_init() - setup atmega SPI peripheral to be the OCB slave 
 */
void kinen_slave_init(void)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62

//	PRR |= 0x07;				// don't screw with the power reduction register
	DDRB &= ~(1<<DDB4);			// Set MISO output, all others unaffected
    1368:	a4 e2       	ldi	r26, 0x24	; 36
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e4 e2       	ldi	r30, 0x24	; 36
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	8f 7e       	andi	r24, 0xEF	; 239
    1374:	8c 93       	st	X, r24
	SPCR = (1<<SPIE | 1<<SPE);	// Enable SPI and its interrupt, set MSB first, slave mode
    1376:	ec e4       	ldi	r30, 0x4C	; 76
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 ec       	ldi	r24, 0xC0	; 192
    137c:	80 83       	st	Z, r24
	SPCR = (1<<CPOL | 1<<CPHA);	// Uncomment for mode 3 operation, comment for mode 0
    137e:	ec e4       	ldi	r30, 0x4C	; 76
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8c e0       	ldi	r24, 0x0C	; 12
    1384:	80 83       	st	Z, r24
	memset(&ki.array, 0, sizeof(ki.array));
    1386:	85 eb       	ldi	r24, 0xB5	; 181
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	40 e1       	ldi	r20, 0x10	; 16
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <memset>

	ki_wait_time = DEVICE_WAIT_TIME;	// setup read-only values
    1396:	8a e0       	ldi	r24, 0x0A	; 10
    1398:	80 93 b8 01 	sts	0x01B8, r24
	ki_device_type = DEVICE_TYPE;
    139c:	84 e0       	ldi	r24, 0x04	; 4
    139e:	80 93 bd 01 	sts	0x01BD, r24
	ki_device_id_hi = DEVICE_ID_HI;
    13a2:	10 92 be 01 	sts	0x01BE, r1
	ki_device_id_lo = DEVICE_ID_LO;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	80 93 bf 01 	sts	0x01BF, r24
	ki_device_rev_major = DEVICE_REV_MAJOR;
    13ac:	10 92 c0 01 	sts	0x01C0, r1
	ki_device_rev_minor = DEVICE_REV_MINOR;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	80 93 c1 01 	sts	0x01C1, r24
	ki_device_uuid_1 = DEVICE_UUID_1;
    13b6:	10 92 c2 01 	sts	0x01C2, r1
	ki_device_uuid_2 = DEVICE_UUID_2;
    13ba:	10 92 c3 01 	sts	0x01C3, r1
	ki_device_uuid_3 = DEVICE_UUID_3;
    13be:	10 92 c4 01 	sts	0x01C4, r1

	ki_status = SC_OK;
    13c2:	10 92 b6 01 	sts	0x01B6, r1
	SPDR = ki_status;
    13c6:	ee e4       	ldi	r30, 0x4E	; 78
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 91 b6 01 	lds	r24, 0x01B6
    13ce:	80 83       	st	Z, r24
}
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <__vector_17>:
 * SPI Slave RX Interrupt() - interrupts on byte received
 *
 * Uses a 2 phase state machine to toggle back and forth between ADDR and DATA bytes
 */
ISR(SPI_STC_vect)
{
    13d6:	1f 92       	push	r1
    13d8:	0f 92       	push	r0
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	0f 92       	push	r0
    13de:	11 24       	eor	r1, r1
    13e0:	2f 93       	push	r18
    13e2:	3f 93       	push	r19
    13e4:	4f 93       	push	r20
    13e6:	5f 93       	push	r21
    13e8:	6f 93       	push	r22
    13ea:	7f 93       	push	r23
    13ec:	8f 93       	push	r24
    13ee:	9f 93       	push	r25
    13f0:	af 93       	push	r26
    13f2:	bf 93       	push	r27
    13f4:	ef 93       	push	r30
    13f6:	ff 93       	push	r31
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
	// receive address byte
	if (ki_slave.phase == KINEN_ADDR) {
    1400:	80 91 ac 01 	lds	r24, 0x01AC
    1404:	88 23       	and	r24, r24
    1406:	c9 f5       	brne	.+114    	; 0x147a <__vector_17+0xa4>
		ki_slave.phase = KINEN_DATA;	// advance phase
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	80 93 ac 01 	sts	0x01AC, r24
		ki_slave.addr = SPDR;		// read and save the address byte
    140e:	ee e4       	ldi	r30, 0x4E	; 78
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	80 93 ad 01 	sts	0x01AD, r24
		if (ki_command == KINEN_WRITE) { // write is simple...
    1418:	80 91 b5 01 	lds	r24, 0x01B5
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	29 f4       	brne	.+10     	; 0x142a <__vector_17+0x54>
			SPDR = KINEN_OK_BYTE;			// already saved addr, now return an OK
    1420:	ee e4       	ldi	r30, 0x4E	; 78
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	8a e5       	ldi	r24, 0x5A	; 90
    1426:	80 83       	st	Z, r24
    1428:	4a c0       	rjmp	.+148    	; 0x14be <__vector_17+0xe8>
		} else {
			if (ki_slave.addr < KINEN_COMMON_MAX) {	// handle OCB address space
    142a:	80 91 ad 01 	lds	r24, 0x01AD
    142e:	80 31       	cpi	r24, 0x10	; 16
    1430:	60 f4       	brcc	.+24     	; 0x144a <__vector_17+0x74>
				SPDR = ki.array[ki_slave.addr];
    1432:	ae e4       	ldi	r26, 0x4E	; 78
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	80 91 ad 01 	lds	r24, 0x01AD
    143a:	88 2f       	mov	r24, r24
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	fc 01       	movw	r30, r24
    1440:	eb 54       	subi	r30, 0x4B	; 75
    1442:	fe 4f       	sbci	r31, 0xFE	; 254
    1444:	80 81       	ld	r24, Z
    1446:	8c 93       	st	X, r24
    1448:	3a c0       	rjmp	.+116    	; 0x14be <__vector_17+0xe8>
			} else {								// handle device address space
				if ((ki_status = device_read_byte(ki_slave.addr, &ki_slave.data)) == SC_OK) {
    144a:	80 91 ad 01 	lds	r24, 0x01AD
    144e:	2e ea       	ldi	r18, 0xAE	; 174
    1450:	31 e0       	ldi	r19, 0x01	; 1
    1452:	b9 01       	movw	r22, r18
    1454:	0e 94 59 09 	call	0x12b2	; 0x12b2 <device_read_byte>
    1458:	80 93 b6 01 	sts	0x01B6, r24
    145c:	80 91 b6 01 	lds	r24, 0x01B6
    1460:	88 23       	and	r24, r24
    1462:	31 f4       	brne	.+12     	; 0x1470 <__vector_17+0x9a>
					SPDR = ki_slave.data;
    1464:	ee e4       	ldi	r30, 0x4E	; 78
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 91 ae 01 	lds	r24, 0x01AE
    146c:	80 83       	st	Z, r24
    146e:	27 c0       	rjmp	.+78     	; 0x14be <__vector_17+0xe8>
				} else {
					SPDR = KINEN_ERR_BYTE;
    1470:	ee e4       	ldi	r30, 0x4E	; 78
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	85 ea       	ldi	r24, 0xA5	; 165
    1476:	80 83       	st	Z, r24
    1478:	22 c0       	rjmp	.+68     	; 0x14be <__vector_17+0xe8>
			}
		}

	// receive data byte
	} else {
		ki_slave.phase = KINEN_ADDR;	// advance phase
    147a:	10 92 ac 01 	sts	0x01AC, r1
		ki_slave.data = SPDR;		// read and save the data byte
    147e:	ee e4       	ldi	r30, 0x4E	; 78
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	80 93 ae 01 	sts	0x01AE, r24
		if (ki_command == KINEN_WRITE) {
    1488:	80 91 b5 01 	lds	r24, 0x01B5
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	b9 f4       	brne	.+46     	; 0x14be <__vector_17+0xe8>
			if (ki_slave.addr < KINEN_COMMON_MAX) {
    1490:	80 91 ad 01 	lds	r24, 0x01AD
    1494:	80 31       	cpi	r24, 0x10	; 16
    1496:	50 f4       	brcc	.+20     	; 0x14ac <__vector_17+0xd6>
				ki_status = _slave_write_byte(ki_slave.addr, ki_slave.data);
    1498:	80 91 ad 01 	lds	r24, 0x01AD
    149c:	90 91 ae 01 	lds	r25, 0x01AE
    14a0:	69 2f       	mov	r22, r25
    14a2:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_slave_write_byte>
    14a6:	80 93 b6 01 	sts	0x01B6, r24
    14aa:	09 c0       	rjmp	.+18     	; 0x14be <__vector_17+0xe8>
			} else {
				ki_status = device_write_byte(ki_slave.addr, ki_slave.data);
    14ac:	80 91 ad 01 	lds	r24, 0x01AD
    14b0:	90 91 ae 01 	lds	r25, 0x01AE
    14b4:	69 2f       	mov	r22, r25
    14b6:	0e 94 7e 09 	call	0x12fc	; 0x12fc <device_write_byte>
    14ba:	80 93 b6 01 	sts	0x01B6, r24
			}
		}
	}
}
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	ff 91       	pop	r31
    14c4:	ef 91       	pop	r30
    14c6:	bf 91       	pop	r27
    14c8:	af 91       	pop	r26
    14ca:	9f 91       	pop	r25
    14cc:	8f 91       	pop	r24
    14ce:	7f 91       	pop	r23
    14d0:	6f 91       	pop	r22
    14d2:	5f 91       	pop	r21
    14d4:	4f 91       	pop	r20
    14d6:	3f 91       	pop	r19
    14d8:	2f 91       	pop	r18
    14da:	0f 90       	pop	r0
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	0f 90       	pop	r0
    14e0:	1f 90       	pop	r1
    14e2:	18 95       	reti

000014e4 <_slave_write_byte>:

/* 
 * _slave_write_byte() - helper to write byte to a non-device address
 */
static uint8_t _slave_write_byte(const uint8_t addr, const uint8_t data)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <_slave_write_byte+0x6>
    14ea:	0f 92       	push	r0
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	6a 83       	std	Y+2, r22	; 0x02
	if (addr == KINEN_COMMAND) {
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	88 23       	and	r24, r24
    14f8:	21 f4       	brne	.+8      	; 0x1502 <_slave_write_byte+0x1e>
		ki_command = data; 
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	80 93 b5 01 	sts	0x01B5, r24
    1500:	12 c0       	rjmp	.+36     	; 0x1526 <_slave_write_byte+0x42>

	} else if (addr == KINEN_ADDR_PAGE) { 
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	84 30       	cpi	r24, 0x04	; 4
    1506:	21 f4       	brne	.+8      	; 0x1510 <_slave_write_byte+0x2c>
		ki_addr_page = data; 
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	80 93 b9 01 	sts	0x01B9, r24
    150e:	0b c0       	rjmp	.+22     	; 0x1526 <_slave_write_byte+0x42>

	} else if (addr == KINEN_RESET) {
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	85 30       	cpi	r24, 0x05	; 5
    1514:	29 f4       	brne	.+10     	; 0x1520 <_slave_write_byte+0x3c>
		kinen_slave_init();
    1516:	0e 94 b0 09 	call	0x1360	; 0x1360 <kinen_slave_init>
		device_reset();
    151a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <device_reset>
    151e:	03 c0       	rjmp	.+6      	; 0x1526 <_slave_write_byte+0x42>

	} else {
		return (SC_READ_ONLY_ADDRESS);
    1520:	89 e1       	ldi	r24, 0x19	; 25
    1522:	8b 83       	std	Y+3, r24	; 0x03
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <_slave_write_byte+0x44>
	}
	return (SC_OK);
    1526:	1b 82       	std	Y+3, r1	; 0x03
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
}
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <std_dev>:
 *
 *	"A lot of people talk about standard deviation but what is a standard deviant?"
 */

double std_dev(double a[], uint8_t n, double *mean) 
{
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	66 97       	sbiw	r28, 0x16	; 22
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	9f 87       	std	Y+15, r25	; 0x0f
    1554:	8e 87       	std	Y+14, r24	; 0x0e
    1556:	68 8b       	std	Y+16, r22	; 0x10
    1558:	5a 8b       	std	Y+18, r21	; 0x12
    155a:	49 8b       	std	Y+17, r20	; 0x11
	if(n == 0) { return (0);}
    155c:	88 89       	ldd	r24, Y+16	; 0x10
    155e:	88 23       	and	r24, r24
    1560:	49 f4       	brne	.+18     	; 0x1574 <std_dev+0x3e>
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a0 e0       	ldi	r26, 0x00	; 0
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	8b 8b       	std	Y+19, r24	; 0x13
    156c:	9c 8b       	std	Y+20, r25	; 0x14
    156e:	ad 8b       	std	Y+21, r26	; 0x15
    1570:	be 8b       	std	Y+22, r27	; 0x16
    1572:	ae c0       	rjmp	.+348    	; 0x16d0 <std_dev+0x19a>
	double sum = 0;
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a0 e0       	ldi	r26, 0x00	; 0
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	8a 87       	std	Y+10, r24	; 0x0a
    157e:	9b 87       	std	Y+11, r25	; 0x0b
    1580:	ac 87       	std	Y+12, r26	; 0x0c
    1582:	bd 87       	std	Y+13, r27	; 0x0d
	double sq_sum = 0;
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	a0 e0       	ldi	r26, 0x00	; 0
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	8e 83       	std	Y+6, r24	; 0x06
    158e:	9f 83       	std	Y+7, r25	; 0x07
    1590:	a8 87       	std	Y+8, r26	; 0x08
    1592:	b9 87       	std	Y+9, r27	; 0x09
	for(uint8_t i=0; i<n; ++i) {
    1594:	19 82       	std	Y+1, r1	; 0x01
    1596:	43 c0       	rjmp	.+134    	; 0x161e <std_dev+0xe8>
		sum += a[i];
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9c 01       	movw	r18, r24
    15a0:	22 0f       	add	r18, r18
    15a2:	33 1f       	adc	r19, r19
    15a4:	22 0f       	add	r18, r18
    15a6:	33 1f       	adc	r19, r19
    15a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    15aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    15ac:	fc 01       	movw	r30, r24
    15ae:	e2 0f       	add	r30, r18
    15b0:	f3 1f       	adc	r31, r19
    15b2:	20 81       	ld	r18, Z
    15b4:	31 81       	ldd	r19, Z+1	; 0x01
    15b6:	42 81       	ldd	r20, Z+2	; 0x02
    15b8:	53 81       	ldd	r21, Z+3	; 0x03
    15ba:	6a 85       	ldd	r22, Y+10	; 0x0a
    15bc:	7b 85       	ldd	r23, Y+11	; 0x0b
    15be:	8c 85       	ldd	r24, Y+12	; 0x0c
    15c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    15c2:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__addsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	8a 87       	std	Y+10, r24	; 0x0a
    15cc:	9b 87       	std	Y+11, r25	; 0x0b
    15ce:	ac 87       	std	Y+12, r26	; 0x0c
    15d0:	bd 87       	std	Y+13, r27	; 0x0d
		sq_sum += square(a[i]);
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	88 2f       	mov	r24, r24
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9c 01       	movw	r18, r24
    15da:	22 0f       	add	r18, r18
    15dc:	33 1f       	adc	r19, r19
    15de:	22 0f       	add	r18, r18
    15e0:	33 1f       	adc	r19, r19
    15e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    15e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    15e6:	fc 01       	movw	r30, r24
    15e8:	e2 0f       	add	r30, r18
    15ea:	f3 1f       	adc	r31, r19
    15ec:	80 81       	ld	r24, Z
    15ee:	91 81       	ldd	r25, Z+1	; 0x01
    15f0:	a2 81       	ldd	r26, Z+2	; 0x02
    15f2:	b3 81       	ldd	r27, Z+3	; 0x03
    15f4:	bc 01       	movw	r22, r24
    15f6:	cd 01       	movw	r24, r26
    15f8:	0e 94 30 11 	call	0x2260	; 0x2260 <square>
    15fc:	9b 01       	movw	r18, r22
    15fe:	ac 01       	movw	r20, r24
    1600:	6e 81       	ldd	r22, Y+6	; 0x06
    1602:	7f 81       	ldd	r23, Y+7	; 0x07
    1604:	88 85       	ldd	r24, Y+8	; 0x08
    1606:	99 85       	ldd	r25, Y+9	; 0x09
    1608:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__addsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	8e 83       	std	Y+6, r24	; 0x06
    1612:	9f 83       	std	Y+7, r25	; 0x07
    1614:	a8 87       	std	Y+8, r26	; 0x08
    1616:	b9 87       	std	Y+9, r27	; 0x09
double std_dev(double a[], uint8_t n, double *mean) 
{
	if(n == 0) { return (0);}
	double sum = 0;
	double sq_sum = 0;
	for(uint8_t i=0; i<n; ++i) {
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	8f 5f       	subi	r24, 0xFF	; 255
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	99 81       	ldd	r25, Y+1	; 0x01
    1620:	88 89       	ldd	r24, Y+16	; 0x10
    1622:	98 17       	cp	r25, r24
    1624:	08 f4       	brcc	.+2      	; 0x1628 <std_dev+0xf2>
    1626:	b8 cf       	rjmp	.-144    	; 0x1598 <std_dev+0x62>
		sum += a[i];
		sq_sum += square(a[i]);
	}
	*mean = sum / n;
    1628:	88 89       	ldd	r24, Y+16	; 0x10
    162a:	88 2f       	mov	r24, r24
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	aa 27       	eor	r26, r26
    1630:	97 fd       	sbrc	r25, 7
    1632:	a0 95       	com	r26
    1634:	ba 2f       	mov	r27, r26
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__floatsisf>
    163e:	9b 01       	movw	r18, r22
    1640:	ac 01       	movw	r20, r24
    1642:	6a 85       	ldd	r22, Y+10	; 0x0a
    1644:	7b 85       	ldd	r23, Y+11	; 0x0b
    1646:	8c 85       	ldd	r24, Y+12	; 0x0c
    1648:	9d 85       	ldd	r25, Y+13	; 0x0d
    164a:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divsf3>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	e9 89       	ldd	r30, Y+17	; 0x11
    1654:	fa 89       	ldd	r31, Y+18	; 0x12
    1656:	80 83       	st	Z, r24
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	a2 83       	std	Z+2, r26	; 0x02
    165c:	b3 83       	std	Z+3, r27	; 0x03
	double variance = (sq_sum / n) - square(*mean);
    165e:	88 89       	ldd	r24, Y+16	; 0x10
    1660:	88 2f       	mov	r24, r24
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	aa 27       	eor	r26, r26
    1666:	97 fd       	sbrc	r25, 7
    1668:	a0 95       	com	r26
    166a:	ba 2f       	mov	r27, r26
    166c:	bc 01       	movw	r22, r24
    166e:	cd 01       	movw	r24, r26
    1670:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__floatsisf>
    1674:	9b 01       	movw	r18, r22
    1676:	ac 01       	movw	r20, r24
    1678:	6e 81       	ldd	r22, Y+6	; 0x06
    167a:	7f 81       	ldd	r23, Y+7	; 0x07
    167c:	88 85       	ldd	r24, Y+8	; 0x08
    167e:	99 85       	ldd	r25, Y+9	; 0x09
    1680:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	7c 01       	movw	r14, r24
    168a:	8d 01       	movw	r16, r26
    168c:	e9 89       	ldd	r30, Y+17	; 0x11
    168e:	fa 89       	ldd	r31, Y+18	; 0x12
    1690:	80 81       	ld	r24, Z
    1692:	91 81       	ldd	r25, Z+1	; 0x01
    1694:	a2 81       	ldd	r26, Z+2	; 0x02
    1696:	b3 81       	ldd	r27, Z+3	; 0x03
    1698:	bc 01       	movw	r22, r24
    169a:	cd 01       	movw	r24, r26
    169c:	0e 94 30 11 	call	0x2260	; 0x2260 <square>
    16a0:	9b 01       	movw	r18, r22
    16a2:	ac 01       	movw	r20, r24
    16a4:	c8 01       	movw	r24, r16
    16a6:	b7 01       	movw	r22, r14
    16a8:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__subsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	8a 83       	std	Y+2, r24	; 0x02
    16b2:	9b 83       	std	Y+3, r25	; 0x03
    16b4:	ac 83       	std	Y+4, r26	; 0x04
    16b6:	bd 83       	std	Y+5, r27	; 0x05
	return sqrt(variance);
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	9b 81       	ldd	r25, Y+3	; 0x03
    16bc:	ac 81       	ldd	r26, Y+4	; 0x04
    16be:	bd 81       	ldd	r27, Y+5	; 0x05
    16c0:	bc 01       	movw	r22, r24
    16c2:	cd 01       	movw	r24, r26
    16c4:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <sqrt>
    16c8:	6b 8b       	std	Y+19, r22	; 0x13
    16ca:	7c 8b       	std	Y+20, r23	; 0x14
    16cc:	8d 8b       	std	Y+21, r24	; 0x15
    16ce:	9e 8b       	std	Y+22, r25	; 0x16
    16d0:	8b 89       	ldd	r24, Y+19	; 0x13
    16d2:	9c 89       	ldd	r25, Y+20	; 0x14
    16d4:	ad 89       	ldd	r26, Y+21	; 0x15
    16d6:	be 89       	ldd	r27, Y+22	; 0x16
}
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	66 96       	adiw	r28, 0x16	; 22
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	08 95       	ret

000016f6 <set_baud_rate>:
uint8_t rx_buffer_tail = 0;
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_buffer_head = 0;
volatile uint8_t tx_buffer_tail = 0;

static void set_baud_rate(long baud) {
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <set_baud_rate+0x6>
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <set_baud_rate+0x8>
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <set_baud_rate+0xa>
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	6b 83       	std	Y+3, r22	; 0x03
    1706:	7c 83       	std	Y+4, r23	; 0x04
    1708:	8d 83       	std	Y+5, r24	; 0x05
    170a:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t UBRR0_value = (F_CPU / (8 * baud)) - 1;
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	9c 81       	ldd	r25, Y+4	; 0x04
    1710:	ad 81       	ldd	r26, Y+5	; 0x05
    1712:	be 81       	ldd	r27, Y+6	; 0x06
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	aa 1f       	adc	r26, r26
    171a:	bb 1f       	adc	r27, r27
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	aa 1f       	adc	r26, r26
    1722:	bb 1f       	adc	r27, r27
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	aa 1f       	adc	r26, r26
    172a:	bb 1f       	adc	r27, r27
    172c:	9c 01       	movw	r18, r24
    172e:	ad 01       	movw	r20, r26
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	92 e1       	ldi	r25, 0x12	; 18
    1734:	aa e7       	ldi	r26, 0x7A	; 122
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	0e 94 48 11 	call	0x2290	; 0x2290 <__udivmodsi4>
    1740:	da 01       	movw	r26, r20
    1742:	c9 01       	movw	r24, r18
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	9a 83       	std	Y+2, r25	; 0x02
    1748:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = UBRR0_value >> 8;
    174a:	e5 ec       	ldi	r30, 0xC5	; 197
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	89 2f       	mov	r24, r25
    1754:	99 27       	eor	r25, r25
    1756:	80 83       	st	Z, r24
	UBRR0L = UBRR0_value;
    1758:	e4 ec       	ldi	r30, 0xC4	; 196
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	80 83       	st	Z, r24
	UCSR0A &= ~(1<<U2X0);		// baud doubler off
    1760:	a0 ec       	ldi	r26, 0xC0	; 192
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e0 ec       	ldi	r30, 0xC0	; 192
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	8d 7f       	andi	r24, 0xFD	; 253
    176c:	8c 93       	st	X, r24
}
    176e:	26 96       	adiw	r28, 0x06	; 6
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <serial_init>:

void serial_init(long baud)
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	00 d0       	rcall	.+0      	; 0x1786 <serial_init+0x6>
    1786:	00 d0       	rcall	.+0      	; 0x1788 <serial_init+0x8>
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	69 83       	std	Y+1, r22	; 0x01
    178e:	7a 83       	std	Y+2, r23	; 0x02
    1790:	8b 83       	std	Y+3, r24	; 0x03
    1792:	9c 83       	std	Y+4, r25	; 0x04
	set_baud_rate(baud);
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	ab 81       	ldd	r26, Y+3	; 0x03
    179a:	bc 81       	ldd	r27, Y+4	; 0x04
    179c:	bc 01       	movw	r22, r24
    179e:	cd 01       	movw	r24, r26
    17a0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <set_baud_rate>
	UCSR0B |= 1<<RXEN0;			// enable rx and tx
    17a4:	a1 ec       	ldi	r26, 0xC1	; 193
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e1 ec       	ldi	r30, 0xC1	; 193
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	80 61       	ori	r24, 0x10	; 16
    17b0:	8c 93       	st	X, r24
	UCSR0B |= 1<<TXEN0;	
    17b2:	a1 ec       	ldi	r26, 0xC1	; 193
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e1 ec       	ldi	r30, 0xC1	; 193
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	88 60       	ori	r24, 0x08	; 8
    17be:	8c 93       	st	X, r24
	UCSR0B |= 1<<RXCIE0;		// enable interrupt on complete reception of a byte
    17c0:	a1 ec       	ldi	r26, 0xC1	; 193
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e1 ec       	ldi	r30, 0xC1	; 193
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	80 68       	ori	r24, 0x80	; 128
    17cc:	8c 93       	st	X, r24
	// USART defaults to 8-bit, no parity, 1 stop bit
}
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <serial_write>:

void serial_write(uint8_t data) {
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <serial_write+0x6>
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = tx_buffer_head + 1;	// Calculate next head
    17e8:	80 91 b1 01 	lds	r24, 0x01B1
    17ec:	8f 5f       	subi	r24, 0xFF	; 255
    17ee:	89 83       	std	Y+1, r24	; 0x01
	if (next_head == TX_BUFFER_SIZE) { 
		next_head = 0; 
	}
	// Enable Data Register Empty Interrupt to make sure tx-streaming is running
	UCSR0B |= (1<<UDRIE0); 
    17f0:	a1 ec       	ldi	r26, 0xC1	; 193
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e1 ec       	ldi	r30, 0xC1	; 193
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	80 62       	ori	r24, 0x20	; 32
    17fc:	8c 93       	st	X, r24
	while (next_head == tx_buffer_tail); 	// Wait until there is space in the buffer
    17fe:	90 91 b2 01 	lds	r25, 0x01B2
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	89 17       	cp	r24, r25
    1806:	d9 f3       	breq	.-10     	; 0x17fe <serial_write+0x22>

	tx_buffer[tx_buffer_head] = data;		// Store data and advance head
    1808:	80 91 b1 01 	lds	r24, 0x01B1
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	fc 01       	movw	r30, r24
    1812:	eb 53       	subi	r30, 0x3B	; 59
    1814:	fd 4f       	sbci	r31, 0xFD	; 253
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	80 83       	st	Z, r24
	tx_buffer_head = next_head;
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	80 93 b1 01 	sts	0x01B1, r24
}
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <__vector_19>:

// Data Register Empty Interrupt handler
ISR(USART_UDRE_vect)
{
    182a:	1f 92       	push	r1
    182c:	0f 92       	push	r0
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	0f 92       	push	r0
    1832:	11 24       	eor	r1, r1
    1834:	8f 93       	push	r24
    1836:	9f 93       	push	r25
    1838:	af 93       	push	r26
    183a:	bf 93       	push	r27
    183c:	ef 93       	push	r30
    183e:	ff 93       	push	r31
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	0f 92       	push	r0
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
	uint8_t tail = tx_buffer_tail;	// Temporary tx_buffer_tail (to optimize for volatile)
    184a:	80 91 b2 01 	lds	r24, 0x01B2
    184e:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = tx_buffer[tail];			// Send a byte from the buffer	
    1850:	a6 ec       	ldi	r26, 0xC6	; 198
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	88 2f       	mov	r24, r24
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	fc 01       	movw	r30, r24
    185c:	eb 53       	subi	r30, 0x3B	; 59
    185e:	fd 4f       	sbci	r31, 0xFD	; 253
    1860:	80 81       	ld	r24, Z
    1862:	8c 93       	st	X, r24
    tail++;							// Update tail position
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	8f 5f       	subi	r24, 0xFF	; 255
    1868:	89 83       	std	Y+1, r24	; 0x01
    if (tail == TX_BUFFER_SIZE) { tail = 0; }
	tx_buffer_tail = tail;
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	80 93 b2 01 	sts	0x01B2, r24

	// Turn off Data Register Empty Interrupt to stop tx-streaming if this concludes the transfer
	if (tail == tx_buffer_head) { 
    1870:	90 91 b1 01 	lds	r25, 0x01B1
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	89 17       	cp	r24, r25
    1878:	39 f4       	brne	.+14     	; 0x1888 <__vector_19+0x5e>
		UCSR0B &= ~(1<<UDRIE0);
    187a:	a1 ec       	ldi	r26, 0xC1	; 193
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e1 ec       	ldi	r30, 0xC1	; 193
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	8f 7d       	andi	r24, 0xDF	; 223
    1886:	8c 93       	st	X, r24
	}
}
    1888:	0f 90       	pop	r0
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	ff 91       	pop	r31
    1890:	ef 91       	pop	r30
    1892:	bf 91       	pop	r27
    1894:	af 91       	pop	r26
    1896:	9f 91       	pop	r25
    1898:	8f 91       	pop	r24
    189a:	0f 90       	pop	r0
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	0f 90       	pop	r0
    18a0:	1f 90       	pop	r1
    18a2:	18 95       	reti

000018a4 <serial_read>:

uint8_t serial_read()
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <serial_read+0x6>
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
	if (rx_buffer_head == rx_buffer_tail) {
    18ae:	90 91 af 01 	lds	r25, 0x01AF
    18b2:	80 91 b0 01 	lds	r24, 0x01B0
    18b6:	98 17       	cp	r25, r24
    18b8:	19 f4       	brne	.+6      	; 0x18c0 <serial_read+0x1c>
		return SERIAL_NO_DATA;
    18ba:	8f ef       	ldi	r24, 0xFF	; 255
    18bc:	8a 83       	std	Y+2, r24	; 0x02
    18be:	10 c0       	rjmp	.+32     	; 0x18e0 <serial_read+0x3c>
	} else {
		uint8_t data = rx_buffer[rx_buffer_tail];
    18c0:	80 91 b0 01 	lds	r24, 0x01B0
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	fc 01       	movw	r30, r24
    18ca:	eb 53       	subi	r30, 0x3B	; 59
    18cc:	fe 4f       	sbci	r31, 0xFE	; 254
    18ce:	80 81       	ld	r24, Z
    18d0:	89 83       	std	Y+1, r24	; 0x01
		rx_buffer_tail++;
    18d2:	80 91 b0 01 	lds	r24, 0x01B0
    18d6:	8f 5f       	subi	r24, 0xFF	; 255
    18d8:	80 93 b0 01 	sts	0x01B0, r24
		if (rx_buffer_tail == RX_BUFFER_SIZE) { rx_buffer_tail = 0; }
		return data;
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	8a 83       	std	Y+2, r24	; 0x02
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <__vector_18>:

ISR(USART_RX_vect)
{
    18ec:	1f 92       	push	r1
    18ee:	0f 92       	push	r0
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	0f 92       	push	r0
    18f4:	11 24       	eor	r1, r1
    18f6:	8f 93       	push	r24
    18f8:	9f 93       	push	r25
    18fa:	ef 93       	push	r30
    18fc:	ff 93       	push	r31
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	00 d0       	rcall	.+0      	; 0x1904 <__vector_18+0x18>
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = UDR0;
    1908:	e6 ec       	ldi	r30, 0xC6	; 198
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = rx_buffer_head + 1;
    1910:	80 91 af 01 	lds	r24, 0x01AF
    1914:	8f 5f       	subi	r24, 0xFF	; 255
    1916:	89 83       	std	Y+1, r24	; 0x01
	
	if (next_head == RX_BUFFER_SIZE) { 
		next_head = 0;
	}
	if (next_head != rx_buffer_tail) {      // Write data to buffer unless it is full.
    1918:	90 91 b0 01 	lds	r25, 0x01B0
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	89 17       	cp	r24, r25
    1920:	61 f0       	breq	.+24     	; 0x193a <__vector_18+0x4e>
		rx_buffer[rx_buffer_head] = data;
    1922:	80 91 af 01 	lds	r24, 0x01AF
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	fc 01       	movw	r30, r24
    192c:	eb 53       	subi	r30, 0x3B	; 59
    192e:	fe 4f       	sbci	r31, 0xFE	; 254
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	80 83       	st	Z, r24
		rx_buffer_head = next_head;    
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	80 93 af 01 	sts	0x01AF, r24
	}
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	ff 91       	pop	r31
    1944:	ef 91       	pop	r30
    1946:	9f 91       	pop	r25
    1948:	8f 91       	pop	r24
    194a:	0f 90       	pop	r0
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	0f 90       	pop	r0
    1950:	1f 90       	pop	r1
    1952:	18 95       	reti

00001954 <serial_reset_read_buffer>:

void serial_reset_read_buffer() 
{
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
  rx_buffer_tail = rx_buffer_head;
    195c:	80 91 af 01 	lds	r24, 0x01AF
    1960:	80 93 b0 01 	sts	0x01B0, r24

  #ifdef ENABLE_XONXOFF
    flow_ctrl = XON_SENT;
  #endif
}
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <printString>:

#include "print.h"
#include "serial.h"

void printString(const char *s)
{
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	00 d0       	rcall	.+0      	; 0x1970 <printString+0x6>
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	9a 83       	std	Y+2, r25	; 0x02
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	0b c0       	rjmp	.+22     	; 0x1990 <printString+0x26>
  while (*s)
    serial_write(*s++);
    197a:	e9 81       	ldd	r30, Y+1	; 0x01
    197c:	fa 81       	ldd	r31, Y+2	; 0x02
    197e:	20 81       	ld	r18, Z
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	01 96       	adiw	r24, 0x01	; 1
    1986:	9a 83       	std	Y+2, r25	; 0x02
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	82 2f       	mov	r24, r18
    198c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <serial_write>
#include "print.h"
#include "serial.h"

void printString(const char *s)
{
  while (*s)
    1990:	e9 81       	ldd	r30, Y+1	; 0x01
    1992:	fa 81       	ldd	r31, Y+2	; 0x02
    1994:	80 81       	ld	r24, Z
    1996:	88 23       	and	r24, r24
    1998:	81 f7       	brne	.-32     	; 0x197a <printString+0x10>
    serial_write(*s++);
}
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <printPgmString+0x6>
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <printPgmString+0x8>
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <printPgmString+0xa>
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	03 c0       	rjmp	.+6      	; 0x19be <printPgmString+0x1a>
  char c;
  while ((c = pgm_read_byte_near(s++)))
    serial_write(c);
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <serial_write>

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
  while ((c = pgm_read_byte_near(s++)))
    19be:	8d 81       	ldd	r24, Y+5	; 0x05
    19c0:	9e 81       	ldd	r25, Y+6	; 0x06
    19c2:	9b 83       	std	Y+3, r25	; 0x03
    19c4:	8a 83       	std	Y+2, r24	; 0x02
    19c6:	8d 81       	ldd	r24, Y+5	; 0x05
    19c8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ca:	01 96       	adiw	r24, 0x01	; 1
    19cc:	9e 83       	std	Y+6, r25	; 0x06
    19ce:	8d 83       	std	Y+5, r24	; 0x05
    19d0:	ea 81       	ldd	r30, Y+2	; 0x02
    19d2:	fb 81       	ldd	r31, Y+3	; 0x03
    19d4:	84 91       	lpm	r24, Z+
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	8c 83       	std	Y+4, r24	; 0x04
    19dc:	8c 81       	ldd	r24, Y+4	; 0x04
    19de:	88 23       	and	r24, r24
    19e0:	59 f7       	brne	.-42     	; 0x19b8 <printPgmString+0x14>
    serial_write(c);
}
    19e2:	26 96       	adiw	r28, 0x06	; 6
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <print_uint8_base2>:
// 			'0' + buf[i - 1] :
// 			'A' + buf[i - 1] - 10);
// }

void print_uint8_base2(uint8_t n)
{ 
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	2a 97       	sbiw	r28, 0x0a	; 10
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char buf[8];
	uint8_t i = 0;
    1a0a:	19 82       	std	Y+1, r1	; 0x01
    1a0c:	12 c0       	rjmp	.+36     	; 0x1a32 <print_uint8_base2+0x3e>

	for (; i < 8; i++) {
		buf[i] = n & 1;
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a16:	48 2f       	mov	r20, r24
    1a18:	41 70       	andi	r20, 0x01	; 1
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	02 96       	adiw	r24, 0x02	; 2
    1a1e:	fc 01       	movw	r30, r24
    1a20:	e2 0f       	add	r30, r18
    1a22:	f3 1f       	adc	r31, r19
    1a24:	40 83       	st	Z, r20
		n >>= 1;
    1a26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a28:	86 95       	lsr	r24
    1a2a:	8a 87       	std	Y+10, r24	; 0x0a
void print_uint8_base2(uint8_t n)
{ 
	unsigned char buf[8];
	uint8_t i = 0;

	for (; i < 8; i++) {
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	8f 5f       	subi	r24, 0xFF	; 255
    1a30:	89 83       	std	Y+1, r24	; 0x01
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	88 30       	cpi	r24, 0x08	; 8
    1a36:	58 f3       	brcs	.-42     	; 0x1a0e <print_uint8_base2+0x1a>
    1a38:	12 c0       	rjmp	.+36     	; 0x1a5e <print_uint8_base2+0x6a>
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
		serial_write('0' + buf[i - 1]);
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	9c 01       	movw	r18, r24
    1a42:	21 50       	subi	r18, 0x01	; 1
    1a44:	30 40       	sbci	r19, 0x00	; 0
    1a46:	ce 01       	movw	r24, r28
    1a48:	02 96       	adiw	r24, 0x02	; 2
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	e2 0f       	add	r30, r18
    1a4e:	f3 1f       	adc	r31, r19
    1a50:	80 81       	ld	r24, Z
    1a52:	80 5d       	subi	r24, 0xD0	; 208
    1a54:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <serial_write>
	for (; i < 8; i++) {
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	81 50       	subi	r24, 0x01	; 1
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	88 23       	and	r24, r24
    1a62:	59 f7       	brne	.-42     	; 0x1a3a <print_uint8_base2+0x46>
		serial_write('0' + buf[i - 1]);
}
    1a64:	2a 96       	adiw	r28, 0x0a	; 10
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <print_uint32_base10>:

static void print_uint32_base10(unsigned long n)
{ 
    1a76:	0f 93       	push	r16
    1a78:	1f 93       	push	r17
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	2f 97       	sbiw	r28, 0x0f	; 15
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	6c 87       	std	Y+12, r22	; 0x0c
    1a90:	7d 87       	std	Y+13, r23	; 0x0d
    1a92:	8e 87       	std	Y+14, r24	; 0x0e
    1a94:	9f 87       	std	Y+15, r25	; 0x0f
  unsigned char buf[10]; 
  uint8_t i = 0;
    1a96:	19 82       	std	Y+1, r1	; 0x01
  
  if (n == 0) {
    1a98:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a9c:	ae 85       	ldd	r26, Y+14	; 0x0e
    1a9e:	bf 85       	ldd	r27, Y+15	; 0x0f
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	a1 05       	cpc	r26, r1
    1aa4:	b1 05       	cpc	r27, r1
    1aa6:	91 f5       	brne	.+100    	; 0x1b0c <print_uint32_base10+0x96>
    serial_write('0');
    1aa8:	80 e3       	ldi	r24, 0x30	; 48
    1aaa:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <serial_write>
    1aae:	4b c0       	rjmp	.+150    	; 0x1b46 <print_uint32_base10+0xd0>
    return;
  } 
  
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	08 2f       	mov	r16, r24
    1ab4:	10 e0       	ldi	r17, 0x00	; 0
    1ab6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ab8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1aba:	ae 85       	ldd	r26, Y+14	; 0x0e
    1abc:	bf 85       	ldd	r27, Y+15	; 0x0f
    1abe:	2a e0       	ldi	r18, 0x0A	; 10
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e0       	ldi	r20, 0x00	; 0
    1ac4:	50 e0       	ldi	r21, 0x00	; 0
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	0e 94 48 11 	call	0x2290	; 0x2290 <__udivmodsi4>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	20 5d       	subi	r18, 0xD0	; 208
    1ad6:	ce 01       	movw	r24, r28
    1ad8:	02 96       	adiw	r24, 0x02	; 2
    1ada:	fc 01       	movw	r30, r24
    1adc:	e0 0f       	add	r30, r16
    1ade:	f1 1f       	adc	r31, r17
    1ae0:	20 83       	st	Z, r18
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	8f 5f       	subi	r24, 0xFF	; 255
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    n /= 10;
    1ae8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aea:	9d 85       	ldd	r25, Y+13	; 0x0d
    1aec:	ae 85       	ldd	r26, Y+14	; 0x0e
    1aee:	bf 85       	ldd	r27, Y+15	; 0x0f
    1af0:	2a e0       	ldi	r18, 0x0A	; 10
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e0       	ldi	r20, 0x00	; 0
    1af6:	50 e0       	ldi	r21, 0x00	; 0
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	0e 94 48 11 	call	0x2290	; 0x2290 <__udivmodsi4>
    1b00:	da 01       	movw	r26, r20
    1b02:	c9 01       	movw	r24, r18
    1b04:	8c 87       	std	Y+12, r24	; 0x0c
    1b06:	9d 87       	std	Y+13, r25	; 0x0d
    1b08:	ae 87       	std	Y+14, r26	; 0x0e
    1b0a:	bf 87       	std	Y+15, r27	; 0x0f
  if (n == 0) {
    serial_write('0');
    return;
  } 
  
  while (n > 0) {
    1b0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b0e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b10:	ae 85       	ldd	r26, Y+14	; 0x0e
    1b12:	bf 85       	ldd	r27, Y+15	; 0x0f
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	a1 05       	cpc	r26, r1
    1b18:	b1 05       	cpc	r27, r1
    1b1a:	51 f6       	brne	.-108    	; 0x1ab0 <print_uint32_base10+0x3a>
    1b1c:	11 c0       	rjmp	.+34     	; 0x1b40 <print_uint32_base10+0xca>
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    serial_write(buf[i-1]);
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	9c 01       	movw	r18, r24
    1b26:	21 50       	subi	r18, 0x01	; 1
    1b28:	30 40       	sbci	r19, 0x00	; 0
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	02 96       	adiw	r24, 0x02	; 2
    1b2e:	fc 01       	movw	r30, r24
    1b30:	e2 0f       	add	r30, r18
    1b32:	f3 1f       	adc	r31, r19
    1b34:	80 81       	ld	r24, Z
    1b36:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <serial_write>
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	81 50       	subi	r24, 0x01	; 1
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	88 23       	and	r24, r24
    1b44:	61 f7       	brne	.-40     	; 0x1b1e <print_uint32_base10+0xa8>
    serial_write(buf[i-1]);
}
    1b46:	2f 96       	adiw	r28, 0x0f	; 15
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	08 95       	ret

00001b5c <printInteger>:

void printInteger(long n)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <printInteger+0x6>
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <printInteger+0x8>
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	69 83       	std	Y+1, r22	; 0x01
    1b6a:	7a 83       	std	Y+2, r23	; 0x02
    1b6c:	8b 83       	std	Y+3, r24	; 0x03
    1b6e:	9c 83       	std	Y+4, r25	; 0x04
  if (n < 0) {
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	ab 81       	ldd	r26, Y+3	; 0x03
    1b76:	bc 81       	ldd	r27, Y+4	; 0x04
    1b78:	bb 23       	and	r27, r27
    1b7a:	94 f4       	brge	.+36     	; 0x1ba0 <printInteger+0x44>
    serial_write('-');
    1b7c:	8d e2       	ldi	r24, 0x2D	; 45
    1b7e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <serial_write>
    n = -n;
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	9a 81       	ldd	r25, Y+2	; 0x02
    1b86:	ab 81       	ldd	r26, Y+3	; 0x03
    1b88:	bc 81       	ldd	r27, Y+4	; 0x04
    1b8a:	b0 95       	com	r27
    1b8c:	a0 95       	com	r26
    1b8e:	90 95       	com	r25
    1b90:	81 95       	neg	r24
    1b92:	9f 4f       	sbci	r25, 0xFF	; 255
    1b94:	af 4f       	sbci	r26, 0xFF	; 255
    1b96:	bf 4f       	sbci	r27, 0xFF	; 255
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	9a 83       	std	Y+2, r25	; 0x02
    1b9c:	ab 83       	std	Y+3, r26	; 0x03
    1b9e:	bc 83       	std	Y+4, r27	; 0x04
  }
  print_uint32_base10(n);
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba4:	ab 81       	ldd	r26, Y+3	; 0x03
    1ba6:	bc 81       	ldd	r27, Y+4	; 0x04
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <print_uint32_base10>
}
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up 
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n)
{
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	64 97       	sbiw	r28, 0x14	; 20
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	69 8b       	std	Y+17, r22	; 0x11
    1bd8:	7a 8b       	std	Y+18, r23	; 0x12
    1bda:	8b 8b       	std	Y+19, r24	; 0x13
    1bdc:	9c 8b       	std	Y+20, r25	; 0x14
  if (n < 0) {
    1bde:	69 89       	ldd	r22, Y+17	; 0x11
    1be0:	7a 89       	ldd	r23, Y+18	; 0x12
    1be2:	8b 89       	ldd	r24, Y+19	; 0x13
    1be4:	9c 89       	ldd	r25, Y+20	; 0x14
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	50 e0       	ldi	r21, 0x00	; 0
    1bee:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__cmpsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	64 f4       	brge	.+24     	; 0x1c0e <printFloat+0x50>
    serial_write('-');
    1bf6:	8d e2       	ldi	r24, 0x2D	; 45
    1bf8:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <serial_write>
    n = -n;
    1bfc:	89 89       	ldd	r24, Y+17	; 0x11
    1bfe:	9a 89       	ldd	r25, Y+18	; 0x12
    1c00:	ab 89       	ldd	r26, Y+19	; 0x13
    1c02:	bc 89       	ldd	r27, Y+20	; 0x14
    1c04:	b0 58       	subi	r27, 0x80	; 128
    1c06:	89 8b       	std	Y+17, r24	; 0x11
    1c08:	9a 8b       	std	Y+18, r25	; 0x12
    1c0a:	ab 8b       	std	Y+19, r26	; 0x13
    1c0c:	bc 8b       	std	Y+20, r27	; 0x14
  }

  uint8_t decimals = DECIMAL_PLACES;
    1c0e:	82 e0       	ldi	r24, 0x02	; 2
    1c10:	8e 83       	std	Y+6, r24	; 0x06
    1c12:	13 c0       	rjmp	.+38     	; 0x1c3a <printFloat+0x7c>
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
    n *= 100;
    1c14:	69 89       	ldd	r22, Y+17	; 0x11
    1c16:	7a 89       	ldd	r23, Y+18	; 0x12
    1c18:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	48 ec       	ldi	r20, 0xC8	; 200
    1c22:	52 e4       	ldi	r21, 0x42	; 66
    1c24:	0e 94 8b 10 	call	0x2116	; 0x2116 <__mulsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	89 8b       	std	Y+17, r24	; 0x11
    1c2e:	9a 8b       	std	Y+18, r25	; 0x12
    1c30:	ab 8b       	std	Y+19, r26	; 0x13
    1c32:	bc 8b       	std	Y+20, r27	; 0x14
    decimals -= 2;
    1c34:	8e 81       	ldd	r24, Y+6	; 0x06
    1c36:	82 50       	subi	r24, 0x02	; 2
    1c38:	8e 83       	std	Y+6, r24	; 0x06
    serial_write('-');
    n = -n;
  }

  uint8_t decimals = DECIMAL_PLACES;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
    1c3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3c:	82 30       	cpi	r24, 0x02	; 2
    1c3e:	50 f7       	brcc	.-44     	; 0x1c14 <printFloat+0x56>
    n *= 100;
    decimals -= 2;
  }
  if (decimals) { n *= 10; }
    1c40:	8e 81       	ldd	r24, Y+6	; 0x06
    1c42:	88 23       	and	r24, r24
    1c44:	81 f0       	breq	.+32     	; 0x1c66 <printFloat+0xa8>
    1c46:	69 89       	ldd	r22, Y+17	; 0x11
    1c48:	7a 89       	ldd	r23, Y+18	; 0x12
    1c4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e2       	ldi	r20, 0x20	; 32
    1c54:	51 e4       	ldi	r21, 0x41	; 65
    1c56:	0e 94 8b 10 	call	0x2116	; 0x2116 <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	89 8b       	std	Y+17, r24	; 0x11
    1c60:	9a 8b       	std	Y+18, r25	; 0x12
    1c62:	ab 8b       	std	Y+19, r26	; 0x13
    1c64:	bc 8b       	std	Y+20, r27	; 0x14
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
    1c66:	69 89       	ldd	r22, Y+17	; 0x11
    1c68:	7a 89       	ldd	r23, Y+18	; 0x12
    1c6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	5f e3       	ldi	r21, 0x3F	; 63
    1c76:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__addsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	89 8b       	std	Y+17, r24	; 0x11
    1c80:	9a 8b       	std	Y+18, r25	; 0x12
    1c82:	ab 8b       	std	Y+19, r26	; 0x13
    1c84:	bc 8b       	std	Y+20, r27	; 0x14
    
  // Generate digits backwards and store in string.
  unsigned char buf[10]; 
  uint8_t i = 0;
    1c86:	1d 82       	std	Y+5, r1	; 0x05
  uint32_t a = (long)n;  
    1c88:	69 89       	ldd	r22, Y+17	; 0x11
    1c8a:	7a 89       	ldd	r23, Y+18	; 0x12
    1c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c90:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__fixsfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	9a 83       	std	Y+2, r25	; 0x02
    1c9c:	ab 83       	std	Y+3, r26	; 0x03
    1c9e:	bc 83       	std	Y+4, r27	; 0x04
  buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
    1ca0:	8e e2       	ldi	r24, 0x2E	; 46
    1ca2:	89 87       	std	Y+9, r24	; 0x09
    1ca4:	34 c0       	rjmp	.+104    	; 0x1d0e <printFloat+0x150>
  while(a > 0) {
    if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	82 30       	cpi	r24, 0x02	; 2
    1caa:	19 f4       	brne	.+6      	; 0x1cb2 <printFloat+0xf4>
    1cac:	8d 81       	ldd	r24, Y+5	; 0x05
    1cae:	8f 5f       	subi	r24, 0xFF	; 255
    1cb0:	8d 83       	std	Y+5, r24	; 0x05
    buf[i++] = (a % 10) + '0'; // Get digit
    1cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb4:	08 2f       	mov	r16, r24
    1cb6:	10 e0       	ldi	r17, 0x00	; 0
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbc:	ab 81       	ldd	r26, Y+3	; 0x03
    1cbe:	bc 81       	ldd	r27, Y+4	; 0x04
    1cc0:	2a e0       	ldi	r18, 0x0A	; 10
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	50 e0       	ldi	r21, 0x00	; 0
    1cc8:	bc 01       	movw	r22, r24
    1cca:	cd 01       	movw	r24, r26
    1ccc:	0e 94 48 11 	call	0x2290	; 0x2290 <__udivmodsi4>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	20 5d       	subi	r18, 0xD0	; 208
    1cd8:	ce 01       	movw	r24, r28
    1cda:	07 96       	adiw	r24, 0x07	; 7
    1cdc:	fc 01       	movw	r30, r24
    1cde:	e0 0f       	add	r30, r16
    1ce0:	f1 1f       	adc	r31, r17
    1ce2:	20 83       	st	Z, r18
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	8f 5f       	subi	r24, 0xFF	; 255
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
    a /= 10;
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	9a 81       	ldd	r25, Y+2	; 0x02
    1cee:	ab 81       	ldd	r26, Y+3	; 0x03
    1cf0:	bc 81       	ldd	r27, Y+4	; 0x04
    1cf2:	2a e0       	ldi	r18, 0x0A	; 10
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e0       	ldi	r20, 0x00	; 0
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 48 11 	call	0x2290	; 0x2290 <__udivmodsi4>
    1d02:	da 01       	movw	r26, r20
    1d04:	c9 01       	movw	r24, r18
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	ab 83       	std	Y+3, r26	; 0x03
    1d0c:	bc 83       	std	Y+4, r27	; 0x04
  // Generate digits backwards and store in string.
  unsigned char buf[10]; 
  uint8_t i = 0;
  uint32_t a = (long)n;  
  buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
  while(a > 0) {
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	9a 81       	ldd	r25, Y+2	; 0x02
    1d12:	ab 81       	ldd	r26, Y+3	; 0x03
    1d14:	bc 81       	ldd	r27, Y+4	; 0x04
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	a1 05       	cpc	r26, r1
    1d1a:	b1 05       	cpc	r27, r1
    1d1c:	21 f6       	brne	.-120    	; 0x1ca6 <printFloat+0xe8>
    1d1e:	0d c0       	rjmp	.+26     	; 0x1d3a <printFloat+0x17c>
    if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
    buf[i++] = (a % 10) + '0'; // Get digit
    a /= 10;
  }
  while (i < DECIMAL_PLACES) { 
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	ce 01       	movw	r24, r28
    1d28:	07 96       	adiw	r24, 0x07	; 7
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	e2 0f       	add	r30, r18
    1d2e:	f3 1f       	adc	r31, r19
    1d30:	80 e3       	ldi	r24, 0x30	; 48
    1d32:	80 83       	st	Z, r24
    1d34:	8d 81       	ldd	r24, Y+5	; 0x05
    1d36:	8f 5f       	subi	r24, 0xFF	; 255
    1d38:	8d 83       	std	Y+5, r24	; 0x05
  while(a > 0) {
    if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
    buf[i++] = (a % 10) + '0'; // Get digit
    a /= 10;
  }
  while (i < DECIMAL_PLACES) { 
    1d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3c:	82 30       	cpi	r24, 0x02	; 2
    1d3e:	80 f3       	brcs	.-32     	; 0x1d20 <printFloat+0x162>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
  }
  if (i == DECIMAL_PLACES) { // Fill in leading zero, if needed.
    1d40:	8d 81       	ldd	r24, Y+5	; 0x05
    1d42:	82 30       	cpi	r24, 0x02	; 2
    1d44:	11 f5       	brne	.+68     	; 0x1d8a <printFloat+0x1cc>
    i++;
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	8f 5f       	subi	r24, 0xFF	; 255
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
    buf[i++] = '0'; 
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	ce 01       	movw	r24, r28
    1d54:	07 96       	adiw	r24, 0x07	; 7
    1d56:	fc 01       	movw	r30, r24
    1d58:	e2 0f       	add	r30, r18
    1d5a:	f3 1f       	adc	r31, r19
    1d5c:	80 e3       	ldi	r24, 0x30	; 48
    1d5e:	80 83       	st	Z, r24
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	8f 5f       	subi	r24, 0xFF	; 255
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	11 c0       	rjmp	.+34     	; 0x1d8a <printFloat+0x1cc>
  }   
  
  // Print the generated string.
  for (; i > 0; i--)
    serial_write(buf[i-1]);
    1d68:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6a:	88 2f       	mov	r24, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9c 01       	movw	r18, r24
    1d70:	21 50       	subi	r18, 0x01	; 1
    1d72:	30 40       	sbci	r19, 0x00	; 0
    1d74:	ce 01       	movw	r24, r28
    1d76:	07 96       	adiw	r24, 0x07	; 7
    1d78:	fc 01       	movw	r30, r24
    1d7a:	e2 0f       	add	r30, r18
    1d7c:	f3 1f       	adc	r31, r19
    1d7e:	80 81       	ld	r24, Z
    1d80:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <serial_write>
    i++;
    buf[i++] = '0'; 
  }   
  
  // Print the generated string.
  for (; i > 0; i--)
    1d84:	8d 81       	ldd	r24, Y+5	; 0x05
    1d86:	81 50       	subi	r24, 0x01	; 1
    1d88:	8d 83       	std	Y+5, r24	; 0x05
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8c:	88 23       	and	r24, r24
    1d8e:	61 f7       	brne	.-40     	; 0x1d68 <printFloat+0x1aa>
    serial_write(buf[i-1]);
}
    1d90:	64 96       	adiw	r28, 0x14	; 20
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	08 95       	ret

00001da6 <__subsf3>:
    1da6:	50 58       	subi	r21, 0x80	; 128

00001da8 <__addsf3>:
    1da8:	bb 27       	eor	r27, r27
    1daa:	aa 27       	eor	r26, r26
    1dac:	0e d0       	rcall	.+28     	; 0x1dca <__addsf3x>
    1dae:	75 c1       	rjmp	.+746    	; 0x209a <__fp_round>
    1db0:	66 d1       	rcall	.+716    	; 0x207e <__fp_pscA>
    1db2:	30 f0       	brcs	.+12     	; 0x1dc0 <__addsf3+0x18>
    1db4:	6b d1       	rcall	.+726    	; 0x208c <__fp_pscB>
    1db6:	20 f0       	brcs	.+8      	; 0x1dc0 <__addsf3+0x18>
    1db8:	31 f4       	brne	.+12     	; 0x1dc6 <__addsf3+0x1e>
    1dba:	9f 3f       	cpi	r25, 0xFF	; 255
    1dbc:	11 f4       	brne	.+4      	; 0x1dc2 <__addsf3+0x1a>
    1dbe:	1e f4       	brtc	.+6      	; 0x1dc6 <__addsf3+0x1e>
    1dc0:	5b c1       	rjmp	.+694    	; 0x2078 <__fp_nan>
    1dc2:	0e f4       	brtc	.+2      	; 0x1dc6 <__addsf3+0x1e>
    1dc4:	e0 95       	com	r30
    1dc6:	e7 fb       	bst	r30, 7
    1dc8:	51 c1       	rjmp	.+674    	; 0x206c <__fp_inf>

00001dca <__addsf3x>:
    1dca:	e9 2f       	mov	r30, r25
    1dcc:	77 d1       	rcall	.+750    	; 0x20bc <__fp_split3>
    1dce:	80 f3       	brcs	.-32     	; 0x1db0 <__addsf3+0x8>
    1dd0:	ba 17       	cp	r27, r26
    1dd2:	62 07       	cpc	r22, r18
    1dd4:	73 07       	cpc	r23, r19
    1dd6:	84 07       	cpc	r24, r20
    1dd8:	95 07       	cpc	r25, r21
    1dda:	18 f0       	brcs	.+6      	; 0x1de2 <__addsf3x+0x18>
    1ddc:	71 f4       	brne	.+28     	; 0x1dfa <__addsf3x+0x30>
    1dde:	9e f5       	brtc	.+102    	; 0x1e46 <__addsf3x+0x7c>
    1de0:	8f c1       	rjmp	.+798    	; 0x2100 <__fp_zero>
    1de2:	0e f4       	brtc	.+2      	; 0x1de6 <__addsf3x+0x1c>
    1de4:	e0 95       	com	r30
    1de6:	0b 2e       	mov	r0, r27
    1de8:	ba 2f       	mov	r27, r26
    1dea:	a0 2d       	mov	r26, r0
    1dec:	0b 01       	movw	r0, r22
    1dee:	b9 01       	movw	r22, r18
    1df0:	90 01       	movw	r18, r0
    1df2:	0c 01       	movw	r0, r24
    1df4:	ca 01       	movw	r24, r20
    1df6:	a0 01       	movw	r20, r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	ff 27       	eor	r31, r31
    1dfc:	59 1b       	sub	r21, r25
    1dfe:	99 f0       	breq	.+38     	; 0x1e26 <__addsf3x+0x5c>
    1e00:	59 3f       	cpi	r21, 0xF9	; 249
    1e02:	50 f4       	brcc	.+20     	; 0x1e18 <__addsf3x+0x4e>
    1e04:	50 3e       	cpi	r21, 0xE0	; 224
    1e06:	68 f1       	brcs	.+90     	; 0x1e62 <__addsf3x+0x98>
    1e08:	1a 16       	cp	r1, r26
    1e0a:	f0 40       	sbci	r31, 0x00	; 0
    1e0c:	a2 2f       	mov	r26, r18
    1e0e:	23 2f       	mov	r18, r19
    1e10:	34 2f       	mov	r19, r20
    1e12:	44 27       	eor	r20, r20
    1e14:	58 5f       	subi	r21, 0xF8	; 248
    1e16:	f3 cf       	rjmp	.-26     	; 0x1dfe <__addsf3x+0x34>
    1e18:	46 95       	lsr	r20
    1e1a:	37 95       	ror	r19
    1e1c:	27 95       	ror	r18
    1e1e:	a7 95       	ror	r26
    1e20:	f0 40       	sbci	r31, 0x00	; 0
    1e22:	53 95       	inc	r21
    1e24:	c9 f7       	brne	.-14     	; 0x1e18 <__addsf3x+0x4e>
    1e26:	7e f4       	brtc	.+30     	; 0x1e46 <__addsf3x+0x7c>
    1e28:	1f 16       	cp	r1, r31
    1e2a:	ba 0b       	sbc	r27, r26
    1e2c:	62 0b       	sbc	r22, r18
    1e2e:	73 0b       	sbc	r23, r19
    1e30:	84 0b       	sbc	r24, r20
    1e32:	ba f0       	brmi	.+46     	; 0x1e62 <__addsf3x+0x98>
    1e34:	91 50       	subi	r25, 0x01	; 1
    1e36:	a1 f0       	breq	.+40     	; 0x1e60 <__addsf3x+0x96>
    1e38:	ff 0f       	add	r31, r31
    1e3a:	bb 1f       	adc	r27, r27
    1e3c:	66 1f       	adc	r22, r22
    1e3e:	77 1f       	adc	r23, r23
    1e40:	88 1f       	adc	r24, r24
    1e42:	c2 f7       	brpl	.-16     	; 0x1e34 <__addsf3x+0x6a>
    1e44:	0e c0       	rjmp	.+28     	; 0x1e62 <__addsf3x+0x98>
    1e46:	ba 0f       	add	r27, r26
    1e48:	62 1f       	adc	r22, r18
    1e4a:	73 1f       	adc	r23, r19
    1e4c:	84 1f       	adc	r24, r20
    1e4e:	48 f4       	brcc	.+18     	; 0x1e62 <__addsf3x+0x98>
    1e50:	87 95       	ror	r24
    1e52:	77 95       	ror	r23
    1e54:	67 95       	ror	r22
    1e56:	b7 95       	ror	r27
    1e58:	f7 95       	ror	r31
    1e5a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e5c:	08 f0       	brcs	.+2      	; 0x1e60 <__addsf3x+0x96>
    1e5e:	b3 cf       	rjmp	.-154    	; 0x1dc6 <__addsf3+0x1e>
    1e60:	93 95       	inc	r25
    1e62:	88 0f       	add	r24, r24
    1e64:	08 f0       	brcs	.+2      	; 0x1e68 <__addsf3x+0x9e>
    1e66:	99 27       	eor	r25, r25
    1e68:	ee 0f       	add	r30, r30
    1e6a:	97 95       	ror	r25
    1e6c:	87 95       	ror	r24
    1e6e:	08 95       	ret

00001e70 <__cmpsf2>:
    1e70:	d9 d0       	rcall	.+434    	; 0x2024 <__fp_cmp>
    1e72:	08 f4       	brcc	.+2      	; 0x1e76 <__cmpsf2+0x6>
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	08 95       	ret

00001e78 <__divsf3>:
    1e78:	0c d0       	rcall	.+24     	; 0x1e92 <__divsf3x>
    1e7a:	0f c1       	rjmp	.+542    	; 0x209a <__fp_round>
    1e7c:	07 d1       	rcall	.+526    	; 0x208c <__fp_pscB>
    1e7e:	40 f0       	brcs	.+16     	; 0x1e90 <__divsf3+0x18>
    1e80:	fe d0       	rcall	.+508    	; 0x207e <__fp_pscA>
    1e82:	30 f0       	brcs	.+12     	; 0x1e90 <__divsf3+0x18>
    1e84:	21 f4       	brne	.+8      	; 0x1e8e <__divsf3+0x16>
    1e86:	5f 3f       	cpi	r21, 0xFF	; 255
    1e88:	19 f0       	breq	.+6      	; 0x1e90 <__divsf3+0x18>
    1e8a:	f0 c0       	rjmp	.+480    	; 0x206c <__fp_inf>
    1e8c:	51 11       	cpse	r21, r1
    1e8e:	39 c1       	rjmp	.+626    	; 0x2102 <__fp_szero>
    1e90:	f3 c0       	rjmp	.+486    	; 0x2078 <__fp_nan>

00001e92 <__divsf3x>:
    1e92:	14 d1       	rcall	.+552    	; 0x20bc <__fp_split3>
    1e94:	98 f3       	brcs	.-26     	; 0x1e7c <__divsf3+0x4>

00001e96 <__divsf3_pse>:
    1e96:	99 23       	and	r25, r25
    1e98:	c9 f3       	breq	.-14     	; 0x1e8c <__divsf3+0x14>
    1e9a:	55 23       	and	r21, r21
    1e9c:	b1 f3       	breq	.-20     	; 0x1e8a <__divsf3+0x12>
    1e9e:	95 1b       	sub	r25, r21
    1ea0:	55 0b       	sbc	r21, r21
    1ea2:	bb 27       	eor	r27, r27
    1ea4:	aa 27       	eor	r26, r26
    1ea6:	62 17       	cp	r22, r18
    1ea8:	73 07       	cpc	r23, r19
    1eaa:	84 07       	cpc	r24, r20
    1eac:	38 f0       	brcs	.+14     	; 0x1ebc <__divsf3_pse+0x26>
    1eae:	9f 5f       	subi	r25, 0xFF	; 255
    1eb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb2:	22 0f       	add	r18, r18
    1eb4:	33 1f       	adc	r19, r19
    1eb6:	44 1f       	adc	r20, r20
    1eb8:	aa 1f       	adc	r26, r26
    1eba:	a9 f3       	breq	.-22     	; 0x1ea6 <__divsf3_pse+0x10>
    1ebc:	33 d0       	rcall	.+102    	; 0x1f24 <__divsf3_pse+0x8e>
    1ebe:	0e 2e       	mov	r0, r30
    1ec0:	3a f0       	brmi	.+14     	; 0x1ed0 <__divsf3_pse+0x3a>
    1ec2:	e0 e8       	ldi	r30, 0x80	; 128
    1ec4:	30 d0       	rcall	.+96     	; 0x1f26 <__divsf3_pse+0x90>
    1ec6:	91 50       	subi	r25, 0x01	; 1
    1ec8:	50 40       	sbci	r21, 0x00	; 0
    1eca:	e6 95       	lsr	r30
    1ecc:	00 1c       	adc	r0, r0
    1ece:	ca f7       	brpl	.-14     	; 0x1ec2 <__divsf3_pse+0x2c>
    1ed0:	29 d0       	rcall	.+82     	; 0x1f24 <__divsf3_pse+0x8e>
    1ed2:	fe 2f       	mov	r31, r30
    1ed4:	27 d0       	rcall	.+78     	; 0x1f24 <__divsf3_pse+0x8e>
    1ed6:	66 0f       	add	r22, r22
    1ed8:	77 1f       	adc	r23, r23
    1eda:	88 1f       	adc	r24, r24
    1edc:	bb 1f       	adc	r27, r27
    1ede:	26 17       	cp	r18, r22
    1ee0:	37 07       	cpc	r19, r23
    1ee2:	48 07       	cpc	r20, r24
    1ee4:	ab 07       	cpc	r26, r27
    1ee6:	b0 e8       	ldi	r27, 0x80	; 128
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <__divsf3_pse+0x56>
    1eea:	bb 0b       	sbc	r27, r27
    1eec:	80 2d       	mov	r24, r0
    1eee:	bf 01       	movw	r22, r30
    1ef0:	ff 27       	eor	r31, r31
    1ef2:	93 58       	subi	r25, 0x83	; 131
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	2a f0       	brmi	.+10     	; 0x1f02 <__divsf3_pse+0x6c>
    1ef8:	9e 3f       	cpi	r25, 0xFE	; 254
    1efa:	51 05       	cpc	r21, r1
    1efc:	68 f0       	brcs	.+26     	; 0x1f18 <__divsf3_pse+0x82>
    1efe:	b6 c0       	rjmp	.+364    	; 0x206c <__fp_inf>
    1f00:	00 c1       	rjmp	.+512    	; 0x2102 <__fp_szero>
    1f02:	5f 3f       	cpi	r21, 0xFF	; 255
    1f04:	ec f3       	brlt	.-6      	; 0x1f00 <__divsf3_pse+0x6a>
    1f06:	98 3e       	cpi	r25, 0xE8	; 232
    1f08:	dc f3       	brlt	.-10     	; 0x1f00 <__divsf3_pse+0x6a>
    1f0a:	86 95       	lsr	r24
    1f0c:	77 95       	ror	r23
    1f0e:	67 95       	ror	r22
    1f10:	b7 95       	ror	r27
    1f12:	f7 95       	ror	r31
    1f14:	9f 5f       	subi	r25, 0xFF	; 255
    1f16:	c9 f7       	brne	.-14     	; 0x1f0a <__divsf3_pse+0x74>
    1f18:	88 0f       	add	r24, r24
    1f1a:	91 1d       	adc	r25, r1
    1f1c:	96 95       	lsr	r25
    1f1e:	87 95       	ror	r24
    1f20:	97 f9       	bld	r25, 7
    1f22:	08 95       	ret
    1f24:	e1 e0       	ldi	r30, 0x01	; 1
    1f26:	66 0f       	add	r22, r22
    1f28:	77 1f       	adc	r23, r23
    1f2a:	88 1f       	adc	r24, r24
    1f2c:	bb 1f       	adc	r27, r27
    1f2e:	62 17       	cp	r22, r18
    1f30:	73 07       	cpc	r23, r19
    1f32:	84 07       	cpc	r24, r20
    1f34:	ba 07       	cpc	r27, r26
    1f36:	20 f0       	brcs	.+8      	; 0x1f40 <__divsf3_pse+0xaa>
    1f38:	62 1b       	sub	r22, r18
    1f3a:	73 0b       	sbc	r23, r19
    1f3c:	84 0b       	sbc	r24, r20
    1f3e:	ba 0b       	sbc	r27, r26
    1f40:	ee 1f       	adc	r30, r30
    1f42:	88 f7       	brcc	.-30     	; 0x1f26 <__divsf3_pse+0x90>
    1f44:	e0 95       	com	r30
    1f46:	08 95       	ret

00001f48 <__fixsfsi>:
    1f48:	04 d0       	rcall	.+8      	; 0x1f52 <__fixunssfsi>
    1f4a:	68 94       	set
    1f4c:	b1 11       	cpse	r27, r1
    1f4e:	d9 c0       	rjmp	.+434    	; 0x2102 <__fp_szero>
    1f50:	08 95       	ret

00001f52 <__fixunssfsi>:
    1f52:	bc d0       	rcall	.+376    	; 0x20cc <__fp_splitA>
    1f54:	88 f0       	brcs	.+34     	; 0x1f78 <__fixunssfsi+0x26>
    1f56:	9f 57       	subi	r25, 0x7F	; 127
    1f58:	90 f0       	brcs	.+36     	; 0x1f7e <__fixunssfsi+0x2c>
    1f5a:	b9 2f       	mov	r27, r25
    1f5c:	99 27       	eor	r25, r25
    1f5e:	b7 51       	subi	r27, 0x17	; 23
    1f60:	a0 f0       	brcs	.+40     	; 0x1f8a <__fixunssfsi+0x38>
    1f62:	d1 f0       	breq	.+52     	; 0x1f98 <__fixunssfsi+0x46>
    1f64:	66 0f       	add	r22, r22
    1f66:	77 1f       	adc	r23, r23
    1f68:	88 1f       	adc	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	1a f0       	brmi	.+6      	; 0x1f74 <__fixunssfsi+0x22>
    1f6e:	ba 95       	dec	r27
    1f70:	c9 f7       	brne	.-14     	; 0x1f64 <__fixunssfsi+0x12>
    1f72:	12 c0       	rjmp	.+36     	; 0x1f98 <__fixunssfsi+0x46>
    1f74:	b1 30       	cpi	r27, 0x01	; 1
    1f76:	81 f0       	breq	.+32     	; 0x1f98 <__fixunssfsi+0x46>
    1f78:	c3 d0       	rcall	.+390    	; 0x2100 <__fp_zero>
    1f7a:	b1 e0       	ldi	r27, 0x01	; 1
    1f7c:	08 95       	ret
    1f7e:	c0 c0       	rjmp	.+384    	; 0x2100 <__fp_zero>
    1f80:	67 2f       	mov	r22, r23
    1f82:	78 2f       	mov	r23, r24
    1f84:	88 27       	eor	r24, r24
    1f86:	b8 5f       	subi	r27, 0xF8	; 248
    1f88:	39 f0       	breq	.+14     	; 0x1f98 <__fixunssfsi+0x46>
    1f8a:	b9 3f       	cpi	r27, 0xF9	; 249
    1f8c:	cc f3       	brlt	.-14     	; 0x1f80 <__fixunssfsi+0x2e>
    1f8e:	86 95       	lsr	r24
    1f90:	77 95       	ror	r23
    1f92:	67 95       	ror	r22
    1f94:	b3 95       	inc	r27
    1f96:	d9 f7       	brne	.-10     	; 0x1f8e <__fixunssfsi+0x3c>
    1f98:	3e f4       	brtc	.+14     	; 0x1fa8 <__fixunssfsi+0x56>
    1f9a:	90 95       	com	r25
    1f9c:	80 95       	com	r24
    1f9e:	70 95       	com	r23
    1fa0:	61 95       	neg	r22
    1fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa8:	08 95       	ret

00001faa <__floatunsisf>:
    1faa:	e8 94       	clt
    1fac:	09 c0       	rjmp	.+18     	; 0x1fc0 <__floatsisf+0x12>

00001fae <__floatsisf>:
    1fae:	97 fb       	bst	r25, 7
    1fb0:	3e f4       	brtc	.+14     	; 0x1fc0 <__floatsisf+0x12>
    1fb2:	90 95       	com	r25
    1fb4:	80 95       	com	r24
    1fb6:	70 95       	com	r23
    1fb8:	61 95       	neg	r22
    1fba:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc0:	99 23       	and	r25, r25
    1fc2:	a9 f0       	breq	.+42     	; 0x1fee <__floatsisf+0x40>
    1fc4:	f9 2f       	mov	r31, r25
    1fc6:	96 e9       	ldi	r25, 0x96	; 150
    1fc8:	bb 27       	eor	r27, r27
    1fca:	93 95       	inc	r25
    1fcc:	f6 95       	lsr	r31
    1fce:	87 95       	ror	r24
    1fd0:	77 95       	ror	r23
    1fd2:	67 95       	ror	r22
    1fd4:	b7 95       	ror	r27
    1fd6:	f1 11       	cpse	r31, r1
    1fd8:	f8 cf       	rjmp	.-16     	; 0x1fca <__floatsisf+0x1c>
    1fda:	fa f4       	brpl	.+62     	; 0x201a <__floatsisf+0x6c>
    1fdc:	bb 0f       	add	r27, r27
    1fde:	11 f4       	brne	.+4      	; 0x1fe4 <__floatsisf+0x36>
    1fe0:	60 ff       	sbrs	r22, 0
    1fe2:	1b c0       	rjmp	.+54     	; 0x201a <__floatsisf+0x6c>
    1fe4:	6f 5f       	subi	r22, 0xFF	; 255
    1fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fea:	9f 4f       	sbci	r25, 0xFF	; 255
    1fec:	16 c0       	rjmp	.+44     	; 0x201a <__floatsisf+0x6c>
    1fee:	88 23       	and	r24, r24
    1ff0:	11 f0       	breq	.+4      	; 0x1ff6 <__floatsisf+0x48>
    1ff2:	96 e9       	ldi	r25, 0x96	; 150
    1ff4:	11 c0       	rjmp	.+34     	; 0x2018 <__floatsisf+0x6a>
    1ff6:	77 23       	and	r23, r23
    1ff8:	21 f0       	breq	.+8      	; 0x2002 <__floatsisf+0x54>
    1ffa:	9e e8       	ldi	r25, 0x8E	; 142
    1ffc:	87 2f       	mov	r24, r23
    1ffe:	76 2f       	mov	r23, r22
    2000:	05 c0       	rjmp	.+10     	; 0x200c <__floatsisf+0x5e>
    2002:	66 23       	and	r22, r22
    2004:	71 f0       	breq	.+28     	; 0x2022 <__floatsisf+0x74>
    2006:	96 e8       	ldi	r25, 0x86	; 134
    2008:	86 2f       	mov	r24, r22
    200a:	70 e0       	ldi	r23, 0x00	; 0
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	2a f0       	brmi	.+10     	; 0x201a <__floatsisf+0x6c>
    2010:	9a 95       	dec	r25
    2012:	66 0f       	add	r22, r22
    2014:	77 1f       	adc	r23, r23
    2016:	88 1f       	adc	r24, r24
    2018:	da f7       	brpl	.-10     	; 0x2010 <__floatsisf+0x62>
    201a:	88 0f       	add	r24, r24
    201c:	96 95       	lsr	r25
    201e:	87 95       	ror	r24
    2020:	97 f9       	bld	r25, 7
    2022:	08 95       	ret

00002024 <__fp_cmp>:
    2024:	99 0f       	add	r25, r25
    2026:	00 08       	sbc	r0, r0
    2028:	55 0f       	add	r21, r21
    202a:	aa 0b       	sbc	r26, r26
    202c:	e0 e8       	ldi	r30, 0x80	; 128
    202e:	fe ef       	ldi	r31, 0xFE	; 254
    2030:	16 16       	cp	r1, r22
    2032:	17 06       	cpc	r1, r23
    2034:	e8 07       	cpc	r30, r24
    2036:	f9 07       	cpc	r31, r25
    2038:	c0 f0       	brcs	.+48     	; 0x206a <__fp_cmp+0x46>
    203a:	12 16       	cp	r1, r18
    203c:	13 06       	cpc	r1, r19
    203e:	e4 07       	cpc	r30, r20
    2040:	f5 07       	cpc	r31, r21
    2042:	98 f0       	brcs	.+38     	; 0x206a <__fp_cmp+0x46>
    2044:	62 1b       	sub	r22, r18
    2046:	73 0b       	sbc	r23, r19
    2048:	84 0b       	sbc	r24, r20
    204a:	95 0b       	sbc	r25, r21
    204c:	39 f4       	brne	.+14     	; 0x205c <__fp_cmp+0x38>
    204e:	0a 26       	eor	r0, r26
    2050:	61 f0       	breq	.+24     	; 0x206a <__fp_cmp+0x46>
    2052:	23 2b       	or	r18, r19
    2054:	24 2b       	or	r18, r20
    2056:	25 2b       	or	r18, r21
    2058:	21 f4       	brne	.+8      	; 0x2062 <__fp_cmp+0x3e>
    205a:	08 95       	ret
    205c:	0a 26       	eor	r0, r26
    205e:	09 f4       	brne	.+2      	; 0x2062 <__fp_cmp+0x3e>
    2060:	a1 40       	sbci	r26, 0x01	; 1
    2062:	a6 95       	lsr	r26
    2064:	8f ef       	ldi	r24, 0xFF	; 255
    2066:	81 1d       	adc	r24, r1
    2068:	81 1d       	adc	r24, r1
    206a:	08 95       	ret

0000206c <__fp_inf>:
    206c:	97 f9       	bld	r25, 7
    206e:	9f 67       	ori	r25, 0x7F	; 127
    2070:	80 e8       	ldi	r24, 0x80	; 128
    2072:	70 e0       	ldi	r23, 0x00	; 0
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	08 95       	ret

00002078 <__fp_nan>:
    2078:	9f ef       	ldi	r25, 0xFF	; 255
    207a:	80 ec       	ldi	r24, 0xC0	; 192
    207c:	08 95       	ret

0000207e <__fp_pscA>:
    207e:	00 24       	eor	r0, r0
    2080:	0a 94       	dec	r0
    2082:	16 16       	cp	r1, r22
    2084:	17 06       	cpc	r1, r23
    2086:	18 06       	cpc	r1, r24
    2088:	09 06       	cpc	r0, r25
    208a:	08 95       	ret

0000208c <__fp_pscB>:
    208c:	00 24       	eor	r0, r0
    208e:	0a 94       	dec	r0
    2090:	12 16       	cp	r1, r18
    2092:	13 06       	cpc	r1, r19
    2094:	14 06       	cpc	r1, r20
    2096:	05 06       	cpc	r0, r21
    2098:	08 95       	ret

0000209a <__fp_round>:
    209a:	09 2e       	mov	r0, r25
    209c:	03 94       	inc	r0
    209e:	00 0c       	add	r0, r0
    20a0:	11 f4       	brne	.+4      	; 0x20a6 <__fp_round+0xc>
    20a2:	88 23       	and	r24, r24
    20a4:	52 f0       	brmi	.+20     	; 0x20ba <__fp_round+0x20>
    20a6:	bb 0f       	add	r27, r27
    20a8:	40 f4       	brcc	.+16     	; 0x20ba <__fp_round+0x20>
    20aa:	bf 2b       	or	r27, r31
    20ac:	11 f4       	brne	.+4      	; 0x20b2 <__fp_round+0x18>
    20ae:	60 ff       	sbrs	r22, 0
    20b0:	04 c0       	rjmp	.+8      	; 0x20ba <__fp_round+0x20>
    20b2:	6f 5f       	subi	r22, 0xFF	; 255
    20b4:	7f 4f       	sbci	r23, 0xFF	; 255
    20b6:	8f 4f       	sbci	r24, 0xFF	; 255
    20b8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ba:	08 95       	ret

000020bc <__fp_split3>:
    20bc:	57 fd       	sbrc	r21, 7
    20be:	90 58       	subi	r25, 0x80	; 128
    20c0:	44 0f       	add	r20, r20
    20c2:	55 1f       	adc	r21, r21
    20c4:	59 f0       	breq	.+22     	; 0x20dc <__fp_splitA+0x10>
    20c6:	5f 3f       	cpi	r21, 0xFF	; 255
    20c8:	71 f0       	breq	.+28     	; 0x20e6 <__fp_splitA+0x1a>
    20ca:	47 95       	ror	r20

000020cc <__fp_splitA>:
    20cc:	88 0f       	add	r24, r24
    20ce:	97 fb       	bst	r25, 7
    20d0:	99 1f       	adc	r25, r25
    20d2:	61 f0       	breq	.+24     	; 0x20ec <__fp_splitA+0x20>
    20d4:	9f 3f       	cpi	r25, 0xFF	; 255
    20d6:	79 f0       	breq	.+30     	; 0x20f6 <__fp_splitA+0x2a>
    20d8:	87 95       	ror	r24
    20da:	08 95       	ret
    20dc:	12 16       	cp	r1, r18
    20de:	13 06       	cpc	r1, r19
    20e0:	14 06       	cpc	r1, r20
    20e2:	55 1f       	adc	r21, r21
    20e4:	f2 cf       	rjmp	.-28     	; 0x20ca <__fp_split3+0xe>
    20e6:	46 95       	lsr	r20
    20e8:	f1 df       	rcall	.-30     	; 0x20cc <__fp_splitA>
    20ea:	08 c0       	rjmp	.+16     	; 0x20fc <__fp_splitA+0x30>
    20ec:	16 16       	cp	r1, r22
    20ee:	17 06       	cpc	r1, r23
    20f0:	18 06       	cpc	r1, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	f1 cf       	rjmp	.-30     	; 0x20d8 <__fp_splitA+0xc>
    20f6:	86 95       	lsr	r24
    20f8:	71 05       	cpc	r23, r1
    20fa:	61 05       	cpc	r22, r1
    20fc:	08 94       	sec
    20fe:	08 95       	ret

00002100 <__fp_zero>:
    2100:	e8 94       	clt

00002102 <__fp_szero>:
    2102:	bb 27       	eor	r27, r27
    2104:	66 27       	eor	r22, r22
    2106:	77 27       	eor	r23, r23
    2108:	cb 01       	movw	r24, r22
    210a:	97 f9       	bld	r25, 7
    210c:	08 95       	ret

0000210e <__gesf2>:
    210e:	8a df       	rcall	.-236    	; 0x2024 <__fp_cmp>
    2110:	08 f4       	brcc	.+2      	; 0x2114 <__gesf2+0x6>
    2112:	8f ef       	ldi	r24, 0xFF	; 255
    2114:	08 95       	ret

00002116 <__mulsf3>:
    2116:	0b d0       	rcall	.+22     	; 0x212e <__mulsf3x>
    2118:	c0 cf       	rjmp	.-128    	; 0x209a <__fp_round>
    211a:	b1 df       	rcall	.-158    	; 0x207e <__fp_pscA>
    211c:	28 f0       	brcs	.+10     	; 0x2128 <__mulsf3+0x12>
    211e:	b6 df       	rcall	.-148    	; 0x208c <__fp_pscB>
    2120:	18 f0       	brcs	.+6      	; 0x2128 <__mulsf3+0x12>
    2122:	95 23       	and	r25, r21
    2124:	09 f0       	breq	.+2      	; 0x2128 <__mulsf3+0x12>
    2126:	a2 cf       	rjmp	.-188    	; 0x206c <__fp_inf>
    2128:	a7 cf       	rjmp	.-178    	; 0x2078 <__fp_nan>
    212a:	11 24       	eor	r1, r1
    212c:	ea cf       	rjmp	.-44     	; 0x2102 <__fp_szero>

0000212e <__mulsf3x>:
    212e:	c6 df       	rcall	.-116    	; 0x20bc <__fp_split3>
    2130:	a0 f3       	brcs	.-24     	; 0x211a <__mulsf3+0x4>

00002132 <__mulsf3_pse>:
    2132:	95 9f       	mul	r25, r21
    2134:	d1 f3       	breq	.-12     	; 0x212a <__mulsf3+0x14>
    2136:	95 0f       	add	r25, r21
    2138:	50 e0       	ldi	r21, 0x00	; 0
    213a:	55 1f       	adc	r21, r21
    213c:	62 9f       	mul	r22, r18
    213e:	f0 01       	movw	r30, r0
    2140:	72 9f       	mul	r23, r18
    2142:	bb 27       	eor	r27, r27
    2144:	f0 0d       	add	r31, r0
    2146:	b1 1d       	adc	r27, r1
    2148:	63 9f       	mul	r22, r19
    214a:	aa 27       	eor	r26, r26
    214c:	f0 0d       	add	r31, r0
    214e:	b1 1d       	adc	r27, r1
    2150:	aa 1f       	adc	r26, r26
    2152:	64 9f       	mul	r22, r20
    2154:	66 27       	eor	r22, r22
    2156:	b0 0d       	add	r27, r0
    2158:	a1 1d       	adc	r26, r1
    215a:	66 1f       	adc	r22, r22
    215c:	82 9f       	mul	r24, r18
    215e:	22 27       	eor	r18, r18
    2160:	b0 0d       	add	r27, r0
    2162:	a1 1d       	adc	r26, r1
    2164:	62 1f       	adc	r22, r18
    2166:	73 9f       	mul	r23, r19
    2168:	b0 0d       	add	r27, r0
    216a:	a1 1d       	adc	r26, r1
    216c:	62 1f       	adc	r22, r18
    216e:	83 9f       	mul	r24, r19
    2170:	a0 0d       	add	r26, r0
    2172:	61 1d       	adc	r22, r1
    2174:	22 1f       	adc	r18, r18
    2176:	74 9f       	mul	r23, r20
    2178:	33 27       	eor	r19, r19
    217a:	a0 0d       	add	r26, r0
    217c:	61 1d       	adc	r22, r1
    217e:	23 1f       	adc	r18, r19
    2180:	84 9f       	mul	r24, r20
    2182:	60 0d       	add	r22, r0
    2184:	21 1d       	adc	r18, r1
    2186:	82 2f       	mov	r24, r18
    2188:	76 2f       	mov	r23, r22
    218a:	6a 2f       	mov	r22, r26
    218c:	11 24       	eor	r1, r1
    218e:	9f 57       	subi	r25, 0x7F	; 127
    2190:	50 40       	sbci	r21, 0x00	; 0
    2192:	8a f0       	brmi	.+34     	; 0x21b6 <__mulsf3_pse+0x84>
    2194:	e1 f0       	breq	.+56     	; 0x21ce <__mulsf3_pse+0x9c>
    2196:	88 23       	and	r24, r24
    2198:	4a f0       	brmi	.+18     	; 0x21ac <__mulsf3_pse+0x7a>
    219a:	ee 0f       	add	r30, r30
    219c:	ff 1f       	adc	r31, r31
    219e:	bb 1f       	adc	r27, r27
    21a0:	66 1f       	adc	r22, r22
    21a2:	77 1f       	adc	r23, r23
    21a4:	88 1f       	adc	r24, r24
    21a6:	91 50       	subi	r25, 0x01	; 1
    21a8:	50 40       	sbci	r21, 0x00	; 0
    21aa:	a9 f7       	brne	.-22     	; 0x2196 <__mulsf3_pse+0x64>
    21ac:	9e 3f       	cpi	r25, 0xFE	; 254
    21ae:	51 05       	cpc	r21, r1
    21b0:	70 f0       	brcs	.+28     	; 0x21ce <__mulsf3_pse+0x9c>
    21b2:	5c cf       	rjmp	.-328    	; 0x206c <__fp_inf>
    21b4:	a6 cf       	rjmp	.-180    	; 0x2102 <__fp_szero>
    21b6:	5f 3f       	cpi	r21, 0xFF	; 255
    21b8:	ec f3       	brlt	.-6      	; 0x21b4 <__mulsf3_pse+0x82>
    21ba:	98 3e       	cpi	r25, 0xE8	; 232
    21bc:	dc f3       	brlt	.-10     	; 0x21b4 <__mulsf3_pse+0x82>
    21be:	86 95       	lsr	r24
    21c0:	77 95       	ror	r23
    21c2:	67 95       	ror	r22
    21c4:	b7 95       	ror	r27
    21c6:	f7 95       	ror	r31
    21c8:	e7 95       	ror	r30
    21ca:	9f 5f       	subi	r25, 0xFF	; 255
    21cc:	c1 f7       	brne	.-16     	; 0x21be <__mulsf3_pse+0x8c>
    21ce:	fe 2b       	or	r31, r30
    21d0:	88 0f       	add	r24, r24
    21d2:	91 1d       	adc	r25, r1
    21d4:	96 95       	lsr	r25
    21d6:	87 95       	ror	r24
    21d8:	97 f9       	bld	r25, 7
    21da:	08 95       	ret
    21dc:	11 f4       	brne	.+4      	; 0x21e2 <__mulsf3_pse+0xb0>
    21de:	0e f4       	brtc	.+2      	; 0x21e2 <__mulsf3_pse+0xb0>
    21e0:	4b cf       	rjmp	.-362    	; 0x2078 <__fp_nan>
    21e2:	41 c0       	rjmp	.+130    	; 0x2266 <__fp_mpack>

000021e4 <sqrt>:
    21e4:	73 df       	rcall	.-282    	; 0x20cc <__fp_splitA>
    21e6:	d0 f3       	brcs	.-12     	; 0x21dc <__mulsf3_pse+0xaa>
    21e8:	99 23       	and	r25, r25
    21ea:	d9 f3       	breq	.-10     	; 0x21e2 <__mulsf3_pse+0xb0>
    21ec:	ce f3       	brts	.-14     	; 0x21e0 <__mulsf3_pse+0xae>
    21ee:	9f 57       	subi	r25, 0x7F	; 127
    21f0:	55 0b       	sbc	r21, r21
    21f2:	87 ff       	sbrs	r24, 7
    21f4:	46 d0       	rcall	.+140    	; 0x2282 <__fp_norm2>
    21f6:	00 24       	eor	r0, r0
    21f8:	a0 e6       	ldi	r26, 0x60	; 96
    21fa:	40 ea       	ldi	r20, 0xA0	; 160
    21fc:	90 01       	movw	r18, r0
    21fe:	80 58       	subi	r24, 0x80	; 128
    2200:	56 95       	lsr	r21
    2202:	97 95       	ror	r25
    2204:	28 f4       	brcc	.+10     	; 0x2210 <sqrt+0x2c>
    2206:	80 5c       	subi	r24, 0xC0	; 192
    2208:	66 0f       	add	r22, r22
    220a:	77 1f       	adc	r23, r23
    220c:	88 1f       	adc	r24, r24
    220e:	20 f0       	brcs	.+8      	; 0x2218 <sqrt+0x34>
    2210:	26 17       	cp	r18, r22
    2212:	37 07       	cpc	r19, r23
    2214:	48 07       	cpc	r20, r24
    2216:	30 f4       	brcc	.+12     	; 0x2224 <sqrt+0x40>
    2218:	62 1b       	sub	r22, r18
    221a:	73 0b       	sbc	r23, r19
    221c:	84 0b       	sbc	r24, r20
    221e:	20 29       	or	r18, r0
    2220:	31 29       	or	r19, r1
    2222:	4a 2b       	or	r20, r26
    2224:	a6 95       	lsr	r26
    2226:	17 94       	ror	r1
    2228:	07 94       	ror	r0
    222a:	20 25       	eor	r18, r0
    222c:	31 25       	eor	r19, r1
    222e:	4a 27       	eor	r20, r26
    2230:	58 f7       	brcc	.-42     	; 0x2208 <sqrt+0x24>
    2232:	66 0f       	add	r22, r22
    2234:	77 1f       	adc	r23, r23
    2236:	88 1f       	adc	r24, r24
    2238:	20 f0       	brcs	.+8      	; 0x2242 <sqrt+0x5e>
    223a:	26 17       	cp	r18, r22
    223c:	37 07       	cpc	r19, r23
    223e:	48 07       	cpc	r20, r24
    2240:	30 f4       	brcc	.+12     	; 0x224e <sqrt+0x6a>
    2242:	62 0b       	sbc	r22, r18
    2244:	73 0b       	sbc	r23, r19
    2246:	84 0b       	sbc	r24, r20
    2248:	20 0d       	add	r18, r0
    224a:	31 1d       	adc	r19, r1
    224c:	41 1d       	adc	r20, r1
    224e:	a0 95       	com	r26
    2250:	81 f7       	brne	.-32     	; 0x2232 <sqrt+0x4e>
    2252:	b9 01       	movw	r22, r18
    2254:	84 2f       	mov	r24, r20
    2256:	91 58       	subi	r25, 0x81	; 129
    2258:	88 0f       	add	r24, r24
    225a:	96 95       	lsr	r25
    225c:	87 95       	ror	r24
    225e:	08 95       	ret

00002260 <square>:
    2260:	9b 01       	movw	r18, r22
    2262:	ac 01       	movw	r20, r24
    2264:	58 cf       	rjmp	.-336    	; 0x2116 <__mulsf3>

00002266 <__fp_mpack>:
    2266:	9f 3f       	cpi	r25, 0xFF	; 255
    2268:	31 f0       	breq	.+12     	; 0x2276 <__fp_mpack_finite+0xc>

0000226a <__fp_mpack_finite>:
    226a:	91 50       	subi	r25, 0x01	; 1
    226c:	20 f4       	brcc	.+8      	; 0x2276 <__fp_mpack_finite+0xc>
    226e:	87 95       	ror	r24
    2270:	77 95       	ror	r23
    2272:	67 95       	ror	r22
    2274:	b7 95       	ror	r27
    2276:	88 0f       	add	r24, r24
    2278:	91 1d       	adc	r25, r1
    227a:	96 95       	lsr	r25
    227c:	87 95       	ror	r24
    227e:	97 f9       	bld	r25, 7
    2280:	08 95       	ret

00002282 <__fp_norm2>:
    2282:	91 50       	subi	r25, 0x01	; 1
    2284:	50 40       	sbci	r21, 0x00	; 0
    2286:	66 0f       	add	r22, r22
    2288:	77 1f       	adc	r23, r23
    228a:	88 1f       	adc	r24, r24
    228c:	d2 f7       	brpl	.-12     	; 0x2282 <__fp_norm2>
    228e:	08 95       	ret

00002290 <__udivmodsi4>:
    2290:	a1 e2       	ldi	r26, 0x21	; 33
    2292:	1a 2e       	mov	r1, r26
    2294:	aa 1b       	sub	r26, r26
    2296:	bb 1b       	sub	r27, r27
    2298:	fd 01       	movw	r30, r26
    229a:	0d c0       	rjmp	.+26     	; 0x22b6 <__udivmodsi4_ep>

0000229c <__udivmodsi4_loop>:
    229c:	aa 1f       	adc	r26, r26
    229e:	bb 1f       	adc	r27, r27
    22a0:	ee 1f       	adc	r30, r30
    22a2:	ff 1f       	adc	r31, r31
    22a4:	a2 17       	cp	r26, r18
    22a6:	b3 07       	cpc	r27, r19
    22a8:	e4 07       	cpc	r30, r20
    22aa:	f5 07       	cpc	r31, r21
    22ac:	20 f0       	brcs	.+8      	; 0x22b6 <__udivmodsi4_ep>
    22ae:	a2 1b       	sub	r26, r18
    22b0:	b3 0b       	sbc	r27, r19
    22b2:	e4 0b       	sbc	r30, r20
    22b4:	f5 0b       	sbc	r31, r21

000022b6 <__udivmodsi4_ep>:
    22b6:	66 1f       	adc	r22, r22
    22b8:	77 1f       	adc	r23, r23
    22ba:	88 1f       	adc	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	1a 94       	dec	r1
    22c0:	69 f7       	brne	.-38     	; 0x229c <__udivmodsi4_loop>
    22c2:	60 95       	com	r22
    22c4:	70 95       	com	r23
    22c6:	80 95       	com	r24
    22c8:	90 95       	com	r25
    22ca:	9b 01       	movw	r18, r22
    22cc:	ac 01       	movw	r20, r24
    22ce:	bd 01       	movw	r22, r26
    22d0:	cf 01       	movw	r24, r30
    22d2:	08 95       	ret

000022d4 <memset>:
    22d4:	dc 01       	movw	r26, r24
    22d6:	01 c0       	rjmp	.+2      	; 0x22da <memset+0x6>
    22d8:	6d 93       	st	X+, r22
    22da:	41 50       	subi	r20, 0x01	; 1
    22dc:	50 40       	sbci	r21, 0x00	; 0
    22de:	e0 f7       	brcc	.-8      	; 0x22d8 <memset+0x4>
    22e0:	08 95       	ret

000022e2 <_exit>:
    22e2:	f8 94       	cli

000022e4 <__stop_program>:
    22e4:	ff cf       	rjmp	.-2      	; 0x22e4 <__stop_program>
