
tinyg_tc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000002c5  00800100  00800100  0000236e  2**0
                  ALLOC
  2 .debug_aranges 000000e0  00000000  00000000  0000236e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000515  00000000  00000000  0000244e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001b00  00000000  00000000  00002963  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000007b5  00000000  00000000  00004463  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001215  00000000  00000000  00004c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000440  00000000  00000000  00005e30  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000a87  00000000  00000000  00006270  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
       4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__vector_16>
      44:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__vector_17>
      48:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__vector_18>
      4c:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__vector_19>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>

00000068 <__c.1893>:
      68:	0a 44 65 76 69 63 65 20 49 6e 69 74 69 61 6c 69     .Device Initiali
      78:	7a 65 64 0a 00                                      zed..

0000007d <__c.1901>:
      7d:	0a 00                                               ..

0000007f <__c.1899>:
      7f:	20 20 50 49 44 3a 20 00                               PID: .

00000087 <__c.1897>:
      87:	54 65 6d 70 3a 20 00                                Temp: .

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d8 e0       	ldi	r29, 0x08	; 8
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_clear_bss>:
      9a:	13 e0       	ldi	r17, 0x03	; 3
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	a5 3c       	cpi	r26, 0xC5	; 197
      a6:	b1 07       	cpc	r27, r17
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
      aa:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
      ae:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <main>:
 *
 *	Device and Kinen initialization
 *	Main loop handler
 */
int main(void)
{
      b6:	df 93       	push	r29
      b8:	cf 93       	push	r28
      ba:	cd b7       	in	r28, 0x3d	; 61
      bc:	de b7       	in	r29, 0x3e	; 62
	cli();						// initializations
      be:	f8 94       	cli
	kinen_init();				// do this first
      c0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <kinen_init>
	device_init();				// handles all the low-level device peripheral inits
      c4:	0e 94 79 00 	call	0xf2	; 0xf2 <device_init>

	while (true) { 
		_pwm_bit_hi(); 
      c8:	0e 94 91 00 	call	0x122	; 0x122 <_pwm_bit_hi>
		_pwm_bit_hi(); 
      cc:	0e 94 91 00 	call	0x122	; 0x122 <_pwm_bit_hi>
		_pwm_bit_hi(); 
      d0:	0e 94 91 00 	call	0x122	; 0x122 <_pwm_bit_hi>
		_pwm_bit_hi(); 
      d4:	0e 94 91 00 	call	0x122	; 0x122 <_pwm_bit_hi>
		_pwm_bit_hi(); 
      d8:	0e 94 91 00 	call	0x122	; 0x122 <_pwm_bit_hi>

		_pwm_bit_lo(); 
      dc:	0e 94 9f 00 	call	0x13e	; 0x13e <_pwm_bit_lo>
		_pwm_bit_lo(); 
      e0:	0e 94 9f 00 	call	0x13e	; 0x13e <_pwm_bit_lo>
		_pwm_bit_lo(); 
      e4:	0e 94 9f 00 	call	0x13e	; 0x13e <_pwm_bit_lo>
		_pwm_bit_lo(); 
      e8:	0e 94 9f 00 	call	0x13e	; 0x13e <_pwm_bit_lo>
		_pwm_bit_lo(); 
      ec:	0e 94 9f 00 	call	0x13e	; 0x13e <_pwm_bit_lo>
      f0:	eb cf       	rjmp	.-42     	; 0xc8 <main+0x12>

000000f2 <device_init>:

/*
 * Device Init 
 */
void device_init(void)
{
      f2:	df 93       	push	r29
      f4:	cf 93       	push	r28
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
	DDRB = PORTB_DIR;			// initialize all ports for proper IO function
      fa:	e4 e2       	ldi	r30, 0x24	; 36
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	80 e1       	ldi	r24, 0x10	; 16
     100:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
     102:	e7 e2       	ldi	r30, 0x27	; 39
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
     108:	ea e2       	ldi	r30, 0x2A	; 42
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	8c e0       	ldi	r24, 0x0C	; 12
     10e:	80 83       	st	Z, r24

	tick_init();
     110:	0e 94 7d 08 	call	0x10fa	; 0x10fa <tick_init>
//	pwm_init();
	adc_init();
     114:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <adc_init>

	led_off();					// put off the red light [~Sting, 1978]
     118:	0e 94 13 09 	call	0x1226	; 0x1226 <led_off>
}
     11c:	cf 91       	pop	r28
     11e:	df 91       	pop	r29
     120:	08 95       	ret

00000122 <_pwm_bit_hi>:
 * _pwm_bit_hi()
 * _pwm_bit_lo()
 */

void _pwm_bit_hi(void) 
{
     122:	df 93       	push	r29
     124:	cf 93       	push	r28
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
	PWM_PORT |= PWM_OUTB;
     12a:	ab e2       	ldi	r26, 0x2B	; 43
     12c:	b0 e0       	ldi	r27, 0x00	; 0
     12e:	eb e2       	ldi	r30, 0x2B	; 43
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	80 81       	ld	r24, Z
     134:	88 60       	ori	r24, 0x08	; 8
     136:	8c 93       	st	X, r24
}
     138:	cf 91       	pop	r28
     13a:	df 91       	pop	r29
     13c:	08 95       	ret

0000013e <_pwm_bit_lo>:

void _pwm_bit_lo(void) 
{
     13e:	df 93       	push	r29
     140:	cf 93       	push	r28
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
	PWM_PORT &= ~(PWM_OUTB);
     146:	ab e2       	ldi	r26, 0x2B	; 43
     148:	b0 e0       	ldi	r27, 0x00	; 0
     14a:	eb e2       	ldi	r30, 0x2B	; 43
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	80 81       	ld	r24, Z
     150:	87 7f       	andi	r24, 0xF7	; 247
     152:	8c 93       	st	X, r24
}
     154:	cf 91       	pop	r28
     156:	df 91       	pop	r29
     158:	08 95       	ret

0000015a <_controller>:
 *	start of the list. For any other status code exceution continues down the list
 */

#define	DISPATCH(func) if (func == SC_EAGAIN) return; 
static void _controller()
{
     15a:	df 93       	push	r29
     15c:	cf 93       	push	r28
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
	DISPATCH(kinen_callback());		// intercept low-level communication events
     162:	0e 94 88 09 	call	0x1310	; 0x1310 <kinen_callback>
     166:	82 30       	cpi	r24, 0x02	; 2
     168:	11 f0       	breq	.+4      	; 0x16e <_controller+0x14>
	DISPATCH(tick_callback());		// regular interval timer clock handler (ticks)
     16a:	0e 94 b6 08 	call	0x116c	; 0x116c <tick_callback>
}
     16e:	cf 91       	pop	r28
     170:	df 91       	pop	r29
     172:	08 95       	ret

00000174 <heater_init>:
 * heater_off()	 - turn heater off	
 * heater_callback() - 100ms timed loop for heater control
 */

void heater_init()
{ 
     174:	df 93       	push	r29
     176:	cf 93       	push	r28
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
	// initialize heater, start PID and PWM
	memset(&heater, 0, sizeof(Heater));
     17c:	87 e0       	ldi	r24, 0x07	; 7
     17e:	91 e0       	ldi	r25, 0x01	; 1
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	41 e2       	ldi	r20, 0x21	; 33
     186:	50 e0       	ldi	r21, 0x00	; 0
     188:	0e 94 74 11 	call	0x22e8	; 0x22e8 <memset>
	heater.ambient_timeout = HEATER_AMBIENT_TIMEOUT;
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	a4 eb       	ldi	r26, 0xB4	; 180
     192:	b2 e4       	ldi	r27, 0x42	; 66
     194:	80 93 18 01 	sts	0x0118, r24
     198:	90 93 19 01 	sts	0x0119, r25
     19c:	a0 93 1a 01 	sts	0x011A, r26
     1a0:	b0 93 1b 01 	sts	0x011B, r27
	heater.regulation_timeout = HEATER_REGULATION_TIMEOUT;
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	a6 e9       	ldi	r26, 0x96	; 150
     1aa:	b3 e4       	ldi	r27, 0x43	; 67
     1ac:	80 93 1c 01 	sts	0x011C, r24
     1b0:	90 93 1d 01 	sts	0x011D, r25
     1b4:	a0 93 1e 01 	sts	0x011E, r26
     1b8:	b0 93 1f 01 	sts	0x011F, r27
	heater.ambient_temperature = HEATER_AMBIENT_TEMPERATURE;
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	a0 e2       	ldi	r26, 0x20	; 32
     1c2:	b2 e4       	ldi	r27, 0x42	; 66
     1c4:	80 93 20 01 	sts	0x0120, r24
     1c8:	90 93 21 01 	sts	0x0121, r25
     1cc:	a0 93 22 01 	sts	0x0122, r26
     1d0:	b0 93 23 01 	sts	0x0123, r27
	heater.overheat_temperature = HEATER_OVERHEAT_TEMPERATURE;
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	a6 e9       	ldi	r26, 0x96	; 150
     1da:	b3 e4       	ldi	r27, 0x43	; 67
     1dc:	80 93 24 01 	sts	0x0124, r24
     1e0:	90 93 25 01 	sts	0x0125, r25
     1e4:	a0 93 26 01 	sts	0x0126, r26
     1e8:	b0 93 27 01 	sts	0x0127, r27

	// initialize lower-level functions used by heater
	// note: PWM and ADC are initialized as part of the device init
	sensor_init();					// setup the temperature sensor module
     1ec:	0e 94 b5 04 	call	0x96a	; 0x96a <sensor_init>
	pid_init();
     1f0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <pid_init>
}
     1f4:	cf 91       	pop	r28
     1f6:	df 91       	pop	r29
     1f8:	08 95       	ret

000001fa <heater_on>:

void heater_on(double setpoint)
{
     1fa:	df 93       	push	r29
     1fc:	cf 93       	push	r28
     1fe:	00 d0       	rcall	.+0      	; 0x200 <heater_on+0x6>
     200:	00 d0       	rcall	.+0      	; 0x202 <heater_on+0x8>
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	69 83       	std	Y+1, r22	; 0x01
     208:	7a 83       	std	Y+2, r23	; 0x02
     20a:	8b 83       	std	Y+3, r24	; 0x03
     20c:	9c 83       	std	Y+4, r25	; 0x04
	// no action if heater is already on
	if ((heater.state == HEATER_HEATING) || (heater.state == HEATER_REGULATED)) {
     20e:	80 91 07 01 	lds	r24, 0x0107
     212:	82 30       	cpi	r24, 0x02	; 2
     214:	31 f1       	breq	.+76     	; 0x262 <heater_on+0x68>
     216:	80 91 07 01 	lds	r24, 0x0107
     21a:	83 30       	cpi	r24, 0x03	; 3
     21c:	11 f1       	breq	.+68     	; 0x262 <heater_on+0x68>
		return;
	}
	// turn on lower level functions
	sensor_on();					// enable the sensor
     21e:	0e 94 00 05 	call	0xa00	; 0xa00 <sensor_on>
	sensor_start_reading();			// now start a reading
     222:	0e 94 13 05 	call	0xa26	; 0xa26 <sensor_start_reading>
	pid_reset();
     226:	0e 94 bb 02 	call	0x576	; 0x576 <pid_reset>
	pwm_on(PWM_FREQUENCY, 0);		// duty cycle will be set by PID loop
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	8a e7       	ldi	r24, 0x7A	; 122
     230:	94 e4       	ldi	r25, 0x44	; 68
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	0e 94 4a 07 	call	0xe94	; 0xe94 <pwm_on>
	heater.setpoint = setpoint;
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	9a 81       	ldd	r25, Y+2	; 0x02
     242:	ab 81       	ldd	r26, Y+3	; 0x03
     244:	bc 81       	ldd	r27, Y+4	; 0x04
     246:	80 93 10 01 	sts	0x0110, r24
     24a:	90 93 11 01 	sts	0x0111, r25
     24e:	a0 93 12 01 	sts	0x0112, r26
     252:	b0 93 13 01 	sts	0x0113, r27
	heater.regulation_count = HEATER_REGULATION_COUNT;
     256:	8a e0       	ldi	r24, 0x0A	; 10
     258:	80 93 0b 01 	sts	0x010B, r24
	heater.state = HEATER_HEATING;
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	80 93 07 01 	sts	0x0107, r24
}
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	0f 90       	pop	r0
     26a:	cf 91       	pop	r28
     26c:	df 91       	pop	r29
     26e:	08 95       	ret

00000270 <heater_off>:

void heater_off(uint8_t state, uint8_t code) 
{
     270:	df 93       	push	r29
     272:	cf 93       	push	r28
     274:	00 d0       	rcall	.+0      	; 0x276 <heater_off+0x6>
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
     27a:	89 83       	std	Y+1, r24	; 0x01
     27c:	6a 83       	std	Y+2, r22	; 0x02
	pwm_off();						// stop sending current to the heater
     27e:	0e 94 77 07 	call	0xeee	; 0xeee <pwm_off>
	sensor_off();					// stop taking readings
     282:	0e 94 0a 05 	call	0xa14	; 0xa14 <sensor_off>
	heater.state = state;
     286:	89 81       	ldd	r24, Y+1	; 0x01
     288:	80 93 07 01 	sts	0x0107, r24
	heater.code = code;
     28c:	8a 81       	ldd	r24, Y+2	; 0x02
     28e:	80 93 08 01 	sts	0x0108, r24
	led_off();
     292:	0e 94 13 09 	call	0x1226	; 0x1226 <led_off>
}
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	cf 91       	pop	r28
     29c:	df 91       	pop	r29
     29e:	08 95       	ret

000002a0 <heater_callback>:

void heater_callback()
{
     2a0:	df 93       	push	r29
     2a2:	cf 93       	push	r28
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <heater_callback+0x6>
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <heater_callback+0x8>
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
	// catch the no-op cases
	if ((heater.state == HEATER_OFF) || (heater.state == HEATER_SHUTDOWN)) { return;}
     2ac:	80 91 07 01 	lds	r24, 0x0107
     2b0:	88 23       	and	r24, r24
     2b2:	09 f4       	brne	.+2      	; 0x2b6 <heater_callback+0x16>
     2b4:	ff c0       	rjmp	.+510    	; 0x4b4 <heater_callback+0x214>
     2b6:	80 91 07 01 	lds	r24, 0x0107
     2ba:	81 30       	cpi	r24, 0x01	; 1
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <heater_callback+0x20>
     2be:	fa c0       	rjmp	.+500    	; 0x4b4 <heater_callback+0x214>

	// get current temp or an error if there is no temperature reading
	if ((heater.temperature = sensor_get_temperature()) < ABSOLUTE_ZERO) { 
     2c0:	0e 94 31 05 	call	0xa62	; 0xa62 <sensor_get_temperature>
     2c4:	dc 01       	movw	r26, r24
     2c6:	cb 01       	movw	r24, r22
     2c8:	80 93 0c 01 	sts	0x010C, r24
     2cc:	90 93 0d 01 	sts	0x010D, r25
     2d0:	a0 93 0e 01 	sts	0x010E, r26
     2d4:	b0 93 0f 01 	sts	0x010F, r27
     2d8:	80 91 0c 01 	lds	r24, 0x010C
     2dc:	90 91 0d 01 	lds	r25, 0x010D
     2e0:	a0 91 0e 01 	lds	r26, 0x010E
     2e4:	b0 91 0f 01 	lds	r27, 0x010F
     2e8:	bc 01       	movw	r22, r24
     2ea:	cd 01       	movw	r24, r26
     2ec:	23 e3       	ldi	r18, 0x33	; 51
     2ee:	33 e9       	ldi	r19, 0x93	; 147
     2f0:	48 e8       	ldi	r20, 0x88	; 136
     2f2:	53 ec       	ldi	r21, 0xC3	; 195
     2f4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
     2f8:	88 23       	and	r24, r24
     2fa:	0c f4       	brge	.+2      	; 0x2fe <heater_callback+0x5e>
     2fc:	db c0       	rjmp	.+438    	; 0x4b4 <heater_callback+0x214>
		return;
	}
	if (heater.temperature > heater.overheat_temperature) {
     2fe:	80 91 0c 01 	lds	r24, 0x010C
     302:	90 91 0d 01 	lds	r25, 0x010D
     306:	a0 91 0e 01 	lds	r26, 0x010E
     30a:	b0 91 0f 01 	lds	r27, 0x010F
     30e:	20 91 24 01 	lds	r18, 0x0124
     312:	30 91 25 01 	lds	r19, 0x0125
     316:	40 91 26 01 	lds	r20, 0x0126
     31a:	50 91 27 01 	lds	r21, 0x0127
     31e:	bc 01       	movw	r22, r24
     320:	cd 01       	movw	r24, r26
     322:	0e 94 91 10 	call	0x2122	; 0x2122 <__gesf2>
     326:	18 16       	cp	r1, r24
     328:	2c f4       	brge	.+10     	; 0x334 <heater_callback+0x94>
		heater_off(HEATER_SHUTDOWN, HEATER_OVERHEATED);
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	63 e0       	ldi	r22, 0x03	; 3
     32e:	0e 94 38 01 	call	0x270	; 0x270 <heater_off>
     332:	c0 c0       	rjmp	.+384    	; 0x4b4 <heater_callback+0x214>
		return;
	}
	sensor_start_reading();		// start next reading
     334:	0e 94 13 05 	call	0xa26	; 0xa26 <sensor_start_reading>

	// calculate the next PWM level via the PID
	double duty_cycle = pid_calculate(heater.setpoint, heater.temperature);
     338:	80 91 10 01 	lds	r24, 0x0110
     33c:	90 91 11 01 	lds	r25, 0x0111
     340:	a0 91 12 01 	lds	r26, 0x0112
     344:	b0 91 13 01 	lds	r27, 0x0113
     348:	20 91 0c 01 	lds	r18, 0x010C
     34c:	30 91 0d 01 	lds	r19, 0x010D
     350:	40 91 0e 01 	lds	r20, 0x010E
     354:	50 91 0f 01 	lds	r21, 0x010F
     358:	bc 01       	movw	r22, r24
     35a:	cd 01       	movw	r24, r26
     35c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <pid_calculate>
     360:	dc 01       	movw	r26, r24
     362:	cb 01       	movw	r24, r22
     364:	89 83       	std	Y+1, r24	; 0x01
     366:	9a 83       	std	Y+2, r25	; 0x02
     368:	ab 83       	std	Y+3, r26	; 0x03
     36a:	bc 83       	std	Y+4, r27	; 0x04
	pwm_set_duty(duty_cycle);
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	9a 81       	ldd	r25, Y+2	; 0x02
     370:	ab 81       	ldd	r26, Y+3	; 0x03
     372:	bc 81       	ldd	r27, Y+4	; 0x04
     374:	bc 01       	movw	r22, r24
     376:	cd 01       	movw	r24, r26
     378:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <pwm_set_duty>
	rpt_heater_readout();
     37c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <rpt_heater_readout>

	// handle HEATER exceptions
	if (heater.state == HEATER_HEATING) {
     380:	80 91 07 01 	lds	r24, 0x0107
     384:	82 30       	cpi	r24, 0x02	; 2
     386:	09 f0       	breq	.+2      	; 0x38a <heater_callback+0xea>
     388:	7c c0       	rjmp	.+248    	; 0x482 <heater_callback+0x1e2>
		heater.regulation_timer += HEATER_TICK_SECONDS;
     38a:	80 91 14 01 	lds	r24, 0x0114
     38e:	90 91 15 01 	lds	r25, 0x0115
     392:	a0 91 16 01 	lds	r26, 0x0116
     396:	b0 91 17 01 	lds	r27, 0x0117
     39a:	bc 01       	movw	r22, r24
     39c:	cd 01       	movw	r24, r26
     39e:	2d ec       	ldi	r18, 0xCD	; 205
     3a0:	3c ec       	ldi	r19, 0xCC	; 204
     3a2:	4c ec       	ldi	r20, 0xCC	; 204
     3a4:	5d e3       	ldi	r21, 0x3D	; 61
     3a6:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__addsf3>
     3aa:	dc 01       	movw	r26, r24
     3ac:	cb 01       	movw	r24, r22
     3ae:	80 93 14 01 	sts	0x0114, r24
     3b2:	90 93 15 01 	sts	0x0115, r25
     3b6:	a0 93 16 01 	sts	0x0116, r26
     3ba:	b0 93 17 01 	sts	0x0117, r27

		if ((heater.temperature < heater.ambient_temperature) &&
     3be:	80 91 0c 01 	lds	r24, 0x010C
     3c2:	90 91 0d 01 	lds	r25, 0x010D
     3c6:	a0 91 0e 01 	lds	r26, 0x010E
     3ca:	b0 91 0f 01 	lds	r27, 0x010F
     3ce:	20 91 20 01 	lds	r18, 0x0120
     3d2:	30 91 21 01 	lds	r19, 0x0121
     3d6:	40 91 22 01 	lds	r20, 0x0122
     3da:	50 91 23 01 	lds	r21, 0x0123
     3de:	bc 01       	movw	r22, r24
     3e0:	cd 01       	movw	r24, r26
     3e2:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
     3e6:	88 23       	and	r24, r24
     3e8:	dc f4       	brge	.+54     	; 0x420 <heater_callback+0x180>
     3ea:	80 91 14 01 	lds	r24, 0x0114
     3ee:	90 91 15 01 	lds	r25, 0x0115
     3f2:	a0 91 16 01 	lds	r26, 0x0116
     3f6:	b0 91 17 01 	lds	r27, 0x0117
     3fa:	20 91 18 01 	lds	r18, 0x0118
     3fe:	30 91 19 01 	lds	r19, 0x0119
     402:	40 91 1a 01 	lds	r20, 0x011A
     406:	50 91 1b 01 	lds	r21, 0x011B
     40a:	bc 01       	movw	r22, r24
     40c:	cd 01       	movw	r24, r26
     40e:	0e 94 91 10 	call	0x2122	; 0x2122 <__gesf2>
     412:	18 16       	cp	r1, r24
     414:	2c f4       	brge	.+10     	; 0x420 <heater_callback+0x180>
			(heater.regulation_timer > heater.ambient_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_AMBIENT_TIMED_OUT);
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	0e 94 38 01 	call	0x270	; 0x270 <heater_off>
     41e:	4a c0       	rjmp	.+148    	; 0x4b4 <heater_callback+0x214>
			return;
		}
		if ((heater.temperature < heater.setpoint) &&
     420:	80 91 0c 01 	lds	r24, 0x010C
     424:	90 91 0d 01 	lds	r25, 0x010D
     428:	a0 91 0e 01 	lds	r26, 0x010E
     42c:	b0 91 0f 01 	lds	r27, 0x010F
     430:	20 91 10 01 	lds	r18, 0x0110
     434:	30 91 11 01 	lds	r19, 0x0111
     438:	40 91 12 01 	lds	r20, 0x0112
     43c:	50 91 13 01 	lds	r21, 0x0113
     440:	bc 01       	movw	r22, r24
     442:	cd 01       	movw	r24, r26
     444:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
     448:	88 23       	and	r24, r24
     44a:	dc f4       	brge	.+54     	; 0x482 <heater_callback+0x1e2>
     44c:	80 91 14 01 	lds	r24, 0x0114
     450:	90 91 15 01 	lds	r25, 0x0115
     454:	a0 91 16 01 	lds	r26, 0x0116
     458:	b0 91 17 01 	lds	r27, 0x0117
     45c:	20 91 1c 01 	lds	r18, 0x011C
     460:	30 91 1d 01 	lds	r19, 0x011D
     464:	40 91 1e 01 	lds	r20, 0x011E
     468:	50 91 1f 01 	lds	r21, 0x011F
     46c:	bc 01       	movw	r22, r24
     46e:	cd 01       	movw	r24, r26
     470:	0e 94 91 10 	call	0x2122	; 0x2122 <__gesf2>
     474:	18 16       	cp	r1, r24
     476:	2c f4       	brge	.+10     	; 0x482 <heater_callback+0x1e2>
			(heater.regulation_timer > heater.regulation_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_REGULATION_TIMED_OUT);
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	62 e0       	ldi	r22, 0x02	; 2
     47c:	0e 94 38 01 	call	0x270	; 0x270 <heater_off>
     480:	19 c0       	rjmp	.+50     	; 0x4b4 <heater_callback+0x214>
			return;
		}
	}
	// manage heater state and LED indicator
	if (heater.regulation_count > 0) {
     482:	80 91 0b 01 	lds	r24, 0x010B
     486:	88 23       	and	r24, r24
     488:	61 f0       	breq	.+24     	; 0x4a2 <heater_callback+0x202>
		if (--heater.regulation_count <= 0) {
     48a:	80 91 0b 01 	lds	r24, 0x010B
     48e:	81 50       	subi	r24, 0x01	; 1
     490:	80 93 0b 01 	sts	0x010B, r24
     494:	80 91 0b 01 	lds	r24, 0x010B
     498:	88 23       	and	r24, r24
     49a:	19 f4       	brne	.+6      	; 0x4a2 <heater_callback+0x202>
			heater.state = HEATER_REGULATED;
     49c:	83 e0       	ldi	r24, 0x03	; 3
     49e:	80 93 07 01 	sts	0x0107, r24
		}
	}
	if (heater.state == HEATER_REGULATED) {
     4a2:	80 91 07 01 	lds	r24, 0x0107
     4a6:	83 30       	cpi	r24, 0x03	; 3
     4a8:	19 f4       	brne	.+6      	; 0x4b0 <heater_callback+0x210>
		led_on();
     4aa:	0e 94 05 09 	call	0x120a	; 0x120a <led_on>
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <heater_callback+0x214>
	} else {
		led_toggle();
     4b0:	0e 94 21 09 	call	0x1242	; 0x1242 <led_toggle>
	}
}
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	cf 91       	pop	r28
     4be:	df 91       	pop	r29
     4c0:	08 95       	ret

000004c2 <pid_init>:
 * pid_reset() - reset PID values to cold start
 * pid_calc() - derived from: http://www.embeddedheaven.com/pid-control-algorithm-c-language.htm
 */

void pid_init() 
{
     4c2:	df 93       	push	r29
     4c4:	cf 93       	push	r28
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
	memset(&pid, 0, sizeof(struct PIDstruct));
     4ca:	88 e2       	ldi	r24, 0x28	; 40
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	46 e3       	ldi	r20, 0x36	; 54
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	0e 94 74 11 	call	0x22e8	; 0x22e8 <memset>
	pid.dt = PID_DT;
     4da:	8d ec       	ldi	r24, 0xCD	; 205
     4dc:	9c ec       	ldi	r25, 0xCC	; 204
     4de:	ac ec       	ldi	r26, 0xCC	; 204
     4e0:	bd e3       	ldi	r27, 0x3D	; 61
     4e2:	80 93 46 01 	sts	0x0146, r24
     4e6:	90 93 47 01 	sts	0x0147, r25
     4ea:	a0 93 48 01 	sts	0x0148, r26
     4ee:	b0 93 49 01 	sts	0x0149, r27
	pid.Kp = PID_Kp;
     4f2:	8d ec       	ldi	r24, 0xCD	; 205
     4f4:	9c ec       	ldi	r25, 0xCC	; 204
     4f6:	ac e4       	ldi	r26, 0x4C	; 76
     4f8:	be e3       	ldi	r27, 0x3E	; 62
     4fa:	80 93 4a 01 	sts	0x014A, r24
     4fe:	90 93 4b 01 	sts	0x014B, r25
     502:	a0 93 4c 01 	sts	0x014C, r26
     506:	b0 93 4d 01 	sts	0x014D, r27
	pid.Ki = PID_Ki;
     50a:	8a e0       	ldi	r24, 0x0A	; 10
     50c:	97 ed       	ldi	r25, 0xD7	; 215
     50e:	a3 ea       	ldi	r26, 0xA3	; 163
     510:	bb e3       	ldi	r27, 0x3B	; 59
     512:	80 93 4e 01 	sts	0x014E, r24
     516:	90 93 4f 01 	sts	0x014F, r25
     51a:	a0 93 50 01 	sts	0x0150, r26
     51e:	b0 93 51 01 	sts	0x0151, r27
	pid.Kd = PID_Kd;
     522:	8a e0       	ldi	r24, 0x0A	; 10
     524:	97 ed       	ldi	r25, 0xD7	; 215
     526:	a3 e2       	ldi	r26, 0x23	; 35
     528:	bc e3       	ldi	r27, 0x3C	; 60
     52a:	80 93 52 01 	sts	0x0152, r24
     52e:	90 93 53 01 	sts	0x0153, r25
     532:	a0 93 54 01 	sts	0x0154, r26
     536:	b0 93 55 01 	sts	0x0155, r27
	pid.output_max = PID_MAX_OUTPUT;		// saturation filter max value
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	a8 ec       	ldi	r26, 0xC8	; 200
     540:	b2 e4       	ldi	r27, 0x42	; 66
     542:	80 93 2e 01 	sts	0x012E, r24
     546:	90 93 2f 01 	sts	0x012F, r25
     54a:	a0 93 30 01 	sts	0x0130, r26
     54e:	b0 93 31 01 	sts	0x0131, r27
	pid.output_min = PID_MIN_OUTPUT;		// saturation filter min value
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	a0 e0       	ldi	r26, 0x00	; 0
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	80 93 32 01 	sts	0x0132, r24
     55e:	90 93 33 01 	sts	0x0133, r25
     562:	a0 93 34 01 	sts	0x0134, r26
     566:	b0 93 35 01 	sts	0x0135, r27
	pid.state = PID_ON;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	80 93 28 01 	sts	0x0128, r24
}
     570:	cf 91       	pop	r28
     572:	df 91       	pop	r29
     574:	08 95       	ret

00000576 <pid_reset>:

void pid_reset()
{
     576:	df 93       	push	r29
     578:	cf 93       	push	r28
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
	pid.output = 0;
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	a0 e0       	ldi	r26, 0x00	; 0
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	80 93 2a 01 	sts	0x012A, r24
     58a:	90 93 2b 01 	sts	0x012B, r25
     58e:	a0 93 2c 01 	sts	0x012C, r26
     592:	b0 93 2d 01 	sts	0x012D, r27
	pid.integral = 0;
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	a0 e0       	ldi	r26, 0x00	; 0
     59c:	b0 e0       	ldi	r27, 0x00	; 0
     59e:	80 93 3e 01 	sts	0x013E, r24
     5a2:	90 93 3f 01 	sts	0x013F, r25
     5a6:	a0 93 40 01 	sts	0x0140, r26
     5aa:	b0 93 41 01 	sts	0x0141, r27
	pid.prev_error = 0;
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	a0 e0       	ldi	r26, 0x00	; 0
     5b4:	b0 e0       	ldi	r27, 0x00	; 0
     5b6:	80 93 3a 01 	sts	0x013A, r24
     5ba:	90 93 3b 01 	sts	0x013B, r25
     5be:	a0 93 3c 01 	sts	0x013C, r26
     5c2:	b0 93 3d 01 	sts	0x013D, r27
}
     5c6:	cf 91       	pop	r28
     5c8:	df 91       	pop	r29
     5ca:	08 95       	ret

000005cc <pid_calculate>:

double pid_calculate(double setpoint,double temperature)
{
     5cc:	ef 92       	push	r14
     5ce:	ff 92       	push	r15
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	df 93       	push	r29
     5d6:	cf 93       	push	r28
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
     5dc:	2c 97       	sbiw	r28, 0x0c	; 12
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	69 83       	std	Y+1, r22	; 0x01
     5ea:	7a 83       	std	Y+2, r23	; 0x02
     5ec:	8b 83       	std	Y+3, r24	; 0x03
     5ee:	9c 83       	std	Y+4, r25	; 0x04
     5f0:	2d 83       	std	Y+5, r18	; 0x05
     5f2:	3e 83       	std	Y+6, r19	; 0x06
     5f4:	4f 83       	std	Y+7, r20	; 0x07
     5f6:	58 87       	std	Y+8, r21	; 0x08
	if (pid.state == PID_OFF) { return (0);}
     5f8:	80 91 28 01 	lds	r24, 0x0128
     5fc:	88 23       	and	r24, r24
     5fe:	49 f4       	brne	.+18     	; 0x612 <pid_calculate+0x46>
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	a0 e0       	ldi	r26, 0x00	; 0
     606:	b0 e0       	ldi	r27, 0x00	; 0
     608:	89 87       	std	Y+9, r24	; 0x09
     60a:	9a 87       	std	Y+10, r25	; 0x0a
     60c:	ab 87       	std	Y+11, r26	; 0x0b
     60e:	bc 87       	std	Y+12, r27	; 0x0c
     610:	99 c1       	rjmp	.+818    	; 0x944 <__stack+0x45>

	pid.setpoint = setpoint;		// ++++ test
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	9a 81       	ldd	r25, Y+2	; 0x02
     616:	ab 81       	ldd	r26, Y+3	; 0x03
     618:	bc 81       	ldd	r27, Y+4	; 0x04
     61a:	80 93 5a 01 	sts	0x015A, r24
     61e:	90 93 5b 01 	sts	0x015B, r25
     622:	a0 93 5c 01 	sts	0x015C, r26
     626:	b0 93 5d 01 	sts	0x015D, r27
	pid.temperature = temperature;	// ++++ test
     62a:	8d 81       	ldd	r24, Y+5	; 0x05
     62c:	9e 81       	ldd	r25, Y+6	; 0x06
     62e:	af 81       	ldd	r26, Y+7	; 0x07
     630:	b8 85       	ldd	r27, Y+8	; 0x08
     632:	80 93 56 01 	sts	0x0156, r24
     636:	90 93 57 01 	sts	0x0157, r25
     63a:	a0 93 58 01 	sts	0x0158, r26
     63e:	b0 93 59 01 	sts	0x0159, r27

	pid.error = setpoint - temperature;		// current error term
     642:	69 81       	ldd	r22, Y+1	; 0x01
     644:	7a 81       	ldd	r23, Y+2	; 0x02
     646:	8b 81       	ldd	r24, Y+3	; 0x03
     648:	9c 81       	ldd	r25, Y+4	; 0x04
     64a:	2d 81       	ldd	r18, Y+5	; 0x05
     64c:	3e 81       	ldd	r19, Y+6	; 0x06
     64e:	4f 81       	ldd	r20, Y+7	; 0x07
     650:	58 85       	ldd	r21, Y+8	; 0x08
     652:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__subsf3>
     656:	dc 01       	movw	r26, r24
     658:	cb 01       	movw	r24, r22
     65a:	80 93 36 01 	sts	0x0136, r24
     65e:	90 93 37 01 	sts	0x0137, r25
     662:	a0 93 38 01 	sts	0x0138, r26
     666:	b0 93 39 01 	sts	0x0139, r27

//	if (fabs(pid.error) > PID_EPSILON) {	// stop integration if error term is too small
	if ((fabs(pid.error) > PID_EPSILON) ||	// stop integration if error term is too small
     66a:	80 91 36 01 	lds	r24, 0x0136
     66e:	90 91 37 01 	lds	r25, 0x0137
     672:	a0 91 38 01 	lds	r26, 0x0138
     676:	b0 91 39 01 	lds	r27, 0x0139
     67a:	bf 77       	andi	r27, 0x7F	; 127
     67c:	bc 01       	movw	r22, r24
     67e:	cd 01       	movw	r24, r26
     680:	2a e0       	ldi	r18, 0x0A	; 10
     682:	37 ed       	ldi	r19, 0xD7	; 215
     684:	43 e2       	ldi	r20, 0x23	; 35
     686:	5c e3       	ldi	r21, 0x3C	; 60
     688:	0e 94 91 10 	call	0x2122	; 0x2122 <__gesf2>
     68c:	18 16       	cp	r1, r24
     68e:	14 f1       	brlt	.+68     	; 0x6d4 <pid_calculate+0x108>
     690:	e0 90 2a 01 	lds	r14, 0x012A
     694:	f0 90 2b 01 	lds	r15, 0x012B
     698:	00 91 2c 01 	lds	r16, 0x012C
     69c:	10 91 2d 01 	lds	r17, 0x012D
     6a0:	80 91 2e 01 	lds	r24, 0x012E
     6a4:	90 91 2f 01 	lds	r25, 0x012F
     6a8:	a0 91 30 01 	lds	r26, 0x0130
     6ac:	b0 91 31 01 	lds	r27, 0x0131
     6b0:	bc 01       	movw	r22, r24
     6b2:	cd 01       	movw	r24, r26
     6b4:	2c ea       	ldi	r18, 0xAC	; 172
     6b6:	35 ec       	ldi	r19, 0xC5	; 197
     6b8:	47 e2       	ldi	r20, 0x27	; 39
     6ba:	57 e3       	ldi	r21, 0x37	; 55
     6bc:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__subsf3>
     6c0:	dc 01       	movw	r26, r24
     6c2:	cb 01       	movw	r24, r22
     6c4:	9c 01       	movw	r18, r24
     6c6:	ad 01       	movw	r20, r26
     6c8:	c8 01       	movw	r24, r16
     6ca:	b7 01       	movw	r22, r14
     6cc:	0e 94 91 10 	call	0x2122	; 0x2122 <__gesf2>
     6d0:	88 23       	and	r24, r24
     6d2:	74 f1       	brlt	.+92     	; 0x730 <pid_calculate+0x164>
		(pid.output >= (pid.output_max - EPSILON))) {//...or output is too large (anti-windup)
		pid.integral += (pid.error * pid.dt);
     6d4:	e0 90 3e 01 	lds	r14, 0x013E
     6d8:	f0 90 3f 01 	lds	r15, 0x013F
     6dc:	00 91 40 01 	lds	r16, 0x0140
     6e0:	10 91 41 01 	lds	r17, 0x0141
     6e4:	80 91 36 01 	lds	r24, 0x0136
     6e8:	90 91 37 01 	lds	r25, 0x0137
     6ec:	a0 91 38 01 	lds	r26, 0x0138
     6f0:	b0 91 39 01 	lds	r27, 0x0139
     6f4:	20 91 46 01 	lds	r18, 0x0146
     6f8:	30 91 47 01 	lds	r19, 0x0147
     6fc:	40 91 48 01 	lds	r20, 0x0148
     700:	50 91 49 01 	lds	r21, 0x0149
     704:	bc 01       	movw	r22, r24
     706:	cd 01       	movw	r24, r26
     708:	0e 94 95 10 	call	0x212a	; 0x212a <__mulsf3>
     70c:	dc 01       	movw	r26, r24
     70e:	cb 01       	movw	r24, r22
     710:	9c 01       	movw	r18, r24
     712:	ad 01       	movw	r20, r26
     714:	c8 01       	movw	r24, r16
     716:	b7 01       	movw	r22, r14
     718:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__addsf3>
     71c:	dc 01       	movw	r26, r24
     71e:	cb 01       	movw	r24, r22
     720:	80 93 3e 01 	sts	0x013E, r24
     724:	90 93 3f 01 	sts	0x013F, r25
     728:	a0 93 40 01 	sts	0x0140, r26
     72c:	b0 93 41 01 	sts	0x0141, r27
	}
	pid.derivative = (pid.error - pid.prev_error) / pid.dt;
     730:	80 91 36 01 	lds	r24, 0x0136
     734:	90 91 37 01 	lds	r25, 0x0137
     738:	a0 91 38 01 	lds	r26, 0x0138
     73c:	b0 91 39 01 	lds	r27, 0x0139
     740:	20 91 3a 01 	lds	r18, 0x013A
     744:	30 91 3b 01 	lds	r19, 0x013B
     748:	40 91 3c 01 	lds	r20, 0x013C
     74c:	50 91 3d 01 	lds	r21, 0x013D
     750:	bc 01       	movw	r22, r24
     752:	cd 01       	movw	r24, r26
     754:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__subsf3>
     758:	dc 01       	movw	r26, r24
     75a:	cb 01       	movw	r24, r22
     75c:	20 91 46 01 	lds	r18, 0x0146
     760:	30 91 47 01 	lds	r19, 0x0147
     764:	40 91 48 01 	lds	r20, 0x0148
     768:	50 91 49 01 	lds	r21, 0x0149
     76c:	bc 01       	movw	r22, r24
     76e:	cd 01       	movw	r24, r26
     770:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__divsf3>
     774:	dc 01       	movw	r26, r24
     776:	cb 01       	movw	r24, r22
     778:	80 93 42 01 	sts	0x0142, r24
     77c:	90 93 43 01 	sts	0x0143, r25
     780:	a0 93 44 01 	sts	0x0144, r26
     784:	b0 93 45 01 	sts	0x0145, r27
	pid.output = pid.Kp * pid.error + pid.Ki * pid.integral + pid.Kd * pid.derivative;
     788:	80 91 4a 01 	lds	r24, 0x014A
     78c:	90 91 4b 01 	lds	r25, 0x014B
     790:	a0 91 4c 01 	lds	r26, 0x014C
     794:	b0 91 4d 01 	lds	r27, 0x014D
     798:	20 91 36 01 	lds	r18, 0x0136
     79c:	30 91 37 01 	lds	r19, 0x0137
     7a0:	40 91 38 01 	lds	r20, 0x0138
     7a4:	50 91 39 01 	lds	r21, 0x0139
     7a8:	bc 01       	movw	r22, r24
     7aa:	cd 01       	movw	r24, r26
     7ac:	0e 94 95 10 	call	0x212a	; 0x212a <__mulsf3>
     7b0:	dc 01       	movw	r26, r24
     7b2:	cb 01       	movw	r24, r22
     7b4:	7c 01       	movw	r14, r24
     7b6:	8d 01       	movw	r16, r26
     7b8:	80 91 4e 01 	lds	r24, 0x014E
     7bc:	90 91 4f 01 	lds	r25, 0x014F
     7c0:	a0 91 50 01 	lds	r26, 0x0150
     7c4:	b0 91 51 01 	lds	r27, 0x0151
     7c8:	20 91 3e 01 	lds	r18, 0x013E
     7cc:	30 91 3f 01 	lds	r19, 0x013F
     7d0:	40 91 40 01 	lds	r20, 0x0140
     7d4:	50 91 41 01 	lds	r21, 0x0141
     7d8:	bc 01       	movw	r22, r24
     7da:	cd 01       	movw	r24, r26
     7dc:	0e 94 95 10 	call	0x212a	; 0x212a <__mulsf3>
     7e0:	dc 01       	movw	r26, r24
     7e2:	cb 01       	movw	r24, r22
     7e4:	9c 01       	movw	r18, r24
     7e6:	ad 01       	movw	r20, r26
     7e8:	c8 01       	movw	r24, r16
     7ea:	b7 01       	movw	r22, r14
     7ec:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__addsf3>
     7f0:	dc 01       	movw	r26, r24
     7f2:	cb 01       	movw	r24, r22
     7f4:	7c 01       	movw	r14, r24
     7f6:	8d 01       	movw	r16, r26
     7f8:	80 91 52 01 	lds	r24, 0x0152
     7fc:	90 91 53 01 	lds	r25, 0x0153
     800:	a0 91 54 01 	lds	r26, 0x0154
     804:	b0 91 55 01 	lds	r27, 0x0155
     808:	20 91 42 01 	lds	r18, 0x0142
     80c:	30 91 43 01 	lds	r19, 0x0143
     810:	40 91 44 01 	lds	r20, 0x0144
     814:	50 91 45 01 	lds	r21, 0x0145
     818:	bc 01       	movw	r22, r24
     81a:	cd 01       	movw	r24, r26
     81c:	0e 94 95 10 	call	0x212a	; 0x212a <__mulsf3>
     820:	dc 01       	movw	r26, r24
     822:	cb 01       	movw	r24, r22
     824:	9c 01       	movw	r18, r24
     826:	ad 01       	movw	r20, r26
     828:	c8 01       	movw	r24, r16
     82a:	b7 01       	movw	r22, r14
     82c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__addsf3>
     830:	dc 01       	movw	r26, r24
     832:	cb 01       	movw	r24, r22
     834:	80 93 2a 01 	sts	0x012A, r24
     838:	90 93 2b 01 	sts	0x012B, r25
     83c:	a0 93 2c 01 	sts	0x012C, r26
     840:	b0 93 2d 01 	sts	0x012D, r27

	if(pid.output > pid.output_max) { 		// saturation filter
     844:	80 91 2a 01 	lds	r24, 0x012A
     848:	90 91 2b 01 	lds	r25, 0x012B
     84c:	a0 91 2c 01 	lds	r26, 0x012C
     850:	b0 91 2d 01 	lds	r27, 0x012D
     854:	20 91 2e 01 	lds	r18, 0x012E
     858:	30 91 2f 01 	lds	r19, 0x012F
     85c:	40 91 30 01 	lds	r20, 0x0130
     860:	50 91 31 01 	lds	r21, 0x0131
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	0e 94 91 10 	call	0x2122	; 0x2122 <__gesf2>
     86c:	18 16       	cp	r1, r24
     86e:	8c f4       	brge	.+34     	; 0x892 <pid_calculate+0x2c6>
		pid.output = pid.output_max;
     870:	80 91 2e 01 	lds	r24, 0x012E
     874:	90 91 2f 01 	lds	r25, 0x012F
     878:	a0 91 30 01 	lds	r26, 0x0130
     87c:	b0 91 31 01 	lds	r27, 0x0131
     880:	80 93 2a 01 	sts	0x012A, r24
     884:	90 93 2b 01 	sts	0x012B, r25
     888:	a0 93 2c 01 	sts	0x012C, r26
     88c:	b0 93 2d 01 	sts	0x012D, r27
     890:	26 c0       	rjmp	.+76     	; 0x8de <pid_calculate+0x312>
	} else if(pid.output < pid.output_min) {
     892:	80 91 2a 01 	lds	r24, 0x012A
     896:	90 91 2b 01 	lds	r25, 0x012B
     89a:	a0 91 2c 01 	lds	r26, 0x012C
     89e:	b0 91 2d 01 	lds	r27, 0x012D
     8a2:	20 91 32 01 	lds	r18, 0x0132
     8a6:	30 91 33 01 	lds	r19, 0x0133
     8aa:	40 91 34 01 	lds	r20, 0x0134
     8ae:	50 91 35 01 	lds	r21, 0x0135
     8b2:	bc 01       	movw	r22, r24
     8b4:	cd 01       	movw	r24, r26
     8b6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
     8ba:	88 23       	and	r24, r24
     8bc:	84 f4       	brge	.+32     	; 0x8de <pid_calculate+0x312>
		pid.output = pid.output_min;
     8be:	80 91 32 01 	lds	r24, 0x0132
     8c2:	90 91 33 01 	lds	r25, 0x0133
     8c6:	a0 91 34 01 	lds	r26, 0x0134
     8ca:	b0 91 35 01 	lds	r27, 0x0135
     8ce:	80 93 2a 01 	sts	0x012A, r24
     8d2:	90 93 2b 01 	sts	0x012B, r25
     8d6:	a0 93 2c 01 	sts	0x012C, r26
     8da:	b0 93 2d 01 	sts	0x012D, r27
	}
	pid.prev_error = pid.error;
     8de:	80 91 36 01 	lds	r24, 0x0136
     8e2:	90 91 37 01 	lds	r25, 0x0137
     8e6:	a0 91 38 01 	lds	r26, 0x0138
     8ea:	b0 91 39 01 	lds	r27, 0x0139
     8ee:	80 93 3a 01 	sts	0x013A, r24
     8f2:	90 93 3b 01 	sts	0x013B, r25
     8f6:	a0 93 3c 01 	sts	0x013C, r26
     8fa:	b0 93 3d 01 	sts	0x013D, r27
	if (pid.output > 50) { led_on();} else { led_off();}
     8fe:	80 91 2a 01 	lds	r24, 0x012A
     902:	90 91 2b 01 	lds	r25, 0x012B
     906:	a0 91 2c 01 	lds	r26, 0x012C
     90a:	b0 91 2d 01 	lds	r27, 0x012D
     90e:	bc 01       	movw	r22, r24
     910:	cd 01       	movw	r24, r26
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	48 e4       	ldi	r20, 0x48	; 72
     918:	52 e4       	ldi	r21, 0x42	; 66
     91a:	0e 94 91 10 	call	0x2122	; 0x2122 <__gesf2>
     91e:	18 16       	cp	r1, r24
     920:	1c f4       	brge	.+6      	; 0x928 <__stack+0x29>
     922:	0e 94 05 09 	call	0x120a	; 0x120a <led_on>
     926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0x2d>
     928:	0e 94 13 09 	call	0x1226	; 0x1226 <led_off>

	return pid.output;
     92c:	80 91 2a 01 	lds	r24, 0x012A
     930:	90 91 2b 01 	lds	r25, 0x012B
     934:	a0 91 2c 01 	lds	r26, 0x012C
     938:	b0 91 2d 01 	lds	r27, 0x012D
     93c:	89 87       	std	Y+9, r24	; 0x09
     93e:	9a 87       	std	Y+10, r25	; 0x0a
     940:	ab 87       	std	Y+11, r26	; 0x0b
     942:	bc 87       	std	Y+12, r27	; 0x0c
     944:	89 85       	ldd	r24, Y+9	; 0x09
     946:	9a 85       	ldd	r25, Y+10	; 0x0a
     948:	ab 85       	ldd	r26, Y+11	; 0x0b
     94a:	bc 85       	ldd	r27, Y+12	; 0x0c
}
     94c:	bc 01       	movw	r22, r24
     94e:	cd 01       	movw	r24, r26
     950:	2c 96       	adiw	r28, 0x0c	; 12
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	f8 94       	cli
     956:	de bf       	out	0x3e, r29	; 62
     958:	0f be       	out	0x3f, r0	; 63
     95a:	cd bf       	out	0x3d, r28	; 61
     95c:	cf 91       	pop	r28
     95e:	df 91       	pop	r29
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	08 95       	ret

0000096a <sensor_init>:
 * sensor_get_code()		- return latest sensor code
 * sensor_callback() 		- perform sensor sampling / reading
 */

void sensor_init()
{
     96a:	df 93       	push	r29
     96c:	cf 93       	push	r28
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
	memset(&sensor, 0, sizeof(Sensor));
     972:	80 e7       	ldi	r24, 0x70	; 112
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	43 e4       	ldi	r20, 0x43	; 67
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <memset>
	sensor.temperature = ABSOLUTE_ZERO;
     982:	83 e3       	ldi	r24, 0x33	; 51
     984:	93 e9       	ldi	r25, 0x93	; 147
     986:	a8 e8       	ldi	r26, 0x88	; 136
     988:	b3 ec       	ldi	r27, 0xC3	; 195
     98a:	80 93 73 01 	sts	0x0173, r24
     98e:	90 93 74 01 	sts	0x0174, r25
     992:	a0 93 75 01 	sts	0x0175, r26
     996:	b0 93 76 01 	sts	0x0176, r27
	sensor.sample_variance_max = SENSOR_SAMPLE_VARIANCE_MAX;
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	a0 ea       	ldi	r26, 0xA0	; 160
     9a0:	bf e3       	ldi	r27, 0x3F	; 63
     9a2:	80 93 7b 01 	sts	0x017B, r24
     9a6:	90 93 7c 01 	sts	0x017C, r25
     9aa:	a0 93 7d 01 	sts	0x017D, r26
     9ae:	b0 93 7e 01 	sts	0x017E, r27
	sensor.reading_variance_max = SENSOR_READING_VARIANCE_MAX;
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	a0 ea       	ldi	r26, 0xA0	; 160
     9b8:	b1 e4       	ldi	r27, 0x41	; 65
     9ba:	80 93 7f 01 	sts	0x017F, r24
     9be:	90 93 80 01 	sts	0x0180, r25
     9c2:	a0 93 81 01 	sts	0x0181, r26
     9c6:	b0 93 82 01 	sts	0x0182, r27
	sensor.disconnect_temperature = SENSOR_DISCONNECTED_TEMPERATURE;
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	a8 ec       	ldi	r26, 0xC8	; 200
     9d0:	b3 e4       	ldi	r27, 0x43	; 67
     9d2:	80 93 83 01 	sts	0x0183, r24
     9d6:	90 93 84 01 	sts	0x0184, r25
     9da:	a0 93 85 01 	sts	0x0185, r26
     9de:	b0 93 86 01 	sts	0x0186, r27
	sensor.no_power_temperature = SENSOR_NO_POWER_TEMPERATURE;
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	a0 e0       	ldi	r26, 0x00	; 0
     9e8:	b0 ec       	ldi	r27, 0xC0	; 192
     9ea:	80 93 87 01 	sts	0x0187, r24
     9ee:	90 93 88 01 	sts	0x0188, r25
     9f2:	a0 93 89 01 	sts	0x0189, r26
     9f6:	b0 93 8a 01 	sts	0x018A, r27
}
     9fa:	cf 91       	pop	r28
     9fc:	df 91       	pop	r29
     9fe:	08 95       	ret

00000a00 <sensor_on>:

void sensor_on()
{
     a00:	df 93       	push	r29
     a02:	cf 93       	push	r28
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_NO_DATA;
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	80 93 70 01 	sts	0x0170, r24
}
     a0e:	cf 91       	pop	r28
     a10:	df 91       	pop	r29
     a12:	08 95       	ret

00000a14 <sensor_off>:

void sensor_off()
{
     a14:	df 93       	push	r29
     a16:	cf 93       	push	r28
     a18:	cd b7       	in	r28, 0x3d	; 61
     a1a:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_OFF;
     a1c:	10 92 70 01 	sts	0x0170, r1
}
     a20:	cf 91       	pop	r28
     a22:	df 91       	pop	r29
     a24:	08 95       	ret

00000a26 <sensor_start_reading>:

void sensor_start_reading() 
{ 
     a26:	df 93       	push	r29
     a28:	cf 93       	push	r28
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
	sensor.sample_idx = 0;
     a2e:	10 92 72 01 	sts	0x0172, r1
	sensor.code = SENSOR_TAKING_READING;
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	80 93 71 01 	sts	0x0171, r24
}
     a38:	cf 91       	pop	r28
     a3a:	df 91       	pop	r29
     a3c:	08 95       	ret

00000a3e <sensor_get_state>:

uint8_t sensor_get_state() { return (sensor.state);}
     a3e:	df 93       	push	r29
     a40:	cf 93       	push	r28
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	80 91 70 01 	lds	r24, 0x0170
     a4a:	cf 91       	pop	r28
     a4c:	df 91       	pop	r29
     a4e:	08 95       	ret

00000a50 <sensor_get_code>:
uint8_t sensor_get_code() { return (sensor.code);}
     a50:	df 93       	push	r29
     a52:	cf 93       	push	r28
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	80 91 71 01 	lds	r24, 0x0171
     a5c:	cf 91       	pop	r28
     a5e:	df 91       	pop	r29
     a60:	08 95       	ret

00000a62 <sensor_get_temperature>:

double sensor_get_temperature() 
{ 
     a62:	df 93       	push	r29
     a64:	cf 93       	push	r28
     a66:	00 d0       	rcall	.+0      	; 0xa68 <sensor_get_temperature+0x6>
     a68:	00 d0       	rcall	.+0      	; 0xa6a <sensor_get_temperature+0x8>
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
	if (sensor.state == SENSOR_HAS_DATA) { 
     a6e:	80 91 70 01 	lds	r24, 0x0170
     a72:	83 30       	cpi	r24, 0x03	; 3
     a74:	69 f4       	brne	.+26     	; 0xa90 <sensor_get_temperature+0x2e>
		return (sensor.temperature);
     a76:	80 91 73 01 	lds	r24, 0x0173
     a7a:	90 91 74 01 	lds	r25, 0x0174
     a7e:	a0 91 75 01 	lds	r26, 0x0175
     a82:	b0 91 76 01 	lds	r27, 0x0176
     a86:	89 83       	std	Y+1, r24	; 0x01
     a88:	9a 83       	std	Y+2, r25	; 0x02
     a8a:	ab 83       	std	Y+3, r26	; 0x03
     a8c:	bc 83       	std	Y+4, r27	; 0x04
     a8e:	08 c0       	rjmp	.+16     	; 0xaa0 <sensor_get_temperature+0x3e>
	} else {
		return (LESS_THAN_ZERO);	// an impossible temperature value
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a9 e8       	ldi	r26, 0x89	; 137
     a96:	b3 ec       	ldi	r27, 0xC3	; 195
     a98:	89 83       	std	Y+1, r24	; 0x01
     a9a:	9a 83       	std	Y+2, r25	; 0x02
     a9c:	ab 83       	std	Y+3, r26	; 0x03
     a9e:	bc 83       	std	Y+4, r27	; 0x04
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	9a 81       	ldd	r25, Y+2	; 0x02
     aa4:	ab 81       	ldd	r26, Y+3	; 0x03
     aa6:	bc 81       	ldd	r27, Y+4	; 0x04
	}
}
     aa8:	bc 01       	movw	r22, r24
     aaa:	cd 01       	movw	r24, r26
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	cf 91       	pop	r28
     ab6:	df 91       	pop	r29
     ab8:	08 95       	ret

00000aba <sensor_callback>:
 *	loop. Each sampling interval must be requested explicitly by calling 
 *	sensor_start_sample(). It does not free-run.
 */

void sensor_callback()
{
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	df 93       	push	r29
     ac4:	cf 93       	push	r28
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
     aca:	29 97       	sbiw	r28, 0x09	; 9
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
	// cases where you don't execute the callback:
	if ((sensor.state == SENSOR_OFF) || (sensor.code != SENSOR_TAKING_READING)) {
     ad6:	80 91 70 01 	lds	r24, 0x0170
     ada:	88 23       	and	r24, r24
     adc:	09 f4       	brne	.+2      	; 0xae0 <sensor_callback+0x26>
     ade:	2f c1       	rjmp	.+606    	; 0xd3e <sensor_callback+0x284>
     ae0:	80 91 71 01 	lds	r24, 0x0171
     ae4:	81 30       	cpi	r24, 0x01	; 1
     ae6:	09 f0       	breq	.+2      	; 0xaea <sensor_callback+0x30>
     ae8:	2a c1       	rjmp	.+596    	; 0xd3e <sensor_callback+0x284>
		return;
	}

	// get a sample and return if still in the reading period
	sensor.sample[sensor.sample_idx] = _sensor_sample(ADC_CHANNEL);
     aea:	80 91 72 01 	lds	r24, 0x0172
     aee:	08 2f       	mov	r16, r24
     af0:	10 e0       	ldi	r17, 0x00	; 0
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	0e 94 ac 06 	call	0xd58	; 0xd58 <_sensor_sample>
     af8:	9b 01       	movw	r18, r22
     afa:	ac 01       	movw	r20, r24
     afc:	c8 01       	movw	r24, r16
     afe:	88 0f       	add	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	88 0f       	add	r24, r24
     b04:	99 1f       	adc	r25, r25
     b06:	fc 01       	movw	r30, r24
     b08:	e5 57       	subi	r30, 0x75	; 117
     b0a:	fe 4f       	sbci	r31, 0xFE	; 254
     b0c:	20 83       	st	Z, r18
     b0e:	31 83       	std	Z+1, r19	; 0x01
     b10:	42 83       	std	Z+2, r20	; 0x02
     b12:	53 83       	std	Z+3, r21	; 0x03
	if ((++sensor.sample_idx) < SENSOR_SAMPLES) { 
     b14:	80 91 72 01 	lds	r24, 0x0172
     b18:	8f 5f       	subi	r24, 0xFF	; 255
     b1a:	80 93 72 01 	sts	0x0172, r24
     b1e:	80 91 72 01 	lds	r24, 0x0172
     b22:	89 30       	cpi	r24, 0x09	; 9
     b24:	08 f4       	brcc	.+2      	; 0xb28 <sensor_callback+0x6e>
     b26:	0b c1       	rjmp	.+534    	; 0xd3e <sensor_callback+0x284>
		return;
	}

	// process the array to clean up samples
	double mean;
	sensor.std_dev = std_dev(sensor.sample, SENSOR_SAMPLES, &mean);
     b28:	8b e8       	ldi	r24, 0x8B	; 139
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	9e 01       	movw	r18, r28
     b2e:	2a 5f       	subi	r18, 0xFA	; 250
     b30:	3f 4f       	sbci	r19, 0xFF	; 255
     b32:	69 e0       	ldi	r22, 0x09	; 9
     b34:	a9 01       	movw	r20, r18
     b36:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <std_dev>
     b3a:	dc 01       	movw	r26, r24
     b3c:	cb 01       	movw	r24, r22
     b3e:	80 93 77 01 	sts	0x0177, r24
     b42:	90 93 78 01 	sts	0x0178, r25
     b46:	a0 93 79 01 	sts	0x0179, r26
     b4a:	b0 93 7a 01 	sts	0x017A, r27
	if (sensor.std_dev > sensor.reading_variance_max) {
     b4e:	80 91 77 01 	lds	r24, 0x0177
     b52:	90 91 78 01 	lds	r25, 0x0178
     b56:	a0 91 79 01 	lds	r26, 0x0179
     b5a:	b0 91 7a 01 	lds	r27, 0x017A
     b5e:	20 91 7f 01 	lds	r18, 0x017F
     b62:	30 91 80 01 	lds	r19, 0x0180
     b66:	40 91 81 01 	lds	r20, 0x0181
     b6a:	50 91 82 01 	lds	r21, 0x0182
     b6e:	bc 01       	movw	r22, r24
     b70:	cd 01       	movw	r24, r26
     b72:	0e 94 91 10 	call	0x2122	; 0x2122 <__gesf2>
     b76:	18 16       	cp	r1, r24
     b78:	3c f4       	brge	.+14     	; 0xb88 <sensor_callback+0xce>
		sensor.state = SENSOR_ERROR;
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	80 93 70 01 	sts	0x0170, r24
		sensor.code = SENSOR_BAD_READINGS;
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	80 93 71 01 	sts	0x0171, r24
     b86:	db c0       	rjmp	.+438    	; 0xd3e <sensor_callback+0x284>
		return;
	}

	// reject the outlier samples and re-compute the average
	double count = 0;
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	8a 83       	std	Y+2, r24	; 0x02
     b92:	9b 83       	std	Y+3, r25	; 0x03
     b94:	ac 83       	std	Y+4, r26	; 0x04
     b96:	bd 83       	std	Y+5, r27	; 0x05
	sensor.temperature = 0;
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	80 93 73 01 	sts	0x0173, r24
     ba4:	90 93 74 01 	sts	0x0174, r25
     ba8:	a0 93 75 01 	sts	0x0175, r26
     bac:	b0 93 76 01 	sts	0x0176, r27
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     bb0:	19 82       	std	Y+1, r1	; 0x01
     bb2:	71 c0       	rjmp	.+226    	; 0xc96 <sensor_callback+0x1dc>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	88 2f       	mov	r24, r24
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	fc 01       	movw	r30, r24
     bc4:	e5 57       	subi	r30, 0x75	; 117
     bc6:	fe 4f       	sbci	r31, 0xFE	; 254
     bc8:	80 81       	ld	r24, Z
     bca:	91 81       	ldd	r25, Z+1	; 0x01
     bcc:	a2 81       	ldd	r26, Z+2	; 0x02
     bce:	b3 81       	ldd	r27, Z+3	; 0x03
     bd0:	2e 81       	ldd	r18, Y+6	; 0x06
     bd2:	3f 81       	ldd	r19, Y+7	; 0x07
     bd4:	48 85       	ldd	r20, Y+8	; 0x08
     bd6:	59 85       	ldd	r21, Y+9	; 0x09
     bd8:	bc 01       	movw	r22, r24
     bda:	cd 01       	movw	r24, r26
     bdc:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__subsf3>
     be0:	dc 01       	movw	r26, r24
     be2:	cb 01       	movw	r24, r22
     be4:	7c 01       	movw	r14, r24
     be6:	8d 01       	movw	r16, r26
     be8:	e8 94       	clt
     bea:	17 f9       	bld	r17, 7
     bec:	80 91 7b 01 	lds	r24, 0x017B
     bf0:	90 91 7c 01 	lds	r25, 0x017C
     bf4:	a0 91 7d 01 	lds	r26, 0x017D
     bf8:	b0 91 7e 01 	lds	r27, 0x017E
     bfc:	20 91 77 01 	lds	r18, 0x0177
     c00:	30 91 78 01 	lds	r19, 0x0178
     c04:	40 91 79 01 	lds	r20, 0x0179
     c08:	50 91 7a 01 	lds	r21, 0x017A
     c0c:	bc 01       	movw	r22, r24
     c0e:	cd 01       	movw	r24, r26
     c10:	0e 94 95 10 	call	0x212a	; 0x212a <__mulsf3>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	9c 01       	movw	r18, r24
     c1a:	ad 01       	movw	r20, r26
     c1c:	c8 01       	movw	r24, r16
     c1e:	b7 01       	movw	r22, r14
     c20:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
     c24:	88 23       	and	r24, r24
     c26:	a4 f5       	brge	.+104    	; 0xc90 <sensor_callback+0x1d6>
			sensor.temperature += sensor.sample[i];
     c28:	e0 90 73 01 	lds	r14, 0x0173
     c2c:	f0 90 74 01 	lds	r15, 0x0174
     c30:	00 91 75 01 	lds	r16, 0x0175
     c34:	10 91 76 01 	lds	r17, 0x0176
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	88 2f       	mov	r24, r24
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	fc 01       	movw	r30, r24
     c48:	e5 57       	subi	r30, 0x75	; 117
     c4a:	fe 4f       	sbci	r31, 0xFE	; 254
     c4c:	20 81       	ld	r18, Z
     c4e:	31 81       	ldd	r19, Z+1	; 0x01
     c50:	42 81       	ldd	r20, Z+2	; 0x02
     c52:	53 81       	ldd	r21, Z+3	; 0x03
     c54:	c8 01       	movw	r24, r16
     c56:	b7 01       	movw	r22, r14
     c58:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__addsf3>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	80 93 73 01 	sts	0x0173, r24
     c64:	90 93 74 01 	sts	0x0174, r25
     c68:	a0 93 75 01 	sts	0x0175, r26
     c6c:	b0 93 76 01 	sts	0x0176, r27
			count++;
     c70:	6a 81       	ldd	r22, Y+2	; 0x02
     c72:	7b 81       	ldd	r23, Y+3	; 0x03
     c74:	8c 81       	ldd	r24, Y+4	; 0x04
     c76:	9d 81       	ldd	r25, Y+5	; 0x05
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 e8       	ldi	r20, 0x80	; 128
     c7e:	5f e3       	ldi	r21, 0x3F	; 63
     c80:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__addsf3>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	8a 83       	std	Y+2, r24	; 0x02
     c8a:	9b 83       	std	Y+3, r25	; 0x03
     c8c:	ac 83       	std	Y+4, r26	; 0x04
     c8e:	bd 83       	std	Y+5, r27	; 0x05
	}

	// reject the outlier samples and re-compute the average
	double count = 0;
	sensor.temperature = 0;
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	8f 5f       	subi	r24, 0xFF	; 255
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	89 30       	cpi	r24, 0x09	; 9
     c9a:	08 f4       	brcc	.+2      	; 0xc9e <sensor_callback+0x1e4>
     c9c:	8b cf       	rjmp	.-234    	; 0xbb4 <sensor_callback+0xfa>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
			sensor.temperature += sensor.sample[i];
			count++;
		}
	}
	sensor.temperature /= count; 
     c9e:	80 91 73 01 	lds	r24, 0x0173
     ca2:	90 91 74 01 	lds	r25, 0x0174
     ca6:	a0 91 75 01 	lds	r26, 0x0175
     caa:	b0 91 76 01 	lds	r27, 0x0176
     cae:	bc 01       	movw	r22, r24
     cb0:	cd 01       	movw	r24, r26
     cb2:	2a 81       	ldd	r18, Y+2	; 0x02
     cb4:	3b 81       	ldd	r19, Y+3	; 0x03
     cb6:	4c 81       	ldd	r20, Y+4	; 0x04
     cb8:	5d 81       	ldd	r21, Y+5	; 0x05
     cba:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__divsf3>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	80 93 73 01 	sts	0x0173, r24
     cc6:	90 93 74 01 	sts	0x0174, r25
     cca:	a0 93 75 01 	sts	0x0175, r26
     cce:	b0 93 76 01 	sts	0x0176, r27
	sensor.code = SENSOR_IDLE;			// we are done. Flip it back to idle
     cd2:	10 92 71 01 	sts	0x0171, r1
	sensor.state = SENSOR_HAS_DATA;
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	80 93 70 01 	sts	0x0170, r24

//	if (sensor.temperature <= -1) led_on();	

	// process the exception cases
	if (sensor.temperature > SENSOR_DISCONNECTED_TEMPERATURE) {
     cdc:	80 91 73 01 	lds	r24, 0x0173
     ce0:	90 91 74 01 	lds	r25, 0x0174
     ce4:	a0 91 75 01 	lds	r26, 0x0175
     ce8:	b0 91 76 01 	lds	r27, 0x0176
     cec:	bc 01       	movw	r22, r24
     cee:	cd 01       	movw	r24, r26
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	48 ec       	ldi	r20, 0xC8	; 200
     cf6:	53 e4       	ldi	r21, 0x43	; 67
     cf8:	0e 94 91 10 	call	0x2122	; 0x2122 <__gesf2>
     cfc:	18 16       	cp	r1, r24
     cfe:	3c f4       	brge	.+14     	; 0xd0e <sensor_callback+0x254>
		sensor.state = SENSOR_ERROR;
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	80 93 70 01 	sts	0x0170, r24
		sensor.code = SENSOR_DISCONNECTED;
     d06:	83 e0       	ldi	r24, 0x03	; 3
     d08:	80 93 71 01 	sts	0x0171, r24
     d0c:	18 c0       	rjmp	.+48     	; 0xd3e <sensor_callback+0x284>
	} else if (sensor.temperature < SENSOR_NO_POWER_TEMPERATURE) {
     d0e:	80 91 73 01 	lds	r24, 0x0173
     d12:	90 91 74 01 	lds	r25, 0x0174
     d16:	a0 91 75 01 	lds	r26, 0x0175
     d1a:	b0 91 76 01 	lds	r27, 0x0176
     d1e:	bc 01       	movw	r22, r24
     d20:	cd 01       	movw	r24, r26
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 ec       	ldi	r21, 0xC0	; 192
     d2a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
     d2e:	88 23       	and	r24, r24
     d30:	34 f4       	brge	.+12     	; 0xd3e <sensor_callback+0x284>
		sensor.state = SENSOR_ERROR;
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	80 93 70 01 	sts	0x0170, r24
		sensor.code = SENSOR_NO_POWER;
     d38:	84 e0       	ldi	r24, 0x04	; 4
     d3a:	80 93 71 01 	sts	0x0171, r24
	}
}
     d3e:	29 96       	adiw	r28, 0x09	; 9
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	08 95       	ret

00000d58 <_sensor_sample>:
 *
 *		temp = (adc_value * 1.456355556) - -120.7135972
 */

static inline double _sensor_sample(uint8_t adc_channel)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	0f 92       	push	r0
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	89 83       	std	Y+1, r24	; 0x01
	double random_gain = 5;
	double random_variation = ((double)(rand() - RAND_MAX/2) / RAND_MAX/2) * random_gain;
	double reading = 60 + random_variation;
	return (((double)reading * SENSOR_SLOPE) + SENSOR_OFFSET);	// useful for testing the math
#else
	return (((double)adc_read(adc_channel) * SENSOR_SLOPE) + SENSOR_OFFSET);
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	0e 94 e7 06 	call	0xdce	; 0xdce <adc_read>
     d6a:	cc 01       	movw	r24, r24
     d6c:	a0 e0       	ldi	r26, 0x00	; 0
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	bc 01       	movw	r22, r24
     d72:	cd 01       	movw	r24, r26
     d74:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__floatunsisf>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	bc 01       	movw	r22, r24
     d7e:	cd 01       	movw	r24, r26
     d80:	26 e0       	ldi	r18, 0x06	; 6
     d82:	3f ea       	ldi	r19, 0xAF	; 175
     d84:	4a ef       	ldi	r20, 0xFA	; 250
     d86:	5e e3       	ldi	r21, 0x3E	; 62
     d88:	0e 94 95 10 	call	0x212a	; 0x212a <__mulsf3>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	bc 01       	movw	r22, r24
     d92:	cd 01       	movw	r24, r26
     d94:	23 ed       	ldi	r18, 0xD3	; 211
     d96:	31 eb       	ldi	r19, 0xB1	; 177
     d98:	46 ed       	ldi	r20, 0xD6	; 214
     d9a:	5e e3       	ldi	r21, 0x3E	; 62
     d9c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__subsf3>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
#endif
}
     da4:	bc 01       	movw	r22, r24
     da6:	cd 01       	movw	r24, r26
     da8:	0f 90       	pop	r0
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <adc_init>:
/*
 * adc_init() - initialize ADC. See tinyg_tc.h for settings used
 * adc_read() - returns a single ADC reading (raw). See __sensor_sample notes for more
 */
void adc_init(void)
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
	ADMUX  = (ADC_REFS | ADC_CHANNEL);	 // setup ADC Vref and channel 0
     db8:	ec e7       	ldi	r30, 0x7C	; 124
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 e4       	ldi	r24, 0x40	; 64
     dbe:	80 83       	st	Z, r24
	ADCSRA = (ADC_ENABLE | ADC_PRESCALE);// Enable ADC (bit 7) & set prescaler
     dc0:	ea e7       	ldi	r30, 0x7A	; 122
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	86 e8       	ldi	r24, 0x86	; 134
     dc6:	80 83       	st	Z, r24
}
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <adc_read>:

uint16_t adc_read(uint8_t channel)
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <adc_read+0x6>
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xF0;						// clobber the channel
     dda:	ac e7       	ldi	r26, 0x7C	; 124
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	ec e7       	ldi	r30, 0x7C	; 124
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	80 7f       	andi	r24, 0xF0	; 240
     de6:	8c 93       	st	X, r24
	ADMUX |= 0x0F & channel;			// set the channel
     de8:	ac e7       	ldi	r26, 0x7C	; 124
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	ec e7       	ldi	r30, 0x7C	; 124
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	98 2f       	mov	r25, r24
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	8f 70       	andi	r24, 0x0F	; 15
     df8:	89 2b       	or	r24, r25
     dfa:	8c 93       	st	X, r24

	ADCSRA |= ADC_START_CONVERSION;		// start the conversion
     dfc:	aa e7       	ldi	r26, 0x7A	; 122
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	ea e7       	ldi	r30, 0x7A	; 122
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	80 64       	ori	r24, 0x40	; 64
     e08:	8c 93       	st	X, r24
	while (ADCSRA && (1<<ADIF) == 0);	// wait about 100 uSec
     e0a:	ea e7       	ldi	r30, 0x7A	; 122
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
	ADCSRA |= (1<<ADIF);				// clear the conversion flag
     e10:	aa e7       	ldi	r26, 0x7A	; 122
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	ea e7       	ldi	r30, 0x7A	; 122
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	80 61       	ori	r24, 0x10	; 16
     e1c:	8c 93       	st	X, r24
	return (ADC);
     e1e:	e8 e7       	ldi	r30, 0x78	; 120
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	91 81       	ldd	r25, Z+1	; 0x01
}
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <pwm_init>:
 * 	Configure timer 2 for extruder heater PWM
 *	Mode: 8 bit Fast PWM Fast w/OCR2A setting PWM freq (TOP value)
 *		  and OCR2B setting the duty cycle as a fraction of OCR2A seeting
 */
void pwm_init(void)
{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
	TCCR2A  = PWM_INVERTED;		// alternative is PWM_NONINVERTED
     e38:	e0 eb       	ldi	r30, 0xB0	; 176
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 ef       	ldi	r24, 0xF0	; 240
     e3e:	80 83       	st	Z, r24
	TCCR2A |= 0b00000011;		// Waveform generation set to MODE 7 - here...
     e40:	a0 eb       	ldi	r26, 0xB0	; 176
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e0 eb       	ldi	r30, 0xB0	; 176
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	83 60       	ori	r24, 0x03	; 3
     e4c:	8c 93       	st	X, r24
	TCCR2B  = 0b00001000;		// ...continued here
     e4e:	e1 eb       	ldi	r30, 0xB1	; 177
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	88 e0       	ldi	r24, 0x08	; 8
     e54:	80 83       	st	Z, r24
	TCCR2B |= PWM_PRESCALE_SET;	// set clock and prescaler
     e56:	a1 eb       	ldi	r26, 0xB1	; 177
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e1 eb       	ldi	r30, 0xB1	; 177
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	84 60       	ori	r24, 0x04	; 4
     e62:	8c 93       	st	X, r24
	TIMSK1 = 0; 				// disable PWM interrupts
     e64:	ef e6       	ldi	r30, 0x6F	; 111
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	10 82       	st	Z, r1
	OCR2A = 0;					// clear PWM frequency (TOP value)
     e6a:	e3 eb       	ldi	r30, 0xB3	; 179
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	10 82       	st	Z, r1
	OCR2B = 0;					// clear PWM duty cycle as % of TOP value
     e70:	e4 eb       	ldi	r30, 0xB4	; 180
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	10 82       	st	Z, r1
	device.pwm_freq = 0;
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	80 93 b6 01 	sts	0x01B6, r24
     e82:	90 93 b7 01 	sts	0x01B7, r25
     e86:	a0 93 b8 01 	sts	0x01B8, r26
     e8a:	b0 93 b9 01 	sts	0x01B9, r27
}
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <pwm_on>:

void pwm_on(double freq, double duty)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	28 97       	sbiw	r28, 0x08	; 8
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	69 83       	std	Y+1, r22	; 0x01
     eaa:	7a 83       	std	Y+2, r23	; 0x02
     eac:	8b 83       	std	Y+3, r24	; 0x03
     eae:	9c 83       	std	Y+4, r25	; 0x04
     eb0:	2d 83       	std	Y+5, r18	; 0x05
     eb2:	3e 83       	std	Y+6, r19	; 0x06
     eb4:	4f 83       	std	Y+7, r20	; 0x07
     eb6:	58 87       	std	Y+8, r21	; 0x08
	pwm_init();
     eb8:	0e 94 18 07 	call	0xe30	; 0xe30 <pwm_init>
	pwm_set_freq(freq);
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	9a 81       	ldd	r25, Y+2	; 0x02
     ec0:	ab 81       	ldd	r26, Y+3	; 0x03
     ec2:	bc 81       	ldd	r27, Y+4	; 0x04
     ec4:	bc 01       	movw	r22, r24
     ec6:	cd 01       	movw	r24, r26
     ec8:	0e 94 88 07 	call	0xf10	; 0xf10 <pwm_set_freq>
	pwm_set_duty(duty);
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	af 81       	ldd	r26, Y+7	; 0x07
     ed2:	b8 85       	ldd	r27, Y+8	; 0x08
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <pwm_set_duty>
}
     edc:	28 96       	adiw	r28, 0x08	; 8
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <pwm_off>:

void pwm_off(void)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
	pwm_on(0,0);
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	0e 94 4a 07 	call	0xe94	; 0xe94 <pwm_on>
}
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <pwm_set_freq>:
 *
 *	At current settings the range is from about 500 Hz to about 6000 Hz  
 */

uint8_t pwm_set_freq(double freq)
{
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	00 d0       	rcall	.+0      	; 0xf1a <pwm_set_freq+0xa>
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <pwm_set_freq+0xc>
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	69 83       	std	Y+1, r22	; 0x01
     f22:	7a 83       	std	Y+2, r23	; 0x02
     f24:	8b 83       	std	Y+3, r24	; 0x03
     f26:	9c 83       	std	Y+4, r25	; 0x04
	device.pwm_freq = F_CPU / PWM_PRESCALE / freq;
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	74 e2       	ldi	r23, 0x24	; 36
     f2c:	84 ef       	ldi	r24, 0xF4	; 244
     f2e:	97 e4       	ldi	r25, 0x47	; 71
     f30:	29 81       	ldd	r18, Y+1	; 0x01
     f32:	3a 81       	ldd	r19, Y+2	; 0x02
     f34:	4b 81       	ldd	r20, Y+3	; 0x03
     f36:	5c 81       	ldd	r21, Y+4	; 0x04
     f38:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__divsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	80 93 b6 01 	sts	0x01B6, r24
     f44:	90 93 b7 01 	sts	0x01B7, r25
     f48:	a0 93 b8 01 	sts	0x01B8, r26
     f4c:	b0 93 b9 01 	sts	0x01B9, r27
	if (device.pwm_freq < PWM_MIN_RES) { 
     f50:	80 91 b6 01 	lds	r24, 0x01B6
     f54:	90 91 b7 01 	lds	r25, 0x01B7
     f58:	a0 91 b8 01 	lds	r26, 0x01B8
     f5c:	b0 91 b9 01 	lds	r27, 0x01B9
     f60:	bc 01       	movw	r22, r24
     f62:	cd 01       	movw	r24, r26
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 ea       	ldi	r20, 0xA0	; 160
     f6a:	51 e4       	ldi	r21, 0x41	; 65
     f6c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
     f70:	88 23       	and	r24, r24
     f72:	2c f4       	brge	.+10     	; 0xf7e <pwm_set_freq+0x6e>
		OCR2A = PWM_MIN_RES;
     f74:	e3 eb       	ldi	r30, 0xB3	; 179
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	84 e1       	ldi	r24, 0x14	; 20
     f7a:	80 83       	st	Z, r24
     f7c:	29 c0       	rjmp	.+82     	; 0xfd0 <pwm_set_freq+0xc0>
	} else if (device.pwm_freq >= PWM_MAX_RES) { 
     f7e:	80 91 b6 01 	lds	r24, 0x01B6
     f82:	90 91 b7 01 	lds	r25, 0x01B7
     f86:	a0 91 b8 01 	lds	r26, 0x01B8
     f8a:	b0 91 b9 01 	lds	r27, 0x01B9
     f8e:	bc 01       	movw	r22, r24
     f90:	cd 01       	movw	r24, r26
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	4f e7       	ldi	r20, 0x7F	; 127
     f98:	53 e4       	ldi	r21, 0x43	; 67
     f9a:	0e 94 91 10 	call	0x2122	; 0x2122 <__gesf2>
     f9e:	88 23       	and	r24, r24
     fa0:	2c f0       	brlt	.+10     	; 0xfac <pwm_set_freq+0x9c>
		OCR2A = PWM_MAX_RES;
     fa2:	e3 eb       	ldi	r30, 0xB3	; 179
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	80 83       	st	Z, r24
     faa:	12 c0       	rjmp	.+36     	; 0xfd0 <pwm_set_freq+0xc0>
	} else { 
		OCR2A = (uint8_t)device.pwm_freq;
     fac:	03 eb       	ldi	r16, 0xB3	; 179
     fae:	10 e0       	ldi	r17, 0x00	; 0
     fb0:	80 91 b6 01 	lds	r24, 0x01B6
     fb4:	90 91 b7 01 	lds	r25, 0x01B7
     fb8:	a0 91 b8 01 	lds	r26, 0x01B8
     fbc:	b0 91 b9 01 	lds	r27, 0x01B9
     fc0:	bc 01       	movw	r22, r24
     fc2:	cd 01       	movw	r24, r26
     fc4:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__fixunssfsi>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	f8 01       	movw	r30, r16
     fce:	80 83       	st	Z, r24
	}
	return (SC_OK);
     fd0:	80 e0       	ldi	r24, 0x00	; 0
}
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	08 95       	ret

00000fe4 <pwm_set_duty>:
 *	Since I can't seem to get the output pin to work in non-inverted mode
 *	it's done in software in this routine.
 */

uint8_t pwm_set_duty(double duty)
{
     fe4:	cf 92       	push	r12
     fe6:	df 92       	push	r13
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <pwm_set_duty+0x12>
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <pwm_set_duty+0x14>
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	69 83       	std	Y+1, r22	; 0x01
     ffe:	7a 83       	std	Y+2, r23	; 0x02
    1000:	8b 83       	std	Y+3, r24	; 0x03
    1002:	9c 83       	std	Y+4, r25	; 0x04
	if (duty < 0.01) {				// anything approaching 0% 
    1004:	69 81       	ldd	r22, Y+1	; 0x01
    1006:	7a 81       	ldd	r23, Y+2	; 0x02
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	9c 81       	ldd	r25, Y+4	; 0x04
    100c:	2a e0       	ldi	r18, 0x0A	; 10
    100e:	37 ed       	ldi	r19, 0xD7	; 215
    1010:	43 e2       	ldi	r20, 0x23	; 35
    1012:	5c e3       	ldi	r21, 0x3C	; 60
    1014:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
    1018:	88 23       	and	r24, r24
    101a:	2c f4       	brge	.+10     	; 0x1026 <pwm_set_duty+0x42>
		OCR2B = 255;
    101c:	e4 eb       	ldi	r30, 0xB4	; 180
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	80 83       	st	Z, r24
    1024:	4a c0       	rjmp	.+148    	; 0x10ba <pwm_set_duty+0xd6>
	} else if (duty > 99.9) { 		// anything approaching 100%
    1026:	69 81       	ldd	r22, Y+1	; 0x01
    1028:	7a 81       	ldd	r23, Y+2	; 0x02
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	2d ec       	ldi	r18, 0xCD	; 205
    1030:	3c ec       	ldi	r19, 0xCC	; 204
    1032:	47 ec       	ldi	r20, 0xC7	; 199
    1034:	52 e4       	ldi	r21, 0x42	; 66
    1036:	0e 94 91 10 	call	0x2122	; 0x2122 <__gesf2>
    103a:	18 16       	cp	r1, r24
    103c:	24 f4       	brge	.+8      	; 0x1046 <pwm_set_duty+0x62>
		OCR2B = 0;
    103e:	e4 eb       	ldi	r30, 0xB4	; 180
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	10 82       	st	Z, r1
    1044:	3a c0       	rjmp	.+116    	; 0x10ba <pwm_set_duty+0xd6>
	} else {
		OCR2B = (uint8_t)(OCR2A * (1-(duty/100)));
    1046:	0f 2e       	mov	r0, r31
    1048:	f4 eb       	ldi	r31, 0xB4	; 180
    104a:	cf 2e       	mov	r12, r31
    104c:	dd 24       	eor	r13, r13
    104e:	f0 2d       	mov	r31, r0
    1050:	e3 eb       	ldi	r30, 0xB3	; 179
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	aa 27       	eor	r26, r26
    105c:	97 fd       	sbrc	r25, 7
    105e:	a0 95       	com	r26
    1060:	ba 2f       	mov	r27, r26
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__floatsisf>
    106a:	7b 01       	movw	r14, r22
    106c:	8c 01       	movw	r16, r24
    106e:	69 81       	ldd	r22, Y+1	; 0x01
    1070:	7a 81       	ldd	r23, Y+2	; 0x02
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	48 ec       	ldi	r20, 0xC8	; 200
    107c:	52 ec       	ldi	r21, 0xC2	; 194
    107e:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__divsf3>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	bc 01       	movw	r22, r24
    1088:	cd 01       	movw	r24, r26
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e8       	ldi	r20, 0x80	; 128
    1090:	5f e3       	ldi	r21, 0x3F	; 63
    1092:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__addsf3>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	9c 01       	movw	r18, r24
    109c:	ad 01       	movw	r20, r26
    109e:	c8 01       	movw	r24, r16
    10a0:	b7 01       	movw	r22, r14
    10a2:	0e 94 95 10 	call	0x212a	; 0x212a <__mulsf3>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	bc 01       	movw	r22, r24
    10ac:	cd 01       	movw	r24, r26
    10ae:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__fixunssfsi>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	f6 01       	movw	r30, r12
    10b8:	80 83       	st	Z, r24
	}
	OCR2A = (uint8_t)device.pwm_freq;
    10ba:	03 eb       	ldi	r16, 0xB3	; 179
    10bc:	10 e0       	ldi	r17, 0x00	; 0
    10be:	80 91 b6 01 	lds	r24, 0x01B6
    10c2:	90 91 b7 01 	lds	r25, 0x01B7
    10c6:	a0 91 b8 01 	lds	r26, 0x01B8
    10ca:	b0 91 b9 01 	lds	r27, 0x01B9
    10ce:	bc 01       	movw	r22, r24
    10d0:	cd 01       	movw	r24, r26
    10d2:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__fixunssfsi>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	f8 01       	movw	r30, r16
    10dc:	80 83       	st	Z, r24
	return (SC_OK);
    10de:	80 e0       	ldi	r24, 0x00	; 0
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	cf 90       	pop	r12
    10f8:	08 95       	ret

000010fa <tick_init>:
 * tick_100ms()	  - tasks that run every 100 ms
 * tick_1sec()	  - tasks that run every 100 ms
 */

void tick_init(void)
{
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0x00;				// normal mode, no compare values
    1102:	e4 e4       	ldi	r30, 0x44	; 68
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	10 82       	st	Z, r1
	TCCR0B = 0x05;				// normal mode, internal clock / 1024 ~= 7800 Hz
    1108:	e5 e4       	ldi	r30, 0x45	; 69
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	85 e0       	ldi	r24, 0x05	; 5
    110e:	80 83       	st	Z, r24
	TCNT0 = (256 - TICK_10MS_COUNT);// set timer for approx 10 ms overflow
    1110:	e6 e4       	ldi	r30, 0x46	; 70
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	82 eb       	ldi	r24, 0xB2	; 178
    1116:	80 83       	st	Z, r24
	TIMSK0 = (1<<TOIE0);		// enable overflow interrupts
    1118:	ee e6       	ldi	r30, 0x6E	; 110
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	80 83       	st	Z, r24
	device.tick_100ms_count = 10;
    1120:	8a e0       	ldi	r24, 0x0A	; 10
    1122:	80 93 b4 01 	sts	0x01B4, r24
	device.tick_1sec_count = 10;	
    1126:	8a e0       	ldi	r24, 0x0A	; 10
    1128:	80 93 b5 01 	sts	0x01B5, r24
}
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
    1132:	1f 92       	push	r1
    1134:	0f 92       	push	r0
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	0f 92       	push	r0
    113a:	11 24       	eor	r1, r1
    113c:	8f 93       	push	r24
    113e:	ef 93       	push	r30
    1140:	ff 93       	push	r31
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = (256 - TICK_10MS_COUNT);	// reset timer for approx 10 ms overflow
    114a:	e6 e4       	ldi	r30, 0x46	; 70
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	82 eb       	ldi	r24, 0xB2	; 178
    1150:	80 83       	st	Z, r24
	device.tick_flag = true;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	80 93 b3 01 	sts	0x01B3, r24
}
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	ff 91       	pop	r31
    115e:	ef 91       	pop	r30
    1160:	8f 91       	pop	r24
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	0f 90       	pop	r0
    1168:	1f 90       	pop	r1
    116a:	18 95       	reti

0000116c <tick_callback>:

uint8_t tick_callback(void)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	0f 92       	push	r0
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
	if (device.tick_flag == false) { return (SC_NOOP);}
    1176:	80 91 b3 01 	lds	r24, 0x01B3
    117a:	88 23       	and	r24, r24
    117c:	19 f4       	brne	.+6      	; 0x1184 <tick_callback+0x18>
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	25 c0       	rjmp	.+74     	; 0x11ce <tick_callback+0x62>
	device.tick_flag = false;
    1184:	10 92 b3 01 	sts	0x01B3, r1

	tick_10ms();
    1188:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <tick_10ms>

	if (--device.tick_100ms_count != 0) { return (SC_OK);}
    118c:	80 91 b4 01 	lds	r24, 0x01B4
    1190:	81 50       	subi	r24, 0x01	; 1
    1192:	80 93 b4 01 	sts	0x01B4, r24
    1196:	80 91 b4 01 	lds	r24, 0x01B4
    119a:	88 23       	and	r24, r24
    119c:	11 f0       	breq	.+4      	; 0x11a2 <tick_callback+0x36>
    119e:	19 82       	std	Y+1, r1	; 0x01
    11a0:	16 c0       	rjmp	.+44     	; 0x11ce <tick_callback+0x62>
	device.tick_100ms_count = 10;
    11a2:	8a e0       	ldi	r24, 0x0A	; 10
    11a4:	80 93 b4 01 	sts	0x01B4, r24
	tick_100ms();
    11a8:	0e 94 f5 08 	call	0x11ea	; 0x11ea <tick_100ms>

	if (--device.tick_1sec_count != 0) { return (SC_OK);}
    11ac:	80 91 b5 01 	lds	r24, 0x01B5
    11b0:	81 50       	subi	r24, 0x01	; 1
    11b2:	80 93 b5 01 	sts	0x01B5, r24
    11b6:	80 91 b5 01 	lds	r24, 0x01B5
    11ba:	88 23       	and	r24, r24
    11bc:	11 f0       	breq	.+4      	; 0x11c2 <tick_callback+0x56>
    11be:	19 82       	std	Y+1, r1	; 0x01
    11c0:	06 c0       	rjmp	.+12     	; 0x11ce <tick_callback+0x62>
	device.tick_1sec_count = 10;
    11c2:	8a e0       	ldi	r24, 0x0A	; 10
    11c4:	80 93 b5 01 	sts	0x01B5, r24
	tick_1sec();
    11c8:	0e 94 fe 08 	call	0x11fc	; 0x11fc <tick_1sec>

	return (SC_OK);
    11cc:	19 82       	std	Y+1, r1	; 0x01
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <tick_10ms>:

void tick_10ms(void)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
	sensor_callback();			// run the temperature sensor every 10 ms.
    11e0:	0e 94 5d 05 	call	0xaba	; 0xaba <sensor_callback>
}
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <tick_100ms>:

void tick_100ms(void)
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
	heater_callback();			// run the heater controller every 100 ms.
    11f2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <heater_callback>
}
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <tick_1sec>:

void tick_1sec(void)
{
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
//	led_toggle();
	return;
}
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <led_on>:
 * led_off()
 * led_toggle()
 */

void led_on(void) 
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
	LED_PORT &= ~(LED_PIN);
    1212:	ab e2       	ldi	r26, 0x2B	; 43
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	eb e2       	ldi	r30, 0x2B	; 43
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	8b 7f       	andi	r24, 0xFB	; 251
    121e:	8c 93       	st	X, r24
}
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <led_off>:

void led_off(void) 
{
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
	LED_PORT |= LED_PIN;
    122e:	ab e2       	ldi	r26, 0x2B	; 43
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	eb e2       	ldi	r30, 0x2B	; 43
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	84 60       	ori	r24, 0x04	; 4
    123a:	8c 93       	st	X, r24
}
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <led_toggle>:

void led_toggle(void) 
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
	if (LED_PORT && LED_PIN) {
    124a:	eb e2       	ldi	r30, 0x2B	; 43
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	88 23       	and	r24, r24
    1252:	19 f0       	breq	.+6      	; 0x125a <led_toggle+0x18>
		led_on();
    1254:	0e 94 05 09 	call	0x120a	; 0x120a <led_on>
    1258:	02 c0       	rjmp	.+4      	; 0x125e <led_toggle+0x1c>
	} else {
		led_off();
    125a:	0e 94 13 09 	call	0x1226	; 0x1226 <led_off>
	}
}
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <device_reset>:
 *	device_read_byte() 	- read a byte from Kinen channel into device structs
 *	device_write_byte() - write a byte from device to Kinen channel
 */

void device_reset(void)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
	return;
}
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <device_read_byte>:

uint8_t device_read_byte(uint8_t addr, uint8_t *data)
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <device_read_byte+0x6>
    1278:	00 d0       	rcall	.+0      	; 0x127a <device_read_byte+0x8>
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	7b 83       	std	Y+3, r23	; 0x03
    1282:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	80 51       	subi	r24, 0x10	; 16
    1288:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	8b 30       	cpi	r24, 0x0B	; 11
    128e:	18 f0       	brcs	.+6      	; 0x1296 <device_read_byte+0x24>
    1290:	88 e1       	ldi	r24, 0x18	; 24
    1292:	8c 83       	std	Y+4, r24	; 0x04
    1294:	0b c0       	rjmp	.+22     	; 0x12ac <device_read_byte+0x3a>
	*data = device.array[addr];
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	88 2f       	mov	r24, r24
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	fc 01       	movw	r30, r24
    129e:	e6 54       	subi	r30, 0x46	; 70
    12a0:	fe 4f       	sbci	r31, 0xFE	; 254
    12a2:	80 81       	ld	r24, Z
    12a4:	ea 81       	ldd	r30, Y+2	; 0x02
    12a6:	fb 81       	ldd	r31, Y+3	; 0x03
    12a8:	80 83       	st	Z, r24
	return (SC_OK);
    12aa:	1c 82       	std	Y+4, r1	; 0x04
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
}
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <device_write_byte>:

uint8_t device_write_byte(uint8_t addr, uint8_t data)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <device_write_byte+0x6>
    12c2:	0f 92       	push	r0
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	80 51       	subi	r24, 0x10	; 16
    12d0:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	8b 30       	cpi	r24, 0x0B	; 11
    12d6:	18 f0       	brcs	.+6      	; 0x12de <device_write_byte+0x22>
    12d8:	88 e1       	ldi	r24, 0x18	; 24
    12da:	8b 83       	std	Y+3, r24	; 0x03
    12dc:	09 c0       	rjmp	.+18     	; 0x12f0 <device_write_byte+0x34>
	// There are no checks in here for read-only locations
	// Assumes all locations are writable.
	device.array[addr] = data;
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	fc 01       	movw	r30, r24
    12e6:	e6 54       	subi	r30, 0x46	; 70
    12e8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	80 83       	st	Z, r24
	return (SC_OK);
    12ee:	1b 82       	std	Y+3, r1	; 0x03
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <kinen_init>:
 * kinen_init() - set up Kinen subsystems; master or slave
 *
 *	Would like some kind of auto-detect here. For now it's just commenting
 */
void kinen_init(void)
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
//	kinen_master_init();
	kinen_slave_init();
    1306:	0e 94 90 09 	call	0x1320	; 0x1320 <kinen_slave_init>
}
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <kinen_callback>:
 *	Returns SC_NOOP if no operation was performed
 *	Returns EAGAIN if the function should block lower-priority functions
 *	in the main DISPATCH loop
 */
uint8_t kinen_callback(void)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
//	return (SC_OK);			// return from a successful operation
//	return (SC_EAGAIN);		// return if lower priority tasks should be blocked
	return (SC_NOOP);		// return if no operation was performed 
    1318:	83 e0       	ldi	r24, 0x03	; 3
}
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <kinen_slave_init>:

/*
 * kinen_slave_init() - setup atmega SPI peripheral to be the OCB slave 
 */
void kinen_slave_init(void)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62

//	PRR |= 0x07;				// don't screw with the power reduction register
	DDRB &= ~(1<<DDB4);			// Set MISO output, all others unaffected
    1328:	a4 e2       	ldi	r26, 0x24	; 36
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e4 e2       	ldi	r30, 0x24	; 36
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8f 7e       	andi	r24, 0xEF	; 239
    1334:	8c 93       	st	X, r24
	SPCR = (1<<SPIE | 1<<SPE);	// Enable SPI and its interrupt, set MSB first, slave mode
    1336:	ec e4       	ldi	r30, 0x4C	; 76
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 ec       	ldi	r24, 0xC0	; 192
    133c:	80 83       	st	Z, r24
	SPCR = (1<<CPOL | 1<<CPHA);	// Uncomment for mode 3 operation, comment for mode 0
    133e:	ec e4       	ldi	r30, 0x4C	; 76
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	8c e0       	ldi	r24, 0x0C	; 12
    1344:	80 83       	st	Z, r24
	memset(&ki.array, 0, sizeof(ki.array));
    1346:	80 e6       	ldi	r24, 0x60	; 96
    1348:	91 e0       	ldi	r25, 0x01	; 1
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	40 e1       	ldi	r20, 0x10	; 16
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	0e 94 74 11 	call	0x22e8	; 0x22e8 <memset>

	ki_wait_time = DEVICE_WAIT_TIME;	// setup read-only values
    1356:	8a e0       	ldi	r24, 0x0A	; 10
    1358:	80 93 63 01 	sts	0x0163, r24
	ki_device_type = DEVICE_TYPE;
    135c:	84 e0       	ldi	r24, 0x04	; 4
    135e:	80 93 68 01 	sts	0x0168, r24
	ki_device_id_hi = DEVICE_ID_HI;
    1362:	10 92 69 01 	sts	0x0169, r1
	ki_device_id_lo = DEVICE_ID_LO;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	80 93 6a 01 	sts	0x016A, r24
	ki_device_rev_major = DEVICE_REV_MAJOR;
    136c:	10 92 6b 01 	sts	0x016B, r1
	ki_device_rev_minor = DEVICE_REV_MINOR;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	80 93 6c 01 	sts	0x016C, r24
	ki_device_uuid_1 = DEVICE_UUID_1;
    1376:	10 92 6d 01 	sts	0x016D, r1
	ki_device_uuid_2 = DEVICE_UUID_2;
    137a:	10 92 6e 01 	sts	0x016E, r1
	ki_device_uuid_3 = DEVICE_UUID_3;
    137e:	10 92 6f 01 	sts	0x016F, r1

	ki_status = SC_OK;
    1382:	10 92 61 01 	sts	0x0161, r1
	SPDR = ki_status;
    1386:	ee e4       	ldi	r30, 0x4E	; 78
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 91 61 01 	lds	r24, 0x0161
    138e:	80 83       	st	Z, r24
}
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <__vector_17>:
 * SPI Slave RX Interrupt() - interrupts on byte received
 *
 * Uses a 2 phase state machine to toggle back and forth between ADDR and DATA bytes
 */
ISR(SPI_STC_vect)
{
    1396:	1f 92       	push	r1
    1398:	0f 92       	push	r0
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	2f 93       	push	r18
    13a2:	3f 93       	push	r19
    13a4:	4f 93       	push	r20
    13a6:	5f 93       	push	r21
    13a8:	6f 93       	push	r22
    13aa:	7f 93       	push	r23
    13ac:	8f 93       	push	r24
    13ae:	9f 93       	push	r25
    13b0:	af 93       	push	r26
    13b2:	bf 93       	push	r27
    13b4:	ef 93       	push	r30
    13b6:	ff 93       	push	r31
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
	// receive address byte
	if (ki_slave.phase == KINEN_ADDR) {
    13c0:	80 91 00 01 	lds	r24, 0x0100
    13c4:	88 23       	and	r24, r24
    13c6:	c9 f5       	brne	.+114    	; 0x143a <__vector_17+0xa4>
		ki_slave.phase = KINEN_DATA;	// advance phase
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	80 93 00 01 	sts	0x0100, r24
		ki_slave.addr = SPDR;		// read and save the address byte
    13ce:	ee e4       	ldi	r30, 0x4E	; 78
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	80 93 01 01 	sts	0x0101, r24
		if (ki_command == KINEN_WRITE) { // write is simple...
    13d8:	80 91 60 01 	lds	r24, 0x0160
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	29 f4       	brne	.+10     	; 0x13ea <__vector_17+0x54>
			SPDR = KINEN_OK_BYTE;			// already saved addr, now return an OK
    13e0:	ee e4       	ldi	r30, 0x4E	; 78
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	8a e5       	ldi	r24, 0x5A	; 90
    13e6:	80 83       	st	Z, r24
    13e8:	4a c0       	rjmp	.+148    	; 0x147e <__vector_17+0xe8>
		} else {
			if (ki_slave.addr < KINEN_COMMON_MAX) {	// handle OCB address space
    13ea:	80 91 01 01 	lds	r24, 0x0101
    13ee:	80 31       	cpi	r24, 0x10	; 16
    13f0:	60 f4       	brcc	.+24     	; 0x140a <__vector_17+0x74>
				SPDR = ki.array[ki_slave.addr];
    13f2:	ae e4       	ldi	r26, 0x4E	; 78
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	80 91 01 01 	lds	r24, 0x0101
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	fc 01       	movw	r30, r24
    1400:	e0 5a       	subi	r30, 0xA0	; 160
    1402:	fe 4f       	sbci	r31, 0xFE	; 254
    1404:	80 81       	ld	r24, Z
    1406:	8c 93       	st	X, r24
    1408:	3a c0       	rjmp	.+116    	; 0x147e <__vector_17+0xe8>
			} else {								// handle device address space
				if ((ki_status = device_read_byte(ki_slave.addr, &ki_slave.data)) == SC_OK) {
    140a:	80 91 01 01 	lds	r24, 0x0101
    140e:	22 e0       	ldi	r18, 0x02	; 2
    1410:	31 e0       	ldi	r19, 0x01	; 1
    1412:	b9 01       	movw	r22, r18
    1414:	0e 94 39 09 	call	0x1272	; 0x1272 <device_read_byte>
    1418:	80 93 61 01 	sts	0x0161, r24
    141c:	80 91 61 01 	lds	r24, 0x0161
    1420:	88 23       	and	r24, r24
    1422:	31 f4       	brne	.+12     	; 0x1430 <__vector_17+0x9a>
					SPDR = ki_slave.data;
    1424:	ee e4       	ldi	r30, 0x4E	; 78
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 91 02 01 	lds	r24, 0x0102
    142c:	80 83       	st	Z, r24
    142e:	27 c0       	rjmp	.+78     	; 0x147e <__vector_17+0xe8>
				} else {
					SPDR = KINEN_ERR_BYTE;
    1430:	ee e4       	ldi	r30, 0x4E	; 78
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	85 ea       	ldi	r24, 0xA5	; 165
    1436:	80 83       	st	Z, r24
    1438:	22 c0       	rjmp	.+68     	; 0x147e <__vector_17+0xe8>
			}
		}

	// receive data byte
	} else {
		ki_slave.phase = KINEN_ADDR;	// advance phase
    143a:	10 92 00 01 	sts	0x0100, r1
		ki_slave.data = SPDR;		// read and save the data byte
    143e:	ee e4       	ldi	r30, 0x4E	; 78
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	80 93 02 01 	sts	0x0102, r24
		if (ki_command == KINEN_WRITE) {
    1448:	80 91 60 01 	lds	r24, 0x0160
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	b9 f4       	brne	.+46     	; 0x147e <__vector_17+0xe8>
			if (ki_slave.addr < KINEN_COMMON_MAX) {
    1450:	80 91 01 01 	lds	r24, 0x0101
    1454:	80 31       	cpi	r24, 0x10	; 16
    1456:	50 f4       	brcc	.+20     	; 0x146c <__vector_17+0xd6>
				ki_status = _slave_write_byte(ki_slave.addr, ki_slave.data);
    1458:	80 91 01 01 	lds	r24, 0x0101
    145c:	90 91 02 01 	lds	r25, 0x0102
    1460:	69 2f       	mov	r22, r25
    1462:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <_slave_write_byte>
    1466:	80 93 61 01 	sts	0x0161, r24
    146a:	09 c0       	rjmp	.+18     	; 0x147e <__vector_17+0xe8>
			} else {
				ki_status = device_write_byte(ki_slave.addr, ki_slave.data);
    146c:	80 91 01 01 	lds	r24, 0x0101
    1470:	90 91 02 01 	lds	r25, 0x0102
    1474:	69 2f       	mov	r22, r25
    1476:	0e 94 5e 09 	call	0x12bc	; 0x12bc <device_write_byte>
    147a:	80 93 61 01 	sts	0x0161, r24
			}
		}
	}
}
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	ff 91       	pop	r31
    1484:	ef 91       	pop	r30
    1486:	bf 91       	pop	r27
    1488:	af 91       	pop	r26
    148a:	9f 91       	pop	r25
    148c:	8f 91       	pop	r24
    148e:	7f 91       	pop	r23
    1490:	6f 91       	pop	r22
    1492:	5f 91       	pop	r21
    1494:	4f 91       	pop	r20
    1496:	3f 91       	pop	r19
    1498:	2f 91       	pop	r18
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	0f 90       	pop	r0
    14a0:	1f 90       	pop	r1
    14a2:	18 95       	reti

000014a4 <_slave_write_byte>:

/* 
 * _slave_write_byte() - helper to write byte to a non-device address
 */
static uint8_t _slave_write_byte(const uint8_t addr, const uint8_t data)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <_slave_write_byte+0x6>
    14aa:	0f 92       	push	r0
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	6a 83       	std	Y+2, r22	; 0x02
	if (addr == KINEN_COMMAND) {
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	88 23       	and	r24, r24
    14b8:	21 f4       	brne	.+8      	; 0x14c2 <_slave_write_byte+0x1e>
		ki_command = data; 
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	80 93 60 01 	sts	0x0160, r24
    14c0:	12 c0       	rjmp	.+36     	; 0x14e6 <_slave_write_byte+0x42>

	} else if (addr == KINEN_ADDR_PAGE) { 
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	84 30       	cpi	r24, 0x04	; 4
    14c6:	21 f4       	brne	.+8      	; 0x14d0 <_slave_write_byte+0x2c>
		ki_addr_page = data; 
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	80 93 64 01 	sts	0x0164, r24
    14ce:	0b c0       	rjmp	.+22     	; 0x14e6 <_slave_write_byte+0x42>

	} else if (addr == KINEN_RESET) {
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	85 30       	cpi	r24, 0x05	; 5
    14d4:	29 f4       	brne	.+10     	; 0x14e0 <_slave_write_byte+0x3c>
		kinen_slave_init();
    14d6:	0e 94 90 09 	call	0x1320	; 0x1320 <kinen_slave_init>
		device_reset();
    14da:	0e 94 32 09 	call	0x1264	; 0x1264 <device_reset>
    14de:	03 c0       	rjmp	.+6      	; 0x14e6 <_slave_write_byte+0x42>

	} else {
		return (SC_READ_ONLY_ADDRESS);
    14e0:	89 e1       	ldi	r24, 0x19	; 25
    14e2:	8b 83       	std	Y+3, r24	; 0x03
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <_slave_write_byte+0x44>
	}
	return (SC_OK);
    14e6:	1b 82       	std	Y+3, r1	; 0x03
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <std_dev>:
 *
 *	"A lot of people talk about standard deviation but what is a standard deviant?"
 */

double std_dev(double a[], uint8_t n, double *mean) 
{
    14f6:	ef 92       	push	r14
    14f8:	ff 92       	push	r15
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	66 97       	sbiw	r28, 0x16	; 22
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	9f 87       	std	Y+15, r25	; 0x0f
    1514:	8e 87       	std	Y+14, r24	; 0x0e
    1516:	68 8b       	std	Y+16, r22	; 0x10
    1518:	5a 8b       	std	Y+18, r21	; 0x12
    151a:	49 8b       	std	Y+17, r20	; 0x11
	if(n == 0) { return (0);}
    151c:	88 89       	ldd	r24, Y+16	; 0x10
    151e:	88 23       	and	r24, r24
    1520:	49 f4       	brne	.+18     	; 0x1534 <std_dev+0x3e>
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a0 e0       	ldi	r26, 0x00	; 0
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	8b 8b       	std	Y+19, r24	; 0x13
    152c:	9c 8b       	std	Y+20, r25	; 0x14
    152e:	ad 8b       	std	Y+21, r26	; 0x15
    1530:	be 8b       	std	Y+22, r27	; 0x16
    1532:	ae c0       	rjmp	.+348    	; 0x1690 <std_dev+0x19a>
	double sum = 0;
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	a0 e0       	ldi	r26, 0x00	; 0
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	8a 87       	std	Y+10, r24	; 0x0a
    153e:	9b 87       	std	Y+11, r25	; 0x0b
    1540:	ac 87       	std	Y+12, r26	; 0x0c
    1542:	bd 87       	std	Y+13, r27	; 0x0d
	double sq_sum = 0;
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a0 e0       	ldi	r26, 0x00	; 0
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	8e 83       	std	Y+6, r24	; 0x06
    154e:	9f 83       	std	Y+7, r25	; 0x07
    1550:	a8 87       	std	Y+8, r26	; 0x08
    1552:	b9 87       	std	Y+9, r27	; 0x09
	for(uint8_t i=0; i<n; ++i) {
    1554:	19 82       	std	Y+1, r1	; 0x01
    1556:	43 c0       	rjmp	.+134    	; 0x15de <std_dev+0xe8>
		sum += a[i];
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	9c 01       	movw	r18, r24
    1560:	22 0f       	add	r18, r18
    1562:	33 1f       	adc	r19, r19
    1564:	22 0f       	add	r18, r18
    1566:	33 1f       	adc	r19, r19
    1568:	8e 85       	ldd	r24, Y+14	; 0x0e
    156a:	9f 85       	ldd	r25, Y+15	; 0x0f
    156c:	fc 01       	movw	r30, r24
    156e:	e2 0f       	add	r30, r18
    1570:	f3 1f       	adc	r31, r19
    1572:	20 81       	ld	r18, Z
    1574:	31 81       	ldd	r19, Z+1	; 0x01
    1576:	42 81       	ldd	r20, Z+2	; 0x02
    1578:	53 81       	ldd	r21, Z+3	; 0x03
    157a:	6a 85       	ldd	r22, Y+10	; 0x0a
    157c:	7b 85       	ldd	r23, Y+11	; 0x0b
    157e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1580:	9d 85       	ldd	r25, Y+13	; 0x0d
    1582:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__addsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	8a 87       	std	Y+10, r24	; 0x0a
    158c:	9b 87       	std	Y+11, r25	; 0x0b
    158e:	ac 87       	std	Y+12, r26	; 0x0c
    1590:	bd 87       	std	Y+13, r27	; 0x0d
		sq_sum += square(a[i]);
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	88 2f       	mov	r24, r24
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	9c 01       	movw	r18, r24
    159a:	22 0f       	add	r18, r18
    159c:	33 1f       	adc	r19, r19
    159e:	22 0f       	add	r18, r18
    15a0:	33 1f       	adc	r19, r19
    15a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    15a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    15a6:	fc 01       	movw	r30, r24
    15a8:	e2 0f       	add	r30, r18
    15aa:	f3 1f       	adc	r31, r19
    15ac:	80 81       	ld	r24, Z
    15ae:	91 81       	ldd	r25, Z+1	; 0x01
    15b0:	a2 81       	ldd	r26, Z+2	; 0x02
    15b2:	b3 81       	ldd	r27, Z+3	; 0x03
    15b4:	bc 01       	movw	r22, r24
    15b6:	cd 01       	movw	r24, r26
    15b8:	0e 94 3a 11 	call	0x2274	; 0x2274 <square>
    15bc:	9b 01       	movw	r18, r22
    15be:	ac 01       	movw	r20, r24
    15c0:	6e 81       	ldd	r22, Y+6	; 0x06
    15c2:	7f 81       	ldd	r23, Y+7	; 0x07
    15c4:	88 85       	ldd	r24, Y+8	; 0x08
    15c6:	99 85       	ldd	r25, Y+9	; 0x09
    15c8:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__addsf3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	8e 83       	std	Y+6, r24	; 0x06
    15d2:	9f 83       	std	Y+7, r25	; 0x07
    15d4:	a8 87       	std	Y+8, r26	; 0x08
    15d6:	b9 87       	std	Y+9, r27	; 0x09
double std_dev(double a[], uint8_t n, double *mean) 
{
	if(n == 0) { return (0);}
	double sum = 0;
	double sq_sum = 0;
	for(uint8_t i=0; i<n; ++i) {
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	8f 5f       	subi	r24, 0xFF	; 255
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	99 81       	ldd	r25, Y+1	; 0x01
    15e0:	88 89       	ldd	r24, Y+16	; 0x10
    15e2:	98 17       	cp	r25, r24
    15e4:	08 f4       	brcc	.+2      	; 0x15e8 <std_dev+0xf2>
    15e6:	b8 cf       	rjmp	.-144    	; 0x1558 <std_dev+0x62>
		sum += a[i];
		sq_sum += square(a[i]);
	}
	*mean = sum / n;
    15e8:	88 89       	ldd	r24, Y+16	; 0x10
    15ea:	88 2f       	mov	r24, r24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	aa 27       	eor	r26, r26
    15f0:	97 fd       	sbrc	r25, 7
    15f2:	a0 95       	com	r26
    15f4:	ba 2f       	mov	r27, r26
    15f6:	bc 01       	movw	r22, r24
    15f8:	cd 01       	movw	r24, r26
    15fa:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__floatsisf>
    15fe:	9b 01       	movw	r18, r22
    1600:	ac 01       	movw	r20, r24
    1602:	6a 85       	ldd	r22, Y+10	; 0x0a
    1604:	7b 85       	ldd	r23, Y+11	; 0x0b
    1606:	8c 85       	ldd	r24, Y+12	; 0x0c
    1608:	9d 85       	ldd	r25, Y+13	; 0x0d
    160a:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__divsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	e9 89       	ldd	r30, Y+17	; 0x11
    1614:	fa 89       	ldd	r31, Y+18	; 0x12
    1616:	80 83       	st	Z, r24
    1618:	91 83       	std	Z+1, r25	; 0x01
    161a:	a2 83       	std	Z+2, r26	; 0x02
    161c:	b3 83       	std	Z+3, r27	; 0x03
	double variance = (sq_sum / n) - square(*mean);
    161e:	88 89       	ldd	r24, Y+16	; 0x10
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	aa 27       	eor	r26, r26
    1626:	97 fd       	sbrc	r25, 7
    1628:	a0 95       	com	r26
    162a:	ba 2f       	mov	r27, r26
    162c:	bc 01       	movw	r22, r24
    162e:	cd 01       	movw	r24, r26
    1630:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__floatsisf>
    1634:	9b 01       	movw	r18, r22
    1636:	ac 01       	movw	r20, r24
    1638:	6e 81       	ldd	r22, Y+6	; 0x06
    163a:	7f 81       	ldd	r23, Y+7	; 0x07
    163c:	88 85       	ldd	r24, Y+8	; 0x08
    163e:	99 85       	ldd	r25, Y+9	; 0x09
    1640:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__divsf3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	7c 01       	movw	r14, r24
    164a:	8d 01       	movw	r16, r26
    164c:	e9 89       	ldd	r30, Y+17	; 0x11
    164e:	fa 89       	ldd	r31, Y+18	; 0x12
    1650:	80 81       	ld	r24, Z
    1652:	91 81       	ldd	r25, Z+1	; 0x01
    1654:	a2 81       	ldd	r26, Z+2	; 0x02
    1656:	b3 81       	ldd	r27, Z+3	; 0x03
    1658:	bc 01       	movw	r22, r24
    165a:	cd 01       	movw	r24, r26
    165c:	0e 94 3a 11 	call	0x2274	; 0x2274 <square>
    1660:	9b 01       	movw	r18, r22
    1662:	ac 01       	movw	r20, r24
    1664:	c8 01       	movw	r24, r16
    1666:	b7 01       	movw	r22, r14
    1668:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__subsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	8a 83       	std	Y+2, r24	; 0x02
    1672:	9b 83       	std	Y+3, r25	; 0x03
    1674:	ac 83       	std	Y+4, r26	; 0x04
    1676:	bd 83       	std	Y+5, r27	; 0x05
	return sqrt(variance);
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	ac 81       	ldd	r26, Y+4	; 0x04
    167e:	bd 81       	ldd	r27, Y+5	; 0x05
    1680:	bc 01       	movw	r22, r24
    1682:	cd 01       	movw	r24, r26
    1684:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <sqrt>
    1688:	6b 8b       	std	Y+19, r22	; 0x13
    168a:	7c 8b       	std	Y+20, r23	; 0x14
    168c:	8d 8b       	std	Y+21, r24	; 0x15
    168e:	9e 8b       	std	Y+22, r25	; 0x16
    1690:	8b 89       	ldd	r24, Y+19	; 0x13
    1692:	9c 89       	ldd	r25, Y+20	; 0x14
    1694:	ad 89       	ldd	r26, Y+21	; 0x15
    1696:	be 89       	ldd	r27, Y+22	; 0x16
}
    1698:	bc 01       	movw	r22, r24
    169a:	cd 01       	movw	r24, r26
    169c:	66 96       	adiw	r28, 0x16	; 22
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	ff 90       	pop	r15
    16b2:	ef 90       	pop	r14
    16b4:	08 95       	ret

000016b6 <set_baud_rate>:
uint8_t rx_buffer_tail = 0;
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_buffer_head = 0;
volatile uint8_t tx_buffer_tail = 0;

static void set_baud_rate(long baud) {
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <set_baud_rate+0x6>
    16bc:	00 d0       	rcall	.+0      	; 0x16be <set_baud_rate+0x8>
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <set_baud_rate+0xa>
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	6b 83       	std	Y+3, r22	; 0x03
    16c6:	7c 83       	std	Y+4, r23	; 0x04
    16c8:	8d 83       	std	Y+5, r24	; 0x05
    16ca:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t UBRR0_value = (F_CPU / (8 * baud)) - 1;
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	ad 81       	ldd	r26, Y+5	; 0x05
    16d2:	be 81       	ldd	r27, Y+6	; 0x06
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	aa 1f       	adc	r26, r26
    16da:	bb 1f       	adc	r27, r27
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	aa 1f       	adc	r26, r26
    16e2:	bb 1f       	adc	r27, r27
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	aa 1f       	adc	r26, r26
    16ea:	bb 1f       	adc	r27, r27
    16ec:	9c 01       	movw	r18, r24
    16ee:	ad 01       	movw	r20, r26
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	92 e1       	ldi	r25, 0x12	; 18
    16f4:	aa e7       	ldi	r26, 0x7A	; 122
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__udivmodsi4>
    1700:	da 01       	movw	r26, r20
    1702:	c9 01       	movw	r24, r18
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = UBRR0_value >> 8;
    170a:	e5 ec       	ldi	r30, 0xC5	; 197
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	9a 81       	ldd	r25, Y+2	; 0x02
    1712:	89 2f       	mov	r24, r25
    1714:	99 27       	eor	r25, r25
    1716:	80 83       	st	Z, r24
	UBRR0L = UBRR0_value;
    1718:	e4 ec       	ldi	r30, 0xC4	; 196
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	80 83       	st	Z, r24
	UCSR0A &= ~(1<<U2X0);		// baud doubler off
    1720:	a0 ec       	ldi	r26, 0xC0	; 192
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e0 ec       	ldi	r30, 0xC0	; 192
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	8d 7f       	andi	r24, 0xFD	; 253
    172c:	8c 93       	st	X, r24
}
    172e:	26 96       	adiw	r28, 0x06	; 6
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <serial_init>:

void serial_init(long baud)
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	00 d0       	rcall	.+0      	; 0x1746 <serial_init+0x6>
    1746:	00 d0       	rcall	.+0      	; 0x1748 <serial_init+0x8>
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	69 83       	std	Y+1, r22	; 0x01
    174e:	7a 83       	std	Y+2, r23	; 0x02
    1750:	8b 83       	std	Y+3, r24	; 0x03
    1752:	9c 83       	std	Y+4, r25	; 0x04
	set_baud_rate(baud);
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	9a 81       	ldd	r25, Y+2	; 0x02
    1758:	ab 81       	ldd	r26, Y+3	; 0x03
    175a:	bc 81       	ldd	r27, Y+4	; 0x04
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <set_baud_rate>
	UCSR0B |= 1<<RXEN0;			// enable rx and tx
    1764:	a1 ec       	ldi	r26, 0xC1	; 193
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e1 ec       	ldi	r30, 0xC1	; 193
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	80 61       	ori	r24, 0x10	; 16
    1770:	8c 93       	st	X, r24
	UCSR0B |= 1<<TXEN0;	
    1772:	a1 ec       	ldi	r26, 0xC1	; 193
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e1 ec       	ldi	r30, 0xC1	; 193
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	88 60       	ori	r24, 0x08	; 8
    177e:	8c 93       	st	X, r24
	UCSR0B |= 1<<RXCIE0;		// enable interrupt on complete reception of a byte
    1780:	a1 ec       	ldi	r26, 0xC1	; 193
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e1 ec       	ldi	r30, 0xC1	; 193
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	80 68       	ori	r24, 0x80	; 128
    178c:	8c 93       	st	X, r24
	// USART defaults to 8-bit, no parity, 1 stop bit
}
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <serial_write>:

void serial_write(uint8_t data) {
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <serial_write+0x6>
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = tx_buffer_head + 1;	// Calculate next head
    17a8:	80 91 05 01 	lds	r24, 0x0105
    17ac:	8f 5f       	subi	r24, 0xFF	; 255
    17ae:	89 83       	std	Y+1, r24	; 0x01
	if (next_head == TX_BUFFER_SIZE) {
		next_head = 0; 
	}
	// Enable Data Register Empty Interrupt to make sure tx-streaming is running
	UCSR0B |= (1<<UDRIE0); 
    17b0:	a1 ec       	ldi	r26, 0xC1	; 193
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e1 ec       	ldi	r30, 0xC1	; 193
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	80 62       	ori	r24, 0x20	; 32
    17bc:	8c 93       	st	X, r24
	while (next_head == tx_buffer_tail); 	// Wait until there is space in the buffer
    17be:	90 91 06 01 	lds	r25, 0x0106
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	89 17       	cp	r24, r25
    17c6:	d9 f3       	breq	.-10     	; 0x17be <serial_write+0x22>

	tx_buffer[tx_buffer_head] = data;		// Store data and advance head
    17c8:	80 91 05 01 	lds	r24, 0x0105
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	fc 01       	movw	r30, r24
    17d2:	eb 53       	subi	r30, 0x3B	; 59
    17d4:	fd 4f       	sbci	r31, 0xFD	; 253
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	80 83       	st	Z, r24
	tx_buffer_head = next_head;
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	80 93 05 01 	sts	0x0105, r24
}
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <__vector_19>:

// Data Register Empty Interrupt handler
ISR(USART_UDRE_vect)
{
    17ea:	1f 92       	push	r1
    17ec:	0f 92       	push	r0
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	0f 92       	push	r0
    17f2:	11 24       	eor	r1, r1
    17f4:	8f 93       	push	r24
    17f6:	9f 93       	push	r25
    17f8:	af 93       	push	r26
    17fa:	bf 93       	push	r27
    17fc:	ef 93       	push	r30
    17fe:	ff 93       	push	r31
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	0f 92       	push	r0
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
	uint8_t tail = tx_buffer_tail;	// Temporary tx_buffer_tail (to optimize for volatile)
    180a:	80 91 06 01 	lds	r24, 0x0106
    180e:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = tx_buffer[tail];			// Send a byte from the buffer	
    1810:	a6 ec       	ldi	r26, 0xC6	; 198
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	fc 01       	movw	r30, r24
    181c:	eb 53       	subi	r30, 0x3B	; 59
    181e:	fd 4f       	sbci	r31, 0xFD	; 253
    1820:	80 81       	ld	r24, Z
    1822:	8c 93       	st	X, r24
    tail++;							// Update tail position
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	8f 5f       	subi	r24, 0xFF	; 255
    1828:	89 83       	std	Y+1, r24	; 0x01
    if (tail == TX_BUFFER_SIZE) { tail = 0; }
	tx_buffer_tail = tail;
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	80 93 06 01 	sts	0x0106, r24

	// Turn off Data Register Empty Interrupt to stop tx-streaming if this concludes the transfer
	if (tail == tx_buffer_head) { 
    1830:	90 91 05 01 	lds	r25, 0x0105
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	89 17       	cp	r24, r25
    1838:	39 f4       	brne	.+14     	; 0x1848 <__vector_19+0x5e>
		UCSR0B &= ~(1<<UDRIE0);
    183a:	a1 ec       	ldi	r26, 0xC1	; 193
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e1 ec       	ldi	r30, 0xC1	; 193
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	8f 7d       	andi	r24, 0xDF	; 223
    1846:	8c 93       	st	X, r24
	}
}
    1848:	0f 90       	pop	r0
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	ff 91       	pop	r31
    1850:	ef 91       	pop	r30
    1852:	bf 91       	pop	r27
    1854:	af 91       	pop	r26
    1856:	9f 91       	pop	r25
    1858:	8f 91       	pop	r24
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	0f 90       	pop	r0
    1860:	1f 90       	pop	r1
    1862:	18 95       	reti

00001864 <serial_read>:

uint8_t serial_read()
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	00 d0       	rcall	.+0      	; 0x186a <serial_read+0x6>
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
	if (rx_buffer_head == rx_buffer_tail) {
    186e:	90 91 03 01 	lds	r25, 0x0103
    1872:	80 91 04 01 	lds	r24, 0x0104
    1876:	98 17       	cp	r25, r24
    1878:	19 f4       	brne	.+6      	; 0x1880 <serial_read+0x1c>
		return SERIAL_NO_DATA;
    187a:	8f ef       	ldi	r24, 0xFF	; 255
    187c:	8a 83       	std	Y+2, r24	; 0x02
    187e:	10 c0       	rjmp	.+32     	; 0x18a0 <serial_read+0x3c>
	} else {
		uint8_t data = rx_buffer[rx_buffer_tail];
    1880:	80 91 04 01 	lds	r24, 0x0104
    1884:	88 2f       	mov	r24, r24
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	fc 01       	movw	r30, r24
    188a:	eb 53       	subi	r30, 0x3B	; 59
    188c:	fe 4f       	sbci	r31, 0xFE	; 254
    188e:	80 81       	ld	r24, Z
    1890:	89 83       	std	Y+1, r24	; 0x01
		rx_buffer_tail++;
    1892:	80 91 04 01 	lds	r24, 0x0104
    1896:	8f 5f       	subi	r24, 0xFF	; 255
    1898:	80 93 04 01 	sts	0x0104, r24
		if (rx_buffer_tail == RX_BUFFER_SIZE) { rx_buffer_tail = 0; }
		return data;
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	8a 83       	std	Y+2, r24	; 0x02
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <__vector_18>:

ISR(USART_RX_vect)
{
    18ac:	1f 92       	push	r1
    18ae:	0f 92       	push	r0
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
    18b6:	8f 93       	push	r24
    18b8:	9f 93       	push	r25
    18ba:	ef 93       	push	r30
    18bc:	ff 93       	push	r31
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <__vector_18+0x18>
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = UDR0;
    18c8:	e6 ec       	ldi	r30, 0xC6	; 198
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = rx_buffer_head + 1;
    18d0:	80 91 03 01 	lds	r24, 0x0103
    18d4:	8f 5f       	subi	r24, 0xFF	; 255
    18d6:	89 83       	std	Y+1, r24	; 0x01
	
	if (next_head == RX_BUFFER_SIZE) { 
		next_head = 0;
	}
	if (next_head != rx_buffer_tail) {      // Write data to buffer unless it is full.
    18d8:	90 91 04 01 	lds	r25, 0x0104
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	89 17       	cp	r24, r25
    18e0:	61 f0       	breq	.+24     	; 0x18fa <__vector_18+0x4e>
		rx_buffer[rx_buffer_head] = data;
    18e2:	80 91 03 01 	lds	r24, 0x0103
    18e6:	88 2f       	mov	r24, r24
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	fc 01       	movw	r30, r24
    18ec:	eb 53       	subi	r30, 0x3B	; 59
    18ee:	fe 4f       	sbci	r31, 0xFE	; 254
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	80 83       	st	Z, r24
		rx_buffer_head = next_head;    
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	80 93 03 01 	sts	0x0103, r24
	}
}
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	ff 91       	pop	r31
    1904:	ef 91       	pop	r30
    1906:	9f 91       	pop	r25
    1908:	8f 91       	pop	r24
    190a:	0f 90       	pop	r0
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	0f 90       	pop	r0
    1910:	1f 90       	pop	r1
    1912:	18 95       	reti

00001914 <serial_reset_read_buffer>:

void serial_reset_read_buffer() 
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
  rx_buffer_tail = rx_buffer_head;
    191c:	80 91 03 01 	lds	r24, 0x0103
    1920:	80 93 04 01 	sts	0x0104, r24

  #ifdef ENABLE_XONXOFF
    flow_ctrl = XON_SENT;
  #endif
}
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <printString>:

#include "print.h"
#include "serial.h"

void printString(const char *s)
{
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	00 d0       	rcall	.+0      	; 0x1930 <printString+0x6>
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	9a 83       	std	Y+2, r25	; 0x02
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	0b c0       	rjmp	.+22     	; 0x1950 <printString+0x26>
  while (*s)
    serial_write(*s++);
    193a:	e9 81       	ldd	r30, Y+1	; 0x01
    193c:	fa 81       	ldd	r31, Y+2	; 0x02
    193e:	20 81       	ld	r18, Z
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	9a 83       	std	Y+2, r25	; 0x02
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	82 2f       	mov	r24, r18
    194c:	0e 94 ce 0b 	call	0x179c	; 0x179c <serial_write>
#include "print.h"
#include "serial.h"

void printString(const char *s)
{
  while (*s)
    1950:	e9 81       	ldd	r30, Y+1	; 0x01
    1952:	fa 81       	ldd	r31, Y+2	; 0x02
    1954:	80 81       	ld	r24, Z
    1956:	88 23       	and	r24, r24
    1958:	81 f7       	brne	.-32     	; 0x193a <printString+0x10>
    serial_write(*s++);
}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	00 d0       	rcall	.+0      	; 0x196a <printPgmString+0x6>
    196a:	00 d0       	rcall	.+0      	; 0x196c <printPgmString+0x8>
    196c:	00 d0       	rcall	.+0      	; 0x196e <printPgmString+0xa>
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	9e 83       	std	Y+6, r25	; 0x06
    1974:	8d 83       	std	Y+5, r24	; 0x05
    1976:	03 c0       	rjmp	.+6      	; 0x197e <printPgmString+0x1a>
  char c;
  while ((c = pgm_read_byte_near(s++)))
    serial_write(c);
    1978:	8c 81       	ldd	r24, Y+4	; 0x04
    197a:	0e 94 ce 0b 	call	0x179c	; 0x179c <serial_write>

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
  while ((c = pgm_read_byte_near(s++)))
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	9b 83       	std	Y+3, r25	; 0x03
    1984:	8a 83       	std	Y+2, r24	; 0x02
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	9e 81       	ldd	r25, Y+6	; 0x06
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	8d 83       	std	Y+5, r24	; 0x05
    1990:	ea 81       	ldd	r30, Y+2	; 0x02
    1992:	fb 81       	ldd	r31, Y+3	; 0x03
    1994:	84 91       	lpm	r24, Z+
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	8c 83       	std	Y+4, r24	; 0x04
    199c:	8c 81       	ldd	r24, Y+4	; 0x04
    199e:	88 23       	and	r24, r24
    19a0:	59 f7       	brne	.-42     	; 0x1978 <printPgmString+0x14>
    serial_write(c);
}
    19a2:	26 96       	adiw	r28, 0x06	; 6
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <print_uint8_base2>:
// 			'0' + buf[i - 1] :
// 			'A' + buf[i - 1] - 10);
// }

void print_uint8_base2(uint8_t n)
{ 
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	2a 97       	sbiw	r28, 0x0a	; 10
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char buf[8];
	uint8_t i = 0;
    19ca:	19 82       	std	Y+1, r1	; 0x01
    19cc:	12 c0       	rjmp	.+36     	; 0x19f2 <print_uint8_base2+0x3e>

	for (; i < 8; i++) {
		buf[i] = n & 1;
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    19d6:	48 2f       	mov	r20, r24
    19d8:	41 70       	andi	r20, 0x01	; 1
    19da:	ce 01       	movw	r24, r28
    19dc:	02 96       	adiw	r24, 0x02	; 2
    19de:	fc 01       	movw	r30, r24
    19e0:	e2 0f       	add	r30, r18
    19e2:	f3 1f       	adc	r31, r19
    19e4:	40 83       	st	Z, r20
		n >>= 1;
    19e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    19e8:	86 95       	lsr	r24
    19ea:	8a 87       	std	Y+10, r24	; 0x0a
void print_uint8_base2(uint8_t n)
{ 
	unsigned char buf[8];
	uint8_t i = 0;

	for (; i < 8; i++) {
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	8f 5f       	subi	r24, 0xFF	; 255
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	88 30       	cpi	r24, 0x08	; 8
    19f6:	58 f3       	brcs	.-42     	; 0x19ce <print_uint8_base2+0x1a>
    19f8:	12 c0       	rjmp	.+36     	; 0x1a1e <print_uint8_base2+0x6a>
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
		serial_write('0' + buf[i - 1]);
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	88 2f       	mov	r24, r24
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9c 01       	movw	r18, r24
    1a02:	21 50       	subi	r18, 0x01	; 1
    1a04:	30 40       	sbci	r19, 0x00	; 0
    1a06:	ce 01       	movw	r24, r28
    1a08:	02 96       	adiw	r24, 0x02	; 2
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	e2 0f       	add	r30, r18
    1a0e:	f3 1f       	adc	r31, r19
    1a10:	80 81       	ld	r24, Z
    1a12:	80 5d       	subi	r24, 0xD0	; 208
    1a14:	0e 94 ce 0b 	call	0x179c	; 0x179c <serial_write>
	for (; i < 8; i++) {
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	81 50       	subi	r24, 0x01	; 1
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	88 23       	and	r24, r24
    1a22:	59 f7       	brne	.-42     	; 0x19fa <print_uint8_base2+0x46>
		serial_write('0' + buf[i - 1]);
}
    1a24:	2a 96       	adiw	r28, 0x0a	; 10
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <print_uint32_base10>:

static void print_uint32_base10(unsigned long n)
{ 
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	2f 97       	sbiw	r28, 0x0f	; 15
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	6c 87       	std	Y+12, r22	; 0x0c
    1a50:	7d 87       	std	Y+13, r23	; 0x0d
    1a52:	8e 87       	std	Y+14, r24	; 0x0e
    1a54:	9f 87       	std	Y+15, r25	; 0x0f
  unsigned char buf[10]; 
  uint8_t i = 0;
    1a56:	19 82       	std	Y+1, r1	; 0x01
  
  if (n == 0) {
    1a58:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a5c:	ae 85       	ldd	r26, Y+14	; 0x0e
    1a5e:	bf 85       	ldd	r27, Y+15	; 0x0f
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	a1 05       	cpc	r26, r1
    1a64:	b1 05       	cpc	r27, r1
    1a66:	91 f5       	brne	.+100    	; 0x1acc <print_uint32_base10+0x96>
    serial_write('0');
    1a68:	80 e3       	ldi	r24, 0x30	; 48
    1a6a:	0e 94 ce 0b 	call	0x179c	; 0x179c <serial_write>
    1a6e:	4b c0       	rjmp	.+150    	; 0x1b06 <print_uint32_base10+0xd0>
    return;
  } 
  
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	08 2f       	mov	r16, r24
    1a74:	10 e0       	ldi	r17, 0x00	; 0
    1a76:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a78:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a7a:	ae 85       	ldd	r26, Y+14	; 0x0e
    1a7c:	bf 85       	ldd	r27, Y+15	; 0x0f
    1a7e:	2a e0       	ldi	r18, 0x0A	; 10
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e0       	ldi	r20, 0x00	; 0
    1a84:	50 e0       	ldi	r21, 0x00	; 0
    1a86:	bc 01       	movw	r22, r24
    1a88:	cd 01       	movw	r24, r26
    1a8a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__udivmodsi4>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	28 2f       	mov	r18, r24
    1a94:	20 5d       	subi	r18, 0xD0	; 208
    1a96:	ce 01       	movw	r24, r28
    1a98:	02 96       	adiw	r24, 0x02	; 2
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	e0 0f       	add	r30, r16
    1a9e:	f1 1f       	adc	r31, r17
    1aa0:	20 83       	st	Z, r18
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	8f 5f       	subi	r24, 0xFF	; 255
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    n /= 10;
    1aa8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aaa:	9d 85       	ldd	r25, Y+13	; 0x0d
    1aac:	ae 85       	ldd	r26, Y+14	; 0x0e
    1aae:	bf 85       	ldd	r27, Y+15	; 0x0f
    1ab0:	2a e0       	ldi	r18, 0x0A	; 10
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e0       	ldi	r20, 0x00	; 0
    1ab6:	50 e0       	ldi	r21, 0x00	; 0
    1ab8:	bc 01       	movw	r22, r24
    1aba:	cd 01       	movw	r24, r26
    1abc:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__udivmodsi4>
    1ac0:	da 01       	movw	r26, r20
    1ac2:	c9 01       	movw	r24, r18
    1ac4:	8c 87       	std	Y+12, r24	; 0x0c
    1ac6:	9d 87       	std	Y+13, r25	; 0x0d
    1ac8:	ae 87       	std	Y+14, r26	; 0x0e
    1aca:	bf 87       	std	Y+15, r27	; 0x0f
  if (n == 0) {
    serial_write('0');
    return;
  } 
  
  while (n > 0) {
    1acc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ace:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ad0:	ae 85       	ldd	r26, Y+14	; 0x0e
    1ad2:	bf 85       	ldd	r27, Y+15	; 0x0f
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	a1 05       	cpc	r26, r1
    1ad8:	b1 05       	cpc	r27, r1
    1ada:	51 f6       	brne	.-108    	; 0x1a70 <print_uint32_base10+0x3a>
    1adc:	11 c0       	rjmp	.+34     	; 0x1b00 <print_uint32_base10+0xca>
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    serial_write(buf[i-1]);
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	88 2f       	mov	r24, r24
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9c 01       	movw	r18, r24
    1ae6:	21 50       	subi	r18, 0x01	; 1
    1ae8:	30 40       	sbci	r19, 0x00	; 0
    1aea:	ce 01       	movw	r24, r28
    1aec:	02 96       	adiw	r24, 0x02	; 2
    1aee:	fc 01       	movw	r30, r24
    1af0:	e2 0f       	add	r30, r18
    1af2:	f3 1f       	adc	r31, r19
    1af4:	80 81       	ld	r24, Z
    1af6:	0e 94 ce 0b 	call	0x179c	; 0x179c <serial_write>
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	81 50       	subi	r24, 0x01	; 1
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	88 23       	and	r24, r24
    1b04:	61 f7       	brne	.-40     	; 0x1ade <print_uint32_base10+0xa8>
    serial_write(buf[i-1]);
}
    1b06:	2f 96       	adiw	r28, 0x0f	; 15
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	1f 91       	pop	r17
    1b18:	0f 91       	pop	r16
    1b1a:	08 95       	ret

00001b1c <printInteger>:

void printInteger(uint32_t n)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <printInteger+0x6>
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <printInteger+0x8>
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	69 83       	std	Y+1, r22	; 0x01
    1b2a:	7a 83       	std	Y+2, r23	; 0x02
    1b2c:	8b 83       	std	Y+3, r24	; 0x03
    1b2e:	9c 83       	std	Y+4, r25	; 0x04
  if (n < 0) {
    serial_write('-');
    n = -n;
  }
  print_uint32_base10(n);
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	ab 81       	ldd	r26, Y+3	; 0x03
    1b36:	bc 81       	ldd	r27, Y+4	; 0x04
    1b38:	bc 01       	movw	r22, r24
    1b3a:	cd 01       	movw	r24, r26
    1b3c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <print_uint32_base10>
}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up 
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n)
{
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	64 97       	sbiw	r28, 0x14	; 20
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	69 8b       	std	Y+17, r22	; 0x11
    1b68:	7a 8b       	std	Y+18, r23	; 0x12
    1b6a:	8b 8b       	std	Y+19, r24	; 0x13
    1b6c:	9c 8b       	std	Y+20, r25	; 0x14
  if (n < 0) {
    1b6e:	69 89       	ldd	r22, Y+17	; 0x11
    1b70:	7a 89       	ldd	r23, Y+18	; 0x12
    1b72:	8b 89       	ldd	r24, Y+19	; 0x13
    1b74:	9c 89       	ldd	r25, Y+20	; 0x14
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__cmpsf2>
    1b82:	88 23       	and	r24, r24
    1b84:	64 f4       	brge	.+24     	; 0x1b9e <printFloat+0x50>
    serial_write('-');
    1b86:	8d e2       	ldi	r24, 0x2D	; 45
    1b88:	0e 94 ce 0b 	call	0x179c	; 0x179c <serial_write>
    n = -n;
    1b8c:	89 89       	ldd	r24, Y+17	; 0x11
    1b8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b90:	ab 89       	ldd	r26, Y+19	; 0x13
    1b92:	bc 89       	ldd	r27, Y+20	; 0x14
    1b94:	b0 58       	subi	r27, 0x80	; 128
    1b96:	89 8b       	std	Y+17, r24	; 0x11
    1b98:	9a 8b       	std	Y+18, r25	; 0x12
    1b9a:	ab 8b       	std	Y+19, r26	; 0x13
    1b9c:	bc 8b       	std	Y+20, r27	; 0x14
  }

  uint8_t decimals = DECIMAL_PLACES;
    1b9e:	82 e0       	ldi	r24, 0x02	; 2
    1ba0:	8e 83       	std	Y+6, r24	; 0x06
    1ba2:	13 c0       	rjmp	.+38     	; 0x1bca <printFloat+0x7c>
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
    n *= 100;
    1ba4:	69 89       	ldd	r22, Y+17	; 0x11
    1ba6:	7a 89       	ldd	r23, Y+18	; 0x12
    1ba8:	8b 89       	ldd	r24, Y+19	; 0x13
    1baa:	9c 89       	ldd	r25, Y+20	; 0x14
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	48 ec       	ldi	r20, 0xC8	; 200
    1bb2:	52 e4       	ldi	r21, 0x42	; 66
    1bb4:	0e 94 95 10 	call	0x212a	; 0x212a <__mulsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	89 8b       	std	Y+17, r24	; 0x11
    1bbe:	9a 8b       	std	Y+18, r25	; 0x12
    1bc0:	ab 8b       	std	Y+19, r26	; 0x13
    1bc2:	bc 8b       	std	Y+20, r27	; 0x14
    decimals -= 2;
    1bc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc6:	82 50       	subi	r24, 0x02	; 2
    1bc8:	8e 83       	std	Y+6, r24	; 0x06
    serial_write('-');
    n = -n;
  }

  uint8_t decimals = DECIMAL_PLACES;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
    1bca:	8e 81       	ldd	r24, Y+6	; 0x06
    1bcc:	82 30       	cpi	r24, 0x02	; 2
    1bce:	50 f7       	brcc	.-44     	; 0x1ba4 <printFloat+0x56>
    n *= 100;
    decimals -= 2;
  }
  if (decimals) { n *= 10; }
    1bd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd2:	88 23       	and	r24, r24
    1bd4:	81 f0       	breq	.+32     	; 0x1bf6 <printFloat+0xa8>
    1bd6:	69 89       	ldd	r22, Y+17	; 0x11
    1bd8:	7a 89       	ldd	r23, Y+18	; 0x12
    1bda:	8b 89       	ldd	r24, Y+19	; 0x13
    1bdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e2       	ldi	r20, 0x20	; 32
    1be4:	51 e4       	ldi	r21, 0x41	; 65
    1be6:	0e 94 95 10 	call	0x212a	; 0x212a <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	89 8b       	std	Y+17, r24	; 0x11
    1bf0:	9a 8b       	std	Y+18, r25	; 0x12
    1bf2:	ab 8b       	std	Y+19, r26	; 0x13
    1bf4:	bc 8b       	std	Y+20, r27	; 0x14
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
    1bf6:	69 89       	ldd	r22, Y+17	; 0x11
    1bf8:	7a 89       	ldd	r23, Y+18	; 0x12
    1bfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e0       	ldi	r20, 0x00	; 0
    1c04:	5f e3       	ldi	r21, 0x3F	; 63
    1c06:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__addsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	89 8b       	std	Y+17, r24	; 0x11
    1c10:	9a 8b       	std	Y+18, r25	; 0x12
    1c12:	ab 8b       	std	Y+19, r26	; 0x13
    1c14:	bc 8b       	std	Y+20, r27	; 0x14
    
  // Generate digits backwards and store in string.
  unsigned char buf[10]; 
  uint8_t i = 0;
    1c16:	1d 82       	std	Y+5, r1	; 0x05
  uint32_t a = (long)n;  
    1c18:	69 89       	ldd	r22, Y+17	; 0x11
    1c1a:	7a 89       	ldd	r23, Y+18	; 0x12
    1c1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c20:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__fixsfsi>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	9a 83       	std	Y+2, r25	; 0x02
    1c2c:	ab 83       	std	Y+3, r26	; 0x03
    1c2e:	bc 83       	std	Y+4, r27	; 0x04
  buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
    1c30:	8e e2       	ldi	r24, 0x2E	; 46
    1c32:	89 87       	std	Y+9, r24	; 0x09
    1c34:	34 c0       	rjmp	.+104    	; 0x1c9e <printFloat+0x150>
  while(a > 0) {
    if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
    1c36:	8d 81       	ldd	r24, Y+5	; 0x05
    1c38:	82 30       	cpi	r24, 0x02	; 2
    1c3a:	19 f4       	brne	.+6      	; 0x1c42 <printFloat+0xf4>
    1c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3e:	8f 5f       	subi	r24, 0xFF	; 255
    1c40:	8d 83       	std	Y+5, r24	; 0x05
    buf[i++] = (a % 10) + '0'; // Get digit
    1c42:	8d 81       	ldd	r24, Y+5	; 0x05
    1c44:	08 2f       	mov	r16, r24
    1c46:	10 e0       	ldi	r17, 0x00	; 0
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	ab 81       	ldd	r26, Y+3	; 0x03
    1c4e:	bc 81       	ldd	r27, Y+4	; 0x04
    1c50:	2a e0       	ldi	r18, 0x0A	; 10
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e0       	ldi	r20, 0x00	; 0
    1c56:	50 e0       	ldi	r21, 0x00	; 0
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__udivmodsi4>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	28 2f       	mov	r18, r24
    1c66:	20 5d       	subi	r18, 0xD0	; 208
    1c68:	ce 01       	movw	r24, r28
    1c6a:	07 96       	adiw	r24, 0x07	; 7
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	e0 0f       	add	r30, r16
    1c70:	f1 1f       	adc	r31, r17
    1c72:	20 83       	st	Z, r18
    1c74:	8d 81       	ldd	r24, Y+5	; 0x05
    1c76:	8f 5f       	subi	r24, 0xFF	; 255
    1c78:	8d 83       	std	Y+5, r24	; 0x05
    a /= 10;
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7e:	ab 81       	ldd	r26, Y+3	; 0x03
    1c80:	bc 81       	ldd	r27, Y+4	; 0x04
    1c82:	2a e0       	ldi	r18, 0x0A	; 10
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e0       	ldi	r20, 0x00	; 0
    1c88:	50 e0       	ldi	r21, 0x00	; 0
    1c8a:	bc 01       	movw	r22, r24
    1c8c:	cd 01       	movw	r24, r26
    1c8e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__udivmodsi4>
    1c92:	da 01       	movw	r26, r20
    1c94:	c9 01       	movw	r24, r18
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	9a 83       	std	Y+2, r25	; 0x02
    1c9a:	ab 83       	std	Y+3, r26	; 0x03
    1c9c:	bc 83       	std	Y+4, r27	; 0x04
  // Generate digits backwards and store in string.
  unsigned char buf[10]; 
  uint8_t i = 0;
  uint32_t a = (long)n;  
  buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
  while(a > 0) {
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca2:	ab 81       	ldd	r26, Y+3	; 0x03
    1ca4:	bc 81       	ldd	r27, Y+4	; 0x04
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	a1 05       	cpc	r26, r1
    1caa:	b1 05       	cpc	r27, r1
    1cac:	21 f6       	brne	.-120    	; 0x1c36 <printFloat+0xe8>
    1cae:	0d c0       	rjmp	.+26     	; 0x1cca <printFloat+0x17c>
    if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
    buf[i++] = (a % 10) + '0'; // Get digit
    a /= 10;
  }
  while (i < DECIMAL_PLACES) { 
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
    1cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	07 96       	adiw	r24, 0x07	; 7
    1cba:	fc 01       	movw	r30, r24
    1cbc:	e2 0f       	add	r30, r18
    1cbe:	f3 1f       	adc	r31, r19
    1cc0:	80 e3       	ldi	r24, 0x30	; 48
    1cc2:	80 83       	st	Z, r24
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	8f 5f       	subi	r24, 0xFF	; 255
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
  while(a > 0) {
    if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
    buf[i++] = (a % 10) + '0'; // Get digit
    a /= 10;
  }
  while (i < DECIMAL_PLACES) { 
    1cca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ccc:	82 30       	cpi	r24, 0x02	; 2
    1cce:	80 f3       	brcs	.-32     	; 0x1cb0 <printFloat+0x162>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
  }
  if (i == DECIMAL_PLACES) { // Fill in leading zero, if needed.
    1cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd2:	82 30       	cpi	r24, 0x02	; 2
    1cd4:	11 f5       	brne	.+68     	; 0x1d1a <printFloat+0x1cc>
    i++;
    1cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd8:	8f 5f       	subi	r24, 0xFF	; 255
    1cda:	8d 83       	std	Y+5, r24	; 0x05
    buf[i++] = '0'; 
    1cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	07 96       	adiw	r24, 0x07	; 7
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	e2 0f       	add	r30, r18
    1cea:	f3 1f       	adc	r31, r19
    1cec:	80 e3       	ldi	r24, 0x30	; 48
    1cee:	80 83       	st	Z, r24
    1cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf2:	8f 5f       	subi	r24, 0xFF	; 255
    1cf4:	8d 83       	std	Y+5, r24	; 0x05
    1cf6:	11 c0       	rjmp	.+34     	; 0x1d1a <printFloat+0x1cc>
  }   
  
  // Print the generated string.
  for (; i > 0; i--)
    serial_write(buf[i-1]);
    1cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfa:	88 2f       	mov	r24, r24
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9c 01       	movw	r18, r24
    1d00:	21 50       	subi	r18, 0x01	; 1
    1d02:	30 40       	sbci	r19, 0x00	; 0
    1d04:	ce 01       	movw	r24, r28
    1d06:	07 96       	adiw	r24, 0x07	; 7
    1d08:	fc 01       	movw	r30, r24
    1d0a:	e2 0f       	add	r30, r18
    1d0c:	f3 1f       	adc	r31, r19
    1d0e:	80 81       	ld	r24, Z
    1d10:	0e 94 ce 0b 	call	0x179c	; 0x179c <serial_write>
    i++;
    buf[i++] = '0'; 
  }   
  
  // Print the generated string.
  for (; i > 0; i--)
    1d14:	8d 81       	ldd	r24, Y+5	; 0x05
    1d16:	81 50       	subi	r24, 0x01	; 1
    1d18:	8d 83       	std	Y+5, r24	; 0x05
    1d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1c:	88 23       	and	r24, r24
    1d1e:	61 f7       	brne	.-40     	; 0x1cf8 <printFloat+0x1aa>
    serial_write(buf[i-1]);
}
    1d20:	64 96       	adiw	r28, 0x14	; 20
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	08 95       	ret

00001d36 <rpt_initialized>:
#include "print.h"
#include "report.h"
#include "tinyg_tc.h"

void rpt_initialized()
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
	printPgmString(PSTR("\nDevice Initialized\n")); 
    1d3e:	88 e6       	ldi	r24, 0x68	; 104
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 b2 0c 	call	0x1964	; 0x1964 <printPgmString>
}
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <rpt_heater_readout>:

void rpt_heater_readout()
{
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
	if (--heater.readout < 0) {
    1d54:	80 91 0a 01 	lds	r24, 0x010A
    1d58:	81 50       	subi	r24, 0x01	; 1
    1d5a:	80 93 0a 01 	sts	0x010A, r24
    1d5e:	80 91 0a 01 	lds	r24, 0x010A
    1d62:	88 23       	and	r24, r24
    1d64:	3c f5       	brge	.+78     	; 0x1db4 <rpt_heater_readout+0x68>
		heater.readout = 10;
    1d66:	8a e0       	ldi	r24, 0x0A	; 10
    1d68:	80 93 0a 01 	sts	0x010A, r24
		printPgmString(PSTR("Temp: ")); 
    1d6c:	87 e8       	ldi	r24, 0x87	; 135
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	0e 94 b2 0c 	call	0x1964	; 0x1964 <printPgmString>
		printFloat(heater.temperature);
    1d74:	80 91 0c 01 	lds	r24, 0x010C
    1d78:	90 91 0d 01 	lds	r25, 0x010D
    1d7c:	a0 91 0e 01 	lds	r26, 0x010E
    1d80:	b0 91 0f 01 	lds	r27, 0x010F
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <printFloat>
		printPgmString(PSTR("  PID: ")); 
    1d8c:	8f e7       	ldi	r24, 0x7F	; 127
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	0e 94 b2 0c 	call	0x1964	; 0x1964 <printPgmString>
		printFloat(pid.output);
    1d94:	80 91 2a 01 	lds	r24, 0x012A
    1d98:	90 91 2b 01 	lds	r25, 0x012B
    1d9c:	a0 91 2c 01 	lds	r26, 0x012C
    1da0:	b0 91 2d 01 	lds	r27, 0x012D
    1da4:	bc 01       	movw	r22, r24
    1da6:	cd 01       	movw	r24, r26
    1da8:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <printFloat>
		printPgmString(PSTR("\n")); 
    1dac:	8d e7       	ldi	r24, 0x7D	; 125
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <printPgmString>
	}
}
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <__subsf3>:
    1dba:	50 58       	subi	r21, 0x80	; 128

00001dbc <__addsf3>:
    1dbc:	bb 27       	eor	r27, r27
    1dbe:	aa 27       	eor	r26, r26
    1dc0:	0e d0       	rcall	.+28     	; 0x1dde <__addsf3x>
    1dc2:	75 c1       	rjmp	.+746    	; 0x20ae <__fp_round>
    1dc4:	66 d1       	rcall	.+716    	; 0x2092 <__fp_pscA>
    1dc6:	30 f0       	brcs	.+12     	; 0x1dd4 <__addsf3+0x18>
    1dc8:	6b d1       	rcall	.+726    	; 0x20a0 <__fp_pscB>
    1dca:	20 f0       	brcs	.+8      	; 0x1dd4 <__addsf3+0x18>
    1dcc:	31 f4       	brne	.+12     	; 0x1dda <__addsf3+0x1e>
    1dce:	9f 3f       	cpi	r25, 0xFF	; 255
    1dd0:	11 f4       	brne	.+4      	; 0x1dd6 <__addsf3+0x1a>
    1dd2:	1e f4       	brtc	.+6      	; 0x1dda <__addsf3+0x1e>
    1dd4:	5b c1       	rjmp	.+694    	; 0x208c <__fp_nan>
    1dd6:	0e f4       	brtc	.+2      	; 0x1dda <__addsf3+0x1e>
    1dd8:	e0 95       	com	r30
    1dda:	e7 fb       	bst	r30, 7
    1ddc:	51 c1       	rjmp	.+674    	; 0x2080 <__fp_inf>

00001dde <__addsf3x>:
    1dde:	e9 2f       	mov	r30, r25
    1de0:	77 d1       	rcall	.+750    	; 0x20d0 <__fp_split3>
    1de2:	80 f3       	brcs	.-32     	; 0x1dc4 <__addsf3+0x8>
    1de4:	ba 17       	cp	r27, r26
    1de6:	62 07       	cpc	r22, r18
    1de8:	73 07       	cpc	r23, r19
    1dea:	84 07       	cpc	r24, r20
    1dec:	95 07       	cpc	r25, r21
    1dee:	18 f0       	brcs	.+6      	; 0x1df6 <__addsf3x+0x18>
    1df0:	71 f4       	brne	.+28     	; 0x1e0e <__addsf3x+0x30>
    1df2:	9e f5       	brtc	.+102    	; 0x1e5a <__addsf3x+0x7c>
    1df4:	8f c1       	rjmp	.+798    	; 0x2114 <__fp_zero>
    1df6:	0e f4       	brtc	.+2      	; 0x1dfa <__addsf3x+0x1c>
    1df8:	e0 95       	com	r30
    1dfa:	0b 2e       	mov	r0, r27
    1dfc:	ba 2f       	mov	r27, r26
    1dfe:	a0 2d       	mov	r26, r0
    1e00:	0b 01       	movw	r0, r22
    1e02:	b9 01       	movw	r22, r18
    1e04:	90 01       	movw	r18, r0
    1e06:	0c 01       	movw	r0, r24
    1e08:	ca 01       	movw	r24, r20
    1e0a:	a0 01       	movw	r20, r0
    1e0c:	11 24       	eor	r1, r1
    1e0e:	ff 27       	eor	r31, r31
    1e10:	59 1b       	sub	r21, r25
    1e12:	99 f0       	breq	.+38     	; 0x1e3a <__addsf3x+0x5c>
    1e14:	59 3f       	cpi	r21, 0xF9	; 249
    1e16:	50 f4       	brcc	.+20     	; 0x1e2c <__addsf3x+0x4e>
    1e18:	50 3e       	cpi	r21, 0xE0	; 224
    1e1a:	68 f1       	brcs	.+90     	; 0x1e76 <__addsf3x+0x98>
    1e1c:	1a 16       	cp	r1, r26
    1e1e:	f0 40       	sbci	r31, 0x00	; 0
    1e20:	a2 2f       	mov	r26, r18
    1e22:	23 2f       	mov	r18, r19
    1e24:	34 2f       	mov	r19, r20
    1e26:	44 27       	eor	r20, r20
    1e28:	58 5f       	subi	r21, 0xF8	; 248
    1e2a:	f3 cf       	rjmp	.-26     	; 0x1e12 <__addsf3x+0x34>
    1e2c:	46 95       	lsr	r20
    1e2e:	37 95       	ror	r19
    1e30:	27 95       	ror	r18
    1e32:	a7 95       	ror	r26
    1e34:	f0 40       	sbci	r31, 0x00	; 0
    1e36:	53 95       	inc	r21
    1e38:	c9 f7       	brne	.-14     	; 0x1e2c <__addsf3x+0x4e>
    1e3a:	7e f4       	brtc	.+30     	; 0x1e5a <__addsf3x+0x7c>
    1e3c:	1f 16       	cp	r1, r31
    1e3e:	ba 0b       	sbc	r27, r26
    1e40:	62 0b       	sbc	r22, r18
    1e42:	73 0b       	sbc	r23, r19
    1e44:	84 0b       	sbc	r24, r20
    1e46:	ba f0       	brmi	.+46     	; 0x1e76 <__addsf3x+0x98>
    1e48:	91 50       	subi	r25, 0x01	; 1
    1e4a:	a1 f0       	breq	.+40     	; 0x1e74 <__addsf3x+0x96>
    1e4c:	ff 0f       	add	r31, r31
    1e4e:	bb 1f       	adc	r27, r27
    1e50:	66 1f       	adc	r22, r22
    1e52:	77 1f       	adc	r23, r23
    1e54:	88 1f       	adc	r24, r24
    1e56:	c2 f7       	brpl	.-16     	; 0x1e48 <__addsf3x+0x6a>
    1e58:	0e c0       	rjmp	.+28     	; 0x1e76 <__addsf3x+0x98>
    1e5a:	ba 0f       	add	r27, r26
    1e5c:	62 1f       	adc	r22, r18
    1e5e:	73 1f       	adc	r23, r19
    1e60:	84 1f       	adc	r24, r20
    1e62:	48 f4       	brcc	.+18     	; 0x1e76 <__addsf3x+0x98>
    1e64:	87 95       	ror	r24
    1e66:	77 95       	ror	r23
    1e68:	67 95       	ror	r22
    1e6a:	b7 95       	ror	r27
    1e6c:	f7 95       	ror	r31
    1e6e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e70:	08 f0       	brcs	.+2      	; 0x1e74 <__addsf3x+0x96>
    1e72:	b3 cf       	rjmp	.-154    	; 0x1dda <__addsf3+0x1e>
    1e74:	93 95       	inc	r25
    1e76:	88 0f       	add	r24, r24
    1e78:	08 f0       	brcs	.+2      	; 0x1e7c <__addsf3x+0x9e>
    1e7a:	99 27       	eor	r25, r25
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	97 95       	ror	r25
    1e80:	87 95       	ror	r24
    1e82:	08 95       	ret

00001e84 <__cmpsf2>:
    1e84:	d9 d0       	rcall	.+434    	; 0x2038 <__fp_cmp>
    1e86:	08 f4       	brcc	.+2      	; 0x1e8a <__cmpsf2+0x6>
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	08 95       	ret

00001e8c <__divsf3>:
    1e8c:	0c d0       	rcall	.+24     	; 0x1ea6 <__divsf3x>
    1e8e:	0f c1       	rjmp	.+542    	; 0x20ae <__fp_round>
    1e90:	07 d1       	rcall	.+526    	; 0x20a0 <__fp_pscB>
    1e92:	40 f0       	brcs	.+16     	; 0x1ea4 <__divsf3+0x18>
    1e94:	fe d0       	rcall	.+508    	; 0x2092 <__fp_pscA>
    1e96:	30 f0       	brcs	.+12     	; 0x1ea4 <__divsf3+0x18>
    1e98:	21 f4       	brne	.+8      	; 0x1ea2 <__divsf3+0x16>
    1e9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e9c:	19 f0       	breq	.+6      	; 0x1ea4 <__divsf3+0x18>
    1e9e:	f0 c0       	rjmp	.+480    	; 0x2080 <__fp_inf>
    1ea0:	51 11       	cpse	r21, r1
    1ea2:	39 c1       	rjmp	.+626    	; 0x2116 <__fp_szero>
    1ea4:	f3 c0       	rjmp	.+486    	; 0x208c <__fp_nan>

00001ea6 <__divsf3x>:
    1ea6:	14 d1       	rcall	.+552    	; 0x20d0 <__fp_split3>
    1ea8:	98 f3       	brcs	.-26     	; 0x1e90 <__divsf3+0x4>

00001eaa <__divsf3_pse>:
    1eaa:	99 23       	and	r25, r25
    1eac:	c9 f3       	breq	.-14     	; 0x1ea0 <__divsf3+0x14>
    1eae:	55 23       	and	r21, r21
    1eb0:	b1 f3       	breq	.-20     	; 0x1e9e <__divsf3+0x12>
    1eb2:	95 1b       	sub	r25, r21
    1eb4:	55 0b       	sbc	r21, r21
    1eb6:	bb 27       	eor	r27, r27
    1eb8:	aa 27       	eor	r26, r26
    1eba:	62 17       	cp	r22, r18
    1ebc:	73 07       	cpc	r23, r19
    1ebe:	84 07       	cpc	r24, r20
    1ec0:	38 f0       	brcs	.+14     	; 0x1ed0 <__divsf3_pse+0x26>
    1ec2:	9f 5f       	subi	r25, 0xFF	; 255
    1ec4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec6:	22 0f       	add	r18, r18
    1ec8:	33 1f       	adc	r19, r19
    1eca:	44 1f       	adc	r20, r20
    1ecc:	aa 1f       	adc	r26, r26
    1ece:	a9 f3       	breq	.-22     	; 0x1eba <__divsf3_pse+0x10>
    1ed0:	33 d0       	rcall	.+102    	; 0x1f38 <__divsf3_pse+0x8e>
    1ed2:	0e 2e       	mov	r0, r30
    1ed4:	3a f0       	brmi	.+14     	; 0x1ee4 <__divsf3_pse+0x3a>
    1ed6:	e0 e8       	ldi	r30, 0x80	; 128
    1ed8:	30 d0       	rcall	.+96     	; 0x1f3a <__divsf3_pse+0x90>
    1eda:	91 50       	subi	r25, 0x01	; 1
    1edc:	50 40       	sbci	r21, 0x00	; 0
    1ede:	e6 95       	lsr	r30
    1ee0:	00 1c       	adc	r0, r0
    1ee2:	ca f7       	brpl	.-14     	; 0x1ed6 <__divsf3_pse+0x2c>
    1ee4:	29 d0       	rcall	.+82     	; 0x1f38 <__divsf3_pse+0x8e>
    1ee6:	fe 2f       	mov	r31, r30
    1ee8:	27 d0       	rcall	.+78     	; 0x1f38 <__divsf3_pse+0x8e>
    1eea:	66 0f       	add	r22, r22
    1eec:	77 1f       	adc	r23, r23
    1eee:	88 1f       	adc	r24, r24
    1ef0:	bb 1f       	adc	r27, r27
    1ef2:	26 17       	cp	r18, r22
    1ef4:	37 07       	cpc	r19, r23
    1ef6:	48 07       	cpc	r20, r24
    1ef8:	ab 07       	cpc	r26, r27
    1efa:	b0 e8       	ldi	r27, 0x80	; 128
    1efc:	09 f0       	breq	.+2      	; 0x1f00 <__divsf3_pse+0x56>
    1efe:	bb 0b       	sbc	r27, r27
    1f00:	80 2d       	mov	r24, r0
    1f02:	bf 01       	movw	r22, r30
    1f04:	ff 27       	eor	r31, r31
    1f06:	93 58       	subi	r25, 0x83	; 131
    1f08:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0a:	2a f0       	brmi	.+10     	; 0x1f16 <__divsf3_pse+0x6c>
    1f0c:	9e 3f       	cpi	r25, 0xFE	; 254
    1f0e:	51 05       	cpc	r21, r1
    1f10:	68 f0       	brcs	.+26     	; 0x1f2c <__divsf3_pse+0x82>
    1f12:	b6 c0       	rjmp	.+364    	; 0x2080 <__fp_inf>
    1f14:	00 c1       	rjmp	.+512    	; 0x2116 <__fp_szero>
    1f16:	5f 3f       	cpi	r21, 0xFF	; 255
    1f18:	ec f3       	brlt	.-6      	; 0x1f14 <__divsf3_pse+0x6a>
    1f1a:	98 3e       	cpi	r25, 0xE8	; 232
    1f1c:	dc f3       	brlt	.-10     	; 0x1f14 <__divsf3_pse+0x6a>
    1f1e:	86 95       	lsr	r24
    1f20:	77 95       	ror	r23
    1f22:	67 95       	ror	r22
    1f24:	b7 95       	ror	r27
    1f26:	f7 95       	ror	r31
    1f28:	9f 5f       	subi	r25, 0xFF	; 255
    1f2a:	c9 f7       	brne	.-14     	; 0x1f1e <__divsf3_pse+0x74>
    1f2c:	88 0f       	add	r24, r24
    1f2e:	91 1d       	adc	r25, r1
    1f30:	96 95       	lsr	r25
    1f32:	87 95       	ror	r24
    1f34:	97 f9       	bld	r25, 7
    1f36:	08 95       	ret
    1f38:	e1 e0       	ldi	r30, 0x01	; 1
    1f3a:	66 0f       	add	r22, r22
    1f3c:	77 1f       	adc	r23, r23
    1f3e:	88 1f       	adc	r24, r24
    1f40:	bb 1f       	adc	r27, r27
    1f42:	62 17       	cp	r22, r18
    1f44:	73 07       	cpc	r23, r19
    1f46:	84 07       	cpc	r24, r20
    1f48:	ba 07       	cpc	r27, r26
    1f4a:	20 f0       	brcs	.+8      	; 0x1f54 <__divsf3_pse+0xaa>
    1f4c:	62 1b       	sub	r22, r18
    1f4e:	73 0b       	sbc	r23, r19
    1f50:	84 0b       	sbc	r24, r20
    1f52:	ba 0b       	sbc	r27, r26
    1f54:	ee 1f       	adc	r30, r30
    1f56:	88 f7       	brcc	.-30     	; 0x1f3a <__divsf3_pse+0x90>
    1f58:	e0 95       	com	r30
    1f5a:	08 95       	ret

00001f5c <__fixsfsi>:
    1f5c:	04 d0       	rcall	.+8      	; 0x1f66 <__fixunssfsi>
    1f5e:	68 94       	set
    1f60:	b1 11       	cpse	r27, r1
    1f62:	d9 c0       	rjmp	.+434    	; 0x2116 <__fp_szero>
    1f64:	08 95       	ret

00001f66 <__fixunssfsi>:
    1f66:	bc d0       	rcall	.+376    	; 0x20e0 <__fp_splitA>
    1f68:	88 f0       	brcs	.+34     	; 0x1f8c <__fixunssfsi+0x26>
    1f6a:	9f 57       	subi	r25, 0x7F	; 127
    1f6c:	90 f0       	brcs	.+36     	; 0x1f92 <__fixunssfsi+0x2c>
    1f6e:	b9 2f       	mov	r27, r25
    1f70:	99 27       	eor	r25, r25
    1f72:	b7 51       	subi	r27, 0x17	; 23
    1f74:	a0 f0       	brcs	.+40     	; 0x1f9e <__fixunssfsi+0x38>
    1f76:	d1 f0       	breq	.+52     	; 0x1fac <__fixunssfsi+0x46>
    1f78:	66 0f       	add	r22, r22
    1f7a:	77 1f       	adc	r23, r23
    1f7c:	88 1f       	adc	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	1a f0       	brmi	.+6      	; 0x1f88 <__fixunssfsi+0x22>
    1f82:	ba 95       	dec	r27
    1f84:	c9 f7       	brne	.-14     	; 0x1f78 <__fixunssfsi+0x12>
    1f86:	12 c0       	rjmp	.+36     	; 0x1fac <__fixunssfsi+0x46>
    1f88:	b1 30       	cpi	r27, 0x01	; 1
    1f8a:	81 f0       	breq	.+32     	; 0x1fac <__fixunssfsi+0x46>
    1f8c:	c3 d0       	rcall	.+390    	; 0x2114 <__fp_zero>
    1f8e:	b1 e0       	ldi	r27, 0x01	; 1
    1f90:	08 95       	ret
    1f92:	c0 c0       	rjmp	.+384    	; 0x2114 <__fp_zero>
    1f94:	67 2f       	mov	r22, r23
    1f96:	78 2f       	mov	r23, r24
    1f98:	88 27       	eor	r24, r24
    1f9a:	b8 5f       	subi	r27, 0xF8	; 248
    1f9c:	39 f0       	breq	.+14     	; 0x1fac <__fixunssfsi+0x46>
    1f9e:	b9 3f       	cpi	r27, 0xF9	; 249
    1fa0:	cc f3       	brlt	.-14     	; 0x1f94 <__fixunssfsi+0x2e>
    1fa2:	86 95       	lsr	r24
    1fa4:	77 95       	ror	r23
    1fa6:	67 95       	ror	r22
    1fa8:	b3 95       	inc	r27
    1faa:	d9 f7       	brne	.-10     	; 0x1fa2 <__fixunssfsi+0x3c>
    1fac:	3e f4       	brtc	.+14     	; 0x1fbc <__fixunssfsi+0x56>
    1fae:	90 95       	com	r25
    1fb0:	80 95       	com	r24
    1fb2:	70 95       	com	r23
    1fb4:	61 95       	neg	r22
    1fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fba:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbc:	08 95       	ret

00001fbe <__floatunsisf>:
    1fbe:	e8 94       	clt
    1fc0:	09 c0       	rjmp	.+18     	; 0x1fd4 <__floatsisf+0x12>

00001fc2 <__floatsisf>:
    1fc2:	97 fb       	bst	r25, 7
    1fc4:	3e f4       	brtc	.+14     	; 0x1fd4 <__floatsisf+0x12>
    1fc6:	90 95       	com	r25
    1fc8:	80 95       	com	r24
    1fca:	70 95       	com	r23
    1fcc:	61 95       	neg	r22
    1fce:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd4:	99 23       	and	r25, r25
    1fd6:	a9 f0       	breq	.+42     	; 0x2002 <__floatsisf+0x40>
    1fd8:	f9 2f       	mov	r31, r25
    1fda:	96 e9       	ldi	r25, 0x96	; 150
    1fdc:	bb 27       	eor	r27, r27
    1fde:	93 95       	inc	r25
    1fe0:	f6 95       	lsr	r31
    1fe2:	87 95       	ror	r24
    1fe4:	77 95       	ror	r23
    1fe6:	67 95       	ror	r22
    1fe8:	b7 95       	ror	r27
    1fea:	f1 11       	cpse	r31, r1
    1fec:	f8 cf       	rjmp	.-16     	; 0x1fde <__floatsisf+0x1c>
    1fee:	fa f4       	brpl	.+62     	; 0x202e <__floatsisf+0x6c>
    1ff0:	bb 0f       	add	r27, r27
    1ff2:	11 f4       	brne	.+4      	; 0x1ff8 <__floatsisf+0x36>
    1ff4:	60 ff       	sbrs	r22, 0
    1ff6:	1b c0       	rjmp	.+54     	; 0x202e <__floatsisf+0x6c>
    1ff8:	6f 5f       	subi	r22, 0xFF	; 255
    1ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    2000:	16 c0       	rjmp	.+44     	; 0x202e <__floatsisf+0x6c>
    2002:	88 23       	and	r24, r24
    2004:	11 f0       	breq	.+4      	; 0x200a <__floatsisf+0x48>
    2006:	96 e9       	ldi	r25, 0x96	; 150
    2008:	11 c0       	rjmp	.+34     	; 0x202c <__floatsisf+0x6a>
    200a:	77 23       	and	r23, r23
    200c:	21 f0       	breq	.+8      	; 0x2016 <__floatsisf+0x54>
    200e:	9e e8       	ldi	r25, 0x8E	; 142
    2010:	87 2f       	mov	r24, r23
    2012:	76 2f       	mov	r23, r22
    2014:	05 c0       	rjmp	.+10     	; 0x2020 <__floatsisf+0x5e>
    2016:	66 23       	and	r22, r22
    2018:	71 f0       	breq	.+28     	; 0x2036 <__floatsisf+0x74>
    201a:	96 e8       	ldi	r25, 0x86	; 134
    201c:	86 2f       	mov	r24, r22
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	2a f0       	brmi	.+10     	; 0x202e <__floatsisf+0x6c>
    2024:	9a 95       	dec	r25
    2026:	66 0f       	add	r22, r22
    2028:	77 1f       	adc	r23, r23
    202a:	88 1f       	adc	r24, r24
    202c:	da f7       	brpl	.-10     	; 0x2024 <__floatsisf+0x62>
    202e:	88 0f       	add	r24, r24
    2030:	96 95       	lsr	r25
    2032:	87 95       	ror	r24
    2034:	97 f9       	bld	r25, 7
    2036:	08 95       	ret

00002038 <__fp_cmp>:
    2038:	99 0f       	add	r25, r25
    203a:	00 08       	sbc	r0, r0
    203c:	55 0f       	add	r21, r21
    203e:	aa 0b       	sbc	r26, r26
    2040:	e0 e8       	ldi	r30, 0x80	; 128
    2042:	fe ef       	ldi	r31, 0xFE	; 254
    2044:	16 16       	cp	r1, r22
    2046:	17 06       	cpc	r1, r23
    2048:	e8 07       	cpc	r30, r24
    204a:	f9 07       	cpc	r31, r25
    204c:	c0 f0       	brcs	.+48     	; 0x207e <__fp_cmp+0x46>
    204e:	12 16       	cp	r1, r18
    2050:	13 06       	cpc	r1, r19
    2052:	e4 07       	cpc	r30, r20
    2054:	f5 07       	cpc	r31, r21
    2056:	98 f0       	brcs	.+38     	; 0x207e <__fp_cmp+0x46>
    2058:	62 1b       	sub	r22, r18
    205a:	73 0b       	sbc	r23, r19
    205c:	84 0b       	sbc	r24, r20
    205e:	95 0b       	sbc	r25, r21
    2060:	39 f4       	brne	.+14     	; 0x2070 <__fp_cmp+0x38>
    2062:	0a 26       	eor	r0, r26
    2064:	61 f0       	breq	.+24     	; 0x207e <__fp_cmp+0x46>
    2066:	23 2b       	or	r18, r19
    2068:	24 2b       	or	r18, r20
    206a:	25 2b       	or	r18, r21
    206c:	21 f4       	brne	.+8      	; 0x2076 <__fp_cmp+0x3e>
    206e:	08 95       	ret
    2070:	0a 26       	eor	r0, r26
    2072:	09 f4       	brne	.+2      	; 0x2076 <__fp_cmp+0x3e>
    2074:	a1 40       	sbci	r26, 0x01	; 1
    2076:	a6 95       	lsr	r26
    2078:	8f ef       	ldi	r24, 0xFF	; 255
    207a:	81 1d       	adc	r24, r1
    207c:	81 1d       	adc	r24, r1
    207e:	08 95       	ret

00002080 <__fp_inf>:
    2080:	97 f9       	bld	r25, 7
    2082:	9f 67       	ori	r25, 0x7F	; 127
    2084:	80 e8       	ldi	r24, 0x80	; 128
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	60 e0       	ldi	r22, 0x00	; 0
    208a:	08 95       	ret

0000208c <__fp_nan>:
    208c:	9f ef       	ldi	r25, 0xFF	; 255
    208e:	80 ec       	ldi	r24, 0xC0	; 192
    2090:	08 95       	ret

00002092 <__fp_pscA>:
    2092:	00 24       	eor	r0, r0
    2094:	0a 94       	dec	r0
    2096:	16 16       	cp	r1, r22
    2098:	17 06       	cpc	r1, r23
    209a:	18 06       	cpc	r1, r24
    209c:	09 06       	cpc	r0, r25
    209e:	08 95       	ret

000020a0 <__fp_pscB>:
    20a0:	00 24       	eor	r0, r0
    20a2:	0a 94       	dec	r0
    20a4:	12 16       	cp	r1, r18
    20a6:	13 06       	cpc	r1, r19
    20a8:	14 06       	cpc	r1, r20
    20aa:	05 06       	cpc	r0, r21
    20ac:	08 95       	ret

000020ae <__fp_round>:
    20ae:	09 2e       	mov	r0, r25
    20b0:	03 94       	inc	r0
    20b2:	00 0c       	add	r0, r0
    20b4:	11 f4       	brne	.+4      	; 0x20ba <__fp_round+0xc>
    20b6:	88 23       	and	r24, r24
    20b8:	52 f0       	brmi	.+20     	; 0x20ce <__fp_round+0x20>
    20ba:	bb 0f       	add	r27, r27
    20bc:	40 f4       	brcc	.+16     	; 0x20ce <__fp_round+0x20>
    20be:	bf 2b       	or	r27, r31
    20c0:	11 f4       	brne	.+4      	; 0x20c6 <__fp_round+0x18>
    20c2:	60 ff       	sbrs	r22, 0
    20c4:	04 c0       	rjmp	.+8      	; 0x20ce <__fp_round+0x20>
    20c6:	6f 5f       	subi	r22, 0xFF	; 255
    20c8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ca:	8f 4f       	sbci	r24, 0xFF	; 255
    20cc:	9f 4f       	sbci	r25, 0xFF	; 255
    20ce:	08 95       	ret

000020d0 <__fp_split3>:
    20d0:	57 fd       	sbrc	r21, 7
    20d2:	90 58       	subi	r25, 0x80	; 128
    20d4:	44 0f       	add	r20, r20
    20d6:	55 1f       	adc	r21, r21
    20d8:	59 f0       	breq	.+22     	; 0x20f0 <__fp_splitA+0x10>
    20da:	5f 3f       	cpi	r21, 0xFF	; 255
    20dc:	71 f0       	breq	.+28     	; 0x20fa <__fp_splitA+0x1a>
    20de:	47 95       	ror	r20

000020e0 <__fp_splitA>:
    20e0:	88 0f       	add	r24, r24
    20e2:	97 fb       	bst	r25, 7
    20e4:	99 1f       	adc	r25, r25
    20e6:	61 f0       	breq	.+24     	; 0x2100 <__fp_splitA+0x20>
    20e8:	9f 3f       	cpi	r25, 0xFF	; 255
    20ea:	79 f0       	breq	.+30     	; 0x210a <__fp_splitA+0x2a>
    20ec:	87 95       	ror	r24
    20ee:	08 95       	ret
    20f0:	12 16       	cp	r1, r18
    20f2:	13 06       	cpc	r1, r19
    20f4:	14 06       	cpc	r1, r20
    20f6:	55 1f       	adc	r21, r21
    20f8:	f2 cf       	rjmp	.-28     	; 0x20de <__fp_split3+0xe>
    20fa:	46 95       	lsr	r20
    20fc:	f1 df       	rcall	.-30     	; 0x20e0 <__fp_splitA>
    20fe:	08 c0       	rjmp	.+16     	; 0x2110 <__fp_splitA+0x30>
    2100:	16 16       	cp	r1, r22
    2102:	17 06       	cpc	r1, r23
    2104:	18 06       	cpc	r1, r24
    2106:	99 1f       	adc	r25, r25
    2108:	f1 cf       	rjmp	.-30     	; 0x20ec <__fp_splitA+0xc>
    210a:	86 95       	lsr	r24
    210c:	71 05       	cpc	r23, r1
    210e:	61 05       	cpc	r22, r1
    2110:	08 94       	sec
    2112:	08 95       	ret

00002114 <__fp_zero>:
    2114:	e8 94       	clt

00002116 <__fp_szero>:
    2116:	bb 27       	eor	r27, r27
    2118:	66 27       	eor	r22, r22
    211a:	77 27       	eor	r23, r23
    211c:	cb 01       	movw	r24, r22
    211e:	97 f9       	bld	r25, 7
    2120:	08 95       	ret

00002122 <__gesf2>:
    2122:	8a df       	rcall	.-236    	; 0x2038 <__fp_cmp>
    2124:	08 f4       	brcc	.+2      	; 0x2128 <__gesf2+0x6>
    2126:	8f ef       	ldi	r24, 0xFF	; 255
    2128:	08 95       	ret

0000212a <__mulsf3>:
    212a:	0b d0       	rcall	.+22     	; 0x2142 <__mulsf3x>
    212c:	c0 cf       	rjmp	.-128    	; 0x20ae <__fp_round>
    212e:	b1 df       	rcall	.-158    	; 0x2092 <__fp_pscA>
    2130:	28 f0       	brcs	.+10     	; 0x213c <__mulsf3+0x12>
    2132:	b6 df       	rcall	.-148    	; 0x20a0 <__fp_pscB>
    2134:	18 f0       	brcs	.+6      	; 0x213c <__mulsf3+0x12>
    2136:	95 23       	and	r25, r21
    2138:	09 f0       	breq	.+2      	; 0x213c <__mulsf3+0x12>
    213a:	a2 cf       	rjmp	.-188    	; 0x2080 <__fp_inf>
    213c:	a7 cf       	rjmp	.-178    	; 0x208c <__fp_nan>
    213e:	11 24       	eor	r1, r1
    2140:	ea cf       	rjmp	.-44     	; 0x2116 <__fp_szero>

00002142 <__mulsf3x>:
    2142:	c6 df       	rcall	.-116    	; 0x20d0 <__fp_split3>
    2144:	a0 f3       	brcs	.-24     	; 0x212e <__mulsf3+0x4>

00002146 <__mulsf3_pse>:
    2146:	95 9f       	mul	r25, r21
    2148:	d1 f3       	breq	.-12     	; 0x213e <__mulsf3+0x14>
    214a:	95 0f       	add	r25, r21
    214c:	50 e0       	ldi	r21, 0x00	; 0
    214e:	55 1f       	adc	r21, r21
    2150:	62 9f       	mul	r22, r18
    2152:	f0 01       	movw	r30, r0
    2154:	72 9f       	mul	r23, r18
    2156:	bb 27       	eor	r27, r27
    2158:	f0 0d       	add	r31, r0
    215a:	b1 1d       	adc	r27, r1
    215c:	63 9f       	mul	r22, r19
    215e:	aa 27       	eor	r26, r26
    2160:	f0 0d       	add	r31, r0
    2162:	b1 1d       	adc	r27, r1
    2164:	aa 1f       	adc	r26, r26
    2166:	64 9f       	mul	r22, r20
    2168:	66 27       	eor	r22, r22
    216a:	b0 0d       	add	r27, r0
    216c:	a1 1d       	adc	r26, r1
    216e:	66 1f       	adc	r22, r22
    2170:	82 9f       	mul	r24, r18
    2172:	22 27       	eor	r18, r18
    2174:	b0 0d       	add	r27, r0
    2176:	a1 1d       	adc	r26, r1
    2178:	62 1f       	adc	r22, r18
    217a:	73 9f       	mul	r23, r19
    217c:	b0 0d       	add	r27, r0
    217e:	a1 1d       	adc	r26, r1
    2180:	62 1f       	adc	r22, r18
    2182:	83 9f       	mul	r24, r19
    2184:	a0 0d       	add	r26, r0
    2186:	61 1d       	adc	r22, r1
    2188:	22 1f       	adc	r18, r18
    218a:	74 9f       	mul	r23, r20
    218c:	33 27       	eor	r19, r19
    218e:	a0 0d       	add	r26, r0
    2190:	61 1d       	adc	r22, r1
    2192:	23 1f       	adc	r18, r19
    2194:	84 9f       	mul	r24, r20
    2196:	60 0d       	add	r22, r0
    2198:	21 1d       	adc	r18, r1
    219a:	82 2f       	mov	r24, r18
    219c:	76 2f       	mov	r23, r22
    219e:	6a 2f       	mov	r22, r26
    21a0:	11 24       	eor	r1, r1
    21a2:	9f 57       	subi	r25, 0x7F	; 127
    21a4:	50 40       	sbci	r21, 0x00	; 0
    21a6:	8a f0       	brmi	.+34     	; 0x21ca <__mulsf3_pse+0x84>
    21a8:	e1 f0       	breq	.+56     	; 0x21e2 <__mulsf3_pse+0x9c>
    21aa:	88 23       	and	r24, r24
    21ac:	4a f0       	brmi	.+18     	; 0x21c0 <__mulsf3_pse+0x7a>
    21ae:	ee 0f       	add	r30, r30
    21b0:	ff 1f       	adc	r31, r31
    21b2:	bb 1f       	adc	r27, r27
    21b4:	66 1f       	adc	r22, r22
    21b6:	77 1f       	adc	r23, r23
    21b8:	88 1f       	adc	r24, r24
    21ba:	91 50       	subi	r25, 0x01	; 1
    21bc:	50 40       	sbci	r21, 0x00	; 0
    21be:	a9 f7       	brne	.-22     	; 0x21aa <__mulsf3_pse+0x64>
    21c0:	9e 3f       	cpi	r25, 0xFE	; 254
    21c2:	51 05       	cpc	r21, r1
    21c4:	70 f0       	brcs	.+28     	; 0x21e2 <__mulsf3_pse+0x9c>
    21c6:	5c cf       	rjmp	.-328    	; 0x2080 <__fp_inf>
    21c8:	a6 cf       	rjmp	.-180    	; 0x2116 <__fp_szero>
    21ca:	5f 3f       	cpi	r21, 0xFF	; 255
    21cc:	ec f3       	brlt	.-6      	; 0x21c8 <__mulsf3_pse+0x82>
    21ce:	98 3e       	cpi	r25, 0xE8	; 232
    21d0:	dc f3       	brlt	.-10     	; 0x21c8 <__mulsf3_pse+0x82>
    21d2:	86 95       	lsr	r24
    21d4:	77 95       	ror	r23
    21d6:	67 95       	ror	r22
    21d8:	b7 95       	ror	r27
    21da:	f7 95       	ror	r31
    21dc:	e7 95       	ror	r30
    21de:	9f 5f       	subi	r25, 0xFF	; 255
    21e0:	c1 f7       	brne	.-16     	; 0x21d2 <__mulsf3_pse+0x8c>
    21e2:	fe 2b       	or	r31, r30
    21e4:	88 0f       	add	r24, r24
    21e6:	91 1d       	adc	r25, r1
    21e8:	96 95       	lsr	r25
    21ea:	87 95       	ror	r24
    21ec:	97 f9       	bld	r25, 7
    21ee:	08 95       	ret
    21f0:	11 f4       	brne	.+4      	; 0x21f6 <__mulsf3_pse+0xb0>
    21f2:	0e f4       	brtc	.+2      	; 0x21f6 <__mulsf3_pse+0xb0>
    21f4:	4b cf       	rjmp	.-362    	; 0x208c <__fp_nan>
    21f6:	41 c0       	rjmp	.+130    	; 0x227a <__fp_mpack>

000021f8 <sqrt>:
    21f8:	73 df       	rcall	.-282    	; 0x20e0 <__fp_splitA>
    21fa:	d0 f3       	brcs	.-12     	; 0x21f0 <__mulsf3_pse+0xaa>
    21fc:	99 23       	and	r25, r25
    21fe:	d9 f3       	breq	.-10     	; 0x21f6 <__mulsf3_pse+0xb0>
    2200:	ce f3       	brts	.-14     	; 0x21f4 <__mulsf3_pse+0xae>
    2202:	9f 57       	subi	r25, 0x7F	; 127
    2204:	55 0b       	sbc	r21, r21
    2206:	87 ff       	sbrs	r24, 7
    2208:	46 d0       	rcall	.+140    	; 0x2296 <__fp_norm2>
    220a:	00 24       	eor	r0, r0
    220c:	a0 e6       	ldi	r26, 0x60	; 96
    220e:	40 ea       	ldi	r20, 0xA0	; 160
    2210:	90 01       	movw	r18, r0
    2212:	80 58       	subi	r24, 0x80	; 128
    2214:	56 95       	lsr	r21
    2216:	97 95       	ror	r25
    2218:	28 f4       	brcc	.+10     	; 0x2224 <sqrt+0x2c>
    221a:	80 5c       	subi	r24, 0xC0	; 192
    221c:	66 0f       	add	r22, r22
    221e:	77 1f       	adc	r23, r23
    2220:	88 1f       	adc	r24, r24
    2222:	20 f0       	brcs	.+8      	; 0x222c <sqrt+0x34>
    2224:	26 17       	cp	r18, r22
    2226:	37 07       	cpc	r19, r23
    2228:	48 07       	cpc	r20, r24
    222a:	30 f4       	brcc	.+12     	; 0x2238 <sqrt+0x40>
    222c:	62 1b       	sub	r22, r18
    222e:	73 0b       	sbc	r23, r19
    2230:	84 0b       	sbc	r24, r20
    2232:	20 29       	or	r18, r0
    2234:	31 29       	or	r19, r1
    2236:	4a 2b       	or	r20, r26
    2238:	a6 95       	lsr	r26
    223a:	17 94       	ror	r1
    223c:	07 94       	ror	r0
    223e:	20 25       	eor	r18, r0
    2240:	31 25       	eor	r19, r1
    2242:	4a 27       	eor	r20, r26
    2244:	58 f7       	brcc	.-42     	; 0x221c <sqrt+0x24>
    2246:	66 0f       	add	r22, r22
    2248:	77 1f       	adc	r23, r23
    224a:	88 1f       	adc	r24, r24
    224c:	20 f0       	brcs	.+8      	; 0x2256 <sqrt+0x5e>
    224e:	26 17       	cp	r18, r22
    2250:	37 07       	cpc	r19, r23
    2252:	48 07       	cpc	r20, r24
    2254:	30 f4       	brcc	.+12     	; 0x2262 <sqrt+0x6a>
    2256:	62 0b       	sbc	r22, r18
    2258:	73 0b       	sbc	r23, r19
    225a:	84 0b       	sbc	r24, r20
    225c:	20 0d       	add	r18, r0
    225e:	31 1d       	adc	r19, r1
    2260:	41 1d       	adc	r20, r1
    2262:	a0 95       	com	r26
    2264:	81 f7       	brne	.-32     	; 0x2246 <sqrt+0x4e>
    2266:	b9 01       	movw	r22, r18
    2268:	84 2f       	mov	r24, r20
    226a:	91 58       	subi	r25, 0x81	; 129
    226c:	88 0f       	add	r24, r24
    226e:	96 95       	lsr	r25
    2270:	87 95       	ror	r24
    2272:	08 95       	ret

00002274 <square>:
    2274:	9b 01       	movw	r18, r22
    2276:	ac 01       	movw	r20, r24
    2278:	58 cf       	rjmp	.-336    	; 0x212a <__mulsf3>

0000227a <__fp_mpack>:
    227a:	9f 3f       	cpi	r25, 0xFF	; 255
    227c:	31 f0       	breq	.+12     	; 0x228a <__fp_mpack_finite+0xc>

0000227e <__fp_mpack_finite>:
    227e:	91 50       	subi	r25, 0x01	; 1
    2280:	20 f4       	brcc	.+8      	; 0x228a <__fp_mpack_finite+0xc>
    2282:	87 95       	ror	r24
    2284:	77 95       	ror	r23
    2286:	67 95       	ror	r22
    2288:	b7 95       	ror	r27
    228a:	88 0f       	add	r24, r24
    228c:	91 1d       	adc	r25, r1
    228e:	96 95       	lsr	r25
    2290:	87 95       	ror	r24
    2292:	97 f9       	bld	r25, 7
    2294:	08 95       	ret

00002296 <__fp_norm2>:
    2296:	91 50       	subi	r25, 0x01	; 1
    2298:	50 40       	sbci	r21, 0x00	; 0
    229a:	66 0f       	add	r22, r22
    229c:	77 1f       	adc	r23, r23
    229e:	88 1f       	adc	r24, r24
    22a0:	d2 f7       	brpl	.-12     	; 0x2296 <__fp_norm2>
    22a2:	08 95       	ret

000022a4 <__udivmodsi4>:
    22a4:	a1 e2       	ldi	r26, 0x21	; 33
    22a6:	1a 2e       	mov	r1, r26
    22a8:	aa 1b       	sub	r26, r26
    22aa:	bb 1b       	sub	r27, r27
    22ac:	fd 01       	movw	r30, r26
    22ae:	0d c0       	rjmp	.+26     	; 0x22ca <__udivmodsi4_ep>

000022b0 <__udivmodsi4_loop>:
    22b0:	aa 1f       	adc	r26, r26
    22b2:	bb 1f       	adc	r27, r27
    22b4:	ee 1f       	adc	r30, r30
    22b6:	ff 1f       	adc	r31, r31
    22b8:	a2 17       	cp	r26, r18
    22ba:	b3 07       	cpc	r27, r19
    22bc:	e4 07       	cpc	r30, r20
    22be:	f5 07       	cpc	r31, r21
    22c0:	20 f0       	brcs	.+8      	; 0x22ca <__udivmodsi4_ep>
    22c2:	a2 1b       	sub	r26, r18
    22c4:	b3 0b       	sbc	r27, r19
    22c6:	e4 0b       	sbc	r30, r20
    22c8:	f5 0b       	sbc	r31, r21

000022ca <__udivmodsi4_ep>:
    22ca:	66 1f       	adc	r22, r22
    22cc:	77 1f       	adc	r23, r23
    22ce:	88 1f       	adc	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	1a 94       	dec	r1
    22d4:	69 f7       	brne	.-38     	; 0x22b0 <__udivmodsi4_loop>
    22d6:	60 95       	com	r22
    22d8:	70 95       	com	r23
    22da:	80 95       	com	r24
    22dc:	90 95       	com	r25
    22de:	9b 01       	movw	r18, r22
    22e0:	ac 01       	movw	r20, r24
    22e2:	bd 01       	movw	r22, r26
    22e4:	cf 01       	movw	r24, r30
    22e6:	08 95       	ret

000022e8 <memset>:
    22e8:	dc 01       	movw	r26, r24
    22ea:	01 c0       	rjmp	.+2      	; 0x22ee <memset+0x6>
    22ec:	6d 93       	st	X+, r22
    22ee:	41 50       	subi	r20, 0x01	; 1
    22f0:	50 40       	sbci	r21, 0x00	; 0
    22f2:	e0 f7       	brcc	.-8      	; 0x22ec <memset+0x4>
    22f4:	08 95       	ret

000022f6 <_exit>:
    22f6:	f8 94       	cli

000022f8 <__stop_program>:
    22f8:	ff cf       	rjmp	.-2      	; 0x22f8 <__stop_program>
