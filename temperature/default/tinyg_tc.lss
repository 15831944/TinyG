
tinyg_tc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a82  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000303  00800100  00800100  00001af6  2**0
                  ALLOC
  2 .debug_aranges 000000e0  00000000  00000000  00001af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000523  00000000  00000000  00001bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001f3d  00000000  00000000  000020f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000983  00000000  00000000  00004036  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001219  00000000  00000000  000049b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000003e0  00000000  00000000  00005bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000b77  00000000  00000000  00005fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000005e6  00000000  00000000  00006b2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
       4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      10:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      14:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      18:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      1c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      20:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      24:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      28:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      2c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      30:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      34:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      38:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_14>
      3c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      40:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      44:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__vector_17>
      48:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__vector_18>
      4c:	0c 94 af 08 	jmp	0x115e	; 0x115e <__vector_19>
      50:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      58:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      5c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      60:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      64:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>

00000068 <__c.2091>:
      68:	48 65 61 74 65 72 20 54 69 6d 65 6f 75 74 20 45     Heater Timeout E
      78:	72 72 6f 72 20 53 68 75 74 64 6f 77 6e 0a 00        rror Shutdown..

00000087 <__c.2089>:
      87:	48 65 61 74 65 72 20 41 6d 62 69 65 6e 74 20 45     Heater Ambient E
      97:	72 72 6f 72 20 53 68 75 74 64 6f 77 6e 0a 00        rror Shutdown..

000000a6 <__c.2086>:
      a6:	48 65 61 74 65 72 20 53 65 6e 73 6f 72 20 45 72     Heater Sensor Er
      b6:	72 6f 72 20 53 68 75 74 64 6f 77 6e 0a 00           ror Shutdown..

000000c4 <msg_hstate>:
      c4:	06 01 0b 01 16 01 20 01                             ...... .

000000cc <__c.1924>:
      cc:	0a 00                                               ..

000000ce <__c.1919>:
      ce:	20 20 49 3a 00                                        I:.

000000d3 <__c.1917>:
      d3:	20 20 45 72 72 3a 00                                  Err:.

000000da <__c.1915>:
      da:	20 20 53 74 64 44 65 76 3a 00                         StdDev:.

000000e4 <__c.1913>:
      e4:	20 20 50 57 4d 3a 00                                  PWM:.

000000eb <__c.1911>:
      eb:	54 65 6d 70 3a 00                                   Temp:.

000000f1 <__c.1907>:
      f1:	0a 44 65 76 69 63 65 20 49 6e 69 74 69 61 6c 69     .Device Initiali
     101:	7a 65 64 0a 00                                      zed..

00000106 <msg_hstate0>:
     106:	20 20 4f 4b 00                                        OK.

0000010b <msg_hstate1>:
     10b:	20 20 53 68 75 74 64 6f 77 6e 00                      Shutdown.

00000116 <msg_hstate2>:
     116:	20 20 48 65 61 74 69 6e 67 00                         Heating.

00000120 <msg_hstate3>:
     120:	20 20 52 45 47 55 4c 41 54 45 44 00                   REGULATED.

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d8 e0       	ldi	r29, 0x08	; 8
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_clear_bss>:
     138:	14 e0       	ldi	r17, 0x04	; 4
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	a3 30       	cpi	r26, 0x03	; 3
     144:	b1 07       	cpc	r27, r17
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
     148:	0e 94 32 07 	call	0xe64	; 0xe64 <main>
     14c:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <_exit>

00000150 <__bad_interrupt>:
     150:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000154 <pid_reset>:
	pid.state = PID_ON;
}

void pid_reset()
{
	pid.output = 0;
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	40 e0       	ldi	r20, 0x00	; 0
     15a:	50 e0       	ldi	r21, 0x00	; 0
     15c:	20 93 2f 01 	sts	0x012F, r18
     160:	30 93 30 01 	sts	0x0130, r19
     164:	40 93 31 01 	sts	0x0131, r20
     168:	50 93 32 01 	sts	0x0132, r21
	pid.integral = PID_INITIAL_INTEGRAL;
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	a8 e4       	ldi	r26, 0x48	; 72
     172:	b3 e4       	ldi	r27, 0x43	; 67
     174:	80 93 43 01 	sts	0x0143, r24
     178:	90 93 44 01 	sts	0x0144, r25
     17c:	a0 93 45 01 	sts	0x0145, r26
     180:	b0 93 46 01 	sts	0x0146, r27
	pid.prev_error = 0;
     184:	20 93 3f 01 	sts	0x013F, r18
     188:	30 93 40 01 	sts	0x0140, r19
     18c:	40 93 41 01 	sts	0x0141, r20
     190:	50 93 42 01 	sts	0x0142, r21
}
     194:	08 95       	ret

00000196 <pid_calculate>:

double pid_calculate(double setpoint,double temperature)
{
     196:	6f 92       	push	r6
     198:	7f 92       	push	r7
     19a:	8f 92       	push	r8
     19c:	9f 92       	push	r9
     19e:	af 92       	push	r10
     1a0:	bf 92       	push	r11
     1a2:	cf 92       	push	r12
     1a4:	df 92       	push	r13
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	7b 01       	movw	r14, r22
     1b0:	8c 01       	movw	r16, r24
	if (pid.state == PID_OFF) { return (pid.output_min);}
     1b2:	80 91 2d 01 	lds	r24, 0x012D
     1b6:	88 23       	and	r24, r24
     1b8:	49 f4       	brne	.+18     	; 0x1cc <pid_calculate+0x36>
     1ba:	70 91 37 01 	lds	r23, 0x0137
     1be:	60 91 38 01 	lds	r22, 0x0138
     1c2:	90 91 39 01 	lds	r25, 0x0139
     1c6:	80 91 3a 01 	lds	r24, 0x013A
     1ca:	dd c0       	rjmp	.+442    	; 0x386 <pid_calculate+0x1f0>

	pid.error = setpoint - temperature;		// current error term
     1cc:	c8 01       	movw	r24, r16
     1ce:	b7 01       	movw	r22, r14
     1d0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__subsf3>
     1d4:	3b 01       	movw	r6, r22
     1d6:	4c 01       	movw	r8, r24
     1d8:	60 93 3b 01 	sts	0x013B, r22
     1dc:	70 93 3c 01 	sts	0x013C, r23
     1e0:	80 93 3d 01 	sts	0x013D, r24
     1e4:	90 93 3e 01 	sts	0x013E, r25

	// perform integration only if error is GT epsilon, and with anti-windup
	if ((fabs(pid.error) > PID_EPSILON) && (pid.output < pid.output_max)) {	
     1e8:	9f 77       	andi	r25, 0x7F	; 127
     1ea:	2d ec       	ldi	r18, 0xCD	; 205
     1ec:	3c ec       	ldi	r19, 0xCC	; 204
     1ee:	4c ec       	ldi	r20, 0xCC	; 204
     1f0:	5d e3       	ldi	r21, 0x3D	; 61
     1f2:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__gesf2>
     1f6:	18 16       	cp	r1, r24
     1f8:	84 f5       	brge	.+96     	; 0x25a <pid_calculate+0xc4>
     1fa:	60 91 2f 01 	lds	r22, 0x012F
     1fe:	70 91 30 01 	lds	r23, 0x0130
     202:	80 91 31 01 	lds	r24, 0x0131
     206:	90 91 32 01 	lds	r25, 0x0132
     20a:	20 91 33 01 	lds	r18, 0x0133
     20e:	30 91 34 01 	lds	r19, 0x0134
     212:	40 91 35 01 	lds	r20, 0x0135
     216:	50 91 36 01 	lds	r21, 0x0136
     21a:	0e 94 0d 0b 	call	0x161a	; 0x161a <__cmpsf2>
     21e:	88 23       	and	r24, r24
     220:	e4 f4       	brge	.+56     	; 0x25a <pid_calculate+0xc4>
		pid.integral += (pid.error * PID_DT);
     222:	c4 01       	movw	r24, r8
     224:	b3 01       	movw	r22, r6
     226:	2d ec       	ldi	r18, 0xCD	; 205
     228:	3c ec       	ldi	r19, 0xCC	; 204
     22a:	4c ec       	ldi	r20, 0xCC	; 204
     22c:	5d e3       	ldi	r21, 0x3D	; 61
     22e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__mulsf3>
     232:	9b 01       	movw	r18, r22
     234:	ac 01       	movw	r20, r24
     236:	60 91 43 01 	lds	r22, 0x0143
     23a:	70 91 44 01 	lds	r23, 0x0144
     23e:	80 91 45 01 	lds	r24, 0x0145
     242:	90 91 46 01 	lds	r25, 0x0146
     246:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__addsf3>
     24a:	60 93 43 01 	sts	0x0143, r22
     24e:	70 93 44 01 	sts	0x0144, r23
     252:	80 93 45 01 	sts	0x0145, r24
     256:	90 93 46 01 	sts	0x0146, r25
	}
	// compute derivative and output
	pid.derivative = (pid.error - pid.prev_error) / PID_DT;
     25a:	c4 01       	movw	r24, r8
     25c:	b3 01       	movw	r22, r6
     25e:	20 91 3f 01 	lds	r18, 0x013F
     262:	30 91 40 01 	lds	r19, 0x0140
     266:	40 91 41 01 	lds	r20, 0x0141
     26a:	50 91 42 01 	lds	r21, 0x0142
     26e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__subsf3>
     272:	2d ec       	ldi	r18, 0xCD	; 205
     274:	3c ec       	ldi	r19, 0xCC	; 204
     276:	4c ec       	ldi	r20, 0xCC	; 204
     278:	5d e3       	ldi	r21, 0x3D	; 61
     27a:	0e 94 11 0b 	call	0x1622	; 0x1622 <__divsf3>
     27e:	5b 01       	movw	r10, r22
     280:	6c 01       	movw	r12, r24
     282:	60 93 47 01 	sts	0x0147, r22
     286:	70 93 48 01 	sts	0x0148, r23
     28a:	80 93 49 01 	sts	0x0149, r24
     28e:	90 93 4a 01 	sts	0x014A, r25
	pid.output = pid.Kp * pid.error + pid.Ki * pid.integral + pid.Kd * pid.derivative;
     292:	c4 01       	movw	r24, r8
     294:	b3 01       	movw	r22, r6
     296:	20 91 4b 01 	lds	r18, 0x014B
     29a:	30 91 4c 01 	lds	r19, 0x014C
     29e:	40 91 4d 01 	lds	r20, 0x014D
     2a2:	50 91 4e 01 	lds	r21, 0x014E
     2a6:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__mulsf3>
     2aa:	7b 01       	movw	r14, r22
     2ac:	8c 01       	movw	r16, r24
     2ae:	60 91 4f 01 	lds	r22, 0x014F
     2b2:	70 91 50 01 	lds	r23, 0x0150
     2b6:	80 91 51 01 	lds	r24, 0x0151
     2ba:	90 91 52 01 	lds	r25, 0x0152
     2be:	20 91 43 01 	lds	r18, 0x0143
     2c2:	30 91 44 01 	lds	r19, 0x0144
     2c6:	40 91 45 01 	lds	r20, 0x0145
     2ca:	50 91 46 01 	lds	r21, 0x0146
     2ce:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__mulsf3>
     2d2:	9b 01       	movw	r18, r22
     2d4:	ac 01       	movw	r20, r24
     2d6:	c8 01       	movw	r24, r16
     2d8:	b7 01       	movw	r22, r14
     2da:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__addsf3>
     2de:	7b 01       	movw	r14, r22
     2e0:	8c 01       	movw	r16, r24
     2e2:	c6 01       	movw	r24, r12
     2e4:	b5 01       	movw	r22, r10
     2e6:	20 91 53 01 	lds	r18, 0x0153
     2ea:	30 91 54 01 	lds	r19, 0x0154
     2ee:	40 91 55 01 	lds	r20, 0x0155
     2f2:	50 91 56 01 	lds	r21, 0x0156
     2f6:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__mulsf3>
     2fa:	9b 01       	movw	r18, r22
     2fc:	ac 01       	movw	r20, r24
     2fe:	c8 01       	movw	r24, r16
     300:	b7 01       	movw	r22, r14
     302:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__addsf3>
     306:	7b 01       	movw	r14, r22
     308:	8c 01       	movw	r16, r24
     30a:	60 93 2f 01 	sts	0x012F, r22
     30e:	70 93 30 01 	sts	0x0130, r23
     312:	80 93 31 01 	sts	0x0131, r24
     316:	90 93 32 01 	sts	0x0132, r25

	// fix min amd max outputs (saturation filter)
	if(pid.output > pid.output_max) { pid.output = pid.output_max; } else
     31a:	a0 90 33 01 	lds	r10, 0x0133
     31e:	b0 90 34 01 	lds	r11, 0x0134
     322:	c0 90 35 01 	lds	r12, 0x0135
     326:	d0 90 36 01 	lds	r13, 0x0136
     32a:	a6 01       	movw	r20, r12
     32c:	95 01       	movw	r18, r10
     32e:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__gesf2>
     332:	18 16       	cp	r1, r24
     334:	84 f0       	brlt	.+32     	; 0x356 <pid_calculate+0x1c0>
	if(pid.output < pid.output_min) { pid.output = pid.output_min; }
     336:	a0 90 37 01 	lds	r10, 0x0137
     33a:	b0 90 38 01 	lds	r11, 0x0138
     33e:	c0 90 39 01 	lds	r12, 0x0139
     342:	d0 90 3a 01 	lds	r13, 0x013A
     346:	c8 01       	movw	r24, r16
     348:	b7 01       	movw	r22, r14
     34a:	a6 01       	movw	r20, r12
     34c:	95 01       	movw	r18, r10
     34e:	0e 94 0d 0b 	call	0x161a	; 0x161a <__cmpsf2>
     352:	88 23       	and	r24, r24
     354:	44 f4       	brge	.+16     	; 0x366 <pid_calculate+0x1d0>
     356:	a0 92 2f 01 	sts	0x012F, r10
     35a:	b0 92 30 01 	sts	0x0130, r11
     35e:	c0 92 31 01 	sts	0x0131, r12
     362:	d0 92 32 01 	sts	0x0132, r13
	pid.prev_error = pid.error;
     366:	60 92 3f 01 	sts	0x013F, r6
     36a:	70 92 40 01 	sts	0x0140, r7
     36e:	80 92 41 01 	sts	0x0141, r8
     372:	90 92 42 01 	sts	0x0142, r9

	return pid.output;
     376:	70 91 2f 01 	lds	r23, 0x012F
     37a:	60 91 30 01 	lds	r22, 0x0130
     37e:	90 91 31 01 	lds	r25, 0x0131
     382:	80 91 32 01 	lds	r24, 0x0132
}
     386:	27 2f       	mov	r18, r23
     388:	36 2f       	mov	r19, r22
     38a:	49 2f       	mov	r20, r25
     38c:	58 2f       	mov	r21, r24
     38e:	b9 01       	movw	r22, r18
     390:	ca 01       	movw	r24, r20
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	df 90       	pop	r13
     39c:	cf 90       	pop	r12
     39e:	bf 90       	pop	r11
     3a0:	af 90       	pop	r10
     3a2:	9f 90       	pop	r9
     3a4:	8f 90       	pop	r8
     3a6:	7f 90       	pop	r7
     3a8:	6f 90       	pop	r6
     3aa:	08 95       	ret

000003ac <sensor_on>:
	sensor.no_power_temperature = SENSOR_NO_POWER_TEMPERATURE;
}

void sensor_on()
{
	sensor.state = SENSOR_NO_DATA;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	80 93 69 01 	sts	0x0169, r24
}
     3b2:	08 95       	ret

000003b4 <sensor_off>:

void sensor_off()
{
	sensor.state = SENSOR_OFF;
     3b4:	10 92 69 01 	sts	0x0169, r1
}
     3b8:	08 95       	ret

000003ba <sensor_start_reading>:

void sensor_start_reading() 
{ 
	sensor.sample_idx = 0;
     3ba:	10 92 6b 01 	sts	0x016B, r1
	sensor.code = SENSOR_TAKING_READING;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	80 93 6a 01 	sts	0x016A, r24
}
     3c4:	08 95       	ret

000003c6 <sensor_get_state>:

uint8_t sensor_get_state() { return (sensor.state);}
     3c6:	80 91 69 01 	lds	r24, 0x0169
     3ca:	08 95       	ret

000003cc <sensor_get_code>:
uint8_t sensor_get_code() { return (sensor.code);}
     3cc:	80 91 6a 01 	lds	r24, 0x016A
     3d0:	08 95       	ret

000003d2 <sensor_get_temperature>:

double sensor_get_temperature() 
{ 
	if (sensor.state == SENSOR_HAS_DATA) { 
     3d2:	80 91 69 01 	lds	r24, 0x0169
     3d6:	83 30       	cpi	r24, 0x03	; 3
     3d8:	29 f0       	breq	.+10     	; 0x3e4 <sensor_get_temperature+0x12>
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	99 e8       	ldi	r25, 0x89	; 137
     3e0:	83 ec       	ldi	r24, 0xC3	; 195
     3e2:	08 c0       	rjmp	.+16     	; 0x3f4 <sensor_get_temperature+0x22>
		return (sensor.temperature);
     3e4:	70 91 6d 01 	lds	r23, 0x016D
     3e8:	60 91 6e 01 	lds	r22, 0x016E
     3ec:	90 91 6f 01 	lds	r25, 0x016F
     3f0:	80 91 70 01 	lds	r24, 0x0170
	} else {
		return (LESS_THAN_ZERO);	// an impossible temperature value
	}
}
     3f4:	27 2f       	mov	r18, r23
     3f6:	36 2f       	mov	r19, r22
     3f8:	49 2f       	mov	r20, r25
     3fa:	58 2f       	mov	r21, r24
     3fc:	b9 01       	movw	r22, r18
     3fe:	ca 01       	movw	r24, r20
     400:	08 95       	ret

00000402 <adc_init>:
 *	I need to fund out why this is happening and stop it.
 *	In the mean time there is a do-while loop in the read function.
 */
void adc_init(uint8_t channel)
{
	ADMUX  = (ADC_REFS | channel);	 // setup ADC Vref and channel
     402:	98 2f       	mov	r25, r24
     404:	90 64       	ori	r25, 0x40	; 64
     406:	ec e7       	ldi	r30, 0x7C	; 124
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	90 83       	st	Z, r25
	ADCSRA = (ADC_ENABLE | ADC_PRESCALE);// Enable ADC (bit 7) & set prescaler
     40c:	96 e8       	ldi	r25, 0x86	; 134
     40e:	90 93 7a 00 	sts	0x007A, r25

	ADMUX &= 0xF0;						// clobber the channel
     412:	90 81       	ld	r25, Z
     414:	90 7f       	andi	r25, 0xF0	; 240
     416:	90 83       	st	Z, r25
	ADMUX |= 0x0F & ADC_CHANNEL;		// set the channel
     418:	90 81       	ld	r25, Z
     41a:	90 83       	st	Z, r25
	DIDR0 = (1<<channel);				// disable digital input
     41c:	21 e0       	ldi	r18, 0x01	; 1
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	02 c0       	rjmp	.+4      	; 0x426 <adc_init+0x24>
     422:	22 0f       	add	r18, r18
     424:	33 1f       	adc	r19, r19
     426:	8a 95       	dec	r24
     428:	e2 f7       	brpl	.-8      	; 0x422 <adc_init+0x20>
     42a:	20 93 7e 00 	sts	0x007E, r18
}
     42e:	08 95       	ret

00000430 <adc_read>:

uint16_t adc_read()
{
	do {
		ADCSRA |= ADC_START_CONVERSION; // start the conversion
     430:	80 91 7a 00 	lds	r24, 0x007A
     434:	80 64       	ori	r24, 0x40	; 64
     436:	80 93 7a 00 	sts	0x007A, r24
		while (ADCSRA && (1<<ADIF) == 0);// wait about 100 uSec
     43a:	80 91 7a 00 	lds	r24, 0x007A
		ADCSRA |= (1<<ADIF);			// clear the conversion flag
     43e:	80 91 7a 00 	lds	r24, 0x007A
     442:	80 61       	ori	r24, 0x10	; 16
     444:	80 93 7a 00 	sts	0x007A, r24
	} while (ADC == 0);
     448:	80 91 78 00 	lds	r24, 0x0078
     44c:	90 91 79 00 	lds	r25, 0x0079
     450:	89 2b       	or	r24, r25
     452:	71 f3       	breq	.-36     	; 0x430 <adc_read>
	return (ADC);
     454:	20 91 78 00 	lds	r18, 0x0078
     458:	30 91 79 00 	lds	r19, 0x0079
}
     45c:	c9 01       	movw	r24, r18
     45e:	08 95       	ret

00000460 <pwm_init>:
 *	Mode: 8 bit Fast PWM Fast w/OCR2A setting PWM freq (TOP value)
 *		  and OCR2B setting the duty cycle as a fraction of OCR2A seeting
 */
void pwm_init(void)
{
	TCCR2A  = PWM_INVERTED;		// alternative is PWM_NONINVERTED
     460:	e0 eb       	ldi	r30, 0xB0	; 176
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	80 ef       	ldi	r24, 0xF0	; 240
     466:	80 83       	st	Z, r24
	TCCR2A |= 0b00000011;		// Waveform generation set to MODE 7 - here...
     468:	80 81       	ld	r24, Z
     46a:	83 60       	ori	r24, 0x03	; 3
     46c:	80 83       	st	Z, r24
	TCCR2B  = 0b00001000;		// ...continued here
     46e:	e1 eb       	ldi	r30, 0xB1	; 177
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	88 e0       	ldi	r24, 0x08	; 8
     474:	80 83       	st	Z, r24
	TCCR2B |= PWM_PRESCALE_SET;	// set clock and prescaler
     476:	80 81       	ld	r24, Z
     478:	84 60       	ori	r24, 0x04	; 4
     47a:	80 83       	st	Z, r24
	TIMSK1 = 0; 				// disable PWM interrupts
     47c:	10 92 6f 00 	sts	0x006F, r1
	OCR2A = 0;					// clear PWM frequency (TOP value)
     480:	10 92 b3 00 	sts	0x00B3, r1
	OCR2B = 0;					// clear PWM duty cycle as % of TOP value
     484:	10 92 b4 00 	sts	0x00B4, r1
	device.pwm_freq = 0;
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	a0 e0       	ldi	r26, 0x00	; 0
     48e:	b0 e0       	ldi	r27, 0x00	; 0
     490:	80 93 dd 01 	sts	0x01DD, r24
     494:	90 93 de 01 	sts	0x01DE, r25
     498:	a0 93 df 01 	sts	0x01DF, r26
     49c:	b0 93 e0 01 	sts	0x01E0, r27
}
     4a0:	08 95       	ret

000004a2 <pwm_set_freq>:
 *
 *	At current settings the range is from about 500 Hz to about 6000 Hz  
 */

uint8_t pwm_set_freq(double freq)
{
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	9b 01       	movw	r18, r22
     4ac:	ac 01       	movw	r20, r24
	device.pwm_freq = F_CPU / PWM_PRESCALE / freq;
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	74 e2       	ldi	r23, 0x24	; 36
     4b2:	84 ef       	ldi	r24, 0xF4	; 244
     4b4:	97 e4       	ldi	r25, 0x47	; 71
     4b6:	0e 94 11 0b 	call	0x1622	; 0x1622 <__divsf3>
     4ba:	7b 01       	movw	r14, r22
     4bc:	8c 01       	movw	r16, r24
     4be:	60 93 dd 01 	sts	0x01DD, r22
     4c2:	70 93 de 01 	sts	0x01DE, r23
     4c6:	80 93 df 01 	sts	0x01DF, r24
     4ca:	90 93 e0 01 	sts	0x01E0, r25
	if (device.pwm_freq < PWM_MIN_RES) { 
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	40 ea       	ldi	r20, 0xA0	; 160
     4d4:	51 e4       	ldi	r21, 0x41	; 65
     4d6:	0e 94 0d 0b 	call	0x161a	; 0x161a <__cmpsf2>
     4da:	88 23       	and	r24, r24
     4dc:	14 f4       	brge	.+4      	; 0x4e2 <pwm_set_freq+0x40>
		OCR2A = PWM_MIN_RES;
     4de:	84 e1       	ldi	r24, 0x14	; 20
     4e0:	0b c0       	rjmp	.+22     	; 0x4f8 <pwm_set_freq+0x56>
	} else if (device.pwm_freq >= PWM_MAX_RES) { 
     4e2:	c8 01       	movw	r24, r16
     4e4:	b7 01       	movw	r22, r14
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	4f e7       	ldi	r20, 0x7F	; 127
     4ec:	53 e4       	ldi	r21, 0x43	; 67
     4ee:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__gesf2>
     4f2:	88 23       	and	r24, r24
     4f4:	24 f0       	brlt	.+8      	; 0x4fe <pwm_set_freq+0x5c>
		OCR2A = PWM_MAX_RES;
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	80 93 b3 00 	sts	0x00B3, r24
     4fc:	06 c0       	rjmp	.+12     	; 0x50a <pwm_set_freq+0x68>
	} else { 
		OCR2A = (uint8_t)device.pwm_freq;
     4fe:	c8 01       	movw	r24, r16
     500:	b7 01       	movw	r22, r14
     502:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fixunssfsi>
     506:	60 93 b3 00 	sts	0x00B3, r22
	}
	return (SC_OK);
}
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	08 95       	ret

00000516 <pwm_set_duty>:
 *	Since I can't seem to get the output pin to work in non-inverted mode
 *	it's done in software in this routine.
 */

uint8_t pwm_set_duty(double duty)
{
     516:	af 92       	push	r10
     518:	bf 92       	push	r11
     51a:	cf 92       	push	r12
     51c:	df 92       	push	r13
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	5b 01       	movw	r10, r22
     528:	6c 01       	movw	r12, r24
	if (duty < 0.01) {				// anything approaching 0% 
     52a:	2a e0       	ldi	r18, 0x0A	; 10
     52c:	37 ed       	ldi	r19, 0xD7	; 215
     52e:	43 e2       	ldi	r20, 0x23	; 35
     530:	5c e3       	ldi	r21, 0x3C	; 60
     532:	0e 94 0d 0b 	call	0x161a	; 0x161a <__cmpsf2>
     536:	88 23       	and	r24, r24
     538:	24 f4       	brge	.+8      	; 0x542 <pwm_set_duty+0x2c>
		OCR2B = 255;
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	80 93 b4 00 	sts	0x00B4, r24
     540:	30 c0       	rjmp	.+96     	; 0x5a2 <pwm_set_duty+0x8c>
	} else if (duty > 99.9) { 		// anything approaching 100%
     542:	c6 01       	movw	r24, r12
     544:	b5 01       	movw	r22, r10
     546:	2d ec       	ldi	r18, 0xCD	; 205
     548:	3c ec       	ldi	r19, 0xCC	; 204
     54a:	47 ec       	ldi	r20, 0xC7	; 199
     54c:	52 e4       	ldi	r21, 0x42	; 66
     54e:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__gesf2>
     552:	18 16       	cp	r1, r24
     554:	1c f4       	brge	.+6      	; 0x55c <pwm_set_duty+0x46>
		OCR2B = 0;
     556:	10 92 b4 00 	sts	0x00B4, r1
     55a:	23 c0       	rjmp	.+70     	; 0x5a2 <pwm_set_duty+0x8c>
	} else {
		OCR2B = (uint8_t)(OCR2A * (1-(duty/100)));
     55c:	60 91 b3 00 	lds	r22, 0x00B3
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	88 27       	eor	r24, r24
     564:	77 fd       	sbrc	r23, 7
     566:	80 95       	com	r24
     568:	98 2f       	mov	r25, r24
     56a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__floatsisf>
     56e:	7b 01       	movw	r14, r22
     570:	8c 01       	movw	r16, r24
     572:	c6 01       	movw	r24, r12
     574:	b5 01       	movw	r22, r10
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	48 ec       	ldi	r20, 0xC8	; 200
     57c:	52 ec       	ldi	r21, 0xC2	; 194
     57e:	0e 94 11 0b 	call	0x1622	; 0x1622 <__divsf3>
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e8       	ldi	r20, 0x80	; 128
     588:	5f e3       	ldi	r21, 0x3F	; 63
     58a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__addsf3>
     58e:	9b 01       	movw	r18, r22
     590:	ac 01       	movw	r20, r24
     592:	c8 01       	movw	r24, r16
     594:	b7 01       	movw	r22, r14
     596:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__mulsf3>
     59a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fixunssfsi>
     59e:	60 93 b4 00 	sts	0x00B4, r22
	}
	OCR2A = (uint8_t)device.pwm_freq;
     5a2:	60 91 dd 01 	lds	r22, 0x01DD
     5a6:	70 91 de 01 	lds	r23, 0x01DE
     5aa:	80 91 df 01 	lds	r24, 0x01DF
     5ae:	90 91 e0 01 	lds	r25, 0x01E0
     5b2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fixunssfsi>
     5b6:	60 93 b3 00 	sts	0x00B3, r22
	return (SC_OK);
}
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	df 90       	pop	r13
     5c6:	cf 90       	pop	r12
     5c8:	bf 90       	pop	r11
     5ca:	af 90       	pop	r10
     5cc:	08 95       	ret

000005ce <pwm_on>:
	OCR2B = 0;					// clear PWM duty cycle as % of TOP value
	device.pwm_freq = 0;
}

void pwm_on(double freq, double duty)
{
     5ce:	af 92       	push	r10
     5d0:	bf 92       	push	r11
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	7b 01       	movw	r14, r22
     5e0:	8c 01       	movw	r16, r24
     5e2:	59 01       	movw	r10, r18
     5e4:	6a 01       	movw	r12, r20
	pwm_init();
     5e6:	0e 94 30 02 	call	0x460	; 0x460 <pwm_init>
	pwm_set_freq(freq);
     5ea:	c8 01       	movw	r24, r16
     5ec:	b7 01       	movw	r22, r14
     5ee:	0e 94 51 02 	call	0x4a2	; 0x4a2 <pwm_set_freq>
	pwm_set_duty(duty);
     5f2:	c6 01       	movw	r24, r12
     5f4:	b5 01       	movw	r22, r10
     5f6:	0e 94 8b 02 	call	0x516	; 0x516 <pwm_set_duty>
}
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	bf 90       	pop	r11
     608:	af 90       	pop	r10
     60a:	08 95       	ret

0000060c <pwm_off>:

void pwm_off(void)
{
	pwm_on(0,0);
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	9b 01       	movw	r18, r22
     616:	ac 01       	movw	r20, r24
     618:	0e 94 e7 02 	call	0x5ce	; 0x5ce <pwm_on>
}
     61c:	08 95       	ret

0000061e <heater_off>:
	heater.state = HEATER_HEATING;
	led_off();
}

void heater_off(uint8_t state, uint8_t code) 
{
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	18 2f       	mov	r17, r24
     624:	06 2f       	mov	r16, r22
	pwm_off();							// stop sending current to the heater
     626:	0e 94 06 03 	call	0x60c	; 0x60c <pwm_off>
	sensor.state = SENSOR_NO_DATA;
}

void sensor_off()
{
	sensor.state = SENSOR_OFF;
     62a:	10 92 69 01 	sts	0x0169, r1

void heater_off(uint8_t state, uint8_t code) 
{
	pwm_off();							// stop sending current to the heater
	sensor_off();						// stop taking readings
	heater.state = state;
     62e:	10 93 07 01 	sts	0x0107, r17
	heater.code = code;
     632:	00 93 08 01 	sts	0x0108, r16
	LED_PORT &= ~(LED_PIN);
}

void led_off(void) 
{
	LED_PORT |= LED_PIN;
     636:	5a 9a       	sbi	0x0b, 2	; 11
	pwm_off();							// stop sending current to the heater
	sensor_off();						// stop taking readings
	heater.state = state;
	heater.code = code;
	led_off();
}
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	08 95       	ret

0000063e <heater_on>:
	sensor_init();
	pid_init();
}

void heater_on(double setpoint)
{
     63e:	af 92       	push	r10
     640:	bf 92       	push	r11
     642:	cf 92       	push	r12
     644:	df 92       	push	r13
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	0f 93       	push	r16
     64c:	1f 93       	push	r17
     64e:	5b 01       	movw	r10, r22
     650:	6c 01       	movw	r12, r24
	// no action if heater is already on
	if ((heater.state == HEATER_HEATING) || (heater.state == HEATER_REGULATED)) {
     652:	80 91 07 01 	lds	r24, 0x0107
     656:	82 50       	subi	r24, 0x02	; 2
     658:	82 30       	cpi	r24, 0x02	; 2
     65a:	08 f4       	brcc	.+2      	; 0x65e <heater_on+0x20>
     65c:	4d c0       	rjmp	.+154    	; 0x6f8 <heater_on+0xba>
	sensor.no_power_temperature = SENSOR_NO_POWER_TEMPERATURE;
}

void sensor_on()
{
	sensor.state = SENSOR_NO_DATA;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	80 93 69 01 	sts	0x0169, r24
	sensor.state = SENSOR_OFF;
}

void sensor_start_reading() 
{ 
	sensor.sample_idx = 0;
     664:	10 92 6b 01 	sts	0x016B, r1
	sensor.code = SENSOR_TAKING_READING;
     668:	80 93 6a 01 	sts	0x016A, r24
	pid.state = PID_ON;
}

void pid_reset()
{
	pid.output = 0;
     66c:	0f 2e       	mov	r0, r31
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	ef 2e       	mov	r14, r31
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	ff 2e       	mov	r15, r31
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	0f 2f       	mov	r16, r31
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	1f 2f       	mov	r17, r31
     67e:	f0 2d       	mov	r31, r0
     680:	e0 92 2f 01 	sts	0x012F, r14
     684:	f0 92 30 01 	sts	0x0130, r15
     688:	00 93 31 01 	sts	0x0131, r16
     68c:	10 93 32 01 	sts	0x0132, r17
	pid.integral = PID_INITIAL_INTEGRAL;
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	a8 e4       	ldi	r26, 0x48	; 72
     696:	b3 e4       	ldi	r27, 0x43	; 67
     698:	80 93 43 01 	sts	0x0143, r24
     69c:	90 93 44 01 	sts	0x0144, r25
     6a0:	a0 93 45 01 	sts	0x0145, r26
     6a4:	b0 93 46 01 	sts	0x0146, r27
	pid.prev_error = 0;
     6a8:	e0 92 3f 01 	sts	0x013F, r14
     6ac:	f0 92 40 01 	sts	0x0140, r15
     6b0:	00 93 41 01 	sts	0x0141, r16
     6b4:	10 93 42 01 	sts	0x0142, r17
	}
	// turn on lower level functions
	sensor_on();						// enable the sensor
	sensor_start_reading();				// now start a reading
	pid_reset();
	pwm_on(PWM_FREQUENCY, 0);			// duty cycle will be set by PID loop
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	8a e7       	ldi	r24, 0x7A	; 122
     6be:	94 e4       	ldi	r25, 0x44	; 68
     6c0:	a8 01       	movw	r20, r16
     6c2:	97 01       	movw	r18, r14
     6c4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <pwm_on>

	// initialize values for a heater cycle
	heater.setpoint = setpoint;
     6c8:	a0 92 11 01 	sts	0x0111, r10
     6cc:	b0 92 12 01 	sts	0x0112, r11
     6d0:	c0 92 13 01 	sts	0x0113, r12
     6d4:	d0 92 14 01 	sts	0x0114, r13
	heater.hysteresis = 0;
     6d8:	10 92 0a 01 	sts	0x010A, r1
	heater.bad_reading_count = 0;
     6dc:	10 92 0c 01 	sts	0x010C, r1
	heater.regulation_timer = 0;		// reset timeouts
     6e0:	e0 92 19 01 	sts	0x0119, r14
     6e4:	f0 92 1a 01 	sts	0x011A, r15
     6e8:	00 93 1b 01 	sts	0x011B, r16
     6ec:	10 93 1c 01 	sts	0x011C, r17
	heater.state = HEATER_HEATING;
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	80 93 07 01 	sts	0x0107, r24
	LED_PORT &= ~(LED_PIN);
}

void led_off(void) 
{
	LED_PORT |= LED_PIN;
     6f6:	5a 9a       	sbi	0x0b, 2	; 11
	heater.hysteresis = 0;
	heater.bad_reading_count = 0;
	heater.regulation_timer = 0;		// reset timeouts
	heater.state = HEATER_HEATING;
	led_off();
}
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	cf 90       	pop	r12
     704:	bf 90       	pop	r11
     706:	af 90       	pop	r10
     708:	08 95       	ret

0000070a <tick_init>:
 * tick_1sec()	  - tasks that run every 100 ms
 */

void tick_init(void)
{
	TCCR0A = TICK_MODE;				// mode_settings
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	94 bd       	out	0x24, r25	; 36
	TCCR0B = TICK_PRESCALER;		// 1024 ~= 7800 Hz
     70e:	83 e0       	ldi	r24, 0x03	; 3
     710:	85 bd       	out	0x25, r24	; 37
	OCR0A = TICK_COUNT;
     712:	8d e7       	ldi	r24, 0x7D	; 125
     714:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1<<OCIE0A);			// enable compare interrupts
     716:	90 93 6e 00 	sts	0x006E, r25
	device.tick_10ms_count = 10;
     71a:	8a e0       	ldi	r24, 0x0A	; 10
     71c:	80 93 da 01 	sts	0x01DA, r24
	device.tick_100ms_count = 10;
     720:	80 93 db 01 	sts	0x01DB, r24
	device.tick_1sec_count = 10;	
     724:	80 93 dc 01 	sts	0x01DC, r24
}
     728:	08 95       	ret

0000072a <device_init>:
/*
 * Device Init 
 */
void device_init(void)
{
	DDRB = PORTB_DIR;			// initialize all ports for proper IO function
     72a:	80 e1       	ldi	r24, 0x10	; 16
     72c:	84 b9       	out	0x04, r24	; 4
	DDRC = PORTC_DIR;
     72e:	17 b8       	out	0x07, r1	; 7
	DDRD = PORTD_DIR;
     730:	8c e0       	ldi	r24, 0x0C	; 12
     732:	8a b9       	out	0x0a, r24	; 10

	adc_init(ADC_CHANNEL);
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	0e 94 01 02 	call	0x402	; 0x402 <adc_init>
	pwm_init();
     73a:	0e 94 30 02 	call	0x460	; 0x460 <pwm_init>
	tick_init();
     73e:	0e 94 85 03 	call	0x70a	; 0x70a <tick_init>
	LED_PORT &= ~(LED_PIN);
}

void led_off(void) 
{
	LED_PORT |= LED_PIN;
     742:	5a 9a       	sbi	0x0b, 2	; 11

	adc_init(ADC_CHANNEL);
	pwm_init();
	tick_init();
	led_off();					// put off the red light [~Sting, 1978]
}
     744:	08 95       	ret

00000746 <__vector_14>:
	device.tick_100ms_count = 10;
	device.tick_1sec_count = 10;	
}

ISR(TIMER0_COMPA_vect)
{
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	8f 93       	push	r24
	device.tick_flag = true;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	80 93 d9 01 	sts	0x01D9, r24
}
     758:	8f 91       	pop	r24
     75a:	0f 90       	pop	r0
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	0f 90       	pop	r0
     760:	1f 90       	pop	r1
     762:	18 95       	reti

00000764 <tick_10ms>:
	sensor_callback();
}

void tick_10ms(void)			// 10 ms callout
{
}
     764:	08 95       	ret

00000766 <tick_1sec>:
}

void tick_1sec(void)			// 1 second callout
{
//	led_toggle();
}
     766:	08 95       	ret

00000768 <led_on>:
 * led_toggle()
 */

void led_on(void) 
{
	LED_PORT &= ~(LED_PIN);
     768:	5a 98       	cbi	0x0b, 2	; 11
}
     76a:	08 95       	ret

0000076c <led_off>:

void led_off(void) 
{
	LED_PORT |= LED_PIN;
     76c:	5a 9a       	sbi	0x0b, 2	; 11
}
     76e:	08 95       	ret

00000770 <led_toggle>:

void led_toggle(void) 
{
	if (LED_PORT && LED_PIN) {
     770:	8b b1       	in	r24, 0x0b	; 11
     772:	88 23       	and	r24, r24
     774:	11 f0       	breq	.+4      	; 0x77a <led_toggle+0xa>
 * led_toggle()
 */

void led_on(void) 
{
	LED_PORT &= ~(LED_PIN);
     776:	5a 98       	cbi	0x0b, 2	; 11
     778:	08 95       	ret
}

void led_off(void) 
{
	LED_PORT |= LED_PIN;
     77a:	5a 9a       	sbi	0x0b, 2	; 11
     77c:	08 95       	ret

0000077e <device_reset>:
 */

void device_reset(void)
{
	return;
}
     77e:	08 95       	ret

00000780 <device_read_byte>:

uint8_t device_read_byte(uint8_t addr, uint8_t *data)
{
     780:	db 01       	movw	r26, r22
	addr -= KINEN_COMMON_MAX;
     782:	80 51       	subi	r24, 0x10	; 16
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
     784:	8a 30       	cpi	r24, 0x0A	; 10
     786:	10 f0       	brcs	.+4      	; 0x78c <device_read_byte+0xc>
     788:	88 e1       	ldi	r24, 0x18	; 24
     78a:	08 95       	ret
	*data = device.array[addr];
     78c:	e8 2f       	mov	r30, r24
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	e7 52       	subi	r30, 0x27	; 39
     792:	fe 4f       	sbci	r31, 0xFE	; 254
     794:	80 85       	ldd	r24, Z+8	; 0x08
     796:	8c 93       	st	X, r24
     798:	80 e0       	ldi	r24, 0x00	; 0
	return (SC_OK);
}
     79a:	08 95       	ret

0000079c <device_write_byte>:

uint8_t device_write_byte(uint8_t addr, uint8_t data)
{
	addr -= KINEN_COMMON_MAX;
     79c:	80 51       	subi	r24, 0x10	; 16
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
     79e:	8a 30       	cpi	r24, 0x0A	; 10
     7a0:	10 f0       	brcs	.+4      	; 0x7a6 <device_write_byte+0xa>
     7a2:	88 e1       	ldi	r24, 0x18	; 24
     7a4:	08 95       	ret
	// There are no checks in here for read-only locations
	// Assumes all locations are writable.
	device.array[addr] = data;
     7a6:	e8 2f       	mov	r30, r24
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	e7 52       	subi	r30, 0x27	; 39
     7ac:	fe 4f       	sbci	r31, 0xFE	; 254
     7ae:	60 87       	std	Z+8, r22	; 0x08
     7b0:	80 e0       	ldi	r24, 0x00	; 0
	return (SC_OK);
}
     7b2:	08 95       	ret

000007b4 <sensor_callback>:
 *	loop. Each sampling interval must be requested explicitly by calling 
 *	sensor_start_sample(). It does not free-run.
 */

void sensor_callback()
{
     7b4:	2f 92       	push	r2
     7b6:	3f 92       	push	r3
     7b8:	4f 92       	push	r4
     7ba:	5f 92       	push	r5
     7bc:	7f 92       	push	r7
     7be:	8f 92       	push	r8
     7c0:	9f 92       	push	r9
     7c2:	af 92       	push	r10
     7c4:	bf 92       	push	r11
     7c6:	cf 92       	push	r12
     7c8:	df 92       	push	r13
     7ca:	ef 92       	push	r14
     7cc:	ff 92       	push	r15
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	df 93       	push	r29
     7d4:	cf 93       	push	r28
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	28 97       	sbiw	r28, 0x08	; 8
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
	// cases where you don't execute the callback:
	if ((sensor.state == SENSOR_OFF) || (sensor.code != SENSOR_TAKING_READING)) {
     7e6:	80 91 69 01 	lds	r24, 0x0169
     7ea:	88 23       	and	r24, r24
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <sensor_callback+0x3c>
     7ee:	ec c0       	rjmp	.+472    	; 0x9c8 <__stack+0xc9>
     7f0:	80 91 6a 01 	lds	r24, 0x016A
     7f4:	81 30       	cpi	r24, 0x01	; 1
     7f6:	09 f0       	breq	.+2      	; 0x7fa <sensor_callback+0x46>
     7f8:	e7 c0       	rjmp	.+462    	; 0x9c8 <__stack+0xc9>
		return;
	}

	// get a sample and return if still in the reading period
	sensor.sample[sensor.sample_idx] = _sensor_sample(ADC_CHANNEL);
     7fa:	80 91 6b 01 	lds	r24, 0x016B
     7fe:	08 2f       	mov	r16, r24
     800:	10 e0       	ldi	r17, 0x00	; 0
	double random_gain = 5;
	double random_variation = ((double)(rand() - RAND_MAX/2) / RAND_MAX/2) * random_gain;
	double reading = 60 + random_variation;
	return (((double)reading * SENSOR_SLOPE) + SENSOR_OFFSET);	// useful for testing the math
#else
	return (((double)adc_read() * SENSOR_SLOPE) + SENSOR_OFFSET);
     802:	0e 94 18 02 	call	0x430	; 0x430 <adc_read>
	if ((sensor.state == SENSOR_OFF) || (sensor.code != SENSOR_TAKING_READING)) {
		return;
	}

	// get a sample and return if still in the reading period
	sensor.sample[sensor.sample_idx] = _sensor_sample(ADC_CHANNEL);
     806:	00 0f       	add	r16, r16
     808:	11 1f       	adc	r17, r17
     80a:	00 0f       	add	r16, r16
     80c:	11 1f       	adc	r17, r17
     80e:	0b 57       	subi	r16, 0x7B	; 123
     810:	1e 4f       	sbci	r17, 0xFE	; 254
     812:	a0 e0       	ldi	r26, 0x00	; 0
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	bc 01       	movw	r22, r24
     818:	cd 01       	movw	r24, r26
     81a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__floatunsisf>
     81e:	26 e0       	ldi	r18, 0x06	; 6
     820:	3f ea       	ldi	r19, 0xAF	; 175
     822:	4a ef       	ldi	r20, 0xFA	; 250
     824:	5e e3       	ldi	r21, 0x3E	; 62
     826:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__mulsf3>
     82a:	23 ed       	ldi	r18, 0xD3	; 211
     82c:	31 eb       	ldi	r19, 0xB1	; 177
     82e:	46 ed       	ldi	r20, 0xD6	; 214
     830:	5e e3       	ldi	r21, 0x3E	; 62
     832:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__subsf3>
     836:	d8 01       	movw	r26, r16
     838:	6d 93       	st	X+, r22
     83a:	7d 93       	st	X+, r23
     83c:	8d 93       	st	X+, r24
     83e:	9c 93       	st	X, r25
     840:	13 97       	sbiw	r26, 0x03	; 3
	if ((++sensor.sample_idx) < SENSOR_SAMPLES) { return; }
     842:	80 91 6b 01 	lds	r24, 0x016B
     846:	8f 5f       	subi	r24, 0xFF	; 255
     848:	80 93 6b 01 	sts	0x016B, r24
     84c:	84 31       	cpi	r24, 0x14	; 20
     84e:	08 f4       	brcc	.+2      	; 0x852 <sensor_callback+0x9e>
     850:	bb c0       	rjmp	.+374    	; 0x9c8 <__stack+0xc9>

	// process the array to clean up samples
	double mean;
	sensor.std_dev = std_dev(sensor.sample, SENSOR_SAMPLES, &mean);
     852:	85 e8       	ldi	r24, 0x85	; 133
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	64 e1       	ldi	r22, 0x14	; 20
     858:	ae 01       	movw	r20, r28
     85a:	4f 5f       	subi	r20, 0xFF	; 255
     85c:	5f 4f       	sbci	r21, 0xFF	; 255
     85e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <std_dev>
     862:	7b 01       	movw	r14, r22
     864:	8c 01       	movw	r16, r24
     866:	60 93 71 01 	sts	0x0171, r22
     86a:	70 93 72 01 	sts	0x0172, r23
     86e:	80 93 73 01 	sts	0x0173, r24
     872:	90 93 74 01 	sts	0x0174, r25
	if (sensor.std_dev > sensor.reading_variance_max) {
     876:	20 91 79 01 	lds	r18, 0x0179
     87a:	30 91 7a 01 	lds	r19, 0x017A
     87e:	40 91 7b 01 	lds	r20, 0x017B
     882:	50 91 7c 01 	lds	r21, 0x017C
     886:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__gesf2>
     88a:	18 16       	cp	r1, r24
     88c:	24 f4       	brge	.+8      	; 0x896 <sensor_callback+0xe2>
		sensor.state = SENSOR_ERROR;
     88e:	82 e0       	ldi	r24, 0x02	; 2
     890:	80 93 69 01 	sts	0x0169, r24
     894:	97 c0       	rjmp	.+302    	; 0x9c4 <__stack+0xc5>
		sensor.code = SENSOR_ERROR_BAD_READINGS;
		return;
	}

	// reject the outlier samples and re-compute the average
	sensor.samples = 0;
     896:	10 92 6c 01 	sts	0x016C, r1
	sensor.temperature = 0;
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	a0 e0       	ldi	r26, 0x00	; 0
     8a0:	b0 e0       	ldi	r27, 0x00	; 0
     8a2:	80 93 6d 01 	sts	0x016D, r24
     8a6:	90 93 6e 01 	sts	0x016E, r25
     8aa:	a0 93 6f 01 	sts	0x016F, r26
     8ae:	b0 93 70 01 	sts	0x0170, r27
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	9a 81       	ldd	r25, Y+2	; 0x02
     8b6:	ab 81       	ldd	r26, Y+3	; 0x03
     8b8:	bc 81       	ldd	r27, Y+4	; 0x04
     8ba:	8d 83       	std	Y+5, r24	; 0x05
     8bc:	9e 83       	std	Y+6, r25	; 0x06
     8be:	af 83       	std	Y+7, r26	; 0x07
     8c0:	b8 87       	std	Y+8, r27	; 0x08
     8c2:	c8 01       	movw	r24, r16
     8c4:	b7 01       	movw	r22, r14
     8c6:	20 91 75 01 	lds	r18, 0x0175
     8ca:	30 91 76 01 	lds	r19, 0x0176
     8ce:	40 91 77 01 	lds	r20, 0x0177
     8d2:	50 91 78 01 	lds	r21, 0x0178
     8d6:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__mulsf3>
     8da:	1b 01       	movw	r2, r22
     8dc:	2c 01       	movw	r4, r24
     8de:	95 e8       	ldi	r25, 0x85	; 133
     8e0:	89 2e       	mov	r8, r25
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	99 2e       	mov	r9, r25
     8e6:	77 24       	eor	r7, r7
     8e8:	0f 2e       	mov	r0, r31
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	ef 2e       	mov	r14, r31
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	ff 2e       	mov	r15, r31
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	0f 2f       	mov	r16, r31
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	1f 2f       	mov	r17, r31
     8fa:	f0 2d       	mov	r31, r0
     8fc:	d4 01       	movw	r26, r8
     8fe:	ad 90       	ld	r10, X+
     900:	bd 90       	ld	r11, X+
     902:	cd 90       	ld	r12, X+
     904:	dc 90       	ld	r13, X
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	2d 81       	ldd	r18, Y+5	; 0x05
     90c:	3e 81       	ldd	r19, Y+6	; 0x06
     90e:	4f 81       	ldd	r20, Y+7	; 0x07
     910:	58 85       	ldd	r21, Y+8	; 0x08
     912:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__subsf3>
     916:	9f 77       	andi	r25, 0x7F	; 127
     918:	a2 01       	movw	r20, r4
     91a:	91 01       	movw	r18, r2
     91c:	0e 94 0d 0b 	call	0x161a	; 0x161a <__cmpsf2>
     920:	88 23       	and	r24, r24
     922:	4c f4       	brge	.+18     	; 0x936 <__stack+0x37>
			sensor.temperature += sensor.sample[i];
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	a6 01       	movw	r20, r12
     92a:	95 01       	movw	r18, r10
     92c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__addsf3>
     930:	7b 01       	movw	r14, r22
     932:	8c 01       	movw	r16, r24
			sensor.samples++;
     934:	73 94       	inc	r7
     936:	e4 e0       	ldi	r30, 0x04	; 4
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	8e 0e       	add	r8, r30
     93c:	9f 1e       	adc	r9, r31
	}

	// reject the outlier samples and re-compute the average
	sensor.samples = 0;
	sensor.temperature = 0;
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     93e:	f5 ed       	ldi	r31, 0xD5	; 213
     940:	8f 16       	cp	r8, r31
     942:	f1 e0       	ldi	r31, 0x01	; 1
     944:	9f 06       	cpc	r9, r31
     946:	d1 f6       	brne	.-76     	; 0x8fc <sensor_callback+0x148>
     948:	70 92 6c 01 	sts	0x016C, r7
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
			sensor.temperature += sensor.sample[i];
			sensor.samples++;
		}
	}
	sensor.temperature /= sensor.samples;// calculate mean temp w/o the outliers
     94c:	67 2d       	mov	r22, r7
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	88 27       	eor	r24, r24
     952:	77 fd       	sbrc	r23, 7
     954:	80 95       	com	r24
     956:	98 2f       	mov	r25, r24
     958:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__floatsisf>
     95c:	9b 01       	movw	r18, r22
     95e:	ac 01       	movw	r20, r24
     960:	c8 01       	movw	r24, r16
     962:	b7 01       	movw	r22, r14
     964:	0e 94 11 0b 	call	0x1622	; 0x1622 <__divsf3>
     968:	7b 01       	movw	r14, r22
     96a:	8c 01       	movw	r16, r24
     96c:	60 93 6d 01 	sts	0x016D, r22
     970:	70 93 6e 01 	sts	0x016E, r23
     974:	80 93 6f 01 	sts	0x016F, r24
     978:	90 93 70 01 	sts	0x0170, r25
	sensor.state = SENSOR_HAS_DATA;
     97c:	83 e0       	ldi	r24, 0x03	; 3
     97e:	d8 2e       	mov	r13, r24
     980:	d0 92 69 01 	sts	0x0169, r13
	sensor.code = SENSOR_IDLE;			// we are done. Flip it back to idle
     984:	10 92 6a 01 	sts	0x016A, r1

	// process the exception cases
	if (sensor.temperature > SENSOR_DISCONNECTED_TEMPERATURE) {
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	48 ec       	ldi	r20, 0xC8	; 200
     992:	53 e4       	ldi	r21, 0x43	; 67
     994:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__gesf2>
     998:	18 16       	cp	r1, r24
     99a:	34 f4       	brge	.+12     	; 0x9a8 <__stack+0xa9>
		sensor.state = SENSOR_ERROR;
     99c:	82 e0       	ldi	r24, 0x02	; 2
     99e:	80 93 69 01 	sts	0x0169, r24
		sensor.code = SENSOR_ERROR_DISCONNECTED;
     9a2:	d0 92 6a 01 	sts	0x016A, r13
     9a6:	10 c0       	rjmp	.+32     	; 0x9c8 <__stack+0xc9>
	} else if (sensor.temperature < SENSOR_NO_POWER_TEMPERATURE) {
     9a8:	c8 01       	movw	r24, r16
     9aa:	b7 01       	movw	r22, r14
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	50 ec       	ldi	r21, 0xC0	; 192
     9b4:	0e 94 0d 0b 	call	0x161a	; 0x161a <__cmpsf2>
     9b8:	88 23       	and	r24, r24
     9ba:	34 f4       	brge	.+12     	; 0x9c8 <__stack+0xc9>
		sensor.state = SENSOR_ERROR;
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	80 93 69 01 	sts	0x0169, r24
		sensor.code = SENSOR_ERROR_NO_POWER;
     9c2:	84 e0       	ldi	r24, 0x04	; 4
     9c4:	80 93 6a 01 	sts	0x016A, r24
	}
}
     9c8:	28 96       	adiw	r28, 0x08	; 8
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	cf 91       	pop	r28
     9d6:	df 91       	pop	r29
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	ff 90       	pop	r15
     9de:	ef 90       	pop	r14
     9e0:	df 90       	pop	r13
     9e2:	cf 90       	pop	r12
     9e4:	bf 90       	pop	r11
     9e6:	af 90       	pop	r10
     9e8:	9f 90       	pop	r9
     9ea:	8f 90       	pop	r8
     9ec:	7f 90       	pop	r7
     9ee:	5f 90       	pop	r5
     9f0:	4f 90       	pop	r4
     9f2:	3f 90       	pop	r3
     9f4:	2f 90       	pop	r2
     9f6:	08 95       	ret

000009f8 <tick_1ms>:
	return (SC_OK);
}

void tick_1ms(void)				// 1ms callout
{
	sensor_callback();
     9f8:	0e 94 da 03 	call	0x7b4	; 0x7b4 <sensor_callback>
}
     9fc:	08 95       	ret

000009fe <sensor_init>:
 * sensor_callback() 		- perform sensor sampling / reading
 */

void sensor_init()
{
	memset(&sensor, 0, sizeof(Sensor));
     9fe:	80 e7       	ldi	r24, 0x70	; 112
     a00:	e9 e6       	ldi	r30, 0x69	; 105
     a02:	f1 e0       	ldi	r31, 0x01	; 1
     a04:	df 01       	movw	r26, r30
     a06:	1d 92       	st	X+, r1
     a08:	8a 95       	dec	r24
     a0a:	e9 f7       	brne	.-6      	; 0xa06 <sensor_init+0x8>
	sensor.temperature = ABSOLUTE_ZERO;
     a0c:	83 e3       	ldi	r24, 0x33	; 51
     a0e:	93 e9       	ldi	r25, 0x93	; 147
     a10:	a8 e8       	ldi	r26, 0x88	; 136
     a12:	b3 ec       	ldi	r27, 0xC3	; 195
     a14:	80 93 6d 01 	sts	0x016D, r24
     a18:	90 93 6e 01 	sts	0x016E, r25
     a1c:	a0 93 6f 01 	sts	0x016F, r26
     a20:	b0 93 70 01 	sts	0x0170, r27
	sensor.sample_variance_max = SENSOR_SAMPLE_VARIANCE_MAX;
     a24:	8d ec       	ldi	r24, 0xCD	; 205
     a26:	9c ec       	ldi	r25, 0xCC	; 204
     a28:	ac e8       	ldi	r26, 0x8C	; 140
     a2a:	bf e3       	ldi	r27, 0x3F	; 63
     a2c:	80 93 75 01 	sts	0x0175, r24
     a30:	90 93 76 01 	sts	0x0176, r25
     a34:	a0 93 77 01 	sts	0x0177, r26
     a38:	b0 93 78 01 	sts	0x0178, r27
	sensor.reading_variance_max = SENSOR_READING_VARIANCE_MAX;
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	a0 ea       	ldi	r26, 0xA0	; 160
     a42:	b1 e4       	ldi	r27, 0x41	; 65
     a44:	80 93 79 01 	sts	0x0179, r24
     a48:	90 93 7a 01 	sts	0x017A, r25
     a4c:	a0 93 7b 01 	sts	0x017B, r26
     a50:	b0 93 7c 01 	sts	0x017C, r27
	sensor.disconnect_temperature = SENSOR_DISCONNECTED_TEMPERATURE;
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	a8 ec       	ldi	r26, 0xC8	; 200
     a5a:	b3 e4       	ldi	r27, 0x43	; 67
     a5c:	80 93 7d 01 	sts	0x017D, r24
     a60:	90 93 7e 01 	sts	0x017E, r25
     a64:	a0 93 7f 01 	sts	0x017F, r26
     a68:	b0 93 80 01 	sts	0x0180, r27
	sensor.no_power_temperature = SENSOR_NO_POWER_TEMPERATURE;
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 ec       	ldi	r27, 0xC0	; 192
     a74:	80 93 81 01 	sts	0x0181, r24
     a78:	90 93 82 01 	sts	0x0182, r25
     a7c:	a0 93 83 01 	sts	0x0183, r26
     a80:	b0 93 84 01 	sts	0x0184, r27
}
     a84:	08 95       	ret

00000a86 <pid_init>:
 * pid_calc() - derived from: http://www.embeddedheaven.com/pid-control-algorithm-c-language.htm
 */

void pid_init() 
{
	memset(&pid, 0, sizeof(struct PIDstruct));
     a86:	8a e2       	ldi	r24, 0x2A	; 42
     a88:	ed e2       	ldi	r30, 0x2D	; 45
     a8a:	f1 e0       	ldi	r31, 0x01	; 1
     a8c:	df 01       	movw	r26, r30
     a8e:	1d 92       	st	X+, r1
     a90:	8a 95       	dec	r24
     a92:	e9 f7       	brne	.-6      	; 0xa8e <pid_init+0x8>
	pid.Kp = PID_Kp;
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	a0 ea       	ldi	r26, 0xA0	; 160
     a9a:	b0 e4       	ldi	r27, 0x40	; 64
     a9c:	80 93 4b 01 	sts	0x014B, r24
     aa0:	90 93 4c 01 	sts	0x014C, r25
     aa4:	a0 93 4d 01 	sts	0x014D, r26
     aa8:	b0 93 4e 01 	sts	0x014E, r27
	pid.Ki = PID_Ki;
     aac:	8d ec       	ldi	r24, 0xCD	; 205
     aae:	9c ec       	ldi	r25, 0xCC	; 204
     ab0:	ac ec       	ldi	r26, 0xCC	; 204
     ab2:	bd e3       	ldi	r27, 0x3D	; 61
     ab4:	80 93 4f 01 	sts	0x014F, r24
     ab8:	90 93 50 01 	sts	0x0150, r25
     abc:	a0 93 51 01 	sts	0x0151, r26
     ac0:	b0 93 52 01 	sts	0x0152, r27
	pid.Kd = PID_Kd;
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	bf e3       	ldi	r27, 0x3F	; 63
     acc:	80 93 53 01 	sts	0x0153, r24
     ad0:	90 93 54 01 	sts	0x0154, r25
     ad4:	a0 93 55 01 	sts	0x0155, r26
     ad8:	b0 93 56 01 	sts	0x0156, r27
	pid.output_max = PID_MAX_OUTPUT;		// saturation filter max value
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	a8 ec       	ldi	r26, 0xC8	; 200
     ae2:	b2 e4       	ldi	r27, 0x42	; 66
     ae4:	80 93 33 01 	sts	0x0133, r24
     ae8:	90 93 34 01 	sts	0x0134, r25
     aec:	a0 93 35 01 	sts	0x0135, r26
     af0:	b0 93 36 01 	sts	0x0136, r27
	pid.output_min = PID_MIN_OUTPUT;		// saturation filter min value
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	a0 e0       	ldi	r26, 0x00	; 0
     afa:	b0 e0       	ldi	r27, 0x00	; 0
     afc:	80 93 37 01 	sts	0x0137, r24
     b00:	90 93 38 01 	sts	0x0138, r25
     b04:	a0 93 39 01 	sts	0x0139, r26
     b08:	b0 93 3a 01 	sts	0x013A, r27
	pid.state = PID_ON;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	80 93 2d 01 	sts	0x012D, r24
}
     b12:	08 95       	ret

00000b14 <heater_init>:

void heater_init()
{ 
	// initialize heater, start PID and PWM
	// note: PWM and ADC are initialized as part of the device init
	memset(&heater, 0, sizeof(Heater));
     b14:	86 e2       	ldi	r24, 0x26	; 38
     b16:	e7 e0       	ldi	r30, 0x07	; 7
     b18:	f1 e0       	ldi	r31, 0x01	; 1
     b1a:	df 01       	movw	r26, r30
     b1c:	1d 92       	st	X+, r1
     b1e:	8a 95       	dec	r24
     b20:	e9 f7       	brne	.-6      	; 0xb1c <heater_init+0x8>
	heater.regulation_range = HEATER_REGULATION_RANGE;
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	b0 e4       	ldi	r27, 0x40	; 64
     b2a:	80 93 15 01 	sts	0x0115, r24
     b2e:	90 93 16 01 	sts	0x0116, r25
     b32:	a0 93 17 01 	sts	0x0117, r26
     b36:	b0 93 18 01 	sts	0x0118, r27
	heater.ambient_timeout = HEATER_AMBIENT_TIMEOUT;
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a4 eb       	ldi	r26, 0xB4	; 180
     b40:	b2 e4       	ldi	r27, 0x42	; 66
     b42:	80 93 1d 01 	sts	0x011D, r24
     b46:	90 93 1e 01 	sts	0x011E, r25
     b4a:	a0 93 1f 01 	sts	0x011F, r26
     b4e:	b0 93 20 01 	sts	0x0120, r27
	heater.regulation_timeout = HEATER_REGULATION_TIMEOUT;
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	46 e9       	ldi	r20, 0x96	; 150
     b58:	53 e4       	ldi	r21, 0x43	; 67
     b5a:	20 93 21 01 	sts	0x0121, r18
     b5e:	30 93 22 01 	sts	0x0122, r19
     b62:	40 93 23 01 	sts	0x0123, r20
     b66:	50 93 24 01 	sts	0x0124, r21
	heater.ambient_temperature = HEATER_AMBIENT_TEMPERATURE;
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a0 e2       	ldi	r26, 0x20	; 32
     b70:	b2 e4       	ldi	r27, 0x42	; 66
     b72:	80 93 25 01 	sts	0x0125, r24
     b76:	90 93 26 01 	sts	0x0126, r25
     b7a:	a0 93 27 01 	sts	0x0127, r26
     b7e:	b0 93 28 01 	sts	0x0128, r27
	heater.overheat_temperature = HEATER_OVERHEAT_TEMPERATURE;
     b82:	20 93 29 01 	sts	0x0129, r18
     b86:	30 93 2a 01 	sts	0x012A, r19
     b8a:	40 93 2b 01 	sts	0x012B, r20
     b8e:	50 93 2c 01 	sts	0x012C, r21
	heater.bad_reading_max = HEATER_BAD_READING_MAX;
     b92:	85 e0       	ldi	r24, 0x05	; 5
     b94:	80 93 0b 01 	sts	0x010B, r24
	sensor_init();
     b98:	0e 94 ff 04 	call	0x9fe	; 0x9fe <sensor_init>
	pid_init();
     b9c:	0e 94 43 05 	call	0xa86	; 0xa86 <pid_init>
}
     ba0:	08 95       	ret

00000ba2 <heater_callback>:
	heater.code = code;
	led_off();
}

void heater_callback()
{
     ba2:	af 92       	push	r10
     ba4:	bf 92       	push	r11
     ba6:	cf 92       	push	r12
     ba8:	df 92       	push	r13
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
	// catch the no-op cases
	if ((heater.state == HEATER_OFF) || (heater.state == HEATER_SHUTDOWN)) { return;}
     bb2:	80 91 07 01 	lds	r24, 0x0107
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	08 f4       	brcc	.+2      	; 0xbbc <heater_callback+0x1a>
     bba:	1b c1       	rjmp	.+566    	; 0xdf2 <heater_callback+0x250>
	rpt_readout();
     bbc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <rpt_readout>
uint8_t sensor_get_state() { return (sensor.state);}
uint8_t sensor_get_code() { return (sensor.code);}

double sensor_get_temperature() 
{ 
	if (sensor.state == SENSOR_HAS_DATA) { 
     bc0:	80 91 69 01 	lds	r24, 0x0169
     bc4:	83 30       	cpi	r24, 0x03	; 3
     bc6:	59 f0       	breq	.+22     	; 0xbde <heater_callback+0x3c>
     bc8:	0f 2e       	mov	r0, r31
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	ef 2e       	mov	r14, r31
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	ff 2e       	mov	r15, r31
     bd2:	f9 e8       	ldi	r31, 0x89	; 137
     bd4:	0f 2f       	mov	r16, r31
     bd6:	f3 ec       	ldi	r31, 0xC3	; 195
     bd8:	1f 2f       	mov	r17, r31
     bda:	f0 2d       	mov	r31, r0
     bdc:	08 c0       	rjmp	.+16     	; 0xbee <heater_callback+0x4c>
		return (sensor.temperature);
     bde:	e0 90 6d 01 	lds	r14, 0x016D
     be2:	f0 90 6e 01 	lds	r15, 0x016E
     be6:	00 91 6f 01 	lds	r16, 0x016F
     bea:	10 91 70 01 	lds	r17, 0x0170
	// catch the no-op cases
	if ((heater.state == HEATER_OFF) || (heater.state == HEATER_SHUTDOWN)) { return;}
	rpt_readout();

	// get current temperature from the sensor
	heater.temperature = sensor_get_temperature();
     bee:	e0 92 0d 01 	sts	0x010D, r14
     bf2:	f0 92 0e 01 	sts	0x010E, r15
     bf6:	00 93 0f 01 	sts	0x010F, r16
     bfa:	10 93 10 01 	sts	0x0110, r17

	// trap overheat condition
	if (heater.temperature > heater.overheat_temperature) {
     bfe:	c8 01       	movw	r24, r16
     c00:	b7 01       	movw	r22, r14
     c02:	20 91 29 01 	lds	r18, 0x0129
     c06:	30 91 2a 01 	lds	r19, 0x012A
     c0a:	40 91 2b 01 	lds	r20, 0x012B
     c0e:	50 91 2c 01 	lds	r21, 0x012C
     c12:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__gesf2>
     c16:	18 16       	cp	r1, r24
     c18:	2c f4       	brge	.+10     	; 0xc24 <heater_callback+0x82>
		heater_off(HEATER_SHUTDOWN, HEATER_OVERHEATED);
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	63 e0       	ldi	r22, 0x03	; 3
     c1e:	0e 94 0f 03 	call	0x61e	; 0x61e <heater_off>
     c22:	e7 c0       	rjmp	.+462    	; 0xdf2 <heater_callback+0x250>
	sensor.state = SENSOR_OFF;
}

void sensor_start_reading() 
{ 
	sensor.sample_idx = 0;
     c24:	10 92 6b 01 	sts	0x016B, r1
	sensor.code = SENSOR_TAKING_READING;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	80 93 6a 01 	sts	0x016A, r24
	}

	sensor_start_reading();				// start reading for the next interval

	// handle bad readings from the sensor
	if (heater.temperature < ABSOLUTE_ZERO) {
     c2e:	c8 01       	movw	r24, r16
     c30:	b7 01       	movw	r22, r14
     c32:	23 e3       	ldi	r18, 0x33	; 51
     c34:	33 e9       	ldi	r19, 0x93	; 147
     c36:	48 e8       	ldi	r20, 0x88	; 136
     c38:	53 ec       	ldi	r21, 0xC3	; 195
     c3a:	0e 94 0d 0b 	call	0x161a	; 0x161a <__cmpsf2>
     c3e:	88 23       	and	r24, r24
     c40:	8c f4       	brge	.+34     	; 0xc64 <heater_callback+0xc2>
		if (++heater.bad_reading_count > heater.bad_reading_max) {
     c42:	80 91 0c 01 	lds	r24, 0x010C
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	80 93 0c 01 	sts	0x010C, r24
     c4c:	90 91 0b 01 	lds	r25, 0x010B
     c50:	98 17       	cp	r25, r24
     c52:	08 f0       	brcs	.+2      	; 0xc56 <heater_callback+0xb4>
     c54:	ce c0       	rjmp	.+412    	; 0xdf2 <heater_callback+0x250>
			heater_off(HEATER_SHUTDOWN, HEATER_SENSOR_ERROR);
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	64 e0       	ldi	r22, 0x04	; 4
     c5a:	0e 94 0f 03 	call	0x61e	; 0x61e <heater_off>
			printPgmString(PSTR("Heater Sensor Error Shutdown\n"));	
     c5e:	86 ea       	ldi	r24, 0xA6	; 166
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	57 c0       	rjmp	.+174    	; 0xd12 <heater_callback+0x170>
		}
		return;
	}
	heater.bad_reading_count = 0;		// reset the bad reading counter
     c64:	10 92 0c 01 	sts	0x010C, r1

	double duty_cycle = pid_calculate(heater.setpoint, heater.temperature);
     c68:	60 91 11 01 	lds	r22, 0x0111
     c6c:	70 91 12 01 	lds	r23, 0x0112
     c70:	80 91 13 01 	lds	r24, 0x0113
     c74:	90 91 14 01 	lds	r25, 0x0114
     c78:	a8 01       	movw	r20, r16
     c7a:	97 01       	movw	r18, r14
     c7c:	0e 94 cb 00 	call	0x196	; 0x196 <pid_calculate>
	pwm_set_duty(duty_cycle);
     c80:	0e 94 8b 02 	call	0x516	; 0x516 <pwm_set_duty>

	// handle HEATER exceptions
	if (heater.state == HEATER_HEATING) {
     c84:	80 91 07 01 	lds	r24, 0x0107
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	09 f0       	breq	.+2      	; 0xc8e <heater_callback+0xec>
     c8c:	68 c0       	rjmp	.+208    	; 0xd5e <heater_callback+0x1bc>
		heater.regulation_timer += HEATER_TICK_SECONDS;
     c8e:	60 91 19 01 	lds	r22, 0x0119
     c92:	70 91 1a 01 	lds	r23, 0x011A
     c96:	80 91 1b 01 	lds	r24, 0x011B
     c9a:	90 91 1c 01 	lds	r25, 0x011C
     c9e:	2d ec       	ldi	r18, 0xCD	; 205
     ca0:	3c ec       	ldi	r19, 0xCC	; 204
     ca2:	4c ec       	ldi	r20, 0xCC	; 204
     ca4:	5d e3       	ldi	r21, 0x3D	; 61
     ca6:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__addsf3>
     caa:	7b 01       	movw	r14, r22
     cac:	8c 01       	movw	r16, r24
     cae:	60 93 19 01 	sts	0x0119, r22
     cb2:	70 93 1a 01 	sts	0x011A, r23
     cb6:	80 93 1b 01 	sts	0x011B, r24
     cba:	90 93 1c 01 	sts	0x011C, r25

		if ((heater.temperature < heater.ambient_temperature) &&
     cbe:	a0 90 0d 01 	lds	r10, 0x010D
     cc2:	b0 90 0e 01 	lds	r11, 0x010E
     cc6:	c0 90 0f 01 	lds	r12, 0x010F
     cca:	d0 90 10 01 	lds	r13, 0x0110
     cce:	c6 01       	movw	r24, r12
     cd0:	b5 01       	movw	r22, r10
     cd2:	20 91 25 01 	lds	r18, 0x0125
     cd6:	30 91 26 01 	lds	r19, 0x0126
     cda:	40 91 27 01 	lds	r20, 0x0127
     cde:	50 91 28 01 	lds	r21, 0x0128
     ce2:	0e 94 0d 0b 	call	0x161a	; 0x161a <__cmpsf2>
     ce6:	88 23       	and	r24, r24
     ce8:	bc f4       	brge	.+46     	; 0xd18 <heater_callback+0x176>
     cea:	c8 01       	movw	r24, r16
     cec:	b7 01       	movw	r22, r14
     cee:	20 91 1d 01 	lds	r18, 0x011D
     cf2:	30 91 1e 01 	lds	r19, 0x011E
     cf6:	40 91 1f 01 	lds	r20, 0x011F
     cfa:	50 91 20 01 	lds	r21, 0x0120
     cfe:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__gesf2>
     d02:	18 16       	cp	r1, r24
     d04:	4c f4       	brge	.+18     	; 0xd18 <heater_callback+0x176>
			(heater.regulation_timer > heater.ambient_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_AMBIENT_TIMED_OUT);
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	0e 94 0f 03 	call	0x61e	; 0x61e <heater_off>
			printPgmString(PSTR("Heater Ambient Error Shutdown\n"));	
     d0e:	87 e8       	ldi	r24, 0x87	; 135
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 31 0a 	call	0x1462	; 0x1462 <printPgmString>
     d16:	6d c0       	rjmp	.+218    	; 0xdf2 <heater_callback+0x250>
			return;
		}
		if ((heater.temperature < heater.setpoint) &&
     d18:	c6 01       	movw	r24, r12
     d1a:	b5 01       	movw	r22, r10
     d1c:	20 91 11 01 	lds	r18, 0x0111
     d20:	30 91 12 01 	lds	r19, 0x0112
     d24:	40 91 13 01 	lds	r20, 0x0113
     d28:	50 91 14 01 	lds	r21, 0x0114
     d2c:	0e 94 0d 0b 	call	0x161a	; 0x161a <__cmpsf2>
     d30:	88 23       	and	r24, r24
     d32:	ac f4       	brge	.+42     	; 0xd5e <heater_callback+0x1bc>
     d34:	c8 01       	movw	r24, r16
     d36:	b7 01       	movw	r22, r14
     d38:	20 91 21 01 	lds	r18, 0x0121
     d3c:	30 91 22 01 	lds	r19, 0x0122
     d40:	40 91 23 01 	lds	r20, 0x0123
     d44:	50 91 24 01 	lds	r21, 0x0124
     d48:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__gesf2>
     d4c:	18 16       	cp	r1, r24
     d4e:	3c f4       	brge	.+14     	; 0xd5e <heater_callback+0x1bc>
			(heater.regulation_timer > heater.regulation_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_REGULATION_TIMED_OUT);
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	62 e0       	ldi	r22, 0x02	; 2
     d54:	0e 94 0f 03 	call	0x61e	; 0x61e <heater_off>
			printPgmString(PSTR("Heater Timeout Error Shutdown\n"));	
     d58:	88 e6       	ldi	r24, 0x68	; 104
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	da cf       	rjmp	.-76     	; 0xd12 <heater_callback+0x170>
	// Manage regulation state and LED indicator
	// Heater.regulation_count is a hysteresis register that increments if the 
	// heater is at temp, decrements if not. It pegs at max and min values.
	// The LED flashes if the heater is not in regulation and goes solid if it is.

	if (fabs(pid.error) <= heater.regulation_range) {
     d5e:	60 91 3b 01 	lds	r22, 0x013B
     d62:	70 91 3c 01 	lds	r23, 0x013C
     d66:	80 91 3d 01 	lds	r24, 0x013D
     d6a:	90 91 3e 01 	lds	r25, 0x013E
     d6e:	9f 77       	andi	r25, 0x7F	; 127
     d70:	20 91 15 01 	lds	r18, 0x0115
     d74:	30 91 16 01 	lds	r19, 0x0116
     d78:	40 91 17 01 	lds	r20, 0x0117
     d7c:	50 91 18 01 	lds	r21, 0x0118
     d80:	0e 94 0d 0b 	call	0x161a	; 0x161a <__cmpsf2>
     d84:	18 16       	cp	r1, r24
     d86:	64 f0       	brlt	.+24     	; 0xda0 <heater_callback+0x1fe>
		if (++heater.hysteresis > HEATER_HYSTERESIS) {
     d88:	80 91 0a 01 	lds	r24, 0x010A
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	80 93 0a 01 	sts	0x010A, r24
     d92:	8b 30       	cpi	r24, 0x0B	; 11
     d94:	ec f0       	brlt	.+58     	; 0xdd0 <heater_callback+0x22e>
			heater.hysteresis = HEATER_HYSTERESIS;
     d96:	8a e0       	ldi	r24, 0x0A	; 10
     d98:	80 93 0a 01 	sts	0x010A, r24
			heater.state = HEATER_REGULATED;
     d9c:	83 e0       	ldi	r24, 0x03	; 3
     d9e:	16 c0       	rjmp	.+44     	; 0xdcc <heater_callback+0x22a>
		}
	} else {
		if (--heater.hysteresis <= 0) {
     da0:	80 91 0a 01 	lds	r24, 0x010A
     da4:	81 50       	subi	r24, 0x01	; 1
     da6:	80 93 0a 01 	sts	0x010A, r24
     daa:	18 16       	cp	r1, r24
     dac:	8c f0       	brlt	.+34     	; 0xdd0 <heater_callback+0x22e>
			heater.hysteresis = 0;
     dae:	10 92 0a 01 	sts	0x010A, r1
			heater.regulation_timer = 0;			// reset timeouts
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	a0 e0       	ldi	r26, 0x00	; 0
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	80 93 19 01 	sts	0x0119, r24
     dbe:	90 93 1a 01 	sts	0x011A, r25
     dc2:	a0 93 1b 01 	sts	0x011B, r26
     dc6:	b0 93 1c 01 	sts	0x011C, r27
			heater.state = HEATER_HEATING;
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	80 93 07 01 	sts	0x0107, r24
		}
	}
	if (heater.state == HEATER_REGULATED) {
     dd0:	80 91 07 01 	lds	r24, 0x0107
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	11 f4       	brne	.+4      	; 0xddc <heater_callback+0x23a>
 * led_toggle()
 */

void led_on(void) 
{
	LED_PORT &= ~(LED_PIN);
     dd8:	5a 98       	cbi	0x0b, 2	; 11
     dda:	0b c0       	rjmp	.+22     	; 0xdf2 <heater_callback+0x250>
		}
	}
	if (heater.state == HEATER_REGULATED) {
		led_on();
	} else {
		if (++heater.toggle > 3) {
     ddc:	80 91 09 01 	lds	r24, 0x0109
     de0:	8f 5f       	subi	r24, 0xFF	; 255
     de2:	80 93 09 01 	sts	0x0109, r24
     de6:	84 30       	cpi	r24, 0x04	; 4
     de8:	20 f0       	brcs	.+8      	; 0xdf2 <heater_callback+0x250>
			heater.toggle = 0;
     dea:	10 92 09 01 	sts	0x0109, r1
			led_toggle();
     dee:	0e 94 b8 03 	call	0x770	; 0x770 <led_toggle>
		}
	}
}
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	df 90       	pop	r13
     dfc:	cf 90       	pop	r12
     dfe:	bf 90       	pop	r11
     e00:	af 90       	pop	r10
     e02:	08 95       	ret

00000e04 <tick_100ms>:
{
}

void tick_100ms(void)			// 100ms callout
{
	heater_callback();
     e04:	0e 94 d1 05 	call	0xba2	; 0xba2 <heater_callback>
}
     e08:	08 95       	ret

00000e0a <tick_callback>:
{
	device.tick_flag = true;
}

uint8_t tick_callback(void)
{
     e0a:	1f 93       	push	r17
	if (device.tick_flag == false) { return (SC_NOOP);}
     e0c:	80 91 d9 01 	lds	r24, 0x01D9
     e10:	88 23       	and	r24, r24
     e12:	11 f4       	brne	.+4      	; 0xe18 <tick_callback+0xe>
     e14:	83 e0       	ldi	r24, 0x03	; 3
     e16:	24 c0       	rjmp	.+72     	; 0xe60 <tick_callback+0x56>

	device.tick_flag = false;
     e18:	10 92 d9 01 	sts	0x01D9, r1
	return (SC_OK);
}

void tick_1ms(void)				// 1ms callout
{
	sensor_callback();
     e1c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <sensor_callback>
	if (device.tick_flag == false) { return (SC_NOOP);}

	device.tick_flag = false;
	tick_1ms();

	if (--device.tick_10ms_count != 0) { return (SC_OK);}
     e20:	80 91 da 01 	lds	r24, 0x01DA
     e24:	81 50       	subi	r24, 0x01	; 1
     e26:	80 93 da 01 	sts	0x01DA, r24
     e2a:	88 23       	and	r24, r24
     e2c:	c1 f4       	brne	.+48     	; 0xe5e <tick_callback+0x54>
	device.tick_10ms_count = 10;
     e2e:	1a e0       	ldi	r17, 0x0A	; 10
     e30:	10 93 da 01 	sts	0x01DA, r17
	tick_10ms();

	if (--device.tick_100ms_count != 0) { return (SC_OK);}
     e34:	80 91 db 01 	lds	r24, 0x01DB
     e38:	81 50       	subi	r24, 0x01	; 1
     e3a:	80 93 db 01 	sts	0x01DB, r24
     e3e:	88 23       	and	r24, r24
     e40:	71 f4       	brne	.+28     	; 0xe5e <tick_callback+0x54>
	device.tick_100ms_count = 10;
     e42:	10 93 db 01 	sts	0x01DB, r17
{
}

void tick_100ms(void)			// 100ms callout
{
	heater_callback();
     e46:	0e 94 d1 05 	call	0xba2	; 0xba2 <heater_callback>

	if (--device.tick_100ms_count != 0) { return (SC_OK);}
	device.tick_100ms_count = 10;
	tick_100ms();

	if (--device.tick_1sec_count != 0) { return (SC_OK);}
     e4a:	80 91 dc 01 	lds	r24, 0x01DC
     e4e:	81 50       	subi	r24, 0x01	; 1
     e50:	80 93 dc 01 	sts	0x01DC, r24
     e54:	88 23       	and	r24, r24
     e56:	19 f4       	brne	.+6      	; 0xe5e <tick_callback+0x54>
	device.tick_1sec_count = 10;
     e58:	10 93 dc 01 	sts	0x01DC, r17
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <tick_callback+0x56>
	tick_1sec();

	return (SC_OK);
     e5e:	80 e0       	ldi	r24, 0x00	; 0
}
     e60:	1f 91       	pop	r17
     e62:	08 95       	ret

00000e64 <main>:
 *	Device and Kinen initialization
 *	Main loop handler
 */
int main(void)
{
	cli();						// initializations
     e64:	f8 94       	cli
	kinen_init();				// do this first
     e66:	0e 94 51 07 	call	0xea2	; 0xea2 <kinen_init>
	device_init();				// handles all the low-level device peripheral inits
     e6a:	0e 94 95 03 	call	0x72a	; 0x72a <device_init>
	serial_init(BAUD_RATE);
     e6e:	60 e8       	ldi	r22, 0x80	; 128
     e70:	75 e2       	ldi	r23, 0x25	; 37
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 74 08 	call	0x10e8	; 0x10e8 <serial_init>
	heater_init();				// setup the heater module and subordinate functions
     e7a:	0e 94 8a 05 	call	0xb14	; 0xb14 <heater_init>
	sei(); 						// enable interrupts
     e7e:	78 94       	sei

	UNIT_TESTS;					// uncomment __UNIT_TEST_TC to enable unit tests

	heater_on(160);				// turn heater on for testing
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	80 e2       	ldi	r24, 0x20	; 32
     e86:	93 e4       	ldi	r25, 0x43	; 67
     e88:	0e 94 1f 03 	call	0x63e	; 0x63e <heater_on>
	rpt_initialized();			// send initalization string
     e8c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <rpt_initialized>
 */

#define	DISPATCH(func) if (func == SC_EAGAIN) return; 
static void _controller()
{
	DISPATCH(kinen_callback());		// intercept low-level communication events
     e90:	0e 94 4f 07 	call	0xe9e	; 0xe9e <kinen_callback>
     e94:	82 30       	cpi	r24, 0x02	; 2
     e96:	e1 f3       	breq	.-8      	; 0xe90 <main+0x2c>
	DISPATCH(tick_callback());		// regular interval timer clock handler (ticks)
     e98:	0e 94 05 07 	call	0xe0a	; 0xe0a <tick_callback>
     e9c:	f9 cf       	rjmp	.-14     	; 0xe90 <main+0x2c>

00000e9e <kinen_callback>:
uint8_t kinen_callback(void)
{
//	return (SC_OK);			// return from a successful operation
//	return (SC_EAGAIN);		// return if lower priority tasks should be blocked
	return (SC_NOOP);		// return if no operation was performed 
}
     e9e:	83 e0       	ldi	r24, 0x03	; 3
     ea0:	08 95       	ret

00000ea2 <kinen_init>:
 *	Would like some kind of auto-detect here. For now it's just commenting
 */
void kinen_init(void)
{
//	kinen_master_init();
	kinen_slave_init();
     ea2:	0e 94 54 07 	call	0xea8	; 0xea8 <kinen_slave_init>
}
     ea6:	08 95       	ret

00000ea8 <kinen_slave_init>:
 */
void kinen_slave_init(void)
{

//	PRR |= 0x07;				// don't screw with the power reduction register
	DDRB &= ~(1<<DDB4);			// Set MISO output, all others unaffected
     ea8:	24 98       	cbi	0x04, 4	; 4
	SPCR = (1<<SPIE | 1<<SPE);	// Enable SPI and its interrupt, set MSB first, slave mode
     eaa:	80 ec       	ldi	r24, 0xC0	; 192
     eac:	8c bd       	out	0x2c, r24	; 44
	SPCR = (1<<CPOL | 1<<CPHA);	// Uncomment for mode 3 operation, comment for mode 0
     eae:	8c e0       	ldi	r24, 0x0C	; 12
     eb0:	8c bd       	out	0x2c, r24	; 44
	memset(&ki.array, 0, sizeof(ki.array));
     eb2:	80 e1       	ldi	r24, 0x10	; 16
     eb4:	e9 e5       	ldi	r30, 0x59	; 89
     eb6:	f1 e0       	ldi	r31, 0x01	; 1
     eb8:	df 01       	movw	r26, r30
     eba:	1d 92       	st	X+, r1
     ebc:	8a 95       	dec	r24
     ebe:	e9 f7       	brne	.-6      	; 0xeba <kinen_slave_init+0x12>

	ki_wait_time = DEVICE_WAIT_TIME;	// setup read-only values
     ec0:	8a e0       	ldi	r24, 0x0A	; 10
     ec2:	80 93 5c 01 	sts	0x015C, r24
	ki_device_type = DEVICE_TYPE;
     ec6:	84 e0       	ldi	r24, 0x04	; 4
     ec8:	80 93 61 01 	sts	0x0161, r24
	ki_device_id_hi = DEVICE_ID_HI;
     ecc:	10 92 62 01 	sts	0x0162, r1
	ki_device_id_lo = DEVICE_ID_LO;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	80 93 63 01 	sts	0x0163, r24
	ki_device_rev_major = DEVICE_REV_MAJOR;
     ed6:	10 92 64 01 	sts	0x0164, r1
	ki_device_rev_minor = DEVICE_REV_MINOR;
     eda:	80 93 65 01 	sts	0x0165, r24
	ki_device_uuid_1 = DEVICE_UUID_1;
     ede:	10 92 66 01 	sts	0x0166, r1
	ki_device_uuid_2 = DEVICE_UUID_2;
     ee2:	10 92 67 01 	sts	0x0167, r1
	ki_device_uuid_3 = DEVICE_UUID_3;
     ee6:	10 92 68 01 	sts	0x0168, r1

	ki_status = SC_OK;
     eea:	10 92 5a 01 	sts	0x015A, r1
	SPDR = ki_status;
     eee:	1e bc       	out	0x2e, r1	; 46
}
     ef0:	08 95       	ret

00000ef2 <__vector_17>:
 * SPI Slave RX Interrupt() - interrupts on byte received
 *
 * Uses a 2 phase state machine to toggle back and forth between ADDR and DATA bytes
 */
ISR(SPI_STC_vect)
{
     ef2:	1f 92       	push	r1
     ef4:	0f 92       	push	r0
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	0f 92       	push	r0
     efa:	11 24       	eor	r1, r1
     efc:	2f 93       	push	r18
     efe:	3f 93       	push	r19
     f00:	4f 93       	push	r20
     f02:	5f 93       	push	r21
     f04:	6f 93       	push	r22
     f06:	7f 93       	push	r23
     f08:	8f 93       	push	r24
     f0a:	9f 93       	push	r25
     f0c:	af 93       	push	r26
     f0e:	bf 93       	push	r27
     f10:	ef 93       	push	r30
     f12:	ff 93       	push	r31
	// receive address byte
	if (ki_slave.phase == KINEN_ADDR) {
     f14:	80 91 00 01 	lds	r24, 0x0100
     f18:	88 23       	and	r24, r24
     f1a:	11 f5       	brne	.+68     	; 0xf60 <__vector_17+0x6e>
		ki_slave.phase = KINEN_DATA;	// advance phase
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	80 93 00 01 	sts	0x0100, r24
		ki_slave.addr = SPDR;		// read and save the address byte
     f22:	ee b5       	in	r30, 0x2e	; 46
     f24:	e0 93 01 01 	sts	0x0101, r30
		if (ki_command == KINEN_WRITE) { // write is simple...
     f28:	80 91 59 01 	lds	r24, 0x0159
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	11 f4       	brne	.+4      	; 0xf34 <__vector_17+0x42>
			SPDR = KINEN_OK_BYTE;			// already saved addr, now return an OK
     f30:	8a e5       	ldi	r24, 0x5A	; 90
     f32:	14 c0       	rjmp	.+40     	; 0xf5c <__vector_17+0x6a>
		} else {
			if (ki_slave.addr < KINEN_COMMON_MAX) {	// handle OCB address space
     f34:	e0 31       	cpi	r30, 0x10	; 16
     f36:	28 f4       	brcc	.+10     	; 0xf42 <__vector_17+0x50>
				SPDR = ki.array[ki_slave.addr];
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	e8 5a       	subi	r30, 0xA8	; 168
     f3c:	fe 4f       	sbci	r31, 0xFE	; 254
     f3e:	81 81       	ldd	r24, Z+1	; 0x01
     f40:	0d c0       	rjmp	.+26     	; 0xf5c <__vector_17+0x6a>
			} else {								// handle device address space
				if ((ki_status = device_read_byte(ki_slave.addr, &ki_slave.data)) == SC_OK) {
     f42:	8e 2f       	mov	r24, r30
     f44:	62 e0       	ldi	r22, 0x02	; 2
     f46:	71 e0       	ldi	r23, 0x01	; 1
     f48:	0e 94 c0 03 	call	0x780	; 0x780 <device_read_byte>
     f4c:	80 93 5a 01 	sts	0x015A, r24
     f50:	88 23       	and	r24, r24
     f52:	19 f4       	brne	.+6      	; 0xf5a <__vector_17+0x68>
					SPDR = ki_slave.data;
     f54:	80 91 02 01 	lds	r24, 0x0102
     f58:	01 c0       	rjmp	.+2      	; 0xf5c <__vector_17+0x6a>
				} else {
					SPDR = KINEN_ERR_BYTE;
     f5a:	85 ea       	ldi	r24, 0xA5	; 165
     f5c:	8e bd       	out	0x2e, r24	; 46
     f5e:	25 c0       	rjmp	.+74     	; 0xfaa <__vector_17+0xb8>
			}
		}

	// receive data byte
	} else {
		ki_slave.phase = KINEN_ADDR;	// advance phase
     f60:	10 92 00 01 	sts	0x0100, r1
		ki_slave.data = SPDR;		// read and save the data byte
     f64:	6e b5       	in	r22, 0x2e	; 46
     f66:	60 93 02 01 	sts	0x0102, r22
		if (ki_command == KINEN_WRITE) {
     f6a:	80 91 59 01 	lds	r24, 0x0159
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	e1 f4       	brne	.+56     	; 0xfaa <__vector_17+0xb8>
			if (ki_slave.addr < KINEN_COMMON_MAX) {
     f72:	80 91 01 01 	lds	r24, 0x0101
     f76:	80 31       	cpi	r24, 0x10	; 16
     f78:	a0 f4       	brcc	.+40     	; 0xfa2 <__vector_17+0xb0>
/* 
 * _slave_write_byte() - helper to write byte to a non-device address
 */
static uint8_t _slave_write_byte(const uint8_t addr, const uint8_t data)
{
	if (addr == KINEN_COMMAND) {
     f7a:	88 23       	and	r24, r24
     f7c:	19 f4       	brne	.+6      	; 0xf84 <__vector_17+0x92>
		ki_command = data; 
     f7e:	60 93 59 01 	sts	0x0159, r22
     f82:	11 c0       	rjmp	.+34     	; 0xfa6 <__vector_17+0xb4>

	} else if (addr == KINEN_ADDR_PAGE) { 
     f84:	84 30       	cpi	r24, 0x04	; 4
     f86:	19 f4       	brne	.+6      	; 0xf8e <__vector_17+0x9c>
		ki_addr_page = data; 
     f88:	60 93 5d 01 	sts	0x015D, r22
     f8c:	08 c0       	rjmp	.+16     	; 0xf9e <__vector_17+0xac>

	} else if (addr == KINEN_RESET) {
     f8e:	85 30       	cpi	r24, 0x05	; 5
     f90:	11 f0       	breq	.+4      	; 0xf96 <__vector_17+0xa4>
     f92:	89 e1       	ldi	r24, 0x19	; 25
     f94:	08 c0       	rjmp	.+16     	; 0xfa6 <__vector_17+0xb4>
		kinen_slave_init();
     f96:	0e 94 54 07 	call	0xea8	; 0xea8 <kinen_slave_init>
		device_reset();
     f9a:	0e 94 bf 03 	call	0x77e	; 0x77e <device_reset>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <__vector_17+0xb4>
		ki_slave.data = SPDR;		// read and save the data byte
		if (ki_command == KINEN_WRITE) {
			if (ki_slave.addr < KINEN_COMMON_MAX) {
				ki_status = _slave_write_byte(ki_slave.addr, ki_slave.data);
			} else {
				ki_status = device_write_byte(ki_slave.addr, ki_slave.data);
     fa2:	0e 94 ce 03 	call	0x79c	; 0x79c <device_write_byte>
     fa6:	80 93 5a 01 	sts	0x015A, r24
			}
		}
	}
}
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <std_dev>:
 *
 *	"A lot of people talk about standard deviation but what is a standard deviant?"
 */

double std_dev(double a[], uint8_t n, double *mean) 
{
     fcc:	2f 92       	push	r2
     fce:	3f 92       	push	r3
     fd0:	4f 92       	push	r4
     fd2:	5f 92       	push	r5
     fd4:	6f 92       	push	r6
     fd6:	7f 92       	push	r7
     fd8:	8f 92       	push	r8
     fda:	9f 92       	push	r9
     fdc:	af 92       	push	r10
     fde:	bf 92       	push	r11
     fe0:	cf 92       	push	r12
     fe2:	df 92       	push	r13
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <std_dev+0x26>
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <std_dev+0x28>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	d6 2e       	mov	r13, r22
     ffa:	5a 83       	std	Y+2, r21	; 0x02
     ffc:	49 83       	std	Y+1, r20	; 0x01
	if(n == 0) { return (0);}
     ffe:	66 23       	and	r22, r22
    1000:	29 f4       	brne	.+10     	; 0x100c <std_dev+0x40>
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	57 c0       	rjmp	.+174    	; 0x10ba <std_dev+0xee>
    100c:	9c 83       	std	Y+4, r25	; 0x04
    100e:	8b 83       	std	Y+3, r24	; 0x03
    1010:	0f 2e       	mov	r0, r31
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	6f 2e       	mov	r6, r31
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	7f 2e       	mov	r7, r31
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	8f 2e       	mov	r8, r31
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	9f 2e       	mov	r9, r31
    1022:	f0 2d       	mov	r31, r0
    1024:	13 01       	movw	r2, r6
    1026:	24 01       	movw	r4, r8
    1028:	aa 24       	eor	r10, r10
    102a:	1d c0       	rjmp	.+58     	; 0x1066 <std_dev+0x9a>
	double sum = 0;
	double sq_sum = 0;
	for(uint8_t i=0; i<n; ++i) {
		sum += a[i];
    102c:	eb 81       	ldd	r30, Y+3	; 0x03
    102e:	fc 81       	ldd	r31, Y+4	; 0x04
    1030:	e1 90       	ld	r14, Z+
    1032:	f1 90       	ld	r15, Z+
    1034:	01 91       	ld	r16, Z+
    1036:	11 91       	ld	r17, Z+
    1038:	fc 83       	std	Y+4, r31	; 0x04
    103a:	eb 83       	std	Y+3, r30	; 0x03
    103c:	c4 01       	movw	r24, r8
    103e:	b3 01       	movw	r22, r6
    1040:	a8 01       	movw	r20, r16
    1042:	97 01       	movw	r18, r14
    1044:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__addsf3>
    1048:	3b 01       	movw	r6, r22
    104a:	4c 01       	movw	r8, r24
		sq_sum += square(a[i]);
    104c:	c8 01       	movw	r24, r16
    104e:	b7 01       	movw	r22, r14
    1050:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <square>
    1054:	9b 01       	movw	r18, r22
    1056:	ac 01       	movw	r20, r24
    1058:	c2 01       	movw	r24, r4
    105a:	b1 01       	movw	r22, r2
    105c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__addsf3>
    1060:	1b 01       	movw	r2, r22
    1062:	2c 01       	movw	r4, r24
double std_dev(double a[], uint8_t n, double *mean) 
{
	if(n == 0) { return (0);}
	double sum = 0;
	double sq_sum = 0;
	for(uint8_t i=0; i<n; ++i) {
    1064:	a3 94       	inc	r10
    1066:	ad 14       	cp	r10, r13
    1068:	08 f3       	brcs	.-62     	; 0x102c <std_dev+0x60>
		sum += a[i];
		sq_sum += square(a[i]);
	}
	*mean = sum / n;
    106a:	6d 2d       	mov	r22, r13
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	88 27       	eor	r24, r24
    1070:	77 fd       	sbrc	r23, 7
    1072:	80 95       	com	r24
    1074:	98 2f       	mov	r25, r24
    1076:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__floatsisf>
    107a:	5b 01       	movw	r10, r22
    107c:	6c 01       	movw	r12, r24
    107e:	c4 01       	movw	r24, r8
    1080:	b3 01       	movw	r22, r6
    1082:	a6 01       	movw	r20, r12
    1084:	95 01       	movw	r18, r10
    1086:	0e 94 11 0b 	call	0x1622	; 0x1622 <__divsf3>
    108a:	9b 01       	movw	r18, r22
    108c:	ac 01       	movw	r20, r24
    108e:	e9 81       	ldd	r30, Y+1	; 0x01
    1090:	fa 81       	ldd	r31, Y+2	; 0x02
    1092:	20 83       	st	Z, r18
    1094:	31 83       	std	Z+1, r19	; 0x01
    1096:	42 83       	std	Z+2, r20	; 0x02
    1098:	53 83       	std	Z+3, r21	; 0x03
	double variance = (sq_sum / n) - square(*mean);
    109a:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <square>
    109e:	7b 01       	movw	r14, r22
    10a0:	8c 01       	movw	r16, r24
	return sqrt(variance);
    10a2:	c2 01       	movw	r24, r4
    10a4:	b1 01       	movw	r22, r2
    10a6:	a6 01       	movw	r20, r12
    10a8:	95 01       	movw	r18, r10
    10aa:	0e 94 11 0b 	call	0x1622	; 0x1622 <__divsf3>
    10ae:	a8 01       	movw	r20, r16
    10b0:	97 01       	movw	r18, r14
    10b2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__subsf3>
    10b6:	0e 94 c7 0c 	call	0x198e	; 0x198e <sqrt>
}
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	df 90       	pop	r13
    10d0:	cf 90       	pop	r12
    10d2:	bf 90       	pop	r11
    10d4:	af 90       	pop	r10
    10d6:	9f 90       	pop	r9
    10d8:	8f 90       	pop	r8
    10da:	7f 90       	pop	r7
    10dc:	6f 90       	pop	r6
    10de:	5f 90       	pop	r5
    10e0:	4f 90       	pop	r4
    10e2:	3f 90       	pop	r3
    10e4:	2f 90       	pop	r2
    10e6:	08 95       	ret

000010e8 <serial_init>:
	UBRR0L = UBRR0_value;
	UCSR0A &= ~(1<<U2X0);		// baud doubler off
}

void serial_init(long baud)
{
    10e8:	9b 01       	movw	r18, r22
    10ea:	ac 01       	movw	r20, r24
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_buffer_head = 0;
volatile uint8_t tx_buffer_tail = 0;

static void set_baud_rate(long baud) {
	uint16_t UBRR0_value = (F_CPU / (8 * baud)) - 1;
    10ec:	83 e0       	ldi	r24, 0x03	; 3
    10ee:	22 0f       	add	r18, r18
    10f0:	33 1f       	adc	r19, r19
    10f2:	44 1f       	adc	r20, r20
    10f4:	55 1f       	adc	r21, r21
    10f6:	8a 95       	dec	r24
    10f8:	d1 f7       	brne	.-12     	; 0x10ee <serial_init+0x6>
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	72 e1       	ldi	r23, 0x12	; 18
    10fe:	8a e7       	ldi	r24, 0x7A	; 122
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__udivmodsi4>
    1106:	21 50       	subi	r18, 0x01	; 1
    1108:	30 40       	sbci	r19, 0x00	; 0
	UBRR0H = UBRR0_value >> 8;
    110a:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = UBRR0_value;
    110e:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0A &= ~(1<<U2X0);		// baud doubler off
    1112:	e0 ec       	ldi	r30, 0xC0	; 192
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8d 7f       	andi	r24, 0xFD	; 253
    111a:	80 83       	st	Z, r24
}

void serial_init(long baud)
{
	set_baud_rate(baud);
	UCSR0B |= 1<<RXEN0;			// enable rx and tx
    111c:	e1 ec       	ldi	r30, 0xC1	; 193
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	80 61       	ori	r24, 0x10	; 16
    1124:	80 83       	st	Z, r24
	UCSR0B |= 1<<TXEN0;	
    1126:	80 81       	ld	r24, Z
    1128:	88 60       	ori	r24, 0x08	; 8
    112a:	80 83       	st	Z, r24
	UCSR0B |= 1<<RXCIE0;		// enable interrupt on complete reception of a byte
    112c:	80 81       	ld	r24, Z
    112e:	80 68       	ori	r24, 0x80	; 128
    1130:	80 83       	st	Z, r24
	// USART defaults to 8-bit, no parity, 1 stop bit
}
    1132:	08 95       	ret

00001134 <serial_write>:

void serial_write(uint8_t data) {
    1134:	28 2f       	mov	r18, r24
	uint8_t next_head = tx_buffer_head + 1;	// Calculate next head
    1136:	e0 91 05 01 	lds	r30, 0x0105
    113a:	9e 2f       	mov	r25, r30
    113c:	9f 5f       	subi	r25, 0xFF	; 255
	if (next_head == TX_BUFFER_SIZE) {
		next_head = 0; 
	}
	// Enable Data Register Empty Interrupt to make sure tx-streaming is running
	UCSR0B |= (1<<UDRIE0); 
    113e:	80 91 c1 00 	lds	r24, 0x00C1
    1142:	80 62       	ori	r24, 0x20	; 32
    1144:	80 93 c1 00 	sts	0x00C1, r24
	while (next_head == tx_buffer_tail); 	// Wait until there is space in the buffer
    1148:	80 91 06 01 	lds	r24, 0x0106
    114c:	98 17       	cp	r25, r24
    114e:	e1 f3       	breq	.-8      	; 0x1148 <serial_write+0x14>

	tx_buffer[tx_buffer_head] = data;		// Store data and advance head
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	e5 51       	subi	r30, 0x15	; 21
    1154:	fd 4f       	sbci	r31, 0xFD	; 253
    1156:	20 83       	st	Z, r18
	tx_buffer_head = next_head;
    1158:	90 93 05 01 	sts	0x0105, r25
}
    115c:	08 95       	ret

0000115e <__vector_19>:

// Data Register Empty Interrupt handler
ISR(USART_UDRE_vect)
{
    115e:	1f 92       	push	r1
    1160:	0f 92       	push	r0
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	0f 92       	push	r0
    1166:	11 24       	eor	r1, r1
    1168:	8f 93       	push	r24
    116a:	9f 93       	push	r25
    116c:	ef 93       	push	r30
    116e:	ff 93       	push	r31
	uint8_t tail = tx_buffer_tail;	// Temporary tx_buffer_tail (to optimize for volatile)
    1170:	90 91 06 01 	lds	r25, 0x0106
	UDR0 = tx_buffer[tail];			// Send a byte from the buffer	
    1174:	e9 2f       	mov	r30, r25
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	e5 51       	subi	r30, 0x15	; 21
    117a:	fd 4f       	sbci	r31, 0xFD	; 253
    117c:	80 81       	ld	r24, Z
    117e:	80 93 c6 00 	sts	0x00C6, r24
    tail++;							// Update tail position
    1182:	9f 5f       	subi	r25, 0xFF	; 255
    if (tail == TX_BUFFER_SIZE) { tail = 0; }
	tx_buffer_tail = tail;
    1184:	90 93 06 01 	sts	0x0106, r25

	// Turn off Data Register Empty Interrupt to stop tx-streaming if this concludes the transfer
	if (tail == tx_buffer_head) { 
    1188:	80 91 05 01 	lds	r24, 0x0105
    118c:	98 17       	cp	r25, r24
    118e:	29 f4       	brne	.+10     	; 0x119a <__vector_19+0x3c>
		UCSR0B &= ~(1<<UDRIE0);
    1190:	80 91 c1 00 	lds	r24, 0x00C1
    1194:	8f 7d       	andi	r24, 0xDF	; 223
    1196:	80 93 c1 00 	sts	0x00C1, r24
	}
}
    119a:	ff 91       	pop	r31
    119c:	ef 91       	pop	r30
    119e:	9f 91       	pop	r25
    11a0:	8f 91       	pop	r24
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <serial_read>:

uint8_t serial_read()
{
	if (rx_buffer_head == rx_buffer_tail) {
    11ac:	90 91 04 01 	lds	r25, 0x0104
    11b0:	80 91 03 01 	lds	r24, 0x0103
    11b4:	89 17       	cp	r24, r25
    11b6:	11 f4       	brne	.+4      	; 0x11bc <serial_read+0x10>
    11b8:	8f ef       	ldi	r24, 0xFF	; 255
    11ba:	08 95       	ret
		return SERIAL_NO_DATA;
	} else {
		uint8_t data = rx_buffer[rx_buffer_tail];
    11bc:	e9 2f       	mov	r30, r25
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	e5 51       	subi	r30, 0x15	; 21
    11c2:	fe 4f       	sbci	r31, 0xFE	; 254
    11c4:	80 81       	ld	r24, Z
		rx_buffer_tail++;
    11c6:	9f 5f       	subi	r25, 0xFF	; 255
    11c8:	90 93 04 01 	sts	0x0104, r25
		if (rx_buffer_tail == RX_BUFFER_SIZE) { rx_buffer_tail = 0; }
		return data;
	}
}
    11cc:	08 95       	ret

000011ce <__vector_18>:

ISR(USART_RX_vect)
{
    11ce:	1f 92       	push	r1
    11d0:	0f 92       	push	r0
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	0f 92       	push	r0
    11d6:	11 24       	eor	r1, r1
    11d8:	2f 93       	push	r18
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	ef 93       	push	r30
    11e0:	ff 93       	push	r31
	uint8_t data = UDR0;
    11e2:	20 91 c6 00 	lds	r18, 0x00C6
	uint8_t next_head = rx_buffer_head + 1;
    11e6:	e0 91 03 01 	lds	r30, 0x0103
    11ea:	9e 2f       	mov	r25, r30
    11ec:	9f 5f       	subi	r25, 0xFF	; 255
	
	if (next_head == RX_BUFFER_SIZE) { 
		next_head = 0;
	}
	if (next_head != rx_buffer_tail) {      // Write data to buffer unless it is full.
    11ee:	80 91 04 01 	lds	r24, 0x0104
    11f2:	98 17       	cp	r25, r24
    11f4:	31 f0       	breq	.+12     	; 0x1202 <__vector_18+0x34>
		rx_buffer[rx_buffer_head] = data;
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	e5 51       	subi	r30, 0x15	; 21
    11fa:	fe 4f       	sbci	r31, 0xFE	; 254
    11fc:	20 83       	st	Z, r18
		rx_buffer_head = next_head;    
    11fe:	90 93 03 01 	sts	0x0103, r25
	}
}
    1202:	ff 91       	pop	r31
    1204:	ef 91       	pop	r30
    1206:	9f 91       	pop	r25
    1208:	8f 91       	pop	r24
    120a:	2f 91       	pop	r18
    120c:	0f 90       	pop	r0
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	0f 90       	pop	r0
    1212:	1f 90       	pop	r1
    1214:	18 95       	reti

00001216 <serial_reset_read_buffer>:

void serial_reset_read_buffer() 
{
  rx_buffer_tail = rx_buffer_head;
    1216:	80 91 03 01 	lds	r24, 0x0103
    121a:	80 93 04 01 	sts	0x0104, r24
}
    121e:	08 95       	ret

00001220 <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up 
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n)
{
    1220:	8f 92       	push	r8
    1222:	9f 92       	push	r9
    1224:	bf 92       	push	r11
    1226:	cf 92       	push	r12
    1228:	df 92       	push	r13
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	2a 97       	sbiw	r28, 0x0a	; 10
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	7b 01       	movw	r14, r22
    1248:	8c 01       	movw	r16, r24
	if (n < 0) {
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	0e 94 0d 0b 	call	0x161a	; 0x161a <__cmpsf2>
    1256:	88 23       	and	r24, r24
    1258:	3c f4       	brge	.+14     	; 0x1268 <printFloat+0x48>
		serial_write('-');
    125a:	8d e2       	ldi	r24, 0x2D	; 45
    125c:	0e 94 9a 08 	call	0x1134	; 0x1134 <serial_write>
		n = -n;
    1260:	17 fb       	bst	r17, 7
    1262:	10 95       	com	r17
    1264:	17 f9       	bld	r17, 7
    1266:	10 95       	com	r17
	}

	uint8_t decimals = DECIMAL_PLACES;
	while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
		n *= 100;
    1268:	c8 01       	movw	r24, r16
    126a:	b7 01       	movw	r22, r14
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	48 ec       	ldi	r20, 0xC8	; 200
    1272:	52 e4       	ldi	r21, 0x42	; 66
    1274:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__mulsf3>
	n += 0.5; // Add rounding factor. Ensures carryover through entire value.
    
	// Generate digits backwards and store in string.
	unsigned char buf[10]; 
	uint8_t i = 0;
	uint32_t a = (long)n;  
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	5f e3       	ldi	r21, 0x3F	; 63
    1280:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__addsf3>
    1284:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__fixsfsi>
    1288:	6b 01       	movw	r12, r22
    128a:	7c 01       	movw	r14, r24
	buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
    128c:	8e e2       	ldi	r24, 0x2E	; 46
    128e:	8b 83       	std	Y+3, r24	; 0x03
    1290:	bb 24       	eor	r11, r11
	while(a > 0) {
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
		buf[i++] = (a % 10) + '0'; // Get digit
    1292:	4e 01       	movw	r8, r28
    1294:	08 94       	sec
    1296:	81 1c       	adc	r8, r1
    1298:	91 1c       	adc	r9, r1
    129a:	20 c0       	rjmp	.+64     	; 0x12dc <printFloat+0xbc>
	unsigned char buf[10]; 
	uint8_t i = 0;
	uint32_t a = (long)n;  
	buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
	while(a > 0) {
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
    129c:	32 e0       	ldi	r19, 0x02	; 2
    129e:	b3 16       	cp	r11, r19
    12a0:	11 f4       	brne	.+4      	; 0x12a6 <printFloat+0x86>
    12a2:	93 e0       	ldi	r25, 0x03	; 3
    12a4:	b9 2e       	mov	r11, r25
		buf[i++] = (a % 10) + '0'; // Get digit
    12a6:	84 01       	movw	r16, r8
    12a8:	0b 0d       	add	r16, r11
    12aa:	11 1d       	adc	r17, r1
    12ac:	c7 01       	movw	r24, r14
    12ae:	b6 01       	movw	r22, r12
    12b0:	2a e0       	ldi	r18, 0x0A	; 10
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__udivmodsi4>
    12bc:	60 5d       	subi	r22, 0xD0	; 208
    12be:	f8 01       	movw	r30, r16
    12c0:	60 83       	st	Z, r22
    12c2:	b3 94       	inc	r11
		a /= 10;
    12c4:	c7 01       	movw	r24, r14
    12c6:	b6 01       	movw	r22, r12
    12c8:	2a e0       	ldi	r18, 0x0A	; 10
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__udivmodsi4>
    12d4:	c9 01       	movw	r24, r18
    12d6:	da 01       	movw	r26, r20
    12d8:	6c 01       	movw	r12, r24
    12da:	7d 01       	movw	r14, r26
	// Generate digits backwards and store in string.
	unsigned char buf[10]; 
	uint8_t i = 0;
	uint32_t a = (long)n;  
	buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
	while(a > 0) {
    12dc:	c1 14       	cp	r12, r1
    12de:	d1 04       	cpc	r13, r1
    12e0:	e1 04       	cpc	r14, r1
    12e2:	f1 04       	cpc	r15, r1
    12e4:	d9 f6       	brne	.-74     	; 0x129c <printFloat+0x7c>
    12e6:	06 c0       	rjmp	.+12     	; 0x12f4 <printFloat+0xd4>
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
		buf[i++] = (a % 10) + '0'; // Get digit
		a /= 10;
	}
	while (i < DECIMAL_PLACES) { 
		buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
    12e8:	fc 01       	movw	r30, r24
    12ea:	eb 0d       	add	r30, r11
    12ec:	f1 1d       	adc	r31, r1
    12ee:	20 83       	st	Z, r18
    12f0:	b3 94       	inc	r11
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <printFloat+0xda>
    12f4:	ce 01       	movw	r24, r28
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	20 e3       	ldi	r18, 0x30	; 48
	while(a > 0) {
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
		buf[i++] = (a % 10) + '0'; // Get digit
		a /= 10;
	}
	while (i < DECIMAL_PLACES) { 
    12fa:	f1 e0       	ldi	r31, 0x01	; 1
    12fc:	fb 15       	cp	r31, r11
    12fe:	a0 f7       	brcc	.-24     	; 0x12e8 <printFloat+0xc8>
		buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
	}
	if (i == DECIMAL_PLACES) { // Fill in leading zero, if needed.
    1300:	32 e0       	ldi	r19, 0x02	; 2
    1302:	b3 16       	cp	r11, r19
    1304:	21 f4       	brne	.+8      	; 0x130e <printFloat+0xee>
		i++;
		buf[i++] = '0'; 
    1306:	80 e3       	ldi	r24, 0x30	; 48
    1308:	8c 83       	std	Y+4, r24	; 0x04
    130a:	84 e0       	ldi	r24, 0x04	; 4
    130c:	b8 2e       	mov	r11, r24
	}

	// Print the generated string.
	for (; i > 0; i--)
		serial_write(buf[i-1]);
    130e:	fe 01       	movw	r30, r28
    1310:	eb 0d       	add	r30, r11
    1312:	f1 1d       	adc	r31, r1
    1314:	80 81       	ld	r24, Z
    1316:	0e 94 9a 08 	call	0x1134	; 0x1134 <serial_write>
		i++;
		buf[i++] = '0'; 
	}

	// Print the generated string.
	for (; i > 0; i--)
    131a:	ba 94       	dec	r11
    131c:	c1 f7       	brne	.-16     	; 0x130e <printFloat+0xee>
		serial_write(buf[i-1]);
}
    131e:	2a 96       	adiw	r28, 0x0a	; 10
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	bf 90       	pop	r11
    133c:	9f 90       	pop	r9
    133e:	8f 90       	pop	r8
    1340:	08 95       	ret

00001342 <printInteger>:
  for (; i > 0; i--)
    serial_write(buf[i-1]);
}

void printInteger(uint32_t n)
{
    1342:	8f 92       	push	r8
    1344:	9f 92       	push	r9
    1346:	af 92       	push	r10
    1348:	bf 92       	push	r11
    134a:	cf 92       	push	r12
    134c:	df 92       	push	r13
    134e:	ef 92       	push	r14
    1350:	ff 92       	push	r15
    1352:	0f 93       	push	r16
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	2a 97       	sbiw	r28, 0x0a	; 10
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	6b 01       	movw	r12, r22
    136a:	7c 01       	movw	r14, r24
static void print_uint32_base10(unsigned long n)
{ 
  unsigned char buf[10]; 
  uint8_t i = 0;
  
  if (n == 0) {
    136c:	61 15       	cp	r22, r1
    136e:	71 05       	cpc	r23, r1
    1370:	81 05       	cpc	r24, r1
    1372:	91 05       	cpc	r25, r1
    1374:	21 f4       	brne	.+8      	; 0x137e <printInteger+0x3c>
    serial_write('0');
    1376:	80 e3       	ldi	r24, 0x30	; 48
    1378:	0e 94 9a 08 	call	0x1134	; 0x1134 <serial_write>
    137c:	2f c0       	rjmp	.+94     	; 0x13dc <printInteger+0x9a>
    137e:	00 e0       	ldi	r16, 0x00	; 0
    return;
  } 
  
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    1380:	4e 01       	movw	r8, r28
    1382:	08 94       	sec
    1384:	81 1c       	adc	r8, r1
    1386:	91 1c       	adc	r9, r1
    1388:	54 01       	movw	r10, r8
    138a:	a0 0e       	add	r10, r16
    138c:	b1 1c       	adc	r11, r1
    138e:	c7 01       	movw	r24, r14
    1390:	b6 01       	movw	r22, r12
    1392:	2a e0       	ldi	r18, 0x0A	; 10
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__udivmodsi4>
    139e:	60 5d       	subi	r22, 0xD0	; 208
    13a0:	f5 01       	movw	r30, r10
    13a2:	60 83       	st	Z, r22
    13a4:	0f 5f       	subi	r16, 0xFF	; 255
    n /= 10;
    13a6:	c7 01       	movw	r24, r14
    13a8:	b6 01       	movw	r22, r12
    13aa:	2a e0       	ldi	r18, 0x0A	; 10
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__udivmodsi4>
    13b6:	c9 01       	movw	r24, r18
    13b8:	da 01       	movw	r26, r20
    13ba:	6c 01       	movw	r12, r24
    13bc:	7d 01       	movw	r14, r26
  if (n == 0) {
    serial_write('0');
    return;
  } 
  
  while (n > 0) {
    13be:	c1 14       	cp	r12, r1
    13c0:	d1 04       	cpc	r13, r1
    13c2:	e1 04       	cpc	r14, r1
    13c4:	f1 04       	cpc	r15, r1
    13c6:	01 f7       	brne	.-64     	; 0x1388 <printInteger+0x46>
    13c8:	07 c0       	rjmp	.+14     	; 0x13d8 <printInteger+0x96>
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    serial_write(buf[i-1]);
    13ca:	fe 01       	movw	r30, r28
    13cc:	e0 0f       	add	r30, r16
    13ce:	f1 1d       	adc	r31, r1
    13d0:	80 81       	ld	r24, Z
    13d2:	0e 94 9a 08 	call	0x1134	; 0x1134 <serial_write>
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    13d6:	01 50       	subi	r16, 0x01	; 1
    13d8:	00 23       	and	r16, r16
    13da:	b9 f7       	brne	.-18     	; 0x13ca <printInteger+0x88>
  if (n < 0) {
    serial_write('-');
    n = -n;
  }
  print_uint32_base10(n);
}
    13dc:	2a 96       	adiw	r28, 0x0a	; 10
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	0f 91       	pop	r16
    13ee:	ff 90       	pop	r15
    13f0:	ef 90       	pop	r14
    13f2:	df 90       	pop	r13
    13f4:	cf 90       	pop	r12
    13f6:	bf 90       	pop	r11
    13f8:	af 90       	pop	r10
    13fa:	9f 90       	pop	r9
    13fc:	8f 90       	pop	r8
    13fe:	08 95       	ret

00001400 <print_uint8_base2>:
// 			'0' + buf[i - 1] :
// 			'A' + buf[i - 1] - 10);
// }

void print_uint8_base2(uint8_t n)
{ 
    1400:	0f 93       	push	r16
    1402:	1f 93       	push	r17
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	28 97       	sbiw	r28, 0x08	; 8
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	98 2f       	mov	r25, r24
    141a:	fe 01       	movw	r30, r28
    141c:	31 96       	adiw	r30, 0x01	; 1
	unsigned char buf[8];
	uint8_t i = 0;

	for (; i < 8; i++) {
    141e:	9e 01       	movw	r18, r28
    1420:	27 5f       	subi	r18, 0xF7	; 247
    1422:	3f 4f       	sbci	r19, 0xFF	; 255
		buf[i] = n & 1;
    1424:	89 2f       	mov	r24, r25
    1426:	81 70       	andi	r24, 0x01	; 1
    1428:	81 93       	st	Z+, r24
		n >>= 1;
    142a:	96 95       	lsr	r25
void print_uint8_base2(uint8_t n)
{ 
	unsigned char buf[8];
	uint8_t i = 0;

	for (; i < 8; i++) {
    142c:	e2 17       	cp	r30, r18
    142e:	f3 07       	cpc	r31, r19
    1430:	c9 f7       	brne	.-14     	; 0x1424 <print_uint8_base2+0x24>
    1432:	8e 01       	movw	r16, r28
    1434:	08 5f       	subi	r16, 0xF8	; 248
    1436:	1f 4f       	sbci	r17, 0xFF	; 255
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
		serial_write('0' + buf[i - 1]);
    1438:	f8 01       	movw	r30, r16
    143a:	80 81       	ld	r24, Z
    143c:	80 5d       	subi	r24, 0xD0	; 208
    143e:	0e 94 9a 08 	call	0x1134	; 0x1134 <serial_write>
    1442:	01 50       	subi	r16, 0x01	; 1
    1444:	10 40       	sbci	r17, 0x00	; 0
	for (; i < 8; i++) {
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
    1446:	0c 17       	cp	r16, r28
    1448:	1d 07       	cpc	r17, r29
    144a:	b1 f7       	brne	.-20     	; 0x1438 <print_uint8_base2+0x38>
		serial_write('0' + buf[i - 1]);
}
    144c:	28 96       	adiw	r28, 0x08	; 8
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	08 95       	ret

00001462 <printPgmString>:
    serial_write(*s++);
}

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	ec 01       	movw	r28, r24
    1468:	02 c0       	rjmp	.+4      	; 0x146e <printPgmString+0xc>
  char c;
  while ((c = pgm_read_byte_near(s++)))
    serial_write(c);
    146a:	0e 94 9a 08 	call	0x1134	; 0x1134 <serial_write>
    146e:	fe 01       	movw	r30, r28

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
  while ((c = pgm_read_byte_near(s++)))
    1470:	21 96       	adiw	r28, 0x01	; 1
    1472:	84 91       	lpm	r24, Z+
    1474:	88 23       	and	r24, r24
    1476:	c9 f7       	brne	.-14     	; 0x146a <printPgmString+0x8>
    serial_write(c);
}
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <printString>:

#include "print.h"
#include "serial.h"

void printString(const char *s)
{
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	ec 01       	movw	r28, r24
    1484:	03 c0       	rjmp	.+6      	; 0x148c <printString+0xe>
  while (*s)
    serial_write(*s++);
    1486:	21 96       	adiw	r28, 0x01	; 1
    1488:	0e 94 9a 08 	call	0x1134	; 0x1134 <serial_write>
#include "print.h"
#include "serial.h"

void printString(const char *s)
{
  while (*s)
    148c:	88 81       	ld	r24, Y
    148e:	88 23       	and	r24, r24
    1490:	d1 f7       	brne	.-12     	; 0x1486 <printString+0x8>
    serial_write(*s++);
}
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <rpt_initialized>:
/*** Display routines ***/

void rpt_initialized()
{
//	printPgmString((PGM_P)(pgm_read_word(initialized))); 
	printPgmString(PSTR("\nDevice Initialized\n")); 
    1498:	81 ef       	ldi	r24, 0xF1	; 241
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 31 0a 	call	0x1462	; 0x1462 <printPgmString>
}
    14a0:	08 95       	ret

000014a2 <rpt_readout>:

void rpt_readout()
{
	printPgmString(PSTR("Temp:")); printFloat(sensor.temperature);
    14a2:	8b ee       	ldi	r24, 0xEB	; 235
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 31 0a 	call	0x1462	; 0x1462 <printPgmString>
    14aa:	60 91 6d 01 	lds	r22, 0x016D
    14ae:	70 91 6e 01 	lds	r23, 0x016E
    14b2:	80 91 6f 01 	lds	r24, 0x016F
    14b6:	90 91 70 01 	lds	r25, 0x0170
    14ba:	0e 94 10 09 	call	0x1220	; 0x1220 <printFloat>
	printPgmString(PSTR("  PWM:")); printFloat(pid.output);
    14be:	84 ee       	ldi	r24, 0xE4	; 228
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 31 0a 	call	0x1462	; 0x1462 <printPgmString>
    14c6:	60 91 2f 01 	lds	r22, 0x012F
    14ca:	70 91 30 01 	lds	r23, 0x0130
    14ce:	80 91 31 01 	lds	r24, 0x0131
    14d2:	90 91 32 01 	lds	r25, 0x0132
    14d6:	0e 94 10 09 	call	0x1220	; 0x1220 <printFloat>
//	printPgmString(PSTR("  s[0]:")); printFloat(sensor.sample[0]);
	printPgmString(PSTR("  StdDev:")); printFloat(sensor.std_dev);
    14da:	8a ed       	ldi	r24, 0xDA	; 218
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 31 0a 	call	0x1462	; 0x1462 <printPgmString>
    14e2:	60 91 71 01 	lds	r22, 0x0171
    14e6:	70 91 72 01 	lds	r23, 0x0172
    14ea:	80 91 73 01 	lds	r24, 0x0173
    14ee:	90 91 74 01 	lds	r25, 0x0174
    14f2:	0e 94 10 09 	call	0x1220	; 0x1220 <printFloat>
//	printPgmString(PSTR("  Samples:")); printFloat(sensor.samples);
	printPgmString(PSTR("  Err:")); printFloat(pid.error);
    14f6:	83 ed       	ldi	r24, 0xD3	; 211
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 31 0a 	call	0x1462	; 0x1462 <printPgmString>
    14fe:	60 91 3b 01 	lds	r22, 0x013B
    1502:	70 91 3c 01 	lds	r23, 0x013C
    1506:	80 91 3d 01 	lds	r24, 0x013D
    150a:	90 91 3e 01 	lds	r25, 0x013E
    150e:	0e 94 10 09 	call	0x1220	; 0x1220 <printFloat>
	printPgmString(PSTR("  I:")); printFloat(pid.integral);
    1512:	8e ec       	ldi	r24, 0xCE	; 206
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 31 0a 	call	0x1462	; 0x1462 <printPgmString>
    151a:	60 91 43 01 	lds	r22, 0x0143
    151e:	70 91 44 01 	lds	r23, 0x0144
    1522:	80 91 45 01 	lds	r24, 0x0145
    1526:	90 91 46 01 	lds	r25, 0x0146
    152a:	0e 94 10 09 	call	0x1220	; 0x1220 <printFloat>
//	printPgmString(PSTR("  D:")); printFloat(pid.derivative);
//	printPgmString(PSTR("  Hy:")); printFloat(heater.hysteresis);

	printPgmString((PGM_P)pgm_read_word(&msg_hstate[heater.state]));
    152e:	80 91 07 01 	lds	r24, 0x0107
    1532:	e8 2f       	mov	r30, r24
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	ee 0f       	add	r30, r30
    1538:	ff 1f       	adc	r31, r31
    153a:	ec 53       	subi	r30, 0x3C	; 60
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	85 91       	lpm	r24, Z+
    1540:	94 91       	lpm	r25, Z+
    1542:	0e 94 31 0a 	call	0x1462	; 0x1462 <printPgmString>
//	printPgmString((PGM_P)pgm_read_word(&msg_scode[sensor.code]));

	printPgmString(PSTR("\n")); 
    1546:	8c ec       	ldi	r24, 0xCC	; 204
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 31 0a 	call	0x1462	; 0x1462 <printPgmString>

}
    154e:	08 95       	ret

00001550 <__subsf3>:
    1550:	50 58       	subi	r21, 0x80	; 128

00001552 <__addsf3>:
    1552:	bb 27       	eor	r27, r27
    1554:	aa 27       	eor	r26, r26
    1556:	0e d0       	rcall	.+28     	; 0x1574 <__addsf3x>
    1558:	75 c1       	rjmp	.+746    	; 0x1844 <__fp_round>
    155a:	66 d1       	rcall	.+716    	; 0x1828 <__fp_pscA>
    155c:	30 f0       	brcs	.+12     	; 0x156a <__addsf3+0x18>
    155e:	6b d1       	rcall	.+726    	; 0x1836 <__fp_pscB>
    1560:	20 f0       	brcs	.+8      	; 0x156a <__addsf3+0x18>
    1562:	31 f4       	brne	.+12     	; 0x1570 <__addsf3+0x1e>
    1564:	9f 3f       	cpi	r25, 0xFF	; 255
    1566:	11 f4       	brne	.+4      	; 0x156c <__addsf3+0x1a>
    1568:	1e f4       	brtc	.+6      	; 0x1570 <__addsf3+0x1e>
    156a:	5b c1       	rjmp	.+694    	; 0x1822 <__fp_nan>
    156c:	0e f4       	brtc	.+2      	; 0x1570 <__addsf3+0x1e>
    156e:	e0 95       	com	r30
    1570:	e7 fb       	bst	r30, 7
    1572:	51 c1       	rjmp	.+674    	; 0x1816 <__fp_inf>

00001574 <__addsf3x>:
    1574:	e9 2f       	mov	r30, r25
    1576:	77 d1       	rcall	.+750    	; 0x1866 <__fp_split3>
    1578:	80 f3       	brcs	.-32     	; 0x155a <__addsf3+0x8>
    157a:	ba 17       	cp	r27, r26
    157c:	62 07       	cpc	r22, r18
    157e:	73 07       	cpc	r23, r19
    1580:	84 07       	cpc	r24, r20
    1582:	95 07       	cpc	r25, r21
    1584:	18 f0       	brcs	.+6      	; 0x158c <__addsf3x+0x18>
    1586:	71 f4       	brne	.+28     	; 0x15a4 <__addsf3x+0x30>
    1588:	9e f5       	brtc	.+102    	; 0x15f0 <__addsf3x+0x7c>
    158a:	8f c1       	rjmp	.+798    	; 0x18aa <__fp_zero>
    158c:	0e f4       	brtc	.+2      	; 0x1590 <__addsf3x+0x1c>
    158e:	e0 95       	com	r30
    1590:	0b 2e       	mov	r0, r27
    1592:	ba 2f       	mov	r27, r26
    1594:	a0 2d       	mov	r26, r0
    1596:	0b 01       	movw	r0, r22
    1598:	b9 01       	movw	r22, r18
    159a:	90 01       	movw	r18, r0
    159c:	0c 01       	movw	r0, r24
    159e:	ca 01       	movw	r24, r20
    15a0:	a0 01       	movw	r20, r0
    15a2:	11 24       	eor	r1, r1
    15a4:	ff 27       	eor	r31, r31
    15a6:	59 1b       	sub	r21, r25
    15a8:	99 f0       	breq	.+38     	; 0x15d0 <__addsf3x+0x5c>
    15aa:	59 3f       	cpi	r21, 0xF9	; 249
    15ac:	50 f4       	brcc	.+20     	; 0x15c2 <__addsf3x+0x4e>
    15ae:	50 3e       	cpi	r21, 0xE0	; 224
    15b0:	68 f1       	brcs	.+90     	; 0x160c <__addsf3x+0x98>
    15b2:	1a 16       	cp	r1, r26
    15b4:	f0 40       	sbci	r31, 0x00	; 0
    15b6:	a2 2f       	mov	r26, r18
    15b8:	23 2f       	mov	r18, r19
    15ba:	34 2f       	mov	r19, r20
    15bc:	44 27       	eor	r20, r20
    15be:	58 5f       	subi	r21, 0xF8	; 248
    15c0:	f3 cf       	rjmp	.-26     	; 0x15a8 <__addsf3x+0x34>
    15c2:	46 95       	lsr	r20
    15c4:	37 95       	ror	r19
    15c6:	27 95       	ror	r18
    15c8:	a7 95       	ror	r26
    15ca:	f0 40       	sbci	r31, 0x00	; 0
    15cc:	53 95       	inc	r21
    15ce:	c9 f7       	brne	.-14     	; 0x15c2 <__addsf3x+0x4e>
    15d0:	7e f4       	brtc	.+30     	; 0x15f0 <__addsf3x+0x7c>
    15d2:	1f 16       	cp	r1, r31
    15d4:	ba 0b       	sbc	r27, r26
    15d6:	62 0b       	sbc	r22, r18
    15d8:	73 0b       	sbc	r23, r19
    15da:	84 0b       	sbc	r24, r20
    15dc:	ba f0       	brmi	.+46     	; 0x160c <__addsf3x+0x98>
    15de:	91 50       	subi	r25, 0x01	; 1
    15e0:	a1 f0       	breq	.+40     	; 0x160a <__addsf3x+0x96>
    15e2:	ff 0f       	add	r31, r31
    15e4:	bb 1f       	adc	r27, r27
    15e6:	66 1f       	adc	r22, r22
    15e8:	77 1f       	adc	r23, r23
    15ea:	88 1f       	adc	r24, r24
    15ec:	c2 f7       	brpl	.-16     	; 0x15de <__addsf3x+0x6a>
    15ee:	0e c0       	rjmp	.+28     	; 0x160c <__addsf3x+0x98>
    15f0:	ba 0f       	add	r27, r26
    15f2:	62 1f       	adc	r22, r18
    15f4:	73 1f       	adc	r23, r19
    15f6:	84 1f       	adc	r24, r20
    15f8:	48 f4       	brcc	.+18     	; 0x160c <__addsf3x+0x98>
    15fa:	87 95       	ror	r24
    15fc:	77 95       	ror	r23
    15fe:	67 95       	ror	r22
    1600:	b7 95       	ror	r27
    1602:	f7 95       	ror	r31
    1604:	9e 3f       	cpi	r25, 0xFE	; 254
    1606:	08 f0       	brcs	.+2      	; 0x160a <__addsf3x+0x96>
    1608:	b3 cf       	rjmp	.-154    	; 0x1570 <__addsf3+0x1e>
    160a:	93 95       	inc	r25
    160c:	88 0f       	add	r24, r24
    160e:	08 f0       	brcs	.+2      	; 0x1612 <__addsf3x+0x9e>
    1610:	99 27       	eor	r25, r25
    1612:	ee 0f       	add	r30, r30
    1614:	97 95       	ror	r25
    1616:	87 95       	ror	r24
    1618:	08 95       	ret

0000161a <__cmpsf2>:
    161a:	d9 d0       	rcall	.+434    	; 0x17ce <__fp_cmp>
    161c:	08 f4       	brcc	.+2      	; 0x1620 <__cmpsf2+0x6>
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	08 95       	ret

00001622 <__divsf3>:
    1622:	0c d0       	rcall	.+24     	; 0x163c <__divsf3x>
    1624:	0f c1       	rjmp	.+542    	; 0x1844 <__fp_round>
    1626:	07 d1       	rcall	.+526    	; 0x1836 <__fp_pscB>
    1628:	40 f0       	brcs	.+16     	; 0x163a <__divsf3+0x18>
    162a:	fe d0       	rcall	.+508    	; 0x1828 <__fp_pscA>
    162c:	30 f0       	brcs	.+12     	; 0x163a <__divsf3+0x18>
    162e:	21 f4       	brne	.+8      	; 0x1638 <__divsf3+0x16>
    1630:	5f 3f       	cpi	r21, 0xFF	; 255
    1632:	19 f0       	breq	.+6      	; 0x163a <__divsf3+0x18>
    1634:	f0 c0       	rjmp	.+480    	; 0x1816 <__fp_inf>
    1636:	51 11       	cpse	r21, r1
    1638:	39 c1       	rjmp	.+626    	; 0x18ac <__fp_szero>
    163a:	f3 c0       	rjmp	.+486    	; 0x1822 <__fp_nan>

0000163c <__divsf3x>:
    163c:	14 d1       	rcall	.+552    	; 0x1866 <__fp_split3>
    163e:	98 f3       	brcs	.-26     	; 0x1626 <__divsf3+0x4>

00001640 <__divsf3_pse>:
    1640:	99 23       	and	r25, r25
    1642:	c9 f3       	breq	.-14     	; 0x1636 <__divsf3+0x14>
    1644:	55 23       	and	r21, r21
    1646:	b1 f3       	breq	.-20     	; 0x1634 <__divsf3+0x12>
    1648:	95 1b       	sub	r25, r21
    164a:	55 0b       	sbc	r21, r21
    164c:	bb 27       	eor	r27, r27
    164e:	aa 27       	eor	r26, r26
    1650:	62 17       	cp	r22, r18
    1652:	73 07       	cpc	r23, r19
    1654:	84 07       	cpc	r24, r20
    1656:	38 f0       	brcs	.+14     	; 0x1666 <__divsf3_pse+0x26>
    1658:	9f 5f       	subi	r25, 0xFF	; 255
    165a:	5f 4f       	sbci	r21, 0xFF	; 255
    165c:	22 0f       	add	r18, r18
    165e:	33 1f       	adc	r19, r19
    1660:	44 1f       	adc	r20, r20
    1662:	aa 1f       	adc	r26, r26
    1664:	a9 f3       	breq	.-22     	; 0x1650 <__divsf3_pse+0x10>
    1666:	33 d0       	rcall	.+102    	; 0x16ce <__divsf3_pse+0x8e>
    1668:	0e 2e       	mov	r0, r30
    166a:	3a f0       	brmi	.+14     	; 0x167a <__divsf3_pse+0x3a>
    166c:	e0 e8       	ldi	r30, 0x80	; 128
    166e:	30 d0       	rcall	.+96     	; 0x16d0 <__divsf3_pse+0x90>
    1670:	91 50       	subi	r25, 0x01	; 1
    1672:	50 40       	sbci	r21, 0x00	; 0
    1674:	e6 95       	lsr	r30
    1676:	00 1c       	adc	r0, r0
    1678:	ca f7       	brpl	.-14     	; 0x166c <__divsf3_pse+0x2c>
    167a:	29 d0       	rcall	.+82     	; 0x16ce <__divsf3_pse+0x8e>
    167c:	fe 2f       	mov	r31, r30
    167e:	27 d0       	rcall	.+78     	; 0x16ce <__divsf3_pse+0x8e>
    1680:	66 0f       	add	r22, r22
    1682:	77 1f       	adc	r23, r23
    1684:	88 1f       	adc	r24, r24
    1686:	bb 1f       	adc	r27, r27
    1688:	26 17       	cp	r18, r22
    168a:	37 07       	cpc	r19, r23
    168c:	48 07       	cpc	r20, r24
    168e:	ab 07       	cpc	r26, r27
    1690:	b0 e8       	ldi	r27, 0x80	; 128
    1692:	09 f0       	breq	.+2      	; 0x1696 <__divsf3_pse+0x56>
    1694:	bb 0b       	sbc	r27, r27
    1696:	80 2d       	mov	r24, r0
    1698:	bf 01       	movw	r22, r30
    169a:	ff 27       	eor	r31, r31
    169c:	93 58       	subi	r25, 0x83	; 131
    169e:	5f 4f       	sbci	r21, 0xFF	; 255
    16a0:	2a f0       	brmi	.+10     	; 0x16ac <__divsf3_pse+0x6c>
    16a2:	9e 3f       	cpi	r25, 0xFE	; 254
    16a4:	51 05       	cpc	r21, r1
    16a6:	68 f0       	brcs	.+26     	; 0x16c2 <__divsf3_pse+0x82>
    16a8:	b6 c0       	rjmp	.+364    	; 0x1816 <__fp_inf>
    16aa:	00 c1       	rjmp	.+512    	; 0x18ac <__fp_szero>
    16ac:	5f 3f       	cpi	r21, 0xFF	; 255
    16ae:	ec f3       	brlt	.-6      	; 0x16aa <__divsf3_pse+0x6a>
    16b0:	98 3e       	cpi	r25, 0xE8	; 232
    16b2:	dc f3       	brlt	.-10     	; 0x16aa <__divsf3_pse+0x6a>
    16b4:	86 95       	lsr	r24
    16b6:	77 95       	ror	r23
    16b8:	67 95       	ror	r22
    16ba:	b7 95       	ror	r27
    16bc:	f7 95       	ror	r31
    16be:	9f 5f       	subi	r25, 0xFF	; 255
    16c0:	c9 f7       	brne	.-14     	; 0x16b4 <__divsf3_pse+0x74>
    16c2:	88 0f       	add	r24, r24
    16c4:	91 1d       	adc	r25, r1
    16c6:	96 95       	lsr	r25
    16c8:	87 95       	ror	r24
    16ca:	97 f9       	bld	r25, 7
    16cc:	08 95       	ret
    16ce:	e1 e0       	ldi	r30, 0x01	; 1
    16d0:	66 0f       	add	r22, r22
    16d2:	77 1f       	adc	r23, r23
    16d4:	88 1f       	adc	r24, r24
    16d6:	bb 1f       	adc	r27, r27
    16d8:	62 17       	cp	r22, r18
    16da:	73 07       	cpc	r23, r19
    16dc:	84 07       	cpc	r24, r20
    16de:	ba 07       	cpc	r27, r26
    16e0:	20 f0       	brcs	.+8      	; 0x16ea <__divsf3_pse+0xaa>
    16e2:	62 1b       	sub	r22, r18
    16e4:	73 0b       	sbc	r23, r19
    16e6:	84 0b       	sbc	r24, r20
    16e8:	ba 0b       	sbc	r27, r26
    16ea:	ee 1f       	adc	r30, r30
    16ec:	88 f7       	brcc	.-30     	; 0x16d0 <__divsf3_pse+0x90>
    16ee:	e0 95       	com	r30
    16f0:	08 95       	ret

000016f2 <__fixsfsi>:
    16f2:	04 d0       	rcall	.+8      	; 0x16fc <__fixunssfsi>
    16f4:	68 94       	set
    16f6:	b1 11       	cpse	r27, r1
    16f8:	d9 c0       	rjmp	.+434    	; 0x18ac <__fp_szero>
    16fa:	08 95       	ret

000016fc <__fixunssfsi>:
    16fc:	bc d0       	rcall	.+376    	; 0x1876 <__fp_splitA>
    16fe:	88 f0       	brcs	.+34     	; 0x1722 <__fixunssfsi+0x26>
    1700:	9f 57       	subi	r25, 0x7F	; 127
    1702:	90 f0       	brcs	.+36     	; 0x1728 <__fixunssfsi+0x2c>
    1704:	b9 2f       	mov	r27, r25
    1706:	99 27       	eor	r25, r25
    1708:	b7 51       	subi	r27, 0x17	; 23
    170a:	a0 f0       	brcs	.+40     	; 0x1734 <__fixunssfsi+0x38>
    170c:	d1 f0       	breq	.+52     	; 0x1742 <__fixunssfsi+0x46>
    170e:	66 0f       	add	r22, r22
    1710:	77 1f       	adc	r23, r23
    1712:	88 1f       	adc	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	1a f0       	brmi	.+6      	; 0x171e <__fixunssfsi+0x22>
    1718:	ba 95       	dec	r27
    171a:	c9 f7       	brne	.-14     	; 0x170e <__fixunssfsi+0x12>
    171c:	12 c0       	rjmp	.+36     	; 0x1742 <__fixunssfsi+0x46>
    171e:	b1 30       	cpi	r27, 0x01	; 1
    1720:	81 f0       	breq	.+32     	; 0x1742 <__fixunssfsi+0x46>
    1722:	c3 d0       	rcall	.+390    	; 0x18aa <__fp_zero>
    1724:	b1 e0       	ldi	r27, 0x01	; 1
    1726:	08 95       	ret
    1728:	c0 c0       	rjmp	.+384    	; 0x18aa <__fp_zero>
    172a:	67 2f       	mov	r22, r23
    172c:	78 2f       	mov	r23, r24
    172e:	88 27       	eor	r24, r24
    1730:	b8 5f       	subi	r27, 0xF8	; 248
    1732:	39 f0       	breq	.+14     	; 0x1742 <__fixunssfsi+0x46>
    1734:	b9 3f       	cpi	r27, 0xF9	; 249
    1736:	cc f3       	brlt	.-14     	; 0x172a <__fixunssfsi+0x2e>
    1738:	86 95       	lsr	r24
    173a:	77 95       	ror	r23
    173c:	67 95       	ror	r22
    173e:	b3 95       	inc	r27
    1740:	d9 f7       	brne	.-10     	; 0x1738 <__fixunssfsi+0x3c>
    1742:	3e f4       	brtc	.+14     	; 0x1752 <__fixunssfsi+0x56>
    1744:	90 95       	com	r25
    1746:	80 95       	com	r24
    1748:	70 95       	com	r23
    174a:	61 95       	neg	r22
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	8f 4f       	sbci	r24, 0xFF	; 255
    1750:	9f 4f       	sbci	r25, 0xFF	; 255
    1752:	08 95       	ret

00001754 <__floatunsisf>:
    1754:	e8 94       	clt
    1756:	09 c0       	rjmp	.+18     	; 0x176a <__floatsisf+0x12>

00001758 <__floatsisf>:
    1758:	97 fb       	bst	r25, 7
    175a:	3e f4       	brtc	.+14     	; 0x176a <__floatsisf+0x12>
    175c:	90 95       	com	r25
    175e:	80 95       	com	r24
    1760:	70 95       	com	r23
    1762:	61 95       	neg	r22
    1764:	7f 4f       	sbci	r23, 0xFF	; 255
    1766:	8f 4f       	sbci	r24, 0xFF	; 255
    1768:	9f 4f       	sbci	r25, 0xFF	; 255
    176a:	99 23       	and	r25, r25
    176c:	a9 f0       	breq	.+42     	; 0x1798 <__floatsisf+0x40>
    176e:	f9 2f       	mov	r31, r25
    1770:	96 e9       	ldi	r25, 0x96	; 150
    1772:	bb 27       	eor	r27, r27
    1774:	93 95       	inc	r25
    1776:	f6 95       	lsr	r31
    1778:	87 95       	ror	r24
    177a:	77 95       	ror	r23
    177c:	67 95       	ror	r22
    177e:	b7 95       	ror	r27
    1780:	f1 11       	cpse	r31, r1
    1782:	f8 cf       	rjmp	.-16     	; 0x1774 <__floatsisf+0x1c>
    1784:	fa f4       	brpl	.+62     	; 0x17c4 <__floatsisf+0x6c>
    1786:	bb 0f       	add	r27, r27
    1788:	11 f4       	brne	.+4      	; 0x178e <__floatsisf+0x36>
    178a:	60 ff       	sbrs	r22, 0
    178c:	1b c0       	rjmp	.+54     	; 0x17c4 <__floatsisf+0x6c>
    178e:	6f 5f       	subi	r22, 0xFF	; 255
    1790:	7f 4f       	sbci	r23, 0xFF	; 255
    1792:	8f 4f       	sbci	r24, 0xFF	; 255
    1794:	9f 4f       	sbci	r25, 0xFF	; 255
    1796:	16 c0       	rjmp	.+44     	; 0x17c4 <__floatsisf+0x6c>
    1798:	88 23       	and	r24, r24
    179a:	11 f0       	breq	.+4      	; 0x17a0 <__floatsisf+0x48>
    179c:	96 e9       	ldi	r25, 0x96	; 150
    179e:	11 c0       	rjmp	.+34     	; 0x17c2 <__floatsisf+0x6a>
    17a0:	77 23       	and	r23, r23
    17a2:	21 f0       	breq	.+8      	; 0x17ac <__floatsisf+0x54>
    17a4:	9e e8       	ldi	r25, 0x8E	; 142
    17a6:	87 2f       	mov	r24, r23
    17a8:	76 2f       	mov	r23, r22
    17aa:	05 c0       	rjmp	.+10     	; 0x17b6 <__floatsisf+0x5e>
    17ac:	66 23       	and	r22, r22
    17ae:	71 f0       	breq	.+28     	; 0x17cc <__floatsisf+0x74>
    17b0:	96 e8       	ldi	r25, 0x86	; 134
    17b2:	86 2f       	mov	r24, r22
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	2a f0       	brmi	.+10     	; 0x17c4 <__floatsisf+0x6c>
    17ba:	9a 95       	dec	r25
    17bc:	66 0f       	add	r22, r22
    17be:	77 1f       	adc	r23, r23
    17c0:	88 1f       	adc	r24, r24
    17c2:	da f7       	brpl	.-10     	; 0x17ba <__floatsisf+0x62>
    17c4:	88 0f       	add	r24, r24
    17c6:	96 95       	lsr	r25
    17c8:	87 95       	ror	r24
    17ca:	97 f9       	bld	r25, 7
    17cc:	08 95       	ret

000017ce <__fp_cmp>:
    17ce:	99 0f       	add	r25, r25
    17d0:	00 08       	sbc	r0, r0
    17d2:	55 0f       	add	r21, r21
    17d4:	aa 0b       	sbc	r26, r26
    17d6:	e0 e8       	ldi	r30, 0x80	; 128
    17d8:	fe ef       	ldi	r31, 0xFE	; 254
    17da:	16 16       	cp	r1, r22
    17dc:	17 06       	cpc	r1, r23
    17de:	e8 07       	cpc	r30, r24
    17e0:	f9 07       	cpc	r31, r25
    17e2:	c0 f0       	brcs	.+48     	; 0x1814 <__fp_cmp+0x46>
    17e4:	12 16       	cp	r1, r18
    17e6:	13 06       	cpc	r1, r19
    17e8:	e4 07       	cpc	r30, r20
    17ea:	f5 07       	cpc	r31, r21
    17ec:	98 f0       	brcs	.+38     	; 0x1814 <__fp_cmp+0x46>
    17ee:	62 1b       	sub	r22, r18
    17f0:	73 0b       	sbc	r23, r19
    17f2:	84 0b       	sbc	r24, r20
    17f4:	95 0b       	sbc	r25, r21
    17f6:	39 f4       	brne	.+14     	; 0x1806 <__fp_cmp+0x38>
    17f8:	0a 26       	eor	r0, r26
    17fa:	61 f0       	breq	.+24     	; 0x1814 <__fp_cmp+0x46>
    17fc:	23 2b       	or	r18, r19
    17fe:	24 2b       	or	r18, r20
    1800:	25 2b       	or	r18, r21
    1802:	21 f4       	brne	.+8      	; 0x180c <__fp_cmp+0x3e>
    1804:	08 95       	ret
    1806:	0a 26       	eor	r0, r26
    1808:	09 f4       	brne	.+2      	; 0x180c <__fp_cmp+0x3e>
    180a:	a1 40       	sbci	r26, 0x01	; 1
    180c:	a6 95       	lsr	r26
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	81 1d       	adc	r24, r1
    1812:	81 1d       	adc	r24, r1
    1814:	08 95       	ret

00001816 <__fp_inf>:
    1816:	97 f9       	bld	r25, 7
    1818:	9f 67       	ori	r25, 0x7F	; 127
    181a:	80 e8       	ldi	r24, 0x80	; 128
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	08 95       	ret

00001822 <__fp_nan>:
    1822:	9f ef       	ldi	r25, 0xFF	; 255
    1824:	80 ec       	ldi	r24, 0xC0	; 192
    1826:	08 95       	ret

00001828 <__fp_pscA>:
    1828:	00 24       	eor	r0, r0
    182a:	0a 94       	dec	r0
    182c:	16 16       	cp	r1, r22
    182e:	17 06       	cpc	r1, r23
    1830:	18 06       	cpc	r1, r24
    1832:	09 06       	cpc	r0, r25
    1834:	08 95       	ret

00001836 <__fp_pscB>:
    1836:	00 24       	eor	r0, r0
    1838:	0a 94       	dec	r0
    183a:	12 16       	cp	r1, r18
    183c:	13 06       	cpc	r1, r19
    183e:	14 06       	cpc	r1, r20
    1840:	05 06       	cpc	r0, r21
    1842:	08 95       	ret

00001844 <__fp_round>:
    1844:	09 2e       	mov	r0, r25
    1846:	03 94       	inc	r0
    1848:	00 0c       	add	r0, r0
    184a:	11 f4       	brne	.+4      	; 0x1850 <__fp_round+0xc>
    184c:	88 23       	and	r24, r24
    184e:	52 f0       	brmi	.+20     	; 0x1864 <__fp_round+0x20>
    1850:	bb 0f       	add	r27, r27
    1852:	40 f4       	brcc	.+16     	; 0x1864 <__fp_round+0x20>
    1854:	bf 2b       	or	r27, r31
    1856:	11 f4       	brne	.+4      	; 0x185c <__fp_round+0x18>
    1858:	60 ff       	sbrs	r22, 0
    185a:	04 c0       	rjmp	.+8      	; 0x1864 <__fp_round+0x20>
    185c:	6f 5f       	subi	r22, 0xFF	; 255
    185e:	7f 4f       	sbci	r23, 0xFF	; 255
    1860:	8f 4f       	sbci	r24, 0xFF	; 255
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	08 95       	ret

00001866 <__fp_split3>:
    1866:	57 fd       	sbrc	r21, 7
    1868:	90 58       	subi	r25, 0x80	; 128
    186a:	44 0f       	add	r20, r20
    186c:	55 1f       	adc	r21, r21
    186e:	59 f0       	breq	.+22     	; 0x1886 <__fp_splitA+0x10>
    1870:	5f 3f       	cpi	r21, 0xFF	; 255
    1872:	71 f0       	breq	.+28     	; 0x1890 <__fp_splitA+0x1a>
    1874:	47 95       	ror	r20

00001876 <__fp_splitA>:
    1876:	88 0f       	add	r24, r24
    1878:	97 fb       	bst	r25, 7
    187a:	99 1f       	adc	r25, r25
    187c:	61 f0       	breq	.+24     	; 0x1896 <__fp_splitA+0x20>
    187e:	9f 3f       	cpi	r25, 0xFF	; 255
    1880:	79 f0       	breq	.+30     	; 0x18a0 <__fp_splitA+0x2a>
    1882:	87 95       	ror	r24
    1884:	08 95       	ret
    1886:	12 16       	cp	r1, r18
    1888:	13 06       	cpc	r1, r19
    188a:	14 06       	cpc	r1, r20
    188c:	55 1f       	adc	r21, r21
    188e:	f2 cf       	rjmp	.-28     	; 0x1874 <__fp_split3+0xe>
    1890:	46 95       	lsr	r20
    1892:	f1 df       	rcall	.-30     	; 0x1876 <__fp_splitA>
    1894:	08 c0       	rjmp	.+16     	; 0x18a6 <__fp_splitA+0x30>
    1896:	16 16       	cp	r1, r22
    1898:	17 06       	cpc	r1, r23
    189a:	18 06       	cpc	r1, r24
    189c:	99 1f       	adc	r25, r25
    189e:	f1 cf       	rjmp	.-30     	; 0x1882 <__fp_splitA+0xc>
    18a0:	86 95       	lsr	r24
    18a2:	71 05       	cpc	r23, r1
    18a4:	61 05       	cpc	r22, r1
    18a6:	08 94       	sec
    18a8:	08 95       	ret

000018aa <__fp_zero>:
    18aa:	e8 94       	clt

000018ac <__fp_szero>:
    18ac:	bb 27       	eor	r27, r27
    18ae:	66 27       	eor	r22, r22
    18b0:	77 27       	eor	r23, r23
    18b2:	cb 01       	movw	r24, r22
    18b4:	97 f9       	bld	r25, 7
    18b6:	08 95       	ret

000018b8 <__gesf2>:
    18b8:	8a df       	rcall	.-236    	; 0x17ce <__fp_cmp>
    18ba:	08 f4       	brcc	.+2      	; 0x18be <__gesf2+0x6>
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	08 95       	ret

000018c0 <__mulsf3>:
    18c0:	0b d0       	rcall	.+22     	; 0x18d8 <__mulsf3x>
    18c2:	c0 cf       	rjmp	.-128    	; 0x1844 <__fp_round>
    18c4:	b1 df       	rcall	.-158    	; 0x1828 <__fp_pscA>
    18c6:	28 f0       	brcs	.+10     	; 0x18d2 <__mulsf3+0x12>
    18c8:	b6 df       	rcall	.-148    	; 0x1836 <__fp_pscB>
    18ca:	18 f0       	brcs	.+6      	; 0x18d2 <__mulsf3+0x12>
    18cc:	95 23       	and	r25, r21
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <__mulsf3+0x12>
    18d0:	a2 cf       	rjmp	.-188    	; 0x1816 <__fp_inf>
    18d2:	a7 cf       	rjmp	.-178    	; 0x1822 <__fp_nan>
    18d4:	11 24       	eor	r1, r1
    18d6:	ea cf       	rjmp	.-44     	; 0x18ac <__fp_szero>

000018d8 <__mulsf3x>:
    18d8:	c6 df       	rcall	.-116    	; 0x1866 <__fp_split3>
    18da:	a0 f3       	brcs	.-24     	; 0x18c4 <__mulsf3+0x4>

000018dc <__mulsf3_pse>:
    18dc:	95 9f       	mul	r25, r21
    18de:	d1 f3       	breq	.-12     	; 0x18d4 <__mulsf3+0x14>
    18e0:	95 0f       	add	r25, r21
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	55 1f       	adc	r21, r21
    18e6:	62 9f       	mul	r22, r18
    18e8:	f0 01       	movw	r30, r0
    18ea:	72 9f       	mul	r23, r18
    18ec:	bb 27       	eor	r27, r27
    18ee:	f0 0d       	add	r31, r0
    18f0:	b1 1d       	adc	r27, r1
    18f2:	63 9f       	mul	r22, r19
    18f4:	aa 27       	eor	r26, r26
    18f6:	f0 0d       	add	r31, r0
    18f8:	b1 1d       	adc	r27, r1
    18fa:	aa 1f       	adc	r26, r26
    18fc:	64 9f       	mul	r22, r20
    18fe:	66 27       	eor	r22, r22
    1900:	b0 0d       	add	r27, r0
    1902:	a1 1d       	adc	r26, r1
    1904:	66 1f       	adc	r22, r22
    1906:	82 9f       	mul	r24, r18
    1908:	22 27       	eor	r18, r18
    190a:	b0 0d       	add	r27, r0
    190c:	a1 1d       	adc	r26, r1
    190e:	62 1f       	adc	r22, r18
    1910:	73 9f       	mul	r23, r19
    1912:	b0 0d       	add	r27, r0
    1914:	a1 1d       	adc	r26, r1
    1916:	62 1f       	adc	r22, r18
    1918:	83 9f       	mul	r24, r19
    191a:	a0 0d       	add	r26, r0
    191c:	61 1d       	adc	r22, r1
    191e:	22 1f       	adc	r18, r18
    1920:	74 9f       	mul	r23, r20
    1922:	33 27       	eor	r19, r19
    1924:	a0 0d       	add	r26, r0
    1926:	61 1d       	adc	r22, r1
    1928:	23 1f       	adc	r18, r19
    192a:	84 9f       	mul	r24, r20
    192c:	60 0d       	add	r22, r0
    192e:	21 1d       	adc	r18, r1
    1930:	82 2f       	mov	r24, r18
    1932:	76 2f       	mov	r23, r22
    1934:	6a 2f       	mov	r22, r26
    1936:	11 24       	eor	r1, r1
    1938:	9f 57       	subi	r25, 0x7F	; 127
    193a:	50 40       	sbci	r21, 0x00	; 0
    193c:	8a f0       	brmi	.+34     	; 0x1960 <__mulsf3_pse+0x84>
    193e:	e1 f0       	breq	.+56     	; 0x1978 <__mulsf3_pse+0x9c>
    1940:	88 23       	and	r24, r24
    1942:	4a f0       	brmi	.+18     	; 0x1956 <__mulsf3_pse+0x7a>
    1944:	ee 0f       	add	r30, r30
    1946:	ff 1f       	adc	r31, r31
    1948:	bb 1f       	adc	r27, r27
    194a:	66 1f       	adc	r22, r22
    194c:	77 1f       	adc	r23, r23
    194e:	88 1f       	adc	r24, r24
    1950:	91 50       	subi	r25, 0x01	; 1
    1952:	50 40       	sbci	r21, 0x00	; 0
    1954:	a9 f7       	brne	.-22     	; 0x1940 <__mulsf3_pse+0x64>
    1956:	9e 3f       	cpi	r25, 0xFE	; 254
    1958:	51 05       	cpc	r21, r1
    195a:	70 f0       	brcs	.+28     	; 0x1978 <__mulsf3_pse+0x9c>
    195c:	5c cf       	rjmp	.-328    	; 0x1816 <__fp_inf>
    195e:	a6 cf       	rjmp	.-180    	; 0x18ac <__fp_szero>
    1960:	5f 3f       	cpi	r21, 0xFF	; 255
    1962:	ec f3       	brlt	.-6      	; 0x195e <__mulsf3_pse+0x82>
    1964:	98 3e       	cpi	r25, 0xE8	; 232
    1966:	dc f3       	brlt	.-10     	; 0x195e <__mulsf3_pse+0x82>
    1968:	86 95       	lsr	r24
    196a:	77 95       	ror	r23
    196c:	67 95       	ror	r22
    196e:	b7 95       	ror	r27
    1970:	f7 95       	ror	r31
    1972:	e7 95       	ror	r30
    1974:	9f 5f       	subi	r25, 0xFF	; 255
    1976:	c1 f7       	brne	.-16     	; 0x1968 <__mulsf3_pse+0x8c>
    1978:	fe 2b       	or	r31, r30
    197a:	88 0f       	add	r24, r24
    197c:	91 1d       	adc	r25, r1
    197e:	96 95       	lsr	r25
    1980:	87 95       	ror	r24
    1982:	97 f9       	bld	r25, 7
    1984:	08 95       	ret
    1986:	11 f4       	brne	.+4      	; 0x198c <__mulsf3_pse+0xb0>
    1988:	0e f4       	brtc	.+2      	; 0x198c <__mulsf3_pse+0xb0>
    198a:	4b cf       	rjmp	.-362    	; 0x1822 <__fp_nan>
    198c:	41 c0       	rjmp	.+130    	; 0x1a10 <__fp_mpack>

0000198e <sqrt>:
    198e:	73 df       	rcall	.-282    	; 0x1876 <__fp_splitA>
    1990:	d0 f3       	brcs	.-12     	; 0x1986 <__mulsf3_pse+0xaa>
    1992:	99 23       	and	r25, r25
    1994:	d9 f3       	breq	.-10     	; 0x198c <__mulsf3_pse+0xb0>
    1996:	ce f3       	brts	.-14     	; 0x198a <__mulsf3_pse+0xae>
    1998:	9f 57       	subi	r25, 0x7F	; 127
    199a:	55 0b       	sbc	r21, r21
    199c:	87 ff       	sbrs	r24, 7
    199e:	46 d0       	rcall	.+140    	; 0x1a2c <__fp_norm2>
    19a0:	00 24       	eor	r0, r0
    19a2:	a0 e6       	ldi	r26, 0x60	; 96
    19a4:	40 ea       	ldi	r20, 0xA0	; 160
    19a6:	90 01       	movw	r18, r0
    19a8:	80 58       	subi	r24, 0x80	; 128
    19aa:	56 95       	lsr	r21
    19ac:	97 95       	ror	r25
    19ae:	28 f4       	brcc	.+10     	; 0x19ba <sqrt+0x2c>
    19b0:	80 5c       	subi	r24, 0xC0	; 192
    19b2:	66 0f       	add	r22, r22
    19b4:	77 1f       	adc	r23, r23
    19b6:	88 1f       	adc	r24, r24
    19b8:	20 f0       	brcs	.+8      	; 0x19c2 <sqrt+0x34>
    19ba:	26 17       	cp	r18, r22
    19bc:	37 07       	cpc	r19, r23
    19be:	48 07       	cpc	r20, r24
    19c0:	30 f4       	brcc	.+12     	; 0x19ce <sqrt+0x40>
    19c2:	62 1b       	sub	r22, r18
    19c4:	73 0b       	sbc	r23, r19
    19c6:	84 0b       	sbc	r24, r20
    19c8:	20 29       	or	r18, r0
    19ca:	31 29       	or	r19, r1
    19cc:	4a 2b       	or	r20, r26
    19ce:	a6 95       	lsr	r26
    19d0:	17 94       	ror	r1
    19d2:	07 94       	ror	r0
    19d4:	20 25       	eor	r18, r0
    19d6:	31 25       	eor	r19, r1
    19d8:	4a 27       	eor	r20, r26
    19da:	58 f7       	brcc	.-42     	; 0x19b2 <sqrt+0x24>
    19dc:	66 0f       	add	r22, r22
    19de:	77 1f       	adc	r23, r23
    19e0:	88 1f       	adc	r24, r24
    19e2:	20 f0       	brcs	.+8      	; 0x19ec <sqrt+0x5e>
    19e4:	26 17       	cp	r18, r22
    19e6:	37 07       	cpc	r19, r23
    19e8:	48 07       	cpc	r20, r24
    19ea:	30 f4       	brcc	.+12     	; 0x19f8 <sqrt+0x6a>
    19ec:	62 0b       	sbc	r22, r18
    19ee:	73 0b       	sbc	r23, r19
    19f0:	84 0b       	sbc	r24, r20
    19f2:	20 0d       	add	r18, r0
    19f4:	31 1d       	adc	r19, r1
    19f6:	41 1d       	adc	r20, r1
    19f8:	a0 95       	com	r26
    19fa:	81 f7       	brne	.-32     	; 0x19dc <sqrt+0x4e>
    19fc:	b9 01       	movw	r22, r18
    19fe:	84 2f       	mov	r24, r20
    1a00:	91 58       	subi	r25, 0x81	; 129
    1a02:	88 0f       	add	r24, r24
    1a04:	96 95       	lsr	r25
    1a06:	87 95       	ror	r24
    1a08:	08 95       	ret

00001a0a <square>:
    1a0a:	9b 01       	movw	r18, r22
    1a0c:	ac 01       	movw	r20, r24
    1a0e:	58 cf       	rjmp	.-336    	; 0x18c0 <__mulsf3>

00001a10 <__fp_mpack>:
    1a10:	9f 3f       	cpi	r25, 0xFF	; 255
    1a12:	31 f0       	breq	.+12     	; 0x1a20 <__fp_mpack_finite+0xc>

00001a14 <__fp_mpack_finite>:
    1a14:	91 50       	subi	r25, 0x01	; 1
    1a16:	20 f4       	brcc	.+8      	; 0x1a20 <__fp_mpack_finite+0xc>
    1a18:	87 95       	ror	r24
    1a1a:	77 95       	ror	r23
    1a1c:	67 95       	ror	r22
    1a1e:	b7 95       	ror	r27
    1a20:	88 0f       	add	r24, r24
    1a22:	91 1d       	adc	r25, r1
    1a24:	96 95       	lsr	r25
    1a26:	87 95       	ror	r24
    1a28:	97 f9       	bld	r25, 7
    1a2a:	08 95       	ret

00001a2c <__fp_norm2>:
    1a2c:	91 50       	subi	r25, 0x01	; 1
    1a2e:	50 40       	sbci	r21, 0x00	; 0
    1a30:	66 0f       	add	r22, r22
    1a32:	77 1f       	adc	r23, r23
    1a34:	88 1f       	adc	r24, r24
    1a36:	d2 f7       	brpl	.-12     	; 0x1a2c <__fp_norm2>
    1a38:	08 95       	ret

00001a3a <__udivmodsi4>:
    1a3a:	a1 e2       	ldi	r26, 0x21	; 33
    1a3c:	1a 2e       	mov	r1, r26
    1a3e:	aa 1b       	sub	r26, r26
    1a40:	bb 1b       	sub	r27, r27
    1a42:	fd 01       	movw	r30, r26
    1a44:	0d c0       	rjmp	.+26     	; 0x1a60 <__udivmodsi4_ep>

00001a46 <__udivmodsi4_loop>:
    1a46:	aa 1f       	adc	r26, r26
    1a48:	bb 1f       	adc	r27, r27
    1a4a:	ee 1f       	adc	r30, r30
    1a4c:	ff 1f       	adc	r31, r31
    1a4e:	a2 17       	cp	r26, r18
    1a50:	b3 07       	cpc	r27, r19
    1a52:	e4 07       	cpc	r30, r20
    1a54:	f5 07       	cpc	r31, r21
    1a56:	20 f0       	brcs	.+8      	; 0x1a60 <__udivmodsi4_ep>
    1a58:	a2 1b       	sub	r26, r18
    1a5a:	b3 0b       	sbc	r27, r19
    1a5c:	e4 0b       	sbc	r30, r20
    1a5e:	f5 0b       	sbc	r31, r21

00001a60 <__udivmodsi4_ep>:
    1a60:	66 1f       	adc	r22, r22
    1a62:	77 1f       	adc	r23, r23
    1a64:	88 1f       	adc	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	1a 94       	dec	r1
    1a6a:	69 f7       	brne	.-38     	; 0x1a46 <__udivmodsi4_loop>
    1a6c:	60 95       	com	r22
    1a6e:	70 95       	com	r23
    1a70:	80 95       	com	r24
    1a72:	90 95       	com	r25
    1a74:	9b 01       	movw	r18, r22
    1a76:	ac 01       	movw	r20, r24
    1a78:	bd 01       	movw	r22, r26
    1a7a:	cf 01       	movw	r24, r30
    1a7c:	08 95       	ret

00001a7e <_exit>:
    1a7e:	f8 94       	cli

00001a80 <__stop_program>:
    1a80:	ff cf       	rjmp	.-2      	; 0x1a80 <__stop_program>
