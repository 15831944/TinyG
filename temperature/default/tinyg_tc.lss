
tinyg_tc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ac0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000be  00800100  00800100  00001b34  2**0
                  ALLOC
  2 .debug_aranges 00000080  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000316  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000dc9  00000000  00000000  00001eca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000447  00000000  00000000  00002c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000c58  00000000  00000000  000030da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000300  00000000  00000000  00003d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000912  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
       8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
       c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      40:	0c 94 25 08 	jmp	0x104a	; 0x104a <__vector_16>
      44:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_17>
      48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	ae 3b       	cpi	r26, 0xBE	; 190
      80:	b1 07       	cpc	r27, r17
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
      84:	0e 94 48 00 	call	0x90	; 0x90 <main>
      88:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <_exit>

0000008c <__bad_interrupt>:
      8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
 *
 *	Device and Kinen initialization
 *	Main loop handler
 */
int main(void)
{
      90:	df 93       	push	r29
      92:	cf 93       	push	r28
      94:	cd b7       	in	r28, 0x3d	; 61
      96:	de b7       	in	r29, 0x3e	; 62
	cli();						// initializations
      98:	f8 94       	cli
	kinen_init();				// do this first
      9a:	0e 94 0b 09 	call	0x1216	; 0x1216 <kinen_init>
	device_init();				// handles all the low-level device peripheral inits
      9e:	0e 94 5d 00 	call	0xba	; 0xba <device_init>
	heater_init();				// setup the heater module and subordinate functions
      a2:	0e 94 82 00 	call	0x104	; 0x104 <heater_init>
	sei(); 						// enable interrupts
      a6:	78 94       	sei

	UNIT_TESTS;					// uncomment __UNIT_TEST_TC to enable unit tests

	heater_on(180);				// ++++ turn heater on for testing
      a8:	60 e0       	ldi	r22, 0x00	; 0
      aa:	70 e0       	ldi	r23, 0x00	; 0
      ac:	84 e3       	ldi	r24, 0x34	; 52
      ae:	93 e4       	ldi	r25, 0x43	; 67
      b0:	0e 94 c5 00 	call	0x18a	; 0x18a <heater_on>

	while (true) {				// go to the controller loop and never return
		_controller();
      b4:	0e 94 75 00 	call	0xea	; 0xea <_controller>
      b8:	fd cf       	rjmp	.-6      	; 0xb4 <main+0x24>

000000ba <device_init>:

/*
 * Device Init 
 */
void device_init(void)
{
      ba:	df 93       	push	r29
      bc:	cf 93       	push	r28
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
	DDRB = PORTB_DIR;			// initialize all ports for proper IO function
      c2:	e4 e2       	ldi	r30, 0x24	; 36
      c4:	f0 e0       	ldi	r31, 0x00	; 0
      c6:	80 e1       	ldi	r24, 0x10	; 16
      c8:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
      ca:	e7 e2       	ldi	r30, 0x27	; 39
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
      d0:	ea e2       	ldi	r30, 0x2A	; 42
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	8c e0       	ldi	r24, 0x0C	; 12
      d6:	80 83       	st	Z, r24

	tick_init();
      d8:	0e 94 09 08 	call	0x1012	; 0x1012 <tick_init>
	pwm_init();
      dc:	0e 94 a4 06 	call	0xd48	; 0xd48 <pwm_init>
	adc_init();
      e0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <adc_init>

//	led_on();					// put on the red light [Sting, 1978]
}
      e4:	cf 91       	pop	r28
      e6:	df 91       	pop	r29
      e8:	08 95       	ret

000000ea <_controller>:
 *	start of the list. For any other status code exceution continues down the list
 */

#define	DISPATCH(func) if (func == SC_EAGAIN) return; 
static void _controller()
{
      ea:	df 93       	push	r29
      ec:	cf 93       	push	r28
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
	DISPATCH(kinen_callback());		// intercept low-level communication events
      f2:	0e 94 14 09 	call	0x1228	; 0x1228 <kinen_callback>
      f6:	82 30       	cpi	r24, 0x02	; 2
      f8:	11 f0       	breq	.+4      	; 0xfe <_controller+0x14>
	DISPATCH(tick_callback());		// regular interval timer clock handler (ticks)
      fa:	0e 94 42 08 	call	0x1084	; 0x1084 <tick_callback>
}
      fe:	cf 91       	pop	r28
     100:	df 91       	pop	r29
     102:	08 95       	ret

00000104 <heater_init>:
 * heater_off()	 - turn heater off	
 * heater_callback() - 100ms timed loop for heater control
 */

void heater_init()
{ 
     104:	df 93       	push	r29
     106:	cf 93       	push	r28
     108:	cd b7       	in	r28, 0x3d	; 61
     10a:	de b7       	in	r29, 0x3e	; 62
	// initialize heater, start PID and PWM
	memset(&heater, 0, sizeof(struct Heater));
     10c:	82 e1       	ldi	r24, 0x12	; 18
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	60 e0       	ldi	r22, 0x00	; 0
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	4e e1       	ldi	r20, 0x1E	; 30
     116:	50 e0       	ldi	r21, 0x00	; 0
     118:	0e 94 57 0d 	call	0x1aae	; 0x1aae <memset>
	heater.ambient_timeout = HEATER_AMBIENT_TIMEOUT;
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	a4 eb       	ldi	r26, 0xB4	; 180
     122:	b2 e4       	ldi	r27, 0x42	; 66
     124:	80 93 20 01 	sts	0x0120, r24
     128:	90 93 21 01 	sts	0x0121, r25
     12c:	a0 93 22 01 	sts	0x0122, r26
     130:	b0 93 23 01 	sts	0x0123, r27
	heater.regulation_timeout = HEATER_REGULATION_TIMEOUT;
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	a6 e9       	ldi	r26, 0x96	; 150
     13a:	b3 e4       	ldi	r27, 0x43	; 67
     13c:	80 93 24 01 	sts	0x0124, r24
     140:	90 93 25 01 	sts	0x0125, r25
     144:	a0 93 26 01 	sts	0x0126, r26
     148:	b0 93 27 01 	sts	0x0127, r27
	heater.ambient_temperature = HEATER_AMBIENT_TEMPERATURE;
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	a0 e2       	ldi	r26, 0x20	; 32
     152:	b2 e4       	ldi	r27, 0x42	; 66
     154:	80 93 28 01 	sts	0x0128, r24
     158:	90 93 29 01 	sts	0x0129, r25
     15c:	a0 93 2a 01 	sts	0x012A, r26
     160:	b0 93 2b 01 	sts	0x012B, r27
	heater.overheat_temperature = HEATER_OVERHEAT_TEMPERATURE;
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	a6 e9       	ldi	r26, 0x96	; 150
     16a:	b3 e4       	ldi	r27, 0x43	; 67
     16c:	80 93 2c 01 	sts	0x012C, r24
     170:	90 93 2d 01 	sts	0x012D, r25
     174:	a0 93 2e 01 	sts	0x012E, r26
     178:	b0 93 2f 01 	sts	0x012F, r27

	// initialize lower-level functions used by heater
	// note: PWM and ADC are initialized as part of the device init
	sensor_init();					// setup the temperature sensor module
     17c:	0e 94 3b 04 	call	0x876	; 0x876 <sensor_init>
	pid_init();
     180:	0e 94 fe 01 	call	0x3fc	; 0x3fc <pid_init>
}
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	08 95       	ret

0000018a <heater_on>:

void heater_on(double setpoint)
{
     18a:	df 93       	push	r29
     18c:	cf 93       	push	r28
     18e:	00 d0       	rcall	.+0      	; 0x190 <heater_on+0x6>
     190:	00 d0       	rcall	.+0      	; 0x192 <heater_on+0x8>
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
     196:	69 83       	std	Y+1, r22	; 0x01
     198:	7a 83       	std	Y+2, r23	; 0x02
     19a:	8b 83       	std	Y+3, r24	; 0x03
     19c:	9c 83       	std	Y+4, r25	; 0x04
	// no action if heater is already on
	if ((heater.state == HEATER_HEATING) || (heater.state == HEATER_AT_TARGET)) {
     19e:	80 91 12 01 	lds	r24, 0x0112
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	29 f1       	breq	.+74     	; 0x1f0 <heater_on+0x66>
     1a6:	80 91 12 01 	lds	r24, 0x0112
     1aa:	83 30       	cpi	r24, 0x03	; 3
     1ac:	09 f1       	breq	.+66     	; 0x1f0 <heater_on+0x66>
		return;
	}
	// turn on lower level functions
	sensor_on();
     1ae:	0e 94 89 04 	call	0x912	; 0x912 <sensor_on>
	sensor_start_temperature_reading();
     1b2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <sensor_start_temperature_reading>
	pid_reset();
     1b6:	0e 94 58 02 	call	0x4b0	; 0x4b0 <pid_reset>
	pwm_on(PWM_FREQUENCY, 0);		// duty cycle will be set by PID loop
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	8a e7       	ldi	r24, 0x7A	; 122
     1c0:	94 e4       	ldi	r25, 0x44	; 68
     1c2:	20 e0       	ldi	r18, 0x00	; 0
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	0e 94 d6 06 	call	0xdac	; 0xdac <pwm_on>
	heater.setpoint = setpoint;
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	9a 81       	ldd	r25, Y+2	; 0x02
     1d2:	ab 81       	ldd	r26, Y+3	; 0x03
     1d4:	bc 81       	ldd	r27, Y+4	; 0x04
     1d6:	80 93 18 01 	sts	0x0118, r24
     1da:	90 93 19 01 	sts	0x0119, r25
     1de:	a0 93 1a 01 	sts	0x011A, r26
     1e2:	b0 93 1b 01 	sts	0x011B, r27
	heater.state = HEATER_HEATING;
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	80 93 12 01 	sts	0x0112, r24
	led_on();						// put on the red light [Sting, 1978]
     1ec:	0e 94 91 08 	call	0x1122	; 0x1122 <led_on>
}
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	cf 91       	pop	r28
     1fa:	df 91       	pop	r29
     1fc:	08 95       	ret

000001fe <heater_off>:

void heater_off(uint8_t state, uint8_t code) 
{
     1fe:	df 93       	push	r29
     200:	cf 93       	push	r28
     202:	00 d0       	rcall	.+0      	; 0x204 <heater_off+0x6>
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
     208:	89 83       	std	Y+1, r24	; 0x01
     20a:	6a 83       	std	Y+2, r22	; 0x02
	pwm_off();						// stop sending current to the heater
     20c:	0e 94 03 07 	call	0xe06	; 0xe06 <pwm_off>
	sensor_off();					// stop taking readings
     210:	0e 94 90 04 	call	0x920	; 0x920 <sensor_off>
	heater.state = state;
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	80 93 12 01 	sts	0x0112, r24
	heater.code = code;
     21a:	8a 81       	ldd	r24, Y+2	; 0x02
     21c:	80 93 13 01 	sts	0x0113, r24
	led_off();
     220:	0e 94 9f 08 	call	0x113e	; 0x113e <led_off>
}
     224:	0f 90       	pop	r0
     226:	0f 90       	pop	r0
     228:	cf 91       	pop	r28
     22a:	df 91       	pop	r29
     22c:	08 95       	ret

0000022e <heater_callback>:

void heater_callback()
{
     22e:	df 93       	push	r29
     230:	cf 93       	push	r28
     232:	00 d0       	rcall	.+0      	; 0x234 <heater_callback+0x6>
     234:	00 d0       	rcall	.+0      	; 0x236 <heater_callback+0x8>
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
	// These are the no-op cases
	if ((heater.state == HEATER_OFF) || (heater.state == HEATER_SHUTDOWN)) { return;}
     23a:	80 91 12 01 	lds	r24, 0x0112
     23e:	88 23       	and	r24, r24
     240:	09 f4       	brne	.+2      	; 0x244 <heater_callback+0x16>
     242:	d5 c0       	rjmp	.+426    	; 0x3ee <heater_callback+0x1c0>
     244:	80 91 12 01 	lds	r24, 0x0112
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	09 f4       	brne	.+2      	; 0x24e <heater_callback+0x20>
     24c:	d0 c0       	rjmp	.+416    	; 0x3ee <heater_callback+0x1c0>

	// Get the current temp and start another reading
	sensor_start_temperature_reading();
     24e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <sensor_start_temperature_reading>
	if (sensor_get_state() != SENSOR_HAS_DATA) { // exit if the sensor has no data
     252:	0e 94 99 04 	call	0x932	; 0x932 <sensor_get_state>
     256:	84 30       	cpi	r24, 0x04	; 4
     258:	09 f0       	breq	.+2      	; 0x25c <heater_callback+0x2e>
     25a:	c9 c0       	rjmp	.+402    	; 0x3ee <heater_callback+0x1c0>
		return;
	}
	if ((heater.temperature = sensor_get_temperature()) > heater.overheat_temperature) {
     25c:	0e 94 ab 04 	call	0x956	; 0x956 <sensor_get_temperature>
     260:	dc 01       	movw	r26, r24
     262:	cb 01       	movw	r24, r22
     264:	80 93 14 01 	sts	0x0114, r24
     268:	90 93 15 01 	sts	0x0115, r25
     26c:	a0 93 16 01 	sts	0x0116, r26
     270:	b0 93 17 01 	sts	0x0117, r27
     274:	80 91 14 01 	lds	r24, 0x0114
     278:	90 91 15 01 	lds	r25, 0x0115
     27c:	a0 91 16 01 	lds	r26, 0x0116
     280:	b0 91 17 01 	lds	r27, 0x0117
     284:	20 91 2c 01 	lds	r18, 0x012C
     288:	30 91 2d 01 	lds	r19, 0x012D
     28c:	40 91 2e 01 	lds	r20, 0x012E
     290:	50 91 2f 01 	lds	r21, 0x012F
     294:	bc 01       	movw	r22, r24
     296:	cd 01       	movw	r24, r26
     298:	0e 94 96 0c 	call	0x192c	; 0x192c <__gesf2>
     29c:	18 16       	cp	r1, r24
     29e:	2c f4       	brge	.+10     	; 0x2aa <heater_callback+0x7c>
		heater_off(HEATER_SHUTDOWN, HEATER_OVERHEATED);
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	63 e0       	ldi	r22, 0x03	; 3
     2a4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <heater_off>
     2a8:	a2 c0       	rjmp	.+324    	; 0x3ee <heater_callback+0x1c0>
		return;
	}
	double duty_cycle = pid_calculate(heater.setpoint, heater.temperature);
     2aa:	80 91 18 01 	lds	r24, 0x0118
     2ae:	90 91 19 01 	lds	r25, 0x0119
     2b2:	a0 91 1a 01 	lds	r26, 0x011A
     2b6:	b0 91 1b 01 	lds	r27, 0x011B
     2ba:	20 91 14 01 	lds	r18, 0x0114
     2be:	30 91 15 01 	lds	r19, 0x0115
     2c2:	40 91 16 01 	lds	r20, 0x0116
     2c6:	50 91 17 01 	lds	r21, 0x0117
     2ca:	bc 01       	movw	r22, r24
     2cc:	cd 01       	movw	r24, r26
     2ce:	0e 94 83 02 	call	0x506	; 0x506 <pid_calculate>
     2d2:	dc 01       	movw	r26, r24
     2d4:	cb 01       	movw	r24, r22
     2d6:	89 83       	std	Y+1, r24	; 0x01
     2d8:	9a 83       	std	Y+2, r25	; 0x02
     2da:	ab 83       	std	Y+3, r26	; 0x03
     2dc:	bc 83       	std	Y+4, r27	; 0x04
	pwm_set_duty(duty_cycle);
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	9a 81       	ldd	r25, Y+2	; 0x02
     2e2:	ab 81       	ldd	r26, Y+3	; 0x03
     2e4:	bc 81       	ldd	r27, Y+4	; 0x04
     2e6:	bc 01       	movw	r22, r24
     2e8:	cd 01       	movw	r24, r26
     2ea:	0e 94 7e 07 	call	0xefc	; 0xefc <pwm_set_duty>
	
	// handle HEATER exceptions
	if (heater.state == HEATER_HEATING) {
     2ee:	80 91 12 01 	lds	r24, 0x0112
     2f2:	82 30       	cpi	r24, 0x02	; 2
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <heater_callback+0xca>
     2f6:	7b c0       	rjmp	.+246    	; 0x3ee <heater_callback+0x1c0>
		heater.regulation_timer += HEATER_TICK_SECONDS;
     2f8:	80 91 1c 01 	lds	r24, 0x011C
     2fc:	90 91 1d 01 	lds	r25, 0x011D
     300:	a0 91 1e 01 	lds	r26, 0x011E
     304:	b0 91 1f 01 	lds	r27, 0x011F
     308:	bc 01       	movw	r22, r24
     30a:	cd 01       	movw	r24, r26
     30c:	2d ec       	ldi	r18, 0xCD	; 205
     30e:	3c ec       	ldi	r19, 0xCC	; 204
     310:	4c ec       	ldi	r20, 0xCC	; 204
     312:	5d e3       	ldi	r21, 0x3D	; 61
     314:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__addsf3>
     318:	dc 01       	movw	r26, r24
     31a:	cb 01       	movw	r24, r22
     31c:	80 93 1c 01 	sts	0x011C, r24
     320:	90 93 1d 01 	sts	0x011D, r25
     324:	a0 93 1e 01 	sts	0x011E, r26
     328:	b0 93 1f 01 	sts	0x011F, r27

		if ((heater.temperature < heater.ambient_temperature) &&
     32c:	80 91 14 01 	lds	r24, 0x0114
     330:	90 91 15 01 	lds	r25, 0x0115
     334:	a0 91 16 01 	lds	r26, 0x0116
     338:	b0 91 17 01 	lds	r27, 0x0117
     33c:	20 91 28 01 	lds	r18, 0x0128
     340:	30 91 29 01 	lds	r19, 0x0129
     344:	40 91 2a 01 	lds	r20, 0x012A
     348:	50 91 2b 01 	lds	r21, 0x012B
     34c:	bc 01       	movw	r22, r24
     34e:	cd 01       	movw	r24, r26
     350:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__cmpsf2>
     354:	88 23       	and	r24, r24
     356:	dc f4       	brge	.+54     	; 0x38e <heater_callback+0x160>
     358:	80 91 1c 01 	lds	r24, 0x011C
     35c:	90 91 1d 01 	lds	r25, 0x011D
     360:	a0 91 1e 01 	lds	r26, 0x011E
     364:	b0 91 1f 01 	lds	r27, 0x011F
     368:	20 91 20 01 	lds	r18, 0x0120
     36c:	30 91 21 01 	lds	r19, 0x0121
     370:	40 91 22 01 	lds	r20, 0x0122
     374:	50 91 23 01 	lds	r21, 0x0123
     378:	bc 01       	movw	r22, r24
     37a:	cd 01       	movw	r24, r26
     37c:	0e 94 96 0c 	call	0x192c	; 0x192c <__gesf2>
     380:	18 16       	cp	r1, r24
     382:	2c f4       	brge	.+10     	; 0x38e <heater_callback+0x160>
			(heater.regulation_timer > heater.ambient_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_AMBIENT_TIMED_OUT);
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	61 e0       	ldi	r22, 0x01	; 1
     388:	0e 94 ff 00 	call	0x1fe	; 0x1fe <heater_off>
     38c:	30 c0       	rjmp	.+96     	; 0x3ee <heater_callback+0x1c0>
			return;
		}
		if ((heater.temperature < heater.setpoint) &&
     38e:	80 91 14 01 	lds	r24, 0x0114
     392:	90 91 15 01 	lds	r25, 0x0115
     396:	a0 91 16 01 	lds	r26, 0x0116
     39a:	b0 91 17 01 	lds	r27, 0x0117
     39e:	20 91 18 01 	lds	r18, 0x0118
     3a2:	30 91 19 01 	lds	r19, 0x0119
     3a6:	40 91 1a 01 	lds	r20, 0x011A
     3aa:	50 91 1b 01 	lds	r21, 0x011B
     3ae:	bc 01       	movw	r22, r24
     3b0:	cd 01       	movw	r24, r26
     3b2:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__cmpsf2>
     3b6:	88 23       	and	r24, r24
     3b8:	d4 f4       	brge	.+52     	; 0x3ee <heater_callback+0x1c0>
     3ba:	80 91 1c 01 	lds	r24, 0x011C
     3be:	90 91 1d 01 	lds	r25, 0x011D
     3c2:	a0 91 1e 01 	lds	r26, 0x011E
     3c6:	b0 91 1f 01 	lds	r27, 0x011F
     3ca:	20 91 24 01 	lds	r18, 0x0124
     3ce:	30 91 25 01 	lds	r19, 0x0125
     3d2:	40 91 26 01 	lds	r20, 0x0126
     3d6:	50 91 27 01 	lds	r21, 0x0127
     3da:	bc 01       	movw	r22, r24
     3dc:	cd 01       	movw	r24, r26
     3de:	0e 94 96 0c 	call	0x192c	; 0x192c <__gesf2>
     3e2:	18 16       	cp	r1, r24
     3e4:	24 f4       	brge	.+8      	; 0x3ee <heater_callback+0x1c0>
			(heater.regulation_timer > heater.regulation_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_REGULATION_TIMED_OUT);
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	62 e0       	ldi	r22, 0x02	; 2
     3ea:	0e 94 ff 00 	call	0x1fe	; 0x1fe <heater_off>
			return;
		}
	}
}
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	cf 91       	pop	r28
     3f8:	df 91       	pop	r29
     3fa:	08 95       	ret

000003fc <pid_init>:
 * pid_reset() - reset PID values to cold start
 * pid_calc() - derived from: http://www.embeddedheaven.com/pid-control-algorithm-c-language.htm
 */

void pid_init() 
{
     3fc:	df 93       	push	r29
     3fe:	cf 93       	push	r28
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
	memset(&pid, 0, sizeof(struct PIDstruct));
     404:	80 e3       	ldi	r24, 0x30	; 48
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	46 e3       	ldi	r20, 0x36	; 54
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	0e 94 57 0d 	call	0x1aae	; 0x1aae <memset>
	pid.dt = PID_DT;
     414:	8d ec       	ldi	r24, 0xCD	; 205
     416:	9c ec       	ldi	r25, 0xCC	; 204
     418:	ac ec       	ldi	r26, 0xCC	; 204
     41a:	bd e3       	ldi	r27, 0x3D	; 61
     41c:	80 93 4e 01 	sts	0x014E, r24
     420:	90 93 4f 01 	sts	0x014F, r25
     424:	a0 93 50 01 	sts	0x0150, r26
     428:	b0 93 51 01 	sts	0x0151, r27
	pid.Kp = PID_Kp;
     42c:	83 e3       	ldi	r24, 0x33	; 51
     42e:	93 e3       	ldi	r25, 0x33	; 51
     430:	a3 e7       	ldi	r26, 0x73	; 115
     432:	bf e3       	ldi	r27, 0x3F	; 63
     434:	80 93 52 01 	sts	0x0152, r24
     438:	90 93 53 01 	sts	0x0153, r25
     43c:	a0 93 54 01 	sts	0x0154, r26
     440:	b0 93 55 01 	sts	0x0155, r27
	pid.Ki = PID_Ki;
     444:	8a e0       	ldi	r24, 0x0A	; 10
     446:	97 ed       	ldi	r25, 0xD7	; 215
     448:	a3 e2       	ldi	r26, 0x23	; 35
     44a:	bc e3       	ldi	r27, 0x3C	; 60
     44c:	80 93 56 01 	sts	0x0156, r24
     450:	90 93 57 01 	sts	0x0157, r25
     454:	a0 93 58 01 	sts	0x0158, r26
     458:	b0 93 59 01 	sts	0x0159, r27
	pid.Kd = PID_Kd;
     45c:	8a e0       	ldi	r24, 0x0A	; 10
     45e:	97 ed       	ldi	r25, 0xD7	; 215
     460:	a3 e2       	ldi	r26, 0x23	; 35
     462:	bc e3       	ldi	r27, 0x3C	; 60
     464:	80 93 5a 01 	sts	0x015A, r24
     468:	90 93 5b 01 	sts	0x015B, r25
     46c:	a0 93 5c 01 	sts	0x015C, r26
     470:	b0 93 5d 01 	sts	0x015D, r27
	pid.output_max = PID_MAX_OUTPUT;	// saturation filter max value
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	a8 ec       	ldi	r26, 0xC8	; 200
     47a:	b2 e4       	ldi	r27, 0x42	; 66
     47c:	80 93 36 01 	sts	0x0136, r24
     480:	90 93 37 01 	sts	0x0137, r25
     484:	a0 93 38 01 	sts	0x0138, r26
     488:	b0 93 39 01 	sts	0x0139, r27
	pid.output_min = PID_MIN_OUTPUT;	// saturation filter min value
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	a0 e0       	ldi	r26, 0x00	; 0
     492:	b0 e0       	ldi	r27, 0x00	; 0
     494:	80 93 3a 01 	sts	0x013A, r24
     498:	90 93 3b 01 	sts	0x013B, r25
     49c:	a0 93 3c 01 	sts	0x013C, r26
     4a0:	b0 93 3d 01 	sts	0x013D, r27
	pid.state = PID_ON;
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	80 93 30 01 	sts	0x0130, r24
}
     4aa:	cf 91       	pop	r28
     4ac:	df 91       	pop	r29
     4ae:	08 95       	ret

000004b0 <pid_reset>:

void pid_reset()
{
     4b0:	df 93       	push	r29
     4b2:	cf 93       	push	r28
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
	pid.output = 0;
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	a0 e0       	ldi	r26, 0x00	; 0
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	80 93 32 01 	sts	0x0132, r24
     4c4:	90 93 33 01 	sts	0x0133, r25
     4c8:	a0 93 34 01 	sts	0x0134, r26
     4cc:	b0 93 35 01 	sts	0x0135, r27
	pid.integral = 0;
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	a0 e0       	ldi	r26, 0x00	; 0
     4d6:	b0 e0       	ldi	r27, 0x00	; 0
     4d8:	80 93 46 01 	sts	0x0146, r24
     4dc:	90 93 47 01 	sts	0x0147, r25
     4e0:	a0 93 48 01 	sts	0x0148, r26
     4e4:	b0 93 49 01 	sts	0x0149, r27
	pid.prev_error = 0;
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	a0 e0       	ldi	r26, 0x00	; 0
     4ee:	b0 e0       	ldi	r27, 0x00	; 0
     4f0:	80 93 42 01 	sts	0x0142, r24
     4f4:	90 93 43 01 	sts	0x0143, r25
     4f8:	a0 93 44 01 	sts	0x0144, r26
     4fc:	b0 93 45 01 	sts	0x0145, r27
}
     500:	cf 91       	pop	r28
     502:	df 91       	pop	r29
     504:	08 95       	ret

00000506 <pid_calculate>:

double pid_calculate(double setpoint,double temperature)
{
     506:	ef 92       	push	r14
     508:	ff 92       	push	r15
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	df 93       	push	r29
     510:	cf 93       	push	r28
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	2c 97       	sbiw	r28, 0x0c	; 12
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	cd bf       	out	0x3d, r28	; 61
     522:	69 83       	std	Y+1, r22	; 0x01
     524:	7a 83       	std	Y+2, r23	; 0x02
     526:	8b 83       	std	Y+3, r24	; 0x03
     528:	9c 83       	std	Y+4, r25	; 0x04
     52a:	2d 83       	std	Y+5, r18	; 0x05
     52c:	3e 83       	std	Y+6, r19	; 0x06
     52e:	4f 83       	std	Y+7, r20	; 0x07
     530:	58 87       	std	Y+8, r21	; 0x08
	if (pid.state == PID_OFF) { return (0);}
     532:	80 91 30 01 	lds	r24, 0x0130
     536:	88 23       	and	r24, r24
     538:	49 f4       	brne	.+18     	; 0x54c <pid_calculate+0x46>
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	a0 e0       	ldi	r26, 0x00	; 0
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	89 87       	std	Y+9, r24	; 0x09
     544:	9a 87       	std	Y+10, r25	; 0x0a
     546:	ab 87       	std	Y+11, r26	; 0x0b
     548:	bc 87       	std	Y+12, r27	; 0x0c
     54a:	82 c1       	rjmp	.+772    	; 0x850 <pid_calculate+0x34a>

	pid.setpoint = setpoint;		// ++++ test
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	9a 81       	ldd	r25, Y+2	; 0x02
     550:	ab 81       	ldd	r26, Y+3	; 0x03
     552:	bc 81       	ldd	r27, Y+4	; 0x04
     554:	80 93 62 01 	sts	0x0162, r24
     558:	90 93 63 01 	sts	0x0163, r25
     55c:	a0 93 64 01 	sts	0x0164, r26
     560:	b0 93 65 01 	sts	0x0165, r27
	pid.temperature = temperature;	// ++++ test
     564:	8d 81       	ldd	r24, Y+5	; 0x05
     566:	9e 81       	ldd	r25, Y+6	; 0x06
     568:	af 81       	ldd	r26, Y+7	; 0x07
     56a:	b8 85       	ldd	r27, Y+8	; 0x08
     56c:	80 93 5e 01 	sts	0x015E, r24
     570:	90 93 5f 01 	sts	0x015F, r25
     574:	a0 93 60 01 	sts	0x0160, r26
     578:	b0 93 61 01 	sts	0x0161, r27

	pid.error = setpoint - temperature;		// current error term
     57c:	69 81       	ldd	r22, Y+1	; 0x01
     57e:	7a 81       	ldd	r23, Y+2	; 0x02
     580:	8b 81       	ldd	r24, Y+3	; 0x03
     582:	9c 81       	ldd	r25, Y+4	; 0x04
     584:	2d 81       	ldd	r18, Y+5	; 0x05
     586:	3e 81       	ldd	r19, Y+6	; 0x06
     588:	4f 81       	ldd	r20, Y+7	; 0x07
     58a:	58 85       	ldd	r21, Y+8	; 0x08
     58c:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__subsf3>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	80 93 3e 01 	sts	0x013E, r24
     598:	90 93 3f 01 	sts	0x013F, r25
     59c:	a0 93 40 01 	sts	0x0140, r26
     5a0:	b0 93 41 01 	sts	0x0141, r27

//	if (fabs(pid.error) > PID_EPSILON) {	// stop integration if error term is too small
	if ((fabs(pid.error) > PID_EPSILON) ||	// stop integration if error term is too small
     5a4:	80 91 3e 01 	lds	r24, 0x013E
     5a8:	90 91 3f 01 	lds	r25, 0x013F
     5ac:	a0 91 40 01 	lds	r26, 0x0140
     5b0:	b0 91 41 01 	lds	r27, 0x0141
     5b4:	bf 77       	andi	r27, 0x7F	; 127
     5b6:	bc 01       	movw	r22, r24
     5b8:	cd 01       	movw	r24, r26
     5ba:	2a e0       	ldi	r18, 0x0A	; 10
     5bc:	37 ed       	ldi	r19, 0xD7	; 215
     5be:	43 e2       	ldi	r20, 0x23	; 35
     5c0:	5c e3       	ldi	r21, 0x3C	; 60
     5c2:	0e 94 96 0c 	call	0x192c	; 0x192c <__gesf2>
     5c6:	18 16       	cp	r1, r24
     5c8:	14 f1       	brlt	.+68     	; 0x60e <pid_calculate+0x108>
     5ca:	e0 90 32 01 	lds	r14, 0x0132
     5ce:	f0 90 33 01 	lds	r15, 0x0133
     5d2:	00 91 34 01 	lds	r16, 0x0134
     5d6:	10 91 35 01 	lds	r17, 0x0135
     5da:	80 91 36 01 	lds	r24, 0x0136
     5de:	90 91 37 01 	lds	r25, 0x0137
     5e2:	a0 91 38 01 	lds	r26, 0x0138
     5e6:	b0 91 39 01 	lds	r27, 0x0139
     5ea:	bc 01       	movw	r22, r24
     5ec:	cd 01       	movw	r24, r26
     5ee:	2c ea       	ldi	r18, 0xAC	; 172
     5f0:	35 ec       	ldi	r19, 0xC5	; 197
     5f2:	47 e2       	ldi	r20, 0x27	; 39
     5f4:	57 e3       	ldi	r21, 0x37	; 55
     5f6:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__subsf3>
     5fa:	dc 01       	movw	r26, r24
     5fc:	cb 01       	movw	r24, r22
     5fe:	9c 01       	movw	r18, r24
     600:	ad 01       	movw	r20, r26
     602:	c8 01       	movw	r24, r16
     604:	b7 01       	movw	r22, r14
     606:	0e 94 96 0c 	call	0x192c	; 0x192c <__gesf2>
     60a:	88 23       	and	r24, r24
     60c:	74 f1       	brlt	.+92     	; 0x66a <pid_calculate+0x164>
		(pid.output >= (pid.output_max - EPSILON))) {// ...or output is too large (anti-windup)
		pid.integral += (pid.error * pid.dt);
     60e:	e0 90 46 01 	lds	r14, 0x0146
     612:	f0 90 47 01 	lds	r15, 0x0147
     616:	00 91 48 01 	lds	r16, 0x0148
     61a:	10 91 49 01 	lds	r17, 0x0149
     61e:	80 91 3e 01 	lds	r24, 0x013E
     622:	90 91 3f 01 	lds	r25, 0x013F
     626:	a0 91 40 01 	lds	r26, 0x0140
     62a:	b0 91 41 01 	lds	r27, 0x0141
     62e:	20 91 4e 01 	lds	r18, 0x014E
     632:	30 91 4f 01 	lds	r19, 0x014F
     636:	40 91 50 01 	lds	r20, 0x0150
     63a:	50 91 51 01 	lds	r21, 0x0151
     63e:	bc 01       	movw	r22, r24
     640:	cd 01       	movw	r24, r26
     642:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__mulsf3>
     646:	dc 01       	movw	r26, r24
     648:	cb 01       	movw	r24, r22
     64a:	9c 01       	movw	r18, r24
     64c:	ad 01       	movw	r20, r26
     64e:	c8 01       	movw	r24, r16
     650:	b7 01       	movw	r22, r14
     652:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__addsf3>
     656:	dc 01       	movw	r26, r24
     658:	cb 01       	movw	r24, r22
     65a:	80 93 46 01 	sts	0x0146, r24
     65e:	90 93 47 01 	sts	0x0147, r25
     662:	a0 93 48 01 	sts	0x0148, r26
     666:	b0 93 49 01 	sts	0x0149, r27
	}
	pid.derivative = (pid.error - pid.prev_error) / pid.dt;
     66a:	80 91 3e 01 	lds	r24, 0x013E
     66e:	90 91 3f 01 	lds	r25, 0x013F
     672:	a0 91 40 01 	lds	r26, 0x0140
     676:	b0 91 41 01 	lds	r27, 0x0141
     67a:	20 91 42 01 	lds	r18, 0x0142
     67e:	30 91 43 01 	lds	r19, 0x0143
     682:	40 91 44 01 	lds	r20, 0x0144
     686:	50 91 45 01 	lds	r21, 0x0145
     68a:	bc 01       	movw	r22, r24
     68c:	cd 01       	movw	r24, r26
     68e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__subsf3>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	20 91 4e 01 	lds	r18, 0x014E
     69a:	30 91 4f 01 	lds	r19, 0x014F
     69e:	40 91 50 01 	lds	r20, 0x0150
     6a2:	50 91 51 01 	lds	r21, 0x0151
     6a6:	bc 01       	movw	r22, r24
     6a8:	cd 01       	movw	r24, r26
     6aa:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__divsf3>
     6ae:	dc 01       	movw	r26, r24
     6b0:	cb 01       	movw	r24, r22
     6b2:	80 93 4a 01 	sts	0x014A, r24
     6b6:	90 93 4b 01 	sts	0x014B, r25
     6ba:	a0 93 4c 01 	sts	0x014C, r26
     6be:	b0 93 4d 01 	sts	0x014D, r27
	pid.output = pid.Kp * pid.error + pid.Ki * pid.integral + pid.Kd * pid.derivative;
     6c2:	80 91 52 01 	lds	r24, 0x0152
     6c6:	90 91 53 01 	lds	r25, 0x0153
     6ca:	a0 91 54 01 	lds	r26, 0x0154
     6ce:	b0 91 55 01 	lds	r27, 0x0155
     6d2:	20 91 3e 01 	lds	r18, 0x013E
     6d6:	30 91 3f 01 	lds	r19, 0x013F
     6da:	40 91 40 01 	lds	r20, 0x0140
     6de:	50 91 41 01 	lds	r21, 0x0141
     6e2:	bc 01       	movw	r22, r24
     6e4:	cd 01       	movw	r24, r26
     6e6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__mulsf3>
     6ea:	dc 01       	movw	r26, r24
     6ec:	cb 01       	movw	r24, r22
     6ee:	7c 01       	movw	r14, r24
     6f0:	8d 01       	movw	r16, r26
     6f2:	80 91 56 01 	lds	r24, 0x0156
     6f6:	90 91 57 01 	lds	r25, 0x0157
     6fa:	a0 91 58 01 	lds	r26, 0x0158
     6fe:	b0 91 59 01 	lds	r27, 0x0159
     702:	20 91 46 01 	lds	r18, 0x0146
     706:	30 91 47 01 	lds	r19, 0x0147
     70a:	40 91 48 01 	lds	r20, 0x0148
     70e:	50 91 49 01 	lds	r21, 0x0149
     712:	bc 01       	movw	r22, r24
     714:	cd 01       	movw	r24, r26
     716:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__mulsf3>
     71a:	dc 01       	movw	r26, r24
     71c:	cb 01       	movw	r24, r22
     71e:	9c 01       	movw	r18, r24
     720:	ad 01       	movw	r20, r26
     722:	c8 01       	movw	r24, r16
     724:	b7 01       	movw	r22, r14
     726:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__addsf3>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	7c 01       	movw	r14, r24
     730:	8d 01       	movw	r16, r26
     732:	80 91 5a 01 	lds	r24, 0x015A
     736:	90 91 5b 01 	lds	r25, 0x015B
     73a:	a0 91 5c 01 	lds	r26, 0x015C
     73e:	b0 91 5d 01 	lds	r27, 0x015D
     742:	20 91 4a 01 	lds	r18, 0x014A
     746:	30 91 4b 01 	lds	r19, 0x014B
     74a:	40 91 4c 01 	lds	r20, 0x014C
     74e:	50 91 4d 01 	lds	r21, 0x014D
     752:	bc 01       	movw	r22, r24
     754:	cd 01       	movw	r24, r26
     756:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__mulsf3>
     75a:	dc 01       	movw	r26, r24
     75c:	cb 01       	movw	r24, r22
     75e:	9c 01       	movw	r18, r24
     760:	ad 01       	movw	r20, r26
     762:	c8 01       	movw	r24, r16
     764:	b7 01       	movw	r22, r14
     766:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__addsf3>
     76a:	dc 01       	movw	r26, r24
     76c:	cb 01       	movw	r24, r22
     76e:	80 93 32 01 	sts	0x0132, r24
     772:	90 93 33 01 	sts	0x0133, r25
     776:	a0 93 34 01 	sts	0x0134, r26
     77a:	b0 93 35 01 	sts	0x0135, r27

	if(pid.output > pid.output_max) { 		// saturation filter
     77e:	80 91 32 01 	lds	r24, 0x0132
     782:	90 91 33 01 	lds	r25, 0x0133
     786:	a0 91 34 01 	lds	r26, 0x0134
     78a:	b0 91 35 01 	lds	r27, 0x0135
     78e:	20 91 36 01 	lds	r18, 0x0136
     792:	30 91 37 01 	lds	r19, 0x0137
     796:	40 91 38 01 	lds	r20, 0x0138
     79a:	50 91 39 01 	lds	r21, 0x0139
     79e:	bc 01       	movw	r22, r24
     7a0:	cd 01       	movw	r24, r26
     7a2:	0e 94 96 0c 	call	0x192c	; 0x192c <__gesf2>
     7a6:	18 16       	cp	r1, r24
     7a8:	8c f4       	brge	.+34     	; 0x7cc <pid_calculate+0x2c6>
		pid.output = pid.output_max;
     7aa:	80 91 36 01 	lds	r24, 0x0136
     7ae:	90 91 37 01 	lds	r25, 0x0137
     7b2:	a0 91 38 01 	lds	r26, 0x0138
     7b6:	b0 91 39 01 	lds	r27, 0x0139
     7ba:	80 93 32 01 	sts	0x0132, r24
     7be:	90 93 33 01 	sts	0x0133, r25
     7c2:	a0 93 34 01 	sts	0x0134, r26
     7c6:	b0 93 35 01 	sts	0x0135, r27
     7ca:	26 c0       	rjmp	.+76     	; 0x818 <pid_calculate+0x312>
	} else if(pid.output < pid.output_min) {
     7cc:	80 91 32 01 	lds	r24, 0x0132
     7d0:	90 91 33 01 	lds	r25, 0x0133
     7d4:	a0 91 34 01 	lds	r26, 0x0134
     7d8:	b0 91 35 01 	lds	r27, 0x0135
     7dc:	20 91 3a 01 	lds	r18, 0x013A
     7e0:	30 91 3b 01 	lds	r19, 0x013B
     7e4:	40 91 3c 01 	lds	r20, 0x013C
     7e8:	50 91 3d 01 	lds	r21, 0x013D
     7ec:	bc 01       	movw	r22, r24
     7ee:	cd 01       	movw	r24, r26
     7f0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__cmpsf2>
     7f4:	88 23       	and	r24, r24
     7f6:	84 f4       	brge	.+32     	; 0x818 <pid_calculate+0x312>
		pid.output = pid.output_min;
     7f8:	80 91 3a 01 	lds	r24, 0x013A
     7fc:	90 91 3b 01 	lds	r25, 0x013B
     800:	a0 91 3c 01 	lds	r26, 0x013C
     804:	b0 91 3d 01 	lds	r27, 0x013D
     808:	80 93 32 01 	sts	0x0132, r24
     80c:	90 93 33 01 	sts	0x0133, r25
     810:	a0 93 34 01 	sts	0x0134, r26
     814:	b0 93 35 01 	sts	0x0135, r27
	}
	pid.prev_error = pid.error;
     818:	80 91 3e 01 	lds	r24, 0x013E
     81c:	90 91 3f 01 	lds	r25, 0x013F
     820:	a0 91 40 01 	lds	r26, 0x0140
     824:	b0 91 41 01 	lds	r27, 0x0141
     828:	80 93 42 01 	sts	0x0142, r24
     82c:	90 93 43 01 	sts	0x0143, r25
     830:	a0 93 44 01 	sts	0x0144, r26
     834:	b0 93 45 01 	sts	0x0145, r27
	return pid.output;
     838:	80 91 32 01 	lds	r24, 0x0132
     83c:	90 91 33 01 	lds	r25, 0x0133
     840:	a0 91 34 01 	lds	r26, 0x0134
     844:	b0 91 35 01 	lds	r27, 0x0135
     848:	89 87       	std	Y+9, r24	; 0x09
     84a:	9a 87       	std	Y+10, r25	; 0x0a
     84c:	ab 87       	std	Y+11, r26	; 0x0b
     84e:	bc 87       	std	Y+12, r27	; 0x0c
     850:	89 85       	ldd	r24, Y+9	; 0x09
     852:	9a 85       	ldd	r25, Y+10	; 0x0a
     854:	ab 85       	ldd	r26, Y+11	; 0x0b
     856:	bc 85       	ldd	r27, Y+12	; 0x0c
}
     858:	bc 01       	movw	r22, r24
     85a:	cd 01       	movw	r24, r26
     85c:	2c 96       	adiw	r28, 0x0c	; 12
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	cf 91       	pop	r28
     86a:	df 91       	pop	r29
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	08 95       	ret

00000876 <sensor_init>:
 * sensor_get_code()		- return latest sensor code
 * sensor_callback() 		- perform sensor sampling
 */

void sensor_init()
{
     876:	df 93       	push	r29
     878:	cf 93       	push	r28
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
	memset(&sensor, 0, sizeof(struct TemperatureSensor));
     87e:	86 e6       	ldi	r24, 0x66	; 102
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	43 e4       	ldi	r20, 0x43	; 67
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <memset>
	sensor.temperature = ABSOLUTE_ZERO;
     88e:	83 e3       	ldi	r24, 0x33	; 51
     890:	93 e9       	ldi	r25, 0x93	; 147
     892:	a8 e8       	ldi	r26, 0x88	; 136
     894:	b3 ec       	ldi	r27, 0xC3	; 195
     896:	80 93 69 01 	sts	0x0169, r24
     89a:	90 93 6a 01 	sts	0x016A, r25
     89e:	a0 93 6b 01 	sts	0x016B, r26
     8a2:	b0 93 6c 01 	sts	0x016C, r27
	sensor.reject_sample_deviation = SENSOR_REJECT_SAMPLE_DEVIATION;
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	a0 ea       	ldi	r26, 0xA0	; 160
     8ac:	bf e3       	ldi	r27, 0x3F	; 63
     8ae:	80 93 71 01 	sts	0x0171, r24
     8b2:	90 93 72 01 	sts	0x0172, r25
     8b6:	a0 93 73 01 	sts	0x0173, r26
     8ba:	b0 93 74 01 	sts	0x0174, r27
	sensor.reject_reading_deviation = SENSOR_REJECT_READING_DEVIATION;
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	a0 ea       	ldi	r26, 0xA0	; 160
     8c4:	b1 e4       	ldi	r27, 0x41	; 65
     8c6:	80 93 75 01 	sts	0x0175, r24
     8ca:	90 93 76 01 	sts	0x0176, r25
     8ce:	a0 93 77 01 	sts	0x0177, r26
     8d2:	b0 93 78 01 	sts	0x0178, r27
	sensor.disconnect_temperature = SENSOR_DISCONNECTED_TEMPERATURE;
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	a8 ec       	ldi	r26, 0xC8	; 200
     8dc:	b3 e4       	ldi	r27, 0x43	; 67
     8de:	80 93 79 01 	sts	0x0179, r24
     8e2:	90 93 7a 01 	sts	0x017A, r25
     8e6:	a0 93 7b 01 	sts	0x017B, r26
     8ea:	b0 93 7c 01 	sts	0x017C, r27
	sensor.no_power_temperature = SENSOR_NO_POWER_TEMPERATURE;
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	a0 ea       	ldi	r26, 0xA0	; 160
     8f4:	b0 e4       	ldi	r27, 0x40	; 64
     8f6:	80 93 7d 01 	sts	0x017D, r24
     8fa:	90 93 7e 01 	sts	0x017E, r25
     8fe:	a0 93 7f 01 	sts	0x017F, r26
     902:	b0 93 80 01 	sts	0x0180, r27
	sensor.state = SENSOR_HAS_NO_DATA;
     906:	82 e0       	ldi	r24, 0x02	; 2
     908:	80 93 66 01 	sts	0x0166, r24
}
     90c:	cf 91       	pop	r28
     90e:	df 91       	pop	r29
     910:	08 95       	ret

00000912 <sensor_on>:

void sensor_on()
{
     912:	df 93       	push	r29
     914:	cf 93       	push	r28
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
	// no action actually occurs
}
     91a:	cf 91       	pop	r28
     91c:	df 91       	pop	r29
     91e:	08 95       	ret

00000920 <sensor_off>:

void sensor_off()
{
     920:	df 93       	push	r29
     922:	cf 93       	push	r28
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_OFF;
     928:	10 92 66 01 	sts	0x0166, r1
}
     92c:	cf 91       	pop	r28
     92e:	df 91       	pop	r29
     930:	08 95       	ret

00000932 <sensor_get_state>:

uint8_t sensor_get_state() { return (sensor.state);}
     932:	df 93       	push	r29
     934:	cf 93       	push	r28
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	80 91 66 01 	lds	r24, 0x0166
     93e:	cf 91       	pop	r28
     940:	df 91       	pop	r29
     942:	08 95       	ret

00000944 <sensor_get_code>:
uint8_t sensor_get_code() { return (sensor.code);}
     944:	df 93       	push	r29
     946:	cf 93       	push	r28
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	80 91 67 01 	lds	r24, 0x0167
     950:	cf 91       	pop	r28
     952:	df 91       	pop	r29
     954:	08 95       	ret

00000956 <sensor_get_temperature>:

double sensor_get_temperature() 
{ 
     956:	df 93       	push	r29
     958:	cf 93       	push	r28
     95a:	00 d0       	rcall	.+0      	; 0x95c <sensor_get_temperature+0x6>
     95c:	00 d0       	rcall	.+0      	; 0x95e <sensor_get_temperature+0x8>
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
	if (sensor.state == SENSOR_HAS_DATA) { 
     962:	80 91 66 01 	lds	r24, 0x0166
     966:	84 30       	cpi	r24, 0x04	; 4
     968:	69 f4       	brne	.+26     	; 0x984 <sensor_get_temperature+0x2e>
		return (sensor.temperature);
     96a:	80 91 69 01 	lds	r24, 0x0169
     96e:	90 91 6a 01 	lds	r25, 0x016A
     972:	a0 91 6b 01 	lds	r26, 0x016B
     976:	b0 91 6c 01 	lds	r27, 0x016C
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	9a 83       	std	Y+2, r25	; 0x02
     97e:	ab 83       	std	Y+3, r26	; 0x03
     980:	bc 83       	std	Y+4, r27	; 0x04
     982:	08 c0       	rjmp	.+16     	; 0x994 <sensor_get_temperature+0x3e>
	} else {
		return (SURFACE_OF_THE_SUN);	// a value that should say "Shut me off! Now!"
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	98 e0       	ldi	r25, 0x08	; 8
     988:	ac ea       	ldi	r26, 0xAC	; 172
     98a:	b5 e4       	ldi	r27, 0x45	; 69
     98c:	89 83       	std	Y+1, r24	; 0x01
     98e:	9a 83       	std	Y+2, r25	; 0x02
     990:	ab 83       	std	Y+3, r26	; 0x03
     992:	bc 83       	std	Y+4, r27	; 0x04
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	9a 81       	ldd	r25, Y+2	; 0x02
     998:	ab 81       	ldd	r26, Y+3	; 0x03
     99a:	bc 81       	ldd	r27, Y+4	; 0x04
	}
}
     99c:	bc 01       	movw	r22, r24
     99e:	cd 01       	movw	r24, r26
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	cf 91       	pop	r28
     9aa:	df 91       	pop	r29
     9ac:	08 95       	ret

000009ae <sensor_start_temperature_reading>:

void sensor_start_temperature_reading() 
{ 
     9ae:	df 93       	push	r29
     9b0:	cf 93       	push	r28
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
	sensor.sample_idx = 0;
     9b6:	10 92 68 01 	sts	0x0168, r1
	sensor.code = SENSOR_TAKING_READING;
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	80 93 67 01 	sts	0x0167, r24
}
     9c0:	cf 91       	pop	r28
     9c2:	df 91       	pop	r29
     9c4:	08 95       	ret

000009c6 <sensor_callback>:
 *	This function uses the standard deviation of the sample set to clean up
 *	the reading or to reject the reading as being flawed.
 */

void sensor_callback()
{
     9c6:	ef 92       	push	r14
     9c8:	ff 92       	push	r15
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	df 93       	push	r29
     9d0:	cf 93       	push	r28
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
     9d6:	29 97       	sbiw	r28, 0x09	; 9
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	cd bf       	out	0x3d, r28	; 61
	// cases where you don't execute the callback:
	if ((sensor.state == SENSOR_OFF) || 
     9e2:	80 91 66 01 	lds	r24, 0x0166
     9e6:	88 23       	and	r24, r24
     9e8:	09 f4       	brne	.+2      	; 0x9ec <sensor_callback+0x26>
     9ea:	35 c1       	rjmp	.+618    	; 0xc56 <sensor_callback+0x290>
     9ec:	80 91 66 01 	lds	r24, 0x0166
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <sensor_callback+0x30>
     9f4:	30 c1       	rjmp	.+608    	; 0xc56 <sensor_callback+0x290>
     9f6:	80 91 67 01 	lds	r24, 0x0167
     9fa:	81 30       	cpi	r24, 0x01	; 1
     9fc:	09 f0       	breq	.+2      	; 0xa00 <sensor_callback+0x3a>
     9fe:	2b c1       	rjmp	.+598    	; 0xc56 <sensor_callback+0x290>
		(sensor.code != SENSOR_TAKING_READING)) {
		return;
	}

	// get a sample and return if still in the reading period
	sensor.sample[sensor.sample_idx] = _sensor_sample(ADC_CHANNEL);
     a00:	80 91 68 01 	lds	r24, 0x0168
     a04:	08 2f       	mov	r16, r24
     a06:	10 e0       	ldi	r17, 0x00	; 0
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	0e 94 38 06 	call	0xc70	; 0xc70 <_sensor_sample>
     a0e:	9b 01       	movw	r18, r22
     a10:	ac 01       	movw	r20, r24
     a12:	c8 01       	movw	r24, r16
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	88 0f       	add	r24, r24
     a1a:	99 1f       	adc	r25, r25
     a1c:	fc 01       	movw	r30, r24
     a1e:	ef 57       	subi	r30, 0x7F	; 127
     a20:	fe 4f       	sbci	r31, 0xFE	; 254
     a22:	20 83       	st	Z, r18
     a24:	31 83       	std	Z+1, r19	; 0x01
     a26:	42 83       	std	Z+2, r20	; 0x02
     a28:	53 83       	std	Z+3, r21	; 0x03
	if ((++sensor.sample_idx) < SENSOR_SAMPLES) { return;}
     a2a:	80 91 68 01 	lds	r24, 0x0168
     a2e:	8f 5f       	subi	r24, 0xFF	; 255
     a30:	80 93 68 01 	sts	0x0168, r24
     a34:	80 91 68 01 	lds	r24, 0x0168
     a38:	89 30       	cpi	r24, 0x09	; 9
     a3a:	08 f4       	brcc	.+2      	; 0xa3e <sensor_callback+0x78>
     a3c:	0c c1       	rjmp	.+536    	; 0xc56 <sensor_callback+0x290>

	// process the array to clean up samples
	double mean;
	sensor.std_dev = std_dev(sensor.sample, SENSOR_SAMPLES, &mean);
     a3e:	81 e8       	ldi	r24, 0x81	; 129
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	9e 01       	movw	r18, r28
     a44:	2a 5f       	subi	r18, 0xFA	; 250
     a46:	3f 4f       	sbci	r19, 0xFF	; 255
     a48:	69 e0       	ldi	r22, 0x09	; 9
     a4a:	a9 01       	movw	r20, r18
     a4c:	0e 94 07 0a 	call	0x140e	; 0x140e <std_dev>
     a50:	dc 01       	movw	r26, r24
     a52:	cb 01       	movw	r24, r22
     a54:	80 93 6d 01 	sts	0x016D, r24
     a58:	90 93 6e 01 	sts	0x016E, r25
     a5c:	a0 93 6f 01 	sts	0x016F, r26
     a60:	b0 93 70 01 	sts	0x0170, r27
	if (sensor.std_dev > sensor.reject_reading_deviation) {
     a64:	80 91 6d 01 	lds	r24, 0x016D
     a68:	90 91 6e 01 	lds	r25, 0x016E
     a6c:	a0 91 6f 01 	lds	r26, 0x016F
     a70:	b0 91 70 01 	lds	r27, 0x0170
     a74:	20 91 75 01 	lds	r18, 0x0175
     a78:	30 91 76 01 	lds	r19, 0x0176
     a7c:	40 91 77 01 	lds	r20, 0x0177
     a80:	50 91 78 01 	lds	r21, 0x0178
     a84:	bc 01       	movw	r22, r24
     a86:	cd 01       	movw	r24, r26
     a88:	0e 94 96 0c 	call	0x192c	; 0x192c <__gesf2>
     a8c:	18 16       	cp	r1, r24
     a8e:	3c f4       	brge	.+14     	; 0xa9e <sensor_callback+0xd8>
		sensor.code = SENSOR_READING_FAILED_BAD_READINGS;
     a90:	85 e0       	ldi	r24, 0x05	; 5
     a92:	80 93 67 01 	sts	0x0167, r24
		sensor.state = SENSOR_HAS_NO_DATA;
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	80 93 66 01 	sts	0x0166, r24
     a9c:	dc c0       	rjmp	.+440    	; 0xc56 <sensor_callback+0x290>
		return;
	}

	// reject the outlier samples and re-compute the average
	double count = 0;
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	a0 e0       	ldi	r26, 0x00	; 0
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	8a 83       	std	Y+2, r24	; 0x02
     aa8:	9b 83       	std	Y+3, r25	; 0x03
     aaa:	ac 83       	std	Y+4, r26	; 0x04
     aac:	bd 83       	std	Y+5, r27	; 0x05
	sensor.temperature = 0;
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	a0 e0       	ldi	r26, 0x00	; 0
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	80 93 69 01 	sts	0x0169, r24
     aba:	90 93 6a 01 	sts	0x016A, r25
     abe:	a0 93 6b 01 	sts	0x016B, r26
     ac2:	b0 93 6c 01 	sts	0x016C, r27
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     ac6:	19 82       	std	Y+1, r1	; 0x01
     ac8:	71 c0       	rjmp	.+226    	; 0xbac <sensor_callback+0x1e6>
		if (fabs(sensor.sample[i] - mean) < (sensor.reject_sample_deviation * sensor.std_dev)) {
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	88 2f       	mov	r24, r24
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	fc 01       	movw	r30, r24
     ada:	ef 57       	subi	r30, 0x7F	; 127
     adc:	fe 4f       	sbci	r31, 0xFE	; 254
     ade:	80 81       	ld	r24, Z
     ae0:	91 81       	ldd	r25, Z+1	; 0x01
     ae2:	a2 81       	ldd	r26, Z+2	; 0x02
     ae4:	b3 81       	ldd	r27, Z+3	; 0x03
     ae6:	2e 81       	ldd	r18, Y+6	; 0x06
     ae8:	3f 81       	ldd	r19, Y+7	; 0x07
     aea:	48 85       	ldd	r20, Y+8	; 0x08
     aec:	59 85       	ldd	r21, Y+9	; 0x09
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__subsf3>
     af6:	dc 01       	movw	r26, r24
     af8:	cb 01       	movw	r24, r22
     afa:	7c 01       	movw	r14, r24
     afc:	8d 01       	movw	r16, r26
     afe:	e8 94       	clt
     b00:	17 f9       	bld	r17, 7
     b02:	80 91 71 01 	lds	r24, 0x0171
     b06:	90 91 72 01 	lds	r25, 0x0172
     b0a:	a0 91 73 01 	lds	r26, 0x0173
     b0e:	b0 91 74 01 	lds	r27, 0x0174
     b12:	20 91 6d 01 	lds	r18, 0x016D
     b16:	30 91 6e 01 	lds	r19, 0x016E
     b1a:	40 91 6f 01 	lds	r20, 0x016F
     b1e:	50 91 70 01 	lds	r21, 0x0170
     b22:	bc 01       	movw	r22, r24
     b24:	cd 01       	movw	r24, r26
     b26:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__mulsf3>
     b2a:	dc 01       	movw	r26, r24
     b2c:	cb 01       	movw	r24, r22
     b2e:	9c 01       	movw	r18, r24
     b30:	ad 01       	movw	r20, r26
     b32:	c8 01       	movw	r24, r16
     b34:	b7 01       	movw	r22, r14
     b36:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__cmpsf2>
     b3a:	88 23       	and	r24, r24
     b3c:	a4 f5       	brge	.+104    	; 0xba6 <sensor_callback+0x1e0>
			sensor.temperature += sensor.sample[i];
     b3e:	e0 90 69 01 	lds	r14, 0x0169
     b42:	f0 90 6a 01 	lds	r15, 0x016A
     b46:	00 91 6b 01 	lds	r16, 0x016B
     b4a:	10 91 6c 01 	lds	r17, 0x016C
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	88 2f       	mov	r24, r24
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	fc 01       	movw	r30, r24
     b5e:	ef 57       	subi	r30, 0x7F	; 127
     b60:	fe 4f       	sbci	r31, 0xFE	; 254
     b62:	20 81       	ld	r18, Z
     b64:	31 81       	ldd	r19, Z+1	; 0x01
     b66:	42 81       	ldd	r20, Z+2	; 0x02
     b68:	53 81       	ldd	r21, Z+3	; 0x03
     b6a:	c8 01       	movw	r24, r16
     b6c:	b7 01       	movw	r22, r14
     b6e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__addsf3>
     b72:	dc 01       	movw	r26, r24
     b74:	cb 01       	movw	r24, r22
     b76:	80 93 69 01 	sts	0x0169, r24
     b7a:	90 93 6a 01 	sts	0x016A, r25
     b7e:	a0 93 6b 01 	sts	0x016B, r26
     b82:	b0 93 6c 01 	sts	0x016C, r27
			count++;
     b86:	6a 81       	ldd	r22, Y+2	; 0x02
     b88:	7b 81       	ldd	r23, Y+3	; 0x03
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	40 e8       	ldi	r20, 0x80	; 128
     b94:	5f e3       	ldi	r21, 0x3F	; 63
     b96:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__addsf3>
     b9a:	dc 01       	movw	r26, r24
     b9c:	cb 01       	movw	r24, r22
     b9e:	8a 83       	std	Y+2, r24	; 0x02
     ba0:	9b 83       	std	Y+3, r25	; 0x03
     ba2:	ac 83       	std	Y+4, r26	; 0x04
     ba4:	bd 83       	std	Y+5, r27	; 0x05
	}

	// reject the outlier samples and re-compute the average
	double count = 0;
	sensor.temperature = 0;
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	8f 5f       	subi	r24, 0xFF	; 255
     baa:	89 83       	std	Y+1, r24	; 0x01
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	89 30       	cpi	r24, 0x09	; 9
     bb0:	08 f4       	brcc	.+2      	; 0xbb4 <sensor_callback+0x1ee>
     bb2:	8b cf       	rjmp	.-234    	; 0xaca <sensor_callback+0x104>
		if (fabs(sensor.sample[i] - mean) < (sensor.reject_sample_deviation * sensor.std_dev)) {
			sensor.temperature += sensor.sample[i];
			count++;
		}
	}
	sensor.temperature /= count; 
     bb4:	80 91 69 01 	lds	r24, 0x0169
     bb8:	90 91 6a 01 	lds	r25, 0x016A
     bbc:	a0 91 6b 01 	lds	r26, 0x016B
     bc0:	b0 91 6c 01 	lds	r27, 0x016C
     bc4:	bc 01       	movw	r22, r24
     bc6:	cd 01       	movw	r24, r26
     bc8:	2a 81       	ldd	r18, Y+2	; 0x02
     bca:	3b 81       	ldd	r19, Y+3	; 0x03
     bcc:	4c 81       	ldd	r20, Y+4	; 0x04
     bce:	5d 81       	ldd	r21, Y+5	; 0x05
     bd0:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__divsf3>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	80 93 69 01 	sts	0x0169, r24
     bdc:	90 93 6a 01 	sts	0x016A, r25
     be0:	a0 93 6b 01 	sts	0x016B, r26
     be4:	b0 93 6c 01 	sts	0x016C, r27
	sensor.code = SENSOR_READING_COMPLETE;
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	80 93 67 01 	sts	0x0167, r24
	sensor.state = SENSOR_HAS_DATA;
     bee:	84 e0       	ldi	r24, 0x04	; 4
     bf0:	80 93 66 01 	sts	0x0166, r24

	// process the exception cases
	if (sensor.temperature > SENSOR_DISCONNECTED_TEMPERATURE) {
     bf4:	80 91 69 01 	lds	r24, 0x0169
     bf8:	90 91 6a 01 	lds	r25, 0x016A
     bfc:	a0 91 6b 01 	lds	r26, 0x016B
     c00:	b0 91 6c 01 	lds	r27, 0x016C
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	48 ec       	ldi	r20, 0xC8	; 200
     c0e:	53 e4       	ldi	r21, 0x43	; 67
     c10:	0e 94 96 0c 	call	0x192c	; 0x192c <__gesf2>
     c14:	18 16       	cp	r1, r24
     c16:	3c f4       	brge	.+14     	; 0xc26 <sensor_callback+0x260>
		sensor.code = SENSOR_READING_FAILED_DISCONNECTED;
     c18:	84 e0       	ldi	r24, 0x04	; 4
     c1a:	80 93 67 01 	sts	0x0167, r24
		sensor.state = SENSOR_HAS_NO_DATA;
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	80 93 66 01 	sts	0x0166, r24
     c24:	18 c0       	rjmp	.+48     	; 0xc56 <sensor_callback+0x290>
	} else if (sensor.temperature < SENSOR_NO_POWER_TEMPERATURE) {
     c26:	80 91 69 01 	lds	r24, 0x0169
     c2a:	90 91 6a 01 	lds	r25, 0x016A
     c2e:	a0 91 6b 01 	lds	r26, 0x016B
     c32:	b0 91 6c 01 	lds	r27, 0x016C
     c36:	bc 01       	movw	r22, r24
     c38:	cd 01       	movw	r24, r26
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	40 ea       	ldi	r20, 0xA0	; 160
     c40:	50 e4       	ldi	r21, 0x40	; 64
     c42:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__cmpsf2>
     c46:	88 23       	and	r24, r24
     c48:	34 f4       	brge	.+12     	; 0xc56 <sensor_callback+0x290>
		sensor.code = SENSOR_READING_FAILED_NO_POWER;
     c4a:	83 e0       	ldi	r24, 0x03	; 3
     c4c:	80 93 67 01 	sts	0x0167, r24
		sensor.state = SENSOR_HAS_NO_DATA;
     c50:	82 e0       	ldi	r24, 0x02	; 2
     c52:	80 93 66 01 	sts	0x0166, r24
	}
}
     c56:	29 96       	adiw	r28, 0x09	; 9
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	08 95       	ret

00000c70 <_sensor_sample>:
 *
 *		temp = (adc_value * 1.456355556) - -120.7135972
 */

static inline double _sensor_sample(uint8_t adc_channel)
{
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	0f 92       	push	r0
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	89 83       	std	Y+1, r24	; 0x01
#ifdef __TEST
	double rnum = (rand() /100);
	return (((double)rnum * SENSOR_SLOPE) + SENSOR_OFFSET);	// useful for testing the math
#else
	return (((double)adc_read(adc_channel) * SENSOR_SLOPE) + SENSOR_OFFSET);
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	0e 94 73 06 	call	0xce6	; 0xce6 <adc_read>
     c82:	cc 01       	movw	r24, r24
     c84:	a0 e0       	ldi	r26, 0x00	; 0
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	bc 01       	movw	r22, r24
     c8a:	cd 01       	movw	r24, r26
     c8c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__floatunsisf>
     c90:	dc 01       	movw	r26, r24
     c92:	cb 01       	movw	r24, r22
     c94:	bc 01       	movw	r22, r24
     c96:	cd 01       	movw	r24, r26
     c98:	26 e0       	ldi	r18, 0x06	; 6
     c9a:	3f ea       	ldi	r19, 0xAF	; 175
     c9c:	4a ef       	ldi	r20, 0xFA	; 250
     c9e:	5e e3       	ldi	r21, 0x3E	; 62
     ca0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__mulsf3>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	bc 01       	movw	r22, r24
     caa:	cd 01       	movw	r24, r26
     cac:	23 ed       	ldi	r18, 0xD3	; 211
     cae:	31 eb       	ldi	r19, 0xB1	; 177
     cb0:	46 ed       	ldi	r20, 0xD6	; 214
     cb2:	5e e3       	ldi	r21, 0x3E	; 62
     cb4:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__subsf3>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
#endif
}
     cbc:	bc 01       	movw	r22, r24
     cbe:	cd 01       	movw	r24, r26
     cc0:	0f 90       	pop	r0
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <adc_init>:
/*
 * adc_init() - initialize ADC. See tinyg_tc.h for settings used
 * adc_read() - returns a single ADC reading (raw). See __sensor_sample notes for more
 */
void adc_init(void)
{
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
	ADMUX  = (ADC_REFS | ADC_CHANNEL);	 // setup ADC Vref and channel 0
     cd0:	ec e7       	ldi	r30, 0x7C	; 124
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 e4       	ldi	r24, 0x40	; 64
     cd6:	80 83       	st	Z, r24
	ADCSRA = (ADC_ENABLE | ADC_PRESCALE);// Enable ADC (bit 7) & set prescaler
     cd8:	ea e7       	ldi	r30, 0x7A	; 122
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	86 e8       	ldi	r24, 0x86	; 134
     cde:	80 83       	st	Z, r24
}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <adc_read>:

uint16_t adc_read(uint8_t channel)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <adc_read+0x6>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xF0;						// clobber the channel
     cf2:	ac e7       	ldi	r26, 0x7C	; 124
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ec e7       	ldi	r30, 0x7C	; 124
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	80 7f       	andi	r24, 0xF0	; 240
     cfe:	8c 93       	st	X, r24
	ADMUX |= 0x0F & channel;			// set the channel
     d00:	ac e7       	ldi	r26, 0x7C	; 124
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	ec e7       	ldi	r30, 0x7C	; 124
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	98 2f       	mov	r25, r24
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	8f 70       	andi	r24, 0x0F	; 15
     d10:	89 2b       	or	r24, r25
     d12:	8c 93       	st	X, r24

	ADCSRA |= ADC_START_CONVERSION;		// start the conversion
     d14:	aa e7       	ldi	r26, 0x7A	; 122
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	ea e7       	ldi	r30, 0x7A	; 122
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	80 64       	ori	r24, 0x40	; 64
     d20:	8c 93       	st	X, r24
	while (ADCSRA && (1<<ADIF) == 0);	// wait about 100 uSec
     d22:	ea e7       	ldi	r30, 0x7A	; 122
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
	ADCSRA |= (1<<ADIF);				// clear the conversion flag
     d28:	aa e7       	ldi	r26, 0x7A	; 122
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ea e7       	ldi	r30, 0x7A	; 122
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 61       	ori	r24, 0x10	; 16
     d34:	8c 93       	st	X, r24
	return (ADC);
     d36:	e8 e7       	ldi	r30, 0x78	; 120
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	91 81       	ldd	r25, Z+1	; 0x01
}
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <pwm_init>:
 * 	Configure timer 2 for extruder heater PWM
 *	Mode: 8 bit Fast PWM Fast w/OCR2A setting PWM freq (TOP value)
 *		  and OCR2B setting the duty cycle as a fraction of OCR2A seeting
 */
void pwm_init(void)
{
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
	TCCR2A  = PWM_INVERTED;		// alternative is PWM_NON_INVERTED
     d50:	e0 eb       	ldi	r30, 0xB0	; 176
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 ef       	ldi	r24, 0xF0	; 240
     d56:	80 83       	st	Z, r24
	TCCR2A |= 0b00000011;		// Waveform generation set to MODE 7 - here...
     d58:	a0 eb       	ldi	r26, 0xB0	; 176
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e0 eb       	ldi	r30, 0xB0	; 176
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	83 60       	ori	r24, 0x03	; 3
     d64:	8c 93       	st	X, r24
	TCCR2B  = 0b00001000;		// ...continued here
     d66:	e1 eb       	ldi	r30, 0xB1	; 177
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	88 e0       	ldi	r24, 0x08	; 8
     d6c:	80 83       	st	Z, r24
	TCCR2B |= PWM_PRESCALE_SET;	// set clock and prescaler
     d6e:	a1 eb       	ldi	r26, 0xB1	; 177
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e1 eb       	ldi	r30, 0xB1	; 177
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	84 60       	ori	r24, 0x04	; 4
     d7a:	8c 93       	st	X, r24
	TIMSK1 = 0; 				// disable PWM interrupts
     d7c:	ef e6       	ldi	r30, 0x6F	; 111
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	10 82       	st	Z, r1
	OCR2A = 0;					// clear PWM frequency (TOP value)
     d82:	e3 eb       	ldi	r30, 0xB3	; 179
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	10 82       	st	Z, r1
	OCR2B = 0;					// clear PWM duty cycle as % of TOP value
     d88:	e4 eb       	ldi	r30, 0xB4	; 180
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	10 82       	st	Z, r1
	device.pwm_freq = 0;
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	a0 e0       	ldi	r26, 0x00	; 0
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	80 93 03 01 	sts	0x0103, r24
     d9a:	90 93 04 01 	sts	0x0104, r25
     d9e:	a0 93 05 01 	sts	0x0105, r26
     da2:	b0 93 06 01 	sts	0x0106, r27
}
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <pwm_on>:

void pwm_on(double freq, double duty)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	28 97       	sbiw	r28, 0x08	; 8
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	69 83       	std	Y+1, r22	; 0x01
     dc2:	7a 83       	std	Y+2, r23	; 0x02
     dc4:	8b 83       	std	Y+3, r24	; 0x03
     dc6:	9c 83       	std	Y+4, r25	; 0x04
     dc8:	2d 83       	std	Y+5, r18	; 0x05
     dca:	3e 83       	std	Y+6, r19	; 0x06
     dcc:	4f 83       	std	Y+7, r20	; 0x07
     dce:	58 87       	std	Y+8, r21	; 0x08
	pwm_init();
     dd0:	0e 94 a4 06 	call	0xd48	; 0xd48 <pwm_init>
	pwm_set_freq(freq);
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	ab 81       	ldd	r26, Y+3	; 0x03
     dda:	bc 81       	ldd	r27, Y+4	; 0x04
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	0e 94 14 07 	call	0xe28	; 0xe28 <pwm_set_freq>
	pwm_set_duty(duty);
     de4:	8d 81       	ldd	r24, Y+5	; 0x05
     de6:	9e 81       	ldd	r25, Y+6	; 0x06
     de8:	af 81       	ldd	r26, Y+7	; 0x07
     dea:	b8 85       	ldd	r27, Y+8	; 0x08
     dec:	bc 01       	movw	r22, r24
     dee:	cd 01       	movw	r24, r26
     df0:	0e 94 7e 07 	call	0xefc	; 0xefc <pwm_set_duty>
}
     df4:	28 96       	adiw	r28, 0x08	; 8
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	08 95       	ret

00000e06 <pwm_off>:

void pwm_off(void)
{
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
	pwm_on(0,0);
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	40 e0       	ldi	r20, 0x00	; 0
     e1c:	50 e0       	ldi	r21, 0x00	; 0
     e1e:	0e 94 d6 06 	call	0xdac	; 0xdac <pwm_on>
}
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <pwm_set_freq>:
 *
 *	At current settings the range is from about 500 Hz to about 6000 Hz  
 */

uint8_t pwm_set_freq(double freq)
{
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	00 d0       	rcall	.+0      	; 0xe32 <pwm_set_freq+0xa>
     e32:	00 d0       	rcall	.+0      	; 0xe34 <pwm_set_freq+0xc>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	69 83       	std	Y+1, r22	; 0x01
     e3a:	7a 83       	std	Y+2, r23	; 0x02
     e3c:	8b 83       	std	Y+3, r24	; 0x03
     e3e:	9c 83       	std	Y+4, r25	; 0x04
	device.pwm_freq = F_CPU / PWM_PRESCALE / freq;
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	74 e2       	ldi	r23, 0x24	; 36
     e44:	84 ef       	ldi	r24, 0xF4	; 244
     e46:	97 e4       	ldi	r25, 0x47	; 71
     e48:	29 81       	ldd	r18, Y+1	; 0x01
     e4a:	3a 81       	ldd	r19, Y+2	; 0x02
     e4c:	4b 81       	ldd	r20, Y+3	; 0x03
     e4e:	5c 81       	ldd	r21, Y+4	; 0x04
     e50:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__divsf3>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	80 93 03 01 	sts	0x0103, r24
     e5c:	90 93 04 01 	sts	0x0104, r25
     e60:	a0 93 05 01 	sts	0x0105, r26
     e64:	b0 93 06 01 	sts	0x0106, r27
	if (device.pwm_freq < PWM_MIN_RES) { 
     e68:	80 91 03 01 	lds	r24, 0x0103
     e6c:	90 91 04 01 	lds	r25, 0x0104
     e70:	a0 91 05 01 	lds	r26, 0x0105
     e74:	b0 91 06 01 	lds	r27, 0x0106
     e78:	bc 01       	movw	r22, r24
     e7a:	cd 01       	movw	r24, r26
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 ea       	ldi	r20, 0xA0	; 160
     e82:	51 e4       	ldi	r21, 0x41	; 65
     e84:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__cmpsf2>
     e88:	88 23       	and	r24, r24
     e8a:	2c f4       	brge	.+10     	; 0xe96 <pwm_set_freq+0x6e>
		OCR2A = PWM_MIN_RES;
     e8c:	e3 eb       	ldi	r30, 0xB3	; 179
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	84 e1       	ldi	r24, 0x14	; 20
     e92:	80 83       	st	Z, r24
     e94:	29 c0       	rjmp	.+82     	; 0xee8 <pwm_set_freq+0xc0>
	} else if (device.pwm_freq >= PWM_MAX_RES) { 
     e96:	80 91 03 01 	lds	r24, 0x0103
     e9a:	90 91 04 01 	lds	r25, 0x0104
     e9e:	a0 91 05 01 	lds	r26, 0x0105
     ea2:	b0 91 06 01 	lds	r27, 0x0106
     ea6:	bc 01       	movw	r22, r24
     ea8:	cd 01       	movw	r24, r26
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	4f e7       	ldi	r20, 0x7F	; 127
     eb0:	53 e4       	ldi	r21, 0x43	; 67
     eb2:	0e 94 96 0c 	call	0x192c	; 0x192c <__gesf2>
     eb6:	88 23       	and	r24, r24
     eb8:	2c f0       	brlt	.+10     	; 0xec4 <pwm_set_freq+0x9c>
		OCR2A = PWM_MAX_RES;
     eba:	e3 eb       	ldi	r30, 0xB3	; 179
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
     ec0:	80 83       	st	Z, r24
     ec2:	12 c0       	rjmp	.+36     	; 0xee8 <pwm_set_freq+0xc0>
	} else { 
		OCR2A = (uint8_t)device.pwm_freq;
     ec4:	03 eb       	ldi	r16, 0xB3	; 179
     ec6:	10 e0       	ldi	r17, 0x00	; 0
     ec8:	80 91 03 01 	lds	r24, 0x0103
     ecc:	90 91 04 01 	lds	r25, 0x0104
     ed0:	a0 91 05 01 	lds	r26, 0x0105
     ed4:	b0 91 06 01 	lds	r27, 0x0106
     ed8:	bc 01       	movw	r22, r24
     eda:	cd 01       	movw	r24, r26
     edc:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	f8 01       	movw	r30, r16
     ee6:	80 83       	st	Z, r24
	}
	return (SC_OK);
     ee8:	80 e0       	ldi	r24, 0x00	; 0
}
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	08 95       	ret

00000efc <pwm_set_duty>:
 *	Since I can't seem to get the output pin to work in non-inverted mode
 *	it's done in software in this routine.
 */

uint8_t pwm_set_duty(double duty)
{
     efc:	cf 92       	push	r12
     efe:	df 92       	push	r13
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <pwm_set_duty+0x12>
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <pwm_set_duty+0x14>
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	69 83       	std	Y+1, r22	; 0x01
     f16:	7a 83       	std	Y+2, r23	; 0x02
     f18:	8b 83       	std	Y+3, r24	; 0x03
     f1a:	9c 83       	std	Y+4, r25	; 0x04
	if (duty <= 0) { 
     f1c:	69 81       	ldd	r22, Y+1	; 0x01
     f1e:	7a 81       	ldd	r23, Y+2	; 0x02
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	9c 81       	ldd	r25, Y+4	; 0x04
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__cmpsf2>
     f30:	18 16       	cp	r1, r24
     f32:	2c f0       	brlt	.+10     	; 0xf3e <pwm_set_duty+0x42>
		OCR2B = 255;
     f34:	e4 eb       	ldi	r30, 0xB4	; 180
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	80 83       	st	Z, r24
     f3c:	4a c0       	rjmp	.+148    	; 0xfd2 <pwm_set_duty+0xd6>
	} else if (duty > 100) { 
     f3e:	69 81       	ldd	r22, Y+1	; 0x01
     f40:	7a 81       	ldd	r23, Y+2	; 0x02
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	48 ec       	ldi	r20, 0xC8	; 200
     f4c:	52 e4       	ldi	r21, 0x42	; 66
     f4e:	0e 94 96 0c 	call	0x192c	; 0x192c <__gesf2>
     f52:	18 16       	cp	r1, r24
     f54:	24 f4       	brge	.+8      	; 0xf5e <pwm_set_duty+0x62>
		OCR2B = 0;
     f56:	e4 eb       	ldi	r30, 0xB4	; 180
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	10 82       	st	Z, r1
     f5c:	3a c0       	rjmp	.+116    	; 0xfd2 <pwm_set_duty+0xd6>
	} else {
		OCR2B = (uint8_t)(OCR2A * (1-(duty/100)));
     f5e:	0f 2e       	mov	r0, r31
     f60:	f4 eb       	ldi	r31, 0xB4	; 180
     f62:	cf 2e       	mov	r12, r31
     f64:	dd 24       	eor	r13, r13
     f66:	f0 2d       	mov	r31, r0
     f68:	e3 eb       	ldi	r30, 0xB3	; 179
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	88 2f       	mov	r24, r24
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	aa 27       	eor	r26, r26
     f74:	97 fd       	sbrc	r25, 7
     f76:	a0 95       	com	r26
     f78:	ba 2f       	mov	r27, r26
     f7a:	bc 01       	movw	r22, r24
     f7c:	cd 01       	movw	r24, r26
     f7e:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__floatsisf>
     f82:	7b 01       	movw	r14, r22
     f84:	8c 01       	movw	r16, r24
     f86:	69 81       	ldd	r22, Y+1	; 0x01
     f88:	7a 81       	ldd	r23, Y+2	; 0x02
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	9c 81       	ldd	r25, Y+4	; 0x04
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	48 ec       	ldi	r20, 0xC8	; 200
     f94:	52 ec       	ldi	r21, 0xC2	; 194
     f96:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__divsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	bc 01       	movw	r22, r24
     fa0:	cd 01       	movw	r24, r26
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	40 e8       	ldi	r20, 0x80	; 128
     fa8:	5f e3       	ldi	r21, 0x3F	; 63
     faa:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__addsf3>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	9c 01       	movw	r18, r24
     fb4:	ad 01       	movw	r20, r26
     fb6:	c8 01       	movw	r24, r16
     fb8:	b7 01       	movw	r22, r14
     fba:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__mulsf3>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	bc 01       	movw	r22, r24
     fc4:	cd 01       	movw	r24, r26
     fc6:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	f6 01       	movw	r30, r12
     fd0:	80 83       	st	Z, r24
	}
	OCR2A = (uint8_t)device.pwm_freq;
     fd2:	03 eb       	ldi	r16, 0xB3	; 179
     fd4:	10 e0       	ldi	r17, 0x00	; 0
     fd6:	80 91 03 01 	lds	r24, 0x0103
     fda:	90 91 04 01 	lds	r25, 0x0104
     fde:	a0 91 05 01 	lds	r26, 0x0105
     fe2:	b0 91 06 01 	lds	r27, 0x0106
     fe6:	bc 01       	movw	r22, r24
     fe8:	cd 01       	movw	r24, r26
     fea:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	f8 01       	movw	r30, r16
     ff4:	80 83       	st	Z, r24
	return (SC_OK);
     ff6:	80 e0       	ldi	r24, 0x00	; 0
}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	ff 90       	pop	r15
    100a:	ef 90       	pop	r14
    100c:	df 90       	pop	r13
    100e:	cf 90       	pop	r12
    1010:	08 95       	ret

00001012 <tick_init>:
 * tick_100ms()	  - tasks that run every 100 ms
 * tick_1sec()	  - tasks that run every 100 ms
 */

void tick_init(void)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0x00;				// normal mode, no compare values
    101a:	e4 e4       	ldi	r30, 0x44	; 68
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	10 82       	st	Z, r1
	TCCR0B = 0x05;				// normal mode, internal clock / 1024 ~= 7800 Hz
    1020:	e5 e4       	ldi	r30, 0x45	; 69
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	85 e0       	ldi	r24, 0x05	; 5
    1026:	80 83       	st	Z, r24
	TCNT0 = (256 - TICK_10MS_COUNT);// set timer for approx 10 ms overflow
    1028:	e6 e4       	ldi	r30, 0x46	; 70
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	82 eb       	ldi	r24, 0xB2	; 178
    102e:	80 83       	st	Z, r24
	TIMSK0 = (1<<TOIE0);		// enable overflow interrupts
    1030:	ee e6       	ldi	r30, 0x6E	; 110
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	80 83       	st	Z, r24
	device.tick_100ms_count = 10;
    1038:	8a e0       	ldi	r24, 0x0A	; 10
    103a:	80 93 01 01 	sts	0x0101, r24
	device.tick_1sec_count = 10;	
    103e:	8a e0       	ldi	r24, 0x0A	; 10
    1040:	80 93 02 01 	sts	0x0102, r24
}
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <__vector_16>:

ISR(TIMER0_OVF_vect)
{
    104a:	1f 92       	push	r1
    104c:	0f 92       	push	r0
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	0f 92       	push	r0
    1052:	11 24       	eor	r1, r1
    1054:	8f 93       	push	r24
    1056:	ef 93       	push	r30
    1058:	ff 93       	push	r31
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = (256 - TICK_10MS_COUNT);	// reset timer for approx 10 ms overflow
    1062:	e6 e4       	ldi	r30, 0x46	; 70
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	82 eb       	ldi	r24, 0xB2	; 178
    1068:	80 83       	st	Z, r24
	device.tick_flag = true;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	80 93 00 01 	sts	0x0100, r24
}
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	ff 91       	pop	r31
    1076:	ef 91       	pop	r30
    1078:	8f 91       	pop	r24
    107a:	0f 90       	pop	r0
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	0f 90       	pop	r0
    1080:	1f 90       	pop	r1
    1082:	18 95       	reti

00001084 <tick_callback>:

uint8_t tick_callback(void)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	0f 92       	push	r0
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
	if (device.tick_flag == false) { return (SC_NOOP);}
    108e:	80 91 00 01 	lds	r24, 0x0100
    1092:	88 23       	and	r24, r24
    1094:	19 f4       	brne	.+6      	; 0x109c <tick_callback+0x18>
    1096:	83 e0       	ldi	r24, 0x03	; 3
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	25 c0       	rjmp	.+74     	; 0x10e6 <tick_callback+0x62>
	device.tick_flag = false;
    109c:	10 92 00 01 	sts	0x0100, r1

	tick_10ms();
    10a0:	0e 94 78 08 	call	0x10f0	; 0x10f0 <tick_10ms>

	if (--device.tick_100ms_count != 0) { return (SC_OK);}
    10a4:	80 91 01 01 	lds	r24, 0x0101
    10a8:	81 50       	subi	r24, 0x01	; 1
    10aa:	80 93 01 01 	sts	0x0101, r24
    10ae:	80 91 01 01 	lds	r24, 0x0101
    10b2:	88 23       	and	r24, r24
    10b4:	11 f0       	breq	.+4      	; 0x10ba <tick_callback+0x36>
    10b6:	19 82       	std	Y+1, r1	; 0x01
    10b8:	16 c0       	rjmp	.+44     	; 0x10e6 <tick_callback+0x62>
	device.tick_100ms_count = 10;
    10ba:	8a e0       	ldi	r24, 0x0A	; 10
    10bc:	80 93 01 01 	sts	0x0101, r24
	tick_100ms();
    10c0:	0e 94 81 08 	call	0x1102	; 0x1102 <tick_100ms>

	if (--device.tick_1sec_count != 0) { return (SC_OK);}
    10c4:	80 91 02 01 	lds	r24, 0x0102
    10c8:	81 50       	subi	r24, 0x01	; 1
    10ca:	80 93 02 01 	sts	0x0102, r24
    10ce:	80 91 02 01 	lds	r24, 0x0102
    10d2:	88 23       	and	r24, r24
    10d4:	11 f0       	breq	.+4      	; 0x10da <tick_callback+0x56>
    10d6:	19 82       	std	Y+1, r1	; 0x01
    10d8:	06 c0       	rjmp	.+12     	; 0x10e6 <tick_callback+0x62>
	device.tick_1sec_count = 10;
    10da:	8a e0       	ldi	r24, 0x0A	; 10
    10dc:	80 93 02 01 	sts	0x0102, r24
	tick_1sec();
    10e0:	0e 94 8a 08 	call	0x1114	; 0x1114 <tick_1sec>

	return (SC_OK);
    10e4:	19 82       	std	Y+1, r1	; 0x01
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e8:	0f 90       	pop	r0
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <tick_10ms>:

void tick_10ms(void)
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
	sensor_callback();			// run the temperature sensor every 10 ms.
    10f8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sensor_callback>
}
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <tick_100ms>:

void tick_100ms(void)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
	heater_callback();			// run the heater controller every 100 ms.
    110a:	0e 94 17 01 	call	0x22e	; 0x22e <heater_callback>
}
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <tick_1sec>:

void tick_1sec(void)
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
//	led_toggle();
	return;
}
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <led_on>:
 * led_off()
 * led_toggle()
 */

void led_on(void) 
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
	LED_PORT &= ~(LED_PIN);
    112a:	ab e2       	ldi	r26, 0x2B	; 43
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	eb e2       	ldi	r30, 0x2B	; 43
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8b 7f       	andi	r24, 0xFB	; 251
    1136:	8c 93       	st	X, r24
}
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <led_off>:

void led_off(void) 
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
	LED_PORT |= LED_PIN;
    1146:	ab e2       	ldi	r26, 0x2B	; 43
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	eb e2       	ldi	r30, 0x2B	; 43
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	84 60       	ori	r24, 0x04	; 4
    1152:	8c 93       	st	X, r24
}
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <led_toggle>:

void led_toggle(void) 
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
	if (LED_PORT && LED_PIN) {
    1162:	eb e2       	ldi	r30, 0x2B	; 43
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	88 23       	and	r24, r24
    116a:	19 f0       	breq	.+6      	; 0x1172 <led_toggle+0x18>
		led_on();
    116c:	0e 94 91 08 	call	0x1122	; 0x1122 <led_on>
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <led_toggle+0x1c>
	} else {
		led_off();
    1172:	0e 94 9f 08 	call	0x113e	; 0x113e <led_off>
	}
}
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <device_reset>:
 *	device_read_byte() 	- read a byte from Kinen channel into device structs
 *	device_write_byte() - write a byte from device to Kinen channel
 */

void device_reset(void)
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
	return;
}
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <device_read_byte>:

uint8_t device_read_byte(uint8_t addr, uint8_t *data)
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <device_read_byte+0x6>
    1190:	00 d0       	rcall	.+0      	; 0x1192 <device_read_byte+0x8>
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	7b 83       	std	Y+3, r23	; 0x03
    119a:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	80 51       	subi	r24, 0x10	; 16
    11a0:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	8b 30       	cpi	r24, 0x0B	; 11
    11a6:	18 f0       	brcs	.+6      	; 0x11ae <device_read_byte+0x24>
    11a8:	88 e1       	ldi	r24, 0x18	; 24
    11aa:	8c 83       	std	Y+4, r24	; 0x04
    11ac:	0b c0       	rjmp	.+22     	; 0x11c4 <device_read_byte+0x3a>
	*data = device.array[addr];
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	fc 01       	movw	r30, r24
    11b6:	e9 5f       	subi	r30, 0xF9	; 249
    11b8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ba:	80 81       	ld	r24, Z
    11bc:	ea 81       	ldd	r30, Y+2	; 0x02
    11be:	fb 81       	ldd	r31, Y+3	; 0x03
    11c0:	80 83       	st	Z, r24
	return (SC_OK);
    11c2:	1c 82       	std	Y+4, r1	; 0x04
    11c4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <device_write_byte>:

uint8_t device_write_byte(uint8_t addr, uint8_t data)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	00 d0       	rcall	.+0      	; 0x11da <device_write_byte+0x6>
    11da:	0f 92       	push	r0
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	80 51       	subi	r24, 0x10	; 16
    11e8:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	8b 30       	cpi	r24, 0x0B	; 11
    11ee:	18 f0       	brcs	.+6      	; 0x11f6 <device_write_byte+0x22>
    11f0:	88 e1       	ldi	r24, 0x18	; 24
    11f2:	8b 83       	std	Y+3, r24	; 0x03
    11f4:	09 c0       	rjmp	.+18     	; 0x1208 <device_write_byte+0x34>
	// There are no checks in here for read-only locations
	// Assumes all locations are writable.
	device.array[addr] = data;
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	88 2f       	mov	r24, r24
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	fc 01       	movw	r30, r24
    11fe:	e9 5f       	subi	r30, 0xF9	; 249
    1200:	fe 4f       	sbci	r31, 0xFE	; 254
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	80 83       	st	Z, r24
	return (SC_OK);
    1206:	1b 82       	std	Y+3, r1	; 0x03
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <kinen_init>:
 * kinen_init() - set up Kinen subsystems; master or slave
 *
 *	Would like some kind of auto-detect here. For now it's just commenting
 */
void kinen_init(void)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
//	kinen_master_init();
	kinen_slave_init();
    121e:	0e 94 1c 09 	call	0x1238	; 0x1238 <kinen_slave_init>
}
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <kinen_callback>:
 *	Returns SC_NOOP if no operation was performed
 *	Returns EAGAIN if the function should block lower-priority functions
 *	in the main DISPATCH loop
 */
uint8_t kinen_callback(void)
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
//	return (SC_OK);			// return from a successful operation
//	return (SC_EAGAIN);		// return if lower priority tasks should be blocked
	return (SC_NOOP);		// return if no operation was performed 
    1230:	83 e0       	ldi	r24, 0x03	; 3
}
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <kinen_slave_init>:

/*
 * kinen_slave_init() - setup atmega SPI peripheral to be the OCB slave 
 */
void kinen_slave_init(void)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62

//	PRR |= 0x07;				// don't screw with the power reduction register
	DDRB &= ~(1<<DDB4);			// Set MISO output, all others unaffected
    1240:	a4 e2       	ldi	r26, 0x24	; 36
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e4 e2       	ldi	r30, 0x24	; 36
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	8f 7e       	andi	r24, 0xEF	; 239
    124c:	8c 93       	st	X, r24
	SPCR = (1<<SPIE | 1<<SPE);	// Enable SPI and its interrupt, set MSB first, slave mode
    124e:	ec e4       	ldi	r30, 0x4C	; 76
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 ec       	ldi	r24, 0xC0	; 192
    1254:	80 83       	st	Z, r24
	SPCR = (1<<CPOL | 1<<CPHA);	// Uncomment for mode 3 operation, comment for mode 0
    1256:	ec e4       	ldi	r30, 0x4C	; 76
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	8c e0       	ldi	r24, 0x0C	; 12
    125c:	80 83       	st	Z, r24
	memset(&ki.array, 0, sizeof(ki.array));
    125e:	8e ea       	ldi	r24, 0xAE	; 174
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	40 e1       	ldi	r20, 0x10	; 16
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <memset>

	ki_wait_time = DEVICE_WAIT_TIME;	// setup read-only values
    126e:	8a e0       	ldi	r24, 0x0A	; 10
    1270:	80 93 b1 01 	sts	0x01B1, r24
	ki_device_type = DEVICE_TYPE;
    1274:	84 e0       	ldi	r24, 0x04	; 4
    1276:	80 93 b6 01 	sts	0x01B6, r24
	ki_device_id_hi = DEVICE_ID_HI;
    127a:	10 92 b7 01 	sts	0x01B7, r1
	ki_device_id_lo = DEVICE_ID_LO;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	80 93 b8 01 	sts	0x01B8, r24
	ki_device_rev_major = DEVICE_REV_MAJOR;
    1284:	10 92 b9 01 	sts	0x01B9, r1
	ki_device_rev_minor = DEVICE_REV_MINOR;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	80 93 ba 01 	sts	0x01BA, r24
	ki_device_uuid_1 = DEVICE_UUID_1;
    128e:	10 92 bb 01 	sts	0x01BB, r1
	ki_device_uuid_2 = DEVICE_UUID_2;
    1292:	10 92 bc 01 	sts	0x01BC, r1
	ki_device_uuid_3 = DEVICE_UUID_3;
    1296:	10 92 bd 01 	sts	0x01BD, r1

	ki_status = SC_OK;
    129a:	10 92 af 01 	sts	0x01AF, r1
	SPDR = ki_status;
    129e:	ee e4       	ldi	r30, 0x4E	; 78
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 91 af 01 	lds	r24, 0x01AF
    12a6:	80 83       	st	Z, r24
}
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <__vector_17>:
 * SPI Slave RX Interrupt() - interrupts on byte received
 *
 * Uses a 2 phase state machine to toggle back and forth between ADDR and DATA bytes
 */
ISR(SPI_STC_vect)
{
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	2f 93       	push	r18
    12ba:	3f 93       	push	r19
    12bc:	4f 93       	push	r20
    12be:	5f 93       	push	r21
    12c0:	6f 93       	push	r22
    12c2:	7f 93       	push	r23
    12c4:	8f 93       	push	r24
    12c6:	9f 93       	push	r25
    12c8:	af 93       	push	r26
    12ca:	bf 93       	push	r27
    12cc:	ef 93       	push	r30
    12ce:	ff 93       	push	r31
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
	// receive address byte
	if (ki_slave.phase == KINEN_ADDR) {
    12d8:	80 91 a9 01 	lds	r24, 0x01A9
    12dc:	88 23       	and	r24, r24
    12de:	c9 f5       	brne	.+114    	; 0x1352 <__vector_17+0xa4>
		ki_slave.phase = KINEN_DATA;	// advance phase
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	80 93 a9 01 	sts	0x01A9, r24
		ki_slave.addr = SPDR;		// read and save the address byte
    12e6:	ee e4       	ldi	r30, 0x4E	; 78
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 93 aa 01 	sts	0x01AA, r24
		if (ki_command == KINEN_WRITE) { // write is simple...
    12f0:	80 91 ae 01 	lds	r24, 0x01AE
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	29 f4       	brne	.+10     	; 0x1302 <__vector_17+0x54>
			SPDR = KINEN_OK_BYTE;			// already saved addr, now return an OK
    12f8:	ee e4       	ldi	r30, 0x4E	; 78
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	8a e5       	ldi	r24, 0x5A	; 90
    12fe:	80 83       	st	Z, r24
    1300:	4a c0       	rjmp	.+148    	; 0x1396 <__vector_17+0xe8>
		} else {
			if (ki_slave.addr < KINEN_COMMON_MAX) {	// handle OCB address space
    1302:	80 91 aa 01 	lds	r24, 0x01AA
    1306:	80 31       	cpi	r24, 0x10	; 16
    1308:	60 f4       	brcc	.+24     	; 0x1322 <__vector_17+0x74>
				SPDR = ki.array[ki_slave.addr];
    130a:	ae e4       	ldi	r26, 0x4E	; 78
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	80 91 aa 01 	lds	r24, 0x01AA
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	fc 01       	movw	r30, r24
    1318:	e2 55       	subi	r30, 0x52	; 82
    131a:	fe 4f       	sbci	r31, 0xFE	; 254
    131c:	80 81       	ld	r24, Z
    131e:	8c 93       	st	X, r24
    1320:	3a c0       	rjmp	.+116    	; 0x1396 <__vector_17+0xe8>
			} else {								// handle device address space
				if ((ki_status = device_read_byte(ki_slave.addr, &ki_slave.data)) == SC_OK) {
    1322:	80 91 aa 01 	lds	r24, 0x01AA
    1326:	2b ea       	ldi	r18, 0xAB	; 171
    1328:	31 e0       	ldi	r19, 0x01	; 1
    132a:	b9 01       	movw	r22, r18
    132c:	0e 94 c5 08 	call	0x118a	; 0x118a <device_read_byte>
    1330:	80 93 af 01 	sts	0x01AF, r24
    1334:	80 91 af 01 	lds	r24, 0x01AF
    1338:	88 23       	and	r24, r24
    133a:	31 f4       	brne	.+12     	; 0x1348 <__vector_17+0x9a>
					SPDR = ki_slave.data;
    133c:	ee e4       	ldi	r30, 0x4E	; 78
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 91 ab 01 	lds	r24, 0x01AB
    1344:	80 83       	st	Z, r24
    1346:	27 c0       	rjmp	.+78     	; 0x1396 <__vector_17+0xe8>
				} else {
					SPDR = KINEN_ERR_BYTE;
    1348:	ee e4       	ldi	r30, 0x4E	; 78
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	85 ea       	ldi	r24, 0xA5	; 165
    134e:	80 83       	st	Z, r24
    1350:	22 c0       	rjmp	.+68     	; 0x1396 <__vector_17+0xe8>
			}
		}

	// receive data byte
	} else {
		ki_slave.phase = KINEN_ADDR;	// advance phase
    1352:	10 92 a9 01 	sts	0x01A9, r1
		ki_slave.data = SPDR;		// read and save the data byte
    1356:	ee e4       	ldi	r30, 0x4E	; 78
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	80 93 ab 01 	sts	0x01AB, r24
		if (ki_command == KINEN_WRITE) {
    1360:	80 91 ae 01 	lds	r24, 0x01AE
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	b9 f4       	brne	.+46     	; 0x1396 <__vector_17+0xe8>
			if (ki_slave.addr < KINEN_COMMON_MAX) {
    1368:	80 91 aa 01 	lds	r24, 0x01AA
    136c:	80 31       	cpi	r24, 0x10	; 16
    136e:	50 f4       	brcc	.+20     	; 0x1384 <__vector_17+0xd6>
				ki_status = _slave_write_byte(ki_slave.addr, ki_slave.data);
    1370:	80 91 aa 01 	lds	r24, 0x01AA
    1374:	90 91 ab 01 	lds	r25, 0x01AB
    1378:	69 2f       	mov	r22, r25
    137a:	0e 94 de 09 	call	0x13bc	; 0x13bc <_slave_write_byte>
    137e:	80 93 af 01 	sts	0x01AF, r24
    1382:	09 c0       	rjmp	.+18     	; 0x1396 <__vector_17+0xe8>
			} else {
				ki_status = device_write_byte(ki_slave.addr, ki_slave.data);
    1384:	80 91 aa 01 	lds	r24, 0x01AA
    1388:	90 91 ab 01 	lds	r25, 0x01AB
    138c:	69 2f       	mov	r22, r25
    138e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <device_write_byte>
    1392:	80 93 af 01 	sts	0x01AF, r24
			}
		}
	}
}
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	ff 91       	pop	r31
    139c:	ef 91       	pop	r30
    139e:	bf 91       	pop	r27
    13a0:	af 91       	pop	r26
    13a2:	9f 91       	pop	r25
    13a4:	8f 91       	pop	r24
    13a6:	7f 91       	pop	r23
    13a8:	6f 91       	pop	r22
    13aa:	5f 91       	pop	r21
    13ac:	4f 91       	pop	r20
    13ae:	3f 91       	pop	r19
    13b0:	2f 91       	pop	r18
    13b2:	0f 90       	pop	r0
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	0f 90       	pop	r0
    13b8:	1f 90       	pop	r1
    13ba:	18 95       	reti

000013bc <_slave_write_byte>:

/* 
 * _slave_write_byte() - helper to write byte to a non-device address
 */
static uint8_t _slave_write_byte(const uint8_t addr, const uint8_t data)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <_slave_write_byte+0x6>
    13c2:	0f 92       	push	r0
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	6a 83       	std	Y+2, r22	; 0x02
	if (addr == KINEN_COMMAND) {
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	88 23       	and	r24, r24
    13d0:	21 f4       	brne	.+8      	; 0x13da <_slave_write_byte+0x1e>
		ki_command = data; 
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	80 93 ae 01 	sts	0x01AE, r24
    13d8:	12 c0       	rjmp	.+36     	; 0x13fe <_slave_write_byte+0x42>

	} else if (addr == KINEN_ADDR_PAGE) { 
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	84 30       	cpi	r24, 0x04	; 4
    13de:	21 f4       	brne	.+8      	; 0x13e8 <_slave_write_byte+0x2c>
		ki_addr_page = data; 
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	80 93 b2 01 	sts	0x01B2, r24
    13e6:	0b c0       	rjmp	.+22     	; 0x13fe <_slave_write_byte+0x42>

	} else if (addr == KINEN_RESET) {
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	85 30       	cpi	r24, 0x05	; 5
    13ec:	29 f4       	brne	.+10     	; 0x13f8 <_slave_write_byte+0x3c>
		kinen_slave_init();
    13ee:	0e 94 1c 09 	call	0x1238	; 0x1238 <kinen_slave_init>
		device_reset();
    13f2:	0e 94 be 08 	call	0x117c	; 0x117c <device_reset>
    13f6:	03 c0       	rjmp	.+6      	; 0x13fe <_slave_write_byte+0x42>

	} else {
		return (SC_READ_ONLY_ADDRESS);
    13f8:	89 e1       	ldi	r24, 0x19	; 25
    13fa:	8b 83       	std	Y+3, r24	; 0x03
    13fc:	01 c0       	rjmp	.+2      	; 0x1400 <_slave_write_byte+0x44>
	}
	return (SC_OK);
    13fe:	1b 82       	std	Y+3, r1	; 0x03
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <std_dev>:
 *
 *	"A lot of people talk about standard deviation but what is a standard deviant?"
 */

double std_dev(double a[], uint8_t n, double *mean) 
{
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	66 97       	sbiw	r28, 0x16	; 22
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	9f 87       	std	Y+15, r25	; 0x0f
    142c:	8e 87       	std	Y+14, r24	; 0x0e
    142e:	68 8b       	std	Y+16, r22	; 0x10
    1430:	5a 8b       	std	Y+18, r21	; 0x12
    1432:	49 8b       	std	Y+17, r20	; 0x11
	if(n == 0) { return (0);}
    1434:	88 89       	ldd	r24, Y+16	; 0x10
    1436:	88 23       	and	r24, r24
    1438:	49 f4       	brne	.+18     	; 0x144c <std_dev+0x3e>
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a0 e0       	ldi	r26, 0x00	; 0
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	8b 8b       	std	Y+19, r24	; 0x13
    1444:	9c 8b       	std	Y+20, r25	; 0x14
    1446:	ad 8b       	std	Y+21, r26	; 0x15
    1448:	be 8b       	std	Y+22, r27	; 0x16
    144a:	ae c0       	rjmp	.+348    	; 0x15a8 <std_dev+0x19a>
	double sum = 0;
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a0 e0       	ldi	r26, 0x00	; 0
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	8a 87       	std	Y+10, r24	; 0x0a
    1456:	9b 87       	std	Y+11, r25	; 0x0b
    1458:	ac 87       	std	Y+12, r26	; 0x0c
    145a:	bd 87       	std	Y+13, r27	; 0x0d
	double sq_sum = 0;
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	a0 e0       	ldi	r26, 0x00	; 0
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	8e 83       	std	Y+6, r24	; 0x06
    1466:	9f 83       	std	Y+7, r25	; 0x07
    1468:	a8 87       	std	Y+8, r26	; 0x08
    146a:	b9 87       	std	Y+9, r27	; 0x09
	for(uint8_t i=0; i<n; ++i) {
    146c:	19 82       	std	Y+1, r1	; 0x01
    146e:	43 c0       	rjmp	.+134    	; 0x14f6 <std_dev+0xe8>
		sum += a[i];
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	88 2f       	mov	r24, r24
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9c 01       	movw	r18, r24
    1478:	22 0f       	add	r18, r18
    147a:	33 1f       	adc	r19, r19
    147c:	22 0f       	add	r18, r18
    147e:	33 1f       	adc	r19, r19
    1480:	8e 85       	ldd	r24, Y+14	; 0x0e
    1482:	9f 85       	ldd	r25, Y+15	; 0x0f
    1484:	fc 01       	movw	r30, r24
    1486:	e2 0f       	add	r30, r18
    1488:	f3 1f       	adc	r31, r19
    148a:	20 81       	ld	r18, Z
    148c:	31 81       	ldd	r19, Z+1	; 0x01
    148e:	42 81       	ldd	r20, Z+2	; 0x02
    1490:	53 81       	ldd	r21, Z+3	; 0x03
    1492:	6a 85       	ldd	r22, Y+10	; 0x0a
    1494:	7b 85       	ldd	r23, Y+11	; 0x0b
    1496:	8c 85       	ldd	r24, Y+12	; 0x0c
    1498:	9d 85       	ldd	r25, Y+13	; 0x0d
    149a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__addsf3>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	8a 87       	std	Y+10, r24	; 0x0a
    14a4:	9b 87       	std	Y+11, r25	; 0x0b
    14a6:	ac 87       	std	Y+12, r26	; 0x0c
    14a8:	bd 87       	std	Y+13, r27	; 0x0d
		sq_sum += square(a[i]);
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9c 01       	movw	r18, r24
    14b2:	22 0f       	add	r18, r18
    14b4:	33 1f       	adc	r19, r19
    14b6:	22 0f       	add	r18, r18
    14b8:	33 1f       	adc	r19, r19
    14ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    14bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    14be:	fc 01       	movw	r30, r24
    14c0:	e2 0f       	add	r30, r18
    14c2:	f3 1f       	adc	r31, r19
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	a2 81       	ldd	r26, Z+2	; 0x02
    14ca:	b3 81       	ldd	r27, Z+3	; 0x03
    14cc:	bc 01       	movw	r22, r24
    14ce:	cd 01       	movw	r24, r26
    14d0:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <square>
    14d4:	9b 01       	movw	r18, r22
    14d6:	ac 01       	movw	r20, r24
    14d8:	6e 81       	ldd	r22, Y+6	; 0x06
    14da:	7f 81       	ldd	r23, Y+7	; 0x07
    14dc:	88 85       	ldd	r24, Y+8	; 0x08
    14de:	99 85       	ldd	r25, Y+9	; 0x09
    14e0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__addsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	8e 83       	std	Y+6, r24	; 0x06
    14ea:	9f 83       	std	Y+7, r25	; 0x07
    14ec:	a8 87       	std	Y+8, r26	; 0x08
    14ee:	b9 87       	std	Y+9, r27	; 0x09
double std_dev(double a[], uint8_t n, double *mean) 
{
	if(n == 0) { return (0);}
	double sum = 0;
	double sq_sum = 0;
	for(uint8_t i=0; i<n; ++i) {
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	8f 5f       	subi	r24, 0xFF	; 255
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	99 81       	ldd	r25, Y+1	; 0x01
    14f8:	88 89       	ldd	r24, Y+16	; 0x10
    14fa:	98 17       	cp	r25, r24
    14fc:	08 f4       	brcc	.+2      	; 0x1500 <std_dev+0xf2>
    14fe:	b8 cf       	rjmp	.-144    	; 0x1470 <std_dev+0x62>
		sum += a[i];
		sq_sum += square(a[i]);
	}
	*mean = sum / n;
    1500:	88 89       	ldd	r24, Y+16	; 0x10
    1502:	88 2f       	mov	r24, r24
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	aa 27       	eor	r26, r26
    1508:	97 fd       	sbrc	r25, 7
    150a:	a0 95       	com	r26
    150c:	ba 2f       	mov	r27, r26
    150e:	bc 01       	movw	r22, r24
    1510:	cd 01       	movw	r24, r26
    1512:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__floatsisf>
    1516:	9b 01       	movw	r18, r22
    1518:	ac 01       	movw	r20, r24
    151a:	6a 85       	ldd	r22, Y+10	; 0x0a
    151c:	7b 85       	ldd	r23, Y+11	; 0x0b
    151e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1520:	9d 85       	ldd	r25, Y+13	; 0x0d
    1522:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__divsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	e9 89       	ldd	r30, Y+17	; 0x11
    152c:	fa 89       	ldd	r31, Y+18	; 0x12
    152e:	80 83       	st	Z, r24
    1530:	91 83       	std	Z+1, r25	; 0x01
    1532:	a2 83       	std	Z+2, r26	; 0x02
    1534:	b3 83       	std	Z+3, r27	; 0x03
	double variance = (sq_sum / n) - square(*mean);
    1536:	88 89       	ldd	r24, Y+16	; 0x10
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	aa 27       	eor	r26, r26
    153e:	97 fd       	sbrc	r25, 7
    1540:	a0 95       	com	r26
    1542:	ba 2f       	mov	r27, r26
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__floatsisf>
    154c:	9b 01       	movw	r18, r22
    154e:	ac 01       	movw	r20, r24
    1550:	6e 81       	ldd	r22, Y+6	; 0x06
    1552:	7f 81       	ldd	r23, Y+7	; 0x07
    1554:	88 85       	ldd	r24, Y+8	; 0x08
    1556:	99 85       	ldd	r25, Y+9	; 0x09
    1558:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__divsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	7c 01       	movw	r14, r24
    1562:	8d 01       	movw	r16, r26
    1564:	e9 89       	ldd	r30, Y+17	; 0x11
    1566:	fa 89       	ldd	r31, Y+18	; 0x12
    1568:	80 81       	ld	r24, Z
    156a:	91 81       	ldd	r25, Z+1	; 0x01
    156c:	a2 81       	ldd	r26, Z+2	; 0x02
    156e:	b3 81       	ldd	r27, Z+3	; 0x03
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <square>
    1578:	9b 01       	movw	r18, r22
    157a:	ac 01       	movw	r20, r24
    157c:	c8 01       	movw	r24, r16
    157e:	b7 01       	movw	r22, r14
    1580:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__subsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	8a 83       	std	Y+2, r24	; 0x02
    158a:	9b 83       	std	Y+3, r25	; 0x03
    158c:	ac 83       	std	Y+4, r26	; 0x04
    158e:	bd 83       	std	Y+5, r27	; 0x05
	return sqrt(variance);
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	9b 81       	ldd	r25, Y+3	; 0x03
    1594:	ac 81       	ldd	r26, Y+4	; 0x04
    1596:	bd 81       	ldd	r27, Y+5	; 0x05
    1598:	bc 01       	movw	r22, r24
    159a:	cd 01       	movw	r24, r26
    159c:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <sqrt>
    15a0:	6b 8b       	std	Y+19, r22	; 0x13
    15a2:	7c 8b       	std	Y+20, r23	; 0x14
    15a4:	8d 8b       	std	Y+21, r24	; 0x15
    15a6:	9e 8b       	std	Y+22, r25	; 0x16
    15a8:	8b 89       	ldd	r24, Y+19	; 0x13
    15aa:	9c 89       	ldd	r25, Y+20	; 0x14
    15ac:	ad 89       	ldd	r26, Y+21	; 0x15
    15ae:	be 89       	ldd	r27, Y+22	; 0x16
}
    15b0:	bc 01       	movw	r22, r24
    15b2:	cd 01       	movw	r24, r26
    15b4:	66 96       	adiw	r28, 0x16	; 22
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	08 95       	ret

000015ce <__subsf3>:
    15ce:	50 58       	subi	r21, 0x80	; 128

000015d0 <__addsf3>:
    15d0:	bb 27       	eor	r27, r27
    15d2:	aa 27       	eor	r26, r26
    15d4:	0e d0       	rcall	.+28     	; 0x15f2 <__addsf3x>
    15d6:	70 c1       	rjmp	.+736    	; 0x18b8 <__fp_round>
    15d8:	61 d1       	rcall	.+706    	; 0x189c <__fp_pscA>
    15da:	30 f0       	brcs	.+12     	; 0x15e8 <__addsf3+0x18>
    15dc:	66 d1       	rcall	.+716    	; 0x18aa <__fp_pscB>
    15de:	20 f0       	brcs	.+8      	; 0x15e8 <__addsf3+0x18>
    15e0:	31 f4       	brne	.+12     	; 0x15ee <__addsf3+0x1e>
    15e2:	9f 3f       	cpi	r25, 0xFF	; 255
    15e4:	11 f4       	brne	.+4      	; 0x15ea <__addsf3+0x1a>
    15e6:	1e f4       	brtc	.+6      	; 0x15ee <__addsf3+0x1e>
    15e8:	56 c1       	rjmp	.+684    	; 0x1896 <__fp_nan>
    15ea:	0e f4       	brtc	.+2      	; 0x15ee <__addsf3+0x1e>
    15ec:	e0 95       	com	r30
    15ee:	e7 fb       	bst	r30, 7
    15f0:	4c c1       	rjmp	.+664    	; 0x188a <__fp_inf>

000015f2 <__addsf3x>:
    15f2:	e9 2f       	mov	r30, r25
    15f4:	72 d1       	rcall	.+740    	; 0x18da <__fp_split3>
    15f6:	80 f3       	brcs	.-32     	; 0x15d8 <__addsf3+0x8>
    15f8:	ba 17       	cp	r27, r26
    15fa:	62 07       	cpc	r22, r18
    15fc:	73 07       	cpc	r23, r19
    15fe:	84 07       	cpc	r24, r20
    1600:	95 07       	cpc	r25, r21
    1602:	18 f0       	brcs	.+6      	; 0x160a <__addsf3x+0x18>
    1604:	71 f4       	brne	.+28     	; 0x1622 <__addsf3x+0x30>
    1606:	9e f5       	brtc	.+102    	; 0x166e <__addsf3x+0x7c>
    1608:	8a c1       	rjmp	.+788    	; 0x191e <__fp_zero>
    160a:	0e f4       	brtc	.+2      	; 0x160e <__addsf3x+0x1c>
    160c:	e0 95       	com	r30
    160e:	0b 2e       	mov	r0, r27
    1610:	ba 2f       	mov	r27, r26
    1612:	a0 2d       	mov	r26, r0
    1614:	0b 01       	movw	r0, r22
    1616:	b9 01       	movw	r22, r18
    1618:	90 01       	movw	r18, r0
    161a:	0c 01       	movw	r0, r24
    161c:	ca 01       	movw	r24, r20
    161e:	a0 01       	movw	r20, r0
    1620:	11 24       	eor	r1, r1
    1622:	ff 27       	eor	r31, r31
    1624:	59 1b       	sub	r21, r25
    1626:	99 f0       	breq	.+38     	; 0x164e <__addsf3x+0x5c>
    1628:	59 3f       	cpi	r21, 0xF9	; 249
    162a:	50 f4       	brcc	.+20     	; 0x1640 <__addsf3x+0x4e>
    162c:	50 3e       	cpi	r21, 0xE0	; 224
    162e:	68 f1       	brcs	.+90     	; 0x168a <__addsf3x+0x98>
    1630:	1a 16       	cp	r1, r26
    1632:	f0 40       	sbci	r31, 0x00	; 0
    1634:	a2 2f       	mov	r26, r18
    1636:	23 2f       	mov	r18, r19
    1638:	34 2f       	mov	r19, r20
    163a:	44 27       	eor	r20, r20
    163c:	58 5f       	subi	r21, 0xF8	; 248
    163e:	f3 cf       	rjmp	.-26     	; 0x1626 <__addsf3x+0x34>
    1640:	46 95       	lsr	r20
    1642:	37 95       	ror	r19
    1644:	27 95       	ror	r18
    1646:	a7 95       	ror	r26
    1648:	f0 40       	sbci	r31, 0x00	; 0
    164a:	53 95       	inc	r21
    164c:	c9 f7       	brne	.-14     	; 0x1640 <__addsf3x+0x4e>
    164e:	7e f4       	brtc	.+30     	; 0x166e <__addsf3x+0x7c>
    1650:	1f 16       	cp	r1, r31
    1652:	ba 0b       	sbc	r27, r26
    1654:	62 0b       	sbc	r22, r18
    1656:	73 0b       	sbc	r23, r19
    1658:	84 0b       	sbc	r24, r20
    165a:	ba f0       	brmi	.+46     	; 0x168a <__addsf3x+0x98>
    165c:	91 50       	subi	r25, 0x01	; 1
    165e:	a1 f0       	breq	.+40     	; 0x1688 <__addsf3x+0x96>
    1660:	ff 0f       	add	r31, r31
    1662:	bb 1f       	adc	r27, r27
    1664:	66 1f       	adc	r22, r22
    1666:	77 1f       	adc	r23, r23
    1668:	88 1f       	adc	r24, r24
    166a:	c2 f7       	brpl	.-16     	; 0x165c <__addsf3x+0x6a>
    166c:	0e c0       	rjmp	.+28     	; 0x168a <__addsf3x+0x98>
    166e:	ba 0f       	add	r27, r26
    1670:	62 1f       	adc	r22, r18
    1672:	73 1f       	adc	r23, r19
    1674:	84 1f       	adc	r24, r20
    1676:	48 f4       	brcc	.+18     	; 0x168a <__addsf3x+0x98>
    1678:	87 95       	ror	r24
    167a:	77 95       	ror	r23
    167c:	67 95       	ror	r22
    167e:	b7 95       	ror	r27
    1680:	f7 95       	ror	r31
    1682:	9e 3f       	cpi	r25, 0xFE	; 254
    1684:	08 f0       	brcs	.+2      	; 0x1688 <__addsf3x+0x96>
    1686:	b3 cf       	rjmp	.-154    	; 0x15ee <__addsf3+0x1e>
    1688:	93 95       	inc	r25
    168a:	88 0f       	add	r24, r24
    168c:	08 f0       	brcs	.+2      	; 0x1690 <__addsf3x+0x9e>
    168e:	99 27       	eor	r25, r25
    1690:	ee 0f       	add	r30, r30
    1692:	97 95       	ror	r25
    1694:	87 95       	ror	r24
    1696:	08 95       	ret

00001698 <__cmpsf2>:
    1698:	d4 d0       	rcall	.+424    	; 0x1842 <__fp_cmp>
    169a:	08 f4       	brcc	.+2      	; 0x169e <__cmpsf2+0x6>
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	08 95       	ret

000016a0 <__divsf3>:
    16a0:	0c d0       	rcall	.+24     	; 0x16ba <__divsf3x>
    16a2:	0a c1       	rjmp	.+532    	; 0x18b8 <__fp_round>
    16a4:	02 d1       	rcall	.+516    	; 0x18aa <__fp_pscB>
    16a6:	40 f0       	brcs	.+16     	; 0x16b8 <__divsf3+0x18>
    16a8:	f9 d0       	rcall	.+498    	; 0x189c <__fp_pscA>
    16aa:	30 f0       	brcs	.+12     	; 0x16b8 <__divsf3+0x18>
    16ac:	21 f4       	brne	.+8      	; 0x16b6 <__divsf3+0x16>
    16ae:	5f 3f       	cpi	r21, 0xFF	; 255
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <__divsf3+0x18>
    16b2:	eb c0       	rjmp	.+470    	; 0x188a <__fp_inf>
    16b4:	51 11       	cpse	r21, r1
    16b6:	34 c1       	rjmp	.+616    	; 0x1920 <__fp_szero>
    16b8:	ee c0       	rjmp	.+476    	; 0x1896 <__fp_nan>

000016ba <__divsf3x>:
    16ba:	0f d1       	rcall	.+542    	; 0x18da <__fp_split3>
    16bc:	98 f3       	brcs	.-26     	; 0x16a4 <__divsf3+0x4>

000016be <__divsf3_pse>:
    16be:	99 23       	and	r25, r25
    16c0:	c9 f3       	breq	.-14     	; 0x16b4 <__divsf3+0x14>
    16c2:	55 23       	and	r21, r21
    16c4:	b1 f3       	breq	.-20     	; 0x16b2 <__divsf3+0x12>
    16c6:	95 1b       	sub	r25, r21
    16c8:	55 0b       	sbc	r21, r21
    16ca:	bb 27       	eor	r27, r27
    16cc:	aa 27       	eor	r26, r26
    16ce:	62 17       	cp	r22, r18
    16d0:	73 07       	cpc	r23, r19
    16d2:	84 07       	cpc	r24, r20
    16d4:	38 f0       	brcs	.+14     	; 0x16e4 <__divsf3_pse+0x26>
    16d6:	9f 5f       	subi	r25, 0xFF	; 255
    16d8:	5f 4f       	sbci	r21, 0xFF	; 255
    16da:	22 0f       	add	r18, r18
    16dc:	33 1f       	adc	r19, r19
    16de:	44 1f       	adc	r20, r20
    16e0:	aa 1f       	adc	r26, r26
    16e2:	a9 f3       	breq	.-22     	; 0x16ce <__divsf3_pse+0x10>
    16e4:	33 d0       	rcall	.+102    	; 0x174c <__divsf3_pse+0x8e>
    16e6:	0e 2e       	mov	r0, r30
    16e8:	3a f0       	brmi	.+14     	; 0x16f8 <__divsf3_pse+0x3a>
    16ea:	e0 e8       	ldi	r30, 0x80	; 128
    16ec:	30 d0       	rcall	.+96     	; 0x174e <__divsf3_pse+0x90>
    16ee:	91 50       	subi	r25, 0x01	; 1
    16f0:	50 40       	sbci	r21, 0x00	; 0
    16f2:	e6 95       	lsr	r30
    16f4:	00 1c       	adc	r0, r0
    16f6:	ca f7       	brpl	.-14     	; 0x16ea <__divsf3_pse+0x2c>
    16f8:	29 d0       	rcall	.+82     	; 0x174c <__divsf3_pse+0x8e>
    16fa:	fe 2f       	mov	r31, r30
    16fc:	27 d0       	rcall	.+78     	; 0x174c <__divsf3_pse+0x8e>
    16fe:	66 0f       	add	r22, r22
    1700:	77 1f       	adc	r23, r23
    1702:	88 1f       	adc	r24, r24
    1704:	bb 1f       	adc	r27, r27
    1706:	26 17       	cp	r18, r22
    1708:	37 07       	cpc	r19, r23
    170a:	48 07       	cpc	r20, r24
    170c:	ab 07       	cpc	r26, r27
    170e:	b0 e8       	ldi	r27, 0x80	; 128
    1710:	09 f0       	breq	.+2      	; 0x1714 <__divsf3_pse+0x56>
    1712:	bb 0b       	sbc	r27, r27
    1714:	80 2d       	mov	r24, r0
    1716:	bf 01       	movw	r22, r30
    1718:	ff 27       	eor	r31, r31
    171a:	93 58       	subi	r25, 0x83	; 131
    171c:	5f 4f       	sbci	r21, 0xFF	; 255
    171e:	2a f0       	brmi	.+10     	; 0x172a <__divsf3_pse+0x6c>
    1720:	9e 3f       	cpi	r25, 0xFE	; 254
    1722:	51 05       	cpc	r21, r1
    1724:	68 f0       	brcs	.+26     	; 0x1740 <__divsf3_pse+0x82>
    1726:	b1 c0       	rjmp	.+354    	; 0x188a <__fp_inf>
    1728:	fb c0       	rjmp	.+502    	; 0x1920 <__fp_szero>
    172a:	5f 3f       	cpi	r21, 0xFF	; 255
    172c:	ec f3       	brlt	.-6      	; 0x1728 <__divsf3_pse+0x6a>
    172e:	98 3e       	cpi	r25, 0xE8	; 232
    1730:	dc f3       	brlt	.-10     	; 0x1728 <__divsf3_pse+0x6a>
    1732:	86 95       	lsr	r24
    1734:	77 95       	ror	r23
    1736:	67 95       	ror	r22
    1738:	b7 95       	ror	r27
    173a:	f7 95       	ror	r31
    173c:	9f 5f       	subi	r25, 0xFF	; 255
    173e:	c9 f7       	brne	.-14     	; 0x1732 <__divsf3_pse+0x74>
    1740:	88 0f       	add	r24, r24
    1742:	91 1d       	adc	r25, r1
    1744:	96 95       	lsr	r25
    1746:	87 95       	ror	r24
    1748:	97 f9       	bld	r25, 7
    174a:	08 95       	ret
    174c:	e1 e0       	ldi	r30, 0x01	; 1
    174e:	66 0f       	add	r22, r22
    1750:	77 1f       	adc	r23, r23
    1752:	88 1f       	adc	r24, r24
    1754:	bb 1f       	adc	r27, r27
    1756:	62 17       	cp	r22, r18
    1758:	73 07       	cpc	r23, r19
    175a:	84 07       	cpc	r24, r20
    175c:	ba 07       	cpc	r27, r26
    175e:	20 f0       	brcs	.+8      	; 0x1768 <__divsf3_pse+0xaa>
    1760:	62 1b       	sub	r22, r18
    1762:	73 0b       	sbc	r23, r19
    1764:	84 0b       	sbc	r24, r20
    1766:	ba 0b       	sbc	r27, r26
    1768:	ee 1f       	adc	r30, r30
    176a:	88 f7       	brcc	.-30     	; 0x174e <__divsf3_pse+0x90>
    176c:	e0 95       	com	r30
    176e:	08 95       	ret

00001770 <__fixunssfsi>:
    1770:	bc d0       	rcall	.+376    	; 0x18ea <__fp_splitA>
    1772:	88 f0       	brcs	.+34     	; 0x1796 <__fixunssfsi+0x26>
    1774:	9f 57       	subi	r25, 0x7F	; 127
    1776:	90 f0       	brcs	.+36     	; 0x179c <__fixunssfsi+0x2c>
    1778:	b9 2f       	mov	r27, r25
    177a:	99 27       	eor	r25, r25
    177c:	b7 51       	subi	r27, 0x17	; 23
    177e:	a0 f0       	brcs	.+40     	; 0x17a8 <__fixunssfsi+0x38>
    1780:	d1 f0       	breq	.+52     	; 0x17b6 <__fixunssfsi+0x46>
    1782:	66 0f       	add	r22, r22
    1784:	77 1f       	adc	r23, r23
    1786:	88 1f       	adc	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	1a f0       	brmi	.+6      	; 0x1792 <__fixunssfsi+0x22>
    178c:	ba 95       	dec	r27
    178e:	c9 f7       	brne	.-14     	; 0x1782 <__fixunssfsi+0x12>
    1790:	12 c0       	rjmp	.+36     	; 0x17b6 <__fixunssfsi+0x46>
    1792:	b1 30       	cpi	r27, 0x01	; 1
    1794:	81 f0       	breq	.+32     	; 0x17b6 <__fixunssfsi+0x46>
    1796:	c3 d0       	rcall	.+390    	; 0x191e <__fp_zero>
    1798:	b1 e0       	ldi	r27, 0x01	; 1
    179a:	08 95       	ret
    179c:	c0 c0       	rjmp	.+384    	; 0x191e <__fp_zero>
    179e:	67 2f       	mov	r22, r23
    17a0:	78 2f       	mov	r23, r24
    17a2:	88 27       	eor	r24, r24
    17a4:	b8 5f       	subi	r27, 0xF8	; 248
    17a6:	39 f0       	breq	.+14     	; 0x17b6 <__fixunssfsi+0x46>
    17a8:	b9 3f       	cpi	r27, 0xF9	; 249
    17aa:	cc f3       	brlt	.-14     	; 0x179e <__fixunssfsi+0x2e>
    17ac:	86 95       	lsr	r24
    17ae:	77 95       	ror	r23
    17b0:	67 95       	ror	r22
    17b2:	b3 95       	inc	r27
    17b4:	d9 f7       	brne	.-10     	; 0x17ac <__fixunssfsi+0x3c>
    17b6:	3e f4       	brtc	.+14     	; 0x17c6 <__fixunssfsi+0x56>
    17b8:	90 95       	com	r25
    17ba:	80 95       	com	r24
    17bc:	70 95       	com	r23
    17be:	61 95       	neg	r22
    17c0:	7f 4f       	sbci	r23, 0xFF	; 255
    17c2:	8f 4f       	sbci	r24, 0xFF	; 255
    17c4:	9f 4f       	sbci	r25, 0xFF	; 255
    17c6:	08 95       	ret

000017c8 <__floatunsisf>:
    17c8:	e8 94       	clt
    17ca:	09 c0       	rjmp	.+18     	; 0x17de <__floatsisf+0x12>

000017cc <__floatsisf>:
    17cc:	97 fb       	bst	r25, 7
    17ce:	3e f4       	brtc	.+14     	; 0x17de <__floatsisf+0x12>
    17d0:	90 95       	com	r25
    17d2:	80 95       	com	r24
    17d4:	70 95       	com	r23
    17d6:	61 95       	neg	r22
    17d8:	7f 4f       	sbci	r23, 0xFF	; 255
    17da:	8f 4f       	sbci	r24, 0xFF	; 255
    17dc:	9f 4f       	sbci	r25, 0xFF	; 255
    17de:	99 23       	and	r25, r25
    17e0:	a9 f0       	breq	.+42     	; 0x180c <__floatsisf+0x40>
    17e2:	f9 2f       	mov	r31, r25
    17e4:	96 e9       	ldi	r25, 0x96	; 150
    17e6:	bb 27       	eor	r27, r27
    17e8:	93 95       	inc	r25
    17ea:	f6 95       	lsr	r31
    17ec:	87 95       	ror	r24
    17ee:	77 95       	ror	r23
    17f0:	67 95       	ror	r22
    17f2:	b7 95       	ror	r27
    17f4:	f1 11       	cpse	r31, r1
    17f6:	f8 cf       	rjmp	.-16     	; 0x17e8 <__floatsisf+0x1c>
    17f8:	fa f4       	brpl	.+62     	; 0x1838 <__floatsisf+0x6c>
    17fa:	bb 0f       	add	r27, r27
    17fc:	11 f4       	brne	.+4      	; 0x1802 <__floatsisf+0x36>
    17fe:	60 ff       	sbrs	r22, 0
    1800:	1b c0       	rjmp	.+54     	; 0x1838 <__floatsisf+0x6c>
    1802:	6f 5f       	subi	r22, 0xFF	; 255
    1804:	7f 4f       	sbci	r23, 0xFF	; 255
    1806:	8f 4f       	sbci	r24, 0xFF	; 255
    1808:	9f 4f       	sbci	r25, 0xFF	; 255
    180a:	16 c0       	rjmp	.+44     	; 0x1838 <__floatsisf+0x6c>
    180c:	88 23       	and	r24, r24
    180e:	11 f0       	breq	.+4      	; 0x1814 <__floatsisf+0x48>
    1810:	96 e9       	ldi	r25, 0x96	; 150
    1812:	11 c0       	rjmp	.+34     	; 0x1836 <__floatsisf+0x6a>
    1814:	77 23       	and	r23, r23
    1816:	21 f0       	breq	.+8      	; 0x1820 <__floatsisf+0x54>
    1818:	9e e8       	ldi	r25, 0x8E	; 142
    181a:	87 2f       	mov	r24, r23
    181c:	76 2f       	mov	r23, r22
    181e:	05 c0       	rjmp	.+10     	; 0x182a <__floatsisf+0x5e>
    1820:	66 23       	and	r22, r22
    1822:	71 f0       	breq	.+28     	; 0x1840 <__floatsisf+0x74>
    1824:	96 e8       	ldi	r25, 0x86	; 134
    1826:	86 2f       	mov	r24, r22
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	2a f0       	brmi	.+10     	; 0x1838 <__floatsisf+0x6c>
    182e:	9a 95       	dec	r25
    1830:	66 0f       	add	r22, r22
    1832:	77 1f       	adc	r23, r23
    1834:	88 1f       	adc	r24, r24
    1836:	da f7       	brpl	.-10     	; 0x182e <__floatsisf+0x62>
    1838:	88 0f       	add	r24, r24
    183a:	96 95       	lsr	r25
    183c:	87 95       	ror	r24
    183e:	97 f9       	bld	r25, 7
    1840:	08 95       	ret

00001842 <__fp_cmp>:
    1842:	99 0f       	add	r25, r25
    1844:	00 08       	sbc	r0, r0
    1846:	55 0f       	add	r21, r21
    1848:	aa 0b       	sbc	r26, r26
    184a:	e0 e8       	ldi	r30, 0x80	; 128
    184c:	fe ef       	ldi	r31, 0xFE	; 254
    184e:	16 16       	cp	r1, r22
    1850:	17 06       	cpc	r1, r23
    1852:	e8 07       	cpc	r30, r24
    1854:	f9 07       	cpc	r31, r25
    1856:	c0 f0       	brcs	.+48     	; 0x1888 <__fp_cmp+0x46>
    1858:	12 16       	cp	r1, r18
    185a:	13 06       	cpc	r1, r19
    185c:	e4 07       	cpc	r30, r20
    185e:	f5 07       	cpc	r31, r21
    1860:	98 f0       	brcs	.+38     	; 0x1888 <__fp_cmp+0x46>
    1862:	62 1b       	sub	r22, r18
    1864:	73 0b       	sbc	r23, r19
    1866:	84 0b       	sbc	r24, r20
    1868:	95 0b       	sbc	r25, r21
    186a:	39 f4       	brne	.+14     	; 0x187a <__fp_cmp+0x38>
    186c:	0a 26       	eor	r0, r26
    186e:	61 f0       	breq	.+24     	; 0x1888 <__fp_cmp+0x46>
    1870:	23 2b       	or	r18, r19
    1872:	24 2b       	or	r18, r20
    1874:	25 2b       	or	r18, r21
    1876:	21 f4       	brne	.+8      	; 0x1880 <__fp_cmp+0x3e>
    1878:	08 95       	ret
    187a:	0a 26       	eor	r0, r26
    187c:	09 f4       	brne	.+2      	; 0x1880 <__fp_cmp+0x3e>
    187e:	a1 40       	sbci	r26, 0x01	; 1
    1880:	a6 95       	lsr	r26
    1882:	8f ef       	ldi	r24, 0xFF	; 255
    1884:	81 1d       	adc	r24, r1
    1886:	81 1d       	adc	r24, r1
    1888:	08 95       	ret

0000188a <__fp_inf>:
    188a:	97 f9       	bld	r25, 7
    188c:	9f 67       	ori	r25, 0x7F	; 127
    188e:	80 e8       	ldi	r24, 0x80	; 128
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	60 e0       	ldi	r22, 0x00	; 0
    1894:	08 95       	ret

00001896 <__fp_nan>:
    1896:	9f ef       	ldi	r25, 0xFF	; 255
    1898:	80 ec       	ldi	r24, 0xC0	; 192
    189a:	08 95       	ret

0000189c <__fp_pscA>:
    189c:	00 24       	eor	r0, r0
    189e:	0a 94       	dec	r0
    18a0:	16 16       	cp	r1, r22
    18a2:	17 06       	cpc	r1, r23
    18a4:	18 06       	cpc	r1, r24
    18a6:	09 06       	cpc	r0, r25
    18a8:	08 95       	ret

000018aa <__fp_pscB>:
    18aa:	00 24       	eor	r0, r0
    18ac:	0a 94       	dec	r0
    18ae:	12 16       	cp	r1, r18
    18b0:	13 06       	cpc	r1, r19
    18b2:	14 06       	cpc	r1, r20
    18b4:	05 06       	cpc	r0, r21
    18b6:	08 95       	ret

000018b8 <__fp_round>:
    18b8:	09 2e       	mov	r0, r25
    18ba:	03 94       	inc	r0
    18bc:	00 0c       	add	r0, r0
    18be:	11 f4       	brne	.+4      	; 0x18c4 <__fp_round+0xc>
    18c0:	88 23       	and	r24, r24
    18c2:	52 f0       	brmi	.+20     	; 0x18d8 <__fp_round+0x20>
    18c4:	bb 0f       	add	r27, r27
    18c6:	40 f4       	brcc	.+16     	; 0x18d8 <__fp_round+0x20>
    18c8:	bf 2b       	or	r27, r31
    18ca:	11 f4       	brne	.+4      	; 0x18d0 <__fp_round+0x18>
    18cc:	60 ff       	sbrs	r22, 0
    18ce:	04 c0       	rjmp	.+8      	; 0x18d8 <__fp_round+0x20>
    18d0:	6f 5f       	subi	r22, 0xFF	; 255
    18d2:	7f 4f       	sbci	r23, 0xFF	; 255
    18d4:	8f 4f       	sbci	r24, 0xFF	; 255
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	08 95       	ret

000018da <__fp_split3>:
    18da:	57 fd       	sbrc	r21, 7
    18dc:	90 58       	subi	r25, 0x80	; 128
    18de:	44 0f       	add	r20, r20
    18e0:	55 1f       	adc	r21, r21
    18e2:	59 f0       	breq	.+22     	; 0x18fa <__fp_splitA+0x10>
    18e4:	5f 3f       	cpi	r21, 0xFF	; 255
    18e6:	71 f0       	breq	.+28     	; 0x1904 <__fp_splitA+0x1a>
    18e8:	47 95       	ror	r20

000018ea <__fp_splitA>:
    18ea:	88 0f       	add	r24, r24
    18ec:	97 fb       	bst	r25, 7
    18ee:	99 1f       	adc	r25, r25
    18f0:	61 f0       	breq	.+24     	; 0x190a <__fp_splitA+0x20>
    18f2:	9f 3f       	cpi	r25, 0xFF	; 255
    18f4:	79 f0       	breq	.+30     	; 0x1914 <__fp_splitA+0x2a>
    18f6:	87 95       	ror	r24
    18f8:	08 95       	ret
    18fa:	12 16       	cp	r1, r18
    18fc:	13 06       	cpc	r1, r19
    18fe:	14 06       	cpc	r1, r20
    1900:	55 1f       	adc	r21, r21
    1902:	f2 cf       	rjmp	.-28     	; 0x18e8 <__fp_split3+0xe>
    1904:	46 95       	lsr	r20
    1906:	f1 df       	rcall	.-30     	; 0x18ea <__fp_splitA>
    1908:	08 c0       	rjmp	.+16     	; 0x191a <__fp_splitA+0x30>
    190a:	16 16       	cp	r1, r22
    190c:	17 06       	cpc	r1, r23
    190e:	18 06       	cpc	r1, r24
    1910:	99 1f       	adc	r25, r25
    1912:	f1 cf       	rjmp	.-30     	; 0x18f6 <__fp_splitA+0xc>
    1914:	86 95       	lsr	r24
    1916:	71 05       	cpc	r23, r1
    1918:	61 05       	cpc	r22, r1
    191a:	08 94       	sec
    191c:	08 95       	ret

0000191e <__fp_zero>:
    191e:	e8 94       	clt

00001920 <__fp_szero>:
    1920:	bb 27       	eor	r27, r27
    1922:	66 27       	eor	r22, r22
    1924:	77 27       	eor	r23, r23
    1926:	cb 01       	movw	r24, r22
    1928:	97 f9       	bld	r25, 7
    192a:	08 95       	ret

0000192c <__gesf2>:
    192c:	8a df       	rcall	.-236    	; 0x1842 <__fp_cmp>
    192e:	08 f4       	brcc	.+2      	; 0x1932 <__gesf2+0x6>
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	08 95       	ret

00001934 <__mulsf3>:
    1934:	0b d0       	rcall	.+22     	; 0x194c <__mulsf3x>
    1936:	c0 cf       	rjmp	.-128    	; 0x18b8 <__fp_round>
    1938:	b1 df       	rcall	.-158    	; 0x189c <__fp_pscA>
    193a:	28 f0       	brcs	.+10     	; 0x1946 <__mulsf3+0x12>
    193c:	b6 df       	rcall	.-148    	; 0x18aa <__fp_pscB>
    193e:	18 f0       	brcs	.+6      	; 0x1946 <__mulsf3+0x12>
    1940:	95 23       	and	r25, r21
    1942:	09 f0       	breq	.+2      	; 0x1946 <__mulsf3+0x12>
    1944:	a2 cf       	rjmp	.-188    	; 0x188a <__fp_inf>
    1946:	a7 cf       	rjmp	.-178    	; 0x1896 <__fp_nan>
    1948:	11 24       	eor	r1, r1
    194a:	ea cf       	rjmp	.-44     	; 0x1920 <__fp_szero>

0000194c <__mulsf3x>:
    194c:	c6 df       	rcall	.-116    	; 0x18da <__fp_split3>
    194e:	a0 f3       	brcs	.-24     	; 0x1938 <__mulsf3+0x4>

00001950 <__mulsf3_pse>:
    1950:	95 9f       	mul	r25, r21
    1952:	d1 f3       	breq	.-12     	; 0x1948 <__mulsf3+0x14>
    1954:	95 0f       	add	r25, r21
    1956:	50 e0       	ldi	r21, 0x00	; 0
    1958:	55 1f       	adc	r21, r21
    195a:	62 9f       	mul	r22, r18
    195c:	f0 01       	movw	r30, r0
    195e:	72 9f       	mul	r23, r18
    1960:	bb 27       	eor	r27, r27
    1962:	f0 0d       	add	r31, r0
    1964:	b1 1d       	adc	r27, r1
    1966:	63 9f       	mul	r22, r19
    1968:	aa 27       	eor	r26, r26
    196a:	f0 0d       	add	r31, r0
    196c:	b1 1d       	adc	r27, r1
    196e:	aa 1f       	adc	r26, r26
    1970:	64 9f       	mul	r22, r20
    1972:	66 27       	eor	r22, r22
    1974:	b0 0d       	add	r27, r0
    1976:	a1 1d       	adc	r26, r1
    1978:	66 1f       	adc	r22, r22
    197a:	82 9f       	mul	r24, r18
    197c:	22 27       	eor	r18, r18
    197e:	b0 0d       	add	r27, r0
    1980:	a1 1d       	adc	r26, r1
    1982:	62 1f       	adc	r22, r18
    1984:	73 9f       	mul	r23, r19
    1986:	b0 0d       	add	r27, r0
    1988:	a1 1d       	adc	r26, r1
    198a:	62 1f       	adc	r22, r18
    198c:	83 9f       	mul	r24, r19
    198e:	a0 0d       	add	r26, r0
    1990:	61 1d       	adc	r22, r1
    1992:	22 1f       	adc	r18, r18
    1994:	74 9f       	mul	r23, r20
    1996:	33 27       	eor	r19, r19
    1998:	a0 0d       	add	r26, r0
    199a:	61 1d       	adc	r22, r1
    199c:	23 1f       	adc	r18, r19
    199e:	84 9f       	mul	r24, r20
    19a0:	60 0d       	add	r22, r0
    19a2:	21 1d       	adc	r18, r1
    19a4:	82 2f       	mov	r24, r18
    19a6:	76 2f       	mov	r23, r22
    19a8:	6a 2f       	mov	r22, r26
    19aa:	11 24       	eor	r1, r1
    19ac:	9f 57       	subi	r25, 0x7F	; 127
    19ae:	50 40       	sbci	r21, 0x00	; 0
    19b0:	8a f0       	brmi	.+34     	; 0x19d4 <__mulsf3_pse+0x84>
    19b2:	e1 f0       	breq	.+56     	; 0x19ec <__mulsf3_pse+0x9c>
    19b4:	88 23       	and	r24, r24
    19b6:	4a f0       	brmi	.+18     	; 0x19ca <__mulsf3_pse+0x7a>
    19b8:	ee 0f       	add	r30, r30
    19ba:	ff 1f       	adc	r31, r31
    19bc:	bb 1f       	adc	r27, r27
    19be:	66 1f       	adc	r22, r22
    19c0:	77 1f       	adc	r23, r23
    19c2:	88 1f       	adc	r24, r24
    19c4:	91 50       	subi	r25, 0x01	; 1
    19c6:	50 40       	sbci	r21, 0x00	; 0
    19c8:	a9 f7       	brne	.-22     	; 0x19b4 <__mulsf3_pse+0x64>
    19ca:	9e 3f       	cpi	r25, 0xFE	; 254
    19cc:	51 05       	cpc	r21, r1
    19ce:	70 f0       	brcs	.+28     	; 0x19ec <__mulsf3_pse+0x9c>
    19d0:	5c cf       	rjmp	.-328    	; 0x188a <__fp_inf>
    19d2:	a6 cf       	rjmp	.-180    	; 0x1920 <__fp_szero>
    19d4:	5f 3f       	cpi	r21, 0xFF	; 255
    19d6:	ec f3       	brlt	.-6      	; 0x19d2 <__mulsf3_pse+0x82>
    19d8:	98 3e       	cpi	r25, 0xE8	; 232
    19da:	dc f3       	brlt	.-10     	; 0x19d2 <__mulsf3_pse+0x82>
    19dc:	86 95       	lsr	r24
    19de:	77 95       	ror	r23
    19e0:	67 95       	ror	r22
    19e2:	b7 95       	ror	r27
    19e4:	f7 95       	ror	r31
    19e6:	e7 95       	ror	r30
    19e8:	9f 5f       	subi	r25, 0xFF	; 255
    19ea:	c1 f7       	brne	.-16     	; 0x19dc <__mulsf3_pse+0x8c>
    19ec:	fe 2b       	or	r31, r30
    19ee:	88 0f       	add	r24, r24
    19f0:	91 1d       	adc	r25, r1
    19f2:	96 95       	lsr	r25
    19f4:	87 95       	ror	r24
    19f6:	97 f9       	bld	r25, 7
    19f8:	08 95       	ret
    19fa:	11 f4       	brne	.+4      	; 0x1a00 <__mulsf3_pse+0xb0>
    19fc:	0e f4       	brtc	.+2      	; 0x1a00 <__mulsf3_pse+0xb0>
    19fe:	4b cf       	rjmp	.-362    	; 0x1896 <__fp_nan>
    1a00:	41 c0       	rjmp	.+130    	; 0x1a84 <__fp_mpack>

00001a02 <sqrt>:
    1a02:	73 df       	rcall	.-282    	; 0x18ea <__fp_splitA>
    1a04:	d0 f3       	brcs	.-12     	; 0x19fa <__mulsf3_pse+0xaa>
    1a06:	99 23       	and	r25, r25
    1a08:	d9 f3       	breq	.-10     	; 0x1a00 <__mulsf3_pse+0xb0>
    1a0a:	ce f3       	brts	.-14     	; 0x19fe <__mulsf3_pse+0xae>
    1a0c:	9f 57       	subi	r25, 0x7F	; 127
    1a0e:	55 0b       	sbc	r21, r21
    1a10:	87 ff       	sbrs	r24, 7
    1a12:	46 d0       	rcall	.+140    	; 0x1aa0 <__fp_norm2>
    1a14:	00 24       	eor	r0, r0
    1a16:	a0 e6       	ldi	r26, 0x60	; 96
    1a18:	40 ea       	ldi	r20, 0xA0	; 160
    1a1a:	90 01       	movw	r18, r0
    1a1c:	80 58       	subi	r24, 0x80	; 128
    1a1e:	56 95       	lsr	r21
    1a20:	97 95       	ror	r25
    1a22:	28 f4       	brcc	.+10     	; 0x1a2e <sqrt+0x2c>
    1a24:	80 5c       	subi	r24, 0xC0	; 192
    1a26:	66 0f       	add	r22, r22
    1a28:	77 1f       	adc	r23, r23
    1a2a:	88 1f       	adc	r24, r24
    1a2c:	20 f0       	brcs	.+8      	; 0x1a36 <sqrt+0x34>
    1a2e:	26 17       	cp	r18, r22
    1a30:	37 07       	cpc	r19, r23
    1a32:	48 07       	cpc	r20, r24
    1a34:	30 f4       	brcc	.+12     	; 0x1a42 <sqrt+0x40>
    1a36:	62 1b       	sub	r22, r18
    1a38:	73 0b       	sbc	r23, r19
    1a3a:	84 0b       	sbc	r24, r20
    1a3c:	20 29       	or	r18, r0
    1a3e:	31 29       	or	r19, r1
    1a40:	4a 2b       	or	r20, r26
    1a42:	a6 95       	lsr	r26
    1a44:	17 94       	ror	r1
    1a46:	07 94       	ror	r0
    1a48:	20 25       	eor	r18, r0
    1a4a:	31 25       	eor	r19, r1
    1a4c:	4a 27       	eor	r20, r26
    1a4e:	58 f7       	brcc	.-42     	; 0x1a26 <sqrt+0x24>
    1a50:	66 0f       	add	r22, r22
    1a52:	77 1f       	adc	r23, r23
    1a54:	88 1f       	adc	r24, r24
    1a56:	20 f0       	brcs	.+8      	; 0x1a60 <sqrt+0x5e>
    1a58:	26 17       	cp	r18, r22
    1a5a:	37 07       	cpc	r19, r23
    1a5c:	48 07       	cpc	r20, r24
    1a5e:	30 f4       	brcc	.+12     	; 0x1a6c <sqrt+0x6a>
    1a60:	62 0b       	sbc	r22, r18
    1a62:	73 0b       	sbc	r23, r19
    1a64:	84 0b       	sbc	r24, r20
    1a66:	20 0d       	add	r18, r0
    1a68:	31 1d       	adc	r19, r1
    1a6a:	41 1d       	adc	r20, r1
    1a6c:	a0 95       	com	r26
    1a6e:	81 f7       	brne	.-32     	; 0x1a50 <sqrt+0x4e>
    1a70:	b9 01       	movw	r22, r18
    1a72:	84 2f       	mov	r24, r20
    1a74:	91 58       	subi	r25, 0x81	; 129
    1a76:	88 0f       	add	r24, r24
    1a78:	96 95       	lsr	r25
    1a7a:	87 95       	ror	r24
    1a7c:	08 95       	ret

00001a7e <square>:
    1a7e:	9b 01       	movw	r18, r22
    1a80:	ac 01       	movw	r20, r24
    1a82:	58 cf       	rjmp	.-336    	; 0x1934 <__mulsf3>

00001a84 <__fp_mpack>:
    1a84:	9f 3f       	cpi	r25, 0xFF	; 255
    1a86:	31 f0       	breq	.+12     	; 0x1a94 <__fp_mpack_finite+0xc>

00001a88 <__fp_mpack_finite>:
    1a88:	91 50       	subi	r25, 0x01	; 1
    1a8a:	20 f4       	brcc	.+8      	; 0x1a94 <__fp_mpack_finite+0xc>
    1a8c:	87 95       	ror	r24
    1a8e:	77 95       	ror	r23
    1a90:	67 95       	ror	r22
    1a92:	b7 95       	ror	r27
    1a94:	88 0f       	add	r24, r24
    1a96:	91 1d       	adc	r25, r1
    1a98:	96 95       	lsr	r25
    1a9a:	87 95       	ror	r24
    1a9c:	97 f9       	bld	r25, 7
    1a9e:	08 95       	ret

00001aa0 <__fp_norm2>:
    1aa0:	91 50       	subi	r25, 0x01	; 1
    1aa2:	50 40       	sbci	r21, 0x00	; 0
    1aa4:	66 0f       	add	r22, r22
    1aa6:	77 1f       	adc	r23, r23
    1aa8:	88 1f       	adc	r24, r24
    1aaa:	d2 f7       	brpl	.-12     	; 0x1aa0 <__fp_norm2>
    1aac:	08 95       	ret

00001aae <memset>:
    1aae:	dc 01       	movw	r26, r24
    1ab0:	01 c0       	rjmp	.+2      	; 0x1ab4 <memset+0x6>
    1ab2:	6d 93       	st	X+, r22
    1ab4:	41 50       	subi	r20, 0x01	; 1
    1ab6:	50 40       	sbci	r21, 0x00	; 0
    1ab8:	e0 f7       	brcc	.-8      	; 0x1ab2 <memset+0x4>
    1aba:	08 95       	ret

00001abc <_exit>:
    1abc:	f8 94       	cli

00001abe <__stop_program>:
    1abe:	ff cf       	rjmp	.-2      	; 0x1abe <__stop_program>
