
tinyg_tc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000303  00800100  00800100  00002548  2**0
                  ALLOC
  2 .debug_aranges 000000e0  00000000  00000000  00002548  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000523  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001e05  00000000  00000000  00002b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000081b  00000000  00000000  00004950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000012b0  00000000  00000000  0000516b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000430  00000000  00000000  0000641c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000b29  00000000  00000000  0000684c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 00 	jmp	0x186	; 0x186 <__ctors_end>
       4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      10:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      14:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      18:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      1c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      20:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      24:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      28:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      2c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      30:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      34:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      38:	0c 94 36 09 	jmp	0x126c	; 0x126c <__vector_14>
      3c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      40:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      44:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__vector_17>
      48:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__vector_18>
      4c:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__vector_19>
      50:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      54:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      58:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      5c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      60:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      64:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>

00000068 <__c.2102>:
      68:	48 65 61 74 65 72 20 54 69 6d 65 6f 75 74 20 45     Heater Timeout E
      78:	72 72 6f 72 20 53 68 75 74 64 6f 77 6e 0a 00        rror Shutdown..

00000087 <__c.2100>:
      87:	48 65 61 74 65 72 20 41 6d 62 69 65 6e 74 20 45     Heater Ambient E
      97:	72 72 6f 72 20 53 68 75 74 64 6f 77 6e 0a 00        rror Shutdown..

000000a6 <__c.2097>:
      a6:	48 65 61 74 65 72 20 53 65 6e 73 6f 72 20 45 72     Heater Sensor Er
      b6:	72 6f 72 20 53 68 75 74 64 6f 77 6e 0a 00           ror Shutdown..

000000c4 <initialized>:
      c4:	0a 44 65 76 69 63 65 20 49 6e 69 74 69 61 6c 69     .Device Initiali
      d4:	7a 65 64 0a 00                                      zed..

000000d9 <msg_scode0>:
	...

000000da <msg_scode1>:
      da:	20 20 54 61 6b 69 6e 67 20 52 65 61 64 69 6e 67       Taking Reading
	...

000000eb <msg_scode2>:
      eb:	20 20 42 61 64 20 52 65 61 64 69 6e 67 00             Bad Reading.

000000f9 <msg_scode3>:
      f9:	20 20 44 69 73 63 6f 6e 6e 65 63 74 65 64 00          Disconnected.

00000108 <msg_scode4>:
     108:	20 20 4e 6f 20 50 6f 77 65 72 00                      No Power.

00000113 <msg_scode>:
     113:	d9 00 da 00 eb 00 f9 00 08 01                       ..........

0000011d <msg_hstate0>:
     11d:	20 20 4f 4b 00                                        OK.

00000122 <msg_hstate1>:
     122:	20 20 53 68 75 74 64 6f 77 6e 00                      Shutdown.

0000012d <msg_hstate2>:
     12d:	20 20 48 65 61 74 69 6e 67 00                         Heating.

00000137 <msg_hstate3>:
     137:	20 20 52 45 47 55 4c 41 54 45 44 00                   REGULATED.

00000143 <msg_hstate>:
     143:	1d 01 22 01 2d 01 37 01                             ..".-.7.

0000014b <__c.1908>:
     14b:	0a 44 65 76 69 63 65 20 49 6e 69 74 69 61 6c 69     .Device Initiali
     15b:	7a 65 64 0a 00                                      zed..

00000160 <__c.1925>:
     160:	0a 00                                               ..

00000162 <__c.1920>:
     162:	20 20 49 3a 00                                        I:.

00000167 <__c.1918>:
     167:	20 20 45 72 72 3a 00                                  Err:.

0000016e <__c.1916>:
     16e:	20 20 53 74 64 44 65 76 3a 00                         StdDev:.

00000178 <__c.1914>:
     178:	20 20 50 57 4d 3a 00                                  PWM:.

0000017f <__c.1912>:
     17f:	54 65 6d 70 3a 00 00                                Temp:..

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d8 e0       	ldi	r29, 0x08	; 8
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61

00000192 <__do_clear_bss>:
     192:	14 e0       	ldi	r17, 0x04	; 4
     194:	a0 e0       	ldi	r26, 0x00	; 0
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	a3 30       	cpi	r26, 0x03	; 3
     19e:	b1 07       	cpc	r27, r17
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>
     1a2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
     1a6:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <_exit>

000001aa <__bad_interrupt>:
     1aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ae <main>:
 *
 *	Device and Kinen initialization
 *	Main loop handler
 */
int main(void)
{
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
	cli();						// initializations
     1b6:	f8 94       	cli
	kinen_init();				// do this first
     1b8:	0e 94 2b 0a 	call	0x1456	; 0x1456 <kinen_init>
	device_init();				// handles all the low-level device peripheral inits
     1bc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <device_init>
	serial_init(BAUD_RATE);
     1c0:	60 e8       	ldi	r22, 0x80	; 128
     1c2:	75 e2       	ldi	r23, 0x25	; 37
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 4c 0c 	call	0x1898	; 0x1898 <serial_init>
	heater_init();				// setup the heater module and subordinate functions
     1cc:	0e 94 1c 01 	call	0x238	; 0x238 <heater_init>
	sei(); 						// enable interrupts
     1d0:	78 94       	sei

	UNIT_TESTS;					// uncomment __UNIT_TEST_TC to enable unit tests

	heater_on(160);				// turn heater on for testing
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	70 e0       	ldi	r23, 0x00	; 0
     1d6:	80 e2       	ldi	r24, 0x20	; 32
     1d8:	93 e4       	ldi	r25, 0x43	; 67
     1da:	0e 94 6e 01 	call	0x2dc	; 0x2dc <heater_on>
	rpt_initialized();			// send initalization string
     1de:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <rpt_initialized>

	while (true) {				// go to the controller loop and never return
		_controller();
     1e2:	0e 94 0f 01 	call	0x21e	; 0x21e <_controller>
     1e6:	fd cf       	rjmp	.-6      	; 0x1e2 <main+0x34>

000001e8 <device_init>:

/*
 * Device Init 
 */
void device_init(void)
{
     1e8:	df 93       	push	r29
     1ea:	cf 93       	push	r28
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
	DDRB = PORTB_DIR;			// initialize all ports for proper IO function
     1f0:	e4 e2       	ldi	r30, 0x24	; 36
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 e1       	ldi	r24, 0x10	; 16
     1f6:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
     1f8:	e7 e2       	ldi	r30, 0x27	; 39
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
     1fe:	ea e2       	ldi	r30, 0x2A	; 42
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	8c e0       	ldi	r24, 0x0C	; 12
     204:	80 83       	st	Z, r24

	adc_init(ADC_CHANNEL);
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	0e 94 5f 07 	call	0xebe	; 0xebe <adc_init>
	pwm_init();
     20c:	0e 94 b1 07 	call	0xf62	; 0xf62 <pwm_init>
	tick_init();
     210:	0e 94 16 09 	call	0x122c	; 0x122c <tick_init>
	led_off();					// put off the red light [~Sting, 1978]
     214:	0e 94 bf 09 	call	0x137e	; 0x137e <led_off>
}
     218:	cf 91       	pop	r28
     21a:	df 91       	pop	r29
     21c:	08 95       	ret

0000021e <_controller>:
 *	start of the list. For any other status code exceution continues down the list
 */

#define	DISPATCH(func) if (func == SC_EAGAIN) return; 
static void _controller()
{
     21e:	df 93       	push	r29
     220:	cf 93       	push	r28
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
	DISPATCH(kinen_callback());		// intercept low-level communication events
     226:	0e 94 34 0a 	call	0x1468	; 0x1468 <kinen_callback>
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	11 f0       	breq	.+4      	; 0x232 <_controller+0x14>
	DISPATCH(tick_callback());		// regular interval timer clock handler (ticks)
     22e:	0e 94 4b 09 	call	0x1296	; 0x1296 <tick_callback>
}
     232:	cf 91       	pop	r28
     234:	df 91       	pop	r29
     236:	08 95       	ret

00000238 <heater_init>:
 *	heater_init() sets default values that may be overwritten via Kinen communications. 
 *	heater_on() sets initial values used regardless of any changes made to settings.
 */

void heater_init()
{ 
     238:	df 93       	push	r29
     23a:	cf 93       	push	r28
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
	// initialize heater, start PID and PWM
	// note: PWM and ADC are initialized as part of the device init
	memset(&heater, 0, sizeof(Heater));
     240:	87 e0       	ldi	r24, 0x07	; 7
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	46 e2       	ldi	r20, 0x26	; 38
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <memset>
	heater.regulation_range = HEATER_REGULATION_RANGE;
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	a0 e4       	ldi	r26, 0x40	; 64
     256:	b0 e4       	ldi	r27, 0x40	; 64
     258:	80 93 15 01 	sts	0x0115, r24
     25c:	90 93 16 01 	sts	0x0116, r25
     260:	a0 93 17 01 	sts	0x0117, r26
     264:	b0 93 18 01 	sts	0x0118, r27
	heater.ambient_timeout = HEATER_AMBIENT_TIMEOUT;
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	a4 eb       	ldi	r26, 0xB4	; 180
     26e:	b2 e4       	ldi	r27, 0x42	; 66
     270:	80 93 1d 01 	sts	0x011D, r24
     274:	90 93 1e 01 	sts	0x011E, r25
     278:	a0 93 1f 01 	sts	0x011F, r26
     27c:	b0 93 20 01 	sts	0x0120, r27
	heater.regulation_timeout = HEATER_REGULATION_TIMEOUT;
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	a6 e9       	ldi	r26, 0x96	; 150
     286:	b3 e4       	ldi	r27, 0x43	; 67
     288:	80 93 21 01 	sts	0x0121, r24
     28c:	90 93 22 01 	sts	0x0122, r25
     290:	a0 93 23 01 	sts	0x0123, r26
     294:	b0 93 24 01 	sts	0x0124, r27
	heater.ambient_temperature = HEATER_AMBIENT_TEMPERATURE;
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	a0 e2       	ldi	r26, 0x20	; 32
     29e:	b2 e4       	ldi	r27, 0x42	; 66
     2a0:	80 93 25 01 	sts	0x0125, r24
     2a4:	90 93 26 01 	sts	0x0126, r25
     2a8:	a0 93 27 01 	sts	0x0127, r26
     2ac:	b0 93 28 01 	sts	0x0128, r27
	heater.overheat_temperature = HEATER_OVERHEAT_TEMPERATURE;
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	a6 e9       	ldi	r26, 0x96	; 150
     2b6:	b3 e4       	ldi	r27, 0x43	; 67
     2b8:	80 93 29 01 	sts	0x0129, r24
     2bc:	90 93 2a 01 	sts	0x012A, r25
     2c0:	a0 93 2b 01 	sts	0x012B, r26
     2c4:	b0 93 2c 01 	sts	0x012C, r27
	heater.bad_reading_max = HEATER_BAD_READING_MAX;
     2c8:	85 e0       	ldi	r24, 0x05	; 5
     2ca:	80 93 0b 01 	sts	0x010B, r24
	sensor_init();
     2ce:	0e 94 45 05 	call	0xa8a	; 0xa8a <sensor_init>
	pid_init();
     2d2:	0e 94 3b 03 	call	0x676	; 0x676 <pid_init>
}
     2d6:	cf 91       	pop	r28
     2d8:	df 91       	pop	r29
     2da:	08 95       	ret

000002dc <heater_on>:

void heater_on(double setpoint)
{
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <heater_on+0x6>
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <heater_on+0x8>
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	69 83       	std	Y+1, r22	; 0x01
     2ea:	7a 83       	std	Y+2, r23	; 0x02
     2ec:	8b 83       	std	Y+3, r24	; 0x03
     2ee:	9c 83       	std	Y+4, r25	; 0x04
	// no action if heater is already on
	if ((heater.state == HEATER_HEATING) || (heater.state == HEATER_REGULATED)) {
     2f0:	80 91 07 01 	lds	r24, 0x0107
     2f4:	82 30       	cpi	r24, 0x02	; 2
     2f6:	a9 f1       	breq	.+106    	; 0x362 <heater_on+0x86>
     2f8:	80 91 07 01 	lds	r24, 0x0107
     2fc:	83 30       	cpi	r24, 0x03	; 3
     2fe:	89 f1       	breq	.+98     	; 0x362 <heater_on+0x86>
		return;
	}
	// turn on lower level functions
	sensor_on();						// enable the sensor
     300:	0e 94 90 05 	call	0xb20	; 0xb20 <sensor_on>
	sensor_start_reading();				// now start a reading
     304:	0e 94 a3 05 	call	0xb46	; 0xb46 <sensor_start_reading>
	pid_reset();
     308:	0e 94 89 03 	call	0x712	; 0x712 <pid_reset>
	pwm_on(PWM_FREQUENCY, 0);			// duty cycle will be set by PID loop
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	8a e7       	ldi	r24, 0x7A	; 122
     312:	94 e4       	ldi	r25, 0x44	; 68
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e0       	ldi	r20, 0x00	; 0
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <pwm_on>

	// initialize values for a heater cycle
	heater.setpoint = setpoint;
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	9a 81       	ldd	r25, Y+2	; 0x02
     324:	ab 81       	ldd	r26, Y+3	; 0x03
     326:	bc 81       	ldd	r27, Y+4	; 0x04
     328:	80 93 11 01 	sts	0x0111, r24
     32c:	90 93 12 01 	sts	0x0112, r25
     330:	a0 93 13 01 	sts	0x0113, r26
     334:	b0 93 14 01 	sts	0x0114, r27
	heater.hysteresis = 0;
     338:	10 92 0a 01 	sts	0x010A, r1
	heater.bad_reading_count = 0;
     33c:	10 92 0c 01 	sts	0x010C, r1
	heater.regulation_timer = 0;		// reset timeouts
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	a0 e0       	ldi	r26, 0x00	; 0
     346:	b0 e0       	ldi	r27, 0x00	; 0
     348:	80 93 19 01 	sts	0x0119, r24
     34c:	90 93 1a 01 	sts	0x011A, r25
     350:	a0 93 1b 01 	sts	0x011B, r26
     354:	b0 93 1c 01 	sts	0x011C, r27
	heater.state = HEATER_HEATING;
     358:	82 e0       	ldi	r24, 0x02	; 2
     35a:	80 93 07 01 	sts	0x0107, r24
	led_off();
     35e:	0e 94 bf 09 	call	0x137e	; 0x137e <led_off>
}
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	cf 91       	pop	r28
     36c:	df 91       	pop	r29
     36e:	08 95       	ret

00000370 <heater_off>:

void heater_off(uint8_t state, uint8_t code) 
{
     370:	df 93       	push	r29
     372:	cf 93       	push	r28
     374:	00 d0       	rcall	.+0      	; 0x376 <heater_off+0x6>
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	89 83       	std	Y+1, r24	; 0x01
     37c:	6a 83       	std	Y+2, r22	; 0x02
	pwm_off();							// stop sending current to the heater
     37e:	0e 94 10 08 	call	0x1020	; 0x1020 <pwm_off>
	sensor_off();						// stop taking readings
     382:	0e 94 9a 05 	call	0xb34	; 0xb34 <sensor_off>
	heater.state = state;
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	80 93 07 01 	sts	0x0107, r24
	heater.code = code;
     38c:	8a 81       	ldd	r24, Y+2	; 0x02
     38e:	80 93 08 01 	sts	0x0108, r24
	led_off();
     392:	0e 94 bf 09 	call	0x137e	; 0x137e <led_off>
}
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	cf 91       	pop	r28
     39c:	df 91       	pop	r29
     39e:	08 95       	ret

000003a0 <heater_callback>:

void heater_callback()
{
     3a0:	df 93       	push	r29
     3a2:	cf 93       	push	r28
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <heater_callback+0x6>
     3a6:	00 d0       	rcall	.+0      	; 0x3a8 <heater_callback+0x8>
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
	// catch the no-op cases
	if ((heater.state == HEATER_OFF) || (heater.state == HEATER_SHUTDOWN)) { return;}
     3ac:	80 91 07 01 	lds	r24, 0x0107
     3b0:	88 23       	and	r24, r24
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <heater_callback+0x16>
     3b4:	59 c1       	rjmp	.+690    	; 0x668 <heater_callback+0x2c8>
     3b6:	80 91 07 01 	lds	r24, 0x0107
     3ba:	81 30       	cpi	r24, 0x01	; 1
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <heater_callback+0x20>
     3be:	54 c1       	rjmp	.+680    	; 0x668 <heater_callback+0x2c8>
	rpt_readout();
     3c0:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <rpt_readout>

	// get current temperature from the sensor
	heater.temperature = sensor_get_temperature();
     3c4:	0e 94 c1 05 	call	0xb82	; 0xb82 <sensor_get_temperature>
     3c8:	dc 01       	movw	r26, r24
     3ca:	cb 01       	movw	r24, r22
     3cc:	80 93 0d 01 	sts	0x010D, r24
     3d0:	90 93 0e 01 	sts	0x010E, r25
     3d4:	a0 93 0f 01 	sts	0x010F, r26
     3d8:	b0 93 10 01 	sts	0x0110, r27

	// trap overheat condition
	if (heater.temperature > heater.overheat_temperature) {
     3dc:	80 91 0d 01 	lds	r24, 0x010D
     3e0:	90 91 0e 01 	lds	r25, 0x010E
     3e4:	a0 91 0f 01 	lds	r26, 0x010F
     3e8:	b0 91 10 01 	lds	r27, 0x0110
     3ec:	20 91 29 01 	lds	r18, 0x0129
     3f0:	30 91 2a 01 	lds	r19, 0x012A
     3f4:	40 91 2b 01 	lds	r20, 0x012B
     3f8:	50 91 2c 01 	lds	r21, 0x012C
     3fc:	bc 01       	movw	r22, r24
     3fe:	cd 01       	movw	r24, r26
     400:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__gesf2>
     404:	18 16       	cp	r1, r24
     406:	2c f4       	brge	.+10     	; 0x412 <heater_callback+0x72>
		heater_off(HEATER_SHUTDOWN, HEATER_OVERHEATED);
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	63 e0       	ldi	r22, 0x03	; 3
     40c:	0e 94 b8 01 	call	0x370	; 0x370 <heater_off>
     410:	2b c1       	rjmp	.+598    	; 0x668 <heater_callback+0x2c8>
		return;
	}

	sensor_start_reading();				// start reading for the next interval
     412:	0e 94 a3 05 	call	0xb46	; 0xb46 <sensor_start_reading>

	// handle bad readings from the sensor
	if (heater.temperature < ABSOLUTE_ZERO) {
     416:	80 91 0d 01 	lds	r24, 0x010D
     41a:	90 91 0e 01 	lds	r25, 0x010E
     41e:	a0 91 0f 01 	lds	r26, 0x010F
     422:	b0 91 10 01 	lds	r27, 0x0110
     426:	bc 01       	movw	r22, r24
     428:	cd 01       	movw	r24, r26
     42a:	23 e3       	ldi	r18, 0x33	; 51
     42c:	33 e9       	ldi	r19, 0x93	; 147
     42e:	48 e8       	ldi	r20, 0x88	; 136
     430:	53 ec       	ldi	r21, 0xC3	; 195
     432:	0e 94 2f 10 	call	0x205e	; 0x205e <__cmpsf2>
     436:	88 23       	and	r24, r24
     438:	ac f4       	brge	.+42     	; 0x464 <heater_callback+0xc4>
		if (++heater.bad_reading_count > heater.bad_reading_max) {
     43a:	80 91 0c 01 	lds	r24, 0x010C
     43e:	8f 5f       	subi	r24, 0xFF	; 255
     440:	80 93 0c 01 	sts	0x010C, r24
     444:	90 91 0c 01 	lds	r25, 0x010C
     448:	80 91 0b 01 	lds	r24, 0x010B
     44c:	89 17       	cp	r24, r25
     44e:	08 f0       	brcs	.+2      	; 0x452 <heater_callback+0xb2>
     450:	0b c1       	rjmp	.+534    	; 0x668 <heater_callback+0x2c8>
			heater_off(HEATER_SHUTDOWN, HEATER_SENSOR_ERROR);
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	64 e0       	ldi	r22, 0x04	; 4
     456:	0e 94 b8 01 	call	0x370	; 0x370 <heater_off>
			printPgmString(PSTR("Heater Sensor Error Shutdown\n"));	
     45a:	86 ea       	ldi	r24, 0xA6	; 166
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <printPgmString>
     462:	02 c1       	rjmp	.+516    	; 0x668 <heater_callback+0x2c8>
		}
		return;
	}
	heater.bad_reading_count = 0;		// reset the bad reading counter
     464:	10 92 0c 01 	sts	0x010C, r1

	double duty_cycle = pid_calculate(heater.setpoint, heater.temperature);
     468:	80 91 11 01 	lds	r24, 0x0111
     46c:	90 91 12 01 	lds	r25, 0x0112
     470:	a0 91 13 01 	lds	r26, 0x0113
     474:	b0 91 14 01 	lds	r27, 0x0114
     478:	20 91 0d 01 	lds	r18, 0x010D
     47c:	30 91 0e 01 	lds	r19, 0x010E
     480:	40 91 0f 01 	lds	r20, 0x010F
     484:	50 91 10 01 	lds	r21, 0x0110
     488:	bc 01       	movw	r22, r24
     48a:	cd 01       	movw	r24, r26
     48c:	0e 94 b4 03 	call	0x768	; 0x768 <pid_calculate>
     490:	dc 01       	movw	r26, r24
     492:	cb 01       	movw	r24, r22
     494:	89 83       	std	Y+1, r24	; 0x01
     496:	9a 83       	std	Y+2, r25	; 0x02
     498:	ab 83       	std	Y+3, r26	; 0x03
     49a:	bc 83       	std	Y+4, r27	; 0x04
	pwm_set_duty(duty_cycle);
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	9a 81       	ldd	r25, Y+2	; 0x02
     4a0:	ab 81       	ldd	r26, Y+3	; 0x03
     4a2:	bc 81       	ldd	r27, Y+4	; 0x04
     4a4:	bc 01       	movw	r22, r24
     4a6:	cd 01       	movw	r24, r26
     4a8:	0e 94 8b 08 	call	0x1116	; 0x1116 <pwm_set_duty>

	// handle HEATER exceptions
	if (heater.state == HEATER_HEATING) {
     4ac:	80 91 07 01 	lds	r24, 0x0107
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	09 f0       	breq	.+2      	; 0x4b6 <heater_callback+0x116>
     4b4:	84 c0       	rjmp	.+264    	; 0x5be <heater_callback+0x21e>
		heater.regulation_timer += HEATER_TICK_SECONDS;
     4b6:	80 91 19 01 	lds	r24, 0x0119
     4ba:	90 91 1a 01 	lds	r25, 0x011A
     4be:	a0 91 1b 01 	lds	r26, 0x011B
     4c2:	b0 91 1c 01 	lds	r27, 0x011C
     4c6:	bc 01       	movw	r22, r24
     4c8:	cd 01       	movw	r24, r26
     4ca:	2d ec       	ldi	r18, 0xCD	; 205
     4cc:	3c ec       	ldi	r19, 0xCC	; 204
     4ce:	4c ec       	ldi	r20, 0xCC	; 204
     4d0:	5d e3       	ldi	r21, 0x3D	; 61
     4d2:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__addsf3>
     4d6:	dc 01       	movw	r26, r24
     4d8:	cb 01       	movw	r24, r22
     4da:	80 93 19 01 	sts	0x0119, r24
     4de:	90 93 1a 01 	sts	0x011A, r25
     4e2:	a0 93 1b 01 	sts	0x011B, r26
     4e6:	b0 93 1c 01 	sts	0x011C, r27

		if ((heater.temperature < heater.ambient_temperature) &&
     4ea:	80 91 0d 01 	lds	r24, 0x010D
     4ee:	90 91 0e 01 	lds	r25, 0x010E
     4f2:	a0 91 0f 01 	lds	r26, 0x010F
     4f6:	b0 91 10 01 	lds	r27, 0x0110
     4fa:	20 91 25 01 	lds	r18, 0x0125
     4fe:	30 91 26 01 	lds	r19, 0x0126
     502:	40 91 27 01 	lds	r20, 0x0127
     506:	50 91 28 01 	lds	r21, 0x0128
     50a:	bc 01       	movw	r22, r24
     50c:	cd 01       	movw	r24, r26
     50e:	0e 94 2f 10 	call	0x205e	; 0x205e <__cmpsf2>
     512:	88 23       	and	r24, r24
     514:	fc f4       	brge	.+62     	; 0x554 <heater_callback+0x1b4>
     516:	80 91 19 01 	lds	r24, 0x0119
     51a:	90 91 1a 01 	lds	r25, 0x011A
     51e:	a0 91 1b 01 	lds	r26, 0x011B
     522:	b0 91 1c 01 	lds	r27, 0x011C
     526:	20 91 1d 01 	lds	r18, 0x011D
     52a:	30 91 1e 01 	lds	r19, 0x011E
     52e:	40 91 1f 01 	lds	r20, 0x011F
     532:	50 91 20 01 	lds	r21, 0x0120
     536:	bc 01       	movw	r22, r24
     538:	cd 01       	movw	r24, r26
     53a:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__gesf2>
     53e:	18 16       	cp	r1, r24
     540:	4c f4       	brge	.+18     	; 0x554 <heater_callback+0x1b4>
			(heater.regulation_timer > heater.ambient_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_AMBIENT_TIMED_OUT);
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	0e 94 b8 01 	call	0x370	; 0x370 <heater_off>
			printPgmString(PSTR("Heater Ambient Error Shutdown\n"));	
     54a:	87 e8       	ldi	r24, 0x87	; 135
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <printPgmString>
     552:	8a c0       	rjmp	.+276    	; 0x668 <heater_callback+0x2c8>
			return;
		}
		if ((heater.temperature < heater.setpoint) &&
     554:	80 91 0d 01 	lds	r24, 0x010D
     558:	90 91 0e 01 	lds	r25, 0x010E
     55c:	a0 91 0f 01 	lds	r26, 0x010F
     560:	b0 91 10 01 	lds	r27, 0x0110
     564:	20 91 11 01 	lds	r18, 0x0111
     568:	30 91 12 01 	lds	r19, 0x0112
     56c:	40 91 13 01 	lds	r20, 0x0113
     570:	50 91 14 01 	lds	r21, 0x0114
     574:	bc 01       	movw	r22, r24
     576:	cd 01       	movw	r24, r26
     578:	0e 94 2f 10 	call	0x205e	; 0x205e <__cmpsf2>
     57c:	88 23       	and	r24, r24
     57e:	fc f4       	brge	.+62     	; 0x5be <heater_callback+0x21e>
     580:	80 91 19 01 	lds	r24, 0x0119
     584:	90 91 1a 01 	lds	r25, 0x011A
     588:	a0 91 1b 01 	lds	r26, 0x011B
     58c:	b0 91 1c 01 	lds	r27, 0x011C
     590:	20 91 21 01 	lds	r18, 0x0121
     594:	30 91 22 01 	lds	r19, 0x0122
     598:	40 91 23 01 	lds	r20, 0x0123
     59c:	50 91 24 01 	lds	r21, 0x0124
     5a0:	bc 01       	movw	r22, r24
     5a2:	cd 01       	movw	r24, r26
     5a4:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__gesf2>
     5a8:	18 16       	cp	r1, r24
     5aa:	4c f4       	brge	.+18     	; 0x5be <heater_callback+0x21e>
			(heater.regulation_timer > heater.regulation_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_REGULATION_TIMED_OUT);
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	62 e0       	ldi	r22, 0x02	; 2
     5b0:	0e 94 b8 01 	call	0x370	; 0x370 <heater_off>
			printPgmString(PSTR("Heater Timeout Error Shutdown\n"));	
     5b4:	88 e6       	ldi	r24, 0x68	; 104
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <printPgmString>
     5bc:	55 c0       	rjmp	.+170    	; 0x668 <heater_callback+0x2c8>
	// Manage regulation state and LED indicator
	// Heater.regulation_count is a hysteresis register that increments if the 
	// heater is at temp, decrements if not. It pegs at max and min values.
	// The LED flashes if the heater is not in regulation and goes solid if it is.

	if (fabs(pid.error) <= heater.regulation_range) {
     5be:	80 91 3b 01 	lds	r24, 0x013B
     5c2:	90 91 3c 01 	lds	r25, 0x013C
     5c6:	a0 91 3d 01 	lds	r26, 0x013D
     5ca:	b0 91 3e 01 	lds	r27, 0x013E
     5ce:	bf 77       	andi	r27, 0x7F	; 127
     5d0:	20 91 15 01 	lds	r18, 0x0115
     5d4:	30 91 16 01 	lds	r19, 0x0116
     5d8:	40 91 17 01 	lds	r20, 0x0117
     5dc:	50 91 18 01 	lds	r21, 0x0118
     5e0:	bc 01       	movw	r22, r24
     5e2:	cd 01       	movw	r24, r26
     5e4:	0e 94 2f 10 	call	0x205e	; 0x205e <__cmpsf2>
     5e8:	18 16       	cp	r1, r24
     5ea:	84 f0       	brlt	.+32     	; 0x60c <heater_callback+0x26c>
		if (++heater.hysteresis > HEATER_HYSTERESIS) {
     5ec:	80 91 0a 01 	lds	r24, 0x010A
     5f0:	8f 5f       	subi	r24, 0xFF	; 255
     5f2:	80 93 0a 01 	sts	0x010A, r24
     5f6:	80 91 0a 01 	lds	r24, 0x010A
     5fa:	8b 30       	cpi	r24, 0x0B	; 11
     5fc:	0c f1       	brlt	.+66     	; 0x640 <heater_callback+0x2a0>
			heater.hysteresis = HEATER_HYSTERESIS;
     5fe:	8a e0       	ldi	r24, 0x0A	; 10
     600:	80 93 0a 01 	sts	0x010A, r24
			heater.state = HEATER_REGULATED;
     604:	83 e0       	ldi	r24, 0x03	; 3
     606:	80 93 07 01 	sts	0x0107, r24
     60a:	1a c0       	rjmp	.+52     	; 0x640 <heater_callback+0x2a0>
		}
	} else {
		if (--heater.hysteresis <= 0) {
     60c:	80 91 0a 01 	lds	r24, 0x010A
     610:	81 50       	subi	r24, 0x01	; 1
     612:	80 93 0a 01 	sts	0x010A, r24
     616:	80 91 0a 01 	lds	r24, 0x010A
     61a:	18 16       	cp	r1, r24
     61c:	8c f0       	brlt	.+34     	; 0x640 <heater_callback+0x2a0>
			heater.hysteresis = 0;
     61e:	10 92 0a 01 	sts	0x010A, r1
			heater.regulation_timer = 0;			// reset timeouts
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	a0 e0       	ldi	r26, 0x00	; 0
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	80 93 19 01 	sts	0x0119, r24
     62e:	90 93 1a 01 	sts	0x011A, r25
     632:	a0 93 1b 01 	sts	0x011B, r26
     636:	b0 93 1c 01 	sts	0x011C, r27
			heater.state = HEATER_HEATING;
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	80 93 07 01 	sts	0x0107, r24
		}
	}
	if (heater.state == HEATER_REGULATED) {
     640:	80 91 07 01 	lds	r24, 0x0107
     644:	83 30       	cpi	r24, 0x03	; 3
     646:	19 f4       	brne	.+6      	; 0x64e <heater_callback+0x2ae>
		led_on();
     648:	0e 94 b1 09 	call	0x1362	; 0x1362 <led_on>
     64c:	0d c0       	rjmp	.+26     	; 0x668 <heater_callback+0x2c8>
	} else {
		if (++heater.toggle > 3) {
     64e:	80 91 09 01 	lds	r24, 0x0109
     652:	8f 5f       	subi	r24, 0xFF	; 255
     654:	80 93 09 01 	sts	0x0109, r24
     658:	80 91 09 01 	lds	r24, 0x0109
     65c:	84 30       	cpi	r24, 0x04	; 4
     65e:	20 f0       	brcs	.+8      	; 0x668 <heater_callback+0x2c8>
			heater.toggle = 0;
     660:	10 92 09 01 	sts	0x0109, r1
			led_toggle();
     664:	0e 94 cd 09 	call	0x139a	; 0x139a <led_toggle>
		}
	}
}
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	cf 91       	pop	r28
     672:	df 91       	pop	r29
     674:	08 95       	ret

00000676 <pid_init>:
 * pid_reset() - reset PID values to cold start
 * pid_calc() - derived from: http://www.embeddedheaven.com/pid-control-algorithm-c-language.htm
 */

void pid_init() 
{
     676:	df 93       	push	r29
     678:	cf 93       	push	r28
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
	memset(&pid, 0, sizeof(struct PIDstruct));
     67e:	8d e2       	ldi	r24, 0x2D	; 45
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	4a e2       	ldi	r20, 0x2A	; 42
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <memset>
	pid.Kp = PID_Kp;
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	a0 ea       	ldi	r26, 0xA0	; 160
     694:	b0 e4       	ldi	r27, 0x40	; 64
     696:	80 93 4b 01 	sts	0x014B, r24
     69a:	90 93 4c 01 	sts	0x014C, r25
     69e:	a0 93 4d 01 	sts	0x014D, r26
     6a2:	b0 93 4e 01 	sts	0x014E, r27
	pid.Ki = PID_Ki;
     6a6:	8d ec       	ldi	r24, 0xCD	; 205
     6a8:	9c ec       	ldi	r25, 0xCC	; 204
     6aa:	ac ec       	ldi	r26, 0xCC	; 204
     6ac:	bd e3       	ldi	r27, 0x3D	; 61
     6ae:	80 93 4f 01 	sts	0x014F, r24
     6b2:	90 93 50 01 	sts	0x0150, r25
     6b6:	a0 93 51 01 	sts	0x0151, r26
     6ba:	b0 93 52 01 	sts	0x0152, r27
	pid.Kd = PID_Kd;
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	a0 e0       	ldi	r26, 0x00	; 0
     6c4:	bf e3       	ldi	r27, 0x3F	; 63
     6c6:	80 93 53 01 	sts	0x0153, r24
     6ca:	90 93 54 01 	sts	0x0154, r25
     6ce:	a0 93 55 01 	sts	0x0155, r26
     6d2:	b0 93 56 01 	sts	0x0156, r27
	pid.output_max = PID_MAX_OUTPUT;		// saturation filter max value
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	a8 ec       	ldi	r26, 0xC8	; 200
     6dc:	b2 e4       	ldi	r27, 0x42	; 66
     6de:	80 93 33 01 	sts	0x0133, r24
     6e2:	90 93 34 01 	sts	0x0134, r25
     6e6:	a0 93 35 01 	sts	0x0135, r26
     6ea:	b0 93 36 01 	sts	0x0136, r27
	pid.output_min = PID_MIN_OUTPUT;		// saturation filter min value
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	a0 e0       	ldi	r26, 0x00	; 0
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	80 93 37 01 	sts	0x0137, r24
     6fa:	90 93 38 01 	sts	0x0138, r25
     6fe:	a0 93 39 01 	sts	0x0139, r26
     702:	b0 93 3a 01 	sts	0x013A, r27
	pid.state = PID_ON;
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	80 93 2d 01 	sts	0x012D, r24
}
     70c:	cf 91       	pop	r28
     70e:	df 91       	pop	r29
     710:	08 95       	ret

00000712 <pid_reset>:

void pid_reset()
{
     712:	df 93       	push	r29
     714:	cf 93       	push	r28
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
	pid.output = 0;
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	a0 e0       	ldi	r26, 0x00	; 0
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	80 93 2f 01 	sts	0x012F, r24
     726:	90 93 30 01 	sts	0x0130, r25
     72a:	a0 93 31 01 	sts	0x0131, r26
     72e:	b0 93 32 01 	sts	0x0132, r27
	pid.integral = PID_INITIAL_INTEGRAL;
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	a8 e4       	ldi	r26, 0x48	; 72
     738:	b3 e4       	ldi	r27, 0x43	; 67
     73a:	80 93 43 01 	sts	0x0143, r24
     73e:	90 93 44 01 	sts	0x0144, r25
     742:	a0 93 45 01 	sts	0x0145, r26
     746:	b0 93 46 01 	sts	0x0146, r27
	pid.prev_error = 0;
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	a0 e0       	ldi	r26, 0x00	; 0
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	80 93 3f 01 	sts	0x013F, r24
     756:	90 93 40 01 	sts	0x0140, r25
     75a:	a0 93 41 01 	sts	0x0141, r26
     75e:	b0 93 42 01 	sts	0x0142, r27
}
     762:	cf 91       	pop	r28
     764:	df 91       	pop	r29
     766:	08 95       	ret

00000768 <pid_calculate>:

double pid_calculate(double setpoint,double temperature)
{
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	df 93       	push	r29
     772:	cf 93       	push	r28
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	2c 97       	sbiw	r28, 0x0c	; 12
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
     784:	69 83       	std	Y+1, r22	; 0x01
     786:	7a 83       	std	Y+2, r23	; 0x02
     788:	8b 83       	std	Y+3, r24	; 0x03
     78a:	9c 83       	std	Y+4, r25	; 0x04
     78c:	2d 83       	std	Y+5, r18	; 0x05
     78e:	3e 83       	std	Y+6, r19	; 0x06
     790:	4f 83       	std	Y+7, r20	; 0x07
     792:	58 87       	std	Y+8, r21	; 0x08
	if (pid.state == PID_OFF) { return (pid.output_min);}
     794:	80 91 2d 01 	lds	r24, 0x012D
     798:	88 23       	and	r24, r24
     79a:	69 f4       	brne	.+26     	; 0x7b6 <pid_calculate+0x4e>
     79c:	80 91 37 01 	lds	r24, 0x0137
     7a0:	90 91 38 01 	lds	r25, 0x0138
     7a4:	a0 91 39 01 	lds	r26, 0x0139
     7a8:	b0 91 3a 01 	lds	r27, 0x013A
     7ac:	89 87       	std	Y+9, r24	; 0x09
     7ae:	9a 87       	std	Y+10, r25	; 0x0a
     7b0:	ab 87       	std	Y+11, r26	; 0x0b
     7b2:	bc 87       	std	Y+12, r27	; 0x0c
     7b4:	57 c1       	rjmp	.+686    	; 0xa64 <__stack+0x165>

	pid.error = setpoint - temperature;		// current error term
     7b6:	69 81       	ldd	r22, Y+1	; 0x01
     7b8:	7a 81       	ldd	r23, Y+2	; 0x02
     7ba:	8b 81       	ldd	r24, Y+3	; 0x03
     7bc:	9c 81       	ldd	r25, Y+4	; 0x04
     7be:	2d 81       	ldd	r18, Y+5	; 0x05
     7c0:	3e 81       	ldd	r19, Y+6	; 0x06
     7c2:	4f 81       	ldd	r20, Y+7	; 0x07
     7c4:	58 85       	ldd	r21, Y+8	; 0x08
     7c6:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__subsf3>
     7ca:	dc 01       	movw	r26, r24
     7cc:	cb 01       	movw	r24, r22
     7ce:	80 93 3b 01 	sts	0x013B, r24
     7d2:	90 93 3c 01 	sts	0x013C, r25
     7d6:	a0 93 3d 01 	sts	0x013D, r26
     7da:	b0 93 3e 01 	sts	0x013E, r27

	// perform integration only if error is GT epsilon, and with anti-windup
	if ((fabs(pid.error) > PID_EPSILON) && (pid.output < pid.output_max)) {	
     7de:	80 91 3b 01 	lds	r24, 0x013B
     7e2:	90 91 3c 01 	lds	r25, 0x013C
     7e6:	a0 91 3d 01 	lds	r26, 0x013D
     7ea:	b0 91 3e 01 	lds	r27, 0x013E
     7ee:	bf 77       	andi	r27, 0x7F	; 127
     7f0:	bc 01       	movw	r22, r24
     7f2:	cd 01       	movw	r24, r26
     7f4:	2d ec       	ldi	r18, 0xCD	; 205
     7f6:	3c ec       	ldi	r19, 0xCC	; 204
     7f8:	4c ec       	ldi	r20, 0xCC	; 204
     7fa:	5d e3       	ldi	r21, 0x3D	; 61
     7fc:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__gesf2>
     800:	18 16       	cp	r1, r24
     802:	0c f0       	brlt	.+2      	; 0x806 <pid_calculate+0x9e>
     804:	40 c0       	rjmp	.+128    	; 0x886 <pid_calculate+0x11e>
     806:	80 91 2f 01 	lds	r24, 0x012F
     80a:	90 91 30 01 	lds	r25, 0x0130
     80e:	a0 91 31 01 	lds	r26, 0x0131
     812:	b0 91 32 01 	lds	r27, 0x0132
     816:	20 91 33 01 	lds	r18, 0x0133
     81a:	30 91 34 01 	lds	r19, 0x0134
     81e:	40 91 35 01 	lds	r20, 0x0135
     822:	50 91 36 01 	lds	r21, 0x0136
     826:	bc 01       	movw	r22, r24
     828:	cd 01       	movw	r24, r26
     82a:	0e 94 2f 10 	call	0x205e	; 0x205e <__cmpsf2>
     82e:	88 23       	and	r24, r24
     830:	54 f5       	brge	.+84     	; 0x886 <pid_calculate+0x11e>
		pid.integral += (pid.error * PID_DT);
     832:	e0 90 43 01 	lds	r14, 0x0143
     836:	f0 90 44 01 	lds	r15, 0x0144
     83a:	00 91 45 01 	lds	r16, 0x0145
     83e:	10 91 46 01 	lds	r17, 0x0146
     842:	80 91 3b 01 	lds	r24, 0x013B
     846:	90 91 3c 01 	lds	r25, 0x013C
     84a:	a0 91 3d 01 	lds	r26, 0x013D
     84e:	b0 91 3e 01 	lds	r27, 0x013E
     852:	bc 01       	movw	r22, r24
     854:	cd 01       	movw	r24, r26
     856:	2d ec       	ldi	r18, 0xCD	; 205
     858:	3c ec       	ldi	r19, 0xCC	; 204
     85a:	4c ec       	ldi	r20, 0xCC	; 204
     85c:	5d e3       	ldi	r21, 0x3D	; 61
     85e:	0e 94 82 11 	call	0x2304	; 0x2304 <__mulsf3>
     862:	dc 01       	movw	r26, r24
     864:	cb 01       	movw	r24, r22
     866:	9c 01       	movw	r18, r24
     868:	ad 01       	movw	r20, r26
     86a:	c8 01       	movw	r24, r16
     86c:	b7 01       	movw	r22, r14
     86e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__addsf3>
     872:	dc 01       	movw	r26, r24
     874:	cb 01       	movw	r24, r22
     876:	80 93 43 01 	sts	0x0143, r24
     87a:	90 93 44 01 	sts	0x0144, r25
     87e:	a0 93 45 01 	sts	0x0145, r26
     882:	b0 93 46 01 	sts	0x0146, r27
	}
	// compute derivative and output
	pid.derivative = (pid.error - pid.prev_error) / PID_DT;
     886:	80 91 3b 01 	lds	r24, 0x013B
     88a:	90 91 3c 01 	lds	r25, 0x013C
     88e:	a0 91 3d 01 	lds	r26, 0x013D
     892:	b0 91 3e 01 	lds	r27, 0x013E
     896:	20 91 3f 01 	lds	r18, 0x013F
     89a:	30 91 40 01 	lds	r19, 0x0140
     89e:	40 91 41 01 	lds	r20, 0x0141
     8a2:	50 91 42 01 	lds	r21, 0x0142
     8a6:	bc 01       	movw	r22, r24
     8a8:	cd 01       	movw	r24, r26
     8aa:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__subsf3>
     8ae:	dc 01       	movw	r26, r24
     8b0:	cb 01       	movw	r24, r22
     8b2:	bc 01       	movw	r22, r24
     8b4:	cd 01       	movw	r24, r26
     8b6:	2d ec       	ldi	r18, 0xCD	; 205
     8b8:	3c ec       	ldi	r19, 0xCC	; 204
     8ba:	4c ec       	ldi	r20, 0xCC	; 204
     8bc:	5d e3       	ldi	r21, 0x3D	; 61
     8be:	0e 94 33 10 	call	0x2066	; 0x2066 <__divsf3>
     8c2:	dc 01       	movw	r26, r24
     8c4:	cb 01       	movw	r24, r22
     8c6:	80 93 47 01 	sts	0x0147, r24
     8ca:	90 93 48 01 	sts	0x0148, r25
     8ce:	a0 93 49 01 	sts	0x0149, r26
     8d2:	b0 93 4a 01 	sts	0x014A, r27
	pid.output = pid.Kp * pid.error + pid.Ki * pid.integral + pid.Kd * pid.derivative;
     8d6:	80 91 4b 01 	lds	r24, 0x014B
     8da:	90 91 4c 01 	lds	r25, 0x014C
     8de:	a0 91 4d 01 	lds	r26, 0x014D
     8e2:	b0 91 4e 01 	lds	r27, 0x014E
     8e6:	20 91 3b 01 	lds	r18, 0x013B
     8ea:	30 91 3c 01 	lds	r19, 0x013C
     8ee:	40 91 3d 01 	lds	r20, 0x013D
     8f2:	50 91 3e 01 	lds	r21, 0x013E
     8f6:	bc 01       	movw	r22, r24
     8f8:	cd 01       	movw	r24, r26
     8fa:	0e 94 82 11 	call	0x2304	; 0x2304 <__mulsf3>
     8fe:	dc 01       	movw	r26, r24
     900:	cb 01       	movw	r24, r22
     902:	7c 01       	movw	r14, r24
     904:	8d 01       	movw	r16, r26
     906:	80 91 4f 01 	lds	r24, 0x014F
     90a:	90 91 50 01 	lds	r25, 0x0150
     90e:	a0 91 51 01 	lds	r26, 0x0151
     912:	b0 91 52 01 	lds	r27, 0x0152
     916:	20 91 43 01 	lds	r18, 0x0143
     91a:	30 91 44 01 	lds	r19, 0x0144
     91e:	40 91 45 01 	lds	r20, 0x0145
     922:	50 91 46 01 	lds	r21, 0x0146
     926:	bc 01       	movw	r22, r24
     928:	cd 01       	movw	r24, r26
     92a:	0e 94 82 11 	call	0x2304	; 0x2304 <__mulsf3>
     92e:	dc 01       	movw	r26, r24
     930:	cb 01       	movw	r24, r22
     932:	9c 01       	movw	r18, r24
     934:	ad 01       	movw	r20, r26
     936:	c8 01       	movw	r24, r16
     938:	b7 01       	movw	r22, r14
     93a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__addsf3>
     93e:	dc 01       	movw	r26, r24
     940:	cb 01       	movw	r24, r22
     942:	7c 01       	movw	r14, r24
     944:	8d 01       	movw	r16, r26
     946:	80 91 53 01 	lds	r24, 0x0153
     94a:	90 91 54 01 	lds	r25, 0x0154
     94e:	a0 91 55 01 	lds	r26, 0x0155
     952:	b0 91 56 01 	lds	r27, 0x0156
     956:	20 91 47 01 	lds	r18, 0x0147
     95a:	30 91 48 01 	lds	r19, 0x0148
     95e:	40 91 49 01 	lds	r20, 0x0149
     962:	50 91 4a 01 	lds	r21, 0x014A
     966:	bc 01       	movw	r22, r24
     968:	cd 01       	movw	r24, r26
     96a:	0e 94 82 11 	call	0x2304	; 0x2304 <__mulsf3>
     96e:	dc 01       	movw	r26, r24
     970:	cb 01       	movw	r24, r22
     972:	9c 01       	movw	r18, r24
     974:	ad 01       	movw	r20, r26
     976:	c8 01       	movw	r24, r16
     978:	b7 01       	movw	r22, r14
     97a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__addsf3>
     97e:	dc 01       	movw	r26, r24
     980:	cb 01       	movw	r24, r22
     982:	80 93 2f 01 	sts	0x012F, r24
     986:	90 93 30 01 	sts	0x0130, r25
     98a:	a0 93 31 01 	sts	0x0131, r26
     98e:	b0 93 32 01 	sts	0x0132, r27

	// fix min amd max outputs (saturation filter)
	if(pid.output > pid.output_max) { pid.output = pid.output_max; } else
     992:	80 91 2f 01 	lds	r24, 0x012F
     996:	90 91 30 01 	lds	r25, 0x0130
     99a:	a0 91 31 01 	lds	r26, 0x0131
     99e:	b0 91 32 01 	lds	r27, 0x0132
     9a2:	20 91 33 01 	lds	r18, 0x0133
     9a6:	30 91 34 01 	lds	r19, 0x0134
     9aa:	40 91 35 01 	lds	r20, 0x0135
     9ae:	50 91 36 01 	lds	r21, 0x0136
     9b2:	bc 01       	movw	r22, r24
     9b4:	cd 01       	movw	r24, r26
     9b6:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__gesf2>
     9ba:	18 16       	cp	r1, r24
     9bc:	8c f4       	brge	.+34     	; 0x9e0 <__stack+0xe1>
     9be:	80 91 33 01 	lds	r24, 0x0133
     9c2:	90 91 34 01 	lds	r25, 0x0134
     9c6:	a0 91 35 01 	lds	r26, 0x0135
     9ca:	b0 91 36 01 	lds	r27, 0x0136
     9ce:	80 93 2f 01 	sts	0x012F, r24
     9d2:	90 93 30 01 	sts	0x0130, r25
     9d6:	a0 93 31 01 	sts	0x0131, r26
     9da:	b0 93 32 01 	sts	0x0132, r27
     9de:	26 c0       	rjmp	.+76     	; 0xa2c <__stack+0x12d>
	if(pid.output < pid.output_min) { pid.output = pid.output_min; }
     9e0:	80 91 2f 01 	lds	r24, 0x012F
     9e4:	90 91 30 01 	lds	r25, 0x0130
     9e8:	a0 91 31 01 	lds	r26, 0x0131
     9ec:	b0 91 32 01 	lds	r27, 0x0132
     9f0:	20 91 37 01 	lds	r18, 0x0137
     9f4:	30 91 38 01 	lds	r19, 0x0138
     9f8:	40 91 39 01 	lds	r20, 0x0139
     9fc:	50 91 3a 01 	lds	r21, 0x013A
     a00:	bc 01       	movw	r22, r24
     a02:	cd 01       	movw	r24, r26
     a04:	0e 94 2f 10 	call	0x205e	; 0x205e <__cmpsf2>
     a08:	88 23       	and	r24, r24
     a0a:	84 f4       	brge	.+32     	; 0xa2c <__stack+0x12d>
     a0c:	80 91 37 01 	lds	r24, 0x0137
     a10:	90 91 38 01 	lds	r25, 0x0138
     a14:	a0 91 39 01 	lds	r26, 0x0139
     a18:	b0 91 3a 01 	lds	r27, 0x013A
     a1c:	80 93 2f 01 	sts	0x012F, r24
     a20:	90 93 30 01 	sts	0x0130, r25
     a24:	a0 93 31 01 	sts	0x0131, r26
     a28:	b0 93 32 01 	sts	0x0132, r27
	pid.prev_error = pid.error;
     a2c:	80 91 3b 01 	lds	r24, 0x013B
     a30:	90 91 3c 01 	lds	r25, 0x013C
     a34:	a0 91 3d 01 	lds	r26, 0x013D
     a38:	b0 91 3e 01 	lds	r27, 0x013E
     a3c:	80 93 3f 01 	sts	0x013F, r24
     a40:	90 93 40 01 	sts	0x0140, r25
     a44:	a0 93 41 01 	sts	0x0141, r26
     a48:	b0 93 42 01 	sts	0x0142, r27

	return pid.output;
     a4c:	80 91 2f 01 	lds	r24, 0x012F
     a50:	90 91 30 01 	lds	r25, 0x0130
     a54:	a0 91 31 01 	lds	r26, 0x0131
     a58:	b0 91 32 01 	lds	r27, 0x0132
     a5c:	89 87       	std	Y+9, r24	; 0x09
     a5e:	9a 87       	std	Y+10, r25	; 0x0a
     a60:	ab 87       	std	Y+11, r26	; 0x0b
     a62:	bc 87       	std	Y+12, r27	; 0x0c
     a64:	89 85       	ldd	r24, Y+9	; 0x09
     a66:	9a 85       	ldd	r25, Y+10	; 0x0a
     a68:	ab 85       	ldd	r26, Y+11	; 0x0b
     a6a:	bc 85       	ldd	r27, Y+12	; 0x0c
}
     a6c:	bc 01       	movw	r22, r24
     a6e:	cd 01       	movw	r24, r26
     a70:	2c 96       	adiw	r28, 0x0c	; 12
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	cf 91       	pop	r28
     a7e:	df 91       	pop	r29
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	ff 90       	pop	r15
     a86:	ef 90       	pop	r14
     a88:	08 95       	ret

00000a8a <sensor_init>:
 * sensor_get_code()		- return latest sensor code
 * sensor_callback() 		- perform sensor sampling / reading
 */

void sensor_init()
{
     a8a:	df 93       	push	r29
     a8c:	cf 93       	push	r28
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
	memset(&sensor, 0, sizeof(Sensor));
     a92:	89 e6       	ldi	r24, 0x69	; 105
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	40 e7       	ldi	r20, 0x70	; 112
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <memset>
	sensor.temperature = ABSOLUTE_ZERO;
     aa2:	83 e3       	ldi	r24, 0x33	; 51
     aa4:	93 e9       	ldi	r25, 0x93	; 147
     aa6:	a8 e8       	ldi	r26, 0x88	; 136
     aa8:	b3 ec       	ldi	r27, 0xC3	; 195
     aaa:	80 93 6d 01 	sts	0x016D, r24
     aae:	90 93 6e 01 	sts	0x016E, r25
     ab2:	a0 93 6f 01 	sts	0x016F, r26
     ab6:	b0 93 70 01 	sts	0x0170, r27
	sensor.sample_variance_max = SENSOR_SAMPLE_VARIANCE_MAX;
     aba:	8d ec       	ldi	r24, 0xCD	; 205
     abc:	9c ec       	ldi	r25, 0xCC	; 204
     abe:	ac e8       	ldi	r26, 0x8C	; 140
     ac0:	bf e3       	ldi	r27, 0x3F	; 63
     ac2:	80 93 75 01 	sts	0x0175, r24
     ac6:	90 93 76 01 	sts	0x0176, r25
     aca:	a0 93 77 01 	sts	0x0177, r26
     ace:	b0 93 78 01 	sts	0x0178, r27
	sensor.reading_variance_max = SENSOR_READING_VARIANCE_MAX;
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	a0 ea       	ldi	r26, 0xA0	; 160
     ad8:	b1 e4       	ldi	r27, 0x41	; 65
     ada:	80 93 79 01 	sts	0x0179, r24
     ade:	90 93 7a 01 	sts	0x017A, r25
     ae2:	a0 93 7b 01 	sts	0x017B, r26
     ae6:	b0 93 7c 01 	sts	0x017C, r27
	sensor.disconnect_temperature = SENSOR_DISCONNECTED_TEMPERATURE;
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	a8 ec       	ldi	r26, 0xC8	; 200
     af0:	b3 e4       	ldi	r27, 0x43	; 67
     af2:	80 93 7d 01 	sts	0x017D, r24
     af6:	90 93 7e 01 	sts	0x017E, r25
     afa:	a0 93 7f 01 	sts	0x017F, r26
     afe:	b0 93 80 01 	sts	0x0180, r27
	sensor.no_power_temperature = SENSOR_NO_POWER_TEMPERATURE;
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	a0 e0       	ldi	r26, 0x00	; 0
     b08:	b0 ec       	ldi	r27, 0xC0	; 192
     b0a:	80 93 81 01 	sts	0x0181, r24
     b0e:	90 93 82 01 	sts	0x0182, r25
     b12:	a0 93 83 01 	sts	0x0183, r26
     b16:	b0 93 84 01 	sts	0x0184, r27
}
     b1a:	cf 91       	pop	r28
     b1c:	df 91       	pop	r29
     b1e:	08 95       	ret

00000b20 <sensor_on>:

void sensor_on()
{
     b20:	df 93       	push	r29
     b22:	cf 93       	push	r28
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_NO_DATA;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	80 93 69 01 	sts	0x0169, r24
}
     b2e:	cf 91       	pop	r28
     b30:	df 91       	pop	r29
     b32:	08 95       	ret

00000b34 <sensor_off>:

void sensor_off()
{
     b34:	df 93       	push	r29
     b36:	cf 93       	push	r28
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_OFF;
     b3c:	10 92 69 01 	sts	0x0169, r1
}
     b40:	cf 91       	pop	r28
     b42:	df 91       	pop	r29
     b44:	08 95       	ret

00000b46 <sensor_start_reading>:

void sensor_start_reading() 
{ 
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	sensor.sample_idx = 0;
     b4e:	10 92 6b 01 	sts	0x016B, r1
	sensor.code = SENSOR_TAKING_READING;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	80 93 6a 01 	sts	0x016A, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <sensor_get_state>:

uint8_t sensor_get_state() { return (sensor.state);}
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	80 91 69 01 	lds	r24, 0x0169
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <sensor_get_code>:
uint8_t sensor_get_code() { return (sensor.code);}
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	80 91 6a 01 	lds	r24, 0x016A
     b7c:	cf 91       	pop	r28
     b7e:	df 91       	pop	r29
     b80:	08 95       	ret

00000b82 <sensor_get_temperature>:

double sensor_get_temperature() 
{ 
     b82:	df 93       	push	r29
     b84:	cf 93       	push	r28
     b86:	00 d0       	rcall	.+0      	; 0xb88 <sensor_get_temperature+0x6>
     b88:	00 d0       	rcall	.+0      	; 0xb8a <sensor_get_temperature+0x8>
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
	if (sensor.state == SENSOR_HAS_DATA) { 
     b8e:	80 91 69 01 	lds	r24, 0x0169
     b92:	83 30       	cpi	r24, 0x03	; 3
     b94:	69 f4       	brne	.+26     	; 0xbb0 <sensor_get_temperature+0x2e>
		return (sensor.temperature);
     b96:	80 91 6d 01 	lds	r24, 0x016D
     b9a:	90 91 6e 01 	lds	r25, 0x016E
     b9e:	a0 91 6f 01 	lds	r26, 0x016F
     ba2:	b0 91 70 01 	lds	r27, 0x0170
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	9a 83       	std	Y+2, r25	; 0x02
     baa:	ab 83       	std	Y+3, r26	; 0x03
     bac:	bc 83       	std	Y+4, r27	; 0x04
     bae:	08 c0       	rjmp	.+16     	; 0xbc0 <sensor_get_temperature+0x3e>
	} else {
		return (LESS_THAN_ZERO);	// an impossible temperature value
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	a9 e8       	ldi	r26, 0x89	; 137
     bb6:	b3 ec       	ldi	r27, 0xC3	; 195
     bb8:	89 83       	std	Y+1, r24	; 0x01
     bba:	9a 83       	std	Y+2, r25	; 0x02
     bbc:	ab 83       	std	Y+3, r26	; 0x03
     bbe:	bc 83       	std	Y+4, r27	; 0x04
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	9a 81       	ldd	r25, Y+2	; 0x02
     bc4:	ab 81       	ldd	r26, Y+3	; 0x03
     bc6:	bc 81       	ldd	r27, Y+4	; 0x04
	}
}
     bc8:	bc 01       	movw	r22, r24
     bca:	cd 01       	movw	r24, r26
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <sensor_callback>:
 *	loop. Each sampling interval must be requested explicitly by calling 
 *	sensor_start_sample(). It does not free-run.
 */

void sensor_callback()
{
     bda:	ef 92       	push	r14
     bdc:	ff 92       	push	r15
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <sensor_callback+0xe>
     be8:	00 d0       	rcall	.+0      	; 0xbea <sensor_callback+0x10>
     bea:	0f 92       	push	r0
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
	// cases where you don't execute the callback:
	if ((sensor.state == SENSOR_OFF) || (sensor.code != SENSOR_TAKING_READING)) {
     bf0:	80 91 69 01 	lds	r24, 0x0169
     bf4:	88 23       	and	r24, r24
     bf6:	09 f4       	brne	.+2      	; 0xbfa <sensor_callback+0x20>
     bf8:	2b c1       	rjmp	.+598    	; 0xe50 <sensor_callback+0x276>
     bfa:	80 91 6a 01 	lds	r24, 0x016A
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	09 f0       	breq	.+2      	; 0xc04 <sensor_callback+0x2a>
     c02:	26 c1       	rjmp	.+588    	; 0xe50 <sensor_callback+0x276>
		return;
	}

	// get a sample and return if still in the reading period
	sensor.sample[sensor.sample_idx] = _sensor_sample(ADC_CHANNEL);
     c04:	80 91 6b 01 	lds	r24, 0x016B
     c08:	08 2f       	mov	r16, r24
     c0a:	10 e0       	ldi	r17, 0x00	; 0
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	0e 94 34 07 	call	0xe68	; 0xe68 <_sensor_sample>
     c12:	9b 01       	movw	r18, r22
     c14:	ac 01       	movw	r20, r24
     c16:	c8 01       	movw	r24, r16
     c18:	07 96       	adiw	r24, 0x07	; 7
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	fc 01       	movw	r30, r24
     c24:	e7 59       	subi	r30, 0x97	; 151
     c26:	fe 4f       	sbci	r31, 0xFE	; 254
     c28:	20 83       	st	Z, r18
     c2a:	31 83       	std	Z+1, r19	; 0x01
     c2c:	42 83       	std	Z+2, r20	; 0x02
     c2e:	53 83       	std	Z+3, r21	; 0x03
	if ((++sensor.sample_idx) < SENSOR_SAMPLES) { return; }
     c30:	80 91 6b 01 	lds	r24, 0x016B
     c34:	8f 5f       	subi	r24, 0xFF	; 255
     c36:	80 93 6b 01 	sts	0x016B, r24
     c3a:	80 91 6b 01 	lds	r24, 0x016B
     c3e:	84 31       	cpi	r24, 0x14	; 20
     c40:	08 f4       	brcc	.+2      	; 0xc44 <sensor_callback+0x6a>
     c42:	06 c1       	rjmp	.+524    	; 0xe50 <sensor_callback+0x276>

	// process the array to clean up samples
	double mean;
	sensor.std_dev = std_dev(sensor.sample, SENSOR_SAMPLES, &mean);
     c44:	85 e8       	ldi	r24, 0x85	; 133
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	9e 01       	movw	r18, r28
     c4a:	2e 5f       	subi	r18, 0xFE	; 254
     c4c:	3f 4f       	sbci	r19, 0xFF	; 255
     c4e:	64 e1       	ldi	r22, 0x14	; 20
     c50:	a9 01       	movw	r20, r18
     c52:	0e 94 27 0b 	call	0x164e	; 0x164e <std_dev>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	80 93 71 01 	sts	0x0171, r24
     c5e:	90 93 72 01 	sts	0x0172, r25
     c62:	a0 93 73 01 	sts	0x0173, r26
     c66:	b0 93 74 01 	sts	0x0174, r27
	if (sensor.std_dev > sensor.reading_variance_max) {
     c6a:	80 91 71 01 	lds	r24, 0x0171
     c6e:	90 91 72 01 	lds	r25, 0x0172
     c72:	a0 91 73 01 	lds	r26, 0x0173
     c76:	b0 91 74 01 	lds	r27, 0x0174
     c7a:	20 91 79 01 	lds	r18, 0x0179
     c7e:	30 91 7a 01 	lds	r19, 0x017A
     c82:	40 91 7b 01 	lds	r20, 0x017B
     c86:	50 91 7c 01 	lds	r21, 0x017C
     c8a:	bc 01       	movw	r22, r24
     c8c:	cd 01       	movw	r24, r26
     c8e:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__gesf2>
     c92:	18 16       	cp	r1, r24
     c94:	3c f4       	brge	.+14     	; 0xca4 <sensor_callback+0xca>
		sensor.state = SENSOR_ERROR;
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	80 93 69 01 	sts	0x0169, r24
		sensor.code = SENSOR_ERROR_BAD_READINGS;
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	80 93 6a 01 	sts	0x016A, r24
     ca2:	d6 c0       	rjmp	.+428    	; 0xe50 <sensor_callback+0x276>
		return;
	}

	// reject the outlier samples and re-compute the average
	sensor.samples = 0;
     ca4:	10 92 6c 01 	sts	0x016C, r1
	sensor.temperature = 0;
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	a0 e0       	ldi	r26, 0x00	; 0
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	80 93 6d 01 	sts	0x016D, r24
     cb4:	90 93 6e 01 	sts	0x016E, r25
     cb8:	a0 93 6f 01 	sts	0x016F, r26
     cbc:	b0 93 70 01 	sts	0x0170, r27
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     cc0:	19 82       	std	Y+1, r1	; 0x01
     cc2:	68 c0       	rjmp	.+208    	; 0xd94 <sensor_callback+0x1ba>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	88 2f       	mov	r24, r24
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	07 96       	adiw	r24, 0x07	; 7
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	fc 01       	movw	r30, r24
     cd6:	e7 59       	subi	r30, 0x97	; 151
     cd8:	fe 4f       	sbci	r31, 0xFE	; 254
     cda:	80 81       	ld	r24, Z
     cdc:	91 81       	ldd	r25, Z+1	; 0x01
     cde:	a2 81       	ldd	r26, Z+2	; 0x02
     ce0:	b3 81       	ldd	r27, Z+3	; 0x03
     ce2:	2a 81       	ldd	r18, Y+2	; 0x02
     ce4:	3b 81       	ldd	r19, Y+3	; 0x03
     ce6:	4c 81       	ldd	r20, Y+4	; 0x04
     ce8:	5d 81       	ldd	r21, Y+5	; 0x05
     cea:	bc 01       	movw	r22, r24
     cec:	cd 01       	movw	r24, r26
     cee:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__subsf3>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	7c 01       	movw	r14, r24
     cf8:	8d 01       	movw	r16, r26
     cfa:	e8 94       	clt
     cfc:	17 f9       	bld	r17, 7
     cfe:	80 91 75 01 	lds	r24, 0x0175
     d02:	90 91 76 01 	lds	r25, 0x0176
     d06:	a0 91 77 01 	lds	r26, 0x0177
     d0a:	b0 91 78 01 	lds	r27, 0x0178
     d0e:	20 91 71 01 	lds	r18, 0x0171
     d12:	30 91 72 01 	lds	r19, 0x0172
     d16:	40 91 73 01 	lds	r20, 0x0173
     d1a:	50 91 74 01 	lds	r21, 0x0174
     d1e:	bc 01       	movw	r22, r24
     d20:	cd 01       	movw	r24, r26
     d22:	0e 94 82 11 	call	0x2304	; 0x2304 <__mulsf3>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	9c 01       	movw	r18, r24
     d2c:	ad 01       	movw	r20, r26
     d2e:	c8 01       	movw	r24, r16
     d30:	b7 01       	movw	r22, r14
     d32:	0e 94 2f 10 	call	0x205e	; 0x205e <__cmpsf2>
     d36:	88 23       	and	r24, r24
     d38:	54 f5       	brge	.+84     	; 0xd8e <sensor_callback+0x1b4>
			sensor.temperature += sensor.sample[i];
     d3a:	e0 90 6d 01 	lds	r14, 0x016D
     d3e:	f0 90 6e 01 	lds	r15, 0x016E
     d42:	00 91 6f 01 	lds	r16, 0x016F
     d46:	10 91 70 01 	lds	r17, 0x0170
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	07 96       	adiw	r24, 0x07	; 7
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	fc 01       	movw	r30, r24
     d5c:	e7 59       	subi	r30, 0x97	; 151
     d5e:	fe 4f       	sbci	r31, 0xFE	; 254
     d60:	20 81       	ld	r18, Z
     d62:	31 81       	ldd	r19, Z+1	; 0x01
     d64:	42 81       	ldd	r20, Z+2	; 0x02
     d66:	53 81       	ldd	r21, Z+3	; 0x03
     d68:	c8 01       	movw	r24, r16
     d6a:	b7 01       	movw	r22, r14
     d6c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__addsf3>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	80 93 6d 01 	sts	0x016D, r24
     d78:	90 93 6e 01 	sts	0x016E, r25
     d7c:	a0 93 6f 01 	sts	0x016F, r26
     d80:	b0 93 70 01 	sts	0x0170, r27
			sensor.samples++;
     d84:	80 91 6c 01 	lds	r24, 0x016C
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	80 93 6c 01 	sts	0x016C, r24
	}

	// reject the outlier samples and re-compute the average
	sensor.samples = 0;
	sensor.temperature = 0;
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	84 31       	cpi	r24, 0x14	; 20
     d98:	08 f4       	brcc	.+2      	; 0xd9c <sensor_callback+0x1c2>
     d9a:	94 cf       	rjmp	.-216    	; 0xcc4 <sensor_callback+0xea>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
			sensor.temperature += sensor.sample[i];
			sensor.samples++;
		}
	}
	sensor.temperature /= sensor.samples;// calculate mean temp w/o the outliers
     d9c:	e0 90 6d 01 	lds	r14, 0x016D
     da0:	f0 90 6e 01 	lds	r15, 0x016E
     da4:	00 91 6f 01 	lds	r16, 0x016F
     da8:	10 91 70 01 	lds	r17, 0x0170
     dac:	80 91 6c 01 	lds	r24, 0x016C
     db0:	88 2f       	mov	r24, r24
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	aa 27       	eor	r26, r26
     db6:	97 fd       	sbrc	r25, 7
     db8:	a0 95       	com	r26
     dba:	ba 2f       	mov	r27, r26
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	0e 94 ce 10 	call	0x219c	; 0x219c <__floatsisf>
     dc4:	9b 01       	movw	r18, r22
     dc6:	ac 01       	movw	r20, r24
     dc8:	c8 01       	movw	r24, r16
     dca:	b7 01       	movw	r22, r14
     dcc:	0e 94 33 10 	call	0x2066	; 0x2066 <__divsf3>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	80 93 6d 01 	sts	0x016D, r24
     dd8:	90 93 6e 01 	sts	0x016E, r25
     ddc:	a0 93 6f 01 	sts	0x016F, r26
     de0:	b0 93 70 01 	sts	0x0170, r27
	sensor.state = SENSOR_HAS_DATA;
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	80 93 69 01 	sts	0x0169, r24
	sensor.code = SENSOR_IDLE;			// we are done. Flip it back to idle
     dea:	10 92 6a 01 	sts	0x016A, r1

	// process the exception cases
	if (sensor.temperature > SENSOR_DISCONNECTED_TEMPERATURE) {
     dee:	80 91 6d 01 	lds	r24, 0x016D
     df2:	90 91 6e 01 	lds	r25, 0x016E
     df6:	a0 91 6f 01 	lds	r26, 0x016F
     dfa:	b0 91 70 01 	lds	r27, 0x0170
     dfe:	bc 01       	movw	r22, r24
     e00:	cd 01       	movw	r24, r26
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	48 ec       	ldi	r20, 0xC8	; 200
     e08:	53 e4       	ldi	r21, 0x43	; 67
     e0a:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__gesf2>
     e0e:	18 16       	cp	r1, r24
     e10:	3c f4       	brge	.+14     	; 0xe20 <sensor_callback+0x246>
		sensor.state = SENSOR_ERROR;
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	80 93 69 01 	sts	0x0169, r24
		sensor.code = SENSOR_ERROR_DISCONNECTED;
     e18:	83 e0       	ldi	r24, 0x03	; 3
     e1a:	80 93 6a 01 	sts	0x016A, r24
     e1e:	18 c0       	rjmp	.+48     	; 0xe50 <sensor_callback+0x276>
	} else if (sensor.temperature < SENSOR_NO_POWER_TEMPERATURE) {
     e20:	80 91 6d 01 	lds	r24, 0x016D
     e24:	90 91 6e 01 	lds	r25, 0x016E
     e28:	a0 91 6f 01 	lds	r26, 0x016F
     e2c:	b0 91 70 01 	lds	r27, 0x0170
     e30:	bc 01       	movw	r22, r24
     e32:	cd 01       	movw	r24, r26
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	50 ec       	ldi	r21, 0xC0	; 192
     e3c:	0e 94 2f 10 	call	0x205e	; 0x205e <__cmpsf2>
     e40:	88 23       	and	r24, r24
     e42:	34 f4       	brge	.+12     	; 0xe50 <sensor_callback+0x276>
		sensor.state = SENSOR_ERROR;
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	80 93 69 01 	sts	0x0169, r24
		sensor.code = SENSOR_ERROR_NO_POWER;
     e4a:	84 e0       	ldi	r24, 0x04	; 4
     e4c:	80 93 6a 01 	sts	0x016A, r24
	}
}
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	08 95       	ret

00000e68 <_sensor_sample>:
 *
 *		temp = (adc_value * 1.456355556) - -120.7135972
 */

static inline double _sensor_sample(uint8_t adc_channel)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	89 83       	std	Y+1, r24	; 0x01
	double random_gain = 5;
	double random_variation = ((double)(rand() - RAND_MAX/2) / RAND_MAX/2) * random_gain;
	double reading = 60 + random_variation;
	return (((double)reading * SENSOR_SLOPE) + SENSOR_OFFSET);	// useful for testing the math
#else
	return (((double)adc_read() * SENSOR_SLOPE) + SENSOR_OFFSET);
     e74:	0e 94 8d 07 	call	0xf1a	; 0xf1a <adc_read>
     e78:	cc 01       	movw	r24, r24
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	0e 94 cc 10 	call	0x2198	; 0x2198 <__floatunsisf>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	bc 01       	movw	r22, r24
     e8c:	cd 01       	movw	r24, r26
     e8e:	26 e0       	ldi	r18, 0x06	; 6
     e90:	3f ea       	ldi	r19, 0xAF	; 175
     e92:	4a ef       	ldi	r20, 0xFA	; 250
     e94:	5e e3       	ldi	r21, 0x3E	; 62
     e96:	0e 94 82 11 	call	0x2304	; 0x2304 <__mulsf3>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	bc 01       	movw	r22, r24
     ea0:	cd 01       	movw	r24, r26
     ea2:	23 ed       	ldi	r18, 0xD3	; 211
     ea4:	31 eb       	ldi	r19, 0xB1	; 177
     ea6:	46 ed       	ldi	r20, 0xD6	; 214
     ea8:	5e e3       	ldi	r21, 0x3E	; 62
     eaa:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__subsf3>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
#endif
}
     eb2:	bc 01       	movw	r22, r24
     eb4:	cd 01       	movw	r24, r26
     eb6:	0f 90       	pop	r0
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <adc_init>:
 *	There's a weird bug where somethimes the first conversion returns zero. 
 *	I need to fund out why this is happening and stop it.
 *	In the mean time there is a do-while loop in the read function.
 */
void adc_init(uint8_t channel)
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	0f 92       	push	r0
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	89 83       	std	Y+1, r24	; 0x01
	ADMUX  = (ADC_REFS | channel);	 // setup ADC Vref and channel
     eca:	ec e7       	ldi	r30, 0x7C	; 124
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	80 64       	ori	r24, 0x40	; 64
     ed2:	80 83       	st	Z, r24
	ADCSRA = (ADC_ENABLE | ADC_PRESCALE);// Enable ADC (bit 7) & set prescaler
     ed4:	ea e7       	ldi	r30, 0x7A	; 122
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	86 e8       	ldi	r24, 0x86	; 134
     eda:	80 83       	st	Z, r24

	ADMUX &= 0xF0;						// clobber the channel
     edc:	ac e7       	ldi	r26, 0x7C	; 124
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	ec e7       	ldi	r30, 0x7C	; 124
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	80 7f       	andi	r24, 0xF0	; 240
     ee8:	8c 93       	st	X, r24
	ADMUX |= 0x0F & ADC_CHANNEL;		// set the channel
     eea:	ac e7       	ldi	r26, 0x7C	; 124
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ec e7       	ldi	r30, 0x7C	; 124
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8c 93       	st	X, r24
	DIDR0 = (1<<channel);				// disable digital input
     ef6:	ee e7       	ldi	r30, 0x7E	; 126
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <adc_init+0x4e>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <adc_init+0x4a>
     f10:	80 83       	st	Z, r24
}
     f12:	0f 90       	pop	r0
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <adc_read>:

uint16_t adc_read()
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	0f 92       	push	r0
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	do {
		ADCSRA |= ADC_START_CONVERSION; // start the conversion
     f24:	aa e7       	ldi	r26, 0x7A	; 122
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	ea e7       	ldi	r30, 0x7A	; 122
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	80 64       	ori	r24, 0x40	; 64
     f30:	8c 93       	st	X, r24
		while (ADCSRA && (1<<ADIF) == 0);// wait about 100 uSec
     f32:	ea e7       	ldi	r30, 0x7A	; 122
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
		ADCSRA |= (1<<ADIF);			// clear the conversion flag
     f38:	aa e7       	ldi	r26, 0x7A	; 122
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ea e7       	ldi	r30, 0x7A	; 122
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	80 61       	ori	r24, 0x10	; 16
     f44:	8c 93       	st	X, r24
	} while (ADC == 0);
     f46:	e8 e7       	ldi	r30, 0x78	; 120
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	91 81       	ldd	r25, Z+1	; 0x01
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	49 f3       	breq	.-46     	; 0xf24 <adc_read+0xa>
	return (ADC);
     f52:	e8 e7       	ldi	r30, 0x78	; 120
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	91 81       	ldd	r25, Z+1	; 0x01
}
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <pwm_init>:
 * 	Configure timer 2 for extruder heater PWM
 *	Mode: 8 bit Fast PWM Fast w/OCR2A setting PWM freq (TOP value)
 *		  and OCR2B setting the duty cycle as a fraction of OCR2A seeting
 */
void pwm_init(void)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
	TCCR2A  = PWM_INVERTED;		// alternative is PWM_NONINVERTED
     f6a:	e0 eb       	ldi	r30, 0xB0	; 176
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 ef       	ldi	r24, 0xF0	; 240
     f70:	80 83       	st	Z, r24
	TCCR2A |= 0b00000011;		// Waveform generation set to MODE 7 - here...
     f72:	a0 eb       	ldi	r26, 0xB0	; 176
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e0 eb       	ldi	r30, 0xB0	; 176
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	83 60       	ori	r24, 0x03	; 3
     f7e:	8c 93       	st	X, r24
	TCCR2B  = 0b00001000;		// ...continued here
     f80:	e1 eb       	ldi	r30, 0xB1	; 177
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	88 e0       	ldi	r24, 0x08	; 8
     f86:	80 83       	st	Z, r24
	TCCR2B |= PWM_PRESCALE_SET;	// set clock and prescaler
     f88:	a1 eb       	ldi	r26, 0xB1	; 177
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e1 eb       	ldi	r30, 0xB1	; 177
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	84 60       	ori	r24, 0x04	; 4
     f94:	8c 93       	st	X, r24
	TIMSK1 = 0; 				// disable PWM interrupts
     f96:	ef e6       	ldi	r30, 0x6F	; 111
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	10 82       	st	Z, r1
	OCR2A = 0;					// clear PWM frequency (TOP value)
     f9c:	e3 eb       	ldi	r30, 0xB3	; 179
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	10 82       	st	Z, r1
	OCR2B = 0;					// clear PWM duty cycle as % of TOP value
     fa2:	e4 eb       	ldi	r30, 0xB4	; 180
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	10 82       	st	Z, r1
	device.pwm_freq = 0;
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	a0 e0       	ldi	r26, 0x00	; 0
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	80 93 dd 01 	sts	0x01DD, r24
     fb4:	90 93 de 01 	sts	0x01DE, r25
     fb8:	a0 93 df 01 	sts	0x01DF, r26
     fbc:	b0 93 e0 01 	sts	0x01E0, r27
}
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <pwm_on>:

void pwm_on(double freq, double duty)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	28 97       	sbiw	r28, 0x08	; 8
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	69 83       	std	Y+1, r22	; 0x01
     fdc:	7a 83       	std	Y+2, r23	; 0x02
     fde:	8b 83       	std	Y+3, r24	; 0x03
     fe0:	9c 83       	std	Y+4, r25	; 0x04
     fe2:	2d 83       	std	Y+5, r18	; 0x05
     fe4:	3e 83       	std	Y+6, r19	; 0x06
     fe6:	4f 83       	std	Y+7, r20	; 0x07
     fe8:	58 87       	std	Y+8, r21	; 0x08
	pwm_init();
     fea:	0e 94 b1 07 	call	0xf62	; 0xf62 <pwm_init>
	pwm_set_freq(freq);
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	ab 81       	ldd	r26, Y+3	; 0x03
     ff4:	bc 81       	ldd	r27, Y+4	; 0x04
     ff6:	bc 01       	movw	r22, r24
     ff8:	cd 01       	movw	r24, r26
     ffa:	0e 94 21 08 	call	0x1042	; 0x1042 <pwm_set_freq>
	pwm_set_duty(duty);
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	9e 81       	ldd	r25, Y+6	; 0x06
    1002:	af 81       	ldd	r26, Y+7	; 0x07
    1004:	b8 85       	ldd	r27, Y+8	; 0x08
    1006:	bc 01       	movw	r22, r24
    1008:	cd 01       	movw	r24, r26
    100a:	0e 94 8b 08 	call	0x1116	; 0x1116 <pwm_set_duty>
}
    100e:	28 96       	adiw	r28, 0x08	; 8
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <pwm_off>:

void pwm_off(void)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
	pwm_on(0,0);
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <pwm_on>
}
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <pwm_set_freq>:
 *
 *	At current settings the range is from about 500 Hz to about 6000 Hz  
 */

uint8_t pwm_set_freq(double freq)
{
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	00 d0       	rcall	.+0      	; 0x104c <pwm_set_freq+0xa>
    104c:	00 d0       	rcall	.+0      	; 0x104e <pwm_set_freq+0xc>
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	69 83       	std	Y+1, r22	; 0x01
    1054:	7a 83       	std	Y+2, r23	; 0x02
    1056:	8b 83       	std	Y+3, r24	; 0x03
    1058:	9c 83       	std	Y+4, r25	; 0x04
	device.pwm_freq = F_CPU / PWM_PRESCALE / freq;
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	74 e2       	ldi	r23, 0x24	; 36
    105e:	84 ef       	ldi	r24, 0xF4	; 244
    1060:	97 e4       	ldi	r25, 0x47	; 71
    1062:	29 81       	ldd	r18, Y+1	; 0x01
    1064:	3a 81       	ldd	r19, Y+2	; 0x02
    1066:	4b 81       	ldd	r20, Y+3	; 0x03
    1068:	5c 81       	ldd	r21, Y+4	; 0x04
    106a:	0e 94 33 10 	call	0x2066	; 0x2066 <__divsf3>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	80 93 dd 01 	sts	0x01DD, r24
    1076:	90 93 de 01 	sts	0x01DE, r25
    107a:	a0 93 df 01 	sts	0x01DF, r26
    107e:	b0 93 e0 01 	sts	0x01E0, r27
	if (device.pwm_freq < PWM_MIN_RES) { 
    1082:	80 91 dd 01 	lds	r24, 0x01DD
    1086:	90 91 de 01 	lds	r25, 0x01DE
    108a:	a0 91 df 01 	lds	r26, 0x01DF
    108e:	b0 91 e0 01 	lds	r27, 0x01E0
    1092:	bc 01       	movw	r22, r24
    1094:	cd 01       	movw	r24, r26
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 ea       	ldi	r20, 0xA0	; 160
    109c:	51 e4       	ldi	r21, 0x41	; 65
    109e:	0e 94 2f 10 	call	0x205e	; 0x205e <__cmpsf2>
    10a2:	88 23       	and	r24, r24
    10a4:	2c f4       	brge	.+10     	; 0x10b0 <pwm_set_freq+0x6e>
		OCR2A = PWM_MIN_RES;
    10a6:	e3 eb       	ldi	r30, 0xB3	; 179
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	84 e1       	ldi	r24, 0x14	; 20
    10ac:	80 83       	st	Z, r24
    10ae:	29 c0       	rjmp	.+82     	; 0x1102 <pwm_set_freq+0xc0>
	} else if (device.pwm_freq >= PWM_MAX_RES) { 
    10b0:	80 91 dd 01 	lds	r24, 0x01DD
    10b4:	90 91 de 01 	lds	r25, 0x01DE
    10b8:	a0 91 df 01 	lds	r26, 0x01DF
    10bc:	b0 91 e0 01 	lds	r27, 0x01E0
    10c0:	bc 01       	movw	r22, r24
    10c2:	cd 01       	movw	r24, r26
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	4f e7       	ldi	r20, 0x7F	; 127
    10ca:	53 e4       	ldi	r21, 0x43	; 67
    10cc:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__gesf2>
    10d0:	88 23       	and	r24, r24
    10d2:	2c f0       	brlt	.+10     	; 0x10de <pwm_set_freq+0x9c>
		OCR2A = PWM_MAX_RES;
    10d4:	e3 eb       	ldi	r30, 0xB3	; 179
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	80 83       	st	Z, r24
    10dc:	12 c0       	rjmp	.+36     	; 0x1102 <pwm_set_freq+0xc0>
	} else { 
		OCR2A = (uint8_t)device.pwm_freq;
    10de:	03 eb       	ldi	r16, 0xB3	; 179
    10e0:	10 e0       	ldi	r17, 0x00	; 0
    10e2:	80 91 dd 01 	lds	r24, 0x01DD
    10e6:	90 91 de 01 	lds	r25, 0x01DE
    10ea:	a0 91 df 01 	lds	r26, 0x01DF
    10ee:	b0 91 e0 01 	lds	r27, 0x01E0
    10f2:	bc 01       	movw	r22, r24
    10f4:	cd 01       	movw	r24, r26
    10f6:	0e 94 a0 10 	call	0x2140	; 0x2140 <__fixunssfsi>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	f8 01       	movw	r30, r16
    1100:	80 83       	st	Z, r24
	}
	return (SC_OK);
    1102:	80 e0       	ldi	r24, 0x00	; 0
}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	08 95       	ret

00001116 <pwm_set_duty>:
 *	Since I can't seem to get the output pin to work in non-inverted mode
 *	it's done in software in this routine.
 */

uint8_t pwm_set_duty(double duty)
{
    1116:	cf 92       	push	r12
    1118:	df 92       	push	r13
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	00 d0       	rcall	.+0      	; 0x1128 <pwm_set_duty+0x12>
    1128:	00 d0       	rcall	.+0      	; 0x112a <pwm_set_duty+0x14>
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	69 83       	std	Y+1, r22	; 0x01
    1130:	7a 83       	std	Y+2, r23	; 0x02
    1132:	8b 83       	std	Y+3, r24	; 0x03
    1134:	9c 83       	std	Y+4, r25	; 0x04
	if (duty < 0.01) {				// anything approaching 0% 
    1136:	69 81       	ldd	r22, Y+1	; 0x01
    1138:	7a 81       	ldd	r23, Y+2	; 0x02
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	2a e0       	ldi	r18, 0x0A	; 10
    1140:	37 ed       	ldi	r19, 0xD7	; 215
    1142:	43 e2       	ldi	r20, 0x23	; 35
    1144:	5c e3       	ldi	r21, 0x3C	; 60
    1146:	0e 94 2f 10 	call	0x205e	; 0x205e <__cmpsf2>
    114a:	88 23       	and	r24, r24
    114c:	2c f4       	brge	.+10     	; 0x1158 <pwm_set_duty+0x42>
		OCR2B = 255;
    114e:	e4 eb       	ldi	r30, 0xB4	; 180
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	8f ef       	ldi	r24, 0xFF	; 255
    1154:	80 83       	st	Z, r24
    1156:	4a c0       	rjmp	.+148    	; 0x11ec <pwm_set_duty+0xd6>
	} else if (duty > 99.9) { 		// anything approaching 100%
    1158:	69 81       	ldd	r22, Y+1	; 0x01
    115a:	7a 81       	ldd	r23, Y+2	; 0x02
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	2d ec       	ldi	r18, 0xCD	; 205
    1162:	3c ec       	ldi	r19, 0xCC	; 204
    1164:	47 ec       	ldi	r20, 0xC7	; 199
    1166:	52 e4       	ldi	r21, 0x42	; 66
    1168:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__gesf2>
    116c:	18 16       	cp	r1, r24
    116e:	24 f4       	brge	.+8      	; 0x1178 <pwm_set_duty+0x62>
		OCR2B = 0;
    1170:	e4 eb       	ldi	r30, 0xB4	; 180
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	10 82       	st	Z, r1
    1176:	3a c0       	rjmp	.+116    	; 0x11ec <pwm_set_duty+0xd6>
	} else {
		OCR2B = (uint8_t)(OCR2A * (1-(duty/100)));
    1178:	0f 2e       	mov	r0, r31
    117a:	f4 eb       	ldi	r31, 0xB4	; 180
    117c:	cf 2e       	mov	r12, r31
    117e:	dd 24       	eor	r13, r13
    1180:	f0 2d       	mov	r31, r0
    1182:	e3 eb       	ldi	r30, 0xB3	; 179
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	aa 27       	eor	r26, r26
    118e:	97 fd       	sbrc	r25, 7
    1190:	a0 95       	com	r26
    1192:	ba 2f       	mov	r27, r26
    1194:	bc 01       	movw	r22, r24
    1196:	cd 01       	movw	r24, r26
    1198:	0e 94 ce 10 	call	0x219c	; 0x219c <__floatsisf>
    119c:	7b 01       	movw	r14, r22
    119e:	8c 01       	movw	r16, r24
    11a0:	69 81       	ldd	r22, Y+1	; 0x01
    11a2:	7a 81       	ldd	r23, Y+2	; 0x02
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	48 ec       	ldi	r20, 0xC8	; 200
    11ae:	52 ec       	ldi	r21, 0xC2	; 194
    11b0:	0e 94 33 10 	call	0x2066	; 0x2066 <__divsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	bc 01       	movw	r22, r24
    11ba:	cd 01       	movw	r24, r26
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e8       	ldi	r20, 0x80	; 128
    11c2:	5f e3       	ldi	r21, 0x3F	; 63
    11c4:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__addsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	9c 01       	movw	r18, r24
    11ce:	ad 01       	movw	r20, r26
    11d0:	c8 01       	movw	r24, r16
    11d2:	b7 01       	movw	r22, r14
    11d4:	0e 94 82 11 	call	0x2304	; 0x2304 <__mulsf3>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	bc 01       	movw	r22, r24
    11de:	cd 01       	movw	r24, r26
    11e0:	0e 94 a0 10 	call	0x2140	; 0x2140 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	f6 01       	movw	r30, r12
    11ea:	80 83       	st	Z, r24
	}
	OCR2A = (uint8_t)device.pwm_freq;
    11ec:	03 eb       	ldi	r16, 0xB3	; 179
    11ee:	10 e0       	ldi	r17, 0x00	; 0
    11f0:	80 91 dd 01 	lds	r24, 0x01DD
    11f4:	90 91 de 01 	lds	r25, 0x01DE
    11f8:	a0 91 df 01 	lds	r26, 0x01DF
    11fc:	b0 91 e0 01 	lds	r27, 0x01E0
    1200:	bc 01       	movw	r22, r24
    1202:	cd 01       	movw	r24, r26
    1204:	0e 94 a0 10 	call	0x2140	; 0x2140 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	f8 01       	movw	r30, r16
    120e:	80 83       	st	Z, r24
	return (SC_OK);
    1210:	80 e0       	ldi	r24, 0x00	; 0
}
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	df 90       	pop	r13
    1228:	cf 90       	pop	r12
    122a:	08 95       	ret

0000122c <tick_init>:
 * tick_100ms()	  - tasks that run every 100 ms
 * tick_1sec()	  - tasks that run every 100 ms
 */

void tick_init(void)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = TICK_MODE;				// mode_settings
    1234:	e4 e4       	ldi	r30, 0x44	; 68
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	82 e0       	ldi	r24, 0x02	; 2
    123a:	80 83       	st	Z, r24
	TCCR0B = TICK_PRESCALER;		// 1024 ~= 7800 Hz
    123c:	e5 e4       	ldi	r30, 0x45	; 69
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	83 e0       	ldi	r24, 0x03	; 3
    1242:	80 83       	st	Z, r24
	OCR0A = TICK_COUNT;
    1244:	e7 e4       	ldi	r30, 0x47	; 71
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	8d e7       	ldi	r24, 0x7D	; 125
    124a:	80 83       	st	Z, r24
	TIMSK0 = (1<<OCIE0A);			// enable compare interrupts
    124c:	ee e6       	ldi	r30, 0x6E	; 110
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	80 83       	st	Z, r24
	device.tick_10ms_count = 10;
    1254:	8a e0       	ldi	r24, 0x0A	; 10
    1256:	80 93 da 01 	sts	0x01DA, r24
	device.tick_100ms_count = 10;
    125a:	8a e0       	ldi	r24, 0x0A	; 10
    125c:	80 93 db 01 	sts	0x01DB, r24
	device.tick_1sec_count = 10;	
    1260:	8a e0       	ldi	r24, 0x0A	; 10
    1262:	80 93 dc 01 	sts	0x01DC, r24
}
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
    126c:	1f 92       	push	r1
    126e:	0f 92       	push	r0
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	0f 92       	push	r0
    1274:	11 24       	eor	r1, r1
    1276:	8f 93       	push	r24
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
	device.tick_flag = true;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	80 93 d9 01 	sts	0x01D9, r24
}
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	8f 91       	pop	r24
    128c:	0f 90       	pop	r0
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	0f 90       	pop	r0
    1292:	1f 90       	pop	r1
    1294:	18 95       	reti

00001296 <tick_callback>:

uint8_t tick_callback(void)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	0f 92       	push	r0
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
	if (device.tick_flag == false) { return (SC_NOOP);}
    12a0:	80 91 d9 01 	lds	r24, 0x01D9
    12a4:	88 23       	and	r24, r24
    12a6:	19 f4       	brne	.+6      	; 0x12ae <tick_callback+0x18>
    12a8:	83 e0       	ldi	r24, 0x03	; 3
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	35 c0       	rjmp	.+106    	; 0x1318 <tick_callback+0x82>

	device.tick_flag = false;
    12ae:	10 92 d9 01 	sts	0x01D9, r1
	tick_1ms();
    12b2:	0e 94 91 09 	call	0x1322	; 0x1322 <tick_1ms>

	if (--device.tick_10ms_count != 0) { return (SC_OK);}
    12b6:	80 91 da 01 	lds	r24, 0x01DA
    12ba:	81 50       	subi	r24, 0x01	; 1
    12bc:	80 93 da 01 	sts	0x01DA, r24
    12c0:	80 91 da 01 	lds	r24, 0x01DA
    12c4:	88 23       	and	r24, r24
    12c6:	11 f0       	breq	.+4      	; 0x12cc <tick_callback+0x36>
    12c8:	19 82       	std	Y+1, r1	; 0x01
    12ca:	26 c0       	rjmp	.+76     	; 0x1318 <tick_callback+0x82>
	device.tick_10ms_count = 10;
    12cc:	8a e0       	ldi	r24, 0x0A	; 10
    12ce:	80 93 da 01 	sts	0x01DA, r24
	tick_10ms();
    12d2:	0e 94 9a 09 	call	0x1334	; 0x1334 <tick_10ms>

	if (--device.tick_100ms_count != 0) { return (SC_OK);}
    12d6:	80 91 db 01 	lds	r24, 0x01DB
    12da:	81 50       	subi	r24, 0x01	; 1
    12dc:	80 93 db 01 	sts	0x01DB, r24
    12e0:	80 91 db 01 	lds	r24, 0x01DB
    12e4:	88 23       	and	r24, r24
    12e6:	11 f0       	breq	.+4      	; 0x12ec <tick_callback+0x56>
    12e8:	19 82       	std	Y+1, r1	; 0x01
    12ea:	16 c0       	rjmp	.+44     	; 0x1318 <tick_callback+0x82>
	device.tick_100ms_count = 10;
    12ec:	8a e0       	ldi	r24, 0x0A	; 10
    12ee:	80 93 db 01 	sts	0x01DB, r24
	tick_100ms();
    12f2:	0e 94 a1 09 	call	0x1342	; 0x1342 <tick_100ms>

	if (--device.tick_1sec_count != 0) { return (SC_OK);}
    12f6:	80 91 dc 01 	lds	r24, 0x01DC
    12fa:	81 50       	subi	r24, 0x01	; 1
    12fc:	80 93 dc 01 	sts	0x01DC, r24
    1300:	80 91 dc 01 	lds	r24, 0x01DC
    1304:	88 23       	and	r24, r24
    1306:	11 f0       	breq	.+4      	; 0x130c <tick_callback+0x76>
    1308:	19 82       	std	Y+1, r1	; 0x01
    130a:	06 c0       	rjmp	.+12     	; 0x1318 <tick_callback+0x82>
	device.tick_1sec_count = 10;
    130c:	8a e0       	ldi	r24, 0x0A	; 10
    130e:	80 93 dc 01 	sts	0x01DC, r24
	tick_1sec();
    1312:	0e 94 aa 09 	call	0x1354	; 0x1354 <tick_1sec>

	return (SC_OK);
    1316:	19 82       	std	Y+1, r1	; 0x01
    1318:	89 81       	ldd	r24, Y+1	; 0x01
}
    131a:	0f 90       	pop	r0
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <tick_1ms>:

void tick_1ms(void)				// 1ms callout
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
	sensor_callback();
    132a:	0e 94 ed 05 	call	0xbda	; 0xbda <sensor_callback>
}
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <tick_10ms>:

void tick_10ms(void)			// 10 ms callout
{
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
}
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <tick_100ms>:

void tick_100ms(void)			// 100ms callout
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
	heater_callback();
    134a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <heater_callback>
}
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <tick_1sec>:

void tick_1sec(void)			// 1 second callout
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
//	led_toggle();
}
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <led_on>:
 * led_off()
 * led_toggle()
 */

void led_on(void) 
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
	LED_PORT &= ~(LED_PIN);
    136a:	ab e2       	ldi	r26, 0x2B	; 43
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	eb e2       	ldi	r30, 0x2B	; 43
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	8b 7f       	andi	r24, 0xFB	; 251
    1376:	8c 93       	st	X, r24
}
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <led_off>:

void led_off(void) 
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
	LED_PORT |= LED_PIN;
    1386:	ab e2       	ldi	r26, 0x2B	; 43
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	eb e2       	ldi	r30, 0x2B	; 43
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	84 60       	ori	r24, 0x04	; 4
    1392:	8c 93       	st	X, r24
}
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <led_toggle>:

void led_toggle(void) 
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
	if (LED_PORT && LED_PIN) {
    13a2:	eb e2       	ldi	r30, 0x2B	; 43
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	88 23       	and	r24, r24
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <led_toggle+0x18>
		led_on();
    13ac:	0e 94 b1 09 	call	0x1362	; 0x1362 <led_on>
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <led_toggle+0x1c>
	} else {
		led_off();
    13b2:	0e 94 bf 09 	call	0x137e	; 0x137e <led_off>
	}
}
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <device_reset>:
 *	device_read_byte() 	- read a byte from Kinen channel into device structs
 *	device_write_byte() - write a byte from device to Kinen channel
 */

void device_reset(void)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
	return;
}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <device_read_byte>:

uint8_t device_read_byte(uint8_t addr, uint8_t *data)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <device_read_byte+0x6>
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <device_read_byte+0x8>
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	7b 83       	std	Y+3, r23	; 0x03
    13da:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	80 51       	subi	r24, 0x10	; 16
    13e0:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	8a 30       	cpi	r24, 0x0A	; 10
    13e6:	18 f0       	brcs	.+6      	; 0x13ee <device_read_byte+0x24>
    13e8:	88 e1       	ldi	r24, 0x18	; 24
    13ea:	8c 83       	std	Y+4, r24	; 0x04
    13ec:	0b c0       	rjmp	.+22     	; 0x1404 <device_read_byte+0x3a>
	*data = device.array[addr];
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	fc 01       	movw	r30, r24
    13f6:	ef 51       	subi	r30, 0x1F	; 31
    13f8:	fe 4f       	sbci	r31, 0xFE	; 254
    13fa:	80 81       	ld	r24, Z
    13fc:	ea 81       	ldd	r30, Y+2	; 0x02
    13fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1400:	80 83       	st	Z, r24
	return (SC_OK);
    1402:	1c 82       	std	Y+4, r1	; 0x04
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <device_write_byte>:

uint8_t device_write_byte(uint8_t addr, uint8_t data)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	00 d0       	rcall	.+0      	; 0x141a <device_write_byte+0x6>
    141a:	0f 92       	push	r0
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	80 51       	subi	r24, 0x10	; 16
    1428:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	8a 30       	cpi	r24, 0x0A	; 10
    142e:	18 f0       	brcs	.+6      	; 0x1436 <device_write_byte+0x22>
    1430:	88 e1       	ldi	r24, 0x18	; 24
    1432:	8b 83       	std	Y+3, r24	; 0x03
    1434:	09 c0       	rjmp	.+18     	; 0x1448 <device_write_byte+0x34>
	// There are no checks in here for read-only locations
	// Assumes all locations are writable.
	device.array[addr] = data;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	88 2f       	mov	r24, r24
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	fc 01       	movw	r30, r24
    143e:	ef 51       	subi	r30, 0x1F	; 31
    1440:	fe 4f       	sbci	r31, 0xFE	; 254
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	80 83       	st	Z, r24
	return (SC_OK);
    1446:	1b 82       	std	Y+3, r1	; 0x03
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
}
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <kinen_init>:
 * kinen_init() - set up Kinen subsystems; master or slave
 *
 *	Would like some kind of auto-detect here. For now it's just commenting
 */
void kinen_init(void)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
//	kinen_master_init();
	kinen_slave_init();
    145e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <kinen_slave_init>
}
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <kinen_callback>:
 *	Returns SC_NOOP if no operation was performed
 *	Returns EAGAIN if the function should block lower-priority functions
 *	in the main DISPATCH loop
 */
uint8_t kinen_callback(void)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
//	return (SC_OK);			// return from a successful operation
//	return (SC_EAGAIN);		// return if lower priority tasks should be blocked
	return (SC_NOOP);		// return if no operation was performed 
    1470:	83 e0       	ldi	r24, 0x03	; 3
}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <kinen_slave_init>:

/*
 * kinen_slave_init() - setup atmega SPI peripheral to be the OCB slave 
 */
void kinen_slave_init(void)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62

//	PRR |= 0x07;				// don't screw with the power reduction register
	DDRB &= ~(1<<DDB4);			// Set MISO output, all others unaffected
    1480:	a4 e2       	ldi	r26, 0x24	; 36
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e4 e2       	ldi	r30, 0x24	; 36
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	8f 7e       	andi	r24, 0xEF	; 239
    148c:	8c 93       	st	X, r24
	SPCR = (1<<SPIE | 1<<SPE);	// Enable SPI and its interrupt, set MSB first, slave mode
    148e:	ec e4       	ldi	r30, 0x4C	; 76
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 ec       	ldi	r24, 0xC0	; 192
    1494:	80 83       	st	Z, r24
	SPCR = (1<<CPOL | 1<<CPHA);	// Uncomment for mode 3 operation, comment for mode 0
    1496:	ec e4       	ldi	r30, 0x4C	; 76
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8c e0       	ldi	r24, 0x0C	; 12
    149c:	80 83       	st	Z, r24
	memset(&ki.array, 0, sizeof(ki.array));
    149e:	89 e5       	ldi	r24, 0x59	; 89
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	40 e1       	ldi	r20, 0x10	; 16
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	0e 94 61 12 	call	0x24c2	; 0x24c2 <memset>

	ki_wait_time = DEVICE_WAIT_TIME;	// setup read-only values
    14ae:	8a e0       	ldi	r24, 0x0A	; 10
    14b0:	80 93 5c 01 	sts	0x015C, r24
	ki_device_type = DEVICE_TYPE;
    14b4:	84 e0       	ldi	r24, 0x04	; 4
    14b6:	80 93 61 01 	sts	0x0161, r24
	ki_device_id_hi = DEVICE_ID_HI;
    14ba:	10 92 62 01 	sts	0x0162, r1
	ki_device_id_lo = DEVICE_ID_LO;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	80 93 63 01 	sts	0x0163, r24
	ki_device_rev_major = DEVICE_REV_MAJOR;
    14c4:	10 92 64 01 	sts	0x0164, r1
	ki_device_rev_minor = DEVICE_REV_MINOR;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	80 93 65 01 	sts	0x0165, r24
	ki_device_uuid_1 = DEVICE_UUID_1;
    14ce:	10 92 66 01 	sts	0x0166, r1
	ki_device_uuid_2 = DEVICE_UUID_2;
    14d2:	10 92 67 01 	sts	0x0167, r1
	ki_device_uuid_3 = DEVICE_UUID_3;
    14d6:	10 92 68 01 	sts	0x0168, r1

	ki_status = SC_OK;
    14da:	10 92 5a 01 	sts	0x015A, r1
	SPDR = ki_status;
    14de:	ee e4       	ldi	r30, 0x4E	; 78
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 91 5a 01 	lds	r24, 0x015A
    14e6:	80 83       	st	Z, r24
}
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <__vector_17>:
 * SPI Slave RX Interrupt() - interrupts on byte received
 *
 * Uses a 2 phase state machine to toggle back and forth between ADDR and DATA bytes
 */
ISR(SPI_STC_vect)
{
    14ee:	1f 92       	push	r1
    14f0:	0f 92       	push	r0
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	0f 92       	push	r0
    14f6:	11 24       	eor	r1, r1
    14f8:	2f 93       	push	r18
    14fa:	3f 93       	push	r19
    14fc:	4f 93       	push	r20
    14fe:	5f 93       	push	r21
    1500:	6f 93       	push	r22
    1502:	7f 93       	push	r23
    1504:	8f 93       	push	r24
    1506:	9f 93       	push	r25
    1508:	af 93       	push	r26
    150a:	bf 93       	push	r27
    150c:	ef 93       	push	r30
    150e:	ff 93       	push	r31
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
	// receive address byte
	if (ki_slave.phase == KINEN_ADDR) {
    1518:	80 91 00 01 	lds	r24, 0x0100
    151c:	88 23       	and	r24, r24
    151e:	c9 f5       	brne	.+114    	; 0x1592 <__vector_17+0xa4>
		ki_slave.phase = KINEN_DATA;	// advance phase
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	80 93 00 01 	sts	0x0100, r24
		ki_slave.addr = SPDR;		// read and save the address byte
    1526:	ee e4       	ldi	r30, 0x4E	; 78
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	80 93 01 01 	sts	0x0101, r24
		if (ki_command == KINEN_WRITE) { // write is simple...
    1530:	80 91 59 01 	lds	r24, 0x0159
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	29 f4       	brne	.+10     	; 0x1542 <__vector_17+0x54>
			SPDR = KINEN_OK_BYTE;			// already saved addr, now return an OK
    1538:	ee e4       	ldi	r30, 0x4E	; 78
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	8a e5       	ldi	r24, 0x5A	; 90
    153e:	80 83       	st	Z, r24
    1540:	4a c0       	rjmp	.+148    	; 0x15d6 <__vector_17+0xe8>
		} else {
			if (ki_slave.addr < KINEN_COMMON_MAX) {	// handle OCB address space
    1542:	80 91 01 01 	lds	r24, 0x0101
    1546:	80 31       	cpi	r24, 0x10	; 16
    1548:	60 f4       	brcc	.+24     	; 0x1562 <__vector_17+0x74>
				SPDR = ki.array[ki_slave.addr];
    154a:	ae e4       	ldi	r26, 0x4E	; 78
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	80 91 01 01 	lds	r24, 0x0101
    1552:	88 2f       	mov	r24, r24
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	fc 01       	movw	r30, r24
    1558:	e7 5a       	subi	r30, 0xA7	; 167
    155a:	fe 4f       	sbci	r31, 0xFE	; 254
    155c:	80 81       	ld	r24, Z
    155e:	8c 93       	st	X, r24
    1560:	3a c0       	rjmp	.+116    	; 0x15d6 <__vector_17+0xe8>
			} else {								// handle device address space
				if ((ki_status = device_read_byte(ki_slave.addr, &ki_slave.data)) == SC_OK) {
    1562:	80 91 01 01 	lds	r24, 0x0101
    1566:	22 e0       	ldi	r18, 0x02	; 2
    1568:	31 e0       	ldi	r19, 0x01	; 1
    156a:	b9 01       	movw	r22, r18
    156c:	0e 94 e5 09 	call	0x13ca	; 0x13ca <device_read_byte>
    1570:	80 93 5a 01 	sts	0x015A, r24
    1574:	80 91 5a 01 	lds	r24, 0x015A
    1578:	88 23       	and	r24, r24
    157a:	31 f4       	brne	.+12     	; 0x1588 <__vector_17+0x9a>
					SPDR = ki_slave.data;
    157c:	ee e4       	ldi	r30, 0x4E	; 78
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 91 02 01 	lds	r24, 0x0102
    1584:	80 83       	st	Z, r24
    1586:	27 c0       	rjmp	.+78     	; 0x15d6 <__vector_17+0xe8>
				} else {
					SPDR = KINEN_ERR_BYTE;
    1588:	ee e4       	ldi	r30, 0x4E	; 78
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	85 ea       	ldi	r24, 0xA5	; 165
    158e:	80 83       	st	Z, r24
    1590:	22 c0       	rjmp	.+68     	; 0x15d6 <__vector_17+0xe8>
			}
		}

	// receive data byte
	} else {
		ki_slave.phase = KINEN_ADDR;	// advance phase
    1592:	10 92 00 01 	sts	0x0100, r1
		ki_slave.data = SPDR;		// read and save the data byte
    1596:	ee e4       	ldi	r30, 0x4E	; 78
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	80 93 02 01 	sts	0x0102, r24
		if (ki_command == KINEN_WRITE) {
    15a0:	80 91 59 01 	lds	r24, 0x0159
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	b9 f4       	brne	.+46     	; 0x15d6 <__vector_17+0xe8>
			if (ki_slave.addr < KINEN_COMMON_MAX) {
    15a8:	80 91 01 01 	lds	r24, 0x0101
    15ac:	80 31       	cpi	r24, 0x10	; 16
    15ae:	50 f4       	brcc	.+20     	; 0x15c4 <__vector_17+0xd6>
				ki_status = _slave_write_byte(ki_slave.addr, ki_slave.data);
    15b0:	80 91 01 01 	lds	r24, 0x0101
    15b4:	90 91 02 01 	lds	r25, 0x0102
    15b8:	69 2f       	mov	r22, r25
    15ba:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_slave_write_byte>
    15be:	80 93 5a 01 	sts	0x015A, r24
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <__vector_17+0xe8>
			} else {
				ki_status = device_write_byte(ki_slave.addr, ki_slave.data);
    15c4:	80 91 01 01 	lds	r24, 0x0101
    15c8:	90 91 02 01 	lds	r25, 0x0102
    15cc:	69 2f       	mov	r22, r25
    15ce:	0e 94 0a 0a 	call	0x1414	; 0x1414 <device_write_byte>
    15d2:	80 93 5a 01 	sts	0x015A, r24
			}
		}
	}
}
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	ff 91       	pop	r31
    15dc:	ef 91       	pop	r30
    15de:	bf 91       	pop	r27
    15e0:	af 91       	pop	r26
    15e2:	9f 91       	pop	r25
    15e4:	8f 91       	pop	r24
    15e6:	7f 91       	pop	r23
    15e8:	6f 91       	pop	r22
    15ea:	5f 91       	pop	r21
    15ec:	4f 91       	pop	r20
    15ee:	3f 91       	pop	r19
    15f0:	2f 91       	pop	r18
    15f2:	0f 90       	pop	r0
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	0f 90       	pop	r0
    15f8:	1f 90       	pop	r1
    15fa:	18 95       	reti

000015fc <_slave_write_byte>:

/* 
 * _slave_write_byte() - helper to write byte to a non-device address
 */
static uint8_t _slave_write_byte(const uint8_t addr, const uint8_t data)
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	00 d0       	rcall	.+0      	; 0x1602 <_slave_write_byte+0x6>
    1602:	0f 92       	push	r0
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	6a 83       	std	Y+2, r22	; 0x02
	if (addr == KINEN_COMMAND) {
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	88 23       	and	r24, r24
    1610:	21 f4       	brne	.+8      	; 0x161a <_slave_write_byte+0x1e>
		ki_command = data; 
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	80 93 59 01 	sts	0x0159, r24
    1618:	12 c0       	rjmp	.+36     	; 0x163e <_slave_write_byte+0x42>

	} else if (addr == KINEN_ADDR_PAGE) { 
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	84 30       	cpi	r24, 0x04	; 4
    161e:	21 f4       	brne	.+8      	; 0x1628 <_slave_write_byte+0x2c>
		ki_addr_page = data; 
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	80 93 5d 01 	sts	0x015D, r24
    1626:	0b c0       	rjmp	.+22     	; 0x163e <_slave_write_byte+0x42>

	} else if (addr == KINEN_RESET) {
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	85 30       	cpi	r24, 0x05	; 5
    162c:	29 f4       	brne	.+10     	; 0x1638 <_slave_write_byte+0x3c>
		kinen_slave_init();
    162e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <kinen_slave_init>
		device_reset();
    1632:	0e 94 de 09 	call	0x13bc	; 0x13bc <device_reset>
    1636:	03 c0       	rjmp	.+6      	; 0x163e <_slave_write_byte+0x42>

	} else {
		return (SC_READ_ONLY_ADDRESS);
    1638:	89 e1       	ldi	r24, 0x19	; 25
    163a:	8b 83       	std	Y+3, r24	; 0x03
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <_slave_write_byte+0x44>
	}
	return (SC_OK);
    163e:	1b 82       	std	Y+3, r1	; 0x03
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <std_dev>:
 *
 *	"A lot of people talk about standard deviation but what is a standard deviant?"
 */

double std_dev(double a[], uint8_t n, double *mean) 
{
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	66 97       	sbiw	r28, 0x16	; 22
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	9f 87       	std	Y+15, r25	; 0x0f
    166c:	8e 87       	std	Y+14, r24	; 0x0e
    166e:	68 8b       	std	Y+16, r22	; 0x10
    1670:	5a 8b       	std	Y+18, r21	; 0x12
    1672:	49 8b       	std	Y+17, r20	; 0x11
	if(n == 0) { return (0);}
    1674:	88 89       	ldd	r24, Y+16	; 0x10
    1676:	88 23       	and	r24, r24
    1678:	49 f4       	brne	.+18     	; 0x168c <std_dev+0x3e>
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	a0 e0       	ldi	r26, 0x00	; 0
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	8b 8b       	std	Y+19, r24	; 0x13
    1684:	9c 8b       	std	Y+20, r25	; 0x14
    1686:	ad 8b       	std	Y+21, r26	; 0x15
    1688:	be 8b       	std	Y+22, r27	; 0x16
    168a:	ae c0       	rjmp	.+348    	; 0x17e8 <std_dev+0x19a>
	double sum = 0;
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	a0 e0       	ldi	r26, 0x00	; 0
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	8a 87       	std	Y+10, r24	; 0x0a
    1696:	9b 87       	std	Y+11, r25	; 0x0b
    1698:	ac 87       	std	Y+12, r26	; 0x0c
    169a:	bd 87       	std	Y+13, r27	; 0x0d
	double sq_sum = 0;
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	a0 e0       	ldi	r26, 0x00	; 0
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	8e 83       	std	Y+6, r24	; 0x06
    16a6:	9f 83       	std	Y+7, r25	; 0x07
    16a8:	a8 87       	std	Y+8, r26	; 0x08
    16aa:	b9 87       	std	Y+9, r27	; 0x09
	for(uint8_t i=0; i<n; ++i) {
    16ac:	19 82       	std	Y+1, r1	; 0x01
    16ae:	43 c0       	rjmp	.+134    	; 0x1736 <std_dev+0xe8>
		sum += a[i];
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	88 2f       	mov	r24, r24
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	9c 01       	movw	r18, r24
    16b8:	22 0f       	add	r18, r18
    16ba:	33 1f       	adc	r19, r19
    16bc:	22 0f       	add	r18, r18
    16be:	33 1f       	adc	r19, r19
    16c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    16c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    16c4:	fc 01       	movw	r30, r24
    16c6:	e2 0f       	add	r30, r18
    16c8:	f3 1f       	adc	r31, r19
    16ca:	20 81       	ld	r18, Z
    16cc:	31 81       	ldd	r19, Z+1	; 0x01
    16ce:	42 81       	ldd	r20, Z+2	; 0x02
    16d0:	53 81       	ldd	r21, Z+3	; 0x03
    16d2:	6a 85       	ldd	r22, Y+10	; 0x0a
    16d4:	7b 85       	ldd	r23, Y+11	; 0x0b
    16d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    16d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    16da:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__addsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	8a 87       	std	Y+10, r24	; 0x0a
    16e4:	9b 87       	std	Y+11, r25	; 0x0b
    16e6:	ac 87       	std	Y+12, r26	; 0x0c
    16e8:	bd 87       	std	Y+13, r27	; 0x0d
		sq_sum += square(a[i]);
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	88 2f       	mov	r24, r24
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	9c 01       	movw	r18, r24
    16f2:	22 0f       	add	r18, r18
    16f4:	33 1f       	adc	r19, r19
    16f6:	22 0f       	add	r18, r18
    16f8:	33 1f       	adc	r19, r19
    16fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    16fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    16fe:	fc 01       	movw	r30, r24
    1700:	e2 0f       	add	r30, r18
    1702:	f3 1f       	adc	r31, r19
    1704:	80 81       	ld	r24, Z
    1706:	91 81       	ldd	r25, Z+1	; 0x01
    1708:	a2 81       	ldd	r26, Z+2	; 0x02
    170a:	b3 81       	ldd	r27, Z+3	; 0x03
    170c:	bc 01       	movw	r22, r24
    170e:	cd 01       	movw	r24, r26
    1710:	0e 94 27 12 	call	0x244e	; 0x244e <square>
    1714:	9b 01       	movw	r18, r22
    1716:	ac 01       	movw	r20, r24
    1718:	6e 81       	ldd	r22, Y+6	; 0x06
    171a:	7f 81       	ldd	r23, Y+7	; 0x07
    171c:	88 85       	ldd	r24, Y+8	; 0x08
    171e:	99 85       	ldd	r25, Y+9	; 0x09
    1720:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__addsf3>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	8e 83       	std	Y+6, r24	; 0x06
    172a:	9f 83       	std	Y+7, r25	; 0x07
    172c:	a8 87       	std	Y+8, r26	; 0x08
    172e:	b9 87       	std	Y+9, r27	; 0x09
double std_dev(double a[], uint8_t n, double *mean) 
{
	if(n == 0) { return (0);}
	double sum = 0;
	double sq_sum = 0;
	for(uint8_t i=0; i<n; ++i) {
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	8f 5f       	subi	r24, 0xFF	; 255
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	99 81       	ldd	r25, Y+1	; 0x01
    1738:	88 89       	ldd	r24, Y+16	; 0x10
    173a:	98 17       	cp	r25, r24
    173c:	08 f4       	brcc	.+2      	; 0x1740 <std_dev+0xf2>
    173e:	b8 cf       	rjmp	.-144    	; 0x16b0 <std_dev+0x62>
		sum += a[i];
		sq_sum += square(a[i]);
	}
	*mean = sum / n;
    1740:	88 89       	ldd	r24, Y+16	; 0x10
    1742:	88 2f       	mov	r24, r24
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	aa 27       	eor	r26, r26
    1748:	97 fd       	sbrc	r25, 7
    174a:	a0 95       	com	r26
    174c:	ba 2f       	mov	r27, r26
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 ce 10 	call	0x219c	; 0x219c <__floatsisf>
    1756:	9b 01       	movw	r18, r22
    1758:	ac 01       	movw	r20, r24
    175a:	6a 85       	ldd	r22, Y+10	; 0x0a
    175c:	7b 85       	ldd	r23, Y+11	; 0x0b
    175e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1760:	9d 85       	ldd	r25, Y+13	; 0x0d
    1762:	0e 94 33 10 	call	0x2066	; 0x2066 <__divsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	e9 89       	ldd	r30, Y+17	; 0x11
    176c:	fa 89       	ldd	r31, Y+18	; 0x12
    176e:	80 83       	st	Z, r24
    1770:	91 83       	std	Z+1, r25	; 0x01
    1772:	a2 83       	std	Z+2, r26	; 0x02
    1774:	b3 83       	std	Z+3, r27	; 0x03
	double variance = (sq_sum / n) - square(*mean);
    1776:	88 89       	ldd	r24, Y+16	; 0x10
    1778:	88 2f       	mov	r24, r24
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	aa 27       	eor	r26, r26
    177e:	97 fd       	sbrc	r25, 7
    1780:	a0 95       	com	r26
    1782:	ba 2f       	mov	r27, r26
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 ce 10 	call	0x219c	; 0x219c <__floatsisf>
    178c:	9b 01       	movw	r18, r22
    178e:	ac 01       	movw	r20, r24
    1790:	6e 81       	ldd	r22, Y+6	; 0x06
    1792:	7f 81       	ldd	r23, Y+7	; 0x07
    1794:	88 85       	ldd	r24, Y+8	; 0x08
    1796:	99 85       	ldd	r25, Y+9	; 0x09
    1798:	0e 94 33 10 	call	0x2066	; 0x2066 <__divsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	7c 01       	movw	r14, r24
    17a2:	8d 01       	movw	r16, r26
    17a4:	e9 89       	ldd	r30, Y+17	; 0x11
    17a6:	fa 89       	ldd	r31, Y+18	; 0x12
    17a8:	80 81       	ld	r24, Z
    17aa:	91 81       	ldd	r25, Z+1	; 0x01
    17ac:	a2 81       	ldd	r26, Z+2	; 0x02
    17ae:	b3 81       	ldd	r27, Z+3	; 0x03
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 27 12 	call	0x244e	; 0x244e <square>
    17b8:	9b 01       	movw	r18, r22
    17ba:	ac 01       	movw	r20, r24
    17bc:	c8 01       	movw	r24, r16
    17be:	b7 01       	movw	r22, r14
    17c0:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__subsf3>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	8a 83       	std	Y+2, r24	; 0x02
    17ca:	9b 83       	std	Y+3, r25	; 0x03
    17cc:	ac 83       	std	Y+4, r26	; 0x04
    17ce:	bd 83       	std	Y+5, r27	; 0x05
	return sqrt(variance);
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	9b 81       	ldd	r25, Y+3	; 0x03
    17d4:	ac 81       	ldd	r26, Y+4	; 0x04
    17d6:	bd 81       	ldd	r27, Y+5	; 0x05
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <sqrt>
    17e0:	6b 8b       	std	Y+19, r22	; 0x13
    17e2:	7c 8b       	std	Y+20, r23	; 0x14
    17e4:	8d 8b       	std	Y+21, r24	; 0x15
    17e6:	9e 8b       	std	Y+22, r25	; 0x16
    17e8:	8b 89       	ldd	r24, Y+19	; 0x13
    17ea:	9c 89       	ldd	r25, Y+20	; 0x14
    17ec:	ad 89       	ldd	r26, Y+21	; 0x15
    17ee:	be 89       	ldd	r27, Y+22	; 0x16
}
    17f0:	bc 01       	movw	r22, r24
    17f2:	cd 01       	movw	r24, r26
    17f4:	66 96       	adiw	r28, 0x16	; 22
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	1f 91       	pop	r17
    1806:	0f 91       	pop	r16
    1808:	ff 90       	pop	r15
    180a:	ef 90       	pop	r14
    180c:	08 95       	ret

0000180e <set_baud_rate>:
uint8_t rx_buffer_tail = 0;
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_buffer_head = 0;
volatile uint8_t tx_buffer_tail = 0;

static void set_baud_rate(long baud) {
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <set_baud_rate+0x6>
    1814:	00 d0       	rcall	.+0      	; 0x1816 <set_baud_rate+0x8>
    1816:	00 d0       	rcall	.+0      	; 0x1818 <set_baud_rate+0xa>
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	6b 83       	std	Y+3, r22	; 0x03
    181e:	7c 83       	std	Y+4, r23	; 0x04
    1820:	8d 83       	std	Y+5, r24	; 0x05
    1822:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t UBRR0_value = (F_CPU / (8 * baud)) - 1;
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	ad 81       	ldd	r26, Y+5	; 0x05
    182a:	be 81       	ldd	r27, Y+6	; 0x06
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	aa 1f       	adc	r26, r26
    1832:	bb 1f       	adc	r27, r27
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	aa 1f       	adc	r26, r26
    183a:	bb 1f       	adc	r27, r27
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	aa 1f       	adc	r26, r26
    1842:	bb 1f       	adc	r27, r27
    1844:	9c 01       	movw	r18, r24
    1846:	ad 01       	movw	r20, r26
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	92 e1       	ldi	r25, 0x12	; 18
    184c:	aa e7       	ldi	r26, 0x7A	; 122
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	bc 01       	movw	r22, r24
    1852:	cd 01       	movw	r24, r26
    1854:	0e 94 3f 12 	call	0x247e	; 0x247e <__udivmodsi4>
    1858:	da 01       	movw	r26, r20
    185a:	c9 01       	movw	r24, r18
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	9a 83       	std	Y+2, r25	; 0x02
    1860:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = UBRR0_value >> 8;
    1862:	e5 ec       	ldi	r30, 0xC5	; 197
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	9a 81       	ldd	r25, Y+2	; 0x02
    186a:	89 2f       	mov	r24, r25
    186c:	99 27       	eor	r25, r25
    186e:	80 83       	st	Z, r24
	UBRR0L = UBRR0_value;
    1870:	e4 ec       	ldi	r30, 0xC4	; 196
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	80 83       	st	Z, r24
	UCSR0A &= ~(1<<U2X0);		// baud doubler off
    1878:	a0 ec       	ldi	r26, 0xC0	; 192
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e0 ec       	ldi	r30, 0xC0	; 192
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	8d 7f       	andi	r24, 0xFD	; 253
    1884:	8c 93       	st	X, r24
}
    1886:	26 96       	adiw	r28, 0x06	; 6
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <serial_init>:

void serial_init(long baud)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <serial_init+0x6>
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <serial_init+0x8>
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	69 83       	std	Y+1, r22	; 0x01
    18a6:	7a 83       	std	Y+2, r23	; 0x02
    18a8:	8b 83       	std	Y+3, r24	; 0x03
    18aa:	9c 83       	std	Y+4, r25	; 0x04
	set_baud_rate(baud);
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	9a 81       	ldd	r25, Y+2	; 0x02
    18b0:	ab 81       	ldd	r26, Y+3	; 0x03
    18b2:	bc 81       	ldd	r27, Y+4	; 0x04
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 07 0c 	call	0x180e	; 0x180e <set_baud_rate>
	UCSR0B |= 1<<RXEN0;			// enable rx and tx
    18bc:	a1 ec       	ldi	r26, 0xC1	; 193
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e1 ec       	ldi	r30, 0xC1	; 193
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	80 61       	ori	r24, 0x10	; 16
    18c8:	8c 93       	st	X, r24
	UCSR0B |= 1<<TXEN0;	
    18ca:	a1 ec       	ldi	r26, 0xC1	; 193
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e1 ec       	ldi	r30, 0xC1	; 193
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	88 60       	ori	r24, 0x08	; 8
    18d6:	8c 93       	st	X, r24
	UCSR0B |= 1<<RXCIE0;		// enable interrupt on complete reception of a byte
    18d8:	a1 ec       	ldi	r26, 0xC1	; 193
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e1 ec       	ldi	r30, 0xC1	; 193
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	80 68       	ori	r24, 0x80	; 128
    18e4:	8c 93       	st	X, r24
	// USART defaults to 8-bit, no parity, 1 stop bit
}
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <serial_write>:

void serial_write(uint8_t data) {
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <serial_write+0x6>
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = tx_buffer_head + 1;	// Calculate next head
    1900:	80 91 05 01 	lds	r24, 0x0105
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	89 83       	std	Y+1, r24	; 0x01
	if (next_head == TX_BUFFER_SIZE) {
		next_head = 0; 
	}
	// Enable Data Register Empty Interrupt to make sure tx-streaming is running
	UCSR0B |= (1<<UDRIE0); 
    1908:	a1 ec       	ldi	r26, 0xC1	; 193
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e1 ec       	ldi	r30, 0xC1	; 193
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	80 62       	ori	r24, 0x20	; 32
    1914:	8c 93       	st	X, r24
	while (next_head == tx_buffer_tail); 	// Wait until there is space in the buffer
    1916:	90 91 06 01 	lds	r25, 0x0106
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	89 17       	cp	r24, r25
    191e:	d9 f3       	breq	.-10     	; 0x1916 <serial_write+0x22>

	tx_buffer[tx_buffer_head] = data;		// Store data and advance head
    1920:	80 91 05 01 	lds	r24, 0x0105
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	fc 01       	movw	r30, r24
    192a:	e5 51       	subi	r30, 0x15	; 21
    192c:	fd 4f       	sbci	r31, 0xFD	; 253
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	80 83       	st	Z, r24
	tx_buffer_head = next_head;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	80 93 05 01 	sts	0x0105, r24
}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <__vector_19>:

// Data Register Empty Interrupt handler
ISR(USART_UDRE_vect)
{
    1942:	1f 92       	push	r1
    1944:	0f 92       	push	r0
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	0f 92       	push	r0
    194a:	11 24       	eor	r1, r1
    194c:	8f 93       	push	r24
    194e:	9f 93       	push	r25
    1950:	af 93       	push	r26
    1952:	bf 93       	push	r27
    1954:	ef 93       	push	r30
    1956:	ff 93       	push	r31
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	0f 92       	push	r0
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
	uint8_t tail = tx_buffer_tail;	// Temporary tx_buffer_tail (to optimize for volatile)
    1962:	80 91 06 01 	lds	r24, 0x0106
    1966:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = tx_buffer[tail];			// Send a byte from the buffer	
    1968:	a6 ec       	ldi	r26, 0xC6	; 198
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	88 2f       	mov	r24, r24
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	fc 01       	movw	r30, r24
    1974:	e5 51       	subi	r30, 0x15	; 21
    1976:	fd 4f       	sbci	r31, 0xFD	; 253
    1978:	80 81       	ld	r24, Z
    197a:	8c 93       	st	X, r24
    tail++;							// Update tail position
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	8f 5f       	subi	r24, 0xFF	; 255
    1980:	89 83       	std	Y+1, r24	; 0x01
    if (tail == TX_BUFFER_SIZE) { tail = 0; }
	tx_buffer_tail = tail;
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	80 93 06 01 	sts	0x0106, r24

	// Turn off Data Register Empty Interrupt to stop tx-streaming if this concludes the transfer
	if (tail == tx_buffer_head) { 
    1988:	90 91 05 01 	lds	r25, 0x0105
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	89 17       	cp	r24, r25
    1990:	39 f4       	brne	.+14     	; 0x19a0 <__vector_19+0x5e>
		UCSR0B &= ~(1<<UDRIE0);
    1992:	a1 ec       	ldi	r26, 0xC1	; 193
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e1 ec       	ldi	r30, 0xC1	; 193
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	8f 7d       	andi	r24, 0xDF	; 223
    199e:	8c 93       	st	X, r24
	}
}
    19a0:	0f 90       	pop	r0
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	ff 91       	pop	r31
    19a8:	ef 91       	pop	r30
    19aa:	bf 91       	pop	r27
    19ac:	af 91       	pop	r26
    19ae:	9f 91       	pop	r25
    19b0:	8f 91       	pop	r24
    19b2:	0f 90       	pop	r0
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	0f 90       	pop	r0
    19b8:	1f 90       	pop	r1
    19ba:	18 95       	reti

000019bc <serial_read>:

uint8_t serial_read()
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <serial_read+0x6>
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
	if (rx_buffer_head == rx_buffer_tail) {
    19c6:	90 91 03 01 	lds	r25, 0x0103
    19ca:	80 91 04 01 	lds	r24, 0x0104
    19ce:	98 17       	cp	r25, r24
    19d0:	19 f4       	brne	.+6      	; 0x19d8 <serial_read+0x1c>
		return SERIAL_NO_DATA;
    19d2:	8f ef       	ldi	r24, 0xFF	; 255
    19d4:	8a 83       	std	Y+2, r24	; 0x02
    19d6:	10 c0       	rjmp	.+32     	; 0x19f8 <serial_read+0x3c>
	} else {
		uint8_t data = rx_buffer[rx_buffer_tail];
    19d8:	80 91 04 01 	lds	r24, 0x0104
    19dc:	88 2f       	mov	r24, r24
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	fc 01       	movw	r30, r24
    19e2:	e5 51       	subi	r30, 0x15	; 21
    19e4:	fe 4f       	sbci	r31, 0xFE	; 254
    19e6:	80 81       	ld	r24, Z
    19e8:	89 83       	std	Y+1, r24	; 0x01
		rx_buffer_tail++;
    19ea:	80 91 04 01 	lds	r24, 0x0104
    19ee:	8f 5f       	subi	r24, 0xFF	; 255
    19f0:	80 93 04 01 	sts	0x0104, r24
		if (rx_buffer_tail == RX_BUFFER_SIZE) { rx_buffer_tail = 0; }
		return data;
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	8a 83       	std	Y+2, r24	; 0x02
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <__vector_18>:

ISR(USART_RX_vect)
{
    1a04:	1f 92       	push	r1
    1a06:	0f 92       	push	r0
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	0f 92       	push	r0
    1a0c:	11 24       	eor	r1, r1
    1a0e:	8f 93       	push	r24
    1a10:	9f 93       	push	r25
    1a12:	ef 93       	push	r30
    1a14:	ff 93       	push	r31
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <__vector_18+0x18>
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = UDR0;
    1a20:	e6 ec       	ldi	r30, 0xC6	; 198
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = rx_buffer_head + 1;
    1a28:	80 91 03 01 	lds	r24, 0x0103
    1a2c:	8f 5f       	subi	r24, 0xFF	; 255
    1a2e:	89 83       	std	Y+1, r24	; 0x01
	
	if (next_head == RX_BUFFER_SIZE) { 
		next_head = 0;
	}
	if (next_head != rx_buffer_tail) {      // Write data to buffer unless it is full.
    1a30:	90 91 04 01 	lds	r25, 0x0104
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	89 17       	cp	r24, r25
    1a38:	61 f0       	breq	.+24     	; 0x1a52 <__vector_18+0x4e>
		rx_buffer[rx_buffer_head] = data;
    1a3a:	80 91 03 01 	lds	r24, 0x0103
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	fc 01       	movw	r30, r24
    1a44:	e5 51       	subi	r30, 0x15	; 21
    1a46:	fe 4f       	sbci	r31, 0xFE	; 254
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	80 83       	st	Z, r24
		rx_buffer_head = next_head;    
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	80 93 03 01 	sts	0x0103, r24
	}
}
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	ff 91       	pop	r31
    1a5c:	ef 91       	pop	r30
    1a5e:	9f 91       	pop	r25
    1a60:	8f 91       	pop	r24
    1a62:	0f 90       	pop	r0
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	0f 90       	pop	r0
    1a68:	1f 90       	pop	r1
    1a6a:	18 95       	reti

00001a6c <serial_reset_read_buffer>:

void serial_reset_read_buffer() 
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
  rx_buffer_tail = rx_buffer_head;
    1a74:	80 91 03 01 	lds	r24, 0x0103
    1a78:	80 93 04 01 	sts	0x0104, r24
}
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	08 95       	ret

00001a82 <printString>:

#include "print.h"
#include "serial.h"

void printString(const char *s)
{
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <printString+0x6>
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	9a 83       	std	Y+2, r25	; 0x02
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	0b c0       	rjmp	.+22     	; 0x1aa8 <printString+0x26>
  while (*s)
    serial_write(*s++);
    1a92:	e9 81       	ldd	r30, Y+1	; 0x01
    1a94:	fa 81       	ldd	r31, Y+2	; 0x02
    1a96:	20 81       	ld	r18, Z
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9c:	01 96       	adiw	r24, 0x01	; 1
    1a9e:	9a 83       	std	Y+2, r25	; 0x02
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	82 2f       	mov	r24, r18
    1aa4:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <serial_write>
#include "print.h"
#include "serial.h"

void printString(const char *s)
{
  while (*s)
    1aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    1aac:	80 81       	ld	r24, Z
    1aae:	88 23       	and	r24, r24
    1ab0:	81 f7       	brne	.-32     	; 0x1a92 <printString+0x10>
    serial_write(*s++);
}
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <printPgmString+0x6>
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <printPgmString+0x8>
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <printPgmString+0xa>
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	9e 83       	std	Y+6, r25	; 0x06
    1acc:	8d 83       	std	Y+5, r24	; 0x05
    1ace:	03 c0       	rjmp	.+6      	; 0x1ad6 <printPgmString+0x1a>
  char c;
  while ((c = pgm_read_byte_near(s++)))
    serial_write(c);
    1ad0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad2:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <serial_write>

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
  while ((c = pgm_read_byte_near(s++)))
    1ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ada:	9b 83       	std	Y+3, r25	; 0x03
    1adc:	8a 83       	std	Y+2, r24	; 0x02
    1ade:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	9e 83       	std	Y+6, r25	; 0x06
    1ae6:	8d 83       	std	Y+5, r24	; 0x05
    1ae8:	ea 81       	ldd	r30, Y+2	; 0x02
    1aea:	fb 81       	ldd	r31, Y+3	; 0x03
    1aec:	84 91       	lpm	r24, Z+
    1aee:	89 83       	std	Y+1, r24	; 0x01
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	8c 83       	std	Y+4, r24	; 0x04
    1af4:	8c 81       	ldd	r24, Y+4	; 0x04
    1af6:	88 23       	and	r24, r24
    1af8:	59 f7       	brne	.-42     	; 0x1ad0 <printPgmString+0x14>
    serial_write(c);
}
    1afa:	26 96       	adiw	r28, 0x06	; 6
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <print_uint8_base2>:
// 			'0' + buf[i - 1] :
// 			'A' + buf[i - 1] - 10);
// }

void print_uint8_base2(uint8_t n)
{ 
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	2a 97       	sbiw	r28, 0x0a	; 10
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char buf[8];
	uint8_t i = 0;
    1b22:	19 82       	std	Y+1, r1	; 0x01
    1b24:	12 c0       	rjmp	.+36     	; 0x1b4a <print_uint8_base2+0x3e>

	for (; i < 8; i++) {
		buf[i] = n & 1;
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b2e:	48 2f       	mov	r20, r24
    1b30:	41 70       	andi	r20, 0x01	; 1
    1b32:	ce 01       	movw	r24, r28
    1b34:	02 96       	adiw	r24, 0x02	; 2
    1b36:	fc 01       	movw	r30, r24
    1b38:	e2 0f       	add	r30, r18
    1b3a:	f3 1f       	adc	r31, r19
    1b3c:	40 83       	st	Z, r20
		n >>= 1;
    1b3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b40:	86 95       	lsr	r24
    1b42:	8a 87       	std	Y+10, r24	; 0x0a
void print_uint8_base2(uint8_t n)
{ 
	unsigned char buf[8];
	uint8_t i = 0;

	for (; i < 8; i++) {
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	8f 5f       	subi	r24, 0xFF	; 255
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	88 30       	cpi	r24, 0x08	; 8
    1b4e:	58 f3       	brcs	.-42     	; 0x1b26 <print_uint8_base2+0x1a>
    1b50:	12 c0       	rjmp	.+36     	; 0x1b76 <print_uint8_base2+0x6a>
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
		serial_write('0' + buf[i - 1]);
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	88 2f       	mov	r24, r24
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9c 01       	movw	r18, r24
    1b5a:	21 50       	subi	r18, 0x01	; 1
    1b5c:	30 40       	sbci	r19, 0x00	; 0
    1b5e:	ce 01       	movw	r24, r28
    1b60:	02 96       	adiw	r24, 0x02	; 2
    1b62:	fc 01       	movw	r30, r24
    1b64:	e2 0f       	add	r30, r18
    1b66:	f3 1f       	adc	r31, r19
    1b68:	80 81       	ld	r24, Z
    1b6a:	80 5d       	subi	r24, 0xD0	; 208
    1b6c:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <serial_write>
	for (; i < 8; i++) {
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	81 50       	subi	r24, 0x01	; 1
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	88 23       	and	r24, r24
    1b7a:	59 f7       	brne	.-42     	; 0x1b52 <print_uint8_base2+0x46>
		serial_write('0' + buf[i - 1]);
}
    1b7c:	2a 96       	adiw	r28, 0x0a	; 10
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <print_uint32_base10>:

static void print_uint32_base10(unsigned long n)
{ 
    1b8e:	0f 93       	push	r16
    1b90:	1f 93       	push	r17
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	2f 97       	sbiw	r28, 0x0f	; 15
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	6c 87       	std	Y+12, r22	; 0x0c
    1ba8:	7d 87       	std	Y+13, r23	; 0x0d
    1baa:	8e 87       	std	Y+14, r24	; 0x0e
    1bac:	9f 87       	std	Y+15, r25	; 0x0f
  unsigned char buf[10]; 
  uint8_t i = 0;
    1bae:	19 82       	std	Y+1, r1	; 0x01
  
  if (n == 0) {
    1bb0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bb2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bb4:	ae 85       	ldd	r26, Y+14	; 0x0e
    1bb6:	bf 85       	ldd	r27, Y+15	; 0x0f
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	a1 05       	cpc	r26, r1
    1bbc:	b1 05       	cpc	r27, r1
    1bbe:	91 f5       	brne	.+100    	; 0x1c24 <print_uint32_base10+0x96>
    serial_write('0');
    1bc0:	80 e3       	ldi	r24, 0x30	; 48
    1bc2:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <serial_write>
    1bc6:	4b c0       	rjmp	.+150    	; 0x1c5e <print_uint32_base10+0xd0>
    return;
  } 
  
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	08 2f       	mov	r16, r24
    1bcc:	10 e0       	ldi	r17, 0x00	; 0
    1bce:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bd0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bd2:	ae 85       	ldd	r26, Y+14	; 0x0e
    1bd4:	bf 85       	ldd	r27, Y+15	; 0x0f
    1bd6:	2a e0       	ldi	r18, 0x0A	; 10
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	50 e0       	ldi	r21, 0x00	; 0
    1bde:	bc 01       	movw	r22, r24
    1be0:	cd 01       	movw	r24, r26
    1be2:	0e 94 3f 12 	call	0x247e	; 0x247e <__udivmodsi4>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	28 2f       	mov	r18, r24
    1bec:	20 5d       	subi	r18, 0xD0	; 208
    1bee:	ce 01       	movw	r24, r28
    1bf0:	02 96       	adiw	r24, 0x02	; 2
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	e0 0f       	add	r30, r16
    1bf6:	f1 1f       	adc	r31, r17
    1bf8:	20 83       	st	Z, r18
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	8f 5f       	subi	r24, 0xFF	; 255
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    n /= 10;
    1c00:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c02:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c04:	ae 85       	ldd	r26, Y+14	; 0x0e
    1c06:	bf 85       	ldd	r27, Y+15	; 0x0f
    1c08:	2a e0       	ldi	r18, 0x0A	; 10
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e0       	ldi	r20, 0x00	; 0
    1c0e:	50 e0       	ldi	r21, 0x00	; 0
    1c10:	bc 01       	movw	r22, r24
    1c12:	cd 01       	movw	r24, r26
    1c14:	0e 94 3f 12 	call	0x247e	; 0x247e <__udivmodsi4>
    1c18:	da 01       	movw	r26, r20
    1c1a:	c9 01       	movw	r24, r18
    1c1c:	8c 87       	std	Y+12, r24	; 0x0c
    1c1e:	9d 87       	std	Y+13, r25	; 0x0d
    1c20:	ae 87       	std	Y+14, r26	; 0x0e
    1c22:	bf 87       	std	Y+15, r27	; 0x0f
  if (n == 0) {
    serial_write('0');
    return;
  } 
  
  while (n > 0) {
    1c24:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c26:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c28:	ae 85       	ldd	r26, Y+14	; 0x0e
    1c2a:	bf 85       	ldd	r27, Y+15	; 0x0f
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	a1 05       	cpc	r26, r1
    1c30:	b1 05       	cpc	r27, r1
    1c32:	51 f6       	brne	.-108    	; 0x1bc8 <print_uint32_base10+0x3a>
    1c34:	11 c0       	rjmp	.+34     	; 0x1c58 <print_uint32_base10+0xca>
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    serial_write(buf[i-1]);
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	88 2f       	mov	r24, r24
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9c 01       	movw	r18, r24
    1c3e:	21 50       	subi	r18, 0x01	; 1
    1c40:	30 40       	sbci	r19, 0x00	; 0
    1c42:	ce 01       	movw	r24, r28
    1c44:	02 96       	adiw	r24, 0x02	; 2
    1c46:	fc 01       	movw	r30, r24
    1c48:	e2 0f       	add	r30, r18
    1c4a:	f3 1f       	adc	r31, r19
    1c4c:	80 81       	ld	r24, Z
    1c4e:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <serial_write>
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	81 50       	subi	r24, 0x01	; 1
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	88 23       	and	r24, r24
    1c5c:	61 f7       	brne	.-40     	; 0x1c36 <print_uint32_base10+0xa8>
    serial_write(buf[i-1]);
}
    1c5e:	2f 96       	adiw	r28, 0x0f	; 15
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	1f 91       	pop	r17
    1c70:	0f 91       	pop	r16
    1c72:	08 95       	ret

00001c74 <printInteger>:

void printInteger(uint32_t n)
{
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <printInteger+0x6>
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <printInteger+0x8>
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	69 83       	std	Y+1, r22	; 0x01
    1c82:	7a 83       	std	Y+2, r23	; 0x02
    1c84:	8b 83       	std	Y+3, r24	; 0x03
    1c86:	9c 83       	std	Y+4, r25	; 0x04
  if (n < 0) {
    serial_write('-');
    n = -n;
  }
  print_uint32_base10(n);
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8c:	ab 81       	ldd	r26, Y+3	; 0x03
    1c8e:	bc 81       	ldd	r27, Y+4	; 0x04
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <print_uint32_base10>
}
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up 
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n)
{
    1ca6:	0f 93       	push	r16
    1ca8:	1f 93       	push	r17
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	64 97       	sbiw	r28, 0x14	; 20
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	69 8b       	std	Y+17, r22	; 0x11
    1cc0:	7a 8b       	std	Y+18, r23	; 0x12
    1cc2:	8b 8b       	std	Y+19, r24	; 0x13
    1cc4:	9c 8b       	std	Y+20, r25	; 0x14
	if (n < 0) {
    1cc6:	69 89       	ldd	r22, Y+17	; 0x11
    1cc8:	7a 89       	ldd	r23, Y+18	; 0x12
    1cca:	8b 89       	ldd	r24, Y+19	; 0x13
    1ccc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	0e 94 2f 10 	call	0x205e	; 0x205e <__cmpsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	64 f4       	brge	.+24     	; 0x1cf6 <printFloat+0x50>
		serial_write('-');
    1cde:	8d e2       	ldi	r24, 0x2D	; 45
    1ce0:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <serial_write>
		n = -n;
    1ce4:	89 89       	ldd	r24, Y+17	; 0x11
    1ce6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce8:	ab 89       	ldd	r26, Y+19	; 0x13
    1cea:	bc 89       	ldd	r27, Y+20	; 0x14
    1cec:	b0 58       	subi	r27, 0x80	; 128
    1cee:	89 8b       	std	Y+17, r24	; 0x11
    1cf0:	9a 8b       	std	Y+18, r25	; 0x12
    1cf2:	ab 8b       	std	Y+19, r26	; 0x13
    1cf4:	bc 8b       	std	Y+20, r27	; 0x14
	}

	uint8_t decimals = DECIMAL_PLACES;
    1cf6:	82 e0       	ldi	r24, 0x02	; 2
    1cf8:	8e 83       	std	Y+6, r24	; 0x06
    1cfa:	13 c0       	rjmp	.+38     	; 0x1d22 <printFloat+0x7c>
	while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
		n *= 100;
    1cfc:	69 89       	ldd	r22, Y+17	; 0x11
    1cfe:	7a 89       	ldd	r23, Y+18	; 0x12
    1d00:	8b 89       	ldd	r24, Y+19	; 0x13
    1d02:	9c 89       	ldd	r25, Y+20	; 0x14
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	48 ec       	ldi	r20, 0xC8	; 200
    1d0a:	52 e4       	ldi	r21, 0x42	; 66
    1d0c:	0e 94 82 11 	call	0x2304	; 0x2304 <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	89 8b       	std	Y+17, r24	; 0x11
    1d16:	9a 8b       	std	Y+18, r25	; 0x12
    1d18:	ab 8b       	std	Y+19, r26	; 0x13
    1d1a:	bc 8b       	std	Y+20, r27	; 0x14
		decimals -= 2;
    1d1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d1e:	82 50       	subi	r24, 0x02	; 2
    1d20:	8e 83       	std	Y+6, r24	; 0x06
		serial_write('-');
		n = -n;
	}

	uint8_t decimals = DECIMAL_PLACES;
	while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
    1d22:	8e 81       	ldd	r24, Y+6	; 0x06
    1d24:	82 30       	cpi	r24, 0x02	; 2
    1d26:	50 f7       	brcc	.-44     	; 0x1cfc <printFloat+0x56>
		n *= 100;
		decimals -= 2;
	}
	if (decimals) { n *= 10; }
    1d28:	8e 81       	ldd	r24, Y+6	; 0x06
    1d2a:	88 23       	and	r24, r24
    1d2c:	81 f0       	breq	.+32     	; 0x1d4e <printFloat+0xa8>
    1d2e:	69 89       	ldd	r22, Y+17	; 0x11
    1d30:	7a 89       	ldd	r23, Y+18	; 0x12
    1d32:	8b 89       	ldd	r24, Y+19	; 0x13
    1d34:	9c 89       	ldd	r25, Y+20	; 0x14
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e2       	ldi	r20, 0x20	; 32
    1d3c:	51 e4       	ldi	r21, 0x41	; 65
    1d3e:	0e 94 82 11 	call	0x2304	; 0x2304 <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	89 8b       	std	Y+17, r24	; 0x11
    1d48:	9a 8b       	std	Y+18, r25	; 0x12
    1d4a:	ab 8b       	std	Y+19, r26	; 0x13
    1d4c:	bc 8b       	std	Y+20, r27	; 0x14
	n += 0.5; // Add rounding factor. Ensures carryover through entire value.
    1d4e:	69 89       	ldd	r22, Y+17	; 0x11
    1d50:	7a 89       	ldd	r23, Y+18	; 0x12
    1d52:	8b 89       	ldd	r24, Y+19	; 0x13
    1d54:	9c 89       	ldd	r25, Y+20	; 0x14
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e0       	ldi	r20, 0x00	; 0
    1d5c:	5f e3       	ldi	r21, 0x3F	; 63
    1d5e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__addsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	89 8b       	std	Y+17, r24	; 0x11
    1d68:	9a 8b       	std	Y+18, r25	; 0x12
    1d6a:	ab 8b       	std	Y+19, r26	; 0x13
    1d6c:	bc 8b       	std	Y+20, r27	; 0x14
    
	// Generate digits backwards and store in string.
	unsigned char buf[10]; 
	uint8_t i = 0;
    1d6e:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t a = (long)n;  
    1d70:	69 89       	ldd	r22, Y+17	; 0x11
    1d72:	7a 89       	ldd	r23, Y+18	; 0x12
    1d74:	8b 89       	ldd	r24, Y+19	; 0x13
    1d76:	9c 89       	ldd	r25, Y+20	; 0x14
    1d78:	0e 94 9b 10 	call	0x2136	; 0x2136 <__fixsfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	9a 83       	std	Y+2, r25	; 0x02
    1d84:	ab 83       	std	Y+3, r26	; 0x03
    1d86:	bc 83       	std	Y+4, r27	; 0x04
	buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
    1d88:	8e e2       	ldi	r24, 0x2E	; 46
    1d8a:	89 87       	std	Y+9, r24	; 0x09
    1d8c:	34 c0       	rjmp	.+104    	; 0x1df6 <printFloat+0x150>
	while(a > 0) {
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	82 30       	cpi	r24, 0x02	; 2
    1d92:	19 f4       	brne	.+6      	; 0x1d9a <printFloat+0xf4>
    1d94:	8d 81       	ldd	r24, Y+5	; 0x05
    1d96:	8f 5f       	subi	r24, 0xFF	; 255
    1d98:	8d 83       	std	Y+5, r24	; 0x05
		buf[i++] = (a % 10) + '0'; // Get digit
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	08 2f       	mov	r16, r24
    1d9e:	10 e0       	ldi	r17, 0x00	; 0
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	9a 81       	ldd	r25, Y+2	; 0x02
    1da4:	ab 81       	ldd	r26, Y+3	; 0x03
    1da6:	bc 81       	ldd	r27, Y+4	; 0x04
    1da8:	2a e0       	ldi	r18, 0x0A	; 10
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e0       	ldi	r20, 0x00	; 0
    1dae:	50 e0       	ldi	r21, 0x00	; 0
    1db0:	bc 01       	movw	r22, r24
    1db2:	cd 01       	movw	r24, r26
    1db4:	0e 94 3f 12 	call	0x247e	; 0x247e <__udivmodsi4>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	20 5d       	subi	r18, 0xD0	; 208
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	07 96       	adiw	r24, 0x07	; 7
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	e0 0f       	add	r30, r16
    1dc8:	f1 1f       	adc	r31, r17
    1dca:	20 83       	st	Z, r18
    1dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dce:	8f 5f       	subi	r24, 0xFF	; 255
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
		a /= 10;
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd6:	ab 81       	ldd	r26, Y+3	; 0x03
    1dd8:	bc 81       	ldd	r27, Y+4	; 0x04
    1dda:	2a e0       	ldi	r18, 0x0A	; 10
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	50 e0       	ldi	r21, 0x00	; 0
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	0e 94 3f 12 	call	0x247e	; 0x247e <__udivmodsi4>
    1dea:	da 01       	movw	r26, r20
    1dec:	c9 01       	movw	r24, r18
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	ab 83       	std	Y+3, r26	; 0x03
    1df4:	bc 83       	std	Y+4, r27	; 0x04
	// Generate digits backwards and store in string.
	unsigned char buf[10]; 
	uint8_t i = 0;
	uint32_t a = (long)n;  
	buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
	while(a > 0) {
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfa:	ab 81       	ldd	r26, Y+3	; 0x03
    1dfc:	bc 81       	ldd	r27, Y+4	; 0x04
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	a1 05       	cpc	r26, r1
    1e02:	b1 05       	cpc	r27, r1
    1e04:	21 f6       	brne	.-120    	; 0x1d8e <printFloat+0xe8>
    1e06:	0d c0       	rjmp	.+26     	; 0x1e22 <printFloat+0x17c>
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
		buf[i++] = (a % 10) + '0'; // Get digit
		a /= 10;
	}
	while (i < DECIMAL_PLACES) { 
		buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
    1e08:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	ce 01       	movw	r24, r28
    1e10:	07 96       	adiw	r24, 0x07	; 7
    1e12:	fc 01       	movw	r30, r24
    1e14:	e2 0f       	add	r30, r18
    1e16:	f3 1f       	adc	r31, r19
    1e18:	80 e3       	ldi	r24, 0x30	; 48
    1e1a:	80 83       	st	Z, r24
    1e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1e:	8f 5f       	subi	r24, 0xFF	; 255
    1e20:	8d 83       	std	Y+5, r24	; 0x05
	while(a > 0) {
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
		buf[i++] = (a % 10) + '0'; // Get digit
		a /= 10;
	}
	while (i < DECIMAL_PLACES) { 
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	82 30       	cpi	r24, 0x02	; 2
    1e26:	80 f3       	brcs	.-32     	; 0x1e08 <printFloat+0x162>
		buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
	}
	if (i == DECIMAL_PLACES) { // Fill in leading zero, if needed.
    1e28:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2a:	82 30       	cpi	r24, 0x02	; 2
    1e2c:	11 f5       	brne	.+68     	; 0x1e72 <printFloat+0x1cc>
		i++;
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	8f 5f       	subi	r24, 0xFF	; 255
    1e32:	8d 83       	std	Y+5, r24	; 0x05
		buf[i++] = '0'; 
    1e34:	8d 81       	ldd	r24, Y+5	; 0x05
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	07 96       	adiw	r24, 0x07	; 7
    1e3e:	fc 01       	movw	r30, r24
    1e40:	e2 0f       	add	r30, r18
    1e42:	f3 1f       	adc	r31, r19
    1e44:	80 e3       	ldi	r24, 0x30	; 48
    1e46:	80 83       	st	Z, r24
    1e48:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4a:	8f 5f       	subi	r24, 0xFF	; 255
    1e4c:	8d 83       	std	Y+5, r24	; 0x05
    1e4e:	11 c0       	rjmp	.+34     	; 0x1e72 <printFloat+0x1cc>
	}

	// Print the generated string.
	for (; i > 0; i--)
		serial_write(buf[i-1]);
    1e50:	8d 81       	ldd	r24, Y+5	; 0x05
    1e52:	88 2f       	mov	r24, r24
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9c 01       	movw	r18, r24
    1e58:	21 50       	subi	r18, 0x01	; 1
    1e5a:	30 40       	sbci	r19, 0x00	; 0
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	07 96       	adiw	r24, 0x07	; 7
    1e60:	fc 01       	movw	r30, r24
    1e62:	e2 0f       	add	r30, r18
    1e64:	f3 1f       	adc	r31, r19
    1e66:	80 81       	ld	r24, Z
    1e68:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <serial_write>
		i++;
		buf[i++] = '0'; 
	}

	// Print the generated string.
	for (; i > 0; i--)
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	81 50       	subi	r24, 0x01	; 1
    1e70:	8d 83       	std	Y+5, r24	; 0x05
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	88 23       	and	r24, r24
    1e76:	61 f7       	brne	.-40     	; 0x1e50 <printFloat+0x1aa>
		serial_write(buf[i-1]);
}
    1e78:	64 96       	adiw	r28, 0x14	; 20
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	1f 91       	pop	r17
    1e8a:	0f 91       	pop	r16
    1e8c:	08 95       	ret

00001e8e <rpt_initialized>:
static PGM_P const msg_hstate[] PROGMEM = { msg_hstate0, msg_hstate1, msg_hstate2, msg_hstate3 };

/*** Display routines ***/

void rpt_initialized()
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
//	printPgmString((PGM_P)(pgm_read_word(initialized))); 
	printPgmString(PSTR("\nDevice Initialized\n")); 
    1e96:	8b e4       	ldi	r24, 0x4B	; 75
    1e98:	91 e0       	ldi	r25, 0x01	; 1
    1e9a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <printPgmString>
}
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <rpt_readout>:

void rpt_readout()
{
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <rpt_readout+0x6>
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <rpt_readout+0x8>
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
	printPgmString(PSTR("Temp:")); printFloat(sensor.temperature);
    1eb0:	8f e7       	ldi	r24, 0x7F	; 127
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <printPgmString>
    1eb8:	80 91 6d 01 	lds	r24, 0x016D
    1ebc:	90 91 6e 01 	lds	r25, 0x016E
    1ec0:	a0 91 6f 01 	lds	r26, 0x016F
    1ec4:	b0 91 70 01 	lds	r27, 0x0170
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <printFloat>
	printPgmString(PSTR("  PWM:")); printFloat(pid.output);
    1ed0:	88 e7       	ldi	r24, 0x78	; 120
    1ed2:	91 e0       	ldi	r25, 0x01	; 1
    1ed4:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <printPgmString>
    1ed8:	80 91 2f 01 	lds	r24, 0x012F
    1edc:	90 91 30 01 	lds	r25, 0x0130
    1ee0:	a0 91 31 01 	lds	r26, 0x0131
    1ee4:	b0 91 32 01 	lds	r27, 0x0132
    1ee8:	bc 01       	movw	r22, r24
    1eea:	cd 01       	movw	r24, r26
    1eec:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <printFloat>
//	printPgmString(PSTR("  s[0]:")); printFloat(sensor.sample[0]);
	printPgmString(PSTR("  StdDev:")); printFloat(sensor.std_dev);
    1ef0:	8e e6       	ldi	r24, 0x6E	; 110
    1ef2:	91 e0       	ldi	r25, 0x01	; 1
    1ef4:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <printPgmString>
    1ef8:	80 91 71 01 	lds	r24, 0x0171
    1efc:	90 91 72 01 	lds	r25, 0x0172
    1f00:	a0 91 73 01 	lds	r26, 0x0173
    1f04:	b0 91 74 01 	lds	r27, 0x0174
    1f08:	bc 01       	movw	r22, r24
    1f0a:	cd 01       	movw	r24, r26
    1f0c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <printFloat>
//	printPgmString(PSTR("  Samples:")); printFloat(sensor.samples);
	printPgmString(PSTR("  Err:")); printFloat(pid.error);
    1f10:	87 e6       	ldi	r24, 0x67	; 103
    1f12:	91 e0       	ldi	r25, 0x01	; 1
    1f14:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <printPgmString>
    1f18:	80 91 3b 01 	lds	r24, 0x013B
    1f1c:	90 91 3c 01 	lds	r25, 0x013C
    1f20:	a0 91 3d 01 	lds	r26, 0x013D
    1f24:	b0 91 3e 01 	lds	r27, 0x013E
    1f28:	bc 01       	movw	r22, r24
    1f2a:	cd 01       	movw	r24, r26
    1f2c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <printFloat>
	printPgmString(PSTR("  I:")); printFloat(pid.integral);
    1f30:	82 e6       	ldi	r24, 0x62	; 98
    1f32:	91 e0       	ldi	r25, 0x01	; 1
    1f34:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <printPgmString>
    1f38:	80 91 43 01 	lds	r24, 0x0143
    1f3c:	90 91 44 01 	lds	r25, 0x0144
    1f40:	a0 91 45 01 	lds	r26, 0x0145
    1f44:	b0 91 46 01 	lds	r27, 0x0146
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <printFloat>
//	printPgmString(PSTR("  D:")); printFloat(pid.derivative);
//	printPgmString(PSTR("  Hy:")); printFloat(heater.hysteresis);

	printPgmString((PGM_P)pgm_read_word(&msg_hstate[heater.state]));
    1f50:	80 91 07 01 	lds	r24, 0x0107
    1f54:	88 2f       	mov	r24, r24
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	8d 5b       	subi	r24, 0xBD	; 189
    1f5e:	9e 4f       	sbci	r25, 0xFE	; 254
    1f60:	9c 83       	std	Y+4, r25	; 0x04
    1f62:	8b 83       	std	Y+3, r24	; 0x03
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	9c 81       	ldd	r25, Y+4	; 0x04
    1f68:	fc 01       	movw	r30, r24
    1f6a:	85 91       	lpm	r24, Z+
    1f6c:	94 91       	lpm	r25, Z+
    1f6e:	9a 83       	std	Y+2, r25	; 0x02
    1f70:	89 83       	std	Y+1, r24	; 0x01
    1f72:	fc 83       	std	Y+4, r31	; 0x04
    1f74:	eb 83       	std	Y+3, r30	; 0x03
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <printPgmString>
//	printPgmString((PGM_P)pgm_read_word(&msg_scode[sensor.code]));

	printPgmString(PSTR("\n")); 
    1f7e:	80 e6       	ldi	r24, 0x60	; 96
    1f80:	91 e0       	ldi	r25, 0x01	; 1
    1f82:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <printPgmString>

}
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	08 95       	ret

00001f94 <__subsf3>:
    1f94:	50 58       	subi	r21, 0x80	; 128

00001f96 <__addsf3>:
    1f96:	bb 27       	eor	r27, r27
    1f98:	aa 27       	eor	r26, r26
    1f9a:	0e d0       	rcall	.+28     	; 0x1fb8 <__addsf3x>
    1f9c:	75 c1       	rjmp	.+746    	; 0x2288 <__fp_round>
    1f9e:	66 d1       	rcall	.+716    	; 0x226c <__fp_pscA>
    1fa0:	30 f0       	brcs	.+12     	; 0x1fae <__addsf3+0x18>
    1fa2:	6b d1       	rcall	.+726    	; 0x227a <__fp_pscB>
    1fa4:	20 f0       	brcs	.+8      	; 0x1fae <__addsf3+0x18>
    1fa6:	31 f4       	brne	.+12     	; 0x1fb4 <__addsf3+0x1e>
    1fa8:	9f 3f       	cpi	r25, 0xFF	; 255
    1faa:	11 f4       	brne	.+4      	; 0x1fb0 <__addsf3+0x1a>
    1fac:	1e f4       	brtc	.+6      	; 0x1fb4 <__addsf3+0x1e>
    1fae:	5b c1       	rjmp	.+694    	; 0x2266 <__fp_nan>
    1fb0:	0e f4       	brtc	.+2      	; 0x1fb4 <__addsf3+0x1e>
    1fb2:	e0 95       	com	r30
    1fb4:	e7 fb       	bst	r30, 7
    1fb6:	51 c1       	rjmp	.+674    	; 0x225a <__fp_inf>

00001fb8 <__addsf3x>:
    1fb8:	e9 2f       	mov	r30, r25
    1fba:	77 d1       	rcall	.+750    	; 0x22aa <__fp_split3>
    1fbc:	80 f3       	brcs	.-32     	; 0x1f9e <__addsf3+0x8>
    1fbe:	ba 17       	cp	r27, r26
    1fc0:	62 07       	cpc	r22, r18
    1fc2:	73 07       	cpc	r23, r19
    1fc4:	84 07       	cpc	r24, r20
    1fc6:	95 07       	cpc	r25, r21
    1fc8:	18 f0       	brcs	.+6      	; 0x1fd0 <__addsf3x+0x18>
    1fca:	71 f4       	brne	.+28     	; 0x1fe8 <__addsf3x+0x30>
    1fcc:	9e f5       	brtc	.+102    	; 0x2034 <__addsf3x+0x7c>
    1fce:	8f c1       	rjmp	.+798    	; 0x22ee <__fp_zero>
    1fd0:	0e f4       	brtc	.+2      	; 0x1fd4 <__addsf3x+0x1c>
    1fd2:	e0 95       	com	r30
    1fd4:	0b 2e       	mov	r0, r27
    1fd6:	ba 2f       	mov	r27, r26
    1fd8:	a0 2d       	mov	r26, r0
    1fda:	0b 01       	movw	r0, r22
    1fdc:	b9 01       	movw	r22, r18
    1fde:	90 01       	movw	r18, r0
    1fe0:	0c 01       	movw	r0, r24
    1fe2:	ca 01       	movw	r24, r20
    1fe4:	a0 01       	movw	r20, r0
    1fe6:	11 24       	eor	r1, r1
    1fe8:	ff 27       	eor	r31, r31
    1fea:	59 1b       	sub	r21, r25
    1fec:	99 f0       	breq	.+38     	; 0x2014 <__addsf3x+0x5c>
    1fee:	59 3f       	cpi	r21, 0xF9	; 249
    1ff0:	50 f4       	brcc	.+20     	; 0x2006 <__addsf3x+0x4e>
    1ff2:	50 3e       	cpi	r21, 0xE0	; 224
    1ff4:	68 f1       	brcs	.+90     	; 0x2050 <__addsf3x+0x98>
    1ff6:	1a 16       	cp	r1, r26
    1ff8:	f0 40       	sbci	r31, 0x00	; 0
    1ffa:	a2 2f       	mov	r26, r18
    1ffc:	23 2f       	mov	r18, r19
    1ffe:	34 2f       	mov	r19, r20
    2000:	44 27       	eor	r20, r20
    2002:	58 5f       	subi	r21, 0xF8	; 248
    2004:	f3 cf       	rjmp	.-26     	; 0x1fec <__addsf3x+0x34>
    2006:	46 95       	lsr	r20
    2008:	37 95       	ror	r19
    200a:	27 95       	ror	r18
    200c:	a7 95       	ror	r26
    200e:	f0 40       	sbci	r31, 0x00	; 0
    2010:	53 95       	inc	r21
    2012:	c9 f7       	brne	.-14     	; 0x2006 <__addsf3x+0x4e>
    2014:	7e f4       	brtc	.+30     	; 0x2034 <__addsf3x+0x7c>
    2016:	1f 16       	cp	r1, r31
    2018:	ba 0b       	sbc	r27, r26
    201a:	62 0b       	sbc	r22, r18
    201c:	73 0b       	sbc	r23, r19
    201e:	84 0b       	sbc	r24, r20
    2020:	ba f0       	brmi	.+46     	; 0x2050 <__addsf3x+0x98>
    2022:	91 50       	subi	r25, 0x01	; 1
    2024:	a1 f0       	breq	.+40     	; 0x204e <__addsf3x+0x96>
    2026:	ff 0f       	add	r31, r31
    2028:	bb 1f       	adc	r27, r27
    202a:	66 1f       	adc	r22, r22
    202c:	77 1f       	adc	r23, r23
    202e:	88 1f       	adc	r24, r24
    2030:	c2 f7       	brpl	.-16     	; 0x2022 <__addsf3x+0x6a>
    2032:	0e c0       	rjmp	.+28     	; 0x2050 <__addsf3x+0x98>
    2034:	ba 0f       	add	r27, r26
    2036:	62 1f       	adc	r22, r18
    2038:	73 1f       	adc	r23, r19
    203a:	84 1f       	adc	r24, r20
    203c:	48 f4       	brcc	.+18     	; 0x2050 <__addsf3x+0x98>
    203e:	87 95       	ror	r24
    2040:	77 95       	ror	r23
    2042:	67 95       	ror	r22
    2044:	b7 95       	ror	r27
    2046:	f7 95       	ror	r31
    2048:	9e 3f       	cpi	r25, 0xFE	; 254
    204a:	08 f0       	brcs	.+2      	; 0x204e <__addsf3x+0x96>
    204c:	b3 cf       	rjmp	.-154    	; 0x1fb4 <__addsf3+0x1e>
    204e:	93 95       	inc	r25
    2050:	88 0f       	add	r24, r24
    2052:	08 f0       	brcs	.+2      	; 0x2056 <__addsf3x+0x9e>
    2054:	99 27       	eor	r25, r25
    2056:	ee 0f       	add	r30, r30
    2058:	97 95       	ror	r25
    205a:	87 95       	ror	r24
    205c:	08 95       	ret

0000205e <__cmpsf2>:
    205e:	d9 d0       	rcall	.+434    	; 0x2212 <__fp_cmp>
    2060:	08 f4       	brcc	.+2      	; 0x2064 <__cmpsf2+0x6>
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	08 95       	ret

00002066 <__divsf3>:
    2066:	0c d0       	rcall	.+24     	; 0x2080 <__divsf3x>
    2068:	0f c1       	rjmp	.+542    	; 0x2288 <__fp_round>
    206a:	07 d1       	rcall	.+526    	; 0x227a <__fp_pscB>
    206c:	40 f0       	brcs	.+16     	; 0x207e <__divsf3+0x18>
    206e:	fe d0       	rcall	.+508    	; 0x226c <__fp_pscA>
    2070:	30 f0       	brcs	.+12     	; 0x207e <__divsf3+0x18>
    2072:	21 f4       	brne	.+8      	; 0x207c <__divsf3+0x16>
    2074:	5f 3f       	cpi	r21, 0xFF	; 255
    2076:	19 f0       	breq	.+6      	; 0x207e <__divsf3+0x18>
    2078:	f0 c0       	rjmp	.+480    	; 0x225a <__fp_inf>
    207a:	51 11       	cpse	r21, r1
    207c:	39 c1       	rjmp	.+626    	; 0x22f0 <__fp_szero>
    207e:	f3 c0       	rjmp	.+486    	; 0x2266 <__fp_nan>

00002080 <__divsf3x>:
    2080:	14 d1       	rcall	.+552    	; 0x22aa <__fp_split3>
    2082:	98 f3       	brcs	.-26     	; 0x206a <__divsf3+0x4>

00002084 <__divsf3_pse>:
    2084:	99 23       	and	r25, r25
    2086:	c9 f3       	breq	.-14     	; 0x207a <__divsf3+0x14>
    2088:	55 23       	and	r21, r21
    208a:	b1 f3       	breq	.-20     	; 0x2078 <__divsf3+0x12>
    208c:	95 1b       	sub	r25, r21
    208e:	55 0b       	sbc	r21, r21
    2090:	bb 27       	eor	r27, r27
    2092:	aa 27       	eor	r26, r26
    2094:	62 17       	cp	r22, r18
    2096:	73 07       	cpc	r23, r19
    2098:	84 07       	cpc	r24, r20
    209a:	38 f0       	brcs	.+14     	; 0x20aa <__divsf3_pse+0x26>
    209c:	9f 5f       	subi	r25, 0xFF	; 255
    209e:	5f 4f       	sbci	r21, 0xFF	; 255
    20a0:	22 0f       	add	r18, r18
    20a2:	33 1f       	adc	r19, r19
    20a4:	44 1f       	adc	r20, r20
    20a6:	aa 1f       	adc	r26, r26
    20a8:	a9 f3       	breq	.-22     	; 0x2094 <__divsf3_pse+0x10>
    20aa:	33 d0       	rcall	.+102    	; 0x2112 <__divsf3_pse+0x8e>
    20ac:	0e 2e       	mov	r0, r30
    20ae:	3a f0       	brmi	.+14     	; 0x20be <__divsf3_pse+0x3a>
    20b0:	e0 e8       	ldi	r30, 0x80	; 128
    20b2:	30 d0       	rcall	.+96     	; 0x2114 <__divsf3_pse+0x90>
    20b4:	91 50       	subi	r25, 0x01	; 1
    20b6:	50 40       	sbci	r21, 0x00	; 0
    20b8:	e6 95       	lsr	r30
    20ba:	00 1c       	adc	r0, r0
    20bc:	ca f7       	brpl	.-14     	; 0x20b0 <__divsf3_pse+0x2c>
    20be:	29 d0       	rcall	.+82     	; 0x2112 <__divsf3_pse+0x8e>
    20c0:	fe 2f       	mov	r31, r30
    20c2:	27 d0       	rcall	.+78     	; 0x2112 <__divsf3_pse+0x8e>
    20c4:	66 0f       	add	r22, r22
    20c6:	77 1f       	adc	r23, r23
    20c8:	88 1f       	adc	r24, r24
    20ca:	bb 1f       	adc	r27, r27
    20cc:	26 17       	cp	r18, r22
    20ce:	37 07       	cpc	r19, r23
    20d0:	48 07       	cpc	r20, r24
    20d2:	ab 07       	cpc	r26, r27
    20d4:	b0 e8       	ldi	r27, 0x80	; 128
    20d6:	09 f0       	breq	.+2      	; 0x20da <__divsf3_pse+0x56>
    20d8:	bb 0b       	sbc	r27, r27
    20da:	80 2d       	mov	r24, r0
    20dc:	bf 01       	movw	r22, r30
    20de:	ff 27       	eor	r31, r31
    20e0:	93 58       	subi	r25, 0x83	; 131
    20e2:	5f 4f       	sbci	r21, 0xFF	; 255
    20e4:	2a f0       	brmi	.+10     	; 0x20f0 <__divsf3_pse+0x6c>
    20e6:	9e 3f       	cpi	r25, 0xFE	; 254
    20e8:	51 05       	cpc	r21, r1
    20ea:	68 f0       	brcs	.+26     	; 0x2106 <__divsf3_pse+0x82>
    20ec:	b6 c0       	rjmp	.+364    	; 0x225a <__fp_inf>
    20ee:	00 c1       	rjmp	.+512    	; 0x22f0 <__fp_szero>
    20f0:	5f 3f       	cpi	r21, 0xFF	; 255
    20f2:	ec f3       	brlt	.-6      	; 0x20ee <__divsf3_pse+0x6a>
    20f4:	98 3e       	cpi	r25, 0xE8	; 232
    20f6:	dc f3       	brlt	.-10     	; 0x20ee <__divsf3_pse+0x6a>
    20f8:	86 95       	lsr	r24
    20fa:	77 95       	ror	r23
    20fc:	67 95       	ror	r22
    20fe:	b7 95       	ror	r27
    2100:	f7 95       	ror	r31
    2102:	9f 5f       	subi	r25, 0xFF	; 255
    2104:	c9 f7       	brne	.-14     	; 0x20f8 <__divsf3_pse+0x74>
    2106:	88 0f       	add	r24, r24
    2108:	91 1d       	adc	r25, r1
    210a:	96 95       	lsr	r25
    210c:	87 95       	ror	r24
    210e:	97 f9       	bld	r25, 7
    2110:	08 95       	ret
    2112:	e1 e0       	ldi	r30, 0x01	; 1
    2114:	66 0f       	add	r22, r22
    2116:	77 1f       	adc	r23, r23
    2118:	88 1f       	adc	r24, r24
    211a:	bb 1f       	adc	r27, r27
    211c:	62 17       	cp	r22, r18
    211e:	73 07       	cpc	r23, r19
    2120:	84 07       	cpc	r24, r20
    2122:	ba 07       	cpc	r27, r26
    2124:	20 f0       	brcs	.+8      	; 0x212e <__divsf3_pse+0xaa>
    2126:	62 1b       	sub	r22, r18
    2128:	73 0b       	sbc	r23, r19
    212a:	84 0b       	sbc	r24, r20
    212c:	ba 0b       	sbc	r27, r26
    212e:	ee 1f       	adc	r30, r30
    2130:	88 f7       	brcc	.-30     	; 0x2114 <__divsf3_pse+0x90>
    2132:	e0 95       	com	r30
    2134:	08 95       	ret

00002136 <__fixsfsi>:
    2136:	04 d0       	rcall	.+8      	; 0x2140 <__fixunssfsi>
    2138:	68 94       	set
    213a:	b1 11       	cpse	r27, r1
    213c:	d9 c0       	rjmp	.+434    	; 0x22f0 <__fp_szero>
    213e:	08 95       	ret

00002140 <__fixunssfsi>:
    2140:	bc d0       	rcall	.+376    	; 0x22ba <__fp_splitA>
    2142:	88 f0       	brcs	.+34     	; 0x2166 <__fixunssfsi+0x26>
    2144:	9f 57       	subi	r25, 0x7F	; 127
    2146:	90 f0       	brcs	.+36     	; 0x216c <__fixunssfsi+0x2c>
    2148:	b9 2f       	mov	r27, r25
    214a:	99 27       	eor	r25, r25
    214c:	b7 51       	subi	r27, 0x17	; 23
    214e:	a0 f0       	brcs	.+40     	; 0x2178 <__fixunssfsi+0x38>
    2150:	d1 f0       	breq	.+52     	; 0x2186 <__fixunssfsi+0x46>
    2152:	66 0f       	add	r22, r22
    2154:	77 1f       	adc	r23, r23
    2156:	88 1f       	adc	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	1a f0       	brmi	.+6      	; 0x2162 <__fixunssfsi+0x22>
    215c:	ba 95       	dec	r27
    215e:	c9 f7       	brne	.-14     	; 0x2152 <__fixunssfsi+0x12>
    2160:	12 c0       	rjmp	.+36     	; 0x2186 <__fixunssfsi+0x46>
    2162:	b1 30       	cpi	r27, 0x01	; 1
    2164:	81 f0       	breq	.+32     	; 0x2186 <__fixunssfsi+0x46>
    2166:	c3 d0       	rcall	.+390    	; 0x22ee <__fp_zero>
    2168:	b1 e0       	ldi	r27, 0x01	; 1
    216a:	08 95       	ret
    216c:	c0 c0       	rjmp	.+384    	; 0x22ee <__fp_zero>
    216e:	67 2f       	mov	r22, r23
    2170:	78 2f       	mov	r23, r24
    2172:	88 27       	eor	r24, r24
    2174:	b8 5f       	subi	r27, 0xF8	; 248
    2176:	39 f0       	breq	.+14     	; 0x2186 <__fixunssfsi+0x46>
    2178:	b9 3f       	cpi	r27, 0xF9	; 249
    217a:	cc f3       	brlt	.-14     	; 0x216e <__fixunssfsi+0x2e>
    217c:	86 95       	lsr	r24
    217e:	77 95       	ror	r23
    2180:	67 95       	ror	r22
    2182:	b3 95       	inc	r27
    2184:	d9 f7       	brne	.-10     	; 0x217c <__fixunssfsi+0x3c>
    2186:	3e f4       	brtc	.+14     	; 0x2196 <__fixunssfsi+0x56>
    2188:	90 95       	com	r25
    218a:	80 95       	com	r24
    218c:	70 95       	com	r23
    218e:	61 95       	neg	r22
    2190:	7f 4f       	sbci	r23, 0xFF	; 255
    2192:	8f 4f       	sbci	r24, 0xFF	; 255
    2194:	9f 4f       	sbci	r25, 0xFF	; 255
    2196:	08 95       	ret

00002198 <__floatunsisf>:
    2198:	e8 94       	clt
    219a:	09 c0       	rjmp	.+18     	; 0x21ae <__floatsisf+0x12>

0000219c <__floatsisf>:
    219c:	97 fb       	bst	r25, 7
    219e:	3e f4       	brtc	.+14     	; 0x21ae <__floatsisf+0x12>
    21a0:	90 95       	com	r25
    21a2:	80 95       	com	r24
    21a4:	70 95       	com	r23
    21a6:	61 95       	neg	r22
    21a8:	7f 4f       	sbci	r23, 0xFF	; 255
    21aa:	8f 4f       	sbci	r24, 0xFF	; 255
    21ac:	9f 4f       	sbci	r25, 0xFF	; 255
    21ae:	99 23       	and	r25, r25
    21b0:	a9 f0       	breq	.+42     	; 0x21dc <__floatsisf+0x40>
    21b2:	f9 2f       	mov	r31, r25
    21b4:	96 e9       	ldi	r25, 0x96	; 150
    21b6:	bb 27       	eor	r27, r27
    21b8:	93 95       	inc	r25
    21ba:	f6 95       	lsr	r31
    21bc:	87 95       	ror	r24
    21be:	77 95       	ror	r23
    21c0:	67 95       	ror	r22
    21c2:	b7 95       	ror	r27
    21c4:	f1 11       	cpse	r31, r1
    21c6:	f8 cf       	rjmp	.-16     	; 0x21b8 <__floatsisf+0x1c>
    21c8:	fa f4       	brpl	.+62     	; 0x2208 <__floatsisf+0x6c>
    21ca:	bb 0f       	add	r27, r27
    21cc:	11 f4       	brne	.+4      	; 0x21d2 <__floatsisf+0x36>
    21ce:	60 ff       	sbrs	r22, 0
    21d0:	1b c0       	rjmp	.+54     	; 0x2208 <__floatsisf+0x6c>
    21d2:	6f 5f       	subi	r22, 0xFF	; 255
    21d4:	7f 4f       	sbci	r23, 0xFF	; 255
    21d6:	8f 4f       	sbci	r24, 0xFF	; 255
    21d8:	9f 4f       	sbci	r25, 0xFF	; 255
    21da:	16 c0       	rjmp	.+44     	; 0x2208 <__floatsisf+0x6c>
    21dc:	88 23       	and	r24, r24
    21de:	11 f0       	breq	.+4      	; 0x21e4 <__floatsisf+0x48>
    21e0:	96 e9       	ldi	r25, 0x96	; 150
    21e2:	11 c0       	rjmp	.+34     	; 0x2206 <__floatsisf+0x6a>
    21e4:	77 23       	and	r23, r23
    21e6:	21 f0       	breq	.+8      	; 0x21f0 <__floatsisf+0x54>
    21e8:	9e e8       	ldi	r25, 0x8E	; 142
    21ea:	87 2f       	mov	r24, r23
    21ec:	76 2f       	mov	r23, r22
    21ee:	05 c0       	rjmp	.+10     	; 0x21fa <__floatsisf+0x5e>
    21f0:	66 23       	and	r22, r22
    21f2:	71 f0       	breq	.+28     	; 0x2210 <__floatsisf+0x74>
    21f4:	96 e8       	ldi	r25, 0x86	; 134
    21f6:	86 2f       	mov	r24, r22
    21f8:	70 e0       	ldi	r23, 0x00	; 0
    21fa:	60 e0       	ldi	r22, 0x00	; 0
    21fc:	2a f0       	brmi	.+10     	; 0x2208 <__floatsisf+0x6c>
    21fe:	9a 95       	dec	r25
    2200:	66 0f       	add	r22, r22
    2202:	77 1f       	adc	r23, r23
    2204:	88 1f       	adc	r24, r24
    2206:	da f7       	brpl	.-10     	; 0x21fe <__floatsisf+0x62>
    2208:	88 0f       	add	r24, r24
    220a:	96 95       	lsr	r25
    220c:	87 95       	ror	r24
    220e:	97 f9       	bld	r25, 7
    2210:	08 95       	ret

00002212 <__fp_cmp>:
    2212:	99 0f       	add	r25, r25
    2214:	00 08       	sbc	r0, r0
    2216:	55 0f       	add	r21, r21
    2218:	aa 0b       	sbc	r26, r26
    221a:	e0 e8       	ldi	r30, 0x80	; 128
    221c:	fe ef       	ldi	r31, 0xFE	; 254
    221e:	16 16       	cp	r1, r22
    2220:	17 06       	cpc	r1, r23
    2222:	e8 07       	cpc	r30, r24
    2224:	f9 07       	cpc	r31, r25
    2226:	c0 f0       	brcs	.+48     	; 0x2258 <__fp_cmp+0x46>
    2228:	12 16       	cp	r1, r18
    222a:	13 06       	cpc	r1, r19
    222c:	e4 07       	cpc	r30, r20
    222e:	f5 07       	cpc	r31, r21
    2230:	98 f0       	brcs	.+38     	; 0x2258 <__fp_cmp+0x46>
    2232:	62 1b       	sub	r22, r18
    2234:	73 0b       	sbc	r23, r19
    2236:	84 0b       	sbc	r24, r20
    2238:	95 0b       	sbc	r25, r21
    223a:	39 f4       	brne	.+14     	; 0x224a <__fp_cmp+0x38>
    223c:	0a 26       	eor	r0, r26
    223e:	61 f0       	breq	.+24     	; 0x2258 <__fp_cmp+0x46>
    2240:	23 2b       	or	r18, r19
    2242:	24 2b       	or	r18, r20
    2244:	25 2b       	or	r18, r21
    2246:	21 f4       	brne	.+8      	; 0x2250 <__fp_cmp+0x3e>
    2248:	08 95       	ret
    224a:	0a 26       	eor	r0, r26
    224c:	09 f4       	brne	.+2      	; 0x2250 <__fp_cmp+0x3e>
    224e:	a1 40       	sbci	r26, 0x01	; 1
    2250:	a6 95       	lsr	r26
    2252:	8f ef       	ldi	r24, 0xFF	; 255
    2254:	81 1d       	adc	r24, r1
    2256:	81 1d       	adc	r24, r1
    2258:	08 95       	ret

0000225a <__fp_inf>:
    225a:	97 f9       	bld	r25, 7
    225c:	9f 67       	ori	r25, 0x7F	; 127
    225e:	80 e8       	ldi	r24, 0x80	; 128
    2260:	70 e0       	ldi	r23, 0x00	; 0
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	08 95       	ret

00002266 <__fp_nan>:
    2266:	9f ef       	ldi	r25, 0xFF	; 255
    2268:	80 ec       	ldi	r24, 0xC0	; 192
    226a:	08 95       	ret

0000226c <__fp_pscA>:
    226c:	00 24       	eor	r0, r0
    226e:	0a 94       	dec	r0
    2270:	16 16       	cp	r1, r22
    2272:	17 06       	cpc	r1, r23
    2274:	18 06       	cpc	r1, r24
    2276:	09 06       	cpc	r0, r25
    2278:	08 95       	ret

0000227a <__fp_pscB>:
    227a:	00 24       	eor	r0, r0
    227c:	0a 94       	dec	r0
    227e:	12 16       	cp	r1, r18
    2280:	13 06       	cpc	r1, r19
    2282:	14 06       	cpc	r1, r20
    2284:	05 06       	cpc	r0, r21
    2286:	08 95       	ret

00002288 <__fp_round>:
    2288:	09 2e       	mov	r0, r25
    228a:	03 94       	inc	r0
    228c:	00 0c       	add	r0, r0
    228e:	11 f4       	brne	.+4      	; 0x2294 <__fp_round+0xc>
    2290:	88 23       	and	r24, r24
    2292:	52 f0       	brmi	.+20     	; 0x22a8 <__fp_round+0x20>
    2294:	bb 0f       	add	r27, r27
    2296:	40 f4       	brcc	.+16     	; 0x22a8 <__fp_round+0x20>
    2298:	bf 2b       	or	r27, r31
    229a:	11 f4       	brne	.+4      	; 0x22a0 <__fp_round+0x18>
    229c:	60 ff       	sbrs	r22, 0
    229e:	04 c0       	rjmp	.+8      	; 0x22a8 <__fp_round+0x20>
    22a0:	6f 5f       	subi	r22, 0xFF	; 255
    22a2:	7f 4f       	sbci	r23, 0xFF	; 255
    22a4:	8f 4f       	sbci	r24, 0xFF	; 255
    22a6:	9f 4f       	sbci	r25, 0xFF	; 255
    22a8:	08 95       	ret

000022aa <__fp_split3>:
    22aa:	57 fd       	sbrc	r21, 7
    22ac:	90 58       	subi	r25, 0x80	; 128
    22ae:	44 0f       	add	r20, r20
    22b0:	55 1f       	adc	r21, r21
    22b2:	59 f0       	breq	.+22     	; 0x22ca <__fp_splitA+0x10>
    22b4:	5f 3f       	cpi	r21, 0xFF	; 255
    22b6:	71 f0       	breq	.+28     	; 0x22d4 <__fp_splitA+0x1a>
    22b8:	47 95       	ror	r20

000022ba <__fp_splitA>:
    22ba:	88 0f       	add	r24, r24
    22bc:	97 fb       	bst	r25, 7
    22be:	99 1f       	adc	r25, r25
    22c0:	61 f0       	breq	.+24     	; 0x22da <__fp_splitA+0x20>
    22c2:	9f 3f       	cpi	r25, 0xFF	; 255
    22c4:	79 f0       	breq	.+30     	; 0x22e4 <__fp_splitA+0x2a>
    22c6:	87 95       	ror	r24
    22c8:	08 95       	ret
    22ca:	12 16       	cp	r1, r18
    22cc:	13 06       	cpc	r1, r19
    22ce:	14 06       	cpc	r1, r20
    22d0:	55 1f       	adc	r21, r21
    22d2:	f2 cf       	rjmp	.-28     	; 0x22b8 <__fp_split3+0xe>
    22d4:	46 95       	lsr	r20
    22d6:	f1 df       	rcall	.-30     	; 0x22ba <__fp_splitA>
    22d8:	08 c0       	rjmp	.+16     	; 0x22ea <__fp_splitA+0x30>
    22da:	16 16       	cp	r1, r22
    22dc:	17 06       	cpc	r1, r23
    22de:	18 06       	cpc	r1, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	f1 cf       	rjmp	.-30     	; 0x22c6 <__fp_splitA+0xc>
    22e4:	86 95       	lsr	r24
    22e6:	71 05       	cpc	r23, r1
    22e8:	61 05       	cpc	r22, r1
    22ea:	08 94       	sec
    22ec:	08 95       	ret

000022ee <__fp_zero>:
    22ee:	e8 94       	clt

000022f0 <__fp_szero>:
    22f0:	bb 27       	eor	r27, r27
    22f2:	66 27       	eor	r22, r22
    22f4:	77 27       	eor	r23, r23
    22f6:	cb 01       	movw	r24, r22
    22f8:	97 f9       	bld	r25, 7
    22fa:	08 95       	ret

000022fc <__gesf2>:
    22fc:	8a df       	rcall	.-236    	; 0x2212 <__fp_cmp>
    22fe:	08 f4       	brcc	.+2      	; 0x2302 <__gesf2+0x6>
    2300:	8f ef       	ldi	r24, 0xFF	; 255
    2302:	08 95       	ret

00002304 <__mulsf3>:
    2304:	0b d0       	rcall	.+22     	; 0x231c <__mulsf3x>
    2306:	c0 cf       	rjmp	.-128    	; 0x2288 <__fp_round>
    2308:	b1 df       	rcall	.-158    	; 0x226c <__fp_pscA>
    230a:	28 f0       	brcs	.+10     	; 0x2316 <__mulsf3+0x12>
    230c:	b6 df       	rcall	.-148    	; 0x227a <__fp_pscB>
    230e:	18 f0       	brcs	.+6      	; 0x2316 <__mulsf3+0x12>
    2310:	95 23       	and	r25, r21
    2312:	09 f0       	breq	.+2      	; 0x2316 <__mulsf3+0x12>
    2314:	a2 cf       	rjmp	.-188    	; 0x225a <__fp_inf>
    2316:	a7 cf       	rjmp	.-178    	; 0x2266 <__fp_nan>
    2318:	11 24       	eor	r1, r1
    231a:	ea cf       	rjmp	.-44     	; 0x22f0 <__fp_szero>

0000231c <__mulsf3x>:
    231c:	c6 df       	rcall	.-116    	; 0x22aa <__fp_split3>
    231e:	a0 f3       	brcs	.-24     	; 0x2308 <__mulsf3+0x4>

00002320 <__mulsf3_pse>:
    2320:	95 9f       	mul	r25, r21
    2322:	d1 f3       	breq	.-12     	; 0x2318 <__mulsf3+0x14>
    2324:	95 0f       	add	r25, r21
    2326:	50 e0       	ldi	r21, 0x00	; 0
    2328:	55 1f       	adc	r21, r21
    232a:	62 9f       	mul	r22, r18
    232c:	f0 01       	movw	r30, r0
    232e:	72 9f       	mul	r23, r18
    2330:	bb 27       	eor	r27, r27
    2332:	f0 0d       	add	r31, r0
    2334:	b1 1d       	adc	r27, r1
    2336:	63 9f       	mul	r22, r19
    2338:	aa 27       	eor	r26, r26
    233a:	f0 0d       	add	r31, r0
    233c:	b1 1d       	adc	r27, r1
    233e:	aa 1f       	adc	r26, r26
    2340:	64 9f       	mul	r22, r20
    2342:	66 27       	eor	r22, r22
    2344:	b0 0d       	add	r27, r0
    2346:	a1 1d       	adc	r26, r1
    2348:	66 1f       	adc	r22, r22
    234a:	82 9f       	mul	r24, r18
    234c:	22 27       	eor	r18, r18
    234e:	b0 0d       	add	r27, r0
    2350:	a1 1d       	adc	r26, r1
    2352:	62 1f       	adc	r22, r18
    2354:	73 9f       	mul	r23, r19
    2356:	b0 0d       	add	r27, r0
    2358:	a1 1d       	adc	r26, r1
    235a:	62 1f       	adc	r22, r18
    235c:	83 9f       	mul	r24, r19
    235e:	a0 0d       	add	r26, r0
    2360:	61 1d       	adc	r22, r1
    2362:	22 1f       	adc	r18, r18
    2364:	74 9f       	mul	r23, r20
    2366:	33 27       	eor	r19, r19
    2368:	a0 0d       	add	r26, r0
    236a:	61 1d       	adc	r22, r1
    236c:	23 1f       	adc	r18, r19
    236e:	84 9f       	mul	r24, r20
    2370:	60 0d       	add	r22, r0
    2372:	21 1d       	adc	r18, r1
    2374:	82 2f       	mov	r24, r18
    2376:	76 2f       	mov	r23, r22
    2378:	6a 2f       	mov	r22, r26
    237a:	11 24       	eor	r1, r1
    237c:	9f 57       	subi	r25, 0x7F	; 127
    237e:	50 40       	sbci	r21, 0x00	; 0
    2380:	8a f0       	brmi	.+34     	; 0x23a4 <__mulsf3_pse+0x84>
    2382:	e1 f0       	breq	.+56     	; 0x23bc <__mulsf3_pse+0x9c>
    2384:	88 23       	and	r24, r24
    2386:	4a f0       	brmi	.+18     	; 0x239a <__mulsf3_pse+0x7a>
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	bb 1f       	adc	r27, r27
    238e:	66 1f       	adc	r22, r22
    2390:	77 1f       	adc	r23, r23
    2392:	88 1f       	adc	r24, r24
    2394:	91 50       	subi	r25, 0x01	; 1
    2396:	50 40       	sbci	r21, 0x00	; 0
    2398:	a9 f7       	brne	.-22     	; 0x2384 <__mulsf3_pse+0x64>
    239a:	9e 3f       	cpi	r25, 0xFE	; 254
    239c:	51 05       	cpc	r21, r1
    239e:	70 f0       	brcs	.+28     	; 0x23bc <__mulsf3_pse+0x9c>
    23a0:	5c cf       	rjmp	.-328    	; 0x225a <__fp_inf>
    23a2:	a6 cf       	rjmp	.-180    	; 0x22f0 <__fp_szero>
    23a4:	5f 3f       	cpi	r21, 0xFF	; 255
    23a6:	ec f3       	brlt	.-6      	; 0x23a2 <__mulsf3_pse+0x82>
    23a8:	98 3e       	cpi	r25, 0xE8	; 232
    23aa:	dc f3       	brlt	.-10     	; 0x23a2 <__mulsf3_pse+0x82>
    23ac:	86 95       	lsr	r24
    23ae:	77 95       	ror	r23
    23b0:	67 95       	ror	r22
    23b2:	b7 95       	ror	r27
    23b4:	f7 95       	ror	r31
    23b6:	e7 95       	ror	r30
    23b8:	9f 5f       	subi	r25, 0xFF	; 255
    23ba:	c1 f7       	brne	.-16     	; 0x23ac <__mulsf3_pse+0x8c>
    23bc:	fe 2b       	or	r31, r30
    23be:	88 0f       	add	r24, r24
    23c0:	91 1d       	adc	r25, r1
    23c2:	96 95       	lsr	r25
    23c4:	87 95       	ror	r24
    23c6:	97 f9       	bld	r25, 7
    23c8:	08 95       	ret
    23ca:	11 f4       	brne	.+4      	; 0x23d0 <__mulsf3_pse+0xb0>
    23cc:	0e f4       	brtc	.+2      	; 0x23d0 <__mulsf3_pse+0xb0>
    23ce:	4b cf       	rjmp	.-362    	; 0x2266 <__fp_nan>
    23d0:	41 c0       	rjmp	.+130    	; 0x2454 <__fp_mpack>

000023d2 <sqrt>:
    23d2:	73 df       	rcall	.-282    	; 0x22ba <__fp_splitA>
    23d4:	d0 f3       	brcs	.-12     	; 0x23ca <__mulsf3_pse+0xaa>
    23d6:	99 23       	and	r25, r25
    23d8:	d9 f3       	breq	.-10     	; 0x23d0 <__mulsf3_pse+0xb0>
    23da:	ce f3       	brts	.-14     	; 0x23ce <__mulsf3_pse+0xae>
    23dc:	9f 57       	subi	r25, 0x7F	; 127
    23de:	55 0b       	sbc	r21, r21
    23e0:	87 ff       	sbrs	r24, 7
    23e2:	46 d0       	rcall	.+140    	; 0x2470 <__fp_norm2>
    23e4:	00 24       	eor	r0, r0
    23e6:	a0 e6       	ldi	r26, 0x60	; 96
    23e8:	40 ea       	ldi	r20, 0xA0	; 160
    23ea:	90 01       	movw	r18, r0
    23ec:	80 58       	subi	r24, 0x80	; 128
    23ee:	56 95       	lsr	r21
    23f0:	97 95       	ror	r25
    23f2:	28 f4       	brcc	.+10     	; 0x23fe <sqrt+0x2c>
    23f4:	80 5c       	subi	r24, 0xC0	; 192
    23f6:	66 0f       	add	r22, r22
    23f8:	77 1f       	adc	r23, r23
    23fa:	88 1f       	adc	r24, r24
    23fc:	20 f0       	brcs	.+8      	; 0x2406 <sqrt+0x34>
    23fe:	26 17       	cp	r18, r22
    2400:	37 07       	cpc	r19, r23
    2402:	48 07       	cpc	r20, r24
    2404:	30 f4       	brcc	.+12     	; 0x2412 <sqrt+0x40>
    2406:	62 1b       	sub	r22, r18
    2408:	73 0b       	sbc	r23, r19
    240a:	84 0b       	sbc	r24, r20
    240c:	20 29       	or	r18, r0
    240e:	31 29       	or	r19, r1
    2410:	4a 2b       	or	r20, r26
    2412:	a6 95       	lsr	r26
    2414:	17 94       	ror	r1
    2416:	07 94       	ror	r0
    2418:	20 25       	eor	r18, r0
    241a:	31 25       	eor	r19, r1
    241c:	4a 27       	eor	r20, r26
    241e:	58 f7       	brcc	.-42     	; 0x23f6 <sqrt+0x24>
    2420:	66 0f       	add	r22, r22
    2422:	77 1f       	adc	r23, r23
    2424:	88 1f       	adc	r24, r24
    2426:	20 f0       	brcs	.+8      	; 0x2430 <sqrt+0x5e>
    2428:	26 17       	cp	r18, r22
    242a:	37 07       	cpc	r19, r23
    242c:	48 07       	cpc	r20, r24
    242e:	30 f4       	brcc	.+12     	; 0x243c <sqrt+0x6a>
    2430:	62 0b       	sbc	r22, r18
    2432:	73 0b       	sbc	r23, r19
    2434:	84 0b       	sbc	r24, r20
    2436:	20 0d       	add	r18, r0
    2438:	31 1d       	adc	r19, r1
    243a:	41 1d       	adc	r20, r1
    243c:	a0 95       	com	r26
    243e:	81 f7       	brne	.-32     	; 0x2420 <sqrt+0x4e>
    2440:	b9 01       	movw	r22, r18
    2442:	84 2f       	mov	r24, r20
    2444:	91 58       	subi	r25, 0x81	; 129
    2446:	88 0f       	add	r24, r24
    2448:	96 95       	lsr	r25
    244a:	87 95       	ror	r24
    244c:	08 95       	ret

0000244e <square>:
    244e:	9b 01       	movw	r18, r22
    2450:	ac 01       	movw	r20, r24
    2452:	58 cf       	rjmp	.-336    	; 0x2304 <__mulsf3>

00002454 <__fp_mpack>:
    2454:	9f 3f       	cpi	r25, 0xFF	; 255
    2456:	31 f0       	breq	.+12     	; 0x2464 <__fp_mpack_finite+0xc>

00002458 <__fp_mpack_finite>:
    2458:	91 50       	subi	r25, 0x01	; 1
    245a:	20 f4       	brcc	.+8      	; 0x2464 <__fp_mpack_finite+0xc>
    245c:	87 95       	ror	r24
    245e:	77 95       	ror	r23
    2460:	67 95       	ror	r22
    2462:	b7 95       	ror	r27
    2464:	88 0f       	add	r24, r24
    2466:	91 1d       	adc	r25, r1
    2468:	96 95       	lsr	r25
    246a:	87 95       	ror	r24
    246c:	97 f9       	bld	r25, 7
    246e:	08 95       	ret

00002470 <__fp_norm2>:
    2470:	91 50       	subi	r25, 0x01	; 1
    2472:	50 40       	sbci	r21, 0x00	; 0
    2474:	66 0f       	add	r22, r22
    2476:	77 1f       	adc	r23, r23
    2478:	88 1f       	adc	r24, r24
    247a:	d2 f7       	brpl	.-12     	; 0x2470 <__fp_norm2>
    247c:	08 95       	ret

0000247e <__udivmodsi4>:
    247e:	a1 e2       	ldi	r26, 0x21	; 33
    2480:	1a 2e       	mov	r1, r26
    2482:	aa 1b       	sub	r26, r26
    2484:	bb 1b       	sub	r27, r27
    2486:	fd 01       	movw	r30, r26
    2488:	0d c0       	rjmp	.+26     	; 0x24a4 <__udivmodsi4_ep>

0000248a <__udivmodsi4_loop>:
    248a:	aa 1f       	adc	r26, r26
    248c:	bb 1f       	adc	r27, r27
    248e:	ee 1f       	adc	r30, r30
    2490:	ff 1f       	adc	r31, r31
    2492:	a2 17       	cp	r26, r18
    2494:	b3 07       	cpc	r27, r19
    2496:	e4 07       	cpc	r30, r20
    2498:	f5 07       	cpc	r31, r21
    249a:	20 f0       	brcs	.+8      	; 0x24a4 <__udivmodsi4_ep>
    249c:	a2 1b       	sub	r26, r18
    249e:	b3 0b       	sbc	r27, r19
    24a0:	e4 0b       	sbc	r30, r20
    24a2:	f5 0b       	sbc	r31, r21

000024a4 <__udivmodsi4_ep>:
    24a4:	66 1f       	adc	r22, r22
    24a6:	77 1f       	adc	r23, r23
    24a8:	88 1f       	adc	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	1a 94       	dec	r1
    24ae:	69 f7       	brne	.-38     	; 0x248a <__udivmodsi4_loop>
    24b0:	60 95       	com	r22
    24b2:	70 95       	com	r23
    24b4:	80 95       	com	r24
    24b6:	90 95       	com	r25
    24b8:	9b 01       	movw	r18, r22
    24ba:	ac 01       	movw	r20, r24
    24bc:	bd 01       	movw	r22, r26
    24be:	cf 01       	movw	r24, r30
    24c0:	08 95       	ret

000024c2 <memset>:
    24c2:	dc 01       	movw	r26, r24
    24c4:	01 c0       	rjmp	.+2      	; 0x24c8 <memset+0x6>
    24c6:	6d 93       	st	X+, r22
    24c8:	41 50       	subi	r20, 0x01	; 1
    24ca:	50 40       	sbci	r21, 0x00	; 0
    24cc:	e0 f7       	brcc	.-8      	; 0x24c6 <memset+0x4>
    24ce:	08 95       	ret

000024d0 <_exit>:
    24d0:	f8 94       	cli

000024d2 <__stop_program>:
    24d2:	ff cf       	rjmp	.-2      	; 0x24d2 <__stop_program>
