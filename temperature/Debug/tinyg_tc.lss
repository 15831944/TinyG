
tinyg_tc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002aa0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000002dd  00800100  00800100  00002b14  2**0
                  ALLOC
  2 .stab         00002f10  00000000  00000000  00002b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a81  00000000  00000000  00005a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000200  00000000  00000000  000064a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002984  00000000  00000000  000066a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b10  00000000  00000000  0000902c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010e6  00000000  00000000  00009b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a04  00000000  00000000  0000ac24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c1a  00000000  00000000  0000b628  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000181b  00000000  00000000  0000c242  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000da5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 84 00 	jmp	0x108	; 0x108 <__ctors_end>
       4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      40:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__vector_16>
      44:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_17>
      48:	0c 94 6d 05 	jmp	0xada	; 0xada <__vector_18>
      4c:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__vector_19>
      50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>

00000068 <initialized>:
      68:	0a 44 65 76 69 63 65 20 49 6e 69 74 69 61 6c 69     .Device Initiali
      78:	7a 65 64 0a 00                                      zed..

0000007d <msg_scode0>:
      7d:	49 64 6c 65 00                                      Idle.

00000082 <msg_scode1>:
      82:	54 61 6b 69 6e 67 20 52 65 61 64 69 6e 67 00        Taking Reading.

00000091 <msg_scode2>:
      91:	42 61 64 20 52 65 61 64 69 6e 67 00                 Bad Reading.

0000009d <msg_scode3>:
      9d:	44 69 73 63 6f 6e 6e 65 63 74 65 64 00              Disconnected.

000000aa <msg_scode4>:
      aa:	4e 6f 20 50 6f 77 65 72 00                          No Power.

000000b3 <msg_scode>:
      b3:	7d 00 82 00 91 00 9d 00 aa 00                       }.........

000000bd <__c.2031>:
      bd:	0a 00                                               ..

000000bf <__c.2020>:
      bf:	54 65 6d 70 3a 20 00                                Temp: .

000000c6 <__c.2022>:
      c6:	20 20 50 49 44 3a 20 00                               PID: .

000000ce <__c.2024>:
      ce:	0a 00                                               ..

000000d0 <__c.2008>:
      d0:	54 65 6d 70 3a 20 00                                Temp: .

000000d7 <__c.2010>:
      d7:	20 53 74 64 44 65 76 3a 20 00                        StdDev: .

000000e1 <__c.2012>:
      e1:	20 73 5b 30 5d 3a 20 00                              s[0]: .

000000e9 <__c.2014>:
      e9:	20 50 57 4d 3a 20 00                                 PWM: .

000000f0 <__c.2016>:
      f0:	20 20 00                                              .

000000f3 <__c.2004>:
      f3:	0a 44 65 76 69 63 65 20 49 6e 69 74 69 61 6c 69     .Device Initiali
     103:	7a 65 64 0a 00                                      zed..

00000108 <__ctors_end>:
     108:	11 24       	eor	r1, r1
     10a:	1f be       	out	0x3f, r1	; 63
     10c:	cf ef       	ldi	r28, 0xFF	; 255
     10e:	d8 e0       	ldi	r29, 0x08	; 8
     110:	de bf       	out	0x3e, r29	; 62
     112:	cd bf       	out	0x3d, r28	; 61

00000114 <__do_copy_data>:
     114:	11 e0       	ldi	r17, 0x01	; 1
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	e0 ea       	ldi	r30, 0xA0	; 160
     11c:	fa e2       	ldi	r31, 0x2A	; 42
     11e:	02 c0       	rjmp	.+4      	; 0x124 <__do_copy_data+0x10>
     120:	05 90       	lpm	r0, Z+
     122:	0d 92       	st	X+, r0
     124:	a0 30       	cpi	r26, 0x00	; 0
     126:	b1 07       	cpc	r27, r17
     128:	d9 f7       	brne	.-10     	; 0x120 <__do_copy_data+0xc>

0000012a <__do_clear_bss>:
     12a:	13 e0       	ldi	r17, 0x03	; 3
     12c:	a0 e0       	ldi	r26, 0x00	; 0
     12e:	b1 e0       	ldi	r27, 0x01	; 1
     130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
     132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
     134:	ad 3d       	cpi	r26, 0xDD	; 221
     136:	b1 07       	cpc	r27, r17
     138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
     13a:	0e 94 af 05 	call	0xb5e	; 0xb5e <main>
     13e:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <_exit>

00000142 <__bad_interrupt>:
     142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <kinen_init>:
 * kinen_init() - set up Kinen subsystems; master or slave
 *
 *	Would like some kind of auto-detect here. For now it's just commenting
 */
void kinen_init(void)
{
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
//	kinen_master_init();
	kinen_slave_init();
     14e:	0e 94 b4 00 	call	0x168	; 0x168 <kinen_slave_init>
}
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	08 95       	ret

00000158 <kinen_callback>:
 *	Returns SC_NOOP if no operation was performed
 *	Returns EAGAIN if the function should block lower-priority functions
 *	in the main DISPATCH loop
 */
uint8_t kinen_callback(void)
{
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
//	return (SC_OK);			// return from a successful operation
//	return (SC_EAGAIN);		// return if lower priority tasks should be blocked
	return (SC_NOOP);		// return if no operation was performed 
     160:	83 e0       	ldi	r24, 0x03	; 3
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <kinen_slave_init>:

/*
 * kinen_slave_init() - setup atmega SPI peripheral to be the OCB slave 
 */
void kinen_slave_init(void)
{
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	cd b7       	in	r28, 0x3d	; 61
     16e:	de b7       	in	r29, 0x3e	; 62

//	PRR |= 0x07;				// don't screw with the power reduction register
	DDRB &= ~(1<<DDB4);			// Set MISO output, all others unaffected
     170:	84 e2       	ldi	r24, 0x24	; 36
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	24 e2       	ldi	r18, 0x24	; 36
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	f9 01       	movw	r30, r18
     17a:	20 81       	ld	r18, Z
     17c:	2f 7e       	andi	r18, 0xEF	; 239
     17e:	fc 01       	movw	r30, r24
     180:	20 83       	st	Z, r18
	SPCR = (1<<SPIE | 1<<SPE);	// Enable SPI and its interrupt, set MSB first, slave mode
     182:	8c e4       	ldi	r24, 0x4C	; 76
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	20 ec       	ldi	r18, 0xC0	; 192
     188:	fc 01       	movw	r30, r24
     18a:	20 83       	st	Z, r18
	SPCR = (1<<CPOL | 1<<CPHA);	// Uncomment for mode 3 operation, comment for mode 0
     18c:	8c e4       	ldi	r24, 0x4C	; 76
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	2c e0       	ldi	r18, 0x0C	; 12
     192:	fc 01       	movw	r30, r24
     194:	20 83       	st	Z, r18
	memset(&ki.array, 0, sizeof(ki.array));
     196:	20 e1       	ldi	r18, 0x10	; 16
     198:	88 e0       	ldi	r24, 0x08	; 8
     19a:	91 e0       	ldi	r25, 0x01	; 1
     19c:	fc 01       	movw	r30, r24
     19e:	32 2f       	mov	r19, r18
     1a0:	11 92       	st	Z+, r1
     1a2:	3a 95       	dec	r19
     1a4:	e9 f7       	brne	.-6      	; 0x1a0 <kinen_slave_init+0x38>

	ki_wait_time = DEVICE_WAIT_TIME;	// setup read-only values
     1a6:	8a e0       	ldi	r24, 0x0A	; 10
     1a8:	80 93 0b 01 	sts	0x010B, r24
	ki_device_type = DEVICE_TYPE;
     1ac:	84 e0       	ldi	r24, 0x04	; 4
     1ae:	80 93 10 01 	sts	0x0110, r24
	ki_device_id_hi = DEVICE_ID_HI;
     1b2:	10 92 11 01 	sts	0x0111, r1
	ki_device_id_lo = DEVICE_ID_LO;
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	80 93 12 01 	sts	0x0112, r24
	ki_device_rev_major = DEVICE_REV_MAJOR;
     1bc:	10 92 13 01 	sts	0x0113, r1
	ki_device_rev_minor = DEVICE_REV_MINOR;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	80 93 14 01 	sts	0x0114, r24
	ki_device_uuid_1 = DEVICE_UUID_1;
     1c6:	10 92 15 01 	sts	0x0115, r1
	ki_device_uuid_2 = DEVICE_UUID_2;
     1ca:	10 92 16 01 	sts	0x0116, r1
	ki_device_uuid_3 = DEVICE_UUID_3;
     1ce:	10 92 17 01 	sts	0x0117, r1

	ki_status = SC_OK;
     1d2:	10 92 09 01 	sts	0x0109, r1
	SPDR = ki_status;
     1d6:	8e e4       	ldi	r24, 0x4E	; 78
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	20 91 09 01 	lds	r18, 0x0109
     1de:	fc 01       	movw	r30, r24
     1e0:	20 83       	st	Z, r18
}
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret

000001e8 <__vector_17>:
 * SPI Slave RX Interrupt() - interrupts on byte received
 *
 * Uses a 2 phase state machine to toggle back and forth between ADDR and DATA bytes
 */
ISR(SPI_STC_vect)
{
     1e8:	1f 92       	push	r1
     1ea:	0f 92       	push	r0
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	0f 92       	push	r0
     1f0:	11 24       	eor	r1, r1
     1f2:	2f 93       	push	r18
     1f4:	3f 93       	push	r19
     1f6:	4f 93       	push	r20
     1f8:	5f 93       	push	r21
     1fa:	6f 93       	push	r22
     1fc:	7f 93       	push	r23
     1fe:	8f 93       	push	r24
     200:	9f 93       	push	r25
     202:	af 93       	push	r26
     204:	bf 93       	push	r27
     206:	ef 93       	push	r30
     208:	ff 93       	push	r31
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
	// receive address byte
	if (ki_slave.phase == KINEN_ADDR) {
     212:	80 91 00 01 	lds	r24, 0x0100
     216:	88 23       	and	r24, r24
     218:	09 f0       	breq	.+2      	; 0x21c <__vector_17+0x34>
     21a:	3e c0       	rjmp	.+124    	; 0x298 <__vector_17+0xb0>
		ki_slave.phase = KINEN_DATA;	// advance phase
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	80 93 00 01 	sts	0x0100, r24
		ki_slave.addr = SPDR;		// read and save the address byte
     222:	8e e4       	ldi	r24, 0x4E	; 78
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	fc 01       	movw	r30, r24
     228:	80 81       	ld	r24, Z
     22a:	80 93 01 01 	sts	0x0101, r24
		if (ki_command == KINEN_WRITE) { // write is simple...
     22e:	80 91 08 01 	lds	r24, 0x0108
     232:	81 30       	cpi	r24, 0x01	; 1
     234:	31 f4       	brne	.+12     	; 0x242 <__vector_17+0x5a>
			SPDR = KINEN_OK_BYTE;			// already saved addr, now return an OK
     236:	8e e4       	ldi	r24, 0x4E	; 78
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	2a e5       	ldi	r18, 0x5A	; 90
     23c:	fc 01       	movw	r30, r24
     23e:	20 83       	st	Z, r18
     240:	4e c0       	rjmp	.+156    	; 0x2de <__vector_17+0xf6>
		} else {
			if (ki_slave.addr < KINEN_COMMON_MAX) {	// handle OCB address space
     242:	80 91 01 01 	lds	r24, 0x0101
     246:	80 31       	cpi	r24, 0x10	; 16
     248:	68 f4       	brcc	.+26     	; 0x264 <__vector_17+0x7c>
				SPDR = ki.array[ki_slave.addr];
     24a:	8e e4       	ldi	r24, 0x4E	; 78
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	20 91 01 01 	lds	r18, 0x0101
     252:	22 2f       	mov	r18, r18
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	28 5f       	subi	r18, 0xF8	; 248
     258:	3e 4f       	sbci	r19, 0xFE	; 254
     25a:	f9 01       	movw	r30, r18
     25c:	20 81       	ld	r18, Z
     25e:	fc 01       	movw	r30, r24
     260:	20 83       	st	Z, r18
     262:	3d c0       	rjmp	.+122    	; 0x2de <__vector_17+0xf6>
			} else {								// handle device address space
				if ((ki_status = device_read_byte(ki_slave.addr, &ki_slave.data)) == SC_OK) {
     264:	80 91 01 01 	lds	r24, 0x0101
     268:	22 e0       	ldi	r18, 0x02	; 2
     26a:	31 e0       	ldi	r19, 0x01	; 1
     26c:	b9 01       	movw	r22, r18
     26e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <device_read_byte>
     272:	80 93 09 01 	sts	0x0109, r24
     276:	80 91 09 01 	lds	r24, 0x0109
     27a:	88 23       	and	r24, r24
     27c:	39 f4       	brne	.+14     	; 0x28c <__vector_17+0xa4>
					SPDR = ki_slave.data;
     27e:	8e e4       	ldi	r24, 0x4E	; 78
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	20 91 02 01 	lds	r18, 0x0102
     286:	fc 01       	movw	r30, r24
     288:	20 83       	st	Z, r18
     28a:	29 c0       	rjmp	.+82     	; 0x2de <__vector_17+0xf6>
				} else {
					SPDR = KINEN_ERR_BYTE;
     28c:	8e e4       	ldi	r24, 0x4E	; 78
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	25 ea       	ldi	r18, 0xA5	; 165
     292:	fc 01       	movw	r30, r24
     294:	20 83       	st	Z, r18
     296:	23 c0       	rjmp	.+70     	; 0x2de <__vector_17+0xf6>
			}
		}

	// receive data byte
	} else {
		ki_slave.phase = KINEN_ADDR;	// advance phase
     298:	10 92 00 01 	sts	0x0100, r1
		ki_slave.data = SPDR;		// read and save the data byte
     29c:	8e e4       	ldi	r24, 0x4E	; 78
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	fc 01       	movw	r30, r24
     2a2:	80 81       	ld	r24, Z
     2a4:	80 93 02 01 	sts	0x0102, r24
		if (ki_command == KINEN_WRITE) {
     2a8:	80 91 08 01 	lds	r24, 0x0108
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	b9 f4       	brne	.+46     	; 0x2de <__vector_17+0xf6>
			if (ki_slave.addr < KINEN_COMMON_MAX) {
     2b0:	80 91 01 01 	lds	r24, 0x0101
     2b4:	80 31       	cpi	r24, 0x10	; 16
     2b6:	50 f4       	brcc	.+20     	; 0x2cc <__vector_17+0xe4>
				ki_status = _slave_write_byte(ki_slave.addr, ki_slave.data);
     2b8:	80 91 01 01 	lds	r24, 0x0101
     2bc:	90 91 02 01 	lds	r25, 0x0102
     2c0:	69 2f       	mov	r22, r25
     2c2:	0e 94 82 01 	call	0x304	; 0x304 <_slave_write_byte>
     2c6:	80 93 09 01 	sts	0x0109, r24
     2ca:	09 c0       	rjmp	.+18     	; 0x2de <__vector_17+0xf6>
			} else {
				ki_status = device_write_byte(ki_slave.addr, ki_slave.data);
     2cc:	80 91 01 01 	lds	r24, 0x0101
     2d0:	90 91 02 01 	lds	r25, 0x0102
     2d4:	69 2f       	mov	r22, r25
     2d6:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <device_write_byte>
     2da:	80 93 09 01 	sts	0x0109, r24
			}
		}
	}
}
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	ff 91       	pop	r31
     2e4:	ef 91       	pop	r30
     2e6:	bf 91       	pop	r27
     2e8:	af 91       	pop	r26
     2ea:	9f 91       	pop	r25
     2ec:	8f 91       	pop	r24
     2ee:	7f 91       	pop	r23
     2f0:	6f 91       	pop	r22
     2f2:	5f 91       	pop	r21
     2f4:	4f 91       	pop	r20
     2f6:	3f 91       	pop	r19
     2f8:	2f 91       	pop	r18
     2fa:	0f 90       	pop	r0
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	0f 90       	pop	r0
     300:	1f 90       	pop	r1
     302:	18 95       	reti

00000304 <_slave_write_byte>:

/* 
 * _slave_write_byte() - helper to write byte to a non-device address
 */
static uint8_t _slave_write_byte(const uint8_t addr, const uint8_t data)
{
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	00 d0       	rcall	.+0      	; 0x30a <_slave_write_byte+0x6>
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	89 83       	std	Y+1, r24	; 0x01
     310:	6a 83       	std	Y+2, r22	; 0x02
	if (addr == KINEN_COMMAND) {
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	88 23       	and	r24, r24
     316:	21 f4       	brne	.+8      	; 0x320 <_slave_write_byte+0x1c>
		ki_command = data; 
     318:	8a 81       	ldd	r24, Y+2	; 0x02
     31a:	80 93 08 01 	sts	0x0108, r24
     31e:	11 c0       	rjmp	.+34     	; 0x342 <_slave_write_byte+0x3e>

	} else if (addr == KINEN_ADDR_PAGE) { 
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	84 30       	cpi	r24, 0x04	; 4
     324:	21 f4       	brne	.+8      	; 0x32e <_slave_write_byte+0x2a>
		ki_addr_page = data; 
     326:	8a 81       	ldd	r24, Y+2	; 0x02
     328:	80 93 0c 01 	sts	0x010C, r24
     32c:	0a c0       	rjmp	.+20     	; 0x342 <_slave_write_byte+0x3e>

	} else if (addr == KINEN_RESET) {
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	85 30       	cpi	r24, 0x05	; 5
     332:	29 f4       	brne	.+10     	; 0x33e <_slave_write_byte+0x3a>
		kinen_slave_init();
     334:	0e 94 b4 00 	call	0x168	; 0x168 <kinen_slave_init>
		device_reset();
     338:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <device_reset>
     33c:	02 c0       	rjmp	.+4      	; 0x342 <_slave_write_byte+0x3e>

	} else {
		return (SC_READ_ONLY_ADDRESS);
     33e:	89 e1       	ldi	r24, 0x19	; 25
     340:	01 c0       	rjmp	.+2      	; 0x344 <_slave_write_byte+0x40>
	}
	return (SC_OK);
     342:	80 e0       	ldi	r24, 0x00	; 0
}
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <printString>:

#include "print.h"
#include "serial.h"

void printString(const char *s)
{
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	00 d0       	rcall	.+0      	; 0x354 <printString+0x6>
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	9a 83       	std	Y+2, r25	; 0x02
     35a:	89 83       	std	Y+1, r24	; 0x01
  while (*s)
     35c:	0c c0       	rjmp	.+24     	; 0x376 <printString+0x28>
    serial_write(*s++);
     35e:	89 81       	ldd	r24, Y+1	; 0x01
     360:	9a 81       	ldd	r25, Y+2	; 0x02
     362:	fc 01       	movw	r30, r24
     364:	20 81       	ld	r18, Z
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	9a 81       	ldd	r25, Y+2	; 0x02
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	9a 83       	std	Y+2, r25	; 0x02
     36e:	89 83       	std	Y+1, r24	; 0x01
     370:	82 2f       	mov	r24, r18
     372:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <serial_write>
#include "print.h"
#include "serial.h"

void printString(const char *s)
{
  while (*s)
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	9a 81       	ldd	r25, Y+2	; 0x02
     37a:	fc 01       	movw	r30, r24
     37c:	80 81       	ld	r24, Z
     37e:	88 23       	and	r24, r24
     380:	71 f7       	brne	.-36     	; 0x35e <printString+0x10>
    serial_write(*s++);
}
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
     38c:	1f 93       	push	r17
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	00 d0       	rcall	.+0      	; 0x394 <printPgmString+0x8>
     394:	00 d0       	rcall	.+0      	; 0x396 <printPgmString+0xa>
     396:	00 d0       	rcall	.+0      	; 0x398 <printPgmString+0xc>
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	9e 83       	std	Y+6, r25	; 0x06
     39e:	8d 83       	std	Y+5, r24	; 0x05
  char c;
  while ((c = pgm_read_byte_near(s++)))
     3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <printPgmString+0x1c>
    serial_write(c);
     3a2:	8c 81       	ldd	r24, Y+4	; 0x04
     3a4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <serial_write>

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
  while ((c = pgm_read_byte_near(s++)))
     3a8:	8d 81       	ldd	r24, Y+5	; 0x05
     3aa:	9e 81       	ldd	r25, Y+6	; 0x06
     3ac:	9a 83       	std	Y+2, r25	; 0x02
     3ae:	89 83       	std	Y+1, r24	; 0x01
     3b0:	8d 81       	ldd	r24, Y+5	; 0x05
     3b2:	9e 81       	ldd	r25, Y+6	; 0x06
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	9e 83       	std	Y+6, r25	; 0x06
     3b8:	8d 83       	std	Y+5, r24	; 0x05
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	9a 81       	ldd	r25, Y+2	; 0x02
     3be:	fc 01       	movw	r30, r24
     3c0:	14 91       	lpm	r17, Z
     3c2:	1b 83       	std	Y+3, r17	; 0x03
     3c4:	8b 81       	ldd	r24, Y+3	; 0x03
     3c6:	8c 83       	std	Y+4, r24	; 0x04
     3c8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ca:	88 23       	and	r24, r24
     3cc:	51 f7       	brne	.-44     	; 0x3a2 <printPgmString+0x16>
    serial_write(c);
}
     3ce:	26 96       	adiw	r28, 0x06	; 6
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	08 95       	ret

000003e2 <print_uint8_base2>:
// 			'0' + buf[i - 1] :
// 			'A' + buf[i - 1] - 10);
// }

void print_uint8_base2(uint8_t n)
{ 
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	2a 97       	sbiw	r28, 0x0a	; 10
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	de bf       	out	0x3e, r29	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	cd bf       	out	0x3d, r28	; 61
     3f6:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char buf[8];
	uint8_t i = 0;
     3f8:	19 82       	std	Y+1, r1	; 0x01

	for (; i < 8; i++) {
     3fa:	13 c0       	rjmp	.+38     	; 0x422 <print_uint8_base2+0x40>
		buf[i] = n & 1;
     3fc:	89 81       	ldd	r24, Y+1	; 0x01
     3fe:	88 2f       	mov	r24, r24
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	2a 85       	ldd	r18, Y+10	; 0x0a
     404:	42 2f       	mov	r20, r18
     406:	41 70       	andi	r20, 0x01	; 1
     408:	9e 01       	movw	r18, r28
     40a:	2e 5f       	subi	r18, 0xFE	; 254
     40c:	3f 4f       	sbci	r19, 0xFF	; 255
     40e:	82 0f       	add	r24, r18
     410:	93 1f       	adc	r25, r19
     412:	fc 01       	movw	r30, r24
     414:	40 83       	st	Z, r20
		n >>= 1;
     416:	8a 85       	ldd	r24, Y+10	; 0x0a
     418:	86 95       	lsr	r24
     41a:	8a 87       	std	Y+10, r24	; 0x0a
void print_uint8_base2(uint8_t n)
{ 
	unsigned char buf[8];
	uint8_t i = 0;

	for (; i < 8; i++) {
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	8f 5f       	subi	r24, 0xFF	; 255
     420:	89 83       	std	Y+1, r24	; 0x01
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	88 30       	cpi	r24, 0x08	; 8
     426:	50 f3       	brcs	.-44     	; 0x3fc <print_uint8_base2+0x1a>
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
     428:	11 c0       	rjmp	.+34     	; 0x44c <print_uint8_base2+0x6a>
		serial_write('0' + buf[i - 1]);
     42a:	89 81       	ldd	r24, Y+1	; 0x01
     42c:	88 2f       	mov	r24, r24
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	01 97       	sbiw	r24, 0x01	; 1
     432:	9e 01       	movw	r18, r28
     434:	2e 5f       	subi	r18, 0xFE	; 254
     436:	3f 4f       	sbci	r19, 0xFF	; 255
     438:	82 0f       	add	r24, r18
     43a:	93 1f       	adc	r25, r19
     43c:	fc 01       	movw	r30, r24
     43e:	80 81       	ld	r24, Z
     440:	80 5d       	subi	r24, 0xD0	; 208
     442:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <serial_write>
	for (; i < 8; i++) {
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	81 50       	subi	r24, 0x01	; 1
     44a:	89 83       	std	Y+1, r24	; 0x01
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	88 23       	and	r24, r24
     450:	61 f7       	brne	.-40     	; 0x42a <print_uint8_base2+0x48>
		serial_write('0' + buf[i - 1]);
}
     452:	2a 96       	adiw	r28, 0x0a	; 10
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <print_uint32_base10>:

static void print_uint32_base10(unsigned long n)
{ 
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	2f 97       	sbiw	r28, 0x0f	; 15
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	de bf       	out	0x3e, r29	; 62
     478:	0f be       	out	0x3f, r0	; 63
     47a:	cd bf       	out	0x3d, r28	; 61
     47c:	6c 87       	std	Y+12, r22	; 0x0c
     47e:	7d 87       	std	Y+13, r23	; 0x0d
     480:	8e 87       	std	Y+14, r24	; 0x0e
     482:	9f 87       	std	Y+15, r25	; 0x0f
  unsigned char buf[10]; 
  uint8_t i = 0;
     484:	19 82       	std	Y+1, r1	; 0x01
  
  if (n == 0) {
     486:	8c 85       	ldd	r24, Y+12	; 0x0c
     488:	9d 85       	ldd	r25, Y+13	; 0x0d
     48a:	ae 85       	ldd	r26, Y+14	; 0x0e
     48c:	bf 85       	ldd	r27, Y+15	; 0x0f
     48e:	00 97       	sbiw	r24, 0x00	; 0
     490:	a1 05       	cpc	r26, r1
     492:	b1 05       	cpc	r27, r1
     494:	81 f5       	brne	.+96     	; 0x4f6 <print_uint32_base10+0x92>
    serial_write('0');
     496:	80 e3       	ldi	r24, 0x30	; 48
     498:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <serial_write>
    return;
     49c:	48 c0       	rjmp	.+144    	; 0x52e <print_uint32_base10+0xca>
  } 
  
  while (n > 0) {
    buf[i++] = n % 10 + '0';
     49e:	89 81       	ldd	r24, Y+1	; 0x01
     4a0:	08 2f       	mov	r16, r24
     4a2:	10 e0       	ldi	r17, 0x00	; 0
     4a4:	8c 85       	ldd	r24, Y+12	; 0x0c
     4a6:	9d 85       	ldd	r25, Y+13	; 0x0d
     4a8:	ae 85       	ldd	r26, Y+14	; 0x0e
     4aa:	bf 85       	ldd	r27, Y+15	; 0x0f
     4ac:	2a e0       	ldi	r18, 0x0A	; 10
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	bc 01       	movw	r22, r24
     4b6:	cd 01       	movw	r24, r26
     4b8:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__udivmodsi4>
     4bc:	dc 01       	movw	r26, r24
     4be:	cb 01       	movw	r24, r22
     4c0:	28 2f       	mov	r18, r24
     4c2:	20 5d       	subi	r18, 0xD0	; 208
     4c4:	ce 01       	movw	r24, r28
     4c6:	02 96       	adiw	r24, 0x02	; 2
     4c8:	80 0f       	add	r24, r16
     4ca:	91 1f       	adc	r25, r17
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	8f 5f       	subi	r24, 0xFF	; 255
     4d4:	89 83       	std	Y+1, r24	; 0x01
    n /= 10;
     4d6:	8c 85       	ldd	r24, Y+12	; 0x0c
     4d8:	9d 85       	ldd	r25, Y+13	; 0x0d
     4da:	ae 85       	ldd	r26, Y+14	; 0x0e
     4dc:	bf 85       	ldd	r27, Y+15	; 0x0f
     4de:	2a e0       	ldi	r18, 0x0A	; 10
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	bc 01       	movw	r22, r24
     4e8:	cd 01       	movw	r24, r26
     4ea:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__udivmodsi4>
     4ee:	2c 87       	std	Y+12, r18	; 0x0c
     4f0:	3d 87       	std	Y+13, r19	; 0x0d
     4f2:	4e 87       	std	Y+14, r20	; 0x0e
     4f4:	5f 87       	std	Y+15, r21	; 0x0f
  if (n == 0) {
    serial_write('0');
    return;
  } 
  
  while (n > 0) {
     4f6:	8c 85       	ldd	r24, Y+12	; 0x0c
     4f8:	9d 85       	ldd	r25, Y+13	; 0x0d
     4fa:	ae 85       	ldd	r26, Y+14	; 0x0e
     4fc:	bf 85       	ldd	r27, Y+15	; 0x0f
     4fe:	00 97       	sbiw	r24, 0x00	; 0
     500:	a1 05       	cpc	r26, r1
     502:	b1 05       	cpc	r27, r1
     504:	61 f6       	brne	.-104    	; 0x49e <print_uint32_base10+0x3a>
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
     506:	10 c0       	rjmp	.+32     	; 0x528 <print_uint32_base10+0xc4>
    serial_write(buf[i-1]);
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	88 2f       	mov	r24, r24
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	9e 01       	movw	r18, r28
     512:	2e 5f       	subi	r18, 0xFE	; 254
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	82 0f       	add	r24, r18
     518:	93 1f       	adc	r25, r19
     51a:	fc 01       	movw	r30, r24
     51c:	80 81       	ld	r24, Z
     51e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <serial_write>
  while (n > 0) {
    buf[i++] = n % 10 + '0';
    n /= 10;
  }
    
  for (; i > 0; i--)
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	81 50       	subi	r24, 0x01	; 1
     526:	89 83       	std	Y+1, r24	; 0x01
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	88 23       	and	r24, r24
     52c:	69 f7       	brne	.-38     	; 0x508 <print_uint32_base10+0xa4>
    serial_write(buf[i-1]);
}
     52e:	2f 96       	adiw	r28, 0x0f	; 15
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	08 95       	ret

00000544 <printInteger>:

void printInteger(uint32_t n)
{
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	00 d0       	rcall	.+0      	; 0x54a <printInteger+0x6>
     54a:	00 d0       	rcall	.+0      	; 0x54c <printInteger+0x8>
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	69 83       	std	Y+1, r22	; 0x01
     552:	7a 83       	std	Y+2, r23	; 0x02
     554:	8b 83       	std	Y+3, r24	; 0x03
     556:	9c 83       	std	Y+4, r25	; 0x04
  if (n < 0) {
    serial_write('-');
    n = -n;
  }
  print_uint32_base10(n);
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	9a 81       	ldd	r25, Y+2	; 0x02
     55c:	ab 81       	ldd	r26, Y+3	; 0x03
     55e:	bc 81       	ldd	r27, Y+4	; 0x04
     560:	bc 01       	movw	r22, r24
     562:	cd 01       	movw	r24, r26
     564:	0e 94 32 02 	call	0x464	; 0x464 <print_uint32_base10>
}
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up 
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n)
{
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
     582:	64 97       	sbiw	r28, 0x14	; 20
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	f8 94       	cli
     588:	de bf       	out	0x3e, r29	; 62
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	cd bf       	out	0x3d, r28	; 61
     58e:	69 8b       	std	Y+17, r22	; 0x11
     590:	7a 8b       	std	Y+18, r23	; 0x12
     592:	8b 8b       	std	Y+19, r24	; 0x13
     594:	9c 8b       	std	Y+20, r25	; 0x14
	if (n < 0) {
     596:	11 e0       	ldi	r17, 0x01	; 1
     598:	69 89       	ldd	r22, Y+17	; 0x11
     59a:	7a 89       	ldd	r23, Y+18	; 0x12
     59c:	8b 89       	ldd	r24, Y+19	; 0x13
     59e:	9c 89       	ldd	r25, Y+20	; 0x14
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	a9 01       	movw	r20, r18
     5a6:	0e 94 4c 10 	call	0x2098	; 0x2098 <__cmpsf2>
     5aa:	88 23       	and	r24, r24
     5ac:	0c f0       	brlt	.+2      	; 0x5b0 <printFloat+0x3a>
     5ae:	10 e0       	ldi	r17, 0x00	; 0
     5b0:	11 23       	and	r17, r17
     5b2:	61 f0       	breq	.+24     	; 0x5cc <printFloat+0x56>
		serial_write('-');
     5b4:	8d e2       	ldi	r24, 0x2D	; 45
     5b6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <serial_write>
		n = -n;
     5ba:	89 89       	ldd	r24, Y+17	; 0x11
     5bc:	9a 89       	ldd	r25, Y+18	; 0x12
     5be:	ab 89       	ldd	r26, Y+19	; 0x13
     5c0:	bc 89       	ldd	r27, Y+20	; 0x14
     5c2:	b0 58       	subi	r27, 0x80	; 128
     5c4:	89 8b       	std	Y+17, r24	; 0x11
     5c6:	9a 8b       	std	Y+18, r25	; 0x12
     5c8:	ab 8b       	std	Y+19, r26	; 0x13
     5ca:	bc 8b       	std	Y+20, r27	; 0x14
	}

	uint8_t decimals = DECIMAL_PLACES;
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	89 83       	std	Y+1, r24	; 0x01
	while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
     5d0:	13 c0       	rjmp	.+38     	; 0x5f8 <printFloat+0x82>
		n *= 100;
     5d2:	69 89       	ldd	r22, Y+17	; 0x11
     5d4:	7a 89       	ldd	r23, Y+18	; 0x12
     5d6:	8b 89       	ldd	r24, Y+19	; 0x13
     5d8:	9c 89       	ldd	r25, Y+20	; 0x14
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	48 ec       	ldi	r20, 0xC8	; 200
     5e0:	52 e4       	ldi	r21, 0x42	; 66
     5e2:	0e 94 9f 11 	call	0x233e	; 0x233e <__mulsf3>
     5e6:	dc 01       	movw	r26, r24
     5e8:	cb 01       	movw	r24, r22
     5ea:	89 8b       	std	Y+17, r24	; 0x11
     5ec:	9a 8b       	std	Y+18, r25	; 0x12
     5ee:	ab 8b       	std	Y+19, r26	; 0x13
     5f0:	bc 8b       	std	Y+20, r27	; 0x14
		decimals -= 2;
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	82 50       	subi	r24, 0x02	; 2
     5f6:	89 83       	std	Y+1, r24	; 0x01
		serial_write('-');
		n = -n;
	}

	uint8_t decimals = DECIMAL_PLACES;
	while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	82 30       	cpi	r24, 0x02	; 2
     5fc:	50 f7       	brcc	.-44     	; 0x5d2 <printFloat+0x5c>
		n *= 100;
		decimals -= 2;
	}
	if (decimals) { n *= 10; }
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	88 23       	and	r24, r24
     602:	81 f0       	breq	.+32     	; 0x624 <printFloat+0xae>
     604:	69 89       	ldd	r22, Y+17	; 0x11
     606:	7a 89       	ldd	r23, Y+18	; 0x12
     608:	8b 89       	ldd	r24, Y+19	; 0x13
     60a:	9c 89       	ldd	r25, Y+20	; 0x14
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	40 e2       	ldi	r20, 0x20	; 32
     612:	51 e4       	ldi	r21, 0x41	; 65
     614:	0e 94 9f 11 	call	0x233e	; 0x233e <__mulsf3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	89 8b       	std	Y+17, r24	; 0x11
     61e:	9a 8b       	std	Y+18, r25	; 0x12
     620:	ab 8b       	std	Y+19, r26	; 0x13
     622:	bc 8b       	std	Y+20, r27	; 0x14
	n += 0.5; // Add rounding factor. Ensures carryover through entire value.
     624:	69 89       	ldd	r22, Y+17	; 0x11
     626:	7a 89       	ldd	r23, Y+18	; 0x12
     628:	8b 89       	ldd	r24, Y+19	; 0x13
     62a:	9c 89       	ldd	r25, Y+20	; 0x14
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	5f e3       	ldi	r21, 0x3F	; 63
     634:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__addsf3>
     638:	dc 01       	movw	r26, r24
     63a:	cb 01       	movw	r24, r22
     63c:	89 8b       	std	Y+17, r24	; 0x11
     63e:	9a 8b       	std	Y+18, r25	; 0x12
     640:	ab 8b       	std	Y+19, r26	; 0x13
     642:	bc 8b       	std	Y+20, r27	; 0x14
    
	// Generate digits backwards and store in string.
	unsigned char buf[10]; 
	uint8_t i = 0;
     644:	1a 82       	std	Y+2, r1	; 0x02
	uint32_t a = (long)n;  
     646:	69 89       	ldd	r22, Y+17	; 0x11
     648:	7a 89       	ldd	r23, Y+18	; 0x12
     64a:	8b 89       	ldd	r24, Y+19	; 0x13
     64c:	9c 89       	ldd	r25, Y+20	; 0x14
     64e:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fixsfsi>
     652:	dc 01       	movw	r26, r24
     654:	cb 01       	movw	r24, r22
     656:	8b 83       	std	Y+3, r24	; 0x03
     658:	9c 83       	std	Y+4, r25	; 0x04
     65a:	ad 83       	std	Y+5, r26	; 0x05
     65c:	be 83       	std	Y+6, r27	; 0x06
	buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
     65e:	8e e2       	ldi	r24, 0x2E	; 46
     660:	89 87       	std	Y+9, r24	; 0x09
	while(a > 0) {
     662:	32 c0       	rjmp	.+100    	; 0x6c8 <printFloat+0x152>
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
     664:	8a 81       	ldd	r24, Y+2	; 0x02
     666:	82 30       	cpi	r24, 0x02	; 2
     668:	19 f4       	brne	.+6      	; 0x670 <printFloat+0xfa>
     66a:	8a 81       	ldd	r24, Y+2	; 0x02
     66c:	8f 5f       	subi	r24, 0xFF	; 255
     66e:	8a 83       	std	Y+2, r24	; 0x02
		buf[i++] = (a % 10) + '0'; // Get digit
     670:	8a 81       	ldd	r24, Y+2	; 0x02
     672:	08 2f       	mov	r16, r24
     674:	10 e0       	ldi	r17, 0x00	; 0
     676:	8b 81       	ldd	r24, Y+3	; 0x03
     678:	9c 81       	ldd	r25, Y+4	; 0x04
     67a:	ad 81       	ldd	r26, Y+5	; 0x05
     67c:	be 81       	ldd	r27, Y+6	; 0x06
     67e:	2a e0       	ldi	r18, 0x0A	; 10
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	bc 01       	movw	r22, r24
     688:	cd 01       	movw	r24, r26
     68a:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__udivmodsi4>
     68e:	dc 01       	movw	r26, r24
     690:	cb 01       	movw	r24, r22
     692:	28 2f       	mov	r18, r24
     694:	20 5d       	subi	r18, 0xD0	; 208
     696:	ce 01       	movw	r24, r28
     698:	07 96       	adiw	r24, 0x07	; 7
     69a:	80 0f       	add	r24, r16
     69c:	91 1f       	adc	r25, r17
     69e:	fc 01       	movw	r30, r24
     6a0:	20 83       	st	Z, r18
     6a2:	8a 81       	ldd	r24, Y+2	; 0x02
     6a4:	8f 5f       	subi	r24, 0xFF	; 255
     6a6:	8a 83       	std	Y+2, r24	; 0x02
		a /= 10;
     6a8:	8b 81       	ldd	r24, Y+3	; 0x03
     6aa:	9c 81       	ldd	r25, Y+4	; 0x04
     6ac:	ad 81       	ldd	r26, Y+5	; 0x05
     6ae:	be 81       	ldd	r27, Y+6	; 0x06
     6b0:	2a e0       	ldi	r18, 0x0A	; 10
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	40 e0       	ldi	r20, 0x00	; 0
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	bc 01       	movw	r22, r24
     6ba:	cd 01       	movw	r24, r26
     6bc:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__udivmodsi4>
     6c0:	2b 83       	std	Y+3, r18	; 0x03
     6c2:	3c 83       	std	Y+4, r19	; 0x04
     6c4:	4d 83       	std	Y+5, r20	; 0x05
     6c6:	5e 83       	std	Y+6, r21	; 0x06
	// Generate digits backwards and store in string.
	unsigned char buf[10]; 
	uint8_t i = 0;
	uint32_t a = (long)n;  
	buf[DECIMAL_PLACES] = '.'; // Place decimal point, even if decimal places are zero.
	while(a > 0) {
     6c8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ca:	9c 81       	ldd	r25, Y+4	; 0x04
     6cc:	ad 81       	ldd	r26, Y+5	; 0x05
     6ce:	be 81       	ldd	r27, Y+6	; 0x06
     6d0:	00 97       	sbiw	r24, 0x00	; 0
     6d2:	a1 05       	cpc	r26, r1
     6d4:	b1 05       	cpc	r27, r1
     6d6:	31 f6       	brne	.-116    	; 0x664 <printFloat+0xee>
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
		buf[i++] = (a % 10) + '0'; // Get digit
		a /= 10;
	}
	while (i < DECIMAL_PLACES) { 
     6d8:	0e c0       	rjmp	.+28     	; 0x6f6 <printFloat+0x180>
		buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
     6da:	8a 81       	ldd	r24, Y+2	; 0x02
     6dc:	88 2f       	mov	r24, r24
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	9e 01       	movw	r18, r28
     6e2:	29 5f       	subi	r18, 0xF9	; 249
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255
     6e6:	82 0f       	add	r24, r18
     6e8:	93 1f       	adc	r25, r19
     6ea:	20 e3       	ldi	r18, 0x30	; 48
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 83       	st	Z, r18
     6f0:	8a 81       	ldd	r24, Y+2	; 0x02
     6f2:	8f 5f       	subi	r24, 0xFF	; 255
     6f4:	8a 83       	std	Y+2, r24	; 0x02
	while(a > 0) {
		if (i == DECIMAL_PLACES) { i++; } // Skip decimal point location
		buf[i++] = (a % 10) + '0'; // Get digit
		a /= 10;
	}
	while (i < DECIMAL_PLACES) { 
     6f6:	8a 81       	ldd	r24, Y+2	; 0x02
     6f8:	82 30       	cpi	r24, 0x02	; 2
     6fa:	78 f3       	brcs	.-34     	; 0x6da <printFloat+0x164>
		buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
	}
	if (i == DECIMAL_PLACES) { // Fill in leading zero, if needed.
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	82 30       	cpi	r24, 0x02	; 2
     700:	11 f5       	brne	.+68     	; 0x746 <printFloat+0x1d0>
		i++;
     702:	8a 81       	ldd	r24, Y+2	; 0x02
     704:	8f 5f       	subi	r24, 0xFF	; 255
     706:	8a 83       	std	Y+2, r24	; 0x02
		buf[i++] = '0'; 
     708:	8a 81       	ldd	r24, Y+2	; 0x02
     70a:	88 2f       	mov	r24, r24
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	9e 01       	movw	r18, r28
     710:	29 5f       	subi	r18, 0xF9	; 249
     712:	3f 4f       	sbci	r19, 0xFF	; 255
     714:	82 0f       	add	r24, r18
     716:	93 1f       	adc	r25, r19
     718:	20 e3       	ldi	r18, 0x30	; 48
     71a:	fc 01       	movw	r30, r24
     71c:	20 83       	st	Z, r18
     71e:	8a 81       	ldd	r24, Y+2	; 0x02
     720:	8f 5f       	subi	r24, 0xFF	; 255
     722:	8a 83       	std	Y+2, r24	; 0x02
	}

	// Print the generated string.
	for (; i > 0; i--)
     724:	10 c0       	rjmp	.+32     	; 0x746 <printFloat+0x1d0>
		serial_write(buf[i-1]);
     726:	8a 81       	ldd	r24, Y+2	; 0x02
     728:	88 2f       	mov	r24, r24
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	9e 01       	movw	r18, r28
     730:	29 5f       	subi	r18, 0xF9	; 249
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	82 0f       	add	r24, r18
     736:	93 1f       	adc	r25, r19
     738:	fc 01       	movw	r30, r24
     73a:	80 81       	ld	r24, Z
     73c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <serial_write>
		i++;
		buf[i++] = '0'; 
	}

	// Print the generated string.
	for (; i > 0; i--)
     740:	8a 81       	ldd	r24, Y+2	; 0x02
     742:	81 50       	subi	r24, 0x01	; 1
     744:	8a 83       	std	Y+2, r24	; 0x02
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	88 23       	and	r24, r24
     74a:	69 f7       	brne	.-38     	; 0x726 <printFloat+0x1b0>
		serial_write(buf[i-1]);
}
     74c:	64 96       	adiw	r28, 0x14	; 20
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	f8 94       	cli
     752:	de bf       	out	0x3e, r29	; 62
     754:	0f be       	out	0x3f, r0	; 63
     756:	cd bf       	out	0x3d, r28	; 61
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	08 95       	ret

00000762 <rpt_initialized>:
static PGM_P const msg_scode[] PROGMEM = { msg_scode0, msg_scode1, msg_scode2, msg_scode3, msg_scode4};

/*** Display routines ***/

void rpt_initialized()
{
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
//	printPgmString((PGM_P)(pgm_read_word(initialized))); 
	printPgmString(PSTR("\nDevice Initialized\n")); 
     76a:	83 ef       	ldi	r24, 0xF3	; 243
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 c6 01 	call	0x38c	; 0x38c <printPgmString>
}
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <rpt_readout>:

void rpt_readout()
{
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
	printPgmString(PSTR("Temp: ")); printFloat(sensor.temperature);
     780:	80 ed       	ldi	r24, 0xD0	; 208
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 c6 01 	call	0x38c	; 0x38c <printPgmString>
     788:	80 91 72 01 	lds	r24, 0x0172
     78c:	90 91 73 01 	lds	r25, 0x0173
     790:	a0 91 74 01 	lds	r26, 0x0174
     794:	b0 91 75 01 	lds	r27, 0x0175
     798:	bc 01       	movw	r22, r24
     79a:	cd 01       	movw	r24, r26
     79c:	0e 94 bb 02 	call	0x576	; 0x576 <printFloat>
	printPgmString(PSTR(" StdDev: ")); printFloat(sensor.std_dev);				//++++++
     7a0:	87 ed       	ldi	r24, 0xD7	; 215
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 c6 01 	call	0x38c	; 0x38c <printPgmString>
     7a8:	80 91 76 01 	lds	r24, 0x0176
     7ac:	90 91 77 01 	lds	r25, 0x0177
     7b0:	a0 91 78 01 	lds	r26, 0x0178
     7b4:	b0 91 79 01 	lds	r27, 0x0179
     7b8:	bc 01       	movw	r22, r24
     7ba:	cd 01       	movw	r24, r26
     7bc:	0e 94 bb 02 	call	0x576	; 0x576 <printFloat>
	printPgmString(PSTR(" s[0]: ")); printFloat(sensor.sample[0]);				//++++++
     7c0:	81 ee       	ldi	r24, 0xE1	; 225
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 c6 01 	call	0x38c	; 0x38c <printPgmString>
     7c8:	80 91 8a 01 	lds	r24, 0x018A
     7cc:	90 91 8b 01 	lds	r25, 0x018B
     7d0:	a0 91 8c 01 	lds	r26, 0x018C
     7d4:	b0 91 8d 01 	lds	r27, 0x018D
     7d8:	bc 01       	movw	r22, r24
     7da:	cd 01       	movw	r24, r26
     7dc:	0e 94 bb 02 	call	0x576	; 0x576 <printFloat>
	printPgmString(PSTR(" PWM: ")); printFloat(pid.output);
     7e0:	89 ee       	ldi	r24, 0xE9	; 233
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 c6 01 	call	0x38c	; 0x38c <printPgmString>
     7e8:	80 91 3b 01 	lds	r24, 0x013B
     7ec:	90 91 3c 01 	lds	r25, 0x013C
     7f0:	a0 91 3d 01 	lds	r26, 0x013D
     7f4:	b0 91 3e 01 	lds	r27, 0x013E
     7f8:	bc 01       	movw	r22, r24
     7fa:	cd 01       	movw	r24, r26
     7fc:	0e 94 bb 02 	call	0x576	; 0x576 <printFloat>
//	printPgmString(PSTR(" Error: ")); printFloat(pid.error);				//++++++
	printPgmString(PSTR("  "));
     800:	80 ef       	ldi	r24, 0xF0	; 240
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 c6 01 	call	0x38c	; 0x38c <printPgmString>
	rpt_sensor();
     808:	0e 94 34 04 	call	0x868	; 0x868 <rpt_sensor>
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <rpt_heater_readout>:

void rpt_heater_readout()
{
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
	printPgmString(PSTR("Temp: "));  printFloat(heater.temperature);
     81a:	8f eb       	ldi	r24, 0xBF	; 191
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 c6 01 	call	0x38c	; 0x38c <printPgmString>
     822:	80 91 1d 01 	lds	r24, 0x011D
     826:	90 91 1e 01 	lds	r25, 0x011E
     82a:	a0 91 1f 01 	lds	r26, 0x011F
     82e:	b0 91 20 01 	lds	r27, 0x0120
     832:	bc 01       	movw	r22, r24
     834:	cd 01       	movw	r24, r26
     836:	0e 94 bb 02 	call	0x576	; 0x576 <printFloat>
	printPgmString(PSTR("  PID: ")); printFloat(pid.output);
     83a:	86 ec       	ldi	r24, 0xC6	; 198
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 c6 01 	call	0x38c	; 0x38c <printPgmString>
     842:	80 91 3b 01 	lds	r24, 0x013B
     846:	90 91 3c 01 	lds	r25, 0x013C
     84a:	a0 91 3d 01 	lds	r26, 0x013D
     84e:	b0 91 3e 01 	lds	r27, 0x013E
     852:	bc 01       	movw	r22, r24
     854:	cd 01       	movw	r24, r26
     856:	0e 94 bb 02 	call	0x576	; 0x576 <printFloat>
	printPgmString(PSTR("\n")); 
     85a:	8e ec       	ldi	r24, 0xCE	; 206
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	0e 94 c6 01 	call	0x38c	; 0x38c <printPgmString>
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <rpt_sensor>:

void rpt_sensor()
{
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	00 d0       	rcall	.+0      	; 0x876 <rpt_sensor+0xe>
     876:	00 d0       	rcall	.+0      	; 0x878 <rpt_sensor+0x10>
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
	printPgmString((PGM_P)pgm_read_word(&msg_scode[sensor.code]));
     87c:	80 91 70 01 	lds	r24, 0x0170
     880:	88 2f       	mov	r24, r24
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	88 0f       	add	r24, r24
     886:	99 1f       	adc	r25, r25
     888:	8d 54       	subi	r24, 0x4D	; 77
     88a:	9f 4f       	sbci	r25, 0xFF	; 255
     88c:	9a 83       	std	Y+2, r25	; 0x02
     88e:	89 83       	std	Y+1, r24	; 0x01
     890:	89 81       	ldd	r24, Y+1	; 0x01
     892:	9a 81       	ldd	r25, Y+2	; 0x02
     894:	8c 01       	movw	r16, r24
     896:	f8 01       	movw	r30, r16
     898:	e5 90       	lpm	r14, Z+
     89a:	f4 90       	lpm	r15, Z
     89c:	8f 01       	movw	r16, r30
     89e:	fc 82       	std	Y+4, r15	; 0x04
     8a0:	eb 82       	std	Y+3, r14	; 0x03
     8a2:	1a 83       	std	Y+2, r17	; 0x02
     8a4:	09 83       	std	Y+1, r16	; 0x01
     8a6:	8b 81       	ldd	r24, Y+3	; 0x03
     8a8:	9c 81       	ldd	r25, Y+4	; 0x04
     8aa:	0e 94 c6 01 	call	0x38c	; 0x38c <printPgmString>
	printPgmString(PSTR("\n")); 
     8ae:	8d eb       	ldi	r24, 0xBD	; 189
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 c6 01 	call	0x38c	; 0x38c <printPgmString>
//	strncpy_P(msg,(PGM_P)pgm_read_word(&msg_scode[sensor.code]), MSGLEN);
//	printString(msg);

//	printPgmString(PSTR(pgm_read_word(&msg_scode[sensor.code]));
//	printPgmString(&msg_scode[sensor.code]);
}
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	08 95       	ret

000008cc <set_baud_rate>:
uint8_t rx_buffer_tail = 0;
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_buffer_head = 0;
volatile uint8_t tx_buffer_tail = 0;

static void set_baud_rate(long baud) {
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <set_baud_rate+0x6>
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <set_baud_rate+0x8>
     8d4:	00 d0       	rcall	.+0      	; 0x8d6 <set_baud_rate+0xa>
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	6b 83       	std	Y+3, r22	; 0x03
     8dc:	7c 83       	std	Y+4, r23	; 0x04
     8de:	8d 83       	std	Y+5, r24	; 0x05
     8e0:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t UBRR0_value = (F_CPU / (8 * baud)) - 1;
     8e2:	8b 81       	ldd	r24, Y+3	; 0x03
     8e4:	9c 81       	ldd	r25, Y+4	; 0x04
     8e6:	ad 81       	ldd	r26, Y+5	; 0x05
     8e8:	be 81       	ldd	r27, Y+6	; 0x06
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	aa 1f       	adc	r26, r26
     8f0:	bb 1f       	adc	r27, r27
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	aa 1f       	adc	r26, r26
     8f8:	bb 1f       	adc	r27, r27
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	aa 1f       	adc	r26, r26
     900:	bb 1f       	adc	r27, r27
     902:	9c 01       	movw	r18, r24
     904:	ad 01       	movw	r20, r26
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	92 e1       	ldi	r25, 0x12	; 18
     90a:	aa e7       	ldi	r26, 0x7A	; 122
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	bc 01       	movw	r22, r24
     910:	cd 01       	movw	r24, r26
     912:	0e 94 7e 12 	call	0x24fc	; 0x24fc <__divmodsi4>
     916:	da 01       	movw	r26, r20
     918:	c9 01       	movw	r24, r18
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	9a 83       	std	Y+2, r25	; 0x02
     91e:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = UBRR0_value >> 8;
     920:	85 ec       	ldi	r24, 0xC5	; 197
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	29 81       	ldd	r18, Y+1	; 0x01
     926:	3a 81       	ldd	r19, Y+2	; 0x02
     928:	23 2f       	mov	r18, r19
     92a:	33 27       	eor	r19, r19
     92c:	fc 01       	movw	r30, r24
     92e:	20 83       	st	Z, r18
	UBRR0L = UBRR0_value;
     930:	84 ec       	ldi	r24, 0xC4	; 196
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	29 81       	ldd	r18, Y+1	; 0x01
     936:	fc 01       	movw	r30, r24
     938:	20 83       	st	Z, r18
	UCSR0A &= ~(1<<U2X0);		// baud doubler off
     93a:	80 ec       	ldi	r24, 0xC0	; 192
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	20 ec       	ldi	r18, 0xC0	; 192
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	f9 01       	movw	r30, r18
     944:	20 81       	ld	r18, Z
     946:	2d 7f       	andi	r18, 0xFD	; 253
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
}
     94c:	26 96       	adiw	r28, 0x06	; 6
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	de bf       	out	0x3e, r29	; 62
     954:	0f be       	out	0x3f, r0	; 63
     956:	cd bf       	out	0x3d, r28	; 61
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <serial_init>:

void serial_init(long baud)
{
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	00 d0       	rcall	.+0      	; 0x964 <serial_init+0x6>
     964:	00 d0       	rcall	.+0      	; 0x966 <serial_init+0x8>
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	69 83       	std	Y+1, r22	; 0x01
     96c:	7a 83       	std	Y+2, r23	; 0x02
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	9c 83       	std	Y+4, r25	; 0x04
	set_baud_rate(baud);
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	9a 81       	ldd	r25, Y+2	; 0x02
     976:	ab 81       	ldd	r26, Y+3	; 0x03
     978:	bc 81       	ldd	r27, Y+4	; 0x04
     97a:	bc 01       	movw	r22, r24
     97c:	cd 01       	movw	r24, r26
     97e:	0e 94 66 04 	call	0x8cc	; 0x8cc <set_baud_rate>
	UCSR0B |= 1<<RXEN0;			// enable rx and tx
     982:	81 ec       	ldi	r24, 0xC1	; 193
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	21 ec       	ldi	r18, 0xC1	; 193
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	f9 01       	movw	r30, r18
     98c:	20 81       	ld	r18, Z
     98e:	20 61       	ori	r18, 0x10	; 16
     990:	fc 01       	movw	r30, r24
     992:	20 83       	st	Z, r18
	UCSR0B |= 1<<TXEN0;	
     994:	81 ec       	ldi	r24, 0xC1	; 193
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	21 ec       	ldi	r18, 0xC1	; 193
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	f9 01       	movw	r30, r18
     99e:	20 81       	ld	r18, Z
     9a0:	28 60       	ori	r18, 0x08	; 8
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 83       	st	Z, r18
	UCSR0B |= 1<<RXCIE0;		// enable interrupt on complete reception of a byte
     9a6:	81 ec       	ldi	r24, 0xC1	; 193
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	21 ec       	ldi	r18, 0xC1	; 193
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	f9 01       	movw	r30, r18
     9b0:	20 81       	ld	r18, Z
     9b2:	20 68       	ori	r18, 0x80	; 128
     9b4:	fc 01       	movw	r30, r24
     9b6:	20 83       	st	Z, r18
	// USART defaults to 8-bit, no parity, 1 stop bit
}
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <serial_write>:

void serial_write(uint8_t data) {
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <serial_write+0x6>
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t next_head = tx_buffer_head + 1;	// Calculate next head
     9d2:	80 91 05 01 	lds	r24, 0x0105
     9d6:	8f 5f       	subi	r24, 0xFF	; 255
     9d8:	89 83       	std	Y+1, r24	; 0x01
	if (next_head == TX_BUFFER_SIZE) {
		next_head = 0; 
	}
	// Enable Data Register Empty Interrupt to make sure tx-streaming is running
	UCSR0B |= (1<<UDRIE0); 
     9da:	81 ec       	ldi	r24, 0xC1	; 193
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	21 ec       	ldi	r18, 0xC1	; 193
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	f9 01       	movw	r30, r18
     9e4:	20 81       	ld	r18, Z
     9e6:	20 62       	ori	r18, 0x20	; 32
     9e8:	fc 01       	movw	r30, r24
     9ea:	20 83       	st	Z, r18
	while (next_head == tx_buffer_tail); 	// Wait until there is space in the buffer
     9ec:	00 00       	nop
     9ee:	80 91 06 01 	lds	r24, 0x0106
     9f2:	99 81       	ldd	r25, Y+1	; 0x01
     9f4:	98 17       	cp	r25, r24
     9f6:	d9 f3       	breq	.-10     	; 0x9ee <serial_write+0x28>

	tx_buffer[tx_buffer_head] = data;		// Store data and advance head
     9f8:	80 91 05 01 	lds	r24, 0x0105
     9fc:	88 2f       	mov	r24, r24
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	84 52       	subi	r24, 0x24	; 36
     a02:	9d 4f       	sbci	r25, 0xFD	; 253
     a04:	2a 81       	ldd	r18, Y+2	; 0x02
     a06:	fc 01       	movw	r30, r24
     a08:	20 83       	st	Z, r18
	tx_buffer_head = next_head;
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	80 93 05 01 	sts	0x0105, r24
}
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <__vector_19>:

// Data Register Empty Interrupt handler
ISR(USART_UDRE_vect)
{
     a1a:	1f 92       	push	r1
     a1c:	0f 92       	push	r0
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	0f 92       	push	r0
     a22:	11 24       	eor	r1, r1
     a24:	2f 93       	push	r18
     a26:	3f 93       	push	r19
     a28:	8f 93       	push	r24
     a2a:	9f 93       	push	r25
     a2c:	ef 93       	push	r30
     a2e:	ff 93       	push	r31
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	0f 92       	push	r0
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
	uint8_t tail = tx_buffer_tail;	// Temporary tx_buffer_tail (to optimize for volatile)
     a3a:	80 91 06 01 	lds	r24, 0x0106
     a3e:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = tx_buffer[tail];			// Send a byte from the buffer	
     a40:	86 ec       	ldi	r24, 0xC6	; 198
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	29 81       	ldd	r18, Y+1	; 0x01
     a46:	22 2f       	mov	r18, r18
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	24 52       	subi	r18, 0x24	; 36
     a4c:	3d 4f       	sbci	r19, 0xFD	; 253
     a4e:	f9 01       	movw	r30, r18
     a50:	20 81       	ld	r18, Z
     a52:	fc 01       	movw	r30, r24
     a54:	20 83       	st	Z, r18
    tail++;							// Update tail position
     a56:	89 81       	ldd	r24, Y+1	; 0x01
     a58:	8f 5f       	subi	r24, 0xFF	; 255
     a5a:	89 83       	std	Y+1, r24	; 0x01
    if (tail == TX_BUFFER_SIZE) { tail = 0; }
	tx_buffer_tail = tail;
     a5c:	89 81       	ldd	r24, Y+1	; 0x01
     a5e:	80 93 06 01 	sts	0x0106, r24

	// Turn off Data Register Empty Interrupt to stop tx-streaming if this concludes the transfer
	if (tail == tx_buffer_head) { 
     a62:	80 91 05 01 	lds	r24, 0x0105
     a66:	99 81       	ldd	r25, Y+1	; 0x01
     a68:	98 17       	cp	r25, r24
     a6a:	49 f4       	brne	.+18     	; 0xa7e <__vector_19+0x64>
		UCSR0B &= ~(1<<UDRIE0);
     a6c:	81 ec       	ldi	r24, 0xC1	; 193
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	21 ec       	ldi	r18, 0xC1	; 193
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	f9 01       	movw	r30, r18
     a76:	20 81       	ld	r18, Z
     a78:	2f 7d       	andi	r18, 0xDF	; 223
     a7a:	fc 01       	movw	r30, r24
     a7c:	20 83       	st	Z, r18
	}
}
     a7e:	0f 90       	pop	r0
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	ff 91       	pop	r31
     a86:	ef 91       	pop	r30
     a88:	9f 91       	pop	r25
     a8a:	8f 91       	pop	r24
     a8c:	3f 91       	pop	r19
     a8e:	2f 91       	pop	r18
     a90:	0f 90       	pop	r0
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	0f 90       	pop	r0
     a96:	1f 90       	pop	r1
     a98:	18 95       	reti

00000a9a <serial_read>:

uint8_t serial_read()
{
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	0f 92       	push	r0
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
	if (rx_buffer_head == rx_buffer_tail) {
     aa4:	90 91 03 01 	lds	r25, 0x0103
     aa8:	80 91 04 01 	lds	r24, 0x0104
     aac:	98 17       	cp	r25, r24
     aae:	11 f4       	brne	.+4      	; 0xab4 <serial_read+0x1a>
		return SERIAL_NO_DATA;
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	0f c0       	rjmp	.+30     	; 0xad2 <serial_read+0x38>
	} else {
		uint8_t data = rx_buffer[rx_buffer_tail];
     ab4:	80 91 04 01 	lds	r24, 0x0104
     ab8:	88 2f       	mov	r24, r24
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	84 52       	subi	r24, 0x24	; 36
     abe:	9e 4f       	sbci	r25, 0xFE	; 254
     ac0:	fc 01       	movw	r30, r24
     ac2:	80 81       	ld	r24, Z
     ac4:	89 83       	std	Y+1, r24	; 0x01
		rx_buffer_tail++;
     ac6:	80 91 04 01 	lds	r24, 0x0104
     aca:	8f 5f       	subi	r24, 0xFF	; 255
     acc:	80 93 04 01 	sts	0x0104, r24
		if (rx_buffer_tail == RX_BUFFER_SIZE) { rx_buffer_tail = 0; }
		return data;
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
     ad2:	0f 90       	pop	r0
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret

00000ada <__vector_18>:

ISR(USART_RX_vect)
{
     ada:	1f 92       	push	r1
     adc:	0f 92       	push	r0
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	0f 92       	push	r0
     ae2:	11 24       	eor	r1, r1
     ae4:	2f 93       	push	r18
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	ef 93       	push	r30
     aec:	ff 93       	push	r31
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <__vector_18+0x1a>
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = UDR0;
     af8:	86 ec       	ldi	r24, 0xC6	; 198
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	fc 01       	movw	r30, r24
     afe:	80 81       	ld	r24, Z
     b00:	89 83       	std	Y+1, r24	; 0x01
	uint8_t next_head = rx_buffer_head + 1;
     b02:	80 91 03 01 	lds	r24, 0x0103
     b06:	8f 5f       	subi	r24, 0xFF	; 255
     b08:	8a 83       	std	Y+2, r24	; 0x02
	
	if (next_head == RX_BUFFER_SIZE) { 
		next_head = 0;
	}
	if (next_head != rx_buffer_tail) {      // Write data to buffer unless it is full.
     b0a:	80 91 04 01 	lds	r24, 0x0104
     b0e:	9a 81       	ldd	r25, Y+2	; 0x02
     b10:	98 17       	cp	r25, r24
     b12:	61 f0       	breq	.+24     	; 0xb2c <__vector_18+0x52>
		rx_buffer[rx_buffer_head] = data;
     b14:	80 91 03 01 	lds	r24, 0x0103
     b18:	88 2f       	mov	r24, r24
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	84 52       	subi	r24, 0x24	; 36
     b1e:	9e 4f       	sbci	r25, 0xFE	; 254
     b20:	29 81       	ldd	r18, Y+1	; 0x01
     b22:	fc 01       	movw	r30, r24
     b24:	20 83       	st	Z, r18
		rx_buffer_head = next_head;    
     b26:	8a 81       	ldd	r24, Y+2	; 0x02
     b28:	80 93 03 01 	sts	0x0103, r24
	}
}
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	ff 91       	pop	r31
     b36:	ef 91       	pop	r30
     b38:	9f 91       	pop	r25
     b3a:	8f 91       	pop	r24
     b3c:	2f 91       	pop	r18
     b3e:	0f 90       	pop	r0
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	0f 90       	pop	r0
     b44:	1f 90       	pop	r1
     b46:	18 95       	reti

00000b48 <serial_reset_read_buffer>:

void serial_reset_read_buffer() 
{
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
  rx_buffer_tail = rx_buffer_head;
     b50:	80 91 03 01 	lds	r24, 0x0103
     b54:	80 93 04 01 	sts	0x0104, r24
}
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	08 95       	ret

00000b5e <main>:
 *
 *	Device and Kinen initialization
 *	Main loop handler
 */
int main(void)
{
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	cli();						// initializations
     b66:	f8 94       	cli
	kinen_init();				// do this first
     b68:	0e 94 a3 00 	call	0x146	; 0x146 <kinen_init>
	device_init();				// handles all the low-level device peripheral inits
     b6c:	0e 94 cc 05 	call	0xb98	; 0xb98 <device_init>
	serial_init(BAUD_RATE);
     b70:	60 e8       	ldi	r22, 0x80	; 128
     b72:	75 e2       	ldi	r23, 0x25	; 37
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 af 04 	call	0x95e	; 0x95e <serial_init>
	heater_init();				// setup the heater module and subordinate functions
     b7c:	0e 94 f6 05 	call	0xbec	; 0xbec <heater_init>
	sei(); 						// enable interrupts
     b80:	78 94       	sei

	UNIT_TESTS;					// uncomment __UNIT_TEST_TC to enable unit tests

	heater_on(140);				// turn heater on for testing
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	8c e0       	ldi	r24, 0x0C	; 12
     b88:	93 e4       	ldi	r25, 0x43	; 67
     b8a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <heater_on>
	rpt_initialized();			// send initalization string
     b8e:	0e 94 b1 03 	call	0x762	; 0x762 <rpt_initialized>

	while (true) {				// go to the controller loop and never return
		_controller();
     b92:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <_controller>
	}
     b96:	fd cf       	rjmp	.-6      	; 0xb92 <main+0x34>

00000b98 <device_init>:

/*
 * Device Init 
 */
void device_init(void)
{
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	DDRB = PORTB_DIR;			// initialize all ports for proper IO function
     ba0:	84 e2       	ldi	r24, 0x24	; 36
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	20 e1       	ldi	r18, 0x10	; 16
     ba6:	fc 01       	movw	r30, r24
     ba8:	20 83       	st	Z, r18
	DDRC = PORTC_DIR;
     baa:	87 e2       	ldi	r24, 0x27	; 39
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	fc 01       	movw	r30, r24
     bb0:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
     bb2:	8a e2       	ldi	r24, 0x2A	; 42
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	2c e0       	ldi	r18, 0x0C	; 12
     bb8:	fc 01       	movw	r30, r24
     bba:	20 83       	st	Z, r18

	adc_init();
     bbc:	0e 94 3e 0c 	call	0x187c	; 0x187c <adc_init>
	pwm_init();
     bc0:	0e 94 8e 0c 	call	0x191c	; 0x191c <pwm_init>
	tick_init();
     bc4:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <tick_init>
	led_off();					// put off the red light [~Sting, 1978]
     bc8:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <led_off>
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <_controller>:
 *	start of the list. For any other status code exceution continues down the list
 */

#define	DISPATCH(func) if (func == SC_EAGAIN) return; 
static void _controller()
{
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
	DISPATCH(kinen_callback());		// intercept low-level communication events
     bda:	0e 94 ac 00 	call	0x158	; 0x158 <kinen_callback>
     bde:	82 30       	cpi	r24, 0x02	; 2
     be0:	11 f0       	breq	.+4      	; 0xbe6 <_controller+0x14>
	DISPATCH(tick_callback());		// regular interval timer clock handler (ticks)
     be2:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <tick_callback>
}
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	08 95       	ret

00000bec <heater_init>:
 * heater_off()	 - turn heater off	
 * heater_callback() - 100ms timed loop for heater control
 */

void heater_init()
{ 
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
	// initialize heater, start PID and PWM
	// note: PWM and ADC are initialized as part of the device init
	memset(&heater, 0, sizeof(Heater));
     bf4:	21 e2       	ldi	r18, 0x21	; 33
     bf6:	88 e1       	ldi	r24, 0x18	; 24
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	fc 01       	movw	r30, r24
     bfc:	32 2f       	mov	r19, r18
     bfe:	11 92       	st	Z+, r1
     c00:	3a 95       	dec	r19
     c02:	e9 f7       	brne	.-6      	; 0xbfe <heater_init+0x12>
	heater.ambient_timeout = HEATER_AMBIENT_TIMEOUT;
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	a4 eb       	ldi	r26, 0xB4	; 180
     c0a:	b2 e4       	ldi	r27, 0x42	; 66
     c0c:	80 93 29 01 	sts	0x0129, r24
     c10:	90 93 2a 01 	sts	0x012A, r25
     c14:	a0 93 2b 01 	sts	0x012B, r26
     c18:	b0 93 2c 01 	sts	0x012C, r27
	heater.regulation_timeout = HEATER_REGULATION_TIMEOUT;
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a6 e9       	ldi	r26, 0x96	; 150
     c22:	b3 e4       	ldi	r27, 0x43	; 67
     c24:	80 93 2d 01 	sts	0x012D, r24
     c28:	90 93 2e 01 	sts	0x012E, r25
     c2c:	a0 93 2f 01 	sts	0x012F, r26
     c30:	b0 93 30 01 	sts	0x0130, r27
	heater.ambient_temperature = HEATER_AMBIENT_TEMPERATURE;
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	a0 e2       	ldi	r26, 0x20	; 32
     c3a:	b2 e4       	ldi	r27, 0x42	; 66
     c3c:	80 93 31 01 	sts	0x0131, r24
     c40:	90 93 32 01 	sts	0x0132, r25
     c44:	a0 93 33 01 	sts	0x0133, r26
     c48:	b0 93 34 01 	sts	0x0134, r27
	heater.overheat_temperature = HEATER_OVERHEAT_TEMPERATURE;
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	a6 e9       	ldi	r26, 0x96	; 150
     c52:	b3 e4       	ldi	r27, 0x43	; 67
     c54:	80 93 35 01 	sts	0x0135, r24
     c58:	90 93 36 01 	sts	0x0136, r25
     c5c:	a0 93 37 01 	sts	0x0137, r26
     c60:	b0 93 38 01 	sts	0x0138, r27
	heater.bad_reading_count = HEATER_BAD_READING_COUNT;
     c64:	8a e0       	ldi	r24, 0x0A	; 10
     c66:	80 93 1b 01 	sts	0x011B, r24
	heater.regulation_count = HEATER_REGULATION_COUNT;
     c6a:	8a e0       	ldi	r24, 0x0A	; 10
     c6c:	80 93 1c 01 	sts	0x011C, r24
	sensor_init();					// setup the temperature sensor module
     c70:	0e 94 18 0a 	call	0x1430	; 0x1430 <sensor_init>
	pid_init();
     c74:	0e 94 bf 07 	call	0xf7e	; 0xf7e <pid_init>
}
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <heater_on>:

void heater_on(double setpoint)
{
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	00 d0       	rcall	.+0      	; 0xc84 <heater_on+0x6>
     c84:	00 d0       	rcall	.+0      	; 0xc86 <heater_on+0x8>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	69 83       	std	Y+1, r22	; 0x01
     c8c:	7a 83       	std	Y+2, r23	; 0x02
     c8e:	8b 83       	std	Y+3, r24	; 0x03
     c90:	9c 83       	std	Y+4, r25	; 0x04
	// no action if heater is already on
	if ((heater.state == HEATER_HEATING) || (heater.state == HEATER_REGULATED)) {
     c92:	80 91 18 01 	lds	r24, 0x0118
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	19 f1       	breq	.+70     	; 0xce0 <heater_on+0x62>
     c9a:	80 91 18 01 	lds	r24, 0x0118
     c9e:	83 30       	cpi	r24, 0x03	; 3
     ca0:	f9 f0       	breq	.+62     	; 0xce0 <heater_on+0x62>
		return;
	}
	// turn on lower level functions
	sensor_on();					// enable the sensor
     ca2:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <sensor_on>
	sensor_start_reading();			// now start a reading
     ca6:	0e 94 76 0a 	call	0x14ec	; 0x14ec <sensor_start_reading>
	pid_reset();
     caa:	0e 94 17 08 	call	0x102e	; 0x102e <pid_reset>
	pwm_on(PWM_FREQUENCY, 0);		// duty cycle will be set by PID loop
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	8a e7       	ldi	r24, 0x7A	; 122
     cb4:	94 e4       	ldi	r25, 0x44	; 68
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	a9 01       	movw	r20, r18
     cbc:	0e 94 c8 0c 	call	0x1990	; 0x1990 <pwm_on>
	heater.setpoint = setpoint;
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	9a 81       	ldd	r25, Y+2	; 0x02
     cc4:	ab 81       	ldd	r26, Y+3	; 0x03
     cc6:	bc 81       	ldd	r27, Y+4	; 0x04
     cc8:	80 93 21 01 	sts	0x0121, r24
     ccc:	90 93 22 01 	sts	0x0122, r25
     cd0:	a0 93 23 01 	sts	0x0123, r26
     cd4:	b0 93 24 01 	sts	0x0124, r27
	heater.state = HEATER_HEATING;
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	80 93 18 01 	sts	0x0118, r24
     cde:	01 c0       	rjmp	.+2      	; 0xce2 <heater_on+0x64>

void heater_on(double setpoint)
{
	// no action if heater is already on
	if ((heater.state == HEATER_HEATING) || (heater.state == HEATER_REGULATED)) {
		return;
     ce0:	00 00       	nop
	sensor_start_reading();			// now start a reading
	pid_reset();
	pwm_on(PWM_FREQUENCY, 0);		// duty cycle will be set by PID loop
	heater.setpoint = setpoint;
	heater.state = HEATER_HEATING;
}
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	08 95       	ret

00000cf0 <heater_off>:

void heater_off(uint8_t state, uint8_t code) 
{
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <heater_off+0x6>
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	89 83       	std	Y+1, r24	; 0x01
     cfc:	6a 83       	std	Y+2, r22	; 0x02
	pwm_off();						// stop sending current to the heater
     cfe:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <pwm_off>
	sensor_off();					// stop taking readings
     d02:	0e 94 6d 0a 	call	0x14da	; 0x14da <sensor_off>
	heater.state = state;
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	80 93 18 01 	sts	0x0118, r24
	heater.code = code;
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	80 93 19 01 	sts	0x0119, r24
	led_off();
     d12:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <led_off>
}
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <heater_callback>:

void heater_callback()
{
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	00 d0       	rcall	.+0      	; 0xd28 <heater_callback+0x8>
     d28:	00 d0       	rcall	.+0      	; 0xd2a <heater_callback+0xa>
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
	// catch the no-op cases
	if ((heater.state == HEATER_OFF) || (heater.state == HEATER_SHUTDOWN)) { return;}
     d2e:	80 91 18 01 	lds	r24, 0x0118
     d32:	88 23       	and	r24, r24
     d34:	09 f4       	brne	.+2      	; 0xd38 <heater_callback+0x18>
     d36:	18 c1       	rjmp	.+560    	; 0xf68 <heater_callback+0x248>
     d38:	80 91 18 01 	lds	r24, 0x0118
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	09 f4       	brne	.+2      	; 0xd42 <heater_callback+0x22>
     d40:	13 c1       	rjmp	.+550    	; 0xf68 <heater_callback+0x248>

	rpt_readout();
     d42:	0e 94 bc 03 	call	0x778	; 0x778 <rpt_readout>

	// get current temp or an error if there is no temperature reading
	if ((heater.temperature = sensor_get_temperature()) < ABSOLUTE_ZERO) {
     d46:	0e 94 94 0a 	call	0x1528	; 0x1528 <sensor_get_temperature>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	80 93 1d 01 	sts	0x011D, r24
     d52:	90 93 1e 01 	sts	0x011E, r25
     d56:	a0 93 1f 01 	sts	0x011F, r26
     d5a:	b0 93 20 01 	sts	0x0120, r27
     d5e:	80 91 1d 01 	lds	r24, 0x011D
     d62:	90 91 1e 01 	lds	r25, 0x011E
     d66:	a0 91 1f 01 	lds	r26, 0x011F
     d6a:	b0 91 20 01 	lds	r27, 0x0120
     d6e:	11 e0       	ldi	r17, 0x01	; 1
     d70:	bc 01       	movw	r22, r24
     d72:	cd 01       	movw	r24, r26
     d74:	23 e3       	ldi	r18, 0x33	; 51
     d76:	33 e9       	ldi	r19, 0x93	; 147
     d78:	48 e8       	ldi	r20, 0x88	; 136
     d7a:	53 ec       	ldi	r21, 0xC3	; 195
     d7c:	0e 94 4c 10 	call	0x2098	; 0x2098 <__cmpsf2>
     d80:	88 23       	and	r24, r24
     d82:	0c f0       	brlt	.+2      	; 0xd86 <heater_callback+0x66>
     d84:	10 e0       	ldi	r17, 0x00	; 0
     d86:	11 23       	and	r17, r17
     d88:	09 f0       	breq	.+2      	; 0xd8c <heater_callback+0x6c>
     d8a:	f0 c0       	rjmp	.+480    	; 0xf6c <heater_callback+0x24c>
		return;
	}
	if (heater.temperature > heater.overheat_temperature) {
     d8c:	80 91 1d 01 	lds	r24, 0x011D
     d90:	90 91 1e 01 	lds	r25, 0x011E
     d94:	a0 91 1f 01 	lds	r26, 0x011F
     d98:	b0 91 20 01 	lds	r27, 0x0120
     d9c:	20 91 35 01 	lds	r18, 0x0135
     da0:	30 91 36 01 	lds	r19, 0x0136
     da4:	40 91 37 01 	lds	r20, 0x0137
     da8:	50 91 38 01 	lds	r21, 0x0138
     dac:	11 e0       	ldi	r17, 0x01	; 1
     dae:	bc 01       	movw	r22, r24
     db0:	cd 01       	movw	r24, r26
     db2:	0e 94 9b 11 	call	0x2336	; 0x2336 <__gesf2>
     db6:	18 16       	cp	r1, r24
     db8:	0c f0       	brlt	.+2      	; 0xdbc <heater_callback+0x9c>
     dba:	10 e0       	ldi	r17, 0x00	; 0
     dbc:	11 23       	and	r17, r17
     dbe:	29 f0       	breq	.+10     	; 0xdca <heater_callback+0xaa>
		heater_off(HEATER_SHUTDOWN, HEATER_OVERHEATED);
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	63 e0       	ldi	r22, 0x03	; 3
     dc4:	0e 94 78 06 	call	0xcf0	; 0xcf0 <heater_off>
		return;
     dc8:	d2 c0       	rjmp	.+420    	; 0xf6e <heater_callback+0x24e>
	}
	sensor_start_reading();		// start next reading
     dca:	0e 94 76 0a 	call	0x14ec	; 0x14ec <sensor_start_reading>

	// calculate the next PWM level via the PID
	double duty_cycle = pid_calculate(heater.setpoint, heater.temperature);
     dce:	80 91 21 01 	lds	r24, 0x0121
     dd2:	90 91 22 01 	lds	r25, 0x0122
     dd6:	a0 91 23 01 	lds	r26, 0x0123
     dda:	b0 91 24 01 	lds	r27, 0x0124
     dde:	20 91 1d 01 	lds	r18, 0x011D
     de2:	30 91 1e 01 	lds	r19, 0x011E
     de6:	40 91 1f 01 	lds	r20, 0x011F
     dea:	50 91 20 01 	lds	r21, 0x0120
     dee:	bc 01       	movw	r22, r24
     df0:	cd 01       	movw	r24, r26
     df2:	0e 94 3f 08 	call	0x107e	; 0x107e <pid_calculate>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	ab 83       	std	Y+3, r26	; 0x03
     e00:	bc 83       	std	Y+4, r27	; 0x04
	pwm_set_duty(duty_cycle);
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	9a 81       	ldd	r25, Y+2	; 0x02
     e06:	ab 81       	ldd	r26, Y+3	; 0x03
     e08:	bc 81       	ldd	r27, Y+4	; 0x04
     e0a:	bc 01       	movw	r22, r24
     e0c:	cd 01       	movw	r24, r26
     e0e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <pwm_set_duty>


	// handle HEATER exceptions
	if (heater.state == HEATER_HEATING) {
     e12:	80 91 18 01 	lds	r24, 0x0118
     e16:	82 30       	cpi	r24, 0x02	; 2
     e18:	09 f0       	breq	.+2      	; 0xe1c <heater_callback+0xfc>
     e1a:	8c c0       	rjmp	.+280    	; 0xf34 <heater_callback+0x214>
		heater.regulation_timer += HEATER_TICK_SECONDS;
     e1c:	80 91 25 01 	lds	r24, 0x0125
     e20:	90 91 26 01 	lds	r25, 0x0126
     e24:	a0 91 27 01 	lds	r26, 0x0127
     e28:	b0 91 28 01 	lds	r27, 0x0128
     e2c:	bc 01       	movw	r22, r24
     e2e:	cd 01       	movw	r24, r26
     e30:	2d ec       	ldi	r18, 0xCD	; 205
     e32:	3c ec       	ldi	r19, 0xCC	; 204
     e34:	4c ec       	ldi	r20, 0xCC	; 204
     e36:	5d e3       	ldi	r21, 0x3D	; 61
     e38:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__addsf3>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	80 93 25 01 	sts	0x0125, r24
     e44:	90 93 26 01 	sts	0x0126, r25
     e48:	a0 93 27 01 	sts	0x0127, r26
     e4c:	b0 93 28 01 	sts	0x0128, r27

		if ((heater.temperature < heater.ambient_temperature) &&
     e50:	80 91 1d 01 	lds	r24, 0x011D
     e54:	90 91 1e 01 	lds	r25, 0x011E
     e58:	a0 91 1f 01 	lds	r26, 0x011F
     e5c:	b0 91 20 01 	lds	r27, 0x0120
     e60:	20 91 31 01 	lds	r18, 0x0131
     e64:	30 91 32 01 	lds	r19, 0x0132
     e68:	40 91 33 01 	lds	r20, 0x0133
     e6c:	50 91 34 01 	lds	r21, 0x0134
     e70:	11 e0       	ldi	r17, 0x01	; 1
     e72:	bc 01       	movw	r22, r24
     e74:	cd 01       	movw	r24, r26
     e76:	0e 94 4c 10 	call	0x2098	; 0x2098 <__cmpsf2>
     e7a:	88 23       	and	r24, r24
     e7c:	0c f0       	brlt	.+2      	; 0xe80 <heater_callback+0x160>
     e7e:	10 e0       	ldi	r17, 0x00	; 0
     e80:	11 23       	and	r17, r17
     e82:	f9 f0       	breq	.+62     	; 0xec2 <heater_callback+0x1a2>
			(heater.regulation_timer > heater.ambient_timeout)) {
     e84:	80 91 25 01 	lds	r24, 0x0125
     e88:	90 91 26 01 	lds	r25, 0x0126
     e8c:	a0 91 27 01 	lds	r26, 0x0127
     e90:	b0 91 28 01 	lds	r27, 0x0128
     e94:	20 91 29 01 	lds	r18, 0x0129
     e98:	30 91 2a 01 	lds	r19, 0x012A
     e9c:	40 91 2b 01 	lds	r20, 0x012B
     ea0:	50 91 2c 01 	lds	r21, 0x012C
     ea4:	11 e0       	ldi	r17, 0x01	; 1
     ea6:	bc 01       	movw	r22, r24
     ea8:	cd 01       	movw	r24, r26
     eaa:	0e 94 9b 11 	call	0x2336	; 0x2336 <__gesf2>
     eae:	18 16       	cp	r1, r24
     eb0:	0c f0       	brlt	.+2      	; 0xeb4 <heater_callback+0x194>
     eb2:	10 e0       	ldi	r17, 0x00	; 0

	// handle HEATER exceptions
	if (heater.state == HEATER_HEATING) {
		heater.regulation_timer += HEATER_TICK_SECONDS;

		if ((heater.temperature < heater.ambient_temperature) &&
     eb4:	11 23       	and	r17, r17
     eb6:	29 f0       	breq	.+10     	; 0xec2 <heater_callback+0x1a2>
			(heater.regulation_timer > heater.ambient_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_AMBIENT_TIMED_OUT);
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	61 e0       	ldi	r22, 0x01	; 1
     ebc:	0e 94 78 06 	call	0xcf0	; 0xcf0 <heater_off>
			return;
     ec0:	56 c0       	rjmp	.+172    	; 0xf6e <heater_callback+0x24e>
		}
		if ((heater.temperature < heater.setpoint) &&
     ec2:	80 91 1d 01 	lds	r24, 0x011D
     ec6:	90 91 1e 01 	lds	r25, 0x011E
     eca:	a0 91 1f 01 	lds	r26, 0x011F
     ece:	b0 91 20 01 	lds	r27, 0x0120
     ed2:	20 91 21 01 	lds	r18, 0x0121
     ed6:	30 91 22 01 	lds	r19, 0x0122
     eda:	40 91 23 01 	lds	r20, 0x0123
     ede:	50 91 24 01 	lds	r21, 0x0124
     ee2:	11 e0       	ldi	r17, 0x01	; 1
     ee4:	bc 01       	movw	r22, r24
     ee6:	cd 01       	movw	r24, r26
     ee8:	0e 94 4c 10 	call	0x2098	; 0x2098 <__cmpsf2>
     eec:	88 23       	and	r24, r24
     eee:	0c f0       	brlt	.+2      	; 0xef2 <heater_callback+0x1d2>
     ef0:	10 e0       	ldi	r17, 0x00	; 0
     ef2:	11 23       	and	r17, r17
     ef4:	f9 f0       	breq	.+62     	; 0xf34 <heater_callback+0x214>
			(heater.regulation_timer > heater.regulation_timeout)) {
     ef6:	80 91 25 01 	lds	r24, 0x0125
     efa:	90 91 26 01 	lds	r25, 0x0126
     efe:	a0 91 27 01 	lds	r26, 0x0127
     f02:	b0 91 28 01 	lds	r27, 0x0128
     f06:	20 91 2d 01 	lds	r18, 0x012D
     f0a:	30 91 2e 01 	lds	r19, 0x012E
     f0e:	40 91 2f 01 	lds	r20, 0x012F
     f12:	50 91 30 01 	lds	r21, 0x0130
     f16:	11 e0       	ldi	r17, 0x01	; 1
     f18:	bc 01       	movw	r22, r24
     f1a:	cd 01       	movw	r24, r26
     f1c:	0e 94 9b 11 	call	0x2336	; 0x2336 <__gesf2>
     f20:	18 16       	cp	r1, r24
     f22:	0c f0       	brlt	.+2      	; 0xf26 <heater_callback+0x206>
     f24:	10 e0       	ldi	r17, 0x00	; 0
		if ((heater.temperature < heater.ambient_temperature) &&
			(heater.regulation_timer > heater.ambient_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_AMBIENT_TIMED_OUT);
			return;
		}
		if ((heater.temperature < heater.setpoint) &&
     f26:	11 23       	and	r17, r17
     f28:	29 f0       	breq	.+10     	; 0xf34 <heater_callback+0x214>
			(heater.regulation_timer > heater.regulation_timeout)) {
			heater_off(HEATER_SHUTDOWN, HEATER_REGULATION_TIMED_OUT);
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	62 e0       	ldi	r22, 0x02	; 2
     f2e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <heater_off>
			return;
     f32:	1d c0       	rjmp	.+58     	; 0xf6e <heater_callback+0x24e>
		}
	}
	// manage heater state and LED indicator
	if (heater.regulation_count > 0) {
     f34:	80 91 1c 01 	lds	r24, 0x011C
     f38:	88 23       	and	r24, r24
     f3a:	61 f0       	breq	.+24     	; 0xf54 <heater_callback+0x234>
		if (--heater.regulation_count <= 0) {
     f3c:	80 91 1c 01 	lds	r24, 0x011C
     f40:	81 50       	subi	r24, 0x01	; 1
     f42:	80 93 1c 01 	sts	0x011C, r24
     f46:	80 91 1c 01 	lds	r24, 0x011C
     f4a:	88 23       	and	r24, r24
     f4c:	19 f4       	brne	.+6      	; 0xf54 <heater_callback+0x234>
			heater.state = HEATER_REGULATED;
     f4e:	83 e0       	ldi	r24, 0x03	; 3
     f50:	80 93 18 01 	sts	0x0118, r24
		}
	}
	if (heater.state == HEATER_REGULATED) {
     f54:	80 91 18 01 	lds	r24, 0x0118
     f58:	83 30       	cpi	r24, 0x03	; 3
     f5a:	19 f4       	brne	.+6      	; 0xf62 <heater_callback+0x242>
		led_on();
     f5c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <led_on>
     f60:	06 c0       	rjmp	.+12     	; 0xf6e <heater_callback+0x24e>
	} else {
		led_toggle();
     f62:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <led_toggle>
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <heater_callback+0x24e>
}

void heater_callback()
{
	// catch the no-op cases
	if ((heater.state == HEATER_OFF) || (heater.state == HEATER_SHUTDOWN)) { return;}
     f68:	00 00       	nop
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <heater_callback+0x24e>

	rpt_readout();

	// get current temp or an error if there is no temperature reading
	if ((heater.temperature = sensor_get_temperature()) < ABSOLUTE_ZERO) {
		return;
     f6c:	00 00       	nop
	if (heater.state == HEATER_REGULATED) {
		led_on();
	} else {
		led_toggle();
	}
}
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	08 95       	ret

00000f7e <pid_init>:
 * pid_reset() - reset PID values to cold start
 * pid_calc() - derived from: http://www.embeddedheaven.com/pid-control-algorithm-c-language.htm
 */

void pid_init() 
{
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
	memset(&pid, 0, sizeof(struct PIDstruct));
     f86:	26 e3       	ldi	r18, 0x36	; 54
     f88:	89 e3       	ldi	r24, 0x39	; 57
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	fc 01       	movw	r30, r24
     f8e:	32 2f       	mov	r19, r18
     f90:	11 92       	st	Z+, r1
     f92:	3a 95       	dec	r19
     f94:	e9 f7       	brne	.-6      	; 0xf90 <pid_init+0x12>
	pid.dt = PID_DT;
     f96:	8d ec       	ldi	r24, 0xCD	; 205
     f98:	9c ec       	ldi	r25, 0xCC	; 204
     f9a:	ac ec       	ldi	r26, 0xCC	; 204
     f9c:	bd e3       	ldi	r27, 0x3D	; 61
     f9e:	80 93 57 01 	sts	0x0157, r24
     fa2:	90 93 58 01 	sts	0x0158, r25
     fa6:	a0 93 59 01 	sts	0x0159, r26
     faa:	b0 93 5a 01 	sts	0x015A, r27
	pid.Kp = PID_Kp;
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a0 e8       	ldi	r26, 0x80	; 128
     fb4:	b0 e4       	ldi	r27, 0x40	; 64
     fb6:	80 93 5b 01 	sts	0x015B, r24
     fba:	90 93 5c 01 	sts	0x015C, r25
     fbe:	a0 93 5d 01 	sts	0x015D, r26
     fc2:	b0 93 5e 01 	sts	0x015E, r27
	pid.Ki = PID_Ki;
     fc6:	8d ec       	ldi	r24, 0xCD	; 205
     fc8:	9c ec       	ldi	r25, 0xCC	; 204
     fca:	ac ec       	ldi	r26, 0xCC	; 204
     fcc:	bd e3       	ldi	r27, 0x3D	; 61
     fce:	80 93 5f 01 	sts	0x015F, r24
     fd2:	90 93 60 01 	sts	0x0160, r25
     fd6:	a0 93 61 01 	sts	0x0161, r26
     fda:	b0 93 62 01 	sts	0x0162, r27
	pid.Kd = PID_Kd;
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	dc 01       	movw	r26, r24
     fe4:	80 93 63 01 	sts	0x0163, r24
     fe8:	90 93 64 01 	sts	0x0164, r25
     fec:	a0 93 65 01 	sts	0x0165, r26
     ff0:	b0 93 66 01 	sts	0x0166, r27
	pid.output_max = PID_MAX_OUTPUT;		// saturation filter max value
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a8 ec       	ldi	r26, 0xC8	; 200
     ffa:	b2 e4       	ldi	r27, 0x42	; 66
     ffc:	80 93 3f 01 	sts	0x013F, r24
    1000:	90 93 40 01 	sts	0x0140, r25
    1004:	a0 93 41 01 	sts	0x0141, r26
    1008:	b0 93 42 01 	sts	0x0142, r27
	pid.output_min = PID_MIN_OUTPUT;		// saturation filter min value
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	dc 01       	movw	r26, r24
    1012:	80 93 43 01 	sts	0x0143, r24
    1016:	90 93 44 01 	sts	0x0144, r25
    101a:	a0 93 45 01 	sts	0x0145, r26
    101e:	b0 93 46 01 	sts	0x0146, r27
	pid.state = PID_ON;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	80 93 39 01 	sts	0x0139, r24
}
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <pid_reset>:

void pid_reset()
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
	pid.output = 0;
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	dc 01       	movw	r26, r24
    103c:	80 93 3b 01 	sts	0x013B, r24
    1040:	90 93 3c 01 	sts	0x013C, r25
    1044:	a0 93 3d 01 	sts	0x013D, r26
    1048:	b0 93 3e 01 	sts	0x013E, r27
	pid.integral = 0;
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	dc 01       	movw	r26, r24
    1052:	80 93 4f 01 	sts	0x014F, r24
    1056:	90 93 50 01 	sts	0x0150, r25
    105a:	a0 93 51 01 	sts	0x0151, r26
    105e:	b0 93 52 01 	sts	0x0152, r27
	pid.prev_error = 0;
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	dc 01       	movw	r26, r24
    1068:	80 93 4b 01 	sts	0x014B, r24
    106c:	90 93 4c 01 	sts	0x014C, r25
    1070:	a0 93 4d 01 	sts	0x014D, r26
    1074:	b0 93 4e 01 	sts	0x014E, r27
}
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <pid_calculate>:

double pid_calculate(double setpoint,double temperature)
{
    107e:	df 92       	push	r13
    1080:	ef 92       	push	r14
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	28 97       	sbiw	r28, 0x08	; 8
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	69 83       	std	Y+1, r22	; 0x01
    109e:	7a 83       	std	Y+2, r23	; 0x02
    10a0:	8b 83       	std	Y+3, r24	; 0x03
    10a2:	9c 83       	std	Y+4, r25	; 0x04
    10a4:	2d 83       	std	Y+5, r18	; 0x05
    10a6:	3e 83       	std	Y+6, r19	; 0x06
    10a8:	4f 83       	std	Y+7, r20	; 0x07
    10aa:	58 87       	std	Y+8, r21	; 0x08
	if (pid.state == PID_OFF) { return (0);}
    10ac:	80 91 39 01 	lds	r24, 0x0139
    10b0:	88 23       	and	r24, r24
    10b2:	21 f4       	brne	.+8      	; 0x10bc <pid_calculate+0x3e>
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	dc 01       	movw	r26, r24
    10ba:	aa c1       	rjmp	.+852    	; 0x1410 <pid_calculate+0x392>

	pid.setpoint = setpoint;		// ++++ test
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	9a 81       	ldd	r25, Y+2	; 0x02
    10c0:	ab 81       	ldd	r26, Y+3	; 0x03
    10c2:	bc 81       	ldd	r27, Y+4	; 0x04
    10c4:	80 93 6b 01 	sts	0x016B, r24
    10c8:	90 93 6c 01 	sts	0x016C, r25
    10cc:	a0 93 6d 01 	sts	0x016D, r26
    10d0:	b0 93 6e 01 	sts	0x016E, r27
	pid.temperature = temperature;	// ++++ test
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	9e 81       	ldd	r25, Y+6	; 0x06
    10d8:	af 81       	ldd	r26, Y+7	; 0x07
    10da:	b8 85       	ldd	r27, Y+8	; 0x08
    10dc:	80 93 67 01 	sts	0x0167, r24
    10e0:	90 93 68 01 	sts	0x0168, r25
    10e4:	a0 93 69 01 	sts	0x0169, r26
    10e8:	b0 93 6a 01 	sts	0x016A, r27

	pid.error = setpoint - temperature;		// current error term
    10ec:	69 81       	ldd	r22, Y+1	; 0x01
    10ee:	7a 81       	ldd	r23, Y+2	; 0x02
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	2d 81       	ldd	r18, Y+5	; 0x05
    10f6:	3e 81       	ldd	r19, Y+6	; 0x06
    10f8:	4f 81       	ldd	r20, Y+7	; 0x07
    10fa:	58 85       	ldd	r21, Y+8	; 0x08
    10fc:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__subsf3>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	80 93 47 01 	sts	0x0147, r24
    1108:	90 93 48 01 	sts	0x0148, r25
    110c:	a0 93 49 01 	sts	0x0149, r26
    1110:	b0 93 4a 01 	sts	0x014A, r27

//	if (fabs(pid.error) > PID_EPSILON) {	// stop integration if error term is too small
	if ((fabs(pid.error) > PID_EPSILON) ||	// stop integration if error term is too small
    1114:	80 91 47 01 	lds	r24, 0x0147
    1118:	90 91 48 01 	lds	r25, 0x0148
    111c:	a0 91 49 01 	lds	r26, 0x0149
    1120:	b0 91 4a 01 	lds	r27, 0x014A
    1124:	bf 77       	andi	r27, 0x7F	; 127
    1126:	11 e0       	ldi	r17, 0x01	; 1
    1128:	bc 01       	movw	r22, r24
    112a:	cd 01       	movw	r24, r26
    112c:	2a e0       	ldi	r18, 0x0A	; 10
    112e:	37 ed       	ldi	r19, 0xD7	; 215
    1130:	43 e2       	ldi	r20, 0x23	; 35
    1132:	5c e3       	ldi	r21, 0x3C	; 60
    1134:	0e 94 9b 11 	call	0x2336	; 0x2336 <__gesf2>
    1138:	18 16       	cp	r1, r24
    113a:	0c f0       	brlt	.+2      	; 0x113e <pid_calculate+0xc0>
    113c:	10 e0       	ldi	r17, 0x00	; 0
    113e:	11 23       	and	r17, r17
    1140:	39 f5       	brne	.+78     	; 0x1190 <pid_calculate+0x112>
		(pid.output >= (pid.output_max - EPSILON))) {//...or output is too large (anti-windup)
    1142:	e0 90 3b 01 	lds	r14, 0x013B
    1146:	f0 90 3c 01 	lds	r15, 0x013C
    114a:	00 91 3d 01 	lds	r16, 0x013D
    114e:	10 91 3e 01 	lds	r17, 0x013E
    1152:	80 91 3f 01 	lds	r24, 0x013F
    1156:	90 91 40 01 	lds	r25, 0x0140
    115a:	a0 91 41 01 	lds	r26, 0x0141
    115e:	b0 91 42 01 	lds	r27, 0x0142
    1162:	bc 01       	movw	r22, r24
    1164:	cd 01       	movw	r24, r26
    1166:	2c ea       	ldi	r18, 0xAC	; 172
    1168:	35 ec       	ldi	r19, 0xC5	; 197
    116a:	47 e2       	ldi	r20, 0x27	; 39
    116c:	57 e3       	ldi	r21, 0x37	; 55
    116e:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__subsf3>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	9c 01       	movw	r18, r24
    1178:	ad 01       	movw	r20, r26
    117a:	dd 24       	eor	r13, r13
    117c:	d3 94       	inc	r13
    117e:	c8 01       	movw	r24, r16
    1180:	b7 01       	movw	r22, r14
    1182:	0e 94 9b 11 	call	0x2336	; 0x2336 <__gesf2>
    1186:	88 23       	and	r24, r24
    1188:	0c f4       	brge	.+2      	; 0x118c <pid_calculate+0x10e>
    118a:	dd 24       	eor	r13, r13
	pid.temperature = temperature;	// ++++ test

	pid.error = setpoint - temperature;		// current error term

//	if (fabs(pid.error) > PID_EPSILON) {	// stop integration if error term is too small
	if ((fabs(pid.error) > PID_EPSILON) ||	// stop integration if error term is too small
    118c:	dd 20       	and	r13, r13
    118e:	71 f1       	breq	.+92     	; 0x11ec <pid_calculate+0x16e>
		(pid.output >= (pid.output_max - EPSILON))) {//...or output is too large (anti-windup)
		pid.integral += (pid.error * pid.dt);
    1190:	e0 90 4f 01 	lds	r14, 0x014F
    1194:	f0 90 50 01 	lds	r15, 0x0150
    1198:	00 91 51 01 	lds	r16, 0x0151
    119c:	10 91 52 01 	lds	r17, 0x0152
    11a0:	80 91 47 01 	lds	r24, 0x0147
    11a4:	90 91 48 01 	lds	r25, 0x0148
    11a8:	a0 91 49 01 	lds	r26, 0x0149
    11ac:	b0 91 4a 01 	lds	r27, 0x014A
    11b0:	20 91 57 01 	lds	r18, 0x0157
    11b4:	30 91 58 01 	lds	r19, 0x0158
    11b8:	40 91 59 01 	lds	r20, 0x0159
    11bc:	50 91 5a 01 	lds	r21, 0x015A
    11c0:	bc 01       	movw	r22, r24
    11c2:	cd 01       	movw	r24, r26
    11c4:	0e 94 9f 11 	call	0x233e	; 0x233e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	9c 01       	movw	r18, r24
    11ce:	ad 01       	movw	r20, r26
    11d0:	c8 01       	movw	r24, r16
    11d2:	b7 01       	movw	r22, r14
    11d4:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__addsf3>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	80 93 4f 01 	sts	0x014F, r24
    11e0:	90 93 50 01 	sts	0x0150, r25
    11e4:	a0 93 51 01 	sts	0x0151, r26
    11e8:	b0 93 52 01 	sts	0x0152, r27
	}
	pid.derivative = (pid.error - pid.prev_error) / pid.dt;
    11ec:	80 91 47 01 	lds	r24, 0x0147
    11f0:	90 91 48 01 	lds	r25, 0x0148
    11f4:	a0 91 49 01 	lds	r26, 0x0149
    11f8:	b0 91 4a 01 	lds	r27, 0x014A
    11fc:	20 91 4b 01 	lds	r18, 0x014B
    1200:	30 91 4c 01 	lds	r19, 0x014C
    1204:	40 91 4d 01 	lds	r20, 0x014D
    1208:	50 91 4e 01 	lds	r21, 0x014E
    120c:	bc 01       	movw	r22, r24
    120e:	cd 01       	movw	r24, r26
    1210:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__subsf3>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	20 91 57 01 	lds	r18, 0x0157
    121c:	30 91 58 01 	lds	r19, 0x0158
    1220:	40 91 59 01 	lds	r20, 0x0159
    1224:	50 91 5a 01 	lds	r21, 0x015A
    1228:	bc 01       	movw	r22, r24
    122a:	cd 01       	movw	r24, r26
    122c:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__divsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	80 93 53 01 	sts	0x0153, r24
    1238:	90 93 54 01 	sts	0x0154, r25
    123c:	a0 93 55 01 	sts	0x0155, r26
    1240:	b0 93 56 01 	sts	0x0156, r27
	pid.output = pid.Kp * pid.error + pid.Ki * pid.integral + pid.Kd * pid.derivative;
    1244:	80 91 5b 01 	lds	r24, 0x015B
    1248:	90 91 5c 01 	lds	r25, 0x015C
    124c:	a0 91 5d 01 	lds	r26, 0x015D
    1250:	b0 91 5e 01 	lds	r27, 0x015E
    1254:	20 91 47 01 	lds	r18, 0x0147
    1258:	30 91 48 01 	lds	r19, 0x0148
    125c:	40 91 49 01 	lds	r20, 0x0149
    1260:	50 91 4a 01 	lds	r21, 0x014A
    1264:	bc 01       	movw	r22, r24
    1266:	cd 01       	movw	r24, r26
    1268:	0e 94 9f 11 	call	0x233e	; 0x233e <__mulsf3>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	7c 01       	movw	r14, r24
    1272:	8d 01       	movw	r16, r26
    1274:	80 91 5f 01 	lds	r24, 0x015F
    1278:	90 91 60 01 	lds	r25, 0x0160
    127c:	a0 91 61 01 	lds	r26, 0x0161
    1280:	b0 91 62 01 	lds	r27, 0x0162
    1284:	20 91 4f 01 	lds	r18, 0x014F
    1288:	30 91 50 01 	lds	r19, 0x0150
    128c:	40 91 51 01 	lds	r20, 0x0151
    1290:	50 91 52 01 	lds	r21, 0x0152
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	0e 94 9f 11 	call	0x233e	; 0x233e <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	9c 01       	movw	r18, r24
    12a2:	ad 01       	movw	r20, r26
    12a4:	c8 01       	movw	r24, r16
    12a6:	b7 01       	movw	r22, r14
    12a8:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__addsf3>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	7c 01       	movw	r14, r24
    12b2:	8d 01       	movw	r16, r26
    12b4:	80 91 63 01 	lds	r24, 0x0163
    12b8:	90 91 64 01 	lds	r25, 0x0164
    12bc:	a0 91 65 01 	lds	r26, 0x0165
    12c0:	b0 91 66 01 	lds	r27, 0x0166
    12c4:	20 91 53 01 	lds	r18, 0x0153
    12c8:	30 91 54 01 	lds	r19, 0x0154
    12cc:	40 91 55 01 	lds	r20, 0x0155
    12d0:	50 91 56 01 	lds	r21, 0x0156
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	0e 94 9f 11 	call	0x233e	; 0x233e <__mulsf3>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	9c 01       	movw	r18, r24
    12e2:	ad 01       	movw	r20, r26
    12e4:	c8 01       	movw	r24, r16
    12e6:	b7 01       	movw	r22, r14
    12e8:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__addsf3>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	80 93 3b 01 	sts	0x013B, r24
    12f4:	90 93 3c 01 	sts	0x013C, r25
    12f8:	a0 93 3d 01 	sts	0x013D, r26
    12fc:	b0 93 3e 01 	sts	0x013E, r27

	if(pid.output > pid.output_max) { 		// saturation filter
    1300:	80 91 3b 01 	lds	r24, 0x013B
    1304:	90 91 3c 01 	lds	r25, 0x013C
    1308:	a0 91 3d 01 	lds	r26, 0x013D
    130c:	b0 91 3e 01 	lds	r27, 0x013E
    1310:	20 91 3f 01 	lds	r18, 0x013F
    1314:	30 91 40 01 	lds	r19, 0x0140
    1318:	40 91 41 01 	lds	r20, 0x0141
    131c:	50 91 42 01 	lds	r21, 0x0142
    1320:	11 e0       	ldi	r17, 0x01	; 1
    1322:	bc 01       	movw	r22, r24
    1324:	cd 01       	movw	r24, r26
    1326:	0e 94 9b 11 	call	0x2336	; 0x2336 <__gesf2>
    132a:	18 16       	cp	r1, r24
    132c:	0c f0       	brlt	.+2      	; 0x1330 <pid_calculate+0x2b2>
    132e:	10 e0       	ldi	r17, 0x00	; 0
    1330:	11 23       	and	r17, r17
    1332:	89 f0       	breq	.+34     	; 0x1356 <pid_calculate+0x2d8>
		pid.output = pid.output_max;
    1334:	80 91 3f 01 	lds	r24, 0x013F
    1338:	90 91 40 01 	lds	r25, 0x0140
    133c:	a0 91 41 01 	lds	r26, 0x0141
    1340:	b0 91 42 01 	lds	r27, 0x0142
    1344:	80 93 3b 01 	sts	0x013B, r24
    1348:	90 93 3c 01 	sts	0x013C, r25
    134c:	a0 93 3d 01 	sts	0x013D, r26
    1350:	b0 93 3e 01 	sts	0x013E, r27
    1354:	2a c0       	rjmp	.+84     	; 0x13aa <pid_calculate+0x32c>
	} else if(pid.output < pid.output_min) {
    1356:	80 91 3b 01 	lds	r24, 0x013B
    135a:	90 91 3c 01 	lds	r25, 0x013C
    135e:	a0 91 3d 01 	lds	r26, 0x013D
    1362:	b0 91 3e 01 	lds	r27, 0x013E
    1366:	20 91 43 01 	lds	r18, 0x0143
    136a:	30 91 44 01 	lds	r19, 0x0144
    136e:	40 91 45 01 	lds	r20, 0x0145
    1372:	50 91 46 01 	lds	r21, 0x0146
    1376:	11 e0       	ldi	r17, 0x01	; 1
    1378:	bc 01       	movw	r22, r24
    137a:	cd 01       	movw	r24, r26
    137c:	0e 94 4c 10 	call	0x2098	; 0x2098 <__cmpsf2>
    1380:	88 23       	and	r24, r24
    1382:	0c f0       	brlt	.+2      	; 0x1386 <pid_calculate+0x308>
    1384:	10 e0       	ldi	r17, 0x00	; 0
    1386:	11 23       	and	r17, r17
    1388:	81 f0       	breq	.+32     	; 0x13aa <pid_calculate+0x32c>
		pid.output = pid.output_min;
    138a:	80 91 43 01 	lds	r24, 0x0143
    138e:	90 91 44 01 	lds	r25, 0x0144
    1392:	a0 91 45 01 	lds	r26, 0x0145
    1396:	b0 91 46 01 	lds	r27, 0x0146
    139a:	80 93 3b 01 	sts	0x013B, r24
    139e:	90 93 3c 01 	sts	0x013C, r25
    13a2:	a0 93 3d 01 	sts	0x013D, r26
    13a6:	b0 93 3e 01 	sts	0x013E, r27
	}
	pid.prev_error = pid.error;
    13aa:	80 91 47 01 	lds	r24, 0x0147
    13ae:	90 91 48 01 	lds	r25, 0x0148
    13b2:	a0 91 49 01 	lds	r26, 0x0149
    13b6:	b0 91 4a 01 	lds	r27, 0x014A
    13ba:	80 93 4b 01 	sts	0x014B, r24
    13be:	90 93 4c 01 	sts	0x014C, r25
    13c2:	a0 93 4d 01 	sts	0x014D, r26
    13c6:	b0 93 4e 01 	sts	0x014E, r27
	if (pid.output > 50) { led_on();} else { led_off();}
    13ca:	80 91 3b 01 	lds	r24, 0x013B
    13ce:	90 91 3c 01 	lds	r25, 0x013C
    13d2:	a0 91 3d 01 	lds	r26, 0x013D
    13d6:	b0 91 3e 01 	lds	r27, 0x013E
    13da:	11 e0       	ldi	r17, 0x01	; 1
    13dc:	bc 01       	movw	r22, r24
    13de:	cd 01       	movw	r24, r26
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	48 e4       	ldi	r20, 0x48	; 72
    13e6:	52 e4       	ldi	r21, 0x42	; 66
    13e8:	0e 94 9b 11 	call	0x2336	; 0x2336 <__gesf2>
    13ec:	18 16       	cp	r1, r24
    13ee:	0c f0       	brlt	.+2      	; 0x13f2 <pid_calculate+0x374>
    13f0:	10 e0       	ldi	r17, 0x00	; 0
    13f2:	11 23       	and	r17, r17
    13f4:	19 f0       	breq	.+6      	; 0x13fc <pid_calculate+0x37e>
    13f6:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <led_on>
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <pid_calculate+0x382>
    13fc:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <led_off>

	return pid.output;
    1400:	80 91 3b 01 	lds	r24, 0x013B
    1404:	90 91 3c 01 	lds	r25, 0x013C
    1408:	a0 91 3d 01 	lds	r26, 0x013D
    140c:	b0 91 3e 01 	lds	r27, 0x013E
}
    1410:	bc 01       	movw	r22, r24
    1412:	cd 01       	movw	r24, r26
    1414:	28 96       	adiw	r28, 0x08	; 8
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	df 90       	pop	r13
    142e:	08 95       	ret

00001430 <sensor_init>:
 * sensor_get_code()		- return latest sensor code
 * sensor_callback() 		- perform sensor sampling / reading
 */

void sensor_init()
{
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
	memset(&sensor, 0, sizeof(Sensor));
    1438:	23 e4       	ldi	r18, 0x43	; 67
    143a:	8f e6       	ldi	r24, 0x6F	; 111
    143c:	91 e0       	ldi	r25, 0x01	; 1
    143e:	fc 01       	movw	r30, r24
    1440:	32 2f       	mov	r19, r18
    1442:	11 92       	st	Z+, r1
    1444:	3a 95       	dec	r19
    1446:	e9 f7       	brne	.-6      	; 0x1442 <sensor_init+0x12>
	sensor.temperature = ABSOLUTE_ZERO;
    1448:	83 e3       	ldi	r24, 0x33	; 51
    144a:	93 e9       	ldi	r25, 0x93	; 147
    144c:	a8 e8       	ldi	r26, 0x88	; 136
    144e:	b3 ec       	ldi	r27, 0xC3	; 195
    1450:	80 93 72 01 	sts	0x0172, r24
    1454:	90 93 73 01 	sts	0x0173, r25
    1458:	a0 93 74 01 	sts	0x0174, r26
    145c:	b0 93 75 01 	sts	0x0175, r27
	sensor.sample_variance_max = SENSOR_SAMPLE_VARIANCE_MAX;
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a0 ea       	ldi	r26, 0xA0	; 160
    1466:	bf e3       	ldi	r27, 0x3F	; 63
    1468:	80 93 7a 01 	sts	0x017A, r24
    146c:	90 93 7b 01 	sts	0x017B, r25
    1470:	a0 93 7c 01 	sts	0x017C, r26
    1474:	b0 93 7d 01 	sts	0x017D, r27
	sensor.reading_variance_max = SENSOR_READING_VARIANCE_MAX;
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a0 ea       	ldi	r26, 0xA0	; 160
    147e:	b1 e4       	ldi	r27, 0x41	; 65
    1480:	80 93 7e 01 	sts	0x017E, r24
    1484:	90 93 7f 01 	sts	0x017F, r25
    1488:	a0 93 80 01 	sts	0x0180, r26
    148c:	b0 93 81 01 	sts	0x0181, r27
	sensor.disconnect_temperature = SENSOR_DISCONNECTED_TEMPERATURE;
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a8 ec       	ldi	r26, 0xC8	; 200
    1496:	b3 e4       	ldi	r27, 0x43	; 67
    1498:	80 93 82 01 	sts	0x0182, r24
    149c:	90 93 83 01 	sts	0x0183, r25
    14a0:	a0 93 84 01 	sts	0x0184, r26
    14a4:	b0 93 85 01 	sts	0x0185, r27
	sensor.no_power_temperature = SENSOR_NO_POWER_TEMPERATURE;
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a0 e0       	ldi	r26, 0x00	; 0
    14ae:	b0 ec       	ldi	r27, 0xC0	; 192
    14b0:	80 93 86 01 	sts	0x0186, r24
    14b4:	90 93 87 01 	sts	0x0187, r25
    14b8:	a0 93 88 01 	sts	0x0188, r26
    14bc:	b0 93 89 01 	sts	0x0189, r27
}
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	08 95       	ret

000014c6 <sensor_on>:

void sensor_on()
{
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_NO_DATA;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	80 93 6f 01 	sts	0x016F, r24
}
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	08 95       	ret

000014da <sensor_off>:

void sensor_off()
{
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
	sensor.state = SENSOR_OFF;
    14e2:	10 92 6f 01 	sts	0x016F, r1
}
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	08 95       	ret

000014ec <sensor_start_reading>:

void sensor_start_reading() 
{ 
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
	sensor.sample_idx = 0;
    14f4:	10 92 71 01 	sts	0x0171, r1
//	adc_read(ADC_CHANNEL);
	sensor.code = SENSOR_TAKING_READING;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	80 93 70 01 	sts	0x0170, r24
}
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	08 95       	ret

00001504 <sensor_get_state>:

uint8_t sensor_get_state() { return (sensor.state);}
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	80 91 6f 01 	lds	r24, 0x016F
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	08 95       	ret

00001516 <sensor_get_code>:
uint8_t sensor_get_code() { return (sensor.code);}
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	80 91 70 01 	lds	r24, 0x0170
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	08 95       	ret

00001528 <sensor_get_temperature>:

double sensor_get_temperature() 
{ 
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
	if (sensor.state == SENSOR_HAS_DATA) { 
    1530:	80 91 6f 01 	lds	r24, 0x016F
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	49 f4       	brne	.+18     	; 0x154a <sensor_get_temperature+0x22>
		return (sensor.temperature);
    1538:	80 91 72 01 	lds	r24, 0x0172
    153c:	90 91 73 01 	lds	r25, 0x0173
    1540:	a0 91 74 01 	lds	r26, 0x0174
    1544:	b0 91 75 01 	lds	r27, 0x0175
    1548:	04 c0       	rjmp	.+8      	; 0x1552 <sensor_get_temperature+0x2a>
	} else {
		return (LESS_THAN_ZERO);	// an impossible temperature value
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a9 e8       	ldi	r26, 0x89	; 137
    1550:	b3 ec       	ldi	r27, 0xC3	; 195
	}
}
    1552:	bc 01       	movw	r22, r24
    1554:	cd 01       	movw	r24, r26
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

0000155c <sensor_callback>:
 *	loop. Each sampling interval must be requested explicitly by calling 
 *	sensor_start_sample(). It does not free-run.
 */

void sensor_callback()
{
    155c:	df 92       	push	r13
    155e:	ef 92       	push	r14
    1560:	ff 92       	push	r15
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	29 97       	sbiw	r28, 0x09	; 9
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
	// cases where you don't execute the callback:
	if ((sensor.state == SENSOR_OFF) || (sensor.code != SENSOR_TAKING_READING)) {
    157a:	80 91 6f 01 	lds	r24, 0x016F
    157e:	88 23       	and	r24, r24
    1580:	09 f4       	brne	.+2      	; 0x1584 <sensor_callback+0x28>
    1582:	3f c1       	rjmp	.+638    	; 0x1802 <sensor_callback+0x2a6>
    1584:	80 91 70 01 	lds	r24, 0x0170
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	09 f0       	breq	.+2      	; 0x158e <sensor_callback+0x32>
    158c:	3a c1       	rjmp	.+628    	; 0x1802 <sensor_callback+0x2a6>
		return;
	}

	// get a sample and return if still in the reading period
	sensor.sample[sensor.sample_idx] = _sensor_sample(ADC_CHANNEL);
    158e:	80 91 71 01 	lds	r24, 0x0171
    1592:	08 2f       	mov	r16, r24
    1594:	10 e0       	ldi	r17, 0x00	; 0
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	0e 94 12 0c 	call	0x1824	; 0x1824 <_sensor_sample>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	98 01       	movw	r18, r16
    15a2:	22 0f       	add	r18, r18
    15a4:	33 1f       	adc	r19, r19
    15a6:	22 0f       	add	r18, r18
    15a8:	33 1f       	adc	r19, r19
    15aa:	26 57       	subi	r18, 0x76	; 118
    15ac:	3e 4f       	sbci	r19, 0xFE	; 254
    15ae:	f9 01       	movw	r30, r18
    15b0:	80 83       	st	Z, r24
    15b2:	91 83       	std	Z+1, r25	; 0x01
    15b4:	a2 83       	std	Z+2, r26	; 0x02
    15b6:	b3 83       	std	Z+3, r27	; 0x03

//	printFloat(sensor.sample[sensor.sample_idx]); //++++++++++++++++++++++++
//	printPgmString(PSTR("\n")); 

	if ((++sensor.sample_idx) < SENSOR_SAMPLES) { 
    15b8:	80 91 71 01 	lds	r24, 0x0171
    15bc:	8f 5f       	subi	r24, 0xFF	; 255
    15be:	80 93 71 01 	sts	0x0171, r24
    15c2:	80 91 71 01 	lds	r24, 0x0171
    15c6:	89 30       	cpi	r24, 0x09	; 9
    15c8:	08 f4       	brcc	.+2      	; 0x15cc <sensor_callback+0x70>
    15ca:	1d c1       	rjmp	.+570    	; 0x1806 <sensor_callback+0x2aa>
		return;
	}

	// process the array to clean up samples
	double mean;
	sensor.std_dev = std_dev(sensor.sample, SENSOR_SAMPLES, &mean);
    15cc:	8a e8       	ldi	r24, 0x8A	; 138
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	9e 01       	movw	r18, r28
    15d2:	2a 5f       	subi	r18, 0xFA	; 250
    15d4:	3f 4f       	sbci	r19, 0xFF	; 255
    15d6:	69 e0       	ldi	r22, 0x09	; 9
    15d8:	a9 01       	movw	r20, r18
    15da:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <std_dev>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	80 93 76 01 	sts	0x0176, r24
    15e6:	90 93 77 01 	sts	0x0177, r25
    15ea:	a0 93 78 01 	sts	0x0178, r26
    15ee:	b0 93 79 01 	sts	0x0179, r27
	if (sensor.std_dev > sensor.reading_variance_max) {
    15f2:	80 91 76 01 	lds	r24, 0x0176
    15f6:	90 91 77 01 	lds	r25, 0x0177
    15fa:	a0 91 78 01 	lds	r26, 0x0178
    15fe:	b0 91 79 01 	lds	r27, 0x0179
    1602:	20 91 7e 01 	lds	r18, 0x017E
    1606:	30 91 7f 01 	lds	r19, 0x017F
    160a:	40 91 80 01 	lds	r20, 0x0180
    160e:	50 91 81 01 	lds	r21, 0x0181
    1612:	11 e0       	ldi	r17, 0x01	; 1
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	0e 94 9b 11 	call	0x2336	; 0x2336 <__gesf2>
    161c:	18 16       	cp	r1, r24
    161e:	0c f0       	brlt	.+2      	; 0x1622 <sensor_callback+0xc6>
    1620:	10 e0       	ldi	r17, 0x00	; 0
    1622:	11 23       	and	r17, r17
    1624:	39 f0       	breq	.+14     	; 0x1634 <sensor_callback+0xd8>
		sensor.state = SENSOR_ERROR;
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	80 93 6f 01 	sts	0x016F, r24
		sensor.code = SENSOR_ERROR_BAD_READINGS;
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	80 93 70 01 	sts	0x0170, r24
		return;
    1632:	ea c0       	rjmp	.+468    	; 0x1808 <sensor_callback+0x2ac>
	}

	// reject the outlier samples and re-compute the average
	double count = 0;
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	dc 01       	movw	r26, r24
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	9a 83       	std	Y+2, r25	; 0x02
    163e:	ab 83       	std	Y+3, r26	; 0x03
    1640:	bc 83       	std	Y+4, r27	; 0x04
	sensor.temperature = 0;
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	dc 01       	movw	r26, r24
    1648:	80 93 72 01 	sts	0x0172, r24
    164c:	90 93 73 01 	sts	0x0173, r25
    1650:	a0 93 74 01 	sts	0x0174, r26
    1654:	b0 93 75 01 	sts	0x0175, r27
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
    1658:	1d 82       	std	Y+5, r1	; 0x05
    165a:	76 c0       	rjmp	.+236    	; 0x1748 <sensor_callback+0x1ec>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
    165c:	8d 81       	ldd	r24, Y+5	; 0x05
    165e:	88 2f       	mov	r24, r24
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	86 57       	subi	r24, 0x76	; 118
    166c:	9e 4f       	sbci	r25, 0xFE	; 254
    166e:	fc 01       	movw	r30, r24
    1670:	80 81       	ld	r24, Z
    1672:	91 81       	ldd	r25, Z+1	; 0x01
    1674:	a2 81       	ldd	r26, Z+2	; 0x02
    1676:	b3 81       	ldd	r27, Z+3	; 0x03
    1678:	2e 81       	ldd	r18, Y+6	; 0x06
    167a:	3f 81       	ldd	r19, Y+7	; 0x07
    167c:	48 85       	ldd	r20, Y+8	; 0x08
    167e:	59 85       	ldd	r21, Y+9	; 0x09
    1680:	bc 01       	movw	r22, r24
    1682:	cd 01       	movw	r24, r26
    1684:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__subsf3>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	7c 01       	movw	r14, r24
    168e:	8d 01       	movw	r16, r26
    1690:	e8 94       	clt
    1692:	17 f9       	bld	r17, 7
    1694:	80 91 7a 01 	lds	r24, 0x017A
    1698:	90 91 7b 01 	lds	r25, 0x017B
    169c:	a0 91 7c 01 	lds	r26, 0x017C
    16a0:	b0 91 7d 01 	lds	r27, 0x017D
    16a4:	20 91 76 01 	lds	r18, 0x0176
    16a8:	30 91 77 01 	lds	r19, 0x0177
    16ac:	40 91 78 01 	lds	r20, 0x0178
    16b0:	50 91 79 01 	lds	r21, 0x0179
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 9f 11 	call	0x233e	; 0x233e <__mulsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9c 01       	movw	r18, r24
    16c2:	ad 01       	movw	r20, r26
    16c4:	dd 24       	eor	r13, r13
    16c6:	d3 94       	inc	r13
    16c8:	c8 01       	movw	r24, r16
    16ca:	b7 01       	movw	r22, r14
    16cc:	0e 94 4c 10 	call	0x2098	; 0x2098 <__cmpsf2>
    16d0:	88 23       	and	r24, r24
    16d2:	0c f0       	brlt	.+2      	; 0x16d6 <sensor_callback+0x17a>
    16d4:	dd 24       	eor	r13, r13
    16d6:	dd 20       	and	r13, r13
    16d8:	a1 f1       	breq	.+104    	; 0x1742 <sensor_callback+0x1e6>
			sensor.temperature += sensor.sample[i];
    16da:	80 91 72 01 	lds	r24, 0x0172
    16de:	90 91 73 01 	lds	r25, 0x0173
    16e2:	a0 91 74 01 	lds	r26, 0x0174
    16e6:	b0 91 75 01 	lds	r27, 0x0175
    16ea:	2d 81       	ldd	r18, Y+5	; 0x05
    16ec:	22 2f       	mov	r18, r18
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	22 0f       	add	r18, r18
    16f2:	33 1f       	adc	r19, r19
    16f4:	22 0f       	add	r18, r18
    16f6:	33 1f       	adc	r19, r19
    16f8:	26 57       	subi	r18, 0x76	; 118
    16fa:	3e 4f       	sbci	r19, 0xFE	; 254
    16fc:	f9 01       	movw	r30, r18
    16fe:	20 81       	ld	r18, Z
    1700:	31 81       	ldd	r19, Z+1	; 0x01
    1702:	42 81       	ldd	r20, Z+2	; 0x02
    1704:	53 81       	ldd	r21, Z+3	; 0x03
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__addsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	80 93 72 01 	sts	0x0172, r24
    1716:	90 93 73 01 	sts	0x0173, r25
    171a:	a0 93 74 01 	sts	0x0174, r26
    171e:	b0 93 75 01 	sts	0x0175, r27
			count++;
    1722:	69 81       	ldd	r22, Y+1	; 0x01
    1724:	7a 81       	ldd	r23, Y+2	; 0x02
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e8       	ldi	r20, 0x80	; 128
    1730:	5f e3       	ldi	r21, 0x3F	; 63
    1732:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__addsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	9a 83       	std	Y+2, r25	; 0x02
    173e:	ab 83       	std	Y+3, r26	; 0x03
    1740:	bc 83       	std	Y+4, r27	; 0x04
	}

	// reject the outlier samples and re-compute the average
	double count = 0;
	sensor.temperature = 0;
	for (uint8_t i=0; i<SENSOR_SAMPLES; i++) {
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	8f 5f       	subi	r24, 0xFF	; 255
    1746:	8d 83       	std	Y+5, r24	; 0x05
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	89 30       	cpi	r24, 0x09	; 9
    174c:	08 f4       	brcc	.+2      	; 0x1750 <sensor_callback+0x1f4>
    174e:	86 cf       	rjmp	.-244    	; 0x165c <sensor_callback+0x100>
		if (fabs(sensor.sample[i] - mean) < (sensor.sample_variance_max * sensor.std_dev)) {
			sensor.temperature += sensor.sample[i];
			count++;
		}
	}
	sensor.temperature /= count; 		// calculate mean temp w/o the outliers
    1750:	80 91 72 01 	lds	r24, 0x0172
    1754:	90 91 73 01 	lds	r25, 0x0173
    1758:	a0 91 74 01 	lds	r26, 0x0174
    175c:	b0 91 75 01 	lds	r27, 0x0175
    1760:	bc 01       	movw	r22, r24
    1762:	cd 01       	movw	r24, r26
    1764:	29 81       	ldd	r18, Y+1	; 0x01
    1766:	3a 81       	ldd	r19, Y+2	; 0x02
    1768:	4b 81       	ldd	r20, Y+3	; 0x03
    176a:	5c 81       	ldd	r21, Y+4	; 0x04
    176c:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__divsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	80 93 72 01 	sts	0x0172, r24
    1778:	90 93 73 01 	sts	0x0173, r25
    177c:	a0 93 74 01 	sts	0x0174, r26
    1780:	b0 93 75 01 	sts	0x0175, r27
	sensor.state = SENSOR_HAS_DATA;
    1784:	83 e0       	ldi	r24, 0x03	; 3
    1786:	80 93 6f 01 	sts	0x016F, r24
	sensor.code = SENSOR_IDLE;			// we are done. Flip it back to idle
    178a:	10 92 70 01 	sts	0x0170, r1

	// process the exception cases
	if (sensor.temperature > SENSOR_DISCONNECTED_TEMPERATURE) {
    178e:	80 91 72 01 	lds	r24, 0x0172
    1792:	90 91 73 01 	lds	r25, 0x0173
    1796:	a0 91 74 01 	lds	r26, 0x0174
    179a:	b0 91 75 01 	lds	r27, 0x0175
    179e:	11 e0       	ldi	r17, 0x01	; 1
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	48 ec       	ldi	r20, 0xC8	; 200
    17aa:	53 e4       	ldi	r21, 0x43	; 67
    17ac:	0e 94 9b 11 	call	0x2336	; 0x2336 <__gesf2>
    17b0:	18 16       	cp	r1, r24
    17b2:	0c f0       	brlt	.+2      	; 0x17b6 <sensor_callback+0x25a>
    17b4:	10 e0       	ldi	r17, 0x00	; 0
    17b6:	11 23       	and	r17, r17
    17b8:	39 f0       	breq	.+14     	; 0x17c8 <sensor_callback+0x26c>
		sensor.state = SENSOR_ERROR;
    17ba:	82 e0       	ldi	r24, 0x02	; 2
    17bc:	80 93 6f 01 	sts	0x016F, r24
		sensor.code = SENSOR_ERROR_DISCONNECTED;
    17c0:	83 e0       	ldi	r24, 0x03	; 3
    17c2:	80 93 70 01 	sts	0x0170, r24
    17c6:	20 c0       	rjmp	.+64     	; 0x1808 <sensor_callback+0x2ac>
	} else if (sensor.temperature < SENSOR_NO_POWER_TEMPERATURE) {
    17c8:	80 91 72 01 	lds	r24, 0x0172
    17cc:	90 91 73 01 	lds	r25, 0x0173
    17d0:	a0 91 74 01 	lds	r26, 0x0174
    17d4:	b0 91 75 01 	lds	r27, 0x0175
    17d8:	11 e0       	ldi	r17, 0x01	; 1
    17da:	bc 01       	movw	r22, r24
    17dc:	cd 01       	movw	r24, r26
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	50 ec       	ldi	r21, 0xC0	; 192
    17e6:	0e 94 4c 10 	call	0x2098	; 0x2098 <__cmpsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	0c f0       	brlt	.+2      	; 0x17f0 <sensor_callback+0x294>
    17ee:	10 e0       	ldi	r17, 0x00	; 0
    17f0:	11 23       	and	r17, r17
    17f2:	51 f0       	breq	.+20     	; 0x1808 <sensor_callback+0x2ac>
		sensor.state = SENSOR_ERROR;
    17f4:	82 e0       	ldi	r24, 0x02	; 2
    17f6:	80 93 6f 01 	sts	0x016F, r24
		sensor.code = SENSOR_ERROR_NO_POWER;
    17fa:	84 e0       	ldi	r24, 0x04	; 4
    17fc:	80 93 70 01 	sts	0x0170, r24
    1800:	03 c0       	rjmp	.+6      	; 0x1808 <sensor_callback+0x2ac>

void sensor_callback()
{
	// cases where you don't execute the callback:
	if ((sensor.state == SENSOR_OFF) || (sensor.code != SENSOR_TAKING_READING)) {
		return;
    1802:	00 00       	nop
    1804:	01 c0       	rjmp	.+2      	; 0x1808 <sensor_callback+0x2ac>

//	printFloat(sensor.sample[sensor.sample_idx]); //++++++++++++++++++++++++
//	printPgmString(PSTR("\n")); 

	if ((++sensor.sample_idx) < SENSOR_SAMPLES) { 
		return;
    1806:	00 00       	nop
		sensor.code = SENSOR_ERROR_DISCONNECTED;
	} else if (sensor.temperature < SENSOR_NO_POWER_TEMPERATURE) {
		sensor.state = SENSOR_ERROR;
		sensor.code = SENSOR_ERROR_NO_POWER;
	}
}
    1808:	29 96       	adiw	r28, 0x09	; 9
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	df 90       	pop	r13
    1822:	08 95       	ret

00001824 <_sensor_sample>:
 *
 *		temp = (adc_value * 1.456355556) - -120.7135972
 */

static inline double _sensor_sample(uint8_t adc_channel)
{
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	0f 92       	push	r0
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	89 83       	std	Y+1, r24	; 0x01
	double random_gain = 5;
	double random_variation = ((double)(rand() - RAND_MAX/2) / RAND_MAX/2) * random_gain;
	double reading = 60 + random_variation;
	return (((double)reading * SENSOR_SLOPE) + SENSOR_OFFSET);	// useful for testing the math
#else
	return (((double)adc_read(adc_channel) * SENSOR_SLOPE) + SENSOR_OFFSET);
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	0e 94 4f 0c 	call	0x189e	; 0x189e <adc_read>
    1836:	cc 01       	movw	r24, r24
    1838:	a0 e0       	ldi	r26, 0x00	; 0
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__floatunsisf>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	bc 01       	movw	r22, r24
    184a:	cd 01       	movw	r24, r26
    184c:	26 e0       	ldi	r18, 0x06	; 6
    184e:	3f ea       	ldi	r19, 0xAF	; 175
    1850:	4a ef       	ldi	r20, 0xFA	; 250
    1852:	5e e3       	ldi	r21, 0x3E	; 62
    1854:	0e 94 9f 11 	call	0x233e	; 0x233e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	23 ed       	ldi	r18, 0xD3	; 211
    1862:	31 eb       	ldi	r19, 0xB1	; 177
    1864:	46 ed       	ldi	r20, 0xD6	; 214
    1866:	5e e3       	ldi	r21, 0x3E	; 62
    1868:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__subsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
#endif
}
    1870:	bc 01       	movw	r22, r24
    1872:	cd 01       	movw	r24, r26
    1874:	0f 90       	pop	r0
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	08 95       	ret

0000187c <adc_init>:
/*
 * adc_init() - initialize ADC. See tinyg_tc.h for settings used
 * adc_read() - returns a single ADC reading (raw). See __sensor_sample notes for more
 */
void adc_init(void)
{
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
	ADMUX  = (ADC_REFS | ADC_CHANNEL);	 // setup ADC Vref and channel 0
    1884:	8c e7       	ldi	r24, 0x7C	; 124
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	20 e4       	ldi	r18, 0x40	; 64
    188a:	fc 01       	movw	r30, r24
    188c:	20 83       	st	Z, r18
	ADCSRA = (ADC_ENABLE | ADC_PRESCALE);// Enable ADC (bit 7) & set prescaler
    188e:	8a e7       	ldi	r24, 0x7A	; 122
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	26 e8       	ldi	r18, 0x86	; 134
    1894:	fc 01       	movw	r30, r24
    1896:	20 83       	st	Z, r18

//	ADMUX &= 0xF0;						// clobber the channel
//	ADMUX |= 0x0F & ADC_CHANNEL;		// set the channel
}
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	08 95       	ret

0000189e <adc_read>:

uint16_t adc_read(uint8_t channel)
{
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	0f 92       	push	r0
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xF0;						// clobber the channel
    18aa:	8c e7       	ldi	r24, 0x7C	; 124
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	2c e7       	ldi	r18, 0x7C	; 124
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	f9 01       	movw	r30, r18
    18b4:	20 81       	ld	r18, Z
    18b6:	20 7f       	andi	r18, 0xF0	; 240
    18b8:	fc 01       	movw	r30, r24
    18ba:	20 83       	st	Z, r18
	ADMUX |= 0x0F & channel;			// set the channel
    18bc:	8c e7       	ldi	r24, 0x7C	; 124
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	2c e7       	ldi	r18, 0x7C	; 124
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	f9 01       	movw	r30, r18
    18c6:	30 81       	ld	r19, Z
    18c8:	29 81       	ldd	r18, Y+1	; 0x01
    18ca:	2f 70       	andi	r18, 0x0F	; 15
    18cc:	23 2b       	or	r18, r19
    18ce:	fc 01       	movw	r30, r24
    18d0:	20 83       	st	Z, r18

	while (ADCSRA && (1<<ADIF) == 0);	// wait if conversion is in progress
    18d2:	00 00       	nop
    18d4:	8a e7       	ldi	r24, 0x7A	; 122
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	fc 01       	movw	r30, r24
    18da:	80 81       	ld	r24, Z
	ADCSRA |= ADC_START_CONVERSION;		// start the conversion
    18dc:	8a e7       	ldi	r24, 0x7A	; 122
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	2a e7       	ldi	r18, 0x7A	; 122
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	f9 01       	movw	r30, r18
    18e6:	20 81       	ld	r18, Z
    18e8:	20 64       	ori	r18, 0x40	; 64
    18ea:	fc 01       	movw	r30, r24
    18ec:	20 83       	st	Z, r18
	while (ADCSRA && (1<<ADIF) == 0);	// wait about 100 uSec
    18ee:	00 00       	nop
    18f0:	8a e7       	ldi	r24, 0x7A	; 122
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	fc 01       	movw	r30, r24
    18f6:	80 81       	ld	r24, Z
	ADCSRA |= (1<<ADIF);				// clear the conversion flag
    18f8:	8a e7       	ldi	r24, 0x7A	; 122
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	2a e7       	ldi	r18, 0x7A	; 122
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	f9 01       	movw	r30, r18
    1902:	20 81       	ld	r18, Z
    1904:	20 61       	ori	r18, 0x10	; 16
    1906:	fc 01       	movw	r30, r24
    1908:	20 83       	st	Z, r18
	return (ADC);
    190a:	88 e7       	ldi	r24, 0x78	; 120
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	fc 01       	movw	r30, r24
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
}
    1914:	0f 90       	pop	r0
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	08 95       	ret

0000191c <pwm_init>:
 * 	Configure timer 2 for extruder heater PWM
 *	Mode: 8 bit Fast PWM Fast w/OCR2A setting PWM freq (TOP value)
 *		  and OCR2B setting the duty cycle as a fraction of OCR2A seeting
 */
void pwm_init(void)
{
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
	TCCR2A  = PWM_INVERTED;		// alternative is PWM_NONINVERTED
    1924:	80 eb       	ldi	r24, 0xB0	; 176
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	20 ef       	ldi	r18, 0xF0	; 240
    192a:	fc 01       	movw	r30, r24
    192c:	20 83       	st	Z, r18
	TCCR2A |= 0b00000011;		// Waveform generation set to MODE 7 - here...
    192e:	80 eb       	ldi	r24, 0xB0	; 176
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	20 eb       	ldi	r18, 0xB0	; 176
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	f9 01       	movw	r30, r18
    1938:	20 81       	ld	r18, Z
    193a:	23 60       	ori	r18, 0x03	; 3
    193c:	fc 01       	movw	r30, r24
    193e:	20 83       	st	Z, r18
	TCCR2B  = 0b00001000;		// ...continued here
    1940:	81 eb       	ldi	r24, 0xB1	; 177
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	28 e0       	ldi	r18, 0x08	; 8
    1946:	fc 01       	movw	r30, r24
    1948:	20 83       	st	Z, r18
	TCCR2B |= PWM_PRESCALE_SET;	// set clock and prescaler
    194a:	81 eb       	ldi	r24, 0xB1	; 177
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	21 eb       	ldi	r18, 0xB1	; 177
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	f9 01       	movw	r30, r18
    1954:	20 81       	ld	r18, Z
    1956:	24 60       	ori	r18, 0x04	; 4
    1958:	fc 01       	movw	r30, r24
    195a:	20 83       	st	Z, r18
	TIMSK1 = 0; 				// disable PWM interrupts
    195c:	8f e6       	ldi	r24, 0x6F	; 111
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	fc 01       	movw	r30, r24
    1962:	10 82       	st	Z, r1
	OCR2A = 0;					// clear PWM frequency (TOP value)
    1964:	83 eb       	ldi	r24, 0xB3	; 179
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	fc 01       	movw	r30, r24
    196a:	10 82       	st	Z, r1
	OCR2B = 0;					// clear PWM duty cycle as % of TOP value
    196c:	84 eb       	ldi	r24, 0xB4	; 180
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	fc 01       	movw	r30, r24
    1972:	10 82       	st	Z, r1
	device.pwm_freq = 0;
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	dc 01       	movw	r26, r24
    197a:	80 93 b5 01 	sts	0x01B5, r24
    197e:	90 93 b6 01 	sts	0x01B6, r25
    1982:	a0 93 b7 01 	sts	0x01B7, r26
    1986:	b0 93 b8 01 	sts	0x01B8, r27
}
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	08 95       	ret

00001990 <pwm_on>:

void pwm_on(double freq, double duty)
{
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	28 97       	sbiw	r28, 0x08	; 8
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	69 83       	std	Y+1, r22	; 0x01
    19a6:	7a 83       	std	Y+2, r23	; 0x02
    19a8:	8b 83       	std	Y+3, r24	; 0x03
    19aa:	9c 83       	std	Y+4, r25	; 0x04
    19ac:	2d 83       	std	Y+5, r18	; 0x05
    19ae:	3e 83       	std	Y+6, r19	; 0x06
    19b0:	4f 83       	std	Y+7, r20	; 0x07
    19b2:	58 87       	std	Y+8, r21	; 0x08
	pwm_init();
    19b4:	0e 94 8e 0c 	call	0x191c	; 0x191c <pwm_init>
	pwm_set_freq(freq);
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	9a 81       	ldd	r25, Y+2	; 0x02
    19bc:	ab 81       	ldd	r26, Y+3	; 0x03
    19be:	bc 81       	ldd	r27, Y+4	; 0x04
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <pwm_set_freq>
	pwm_set_duty(duty);
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	9e 81       	ldd	r25, Y+6	; 0x06
    19cc:	af 81       	ldd	r26, Y+7	; 0x07
    19ce:	b8 85       	ldd	r27, Y+8	; 0x08
    19d0:	bc 01       	movw	r22, r24
    19d2:	cd 01       	movw	r24, r26
    19d4:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <pwm_set_duty>
}
    19d8:	28 96       	adiw	r28, 0x08	; 8
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	08 95       	ret

000019ea <pwm_off>:

void pwm_off(void)
{
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
	pwm_on(0,0);
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	cb 01       	movw	r24, r22
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	a9 01       	movw	r20, r18
    19fe:	0e 94 c8 0c 	call	0x1990	; 0x1990 <pwm_on>
}
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	08 95       	ret

00001a08 <pwm_set_freq>:
 *
 *	At current settings the range is from about 500 Hz to about 6000 Hz  
 */

uint8_t pwm_set_freq(double freq)
{
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <pwm_set_freq+0xa>
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <pwm_set_freq+0xc>
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	69 83       	std	Y+1, r22	; 0x01
    1a1a:	7a 83       	std	Y+2, r23	; 0x02
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
    1a1e:	9c 83       	std	Y+4, r25	; 0x04
	device.pwm_freq = F_CPU / PWM_PRESCALE / freq;
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	74 e2       	ldi	r23, 0x24	; 36
    1a24:	84 ef       	ldi	r24, 0xF4	; 244
    1a26:	97 e4       	ldi	r25, 0x47	; 71
    1a28:	29 81       	ldd	r18, Y+1	; 0x01
    1a2a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a2c:	4b 81       	ldd	r20, Y+3	; 0x03
    1a2e:	5c 81       	ldd	r21, Y+4	; 0x04
    1a30:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__divsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	80 93 b5 01 	sts	0x01B5, r24
    1a3c:	90 93 b6 01 	sts	0x01B6, r25
    1a40:	a0 93 b7 01 	sts	0x01B7, r26
    1a44:	b0 93 b8 01 	sts	0x01B8, r27
	if (device.pwm_freq < PWM_MIN_RES) { 
    1a48:	80 91 b5 01 	lds	r24, 0x01B5
    1a4c:	90 91 b6 01 	lds	r25, 0x01B6
    1a50:	a0 91 b7 01 	lds	r26, 0x01B7
    1a54:	b0 91 b8 01 	lds	r27, 0x01B8
    1a58:	11 e0       	ldi	r17, 0x01	; 1
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 ea       	ldi	r20, 0xA0	; 160
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	0e 94 4c 10 	call	0x2098	; 0x2098 <__cmpsf2>
    1a6a:	88 23       	and	r24, r24
    1a6c:	0c f0       	brlt	.+2      	; 0x1a70 <pwm_set_freq+0x68>
    1a6e:	10 e0       	ldi	r17, 0x00	; 0
    1a70:	11 23       	and	r17, r17
    1a72:	31 f0       	breq	.+12     	; 0x1a80 <pwm_set_freq+0x78>
		OCR2A = PWM_MIN_RES;
    1a74:	83 eb       	ldi	r24, 0xB3	; 179
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	24 e1       	ldi	r18, 0x14	; 20
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	20 83       	st	Z, r18
    1a7e:	2e c0       	rjmp	.+92     	; 0x1adc <pwm_set_freq+0xd4>
	} else if (device.pwm_freq >= PWM_MAX_RES) { 
    1a80:	80 91 b5 01 	lds	r24, 0x01B5
    1a84:	90 91 b6 01 	lds	r25, 0x01B6
    1a88:	a0 91 b7 01 	lds	r26, 0x01B7
    1a8c:	b0 91 b8 01 	lds	r27, 0x01B8
    1a90:	11 e0       	ldi	r17, 0x01	; 1
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	4f e7       	ldi	r20, 0x7F	; 127
    1a9c:	53 e4       	ldi	r21, 0x43	; 67
    1a9e:	0e 94 9b 11 	call	0x2336	; 0x2336 <__gesf2>
    1aa2:	88 23       	and	r24, r24
    1aa4:	0c f4       	brge	.+2      	; 0x1aa8 <pwm_set_freq+0xa0>
    1aa6:	10 e0       	ldi	r17, 0x00	; 0
    1aa8:	11 23       	and	r17, r17
    1aaa:	31 f0       	breq	.+12     	; 0x1ab8 <pwm_set_freq+0xb0>
		OCR2A = PWM_MAX_RES;
    1aac:	83 eb       	ldi	r24, 0xB3	; 179
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	2f ef       	ldi	r18, 0xFF	; 255
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	20 83       	st	Z, r18
    1ab6:	12 c0       	rjmp	.+36     	; 0x1adc <pwm_set_freq+0xd4>
	} else { 
		OCR2A = (uint8_t)device.pwm_freq;
    1ab8:	03 eb       	ldi	r16, 0xB3	; 179
    1aba:	10 e0       	ldi	r17, 0x00	; 0
    1abc:	80 91 b5 01 	lds	r24, 0x01B5
    1ac0:	90 91 b6 01 	lds	r25, 0x01B6
    1ac4:	a0 91 b7 01 	lds	r26, 0x01B7
    1ac8:	b0 91 b8 01 	lds	r27, 0x01B8
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	0e 94 bd 10 	call	0x217a	; 0x217a <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	f8 01       	movw	r30, r16
    1ada:	80 83       	st	Z, r24
	}
	return (SC_OK);
    1adc:	80 e0       	ldi	r24, 0x00	; 0
}
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	08 95       	ret

00001af0 <pwm_set_duty>:
 *	Since I can't seem to get the output pin to work in non-inverted mode
 *	it's done in software in this routine.
 */

uint8_t pwm_set_duty(double duty)
{
    1af0:	cf 92       	push	r12
    1af2:	df 92       	push	r13
    1af4:	ef 92       	push	r14
    1af6:	ff 92       	push	r15
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <pwm_set_duty+0x12>
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <pwm_set_duty+0x14>
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	69 83       	std	Y+1, r22	; 0x01
    1b0a:	7a 83       	std	Y+2, r23	; 0x02
    1b0c:	8b 83       	std	Y+3, r24	; 0x03
    1b0e:	9c 83       	std	Y+4, r25	; 0x04
	if (duty < 0.01) {				// anything approaching 0% 
    1b10:	11 e0       	ldi	r17, 0x01	; 1
    1b12:	69 81       	ldd	r22, Y+1	; 0x01
    1b14:	7a 81       	ldd	r23, Y+2	; 0x02
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1a:	2a e0       	ldi	r18, 0x0A	; 10
    1b1c:	37 ed       	ldi	r19, 0xD7	; 215
    1b1e:	43 e2       	ldi	r20, 0x23	; 35
    1b20:	5c e3       	ldi	r21, 0x3C	; 60
    1b22:	0e 94 4c 10 	call	0x2098	; 0x2098 <__cmpsf2>
    1b26:	88 23       	and	r24, r24
    1b28:	0c f0       	brlt	.+2      	; 0x1b2c <pwm_set_duty+0x3c>
    1b2a:	10 e0       	ldi	r17, 0x00	; 0
    1b2c:	11 23       	and	r17, r17
    1b2e:	31 f0       	breq	.+12     	; 0x1b3c <pwm_set_duty+0x4c>
		OCR2B = 255;
    1b30:	84 eb       	ldi	r24, 0xB4	; 180
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	2f ef       	ldi	r18, 0xFF	; 255
    1b36:	fc 01       	movw	r30, r24
    1b38:	20 83       	st	Z, r18
    1b3a:	50 c0       	rjmp	.+160    	; 0x1bdc <pwm_set_duty+0xec>
	} else if (duty > 99.9) { 		// anything approaching 100%
    1b3c:	11 e0       	ldi	r17, 0x01	; 1
    1b3e:	69 81       	ldd	r22, Y+1	; 0x01
    1b40:	7a 81       	ldd	r23, Y+2	; 0x02
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	2d ec       	ldi	r18, 0xCD	; 205
    1b48:	3c ec       	ldi	r19, 0xCC	; 204
    1b4a:	47 ec       	ldi	r20, 0xC7	; 199
    1b4c:	52 e4       	ldi	r21, 0x42	; 66
    1b4e:	0e 94 9b 11 	call	0x2336	; 0x2336 <__gesf2>
    1b52:	18 16       	cp	r1, r24
    1b54:	0c f0       	brlt	.+2      	; 0x1b58 <pwm_set_duty+0x68>
    1b56:	10 e0       	ldi	r17, 0x00	; 0
    1b58:	11 23       	and	r17, r17
    1b5a:	29 f0       	breq	.+10     	; 0x1b66 <pwm_set_duty+0x76>
		OCR2B = 0;
    1b5c:	84 eb       	ldi	r24, 0xB4	; 180
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	fc 01       	movw	r30, r24
    1b62:	10 82       	st	Z, r1
    1b64:	3b c0       	rjmp	.+118    	; 0x1bdc <pwm_set_duty+0xec>
	} else {
		OCR2B = (uint8_t)(OCR2A * (1-(duty/100)));
    1b66:	0f 2e       	mov	r0, r31
    1b68:	f4 eb       	ldi	r31, 0xB4	; 180
    1b6a:	cf 2e       	mov	r12, r31
    1b6c:	dd 24       	eor	r13, r13
    1b6e:	f0 2d       	mov	r31, r0
    1b70:	83 eb       	ldi	r24, 0xB3	; 179
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	fc 01       	movw	r30, r24
    1b76:	80 81       	ld	r24, Z
    1b78:	88 2f       	mov	r24, r24
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	aa 27       	eor	r26, r26
    1b7e:	97 fd       	sbrc	r25, 7
    1b80:	a0 95       	com	r26
    1b82:	ba 2f       	mov	r27, r26
    1b84:	bc 01       	movw	r22, r24
    1b86:	cd 01       	movw	r24, r26
    1b88:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__floatsisf>
    1b8c:	7b 01       	movw	r14, r22
    1b8e:	8c 01       	movw	r16, r24
    1b90:	69 81       	ldd	r22, Y+1	; 0x01
    1b92:	7a 81       	ldd	r23, Y+2	; 0x02
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	48 ec       	ldi	r20, 0xC8	; 200
    1b9e:	52 e4       	ldi	r21, 0x42	; 66
    1ba0:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__divsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	9c 01       	movw	r18, r24
    1baa:	ad 01       	movw	r20, r26
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	80 e8       	ldi	r24, 0x80	; 128
    1bb2:	9f e3       	ldi	r25, 0x3F	; 63
    1bb4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__subsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	9c 01       	movw	r18, r24
    1bbe:	ad 01       	movw	r20, r26
    1bc0:	c8 01       	movw	r24, r16
    1bc2:	b7 01       	movw	r22, r14
    1bc4:	0e 94 9f 11 	call	0x233e	; 0x233e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	bc 01       	movw	r22, r24
    1bce:	cd 01       	movw	r24, r26
    1bd0:	0e 94 bd 10 	call	0x217a	; 0x217a <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	f6 01       	movw	r30, r12
    1bda:	80 83       	st	Z, r24
	}
	OCR2A = (uint8_t)device.pwm_freq;
    1bdc:	03 eb       	ldi	r16, 0xB3	; 179
    1bde:	10 e0       	ldi	r17, 0x00	; 0
    1be0:	80 91 b5 01 	lds	r24, 0x01B5
    1be4:	90 91 b6 01 	lds	r25, 0x01B6
    1be8:	a0 91 b7 01 	lds	r26, 0x01B7
    1bec:	b0 91 b8 01 	lds	r27, 0x01B8
    1bf0:	bc 01       	movw	r22, r24
    1bf2:	cd 01       	movw	r24, r26
    1bf4:	0e 94 bd 10 	call	0x217a	; 0x217a <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	80 83       	st	Z, r24
	return (SC_OK);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
}
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	ff 90       	pop	r15
    1c14:	ef 90       	pop	r14
    1c16:	df 90       	pop	r13
    1c18:	cf 90       	pop	r12
    1c1a:	08 95       	ret

00001c1c <tick_init>:
 * tick_100ms()	  - tasks that run every 100 ms
 * tick_1sec()	  - tasks that run every 100 ms
 */

void tick_init(void)
{
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0x00;					// normal mode, no compare values
    1c24:	84 e4       	ldi	r24, 0x44	; 68
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	fc 01       	movw	r30, r24
    1c2a:	10 82       	st	Z, r1
	TCCR0B = 0x05;					// normal mode, internal clock / 1024 ~= 7800 Hz
    1c2c:	85 e4       	ldi	r24, 0x45	; 69
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	25 e0       	ldi	r18, 0x05	; 5
    1c32:	fc 01       	movw	r30, r24
    1c34:	20 83       	st	Z, r18
	TCNT0 = (256 - TICK_10MS_COUNT);// set timer for approx 10 ms overflow
    1c36:	86 e4       	ldi	r24, 0x46	; 70
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	22 eb       	ldi	r18, 0xB2	; 178
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	20 83       	st	Z, r18
	TIMSK0 = (1<<TOIE0);			// enable overflow interrupts
    1c40:	8e e6       	ldi	r24, 0x6E	; 110
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	21 e0       	ldi	r18, 0x01	; 1
    1c46:	fc 01       	movw	r30, r24
    1c48:	20 83       	st	Z, r18
	device.tick_100ms_count = 10;
    1c4a:	8a e0       	ldi	r24, 0x0A	; 10
    1c4c:	80 93 b3 01 	sts	0x01B3, r24
	device.tick_1sec_count = 10;	
    1c50:	8a e0       	ldi	r24, 0x0A	; 10
    1c52:	80 93 b4 01 	sts	0x01B4, r24
}
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	08 95       	ret

00001c5c <__vector_16>:

ISR(TIMER0_OVF_vect)
{
    1c5c:	1f 92       	push	r1
    1c5e:	0f 92       	push	r0
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	0f 92       	push	r0
    1c64:	11 24       	eor	r1, r1
    1c66:	2f 93       	push	r18
    1c68:	8f 93       	push	r24
    1c6a:	9f 93       	push	r25
    1c6c:	ef 93       	push	r30
    1c6e:	ff 93       	push	r31
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = (256 - TICK_10MS_COUNT);// reset timer for approx 10 ms overflow
    1c78:	86 e4       	ldi	r24, 0x46	; 70
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	22 eb       	ldi	r18, 0xB2	; 178
    1c7e:	fc 01       	movw	r30, r24
    1c80:	20 83       	st	Z, r18
	device.tick_flag = true;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	80 93 b2 01 	sts	0x01B2, r24
}
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	ff 91       	pop	r31
    1c8e:	ef 91       	pop	r30
    1c90:	9f 91       	pop	r25
    1c92:	8f 91       	pop	r24
    1c94:	2f 91       	pop	r18
    1c96:	0f 90       	pop	r0
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	0f 90       	pop	r0
    1c9c:	1f 90       	pop	r1
    1c9e:	18 95       	reti

00001ca0 <tick_callback>:

uint8_t tick_callback(void)
{
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
	if (device.tick_flag == false) { return (SC_NOOP);}
    1ca8:	80 91 b2 01 	lds	r24, 0x01B2
    1cac:	88 23       	and	r24, r24
    1cae:	11 f4       	brne	.+4      	; 0x1cb4 <tick_callback+0x14>
    1cb0:	83 e0       	ldi	r24, 0x03	; 3
    1cb2:	25 c0       	rjmp	.+74     	; 0x1cfe <tick_callback+0x5e>

	device.tick_flag = false;
    1cb4:	10 92 b2 01 	sts	0x01B2, r1
	tick_10ms();
    1cb8:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <tick_10ms>

	if (--device.tick_100ms_count != 0) { return (SC_OK);}
    1cbc:	80 91 b3 01 	lds	r24, 0x01B3
    1cc0:	81 50       	subi	r24, 0x01	; 1
    1cc2:	80 93 b3 01 	sts	0x01B3, r24
    1cc6:	80 91 b3 01 	lds	r24, 0x01B3
    1cca:	88 23       	and	r24, r24
    1ccc:	11 f0       	breq	.+4      	; 0x1cd2 <tick_callback+0x32>
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	16 c0       	rjmp	.+44     	; 0x1cfe <tick_callback+0x5e>
	device.tick_100ms_count = 10;
    1cd2:	8a e0       	ldi	r24, 0x0A	; 10
    1cd4:	80 93 b3 01 	sts	0x01B3, r24
	tick_100ms();
    1cd8:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <tick_100ms>

	if (--device.tick_1sec_count != 0) { return (SC_OK);}
    1cdc:	80 91 b4 01 	lds	r24, 0x01B4
    1ce0:	81 50       	subi	r24, 0x01	; 1
    1ce2:	80 93 b4 01 	sts	0x01B4, r24
    1ce6:	80 91 b4 01 	lds	r24, 0x01B4
    1cea:	88 23       	and	r24, r24
    1cec:	11 f0       	breq	.+4      	; 0x1cf2 <tick_callback+0x52>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	06 c0       	rjmp	.+12     	; 0x1cfe <tick_callback+0x5e>
	device.tick_1sec_count = 10;
    1cf2:	8a e0       	ldi	r24, 0x0A	; 10
    1cf4:	80 93 b4 01 	sts	0x01B4, r24
	tick_1sec();
    1cf8:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <tick_1sec>

	return (SC_OK);
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
}
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	08 95       	ret

00001d04 <tick_10ms>:

void tick_10ms(void)
{
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
	sensor_callback();			// run the temperature sensor every 10 ms.
    1d0c:	0e 94 ae 0a 	call	0x155c	; 0x155c <sensor_callback>
}
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	08 95       	ret

00001d16 <tick_100ms>:

void tick_100ms(void)
{
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
	heater_callback();			// run the heater controller every 100 ms.
    1d1e:	0e 94 90 06 	call	0xd20	; 0xd20 <heater_callback>
}
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	08 95       	ret

00001d28 <tick_1sec>:

void tick_1sec(void)
{
    1d28:	cf 93       	push	r28
    1d2a:	df 93       	push	r29
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
//	led_toggle();
	return;
}
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	08 95       	ret

00001d36 <led_on>:
 * led_off()
 * led_toggle()
 */

void led_on(void) 
{
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
	LED_PORT &= ~(LED_PIN);
    1d3e:	8b e2       	ldi	r24, 0x2B	; 43
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	2b e2       	ldi	r18, 0x2B	; 43
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	f9 01       	movw	r30, r18
    1d48:	20 81       	ld	r18, Z
    1d4a:	2b 7f       	andi	r18, 0xFB	; 251
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	20 83       	st	Z, r18
}
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	08 95       	ret

00001d56 <led_off>:

void led_off(void) 
{
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
	LED_PORT |= LED_PIN;
    1d5e:	8b e2       	ldi	r24, 0x2B	; 43
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	2b e2       	ldi	r18, 0x2B	; 43
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	f9 01       	movw	r30, r18
    1d68:	20 81       	ld	r18, Z
    1d6a:	24 60       	ori	r18, 0x04	; 4
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	20 83       	st	Z, r18
}
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	08 95       	ret

00001d76 <led_toggle>:

void led_toggle(void) 
{
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
	if (LED_PORT && LED_PIN) {
    1d7e:	8b e2       	ldi	r24, 0x2B	; 43
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	fc 01       	movw	r30, r24
    1d84:	80 81       	ld	r24, Z
    1d86:	88 23       	and	r24, r24
    1d88:	19 f0       	breq	.+6      	; 0x1d90 <led_toggle+0x1a>
		led_on();
    1d8a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <led_on>
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <led_toggle+0x1e>
	} else {
		led_off();
    1d90:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <led_off>
	}
}
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	08 95       	ret

00001d9a <device_reset>:
 *	device_read_byte() 	- read a byte from Kinen channel into device structs
 *	device_write_byte() - write a byte from device to Kinen channel
 */

void device_reset(void)
{
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
	return;
}
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	08 95       	ret

00001da8 <device_read_byte>:

uint8_t device_read_byte(uint8_t addr, uint8_t *data)
{
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	00 d0       	rcall	.+0      	; 0x1dae <device_read_byte+0x6>
    1dae:	0f 92       	push	r0
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	7b 83       	std	Y+3, r23	; 0x03
    1db8:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	80 51       	subi	r24, 0x10	; 16
    1dbe:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	8b 30       	cpi	r24, 0x0B	; 11
    1dc4:	10 f0       	brcs	.+4      	; 0x1dca <device_read_byte+0x22>
    1dc6:	88 e1       	ldi	r24, 0x18	; 24
    1dc8:	0c c0       	rjmp	.+24     	; 0x1de2 <device_read_byte+0x3a>
	*data = device.array[addr];
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	88 2f       	mov	r24, r24
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	87 54       	subi	r24, 0x47	; 71
    1dd2:	9e 4f       	sbci	r25, 0xFE	; 254
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	20 81       	ld	r18, Z
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	9b 81       	ldd	r25, Y+3	; 0x03
    1ddc:	fc 01       	movw	r30, r24
    1dde:	20 83       	st	Z, r18
	return (SC_OK);
    1de0:	80 e0       	ldi	r24, 0x00	; 0
}
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	08 95       	ret

00001dee <device_write_byte>:

uint8_t device_write_byte(uint8_t addr, uint8_t data)
{
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	00 d0       	rcall	.+0      	; 0x1df4 <device_write_byte+0x6>
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	6a 83       	std	Y+2, r22	; 0x02
	addr -= KINEN_COMMON_MAX;
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	80 51       	subi	r24, 0x10	; 16
    1e00:	89 83       	std	Y+1, r24	; 0x01
	if (addr >= DEVICE_ADDRESS_MAX) return (SC_INVALID_ADDRESS);
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	8b 30       	cpi	r24, 0x0B	; 11
    1e06:	10 f0       	brcs	.+4      	; 0x1e0c <device_write_byte+0x1e>
    1e08:	88 e1       	ldi	r24, 0x18	; 24
    1e0a:	09 c0       	rjmp	.+18     	; 0x1e1e <device_write_byte+0x30>
	// There are no checks in here for read-only locations
	// Assumes all locations are writable.
	device.array[addr] = data;
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	88 2f       	mov	r24, r24
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	87 54       	subi	r24, 0x47	; 71
    1e14:	9e 4f       	sbci	r25, 0xFE	; 254
    1e16:	2a 81       	ldd	r18, Y+2	; 0x02
    1e18:	fc 01       	movw	r30, r24
    1e1a:	20 83       	st	Z, r18
	return (SC_OK);
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
}
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	08 95       	ret

00001e28 <std_dev>:
 *
 *	"A lot of people talk about standard deviation but what is a standard deviant?"
 */

double std_dev(double a[], uint8_t n, double *mean) 
{
    1e28:	ef 92       	push	r14
    1e2a:	ff 92       	push	r15
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	62 97       	sbiw	r28, 0x12	; 18
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	9f 87       	std	Y+15, r25	; 0x0f
    1e46:	8e 87       	std	Y+14, r24	; 0x0e
    1e48:	68 8b       	std	Y+16, r22	; 0x10
    1e4a:	5a 8b       	std	Y+18, r21	; 0x12
    1e4c:	49 8b       	std	Y+17, r20	; 0x11
	if(n == 0) { return (0);}
    1e4e:	88 89       	ldd	r24, Y+16	; 0x10
    1e50:	88 23       	and	r24, r24
    1e52:	21 f4       	brne	.+8      	; 0x1e5c <std_dev+0x34>
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	dc 01       	movw	r26, r24
    1e5a:	aa c0       	rjmp	.+340    	; 0x1fb0 <std_dev+0x188>
	double sum = 0;
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	dc 01       	movw	r26, r24
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	9a 83       	std	Y+2, r25	; 0x02
    1e66:	ab 83       	std	Y+3, r26	; 0x03
    1e68:	bc 83       	std	Y+4, r27	; 0x04
	double sq_sum = 0;
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	dc 01       	movw	r26, r24
    1e70:	8d 83       	std	Y+5, r24	; 0x05
    1e72:	9e 83       	std	Y+6, r25	; 0x06
    1e74:	af 83       	std	Y+7, r26	; 0x07
    1e76:	b8 87       	std	Y+8, r27	; 0x08
	for(uint8_t i=0; i<n; ++i) {
    1e78:	19 86       	std	Y+9, r1	; 0x09
    1e7a:	41 c0       	rjmp	.+130    	; 0x1efe <std_dev+0xd6>
		sum += a[i];
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	88 2f       	mov	r24, r24
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	88 0f       	add	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	2e 85       	ldd	r18, Y+14	; 0x0e
    1e8c:	3f 85       	ldd	r19, Y+15	; 0x0f
    1e8e:	82 0f       	add	r24, r18
    1e90:	93 1f       	adc	r25, r19
    1e92:	fc 01       	movw	r30, r24
    1e94:	20 81       	ld	r18, Z
    1e96:	31 81       	ldd	r19, Z+1	; 0x01
    1e98:	42 81       	ldd	r20, Z+2	; 0x02
    1e9a:	53 81       	ldd	r21, Z+3	; 0x03
    1e9c:	69 81       	ldd	r22, Y+1	; 0x01
    1e9e:	7a 81       	ldd	r23, Y+2	; 0x02
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea4:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__addsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	9a 83       	std	Y+2, r25	; 0x02
    1eb0:	ab 83       	std	Y+3, r26	; 0x03
    1eb2:	bc 83       	std	Y+4, r27	; 0x04
		sq_sum += square(a[i]);
    1eb4:	89 85       	ldd	r24, Y+9	; 0x09
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ec4:	3f 85       	ldd	r19, Y+15	; 0x0f
    1ec6:	82 0f       	add	r24, r18
    1ec8:	93 1f       	adc	r25, r19
    1eca:	fc 01       	movw	r30, r24
    1ecc:	80 81       	ld	r24, Z
    1ece:	91 81       	ldd	r25, Z+1	; 0x01
    1ed0:	a2 81       	ldd	r26, Z+2	; 0x02
    1ed2:	b3 81       	ldd	r27, Z+3	; 0x03
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	0e 94 44 12 	call	0x2488	; 0x2488 <square>
    1edc:	9b 01       	movw	r18, r22
    1ede:	ac 01       	movw	r20, r24
    1ee0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ee2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ee4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee6:	98 85       	ldd	r25, Y+8	; 0x08
    1ee8:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__addsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	8d 83       	std	Y+5, r24	; 0x05
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	af 83       	std	Y+7, r26	; 0x07
    1ef6:	b8 87       	std	Y+8, r27	; 0x08
double std_dev(double a[], uint8_t n, double *mean) 
{
	if(n == 0) { return (0);}
	double sum = 0;
	double sq_sum = 0;
	for(uint8_t i=0; i<n; ++i) {
    1ef8:	89 85       	ldd	r24, Y+9	; 0x09
    1efa:	8f 5f       	subi	r24, 0xFF	; 255
    1efc:	89 87       	std	Y+9, r24	; 0x09
    1efe:	99 85       	ldd	r25, Y+9	; 0x09
    1f00:	88 89       	ldd	r24, Y+16	; 0x10
    1f02:	98 17       	cp	r25, r24
    1f04:	08 f4       	brcc	.+2      	; 0x1f08 <std_dev+0xe0>
    1f06:	ba cf       	rjmp	.-140    	; 0x1e7c <std_dev+0x54>
		sum += a[i];
		sq_sum += square(a[i]);
	}
	*mean = sum / n;
    1f08:	88 89       	ldd	r24, Y+16	; 0x10
    1f0a:	88 2f       	mov	r24, r24
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	aa 27       	eor	r26, r26
    1f10:	97 fd       	sbrc	r25, 7
    1f12:	a0 95       	com	r26
    1f14:	ba 2f       	mov	r27, r26
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__floatsisf>
    1f1e:	9b 01       	movw	r18, r22
    1f20:	ac 01       	movw	r20, r24
    1f22:	69 81       	ldd	r22, Y+1	; 0x01
    1f24:	7a 81       	ldd	r23, Y+2	; 0x02
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__divsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	29 89       	ldd	r18, Y+17	; 0x11
    1f34:	3a 89       	ldd	r19, Y+18	; 0x12
    1f36:	f9 01       	movw	r30, r18
    1f38:	80 83       	st	Z, r24
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	a2 83       	std	Z+2, r26	; 0x02
    1f3e:	b3 83       	std	Z+3, r27	; 0x03
	double variance = (sq_sum / n) - square(*mean);
    1f40:	88 89       	ldd	r24, Y+16	; 0x10
    1f42:	88 2f       	mov	r24, r24
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	aa 27       	eor	r26, r26
    1f48:	97 fd       	sbrc	r25, 7
    1f4a:	a0 95       	com	r26
    1f4c:	ba 2f       	mov	r27, r26
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__floatsisf>
    1f56:	9b 01       	movw	r18, r22
    1f58:	ac 01       	movw	r20, r24
    1f5a:	6d 81       	ldd	r22, Y+5	; 0x05
    1f5c:	7e 81       	ldd	r23, Y+6	; 0x06
    1f5e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f60:	98 85       	ldd	r25, Y+8	; 0x08
    1f62:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__divsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	7c 01       	movw	r14, r24
    1f6c:	8d 01       	movw	r16, r26
    1f6e:	89 89       	ldd	r24, Y+17	; 0x11
    1f70:	9a 89       	ldd	r25, Y+18	; 0x12
    1f72:	fc 01       	movw	r30, r24
    1f74:	80 81       	ld	r24, Z
    1f76:	91 81       	ldd	r25, Z+1	; 0x01
    1f78:	a2 81       	ldd	r26, Z+2	; 0x02
    1f7a:	b3 81       	ldd	r27, Z+3	; 0x03
    1f7c:	bc 01       	movw	r22, r24
    1f7e:	cd 01       	movw	r24, r26
    1f80:	0e 94 44 12 	call	0x2488	; 0x2488 <square>
    1f84:	9b 01       	movw	r18, r22
    1f86:	ac 01       	movw	r20, r24
    1f88:	c8 01       	movw	r24, r16
    1f8a:	b7 01       	movw	r22, r14
    1f8c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__subsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	8a 87       	std	Y+10, r24	; 0x0a
    1f96:	9b 87       	std	Y+11, r25	; 0x0b
    1f98:	ac 87       	std	Y+12, r26	; 0x0c
    1f9a:	bd 87       	std	Y+13, r27	; 0x0d
	return sqrt(variance);
    1f9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fa0:	ac 85       	ldd	r26, Y+12	; 0x0c
    1fa2:	bd 85       	ldd	r27, Y+13	; 0x0d
    1fa4:	bc 01       	movw	r22, r24
    1fa6:	cd 01       	movw	r24, r26
    1fa8:	0e 94 06 12 	call	0x240c	; 0x240c <sqrt>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
}
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	62 96       	adiw	r28, 0x12	; 18
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	1f 91       	pop	r17
    1fc6:	0f 91       	pop	r16
    1fc8:	ff 90       	pop	r15
    1fca:	ef 90       	pop	r14
    1fcc:	08 95       	ret

00001fce <__subsf3>:
    1fce:	50 58       	subi	r21, 0x80	; 128

00001fd0 <__addsf3>:
    1fd0:	bb 27       	eor	r27, r27
    1fd2:	aa 27       	eor	r26, r26
    1fd4:	0e d0       	rcall	.+28     	; 0x1ff2 <__addsf3x>
    1fd6:	75 c1       	rjmp	.+746    	; 0x22c2 <__fp_round>
    1fd8:	66 d1       	rcall	.+716    	; 0x22a6 <__fp_pscA>
    1fda:	30 f0       	brcs	.+12     	; 0x1fe8 <__addsf3+0x18>
    1fdc:	6b d1       	rcall	.+726    	; 0x22b4 <__fp_pscB>
    1fde:	20 f0       	brcs	.+8      	; 0x1fe8 <__addsf3+0x18>
    1fe0:	31 f4       	brne	.+12     	; 0x1fee <__addsf3+0x1e>
    1fe2:	9f 3f       	cpi	r25, 0xFF	; 255
    1fe4:	11 f4       	brne	.+4      	; 0x1fea <__addsf3+0x1a>
    1fe6:	1e f4       	brtc	.+6      	; 0x1fee <__addsf3+0x1e>
    1fe8:	5b c1       	rjmp	.+694    	; 0x22a0 <__fp_nan>
    1fea:	0e f4       	brtc	.+2      	; 0x1fee <__addsf3+0x1e>
    1fec:	e0 95       	com	r30
    1fee:	e7 fb       	bst	r30, 7
    1ff0:	51 c1       	rjmp	.+674    	; 0x2294 <__fp_inf>

00001ff2 <__addsf3x>:
    1ff2:	e9 2f       	mov	r30, r25
    1ff4:	77 d1       	rcall	.+750    	; 0x22e4 <__fp_split3>
    1ff6:	80 f3       	brcs	.-32     	; 0x1fd8 <__addsf3+0x8>
    1ff8:	ba 17       	cp	r27, r26
    1ffa:	62 07       	cpc	r22, r18
    1ffc:	73 07       	cpc	r23, r19
    1ffe:	84 07       	cpc	r24, r20
    2000:	95 07       	cpc	r25, r21
    2002:	18 f0       	brcs	.+6      	; 0x200a <__addsf3x+0x18>
    2004:	71 f4       	brne	.+28     	; 0x2022 <__addsf3x+0x30>
    2006:	9e f5       	brtc	.+102    	; 0x206e <__addsf3x+0x7c>
    2008:	8f c1       	rjmp	.+798    	; 0x2328 <__fp_zero>
    200a:	0e f4       	brtc	.+2      	; 0x200e <__addsf3x+0x1c>
    200c:	e0 95       	com	r30
    200e:	0b 2e       	mov	r0, r27
    2010:	ba 2f       	mov	r27, r26
    2012:	a0 2d       	mov	r26, r0
    2014:	0b 01       	movw	r0, r22
    2016:	b9 01       	movw	r22, r18
    2018:	90 01       	movw	r18, r0
    201a:	0c 01       	movw	r0, r24
    201c:	ca 01       	movw	r24, r20
    201e:	a0 01       	movw	r20, r0
    2020:	11 24       	eor	r1, r1
    2022:	ff 27       	eor	r31, r31
    2024:	59 1b       	sub	r21, r25
    2026:	99 f0       	breq	.+38     	; 0x204e <__addsf3x+0x5c>
    2028:	59 3f       	cpi	r21, 0xF9	; 249
    202a:	50 f4       	brcc	.+20     	; 0x2040 <__addsf3x+0x4e>
    202c:	50 3e       	cpi	r21, 0xE0	; 224
    202e:	68 f1       	brcs	.+90     	; 0x208a <__addsf3x+0x98>
    2030:	1a 16       	cp	r1, r26
    2032:	f0 40       	sbci	r31, 0x00	; 0
    2034:	a2 2f       	mov	r26, r18
    2036:	23 2f       	mov	r18, r19
    2038:	34 2f       	mov	r19, r20
    203a:	44 27       	eor	r20, r20
    203c:	58 5f       	subi	r21, 0xF8	; 248
    203e:	f3 cf       	rjmp	.-26     	; 0x2026 <__addsf3x+0x34>
    2040:	46 95       	lsr	r20
    2042:	37 95       	ror	r19
    2044:	27 95       	ror	r18
    2046:	a7 95       	ror	r26
    2048:	f0 40       	sbci	r31, 0x00	; 0
    204a:	53 95       	inc	r21
    204c:	c9 f7       	brne	.-14     	; 0x2040 <__addsf3x+0x4e>
    204e:	7e f4       	brtc	.+30     	; 0x206e <__addsf3x+0x7c>
    2050:	1f 16       	cp	r1, r31
    2052:	ba 0b       	sbc	r27, r26
    2054:	62 0b       	sbc	r22, r18
    2056:	73 0b       	sbc	r23, r19
    2058:	84 0b       	sbc	r24, r20
    205a:	ba f0       	brmi	.+46     	; 0x208a <__addsf3x+0x98>
    205c:	91 50       	subi	r25, 0x01	; 1
    205e:	a1 f0       	breq	.+40     	; 0x2088 <__addsf3x+0x96>
    2060:	ff 0f       	add	r31, r31
    2062:	bb 1f       	adc	r27, r27
    2064:	66 1f       	adc	r22, r22
    2066:	77 1f       	adc	r23, r23
    2068:	88 1f       	adc	r24, r24
    206a:	c2 f7       	brpl	.-16     	; 0x205c <__addsf3x+0x6a>
    206c:	0e c0       	rjmp	.+28     	; 0x208a <__addsf3x+0x98>
    206e:	ba 0f       	add	r27, r26
    2070:	62 1f       	adc	r22, r18
    2072:	73 1f       	adc	r23, r19
    2074:	84 1f       	adc	r24, r20
    2076:	48 f4       	brcc	.+18     	; 0x208a <__addsf3x+0x98>
    2078:	87 95       	ror	r24
    207a:	77 95       	ror	r23
    207c:	67 95       	ror	r22
    207e:	b7 95       	ror	r27
    2080:	f7 95       	ror	r31
    2082:	9e 3f       	cpi	r25, 0xFE	; 254
    2084:	08 f0       	brcs	.+2      	; 0x2088 <__addsf3x+0x96>
    2086:	b3 cf       	rjmp	.-154    	; 0x1fee <__addsf3+0x1e>
    2088:	93 95       	inc	r25
    208a:	88 0f       	add	r24, r24
    208c:	08 f0       	brcs	.+2      	; 0x2090 <__addsf3x+0x9e>
    208e:	99 27       	eor	r25, r25
    2090:	ee 0f       	add	r30, r30
    2092:	97 95       	ror	r25
    2094:	87 95       	ror	r24
    2096:	08 95       	ret

00002098 <__cmpsf2>:
    2098:	d9 d0       	rcall	.+434    	; 0x224c <__fp_cmp>
    209a:	08 f4       	brcc	.+2      	; 0x209e <__cmpsf2+0x6>
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	08 95       	ret

000020a0 <__divsf3>:
    20a0:	0c d0       	rcall	.+24     	; 0x20ba <__divsf3x>
    20a2:	0f c1       	rjmp	.+542    	; 0x22c2 <__fp_round>
    20a4:	07 d1       	rcall	.+526    	; 0x22b4 <__fp_pscB>
    20a6:	40 f0       	brcs	.+16     	; 0x20b8 <__divsf3+0x18>
    20a8:	fe d0       	rcall	.+508    	; 0x22a6 <__fp_pscA>
    20aa:	30 f0       	brcs	.+12     	; 0x20b8 <__divsf3+0x18>
    20ac:	21 f4       	brne	.+8      	; 0x20b6 <__divsf3+0x16>
    20ae:	5f 3f       	cpi	r21, 0xFF	; 255
    20b0:	19 f0       	breq	.+6      	; 0x20b8 <__divsf3+0x18>
    20b2:	f0 c0       	rjmp	.+480    	; 0x2294 <__fp_inf>
    20b4:	51 11       	cpse	r21, r1
    20b6:	39 c1       	rjmp	.+626    	; 0x232a <__fp_szero>
    20b8:	f3 c0       	rjmp	.+486    	; 0x22a0 <__fp_nan>

000020ba <__divsf3x>:
    20ba:	14 d1       	rcall	.+552    	; 0x22e4 <__fp_split3>
    20bc:	98 f3       	brcs	.-26     	; 0x20a4 <__divsf3+0x4>

000020be <__divsf3_pse>:
    20be:	99 23       	and	r25, r25
    20c0:	c9 f3       	breq	.-14     	; 0x20b4 <__divsf3+0x14>
    20c2:	55 23       	and	r21, r21
    20c4:	b1 f3       	breq	.-20     	; 0x20b2 <__divsf3+0x12>
    20c6:	95 1b       	sub	r25, r21
    20c8:	55 0b       	sbc	r21, r21
    20ca:	bb 27       	eor	r27, r27
    20cc:	aa 27       	eor	r26, r26
    20ce:	62 17       	cp	r22, r18
    20d0:	73 07       	cpc	r23, r19
    20d2:	84 07       	cpc	r24, r20
    20d4:	38 f0       	brcs	.+14     	; 0x20e4 <__divsf3_pse+0x26>
    20d6:	9f 5f       	subi	r25, 0xFF	; 255
    20d8:	5f 4f       	sbci	r21, 0xFF	; 255
    20da:	22 0f       	add	r18, r18
    20dc:	33 1f       	adc	r19, r19
    20de:	44 1f       	adc	r20, r20
    20e0:	aa 1f       	adc	r26, r26
    20e2:	a9 f3       	breq	.-22     	; 0x20ce <__divsf3_pse+0x10>
    20e4:	33 d0       	rcall	.+102    	; 0x214c <__divsf3_pse+0x8e>
    20e6:	0e 2e       	mov	r0, r30
    20e8:	3a f0       	brmi	.+14     	; 0x20f8 <__divsf3_pse+0x3a>
    20ea:	e0 e8       	ldi	r30, 0x80	; 128
    20ec:	30 d0       	rcall	.+96     	; 0x214e <__divsf3_pse+0x90>
    20ee:	91 50       	subi	r25, 0x01	; 1
    20f0:	50 40       	sbci	r21, 0x00	; 0
    20f2:	e6 95       	lsr	r30
    20f4:	00 1c       	adc	r0, r0
    20f6:	ca f7       	brpl	.-14     	; 0x20ea <__divsf3_pse+0x2c>
    20f8:	29 d0       	rcall	.+82     	; 0x214c <__divsf3_pse+0x8e>
    20fa:	fe 2f       	mov	r31, r30
    20fc:	27 d0       	rcall	.+78     	; 0x214c <__divsf3_pse+0x8e>
    20fe:	66 0f       	add	r22, r22
    2100:	77 1f       	adc	r23, r23
    2102:	88 1f       	adc	r24, r24
    2104:	bb 1f       	adc	r27, r27
    2106:	26 17       	cp	r18, r22
    2108:	37 07       	cpc	r19, r23
    210a:	48 07       	cpc	r20, r24
    210c:	ab 07       	cpc	r26, r27
    210e:	b0 e8       	ldi	r27, 0x80	; 128
    2110:	09 f0       	breq	.+2      	; 0x2114 <__divsf3_pse+0x56>
    2112:	bb 0b       	sbc	r27, r27
    2114:	80 2d       	mov	r24, r0
    2116:	bf 01       	movw	r22, r30
    2118:	ff 27       	eor	r31, r31
    211a:	93 58       	subi	r25, 0x83	; 131
    211c:	5f 4f       	sbci	r21, 0xFF	; 255
    211e:	2a f0       	brmi	.+10     	; 0x212a <__divsf3_pse+0x6c>
    2120:	9e 3f       	cpi	r25, 0xFE	; 254
    2122:	51 05       	cpc	r21, r1
    2124:	68 f0       	brcs	.+26     	; 0x2140 <__divsf3_pse+0x82>
    2126:	b6 c0       	rjmp	.+364    	; 0x2294 <__fp_inf>
    2128:	00 c1       	rjmp	.+512    	; 0x232a <__fp_szero>
    212a:	5f 3f       	cpi	r21, 0xFF	; 255
    212c:	ec f3       	brlt	.-6      	; 0x2128 <__divsf3_pse+0x6a>
    212e:	98 3e       	cpi	r25, 0xE8	; 232
    2130:	dc f3       	brlt	.-10     	; 0x2128 <__divsf3_pse+0x6a>
    2132:	86 95       	lsr	r24
    2134:	77 95       	ror	r23
    2136:	67 95       	ror	r22
    2138:	b7 95       	ror	r27
    213a:	f7 95       	ror	r31
    213c:	9f 5f       	subi	r25, 0xFF	; 255
    213e:	c9 f7       	brne	.-14     	; 0x2132 <__divsf3_pse+0x74>
    2140:	88 0f       	add	r24, r24
    2142:	91 1d       	adc	r25, r1
    2144:	96 95       	lsr	r25
    2146:	87 95       	ror	r24
    2148:	97 f9       	bld	r25, 7
    214a:	08 95       	ret
    214c:	e1 e0       	ldi	r30, 0x01	; 1
    214e:	66 0f       	add	r22, r22
    2150:	77 1f       	adc	r23, r23
    2152:	88 1f       	adc	r24, r24
    2154:	bb 1f       	adc	r27, r27
    2156:	62 17       	cp	r22, r18
    2158:	73 07       	cpc	r23, r19
    215a:	84 07       	cpc	r24, r20
    215c:	ba 07       	cpc	r27, r26
    215e:	20 f0       	brcs	.+8      	; 0x2168 <__divsf3_pse+0xaa>
    2160:	62 1b       	sub	r22, r18
    2162:	73 0b       	sbc	r23, r19
    2164:	84 0b       	sbc	r24, r20
    2166:	ba 0b       	sbc	r27, r26
    2168:	ee 1f       	adc	r30, r30
    216a:	88 f7       	brcc	.-30     	; 0x214e <__divsf3_pse+0x90>
    216c:	e0 95       	com	r30
    216e:	08 95       	ret

00002170 <__fixsfsi>:
    2170:	04 d0       	rcall	.+8      	; 0x217a <__fixunssfsi>
    2172:	68 94       	set
    2174:	b1 11       	cpse	r27, r1
    2176:	d9 c0       	rjmp	.+434    	; 0x232a <__fp_szero>
    2178:	08 95       	ret

0000217a <__fixunssfsi>:
    217a:	bc d0       	rcall	.+376    	; 0x22f4 <__fp_splitA>
    217c:	88 f0       	brcs	.+34     	; 0x21a0 <__fixunssfsi+0x26>
    217e:	9f 57       	subi	r25, 0x7F	; 127
    2180:	90 f0       	brcs	.+36     	; 0x21a6 <__fixunssfsi+0x2c>
    2182:	b9 2f       	mov	r27, r25
    2184:	99 27       	eor	r25, r25
    2186:	b7 51       	subi	r27, 0x17	; 23
    2188:	a0 f0       	brcs	.+40     	; 0x21b2 <__fixunssfsi+0x38>
    218a:	d1 f0       	breq	.+52     	; 0x21c0 <__fixunssfsi+0x46>
    218c:	66 0f       	add	r22, r22
    218e:	77 1f       	adc	r23, r23
    2190:	88 1f       	adc	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	1a f0       	brmi	.+6      	; 0x219c <__fixunssfsi+0x22>
    2196:	ba 95       	dec	r27
    2198:	c9 f7       	brne	.-14     	; 0x218c <__fixunssfsi+0x12>
    219a:	12 c0       	rjmp	.+36     	; 0x21c0 <__fixunssfsi+0x46>
    219c:	b1 30       	cpi	r27, 0x01	; 1
    219e:	81 f0       	breq	.+32     	; 0x21c0 <__fixunssfsi+0x46>
    21a0:	c3 d0       	rcall	.+390    	; 0x2328 <__fp_zero>
    21a2:	b1 e0       	ldi	r27, 0x01	; 1
    21a4:	08 95       	ret
    21a6:	c0 c0       	rjmp	.+384    	; 0x2328 <__fp_zero>
    21a8:	67 2f       	mov	r22, r23
    21aa:	78 2f       	mov	r23, r24
    21ac:	88 27       	eor	r24, r24
    21ae:	b8 5f       	subi	r27, 0xF8	; 248
    21b0:	39 f0       	breq	.+14     	; 0x21c0 <__fixunssfsi+0x46>
    21b2:	b9 3f       	cpi	r27, 0xF9	; 249
    21b4:	cc f3       	brlt	.-14     	; 0x21a8 <__fixunssfsi+0x2e>
    21b6:	86 95       	lsr	r24
    21b8:	77 95       	ror	r23
    21ba:	67 95       	ror	r22
    21bc:	b3 95       	inc	r27
    21be:	d9 f7       	brne	.-10     	; 0x21b6 <__fixunssfsi+0x3c>
    21c0:	3e f4       	brtc	.+14     	; 0x21d0 <__fixunssfsi+0x56>
    21c2:	90 95       	com	r25
    21c4:	80 95       	com	r24
    21c6:	70 95       	com	r23
    21c8:	61 95       	neg	r22
    21ca:	7f 4f       	sbci	r23, 0xFF	; 255
    21cc:	8f 4f       	sbci	r24, 0xFF	; 255
    21ce:	9f 4f       	sbci	r25, 0xFF	; 255
    21d0:	08 95       	ret

000021d2 <__floatunsisf>:
    21d2:	e8 94       	clt
    21d4:	09 c0       	rjmp	.+18     	; 0x21e8 <__floatsisf+0x12>

000021d6 <__floatsisf>:
    21d6:	97 fb       	bst	r25, 7
    21d8:	3e f4       	brtc	.+14     	; 0x21e8 <__floatsisf+0x12>
    21da:	90 95       	com	r25
    21dc:	80 95       	com	r24
    21de:	70 95       	com	r23
    21e0:	61 95       	neg	r22
    21e2:	7f 4f       	sbci	r23, 0xFF	; 255
    21e4:	8f 4f       	sbci	r24, 0xFF	; 255
    21e6:	9f 4f       	sbci	r25, 0xFF	; 255
    21e8:	99 23       	and	r25, r25
    21ea:	a9 f0       	breq	.+42     	; 0x2216 <__floatsisf+0x40>
    21ec:	f9 2f       	mov	r31, r25
    21ee:	96 e9       	ldi	r25, 0x96	; 150
    21f0:	bb 27       	eor	r27, r27
    21f2:	93 95       	inc	r25
    21f4:	f6 95       	lsr	r31
    21f6:	87 95       	ror	r24
    21f8:	77 95       	ror	r23
    21fa:	67 95       	ror	r22
    21fc:	b7 95       	ror	r27
    21fe:	f1 11       	cpse	r31, r1
    2200:	f8 cf       	rjmp	.-16     	; 0x21f2 <__floatsisf+0x1c>
    2202:	fa f4       	brpl	.+62     	; 0x2242 <__floatsisf+0x6c>
    2204:	bb 0f       	add	r27, r27
    2206:	11 f4       	brne	.+4      	; 0x220c <__floatsisf+0x36>
    2208:	60 ff       	sbrs	r22, 0
    220a:	1b c0       	rjmp	.+54     	; 0x2242 <__floatsisf+0x6c>
    220c:	6f 5f       	subi	r22, 0xFF	; 255
    220e:	7f 4f       	sbci	r23, 0xFF	; 255
    2210:	8f 4f       	sbci	r24, 0xFF	; 255
    2212:	9f 4f       	sbci	r25, 0xFF	; 255
    2214:	16 c0       	rjmp	.+44     	; 0x2242 <__floatsisf+0x6c>
    2216:	88 23       	and	r24, r24
    2218:	11 f0       	breq	.+4      	; 0x221e <__floatsisf+0x48>
    221a:	96 e9       	ldi	r25, 0x96	; 150
    221c:	11 c0       	rjmp	.+34     	; 0x2240 <__floatsisf+0x6a>
    221e:	77 23       	and	r23, r23
    2220:	21 f0       	breq	.+8      	; 0x222a <__floatsisf+0x54>
    2222:	9e e8       	ldi	r25, 0x8E	; 142
    2224:	87 2f       	mov	r24, r23
    2226:	76 2f       	mov	r23, r22
    2228:	05 c0       	rjmp	.+10     	; 0x2234 <__floatsisf+0x5e>
    222a:	66 23       	and	r22, r22
    222c:	71 f0       	breq	.+28     	; 0x224a <__floatsisf+0x74>
    222e:	96 e8       	ldi	r25, 0x86	; 134
    2230:	86 2f       	mov	r24, r22
    2232:	70 e0       	ldi	r23, 0x00	; 0
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	2a f0       	brmi	.+10     	; 0x2242 <__floatsisf+0x6c>
    2238:	9a 95       	dec	r25
    223a:	66 0f       	add	r22, r22
    223c:	77 1f       	adc	r23, r23
    223e:	88 1f       	adc	r24, r24
    2240:	da f7       	brpl	.-10     	; 0x2238 <__floatsisf+0x62>
    2242:	88 0f       	add	r24, r24
    2244:	96 95       	lsr	r25
    2246:	87 95       	ror	r24
    2248:	97 f9       	bld	r25, 7
    224a:	08 95       	ret

0000224c <__fp_cmp>:
    224c:	99 0f       	add	r25, r25
    224e:	00 08       	sbc	r0, r0
    2250:	55 0f       	add	r21, r21
    2252:	aa 0b       	sbc	r26, r26
    2254:	e0 e8       	ldi	r30, 0x80	; 128
    2256:	fe ef       	ldi	r31, 0xFE	; 254
    2258:	16 16       	cp	r1, r22
    225a:	17 06       	cpc	r1, r23
    225c:	e8 07       	cpc	r30, r24
    225e:	f9 07       	cpc	r31, r25
    2260:	c0 f0       	brcs	.+48     	; 0x2292 <__fp_cmp+0x46>
    2262:	12 16       	cp	r1, r18
    2264:	13 06       	cpc	r1, r19
    2266:	e4 07       	cpc	r30, r20
    2268:	f5 07       	cpc	r31, r21
    226a:	98 f0       	brcs	.+38     	; 0x2292 <__fp_cmp+0x46>
    226c:	62 1b       	sub	r22, r18
    226e:	73 0b       	sbc	r23, r19
    2270:	84 0b       	sbc	r24, r20
    2272:	95 0b       	sbc	r25, r21
    2274:	39 f4       	brne	.+14     	; 0x2284 <__fp_cmp+0x38>
    2276:	0a 26       	eor	r0, r26
    2278:	61 f0       	breq	.+24     	; 0x2292 <__fp_cmp+0x46>
    227a:	23 2b       	or	r18, r19
    227c:	24 2b       	or	r18, r20
    227e:	25 2b       	or	r18, r21
    2280:	21 f4       	brne	.+8      	; 0x228a <__fp_cmp+0x3e>
    2282:	08 95       	ret
    2284:	0a 26       	eor	r0, r26
    2286:	09 f4       	brne	.+2      	; 0x228a <__fp_cmp+0x3e>
    2288:	a1 40       	sbci	r26, 0x01	; 1
    228a:	a6 95       	lsr	r26
    228c:	8f ef       	ldi	r24, 0xFF	; 255
    228e:	81 1d       	adc	r24, r1
    2290:	81 1d       	adc	r24, r1
    2292:	08 95       	ret

00002294 <__fp_inf>:
    2294:	97 f9       	bld	r25, 7
    2296:	9f 67       	ori	r25, 0x7F	; 127
    2298:	80 e8       	ldi	r24, 0x80	; 128
    229a:	70 e0       	ldi	r23, 0x00	; 0
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	08 95       	ret

000022a0 <__fp_nan>:
    22a0:	9f ef       	ldi	r25, 0xFF	; 255
    22a2:	80 ec       	ldi	r24, 0xC0	; 192
    22a4:	08 95       	ret

000022a6 <__fp_pscA>:
    22a6:	00 24       	eor	r0, r0
    22a8:	0a 94       	dec	r0
    22aa:	16 16       	cp	r1, r22
    22ac:	17 06       	cpc	r1, r23
    22ae:	18 06       	cpc	r1, r24
    22b0:	09 06       	cpc	r0, r25
    22b2:	08 95       	ret

000022b4 <__fp_pscB>:
    22b4:	00 24       	eor	r0, r0
    22b6:	0a 94       	dec	r0
    22b8:	12 16       	cp	r1, r18
    22ba:	13 06       	cpc	r1, r19
    22bc:	14 06       	cpc	r1, r20
    22be:	05 06       	cpc	r0, r21
    22c0:	08 95       	ret

000022c2 <__fp_round>:
    22c2:	09 2e       	mov	r0, r25
    22c4:	03 94       	inc	r0
    22c6:	00 0c       	add	r0, r0
    22c8:	11 f4       	brne	.+4      	; 0x22ce <__fp_round+0xc>
    22ca:	88 23       	and	r24, r24
    22cc:	52 f0       	brmi	.+20     	; 0x22e2 <__fp_round+0x20>
    22ce:	bb 0f       	add	r27, r27
    22d0:	40 f4       	brcc	.+16     	; 0x22e2 <__fp_round+0x20>
    22d2:	bf 2b       	or	r27, r31
    22d4:	11 f4       	brne	.+4      	; 0x22da <__fp_round+0x18>
    22d6:	60 ff       	sbrs	r22, 0
    22d8:	04 c0       	rjmp	.+8      	; 0x22e2 <__fp_round+0x20>
    22da:	6f 5f       	subi	r22, 0xFF	; 255
    22dc:	7f 4f       	sbci	r23, 0xFF	; 255
    22de:	8f 4f       	sbci	r24, 0xFF	; 255
    22e0:	9f 4f       	sbci	r25, 0xFF	; 255
    22e2:	08 95       	ret

000022e4 <__fp_split3>:
    22e4:	57 fd       	sbrc	r21, 7
    22e6:	90 58       	subi	r25, 0x80	; 128
    22e8:	44 0f       	add	r20, r20
    22ea:	55 1f       	adc	r21, r21
    22ec:	59 f0       	breq	.+22     	; 0x2304 <__fp_splitA+0x10>
    22ee:	5f 3f       	cpi	r21, 0xFF	; 255
    22f0:	71 f0       	breq	.+28     	; 0x230e <__fp_splitA+0x1a>
    22f2:	47 95       	ror	r20

000022f4 <__fp_splitA>:
    22f4:	88 0f       	add	r24, r24
    22f6:	97 fb       	bst	r25, 7
    22f8:	99 1f       	adc	r25, r25
    22fa:	61 f0       	breq	.+24     	; 0x2314 <__fp_splitA+0x20>
    22fc:	9f 3f       	cpi	r25, 0xFF	; 255
    22fe:	79 f0       	breq	.+30     	; 0x231e <__fp_splitA+0x2a>
    2300:	87 95       	ror	r24
    2302:	08 95       	ret
    2304:	12 16       	cp	r1, r18
    2306:	13 06       	cpc	r1, r19
    2308:	14 06       	cpc	r1, r20
    230a:	55 1f       	adc	r21, r21
    230c:	f2 cf       	rjmp	.-28     	; 0x22f2 <__fp_split3+0xe>
    230e:	46 95       	lsr	r20
    2310:	f1 df       	rcall	.-30     	; 0x22f4 <__fp_splitA>
    2312:	08 c0       	rjmp	.+16     	; 0x2324 <__fp_splitA+0x30>
    2314:	16 16       	cp	r1, r22
    2316:	17 06       	cpc	r1, r23
    2318:	18 06       	cpc	r1, r24
    231a:	99 1f       	adc	r25, r25
    231c:	f1 cf       	rjmp	.-30     	; 0x2300 <__fp_splitA+0xc>
    231e:	86 95       	lsr	r24
    2320:	71 05       	cpc	r23, r1
    2322:	61 05       	cpc	r22, r1
    2324:	08 94       	sec
    2326:	08 95       	ret

00002328 <__fp_zero>:
    2328:	e8 94       	clt

0000232a <__fp_szero>:
    232a:	bb 27       	eor	r27, r27
    232c:	66 27       	eor	r22, r22
    232e:	77 27       	eor	r23, r23
    2330:	cb 01       	movw	r24, r22
    2332:	97 f9       	bld	r25, 7
    2334:	08 95       	ret

00002336 <__gesf2>:
    2336:	8a df       	rcall	.-236    	; 0x224c <__fp_cmp>
    2338:	08 f4       	brcc	.+2      	; 0x233c <__gesf2+0x6>
    233a:	8f ef       	ldi	r24, 0xFF	; 255
    233c:	08 95       	ret

0000233e <__mulsf3>:
    233e:	0b d0       	rcall	.+22     	; 0x2356 <__mulsf3x>
    2340:	c0 cf       	rjmp	.-128    	; 0x22c2 <__fp_round>
    2342:	b1 df       	rcall	.-158    	; 0x22a6 <__fp_pscA>
    2344:	28 f0       	brcs	.+10     	; 0x2350 <__mulsf3+0x12>
    2346:	b6 df       	rcall	.-148    	; 0x22b4 <__fp_pscB>
    2348:	18 f0       	brcs	.+6      	; 0x2350 <__mulsf3+0x12>
    234a:	95 23       	and	r25, r21
    234c:	09 f0       	breq	.+2      	; 0x2350 <__mulsf3+0x12>
    234e:	a2 cf       	rjmp	.-188    	; 0x2294 <__fp_inf>
    2350:	a7 cf       	rjmp	.-178    	; 0x22a0 <__fp_nan>
    2352:	11 24       	eor	r1, r1
    2354:	ea cf       	rjmp	.-44     	; 0x232a <__fp_szero>

00002356 <__mulsf3x>:
    2356:	c6 df       	rcall	.-116    	; 0x22e4 <__fp_split3>
    2358:	a0 f3       	brcs	.-24     	; 0x2342 <__mulsf3+0x4>

0000235a <__mulsf3_pse>:
    235a:	95 9f       	mul	r25, r21
    235c:	d1 f3       	breq	.-12     	; 0x2352 <__mulsf3+0x14>
    235e:	95 0f       	add	r25, r21
    2360:	50 e0       	ldi	r21, 0x00	; 0
    2362:	55 1f       	adc	r21, r21
    2364:	62 9f       	mul	r22, r18
    2366:	f0 01       	movw	r30, r0
    2368:	72 9f       	mul	r23, r18
    236a:	bb 27       	eor	r27, r27
    236c:	f0 0d       	add	r31, r0
    236e:	b1 1d       	adc	r27, r1
    2370:	63 9f       	mul	r22, r19
    2372:	aa 27       	eor	r26, r26
    2374:	f0 0d       	add	r31, r0
    2376:	b1 1d       	adc	r27, r1
    2378:	aa 1f       	adc	r26, r26
    237a:	64 9f       	mul	r22, r20
    237c:	66 27       	eor	r22, r22
    237e:	b0 0d       	add	r27, r0
    2380:	a1 1d       	adc	r26, r1
    2382:	66 1f       	adc	r22, r22
    2384:	82 9f       	mul	r24, r18
    2386:	22 27       	eor	r18, r18
    2388:	b0 0d       	add	r27, r0
    238a:	a1 1d       	adc	r26, r1
    238c:	62 1f       	adc	r22, r18
    238e:	73 9f       	mul	r23, r19
    2390:	b0 0d       	add	r27, r0
    2392:	a1 1d       	adc	r26, r1
    2394:	62 1f       	adc	r22, r18
    2396:	83 9f       	mul	r24, r19
    2398:	a0 0d       	add	r26, r0
    239a:	61 1d       	adc	r22, r1
    239c:	22 1f       	adc	r18, r18
    239e:	74 9f       	mul	r23, r20
    23a0:	33 27       	eor	r19, r19
    23a2:	a0 0d       	add	r26, r0
    23a4:	61 1d       	adc	r22, r1
    23a6:	23 1f       	adc	r18, r19
    23a8:	84 9f       	mul	r24, r20
    23aa:	60 0d       	add	r22, r0
    23ac:	21 1d       	adc	r18, r1
    23ae:	82 2f       	mov	r24, r18
    23b0:	76 2f       	mov	r23, r22
    23b2:	6a 2f       	mov	r22, r26
    23b4:	11 24       	eor	r1, r1
    23b6:	9f 57       	subi	r25, 0x7F	; 127
    23b8:	50 40       	sbci	r21, 0x00	; 0
    23ba:	8a f0       	brmi	.+34     	; 0x23de <__mulsf3_pse+0x84>
    23bc:	e1 f0       	breq	.+56     	; 0x23f6 <__mulsf3_pse+0x9c>
    23be:	88 23       	and	r24, r24
    23c0:	4a f0       	brmi	.+18     	; 0x23d4 <__mulsf3_pse+0x7a>
    23c2:	ee 0f       	add	r30, r30
    23c4:	ff 1f       	adc	r31, r31
    23c6:	bb 1f       	adc	r27, r27
    23c8:	66 1f       	adc	r22, r22
    23ca:	77 1f       	adc	r23, r23
    23cc:	88 1f       	adc	r24, r24
    23ce:	91 50       	subi	r25, 0x01	; 1
    23d0:	50 40       	sbci	r21, 0x00	; 0
    23d2:	a9 f7       	brne	.-22     	; 0x23be <__mulsf3_pse+0x64>
    23d4:	9e 3f       	cpi	r25, 0xFE	; 254
    23d6:	51 05       	cpc	r21, r1
    23d8:	70 f0       	brcs	.+28     	; 0x23f6 <__mulsf3_pse+0x9c>
    23da:	5c cf       	rjmp	.-328    	; 0x2294 <__fp_inf>
    23dc:	a6 cf       	rjmp	.-180    	; 0x232a <__fp_szero>
    23de:	5f 3f       	cpi	r21, 0xFF	; 255
    23e0:	ec f3       	brlt	.-6      	; 0x23dc <__mulsf3_pse+0x82>
    23e2:	98 3e       	cpi	r25, 0xE8	; 232
    23e4:	dc f3       	brlt	.-10     	; 0x23dc <__mulsf3_pse+0x82>
    23e6:	86 95       	lsr	r24
    23e8:	77 95       	ror	r23
    23ea:	67 95       	ror	r22
    23ec:	b7 95       	ror	r27
    23ee:	f7 95       	ror	r31
    23f0:	e7 95       	ror	r30
    23f2:	9f 5f       	subi	r25, 0xFF	; 255
    23f4:	c1 f7       	brne	.-16     	; 0x23e6 <__mulsf3_pse+0x8c>
    23f6:	fe 2b       	or	r31, r30
    23f8:	88 0f       	add	r24, r24
    23fa:	91 1d       	adc	r25, r1
    23fc:	96 95       	lsr	r25
    23fe:	87 95       	ror	r24
    2400:	97 f9       	bld	r25, 7
    2402:	08 95       	ret
    2404:	11 f4       	brne	.+4      	; 0x240a <__mulsf3_pse+0xb0>
    2406:	0e f4       	brtc	.+2      	; 0x240a <__mulsf3_pse+0xb0>
    2408:	4b cf       	rjmp	.-362    	; 0x22a0 <__fp_nan>
    240a:	41 c0       	rjmp	.+130    	; 0x248e <__fp_mpack>

0000240c <sqrt>:
    240c:	73 df       	rcall	.-282    	; 0x22f4 <__fp_splitA>
    240e:	d0 f3       	brcs	.-12     	; 0x2404 <__mulsf3_pse+0xaa>
    2410:	99 23       	and	r25, r25
    2412:	d9 f3       	breq	.-10     	; 0x240a <__mulsf3_pse+0xb0>
    2414:	ce f3       	brts	.-14     	; 0x2408 <__mulsf3_pse+0xae>
    2416:	9f 57       	subi	r25, 0x7F	; 127
    2418:	55 0b       	sbc	r21, r21
    241a:	87 ff       	sbrs	r24, 7
    241c:	46 d0       	rcall	.+140    	; 0x24aa <__fp_norm2>
    241e:	00 24       	eor	r0, r0
    2420:	a0 e6       	ldi	r26, 0x60	; 96
    2422:	40 ea       	ldi	r20, 0xA0	; 160
    2424:	90 01       	movw	r18, r0
    2426:	80 58       	subi	r24, 0x80	; 128
    2428:	56 95       	lsr	r21
    242a:	97 95       	ror	r25
    242c:	28 f4       	brcc	.+10     	; 0x2438 <sqrt+0x2c>
    242e:	80 5c       	subi	r24, 0xC0	; 192
    2430:	66 0f       	add	r22, r22
    2432:	77 1f       	adc	r23, r23
    2434:	88 1f       	adc	r24, r24
    2436:	20 f0       	brcs	.+8      	; 0x2440 <sqrt+0x34>
    2438:	26 17       	cp	r18, r22
    243a:	37 07       	cpc	r19, r23
    243c:	48 07       	cpc	r20, r24
    243e:	30 f4       	brcc	.+12     	; 0x244c <sqrt+0x40>
    2440:	62 1b       	sub	r22, r18
    2442:	73 0b       	sbc	r23, r19
    2444:	84 0b       	sbc	r24, r20
    2446:	20 29       	or	r18, r0
    2448:	31 29       	or	r19, r1
    244a:	4a 2b       	or	r20, r26
    244c:	a6 95       	lsr	r26
    244e:	17 94       	ror	r1
    2450:	07 94       	ror	r0
    2452:	20 25       	eor	r18, r0
    2454:	31 25       	eor	r19, r1
    2456:	4a 27       	eor	r20, r26
    2458:	58 f7       	brcc	.-42     	; 0x2430 <sqrt+0x24>
    245a:	66 0f       	add	r22, r22
    245c:	77 1f       	adc	r23, r23
    245e:	88 1f       	adc	r24, r24
    2460:	20 f0       	brcs	.+8      	; 0x246a <sqrt+0x5e>
    2462:	26 17       	cp	r18, r22
    2464:	37 07       	cpc	r19, r23
    2466:	48 07       	cpc	r20, r24
    2468:	30 f4       	brcc	.+12     	; 0x2476 <sqrt+0x6a>
    246a:	62 0b       	sbc	r22, r18
    246c:	73 0b       	sbc	r23, r19
    246e:	84 0b       	sbc	r24, r20
    2470:	20 0d       	add	r18, r0
    2472:	31 1d       	adc	r19, r1
    2474:	41 1d       	adc	r20, r1
    2476:	a0 95       	com	r26
    2478:	81 f7       	brne	.-32     	; 0x245a <sqrt+0x4e>
    247a:	b9 01       	movw	r22, r18
    247c:	84 2f       	mov	r24, r20
    247e:	91 58       	subi	r25, 0x81	; 129
    2480:	88 0f       	add	r24, r24
    2482:	96 95       	lsr	r25
    2484:	87 95       	ror	r24
    2486:	08 95       	ret

00002488 <square>:
    2488:	9b 01       	movw	r18, r22
    248a:	ac 01       	movw	r20, r24
    248c:	58 cf       	rjmp	.-336    	; 0x233e <__mulsf3>

0000248e <__fp_mpack>:
    248e:	9f 3f       	cpi	r25, 0xFF	; 255
    2490:	31 f0       	breq	.+12     	; 0x249e <__fp_mpack_finite+0xc>

00002492 <__fp_mpack_finite>:
    2492:	91 50       	subi	r25, 0x01	; 1
    2494:	20 f4       	brcc	.+8      	; 0x249e <__fp_mpack_finite+0xc>
    2496:	87 95       	ror	r24
    2498:	77 95       	ror	r23
    249a:	67 95       	ror	r22
    249c:	b7 95       	ror	r27
    249e:	88 0f       	add	r24, r24
    24a0:	91 1d       	adc	r25, r1
    24a2:	96 95       	lsr	r25
    24a4:	87 95       	ror	r24
    24a6:	97 f9       	bld	r25, 7
    24a8:	08 95       	ret

000024aa <__fp_norm2>:
    24aa:	91 50       	subi	r25, 0x01	; 1
    24ac:	50 40       	sbci	r21, 0x00	; 0
    24ae:	66 0f       	add	r22, r22
    24b0:	77 1f       	adc	r23, r23
    24b2:	88 1f       	adc	r24, r24
    24b4:	d2 f7       	brpl	.-12     	; 0x24aa <__fp_norm2>
    24b6:	08 95       	ret

000024b8 <__udivmodsi4>:
    24b8:	a1 e2       	ldi	r26, 0x21	; 33
    24ba:	1a 2e       	mov	r1, r26
    24bc:	aa 1b       	sub	r26, r26
    24be:	bb 1b       	sub	r27, r27
    24c0:	fd 01       	movw	r30, r26
    24c2:	0d c0       	rjmp	.+26     	; 0x24de <__udivmodsi4_ep>

000024c4 <__udivmodsi4_loop>:
    24c4:	aa 1f       	adc	r26, r26
    24c6:	bb 1f       	adc	r27, r27
    24c8:	ee 1f       	adc	r30, r30
    24ca:	ff 1f       	adc	r31, r31
    24cc:	a2 17       	cp	r26, r18
    24ce:	b3 07       	cpc	r27, r19
    24d0:	e4 07       	cpc	r30, r20
    24d2:	f5 07       	cpc	r31, r21
    24d4:	20 f0       	brcs	.+8      	; 0x24de <__udivmodsi4_ep>
    24d6:	a2 1b       	sub	r26, r18
    24d8:	b3 0b       	sbc	r27, r19
    24da:	e4 0b       	sbc	r30, r20
    24dc:	f5 0b       	sbc	r31, r21

000024de <__udivmodsi4_ep>:
    24de:	66 1f       	adc	r22, r22
    24e0:	77 1f       	adc	r23, r23
    24e2:	88 1f       	adc	r24, r24
    24e4:	99 1f       	adc	r25, r25
    24e6:	1a 94       	dec	r1
    24e8:	69 f7       	brne	.-38     	; 0x24c4 <__udivmodsi4_loop>
    24ea:	60 95       	com	r22
    24ec:	70 95       	com	r23
    24ee:	80 95       	com	r24
    24f0:	90 95       	com	r25
    24f2:	9b 01       	movw	r18, r22
    24f4:	ac 01       	movw	r20, r24
    24f6:	bd 01       	movw	r22, r26
    24f8:	cf 01       	movw	r24, r30
    24fa:	08 95       	ret

000024fc <__divmodsi4>:
    24fc:	97 fb       	bst	r25, 7
    24fe:	09 2e       	mov	r0, r25
    2500:	05 26       	eor	r0, r21
    2502:	0e d0       	rcall	.+28     	; 0x2520 <__divmodsi4_neg1>
    2504:	57 fd       	sbrc	r21, 7
    2506:	04 d0       	rcall	.+8      	; 0x2510 <__divmodsi4_neg2>
    2508:	d7 df       	rcall	.-82     	; 0x24b8 <__udivmodsi4>
    250a:	0a d0       	rcall	.+20     	; 0x2520 <__divmodsi4_neg1>
    250c:	00 1c       	adc	r0, r0
    250e:	38 f4       	brcc	.+14     	; 0x251e <__divmodsi4_exit>

00002510 <__divmodsi4_neg2>:
    2510:	50 95       	com	r21
    2512:	40 95       	com	r20
    2514:	30 95       	com	r19
    2516:	21 95       	neg	r18
    2518:	3f 4f       	sbci	r19, 0xFF	; 255
    251a:	4f 4f       	sbci	r20, 0xFF	; 255
    251c:	5f 4f       	sbci	r21, 0xFF	; 255

0000251e <__divmodsi4_exit>:
    251e:	08 95       	ret

00002520 <__divmodsi4_neg1>:
    2520:	f6 f7       	brtc	.-4      	; 0x251e <__divmodsi4_exit>
    2522:	90 95       	com	r25
    2524:	80 95       	com	r24
    2526:	70 95       	com	r23
    2528:	61 95       	neg	r22
    252a:	7f 4f       	sbci	r23, 0xFF	; 255
    252c:	8f 4f       	sbci	r24, 0xFF	; 255
    252e:	9f 4f       	sbci	r25, 0xFF	; 255
    2530:	08 95       	ret

00002532 <vfprintf>:
    2532:	ad e0       	ldi	r26, 0x0D	; 13
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	ef e9       	ldi	r30, 0x9F	; 159
    2538:	f2 e1       	ldi	r31, 0x12	; 18
    253a:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__prologue_saves__>
    253e:	3c 01       	movw	r6, r24
    2540:	7d 87       	std	Y+13, r23	; 0x0d
    2542:	6c 87       	std	Y+12, r22	; 0x0c
    2544:	5a 01       	movw	r10, r20
    2546:	fc 01       	movw	r30, r24
    2548:	17 82       	std	Z+7, r1	; 0x07
    254a:	16 82       	std	Z+6, r1	; 0x06
    254c:	83 81       	ldd	r24, Z+3	; 0x03
    254e:	81 ff       	sbrs	r24, 1
    2550:	c8 c1       	rjmp	.+912    	; 0x28e2 <vfprintf+0x3b0>
    2552:	2e 01       	movw	r4, r28
    2554:	08 94       	sec
    2556:	41 1c       	adc	r4, r1
    2558:	51 1c       	adc	r5, r1
    255a:	f3 01       	movw	r30, r6
    255c:	93 81       	ldd	r25, Z+3	; 0x03
    255e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2560:	fd 85       	ldd	r31, Y+13	; 0x0d
    2562:	93 fd       	sbrc	r25, 3
    2564:	85 91       	lpm	r24, Z+
    2566:	93 ff       	sbrs	r25, 3
    2568:	81 91       	ld	r24, Z+
    256a:	fd 87       	std	Y+13, r31	; 0x0d
    256c:	ec 87       	std	Y+12, r30	; 0x0c
    256e:	88 23       	and	r24, r24
    2570:	09 f4       	brne	.+2      	; 0x2574 <vfprintf+0x42>
    2572:	b3 c1       	rjmp	.+870    	; 0x28da <vfprintf+0x3a8>
    2574:	85 32       	cpi	r24, 0x25	; 37
    2576:	41 f4       	brne	.+16     	; 0x2588 <vfprintf+0x56>
    2578:	93 fd       	sbrc	r25, 3
    257a:	85 91       	lpm	r24, Z+
    257c:	93 ff       	sbrs	r25, 3
    257e:	81 91       	ld	r24, Z+
    2580:	fd 87       	std	Y+13, r31	; 0x0d
    2582:	ec 87       	std	Y+12, r30	; 0x0c
    2584:	85 32       	cpi	r24, 0x25	; 37
    2586:	29 f4       	brne	.+10     	; 0x2592 <vfprintf+0x60>
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	b3 01       	movw	r22, r6
    258c:	0e 94 8d 14 	call	0x291a	; 0x291a <fputc>
    2590:	e4 cf       	rjmp	.-56     	; 0x255a <vfprintf+0x28>
    2592:	ff 24       	eor	r15, r15
    2594:	ee 24       	eor	r14, r14
    2596:	10 e0       	ldi	r17, 0x00	; 0
    2598:	10 32       	cpi	r17, 0x20	; 32
    259a:	b0 f4       	brcc	.+44     	; 0x25c8 <vfprintf+0x96>
    259c:	8b 32       	cpi	r24, 0x2B	; 43
    259e:	69 f0       	breq	.+26     	; 0x25ba <vfprintf+0x88>
    25a0:	8c 32       	cpi	r24, 0x2C	; 44
    25a2:	28 f4       	brcc	.+10     	; 0x25ae <vfprintf+0x7c>
    25a4:	80 32       	cpi	r24, 0x20	; 32
    25a6:	51 f0       	breq	.+20     	; 0x25bc <vfprintf+0x8a>
    25a8:	83 32       	cpi	r24, 0x23	; 35
    25aa:	71 f4       	brne	.+28     	; 0x25c8 <vfprintf+0x96>
    25ac:	0b c0       	rjmp	.+22     	; 0x25c4 <vfprintf+0x92>
    25ae:	8d 32       	cpi	r24, 0x2D	; 45
    25b0:	39 f0       	breq	.+14     	; 0x25c0 <vfprintf+0x8e>
    25b2:	80 33       	cpi	r24, 0x30	; 48
    25b4:	49 f4       	brne	.+18     	; 0x25c8 <vfprintf+0x96>
    25b6:	11 60       	ori	r17, 0x01	; 1
    25b8:	2c c0       	rjmp	.+88     	; 0x2612 <vfprintf+0xe0>
    25ba:	12 60       	ori	r17, 0x02	; 2
    25bc:	14 60       	ori	r17, 0x04	; 4
    25be:	29 c0       	rjmp	.+82     	; 0x2612 <vfprintf+0xe0>
    25c0:	18 60       	ori	r17, 0x08	; 8
    25c2:	27 c0       	rjmp	.+78     	; 0x2612 <vfprintf+0xe0>
    25c4:	10 61       	ori	r17, 0x10	; 16
    25c6:	25 c0       	rjmp	.+74     	; 0x2612 <vfprintf+0xe0>
    25c8:	17 fd       	sbrc	r17, 7
    25ca:	2e c0       	rjmp	.+92     	; 0x2628 <vfprintf+0xf6>
    25cc:	28 2f       	mov	r18, r24
    25ce:	20 53       	subi	r18, 0x30	; 48
    25d0:	2a 30       	cpi	r18, 0x0A	; 10
    25d2:	98 f4       	brcc	.+38     	; 0x25fa <vfprintf+0xc8>
    25d4:	16 ff       	sbrs	r17, 6
    25d6:	08 c0       	rjmp	.+16     	; 0x25e8 <vfprintf+0xb6>
    25d8:	8f 2d       	mov	r24, r15
    25da:	88 0f       	add	r24, r24
    25dc:	f8 2e       	mov	r15, r24
    25de:	ff 0c       	add	r15, r15
    25e0:	ff 0c       	add	r15, r15
    25e2:	f8 0e       	add	r15, r24
    25e4:	f2 0e       	add	r15, r18
    25e6:	15 c0       	rjmp	.+42     	; 0x2612 <vfprintf+0xe0>
    25e8:	8e 2d       	mov	r24, r14
    25ea:	88 0f       	add	r24, r24
    25ec:	e8 2e       	mov	r14, r24
    25ee:	ee 0c       	add	r14, r14
    25f0:	ee 0c       	add	r14, r14
    25f2:	e8 0e       	add	r14, r24
    25f4:	e2 0e       	add	r14, r18
    25f6:	10 62       	ori	r17, 0x20	; 32
    25f8:	0c c0       	rjmp	.+24     	; 0x2612 <vfprintf+0xe0>
    25fa:	8e 32       	cpi	r24, 0x2E	; 46
    25fc:	21 f4       	brne	.+8      	; 0x2606 <vfprintf+0xd4>
    25fe:	16 fd       	sbrc	r17, 6
    2600:	6c c1       	rjmp	.+728    	; 0x28da <vfprintf+0x3a8>
    2602:	10 64       	ori	r17, 0x40	; 64
    2604:	06 c0       	rjmp	.+12     	; 0x2612 <vfprintf+0xe0>
    2606:	8c 36       	cpi	r24, 0x6C	; 108
    2608:	11 f4       	brne	.+4      	; 0x260e <vfprintf+0xdc>
    260a:	10 68       	ori	r17, 0x80	; 128
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <vfprintf+0xe0>
    260e:	88 36       	cpi	r24, 0x68	; 104
    2610:	59 f4       	brne	.+22     	; 0x2628 <vfprintf+0xf6>
    2612:	ec 85       	ldd	r30, Y+12	; 0x0c
    2614:	fd 85       	ldd	r31, Y+13	; 0x0d
    2616:	93 fd       	sbrc	r25, 3
    2618:	85 91       	lpm	r24, Z+
    261a:	93 ff       	sbrs	r25, 3
    261c:	81 91       	ld	r24, Z+
    261e:	fd 87       	std	Y+13, r31	; 0x0d
    2620:	ec 87       	std	Y+12, r30	; 0x0c
    2622:	88 23       	and	r24, r24
    2624:	09 f0       	breq	.+2      	; 0x2628 <vfprintf+0xf6>
    2626:	b8 cf       	rjmp	.-144    	; 0x2598 <vfprintf+0x66>
    2628:	98 2f       	mov	r25, r24
    262a:	95 54       	subi	r25, 0x45	; 69
    262c:	93 30       	cpi	r25, 0x03	; 3
    262e:	18 f0       	brcs	.+6      	; 0x2636 <vfprintf+0x104>
    2630:	90 52       	subi	r25, 0x20	; 32
    2632:	93 30       	cpi	r25, 0x03	; 3
    2634:	38 f4       	brcc	.+14     	; 0x2644 <vfprintf+0x112>
    2636:	24 e0       	ldi	r18, 0x04	; 4
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	a2 0e       	add	r10, r18
    263c:	b3 1e       	adc	r11, r19
    263e:	3f e3       	ldi	r19, 0x3F	; 63
    2640:	39 83       	std	Y+1, r19	; 0x01
    2642:	0f c0       	rjmp	.+30     	; 0x2662 <vfprintf+0x130>
    2644:	83 36       	cpi	r24, 0x63	; 99
    2646:	31 f0       	breq	.+12     	; 0x2654 <vfprintf+0x122>
    2648:	83 37       	cpi	r24, 0x73	; 115
    264a:	81 f0       	breq	.+32     	; 0x266c <vfprintf+0x13a>
    264c:	83 35       	cpi	r24, 0x53	; 83
    264e:	09 f0       	breq	.+2      	; 0x2652 <vfprintf+0x120>
    2650:	5a c0       	rjmp	.+180    	; 0x2706 <vfprintf+0x1d4>
    2652:	22 c0       	rjmp	.+68     	; 0x2698 <vfprintf+0x166>
    2654:	f5 01       	movw	r30, r10
    2656:	80 81       	ld	r24, Z
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	22 e0       	ldi	r18, 0x02	; 2
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	a2 0e       	add	r10, r18
    2660:	b3 1e       	adc	r11, r19
    2662:	21 e0       	ldi	r18, 0x01	; 1
    2664:	c2 2e       	mov	r12, r18
    2666:	d1 2c       	mov	r13, r1
    2668:	42 01       	movw	r8, r4
    266a:	14 c0       	rjmp	.+40     	; 0x2694 <vfprintf+0x162>
    266c:	92 e0       	ldi	r25, 0x02	; 2
    266e:	29 2e       	mov	r2, r25
    2670:	31 2c       	mov	r3, r1
    2672:	2a 0c       	add	r2, r10
    2674:	3b 1c       	adc	r3, r11
    2676:	f5 01       	movw	r30, r10
    2678:	80 80       	ld	r8, Z
    267a:	91 80       	ldd	r9, Z+1	; 0x01
    267c:	16 ff       	sbrs	r17, 6
    267e:	03 c0       	rjmp	.+6      	; 0x2686 <vfprintf+0x154>
    2680:	6f 2d       	mov	r22, r15
    2682:	70 e0       	ldi	r23, 0x00	; 0
    2684:	02 c0       	rjmp	.+4      	; 0x268a <vfprintf+0x158>
    2686:	6f ef       	ldi	r22, 0xFF	; 255
    2688:	7f ef       	ldi	r23, 0xFF	; 255
    268a:	c4 01       	movw	r24, r8
    268c:	0e 94 82 14 	call	0x2904	; 0x2904 <strnlen>
    2690:	6c 01       	movw	r12, r24
    2692:	51 01       	movw	r10, r2
    2694:	1f 77       	andi	r17, 0x7F	; 127
    2696:	15 c0       	rjmp	.+42     	; 0x26c2 <vfprintf+0x190>
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	28 2e       	mov	r2, r24
    269c:	31 2c       	mov	r3, r1
    269e:	2a 0c       	add	r2, r10
    26a0:	3b 1c       	adc	r3, r11
    26a2:	f5 01       	movw	r30, r10
    26a4:	80 80       	ld	r8, Z
    26a6:	91 80       	ldd	r9, Z+1	; 0x01
    26a8:	16 ff       	sbrs	r17, 6
    26aa:	03 c0       	rjmp	.+6      	; 0x26b2 <vfprintf+0x180>
    26ac:	6f 2d       	mov	r22, r15
    26ae:	70 e0       	ldi	r23, 0x00	; 0
    26b0:	02 c0       	rjmp	.+4      	; 0x26b6 <vfprintf+0x184>
    26b2:	6f ef       	ldi	r22, 0xFF	; 255
    26b4:	7f ef       	ldi	r23, 0xFF	; 255
    26b6:	c4 01       	movw	r24, r8
    26b8:	0e 94 77 14 	call	0x28ee	; 0x28ee <strnlen_P>
    26bc:	6c 01       	movw	r12, r24
    26be:	10 68       	ori	r17, 0x80	; 128
    26c0:	51 01       	movw	r10, r2
    26c2:	13 fd       	sbrc	r17, 3
    26c4:	1c c0       	rjmp	.+56     	; 0x26fe <vfprintf+0x1cc>
    26c6:	06 c0       	rjmp	.+12     	; 0x26d4 <vfprintf+0x1a2>
    26c8:	80 e2       	ldi	r24, 0x20	; 32
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	b3 01       	movw	r22, r6
    26ce:	0e 94 8d 14 	call	0x291a	; 0x291a <fputc>
    26d2:	ea 94       	dec	r14
    26d4:	8e 2d       	mov	r24, r14
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	c8 16       	cp	r12, r24
    26da:	d9 06       	cpc	r13, r25
    26dc:	a8 f3       	brcs	.-22     	; 0x26c8 <vfprintf+0x196>
    26de:	0f c0       	rjmp	.+30     	; 0x26fe <vfprintf+0x1cc>
    26e0:	f4 01       	movw	r30, r8
    26e2:	17 fd       	sbrc	r17, 7
    26e4:	85 91       	lpm	r24, Z+
    26e6:	17 ff       	sbrs	r17, 7
    26e8:	81 91       	ld	r24, Z+
    26ea:	4f 01       	movw	r8, r30
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	b3 01       	movw	r22, r6
    26f0:	0e 94 8d 14 	call	0x291a	; 0x291a <fputc>
    26f4:	e1 10       	cpse	r14, r1
    26f6:	ea 94       	dec	r14
    26f8:	08 94       	sec
    26fa:	c1 08       	sbc	r12, r1
    26fc:	d1 08       	sbc	r13, r1
    26fe:	c1 14       	cp	r12, r1
    2700:	d1 04       	cpc	r13, r1
    2702:	71 f7       	brne	.-36     	; 0x26e0 <vfprintf+0x1ae>
    2704:	e7 c0       	rjmp	.+462    	; 0x28d4 <vfprintf+0x3a2>
    2706:	84 36       	cpi	r24, 0x64	; 100
    2708:	11 f0       	breq	.+4      	; 0x270e <vfprintf+0x1dc>
    270a:	89 36       	cpi	r24, 0x69	; 105
    270c:	51 f5       	brne	.+84     	; 0x2762 <vfprintf+0x230>
    270e:	f5 01       	movw	r30, r10
    2710:	17 ff       	sbrs	r17, 7
    2712:	07 c0       	rjmp	.+14     	; 0x2722 <vfprintf+0x1f0>
    2714:	80 81       	ld	r24, Z
    2716:	91 81       	ldd	r25, Z+1	; 0x01
    2718:	a2 81       	ldd	r26, Z+2	; 0x02
    271a:	b3 81       	ldd	r27, Z+3	; 0x03
    271c:	24 e0       	ldi	r18, 0x04	; 4
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	08 c0       	rjmp	.+16     	; 0x2732 <vfprintf+0x200>
    2722:	80 81       	ld	r24, Z
    2724:	91 81       	ldd	r25, Z+1	; 0x01
    2726:	aa 27       	eor	r26, r26
    2728:	97 fd       	sbrc	r25, 7
    272a:	a0 95       	com	r26
    272c:	ba 2f       	mov	r27, r26
    272e:	22 e0       	ldi	r18, 0x02	; 2
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	a2 0e       	add	r10, r18
    2734:	b3 1e       	adc	r11, r19
    2736:	01 2f       	mov	r16, r17
    2738:	0f 76       	andi	r16, 0x6F	; 111
    273a:	b7 ff       	sbrs	r27, 7
    273c:	08 c0       	rjmp	.+16     	; 0x274e <vfprintf+0x21c>
    273e:	b0 95       	com	r27
    2740:	a0 95       	com	r26
    2742:	90 95       	com	r25
    2744:	81 95       	neg	r24
    2746:	9f 4f       	sbci	r25, 0xFF	; 255
    2748:	af 4f       	sbci	r26, 0xFF	; 255
    274a:	bf 4f       	sbci	r27, 0xFF	; 255
    274c:	00 68       	ori	r16, 0x80	; 128
    274e:	bc 01       	movw	r22, r24
    2750:	cd 01       	movw	r24, r26
    2752:	a2 01       	movw	r20, r4
    2754:	2a e0       	ldi	r18, 0x0A	; 10
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	0e 94 b9 14 	call	0x2972	; 0x2972 <__ultoa_invert>
    275c:	d8 2e       	mov	r13, r24
    275e:	d4 18       	sub	r13, r4
    2760:	3f c0       	rjmp	.+126    	; 0x27e0 <vfprintf+0x2ae>
    2762:	85 37       	cpi	r24, 0x75	; 117
    2764:	21 f4       	brne	.+8      	; 0x276e <vfprintf+0x23c>
    2766:	1f 7e       	andi	r17, 0xEF	; 239
    2768:	2a e0       	ldi	r18, 0x0A	; 10
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	20 c0       	rjmp	.+64     	; 0x27ae <vfprintf+0x27c>
    276e:	19 7f       	andi	r17, 0xF9	; 249
    2770:	8f 36       	cpi	r24, 0x6F	; 111
    2772:	a9 f0       	breq	.+42     	; 0x279e <vfprintf+0x26c>
    2774:	80 37       	cpi	r24, 0x70	; 112
    2776:	20 f4       	brcc	.+8      	; 0x2780 <vfprintf+0x24e>
    2778:	88 35       	cpi	r24, 0x58	; 88
    277a:	09 f0       	breq	.+2      	; 0x277e <vfprintf+0x24c>
    277c:	ae c0       	rjmp	.+348    	; 0x28da <vfprintf+0x3a8>
    277e:	0b c0       	rjmp	.+22     	; 0x2796 <vfprintf+0x264>
    2780:	80 37       	cpi	r24, 0x70	; 112
    2782:	21 f0       	breq	.+8      	; 0x278c <vfprintf+0x25a>
    2784:	88 37       	cpi	r24, 0x78	; 120
    2786:	09 f0       	breq	.+2      	; 0x278a <vfprintf+0x258>
    2788:	a8 c0       	rjmp	.+336    	; 0x28da <vfprintf+0x3a8>
    278a:	01 c0       	rjmp	.+2      	; 0x278e <vfprintf+0x25c>
    278c:	10 61       	ori	r17, 0x10	; 16
    278e:	14 ff       	sbrs	r17, 4
    2790:	09 c0       	rjmp	.+18     	; 0x27a4 <vfprintf+0x272>
    2792:	14 60       	ori	r17, 0x04	; 4
    2794:	07 c0       	rjmp	.+14     	; 0x27a4 <vfprintf+0x272>
    2796:	14 ff       	sbrs	r17, 4
    2798:	08 c0       	rjmp	.+16     	; 0x27aa <vfprintf+0x278>
    279a:	16 60       	ori	r17, 0x06	; 6
    279c:	06 c0       	rjmp	.+12     	; 0x27aa <vfprintf+0x278>
    279e:	28 e0       	ldi	r18, 0x08	; 8
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	05 c0       	rjmp	.+10     	; 0x27ae <vfprintf+0x27c>
    27a4:	20 e1       	ldi	r18, 0x10	; 16
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	02 c0       	rjmp	.+4      	; 0x27ae <vfprintf+0x27c>
    27aa:	20 e1       	ldi	r18, 0x10	; 16
    27ac:	32 e0       	ldi	r19, 0x02	; 2
    27ae:	f5 01       	movw	r30, r10
    27b0:	17 ff       	sbrs	r17, 7
    27b2:	07 c0       	rjmp	.+14     	; 0x27c2 <vfprintf+0x290>
    27b4:	60 81       	ld	r22, Z
    27b6:	71 81       	ldd	r23, Z+1	; 0x01
    27b8:	82 81       	ldd	r24, Z+2	; 0x02
    27ba:	93 81       	ldd	r25, Z+3	; 0x03
    27bc:	44 e0       	ldi	r20, 0x04	; 4
    27be:	50 e0       	ldi	r21, 0x00	; 0
    27c0:	06 c0       	rjmp	.+12     	; 0x27ce <vfprintf+0x29c>
    27c2:	60 81       	ld	r22, Z
    27c4:	71 81       	ldd	r23, Z+1	; 0x01
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	42 e0       	ldi	r20, 0x02	; 2
    27cc:	50 e0       	ldi	r21, 0x00	; 0
    27ce:	a4 0e       	add	r10, r20
    27d0:	b5 1e       	adc	r11, r21
    27d2:	a2 01       	movw	r20, r4
    27d4:	0e 94 b9 14 	call	0x2972	; 0x2972 <__ultoa_invert>
    27d8:	d8 2e       	mov	r13, r24
    27da:	d4 18       	sub	r13, r4
    27dc:	01 2f       	mov	r16, r17
    27de:	0f 77       	andi	r16, 0x7F	; 127
    27e0:	06 ff       	sbrs	r16, 6
    27e2:	09 c0       	rjmp	.+18     	; 0x27f6 <vfprintf+0x2c4>
    27e4:	0e 7f       	andi	r16, 0xFE	; 254
    27e6:	df 14       	cp	r13, r15
    27e8:	30 f4       	brcc	.+12     	; 0x27f6 <vfprintf+0x2c4>
    27ea:	04 ff       	sbrs	r16, 4
    27ec:	06 c0       	rjmp	.+12     	; 0x27fa <vfprintf+0x2c8>
    27ee:	02 fd       	sbrc	r16, 2
    27f0:	04 c0       	rjmp	.+8      	; 0x27fa <vfprintf+0x2c8>
    27f2:	0f 7e       	andi	r16, 0xEF	; 239
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <vfprintf+0x2c8>
    27f6:	1d 2d       	mov	r17, r13
    27f8:	01 c0       	rjmp	.+2      	; 0x27fc <vfprintf+0x2ca>
    27fa:	1f 2d       	mov	r17, r15
    27fc:	80 2f       	mov	r24, r16
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	04 ff       	sbrs	r16, 4
    2802:	0c c0       	rjmp	.+24     	; 0x281c <vfprintf+0x2ea>
    2804:	fe 01       	movw	r30, r28
    2806:	ed 0d       	add	r30, r13
    2808:	f1 1d       	adc	r31, r1
    280a:	20 81       	ld	r18, Z
    280c:	20 33       	cpi	r18, 0x30	; 48
    280e:	11 f4       	brne	.+4      	; 0x2814 <vfprintf+0x2e2>
    2810:	09 7e       	andi	r16, 0xE9	; 233
    2812:	09 c0       	rjmp	.+18     	; 0x2826 <vfprintf+0x2f4>
    2814:	02 ff       	sbrs	r16, 2
    2816:	06 c0       	rjmp	.+12     	; 0x2824 <vfprintf+0x2f2>
    2818:	1e 5f       	subi	r17, 0xFE	; 254
    281a:	05 c0       	rjmp	.+10     	; 0x2826 <vfprintf+0x2f4>
    281c:	86 78       	andi	r24, 0x86	; 134
    281e:	90 70       	andi	r25, 0x00	; 0
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	09 f0       	breq	.+2      	; 0x2826 <vfprintf+0x2f4>
    2824:	1f 5f       	subi	r17, 0xFF	; 255
    2826:	80 2e       	mov	r8, r16
    2828:	99 24       	eor	r9, r9
    282a:	03 fd       	sbrc	r16, 3
    282c:	12 c0       	rjmp	.+36     	; 0x2852 <vfprintf+0x320>
    282e:	00 ff       	sbrs	r16, 0
    2830:	0d c0       	rjmp	.+26     	; 0x284c <vfprintf+0x31a>
    2832:	fd 2c       	mov	r15, r13
    2834:	1e 15       	cp	r17, r14
    2836:	50 f4       	brcc	.+20     	; 0x284c <vfprintf+0x31a>
    2838:	fe 0c       	add	r15, r14
    283a:	f1 1a       	sub	r15, r17
    283c:	1e 2d       	mov	r17, r14
    283e:	06 c0       	rjmp	.+12     	; 0x284c <vfprintf+0x31a>
    2840:	80 e2       	ldi	r24, 0x20	; 32
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	b3 01       	movw	r22, r6
    2846:	0e 94 8d 14 	call	0x291a	; 0x291a <fputc>
    284a:	1f 5f       	subi	r17, 0xFF	; 255
    284c:	1e 15       	cp	r17, r14
    284e:	c0 f3       	brcs	.-16     	; 0x2840 <vfprintf+0x30e>
    2850:	04 c0       	rjmp	.+8      	; 0x285a <vfprintf+0x328>
    2852:	1e 15       	cp	r17, r14
    2854:	10 f4       	brcc	.+4      	; 0x285a <vfprintf+0x328>
    2856:	e1 1a       	sub	r14, r17
    2858:	01 c0       	rjmp	.+2      	; 0x285c <vfprintf+0x32a>
    285a:	ee 24       	eor	r14, r14
    285c:	84 fe       	sbrs	r8, 4
    285e:	0f c0       	rjmp	.+30     	; 0x287e <vfprintf+0x34c>
    2860:	80 e3       	ldi	r24, 0x30	; 48
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	b3 01       	movw	r22, r6
    2866:	0e 94 8d 14 	call	0x291a	; 0x291a <fputc>
    286a:	82 fe       	sbrs	r8, 2
    286c:	1f c0       	rjmp	.+62     	; 0x28ac <vfprintf+0x37a>
    286e:	81 fe       	sbrs	r8, 1
    2870:	03 c0       	rjmp	.+6      	; 0x2878 <vfprintf+0x346>
    2872:	88 e5       	ldi	r24, 0x58	; 88
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	10 c0       	rjmp	.+32     	; 0x2898 <vfprintf+0x366>
    2878:	88 e7       	ldi	r24, 0x78	; 120
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0d c0       	rjmp	.+26     	; 0x2898 <vfprintf+0x366>
    287e:	c4 01       	movw	r24, r8
    2880:	86 78       	andi	r24, 0x86	; 134
    2882:	90 70       	andi	r25, 0x00	; 0
    2884:	00 97       	sbiw	r24, 0x00	; 0
    2886:	91 f0       	breq	.+36     	; 0x28ac <vfprintf+0x37a>
    2888:	81 fc       	sbrc	r8, 1
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <vfprintf+0x35e>
    288c:	80 e2       	ldi	r24, 0x20	; 32
    288e:	01 c0       	rjmp	.+2      	; 0x2892 <vfprintf+0x360>
    2890:	8b e2       	ldi	r24, 0x2B	; 43
    2892:	07 fd       	sbrc	r16, 7
    2894:	8d e2       	ldi	r24, 0x2D	; 45
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	b3 01       	movw	r22, r6
    289a:	0e 94 8d 14 	call	0x291a	; 0x291a <fputc>
    289e:	06 c0       	rjmp	.+12     	; 0x28ac <vfprintf+0x37a>
    28a0:	80 e3       	ldi	r24, 0x30	; 48
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	b3 01       	movw	r22, r6
    28a6:	0e 94 8d 14 	call	0x291a	; 0x291a <fputc>
    28aa:	fa 94       	dec	r15
    28ac:	df 14       	cp	r13, r15
    28ae:	c0 f3       	brcs	.-16     	; 0x28a0 <vfprintf+0x36e>
    28b0:	da 94       	dec	r13
    28b2:	f2 01       	movw	r30, r4
    28b4:	ed 0d       	add	r30, r13
    28b6:	f1 1d       	adc	r31, r1
    28b8:	80 81       	ld	r24, Z
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	b3 01       	movw	r22, r6
    28be:	0e 94 8d 14 	call	0x291a	; 0x291a <fputc>
    28c2:	dd 20       	and	r13, r13
    28c4:	a9 f7       	brne	.-22     	; 0x28b0 <vfprintf+0x37e>
    28c6:	06 c0       	rjmp	.+12     	; 0x28d4 <vfprintf+0x3a2>
    28c8:	80 e2       	ldi	r24, 0x20	; 32
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	b3 01       	movw	r22, r6
    28ce:	0e 94 8d 14 	call	0x291a	; 0x291a <fputc>
    28d2:	ea 94       	dec	r14
    28d4:	ee 20       	and	r14, r14
    28d6:	c1 f7       	brne	.-16     	; 0x28c8 <vfprintf+0x396>
    28d8:	40 ce       	rjmp	.-896    	; 0x255a <vfprintf+0x28>
    28da:	f3 01       	movw	r30, r6
    28dc:	86 81       	ldd	r24, Z+6	; 0x06
    28de:	97 81       	ldd	r25, Z+7	; 0x07
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <vfprintf+0x3b4>
    28e2:	8f ef       	ldi	r24, 0xFF	; 255
    28e4:	9f ef       	ldi	r25, 0xFF	; 255
    28e6:	2d 96       	adiw	r28, 0x0d	; 13
    28e8:	e2 e1       	ldi	r30, 0x12	; 18
    28ea:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__epilogue_restores__>

000028ee <strnlen_P>:
    28ee:	fc 01       	movw	r30, r24
    28f0:	05 90       	lpm	r0, Z+
    28f2:	61 50       	subi	r22, 0x01	; 1
    28f4:	70 40       	sbci	r23, 0x00	; 0
    28f6:	01 10       	cpse	r0, r1
    28f8:	d8 f7       	brcc	.-10     	; 0x28f0 <strnlen_P+0x2>
    28fa:	80 95       	com	r24
    28fc:	90 95       	com	r25
    28fe:	8e 0f       	add	r24, r30
    2900:	9f 1f       	adc	r25, r31
    2902:	08 95       	ret

00002904 <strnlen>:
    2904:	fc 01       	movw	r30, r24
    2906:	61 50       	subi	r22, 0x01	; 1
    2908:	70 40       	sbci	r23, 0x00	; 0
    290a:	01 90       	ld	r0, Z+
    290c:	01 10       	cpse	r0, r1
    290e:	d8 f7       	brcc	.-10     	; 0x2906 <strnlen+0x2>
    2910:	80 95       	com	r24
    2912:	90 95       	com	r25
    2914:	8e 0f       	add	r24, r30
    2916:	9f 1f       	adc	r25, r31
    2918:	08 95       	ret

0000291a <fputc>:
    291a:	0f 93       	push	r16
    291c:	1f 93       	push	r17
    291e:	cf 93       	push	r28
    2920:	df 93       	push	r29
    2922:	8c 01       	movw	r16, r24
    2924:	eb 01       	movw	r28, r22
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	81 ff       	sbrs	r24, 1
    292a:	1b c0       	rjmp	.+54     	; 0x2962 <fputc+0x48>
    292c:	82 ff       	sbrs	r24, 2
    292e:	0d c0       	rjmp	.+26     	; 0x294a <fputc+0x30>
    2930:	2e 81       	ldd	r18, Y+6	; 0x06
    2932:	3f 81       	ldd	r19, Y+7	; 0x07
    2934:	8c 81       	ldd	r24, Y+4	; 0x04
    2936:	9d 81       	ldd	r25, Y+5	; 0x05
    2938:	28 17       	cp	r18, r24
    293a:	39 07       	cpc	r19, r25
    293c:	64 f4       	brge	.+24     	; 0x2956 <fputc+0x3c>
    293e:	e8 81       	ld	r30, Y
    2940:	f9 81       	ldd	r31, Y+1	; 0x01
    2942:	01 93       	st	Z+, r16
    2944:	f9 83       	std	Y+1, r31	; 0x01
    2946:	e8 83       	st	Y, r30
    2948:	06 c0       	rjmp	.+12     	; 0x2956 <fputc+0x3c>
    294a:	e8 85       	ldd	r30, Y+8	; 0x08
    294c:	f9 85       	ldd	r31, Y+9	; 0x09
    294e:	80 2f       	mov	r24, r16
    2950:	09 95       	icall
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	31 f4       	brne	.+12     	; 0x2962 <fputc+0x48>
    2956:	8e 81       	ldd	r24, Y+6	; 0x06
    2958:	9f 81       	ldd	r25, Y+7	; 0x07
    295a:	01 96       	adiw	r24, 0x01	; 1
    295c:	9f 83       	std	Y+7, r25	; 0x07
    295e:	8e 83       	std	Y+6, r24	; 0x06
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <fputc+0x4c>
    2962:	0f ef       	ldi	r16, 0xFF	; 255
    2964:	1f ef       	ldi	r17, 0xFF	; 255
    2966:	c8 01       	movw	r24, r16
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	1f 91       	pop	r17
    296e:	0f 91       	pop	r16
    2970:	08 95       	ret

00002972 <__ultoa_invert>:
    2972:	fa 01       	movw	r30, r20
    2974:	aa 27       	eor	r26, r26
    2976:	28 30       	cpi	r18, 0x08	; 8
    2978:	51 f1       	breq	.+84     	; 0x29ce <__ultoa_invert+0x5c>
    297a:	20 31       	cpi	r18, 0x10	; 16
    297c:	81 f1       	breq	.+96     	; 0x29de <__ultoa_invert+0x6c>
    297e:	e8 94       	clt
    2980:	6f 93       	push	r22
    2982:	6e 7f       	andi	r22, 0xFE	; 254
    2984:	6e 5f       	subi	r22, 0xFE	; 254
    2986:	7f 4f       	sbci	r23, 0xFF	; 255
    2988:	8f 4f       	sbci	r24, 0xFF	; 255
    298a:	9f 4f       	sbci	r25, 0xFF	; 255
    298c:	af 4f       	sbci	r26, 0xFF	; 255
    298e:	b1 e0       	ldi	r27, 0x01	; 1
    2990:	3e d0       	rcall	.+124    	; 0x2a0e <__ultoa_invert+0x9c>
    2992:	b4 e0       	ldi	r27, 0x04	; 4
    2994:	3c d0       	rcall	.+120    	; 0x2a0e <__ultoa_invert+0x9c>
    2996:	67 0f       	add	r22, r23
    2998:	78 1f       	adc	r23, r24
    299a:	89 1f       	adc	r24, r25
    299c:	9a 1f       	adc	r25, r26
    299e:	a1 1d       	adc	r26, r1
    29a0:	68 0f       	add	r22, r24
    29a2:	79 1f       	adc	r23, r25
    29a4:	8a 1f       	adc	r24, r26
    29a6:	91 1d       	adc	r25, r1
    29a8:	a1 1d       	adc	r26, r1
    29aa:	6a 0f       	add	r22, r26
    29ac:	71 1d       	adc	r23, r1
    29ae:	81 1d       	adc	r24, r1
    29b0:	91 1d       	adc	r25, r1
    29b2:	a1 1d       	adc	r26, r1
    29b4:	20 d0       	rcall	.+64     	; 0x29f6 <__ultoa_invert+0x84>
    29b6:	09 f4       	brne	.+2      	; 0x29ba <__ultoa_invert+0x48>
    29b8:	68 94       	set
    29ba:	3f 91       	pop	r19
    29bc:	2a e0       	ldi	r18, 0x0A	; 10
    29be:	26 9f       	mul	r18, r22
    29c0:	11 24       	eor	r1, r1
    29c2:	30 19       	sub	r19, r0
    29c4:	30 5d       	subi	r19, 0xD0	; 208
    29c6:	31 93       	st	Z+, r19
    29c8:	de f6       	brtc	.-74     	; 0x2980 <__ultoa_invert+0xe>
    29ca:	cf 01       	movw	r24, r30
    29cc:	08 95       	ret
    29ce:	46 2f       	mov	r20, r22
    29d0:	47 70       	andi	r20, 0x07	; 7
    29d2:	40 5d       	subi	r20, 0xD0	; 208
    29d4:	41 93       	st	Z+, r20
    29d6:	b3 e0       	ldi	r27, 0x03	; 3
    29d8:	0f d0       	rcall	.+30     	; 0x29f8 <__ultoa_invert+0x86>
    29da:	c9 f7       	brne	.-14     	; 0x29ce <__ultoa_invert+0x5c>
    29dc:	f6 cf       	rjmp	.-20     	; 0x29ca <__ultoa_invert+0x58>
    29de:	46 2f       	mov	r20, r22
    29e0:	4f 70       	andi	r20, 0x0F	; 15
    29e2:	40 5d       	subi	r20, 0xD0	; 208
    29e4:	4a 33       	cpi	r20, 0x3A	; 58
    29e6:	18 f0       	brcs	.+6      	; 0x29ee <__ultoa_invert+0x7c>
    29e8:	49 5d       	subi	r20, 0xD9	; 217
    29ea:	31 fd       	sbrc	r19, 1
    29ec:	40 52       	subi	r20, 0x20	; 32
    29ee:	41 93       	st	Z+, r20
    29f0:	02 d0       	rcall	.+4      	; 0x29f6 <__ultoa_invert+0x84>
    29f2:	a9 f7       	brne	.-22     	; 0x29de <__ultoa_invert+0x6c>
    29f4:	ea cf       	rjmp	.-44     	; 0x29ca <__ultoa_invert+0x58>
    29f6:	b4 e0       	ldi	r27, 0x04	; 4
    29f8:	a6 95       	lsr	r26
    29fa:	97 95       	ror	r25
    29fc:	87 95       	ror	r24
    29fe:	77 95       	ror	r23
    2a00:	67 95       	ror	r22
    2a02:	ba 95       	dec	r27
    2a04:	c9 f7       	brne	.-14     	; 0x29f8 <__ultoa_invert+0x86>
    2a06:	00 97       	sbiw	r24, 0x00	; 0
    2a08:	61 05       	cpc	r22, r1
    2a0a:	71 05       	cpc	r23, r1
    2a0c:	08 95       	ret
    2a0e:	9b 01       	movw	r18, r22
    2a10:	ac 01       	movw	r20, r24
    2a12:	0a 2e       	mov	r0, r26
    2a14:	06 94       	lsr	r0
    2a16:	57 95       	ror	r21
    2a18:	47 95       	ror	r20
    2a1a:	37 95       	ror	r19
    2a1c:	27 95       	ror	r18
    2a1e:	ba 95       	dec	r27
    2a20:	c9 f7       	brne	.-14     	; 0x2a14 <__ultoa_invert+0xa2>
    2a22:	62 0f       	add	r22, r18
    2a24:	73 1f       	adc	r23, r19
    2a26:	84 1f       	adc	r24, r20
    2a28:	95 1f       	adc	r25, r21
    2a2a:	a0 1d       	adc	r26, r0
    2a2c:	08 95       	ret

00002a2e <__prologue_saves__>:
    2a2e:	2f 92       	push	r2
    2a30:	3f 92       	push	r3
    2a32:	4f 92       	push	r4
    2a34:	5f 92       	push	r5
    2a36:	6f 92       	push	r6
    2a38:	7f 92       	push	r7
    2a3a:	8f 92       	push	r8
    2a3c:	9f 92       	push	r9
    2a3e:	af 92       	push	r10
    2a40:	bf 92       	push	r11
    2a42:	cf 92       	push	r12
    2a44:	df 92       	push	r13
    2a46:	ef 92       	push	r14
    2a48:	ff 92       	push	r15
    2a4a:	0f 93       	push	r16
    2a4c:	1f 93       	push	r17
    2a4e:	cf 93       	push	r28
    2a50:	df 93       	push	r29
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
    2a56:	ca 1b       	sub	r28, r26
    2a58:	db 0b       	sbc	r29, r27
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	09 94       	ijmp

00002a66 <__epilogue_restores__>:
    2a66:	2a 88       	ldd	r2, Y+18	; 0x12
    2a68:	39 88       	ldd	r3, Y+17	; 0x11
    2a6a:	48 88       	ldd	r4, Y+16	; 0x10
    2a6c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a6e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a70:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a72:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a74:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a76:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a78:	b9 84       	ldd	r11, Y+9	; 0x09
    2a7a:	c8 84       	ldd	r12, Y+8	; 0x08
    2a7c:	df 80       	ldd	r13, Y+7	; 0x07
    2a7e:	ee 80       	ldd	r14, Y+6	; 0x06
    2a80:	fd 80       	ldd	r15, Y+5	; 0x05
    2a82:	0c 81       	ldd	r16, Y+4	; 0x04
    2a84:	1b 81       	ldd	r17, Y+3	; 0x03
    2a86:	aa 81       	ldd	r26, Y+2	; 0x02
    2a88:	b9 81       	ldd	r27, Y+1	; 0x01
    2a8a:	ce 0f       	add	r28, r30
    2a8c:	d1 1d       	adc	r29, r1
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	ed 01       	movw	r28, r26
    2a9a:	08 95       	ret

00002a9c <_exit>:
    2a9c:	f8 94       	cli

00002a9e <__stop_program>:
    2a9e:	ff cf       	rjmp	.-2      	; 0x2a9e <__stop_program>
