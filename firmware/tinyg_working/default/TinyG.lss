
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c64e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00802000  0000c64e  0000c6e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000041c  0080212e  0080212e  0000c810  2**0
                  ALLOC
  3 .debug_aranges 00000360  00000000  00000000  0000c810  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000df4  00000000  00000000  0000cb70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000cb39  00000000  00000000  0000d964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000294d  00000000  00000000  0001a49d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000546e  00000000  00000000  0001cdea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000bd0  00000000  00000000  00022258  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000024f8  00000000  00000000  00022e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001cbe  00000000  00000000  00025320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00026fde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__ctors_end>
       4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
       8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
       c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      10:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      14:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      18:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      1c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      20:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      24:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      28:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      2c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      30:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      34:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      38:	0c 94 ae 30 	jmp	0x615c	; 0x615c <__vector_14>
      3c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      40:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      44:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      48:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      4c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      50:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      54:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      58:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      5c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      60:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      64:	0c 94 cd 38 	jmp	0x719a	; 0x719a <__vector_25>
      68:	0c 94 9a 39 	jmp	0x7334	; 0x7334 <__vector_26>
      6c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      70:	0c 94 51 4c 	jmp	0x98a2	; 0x98a2 <__vector_28>
      74:	0c 94 1e 4d 	jmp	0x9a3c	; 0x9a3c <__vector_29>
      78:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      7c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      80:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      84:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      88:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      8c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      90:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      94:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      98:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      9c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      a0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      a4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      a8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      ac:	0c 94 6a 49 	jmp	0x92d4	; 0x92d4 <__vector_43>
      b0:	0c 94 9a 49 	jmp	0x9334	; 0x9334 <__vector_44>
      b4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      b8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      bc:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__vector_47>
      c0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      c4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      c8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      cc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      d0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      d4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      d8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      dc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      e0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      e4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      e8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      ec:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      f0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      f4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      f8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      fc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     100:	0c 94 ca 49 	jmp	0x9394	; 0x9394 <__vector_64>
     104:	0c 94 fa 49 	jmp	0x93f4	; 0x93f4 <__vector_65>
     108:	0c 94 aa 48 	jmp	0x9154	; 0x9154 <__vector_66>
     10c:	0c 94 da 48 	jmp	0x91b4	; 0x91b4 <__vector_67>
     110:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     114:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     118:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     11c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     120:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     124:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     128:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     12c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     130:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     134:	0c 94 31 31 	jmp	0x6262	; 0x6262 <__vector_77>
     138:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     13c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     140:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     144:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     148:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     14c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     150:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     154:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     158:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     15c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     160:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     164:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     168:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     16c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     170:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     174:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     178:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     17c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     180:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     184:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     188:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     18c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     190:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     194:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     198:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     19c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1a0:	0c 94 0a 49 	jmp	0x9214	; 0x9214 <__vector_104>
     1a4:	0c 94 3a 49 	jmp	0x9274	; 0x9274 <__vector_105>
     1a8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1ac:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1b0:	0c 94 2f 32 	jmp	0x645e	; 0x645e <__vector_108>
     1b4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1b8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1bc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1c0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1c4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1c8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1cc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1d0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1d4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1d8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1dc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1e0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1e4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <__c.3776>:
     24b:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     25b:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     26b:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000276 <__c.3774>:
     276:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     286:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     296:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000002a0 <__c.3772>:
     2a0:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     2b0:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     2c0:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000002ca <__c.3770>:
     2ca:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     2da:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     2ea:	73 20 2d 2d 2d 0a 00                                s ---..

000002f1 <__c.3768>:
     2f1:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     301:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     311:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000319 <__c.3813>:
     319:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     329:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     339:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     349:	29 0a 0a 00                                         )...

0000034d <__c.3811>:
     34d:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     35d:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     36d:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

0000037d <__c.3809>:
     37d:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     38d:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     39d:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000003ae <__c.3807>:
     3ae:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     3be:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     3ce:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000003df <__c.3805>:
     3df:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     3ef:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     3ff:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     40f:	6c 0a 00                                            l..

00000412 <__c.3803>:
     412:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     422:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     432:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     442:	6e 0a 00                                            n..

00000445 <__c.3801>:
     445:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     455:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     465:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     475:	74 65 70 73 29 0a 00                                teps)..

0000047c <__c.3799>:
     47c:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     48c:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     49c:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     4ac:	70 0a 00                                            p..

000004af <__c.3797>:
     4af:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     4bf:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     4cf:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     4df:	73 74 65 70 73 29 0a 00                             steps)..

000004e7 <__c.3795>:
     4e7:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     4f7:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     507:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     517:	73 74 65 70 73 29 0a 00                             steps)..

0000051f <__c.3790>:
     51f:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     52f:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

0000053d <__c.3927>:
     53d:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     54d:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

00000558 <__c.3924>:
     558:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     568:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

00000572 <__c.3921>:
     572:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     582:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

0000058c <__c.3918>:
     58c:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     59c:	74 3a 20 25 73 0a 00                                t: %s..

000005a3 <__c.3915>:
     5a3:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     5b3:	4d 6f 64 65 0a 00                                   Mode..

000005b9 <__c.3912>:
     5b9:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     5c9:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

000005d6 <configs_P>:
     5d6:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     5e6:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     5f6:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     606:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     616:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     626:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     636:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     646:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     656:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     666:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     676:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     686:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     696:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     6a6:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     6b6:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     6c6:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     6d6:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     6e6:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     6f6:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     706:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     716:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000724 <bsel>:
     724:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

0000072f <bscale>:
     72f:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

0000073a <__c.3534>:
     73a:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     74a:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     75a:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000766 <getcFuncs>:
     766:	25 3b 09 3b 09 3b dc 3c 09 3b 09 3b 09 3b 09 3b     %;.;.;.<.;.;.;.;
     776:	6a 3b 09 3b 25 3b 09 3b 09 3b 25 3b 00 3d 0c 3d     j;.;%;.;.;%;.=.=
     786:	09 3b f4 3c 09 3b e8 3c 09 3b 09 3b 09 3b 09 3b     .;.<.;.<.;.;.;.;
     796:	dc 3c 09 3b 09 3b dc 3c 09 3b 09 3b 09 3b 09 3b     .<.;.;.<.;.;.;.;
     7a6:	09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b     .;.;.;.;.;.;.;.;
     7b6:	09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b     .;.;.;.;.;.;.;.;
     7c6:	09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b     .;.;.;.;.;.;.;.;
     7d6:	09 3b 09 3b 09 3b 4c 3b 09 3b 09 3b 09 3b 09 3b     .;.;.;L;.;.;.;.;
     7e6:	09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b     .;.;.;.;.;.;.;.;
     7f6:	09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b     .;.;.;.;.;.;.;.;
     806:	09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b     .;.;.;.;.;.;.;.;
     816:	09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b     .;.;.;.;.;.;.;.;
     826:	09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b     .;.;.;.;.;.;.;.;
     836:	09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b     .;.;.;.;.;.;.;.;
     846:	09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b     .;.;.;.;.;.;.;.;
     856:	09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 09 3b 6a 3b     .;.;.;.;.;.;.;j;

00000866 <readlnFuncs>:
     866:	6e 3c 20 3c 20 3c dc 3c 20 3c 20 3c 20 3c 20 3c     n< < <.< < < < <
     876:	bd 3c 20 3c 6e 3c 20 3c 20 3c 6e 3c 00 3d 0c 3d     .< <n< < <n<.=.=
     886:	20 3c f4 3c 20 3c e8 3c 20 3c 20 3c 20 3c 20 3c      <.< <.< < < < <
     896:	dc 3c 20 3c 20 3c dc 3c 20 3c 20 3c 20 3c 20 3c     .< < <.< < < < <
     8a6:	20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c      < < < < < < < <
     8b6:	20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c      < < < < < < < <
     8c6:	20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c      < < < < < < < <
     8d6:	20 3c 20 3c 20 3c 9f 3c 20 3c 20 3c 20 3c 20 3c      < < <.< < < < <
     8e6:	20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c      < < < < < < < <
     8f6:	20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c      < < < < < < < <
     906:	20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c      < < < < < < < <
     916:	20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c      < < < < < < < <
     926:	20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c      < < < < < < < <
     936:	20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c      < < < < < < < <
     946:	20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c      < < < < < < < <
     956:	20 3c 20 3c 20 3c 20 3c 20 3c 20 3c 20 3c bd 3c      < < < < < < <.<

00000966 <square_test1>:
     966:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     976:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     986:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     996:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     9a6:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     9b6:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     9c6:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000009d4 <square_test2>:
     9d4:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     9e4:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     9f4:	78 30 20 79 30 00                                   x0 y0.

000009fa <square_test10>:
     9fa:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     a0a:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     a1a:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000a26 <circle_test10>:
     a26:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     a36:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     a46:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     a56:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     a66:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     a76:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     a86:	30 00                                               0.

00000a88 <square_circle_test10>:
     a88:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     a98:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     aa8:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     ab8:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     ac8:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     ad8:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     ae8:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     af8:	31 30 20 79 30 00                                   10 y0.

00000afe <square_circle_test100>:
     afe:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     b0e:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     b1e:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     b2e:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     b3e:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     b4e:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     b5e:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     b6e:	35 30 20 6a 30 00                                   50 j0.

00000b74 <spiral_test5>:
     b74:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     b84:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     b94:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     ba4:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     bb4:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     bc4:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     bd4:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     be4:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

00000bee <spiral_test50a>:
     bee:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     bfe:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

00000c0e <dwell_test1>:
     c0e:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     c1e:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     c2e:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     c3e:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     c4e:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     c5e:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     c6e:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     c7e:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     c8e:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     c9e:	20 78 30 00                                          x0.

00000ca2 <dwell_test2>:
     ca2:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     cb2:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     cc2:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     cd2:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     ce2:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     cf2:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     d02:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     d12:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     d22:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000d2c <dwell_testMax>:
     d2c:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000d36 <g0_test1>:
     d36:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     d46:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000d56 <g0_test2>:
     d56:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     d66:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     d76:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     d86:	79 30 20 7a 30 00                                   y0 z0.

00000d8c <g0_test3>:
     d8c:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     d9c:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     dac:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000dba <radius_arc_test1>:
     dba:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     dca:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     dda:	72 35 30 0a 00                                      r50..

00000ddf <radius_arc_test2>:
     ddf:	67 32 0a 00                                         g2..

00000de3 <zoetrope>:
     de3:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     df3:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     e03:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     e13:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     e23:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     e33:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     e43:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     e53:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     e63:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     e73:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     e83:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     e93:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     ea3:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     eb3:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     ec3:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     ed3:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     ee3:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     ef3:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     f03:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     f13:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     f23:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     f33:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     f43:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     f53:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     f63:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     f73:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     f83:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     f93:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     fa3:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     fb3:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     fc3:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     fd3:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     fe3:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     ff3:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
    1003:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
    1013:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
    1023:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
    1033:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
    1043:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
    1053:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
    1063:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
    1073:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
    1083:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
    1093:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
    10a3:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
    10b3:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
    10c3:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
    10d3:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
    10e3:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
    10f3:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
    1103:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
    1113:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
    1123:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
    1133:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
    1143:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
    1153:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
    1163:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
    1173:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
    1183:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
    1193:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
    11a3:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
    11b3:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
    11c3:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
    11d3:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
    11e3:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
    11f3:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
    1203:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
    1213:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    1223:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    1233:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    1243:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    1253:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    1263:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    1273:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    1283:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    1293:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    12a3:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    12b3:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    12c3:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    12d3:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    12e3:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    12f3:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    1303:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    1313:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    1323:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    1333:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    1343:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    1353:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    1363:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    1373:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    1383:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    1393:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    13a3:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    13b3:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    13c3:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    13d3:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    13e3:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    13f3:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    1403:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    1413:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    1423:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    1433:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    1443:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    1453:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    1463:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    1473:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    1483:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    1493:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    14a3:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    14b3:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    14c3:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    14d3:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    14e3:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    14f3:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    1503:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    1513:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    1523:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    1533:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    1543:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    1553:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    1563:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    1573:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    1583:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    1593:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    15a3:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    15b3:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    15c3:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    15d3:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    15e3:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    15f3:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    1603:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    1613:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    1623:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    1633:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    1643:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    1653:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    1663:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    1673:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    1683:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    1693:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    16a3:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    16b3:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    16c3:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    16d3:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    16e3:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    16f3:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    1703:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    1713:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    1723:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    1733:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    1743:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    1753:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    1763:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    1773:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    1783:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    1793:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

0000179e <contraptor_circle>:
    179e:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    17ae:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    17be:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    17ce:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    17de:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    17ee:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    17fe:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    180e:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    181e:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    182e:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    183e:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    184e:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    185e:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    186e:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    187e:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    188e:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    189e:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    18ae:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    18be:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    18ce:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    18de:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    18ee:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    18fe:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    190e:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    191e:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    192e:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    193e:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    194e:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    195e:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    196e:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    197e:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    198e:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    199e:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    19ae:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    19be:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    19ce:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    19de:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    19ee:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    19fe:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    1a0e:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    1a1e:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1a2e:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1a3e:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    1a4e:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    1a5e:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    1a6e:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    1a7e:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    1a8e:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    1a9e:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1aae:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    1abe:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    1ace:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    1ade:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    1aee:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    1afe:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    1b0e:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1b1e:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1b2e:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1b3e:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1b4e:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1b5e:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1b6e:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001b7e <__c.3864>:
    1b7e:	62 75 69 6c 64 20 32 30 33 00                       build 203.

00001b88 <__c.3862>:
    1b88:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1b98:	25 53 0a 00                                         %S..

00001b9c <__c.3892>:
    1b9c:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1bac:	69 6c 65 0a 00                                      ile..

00001bb1 <tgModeStringControl>:
    1bb1:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001bbe <tgModeStringConfig>:
    1bbe:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001bca <tgModeStringGCode>:
    1bca:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

00001bd6 <tgModeStringDirect>:
    1bd6:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

00001be3 <tgModeStrings>:
    1be3:	b1 1b be 1b ca 1b d6 1b                             ........

00001beb <__c.3980>:
    1beb:	54 69 6e 79 47 20 5b 25 53 5d 3e 20 00              TinyG [%S]> .

00001bf8 <__c.3975>:
    1bf8:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001c06 <getcFuncs>:
    1c06:	a9 4e 8d 4e 8d 4e 1f 50 8d 4e 8d 4e 8d 4e 8d 4e     .N.N.N.P.N.N.N.N
    1c16:	ee 4e 8d 4e a9 4e 8d 4e 8d 4e a9 4e 43 50 4f 50     .N.N.N.N.N.NCPOP
    1c26:	8d 4e 37 50 8d 4e 2b 50 8d 4e 8d 4e 8d 4e 8d 4e     .N7P.N+P.N.N.N.N
    1c36:	1f 50 8d 4e 8d 4e 1f 50 8d 4e 8d 4e 8d 4e 8d 4e     .P.N.N.P.N.N.N.N
    1c46:	8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e     .N.N.N.N.N.N.N.N
    1c56:	8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e     .N.N.N.N.N.N.N.N
    1c66:	8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e     .N.N.N.N.N.N.N.N
    1c76:	8d 4e 8d 4e 8d 4e d0 4e 8d 4e 8d 4e 8d 4e 8d 4e     .N.N.N.N.N.N.N.N
    1c86:	8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e     .N.N.N.N.N.N.N.N
    1c96:	8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e     .N.N.N.N.N.N.N.N
    1ca6:	8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e     .N.N.N.N.N.N.N.N
    1cb6:	8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e     .N.N.N.N.N.N.N.N
    1cc6:	8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e     .N.N.N.N.N.N.N.N
    1cd6:	8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e     .N.N.N.N.N.N.N.N
    1ce6:	8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e     .N.N.N.N.N.N.N.N
    1cf6:	8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e 8d 4e ee 4e     .N.N.N.N.N.N.N.N

00001d06 <readlnFuncs>:
    1d06:	b1 4f 63 4f 63 4f 1f 50 63 4f 63 4f 63 4f 63 4f     .OcOcO.PcOcOcOcO
    1d16:	00 50 63 4f b1 4f 63 4f 63 4f b1 4f 43 50 4f 50     .PcO.OcOcO.OCPOP
    1d26:	63 4f 37 50 63 4f 2b 50 63 4f 63 4f 63 4f 63 4f     cO7PcO+PcOcOcOcO
    1d36:	1f 50 63 4f 63 4f 1f 50 63 4f 63 4f 63 4f 63 4f     .PcOcO.PcOcOcOcO
    1d46:	63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f     cOcOcOcOcOcOcOcO
    1d56:	63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f     cOcOcOcOcOcOcOcO
    1d66:	63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f     cOcOcOcOcOcOcOcO
    1d76:	63 4f 63 4f 63 4f e2 4f 63 4f 63 4f 63 4f 63 4f     cOcOcO.OcOcOcOcO
    1d86:	63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f     cOcOcOcOcOcOcOcO
    1d96:	63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f     cOcOcOcOcOcOcOcO
    1da6:	63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f     cOcOcOcOcOcOcOcO
    1db6:	63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f     cOcOcOcOcOcOcOcO
    1dc6:	63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f     cOcOcOcOcOcOcOcO
    1dd6:	63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f     cOcOcOcOcOcOcOcO
    1de6:	63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f     cOcOcOcOcOcOcOcO
    1df6:	63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 63 4f 00 50     cOcOcOcOcOcOcO.P

00001e06 <pstr_inf>:
    1e06:	49 4e 46                                            INF

00001e09 <pstr_inity>:
    1e09:	49 4e 49 54 59                                      INITY

00001e0e <pstr_nan>:
    1e0e:	4e 41 4e                                            NAN

00001e11 <pwr_m10>:
    1e11:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1e21:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001e29 <pwr_p10>:
    1e29:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1e39:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1e49:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1e59:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1e69:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1e79:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1e89:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1e99:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1ea9:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1eb9:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1ec9:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1ed9:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1ee9:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1ef9:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1f09:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1f19:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1f29:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1f39:	3d 27 00                                            ='.

00001f3c <__ctors_end>:
    1f3c:	11 24       	eor	r1, r1
    1f3e:	1f be       	out	0x3f, r1	; 63
    1f40:	cf ef       	ldi	r28, 0xFF	; 255
    1f42:	df e5       	ldi	r29, 0x5F	; 95
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	00 e0       	ldi	r16, 0x00	; 0
    1f4a:	0c bf       	out	0x3c, r16	; 60

00001f4c <__do_copy_data>:
    1f4c:	11 e2       	ldi	r17, 0x21	; 33
    1f4e:	a0 e0       	ldi	r26, 0x00	; 0
    1f50:	b0 e2       	ldi	r27, 0x20	; 32
    1f52:	ee e4       	ldi	r30, 0x4E	; 78
    1f54:	f6 ec       	ldi	r31, 0xC6	; 198
    1f56:	00 e0       	ldi	r16, 0x00	; 0
    1f58:	0b bf       	out	0x3b, r16	; 59
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <__do_copy_data+0x14>
    1f5c:	07 90       	elpm	r0, Z+
    1f5e:	0d 92       	st	X+, r0
    1f60:	ae 32       	cpi	r26, 0x2E	; 46
    1f62:	b1 07       	cpc	r27, r17
    1f64:	d9 f7       	brne	.-10     	; 0x1f5c <__do_copy_data+0x10>

00001f66 <__do_clear_bss>:
    1f66:	15 e2       	ldi	r17, 0x25	; 37
    1f68:	ae e2       	ldi	r26, 0x2E	; 46
    1f6a:	b1 e2       	ldi	r27, 0x21	; 33
    1f6c:	01 c0       	rjmp	.+2      	; 0x1f70 <.do_clear_bss_start>

00001f6e <.do_clear_bss_loop>:
    1f6e:	1d 92       	st	X+, r1

00001f70 <.do_clear_bss_start>:
    1f70:	aa 34       	cpi	r26, 0x4A	; 74
    1f72:	b1 07       	cpc	r27, r17
    1f74:	e1 f7       	brne	.-8      	; 0x1f6e <.do_clear_bss_loop>
    1f76:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <main>
    1f7a:	0c 94 25 63 	jmp	0xc64a	; 0xc64a <_exit>

00001f7e <__bad_interrupt>:
    1f7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001f82 <main>:
#include "encoder.h"
#include "gcode.h"


int main(void) 
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
	/* These inits are order dependent */
	cli();
    1f8a:	f8 94       	cli
	xmega_init();				// xmega setup
    1f8c:	0e 94 16 23 	call	0x462c	; 0x462c <xmega_init>
	xio_init();					// xmega io subsystem
    1f90:	0e 94 94 35 	call	0x6b28	; 0x6b28 <xio_init>

	cfg_init();					// get config record from eeprom
    1f94:	0e 94 67 1a 	call	0x34ce	; 0x34ce <cfg_init>
	st_init(); 					// stepper subsystem
    1f98:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <st_init>
	ls_init();					// limit switches
    1f9c:	0e 94 1a 48 	call	0x9034	; 0x9034 <ls_init>
	mv_init();					// move buffers
    1fa0:	0e 94 a9 44 	call	0x8952	; 0x8952 <mv_init>
	mc_init();					// motion control subsystem
    1fa4:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <mc_init>
	spindle_init();				// spindle controller
    1fa8:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <spindle_init>
	en_init();					// encoders
    1fac:	0e 94 c5 22 	call	0x458a	; 0x458a <en_init>
	gc_init();					// gcode-parser
    1fb0:	0e 94 00 10 	call	0x2000	; 0x2000 <gc_init>
	dd_init();					// direct drive commands
    1fb4:	0e 94 93 44 	call	0x8926	; 0x8926 <dd_init>
	tg_init();					// tinyg parsers
    1fb8:	0e 94 42 42 	call	0x8484	; 0x8484 <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1fbc:	0e 94 7e 35 	call	0x6afc	; 0x6afc <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1fc0:	a0 ea       	ldi	r26, 0xA0	; 160
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e0 ea       	ldi	r30, 0xA0	; 160
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	82 81       	ldd	r24, Z+2	; 0x02
    1fca:	81 60       	ori	r24, 0x01	; 1
    1fcc:	12 96       	adiw	r26, 0x02	; 2
    1fce:	8c 93       	st	X, r24
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1fd0:	a0 ea       	ldi	r26, 0xA0	; 160
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e0 ea       	ldi	r30, 0xA0	; 160
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	82 60       	ori	r24, 0x02	; 2
    1fdc:	12 96       	adiw	r26, 0x02	; 2
    1fde:	8c 93       	st	X, r24
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1fe0:	a0 ea       	ldi	r26, 0xA0	; 160
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e0 ea       	ldi	r30, 0xA0	; 160
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	82 81       	ldd	r24, Z+2	; 0x02
    1fea:	84 60       	ori	r24, 0x04	; 4
    1fec:	12 96       	adiw	r26, 0x02	; 2
    1fee:	8c 93       	st	X, r24
	sei();						// enable global interrupts
    1ff0:	78 94       	sei

	// Debug help:
	// Pre-load the USB RX (input) buffer with some test strings
	// Be mindful of the 16 char limit on the RX (circular) buffer.
//	xio_usb_queue_RX_char(ETX);			// set control-c (kill)
	xio_usb_queue_RX_string("f\n");
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e2       	ldi	r25, 0x20	; 32
    1ff6:	0e 94 6f 39 	call	0x72de	; 0x72de <xio_usb_queue_RX_string>
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");

	for(;;){
		tg_controller();
    1ffa:	0e 94 99 42 	call	0x8532	; 0x8532 <tg_controller>
    1ffe:	fd cf       	rjmp	.-6      	; 0x1ffa <main+0x78>

00002000 <gc_init>:

/* 
 * gc_init() 
 */

void gc_init() {
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    2008:	8e e2       	ldi	r24, 0x2E	; 46
    200a:	91 e2       	ldi	r25, 0x21	; 33
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	46 e5       	ldi	r20, 0x56	; 86
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	0e 94 e1 61 	call	0xc3c2	; 0xc3c2 <memset>
  	gc.dwell_time = 0; 						// was 'p' 
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a0 e0       	ldi	r26, 0x00	; 0
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	80 93 3f 21 	sts	0x213F, r24
    2024:	90 93 40 21 	sts	0x2140, r25
    2028:	a0 93 41 21 	sts	0x2141, r26
    202c:	b0 93 42 21 	sts	0x2142, r27
	gc.radius = 0;							// radius value
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 e0       	ldi	r26, 0x00	; 0
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	80 93 43 21 	sts	0x2143, r24
    203c:	90 93 44 21 	sts	0x2144, r25
    2040:	a0 93 45 21 	sts	0x2145, r26
    2044:	b0 93 46 21 	sts	0x2146, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    2048:	80 91 80 24 	lds	r24, 0x2480
    204c:	90 91 81 24 	lds	r25, 0x2481
    2050:	a0 91 82 24 	lds	r26, 0x2482
    2054:	b0 91 83 24 	lds	r27, 0x2483
    2058:	80 93 47 21 	sts	0x2147, r24
    205c:	90 93 48 21 	sts	0x2148, r25
    2060:	a0 93 49 21 	sts	0x2149, r26
    2064:	b0 93 4a 21 	sts	0x214A, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    2068:	80 91 84 24 	lds	r24, 0x2484
    206c:	90 91 85 24 	lds	r25, 0x2485
    2070:	a0 91 86 24 	lds	r26, 0x2486
    2074:	b0 91 87 24 	lds	r27, 0x2487
    2078:	80 93 4b 21 	sts	0x214B, r24
    207c:	90 93 4c 21 	sts	0x214C, r25
    2080:	a0 93 4d 21 	sts	0x214D, r26
    2084:	b0 93 4e 21 	sts	0x214E, r27

	gc.absolute_mode = TRUE;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	80 93 3c 21 	sts	0x213C, r24
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	a0 e8       	ldi	r26, 0x80	; 128
    2094:	bf eb       	ldi	r27, 0xBF	; 191
    2096:	80 93 53 21 	sts	0x2153, r24
    209a:	90 93 54 21 	sts	0x2154, r25
    209e:	a0 93 55 21 	sts	0x2155, r26
    20a2:	b0 93 56 21 	sts	0x2156, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    20a6:	10 92 3d 21 	sts	0x213D, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    20aa:	10 92 82 21 	sts	0x2182, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    20ae:	10 92 83 21 	sts	0x2183, r1

	select_plane(X, Y, Z);
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	61 e0       	ldi	r22, 0x01	; 1
    20b6:	42 e0       	ldi	r20, 0x02	; 2
    20b8:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <select_plane>
}
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <gc_gcode_parser+0x6>
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	9a 83       	std	Y+2, r25	; 0x02
	_gc_normalize_gcode_block(block);
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	9a 81       	ldd	r25, Y+2	; 0x02
    20d4:	0e 94 92 10 	call	0x2124	; 0x2124 <_gc_normalize_gcode_block>
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    20d8:	e9 81       	ldd	r30, Y+1	; 0x01
    20da:	fa 81       	ldd	r31, Y+2	; 0x02
    20dc:	80 81       	ld	r24, Z
    20de:	88 32       	cpi	r24, 0x28	; 40
    20e0:	11 f4       	brne	.+4      	; 0x20e6 <gc_gcode_parser+0x24>
		return(TG_OK);
    20e2:	1b 82       	std	Y+3, r1	; 0x03
    20e4:	18 c0       	rjmp	.+48     	; 0x2116 <gc_gcode_parser+0x54>
	}
	if (block[0] == 'Q') { 					// quit
    20e6:	e9 81       	ldd	r30, Y+1	; 0x01
    20e8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ea:	80 81       	ld	r24, Z
    20ec:	81 35       	cpi	r24, 0x51	; 81
    20ee:	19 f4       	brne	.+6      	; 0x20f6 <gc_gcode_parser+0x34>
		return(TG_QUIT);
    20f0:	83 e0       	ldi	r24, 0x03	; 3
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    20f4:	10 c0       	rjmp	.+32     	; 0x2116 <gc_gcode_parser+0x54>
	} 
	if (block[0] == '/') { 					// ignore block delete
    20f6:	e9 81       	ldd	r30, Y+1	; 0x01
    20f8:	fa 81       	ldd	r31, Y+2	; 0x02
    20fa:	80 81       	ld	r24, Z
    20fc:	8f 32       	cpi	r24, 0x2F	; 47
    20fe:	11 f4       	brne	.+4      	; 0x2104 <gc_gcode_parser+0x42>
		return(TG_OK);
    2100:	1b 82       	std	Y+3, r1	; 0x03
    2102:	09 c0       	rjmp	.+18     	; 0x2116 <gc_gcode_parser+0x54>
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	0e 94 81 12 	call	0x2502	; 0x2502 <gc_execute_block>
    210c:	80 93 2e 21 	sts	0x212E, r24
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    2110:	80 91 2e 21 	lds	r24, 0x212E
    2114:	8b 83       	std	Y+3, r24	; 0x03
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2118:	23 96       	adiw	r28, 0x03	; 3
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <_gc_normalize_gcode_block>:

/*
 * _gc_normalize_gcode_block() - normalize a block (line) of gcode in place
 */

char *_gc_normalize_gcode_block(char *block) {
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <_gc_normalize_gcode_block+0x6>
    212a:	00 d0       	rcall	.+0      	; 0x212c <_gc_normalize_gcode_block+0x8>
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	8c 83       	std	Y+4, r24	; 0x04
    2132:	9d 83       	std	Y+5, r25	; 0x05

	char c;
	uint8_t i = 0; 		// index for incoming characters
    2134:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t j = 0;		// index for normalized characters
    2136:	19 82       	std	Y+1, r1	; 0x01
    2138:	25 c0       	rjmp	.+74     	; 0x2184 <_gc_normalize_gcode_block+0x60>

	while ((c = block[i++]) != NUL) {
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	81 32       	cpi	r24, 0x21	; 33
    213e:	10 f1       	brcs	.+68     	; 0x2184 <_gc_normalize_gcode_block+0x60>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	81 36       	cpi	r24, 0x61	; 97
    2144:	90 f0       	brcs	.+36     	; 0x216a <_gc_normalize_gcode_block+0x46>
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	8b 37       	cpi	r24, 0x7B	; 123
    214a:	78 f4       	brcc	.+30     	; 0x216a <_gc_normalize_gcode_block+0x46>
			block[j++] = c-'a'+'A';
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	8c 81       	ldd	r24, Y+4	; 0x04
    2154:	9d 81       	ldd	r25, Y+5	; 0x05
    2156:	fc 01       	movw	r30, r24
    2158:	e2 0f       	add	r30, r18
    215a:	f3 1f       	adc	r31, r19
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	80 52       	subi	r24, 0x20	; 32
    2160:	80 83       	st	Z, r24
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	8f 5f       	subi	r24, 0xFF	; 255
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	0d c0       	rjmp	.+26     	; 0x2184 <_gc_normalize_gcode_block+0x60>
		} else {
			block[j++] = c;
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	8c 81       	ldd	r24, Y+4	; 0x04
    2172:	9d 81       	ldd	r25, Y+5	; 0x05
    2174:	fc 01       	movw	r30, r24
    2176:	e2 0f       	add	r30, r18
    2178:	f3 1f       	adc	r31, r19
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	80 83       	st	Z, r24
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	8f 5f       	subi	r24, 0xFF	; 255
    2182:	89 83       	std	Y+1, r24	; 0x01

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	8c 81       	ldd	r24, Y+4	; 0x04
    218c:	9d 81       	ldd	r25, Y+5	; 0x05
    218e:	fc 01       	movw	r30, r24
    2190:	e2 0f       	add	r30, r18
    2192:	f3 1f       	adc	r31, r19
    2194:	80 81       	ld	r24, Z
    2196:	8b 83       	std	Y+3, r24	; 0x03
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	8e 83       	std	Y+6, r24	; 0x06
    219c:	8e 81       	ldd	r24, Y+6	; 0x06
    219e:	88 23       	and	r24, r24
    21a0:	11 f0       	breq	.+4      	; 0x21a6 <_gc_normalize_gcode_block+0x82>
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	8e 83       	std	Y+6, r24	; 0x06
    21a6:	8e 81       	ldd	r24, Y+6	; 0x06
    21a8:	9a 81       	ldd	r25, Y+2	; 0x02
    21aa:	9f 5f       	subi	r25, 0xFF	; 255
    21ac:	9a 83       	std	Y+2, r25	; 0x02
    21ae:	88 23       	and	r24, r24
    21b0:	21 f6       	brne	.-120    	; 0x213a <_gc_normalize_gcode_block+0x16>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ba:	9d 81       	ldd	r25, Y+5	; 0x05
    21bc:	fc 01       	movw	r30, r24
    21be:	e2 0f       	add	r30, r18
    21c0:	f3 1f       	adc	r31, r19
    21c2:	10 82       	st	Z, r1
	return block;
    21c4:	8c 81       	ldd	r24, Y+4	; 0x04
    21c6:	9d 81       	ldd	r25, Y+5	; 0x05
}
    21c8:	26 96       	adiw	r28, 0x06	; 6
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <select_plane>:
/* 
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	00 d0       	rcall	.+0      	; 0x21da <select_plane+0x6>
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	89 83       	std	Y+1, r24	; 0x01
    21e0:	6a 83       	std	Y+2, r22	; 0x02
    21e2:	4b 83       	std	Y+3, r20	; 0x03
	gc.plane_axis_0 = axis_0;
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	80 93 7b 21 	sts	0x217B, r24
	gc.plane_axis_1 = axis_1;
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	80 93 7c 21 	sts	0x217C, r24
	gc.plane_axis_2 = axis_2;
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	80 93 7d 21 	sts	0x217D, r24
}
    21f6:	23 96       	adiw	r28, 0x03	; 3
    21f8:	cd bf       	out	0x3d, r28	; 61
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	28 97       	sbiw	r28, 0x08	; 8
    220c:	cd bf       	out	0x3d, r28	; 61
    220e:	de bf       	out	0x3e, r29	; 62
    2210:	69 83       	std	Y+1, r22	; 0x01
    2212:	7a 83       	std	Y+2, r23	; 0x02
    2214:	8b 83       	std	Y+3, r24	; 0x03
    2216:	9c 83       	std	Y+4, r25	; 0x04
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    2218:	80 91 3b 21 	lds	r24, 0x213B
    221c:	88 23       	and	r24, r24
    221e:	89 f0       	breq	.+34     	; 0x2242 <to_millimeters+0x40>
    2220:	69 81       	ldd	r22, Y+1	; 0x01
    2222:	7a 81       	ldd	r23, Y+2	; 0x02
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	9c 81       	ldd	r25, Y+4	; 0x04
    2228:	25 e8       	ldi	r18, 0x85	; 133
    222a:	32 e4       	ldi	r19, 0x42	; 66
    222c:	41 e2       	ldi	r20, 0x21	; 33
    222e:	5d e3       	ldi	r21, 0x3D	; 61
    2230:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	8d 83       	std	Y+5, r24	; 0x05
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	af 83       	std	Y+7, r26	; 0x07
    223e:	b8 87       	std	Y+8, r27	; 0x08
    2240:	08 c0       	rjmp	.+16     	; 0x2252 <to_millimeters+0x50>
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	ab 81       	ldd	r26, Y+3	; 0x03
    2248:	bc 81       	ldd	r27, Y+4	; 0x04
    224a:	8d 83       	std	Y+5, r24	; 0x05
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	af 83       	std	Y+7, r26	; 0x07
    2250:	b8 87       	std	Y+8, r27	; 0x08
    2252:	8d 81       	ldd	r24, Y+5	; 0x05
    2254:	9e 81       	ldd	r25, Y+6	; 0x06
    2256:	af 81       	ldd	r26, Y+7	; 0x07
    2258:	b8 85       	ldd	r27, Y+8	; 0x08
}
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	28 96       	adiw	r28, 0x08	; 8
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	60 97       	sbiw	r28, 0x10	; 16
    2274:	cd bf       	out	0x3d, r28	; 61
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	6d 83       	std	Y+5, r22	; 0x05
    227a:	7e 83       	std	Y+6, r23	; 0x06
    227c:	8f 83       	std	Y+7, r24	; 0x07
    227e:	98 87       	std	Y+8, r25	; 0x08
    2280:	29 87       	std	Y+9, r18	; 0x09
    2282:	3a 87       	std	Y+10, r19	; 0x0a
    2284:	4b 87       	std	Y+11, r20	; 0x0b
    2286:	5c 87       	std	Y+12, r21	; 0x0c
	double theta = atan(x/fabs(y));
    2288:	89 85       	ldd	r24, Y+9	; 0x09
    228a:	9a 85       	ldd	r25, Y+10	; 0x0a
    228c:	ab 85       	ldd	r26, Y+11	; 0x0b
    228e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2290:	9c 01       	movw	r18, r24
    2292:	ad 01       	movw	r20, r26
    2294:	5f 77       	andi	r21, 0x7F	; 127
    2296:	6d 81       	ldd	r22, Y+5	; 0x05
    2298:	7e 81       	ldd	r23, Y+6	; 0x06
    229a:	8f 81       	ldd	r24, Y+7	; 0x07
    229c:	98 85       	ldd	r25, Y+8	; 0x08
    229e:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	bc 01       	movw	r22, r24
    22a8:	cd 01       	movw	r24, r26
    22aa:	0e 94 03 5b 	call	0xb606	; 0xb606 <atan>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	9a 83       	std	Y+2, r25	; 0x02
    22b6:	ab 83       	std	Y+3, r26	; 0x03
    22b8:	bc 83       	std	Y+4, r27	; 0x04

	if (y>0) {
    22ba:	69 85       	ldd	r22, Y+9	; 0x09
    22bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    22be:	8b 85       	ldd	r24, Y+11	; 0x0b
    22c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	50 e0       	ldi	r21, 0x00	; 0
    22ca:	0e 94 2e 5d 	call	0xba5c	; 0xba5c <__gesf2>
    22ce:	18 16       	cp	r1, r24
    22d0:	4c f4       	brge	.+18     	; 0x22e4 <theta+0x7a>
		return(theta);
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	9a 81       	ldd	r25, Y+2	; 0x02
    22d6:	ab 81       	ldd	r26, Y+3	; 0x03
    22d8:	bc 81       	ldd	r27, Y+4	; 0x04
    22da:	8d 87       	std	Y+13, r24	; 0x0d
    22dc:	9e 87       	std	Y+14, r25	; 0x0e
    22de:	af 87       	std	Y+15, r26	; 0x0f
    22e0:	b8 8b       	std	Y+16, r27	; 0x10
    22e2:	2d c0       	rjmp	.+90     	; 0x233e <theta+0xd4>
	} else {
		if (theta>0) 
    22e4:	69 81       	ldd	r22, Y+1	; 0x01
    22e6:	7a 81       	ldd	r23, Y+2	; 0x02
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	9c 81       	ldd	r25, Y+4	; 0x04
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	50 e0       	ldi	r21, 0x00	; 0
    22f4:	0e 94 2e 5d 	call	0xba5c	; 0xba5c <__gesf2>
    22f8:	18 16       	cp	r1, r24
    22fa:	8c f4       	brge	.+34     	; 0x231e <theta+0xb4>
	    {
			return(M_PI-theta);
    22fc:	6b ed       	ldi	r22, 0xDB	; 219
    22fe:	7f e0       	ldi	r23, 0x0F	; 15
    2300:	89 e4       	ldi	r24, 0x49	; 73
    2302:	90 e4       	ldi	r25, 0x40	; 64
    2304:	29 81       	ldd	r18, Y+1	; 0x01
    2306:	3a 81       	ldd	r19, Y+2	; 0x02
    2308:	4b 81       	ldd	r20, Y+3	; 0x03
    230a:	5c 81       	ldd	r21, Y+4	; 0x04
    230c:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	8d 87       	std	Y+13, r24	; 0x0d
    2316:	9e 87       	std	Y+14, r25	; 0x0e
    2318:	af 87       	std	Y+15, r26	; 0x0f
    231a:	b8 8b       	std	Y+16, r27	; 0x10
    231c:	10 c0       	rjmp	.+32     	; 0x233e <theta+0xd4>
    	} else {
			return(-M_PI-theta);
    231e:	6b ed       	ldi	r22, 0xDB	; 219
    2320:	7f e0       	ldi	r23, 0x0F	; 15
    2322:	89 e4       	ldi	r24, 0x49	; 73
    2324:	90 ec       	ldi	r25, 0xC0	; 192
    2326:	29 81       	ldd	r18, Y+1	; 0x01
    2328:	3a 81       	ldd	r19, Y+2	; 0x02
    232a:	4b 81       	ldd	r20, Y+3	; 0x03
    232c:	5c 81       	ldd	r21, Y+4	; 0x04
    232e:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	8d 87       	std	Y+13, r24	; 0x0d
    2338:	9e 87       	std	Y+14, r25	; 0x0e
    233a:	af 87       	std	Y+15, r26	; 0x0f
    233c:	b8 8b       	std	Y+16, r27	; 0x10
    233e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2340:	9e 85       	ldd	r25, Y+14	; 0x0e
    2342:	af 85       	ldd	r26, Y+15	; 0x0f
    2344:	b8 89       	ldd	r27, Y+16	; 0x10
		}
	}
}
    2346:	bc 01       	movw	r22, r24
    2348:	cd 01       	movw	r24, r26
    234a:	60 96       	adiw	r28, 0x10	; 16
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    2356:	ef 92       	push	r14
    2358:	ff 92       	push	r15
    235a:	0f 93       	push	r16
    235c:	1f 93       	push	r17
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	2c 97       	sbiw	r28, 0x0c	; 12
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	9a 83       	std	Y+2, r25	; 0x02
    2370:	6b 83       	std	Y+3, r22	; 0x03
    2372:	7c 83       	std	Y+4, r23	; 0x04
    2374:	4d 83       	std	Y+5, r20	; 0x05
    2376:	5e 83       	std	Y+6, r21	; 0x06
    2378:	2f 83       	std	Y+7, r18	; 0x07
    237a:	38 87       	std	Y+8, r19	; 0x08
    237c:	09 87       	std	Y+9, r16	; 0x09
    237e:	1a 87       	std	Y+10, r17	; 0x0a
	if (buf[*i] == 0) {
    2380:	e9 85       	ldd	r30, Y+9	; 0x09
    2382:	fa 85       	ldd	r31, Y+10	; 0x0a
    2384:	80 81       	ld	r24, Z
    2386:	91 81       	ldd	r25, Z+1	; 0x01
    2388:	9c 01       	movw	r18, r24
    238a:	8f 81       	ldd	r24, Y+7	; 0x07
    238c:	98 85       	ldd	r25, Y+8	; 0x08
    238e:	fc 01       	movw	r30, r24
    2390:	e2 0f       	add	r30, r18
    2392:	f3 1f       	adc	r31, r19
    2394:	80 81       	ld	r24, Z
    2396:	88 23       	and	r24, r24
    2398:	19 f4       	brne	.+6      	; 0x23a0 <_gc_next_statement+0x4a>
		return(FALSE); // No more statements
    239a:	1b 86       	std	Y+11, r1	; 0x0b
    239c:	1c 86       	std	Y+12, r1	; 0x0c
    239e:	57 c0       	rjmp	.+174    	; 0x244e <_gc_next_statement+0xf8>
	}
  
	*letter = buf[*i];
    23a0:	e9 85       	ldd	r30, Y+9	; 0x09
    23a2:	fa 85       	ldd	r31, Y+10	; 0x0a
    23a4:	80 81       	ld	r24, Z
    23a6:	91 81       	ldd	r25, Z+1	; 0x01
    23a8:	9c 01       	movw	r18, r24
    23aa:	8f 81       	ldd	r24, Y+7	; 0x07
    23ac:	98 85       	ldd	r25, Y+8	; 0x08
    23ae:	fc 01       	movw	r30, r24
    23b0:	e2 0f       	add	r30, r18
    23b2:	f3 1f       	adc	r31, r19
    23b4:	80 81       	ld	r24, Z
    23b6:	e9 81       	ldd	r30, Y+1	; 0x01
    23b8:	fa 81       	ldd	r31, Y+2	; 0x02
    23ba:	80 83       	st	Z, r24
	if((*letter < 'A') || (*letter > 'Z')) {
    23bc:	e9 81       	ldd	r30, Y+1	; 0x01
    23be:	fa 81       	ldd	r31, Y+2	; 0x02
    23c0:	80 81       	ld	r24, Z
    23c2:	81 34       	cpi	r24, 0x41	; 65
    23c4:	28 f0       	brcs	.+10     	; 0x23d0 <_gc_next_statement+0x7a>
    23c6:	e9 81       	ldd	r30, Y+1	; 0x01
    23c8:	fa 81       	ldd	r31, Y+2	; 0x02
    23ca:	80 81       	ld	r24, Z
    23cc:	8b 35       	cpi	r24, 0x5B	; 91
    23ce:	30 f0       	brcs	.+12     	; 0x23dc <_gc_next_statement+0x86>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    23d0:	8a e0       	ldi	r24, 0x0A	; 10
    23d2:	80 93 2e 21 	sts	0x212E, r24
		return(FALSE);
    23d6:	1b 86       	std	Y+11, r1	; 0x0b
    23d8:	1c 86       	std	Y+12, r1	; 0x0c
    23da:	39 c0       	rjmp	.+114    	; 0x244e <_gc_next_statement+0xf8>
	}
	(*i)++;
    23dc:	e9 85       	ldd	r30, Y+9	; 0x09
    23de:	fa 85       	ldd	r31, Y+10	; 0x0a
    23e0:	80 81       	ld	r24, Z
    23e2:	91 81       	ldd	r25, Z+1	; 0x01
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	e9 85       	ldd	r30, Y+9	; 0x09
    23e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    23ea:	80 83       	st	Z, r24
    23ec:	91 83       	std	Z+1, r25	; 0x01
	if (!_gc_read_double(buf, i, value_ptr)) {
    23ee:	8f 81       	ldd	r24, Y+7	; 0x07
    23f0:	98 85       	ldd	r25, Y+8	; 0x08
    23f2:	29 85       	ldd	r18, Y+9	; 0x09
    23f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    23f6:	4b 81       	ldd	r20, Y+3	; 0x03
    23f8:	5c 81       	ldd	r21, Y+4	; 0x04
    23fa:	b9 01       	movw	r22, r18
    23fc:	0e 94 33 12 	call	0x2466	; 0x2466 <_gc_read_double>
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	19 f4       	brne	.+6      	; 0x240a <_gc_next_statement+0xb4>
		return(FALSE);
    2404:	1b 86       	std	Y+11, r1	; 0x0b
    2406:	1c 86       	std	Y+12, r1	; 0x0c
    2408:	22 c0       	rjmp	.+68     	; 0x244e <_gc_next_statement+0xf8>
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    240a:	eb 81       	ldd	r30, Y+3	; 0x03
    240c:	fc 81       	ldd	r31, Y+4	; 0x04
    240e:	e0 80       	ld	r14, Z
    2410:	f1 80       	ldd	r15, Z+1	; 0x01
    2412:	02 81       	ldd	r16, Z+2	; 0x02
    2414:	13 81       	ldd	r17, Z+3	; 0x03
    2416:	eb 81       	ldd	r30, Y+3	; 0x03
    2418:	fc 81       	ldd	r31, Y+4	; 0x04
    241a:	80 81       	ld	r24, Z
    241c:	91 81       	ldd	r25, Z+1	; 0x01
    241e:	a2 81       	ldd	r26, Z+2	; 0x02
    2420:	b3 81       	ldd	r27, Z+3	; 0x03
    2422:	bc 01       	movw	r22, r24
    2424:	cd 01       	movw	r24, r26
    2426:	0e 94 ae 5e 	call	0xbd5c	; 0xbd5c <trunc>
    242a:	9b 01       	movw	r18, r22
    242c:	ac 01       	movw	r20, r24
    242e:	c8 01       	movw	r24, r16
    2430:	b7 01       	movw	r22, r14
    2432:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	ed 81       	ldd	r30, Y+5	; 0x05
    243c:	fe 81       	ldd	r31, Y+6	; 0x06
    243e:	80 83       	st	Z, r24
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	a2 83       	std	Z+2, r26	; 0x02
    2444:	b3 83       	std	Z+3, r27	; 0x03
	return(TRUE);
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	8b 87       	std	Y+11, r24	; 0x0b
    244c:	9c 87       	std	Y+12, r25	; 0x0c
    244e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2450:	9c 85       	ldd	r25, Y+12	; 0x0c
}
    2452:	2c 96       	adiw	r28, 0x0c	; 12
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	1f 91       	pop	r17
    245e:	0f 91       	pop	r16
    2460:	ff 90       	pop	r15
    2462:	ef 90       	pop	r14
    2464:	08 95       	ret

00002466 <_gc_read_double>:
 *	i			index into string array (position on the line)
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	2c 97       	sbiw	r28, 0x0c	; 12
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	8d 83       	std	Y+5, r24	; 0x05
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	6f 83       	std	Y+7, r22	; 0x07
    247a:	78 87       	std	Y+8, r23	; 0x08
    247c:	49 87       	std	Y+9, r20	; 0x09
    247e:	5a 87       	std	Y+10, r21	; 0x0a
	char *start = buf + *i;
    2480:	ef 81       	ldd	r30, Y+7	; 0x07
    2482:	f8 85       	ldd	r31, Y+8	; 0x08
    2484:	80 81       	ld	r24, Z
    2486:	91 81       	ldd	r25, Z+1	; 0x01
    2488:	9c 01       	movw	r18, r24
    248a:	8d 81       	ldd	r24, Y+5	; 0x05
    248c:	9e 81       	ldd	r25, Y+6	; 0x06
    248e:	82 0f       	add	r24, r18
    2490:	93 1f       	adc	r25, r19
    2492:	89 83       	std	Y+1, r24	; 0x01
    2494:	9a 83       	std	Y+2, r25	; 0x02
	char *end;
  
	*double_ptr = strtod(start, &end);
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	9a 81       	ldd	r25, Y+2	; 0x02
    249a:	9e 01       	movw	r18, r28
    249c:	2d 5f       	subi	r18, 0xFD	; 253
    249e:	3f 4f       	sbci	r19, 0xFF	; 255
    24a0:	b9 01       	movw	r22, r18
    24a2:	0e 94 49 5f 	call	0xbe92	; 0xbe92 <strtod>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	e9 85       	ldd	r30, Y+9	; 0x09
    24ac:	fa 85       	ldd	r31, Y+10	; 0x0a
    24ae:	80 83       	st	Z, r24
    24b0:	91 83       	std	Z+1, r25	; 0x01
    24b2:	a2 83       	std	Z+2, r26	; 0x02
    24b4:	b3 83       	std	Z+3, r27	; 0x03
	if(end == start) { 
    24b6:	2b 81       	ldd	r18, Y+3	; 0x03
    24b8:	3c 81       	ldd	r19, Y+4	; 0x04
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	9a 81       	ldd	r25, Y+2	; 0x02
    24be:	28 17       	cp	r18, r24
    24c0:	39 07       	cpc	r19, r25
    24c2:	31 f4       	brne	.+12     	; 0x24d0 <_gc_read_double+0x6a>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    24c4:	8d e0       	ldi	r24, 0x0D	; 13
    24c6:	80 93 2e 21 	sts	0x212E, r24
		return(FALSE); 
    24ca:	1b 86       	std	Y+11, r1	; 0x0b
    24cc:	1c 86       	std	Y+12, r1	; 0x0c
    24ce:	11 c0       	rjmp	.+34     	; 0x24f2 <_gc_read_double+0x8c>
	};
	*i = end - buf;
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	9c 81       	ldd	r25, Y+4	; 0x04
    24d4:	9c 01       	movw	r18, r24
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	a9 01       	movw	r20, r18
    24dc:	48 1b       	sub	r20, r24
    24de:	59 0b       	sbc	r21, r25
    24e0:	ca 01       	movw	r24, r20
    24e2:	ef 81       	ldd	r30, Y+7	; 0x07
    24e4:	f8 85       	ldd	r31, Y+8	; 0x08
    24e6:	80 83       	st	Z, r24
    24e8:	91 83       	std	Z+1, r25	; 0x01
	return(TRUE);
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	8b 87       	std	Y+11, r24	; 0x0b
    24f0:	9c 87       	std	Y+12, r25	; 0x0c
    24f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    24f4:	9c 85       	ldd	r25, Y+12	; 0x0c
}
    24f6:	2c 96       	adiw	r28, 0x0c	; 12
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	08 95       	ret

00002502 <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    2502:	8f 92       	push	r8
    2504:	9f 92       	push	r9
    2506:	af 92       	push	r10
    2508:	bf 92       	push	r11
    250a:	cf 92       	push	r12
    250c:	df 92       	push	r13
    250e:	ef 92       	push	r14
    2510:	ff 92       	push	r15
    2512:	0f 93       	push	r16
    2514:	1f 93       	push	r17
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	a1 97       	sbiw	r28, 0x21	; 33
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	8b 83       	std	Y+3, r24	; 0x03
    2526:	9c 83       	std	Y+4, r25	; 0x04
	int i = 0;  				// index into Gcode block buffer (buf)
    2528:	19 82       	std	Y+1, r1	; 0x01
    252a:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    252c:	83 e6       	ldi	r24, 0x63	; 99
    252e:	91 e2       	ldi	r25, 0x21	; 33
    2530:	60 e0       	ldi	r22, 0x00	; 0
    2532:	70 e0       	ldi	r23, 0x00	; 0
    2534:	4c e0       	ldi	r20, 0x0C	; 12
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	0e 94 e1 61 	call	0xc3c2	; 0xc3c2 <memset>
	clear_vector(gc.offset);
    253c:	8f e6       	ldi	r24, 0x6F	; 111
    253e:	91 e2       	ldi	r25, 0x21	; 33
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	70 e0       	ldi	r23, 0x00	; 0
    2544:	4c e0       	ldi	r20, 0x0C	; 12
    2546:	50 e0       	ldi	r21, 0x00	; 0
    2548:	0e 94 e1 61 	call	0xc3c2	; 0xc3c2 <memset>

	gc.status = TG_OK;
    254c:	10 92 2e 21 	sts	0x212E, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    2550:	10 92 3e 21 	sts	0x213E, r1
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set
    2554:	10 92 83 21 	sts	0x2183, r1
    2558:	87 c1       	rjmp	.+782    	; 0x2868 <gc_execute_block+0x366>

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    255a:	80 91 2f 21 	lds	r24, 0x212F
    255e:	28 2f       	mov	r18, r24
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	28 a3       	std	Y+32, r18	; 0x20
    2564:	39 a3       	std	Y+33, r19	; 0x21
    2566:	88 a1       	ldd	r24, Y+32	; 0x20
    2568:	99 a1       	ldd	r25, Y+33	; 0x21
    256a:	8d 34       	cpi	r24, 0x4D	; 77
    256c:	91 05       	cpc	r25, r1
    256e:	09 f4       	brne	.+2      	; 0x2572 <gc_execute_block+0x70>
    2570:	11 c1       	rjmp	.+546    	; 0x2794 <gc_execute_block+0x292>
    2572:	a8 a1       	ldd	r26, Y+32	; 0x20
    2574:	b9 a1       	ldd	r27, Y+33	; 0x21
    2576:	a4 35       	cpi	r26, 0x54	; 84
    2578:	b1 05       	cpc	r27, r1
    257a:	09 f4       	brne	.+2      	; 0x257e <gc_execute_block+0x7c>
    257c:	5b c1       	rjmp	.+694    	; 0x2834 <gc_execute_block+0x332>
    257e:	28 a1       	ldd	r18, Y+32	; 0x20
    2580:	39 a1       	ldd	r19, Y+33	; 0x21
    2582:	27 34       	cpi	r18, 0x47	; 71
    2584:	31 05       	cpc	r19, r1
    2586:	09 f0       	breq	.+2      	; 0x258a <gc_execute_block+0x88>
    2588:	6b c1       	rjmp	.+726    	; 0x2860 <gc_execute_block+0x35e>
			case 'G':
				switch((int)gc.value) {
    258a:	80 91 30 21 	lds	r24, 0x2130
    258e:	90 91 31 21 	lds	r25, 0x2131
    2592:	a0 91 32 21 	lds	r26, 0x2132
    2596:	b0 91 33 21 	lds	r27, 0x2133
    259a:	bc 01       	movw	r22, r24
    259c:	cd 01       	movw	r24, r26
    259e:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <__fixsfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	8e 8f       	std	Y+30, r24	; 0x1e
    25a8:	9f 8f       	std	Y+31, r25	; 0x1f
    25aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25ae:	85 31       	cpi	r24, 0x15	; 21
    25b0:	91 05       	cpc	r25, r1
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <gc_execute_block+0xb4>
    25b4:	c6 c0       	rjmp	.+396    	; 0x2742 <gc_execute_block+0x240>
    25b6:	ae 8d       	ldd	r26, Y+30	; 0x1e
    25b8:	bf 8d       	ldd	r27, Y+31	; 0x1f
    25ba:	a6 31       	cpi	r26, 0x16	; 22
    25bc:	b1 05       	cpc	r27, r1
    25be:	0c f0       	brlt	.+2      	; 0x25c2 <gc_execute_block+0xc0>
    25c0:	48 c0       	rjmp	.+144    	; 0x2652 <gc_execute_block+0x150>
    25c2:	2e 8d       	ldd	r18, Y+30	; 0x1e
    25c4:	3f 8d       	ldd	r19, Y+31	; 0x1f
    25c6:	24 30       	cpi	r18, 0x04	; 4
    25c8:	31 05       	cpc	r19, r1
    25ca:	09 f4       	brne	.+2      	; 0x25ce <gc_execute_block+0xcc>
    25cc:	a0 c0       	rjmp	.+320    	; 0x270e <gc_execute_block+0x20c>
    25ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25d2:	85 30       	cpi	r24, 0x05	; 5
    25d4:	91 05       	cpc	r25, r1
    25d6:	f4 f4       	brge	.+60     	; 0x2614 <gc_execute_block+0x112>
    25d8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    25da:	bf 8d       	ldd	r27, Y+31	; 0x1f
    25dc:	a1 30       	cpi	r26, 0x01	; 1
    25de:	b1 05       	cpc	r27, r1
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <gc_execute_block+0xe2>
    25e2:	80 c0       	rjmp	.+256    	; 0x26e4 <gc_execute_block+0x1e2>
    25e4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    25e6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    25e8:	22 30       	cpi	r18, 0x02	; 2
    25ea:	31 05       	cpc	r19, r1
    25ec:	34 f4       	brge	.+12     	; 0x25fa <gc_execute_block+0xf8>
    25ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <gc_execute_block+0xf6>
    25f6:	70 c0       	rjmp	.+224    	; 0x26d8 <gc_execute_block+0x1d6>
    25f8:	c9 c0       	rjmp	.+402    	; 0x278c <gc_execute_block+0x28a>
    25fa:	ae 8d       	ldd	r26, Y+30	; 0x1e
    25fc:	bf 8d       	ldd	r27, Y+31	; 0x1f
    25fe:	a2 30       	cpi	r26, 0x02	; 2
    2600:	b1 05       	cpc	r27, r1
    2602:	09 f4       	brne	.+2      	; 0x2606 <gc_execute_block+0x104>
    2604:	76 c0       	rjmp	.+236    	; 0x26f2 <gc_execute_block+0x1f0>
    2606:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2608:	3f 8d       	ldd	r19, Y+31	; 0x1f
    260a:	23 30       	cpi	r18, 0x03	; 3
    260c:	31 05       	cpc	r19, r1
    260e:	09 f4       	brne	.+2      	; 0x2612 <gc_execute_block+0x110>
    2610:	77 c0       	rjmp	.+238    	; 0x2700 <gc_execute_block+0x1fe>
    2612:	bc c0       	rjmp	.+376    	; 0x278c <gc_execute_block+0x28a>
    2614:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2616:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2618:	82 31       	cpi	r24, 0x12	; 18
    261a:	91 05       	cpc	r25, r1
    261c:	09 f4       	brne	.+2      	; 0x2620 <gc_execute_block+0x11e>
    261e:	81 c0       	rjmp	.+258    	; 0x2722 <gc_execute_block+0x220>
    2620:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2622:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2624:	a3 31       	cpi	r26, 0x13	; 19
    2626:	b1 05       	cpc	r27, r1
    2628:	3c f4       	brge	.+14     	; 0x2638 <gc_execute_block+0x136>
    262a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    262c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    262e:	21 31       	cpi	r18, 0x11	; 17
    2630:	31 05       	cpc	r19, r1
    2632:	09 f4       	brne	.+2      	; 0x2636 <gc_execute_block+0x134>
    2634:	70 c0       	rjmp	.+224    	; 0x2716 <gc_execute_block+0x214>
    2636:	aa c0       	rjmp	.+340    	; 0x278c <gc_execute_block+0x28a>
    2638:	8e 8d       	ldd	r24, Y+30	; 0x1e
    263a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    263c:	83 31       	cpi	r24, 0x13	; 19
    263e:	91 05       	cpc	r25, r1
    2640:	09 f4       	brne	.+2      	; 0x2644 <gc_execute_block+0x142>
    2642:	75 c0       	rjmp	.+234    	; 0x272e <gc_execute_block+0x22c>
    2644:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2646:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2648:	a4 31       	cpi	r26, 0x14	; 20
    264a:	b1 05       	cpc	r27, r1
    264c:	09 f4       	brne	.+2      	; 0x2650 <gc_execute_block+0x14e>
    264e:	75 c0       	rjmp	.+234    	; 0x273a <gc_execute_block+0x238>
    2650:	9d c0       	rjmp	.+314    	; 0x278c <gc_execute_block+0x28a>
    2652:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2654:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2656:	2a 35       	cpi	r18, 0x5A	; 90
    2658:	31 05       	cpc	r19, r1
    265a:	09 f4       	brne	.+2      	; 0x265e <gc_execute_block+0x15c>
    265c:	85 c0       	rjmp	.+266    	; 0x2768 <gc_execute_block+0x266>
    265e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2660:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2662:	8b 35       	cpi	r24, 0x5B	; 91
    2664:	91 05       	cpc	r25, r1
    2666:	fc f4       	brge	.+62     	; 0x26a6 <gc_execute_block+0x1a4>
    2668:	ae 8d       	ldd	r26, Y+30	; 0x1e
    266a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    266c:	ae 31       	cpi	r26, 0x1E	; 30
    266e:	b1 05       	cpc	r27, r1
    2670:	09 f4       	brne	.+2      	; 0x2674 <gc_execute_block+0x172>
    2672:	6e c0       	rjmp	.+220    	; 0x2750 <gc_execute_block+0x24e>
    2674:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2676:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2678:	2f 31       	cpi	r18, 0x1F	; 31
    267a:	31 05       	cpc	r19, r1
    267c:	3c f4       	brge	.+14     	; 0x268c <gc_execute_block+0x18a>
    267e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2680:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2682:	8c 31       	cpi	r24, 0x1C	; 28
    2684:	91 05       	cpc	r25, r1
    2686:	09 f4       	brne	.+2      	; 0x268a <gc_execute_block+0x188>
    2688:	5f c0       	rjmp	.+190    	; 0x2748 <gc_execute_block+0x246>
    268a:	80 c0       	rjmp	.+256    	; 0x278c <gc_execute_block+0x28a>
    268c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    268e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2690:	a5 33       	cpi	r26, 0x35	; 53
    2692:	b1 05       	cpc	r27, r1
    2694:	09 f4       	brne	.+2      	; 0x2698 <gc_execute_block+0x196>
    2696:	60 c0       	rjmp	.+192    	; 0x2758 <gc_execute_block+0x256>
    2698:	2e 8d       	ldd	r18, Y+30	; 0x1e
    269a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    269c:	20 35       	cpi	r18, 0x50	; 80
    269e:	31 05       	cpc	r19, r1
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <gc_execute_block+0x1a2>
    26a2:	5e c0       	rjmp	.+188    	; 0x2760 <gc_execute_block+0x25e>
    26a4:	73 c0       	rjmp	.+230    	; 0x278c <gc_execute_block+0x28a>
    26a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26aa:	8c 35       	cpi	r24, 0x5C	; 92
    26ac:	91 05       	cpc	r25, r1
    26ae:	09 f4       	brne	.+2      	; 0x26b2 <gc_execute_block+0x1b0>
    26b0:	62 c0       	rjmp	.+196    	; 0x2776 <gc_execute_block+0x274>
    26b2:	ae 8d       	ldd	r26, Y+30	; 0x1e
    26b4:	bf 8d       	ldd	r27, Y+31	; 0x1f
    26b6:	ac 35       	cpi	r26, 0x5C	; 92
    26b8:	b1 05       	cpc	r27, r1
    26ba:	0c f4       	brge	.+2      	; 0x26be <gc_execute_block+0x1bc>
    26bc:	59 c0       	rjmp	.+178    	; 0x2770 <gc_execute_block+0x26e>
    26be:	2e 8d       	ldd	r18, Y+30	; 0x1e
    26c0:	3f 8d       	ldd	r19, Y+31	; 0x1f
    26c2:	2d 35       	cpi	r18, 0x5D	; 93
    26c4:	31 05       	cpc	r19, r1
    26c6:	09 f4       	brne	.+2      	; 0x26ca <gc_execute_block+0x1c8>
    26c8:	5a c0       	rjmp	.+180    	; 0x277e <gc_execute_block+0x27c>
    26ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26cc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26ce:	8e 35       	cpi	r24, 0x5E	; 94
    26d0:	91 05       	cpc	r25, r1
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <gc_execute_block+0x1d4>
    26d4:	58 c0       	rjmp	.+176    	; 0x2786 <gc_execute_block+0x284>
    26d6:	5a c0       	rjmp	.+180    	; 0x278c <gc_execute_block+0x28a>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	80 93 83 21 	sts	0x2183, r24
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    26de:	10 92 39 21 	sts	0x2139, r1
    26e2:	be c0       	rjmp	.+380    	; 0x2860 <gc_execute_block+0x35e>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	80 93 83 21 	sts	0x2183, r24
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	80 93 39 21 	sts	0x2139, r24
    26f0:	b7 c0       	rjmp	.+366    	; 0x2860 <gc_execute_block+0x35e>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	80 93 83 21 	sts	0x2183, r24
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    26f8:	82 e0       	ldi	r24, 0x02	; 2
    26fa:	80 93 39 21 	sts	0x2139, r24
    26fe:	b0 c0       	rjmp	.+352    	; 0x2860 <gc_execute_block+0x35e>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	80 93 83 21 	sts	0x2183, r24
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    2706:	83 e0       	ldi	r24, 0x03	; 3
    2708:	80 93 39 21 	sts	0x2139, r24
    270c:	a9 c0       	rjmp	.+338    	; 0x2860 <gc_execute_block+0x35e>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    270e:	82 e0       	ldi	r24, 0x02	; 2
    2710:	80 93 83 21 	sts	0x2183, r24
    2714:	a5 c0       	rjmp	.+330    	; 0x2860 <gc_execute_block+0x35e>

					case 17: { select_plane(X, Y, Z); break; }
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	61 e0       	ldi	r22, 0x01	; 1
    271a:	42 e0       	ldi	r20, 0x02	; 2
    271c:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <select_plane>
    2720:	9f c0       	rjmp	.+318    	; 0x2860 <gc_execute_block+0x35e>
					case 18: { select_plane(X, Z, Y); break; }
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	62 e0       	ldi	r22, 0x02	; 2
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <select_plane>
    272c:	99 c0       	rjmp	.+306    	; 0x2860 <gc_execute_block+0x35e>
					case 19: { select_plane(Y, Z, X); break; }
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	62 e0       	ldi	r22, 0x02	; 2
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <select_plane>
    2738:	93 c0       	rjmp	.+294    	; 0x2860 <gc_execute_block+0x35e>

					case 20: { gc.inches_mode = TRUE; break; }
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	80 93 3b 21 	sts	0x213B, r24
    2740:	8f c0       	rjmp	.+286    	; 0x2860 <gc_execute_block+0x35e>
					case 21: { gc.inches_mode = FALSE; break; }
    2742:	10 92 3b 21 	sts	0x213B, r1
    2746:	8c c0       	rjmp	.+280    	; 0x2860 <gc_execute_block+0x35e>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	80 93 83 21 	sts	0x2183, r24
    274e:	88 c0       	rjmp	.+272    	; 0x2860 <gc_execute_block+0x35e>
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    2750:	83 e0       	ldi	r24, 0x03	; 3
    2752:	80 93 83 21 	sts	0x2183, r24
    2756:	84 c0       	rjmp	.+264    	; 0x2860 <gc_execute_block+0x35e>

					case 53: { gc.absolute_override = TRUE; break; }
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	80 93 82 21 	sts	0x2182, r24
    275e:	80 c0       	rjmp	.+256    	; 0x2860 <gc_execute_block+0x35e>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2760:	84 e0       	ldi	r24, 0x04	; 4
    2762:	80 93 39 21 	sts	0x2139, r24
    2766:	7c c0       	rjmp	.+248    	; 0x2860 <gc_execute_block+0x35e>
					case 90: { gc.absolute_mode = TRUE; break; }
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	80 93 3c 21 	sts	0x213C, r24
    276e:	78 c0       	rjmp	.+240    	; 0x2860 <gc_execute_block+0x35e>
					case 91: { gc.absolute_mode = FALSE; break; }
    2770:	10 92 3c 21 	sts	0x213C, r1
    2774:	75 c0       	rjmp	.+234    	; 0x2860 <gc_execute_block+0x35e>
					case 92: { gc.set_origin_mode = TRUE; break; }
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	80 93 3e 21 	sts	0x213E, r24
    277c:	71 c0       	rjmp	.+226    	; 0x2860 <gc_execute_block+0x35e>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	80 93 3a 21 	sts	0x213A, r24
    2784:	6d c0       	rjmp	.+218    	; 0x2860 <gc_execute_block+0x35e>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2786:	10 92 3a 21 	sts	0x213A, r1
    278a:	6a c0       	rjmp	.+212    	; 0x2860 <gc_execute_block+0x35e>

					default: FAIL(TG_UNSUPPORTED_STATEMENT);
    278c:	8c e0       	ldi	r24, 0x0C	; 12
    278e:	80 93 2e 21 	sts	0x212E, r24
    2792:	66 c0       	rjmp	.+204    	; 0x2860 <gc_execute_block+0x35e>
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    2794:	80 91 30 21 	lds	r24, 0x2130
    2798:	90 91 31 21 	lds	r25, 0x2131
    279c:	a0 91 32 21 	lds	r26, 0x2132
    27a0:	b0 91 33 21 	lds	r27, 0x2133
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <__fixsfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	8c 8f       	std	Y+28, r24	; 0x1c
    27b2:	9d 8f       	std	Y+29, r25	; 0x1d
    27b4:	ac 8d       	ldd	r26, Y+28	; 0x1c
    27b6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    27b8:	a3 30       	cpi	r26, 0x03	; 3
    27ba:	b1 05       	cpc	r27, r1
    27bc:	61 f1       	breq	.+88     	; 0x2816 <gc_execute_block+0x314>
    27be:	2c 8d       	ldd	r18, Y+28	; 0x1c
    27c0:	3d 8d       	ldd	r19, Y+29	; 0x1d
    27c2:	24 30       	cpi	r18, 0x04	; 4
    27c4:	31 05       	cpc	r19, r1
    27c6:	54 f4       	brge	.+20     	; 0x27dc <gc_execute_block+0x2da>
    27c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27ca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27cc:	99 23       	and	r25, r25
    27ce:	74 f1       	brlt	.+92     	; 0x282c <gc_execute_block+0x32a>
    27d0:	ac 8d       	ldd	r26, Y+28	; 0x1c
    27d2:	bd 8d       	ldd	r27, Y+29	; 0x1d
    27d4:	a2 30       	cpi	r26, 0x02	; 2
    27d6:	b1 05       	cpc	r27, r1
    27d8:	b4 f0       	brlt	.+44     	; 0x2806 <gc_execute_block+0x304>
    27da:	19 c0       	rjmp	.+50     	; 0x280e <gc_execute_block+0x30c>
    27dc:	2c 8d       	ldd	r18, Y+28	; 0x1c
    27de:	3d 8d       	ldd	r19, Y+29	; 0x1d
    27e0:	25 30       	cpi	r18, 0x05	; 5
    27e2:	31 05       	cpc	r19, r1
    27e4:	01 f1       	breq	.+64     	; 0x2826 <gc_execute_block+0x324>
    27e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27e8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27ea:	85 30       	cpi	r24, 0x05	; 5
    27ec:	91 05       	cpc	r25, r1
    27ee:	bc f0       	brlt	.+46     	; 0x281e <gc_execute_block+0x31c>
    27f0:	ac 8d       	ldd	r26, Y+28	; 0x1c
    27f2:	bd 8d       	ldd	r27, Y+29	; 0x1d
    27f4:	ae 31       	cpi	r26, 0x1E	; 30
    27f6:	b1 05       	cpc	r27, r1
    27f8:	51 f0       	breq	.+20     	; 0x280e <gc_execute_block+0x30c>
    27fa:	2c 8d       	ldd	r18, Y+28	; 0x1c
    27fc:	3d 8d       	ldd	r19, Y+29	; 0x1d
    27fe:	2c 33       	cpi	r18, 0x3C	; 60
    2800:	31 05       	cpc	r19, r1
    2802:	29 f0       	breq	.+10     	; 0x280e <gc_execute_block+0x30c>
    2804:	13 c0       	rjmp	.+38     	; 0x282c <gc_execute_block+0x32a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	80 93 38 21 	sts	0x2138, r24
    280c:	29 c0       	rjmp	.+82     	; 0x2860 <gc_execute_block+0x35e>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    280e:	82 e0       	ldi	r24, 0x02	; 2
    2810:	80 93 38 21 	sts	0x2138, r24
    2814:	25 c0       	rjmp	.+74     	; 0x2860 <gc_execute_block+0x35e>
					case 3: gc.spindle_direction = 1; break;
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	80 93 7f 21 	sts	0x217F, r24
    281c:	21 c0       	rjmp	.+66     	; 0x2860 <gc_execute_block+0x35e>
					case 4: gc.spindle_direction = -1; break;
    281e:	8f ef       	ldi	r24, 0xFF	; 255
    2820:	80 93 7f 21 	sts	0x217F, r24
    2824:	1d c0       	rjmp	.+58     	; 0x2860 <gc_execute_block+0x35e>
					case 5: gc.spindle_direction = 0; break;
    2826:	10 92 7f 21 	sts	0x217F, r1
    282a:	1a c0       	rjmp	.+52     	; 0x2860 <gc_execute_block+0x35e>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    282c:	8c e0       	ldi	r24, 0x0C	; 12
    282e:	80 93 2e 21 	sts	0x212E, r24
    2832:	16 c0       	rjmp	.+44     	; 0x2860 <gc_execute_block+0x35e>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    2834:	80 91 30 21 	lds	r24, 0x2130
    2838:	90 91 31 21 	lds	r25, 0x2131
    283c:	a0 91 32 21 	lds	r26, 0x2132
    2840:	b0 91 33 21 	lds	r27, 0x2133
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	0e 94 ae 5e 	call	0xbd5c	; 0xbd5c <trunc>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	0e 94 b2 5b 	call	0xb764	; 0xb764 <__fixunssfsi>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	80 93 7e 21 	sts	0x217E, r24
		}
		if(gc.status) {
    2860:	80 91 2e 21 	lds	r24, 0x212E
    2864:	88 23       	and	r24, r24
    2866:	91 f4       	brne	.+36     	; 0x288c <gc_execute_block+0x38a>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2868:	8f e2       	ldi	r24, 0x2F	; 47
    286a:	91 e2       	ldi	r25, 0x21	; 33
    286c:	20 e3       	ldi	r18, 0x30	; 48
    286e:	31 e2       	ldi	r19, 0x21	; 33
    2870:	44 e3       	ldi	r20, 0x34	; 52
    2872:	51 e2       	ldi	r21, 0x21	; 33
    2874:	eb 81       	ldd	r30, Y+3	; 0x03
    2876:	fc 81       	ldd	r31, Y+4	; 0x04
    2878:	b9 01       	movw	r22, r18
    287a:	9f 01       	movw	r18, r30
    287c:	fe 01       	movw	r30, r28
    287e:	31 96       	adiw	r30, 0x01	; 1
    2880:	8f 01       	movw	r16, r30
    2882:	0e 94 ab 11 	call	0x2356	; 0x2356 <_gc_next_statement>
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	09 f0       	breq	.+2      	; 0x288c <gc_execute_block+0x38a>
    288a:	67 ce       	rjmp	.-818    	; 0x255a <gc_execute_block+0x58>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    288c:	80 91 2e 21 	lds	r24, 0x212E
    2890:	88 23       	and	r24, r24
    2892:	21 f0       	breq	.+8      	; 0x289c <gc_execute_block+0x39a>
		return(gc.status); 
    2894:	30 91 2e 21 	lds	r19, 0x212E
    2898:	3b 8f       	std	Y+27, r19	; 0x1b
    289a:	4f c2       	rjmp	.+1182   	; 0x2d3a <gc_execute_block+0x838>
	}

	i = 0;
    289c:	19 82       	std	Y+1, r1	; 0x01
    289e:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    28a0:	8f e6       	ldi	r24, 0x6F	; 111
    28a2:	91 e2       	ldi	r25, 0x21	; 33
    28a4:	60 e0       	ldi	r22, 0x00	; 0
    28a6:	70 e0       	ldi	r23, 0x00	; 0
    28a8:	4c e0       	ldi	r20, 0x0C	; 12
    28aa:	50 e0       	ldi	r21, 0x00	; 0
    28ac:	0e 94 e1 61 	call	0xc3c2	; 0xc3c2 <memset>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    28b0:	83 e6       	ldi	r24, 0x63	; 99
    28b2:	91 e2       	ldi	r25, 0x21	; 33
    28b4:	27 e5       	ldi	r18, 0x57	; 87
    28b6:	31 e2       	ldi	r19, 0x21	; 33
    28b8:	b9 01       	movw	r22, r18
    28ba:	4c e0       	ldi	r20, 0x0C	; 12
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	0e 94 d8 61 	call	0xc3b0	; 0xc3b0 <memcpy>
    28c2:	4c c1       	rjmp	.+664    	; 0x2b5c <gc_execute_block+0x65a>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    28c4:	80 91 30 21 	lds	r24, 0x2130
    28c8:	90 91 31 21 	lds	r25, 0x2131
    28cc:	a0 91 32 21 	lds	r26, 0x2132
    28d0:	b0 91 33 21 	lds	r27, 0x2133
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 01 11 	call	0x2202	; 0x2202 <to_millimeters>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	80 93 4f 21 	sts	0x214F, r24
    28e4:	90 93 50 21 	sts	0x2150, r25
    28e8:	a0 93 51 21 	sts	0x2151, r26
    28ec:	b0 93 52 21 	sts	0x2152, r27
		switch(gc.letter) {
    28f0:	80 91 2f 21 	lds	r24, 0x212F
    28f4:	a8 2f       	mov	r26, r24
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	a9 8f       	std	Y+25, r26	; 0x19
    28fa:	ba 8f       	std	Y+26, r27	; 0x1a
    28fc:	29 8d       	ldd	r18, Y+25	; 0x19
    28fe:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2900:	20 35       	cpi	r18, 0x50	; 80
    2902:	31 05       	cpc	r19, r1
    2904:	09 f4       	brne	.+2      	; 0x2908 <gc_execute_block+0x406>
    2906:	7e c0       	rjmp	.+252    	; 0x2a04 <gc_execute_block+0x502>
    2908:	89 8d       	ldd	r24, Y+25	; 0x19
    290a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    290c:	81 35       	cpi	r24, 0x51	; 81
    290e:	91 05       	cpc	r25, r1
    2910:	a4 f4       	brge	.+40     	; 0x293a <gc_execute_block+0x438>
    2912:	a9 8d       	ldd	r26, Y+25	; 0x19
    2914:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2916:	a6 34       	cpi	r26, 0x46	; 70
    2918:	b1 05       	cpc	r27, r1
    291a:	51 f1       	breq	.+84     	; 0x2970 <gc_execute_block+0x46e>
    291c:	29 8d       	ldd	r18, Y+25	; 0x19
    291e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2920:	26 34       	cpi	r18, 0x46	; 70
    2922:	31 05       	cpc	r19, r1
    2924:	0c f4       	brge	.+2      	; 0x2928 <gc_execute_block+0x426>
    2926:	1a c1       	rjmp	.+564    	; 0x2b5c <gc_execute_block+0x65a>
    2928:	89 8d       	ldd	r24, Y+25	; 0x19
    292a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    292c:	89 54       	subi	r24, 0x49	; 73
    292e:	90 40       	sbci	r25, 0x00	; 0
    2930:	83 30       	cpi	r24, 0x03	; 3
    2932:	91 05       	cpc	r25, r1
    2934:	08 f0       	brcs	.+2      	; 0x2938 <gc_execute_block+0x436>
    2936:	12 c1       	rjmp	.+548    	; 0x2b5c <gc_execute_block+0x65a>
    2938:	4b c0       	rjmp	.+150    	; 0x29d0 <gc_execute_block+0x4ce>
    293a:	89 8d       	ldd	r24, Y+25	; 0x19
    293c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    293e:	83 35       	cpi	r24, 0x53	; 83
    2940:	91 05       	cpc	r25, r1
    2942:	09 f4       	brne	.+2      	; 0x2946 <gc_execute_block+0x444>
    2944:	84 c0       	rjmp	.+264    	; 0x2a4e <gc_execute_block+0x54c>
    2946:	a9 8d       	ldd	r26, Y+25	; 0x19
    2948:	ba 8d       	ldd	r27, Y+26	; 0x1a
    294a:	a4 35       	cpi	r26, 0x54	; 84
    294c:	b1 05       	cpc	r27, r1
    294e:	3c f4       	brge	.+14     	; 0x295e <gc_execute_block+0x45c>
    2950:	29 8d       	ldd	r18, Y+25	; 0x19
    2952:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2954:	22 35       	cpi	r18, 0x52	; 82
    2956:	31 05       	cpc	r19, r1
    2958:	09 f4       	brne	.+2      	; 0x295c <gc_execute_block+0x45a>
    295a:	65 c0       	rjmp	.+202    	; 0x2a26 <gc_execute_block+0x524>
    295c:	ff c0       	rjmp	.+510    	; 0x2b5c <gc_execute_block+0x65a>
    295e:	89 8d       	ldd	r24, Y+25	; 0x19
    2960:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2962:	88 55       	subi	r24, 0x58	; 88
    2964:	90 40       	sbci	r25, 0x00	; 0
    2966:	83 30       	cpi	r24, 0x03	; 3
    2968:	91 05       	cpc	r25, r1
    296a:	08 f0       	brcs	.+2      	; 0x296e <gc_execute_block+0x46c>
    296c:	f7 c0       	rjmp	.+494    	; 0x2b5c <gc_execute_block+0x65a>
    296e:	82 c0       	rjmp	.+260    	; 0x2a74 <gc_execute_block+0x572>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    2970:	80 91 3a 21 	lds	r24, 0x213A
    2974:	88 23       	and	r24, r24
    2976:	89 f0       	breq	.+34     	; 0x299a <gc_execute_block+0x498>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    2978:	80 91 4f 21 	lds	r24, 0x214F
    297c:	90 91 50 21 	lds	r25, 0x2150
    2980:	a0 91 51 21 	lds	r26, 0x2151
    2984:	b0 91 52 21 	lds	r27, 0x2152
    2988:	80 93 53 21 	sts	0x2153, r24
    298c:	90 93 54 21 	sts	0x2154, r25
    2990:	a0 93 55 21 	sts	0x2155, r26
    2994:	b0 93 56 21 	sts	0x2156, r27
    2998:	e1 c0       	rjmp	.+450    	; 0x2b5c <gc_execute_block+0x65a>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    299a:	80 91 4f 21 	lds	r24, 0x214F
    299e:	90 91 50 21 	lds	r25, 0x2150
    29a2:	a0 91 51 21 	lds	r26, 0x2151
    29a6:	b0 91 52 21 	lds	r27, 0x2152
    29aa:	bc 01       	movw	r22, r24
    29ac:	cd 01       	movw	r24, r26
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e7       	ldi	r20, 0x70	; 112
    29b4:	52 e4       	ldi	r21, 0x42	; 66
    29b6:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	80 93 47 21 	sts	0x2147, r24
    29c2:	90 93 48 21 	sts	0x2148, r25
    29c6:	a0 93 49 21 	sts	0x2149, r26
    29ca:	b0 93 4a 21 	sts	0x214A, r27
    29ce:	c6 c0       	rjmp	.+396    	; 0x2b5c <gc_execute_block+0x65a>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    29d0:	80 91 2f 21 	lds	r24, 0x212F
    29d4:	88 2f       	mov	r24, r24
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	89 54       	subi	r24, 0x49	; 73
    29da:	90 40       	sbci	r25, 0x00	; 0
    29dc:	20 91 4f 21 	lds	r18, 0x214F
    29e0:	30 91 50 21 	lds	r19, 0x2150
    29e4:	40 91 51 21 	lds	r20, 0x2151
    29e8:	50 91 52 21 	lds	r21, 0x2152
    29ec:	88 0f       	add	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	88 0f       	add	r24, r24
    29f2:	99 1f       	adc	r25, r25
    29f4:	fc 01       	movw	r30, r24
    29f6:	e1 59       	subi	r30, 0x91	; 145
    29f8:	fe 4d       	sbci	r31, 0xDE	; 222
    29fa:	20 83       	st	Z, r18
    29fc:	31 83       	std	Z+1, r19	; 0x01
    29fe:	42 83       	std	Z+2, r20	; 0x02
    2a00:	53 83       	std	Z+3, r21	; 0x03
    2a02:	ac c0       	rjmp	.+344    	; 0x2b5c <gc_execute_block+0x65a>
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
    2a04:	80 91 30 21 	lds	r24, 0x2130
    2a08:	90 91 31 21 	lds	r25, 0x2131
    2a0c:	a0 91 32 21 	lds	r26, 0x2132
    2a10:	b0 91 33 21 	lds	r27, 0x2133
    2a14:	80 93 3f 21 	sts	0x213F, r24
    2a18:	90 93 40 21 	sts	0x2140, r25
    2a1c:	a0 93 41 21 	sts	0x2141, r26
    2a20:	b0 93 42 21 	sts	0x2142, r27
    2a24:	9b c0       	rjmp	.+310    	; 0x2b5c <gc_execute_block+0x65a>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    2a26:	80 91 4f 21 	lds	r24, 0x214F
    2a2a:	90 91 50 21 	lds	r25, 0x2150
    2a2e:	a0 91 51 21 	lds	r26, 0x2151
    2a32:	b0 91 52 21 	lds	r27, 0x2152
    2a36:	80 93 43 21 	sts	0x2143, r24
    2a3a:	90 93 44 21 	sts	0x2144, r25
    2a3e:	a0 93 45 21 	sts	0x2145, r26
    2a42:	b0 93 46 21 	sts	0x2146, r27
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	80 93 3d 21 	sts	0x213D, r24
    2a4c:	87 c0       	rjmp	.+270    	; 0x2b5c <gc_execute_block+0x65a>
			case 'S': gc.spindle_speed = gc.value; break;
    2a4e:	80 91 30 21 	lds	r24, 0x2130
    2a52:	90 91 31 21 	lds	r25, 0x2131
    2a56:	a0 91 32 21 	lds	r26, 0x2132
    2a5a:	b0 91 33 21 	lds	r27, 0x2133
    2a5e:	bc 01       	movw	r22, r24
    2a60:	cd 01       	movw	r24, r26
    2a62:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <__fixsfsi>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	80 93 80 21 	sts	0x2180, r24
    2a6e:	90 93 81 21 	sts	0x2181, r25
    2a72:	74 c0       	rjmp	.+232    	; 0x2b5c <gc_execute_block+0x65a>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2a74:	80 91 3e 21 	lds	r24, 0x213E
    2a78:	88 23       	and	r24, r24
    2a7a:	d1 f0       	breq	.+52     	; 0x2ab0 <gc_execute_block+0x5ae>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    2a7c:	80 91 2f 21 	lds	r24, 0x212F
    2a80:	88 2f       	mov	r24, r24
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	88 55       	subi	r24, 0x58	; 88
    2a86:	90 40       	sbci	r25, 0x00	; 0
    2a88:	20 91 4f 21 	lds	r18, 0x214F
    2a8c:	30 91 50 21 	lds	r19, 0x2150
    2a90:	40 91 51 21 	lds	r20, 0x2151
    2a94:	50 91 52 21 	lds	r21, 0x2152
    2a98:	88 0f       	add	r24, r24
    2a9a:	99 1f       	adc	r25, r25
    2a9c:	88 0f       	add	r24, r24
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	e9 5a       	subi	r30, 0xA9	; 169
    2aa4:	fe 4d       	sbci	r31, 0xDE	; 222
    2aa6:	20 83       	st	Z, r18
    2aa8:	31 83       	std	Z+1, r19	; 0x01
    2aaa:	42 83       	std	Z+2, r20	; 0x02
    2aac:	53 83       	std	Z+3, r21	; 0x03
    2aae:	56 c0       	rjmp	.+172    	; 0x2b5c <gc_execute_block+0x65a>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2ab0:	80 91 3c 21 	lds	r24, 0x213C
    2ab4:	88 23       	and	r24, r24
    2ab6:	21 f4       	brne	.+8      	; 0x2ac0 <gc_execute_block+0x5be>
    2ab8:	80 91 82 21 	lds	r24, 0x2182
    2abc:	88 23       	and	r24, r24
    2abe:	d1 f0       	breq	.+52     	; 0x2af4 <gc_execute_block+0x5f2>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    2ac0:	80 91 2f 21 	lds	r24, 0x212F
    2ac4:	88 2f       	mov	r24, r24
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	88 55       	subi	r24, 0x58	; 88
    2aca:	90 40       	sbci	r25, 0x00	; 0
    2acc:	20 91 4f 21 	lds	r18, 0x214F
    2ad0:	30 91 50 21 	lds	r19, 0x2150
    2ad4:	40 91 51 21 	lds	r20, 0x2151
    2ad8:	50 91 52 21 	lds	r21, 0x2152
    2adc:	88 0f       	add	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	88 0f       	add	r24, r24
    2ae2:	99 1f       	adc	r25, r25
    2ae4:	fc 01       	movw	r30, r24
    2ae6:	ed 59       	subi	r30, 0x9D	; 157
    2ae8:	fe 4d       	sbci	r31, 0xDE	; 222
    2aea:	20 83       	st	Z, r18
    2aec:	31 83       	std	Z+1, r19	; 0x01
    2aee:	42 83       	std	Z+2, r20	; 0x02
    2af0:	53 83       	std	Z+3, r21	; 0x03
    2af2:	34 c0       	rjmp	.+104    	; 0x2b5c <gc_execute_block+0x65a>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    2af4:	80 91 2f 21 	lds	r24, 0x212F
    2af8:	88 2f       	mov	r24, r24
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	8c 01       	movw	r16, r24
    2afe:	08 55       	subi	r16, 0x58	; 88
    2b00:	10 40       	sbci	r17, 0x00	; 0
    2b02:	80 91 2f 21 	lds	r24, 0x212F
    2b06:	88 2f       	mov	r24, r24
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	88 55       	subi	r24, 0x58	; 88
    2b0c:	90 40       	sbci	r25, 0x00	; 0
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	88 0f       	add	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	fc 01       	movw	r30, r24
    2b18:	ed 59       	subi	r30, 0x9D	; 157
    2b1a:	fe 4d       	sbci	r31, 0xDE	; 222
    2b1c:	80 81       	ld	r24, Z
    2b1e:	91 81       	ldd	r25, Z+1	; 0x01
    2b20:	a2 81       	ldd	r26, Z+2	; 0x02
    2b22:	b3 81       	ldd	r27, Z+3	; 0x03
    2b24:	20 91 4f 21 	lds	r18, 0x214F
    2b28:	30 91 50 21 	lds	r19, 0x2150
    2b2c:	40 91 51 21 	lds	r20, 0x2151
    2b30:	50 91 52 21 	lds	r21, 0x2152
    2b34:	bc 01       	movw	r22, r24
    2b36:	cd 01       	movw	r24, r26
    2b38:	0e 94 9f 5a 	call	0xb53e	; 0xb53e <__addsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	9c 01       	movw	r18, r24
    2b42:	ad 01       	movw	r20, r26
    2b44:	c8 01       	movw	r24, r16
    2b46:	88 0f       	add	r24, r24
    2b48:	99 1f       	adc	r25, r25
    2b4a:	88 0f       	add	r24, r24
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	fc 01       	movw	r30, r24
    2b50:	ed 59       	subi	r30, 0x9D	; 157
    2b52:	fe 4d       	sbci	r31, 0xDE	; 222
    2b54:	20 83       	st	Z, r18
    2b56:	31 83       	std	Z+1, r19	; 0x01
    2b58:	42 83       	std	Z+2, r20	; 0x02
    2b5a:	53 83       	std	Z+3, r21	; 0x03
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2b5c:	8f e2       	ldi	r24, 0x2F	; 47
    2b5e:	91 e2       	ldi	r25, 0x21	; 33
    2b60:	20 e3       	ldi	r18, 0x30	; 48
    2b62:	31 e2       	ldi	r19, 0x21	; 33
    2b64:	44 e3       	ldi	r20, 0x34	; 52
    2b66:	51 e2       	ldi	r21, 0x21	; 33
    2b68:	eb 81       	ldd	r30, Y+3	; 0x03
    2b6a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b6c:	b9 01       	movw	r22, r18
    2b6e:	9f 01       	movw	r18, r30
    2b70:	fe 01       	movw	r30, r28
    2b72:	31 96       	adiw	r30, 0x01	; 1
    2b74:	8f 01       	movw	r16, r30
    2b76:	0e 94 ab 11 	call	0x2356	; 0x2356 <_gc_next_statement>
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	09 f0       	breq	.+2      	; 0x2b80 <gc_execute_block+0x67e>
    2b7e:	a2 ce       	rjmp	.-700    	; 0x28c4 <gc_execute_block+0x3c2>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    2b80:	80 91 2e 21 	lds	r24, 0x212E
    2b84:	88 23       	and	r24, r24
    2b86:	21 f0       	breq	.+8      	; 0x2b90 <gc_execute_block+0x68e>
		return(gc.status); 
    2b88:	30 91 2e 21 	lds	r19, 0x212E
    2b8c:	3b 8f       	std	Y+27, r19	; 0x1b
    2b8e:	d5 c0       	rjmp	.+426    	; 0x2d3a <gc_execute_block+0x838>
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    2b90:	80 91 7f 21 	lds	r24, 0x217F
    2b94:	88 23       	and	r24, r24
    2b96:	a9 f0       	breq	.+42     	; 0x2bc2 <gc_execute_block+0x6c0>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    2b98:	80 91 7f 21 	lds	r24, 0x217F
    2b9c:	68 2f       	mov	r22, r24
    2b9e:	77 27       	eor	r23, r23
    2ba0:	67 fd       	sbrc	r22, 7
    2ba2:	70 95       	com	r23
    2ba4:	80 91 80 21 	lds	r24, 0x2180
    2ba8:	90 91 81 21 	lds	r25, 0x2181
    2bac:	9c 01       	movw	r18, r24
    2bae:	44 27       	eor	r20, r20
    2bb0:	37 fd       	sbrc	r19, 7
    2bb2:	40 95       	com	r20
    2bb4:	54 2f       	mov	r21, r20
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	ba 01       	movw	r22, r20
    2bba:	a9 01       	movw	r20, r18
    2bbc:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <spindle_run>
    2bc0:	02 c0       	rjmp	.+4      	; 0x2bc6 <gc_execute_block+0x6c4>
	} else {
		spindle_stop();
    2bc2:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    2bc6:	80 91 83 21 	lds	r24, 0x2183
    2bca:	a8 2f       	mov	r26, r24
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	af 8b       	std	Y+23, r26	; 0x17
    2bd0:	b8 8f       	std	Y+24, r27	; 0x18
    2bd2:	2f 89       	ldd	r18, Y+23	; 0x17
    2bd4:	38 8d       	ldd	r19, Y+24	; 0x18
    2bd6:	21 30       	cpi	r18, 0x01	; 1
    2bd8:	31 05       	cpc	r19, r1
    2bda:	29 f1       	breq	.+74     	; 0x2c26 <gc_execute_block+0x724>
    2bdc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bde:	98 8d       	ldd	r25, Y+24	; 0x18
    2be0:	82 30       	cpi	r24, 0x02	; 2
    2be2:	91 05       	cpc	r25, r1
    2be4:	0c f4       	brge	.+2      	; 0x2be8 <gc_execute_block+0x6e6>
    2be6:	95 c0       	rjmp	.+298    	; 0x2d12 <gc_execute_block+0x810>
    2be8:	af 89       	ldd	r26, Y+23	; 0x17
    2bea:	b8 8d       	ldd	r27, Y+24	; 0x18
    2bec:	a2 30       	cpi	r26, 0x02	; 2
    2bee:	b1 05       	cpc	r27, r1
    2bf0:	59 f0       	breq	.+22     	; 0x2c08 <gc_execute_block+0x706>
    2bf2:	2f 89       	ldd	r18, Y+23	; 0x17
    2bf4:	38 8d       	ldd	r19, Y+24	; 0x18
    2bf6:	23 30       	cpi	r18, 0x03	; 3
    2bf8:	31 05       	cpc	r19, r1
    2bfa:	09 f0       	breq	.+2      	; 0x2bfe <gc_execute_block+0x6fc>
    2bfc:	8a c0       	rjmp	.+276    	; 0x2d12 <gc_execute_block+0x810>
		case NEXT_ACTION_DEFAULT: {				// nothing to do here
			break;
		}

		case NEXT_ACTION_GO_HOME: { 
			gc.status = mc_go_home(); 
    2bfe:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <mc_go_home>
    2c02:	80 93 2e 21 	sts	0x212E, r24
    2c06:	85 c0       	rjmp	.+266    	; 0x2d12 <gc_execute_block+0x810>
			break;
		}

		case NEXT_ACTION_DWELL: {
			gc.status = mc_dwell(gc.dwell_time); 
    2c08:	80 91 3f 21 	lds	r24, 0x213F
    2c0c:	90 91 40 21 	lds	r25, 0x2140
    2c10:	a0 91 41 21 	lds	r26, 0x2141
    2c14:	b0 91 42 21 	lds	r27, 0x2142
    2c18:	bc 01       	movw	r22, r24
    2c1a:	cd 01       	movw	r24, r26
    2c1c:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <mc_dwell>
    2c20:	80 93 2e 21 	sts	0x212E, r24
    2c24:	76 c0       	rjmp	.+236    	; 0x2d12 <gc_execute_block+0x810>
			break;
		}

		case NEXT_ACTION_MOTION: {
			switch (gc.motion_mode) {
    2c26:	80 91 39 21 	lds	r24, 0x2139
    2c2a:	a8 2f       	mov	r26, r24
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	ad 8b       	std	Y+21, r26	; 0x15
    2c30:	be 8b       	std	Y+22, r27	; 0x16
    2c32:	2d 89       	ldd	r18, Y+21	; 0x15
    2c34:	3e 89       	ldd	r19, Y+22	; 0x16
    2c36:	24 30       	cpi	r18, 0x04	; 4
    2c38:	31 05       	cpc	r19, r1
    2c3a:	0c f0       	brlt	.+2      	; 0x2c3e <gc_execute_block+0x73c>
    2c3c:	6a c0       	rjmp	.+212    	; 0x2d12 <gc_execute_block+0x810>
    2c3e:	8d 89       	ldd	r24, Y+21	; 0x15
    2c40:	9e 89       	ldd	r25, Y+22	; 0x16
    2c42:	82 30       	cpi	r24, 0x02	; 2
    2c44:	91 05       	cpc	r25, r1
    2c46:	0c f0       	brlt	.+2      	; 0x2c4a <gc_execute_block+0x748>
    2c48:	60 c0       	rjmp	.+192    	; 0x2d0a <gc_execute_block+0x808>
    2c4a:	ad 89       	ldd	r26, Y+21	; 0x15
    2c4c:	be 89       	ldd	r27, Y+22	; 0x16
    2c4e:	bb 23       	and	r27, r27
    2c50:	0c f4       	brge	.+2      	; 0x2c54 <gc_execute_block+0x752>
    2c52:	5f c0       	rjmp	.+190    	; 0x2d12 <gc_execute_block+0x810>
				case MOTION_MODE_CANCEL: {
					break;
				}

				case MOTION_MODE_RAPID_LINEAR: case MOTION_MODE_LINEAR: {
					gc.status = mc_line(gc.target[X], gc.target[Y], gc.target[Z],
    2c54:	80 91 63 21 	lds	r24, 0x2163
    2c58:	90 91 64 21 	lds	r25, 0x2164
    2c5c:	a0 91 65 21 	lds	r26, 0x2165
    2c60:	b0 91 66 21 	lds	r27, 0x2166
    2c64:	89 8b       	std	Y+17, r24	; 0x11
    2c66:	9a 8b       	std	Y+18, r25	; 0x12
    2c68:	ab 8b       	std	Y+19, r26	; 0x13
    2c6a:	bc 8b       	std	Y+20, r27	; 0x14
    2c6c:	80 91 67 21 	lds	r24, 0x2167
    2c70:	90 91 68 21 	lds	r25, 0x2168
    2c74:	a0 91 69 21 	lds	r26, 0x2169
    2c78:	b0 91 6a 21 	lds	r27, 0x216A
    2c7c:	8d 87       	std	Y+13, r24	; 0x0d
    2c7e:	9e 87       	std	Y+14, r25	; 0x0e
    2c80:	af 87       	std	Y+15, r26	; 0x0f
    2c82:	b8 8b       	std	Y+16, r27	; 0x10
    2c84:	80 91 6b 21 	lds	r24, 0x216B
    2c88:	90 91 6c 21 	lds	r25, 0x216C
    2c8c:	a0 91 6d 21 	lds	r26, 0x216D
    2c90:	b0 91 6e 21 	lds	r27, 0x216E
    2c94:	89 87       	std	Y+9, r24	; 0x09
    2c96:	9a 87       	std	Y+10, r25	; 0x0a
    2c98:	ab 87       	std	Y+11, r26	; 0x0b
    2c9a:	bc 87       	std	Y+12, r27	; 0x0c
    2c9c:	80 91 3a 21 	lds	r24, 0x213A
    2ca0:	88 23       	and	r24, r24
    2ca2:	69 f0       	breq	.+26     	; 0x2cbe <gc_execute_block+0x7bc>
    2ca4:	80 91 53 21 	lds	r24, 0x2153
    2ca8:	90 91 54 21 	lds	r25, 0x2154
    2cac:	a0 91 55 21 	lds	r26, 0x2155
    2cb0:	b0 91 56 21 	lds	r27, 0x2156
    2cb4:	8d 83       	std	Y+5, r24	; 0x05
    2cb6:	9e 83       	std	Y+6, r25	; 0x06
    2cb8:	af 83       	std	Y+7, r26	; 0x07
    2cba:	b8 87       	std	Y+8, r27	; 0x08
    2cbc:	0c c0       	rjmp	.+24     	; 0x2cd6 <gc_execute_block+0x7d4>
    2cbe:	80 91 47 21 	lds	r24, 0x2147
    2cc2:	90 91 48 21 	lds	r25, 0x2148
    2cc6:	a0 91 49 21 	lds	r26, 0x2149
    2cca:	b0 91 4a 21 	lds	r27, 0x214A
    2cce:	8d 83       	std	Y+5, r24	; 0x05
    2cd0:	9e 83       	std	Y+6, r25	; 0x06
    2cd2:	af 83       	std	Y+7, r26	; 0x07
    2cd4:	b8 87       	std	Y+8, r27	; 0x08
    2cd6:	80 91 3a 21 	lds	r24, 0x213A
    2cda:	e8 2f       	mov	r30, r24
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	69 89       	ldd	r22, Y+17	; 0x11
    2ce0:	7a 89       	ldd	r23, Y+18	; 0x12
    2ce2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce6:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ce8:	3e 85       	ldd	r19, Y+14	; 0x0e
    2cea:	4f 85       	ldd	r20, Y+15	; 0x0f
    2cec:	58 89       	ldd	r21, Y+16	; 0x10
    2cee:	e9 84       	ldd	r14, Y+9	; 0x09
    2cf0:	fa 84       	ldd	r15, Y+10	; 0x0a
    2cf2:	0b 85       	ldd	r16, Y+11	; 0x0b
    2cf4:	1c 85       	ldd	r17, Y+12	; 0x0c
    2cf6:	ad 80       	ldd	r10, Y+5	; 0x05
    2cf8:	be 80       	ldd	r11, Y+6	; 0x06
    2cfa:	cf 80       	ldd	r12, Y+7	; 0x07
    2cfc:	d8 84       	ldd	r13, Y+8	; 0x08
    2cfe:	4f 01       	movw	r8, r30
    2d00:	0e 94 89 25 	call	0x4b12	; 0x4b12 <mc_line>
    2d04:	80 93 2e 21 	sts	0x212E, r24
    2d08:	04 c0       	rjmp	.+8      	; 0x2d12 <gc_execute_block+0x810>
										gc.inverse_feed_rate_mode); 
					break;
				}

				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: {
					gc.status = _gc_compute_arc(); 
    2d0a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_gc_compute_arc>
    2d0e:	80 93 2e 21 	sts	0x212E, r24
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    2d12:	80 91 2e 21 	lds	r24, 0x212E
    2d16:	88 23       	and	r24, r24
    2d18:	21 f0       	breq	.+8      	; 0x2d22 <gc_execute_block+0x820>
    2d1a:	80 91 2e 21 	lds	r24, 0x212E
    2d1e:	81 30       	cpi	r24, 0x01	; 1
    2d20:	49 f4       	brne	.+18     	; 0x2d34 <gc_execute_block+0x832>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2d22:	87 e5       	ldi	r24, 0x57	; 87
    2d24:	91 e2       	ldi	r25, 0x21	; 33
    2d26:	23 e6       	ldi	r18, 0x63	; 99
    2d28:	31 e2       	ldi	r19, 0x21	; 33
    2d2a:	b9 01       	movw	r22, r18
    2d2c:	4c e0       	ldi	r20, 0x0C	; 12
    2d2e:	50 e0       	ldi	r21, 0x00	; 0
    2d30:	0e 94 d8 61 	call	0xc3b0	; 0xc3b0 <memcpy>
	};
	return(gc.status);
    2d34:	90 91 2e 21 	lds	r25, 0x212E
    2d38:	9b 8f       	std	Y+27, r25	; 0x1b
    2d3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
}
    2d3c:	a1 96       	adiw	r28, 0x21	; 33
    2d3e:	cd bf       	out	0x3d, r28	; 61
    2d40:	de bf       	out	0x3e, r29	; 62
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	1f 91       	pop	r17
    2d48:	0f 91       	pop	r16
    2d4a:	ff 90       	pop	r15
    2d4c:	ef 90       	pop	r14
    2d4e:	df 90       	pop	r13
    2d50:	cf 90       	pop	r12
    2d52:	bf 90       	pop	r11
    2d54:	af 90       	pop	r10
    2d56:	9f 90       	pop	r9
    2d58:	8f 90       	pop	r8
    2d5a:	08 95       	ret

00002d5c <_gc_compute_arc>:
/*
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	0f 92       	push	r0
    2d62:	0f 92       	push	r0
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
	if (gc.radius_mode) {
    2d68:	80 91 3d 21 	lds	r24, 0x213D
    2d6c:	88 23       	and	r24, r24
    2d6e:	59 f0       	breq	.+22     	; 0x2d86 <_gc_compute_arc+0x2a>
		if ((_gc_compute_radius_arc() != TG_OK)) {
    2d70:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <_gc_compute_radius_arc>
    2d74:	00 97       	sbiw	r24, 0x00	; 0
    2d76:	39 f0       	breq	.+14     	; 0x2d86 <_gc_compute_arc+0x2a>
			return (gc.status);
    2d78:	80 91 2e 21 	lds	r24, 0x212E
    2d7c:	28 2f       	mov	r18, r24
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	29 83       	std	Y+1, r18	; 0x01
    2d82:	3a 83       	std	Y+2, r19	; 0x02
    2d84:	04 c0       	rjmp	.+8      	; 0x2d8e <_gc_compute_arc+0x32>
		}
	}
	return (_gc_compute_center_arc());
    2d86:	0e 94 5d 18 	call	0x30ba	; 0x30ba <_gc_compute_center_arc>
    2d8a:	89 83       	std	Y+1, r24	; 0x01
    2d8c:	9a 83       	std	Y+2, r25	; 0x02
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	08 95       	ret

00002d9c <_gc_compute_radius_arc>:
 *
 * Compute arc center (offset) from radius. Used to prep for computing an center arc
 */

int _gc_compute_radius_arc()
{
    2d9c:	af 92       	push	r10
    2d9e:	bf 92       	push	r11
    2da0:	cf 92       	push	r12
    2da2:	df 92       	push	r13
    2da4:	ef 92       	push	r14
    2da6:	ff 92       	push	r15
    2da8:	0f 93       	push	r16
    2daa:	1f 93       	push	r17
    2dac:	df 93       	push	r29
    2dae:	cf 93       	push	r28
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	2e 97       	sbiw	r28, 0x0e	; 14
    2db6:	cd bf       	out	0x3d, r28	; 61
    2db8:	de bf       	out	0x3e, r29	; 62
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    2dba:	80 91 7b 21 	lds	r24, 0x217B
    2dbe:	88 2f       	mov	r24, r24
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	88 0f       	add	r24, r24
    2dc4:	99 1f       	adc	r25, r25
    2dc6:	88 0f       	add	r24, r24
    2dc8:	99 1f       	adc	r25, r25
    2dca:	fc 01       	movw	r30, r24
    2dcc:	ed 59       	subi	r30, 0x9D	; 157
    2dce:	fe 4d       	sbci	r31, 0xDE	; 222
    2dd0:	e0 80       	ld	r14, Z
    2dd2:	f1 80       	ldd	r15, Z+1	; 0x01
    2dd4:	02 81       	ldd	r16, Z+2	; 0x02
    2dd6:	13 81       	ldd	r17, Z+3	; 0x03
    2dd8:	80 91 7b 21 	lds	r24, 0x217B
    2ddc:	88 2f       	mov	r24, r24
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	88 0f       	add	r24, r24
    2de6:	99 1f       	adc	r25, r25
    2de8:	fc 01       	movw	r30, r24
    2dea:	e9 5a       	subi	r30, 0xA9	; 169
    2dec:	fe 4d       	sbci	r31, 0xDE	; 222
    2dee:	20 81       	ld	r18, Z
    2df0:	31 81       	ldd	r19, Z+1	; 0x01
    2df2:	42 81       	ldd	r20, Z+2	; 0x02
    2df4:	53 81       	ldd	r21, Z+3	; 0x03
    2df6:	c8 01       	movw	r24, r16
    2df8:	b7 01       	movw	r22, r14
    2dfa:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	89 87       	std	Y+9, r24	; 0x09
    2e04:	9a 87       	std	Y+10, r25	; 0x0a
    2e06:	ab 87       	std	Y+11, r26	; 0x0b
    2e08:	bc 87       	std	Y+12, r27	; 0x0c
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    2e0a:	80 91 7c 21 	lds	r24, 0x217C
    2e0e:	88 2f       	mov	r24, r24
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	88 0f       	add	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	88 0f       	add	r24, r24
    2e18:	99 1f       	adc	r25, r25
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	ed 59       	subi	r30, 0x9D	; 157
    2e1e:	fe 4d       	sbci	r31, 0xDE	; 222
    2e20:	e0 80       	ld	r14, Z
    2e22:	f1 80       	ldd	r15, Z+1	; 0x01
    2e24:	02 81       	ldd	r16, Z+2	; 0x02
    2e26:	13 81       	ldd	r17, Z+3	; 0x03
    2e28:	80 91 7c 21 	lds	r24, 0x217C
    2e2c:	88 2f       	mov	r24, r24
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	88 0f       	add	r24, r24
    2e32:	99 1f       	adc	r25, r25
    2e34:	88 0f       	add	r24, r24
    2e36:	99 1f       	adc	r25, r25
    2e38:	fc 01       	movw	r30, r24
    2e3a:	e9 5a       	subi	r30, 0xA9	; 169
    2e3c:	fe 4d       	sbci	r31, 0xDE	; 222
    2e3e:	20 81       	ld	r18, Z
    2e40:	31 81       	ldd	r19, Z+1	; 0x01
    2e42:	42 81       	ldd	r20, Z+2	; 0x02
    2e44:	53 81       	ldd	r21, Z+3	; 0x03
    2e46:	c8 01       	movw	r24, r16
    2e48:	b7 01       	movw	r22, r14
    2e4a:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	8d 83       	std	Y+5, r24	; 0x05
    2e54:	9e 83       	std	Y+6, r25	; 0x06
    2e56:	af 83       	std	Y+7, r26	; 0x07
    2e58:	b8 87       	std	Y+8, r27	; 0x08
        
	clear_vector(&gc.offset);
    2e5a:	8f e6       	ldi	r24, 0x6F	; 111
    2e5c:	91 e2       	ldi	r25, 0x21	; 33
    2e5e:	60 e0       	ldi	r22, 0x00	; 0
    2e60:	70 e0       	ldi	r23, 0x00	; 0
    2e62:	42 e0       	ldi	r20, 0x02	; 2
    2e64:	50 e0       	ldi	r21, 0x00	; 0
    2e66:	0e 94 e1 61 	call	0xc3c2	; 0xc3c2 <memset>
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    2e6a:	80 91 43 21 	lds	r24, 0x2143
    2e6e:	90 91 44 21 	lds	r25, 0x2144
    2e72:	a0 91 45 21 	lds	r26, 0x2145
    2e76:	b0 91 46 21 	lds	r27, 0x2146
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	cd 01       	movw	r24, r26
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e8       	ldi	r20, 0x80	; 128
    2e84:	50 e4       	ldi	r21, 0x40	; 64
    2e86:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	20 91 43 21 	lds	r18, 0x2143
    2e92:	30 91 44 21 	lds	r19, 0x2144
    2e96:	40 91 45 21 	lds	r20, 0x2145
    2e9a:	50 91 46 21 	lds	r21, 0x2146
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	5c 01       	movw	r10, r24
    2eac:	6d 01       	movw	r12, r26
    2eae:	69 85       	ldd	r22, Y+9	; 0x09
    2eb0:	7a 85       	ldd	r23, Y+10	; 0x0a
    2eb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2eb4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2eb6:	29 85       	ldd	r18, Y+9	; 0x09
    2eb8:	3a 85       	ldd	r19, Y+10	; 0x0a
    2eba:	4b 85       	ldd	r20, Y+11	; 0x0b
    2ebc:	5c 85       	ldd	r21, Y+12	; 0x0c
    2ebe:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	7c 01       	movw	r14, r24
    2ec8:	8d 01       	movw	r16, r26
    2eca:	6d 81       	ldd	r22, Y+5	; 0x05
    2ecc:	7e 81       	ldd	r23, Y+6	; 0x06
    2ece:	8f 81       	ldd	r24, Y+7	; 0x07
    2ed0:	98 85       	ldd	r25, Y+8	; 0x08
    2ed2:	2d 81       	ldd	r18, Y+5	; 0x05
    2ed4:	3e 81       	ldd	r19, Y+6	; 0x06
    2ed6:	4f 81       	ldd	r20, Y+7	; 0x07
    2ed8:	58 85       	ldd	r21, Y+8	; 0x08
    2eda:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	9c 01       	movw	r18, r24
    2ee4:	ad 01       	movw	r20, r26
    2ee6:	c8 01       	movw	r24, r16
    2ee8:	b7 01       	movw	r22, r14
    2eea:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	9c 01       	movw	r18, r24
    2ef4:	ad 01       	movw	r20, r26
    2ef6:	c6 01       	movw	r24, r12
    2ef8:	b5 01       	movw	r22, r10
    2efa:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	bc 01       	movw	r22, r24
    2f04:	cd 01       	movw	r24, r26
    2f06:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <sqrt>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	7c 01       	movw	r14, r24
    2f10:	8d 01       	movw	r16, r26
    2f12:	17 fb       	bst	r17, 7
    2f14:	10 95       	com	r17
    2f16:	17 f9       	bld	r17, 7
    2f18:	10 95       	com	r17
    2f1a:	89 85       	ldd	r24, Y+9	; 0x09
    2f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2f20:	bc 85       	ldd	r27, Y+12	; 0x0c
    2f22:	2d 81       	ldd	r18, Y+5	; 0x05
    2f24:	3e 81       	ldd	r19, Y+6	; 0x06
    2f26:	4f 81       	ldd	r20, Y+7	; 0x07
    2f28:	58 85       	ldd	r21, Y+8	; 0x08
    2f2a:	bc 01       	movw	r22, r24
    2f2c:	cd 01       	movw	r24, r26
    2f2e:	0e 94 3b 5d 	call	0xba76	; 0xba76 <hypot>
    2f32:	9b 01       	movw	r18, r22
    2f34:	ac 01       	movw	r20, r24
    2f36:	c8 01       	movw	r24, r16
    2f38:	b7 01       	movw	r22, r14
    2f3a:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	89 83       	std	Y+1, r24	; 0x01
    2f44:	9a 83       	std	Y+2, r25	; 0x02
    2f46:	ab 83       	std	Y+3, r26	; 0x03
    2f48:	bc 83       	std	Y+4, r27	; 0x04

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    2f4a:	69 81       	ldd	r22, Y+1	; 0x01
    2f4c:	7a 81       	ldd	r23, Y+2	; 0x02
    2f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f50:	9c 81       	ldd	r25, Y+4	; 0x04
    2f52:	29 81       	ldd	r18, Y+1	; 0x01
    2f54:	3a 81       	ldd	r19, Y+2	; 0x02
    2f56:	4b 81       	ldd	r20, Y+3	; 0x03
    2f58:	5c 81       	ldd	r21, Y+4	; 0x04
    2f5a:	0e 94 b5 5e 	call	0xbd6a	; 0xbd6a <__unordsf2>
    2f5e:	88 23       	and	r24, r24
    2f60:	51 f0       	breq	.+20     	; 0x2f76 <_gc_compute_radius_arc+0x1da>
		FAIL(TG_FLOATING_POINT_ERROR); 
    2f62:	8e e0       	ldi	r24, 0x0E	; 14
    2f64:	80 93 2e 21 	sts	0x212E, r24
		return(gc.status); 
    2f68:	80 91 2e 21 	lds	r24, 0x212E
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	2d 87       	std	Y+13, r18	; 0x0d
    2f72:	3e 87       	std	Y+14, r19	; 0x0e
    2f74:	92 c0       	rjmp	.+292    	; 0x309a <_gc_compute_radius_arc+0x2fe>
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2f76:	80 91 39 21 	lds	r24, 0x2139
    2f7a:	83 30       	cpi	r24, 0x03	; 3
    2f7c:	49 f4       	brne	.+18     	; 0x2f90 <_gc_compute_radius_arc+0x1f4>
		h_x2_div_d = -h_x2_div_d;
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	9a 81       	ldd	r25, Y+2	; 0x02
    2f82:	ab 81       	ldd	r26, Y+3	; 0x03
    2f84:	bc 81       	ldd	r27, Y+4	; 0x04
    2f86:	b0 58       	subi	r27, 0x80	; 128
    2f88:	89 83       	std	Y+1, r24	; 0x01
    2f8a:	9a 83       	std	Y+2, r25	; 0x02
    2f8c:	ab 83       	std	Y+3, r26	; 0x03
    2f8e:	bc 83       	std	Y+4, r27	; 0x04
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    2f90:	80 91 43 21 	lds	r24, 0x2143
    2f94:	90 91 44 21 	lds	r25, 0x2144
    2f98:	a0 91 45 21 	lds	r26, 0x2145
    2f9c:	b0 91 46 21 	lds	r27, 0x2146
    2fa0:	bc 01       	movw	r22, r24
    2fa2:	cd 01       	movw	r24, r26
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 e0       	ldi	r20, 0x00	; 0
    2faa:	50 e0       	ldi	r21, 0x00	; 0
    2fac:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <__cmpsf2>
    2fb0:	88 23       	and	r24, r24
    2fb2:	4c f4       	brge	.+18     	; 0x2fc6 <_gc_compute_radius_arc+0x22a>
		h_x2_div_d = -h_x2_div_d; 
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb8:	ab 81       	ldd	r26, Y+3	; 0x03
    2fba:	bc 81       	ldd	r27, Y+4	; 0x04
    2fbc:	b0 58       	subi	r27, 0x80	; 128
    2fbe:	89 83       	std	Y+1, r24	; 0x01
    2fc0:	9a 83       	std	Y+2, r25	; 0x02
    2fc2:	ab 83       	std	Y+3, r26	; 0x03
    2fc4:	bc 83       	std	Y+4, r27	; 0x04
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    2fc6:	80 91 7b 21 	lds	r24, 0x217B
    2fca:	08 2f       	mov	r16, r24
    2fcc:	10 e0       	ldi	r17, 0x00	; 0
    2fce:	6d 81       	ldd	r22, Y+5	; 0x05
    2fd0:	7e 81       	ldd	r23, Y+6	; 0x06
    2fd2:	8f 81       	ldd	r24, Y+7	; 0x07
    2fd4:	98 85       	ldd	r25, Y+8	; 0x08
    2fd6:	29 81       	ldd	r18, Y+1	; 0x01
    2fd8:	3a 81       	ldd	r19, Y+2	; 0x02
    2fda:	4b 81       	ldd	r20, Y+3	; 0x03
    2fdc:	5c 81       	ldd	r21, Y+4	; 0x04
    2fde:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	9c 01       	movw	r18, r24
    2fe8:	ad 01       	movw	r20, r26
    2fea:	69 85       	ldd	r22, Y+9	; 0x09
    2fec:	7a 85       	ldd	r23, Y+10	; 0x0a
    2fee:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ff0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ff2:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	bc 01       	movw	r22, r24
    2ffc:	cd 01       	movw	r24, r26
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	40 e0       	ldi	r20, 0x00	; 0
    3004:	50 e4       	ldi	r21, 0x40	; 64
    3006:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	9c 01       	movw	r18, r24
    3010:	ad 01       	movw	r20, r26
    3012:	c8 01       	movw	r24, r16
    3014:	88 0f       	add	r24, r24
    3016:	99 1f       	adc	r25, r25
    3018:	88 0f       	add	r24, r24
    301a:	99 1f       	adc	r25, r25
    301c:	fc 01       	movw	r30, r24
    301e:	e1 59       	subi	r30, 0x91	; 145
    3020:	fe 4d       	sbci	r31, 0xDE	; 222
    3022:	20 83       	st	Z, r18
    3024:	31 83       	std	Z+1, r19	; 0x01
    3026:	42 83       	std	Z+2, r20	; 0x02
    3028:	53 83       	std	Z+3, r21	; 0x03
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    302a:	80 91 7c 21 	lds	r24, 0x217C
    302e:	08 2f       	mov	r16, r24
    3030:	10 e0       	ldi	r17, 0x00	; 0
    3032:	69 85       	ldd	r22, Y+9	; 0x09
    3034:	7a 85       	ldd	r23, Y+10	; 0x0a
    3036:	8b 85       	ldd	r24, Y+11	; 0x0b
    3038:	9c 85       	ldd	r25, Y+12	; 0x0c
    303a:	29 81       	ldd	r18, Y+1	; 0x01
    303c:	3a 81       	ldd	r19, Y+2	; 0x02
    303e:	4b 81       	ldd	r20, Y+3	; 0x03
    3040:	5c 81       	ldd	r21, Y+4	; 0x04
    3042:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	bc 01       	movw	r22, r24
    304c:	cd 01       	movw	r24, r26
    304e:	2d 81       	ldd	r18, Y+5	; 0x05
    3050:	3e 81       	ldd	r19, Y+6	; 0x06
    3052:	4f 81       	ldd	r20, Y+7	; 0x07
    3054:	58 85       	ldd	r21, Y+8	; 0x08
    3056:	0e 94 9f 5a 	call	0xb53e	; 0xb53e <__addsf3>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	bc 01       	movw	r22, r24
    3060:	cd 01       	movw	r24, r26
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	40 e0       	ldi	r20, 0x00	; 0
    3068:	50 e4       	ldi	r21, 0x40	; 64
    306a:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	9c 01       	movw	r18, r24
    3074:	ad 01       	movw	r20, r26
    3076:	c8 01       	movw	r24, r16
    3078:	88 0f       	add	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	88 0f       	add	r24, r24
    307e:	99 1f       	adc	r25, r25
    3080:	fc 01       	movw	r30, r24
    3082:	e1 59       	subi	r30, 0x91	; 145
    3084:	fe 4d       	sbci	r31, 0xDE	; 222
    3086:	20 83       	st	Z, r18
    3088:	31 83       	std	Z+1, r19	; 0x01
    308a:	42 83       	std	Z+2, r20	; 0x02
    308c:	53 83       	std	Z+3, r21	; 0x03
	return (gc.status);
    308e:	80 91 2e 21 	lds	r24, 0x212E
    3092:	28 2f       	mov	r18, r24
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	2d 87       	std	Y+13, r18	; 0x0d
    3098:	3e 87       	std	Y+14, r19	; 0x0e
    309a:	8d 85       	ldd	r24, Y+13	; 0x0d
    309c:	9e 85       	ldd	r25, Y+14	; 0x0e
} 
    309e:	2e 96       	adiw	r28, 0x0e	; 14
    30a0:	cd bf       	out	0x3d, r28	; 61
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	cf 91       	pop	r28
    30a6:	df 91       	pop	r29
    30a8:	1f 91       	pop	r17
    30aa:	0f 91       	pop	r16
    30ac:	ff 90       	pop	r15
    30ae:	ef 90       	pop	r14
    30b0:	df 90       	pop	r13
    30b2:	cf 90       	pop	r12
    30b4:	bf 90       	pop	r11
    30b6:	af 90       	pop	r10
    30b8:	08 95       	ret

000030ba <_gc_compute_center_arc>:
 *
 * Compute the arc move given I and J (arc center point - found in offset vector).
 */

int _gc_compute_center_arc()
{
    30ba:	6f 92       	push	r6
    30bc:	7f 92       	push	r7
    30be:	8f 92       	push	r8
    30c0:	9f 92       	push	r9
    30c2:	af 92       	push	r10
    30c4:	bf 92       	push	r11
    30c6:	cf 92       	push	r12
    30c8:	df 92       	push	r13
    30ca:	ef 92       	push	r14
    30cc:	ff 92       	push	r15
    30ce:	0f 93       	push	r16
    30d0:	1f 93       	push	r17
    30d2:	df 93       	push	r29
    30d4:	cf 93       	push	r28
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
    30da:	a0 97       	sbiw	r28, 0x20	; 32
    30dc:	cd bf       	out	0x3d, r28	; 61
    30de:	de bf       	out	0x3e, r29	; 62
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    30e0:	80 91 7b 21 	lds	r24, 0x217B
    30e4:	88 2f       	mov	r24, r24
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	88 0f       	add	r24, r24
    30ee:	99 1f       	adc	r25, r25
    30f0:	fc 01       	movw	r30, r24
    30f2:	e1 59       	subi	r30, 0x91	; 145
    30f4:	fe 4d       	sbci	r31, 0xDE	; 222
    30f6:	80 81       	ld	r24, Z
    30f8:	91 81       	ldd	r25, Z+1	; 0x01
    30fa:	a2 81       	ldd	r26, Z+2	; 0x02
    30fc:	b3 81       	ldd	r27, Z+3	; 0x03
    30fe:	7c 01       	movw	r14, r24
    3100:	8d 01       	movw	r16, r26
    3102:	17 fb       	bst	r17, 7
    3104:	10 95       	com	r17
    3106:	17 f9       	bld	r17, 7
    3108:	10 95       	com	r17
    310a:	80 91 7c 21 	lds	r24, 0x217C
    310e:	88 2f       	mov	r24, r24
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	88 0f       	add	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	88 0f       	add	r24, r24
    3118:	99 1f       	adc	r25, r25
    311a:	fc 01       	movw	r30, r24
    311c:	e1 59       	subi	r30, 0x91	; 145
    311e:	fe 4d       	sbci	r31, 0xDE	; 222
    3120:	80 81       	ld	r24, Z
    3122:	91 81       	ldd	r25, Z+1	; 0x01
    3124:	a2 81       	ldd	r26, Z+2	; 0x02
    3126:	b3 81       	ldd	r27, Z+3	; 0x03
    3128:	9c 01       	movw	r18, r24
    312a:	ad 01       	movw	r20, r26
    312c:	50 58       	subi	r21, 0x80	; 128
    312e:	c8 01       	movw	r24, r16
    3130:	b7 01       	movw	r22, r14
    3132:	0e 94 35 11 	call	0x226a	; 0x226a <theta>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	89 8b       	std	Y+17, r24	; 0x11
    313c:	9a 8b       	std	Y+18, r25	; 0x12
    313e:	ab 8b       	std	Y+19, r26	; 0x13
    3140:	bc 8b       	std	Y+20, r27	; 0x14
	if(isnan(theta_start)) { 
    3142:	69 89       	ldd	r22, Y+17	; 0x11
    3144:	7a 89       	ldd	r23, Y+18	; 0x12
    3146:	8b 89       	ldd	r24, Y+19	; 0x13
    3148:	9c 89       	ldd	r25, Y+20	; 0x14
    314a:	29 89       	ldd	r18, Y+17	; 0x11
    314c:	3a 89       	ldd	r19, Y+18	; 0x12
    314e:	4b 89       	ldd	r20, Y+19	; 0x13
    3150:	5c 89       	ldd	r21, Y+20	; 0x14
    3152:	0e 94 b5 5e 	call	0xbd6a	; 0xbd6a <__unordsf2>
    3156:	88 23       	and	r24, r24
    3158:	51 f0       	breq	.+20     	; 0x316e <_gc_compute_center_arc+0xb4>
		FAIL(TG_ARC_ERROR); 
    315a:	80 e1       	ldi	r24, 0x10	; 16
    315c:	80 93 2e 21 	sts	0x212E, r24
		return(gc.status); 
    3160:	80 91 2e 21 	lds	r24, 0x212E
    3164:	68 2e       	mov	r6, r24
    3166:	77 24       	eor	r7, r7
    3168:	6f 8e       	std	Y+31, r6	; 0x1f
    316a:	78 a2       	std	Y+32, r7	; 0x20
    316c:	9c c1       	rjmp	.+824    	; 0x34a6 <_gc_compute_center_arc+0x3ec>
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    316e:	80 91 7b 21 	lds	r24, 0x217B
    3172:	88 2f       	mov	r24, r24
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	88 0f       	add	r24, r24
    3178:	99 1f       	adc	r25, r25
    317a:	88 0f       	add	r24, r24
    317c:	99 1f       	adc	r25, r25
    317e:	fc 01       	movw	r30, r24
    3180:	ed 59       	subi	r30, 0x9D	; 157
    3182:	fe 4d       	sbci	r31, 0xDE	; 222
    3184:	e0 80       	ld	r14, Z
    3186:	f1 80       	ldd	r15, Z+1	; 0x01
    3188:	02 81       	ldd	r16, Z+2	; 0x02
    318a:	13 81       	ldd	r17, Z+3	; 0x03
    318c:	80 91 7b 21 	lds	r24, 0x217B
    3190:	88 2f       	mov	r24, r24
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	88 0f       	add	r24, r24
    3196:	99 1f       	adc	r25, r25
    3198:	88 0f       	add	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	fc 01       	movw	r30, r24
    319e:	e1 59       	subi	r30, 0x91	; 145
    31a0:	fe 4d       	sbci	r31, 0xDE	; 222
    31a2:	20 81       	ld	r18, Z
    31a4:	31 81       	ldd	r19, Z+1	; 0x01
    31a6:	42 81       	ldd	r20, Z+2	; 0x02
    31a8:	53 81       	ldd	r21, Z+3	; 0x03
    31aa:	c8 01       	movw	r24, r16
    31ac:	b7 01       	movw	r22, r14
    31ae:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	7c 01       	movw	r14, r24
    31b8:	8d 01       	movw	r16, r26
    31ba:	80 91 7b 21 	lds	r24, 0x217B
    31be:	88 2f       	mov	r24, r24
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	88 0f       	add	r24, r24
    31c4:	99 1f       	adc	r25, r25
    31c6:	88 0f       	add	r24, r24
    31c8:	99 1f       	adc	r25, r25
    31ca:	fc 01       	movw	r30, r24
    31cc:	e9 5a       	subi	r30, 0xA9	; 169
    31ce:	fe 4d       	sbci	r31, 0xDE	; 222
    31d0:	20 81       	ld	r18, Z
    31d2:	31 81       	ldd	r19, Z+1	; 0x01
    31d4:	42 81       	ldd	r20, Z+2	; 0x02
    31d6:	53 81       	ldd	r21, Z+3	; 0x03
    31d8:	c8 01       	movw	r24, r16
    31da:	b7 01       	movw	r22, r14
    31dc:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	5c 01       	movw	r10, r24
    31e6:	6d 01       	movw	r12, r26
    31e8:	80 91 7c 21 	lds	r24, 0x217C
    31ec:	88 2f       	mov	r24, r24
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	88 0f       	add	r24, r24
    31f2:	99 1f       	adc	r25, r25
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	fc 01       	movw	r30, r24
    31fa:	ed 59       	subi	r30, 0x9D	; 157
    31fc:	fe 4d       	sbci	r31, 0xDE	; 222
    31fe:	e0 80       	ld	r14, Z
    3200:	f1 80       	ldd	r15, Z+1	; 0x01
    3202:	02 81       	ldd	r16, Z+2	; 0x02
    3204:	13 81       	ldd	r17, Z+3	; 0x03
    3206:	80 91 7c 21 	lds	r24, 0x217C
    320a:	88 2f       	mov	r24, r24
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	88 0f       	add	r24, r24
    3210:	99 1f       	adc	r25, r25
    3212:	88 0f       	add	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	fc 01       	movw	r30, r24
    3218:	e1 59       	subi	r30, 0x91	; 145
    321a:	fe 4d       	sbci	r31, 0xDE	; 222
    321c:	20 81       	ld	r18, Z
    321e:	31 81       	ldd	r19, Z+1	; 0x01
    3220:	42 81       	ldd	r20, Z+2	; 0x02
    3222:	53 81       	ldd	r21, Z+3	; 0x03
    3224:	c8 01       	movw	r24, r16
    3226:	b7 01       	movw	r22, r14
    3228:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	7c 01       	movw	r14, r24
    3232:	8d 01       	movw	r16, r26
    3234:	80 91 7c 21 	lds	r24, 0x217C
    3238:	88 2f       	mov	r24, r24
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	88 0f       	add	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	88 0f       	add	r24, r24
    3242:	99 1f       	adc	r25, r25
    3244:	fc 01       	movw	r30, r24
    3246:	e9 5a       	subi	r30, 0xA9	; 169
    3248:	fe 4d       	sbci	r31, 0xDE	; 222
    324a:	20 81       	ld	r18, Z
    324c:	31 81       	ldd	r19, Z+1	; 0x01
    324e:	42 81       	ldd	r20, Z+2	; 0x02
    3250:	53 81       	ldd	r21, Z+3	; 0x03
    3252:	c8 01       	movw	r24, r16
    3254:	b7 01       	movw	r22, r14
    3256:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	9c 01       	movw	r18, r24
    3260:	ad 01       	movw	r20, r26
    3262:	c6 01       	movw	r24, r12
    3264:	b5 01       	movw	r22, r10
    3266:	0e 94 35 11 	call	0x226a	; 0x226a <theta>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	8d 87       	std	Y+13, r24	; 0x0d
    3270:	9e 87       	std	Y+14, r25	; 0x0e
    3272:	af 87       	std	Y+15, r26	; 0x0f
    3274:	b8 8b       	std	Y+16, r27	; 0x10
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    3276:	6d 85       	ldd	r22, Y+13	; 0x0d
    3278:	7e 85       	ldd	r23, Y+14	; 0x0e
    327a:	8f 85       	ldd	r24, Y+15	; 0x0f
    327c:	98 89       	ldd	r25, Y+16	; 0x10
    327e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3280:	3e 85       	ldd	r19, Y+14	; 0x0e
    3282:	4f 85       	ldd	r20, Y+15	; 0x0f
    3284:	58 89       	ldd	r21, Y+16	; 0x10
    3286:	0e 94 b5 5e 	call	0xbd6a	; 0xbd6a <__unordsf2>
    328a:	88 23       	and	r24, r24
    328c:	51 f0       	breq	.+20     	; 0x32a2 <_gc_compute_center_arc+0x1e8>
		FAIL(TG_ARC_ERROR); 
    328e:	80 e1       	ldi	r24, 0x10	; 16
    3290:	80 93 2e 21 	sts	0x212E, r24
		return(gc.status); 
    3294:	80 91 2e 21 	lds	r24, 0x212E
    3298:	88 2e       	mov	r8, r24
    329a:	99 24       	eor	r9, r9
    329c:	8f 8e       	std	Y+31, r8	; 0x1f
    329e:	98 a2       	std	Y+32, r9	; 0x20
    32a0:	02 c1       	rjmp	.+516    	; 0x34a6 <_gc_compute_center_arc+0x3ec>
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    32a2:	6d 85       	ldd	r22, Y+13	; 0x0d
    32a4:	7e 85       	ldd	r23, Y+14	; 0x0e
    32a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a8:	98 89       	ldd	r25, Y+16	; 0x10
    32aa:	29 89       	ldd	r18, Y+17	; 0x11
    32ac:	3a 89       	ldd	r19, Y+18	; 0x12
    32ae:	4b 89       	ldd	r20, Y+19	; 0x13
    32b0:	5c 89       	ldd	r21, Y+20	; 0x14
    32b2:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <__cmpsf2>
    32b6:	88 23       	and	r24, r24
    32b8:	84 f4       	brge	.+32     	; 0x32da <_gc_compute_center_arc+0x220>
		theta_end += 2*M_PI;
    32ba:	6d 85       	ldd	r22, Y+13	; 0x0d
    32bc:	7e 85       	ldd	r23, Y+14	; 0x0e
    32be:	8f 85       	ldd	r24, Y+15	; 0x0f
    32c0:	98 89       	ldd	r25, Y+16	; 0x10
    32c2:	2b ed       	ldi	r18, 0xDB	; 219
    32c4:	3f e0       	ldi	r19, 0x0F	; 15
    32c6:	49 ec       	ldi	r20, 0xC9	; 201
    32c8:	50 e4       	ldi	r21, 0x40	; 64
    32ca:	0e 94 9f 5a 	call	0xb53e	; 0xb53e <__addsf3>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	8d 87       	std	Y+13, r24	; 0x0d
    32d4:	9e 87       	std	Y+14, r25	; 0x0e
    32d6:	af 87       	std	Y+15, r26	; 0x0f
    32d8:	b8 8b       	std	Y+16, r27	; 0x10
	}
	angular_travel = theta_end - theta_start;
    32da:	6d 85       	ldd	r22, Y+13	; 0x0d
    32dc:	7e 85       	ldd	r23, Y+14	; 0x0e
    32de:	8f 85       	ldd	r24, Y+15	; 0x0f
    32e0:	98 89       	ldd	r25, Y+16	; 0x10
    32e2:	29 89       	ldd	r18, Y+17	; 0x11
    32e4:	3a 89       	ldd	r19, Y+18	; 0x12
    32e6:	4b 89       	ldd	r20, Y+19	; 0x13
    32e8:	5c 89       	ldd	r21, Y+20	; 0x14
    32ea:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22
    32f2:	89 87       	std	Y+9, r24	; 0x09
    32f4:	9a 87       	std	Y+10, r25	; 0x0a
    32f6:	ab 87       	std	Y+11, r26	; 0x0b
    32f8:	bc 87       	std	Y+12, r27	; 0x0c

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    32fa:	80 91 39 21 	lds	r24, 0x2139
    32fe:	83 30       	cpi	r24, 0x03	; 3
    3300:	81 f4       	brne	.+32     	; 0x3322 <_gc_compute_center_arc+0x268>
		angular_travel = angular_travel - 2*M_PI;
    3302:	69 85       	ldd	r22, Y+9	; 0x09
    3304:	7a 85       	ldd	r23, Y+10	; 0x0a
    3306:	8b 85       	ldd	r24, Y+11	; 0x0b
    3308:	9c 85       	ldd	r25, Y+12	; 0x0c
    330a:	2b ed       	ldi	r18, 0xDB	; 219
    330c:	3f e0       	ldi	r19, 0x0F	; 15
    330e:	49 ec       	ldi	r20, 0xC9	; 201
    3310:	50 e4       	ldi	r21, 0x40	; 64
    3312:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	89 87       	std	Y+9, r24	; 0x09
    331c:	9a 87       	std	Y+10, r25	; 0x0a
    331e:	ab 87       	std	Y+11, r26	; 0x0b
    3320:	bc 87       	std	Y+12, r27	; 0x0c
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    3322:	80 91 7b 21 	lds	r24, 0x217B
    3326:	88 2f       	mov	r24, r24
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	88 0f       	add	r24, r24
    3330:	99 1f       	adc	r25, r25
    3332:	fc 01       	movw	r30, r24
    3334:	e1 59       	subi	r30, 0x91	; 145
    3336:	fe 4d       	sbci	r31, 0xDE	; 222
    3338:	e0 80       	ld	r14, Z
    333a:	f1 80       	ldd	r15, Z+1	; 0x01
    333c:	02 81       	ldd	r16, Z+2	; 0x02
    333e:	13 81       	ldd	r17, Z+3	; 0x03
    3340:	80 91 7c 21 	lds	r24, 0x217C
    3344:	88 2f       	mov	r24, r24
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	88 0f       	add	r24, r24
    334e:	99 1f       	adc	r25, r25
    3350:	fc 01       	movw	r30, r24
    3352:	e1 59       	subi	r30, 0x91	; 145
    3354:	fe 4d       	sbci	r31, 0xDE	; 222
    3356:	20 81       	ld	r18, Z
    3358:	31 81       	ldd	r19, Z+1	; 0x01
    335a:	42 81       	ldd	r20, Z+2	; 0x02
    335c:	53 81       	ldd	r21, Z+3	; 0x03
    335e:	c8 01       	movw	r24, r16
    3360:	b7 01       	movw	r22, r14
    3362:	0e 94 3b 5d 	call	0xba76	; 0xba76 <hypot>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	8d 83       	std	Y+5, r24	; 0x05
    336c:	9e 83       	std	Y+6, r25	; 0x06
    336e:	af 83       	std	Y+7, r26	; 0x07
    3370:	b8 87       	std	Y+8, r27	; 0x08

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    3372:	80 91 7d 21 	lds	r24, 0x217D
    3376:	88 2f       	mov	r24, r24
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	88 0f       	add	r24, r24
    337c:	99 1f       	adc	r25, r25
    337e:	88 0f       	add	r24, r24
    3380:	99 1f       	adc	r25, r25
    3382:	fc 01       	movw	r30, r24
    3384:	ed 59       	subi	r30, 0x9D	; 157
    3386:	fe 4d       	sbci	r31, 0xDE	; 222
    3388:	e0 80       	ld	r14, Z
    338a:	f1 80       	ldd	r15, Z+1	; 0x01
    338c:	02 81       	ldd	r16, Z+2	; 0x02
    338e:	13 81       	ldd	r17, Z+3	; 0x03
    3390:	80 91 7d 21 	lds	r24, 0x217D
    3394:	88 2f       	mov	r24, r24
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	88 0f       	add	r24, r24
    339a:	99 1f       	adc	r25, r25
    339c:	88 0f       	add	r24, r24
    339e:	99 1f       	adc	r25, r25
    33a0:	fc 01       	movw	r30, r24
    33a2:	e9 5a       	subi	r30, 0xA9	; 169
    33a4:	fe 4d       	sbci	r31, 0xDE	; 222
    33a6:	20 81       	ld	r18, Z
    33a8:	31 81       	ldd	r19, Z+1	; 0x01
    33aa:	42 81       	ldd	r20, Z+2	; 0x02
    33ac:	53 81       	ldd	r21, Z+3	; 0x03
    33ae:	c8 01       	movw	r24, r16
    33b0:	b7 01       	movw	r22, r14
    33b2:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	89 83       	std	Y+1, r24	; 0x01
    33bc:	9a 83       	std	Y+2, r25	; 0x02
    33be:	ab 83       	std	Y+3, r26	; 0x03
    33c0:	bc 83       	std	Y+4, r27	; 0x04

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    33c2:	80 91 7b 21 	lds	r24, 0x217B
    33c6:	28 2f       	mov	r18, r24
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	2d 8f       	std	Y+29, r18	; 0x1d
    33cc:	3e 8f       	std	Y+30, r19	; 0x1e
    33ce:	80 91 7c 21 	lds	r24, 0x217C
    33d2:	a8 2f       	mov	r26, r24
    33d4:	b0 e0       	ldi	r27, 0x00	; 0
    33d6:	ab 8f       	std	Y+27, r26	; 0x1b
    33d8:	bc 8f       	std	Y+28, r27	; 0x1c
    33da:	80 91 7d 21 	lds	r24, 0x217D
    33de:	68 2e       	mov	r6, r24
    33e0:	77 24       	eor	r7, r7
    33e2:	69 8e       	std	Y+25, r6	; 0x19
    33e4:	7a 8e       	std	Y+26, r7	; 0x1a
    33e6:	80 91 3a 21 	lds	r24, 0x213A
    33ea:	88 23       	and	r24, r24
    33ec:	69 f0       	breq	.+26     	; 0x3408 <_gc_compute_center_arc+0x34e>
    33ee:	80 91 53 21 	lds	r24, 0x2153
    33f2:	90 91 54 21 	lds	r25, 0x2154
    33f6:	a0 91 55 21 	lds	r26, 0x2155
    33fa:	b0 91 56 21 	lds	r27, 0x2156
    33fe:	8d 8b       	std	Y+21, r24	; 0x15
    3400:	9e 8b       	std	Y+22, r25	; 0x16
    3402:	af 8b       	std	Y+23, r26	; 0x17
    3404:	b8 8f       	std	Y+24, r27	; 0x18
    3406:	0c c0       	rjmp	.+24     	; 0x3420 <_gc_compute_center_arc+0x366>
    3408:	60 90 47 21 	lds	r6, 0x2147
    340c:	70 90 48 21 	lds	r7, 0x2148
    3410:	80 90 49 21 	lds	r8, 0x2149
    3414:	90 90 4a 21 	lds	r9, 0x214A
    3418:	6d 8a       	std	Y+21, r6	; 0x15
    341a:	7e 8a       	std	Y+22, r7	; 0x16
    341c:	8f 8a       	std	Y+23, r8	; 0x17
    341e:	98 8e       	std	Y+24, r9	; 0x18
    3420:	80 91 3a 21 	lds	r24, 0x213A
    3424:	68 2f       	mov	r22, r24
    3426:	70 e0       	ldi	r23, 0x00	; 0
    3428:	2d b7       	in	r18, 0x3d	; 61
    342a:	3e b7       	in	r19, 0x3e	; 62
    342c:	2a 50       	subi	r18, 0x0A	; 10
    342e:	30 40       	sbci	r19, 0x00	; 0
    3430:	2d bf       	out	0x3d, r18	; 61
    3432:	3e bf       	out	0x3e, r19	; 62
    3434:	ed b7       	in	r30, 0x3d	; 61
    3436:	fe b7       	in	r31, 0x3e	; 62
    3438:	31 96       	adiw	r30, 0x01	; 1
    343a:	89 89       	ldd	r24, Y+17	; 0x11
    343c:	9a 89       	ldd	r25, Y+18	; 0x12
    343e:	ab 89       	ldd	r26, Y+19	; 0x13
    3440:	bc 89       	ldd	r27, Y+20	; 0x14
    3442:	29 85       	ldd	r18, Y+9	; 0x09
    3444:	3a 85       	ldd	r19, Y+10	; 0x0a
    3446:	4b 85       	ldd	r20, Y+11	; 0x0b
    3448:	5c 85       	ldd	r21, Y+12	; 0x0c
    344a:	ed 80       	ldd	r14, Y+5	; 0x05
    344c:	fe 80       	ldd	r15, Y+6	; 0x06
    344e:	0f 81       	ldd	r16, Y+7	; 0x07
    3450:	18 85       	ldd	r17, Y+8	; 0x08
    3452:	a9 80       	ldd	r10, Y+1	; 0x01
    3454:	ba 80       	ldd	r11, Y+2	; 0x02
    3456:	cb 80       	ldd	r12, Y+3	; 0x03
    3458:	dc 80       	ldd	r13, Y+4	; 0x04
    345a:	6b 8c       	ldd	r6, Y+27	; 0x1b
    345c:	7c 8c       	ldd	r7, Y+28	; 0x1c
    345e:	60 82       	st	Z, r6
    3460:	71 82       	std	Z+1, r7	; 0x01
    3462:	89 8c       	ldd	r8, Y+25	; 0x19
    3464:	9a 8c       	ldd	r9, Y+26	; 0x1a
    3466:	82 82       	std	Z+2, r8	; 0x02
    3468:	93 82       	std	Z+3, r9	; 0x03
    346a:	6d 88       	ldd	r6, Y+21	; 0x15
    346c:	7e 88       	ldd	r7, Y+22	; 0x16
    346e:	8f 88       	ldd	r8, Y+23	; 0x17
    3470:	98 8c       	ldd	r9, Y+24	; 0x18
    3472:	64 82       	std	Z+4, r6	; 0x04
    3474:	75 82       	std	Z+5, r7	; 0x05
    3476:	86 82       	std	Z+6, r8	; 0x06
    3478:	97 82       	std	Z+7, r9	; 0x07
    347a:	60 87       	std	Z+8, r22	; 0x08
    347c:	71 87       	std	Z+9, r23	; 0x09
    347e:	bc 01       	movw	r22, r24
    3480:	cd 01       	movw	r24, r26
    3482:	8d 8c       	ldd	r8, Y+29	; 0x1d
    3484:	9e 8c       	ldd	r9, Y+30	; 0x1e
    3486:	0e 94 41 2b 	call	0x5682	; 0x5682 <mc_arc>
    348a:	2d b7       	in	r18, 0x3d	; 61
    348c:	3e b7       	in	r19, 0x3e	; 62
    348e:	26 5f       	subi	r18, 0xF6	; 246
    3490:	3f 4f       	sbci	r19, 0xFF	; 255
    3492:	2d bf       	out	0x3d, r18	; 61
    3494:	3e bf       	out	0x3e, r19	; 62
    3496:	80 93 2e 21 	sts	0x212E, r24
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line_nonblock(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//								(gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//								 gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    349a:	80 91 2e 21 	lds	r24, 0x212E
    349e:	a8 2f       	mov	r26, r24
    34a0:	b0 e0       	ldi	r27, 0x00	; 0
    34a2:	af 8f       	std	Y+31, r26	; 0x1f
    34a4:	b8 a3       	std	Y+32, r27	; 0x20
    34a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34a8:	98 a1       	ldd	r25, Y+32	; 0x20
}
    34aa:	a0 96       	adiw	r28, 0x20	; 32
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	de bf       	out	0x3e, r29	; 62
    34b0:	cf 91       	pop	r28
    34b2:	df 91       	pop	r29
    34b4:	1f 91       	pop	r17
    34b6:	0f 91       	pop	r16
    34b8:	ff 90       	pop	r15
    34ba:	ef 90       	pop	r14
    34bc:	df 90       	pop	r13
    34be:	cf 90       	pop	r12
    34c0:	bf 90       	pop	r11
    34c2:	af 90       	pop	r10
    34c4:	9f 90       	pop	r9
    34c6:	8f 90       	pop	r8
    34c8:	7f 90       	pop	r7
    34ca:	6f 90       	pop	r6
    34cc:	08 95       	ret

000034ce <cfg_init>:
/* 
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
    34ce:	df 93       	push	r29
    34d0:	cf 93       	push	r28
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
	cfg_reset();
    34d6:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <cfg_reset>
}
    34da:	cf 91       	pop	r28
    34dc:	df 91       	pop	r29
    34de:	08 95       	ret

000034e0 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    34e0:	0f 93       	push	r16
    34e2:	1f 93       	push	r17
    34e4:	df 93       	push	r29
    34e6:	cf 93       	push	r28
    34e8:	cd b7       	in	r28, 0x3d	; 61
    34ea:	de b7       	in	r29, 0x3e	; 62
    34ec:	2f 97       	sbiw	r28, 0x0f	; 15
    34ee:	cd bf       	out	0x3d, r28	; 61
    34f0:	de bf       	out	0x3e, r29	; 62
    34f2:	89 87       	std	Y+9, r24	; 0x09
    34f4:	9a 87       	std	Y+10, r25	; 0x0a
	char c;
	char *val = 0;				// pointer to normalized value 
    34f6:	1c 82       	std	Y+4, r1	; 0x04
    34f8:	1d 82       	std	Y+5, r1	; 0x05
	char *end = 0;				// pointer to end of value
    34fa:	1f 82       	std	Y+7, r1	; 0x07
    34fc:	18 86       	std	Y+8, r1	; 0x08
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
    34fe:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t j = 0;				// buffer write index
    3500:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t	axis = 0;			// axis index
    3502:	19 82       	std	Y+1, r1	; 0x01
    3504:	72 c0       	rjmp	.+228    	; 0x35ea <cfg_parse+0x10a>

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    3506:	8e 81       	ldd	r24, Y+6	; 0x06
    3508:	8d 33       	cpi	r24, 0x3D	; 61
    350a:	b1 f4       	brne	.+44     	; 0x3538 <cfg_parse+0x58>
			text[j++] = 0;						// terminate tag at separator
    350c:	8a 81       	ldd	r24, Y+2	; 0x02
    350e:	28 2f       	mov	r18, r24
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	89 85       	ldd	r24, Y+9	; 0x09
    3514:	9a 85       	ldd	r25, Y+10	; 0x0a
    3516:	fc 01       	movw	r30, r24
    3518:	e2 0f       	add	r30, r18
    351a:	f3 1f       	adc	r31, r19
    351c:	10 82       	st	Z, r1
    351e:	8a 81       	ldd	r24, Y+2	; 0x02
    3520:	8f 5f       	subi	r24, 0xFF	; 255
    3522:	8a 83       	std	Y+2, r24	; 0x02
			val = &text[j];						// new string starts at value
    3524:	8a 81       	ldd	r24, Y+2	; 0x02
    3526:	28 2f       	mov	r18, r24
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	89 85       	ldd	r24, Y+9	; 0x09
    352c:	9a 85       	ldd	r25, Y+10	; 0x0a
    352e:	82 0f       	add	r24, r18
    3530:	93 1f       	adc	r25, r19
    3532:	8c 83       	std	Y+4, r24	; 0x04
    3534:	9d 83       	std	Y+5, r25	; 0x05
    3536:	59 c0       	rjmp	.+178    	; 0x35ea <cfg_parse+0x10a>
		} else if ( (c == '-') || 				// pass special characters
    3538:	8e 81       	ldd	r24, Y+6	; 0x06
    353a:	8d 32       	cpi	r24, 0x2D	; 45
    353c:	61 f0       	breq	.+24     	; 0x3556 <cfg_parse+0x76>
    353e:	8e 81       	ldd	r24, Y+6	; 0x06
    3540:	8b 32       	cpi	r24, 0x2B	; 43
    3542:	49 f0       	breq	.+18     	; 0x3556 <cfg_parse+0x76>
    3544:	8e 81       	ldd	r24, Y+6	; 0x06
    3546:	8e 32       	cpi	r24, 0x2E	; 46
    3548:	31 f0       	breq	.+12     	; 0x3556 <cfg_parse+0x76>
    354a:	8e 81       	ldd	r24, Y+6	; 0x06
    354c:	8f 33       	cpi	r24, 0x3F	; 63
    354e:	19 f0       	breq	.+6      	; 0x3556 <cfg_parse+0x76>
    3550:	8e 81       	ldd	r24, Y+6	; 0x06
    3552:	88 32       	cpi	r24, 0x28	; 40
    3554:	71 f4       	brne	.+28     	; 0x3572 <cfg_parse+0x92>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
    3556:	8a 81       	ldd	r24, Y+2	; 0x02
    3558:	28 2f       	mov	r18, r24
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	89 85       	ldd	r24, Y+9	; 0x09
    355e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3560:	fc 01       	movw	r30, r24
    3562:	e2 0f       	add	r30, r18
    3564:	f3 1f       	adc	r31, r19
    3566:	8e 81       	ldd	r24, Y+6	; 0x06
    3568:	80 83       	st	Z, r24
    356a:	8a 81       	ldd	r24, Y+2	; 0x02
    356c:	8f 5f       	subi	r24, 0xFF	; 255
    356e:	8a 83       	std	Y+2, r24	; 0x02
    3570:	3c c0       	rjmp	.+120    	; 0x35ea <cfg_parse+0x10a>
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    3572:	8e 81       	ldd	r24, Y+6	; 0x06
    3574:	81 36       	cpi	r24, 0x61	; 97
    3576:	90 f0       	brcs	.+36     	; 0x359c <cfg_parse+0xbc>
    3578:	8e 81       	ldd	r24, Y+6	; 0x06
    357a:	8b 37       	cpi	r24, 0x7B	; 123
    357c:	78 f4       	brcc	.+30     	; 0x359c <cfg_parse+0xbc>
			text[j++] = c-'a'+'A';
    357e:	8a 81       	ldd	r24, Y+2	; 0x02
    3580:	28 2f       	mov	r18, r24
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	89 85       	ldd	r24, Y+9	; 0x09
    3586:	9a 85       	ldd	r25, Y+10	; 0x0a
    3588:	fc 01       	movw	r30, r24
    358a:	e2 0f       	add	r30, r18
    358c:	f3 1f       	adc	r31, r19
    358e:	8e 81       	ldd	r24, Y+6	; 0x06
    3590:	80 52       	subi	r24, 0x20	; 32
    3592:	80 83       	st	Z, r24
    3594:	8a 81       	ldd	r24, Y+2	; 0x02
    3596:	8f 5f       	subi	r24, 0xFF	; 255
    3598:	8a 83       	std	Y+2, r24	; 0x02
    359a:	27 c0       	rjmp	.+78     	; 0x35ea <cfg_parse+0x10a>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    359c:	8e 81       	ldd	r24, Y+6	; 0x06
    359e:	81 34       	cpi	r24, 0x41	; 65
    35a0:	88 f0       	brcs	.+34     	; 0x35c4 <cfg_parse+0xe4>
    35a2:	8e 81       	ldd	r24, Y+6	; 0x06
    35a4:	8b 35       	cpi	r24, 0x5B	; 91
    35a6:	70 f4       	brcc	.+28     	; 0x35c4 <cfg_parse+0xe4>
			text[j++] = c;
    35a8:	8a 81       	ldd	r24, Y+2	; 0x02
    35aa:	28 2f       	mov	r18, r24
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	89 85       	ldd	r24, Y+9	; 0x09
    35b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b2:	fc 01       	movw	r30, r24
    35b4:	e2 0f       	add	r30, r18
    35b6:	f3 1f       	adc	r31, r19
    35b8:	8e 81       	ldd	r24, Y+6	; 0x06
    35ba:	80 83       	st	Z, r24
    35bc:	8a 81       	ldd	r24, Y+2	; 0x02
    35be:	8f 5f       	subi	r24, 0xFF	; 255
    35c0:	8a 83       	std	Y+2, r24	; 0x02
    35c2:	13 c0       	rjmp	.+38     	; 0x35ea <cfg_parse+0x10a>
		} else if (c >= '0' && c <= '9') {		// pass numbers
    35c4:	8e 81       	ldd	r24, Y+6	; 0x06
    35c6:	80 33       	cpi	r24, 0x30	; 48
    35c8:	80 f0       	brcs	.+32     	; 0x35ea <cfg_parse+0x10a>
    35ca:	8e 81       	ldd	r24, Y+6	; 0x06
    35cc:	8a 33       	cpi	r24, 0x3A	; 58
    35ce:	68 f4       	brcc	.+26     	; 0x35ea <cfg_parse+0x10a>
			text[j++] = c;
    35d0:	8a 81       	ldd	r24, Y+2	; 0x02
    35d2:	28 2f       	mov	r18, r24
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	89 85       	ldd	r24, Y+9	; 0x09
    35d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35da:	fc 01       	movw	r30, r24
    35dc:	e2 0f       	add	r30, r18
    35de:	f3 1f       	adc	r31, r19
    35e0:	8e 81       	ldd	r24, Y+6	; 0x06
    35e2:	80 83       	st	Z, r24
    35e4:	8a 81       	ldd	r24, Y+2	; 0x02
    35e6:	8f 5f       	subi	r24, 0xFF	; 255
    35e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    35ea:	8b 81       	ldd	r24, Y+3	; 0x03
    35ec:	28 2f       	mov	r18, r24
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	89 85       	ldd	r24, Y+9	; 0x09
    35f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f4:	fc 01       	movw	r30, r24
    35f6:	e2 0f       	add	r30, r18
    35f8:	f3 1f       	adc	r31, r19
    35fa:	80 81       	ld	r24, Z
    35fc:	8e 83       	std	Y+6, r24	; 0x06
    35fe:	2e 81       	ldd	r18, Y+6	; 0x06
    3600:	2f 87       	std	Y+15, r18	; 0x0f
    3602:	3f 85       	ldd	r19, Y+15	; 0x0f
    3604:	33 23       	and	r19, r19
    3606:	11 f0       	breq	.+4      	; 0x360c <cfg_parse+0x12c>
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	8f 87       	std	Y+15, r24	; 0x0f
    360c:	8f 85       	ldd	r24, Y+15	; 0x0f
    360e:	9b 81       	ldd	r25, Y+3	; 0x03
    3610:	9f 5f       	subi	r25, 0xFF	; 255
    3612:	9b 83       	std	Y+3, r25	; 0x03
    3614:	88 23       	and	r24, r24
    3616:	09 f0       	breq	.+2      	; 0x361a <cfg_parse+0x13a>
    3618:	76 cf       	rjmp	.-276    	; 0x3506 <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    361a:	8a 81       	ldd	r24, Y+2	; 0x02
    361c:	28 2f       	mov	r18, r24
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	89 85       	ldd	r24, Y+9	; 0x09
    3622:	9a 85       	ldd	r25, Y+10	; 0x0a
    3624:	fc 01       	movw	r30, r24
    3626:	e2 0f       	add	r30, r18
    3628:	f3 1f       	adc	r31, r19
    362a:	10 82       	st	Z, r1
    362c:	8a 81       	ldd	r24, Y+2	; 0x02
    362e:	8f 5f       	subi	r24, 0xFF	; 255
    3630:	8a 83       	std	Y+2, r24	; 0x02
	end = &text[j];								// needed for string-to-double
    3632:	8a 81       	ldd	r24, Y+2	; 0x02
    3634:	28 2f       	mov	r18, r24
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	89 85       	ldd	r24, Y+9	; 0x09
    363a:	9a 85       	ldd	r25, Y+10	; 0x0a
    363c:	82 0f       	add	r24, r18
    363e:	93 1f       	adc	r25, r19
    3640:	8f 83       	std	Y+7, r24	; 0x07
    3642:	98 87       	std	Y+8, r25	; 0x08

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    3644:	10 92 7b 24 	sts	0x247B, r1
	switch (text[0]) {
    3648:	e9 85       	ldd	r30, Y+9	; 0x09
    364a:	fa 85       	ldd	r31, Y+10	; 0x0a
    364c:	80 81       	ld	r24, Z
    364e:	28 2f       	mov	r18, r24
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	2d 87       	std	Y+13, r18	; 0x0d
    3654:	3e 87       	std	Y+14, r19	; 0x0e
    3656:	8d 85       	ldd	r24, Y+13	; 0x0d
    3658:	9e 85       	ldd	r25, Y+14	; 0x0e
    365a:	81 35       	cpi	r24, 0x51	; 81
    365c:	91 05       	cpc	r25, r1
    365e:	c9 f1       	breq	.+114    	; 0x36d2 <cfg_parse+0x1f2>
    3660:	2d 85       	ldd	r18, Y+13	; 0x0d
    3662:	3e 85       	ldd	r19, Y+14	; 0x0e
    3664:	22 35       	cpi	r18, 0x52	; 82
    3666:	31 05       	cpc	r19, r1
    3668:	e4 f4       	brge	.+56     	; 0x36a2 <cfg_parse+0x1c2>
    366a:	8d 85       	ldd	r24, Y+13	; 0x0d
    366c:	9e 85       	ldd	r25, Y+14	; 0x0e
    366e:	81 34       	cpi	r24, 0x41	; 65
    3670:	91 05       	cpc	r25, r1
    3672:	09 f4       	brne	.+2      	; 0x3676 <cfg_parse+0x196>
    3674:	4f c0       	rjmp	.+158    	; 0x3714 <cfg_parse+0x234>
    3676:	2d 85       	ldd	r18, Y+13	; 0x0d
    3678:	3e 85       	ldd	r19, Y+14	; 0x0e
    367a:	22 34       	cpi	r18, 0x42	; 66
    367c:	31 05       	cpc	r19, r1
    367e:	5c f4       	brge	.+22     	; 0x3696 <cfg_parse+0x1b6>
    3680:	8d 85       	ldd	r24, Y+13	; 0x0d
    3682:	9e 85       	ldd	r25, Y+14	; 0x0e
    3684:	88 32       	cpi	r24, 0x28	; 40
    3686:	91 05       	cpc	r25, r1
    3688:	09 f1       	breq	.+66     	; 0x36cc <cfg_parse+0x1ec>
    368a:	2d 85       	ldd	r18, Y+13	; 0x0d
    368c:	3e 85       	ldd	r19, Y+14	; 0x0e
    368e:	2f 33       	cpi	r18, 0x3F	; 63
    3690:	31 05       	cpc	r19, r1
    3692:	b9 f0       	breq	.+46     	; 0x36c2 <cfg_parse+0x1e2>
    3694:	42 c0       	rjmp	.+132    	; 0x371a <cfg_parse+0x23a>
    3696:	8d 85       	ldd	r24, Y+13	; 0x0d
    3698:	9e 85       	ldd	r25, Y+14	; 0x0e
    369a:	8d 34       	cpi	r24, 0x4D	; 77
    369c:	91 05       	cpc	r25, r1
    369e:	e9 f0       	breq	.+58     	; 0x36da <cfg_parse+0x1fa>
    36a0:	3c c0       	rjmp	.+120    	; 0x371a <cfg_parse+0x23a>
    36a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    36a4:	3e 85       	ldd	r19, Y+14	; 0x0e
    36a6:	29 35       	cpi	r18, 0x59	; 89
    36a8:	31 05       	cpc	r19, r1
    36aa:	71 f1       	breq	.+92     	; 0x3708 <cfg_parse+0x228>
    36ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    36b0:	8a 35       	cpi	r24, 0x5A	; 90
    36b2:	91 05       	cpc	r25, r1
    36b4:	61 f1       	breq	.+88     	; 0x370e <cfg_parse+0x22e>
    36b6:	2d 85       	ldd	r18, Y+13	; 0x0d
    36b8:	3e 85       	ldd	r19, Y+14	; 0x0e
    36ba:	28 35       	cpi	r18, 0x58	; 88
    36bc:	31 05       	cpc	r19, r1
    36be:	11 f1       	breq	.+68     	; 0x3704 <cfg_parse+0x224>
    36c0:	2c c0       	rjmp	.+88     	; 0x371a <cfg_parse+0x23a>
		case '?': cfg_dump(); status (TG_OK); break;
    36c2:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <cfg_dump>
    36c6:	10 92 7b 24 	sts	0x247B, r1
    36ca:	2a c0       	rjmp	.+84     	; 0x3720 <cfg_parse+0x240>
		case '(': status (TG_OK);	break;			// ignore comment lines
    36cc:	10 92 7b 24 	sts	0x247B, r1
    36d0:	27 c0       	rjmp	.+78     	; 0x3720 <cfg_parse+0x240>
		case 'Q': status (TG_QUIT); break;
    36d2:	83 e0       	ldi	r24, 0x03	; 3
    36d4:	80 93 7b 24 	sts	0x247B, r24
    36d8:	23 c0       	rjmp	.+70     	; 0x3720 <cfg_parse+0x240>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    36da:	8c 81       	ldd	r24, Y+4	; 0x04
    36dc:	9d 81       	ldd	r25, Y+5	; 0x05
    36de:	9e 01       	movw	r18, r28
    36e0:	29 5f       	subi	r18, 0xF9	; 249
    36e2:	3f 4f       	sbci	r19, 0xFF	; 255
    36e4:	b9 01       	movw	r22, r18
    36e6:	0e 94 49 5f 	call	0xbe92	; 0xbe92 <strtod>
    36ea:	dc 01       	movw	r26, r24
    36ec:	cb 01       	movw	r24, r22
    36ee:	80 93 7c 24 	sts	0x247C, r24
    36f2:	90 93 7d 24 	sts	0x247D, r25
    36f6:	a0 93 7e 24 	sts	0x247E, r26
    36fa:	b0 93 7f 24 	sts	0x247F, r27
				  status(TG_OK); 
    36fe:	10 92 7b 24 	sts	0x247B, r1
    3702:	0e c0       	rjmp	.+28     	; 0x3720 <cfg_parse+0x240>
				  break;

		case 'X': axis = X; break;
    3704:	19 82       	std	Y+1, r1	; 0x01
    3706:	0c c0       	rjmp	.+24     	; 0x3720 <cfg_parse+0x240>
		case 'Y': axis = Y; break;
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	89 83       	std	Y+1, r24	; 0x01
    370c:	09 c0       	rjmp	.+18     	; 0x3720 <cfg_parse+0x240>
		case 'Z': axis = Z; break;
    370e:	82 e0       	ldi	r24, 0x02	; 2
    3710:	89 83       	std	Y+1, r24	; 0x01
    3712:	06 c0       	rjmp	.+12     	; 0x3720 <cfg_parse+0x240>
		case 'A': axis = A; break;
    3714:	83 e0       	ldi	r24, 0x03	; 3
    3716:	89 83       	std	Y+1, r24	; 0x01
    3718:	03 c0       	rjmp	.+6      	; 0x3720 <cfg_parse+0x240>

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    371a:	89 e0       	ldi	r24, 0x09	; 9
    371c:	80 93 7b 24 	sts	0x247B, r24
	}
	if (cfg.status == TG_OK) {
    3720:	80 91 7b 24 	lds	r24, 0x247B
    3724:	88 23       	and	r24, r24
    3726:	09 f0       	breq	.+2      	; 0x372a <cfg_parse+0x24a>
    3728:	62 c1       	rjmp	.+708    	; 0x39ee <cfg_parse+0x50e>
		status(TG_OK);							// pre-emptive setting
    372a:	10 92 7b 24 	sts	0x247B, r1
		switch (text[1]) {
    372e:	89 85       	ldd	r24, Y+9	; 0x09
    3730:	9a 85       	ldd	r25, Y+10	; 0x0a
    3732:	fc 01       	movw	r30, r24
    3734:	31 96       	adiw	r30, 0x01	; 1
    3736:	80 81       	ld	r24, Z
    3738:	28 2f       	mov	r18, r24
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	2b 87       	std	Y+11, r18	; 0x0b
    373e:	3c 87       	std	Y+12, r19	; 0x0c
    3740:	8b 85       	ldd	r24, Y+11	; 0x0b
    3742:	9c 85       	ldd	r25, Y+12	; 0x0c
    3744:	8c 34       	cpi	r24, 0x4C	; 76
    3746:	91 05       	cpc	r25, r1
    3748:	09 f4       	brne	.+2      	; 0x374c <cfg_parse+0x26c>
    374a:	10 c1       	rjmp	.+544    	; 0x396c <cfg_parse+0x48c>
    374c:	2b 85       	ldd	r18, Y+11	; 0x0b
    374e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3750:	2d 34       	cpi	r18, 0x4D	; 77
    3752:	31 05       	cpc	r19, r1
    3754:	64 f4       	brge	.+24     	; 0x376e <cfg_parse+0x28e>
    3756:	8b 85       	ldd	r24, Y+11	; 0x0b
    3758:	9c 85       	ldd	r25, Y+12	; 0x0c
    375a:	84 34       	cpi	r24, 0x44	; 68
    375c:	91 05       	cpc	r25, r1
    375e:	09 f4       	brne	.+2      	; 0x3762 <cfg_parse+0x282>
    3760:	4a c0       	rjmp	.+148    	; 0x37f6 <cfg_parse+0x316>
    3762:	2b 85       	ldd	r18, Y+11	; 0x0b
    3764:	3c 85       	ldd	r19, Y+12	; 0x0c
    3766:	26 34       	cpi	r18, 0x46	; 70
    3768:	31 05       	cpc	r19, r1
    376a:	61 f1       	breq	.+88     	; 0x37c4 <cfg_parse+0x2e4>
    376c:	3d c1       	rjmp	.+634    	; 0x39e8 <cfg_parse+0x508>
    376e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3770:	9c 85       	ldd	r25, Y+12	; 0x0c
    3772:	80 35       	cpi	r24, 0x50	; 80
    3774:	91 05       	cpc	r25, r1
    3776:	09 f4       	brne	.+2      	; 0x377a <cfg_parse+0x29a>
    3778:	5e c0       	rjmp	.+188    	; 0x3836 <cfg_parse+0x356>
    377a:	2b 85       	ldd	r18, Y+11	; 0x0b
    377c:	3c 85       	ldd	r19, Y+12	; 0x0c
    377e:	23 35       	cpi	r18, 0x53	; 83
    3780:	31 05       	cpc	r19, r1
    3782:	39 f0       	breq	.+14     	; 0x3792 <cfg_parse+0x2b2>
    3784:	8b 85       	ldd	r24, Y+11	; 0x0b
    3786:	9c 85       	ldd	r25, Y+12	; 0x0c
    3788:	8d 34       	cpi	r24, 0x4D	; 77
    378a:	91 05       	cpc	r25, r1
    378c:	09 f4       	brne	.+2      	; 0x3790 <cfg_parse+0x2b0>
    378e:	81 c0       	rjmp	.+258    	; 0x3892 <cfg_parse+0x3b2>
    3790:	2b c1       	rjmp	.+598    	; 0x39e8 <cfg_parse+0x508>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	08 2f       	mov	r16, r24
    3796:	10 e0       	ldi	r17, 0x00	; 0
    3798:	8c 81       	ldd	r24, Y+4	; 0x04
    379a:	9d 81       	ldd	r25, Y+5	; 0x05
    379c:	0e 94 b7 60 	call	0xc16e	; 0xc16e <atoi>
    37a0:	9c 01       	movw	r18, r24
    37a2:	c8 01       	movw	r24, r16
    37a4:	88 0f       	add	r24, r24
    37a6:	99 1f       	adc	r25, r25
    37a8:	80 0f       	add	r24, r16
    37aa:	91 1f       	adc	r25, r17
    37ac:	88 0f       	add	r24, r24
    37ae:	99 1f       	adc	r25, r25
    37b0:	88 0f       	add	r24, r24
    37b2:	99 1f       	adc	r25, r25
    37b4:	88 0f       	add	r24, r24
    37b6:	99 1f       	adc	r25, r25
    37b8:	fc 01       	movw	r30, r24
    37ba:	e5 57       	subi	r30, 0x75	; 117
    37bc:	fb 4d       	sbci	r31, 0xDB	; 219
    37be:	20 83       	st	Z, r18
    37c0:	31 83       	std	Z+1, r19	; 0x01
    37c2:	15 c1       	rjmp	.+554    	; 0x39ee <cfg_parse+0x50e>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	08 2f       	mov	r16, r24
    37c8:	10 e0       	ldi	r17, 0x00	; 0
    37ca:	8c 81       	ldd	r24, Y+4	; 0x04
    37cc:	9d 81       	ldd	r25, Y+5	; 0x05
    37ce:	0e 94 b7 60 	call	0xc16e	; 0xc16e <atoi>
    37d2:	9c 01       	movw	r18, r24
    37d4:	c8 01       	movw	r24, r16
    37d6:	88 0f       	add	r24, r24
    37d8:	99 1f       	adc	r25, r25
    37da:	80 0f       	add	r24, r16
    37dc:	91 1f       	adc	r25, r17
    37de:	88 0f       	add	r24, r24
    37e0:	99 1f       	adc	r25, r25
    37e2:	88 0f       	add	r24, r24
    37e4:	99 1f       	adc	r25, r25
    37e6:	88 0f       	add	r24, r24
    37e8:	99 1f       	adc	r25, r25
    37ea:	fc 01       	movw	r30, r24
    37ec:	e3 57       	subi	r30, 0x73	; 115
    37ee:	fb 4d       	sbci	r31, 0xDB	; 219
    37f0:	20 83       	st	Z, r18
    37f2:	31 83       	std	Z+1, r19	; 0x01
    37f4:	fc c0       	rjmp	.+504    	; 0x39ee <cfg_parse+0x50e>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    37f6:	89 81       	ldd	r24, Y+1	; 0x01
    37f8:	08 2f       	mov	r16, r24
    37fa:	10 e0       	ldi	r17, 0x00	; 0
    37fc:	8c 81       	ldd	r24, Y+4	; 0x04
    37fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3800:	9e 01       	movw	r18, r28
    3802:	29 5f       	subi	r18, 0xF9	; 249
    3804:	3f 4f       	sbci	r19, 0xFF	; 255
    3806:	b9 01       	movw	r22, r18
    3808:	0e 94 49 5f 	call	0xbe92	; 0xbe92 <strtod>
    380c:	9b 01       	movw	r18, r22
    380e:	ac 01       	movw	r20, r24
    3810:	c8 01       	movw	r24, r16
    3812:	88 0f       	add	r24, r24
    3814:	99 1f       	adc	r25, r25
    3816:	80 0f       	add	r24, r16
    3818:	91 1f       	adc	r25, r17
    381a:	88 0f       	add	r24, r24
    381c:	99 1f       	adc	r25, r25
    381e:	88 0f       	add	r24, r24
    3820:	99 1f       	adc	r25, r25
    3822:	88 0f       	add	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	fc 01       	movw	r30, r24
    3828:	e1 57       	subi	r30, 0x71	; 113
    382a:	fb 4d       	sbci	r31, 0xDB	; 219
    382c:	20 83       	st	Z, r18
    382e:	31 83       	std	Z+1, r19	; 0x01
    3830:	42 83       	std	Z+2, r20	; 0x02
    3832:	53 83       	std	Z+3, r21	; 0x03
    3834:	dc c0       	rjmp	.+440    	; 0x39ee <cfg_parse+0x50e>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    3836:	89 81       	ldd	r24, Y+1	; 0x01
    3838:	08 2f       	mov	r16, r24
    383a:	10 e0       	ldi	r17, 0x00	; 0
    383c:	8c 81       	ldd	r24, Y+4	; 0x04
    383e:	9d 81       	ldd	r25, Y+5	; 0x05
    3840:	0e 94 b7 60 	call	0xc16e	; 0xc16e <atoi>
    3844:	28 2f       	mov	r18, r24
    3846:	c8 01       	movw	r24, r16
    3848:	88 0f       	add	r24, r24
    384a:	99 1f       	adc	r25, r25
    384c:	80 0f       	add	r24, r16
    384e:	91 1f       	adc	r25, r17
    3850:	88 0f       	add	r24, r24
    3852:	99 1f       	adc	r25, r25
    3854:	88 0f       	add	r24, r24
    3856:	99 1f       	adc	r25, r25
    3858:	88 0f       	add	r24, r24
    385a:	99 1f       	adc	r25, r25
    385c:	fc 01       	movw	r30, r24
    385e:	e6 57       	subi	r30, 0x76	; 118
    3860:	fb 4d       	sbci	r31, 0xDB	; 219
    3862:	20 83       	st	Z, r18
					  st_set_polarity(axis, CFG(axis).polarity);
    3864:	89 81       	ldd	r24, Y+1	; 0x01
    3866:	28 2f       	mov	r18, r24
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	c9 01       	movw	r24, r18
    386c:	88 0f       	add	r24, r24
    386e:	99 1f       	adc	r25, r25
    3870:	82 0f       	add	r24, r18
    3872:	93 1f       	adc	r25, r19
    3874:	88 0f       	add	r24, r24
    3876:	99 1f       	adc	r25, r25
    3878:	88 0f       	add	r24, r24
    387a:	99 1f       	adc	r25, r25
    387c:	88 0f       	add	r24, r24
    387e:	99 1f       	adc	r25, r25
    3880:	fc 01       	movw	r30, r24
    3882:	e6 57       	subi	r30, 0x76	; 118
    3884:	fb 4d       	sbci	r31, 0xDB	; 219
    3886:	90 81       	ld	r25, Z
    3888:	89 81       	ldd	r24, Y+1	; 0x01
    388a:	69 2f       	mov	r22, r25
    388c:	0e 94 a7 34 	call	0x694e	; 0x694e <st_set_polarity>
    3890:	ae c0       	rjmp	.+348    	; 0x39ee <cfg_parse+0x50e>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    3892:	89 85       	ldd	r24, Y+9	; 0x09
    3894:	9a 85       	ldd	r25, Y+10	; 0x0a
    3896:	fc 01       	movw	r30, r24
    3898:	32 96       	adiw	r30, 0x02	; 2
    389a:	80 81       	ld	r24, Z
    389c:	89 34       	cpi	r24, 0x49	; 73
    389e:	c1 f4       	brne	.+48     	; 0x38d0 <cfg_parse+0x3f0>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    38a0:	89 81       	ldd	r24, Y+1	; 0x01
    38a2:	08 2f       	mov	r16, r24
    38a4:	10 e0       	ldi	r17, 0x00	; 0
    38a6:	8c 81       	ldd	r24, Y+4	; 0x04
    38a8:	9d 81       	ldd	r25, Y+5	; 0x05
    38aa:	0e 94 b7 60 	call	0xc16e	; 0xc16e <atoi>
    38ae:	28 2f       	mov	r18, r24
    38b0:	c8 01       	movw	r24, r16
    38b2:	88 0f       	add	r24, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	80 0f       	add	r24, r16
    38b8:	91 1f       	adc	r25, r17
    38ba:	88 0f       	add	r24, r24
    38bc:	99 1f       	adc	r25, r25
    38be:	88 0f       	add	r24, r24
    38c0:	99 1f       	adc	r25, r25
    38c2:	88 0f       	add	r24, r24
    38c4:	99 1f       	adc	r25, r25
    38c6:	fc 01       	movw	r30, r24
    38c8:	e8 57       	subi	r30, 0x78	; 120
    38ca:	fb 4d       	sbci	r31, 0xDB	; 219
    38cc:	20 83       	st	Z, r18
    38ce:	8f c0       	rjmp	.+286    	; 0x39ee <cfg_parse+0x50e>
				} else if (text[3] == 'R') {
    38d0:	89 85       	ldd	r24, Y+9	; 0x09
    38d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38d4:	fc 01       	movw	r30, r24
    38d6:	33 96       	adiw	r30, 0x03	; 3
    38d8:	80 81       	ld	r24, Z
    38da:	82 35       	cpi	r24, 0x52	; 82
    38dc:	01 f5       	brne	.+64     	; 0x391e <cfg_parse+0x43e>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    38de:	89 81       	ldd	r24, Y+1	; 0x01
    38e0:	08 2f       	mov	r16, r24
    38e2:	10 e0       	ldi	r17, 0x00	; 0
    38e4:	8c 81       	ldd	r24, Y+4	; 0x04
    38e6:	9d 81       	ldd	r25, Y+5	; 0x05
    38e8:	9e 01       	movw	r18, r28
    38ea:	29 5f       	subi	r18, 0xF9	; 249
    38ec:	3f 4f       	sbci	r19, 0xFF	; 255
    38ee:	b9 01       	movw	r22, r18
    38f0:	0e 94 49 5f 	call	0xbe92	; 0xbe92 <strtod>
    38f4:	9b 01       	movw	r18, r22
    38f6:	ac 01       	movw	r20, r24
    38f8:	c8 01       	movw	r24, r16
    38fa:	88 0f       	add	r24, r24
    38fc:	99 1f       	adc	r25, r25
    38fe:	80 0f       	add	r24, r16
    3900:	91 1f       	adc	r25, r17
    3902:	88 0f       	add	r24, r24
    3904:	99 1f       	adc	r25, r25
    3906:	88 0f       	add	r24, r24
    3908:	99 1f       	adc	r25, r25
    390a:	88 0f       	add	r24, r24
    390c:	99 1f       	adc	r25, r25
    390e:	fc 01       	movw	r30, r24
    3910:	ed 56       	subi	r30, 0x6D	; 109
    3912:	fb 4d       	sbci	r31, 0xDB	; 219
    3914:	20 83       	st	Z, r18
    3916:	31 83       	std	Z+1, r19	; 0x01
    3918:	42 83       	std	Z+2, r20	; 0x02
    391a:	53 83       	std	Z+3, r21	; 0x03
    391c:	68 c0       	rjmp	.+208    	; 0x39ee <cfg_parse+0x50e>
				} else if (text[3] == 'T') {
    391e:	89 85       	ldd	r24, Y+9	; 0x09
    3920:	9a 85       	ldd	r25, Y+10	; 0x0a
    3922:	fc 01       	movw	r30, r24
    3924:	33 96       	adiw	r30, 0x03	; 3
    3926:	80 81       	ld	r24, Z
    3928:	84 35       	cpi	r24, 0x54	; 84
    392a:	01 f5       	brne	.+64     	; 0x396c <cfg_parse+0x48c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    392c:	89 81       	ldd	r24, Y+1	; 0x01
    392e:	08 2f       	mov	r16, r24
    3930:	10 e0       	ldi	r17, 0x00	; 0
    3932:	8c 81       	ldd	r24, Y+4	; 0x04
    3934:	9d 81       	ldd	r25, Y+5	; 0x05
    3936:	9e 01       	movw	r18, r28
    3938:	29 5f       	subi	r18, 0xF9	; 249
    393a:	3f 4f       	sbci	r19, 0xFF	; 255
    393c:	b9 01       	movw	r22, r18
    393e:	0e 94 49 5f 	call	0xbe92	; 0xbe92 <strtod>
    3942:	9b 01       	movw	r18, r22
    3944:	ac 01       	movw	r20, r24
    3946:	c8 01       	movw	r24, r16
    3948:	88 0f       	add	r24, r24
    394a:	99 1f       	adc	r25, r25
    394c:	80 0f       	add	r24, r16
    394e:	91 1f       	adc	r25, r17
    3950:	88 0f       	add	r24, r24
    3952:	99 1f       	adc	r25, r25
    3954:	88 0f       	add	r24, r24
    3956:	99 1f       	adc	r25, r25
    3958:	88 0f       	add	r24, r24
    395a:	99 1f       	adc	r25, r25
    395c:	fc 01       	movw	r30, r24
    395e:	e9 56       	subi	r30, 0x69	; 105
    3960:	fb 4d       	sbci	r31, 0xDB	; 219
    3962:	20 83       	st	Z, r18
    3964:	31 83       	std	Z+1, r19	; 0x01
    3966:	42 83       	std	Z+2, r20	; 0x02
    3968:	53 83       	std	Z+3, r21	; 0x03
    396a:	41 c0       	rjmp	.+130    	; 0x39ee <cfg_parse+0x50e>
				}
			case 'L': 
				if (text[2] == 'O') {
    396c:	89 85       	ldd	r24, Y+9	; 0x09
    396e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3970:	fc 01       	movw	r30, r24
    3972:	32 96       	adiw	r30, 0x02	; 2
    3974:	80 81       	ld	r24, Z
    3976:	8f 34       	cpi	r24, 0x4F	; 79
    3978:	c1 f4       	brne	.+48     	; 0x39aa <cfg_parse+0x4ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    397a:	89 81       	ldd	r24, Y+1	; 0x01
    397c:	08 2f       	mov	r16, r24
    397e:	10 e0       	ldi	r17, 0x00	; 0
    3980:	8c 81       	ldd	r24, Y+4	; 0x04
    3982:	9d 81       	ldd	r25, Y+5	; 0x05
    3984:	0e 94 b7 60 	call	0xc16e	; 0xc16e <atoi>
    3988:	28 2f       	mov	r18, r24
    398a:	c8 01       	movw	r24, r16
    398c:	88 0f       	add	r24, r24
    398e:	99 1f       	adc	r25, r25
    3990:	80 0f       	add	r24, r16
    3992:	91 1f       	adc	r25, r17
    3994:	88 0f       	add	r24, r24
    3996:	99 1f       	adc	r25, r25
    3998:	88 0f       	add	r24, r24
    399a:	99 1f       	adc	r25, r25
    399c:	88 0f       	add	r24, r24
    399e:	99 1f       	adc	r25, r25
    39a0:	fc 01       	movw	r30, r24
    39a2:	e7 57       	subi	r30, 0x77	; 119
    39a4:	fb 4d       	sbci	r31, 0xDB	; 219
    39a6:	20 83       	st	Z, r18
    39a8:	22 c0       	rjmp	.+68     	; 0x39ee <cfg_parse+0x50e>
				} else if (text[2] == 'I') {
    39aa:	89 85       	ldd	r24, Y+9	; 0x09
    39ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ae:	fc 01       	movw	r30, r24
    39b0:	32 96       	adiw	r30, 0x02	; 2
    39b2:	80 81       	ld	r24, Z
    39b4:	89 34       	cpi	r24, 0x49	; 73
    39b6:	c1 f4       	brne	.+48     	; 0x39e8 <cfg_parse+0x508>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    39b8:	89 81       	ldd	r24, Y+1	; 0x01
    39ba:	08 2f       	mov	r16, r24
    39bc:	10 e0       	ldi	r17, 0x00	; 0
    39be:	8c 81       	ldd	r24, Y+4	; 0x04
    39c0:	9d 81       	ldd	r25, Y+5	; 0x05
    39c2:	0e 94 b7 60 	call	0xc16e	; 0xc16e <atoi>
    39c6:	28 2f       	mov	r18, r24
    39c8:	c8 01       	movw	r24, r16
    39ca:	88 0f       	add	r24, r24
    39cc:	99 1f       	adc	r25, r25
    39ce:	80 0f       	add	r24, r16
    39d0:	91 1f       	adc	r25, r17
    39d2:	88 0f       	add	r24, r24
    39d4:	99 1f       	adc	r25, r25
    39d6:	88 0f       	add	r24, r24
    39d8:	99 1f       	adc	r25, r25
    39da:	88 0f       	add	r24, r24
    39dc:	99 1f       	adc	r25, r25
    39de:	fc 01       	movw	r30, r24
    39e0:	e1 56       	subi	r30, 0x61	; 97
    39e2:	fb 4d       	sbci	r31, 0xDB	; 219
    39e4:	20 83       	st	Z, r18
    39e6:	03 c0       	rjmp	.+6      	; 0x39ee <cfg_parse+0x50e>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    39e8:	89 e0       	ldi	r24, 0x09	; 9
    39ea:	80 93 7b 24 	sts	0x247B, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    39ee:	80 91 7b 24 	lds	r24, 0x247B
    39f2:	29 85       	ldd	r18, Y+9	; 0x09
    39f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    39f6:	b9 01       	movw	r22, r18
    39f8:	0e 94 bb 21 	call	0x4376	; 0x4376 <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
    39fc:	80 91 7b 24 	lds	r24, 0x247B
    3a00:	88 2f       	mov	r24, r24
    3a02:	90 e0       	ldi	r25, 0x00	; 0
}
    3a04:	2f 96       	adiw	r28, 0x0f	; 15
    3a06:	cd bf       	out	0x3d, r28	; 61
    3a08:	de bf       	out	0x3e, r29	; 62
    3a0a:	cf 91       	pop	r28
    3a0c:	df 91       	pop	r29
    3a0e:	1f 91       	pop	r17
    3a10:	0f 91       	pop	r16
    3a12:	08 95       	ret

00003a14 <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    3a14:	df 93       	push	r29
    3a16:	cf 93       	push	r28
    3a18:	0f 92       	push	r0
    3a1a:	cd b7       	in	r28, 0x3d	; 61
    3a1c:	de b7       	in	r29, 0x3e	; 62
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    3a1e:	21 ef       	ldi	r18, 0xF1	; 241
    3a20:	32 e0       	ldi	r19, 0x02	; 2
    3a22:	80 91 7a 24 	lds	r24, 0x247A
    3a26:	88 2f       	mov	r24, r24
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	00 d0       	rcall	.+0      	; 0x3a2c <cfg_dump+0x18>
    3a2c:	0f 92       	push	r0
    3a2e:	ed b7       	in	r30, 0x3d	; 61
    3a30:	fe b7       	in	r31, 0x3e	; 62
    3a32:	31 96       	adiw	r30, 0x01	; 1
    3a34:	20 83       	st	Z, r18
    3a36:	31 83       	std	Z+1, r19	; 0x01
    3a38:	82 83       	std	Z+2, r24	; 0x02
    3a3a:	93 83       	std	Z+3, r25	; 0x03
    3a3c:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    3a40:	0f 90       	pop	r0
    3a42:	0f 90       	pop	r0
    3a44:	0f 90       	pop	r0
    3a46:	0f 90       	pop	r0
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    3a48:	8a ec       	ldi	r24, 0xCA	; 202
    3a4a:	92 e0       	ldi	r25, 0x02	; 2
    3a4c:	0f 92       	push	r0
    3a4e:	0f 92       	push	r0
    3a50:	ed b7       	in	r30, 0x3d	; 61
    3a52:	fe b7       	in	r31, 0x3e	; 62
    3a54:	31 96       	adiw	r30, 0x01	; 1
    3a56:	80 83       	st	Z, r24
    3a58:	91 83       	std	Z+1, r25	; 0x01
    3a5a:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    3a5e:	0f 90       	pop	r0
    3a60:	0f 90       	pop	r0
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    3a62:	20 ea       	ldi	r18, 0xA0	; 160
    3a64:	32 e0       	ldi	r19, 0x02	; 2
    3a66:	80 91 7c 24 	lds	r24, 0x247C
    3a6a:	90 91 7d 24 	lds	r25, 0x247D
    3a6e:	a0 91 7e 24 	lds	r26, 0x247E
    3a72:	b0 91 7f 24 	lds	r27, 0x247F
    3a76:	00 d0       	rcall	.+0      	; 0x3a78 <cfg_dump+0x64>
    3a78:	00 d0       	rcall	.+0      	; 0x3a7a <cfg_dump+0x66>
    3a7a:	ed b7       	in	r30, 0x3d	; 61
    3a7c:	fe b7       	in	r31, 0x3e	; 62
    3a7e:	31 96       	adiw	r30, 0x01	; 1
    3a80:	20 83       	st	Z, r18
    3a82:	31 83       	std	Z+1, r19	; 0x01
    3a84:	82 83       	std	Z+2, r24	; 0x02
    3a86:	93 83       	std	Z+3, r25	; 0x03
    3a88:	a4 83       	std	Z+4, r26	; 0x04
    3a8a:	b5 83       	std	Z+5, r27	; 0x05
    3a8c:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    3a90:	8d b7       	in	r24, 0x3d	; 61
    3a92:	9e b7       	in	r25, 0x3e	; 62
    3a94:	06 96       	adiw	r24, 0x06	; 6
    3a96:	8d bf       	out	0x3d, r24	; 61
    3a98:	9e bf       	out	0x3e, r25	; 62
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    3a9a:	26 e7       	ldi	r18, 0x76	; 118
    3a9c:	32 e0       	ldi	r19, 0x02	; 2
    3a9e:	80 91 84 24 	lds	r24, 0x2484
    3aa2:	90 91 85 24 	lds	r25, 0x2485
    3aa6:	a0 91 86 24 	lds	r26, 0x2486
    3aaa:	b0 91 87 24 	lds	r27, 0x2487
    3aae:	00 d0       	rcall	.+0      	; 0x3ab0 <cfg_dump+0x9c>
    3ab0:	00 d0       	rcall	.+0      	; 0x3ab2 <cfg_dump+0x9e>
    3ab2:	ed b7       	in	r30, 0x3d	; 61
    3ab4:	fe b7       	in	r31, 0x3e	; 62
    3ab6:	31 96       	adiw	r30, 0x01	; 1
    3ab8:	20 83       	st	Z, r18
    3aba:	31 83       	std	Z+1, r19	; 0x01
    3abc:	82 83       	std	Z+2, r24	; 0x02
    3abe:	93 83       	std	Z+3, r25	; 0x03
    3ac0:	a4 83       	std	Z+4, r26	; 0x04
    3ac2:	b5 83       	std	Z+5, r27	; 0x05
    3ac4:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    3ac8:	8d b7       	in	r24, 0x3d	; 61
    3aca:	9e b7       	in	r25, 0x3e	; 62
    3acc:	06 96       	adiw	r24, 0x06	; 6
    3ace:	8d bf       	out	0x3d, r24	; 61
    3ad0:	9e bf       	out	0x3e, r25	; 62
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    3ad2:	2b e4       	ldi	r18, 0x4B	; 75
    3ad4:	32 e0       	ldi	r19, 0x02	; 2
    3ad6:	80 91 80 24 	lds	r24, 0x2480
    3ada:	90 91 81 24 	lds	r25, 0x2481
    3ade:	a0 91 82 24 	lds	r26, 0x2482
    3ae2:	b0 91 83 24 	lds	r27, 0x2483
    3ae6:	00 d0       	rcall	.+0      	; 0x3ae8 <cfg_dump+0xd4>
    3ae8:	00 d0       	rcall	.+0      	; 0x3aea <cfg_dump+0xd6>
    3aea:	ed b7       	in	r30, 0x3d	; 61
    3aec:	fe b7       	in	r31, 0x3e	; 62
    3aee:	31 96       	adiw	r30, 0x01	; 1
    3af0:	20 83       	st	Z, r18
    3af2:	31 83       	std	Z+1, r19	; 0x01
    3af4:	82 83       	std	Z+2, r24	; 0x02
    3af6:	93 83       	std	Z+3, r25	; 0x03
    3af8:	a4 83       	std	Z+4, r26	; 0x04
    3afa:	b5 83       	std	Z+5, r27	; 0x05
    3afc:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    3b00:	8d b7       	in	r24, 0x3d	; 61
    3b02:	9e b7       	in	r25, 0x3e	; 62
    3b04:	06 96       	adiw	r24, 0x06	; 6
    3b06:	8d bf       	out	0x3d, r24	; 61
    3b08:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
    3b0a:	19 82       	std	Y+1, r1	; 0x01
    3b0c:	06 c0       	rjmp	.+12     	; 0x3b1a <cfg_dump+0x106>
		_cfg_dump_axis(axis);
    3b0e:	89 81       	ldd	r24, Y+1	; 0x01
    3b10:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    3b14:	89 81       	ldd	r24, Y+1	; 0x01
    3b16:	8f 5f       	subi	r24, 0xFF	; 255
    3b18:	89 83       	std	Y+1, r24	; 0x01
    3b1a:	89 81       	ldd	r24, Y+1	; 0x01
    3b1c:	84 30       	cpi	r24, 0x04	; 4
    3b1e:	b8 f3       	brcs	.-18     	; 0x3b0e <cfg_dump+0xfa>
		_cfg_dump_axis(axis);
	}
}
    3b20:	0f 90       	pop	r0
    3b22:	cf 91       	pop	r28
    3b24:	df 91       	pop	r29
    3b26:	08 95       	ret

00003b28 <_cfg_dump_axis>:

void _cfg_dump_axis(uint8_t	axis)
{
    3b28:	df 93       	push	r29
    3b2a:	cf 93       	push	r28
    3b2c:	cd b7       	in	r28, 0x3d	; 61
    3b2e:	de b7       	in	r29, 0x3e	; 62
    3b30:	25 97       	sbiw	r28, 0x05	; 5
    3b32:	cd bf       	out	0x3d, r28	; 61
    3b34:	de bf       	out	0x3e, r29	; 62
    3b36:	8d 83       	std	Y+5, r24	; 0x05
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    3b38:	2f e1       	ldi	r18, 0x1F	; 31
    3b3a:	35 e0       	ldi	r19, 0x05	; 5
    3b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b3e:	88 2f       	mov	r24, r24
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	88 0f       	add	r24, r24
    3b44:	99 1f       	adc	r25, r25
    3b46:	8d 5b       	subi	r24, 0xBD	; 189
    3b48:	9d 4f       	sbci	r25, 0xFD	; 253
    3b4a:	8b 83       	std	Y+3, r24	; 0x03
    3b4c:	9c 83       	std	Y+4, r25	; 0x04
    3b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b50:	9c 81       	ldd	r25, Y+4	; 0x04
    3b52:	fc 01       	movw	r30, r24
    3b54:	85 91       	lpm	r24, Z+
    3b56:	94 91       	lpm	r25, Z+
    3b58:	89 83       	std	Y+1, r24	; 0x01
    3b5a:	9a 83       	std	Y+2, r25	; 0x02
    3b5c:	eb 83       	std	Y+3, r30	; 0x03
    3b5e:	fc 83       	std	Y+4, r31	; 0x04
    3b60:	89 81       	ldd	r24, Y+1	; 0x01
    3b62:	9a 81       	ldd	r25, Y+2	; 0x02
    3b64:	00 d0       	rcall	.+0      	; 0x3b66 <_cfg_dump_axis+0x3e>
    3b66:	0f 92       	push	r0
    3b68:	ed b7       	in	r30, 0x3d	; 61
    3b6a:	fe b7       	in	r31, 0x3e	; 62
    3b6c:	31 96       	adiw	r30, 0x01	; 1
    3b6e:	20 83       	st	Z, r18
    3b70:	31 83       	std	Z+1, r19	; 0x01
    3b72:	82 83       	std	Z+2, r24	; 0x02
    3b74:	93 83       	std	Z+3, r25	; 0x03
    3b76:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    3b7a:	0f 90       	pop	r0
    3b7c:	0f 90       	pop	r0
    3b7e:	0f 90       	pop	r0
    3b80:	0f 90       	pop	r0
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    3b82:	47 ee       	ldi	r20, 0xE7	; 231
    3b84:	54 e0       	ldi	r21, 0x04	; 4
    3b86:	8d 81       	ldd	r24, Y+5	; 0x05
    3b88:	28 2f       	mov	r18, r24
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	c9 01       	movw	r24, r18
    3b8e:	88 0f       	add	r24, r24
    3b90:	99 1f       	adc	r25, r25
    3b92:	82 0f       	add	r24, r18
    3b94:	93 1f       	adc	r25, r19
    3b96:	88 0f       	add	r24, r24
    3b98:	99 1f       	adc	r25, r25
    3b9a:	88 0f       	add	r24, r24
    3b9c:	99 1f       	adc	r25, r25
    3b9e:	88 0f       	add	r24, r24
    3ba0:	99 1f       	adc	r25, r25
    3ba2:	fc 01       	movw	r30, r24
    3ba4:	e5 57       	subi	r30, 0x75	; 117
    3ba6:	fb 4d       	sbci	r31, 0xDB	; 219
    3ba8:	80 81       	ld	r24, Z
    3baa:	91 81       	ldd	r25, Z+1	; 0x01
    3bac:	00 d0       	rcall	.+0      	; 0x3bae <_cfg_dump_axis+0x86>
    3bae:	0f 92       	push	r0
    3bb0:	ed b7       	in	r30, 0x3d	; 61
    3bb2:	fe b7       	in	r31, 0x3e	; 62
    3bb4:	31 96       	adiw	r30, 0x01	; 1
    3bb6:	40 83       	st	Z, r20
    3bb8:	51 83       	std	Z+1, r21	; 0x01
    3bba:	82 83       	std	Z+2, r24	; 0x02
    3bbc:	93 83       	std	Z+3, r25	; 0x03
    3bbe:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    3bca:	4f ea       	ldi	r20, 0xAF	; 175
    3bcc:	54 e0       	ldi	r21, 0x04	; 4
    3bce:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd0:	28 2f       	mov	r18, r24
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	c9 01       	movw	r24, r18
    3bd6:	88 0f       	add	r24, r24
    3bd8:	99 1f       	adc	r25, r25
    3bda:	82 0f       	add	r24, r18
    3bdc:	93 1f       	adc	r25, r19
    3bde:	88 0f       	add	r24, r24
    3be0:	99 1f       	adc	r25, r25
    3be2:	88 0f       	add	r24, r24
    3be4:	99 1f       	adc	r25, r25
    3be6:	88 0f       	add	r24, r24
    3be8:	99 1f       	adc	r25, r25
    3bea:	fc 01       	movw	r30, r24
    3bec:	e3 57       	subi	r30, 0x73	; 115
    3bee:	fb 4d       	sbci	r31, 0xDB	; 219
    3bf0:	80 81       	ld	r24, Z
    3bf2:	91 81       	ldd	r25, Z+1	; 0x01
    3bf4:	00 d0       	rcall	.+0      	; 0x3bf6 <_cfg_dump_axis+0xce>
    3bf6:	0f 92       	push	r0
    3bf8:	ed b7       	in	r30, 0x3d	; 61
    3bfa:	fe b7       	in	r31, 0x3e	; 62
    3bfc:	31 96       	adiw	r30, 0x01	; 1
    3bfe:	40 83       	st	Z, r20
    3c00:	51 83       	std	Z+1, r21	; 0x01
    3c02:	82 83       	std	Z+2, r24	; 0x02
    3c04:	93 83       	std	Z+3, r25	; 0x03
    3c06:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    3c0a:	0f 90       	pop	r0
    3c0c:	0f 90       	pop	r0
    3c0e:	0f 90       	pop	r0
    3c10:	0f 90       	pop	r0
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    3c12:	4c e7       	ldi	r20, 0x7C	; 124
    3c14:	54 e0       	ldi	r21, 0x04	; 4
    3c16:	8d 81       	ldd	r24, Y+5	; 0x05
    3c18:	28 2f       	mov	r18, r24
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	c9 01       	movw	r24, r18
    3c1e:	88 0f       	add	r24, r24
    3c20:	99 1f       	adc	r25, r25
    3c22:	82 0f       	add	r24, r18
    3c24:	93 1f       	adc	r25, r19
    3c26:	88 0f       	add	r24, r24
    3c28:	99 1f       	adc	r25, r25
    3c2a:	88 0f       	add	r24, r24
    3c2c:	99 1f       	adc	r25, r25
    3c2e:	88 0f       	add	r24, r24
    3c30:	99 1f       	adc	r25, r25
    3c32:	fc 01       	movw	r30, r24
    3c34:	e8 57       	subi	r30, 0x78	; 120
    3c36:	fb 4d       	sbci	r31, 0xDB	; 219
    3c38:	80 81       	ld	r24, Z
    3c3a:	88 2f       	mov	r24, r24
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	00 d0       	rcall	.+0      	; 0x3c40 <_cfg_dump_axis+0x118>
    3c40:	0f 92       	push	r0
    3c42:	ed b7       	in	r30, 0x3d	; 61
    3c44:	fe b7       	in	r31, 0x3e	; 62
    3c46:	31 96       	adiw	r30, 0x01	; 1
    3c48:	40 83       	st	Z, r20
    3c4a:	51 83       	std	Z+1, r21	; 0x01
    3c4c:	82 83       	std	Z+2, r24	; 0x02
    3c4e:	93 83       	std	Z+3, r25	; 0x03
    3c50:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    3c54:	0f 90       	pop	r0
    3c56:	0f 90       	pop	r0
    3c58:	0f 90       	pop	r0
    3c5a:	0f 90       	pop	r0
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    3c5c:	45 e4       	ldi	r20, 0x45	; 69
    3c5e:	54 e0       	ldi	r21, 0x04	; 4
    3c60:	8d 81       	ldd	r24, Y+5	; 0x05
    3c62:	28 2f       	mov	r18, r24
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	c9 01       	movw	r24, r18
    3c68:	88 0f       	add	r24, r24
    3c6a:	99 1f       	adc	r25, r25
    3c6c:	82 0f       	add	r24, r18
    3c6e:	93 1f       	adc	r25, r19
    3c70:	88 0f       	add	r24, r24
    3c72:	99 1f       	adc	r25, r25
    3c74:	88 0f       	add	r24, r24
    3c76:	99 1f       	adc	r25, r25
    3c78:	88 0f       	add	r24, r24
    3c7a:	99 1f       	adc	r25, r25
    3c7c:	fc 01       	movw	r30, r24
    3c7e:	e1 57       	subi	r30, 0x71	; 113
    3c80:	fb 4d       	sbci	r31, 0xDB	; 219
    3c82:	80 81       	ld	r24, Z
    3c84:	91 81       	ldd	r25, Z+1	; 0x01
    3c86:	a2 81       	ldd	r26, Z+2	; 0x02
    3c88:	b3 81       	ldd	r27, Z+3	; 0x03
    3c8a:	00 d0       	rcall	.+0      	; 0x3c8c <_cfg_dump_axis+0x164>
    3c8c:	00 d0       	rcall	.+0      	; 0x3c8e <_cfg_dump_axis+0x166>
    3c8e:	ed b7       	in	r30, 0x3d	; 61
    3c90:	fe b7       	in	r31, 0x3e	; 62
    3c92:	31 96       	adiw	r30, 0x01	; 1
    3c94:	40 83       	st	Z, r20
    3c96:	51 83       	std	Z+1, r21	; 0x01
    3c98:	82 83       	std	Z+2, r24	; 0x02
    3c9a:	93 83       	std	Z+3, r25	; 0x03
    3c9c:	a4 83       	std	Z+4, r26	; 0x04
    3c9e:	b5 83       	std	Z+5, r27	; 0x05
    3ca0:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    3ca4:	8d b7       	in	r24, 0x3d	; 61
    3ca6:	9e b7       	in	r25, 0x3e	; 62
    3ca8:	06 96       	adiw	r24, 0x06	; 6
    3caa:	8d bf       	out	0x3d, r24	; 61
    3cac:	9e bf       	out	0x3e, r25	; 62
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    3cae:	42 e1       	ldi	r20, 0x12	; 18
    3cb0:	54 e0       	ldi	r21, 0x04	; 4
    3cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb4:	28 2f       	mov	r18, r24
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	c9 01       	movw	r24, r18
    3cba:	88 0f       	add	r24, r24
    3cbc:	99 1f       	adc	r25, r25
    3cbe:	82 0f       	add	r24, r18
    3cc0:	93 1f       	adc	r25, r19
    3cc2:	88 0f       	add	r24, r24
    3cc4:	99 1f       	adc	r25, r25
    3cc6:	88 0f       	add	r24, r24
    3cc8:	99 1f       	adc	r25, r25
    3cca:	88 0f       	add	r24, r24
    3ccc:	99 1f       	adc	r25, r25
    3cce:	fc 01       	movw	r30, r24
    3cd0:	ed 56       	subi	r30, 0x6D	; 109
    3cd2:	fb 4d       	sbci	r31, 0xDB	; 219
    3cd4:	80 81       	ld	r24, Z
    3cd6:	91 81       	ldd	r25, Z+1	; 0x01
    3cd8:	a2 81       	ldd	r26, Z+2	; 0x02
    3cda:	b3 81       	ldd	r27, Z+3	; 0x03
    3cdc:	00 d0       	rcall	.+0      	; 0x3cde <_cfg_dump_axis+0x1b6>
    3cde:	00 d0       	rcall	.+0      	; 0x3ce0 <_cfg_dump_axis+0x1b8>
    3ce0:	ed b7       	in	r30, 0x3d	; 61
    3ce2:	fe b7       	in	r31, 0x3e	; 62
    3ce4:	31 96       	adiw	r30, 0x01	; 1
    3ce6:	40 83       	st	Z, r20
    3ce8:	51 83       	std	Z+1, r21	; 0x01
    3cea:	82 83       	std	Z+2, r24	; 0x02
    3cec:	93 83       	std	Z+3, r25	; 0x03
    3cee:	a4 83       	std	Z+4, r26	; 0x04
    3cf0:	b5 83       	std	Z+5, r27	; 0x05
    3cf2:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    3cf6:	8d b7       	in	r24, 0x3d	; 61
    3cf8:	9e b7       	in	r25, 0x3e	; 62
    3cfa:	06 96       	adiw	r24, 0x06	; 6
    3cfc:	8d bf       	out	0x3d, r24	; 61
    3cfe:	9e bf       	out	0x3e, r25	; 62
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    3d00:	4f ed       	ldi	r20, 0xDF	; 223
    3d02:	53 e0       	ldi	r21, 0x03	; 3
    3d04:	8d 81       	ldd	r24, Y+5	; 0x05
    3d06:	28 2f       	mov	r18, r24
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	c9 01       	movw	r24, r18
    3d0c:	88 0f       	add	r24, r24
    3d0e:	99 1f       	adc	r25, r25
    3d10:	82 0f       	add	r24, r18
    3d12:	93 1f       	adc	r25, r19
    3d14:	88 0f       	add	r24, r24
    3d16:	99 1f       	adc	r25, r25
    3d18:	88 0f       	add	r24, r24
    3d1a:	99 1f       	adc	r25, r25
    3d1c:	88 0f       	add	r24, r24
    3d1e:	99 1f       	adc	r25, r25
    3d20:	fc 01       	movw	r30, r24
    3d22:	e9 56       	subi	r30, 0x69	; 105
    3d24:	fb 4d       	sbci	r31, 0xDB	; 219
    3d26:	80 81       	ld	r24, Z
    3d28:	91 81       	ldd	r25, Z+1	; 0x01
    3d2a:	a2 81       	ldd	r26, Z+2	; 0x02
    3d2c:	b3 81       	ldd	r27, Z+3	; 0x03
    3d2e:	00 d0       	rcall	.+0      	; 0x3d30 <_cfg_dump_axis+0x208>
    3d30:	00 d0       	rcall	.+0      	; 0x3d32 <_cfg_dump_axis+0x20a>
    3d32:	ed b7       	in	r30, 0x3d	; 61
    3d34:	fe b7       	in	r31, 0x3e	; 62
    3d36:	31 96       	adiw	r30, 0x01	; 1
    3d38:	40 83       	st	Z, r20
    3d3a:	51 83       	std	Z+1, r21	; 0x01
    3d3c:	82 83       	std	Z+2, r24	; 0x02
    3d3e:	93 83       	std	Z+3, r25	; 0x03
    3d40:	a4 83       	std	Z+4, r26	; 0x04
    3d42:	b5 83       	std	Z+5, r27	; 0x05
    3d44:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    3d48:	8d b7       	in	r24, 0x3d	; 61
    3d4a:	9e b7       	in	r25, 0x3e	; 62
    3d4c:	06 96       	adiw	r24, 0x06	; 6
    3d4e:	8d bf       	out	0x3d, r24	; 61
    3d50:	9e bf       	out	0x3e, r25	; 62
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    3d52:	4e ea       	ldi	r20, 0xAE	; 174
    3d54:	53 e0       	ldi	r21, 0x03	; 3
    3d56:	8d 81       	ldd	r24, Y+5	; 0x05
    3d58:	28 2f       	mov	r18, r24
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	c9 01       	movw	r24, r18
    3d5e:	88 0f       	add	r24, r24
    3d60:	99 1f       	adc	r25, r25
    3d62:	82 0f       	add	r24, r18
    3d64:	93 1f       	adc	r25, r19
    3d66:	88 0f       	add	r24, r24
    3d68:	99 1f       	adc	r25, r25
    3d6a:	88 0f       	add	r24, r24
    3d6c:	99 1f       	adc	r25, r25
    3d6e:	88 0f       	add	r24, r24
    3d70:	99 1f       	adc	r25, r25
    3d72:	fc 01       	movw	r30, r24
    3d74:	e1 56       	subi	r30, 0x61	; 97
    3d76:	fb 4d       	sbci	r31, 0xDB	; 219
    3d78:	80 81       	ld	r24, Z
    3d7a:	88 2f       	mov	r24, r24
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	00 d0       	rcall	.+0      	; 0x3d80 <_cfg_dump_axis+0x258>
    3d80:	0f 92       	push	r0
    3d82:	ed b7       	in	r30, 0x3d	; 61
    3d84:	fe b7       	in	r31, 0x3e	; 62
    3d86:	31 96       	adiw	r30, 0x01	; 1
    3d88:	40 83       	st	Z, r20
    3d8a:	51 83       	std	Z+1, r21	; 0x01
    3d8c:	82 83       	std	Z+2, r24	; 0x02
    3d8e:	93 83       	std	Z+3, r25	; 0x03
    3d90:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    3d94:	0f 90       	pop	r0
    3d96:	0f 90       	pop	r0
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    3d9c:	4d e7       	ldi	r20, 0x7D	; 125
    3d9e:	53 e0       	ldi	r21, 0x03	; 3
    3da0:	8d 81       	ldd	r24, Y+5	; 0x05
    3da2:	28 2f       	mov	r18, r24
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	c9 01       	movw	r24, r18
    3da8:	88 0f       	add	r24, r24
    3daa:	99 1f       	adc	r25, r25
    3dac:	82 0f       	add	r24, r18
    3dae:	93 1f       	adc	r25, r19
    3db0:	88 0f       	add	r24, r24
    3db2:	99 1f       	adc	r25, r25
    3db4:	88 0f       	add	r24, r24
    3db6:	99 1f       	adc	r25, r25
    3db8:	88 0f       	add	r24, r24
    3dba:	99 1f       	adc	r25, r25
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	e7 57       	subi	r30, 0x77	; 119
    3dc0:	fb 4d       	sbci	r31, 0xDB	; 219
    3dc2:	80 81       	ld	r24, Z
    3dc4:	88 2f       	mov	r24, r24
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	00 d0       	rcall	.+0      	; 0x3dca <_cfg_dump_axis+0x2a2>
    3dca:	0f 92       	push	r0
    3dcc:	ed b7       	in	r30, 0x3d	; 61
    3dce:	fe b7       	in	r31, 0x3e	; 62
    3dd0:	31 96       	adiw	r30, 0x01	; 1
    3dd2:	40 83       	st	Z, r20
    3dd4:	51 83       	std	Z+1, r21	; 0x01
    3dd6:	82 83       	std	Z+2, r24	; 0x02
    3dd8:	93 83       	std	Z+3, r25	; 0x03
    3dda:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    3dde:	0f 90       	pop	r0
    3de0:	0f 90       	pop	r0
    3de2:	0f 90       	pop	r0
    3de4:	0f 90       	pop	r0
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    3de6:	4d e4       	ldi	r20, 0x4D	; 77
    3de8:	53 e0       	ldi	r21, 0x03	; 3
    3dea:	8d 81       	ldd	r24, Y+5	; 0x05
    3dec:	28 2f       	mov	r18, r24
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	c9 01       	movw	r24, r18
    3df2:	88 0f       	add	r24, r24
    3df4:	99 1f       	adc	r25, r25
    3df6:	82 0f       	add	r24, r18
    3df8:	93 1f       	adc	r25, r19
    3dfa:	88 0f       	add	r24, r24
    3dfc:	99 1f       	adc	r25, r25
    3dfe:	88 0f       	add	r24, r24
    3e00:	99 1f       	adc	r25, r25
    3e02:	88 0f       	add	r24, r24
    3e04:	99 1f       	adc	r25, r25
    3e06:	fc 01       	movw	r30, r24
    3e08:	e6 57       	subi	r30, 0x76	; 118
    3e0a:	fb 4d       	sbci	r31, 0xDB	; 219
    3e0c:	80 81       	ld	r24, Z
    3e0e:	88 2f       	mov	r24, r24
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	00 d0       	rcall	.+0      	; 0x3e14 <_cfg_dump_axis+0x2ec>
    3e14:	0f 92       	push	r0
    3e16:	ed b7       	in	r30, 0x3d	; 61
    3e18:	fe b7       	in	r31, 0x3e	; 62
    3e1a:	31 96       	adiw	r30, 0x01	; 1
    3e1c:	40 83       	st	Z, r20
    3e1e:	51 83       	std	Z+1, r21	; 0x01
    3e20:	82 83       	std	Z+2, r24	; 0x02
    3e22:	93 83       	std	Z+3, r25	; 0x03
    3e24:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    3e28:	0f 90       	pop	r0
    3e2a:	0f 90       	pop	r0
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    3e30:	49 e1       	ldi	r20, 0x19	; 25
    3e32:	53 e0       	ldi	r21, 0x03	; 3
    3e34:	8d 81       	ldd	r24, Y+5	; 0x05
    3e36:	28 2f       	mov	r18, r24
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	c9 01       	movw	r24, r18
    3e3c:	88 0f       	add	r24, r24
    3e3e:	99 1f       	adc	r25, r25
    3e40:	82 0f       	add	r24, r18
    3e42:	93 1f       	adc	r25, r19
    3e44:	88 0f       	add	r24, r24
    3e46:	99 1f       	adc	r25, r25
    3e48:	88 0f       	add	r24, r24
    3e4a:	99 1f       	adc	r25, r25
    3e4c:	88 0f       	add	r24, r24
    3e4e:	99 1f       	adc	r25, r25
    3e50:	fc 01       	movw	r30, r24
    3e52:	e5 56       	subi	r30, 0x65	; 101
    3e54:	fb 4d       	sbci	r31, 0xDB	; 219
    3e56:	80 81       	ld	r24, Z
    3e58:	91 81       	ldd	r25, Z+1	; 0x01
    3e5a:	a2 81       	ldd	r26, Z+2	; 0x02
    3e5c:	b3 81       	ldd	r27, Z+3	; 0x03
    3e5e:	00 d0       	rcall	.+0      	; 0x3e60 <_cfg_dump_axis+0x338>
    3e60:	00 d0       	rcall	.+0      	; 0x3e62 <_cfg_dump_axis+0x33a>
    3e62:	ed b7       	in	r30, 0x3d	; 61
    3e64:	fe b7       	in	r31, 0x3e	; 62
    3e66:	31 96       	adiw	r30, 0x01	; 1
    3e68:	40 83       	st	Z, r20
    3e6a:	51 83       	std	Z+1, r21	; 0x01
    3e6c:	82 83       	std	Z+2, r24	; 0x02
    3e6e:	93 83       	std	Z+3, r25	; 0x03
    3e70:	a4 83       	std	Z+4, r26	; 0x04
    3e72:	b5 83       	std	Z+5, r27	; 0x05
    3e74:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    3e78:	8d b7       	in	r24, 0x3d	; 61
    3e7a:	9e b7       	in	r25, 0x3e	; 62
    3e7c:	06 96       	adiw	r24, 0x06	; 6
    3e7e:	8d bf       	out	0x3d, r24	; 61
    3e80:	9e bf       	out	0x3e, r25	; 62
}
    3e82:	25 96       	adiw	r28, 0x05	; 5
    3e84:	cd bf       	out	0x3d, r28	; 61
    3e86:	de bf       	out	0x3e, r29	; 62
    3e88:	cf 91       	pop	r28
    3e8a:	df 91       	pop	r29
    3e8c:	08 95       	ret

00003e8e <cfg_reset>:
/* 
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
    3e8e:	df 93       	push	r29
    3e90:	cf 93       	push	r28
    3e92:	cd b7       	in	r28, 0x3d	; 61
    3e94:	de b7       	in	r29, 0x3e	; 62
	cfg.config_version = EEPROM_DATA_VERSION;
    3e96:	84 e6       	ldi	r24, 0x64	; 100
    3e98:	80 93 7a 24 	sts	0x247A, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    3e9c:	8a e0       	ldi	r24, 0x0A	; 10
    3e9e:	97 ed       	ldi	r25, 0xD7	; 215
    3ea0:	a3 e2       	ldi	r26, 0x23	; 35
    3ea2:	bc e3       	ldi	r27, 0x3C	; 60
    3ea4:	80 93 7c 24 	sts	0x247C, r24
    3ea8:	90 93 7d 24 	sts	0x247D, r25
    3eac:	a0 93 7e 24 	sts	0x247E, r26
    3eb0:	b0 93 7f 24 	sts	0x247F, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    3eb4:	8c ed       	ldi	r24, 0xDC	; 220
    3eb6:	95 e0       	ldi	r25, 0x05	; 5
    3eb8:	80 93 8b 24 	sts	0x248B, r24
    3ebc:	90 93 8c 24 	sts	0x248C, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    3ec0:	8c ed       	ldi	r24, 0xDC	; 220
    3ec2:	95 e0       	ldi	r25, 0x05	; 5
    3ec4:	80 93 a3 24 	sts	0x24A3, r24
    3ec8:	90 93 a4 24 	sts	0x24A4, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    3ecc:	8c ed       	ldi	r24, 0xDC	; 220
    3ece:	95 e0       	ldi	r25, 0x05	; 5
    3ed0:	80 93 bb 24 	sts	0x24BB, r24
    3ed4:	90 93 bc 24 	sts	0x24BC, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    3ed8:	8c ed       	ldi	r24, 0xDC	; 220
    3eda:	95 e0       	ldi	r25, 0x05	; 5
    3edc:	80 93 d3 24 	sts	0x24D3, r24
    3ee0:	90 93 d4 24 	sts	0x24D4, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    3ee4:	8c ed       	ldi	r24, 0xDC	; 220
    3ee6:	95 e0       	ldi	r25, 0x05	; 5
    3ee8:	80 93 8d 24 	sts	0x248D, r24
    3eec:	90 93 8e 24 	sts	0x248E, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    3ef0:	8c ed       	ldi	r24, 0xDC	; 220
    3ef2:	95 e0       	ldi	r25, 0x05	; 5
    3ef4:	80 93 a5 24 	sts	0x24A5, r24
    3ef8:	90 93 a6 24 	sts	0x24A6, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    3efc:	8c ed       	ldi	r24, 0xDC	; 220
    3efe:	95 e0       	ldi	r25, 0x05	; 5
    3f00:	80 93 bd 24 	sts	0x24BD, r24
    3f04:	90 93 be 24 	sts	0x24BE, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    3f08:	8c ed       	ldi	r24, 0xDC	; 220
    3f0a:	95 e0       	ldi	r25, 0x05	; 5
    3f0c:	80 93 d5 24 	sts	0x24D5, r24
    3f10:	90 93 d6 24 	sts	0x24D6, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    3f14:	86 e6       	ldi	r24, 0x66	; 102
    3f16:	96 e6       	ldi	r25, 0x66	; 102
    3f18:	a6 ee       	ldi	r26, 0xE6	; 230
    3f1a:	bf e3       	ldi	r27, 0x3F	; 63
    3f1c:	80 93 8f 24 	sts	0x248F, r24
    3f20:	90 93 90 24 	sts	0x2490, r25
    3f24:	a0 93 91 24 	sts	0x2491, r26
    3f28:	b0 93 92 24 	sts	0x2492, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    3f2c:	86 e6       	ldi	r24, 0x66	; 102
    3f2e:	96 e6       	ldi	r25, 0x66	; 102
    3f30:	a6 ee       	ldi	r26, 0xE6	; 230
    3f32:	bf e3       	ldi	r27, 0x3F	; 63
    3f34:	80 93 a7 24 	sts	0x24A7, r24
    3f38:	90 93 a8 24 	sts	0x24A8, r25
    3f3c:	a0 93 a9 24 	sts	0x24A9, r26
    3f40:	b0 93 aa 24 	sts	0x24AA, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    3f44:	86 e6       	ldi	r24, 0x66	; 102
    3f46:	96 e6       	ldi	r25, 0x66	; 102
    3f48:	a6 ee       	ldi	r26, 0xE6	; 230
    3f4a:	bf e3       	ldi	r27, 0x3F	; 63
    3f4c:	80 93 bf 24 	sts	0x24BF, r24
    3f50:	90 93 c0 24 	sts	0x24C0, r25
    3f54:	a0 93 c1 24 	sts	0x24C1, r26
    3f58:	b0 93 c2 24 	sts	0x24C2, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    3f5c:	86 e6       	ldi	r24, 0x66	; 102
    3f5e:	96 e6       	ldi	r25, 0x66	; 102
    3f60:	a6 ee       	ldi	r26, 0xE6	; 230
    3f62:	bf e3       	ldi	r27, 0x3F	; 63
    3f64:	80 93 d7 24 	sts	0x24D7, r24
    3f68:	90 93 d8 24 	sts	0x24D8, r25
    3f6c:	a0 93 d9 24 	sts	0x24D9, r26
    3f70:	b0 93 da 24 	sts	0x24DA, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    3f74:	8c e5       	ldi	r24, 0x5C	; 92
    3f76:	9f e8       	ldi	r25, 0x8F	; 143
    3f78:	a2 ea       	ldi	r26, 0xA2	; 162
    3f7a:	bf e3       	ldi	r27, 0x3F	; 63
    3f7c:	80 93 93 24 	sts	0x2493, r24
    3f80:	90 93 94 24 	sts	0x2494, r25
    3f84:	a0 93 95 24 	sts	0x2495, r26
    3f88:	b0 93 96 24 	sts	0x2496, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    3f8c:	8c e5       	ldi	r24, 0x5C	; 92
    3f8e:	9f e8       	ldi	r25, 0x8F	; 143
    3f90:	a2 ea       	ldi	r26, 0xA2	; 162
    3f92:	bf e3       	ldi	r27, 0x3F	; 63
    3f94:	80 93 ab 24 	sts	0x24AB, r24
    3f98:	90 93 ac 24 	sts	0x24AC, r25
    3f9c:	a0 93 ad 24 	sts	0x24AD, r26
    3fa0:	b0 93 ae 24 	sts	0x24AE, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    3fa4:	8c e5       	ldi	r24, 0x5C	; 92
    3fa6:	9f e8       	ldi	r25, 0x8F	; 143
    3fa8:	a2 ea       	ldi	r26, 0xA2	; 162
    3faa:	bf e3       	ldi	r27, 0x3F	; 63
    3fac:	80 93 c3 24 	sts	0x24C3, r24
    3fb0:	90 93 c4 24 	sts	0x24C4, r25
    3fb4:	a0 93 c5 24 	sts	0x24C5, r26
    3fb8:	b0 93 c6 24 	sts	0x24C6, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    3fbc:	8c e5       	ldi	r24, 0x5C	; 92
    3fbe:	9f e8       	ldi	r25, 0x8F	; 143
    3fc0:	a2 ea       	ldi	r26, 0xA2	; 162
    3fc2:	bf e3       	ldi	r27, 0x3F	; 63
    3fc4:	80 93 db 24 	sts	0x24DB, r24
    3fc8:	90 93 dc 24 	sts	0x24DC, r25
    3fcc:	a0 93 dd 24 	sts	0x24DD, r26
    3fd0:	b0 93 de 24 	sts	0x24DE, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    3fd4:	80 e0       	ldi	r24, 0x00	; 0
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	a8 ec       	ldi	r26, 0xC8	; 200
    3fda:	b3 e4       	ldi	r27, 0x43	; 67
    3fdc:	80 93 97 24 	sts	0x2497, r24
    3fe0:	90 93 98 24 	sts	0x2498, r25
    3fe4:	a0 93 99 24 	sts	0x2499, r26
    3fe8:	b0 93 9a 24 	sts	0x249A, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	a8 ec       	ldi	r26, 0xC8	; 200
    3ff2:	b3 e4       	ldi	r27, 0x43	; 67
    3ff4:	80 93 af 24 	sts	0x24AF, r24
    3ff8:	90 93 b0 24 	sts	0x24B0, r25
    3ffc:	a0 93 b1 24 	sts	0x24B1, r26
    4000:	b0 93 b2 24 	sts	0x24B2, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    4004:	80 e0       	ldi	r24, 0x00	; 0
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	a6 e9       	ldi	r26, 0x96	; 150
    400a:	b3 e4       	ldi	r27, 0x43	; 67
    400c:	80 93 c7 24 	sts	0x24C7, r24
    4010:	90 93 c8 24 	sts	0x24C8, r25
    4014:	a0 93 c9 24 	sts	0x24C9, r26
    4018:	b0 93 ca 24 	sts	0x24CA, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	a0 e8       	ldi	r26, 0x80	; 128
    4022:	bf eb       	ldi	r27, 0xBF	; 191
    4024:	80 93 df 24 	sts	0x24DF, r24
    4028:	90 93 e0 24 	sts	0x24E0, r25
    402c:	a0 93 e1 24 	sts	0x24E1, r26
    4030:	b0 93 e2 24 	sts	0x24E2, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    4034:	88 e0       	ldi	r24, 0x08	; 8
    4036:	80 93 88 24 	sts	0x2488, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    403a:	88 e0       	ldi	r24, 0x08	; 8
    403c:	80 93 a0 24 	sts	0x24A0, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    4040:	88 e0       	ldi	r24, 0x08	; 8
    4042:	80 93 b8 24 	sts	0x24B8, r24
	cfg.a[A].microstep = A_MICROSTEPS;
    4046:	88 e0       	ldi	r24, 0x08	; 8
    4048:	80 93 d0 24 	sts	0x24D0, r24

	cfg.a[X].polarity = X_POLARITY;
    404c:	10 92 8a 24 	sts	0x248A, r1
	cfg.a[Y].polarity = Y_POLARITY;
    4050:	81 e0       	ldi	r24, 0x01	; 1
    4052:	80 93 a2 24 	sts	0x24A2, r24
	cfg.a[Z].polarity = Z_POLARITY;
    4056:	10 92 ba 24 	sts	0x24BA, r1
	cfg.a[A].polarity = A_POLARITY;
    405a:	10 92 d2 24 	sts	0x24D2, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    405e:	81 e0       	ldi	r24, 0x01	; 1
    4060:	80 93 9f 24 	sts	0x249F, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    4064:	81 e0       	ldi	r24, 0x01	; 1
    4066:	80 93 b7 24 	sts	0x24B7, r24
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	80 93 cf 24 	sts	0x24CF, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    4070:	10 92 e7 24 	sts	0x24E7, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	80 93 89 24 	sts	0x2489, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	80 93 a1 24 	sts	0x24A1, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    4080:	81 e0       	ldi	r24, 0x01	; 1
    4082:	80 93 b9 24 	sts	0x24B9, r24
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	80 93 d1 24 	sts	0x24D1, r24

	_cfg_computed();		// generate computed values from the above
    408c:	0e 94 4b 20 	call	0x4096	; 0x4096 <_cfg_computed>
}
    4090:	cf 91       	pop	r28
    4092:	df 91       	pop	r29
    4094:	08 95       	ret

00004096 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    4096:	af 92       	push	r10
    4098:	bf 92       	push	r11
    409a:	cf 92       	push	r12
    409c:	df 92       	push	r13
    409e:	ef 92       	push	r14
    40a0:	ff 92       	push	r15
    40a2:	0f 93       	push	r16
    40a4:	1f 93       	push	r17
    40a6:	df 93       	push	r29
    40a8:	cf 93       	push	r28
    40aa:	0f 92       	push	r0
    40ac:	cd b7       	in	r28, 0x3d	; 61
    40ae:	de b7       	in	r29, 0x3e	; 62
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    40b0:	19 82       	std	Y+1, r1	; 0x01
    40b2:	7a c0       	rjmp	.+244    	; 0x41a8 <_cfg_computed+0x112>
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    40b4:	89 81       	ldd	r24, Y+1	; 0x01
    40b6:	c8 2e       	mov	r12, r24
    40b8:	dd 24       	eor	r13, r13
    40ba:	89 81       	ldd	r24, Y+1	; 0x01
    40bc:	28 2f       	mov	r18, r24
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	c9 01       	movw	r24, r18
    40c2:	88 0f       	add	r24, r24
    40c4:	99 1f       	adc	r25, r25
    40c6:	82 0f       	add	r24, r18
    40c8:	93 1f       	adc	r25, r19
    40ca:	88 0f       	add	r24, r24
    40cc:	99 1f       	adc	r25, r25
    40ce:	88 0f       	add	r24, r24
    40d0:	99 1f       	adc	r25, r25
    40d2:	88 0f       	add	r24, r24
    40d4:	99 1f       	adc	r25, r25
    40d6:	fc 01       	movw	r30, r24
    40d8:	e1 57       	subi	r30, 0x71	; 113
    40da:	fb 4d       	sbci	r31, 0xDB	; 219
    40dc:	e0 80       	ld	r14, Z
    40de:	f1 80       	ldd	r15, Z+1	; 0x01
    40e0:	02 81       	ldd	r16, Z+2	; 0x02
    40e2:	13 81       	ldd	r17, Z+3	; 0x03
    40e4:	89 81       	ldd	r24, Y+1	; 0x01
    40e6:	28 2f       	mov	r18, r24
    40e8:	30 e0       	ldi	r19, 0x00	; 0
    40ea:	c9 01       	movw	r24, r18
    40ec:	88 0f       	add	r24, r24
    40ee:	99 1f       	adc	r25, r25
    40f0:	82 0f       	add	r24, r18
    40f2:	93 1f       	adc	r25, r19
    40f4:	88 0f       	add	r24, r24
    40f6:	99 1f       	adc	r25, r25
    40f8:	88 0f       	add	r24, r24
    40fa:	99 1f       	adc	r25, r25
    40fc:	88 0f       	add	r24, r24
    40fe:	99 1f       	adc	r25, r25
    4100:	fc 01       	movw	r30, r24
    4102:	e8 57       	subi	r30, 0x78	; 120
    4104:	fb 4d       	sbci	r31, 0xDB	; 219
    4106:	80 81       	ld	r24, Z
    4108:	88 2f       	mov	r24, r24
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	aa 27       	eor	r26, r26
    410e:	97 fd       	sbrc	r25, 7
    4110:	a0 95       	com	r26
    4112:	ba 2f       	mov	r27, r26
    4114:	bc 01       	movw	r22, r24
    4116:	cd 01       	movw	r24, r26
    4118:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    411c:	9b 01       	movw	r18, r22
    411e:	ac 01       	movw	r20, r24
    4120:	c8 01       	movw	r24, r16
    4122:	b7 01       	movw	r22, r14
    4124:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    4128:	dc 01       	movw	r26, r24
    412a:	cb 01       	movw	r24, r22
    412c:	9c 01       	movw	r18, r24
    412e:	ad 01       	movw	r20, r26
    4130:	60 e0       	ldi	r22, 0x00	; 0
    4132:	70 e0       	ldi	r23, 0x00	; 0
    4134:	84 eb       	ldi	r24, 0xB4	; 180
    4136:	93 e4       	ldi	r25, 0x43	; 67
    4138:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    413c:	dc 01       	movw	r26, r24
    413e:	cb 01       	movw	r24, r22
    4140:	7c 01       	movw	r14, r24
    4142:	8d 01       	movw	r16, r26
    4144:	89 81       	ldd	r24, Y+1	; 0x01
    4146:	28 2f       	mov	r18, r24
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	c9 01       	movw	r24, r18
    414c:	88 0f       	add	r24, r24
    414e:	99 1f       	adc	r25, r25
    4150:	82 0f       	add	r24, r18
    4152:	93 1f       	adc	r25, r19
    4154:	88 0f       	add	r24, r24
    4156:	99 1f       	adc	r25, r25
    4158:	88 0f       	add	r24, r24
    415a:	99 1f       	adc	r25, r25
    415c:	88 0f       	add	r24, r24
    415e:	99 1f       	adc	r25, r25
    4160:	fc 01       	movw	r30, r24
    4162:	ed 56       	subi	r30, 0x6D	; 109
    4164:	fb 4d       	sbci	r31, 0xDB	; 219
    4166:	20 81       	ld	r18, Z
    4168:	31 81       	ldd	r19, Z+1	; 0x01
    416a:	42 81       	ldd	r20, Z+2	; 0x02
    416c:	53 81       	ldd	r21, Z+3	; 0x03
    416e:	c8 01       	movw	r24, r16
    4170:	b7 01       	movw	r22, r14
    4172:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	9c 01       	movw	r18, r24
    417c:	ad 01       	movw	r20, r26
    417e:	c6 01       	movw	r24, r12
    4180:	88 0f       	add	r24, r24
    4182:	99 1f       	adc	r25, r25
    4184:	8c 0d       	add	r24, r12
    4186:	9d 1d       	adc	r25, r13
    4188:	88 0f       	add	r24, r24
    418a:	99 1f       	adc	r25, r25
    418c:	88 0f       	add	r24, r24
    418e:	99 1f       	adc	r25, r25
    4190:	88 0f       	add	r24, r24
    4192:	99 1f       	adc	r25, r25
    4194:	fc 01       	movw	r30, r24
    4196:	e5 56       	subi	r30, 0x65	; 101
    4198:	fb 4d       	sbci	r31, 0xDB	; 219
    419a:	20 83       	st	Z, r18
    419c:	31 83       	std	Z+1, r19	; 0x01
    419e:	42 83       	std	Z+2, r20	; 0x02
    41a0:	53 83       	std	Z+3, r21	; 0x03
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    41a2:	89 81       	ldd	r24, Y+1	; 0x01
    41a4:	8f 5f       	subi	r24, 0xFF	; 255
    41a6:	89 83       	std	Y+1, r24	; 0x01
    41a8:	89 81       	ldd	r24, Y+1	; 0x01
    41aa:	84 30       	cpi	r24, 0x04	; 4
    41ac:	08 f4       	brcc	.+2      	; 0x41b0 <_cfg_computed+0x11a>
    41ae:	82 cf       	rjmp	.-252    	; 0x40b4 <_cfg_computed+0x1e>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    41b0:	20 91 8d 24 	lds	r18, 0x248D
    41b4:	30 91 8e 24 	lds	r19, 0x248E
    41b8:	80 91 88 24 	lds	r24, 0x2488
    41bc:	88 2f       	mov	r24, r24
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	ac 01       	movw	r20, r24
    41c2:	24 9f       	mul	r18, r20
    41c4:	c0 01       	movw	r24, r0
    41c6:	25 9f       	mul	r18, r21
    41c8:	90 0d       	add	r25, r0
    41ca:	34 9f       	mul	r19, r20
    41cc:	90 0d       	add	r25, r0
    41ce:	11 24       	eor	r1, r1
    41d0:	cc 01       	movw	r24, r24
    41d2:	a0 e0       	ldi	r26, 0x00	; 0
    41d4:	b0 e0       	ldi	r27, 0x00	; 0
    41d6:	bc 01       	movw	r22, r24
    41d8:	cd 01       	movw	r24, r26
    41da:	0e 94 de 5b 	call	0xb7bc	; 0xb7bc <__floatunsisf>
    41de:	5b 01       	movw	r10, r22
    41e0:	6c 01       	movw	r12, r24
    41e2:	e0 90 8f 24 	lds	r14, 0x248F
    41e6:	f0 90 90 24 	lds	r15, 0x2490
    41ea:	00 91 91 24 	lds	r16, 0x2491
    41ee:	10 91 92 24 	lds	r17, 0x2492
    41f2:	80 91 88 24 	lds	r24, 0x2488
    41f6:	88 2f       	mov	r24, r24
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	aa 27       	eor	r26, r26
    41fc:	97 fd       	sbrc	r25, 7
    41fe:	a0 95       	com	r26
    4200:	ba 2f       	mov	r27, r26
    4202:	bc 01       	movw	r22, r24
    4204:	cd 01       	movw	r24, r26
    4206:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    420a:	9b 01       	movw	r18, r22
    420c:	ac 01       	movw	r20, r24
    420e:	c8 01       	movw	r24, r16
    4210:	b7 01       	movw	r22, r14
    4212:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
    421a:	9c 01       	movw	r18, r24
    421c:	ad 01       	movw	r20, r26
    421e:	60 e0       	ldi	r22, 0x00	; 0
    4220:	70 e0       	ldi	r23, 0x00	; 0
    4222:	84 eb       	ldi	r24, 0xB4	; 180
    4224:	93 e4       	ldi	r25, 0x43	; 67
    4226:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    422a:	dc 01       	movw	r26, r24
    422c:	cb 01       	movw	r24, r22
    422e:	9c 01       	movw	r18, r24
    4230:	ad 01       	movw	r20, r26
    4232:	c6 01       	movw	r24, r12
    4234:	b5 01       	movw	r22, r10
    4236:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    423a:	dc 01       	movw	r26, r24
    423c:	cb 01       	movw	r24, r22
    423e:	80 93 80 24 	sts	0x2480, r24
    4242:	90 93 81 24 	sts	0x2481, r25
    4246:	a0 93 82 24 	sts	0x2482, r26
    424a:	b0 93 83 24 	sts	0x2483, r27
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    424e:	20 91 8b 24 	lds	r18, 0x248B
    4252:	30 91 8c 24 	lds	r19, 0x248C
    4256:	80 91 88 24 	lds	r24, 0x2488
    425a:	88 2f       	mov	r24, r24
    425c:	90 e0       	ldi	r25, 0x00	; 0
    425e:	ac 01       	movw	r20, r24
    4260:	24 9f       	mul	r18, r20
    4262:	c0 01       	movw	r24, r0
    4264:	25 9f       	mul	r18, r21
    4266:	90 0d       	add	r25, r0
    4268:	34 9f       	mul	r19, r20
    426a:	90 0d       	add	r25, r0
    426c:	11 24       	eor	r1, r1
    426e:	cc 01       	movw	r24, r24
    4270:	a0 e0       	ldi	r26, 0x00	; 0
    4272:	b0 e0       	ldi	r27, 0x00	; 0
    4274:	bc 01       	movw	r22, r24
    4276:	cd 01       	movw	r24, r26
    4278:	0e 94 de 5b 	call	0xb7bc	; 0xb7bc <__floatunsisf>
    427c:	5b 01       	movw	r10, r22
    427e:	6c 01       	movw	r12, r24
    4280:	e0 90 8f 24 	lds	r14, 0x248F
    4284:	f0 90 90 24 	lds	r15, 0x2490
    4288:	00 91 91 24 	lds	r16, 0x2491
    428c:	10 91 92 24 	lds	r17, 0x2492
    4290:	80 91 88 24 	lds	r24, 0x2488
    4294:	88 2f       	mov	r24, r24
    4296:	90 e0       	ldi	r25, 0x00	; 0
    4298:	aa 27       	eor	r26, r26
    429a:	97 fd       	sbrc	r25, 7
    429c:	a0 95       	com	r26
    429e:	ba 2f       	mov	r27, r26
    42a0:	bc 01       	movw	r22, r24
    42a2:	cd 01       	movw	r24, r26
    42a4:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    42a8:	9b 01       	movw	r18, r22
    42aa:	ac 01       	movw	r20, r24
    42ac:	c8 01       	movw	r24, r16
    42ae:	b7 01       	movw	r22, r14
    42b0:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	9c 01       	movw	r18, r24
    42ba:	ad 01       	movw	r20, r26
    42bc:	60 e0       	ldi	r22, 0x00	; 0
    42be:	70 e0       	ldi	r23, 0x00	; 0
    42c0:	84 eb       	ldi	r24, 0xB4	; 180
    42c2:	93 e4       	ldi	r25, 0x43	; 67
    42c4:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    42c8:	dc 01       	movw	r26, r24
    42ca:	cb 01       	movw	r24, r22
    42cc:	9c 01       	movw	r18, r24
    42ce:	ad 01       	movw	r20, r26
    42d0:	c6 01       	movw	r24, r12
    42d2:	b5 01       	movw	r22, r10
    42d4:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    42d8:	dc 01       	movw	r26, r24
    42da:	cb 01       	movw	r24, r22
    42dc:	80 93 84 24 	sts	0x2484, r24
    42e0:	90 93 85 24 	sts	0x2485, r25
    42e4:	a0 93 86 24 	sts	0x2486, r26
    42e8:	b0 93 87 24 	sts	0x2487, r27
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    42ec:	0f 90       	pop	r0
    42ee:	cf 91       	pop	r28
    42f0:	df 91       	pop	r29
    42f2:	1f 91       	pop	r17
    42f4:	0f 91       	pop	r16
    42f6:	ff 90       	pop	r15
    42f8:	ef 90       	pop	r14
    42fa:	df 90       	pop	r13
    42fc:	cf 90       	pop	r12
    42fe:	bf 90       	pop	r11
    4300:	af 90       	pop	r10
    4302:	08 95       	ret

00004304 <cfg_read>:
/* 
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
    4304:	df 93       	push	r29
    4306:	cf 93       	push	r28
    4308:	00 d0       	rcall	.+0      	; 0x430a <cfg_read+0x6>
    430a:	cd b7       	in	r28, 0x3d	; 61
    430c:	de b7       	in	r29, 0x3e	; 62
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    430e:	80 e0       	ldi	r24, 0x00	; 0
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	0e 94 18 3d 	call	0x7a30	; 0x7a30 <eeprom_get_char>
    4316:	89 83       	std	Y+1, r24	; 0x01

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    4318:	89 81       	ldd	r24, Y+1	; 0x01
    431a:	84 36       	cpi	r24, 0x64	; 100
    431c:	19 f0       	breq	.+6      	; 0x4324 <cfg_read+0x20>
		return(FALSE); 
    431e:	1a 82       	std	Y+2, r1	; 0x02
    4320:	1b 82       	std	Y+3, r1	; 0x03
    4322:	11 c0       	rjmp	.+34     	; 0x4346 <cfg_read+0x42>
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    4324:	8a e7       	ldi	r24, 0x7A	; 122
    4326:	94 e2       	ldi	r25, 0x24	; 36
    4328:	60 e0       	ldi	r22, 0x00	; 0
    432a:	70 e0       	ldi	r23, 0x00	; 0
    432c:	4e e6       	ldi	r20, 0x6E	; 110
    432e:	50 e0       	ldi	r21, 0x00	; 0
    4330:	0e 94 aa 3d 	call	0x7b54	; 0x7b54 <memcpy_from_eeprom_with_checksum>
    4334:	00 97       	sbiw	r24, 0x00	; 0
    4336:	19 f4       	brne	.+6      	; 0x433e <cfg_read+0x3a>
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
    4338:	1a 82       	std	Y+2, r1	; 0x02
    433a:	1b 82       	std	Y+3, r1	; 0x03
    433c:	04 c0       	rjmp	.+8      	; 0x4346 <cfg_read+0x42>
  	}
  	return(TRUE);
    433e:	81 e0       	ldi	r24, 0x01	; 1
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	8a 83       	std	Y+2, r24	; 0x02
    4344:	9b 83       	std	Y+3, r25	; 0x03
    4346:	8a 81       	ldd	r24, Y+2	; 0x02
    4348:	9b 81       	ldd	r25, Y+3	; 0x03
}
    434a:	23 96       	adiw	r28, 0x03	; 3
    434c:	cd bf       	out	0x3d, r28	; 61
    434e:	de bf       	out	0x3e, r29	; 62
    4350:	cf 91       	pop	r28
    4352:	df 91       	pop	r29
    4354:	08 95       	ret

00004356 <cfg_write>:
/* 
 * cfg_write() - write config struct to program ROM 
 */

void cfg_write()
{
    4356:	df 93       	push	r29
    4358:	cf 93       	push	r28
    435a:	cd b7       	in	r28, 0x3d	; 61
    435c:	de b7       	in	r29, 0x3e	; 62
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    435e:	2a e7       	ldi	r18, 0x7A	; 122
    4360:	34 e2       	ldi	r19, 0x24	; 36
    4362:	80 e0       	ldi	r24, 0x00	; 0
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	b9 01       	movw	r22, r18
    4368:	4e e6       	ldi	r20, 0x6E	; 110
    436a:	50 e0       	ldi	r21, 0x00	; 0
    436c:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <memcpy_to_eeprom_with_checksum>
}
    4370:	cf 91       	pop	r28
    4372:	df 91       	pop	r29
    4374:	08 95       	ret

00004376 <_cfg_print_status>:
/*
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
    4376:	df 93       	push	r29
    4378:	cf 93       	push	r28
    437a:	cd b7       	in	r28, 0x3d	; 61
    437c:	de b7       	in	r29, 0x3e	; 62
    437e:	25 97       	sbiw	r28, 0x05	; 5
    4380:	cd bf       	out	0x3d, r28	; 61
    4382:	de bf       	out	0x3e, r29	; 62
    4384:	89 83       	std	Y+1, r24	; 0x01
    4386:	6a 83       	std	Y+2, r22	; 0x02
    4388:	7b 83       	std	Y+3, r23	; 0x03
	switch(status_code) {
    438a:	89 81       	ldd	r24, Y+1	; 0x01
    438c:	28 2f       	mov	r18, r24
    438e:	30 e0       	ldi	r19, 0x00	; 0
    4390:	2c 83       	std	Y+4, r18	; 0x04
    4392:	3d 83       	std	Y+5, r19	; 0x05
    4394:	8c 81       	ldd	r24, Y+4	; 0x04
    4396:	9d 81       	ldd	r25, Y+5	; 0x05
    4398:	89 30       	cpi	r24, 0x09	; 9
    439a:	91 05       	cpc	r25, r1
    439c:	09 f4       	brne	.+2      	; 0x43a0 <_cfg_print_status+0x2a>
    439e:	58 c0       	rjmp	.+176    	; 0x4450 <_cfg_print_status+0xda>
    43a0:	2c 81       	ldd	r18, Y+4	; 0x04
    43a2:	3d 81       	ldd	r19, Y+5	; 0x05
    43a4:	2a 30       	cpi	r18, 0x0A	; 10
    43a6:	31 05       	cpc	r19, r1
    43a8:	5c f4       	brge	.+22     	; 0x43c0 <_cfg_print_status+0x4a>
    43aa:	8c 81       	ldd	r24, Y+4	; 0x04
    43ac:	9d 81       	ldd	r25, Y+5	; 0x05
    43ae:	81 30       	cpi	r24, 0x01	; 1
    43b0:	91 05       	cpc	r25, r1
    43b2:	c1 f0       	breq	.+48     	; 0x43e4 <_cfg_print_status+0x6e>
    43b4:	2c 81       	ldd	r18, Y+4	; 0x04
    43b6:	3d 81       	ldd	r19, Y+5	; 0x05
    43b8:	23 30       	cpi	r18, 0x03	; 3
    43ba:	31 05       	cpc	r19, r1
    43bc:	39 f1       	breq	.+78     	; 0x440c <_cfg_print_status+0x96>
    43be:	83 c0       	rjmp	.+262    	; 0x44c6 <_cfg_print_status+0x150>
    43c0:	8c 81       	ldd	r24, Y+4	; 0x04
    43c2:	9d 81       	ldd	r25, Y+5	; 0x05
    43c4:	8e 30       	cpi	r24, 0x0E	; 14
    43c6:	91 05       	cpc	r25, r1
    43c8:	09 f4       	brne	.+2      	; 0x43cc <_cfg_print_status+0x56>
    43ca:	56 c0       	rjmp	.+172    	; 0x4478 <_cfg_print_status+0x102>
    43cc:	2c 81       	ldd	r18, Y+4	; 0x04
    43ce:	3d 81       	ldd	r19, Y+5	; 0x05
    43d0:	20 31       	cpi	r18, 0x10	; 16
    43d2:	31 05       	cpc	r19, r1
    43d4:	09 f4       	brne	.+2      	; 0x43d8 <_cfg_print_status+0x62>
    43d6:	64 c0       	rjmp	.+200    	; 0x44a0 <_cfg_print_status+0x12a>
    43d8:	8c 81       	ldd	r24, Y+4	; 0x04
    43da:	9d 81       	ldd	r25, Y+5	; 0x05
    43dc:	8d 30       	cpi	r24, 0x0D	; 13
    43de:	91 05       	cpc	r25, r1
    43e0:	19 f1       	breq	.+70     	; 0x4428 <_cfg_print_status+0xb2>
    43e2:	71 c0       	rjmp	.+226    	; 0x44c6 <_cfg_print_status+0x150>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_EAGAIN: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    43e4:	89 eb       	ldi	r24, 0xB9	; 185
    43e6:	95 e0       	ldi	r25, 0x05	; 5
    43e8:	00 d0       	rcall	.+0      	; 0x43ea <_cfg_print_status+0x74>
    43ea:	0f 92       	push	r0
    43ec:	ed b7       	in	r30, 0x3d	; 61
    43ee:	fe b7       	in	r31, 0x3e	; 62
    43f0:	31 96       	adiw	r30, 0x01	; 1
    43f2:	80 83       	st	Z, r24
    43f4:	91 83       	std	Z+1, r25	; 0x01
    43f6:	8a 81       	ldd	r24, Y+2	; 0x02
    43f8:	9b 81       	ldd	r25, Y+3	; 0x03
    43fa:	82 83       	std	Z+2, r24	; 0x02
    43fc:	93 83       	std	Z+3, r25	; 0x03
    43fe:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    4402:	0f 90       	pop	r0
    4404:	0f 90       	pop	r0
    4406:	0f 90       	pop	r0
    4408:	0f 90       	pop	r0
    440a:	5d c0       	rjmp	.+186    	; 0x44c6 <_cfg_print_status+0x150>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    440c:	83 ea       	ldi	r24, 0xA3	; 163
    440e:	95 e0       	ldi	r25, 0x05	; 5
    4410:	0f 92       	push	r0
    4412:	0f 92       	push	r0
    4414:	ed b7       	in	r30, 0x3d	; 61
    4416:	fe b7       	in	r31, 0x3e	; 62
    4418:	31 96       	adiw	r30, 0x01	; 1
    441a:	80 83       	st	Z, r24
    441c:	91 83       	std	Z+1, r25	; 0x01
    441e:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    4422:	0f 90       	pop	r0
    4424:	0f 90       	pop	r0
    4426:	4f c0       	rjmp	.+158    	; 0x44c6 <_cfg_print_status+0x150>
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    4428:	8c e8       	ldi	r24, 0x8C	; 140
    442a:	95 e0       	ldi	r25, 0x05	; 5
    442c:	00 d0       	rcall	.+0      	; 0x442e <_cfg_print_status+0xb8>
    442e:	0f 92       	push	r0
    4430:	ed b7       	in	r30, 0x3d	; 61
    4432:	fe b7       	in	r31, 0x3e	; 62
    4434:	31 96       	adiw	r30, 0x01	; 1
    4436:	80 83       	st	Z, r24
    4438:	91 83       	std	Z+1, r25	; 0x01
    443a:	8a 81       	ldd	r24, Y+2	; 0x02
    443c:	9b 81       	ldd	r25, Y+3	; 0x03
    443e:	82 83       	std	Z+2, r24	; 0x02
    4440:	93 83       	std	Z+3, r25	; 0x03
    4442:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    4446:	0f 90       	pop	r0
    4448:	0f 90       	pop	r0
    444a:	0f 90       	pop	r0
    444c:	0f 90       	pop	r0
    444e:	3b c0       	rjmp	.+118    	; 0x44c6 <_cfg_print_status+0x150>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    4450:	82 e7       	ldi	r24, 0x72	; 114
    4452:	95 e0       	ldi	r25, 0x05	; 5
    4454:	00 d0       	rcall	.+0      	; 0x4456 <_cfg_print_status+0xe0>
    4456:	0f 92       	push	r0
    4458:	ed b7       	in	r30, 0x3d	; 61
    445a:	fe b7       	in	r31, 0x3e	; 62
    445c:	31 96       	adiw	r30, 0x01	; 1
    445e:	80 83       	st	Z, r24
    4460:	91 83       	std	Z+1, r25	; 0x01
    4462:	8a 81       	ldd	r24, Y+2	; 0x02
    4464:	9b 81       	ldd	r25, Y+3	; 0x03
    4466:	82 83       	std	Z+2, r24	; 0x02
    4468:	93 83       	std	Z+3, r25	; 0x03
    446a:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    446e:	0f 90       	pop	r0
    4470:	0f 90       	pop	r0
    4472:	0f 90       	pop	r0
    4474:	0f 90       	pop	r0
    4476:	27 c0       	rjmp	.+78     	; 0x44c6 <_cfg_print_status+0x150>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    4478:	88 e5       	ldi	r24, 0x58	; 88
    447a:	95 e0       	ldi	r25, 0x05	; 5
    447c:	00 d0       	rcall	.+0      	; 0x447e <_cfg_print_status+0x108>
    447e:	0f 92       	push	r0
    4480:	ed b7       	in	r30, 0x3d	; 61
    4482:	fe b7       	in	r31, 0x3e	; 62
    4484:	31 96       	adiw	r30, 0x01	; 1
    4486:	80 83       	st	Z, r24
    4488:	91 83       	std	Z+1, r25	; 0x01
    448a:	8a 81       	ldd	r24, Y+2	; 0x02
    448c:	9b 81       	ldd	r25, Y+3	; 0x03
    448e:	82 83       	std	Z+2, r24	; 0x02
    4490:	93 83       	std	Z+3, r25	; 0x03
    4492:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    4496:	0f 90       	pop	r0
    4498:	0f 90       	pop	r0
    449a:	0f 90       	pop	r0
    449c:	0f 90       	pop	r0
    449e:	13 c0       	rjmp	.+38     	; 0x44c6 <_cfg_print_status+0x150>
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    44a0:	8d e3       	ldi	r24, 0x3D	; 61
    44a2:	95 e0       	ldi	r25, 0x05	; 5
    44a4:	00 d0       	rcall	.+0      	; 0x44a6 <_cfg_print_status+0x130>
    44a6:	0f 92       	push	r0
    44a8:	ed b7       	in	r30, 0x3d	; 61
    44aa:	fe b7       	in	r31, 0x3e	; 62
    44ac:	31 96       	adiw	r30, 0x01	; 1
    44ae:	80 83       	st	Z, r24
    44b0:	91 83       	std	Z+1, r25	; 0x01
    44b2:	8a 81       	ldd	r24, Y+2	; 0x02
    44b4:	9b 81       	ldd	r25, Y+3	; 0x03
    44b6:	82 83       	std	Z+2, r24	; 0x02
    44b8:	93 83       	std	Z+3, r25	; 0x03
    44ba:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    44be:	0f 90       	pop	r0
    44c0:	0f 90       	pop	r0
    44c2:	0f 90       	pop	r0
    44c4:	0f 90       	pop	r0
			break;
	}
	return;
}
    44c6:	25 96       	adiw	r28, 0x05	; 5
    44c8:	cd bf       	out	0x3d, r28	; 61
    44ca:	de bf       	out	0x3e, r29	; 62
    44cc:	cf 91       	pop	r28
    44ce:	df 91       	pop	r29
    44d0:	08 95       	ret

000044d2 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    44d2:	df 93       	push	r29
    44d4:	cf 93       	push	r28
    44d6:	cd b7       	in	r28, 0x3d	; 61
    44d8:	de b7       	in	r29, 0x3e	; 62
    44da:	e0 97       	sbiw	r28, 0x30	; 48
    44dc:	cd bf       	out	0x3d, r28	; 61
    44de:	de bf       	out	0x3e, r29	; 62
	char text[40];
	int i = 0;					// ROM buffer index (int allows for > 256 chars)
    44e0:	1f 82       	std	Y+7, r1	; 0x07
    44e2:	18 86       	std	Y+8, r1	; 0x08
	int j = 0;					// RAM buffer index (text)
    44e4:	1d 82       	std	Y+5, r1	; 0x05
    44e6:	1e 82       	std	Y+6, r1	; 0x06
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    44e8:	8f 81       	ldd	r24, Y+7	; 0x07
    44ea:	98 85       	ldd	r25, Y+8	; 0x08
    44ec:	8a 52       	subi	r24, 0x2A	; 42
    44ee:	9a 4f       	sbci	r25, 0xFA	; 250
    44f0:	8a 83       	std	Y+2, r24	; 0x02
    44f2:	9b 83       	std	Y+3, r25	; 0x03
    44f4:	8f 81       	ldd	r24, Y+7	; 0x07
    44f6:	98 85       	ldd	r25, Y+8	; 0x08
    44f8:	01 96       	adiw	r24, 0x01	; 1
    44fa:	8f 83       	std	Y+7, r24	; 0x07
    44fc:	98 87       	std	Y+8, r25	; 0x08
    44fe:	ea 81       	ldd	r30, Y+2	; 0x02
    4500:	fb 81       	ldd	r31, Y+3	; 0x03
    4502:	84 91       	lpm	r24, Z+
    4504:	89 83       	std	Y+1, r24	; 0x01
    4506:	89 81       	ldd	r24, Y+1	; 0x01
    4508:	8c 83       	std	Y+4, r24	; 0x04
		if (c == 0) {									// last line
    450a:	8c 81       	ldd	r24, Y+4	; 0x04
    450c:	88 23       	and	r24, r24
    450e:	91 f4       	brne	.+36     	; 0x4534 <cfg_test+0x62>
			text[j] = 0;
    4510:	2d 81       	ldd	r18, Y+5	; 0x05
    4512:	3e 81       	ldd	r19, Y+6	; 0x06
    4514:	ce 01       	movw	r24, r28
    4516:	09 96       	adiw	r24, 0x09	; 9
    4518:	fc 01       	movw	r30, r24
    451a:	e2 0f       	add	r30, r18
    451c:	f3 1f       	adc	r31, r19
    451e:	10 82       	st	Z, r1
			cfg_parse(text);
    4520:	ce 01       	movw	r24, r28
    4522:	09 96       	adiw	r24, 0x09	; 9
    4524:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    4528:	e0 96       	adiw	r28, 0x30	; 48
    452a:	cd bf       	out	0x3d, r28	; 61
    452c:	de bf       	out	0x3e, r29	; 62
    452e:	cf 91       	pop	r28
    4530:	df 91       	pop	r29
    4532:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    4534:	8c 81       	ldd	r24, Y+4	; 0x04
    4536:	8d 30       	cpi	r24, 0x0D	; 13
    4538:	31 f0       	breq	.+12     	; 0x4546 <cfg_test+0x74>
    453a:	8c 81       	ldd	r24, Y+4	; 0x04
    453c:	8a 30       	cpi	r24, 0x0A	; 10
    453e:	19 f0       	breq	.+6      	; 0x4546 <cfg_test+0x74>
    4540:	8c 81       	ldd	r24, Y+4	; 0x04
    4542:	8b 33       	cpi	r24, 0x3B	; 59
    4544:	79 f4       	brne	.+30     	; 0x4564 <cfg_test+0x92>
			text[j] = 0;							// terminate the string
    4546:	2d 81       	ldd	r18, Y+5	; 0x05
    4548:	3e 81       	ldd	r19, Y+6	; 0x06
    454a:	ce 01       	movw	r24, r28
    454c:	09 96       	adiw	r24, 0x09	; 9
    454e:	fc 01       	movw	r30, r24
    4550:	e2 0f       	add	r30, r18
    4552:	f3 1f       	adc	r31, r19
    4554:	10 82       	st	Z, r1
			cfg_parse(text);						// parse line 
    4556:	ce 01       	movw	r24, r28
    4558:	09 96       	adiw	r24, 0x09	; 9
    455a:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <cfg_parse>
			j = 0;			
    455e:	1d 82       	std	Y+5, r1	; 0x05
    4560:	1e 82       	std	Y+6, r1	; 0x06
    4562:	c2 cf       	rjmp	.-124    	; 0x44e8 <cfg_test+0x16>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    4564:	8c 81       	ldd	r24, Y+4	; 0x04
    4566:	81 32       	cpi	r24, 0x21	; 33
    4568:	08 f4       	brcc	.+2      	; 0x456c <cfg_test+0x9a>
    456a:	be cf       	rjmp	.-132    	; 0x44e8 <cfg_test+0x16>
		} else {
			text[j++] = c;							// put characters into line
    456c:	2d 81       	ldd	r18, Y+5	; 0x05
    456e:	3e 81       	ldd	r19, Y+6	; 0x06
    4570:	ce 01       	movw	r24, r28
    4572:	09 96       	adiw	r24, 0x09	; 9
    4574:	fc 01       	movw	r30, r24
    4576:	e2 0f       	add	r30, r18
    4578:	f3 1f       	adc	r31, r19
    457a:	8c 81       	ldd	r24, Y+4	; 0x04
    457c:	80 83       	st	Z, r24
    457e:	8d 81       	ldd	r24, Y+5	; 0x05
    4580:	9e 81       	ldd	r25, Y+6	; 0x06
    4582:	01 96       	adiw	r24, 0x01	; 1
    4584:	8d 83       	std	Y+5, r24	; 0x05
    4586:	9e 83       	std	Y+6, r25	; 0x06
    4588:	af cf       	rjmp	.-162    	; 0x44e8 <cfg_test+0x16>

0000458a <en_init>:
#include "encoder.h"
#include "hardware.h"


void en_init(void) 
{
    458a:	df 93       	push	r29
    458c:	cf 93       	push	r28
    458e:	cd b7       	in	r28, 0x3d	; 61
    4590:	de b7       	in	r29, 0x3e	; 62
	return;
}
    4592:	cf 91       	pop	r28
    4594:	df 91       	pop	r29
    4596:	08 95       	ret

00004598 <en_write>:
 * This is a hack to hide the fact that we've scattered the encode output
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
    4598:	df 93       	push	r29
    459a:	cf 93       	push	r28
    459c:	0f 92       	push	r0
    459e:	cd b7       	in	r28, 0x3d	; 61
    45a0:	de b7       	in	r29, 0x3e	; 62
    45a2:	89 83       	std	Y+1, r24	; 0x01
	if (b && 0x01) { 								// b0 is on A axis
    45a4:	89 81       	ldd	r24, Y+1	; 0x01
    45a6:	88 23       	and	r24, r24
    45a8:	39 f0       	breq	.+14     	; 0x45b8 <en_write+0x20>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    45aa:	e0 91 76 24 	lds	r30, 0x2476
    45ae:	f0 91 77 24 	lds	r31, 0x2477
    45b2:	80 e2       	ldi	r24, 0x20	; 32
    45b4:	85 83       	std	Z+5, r24	; 0x05
    45b6:	06 c0       	rjmp	.+12     	; 0x45c4 <en_write+0x2c>
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    45b8:	e0 91 76 24 	lds	r30, 0x2476
    45bc:	f0 91 77 24 	lds	r31, 0x2477
    45c0:	80 e2       	ldi	r24, 0x20	; 32
    45c2:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
    45c4:	89 81       	ldd	r24, Y+1	; 0x01
    45c6:	88 23       	and	r24, r24
    45c8:	39 f0       	breq	.+14     	; 0x45d8 <en_write+0x40>
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    45ca:	e0 91 66 24 	lds	r30, 0x2466
    45ce:	f0 91 67 24 	lds	r31, 0x2467
    45d2:	80 e2       	ldi	r24, 0x20	; 32
    45d4:	85 83       	std	Z+5, r24	; 0x05
    45d6:	06 c0       	rjmp	.+12     	; 0x45e4 <en_write+0x4c>
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    45d8:	e0 91 66 24 	lds	r30, 0x2466
    45dc:	f0 91 67 24 	lds	r31, 0x2467
    45e0:	80 e2       	ldi	r24, 0x20	; 32
    45e2:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
    45e4:	89 81       	ldd	r24, Y+1	; 0x01
    45e6:	88 23       	and	r24, r24
    45e8:	39 f0       	breq	.+14     	; 0x45f8 <en_write+0x60>
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    45ea:	e0 91 56 24 	lds	r30, 0x2456
    45ee:	f0 91 57 24 	lds	r31, 0x2457
    45f2:	80 e2       	ldi	r24, 0x20	; 32
    45f4:	85 83       	std	Z+5, r24	; 0x05
    45f6:	06 c0       	rjmp	.+12     	; 0x4604 <en_write+0x6c>
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    45f8:	e0 91 56 24 	lds	r30, 0x2456
    45fc:	f0 91 57 24 	lds	r31, 0x2457
    4600:	80 e2       	ldi	r24, 0x20	; 32
    4602:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
    4604:	89 81       	ldd	r24, Y+1	; 0x01
    4606:	88 23       	and	r24, r24
    4608:	39 f0       	breq	.+14     	; 0x4618 <en_write+0x80>
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    460a:	e0 91 46 24 	lds	r30, 0x2446
    460e:	f0 91 47 24 	lds	r31, 0x2447
    4612:	80 e2       	ldi	r24, 0x20	; 32
    4614:	85 83       	std	Z+5, r24	; 0x05
    4616:	06 c0       	rjmp	.+12     	; 0x4624 <en_write+0x8c>
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    4618:	e0 91 46 24 	lds	r30, 0x2446
    461c:	f0 91 47 24 	lds	r31, 0x2447
    4620:	80 e2       	ldi	r24, 0x20	; 32
    4622:	86 83       	std	Z+6, r24	; 0x06
	}
}
    4624:	0f 90       	pop	r0
    4626:	cf 91       	pop	r28
    4628:	df 91       	pop	r29
    462a:	08 95       	ret

0000462c <xmega_init>:

/*
 * xmega_init()
 */

void xmega_init(void) {
    462c:	df 93       	push	r29
    462e:	cf 93       	push	r28
    4630:	cd b7       	in	r28, 0x3d	; 61
    4632:	de b7       	in	r29, 0x3e	; 62
	xmega_init_clocks();
    4634:	0e 94 1f 23 	call	0x463e	; 0x463e <xmega_init_clocks>
}
    4638:	cf 91       	pop	r28
    463a:	df 91       	pop	r29
    463c:	08 95       	ret

0000463e <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    463e:	df 93       	push	r29
    4640:	cf 93       	push	r28
    4642:	cd b7       	in	r28, 0x3d	; 61
    4644:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    4646:	e0 e5       	ldi	r30, 0x50	; 80
    4648:	f0 e0       	ldi	r31, 0x00	; 0
    464a:	8b ec       	ldi	r24, 0xCB	; 203
    464c:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    464e:	e0 e5       	ldi	r30, 0x50	; 80
    4650:	f0 e0       	ldi	r31, 0x00	; 0
    4652:	88 e0       	ldi	r24, 0x08	; 8
    4654:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    4656:	e0 e5       	ldi	r30, 0x50	; 80
    4658:	f0 e0       	ldi	r31, 0x00	; 0
    465a:	81 81       	ldd	r24, Z+1	; 0x01
    465c:	88 2f       	mov	r24, r24
    465e:	90 e0       	ldi	r25, 0x00	; 0
    4660:	88 70       	andi	r24, 0x08	; 8
    4662:	90 70       	andi	r25, 0x00	; 0
    4664:	00 97       	sbiw	r24, 0x00	; 0
    4666:	b9 f3       	breq	.-18     	; 0x4656 <xmega_init_clocks+0x18>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    4668:	e0 e5       	ldi	r30, 0x50	; 80
    466a:	f0 e0       	ldi	r31, 0x00	; 0
    466c:	82 ec       	ldi	r24, 0xC2	; 194
    466e:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    4670:	e0 e5       	ldi	r30, 0x50	; 80
    4672:	f0 e0       	ldi	r31, 0x00	; 0
    4674:	88 e1       	ldi	r24, 0x18	; 24
    4676:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    4678:	e0 e5       	ldi	r30, 0x50	; 80
    467a:	f0 e0       	ldi	r31, 0x00	; 0
    467c:	81 81       	ldd	r24, Z+1	; 0x01
    467e:	88 2f       	mov	r24, r24
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	80 71       	andi	r24, 0x10	; 16
    4684:	90 70       	andi	r25, 0x00	; 0
    4686:	00 97       	sbiw	r24, 0x00	; 0
    4688:	b9 f3       	breq	.-18     	; 0x4678 <xmega_init_clocks+0x3a>
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
    468a:	80 e4       	ldi	r24, 0x40	; 64
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	64 e0       	ldi	r22, 0x04	; 4
    4690:	0e 94 54 23 	call	0x46a8	; 0x46a8 <CCPWrite>
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    4694:	a0 e5       	ldi	r26, 0x50	; 80
    4696:	b0 e0       	ldi	r27, 0x00	; 0
    4698:	e0 e5       	ldi	r30, 0x50	; 80
    469a:	f0 e0       	ldi	r31, 0x00	; 0
    469c:	80 81       	ld	r24, Z
    469e:	8e 7f       	andi	r24, 0xFE	; 254
    46a0:	8c 93       	st	X, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    46a2:	cf 91       	pop	r28
    46a4:	df 91       	pop	r29
    46a6:	08 95       	ret

000046a8 <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    46a8:	0f 93       	push	r16
    46aa:	df 93       	push	r29
    46ac:	cf 93       	push	r28
    46ae:	00 d0       	rcall	.+0      	; 0x46b0 <CCPWrite+0x8>
    46b0:	00 d0       	rcall	.+0      	; 0x46b2 <CCPWrite+0xa>
    46b2:	cd b7       	in	r28, 0x3d	; 61
    46b4:	de b7       	in	r29, 0x3e	; 62
    46b6:	8c 83       	std	Y+4, r24	; 0x04
    46b8:	9d 83       	std	Y+5, r25	; 0x05
    46ba:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    46bc:	ef e3       	ldi	r30, 0x3F	; 63
    46be:	f0 e0       	ldi	r31, 0x00	; 0
    46c0:	80 81       	ld	r24, Z
    46c2:	8b 83       	std	Y+3, r24	; 0x03
    46c4:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
    46c6:	8c 81       	ldd	r24, Y+4	; 0x04
    46c8:	9d 81       	ldd	r25, Y+5	; 0x05
    46ca:	89 83       	std	Y+1, r24	; 0x01
    46cc:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
    46ce:	eb e3       	ldi	r30, 0x3B	; 59
    46d0:	f0 e0       	ldi	r31, 0x00	; 0
    46d2:	10 82       	st	Z, r1
#endif
	asm volatile(
    46d4:	89 81       	ldd	r24, Y+1	; 0x01
    46d6:	9a 81       	ldd	r25, Y+2	; 0x02
    46d8:	2e 81       	ldd	r18, Y+6	; 0x06
    46da:	fc 01       	movw	r30, r24
    46dc:	08 ed       	ldi	r16, 0xD8	; 216
    46de:	04 bf       	out	0x34, r16	; 52
    46e0:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    46e2:	ef e3       	ldi	r30, 0x3F	; 63
    46e4:	f0 e0       	ldi	r31, 0x00	; 0
    46e6:	8b 81       	ldd	r24, Y+3	; 0x03
    46e8:	80 83       	st	Z, r24
#endif
}
    46ea:	26 96       	adiw	r28, 0x06	; 6
    46ec:	cd bf       	out	0x3d, r28	; 61
    46ee:	de bf       	out	0x3e, r29	; 62
    46f0:	cf 91       	pop	r28
    46f2:	df 91       	pop	r29
    46f4:	0f 91       	pop	r16
    46f6:	08 95       	ret

000046f8 <mc_init>:
/* 
 * mc_init() 
 */

void mc_init()
{
    46f8:	df 93       	push	r29
    46fa:	cf 93       	push	r28
    46fc:	cd b7       	in	r28, 0x3d	; 61
    46fe:	de b7       	in	r29, 0x3e	; 62
	clear_vector(mc.position);		// zero robot position
    4700:	85 e8       	ldi	r24, 0x85	; 133
    4702:	91 e2       	ldi	r25, 0x21	; 33
    4704:	60 e0       	ldi	r22, 0x00	; 0
    4706:	70 e0       	ldi	r23, 0x00	; 0
    4708:	4c e0       	ldi	r20, 0x0C	; 12
    470a:	50 e0       	ldi	r21, 0x00	; 0
    470c:	0e 94 e1 61 	call	0xc3c2	; 0xc3c2 <memset>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    4710:	10 92 84 21 	sts	0x2184, r1
	ma.arc_state = MC_STATE_OFF;
    4714:	10 92 ea 24 	sts	0x24EA, r1
}
    4718:	cf 91       	pop	r28
    471a:	df 91       	pop	r29
    471c:	08 95       	ret

0000471e <mc_motion_stop>:
/* 
 * mc_motion_stop() - stop all current motions
 */

int mc_motion_stop()
{
    471e:	df 93       	push	r29
    4720:	cf 93       	push	r28
    4722:	cd b7       	in	r28, 0x3d	; 61
    4724:	de b7       	in	r29, 0x3e	; 62
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    4726:	10 92 84 21 	sts	0x2184, r1
	ma.arc_state = MC_STATE_OFF;
    472a:	10 92 ea 24 	sts	0x24EA, r1
	return (TG_OK);
    472e:	80 e0       	ldi	r24, 0x00	; 0
    4730:	90 e0       	ldi	r25, 0x00	; 0
}
    4732:	cf 91       	pop	r28
    4734:	df 91       	pop	r29
    4736:	08 95       	ret

00004738 <mc_line_blocking>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line_blocking(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    4738:	8f 92       	push	r8
    473a:	9f 92       	push	r9
    473c:	af 92       	push	r10
    473e:	bf 92       	push	r11
    4740:	cf 92       	push	r12
    4742:	df 92       	push	r13
    4744:	ef 92       	push	r14
    4746:	ff 92       	push	r15
    4748:	0f 93       	push	r16
    474a:	1f 93       	push	r17
    474c:	df 93       	push	r29
    474e:	cf 93       	push	r28
    4750:	cd b7       	in	r28, 0x3d	; 61
    4752:	de b7       	in	r29, 0x3e	; 62
    4754:	62 97       	sbiw	r28, 0x12	; 18
    4756:	cd bf       	out	0x3d, r28	; 61
    4758:	de bf       	out	0x3e, r29	; 62
    475a:	69 83       	std	Y+1, r22	; 0x01
    475c:	7a 83       	std	Y+2, r23	; 0x02
    475e:	8b 83       	std	Y+3, r24	; 0x03
    4760:	9c 83       	std	Y+4, r25	; 0x04
    4762:	2d 83       	std	Y+5, r18	; 0x05
    4764:	3e 83       	std	Y+6, r19	; 0x06
    4766:	4f 83       	std	Y+7, r20	; 0x07
    4768:	58 87       	std	Y+8, r21	; 0x08
    476a:	e9 86       	std	Y+9, r14	; 0x09
    476c:	fa 86       	std	Y+10, r15	; 0x0a
    476e:	0b 87       	std	Y+11, r16	; 0x0b
    4770:	1c 87       	std	Y+12, r17	; 0x0c
    4772:	ad 86       	std	Y+13, r10	; 0x0d
    4774:	be 86       	std	Y+14, r11	; 0x0e
    4776:	cf 86       	std	Y+15, r12	; 0x0f
    4778:	d8 8a       	std	Y+16, r13	; 0x10
    477a:	89 8a       	std	Y+17, r8	; 0x11
    477c:	9a 8a       	std	Y+18, r9	; 0x12
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    477e:	80 91 9b 24 	lds	r24, 0x249B
    4782:	90 91 9c 24 	lds	r25, 0x249C
    4786:	a0 91 9d 24 	lds	r26, 0x249D
    478a:	b0 91 9e 24 	lds	r27, 0x249E
    478e:	bc 01       	movw	r22, r24
    4790:	cd 01       	movw	r24, r26
    4792:	29 81       	ldd	r18, Y+1	; 0x01
    4794:	3a 81       	ldd	r19, Y+2	; 0x02
    4796:	4b 81       	ldd	r20, Y+3	; 0x03
    4798:	5c 81       	ldd	r21, Y+4	; 0x04
    479a:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    479e:	dc 01       	movw	r26, r24
    47a0:	cb 01       	movw	r24, r22
    47a2:	bc 01       	movw	r22, r24
    47a4:	cd 01       	movw	r24, r26
    47a6:	0e 94 d0 5d 	call	0xbba0	; 0xbba0 <lround>
    47aa:	dc 01       	movw	r26, r24
    47ac:	cb 01       	movw	r24, r22
    47ae:	80 93 91 21 	sts	0x2191, r24
    47b2:	90 93 92 21 	sts	0x2192, r25
    47b6:	a0 93 93 21 	sts	0x2193, r26
    47ba:	b0 93 94 21 	sts	0x2194, r27
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    47be:	80 91 b3 24 	lds	r24, 0x24B3
    47c2:	90 91 b4 24 	lds	r25, 0x24B4
    47c6:	a0 91 b5 24 	lds	r26, 0x24B5
    47ca:	b0 91 b6 24 	lds	r27, 0x24B6
    47ce:	bc 01       	movw	r22, r24
    47d0:	cd 01       	movw	r24, r26
    47d2:	2d 81       	ldd	r18, Y+5	; 0x05
    47d4:	3e 81       	ldd	r19, Y+6	; 0x06
    47d6:	4f 81       	ldd	r20, Y+7	; 0x07
    47d8:	58 85       	ldd	r21, Y+8	; 0x08
    47da:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    47de:	dc 01       	movw	r26, r24
    47e0:	cb 01       	movw	r24, r22
    47e2:	bc 01       	movw	r22, r24
    47e4:	cd 01       	movw	r24, r26
    47e6:	0e 94 d0 5d 	call	0xbba0	; 0xbba0 <lround>
    47ea:	dc 01       	movw	r26, r24
    47ec:	cb 01       	movw	r24, r22
    47ee:	80 93 95 21 	sts	0x2195, r24
    47f2:	90 93 96 21 	sts	0x2196, r25
    47f6:	a0 93 97 21 	sts	0x2197, r26
    47fa:	b0 93 98 21 	sts	0x2198, r27
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    47fe:	80 91 cb 24 	lds	r24, 0x24CB
    4802:	90 91 cc 24 	lds	r25, 0x24CC
    4806:	a0 91 cd 24 	lds	r26, 0x24CD
    480a:	b0 91 ce 24 	lds	r27, 0x24CE
    480e:	bc 01       	movw	r22, r24
    4810:	cd 01       	movw	r24, r26
    4812:	29 85       	ldd	r18, Y+9	; 0x09
    4814:	3a 85       	ldd	r19, Y+10	; 0x0a
    4816:	4b 85       	ldd	r20, Y+11	; 0x0b
    4818:	5c 85       	ldd	r21, Y+12	; 0x0c
    481a:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    481e:	dc 01       	movw	r26, r24
    4820:	cb 01       	movw	r24, r22
    4822:	bc 01       	movw	r22, r24
    4824:	cd 01       	movw	r24, r26
    4826:	0e 94 d0 5d 	call	0xbba0	; 0xbba0 <lround>
    482a:	dc 01       	movw	r26, r24
    482c:	cb 01       	movw	r24, r22
    482e:	80 93 99 21 	sts	0x2199, r24
    4832:	90 93 9a 21 	sts	0x219A, r25
    4836:	a0 93 9b 21 	sts	0x219B, r26
    483a:	b0 93 9c 21 	sts	0x219C, r27

	mc.steps[X] = mc.target[X]-mc.position[X];
    483e:	20 91 91 21 	lds	r18, 0x2191
    4842:	30 91 92 21 	lds	r19, 0x2192
    4846:	40 91 93 21 	lds	r20, 0x2193
    484a:	50 91 94 21 	lds	r21, 0x2194
    484e:	80 91 85 21 	lds	r24, 0x2185
    4852:	90 91 86 21 	lds	r25, 0x2186
    4856:	a0 91 87 21 	lds	r26, 0x2187
    485a:	b0 91 88 21 	lds	r27, 0x2188
    485e:	79 01       	movw	r14, r18
    4860:	8a 01       	movw	r16, r20
    4862:	e8 1a       	sub	r14, r24
    4864:	f9 0a       	sbc	r15, r25
    4866:	0a 0b       	sbc	r16, r26
    4868:	1b 0b       	sbc	r17, r27
    486a:	d8 01       	movw	r26, r16
    486c:	c7 01       	movw	r24, r14
    486e:	80 93 9d 21 	sts	0x219D, r24
    4872:	90 93 9e 21 	sts	0x219E, r25
    4876:	a0 93 9f 21 	sts	0x219F, r26
    487a:	b0 93 a0 21 	sts	0x21A0, r27
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    487e:	20 91 95 21 	lds	r18, 0x2195
    4882:	30 91 96 21 	lds	r19, 0x2196
    4886:	40 91 97 21 	lds	r20, 0x2197
    488a:	50 91 98 21 	lds	r21, 0x2198
    488e:	80 91 89 21 	lds	r24, 0x2189
    4892:	90 91 8a 21 	lds	r25, 0x218A
    4896:	a0 91 8b 21 	lds	r26, 0x218B
    489a:	b0 91 8c 21 	lds	r27, 0x218C
    489e:	79 01       	movw	r14, r18
    48a0:	8a 01       	movw	r16, r20
    48a2:	e8 1a       	sub	r14, r24
    48a4:	f9 0a       	sbc	r15, r25
    48a6:	0a 0b       	sbc	r16, r26
    48a8:	1b 0b       	sbc	r17, r27
    48aa:	d8 01       	movw	r26, r16
    48ac:	c7 01       	movw	r24, r14
    48ae:	80 93 a1 21 	sts	0x21A1, r24
    48b2:	90 93 a2 21 	sts	0x21A2, r25
    48b6:	a0 93 a3 21 	sts	0x21A3, r26
    48ba:	b0 93 a4 21 	sts	0x21A4, r27
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    48be:	20 91 99 21 	lds	r18, 0x2199
    48c2:	30 91 9a 21 	lds	r19, 0x219A
    48c6:	40 91 9b 21 	lds	r20, 0x219B
    48ca:	50 91 9c 21 	lds	r21, 0x219C
    48ce:	80 91 8d 21 	lds	r24, 0x218D
    48d2:	90 91 8e 21 	lds	r25, 0x218E
    48d6:	a0 91 8f 21 	lds	r26, 0x218F
    48da:	b0 91 90 21 	lds	r27, 0x2190
    48de:	79 01       	movw	r14, r18
    48e0:	8a 01       	movw	r16, r20
    48e2:	e8 1a       	sub	r14, r24
    48e4:	f9 0a       	sbc	r15, r25
    48e6:	0a 0b       	sbc	r16, r26
    48e8:	1b 0b       	sbc	r17, r27
    48ea:	d8 01       	movw	r26, r16
    48ec:	c7 01       	movw	r24, r14
    48ee:	80 93 a5 21 	sts	0x21A5, r24
    48f2:	90 93 a6 21 	sts	0x21A6, r25
    48f6:	a0 93 a7 21 	sts	0x21A7, r26
    48fa:	b0 93 a8 21 	sts	0x21A8, r27

	if (invert_feed_rate) {
    48fe:	89 89       	ldd	r24, Y+17	; 0x11
    4900:	9a 89       	ldd	r25, Y+18	; 0x12
    4902:	00 97       	sbiw	r24, 0x00	; 0
    4904:	d9 f0       	breq	.+54     	; 0x493c <mc_line_blocking+0x204>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    4906:	60 ec       	ldi	r22, 0xC0	; 192
    4908:	71 ee       	ldi	r23, 0xE1	; 225
    490a:	84 e6       	ldi	r24, 0x64	; 100
    490c:	9c e4       	ldi	r25, 0x4C	; 76
    490e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4910:	3e 85       	ldd	r19, Y+14	; 0x0e
    4912:	4f 85       	ldd	r20, Y+15	; 0x0f
    4914:	58 89       	ldd	r21, Y+16	; 0x10
    4916:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    491a:	dc 01       	movw	r26, r24
    491c:	cb 01       	movw	r24, r22
    491e:	bc 01       	movw	r22, r24
    4920:	cd 01       	movw	r24, r26
    4922:	0e 94 d0 5d 	call	0xbba0	; 0xbba0 <lround>
    4926:	dc 01       	movw	r26, r24
    4928:	cb 01       	movw	r24, r22
    492a:	80 93 a9 21 	sts	0x21A9, r24
    492e:	90 93 aa 21 	sts	0x21AA, r25
    4932:	a0 93 ab 21 	sts	0x21AB, r26
    4936:	b0 93 ac 21 	sts	0x21AC, r27
    493a:	ac c0       	rjmp	.+344    	; 0x4a94 <mc_line_blocking+0x35c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    493c:	80 91 9d 21 	lds	r24, 0x219D
    4940:	90 91 9e 21 	lds	r25, 0x219E
    4944:	a0 91 9f 21 	lds	r26, 0x219F
    4948:	b0 91 a0 21 	lds	r27, 0x21A0
    494c:	bc 01       	movw	r22, r24
    494e:	cd 01       	movw	r24, r26
    4950:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    4954:	dc 01       	movw	r26, r24
    4956:	cb 01       	movw	r24, r22
    4958:	20 91 9b 24 	lds	r18, 0x249B
    495c:	30 91 9c 24 	lds	r19, 0x249C
    4960:	40 91 9d 24 	lds	r20, 0x249D
    4964:	50 91 9e 24 	lds	r21, 0x249E
    4968:	bc 01       	movw	r22, r24
    496a:	cd 01       	movw	r24, r26
    496c:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    4970:	dc 01       	movw	r26, r24
    4972:	cb 01       	movw	r24, r22
    4974:	bc 01       	movw	r22, r24
    4976:	cd 01       	movw	r24, r26
    4978:	0e 94 ab 5e 	call	0xbd56	; 0xbd56 <square>
    497c:	7b 01       	movw	r14, r22
    497e:	8c 01       	movw	r16, r24
    4980:	80 91 a1 21 	lds	r24, 0x21A1
    4984:	90 91 a2 21 	lds	r25, 0x21A2
    4988:	a0 91 a3 21 	lds	r26, 0x21A3
    498c:	b0 91 a4 21 	lds	r27, 0x21A4
    4990:	bc 01       	movw	r22, r24
    4992:	cd 01       	movw	r24, r26
    4994:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    4998:	dc 01       	movw	r26, r24
    499a:	cb 01       	movw	r24, r22
    499c:	20 91 b3 24 	lds	r18, 0x24B3
    49a0:	30 91 b4 24 	lds	r19, 0x24B4
    49a4:	40 91 b5 24 	lds	r20, 0x24B5
    49a8:	50 91 b6 24 	lds	r21, 0x24B6
    49ac:	bc 01       	movw	r22, r24
    49ae:	cd 01       	movw	r24, r26
    49b0:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    49b4:	dc 01       	movw	r26, r24
    49b6:	cb 01       	movw	r24, r22
    49b8:	bc 01       	movw	r22, r24
    49ba:	cd 01       	movw	r24, r26
    49bc:	0e 94 ab 5e 	call	0xbd56	; 0xbd56 <square>
    49c0:	9b 01       	movw	r18, r22
    49c2:	ac 01       	movw	r20, r24
    49c4:	c8 01       	movw	r24, r16
    49c6:	b7 01       	movw	r22, r14
    49c8:	0e 94 9f 5a 	call	0xb53e	; 0xb53e <__addsf3>
    49cc:	dc 01       	movw	r26, r24
    49ce:	cb 01       	movw	r24, r22
    49d0:	7c 01       	movw	r14, r24
    49d2:	8d 01       	movw	r16, r26
    49d4:	80 91 a5 21 	lds	r24, 0x21A5
    49d8:	90 91 a6 21 	lds	r25, 0x21A6
    49dc:	a0 91 a7 21 	lds	r26, 0x21A7
    49e0:	b0 91 a8 21 	lds	r27, 0x21A8
    49e4:	bc 01       	movw	r22, r24
    49e6:	cd 01       	movw	r24, r26
    49e8:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    49ec:	dc 01       	movw	r26, r24
    49ee:	cb 01       	movw	r24, r22
    49f0:	20 91 cb 24 	lds	r18, 0x24CB
    49f4:	30 91 cc 24 	lds	r19, 0x24CC
    49f8:	40 91 cd 24 	lds	r20, 0x24CD
    49fc:	50 91 ce 24 	lds	r21, 0x24CE
    4a00:	bc 01       	movw	r22, r24
    4a02:	cd 01       	movw	r24, r26
    4a04:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    4a08:	dc 01       	movw	r26, r24
    4a0a:	cb 01       	movw	r24, r22
    4a0c:	bc 01       	movw	r22, r24
    4a0e:	cd 01       	movw	r24, r26
    4a10:	0e 94 ab 5e 	call	0xbd56	; 0xbd56 <square>
    4a14:	9b 01       	movw	r18, r22
    4a16:	ac 01       	movw	r20, r24
    4a18:	c8 01       	movw	r24, r16
    4a1a:	b7 01       	movw	r22, r14
    4a1c:	0e 94 9f 5a 	call	0xb53e	; 0xb53e <__addsf3>
    4a20:	dc 01       	movw	r26, r24
    4a22:	cb 01       	movw	r24, r22
    4a24:	bc 01       	movw	r22, r24
    4a26:	cd 01       	movw	r24, r26
    4a28:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <sqrt>
    4a2c:	dc 01       	movw	r26, r24
    4a2e:	cb 01       	movw	r24, r22
    4a30:	80 93 ad 21 	sts	0x21AD, r24
    4a34:	90 93 ae 21 	sts	0x21AE, r25
    4a38:	a0 93 af 21 	sts	0x21AF, r26
    4a3c:	b0 93 b0 21 	sts	0x21B0, r27
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    4a40:	80 91 ad 21 	lds	r24, 0x21AD
    4a44:	90 91 ae 21 	lds	r25, 0x21AE
    4a48:	a0 91 af 21 	lds	r26, 0x21AF
    4a4c:	b0 91 b0 21 	lds	r27, 0x21B0
    4a50:	bc 01       	movw	r22, r24
    4a52:	cd 01       	movw	r24, r26
    4a54:	2d 85       	ldd	r18, Y+13	; 0x0d
    4a56:	3e 85       	ldd	r19, Y+14	; 0x0e
    4a58:	4f 85       	ldd	r20, Y+15	; 0x0f
    4a5a:	58 89       	ldd	r21, Y+16	; 0x10
    4a5c:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    4a60:	dc 01       	movw	r26, r24
    4a62:	cb 01       	movw	r24, r22
    4a64:	bc 01       	movw	r22, r24
    4a66:	cd 01       	movw	r24, r26
    4a68:	20 e0       	ldi	r18, 0x00	; 0
    4a6a:	34 e2       	ldi	r19, 0x24	; 36
    4a6c:	44 e7       	ldi	r20, 0x74	; 116
    4a6e:	59 e4       	ldi	r21, 0x49	; 73
    4a70:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    4a74:	dc 01       	movw	r26, r24
    4a76:	cb 01       	movw	r24, r22
    4a78:	bc 01       	movw	r22, r24
    4a7a:	cd 01       	movw	r24, r26
    4a7c:	0e 94 d0 5d 	call	0xbba0	; 0xbba0 <lround>
    4a80:	dc 01       	movw	r26, r24
    4a82:	cb 01       	movw	r24, r22
    4a84:	80 93 a9 21 	sts	0x21A9, r24
    4a88:	90 93 aa 21 	sts	0x21AA, r25
    4a8c:	a0 93 ab 21 	sts	0x21AB, r26
    4a90:	b0 93 ac 21 	sts	0x21AC, r27
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    4a94:	80 91 9d 21 	lds	r24, 0x219D
    4a98:	90 91 9e 21 	lds	r25, 0x219E
    4a9c:	a0 91 9f 21 	lds	r26, 0x219F
    4aa0:	b0 91 a0 21 	lds	r27, 0x21A0
    4aa4:	20 91 a1 21 	lds	r18, 0x21A1
    4aa8:	30 91 a2 21 	lds	r19, 0x21A2
    4aac:	40 91 a3 21 	lds	r20, 0x21A3
    4ab0:	50 91 a4 21 	lds	r21, 0x21A4
    4ab4:	e0 90 a5 21 	lds	r14, 0x21A5
    4ab8:	f0 90 a6 21 	lds	r15, 0x21A6
    4abc:	00 91 a7 21 	lds	r16, 0x21A7
    4ac0:	10 91 a8 21 	lds	r17, 0x21A8
    4ac4:	a0 90 a9 21 	lds	r10, 0x21A9
    4ac8:	b0 90 aa 21 	lds	r11, 0x21AA
    4acc:	c0 90 ab 21 	lds	r12, 0x21AB
    4ad0:	d0 90 ac 21 	lds	r13, 0x21AC
    4ad4:	bc 01       	movw	r22, r24
    4ad6:	cd 01       	movw	r24, r26
    4ad8:	0e 94 b4 44 	call	0x8968	; 0x8968 <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    4adc:	85 e8       	ldi	r24, 0x85	; 133
    4ade:	91 e2       	ldi	r25, 0x21	; 33
    4ae0:	21 e9       	ldi	r18, 0x91	; 145
    4ae2:	31 e2       	ldi	r19, 0x21	; 33
    4ae4:	b9 01       	movw	r22, r18
    4ae6:	4c e0       	ldi	r20, 0x0C	; 12
    4ae8:	50 e0       	ldi	r21, 0x00	; 0
    4aea:	0e 94 d8 61 	call	0xc3b0	; 0xc3b0 <memcpy>
	return (TG_OK);
    4aee:	80 e0       	ldi	r24, 0x00	; 0
    4af0:	90 e0       	ldi	r25, 0x00	; 0
}
    4af2:	62 96       	adiw	r28, 0x12	; 18
    4af4:	cd bf       	out	0x3d, r28	; 61
    4af6:	de bf       	out	0x3e, r29	; 62
    4af8:	cf 91       	pop	r28
    4afa:	df 91       	pop	r29
    4afc:	1f 91       	pop	r17
    4afe:	0f 91       	pop	r16
    4b00:	ff 90       	pop	r15
    4b02:	ef 90       	pop	r14
    4b04:	df 90       	pop	r13
    4b06:	cf 90       	pop	r12
    4b08:	bf 90       	pop	r11
    4b0a:	af 90       	pop	r10
    4b0c:	9f 90       	pop	r9
    4b0e:	8f 90       	pop	r8
    4b10:	08 95       	ret

00004b12 <mc_line>:
/* 
 * mc_line() - queue a line move; non-blocking version
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    4b12:	8f 92       	push	r8
    4b14:	9f 92       	push	r9
    4b16:	af 92       	push	r10
    4b18:	bf 92       	push	r11
    4b1a:	cf 92       	push	r12
    4b1c:	df 92       	push	r13
    4b1e:	ef 92       	push	r14
    4b20:	ff 92       	push	r15
    4b22:	0f 93       	push	r16
    4b24:	1f 93       	push	r17
    4b26:	df 93       	push	r29
    4b28:	cf 93       	push	r28
    4b2a:	cd b7       	in	r28, 0x3d	; 61
    4b2c:	de b7       	in	r29, 0x3e	; 62
    4b2e:	62 97       	sbiw	r28, 0x12	; 18
    4b30:	cd bf       	out	0x3d, r28	; 61
    4b32:	de bf       	out	0x3e, r29	; 62
    4b34:	69 83       	std	Y+1, r22	; 0x01
    4b36:	7a 83       	std	Y+2, r23	; 0x02
    4b38:	8b 83       	std	Y+3, r24	; 0x03
    4b3a:	9c 83       	std	Y+4, r25	; 0x04
    4b3c:	2d 83       	std	Y+5, r18	; 0x05
    4b3e:	3e 83       	std	Y+6, r19	; 0x06
    4b40:	4f 83       	std	Y+7, r20	; 0x07
    4b42:	58 87       	std	Y+8, r21	; 0x08
    4b44:	e9 86       	std	Y+9, r14	; 0x09
    4b46:	fa 86       	std	Y+10, r15	; 0x0a
    4b48:	0b 87       	std	Y+11, r16	; 0x0b
    4b4a:	1c 87       	std	Y+12, r17	; 0x0c
    4b4c:	ad 86       	std	Y+13, r10	; 0x0d
    4b4e:	be 86       	std	Y+14, r11	; 0x0e
    4b50:	cf 86       	std	Y+15, r12	; 0x0f
    4b52:	d8 8a       	std	Y+16, r13	; 0x10
    4b54:	89 8a       	std	Y+17, r8	; 0x11
    4b56:	9a 8a       	std	Y+18, r9	; 0x12
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    4b58:	80 91 9b 24 	lds	r24, 0x249B
    4b5c:	90 91 9c 24 	lds	r25, 0x249C
    4b60:	a0 91 9d 24 	lds	r26, 0x249D
    4b64:	b0 91 9e 24 	lds	r27, 0x249E
    4b68:	bc 01       	movw	r22, r24
    4b6a:	cd 01       	movw	r24, r26
    4b6c:	29 81       	ldd	r18, Y+1	; 0x01
    4b6e:	3a 81       	ldd	r19, Y+2	; 0x02
    4b70:	4b 81       	ldd	r20, Y+3	; 0x03
    4b72:	5c 81       	ldd	r21, Y+4	; 0x04
    4b74:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    4b78:	dc 01       	movw	r26, r24
    4b7a:	cb 01       	movw	r24, r22
    4b7c:	bc 01       	movw	r22, r24
    4b7e:	cd 01       	movw	r24, r26
    4b80:	0e 94 d0 5d 	call	0xbba0	; 0xbba0 <lround>
    4b84:	dc 01       	movw	r26, r24
    4b86:	cb 01       	movw	r24, r22
    4b88:	80 93 91 21 	sts	0x2191, r24
    4b8c:	90 93 92 21 	sts	0x2192, r25
    4b90:	a0 93 93 21 	sts	0x2193, r26
    4b94:	b0 93 94 21 	sts	0x2194, r27
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    4b98:	80 91 b3 24 	lds	r24, 0x24B3
    4b9c:	90 91 b4 24 	lds	r25, 0x24B4
    4ba0:	a0 91 b5 24 	lds	r26, 0x24B5
    4ba4:	b0 91 b6 24 	lds	r27, 0x24B6
    4ba8:	bc 01       	movw	r22, r24
    4baa:	cd 01       	movw	r24, r26
    4bac:	2d 81       	ldd	r18, Y+5	; 0x05
    4bae:	3e 81       	ldd	r19, Y+6	; 0x06
    4bb0:	4f 81       	ldd	r20, Y+7	; 0x07
    4bb2:	58 85       	ldd	r21, Y+8	; 0x08
    4bb4:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    4bb8:	dc 01       	movw	r26, r24
    4bba:	cb 01       	movw	r24, r22
    4bbc:	bc 01       	movw	r22, r24
    4bbe:	cd 01       	movw	r24, r26
    4bc0:	0e 94 d0 5d 	call	0xbba0	; 0xbba0 <lround>
    4bc4:	dc 01       	movw	r26, r24
    4bc6:	cb 01       	movw	r24, r22
    4bc8:	80 93 95 21 	sts	0x2195, r24
    4bcc:	90 93 96 21 	sts	0x2196, r25
    4bd0:	a0 93 97 21 	sts	0x2197, r26
    4bd4:	b0 93 98 21 	sts	0x2198, r27
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    4bd8:	80 91 cb 24 	lds	r24, 0x24CB
    4bdc:	90 91 cc 24 	lds	r25, 0x24CC
    4be0:	a0 91 cd 24 	lds	r26, 0x24CD
    4be4:	b0 91 ce 24 	lds	r27, 0x24CE
    4be8:	bc 01       	movw	r22, r24
    4bea:	cd 01       	movw	r24, r26
    4bec:	29 85       	ldd	r18, Y+9	; 0x09
    4bee:	3a 85       	ldd	r19, Y+10	; 0x0a
    4bf0:	4b 85       	ldd	r20, Y+11	; 0x0b
    4bf2:	5c 85       	ldd	r21, Y+12	; 0x0c
    4bf4:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    4bf8:	dc 01       	movw	r26, r24
    4bfa:	cb 01       	movw	r24, r22
    4bfc:	bc 01       	movw	r22, r24
    4bfe:	cd 01       	movw	r24, r26
    4c00:	0e 94 d0 5d 	call	0xbba0	; 0xbba0 <lround>
    4c04:	dc 01       	movw	r26, r24
    4c06:	cb 01       	movw	r24, r22
    4c08:	80 93 99 21 	sts	0x2199, r24
    4c0c:	90 93 9a 21 	sts	0x219A, r25
    4c10:	a0 93 9b 21 	sts	0x219B, r26
    4c14:	b0 93 9c 21 	sts	0x219C, r27

	mc.steps[X] = mc.target[X]-mc.position[X];
    4c18:	20 91 91 21 	lds	r18, 0x2191
    4c1c:	30 91 92 21 	lds	r19, 0x2192
    4c20:	40 91 93 21 	lds	r20, 0x2193
    4c24:	50 91 94 21 	lds	r21, 0x2194
    4c28:	80 91 85 21 	lds	r24, 0x2185
    4c2c:	90 91 86 21 	lds	r25, 0x2186
    4c30:	a0 91 87 21 	lds	r26, 0x2187
    4c34:	b0 91 88 21 	lds	r27, 0x2188
    4c38:	79 01       	movw	r14, r18
    4c3a:	8a 01       	movw	r16, r20
    4c3c:	e8 1a       	sub	r14, r24
    4c3e:	f9 0a       	sbc	r15, r25
    4c40:	0a 0b       	sbc	r16, r26
    4c42:	1b 0b       	sbc	r17, r27
    4c44:	d8 01       	movw	r26, r16
    4c46:	c7 01       	movw	r24, r14
    4c48:	80 93 9d 21 	sts	0x219D, r24
    4c4c:	90 93 9e 21 	sts	0x219E, r25
    4c50:	a0 93 9f 21 	sts	0x219F, r26
    4c54:	b0 93 a0 21 	sts	0x21A0, r27
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    4c58:	20 91 95 21 	lds	r18, 0x2195
    4c5c:	30 91 96 21 	lds	r19, 0x2196
    4c60:	40 91 97 21 	lds	r20, 0x2197
    4c64:	50 91 98 21 	lds	r21, 0x2198
    4c68:	80 91 89 21 	lds	r24, 0x2189
    4c6c:	90 91 8a 21 	lds	r25, 0x218A
    4c70:	a0 91 8b 21 	lds	r26, 0x218B
    4c74:	b0 91 8c 21 	lds	r27, 0x218C
    4c78:	79 01       	movw	r14, r18
    4c7a:	8a 01       	movw	r16, r20
    4c7c:	e8 1a       	sub	r14, r24
    4c7e:	f9 0a       	sbc	r15, r25
    4c80:	0a 0b       	sbc	r16, r26
    4c82:	1b 0b       	sbc	r17, r27
    4c84:	d8 01       	movw	r26, r16
    4c86:	c7 01       	movw	r24, r14
    4c88:	80 93 a1 21 	sts	0x21A1, r24
    4c8c:	90 93 a2 21 	sts	0x21A2, r25
    4c90:	a0 93 a3 21 	sts	0x21A3, r26
    4c94:	b0 93 a4 21 	sts	0x21A4, r27
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    4c98:	20 91 99 21 	lds	r18, 0x2199
    4c9c:	30 91 9a 21 	lds	r19, 0x219A
    4ca0:	40 91 9b 21 	lds	r20, 0x219B
    4ca4:	50 91 9c 21 	lds	r21, 0x219C
    4ca8:	80 91 8d 21 	lds	r24, 0x218D
    4cac:	90 91 8e 21 	lds	r25, 0x218E
    4cb0:	a0 91 8f 21 	lds	r26, 0x218F
    4cb4:	b0 91 90 21 	lds	r27, 0x2190
    4cb8:	79 01       	movw	r14, r18
    4cba:	8a 01       	movw	r16, r20
    4cbc:	e8 1a       	sub	r14, r24
    4cbe:	f9 0a       	sbc	r15, r25
    4cc0:	0a 0b       	sbc	r16, r26
    4cc2:	1b 0b       	sbc	r17, r27
    4cc4:	d8 01       	movw	r26, r16
    4cc6:	c7 01       	movw	r24, r14
    4cc8:	80 93 a5 21 	sts	0x21A5, r24
    4ccc:	90 93 a6 21 	sts	0x21A6, r25
    4cd0:	a0 93 a7 21 	sts	0x21A7, r26
    4cd4:	b0 93 a8 21 	sts	0x21A8, r27

	if (invert_feed_rate) {
    4cd8:	89 89       	ldd	r24, Y+17	; 0x11
    4cda:	9a 89       	ldd	r25, Y+18	; 0x12
    4cdc:	00 97       	sbiw	r24, 0x00	; 0
    4cde:	d9 f0       	breq	.+54     	; 0x4d16 <mc_line+0x204>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    4ce0:	60 ec       	ldi	r22, 0xC0	; 192
    4ce2:	71 ee       	ldi	r23, 0xE1	; 225
    4ce4:	84 e6       	ldi	r24, 0x64	; 100
    4ce6:	9c e4       	ldi	r25, 0x4C	; 76
    4ce8:	2d 85       	ldd	r18, Y+13	; 0x0d
    4cea:	3e 85       	ldd	r19, Y+14	; 0x0e
    4cec:	4f 85       	ldd	r20, Y+15	; 0x0f
    4cee:	58 89       	ldd	r21, Y+16	; 0x10
    4cf0:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    4cf4:	dc 01       	movw	r26, r24
    4cf6:	cb 01       	movw	r24, r22
    4cf8:	bc 01       	movw	r22, r24
    4cfa:	cd 01       	movw	r24, r26
    4cfc:	0e 94 d0 5d 	call	0xbba0	; 0xbba0 <lround>
    4d00:	dc 01       	movw	r26, r24
    4d02:	cb 01       	movw	r24, r22
    4d04:	80 93 a9 21 	sts	0x21A9, r24
    4d08:	90 93 aa 21 	sts	0x21AA, r25
    4d0c:	a0 93 ab 21 	sts	0x21AB, r26
    4d10:	b0 93 ac 21 	sts	0x21AC, r27
    4d14:	ac c0       	rjmp	.+344    	; 0x4e6e <mc_line+0x35c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    4d16:	80 91 9d 21 	lds	r24, 0x219D
    4d1a:	90 91 9e 21 	lds	r25, 0x219E
    4d1e:	a0 91 9f 21 	lds	r26, 0x219F
    4d22:	b0 91 a0 21 	lds	r27, 0x21A0
    4d26:	bc 01       	movw	r22, r24
    4d28:	cd 01       	movw	r24, r26
    4d2a:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    4d2e:	dc 01       	movw	r26, r24
    4d30:	cb 01       	movw	r24, r22
    4d32:	20 91 9b 24 	lds	r18, 0x249B
    4d36:	30 91 9c 24 	lds	r19, 0x249C
    4d3a:	40 91 9d 24 	lds	r20, 0x249D
    4d3e:	50 91 9e 24 	lds	r21, 0x249E
    4d42:	bc 01       	movw	r22, r24
    4d44:	cd 01       	movw	r24, r26
    4d46:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    4d4a:	dc 01       	movw	r26, r24
    4d4c:	cb 01       	movw	r24, r22
    4d4e:	bc 01       	movw	r22, r24
    4d50:	cd 01       	movw	r24, r26
    4d52:	0e 94 ab 5e 	call	0xbd56	; 0xbd56 <square>
    4d56:	7b 01       	movw	r14, r22
    4d58:	8c 01       	movw	r16, r24
    4d5a:	80 91 a1 21 	lds	r24, 0x21A1
    4d5e:	90 91 a2 21 	lds	r25, 0x21A2
    4d62:	a0 91 a3 21 	lds	r26, 0x21A3
    4d66:	b0 91 a4 21 	lds	r27, 0x21A4
    4d6a:	bc 01       	movw	r22, r24
    4d6c:	cd 01       	movw	r24, r26
    4d6e:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    4d72:	dc 01       	movw	r26, r24
    4d74:	cb 01       	movw	r24, r22
    4d76:	20 91 b3 24 	lds	r18, 0x24B3
    4d7a:	30 91 b4 24 	lds	r19, 0x24B4
    4d7e:	40 91 b5 24 	lds	r20, 0x24B5
    4d82:	50 91 b6 24 	lds	r21, 0x24B6
    4d86:	bc 01       	movw	r22, r24
    4d88:	cd 01       	movw	r24, r26
    4d8a:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    4d8e:	dc 01       	movw	r26, r24
    4d90:	cb 01       	movw	r24, r22
    4d92:	bc 01       	movw	r22, r24
    4d94:	cd 01       	movw	r24, r26
    4d96:	0e 94 ab 5e 	call	0xbd56	; 0xbd56 <square>
    4d9a:	9b 01       	movw	r18, r22
    4d9c:	ac 01       	movw	r20, r24
    4d9e:	c8 01       	movw	r24, r16
    4da0:	b7 01       	movw	r22, r14
    4da2:	0e 94 9f 5a 	call	0xb53e	; 0xb53e <__addsf3>
    4da6:	dc 01       	movw	r26, r24
    4da8:	cb 01       	movw	r24, r22
    4daa:	7c 01       	movw	r14, r24
    4dac:	8d 01       	movw	r16, r26
    4dae:	80 91 a5 21 	lds	r24, 0x21A5
    4db2:	90 91 a6 21 	lds	r25, 0x21A6
    4db6:	a0 91 a7 21 	lds	r26, 0x21A7
    4dba:	b0 91 a8 21 	lds	r27, 0x21A8
    4dbe:	bc 01       	movw	r22, r24
    4dc0:	cd 01       	movw	r24, r26
    4dc2:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    4dc6:	dc 01       	movw	r26, r24
    4dc8:	cb 01       	movw	r24, r22
    4dca:	20 91 cb 24 	lds	r18, 0x24CB
    4dce:	30 91 cc 24 	lds	r19, 0x24CC
    4dd2:	40 91 cd 24 	lds	r20, 0x24CD
    4dd6:	50 91 ce 24 	lds	r21, 0x24CE
    4dda:	bc 01       	movw	r22, r24
    4ddc:	cd 01       	movw	r24, r26
    4dde:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    4de2:	dc 01       	movw	r26, r24
    4de4:	cb 01       	movw	r24, r22
    4de6:	bc 01       	movw	r22, r24
    4de8:	cd 01       	movw	r24, r26
    4dea:	0e 94 ab 5e 	call	0xbd56	; 0xbd56 <square>
    4dee:	9b 01       	movw	r18, r22
    4df0:	ac 01       	movw	r20, r24
    4df2:	c8 01       	movw	r24, r16
    4df4:	b7 01       	movw	r22, r14
    4df6:	0e 94 9f 5a 	call	0xb53e	; 0xb53e <__addsf3>
    4dfa:	dc 01       	movw	r26, r24
    4dfc:	cb 01       	movw	r24, r22
    4dfe:	bc 01       	movw	r22, r24
    4e00:	cd 01       	movw	r24, r26
    4e02:	0e 94 6d 5e 	call	0xbcda	; 0xbcda <sqrt>
    4e06:	dc 01       	movw	r26, r24
    4e08:	cb 01       	movw	r24, r22
    4e0a:	80 93 ad 21 	sts	0x21AD, r24
    4e0e:	90 93 ae 21 	sts	0x21AE, r25
    4e12:	a0 93 af 21 	sts	0x21AF, r26
    4e16:	b0 93 b0 21 	sts	0x21B0, r27
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    4e1a:	80 91 ad 21 	lds	r24, 0x21AD
    4e1e:	90 91 ae 21 	lds	r25, 0x21AE
    4e22:	a0 91 af 21 	lds	r26, 0x21AF
    4e26:	b0 91 b0 21 	lds	r27, 0x21B0
    4e2a:	bc 01       	movw	r22, r24
    4e2c:	cd 01       	movw	r24, r26
    4e2e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4e30:	3e 85       	ldd	r19, Y+14	; 0x0e
    4e32:	4f 85       	ldd	r20, Y+15	; 0x0f
    4e34:	58 89       	ldd	r21, Y+16	; 0x10
    4e36:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    4e3a:	dc 01       	movw	r26, r24
    4e3c:	cb 01       	movw	r24, r22
    4e3e:	bc 01       	movw	r22, r24
    4e40:	cd 01       	movw	r24, r26
    4e42:	20 e0       	ldi	r18, 0x00	; 0
    4e44:	34 e2       	ldi	r19, 0x24	; 36
    4e46:	44 e7       	ldi	r20, 0x74	; 116
    4e48:	59 e4       	ldi	r21, 0x49	; 73
    4e4a:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    4e4e:	dc 01       	movw	r26, r24
    4e50:	cb 01       	movw	r24, r22
    4e52:	bc 01       	movw	r22, r24
    4e54:	cd 01       	movw	r24, r26
    4e56:	0e 94 d0 5d 	call	0xbba0	; 0xbba0 <lround>
    4e5a:	dc 01       	movw	r26, r24
    4e5c:	cb 01       	movw	r24, r22
    4e5e:	80 93 a9 21 	sts	0x21A9, r24
    4e62:	90 93 aa 21 	sts	0x21AA, r25
    4e66:	a0 93 ab 21 	sts	0x21AB, r26
    4e6a:	b0 93 ac 21 	sts	0x21AC, r27
	}
	mc.line_state = MC_STATE_NEW;
    4e6e:	81 e0       	ldi	r24, 0x01	; 1
    4e70:	80 93 84 21 	sts	0x2184, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    4e74:	85 e8       	ldi	r24, 0x85	; 133
    4e76:	91 e2       	ldi	r25, 0x21	; 33
    4e78:	21 e9       	ldi	r18, 0x91	; 145
    4e7a:	31 e2       	ldi	r19, 0x21	; 33
    4e7c:	b9 01       	movw	r22, r18
    4e7e:	4c e0       	ldi	r20, 0x0C	; 12
    4e80:	50 e0       	ldi	r21, 0x00	; 0
    4e82:	0e 94 d8 61 	call	0xc3b0	; 0xc3b0 <memcpy>
	return (mc_line_continue());
    4e86:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <mc_line_continue>
}
    4e8a:	62 96       	adiw	r28, 0x12	; 18
    4e8c:	cd bf       	out	0x3d, r28	; 61
    4e8e:	de bf       	out	0x3e, r29	; 62
    4e90:	cf 91       	pop	r28
    4e92:	df 91       	pop	r29
    4e94:	1f 91       	pop	r17
    4e96:	0f 91       	pop	r16
    4e98:	ff 90       	pop	r15
    4e9a:	ef 90       	pop	r14
    4e9c:	df 90       	pop	r13
    4e9e:	cf 90       	pop	r12
    4ea0:	bf 90       	pop	r11
    4ea2:	af 90       	pop	r10
    4ea4:	9f 90       	pop	r9
    4ea6:	8f 90       	pop	r8
    4ea8:	08 95       	ret

00004eaa <mc_line_continue>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continue() 
{
    4eaa:	af 92       	push	r10
    4eac:	bf 92       	push	r11
    4eae:	cf 92       	push	r12
    4eb0:	df 92       	push	r13
    4eb2:	ef 92       	push	r14
    4eb4:	ff 92       	push	r15
    4eb6:	0f 93       	push	r16
    4eb8:	1f 93       	push	r17
    4eba:	df 93       	push	r29
    4ebc:	cf 93       	push	r28
    4ebe:	0f 92       	push	r0
    4ec0:	0f 92       	push	r0
    4ec2:	cd b7       	in	r28, 0x3d	; 61
    4ec4:	de b7       	in	r29, 0x3e	; 62
	if (mc.line_state == MC_STATE_OFF) {
    4ec6:	80 91 84 21 	lds	r24, 0x2184
    4eca:	88 23       	and	r24, r24
    4ecc:	29 f4       	brne	.+10     	; 0x4ed8 <mc_line_continue+0x2e>
		return (TG_NOOP);				// return NULL for non-started line
    4ece:	82 e0       	ldi	r24, 0x02	; 2
    4ed0:	90 e0       	ldi	r25, 0x00	; 0
    4ed2:	89 83       	std	Y+1, r24	; 0x01
    4ed4:	9a 83       	std	Y+2, r25	; 0x02
    4ed6:	34 c0       	rjmp	.+104    	; 0x4f40 <mc_line_continue+0x96>
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    4ed8:	82 e0       	ldi	r24, 0x02	; 2
    4eda:	80 93 84 21 	sts	0x2184, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    4ede:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <mv_test_move_buffer_full>
    4ee2:	88 23       	and	r24, r24
    4ee4:	29 f0       	breq	.+10     	; 0x4ef0 <mc_line_continue+0x46>
		return (TG_EAGAIN);
    4ee6:	81 e0       	ldi	r24, 0x01	; 1
    4ee8:	90 e0       	ldi	r25, 0x00	; 0
    4eea:	89 83       	std	Y+1, r24	; 0x01
    4eec:	9a 83       	std	Y+2, r25	; 0x02
    4eee:	28 c0       	rjmp	.+80     	; 0x4f40 <mc_line_continue+0x96>
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    4ef0:	80 91 9d 21 	lds	r24, 0x219D
    4ef4:	90 91 9e 21 	lds	r25, 0x219E
    4ef8:	a0 91 9f 21 	lds	r26, 0x219F
    4efc:	b0 91 a0 21 	lds	r27, 0x21A0
    4f00:	20 91 a1 21 	lds	r18, 0x21A1
    4f04:	30 91 a2 21 	lds	r19, 0x21A2
    4f08:	40 91 a3 21 	lds	r20, 0x21A3
    4f0c:	50 91 a4 21 	lds	r21, 0x21A4
    4f10:	e0 90 a5 21 	lds	r14, 0x21A5
    4f14:	f0 90 a6 21 	lds	r15, 0x21A6
    4f18:	00 91 a7 21 	lds	r16, 0x21A7
    4f1c:	10 91 a8 21 	lds	r17, 0x21A8
    4f20:	a0 90 a9 21 	lds	r10, 0x21A9
    4f24:	b0 90 aa 21 	lds	r11, 0x21AA
    4f28:	c0 90 ab 21 	lds	r12, 0x21AB
    4f2c:	d0 90 ac 21 	lds	r13, 0x21AC
    4f30:	bc 01       	movw	r22, r24
    4f32:	cd 01       	movw	r24, r26
    4f34:	0e 94 b4 44 	call	0x8968	; 0x8968 <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    4f38:	10 92 84 21 	sts	0x2184, r1
	return (TG_OK);
    4f3c:	19 82       	std	Y+1, r1	; 0x01
    4f3e:	1a 82       	std	Y+2, r1	; 0x02
    4f40:	89 81       	ldd	r24, Y+1	; 0x01
    4f42:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4f44:	0f 90       	pop	r0
    4f46:	0f 90       	pop	r0
    4f48:	cf 91       	pop	r28
    4f4a:	df 91       	pop	r29
    4f4c:	1f 91       	pop	r17
    4f4e:	0f 91       	pop	r16
    4f50:	ff 90       	pop	r15
    4f52:	ef 90       	pop	r14
    4f54:	df 90       	pop	r13
    4f56:	cf 90       	pop	r12
    4f58:	bf 90       	pop	r11
    4f5a:	af 90       	pop	r10
    4f5c:	08 95       	ret

00004f5e <mc_arc_blocking>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc_blocking(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    4f5e:	8f 92       	push	r8
    4f60:	9f 92       	push	r9
    4f62:	af 92       	push	r10
    4f64:	bf 92       	push	r11
    4f66:	cf 92       	push	r12
    4f68:	df 92       	push	r13
    4f6a:	ef 92       	push	r14
    4f6c:	ff 92       	push	r15
    4f6e:	0f 93       	push	r16
    4f70:	1f 93       	push	r17
    4f72:	df 93       	push	r29
    4f74:	cf 93       	push	r28
    4f76:	cd b7       	in	r28, 0x3d	; 61
    4f78:	de b7       	in	r29, 0x3e	; 62
    4f7a:	6c 97       	sbiw	r28, 0x1c	; 28
    4f7c:	cd bf       	out	0x3d, r28	; 61
    4f7e:	de bf       	out	0x3e, r29	; 62
    4f80:	69 83       	std	Y+1, r22	; 0x01
    4f82:	7a 83       	std	Y+2, r23	; 0x02
    4f84:	8b 83       	std	Y+3, r24	; 0x03
    4f86:	9c 83       	std	Y+4, r25	; 0x04
    4f88:	2d 83       	std	Y+5, r18	; 0x05
    4f8a:	3e 83       	std	Y+6, r19	; 0x06
    4f8c:	4f 83       	std	Y+7, r20	; 0x07
    4f8e:	58 87       	std	Y+8, r21	; 0x08
    4f90:	e9 86       	std	Y+9, r14	; 0x09
    4f92:	fa 86       	std	Y+10, r15	; 0x0a
    4f94:	0b 87       	std	Y+11, r16	; 0x0b
    4f96:	1c 87       	std	Y+12, r17	; 0x0c
    4f98:	ad 86       	std	Y+13, r10	; 0x0d
    4f9a:	be 86       	std	Y+14, r11	; 0x0e
    4f9c:	cf 86       	std	Y+15, r12	; 0x0f
    4f9e:	d8 8a       	std	Y+16, r13	; 0x10
    4fa0:	89 8a       	std	Y+17, r8	; 0x11
    4fa2:	9a 8a       	std	Y+18, r9	; 0x12
	// load the arc struct
	ma.theta = theta;
    4fa4:	89 81       	ldd	r24, Y+1	; 0x01
    4fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa8:	ab 81       	ldd	r26, Y+3	; 0x03
    4faa:	bc 81       	ldd	r27, Y+4	; 0x04
    4fac:	80 93 0f 25 	sts	0x250F, r24
    4fb0:	90 93 10 25 	sts	0x2510, r25
    4fb4:	a0 93 11 25 	sts	0x2511, r26
    4fb8:	b0 93 12 25 	sts	0x2512, r27
	ma.radius = radius;
    4fbc:	89 85       	ldd	r24, Y+9	; 0x09
    4fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fc0:	ab 85       	ldd	r26, Y+11	; 0x0b
    4fc2:	bc 85       	ldd	r27, Y+12	; 0x0c
    4fc4:	80 93 13 25 	sts	0x2513, r24
    4fc8:	90 93 14 25 	sts	0x2514, r25
    4fcc:	a0 93 15 25 	sts	0x2515, r26
    4fd0:	b0 93 16 25 	sts	0x2516, r27
	ma.angular_travel = angular_travel;
    4fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    4fd8:	af 81       	ldd	r26, Y+7	; 0x07
    4fda:	b8 85       	ldd	r27, Y+8	; 0x08
    4fdc:	80 93 23 25 	sts	0x2523, r24
    4fe0:	90 93 24 25 	sts	0x2524, r25
    4fe4:	a0 93 25 25 	sts	0x2525, r26
    4fe8:	b0 93 26 25 	sts	0x2526, r27
	ma.linear_travel = linear_travel;
    4fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ff0:	af 85       	ldd	r26, Y+15	; 0x0f
    4ff2:	b8 89       	ldd	r27, Y+16	; 0x10
    4ff4:	80 93 27 25 	sts	0x2527, r24
    4ff8:	90 93 28 25 	sts	0x2528, r25
    4ffc:	a0 93 29 25 	sts	0x2529, r26
    5000:	b0 93 2a 25 	sts	0x252A, r27
	ma.feed_rate = feed_rate;
    5004:	88 a9       	ldd	r24, Y+48	; 0x30
    5006:	99 a9       	ldd	r25, Y+49	; 0x31
    5008:	aa a9       	ldd	r26, Y+50	; 0x32
    500a:	bb a9       	ldd	r27, Y+51	; 0x33
    500c:	80 93 17 25 	sts	0x2517, r24
    5010:	90 93 18 25 	sts	0x2518, r25
    5014:	a0 93 19 25 	sts	0x2519, r26
    5018:	b0 93 1a 25 	sts	0x251A, r27
	ma.invert_feed_rate = invert_feed_rate;
    501c:	8c a9       	ldd	r24, Y+52	; 0x34
    501e:	9d a9       	ldd	r25, Y+53	; 0x35
    5020:	80 93 ef 24 	sts	0x24EF, r24
    5024:	90 93 f0 24 	sts	0x24F0, r25
	ma.axis_1 = axis_1;
    5028:	89 89       	ldd	r24, Y+17	; 0x11
    502a:	9a 89       	ldd	r25, Y+18	; 0x12
    502c:	80 93 f1 24 	sts	0x24F1, r24
    5030:	90 93 f2 24 	sts	0x24F2, r25
	ma.axis_2 = axis_2;
    5034:	8c a5       	ldd	r24, Y+44	; 0x2c
    5036:	9d a5       	ldd	r25, Y+45	; 0x2d
    5038:	80 93 f3 24 	sts	0x24F3, r24
    503c:	90 93 f4 24 	sts	0x24F4, r25
	ma.axis_linear = axis_linear;
    5040:	8e a5       	ldd	r24, Y+46	; 0x2e
    5042:	9f a5       	ldd	r25, Y+47	; 0x2f
    5044:	80 93 f5 24 	sts	0x24F5, r24
    5048:	90 93 f6 24 	sts	0x24F6, r25
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    504c:	80 91 23 25 	lds	r24, 0x2523
    5050:	90 91 24 25 	lds	r25, 0x2524
    5054:	a0 91 25 25 	lds	r26, 0x2525
    5058:	b0 91 26 25 	lds	r27, 0x2526
    505c:	20 91 13 25 	lds	r18, 0x2513
    5060:	30 91 14 25 	lds	r19, 0x2514
    5064:	40 91 15 25 	lds	r20, 0x2515
    5068:	50 91 16 25 	lds	r21, 0x2516
    506c:	bc 01       	movw	r22, r24
    506e:	cd 01       	movw	r24, r26
    5070:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    5074:	dc 01       	movw	r26, r24
    5076:	cb 01       	movw	r24, r22
    5078:	89 8f       	std	Y+25, r24	; 0x19
    507a:	9a 8f       	std	Y+26, r25	; 0x1a
    507c:	ab 8f       	std	Y+27, r26	; 0x1b
    507e:	bc 8f       	std	Y+28, r27	; 0x1c
    5080:	80 91 27 25 	lds	r24, 0x2527
    5084:	90 91 28 25 	lds	r25, 0x2528
    5088:	a0 91 29 25 	lds	r26, 0x2529
    508c:	b0 91 2a 25 	lds	r27, 0x252A
    5090:	bc 01       	movw	r22, r24
    5092:	cd 01       	movw	r24, r26
    5094:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <__fixsfsi>
    5098:	dc 01       	movw	r26, r24
    509a:	cb 01       	movw	r24, r22
    509c:	8d 8b       	std	Y+21, r24	; 0x15
    509e:	9e 8b       	std	Y+22, r25	; 0x16
    50a0:	af 8b       	std	Y+23, r26	; 0x17
    50a2:	b8 8f       	std	Y+24, r27	; 0x18
    50a4:	8d 89       	ldd	r24, Y+21	; 0x15
    50a6:	9e 89       	ldd	r25, Y+22	; 0x16
    50a8:	af 89       	ldd	r26, Y+23	; 0x17
    50aa:	b8 8d       	ldd	r27, Y+24	; 0x18
    50ac:	bb 23       	and	r27, r27
    50ae:	7c f4       	brge	.+30     	; 0x50ce <mc_arc_blocking+0x170>
    50b0:	8d 89       	ldd	r24, Y+21	; 0x15
    50b2:	9e 89       	ldd	r25, Y+22	; 0x16
    50b4:	af 89       	ldd	r26, Y+23	; 0x17
    50b6:	b8 8d       	ldd	r27, Y+24	; 0x18
    50b8:	b0 95       	com	r27
    50ba:	a0 95       	com	r26
    50bc:	90 95       	com	r25
    50be:	81 95       	neg	r24
    50c0:	9f 4f       	sbci	r25, 0xFF	; 255
    50c2:	af 4f       	sbci	r26, 0xFF	; 255
    50c4:	bf 4f       	sbci	r27, 0xFF	; 255
    50c6:	8d 8b       	std	Y+21, r24	; 0x15
    50c8:	9e 8b       	std	Y+22, r25	; 0x16
    50ca:	af 8b       	std	Y+23, r26	; 0x17
    50cc:	b8 8f       	std	Y+24, r27	; 0x18
    50ce:	6d 89       	ldd	r22, Y+21	; 0x15
    50d0:	7e 89       	ldd	r23, Y+22	; 0x16
    50d2:	8f 89       	ldd	r24, Y+23	; 0x17
    50d4:	98 8d       	ldd	r25, Y+24	; 0x18
    50d6:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    50da:	9b 01       	movw	r18, r22
    50dc:	ac 01       	movw	r20, r24
    50de:	69 8d       	ldd	r22, Y+25	; 0x19
    50e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50e6:	0e 94 3b 5d 	call	0xba76	; 0xba76 <hypot>
    50ea:	dc 01       	movw	r26, r24
    50ec:	cb 01       	movw	r24, r22
    50ee:	80 93 03 25 	sts	0x2503, r24
    50f2:	90 93 04 25 	sts	0x2504, r25
    50f6:	a0 93 05 25 	sts	0x2505, r26
    50fa:	b0 93 06 25 	sts	0x2506, r27
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    50fe:	80 91 03 25 	lds	r24, 0x2503
    5102:	90 91 04 25 	lds	r25, 0x2504
    5106:	a0 91 05 25 	lds	r26, 0x2505
    510a:	b0 91 06 25 	lds	r27, 0x2506
    510e:	bc 01       	movw	r22, r24
    5110:	cd 01       	movw	r24, r26
    5112:	2a e0       	ldi	r18, 0x0A	; 10
    5114:	37 ed       	ldi	r19, 0xD7	; 215
    5116:	43 e2       	ldi	r20, 0x23	; 35
    5118:	5c e3       	ldi	r21, 0x3C	; 60
    511a:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <__cmpsf2>
    511e:	88 23       	and	r24, r24
    5120:	2c f4       	brge	.+10     	; 0x512c <mc_arc_blocking+0x1ce>
		return (TG_ARC_ERROR);						// arc specification error
    5122:	a0 e1       	ldi	r26, 0x10	; 16
    5124:	b0 e0       	ldi	r27, 0x00	; 0
    5126:	ab 8b       	std	Y+19, r26	; 0x13
    5128:	bc 8b       	std	Y+20, r27	; 0x14
    512a:	99 c2       	rjmp	.+1330   	; 0x565e <mc_arc_blocking+0x700>
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    512c:	80 91 03 25 	lds	r24, 0x2503
    5130:	90 91 04 25 	lds	r25, 0x2504
    5134:	a0 91 05 25 	lds	r26, 0x2505
    5138:	b0 91 06 25 	lds	r27, 0x2506
    513c:	20 91 7c 24 	lds	r18, 0x247C
    5140:	30 91 7d 24 	lds	r19, 0x247D
    5144:	40 91 7e 24 	lds	r20, 0x247E
    5148:	50 91 7f 24 	lds	r21, 0x247F
    514c:	bc 01       	movw	r22, r24
    514e:	cd 01       	movw	r24, r26
    5150:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    5154:	dc 01       	movw	r26, r24
    5156:	cb 01       	movw	r24, r22
    5158:	bc 01       	movw	r22, r24
    515a:	cd 01       	movw	r24, r26
    515c:	0e 94 2b 5b 	call	0xb656	; 0xb656 <ceil>
    5160:	dc 01       	movw	r26, r24
    5162:	cb 01       	movw	r24, r22
    5164:	bc 01       	movw	r22, r24
    5166:	cd 01       	movw	r24, r26
    5168:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <__fixsfsi>
    516c:	dc 01       	movw	r26, r24
    516e:	cb 01       	movw	r24, r22
    5170:	80 93 eb 24 	sts	0x24EB, r24
    5174:	90 93 ec 24 	sts	0x24EC, r25
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    5178:	80 91 ef 24 	lds	r24, 0x24EF
    517c:	90 91 f0 24 	lds	r25, 0x24F0
    5180:	00 97       	sbiw	r24, 0x00	; 0
    5182:	21 f1       	breq	.+72     	; 0x51cc <mc_arc_blocking+0x26e>
		ma.feed_rate *= ma.segments; 
    5184:	e0 90 17 25 	lds	r14, 0x2517
    5188:	f0 90 18 25 	lds	r15, 0x2518
    518c:	00 91 19 25 	lds	r16, 0x2519
    5190:	10 91 1a 25 	lds	r17, 0x251A
    5194:	80 91 eb 24 	lds	r24, 0x24EB
    5198:	90 91 ec 24 	lds	r25, 0x24EC
    519c:	aa 27       	eor	r26, r26
    519e:	97 fd       	sbrc	r25, 7
    51a0:	a0 95       	com	r26
    51a2:	ba 2f       	mov	r27, r26
    51a4:	bc 01       	movw	r22, r24
    51a6:	cd 01       	movw	r24, r26
    51a8:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    51ac:	9b 01       	movw	r18, r22
    51ae:	ac 01       	movw	r20, r24
    51b0:	c8 01       	movw	r24, r16
    51b2:	b7 01       	movw	r22, r14
    51b4:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    51b8:	dc 01       	movw	r26, r24
    51ba:	cb 01       	movw	r24, r22
    51bc:	80 93 17 25 	sts	0x2517, r24
    51c0:	90 93 18 25 	sts	0x2518, r25
    51c4:	a0 93 19 25 	sts	0x2519, r26
    51c8:	b0 93 1a 25 	sts	0x251A, r27
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    51cc:	e0 90 23 25 	lds	r14, 0x2523
    51d0:	f0 90 24 25 	lds	r15, 0x2524
    51d4:	00 91 25 25 	lds	r16, 0x2525
    51d8:	10 91 26 25 	lds	r17, 0x2526
    51dc:	80 91 eb 24 	lds	r24, 0x24EB
    51e0:	90 91 ec 24 	lds	r25, 0x24EC
    51e4:	aa 27       	eor	r26, r26
    51e6:	97 fd       	sbrc	r25, 7
    51e8:	a0 95       	com	r26
    51ea:	ba 2f       	mov	r27, r26
    51ec:	bc 01       	movw	r22, r24
    51ee:	cd 01       	movw	r24, r26
    51f0:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    51f4:	9b 01       	movw	r18, r22
    51f6:	ac 01       	movw	r20, r24
    51f8:	c8 01       	movw	r24, r16
    51fa:	b7 01       	movw	r22, r14
    51fc:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    5200:	dc 01       	movw	r26, r24
    5202:	cb 01       	movw	r24, r22
    5204:	80 93 1b 25 	sts	0x251B, r24
    5208:	90 93 1c 25 	sts	0x251C, r25
    520c:	a0 93 1d 25 	sts	0x251D, r26
    5210:	b0 93 1e 25 	sts	0x251E, r27
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    5214:	e0 90 27 25 	lds	r14, 0x2527
    5218:	f0 90 28 25 	lds	r15, 0x2528
    521c:	00 91 29 25 	lds	r16, 0x2529
    5220:	10 91 2a 25 	lds	r17, 0x252A
    5224:	80 91 eb 24 	lds	r24, 0x24EB
    5228:	90 91 ec 24 	lds	r25, 0x24EC
    522c:	aa 27       	eor	r26, r26
    522e:	97 fd       	sbrc	r25, 7
    5230:	a0 95       	com	r26
    5232:	ba 2f       	mov	r27, r26
    5234:	bc 01       	movw	r22, r24
    5236:	cd 01       	movw	r24, r26
    5238:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    523c:	9b 01       	movw	r18, r22
    523e:	ac 01       	movw	r20, r24
    5240:	c8 01       	movw	r24, r16
    5242:	b7 01       	movw	r22, r14
    5244:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    5248:	dc 01       	movw	r26, r24
    524a:	cb 01       	movw	r24, r22
    524c:	80 93 1f 25 	sts	0x251F, r24
    5250:	90 93 20 25 	sts	0x2520, r25
    5254:	a0 93 21 25 	sts	0x2521, r26
    5258:	b0 93 22 25 	sts	0x2522, r27
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    525c:	80 91 f1 24 	lds	r24, 0x24F1
    5260:	90 91 f2 24 	lds	r25, 0x24F2
    5264:	88 0f       	add	r24, r24
    5266:	99 1f       	adc	r25, r25
    5268:	88 0f       	add	r24, r24
    526a:	99 1f       	adc	r25, r25
    526c:	fc 01       	movw	r30, r24
    526e:	eb 57       	subi	r30, 0x7B	; 123
    5270:	fe 4d       	sbci	r31, 0xDE	; 222
    5272:	80 81       	ld	r24, Z
    5274:	91 81       	ldd	r25, Z+1	; 0x01
    5276:	a2 81       	ldd	r26, Z+2	; 0x02
    5278:	b3 81       	ldd	r27, Z+3	; 0x03
    527a:	bc 01       	movw	r22, r24
    527c:	cd 01       	movw	r24, r26
    527e:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    5282:	7b 01       	movw	r14, r22
    5284:	8c 01       	movw	r16, r24
    5286:	20 91 f1 24 	lds	r18, 0x24F1
    528a:	30 91 f2 24 	lds	r19, 0x24F2
    528e:	c9 01       	movw	r24, r18
    5290:	88 0f       	add	r24, r24
    5292:	99 1f       	adc	r25, r25
    5294:	82 0f       	add	r24, r18
    5296:	93 1f       	adc	r25, r19
    5298:	88 0f       	add	r24, r24
    529a:	99 1f       	adc	r25, r25
    529c:	88 0f       	add	r24, r24
    529e:	99 1f       	adc	r25, r25
    52a0:	88 0f       	add	r24, r24
    52a2:	99 1f       	adc	r25, r25
    52a4:	fc 01       	movw	r30, r24
    52a6:	e5 56       	subi	r30, 0x65	; 101
    52a8:	fb 4d       	sbci	r31, 0xDB	; 219
    52aa:	20 81       	ld	r18, Z
    52ac:	31 81       	ldd	r19, Z+1	; 0x01
    52ae:	42 81       	ldd	r20, Z+2	; 0x02
    52b0:	53 81       	ldd	r21, Z+3	; 0x03
    52b2:	c8 01       	movw	r24, r16
    52b4:	b7 01       	movw	r22, r14
    52b6:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    52ba:	dc 01       	movw	r26, r24
    52bc:	cb 01       	movw	r24, r22
    52be:	7c 01       	movw	r14, r24
    52c0:	8d 01       	movw	r16, r26
    52c2:	80 91 0f 25 	lds	r24, 0x250F
    52c6:	90 91 10 25 	lds	r25, 0x2510
    52ca:	a0 91 11 25 	lds	r26, 0x2511
    52ce:	b0 91 12 25 	lds	r27, 0x2512
    52d2:	bc 01       	movw	r22, r24
    52d4:	cd 01       	movw	r24, r26
    52d6:	0e 94 63 5e 	call	0xbcc6	; 0xbcc6 <sin>
    52da:	dc 01       	movw	r26, r24
    52dc:	cb 01       	movw	r24, r22
    52de:	20 91 13 25 	lds	r18, 0x2513
    52e2:	30 91 14 25 	lds	r19, 0x2514
    52e6:	40 91 15 25 	lds	r20, 0x2515
    52ea:	50 91 16 25 	lds	r21, 0x2516
    52ee:	bc 01       	movw	r22, r24
    52f0:	cd 01       	movw	r24, r26
    52f2:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    52f6:	dc 01       	movw	r26, r24
    52f8:	cb 01       	movw	r24, r22
    52fa:	9c 01       	movw	r18, r24
    52fc:	ad 01       	movw	r20, r26
    52fe:	c8 01       	movw	r24, r16
    5300:	b7 01       	movw	r22, r14
    5302:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    5306:	dc 01       	movw	r26, r24
    5308:	cb 01       	movw	r24, r22
    530a:	80 93 07 25 	sts	0x2507, r24
    530e:	90 93 08 25 	sts	0x2508, r25
    5312:	a0 93 09 25 	sts	0x2509, r26
    5316:	b0 93 0a 25 	sts	0x250A, r27
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    531a:	80 91 f3 24 	lds	r24, 0x24F3
    531e:	90 91 f4 24 	lds	r25, 0x24F4
    5322:	88 0f       	add	r24, r24
    5324:	99 1f       	adc	r25, r25
    5326:	88 0f       	add	r24, r24
    5328:	99 1f       	adc	r25, r25
    532a:	fc 01       	movw	r30, r24
    532c:	eb 57       	subi	r30, 0x7B	; 123
    532e:	fe 4d       	sbci	r31, 0xDE	; 222
    5330:	80 81       	ld	r24, Z
    5332:	91 81       	ldd	r25, Z+1	; 0x01
    5334:	a2 81       	ldd	r26, Z+2	; 0x02
    5336:	b3 81       	ldd	r27, Z+3	; 0x03
    5338:	bc 01       	movw	r22, r24
    533a:	cd 01       	movw	r24, r26
    533c:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    5340:	7b 01       	movw	r14, r22
    5342:	8c 01       	movw	r16, r24
    5344:	20 91 f3 24 	lds	r18, 0x24F3
    5348:	30 91 f4 24 	lds	r19, 0x24F4
    534c:	c9 01       	movw	r24, r18
    534e:	88 0f       	add	r24, r24
    5350:	99 1f       	adc	r25, r25
    5352:	82 0f       	add	r24, r18
    5354:	93 1f       	adc	r25, r19
    5356:	88 0f       	add	r24, r24
    5358:	99 1f       	adc	r25, r25
    535a:	88 0f       	add	r24, r24
    535c:	99 1f       	adc	r25, r25
    535e:	88 0f       	add	r24, r24
    5360:	99 1f       	adc	r25, r25
    5362:	fc 01       	movw	r30, r24
    5364:	e5 56       	subi	r30, 0x65	; 101
    5366:	fb 4d       	sbci	r31, 0xDB	; 219
    5368:	20 81       	ld	r18, Z
    536a:	31 81       	ldd	r19, Z+1	; 0x01
    536c:	42 81       	ldd	r20, Z+2	; 0x02
    536e:	53 81       	ldd	r21, Z+3	; 0x03
    5370:	c8 01       	movw	r24, r16
    5372:	b7 01       	movw	r22, r14
    5374:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    5378:	dc 01       	movw	r26, r24
    537a:	cb 01       	movw	r24, r22
    537c:	7c 01       	movw	r14, r24
    537e:	8d 01       	movw	r16, r26
    5380:	80 91 0f 25 	lds	r24, 0x250F
    5384:	90 91 10 25 	lds	r25, 0x2510
    5388:	a0 91 11 25 	lds	r26, 0x2511
    538c:	b0 91 12 25 	lds	r27, 0x2512
    5390:	bc 01       	movw	r22, r24
    5392:	cd 01       	movw	r24, r26
    5394:	0e 94 42 5b 	call	0xb684	; 0xb684 <cos>
    5398:	dc 01       	movw	r26, r24
    539a:	cb 01       	movw	r24, r22
    539c:	20 91 13 25 	lds	r18, 0x2513
    53a0:	30 91 14 25 	lds	r19, 0x2514
    53a4:	40 91 15 25 	lds	r20, 0x2515
    53a8:	50 91 16 25 	lds	r21, 0x2516
    53ac:	bc 01       	movw	r22, r24
    53ae:	cd 01       	movw	r24, r26
    53b0:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    53b4:	dc 01       	movw	r26, r24
    53b6:	cb 01       	movw	r24, r22
    53b8:	9c 01       	movw	r18, r24
    53ba:	ad 01       	movw	r20, r26
    53bc:	c8 01       	movw	r24, r16
    53be:	b7 01       	movw	r22, r14
    53c0:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    53c4:	dc 01       	movw	r26, r24
    53c6:	cb 01       	movw	r24, r22
    53c8:	80 93 0b 25 	sts	0x250B, r24
    53cc:	90 93 0c 25 	sts	0x250C, r25
    53d0:	a0 93 0d 25 	sts	0x250D, r26
    53d4:	b0 93 0e 25 	sts	0x250E, r27

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    53d8:	00 91 f5 24 	lds	r16, 0x24F5
    53dc:	10 91 f6 24 	lds	r17, 0x24F6
    53e0:	80 91 f5 24 	lds	r24, 0x24F5
    53e4:	90 91 f6 24 	lds	r25, 0x24F6
    53e8:	88 0f       	add	r24, r24
    53ea:	99 1f       	adc	r25, r25
    53ec:	88 0f       	add	r24, r24
    53ee:	99 1f       	adc	r25, r25
    53f0:	fc 01       	movw	r30, r24
    53f2:	eb 57       	subi	r30, 0x7B	; 123
    53f4:	fe 4d       	sbci	r31, 0xDE	; 222
    53f6:	80 81       	ld	r24, Z
    53f8:	91 81       	ldd	r25, Z+1	; 0x01
    53fa:	a2 81       	ldd	r26, Z+2	; 0x02
    53fc:	b3 81       	ldd	r27, Z+3	; 0x03
    53fe:	bc 01       	movw	r22, r24
    5400:	cd 01       	movw	r24, r26
    5402:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    5406:	dc 01       	movw	r26, r24
    5408:	cb 01       	movw	r24, r22
    540a:	20 91 cb 24 	lds	r18, 0x24CB
    540e:	30 91 cc 24 	lds	r19, 0x24CC
    5412:	40 91 cd 24 	lds	r20, 0x24CD
    5416:	50 91 ce 24 	lds	r21, 0x24CE
    541a:	bc 01       	movw	r22, r24
    541c:	cd 01       	movw	r24, r26
    541e:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    5422:	dc 01       	movw	r26, r24
    5424:	cb 01       	movw	r24, r22
    5426:	9c 01       	movw	r18, r24
    5428:	ad 01       	movw	r20, r26
    542a:	c8 01       	movw	r24, r16
    542c:	88 0f       	add	r24, r24
    542e:	99 1f       	adc	r25, r25
    5430:	88 0f       	add	r24, r24
    5432:	99 1f       	adc	r25, r25
    5434:	fc 01       	movw	r30, r24
    5436:	e9 50       	subi	r30, 0x09	; 9
    5438:	fb 4d       	sbci	r31, 0xDB	; 219
    543a:	20 83       	st	Z, r18
    543c:	31 83       	std	Z+1, r19	; 0x01
    543e:	42 83       	std	Z+2, r20	; 0x02
    5440:	53 83       	std	Z+3, r21	; 0x03
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    5442:	10 92 ed 24 	sts	0x24ED, r1
    5446:	10 92 ee 24 	sts	0x24EE, r1
    544a:	fb c0       	rjmp	.+502    	; 0x5642 <mc_arc_blocking+0x6e4>
		ma.theta += ma.theta_per_segment;
    544c:	80 91 0f 25 	lds	r24, 0x250F
    5450:	90 91 10 25 	lds	r25, 0x2510
    5454:	a0 91 11 25 	lds	r26, 0x2511
    5458:	b0 91 12 25 	lds	r27, 0x2512
    545c:	20 91 1b 25 	lds	r18, 0x251B
    5460:	30 91 1c 25 	lds	r19, 0x251C
    5464:	40 91 1d 25 	lds	r20, 0x251D
    5468:	50 91 1e 25 	lds	r21, 0x251E
    546c:	bc 01       	movw	r22, r24
    546e:	cd 01       	movw	r24, r26
    5470:	0e 94 9f 5a 	call	0xb53e	; 0xb53e <__addsf3>
    5474:	dc 01       	movw	r26, r24
    5476:	cb 01       	movw	r24, r22
    5478:	80 93 0f 25 	sts	0x250F, r24
    547c:	90 93 10 25 	sts	0x2510, r25
    5480:	a0 93 11 25 	sts	0x2511, r26
    5484:	b0 93 12 25 	sts	0x2512, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    5488:	c0 90 f1 24 	lds	r12, 0x24F1
    548c:	d0 90 f2 24 	lds	r13, 0x24F2
    5490:	e0 90 07 25 	lds	r14, 0x2507
    5494:	f0 90 08 25 	lds	r15, 0x2508
    5498:	00 91 09 25 	lds	r16, 0x2509
    549c:	10 91 0a 25 	lds	r17, 0x250A
    54a0:	80 91 0f 25 	lds	r24, 0x250F
    54a4:	90 91 10 25 	lds	r25, 0x2510
    54a8:	a0 91 11 25 	lds	r26, 0x2511
    54ac:	b0 91 12 25 	lds	r27, 0x2512
    54b0:	bc 01       	movw	r22, r24
    54b2:	cd 01       	movw	r24, r26
    54b4:	0e 94 63 5e 	call	0xbcc6	; 0xbcc6 <sin>
    54b8:	dc 01       	movw	r26, r24
    54ba:	cb 01       	movw	r24, r22
    54bc:	20 91 13 25 	lds	r18, 0x2513
    54c0:	30 91 14 25 	lds	r19, 0x2514
    54c4:	40 91 15 25 	lds	r20, 0x2515
    54c8:	50 91 16 25 	lds	r21, 0x2516
    54cc:	bc 01       	movw	r22, r24
    54ce:	cd 01       	movw	r24, r26
    54d0:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    54d4:	dc 01       	movw	r26, r24
    54d6:	cb 01       	movw	r24, r22
    54d8:	9c 01       	movw	r18, r24
    54da:	ad 01       	movw	r20, r26
    54dc:	c8 01       	movw	r24, r16
    54de:	b7 01       	movw	r22, r14
    54e0:	0e 94 9f 5a 	call	0xb53e	; 0xb53e <__addsf3>
    54e4:	dc 01       	movw	r26, r24
    54e6:	cb 01       	movw	r24, r22
    54e8:	9c 01       	movw	r18, r24
    54ea:	ad 01       	movw	r20, r26
    54ec:	c6 01       	movw	r24, r12
    54ee:	88 0f       	add	r24, r24
    54f0:	99 1f       	adc	r25, r25
    54f2:	88 0f       	add	r24, r24
    54f4:	99 1f       	adc	r25, r25
    54f6:	fc 01       	movw	r30, r24
    54f8:	e9 50       	subi	r30, 0x09	; 9
    54fa:	fb 4d       	sbci	r31, 0xDB	; 219
    54fc:	20 83       	st	Z, r18
    54fe:	31 83       	std	Z+1, r19	; 0x01
    5500:	42 83       	std	Z+2, r20	; 0x02
    5502:	53 83       	std	Z+3, r21	; 0x03
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    5504:	c0 90 f3 24 	lds	r12, 0x24F3
    5508:	d0 90 f4 24 	lds	r13, 0x24F4
    550c:	e0 90 0b 25 	lds	r14, 0x250B
    5510:	f0 90 0c 25 	lds	r15, 0x250C
    5514:	00 91 0d 25 	lds	r16, 0x250D
    5518:	10 91 0e 25 	lds	r17, 0x250E
    551c:	80 91 0f 25 	lds	r24, 0x250F
    5520:	90 91 10 25 	lds	r25, 0x2510
    5524:	a0 91 11 25 	lds	r26, 0x2511
    5528:	b0 91 12 25 	lds	r27, 0x2512
    552c:	bc 01       	movw	r22, r24
    552e:	cd 01       	movw	r24, r26
    5530:	0e 94 42 5b 	call	0xb684	; 0xb684 <cos>
    5534:	dc 01       	movw	r26, r24
    5536:	cb 01       	movw	r24, r22
    5538:	20 91 13 25 	lds	r18, 0x2513
    553c:	30 91 14 25 	lds	r19, 0x2514
    5540:	40 91 15 25 	lds	r20, 0x2515
    5544:	50 91 16 25 	lds	r21, 0x2516
    5548:	bc 01       	movw	r22, r24
    554a:	cd 01       	movw	r24, r26
    554c:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    5550:	dc 01       	movw	r26, r24
    5552:	cb 01       	movw	r24, r22
    5554:	9c 01       	movw	r18, r24
    5556:	ad 01       	movw	r20, r26
    5558:	c8 01       	movw	r24, r16
    555a:	b7 01       	movw	r22, r14
    555c:	0e 94 9f 5a 	call	0xb53e	; 0xb53e <__addsf3>
    5560:	dc 01       	movw	r26, r24
    5562:	cb 01       	movw	r24, r22
    5564:	9c 01       	movw	r18, r24
    5566:	ad 01       	movw	r20, r26
    5568:	c6 01       	movw	r24, r12
    556a:	88 0f       	add	r24, r24
    556c:	99 1f       	adc	r25, r25
    556e:	88 0f       	add	r24, r24
    5570:	99 1f       	adc	r25, r25
    5572:	fc 01       	movw	r30, r24
    5574:	e9 50       	subi	r30, 0x09	; 9
    5576:	fb 4d       	sbci	r31, 0xDB	; 219
    5578:	20 83       	st	Z, r18
    557a:	31 83       	std	Z+1, r19	; 0x01
    557c:	42 83       	std	Z+2, r20	; 0x02
    557e:	53 83       	std	Z+3, r21	; 0x03
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    5580:	00 91 f5 24 	lds	r16, 0x24F5
    5584:	10 91 f6 24 	lds	r17, 0x24F6
    5588:	80 91 f5 24 	lds	r24, 0x24F5
    558c:	90 91 f6 24 	lds	r25, 0x24F6
    5590:	88 0f       	add	r24, r24
    5592:	99 1f       	adc	r25, r25
    5594:	88 0f       	add	r24, r24
    5596:	99 1f       	adc	r25, r25
    5598:	fc 01       	movw	r30, r24
    559a:	e9 50       	subi	r30, 0x09	; 9
    559c:	fb 4d       	sbci	r31, 0xDB	; 219
    559e:	80 81       	ld	r24, Z
    55a0:	91 81       	ldd	r25, Z+1	; 0x01
    55a2:	a2 81       	ldd	r26, Z+2	; 0x02
    55a4:	b3 81       	ldd	r27, Z+3	; 0x03
    55a6:	20 91 1f 25 	lds	r18, 0x251F
    55aa:	30 91 20 25 	lds	r19, 0x2520
    55ae:	40 91 21 25 	lds	r20, 0x2521
    55b2:	50 91 22 25 	lds	r21, 0x2522
    55b6:	bc 01       	movw	r22, r24
    55b8:	cd 01       	movw	r24, r26
    55ba:	0e 94 9f 5a 	call	0xb53e	; 0xb53e <__addsf3>
    55be:	dc 01       	movw	r26, r24
    55c0:	cb 01       	movw	r24, r22
    55c2:	9c 01       	movw	r18, r24
    55c4:	ad 01       	movw	r20, r26
    55c6:	c8 01       	movw	r24, r16
    55c8:	88 0f       	add	r24, r24
    55ca:	99 1f       	adc	r25, r25
    55cc:	88 0f       	add	r24, r24
    55ce:	99 1f       	adc	r25, r25
    55d0:	fc 01       	movw	r30, r24
    55d2:	e9 50       	subi	r30, 0x09	; 9
    55d4:	fb 4d       	sbci	r31, 0xDB	; 219
    55d6:	20 83       	st	Z, r18
    55d8:	31 83       	std	Z+1, r19	; 0x01
    55da:	42 83       	std	Z+2, r20	; 0x02
    55dc:	53 83       	std	Z+3, r21	; 0x03
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    55de:	80 91 f7 24 	lds	r24, 0x24F7
    55e2:	90 91 f8 24 	lds	r25, 0x24F8
    55e6:	a0 91 f9 24 	lds	r26, 0x24F9
    55ea:	b0 91 fa 24 	lds	r27, 0x24FA
    55ee:	20 91 fb 24 	lds	r18, 0x24FB
    55f2:	30 91 fc 24 	lds	r19, 0x24FC
    55f6:	40 91 fd 24 	lds	r20, 0x24FD
    55fa:	50 91 fe 24 	lds	r21, 0x24FE
    55fe:	e0 90 ff 24 	lds	r14, 0x24FF
    5602:	f0 90 00 25 	lds	r15, 0x2500
    5606:	00 91 01 25 	lds	r16, 0x2501
    560a:	10 91 02 25 	lds	r17, 0x2502
    560e:	a0 90 17 25 	lds	r10, 0x2517
    5612:	b0 90 18 25 	lds	r11, 0x2518
    5616:	c0 90 19 25 	lds	r12, 0x2519
    561a:	d0 90 1a 25 	lds	r13, 0x251A
    561e:	e0 91 ef 24 	lds	r30, 0x24EF
    5622:	f0 91 f0 24 	lds	r31, 0x24F0
    5626:	bc 01       	movw	r22, r24
    5628:	cd 01       	movw	r24, r26
    562a:	4f 01       	movw	r8, r30
    562c:	0e 94 89 25 	call	0x4b12	; 0x4b12 <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    5630:	80 91 ed 24 	lds	r24, 0x24ED
    5634:	90 91 ee 24 	lds	r25, 0x24EE
    5638:	01 96       	adiw	r24, 0x01	; 1
    563a:	80 93 ed 24 	sts	0x24ED, r24
    563e:	90 93 ee 24 	sts	0x24EE, r25
    5642:	20 91 ed 24 	lds	r18, 0x24ED
    5646:	30 91 ee 24 	lds	r19, 0x24EE
    564a:	80 91 eb 24 	lds	r24, 0x24EB
    564e:	90 91 ec 24 	lds	r25, 0x24EC
    5652:	82 17       	cp	r24, r18
    5654:	93 07       	cpc	r25, r19
    5656:	0c f0       	brlt	.+2      	; 0x565a <mc_arc_blocking+0x6fc>
    5658:	f9 ce       	rjmp	.-526    	; 0x544c <mc_arc_blocking+0x4ee>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
    565a:	1b 8a       	std	Y+19, r1	; 0x13
    565c:	1c 8a       	std	Y+20, r1	; 0x14
    565e:	8b 89       	ldd	r24, Y+19	; 0x13
    5660:	9c 89       	ldd	r25, Y+20	; 0x14
}
    5662:	6c 96       	adiw	r28, 0x1c	; 28
    5664:	cd bf       	out	0x3d, r28	; 61
    5666:	de bf       	out	0x3e, r29	; 62
    5668:	cf 91       	pop	r28
    566a:	df 91       	pop	r29
    566c:	1f 91       	pop	r17
    566e:	0f 91       	pop	r16
    5670:	ff 90       	pop	r15
    5672:	ef 90       	pop	r14
    5674:	df 90       	pop	r13
    5676:	cf 90       	pop	r12
    5678:	bf 90       	pop	r11
    567a:	af 90       	pop	r10
    567c:	9f 90       	pop	r9
    567e:	8f 90       	pop	r8
    5680:	08 95       	ret

00005682 <mc_arc>:
 */

int mc_arc(double theta, double angular_travel, double radius, 
		   double linear_travel, int axis_1, int axis_2, int axis_linear, 
		   double feed_rate, int invert_feed_rate)
{
    5682:	8f 92       	push	r8
    5684:	9f 92       	push	r9
    5686:	af 92       	push	r10
    5688:	bf 92       	push	r11
    568a:	cf 92       	push	r12
    568c:	df 92       	push	r13
    568e:	ef 92       	push	r14
    5690:	ff 92       	push	r15
    5692:	0f 93       	push	r16
    5694:	1f 93       	push	r17
    5696:	df 93       	push	r29
    5698:	cf 93       	push	r28
    569a:	cd b7       	in	r28, 0x3d	; 61
    569c:	de b7       	in	r29, 0x3e	; 62
    569e:	6c 97       	sbiw	r28, 0x1c	; 28
    56a0:	cd bf       	out	0x3d, r28	; 61
    56a2:	de bf       	out	0x3e, r29	; 62
    56a4:	69 83       	std	Y+1, r22	; 0x01
    56a6:	7a 83       	std	Y+2, r23	; 0x02
    56a8:	8b 83       	std	Y+3, r24	; 0x03
    56aa:	9c 83       	std	Y+4, r25	; 0x04
    56ac:	2d 83       	std	Y+5, r18	; 0x05
    56ae:	3e 83       	std	Y+6, r19	; 0x06
    56b0:	4f 83       	std	Y+7, r20	; 0x07
    56b2:	58 87       	std	Y+8, r21	; 0x08
    56b4:	e9 86       	std	Y+9, r14	; 0x09
    56b6:	fa 86       	std	Y+10, r15	; 0x0a
    56b8:	0b 87       	std	Y+11, r16	; 0x0b
    56ba:	1c 87       	std	Y+12, r17	; 0x0c
    56bc:	ad 86       	std	Y+13, r10	; 0x0d
    56be:	be 86       	std	Y+14, r11	; 0x0e
    56c0:	cf 86       	std	Y+15, r12	; 0x0f
    56c2:	d8 8a       	std	Y+16, r13	; 0x10
    56c4:	89 8a       	std	Y+17, r8	; 0x11
    56c6:	9a 8a       	std	Y+18, r9	; 0x12
	// load the arc struct
	ma.theta = theta;
    56c8:	89 81       	ldd	r24, Y+1	; 0x01
    56ca:	9a 81       	ldd	r25, Y+2	; 0x02
    56cc:	ab 81       	ldd	r26, Y+3	; 0x03
    56ce:	bc 81       	ldd	r27, Y+4	; 0x04
    56d0:	80 93 0f 25 	sts	0x250F, r24
    56d4:	90 93 10 25 	sts	0x2510, r25
    56d8:	a0 93 11 25 	sts	0x2511, r26
    56dc:	b0 93 12 25 	sts	0x2512, r27
	ma.radius = radius;
    56e0:	89 85       	ldd	r24, Y+9	; 0x09
    56e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    56e4:	ab 85       	ldd	r26, Y+11	; 0x0b
    56e6:	bc 85       	ldd	r27, Y+12	; 0x0c
    56e8:	80 93 13 25 	sts	0x2513, r24
    56ec:	90 93 14 25 	sts	0x2514, r25
    56f0:	a0 93 15 25 	sts	0x2515, r26
    56f4:	b0 93 16 25 	sts	0x2516, r27
	ma.angular_travel = angular_travel;
    56f8:	8d 81       	ldd	r24, Y+5	; 0x05
    56fa:	9e 81       	ldd	r25, Y+6	; 0x06
    56fc:	af 81       	ldd	r26, Y+7	; 0x07
    56fe:	b8 85       	ldd	r27, Y+8	; 0x08
    5700:	80 93 23 25 	sts	0x2523, r24
    5704:	90 93 24 25 	sts	0x2524, r25
    5708:	a0 93 25 25 	sts	0x2525, r26
    570c:	b0 93 26 25 	sts	0x2526, r27
	ma.linear_travel = linear_travel;
    5710:	8d 85       	ldd	r24, Y+13	; 0x0d
    5712:	9e 85       	ldd	r25, Y+14	; 0x0e
    5714:	af 85       	ldd	r26, Y+15	; 0x0f
    5716:	b8 89       	ldd	r27, Y+16	; 0x10
    5718:	80 93 27 25 	sts	0x2527, r24
    571c:	90 93 28 25 	sts	0x2528, r25
    5720:	a0 93 29 25 	sts	0x2529, r26
    5724:	b0 93 2a 25 	sts	0x252A, r27
	ma.feed_rate = feed_rate;
    5728:	88 a9       	ldd	r24, Y+48	; 0x30
    572a:	99 a9       	ldd	r25, Y+49	; 0x31
    572c:	aa a9       	ldd	r26, Y+50	; 0x32
    572e:	bb a9       	ldd	r27, Y+51	; 0x33
    5730:	80 93 17 25 	sts	0x2517, r24
    5734:	90 93 18 25 	sts	0x2518, r25
    5738:	a0 93 19 25 	sts	0x2519, r26
    573c:	b0 93 1a 25 	sts	0x251A, r27
	ma.invert_feed_rate = invert_feed_rate;
    5740:	8c a9       	ldd	r24, Y+52	; 0x34
    5742:	9d a9       	ldd	r25, Y+53	; 0x35
    5744:	80 93 ef 24 	sts	0x24EF, r24
    5748:	90 93 f0 24 	sts	0x24F0, r25
	ma.axis_1 = axis_1;
    574c:	89 89       	ldd	r24, Y+17	; 0x11
    574e:	9a 89       	ldd	r25, Y+18	; 0x12
    5750:	80 93 f1 24 	sts	0x24F1, r24
    5754:	90 93 f2 24 	sts	0x24F2, r25
	ma.axis_2 = axis_2;
    5758:	8c a5       	ldd	r24, Y+44	; 0x2c
    575a:	9d a5       	ldd	r25, Y+45	; 0x2d
    575c:	80 93 f3 24 	sts	0x24F3, r24
    5760:	90 93 f4 24 	sts	0x24F4, r25
	ma.axis_linear = axis_linear;
    5764:	8e a5       	ldd	r24, Y+46	; 0x2e
    5766:	9f a5       	ldd	r25, Y+47	; 0x2f
    5768:	80 93 f5 24 	sts	0x24F5, r24
    576c:	90 93 f6 24 	sts	0x24F6, r25
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    5770:	80 91 23 25 	lds	r24, 0x2523
    5774:	90 91 24 25 	lds	r25, 0x2524
    5778:	a0 91 25 25 	lds	r26, 0x2525
    577c:	b0 91 26 25 	lds	r27, 0x2526
    5780:	20 91 13 25 	lds	r18, 0x2513
    5784:	30 91 14 25 	lds	r19, 0x2514
    5788:	40 91 15 25 	lds	r20, 0x2515
    578c:	50 91 16 25 	lds	r21, 0x2516
    5790:	bc 01       	movw	r22, r24
    5792:	cd 01       	movw	r24, r26
    5794:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    5798:	dc 01       	movw	r26, r24
    579a:	cb 01       	movw	r24, r22
    579c:	89 8f       	std	Y+25, r24	; 0x19
    579e:	9a 8f       	std	Y+26, r25	; 0x1a
    57a0:	ab 8f       	std	Y+27, r26	; 0x1b
    57a2:	bc 8f       	std	Y+28, r27	; 0x1c
    57a4:	80 91 27 25 	lds	r24, 0x2527
    57a8:	90 91 28 25 	lds	r25, 0x2528
    57ac:	a0 91 29 25 	lds	r26, 0x2529
    57b0:	b0 91 2a 25 	lds	r27, 0x252A
    57b4:	bc 01       	movw	r22, r24
    57b6:	cd 01       	movw	r24, r26
    57b8:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <__fixsfsi>
    57bc:	dc 01       	movw	r26, r24
    57be:	cb 01       	movw	r24, r22
    57c0:	8d 8b       	std	Y+21, r24	; 0x15
    57c2:	9e 8b       	std	Y+22, r25	; 0x16
    57c4:	af 8b       	std	Y+23, r26	; 0x17
    57c6:	b8 8f       	std	Y+24, r27	; 0x18
    57c8:	8d 89       	ldd	r24, Y+21	; 0x15
    57ca:	9e 89       	ldd	r25, Y+22	; 0x16
    57cc:	af 89       	ldd	r26, Y+23	; 0x17
    57ce:	b8 8d       	ldd	r27, Y+24	; 0x18
    57d0:	bb 23       	and	r27, r27
    57d2:	7c f4       	brge	.+30     	; 0x57f2 <mc_arc+0x170>
    57d4:	8d 89       	ldd	r24, Y+21	; 0x15
    57d6:	9e 89       	ldd	r25, Y+22	; 0x16
    57d8:	af 89       	ldd	r26, Y+23	; 0x17
    57da:	b8 8d       	ldd	r27, Y+24	; 0x18
    57dc:	b0 95       	com	r27
    57de:	a0 95       	com	r26
    57e0:	90 95       	com	r25
    57e2:	81 95       	neg	r24
    57e4:	9f 4f       	sbci	r25, 0xFF	; 255
    57e6:	af 4f       	sbci	r26, 0xFF	; 255
    57e8:	bf 4f       	sbci	r27, 0xFF	; 255
    57ea:	8d 8b       	std	Y+21, r24	; 0x15
    57ec:	9e 8b       	std	Y+22, r25	; 0x16
    57ee:	af 8b       	std	Y+23, r26	; 0x17
    57f0:	b8 8f       	std	Y+24, r27	; 0x18
    57f2:	6d 89       	ldd	r22, Y+21	; 0x15
    57f4:	7e 89       	ldd	r23, Y+22	; 0x16
    57f6:	8f 89       	ldd	r24, Y+23	; 0x17
    57f8:	98 8d       	ldd	r25, Y+24	; 0x18
    57fa:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    57fe:	9b 01       	movw	r18, r22
    5800:	ac 01       	movw	r20, r24
    5802:	69 8d       	ldd	r22, Y+25	; 0x19
    5804:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5806:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5808:	9c 8d       	ldd	r25, Y+28	; 0x1c
    580a:	0e 94 3b 5d 	call	0xba76	; 0xba76 <hypot>
    580e:	dc 01       	movw	r26, r24
    5810:	cb 01       	movw	r24, r22
    5812:	80 93 03 25 	sts	0x2503, r24
    5816:	90 93 04 25 	sts	0x2504, r25
    581a:	a0 93 05 25 	sts	0x2505, r26
    581e:	b0 93 06 25 	sts	0x2506, r27
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    5822:	80 91 03 25 	lds	r24, 0x2503
    5826:	90 91 04 25 	lds	r25, 0x2504
    582a:	a0 91 05 25 	lds	r26, 0x2505
    582e:	b0 91 06 25 	lds	r27, 0x2506
    5832:	bc 01       	movw	r22, r24
    5834:	cd 01       	movw	r24, r26
    5836:	2a e0       	ldi	r18, 0x0A	; 10
    5838:	37 ed       	ldi	r19, 0xD7	; 215
    583a:	43 e2       	ldi	r20, 0x23	; 35
    583c:	5c e3       	ldi	r21, 0x3C	; 60
    583e:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <__cmpsf2>
    5842:	88 23       	and	r24, r24
    5844:	2c f4       	brge	.+10     	; 0x5850 <mc_arc+0x1ce>
		return (TG_ARC_ERROR);						// arc specification error
    5846:	a0 e1       	ldi	r26, 0x10	; 16
    5848:	b0 e0       	ldi	r27, 0x00	; 0
    584a:	ab 8b       	std	Y+19, r26	; 0x13
    584c:	bc 8b       	std	Y+20, r27	; 0x14
    584e:	92 c1       	rjmp	.+804    	; 0x5b74 <mc_arc+0x4f2>
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    5850:	80 91 03 25 	lds	r24, 0x2503
    5854:	90 91 04 25 	lds	r25, 0x2504
    5858:	a0 91 05 25 	lds	r26, 0x2505
    585c:	b0 91 06 25 	lds	r27, 0x2506
    5860:	20 91 7c 24 	lds	r18, 0x247C
    5864:	30 91 7d 24 	lds	r19, 0x247D
    5868:	40 91 7e 24 	lds	r20, 0x247E
    586c:	50 91 7f 24 	lds	r21, 0x247F
    5870:	bc 01       	movw	r22, r24
    5872:	cd 01       	movw	r24, r26
    5874:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    5878:	dc 01       	movw	r26, r24
    587a:	cb 01       	movw	r24, r22
    587c:	bc 01       	movw	r22, r24
    587e:	cd 01       	movw	r24, r26
    5880:	0e 94 2b 5b 	call	0xb656	; 0xb656 <ceil>
    5884:	dc 01       	movw	r26, r24
    5886:	cb 01       	movw	r24, r22
    5888:	bc 01       	movw	r22, r24
    588a:	cd 01       	movw	r24, r26
    588c:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <__fixsfsi>
    5890:	dc 01       	movw	r26, r24
    5892:	cb 01       	movw	r24, r22
    5894:	80 93 eb 24 	sts	0x24EB, r24
    5898:	90 93 ec 24 	sts	0x24EC, r25
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    589c:	80 91 ef 24 	lds	r24, 0x24EF
    58a0:	90 91 f0 24 	lds	r25, 0x24F0
    58a4:	00 97       	sbiw	r24, 0x00	; 0
    58a6:	21 f1       	breq	.+72     	; 0x58f0 <mc_arc+0x26e>
		ma.feed_rate *= ma.segments; 
    58a8:	e0 90 17 25 	lds	r14, 0x2517
    58ac:	f0 90 18 25 	lds	r15, 0x2518
    58b0:	00 91 19 25 	lds	r16, 0x2519
    58b4:	10 91 1a 25 	lds	r17, 0x251A
    58b8:	80 91 eb 24 	lds	r24, 0x24EB
    58bc:	90 91 ec 24 	lds	r25, 0x24EC
    58c0:	aa 27       	eor	r26, r26
    58c2:	97 fd       	sbrc	r25, 7
    58c4:	a0 95       	com	r26
    58c6:	ba 2f       	mov	r27, r26
    58c8:	bc 01       	movw	r22, r24
    58ca:	cd 01       	movw	r24, r26
    58cc:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    58d0:	9b 01       	movw	r18, r22
    58d2:	ac 01       	movw	r20, r24
    58d4:	c8 01       	movw	r24, r16
    58d6:	b7 01       	movw	r22, r14
    58d8:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    58dc:	dc 01       	movw	r26, r24
    58de:	cb 01       	movw	r24, r22
    58e0:	80 93 17 25 	sts	0x2517, r24
    58e4:	90 93 18 25 	sts	0x2518, r25
    58e8:	a0 93 19 25 	sts	0x2519, r26
    58ec:	b0 93 1a 25 	sts	0x251A, r27
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    58f0:	e0 90 23 25 	lds	r14, 0x2523
    58f4:	f0 90 24 25 	lds	r15, 0x2524
    58f8:	00 91 25 25 	lds	r16, 0x2525
    58fc:	10 91 26 25 	lds	r17, 0x2526
    5900:	80 91 eb 24 	lds	r24, 0x24EB
    5904:	90 91 ec 24 	lds	r25, 0x24EC
    5908:	aa 27       	eor	r26, r26
    590a:	97 fd       	sbrc	r25, 7
    590c:	a0 95       	com	r26
    590e:	ba 2f       	mov	r27, r26
    5910:	bc 01       	movw	r22, r24
    5912:	cd 01       	movw	r24, r26
    5914:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    5918:	9b 01       	movw	r18, r22
    591a:	ac 01       	movw	r20, r24
    591c:	c8 01       	movw	r24, r16
    591e:	b7 01       	movw	r22, r14
    5920:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    5924:	dc 01       	movw	r26, r24
    5926:	cb 01       	movw	r24, r22
    5928:	80 93 1b 25 	sts	0x251B, r24
    592c:	90 93 1c 25 	sts	0x251C, r25
    5930:	a0 93 1d 25 	sts	0x251D, r26
    5934:	b0 93 1e 25 	sts	0x251E, r27
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    5938:	e0 90 27 25 	lds	r14, 0x2527
    593c:	f0 90 28 25 	lds	r15, 0x2528
    5940:	00 91 29 25 	lds	r16, 0x2529
    5944:	10 91 2a 25 	lds	r17, 0x252A
    5948:	80 91 eb 24 	lds	r24, 0x24EB
    594c:	90 91 ec 24 	lds	r25, 0x24EC
    5950:	aa 27       	eor	r26, r26
    5952:	97 fd       	sbrc	r25, 7
    5954:	a0 95       	com	r26
    5956:	ba 2f       	mov	r27, r26
    5958:	bc 01       	movw	r22, r24
    595a:	cd 01       	movw	r24, r26
    595c:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    5960:	9b 01       	movw	r18, r22
    5962:	ac 01       	movw	r20, r24
    5964:	c8 01       	movw	r24, r16
    5966:	b7 01       	movw	r22, r14
    5968:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    596c:	dc 01       	movw	r26, r24
    596e:	cb 01       	movw	r24, r22
    5970:	80 93 1f 25 	sts	0x251F, r24
    5974:	90 93 20 25 	sts	0x2520, r25
    5978:	a0 93 21 25 	sts	0x2521, r26
    597c:	b0 93 22 25 	sts	0x2522, r27
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    5980:	80 91 f1 24 	lds	r24, 0x24F1
    5984:	90 91 f2 24 	lds	r25, 0x24F2
    5988:	88 0f       	add	r24, r24
    598a:	99 1f       	adc	r25, r25
    598c:	88 0f       	add	r24, r24
    598e:	99 1f       	adc	r25, r25
    5990:	fc 01       	movw	r30, r24
    5992:	eb 57       	subi	r30, 0x7B	; 123
    5994:	fe 4d       	sbci	r31, 0xDE	; 222
    5996:	80 81       	ld	r24, Z
    5998:	91 81       	ldd	r25, Z+1	; 0x01
    599a:	a2 81       	ldd	r26, Z+2	; 0x02
    599c:	b3 81       	ldd	r27, Z+3	; 0x03
    599e:	bc 01       	movw	r22, r24
    59a0:	cd 01       	movw	r24, r26
    59a2:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    59a6:	7b 01       	movw	r14, r22
    59a8:	8c 01       	movw	r16, r24
    59aa:	20 91 f1 24 	lds	r18, 0x24F1
    59ae:	30 91 f2 24 	lds	r19, 0x24F2
    59b2:	c9 01       	movw	r24, r18
    59b4:	88 0f       	add	r24, r24
    59b6:	99 1f       	adc	r25, r25
    59b8:	82 0f       	add	r24, r18
    59ba:	93 1f       	adc	r25, r19
    59bc:	88 0f       	add	r24, r24
    59be:	99 1f       	adc	r25, r25
    59c0:	88 0f       	add	r24, r24
    59c2:	99 1f       	adc	r25, r25
    59c4:	88 0f       	add	r24, r24
    59c6:	99 1f       	adc	r25, r25
    59c8:	fc 01       	movw	r30, r24
    59ca:	e5 56       	subi	r30, 0x65	; 101
    59cc:	fb 4d       	sbci	r31, 0xDB	; 219
    59ce:	20 81       	ld	r18, Z
    59d0:	31 81       	ldd	r19, Z+1	; 0x01
    59d2:	42 81       	ldd	r20, Z+2	; 0x02
    59d4:	53 81       	ldd	r21, Z+3	; 0x03
    59d6:	c8 01       	movw	r24, r16
    59d8:	b7 01       	movw	r22, r14
    59da:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    59de:	dc 01       	movw	r26, r24
    59e0:	cb 01       	movw	r24, r22
    59e2:	7c 01       	movw	r14, r24
    59e4:	8d 01       	movw	r16, r26
    59e6:	80 91 0f 25 	lds	r24, 0x250F
    59ea:	90 91 10 25 	lds	r25, 0x2510
    59ee:	a0 91 11 25 	lds	r26, 0x2511
    59f2:	b0 91 12 25 	lds	r27, 0x2512
    59f6:	bc 01       	movw	r22, r24
    59f8:	cd 01       	movw	r24, r26
    59fa:	0e 94 63 5e 	call	0xbcc6	; 0xbcc6 <sin>
    59fe:	dc 01       	movw	r26, r24
    5a00:	cb 01       	movw	r24, r22
    5a02:	20 91 13 25 	lds	r18, 0x2513
    5a06:	30 91 14 25 	lds	r19, 0x2514
    5a0a:	40 91 15 25 	lds	r20, 0x2515
    5a0e:	50 91 16 25 	lds	r21, 0x2516
    5a12:	bc 01       	movw	r22, r24
    5a14:	cd 01       	movw	r24, r26
    5a16:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    5a1a:	dc 01       	movw	r26, r24
    5a1c:	cb 01       	movw	r24, r22
    5a1e:	9c 01       	movw	r18, r24
    5a20:	ad 01       	movw	r20, r26
    5a22:	c8 01       	movw	r24, r16
    5a24:	b7 01       	movw	r22, r14
    5a26:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    5a2a:	dc 01       	movw	r26, r24
    5a2c:	cb 01       	movw	r24, r22
    5a2e:	80 93 07 25 	sts	0x2507, r24
    5a32:	90 93 08 25 	sts	0x2508, r25
    5a36:	a0 93 09 25 	sts	0x2509, r26
    5a3a:	b0 93 0a 25 	sts	0x250A, r27
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    5a3e:	80 91 f3 24 	lds	r24, 0x24F3
    5a42:	90 91 f4 24 	lds	r25, 0x24F4
    5a46:	88 0f       	add	r24, r24
    5a48:	99 1f       	adc	r25, r25
    5a4a:	88 0f       	add	r24, r24
    5a4c:	99 1f       	adc	r25, r25
    5a4e:	fc 01       	movw	r30, r24
    5a50:	eb 57       	subi	r30, 0x7B	; 123
    5a52:	fe 4d       	sbci	r31, 0xDE	; 222
    5a54:	80 81       	ld	r24, Z
    5a56:	91 81       	ldd	r25, Z+1	; 0x01
    5a58:	a2 81       	ldd	r26, Z+2	; 0x02
    5a5a:	b3 81       	ldd	r27, Z+3	; 0x03
    5a5c:	bc 01       	movw	r22, r24
    5a5e:	cd 01       	movw	r24, r26
    5a60:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    5a64:	7b 01       	movw	r14, r22
    5a66:	8c 01       	movw	r16, r24
    5a68:	20 91 f3 24 	lds	r18, 0x24F3
    5a6c:	30 91 f4 24 	lds	r19, 0x24F4
    5a70:	c9 01       	movw	r24, r18
    5a72:	88 0f       	add	r24, r24
    5a74:	99 1f       	adc	r25, r25
    5a76:	82 0f       	add	r24, r18
    5a78:	93 1f       	adc	r25, r19
    5a7a:	88 0f       	add	r24, r24
    5a7c:	99 1f       	adc	r25, r25
    5a7e:	88 0f       	add	r24, r24
    5a80:	99 1f       	adc	r25, r25
    5a82:	88 0f       	add	r24, r24
    5a84:	99 1f       	adc	r25, r25
    5a86:	fc 01       	movw	r30, r24
    5a88:	e5 56       	subi	r30, 0x65	; 101
    5a8a:	fb 4d       	sbci	r31, 0xDB	; 219
    5a8c:	20 81       	ld	r18, Z
    5a8e:	31 81       	ldd	r19, Z+1	; 0x01
    5a90:	42 81       	ldd	r20, Z+2	; 0x02
    5a92:	53 81       	ldd	r21, Z+3	; 0x03
    5a94:	c8 01       	movw	r24, r16
    5a96:	b7 01       	movw	r22, r14
    5a98:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    5a9c:	dc 01       	movw	r26, r24
    5a9e:	cb 01       	movw	r24, r22
    5aa0:	7c 01       	movw	r14, r24
    5aa2:	8d 01       	movw	r16, r26
    5aa4:	80 91 0f 25 	lds	r24, 0x250F
    5aa8:	90 91 10 25 	lds	r25, 0x2510
    5aac:	a0 91 11 25 	lds	r26, 0x2511
    5ab0:	b0 91 12 25 	lds	r27, 0x2512
    5ab4:	bc 01       	movw	r22, r24
    5ab6:	cd 01       	movw	r24, r26
    5ab8:	0e 94 42 5b 	call	0xb684	; 0xb684 <cos>
    5abc:	dc 01       	movw	r26, r24
    5abe:	cb 01       	movw	r24, r22
    5ac0:	20 91 13 25 	lds	r18, 0x2513
    5ac4:	30 91 14 25 	lds	r19, 0x2514
    5ac8:	40 91 15 25 	lds	r20, 0x2515
    5acc:	50 91 16 25 	lds	r21, 0x2516
    5ad0:	bc 01       	movw	r22, r24
    5ad2:	cd 01       	movw	r24, r26
    5ad4:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    5ad8:	dc 01       	movw	r26, r24
    5ada:	cb 01       	movw	r24, r22
    5adc:	9c 01       	movw	r18, r24
    5ade:	ad 01       	movw	r20, r26
    5ae0:	c8 01       	movw	r24, r16
    5ae2:	b7 01       	movw	r22, r14
    5ae4:	0e 94 9e 5a 	call	0xb53c	; 0xb53c <__subsf3>
    5ae8:	dc 01       	movw	r26, r24
    5aea:	cb 01       	movw	r24, r22
    5aec:	80 93 0b 25 	sts	0x250B, r24
    5af0:	90 93 0c 25 	sts	0x250C, r25
    5af4:	a0 93 0d 25 	sts	0x250D, r26
    5af8:	b0 93 0e 25 	sts	0x250E, r27

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    5afc:	00 91 f5 24 	lds	r16, 0x24F5
    5b00:	10 91 f6 24 	lds	r17, 0x24F6
    5b04:	80 91 f5 24 	lds	r24, 0x24F5
    5b08:	90 91 f6 24 	lds	r25, 0x24F6
    5b0c:	88 0f       	add	r24, r24
    5b0e:	99 1f       	adc	r25, r25
    5b10:	88 0f       	add	r24, r24
    5b12:	99 1f       	adc	r25, r25
    5b14:	fc 01       	movw	r30, r24
    5b16:	eb 57       	subi	r30, 0x7B	; 123
    5b18:	fe 4d       	sbci	r31, 0xDE	; 222
    5b1a:	80 81       	ld	r24, Z
    5b1c:	91 81       	ldd	r25, Z+1	; 0x01
    5b1e:	a2 81       	ldd	r26, Z+2	; 0x02
    5b20:	b3 81       	ldd	r27, Z+3	; 0x03
    5b22:	bc 01       	movw	r22, r24
    5b24:	cd 01       	movw	r24, r26
    5b26:	0e 94 e0 5b 	call	0xb7c0	; 0xb7c0 <__floatsisf>
    5b2a:	dc 01       	movw	r26, r24
    5b2c:	cb 01       	movw	r24, r22
    5b2e:	20 91 cb 24 	lds	r18, 0x24CB
    5b32:	30 91 cc 24 	lds	r19, 0x24CC
    5b36:	40 91 cd 24 	lds	r20, 0x24CD
    5b3a:	50 91 ce 24 	lds	r21, 0x24CE
    5b3e:	bc 01       	movw	r22, r24
    5b40:	cd 01       	movw	r24, r26
    5b42:	0e 94 45 5b 	call	0xb68a	; 0xb68a <__divsf3>
    5b46:	dc 01       	movw	r26, r24
    5b48:	cb 01       	movw	r24, r22
    5b4a:	9c 01       	movw	r18, r24
    5b4c:	ad 01       	movw	r20, r26
    5b4e:	c8 01       	movw	r24, r16
    5b50:	88 0f       	add	r24, r24
    5b52:	99 1f       	adc	r25, r25
    5b54:	88 0f       	add	r24, r24
    5b56:	99 1f       	adc	r25, r25
    5b58:	fc 01       	movw	r30, r24
    5b5a:	e9 50       	subi	r30, 0x09	; 9
    5b5c:	fb 4d       	sbci	r31, 0xDB	; 219
    5b5e:	20 83       	st	Z, r18
    5b60:	31 83       	std	Z+1, r19	; 0x01
    5b62:	42 83       	std	Z+2, r20	; 0x02
    5b64:	53 83       	std	Z+3, r21	; 0x03
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    5b66:	81 e0       	ldi	r24, 0x01	; 1
    5b68:	80 93 ea 24 	sts	0x24EA, r24
	return (mc_arc_continue());
    5b6c:	0e 94 cc 2d 	call	0x5b98	; 0x5b98 <mc_arc_continue>
    5b70:	8b 8b       	std	Y+19, r24	; 0x13
    5b72:	9c 8b       	std	Y+20, r25	; 0x14
    5b74:	8b 89       	ldd	r24, Y+19	; 0x13
    5b76:	9c 89       	ldd	r25, Y+20	; 0x14
}
    5b78:	6c 96       	adiw	r28, 0x1c	; 28
    5b7a:	cd bf       	out	0x3d, r28	; 61
    5b7c:	de bf       	out	0x3e, r29	; 62
    5b7e:	cf 91       	pop	r28
    5b80:	df 91       	pop	r29
    5b82:	1f 91       	pop	r17
    5b84:	0f 91       	pop	r16
    5b86:	ff 90       	pop	r15
    5b88:	ef 90       	pop	r14
    5b8a:	df 90       	pop	r13
    5b8c:	cf 90       	pop	r12
    5b8e:	bf 90       	pop	r11
    5b90:	af 90       	pop	r10
    5b92:	9f 90       	pop	r9
    5b94:	8f 90       	pop	r8
    5b96:	08 95       	ret

00005b98 <mc_arc_continue>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continue() 
{
    5b98:	8f 92       	push	r8
    5b9a:	9f 92       	push	r9
    5b9c:	af 92       	push	r10
    5b9e:	bf 92       	push	r11
    5ba0:	cf 92       	push	r12
    5ba2:	df 92       	push	r13
    5ba4:	ef 92       	push	r14
    5ba6:	ff 92       	push	r15
    5ba8:	0f 93       	push	r16
    5baa:	1f 93       	push	r17
    5bac:	df 93       	push	r29
    5bae:	cf 93       	push	r28
    5bb0:	0f 92       	push	r0
    5bb2:	0f 92       	push	r0
    5bb4:	cd b7       	in	r28, 0x3d	; 61
    5bb6:	de b7       	in	r29, 0x3e	; 62
	if (ma.arc_state == MC_STATE_OFF) {
    5bb8:	80 91 ea 24 	lds	r24, 0x24EA
    5bbc:	88 23       	and	r24, r24
    5bbe:	29 f4       	brne	.+10     	; 0x5bca <mc_arc_continue+0x32>
		return (TG_NOOP);						// return NULL for non-started arc
    5bc0:	82 e0       	ldi	r24, 0x02	; 2
    5bc2:	90 e0       	ldi	r25, 0x00	; 0
    5bc4:	89 83       	std	Y+1, r24	; 0x01
    5bc6:	9a 83       	std	Y+2, r25	; 0x02
    5bc8:	21 c1       	rjmp	.+578    	; 0x5e0c <mc_arc_continue+0x274>
	} else if (ma.arc_state == MC_STATE_NEW) {
    5bca:	80 91 ea 24 	lds	r24, 0x24EA
    5bce:	81 30       	cpi	r24, 0x01	; 1
    5bd0:	09 f0       	breq	.+2      	; 0x5bd4 <mc_arc_continue+0x3c>
    5bd2:	0c c1       	rjmp	.+536    	; 0x5dec <mc_arc_continue+0x254>
		ma.segment_counter=0;
    5bd4:	10 92 ed 24 	sts	0x24ED, r1
    5bd8:	10 92 ee 24 	sts	0x24EE, r1
		ma.arc_state = MC_STATE_RUNNING;
    5bdc:	82 e0       	ldi	r24, 0x02	; 2
    5bde:	80 93 ea 24 	sts	0x24EA, r24
    5be2:	04 c1       	rjmp	.+520    	; 0x5dec <mc_arc_continue+0x254>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    5be4:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <mv_test_move_buffer_full>
    5be8:	88 23       	and	r24, r24
    5bea:	29 f0       	breq	.+10     	; 0x5bf6 <mc_arc_continue+0x5e>
			return (TG_EAGAIN);
    5bec:	81 e0       	ldi	r24, 0x01	; 1
    5bee:	90 e0       	ldi	r25, 0x00	; 0
    5bf0:	89 83       	std	Y+1, r24	; 0x01
    5bf2:	9a 83       	std	Y+2, r25	; 0x02
    5bf4:	0b c1       	rjmp	.+534    	; 0x5e0c <mc_arc_continue+0x274>
		}
		ma.segment_counter++;
    5bf6:	80 91 ed 24 	lds	r24, 0x24ED
    5bfa:	90 91 ee 24 	lds	r25, 0x24EE
    5bfe:	01 96       	adiw	r24, 0x01	; 1
    5c00:	80 93 ed 24 	sts	0x24ED, r24
    5c04:	90 93 ee 24 	sts	0x24EE, r25
		ma.theta += ma.theta_per_segment;
    5c08:	80 91 0f 25 	lds	r24, 0x250F
    5c0c:	90 91 10 25 	lds	r25, 0x2510
    5c10:	a0 91 11 25 	lds	r26, 0x2511
    5c14:	b0 91 12 25 	lds	r27, 0x2512
    5c18:	20 91 1b 25 	lds	r18, 0x251B
    5c1c:	30 91 1c 25 	lds	r19, 0x251C
    5c20:	40 91 1d 25 	lds	r20, 0x251D
    5c24:	50 91 1e 25 	lds	r21, 0x251E
    5c28:	bc 01       	movw	r22, r24
    5c2a:	cd 01       	movw	r24, r26
    5c2c:	0e 94 9f 5a 	call	0xb53e	; 0xb53e <__addsf3>
    5c30:	dc 01       	movw	r26, r24
    5c32:	cb 01       	movw	r24, r22
    5c34:	80 93 0f 25 	sts	0x250F, r24
    5c38:	90 93 10 25 	sts	0x2510, r25
    5c3c:	a0 93 11 25 	sts	0x2511, r26
    5c40:	b0 93 12 25 	sts	0x2512, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    5c44:	c0 90 f1 24 	lds	r12, 0x24F1
    5c48:	d0 90 f2 24 	lds	r13, 0x24F2
    5c4c:	e0 90 07 25 	lds	r14, 0x2507
    5c50:	f0 90 08 25 	lds	r15, 0x2508
    5c54:	00 91 09 25 	lds	r16, 0x2509
    5c58:	10 91 0a 25 	lds	r17, 0x250A
    5c5c:	80 91 0f 25 	lds	r24, 0x250F
    5c60:	90 91 10 25 	lds	r25, 0x2510
    5c64:	a0 91 11 25 	lds	r26, 0x2511
    5c68:	b0 91 12 25 	lds	r27, 0x2512
    5c6c:	bc 01       	movw	r22, r24
    5c6e:	cd 01       	movw	r24, r26
    5c70:	0e 94 63 5e 	call	0xbcc6	; 0xbcc6 <sin>
    5c74:	dc 01       	movw	r26, r24
    5c76:	cb 01       	movw	r24, r22
    5c78:	20 91 13 25 	lds	r18, 0x2513
    5c7c:	30 91 14 25 	lds	r19, 0x2514
    5c80:	40 91 15 25 	lds	r20, 0x2515
    5c84:	50 91 16 25 	lds	r21, 0x2516
    5c88:	bc 01       	movw	r22, r24
    5c8a:	cd 01       	movw	r24, r26
    5c8c:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    5c90:	dc 01       	movw	r26, r24
    5c92:	cb 01       	movw	r24, r22
    5c94:	9c 01       	movw	r18, r24
    5c96:	ad 01       	movw	r20, r26
    5c98:	c8 01       	movw	r24, r16
    5c9a:	b7 01       	movw	r22, r14
    5c9c:	0e 94 9f 5a 	call	0xb53e	; 0xb53e <__addsf3>
    5ca0:	dc 01       	movw	r26, r24
    5ca2:	cb 01       	movw	r24, r22
    5ca4:	9c 01       	movw	r18, r24
    5ca6:	ad 01       	movw	r20, r26
    5ca8:	c6 01       	movw	r24, r12
    5caa:	88 0f       	add	r24, r24
    5cac:	99 1f       	adc	r25, r25
    5cae:	88 0f       	add	r24, r24
    5cb0:	99 1f       	adc	r25, r25
    5cb2:	fc 01       	movw	r30, r24
    5cb4:	e9 50       	subi	r30, 0x09	; 9
    5cb6:	fb 4d       	sbci	r31, 0xDB	; 219
    5cb8:	20 83       	st	Z, r18
    5cba:	31 83       	std	Z+1, r19	; 0x01
    5cbc:	42 83       	std	Z+2, r20	; 0x02
    5cbe:	53 83       	std	Z+3, r21	; 0x03
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    5cc0:	c0 90 f3 24 	lds	r12, 0x24F3
    5cc4:	d0 90 f4 24 	lds	r13, 0x24F4
    5cc8:	e0 90 0b 25 	lds	r14, 0x250B
    5ccc:	f0 90 0c 25 	lds	r15, 0x250C
    5cd0:	00 91 0d 25 	lds	r16, 0x250D
    5cd4:	10 91 0e 25 	lds	r17, 0x250E
    5cd8:	80 91 0f 25 	lds	r24, 0x250F
    5cdc:	90 91 10 25 	lds	r25, 0x2510
    5ce0:	a0 91 11 25 	lds	r26, 0x2511
    5ce4:	b0 91 12 25 	lds	r27, 0x2512
    5ce8:	bc 01       	movw	r22, r24
    5cea:	cd 01       	movw	r24, r26
    5cec:	0e 94 42 5b 	call	0xb684	; 0xb684 <cos>
    5cf0:	dc 01       	movw	r26, r24
    5cf2:	cb 01       	movw	r24, r22
    5cf4:	20 91 13 25 	lds	r18, 0x2513
    5cf8:	30 91 14 25 	lds	r19, 0x2514
    5cfc:	40 91 15 25 	lds	r20, 0x2515
    5d00:	50 91 16 25 	lds	r21, 0x2516
    5d04:	bc 01       	movw	r22, r24
    5d06:	cd 01       	movw	r24, r26
    5d08:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    5d0c:	dc 01       	movw	r26, r24
    5d0e:	cb 01       	movw	r24, r22
    5d10:	9c 01       	movw	r18, r24
    5d12:	ad 01       	movw	r20, r26
    5d14:	c8 01       	movw	r24, r16
    5d16:	b7 01       	movw	r22, r14
    5d18:	0e 94 9f 5a 	call	0xb53e	; 0xb53e <__addsf3>
    5d1c:	dc 01       	movw	r26, r24
    5d1e:	cb 01       	movw	r24, r22
    5d20:	9c 01       	movw	r18, r24
    5d22:	ad 01       	movw	r20, r26
    5d24:	c6 01       	movw	r24, r12
    5d26:	88 0f       	add	r24, r24
    5d28:	99 1f       	adc	r25, r25
    5d2a:	88 0f       	add	r24, r24
    5d2c:	99 1f       	adc	r25, r25
    5d2e:	fc 01       	movw	r30, r24
    5d30:	e9 50       	subi	r30, 0x09	; 9
    5d32:	fb 4d       	sbci	r31, 0xDB	; 219
    5d34:	20 83       	st	Z, r18
    5d36:	31 83       	std	Z+1, r19	; 0x01
    5d38:	42 83       	std	Z+2, r20	; 0x02
    5d3a:	53 83       	std	Z+3, r21	; 0x03
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    5d3c:	00 91 f5 24 	lds	r16, 0x24F5
    5d40:	10 91 f6 24 	lds	r17, 0x24F6
    5d44:	80 91 f5 24 	lds	r24, 0x24F5
    5d48:	90 91 f6 24 	lds	r25, 0x24F6
    5d4c:	88 0f       	add	r24, r24
    5d4e:	99 1f       	adc	r25, r25
    5d50:	88 0f       	add	r24, r24
    5d52:	99 1f       	adc	r25, r25
    5d54:	fc 01       	movw	r30, r24
    5d56:	e9 50       	subi	r30, 0x09	; 9
    5d58:	fb 4d       	sbci	r31, 0xDB	; 219
    5d5a:	80 81       	ld	r24, Z
    5d5c:	91 81       	ldd	r25, Z+1	; 0x01
    5d5e:	a2 81       	ldd	r26, Z+2	; 0x02
    5d60:	b3 81       	ldd	r27, Z+3	; 0x03
    5d62:	20 91 1f 25 	lds	r18, 0x251F
    5d66:	30 91 20 25 	lds	r19, 0x2520
    5d6a:	40 91 21 25 	lds	r20, 0x2521
    5d6e:	50 91 22 25 	lds	r21, 0x2522
    5d72:	bc 01       	movw	r22, r24
    5d74:	cd 01       	movw	r24, r26
    5d76:	0e 94 9f 5a 	call	0xb53e	; 0xb53e <__addsf3>
    5d7a:	dc 01       	movw	r26, r24
    5d7c:	cb 01       	movw	r24, r22
    5d7e:	9c 01       	movw	r18, r24
    5d80:	ad 01       	movw	r20, r26
    5d82:	c8 01       	movw	r24, r16
    5d84:	88 0f       	add	r24, r24
    5d86:	99 1f       	adc	r25, r25
    5d88:	88 0f       	add	r24, r24
    5d8a:	99 1f       	adc	r25, r25
    5d8c:	fc 01       	movw	r30, r24
    5d8e:	e9 50       	subi	r30, 0x09	; 9
    5d90:	fb 4d       	sbci	r31, 0xDB	; 219
    5d92:	20 83       	st	Z, r18
    5d94:	31 83       	std	Z+1, r19	; 0x01
    5d96:	42 83       	std	Z+2, r20	; 0x02
    5d98:	53 83       	std	Z+3, r21	; 0x03
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    5d9a:	80 91 f7 24 	lds	r24, 0x24F7
    5d9e:	90 91 f8 24 	lds	r25, 0x24F8
    5da2:	a0 91 f9 24 	lds	r26, 0x24F9
    5da6:	b0 91 fa 24 	lds	r27, 0x24FA
    5daa:	20 91 fb 24 	lds	r18, 0x24FB
    5dae:	30 91 fc 24 	lds	r19, 0x24FC
    5db2:	40 91 fd 24 	lds	r20, 0x24FD
    5db6:	50 91 fe 24 	lds	r21, 0x24FE
    5dba:	e0 90 ff 24 	lds	r14, 0x24FF
    5dbe:	f0 90 00 25 	lds	r15, 0x2500
    5dc2:	00 91 01 25 	lds	r16, 0x2501
    5dc6:	10 91 02 25 	lds	r17, 0x2502
    5dca:	a0 90 17 25 	lds	r10, 0x2517
    5dce:	b0 90 18 25 	lds	r11, 0x2518
    5dd2:	c0 90 19 25 	lds	r12, 0x2519
    5dd6:	d0 90 1a 25 	lds	r13, 0x251A
    5dda:	e0 91 ef 24 	lds	r30, 0x24EF
    5dde:	f0 91 f0 24 	lds	r31, 0x24F0
    5de2:	bc 01       	movw	r22, r24
    5de4:	cd 01       	movw	r24, r26
    5de6:	4f 01       	movw	r8, r30
    5de8:	0e 94 89 25 	call	0x4b12	; 0x4b12 <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    5dec:	20 91 ed 24 	lds	r18, 0x24ED
    5df0:	30 91 ee 24 	lds	r19, 0x24EE
    5df4:	80 91 eb 24 	lds	r24, 0x24EB
    5df8:	90 91 ec 24 	lds	r25, 0x24EC
    5dfc:	82 17       	cp	r24, r18
    5dfe:	93 07       	cpc	r25, r19
    5e00:	0c f0       	brlt	.+2      	; 0x5e04 <mc_arc_continue+0x26c>
    5e02:	f0 ce       	rjmp	.-544    	; 0x5be4 <mc_arc_continue+0x4c>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    5e04:	10 92 ea 24 	sts	0x24EA, r1
	return (TG_OK);
    5e08:	19 82       	std	Y+1, r1	; 0x01
    5e0a:	1a 82       	std	Y+2, r1	; 0x02
    5e0c:	89 81       	ldd	r24, Y+1	; 0x01
    5e0e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5e10:	0f 90       	pop	r0
    5e12:	0f 90       	pop	r0
    5e14:	cf 91       	pop	r28
    5e16:	df 91       	pop	r29
    5e18:	1f 91       	pop	r17
    5e1a:	0f 91       	pop	r16
    5e1c:	ff 90       	pop	r15
    5e1e:	ef 90       	pop	r14
    5e20:	df 90       	pop	r13
    5e22:	cf 90       	pop	r12
    5e24:	bf 90       	pop	r11
    5e26:	af 90       	pop	r10
    5e28:	9f 90       	pop	r9
    5e2a:	8f 90       	pop	r8
    5e2c:	08 95       	ret

00005e2e <mc_dwell>:
 *
 * NOTE: It's not necessary to set the target as this is set correctly in the Gcode. 
 */

int mc_dwell(double seconds) 
{
    5e2e:	df 93       	push	r29
    5e30:	cf 93       	push	r28
    5e32:	00 d0       	rcall	.+0      	; 0x5e34 <mc_dwell+0x6>
    5e34:	0f 92       	push	r0
    5e36:	cd b7       	in	r28, 0x3d	; 61
    5e38:	de b7       	in	r29, 0x3e	; 62
    5e3a:	69 83       	std	Y+1, r22	; 0x01
    5e3c:	7a 83       	std	Y+2, r23	; 0x02
    5e3e:	8b 83       	std	Y+3, r24	; 0x03
    5e40:	9c 83       	std	Y+4, r25	; 0x04
	mc.steps[X] = 0;
    5e42:	10 92 9d 21 	sts	0x219D, r1
    5e46:	10 92 9e 21 	sts	0x219E, r1
    5e4a:	10 92 9f 21 	sts	0x219F, r1
    5e4e:	10 92 a0 21 	sts	0x21A0, r1
	mc.steps[Y] = 0;
    5e52:	10 92 a1 21 	sts	0x21A1, r1
    5e56:	10 92 a2 21 	sts	0x21A2, r1
    5e5a:	10 92 a3 21 	sts	0x21A3, r1
    5e5e:	10 92 a4 21 	sts	0x21A4, r1
	mc.steps[Z] = 0;
    5e62:	10 92 a5 21 	sts	0x21A5, r1
    5e66:	10 92 a6 21 	sts	0x21A6, r1
    5e6a:	10 92 a7 21 	sts	0x21A7, r1
    5e6e:	10 92 a8 21 	sts	0x21A8, r1
	mc.mm_of_travel = 0;	// not actually used, but makes debug make more sense
    5e72:	80 e0       	ldi	r24, 0x00	; 0
    5e74:	90 e0       	ldi	r25, 0x00	; 0
    5e76:	a0 e0       	ldi	r26, 0x00	; 0
    5e78:	b0 e0       	ldi	r27, 0x00	; 0
    5e7a:	80 93 ad 21 	sts	0x21AD, r24
    5e7e:	90 93 ae 21 	sts	0x21AE, r25
    5e82:	a0 93 af 21 	sts	0x21AF, r26
    5e86:	b0 93 b0 21 	sts	0x21B0, r27
	mc.microseconds = trunc(seconds*1000000);
    5e8a:	69 81       	ldd	r22, Y+1	; 0x01
    5e8c:	7a 81       	ldd	r23, Y+2	; 0x02
    5e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    5e90:	9c 81       	ldd	r25, Y+4	; 0x04
    5e92:	20 e0       	ldi	r18, 0x00	; 0
    5e94:	34 e2       	ldi	r19, 0x24	; 36
    5e96:	44 e7       	ldi	r20, 0x74	; 116
    5e98:	59 e4       	ldi	r21, 0x49	; 73
    5e9a:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    5e9e:	dc 01       	movw	r26, r24
    5ea0:	cb 01       	movw	r24, r22
    5ea2:	bc 01       	movw	r22, r24
    5ea4:	cd 01       	movw	r24, r26
    5ea6:	0e 94 ae 5e 	call	0xbd5c	; 0xbd5c <trunc>
    5eaa:	dc 01       	movw	r26, r24
    5eac:	cb 01       	movw	r24, r22
    5eae:	bc 01       	movw	r22, r24
    5eb0:	cd 01       	movw	r24, r26
    5eb2:	0e 94 b2 5b 	call	0xb764	; 0xb764 <__fixunssfsi>
    5eb6:	dc 01       	movw	r26, r24
    5eb8:	cb 01       	movw	r24, r22
    5eba:	80 93 a9 21 	sts	0x21A9, r24
    5ebe:	90 93 aa 21 	sts	0x21AA, r25
    5ec2:	a0 93 ab 21 	sts	0x21AB, r26
    5ec6:	b0 93 ac 21 	sts	0x21AC, r27
	mc.line_state = MC_STATE_NEW;
    5eca:	81 e0       	ldi	r24, 0x01	; 1
    5ecc:	80 93 84 21 	sts	0x2184, r24
	return (mc_line_continue());
    5ed0:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <mc_line_continue>
}
    5ed4:	24 96       	adiw	r28, 0x04	; 4
    5ed6:	cd bf       	out	0x3d, r28	; 61
    5ed8:	de bf       	out	0x3e, r29	; 62
    5eda:	cf 91       	pop	r28
    5edc:	df 91       	pop	r29
    5ede:	08 95       	ret

00005ee0 <mc_go_home>:
/* 
 * mc_go_home()  (st_go_home is NOT IMPLEMENTED)
 */

int mc_go_home()
{
    5ee0:	df 93       	push	r29
    5ee2:	cf 93       	push	r28
    5ee4:	cd b7       	in	r28, 0x3d	; 61
    5ee6:	de b7       	in	r29, 0x3e	; 62
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    5ee8:	85 e8       	ldi	r24, 0x85	; 133
    5eea:	91 e2       	ldi	r25, 0x21	; 33
    5eec:	60 e0       	ldi	r22, 0x00	; 0
    5eee:	70 e0       	ldi	r23, 0x00	; 0
    5ef0:	4c e0       	ldi	r20, 0x0C	; 12
    5ef2:	50 e0       	ldi	r21, 0x00	; 0
    5ef4:	0e 94 e1 61 	call	0xc3c2	; 0xc3c2 <memset>
	return (TG_OK);
    5ef8:	80 e0       	ldi	r24, 0x00	; 0
    5efa:	90 e0       	ldi	r25, 0x00	; 0
}
    5efc:	cf 91       	pop	r28
    5efe:	df 91       	pop	r29
    5f00:	08 95       	ret

00005f02 <spindle_init>:
 *	These should have been initially set as A axis max/min limit inputs
 *	See config.h for settings
 */

void spindle_init()
{
    5f02:	df 93       	push	r29
    5f04:	cf 93       	push	r28
    5f06:	cd b7       	in	r28, 0x3d	; 61
    5f08:	de b7       	in	r29, 0x3e	; 62
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    5f0a:	e0 e6       	ldi	r30, 0x60	; 96
    5f0c:	f6 e0       	ldi	r31, 0x06	; 6
    5f0e:	80 e4       	ldi	r24, 0x40	; 64
    5f10:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    5f12:	e0 e6       	ldi	r30, 0x60	; 96
    5f14:	f6 e0       	ldi	r31, 0x06	; 6
    5f16:	80 e8       	ldi	r24, 0x80	; 128
    5f18:	81 83       	std	Z+1, r24	; 0x01
}
    5f1a:	cf 91       	pop	r28
    5f1c:	df 91       	pop	r29
    5f1e:	08 95       	ret

00005f20 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
    5f20:	df 93       	push	r29
    5f22:	cf 93       	push	r28
    5f24:	00 d0       	rcall	.+0      	; 0x5f26 <spindle_run+0x6>
    5f26:	00 d0       	rcall	.+0      	; 0x5f28 <spindle_run+0x8>
    5f28:	cd b7       	in	r28, 0x3d	; 61
    5f2a:	de b7       	in	r29, 0x3e	; 62
    5f2c:	89 83       	std	Y+1, r24	; 0x01
    5f2e:	9a 83       	std	Y+2, r25	; 0x02
    5f30:	4b 83       	std	Y+3, r20	; 0x03
    5f32:	5c 83       	std	Y+4, r21	; 0x04
    5f34:	6d 83       	std	Y+5, r22	; 0x05
    5f36:	7e 83       	std	Y+6, r23	; 0x06
	if(direction >= 0) {
    5f38:	89 81       	ldd	r24, Y+1	; 0x01
    5f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    5f3c:	99 23       	and	r25, r25
    5f3e:	2c f0       	brlt	.+10     	; 0x5f4a <spindle_run+0x2a>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    5f40:	e0 e6       	ldi	r30, 0x60	; 96
    5f42:	f6 e0       	ldi	r31, 0x06	; 6
    5f44:	80 e8       	ldi	r24, 0x80	; 128
    5f46:	85 83       	std	Z+5, r24	; 0x05
    5f48:	04 c0       	rjmp	.+8      	; 0x5f52 <spindle_run+0x32>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    5f4a:	e0 e6       	ldi	r30, 0x60	; 96
    5f4c:	f6 e0       	ldi	r31, 0x06	; 6
    5f4e:	80 e8       	ldi	r24, 0x80	; 128
    5f50:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    5f52:	e0 e6       	ldi	r30, 0x60	; 96
    5f54:	f6 e0       	ldi	r31, 0x06	; 6
    5f56:	80 e4       	ldi	r24, 0x40	; 64
    5f58:	85 83       	std	Z+5, r24	; 0x05
}
    5f5a:	26 96       	adiw	r28, 0x06	; 6
    5f5c:	cd bf       	out	0x3d, r28	; 61
    5f5e:	de bf       	out	0x3e, r29	; 62
    5f60:	cf 91       	pop	r28
    5f62:	df 91       	pop	r29
    5f64:	08 95       	ret

00005f66 <spindle_stop>:

void spindle_stop()
{
    5f66:	df 93       	push	r29
    5f68:	cf 93       	push	r28
    5f6a:	cd b7       	in	r28, 0x3d	; 61
    5f6c:	de b7       	in	r29, 0x3e	; 62
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    5f6e:	e0 e6       	ldi	r30, 0x60	; 96
    5f70:	f6 e0       	ldi	r31, 0x06	; 6
    5f72:	80 e4       	ldi	r24, 0x40	; 64
    5f74:	86 83       	std	Z+6, r24	; 0x06
}
    5f76:	cf 91       	pop	r28
    5f78:	df 91       	pop	r29
    5f7a:	08 95       	ret

00005f7c <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    5f7c:	df 93       	push	r29
    5f7e:	cf 93       	push	r28
    5f80:	0f 92       	push	r0
    5f82:	cd b7       	in	r28, 0x3d	; 61
    5f84:	de b7       	in	r29, 0x3e	; 62
	ax.active_axes = 0;								// clear all active bits
    5f86:	10 92 37 24 	sts	0x2437, r1
	ax.exec_mutex = FALSE;
    5f8a:	10 92 36 24 	sts	0x2436, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    5f8e:	80 e0       	ldi	r24, 0x00	; 0
    5f90:	96 e0       	ldi	r25, 0x06	; 6
    5f92:	80 93 46 24 	sts	0x2446, r24
    5f96:	90 93 47 24 	sts	0x2447, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    5f9a:	80 ea       	ldi	r24, 0xA0	; 160
    5f9c:	96 e0       	ldi	r25, 0x06	; 6
    5f9e:	80 93 56 24 	sts	0x2456, r24
    5fa2:	90 93 57 24 	sts	0x2457, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    5fa6:	80 e8       	ldi	r24, 0x80	; 128
    5fa8:	96 e0       	ldi	r25, 0x06	; 6
    5faa:	80 93 66 24 	sts	0x2466, r24
    5fae:	90 93 67 24 	sts	0x2467, r25
	ax.a[A].port = &A_MOTOR_PORT;
    5fb2:	80 e6       	ldi	r24, 0x60	; 96
    5fb4:	96 e0       	ldi	r25, 0x06	; 6
    5fb6:	80 93 76 24 	sts	0x2476, r24
    5fba:	90 93 77 24 	sts	0x2477, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    5fbe:	80 e0       	ldi	r24, 0x00	; 0
    5fc0:	98 e0       	ldi	r25, 0x08	; 8
    5fc2:	80 93 48 24 	sts	0x2448, r24
    5fc6:	90 93 49 24 	sts	0x2449, r25
	ax.a[Y].timer = &Y_TIMER;
    5fca:	80 e0       	ldi	r24, 0x00	; 0
    5fcc:	99 e0       	ldi	r25, 0x09	; 9
    5fce:	80 93 58 24 	sts	0x2458, r24
    5fd2:	90 93 59 24 	sts	0x2459, r25
	ax.a[Z].timer = &Z_TIMER;
    5fd6:	80 e0       	ldi	r24, 0x00	; 0
    5fd8:	9a e0       	ldi	r25, 0x0A	; 10
    5fda:	80 93 68 24 	sts	0x2468, r24
    5fde:	90 93 69 24 	sts	0x2469, r25
	ax.a[A].timer = &A_TIMER;
    5fe2:	80 e0       	ldi	r24, 0x00	; 0
    5fe4:	9b e0       	ldi	r25, 0x0B	; 11
    5fe6:	80 93 78 24 	sts	0x2478, r24
    5fea:	90 93 79 24 	sts	0x2479, r25

	for (uint8_t i=X; i<=A; i++) {
    5fee:	19 82       	std	Y+1, r1	; 0x01
    5ff0:	ad c0       	rjmp	.+346    	; 0x614c <__stack+0x14d>
		ax.a[i].polarity = cfg.a[i].polarity;
    5ff2:	89 81       	ldd	r24, Y+1	; 0x01
    5ff4:	48 2f       	mov	r20, r24
    5ff6:	50 e0       	ldi	r21, 0x00	; 0
    5ff8:	89 81       	ldd	r24, Y+1	; 0x01
    5ffa:	28 2f       	mov	r18, r24
    5ffc:	30 e0       	ldi	r19, 0x00	; 0
    5ffe:	c9 01       	movw	r24, r18
    6000:	88 0f       	add	r24, r24
    6002:	99 1f       	adc	r25, r25
    6004:	82 0f       	add	r24, r18
    6006:	93 1f       	adc	r25, r19
    6008:	88 0f       	add	r24, r24
    600a:	99 1f       	adc	r25, r25
    600c:	88 0f       	add	r24, r24
    600e:	99 1f       	adc	r25, r25
    6010:	88 0f       	add	r24, r24
    6012:	99 1f       	adc	r25, r25
    6014:	fc 01       	movw	r30, r24
    6016:	e6 57       	subi	r30, 0x76	; 118
    6018:	fb 4d       	sbci	r31, 0xDB	; 219
    601a:	20 81       	ld	r18, Z
    601c:	ca 01       	movw	r24, r20
    601e:	82 95       	swap	r24
    6020:	92 95       	swap	r25
    6022:	90 7f       	andi	r25, 0xF0	; 240
    6024:	98 27       	eor	r25, r24
    6026:	80 7f       	andi	r24, 0xF0	; 240
    6028:	98 27       	eor	r25, r24
    602a:	fc 01       	movw	r30, r24
    602c:	ec 5b       	subi	r30, 0xBC	; 188
    602e:	fb 4d       	sbci	r31, 0xDB	; 219
    6030:	20 83       	st	Z, r18

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    6032:	89 81       	ldd	r24, Y+1	; 0x01
    6034:	88 2f       	mov	r24, r24
    6036:	90 e0       	ldi	r25, 0x00	; 0
    6038:	01 96       	adiw	r24, 0x01	; 1
    603a:	82 95       	swap	r24
    603c:	92 95       	swap	r25
    603e:	90 7f       	andi	r25, 0xF0	; 240
    6040:	98 27       	eor	r25, r24
    6042:	80 7f       	andi	r24, 0xF0	; 240
    6044:	98 27       	eor	r25, r24
    6046:	fc 01       	movw	r30, r24
    6048:	ea 5c       	subi	r30, 0xCA	; 202
    604a:	fb 4d       	sbci	r31, 0xDB	; 219
    604c:	01 90       	ld	r0, Z+
    604e:	f0 81       	ld	r31, Z
    6050:	e0 2d       	mov	r30, r0
    6052:	8f e3       	ldi	r24, 0x3F	; 63
    6054:	80 83       	st	Z, r24
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    6056:	89 81       	ldd	r24, Y+1	; 0x01
    6058:	88 2f       	mov	r24, r24
    605a:	90 e0       	ldi	r25, 0x00	; 0
    605c:	01 96       	adiw	r24, 0x01	; 1
    605e:	82 95       	swap	r24
    6060:	92 95       	swap	r25
    6062:	90 7f       	andi	r25, 0xF0	; 240
    6064:	98 27       	eor	r25, r24
    6066:	80 7f       	andi	r24, 0xF0	; 240
    6068:	98 27       	eor	r25, r24
    606a:	fc 01       	movw	r30, r24
    606c:	ea 5c       	subi	r30, 0xCA	; 202
    606e:	fb 4d       	sbci	r31, 0xDB	; 219
    6070:	01 90       	ld	r0, Z+
    6072:	f0 81       	ld	r31, Z
    6074:	e0 2d       	mov	r30, r0
    6076:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
    6078:	89 81       	ldd	r24, Y+1	; 0x01
    607a:	88 2f       	mov	r24, r24
    607c:	90 e0       	ldi	r25, 0x00	; 0
    607e:	01 96       	adiw	r24, 0x01	; 1
    6080:	82 95       	swap	r24
    6082:	92 95       	swap	r25
    6084:	90 7f       	andi	r25, 0xF0	; 240
    6086:	98 27       	eor	r25, r24
    6088:	80 7f       	andi	r24, 0xF0	; 240
    608a:	98 27       	eor	r25, r24
    608c:	fc 01       	movw	r30, r24
    608e:	ea 5c       	subi	r30, 0xCA	; 202
    6090:	fb 4d       	sbci	r31, 0xDB	; 219
    6092:	a0 81       	ld	r26, Z
    6094:	b1 81       	ldd	r27, Z+1	; 0x01
    6096:	89 81       	ldd	r24, Y+1	; 0x01
    6098:	88 2f       	mov	r24, r24
    609a:	90 e0       	ldi	r25, 0x00	; 0
    609c:	01 96       	adiw	r24, 0x01	; 1
    609e:	82 95       	swap	r24
    60a0:	92 95       	swap	r25
    60a2:	90 7f       	andi	r25, 0xF0	; 240
    60a4:	98 27       	eor	r25, r24
    60a6:	80 7f       	andi	r24, 0xF0	; 240
    60a8:	98 27       	eor	r25, r24
    60aa:	fc 01       	movw	r30, r24
    60ac:	ea 5c       	subi	r30, 0xCA	; 202
    60ae:	fb 4d       	sbci	r31, 0xDB	; 219
    60b0:	01 90       	ld	r0, Z+
    60b2:	f0 81       	ld	r31, Z
    60b4:	e0 2d       	mov	r30, r0
    60b6:	84 81       	ldd	r24, Z+4	; 0x04
    60b8:	88 61       	ori	r24, 0x18	; 24
    60ba:	14 96       	adiw	r26, 0x04	; 4
    60bc:	8c 93       	st	X, r24
    60be:	14 97       	sbiw	r26, 0x04	; 4
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    60c0:	89 81       	ldd	r24, Y+1	; 0x01
    60c2:	88 2f       	mov	r24, r24
    60c4:	90 e0       	ldi	r25, 0x00	; 0
    60c6:	01 96       	adiw	r24, 0x01	; 1
    60c8:	82 95       	swap	r24
    60ca:	92 95       	swap	r25
    60cc:	90 7f       	andi	r25, 0xF0	; 240
    60ce:	98 27       	eor	r25, r24
    60d0:	80 7f       	andi	r24, 0xF0	; 240
    60d2:	98 27       	eor	r25, r24
    60d4:	fc 01       	movw	r30, r24
    60d6:	ea 5c       	subi	r30, 0xCA	; 202
    60d8:	fb 4d       	sbci	r31, 0xDB	; 219
    60da:	01 90       	ld	r0, Z+
    60dc:	f0 81       	ld	r31, Z
    60de:	e0 2d       	mov	r30, r0
    60e0:	84 e0       	ldi	r24, 0x04	; 4
    60e2:	85 83       	std	Z+5, r24	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    60e4:	89 81       	ldd	r24, Y+1	; 0x01
    60e6:	88 2f       	mov	r24, r24
    60e8:	90 e0       	ldi	r25, 0x00	; 0
    60ea:	82 95       	swap	r24
    60ec:	92 95       	swap	r25
    60ee:	90 7f       	andi	r25, 0xF0	; 240
    60f0:	98 27       	eor	r25, r24
    60f2:	80 7f       	andi	r24, 0xF0	; 240
    60f4:	98 27       	eor	r25, r24
    60f6:	fc 01       	movw	r30, r24
    60f8:	e8 5b       	subi	r30, 0xB8	; 184
    60fa:	fb 4d       	sbci	r31, 0xDB	; 219
    60fc:	01 90       	ld	r0, Z+
    60fe:	f0 81       	ld	r31, Z
    6100:	e0 2d       	mov	r30, r0
    6102:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    6104:	89 81       	ldd	r24, Y+1	; 0x01
    6106:	88 2f       	mov	r24, r24
    6108:	90 e0       	ldi	r25, 0x00	; 0
    610a:	82 95       	swap	r24
    610c:	92 95       	swap	r25
    610e:	90 7f       	andi	r25, 0xF0	; 240
    6110:	98 27       	eor	r25, r24
    6112:	80 7f       	andi	r24, 0xF0	; 240
    6114:	98 27       	eor	r25, r24
    6116:	fc 01       	movw	r30, r24
    6118:	e8 5b       	subi	r30, 0xB8	; 184
    611a:	fb 4d       	sbci	r31, 0xDB	; 219
    611c:	01 90       	ld	r0, Z+
    611e:	f0 81       	ld	r31, Z
    6120:	e0 2d       	mov	r30, r0
    6122:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    6124:	89 81       	ldd	r24, Y+1	; 0x01
    6126:	88 2f       	mov	r24, r24
    6128:	90 e0       	ldi	r25, 0x00	; 0
    612a:	82 95       	swap	r24
    612c:	92 95       	swap	r25
    612e:	90 7f       	andi	r25, 0xF0	; 240
    6130:	98 27       	eor	r25, r24
    6132:	80 7f       	andi	r24, 0xF0	; 240
    6134:	98 27       	eor	r25, r24
    6136:	fc 01       	movw	r30, r24
    6138:	e8 5b       	subi	r30, 0xB8	; 184
    613a:	fb 4d       	sbci	r31, 0xDB	; 219
    613c:	01 90       	ld	r0, Z+
    613e:	f0 81       	ld	r31, Z
    6140:	e0 2d       	mov	r30, r0
    6142:	83 e0       	ldi	r24, 0x03	; 3
    6144:	86 83       	std	Z+6, r24	; 0x06
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    6146:	89 81       	ldd	r24, Y+1	; 0x01
    6148:	8f 5f       	subi	r24, 0xFF	; 255
    614a:	89 83       	std	Y+1, r24	; 0x01
    614c:	89 81       	ldd	r24, Y+1	; 0x01
    614e:	84 30       	cpi	r24, 0x04	; 4
    6150:	08 f4       	brcc	.+2      	; 0x6154 <__stack+0x155>
    6152:	4f cf       	rjmp	.-354    	; 0x5ff2 <st_init+0x76>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    6154:	0f 90       	pop	r0
    6156:	cf 91       	pop	r28
    6158:	df 91       	pop	r29
    615a:	08 95       	ret

0000615c <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    615c:	1f 92       	push	r1
    615e:	0f 92       	push	r0
    6160:	0f b6       	in	r0, 0x3f	; 63
    6162:	0f 92       	push	r0
    6164:	00 90 3b 00 	lds	r0, 0x003B
    6168:	0f 92       	push	r0
    616a:	11 24       	eor	r1, r1
    616c:	2f 93       	push	r18
    616e:	3f 93       	push	r19
    6170:	4f 93       	push	r20
    6172:	5f 93       	push	r21
    6174:	6f 93       	push	r22
    6176:	7f 93       	push	r23
    6178:	8f 93       	push	r24
    617a:	9f 93       	push	r25
    617c:	af 93       	push	r26
    617e:	bf 93       	push	r27
    6180:	ef 93       	push	r30
    6182:	ff 93       	push	r31
    6184:	df 93       	push	r29
    6186:	cf 93       	push	r28
    6188:	cd b7       	in	r28, 0x3d	; 61
    618a:	de b7       	in	r29, 0x3e	; 62
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    618c:	80 91 42 24 	lds	r24, 0x2442
    6190:	90 91 43 24 	lds	r25, 0x2443
    6194:	01 97       	sbiw	r24, 0x01	; 1
    6196:	80 93 42 24 	sts	0x2442, r24
    619a:	90 93 43 24 	sts	0x2443, r25
    619e:	80 91 42 24 	lds	r24, 0x2442
    61a2:	90 91 43 24 	lds	r25, 0x2443
    61a6:	00 97       	sbiw	r24, 0x00	; 0
    61a8:	09 f0       	breq	.+2      	; 0x61ac <__vector_14+0x50>
    61aa:	45 c0       	rjmp	.+138    	; 0x6236 <__vector_14+0xda>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    61ac:	80 91 45 24 	lds	r24, 0x2445
    61b0:	88 23       	and	r24, r24
    61b2:	21 f4       	brne	.+8      	; 0x61bc <__vector_14+0x60>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    61b4:	e0 e0       	ldi	r30, 0x00	; 0
    61b6:	f6 e0       	ldi	r31, 0x06	; 6
    61b8:	81 e0       	ldi	r24, 0x01	; 1
    61ba:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    61bc:	80 91 3a 24 	lds	r24, 0x243A
    61c0:	90 91 3b 24 	lds	r25, 0x243B
    61c4:	a0 91 3c 24 	lds	r26, 0x243C
    61c8:	b0 91 3d 24 	lds	r27, 0x243D
    61cc:	01 97       	sbiw	r24, 0x01	; 1
    61ce:	a1 09       	sbc	r26, r1
    61d0:	b1 09       	sbc	r27, r1
    61d2:	80 93 3a 24 	sts	0x243A, r24
    61d6:	90 93 3b 24 	sts	0x243B, r25
    61da:	a0 93 3c 24 	sts	0x243C, r26
    61de:	b0 93 3d 24 	sts	0x243D, r27
    61e2:	80 91 3a 24 	lds	r24, 0x243A
    61e6:	90 91 3b 24 	lds	r25, 0x243B
    61ea:	a0 91 3c 24 	lds	r26, 0x243C
    61ee:	b0 91 3d 24 	lds	r27, 0x243D
    61f2:	00 97       	sbiw	r24, 0x00	; 0
    61f4:	a1 05       	cpc	r26, r1
    61f6:	b1 05       	cpc	r27, r1
    61f8:	91 f4       	brne	.+36     	; 0x621e <__vector_14+0xc2>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    61fa:	e0 e0       	ldi	r30, 0x00	; 0
    61fc:	f8 e0       	ldi	r31, 0x08	; 8
    61fe:	10 82       	st	Z, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    6200:	e0 e0       	ldi	r30, 0x00	; 0
    6202:	f6 e0       	ldi	r31, 0x06	; 6
    6204:	84 e0       	ldi	r24, 0x04	; 4
    6206:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    6208:	80 91 37 24 	lds	r24, 0x2437
    620c:	87 7f       	andi	r24, 0xF7	; 247
    620e:	80 93 37 24 	sts	0x2437, r24
		if (ax.active_axes == 0) {				// if all axes are done
    6212:	80 91 37 24 	lds	r24, 0x2437
    6216:	88 23       	and	r24, r24
    6218:	11 f4       	brne	.+4      	; 0x621e <__vector_14+0xc2>
			st_execute_move();					// ...run the next move
    621a:	0e 94 ae 32 	call	0x655c	; 0x655c <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    621e:	80 91 40 24 	lds	r24, 0x2440
    6222:	90 91 41 24 	lds	r25, 0x2441
    6226:	80 93 42 24 	sts	0x2442, r24
    622a:	90 93 43 24 	sts	0x2443, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    622e:	e0 e0       	ldi	r30, 0x00	; 0
    6230:	f6 e0       	ldi	r31, 0x06	; 6
    6232:	81 e0       	ldi	r24, 0x01	; 1
    6234:	86 83       	std	Z+6, r24	; 0x06
}
    6236:	cf 91       	pop	r28
    6238:	df 91       	pop	r29
    623a:	ff 91       	pop	r31
    623c:	ef 91       	pop	r30
    623e:	bf 91       	pop	r27
    6240:	af 91       	pop	r26
    6242:	9f 91       	pop	r25
    6244:	8f 91       	pop	r24
    6246:	7f 91       	pop	r23
    6248:	6f 91       	pop	r22
    624a:	5f 91       	pop	r21
    624c:	4f 91       	pop	r20
    624e:	3f 91       	pop	r19
    6250:	2f 91       	pop	r18
    6252:	0f 90       	pop	r0
    6254:	00 92 3b 00 	sts	0x003B, r0
    6258:	0f 90       	pop	r0
    625a:	0f be       	out	0x3f, r0	; 63
    625c:	0f 90       	pop	r0
    625e:	1f 90       	pop	r1
    6260:	18 95       	reti

00006262 <__vector_77>:

ISR(Y_TIMER_ISR_vect)
{
    6262:	1f 92       	push	r1
    6264:	0f 92       	push	r0
    6266:	0f b6       	in	r0, 0x3f	; 63
    6268:	0f 92       	push	r0
    626a:	00 90 3b 00 	lds	r0, 0x003B
    626e:	0f 92       	push	r0
    6270:	11 24       	eor	r1, r1
    6272:	2f 93       	push	r18
    6274:	3f 93       	push	r19
    6276:	4f 93       	push	r20
    6278:	5f 93       	push	r21
    627a:	6f 93       	push	r22
    627c:	7f 93       	push	r23
    627e:	8f 93       	push	r24
    6280:	9f 93       	push	r25
    6282:	af 93       	push	r26
    6284:	bf 93       	push	r27
    6286:	ef 93       	push	r30
    6288:	ff 93       	push	r31
    628a:	df 93       	push	r29
    628c:	cf 93       	push	r28
    628e:	cd b7       	in	r28, 0x3d	; 61
    6290:	de b7       	in	r29, 0x3e	; 62
	if (--ax.a[Y].postscale_counter != 0) {
    6292:	80 91 52 24 	lds	r24, 0x2452
    6296:	90 91 53 24 	lds	r25, 0x2453
    629a:	01 97       	sbiw	r24, 0x01	; 1
    629c:	80 93 52 24 	sts	0x2452, r24
    62a0:	90 93 53 24 	sts	0x2453, r25
    62a4:	80 91 52 24 	lds	r24, 0x2452
    62a8:	90 91 53 24 	lds	r25, 0x2453
    62ac:	00 97       	sbiw	r24, 0x00	; 0
    62ae:	09 f0       	breq	.+2      	; 0x62b2 <__vector_77+0x50>
    62b0:	41 c0       	rjmp	.+130    	; 0x6334 <__vector_77+0xd2>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    62b2:	e0 ea       	ldi	r30, 0xA0	; 160
    62b4:	f6 e0       	ldi	r31, 0x06	; 6
    62b6:	81 e0       	ldi	r24, 0x01	; 1
    62b8:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    62ba:	80 91 4a 24 	lds	r24, 0x244A
    62be:	90 91 4b 24 	lds	r25, 0x244B
    62c2:	a0 91 4c 24 	lds	r26, 0x244C
    62c6:	b0 91 4d 24 	lds	r27, 0x244D
    62ca:	01 97       	sbiw	r24, 0x01	; 1
    62cc:	a1 09       	sbc	r26, r1
    62ce:	b1 09       	sbc	r27, r1
    62d0:	80 93 4a 24 	sts	0x244A, r24
    62d4:	90 93 4b 24 	sts	0x244B, r25
    62d8:	a0 93 4c 24 	sts	0x244C, r26
    62dc:	b0 93 4d 24 	sts	0x244D, r27
    62e0:	80 91 4a 24 	lds	r24, 0x244A
    62e4:	90 91 4b 24 	lds	r25, 0x244B
    62e8:	a0 91 4c 24 	lds	r26, 0x244C
    62ec:	b0 91 4d 24 	lds	r27, 0x244D
    62f0:	00 97       	sbiw	r24, 0x00	; 0
    62f2:	a1 05       	cpc	r26, r1
    62f4:	b1 05       	cpc	r27, r1
    62f6:	91 f4       	brne	.+36     	; 0x631c <__vector_77+0xba>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    62f8:	e0 e0       	ldi	r30, 0x00	; 0
    62fa:	f9 e0       	ldi	r31, 0x09	; 9
    62fc:	10 82       	st	Z, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    62fe:	e0 ea       	ldi	r30, 0xA0	; 160
    6300:	f6 e0       	ldi	r31, 0x06	; 6
    6302:	84 e0       	ldi	r24, 0x04	; 4
    6304:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    6306:	80 91 37 24 	lds	r24, 0x2437
    630a:	8b 7f       	andi	r24, 0xFB	; 251
    630c:	80 93 37 24 	sts	0x2437, r24
		if (ax.active_axes == 0) {
    6310:	80 91 37 24 	lds	r24, 0x2437
    6314:	88 23       	and	r24, r24
    6316:	11 f4       	brne	.+4      	; 0x631c <__vector_77+0xba>
			st_execute_move();
    6318:	0e 94 ae 32 	call	0x655c	; 0x655c <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    631c:	80 91 50 24 	lds	r24, 0x2450
    6320:	90 91 51 24 	lds	r25, 0x2451
    6324:	80 93 52 24 	sts	0x2452, r24
    6328:	90 93 53 24 	sts	0x2453, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    632c:	e0 ea       	ldi	r30, 0xA0	; 160
    632e:	f6 e0       	ldi	r31, 0x06	; 6
    6330:	81 e0       	ldi	r24, 0x01	; 1
    6332:	86 83       	std	Z+6, r24	; 0x06
}
    6334:	cf 91       	pop	r28
    6336:	df 91       	pop	r29
    6338:	ff 91       	pop	r31
    633a:	ef 91       	pop	r30
    633c:	bf 91       	pop	r27
    633e:	af 91       	pop	r26
    6340:	9f 91       	pop	r25
    6342:	8f 91       	pop	r24
    6344:	7f 91       	pop	r23
    6346:	6f 91       	pop	r22
    6348:	5f 91       	pop	r21
    634a:	4f 91       	pop	r20
    634c:	3f 91       	pop	r19
    634e:	2f 91       	pop	r18
    6350:	0f 90       	pop	r0
    6352:	00 92 3b 00 	sts	0x003B, r0
    6356:	0f 90       	pop	r0
    6358:	0f be       	out	0x3f, r0	; 63
    635a:	0f 90       	pop	r0
    635c:	1f 90       	pop	r1
    635e:	18 95       	reti

00006360 <__vector_47>:

ISR(Z_TIMER_ISR_vect)
{
    6360:	1f 92       	push	r1
    6362:	0f 92       	push	r0
    6364:	0f b6       	in	r0, 0x3f	; 63
    6366:	0f 92       	push	r0
    6368:	00 90 3b 00 	lds	r0, 0x003B
    636c:	0f 92       	push	r0
    636e:	11 24       	eor	r1, r1
    6370:	2f 93       	push	r18
    6372:	3f 93       	push	r19
    6374:	4f 93       	push	r20
    6376:	5f 93       	push	r21
    6378:	6f 93       	push	r22
    637a:	7f 93       	push	r23
    637c:	8f 93       	push	r24
    637e:	9f 93       	push	r25
    6380:	af 93       	push	r26
    6382:	bf 93       	push	r27
    6384:	ef 93       	push	r30
    6386:	ff 93       	push	r31
    6388:	df 93       	push	r29
    638a:	cf 93       	push	r28
    638c:	cd b7       	in	r28, 0x3d	; 61
    638e:	de b7       	in	r29, 0x3e	; 62
	if (--ax.a[Z].postscale_counter != 0) {
    6390:	80 91 62 24 	lds	r24, 0x2462
    6394:	90 91 63 24 	lds	r25, 0x2463
    6398:	01 97       	sbiw	r24, 0x01	; 1
    639a:	80 93 62 24 	sts	0x2462, r24
    639e:	90 93 63 24 	sts	0x2463, r25
    63a2:	80 91 62 24 	lds	r24, 0x2462
    63a6:	90 91 63 24 	lds	r25, 0x2463
    63aa:	00 97       	sbiw	r24, 0x00	; 0
    63ac:	09 f0       	breq	.+2      	; 0x63b0 <__vector_47+0x50>
    63ae:	41 c0       	rjmp	.+130    	; 0x6432 <__vector_47+0xd2>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    63b0:	e0 e8       	ldi	r30, 0x80	; 128
    63b2:	f6 e0       	ldi	r31, 0x06	; 6
    63b4:	81 e0       	ldi	r24, 0x01	; 1
    63b6:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    63b8:	80 91 5a 24 	lds	r24, 0x245A
    63bc:	90 91 5b 24 	lds	r25, 0x245B
    63c0:	a0 91 5c 24 	lds	r26, 0x245C
    63c4:	b0 91 5d 24 	lds	r27, 0x245D
    63c8:	01 97       	sbiw	r24, 0x01	; 1
    63ca:	a1 09       	sbc	r26, r1
    63cc:	b1 09       	sbc	r27, r1
    63ce:	80 93 5a 24 	sts	0x245A, r24
    63d2:	90 93 5b 24 	sts	0x245B, r25
    63d6:	a0 93 5c 24 	sts	0x245C, r26
    63da:	b0 93 5d 24 	sts	0x245D, r27
    63de:	80 91 5a 24 	lds	r24, 0x245A
    63e2:	90 91 5b 24 	lds	r25, 0x245B
    63e6:	a0 91 5c 24 	lds	r26, 0x245C
    63ea:	b0 91 5d 24 	lds	r27, 0x245D
    63ee:	00 97       	sbiw	r24, 0x00	; 0
    63f0:	a1 05       	cpc	r26, r1
    63f2:	b1 05       	cpc	r27, r1
    63f4:	91 f4       	brne	.+36     	; 0x641a <__vector_47+0xba>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    63f6:	e0 e0       	ldi	r30, 0x00	; 0
    63f8:	fa e0       	ldi	r31, 0x0A	; 10
    63fa:	10 82       	st	Z, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    63fc:	e0 e8       	ldi	r30, 0x80	; 128
    63fe:	f6 e0       	ldi	r31, 0x06	; 6
    6400:	84 e0       	ldi	r24, 0x04	; 4
    6402:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    6404:	80 91 37 24 	lds	r24, 0x2437
    6408:	8d 7f       	andi	r24, 0xFD	; 253
    640a:	80 93 37 24 	sts	0x2437, r24
		if (ax.active_axes == 0) {
    640e:	80 91 37 24 	lds	r24, 0x2437
    6412:	88 23       	and	r24, r24
    6414:	11 f4       	brne	.+4      	; 0x641a <__vector_47+0xba>
			st_execute_move();
    6416:	0e 94 ae 32 	call	0x655c	; 0x655c <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    641a:	80 91 60 24 	lds	r24, 0x2460
    641e:	90 91 61 24 	lds	r25, 0x2461
    6422:	80 93 62 24 	sts	0x2462, r24
    6426:	90 93 63 24 	sts	0x2463, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    642a:	e0 e8       	ldi	r30, 0x80	; 128
    642c:	f6 e0       	ldi	r31, 0x06	; 6
    642e:	81 e0       	ldi	r24, 0x01	; 1
    6430:	86 83       	std	Z+6, r24	; 0x06
}
    6432:	cf 91       	pop	r28
    6434:	df 91       	pop	r29
    6436:	ff 91       	pop	r31
    6438:	ef 91       	pop	r30
    643a:	bf 91       	pop	r27
    643c:	af 91       	pop	r26
    643e:	9f 91       	pop	r25
    6440:	8f 91       	pop	r24
    6442:	7f 91       	pop	r23
    6444:	6f 91       	pop	r22
    6446:	5f 91       	pop	r21
    6448:	4f 91       	pop	r20
    644a:	3f 91       	pop	r19
    644c:	2f 91       	pop	r18
    644e:	0f 90       	pop	r0
    6450:	00 92 3b 00 	sts	0x003B, r0
    6454:	0f 90       	pop	r0
    6456:	0f be       	out	0x3f, r0	; 63
    6458:	0f 90       	pop	r0
    645a:	1f 90       	pop	r1
    645c:	18 95       	reti

0000645e <__vector_108>:

ISR(A_TIMER_ISR_vect)
{
    645e:	1f 92       	push	r1
    6460:	0f 92       	push	r0
    6462:	0f b6       	in	r0, 0x3f	; 63
    6464:	0f 92       	push	r0
    6466:	00 90 3b 00 	lds	r0, 0x003B
    646a:	0f 92       	push	r0
    646c:	11 24       	eor	r1, r1
    646e:	2f 93       	push	r18
    6470:	3f 93       	push	r19
    6472:	4f 93       	push	r20
    6474:	5f 93       	push	r21
    6476:	6f 93       	push	r22
    6478:	7f 93       	push	r23
    647a:	8f 93       	push	r24
    647c:	9f 93       	push	r25
    647e:	af 93       	push	r26
    6480:	bf 93       	push	r27
    6482:	ef 93       	push	r30
    6484:	ff 93       	push	r31
    6486:	df 93       	push	r29
    6488:	cf 93       	push	r28
    648a:	cd b7       	in	r28, 0x3d	; 61
    648c:	de b7       	in	r29, 0x3e	; 62
	if (--ax.a[A].postscale_counter != 0) {
    648e:	80 91 72 24 	lds	r24, 0x2472
    6492:	90 91 73 24 	lds	r25, 0x2473
    6496:	01 97       	sbiw	r24, 0x01	; 1
    6498:	80 93 72 24 	sts	0x2472, r24
    649c:	90 93 73 24 	sts	0x2473, r25
    64a0:	80 91 72 24 	lds	r24, 0x2472
    64a4:	90 91 73 24 	lds	r25, 0x2473
    64a8:	00 97       	sbiw	r24, 0x00	; 0
    64aa:	09 f0       	breq	.+2      	; 0x64ae <__vector_108+0x50>
    64ac:	41 c0       	rjmp	.+130    	; 0x6530 <__vector_108+0xd2>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    64ae:	e0 e6       	ldi	r30, 0x60	; 96
    64b0:	f6 e0       	ldi	r31, 0x06	; 6
    64b2:	81 e0       	ldi	r24, 0x01	; 1
    64b4:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    64b6:	80 91 6a 24 	lds	r24, 0x246A
    64ba:	90 91 6b 24 	lds	r25, 0x246B
    64be:	a0 91 6c 24 	lds	r26, 0x246C
    64c2:	b0 91 6d 24 	lds	r27, 0x246D
    64c6:	01 97       	sbiw	r24, 0x01	; 1
    64c8:	a1 09       	sbc	r26, r1
    64ca:	b1 09       	sbc	r27, r1
    64cc:	80 93 6a 24 	sts	0x246A, r24
    64d0:	90 93 6b 24 	sts	0x246B, r25
    64d4:	a0 93 6c 24 	sts	0x246C, r26
    64d8:	b0 93 6d 24 	sts	0x246D, r27
    64dc:	80 91 6a 24 	lds	r24, 0x246A
    64e0:	90 91 6b 24 	lds	r25, 0x246B
    64e4:	a0 91 6c 24 	lds	r26, 0x246C
    64e8:	b0 91 6d 24 	lds	r27, 0x246D
    64ec:	00 97       	sbiw	r24, 0x00	; 0
    64ee:	a1 05       	cpc	r26, r1
    64f0:	b1 05       	cpc	r27, r1
    64f2:	91 f4       	brne	.+36     	; 0x6518 <__vector_108+0xba>
		A_TIMER.CTRLA = TC_CLK_OFF;
    64f4:	e0 e0       	ldi	r30, 0x00	; 0
    64f6:	fb e0       	ldi	r31, 0x0B	; 11
    64f8:	10 82       	st	Z, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    64fa:	e0 e6       	ldi	r30, 0x60	; 96
    64fc:	f6 e0       	ldi	r31, 0x06	; 6
    64fe:	84 e0       	ldi	r24, 0x04	; 4
    6500:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    6502:	80 91 37 24 	lds	r24, 0x2437
    6506:	8e 7f       	andi	r24, 0xFE	; 254
    6508:	80 93 37 24 	sts	0x2437, r24
		if (ax.active_axes == 0) {
    650c:	80 91 37 24 	lds	r24, 0x2437
    6510:	88 23       	and	r24, r24
    6512:	11 f4       	brne	.+4      	; 0x6518 <__vector_108+0xba>
			st_execute_move();
    6514:	0e 94 ae 32 	call	0x655c	; 0x655c <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    6518:	80 91 70 24 	lds	r24, 0x2470
    651c:	90 91 71 24 	lds	r25, 0x2471
    6520:	80 93 72 24 	sts	0x2472, r24
    6524:	90 93 73 24 	sts	0x2473, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    6528:	e0 e6       	ldi	r30, 0x60	; 96
    652a:	f6 e0       	ldi	r31, 0x06	; 6
    652c:	81 e0       	ldi	r24, 0x01	; 1
    652e:	86 83       	std	Z+6, r24	; 0x06
}
    6530:	cf 91       	pop	r28
    6532:	df 91       	pop	r29
    6534:	ff 91       	pop	r31
    6536:	ef 91       	pop	r30
    6538:	bf 91       	pop	r27
    653a:	af 91       	pop	r26
    653c:	9f 91       	pop	r25
    653e:	8f 91       	pop	r24
    6540:	7f 91       	pop	r23
    6542:	6f 91       	pop	r22
    6544:	5f 91       	pop	r21
    6546:	4f 91       	pop	r20
    6548:	3f 91       	pop	r19
    654a:	2f 91       	pop	r18
    654c:	0f 90       	pop	r0
    654e:	00 92 3b 00 	sts	0x003B, r0
    6552:	0f 90       	pop	r0
    6554:	0f be       	out	0x3f, r0	; 63
    6556:	0f 90       	pop	r0
    6558:	1f 90       	pop	r1
    655a:	18 95       	reti

0000655c <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    655c:	df 93       	push	r29
    655e:	cf 93       	push	r28
    6560:	0f 92       	push	r0
    6562:	cd b7       	in	r28, 0x3d	; 61
    6564:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    6566:	80 91 36 24 	lds	r24, 0x2436
    656a:	88 23       	and	r24, r24
    656c:	09 f0       	breq	.+2      	; 0x6570 <st_execute_move+0x14>
    656e:	e0 c1       	rjmp	.+960    	; 0x6930 <st_execute_move+0x3d4>
		return;
	}
	ax.exec_mutex = TRUE;
    6570:	81 e0       	ldi	r24, 0x01	; 1
    6572:	80 93 36 24 	sts	0x2436, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    6576:	80 91 37 24 	lds	r24, 0x2437
    657a:	88 23       	and	r24, r24
    657c:	19 f0       	breq	.+6      	; 0x6584 <st_execute_move+0x28>
		ax.exec_mutex = FALSE;	
    657e:	10 92 36 24 	sts	0x2436, r1
    6582:	d6 c1       	rjmp	.+940    	; 0x6930 <st_execute_move+0x3d4>
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    6584:	0e 94 90 47 	call	0x8f20	; 0x8f20 <mv_dequeue_move_buffer>
    6588:	80 93 38 24 	sts	0x2438, r24
    658c:	90 93 39 24 	sts	0x2439, r25
    6590:	80 91 38 24 	lds	r24, 0x2438
    6594:	90 91 39 24 	lds	r25, 0x2439
    6598:	00 97       	sbiw	r24, 0x00	; 0
    659a:	19 f4       	brne	.+6      	; 0x65a2 <st_execute_move+0x46>
		ax.exec_mutex = FALSE;
    659c:	10 92 36 24 	sts	0x2436, r1
    65a0:	c7 c1       	rjmp	.+910    	; 0x6930 <st_execute_move+0x3d4>
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    65a2:	19 82       	std	Y+1, r1	; 0x01
    65a4:	78 c1       	rjmp	.+752    	; 0x6896 <st_execute_move+0x33a>
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    65a6:	89 81       	ldd	r24, Y+1	; 0x01
    65a8:	88 2f       	mov	r24, r24
    65aa:	90 e0       	ldi	r25, 0x00	; 0
    65ac:	82 95       	swap	r24
    65ae:	92 95       	swap	r25
    65b0:	90 7f       	andi	r25, 0xF0	; 240
    65b2:	98 27       	eor	r25, r24
    65b4:	80 7f       	andi	r24, 0xF0	; 240
    65b6:	98 27       	eor	r25, r24
    65b8:	fc 01       	movw	r30, r24
    65ba:	e8 5b       	subi	r30, 0xB8	; 184
    65bc:	fb 4d       	sbci	r31, 0xDB	; 219
    65be:	01 90       	ld	r0, Z+
    65c0:	f0 81       	ld	r31, Z
    65c2:	e0 2d       	mov	r30, r0
    65c4:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    65c6:	40 91 38 24 	lds	r20, 0x2438
    65ca:	50 91 39 24 	lds	r21, 0x2439
    65ce:	89 81       	ldd	r24, Y+1	; 0x01
    65d0:	88 2f       	mov	r24, r24
    65d2:	90 e0       	ldi	r25, 0x00	; 0
    65d4:	88 0f       	add	r24, r24
    65d6:	99 1f       	adc	r25, r25
    65d8:	9c 01       	movw	r18, r24
    65da:	22 0f       	add	r18, r18
    65dc:	33 1f       	adc	r19, r19
    65de:	22 0f       	add	r18, r18
    65e0:	33 1f       	adc	r19, r19
    65e2:	82 0f       	add	r24, r18
    65e4:	93 1f       	adc	r25, r19
    65e6:	fa 01       	movw	r30, r20
    65e8:	e8 0f       	add	r30, r24
    65ea:	f9 1f       	adc	r31, r25
    65ec:	80 81       	ld	r24, Z
    65ee:	91 81       	ldd	r25, Z+1	; 0x01
    65f0:	a2 81       	ldd	r26, Z+2	; 0x02
    65f2:	b3 81       	ldd	r27, Z+3	; 0x03
    65f4:	00 97       	sbiw	r24, 0x00	; 0
    65f6:	a1 05       	cpc	r26, r1
    65f8:	b1 05       	cpc	r27, r1
    65fa:	09 f4       	brne	.+2      	; 0x65fe <st_execute_move+0xa2>
    65fc:	49 c1       	rjmp	.+658    	; 0x6890 <st_execute_move+0x334>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    65fe:	89 81       	ldd	r24, Y+1	; 0x01
    6600:	68 2f       	mov	r22, r24
    6602:	70 e0       	ldi	r23, 0x00	; 0
    6604:	40 91 38 24 	lds	r20, 0x2438
    6608:	50 91 39 24 	lds	r21, 0x2439
    660c:	89 81       	ldd	r24, Y+1	; 0x01
    660e:	88 2f       	mov	r24, r24
    6610:	90 e0       	ldi	r25, 0x00	; 0
    6612:	88 0f       	add	r24, r24
    6614:	99 1f       	adc	r25, r25
    6616:	9c 01       	movw	r18, r24
    6618:	22 0f       	add	r18, r18
    661a:	33 1f       	adc	r19, r19
    661c:	22 0f       	add	r18, r18
    661e:	33 1f       	adc	r19, r19
    6620:	82 0f       	add	r24, r18
    6622:	93 1f       	adc	r25, r19
    6624:	84 0f       	add	r24, r20
    6626:	95 1f       	adc	r25, r21
    6628:	fc 01       	movw	r30, r24
    662a:	39 96       	adiw	r30, 0x09	; 9
    662c:	20 81       	ld	r18, Z
    662e:	cb 01       	movw	r24, r22
    6630:	82 95       	swap	r24
    6632:	92 95       	swap	r25
    6634:	90 7f       	andi	r25, 0xF0	; 240
    6636:	98 27       	eor	r25, r24
    6638:	80 7f       	andi	r24, 0xF0	; 240
    663a:	98 27       	eor	r25, r24
    663c:	fc 01       	movw	r30, r24
    663e:	eb 5b       	subi	r30, 0xBB	; 187
    6640:	fb 4d       	sbci	r31, 0xDB	; 219
    6642:	20 83       	st	Z, r18

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    6644:	40 91 38 24 	lds	r20, 0x2438
    6648:	50 91 39 24 	lds	r21, 0x2439
    664c:	89 81       	ldd	r24, Y+1	; 0x01
    664e:	88 2f       	mov	r24, r24
    6650:	90 e0       	ldi	r25, 0x00	; 0
    6652:	88 0f       	add	r24, r24
    6654:	99 1f       	adc	r25, r25
    6656:	9c 01       	movw	r18, r24
    6658:	22 0f       	add	r18, r18
    665a:	33 1f       	adc	r19, r19
    665c:	22 0f       	add	r18, r18
    665e:	33 1f       	adc	r19, r19
    6660:	82 0f       	add	r24, r18
    6662:	93 1f       	adc	r25, r19
    6664:	84 0f       	add	r24, r20
    6666:	95 1f       	adc	r25, r21
    6668:	fc 01       	movw	r30, r24
    666a:	38 96       	adiw	r30, 0x08	; 8
    666c:	20 81       	ld	r18, Z
    666e:	89 81       	ldd	r24, Y+1	; 0x01
    6670:	88 2f       	mov	r24, r24
    6672:	90 e0       	ldi	r25, 0x00	; 0
    6674:	82 95       	swap	r24
    6676:	92 95       	swap	r25
    6678:	90 7f       	andi	r25, 0xF0	; 240
    667a:	98 27       	eor	r25, r24
    667c:	80 7f       	andi	r24, 0xF0	; 240
    667e:	98 27       	eor	r25, r24
    6680:	fc 01       	movw	r30, r24
    6682:	ec 5b       	subi	r30, 0xBC	; 188
    6684:	fb 4d       	sbci	r31, 0xDB	; 219
    6686:	80 81       	ld	r24, Z
    6688:	28 17       	cp	r18, r24
    668a:	99 f0       	breq	.+38     	; 0x66b2 <st_execute_move+0x156>
    668c:	89 81       	ldd	r24, Y+1	; 0x01
    668e:	88 2f       	mov	r24, r24
    6690:	90 e0       	ldi	r25, 0x00	; 0
    6692:	01 96       	adiw	r24, 0x01	; 1
    6694:	82 95       	swap	r24
    6696:	92 95       	swap	r25
    6698:	90 7f       	andi	r25, 0xF0	; 240
    669a:	98 27       	eor	r25, r24
    669c:	80 7f       	andi	r24, 0xF0	; 240
    669e:	98 27       	eor	r25, r24
    66a0:	fc 01       	movw	r30, r24
    66a2:	ea 5c       	subi	r30, 0xCA	; 202
    66a4:	fb 4d       	sbci	r31, 0xDB	; 219
    66a6:	01 90       	ld	r0, Z+
    66a8:	f0 81       	ld	r31, Z
    66aa:	e0 2d       	mov	r30, r0
    66ac:	82 e0       	ldi	r24, 0x02	; 2
    66ae:	85 83       	std	Z+5, r24	; 0x05
    66b0:	12 c0       	rjmp	.+36     	; 0x66d6 <st_execute_move+0x17a>
    66b2:	89 81       	ldd	r24, Y+1	; 0x01
    66b4:	88 2f       	mov	r24, r24
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	01 96       	adiw	r24, 0x01	; 1
    66ba:	82 95       	swap	r24
    66bc:	92 95       	swap	r25
    66be:	90 7f       	andi	r25, 0xF0	; 240
    66c0:	98 27       	eor	r25, r24
    66c2:	80 7f       	andi	r24, 0xF0	; 240
    66c4:	98 27       	eor	r25, r24
    66c6:	fc 01       	movw	r30, r24
    66c8:	ea 5c       	subi	r30, 0xCA	; 202
    66ca:	fb 4d       	sbci	r31, 0xDB	; 219
    66cc:	01 90       	ld	r0, Z+
    66ce:	f0 81       	ld	r31, Z
    66d0:	e0 2d       	mov	r30, r0
    66d2:	82 e0       	ldi	r24, 0x02	; 2
    66d4:	86 83       	std	Z+6, r24	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    66d6:	89 81       	ldd	r24, Y+1	; 0x01
    66d8:	68 2f       	mov	r22, r24
    66da:	70 e0       	ldi	r23, 0x00	; 0
    66dc:	40 91 38 24 	lds	r20, 0x2438
    66e0:	50 91 39 24 	lds	r21, 0x2439
    66e4:	89 81       	ldd	r24, Y+1	; 0x01
    66e6:	88 2f       	mov	r24, r24
    66e8:	90 e0       	ldi	r25, 0x00	; 0
    66ea:	88 0f       	add	r24, r24
    66ec:	99 1f       	adc	r25, r25
    66ee:	9c 01       	movw	r18, r24
    66f0:	22 0f       	add	r18, r18
    66f2:	33 1f       	adc	r19, r19
    66f4:	22 0f       	add	r18, r18
    66f6:	33 1f       	adc	r19, r19
    66f8:	82 0f       	add	r24, r18
    66fa:	93 1f       	adc	r25, r19
    66fc:	fa 01       	movw	r30, r20
    66fe:	e8 0f       	add	r30, r24
    6700:	f9 1f       	adc	r31, r25
    6702:	80 81       	ld	r24, Z
    6704:	91 81       	ldd	r25, Z+1	; 0x01
    6706:	a2 81       	ldd	r26, Z+2	; 0x02
    6708:	b3 81       	ldd	r27, Z+3	; 0x03
    670a:	9c 01       	movw	r18, r24
    670c:	ad 01       	movw	r20, r26
    670e:	cb 01       	movw	r24, r22
    6710:	88 0f       	add	r24, r24
    6712:	99 1f       	adc	r25, r25
    6714:	88 0f       	add	r24, r24
    6716:	99 1f       	adc	r25, r25
    6718:	01 96       	adiw	r24, 0x01	; 1
    671a:	88 0f       	add	r24, r24
    671c:	99 1f       	adc	r25, r25
    671e:	88 0f       	add	r24, r24
    6720:	99 1f       	adc	r25, r25
    6722:	fc 01       	movw	r30, r24
    6724:	ea 5c       	subi	r30, 0xCA	; 202
    6726:	fb 4d       	sbci	r31, 0xDB	; 219
    6728:	20 83       	st	Z, r18
    672a:	31 83       	std	Z+1, r19	; 0x01
    672c:	42 83       	std	Z+2, r20	; 0x02
    672e:	53 83       	std	Z+3, r21	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    6730:	89 81       	ldd	r24, Y+1	; 0x01
    6732:	68 2f       	mov	r22, r24
    6734:	70 e0       	ldi	r23, 0x00	; 0
    6736:	40 91 38 24 	lds	r20, 0x2438
    673a:	50 91 39 24 	lds	r21, 0x2439
    673e:	89 81       	ldd	r24, Y+1	; 0x01
    6740:	88 2f       	mov	r24, r24
    6742:	90 e0       	ldi	r25, 0x00	; 0
    6744:	88 0f       	add	r24, r24
    6746:	99 1f       	adc	r25, r25
    6748:	9c 01       	movw	r18, r24
    674a:	22 0f       	add	r18, r18
    674c:	33 1f       	adc	r19, r19
    674e:	22 0f       	add	r18, r18
    6750:	33 1f       	adc	r19, r19
    6752:	82 0f       	add	r24, r18
    6754:	93 1f       	adc	r25, r19
    6756:	84 0f       	add	r24, r20
    6758:	95 1f       	adc	r25, r21
    675a:	fc 01       	movw	r30, r24
    675c:	36 96       	adiw	r30, 0x06	; 6
    675e:	20 81       	ld	r18, Z
    6760:	31 81       	ldd	r19, Z+1	; 0x01
    6762:	cb 01       	movw	r24, r22
    6764:	82 95       	swap	r24
    6766:	92 95       	swap	r25
    6768:	90 7f       	andi	r25, 0xF0	; 240
    676a:	98 27       	eor	r25, r24
    676c:	80 7f       	andi	r24, 0xF0	; 240
    676e:	98 27       	eor	r25, r24
    6770:	fc 01       	movw	r30, r24
    6772:	e0 5c       	subi	r30, 0xC0	; 192
    6774:	fb 4d       	sbci	r31, 0xDB	; 219
    6776:	20 83       	st	Z, r18
    6778:	31 83       	std	Z+1, r19	; 0x01
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    677a:	89 81       	ldd	r24, Y+1	; 0x01
    677c:	68 2f       	mov	r22, r24
    677e:	70 e0       	ldi	r23, 0x00	; 0
    6780:	40 91 38 24 	lds	r20, 0x2438
    6784:	50 91 39 24 	lds	r21, 0x2439
    6788:	89 81       	ldd	r24, Y+1	; 0x01
    678a:	88 2f       	mov	r24, r24
    678c:	90 e0       	ldi	r25, 0x00	; 0
    678e:	88 0f       	add	r24, r24
    6790:	99 1f       	adc	r25, r25
    6792:	9c 01       	movw	r18, r24
    6794:	22 0f       	add	r18, r18
    6796:	33 1f       	adc	r19, r19
    6798:	22 0f       	add	r18, r18
    679a:	33 1f       	adc	r19, r19
    679c:	82 0f       	add	r24, r18
    679e:	93 1f       	adc	r25, r19
    67a0:	84 0f       	add	r24, r20
    67a2:	95 1f       	adc	r25, r21
    67a4:	fc 01       	movw	r30, r24
    67a6:	36 96       	adiw	r30, 0x06	; 6
    67a8:	20 81       	ld	r18, Z
    67aa:	31 81       	ldd	r19, Z+1	; 0x01
    67ac:	cb 01       	movw	r24, r22
    67ae:	88 0f       	add	r24, r24
    67b0:	99 1f       	adc	r25, r25
    67b2:	01 96       	adiw	r24, 0x01	; 1
    67b4:	88 0f       	add	r24, r24
    67b6:	99 1f       	adc	r25, r25
    67b8:	01 96       	adiw	r24, 0x01	; 1
    67ba:	88 0f       	add	r24, r24
    67bc:	99 1f       	adc	r25, r25
    67be:	88 0f       	add	r24, r24
    67c0:	99 1f       	adc	r25, r25
    67c2:	fc 01       	movw	r30, r24
    67c4:	ea 5c       	subi	r30, 0xCA	; 202
    67c6:	fb 4d       	sbci	r31, 0xDB	; 219
    67c8:	20 83       	st	Z, r18
    67ca:	31 83       	std	Z+1, r19	; 0x01
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    67cc:	89 81       	ldd	r24, Y+1	; 0x01
    67ce:	68 2f       	mov	r22, r24
    67d0:	70 e0       	ldi	r23, 0x00	; 0
    67d2:	40 91 38 24 	lds	r20, 0x2438
    67d6:	50 91 39 24 	lds	r21, 0x2439
    67da:	89 81       	ldd	r24, Y+1	; 0x01
    67dc:	88 2f       	mov	r24, r24
    67de:	90 e0       	ldi	r25, 0x00	; 0
    67e0:	88 0f       	add	r24, r24
    67e2:	99 1f       	adc	r25, r25
    67e4:	9c 01       	movw	r18, r24
    67e6:	22 0f       	add	r18, r18
    67e8:	33 1f       	adc	r19, r19
    67ea:	22 0f       	add	r18, r18
    67ec:	33 1f       	adc	r19, r19
    67ee:	82 0f       	add	r24, r18
    67f0:	93 1f       	adc	r25, r19
    67f2:	84 0f       	add	r24, r20
    67f4:	95 1f       	adc	r25, r21
    67f6:	fc 01       	movw	r30, r24
    67f8:	34 96       	adiw	r30, 0x04	; 4
    67fa:	20 81       	ld	r18, Z
    67fc:	31 81       	ldd	r19, Z+1	; 0x01
    67fe:	cb 01       	movw	r24, r22
    6800:	88 0f       	add	r24, r24
    6802:	99 1f       	adc	r25, r25
    6804:	01 96       	adiw	r24, 0x01	; 1
    6806:	88 0f       	add	r24, r24
    6808:	99 1f       	adc	r25, r25
    680a:	88 0f       	add	r24, r24
    680c:	99 1f       	adc	r25, r25
    680e:	88 0f       	add	r24, r24
    6810:	99 1f       	adc	r25, r25
    6812:	fc 01       	movw	r30, r24
    6814:	ea 5c       	subi	r30, 0xCA	; 202
    6816:	fb 4d       	sbci	r31, 0xDB	; 219
    6818:	20 83       	st	Z, r18
    681a:	31 83       	std	Z+1, r19	; 0x01
		ax.a[i].timer->PER = ax.p->a[i].period;
    681c:	89 81       	ldd	r24, Y+1	; 0x01
    681e:	88 2f       	mov	r24, r24
    6820:	90 e0       	ldi	r25, 0x00	; 0
    6822:	82 95       	swap	r24
    6824:	92 95       	swap	r25
    6826:	90 7f       	andi	r25, 0xF0	; 240
    6828:	98 27       	eor	r25, r24
    682a:	80 7f       	andi	r24, 0xF0	; 240
    682c:	98 27       	eor	r25, r24
    682e:	fc 01       	movw	r30, r24
    6830:	e8 5b       	subi	r30, 0xB8	; 184
    6832:	fb 4d       	sbci	r31, 0xDB	; 219
    6834:	a0 81       	ld	r26, Z
    6836:	b1 81       	ldd	r27, Z+1	; 0x01
    6838:	40 91 38 24 	lds	r20, 0x2438
    683c:	50 91 39 24 	lds	r21, 0x2439
    6840:	89 81       	ldd	r24, Y+1	; 0x01
    6842:	88 2f       	mov	r24, r24
    6844:	90 e0       	ldi	r25, 0x00	; 0
    6846:	88 0f       	add	r24, r24
    6848:	99 1f       	adc	r25, r25
    684a:	9c 01       	movw	r18, r24
    684c:	22 0f       	add	r18, r18
    684e:	33 1f       	adc	r19, r19
    6850:	22 0f       	add	r18, r18
    6852:	33 1f       	adc	r19, r19
    6854:	82 0f       	add	r24, r18
    6856:	93 1f       	adc	r25, r19
    6858:	84 0f       	add	r24, r20
    685a:	95 1f       	adc	r25, r21
    685c:	fc 01       	movw	r30, r24
    685e:	34 96       	adiw	r30, 0x04	; 4
    6860:	80 81       	ld	r24, Z
    6862:	91 81       	ldd	r25, Z+1	; 0x01
    6864:	96 96       	adiw	r26, 0x26	; 38
    6866:	8d 93       	st	X+, r24
    6868:	9c 93       	st	X, r25
    686a:	97 97       	sbiw	r26, 0x27	; 39
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    686c:	89 81       	ldd	r24, Y+1	; 0x01
    686e:	88 2f       	mov	r24, r24
    6870:	90 e0       	ldi	r25, 0x00	; 0
    6872:	01 96       	adiw	r24, 0x01	; 1
    6874:	82 95       	swap	r24
    6876:	92 95       	swap	r25
    6878:	90 7f       	andi	r25, 0xF0	; 240
    687a:	98 27       	eor	r25, r24
    687c:	80 7f       	andi	r24, 0xF0	; 240
    687e:	98 27       	eor	r25, r24
    6880:	fc 01       	movw	r30, r24
    6882:	ea 5c       	subi	r30, 0xCA	; 202
    6884:	fb 4d       	sbci	r31, 0xDB	; 219
    6886:	01 90       	ld	r0, Z+
    6888:	f0 81       	ld	r31, Z
    688a:	e0 2d       	mov	r30, r0
    688c:	84 e0       	ldi	r24, 0x04	; 4
    688e:	86 83       	std	Z+6, r24	; 0x06
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    6890:	89 81       	ldd	r24, Y+1	; 0x01
    6892:	8f 5f       	subi	r24, 0xFF	; 255
    6894:	89 83       	std	Y+1, r24	; 0x01
    6896:	89 81       	ldd	r24, Y+1	; 0x01
    6898:	83 30       	cpi	r24, 0x03	; 3
    689a:	08 f4       	brcc	.+2      	; 0x689e <st_execute_move+0x342>
    689c:	84 ce       	rjmp	.-760    	; 0x65a6 <st_execute_move+0x4a>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    689e:	10 92 37 24 	sts	0x2437, r1
	if (ax.a[X].step_counter) { 
    68a2:	80 91 3a 24 	lds	r24, 0x243A
    68a6:	90 91 3b 24 	lds	r25, 0x243B
    68aa:	a0 91 3c 24 	lds	r26, 0x243C
    68ae:	b0 91 3d 24 	lds	r27, 0x243D
    68b2:	00 97       	sbiw	r24, 0x00	; 0
    68b4:	a1 05       	cpc	r26, r1
    68b6:	b1 05       	cpc	r27, r1
    68b8:	59 f0       	breq	.+22     	; 0x68d0 <st_execute_move+0x374>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    68ba:	e0 91 48 24 	lds	r30, 0x2448
    68be:	f0 91 49 24 	lds	r31, 0x2449
    68c2:	81 e0       	ldi	r24, 0x01	; 1
    68c4:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    68c6:	80 91 37 24 	lds	r24, 0x2437
    68ca:	88 60       	ori	r24, 0x08	; 8
    68cc:	80 93 37 24 	sts	0x2437, r24
	}
	if (ax.a[Y].step_counter) {
    68d0:	80 91 4a 24 	lds	r24, 0x244A
    68d4:	90 91 4b 24 	lds	r25, 0x244B
    68d8:	a0 91 4c 24 	lds	r26, 0x244C
    68dc:	b0 91 4d 24 	lds	r27, 0x244D
    68e0:	00 97       	sbiw	r24, 0x00	; 0
    68e2:	a1 05       	cpc	r26, r1
    68e4:	b1 05       	cpc	r27, r1
    68e6:	59 f0       	breq	.+22     	; 0x68fe <st_execute_move+0x3a2>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    68e8:	e0 91 58 24 	lds	r30, 0x2458
    68ec:	f0 91 59 24 	lds	r31, 0x2459
    68f0:	81 e0       	ldi	r24, 0x01	; 1
    68f2:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    68f4:	80 91 37 24 	lds	r24, 0x2437
    68f8:	84 60       	ori	r24, 0x04	; 4
    68fa:	80 93 37 24 	sts	0x2437, r24
	}
	if (ax.a[Z].step_counter) {
    68fe:	80 91 5a 24 	lds	r24, 0x245A
    6902:	90 91 5b 24 	lds	r25, 0x245B
    6906:	a0 91 5c 24 	lds	r26, 0x245C
    690a:	b0 91 5d 24 	lds	r27, 0x245D
    690e:	00 97       	sbiw	r24, 0x00	; 0
    6910:	a1 05       	cpc	r26, r1
    6912:	b1 05       	cpc	r27, r1
    6914:	59 f0       	breq	.+22     	; 0x692c <st_execute_move+0x3d0>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    6916:	e0 91 68 24 	lds	r30, 0x2468
    691a:	f0 91 69 24 	lds	r31, 0x2469
    691e:	81 e0       	ldi	r24, 0x01	; 1
    6920:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    6922:	80 91 37 24 	lds	r24, 0x2437
    6926:	82 60       	ori	r24, 0x02	; 2
    6928:	80 93 37 24 	sts	0x2437, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    692c:	10 92 36 24 	sts	0x2436, r1
}
    6930:	0f 90       	pop	r0
    6932:	cf 91       	pop	r28
    6934:	df 91       	pop	r29
    6936:	08 95       	ret

00006938 <_st_fake_move>:
/* 
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
    6938:	df 93       	push	r29
    693a:	cf 93       	push	r28
    693c:	cd b7       	in	r28, 0x3d	; 61
    693e:	de b7       	in	r29, 0x3e	; 62
	ax.exec_mutex = FALSE;
    6940:	10 92 36 24 	sts	0x2436, r1
	st_execute_move();		// recursively empty the move queue
    6944:	0e 94 ae 32 	call	0x655c	; 0x655c <st_execute_move>
	return;
}
    6948:	cf 91       	pop	r28
    694a:	df 91       	pop	r29
    694c:	08 95       	ret

0000694e <st_set_polarity>:
/* 
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
    694e:	df 93       	push	r29
    6950:	cf 93       	push	r28
    6952:	0f 92       	push	r0
    6954:	0f 92       	push	r0
    6956:	cd b7       	in	r28, 0x3d	; 61
    6958:	de b7       	in	r29, 0x3e	; 62
    695a:	89 83       	std	Y+1, r24	; 0x01
    695c:	6a 83       	std	Y+2, r22	; 0x02
	ax.a[axis].polarity = polarity;
    695e:	89 81       	ldd	r24, Y+1	; 0x01
    6960:	88 2f       	mov	r24, r24
    6962:	90 e0       	ldi	r25, 0x00	; 0
    6964:	82 95       	swap	r24
    6966:	92 95       	swap	r25
    6968:	90 7f       	andi	r25, 0xF0	; 240
    696a:	98 27       	eor	r25, r24
    696c:	80 7f       	andi	r24, 0xF0	; 240
    696e:	98 27       	eor	r25, r24
    6970:	fc 01       	movw	r30, r24
    6972:	ec 5b       	subi	r30, 0xBC	; 188
    6974:	fb 4d       	sbci	r31, 0xDB	; 219
    6976:	8a 81       	ldd	r24, Y+2	; 0x02
    6978:	80 83       	st	Z, r24
}
    697a:	0f 90       	pop	r0
    697c:	0f 90       	pop	r0
    697e:	cf 91       	pop	r28
    6980:	df 91       	pop	r29
    6982:	08 95       	ret

00006984 <st_stop_steppers>:
/* 
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
    6984:	df 93       	push	r29
    6986:	cf 93       	push	r28
    6988:	0f 92       	push	r0
    698a:	cd b7       	in	r28, 0x3d	; 61
    698c:	de b7       	in	r29, 0x3e	; 62
	cli();										// stop interrupts
    698e:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
    6990:	19 82       	std	Y+1, r1	; 0x01
    6992:	13 c0       	rjmp	.+38     	; 0x69ba <st_stop_steppers+0x36>
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    6994:	89 81       	ldd	r24, Y+1	; 0x01
    6996:	88 2f       	mov	r24, r24
    6998:	90 e0       	ldi	r25, 0x00	; 0
    699a:	82 95       	swap	r24
    699c:	92 95       	swap	r25
    699e:	90 7f       	andi	r25, 0xF0	; 240
    69a0:	98 27       	eor	r25, r24
    69a2:	80 7f       	andi	r24, 0xF0	; 240
    69a4:	98 27       	eor	r25, r24
    69a6:	fc 01       	movw	r30, r24
    69a8:	e8 5b       	subi	r30, 0xB8	; 184
    69aa:	fb 4d       	sbci	r31, 0xDB	; 219
    69ac:	01 90       	ld	r0, Z+
    69ae:	f0 81       	ld	r31, Z
    69b0:	e0 2d       	mov	r30, r0
    69b2:	10 82       	st	Z, r1
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
	for (uint8_t i=X; i<=A; i++) {
    69b4:	89 81       	ldd	r24, Y+1	; 0x01
    69b6:	8f 5f       	subi	r24, 0xFF	; 255
    69b8:	89 83       	std	Y+1, r24	; 0x01
    69ba:	89 81       	ldd	r24, Y+1	; 0x01
    69bc:	84 30       	cpi	r24, 0x04	; 4
    69be:	50 f3       	brcs	.-44     	; 0x6994 <st_stop_steppers+0x10>
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
	}	
	mv_flush();									// flush the move buffer
    69c0:	0e 94 09 48 	call	0x9012	; 0x9012 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    69c4:	10 92 37 24 	sts	0x2437, r1
	sei();
    69c8:	78 94       	sei
}
    69ca:	0f 90       	pop	r0
    69cc:	cf 91       	pop	r28
    69ce:	df 91       	pop	r29
    69d0:	08 95       	ret

000069d2 <st_terminate>:
/* 
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
    69d2:	df 93       	push	r29
    69d4:	cf 93       	push	r28
    69d6:	cd b7       	in	r28, 0x3d	; 61
    69d8:	de b7       	in	r29, 0x3e	; 62
	cli();
    69da:	f8 94       	cli
	mv_flush();									// flush the move buffer
    69dc:	0e 94 09 48 	call	0x9012	; 0x9012 <mv_flush>
	sei();
    69e0:	78 94       	sei
}
    69e2:	cf 91       	pop	r28
    69e4:	df 91       	pop	r29
    69e6:	08 95       	ret

000069e8 <st_motor_test>:

/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
    69e8:	df 93       	push	r29
    69ea:	cf 93       	push	r28
    69ec:	cd b7       	in	r28, 0x3d	; 61
    69ee:	de b7       	in	r29, 0x3e	; 62
	ax.a[X].step_counter = 0x00001000;
    69f0:	80 e0       	ldi	r24, 0x00	; 0
    69f2:	90 e1       	ldi	r25, 0x10	; 16
    69f4:	a0 e0       	ldi	r26, 0x00	; 0
    69f6:	b0 e0       	ldi	r27, 0x00	; 0
    69f8:	80 93 3a 24 	sts	0x243A, r24
    69fc:	90 93 3b 24 	sts	0x243B, r25
    6a00:	a0 93 3c 24 	sts	0x243C, r26
    6a04:	b0 93 3d 24 	sts	0x243D, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    6a08:	e0 91 48 24 	lds	r30, 0x2448
    6a0c:	f0 91 49 24 	lds	r31, 0x2449
    6a10:	80 e0       	ldi	r24, 0x00	; 0
    6a12:	90 e1       	ldi	r25, 0x10	; 16
    6a14:	86 a3       	std	Z+38, r24	; 0x26
    6a16:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    6a18:	e0 91 48 24 	lds	r30, 0x2448
    6a1c:	f0 91 49 24 	lds	r31, 0x2449
    6a20:	81 e0       	ldi	r24, 0x01	; 1
    6a22:	80 83       	st	Z, r24

	ax.a[Y].step_counter = 0x00000800;
    6a24:	80 e0       	ldi	r24, 0x00	; 0
    6a26:	98 e0       	ldi	r25, 0x08	; 8
    6a28:	a0 e0       	ldi	r26, 0x00	; 0
    6a2a:	b0 e0       	ldi	r27, 0x00	; 0
    6a2c:	80 93 4a 24 	sts	0x244A, r24
    6a30:	90 93 4b 24 	sts	0x244B, r25
    6a34:	a0 93 4c 24 	sts	0x244C, r26
    6a38:	b0 93 4d 24 	sts	0x244D, r27
	ax.a[Y].timer->PER = 0x2000;
    6a3c:	e0 91 58 24 	lds	r30, 0x2458
    6a40:	f0 91 59 24 	lds	r31, 0x2459
    6a44:	80 e0       	ldi	r24, 0x00	; 0
    6a46:	90 e2       	ldi	r25, 0x20	; 32
    6a48:	86 a3       	std	Z+38, r24	; 0x26
    6a4a:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    6a4c:	e0 91 58 24 	lds	r30, 0x2458
    6a50:	f0 91 59 24 	lds	r31, 0x2459
    6a54:	81 e0       	ldi	r24, 0x01	; 1
    6a56:	80 83       	st	Z, r24

	ax.a[Z].step_counter = 0x00000600;
    6a58:	80 e0       	ldi	r24, 0x00	; 0
    6a5a:	96 e0       	ldi	r25, 0x06	; 6
    6a5c:	a0 e0       	ldi	r26, 0x00	; 0
    6a5e:	b0 e0       	ldi	r27, 0x00	; 0
    6a60:	80 93 5a 24 	sts	0x245A, r24
    6a64:	90 93 5b 24 	sts	0x245B, r25
    6a68:	a0 93 5c 24 	sts	0x245C, r26
    6a6c:	b0 93 5d 24 	sts	0x245D, r27
	ax.a[Z].timer->PER = 0x3000;
    6a70:	e0 91 68 24 	lds	r30, 0x2468
    6a74:	f0 91 69 24 	lds	r31, 0x2469
    6a78:	80 e0       	ldi	r24, 0x00	; 0
    6a7a:	90 e3       	ldi	r25, 0x30	; 48
    6a7c:	86 a3       	std	Z+38, r24	; 0x26
    6a7e:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    6a80:	e0 91 68 24 	lds	r30, 0x2468
    6a84:	f0 91 69 24 	lds	r31, 0x2469
    6a88:	81 e0       	ldi	r24, 0x01	; 1
    6a8a:	80 83       	st	Z, r24

	ax.a[A].step_counter = 0x00000400;
    6a8c:	80 e0       	ldi	r24, 0x00	; 0
    6a8e:	94 e0       	ldi	r25, 0x04	; 4
    6a90:	a0 e0       	ldi	r26, 0x00	; 0
    6a92:	b0 e0       	ldi	r27, 0x00	; 0
    6a94:	80 93 6a 24 	sts	0x246A, r24
    6a98:	90 93 6b 24 	sts	0x246B, r25
    6a9c:	a0 93 6c 24 	sts	0x246C, r26
    6aa0:	b0 93 6d 24 	sts	0x246D, r27
	ax.a[A].timer->PER = 0x4000;
    6aa4:	e0 91 78 24 	lds	r30, 0x2478
    6aa8:	f0 91 79 24 	lds	r31, 0x2479
    6aac:	80 e0       	ldi	r24, 0x00	; 0
    6aae:	90 e4       	ldi	r25, 0x40	; 64
    6ab0:	86 a3       	std	Z+38, r24	; 0x26
    6ab2:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    6ab4:	e0 91 78 24 	lds	r30, 0x2478
    6ab8:	f0 91 79 24 	lds	r31, 0x2479
    6abc:	81 e0       	ldi	r24, 0x01	; 1
    6abe:	80 83       	st	Z, r24

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    6ac0:	80 91 37 24 	lds	r24, 0x2437
    6ac4:	8f 60       	ori	r24, 0x0F	; 15
    6ac6:	80 93 37 24 	sts	0x2437, r24
}
    6aca:	cf 91       	pop	r28
    6acc:	df 91       	pop	r29
    6ace:	08 95       	ret

00006ad0 <PMIC_SetVectorLocationToBoot>:
 *  The function writes the correct signature to the Configuration
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
    6ad0:	df 93       	push	r29
    6ad2:	cf 93       	push	r28
    6ad4:	0f 92       	push	r0
    6ad6:	cd b7       	in	r28, 0x3d	; 61
    6ad8:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    6ada:	e0 ea       	ldi	r30, 0xA0	; 160
    6adc:	f0 e0       	ldi	r31, 0x00	; 0
    6ade:	82 81       	ldd	r24, Z+2	; 0x02
    6ae0:	80 64       	ori	r24, 0x40	; 64
    6ae2:	89 83       	std	Y+1, r24	; 0x01
	CCP = CCP_IOREG_gc;
    6ae4:	e4 e3       	ldi	r30, 0x34	; 52
    6ae6:	f0 e0       	ldi	r31, 0x00	; 0
    6ae8:	88 ed       	ldi	r24, 0xD8	; 216
    6aea:	80 83       	st	Z, r24
	PMIC.CTRL = temp;
    6aec:	e0 ea       	ldi	r30, 0xA0	; 160
    6aee:	f0 e0       	ldi	r31, 0x00	; 0
    6af0:	89 81       	ldd	r24, Y+1	; 0x01
    6af2:	82 83       	std	Z+2, r24	; 0x02
}
    6af4:	0f 90       	pop	r0
    6af6:	cf 91       	pop	r28
    6af8:	df 91       	pop	r29
    6afa:	08 95       	ret

00006afc <PMIC_SetVectorLocationToApplication>:
 *  The function writes the correct signature to the Configuration
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
    6afc:	df 93       	push	r29
    6afe:	cf 93       	push	r28
    6b00:	0f 92       	push	r0
    6b02:	cd b7       	in	r28, 0x3d	; 61
    6b04:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    6b06:	e0 ea       	ldi	r30, 0xA0	; 160
    6b08:	f0 e0       	ldi	r31, 0x00	; 0
    6b0a:	82 81       	ldd	r24, Z+2	; 0x02
    6b0c:	8f 7b       	andi	r24, 0xBF	; 191
    6b0e:	89 83       	std	Y+1, r24	; 0x01
	CCP = CCP_IOREG_gc;
    6b10:	e4 e3       	ldi	r30, 0x34	; 52
    6b12:	f0 e0       	ldi	r31, 0x00	; 0
    6b14:	88 ed       	ldi	r24, 0xD8	; 216
    6b16:	80 83       	st	Z, r24
	PMIC.CTRL = temp;
    6b18:	e0 ea       	ldi	r30, 0xA0	; 160
    6b1a:	f0 e0       	ldi	r31, 0x00	; 0
    6b1c:	89 81       	ldd	r24, Y+1	; 0x01
    6b1e:	82 83       	std	Z+2, r24	; 0x02
}
    6b20:	0f 90       	pop	r0
    6b22:	cf 91       	pop	r28
    6b24:	df 91       	pop	r29
    6b26:	08 95       	ret

00006b28 <xio_init>:
 *
 *	xio_init()
 */

void xio_init(void)
{	
    6b28:	df 93       	push	r29
    6b2a:	cf 93       	push	r28
    6b2c:	cd b7       	in	r28, 0x3d	; 61
    6b2e:	de b7       	in	r29, 0x3e	; 62
	// USB port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_SEMICOLONS | XIO_BAUD_115200);
    6b30:	85 e0       	ldi	r24, 0x05	; 5
    6b32:	90 e5       	ldi	r25, 0x50	; 80
    6b34:	0e 94 b3 36 	call	0x6d66	; 0x6d66 <xio_usb_init>

	// RS485 port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_BAUD_115200);
    6b38:	85 e0       	ldi	r24, 0x05	; 5
    6b3a:	90 e1       	ldi	r25, 0x10	; 16
    6b3c:	0e 94 b3 36 	call	0x6d66	; 0x6d66 <xio_usb_init>

	// PGM file defaults are:	XIO_RD | XIO_BLOCK
//	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE | XIO_SEMICOLONS);
	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE);
    6b40:	80 e0       	ldi	r24, 0x00	; 0
    6b42:	95 e1       	ldi	r25, 0x15	; 21
    6b44:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <xio_pgm_init>
//	xio_pgm_init(XIO_LINEMODE);

	stddev = &dev_usb;				// stddev is a convenience
    6b48:	83 e0       	ldi	r24, 0x03	; 3
    6b4a:	90 e2       	ldi	r25, 0x20	; 32
    6b4c:	80 93 e8 24 	sts	0x24E8, r24
    6b50:	90 93 e9 24 	sts	0x24E9, r25
	stdin = &dev_usb;				// define the console device
    6b54:	83 e0       	ldi	r24, 0x03	; 3
    6b56:	90 e2       	ldi	r25, 0x20	; 32
    6b58:	80 93 42 25 	sts	0x2542, r24
    6b5c:	90 93 43 25 	sts	0x2543, r25
	stdout = &dev_usb;				// ...
    6b60:	83 e0       	ldi	r24, 0x03	; 3
    6b62:	90 e2       	ldi	r25, 0x20	; 32
    6b64:	80 93 44 25 	sts	0x2544, r24
    6b68:	90 93 45 25 	sts	0x2545, r25
	stderr = &dev_usb;				// ...
    6b6c:	83 e0       	ldi	r24, 0x03	; 3
    6b6e:	90 e2       	ldi	r25, 0x20	; 32
    6b70:	80 93 46 25 	sts	0x2546, r24
    6b74:	90 93 47 25 	sts	0x2547, r25

	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    6b78:	8a e3       	ldi	r24, 0x3A	; 58
    6b7a:	97 e0       	ldi	r25, 0x07	; 7
    6b7c:	0f 92       	push	r0
    6b7e:	0f 92       	push	r0
    6b80:	ed b7       	in	r30, 0x3d	; 61
    6b82:	fe b7       	in	r31, 0x3e	; 62
    6b84:	31 96       	adiw	r30, 0x01	; 1
    6b86:	80 83       	st	Z, r24
    6b88:	91 83       	std	Z+1, r25	; 0x01
    6b8a:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    6b8e:	0f 90       	pop	r0
    6b90:	0f 90       	pop	r0
}
    6b92:	cf 91       	pop	r28
    6b94:	df 91       	pop	r29
    6b96:	08 95       	ret

00006b98 <xio_dev_init>:
/*
 * xio_dev_init() - common entry point for device init functions
 */

int8_t xio_dev_init(uint8_t dev, const int16_t arg)
{
    6b98:	df 93       	push	r29
    6b9a:	cf 93       	push	r28
    6b9c:	00 d0       	rcall	.+0      	; 0x6b9e <xio_dev_init+0x6>
    6b9e:	00 d0       	rcall	.+0      	; 0x6ba0 <xio_dev_init+0x8>
    6ba0:	cd b7       	in	r28, 0x3d	; 61
    6ba2:	de b7       	in	r29, 0x3e	; 62
    6ba4:	89 83       	std	Y+1, r24	; 0x01
    6ba6:	6a 83       	std	Y+2, r22	; 0x02
    6ba8:	7b 83       	std	Y+3, r23	; 0x03
	switch (dev) {
    6baa:	89 81       	ldd	r24, Y+1	; 0x01
    6bac:	28 2f       	mov	r18, r24
    6bae:	30 e0       	ldi	r19, 0x00	; 0
    6bb0:	2d 83       	std	Y+5, r18	; 0x05
    6bb2:	3e 83       	std	Y+6, r19	; 0x06
    6bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    6bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    6bb8:	81 30       	cpi	r24, 0x01	; 1
    6bba:	91 05       	cpc	r25, r1
    6bbc:	b9 f0       	breq	.+46     	; 0x6bec <xio_dev_init+0x54>
    6bbe:	2d 81       	ldd	r18, Y+5	; 0x05
    6bc0:	3e 81       	ldd	r19, Y+6	; 0x06
    6bc2:	22 30       	cpi	r18, 0x02	; 2
    6bc4:	31 05       	cpc	r19, r1
    6bc6:	2c f4       	brge	.+10     	; 0x6bd2 <xio_dev_init+0x3a>
    6bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    6bca:	9e 81       	ldd	r25, Y+6	; 0x06
    6bcc:	00 97       	sbiw	r24, 0x00	; 0
    6bce:	61 f0       	breq	.+24     	; 0x6be8 <xio_dev_init+0x50>
    6bd0:	1f c0       	rjmp	.+62     	; 0x6c10 <xio_dev_init+0x78>
    6bd2:	2d 81       	ldd	r18, Y+5	; 0x05
    6bd4:	3e 81       	ldd	r19, Y+6	; 0x06
    6bd6:	22 30       	cpi	r18, 0x02	; 2
    6bd8:	31 05       	cpc	r19, r1
    6bda:	71 f0       	breq	.+28     	; 0x6bf8 <xio_dev_init+0x60>
    6bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    6bde:	9e 81       	ldd	r25, Y+6	; 0x06
    6be0:	84 30       	cpi	r24, 0x04	; 4
    6be2:	91 05       	cpc	r25, r1
    6be4:	79 f0       	breq	.+30     	; 0x6c04 <xio_dev_init+0x6c>
    6be6:	14 c0       	rjmp	.+40     	; 0x6c10 <xio_dev_init+0x78>
		case (XIO_DEV_NULL): return (TG_OK);
    6be8:	1c 82       	std	Y+4, r1	; 0x04
    6bea:	14 c0       	rjmp	.+40     	; 0x6c14 <xio_dev_init+0x7c>
		case (XIO_DEV_USB): xio_usb_init(arg); return (TG_OK);
    6bec:	8a 81       	ldd	r24, Y+2	; 0x02
    6bee:	9b 81       	ldd	r25, Y+3	; 0x03
    6bf0:	0e 94 b3 36 	call	0x6d66	; 0x6d66 <xio_usb_init>
    6bf4:	1c 82       	std	Y+4, r1	; 0x04
    6bf6:	0e c0       	rjmp	.+28     	; 0x6c14 <xio_dev_init+0x7c>
		case (XIO_DEV_RS485): xio_rs485_init(arg); return (TG_OK);
    6bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    6bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    6bfc:	0e 94 31 4a 	call	0x9462	; 0x9462 <xio_rs485_init>
    6c00:	1c 82       	std	Y+4, r1	; 0x04
    6c02:	08 c0       	rjmp	.+16     	; 0x6c14 <xio_dev_init+0x7c>
//		case (XIO_DEV_AUX): xio_aux_init(arg); return (TG_OK);
		case (XIO_DEV_PGM): xio_pgm_init(arg); return (TG_OK);
    6c04:	8a 81       	ldd	r24, Y+2	; 0x02
    6c06:	9b 81       	ldd	r25, Y+3	; 0x03
    6c08:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <xio_pgm_init>
    6c0c:	1c 82       	std	Y+4, r1	; 0x04
    6c0e:	02 c0       	rjmp	.+4      	; 0x6c14 <xio_dev_init+0x7c>
		default: return (TG_UNRECOGNIZED_DEVICE);
    6c10:	91 e1       	ldi	r25, 0x11	; 17
    6c12:	9c 83       	std	Y+4, r25	; 0x04
    6c14:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return (TG_ERROR);		// never should hit this
}
    6c16:	26 96       	adiw	r28, 0x06	; 6
    6c18:	cd bf       	out	0x3d, r28	; 61
    6c1a:	de bf       	out	0x3e, r29	; 62
    6c1c:	cf 91       	pop	r28
    6c1e:	df 91       	pop	r29
    6c20:	08 95       	ret

00006c22 <xio_control>:
/*
 * xio_control() - common entry point for device control functions
 */

int8_t xio_control(uint8_t dev, const uint16_t control, const int16_t arg)
{
    6c22:	df 93       	push	r29
    6c24:	cf 93       	push	r28
    6c26:	cd b7       	in	r28, 0x3d	; 61
    6c28:	de b7       	in	r29, 0x3e	; 62
    6c2a:	28 97       	sbiw	r28, 0x08	; 8
    6c2c:	cd bf       	out	0x3d, r28	; 61
    6c2e:	de bf       	out	0x3e, r29	; 62
    6c30:	89 83       	std	Y+1, r24	; 0x01
    6c32:	6a 83       	std	Y+2, r22	; 0x02
    6c34:	7b 83       	std	Y+3, r23	; 0x03
    6c36:	4c 83       	std	Y+4, r20	; 0x04
    6c38:	5d 83       	std	Y+5, r21	; 0x05
	switch (dev) {
    6c3a:	89 81       	ldd	r24, Y+1	; 0x01
    6c3c:	28 2f       	mov	r18, r24
    6c3e:	30 e0       	ldi	r19, 0x00	; 0
    6c40:	2f 83       	std	Y+7, r18	; 0x07
    6c42:	38 87       	std	Y+8, r19	; 0x08
    6c44:	8f 81       	ldd	r24, Y+7	; 0x07
    6c46:	98 85       	ldd	r25, Y+8	; 0x08
    6c48:	81 30       	cpi	r24, 0x01	; 1
    6c4a:	91 05       	cpc	r25, r1
    6c4c:	b9 f0       	breq	.+46     	; 0x6c7c <xio_control+0x5a>
    6c4e:	2f 81       	ldd	r18, Y+7	; 0x07
    6c50:	38 85       	ldd	r19, Y+8	; 0x08
    6c52:	22 30       	cpi	r18, 0x02	; 2
    6c54:	31 05       	cpc	r19, r1
    6c56:	2c f4       	brge	.+10     	; 0x6c62 <xio_control+0x40>
    6c58:	8f 81       	ldd	r24, Y+7	; 0x07
    6c5a:	98 85       	ldd	r25, Y+8	; 0x08
    6c5c:	00 97       	sbiw	r24, 0x00	; 0
    6c5e:	61 f0       	breq	.+24     	; 0x6c78 <xio_control+0x56>
    6c60:	28 c0       	rjmp	.+80     	; 0x6cb2 <xio_control+0x90>
    6c62:	2f 81       	ldd	r18, Y+7	; 0x07
    6c64:	38 85       	ldd	r19, Y+8	; 0x08
    6c66:	22 30       	cpi	r18, 0x02	; 2
    6c68:	31 05       	cpc	r19, r1
    6c6a:	89 f0       	breq	.+34     	; 0x6c8e <xio_control+0x6c>
    6c6c:	8f 81       	ldd	r24, Y+7	; 0x07
    6c6e:	98 85       	ldd	r25, Y+8	; 0x08
    6c70:	84 30       	cpi	r24, 0x04	; 4
    6c72:	91 05       	cpc	r25, r1
    6c74:	a9 f0       	breq	.+42     	; 0x6ca0 <xio_control+0x7e>
    6c76:	1d c0       	rjmp	.+58     	; 0x6cb2 <xio_control+0x90>
		case (XIO_DEV_NULL): return (TG_OK);
    6c78:	1e 82       	std	Y+6, r1	; 0x06
    6c7a:	1d c0       	rjmp	.+58     	; 0x6cb6 <xio_control+0x94>
		case (XIO_DEV_USB): return (xio_usb_control(control, arg));
    6c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    6c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    6c80:	2c 81       	ldd	r18, Y+4	; 0x04
    6c82:	3d 81       	ldd	r19, Y+5	; 0x05
    6c84:	b9 01       	movw	r22, r18
    6c86:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <xio_usb_control>
    6c8a:	8e 83       	std	Y+6, r24	; 0x06
    6c8c:	14 c0       	rjmp	.+40     	; 0x6cb6 <xio_control+0x94>
		case (XIO_DEV_RS485): return (xio_rs485_control(control, arg));
    6c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    6c90:	9b 81       	ldd	r25, Y+3	; 0x03
    6c92:	2c 81       	ldd	r18, Y+4	; 0x04
    6c94:	3d 81       	ldd	r19, Y+5	; 0x05
    6c96:	b9 01       	movw	r22, r18
    6c98:	0e 94 7e 4b 	call	0x96fc	; 0x96fc <xio_rs485_control>
    6c9c:	8e 83       	std	Y+6, r24	; 0x06
    6c9e:	0b c0       	rjmp	.+22     	; 0x6cb6 <xio_control+0x94>
//		case (XIO_DEV_AUX): return (xio_aux_control(control, arg));
		case (XIO_DEV_PGM): return (xio_pgm_control(control, arg));
    6ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    6ca4:	2c 81       	ldd	r18, Y+4	; 0x04
    6ca6:	3d 81       	ldd	r19, Y+5	; 0x05
    6ca8:	b9 01       	movw	r22, r18
    6caa:	0e 94 c6 40 	call	0x818c	; 0x818c <xio_pgm_control>
    6cae:	8e 83       	std	Y+6, r24	; 0x06
    6cb0:	02 c0       	rjmp	.+4      	; 0x6cb6 <xio_control+0x94>
		default: return (TG_UNRECOGNIZED_DEVICE);
    6cb2:	91 e1       	ldi	r25, 0x11	; 17
    6cb4:	9e 83       	std	Y+6, r25	; 0x06
    6cb6:	8e 81       	ldd	r24, Y+6	; 0x06
	}
	return (TG_ERROR);		// never should hit this
}
    6cb8:	28 96       	adiw	r28, 0x08	; 8
    6cba:	cd bf       	out	0x3d, r28	; 61
    6cbc:	de bf       	out	0x3e, r29	; 62
    6cbe:	cf 91       	pop	r28
    6cc0:	df 91       	pop	r29
    6cc2:	08 95       	ret

00006cc4 <xio_fget_ln>:
 *	len		length of text buffer in 1 offset form: e.g. use 80 instead of 79
 *	dev		XIO device enumeration
 */

int xio_fget_ln(uint8_t dev, char *buf, uint8_t len)
{
    6cc4:	df 93       	push	r29
    6cc6:	cf 93       	push	r28
    6cc8:	cd b7       	in	r28, 0x3d	; 61
    6cca:	de b7       	in	r29, 0x3e	; 62
    6ccc:	28 97       	sbiw	r28, 0x08	; 8
    6cce:	cd bf       	out	0x3d, r28	; 61
    6cd0:	de bf       	out	0x3e, r29	; 62
    6cd2:	89 83       	std	Y+1, r24	; 0x01
    6cd4:	6a 83       	std	Y+2, r22	; 0x02
    6cd6:	7b 83       	std	Y+3, r23	; 0x03
    6cd8:	4c 83       	std	Y+4, r20	; 0x04
	switch (dev) {
    6cda:	89 81       	ldd	r24, Y+1	; 0x01
    6cdc:	28 2f       	mov	r18, r24
    6cde:	30 e0       	ldi	r19, 0x00	; 0
    6ce0:	2f 83       	std	Y+7, r18	; 0x07
    6ce2:	38 87       	std	Y+8, r19	; 0x08
    6ce4:	8f 81       	ldd	r24, Y+7	; 0x07
    6ce6:	98 85       	ldd	r25, Y+8	; 0x08
    6ce8:	81 30       	cpi	r24, 0x01	; 1
    6cea:	91 05       	cpc	r25, r1
    6cec:	c1 f0       	breq	.+48     	; 0x6d1e <xio_fget_ln+0x5a>
    6cee:	2f 81       	ldd	r18, Y+7	; 0x07
    6cf0:	38 85       	ldd	r19, Y+8	; 0x08
    6cf2:	22 30       	cpi	r18, 0x02	; 2
    6cf4:	31 05       	cpc	r19, r1
    6cf6:	2c f4       	brge	.+10     	; 0x6d02 <xio_fget_ln+0x3e>
    6cf8:	8f 81       	ldd	r24, Y+7	; 0x07
    6cfa:	98 85       	ldd	r25, Y+8	; 0x08
    6cfc:	00 97       	sbiw	r24, 0x00	; 0
    6cfe:	61 f0       	breq	.+24     	; 0x6d18 <xio_fget_ln+0x54>
    6d00:	26 c0       	rjmp	.+76     	; 0x6d4e <xio_fget_ln+0x8a>
    6d02:	2f 81       	ldd	r18, Y+7	; 0x07
    6d04:	38 85       	ldd	r19, Y+8	; 0x08
    6d06:	22 30       	cpi	r18, 0x02	; 2
    6d08:	31 05       	cpc	r19, r1
    6d0a:	89 f0       	breq	.+34     	; 0x6d2e <xio_fget_ln+0x6a>
    6d0c:	8f 81       	ldd	r24, Y+7	; 0x07
    6d0e:	98 85       	ldd	r25, Y+8	; 0x08
    6d10:	84 30       	cpi	r24, 0x04	; 4
    6d12:	91 05       	cpc	r25, r1
    6d14:	a1 f0       	breq	.+40     	; 0x6d3e <xio_fget_ln+0x7a>
    6d16:	1b c0       	rjmp	.+54     	; 0x6d4e <xio_fget_ln+0x8a>
		case (XIO_DEV_NULL): return (TG_OK);
    6d18:	1d 82       	std	Y+5, r1	; 0x05
    6d1a:	1e 82       	std	Y+6, r1	; 0x06
    6d1c:	1c c0       	rjmp	.+56     	; 0x6d56 <xio_fget_ln+0x92>
		case (XIO_DEV_USB): return (xio_usb_readln(buf, len));
    6d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    6d20:	9b 81       	ldd	r25, Y+3	; 0x03
    6d22:	6c 81       	ldd	r22, Y+4	; 0x04
    6d24:	0e 94 76 3b 	call	0x76ec	; 0x76ec <xio_usb_readln>
    6d28:	8d 83       	std	Y+5, r24	; 0x05
    6d2a:	9e 83       	std	Y+6, r25	; 0x06
    6d2c:	14 c0       	rjmp	.+40     	; 0x6d56 <xio_fget_ln+0x92>
		case (XIO_DEV_RS485): return (xio_rs485_readln(buf, len));
    6d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    6d30:	9b 81       	ldd	r25, Y+3	; 0x03
    6d32:	6c 81       	ldd	r22, Y+4	; 0x04
    6d34:	0e 94 fa 4e 	call	0x9df4	; 0x9df4 <xio_rs485_readln>
    6d38:	8d 83       	std	Y+5, r24	; 0x05
    6d3a:	9e 83       	std	Y+6, r25	; 0x06
    6d3c:	0c c0       	rjmp	.+24     	; 0x6d56 <xio_fget_ln+0x92>
//		case (XIO_DEV_AUX): return (xio_aux_readln(buf, len));
		case (XIO_DEV_PGM): return (xio_pgm_readln(buf, len));
    6d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    6d40:	9b 81       	ldd	r25, Y+3	; 0x03
    6d42:	6c 81       	ldd	r22, Y+4	; 0x04
    6d44:	0e 94 07 42 	call	0x840e	; 0x840e <xio_pgm_readln>
    6d48:	8d 83       	std	Y+5, r24	; 0x05
    6d4a:	9e 83       	std	Y+6, r25	; 0x06
    6d4c:	04 c0       	rjmp	.+8      	; 0x6d56 <xio_fget_ln+0x92>
		default: return (TG_UNRECOGNIZED_DEVICE);
    6d4e:	21 e1       	ldi	r18, 0x11	; 17
    6d50:	30 e0       	ldi	r19, 0x00	; 0
    6d52:	2d 83       	std	Y+5, r18	; 0x05
    6d54:	3e 83       	std	Y+6, r19	; 0x06
    6d56:	8d 81       	ldd	r24, Y+5	; 0x05
    6d58:	9e 81       	ldd	r25, Y+6	; 0x06
	}
	return (TG_ERROR);		// never should hit this
}
    6d5a:	28 96       	adiw	r28, 0x08	; 8
    6d5c:	cd bf       	out	0x3d, r28	; 61
    6d5e:	de bf       	out	0x3e, r29	; 62
    6d60:	cf 91       	pop	r28
    6d62:	df 91       	pop	r29
    6d64:	08 95       	ret

00006d66 <xio_usb_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_usb_init(const uint16_t control)
{
    6d66:	df 93       	push	r29
    6d68:	cf 93       	push	r28
    6d6a:	cd b7       	in	r28, 0x3d	; 61
    6d6c:	de b7       	in	r29, 0x3e	; 62
    6d6e:	29 97       	sbiw	r28, 0x09	; 9
    6d70:	cd bf       	out	0x3d, r28	; 61
    6d72:	de bf       	out	0x3e, r29	; 62
    6d74:	88 87       	std	Y+8, r24	; 0x08
    6d76:	99 87       	std	Y+9, r25	; 0x09
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    6d78:	88 85       	ldd	r24, Y+8	; 0x08
    6d7a:	8f 70       	andi	r24, 0x0F	; 15
    6d7c:	8f 83       	std	Y+7, r24	; 0x07

	// transfer control flags to internal flag bits
	f.flags = XIO_FLAG_USB_DEFS_gm;		// set flags to defaults & initial state
    6d7e:	87 e3       	ldi	r24, 0x37	; 55
    6d80:	90 e0       	ldi	r25, 0x00	; 0
    6d82:	80 93 b1 21 	sts	0x21B1, r24
    6d86:	90 93 b2 21 	sts	0x21B2, r25
	if (control & XIO_RD) {
    6d8a:	88 85       	ldd	r24, Y+8	; 0x08
    6d8c:	99 85       	ldd	r25, Y+9	; 0x09
    6d8e:	80 71       	andi	r24, 0x10	; 16
    6d90:	90 70       	andi	r25, 0x00	; 0
    6d92:	00 97       	sbiw	r24, 0x00	; 0
    6d94:	49 f0       	breq	.+18     	; 0x6da8 <xio_usb_init+0x42>
		f.flags |= XIO_FLAG_RD_bm;
    6d96:	80 91 b1 21 	lds	r24, 0x21B1
    6d9a:	90 91 b2 21 	lds	r25, 0x21B2
    6d9e:	81 60       	ori	r24, 0x01	; 1
    6da0:	80 93 b1 21 	sts	0x21B1, r24
    6da4:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_WR) {
    6da8:	88 85       	ldd	r24, Y+8	; 0x08
    6daa:	99 85       	ldd	r25, Y+9	; 0x09
    6dac:	80 72       	andi	r24, 0x20	; 32
    6dae:	90 70       	andi	r25, 0x00	; 0
    6db0:	00 97       	sbiw	r24, 0x00	; 0
    6db2:	49 f0       	breq	.+18     	; 0x6dc6 <xio_usb_init+0x60>
		f.flags |= XIO_FLAG_WR_bm;
    6db4:	80 91 b1 21 	lds	r24, 0x21B1
    6db8:	90 91 b2 21 	lds	r25, 0x21B2
    6dbc:	82 60       	ori	r24, 0x02	; 2
    6dbe:	80 93 b1 21 	sts	0x21B1, r24
    6dc2:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_BLOCK) {
    6dc6:	88 85       	ldd	r24, Y+8	; 0x08
    6dc8:	99 85       	ldd	r25, Y+9	; 0x09
    6dca:	80 74       	andi	r24, 0x40	; 64
    6dcc:	90 70       	andi	r25, 0x00	; 0
    6dce:	00 97       	sbiw	r24, 0x00	; 0
    6dd0:	49 f0       	breq	.+18     	; 0x6de4 <xio_usb_init+0x7e>
		f.flags |= XIO_FLAG_BLOCK_bm;
    6dd2:	80 91 b1 21 	lds	r24, 0x21B1
    6dd6:	90 91 b2 21 	lds	r25, 0x21B2
    6dda:	84 60       	ori	r24, 0x04	; 4
    6ddc:	80 93 b1 21 	sts	0x21B1, r24
    6de0:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOBLOCK) {
    6de4:	88 85       	ldd	r24, Y+8	; 0x08
    6de6:	99 85       	ldd	r25, Y+9	; 0x09
    6de8:	80 78       	andi	r24, 0x80	; 128
    6dea:	90 70       	andi	r25, 0x00	; 0
    6dec:	00 97       	sbiw	r24, 0x00	; 0
    6dee:	49 f0       	breq	.+18     	; 0x6e02 <xio_usb_init+0x9c>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    6df0:	80 91 b1 21 	lds	r24, 0x21B1
    6df4:	90 91 b2 21 	lds	r25, 0x21B2
    6df8:	8b 7f       	andi	r24, 0xFB	; 251
    6dfa:	80 93 b1 21 	sts	0x21B1, r24
    6dfe:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_ECHO) {
    6e02:	88 85       	ldd	r24, Y+8	; 0x08
    6e04:	99 85       	ldd	r25, Y+9	; 0x09
    6e06:	80 70       	andi	r24, 0x00	; 0
    6e08:	91 70       	andi	r25, 0x01	; 1
    6e0a:	00 97       	sbiw	r24, 0x00	; 0
    6e0c:	49 f0       	breq	.+18     	; 0x6e20 <xio_usb_init+0xba>
		f.flags |= XIO_FLAG_ECHO_bm;
    6e0e:	80 91 b1 21 	lds	r24, 0x21B1
    6e12:	90 91 b2 21 	lds	r25, 0x21B2
    6e16:	80 61       	ori	r24, 0x10	; 16
    6e18:	80 93 b1 21 	sts	0x21B1, r24
    6e1c:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOECHO) {
    6e20:	88 85       	ldd	r24, Y+8	; 0x08
    6e22:	99 85       	ldd	r25, Y+9	; 0x09
    6e24:	80 70       	andi	r24, 0x00	; 0
    6e26:	92 70       	andi	r25, 0x02	; 2
    6e28:	00 97       	sbiw	r24, 0x00	; 0
    6e2a:	49 f0       	breq	.+18     	; 0x6e3e <xio_usb_init+0xd8>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    6e2c:	80 91 b1 21 	lds	r24, 0x21B1
    6e30:	90 91 b2 21 	lds	r25, 0x21B2
    6e34:	8f 7e       	andi	r24, 0xEF	; 239
    6e36:	80 93 b1 21 	sts	0x21B1, r24
    6e3a:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_CRLF) {
    6e3e:	88 85       	ldd	r24, Y+8	; 0x08
    6e40:	99 85       	ldd	r25, Y+9	; 0x09
    6e42:	80 70       	andi	r24, 0x00	; 0
    6e44:	94 70       	andi	r25, 0x04	; 4
    6e46:	00 97       	sbiw	r24, 0x00	; 0
    6e48:	49 f0       	breq	.+18     	; 0x6e5c <xio_usb_init+0xf6>
		f.flags |= XIO_FLAG_CRLF_bm;
    6e4a:	80 91 b1 21 	lds	r24, 0x21B1
    6e4e:	90 91 b2 21 	lds	r25, 0x21B2
    6e52:	80 62       	ori	r24, 0x20	; 32
    6e54:	80 93 b1 21 	sts	0x21B1, r24
    6e58:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOCRLF) {
    6e5c:	88 85       	ldd	r24, Y+8	; 0x08
    6e5e:	99 85       	ldd	r25, Y+9	; 0x09
    6e60:	80 70       	andi	r24, 0x00	; 0
    6e62:	98 70       	andi	r25, 0x08	; 8
    6e64:	00 97       	sbiw	r24, 0x00	; 0
    6e66:	49 f0       	breq	.+18     	; 0x6e7a <xio_usb_init+0x114>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    6e68:	80 91 b1 21 	lds	r24, 0x21B1
    6e6c:	90 91 b2 21 	lds	r25, 0x21B2
    6e70:	8f 7d       	andi	r24, 0xDF	; 223
    6e72:	80 93 b1 21 	sts	0x21B1, r24
    6e76:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_LINEMODE) {
    6e7a:	88 85       	ldd	r24, Y+8	; 0x08
    6e7c:	99 85       	ldd	r25, Y+9	; 0x09
    6e7e:	80 70       	andi	r24, 0x00	; 0
    6e80:	90 71       	andi	r25, 0x10	; 16
    6e82:	00 97       	sbiw	r24, 0x00	; 0
    6e84:	49 f0       	breq	.+18     	; 0x6e98 <xio_usb_init+0x132>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    6e86:	80 91 b1 21 	lds	r24, 0x21B1
    6e8a:	90 91 b2 21 	lds	r25, 0x21B2
    6e8e:	80 64       	ori	r24, 0x40	; 64
    6e90:	80 93 b1 21 	sts	0x21B1, r24
    6e94:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOLINEMODE) {
    6e98:	88 85       	ldd	r24, Y+8	; 0x08
    6e9a:	99 85       	ldd	r25, Y+9	; 0x09
    6e9c:	80 70       	andi	r24, 0x00	; 0
    6e9e:	90 72       	andi	r25, 0x20	; 32
    6ea0:	00 97       	sbiw	r24, 0x00	; 0
    6ea2:	49 f0       	breq	.+18     	; 0x6eb6 <xio_usb_init+0x150>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    6ea4:	80 91 b1 21 	lds	r24, 0x21B1
    6ea8:	90 91 b2 21 	lds	r25, 0x21B2
    6eac:	8f 7b       	andi	r24, 0xBF	; 191
    6eae:	80 93 b1 21 	sts	0x21B1, r24
    6eb2:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_SEMICOLONS) {
    6eb6:	88 85       	ldd	r24, Y+8	; 0x08
    6eb8:	99 85       	ldd	r25, Y+9	; 0x09
    6eba:	80 70       	andi	r24, 0x00	; 0
    6ebc:	90 74       	andi	r25, 0x40	; 64
    6ebe:	00 97       	sbiw	r24, 0x00	; 0
    6ec0:	49 f0       	breq	.+18     	; 0x6ed4 <xio_usb_init+0x16e>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    6ec2:	80 91 b1 21 	lds	r24, 0x21B1
    6ec6:	90 91 b2 21 	lds	r25, 0x21B2
    6eca:	80 68       	ori	r24, 0x80	; 128
    6ecc:	80 93 b1 21 	sts	0x21B1, r24
    6ed0:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    6ed4:	88 85       	ldd	r24, Y+8	; 0x08
    6ed6:	99 85       	ldd	r25, Y+9	; 0x09
    6ed8:	99 23       	and	r25, r25
    6eda:	4c f4       	brge	.+18     	; 0x6eee <xio_usb_init+0x188>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    6edc:	80 91 b1 21 	lds	r24, 0x21B1
    6ee0:	90 91 b2 21 	lds	r25, 0x21B2
    6ee4:	8f 77       	andi	r24, 0x7F	; 127
    6ee6:	80 93 b1 21 	sts	0x21B1, r24
    6eea:	90 93 b2 21 	sts	0x21B2, r25
	}

	// character signals and error returns
	f.sig = 0;
    6eee:	10 92 b4 21 	sts	0x21B4, r1
	dev_usb.udata = &(f.sig);				// bind sig register to FILE struct
    6ef2:	84 eb       	ldi	r24, 0xB4	; 180
    6ef4:	91 e2       	ldi	r25, 0x21	; 33
    6ef6:	80 93 0f 20 	sts	0x200F, r24
    6efa:	90 93 10 20 	sts	0x2010, r25

	// setup internal RX/TX buffers
	f.rx_buf_head = 1;						// can't use location 0
    6efe:	81 e0       	ldi	r24, 0x01	; 1
    6f00:	80 93 bb 21 	sts	0x21BB, r24
	f.rx_buf_tail = 1;
    6f04:	81 e0       	ldi	r24, 0x01	; 1
    6f06:	80 93 ba 21 	sts	0x21BA, r24
	f.tx_buf_head = 1;
    6f0a:	81 e0       	ldi	r24, 0x01	; 1
    6f0c:	80 93 bd 21 	sts	0x21BD, r24
	f.tx_buf_tail = 1;
    6f10:	81 e0       	ldi	r24, 0x01	; 1
    6f12:	80 93 bc 21 	sts	0x21BC, r24
	f.len = sizeof(f.buf);					// offset to zero
    6f16:	82 e0       	ldi	r24, 0x02	; 2
    6f18:	80 93 b7 21 	sts	0x21B7, r24

	f.usart = &USB_USART;					// bind USART structure
    6f1c:	80 ea       	ldi	r24, 0xA0	; 160
    6f1e:	98 e0       	ldi	r25, 0x08	; 8
    6f20:	80 93 ea 21 	sts	0x21EA, r24
    6f24:	90 93 eb 21 	sts	0x21EB, r25
	f.port = &USB_PORT;						// bind PORT structure
    6f28:	80 e4       	ldi	r24, 0x40	; 64
    6f2a:	96 e0       	ldi	r25, 0x06	; 6
    6f2c:	80 93 ec 21 	sts	0x21EC, r24
    6f30:	90 93 ed 21 	sts	0x21ED, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    6f34:	8f 81       	ldd	r24, Y+7	; 0x07
    6f36:	88 23       	and	r24, r24
    6f38:	11 f4       	brne	.+4      	; 0x6f3e <xio_usb_init+0x1d8>
		baud = XIO_BAUD_DEFAULT;
    6f3a:	85 e0       	ldi	r24, 0x05	; 5
    6f3c:	8f 83       	std	Y+7, r24	; 0x07
	}
	f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    6f3e:	a0 91 ea 21 	lds	r26, 0x21EA
    6f42:	b0 91 eb 21 	lds	r27, 0x21EB
    6f46:	8f 81       	ldd	r24, Y+7	; 0x07
    6f48:	88 2f       	mov	r24, r24
    6f4a:	90 e0       	ldi	r25, 0x00	; 0
    6f4c:	8c 5d       	subi	r24, 0xDC	; 220
    6f4e:	98 4f       	sbci	r25, 0xF8	; 248
    6f50:	8d 83       	std	Y+5, r24	; 0x05
    6f52:	9e 83       	std	Y+6, r25	; 0x06
    6f54:	ed 81       	ldd	r30, Y+5	; 0x05
    6f56:	fe 81       	ldd	r31, Y+6	; 0x06
    6f58:	84 91       	lpm	r24, Z+
    6f5a:	8c 83       	std	Y+4, r24	; 0x04
    6f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    6f5e:	16 96       	adiw	r26, 0x06	; 6
    6f60:	8c 93       	st	X, r24
	f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    6f62:	a0 91 ea 21 	lds	r26, 0x21EA
    6f66:	b0 91 eb 21 	lds	r27, 0x21EB
    6f6a:	8f 81       	ldd	r24, Y+7	; 0x07
    6f6c:	88 2f       	mov	r24, r24
    6f6e:	90 e0       	ldi	r25, 0x00	; 0
    6f70:	81 5d       	subi	r24, 0xD1	; 209
    6f72:	98 4f       	sbci	r25, 0xF8	; 248
    6f74:	8a 83       	std	Y+2, r24	; 0x02
    6f76:	9b 83       	std	Y+3, r25	; 0x03
    6f78:	ea 81       	ldd	r30, Y+2	; 0x02
    6f7a:	fb 81       	ldd	r31, Y+3	; 0x03
    6f7c:	84 91       	lpm	r24, Z+
    6f7e:	89 83       	std	Y+1, r24	; 0x01
    6f80:	89 81       	ldd	r24, Y+1	; 0x01
    6f82:	17 96       	adiw	r26, 0x07	; 7
    6f84:	8c 93       	st	X, r24
    6f86:	17 97       	sbiw	r26, 0x07	; 7
	f.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm; // enable tx and rx on USART
    6f88:	e0 91 ea 21 	lds	r30, 0x21EA
    6f8c:	f0 91 eb 21 	lds	r31, 0x21EB
    6f90:	88 e1       	ldi	r24, 0x18	; 24
    6f92:	84 83       	std	Z+4, r24	; 0x04
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    6f94:	e0 91 ea 21 	lds	r30, 0x21EA
    6f98:	f0 91 eb 21 	lds	r31, 0x21EB
    6f9c:	81 e2       	ldi	r24, 0x21	; 33
    6f9e:	83 83       	std	Z+3, r24	; 0x03

	f.port->DIRCLR = USB_RX_bm;	 			// clr RX pin as input
    6fa0:	e0 91 ec 21 	lds	r30, 0x21EC
    6fa4:	f0 91 ed 21 	lds	r31, 0x21ED
    6fa8:	84 e0       	ldi	r24, 0x04	; 4
    6faa:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_TX_bm; 			// set TX pin as output
    6fac:	e0 91 ec 21 	lds	r30, 0x21EC
    6fb0:	f0 91 ed 21 	lds	r31, 0x21ED
    6fb4:	88 e0       	ldi	r24, 0x08	; 8
    6fb6:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_TX_bm;				// set TX HI as initial state
    6fb8:	e0 91 ec 21 	lds	r30, 0x21EC
    6fbc:	f0 91 ed 21 	lds	r31, 0x21ED
    6fc0:	88 e0       	ldi	r24, 0x08	; 8
    6fc2:	85 83       	std	Z+5, r24	; 0x05
	f.port->DIRCLR = USB_CTS_bm; 			// set CTS pin as input
    6fc4:	e0 91 ec 21 	lds	r30, 0x21EC
    6fc8:	f0 91 ed 21 	lds	r31, 0x21ED
    6fcc:	81 e0       	ldi	r24, 0x01	; 1
    6fce:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_RTS_bm; 			// set RTS pin as output
    6fd0:	e0 91 ec 21 	lds	r30, 0x21EC
    6fd4:	f0 91 ed 21 	lds	r31, 0x21ED
    6fd8:	82 e0       	ldi	r24, 0x02	; 2
    6fda:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
    6fdc:	e0 91 ec 21 	lds	r30, 0x21EC
    6fe0:	f0 91 ed 21 	lds	r31, 0x21ED
    6fe4:	82 e0       	ldi	r24, 0x02	; 2
    6fe6:	85 83       	std	Z+5, r24	; 0x05
//	f.port->OUTCLR = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
}
    6fe8:	29 96       	adiw	r28, 0x09	; 9
    6fea:	cd bf       	out	0x3d, r28	; 61
    6fec:	de bf       	out	0x3e, r29	; 62
    6fee:	cf 91       	pop	r28
    6ff0:	df 91       	pop	r29
    6ff2:	08 95       	ret

00006ff4 <xio_usb_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_usb_control(const uint16_t control, const int16_t arg)
{
    6ff4:	df 93       	push	r29
    6ff6:	cf 93       	push	r28
    6ff8:	cd b7       	in	r28, 0x3d	; 61
    6ffa:	de b7       	in	r29, 0x3e	; 62
    6ffc:	2a 97       	sbiw	r28, 0x0a	; 10
    6ffe:	cd bf       	out	0x3d, r28	; 61
    7000:	de bf       	out	0x3e, r29	; 62
    7002:	8f 83       	std	Y+7, r24	; 0x07
    7004:	98 87       	std	Y+8, r25	; 0x08
    7006:	69 87       	std	Y+9, r22	; 0x09
    7008:	7a 87       	std	Y+10, r23	; 0x0a
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    700a:	8f 81       	ldd	r24, Y+7	; 0x07
    700c:	98 85       	ldd	r25, Y+8	; 0x08
    700e:	8f 70       	andi	r24, 0x0F	; 15
    7010:	90 70       	andi	r25, 0x00	; 0
    7012:	00 97       	sbiw	r24, 0x00	; 0
    7014:	39 f1       	breq	.+78     	; 0x7064 <xio_usb_control+0x70>
		f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    7016:	a0 91 ea 21 	lds	r26, 0x21EA
    701a:	b0 91 eb 21 	lds	r27, 0x21EB
    701e:	8f 81       	ldd	r24, Y+7	; 0x07
    7020:	98 85       	ldd	r25, Y+8	; 0x08
    7022:	8f 70       	andi	r24, 0x0F	; 15
    7024:	90 70       	andi	r25, 0x00	; 0
    7026:	8c 5d       	subi	r24, 0xDC	; 220
    7028:	98 4f       	sbci	r25, 0xF8	; 248
    702a:	8d 83       	std	Y+5, r24	; 0x05
    702c:	9e 83       	std	Y+6, r25	; 0x06
    702e:	ed 81       	ldd	r30, Y+5	; 0x05
    7030:	fe 81       	ldd	r31, Y+6	; 0x06
    7032:	84 91       	lpm	r24, Z+
    7034:	8c 83       	std	Y+4, r24	; 0x04
    7036:	8c 81       	ldd	r24, Y+4	; 0x04
    7038:	16 96       	adiw	r26, 0x06	; 6
    703a:	8c 93       	st	X, r24
		f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    703c:	a0 91 ea 21 	lds	r26, 0x21EA
    7040:	b0 91 eb 21 	lds	r27, 0x21EB
    7044:	8f 81       	ldd	r24, Y+7	; 0x07
    7046:	98 85       	ldd	r25, Y+8	; 0x08
    7048:	8f 70       	andi	r24, 0x0F	; 15
    704a:	90 70       	andi	r25, 0x00	; 0
    704c:	81 5d       	subi	r24, 0xD1	; 209
    704e:	98 4f       	sbci	r25, 0xF8	; 248
    7050:	8a 83       	std	Y+2, r24	; 0x02
    7052:	9b 83       	std	Y+3, r25	; 0x03
    7054:	ea 81       	ldd	r30, Y+2	; 0x02
    7056:	fb 81       	ldd	r31, Y+3	; 0x03
    7058:	84 91       	lpm	r24, Z+
    705a:	89 83       	std	Y+1, r24	; 0x01
    705c:	89 81       	ldd	r24, Y+1	; 0x01
    705e:	17 96       	adiw	r26, 0x07	; 7
    7060:	8c 93       	st	X, r24
    7062:	17 97       	sbiw	r26, 0x07	; 7
	}
	if (control & XIO_BLOCK) {
    7064:	8f 81       	ldd	r24, Y+7	; 0x07
    7066:	98 85       	ldd	r25, Y+8	; 0x08
    7068:	80 74       	andi	r24, 0x40	; 64
    706a:	90 70       	andi	r25, 0x00	; 0
    706c:	00 97       	sbiw	r24, 0x00	; 0
    706e:	49 f0       	breq	.+18     	; 0x7082 <xio_usb_control+0x8e>
		f.flags |= XIO_FLAG_BLOCK_bm;
    7070:	80 91 b1 21 	lds	r24, 0x21B1
    7074:	90 91 b2 21 	lds	r25, 0x21B2
    7078:	84 60       	ori	r24, 0x04	; 4
    707a:	80 93 b1 21 	sts	0x21B1, r24
    707e:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOBLOCK) {
    7082:	8f 81       	ldd	r24, Y+7	; 0x07
    7084:	98 85       	ldd	r25, Y+8	; 0x08
    7086:	80 78       	andi	r24, 0x80	; 128
    7088:	90 70       	andi	r25, 0x00	; 0
    708a:	00 97       	sbiw	r24, 0x00	; 0
    708c:	49 f0       	breq	.+18     	; 0x70a0 <xio_usb_control+0xac>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    708e:	80 91 b1 21 	lds	r24, 0x21B1
    7092:	90 91 b2 21 	lds	r25, 0x21B2
    7096:	8b 7f       	andi	r24, 0xFB	; 251
    7098:	80 93 b1 21 	sts	0x21B1, r24
    709c:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_ECHO) {
    70a0:	8f 81       	ldd	r24, Y+7	; 0x07
    70a2:	98 85       	ldd	r25, Y+8	; 0x08
    70a4:	80 70       	andi	r24, 0x00	; 0
    70a6:	91 70       	andi	r25, 0x01	; 1
    70a8:	00 97       	sbiw	r24, 0x00	; 0
    70aa:	49 f0       	breq	.+18     	; 0x70be <xio_usb_control+0xca>
		f.flags |= XIO_FLAG_ECHO_bm;
    70ac:	80 91 b1 21 	lds	r24, 0x21B1
    70b0:	90 91 b2 21 	lds	r25, 0x21B2
    70b4:	80 61       	ori	r24, 0x10	; 16
    70b6:	80 93 b1 21 	sts	0x21B1, r24
    70ba:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOECHO) {
    70be:	8f 81       	ldd	r24, Y+7	; 0x07
    70c0:	98 85       	ldd	r25, Y+8	; 0x08
    70c2:	80 70       	andi	r24, 0x00	; 0
    70c4:	92 70       	andi	r25, 0x02	; 2
    70c6:	00 97       	sbiw	r24, 0x00	; 0
    70c8:	49 f0       	breq	.+18     	; 0x70dc <xio_usb_control+0xe8>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    70ca:	80 91 b1 21 	lds	r24, 0x21B1
    70ce:	90 91 b2 21 	lds	r25, 0x21B2
    70d2:	8f 7e       	andi	r24, 0xEF	; 239
    70d4:	80 93 b1 21 	sts	0x21B1, r24
    70d8:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_CRLF) {
    70dc:	8f 81       	ldd	r24, Y+7	; 0x07
    70de:	98 85       	ldd	r25, Y+8	; 0x08
    70e0:	80 70       	andi	r24, 0x00	; 0
    70e2:	94 70       	andi	r25, 0x04	; 4
    70e4:	00 97       	sbiw	r24, 0x00	; 0
    70e6:	49 f0       	breq	.+18     	; 0x70fa <xio_usb_control+0x106>
		f.flags |= XIO_FLAG_CRLF_bm;
    70e8:	80 91 b1 21 	lds	r24, 0x21B1
    70ec:	90 91 b2 21 	lds	r25, 0x21B2
    70f0:	80 62       	ori	r24, 0x20	; 32
    70f2:	80 93 b1 21 	sts	0x21B1, r24
    70f6:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOCRLF) {
    70fa:	8f 81       	ldd	r24, Y+7	; 0x07
    70fc:	98 85       	ldd	r25, Y+8	; 0x08
    70fe:	80 70       	andi	r24, 0x00	; 0
    7100:	98 70       	andi	r25, 0x08	; 8
    7102:	00 97       	sbiw	r24, 0x00	; 0
    7104:	49 f0       	breq	.+18     	; 0x7118 <xio_usb_control+0x124>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    7106:	80 91 b1 21 	lds	r24, 0x21B1
    710a:	90 91 b2 21 	lds	r25, 0x21B2
    710e:	8f 7d       	andi	r24, 0xDF	; 223
    7110:	80 93 b1 21 	sts	0x21B1, r24
    7114:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_LINEMODE) {
    7118:	8f 81       	ldd	r24, Y+7	; 0x07
    711a:	98 85       	ldd	r25, Y+8	; 0x08
    711c:	80 70       	andi	r24, 0x00	; 0
    711e:	90 71       	andi	r25, 0x10	; 16
    7120:	00 97       	sbiw	r24, 0x00	; 0
    7122:	49 f0       	breq	.+18     	; 0x7136 <xio_usb_control+0x142>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    7124:	80 91 b1 21 	lds	r24, 0x21B1
    7128:	90 91 b2 21 	lds	r25, 0x21B2
    712c:	80 64       	ori	r24, 0x40	; 64
    712e:	80 93 b1 21 	sts	0x21B1, r24
    7132:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOLINEMODE) {
    7136:	8f 81       	ldd	r24, Y+7	; 0x07
    7138:	98 85       	ldd	r25, Y+8	; 0x08
    713a:	80 70       	andi	r24, 0x00	; 0
    713c:	90 72       	andi	r25, 0x20	; 32
    713e:	00 97       	sbiw	r24, 0x00	; 0
    7140:	49 f0       	breq	.+18     	; 0x7154 <xio_usb_control+0x160>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    7142:	80 91 b1 21 	lds	r24, 0x21B1
    7146:	90 91 b2 21 	lds	r25, 0x21B2
    714a:	8f 7b       	andi	r24, 0xBF	; 191
    714c:	80 93 b1 21 	sts	0x21B1, r24
    7150:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_SEMICOLONS) {
    7154:	8f 81       	ldd	r24, Y+7	; 0x07
    7156:	98 85       	ldd	r25, Y+8	; 0x08
    7158:	80 70       	andi	r24, 0x00	; 0
    715a:	90 74       	andi	r25, 0x40	; 64
    715c:	00 97       	sbiw	r24, 0x00	; 0
    715e:	49 f0       	breq	.+18     	; 0x7172 <xio_usb_control+0x17e>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    7160:	80 91 b1 21 	lds	r24, 0x21B1
    7164:	90 91 b2 21 	lds	r25, 0x21B2
    7168:	80 68       	ori	r24, 0x80	; 128
    716a:	80 93 b1 21 	sts	0x21B1, r24
    716e:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    7172:	8f 81       	ldd	r24, Y+7	; 0x07
    7174:	98 85       	ldd	r25, Y+8	; 0x08
    7176:	99 23       	and	r25, r25
    7178:	4c f4       	brge	.+18     	; 0x718c <xio_usb_control+0x198>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    717a:	80 91 b1 21 	lds	r24, 0x21B1
    717e:	90 91 b2 21 	lds	r25, 0x21B2
    7182:	8f 77       	andi	r24, 0x7F	; 127
    7184:	80 93 b1 21 	sts	0x21B1, r24
    7188:	90 93 b2 21 	sts	0x21B2, r25
	}
	return (0);
    718c:	80 e0       	ldi	r24, 0x00	; 0
}
    718e:	2a 96       	adiw	r28, 0x0a	; 10
    7190:	cd bf       	out	0x3d, r28	; 61
    7192:	de bf       	out	0x3e, r29	; 62
    7194:	cf 91       	pop	r28
    7196:	df 91       	pop	r29
    7198:	08 95       	ret

0000719a <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    719a:	1f 92       	push	r1
    719c:	0f 92       	push	r0
    719e:	0f b6       	in	r0, 0x3f	; 63
    71a0:	0f 92       	push	r0
    71a2:	00 90 3b 00 	lds	r0, 0x003B
    71a6:	0f 92       	push	r0
    71a8:	11 24       	eor	r1, r1
    71aa:	2f 93       	push	r18
    71ac:	3f 93       	push	r19
    71ae:	4f 93       	push	r20
    71b0:	5f 93       	push	r21
    71b2:	6f 93       	push	r22
    71b4:	7f 93       	push	r23
    71b6:	8f 93       	push	r24
    71b8:	9f 93       	push	r25
    71ba:	af 93       	push	r26
    71bc:	bf 93       	push	r27
    71be:	ef 93       	push	r30
    71c0:	ff 93       	push	r31
    71c2:	df 93       	push	r29
    71c4:	cf 93       	push	r28
    71c6:	0f 92       	push	r0
    71c8:	cd b7       	in	r28, 0x3d	; 61
    71ca:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = f.usart->DATA;					// can only read DATA once
    71cc:	e0 91 ea 21 	lds	r30, 0x21EA
    71d0:	f0 91 eb 21 	lds	r31, 0x21EB
    71d4:	80 81       	ld	r24, Z
    71d6:	89 83       	std	Y+1, r24	; 0x01

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    71d8:	89 81       	ldd	r24, Y+1	; 0x01
    71da:	83 30       	cpi	r24, 0x03	; 3
    71dc:	31 f4       	brne	.+12     	; 0x71ea <__vector_25+0x50>
		f.sig = XIO_SIG_KILL;					// set signal value
    71de:	84 e0       	ldi	r24, 0x04	; 4
    71e0:	80 93 b4 21 	sts	0x21B4, r24
		signal_etx();							// call app-specific signal handler
    71e4:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <signal_etx>
    71e8:	28 c0       	rjmp	.+80     	; 0x723a <__vector_25+0xa0>
		return;
	}

	// normal character path
	if ((--f.rx_buf_head) == 0) { 				// advance buffer head with wrap
    71ea:	80 91 bb 21 	lds	r24, 0x21BB
    71ee:	81 50       	subi	r24, 0x01	; 1
    71f0:	80 93 bb 21 	sts	0x21BB, r24
    71f4:	80 91 bb 21 	lds	r24, 0x21BB
    71f8:	88 23       	and	r24, r24
    71fa:	19 f4       	brne	.+6      	; 0x7202 <__vector_25+0x68>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    71fc:	88 e1       	ldi	r24, 0x18	; 24
    71fe:	80 93 bb 21 	sts	0x21BB, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    7202:	90 91 bb 21 	lds	r25, 0x21BB
    7206:	80 91 ba 21 	lds	r24, 0x21BA
    720a:	98 17       	cp	r25, r24
    720c:	51 f0       	breq	.+20     	; 0x7222 <__vector_25+0x88>
		f.rx_buf[f.rx_buf_head] = c;
    720e:	80 91 bb 21 	lds	r24, 0x21BB
    7212:	88 2f       	mov	r24, r24
    7214:	90 e0       	ldi	r25, 0x00	; 0
    7216:	fc 01       	movw	r30, r24
    7218:	e1 54       	subi	r30, 0x41	; 65
    721a:	fe 4d       	sbci	r31, 0xDE	; 222
    721c:	89 81       	ldd	r24, Y+1	; 0x01
    721e:	80 83       	st	Z, r24
    7220:	0c c0       	rjmp	.+24     	; 0x723a <__vector_25+0xa0>
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    7222:	80 91 bb 21 	lds	r24, 0x21BB
    7226:	8f 5f       	subi	r24, 0xFF	; 255
    7228:	80 93 bb 21 	sts	0x21BB, r24
    722c:	80 91 bb 21 	lds	r24, 0x21BB
    7230:	89 31       	cpi	r24, 0x19	; 25
    7232:	18 f0       	brcs	.+6      	; 0x723a <__vector_25+0xa0>
		f.rx_buf_head = 1;
    7234:	81 e0       	ldi	r24, 0x01	; 1
    7236:	80 93 bb 21 	sts	0x21BB, r24
	}
	// activate flow control here or before it gets to this level
}
    723a:	0f 90       	pop	r0
    723c:	cf 91       	pop	r28
    723e:	df 91       	pop	r29
    7240:	ff 91       	pop	r31
    7242:	ef 91       	pop	r30
    7244:	bf 91       	pop	r27
    7246:	af 91       	pop	r26
    7248:	9f 91       	pop	r25
    724a:	8f 91       	pop	r24
    724c:	7f 91       	pop	r23
    724e:	6f 91       	pop	r22
    7250:	5f 91       	pop	r21
    7252:	4f 91       	pop	r20
    7254:	3f 91       	pop	r19
    7256:	2f 91       	pop	r18
    7258:	0f 90       	pop	r0
    725a:	00 92 3b 00 	sts	0x003B, r0
    725e:	0f 90       	pop	r0
    7260:	0f be       	out	0x3f, r0	; 63
    7262:	0f 90       	pop	r0
    7264:	1f 90       	pop	r1
    7266:	18 95       	reti

00007268 <xio_usb_queue_RX_char>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_usb_queue_RX_char(const char c)
{
    7268:	df 93       	push	r29
    726a:	cf 93       	push	r28
    726c:	0f 92       	push	r0
    726e:	cd b7       	in	r28, 0x3d	; 61
    7270:	de b7       	in	r29, 0x3e	; 62
    7272:	89 83       	std	Y+1, r24	; 0x01
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    7274:	89 81       	ldd	r24, Y+1	; 0x01
    7276:	83 30       	cpi	r24, 0x03	; 3
    7278:	31 f4       	brne	.+12     	; 0x7286 <xio_usb_queue_RX_char+0x1e>
		f.sig = XIO_SIG_KILL;					// set signal value
    727a:	84 e0       	ldi	r24, 0x04	; 4
    727c:	80 93 b4 21 	sts	0x21B4, r24
		signal_etx();							// call app-specific signal handler
    7280:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <signal_etx>
    7284:	28 c0       	rjmp	.+80     	; 0x72d6 <xio_usb_queue_RX_char+0x6e>
		return;
	}

	// normal path
	if ((--f.rx_buf_head) == 0) { 				// wrap condition
    7286:	80 91 bb 21 	lds	r24, 0x21BB
    728a:	81 50       	subi	r24, 0x01	; 1
    728c:	80 93 bb 21 	sts	0x21BB, r24
    7290:	80 91 bb 21 	lds	r24, 0x21BB
    7294:	88 23       	and	r24, r24
    7296:	19 f4       	brne	.+6      	; 0x729e <xio_usb_queue_RX_char+0x36>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    7298:	88 e1       	ldi	r24, 0x18	; 24
    729a:	80 93 bb 21 	sts	0x21BB, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    729e:	90 91 bb 21 	lds	r25, 0x21BB
    72a2:	80 91 ba 21 	lds	r24, 0x21BA
    72a6:	98 17       	cp	r25, r24
    72a8:	51 f0       	breq	.+20     	; 0x72be <xio_usb_queue_RX_char+0x56>
		f.rx_buf[f.rx_buf_head] = c;			// FAKE INPUT DATA
    72aa:	80 91 bb 21 	lds	r24, 0x21BB
    72ae:	88 2f       	mov	r24, r24
    72b0:	90 e0       	ldi	r25, 0x00	; 0
    72b2:	fc 01       	movw	r30, r24
    72b4:	e1 54       	subi	r30, 0x41	; 65
    72b6:	fe 4d       	sbci	r31, 0xDE	; 222
    72b8:	89 81       	ldd	r24, Y+1	; 0x01
    72ba:	80 83       	st	Z, r24
    72bc:	0c c0       	rjmp	.+24     	; 0x72d6 <xio_usb_queue_RX_char+0x6e>
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    72be:	80 91 bb 21 	lds	r24, 0x21BB
    72c2:	8f 5f       	subi	r24, 0xFF	; 255
    72c4:	80 93 bb 21 	sts	0x21BB, r24
    72c8:	80 91 bb 21 	lds	r24, 0x21BB
    72cc:	89 31       	cpi	r24, 0x19	; 25
    72ce:	18 f0       	brcs	.+6      	; 0x72d6 <xio_usb_queue_RX_char+0x6e>
		f.rx_buf_head = 1;
    72d0:	81 e0       	ldi	r24, 0x01	; 1
    72d2:	80 93 bb 21 	sts	0x21BB, r24
	}
}
    72d6:	0f 90       	pop	r0
    72d8:	cf 91       	pop	r28
    72da:	df 91       	pop	r29
    72dc:	08 95       	ret

000072de <xio_usb_queue_RX_string>:
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_usb_queue_RX_string(char *buf)
{
    72de:	df 93       	push	r29
    72e0:	cf 93       	push	r28
    72e2:	cd b7       	in	r28, 0x3d	; 61
    72e4:	de b7       	in	r29, 0x3e	; 62
    72e6:	25 97       	sbiw	r28, 0x05	; 5
    72e8:	cd bf       	out	0x3d, r28	; 61
    72ea:	de bf       	out	0x3e, r29	; 62
    72ec:	8b 83       	std	Y+3, r24	; 0x03
    72ee:	9c 83       	std	Y+4, r25	; 0x04
	char c;
	uint8_t i=0;
    72f0:	19 82       	std	Y+1, r1	; 0x01
    72f2:	03 c0       	rjmp	.+6      	; 0x72fa <xio_usb_queue_RX_string+0x1c>

	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    72f4:	8a 81       	ldd	r24, Y+2	; 0x02
    72f6:	0e 94 34 39 	call	0x7268	; 0x7268 <xio_usb_queue_RX_char>
void xio_usb_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    72fa:	89 81       	ldd	r24, Y+1	; 0x01
    72fc:	28 2f       	mov	r18, r24
    72fe:	30 e0       	ldi	r19, 0x00	; 0
    7300:	8b 81       	ldd	r24, Y+3	; 0x03
    7302:	9c 81       	ldd	r25, Y+4	; 0x04
    7304:	fc 01       	movw	r30, r24
    7306:	e2 0f       	add	r30, r18
    7308:	f3 1f       	adc	r31, r19
    730a:	80 81       	ld	r24, Z
    730c:	8a 83       	std	Y+2, r24	; 0x02
    730e:	8a 81       	ldd	r24, Y+2	; 0x02
    7310:	8d 83       	std	Y+5, r24	; 0x05
    7312:	8d 81       	ldd	r24, Y+5	; 0x05
    7314:	88 23       	and	r24, r24
    7316:	11 f0       	breq	.+4      	; 0x731c <xio_usb_queue_RX_string+0x3e>
    7318:	81 e0       	ldi	r24, 0x01	; 1
    731a:	8d 83       	std	Y+5, r24	; 0x05
    731c:	8d 81       	ldd	r24, Y+5	; 0x05
    731e:	99 81       	ldd	r25, Y+1	; 0x01
    7320:	9f 5f       	subi	r25, 0xFF	; 255
    7322:	99 83       	std	Y+1, r25	; 0x01
    7324:	88 23       	and	r24, r24
    7326:	31 f7       	brne	.-52     	; 0x72f4 <xio_usb_queue_RX_string+0x16>
		xio_usb_queue_RX_char(c);
	}
}
    7328:	25 96       	adiw	r28, 0x05	; 5
    732a:	cd bf       	out	0x3d, r28	; 61
    732c:	de bf       	out	0x3e, r29	; 62
    732e:	cf 91       	pop	r28
    7330:	df 91       	pop	r29
    7332:	08 95       	ret

00007334 <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)		//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    7334:	1f 92       	push	r1
    7336:	0f 92       	push	r0
    7338:	0f b6       	in	r0, 0x3f	; 63
    733a:	0f 92       	push	r0
    733c:	00 90 3b 00 	lds	r0, 0x003B
    7340:	0f 92       	push	r0
    7342:	11 24       	eor	r1, r1
    7344:	8f 93       	push	r24
    7346:	9f 93       	push	r25
    7348:	af 93       	push	r26
    734a:	bf 93       	push	r27
    734c:	ef 93       	push	r30
    734e:	ff 93       	push	r31
    7350:	df 93       	push	r29
    7352:	cf 93       	push	r28
    7354:	cd b7       	in	r28, 0x3d	; 61
    7356:	de b7       	in	r29, 0x3e	; 62
	if (f.tx_buf_head == f.tx_buf_tail) {			// buffer empty - disable ints
    7358:	90 91 bd 21 	lds	r25, 0x21BD
    735c:	80 91 bc 21 	lds	r24, 0x21BC
    7360:	98 17       	cp	r25, r24
    7362:	39 f4       	brne	.+14     	; 0x7372 <__vector_26+0x3e>
		f.usart->CTRLA = USARTC0_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    7364:	e0 91 ea 21 	lds	r30, 0x21EA
    7368:	f0 91 eb 21 	lds	r31, 0x21EB
    736c:	80 e2       	ldi	r24, 0x20	; 32
    736e:	83 83       	std	Z+3, r24	; 0x03
    7370:	21 c0       	rjmp	.+66     	; 0x73b4 <__vector_26+0x80>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(f.flags)) {
    7372:	80 91 b1 21 	lds	r24, 0x21B1
    7376:	90 91 b2 21 	lds	r25, 0x21B2
    737a:	80 70       	andi	r24, 0x00	; 0
    737c:	98 70       	andi	r25, 0x08	; 8
    737e:	00 97       	sbiw	r24, 0x00	; 0
    7380:	c9 f4       	brne	.+50     	; 0x73b4 <__vector_26+0x80>
		if (--(f.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    7382:	80 91 bc 21 	lds	r24, 0x21BC
    7386:	81 50       	subi	r24, 0x01	; 1
    7388:	80 93 bc 21 	sts	0x21BC, r24
    738c:	80 91 bc 21 	lds	r24, 0x21BC
    7390:	88 23       	and	r24, r24
    7392:	19 f4       	brne	.+6      	; 0x739a <__vector_26+0x66>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    7394:	81 e1       	ldi	r24, 0x11	; 17
    7396:	80 93 bc 21 	sts	0x21BC, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];	// write char to TX DATA register
    739a:	a0 91 ea 21 	lds	r26, 0x21EA
    739e:	b0 91 eb 21 	lds	r27, 0x21EB
    73a2:	80 91 bc 21 	lds	r24, 0x21BC
    73a6:	88 2f       	mov	r24, r24
    73a8:	90 e0       	ldi	r25, 0x00	; 0
    73aa:	fc 01       	movw	r30, r24
    73ac:	e8 52       	subi	r30, 0x28	; 40
    73ae:	fe 4d       	sbci	r31, 0xDE	; 222
    73b0:	80 81       	ld	r24, Z
    73b2:	8c 93       	st	X, r24
	}
}
    73b4:	cf 91       	pop	r28
    73b6:	df 91       	pop	r29
    73b8:	ff 91       	pop	r31
    73ba:	ef 91       	pop	r30
    73bc:	bf 91       	pop	r27
    73be:	af 91       	pop	r26
    73c0:	9f 91       	pop	r25
    73c2:	8f 91       	pop	r24
    73c4:	0f 90       	pop	r0
    73c6:	00 92 3b 00 	sts	0x003B, r0
    73ca:	0f 90       	pop	r0
    73cc:	0f be       	out	0x3f, r0	; 63
    73ce:	0f 90       	pop	r0
    73d0:	1f 90       	pop	r1
    73d2:	18 95       	reti

000073d4 <xio_usb_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
    73d4:	df 93       	push	r29
    73d6:	cf 93       	push	r28
    73d8:	cd b7       	in	r28, 0x3d	; 61
    73da:	de b7       	in	r29, 0x3e	; 62
    73dc:	25 97       	sbiw	r28, 0x05	; 5
    73de:	cd bf       	out	0x3d, r28	; 61
    73e0:	de bf       	out	0x3e, r29	; 62
    73e2:	89 83       	std	Y+1, r24	; 0x01
    73e4:	6a 83       	std	Y+2, r22	; 0x02
    73e6:	7b 83       	std	Y+3, r23	; 0x03
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
    73e8:	80 91 bd 21 	lds	r24, 0x21BD
    73ec:	81 50       	subi	r24, 0x01	; 1
    73ee:	80 93 be 21 	sts	0x21BE, r24
    73f2:	80 91 be 21 	lds	r24, 0x21BE
    73f6:	88 23       	and	r24, r24
    73f8:	21 f5       	brne	.+72     	; 0x7442 <xio_usb_putc+0x6e>
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
    73fa:	81 e1       	ldi	r24, 0x11	; 17
    73fc:	80 93 be 21 	sts	0x21BE, r24
    7400:	20 c0       	rjmp	.+64     	; 0x7442 <xio_usb_putc+0x6e>
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    7402:	80 91 b1 21 	lds	r24, 0x21B1
    7406:	90 91 b2 21 	lds	r25, 0x21B2
    740a:	84 70       	andi	r24, 0x04	; 4
    740c:	90 70       	andi	r25, 0x00	; 0
    740e:	00 97       	sbiw	r24, 0x00	; 0
    7410:	81 f0       	breq	.+32     	; 0x7432 <xio_usb_putc+0x5e>
			sleep_mode();
    7412:	a8 e4       	ldi	r26, 0x48	; 72
    7414:	b0 e0       	ldi	r27, 0x00	; 0
    7416:	e8 e4       	ldi	r30, 0x48	; 72
    7418:	f0 e0       	ldi	r31, 0x00	; 0
    741a:	80 81       	ld	r24, Z
    741c:	81 60       	ori	r24, 0x01	; 1
    741e:	8c 93       	st	X, r24
    7420:	88 95       	sleep
    7422:	a8 e4       	ldi	r26, 0x48	; 72
    7424:	b0 e0       	ldi	r27, 0x00	; 0
    7426:	e8 e4       	ldi	r30, 0x48	; 72
    7428:	f0 e0       	ldi	r31, 0x00	; 0
    742a:	80 81       	ld	r24, Z
    742c:	8e 7f       	andi	r24, 0xFE	; 254
    742e:	8c 93       	st	X, r24
    7430:	08 c0       	rjmp	.+16     	; 0x7442 <xio_usb_putc+0x6e>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    7432:	83 e0       	ldi	r24, 0x03	; 3
    7434:	80 93 b4 21 	sts	0x21B4, r24
			return(_FDEV_ERR);
    7438:	8f ef       	ldi	r24, 0xFF	; 255
    743a:	9f ef       	ldi	r25, 0xFF	; 255
    743c:	8c 83       	std	Y+4, r24	; 0x04
    743e:	9d 83       	std	Y+5, r25	; 0x05
    7440:	78 c0       	rjmp	.+240    	; 0x7532 <xio_usb_putc+0x15e>
int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
    7442:	90 91 be 21 	lds	r25, 0x21BE
    7446:	80 91 bc 21 	lds	r24, 0x21BC
    744a:	98 17       	cp	r25, r24
    744c:	d1 f2       	breq	.-76     	; 0x7402 <xio_usb_putc+0x2e>
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
    744e:	80 91 be 21 	lds	r24, 0x21BE
    7452:	80 93 bd 21 	sts	0x21BD, r24
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer
    7456:	80 91 bd 21 	lds	r24, 0x21BD
    745a:	88 2f       	mov	r24, r24
    745c:	90 e0       	ldi	r25, 0x00	; 0
    745e:	fc 01       	movw	r30, r24
    7460:	e8 52       	subi	r30, 0x28	; 40
    7462:	fe 4d       	sbci	r31, 0xDE	; 222
    7464:	89 81       	ldd	r24, Y+1	; 0x01
    7466:	80 83       	st	Z, r24

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    7468:	80 91 b1 21 	lds	r24, 0x21B1
    746c:	90 91 b2 21 	lds	r25, 0x21B2
    7470:	80 72       	andi	r24, 0x20	; 32
    7472:	90 70       	andi	r25, 0x00	; 0
    7474:	00 97       	sbiw	r24, 0x00	; 0
    7476:	61 f0       	breq	.+24     	; 0x7490 <xio_usb_putc+0xbc>
    7478:	89 81       	ldd	r24, Y+1	; 0x01
    747a:	8a 30       	cpi	r24, 0x0A	; 10
    747c:	49 f4       	brne	.+18     	; 0x7490 <xio_usb_putc+0xbc>
		return xio_usb_putc('\r', stream);		// recursion.
    747e:	2a 81       	ldd	r18, Y+2	; 0x02
    7480:	3b 81       	ldd	r19, Y+3	; 0x03
    7482:	8d e0       	ldi	r24, 0x0D	; 13
    7484:	b9 01       	movw	r22, r18
    7486:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <xio_usb_putc>
    748a:	8c 83       	std	Y+4, r24	; 0x04
    748c:	9d 83       	std	Y+5, r25	; 0x05
    748e:	51 c0       	rjmp	.+162    	; 0x7532 <xio_usb_putc+0x15e>
	}

	// dequeue the buffer if DATA register is ready
	if (f.usart->STATUS & 0x20) {
    7490:	e0 91 ea 21 	lds	r30, 0x21EA
    7494:	f0 91 eb 21 	lds	r31, 0x21EB
    7498:	81 81       	ldd	r24, Z+1	; 0x01
    749a:	88 2f       	mov	r24, r24
    749c:	90 e0       	ldi	r25, 0x00	; 0
    749e:	80 72       	andi	r24, 0x20	; 32
    74a0:	90 70       	andi	r25, 0x00	; 0
    74a2:	00 97       	sbiw	r24, 0x00	; 0
    74a4:	a1 f1       	breq	.+104    	; 0x750e <xio_usb_putc+0x13a>
		if (f.tx_buf_head == f.tx_buf_tail) {	// buf might be empty if IRQ got it
    74a6:	90 91 bd 21 	lds	r25, 0x21BD
    74aa:	80 91 bc 21 	lds	r24, 0x21BC
    74ae:	98 17       	cp	r25, r24
    74b0:	19 f4       	brne	.+6      	; 0x74b8 <xio_usb_putc+0xe4>
			return (0);
    74b2:	1c 82       	std	Y+4, r1	; 0x04
    74b4:	1d 82       	std	Y+5, r1	; 0x05
    74b6:	3d c0       	rjmp	.+122    	; 0x7532 <xio_usb_putc+0x15e>
		}
		f.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    74b8:	80 91 b1 21 	lds	r24, 0x21B1
    74bc:	90 91 b2 21 	lds	r25, 0x21B2
    74c0:	98 60       	ori	r25, 0x08	; 8
    74c2:	80 93 b1 21 	sts	0x21B1, r24
    74c6:	90 93 b2 21 	sts	0x21B2, r25
		if (--(f.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    74ca:	80 91 bc 21 	lds	r24, 0x21BC
    74ce:	81 50       	subi	r24, 0x01	; 1
    74d0:	80 93 bc 21 	sts	0x21BC, r24
    74d4:	80 91 bc 21 	lds	r24, 0x21BC
    74d8:	88 23       	and	r24, r24
    74da:	19 f4       	brne	.+6      	; 0x74e2 <xio_usb_putc+0x10e>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    74dc:	81 e1       	ldi	r24, 0x11	; 17
    74de:	80 93 bc 21 	sts	0x21BC, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];// write char to TX DATA register
    74e2:	a0 91 ea 21 	lds	r26, 0x21EA
    74e6:	b0 91 eb 21 	lds	r27, 0x21EB
    74ea:	80 91 bc 21 	lds	r24, 0x21BC
    74ee:	88 2f       	mov	r24, r24
    74f0:	90 e0       	ldi	r25, 0x00	; 0
    74f2:	fc 01       	movw	r30, r24
    74f4:	e8 52       	subi	r30, 0x28	; 40
    74f6:	fe 4d       	sbci	r31, 0xDE	; 222
    74f8:	80 81       	ld	r24, Z
    74fa:	8c 93       	st	X, r24
		f.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    74fc:	80 91 b1 21 	lds	r24, 0x21B1
    7500:	90 91 b2 21 	lds	r25, 0x21B2
    7504:	97 7f       	andi	r25, 0xF7	; 247
    7506:	80 93 b1 21 	sts	0x21B1, r24
    750a:	90 93 b2 21 	sts	0x21B2, r25
	}
	// enable interrupts regardless
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    750e:	e0 91 ea 21 	lds	r30, 0x21EA
    7512:	f0 91 eb 21 	lds	r31, 0x21EB
    7516:	81 e2       	ldi	r24, 0x21	; 33
    7518:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    751a:	a0 ea       	ldi	r26, 0xA0	; 160
    751c:	b0 e0       	ldi	r27, 0x00	; 0
    751e:	e0 ea       	ldi	r30, 0xA0	; 160
    7520:	f0 e0       	ldi	r31, 0x00	; 0
    7522:	82 81       	ldd	r24, Z+2	; 0x02
    7524:	81 60       	ori	r24, 0x01	; 1
    7526:	12 96       	adiw	r26, 0x02	; 2
    7528:	8c 93       	st	X, r24
    752a:	12 97       	sbiw	r26, 0x02	; 2
	sei();										// enable global interrupts
    752c:	78 94       	sei

	return (0);	// 0 = OK
    752e:	1c 82       	std	Y+4, r1	; 0x04
    7530:	1d 82       	std	Y+5, r1	; 0x05
    7532:	8c 81       	ldd	r24, Y+4	; 0x04
    7534:	9d 81       	ldd	r25, Y+5	; 0x05
}
    7536:	25 96       	adiw	r28, 0x05	; 5
    7538:	cd bf       	out	0x3d, r28	; 61
    753a:	de bf       	out	0x3e, r29	; 62
    753c:	cf 91       	pop	r28
    753e:	df 91       	pop	r29
    7540:	08 95       	ret

00007542 <xio_usb_getc>:
 *		- special characters such as EOL and control chars are handled by the
 *		  character helper routines. See them for behaviors
 */

int xio_usb_getc(FILE *stream)
{
    7542:	df 93       	push	r29
    7544:	cf 93       	push	r28
    7546:	cd b7       	in	r28, 0x3d	; 61
    7548:	de b7       	in	r29, 0x3e	; 62
    754a:	28 97       	sbiw	r28, 0x08	; 8
    754c:	cd bf       	out	0x3d, r28	; 61
    754e:	de bf       	out	0x3e, r29	; 62
    7550:	8d 83       	std	Y+5, r24	; 0x05
    7552:	9e 83       	std	Y+6, r25	; 0x06
    7554:	20 c0       	rjmp	.+64     	; 0x7596 <xio_usb_getc+0x54>
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(f.flags)) {
    7556:	80 91 b1 21 	lds	r24, 0x21B1
    755a:	90 91 b2 21 	lds	r25, 0x21B2
    755e:	84 70       	andi	r24, 0x04	; 4
    7560:	90 70       	andi	r25, 0x00	; 0
    7562:	00 97       	sbiw	r24, 0x00	; 0
    7564:	81 f0       	breq	.+32     	; 0x7586 <xio_usb_getc+0x44>
			sleep_mode();
    7566:	a8 e4       	ldi	r26, 0x48	; 72
    7568:	b0 e0       	ldi	r27, 0x00	; 0
    756a:	e8 e4       	ldi	r30, 0x48	; 72
    756c:	f0 e0       	ldi	r31, 0x00	; 0
    756e:	80 81       	ld	r24, Z
    7570:	81 60       	ori	r24, 0x01	; 1
    7572:	8c 93       	st	X, r24
    7574:	88 95       	sleep
    7576:	a8 e4       	ldi	r26, 0x48	; 72
    7578:	b0 e0       	ldi	r27, 0x00	; 0
    757a:	e8 e4       	ldi	r30, 0x48	; 72
    757c:	f0 e0       	ldi	r31, 0x00	; 0
    757e:	80 81       	ld	r24, Z
    7580:	8e 7f       	andi	r24, 0xFE	; 254
    7582:	8c 93       	st	X, r24
    7584:	08 c0       	rjmp	.+16     	; 0x7596 <xio_usb_getc+0x54>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    7586:	83 e0       	ldi	r24, 0x03	; 3
    7588:	80 93 b4 21 	sts	0x21B4, r24
			return(_FDEV_ERR);
    758c:	8f ef       	ldi	r24, 0xFF	; 255
    758e:	9f ef       	ldi	r25, 0xFF	; 255
    7590:	8f 83       	std	Y+7, r24	; 0x07
    7592:	98 87       	std	Y+8, r25	; 0x08
    7594:	36 c0       	rjmp	.+108    	; 0x7602 <xio_usb_getc+0xc0>
 *		  character helper routines. See them for behaviors
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
    7596:	90 91 bb 21 	lds	r25, 0x21BB
    759a:	80 91 ba 21 	lds	r24, 0x21BA
    759e:	98 17       	cp	r25, r24
    75a0:	d1 f2       	breq	.-76     	; 0x7556 <xio_usb_getc+0x14>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    75a2:	80 91 ba 21 	lds	r24, 0x21BA
    75a6:	81 50       	subi	r24, 0x01	; 1
    75a8:	80 93 ba 21 	sts	0x21BA, r24
    75ac:	80 91 ba 21 	lds	r24, 0x21BA
    75b0:	88 23       	and	r24, r24
    75b2:	19 f4       	brne	.+6      	; 0x75ba <xio_usb_getc+0x78>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    75b4:	88 e1       	ldi	r24, 0x18	; 24
    75b6:	80 93 ba 21 	sts	0x21BA, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    75ba:	80 91 ba 21 	lds	r24, 0x21BA
    75be:	88 2f       	mov	r24, r24
    75c0:	90 e0       	ldi	r25, 0x00	; 0
    75c2:	fc 01       	movw	r30, r24
    75c4:	e1 54       	subi	r30, 0x41	; 65
    75c6:	fe 4d       	sbci	r31, 0xDE	; 222
    75c8:	80 81       	ld	r24, Z
    75ca:	8f 77       	andi	r24, 0x7F	; 127
    75cc:	80 93 b5 21 	sts	0x21B5, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[f.c])))());
    75d0:	80 91 b5 21 	lds	r24, 0x21B5
    75d4:	88 2f       	mov	r24, r24
    75d6:	90 e0       	ldi	r25, 0x00	; 0
    75d8:	88 0f       	add	r24, r24
    75da:	99 1f       	adc	r25, r25
    75dc:	8a 59       	subi	r24, 0x9A	; 154
    75de:	98 4f       	sbci	r25, 0xF8	; 248
    75e0:	8b 83       	std	Y+3, r24	; 0x03
    75e2:	9c 83       	std	Y+4, r25	; 0x04
    75e4:	8b 81       	ldd	r24, Y+3	; 0x03
    75e6:	9c 81       	ldd	r25, Y+4	; 0x04
    75e8:	fc 01       	movw	r30, r24
    75ea:	85 91       	lpm	r24, Z+
    75ec:	94 91       	lpm	r25, Z+
    75ee:	89 83       	std	Y+1, r24	; 0x01
    75f0:	9a 83       	std	Y+2, r25	; 0x02
    75f2:	eb 83       	std	Y+3, r30	; 0x03
    75f4:	fc 83       	std	Y+4, r31	; 0x04
    75f6:	89 81       	ldd	r24, Y+1	; 0x01
    75f8:	9a 81       	ldd	r25, Y+2	; 0x02
    75fa:	fc 01       	movw	r30, r24
    75fc:	19 95       	eicall
    75fe:	8f 83       	std	Y+7, r24	; 0x07
    7600:	98 87       	std	Y+8, r25	; 0x08
    7602:	8f 81       	ldd	r24, Y+7	; 0x07
    7604:	98 85       	ldd	r25, Y+8	; 0x08
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    7606:	28 96       	adiw	r28, 0x08	; 8
    7608:	cd bf       	out	0x3d, r28	; 61
    760a:	de bf       	out	0x3e, r29	; 62
    760c:	cf 91       	pop	r28
    760e:	df 91       	pop	r29
    7610:	08 95       	ret

00007612 <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
    7612:	df 93       	push	r29
    7614:	cf 93       	push	r28
    7616:	cd b7       	in	r28, 0x3d	; 61
    7618:	de b7       	in	r29, 0x3e	; 62
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    761a:	80 91 b1 21 	lds	r24, 0x21B1
    761e:	90 91 b2 21 	lds	r25, 0x21B2
    7622:	80 71       	andi	r24, 0x10	; 16
    7624:	90 70       	andi	r25, 0x00	; 0
    7626:	00 97       	sbiw	r24, 0x00	; 0
    7628:	49 f0       	breq	.+18     	; 0x763c <_getc_char+0x2a>
    762a:	80 91 b5 21 	lds	r24, 0x21B5
    762e:	20 91 44 25 	lds	r18, 0x2544
    7632:	30 91 45 25 	lds	r19, 0x2545
    7636:	b9 01       	movw	r22, r18
    7638:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <xio_usb_putc>
	return(f.c);
    763c:	80 91 b5 21 	lds	r24, 0x21B5
    7640:	88 2f       	mov	r24, r24
    7642:	90 e0       	ldi	r25, 0x00	; 0
}
    7644:	cf 91       	pop	r28
    7646:	df 91       	pop	r29
    7648:	08 95       	ret

0000764a <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
    764a:	df 93       	push	r29
    764c:	cf 93       	push	r28
    764e:	cd b7       	in	r28, 0x3d	; 61
    7650:	de b7       	in	r29, 0x3e	; 62
	if (LINEMODE(f.flags)) f.c = '\n';
    7652:	80 91 b1 21 	lds	r24, 0x21B1
    7656:	90 91 b2 21 	lds	r25, 0x21B2
    765a:	80 74       	andi	r24, 0x40	; 64
    765c:	90 70       	andi	r25, 0x00	; 0
    765e:	00 97       	sbiw	r24, 0x00	; 0
    7660:	19 f0       	breq	.+6      	; 0x7668 <_getc_NEWLINE+0x1e>
    7662:	8a e0       	ldi	r24, 0x0A	; 10
    7664:	80 93 b5 21 	sts	0x21B5, r24
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    7668:	80 91 b1 21 	lds	r24, 0x21B1
    766c:	90 91 b2 21 	lds	r25, 0x21B2
    7670:	80 71       	andi	r24, 0x10	; 16
    7672:	90 70       	andi	r25, 0x00	; 0
    7674:	00 97       	sbiw	r24, 0x00	; 0
    7676:	49 f0       	breq	.+18     	; 0x768a <_getc_NEWLINE+0x40>
    7678:	80 91 b5 21 	lds	r24, 0x21B5
    767c:	20 91 44 25 	lds	r18, 0x2544
    7680:	30 91 45 25 	lds	r19, 0x2545
    7684:	b9 01       	movw	r22, r18
    7686:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <xio_usb_putc>
	return(f.c);
    768a:	80 91 b5 21 	lds	r24, 0x21B5
    768e:	88 2f       	mov	r24, r24
    7690:	90 e0       	ldi	r25, 0x00	; 0
}
    7692:	cf 91       	pop	r28
    7694:	df 91       	pop	r29
    7696:	08 95       	ret

00007698 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
    7698:	df 93       	push	r29
    769a:	cf 93       	push	r28
    769c:	0f 92       	push	r0
    769e:	0f 92       	push	r0
    76a0:	cd b7       	in	r28, 0x3d	; 61
    76a2:	de b7       	in	r29, 0x3e	; 62
	if (SEMICOLONS(f.flags)) {
    76a4:	80 91 b1 21 	lds	r24, 0x21B1
    76a8:	90 91 b2 21 	lds	r25, 0x21B2
    76ac:	80 78       	andi	r24, 0x80	; 128
    76ae:	90 70       	andi	r25, 0x00	; 0
    76b0:	00 97       	sbiw	r24, 0x00	; 0
    76b2:	29 f0       	breq	.+10     	; 0x76be <_getc_SEMICOLON+0x26>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    76b4:	0e 94 25 3b 	call	0x764a	; 0x764a <_getc_NEWLINE>
    76b8:	89 83       	std	Y+1, r24	; 0x01
    76ba:	9a 83       	std	Y+2, r25	; 0x02
    76bc:	04 c0       	rjmp	.+8      	; 0x76c6 <_getc_SEMICOLON+0x2e>
	} 
	return (_getc_char());					// else treat as any other character
    76be:	0e 94 09 3b 	call	0x7612	; 0x7612 <_getc_char>
    76c2:	89 83       	std	Y+1, r24	; 0x01
    76c4:	9a 83       	std	Y+2, r25	; 0x02
    76c6:	89 81       	ldd	r24, Y+1	; 0x01
    76c8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    76ca:	0f 90       	pop	r0
    76cc:	0f 90       	pop	r0
    76ce:	cf 91       	pop	r28
    76d0:	df 91       	pop	r29
    76d2:	08 95       	ret

000076d4 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
    76d4:	df 93       	push	r29
    76d6:	cf 93       	push	r28
    76d8:	cd b7       	in	r28, 0x3d	; 61
    76da:	de b7       	in	r29, 0x3e	; 62
	f.sig = XIO_SIG_DELETE;
    76dc:	8a e0       	ldi	r24, 0x0A	; 10
    76de:	80 93 b4 21 	sts	0x21B4, r24
	return(_FDEV_ERR);
    76e2:	8f ef       	ldi	r24, 0xFF	; 255
    76e4:	9f ef       	ldi	r25, 0xFF	; 255
}
    76e6:	cf 91       	pop	r28
    76e8:	df 91       	pop	r29
    76ea:	08 95       	ret

000076ec <xio_usb_readln>:
 *
 *	Note: LINEMODE flag in device struct is ignored. It's ALWAYS LINEMODE here.
 */

int xio_usb_readln(char *buf, uint8_t len)
{
    76ec:	df 93       	push	r29
    76ee:	cf 93       	push	r28
    76f0:	cd b7       	in	r28, 0x3d	; 61
    76f2:	de b7       	in	r29, 0x3e	; 62
    76f4:	27 97       	sbiw	r28, 0x07	; 7
    76f6:	cd bf       	out	0x3d, r28	; 61
    76f8:	de bf       	out	0x3e, r29	; 62
    76fa:	89 83       	std	Y+1, r24	; 0x01
    76fc:	9a 83       	std	Y+2, r25	; 0x02
    76fe:	6b 83       	std	Y+3, r22	; 0x03
//	uint8_t status = 0;

	if (!IN_LINE(f.flags)) {					// first time thru initializations
    7700:	80 91 b1 21 	lds	r24, 0x21B1
    7704:	90 91 b2 21 	lds	r25, 0x21B2
    7708:	80 70       	andi	r24, 0x00	; 0
    770a:	90 74       	andi	r25, 0x40	; 64
    770c:	00 97       	sbiw	r24, 0x00	; 0
    770e:	c1 f4       	brne	.+48     	; 0x7740 <xio_usb_readln+0x54>
		f.i = 0;								// zero buffer
    7710:	10 92 b6 21 	sts	0x21B6, r1
		f.status = 0;							// reset status
    7714:	10 92 b3 21 	sts	0x21B3, r1
		f.len = len;							// save arg into struct 
    7718:	8b 81       	ldd	r24, Y+3	; 0x03
    771a:	80 93 b7 21 	sts	0x21B7, r24
		f.buf = buf;							// save arg into struct 
    771e:	89 81       	ldd	r24, Y+1	; 0x01
    7720:	9a 81       	ldd	r25, Y+2	; 0x02
    7722:	80 93 b8 21 	sts	0x21B8, r24
    7726:	90 93 b9 21 	sts	0x21B9, r25
		f.sig = XIO_SIG_OK;						// reset signal register
    772a:	10 92 b4 21 	sts	0x21B4, r1
		f.flags |= XIO_FLAG_IN_LINE_bm;			// yes, we are busy getting a line
    772e:	80 91 b1 21 	lds	r24, 0x21B1
    7732:	90 91 b2 21 	lds	r25, 0x21B2
    7736:	90 64       	ori	r25, 0x40	; 64
    7738:	80 93 b1 21 	sts	0x21B1, r24
    773c:	90 93 b2 21 	sts	0x21B2, r25
	}
	while (TRUE) { 
		switch (f.status = _xio_usb_readchar(buf, len)) {
    7740:	89 81       	ldd	r24, Y+1	; 0x01
    7742:	9a 81       	ldd	r25, Y+2	; 0x02
    7744:	6b 81       	ldd	r22, Y+3	; 0x03
    7746:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <_xio_usb_readchar>
    774a:	80 93 b3 21 	sts	0x21B3, r24
    774e:	80 91 b3 21 	lds	r24, 0x21B3
    7752:	28 2f       	mov	r18, r24
    7754:	30 e0       	ldi	r19, 0x00	; 0
    7756:	2e 83       	std	Y+6, r18	; 0x06
    7758:	3f 83       	std	Y+7, r19	; 0x07
    775a:	8e 81       	ldd	r24, Y+6	; 0x06
    775c:	9f 81       	ldd	r25, Y+7	; 0x07
    775e:	87 30       	cpi	r24, 0x07	; 7
    7760:	91 05       	cpc	r25, r1
    7762:	81 f0       	breq	.+32     	; 0x7784 <xio_usb_readln+0x98>
    7764:	2e 81       	ldd	r18, Y+6	; 0x06
    7766:	3f 81       	ldd	r19, Y+7	; 0x07
    7768:	28 30       	cpi	r18, 0x08	; 8
    776a:	31 05       	cpc	r19, r1
    776c:	31 f0       	breq	.+12     	; 0x777a <xio_usb_readln+0x8e>
    776e:	8e 81       	ldd	r24, Y+6	; 0x06
    7770:	9f 81       	ldd	r25, Y+7	; 0x07
    7772:	84 30       	cpi	r24, 0x04	; 4
    7774:	91 05       	cpc	r25, r1
    7776:	69 f0       	breq	.+26     	; 0x7792 <xio_usb_readln+0xa6>
    7778:	e3 cf       	rjmp	.-58     	; 0x7740 <xio_usb_readln+0x54>
			case (TG_BUFFER_EMPTY): return (TG_EAGAIN); break;	// empty condition
    777a:	21 e0       	ldi	r18, 0x01	; 1
    777c:	30 e0       	ldi	r19, 0x00	; 0
    777e:	2c 83       	std	Y+4, r18	; 0x04
    7780:	3d 83       	std	Y+5, r19	; 0x05
    7782:	09 c0       	rjmp	.+18     	; 0x7796 <xio_usb_readln+0xaa>
			case (TG_BUFFER_FULL): return (f.status); break;	// overrun error
    7784:	80 91 b3 21 	lds	r24, 0x21B3
    7788:	28 2f       	mov	r18, r24
    778a:	30 e0       	ldi	r19, 0x00	; 0
    778c:	2c 83       	std	Y+4, r18	; 0x04
    778e:	3d 83       	std	Y+5, r19	; 0x05
    7790:	02 c0       	rjmp	.+4      	; 0x7796 <xio_usb_readln+0xaa>
			case (TG_EOL): return (TG_OK); break;				// got completed line
    7792:	1c 82       	std	Y+4, r1	; 0x04
    7794:	1d 82       	std	Y+5, r1	; 0x05
			case (TG_EAGAIN): break;							// loop
		}
	}
    7796:	8c 81       	ldd	r24, Y+4	; 0x04
    7798:	9d 81       	ldd	r25, Y+5	; 0x05
}
    779a:	27 96       	adiw	r28, 0x07	; 7
    779c:	cd bf       	out	0x3d, r28	; 61
    779e:	de bf       	out	0x3e, r29	; 62
    77a0:	cf 91       	pop	r28
    77a2:	df 91       	pop	r29
    77a4:	08 95       	ret

000077a6 <_xio_usb_readchar>:

int _xio_usb_readchar(char *buf, uint8_t len)
{
    77a6:	df 93       	push	r29
    77a8:	cf 93       	push	r28
    77aa:	cd b7       	in	r28, 0x3d	; 61
    77ac:	de b7       	in	r29, 0x3e	; 62
    77ae:	29 97       	sbiw	r28, 0x09	; 9
    77b0:	cd bf       	out	0x3d, r28	; 61
    77b2:	de bf       	out	0x3e, r29	; 62
    77b4:	8d 83       	std	Y+5, r24	; 0x05
    77b6:	9e 83       	std	Y+6, r25	; 0x06
    77b8:	6f 83       	std	Y+7, r22	; 0x07
	if (f.rx_buf_head == f.rx_buf_tail) {		// RX ISR buffer empty
    77ba:	90 91 bb 21 	lds	r25, 0x21BB
    77be:	80 91 ba 21 	lds	r24, 0x21BA
    77c2:	98 17       	cp	r25, r24
    77c4:	29 f4       	brne	.+10     	; 0x77d0 <_xio_usb_readchar+0x2a>
		return(TG_BUFFER_EMPTY);
    77c6:	88 e0       	ldi	r24, 0x08	; 8
    77c8:	90 e0       	ldi	r25, 0x00	; 0
    77ca:	88 87       	std	Y+8, r24	; 0x08
    77cc:	99 87       	std	Y+9, r25	; 0x09
    77ce:	30 c0       	rjmp	.+96     	; 0x7830 <_xio_usb_readchar+0x8a>
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RX queue read pointer)
    77d0:	80 91 ba 21 	lds	r24, 0x21BA
    77d4:	81 50       	subi	r24, 0x01	; 1
    77d6:	80 93 ba 21 	sts	0x21BA, r24
    77da:	80 91 ba 21 	lds	r24, 0x21BA
    77de:	88 23       	and	r24, r24
    77e0:	19 f4       	brne	.+6      	; 0x77e8 <_xio_usb_readchar+0x42>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    77e2:	88 e1       	ldi	r24, 0x18	; 24
    77e4:	80 93 ba 21 	sts	0x21BA, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    77e8:	80 91 ba 21 	lds	r24, 0x21BA
    77ec:	88 2f       	mov	r24, r24
    77ee:	90 e0       	ldi	r25, 0x00	; 0
    77f0:	fc 01       	movw	r30, r24
    77f2:	e1 54       	subi	r30, 0x41	; 65
    77f4:	fe 4d       	sbci	r31, 0xDE	; 222
    77f6:	80 81       	ld	r24, Z
    77f8:	8f 77       	andi	r24, 0x7F	; 127
    77fa:	80 93 b5 21 	sts	0x21B5, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[f.c])))()); // dispatch on character
    77fe:	80 91 b5 21 	lds	r24, 0x21B5
    7802:	88 2f       	mov	r24, r24
    7804:	90 e0       	ldi	r25, 0x00	; 0
    7806:	88 0f       	add	r24, r24
    7808:	99 1f       	adc	r25, r25
    780a:	8a 59       	subi	r24, 0x9A	; 154
    780c:	97 4f       	sbci	r25, 0xF7	; 247
    780e:	8b 83       	std	Y+3, r24	; 0x03
    7810:	9c 83       	std	Y+4, r25	; 0x04
    7812:	8b 81       	ldd	r24, Y+3	; 0x03
    7814:	9c 81       	ldd	r25, Y+4	; 0x04
    7816:	fc 01       	movw	r30, r24
    7818:	85 91       	lpm	r24, Z+
    781a:	94 91       	lpm	r25, Z+
    781c:	89 83       	std	Y+1, r24	; 0x01
    781e:	9a 83       	std	Y+2, r25	; 0x02
    7820:	eb 83       	std	Y+3, r30	; 0x03
    7822:	fc 83       	std	Y+4, r31	; 0x04
    7824:	89 81       	ldd	r24, Y+1	; 0x01
    7826:	9a 81       	ldd	r25, Y+2	; 0x02
    7828:	fc 01       	movw	r30, r24
    782a:	19 95       	eicall
    782c:	88 87       	std	Y+8, r24	; 0x08
    782e:	99 87       	std	Y+9, r25	; 0x09
    7830:	88 85       	ldd	r24, Y+8	; 0x08
    7832:	99 85       	ldd	r25, Y+9	; 0x09
}
    7834:	29 96       	adiw	r28, 0x09	; 9
    7836:	cd bf       	out	0x3d, r28	; 61
    7838:	de bf       	out	0x3e, r29	; 62
    783a:	cf 91       	pop	r28
    783c:	df 91       	pop	r29
    783e:	08 95       	ret

00007840 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
    7840:	df 93       	push	r29
    7842:	cf 93       	push	r28
    7844:	0f 92       	push	r0
    7846:	0f 92       	push	r0
    7848:	cd b7       	in	r28, 0x3d	; 61
    784a:	de b7       	in	r29, 0x3e	; 62
	if (f.i > f.len) {							// trap buffer overflow
    784c:	90 91 b6 21 	lds	r25, 0x21B6
    7850:	80 91 b7 21 	lds	r24, 0x21B7
    7854:	89 17       	cp	r24, r25
    7856:	a0 f4       	brcc	.+40     	; 0x7880 <_readln_char+0x40>
		f.sig = XIO_SIG_EOL;
    7858:	81 e0       	ldi	r24, 0x01	; 1
    785a:	80 93 b4 21 	sts	0x21B4, r24
		f.buf[f.len] = NUL;						// f.len is zero based
    785e:	20 91 b8 21 	lds	r18, 0x21B8
    7862:	30 91 b9 21 	lds	r19, 0x21B9
    7866:	80 91 b7 21 	lds	r24, 0x21B7
    786a:	88 2f       	mov	r24, r24
    786c:	90 e0       	ldi	r25, 0x00	; 0
    786e:	f9 01       	movw	r30, r18
    7870:	e8 0f       	add	r30, r24
    7872:	f9 1f       	adc	r31, r25
    7874:	10 82       	st	Z, r1
		return (TG_BUFFER_FULL);
    7876:	87 e0       	ldi	r24, 0x07	; 7
    7878:	90 e0       	ldi	r25, 0x00	; 0
    787a:	89 83       	std	Y+1, r24	; 0x01
    787c:	9a 83       	std	Y+2, r25	; 0x02
    787e:	27 c0       	rjmp	.+78     	; 0x78ce <_readln_char+0x8e>
	}
	f.buf[f.i++] = f.c;
    7880:	20 91 b8 21 	lds	r18, 0x21B8
    7884:	30 91 b9 21 	lds	r19, 0x21B9
    7888:	40 91 b6 21 	lds	r20, 0x21B6
    788c:	84 2f       	mov	r24, r20
    788e:	90 e0       	ldi	r25, 0x00	; 0
    7890:	f9 01       	movw	r30, r18
    7892:	e8 0f       	add	r30, r24
    7894:	f9 1f       	adc	r31, r25
    7896:	80 91 b5 21 	lds	r24, 0x21B5
    789a:	80 83       	st	Z, r24
    789c:	84 2f       	mov	r24, r20
    789e:	8f 5f       	subi	r24, 0xFF	; 255
    78a0:	80 93 b6 21 	sts	0x21B6, r24
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);// conditional echo
    78a4:	80 91 b1 21 	lds	r24, 0x21B1
    78a8:	90 91 b2 21 	lds	r25, 0x21B2
    78ac:	80 71       	andi	r24, 0x10	; 16
    78ae:	90 70       	andi	r25, 0x00	; 0
    78b0:	00 97       	sbiw	r24, 0x00	; 0
    78b2:	49 f0       	breq	.+18     	; 0x78c6 <_readln_char+0x86>
    78b4:	80 91 b5 21 	lds	r24, 0x21B5
    78b8:	20 91 44 25 	lds	r18, 0x2544
    78bc:	30 91 45 25 	lds	r19, 0x2545
    78c0:	b9 01       	movw	r22, r18
    78c2:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <xio_usb_putc>
	return (TG_EAGAIN);							// line is still in process
    78c6:	81 e0       	ldi	r24, 0x01	; 1
    78c8:	90 e0       	ldi	r25, 0x00	; 0
    78ca:	89 83       	std	Y+1, r24	; 0x01
    78cc:	9a 83       	std	Y+2, r25	; 0x02
    78ce:	89 81       	ldd	r24, Y+1	; 0x01
    78d0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    78d2:	0f 90       	pop	r0
    78d4:	0f 90       	pop	r0
    78d6:	cf 91       	pop	r28
    78d8:	df 91       	pop	r29
    78da:	08 95       	ret

000078dc <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
    78dc:	df 93       	push	r29
    78de:	cf 93       	push	r28
    78e0:	cd b7       	in	r28, 0x3d	; 61
    78e2:	de b7       	in	r29, 0x3e	; 62
	f.sig = XIO_SIG_EOL;
    78e4:	81 e0       	ldi	r24, 0x01	; 1
    78e6:	80 93 b4 21 	sts	0x21B4, r24
	f.buf[f.i] = NUL;
    78ea:	20 91 b8 21 	lds	r18, 0x21B8
    78ee:	30 91 b9 21 	lds	r19, 0x21B9
    78f2:	80 91 b6 21 	lds	r24, 0x21B6
    78f6:	88 2f       	mov	r24, r24
    78f8:	90 e0       	ldi	r25, 0x00	; 0
    78fa:	f9 01       	movw	r30, r18
    78fc:	e8 0f       	add	r30, r24
    78fe:	f9 1f       	adc	r31, r25
    7900:	10 82       	st	Z, r1
	f.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    7902:	80 91 b1 21 	lds	r24, 0x21B1
    7906:	90 91 b2 21 	lds	r25, 0x21B2
    790a:	9f 7b       	andi	r25, 0xBF	; 191
    790c:	80 93 b1 21 	sts	0x21B1, r24
    7910:	90 93 b2 21 	sts	0x21B2, r25
	if (ECHO(f.flags)) xio_usb_putc('\n',stdout);// echo a newline
    7914:	80 91 b1 21 	lds	r24, 0x21B1
    7918:	90 91 b2 21 	lds	r25, 0x21B2
    791c:	80 71       	andi	r24, 0x10	; 16
    791e:	90 70       	andi	r25, 0x00	; 0
    7920:	00 97       	sbiw	r24, 0x00	; 0
    7922:	41 f0       	breq	.+16     	; 0x7934 <_readln_NEWLINE+0x58>
    7924:	20 91 44 25 	lds	r18, 0x2544
    7928:	30 91 45 25 	lds	r19, 0x2545
    792c:	8a e0       	ldi	r24, 0x0A	; 10
    792e:	b9 01       	movw	r22, r18
    7930:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <xio_usb_putc>
	return (TG_EOL);							// return for end-of-line
    7934:	84 e0       	ldi	r24, 0x04	; 4
    7936:	90 e0       	ldi	r25, 0x00	; 0
}
    7938:	cf 91       	pop	r28
    793a:	df 91       	pop	r29
    793c:	08 95       	ret

0000793e <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
    793e:	df 93       	push	r29
    7940:	cf 93       	push	r28
    7942:	0f 92       	push	r0
    7944:	0f 92       	push	r0
    7946:	cd b7       	in	r28, 0x3d	; 61
    7948:	de b7       	in	r29, 0x3e	; 62
	if (SEMICOLONS(f.flags)) {
    794a:	80 91 b1 21 	lds	r24, 0x21B1
    794e:	90 91 b2 21 	lds	r25, 0x21B2
    7952:	80 78       	andi	r24, 0x80	; 128
    7954:	90 70       	andi	r25, 0x00	; 0
    7956:	00 97       	sbiw	r24, 0x00	; 0
    7958:	29 f0       	breq	.+10     	; 0x7964 <_readln_SEMICOLON+0x26>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    795a:	0e 94 6e 3c 	call	0x78dc	; 0x78dc <_readln_NEWLINE>
    795e:	89 83       	std	Y+1, r24	; 0x01
    7960:	9a 83       	std	Y+2, r25	; 0x02
    7962:	04 c0       	rjmp	.+8      	; 0x796c <_readln_SEMICOLON+0x2e>
	} else {
		return (_readln_char());				// else treat as any other character
    7964:	0e 94 20 3c 	call	0x7840	; 0x7840 <_readln_char>
    7968:	89 83       	std	Y+1, r24	; 0x01
    796a:	9a 83       	std	Y+2, r25	; 0x02
    796c:	89 81       	ldd	r24, Y+1	; 0x01
    796e:	9a 81       	ldd	r25, Y+2	; 0x02
	}
}
    7970:	0f 90       	pop	r0
    7972:	0f 90       	pop	r0
    7974:	cf 91       	pop	r28
    7976:	df 91       	pop	r29
    7978:	08 95       	ret

0000797a <_readln_DELETE>:

static int _readln_DELETE(void)
{
    797a:	df 93       	push	r29
    797c:	cf 93       	push	r28
    797e:	cd b7       	in	r28, 0x3d	; 61
    7980:	de b7       	in	r29, 0x3e	; 62
	if (--f.i >= 0) {
    7982:	80 91 b6 21 	lds	r24, 0x21B6
    7986:	81 50       	subi	r24, 0x01	; 1
    7988:	80 93 b6 21 	sts	0x21B6, r24
		if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    798c:	80 91 b1 21 	lds	r24, 0x21B1
    7990:	90 91 b2 21 	lds	r25, 0x21B2
    7994:	80 71       	andi	r24, 0x10	; 16
    7996:	90 70       	andi	r25, 0x00	; 0
    7998:	00 97       	sbiw	r24, 0x00	; 0
    799a:	49 f0       	breq	.+18     	; 0x79ae <_readln_DELETE+0x34>
    799c:	80 91 b5 21 	lds	r24, 0x21B5
    79a0:	20 91 44 25 	lds	r18, 0x2544
    79a4:	30 91 45 25 	lds	r19, 0x2545
    79a8:	b9 01       	movw	r22, r18
    79aa:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <xio_usb_putc>
	} else {
		f.i = 0;
	}
	return (TG_EAGAIN);							// line is still in process
    79ae:	81 e0       	ldi	r24, 0x01	; 1
    79b0:	90 e0       	ldi	r25, 0x00	; 0
}
    79b2:	cf 91       	pop	r28
    79b4:	df 91       	pop	r29
    79b6:	08 95       	ret

000079b8 <_sig_KILL>:
/*
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
    79b8:	df 93       	push	r29
    79ba:	cf 93       	push	r28
    79bc:	cd b7       	in	r28, 0x3d	; 61
    79be:	de b7       	in	r29, 0x3e	; 62
	f.sig = XIO_SIG_KILL;
    79c0:	84 e0       	ldi	r24, 0x04	; 4
    79c2:	80 93 b4 21 	sts	0x21B4, r24
	return(_FDEV_ERR);
    79c6:	8f ef       	ldi	r24, 0xFF	; 255
    79c8:	9f ef       	ldi	r25, 0xFF	; 255
}
    79ca:	cf 91       	pop	r28
    79cc:	df 91       	pop	r29
    79ce:	08 95       	ret

000079d0 <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
    79d0:	df 93       	push	r29
    79d2:	cf 93       	push	r28
    79d4:	cd b7       	in	r28, 0x3d	; 61
    79d6:	de b7       	in	r29, 0x3e	; 62
	f.sig = XIO_SIG_PAUSE;
    79d8:	86 e0       	ldi	r24, 0x06	; 6
    79da:	80 93 b4 21 	sts	0x21B4, r24
	return(_FDEV_ERR);
    79de:	8f ef       	ldi	r24, 0xFF	; 255
    79e0:	9f ef       	ldi	r25, 0xFF	; 255
}
    79e2:	cf 91       	pop	r28
    79e4:	df 91       	pop	r29
    79e6:	08 95       	ret

000079e8 <_sig_RESUME>:

static int _sig_RESUME(void)
{
    79e8:	df 93       	push	r29
    79ea:	cf 93       	push	r28
    79ec:	cd b7       	in	r28, 0x3d	; 61
    79ee:	de b7       	in	r29, 0x3e	; 62
	f.sig = XIO_SIG_RESUME;
    79f0:	87 e0       	ldi	r24, 0x07	; 7
    79f2:	80 93 b4 21 	sts	0x21B4, r24
	return(_FDEV_ERR);
    79f6:	8f ef       	ldi	r24, 0xFF	; 255
    79f8:	9f ef       	ldi	r25, 0xFF	; 255
}
    79fa:	cf 91       	pop	r28
    79fc:	df 91       	pop	r29
    79fe:	08 95       	ret

00007a00 <_sig_SHIFTOUT>:

static int _sig_SHIFTOUT(void)
{
    7a00:	df 93       	push	r29
    7a02:	cf 93       	push	r28
    7a04:	cd b7       	in	r28, 0x3d	; 61
    7a06:	de b7       	in	r29, 0x3e	; 62
	f.sig = XIO_SIG_SHIFTOUT;
    7a08:	88 e0       	ldi	r24, 0x08	; 8
    7a0a:	80 93 b4 21 	sts	0x21B4, r24
	return(_FDEV_ERR);
    7a0e:	8f ef       	ldi	r24, 0xFF	; 255
    7a10:	9f ef       	ldi	r25, 0xFF	; 255
}
    7a12:	cf 91       	pop	r28
    7a14:	df 91       	pop	r29
    7a16:	08 95       	ret

00007a18 <_sig_SHIFTIN>:

static int _sig_SHIFTIN(void)
{
    7a18:	df 93       	push	r29
    7a1a:	cf 93       	push	r28
    7a1c:	cd b7       	in	r28, 0x3d	; 61
    7a1e:	de b7       	in	r29, 0x3e	; 62
	f.sig = XIO_SIG_SHIFTIN;
    7a20:	89 e0       	ldi	r24, 0x09	; 9
    7a22:	80 93 b4 21 	sts	0x21B4, r24
	return(_FDEV_ERR);
    7a26:	8f ef       	ldi	r24, 0xFF	; 255
    7a28:	9f ef       	ldi	r25, 0xFF	; 255
}
    7a2a:	cf 91       	pop	r28
    7a2c:	df 91       	pop	r29
    7a2e:	08 95       	ret

00007a30 <eeprom_get_char>:
#include "xmega_eeprom.h"

/****** Functions from Grbl eeprom.c ******/

char eeprom_get_char( unsigned int addr )
{
    7a30:	df 93       	push	r29
    7a32:	cf 93       	push	r28
    7a34:	00 d0       	rcall	.+0      	; 0x7a36 <eeprom_get_char+0x6>
    7a36:	0f 92       	push	r0
    7a38:	cd b7       	in	r28, 0x3d	; 61
    7a3a:	de b7       	in	r29, 0x3e	; 62
    7a3c:	8b 83       	std	Y+3, r24	; 0x03
    7a3e:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
    7a40:	8b 81       	ldd	r24, Y+3	; 0x03
    7a42:	9c 81       	ldd	r25, Y+4	; 0x04
    7a44:	96 95       	lsr	r25
    7a46:	87 95       	ror	r24
    7a48:	92 95       	swap	r25
    7a4a:	82 95       	swap	r24
    7a4c:	8f 70       	andi	r24, 0x0F	; 15
    7a4e:	89 27       	eor	r24, r25
    7a50:	9f 70       	andi	r25, 0x0F	; 15
    7a52:	89 27       	eor	r24, r25
    7a54:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
    7a56:	8b 81       	ldd	r24, Y+3	; 0x03
    7a58:	8f 71       	andi	r24, 0x1F	; 31
    7a5a:	89 83       	std	Y+1, r24	; 0x01
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    7a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    7a5e:	69 81       	ldd	r22, Y+1	; 0x01
    7a60:	0e 94 53 3e 	call	0x7ca6	; 0x7ca6 <EEPROM_ReadByte>
}
    7a64:	24 96       	adiw	r28, 0x04	; 4
    7a66:	cd bf       	out	0x3d, r28	; 61
    7a68:	de bf       	out	0x3e, r29	; 62
    7a6a:	cf 91       	pop	r28
    7a6c:	df 91       	pop	r29
    7a6e:	08 95       	ret

00007a70 <eeprom_put_char>:

void eeprom_put_char( unsigned int addr, char value )
{
    7a70:	df 93       	push	r29
    7a72:	cf 93       	push	r28
    7a74:	cd b7       	in	r28, 0x3d	; 61
    7a76:	de b7       	in	r29, 0x3e	; 62
    7a78:	25 97       	sbiw	r28, 0x05	; 5
    7a7a:	cd bf       	out	0x3d, r28	; 61
    7a7c:	de bf       	out	0x3e, r29	; 62
    7a7e:	8b 83       	std	Y+3, r24	; 0x03
    7a80:	9c 83       	std	Y+4, r25	; 0x04
    7a82:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
    7a84:	8b 81       	ldd	r24, Y+3	; 0x03
    7a86:	9c 81       	ldd	r25, Y+4	; 0x04
    7a88:	96 95       	lsr	r25
    7a8a:	87 95       	ror	r24
    7a8c:	92 95       	swap	r25
    7a8e:	82 95       	swap	r24
    7a90:	8f 70       	andi	r24, 0x0F	; 15
    7a92:	89 27       	eor	r24, r25
    7a94:	9f 70       	andi	r25, 0x0F	; 15
    7a96:	89 27       	eor	r24, r25
    7a98:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
    7a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    7a9c:	8f 71       	andi	r24, 0x1F	; 31
    7a9e:	89 83       	std	Y+1, r24	; 0x01

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    7aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    7aa2:	69 81       	ldd	r22, Y+1	; 0x01
    7aa4:	4d 81       	ldd	r20, Y+5	; 0x05
    7aa6:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <EEPROM_WriteByte>
}
    7aaa:	25 96       	adiw	r28, 0x05	; 5
    7aac:	cd bf       	out	0x3d, r28	; 61
    7aae:	de bf       	out	0x3e, r29	; 62
    7ab0:	cf 91       	pop	r28
    7ab2:	df 91       	pop	r29
    7ab4:	08 95       	ret

00007ab6 <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    7ab6:	df 93       	push	r29
    7ab8:	cf 93       	push	r28
    7aba:	cd b7       	in	r28, 0x3d	; 61
    7abc:	de b7       	in	r29, 0x3e	; 62
    7abe:	29 97       	sbiw	r28, 0x09	; 9
    7ac0:	cd bf       	out	0x3d, r28	; 61
    7ac2:	de bf       	out	0x3e, r29	; 62
    7ac4:	8a 83       	std	Y+2, r24	; 0x02
    7ac6:	9b 83       	std	Y+3, r25	; 0x03
    7ac8:	6c 83       	std	Y+4, r22	; 0x04
    7aca:	7d 83       	std	Y+5, r23	; 0x05
    7acc:	4e 83       	std	Y+6, r20	; 0x06
    7ace:	5f 83       	std	Y+7, r21	; 0x07
  unsigned char checksum = 0;
    7ad0:	19 82       	std	Y+1, r1	; 0x01
    7ad2:	31 c0       	rjmp	.+98     	; 0x7b36 <memcpy_to_eeprom_with_checksum+0x80>
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    7ad4:	89 81       	ldd	r24, Y+1	; 0x01
    7ad6:	88 2f       	mov	r24, r24
    7ad8:	90 e0       	ldi	r25, 0x00	; 0
    7ada:	88 0f       	add	r24, r24
    7adc:	99 1f       	adc	r25, r25
    7ade:	00 97       	sbiw	r24, 0x00	; 0
    7ae0:	19 f4       	brne	.+6      	; 0x7ae8 <memcpy_to_eeprom_with_checksum+0x32>
    7ae2:	89 81       	ldd	r24, Y+1	; 0x01
    7ae4:	88 23       	and	r24, r24
    7ae6:	2c f4       	brge	.+10     	; 0x7af2 <memcpy_to_eeprom_with_checksum+0x3c>
    7ae8:	81 e0       	ldi	r24, 0x01	; 1
    7aea:	90 e0       	ldi	r25, 0x00	; 0
    7aec:	88 87       	std	Y+8, r24	; 0x08
    7aee:	99 87       	std	Y+9, r25	; 0x09
    7af0:	02 c0       	rjmp	.+4      	; 0x7af6 <memcpy_to_eeprom_with_checksum+0x40>
    7af2:	18 86       	std	Y+8, r1	; 0x08
    7af4:	19 86       	std	Y+9, r1	; 0x09
    7af6:	98 85       	ldd	r25, Y+8	; 0x08
    7af8:	99 83       	std	Y+1, r25	; 0x01
    checksum += *source;
    7afa:	ec 81       	ldd	r30, Y+4	; 0x04
    7afc:	fd 81       	ldd	r31, Y+5	; 0x05
    7afe:	90 81       	ld	r25, Z
    7b00:	89 81       	ldd	r24, Y+1	; 0x01
    7b02:	89 0f       	add	r24, r25
    7b04:	89 83       	std	Y+1, r24	; 0x01
    eeprom_put_char(destination++, *(source++)); 
    7b06:	2a 81       	ldd	r18, Y+2	; 0x02
    7b08:	3b 81       	ldd	r19, Y+3	; 0x03
    7b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    7b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    7b0e:	01 96       	adiw	r24, 0x01	; 1
    7b10:	8a 83       	std	Y+2, r24	; 0x02
    7b12:	9b 83       	std	Y+3, r25	; 0x03
    7b14:	ec 81       	ldd	r30, Y+4	; 0x04
    7b16:	fd 81       	ldd	r31, Y+5	; 0x05
    7b18:	40 81       	ld	r20, Z
    7b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    7b1c:	9d 81       	ldd	r25, Y+5	; 0x05
    7b1e:	01 96       	adiw	r24, 0x01	; 1
    7b20:	8c 83       	std	Y+4, r24	; 0x04
    7b22:	9d 83       	std	Y+5, r25	; 0x05
    7b24:	c9 01       	movw	r24, r18
    7b26:	64 2f       	mov	r22, r20
    7b28:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    7b2c:	8e 81       	ldd	r24, Y+6	; 0x06
    7b2e:	9f 81       	ldd	r25, Y+7	; 0x07
    7b30:	01 97       	sbiw	r24, 0x01	; 1
    7b32:	8e 83       	std	Y+6, r24	; 0x06
    7b34:	9f 83       	std	Y+7, r25	; 0x07
    7b36:	8e 81       	ldd	r24, Y+6	; 0x06
    7b38:	9f 81       	ldd	r25, Y+7	; 0x07
    7b3a:	00 97       	sbiw	r24, 0x00	; 0
    7b3c:	59 f6       	brne	.-106    	; 0x7ad4 <memcpy_to_eeprom_with_checksum+0x1e>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    7b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    7b40:	9b 81       	ldd	r25, Y+3	; 0x03
    7b42:	69 81       	ldd	r22, Y+1	; 0x01
    7b44:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <eeprom_put_char>
}
    7b48:	29 96       	adiw	r28, 0x09	; 9
    7b4a:	cd bf       	out	0x3d, r28	; 61
    7b4c:	de bf       	out	0x3e, r29	; 62
    7b4e:	cf 91       	pop	r28
    7b50:	df 91       	pop	r29
    7b52:	08 95       	ret

00007b54 <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    7b54:	df 93       	push	r29
    7b56:	cf 93       	push	r28
    7b58:	cd b7       	in	r28, 0x3d	; 61
    7b5a:	de b7       	in	r29, 0x3e	; 62
    7b5c:	2c 97       	sbiw	r28, 0x0c	; 12
    7b5e:	cd bf       	out	0x3d, r28	; 61
    7b60:	de bf       	out	0x3e, r29	; 62
    7b62:	8b 83       	std	Y+3, r24	; 0x03
    7b64:	9c 83       	std	Y+4, r25	; 0x04
    7b66:	6d 83       	std	Y+5, r22	; 0x05
    7b68:	7e 83       	std	Y+6, r23	; 0x06
    7b6a:	4f 83       	std	Y+7, r20	; 0x07
    7b6c:	58 87       	std	Y+8, r21	; 0x08
  unsigned char data, checksum = 0;
    7b6e:	19 82       	std	Y+1, r1	; 0x01
    7b70:	30 c0       	rjmp	.+96     	; 0x7bd2 <memcpy_from_eeprom_with_checksum+0x7e>
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    7b72:	2d 81       	ldd	r18, Y+5	; 0x05
    7b74:	3e 81       	ldd	r19, Y+6	; 0x06
    7b76:	8d 81       	ldd	r24, Y+5	; 0x05
    7b78:	9e 81       	ldd	r25, Y+6	; 0x06
    7b7a:	01 96       	adiw	r24, 0x01	; 1
    7b7c:	8d 83       	std	Y+5, r24	; 0x05
    7b7e:	9e 83       	std	Y+6, r25	; 0x06
    7b80:	c9 01       	movw	r24, r18
    7b82:	0e 94 18 3d 	call	0x7a30	; 0x7a30 <eeprom_get_char>
    7b86:	8a 83       	std	Y+2, r24	; 0x02
    checksum = (checksum << 1) || (checksum >> 7);
    7b88:	89 81       	ldd	r24, Y+1	; 0x01
    7b8a:	88 2f       	mov	r24, r24
    7b8c:	90 e0       	ldi	r25, 0x00	; 0
    7b8e:	88 0f       	add	r24, r24
    7b90:	99 1f       	adc	r25, r25
    7b92:	00 97       	sbiw	r24, 0x00	; 0
    7b94:	19 f4       	brne	.+6      	; 0x7b9c <memcpy_from_eeprom_with_checksum+0x48>
    7b96:	89 81       	ldd	r24, Y+1	; 0x01
    7b98:	88 23       	and	r24, r24
    7b9a:	2c f4       	brge	.+10     	; 0x7ba6 <memcpy_from_eeprom_with_checksum+0x52>
    7b9c:	81 e0       	ldi	r24, 0x01	; 1
    7b9e:	90 e0       	ldi	r25, 0x00	; 0
    7ba0:	8b 87       	std	Y+11, r24	; 0x0b
    7ba2:	9c 87       	std	Y+12, r25	; 0x0c
    7ba4:	02 c0       	rjmp	.+4      	; 0x7baa <memcpy_from_eeprom_with_checksum+0x56>
    7ba6:	1b 86       	std	Y+11, r1	; 0x0b
    7ba8:	1c 86       	std	Y+12, r1	; 0x0c
    7baa:	9b 85       	ldd	r25, Y+11	; 0x0b
    7bac:	99 83       	std	Y+1, r25	; 0x01
    checksum += data;    
    7bae:	99 81       	ldd	r25, Y+1	; 0x01
    7bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    7bb2:	89 0f       	add	r24, r25
    7bb4:	89 83       	std	Y+1, r24	; 0x01
    *(destination++) = data; 
    7bb6:	eb 81       	ldd	r30, Y+3	; 0x03
    7bb8:	fc 81       	ldd	r31, Y+4	; 0x04
    7bba:	8a 81       	ldd	r24, Y+2	; 0x02
    7bbc:	80 83       	st	Z, r24
    7bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    7bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    7bc2:	01 96       	adiw	r24, 0x01	; 1
    7bc4:	8b 83       	std	Y+3, r24	; 0x03
    7bc6:	9c 83       	std	Y+4, r25	; 0x04
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    7bc8:	8f 81       	ldd	r24, Y+7	; 0x07
    7bca:	98 85       	ldd	r25, Y+8	; 0x08
    7bcc:	01 97       	sbiw	r24, 0x01	; 1
    7bce:	8f 83       	std	Y+7, r24	; 0x07
    7bd0:	98 87       	std	Y+8, r25	; 0x08
    7bd2:	8f 81       	ldd	r24, Y+7	; 0x07
    7bd4:	98 85       	ldd	r25, Y+8	; 0x08
    7bd6:	00 97       	sbiw	r24, 0x00	; 0
    7bd8:	61 f6       	brne	.-104    	; 0x7b72 <memcpy_from_eeprom_with_checksum+0x1e>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    7bda:	8d 81       	ldd	r24, Y+5	; 0x05
    7bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    7bde:	0e 94 18 3d 	call	0x7a30	; 0x7a30 <eeprom_get_char>
    7be2:	98 2f       	mov	r25, r24
    7be4:	19 86       	std	Y+9, r1	; 0x09
    7be6:	1a 86       	std	Y+10, r1	; 0x0a
    7be8:	89 81       	ldd	r24, Y+1	; 0x01
    7bea:	98 17       	cp	r25, r24
    7bec:	21 f4       	brne	.+8      	; 0x7bf6 <memcpy_from_eeprom_with_checksum+0xa2>
    7bee:	81 e0       	ldi	r24, 0x01	; 1
    7bf0:	90 e0       	ldi	r25, 0x00	; 0
    7bf2:	89 87       	std	Y+9, r24	; 0x09
    7bf4:	9a 87       	std	Y+10, r25	; 0x0a
    7bf6:	89 85       	ldd	r24, Y+9	; 0x09
    7bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    7bfa:	2c 96       	adiw	r28, 0x0c	; 12
    7bfc:	cd bf       	out	0x3d, r28	; 61
    7bfe:	de bf       	out	0x3e, r29	; 62
    7c00:	cf 91       	pop	r28
    7c02:	df 91       	pop	r29
    7c04:	08 95       	ret

00007c06 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    7c06:	df 93       	push	r29
    7c08:	cf 93       	push	r28
    7c0a:	cd b7       	in	r28, 0x3d	; 61
    7c0c:	de b7       	in	r29, 0x3e	; 62
    7c0e:	25 97       	sbiw	r28, 0x05	; 5
    7c10:	cd bf       	out	0x3d, r28	; 61
    7c12:	de bf       	out	0x3e, r29	; 62
    7c14:	8b 83       	std	Y+3, r24	; 0x03
    7c16:	6c 83       	std	Y+4, r22	; 0x04
    7c18:	4d 83       	std	Y+5, r20	; 0x05
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    7c1a:	0e 94 a8 3e 	call	0x7d50	; 0x7d50 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    7c1e:	e0 ec       	ldi	r30, 0xC0	; 192
    7c20:	f1 e0       	ldi	r31, 0x01	; 1
    7c22:	83 e3       	ldi	r24, 0x33	; 51
    7c24:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    7c26:	8b 81       	ldd	r24, Y+3	; 0x03
    7c28:	88 2f       	mov	r24, r24
    7c2a:	90 e0       	ldi	r25, 0x00	; 0
    7c2c:	88 0f       	add	r24, r24
    7c2e:	99 1f       	adc	r25, r25
    7c30:	82 95       	swap	r24
    7c32:	92 95       	swap	r25
    7c34:	90 7f       	andi	r25, 0xF0	; 240
    7c36:	98 27       	eor	r25, r24
    7c38:	80 7f       	andi	r24, 0xF0	; 240
    7c3a:	98 27       	eor	r25, r24
    7c3c:	9c 01       	movw	r18, r24
    7c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    7c40:	88 2f       	mov	r24, r24
    7c42:	90 e0       	ldi	r25, 0x00	; 0
    7c44:	8f 71       	andi	r24, 0x1F	; 31
    7c46:	90 70       	andi	r25, 0x00	; 0
    7c48:	82 2b       	or	r24, r18
    7c4a:	93 2b       	or	r25, r19
    7c4c:	89 83       	std	Y+1, r24	; 0x01
    7c4e:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    7c50:	e0 ec       	ldi	r30, 0xC0	; 192
    7c52:	f1 e0       	ldi	r31, 0x01	; 1
    7c54:	89 81       	ldd	r24, Y+1	; 0x01
    7c56:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    7c58:	e0 ec       	ldi	r30, 0xC0	; 192
    7c5a:	f1 e0       	ldi	r31, 0x01	; 1
    7c5c:	89 81       	ldd	r24, Y+1	; 0x01
    7c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    7c60:	89 2f       	mov	r24, r25
    7c62:	99 27       	eor	r25, r25
    7c64:	8f 71       	andi	r24, 0x1F	; 31
    7c66:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    7c68:	e0 ec       	ldi	r30, 0xC0	; 192
    7c6a:	f1 e0       	ldi	r31, 0x01	; 1
    7c6c:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    7c6e:	e0 ec       	ldi	r30, 0xC0	; 192
    7c70:	f1 e0       	ldi	r31, 0x01	; 1
    7c72:	8d 81       	ldd	r24, Y+5	; 0x05
    7c74:	84 83       	std	Z+4, r24	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    7c76:	e0 ec       	ldi	r30, 0xC0	; 192
    7c78:	f1 e0       	ldi	r31, 0x01	; 1
    7c7a:	85 e3       	ldi	r24, 0x35	; 53
    7c7c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    7c7e:	ef 93       	push	r30
    7c80:	ff 93       	push	r31
    7c82:	0f 93       	push	r16
    7c84:	2f 93       	push	r18
    7c86:	eb ec       	ldi	r30, 0xCB	; 203
    7c88:	f1 e0       	ldi	r31, 0x01	; 1
    7c8a:	08 ed       	ldi	r16, 0xD8	; 216
    7c8c:	21 e0       	ldi	r18, 0x01	; 1
    7c8e:	04 bf       	out	0x34, r16	; 52
    7c90:	20 83       	st	Z, r18
    7c92:	2f 91       	pop	r18
    7c94:	0f 91       	pop	r16
    7c96:	ff 91       	pop	r31
    7c98:	ef 91       	pop	r30
}
    7c9a:	25 96       	adiw	r28, 0x05	; 5
    7c9c:	cd bf       	out	0x3d, r28	; 61
    7c9e:	de bf       	out	0x3e, r29	; 62
    7ca0:	cf 91       	pop	r28
    7ca2:	df 91       	pop	r29
    7ca4:	08 95       	ret

00007ca6 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    7ca6:	df 93       	push	r29
    7ca8:	cf 93       	push	r28
    7caa:	00 d0       	rcall	.+0      	; 0x7cac <EEPROM_ReadByte+0x6>
    7cac:	0f 92       	push	r0
    7cae:	cd b7       	in	r28, 0x3d	; 61
    7cb0:	de b7       	in	r29, 0x3e	; 62
    7cb2:	8b 83       	std	Y+3, r24	; 0x03
    7cb4:	6c 83       	std	Y+4, r22	; 0x04
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7cb6:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <EEPROM_WaitForNVM>

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    7cba:	8b 81       	ldd	r24, Y+3	; 0x03
    7cbc:	88 2f       	mov	r24, r24
    7cbe:	90 e0       	ldi	r25, 0x00	; 0
    7cc0:	88 0f       	add	r24, r24
    7cc2:	99 1f       	adc	r25, r25
    7cc4:	82 95       	swap	r24
    7cc6:	92 95       	swap	r25
    7cc8:	90 7f       	andi	r25, 0xF0	; 240
    7cca:	98 27       	eor	r25, r24
    7ccc:	80 7f       	andi	r24, 0xF0	; 240
    7cce:	98 27       	eor	r25, r24
    7cd0:	9c 01       	movw	r18, r24
    7cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    7cd4:	88 2f       	mov	r24, r24
    7cd6:	90 e0       	ldi	r25, 0x00	; 0
    7cd8:	8f 71       	andi	r24, 0x1F	; 31
    7cda:	90 70       	andi	r25, 0x00	; 0
    7cdc:	82 2b       	or	r24, r18
    7cde:	93 2b       	or	r25, r19
    7ce0:	89 83       	std	Y+1, r24	; 0x01
    7ce2:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    7ce4:	e0 ec       	ldi	r30, 0xC0	; 192
    7ce6:	f1 e0       	ldi	r31, 0x01	; 1
    7ce8:	89 81       	ldd	r24, Y+1	; 0x01
    7cea:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    7cec:	e0 ec       	ldi	r30, 0xC0	; 192
    7cee:	f1 e0       	ldi	r31, 0x01	; 1
    7cf0:	89 81       	ldd	r24, Y+1	; 0x01
    7cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    7cf4:	89 2f       	mov	r24, r25
    7cf6:	99 27       	eor	r25, r25
    7cf8:	8f 71       	andi	r24, 0x1F	; 31
    7cfa:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    7cfc:	e0 ec       	ldi	r30, 0xC0	; 192
    7cfe:	f1 e0       	ldi	r31, 0x01	; 1
    7d00:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    7d02:	e0 ec       	ldi	r30, 0xC0	; 192
    7d04:	f1 e0       	ldi	r31, 0x01	; 1
    7d06:	86 e0       	ldi	r24, 0x06	; 6
    7d08:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    7d0a:	ef 93       	push	r30
    7d0c:	ff 93       	push	r31
    7d0e:	0f 93       	push	r16
    7d10:	2f 93       	push	r18
    7d12:	eb ec       	ldi	r30, 0xCB	; 203
    7d14:	f1 e0       	ldi	r31, 0x01	; 1
    7d16:	08 ed       	ldi	r16, 0xD8	; 216
    7d18:	21 e0       	ldi	r18, 0x01	; 1
    7d1a:	04 bf       	out	0x34, r16	; 52
    7d1c:	20 83       	st	Z, r18
    7d1e:	2f 91       	pop	r18
    7d20:	0f 91       	pop	r16
    7d22:	ff 91       	pop	r31
    7d24:	ef 91       	pop	r30

	return NVM.DATA0;
    7d26:	e0 ec       	ldi	r30, 0xC0	; 192
    7d28:	f1 e0       	ldi	r31, 0x01	; 1
    7d2a:	84 81       	ldd	r24, Z+4	; 0x04
}
    7d2c:	24 96       	adiw	r28, 0x04	; 4
    7d2e:	cd bf       	out	0x3d, r28	; 61
    7d30:	de bf       	out	0x3e, r29	; 62
    7d32:	cf 91       	pop	r28
    7d34:	df 91       	pop	r29
    7d36:	08 95       	ret

00007d38 <EEPROM_WaitForNVM>:
 *  including EEPROM. Use this function before any EEPROM accesses,
 *  if you are not certain that any previous operations are finished yet,
 *  like an EEPROM write.
 */
void EEPROM_WaitForNVM( void )
{
    7d38:	df 93       	push	r29
    7d3a:	cf 93       	push	r28
    7d3c:	cd b7       	in	r28, 0x3d	; 61
    7d3e:	de b7       	in	r29, 0x3e	; 62
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    7d40:	e0 ec       	ldi	r30, 0xC0	; 192
    7d42:	f1 e0       	ldi	r31, 0x01	; 1
    7d44:	87 85       	ldd	r24, Z+15	; 0x0f
    7d46:	88 23       	and	r24, r24
    7d48:	dc f3       	brlt	.-10     	; 0x7d40 <EEPROM_WaitForNVM+0x8>
}
    7d4a:	cf 91       	pop	r28
    7d4c:	df 91       	pop	r29
    7d4e:	08 95       	ret

00007d50 <EEPROM_FlushBuffer>:
 *  This function also works for memory mapped EEPROM access.
 *
 *  \note The EEPROM write operations will automatically flush the buffer for you.
 */
void EEPROM_FlushBuffer( void )
{
    7d50:	df 93       	push	r29
    7d52:	cf 93       	push	r28
    7d54:	cd b7       	in	r28, 0x3d	; 61
    7d56:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7d58:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <EEPROM_WaitForNVM>

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    7d5c:	e0 ec       	ldi	r30, 0xC0	; 192
    7d5e:	f1 e0       	ldi	r31, 0x01	; 1
    7d60:	87 85       	ldd	r24, Z+15	; 0x0f
    7d62:	88 2f       	mov	r24, r24
    7d64:	90 e0       	ldi	r25, 0x00	; 0
    7d66:	82 70       	andi	r24, 0x02	; 2
    7d68:	90 70       	andi	r25, 0x00	; 0
    7d6a:	00 97       	sbiw	r24, 0x00	; 0
    7d6c:	91 f0       	breq	.+36     	; 0x7d92 <EEPROM_FlushBuffer+0x42>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    7d6e:	e0 ec       	ldi	r30, 0xC0	; 192
    7d70:	f1 e0       	ldi	r31, 0x01	; 1
    7d72:	86 e3       	ldi	r24, 0x36	; 54
    7d74:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    7d76:	ef 93       	push	r30
    7d78:	ff 93       	push	r31
    7d7a:	0f 93       	push	r16
    7d7c:	2f 93       	push	r18
    7d7e:	eb ec       	ldi	r30, 0xCB	; 203
    7d80:	f1 e0       	ldi	r31, 0x01	; 1
    7d82:	08 ed       	ldi	r16, 0xD8	; 216
    7d84:	21 e0       	ldi	r18, 0x01	; 1
    7d86:	04 bf       	out	0x34, r16	; 52
    7d88:	20 83       	st	Z, r18
    7d8a:	2f 91       	pop	r18
    7d8c:	0f 91       	pop	r16
    7d8e:	ff 91       	pop	r31
    7d90:	ef 91       	pop	r30
	}
}
    7d92:	cf 91       	pop	r28
    7d94:	df 91       	pop	r29
    7d96:	08 95       	ret

00007d98 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    7d98:	df 93       	push	r29
    7d9a:	cf 93       	push	r28
    7d9c:	0f 92       	push	r0
    7d9e:	0f 92       	push	r0
    7da0:	cd b7       	in	r28, 0x3d	; 61
    7da2:	de b7       	in	r29, 0x3e	; 62
    7da4:	89 83       	std	Y+1, r24	; 0x01
    7da6:	6a 83       	std	Y+2, r22	; 0x02
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
    7da8:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    7dac:	e0 ec       	ldi	r30, 0xC0	; 192
    7dae:	f1 e0       	ldi	r31, 0x01	; 1
    7db0:	83 e3       	ldi	r24, 0x33	; 51
    7db2:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    7db4:	e0 ec       	ldi	r30, 0xC0	; 192
    7db6:	f1 e0       	ldi	r31, 0x01	; 1
    7db8:	89 81       	ldd	r24, Y+1	; 0x01
    7dba:	80 83       	st	Z, r24
	NVM.ADDR1 = 0x00;
    7dbc:	e0 ec       	ldi	r30, 0xC0	; 192
    7dbe:	f1 e0       	ldi	r31, 0x01	; 1
    7dc0:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    7dc2:	e0 ec       	ldi	r30, 0xC0	; 192
    7dc4:	f1 e0       	ldi	r31, 0x01	; 1
    7dc6:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    7dc8:	e0 ec       	ldi	r30, 0xC0	; 192
    7dca:	f1 e0       	ldi	r31, 0x01	; 1
    7dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    7dce:	84 83       	std	Z+4, r24	; 0x04
}
    7dd0:	0f 90       	pop	r0
    7dd2:	0f 90       	pop	r0
    7dd4:	cf 91       	pop	r28
    7dd6:	df 91       	pop	r29
    7dd8:	08 95       	ret

00007dda <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    7dda:	df 93       	push	r29
    7ddc:	cf 93       	push	r28
    7dde:	00 d0       	rcall	.+0      	; 0x7de0 <EEPROM_LoadPage+0x6>
    7de0:	cd b7       	in	r28, 0x3d	; 61
    7de2:	de b7       	in	r29, 0x3e	; 62
    7de4:	8a 83       	std	Y+2, r24	; 0x02
    7de6:	9b 83       	std	Y+3, r25	; 0x03
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7de8:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    7dec:	e0 ec       	ldi	r30, 0xC0	; 192
    7dee:	f1 e0       	ldi	r31, 0x01	; 1
    7df0:	83 e3       	ldi	r24, 0x33	; 51
    7df2:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    7df4:	e0 ec       	ldi	r30, 0xC0	; 192
    7df6:	f1 e0       	ldi	r31, 0x01	; 1
    7df8:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    7dfa:	e0 ec       	ldi	r30, 0xC0	; 192
    7dfc:	f1 e0       	ldi	r31, 0x01	; 1
    7dfe:	12 82       	std	Z+2, r1	; 0x02

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    7e00:	19 82       	std	Y+1, r1	; 0x01
    7e02:	14 c0       	rjmp	.+40     	; 0x7e2c <EEPROM_LoadPage+0x52>
		NVM.ADDR0 = i;
    7e04:	e0 ec       	ldi	r30, 0xC0	; 192
    7e06:	f1 e0       	ldi	r31, 0x01	; 1
    7e08:	89 81       	ldd	r24, Y+1	; 0x01
    7e0a:	80 83       	st	Z, r24
		NVM.DATA0 = *values;
    7e0c:	a0 ec       	ldi	r26, 0xC0	; 192
    7e0e:	b1 e0       	ldi	r27, 0x01	; 1
    7e10:	ea 81       	ldd	r30, Y+2	; 0x02
    7e12:	fb 81       	ldd	r31, Y+3	; 0x03
    7e14:	80 81       	ld	r24, Z
    7e16:	14 96       	adiw	r26, 0x04	; 4
    7e18:	8c 93       	st	X, r24
    7e1a:	14 97       	sbiw	r26, 0x04	; 4
		++values;
    7e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    7e1e:	9b 81       	ldd	r25, Y+3	; 0x03
    7e20:	01 96       	adiw	r24, 0x01	; 1
    7e22:	8a 83       	std	Y+2, r24	; 0x02
    7e24:	9b 83       	std	Y+3, r25	; 0x03
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    7e26:	89 81       	ldd	r24, Y+1	; 0x01
    7e28:	8f 5f       	subi	r24, 0xFF	; 255
    7e2a:	89 83       	std	Y+1, r24	; 0x01
    7e2c:	89 81       	ldd	r24, Y+1	; 0x01
    7e2e:	80 32       	cpi	r24, 0x20	; 32
    7e30:	48 f3       	brcs	.-46     	; 0x7e04 <EEPROM_LoadPage+0x2a>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    7e32:	23 96       	adiw	r28, 0x03	; 3
    7e34:	cd bf       	out	0x3d, r28	; 61
    7e36:	de bf       	out	0x3e, r29	; 62
    7e38:	cf 91       	pop	r28
    7e3a:	df 91       	pop	r29
    7e3c:	08 95       	ret

00007e3e <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    7e3e:	df 93       	push	r29
    7e40:	cf 93       	push	r28
    7e42:	00 d0       	rcall	.+0      	; 0x7e44 <EEPROM_AtomicWritePage+0x6>
    7e44:	cd b7       	in	r28, 0x3d	; 61
    7e46:	de b7       	in	r29, 0x3e	; 62
    7e48:	8b 83       	std	Y+3, r24	; 0x03
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7e4a:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    7e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    7e50:	88 2f       	mov	r24, r24
    7e52:	90 e0       	ldi	r25, 0x00	; 0
    7e54:	88 0f       	add	r24, r24
    7e56:	99 1f       	adc	r25, r25
    7e58:	82 95       	swap	r24
    7e5a:	92 95       	swap	r25
    7e5c:	90 7f       	andi	r25, 0xF0	; 240
    7e5e:	98 27       	eor	r25, r24
    7e60:	80 7f       	andi	r24, 0xF0	; 240
    7e62:	98 27       	eor	r25, r24
    7e64:	89 83       	std	Y+1, r24	; 0x01
    7e66:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    7e68:	e0 ec       	ldi	r30, 0xC0	; 192
    7e6a:	f1 e0       	ldi	r31, 0x01	; 1
    7e6c:	89 81       	ldd	r24, Y+1	; 0x01
    7e6e:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    7e70:	e0 ec       	ldi	r30, 0xC0	; 192
    7e72:	f1 e0       	ldi	r31, 0x01	; 1
    7e74:	89 81       	ldd	r24, Y+1	; 0x01
    7e76:	9a 81       	ldd	r25, Y+2	; 0x02
    7e78:	89 2f       	mov	r24, r25
    7e7a:	99 27       	eor	r25, r25
    7e7c:	8f 71       	andi	r24, 0x1F	; 31
    7e7e:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    7e80:	e0 ec       	ldi	r30, 0xC0	; 192
    7e82:	f1 e0       	ldi	r31, 0x01	; 1
    7e84:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    7e86:	e0 ec       	ldi	r30, 0xC0	; 192
    7e88:	f1 e0       	ldi	r31, 0x01	; 1
    7e8a:	85 e3       	ldi	r24, 0x35	; 53
    7e8c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    7e8e:	ef 93       	push	r30
    7e90:	ff 93       	push	r31
    7e92:	0f 93       	push	r16
    7e94:	2f 93       	push	r18
    7e96:	eb ec       	ldi	r30, 0xCB	; 203
    7e98:	f1 e0       	ldi	r31, 0x01	; 1
    7e9a:	08 ed       	ldi	r16, 0xD8	; 216
    7e9c:	21 e0       	ldi	r18, 0x01	; 1
    7e9e:	04 bf       	out	0x34, r16	; 52
    7ea0:	20 83       	st	Z, r18
    7ea2:	2f 91       	pop	r18
    7ea4:	0f 91       	pop	r16
    7ea6:	ff 91       	pop	r31
    7ea8:	ef 91       	pop	r30
}
    7eaa:	23 96       	adiw	r28, 0x03	; 3
    7eac:	cd bf       	out	0x3d, r28	; 61
    7eae:	de bf       	out	0x3e, r29	; 62
    7eb0:	cf 91       	pop	r28
    7eb2:	df 91       	pop	r29
    7eb4:	08 95       	ret

00007eb6 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    7eb6:	df 93       	push	r29
    7eb8:	cf 93       	push	r28
    7eba:	00 d0       	rcall	.+0      	; 0x7ebc <EEPROM_ErasePage+0x6>
    7ebc:	cd b7       	in	r28, 0x3d	; 61
    7ebe:	de b7       	in	r29, 0x3e	; 62
    7ec0:	8b 83       	std	Y+3, r24	; 0x03
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7ec2:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    7ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    7ec8:	88 2f       	mov	r24, r24
    7eca:	90 e0       	ldi	r25, 0x00	; 0
    7ecc:	88 0f       	add	r24, r24
    7ece:	99 1f       	adc	r25, r25
    7ed0:	82 95       	swap	r24
    7ed2:	92 95       	swap	r25
    7ed4:	90 7f       	andi	r25, 0xF0	; 240
    7ed6:	98 27       	eor	r25, r24
    7ed8:	80 7f       	andi	r24, 0xF0	; 240
    7eda:	98 27       	eor	r25, r24
    7edc:	89 83       	std	Y+1, r24	; 0x01
    7ede:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    7ee0:	e0 ec       	ldi	r30, 0xC0	; 192
    7ee2:	f1 e0       	ldi	r31, 0x01	; 1
    7ee4:	89 81       	ldd	r24, Y+1	; 0x01
    7ee6:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    7ee8:	e0 ec       	ldi	r30, 0xC0	; 192
    7eea:	f1 e0       	ldi	r31, 0x01	; 1
    7eec:	89 81       	ldd	r24, Y+1	; 0x01
    7eee:	9a 81       	ldd	r25, Y+2	; 0x02
    7ef0:	89 2f       	mov	r24, r25
    7ef2:	99 27       	eor	r25, r25
    7ef4:	8f 71       	andi	r24, 0x1F	; 31
    7ef6:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    7ef8:	e0 ec       	ldi	r30, 0xC0	; 192
    7efa:	f1 e0       	ldi	r31, 0x01	; 1
    7efc:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    7efe:	e0 ec       	ldi	r30, 0xC0	; 192
    7f00:	f1 e0       	ldi	r31, 0x01	; 1
    7f02:	82 e3       	ldi	r24, 0x32	; 50
    7f04:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    7f06:	ef 93       	push	r30
    7f08:	ff 93       	push	r31
    7f0a:	0f 93       	push	r16
    7f0c:	2f 93       	push	r18
    7f0e:	eb ec       	ldi	r30, 0xCB	; 203
    7f10:	f1 e0       	ldi	r31, 0x01	; 1
    7f12:	08 ed       	ldi	r16, 0xD8	; 216
    7f14:	21 e0       	ldi	r18, 0x01	; 1
    7f16:	04 bf       	out	0x34, r16	; 52
    7f18:	20 83       	st	Z, r18
    7f1a:	2f 91       	pop	r18
    7f1c:	0f 91       	pop	r16
    7f1e:	ff 91       	pop	r31
    7f20:	ef 91       	pop	r30
}
    7f22:	23 96       	adiw	r28, 0x03	; 3
    7f24:	cd bf       	out	0x3d, r28	; 61
    7f26:	de bf       	out	0x3e, r29	; 62
    7f28:	cf 91       	pop	r28
    7f2a:	df 91       	pop	r29
    7f2c:	08 95       	ret

00007f2e <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    7f2e:	df 93       	push	r29
    7f30:	cf 93       	push	r28
    7f32:	00 d0       	rcall	.+0      	; 0x7f34 <EEPROM_SplitWritePage+0x6>
    7f34:	cd b7       	in	r28, 0x3d	; 61
    7f36:	de b7       	in	r29, 0x3e	; 62
    7f38:	8b 83       	std	Y+3, r24	; 0x03
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7f3a:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    7f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    7f40:	88 2f       	mov	r24, r24
    7f42:	90 e0       	ldi	r25, 0x00	; 0
    7f44:	88 0f       	add	r24, r24
    7f46:	99 1f       	adc	r25, r25
    7f48:	82 95       	swap	r24
    7f4a:	92 95       	swap	r25
    7f4c:	90 7f       	andi	r25, 0xF0	; 240
    7f4e:	98 27       	eor	r25, r24
    7f50:	80 7f       	andi	r24, 0xF0	; 240
    7f52:	98 27       	eor	r25, r24
    7f54:	89 83       	std	Y+1, r24	; 0x01
    7f56:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    7f58:	e0 ec       	ldi	r30, 0xC0	; 192
    7f5a:	f1 e0       	ldi	r31, 0x01	; 1
    7f5c:	89 81       	ldd	r24, Y+1	; 0x01
    7f5e:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    7f60:	e0 ec       	ldi	r30, 0xC0	; 192
    7f62:	f1 e0       	ldi	r31, 0x01	; 1
    7f64:	89 81       	ldd	r24, Y+1	; 0x01
    7f66:	9a 81       	ldd	r25, Y+2	; 0x02
    7f68:	89 2f       	mov	r24, r25
    7f6a:	99 27       	eor	r25, r25
    7f6c:	8f 71       	andi	r24, 0x1F	; 31
    7f6e:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    7f70:	e0 ec       	ldi	r30, 0xC0	; 192
    7f72:	f1 e0       	ldi	r31, 0x01	; 1
    7f74:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    7f76:	e0 ec       	ldi	r30, 0xC0	; 192
    7f78:	f1 e0       	ldi	r31, 0x01	; 1
    7f7a:	84 e3       	ldi	r24, 0x34	; 52
    7f7c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    7f7e:	ef 93       	push	r30
    7f80:	ff 93       	push	r31
    7f82:	0f 93       	push	r16
    7f84:	2f 93       	push	r18
    7f86:	eb ec       	ldi	r30, 0xCB	; 203
    7f88:	f1 e0       	ldi	r31, 0x01	; 1
    7f8a:	08 ed       	ldi	r16, 0xD8	; 216
    7f8c:	21 e0       	ldi	r18, 0x01	; 1
    7f8e:	04 bf       	out	0x34, r16	; 52
    7f90:	20 83       	st	Z, r18
    7f92:	2f 91       	pop	r18
    7f94:	0f 91       	pop	r16
    7f96:	ff 91       	pop	r31
    7f98:	ef 91       	pop	r30
}
    7f9a:	23 96       	adiw	r28, 0x03	; 3
    7f9c:	cd bf       	out	0x3d, r28	; 61
    7f9e:	de bf       	out	0x3e, r29	; 62
    7fa0:	cf 91       	pop	r28
    7fa2:	df 91       	pop	r29
    7fa4:	08 95       	ret

00007fa6 <EEPROM_EraseAll>:
/* Erase entire EEPROM memory.
 *
 *  This function erases the entire EEPROM memory block to 0xFF.
 */
void EEPROM_EraseAll( void )
{
    7fa6:	df 93       	push	r29
    7fa8:	cf 93       	push	r28
    7faa:	cd b7       	in	r28, 0x3d	; 61
    7fac:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7fae:	0e 94 9c 3e 	call	0x7d38	; 0x7d38 <EEPROM_WaitForNVM>

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    7fb2:	e0 ec       	ldi	r30, 0xC0	; 192
    7fb4:	f1 e0       	ldi	r31, 0x01	; 1
    7fb6:	80 e3       	ldi	r24, 0x30	; 48
    7fb8:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    7fba:	ef 93       	push	r30
    7fbc:	ff 93       	push	r31
    7fbe:	0f 93       	push	r16
    7fc0:	2f 93       	push	r18
    7fc2:	eb ec       	ldi	r30, 0xCB	; 203
    7fc4:	f1 e0       	ldi	r31, 0x01	; 1
    7fc6:	08 ed       	ldi	r16, 0xD8	; 216
    7fc8:	21 e0       	ldi	r18, 0x01	; 1
    7fca:	04 bf       	out	0x34, r16	; 52
    7fcc:	20 83       	st	Z, r18
    7fce:	2f 91       	pop	r18
    7fd0:	0f 91       	pop	r16
    7fd2:	ff 91       	pop	r31
    7fd4:	ef 91       	pop	r30
}
    7fd6:	cf 91       	pop	r28
    7fd8:	df 91       	pop	r29
    7fda:	08 95       	ret

00007fdc <xio_pgm_init>:
 *
 *  Control parameters are defaulted and may be set using xio_pgm_control()
 */

void xio_pgm_init(const uint16_t control)
{
    7fdc:	df 93       	push	r29
    7fde:	cf 93       	push	r28
    7fe0:	0f 92       	push	r0
    7fe2:	0f 92       	push	r0
    7fe4:	cd b7       	in	r28, 0x3d	; 61
    7fe6:	de b7       	in	r29, 0x3e	; 62
    7fe8:	89 83       	std	Y+1, r24	; 0x01
    7fea:	9a 83       	std	Y+2, r25	; 0x02
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;	// set flags to defaults & initial state
    7fec:	85 e0       	ldi	r24, 0x05	; 5
    7fee:	90 e0       	ldi	r25, 0x00	; 0
    7ff0:	80 93 ee 21 	sts	0x21EE, r24
    7ff4:	90 93 ef 21 	sts	0x21EF, r25
	if (control & XIO_WR) {				// this is actually an error. Ignore for now.
    7ff8:	89 81       	ldd	r24, Y+1	; 0x01
    7ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    7ffc:	80 72       	andi	r24, 0x20	; 32
    7ffe:	90 70       	andi	r25, 0x00	; 0
    8000:	00 97       	sbiw	r24, 0x00	; 0
    8002:	49 f0       	breq	.+18     	; 0x8016 <xio_pgm_init+0x3a>
		fpgm.flags |= XIO_FLAG_WR_bm;
    8004:	80 91 ee 21 	lds	r24, 0x21EE
    8008:	90 91 ef 21 	lds	r25, 0x21EF
    800c:	82 60       	ori	r24, 0x02	; 2
    800e:	80 93 ee 21 	sts	0x21EE, r24
    8012:	90 93 ef 21 	sts	0x21EF, r25
	}
	if (control & XIO_NOBLOCK) {		// this is also technically a config error.
    8016:	89 81       	ldd	r24, Y+1	; 0x01
    8018:	9a 81       	ldd	r25, Y+2	; 0x02
    801a:	80 78       	andi	r24, 0x80	; 128
    801c:	90 70       	andi	r25, 0x00	; 0
    801e:	00 97       	sbiw	r24, 0x00	; 0
    8020:	49 f0       	breq	.+18     	; 0x8034 <xio_pgm_init+0x58>
		fpgm.flags &= ~XIO_FLAG_BLOCK_bm;
    8022:	80 91 ee 21 	lds	r24, 0x21EE
    8026:	90 91 ef 21 	lds	r25, 0x21EF
    802a:	8b 7f       	andi	r24, 0xFB	; 251
    802c:	80 93 ee 21 	sts	0x21EE, r24
    8030:	90 93 ef 21 	sts	0x21EF, r25
	}
	if (control & XIO_ECHO) {
    8034:	89 81       	ldd	r24, Y+1	; 0x01
    8036:	9a 81       	ldd	r25, Y+2	; 0x02
    8038:	80 70       	andi	r24, 0x00	; 0
    803a:	91 70       	andi	r25, 0x01	; 1
    803c:	00 97       	sbiw	r24, 0x00	; 0
    803e:	49 f0       	breq	.+18     	; 0x8052 <xio_pgm_init+0x76>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    8040:	80 91 ee 21 	lds	r24, 0x21EE
    8044:	90 91 ef 21 	lds	r25, 0x21EF
    8048:	80 61       	ori	r24, 0x10	; 16
    804a:	80 93 ee 21 	sts	0x21EE, r24
    804e:	90 93 ef 21 	sts	0x21EF, r25
	}
	if (control & XIO_NOECHO) {
    8052:	89 81       	ldd	r24, Y+1	; 0x01
    8054:	9a 81       	ldd	r25, Y+2	; 0x02
    8056:	80 70       	andi	r24, 0x00	; 0
    8058:	92 70       	andi	r25, 0x02	; 2
    805a:	00 97       	sbiw	r24, 0x00	; 0
    805c:	49 f0       	breq	.+18     	; 0x8070 <xio_pgm_init+0x94>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    805e:	80 91 ee 21 	lds	r24, 0x21EE
    8062:	90 91 ef 21 	lds	r25, 0x21EF
    8066:	8f 7e       	andi	r24, 0xEF	; 239
    8068:	80 93 ee 21 	sts	0x21EE, r24
    806c:	90 93 ef 21 	sts	0x21EF, r25
	}
	if (control & XIO_CRLF) {
    8070:	89 81       	ldd	r24, Y+1	; 0x01
    8072:	9a 81       	ldd	r25, Y+2	; 0x02
    8074:	80 70       	andi	r24, 0x00	; 0
    8076:	94 70       	andi	r25, 0x04	; 4
    8078:	00 97       	sbiw	r24, 0x00	; 0
    807a:	49 f0       	breq	.+18     	; 0x808e <xio_pgm_init+0xb2>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    807c:	80 91 ee 21 	lds	r24, 0x21EE
    8080:	90 91 ef 21 	lds	r25, 0x21EF
    8084:	80 62       	ori	r24, 0x20	; 32
    8086:	80 93 ee 21 	sts	0x21EE, r24
    808a:	90 93 ef 21 	sts	0x21EF, r25
	}
	if (control & XIO_NOCRLF) {
    808e:	89 81       	ldd	r24, Y+1	; 0x01
    8090:	9a 81       	ldd	r25, Y+2	; 0x02
    8092:	80 70       	andi	r24, 0x00	; 0
    8094:	98 70       	andi	r25, 0x08	; 8
    8096:	00 97       	sbiw	r24, 0x00	; 0
    8098:	49 f0       	breq	.+18     	; 0x80ac <xio_pgm_init+0xd0>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    809a:	80 91 ee 21 	lds	r24, 0x21EE
    809e:	90 91 ef 21 	lds	r25, 0x21EF
    80a2:	8f 7d       	andi	r24, 0xDF	; 223
    80a4:	80 93 ee 21 	sts	0x21EE, r24
    80a8:	90 93 ef 21 	sts	0x21EF, r25
	}
	if (control & XIO_LINEMODE) {
    80ac:	89 81       	ldd	r24, Y+1	; 0x01
    80ae:	9a 81       	ldd	r25, Y+2	; 0x02
    80b0:	80 70       	andi	r24, 0x00	; 0
    80b2:	90 71       	andi	r25, 0x10	; 16
    80b4:	00 97       	sbiw	r24, 0x00	; 0
    80b6:	49 f0       	breq	.+18     	; 0x80ca <xio_pgm_init+0xee>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    80b8:	80 91 ee 21 	lds	r24, 0x21EE
    80bc:	90 91 ef 21 	lds	r25, 0x21EF
    80c0:	80 64       	ori	r24, 0x40	; 64
    80c2:	80 93 ee 21 	sts	0x21EE, r24
    80c6:	90 93 ef 21 	sts	0x21EF, r25
	}
	if (control & XIO_NOLINEMODE) {
    80ca:	89 81       	ldd	r24, Y+1	; 0x01
    80cc:	9a 81       	ldd	r25, Y+2	; 0x02
    80ce:	80 70       	andi	r24, 0x00	; 0
    80d0:	90 72       	andi	r25, 0x20	; 32
    80d2:	00 97       	sbiw	r24, 0x00	; 0
    80d4:	49 f0       	breq	.+18     	; 0x80e8 <xio_pgm_init+0x10c>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    80d6:	80 91 ee 21 	lds	r24, 0x21EE
    80da:	90 91 ef 21 	lds	r25, 0x21EF
    80de:	8f 7b       	andi	r24, 0xBF	; 191
    80e0:	80 93 ee 21 	sts	0x21EE, r24
    80e4:	90 93 ef 21 	sts	0x21EF, r25
	}
	if (control & XIO_SEMICOLONS) {
    80e8:	89 81       	ldd	r24, Y+1	; 0x01
    80ea:	9a 81       	ldd	r25, Y+2	; 0x02
    80ec:	80 70       	andi	r24, 0x00	; 0
    80ee:	90 74       	andi	r25, 0x40	; 64
    80f0:	00 97       	sbiw	r24, 0x00	; 0
    80f2:	49 f0       	breq	.+18     	; 0x8106 <xio_pgm_init+0x12a>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    80f4:	80 91 ee 21 	lds	r24, 0x21EE
    80f8:	90 91 ef 21 	lds	r25, 0x21EF
    80fc:	80 68       	ori	r24, 0x80	; 128
    80fe:	80 93 ee 21 	sts	0x21EE, r24
    8102:	90 93 ef 21 	sts	0x21EF, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    8106:	89 81       	ldd	r24, Y+1	; 0x01
    8108:	9a 81       	ldd	r25, Y+2	; 0x02
    810a:	99 23       	and	r25, r25
    810c:	4c f4       	brge	.+18     	; 0x8120 <xio_pgm_init+0x144>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    810e:	80 91 ee 21 	lds	r24, 0x21EE
    8112:	90 91 ef 21 	lds	r25, 0x21EF
    8116:	8f 77       	andi	r24, 0x7F	; 127
    8118:	80 93 ee 21 	sts	0x21EE, r24
    811c:	90 93 ef 21 	sts	0x21EF, r25
	}
	fpgm.idx = 0;
    8120:	10 92 f9 21 	sts	0x21F9, r1
    8124:	10 92 fa 21 	sts	0x21FA, r1
	fpgm.sig = 0;
    8128:	10 92 f1 21 	sts	0x21F1, r1
	dev_pgm.udata = &(fpgm.sig); 	// bind signals register to pgm FILE struct
    812c:	81 ef       	ldi	r24, 0xF1	; 241
    812e:	91 e2       	ldi	r25, 0x21	; 33
    8130:	80 93 1d 20 	sts	0x201D, r24
    8134:	90 93 1e 20 	sts	0x201E, r25
	fpgm.len = sizeof(fpgm.buf);
    8138:	82 e0       	ldi	r24, 0x02	; 2
    813a:	80 93 f4 21 	sts	0x21F4, r24
}
    813e:	0f 90       	pop	r0
    8140:	0f 90       	pop	r0
    8142:	cf 91       	pop	r28
    8144:	df 91       	pop	r29
    8146:	08 95       	ret

00008148 <xio_pgm_open>:
 *	OK, so this is not really a UNIX open() except for it's moral equivalency
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

FILE * xio_pgm_open(const prog_char *addr)
{
    8148:	df 93       	push	r29
    814a:	cf 93       	push	r28
    814c:	0f 92       	push	r0
    814e:	0f 92       	push	r0
    8150:	cd b7       	in	r28, 0x3d	; 61
    8152:	de b7       	in	r29, 0x3e	; 62
    8154:	89 83       	std	Y+1, r24	; 0x01
    8156:	9a 83       	std	Y+2, r25	; 0x02
	fpgm.flags &= XIO_FLAG_RESET_gm;			// reset the signaling bits
    8158:	80 91 ee 21 	lds	r24, 0x21EE
    815c:	90 91 ef 21 	lds	r25, 0x21EF
    8160:	9f 70       	andi	r25, 0x0F	; 15
    8162:	80 93 ee 21 	sts	0x21EE, r24
    8166:	90 93 ef 21 	sts	0x21EF, r25
	fpgm.pgmbase_P = (PROGMEM char *)addr;		// might want to range check this
    816a:	89 81       	ldd	r24, Y+1	; 0x01
    816c:	9a 81       	ldd	r25, Y+2	; 0x02
    816e:	80 93 f7 21 	sts	0x21F7, r24
    8172:	90 93 f8 21 	sts	0x21F8, r25
	fpgm.idx = 0;
    8176:	10 92 f9 21 	sts	0x21F9, r1
    817a:	10 92 fa 21 	sts	0x21FA, r1
	return(&dev_pgm);
    817e:	81 e1       	ldi	r24, 0x11	; 17
    8180:	90 e2       	ldi	r25, 0x20	; 32
}
    8182:	0f 90       	pop	r0
    8184:	0f 90       	pop	r0
    8186:	cf 91       	pop	r28
    8188:	df 91       	pop	r29
    818a:	08 95       	ret

0000818c <xio_pgm_control>:
 *	XIO_SEMICOLONS <null>		Treat semicolons as line breaks
 *	XIO_NOSEMICOLONS <null>	Y	Don't treat semicolons as line breaks
 */

int8_t xio_pgm_control(const uint16_t control, const int16_t arg)
{
    818c:	df 93       	push	r29
    818e:	cf 93       	push	r28
    8190:	00 d0       	rcall	.+0      	; 0x8192 <xio_pgm_control+0x6>
    8192:	0f 92       	push	r0
    8194:	cd b7       	in	r28, 0x3d	; 61
    8196:	de b7       	in	r29, 0x3e	; 62
    8198:	89 83       	std	Y+1, r24	; 0x01
    819a:	9a 83       	std	Y+2, r25	; 0x02
    819c:	6b 83       	std	Y+3, r22	; 0x03
    819e:	7c 83       	std	Y+4, r23	; 0x04
	// transfer control flags to internal flag bits
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;		// set flags to defaults & initial state
    81a0:	85 e0       	ldi	r24, 0x05	; 5
    81a2:	90 e0       	ldi	r25, 0x00	; 0
    81a4:	80 93 ee 21 	sts	0x21EE, r24
    81a8:	90 93 ef 21 	sts	0x21EF, r25
	if (control & XIO_ECHO) {
    81ac:	89 81       	ldd	r24, Y+1	; 0x01
    81ae:	9a 81       	ldd	r25, Y+2	; 0x02
    81b0:	80 70       	andi	r24, 0x00	; 0
    81b2:	91 70       	andi	r25, 0x01	; 1
    81b4:	00 97       	sbiw	r24, 0x00	; 0
    81b6:	49 f0       	breq	.+18     	; 0x81ca <xio_pgm_control+0x3e>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    81b8:	80 91 ee 21 	lds	r24, 0x21EE
    81bc:	90 91 ef 21 	lds	r25, 0x21EF
    81c0:	80 61       	ori	r24, 0x10	; 16
    81c2:	80 93 ee 21 	sts	0x21EE, r24
    81c6:	90 93 ef 21 	sts	0x21EF, r25
	}
	if (control & XIO_NOECHO) {
    81ca:	89 81       	ldd	r24, Y+1	; 0x01
    81cc:	9a 81       	ldd	r25, Y+2	; 0x02
    81ce:	80 70       	andi	r24, 0x00	; 0
    81d0:	92 70       	andi	r25, 0x02	; 2
    81d2:	00 97       	sbiw	r24, 0x00	; 0
    81d4:	49 f0       	breq	.+18     	; 0x81e8 <xio_pgm_control+0x5c>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    81d6:	80 91 ee 21 	lds	r24, 0x21EE
    81da:	90 91 ef 21 	lds	r25, 0x21EF
    81de:	8f 7e       	andi	r24, 0xEF	; 239
    81e0:	80 93 ee 21 	sts	0x21EE, r24
    81e4:	90 93 ef 21 	sts	0x21EF, r25
	}
	if (control & XIO_CRLF) {
    81e8:	89 81       	ldd	r24, Y+1	; 0x01
    81ea:	9a 81       	ldd	r25, Y+2	; 0x02
    81ec:	80 70       	andi	r24, 0x00	; 0
    81ee:	94 70       	andi	r25, 0x04	; 4
    81f0:	00 97       	sbiw	r24, 0x00	; 0
    81f2:	49 f0       	breq	.+18     	; 0x8206 <xio_pgm_control+0x7a>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    81f4:	80 91 ee 21 	lds	r24, 0x21EE
    81f8:	90 91 ef 21 	lds	r25, 0x21EF
    81fc:	80 62       	ori	r24, 0x20	; 32
    81fe:	80 93 ee 21 	sts	0x21EE, r24
    8202:	90 93 ef 21 	sts	0x21EF, r25
	}
	if (control & XIO_NOCRLF) {
    8206:	89 81       	ldd	r24, Y+1	; 0x01
    8208:	9a 81       	ldd	r25, Y+2	; 0x02
    820a:	80 70       	andi	r24, 0x00	; 0
    820c:	98 70       	andi	r25, 0x08	; 8
    820e:	00 97       	sbiw	r24, 0x00	; 0
    8210:	49 f0       	breq	.+18     	; 0x8224 <xio_pgm_control+0x98>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    8212:	80 91 ee 21 	lds	r24, 0x21EE
    8216:	90 91 ef 21 	lds	r25, 0x21EF
    821a:	8f 7d       	andi	r24, 0xDF	; 223
    821c:	80 93 ee 21 	sts	0x21EE, r24
    8220:	90 93 ef 21 	sts	0x21EF, r25
	}
	if (control & XIO_LINEMODE) {
    8224:	89 81       	ldd	r24, Y+1	; 0x01
    8226:	9a 81       	ldd	r25, Y+2	; 0x02
    8228:	80 70       	andi	r24, 0x00	; 0
    822a:	90 71       	andi	r25, 0x10	; 16
    822c:	00 97       	sbiw	r24, 0x00	; 0
    822e:	49 f0       	breq	.+18     	; 0x8242 <xio_pgm_control+0xb6>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    8230:	80 91 ee 21 	lds	r24, 0x21EE
    8234:	90 91 ef 21 	lds	r25, 0x21EF
    8238:	80 64       	ori	r24, 0x40	; 64
    823a:	80 93 ee 21 	sts	0x21EE, r24
    823e:	90 93 ef 21 	sts	0x21EF, r25
	}
	if (control & XIO_NOLINEMODE) {
    8242:	89 81       	ldd	r24, Y+1	; 0x01
    8244:	9a 81       	ldd	r25, Y+2	; 0x02
    8246:	80 70       	andi	r24, 0x00	; 0
    8248:	90 72       	andi	r25, 0x20	; 32
    824a:	00 97       	sbiw	r24, 0x00	; 0
    824c:	49 f0       	breq	.+18     	; 0x8260 <xio_pgm_control+0xd4>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    824e:	80 91 ee 21 	lds	r24, 0x21EE
    8252:	90 91 ef 21 	lds	r25, 0x21EF
    8256:	8f 7b       	andi	r24, 0xBF	; 191
    8258:	80 93 ee 21 	sts	0x21EE, r24
    825c:	90 93 ef 21 	sts	0x21EF, r25
	}
	if (control & XIO_SEMICOLONS) {
    8260:	89 81       	ldd	r24, Y+1	; 0x01
    8262:	9a 81       	ldd	r25, Y+2	; 0x02
    8264:	80 70       	andi	r24, 0x00	; 0
    8266:	90 74       	andi	r25, 0x40	; 64
    8268:	00 97       	sbiw	r24, 0x00	; 0
    826a:	49 f0       	breq	.+18     	; 0x827e <xio_pgm_control+0xf2>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    826c:	80 91 ee 21 	lds	r24, 0x21EE
    8270:	90 91 ef 21 	lds	r25, 0x21EF
    8274:	80 68       	ori	r24, 0x80	; 128
    8276:	80 93 ee 21 	sts	0x21EE, r24
    827a:	90 93 ef 21 	sts	0x21EF, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    827e:	89 81       	ldd	r24, Y+1	; 0x01
    8280:	9a 81       	ldd	r25, Y+2	; 0x02
    8282:	99 23       	and	r25, r25
    8284:	4c f4       	brge	.+18     	; 0x8298 <xio_pgm_control+0x10c>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    8286:	80 91 ee 21 	lds	r24, 0x21EE
    828a:	90 91 ef 21 	lds	r25, 0x21EF
    828e:	8f 77       	andi	r24, 0x7F	; 127
    8290:	80 93 ee 21 	sts	0x21EE, r24
    8294:	90 93 ef 21 	sts	0x21EF, r25
	}
	return (0);
    8298:	80 e0       	ldi	r24, 0x00	; 0
}
    829a:	24 96       	adiw	r28, 0x04	; 4
    829c:	cd bf       	out	0x3d, r28	; 61
    829e:	de bf       	out	0x3e, r29	; 62
    82a0:	cf 91       	pop	r28
    82a2:	df 91       	pop	r29
    82a4:	08 95       	ret

000082a6 <xio_pgm_putc>:
 *
 *  Always returns error. You cannot write to program memory
 */

int xio_pgm_putc(const char c, FILE *stream)
{
    82a6:	df 93       	push	r29
    82a8:	cf 93       	push	r28
    82aa:	00 d0       	rcall	.+0      	; 0x82ac <xio_pgm_putc+0x6>
    82ac:	cd b7       	in	r28, 0x3d	; 61
    82ae:	de b7       	in	r29, 0x3e	; 62
    82b0:	89 83       	std	Y+1, r24	; 0x01
    82b2:	6a 83       	std	Y+2, r22	; 0x02
    82b4:	7b 83       	std	Y+3, r23	; 0x03
	return -1;			// always returns an error. Big surprise.
    82b6:	8f ef       	ldi	r24, 0xFF	; 255
    82b8:	9f ef       	ldi	r25, 0xFF	; 255
}
    82ba:	23 96       	adiw	r28, 0x03	; 3
    82bc:	cd bf       	out	0x3d, r28	; 61
    82be:	de bf       	out	0x3e, r29	; 62
    82c0:	cf 91       	pop	r28
    82c2:	df 91       	pop	r29
    82c4:	08 95       	ret

000082c6 <xio_pgm_getc>:
 *		- echo all line termination chars as newlines ('\n')
 *		- Note: putc should expand newlines to <cr><lf>
 */

int xio_pgm_getc(FILE *stream)
{
    82c6:	df 93       	push	r29
    82c8:	cf 93       	push	r28
    82ca:	cd b7       	in	r28, 0x3d	; 61
    82cc:	de b7       	in	r29, 0x3e	; 62
    82ce:	27 97       	sbiw	r28, 0x07	; 7
    82d0:	cd bf       	out	0x3d, r28	; 61
    82d2:	de bf       	out	0x3e, r29	; 62
    82d4:	8c 83       	std	Y+4, r24	; 0x04
    82d6:	9d 83       	std	Y+5, r25	; 0x05
	if (fpgm.flags & XIO_FLAG_EOF_bm) {
    82d8:	80 91 ee 21 	lds	r24, 0x21EE
    82dc:	90 91 ef 21 	lds	r25, 0x21EF
    82e0:	80 70       	andi	r24, 0x00	; 0
    82e2:	90 72       	andi	r25, 0x20	; 32
    82e4:	00 97       	sbiw	r24, 0x00	; 0
    82e6:	41 f0       	breq	.+16     	; 0x82f8 <xio_pgm_getc+0x32>
		fpgm.sig = XIO_SIG_EOF;
    82e8:	82 e0       	ldi	r24, 0x02	; 2
    82ea:	80 93 f1 21 	sts	0x21F1, r24
		return (_FDEV_EOF);
    82ee:	2e ef       	ldi	r18, 0xFE	; 254
    82f0:	3f ef       	ldi	r19, 0xFF	; 255
    82f2:	2e 83       	std	Y+6, r18	; 0x06
    82f4:	3f 83       	std	Y+7, r19	; 0x07
    82f6:	83 c0       	rjmp	.+262    	; 0x83fe <xio_pgm_getc+0x138>
	}
	if ((fpgm.c = pgm_read_byte(&fpgm.pgmbase_P[fpgm.idx])) == NUL) {
    82f8:	20 91 f7 21 	lds	r18, 0x21F7
    82fc:	30 91 f8 21 	lds	r19, 0x21F8
    8300:	80 91 f9 21 	lds	r24, 0x21F9
    8304:	90 91 fa 21 	lds	r25, 0x21FA
    8308:	82 0f       	add	r24, r18
    830a:	93 1f       	adc	r25, r19
    830c:	8a 83       	std	Y+2, r24	; 0x02
    830e:	9b 83       	std	Y+3, r25	; 0x03
    8310:	ea 81       	ldd	r30, Y+2	; 0x02
    8312:	fb 81       	ldd	r31, Y+3	; 0x03
    8314:	84 91       	lpm	r24, Z+
    8316:	89 83       	std	Y+1, r24	; 0x01
    8318:	89 81       	ldd	r24, Y+1	; 0x01
    831a:	80 93 f2 21 	sts	0x21F2, r24
    831e:	80 91 f2 21 	lds	r24, 0x21F2
    8322:	88 23       	and	r24, r24
    8324:	49 f4       	brne	.+18     	; 0x8338 <xio_pgm_getc+0x72>
		fpgm.flags |= XIO_FLAG_EOF_bm;
    8326:	80 91 ee 21 	lds	r24, 0x21EE
    832a:	90 91 ef 21 	lds	r25, 0x21EF
    832e:	90 62       	ori	r25, 0x20	; 32
    8330:	80 93 ee 21 	sts	0x21EE, r24
    8334:	90 93 ef 21 	sts	0x21EF, r25
	}
	++fpgm.idx;
    8338:	80 91 f9 21 	lds	r24, 0x21F9
    833c:	90 91 fa 21 	lds	r25, 0x21FA
    8340:	01 96       	adiw	r24, 0x01	; 1
    8342:	80 93 f9 21 	sts	0x21F9, r24
    8346:	90 93 fa 21 	sts	0x21FA, r25
	if (!LINEMODE(fpgm.flags)) {		// processing is simple if not LINEMODE
    834a:	80 91 ee 21 	lds	r24, 0x21EE
    834e:	90 91 ef 21 	lds	r25, 0x21EF
    8352:	80 74       	andi	r24, 0x40	; 64
    8354:	90 70       	andi	r25, 0x00	; 0
    8356:	00 97       	sbiw	r24, 0x00	; 0
    8358:	d1 f4       	brne	.+52     	; 0x838e <xio_pgm_getc+0xc8>
		if (ECHO(fpgm.flags)) {
    835a:	80 91 ee 21 	lds	r24, 0x21EE
    835e:	90 91 ef 21 	lds	r25, 0x21EF
    8362:	80 71       	andi	r24, 0x10	; 16
    8364:	90 70       	andi	r25, 0x00	; 0
    8366:	00 97       	sbiw	r24, 0x00	; 0
    8368:	59 f0       	breq	.+22     	; 0x8380 <xio_pgm_getc+0xba>
			putchar(fpgm.c);
    836a:	80 91 f2 21 	lds	r24, 0x21F2
    836e:	88 2f       	mov	r24, r24
    8370:	90 e0       	ldi	r25, 0x00	; 0
    8372:	20 91 44 25 	lds	r18, 0x2544
    8376:	30 91 45 25 	lds	r19, 0x2545
    837a:	b9 01       	movw	r22, r18
    837c:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
		}
		return (fpgm.c);
    8380:	80 91 f2 21 	lds	r24, 0x21F2
    8384:	28 2f       	mov	r18, r24
    8386:	30 e0       	ldi	r19, 0x00	; 0
    8388:	2e 83       	std	Y+6, r18	; 0x06
    838a:	3f 83       	std	Y+7, r19	; 0x07
    838c:	38 c0       	rjmp	.+112    	; 0x83fe <xio_pgm_getc+0x138>
	}
	// now do the LINEMODE stuff
	if (fpgm.c == NUL) {				// perform newline substitutions
    838e:	80 91 f2 21 	lds	r24, 0x21F2
    8392:	88 23       	and	r24, r24
    8394:	21 f4       	brne	.+8      	; 0x839e <xio_pgm_getc+0xd8>
		fpgm.c = '\n';
    8396:	8a e0       	ldi	r24, 0x0A	; 10
    8398:	80 93 f2 21 	sts	0x21F2, r24
    839c:	17 c0       	rjmp	.+46     	; 0x83cc <xio_pgm_getc+0x106>
	} else if (fpgm.c == '\r') {
    839e:	80 91 f2 21 	lds	r24, 0x21F2
    83a2:	8d 30       	cpi	r24, 0x0D	; 13
    83a4:	21 f4       	brne	.+8      	; 0x83ae <xio_pgm_getc+0xe8>
		fpgm.c = '\n';
    83a6:	8a e0       	ldi	r24, 0x0A	; 10
    83a8:	80 93 f2 21 	sts	0x21F2, r24
    83ac:	0f c0       	rjmp	.+30     	; 0x83cc <xio_pgm_getc+0x106>
	} else if ((SEMICOLONS(fpgm.flags)) && (fpgm.c == ';')) {
    83ae:	80 91 ee 21 	lds	r24, 0x21EE
    83b2:	90 91 ef 21 	lds	r25, 0x21EF
    83b6:	80 78       	andi	r24, 0x80	; 128
    83b8:	90 70       	andi	r25, 0x00	; 0
    83ba:	00 97       	sbiw	r24, 0x00	; 0
    83bc:	39 f0       	breq	.+14     	; 0x83cc <xio_pgm_getc+0x106>
    83be:	80 91 f2 21 	lds	r24, 0x21F2
    83c2:	8b 33       	cpi	r24, 0x3B	; 59
    83c4:	19 f4       	brne	.+6      	; 0x83cc <xio_pgm_getc+0x106>
		fpgm.c = '\n';
    83c6:	8a e0       	ldi	r24, 0x0A	; 10
    83c8:	80 93 f2 21 	sts	0x21F2, r24
	}
	if (ECHO(fpgm.flags)) {
    83cc:	80 91 ee 21 	lds	r24, 0x21EE
    83d0:	90 91 ef 21 	lds	r25, 0x21EF
    83d4:	80 71       	andi	r24, 0x10	; 16
    83d6:	90 70       	andi	r25, 0x00	; 0
    83d8:	00 97       	sbiw	r24, 0x00	; 0
    83da:	59 f0       	breq	.+22     	; 0x83f2 <xio_pgm_getc+0x12c>
		putchar(fpgm.c);
    83dc:	80 91 f2 21 	lds	r24, 0x21F2
    83e0:	88 2f       	mov	r24, r24
    83e2:	90 e0       	ldi	r25, 0x00	; 0
    83e4:	20 91 44 25 	lds	r18, 0x2544
    83e8:	30 91 45 25 	lds	r19, 0x2545
    83ec:	b9 01       	movw	r22, r18
    83ee:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
	}
	return (fpgm.c);
    83f2:	80 91 f2 21 	lds	r24, 0x21F2
    83f6:	28 2f       	mov	r18, r24
    83f8:	30 e0       	ldi	r19, 0x00	; 0
    83fa:	2e 83       	std	Y+6, r18	; 0x06
    83fc:	3f 83       	std	Y+7, r19	; 0x07
    83fe:	8e 81       	ldd	r24, Y+6	; 0x06
    8400:	9f 81       	ldd	r25, Y+7	; 0x07
}
    8402:	27 96       	adiw	r28, 0x07	; 7
    8404:	cd bf       	out	0x3d, r28	; 61
    8406:	de bf       	out	0x3e, r29	; 62
    8408:	cf 91       	pop	r28
    840a:	df 91       	pop	r29
    840c:	08 95       	ret

0000840e <xio_pgm_readln>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_pgm_readln(char *buf, uint8_t len)
{
    840e:	df 93       	push	r29
    8410:	cf 93       	push	r28
    8412:	cd b7       	in	r28, 0x3d	; 61
    8414:	de b7       	in	r29, 0x3e	; 62
    8416:	25 97       	sbiw	r28, 0x05	; 5
    8418:	cd bf       	out	0x3d, r28	; 61
    841a:	de bf       	out	0x3e, r29	; 62
    841c:	89 83       	std	Y+1, r24	; 0x01
    841e:	9a 83       	std	Y+2, r25	; 0x02
    8420:	6b 83       	std	Y+3, r22	; 0x03
	if (!(fpgm.pgmbase_P)) {					// return error if no file is open
    8422:	80 91 f7 21 	lds	r24, 0x21F7
    8426:	90 91 f8 21 	lds	r25, 0x21F8
    842a:	00 97       	sbiw	r24, 0x00	; 0
    842c:	29 f4       	brne	.+10     	; 0x8438 <xio_pgm_readln+0x2a>
		return (TG_FILE_NOT_OPEN);
    842e:	82 e1       	ldi	r24, 0x12	; 18
    8430:	90 e0       	ldi	r25, 0x00	; 0
    8432:	8c 83       	std	Y+4, r24	; 0x04
    8434:	9d 83       	std	Y+5, r25	; 0x05
    8436:	1e c0       	rjmp	.+60     	; 0x8474 <xio_pgm_readln+0x66>
	}
	fpgm.sig = XIO_SIG_OK;						// initialize signal
    8438:	10 92 f1 21 	sts	0x21F1, r1
	if (fgets(buf, len, &dev_pgm) == NULL) {
    843c:	8b 81       	ldd	r24, Y+3	; 0x03
    843e:	48 2f       	mov	r20, r24
    8440:	50 e0       	ldi	r21, 0x00	; 0
    8442:	89 81       	ldd	r24, Y+1	; 0x01
    8444:	9a 81       	ldd	r25, Y+2	; 0x02
    8446:	21 e1       	ldi	r18, 0x11	; 17
    8448:	30 e2       	ldi	r19, 0x20	; 32
    844a:	ba 01       	movw	r22, r20
    844c:	a9 01       	movw	r20, r18
    844e:	0e 94 00 62 	call	0xc400	; 0xc400 <fgets>
    8452:	00 97       	sbiw	r24, 0x00	; 0
    8454:	69 f4       	brne	.+26     	; 0x8470 <xio_pgm_readln+0x62>
		fpgm.pgmbase_P = NULL;
    8456:	10 92 f7 21 	sts	0x21F7, r1
    845a:	10 92 f8 21 	sts	0x21F8, r1
		clearerr(&dev_pgm);
    845e:	81 e1       	ldi	r24, 0x11	; 17
    8460:	90 e2       	ldi	r25, 0x20	; 32
    8462:	0e 94 fb 61 	call	0xc3f6	; 0xc3f6 <clearerr>
		return (TG_EOF);
    8466:	85 e0       	ldi	r24, 0x05	; 5
    8468:	90 e0       	ldi	r25, 0x00	; 0
    846a:	8c 83       	std	Y+4, r24	; 0x04
    846c:	9d 83       	std	Y+5, r25	; 0x05
    846e:	02 c0       	rjmp	.+4      	; 0x8474 <xio_pgm_readln+0x66>
	}
	return (TG_OK);
    8470:	1c 82       	std	Y+4, r1	; 0x04
    8472:	1d 82       	std	Y+5, r1	; 0x05
    8474:	8c 81       	ldd	r24, Y+4	; 0x04
    8476:	9d 81       	ldd	r25, Y+5	; 0x05
}
    8478:	25 96       	adiw	r28, 0x05	; 5
    847a:	cd bf       	out	0x3d, r28	; 61
    847c:	de bf       	out	0x3e, r29	; 62
    847e:	cf 91       	pop	r28
    8480:	df 91       	pop	r29
    8482:	08 95       	ret

00008484 <tg_init>:
/*
 * tg_init()
 */

void tg_init() 
{
    8484:	df 93       	push	r29
    8486:	cf 93       	push	r28
    8488:	0f 92       	push	r0
    848a:	cd b7       	in	r28, 0x3d	; 61
    848c:	de b7       	in	r29, 0x3e	; 62
	// initialize devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) { // don't bother with /dev/null
    848e:	81 e0       	ldi	r24, 0x01	; 1
    8490:	89 83       	std	Y+1, r24	; 0x01
    8492:	27 c0       	rjmp	.+78     	; 0x84e2 <tg_init+0x5e>
		tg.dev[i].flags = XIO_FLAG_ASTERISK_bm;
    8494:	89 81       	ldd	r24, Y+1	; 0x01
    8496:	28 2f       	mov	r18, r24
    8498:	30 e0       	ldi	r19, 0x00	; 0
    849a:	82 e5       	ldi	r24, 0x52	; 82
    849c:	90 e0       	ldi	r25, 0x00	; 0
    849e:	ac 01       	movw	r20, r24
    84a0:	24 9f       	mul	r18, r20
    84a2:	c0 01       	movw	r24, r0
    84a4:	25 9f       	mul	r18, r21
    84a6:	90 0d       	add	r25, r0
    84a8:	34 9f       	mul	r19, r20
    84aa:	90 0d       	add	r25, r0
    84ac:	11 24       	eor	r1, r1
    84ae:	fc 01       	movw	r30, r24
    84b0:	ef 5f       	subi	r30, 0xFF	; 255
    84b2:	fd 4d       	sbci	r31, 0xDD	; 221
    84b4:	81 e0       	ldi	r24, 0x01	; 1
    84b6:	80 83       	st	Z, r24
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    84b8:	89 81       	ldd	r24, Y+1	; 0x01
    84ba:	28 2f       	mov	r18, r24
    84bc:	30 e0       	ldi	r19, 0x00	; 0
    84be:	82 e5       	ldi	r24, 0x52	; 82
    84c0:	90 e0       	ldi	r25, 0x00	; 0
    84c2:	ac 01       	movw	r20, r24
    84c4:	24 9f       	mul	r18, r20
    84c6:	c0 01       	movw	r24, r0
    84c8:	25 9f       	mul	r18, r21
    84ca:	90 0d       	add	r25, r0
    84cc:	34 9f       	mul	r19, r20
    84ce:	90 0d       	add	r25, r0
    84d0:	11 24       	eor	r1, r1
    84d2:	fc 01       	movw	r30, r24
    84d4:	ee 5f       	subi	r30, 0xFE	; 254
    84d6:	fd 4d       	sbci	r31, 0xDD	; 221
    84d8:	80 e5       	ldi	r24, 0x50	; 80
    84da:	80 83       	st	Z, r24
 */

void tg_init() 
{
	// initialize devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) { // don't bother with /dev/null
    84dc:	89 81       	ldd	r24, Y+1	; 0x01
    84de:	8f 5f       	subi	r24, 0xFF	; 255
    84e0:	89 83       	std	Y+1, r24	; 0x01
    84e2:	89 81       	ldd	r24, Y+1	; 0x01
    84e4:	85 30       	cpi	r24, 0x05	; 5
    84e6:	b0 f2       	brcs	.-84     	; 0x8494 <tg_init+0x10>
		tg.dev[i].flags = XIO_FLAG_ASTERISK_bm;
		tg.dev[i].len = sizeof(tg.dev[i].buf);
	}
	tg.dev[XIO_DEV_PGM].flags = 0;			// no asterisks on file devices
    84e8:	10 92 49 23 	sts	0x2349, r1

	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
    84ec:	81 e0       	ldi	r24, 0x01	; 1
    84ee:	80 93 ff 21 	sts	0x21FF, r24
	_tg_set_source(tg.default_src);			// set initial active source
    84f2:	80 91 ff 21 	lds	r24, 0x21FF
    84f6:	0e 94 f2 43 	call	0x87e4	; 0x87e4 <_tg_set_source>
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
    84fa:	80 e0       	ldi	r24, 0x00	; 0
    84fc:	0e 94 e5 43 	call	0x87ca	; 0x87ca <_tg_set_mode>
	tg.state = TG_STATE_READY_UNPROMPTED;
    8500:	10 92 fb 21 	sts	0x21FB, r1

	// version string
	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    8504:	88 e8       	ldi	r24, 0x88	; 136
    8506:	9b e1       	ldi	r25, 0x1B	; 27
    8508:	2e e7       	ldi	r18, 0x7E	; 126
    850a:	3b e1       	ldi	r19, 0x1B	; 27
    850c:	00 d0       	rcall	.+0      	; 0x850e <tg_init+0x8a>
    850e:	0f 92       	push	r0
    8510:	ed b7       	in	r30, 0x3d	; 61
    8512:	fe b7       	in	r31, 0x3e	; 62
    8514:	31 96       	adiw	r30, 0x01	; 1
    8516:	80 83       	st	Z, r24
    8518:	91 83       	std	Z+1, r25	; 0x01
    851a:	22 83       	std	Z+2, r18	; 0x02
    851c:	33 83       	std	Z+3, r19	; 0x03
    851e:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    8522:	0f 90       	pop	r0
    8524:	0f 90       	pop	r0
    8526:	0f 90       	pop	r0
    8528:	0f 90       	pop	r0
}
    852a:	0f 90       	pop	r0
    852c:	cf 91       	pop	r28
    852e:	df 91       	pop	r29
    8530:	08 95       	ret

00008532 <tg_controller>:
/* 
 * tg_controller() - top-level controller.
 */

void tg_controller()
{
    8532:	df 93       	push	r29
    8534:	cf 93       	push	r28
    8536:	cd b7       	in	r28, 0x3d	; 61
    8538:	de b7       	in	r29, 0x3e	; 62
	// top priority tasks
	st_execute_move();
    853a:	0e 94 ae 32 	call	0x655c	; 0x655c <st_execute_move>

	// medium priority tasks
	if ((tg.status = mc_line_continue()) == TG_EAGAIN) {	// line generator
    853e:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <mc_line_continue>
    8542:	80 93 fc 21 	sts	0x21FC, r24
    8546:	80 91 fc 21 	lds	r24, 0x21FC
    854a:	81 30       	cpi	r24, 0x01	; 1
    854c:	91 f0       	breq	.+36     	; 0x8572 <tg_controller+0x40>
		return;
	}
	if ((tg.status = mc_arc_continue()) == TG_EAGAIN) {	 	// arc generator 
    854e:	0e 94 cc 2d 	call	0x5b98	; 0x5b98 <mc_arc_continue>
    8552:	80 93 fc 21 	sts	0x21FC, r24
    8556:	80 91 fc 21 	lds	r24, 0x21FC
    855a:	81 30       	cpi	r24, 0x01	; 1
    855c:	51 f0       	breq	.+20     	; 0x8572 <tg_controller+0x40>
		return;
	}

	// low priority tasks
	if ((tg.status = _tg_read_next_line()) == TG_EAGAIN) {	// input line
    855e:	0e 94 bc 42 	call	0x8578	; 0x8578 <_tg_read_next_line>
    8562:	80 93 fc 21 	sts	0x21FC, r24
    8566:	80 91 fc 21 	lds	r24, 0x21FC
    856a:	81 30       	cpi	r24, 0x01	; 1
    856c:	11 f0       	breq	.+4      	; 0x8572 <tg_controller+0x40>
		return;
	}
	_tg_prompt();		// Send a prompt - but only if controller is ready for input
    856e:	0e 94 0a 44 	call	0x8814	; 0x8814 <_tg_prompt>
}
    8572:	cf 91       	pop	r28
    8574:	df 91       	pop	r29
    8576:	08 95       	ret

00008578 <_tg_read_next_line>:
/* 
 * _tg_read_next_line() - Perform a non-blocking line read from active input device
 */

static int _tg_read_next_line()
{
    8578:	df 93       	push	r29
    857a:	cf 93       	push	r28
    857c:	0f 92       	push	r0
    857e:	0f 92       	push	r0
    8580:	cd b7       	in	r28, 0x3d	; 61
    8582:	de b7       	in	r29, 0x3e	; 62
	// read input line or return if not a completed line
	if ((tg.status = xio_fget_ln(tg.src, tg.dev[tg.src].buf, tg.dev[tg.src].len)) == TG_OK) {
    8584:	60 91 fe 21 	lds	r22, 0x21FE
    8588:	80 91 fe 21 	lds	r24, 0x21FE
    858c:	28 2f       	mov	r18, r24
    858e:	30 e0       	ldi	r19, 0x00	; 0
    8590:	82 e5       	ldi	r24, 0x52	; 82
    8592:	90 e0       	ldi	r25, 0x00	; 0
    8594:	ac 01       	movw	r20, r24
    8596:	24 9f       	mul	r18, r20
    8598:	c0 01       	movw	r24, r0
    859a:	25 9f       	mul	r18, r21
    859c:	90 0d       	add	r25, r0
    859e:	34 9f       	mul	r19, r20
    85a0:	90 0d       	add	r25, r0
    85a2:	11 24       	eor	r1, r1
    85a4:	08 96       	adiw	r24, 0x08	; 8
    85a6:	ac 01       	movw	r20, r24
    85a8:	45 50       	subi	r20, 0x05	; 5
    85aa:	5e 4d       	sbci	r21, 0xDE	; 222
    85ac:	80 91 fe 21 	lds	r24, 0x21FE
    85b0:	28 2f       	mov	r18, r24
    85b2:	30 e0       	ldi	r19, 0x00	; 0
    85b4:	82 e5       	ldi	r24, 0x52	; 82
    85b6:	90 e0       	ldi	r25, 0x00	; 0
    85b8:	fc 01       	movw	r30, r24
    85ba:	2e 9f       	mul	r18, r30
    85bc:	c0 01       	movw	r24, r0
    85be:	2f 9f       	mul	r18, r31
    85c0:	90 0d       	add	r25, r0
    85c2:	3e 9f       	mul	r19, r30
    85c4:	90 0d       	add	r25, r0
    85c6:	11 24       	eor	r1, r1
    85c8:	fc 01       	movw	r30, r24
    85ca:	ee 5f       	subi	r30, 0xFE	; 254
    85cc:	fd 4d       	sbci	r31, 0xDD	; 221
    85ce:	90 81       	ld	r25, Z
    85d0:	86 2f       	mov	r24, r22
    85d2:	ba 01       	movw	r22, r20
    85d4:	49 2f       	mov	r20, r25
    85d6:	0e 94 62 36 	call	0x6cc4	; 0x6cc4 <xio_fget_ln>
    85da:	80 93 fc 21 	sts	0x21FC, r24
    85de:	80 91 fc 21 	lds	r24, 0x21FC
    85e2:	88 23       	and	r24, r24
    85e4:	a9 f4       	brne	.+42     	; 0x8610 <_tg_read_next_line+0x98>
		tg.status = tg_parser(tg.dev[tg.src].buf);	// dispatch to parser
    85e6:	80 91 fe 21 	lds	r24, 0x21FE
    85ea:	28 2f       	mov	r18, r24
    85ec:	30 e0       	ldi	r19, 0x00	; 0
    85ee:	82 e5       	ldi	r24, 0x52	; 82
    85f0:	90 e0       	ldi	r25, 0x00	; 0
    85f2:	ac 01       	movw	r20, r24
    85f4:	24 9f       	mul	r18, r20
    85f6:	c0 01       	movw	r24, r0
    85f8:	25 9f       	mul	r18, r21
    85fa:	90 0d       	add	r25, r0
    85fc:	34 9f       	mul	r19, r20
    85fe:	90 0d       	add	r25, r0
    8600:	11 24       	eor	r1, r1
    8602:	08 96       	adiw	r24, 0x08	; 8
    8604:	85 50       	subi	r24, 0x05	; 5
    8606:	9e 4d       	sbci	r25, 0xDE	; 222
    8608:	0e 94 4c 43 	call	0x8698	; 0x8698 <tg_parser>
    860c:	80 93 fc 21 	sts	0x21FC, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_STATE_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    8610:	80 91 fc 21 	lds	r24, 0x21FC
    8614:	e8 2f       	mov	r30, r24
    8616:	f0 e0       	ldi	r31, 0x00	; 0
    8618:	e9 83       	std	Y+1, r30	; 0x01
    861a:	fa 83       	std	Y+2, r31	; 0x02
    861c:	29 81       	ldd	r18, Y+1	; 0x01
    861e:	3a 81       	ldd	r19, Y+2	; 0x02
    8620:	23 30       	cpi	r18, 0x03	; 3
    8622:	31 05       	cpc	r19, r1
    8624:	54 f4       	brge	.+20     	; 0x863a <_tg_read_next_line+0xc2>
    8626:	49 81       	ldd	r20, Y+1	; 0x01
    8628:	5a 81       	ldd	r21, Y+2	; 0x02
    862a:	41 30       	cpi	r20, 0x01	; 1
    862c:	51 05       	cpc	r21, r1
    862e:	6c f5       	brge	.+90     	; 0x868a <_tg_read_next_line+0x112>
    8630:	89 81       	ldd	r24, Y+1	; 0x01
    8632:	9a 81       	ldd	r25, Y+2	; 0x02
    8634:	00 97       	sbiw	r24, 0x00	; 0
    8636:	61 f0       	breq	.+24     	; 0x8650 <_tg_read_next_line+0xd8>
    8638:	26 c0       	rjmp	.+76     	; 0x8686 <_tg_read_next_line+0x10e>
    863a:	e9 81       	ldd	r30, Y+1	; 0x01
    863c:	fa 81       	ldd	r31, Y+2	; 0x02
    863e:	e3 30       	cpi	r30, 0x03	; 3
    8640:	f1 05       	cpc	r31, r1
    8642:	49 f0       	breq	.+18     	; 0x8656 <_tg_read_next_line+0xde>
    8644:	29 81       	ldd	r18, Y+1	; 0x01
    8646:	3a 81       	ldd	r19, Y+2	; 0x02
    8648:	25 30       	cpi	r18, 0x05	; 5
    864a:	31 05       	cpc	r19, r1
    864c:	51 f0       	breq	.+20     	; 0x8662 <_tg_read_next_line+0xea>
    864e:	1b c0       	rjmp	.+54     	; 0x8686 <_tg_read_next_line+0x10e>

		case TG_EAGAIN: case TG_NOOP: break;

		case TG_OK: {								// got a completed line
			tg.state = TG_STATE_READY_UNPROMPTED; 
    8650:	10 92 fb 21 	sts	0x21FB, r1
    8654:	1a c0       	rjmp	.+52     	; 0x868a <_tg_read_next_line+0x112>
			break;
		}
		case TG_QUIT: {								// Quit returned from parser
			_tg_set_mode(TG_CONTROL_MODE);
    8656:	80 e0       	ldi	r24, 0x00	; 0
    8658:	0e 94 e5 43 	call	0x87ca	; 0x87ca <_tg_set_mode>
			tg.state = TG_STATE_READY_UNPROMPTED;
    865c:	10 92 fb 21 	sts	0x21FB, r1
    8660:	14 c0       	rjmp	.+40     	; 0x868a <_tg_read_next_line+0x112>
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
    8662:	8c e9       	ldi	r24, 0x9C	; 156
    8664:	9b e1       	ldi	r25, 0x1B	; 27
    8666:	0f 92       	push	r0
    8668:	0f 92       	push	r0
    866a:	ed b7       	in	r30, 0x3d	; 61
    866c:	fe b7       	in	r31, 0x3e	; 62
    866e:	31 96       	adiw	r30, 0x01	; 1
    8670:	80 83       	st	Z, r24
    8672:	91 83       	std	Z+1, r25	; 0x01
    8674:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    8678:	0f 90       	pop	r0
    867a:	0f 90       	pop	r0
			tg_reset_source();						// reset to default src
    867c:	0e 94 ff 43 	call	0x87fe	; 0x87fe <tg_reset_source>
			tg.state = TG_STATE_READY_UNPROMPTED;
    8680:	10 92 fb 21 	sts	0x21FB, r1
    8684:	02 c0       	rjmp	.+4      	; 0x868a <_tg_read_next_line+0x112>
			break;
		}
		default: {
			tg.state = TG_STATE_READY_UNPROMPTED;	// traps various error returns
    8686:	10 92 fb 21 	sts	0x21FB, r1
		}
	}
	return (TG_OK);
    868a:	80 e0       	ldi	r24, 0x00	; 0
    868c:	90 e0       	ldi	r25, 0x00	; 0
}
    868e:	0f 90       	pop	r0
    8690:	0f 90       	pop	r0
    8692:	cf 91       	pop	r28
    8694:	df 91       	pop	r29
    8696:	08 95       	ret

00008698 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    8698:	df 93       	push	r29
    869a:	cf 93       	push	r28
    869c:	cd b7       	in	r28, 0x3d	; 61
    869e:	de b7       	in	r29, 0x3e	; 62
    86a0:	28 97       	sbiw	r28, 0x08	; 8
    86a2:	cd bf       	out	0x3d, r28	; 61
    86a4:	de bf       	out	0x3e, r29	; 62
    86a6:	89 83       	std	Y+1, r24	; 0x01
    86a8:	9a 83       	std	Y+2, r25	; 0x02
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    86aa:	80 91 fd 21 	lds	r24, 0x21FD
    86ae:	88 23       	and	r24, r24
    86b0:	09 f0       	breq	.+2      	; 0x86b4 <tg_parser+0x1c>
    86b2:	52 c0       	rjmp	.+164    	; 0x8758 <tg_parser+0xc0>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    86b4:	e9 81       	ldd	r30, Y+1	; 0x01
    86b6:	fa 81       	ldd	r31, Y+2	; 0x02
    86b8:	80 81       	ld	r24, Z
    86ba:	81 36       	cpi	r24, 0x61	; 97
    86bc:	60 f0       	brcs	.+24     	; 0x86d6 <tg_parser+0x3e>
    86be:	e9 81       	ldd	r30, Y+1	; 0x01
    86c0:	fa 81       	ldd	r31, Y+2	; 0x02
    86c2:	80 81       	ld	r24, Z
    86c4:	8b 37       	cpi	r24, 0x7B	; 123
    86c6:	38 f4       	brcc	.+14     	; 0x86d6 <tg_parser+0x3e>
			buf[0] = buf[0]-'a'+'A';
    86c8:	e9 81       	ldd	r30, Y+1	; 0x01
    86ca:	fa 81       	ldd	r31, Y+2	; 0x02
    86cc:	80 81       	ld	r24, Z
    86ce:	80 52       	subi	r24, 0x20	; 32
    86d0:	e9 81       	ldd	r30, Y+1	; 0x01
    86d2:	fa 81       	ldd	r31, Y+2	; 0x02
    86d4:	80 83       	st	Z, r24
		}
		switch (buf[0]) {
    86d6:	e9 81       	ldd	r30, Y+1	; 0x01
    86d8:	fa 81       	ldd	r31, Y+2	; 0x02
    86da:	80 81       	ld	r24, Z
    86dc:	28 2f       	mov	r18, r24
    86de:	30 e0       	ldi	r19, 0x00	; 0
    86e0:	2f 83       	std	Y+7, r18	; 0x07
    86e2:	38 87       	std	Y+8, r19	; 0x08
    86e4:	8f 81       	ldd	r24, Y+7	; 0x07
    86e6:	98 85       	ldd	r25, Y+8	; 0x08
    86e8:	86 34       	cpi	r24, 0x46	; 70
    86ea:	91 05       	cpc	r25, r1
    86ec:	69 f1       	breq	.+90     	; 0x8748 <tg_parser+0xb0>
    86ee:	2f 81       	ldd	r18, Y+7	; 0x07
    86f0:	38 85       	ldd	r19, Y+8	; 0x08
    86f2:	27 34       	cpi	r18, 0x47	; 71
    86f4:	31 05       	cpc	r19, r1
    86f6:	84 f4       	brge	.+32     	; 0x8718 <tg_parser+0x80>
    86f8:	8f 81       	ldd	r24, Y+7	; 0x07
    86fa:	98 85       	ldd	r25, Y+8	; 0x08
    86fc:	83 34       	cpi	r24, 0x43	; 67
    86fe:	91 05       	cpc	r25, r1
    8700:	d9 f0       	breq	.+54     	; 0x8738 <tg_parser+0xa0>
    8702:	2f 81       	ldd	r18, Y+7	; 0x07
    8704:	38 85       	ldd	r19, Y+8	; 0x08
    8706:	24 34       	cpi	r18, 0x44	; 68
    8708:	31 05       	cpc	r19, r1
    870a:	d1 f0       	breq	.+52     	; 0x8740 <tg_parser+0xa8>
    870c:	8f 81       	ldd	r24, Y+7	; 0x07
    870e:	98 85       	ldd	r25, Y+8	; 0x08
    8710:	8f 33       	cpi	r24, 0x3F	; 63
    8712:	91 05       	cpc	r25, r1
    8714:	89 f0       	breq	.+34     	; 0x8738 <tg_parser+0xa0>
    8716:	1d c0       	rjmp	.+58     	; 0x8752 <tg_parser+0xba>
    8718:	2f 81       	ldd	r18, Y+7	; 0x07
    871a:	38 85       	ldd	r19, Y+8	; 0x08
    871c:	27 34       	cpi	r18, 0x47	; 71
    871e:	31 05       	cpc	r19, r1
    8720:	39 f0       	breq	.+14     	; 0x8730 <tg_parser+0x98>
    8722:	8f 81       	ldd	r24, Y+7	; 0x07
    8724:	98 85       	ldd	r25, Y+8	; 0x08
    8726:	8d 54       	subi	r24, 0x4D	; 77
    8728:	90 40       	sbci	r25, 0x00	; 0
    872a:	82 30       	cpi	r24, 0x02	; 2
    872c:	91 05       	cpc	r25, r1
    872e:	88 f4       	brcc	.+34     	; 0x8752 <tg_parser+0xba>
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    8730:	82 e0       	ldi	r24, 0x02	; 2
    8732:	0e 94 e5 43 	call	0x87ca	; 0x87ca <_tg_set_mode>
    8736:	10 c0       	rjmp	.+32     	; 0x8758 <tg_parser+0xc0>
			case 'C': case '?': _tg_set_mode(TG_CONFIG_MODE); break;
    8738:	81 e0       	ldi	r24, 0x01	; 1
    873a:	0e 94 e5 43 	call	0x87ca	; 0x87ca <_tg_set_mode>
    873e:	0c c0       	rjmp	.+24     	; 0x8758 <tg_parser+0xc0>
			case 'D': _tg_set_mode(TG_DIRECT_DRIVE_MODE); break;
    8740:	83 e0       	ldi	r24, 0x03	; 3
    8742:	0e 94 e5 43 	call	0x87ca	; 0x87ca <_tg_set_mode>
    8746:	08 c0       	rjmp	.+16     	; 0x8758 <tg_parser+0xc0>
			case 'F': return (_tg_test_file());
    8748:	0e 94 80 44 	call	0x8900	; 0x8900 <_tg_test_file>
    874c:	8d 83       	std	Y+5, r24	; 0x05
    874e:	9e 83       	std	Y+6, r25	; 0x06
    8750:	34 c0       	rjmp	.+104    	; 0x87ba <tg_parser+0x122>
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
    8752:	80 e0       	ldi	r24, 0x00	; 0
    8754:	0e 94 e5 43 	call	0x87ca	; 0x87ca <_tg_set_mode>
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    8758:	10 92 fc 21 	sts	0x21FC, r1
	switch (tg.mode) {
    875c:	80 91 fd 21 	lds	r24, 0x21FD
    8760:	28 2f       	mov	r18, r24
    8762:	30 e0       	ldi	r19, 0x00	; 0
    8764:	2b 83       	std	Y+3, r18	; 0x03
    8766:	3c 83       	std	Y+4, r19	; 0x04
    8768:	8b 81       	ldd	r24, Y+3	; 0x03
    876a:	9c 81       	ldd	r25, Y+4	; 0x04
    876c:	82 30       	cpi	r24, 0x02	; 2
    876e:	91 05       	cpc	r25, r1
    8770:	89 f0       	breq	.+34     	; 0x8794 <tg_parser+0xfc>
    8772:	2b 81       	ldd	r18, Y+3	; 0x03
    8774:	3c 81       	ldd	r19, Y+4	; 0x04
    8776:	23 30       	cpi	r18, 0x03	; 3
    8778:	31 05       	cpc	r19, r1
    877a:	99 f0       	breq	.+38     	; 0x87a2 <tg_parser+0x10a>
    877c:	8b 81       	ldd	r24, Y+3	; 0x03
    877e:	9c 81       	ldd	r25, Y+4	; 0x04
    8780:	81 30       	cpi	r24, 0x01	; 1
    8782:	91 05       	cpc	r25, r1
    8784:	a1 f4       	brne	.+40     	; 0x87ae <tg_parser+0x116>
		case TG_CONFIG_MODE: tg.status = cfg_parse(buf); break;
    8786:	89 81       	ldd	r24, Y+1	; 0x01
    8788:	9a 81       	ldd	r25, Y+2	; 0x02
    878a:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <cfg_parse>
    878e:	80 93 fc 21 	sts	0x21FC, r24
    8792:	0d c0       	rjmp	.+26     	; 0x87ae <tg_parser+0x116>
		case TG_GCODE_MODE: tg.status = gc_gcode_parser(buf); break;
    8794:	89 81       	ldd	r24, Y+1	; 0x01
    8796:	9a 81       	ldd	r25, Y+2	; 0x02
    8798:	0e 94 61 10 	call	0x20c2	; 0x20c2 <gc_gcode_parser>
    879c:	80 93 fc 21 	sts	0x21FC, r24
    87a0:	06 c0       	rjmp	.+12     	; 0x87ae <tg_parser+0x116>
		case TG_DIRECT_DRIVE_MODE: tg.status = dd_parser(buf); break;
    87a2:	89 81       	ldd	r24, Y+1	; 0x01
    87a4:	9a 81       	ldd	r25, Y+2	; 0x02
    87a6:	0e 94 9a 44 	call	0x8934	; 0x8934 <dd_parser>
    87aa:	80 93 fc 21 	sts	0x21FC, r24
	}
	return (tg.status);
    87ae:	80 91 fc 21 	lds	r24, 0x21FC
    87b2:	28 2f       	mov	r18, r24
    87b4:	30 e0       	ldi	r19, 0x00	; 0
    87b6:	2d 83       	std	Y+5, r18	; 0x05
    87b8:	3e 83       	std	Y+6, r19	; 0x06
    87ba:	8d 81       	ldd	r24, Y+5	; 0x05
    87bc:	9e 81       	ldd	r25, Y+6	; 0x06
}
    87be:	28 96       	adiw	r28, 0x08	; 8
    87c0:	cd bf       	out	0x3d, r28	; 61
    87c2:	de bf       	out	0x3e, r29	; 62
    87c4:	cf 91       	pop	r28
    87c6:	df 91       	pop	r29
    87c8:	08 95       	ret

000087ca <_tg_set_mode>:
/*
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
    87ca:	df 93       	push	r29
    87cc:	cf 93       	push	r28
    87ce:	0f 92       	push	r0
    87d0:	cd b7       	in	r28, 0x3d	; 61
    87d2:	de b7       	in	r29, 0x3e	; 62
    87d4:	89 83       	std	Y+1, r24	; 0x01
	tg.mode = mode;
    87d6:	89 81       	ldd	r24, Y+1	; 0x01
    87d8:	80 93 fd 21 	sts	0x21FD, r24
}
    87dc:	0f 90       	pop	r0
    87de:	cf 91       	pop	r28
    87e0:	df 91       	pop	r29
    87e2:	08 95       	ret

000087e4 <_tg_set_source>:
 *	expanded to also set the stdout/stderr console device so the prompt and
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
    87e4:	df 93       	push	r29
    87e6:	cf 93       	push	r28
    87e8:	0f 92       	push	r0
    87ea:	cd b7       	in	r28, 0x3d	; 61
    87ec:	de b7       	in	r29, 0x3e	; 62
    87ee:	89 83       	std	Y+1, r24	; 0x01
	tg.src = d;									// d = XIO device #. See xio.h
    87f0:	89 81       	ldd	r24, Y+1	; 0x01
    87f2:	80 93 fe 21 	sts	0x21FE, r24
}
    87f6:	0f 90       	pop	r0
    87f8:	cf 91       	pop	r28
    87fa:	df 91       	pop	r29
    87fc:	08 95       	ret

000087fe <tg_reset_source>:
/*
 * tg_reset_source()  Reset source to default input device
 */

void tg_reset_source()
{
    87fe:	df 93       	push	r29
    8800:	cf 93       	push	r28
    8802:	cd b7       	in	r28, 0x3d	; 61
    8804:	de b7       	in	r29, 0x3e	; 62
	_tg_set_source(tg.default_src);
    8806:	80 91 ff 21 	lds	r24, 0x21FF
    880a:	0e 94 f2 43 	call	0x87e4	; 0x87e4 <_tg_set_source>
}
    880e:	cf 91       	pop	r28
    8810:	df 91       	pop	r29
    8812:	08 95       	ret

00008814 <_tg_prompt>:
	tgModeStringGCode,
	tgModeStringDirect
};

void _tg_prompt()
{
    8814:	df 93       	push	r29
    8816:	cf 93       	push	r28
    8818:	cd b7       	in	r28, 0x3d	; 61
    881a:	de b7       	in	r29, 0x3e	; 62
    881c:	28 97       	sbiw	r28, 0x08	; 8
    881e:	cd bf       	out	0x3d, r28	; 61
    8820:	de bf       	out	0x3e, r29	; 62
	if (tg.state == TG_STATE_READY_UNPROMPTED) {
    8822:	80 91 fb 21 	lds	r24, 0x21FB
    8826:	88 23       	and	r24, r24
    8828:	09 f0       	breq	.+2      	; 0x882c <_tg_prompt+0x18>
    882a:	64 c0       	rjmp	.+200    	; 0x88f4 <_tg_prompt+0xe0>
		if (tg.dev[tg.src].flags && XIO_FLAG_ASTERISK_bm) {
    882c:	80 91 fe 21 	lds	r24, 0x21FE
    8830:	28 2f       	mov	r18, r24
    8832:	30 e0       	ldi	r19, 0x00	; 0
    8834:	82 e5       	ldi	r24, 0x52	; 82
    8836:	90 e0       	ldi	r25, 0x00	; 0
    8838:	ac 01       	movw	r20, r24
    883a:	24 9f       	mul	r18, r20
    883c:	c0 01       	movw	r24, r0
    883e:	25 9f       	mul	r18, r21
    8840:	90 0d       	add	r25, r0
    8842:	34 9f       	mul	r19, r20
    8844:	90 0d       	add	r25, r0
    8846:	11 24       	eor	r1, r1
    8848:	fc 01       	movw	r30, r24
    884a:	ef 5f       	subi	r30, 0xFF	; 255
    884c:	fd 4d       	sbci	r31, 0xDD	; 221
    884e:	80 81       	ld	r24, Z
    8850:	88 23       	and	r24, r24
    8852:	39 f1       	breq	.+78     	; 0x88a2 <_tg_prompt+0x8e>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    8854:	28 ef       	ldi	r18, 0xF8	; 248
    8856:	3b e1       	ldi	r19, 0x1B	; 27
    8858:	80 91 fd 21 	lds	r24, 0x21FD
    885c:	88 2f       	mov	r24, r24
    885e:	90 e0       	ldi	r25, 0x00	; 0
    8860:	88 0f       	add	r24, r24
    8862:	99 1f       	adc	r25, r25
    8864:	8d 51       	subi	r24, 0x1D	; 29
    8866:	94 4e       	sbci	r25, 0xE4	; 228
    8868:	8f 83       	std	Y+7, r24	; 0x07
    886a:	98 87       	std	Y+8, r25	; 0x08
    886c:	8f 81       	ldd	r24, Y+7	; 0x07
    886e:	98 85       	ldd	r25, Y+8	; 0x08
    8870:	fc 01       	movw	r30, r24
    8872:	85 91       	lpm	r24, Z+
    8874:	94 91       	lpm	r25, Z+
    8876:	8d 83       	std	Y+5, r24	; 0x05
    8878:	9e 83       	std	Y+6, r25	; 0x06
    887a:	ef 83       	std	Y+7, r30	; 0x07
    887c:	f8 87       	std	Y+8, r31	; 0x08
    887e:	8d 81       	ldd	r24, Y+5	; 0x05
    8880:	9e 81       	ldd	r25, Y+6	; 0x06
    8882:	00 d0       	rcall	.+0      	; 0x8884 <_tg_prompt+0x70>
    8884:	0f 92       	push	r0
    8886:	ed b7       	in	r30, 0x3d	; 61
    8888:	fe b7       	in	r31, 0x3e	; 62
    888a:	31 96       	adiw	r30, 0x01	; 1
    888c:	20 83       	st	Z, r18
    888e:	31 83       	std	Z+1, r19	; 0x01
    8890:	82 83       	std	Z+2, r24	; 0x02
    8892:	93 83       	std	Z+3, r25	; 0x03
    8894:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    8898:	0f 90       	pop	r0
    889a:	0f 90       	pop	r0
    889c:	0f 90       	pop	r0
    889e:	0f 90       	pop	r0
    88a0:	26 c0       	rjmp	.+76     	; 0x88ee <_tg_prompt+0xda>
		} else {
			printf_P(PSTR("TinyG [%S]> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    88a2:	2b ee       	ldi	r18, 0xEB	; 235
    88a4:	3b e1       	ldi	r19, 0x1B	; 27
    88a6:	80 91 fd 21 	lds	r24, 0x21FD
    88aa:	88 2f       	mov	r24, r24
    88ac:	90 e0       	ldi	r25, 0x00	; 0
    88ae:	88 0f       	add	r24, r24
    88b0:	99 1f       	adc	r25, r25
    88b2:	8d 51       	subi	r24, 0x1D	; 29
    88b4:	94 4e       	sbci	r25, 0xE4	; 228
    88b6:	8b 83       	std	Y+3, r24	; 0x03
    88b8:	9c 83       	std	Y+4, r25	; 0x04
    88ba:	8b 81       	ldd	r24, Y+3	; 0x03
    88bc:	9c 81       	ldd	r25, Y+4	; 0x04
    88be:	fc 01       	movw	r30, r24
    88c0:	85 91       	lpm	r24, Z+
    88c2:	94 91       	lpm	r25, Z+
    88c4:	89 83       	std	Y+1, r24	; 0x01
    88c6:	9a 83       	std	Y+2, r25	; 0x02
    88c8:	eb 83       	std	Y+3, r30	; 0x03
    88ca:	fc 83       	std	Y+4, r31	; 0x04
    88cc:	89 81       	ldd	r24, Y+1	; 0x01
    88ce:	9a 81       	ldd	r25, Y+2	; 0x02
    88d0:	00 d0       	rcall	.+0      	; 0x88d2 <_tg_prompt+0xbe>
    88d2:	0f 92       	push	r0
    88d4:	ed b7       	in	r30, 0x3d	; 61
    88d6:	fe b7       	in	r31, 0x3e	; 62
    88d8:	31 96       	adiw	r30, 0x01	; 1
    88da:	20 83       	st	Z, r18
    88dc:	31 83       	std	Z+1, r19	; 0x01
    88de:	82 83       	std	Z+2, r24	; 0x02
    88e0:	93 83       	std	Z+3, r25	; 0x03
    88e2:	0e 94 5f 62 	call	0xc4be	; 0xc4be <printf_P>
    88e6:	0f 90       	pop	r0
    88e8:	0f 90       	pop	r0
    88ea:	0f 90       	pop	r0
    88ec:	0f 90       	pop	r0
		}
		tg.state = TG_STATE_READY_PROMPTED;
    88ee:	81 e0       	ldi	r24, 0x01	; 1
    88f0:	80 93 fb 21 	sts	0x21FB, r24
	}
}
    88f4:	28 96       	adiw	r28, 0x08	; 8
    88f6:	cd bf       	out	0x3d, r28	; 61
    88f8:	de bf       	out	0x3e, r29	; 62
    88fa:	cf 91       	pop	r28
    88fc:	df 91       	pop	r29
    88fe:	08 95       	ret

00008900 <_tg_test_file>:
 * This is a shoirtcut for now. Ultimately the file handle, mode and device 
 * should be provided as args.
 */

int _tg_test_file()
{
    8900:	df 93       	push	r29
    8902:	cf 93       	push	r28
    8904:	cd b7       	in	r28, 0x3d	; 61
    8906:	de b7       	in	r29, 0x3e	; 62
//	xio_pgm_open(PGMFILE(&circle_test10));
//	xio_pgm_open(PGMFILE(&square_circle_test10));
//	xio_pgm_open(PGMFILE(&square_circle_test100));
//	xio_pgm_open(PGMFILE(&spiral_test50a));
//	xio_pgm_open(PGMFILE(&spiral_test5));
	xio_pgm_open(PGMFILE(&dwell_test2));
    8908:	82 ea       	ldi	r24, 0xA2	; 162
    890a:	9c e0       	ldi	r25, 0x0C	; 12
    890c:	0e 94 a4 40 	call	0x8148	; 0x8148 <xio_pgm_open>

//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
//	xio_pgm_open(PGMFILE(&zoetrope));

	// set mode and source for file mode
	_tg_set_mode(TG_GCODE_MODE);
    8910:	82 e0       	ldi	r24, 0x02	; 2
    8912:	0e 94 e5 43 	call	0x87ca	; 0x87ca <_tg_set_mode>
	_tg_set_source(XIO_DEV_PGM);
    8916:	84 e0       	ldi	r24, 0x04	; 4
    8918:	0e 94 f2 43 	call	0x87e4	; 0x87e4 <_tg_set_source>
	return (TG_OK);
    891c:	80 e0       	ldi	r24, 0x00	; 0
    891e:	90 e0       	ldi	r25, 0x00	; 0
}
    8920:	cf 91       	pop	r28
    8922:	df 91       	pop	r29
    8924:	08 95       	ret

00008926 <dd_init>:
/* 
 * dd_init() - initialize direct drive system 
 */

void dd_init() 
{
    8926:	df 93       	push	r29
    8928:	cf 93       	push	r28
    892a:	cd b7       	in	r28, 0x3d	; 61
    892c:	de b7       	in	r29, 0x3e	; 62
//	cfg_reset();
}
    892e:	cf 91       	pop	r28
    8930:	df 91       	pop	r29
    8932:	08 95       	ret

00008934 <dd_parser>:
/* 
 * dd_parser() - parse a direct drive command 
 */

int dd_parser(char *text)
{
    8934:	df 93       	push	r29
    8936:	cf 93       	push	r28
    8938:	0f 92       	push	r0
    893a:	0f 92       	push	r0
    893c:	cd b7       	in	r28, 0x3d	; 61
    893e:	de b7       	in	r29, 0x3e	; 62
    8940:	89 83       	std	Y+1, r24	; 0x01
    8942:	9a 83       	std	Y+2, r25	; 0x02
				CFG(axis).limit_enable = (uint8_t)atoi(val); return(0);
			}
		default: return (1);	// error
	}
*/
	return (0);
    8944:	80 e0       	ldi	r24, 0x00	; 0
    8946:	90 e0       	ldi	r25, 0x00	; 0
}
    8948:	0f 90       	pop	r0
    894a:	0f 90       	pop	r0
    894c:	cf 91       	pop	r28
    894e:	df 91       	pop	r29
    8950:	08 95       	ret

00008952 <mv_init>:
/* 
 * mv_init() - initialize move buffers
 */

void mv_init()
{
    8952:	df 93       	push	r29
    8954:	cf 93       	push	r28
    8956:	cd b7       	in	r28, 0x3d	; 61
    8958:	de b7       	in	r29, 0x3e	; 62
	mv.move_buffer_head = 0;
    895a:	10 92 9b 23 	sts	0x239B, r1
	mv.move_buffer_tail = 0;
    895e:	10 92 9c 23 	sts	0x239C, r1
}
    8962:	cf 91       	pop	r28
    8964:	df 91       	pop	r29
    8966:	08 95       	ret

00008968 <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    8968:	2f 92       	push	r2
    896a:	3f 92       	push	r3
    896c:	4f 92       	push	r4
    896e:	5f 92       	push	r5
    8970:	6f 92       	push	r6
    8972:	7f 92       	push	r7
    8974:	8f 92       	push	r8
    8976:	9f 92       	push	r9
    8978:	af 92       	push	r10
    897a:	bf 92       	push	r11
    897c:	cf 92       	push	r12
    897e:	df 92       	push	r13
    8980:	ef 92       	push	r14
    8982:	ff 92       	push	r15
    8984:	0f 93       	push	r16
    8986:	1f 93       	push	r17
    8988:	df 93       	push	r29
    898a:	cf 93       	push	r28
    898c:	cd b7       	in	r28, 0x3d	; 61
    898e:	de b7       	in	r29, 0x3e	; 62
    8990:	a7 97       	sbiw	r28, 0x27	; 39
    8992:	cd bf       	out	0x3d, r28	; 61
    8994:	de bf       	out	0x3e, r29	; 62
    8996:	6f 87       	std	Y+15, r22	; 0x0f
    8998:	78 8b       	std	Y+16, r23	; 0x10
    899a:	89 8b       	std	Y+17, r24	; 0x11
    899c:	9a 8b       	std	Y+18, r25	; 0x12
    899e:	2b 8b       	std	Y+19, r18	; 0x13
    89a0:	3c 8b       	std	Y+20, r19	; 0x14
    89a2:	4d 8b       	std	Y+21, r20	; 0x15
    89a4:	5e 8b       	std	Y+22, r21	; 0x16
    89a6:	ef 8a       	std	Y+23, r14	; 0x17
    89a8:	f8 8e       	std	Y+24, r15	; 0x18
    89aa:	09 8f       	std	Y+25, r16	; 0x19
    89ac:	1a 8f       	std	Y+26, r17	; 0x1a
    89ae:	ab 8e       	std	Y+27, r10	; 0x1b
    89b0:	bc 8e       	std	Y+28, r11	; 0x1c
    89b2:	cd 8e       	std	Y+29, r12	; 0x1d
    89b4:	de 8e       	std	Y+30, r13	; 0x1e
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    89b6:	80 91 9b 23 	lds	r24, 0x239B
    89ba:	8f 5f       	subi	r24, 0xFF	; 255
    89bc:	8e 87       	std	Y+14, r24	; 0x0e
    89be:	8e 85       	ldd	r24, Y+14	; 0x0e
    89c0:	83 30       	cpi	r24, 0x03	; 3
    89c2:	08 f0       	brcs	.+2      	; 0x89c6 <mv_queue_move_buffer+0x5e>
		next_buffer_head = 0;					 // wrap condition
    89c4:	1e 86       	std	Y+14, r1	; 0x0e
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    89c6:	90 91 9c 23 	lds	r25, 0x239C
    89ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    89cc:	98 17       	cp	r25, r24
    89ce:	19 f4       	brne	.+6      	; 0x89d6 <mv_queue_move_buffer+0x6e>
		return (TG_BUFFER_FULL);
    89d0:	27 e0       	ldi	r18, 0x07	; 7
    89d2:	2f a3       	std	Y+39, r18	; 0x27
    89d4:	8e c2       	rjmp	.+1308   	; 0x8ef2 <mv_queue_move_buffer+0x58a>
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    89d6:	80 91 9b 23 	lds	r24, 0x239B
    89da:	28 2f       	mov	r18, r24
    89dc:	30 e0       	ldi	r19, 0x00	; 0
    89de:	c9 01       	movw	r24, r18
    89e0:	88 0f       	add	r24, r24
    89e2:	99 1f       	adc	r25, r25
    89e4:	82 0f       	add	r24, r18
    89e6:	93 1f       	adc	r25, r19
    89e8:	9c 01       	movw	r18, r24
    89ea:	22 0f       	add	r18, r18
    89ec:	33 1f       	adc	r19, r19
    89ee:	22 0f       	add	r18, r18
    89f0:	33 1f       	adc	r19, r19
    89f2:	82 0f       	add	r24, r18
    89f4:	93 1f       	adc	r25, r19
    89f6:	88 0f       	add	r24, r24
    89f8:	99 1f       	adc	r25, r25
    89fa:	81 56       	subi	r24, 0x61	; 97
    89fc:	9c 4d       	sbci	r25, 0xDC	; 220
    89fe:	80 93 9d 23 	sts	0x239D, r24
    8a02:	90 93 9e 23 	sts	0x239E, r25
	memset(mv.p, 0, sizeof(struct mvMove));
    8a06:	80 91 9d 23 	lds	r24, 0x239D
    8a0a:	90 91 9e 23 	lds	r25, 0x239E
    8a0e:	60 e0       	ldi	r22, 0x00	; 0
    8a10:	70 e0       	ldi	r23, 0x00	; 0
    8a12:	4e e1       	ldi	r20, 0x1E	; 30
    8a14:	50 e0       	ldi	r21, 0x00	; 0
    8a16:	0e 94 e1 61 	call	0xc3c2	; 0xc3c2 <memset>
	mv.p->a[X].steps = steps_x;
    8a1a:	e0 91 9d 23 	lds	r30, 0x239D
    8a1e:	f0 91 9e 23 	lds	r31, 0x239E
    8a22:	8f 85       	ldd	r24, Y+15	; 0x0f
    8a24:	98 89       	ldd	r25, Y+16	; 0x10
    8a26:	a9 89       	ldd	r26, Y+17	; 0x11
    8a28:	ba 89       	ldd	r27, Y+18	; 0x12
    8a2a:	80 83       	st	Z, r24
    8a2c:	91 83       	std	Z+1, r25	; 0x01
    8a2e:	a2 83       	std	Z+2, r26	; 0x02
    8a30:	b3 83       	std	Z+3, r27	; 0x03
	mv.p->a[Y].steps = steps_y;
    8a32:	e0 91 9d 23 	lds	r30, 0x239D
    8a36:	f0 91 9e 23 	lds	r31, 0x239E
    8a3a:	8b 89       	ldd	r24, Y+19	; 0x13
    8a3c:	9c 89       	ldd	r25, Y+20	; 0x14
    8a3e:	ad 89       	ldd	r26, Y+21	; 0x15
    8a40:	be 89       	ldd	r27, Y+22	; 0x16
    8a42:	82 87       	std	Z+10, r24	; 0x0a
    8a44:	93 87       	std	Z+11, r25	; 0x0b
    8a46:	a4 87       	std	Z+12, r26	; 0x0c
    8a48:	b5 87       	std	Z+13, r27	; 0x0d
	mv.p->a[Z].steps = steps_z;
    8a4a:	e0 91 9d 23 	lds	r30, 0x239D
    8a4e:	f0 91 9e 23 	lds	r31, 0x239E
    8a52:	8f 89       	ldd	r24, Y+23	; 0x17
    8a54:	98 8d       	ldd	r25, Y+24	; 0x18
    8a56:	a9 8d       	ldd	r26, Y+25	; 0x19
    8a58:	ba 8d       	ldd	r27, Y+26	; 0x1a
    8a5a:	84 8b       	std	Z+20, r24	; 0x14
    8a5c:	95 8b       	std	Z+21, r25	; 0x15
    8a5e:	a6 8b       	std	Z+22, r26	; 0x16
    8a60:	b7 8b       	std	Z+23, r27	; 0x17
	ticks = microseconds * TICKS_PER_MICROSECOND;
    8a62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8a64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8a66:	ad 8d       	ldd	r26, Y+29	; 0x1d
    8a68:	be 8d       	ldd	r27, Y+30	; 0x1e
    8a6a:	88 0f       	add	r24, r24
    8a6c:	99 1f       	adc	r25, r25
    8a6e:	aa 1f       	adc	r26, r26
    8a70:	bb 1f       	adc	r27, r27
    8a72:	88 0f       	add	r24, r24
    8a74:	99 1f       	adc	r25, r25
    8a76:	aa 1f       	adc	r26, r26
    8a78:	bb 1f       	adc	r27, r27
    8a7a:	88 0f       	add	r24, r24
    8a7c:	99 1f       	adc	r25, r25
    8a7e:	aa 1f       	adc	r26, r26
    8a80:	bb 1f       	adc	r27, r27
    8a82:	88 0f       	add	r24, r24
    8a84:	99 1f       	adc	r25, r25
    8a86:	aa 1f       	adc	r26, r26
    8a88:	bb 1f       	adc	r27, r27
    8a8a:	88 0f       	add	r24, r24
    8a8c:	99 1f       	adc	r25, r25
    8a8e:	aa 1f       	adc	r26, r26
    8a90:	bb 1f       	adc	r27, r27
    8a92:	9c 01       	movw	r18, r24
    8a94:	ad 01       	movw	r20, r26
    8a96:	60 e0       	ldi	r22, 0x00	; 0
    8a98:	70 e0       	ldi	r23, 0x00	; 0
    8a9a:	80 e0       	ldi	r24, 0x00	; 0
    8a9c:	90 e0       	ldi	r25, 0x00	; 0
    8a9e:	2d 83       	std	Y+5, r18	; 0x05
    8aa0:	3e 83       	std	Y+6, r19	; 0x06
    8aa2:	4f 83       	std	Y+7, r20	; 0x07
    8aa4:	58 87       	std	Y+8, r21	; 0x08
    8aa6:	69 87       	std	Y+9, r22	; 0x09
    8aa8:	7a 87       	std	Y+10, r23	; 0x0a
    8aaa:	8b 87       	std	Y+11, r24	; 0x0b
    8aac:	9c 87       	std	Y+12, r25	; 0x0c

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    8aae:	8f 85       	ldd	r24, Y+15	; 0x0f
    8ab0:	98 89       	ldd	r25, Y+16	; 0x10
    8ab2:	a9 89       	ldd	r26, Y+17	; 0x11
    8ab4:	ba 89       	ldd	r27, Y+18	; 0x12
    8ab6:	00 97       	sbiw	r24, 0x00	; 0
    8ab8:	a1 05       	cpc	r26, r1
    8aba:	b1 05       	cpc	r27, r1
    8abc:	09 f0       	breq	.+2      	; 0x8ac0 <mv_queue_move_buffer+0x158>
    8abe:	96 c0       	rjmp	.+300    	; 0x8bec <mv_queue_move_buffer+0x284>
    8ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    8ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    8ac4:	ad 89       	ldd	r26, Y+21	; 0x15
    8ac6:	be 89       	ldd	r27, Y+22	; 0x16
    8ac8:	00 97       	sbiw	r24, 0x00	; 0
    8aca:	a1 05       	cpc	r26, r1
    8acc:	b1 05       	cpc	r27, r1
    8ace:	09 f0       	breq	.+2      	; 0x8ad2 <mv_queue_move_buffer+0x16a>
    8ad0:	8d c0       	rjmp	.+282    	; 0x8bec <mv_queue_move_buffer+0x284>
    8ad2:	8f 89       	ldd	r24, Y+23	; 0x17
    8ad4:	98 8d       	ldd	r25, Y+24	; 0x18
    8ad6:	a9 8d       	ldd	r26, Y+25	; 0x19
    8ad8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    8ada:	00 97       	sbiw	r24, 0x00	; 0
    8adc:	a1 05       	cpc	r26, r1
    8ade:	b1 05       	cpc	r27, r1
    8ae0:	09 f0       	breq	.+2      	; 0x8ae4 <mv_queue_move_buffer+0x17c>
    8ae2:	84 c0       	rjmp	.+264    	; 0x8bec <mv_queue_move_buffer+0x284>
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    8ae4:	e0 91 9d 23 	lds	r30, 0x239D
    8ae8:	f0 91 9e 23 	lds	r31, 0x239E
    8aec:	81 e0       	ldi	r24, 0x01	; 1
    8aee:	90 e0       	ldi	r25, 0x00	; 0
    8af0:	a0 e0       	ldi	r26, 0x00	; 0
    8af2:	b0 e0       	ldi	r27, 0x00	; 0
    8af4:	80 83       	st	Z, r24
    8af6:	91 83       	std	Z+1, r25	; 0x01
    8af8:	a2 83       	std	Z+2, r26	; 0x02
    8afa:	b3 83       	std	Z+3, r27	; 0x03
		mv.p->a[X].postscale = 1;
    8afc:	e0 91 9d 23 	lds	r30, 0x239D
    8b00:	f0 91 9e 23 	lds	r31, 0x239E
    8b04:	81 e0       	ldi	r24, 0x01	; 1
    8b06:	90 e0       	ldi	r25, 0x00	; 0
    8b08:	86 83       	std	Z+6, r24	; 0x06
    8b0a:	97 83       	std	Z+7, r25	; 0x07
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
    8b0c:	e0 91 9d 23 	lds	r30, 0x239D
    8b10:	f0 91 9e 23 	lds	r31, 0x239E
    8b14:	20 81       	ld	r18, Z
    8b16:	31 81       	ldd	r19, Z+1	; 0x01
    8b18:	42 81       	ldd	r20, Z+2	; 0x02
    8b1a:	53 81       	ldd	r21, Z+3	; 0x03
    8b1c:	da 01       	movw	r26, r20
    8b1e:	c9 01       	movw	r24, r18
    8b20:	bb 0f       	add	r27, r27
    8b22:	88 0b       	sbc	r24, r24
    8b24:	98 2f       	mov	r25, r24
    8b26:	dc 01       	movw	r26, r24
    8b28:	19 01       	movw	r2, r18
    8b2a:	2a 01       	movw	r4, r20
    8b2c:	68 2e       	mov	r6, r24
    8b2e:	78 2e       	mov	r7, r24
    8b30:	88 2e       	mov	r8, r24
    8b32:	98 2e       	mov	r9, r24
    8b34:	2d 81       	ldd	r18, Y+5	; 0x05
    8b36:	3e 81       	ldd	r19, Y+6	; 0x06
    8b38:	4f 81       	ldd	r20, Y+7	; 0x07
    8b3a:	58 85       	ldd	r21, Y+8	; 0x08
    8b3c:	69 85       	ldd	r22, Y+9	; 0x09
    8b3e:	7a 85       	ldd	r23, Y+10	; 0x0a
    8b40:	8b 85       	ldd	r24, Y+11	; 0x0b
    8b42:	9c 85       	ldd	r25, Y+12	; 0x0c
    8b44:	a2 2c       	mov	r10, r2
    8b46:	b3 2c       	mov	r11, r3
    8b48:	c4 2c       	mov	r12, r4
    8b4a:	d5 2c       	mov	r13, r5
    8b4c:	e6 2c       	mov	r14, r6
    8b4e:	f7 2c       	mov	r15, r7
    8b50:	08 2d       	mov	r16, r8
    8b52:	19 2d       	mov	r17, r9
    8b54:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <__udivdi3>
    8b58:	a2 2e       	mov	r10, r18
    8b5a:	b3 2e       	mov	r11, r19
    8b5c:	c4 2e       	mov	r12, r20
    8b5e:	d5 2e       	mov	r13, r21
    8b60:	e6 2e       	mov	r14, r22
    8b62:	f7 2e       	mov	r15, r23
    8b64:	08 2f       	mov	r16, r24
    8b66:	19 2f       	mov	r17, r25
    8b68:	2a 2d       	mov	r18, r10
    8b6a:	3b 2d       	mov	r19, r11
    8b6c:	4c 2d       	mov	r20, r12
    8b6e:	5d 2d       	mov	r21, r13
    8b70:	6e 2d       	mov	r22, r14
    8b72:	7f 2d       	mov	r23, r15
    8b74:	80 2f       	mov	r24, r16
    8b76:	91 2f       	mov	r25, r17
    8b78:	29 83       	std	Y+1, r18	; 0x01
    8b7a:	3a 83       	std	Y+2, r19	; 0x02
    8b7c:	4b 83       	std	Y+3, r20	; 0x03
    8b7e:	5c 83       	std	Y+4, r21	; 0x04
    8b80:	1c c0       	rjmp	.+56     	; 0x8bba <mv_queue_move_buffer+0x252>
		while (ticks_per_step & 0xFFFF0000) {
			ticks_per_step >>= 1;
    8b82:	89 81       	ldd	r24, Y+1	; 0x01
    8b84:	9a 81       	ldd	r25, Y+2	; 0x02
    8b86:	ab 81       	ldd	r26, Y+3	; 0x03
    8b88:	bc 81       	ldd	r27, Y+4	; 0x04
    8b8a:	b6 95       	lsr	r27
    8b8c:	a7 95       	ror	r26
    8b8e:	97 95       	ror	r25
    8b90:	87 95       	ror	r24
    8b92:	89 83       	std	Y+1, r24	; 0x01
    8b94:	9a 83       	std	Y+2, r25	; 0x02
    8b96:	ab 83       	std	Y+3, r26	; 0x03
    8b98:	bc 83       	std	Y+4, r27	; 0x04
			mv.p->a[X].postscale <<= 1;
    8b9a:	a0 91 9d 23 	lds	r26, 0x239D
    8b9e:	b0 91 9e 23 	lds	r27, 0x239E
    8ba2:	e0 91 9d 23 	lds	r30, 0x239D
    8ba6:	f0 91 9e 23 	lds	r31, 0x239E
    8baa:	86 81       	ldd	r24, Z+6	; 0x06
    8bac:	97 81       	ldd	r25, Z+7	; 0x07
    8bae:	88 0f       	add	r24, r24
    8bb0:	99 1f       	adc	r25, r25
    8bb2:	16 96       	adiw	r26, 0x06	; 6
    8bb4:	8d 93       	st	X+, r24
    8bb6:	9c 93       	st	X, r25
    8bb8:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
		while (ticks_per_step & 0xFFFF0000) {
    8bba:	89 81       	ldd	r24, Y+1	; 0x01
    8bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    8bbe:	ab 81       	ldd	r26, Y+3	; 0x03
    8bc0:	bc 81       	ldd	r27, Y+4	; 0x04
    8bc2:	80 70       	andi	r24, 0x00	; 0
    8bc4:	90 70       	andi	r25, 0x00	; 0
    8bc6:	00 97       	sbiw	r24, 0x00	; 0
    8bc8:	a1 05       	cpc	r26, r1
    8bca:	b1 05       	cpc	r27, r1
    8bcc:	d1 f6       	brne	.-76     	; 0x8b82 <mv_queue_move_buffer+0x21a>
			ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    8bce:	e0 91 9d 23 	lds	r30, 0x239D
    8bd2:	f0 91 9e 23 	lds	r31, 0x239E
    8bd6:	89 81       	ldd	r24, Y+1	; 0x01
    8bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    8bda:	84 83       	std	Z+4, r24	; 0x04
    8bdc:	95 83       	std	Z+5, r25	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    8bde:	e0 91 9d 23 	lds	r30, 0x239D
    8be2:	f0 91 9e 23 	lds	r31, 0x239E
    8be6:	81 e0       	ldi	r24, 0x01	; 1
    8be8:	81 87       	std	Z+9, r24	; 0x09
    8bea:	7d c1       	rjmp	.+762    	; 0x8ee6 <mv_queue_move_buffer+0x57e>

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    8bec:	1d 86       	std	Y+13, r1	; 0x0d
    8bee:	77 c1       	rjmp	.+750    	; 0x8ede <mv_queue_move_buffer+0x576>
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    8bf0:	40 91 9d 23 	lds	r20, 0x239D
    8bf4:	50 91 9e 23 	lds	r21, 0x239E
    8bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    8bfa:	88 2f       	mov	r24, r24
    8bfc:	90 e0       	ldi	r25, 0x00	; 0
    8bfe:	88 0f       	add	r24, r24
    8c00:	99 1f       	adc	r25, r25
    8c02:	9c 01       	movw	r18, r24
    8c04:	22 0f       	add	r18, r18
    8c06:	33 1f       	adc	r19, r19
    8c08:	22 0f       	add	r18, r18
    8c0a:	33 1f       	adc	r19, r19
    8c0c:	82 0f       	add	r24, r18
    8c0e:	93 1f       	adc	r25, r19
    8c10:	fa 01       	movw	r30, r20
    8c12:	e8 0f       	add	r30, r24
    8c14:	f9 1f       	adc	r31, r25
    8c16:	80 81       	ld	r24, Z
    8c18:	91 81       	ldd	r25, Z+1	; 0x01
    8c1a:	a2 81       	ldd	r26, Z+2	; 0x02
    8c1c:	b3 81       	ldd	r27, Z+3	; 0x03
    8c1e:	00 97       	sbiw	r24, 0x00	; 0
    8c20:	a1 05       	cpc	r26, r1
    8c22:	b1 05       	cpc	r27, r1
    8c24:	09 f4       	brne	.+2      	; 0x8c28 <mv_queue_move_buffer+0x2c0>
    8c26:	58 c1       	rjmp	.+688    	; 0x8ed8 <mv_queue_move_buffer+0x570>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    8c28:	40 91 9d 23 	lds	r20, 0x239D
    8c2c:	50 91 9e 23 	lds	r21, 0x239E
    8c30:	8d 85       	ldd	r24, Y+13	; 0x0d
    8c32:	88 2f       	mov	r24, r24
    8c34:	90 e0       	ldi	r25, 0x00	; 0
    8c36:	88 0f       	add	r24, r24
    8c38:	99 1f       	adc	r25, r25
    8c3a:	9c 01       	movw	r18, r24
    8c3c:	22 0f       	add	r18, r18
    8c3e:	33 1f       	adc	r19, r19
    8c40:	22 0f       	add	r18, r18
    8c42:	33 1f       	adc	r19, r19
    8c44:	82 0f       	add	r24, r18
    8c46:	93 1f       	adc	r25, r19
    8c48:	fa 01       	movw	r30, r20
    8c4a:	e8 0f       	add	r30, r24
    8c4c:	f9 1f       	adc	r31, r25
    8c4e:	80 81       	ld	r24, Z
    8c50:	91 81       	ldd	r25, Z+1	; 0x01
    8c52:	a2 81       	ldd	r26, Z+2	; 0x02
    8c54:	b3 81       	ldd	r27, Z+3	; 0x03
    8c56:	bb 23       	and	r27, r27
    8c58:	bc f4       	brge	.+46     	; 0x8c88 <mv_queue_move_buffer+0x320>
    8c5a:	40 91 9d 23 	lds	r20, 0x239D
    8c5e:	50 91 9e 23 	lds	r21, 0x239E
    8c62:	8d 85       	ldd	r24, Y+13	; 0x0d
    8c64:	88 2f       	mov	r24, r24
    8c66:	90 e0       	ldi	r25, 0x00	; 0
    8c68:	88 0f       	add	r24, r24
    8c6a:	99 1f       	adc	r25, r25
    8c6c:	9c 01       	movw	r18, r24
    8c6e:	22 0f       	add	r18, r18
    8c70:	33 1f       	adc	r19, r19
    8c72:	22 0f       	add	r18, r18
    8c74:	33 1f       	adc	r19, r19
    8c76:	82 0f       	add	r24, r18
    8c78:	93 1f       	adc	r25, r19
    8c7a:	84 0f       	add	r24, r20
    8c7c:	95 1f       	adc	r25, r21
    8c7e:	fc 01       	movw	r30, r24
    8c80:	38 96       	adiw	r30, 0x08	; 8
    8c82:	81 e0       	ldi	r24, 0x01	; 1
    8c84:	80 83       	st	Z, r24
    8c86:	15 c0       	rjmp	.+42     	; 0x8cb2 <mv_queue_move_buffer+0x34a>
    8c88:	40 91 9d 23 	lds	r20, 0x239D
    8c8c:	50 91 9e 23 	lds	r21, 0x239E
    8c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    8c92:	88 2f       	mov	r24, r24
    8c94:	90 e0       	ldi	r25, 0x00	; 0
    8c96:	88 0f       	add	r24, r24
    8c98:	99 1f       	adc	r25, r25
    8c9a:	9c 01       	movw	r18, r24
    8c9c:	22 0f       	add	r18, r18
    8c9e:	33 1f       	adc	r19, r19
    8ca0:	22 0f       	add	r18, r18
    8ca2:	33 1f       	adc	r19, r19
    8ca4:	82 0f       	add	r24, r18
    8ca6:	93 1f       	adc	r25, r19
    8ca8:	84 0f       	add	r24, r20
    8caa:	95 1f       	adc	r25, r21
    8cac:	fc 01       	movw	r30, r24
    8cae:	38 96       	adiw	r30, 0x08	; 8
    8cb0:	10 82       	st	Z, r1
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    8cb2:	80 91 9d 23 	lds	r24, 0x239D
    8cb6:	90 91 9e 23 	lds	r25, 0x239E
    8cba:	8d a3       	std	Y+37, r24	; 0x25
    8cbc:	9e a3       	std	Y+38, r25	; 0x26
    8cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    8cc0:	a8 2f       	mov	r26, r24
    8cc2:	b0 e0       	ldi	r27, 0x00	; 0
    8cc4:	ab a3       	std	Y+35, r26	; 0x23
    8cc6:	bc a3       	std	Y+36, r27	; 0x24
    8cc8:	40 91 9d 23 	lds	r20, 0x239D
    8ccc:	50 91 9e 23 	lds	r21, 0x239E
    8cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    8cd2:	88 2f       	mov	r24, r24
    8cd4:	90 e0       	ldi	r25, 0x00	; 0
    8cd6:	88 0f       	add	r24, r24
    8cd8:	99 1f       	adc	r25, r25
    8cda:	9c 01       	movw	r18, r24
    8cdc:	22 0f       	add	r18, r18
    8cde:	33 1f       	adc	r19, r19
    8ce0:	22 0f       	add	r18, r18
    8ce2:	33 1f       	adc	r19, r19
    8ce4:	82 0f       	add	r24, r18
    8ce6:	93 1f       	adc	r25, r19
    8ce8:	fa 01       	movw	r30, r20
    8cea:	e8 0f       	add	r30, r24
    8cec:	f9 1f       	adc	r31, r25
    8cee:	80 81       	ld	r24, Z
    8cf0:	91 81       	ldd	r25, Z+1	; 0x01
    8cf2:	a2 81       	ldd	r26, Z+2	; 0x02
    8cf4:	b3 81       	ldd	r27, Z+3	; 0x03
    8cf6:	8f 8f       	std	Y+31, r24	; 0x1f
    8cf8:	98 a3       	std	Y+32, r25	; 0x20
    8cfa:	a9 a3       	std	Y+33, r26	; 0x21
    8cfc:	ba a3       	std	Y+34, r27	; 0x22
    8cfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8d00:	98 a1       	ldd	r25, Y+32	; 0x20
    8d02:	a9 a1       	ldd	r26, Y+33	; 0x21
    8d04:	ba a1       	ldd	r27, Y+34	; 0x22
    8d06:	bb 23       	and	r27, r27
    8d08:	7c f4       	brge	.+30     	; 0x8d28 <mv_queue_move_buffer+0x3c0>
    8d0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8d0c:	98 a1       	ldd	r25, Y+32	; 0x20
    8d0e:	a9 a1       	ldd	r26, Y+33	; 0x21
    8d10:	ba a1       	ldd	r27, Y+34	; 0x22
    8d12:	b0 95       	com	r27
    8d14:	a0 95       	com	r26
    8d16:	90 95       	com	r25
    8d18:	81 95       	neg	r24
    8d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    8d1c:	af 4f       	sbci	r26, 0xFF	; 255
    8d1e:	bf 4f       	sbci	r27, 0xFF	; 255
    8d20:	8f 8f       	std	Y+31, r24	; 0x1f
    8d22:	98 a3       	std	Y+32, r25	; 0x20
    8d24:	a9 a3       	std	Y+33, r26	; 0x21
    8d26:	ba a3       	std	Y+34, r27	; 0x22
    8d28:	8b a1       	ldd	r24, Y+35	; 0x23
    8d2a:	9c a1       	ldd	r25, Y+36	; 0x24
    8d2c:	88 0f       	add	r24, r24
    8d2e:	99 1f       	adc	r25, r25
    8d30:	9c 01       	movw	r18, r24
    8d32:	22 0f       	add	r18, r18
    8d34:	33 1f       	adc	r19, r19
    8d36:	22 0f       	add	r18, r18
    8d38:	33 1f       	adc	r19, r19
    8d3a:	82 0f       	add	r24, r18
    8d3c:	93 1f       	adc	r25, r19
    8d3e:	ed a1       	ldd	r30, Y+37	; 0x25
    8d40:	fe a1       	ldd	r31, Y+38	; 0x26
    8d42:	e8 0f       	add	r30, r24
    8d44:	f9 1f       	adc	r31, r25
    8d46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8d48:	98 a1       	ldd	r25, Y+32	; 0x20
    8d4a:	a9 a1       	ldd	r26, Y+33	; 0x21
    8d4c:	ba a1       	ldd	r27, Y+34	; 0x22
    8d4e:	80 83       	st	Z, r24
    8d50:	91 83       	std	Z+1, r25	; 0x01
    8d52:	a2 83       	std	Z+2, r26	; 0x02
    8d54:	b3 83       	std	Z+3, r27	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    8d56:	40 91 9d 23 	lds	r20, 0x239D
    8d5a:	50 91 9e 23 	lds	r21, 0x239E
    8d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8d60:	88 2f       	mov	r24, r24
    8d62:	90 e0       	ldi	r25, 0x00	; 0
    8d64:	88 0f       	add	r24, r24
    8d66:	99 1f       	adc	r25, r25
    8d68:	9c 01       	movw	r18, r24
    8d6a:	22 0f       	add	r18, r18
    8d6c:	33 1f       	adc	r19, r19
    8d6e:	22 0f       	add	r18, r18
    8d70:	33 1f       	adc	r19, r19
    8d72:	82 0f       	add	r24, r18
    8d74:	93 1f       	adc	r25, r19
    8d76:	84 0f       	add	r24, r20
    8d78:	95 1f       	adc	r25, r21
    8d7a:	fc 01       	movw	r30, r24
    8d7c:	36 96       	adiw	r30, 0x06	; 6
    8d7e:	81 e0       	ldi	r24, 0x01	; 1
    8d80:	90 e0       	ldi	r25, 0x00	; 0
    8d82:	80 83       	st	Z, r24
    8d84:	91 83       	std	Z+1, r25	; 0x01
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    8d86:	40 91 9d 23 	lds	r20, 0x239D
    8d8a:	50 91 9e 23 	lds	r21, 0x239E
    8d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8d90:	88 2f       	mov	r24, r24
    8d92:	90 e0       	ldi	r25, 0x00	; 0
    8d94:	88 0f       	add	r24, r24
    8d96:	99 1f       	adc	r25, r25
    8d98:	9c 01       	movw	r18, r24
    8d9a:	22 0f       	add	r18, r18
    8d9c:	33 1f       	adc	r19, r19
    8d9e:	22 0f       	add	r18, r18
    8da0:	33 1f       	adc	r19, r19
    8da2:	82 0f       	add	r24, r18
    8da4:	93 1f       	adc	r25, r19
    8da6:	fa 01       	movw	r30, r20
    8da8:	e8 0f       	add	r30, r24
    8daa:	f9 1f       	adc	r31, r25
    8dac:	20 81       	ld	r18, Z
    8dae:	31 81       	ldd	r19, Z+1	; 0x01
    8db0:	42 81       	ldd	r20, Z+2	; 0x02
    8db2:	53 81       	ldd	r21, Z+3	; 0x03
    8db4:	da 01       	movw	r26, r20
    8db6:	c9 01       	movw	r24, r18
    8db8:	bb 0f       	add	r27, r27
    8dba:	88 0b       	sbc	r24, r24
    8dbc:	98 2f       	mov	r25, r24
    8dbe:	dc 01       	movw	r26, r24
    8dc0:	19 01       	movw	r2, r18
    8dc2:	2a 01       	movw	r4, r20
    8dc4:	68 2e       	mov	r6, r24
    8dc6:	78 2e       	mov	r7, r24
    8dc8:	88 2e       	mov	r8, r24
    8dca:	98 2e       	mov	r9, r24
    8dcc:	2d 81       	ldd	r18, Y+5	; 0x05
    8dce:	3e 81       	ldd	r19, Y+6	; 0x06
    8dd0:	4f 81       	ldd	r20, Y+7	; 0x07
    8dd2:	58 85       	ldd	r21, Y+8	; 0x08
    8dd4:	69 85       	ldd	r22, Y+9	; 0x09
    8dd6:	7a 85       	ldd	r23, Y+10	; 0x0a
    8dd8:	8b 85       	ldd	r24, Y+11	; 0x0b
    8dda:	9c 85       	ldd	r25, Y+12	; 0x0c
    8ddc:	a2 2c       	mov	r10, r2
    8dde:	b3 2c       	mov	r11, r3
    8de0:	c4 2c       	mov	r12, r4
    8de2:	d5 2c       	mov	r13, r5
    8de4:	e6 2c       	mov	r14, r6
    8de6:	f7 2c       	mov	r15, r7
    8de8:	08 2d       	mov	r16, r8
    8dea:	19 2d       	mov	r17, r9
    8dec:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <__udivdi3>
    8df0:	a2 2e       	mov	r10, r18
    8df2:	b3 2e       	mov	r11, r19
    8df4:	c4 2e       	mov	r12, r20
    8df6:	d5 2e       	mov	r13, r21
    8df8:	e6 2e       	mov	r14, r22
    8dfa:	f7 2e       	mov	r15, r23
    8dfc:	08 2f       	mov	r16, r24
    8dfe:	19 2f       	mov	r17, r25
    8e00:	2a 2d       	mov	r18, r10
    8e02:	3b 2d       	mov	r19, r11
    8e04:	4c 2d       	mov	r20, r12
    8e06:	5d 2d       	mov	r21, r13
    8e08:	6e 2d       	mov	r22, r14
    8e0a:	7f 2d       	mov	r23, r15
    8e0c:	80 2f       	mov	r24, r16
    8e0e:	91 2f       	mov	r25, r17
    8e10:	29 83       	std	Y+1, r18	; 0x01
    8e12:	3a 83       	std	Y+2, r19	; 0x02
    8e14:	4b 83       	std	Y+3, r20	; 0x03
    8e16:	5c 83       	std	Y+4, r21	; 0x04
    8e18:	3c c0       	rjmp	.+120    	; 0x8e92 <mv_queue_move_buffer+0x52a>
				while (ticks_per_step & 0xFFFF0000) {
					ticks_per_step >>= 1;
    8e1a:	89 81       	ldd	r24, Y+1	; 0x01
    8e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    8e1e:	ab 81       	ldd	r26, Y+3	; 0x03
    8e20:	bc 81       	ldd	r27, Y+4	; 0x04
    8e22:	b6 95       	lsr	r27
    8e24:	a7 95       	ror	r26
    8e26:	97 95       	ror	r25
    8e28:	87 95       	ror	r24
    8e2a:	89 83       	std	Y+1, r24	; 0x01
    8e2c:	9a 83       	std	Y+2, r25	; 0x02
    8e2e:	ab 83       	std	Y+3, r26	; 0x03
    8e30:	bc 83       	std	Y+4, r27	; 0x04
					mv.p->a[i].postscale <<= 1;
    8e32:	60 91 9d 23 	lds	r22, 0x239D
    8e36:	70 91 9e 23 	lds	r23, 0x239E
    8e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    8e3c:	a8 2f       	mov	r26, r24
    8e3e:	b0 e0       	ldi	r27, 0x00	; 0
    8e40:	40 91 9d 23 	lds	r20, 0x239D
    8e44:	50 91 9e 23 	lds	r21, 0x239E
    8e48:	8d 85       	ldd	r24, Y+13	; 0x0d
    8e4a:	88 2f       	mov	r24, r24
    8e4c:	90 e0       	ldi	r25, 0x00	; 0
    8e4e:	88 0f       	add	r24, r24
    8e50:	99 1f       	adc	r25, r25
    8e52:	9c 01       	movw	r18, r24
    8e54:	22 0f       	add	r18, r18
    8e56:	33 1f       	adc	r19, r19
    8e58:	22 0f       	add	r18, r18
    8e5a:	33 1f       	adc	r19, r19
    8e5c:	82 0f       	add	r24, r18
    8e5e:	93 1f       	adc	r25, r19
    8e60:	84 0f       	add	r24, r20
    8e62:	95 1f       	adc	r25, r21
    8e64:	fc 01       	movw	r30, r24
    8e66:	36 96       	adiw	r30, 0x06	; 6
    8e68:	80 81       	ld	r24, Z
    8e6a:	91 81       	ldd	r25, Z+1	; 0x01
    8e6c:	ac 01       	movw	r20, r24
    8e6e:	44 0f       	add	r20, r20
    8e70:	55 1f       	adc	r21, r21
    8e72:	cd 01       	movw	r24, r26
    8e74:	88 0f       	add	r24, r24
    8e76:	99 1f       	adc	r25, r25
    8e78:	9c 01       	movw	r18, r24
    8e7a:	22 0f       	add	r18, r18
    8e7c:	33 1f       	adc	r19, r19
    8e7e:	22 0f       	add	r18, r18
    8e80:	33 1f       	adc	r19, r19
    8e82:	82 0f       	add	r24, r18
    8e84:	93 1f       	adc	r25, r19
    8e86:	86 0f       	add	r24, r22
    8e88:	97 1f       	adc	r25, r23
    8e8a:	fc 01       	movw	r30, r24
    8e8c:	36 96       	adiw	r30, 0x06	; 6
    8e8e:	40 83       	st	Z, r20
    8e90:	51 83       	std	Z+1, r21	; 0x01

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
				while (ticks_per_step & 0xFFFF0000) {
    8e92:	89 81       	ldd	r24, Y+1	; 0x01
    8e94:	9a 81       	ldd	r25, Y+2	; 0x02
    8e96:	ab 81       	ldd	r26, Y+3	; 0x03
    8e98:	bc 81       	ldd	r27, Y+4	; 0x04
    8e9a:	80 70       	andi	r24, 0x00	; 0
    8e9c:	90 70       	andi	r25, 0x00	; 0
    8e9e:	00 97       	sbiw	r24, 0x00	; 0
    8ea0:	a1 05       	cpc	r26, r1
    8ea2:	b1 05       	cpc	r27, r1
    8ea4:	09 f0       	breq	.+2      	; 0x8ea8 <mv_queue_move_buffer+0x540>
    8ea6:	b9 cf       	rjmp	.-142    	; 0x8e1a <mv_queue_move_buffer+0x4b2>
					ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    8ea8:	40 91 9d 23 	lds	r20, 0x239D
    8eac:	50 91 9e 23 	lds	r21, 0x239E
    8eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    8eb2:	88 2f       	mov	r24, r24
    8eb4:	90 e0       	ldi	r25, 0x00	; 0
    8eb6:	69 81       	ldd	r22, Y+1	; 0x01
    8eb8:	7a 81       	ldd	r23, Y+2	; 0x02
    8eba:	88 0f       	add	r24, r24
    8ebc:	99 1f       	adc	r25, r25
    8ebe:	9c 01       	movw	r18, r24
    8ec0:	22 0f       	add	r18, r18
    8ec2:	33 1f       	adc	r19, r19
    8ec4:	22 0f       	add	r18, r18
    8ec6:	33 1f       	adc	r19, r19
    8ec8:	82 0f       	add	r24, r18
    8eca:	93 1f       	adc	r25, r19
    8ecc:	84 0f       	add	r24, r20
    8ece:	95 1f       	adc	r25, r21
    8ed0:	fc 01       	movw	r30, r24
    8ed2:	34 96       	adiw	r30, 0x04	; 4
    8ed4:	60 83       	st	Z, r22
    8ed6:	71 83       	std	Z+1, r23	; 0x01
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    8ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
    8eda:	8f 5f       	subi	r24, 0xFF	; 255
    8edc:	8d 87       	std	Y+13, r24	; 0x0d
    8ede:	8d 85       	ldd	r24, Y+13	; 0x0d
    8ee0:	83 30       	cpi	r24, 0x03	; 3
    8ee2:	08 f4       	brcc	.+2      	; 0x8ee6 <mv_queue_move_buffer+0x57e>
    8ee4:	85 ce       	rjmp	.-758    	; 0x8bf0 <mv_queue_move_buffer+0x288>
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    8ee6:	8e 85       	ldd	r24, Y+14	; 0x0e
    8ee8:	80 93 9b 23 	sts	0x239B, r24
	st_execute_move();
    8eec:	0e 94 ae 32 	call	0x655c	; 0x655c <st_execute_move>
	return (TG_OK);
    8ef0:	1f a2       	std	Y+39, r1	; 0x27
    8ef2:	8f a1       	ldd	r24, Y+39	; 0x27
}
    8ef4:	a7 96       	adiw	r28, 0x27	; 39
    8ef6:	cd bf       	out	0x3d, r28	; 61
    8ef8:	de bf       	out	0x3e, r29	; 62
    8efa:	cf 91       	pop	r28
    8efc:	df 91       	pop	r29
    8efe:	1f 91       	pop	r17
    8f00:	0f 91       	pop	r16
    8f02:	ff 90       	pop	r15
    8f04:	ef 90       	pop	r14
    8f06:	df 90       	pop	r13
    8f08:	cf 90       	pop	r12
    8f0a:	bf 90       	pop	r11
    8f0c:	af 90       	pop	r10
    8f0e:	9f 90       	pop	r9
    8f10:	8f 90       	pop	r8
    8f12:	7f 90       	pop	r7
    8f14:	6f 90       	pop	r6
    8f16:	5f 90       	pop	r5
    8f18:	4f 90       	pop	r4
    8f1a:	3f 90       	pop	r3
    8f1c:	2f 90       	pop	r2
    8f1e:	08 95       	ret

00008f20 <mv_dequeue_move_buffer>:
/* 
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
    8f20:	df 93       	push	r29
    8f22:	cf 93       	push	r28
    8f24:	0f 92       	push	r0
    8f26:	0f 92       	push	r0
    8f28:	cd b7       	in	r28, 0x3d	; 61
    8f2a:	de b7       	in	r29, 0x3e	; 62
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    8f2c:	90 91 9b 23 	lds	r25, 0x239B
    8f30:	80 91 9c 23 	lds	r24, 0x239C
    8f34:	98 17       	cp	r25, r24
    8f36:	19 f4       	brne	.+6      	; 0x8f3e <mv_dequeue_move_buffer+0x1e>
		return (NULL);
    8f38:	19 82       	std	Y+1, r1	; 0x01
    8f3a:	1a 82       	std	Y+2, r1	; 0x02
    8f3c:	29 c0       	rjmp	.+82     	; 0x8f90 <mv_dequeue_move_buffer+0x70>
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    8f3e:	80 91 9c 23 	lds	r24, 0x239C
    8f42:	28 2f       	mov	r18, r24
    8f44:	30 e0       	ldi	r19, 0x00	; 0
    8f46:	c9 01       	movw	r24, r18
    8f48:	88 0f       	add	r24, r24
    8f4a:	99 1f       	adc	r25, r25
    8f4c:	82 0f       	add	r24, r18
    8f4e:	93 1f       	adc	r25, r19
    8f50:	9c 01       	movw	r18, r24
    8f52:	22 0f       	add	r18, r18
    8f54:	33 1f       	adc	r19, r19
    8f56:	22 0f       	add	r18, r18
    8f58:	33 1f       	adc	r19, r19
    8f5a:	82 0f       	add	r24, r18
    8f5c:	93 1f       	adc	r25, r19
    8f5e:	88 0f       	add	r24, r24
    8f60:	99 1f       	adc	r25, r25
    8f62:	81 56       	subi	r24, 0x61	; 97
    8f64:	9c 4d       	sbci	r25, 0xDC	; 220
    8f66:	80 93 9d 23 	sts	0x239D, r24
    8f6a:	90 93 9e 23 	sts	0x239E, r25
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    8f6e:	80 91 9c 23 	lds	r24, 0x239C
    8f72:	8f 5f       	subi	r24, 0xFF	; 255
    8f74:	80 93 9c 23 	sts	0x239C, r24
    8f78:	80 91 9c 23 	lds	r24, 0x239C
    8f7c:	83 30       	cpi	r24, 0x03	; 3
    8f7e:	10 f0       	brcs	.+4      	; 0x8f84 <mv_dequeue_move_buffer+0x64>
		mv.move_buffer_tail = 0;
    8f80:	10 92 9c 23 	sts	0x239C, r1
	}
	return (mv.p); 
    8f84:	80 91 9d 23 	lds	r24, 0x239D
    8f88:	90 91 9e 23 	lds	r25, 0x239E
    8f8c:	89 83       	std	Y+1, r24	; 0x01
    8f8e:	9a 83       	std	Y+2, r25	; 0x02
    8f90:	89 81       	ldd	r24, Y+1	; 0x01
    8f92:	9a 81       	ldd	r25, Y+2	; 0x02
}
    8f94:	0f 90       	pop	r0
    8f96:	0f 90       	pop	r0
    8f98:	cf 91       	pop	r28
    8f9a:	df 91       	pop	r29
    8f9c:	08 95       	ret

00008f9e <mv_test_move_buffer_full>:
 *		  buffer between the not-full result and the subsequent write. 
 *		  Be careful about changing this condition.
 */

uint8_t mv_test_move_buffer_full() 
{
    8f9e:	df 93       	push	r29
    8fa0:	cf 93       	push	r28
    8fa2:	0f 92       	push	r0
    8fa4:	0f 92       	push	r0
    8fa6:	cd b7       	in	r28, 0x3d	; 61
    8fa8:	de b7       	in	r29, 0x3e	; 62
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    8faa:	80 91 9b 23 	lds	r24, 0x239B
    8fae:	8f 5f       	subi	r24, 0xFF	; 255
    8fb0:	89 83       	std	Y+1, r24	; 0x01
    8fb2:	89 81       	ldd	r24, Y+1	; 0x01
    8fb4:	83 30       	cpi	r24, 0x03	; 3
    8fb6:	08 f0       	brcs	.+2      	; 0x8fba <mv_test_move_buffer_full+0x1c>
		next_buffer_head = 0;					  // wrap condition
    8fb8:	19 82       	std	Y+1, r1	; 0x01
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    8fba:	90 91 9c 23 	lds	r25, 0x239C
    8fbe:	89 81       	ldd	r24, Y+1	; 0x01
    8fc0:	98 17       	cp	r25, r24
    8fc2:	19 f4       	brne	.+6      	; 0x8fca <mv_test_move_buffer_full+0x2c>
		return (TRUE);
    8fc4:	81 e0       	ldi	r24, 0x01	; 1
    8fc6:	8a 83       	std	Y+2, r24	; 0x02
    8fc8:	01 c0       	rjmp	.+2      	; 0x8fcc <mv_test_move_buffer_full+0x2e>
	};
	return (FALSE);
    8fca:	1a 82       	std	Y+2, r1	; 0x02
    8fcc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    8fce:	0f 90       	pop	r0
    8fd0:	0f 90       	pop	r0
    8fd2:	cf 91       	pop	r28
    8fd4:	df 91       	pop	r29
    8fd6:	08 95       	ret

00008fd8 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    8fd8:	df 93       	push	r29
    8fda:	cf 93       	push	r28
    8fdc:	cd b7       	in	r28, 0x3d	; 61
    8fde:	de b7       	in	r29, 0x3e	; 62
    8fe0:	0f c0       	rjmp	.+30     	; 0x9000 <mv_synchronize+0x28>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    8fe2:	a8 e4       	ldi	r26, 0x48	; 72
    8fe4:	b0 e0       	ldi	r27, 0x00	; 0
    8fe6:	e8 e4       	ldi	r30, 0x48	; 72
    8fe8:	f0 e0       	ldi	r31, 0x00	; 0
    8fea:	80 81       	ld	r24, Z
    8fec:	81 60       	ori	r24, 0x01	; 1
    8fee:	8c 93       	st	X, r24
    8ff0:	88 95       	sleep
    8ff2:	a8 e4       	ldi	r26, 0x48	; 72
    8ff4:	b0 e0       	ldi	r27, 0x00	; 0
    8ff6:	e8 e4       	ldi	r30, 0x48	; 72
    8ff8:	f0 e0       	ldi	r31, 0x00	; 0
    8ffa:	80 81       	ld	r24, Z
    8ffc:	8e 7f       	andi	r24, 0xFE	; 254
    8ffe:	8c 93       	st	X, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    9000:	90 91 9c 23 	lds	r25, 0x239C
    9004:	80 91 9b 23 	lds	r24, 0x239B
    9008:	98 17       	cp	r25, r24
    900a:	59 f7       	brne	.-42     	; 0x8fe2 <mv_synchronize+0xa>
		sleep_mode();
	}    
}
    900c:	cf 91       	pop	r28
    900e:	df 91       	pop	r29
    9010:	08 95       	ret

00009012 <mv_flush>:
/* 
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
    9012:	df 93       	push	r29
    9014:	cf 93       	push	r28
    9016:	cd b7       	in	r28, 0x3d	; 61
    9018:	de b7       	in	r29, 0x3e	; 62
	cli();
    901a:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    901c:	80 91 9b 23 	lds	r24, 0x239B
    9020:	80 93 9c 23 	sts	0x239C, r24
	mv.p = NULL;
    9024:	10 92 9d 23 	sts	0x239D, r1
    9028:	10 92 9e 23 	sts	0x239E, r1
	sei();
    902c:	78 94       	sei
}
    902e:	cf 91       	pop	r28
    9030:	df 91       	pop	r29
    9032:	08 95       	ret

00009034 <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    9034:	df 93       	push	r29
    9036:	cf 93       	push	r28
    9038:	0f 92       	push	r0
    903a:	cd b7       	in	r28, 0x3d	; 61
    903c:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i=X; i<=A; i++) {
    903e:	19 82       	std	Y+1, r1	; 0x01
    9040:	81 c0       	rjmp	.+258    	; 0x9144 <ls_init+0x110>
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    9042:	89 81       	ldd	r24, Y+1	; 0x01
    9044:	88 2f       	mov	r24, r24
    9046:	90 e0       	ldi	r25, 0x00	; 0
    9048:	01 96       	adiw	r24, 0x01	; 1
    904a:	82 95       	swap	r24
    904c:	92 95       	swap	r25
    904e:	90 7f       	andi	r25, 0xF0	; 240
    9050:	98 27       	eor	r25, r24
    9052:	80 7f       	andi	r24, 0xF0	; 240
    9054:	98 27       	eor	r25, r24
    9056:	fc 01       	movw	r30, r24
    9058:	ea 5c       	subi	r30, 0xCA	; 202
    905a:	fb 4d       	sbci	r31, 0xDB	; 219
    905c:	01 90       	ld	r0, Z+
    905e:	f0 81       	ld	r31, Z
    9060:	e0 2d       	mov	r30, r0
    9062:	80 e4       	ldi	r24, 0x40	; 64
    9064:	82 83       	std	Z+2, r24	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    9066:	89 81       	ldd	r24, Y+1	; 0x01
    9068:	88 2f       	mov	r24, r24
    906a:	90 e0       	ldi	r25, 0x00	; 0
    906c:	01 96       	adiw	r24, 0x01	; 1
    906e:	82 95       	swap	r24
    9070:	92 95       	swap	r25
    9072:	90 7f       	andi	r25, 0xF0	; 240
    9074:	98 27       	eor	r25, r24
    9076:	80 7f       	andi	r24, 0xF0	; 240
    9078:	98 27       	eor	r25, r24
    907a:	fc 01       	movw	r30, r24
    907c:	ea 5c       	subi	r30, 0xCA	; 202
    907e:	fb 4d       	sbci	r31, 0xDB	; 219
    9080:	01 90       	ld	r0, Z+
    9082:	f0 81       	ld	r31, Z
    9084:	e0 2d       	mov	r30, r0
    9086:	80 e8       	ldi	r24, 0x80	; 128
    9088:	82 83       	std	Z+2, r24	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    908a:	89 81       	ldd	r24, Y+1	; 0x01
    908c:	88 2f       	mov	r24, r24
    908e:	90 e0       	ldi	r25, 0x00	; 0
    9090:	01 96       	adiw	r24, 0x01	; 1
    9092:	82 95       	swap	r24
    9094:	92 95       	swap	r25
    9096:	90 7f       	andi	r25, 0xF0	; 240
    9098:	98 27       	eor	r25, r24
    909a:	80 7f       	andi	r24, 0xF0	; 240
    909c:	98 27       	eor	r25, r24
    909e:	fc 01       	movw	r30, r24
    90a0:	ea 5c       	subi	r30, 0xCA	; 202
    90a2:	fb 4d       	sbci	r31, 0xDB	; 219
    90a4:	01 90       	ld	r0, Z+
    90a6:	f0 81       	ld	r31, Z
    90a8:	e0 2d       	mov	r30, r0
    90aa:	89 e1       	ldi	r24, 0x19	; 25
    90ac:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    90ae:	89 81       	ldd	r24, Y+1	; 0x01
    90b0:	88 2f       	mov	r24, r24
    90b2:	90 e0       	ldi	r25, 0x00	; 0
    90b4:	01 96       	adiw	r24, 0x01	; 1
    90b6:	82 95       	swap	r24
    90b8:	92 95       	swap	r25
    90ba:	90 7f       	andi	r25, 0xF0	; 240
    90bc:	98 27       	eor	r25, r24
    90be:	80 7f       	andi	r24, 0xF0	; 240
    90c0:	98 27       	eor	r25, r24
    90c2:	fc 01       	movw	r30, r24
    90c4:	ea 5c       	subi	r30, 0xCA	; 202
    90c6:	fb 4d       	sbci	r31, 0xDB	; 219
    90c8:	01 90       	ld	r0, Z+
    90ca:	f0 81       	ld	r31, Z
    90cc:	e0 2d       	mov	r30, r0
    90ce:	89 e1       	ldi	r24, 0x19	; 25
    90d0:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    90d2:	89 81       	ldd	r24, Y+1	; 0x01
    90d4:	88 2f       	mov	r24, r24
    90d6:	90 e0       	ldi	r25, 0x00	; 0
    90d8:	01 96       	adiw	r24, 0x01	; 1
    90da:	82 95       	swap	r24
    90dc:	92 95       	swap	r25
    90de:	90 7f       	andi	r25, 0xF0	; 240
    90e0:	98 27       	eor	r25, r24
    90e2:	80 7f       	andi	r24, 0xF0	; 240
    90e4:	98 27       	eor	r25, r24
    90e6:	fc 01       	movw	r30, r24
    90e8:	ea 5c       	subi	r30, 0xCA	; 202
    90ea:	fb 4d       	sbci	r31, 0xDB	; 219
    90ec:	01 90       	ld	r0, Z+
    90ee:	f0 81       	ld	r31, Z
    90f0:	e0 2d       	mov	r30, r0
    90f2:	80 e4       	ldi	r24, 0x40	; 64
    90f4:	82 87       	std	Z+10, r24	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    90f6:	89 81       	ldd	r24, Y+1	; 0x01
    90f8:	88 2f       	mov	r24, r24
    90fa:	90 e0       	ldi	r25, 0x00	; 0
    90fc:	01 96       	adiw	r24, 0x01	; 1
    90fe:	82 95       	swap	r24
    9100:	92 95       	swap	r25
    9102:	90 7f       	andi	r25, 0xF0	; 240
    9104:	98 27       	eor	r25, r24
    9106:	80 7f       	andi	r24, 0xF0	; 240
    9108:	98 27       	eor	r25, r24
    910a:	fc 01       	movw	r30, r24
    910c:	ea 5c       	subi	r30, 0xCA	; 202
    910e:	fb 4d       	sbci	r31, 0xDB	; 219
    9110:	01 90       	ld	r0, Z+
    9112:	f0 81       	ld	r31, Z
    9114:	e0 2d       	mov	r30, r0
    9116:	80 e8       	ldi	r24, 0x80	; 128
    9118:	83 87       	std	Z+11, r24	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    911a:	89 81       	ldd	r24, Y+1	; 0x01
    911c:	88 2f       	mov	r24, r24
    911e:	90 e0       	ldi	r25, 0x00	; 0
    9120:	01 96       	adiw	r24, 0x01	; 1
    9122:	82 95       	swap	r24
    9124:	92 95       	swap	r25
    9126:	90 7f       	andi	r25, 0xF0	; 240
    9128:	98 27       	eor	r25, r24
    912a:	80 7f       	andi	r24, 0xF0	; 240
    912c:	98 27       	eor	r25, r24
    912e:	fc 01       	movw	r30, r24
    9130:	ea 5c       	subi	r30, 0xCA	; 202
    9132:	fb 4d       	sbci	r31, 0xDB	; 219
    9134:	01 90       	ld	r0, Z+
    9136:	f0 81       	ld	r31, Z
    9138:	e0 2d       	mov	r30, r0
    913a:	8a e0       	ldi	r24, 0x0A	; 10
    913c:	81 87       	std	Z+9, r24	; 0x09
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    913e:	89 81       	ldd	r24, Y+1	; 0x01
    9140:	8f 5f       	subi	r24, 0xFF	; 255
    9142:	89 83       	std	Y+1, r24	; 0x01
    9144:	89 81       	ldd	r24, Y+1	; 0x01
    9146:	84 30       	cpi	r24, 0x04	; 4
    9148:	08 f4       	brcc	.+2      	; 0x914c <ls_init+0x118>
    914a:	7b cf       	rjmp	.-266    	; 0x9042 <ls_init+0xe>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    914c:	0f 90       	pop	r0
    914e:	cf 91       	pop	r28
    9150:	df 91       	pop	r29
    9152:	08 95       	ret

00009154 <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    9154:	1f 92       	push	r1
    9156:	0f 92       	push	r0
    9158:	0f b6       	in	r0, 0x3f	; 63
    915a:	0f 92       	push	r0
    915c:	00 90 3b 00 	lds	r0, 0x003B
    9160:	0f 92       	push	r0
    9162:	11 24       	eor	r1, r1
    9164:	2f 93       	push	r18
    9166:	3f 93       	push	r19
    9168:	4f 93       	push	r20
    916a:	5f 93       	push	r21
    916c:	6f 93       	push	r22
    916e:	7f 93       	push	r23
    9170:	8f 93       	push	r24
    9172:	9f 93       	push	r25
    9174:	af 93       	push	r26
    9176:	bf 93       	push	r27
    9178:	ef 93       	push	r30
    917a:	ff 93       	push	r31
    917c:	df 93       	push	r29
    917e:	cf 93       	push	r28
    9180:	cd b7       	in	r28, 0x3d	; 61
    9182:	de b7       	in	r29, 0x3e	; 62
    9184:	0e 94 2a 4a 	call	0x9454	; 0x9454 <_ls_handler>
    9188:	cf 91       	pop	r28
    918a:	df 91       	pop	r29
    918c:	ff 91       	pop	r31
    918e:	ef 91       	pop	r30
    9190:	bf 91       	pop	r27
    9192:	af 91       	pop	r26
    9194:	9f 91       	pop	r25
    9196:	8f 91       	pop	r24
    9198:	7f 91       	pop	r23
    919a:	6f 91       	pop	r22
    919c:	5f 91       	pop	r21
    919e:	4f 91       	pop	r20
    91a0:	3f 91       	pop	r19
    91a2:	2f 91       	pop	r18
    91a4:	0f 90       	pop	r0
    91a6:	00 92 3b 00 	sts	0x003B, r0
    91aa:	0f 90       	pop	r0
    91ac:	0f be       	out	0x3f, r0	; 63
    91ae:	0f 90       	pop	r0
    91b0:	1f 90       	pop	r1
    91b2:	18 95       	reti

000091b4 <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    91b4:	1f 92       	push	r1
    91b6:	0f 92       	push	r0
    91b8:	0f b6       	in	r0, 0x3f	; 63
    91ba:	0f 92       	push	r0
    91bc:	00 90 3b 00 	lds	r0, 0x003B
    91c0:	0f 92       	push	r0
    91c2:	11 24       	eor	r1, r1
    91c4:	2f 93       	push	r18
    91c6:	3f 93       	push	r19
    91c8:	4f 93       	push	r20
    91ca:	5f 93       	push	r21
    91cc:	6f 93       	push	r22
    91ce:	7f 93       	push	r23
    91d0:	8f 93       	push	r24
    91d2:	9f 93       	push	r25
    91d4:	af 93       	push	r26
    91d6:	bf 93       	push	r27
    91d8:	ef 93       	push	r30
    91da:	ff 93       	push	r31
    91dc:	df 93       	push	r29
    91de:	cf 93       	push	r28
    91e0:	cd b7       	in	r28, 0x3d	; 61
    91e2:	de b7       	in	r29, 0x3e	; 62
    91e4:	0e 94 2a 4a 	call	0x9454	; 0x9454 <_ls_handler>
    91e8:	cf 91       	pop	r28
    91ea:	df 91       	pop	r29
    91ec:	ff 91       	pop	r31
    91ee:	ef 91       	pop	r30
    91f0:	bf 91       	pop	r27
    91f2:	af 91       	pop	r26
    91f4:	9f 91       	pop	r25
    91f6:	8f 91       	pop	r24
    91f8:	7f 91       	pop	r23
    91fa:	6f 91       	pop	r22
    91fc:	5f 91       	pop	r21
    91fe:	4f 91       	pop	r20
    9200:	3f 91       	pop	r19
    9202:	2f 91       	pop	r18
    9204:	0f 90       	pop	r0
    9206:	00 92 3b 00 	sts	0x003B, r0
    920a:	0f 90       	pop	r0
    920c:	0f be       	out	0x3f, r0	; 63
    920e:	0f 90       	pop	r0
    9210:	1f 90       	pop	r1
    9212:	18 95       	reti

00009214 <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    9214:	1f 92       	push	r1
    9216:	0f 92       	push	r0
    9218:	0f b6       	in	r0, 0x3f	; 63
    921a:	0f 92       	push	r0
    921c:	00 90 3b 00 	lds	r0, 0x003B
    9220:	0f 92       	push	r0
    9222:	11 24       	eor	r1, r1
    9224:	2f 93       	push	r18
    9226:	3f 93       	push	r19
    9228:	4f 93       	push	r20
    922a:	5f 93       	push	r21
    922c:	6f 93       	push	r22
    922e:	7f 93       	push	r23
    9230:	8f 93       	push	r24
    9232:	9f 93       	push	r25
    9234:	af 93       	push	r26
    9236:	bf 93       	push	r27
    9238:	ef 93       	push	r30
    923a:	ff 93       	push	r31
    923c:	df 93       	push	r29
    923e:	cf 93       	push	r28
    9240:	cd b7       	in	r28, 0x3d	; 61
    9242:	de b7       	in	r29, 0x3e	; 62
    9244:	0e 94 2a 4a 	call	0x9454	; 0x9454 <_ls_handler>
    9248:	cf 91       	pop	r28
    924a:	df 91       	pop	r29
    924c:	ff 91       	pop	r31
    924e:	ef 91       	pop	r30
    9250:	bf 91       	pop	r27
    9252:	af 91       	pop	r26
    9254:	9f 91       	pop	r25
    9256:	8f 91       	pop	r24
    9258:	7f 91       	pop	r23
    925a:	6f 91       	pop	r22
    925c:	5f 91       	pop	r21
    925e:	4f 91       	pop	r20
    9260:	3f 91       	pop	r19
    9262:	2f 91       	pop	r18
    9264:	0f 90       	pop	r0
    9266:	00 92 3b 00 	sts	0x003B, r0
    926a:	0f 90       	pop	r0
    926c:	0f be       	out	0x3f, r0	; 63
    926e:	0f 90       	pop	r0
    9270:	1f 90       	pop	r1
    9272:	18 95       	reti

00009274 <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    9274:	1f 92       	push	r1
    9276:	0f 92       	push	r0
    9278:	0f b6       	in	r0, 0x3f	; 63
    927a:	0f 92       	push	r0
    927c:	00 90 3b 00 	lds	r0, 0x003B
    9280:	0f 92       	push	r0
    9282:	11 24       	eor	r1, r1
    9284:	2f 93       	push	r18
    9286:	3f 93       	push	r19
    9288:	4f 93       	push	r20
    928a:	5f 93       	push	r21
    928c:	6f 93       	push	r22
    928e:	7f 93       	push	r23
    9290:	8f 93       	push	r24
    9292:	9f 93       	push	r25
    9294:	af 93       	push	r26
    9296:	bf 93       	push	r27
    9298:	ef 93       	push	r30
    929a:	ff 93       	push	r31
    929c:	df 93       	push	r29
    929e:	cf 93       	push	r28
    92a0:	cd b7       	in	r28, 0x3d	; 61
    92a2:	de b7       	in	r29, 0x3e	; 62
    92a4:	0e 94 2a 4a 	call	0x9454	; 0x9454 <_ls_handler>
    92a8:	cf 91       	pop	r28
    92aa:	df 91       	pop	r29
    92ac:	ff 91       	pop	r31
    92ae:	ef 91       	pop	r30
    92b0:	bf 91       	pop	r27
    92b2:	af 91       	pop	r26
    92b4:	9f 91       	pop	r25
    92b6:	8f 91       	pop	r24
    92b8:	7f 91       	pop	r23
    92ba:	6f 91       	pop	r22
    92bc:	5f 91       	pop	r21
    92be:	4f 91       	pop	r20
    92c0:	3f 91       	pop	r19
    92c2:	2f 91       	pop	r18
    92c4:	0f 90       	pop	r0
    92c6:	00 92 3b 00 	sts	0x003B, r0
    92ca:	0f 90       	pop	r0
    92cc:	0f be       	out	0x3f, r0	; 63
    92ce:	0f 90       	pop	r0
    92d0:	1f 90       	pop	r1
    92d2:	18 95       	reti

000092d4 <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    92d4:	1f 92       	push	r1
    92d6:	0f 92       	push	r0
    92d8:	0f b6       	in	r0, 0x3f	; 63
    92da:	0f 92       	push	r0
    92dc:	00 90 3b 00 	lds	r0, 0x003B
    92e0:	0f 92       	push	r0
    92e2:	11 24       	eor	r1, r1
    92e4:	2f 93       	push	r18
    92e6:	3f 93       	push	r19
    92e8:	4f 93       	push	r20
    92ea:	5f 93       	push	r21
    92ec:	6f 93       	push	r22
    92ee:	7f 93       	push	r23
    92f0:	8f 93       	push	r24
    92f2:	9f 93       	push	r25
    92f4:	af 93       	push	r26
    92f6:	bf 93       	push	r27
    92f8:	ef 93       	push	r30
    92fa:	ff 93       	push	r31
    92fc:	df 93       	push	r29
    92fe:	cf 93       	push	r28
    9300:	cd b7       	in	r28, 0x3d	; 61
    9302:	de b7       	in	r29, 0x3e	; 62
    9304:	0e 94 2a 4a 	call	0x9454	; 0x9454 <_ls_handler>
    9308:	cf 91       	pop	r28
    930a:	df 91       	pop	r29
    930c:	ff 91       	pop	r31
    930e:	ef 91       	pop	r30
    9310:	bf 91       	pop	r27
    9312:	af 91       	pop	r26
    9314:	9f 91       	pop	r25
    9316:	8f 91       	pop	r24
    9318:	7f 91       	pop	r23
    931a:	6f 91       	pop	r22
    931c:	5f 91       	pop	r21
    931e:	4f 91       	pop	r20
    9320:	3f 91       	pop	r19
    9322:	2f 91       	pop	r18
    9324:	0f 90       	pop	r0
    9326:	00 92 3b 00 	sts	0x003B, r0
    932a:	0f 90       	pop	r0
    932c:	0f be       	out	0x3f, r0	; 63
    932e:	0f 90       	pop	r0
    9330:	1f 90       	pop	r1
    9332:	18 95       	reti

00009334 <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    9334:	1f 92       	push	r1
    9336:	0f 92       	push	r0
    9338:	0f b6       	in	r0, 0x3f	; 63
    933a:	0f 92       	push	r0
    933c:	00 90 3b 00 	lds	r0, 0x003B
    9340:	0f 92       	push	r0
    9342:	11 24       	eor	r1, r1
    9344:	2f 93       	push	r18
    9346:	3f 93       	push	r19
    9348:	4f 93       	push	r20
    934a:	5f 93       	push	r21
    934c:	6f 93       	push	r22
    934e:	7f 93       	push	r23
    9350:	8f 93       	push	r24
    9352:	9f 93       	push	r25
    9354:	af 93       	push	r26
    9356:	bf 93       	push	r27
    9358:	ef 93       	push	r30
    935a:	ff 93       	push	r31
    935c:	df 93       	push	r29
    935e:	cf 93       	push	r28
    9360:	cd b7       	in	r28, 0x3d	; 61
    9362:	de b7       	in	r29, 0x3e	; 62
    9364:	0e 94 2a 4a 	call	0x9454	; 0x9454 <_ls_handler>
    9368:	cf 91       	pop	r28
    936a:	df 91       	pop	r29
    936c:	ff 91       	pop	r31
    936e:	ef 91       	pop	r30
    9370:	bf 91       	pop	r27
    9372:	af 91       	pop	r26
    9374:	9f 91       	pop	r25
    9376:	8f 91       	pop	r24
    9378:	7f 91       	pop	r23
    937a:	6f 91       	pop	r22
    937c:	5f 91       	pop	r21
    937e:	4f 91       	pop	r20
    9380:	3f 91       	pop	r19
    9382:	2f 91       	pop	r18
    9384:	0f 90       	pop	r0
    9386:	00 92 3b 00 	sts	0x003B, r0
    938a:	0f 90       	pop	r0
    938c:	0f be       	out	0x3f, r0	; 63
    938e:	0f 90       	pop	r0
    9390:	1f 90       	pop	r1
    9392:	18 95       	reti

00009394 <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    9394:	1f 92       	push	r1
    9396:	0f 92       	push	r0
    9398:	0f b6       	in	r0, 0x3f	; 63
    939a:	0f 92       	push	r0
    939c:	00 90 3b 00 	lds	r0, 0x003B
    93a0:	0f 92       	push	r0
    93a2:	11 24       	eor	r1, r1
    93a4:	2f 93       	push	r18
    93a6:	3f 93       	push	r19
    93a8:	4f 93       	push	r20
    93aa:	5f 93       	push	r21
    93ac:	6f 93       	push	r22
    93ae:	7f 93       	push	r23
    93b0:	8f 93       	push	r24
    93b2:	9f 93       	push	r25
    93b4:	af 93       	push	r26
    93b6:	bf 93       	push	r27
    93b8:	ef 93       	push	r30
    93ba:	ff 93       	push	r31
    93bc:	df 93       	push	r29
    93be:	cf 93       	push	r28
    93c0:	cd b7       	in	r28, 0x3d	; 61
    93c2:	de b7       	in	r29, 0x3e	; 62
    93c4:	0e 94 2a 4a 	call	0x9454	; 0x9454 <_ls_handler>
    93c8:	cf 91       	pop	r28
    93ca:	df 91       	pop	r29
    93cc:	ff 91       	pop	r31
    93ce:	ef 91       	pop	r30
    93d0:	bf 91       	pop	r27
    93d2:	af 91       	pop	r26
    93d4:	9f 91       	pop	r25
    93d6:	8f 91       	pop	r24
    93d8:	7f 91       	pop	r23
    93da:	6f 91       	pop	r22
    93dc:	5f 91       	pop	r21
    93de:	4f 91       	pop	r20
    93e0:	3f 91       	pop	r19
    93e2:	2f 91       	pop	r18
    93e4:	0f 90       	pop	r0
    93e6:	00 92 3b 00 	sts	0x003B, r0
    93ea:	0f 90       	pop	r0
    93ec:	0f be       	out	0x3f, r0	; 63
    93ee:	0f 90       	pop	r0
    93f0:	1f 90       	pop	r1
    93f2:	18 95       	reti

000093f4 <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    93f4:	1f 92       	push	r1
    93f6:	0f 92       	push	r0
    93f8:	0f b6       	in	r0, 0x3f	; 63
    93fa:	0f 92       	push	r0
    93fc:	00 90 3b 00 	lds	r0, 0x003B
    9400:	0f 92       	push	r0
    9402:	11 24       	eor	r1, r1
    9404:	2f 93       	push	r18
    9406:	3f 93       	push	r19
    9408:	4f 93       	push	r20
    940a:	5f 93       	push	r21
    940c:	6f 93       	push	r22
    940e:	7f 93       	push	r23
    9410:	8f 93       	push	r24
    9412:	9f 93       	push	r25
    9414:	af 93       	push	r26
    9416:	bf 93       	push	r27
    9418:	ef 93       	push	r30
    941a:	ff 93       	push	r31
    941c:	df 93       	push	r29
    941e:	cf 93       	push	r28
    9420:	cd b7       	in	r28, 0x3d	; 61
    9422:	de b7       	in	r29, 0x3e	; 62
    9424:	0e 94 2a 4a 	call	0x9454	; 0x9454 <_ls_handler>
    9428:	cf 91       	pop	r28
    942a:	df 91       	pop	r29
    942c:	ff 91       	pop	r31
    942e:	ef 91       	pop	r30
    9430:	bf 91       	pop	r27
    9432:	af 91       	pop	r26
    9434:	9f 91       	pop	r25
    9436:	8f 91       	pop	r24
    9438:	7f 91       	pop	r23
    943a:	6f 91       	pop	r22
    943c:	5f 91       	pop	r21
    943e:	4f 91       	pop	r20
    9440:	3f 91       	pop	r19
    9442:	2f 91       	pop	r18
    9444:	0f 90       	pop	r0
    9446:	00 92 3b 00 	sts	0x003B, r0
    944a:	0f 90       	pop	r0
    944c:	0f be       	out	0x3f, r0	; 63
    944e:	0f 90       	pop	r0
    9450:	1f 90       	pop	r1
    9452:	18 95       	reti

00009454 <_ls_handler>:

void _ls_handler() {
    9454:	df 93       	push	r29
    9456:	cf 93       	push	r28
    9458:	cd b7       	in	r28, 0x3d	; 61
    945a:	de b7       	in	r29, 0x3e	; 62
//	tg_kill();
	return;
}
    945c:	cf 91       	pop	r28
    945e:	df 91       	pop	r29
    9460:	08 95       	ret

00009462 <xio_rs485_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_rs485_init(const uint16_t control)
{
    9462:	df 93       	push	r29
    9464:	cf 93       	push	r28
    9466:	cd b7       	in	r28, 0x3d	; 61
    9468:	de b7       	in	r29, 0x3e	; 62
    946a:	29 97       	sbiw	r28, 0x09	; 9
    946c:	cd bf       	out	0x3d, r28	; 61
    946e:	de bf       	out	0x3e, r29	; 62
    9470:	88 87       	std	Y+8, r24	; 0x08
    9472:	99 87       	std	Y+9, r25	; 0x09
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    9474:	88 85       	ldd	r24, Y+8	; 0x08
    9476:	8f 70       	andi	r24, 0x0F	; 15
    9478:	8f 83       	std	Y+7, r24	; 0x07

	// transfer control flags to internal flag bits
	fr.flags = XIO_FLAG_RS485_DEFS_gm;		// set flags to defaults & initial state
    947a:	87 e3       	ldi	r24, 0x37	; 55
    947c:	90 e0       	ldi	r25, 0x00	; 0
    947e:	80 93 f9 23 	sts	0x23F9, r24
    9482:	90 93 fa 23 	sts	0x23FA, r25
	if (control & XIO_RD) {
    9486:	88 85       	ldd	r24, Y+8	; 0x08
    9488:	99 85       	ldd	r25, Y+9	; 0x09
    948a:	80 71       	andi	r24, 0x10	; 16
    948c:	90 70       	andi	r25, 0x00	; 0
    948e:	00 97       	sbiw	r24, 0x00	; 0
    9490:	49 f0       	breq	.+18     	; 0x94a4 <xio_rs485_init+0x42>
		fr.flags |= XIO_FLAG_RD_bm;
    9492:	80 91 f9 23 	lds	r24, 0x23F9
    9496:	90 91 fa 23 	lds	r25, 0x23FA
    949a:	81 60       	ori	r24, 0x01	; 1
    949c:	80 93 f9 23 	sts	0x23F9, r24
    94a0:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_WR) {
    94a4:	88 85       	ldd	r24, Y+8	; 0x08
    94a6:	99 85       	ldd	r25, Y+9	; 0x09
    94a8:	80 72       	andi	r24, 0x20	; 32
    94aa:	90 70       	andi	r25, 0x00	; 0
    94ac:	00 97       	sbiw	r24, 0x00	; 0
    94ae:	49 f0       	breq	.+18     	; 0x94c2 <xio_rs485_init+0x60>
		fr.flags |= XIO_FLAG_WR_bm;
    94b0:	80 91 f9 23 	lds	r24, 0x23F9
    94b4:	90 91 fa 23 	lds	r25, 0x23FA
    94b8:	82 60       	ori	r24, 0x02	; 2
    94ba:	80 93 f9 23 	sts	0x23F9, r24
    94be:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_BLOCK) {
    94c2:	88 85       	ldd	r24, Y+8	; 0x08
    94c4:	99 85       	ldd	r25, Y+9	; 0x09
    94c6:	80 74       	andi	r24, 0x40	; 64
    94c8:	90 70       	andi	r25, 0x00	; 0
    94ca:	00 97       	sbiw	r24, 0x00	; 0
    94cc:	49 f0       	breq	.+18     	; 0x94e0 <xio_rs485_init+0x7e>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    94ce:	80 91 f9 23 	lds	r24, 0x23F9
    94d2:	90 91 fa 23 	lds	r25, 0x23FA
    94d6:	84 60       	ori	r24, 0x04	; 4
    94d8:	80 93 f9 23 	sts	0x23F9, r24
    94dc:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_NOBLOCK) {
    94e0:	88 85       	ldd	r24, Y+8	; 0x08
    94e2:	99 85       	ldd	r25, Y+9	; 0x09
    94e4:	80 78       	andi	r24, 0x80	; 128
    94e6:	90 70       	andi	r25, 0x00	; 0
    94e8:	00 97       	sbiw	r24, 0x00	; 0
    94ea:	49 f0       	breq	.+18     	; 0x94fe <xio_rs485_init+0x9c>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    94ec:	80 91 f9 23 	lds	r24, 0x23F9
    94f0:	90 91 fa 23 	lds	r25, 0x23FA
    94f4:	8b 7f       	andi	r24, 0xFB	; 251
    94f6:	80 93 f9 23 	sts	0x23F9, r24
    94fa:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_ECHO) {
    94fe:	88 85       	ldd	r24, Y+8	; 0x08
    9500:	99 85       	ldd	r25, Y+9	; 0x09
    9502:	80 70       	andi	r24, 0x00	; 0
    9504:	91 70       	andi	r25, 0x01	; 1
    9506:	00 97       	sbiw	r24, 0x00	; 0
    9508:	49 f0       	breq	.+18     	; 0x951c <xio_rs485_init+0xba>
		fr.flags |= XIO_FLAG_ECHO_bm;
    950a:	80 91 f9 23 	lds	r24, 0x23F9
    950e:	90 91 fa 23 	lds	r25, 0x23FA
    9512:	80 61       	ori	r24, 0x10	; 16
    9514:	80 93 f9 23 	sts	0x23F9, r24
    9518:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_NOECHO) {
    951c:	88 85       	ldd	r24, Y+8	; 0x08
    951e:	99 85       	ldd	r25, Y+9	; 0x09
    9520:	80 70       	andi	r24, 0x00	; 0
    9522:	92 70       	andi	r25, 0x02	; 2
    9524:	00 97       	sbiw	r24, 0x00	; 0
    9526:	49 f0       	breq	.+18     	; 0x953a <xio_rs485_init+0xd8>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    9528:	80 91 f9 23 	lds	r24, 0x23F9
    952c:	90 91 fa 23 	lds	r25, 0x23FA
    9530:	8f 7e       	andi	r24, 0xEF	; 239
    9532:	80 93 f9 23 	sts	0x23F9, r24
    9536:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_CRLF) {
    953a:	88 85       	ldd	r24, Y+8	; 0x08
    953c:	99 85       	ldd	r25, Y+9	; 0x09
    953e:	80 70       	andi	r24, 0x00	; 0
    9540:	94 70       	andi	r25, 0x04	; 4
    9542:	00 97       	sbiw	r24, 0x00	; 0
    9544:	49 f0       	breq	.+18     	; 0x9558 <xio_rs485_init+0xf6>
		fr.flags |= XIO_FLAG_CRLF_bm;
    9546:	80 91 f9 23 	lds	r24, 0x23F9
    954a:	90 91 fa 23 	lds	r25, 0x23FA
    954e:	80 62       	ori	r24, 0x20	; 32
    9550:	80 93 f9 23 	sts	0x23F9, r24
    9554:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_NOCRLF) {
    9558:	88 85       	ldd	r24, Y+8	; 0x08
    955a:	99 85       	ldd	r25, Y+9	; 0x09
    955c:	80 70       	andi	r24, 0x00	; 0
    955e:	98 70       	andi	r25, 0x08	; 8
    9560:	00 97       	sbiw	r24, 0x00	; 0
    9562:	49 f0       	breq	.+18     	; 0x9576 <xio_rs485_init+0x114>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    9564:	80 91 f9 23 	lds	r24, 0x23F9
    9568:	90 91 fa 23 	lds	r25, 0x23FA
    956c:	8f 7d       	andi	r24, 0xDF	; 223
    956e:	80 93 f9 23 	sts	0x23F9, r24
    9572:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_LINEMODE) {
    9576:	88 85       	ldd	r24, Y+8	; 0x08
    9578:	99 85       	ldd	r25, Y+9	; 0x09
    957a:	80 70       	andi	r24, 0x00	; 0
    957c:	90 71       	andi	r25, 0x10	; 16
    957e:	00 97       	sbiw	r24, 0x00	; 0
    9580:	49 f0       	breq	.+18     	; 0x9594 <xio_rs485_init+0x132>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    9582:	80 91 f9 23 	lds	r24, 0x23F9
    9586:	90 91 fa 23 	lds	r25, 0x23FA
    958a:	80 64       	ori	r24, 0x40	; 64
    958c:	80 93 f9 23 	sts	0x23F9, r24
    9590:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_NOLINEMODE) {
    9594:	88 85       	ldd	r24, Y+8	; 0x08
    9596:	99 85       	ldd	r25, Y+9	; 0x09
    9598:	80 70       	andi	r24, 0x00	; 0
    959a:	90 72       	andi	r25, 0x20	; 32
    959c:	00 97       	sbiw	r24, 0x00	; 0
    959e:	49 f0       	breq	.+18     	; 0x95b2 <xio_rs485_init+0x150>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    95a0:	80 91 f9 23 	lds	r24, 0x23F9
    95a4:	90 91 fa 23 	lds	r25, 0x23FA
    95a8:	8f 7b       	andi	r24, 0xBF	; 191
    95aa:	80 93 f9 23 	sts	0x23F9, r24
    95ae:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_SEMICOLONS) {
    95b2:	88 85       	ldd	r24, Y+8	; 0x08
    95b4:	99 85       	ldd	r25, Y+9	; 0x09
    95b6:	80 70       	andi	r24, 0x00	; 0
    95b8:	90 74       	andi	r25, 0x40	; 64
    95ba:	00 97       	sbiw	r24, 0x00	; 0
    95bc:	49 f0       	breq	.+18     	; 0x95d0 <xio_rs485_init+0x16e>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    95be:	80 91 f9 23 	lds	r24, 0x23F9
    95c2:	90 91 fa 23 	lds	r25, 0x23FA
    95c6:	80 68       	ori	r24, 0x80	; 128
    95c8:	80 93 f9 23 	sts	0x23F9, r24
    95cc:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    95d0:	88 85       	ldd	r24, Y+8	; 0x08
    95d2:	99 85       	ldd	r25, Y+9	; 0x09
    95d4:	99 23       	and	r25, r25
    95d6:	4c f4       	brge	.+18     	; 0x95ea <xio_rs485_init+0x188>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    95d8:	80 91 f9 23 	lds	r24, 0x23F9
    95dc:	90 91 fa 23 	lds	r25, 0x23FA
    95e0:	8f 77       	andi	r24, 0x7F	; 127
    95e2:	80 93 f9 23 	sts	0x23F9, r24
    95e6:	90 93 fa 23 	sts	0x23FA, r25
	}

	// character signals and error returns
	fr.sig = 0;
    95ea:	10 92 fc 23 	sts	0x23FC, r1
	dev_rs485.udata = &(fr.sig);				// bind sig register to FILE struct
    95ee:	8c ef       	ldi	r24, 0xFC	; 252
    95f0:	93 e2       	ldi	r25, 0x23	; 35
    95f2:	80 93 2b 20 	sts	0x202B, r24
    95f6:	90 93 2c 20 	sts	0x202C, r25

	// setup internal RX/TX buffers
	fr.rx_buf_head = 1;						// can't use location 0
    95fa:	81 e0       	ldi	r24, 0x01	; 1
    95fc:	80 93 03 24 	sts	0x2403, r24
	fr.rx_buf_tail = 1;
    9600:	81 e0       	ldi	r24, 0x01	; 1
    9602:	80 93 02 24 	sts	0x2402, r24
	fr.tx_buf_head = 1;
    9606:	81 e0       	ldi	r24, 0x01	; 1
    9608:	80 93 05 24 	sts	0x2405, r24
	fr.tx_buf_tail = 1;
    960c:	81 e0       	ldi	r24, 0x01	; 1
    960e:	80 93 04 24 	sts	0x2404, r24
	fr.len = sizeof(fr.buf);					// offset to zero
    9612:	82 e0       	ldi	r24, 0x02	; 2
    9614:	80 93 ff 23 	sts	0x23FF, r24

	fr.usart = &RS485_USART;				// bind USART structure
    9618:	80 eb       	ldi	r24, 0xB0	; 176
    961a:	98 e0       	ldi	r25, 0x08	; 8
    961c:	80 93 32 24 	sts	0x2432, r24
    9620:	90 93 33 24 	sts	0x2433, r25
	fr.port = &RS485_PORT;					// bind PORT structure
    9624:	80 e4       	ldi	r24, 0x40	; 64
    9626:	96 e0       	ldi	r25, 0x06	; 6
    9628:	80 93 34 24 	sts	0x2434, r24
    962c:	90 93 35 24 	sts	0x2435, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    9630:	8f 81       	ldd	r24, Y+7	; 0x07
    9632:	88 23       	and	r24, r24
    9634:	11 f4       	brne	.+4      	; 0x963a <xio_rs485_init+0x1d8>
		baud = XIO_BAUD_DEFAULT;
    9636:	85 e0       	ldi	r24, 0x05	; 5
    9638:	8f 83       	std	Y+7, r24	; 0x07
	}
	fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    963a:	a0 91 32 24 	lds	r26, 0x2432
    963e:	b0 91 33 24 	lds	r27, 0x2433
    9642:	8f 81       	ldd	r24, Y+7	; 0x07
    9644:	88 2f       	mov	r24, r24
    9646:	90 e0       	ldi	r25, 0x00	; 0
    9648:	8c 5d       	subi	r24, 0xDC	; 220
    964a:	98 4f       	sbci	r25, 0xF8	; 248
    964c:	8d 83       	std	Y+5, r24	; 0x05
    964e:	9e 83       	std	Y+6, r25	; 0x06
    9650:	ed 81       	ldd	r30, Y+5	; 0x05
    9652:	fe 81       	ldd	r31, Y+6	; 0x06
    9654:	84 91       	lpm	r24, Z+
    9656:	8c 83       	std	Y+4, r24	; 0x04
    9658:	8c 81       	ldd	r24, Y+4	; 0x04
    965a:	16 96       	adiw	r26, 0x06	; 6
    965c:	8c 93       	st	X, r24
	fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    965e:	a0 91 32 24 	lds	r26, 0x2432
    9662:	b0 91 33 24 	lds	r27, 0x2433
    9666:	8f 81       	ldd	r24, Y+7	; 0x07
    9668:	88 2f       	mov	r24, r24
    966a:	90 e0       	ldi	r25, 0x00	; 0
    966c:	81 5d       	subi	r24, 0xD1	; 209
    966e:	98 4f       	sbci	r25, 0xF8	; 248
    9670:	8a 83       	std	Y+2, r24	; 0x02
    9672:	9b 83       	std	Y+3, r25	; 0x03
    9674:	ea 81       	ldd	r30, Y+2	; 0x02
    9676:	fb 81       	ldd	r31, Y+3	; 0x03
    9678:	84 91       	lpm	r24, Z+
    967a:	89 83       	std	Y+1, r24	; 0x01
    967c:	89 81       	ldd	r24, Y+1	; 0x01
    967e:	17 96       	adiw	r26, 0x07	; 7
    9680:	8c 93       	st	X, r24
    9682:	17 97       	sbiw	r26, 0x07	; 7
	fr.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx on USART
    9684:	e0 91 32 24 	lds	r30, 0x2432
    9688:	f0 91 33 24 	lds	r31, 0x2433
    968c:	88 e1       	ldi	r24, 0x18	; 24
    968e:	84 83       	std	Z+4, r24	; 0x04
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    9690:	e0 91 32 24 	lds	r30, 0x2432
    9694:	f0 91 33 24 	lds	r31, 0x2433
    9698:	81 e2       	ldi	r24, 0x21	; 33
    969a:	83 83       	std	Z+3, r24	; 0x03

	fr.port->DIRCLR = RS485_RX_bm;	// clr RX pin as input
    969c:	e0 91 34 24 	lds	r30, 0x2434
    96a0:	f0 91 35 24 	lds	r31, 0x2435
    96a4:	80 e4       	ldi	r24, 0x40	; 64
    96a6:	82 83       	std	Z+2, r24	; 0x02
	fr.port->DIRSET = RS485_TX_bm; 	// set TX pin as output
    96a8:	e0 91 34 24 	lds	r30, 0x2434
    96ac:	f0 91 35 24 	lds	r31, 0x2435
    96b0:	80 e8       	ldi	r24, 0x80	; 128
    96b2:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTSET = RS485_TX_bm;	// set TX HI as initial state
    96b4:	e0 91 34 24 	lds	r30, 0x2434
    96b8:	f0 91 35 24 	lds	r31, 0x2435
    96bc:	80 e8       	ldi	r24, 0x80	; 128
    96be:	85 83       	std	Z+5, r24	; 0x05
	fr.port->DIRSET = RS485_DE_bm; 	// Data Enable (TX) to output (TX enabled hi)
    96c0:	e0 91 34 24 	lds	r30, 0x2434
    96c4:	f0 91 35 24 	lds	r31, 0x2435
    96c8:	80 e2       	ldi	r24, 0x20	; 32
    96ca:	81 83       	std	Z+1, r24	; 0x01
	fr.port->DIRSET = RS485_RE_bm; 	// Recv Enable (RX) to output (RX enabled lo)
    96cc:	e0 91 34 24 	lds	r30, 0x2434
    96d0:	f0 91 35 24 	lds	r31, 0x2435
    96d4:	80 e1       	ldi	r24, 0x10	; 16
    96d6:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTCLR = RS485_DE_bm;	// DE lo initially (TX disabled)
    96d8:	e0 91 34 24 	lds	r30, 0x2434
    96dc:	f0 91 35 24 	lds	r31, 0x2435
    96e0:	80 e2       	ldi	r24, 0x20	; 32
    96e2:	86 83       	std	Z+6, r24	; 0x06
	fr.port->OUTCLR = RS485_RE_bm; 	// RE lo initially (RX enabled)
    96e4:	e0 91 34 24 	lds	r30, 0x2434
    96e8:	f0 91 35 24 	lds	r31, 0x2435
    96ec:	80 e1       	ldi	r24, 0x10	; 16
    96ee:	86 83       	std	Z+6, r24	; 0x06
}
    96f0:	29 96       	adiw	r28, 0x09	; 9
    96f2:	cd bf       	out	0x3d, r28	; 61
    96f4:	de bf       	out	0x3e, r29	; 62
    96f6:	cf 91       	pop	r28
    96f8:	df 91       	pop	r29
    96fa:	08 95       	ret

000096fc <xio_rs485_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_rs485_control(const uint16_t control, const int16_t arg)
{
    96fc:	df 93       	push	r29
    96fe:	cf 93       	push	r28
    9700:	cd b7       	in	r28, 0x3d	; 61
    9702:	de b7       	in	r29, 0x3e	; 62
    9704:	2a 97       	sbiw	r28, 0x0a	; 10
    9706:	cd bf       	out	0x3d, r28	; 61
    9708:	de bf       	out	0x3e, r29	; 62
    970a:	8f 83       	std	Y+7, r24	; 0x07
    970c:	98 87       	std	Y+8, r25	; 0x08
    970e:	69 87       	std	Y+9, r22	; 0x09
    9710:	7a 87       	std	Y+10, r23	; 0x0a
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    9712:	8f 81       	ldd	r24, Y+7	; 0x07
    9714:	98 85       	ldd	r25, Y+8	; 0x08
    9716:	8f 70       	andi	r24, 0x0F	; 15
    9718:	90 70       	andi	r25, 0x00	; 0
    971a:	00 97       	sbiw	r24, 0x00	; 0
    971c:	39 f1       	breq	.+78     	; 0x976c <xio_rs485_control+0x70>
		fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    971e:	a0 91 32 24 	lds	r26, 0x2432
    9722:	b0 91 33 24 	lds	r27, 0x2433
    9726:	8f 81       	ldd	r24, Y+7	; 0x07
    9728:	98 85       	ldd	r25, Y+8	; 0x08
    972a:	8f 70       	andi	r24, 0x0F	; 15
    972c:	90 70       	andi	r25, 0x00	; 0
    972e:	8c 5d       	subi	r24, 0xDC	; 220
    9730:	98 4f       	sbci	r25, 0xF8	; 248
    9732:	8d 83       	std	Y+5, r24	; 0x05
    9734:	9e 83       	std	Y+6, r25	; 0x06
    9736:	ed 81       	ldd	r30, Y+5	; 0x05
    9738:	fe 81       	ldd	r31, Y+6	; 0x06
    973a:	84 91       	lpm	r24, Z+
    973c:	8c 83       	std	Y+4, r24	; 0x04
    973e:	8c 81       	ldd	r24, Y+4	; 0x04
    9740:	16 96       	adiw	r26, 0x06	; 6
    9742:	8c 93       	st	X, r24
		fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    9744:	a0 91 32 24 	lds	r26, 0x2432
    9748:	b0 91 33 24 	lds	r27, 0x2433
    974c:	8f 81       	ldd	r24, Y+7	; 0x07
    974e:	98 85       	ldd	r25, Y+8	; 0x08
    9750:	8f 70       	andi	r24, 0x0F	; 15
    9752:	90 70       	andi	r25, 0x00	; 0
    9754:	81 5d       	subi	r24, 0xD1	; 209
    9756:	98 4f       	sbci	r25, 0xF8	; 248
    9758:	8a 83       	std	Y+2, r24	; 0x02
    975a:	9b 83       	std	Y+3, r25	; 0x03
    975c:	ea 81       	ldd	r30, Y+2	; 0x02
    975e:	fb 81       	ldd	r31, Y+3	; 0x03
    9760:	84 91       	lpm	r24, Z+
    9762:	89 83       	std	Y+1, r24	; 0x01
    9764:	89 81       	ldd	r24, Y+1	; 0x01
    9766:	17 96       	adiw	r26, 0x07	; 7
    9768:	8c 93       	st	X, r24
    976a:	17 97       	sbiw	r26, 0x07	; 7
	}
	if (control & XIO_BLOCK) {
    976c:	8f 81       	ldd	r24, Y+7	; 0x07
    976e:	98 85       	ldd	r25, Y+8	; 0x08
    9770:	80 74       	andi	r24, 0x40	; 64
    9772:	90 70       	andi	r25, 0x00	; 0
    9774:	00 97       	sbiw	r24, 0x00	; 0
    9776:	49 f0       	breq	.+18     	; 0x978a <xio_rs485_control+0x8e>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    9778:	80 91 f9 23 	lds	r24, 0x23F9
    977c:	90 91 fa 23 	lds	r25, 0x23FA
    9780:	84 60       	ori	r24, 0x04	; 4
    9782:	80 93 f9 23 	sts	0x23F9, r24
    9786:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_NOBLOCK) {
    978a:	8f 81       	ldd	r24, Y+7	; 0x07
    978c:	98 85       	ldd	r25, Y+8	; 0x08
    978e:	80 78       	andi	r24, 0x80	; 128
    9790:	90 70       	andi	r25, 0x00	; 0
    9792:	00 97       	sbiw	r24, 0x00	; 0
    9794:	49 f0       	breq	.+18     	; 0x97a8 <xio_rs485_control+0xac>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    9796:	80 91 f9 23 	lds	r24, 0x23F9
    979a:	90 91 fa 23 	lds	r25, 0x23FA
    979e:	8b 7f       	andi	r24, 0xFB	; 251
    97a0:	80 93 f9 23 	sts	0x23F9, r24
    97a4:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_ECHO) {
    97a8:	8f 81       	ldd	r24, Y+7	; 0x07
    97aa:	98 85       	ldd	r25, Y+8	; 0x08
    97ac:	80 70       	andi	r24, 0x00	; 0
    97ae:	91 70       	andi	r25, 0x01	; 1
    97b0:	00 97       	sbiw	r24, 0x00	; 0
    97b2:	49 f0       	breq	.+18     	; 0x97c6 <xio_rs485_control+0xca>
		fr.flags |= XIO_FLAG_ECHO_bm;
    97b4:	80 91 f9 23 	lds	r24, 0x23F9
    97b8:	90 91 fa 23 	lds	r25, 0x23FA
    97bc:	80 61       	ori	r24, 0x10	; 16
    97be:	80 93 f9 23 	sts	0x23F9, r24
    97c2:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_NOECHO) {
    97c6:	8f 81       	ldd	r24, Y+7	; 0x07
    97c8:	98 85       	ldd	r25, Y+8	; 0x08
    97ca:	80 70       	andi	r24, 0x00	; 0
    97cc:	92 70       	andi	r25, 0x02	; 2
    97ce:	00 97       	sbiw	r24, 0x00	; 0
    97d0:	49 f0       	breq	.+18     	; 0x97e4 <xio_rs485_control+0xe8>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    97d2:	80 91 f9 23 	lds	r24, 0x23F9
    97d6:	90 91 fa 23 	lds	r25, 0x23FA
    97da:	8f 7e       	andi	r24, 0xEF	; 239
    97dc:	80 93 f9 23 	sts	0x23F9, r24
    97e0:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_CRLF) {
    97e4:	8f 81       	ldd	r24, Y+7	; 0x07
    97e6:	98 85       	ldd	r25, Y+8	; 0x08
    97e8:	80 70       	andi	r24, 0x00	; 0
    97ea:	94 70       	andi	r25, 0x04	; 4
    97ec:	00 97       	sbiw	r24, 0x00	; 0
    97ee:	49 f0       	breq	.+18     	; 0x9802 <xio_rs485_control+0x106>
		fr.flags |= XIO_FLAG_CRLF_bm;
    97f0:	80 91 f9 23 	lds	r24, 0x23F9
    97f4:	90 91 fa 23 	lds	r25, 0x23FA
    97f8:	80 62       	ori	r24, 0x20	; 32
    97fa:	80 93 f9 23 	sts	0x23F9, r24
    97fe:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_NOCRLF) {
    9802:	8f 81       	ldd	r24, Y+7	; 0x07
    9804:	98 85       	ldd	r25, Y+8	; 0x08
    9806:	80 70       	andi	r24, 0x00	; 0
    9808:	98 70       	andi	r25, 0x08	; 8
    980a:	00 97       	sbiw	r24, 0x00	; 0
    980c:	49 f0       	breq	.+18     	; 0x9820 <xio_rs485_control+0x124>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    980e:	80 91 f9 23 	lds	r24, 0x23F9
    9812:	90 91 fa 23 	lds	r25, 0x23FA
    9816:	8f 7d       	andi	r24, 0xDF	; 223
    9818:	80 93 f9 23 	sts	0x23F9, r24
    981c:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_LINEMODE) {
    9820:	8f 81       	ldd	r24, Y+7	; 0x07
    9822:	98 85       	ldd	r25, Y+8	; 0x08
    9824:	80 70       	andi	r24, 0x00	; 0
    9826:	90 71       	andi	r25, 0x10	; 16
    9828:	00 97       	sbiw	r24, 0x00	; 0
    982a:	49 f0       	breq	.+18     	; 0x983e <xio_rs485_control+0x142>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    982c:	80 91 f9 23 	lds	r24, 0x23F9
    9830:	90 91 fa 23 	lds	r25, 0x23FA
    9834:	80 64       	ori	r24, 0x40	; 64
    9836:	80 93 f9 23 	sts	0x23F9, r24
    983a:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_NOLINEMODE) {
    983e:	8f 81       	ldd	r24, Y+7	; 0x07
    9840:	98 85       	ldd	r25, Y+8	; 0x08
    9842:	80 70       	andi	r24, 0x00	; 0
    9844:	90 72       	andi	r25, 0x20	; 32
    9846:	00 97       	sbiw	r24, 0x00	; 0
    9848:	49 f0       	breq	.+18     	; 0x985c <xio_rs485_control+0x160>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    984a:	80 91 f9 23 	lds	r24, 0x23F9
    984e:	90 91 fa 23 	lds	r25, 0x23FA
    9852:	8f 7b       	andi	r24, 0xBF	; 191
    9854:	80 93 f9 23 	sts	0x23F9, r24
    9858:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_SEMICOLONS) {
    985c:	8f 81       	ldd	r24, Y+7	; 0x07
    985e:	98 85       	ldd	r25, Y+8	; 0x08
    9860:	80 70       	andi	r24, 0x00	; 0
    9862:	90 74       	andi	r25, 0x40	; 64
    9864:	00 97       	sbiw	r24, 0x00	; 0
    9866:	49 f0       	breq	.+18     	; 0x987a <xio_rs485_control+0x17e>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    9868:	80 91 f9 23 	lds	r24, 0x23F9
    986c:	90 91 fa 23 	lds	r25, 0x23FA
    9870:	80 68       	ori	r24, 0x80	; 128
    9872:	80 93 f9 23 	sts	0x23F9, r24
    9876:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    987a:	8f 81       	ldd	r24, Y+7	; 0x07
    987c:	98 85       	ldd	r25, Y+8	; 0x08
    987e:	99 23       	and	r25, r25
    9880:	4c f4       	brge	.+18     	; 0x9894 <xio_rs485_control+0x198>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    9882:	80 91 f9 23 	lds	r24, 0x23F9
    9886:	90 91 fa 23 	lds	r25, 0x23FA
    988a:	8f 77       	andi	r24, 0x7F	; 127
    988c:	80 93 f9 23 	sts	0x23F9, r24
    9890:	90 93 fa 23 	sts	0x23FA, r25
	}
	return (0);
    9894:	80 e0       	ldi	r24, 0x00	; 0
}
    9896:	2a 96       	adiw	r28, 0x0a	; 10
    9898:	cd bf       	out	0x3d, r28	; 61
    989a:	de bf       	out	0x3e, r29	; 62
    989c:	cf 91       	pop	r28
    989e:	df 91       	pop	r29
    98a0:	08 95       	ret

000098a2 <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)		//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    98a2:	1f 92       	push	r1
    98a4:	0f 92       	push	r0
    98a6:	0f b6       	in	r0, 0x3f	; 63
    98a8:	0f 92       	push	r0
    98aa:	00 90 3b 00 	lds	r0, 0x003B
    98ae:	0f 92       	push	r0
    98b0:	11 24       	eor	r1, r1
    98b2:	2f 93       	push	r18
    98b4:	3f 93       	push	r19
    98b6:	4f 93       	push	r20
    98b8:	5f 93       	push	r21
    98ba:	6f 93       	push	r22
    98bc:	7f 93       	push	r23
    98be:	8f 93       	push	r24
    98c0:	9f 93       	push	r25
    98c2:	af 93       	push	r26
    98c4:	bf 93       	push	r27
    98c6:	ef 93       	push	r30
    98c8:	ff 93       	push	r31
    98ca:	df 93       	push	r29
    98cc:	cf 93       	push	r28
    98ce:	0f 92       	push	r0
    98d0:	cd b7       	in	r28, 0x3d	; 61
    98d2:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = fr.usart->DATA;					// can only read DATA once
    98d4:	e0 91 32 24 	lds	r30, 0x2432
    98d8:	f0 91 33 24 	lds	r31, 0x2433
    98dc:	80 81       	ld	r24, Z
    98de:	89 83       	std	Y+1, r24	; 0x01

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    98e0:	89 81       	ldd	r24, Y+1	; 0x01
    98e2:	83 30       	cpi	r24, 0x03	; 3
    98e4:	31 f4       	brne	.+12     	; 0x98f2 <__vector_28+0x50>
		fr.sig = XIO_SIG_KILL;					// set signal value
    98e6:	84 e0       	ldi	r24, 0x04	; 4
    98e8:	80 93 fc 23 	sts	0x23FC, r24
		signal_etx();							// call app-specific signal handler
    98ec:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <signal_etx>
    98f0:	28 c0       	rjmp	.+80     	; 0x9942 <__vector_28+0xa0>
		return;
	}

	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// advance buffer head with wrap
    98f2:	80 91 03 24 	lds	r24, 0x2403
    98f6:	81 50       	subi	r24, 0x01	; 1
    98f8:	80 93 03 24 	sts	0x2403, r24
    98fc:	80 91 03 24 	lds	r24, 0x2403
    9900:	88 23       	and	r24, r24
    9902:	19 f4       	brne	.+6      	; 0x990a <__vector_28+0x68>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    9904:	88 e1       	ldi	r24, 0x18	; 24
    9906:	80 93 03 24 	sts	0x2403, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    990a:	90 91 03 24 	lds	r25, 0x2403
    990e:	80 91 02 24 	lds	r24, 0x2402
    9912:	98 17       	cp	r25, r24
    9914:	51 f0       	breq	.+20     	; 0x992a <__vector_28+0x88>
		fr.rx_buf[fr.rx_buf_head] = c;			// (= USARTC0.DATA;)
    9916:	80 91 03 24 	lds	r24, 0x2403
    991a:	88 2f       	mov	r24, r24
    991c:	90 e0       	ldi	r25, 0x00	; 0
    991e:	fc 01       	movw	r30, r24
    9920:	e9 5f       	subi	r30, 0xF9	; 249
    9922:	fb 4d       	sbci	r31, 0xDB	; 219
    9924:	89 81       	ldd	r24, Y+1	; 0x01
    9926:	80 83       	st	Z, r24
    9928:	0c c0       	rjmp	.+24     	; 0x9942 <__vector_28+0xa0>
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    992a:	80 91 03 24 	lds	r24, 0x2403
    992e:	8f 5f       	subi	r24, 0xFF	; 255
    9930:	80 93 03 24 	sts	0x2403, r24
    9934:	80 91 03 24 	lds	r24, 0x2403
    9938:	89 31       	cpi	r24, 0x19	; 25
    993a:	18 f0       	brcs	.+6      	; 0x9942 <__vector_28+0xa0>
		fr.rx_buf_head = 1;
    993c:	81 e0       	ldi	r24, 0x01	; 1
    993e:	80 93 03 24 	sts	0x2403, r24
	}
	// activate flow control here or before it gets to this level
}
    9942:	0f 90       	pop	r0
    9944:	cf 91       	pop	r28
    9946:	df 91       	pop	r29
    9948:	ff 91       	pop	r31
    994a:	ef 91       	pop	r30
    994c:	bf 91       	pop	r27
    994e:	af 91       	pop	r26
    9950:	9f 91       	pop	r25
    9952:	8f 91       	pop	r24
    9954:	7f 91       	pop	r23
    9956:	6f 91       	pop	r22
    9958:	5f 91       	pop	r21
    995a:	4f 91       	pop	r20
    995c:	3f 91       	pop	r19
    995e:	2f 91       	pop	r18
    9960:	0f 90       	pop	r0
    9962:	00 92 3b 00 	sts	0x003B, r0
    9966:	0f 90       	pop	r0
    9968:	0f be       	out	0x3f, r0	; 63
    996a:	0f 90       	pop	r0
    996c:	1f 90       	pop	r1
    996e:	18 95       	reti

00009970 <xio_rs485_queue_RX_char>:
/*
 * xio_rs485_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_rs485_queue_RX_char(const char c)
{
    9970:	df 93       	push	r29
    9972:	cf 93       	push	r28
    9974:	0f 92       	push	r0
    9976:	cd b7       	in	r28, 0x3d	; 61
    9978:	de b7       	in	r29, 0x3e	; 62
    997a:	89 83       	std	Y+1, r24	; 0x01
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    997c:	89 81       	ldd	r24, Y+1	; 0x01
    997e:	83 30       	cpi	r24, 0x03	; 3
    9980:	31 f4       	brne	.+12     	; 0x998e <xio_rs485_queue_RX_char+0x1e>
		fr.sig = XIO_SIG_KILL;					// set signal value
    9982:	84 e0       	ldi	r24, 0x04	; 4
    9984:	80 93 fc 23 	sts	0x23FC, r24
		signal_etx();							// call app-specific signal handler
    9988:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <signal_etx>
    998c:	28 c0       	rjmp	.+80     	; 0x99de <xio_rs485_queue_RX_char+0x6e>
		return;
	}

	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// wrap condition
    998e:	80 91 03 24 	lds	r24, 0x2403
    9992:	81 50       	subi	r24, 0x01	; 1
    9994:	80 93 03 24 	sts	0x2403, r24
    9998:	80 91 03 24 	lds	r24, 0x2403
    999c:	88 23       	and	r24, r24
    999e:	19 f4       	brne	.+6      	; 0x99a6 <xio_rs485_queue_RX_char+0x36>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    99a0:	88 e1       	ldi	r24, 0x18	; 24
    99a2:	80 93 03 24 	sts	0x2403, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    99a6:	90 91 03 24 	lds	r25, 0x2403
    99aa:	80 91 02 24 	lds	r24, 0x2402
    99ae:	98 17       	cp	r25, r24
    99b0:	51 f0       	breq	.+20     	; 0x99c6 <xio_rs485_queue_RX_char+0x56>
		fr.rx_buf[fr.rx_buf_head] = c;			// FAKE INPUT DATA
    99b2:	80 91 03 24 	lds	r24, 0x2403
    99b6:	88 2f       	mov	r24, r24
    99b8:	90 e0       	ldi	r25, 0x00	; 0
    99ba:	fc 01       	movw	r30, r24
    99bc:	e9 5f       	subi	r30, 0xF9	; 249
    99be:	fb 4d       	sbci	r31, 0xDB	; 219
    99c0:	89 81       	ldd	r24, Y+1	; 0x01
    99c2:	80 83       	st	Z, r24
    99c4:	0c c0       	rjmp	.+24     	; 0x99de <xio_rs485_queue_RX_char+0x6e>
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    99c6:	80 91 03 24 	lds	r24, 0x2403
    99ca:	8f 5f       	subi	r24, 0xFF	; 255
    99cc:	80 93 03 24 	sts	0x2403, r24
    99d0:	80 91 03 24 	lds	r24, 0x2403
    99d4:	89 31       	cpi	r24, 0x19	; 25
    99d6:	18 f0       	brcs	.+6      	; 0x99de <xio_rs485_queue_RX_char+0x6e>
		fr.rx_buf_head = 1;
    99d8:	81 e0       	ldi	r24, 0x01	; 1
    99da:	80 93 03 24 	sts	0x2403, r24
	}
}
    99de:	0f 90       	pop	r0
    99e0:	cf 91       	pop	r28
    99e2:	df 91       	pop	r29
    99e4:	08 95       	ret

000099e6 <xio_rs485_queue_RX_string>:
/*
 * xio_rs485_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_rs485_queue_RX_string(char *buf)
{
    99e6:	df 93       	push	r29
    99e8:	cf 93       	push	r28
    99ea:	cd b7       	in	r28, 0x3d	; 61
    99ec:	de b7       	in	r29, 0x3e	; 62
    99ee:	25 97       	sbiw	r28, 0x05	; 5
    99f0:	cd bf       	out	0x3d, r28	; 61
    99f2:	de bf       	out	0x3e, r29	; 62
    99f4:	8b 83       	std	Y+3, r24	; 0x03
    99f6:	9c 83       	std	Y+4, r25	; 0x04
	char c;
	uint8_t i=0;
    99f8:	19 82       	std	Y+1, r1	; 0x01
    99fa:	03 c0       	rjmp	.+6      	; 0x9a02 <xio_rs485_queue_RX_string+0x1c>

	while ((c = buf[i++]) != NUL) {
		xio_rs485_queue_RX_char(c);
    99fc:	8a 81       	ldd	r24, Y+2	; 0x02
    99fe:	0e 94 b8 4c 	call	0x9970	; 0x9970 <xio_rs485_queue_RX_char>
void xio_rs485_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    9a02:	89 81       	ldd	r24, Y+1	; 0x01
    9a04:	28 2f       	mov	r18, r24
    9a06:	30 e0       	ldi	r19, 0x00	; 0
    9a08:	8b 81       	ldd	r24, Y+3	; 0x03
    9a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    9a0c:	fc 01       	movw	r30, r24
    9a0e:	e2 0f       	add	r30, r18
    9a10:	f3 1f       	adc	r31, r19
    9a12:	80 81       	ld	r24, Z
    9a14:	8a 83       	std	Y+2, r24	; 0x02
    9a16:	8a 81       	ldd	r24, Y+2	; 0x02
    9a18:	8d 83       	std	Y+5, r24	; 0x05
    9a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    9a1c:	88 23       	and	r24, r24
    9a1e:	11 f0       	breq	.+4      	; 0x9a24 <xio_rs485_queue_RX_string+0x3e>
    9a20:	81 e0       	ldi	r24, 0x01	; 1
    9a22:	8d 83       	std	Y+5, r24	; 0x05
    9a24:	8d 81       	ldd	r24, Y+5	; 0x05
    9a26:	99 81       	ldd	r25, Y+1	; 0x01
    9a28:	9f 5f       	subi	r25, 0xFF	; 255
    9a2a:	99 83       	std	Y+1, r25	; 0x01
    9a2c:	88 23       	and	r24, r24
    9a2e:	31 f7       	brne	.-52     	; 0x99fc <xio_rs485_queue_RX_string+0x16>
		xio_rs485_queue_RX_char(c);
	}
}
    9a30:	25 96       	adiw	r28, 0x05	; 5
    9a32:	cd bf       	out	0x3d, r28	; 61
    9a34:	de bf       	out	0x3e, r29	; 62
    9a36:	cf 91       	pop	r28
    9a38:	df 91       	pop	r29
    9a3a:	08 95       	ret

00009a3c <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC0 data register empty
{
    9a3c:	1f 92       	push	r1
    9a3e:	0f 92       	push	r0
    9a40:	0f b6       	in	r0, 0x3f	; 63
    9a42:	0f 92       	push	r0
    9a44:	00 90 3b 00 	lds	r0, 0x003B
    9a48:	0f 92       	push	r0
    9a4a:	11 24       	eor	r1, r1
    9a4c:	8f 93       	push	r24
    9a4e:	9f 93       	push	r25
    9a50:	af 93       	push	r26
    9a52:	bf 93       	push	r27
    9a54:	ef 93       	push	r30
    9a56:	ff 93       	push	r31
    9a58:	df 93       	push	r29
    9a5a:	cf 93       	push	r28
    9a5c:	cd b7       	in	r28, 0x3d	; 61
    9a5e:	de b7       	in	r29, 0x3e	; 62
	if (fr.tx_buf_head == fr.tx_buf_tail) {			// buffer empty - disable ints
    9a60:	90 91 05 24 	lds	r25, 0x2405
    9a64:	80 91 04 24 	lds	r24, 0x2404
    9a68:	98 17       	cp	r25, r24
    9a6a:	39 f4       	brne	.+14     	; 0x9a7a <__vector_29+0x3e>
		fr.usart->CTRLA = USART_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    9a6c:	e0 91 32 24 	lds	r30, 0x2432
    9a70:	f0 91 33 24 	lds	r31, 0x2433
    9a74:	80 e2       	ldi	r24, 0x20	; 32
    9a76:	83 83       	std	Z+3, r24	; 0x03
    9a78:	21 c0       	rjmp	.+66     	; 0x9abc <__vector_29+0x80>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(fr.flags)) {
    9a7a:	80 91 f9 23 	lds	r24, 0x23F9
    9a7e:	90 91 fa 23 	lds	r25, 0x23FA
    9a82:	80 70       	andi	r24, 0x00	; 0
    9a84:	98 70       	andi	r25, 0x08	; 8
    9a86:	00 97       	sbiw	r24, 0x00	; 0
    9a88:	c9 f4       	brne	.+50     	; 0x9abc <__vector_29+0x80>
		if (--(fr.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    9a8a:	80 91 04 24 	lds	r24, 0x2404
    9a8e:	81 50       	subi	r24, 0x01	; 1
    9a90:	80 93 04 24 	sts	0x2404, r24
    9a94:	80 91 04 24 	lds	r24, 0x2404
    9a98:	88 23       	and	r24, r24
    9a9a:	19 f4       	brne	.+6      	; 0x9aa2 <__vector_29+0x66>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    9a9c:	81 e1       	ldi	r24, 0x11	; 17
    9a9e:	80 93 04 24 	sts	0x2404, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];	// write char to TX DATA register
    9aa2:	a0 91 32 24 	lds	r26, 0x2432
    9aa6:	b0 91 33 24 	lds	r27, 0x2433
    9aaa:	80 91 04 24 	lds	r24, 0x2404
    9aae:	88 2f       	mov	r24, r24
    9ab0:	90 e0       	ldi	r25, 0x00	; 0
    9ab2:	fc 01       	movw	r30, r24
    9ab4:	e0 5e       	subi	r30, 0xE0	; 224
    9ab6:	fb 4d       	sbci	r31, 0xDB	; 219
    9ab8:	80 81       	ld	r24, Z
    9aba:	8c 93       	st	X, r24
	}
}
    9abc:	cf 91       	pop	r28
    9abe:	df 91       	pop	r29
    9ac0:	ff 91       	pop	r31
    9ac2:	ef 91       	pop	r30
    9ac4:	bf 91       	pop	r27
    9ac6:	af 91       	pop	r26
    9ac8:	9f 91       	pop	r25
    9aca:	8f 91       	pop	r24
    9acc:	0f 90       	pop	r0
    9ace:	00 92 3b 00 	sts	0x003B, r0
    9ad2:	0f 90       	pop	r0
    9ad4:	0f be       	out	0x3f, r0	; 63
    9ad6:	0f 90       	pop	r0
    9ad8:	1f 90       	pop	r1
    9ada:	18 95       	reti

00009adc <xio_rs485_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_rs485_putc(const char c, FILE *stream)
{
    9adc:	df 93       	push	r29
    9ade:	cf 93       	push	r28
    9ae0:	cd b7       	in	r28, 0x3d	; 61
    9ae2:	de b7       	in	r29, 0x3e	; 62
    9ae4:	25 97       	sbiw	r28, 0x05	; 5
    9ae6:	cd bf       	out	0x3d, r28	; 61
    9ae8:	de bf       	out	0x3e, r29	; 62
    9aea:	89 83       	std	Y+1, r24	; 0x01
    9aec:	6a 83       	std	Y+2, r22	; 0x02
    9aee:	7b 83       	std	Y+3, r23	; 0x03
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
    9af0:	80 91 05 24 	lds	r24, 0x2405
    9af4:	81 50       	subi	r24, 0x01	; 1
    9af6:	80 93 06 24 	sts	0x2406, r24
    9afa:	80 91 06 24 	lds	r24, 0x2406
    9afe:	88 23       	and	r24, r24
    9b00:	21 f5       	brne	.+72     	; 0x9b4a <xio_rs485_putc+0x6e>
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
    9b02:	81 e1       	ldi	r24, 0x11	; 17
    9b04:	80 93 06 24 	sts	0x2406, r24
    9b08:	20 c0       	rjmp	.+64     	; 0x9b4a <xio_rs485_putc+0x6e>
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(fr.flags)) {
    9b0a:	80 91 f9 23 	lds	r24, 0x23F9
    9b0e:	90 91 fa 23 	lds	r25, 0x23FA
    9b12:	84 70       	andi	r24, 0x04	; 4
    9b14:	90 70       	andi	r25, 0x00	; 0
    9b16:	00 97       	sbiw	r24, 0x00	; 0
    9b18:	81 f0       	breq	.+32     	; 0x9b3a <xio_rs485_putc+0x5e>
			sleep_mode();
    9b1a:	a8 e4       	ldi	r26, 0x48	; 72
    9b1c:	b0 e0       	ldi	r27, 0x00	; 0
    9b1e:	e8 e4       	ldi	r30, 0x48	; 72
    9b20:	f0 e0       	ldi	r31, 0x00	; 0
    9b22:	80 81       	ld	r24, Z
    9b24:	81 60       	ori	r24, 0x01	; 1
    9b26:	8c 93       	st	X, r24
    9b28:	88 95       	sleep
    9b2a:	a8 e4       	ldi	r26, 0x48	; 72
    9b2c:	b0 e0       	ldi	r27, 0x00	; 0
    9b2e:	e8 e4       	ldi	r30, 0x48	; 72
    9b30:	f0 e0       	ldi	r31, 0x00	; 0
    9b32:	80 81       	ld	r24, Z
    9b34:	8e 7f       	andi	r24, 0xFE	; 254
    9b36:	8c 93       	st	X, r24
    9b38:	08 c0       	rjmp	.+16     	; 0x9b4a <xio_rs485_putc+0x6e>
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
    9b3a:	83 e0       	ldi	r24, 0x03	; 3
    9b3c:	80 93 fc 23 	sts	0x23FC, r24
			return(_FDEV_ERR);
    9b40:	8f ef       	ldi	r24, 0xFF	; 255
    9b42:	9f ef       	ldi	r25, 0xFF	; 255
    9b44:	8c 83       	std	Y+4, r24	; 0x04
    9b46:	9d 83       	std	Y+5, r25	; 0x05
    9b48:	78 c0       	rjmp	.+240    	; 0x9c3a <xio_rs485_putc+0x15e>
int xio_rs485_putc(const char c, FILE *stream)
{
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
    9b4a:	90 91 06 24 	lds	r25, 0x2406
    9b4e:	80 91 04 24 	lds	r24, 0x2404
    9b52:	98 17       	cp	r25, r24
    9b54:	d1 f2       	breq	.-76     	; 0x9b0a <xio_rs485_putc+0x2e>
			fr.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	fr.tx_buf_head = fr.next_tx_buf_head;			// accept the next buffer head value
    9b56:	80 91 06 24 	lds	r24, 0x2406
    9b5a:	80 93 05 24 	sts	0x2405, r24
	fr.tx_buf[fr.tx_buf_head] = c;				// ...and write char to buffer
    9b5e:	80 91 05 24 	lds	r24, 0x2405
    9b62:	88 2f       	mov	r24, r24
    9b64:	90 e0       	ldi	r25, 0x00	; 0
    9b66:	fc 01       	movw	r30, r24
    9b68:	e0 5e       	subi	r30, 0xE0	; 224
    9b6a:	fb 4d       	sbci	r31, 0xDB	; 219
    9b6c:	89 81       	ldd	r24, Y+1	; 0x01
    9b6e:	80 83       	st	Z, r24

	if (CRLF(fr.flags) && (c == '\n')) {			// detect LF and add a CR
    9b70:	80 91 f9 23 	lds	r24, 0x23F9
    9b74:	90 91 fa 23 	lds	r25, 0x23FA
    9b78:	80 72       	andi	r24, 0x20	; 32
    9b7a:	90 70       	andi	r25, 0x00	; 0
    9b7c:	00 97       	sbiw	r24, 0x00	; 0
    9b7e:	61 f0       	breq	.+24     	; 0x9b98 <xio_rs485_putc+0xbc>
    9b80:	89 81       	ldd	r24, Y+1	; 0x01
    9b82:	8a 30       	cpi	r24, 0x0A	; 10
    9b84:	49 f4       	brne	.+18     	; 0x9b98 <xio_rs485_putc+0xbc>
		return xio_rs485_putc('\r', stream);		// recursion.
    9b86:	2a 81       	ldd	r18, Y+2	; 0x02
    9b88:	3b 81       	ldd	r19, Y+3	; 0x03
    9b8a:	8d e0       	ldi	r24, 0x0D	; 13
    9b8c:	b9 01       	movw	r22, r18
    9b8e:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <xio_rs485_putc>
    9b92:	8c 83       	std	Y+4, r24	; 0x04
    9b94:	9d 83       	std	Y+5, r25	; 0x05
    9b96:	51 c0       	rjmp	.+162    	; 0x9c3a <xio_rs485_putc+0x15e>
	}

	// dequeue the buffer if DATA register is ready
	if (fr.usart->STATUS & 0x20) {
    9b98:	e0 91 32 24 	lds	r30, 0x2432
    9b9c:	f0 91 33 24 	lds	r31, 0x2433
    9ba0:	81 81       	ldd	r24, Z+1	; 0x01
    9ba2:	88 2f       	mov	r24, r24
    9ba4:	90 e0       	ldi	r25, 0x00	; 0
    9ba6:	80 72       	andi	r24, 0x20	; 32
    9ba8:	90 70       	andi	r25, 0x00	; 0
    9baa:	00 97       	sbiw	r24, 0x00	; 0
    9bac:	a1 f1       	breq	.+104    	; 0x9c16 <xio_rs485_putc+0x13a>
		if (fr.tx_buf_head == fr.tx_buf_tail) {	// buf might be empty if IRQ got it
    9bae:	90 91 05 24 	lds	r25, 0x2405
    9bb2:	80 91 04 24 	lds	r24, 0x2404
    9bb6:	98 17       	cp	r25, r24
    9bb8:	19 f4       	brne	.+6      	; 0x9bc0 <xio_rs485_putc+0xe4>
			return (0);
    9bba:	1c 82       	std	Y+4, r1	; 0x04
    9bbc:	1d 82       	std	Y+5, r1	; 0x05
    9bbe:	3d c0       	rjmp	.+122    	; 0x9c3a <xio_rs485_putc+0x15e>
		}
		fr.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    9bc0:	80 91 f9 23 	lds	r24, 0x23F9
    9bc4:	90 91 fa 23 	lds	r25, 0x23FA
    9bc8:	98 60       	ori	r25, 0x08	; 8
    9bca:	80 93 f9 23 	sts	0x23F9, r24
    9bce:	90 93 fa 23 	sts	0x23FA, r25
		if (--(fr.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    9bd2:	80 91 04 24 	lds	r24, 0x2404
    9bd6:	81 50       	subi	r24, 0x01	; 1
    9bd8:	80 93 04 24 	sts	0x2404, r24
    9bdc:	80 91 04 24 	lds	r24, 0x2404
    9be0:	88 23       	and	r24, r24
    9be2:	19 f4       	brne	.+6      	; 0x9bea <xio_rs485_putc+0x10e>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    9be4:	81 e1       	ldi	r24, 0x11	; 17
    9be6:	80 93 04 24 	sts	0x2404, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];// write char to TX DATA register
    9bea:	a0 91 32 24 	lds	r26, 0x2432
    9bee:	b0 91 33 24 	lds	r27, 0x2433
    9bf2:	80 91 04 24 	lds	r24, 0x2404
    9bf6:	88 2f       	mov	r24, r24
    9bf8:	90 e0       	ldi	r25, 0x00	; 0
    9bfa:	fc 01       	movw	r30, r24
    9bfc:	e0 5e       	subi	r30, 0xE0	; 224
    9bfe:	fb 4d       	sbci	r31, 0xDB	; 219
    9c00:	80 81       	ld	r24, Z
    9c02:	8c 93       	st	X, r24
		fr.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    9c04:	80 91 f9 23 	lds	r24, 0x23F9
    9c08:	90 91 fa 23 	lds	r25, 0x23FA
    9c0c:	97 7f       	andi	r25, 0xF7	; 247
    9c0e:	80 93 f9 23 	sts	0x23F9, r24
    9c12:	90 93 fa 23 	sts	0x23FA, r25
	}
	// enable interrupts regardless
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    9c16:	e0 91 32 24 	lds	r30, 0x2432
    9c1a:	f0 91 33 24 	lds	r31, 0x2433
    9c1e:	81 e2       	ldi	r24, 0x21	; 33
    9c20:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    9c22:	a0 ea       	ldi	r26, 0xA0	; 160
    9c24:	b0 e0       	ldi	r27, 0x00	; 0
    9c26:	e0 ea       	ldi	r30, 0xA0	; 160
    9c28:	f0 e0       	ldi	r31, 0x00	; 0
    9c2a:	82 81       	ldd	r24, Z+2	; 0x02
    9c2c:	81 60       	ori	r24, 0x01	; 1
    9c2e:	12 96       	adiw	r26, 0x02	; 2
    9c30:	8c 93       	st	X, r24
    9c32:	12 97       	sbiw	r26, 0x02	; 2
	sei();										// enable global interrupts
    9c34:	78 94       	sei

	return (0);	// 0 = OK
    9c36:	1c 82       	std	Y+4, r1	; 0x04
    9c38:	1d 82       	std	Y+5, r1	; 0x05
    9c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    9c3c:	9d 81       	ldd	r25, Y+5	; 0x05
}
    9c3e:	25 96       	adiw	r28, 0x05	; 5
    9c40:	cd bf       	out	0x3d, r28	; 61
    9c42:	de bf       	out	0x3e, r29	; 62
    9c44:	cf 91       	pop	r28
    9c46:	df 91       	pop	r29
    9c48:	08 95       	ret

00009c4a <xio_rs485_getc>:
 *		- special characters such as EOL and control chars are handled by the
 *		  character helper routines. See them for behaviors
 */

int xio_rs485_getc(FILE *stream)
{
    9c4a:	df 93       	push	r29
    9c4c:	cf 93       	push	r28
    9c4e:	cd b7       	in	r28, 0x3d	; 61
    9c50:	de b7       	in	r29, 0x3e	; 62
    9c52:	28 97       	sbiw	r28, 0x08	; 8
    9c54:	cd bf       	out	0x3d, r28	; 61
    9c56:	de bf       	out	0x3e, r29	; 62
    9c58:	8d 83       	std	Y+5, r24	; 0x05
    9c5a:	9e 83       	std	Y+6, r25	; 0x06
    9c5c:	20 c0       	rjmp	.+64     	; 0x9c9e <xio_rs485_getc+0x54>
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(fr.flags)) {
    9c5e:	80 91 f9 23 	lds	r24, 0x23F9
    9c62:	90 91 fa 23 	lds	r25, 0x23FA
    9c66:	84 70       	andi	r24, 0x04	; 4
    9c68:	90 70       	andi	r25, 0x00	; 0
    9c6a:	00 97       	sbiw	r24, 0x00	; 0
    9c6c:	81 f0       	breq	.+32     	; 0x9c8e <xio_rs485_getc+0x44>
			sleep_mode();
    9c6e:	a8 e4       	ldi	r26, 0x48	; 72
    9c70:	b0 e0       	ldi	r27, 0x00	; 0
    9c72:	e8 e4       	ldi	r30, 0x48	; 72
    9c74:	f0 e0       	ldi	r31, 0x00	; 0
    9c76:	80 81       	ld	r24, Z
    9c78:	81 60       	ori	r24, 0x01	; 1
    9c7a:	8c 93       	st	X, r24
    9c7c:	88 95       	sleep
    9c7e:	a8 e4       	ldi	r26, 0x48	; 72
    9c80:	b0 e0       	ldi	r27, 0x00	; 0
    9c82:	e8 e4       	ldi	r30, 0x48	; 72
    9c84:	f0 e0       	ldi	r31, 0x00	; 0
    9c86:	80 81       	ld	r24, Z
    9c88:	8e 7f       	andi	r24, 0xFE	; 254
    9c8a:	8c 93       	st	X, r24
    9c8c:	08 c0       	rjmp	.+16     	; 0x9c9e <xio_rs485_getc+0x54>
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
    9c8e:	83 e0       	ldi	r24, 0x03	; 3
    9c90:	80 93 fc 23 	sts	0x23FC, r24
			return(_FDEV_ERR);
    9c94:	8f ef       	ldi	r24, 0xFF	; 255
    9c96:	9f ef       	ldi	r25, 0xFF	; 255
    9c98:	8f 83       	std	Y+7, r24	; 0x07
    9c9a:	98 87       	std	Y+8, r25	; 0x08
    9c9c:	36 c0       	rjmp	.+108    	; 0x9d0a <xio_rs485_getc+0xc0>
 *		  character helper routines. See them for behaviors
 */

int xio_rs485_getc(FILE *stream)
{
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
    9c9e:	90 91 03 24 	lds	r25, 0x2403
    9ca2:	80 91 02 24 	lds	r24, 0x2402
    9ca6:	98 17       	cp	r25, r24
    9ca8:	d1 f2       	breq	.-76     	; 0x9c5e <xio_rs485_getc+0x14>
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    9caa:	80 91 02 24 	lds	r24, 0x2402
    9cae:	81 50       	subi	r24, 0x01	; 1
    9cb0:	80 93 02 24 	sts	0x2402, r24
    9cb4:	80 91 02 24 	lds	r24, 0x2402
    9cb8:	88 23       	and	r24, r24
    9cba:	19 f4       	brne	.+6      	; 0x9cc2 <xio_rs485_getc+0x78>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    9cbc:	88 e1       	ldi	r24, 0x18	; 24
    9cbe:	80 93 02 24 	sts	0x2402, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    9cc2:	80 91 02 24 	lds	r24, 0x2402
    9cc6:	88 2f       	mov	r24, r24
    9cc8:	90 e0       	ldi	r25, 0x00	; 0
    9cca:	fc 01       	movw	r30, r24
    9ccc:	e9 5f       	subi	r30, 0xF9	; 249
    9cce:	fb 4d       	sbci	r31, 0xDB	; 219
    9cd0:	80 81       	ld	r24, Z
    9cd2:	8f 77       	andi	r24, 0x7F	; 127
    9cd4:	80 93 fd 23 	sts	0x23FD, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[fr.c])))());
    9cd8:	80 91 fd 23 	lds	r24, 0x23FD
    9cdc:	88 2f       	mov	r24, r24
    9cde:	90 e0       	ldi	r25, 0x00	; 0
    9ce0:	88 0f       	add	r24, r24
    9ce2:	99 1f       	adc	r25, r25
    9ce4:	8a 5f       	subi	r24, 0xFA	; 250
    9ce6:	93 4e       	sbci	r25, 0xE3	; 227
    9ce8:	8b 83       	std	Y+3, r24	; 0x03
    9cea:	9c 83       	std	Y+4, r25	; 0x04
    9cec:	8b 81       	ldd	r24, Y+3	; 0x03
    9cee:	9c 81       	ldd	r25, Y+4	; 0x04
    9cf0:	fc 01       	movw	r30, r24
    9cf2:	85 91       	lpm	r24, Z+
    9cf4:	94 91       	lpm	r25, Z+
    9cf6:	89 83       	std	Y+1, r24	; 0x01
    9cf8:	9a 83       	std	Y+2, r25	; 0x02
    9cfa:	eb 83       	std	Y+3, r30	; 0x03
    9cfc:	fc 83       	std	Y+4, r31	; 0x04
    9cfe:	89 81       	ldd	r24, Y+1	; 0x01
    9d00:	9a 81       	ldd	r25, Y+2	; 0x02
    9d02:	fc 01       	movw	r30, r24
    9d04:	19 95       	eicall
    9d06:	8f 83       	std	Y+7, r24	; 0x07
    9d08:	98 87       	std	Y+8, r25	; 0x08
    9d0a:	8f 81       	ldd	r24, Y+7	; 0x07
    9d0c:	98 85       	ldd	r25, Y+8	; 0x08
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    9d0e:	28 96       	adiw	r28, 0x08	; 8
    9d10:	cd bf       	out	0x3d, r28	; 61
    9d12:	de bf       	out	0x3e, r29	; 62
    9d14:	cf 91       	pop	r28
    9d16:	df 91       	pop	r29
    9d18:	08 95       	ret

00009d1a <_getc_char>:

/* xio_rs485_getc helper routines */

static int _getc_char(void)
{
    9d1a:	df 93       	push	r29
    9d1c:	cf 93       	push	r28
    9d1e:	cd b7       	in	r28, 0x3d	; 61
    9d20:	de b7       	in	r29, 0x3e	; 62
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    9d22:	80 91 f9 23 	lds	r24, 0x23F9
    9d26:	90 91 fa 23 	lds	r25, 0x23FA
    9d2a:	80 71       	andi	r24, 0x10	; 16
    9d2c:	90 70       	andi	r25, 0x00	; 0
    9d2e:	00 97       	sbiw	r24, 0x00	; 0
    9d30:	49 f0       	breq	.+18     	; 0x9d44 <_getc_char+0x2a>
    9d32:	80 91 fd 23 	lds	r24, 0x23FD
    9d36:	20 91 44 25 	lds	r18, 0x2544
    9d3a:	30 91 45 25 	lds	r19, 0x2545
    9d3e:	b9 01       	movw	r22, r18
    9d40:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <xio_rs485_putc>
	return(fr.c);
    9d44:	80 91 fd 23 	lds	r24, 0x23FD
    9d48:	88 2f       	mov	r24, r24
    9d4a:	90 e0       	ldi	r25, 0x00	; 0
}
    9d4c:	cf 91       	pop	r28
    9d4e:	df 91       	pop	r29
    9d50:	08 95       	ret

00009d52 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
    9d52:	df 93       	push	r29
    9d54:	cf 93       	push	r28
    9d56:	cd b7       	in	r28, 0x3d	; 61
    9d58:	de b7       	in	r29, 0x3e	; 62
	if (LINEMODE(fr.flags)) fr.c = '\n';
    9d5a:	80 91 f9 23 	lds	r24, 0x23F9
    9d5e:	90 91 fa 23 	lds	r25, 0x23FA
    9d62:	80 74       	andi	r24, 0x40	; 64
    9d64:	90 70       	andi	r25, 0x00	; 0
    9d66:	00 97       	sbiw	r24, 0x00	; 0
    9d68:	19 f0       	breq	.+6      	; 0x9d70 <_getc_NEWLINE+0x1e>
    9d6a:	8a e0       	ldi	r24, 0x0A	; 10
    9d6c:	80 93 fd 23 	sts	0x23FD, r24
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    9d70:	80 91 f9 23 	lds	r24, 0x23F9
    9d74:	90 91 fa 23 	lds	r25, 0x23FA
    9d78:	80 71       	andi	r24, 0x10	; 16
    9d7a:	90 70       	andi	r25, 0x00	; 0
    9d7c:	00 97       	sbiw	r24, 0x00	; 0
    9d7e:	49 f0       	breq	.+18     	; 0x9d92 <_getc_NEWLINE+0x40>
    9d80:	80 91 fd 23 	lds	r24, 0x23FD
    9d84:	20 91 44 25 	lds	r18, 0x2544
    9d88:	30 91 45 25 	lds	r19, 0x2545
    9d8c:	b9 01       	movw	r22, r18
    9d8e:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <xio_rs485_putc>
	return(fr.c);
    9d92:	80 91 fd 23 	lds	r24, 0x23FD
    9d96:	88 2f       	mov	r24, r24
    9d98:	90 e0       	ldi	r25, 0x00	; 0
}
    9d9a:	cf 91       	pop	r28
    9d9c:	df 91       	pop	r29
    9d9e:	08 95       	ret

00009da0 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
    9da0:	df 93       	push	r29
    9da2:	cf 93       	push	r28
    9da4:	0f 92       	push	r0
    9da6:	0f 92       	push	r0
    9da8:	cd b7       	in	r28, 0x3d	; 61
    9daa:	de b7       	in	r29, 0x3e	; 62
	if (SEMICOLONS(fr.flags)) {
    9dac:	80 91 f9 23 	lds	r24, 0x23F9
    9db0:	90 91 fa 23 	lds	r25, 0x23FA
    9db4:	80 78       	andi	r24, 0x80	; 128
    9db6:	90 70       	andi	r25, 0x00	; 0
    9db8:	00 97       	sbiw	r24, 0x00	; 0
    9dba:	29 f0       	breq	.+10     	; 0x9dc6 <_getc_SEMICOLON+0x26>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    9dbc:	0e 94 a9 4e 	call	0x9d52	; 0x9d52 <_getc_NEWLINE>
    9dc0:	89 83       	std	Y+1, r24	; 0x01
    9dc2:	9a 83       	std	Y+2, r25	; 0x02
    9dc4:	04 c0       	rjmp	.+8      	; 0x9dce <_getc_SEMICOLON+0x2e>
	} 
	return (_getc_char());					// else treat as any other character
    9dc6:	0e 94 8d 4e 	call	0x9d1a	; 0x9d1a <_getc_char>
    9dca:	89 83       	std	Y+1, r24	; 0x01
    9dcc:	9a 83       	std	Y+2, r25	; 0x02
    9dce:	89 81       	ldd	r24, Y+1	; 0x01
    9dd0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    9dd2:	0f 90       	pop	r0
    9dd4:	0f 90       	pop	r0
    9dd6:	cf 91       	pop	r28
    9dd8:	df 91       	pop	r29
    9dda:	08 95       	ret

00009ddc <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
    9ddc:	df 93       	push	r29
    9dde:	cf 93       	push	r28
    9de0:	cd b7       	in	r28, 0x3d	; 61
    9de2:	de b7       	in	r29, 0x3e	; 62
	fr.sig = XIO_SIG_DELETE;
    9de4:	8a e0       	ldi	r24, 0x0A	; 10
    9de6:	80 93 fc 23 	sts	0x23FC, r24
	return(_FDEV_ERR);
    9dea:	8f ef       	ldi	r24, 0xFF	; 255
    9dec:	9f ef       	ldi	r25, 0xFF	; 255
}
    9dee:	cf 91       	pop	r28
    9df0:	df 91       	pop	r29
    9df2:	08 95       	ret

00009df4 <xio_rs485_readln>:
 *
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_rs485_readln(char *buf, uint8_t len)
{
    9df4:	df 93       	push	r29
    9df6:	cf 93       	push	r28
    9df8:	cd b7       	in	r28, 0x3d	; 61
    9dfa:	de b7       	in	r29, 0x3e	; 62
    9dfc:	29 97       	sbiw	r28, 0x09	; 9
    9dfe:	cd bf       	out	0x3d, r28	; 61
    9e00:	de bf       	out	0x3e, r29	; 62
    9e02:	8d 83       	std	Y+5, r24	; 0x05
    9e04:	9e 83       	std	Y+6, r25	; 0x06
    9e06:	6f 83       	std	Y+7, r22	; 0x07
	if (!IN_LINE(fr.flags)) {					// first time thru initializations
    9e08:	80 91 f9 23 	lds	r24, 0x23F9
    9e0c:	90 91 fa 23 	lds	r25, 0x23FA
    9e10:	80 70       	andi	r24, 0x00	; 0
    9e12:	90 74       	andi	r25, 0x40	; 64
    9e14:	00 97       	sbiw	r24, 0x00	; 0
    9e16:	a1 f4       	brne	.+40     	; 0x9e40 <xio_rs485_readln+0x4c>
		fr.i = 0;								// zero buffer
    9e18:	10 92 fe 23 	sts	0x23FE, r1
		fr.len = len;							// save arg into struct 
    9e1c:	8f 81       	ldd	r24, Y+7	; 0x07
    9e1e:	80 93 ff 23 	sts	0x23FF, r24
		fr.buf = buf;							// save arg into struct 
    9e22:	8d 81       	ldd	r24, Y+5	; 0x05
    9e24:	9e 81       	ldd	r25, Y+6	; 0x06
    9e26:	80 93 00 24 	sts	0x2400, r24
    9e2a:	90 93 01 24 	sts	0x2401, r25
//		fr.sig = XIO_SIG_OK;					// no signal action
		fr.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    9e2e:	80 91 f9 23 	lds	r24, 0x23F9
    9e32:	90 91 fa 23 	lds	r25, 0x23FA
    9e36:	90 64       	ori	r25, 0x40	; 64
    9e38:	80 93 f9 23 	sts	0x23F9, r24
    9e3c:	90 93 fa 23 	sts	0x23FA, r25
	}
	if (fr.rx_buf_head == fr.rx_buf_tail) {		// RX ISR buffer empty
    9e40:	90 91 03 24 	lds	r25, 0x2403
    9e44:	80 91 02 24 	lds	r24, 0x2402
    9e48:	98 17       	cp	r25, r24
    9e4a:	29 f4       	brne	.+10     	; 0x9e56 <xio_rs485_readln+0x62>
//		fr.sig = XIO_SIG_WOULDBLOCK;
		return(TG_EAGAIN);
    9e4c:	81 e0       	ldi	r24, 0x01	; 1
    9e4e:	90 e0       	ldi	r25, 0x00	; 0
    9e50:	88 87       	std	Y+8, r24	; 0x08
    9e52:	99 87       	std	Y+9, r25	; 0x09
    9e54:	30 c0       	rjmp	.+96     	; 0x9eb6 <xio_rs485_readln+0xc2>
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    9e56:	80 91 02 24 	lds	r24, 0x2402
    9e5a:	81 50       	subi	r24, 0x01	; 1
    9e5c:	80 93 02 24 	sts	0x2402, r24
    9e60:	80 91 02 24 	lds	r24, 0x2402
    9e64:	88 23       	and	r24, r24
    9e66:	19 f4       	brne	.+6      	; 0x9e6e <xio_rs485_readln+0x7a>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    9e68:	88 e1       	ldi	r24, 0x18	; 24
    9e6a:	80 93 02 24 	sts	0x2402, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    9e6e:	80 91 02 24 	lds	r24, 0x2402
    9e72:	88 2f       	mov	r24, r24
    9e74:	90 e0       	ldi	r25, 0x00	; 0
    9e76:	fc 01       	movw	r30, r24
    9e78:	e9 5f       	subi	r30, 0xF9	; 249
    9e7a:	fb 4d       	sbci	r31, 0xDB	; 219
    9e7c:	80 81       	ld	r24, Z
    9e7e:	8f 77       	andi	r24, 0x7F	; 127
    9e80:	80 93 fd 23 	sts	0x23FD, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[fr.c])))()); // dispatch on character
    9e84:	80 91 fd 23 	lds	r24, 0x23FD
    9e88:	88 2f       	mov	r24, r24
    9e8a:	90 e0       	ldi	r25, 0x00	; 0
    9e8c:	88 0f       	add	r24, r24
    9e8e:	99 1f       	adc	r25, r25
    9e90:	8a 5f       	subi	r24, 0xFA	; 250
    9e92:	92 4e       	sbci	r25, 0xE2	; 226
    9e94:	8b 83       	std	Y+3, r24	; 0x03
    9e96:	9c 83       	std	Y+4, r25	; 0x04
    9e98:	8b 81       	ldd	r24, Y+3	; 0x03
    9e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    9e9c:	fc 01       	movw	r30, r24
    9e9e:	85 91       	lpm	r24, Z+
    9ea0:	94 91       	lpm	r25, Z+
    9ea2:	89 83       	std	Y+1, r24	; 0x01
    9ea4:	9a 83       	std	Y+2, r25	; 0x02
    9ea6:	eb 83       	std	Y+3, r30	; 0x03
    9ea8:	fc 83       	std	Y+4, r31	; 0x04
    9eaa:	89 81       	ldd	r24, Y+1	; 0x01
    9eac:	9a 81       	ldd	r25, Y+2	; 0x02
    9eae:	fc 01       	movw	r30, r24
    9eb0:	19 95       	eicall
    9eb2:	88 87       	std	Y+8, r24	; 0x08
    9eb4:	99 87       	std	Y+9, r25	; 0x09
    9eb6:	88 85       	ldd	r24, Y+8	; 0x08
    9eb8:	99 85       	ldd	r25, Y+9	; 0x09
}
    9eba:	29 96       	adiw	r28, 0x09	; 9
    9ebc:	cd bf       	out	0x3d, r28	; 61
    9ebe:	de bf       	out	0x3e, r29	; 62
    9ec0:	cf 91       	pop	r28
    9ec2:	df 91       	pop	r29
    9ec4:	08 95       	ret

00009ec6 <_readln_char>:

/* xio_rs485_readln helper routines */

static int _readln_char(void)
{
    9ec6:	df 93       	push	r29
    9ec8:	cf 93       	push	r28
    9eca:	0f 92       	push	r0
    9ecc:	0f 92       	push	r0
    9ece:	cd b7       	in	r28, 0x3d	; 61
    9ed0:	de b7       	in	r29, 0x3e	; 62
	if (fr.i > fr.len) {						// trap buffer overflow
    9ed2:	90 91 fe 23 	lds	r25, 0x23FE
    9ed6:	80 91 ff 23 	lds	r24, 0x23FF
    9eda:	89 17       	cp	r24, r25
    9edc:	a0 f4       	brcc	.+40     	; 0x9f06 <_readln_char+0x40>
		fr.sig = XIO_SIG_EOL;
    9ede:	81 e0       	ldi	r24, 0x01	; 1
    9ee0:	80 93 fc 23 	sts	0x23FC, r24
		fr.buf[fr.len] = NUL;					// fr.len is zero based
    9ee4:	20 91 00 24 	lds	r18, 0x2400
    9ee8:	30 91 01 24 	lds	r19, 0x2401
    9eec:	80 91 ff 23 	lds	r24, 0x23FF
    9ef0:	88 2f       	mov	r24, r24
    9ef2:	90 e0       	ldi	r25, 0x00	; 0
    9ef4:	f9 01       	movw	r30, r18
    9ef6:	e8 0f       	add	r30, r24
    9ef8:	f9 1f       	adc	r31, r25
    9efa:	10 82       	st	Z, r1
		return (TG_BUFFER_FULL);
    9efc:	87 e0       	ldi	r24, 0x07	; 7
    9efe:	90 e0       	ldi	r25, 0x00	; 0
    9f00:	89 83       	std	Y+1, r24	; 0x01
    9f02:	9a 83       	std	Y+2, r25	; 0x02
    9f04:	27 c0       	rjmp	.+78     	; 0x9f54 <_readln_char+0x8e>
	}
	fr.buf[fr.i++] = fr.c;
    9f06:	20 91 00 24 	lds	r18, 0x2400
    9f0a:	30 91 01 24 	lds	r19, 0x2401
    9f0e:	40 91 fe 23 	lds	r20, 0x23FE
    9f12:	84 2f       	mov	r24, r20
    9f14:	90 e0       	ldi	r25, 0x00	; 0
    9f16:	f9 01       	movw	r30, r18
    9f18:	e8 0f       	add	r30, r24
    9f1a:	f9 1f       	adc	r31, r25
    9f1c:	80 91 fd 23 	lds	r24, 0x23FD
    9f20:	80 83       	st	Z, r24
    9f22:	84 2f       	mov	r24, r20
    9f24:	8f 5f       	subi	r24, 0xFF	; 255
    9f26:	80 93 fe 23 	sts	0x23FE, r24
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);// conditional echo
    9f2a:	80 91 f9 23 	lds	r24, 0x23F9
    9f2e:	90 91 fa 23 	lds	r25, 0x23FA
    9f32:	80 71       	andi	r24, 0x10	; 16
    9f34:	90 70       	andi	r25, 0x00	; 0
    9f36:	00 97       	sbiw	r24, 0x00	; 0
    9f38:	49 f0       	breq	.+18     	; 0x9f4c <_readln_char+0x86>
    9f3a:	80 91 fd 23 	lds	r24, 0x23FD
    9f3e:	20 91 44 25 	lds	r18, 0x2544
    9f42:	30 91 45 25 	lds	r19, 0x2545
    9f46:	b9 01       	movw	r22, r18
    9f48:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <xio_rs485_putc>
	return (TG_EAGAIN);						// line is still in process
    9f4c:	81 e0       	ldi	r24, 0x01	; 1
    9f4e:	90 e0       	ldi	r25, 0x00	; 0
    9f50:	89 83       	std	Y+1, r24	; 0x01
    9f52:	9a 83       	std	Y+2, r25	; 0x02
    9f54:	89 81       	ldd	r24, Y+1	; 0x01
    9f56:	9a 81       	ldd	r25, Y+2	; 0x02
}
    9f58:	0f 90       	pop	r0
    9f5a:	0f 90       	pop	r0
    9f5c:	cf 91       	pop	r28
    9f5e:	df 91       	pop	r29
    9f60:	08 95       	ret

00009f62 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
    9f62:	df 93       	push	r29
    9f64:	cf 93       	push	r28
    9f66:	cd b7       	in	r28, 0x3d	; 61
    9f68:	de b7       	in	r29, 0x3e	; 62
	fr.sig = XIO_SIG_EOL;
    9f6a:	81 e0       	ldi	r24, 0x01	; 1
    9f6c:	80 93 fc 23 	sts	0x23FC, r24
	fr.buf[fr.i] = NUL;
    9f70:	20 91 00 24 	lds	r18, 0x2400
    9f74:	30 91 01 24 	lds	r19, 0x2401
    9f78:	80 91 fe 23 	lds	r24, 0x23FE
    9f7c:	88 2f       	mov	r24, r24
    9f7e:	90 e0       	ldi	r25, 0x00	; 0
    9f80:	f9 01       	movw	r30, r18
    9f82:	e8 0f       	add	r30, r24
    9f84:	f9 1f       	adc	r31, r25
    9f86:	10 82       	st	Z, r1
	fr.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    9f88:	80 91 f9 23 	lds	r24, 0x23F9
    9f8c:	90 91 fa 23 	lds	r25, 0x23FA
    9f90:	9f 7b       	andi	r25, 0xBF	; 191
    9f92:	80 93 f9 23 	sts	0x23F9, r24
    9f96:	90 93 fa 23 	sts	0x23FA, r25
	if (ECHO(fr.flags)) xio_rs485_putc('\n',stdout);// echo a newline
    9f9a:	80 91 f9 23 	lds	r24, 0x23F9
    9f9e:	90 91 fa 23 	lds	r25, 0x23FA
    9fa2:	80 71       	andi	r24, 0x10	; 16
    9fa4:	90 70       	andi	r25, 0x00	; 0
    9fa6:	00 97       	sbiw	r24, 0x00	; 0
    9fa8:	41 f0       	breq	.+16     	; 0x9fba <_readln_NEWLINE+0x58>
    9faa:	20 91 44 25 	lds	r18, 0x2544
    9fae:	30 91 45 25 	lds	r19, 0x2545
    9fb2:	8a e0       	ldi	r24, 0x0A	; 10
    9fb4:	b9 01       	movw	r22, r18
    9fb6:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <xio_rs485_putc>
	return 0;
    9fba:	80 e0       	ldi	r24, 0x00	; 0
    9fbc:	90 e0       	ldi	r25, 0x00	; 0
//	return ((int)fr.line_func(fr.buf));			// call line handler function
}
    9fbe:	cf 91       	pop	r28
    9fc0:	df 91       	pop	r29
    9fc2:	08 95       	ret

00009fc4 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
    9fc4:	df 93       	push	r29
    9fc6:	cf 93       	push	r28
    9fc8:	0f 92       	push	r0
    9fca:	0f 92       	push	r0
    9fcc:	cd b7       	in	r28, 0x3d	; 61
    9fce:	de b7       	in	r29, 0x3e	; 62
	if (SEMICOLONS(fr.flags)) {
    9fd0:	80 91 f9 23 	lds	r24, 0x23F9
    9fd4:	90 91 fa 23 	lds	r25, 0x23FA
    9fd8:	80 78       	andi	r24, 0x80	; 128
    9fda:	90 70       	andi	r25, 0x00	; 0
    9fdc:	00 97       	sbiw	r24, 0x00	; 0
    9fde:	29 f0       	breq	.+10     	; 0x9fea <_readln_SEMICOLON+0x26>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    9fe0:	0e 94 b1 4f 	call	0x9f62	; 0x9f62 <_readln_NEWLINE>
    9fe4:	89 83       	std	Y+1, r24	; 0x01
    9fe6:	9a 83       	std	Y+2, r25	; 0x02
    9fe8:	04 c0       	rjmp	.+8      	; 0x9ff2 <_readln_SEMICOLON+0x2e>
	} else {
		return (_readln_char());				// else treat as any other character
    9fea:	0e 94 63 4f 	call	0x9ec6	; 0x9ec6 <_readln_char>
    9fee:	89 83       	std	Y+1, r24	; 0x01
    9ff0:	9a 83       	std	Y+2, r25	; 0x02
    9ff2:	89 81       	ldd	r24, Y+1	; 0x01
    9ff4:	9a 81       	ldd	r25, Y+2	; 0x02
	}
}
    9ff6:	0f 90       	pop	r0
    9ff8:	0f 90       	pop	r0
    9ffa:	cf 91       	pop	r28
    9ffc:	df 91       	pop	r29
    9ffe:	08 95       	ret

0000a000 <_readln_DELETE>:

static int _readln_DELETE(void)
{
    a000:	df 93       	push	r29
    a002:	cf 93       	push	r28
    a004:	cd b7       	in	r28, 0x3d	; 61
    a006:	de b7       	in	r29, 0x3e	; 62
	if (--fr.i >= 0) {
    a008:	80 91 fe 23 	lds	r24, 0x23FE
    a00c:	81 50       	subi	r24, 0x01	; 1
    a00e:	80 93 fe 23 	sts	0x23FE, r24
		if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    a012:	80 91 f9 23 	lds	r24, 0x23F9
    a016:	90 91 fa 23 	lds	r25, 0x23FA
    a01a:	80 71       	andi	r24, 0x10	; 16
    a01c:	90 70       	andi	r25, 0x00	; 0
    a01e:	00 97       	sbiw	r24, 0x00	; 0
    a020:	49 f0       	breq	.+18     	; 0xa034 <_readln_DELETE+0x34>
    a022:	80 91 fd 23 	lds	r24, 0x23FD
    a026:	20 91 44 25 	lds	r18, 0x2544
    a02a:	30 91 45 25 	lds	r19, 0x2545
    a02e:	b9 01       	movw	r22, r18
    a030:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <xio_rs485_putc>
	} else {
		fr.i = 0;
	}
	return (TG_EAGAIN);							// line is still in process
    a034:	81 e0       	ldi	r24, 0x01	; 1
    a036:	90 e0       	ldi	r25, 0x00	; 0
}
    a038:	cf 91       	pop	r28
    a03a:	df 91       	pop	r29
    a03c:	08 95       	ret

0000a03e <_sig_KILL>:
/*
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
    a03e:	df 93       	push	r29
    a040:	cf 93       	push	r28
    a042:	cd b7       	in	r28, 0x3d	; 61
    a044:	de b7       	in	r29, 0x3e	; 62
	fr.sig = XIO_SIG_KILL;
    a046:	84 e0       	ldi	r24, 0x04	; 4
    a048:	80 93 fc 23 	sts	0x23FC, r24
	return(_FDEV_ERR);
    a04c:	8f ef       	ldi	r24, 0xFF	; 255
    a04e:	9f ef       	ldi	r25, 0xFF	; 255
}
    a050:	cf 91       	pop	r28
    a052:	df 91       	pop	r29
    a054:	08 95       	ret

0000a056 <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
    a056:	df 93       	push	r29
    a058:	cf 93       	push	r28
    a05a:	cd b7       	in	r28, 0x3d	; 61
    a05c:	de b7       	in	r29, 0x3e	; 62
	fr.sig = XIO_SIG_PAUSE;
    a05e:	86 e0       	ldi	r24, 0x06	; 6
    a060:	80 93 fc 23 	sts	0x23FC, r24
	return(_FDEV_ERR);
    a064:	8f ef       	ldi	r24, 0xFF	; 255
    a066:	9f ef       	ldi	r25, 0xFF	; 255
}
    a068:	cf 91       	pop	r28
    a06a:	df 91       	pop	r29
    a06c:	08 95       	ret

0000a06e <_sig_RESUME>:

static int _sig_RESUME(void)
{
    a06e:	df 93       	push	r29
    a070:	cf 93       	push	r28
    a072:	cd b7       	in	r28, 0x3d	; 61
    a074:	de b7       	in	r29, 0x3e	; 62
	fr.sig = XIO_SIG_RESUME;
    a076:	87 e0       	ldi	r24, 0x07	; 7
    a078:	80 93 fc 23 	sts	0x23FC, r24
	return(_FDEV_ERR);
    a07c:	8f ef       	ldi	r24, 0xFF	; 255
    a07e:	9f ef       	ldi	r25, 0xFF	; 255
}
    a080:	cf 91       	pop	r28
    a082:	df 91       	pop	r29
    a084:	08 95       	ret

0000a086 <_sig_SHIFTOUT>:

static int _sig_SHIFTOUT(void)
{
    a086:	df 93       	push	r29
    a088:	cf 93       	push	r28
    a08a:	cd b7       	in	r28, 0x3d	; 61
    a08c:	de b7       	in	r29, 0x3e	; 62
	fr.sig = XIO_SIG_SHIFTOUT;
    a08e:	88 e0       	ldi	r24, 0x08	; 8
    a090:	80 93 fc 23 	sts	0x23FC, r24
	return(_FDEV_ERR);
    a094:	8f ef       	ldi	r24, 0xFF	; 255
    a096:	9f ef       	ldi	r25, 0xFF	; 255
}
    a098:	cf 91       	pop	r28
    a09a:	df 91       	pop	r29
    a09c:	08 95       	ret

0000a09e <_sig_SHIFTIN>:

static int _sig_SHIFTIN(void)
{
    a09e:	df 93       	push	r29
    a0a0:	cf 93       	push	r28
    a0a2:	cd b7       	in	r28, 0x3d	; 61
    a0a4:	de b7       	in	r29, 0x3e	; 62
	fr.sig = XIO_SIG_SHIFTIN;
    a0a6:	89 e0       	ldi	r24, 0x09	; 9
    a0a8:	80 93 fc 23 	sts	0x23FC, r24
	return(_FDEV_ERR);
    a0ac:	8f ef       	ldi	r24, 0xFF	; 255
    a0ae:	9f ef       	ldi	r25, 0xFF	; 255
}
    a0b0:	cf 91       	pop	r28
    a0b2:	df 91       	pop	r29
    a0b4:	08 95       	ret

0000a0b6 <signal_etx>:

/*
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx() {			// ^c
    a0b6:	df 93       	push	r29
    a0b8:	cf 93       	push	r28
    a0ba:	cd b7       	in	r28, 0x3d	; 61
    a0bc:	de b7       	in	r29, 0x3e	; 62
{
	tg_reset_source();					// return control to standard device
    a0be:	0e 94 ff 43 	call	0x87fe	; 0x87fe <tg_reset_source>
	mc_motion_stop();					// stop computing and generating motions
    a0c2:	0e 94 8f 23 	call	0x471e	; 0x471e <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    a0c6:	0e 94 09 48 	call	0x9012	; 0x9012 <mv_flush>
	st_stop_steppers();					// stop the steppers
    a0ca:	0e 94 c2 34 	call	0x6984	; 0x6984 <st_stop_steppers>
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
*/
}
    a0ce:	cf 91       	pop	r28
    a0d0:	df 91       	pop	r29
    a0d2:	08 95       	ret

0000a0d4 <tg_resume.1635>:
{
	return;
}

void tg_resume()
{
    a0d4:	df 93       	push	r29
    a0d6:	cf 93       	push	r28
    a0d8:	cd b7       	in	r28, 0x3d	; 61
    a0da:	de b7       	in	r29, 0x3e	; 62
	return;
}
    a0dc:	cf 91       	pop	r28
    a0de:	df 91       	pop	r29
    a0e0:	08 95       	ret

0000a0e2 <tg_pause.1633>:
//	tg_kill();
	return;
}

void tg_pause()
{
    a0e2:	df 93       	push	r29
    a0e4:	cf 93       	push	r28
    a0e6:	cd b7       	in	r28, 0x3d	; 61
    a0e8:	de b7       	in	r29, 0x3e	; 62
	return;
}
    a0ea:	cf 91       	pop	r28
    a0ec:	df 91       	pop	r29
    a0ee:	08 95       	ret

0000a0f0 <tg_terminate.1631>:
	st_stop_steppers();					// stop the steppers
	return;
}

void tg_terminate()
{
    a0f0:	df 93       	push	r29
    a0f2:	cf 93       	push	r28
    a0f4:	cd b7       	in	r28, 0x3d	; 61
    a0f6:	de b7       	in	r29, 0x3e	; 62
//	tg_kill();
	return;
}
    a0f8:	cf 91       	pop	r28
    a0fa:	df 91       	pop	r29
    a0fc:	08 95       	ret

0000a0fe <__udivdi3>:
    a0fe:	ae e5       	ldi	r26, 0x5E	; 94
    a100:	b0 e0       	ldi	r27, 0x00	; 0
    a102:	e5 e8       	ldi	r30, 0x85	; 133
    a104:	f0 e5       	ldi	r31, 0x50	; 80
    a106:	0c 94 12 5f 	jmp	0xbe24	; 0xbe24 <__prologue_saves__>
    a10a:	a8 e0       	ldi	r26, 0x08	; 8
    a10c:	4e 01       	movw	r8, r28
    a10e:	08 94       	sec
    a110:	81 1c       	adc	r8, r1
    a112:	91 1c       	adc	r9, r1
    a114:	f4 01       	movw	r30, r8
    a116:	6a 2e       	mov	r6, r26
    a118:	11 92       	st	Z+, r1
    a11a:	6a 94       	dec	r6
    a11c:	e9 f7       	brne	.-6      	; 0xa118 <__udivdi3+0x1a>
    a11e:	29 83       	std	Y+1, r18	; 0x01
    a120:	3a 83       	std	Y+2, r19	; 0x02
    a122:	4b 83       	std	Y+3, r20	; 0x03
    a124:	5c 83       	std	Y+4, r21	; 0x04
    a126:	6d 83       	std	Y+5, r22	; 0x05
    a128:	7e 83       	std	Y+6, r23	; 0x06
    a12a:	8f 83       	std	Y+7, r24	; 0x07
    a12c:	98 87       	std	Y+8, r25	; 0x08
    a12e:	ce 01       	movw	r24, r28
    a130:	09 96       	adiw	r24, 0x09	; 9
    a132:	fc 01       	movw	r30, r24
    a134:	11 92       	st	Z+, r1
    a136:	aa 95       	dec	r26
    a138:	e9 f7       	brne	.-6      	; 0xa134 <__udivdi3+0x36>
    a13a:	a9 86       	std	Y+9, r10	; 0x09
    a13c:	ba 86       	std	Y+10, r11	; 0x0a
    a13e:	cb 86       	std	Y+11, r12	; 0x0b
    a140:	dc 86       	std	Y+12, r13	; 0x0c
    a142:	ed 86       	std	Y+13, r14	; 0x0d
    a144:	fe 86       	std	Y+14, r15	; 0x0e
    a146:	0f 87       	std	Y+15, r16	; 0x0f
    a148:	18 8b       	std	Y+16, r17	; 0x10
    a14a:	29 84       	ldd	r2, Y+9	; 0x09
    a14c:	3a 84       	ldd	r3, Y+10	; 0x0a
    a14e:	4b 84       	ldd	r4, Y+11	; 0x0b
    a150:	5c 84       	ldd	r5, Y+12	; 0x0c
    a152:	ed 84       	ldd	r14, Y+13	; 0x0d
    a154:	fe 84       	ldd	r15, Y+14	; 0x0e
    a156:	0f 85       	ldd	r16, Y+15	; 0x0f
    a158:	18 89       	ldd	r17, Y+16	; 0x10
    a15a:	69 80       	ldd	r6, Y+1	; 0x01
    a15c:	7a 80       	ldd	r7, Y+2	; 0x02
    a15e:	8b 80       	ldd	r8, Y+3	; 0x03
    a160:	9c 80       	ldd	r9, Y+4	; 0x04
    a162:	6d a6       	std	Y+45, r6	; 0x2d
    a164:	7e a6       	std	Y+46, r7	; 0x2e
    a166:	8f a6       	std	Y+47, r8	; 0x2f
    a168:	98 aa       	std	Y+48, r9	; 0x30
    a16a:	6d 80       	ldd	r6, Y+5	; 0x05
    a16c:	7e 80       	ldd	r7, Y+6	; 0x06
    a16e:	8f 80       	ldd	r8, Y+7	; 0x07
    a170:	98 84       	ldd	r9, Y+8	; 0x08
    a172:	e1 14       	cp	r14, r1
    a174:	f1 04       	cpc	r15, r1
    a176:	01 05       	cpc	r16, r1
    a178:	11 05       	cpc	r17, r1
    a17a:	09 f0       	breq	.+2      	; 0xa17e <__udivdi3+0x80>
    a17c:	b3 c3       	rjmp	.+1894   	; 0xa8e4 <__udivdi3+0x7e6>
    a17e:	62 14       	cp	r6, r2
    a180:	73 04       	cpc	r7, r3
    a182:	84 04       	cpc	r8, r4
    a184:	95 04       	cpc	r9, r5
    a186:	08 f0       	brcs	.+2      	; 0xa18a <__udivdi3+0x8c>
    a188:	3d c1       	rjmp	.+634    	; 0xa404 <__udivdi3+0x306>
    a18a:	00 e0       	ldi	r16, 0x00	; 0
    a18c:	20 16       	cp	r2, r16
    a18e:	00 e0       	ldi	r16, 0x00	; 0
    a190:	30 06       	cpc	r3, r16
    a192:	01 e0       	ldi	r16, 0x01	; 1
    a194:	40 06       	cpc	r4, r16
    a196:	00 e0       	ldi	r16, 0x00	; 0
    a198:	50 06       	cpc	r5, r16
    a19a:	88 f4       	brcc	.+34     	; 0xa1be <__udivdi3+0xc0>
    a19c:	1f ef       	ldi	r17, 0xFF	; 255
    a19e:	21 16       	cp	r2, r17
    a1a0:	31 04       	cpc	r3, r1
    a1a2:	41 04       	cpc	r4, r1
    a1a4:	51 04       	cpc	r5, r1
    a1a6:	39 f0       	breq	.+14     	; 0xa1b6 <__udivdi3+0xb8>
    a1a8:	30 f0       	brcs	.+12     	; 0xa1b6 <__udivdi3+0xb8>
    a1aa:	48 e0       	ldi	r20, 0x08	; 8
    a1ac:	e4 2e       	mov	r14, r20
    a1ae:	f1 2c       	mov	r15, r1
    a1b0:	01 2d       	mov	r16, r1
    a1b2:	11 2d       	mov	r17, r1
    a1b4:	18 c0       	rjmp	.+48     	; 0xa1e6 <__udivdi3+0xe8>
    a1b6:	ee 24       	eor	r14, r14
    a1b8:	ff 24       	eor	r15, r15
    a1ba:	87 01       	movw	r16, r14
    a1bc:	14 c0       	rjmp	.+40     	; 0xa1e6 <__udivdi3+0xe8>
    a1be:	20 e0       	ldi	r18, 0x00	; 0
    a1c0:	22 16       	cp	r2, r18
    a1c2:	20 e0       	ldi	r18, 0x00	; 0
    a1c4:	32 06       	cpc	r3, r18
    a1c6:	20 e0       	ldi	r18, 0x00	; 0
    a1c8:	42 06       	cpc	r4, r18
    a1ca:	21 e0       	ldi	r18, 0x01	; 1
    a1cc:	52 06       	cpc	r5, r18
    a1ce:	30 f0       	brcs	.+12     	; 0xa1dc <__udivdi3+0xde>
    a1d0:	38 e1       	ldi	r19, 0x18	; 24
    a1d2:	e3 2e       	mov	r14, r19
    a1d4:	f1 2c       	mov	r15, r1
    a1d6:	01 2d       	mov	r16, r1
    a1d8:	11 2d       	mov	r17, r1
    a1da:	05 c0       	rjmp	.+10     	; 0xa1e6 <__udivdi3+0xe8>
    a1dc:	20 e1       	ldi	r18, 0x10	; 16
    a1de:	e2 2e       	mov	r14, r18
    a1e0:	f1 2c       	mov	r15, r1
    a1e2:	01 2d       	mov	r16, r1
    a1e4:	11 2d       	mov	r17, r1
    a1e6:	d2 01       	movw	r26, r4
    a1e8:	c1 01       	movw	r24, r2
    a1ea:	0e 2c       	mov	r0, r14
    a1ec:	04 c0       	rjmp	.+8      	; 0xa1f6 <__udivdi3+0xf8>
    a1ee:	b6 95       	lsr	r27
    a1f0:	a7 95       	ror	r26
    a1f2:	97 95       	ror	r25
    a1f4:	87 95       	ror	r24
    a1f6:	0a 94       	dec	r0
    a1f8:	d2 f7       	brpl	.-12     	; 0xa1ee <__udivdi3+0xf0>
    a1fa:	83 5d       	subi	r24, 0xD3	; 211
    a1fc:	9f 4d       	sbci	r25, 0xDF	; 223
    a1fe:	dc 01       	movw	r26, r24
    a200:	2c 91       	ld	r18, X
    a202:	80 e2       	ldi	r24, 0x20	; 32
    a204:	90 e0       	ldi	r25, 0x00	; 0
    a206:	a0 e0       	ldi	r26, 0x00	; 0
    a208:	b0 e0       	ldi	r27, 0x00	; 0
    a20a:	8e 19       	sub	r24, r14
    a20c:	9f 09       	sbc	r25, r15
    a20e:	a0 0b       	sbc	r26, r16
    a210:	b1 0b       	sbc	r27, r17
    a212:	7c 01       	movw	r14, r24
    a214:	8d 01       	movw	r16, r26
    a216:	e2 1a       	sub	r14, r18
    a218:	f1 08       	sbc	r15, r1
    a21a:	01 09       	sbc	r16, r1
    a21c:	11 09       	sbc	r17, r1
    a21e:	e1 14       	cp	r14, r1
    a220:	f1 04       	cpc	r15, r1
    a222:	01 05       	cpc	r16, r1
    a224:	11 05       	cpc	r17, r1
    a226:	a1 f1       	breq	.+104    	; 0xa290 <__udivdi3+0x192>
    a228:	0e 2c       	mov	r0, r14
    a22a:	04 c0       	rjmp	.+8      	; 0xa234 <__udivdi3+0x136>
    a22c:	22 0c       	add	r2, r2
    a22e:	33 1c       	adc	r3, r3
    a230:	44 1c       	adc	r4, r4
    a232:	55 1c       	adc	r5, r5
    a234:	0a 94       	dec	r0
    a236:	d2 f7       	brpl	.-12     	; 0xa22c <__udivdi3+0x12e>
    a238:	a4 01       	movw	r20, r8
    a23a:	93 01       	movw	r18, r6
    a23c:	0e 2c       	mov	r0, r14
    a23e:	04 c0       	rjmp	.+8      	; 0xa248 <__udivdi3+0x14a>
    a240:	22 0f       	add	r18, r18
    a242:	33 1f       	adc	r19, r19
    a244:	44 1f       	adc	r20, r20
    a246:	55 1f       	adc	r21, r21
    a248:	0a 94       	dec	r0
    a24a:	d2 f7       	brpl	.-12     	; 0xa240 <__udivdi3+0x142>
    a24c:	80 e2       	ldi	r24, 0x20	; 32
    a24e:	90 e0       	ldi	r25, 0x00	; 0
    a250:	8e 19       	sub	r24, r14
    a252:	9f 09       	sbc	r25, r15
    a254:	6d a4       	ldd	r6, Y+45	; 0x2d
    a256:	7e a4       	ldd	r7, Y+46	; 0x2e
    a258:	8f a4       	ldd	r8, Y+47	; 0x2f
    a25a:	98 a8       	ldd	r9, Y+48	; 0x30
    a25c:	04 c0       	rjmp	.+8      	; 0xa266 <__udivdi3+0x168>
    a25e:	96 94       	lsr	r9
    a260:	87 94       	ror	r8
    a262:	77 94       	ror	r7
    a264:	67 94       	ror	r6
    a266:	8a 95       	dec	r24
    a268:	d2 f7       	brpl	.-12     	; 0xa25e <__udivdi3+0x160>
    a26a:	62 2a       	or	r6, r18
    a26c:	73 2a       	or	r7, r19
    a26e:	84 2a       	or	r8, r20
    a270:	95 2a       	or	r9, r21
    a272:	ad a4       	ldd	r10, Y+45	; 0x2d
    a274:	be a4       	ldd	r11, Y+46	; 0x2e
    a276:	cf a4       	ldd	r12, Y+47	; 0x2f
    a278:	d8 a8       	ldd	r13, Y+48	; 0x30
    a27a:	04 c0       	rjmp	.+8      	; 0xa284 <__udivdi3+0x186>
    a27c:	aa 0c       	add	r10, r10
    a27e:	bb 1c       	adc	r11, r11
    a280:	cc 1c       	adc	r12, r12
    a282:	dd 1c       	adc	r13, r13
    a284:	ea 94       	dec	r14
    a286:	d2 f7       	brpl	.-12     	; 0xa27c <__udivdi3+0x17e>
    a288:	ad a6       	std	Y+45, r10	; 0x2d
    a28a:	be a6       	std	Y+46, r11	; 0x2e
    a28c:	cf a6       	std	Y+47, r12	; 0x2f
    a28e:	d8 aa       	std	Y+48, r13	; 0x30
    a290:	62 01       	movw	r12, r4
    a292:	ee 24       	eor	r14, r14
    a294:	ff 24       	eor	r15, r15
    a296:	cd aa       	std	Y+53, r12	; 0x35
    a298:	de aa       	std	Y+54, r13	; 0x36
    a29a:	ef aa       	std	Y+55, r14	; 0x37
    a29c:	f8 ae       	std	Y+56, r15	; 0x38
    a29e:	92 01       	movw	r18, r4
    a2a0:	81 01       	movw	r16, r2
    a2a2:	20 70       	andi	r18, 0x00	; 0
    a2a4:	30 70       	andi	r19, 0x00	; 0
    a2a6:	09 af       	std	Y+57, r16	; 0x39
    a2a8:	1a af       	std	Y+58, r17	; 0x3a
    a2aa:	2b af       	std	Y+59, r18	; 0x3b
    a2ac:	3c af       	std	Y+60, r19	; 0x3c
    a2ae:	c4 01       	movw	r24, r8
    a2b0:	b3 01       	movw	r22, r6
    a2b2:	a7 01       	movw	r20, r14
    a2b4:	96 01       	movw	r18, r12
    a2b6:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    a2ba:	7b 01       	movw	r14, r22
    a2bc:	8c 01       	movw	r16, r24
    a2be:	c4 01       	movw	r24, r8
    a2c0:	b3 01       	movw	r22, r6
    a2c2:	2d a9       	ldd	r18, Y+53	; 0x35
    a2c4:	3e a9       	ldd	r19, Y+54	; 0x36
    a2c6:	4f a9       	ldd	r20, Y+55	; 0x37
    a2c8:	58 ad       	ldd	r21, Y+56	; 0x38
    a2ca:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    a2ce:	c9 01       	movw	r24, r18
    a2d0:	da 01       	movw	r26, r20
    a2d2:	3c 01       	movw	r6, r24
    a2d4:	4d 01       	movw	r8, r26
    a2d6:	c4 01       	movw	r24, r8
    a2d8:	b3 01       	movw	r22, r6
    a2da:	29 ad       	ldd	r18, Y+57	; 0x39
    a2dc:	3a ad       	ldd	r19, Y+58	; 0x3a
    a2de:	4b ad       	ldd	r20, Y+59	; 0x3b
    a2e0:	5c ad       	ldd	r21, Y+60	; 0x3c
    a2e2:	0e 94 d1 5e 	call	0xbda2	; 0xbda2 <__mulsi3>
    a2e6:	9b 01       	movw	r18, r22
    a2e8:	ac 01       	movw	r20, r24
    a2ea:	87 01       	movw	r16, r14
    a2ec:	ff 24       	eor	r15, r15
    a2ee:	ee 24       	eor	r14, r14
    a2f0:	ad a4       	ldd	r10, Y+45	; 0x2d
    a2f2:	be a4       	ldd	r11, Y+46	; 0x2e
    a2f4:	cf a4       	ldd	r12, Y+47	; 0x2f
    a2f6:	d8 a8       	ldd	r13, Y+48	; 0x30
    a2f8:	c6 01       	movw	r24, r12
    a2fa:	aa 27       	eor	r26, r26
    a2fc:	bb 27       	eor	r27, r27
    a2fe:	57 01       	movw	r10, r14
    a300:	68 01       	movw	r12, r16
    a302:	a8 2a       	or	r10, r24
    a304:	b9 2a       	or	r11, r25
    a306:	ca 2a       	or	r12, r26
    a308:	db 2a       	or	r13, r27
    a30a:	a2 16       	cp	r10, r18
    a30c:	b3 06       	cpc	r11, r19
    a30e:	c4 06       	cpc	r12, r20
    a310:	d5 06       	cpc	r13, r21
    a312:	e0 f4       	brcc	.+56     	; 0xa34c <__udivdi3+0x24e>
    a314:	08 94       	sec
    a316:	61 08       	sbc	r6, r1
    a318:	71 08       	sbc	r7, r1
    a31a:	81 08       	sbc	r8, r1
    a31c:	91 08       	sbc	r9, r1
    a31e:	a2 0c       	add	r10, r2
    a320:	b3 1c       	adc	r11, r3
    a322:	c4 1c       	adc	r12, r4
    a324:	d5 1c       	adc	r13, r5
    a326:	a2 14       	cp	r10, r2
    a328:	b3 04       	cpc	r11, r3
    a32a:	c4 04       	cpc	r12, r4
    a32c:	d5 04       	cpc	r13, r5
    a32e:	70 f0       	brcs	.+28     	; 0xa34c <__udivdi3+0x24e>
    a330:	a2 16       	cp	r10, r18
    a332:	b3 06       	cpc	r11, r19
    a334:	c4 06       	cpc	r12, r20
    a336:	d5 06       	cpc	r13, r21
    a338:	48 f4       	brcc	.+18     	; 0xa34c <__udivdi3+0x24e>
    a33a:	08 94       	sec
    a33c:	61 08       	sbc	r6, r1
    a33e:	71 08       	sbc	r7, r1
    a340:	81 08       	sbc	r8, r1
    a342:	91 08       	sbc	r9, r1
    a344:	a2 0c       	add	r10, r2
    a346:	b3 1c       	adc	r11, r3
    a348:	c4 1c       	adc	r12, r4
    a34a:	d5 1c       	adc	r13, r5
    a34c:	a2 1a       	sub	r10, r18
    a34e:	b3 0a       	sbc	r11, r19
    a350:	c4 0a       	sbc	r12, r20
    a352:	d5 0a       	sbc	r13, r21
    a354:	c6 01       	movw	r24, r12
    a356:	b5 01       	movw	r22, r10
    a358:	2d a9       	ldd	r18, Y+53	; 0x35
    a35a:	3e a9       	ldd	r19, Y+54	; 0x36
    a35c:	4f a9       	ldd	r20, Y+55	; 0x37
    a35e:	58 ad       	ldd	r21, Y+56	; 0x38
    a360:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    a364:	7b 01       	movw	r14, r22
    a366:	8c 01       	movw	r16, r24
    a368:	c6 01       	movw	r24, r12
    a36a:	b5 01       	movw	r22, r10
    a36c:	2d a9       	ldd	r18, Y+53	; 0x35
    a36e:	3e a9       	ldd	r19, Y+54	; 0x36
    a370:	4f a9       	ldd	r20, Y+55	; 0x37
    a372:	58 ad       	ldd	r21, Y+56	; 0x38
    a374:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    a378:	c9 01       	movw	r24, r18
    a37a:	da 01       	movw	r26, r20
    a37c:	5c 01       	movw	r10, r24
    a37e:	6d 01       	movw	r12, r26
    a380:	c6 01       	movw	r24, r12
    a382:	b5 01       	movw	r22, r10
    a384:	29 ad       	ldd	r18, Y+57	; 0x39
    a386:	3a ad       	ldd	r19, Y+58	; 0x3a
    a388:	4b ad       	ldd	r20, Y+59	; 0x3b
    a38a:	5c ad       	ldd	r21, Y+60	; 0x3c
    a38c:	0e 94 d1 5e 	call	0xbda2	; 0xbda2 <__mulsi3>
    a390:	9b 01       	movw	r18, r22
    a392:	ac 01       	movw	r20, r24
    a394:	87 01       	movw	r16, r14
    a396:	ff 24       	eor	r15, r15
    a398:	ee 24       	eor	r14, r14
    a39a:	8d a5       	ldd	r24, Y+45	; 0x2d
    a39c:	9e a5       	ldd	r25, Y+46	; 0x2e
    a39e:	af a5       	ldd	r26, Y+47	; 0x2f
    a3a0:	b8 a9       	ldd	r27, Y+48	; 0x30
    a3a2:	a0 70       	andi	r26, 0x00	; 0
    a3a4:	b0 70       	andi	r27, 0x00	; 0
    a3a6:	e8 2a       	or	r14, r24
    a3a8:	f9 2a       	or	r15, r25
    a3aa:	0a 2b       	or	r16, r26
    a3ac:	1b 2b       	or	r17, r27
    a3ae:	e2 16       	cp	r14, r18
    a3b0:	f3 06       	cpc	r15, r19
    a3b2:	04 07       	cpc	r16, r20
    a3b4:	15 07       	cpc	r17, r21
    a3b6:	c0 f4       	brcc	.+48     	; 0xa3e8 <__udivdi3+0x2ea>
    a3b8:	08 94       	sec
    a3ba:	a1 08       	sbc	r10, r1
    a3bc:	b1 08       	sbc	r11, r1
    a3be:	c1 08       	sbc	r12, r1
    a3c0:	d1 08       	sbc	r13, r1
    a3c2:	e2 0c       	add	r14, r2
    a3c4:	f3 1c       	adc	r15, r3
    a3c6:	04 1d       	adc	r16, r4
    a3c8:	15 1d       	adc	r17, r5
    a3ca:	e2 14       	cp	r14, r2
    a3cc:	f3 04       	cpc	r15, r3
    a3ce:	04 05       	cpc	r16, r4
    a3d0:	15 05       	cpc	r17, r5
    a3d2:	50 f0       	brcs	.+20     	; 0xa3e8 <__udivdi3+0x2ea>
    a3d4:	e2 16       	cp	r14, r18
    a3d6:	f3 06       	cpc	r15, r19
    a3d8:	04 07       	cpc	r16, r20
    a3da:	15 07       	cpc	r17, r21
    a3dc:	28 f4       	brcc	.+10     	; 0xa3e8 <__udivdi3+0x2ea>
    a3de:	08 94       	sec
    a3e0:	a1 08       	sbc	r10, r1
    a3e2:	b1 08       	sbc	r11, r1
    a3e4:	c1 08       	sbc	r12, r1
    a3e6:	d1 08       	sbc	r13, r1
    a3e8:	d3 01       	movw	r26, r6
    a3ea:	99 27       	eor	r25, r25
    a3ec:	88 27       	eor	r24, r24
    a3ee:	86 01       	movw	r16, r12
    a3f0:	75 01       	movw	r14, r10
    a3f2:	e8 2a       	or	r14, r24
    a3f4:	f9 2a       	or	r15, r25
    a3f6:	0a 2b       	or	r16, r26
    a3f8:	1b 2b       	or	r17, r27
    a3fa:	e9 aa       	std	Y+49, r14	; 0x31
    a3fc:	fa aa       	std	Y+50, r15	; 0x32
    a3fe:	0b ab       	std	Y+51, r16	; 0x33
    a400:	1c ab       	std	Y+52, r17	; 0x34
    a402:	cf c4       	rjmp	.+2462   	; 0xada2 <__udivdi3+0xca4>
    a404:	21 14       	cp	r2, r1
    a406:	31 04       	cpc	r3, r1
    a408:	41 04       	cpc	r4, r1
    a40a:	51 04       	cpc	r5, r1
    a40c:	71 f4       	brne	.+28     	; 0xa42a <__udivdi3+0x32c>
    a40e:	61 e0       	ldi	r22, 0x01	; 1
    a410:	70 e0       	ldi	r23, 0x00	; 0
    a412:	80 e0       	ldi	r24, 0x00	; 0
    a414:	90 e0       	ldi	r25, 0x00	; 0
    a416:	20 e0       	ldi	r18, 0x00	; 0
    a418:	30 e0       	ldi	r19, 0x00	; 0
    a41a:	40 e0       	ldi	r20, 0x00	; 0
    a41c:	50 e0       	ldi	r21, 0x00	; 0
    a41e:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    a422:	c9 01       	movw	r24, r18
    a424:	da 01       	movw	r26, r20
    a426:	1c 01       	movw	r2, r24
    a428:	2d 01       	movw	r4, r26
    a42a:	00 e0       	ldi	r16, 0x00	; 0
    a42c:	20 16       	cp	r2, r16
    a42e:	00 e0       	ldi	r16, 0x00	; 0
    a430:	30 06       	cpc	r3, r16
    a432:	01 e0       	ldi	r16, 0x01	; 1
    a434:	40 06       	cpc	r4, r16
    a436:	00 e0       	ldi	r16, 0x00	; 0
    a438:	50 06       	cpc	r5, r16
    a43a:	88 f4       	brcc	.+34     	; 0xa45e <__udivdi3+0x360>
    a43c:	1f ef       	ldi	r17, 0xFF	; 255
    a43e:	21 16       	cp	r2, r17
    a440:	31 04       	cpc	r3, r1
    a442:	41 04       	cpc	r4, r1
    a444:	51 04       	cpc	r5, r1
    a446:	31 f0       	breq	.+12     	; 0xa454 <__udivdi3+0x356>
    a448:	28 f0       	brcs	.+10     	; 0xa454 <__udivdi3+0x356>
    a44a:	48 e0       	ldi	r20, 0x08	; 8
    a44c:	50 e0       	ldi	r21, 0x00	; 0
    a44e:	60 e0       	ldi	r22, 0x00	; 0
    a450:	70 e0       	ldi	r23, 0x00	; 0
    a452:	17 c0       	rjmp	.+46     	; 0xa482 <__udivdi3+0x384>
    a454:	40 e0       	ldi	r20, 0x00	; 0
    a456:	50 e0       	ldi	r21, 0x00	; 0
    a458:	60 e0       	ldi	r22, 0x00	; 0
    a45a:	70 e0       	ldi	r23, 0x00	; 0
    a45c:	12 c0       	rjmp	.+36     	; 0xa482 <__udivdi3+0x384>
    a45e:	20 e0       	ldi	r18, 0x00	; 0
    a460:	22 16       	cp	r2, r18
    a462:	20 e0       	ldi	r18, 0x00	; 0
    a464:	32 06       	cpc	r3, r18
    a466:	20 e0       	ldi	r18, 0x00	; 0
    a468:	42 06       	cpc	r4, r18
    a46a:	21 e0       	ldi	r18, 0x01	; 1
    a46c:	52 06       	cpc	r5, r18
    a46e:	28 f0       	brcs	.+10     	; 0xa47a <__udivdi3+0x37c>
    a470:	48 e1       	ldi	r20, 0x18	; 24
    a472:	50 e0       	ldi	r21, 0x00	; 0
    a474:	60 e0       	ldi	r22, 0x00	; 0
    a476:	70 e0       	ldi	r23, 0x00	; 0
    a478:	04 c0       	rjmp	.+8      	; 0xa482 <__udivdi3+0x384>
    a47a:	40 e1       	ldi	r20, 0x10	; 16
    a47c:	50 e0       	ldi	r21, 0x00	; 0
    a47e:	60 e0       	ldi	r22, 0x00	; 0
    a480:	70 e0       	ldi	r23, 0x00	; 0
    a482:	d2 01       	movw	r26, r4
    a484:	c1 01       	movw	r24, r2
    a486:	04 2e       	mov	r0, r20
    a488:	04 c0       	rjmp	.+8      	; 0xa492 <__udivdi3+0x394>
    a48a:	b6 95       	lsr	r27
    a48c:	a7 95       	ror	r26
    a48e:	97 95       	ror	r25
    a490:	87 95       	ror	r24
    a492:	0a 94       	dec	r0
    a494:	d2 f7       	brpl	.-12     	; 0xa48a <__udivdi3+0x38c>
    a496:	83 5d       	subi	r24, 0xD3	; 211
    a498:	9f 4d       	sbci	r25, 0xDF	; 223
    a49a:	dc 01       	movw	r26, r24
    a49c:	2c 91       	ld	r18, X
    a49e:	e0 e2       	ldi	r30, 0x20	; 32
    a4a0:	ee 2e       	mov	r14, r30
    a4a2:	f1 2c       	mov	r15, r1
    a4a4:	01 2d       	mov	r16, r1
    a4a6:	11 2d       	mov	r17, r1
    a4a8:	d8 01       	movw	r26, r16
    a4aa:	c7 01       	movw	r24, r14
    a4ac:	84 1b       	sub	r24, r20
    a4ae:	95 0b       	sbc	r25, r21
    a4b0:	a6 0b       	sbc	r26, r22
    a4b2:	b7 0b       	sbc	r27, r23
    a4b4:	82 1b       	sub	r24, r18
    a4b6:	91 09       	sbc	r25, r1
    a4b8:	a1 09       	sbc	r26, r1
    a4ba:	b1 09       	sbc	r27, r1
    a4bc:	00 97       	sbiw	r24, 0x00	; 0
    a4be:	a1 05       	cpc	r26, r1
    a4c0:	b1 05       	cpc	r27, r1
    a4c2:	61 f4       	brne	.+24     	; 0xa4dc <__udivdi3+0x3de>
    a4c4:	64 01       	movw	r12, r8
    a4c6:	53 01       	movw	r10, r6
    a4c8:	a2 18       	sub	r10, r2
    a4ca:	b3 08       	sbc	r11, r3
    a4cc:	c4 08       	sbc	r12, r4
    a4ce:	d5 08       	sbc	r13, r5
    a4d0:	31 e0       	ldi	r19, 0x01	; 1
    a4d2:	63 2e       	mov	r6, r19
    a4d4:	71 2c       	mov	r7, r1
    a4d6:	81 2c       	mov	r8, r1
    a4d8:	91 2c       	mov	r9, r1
    a4da:	1e c1       	rjmp	.+572    	; 0xa718 <__udivdi3+0x61a>
    a4dc:	6f 96       	adiw	r28, 0x1f	; 31
    a4de:	8f af       	std	Y+63, r24	; 0x3f
    a4e0:	6f 97       	sbiw	r28, 0x1f	; 31
    a4e2:	08 2e       	mov	r0, r24
    a4e4:	04 c0       	rjmp	.+8      	; 0xa4ee <__udivdi3+0x3f0>
    a4e6:	22 0c       	add	r2, r2
    a4e8:	33 1c       	adc	r3, r3
    a4ea:	44 1c       	adc	r4, r4
    a4ec:	55 1c       	adc	r5, r5
    a4ee:	0a 94       	dec	r0
    a4f0:	d2 f7       	brpl	.-12     	; 0xa4e6 <__udivdi3+0x3e8>
    a4f2:	ee 2d       	mov	r30, r14
    a4f4:	e8 1b       	sub	r30, r24
    a4f6:	64 01       	movw	r12, r8
    a4f8:	53 01       	movw	r10, r6
    a4fa:	0e 2e       	mov	r0, r30
    a4fc:	04 c0       	rjmp	.+8      	; 0xa506 <__udivdi3+0x408>
    a4fe:	d6 94       	lsr	r13
    a500:	c7 94       	ror	r12
    a502:	b7 94       	ror	r11
    a504:	a7 94       	ror	r10
    a506:	0a 94       	dec	r0
    a508:	d2 f7       	brpl	.-12     	; 0xa4fe <__udivdi3+0x400>
    a50a:	a4 01       	movw	r20, r8
    a50c:	93 01       	movw	r18, r6
    a50e:	6f 96       	adiw	r28, 0x1f	; 31
    a510:	0f ac       	ldd	r0, Y+63	; 0x3f
    a512:	6f 97       	sbiw	r28, 0x1f	; 31
    a514:	04 c0       	rjmp	.+8      	; 0xa51e <__udivdi3+0x420>
    a516:	22 0f       	add	r18, r18
    a518:	33 1f       	adc	r19, r19
    a51a:	44 1f       	adc	r20, r20
    a51c:	55 1f       	adc	r21, r21
    a51e:	0a 94       	dec	r0
    a520:	d2 f7       	brpl	.-12     	; 0xa516 <__udivdi3+0x418>
    a522:	6d a4       	ldd	r6, Y+45	; 0x2d
    a524:	7e a4       	ldd	r7, Y+46	; 0x2e
    a526:	8f a4       	ldd	r8, Y+47	; 0x2f
    a528:	98 a8       	ldd	r9, Y+48	; 0x30
    a52a:	0e 2e       	mov	r0, r30
    a52c:	04 c0       	rjmp	.+8      	; 0xa536 <__udivdi3+0x438>
    a52e:	96 94       	lsr	r9
    a530:	87 94       	ror	r8
    a532:	77 94       	ror	r7
    a534:	67 94       	ror	r6
    a536:	0a 94       	dec	r0
    a538:	d2 f7       	brpl	.-12     	; 0xa52e <__udivdi3+0x430>
    a53a:	84 01       	movw	r16, r8
    a53c:	73 01       	movw	r14, r6
    a53e:	e2 2a       	or	r14, r18
    a540:	f3 2a       	or	r15, r19
    a542:	04 2b       	or	r16, r20
    a544:	15 2b       	or	r17, r21
    a546:	e9 a6       	std	Y+41, r14	; 0x29
    a548:	fa a6       	std	Y+42, r15	; 0x2a
    a54a:	0b a7       	std	Y+43, r16	; 0x2b
    a54c:	1c a7       	std	Y+44, r17	; 0x2c
    a54e:	32 01       	movw	r6, r4
    a550:	88 24       	eor	r8, r8
    a552:	99 24       	eor	r9, r9
    a554:	92 01       	movw	r18, r4
    a556:	81 01       	movw	r16, r2
    a558:	20 70       	andi	r18, 0x00	; 0
    a55a:	30 70       	andi	r19, 0x00	; 0
    a55c:	21 96       	adiw	r28, 0x01	; 1
    a55e:	0c af       	std	Y+60, r16	; 0x3c
    a560:	1d af       	std	Y+61, r17	; 0x3d
    a562:	2e af       	std	Y+62, r18	; 0x3e
    a564:	3f af       	std	Y+63, r19	; 0x3f
    a566:	21 97       	sbiw	r28, 0x01	; 1
    a568:	c6 01       	movw	r24, r12
    a56a:	b5 01       	movw	r22, r10
    a56c:	a4 01       	movw	r20, r8
    a56e:	93 01       	movw	r18, r6
    a570:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    a574:	7b 01       	movw	r14, r22
    a576:	8c 01       	movw	r16, r24
    a578:	c6 01       	movw	r24, r12
    a57a:	b5 01       	movw	r22, r10
    a57c:	a4 01       	movw	r20, r8
    a57e:	93 01       	movw	r18, r6
    a580:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    a584:	c9 01       	movw	r24, r18
    a586:	da 01       	movw	r26, r20
    a588:	25 96       	adiw	r28, 0x05	; 5
    a58a:	8c af       	std	Y+60, r24	; 0x3c
    a58c:	9d af       	std	Y+61, r25	; 0x3d
    a58e:	ae af       	std	Y+62, r26	; 0x3e
    a590:	bf af       	std	Y+63, r27	; 0x3f
    a592:	25 97       	sbiw	r28, 0x05	; 5
    a594:	bc 01       	movw	r22, r24
    a596:	cd 01       	movw	r24, r26
    a598:	21 96       	adiw	r28, 0x01	; 1
    a59a:	2c ad       	ldd	r18, Y+60	; 0x3c
    a59c:	3d ad       	ldd	r19, Y+61	; 0x3d
    a59e:	4e ad       	ldd	r20, Y+62	; 0x3e
    a5a0:	5f ad       	ldd	r21, Y+63	; 0x3f
    a5a2:	21 97       	sbiw	r28, 0x01	; 1
    a5a4:	0e 94 d1 5e 	call	0xbda2	; 0xbda2 <__mulsi3>
    a5a8:	9b 01       	movw	r18, r22
    a5aa:	ac 01       	movw	r20, r24
    a5ac:	87 01       	movw	r16, r14
    a5ae:	ff 24       	eor	r15, r15
    a5b0:	ee 24       	eor	r14, r14
    a5b2:	a9 a4       	ldd	r10, Y+41	; 0x29
    a5b4:	ba a4       	ldd	r11, Y+42	; 0x2a
    a5b6:	cb a4       	ldd	r12, Y+43	; 0x2b
    a5b8:	dc a4       	ldd	r13, Y+44	; 0x2c
    a5ba:	c6 01       	movw	r24, r12
    a5bc:	aa 27       	eor	r26, r26
    a5be:	bb 27       	eor	r27, r27
    a5c0:	5c 01       	movw	r10, r24
    a5c2:	6d 01       	movw	r12, r26
    a5c4:	ae 28       	or	r10, r14
    a5c6:	bf 28       	or	r11, r15
    a5c8:	c0 2a       	or	r12, r16
    a5ca:	d1 2a       	or	r13, r17
    a5cc:	a2 16       	cp	r10, r18
    a5ce:	b3 06       	cpc	r11, r19
    a5d0:	c4 06       	cpc	r12, r20
    a5d2:	d5 06       	cpc	r13, r21
    a5d4:	60 f5       	brcc	.+88     	; 0xa62e <__udivdi3+0x530>
    a5d6:	25 96       	adiw	r28, 0x05	; 5
    a5d8:	6c ad       	ldd	r22, Y+60	; 0x3c
    a5da:	7d ad       	ldd	r23, Y+61	; 0x3d
    a5dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    a5de:	9f ad       	ldd	r25, Y+63	; 0x3f
    a5e0:	25 97       	sbiw	r28, 0x05	; 5
    a5e2:	61 50       	subi	r22, 0x01	; 1
    a5e4:	70 40       	sbci	r23, 0x00	; 0
    a5e6:	80 40       	sbci	r24, 0x00	; 0
    a5e8:	90 40       	sbci	r25, 0x00	; 0
    a5ea:	25 96       	adiw	r28, 0x05	; 5
    a5ec:	6c af       	std	Y+60, r22	; 0x3c
    a5ee:	7d af       	std	Y+61, r23	; 0x3d
    a5f0:	8e af       	std	Y+62, r24	; 0x3e
    a5f2:	9f af       	std	Y+63, r25	; 0x3f
    a5f4:	25 97       	sbiw	r28, 0x05	; 5
    a5f6:	a2 0c       	add	r10, r2
    a5f8:	b3 1c       	adc	r11, r3
    a5fa:	c4 1c       	adc	r12, r4
    a5fc:	d5 1c       	adc	r13, r5
    a5fe:	a2 14       	cp	r10, r2
    a600:	b3 04       	cpc	r11, r3
    a602:	c4 04       	cpc	r12, r4
    a604:	d5 04       	cpc	r13, r5
    a606:	98 f0       	brcs	.+38     	; 0xa62e <__udivdi3+0x530>
    a608:	a2 16       	cp	r10, r18
    a60a:	b3 06       	cpc	r11, r19
    a60c:	c4 06       	cpc	r12, r20
    a60e:	d5 06       	cpc	r13, r21
    a610:	70 f4       	brcc	.+28     	; 0xa62e <__udivdi3+0x530>
    a612:	61 50       	subi	r22, 0x01	; 1
    a614:	70 40       	sbci	r23, 0x00	; 0
    a616:	80 40       	sbci	r24, 0x00	; 0
    a618:	90 40       	sbci	r25, 0x00	; 0
    a61a:	25 96       	adiw	r28, 0x05	; 5
    a61c:	6c af       	std	Y+60, r22	; 0x3c
    a61e:	7d af       	std	Y+61, r23	; 0x3d
    a620:	8e af       	std	Y+62, r24	; 0x3e
    a622:	9f af       	std	Y+63, r25	; 0x3f
    a624:	25 97       	sbiw	r28, 0x05	; 5
    a626:	a2 0c       	add	r10, r2
    a628:	b3 1c       	adc	r11, r3
    a62a:	c4 1c       	adc	r12, r4
    a62c:	d5 1c       	adc	r13, r5
    a62e:	a2 1a       	sub	r10, r18
    a630:	b3 0a       	sbc	r11, r19
    a632:	c4 0a       	sbc	r12, r20
    a634:	d5 0a       	sbc	r13, r21
    a636:	c6 01       	movw	r24, r12
    a638:	b5 01       	movw	r22, r10
    a63a:	a4 01       	movw	r20, r8
    a63c:	93 01       	movw	r18, r6
    a63e:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    a642:	7b 01       	movw	r14, r22
    a644:	8c 01       	movw	r16, r24
    a646:	c6 01       	movw	r24, r12
    a648:	b5 01       	movw	r22, r10
    a64a:	a4 01       	movw	r20, r8
    a64c:	93 01       	movw	r18, r6
    a64e:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    a652:	c9 01       	movw	r24, r18
    a654:	da 01       	movw	r26, r20
    a656:	3c 01       	movw	r6, r24
    a658:	4d 01       	movw	r8, r26
    a65a:	c4 01       	movw	r24, r8
    a65c:	b3 01       	movw	r22, r6
    a65e:	21 96       	adiw	r28, 0x01	; 1
    a660:	2c ad       	ldd	r18, Y+60	; 0x3c
    a662:	3d ad       	ldd	r19, Y+61	; 0x3d
    a664:	4e ad       	ldd	r20, Y+62	; 0x3e
    a666:	5f ad       	ldd	r21, Y+63	; 0x3f
    a668:	21 97       	sbiw	r28, 0x01	; 1
    a66a:	0e 94 d1 5e 	call	0xbda2	; 0xbda2 <__mulsi3>
    a66e:	9b 01       	movw	r18, r22
    a670:	ac 01       	movw	r20, r24
    a672:	87 01       	movw	r16, r14
    a674:	ff 24       	eor	r15, r15
    a676:	ee 24       	eor	r14, r14
    a678:	89 a5       	ldd	r24, Y+41	; 0x29
    a67a:	9a a5       	ldd	r25, Y+42	; 0x2a
    a67c:	ab a5       	ldd	r26, Y+43	; 0x2b
    a67e:	bc a5       	ldd	r27, Y+44	; 0x2c
    a680:	a0 70       	andi	r26, 0x00	; 0
    a682:	b0 70       	andi	r27, 0x00	; 0
    a684:	57 01       	movw	r10, r14
    a686:	68 01       	movw	r12, r16
    a688:	a8 2a       	or	r10, r24
    a68a:	b9 2a       	or	r11, r25
    a68c:	ca 2a       	or	r12, r26
    a68e:	db 2a       	or	r13, r27
    a690:	a2 16       	cp	r10, r18
    a692:	b3 06       	cpc	r11, r19
    a694:	c4 06       	cpc	r12, r20
    a696:	d5 06       	cpc	r13, r21
    a698:	e0 f4       	brcc	.+56     	; 0xa6d2 <__udivdi3+0x5d4>
    a69a:	08 94       	sec
    a69c:	61 08       	sbc	r6, r1
    a69e:	71 08       	sbc	r7, r1
    a6a0:	81 08       	sbc	r8, r1
    a6a2:	91 08       	sbc	r9, r1
    a6a4:	a2 0c       	add	r10, r2
    a6a6:	b3 1c       	adc	r11, r3
    a6a8:	c4 1c       	adc	r12, r4
    a6aa:	d5 1c       	adc	r13, r5
    a6ac:	a2 14       	cp	r10, r2
    a6ae:	b3 04       	cpc	r11, r3
    a6b0:	c4 04       	cpc	r12, r4
    a6b2:	d5 04       	cpc	r13, r5
    a6b4:	70 f0       	brcs	.+28     	; 0xa6d2 <__udivdi3+0x5d4>
    a6b6:	a2 16       	cp	r10, r18
    a6b8:	b3 06       	cpc	r11, r19
    a6ba:	c4 06       	cpc	r12, r20
    a6bc:	d5 06       	cpc	r13, r21
    a6be:	48 f4       	brcc	.+18     	; 0xa6d2 <__udivdi3+0x5d4>
    a6c0:	08 94       	sec
    a6c2:	61 08       	sbc	r6, r1
    a6c4:	71 08       	sbc	r7, r1
    a6c6:	81 08       	sbc	r8, r1
    a6c8:	91 08       	sbc	r9, r1
    a6ca:	a2 0c       	add	r10, r2
    a6cc:	b3 1c       	adc	r11, r3
    a6ce:	c4 1c       	adc	r12, r4
    a6d0:	d5 1c       	adc	r13, r5
    a6d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    a6d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    a6d6:	af a5       	ldd	r26, Y+47	; 0x2f
    a6d8:	b8 a9       	ldd	r27, Y+48	; 0x30
    a6da:	6f 96       	adiw	r28, 0x1f	; 31
    a6dc:	0f ac       	ldd	r0, Y+63	; 0x3f
    a6de:	6f 97       	sbiw	r28, 0x1f	; 31
    a6e0:	04 c0       	rjmp	.+8      	; 0xa6ea <__udivdi3+0x5ec>
    a6e2:	88 0f       	add	r24, r24
    a6e4:	99 1f       	adc	r25, r25
    a6e6:	aa 1f       	adc	r26, r26
    a6e8:	bb 1f       	adc	r27, r27
    a6ea:	0a 94       	dec	r0
    a6ec:	d2 f7       	brpl	.-12     	; 0xa6e2 <__udivdi3+0x5e4>
    a6ee:	8d a7       	std	Y+45, r24	; 0x2d
    a6f0:	9e a7       	std	Y+46, r25	; 0x2e
    a6f2:	af a7       	std	Y+47, r26	; 0x2f
    a6f4:	b8 ab       	std	Y+48, r27	; 0x30
    a6f6:	a2 1a       	sub	r10, r18
    a6f8:	b3 0a       	sbc	r11, r19
    a6fa:	c4 0a       	sbc	r12, r20
    a6fc:	d5 0a       	sbc	r13, r21
    a6fe:	25 96       	adiw	r28, 0x05	; 5
    a700:	ec ac       	ldd	r14, Y+60	; 0x3c
    a702:	fd ac       	ldd	r15, Y+61	; 0x3d
    a704:	0e ad       	ldd	r16, Y+62	; 0x3e
    a706:	1f ad       	ldd	r17, Y+63	; 0x3f
    a708:	25 97       	sbiw	r28, 0x05	; 5
    a70a:	d7 01       	movw	r26, r14
    a70c:	99 27       	eor	r25, r25
    a70e:	88 27       	eor	r24, r24
    a710:	68 2a       	or	r6, r24
    a712:	79 2a       	or	r7, r25
    a714:	8a 2a       	or	r8, r26
    a716:	9b 2a       	or	r9, r27
    a718:	82 01       	movw	r16, r4
    a71a:	22 27       	eor	r18, r18
    a71c:	33 27       	eor	r19, r19
    a71e:	29 96       	adiw	r28, 0x09	; 9
    a720:	0c af       	std	Y+60, r16	; 0x3c
    a722:	1d af       	std	Y+61, r17	; 0x3d
    a724:	2e af       	std	Y+62, r18	; 0x3e
    a726:	3f af       	std	Y+63, r19	; 0x3f
    a728:	29 97       	sbiw	r28, 0x09	; 9
    a72a:	a2 01       	movw	r20, r4
    a72c:	91 01       	movw	r18, r2
    a72e:	40 70       	andi	r20, 0x00	; 0
    a730:	50 70       	andi	r21, 0x00	; 0
    a732:	2d 96       	adiw	r28, 0x0d	; 13
    a734:	2c af       	std	Y+60, r18	; 0x3c
    a736:	3d af       	std	Y+61, r19	; 0x3d
    a738:	4e af       	std	Y+62, r20	; 0x3e
    a73a:	5f af       	std	Y+63, r21	; 0x3f
    a73c:	2d 97       	sbiw	r28, 0x0d	; 13
    a73e:	c6 01       	movw	r24, r12
    a740:	b5 01       	movw	r22, r10
    a742:	29 96       	adiw	r28, 0x09	; 9
    a744:	2c ad       	ldd	r18, Y+60	; 0x3c
    a746:	3d ad       	ldd	r19, Y+61	; 0x3d
    a748:	4e ad       	ldd	r20, Y+62	; 0x3e
    a74a:	5f ad       	ldd	r21, Y+63	; 0x3f
    a74c:	29 97       	sbiw	r28, 0x09	; 9
    a74e:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    a752:	7b 01       	movw	r14, r22
    a754:	8c 01       	movw	r16, r24
    a756:	c6 01       	movw	r24, r12
    a758:	b5 01       	movw	r22, r10
    a75a:	29 96       	adiw	r28, 0x09	; 9
    a75c:	2c ad       	ldd	r18, Y+60	; 0x3c
    a75e:	3d ad       	ldd	r19, Y+61	; 0x3d
    a760:	4e ad       	ldd	r20, Y+62	; 0x3e
    a762:	5f ad       	ldd	r21, Y+63	; 0x3f
    a764:	29 97       	sbiw	r28, 0x09	; 9
    a766:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    a76a:	c9 01       	movw	r24, r18
    a76c:	da 01       	movw	r26, r20
    a76e:	61 96       	adiw	r28, 0x11	; 17
    a770:	8c af       	std	Y+60, r24	; 0x3c
    a772:	9d af       	std	Y+61, r25	; 0x3d
    a774:	ae af       	std	Y+62, r26	; 0x3e
    a776:	bf af       	std	Y+63, r27	; 0x3f
    a778:	61 97       	sbiw	r28, 0x11	; 17
    a77a:	bc 01       	movw	r22, r24
    a77c:	cd 01       	movw	r24, r26
    a77e:	2d 96       	adiw	r28, 0x0d	; 13
    a780:	2c ad       	ldd	r18, Y+60	; 0x3c
    a782:	3d ad       	ldd	r19, Y+61	; 0x3d
    a784:	4e ad       	ldd	r20, Y+62	; 0x3e
    a786:	5f ad       	ldd	r21, Y+63	; 0x3f
    a788:	2d 97       	sbiw	r28, 0x0d	; 13
    a78a:	0e 94 d1 5e 	call	0xbda2	; 0xbda2 <__mulsi3>
    a78e:	9b 01       	movw	r18, r22
    a790:	ac 01       	movw	r20, r24
    a792:	87 01       	movw	r16, r14
    a794:	ff 24       	eor	r15, r15
    a796:	ee 24       	eor	r14, r14
    a798:	ad a4       	ldd	r10, Y+45	; 0x2d
    a79a:	be a4       	ldd	r11, Y+46	; 0x2e
    a79c:	cf a4       	ldd	r12, Y+47	; 0x2f
    a79e:	d8 a8       	ldd	r13, Y+48	; 0x30
    a7a0:	c6 01       	movw	r24, r12
    a7a2:	aa 27       	eor	r26, r26
    a7a4:	bb 27       	eor	r27, r27
    a7a6:	57 01       	movw	r10, r14
    a7a8:	68 01       	movw	r12, r16
    a7aa:	a8 2a       	or	r10, r24
    a7ac:	b9 2a       	or	r11, r25
    a7ae:	ca 2a       	or	r12, r26
    a7b0:	db 2a       	or	r13, r27
    a7b2:	a2 16       	cp	r10, r18
    a7b4:	b3 06       	cpc	r11, r19
    a7b6:	c4 06       	cpc	r12, r20
    a7b8:	d5 06       	cpc	r13, r21
    a7ba:	60 f5       	brcc	.+88     	; 0xa814 <__udivdi3+0x716>
    a7bc:	61 96       	adiw	r28, 0x11	; 17
    a7be:	6c ad       	ldd	r22, Y+60	; 0x3c
    a7c0:	7d ad       	ldd	r23, Y+61	; 0x3d
    a7c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    a7c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    a7c6:	61 97       	sbiw	r28, 0x11	; 17
    a7c8:	61 50       	subi	r22, 0x01	; 1
    a7ca:	70 40       	sbci	r23, 0x00	; 0
    a7cc:	80 40       	sbci	r24, 0x00	; 0
    a7ce:	90 40       	sbci	r25, 0x00	; 0
    a7d0:	61 96       	adiw	r28, 0x11	; 17
    a7d2:	6c af       	std	Y+60, r22	; 0x3c
    a7d4:	7d af       	std	Y+61, r23	; 0x3d
    a7d6:	8e af       	std	Y+62, r24	; 0x3e
    a7d8:	9f af       	std	Y+63, r25	; 0x3f
    a7da:	61 97       	sbiw	r28, 0x11	; 17
    a7dc:	a2 0c       	add	r10, r2
    a7de:	b3 1c       	adc	r11, r3
    a7e0:	c4 1c       	adc	r12, r4
    a7e2:	d5 1c       	adc	r13, r5
    a7e4:	a2 14       	cp	r10, r2
    a7e6:	b3 04       	cpc	r11, r3
    a7e8:	c4 04       	cpc	r12, r4
    a7ea:	d5 04       	cpc	r13, r5
    a7ec:	98 f0       	brcs	.+38     	; 0xa814 <__udivdi3+0x716>
    a7ee:	a2 16       	cp	r10, r18
    a7f0:	b3 06       	cpc	r11, r19
    a7f2:	c4 06       	cpc	r12, r20
    a7f4:	d5 06       	cpc	r13, r21
    a7f6:	70 f4       	brcc	.+28     	; 0xa814 <__udivdi3+0x716>
    a7f8:	61 50       	subi	r22, 0x01	; 1
    a7fa:	70 40       	sbci	r23, 0x00	; 0
    a7fc:	80 40       	sbci	r24, 0x00	; 0
    a7fe:	90 40       	sbci	r25, 0x00	; 0
    a800:	61 96       	adiw	r28, 0x11	; 17
    a802:	6c af       	std	Y+60, r22	; 0x3c
    a804:	7d af       	std	Y+61, r23	; 0x3d
    a806:	8e af       	std	Y+62, r24	; 0x3e
    a808:	9f af       	std	Y+63, r25	; 0x3f
    a80a:	61 97       	sbiw	r28, 0x11	; 17
    a80c:	a2 0c       	add	r10, r2
    a80e:	b3 1c       	adc	r11, r3
    a810:	c4 1c       	adc	r12, r4
    a812:	d5 1c       	adc	r13, r5
    a814:	a2 1a       	sub	r10, r18
    a816:	b3 0a       	sbc	r11, r19
    a818:	c4 0a       	sbc	r12, r20
    a81a:	d5 0a       	sbc	r13, r21
    a81c:	c6 01       	movw	r24, r12
    a81e:	b5 01       	movw	r22, r10
    a820:	29 96       	adiw	r28, 0x09	; 9
    a822:	2c ad       	ldd	r18, Y+60	; 0x3c
    a824:	3d ad       	ldd	r19, Y+61	; 0x3d
    a826:	4e ad       	ldd	r20, Y+62	; 0x3e
    a828:	5f ad       	ldd	r21, Y+63	; 0x3f
    a82a:	29 97       	sbiw	r28, 0x09	; 9
    a82c:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    a830:	7b 01       	movw	r14, r22
    a832:	8c 01       	movw	r16, r24
    a834:	c6 01       	movw	r24, r12
    a836:	b5 01       	movw	r22, r10
    a838:	29 96       	adiw	r28, 0x09	; 9
    a83a:	2c ad       	ldd	r18, Y+60	; 0x3c
    a83c:	3d ad       	ldd	r19, Y+61	; 0x3d
    a83e:	4e ad       	ldd	r20, Y+62	; 0x3e
    a840:	5f ad       	ldd	r21, Y+63	; 0x3f
    a842:	29 97       	sbiw	r28, 0x09	; 9
    a844:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    a848:	c9 01       	movw	r24, r18
    a84a:	da 01       	movw	r26, r20
    a84c:	5c 01       	movw	r10, r24
    a84e:	6d 01       	movw	r12, r26
    a850:	c6 01       	movw	r24, r12
    a852:	b5 01       	movw	r22, r10
    a854:	2d 96       	adiw	r28, 0x0d	; 13
    a856:	2c ad       	ldd	r18, Y+60	; 0x3c
    a858:	3d ad       	ldd	r19, Y+61	; 0x3d
    a85a:	4e ad       	ldd	r20, Y+62	; 0x3e
    a85c:	5f ad       	ldd	r21, Y+63	; 0x3f
    a85e:	2d 97       	sbiw	r28, 0x0d	; 13
    a860:	0e 94 d1 5e 	call	0xbda2	; 0xbda2 <__mulsi3>
    a864:	9b 01       	movw	r18, r22
    a866:	ac 01       	movw	r20, r24
    a868:	87 01       	movw	r16, r14
    a86a:	ff 24       	eor	r15, r15
    a86c:	ee 24       	eor	r14, r14
    a86e:	8d a5       	ldd	r24, Y+45	; 0x2d
    a870:	9e a5       	ldd	r25, Y+46	; 0x2e
    a872:	af a5       	ldd	r26, Y+47	; 0x2f
    a874:	b8 a9       	ldd	r27, Y+48	; 0x30
    a876:	a0 70       	andi	r26, 0x00	; 0
    a878:	b0 70       	andi	r27, 0x00	; 0
    a87a:	e8 2a       	or	r14, r24
    a87c:	f9 2a       	or	r15, r25
    a87e:	0a 2b       	or	r16, r26
    a880:	1b 2b       	or	r17, r27
    a882:	e2 16       	cp	r14, r18
    a884:	f3 06       	cpc	r15, r19
    a886:	04 07       	cpc	r16, r20
    a888:	15 07       	cpc	r17, r21
    a88a:	c0 f4       	brcc	.+48     	; 0xa8bc <__udivdi3+0x7be>
    a88c:	08 94       	sec
    a88e:	a1 08       	sbc	r10, r1
    a890:	b1 08       	sbc	r11, r1
    a892:	c1 08       	sbc	r12, r1
    a894:	d1 08       	sbc	r13, r1
    a896:	e2 0c       	add	r14, r2
    a898:	f3 1c       	adc	r15, r3
    a89a:	04 1d       	adc	r16, r4
    a89c:	15 1d       	adc	r17, r5
    a89e:	e2 14       	cp	r14, r2
    a8a0:	f3 04       	cpc	r15, r3
    a8a2:	04 05       	cpc	r16, r4
    a8a4:	15 05       	cpc	r17, r5
    a8a6:	50 f0       	brcs	.+20     	; 0xa8bc <__udivdi3+0x7be>
    a8a8:	e2 16       	cp	r14, r18
    a8aa:	f3 06       	cpc	r15, r19
    a8ac:	04 07       	cpc	r16, r20
    a8ae:	15 07       	cpc	r17, r21
    a8b0:	28 f4       	brcc	.+10     	; 0xa8bc <__udivdi3+0x7be>
    a8b2:	08 94       	sec
    a8b4:	a1 08       	sbc	r10, r1
    a8b6:	b1 08       	sbc	r11, r1
    a8b8:	c1 08       	sbc	r12, r1
    a8ba:	d1 08       	sbc	r13, r1
    a8bc:	61 96       	adiw	r28, 0x11	; 17
    a8be:	ec ac       	ldd	r14, Y+60	; 0x3c
    a8c0:	fd ac       	ldd	r15, Y+61	; 0x3d
    a8c2:	0e ad       	ldd	r16, Y+62	; 0x3e
    a8c4:	1f ad       	ldd	r17, Y+63	; 0x3f
    a8c6:	61 97       	sbiw	r28, 0x11	; 17
    a8c8:	d7 01       	movw	r26, r14
    a8ca:	99 27       	eor	r25, r25
    a8cc:	88 27       	eor	r24, r24
    a8ce:	96 01       	movw	r18, r12
    a8d0:	85 01       	movw	r16, r10
    a8d2:	08 2b       	or	r16, r24
    a8d4:	19 2b       	or	r17, r25
    a8d6:	2a 2b       	or	r18, r26
    a8d8:	3b 2b       	or	r19, r27
    a8da:	09 ab       	std	Y+49, r16	; 0x31
    a8dc:	1a ab       	std	Y+50, r17	; 0x32
    a8de:	2b ab       	std	Y+51, r18	; 0x33
    a8e0:	3c ab       	std	Y+52, r19	; 0x34
    a8e2:	62 c2       	rjmp	.+1220   	; 0xada8 <__udivdi3+0xcaa>
    a8e4:	6e 14       	cp	r6, r14
    a8e6:	7f 04       	cpc	r7, r15
    a8e8:	80 06       	cpc	r8, r16
    a8ea:	91 06       	cpc	r9, r17
    a8ec:	08 f4       	brcc	.+2      	; 0xa8f0 <__udivdi3+0x7f2>
    a8ee:	51 c2       	rjmp	.+1186   	; 0xad92 <__udivdi3+0xc94>
    a8f0:	20 e0       	ldi	r18, 0x00	; 0
    a8f2:	e2 16       	cp	r14, r18
    a8f4:	20 e0       	ldi	r18, 0x00	; 0
    a8f6:	f2 06       	cpc	r15, r18
    a8f8:	21 e0       	ldi	r18, 0x01	; 1
    a8fa:	02 07       	cpc	r16, r18
    a8fc:	20 e0       	ldi	r18, 0x00	; 0
    a8fe:	12 07       	cpc	r17, r18
    a900:	88 f4       	brcc	.+34     	; 0xa924 <__udivdi3+0x826>
    a902:	3f ef       	ldi	r19, 0xFF	; 255
    a904:	e3 16       	cp	r14, r19
    a906:	f1 04       	cpc	r15, r1
    a908:	01 05       	cpc	r16, r1
    a90a:	11 05       	cpc	r17, r1
    a90c:	31 f0       	breq	.+12     	; 0xa91a <__udivdi3+0x81c>
    a90e:	28 f0       	brcs	.+10     	; 0xa91a <__udivdi3+0x81c>
    a910:	48 e0       	ldi	r20, 0x08	; 8
    a912:	50 e0       	ldi	r21, 0x00	; 0
    a914:	60 e0       	ldi	r22, 0x00	; 0
    a916:	70 e0       	ldi	r23, 0x00	; 0
    a918:	17 c0       	rjmp	.+46     	; 0xa948 <__udivdi3+0x84a>
    a91a:	40 e0       	ldi	r20, 0x00	; 0
    a91c:	50 e0       	ldi	r21, 0x00	; 0
    a91e:	60 e0       	ldi	r22, 0x00	; 0
    a920:	70 e0       	ldi	r23, 0x00	; 0
    a922:	12 c0       	rjmp	.+36     	; 0xa948 <__udivdi3+0x84a>
    a924:	40 e0       	ldi	r20, 0x00	; 0
    a926:	e4 16       	cp	r14, r20
    a928:	40 e0       	ldi	r20, 0x00	; 0
    a92a:	f4 06       	cpc	r15, r20
    a92c:	40 e0       	ldi	r20, 0x00	; 0
    a92e:	04 07       	cpc	r16, r20
    a930:	41 e0       	ldi	r20, 0x01	; 1
    a932:	14 07       	cpc	r17, r20
    a934:	28 f0       	brcs	.+10     	; 0xa940 <__udivdi3+0x842>
    a936:	48 e1       	ldi	r20, 0x18	; 24
    a938:	50 e0       	ldi	r21, 0x00	; 0
    a93a:	60 e0       	ldi	r22, 0x00	; 0
    a93c:	70 e0       	ldi	r23, 0x00	; 0
    a93e:	04 c0       	rjmp	.+8      	; 0xa948 <__udivdi3+0x84a>
    a940:	40 e1       	ldi	r20, 0x10	; 16
    a942:	50 e0       	ldi	r21, 0x00	; 0
    a944:	60 e0       	ldi	r22, 0x00	; 0
    a946:	70 e0       	ldi	r23, 0x00	; 0
    a948:	d8 01       	movw	r26, r16
    a94a:	c7 01       	movw	r24, r14
    a94c:	04 2e       	mov	r0, r20
    a94e:	04 c0       	rjmp	.+8      	; 0xa958 <__udivdi3+0x85a>
    a950:	b6 95       	lsr	r27
    a952:	a7 95       	ror	r26
    a954:	97 95       	ror	r25
    a956:	87 95       	ror	r24
    a958:	0a 94       	dec	r0
    a95a:	d2 f7       	brpl	.-12     	; 0xa950 <__udivdi3+0x852>
    a95c:	83 5d       	subi	r24, 0xD3	; 211
    a95e:	9f 4d       	sbci	r25, 0xDF	; 223
    a960:	dc 01       	movw	r26, r24
    a962:	2c 91       	ld	r18, X
    a964:	30 e2       	ldi	r19, 0x20	; 32
    a966:	a3 2e       	mov	r10, r19
    a968:	b1 2c       	mov	r11, r1
    a96a:	c1 2c       	mov	r12, r1
    a96c:	d1 2c       	mov	r13, r1
    a96e:	d6 01       	movw	r26, r12
    a970:	c5 01       	movw	r24, r10
    a972:	84 1b       	sub	r24, r20
    a974:	95 0b       	sbc	r25, r21
    a976:	a6 0b       	sbc	r26, r22
    a978:	b7 0b       	sbc	r27, r23
    a97a:	82 1b       	sub	r24, r18
    a97c:	91 09       	sbc	r25, r1
    a97e:	a1 09       	sbc	r26, r1
    a980:	b1 09       	sbc	r27, r1
    a982:	00 97       	sbiw	r24, 0x00	; 0
    a984:	a1 05       	cpc	r26, r1
    a986:	b1 05       	cpc	r27, r1
    a988:	89 f4       	brne	.+34     	; 0xa9ac <__udivdi3+0x8ae>
    a98a:	e6 14       	cp	r14, r6
    a98c:	f7 04       	cpc	r15, r7
    a98e:	08 05       	cpc	r16, r8
    a990:	19 05       	cpc	r17, r9
    a992:	08 f4       	brcc	.+2      	; 0xa996 <__udivdi3+0x898>
    a994:	f2 c1       	rjmp	.+996    	; 0xad7a <__udivdi3+0xc7c>
    a996:	6d a4       	ldd	r6, Y+45	; 0x2d
    a998:	7e a4       	ldd	r7, Y+46	; 0x2e
    a99a:	8f a4       	ldd	r8, Y+47	; 0x2f
    a99c:	98 a8       	ldd	r9, Y+48	; 0x30
    a99e:	62 14       	cp	r6, r2
    a9a0:	73 04       	cpc	r7, r3
    a9a2:	84 04       	cpc	r8, r4
    a9a4:	95 04       	cpc	r9, r5
    a9a6:	08 f0       	brcs	.+2      	; 0xa9aa <__udivdi3+0x8ac>
    a9a8:	e8 c1       	rjmp	.+976    	; 0xad7a <__udivdi3+0xc7c>
    a9aa:	f3 c1       	rjmp	.+998    	; 0xad92 <__udivdi3+0xc94>
    a9ac:	6e 96       	adiw	r28, 0x1e	; 30
    a9ae:	8f af       	std	Y+63, r24	; 0x3f
    a9b0:	6e 97       	sbiw	r28, 0x1e	; 30
    a9b2:	08 2e       	mov	r0, r24
    a9b4:	04 c0       	rjmp	.+8      	; 0xa9be <__udivdi3+0x8c0>
    a9b6:	ee 0c       	add	r14, r14
    a9b8:	ff 1c       	adc	r15, r15
    a9ba:	00 1f       	adc	r16, r16
    a9bc:	11 1f       	adc	r17, r17
    a9be:	0a 94       	dec	r0
    a9c0:	d2 f7       	brpl	.-12     	; 0xa9b6 <__udivdi3+0x8b8>
    a9c2:	6a 2d       	mov	r22, r10
    a9c4:	68 1b       	sub	r22, r24
    a9c6:	d2 01       	movw	r26, r4
    a9c8:	c1 01       	movw	r24, r2
    a9ca:	06 2e       	mov	r0, r22
    a9cc:	04 c0       	rjmp	.+8      	; 0xa9d6 <__udivdi3+0x8d8>
    a9ce:	b6 95       	lsr	r27
    a9d0:	a7 95       	ror	r26
    a9d2:	97 95       	ror	r25
    a9d4:	87 95       	ror	r24
    a9d6:	0a 94       	dec	r0
    a9d8:	d2 f7       	brpl	.-12     	; 0xa9ce <__udivdi3+0x8d0>
    a9da:	5c 01       	movw	r10, r24
    a9dc:	6d 01       	movw	r12, r26
    a9de:	ae 28       	or	r10, r14
    a9e0:	bf 28       	or	r11, r15
    a9e2:	c0 2a       	or	r12, r16
    a9e4:	d1 2a       	or	r13, r17
    a9e6:	ad a2       	std	Y+37, r10	; 0x25
    a9e8:	be a2       	std	Y+38, r11	; 0x26
    a9ea:	cf a2       	std	Y+39, r12	; 0x27
    a9ec:	d8 a6       	std	Y+40, r13	; 0x28
    a9ee:	72 01       	movw	r14, r4
    a9f0:	61 01       	movw	r12, r2
    a9f2:	6e 96       	adiw	r28, 0x1e	; 30
    a9f4:	0f ac       	ldd	r0, Y+63	; 0x3f
    a9f6:	6e 97       	sbiw	r28, 0x1e	; 30
    a9f8:	04 c0       	rjmp	.+8      	; 0xaa02 <__udivdi3+0x904>
    a9fa:	cc 0c       	add	r12, r12
    a9fc:	dd 1c       	adc	r13, r13
    a9fe:	ee 1c       	adc	r14, r14
    aa00:	ff 1c       	adc	r15, r15
    aa02:	0a 94       	dec	r0
    aa04:	d2 f7       	brpl	.-12     	; 0xa9fa <__udivdi3+0x8fc>
    aa06:	c9 a2       	std	Y+33, r12	; 0x21
    aa08:	da a2       	std	Y+34, r13	; 0x22
    aa0a:	eb a2       	std	Y+35, r14	; 0x23
    aa0c:	fc a2       	std	Y+36, r15	; 0x24
    aa0e:	64 01       	movw	r12, r8
    aa10:	53 01       	movw	r10, r6
    aa12:	06 2e       	mov	r0, r22
    aa14:	04 c0       	rjmp	.+8      	; 0xaa1e <__udivdi3+0x920>
    aa16:	d6 94       	lsr	r13
    aa18:	c7 94       	ror	r12
    aa1a:	b7 94       	ror	r11
    aa1c:	a7 94       	ror	r10
    aa1e:	0a 94       	dec	r0
    aa20:	d2 f7       	brpl	.-12     	; 0xaa16 <__udivdi3+0x918>
    aa22:	d4 01       	movw	r26, r8
    aa24:	c3 01       	movw	r24, r6
    aa26:	6e 96       	adiw	r28, 0x1e	; 30
    aa28:	0f ac       	ldd	r0, Y+63	; 0x3f
    aa2a:	6e 97       	sbiw	r28, 0x1e	; 30
    aa2c:	04 c0       	rjmp	.+8      	; 0xaa36 <__udivdi3+0x938>
    aa2e:	88 0f       	add	r24, r24
    aa30:	99 1f       	adc	r25, r25
    aa32:	aa 1f       	adc	r26, r26
    aa34:	bb 1f       	adc	r27, r27
    aa36:	0a 94       	dec	r0
    aa38:	d2 f7       	brpl	.-12     	; 0xaa2e <__udivdi3+0x930>
    aa3a:	ed a4       	ldd	r14, Y+45	; 0x2d
    aa3c:	fe a4       	ldd	r15, Y+46	; 0x2e
    aa3e:	0f a5       	ldd	r16, Y+47	; 0x2f
    aa40:	18 a9       	ldd	r17, Y+48	; 0x30
    aa42:	04 c0       	rjmp	.+8      	; 0xaa4c <__udivdi3+0x94e>
    aa44:	16 95       	lsr	r17
    aa46:	07 95       	ror	r16
    aa48:	f7 94       	ror	r15
    aa4a:	e7 94       	ror	r14
    aa4c:	6a 95       	dec	r22
    aa4e:	d2 f7       	brpl	.-12     	; 0xaa44 <__udivdi3+0x946>
    aa50:	37 01       	movw	r6, r14
    aa52:	48 01       	movw	r8, r16
    aa54:	68 2a       	or	r6, r24
    aa56:	79 2a       	or	r7, r25
    aa58:	8a 2a       	or	r8, r26
    aa5a:	9b 2a       	or	r9, r27
    aa5c:	6d 8e       	std	Y+29, r6	; 0x1d
    aa5e:	7e 8e       	std	Y+30, r7	; 0x1e
    aa60:	8f 8e       	std	Y+31, r8	; 0x1f
    aa62:	98 a2       	std	Y+32, r9	; 0x20
    aa64:	ed a0       	ldd	r14, Y+37	; 0x25
    aa66:	fe a0       	ldd	r15, Y+38	; 0x26
    aa68:	0f a1       	ldd	r16, Y+39	; 0x27
    aa6a:	18 a5       	ldd	r17, Y+40	; 0x28
    aa6c:	38 01       	movw	r6, r16
    aa6e:	88 24       	eor	r8, r8
    aa70:	99 24       	eor	r9, r9
    aa72:	98 01       	movw	r18, r16
    aa74:	87 01       	movw	r16, r14
    aa76:	20 70       	andi	r18, 0x00	; 0
    aa78:	30 70       	andi	r19, 0x00	; 0
    aa7a:	65 96       	adiw	r28, 0x15	; 21
    aa7c:	0c af       	std	Y+60, r16	; 0x3c
    aa7e:	1d af       	std	Y+61, r17	; 0x3d
    aa80:	2e af       	std	Y+62, r18	; 0x3e
    aa82:	3f af       	std	Y+63, r19	; 0x3f
    aa84:	65 97       	sbiw	r28, 0x15	; 21
    aa86:	c6 01       	movw	r24, r12
    aa88:	b5 01       	movw	r22, r10
    aa8a:	a4 01       	movw	r20, r8
    aa8c:	93 01       	movw	r18, r6
    aa8e:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    aa92:	7b 01       	movw	r14, r22
    aa94:	8c 01       	movw	r16, r24
    aa96:	c6 01       	movw	r24, r12
    aa98:	b5 01       	movw	r22, r10
    aa9a:	a4 01       	movw	r20, r8
    aa9c:	93 01       	movw	r18, r6
    aa9e:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    aaa2:	c9 01       	movw	r24, r18
    aaa4:	da 01       	movw	r26, r20
    aaa6:	1c 01       	movw	r2, r24
    aaa8:	2d 01       	movw	r4, r26
    aaaa:	c2 01       	movw	r24, r4
    aaac:	b1 01       	movw	r22, r2
    aaae:	65 96       	adiw	r28, 0x15	; 21
    aab0:	2c ad       	ldd	r18, Y+60	; 0x3c
    aab2:	3d ad       	ldd	r19, Y+61	; 0x3d
    aab4:	4e ad       	ldd	r20, Y+62	; 0x3e
    aab6:	5f ad       	ldd	r21, Y+63	; 0x3f
    aab8:	65 97       	sbiw	r28, 0x15	; 21
    aaba:	0e 94 d1 5e 	call	0xbda2	; 0xbda2 <__mulsi3>
    aabe:	9b 01       	movw	r18, r22
    aac0:	ac 01       	movw	r20, r24
    aac2:	87 01       	movw	r16, r14
    aac4:	ff 24       	eor	r15, r15
    aac6:	ee 24       	eor	r14, r14
    aac8:	ad 8c       	ldd	r10, Y+29	; 0x1d
    aaca:	be 8c       	ldd	r11, Y+30	; 0x1e
    aacc:	cf 8c       	ldd	r12, Y+31	; 0x1f
    aace:	d8 a0       	ldd	r13, Y+32	; 0x20
    aad0:	c6 01       	movw	r24, r12
    aad2:	aa 27       	eor	r26, r26
    aad4:	bb 27       	eor	r27, r27
    aad6:	57 01       	movw	r10, r14
    aad8:	68 01       	movw	r12, r16
    aada:	a8 2a       	or	r10, r24
    aadc:	b9 2a       	or	r11, r25
    aade:	ca 2a       	or	r12, r26
    aae0:	db 2a       	or	r13, r27
    aae2:	a2 16       	cp	r10, r18
    aae4:	b3 06       	cpc	r11, r19
    aae6:	c4 06       	cpc	r12, r20
    aae8:	d5 06       	cpc	r13, r21
    aaea:	00 f5       	brcc	.+64     	; 0xab2c <__udivdi3+0xa2e>
    aaec:	08 94       	sec
    aaee:	21 08       	sbc	r2, r1
    aaf0:	31 08       	sbc	r3, r1
    aaf2:	41 08       	sbc	r4, r1
    aaf4:	51 08       	sbc	r5, r1
    aaf6:	ed a0       	ldd	r14, Y+37	; 0x25
    aaf8:	fe a0       	ldd	r15, Y+38	; 0x26
    aafa:	0f a1       	ldd	r16, Y+39	; 0x27
    aafc:	18 a5       	ldd	r17, Y+40	; 0x28
    aafe:	ae 0c       	add	r10, r14
    ab00:	bf 1c       	adc	r11, r15
    ab02:	c0 1e       	adc	r12, r16
    ab04:	d1 1e       	adc	r13, r17
    ab06:	ae 14       	cp	r10, r14
    ab08:	bf 04       	cpc	r11, r15
    ab0a:	c0 06       	cpc	r12, r16
    ab0c:	d1 06       	cpc	r13, r17
    ab0e:	70 f0       	brcs	.+28     	; 0xab2c <__udivdi3+0xa2e>
    ab10:	a2 16       	cp	r10, r18
    ab12:	b3 06       	cpc	r11, r19
    ab14:	c4 06       	cpc	r12, r20
    ab16:	d5 06       	cpc	r13, r21
    ab18:	48 f4       	brcc	.+18     	; 0xab2c <__udivdi3+0xa2e>
    ab1a:	08 94       	sec
    ab1c:	21 08       	sbc	r2, r1
    ab1e:	31 08       	sbc	r3, r1
    ab20:	41 08       	sbc	r4, r1
    ab22:	51 08       	sbc	r5, r1
    ab24:	ae 0c       	add	r10, r14
    ab26:	bf 1c       	adc	r11, r15
    ab28:	c0 1e       	adc	r12, r16
    ab2a:	d1 1e       	adc	r13, r17
    ab2c:	a2 1a       	sub	r10, r18
    ab2e:	b3 0a       	sbc	r11, r19
    ab30:	c4 0a       	sbc	r12, r20
    ab32:	d5 0a       	sbc	r13, r21
    ab34:	c6 01       	movw	r24, r12
    ab36:	b5 01       	movw	r22, r10
    ab38:	a4 01       	movw	r20, r8
    ab3a:	93 01       	movw	r18, r6
    ab3c:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    ab40:	7b 01       	movw	r14, r22
    ab42:	8c 01       	movw	r16, r24
    ab44:	c6 01       	movw	r24, r12
    ab46:	b5 01       	movw	r22, r10
    ab48:	a4 01       	movw	r20, r8
    ab4a:	93 01       	movw	r18, r6
    ab4c:	0e 94 f0 5e 	call	0xbde0	; 0xbde0 <__udivmodsi4>
    ab50:	c9 01       	movw	r24, r18
    ab52:	da 01       	movw	r26, r20
    ab54:	3c 01       	movw	r6, r24
    ab56:	4d 01       	movw	r8, r26
    ab58:	c4 01       	movw	r24, r8
    ab5a:	b3 01       	movw	r22, r6
    ab5c:	65 96       	adiw	r28, 0x15	; 21
    ab5e:	2c ad       	ldd	r18, Y+60	; 0x3c
    ab60:	3d ad       	ldd	r19, Y+61	; 0x3d
    ab62:	4e ad       	ldd	r20, Y+62	; 0x3e
    ab64:	5f ad       	ldd	r21, Y+63	; 0x3f
    ab66:	65 97       	sbiw	r28, 0x15	; 21
    ab68:	0e 94 d1 5e 	call	0xbda2	; 0xbda2 <__mulsi3>
    ab6c:	9b 01       	movw	r18, r22
    ab6e:	ac 01       	movw	r20, r24
    ab70:	87 01       	movw	r16, r14
    ab72:	ff 24       	eor	r15, r15
    ab74:	ee 24       	eor	r14, r14
    ab76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    ab78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    ab7a:	af 8d       	ldd	r26, Y+31	; 0x1f
    ab7c:	b8 a1       	ldd	r27, Y+32	; 0x20
    ab7e:	a0 70       	andi	r26, 0x00	; 0
    ab80:	b0 70       	andi	r27, 0x00	; 0
    ab82:	57 01       	movw	r10, r14
    ab84:	68 01       	movw	r12, r16
    ab86:	a8 2a       	or	r10, r24
    ab88:	b9 2a       	or	r11, r25
    ab8a:	ca 2a       	or	r12, r26
    ab8c:	db 2a       	or	r13, r27
    ab8e:	a2 16       	cp	r10, r18
    ab90:	b3 06       	cpc	r11, r19
    ab92:	c4 06       	cpc	r12, r20
    ab94:	d5 06       	cpc	r13, r21
    ab96:	00 f5       	brcc	.+64     	; 0xabd8 <__udivdi3+0xada>
    ab98:	08 94       	sec
    ab9a:	61 08       	sbc	r6, r1
    ab9c:	71 08       	sbc	r7, r1
    ab9e:	81 08       	sbc	r8, r1
    aba0:	91 08       	sbc	r9, r1
    aba2:	6d a1       	ldd	r22, Y+37	; 0x25
    aba4:	7e a1       	ldd	r23, Y+38	; 0x26
    aba6:	8f a1       	ldd	r24, Y+39	; 0x27
    aba8:	98 a5       	ldd	r25, Y+40	; 0x28
    abaa:	a6 0e       	add	r10, r22
    abac:	b7 1e       	adc	r11, r23
    abae:	c8 1e       	adc	r12, r24
    abb0:	d9 1e       	adc	r13, r25
    abb2:	a6 16       	cp	r10, r22
    abb4:	b7 06       	cpc	r11, r23
    abb6:	c8 06       	cpc	r12, r24
    abb8:	d9 06       	cpc	r13, r25
    abba:	70 f0       	brcs	.+28     	; 0xabd8 <__udivdi3+0xada>
    abbc:	a2 16       	cp	r10, r18
    abbe:	b3 06       	cpc	r11, r19
    abc0:	c4 06       	cpc	r12, r20
    abc2:	d5 06       	cpc	r13, r21
    abc4:	48 f4       	brcc	.+18     	; 0xabd8 <__udivdi3+0xada>
    abc6:	08 94       	sec
    abc8:	61 08       	sbc	r6, r1
    abca:	71 08       	sbc	r7, r1
    abcc:	81 08       	sbc	r8, r1
    abce:	91 08       	sbc	r9, r1
    abd0:	a6 0e       	add	r10, r22
    abd2:	b7 1e       	adc	r11, r23
    abd4:	c8 1e       	adc	r12, r24
    abd6:	d9 1e       	adc	r13, r25
    abd8:	d6 01       	movw	r26, r12
    abda:	c5 01       	movw	r24, r10
    abdc:	82 1b       	sub	r24, r18
    abde:	93 0b       	sbc	r25, r19
    abe0:	a4 0b       	sbc	r26, r20
    abe2:	b5 0b       	sbc	r27, r21
    abe4:	89 8f       	std	Y+25, r24	; 0x19
    abe6:	9a 8f       	std	Y+26, r25	; 0x1a
    abe8:	ab 8f       	std	Y+27, r26	; 0x1b
    abea:	bc 8f       	std	Y+28, r27	; 0x1c
    abec:	d1 01       	movw	r26, r2
    abee:	99 27       	eor	r25, r25
    abf0:	88 27       	eor	r24, r24
    abf2:	64 01       	movw	r12, r8
    abf4:	53 01       	movw	r10, r6
    abf6:	a8 2a       	or	r10, r24
    abf8:	b9 2a       	or	r11, r25
    abfa:	ca 2a       	or	r12, r26
    abfc:	db 2a       	or	r13, r27
    abfe:	a9 aa       	std	Y+49, r10	; 0x31
    ac00:	ba aa       	std	Y+50, r11	; 0x32
    ac02:	cb aa       	std	Y+51, r12	; 0x33
    ac04:	dc aa       	std	Y+52, r13	; 0x34
    ac06:	86 01       	movw	r16, r12
    ac08:	75 01       	movw	r14, r10
    ac0a:	2f ef       	ldi	r18, 0xFF	; 255
    ac0c:	3f ef       	ldi	r19, 0xFF	; 255
    ac0e:	40 e0       	ldi	r20, 0x00	; 0
    ac10:	50 e0       	ldi	r21, 0x00	; 0
    ac12:	e2 22       	and	r14, r18
    ac14:	f3 22       	and	r15, r19
    ac16:	04 23       	and	r16, r20
    ac18:	15 23       	and	r17, r21
    ac1a:	a6 01       	movw	r20, r12
    ac1c:	66 27       	eor	r22, r22
    ac1e:	77 27       	eor	r23, r23
    ac20:	6d 96       	adiw	r28, 0x1d	; 29
    ac22:	4c af       	std	Y+60, r20	; 0x3c
    ac24:	5d af       	std	Y+61, r21	; 0x3d
    ac26:	6e af       	std	Y+62, r22	; 0x3e
    ac28:	7f af       	std	Y+63, r23	; 0x3f
    ac2a:	6d 97       	sbiw	r28, 0x1d	; 29
    ac2c:	a9 a0       	ldd	r10, Y+33	; 0x21
    ac2e:	ba a0       	ldd	r11, Y+34	; 0x22
    ac30:	cb a0       	ldd	r12, Y+35	; 0x23
    ac32:	dc a0       	ldd	r13, Y+36	; 0x24
    ac34:	6f ef       	ldi	r22, 0xFF	; 255
    ac36:	7f ef       	ldi	r23, 0xFF	; 255
    ac38:	80 e0       	ldi	r24, 0x00	; 0
    ac3a:	90 e0       	ldi	r25, 0x00	; 0
    ac3c:	a6 22       	and	r10, r22
    ac3e:	b7 22       	and	r11, r23
    ac40:	c8 22       	and	r12, r24
    ac42:	d9 22       	and	r13, r25
    ac44:	89 a1       	ldd	r24, Y+33	; 0x21
    ac46:	9a a1       	ldd	r25, Y+34	; 0x22
    ac48:	ab a1       	ldd	r26, Y+35	; 0x23
    ac4a:	bc a1       	ldd	r27, Y+36	; 0x24
    ac4c:	1d 01       	movw	r2, r26
    ac4e:	44 24       	eor	r4, r4
    ac50:	55 24       	eor	r5, r5
    ac52:	c8 01       	movw	r24, r16
    ac54:	b7 01       	movw	r22, r14
    ac56:	a6 01       	movw	r20, r12
    ac58:	95 01       	movw	r18, r10
    ac5a:	0e 94 d1 5e 	call	0xbda2	; 0xbda2 <__mulsi3>
    ac5e:	69 96       	adiw	r28, 0x19	; 25
    ac60:	6c af       	std	Y+60, r22	; 0x3c
    ac62:	7d af       	std	Y+61, r23	; 0x3d
    ac64:	8e af       	std	Y+62, r24	; 0x3e
    ac66:	9f af       	std	Y+63, r25	; 0x3f
    ac68:	69 97       	sbiw	r28, 0x19	; 25
    ac6a:	c8 01       	movw	r24, r16
    ac6c:	b7 01       	movw	r22, r14
    ac6e:	a2 01       	movw	r20, r4
    ac70:	91 01       	movw	r18, r2
    ac72:	0e 94 d1 5e 	call	0xbda2	; 0xbda2 <__mulsi3>
    ac76:	3b 01       	movw	r6, r22
    ac78:	4c 01       	movw	r8, r24
    ac7a:	6d 96       	adiw	r28, 0x1d	; 29
    ac7c:	6c ad       	ldd	r22, Y+60	; 0x3c
    ac7e:	7d ad       	ldd	r23, Y+61	; 0x3d
    ac80:	8e ad       	ldd	r24, Y+62	; 0x3e
    ac82:	9f ad       	ldd	r25, Y+63	; 0x3f
    ac84:	6d 97       	sbiw	r28, 0x1d	; 29
    ac86:	a6 01       	movw	r20, r12
    ac88:	95 01       	movw	r18, r10
    ac8a:	0e 94 d1 5e 	call	0xbda2	; 0xbda2 <__mulsi3>
    ac8e:	7b 01       	movw	r14, r22
    ac90:	8c 01       	movw	r16, r24
    ac92:	6d 96       	adiw	r28, 0x1d	; 29
    ac94:	6c ad       	ldd	r22, Y+60	; 0x3c
    ac96:	7d ad       	ldd	r23, Y+61	; 0x3d
    ac98:	8e ad       	ldd	r24, Y+62	; 0x3e
    ac9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    ac9c:	6d 97       	sbiw	r28, 0x1d	; 29
    ac9e:	a2 01       	movw	r20, r4
    aca0:	91 01       	movw	r18, r2
    aca2:	0e 94 d1 5e 	call	0xbda2	; 0xbda2 <__mulsi3>
    aca6:	5b 01       	movw	r10, r22
    aca8:	6c 01       	movw	r12, r24
    acaa:	a8 01       	movw	r20, r16
    acac:	97 01       	movw	r18, r14
    acae:	26 0d       	add	r18, r6
    acb0:	37 1d       	adc	r19, r7
    acb2:	48 1d       	adc	r20, r8
    acb4:	59 1d       	adc	r21, r9
    acb6:	69 96       	adiw	r28, 0x19	; 25
    acb8:	6c ac       	ldd	r6, Y+60	; 0x3c
    acba:	7d ac       	ldd	r7, Y+61	; 0x3d
    acbc:	8e ac       	ldd	r8, Y+62	; 0x3e
    acbe:	9f ac       	ldd	r9, Y+63	; 0x3f
    acc0:	69 97       	sbiw	r28, 0x19	; 25
    acc2:	c4 01       	movw	r24, r8
    acc4:	aa 27       	eor	r26, r26
    acc6:	bb 27       	eor	r27, r27
    acc8:	28 0f       	add	r18, r24
    acca:	39 1f       	adc	r19, r25
    accc:	4a 1f       	adc	r20, r26
    acce:	5b 1f       	adc	r21, r27
    acd0:	2e 15       	cp	r18, r14
    acd2:	3f 05       	cpc	r19, r15
    acd4:	40 07       	cpc	r20, r16
    acd6:	51 07       	cpc	r21, r17
    acd8:	48 f4       	brcc	.+18     	; 0xacec <__udivdi3+0xbee>
    acda:	e1 2c       	mov	r14, r1
    acdc:	f1 2c       	mov	r15, r1
    acde:	61 e0       	ldi	r22, 0x01	; 1
    ace0:	06 2f       	mov	r16, r22
    ace2:	11 2d       	mov	r17, r1
    ace4:	ae 0c       	add	r10, r14
    ace6:	bf 1c       	adc	r11, r15
    ace8:	c0 1e       	adc	r12, r16
    acea:	d1 1e       	adc	r13, r17
    acec:	ca 01       	movw	r24, r20
    acee:	aa 27       	eor	r26, r26
    acf0:	bb 27       	eor	r27, r27
    acf2:	bc 01       	movw	r22, r24
    acf4:	cd 01       	movw	r24, r26
    acf6:	6a 0d       	add	r22, r10
    acf8:	7b 1d       	adc	r23, r11
    acfa:	8c 1d       	adc	r24, r12
    acfc:	9d 1d       	adc	r25, r13
    acfe:	69 8c       	ldd	r6, Y+25	; 0x19
    ad00:	7a 8c       	ldd	r7, Y+26	; 0x1a
    ad02:	8b 8c       	ldd	r8, Y+27	; 0x1b
    ad04:	9c 8c       	ldd	r9, Y+28	; 0x1c
    ad06:	66 16       	cp	r6, r22
    ad08:	77 06       	cpc	r7, r23
    ad0a:	88 06       	cpc	r8, r24
    ad0c:	99 06       	cpc	r9, r25
    ad0e:	40 f1       	brcs	.+80     	; 0xad60 <__udivdi3+0xc62>
    ad10:	66 15       	cp	r22, r6
    ad12:	77 05       	cpc	r23, r7
    ad14:	88 05       	cpc	r24, r8
    ad16:	99 05       	cpc	r25, r9
    ad18:	09 f0       	breq	.+2      	; 0xad1c <__udivdi3+0xc1e>
    ad1a:	43 c0       	rjmp	.+134    	; 0xada2 <__udivdi3+0xca4>
    ad1c:	d9 01       	movw	r26, r18
    ad1e:	99 27       	eor	r25, r25
    ad20:	88 27       	eor	r24, r24
    ad22:	69 96       	adiw	r28, 0x19	; 25
    ad24:	2c ad       	ldd	r18, Y+60	; 0x3c
    ad26:	3d ad       	ldd	r19, Y+61	; 0x3d
    ad28:	4e ad       	ldd	r20, Y+62	; 0x3e
    ad2a:	5f ad       	ldd	r21, Y+63	; 0x3f
    ad2c:	69 97       	sbiw	r28, 0x19	; 25
    ad2e:	40 70       	andi	r20, 0x00	; 0
    ad30:	50 70       	andi	r21, 0x00	; 0
    ad32:	82 0f       	add	r24, r18
    ad34:	93 1f       	adc	r25, r19
    ad36:	a4 1f       	adc	r26, r20
    ad38:	b5 1f       	adc	r27, r21
    ad3a:	2d a5       	ldd	r18, Y+45	; 0x2d
    ad3c:	3e a5       	ldd	r19, Y+46	; 0x2e
    ad3e:	4f a5       	ldd	r20, Y+47	; 0x2f
    ad40:	58 a9       	ldd	r21, Y+48	; 0x30
    ad42:	6e 96       	adiw	r28, 0x1e	; 30
    ad44:	0f ac       	ldd	r0, Y+63	; 0x3f
    ad46:	6e 97       	sbiw	r28, 0x1e	; 30
    ad48:	04 c0       	rjmp	.+8      	; 0xad52 <__udivdi3+0xc54>
    ad4a:	22 0f       	add	r18, r18
    ad4c:	33 1f       	adc	r19, r19
    ad4e:	44 1f       	adc	r20, r20
    ad50:	55 1f       	adc	r21, r21
    ad52:	0a 94       	dec	r0
    ad54:	d2 f7       	brpl	.-12     	; 0xad4a <__udivdi3+0xc4c>
    ad56:	28 17       	cp	r18, r24
    ad58:	39 07       	cpc	r19, r25
    ad5a:	4a 07       	cpc	r20, r26
    ad5c:	5b 07       	cpc	r21, r27
    ad5e:	08 f5       	brcc	.+66     	; 0xada2 <__udivdi3+0xca4>
    ad60:	09 a9       	ldd	r16, Y+49	; 0x31
    ad62:	1a a9       	ldd	r17, Y+50	; 0x32
    ad64:	2b a9       	ldd	r18, Y+51	; 0x33
    ad66:	3c a9       	ldd	r19, Y+52	; 0x34
    ad68:	01 50       	subi	r16, 0x01	; 1
    ad6a:	10 40       	sbci	r17, 0x00	; 0
    ad6c:	20 40       	sbci	r18, 0x00	; 0
    ad6e:	30 40       	sbci	r19, 0x00	; 0
    ad70:	09 ab       	std	Y+49, r16	; 0x31
    ad72:	1a ab       	std	Y+50, r17	; 0x32
    ad74:	2b ab       	std	Y+51, r18	; 0x33
    ad76:	3c ab       	std	Y+52, r19	; 0x34
    ad78:	14 c0       	rjmp	.+40     	; 0xada2 <__udivdi3+0xca4>
    ad7a:	66 24       	eor	r6, r6
    ad7c:	77 24       	eor	r7, r7
    ad7e:	43 01       	movw	r8, r6
    ad80:	21 e0       	ldi	r18, 0x01	; 1
    ad82:	30 e0       	ldi	r19, 0x00	; 0
    ad84:	40 e0       	ldi	r20, 0x00	; 0
    ad86:	50 e0       	ldi	r21, 0x00	; 0
    ad88:	29 ab       	std	Y+49, r18	; 0x31
    ad8a:	3a ab       	std	Y+50, r19	; 0x32
    ad8c:	4b ab       	std	Y+51, r20	; 0x33
    ad8e:	5c ab       	std	Y+52, r21	; 0x34
    ad90:	0b c0       	rjmp	.+22     	; 0xada8 <__udivdi3+0xcaa>
    ad92:	66 24       	eor	r6, r6
    ad94:	77 24       	eor	r7, r7
    ad96:	43 01       	movw	r8, r6
    ad98:	19 aa       	std	Y+49, r1	; 0x31
    ad9a:	1a aa       	std	Y+50, r1	; 0x32
    ad9c:	1b aa       	std	Y+51, r1	; 0x33
    ad9e:	1c aa       	std	Y+52, r1	; 0x34
    ada0:	03 c0       	rjmp	.+6      	; 0xada8 <__udivdi3+0xcaa>
    ada2:	66 24       	eor	r6, r6
    ada4:	77 24       	eor	r7, r7
    ada6:	43 01       	movw	r8, r6
    ada8:	fe 01       	movw	r30, r28
    adaa:	71 96       	adiw	r30, 0x11	; 17
    adac:	88 e0       	ldi	r24, 0x08	; 8
    adae:	df 01       	movw	r26, r30
    adb0:	1d 92       	st	X+, r1
    adb2:	8a 95       	dec	r24
    adb4:	e9 f7       	brne	.-6      	; 0xadb0 <__udivdi3+0xcb2>
    adb6:	a9 a8       	ldd	r10, Y+49	; 0x31
    adb8:	ba a8       	ldd	r11, Y+50	; 0x32
    adba:	cb a8       	ldd	r12, Y+51	; 0x33
    adbc:	dc a8       	ldd	r13, Y+52	; 0x34
    adbe:	a9 8a       	std	Y+17, r10	; 0x11
    adc0:	ba 8a       	std	Y+18, r11	; 0x12
    adc2:	cb 8a       	std	Y+19, r12	; 0x13
    adc4:	dc 8a       	std	Y+20, r13	; 0x14
    adc6:	6d 8a       	std	Y+21, r6	; 0x15
    adc8:	7e 8a       	std	Y+22, r7	; 0x16
    adca:	8f 8a       	std	Y+23, r8	; 0x17
    adcc:	98 8e       	std	Y+24, r9	; 0x18
    adce:	29 a9       	ldd	r18, Y+49	; 0x31
    add0:	3a 89       	ldd	r19, Y+18	; 0x12
    add2:	4b 89       	ldd	r20, Y+19	; 0x13
    add4:	5c 89       	ldd	r21, Y+20	; 0x14
    add6:	66 2d       	mov	r22, r6
    add8:	7e 89       	ldd	r23, Y+22	; 0x16
    adda:	8f 89       	ldd	r24, Y+23	; 0x17
    addc:	98 8d       	ldd	r25, Y+24	; 0x18
    adde:	c2 5a       	subi	r28, 0xA2	; 162
    ade0:	df 4f       	sbci	r29, 0xFF	; 255
    ade2:	e2 e1       	ldi	r30, 0x12	; 18
    ade4:	0c 94 2e 5f 	jmp	0xbe5c	; 0xbe5c <__epilogue_restores__>

0000ade8 <vfprintf>:
    ade8:	2f 92       	push	r2
    adea:	3f 92       	push	r3
    adec:	4f 92       	push	r4
    adee:	5f 92       	push	r5
    adf0:	6f 92       	push	r6
    adf2:	7f 92       	push	r7
    adf4:	8f 92       	push	r8
    adf6:	9f 92       	push	r9
    adf8:	af 92       	push	r10
    adfa:	bf 92       	push	r11
    adfc:	cf 92       	push	r12
    adfe:	df 92       	push	r13
    ae00:	ef 92       	push	r14
    ae02:	ff 92       	push	r15
    ae04:	0f 93       	push	r16
    ae06:	1f 93       	push	r17
    ae08:	df 93       	push	r29
    ae0a:	cf 93       	push	r28
    ae0c:	cd b7       	in	r28, 0x3d	; 61
    ae0e:	de b7       	in	r29, 0x3e	; 62
    ae10:	61 97       	sbiw	r28, 0x11	; 17
    ae12:	cd bf       	out	0x3d, r28	; 61
    ae14:	de bf       	out	0x3e, r29	; 62
    ae16:	3c 01       	movw	r6, r24
    ae18:	6e 87       	std	Y+14, r22	; 0x0e
    ae1a:	7f 87       	std	Y+15, r23	; 0x0f
    ae1c:	6a 01       	movw	r12, r20
    ae1e:	fc 01       	movw	r30, r24
    ae20:	16 82       	std	Z+6, r1	; 0x06
    ae22:	17 82       	std	Z+7, r1	; 0x07
    ae24:	83 81       	ldd	r24, Z+3	; 0x03
    ae26:	81 fd       	sbrc	r24, 1
    ae28:	03 c0       	rjmp	.+6      	; 0xae30 <vfprintf+0x48>
    ae2a:	6f ef       	ldi	r22, 0xFF	; 255
    ae2c:	7f ef       	ldi	r23, 0xFF	; 255
    ae2e:	6f c3       	rjmp	.+1758   	; 0xb50e <vfprintf+0x726>
    ae30:	9e 01       	movw	r18, r28
    ae32:	2f 5f       	subi	r18, 0xFF	; 255
    ae34:	3f 4f       	sbci	r19, 0xFF	; 255
    ae36:	28 8b       	std	Y+16, r18	; 0x10
    ae38:	39 8b       	std	Y+17, r19	; 0x11
    ae3a:	f3 01       	movw	r30, r6
    ae3c:	23 81       	ldd	r18, Z+3	; 0x03
    ae3e:	ee 85       	ldd	r30, Y+14	; 0x0e
    ae40:	ff 85       	ldd	r31, Y+15	; 0x0f
    ae42:	23 fd       	sbrc	r18, 3
    ae44:	85 91       	lpm	r24, Z+
    ae46:	23 ff       	sbrs	r18, 3
    ae48:	81 91       	ld	r24, Z+
    ae4a:	ee 87       	std	Y+14, r30	; 0x0e
    ae4c:	ff 87       	std	Y+15, r31	; 0x0f
    ae4e:	88 23       	and	r24, r24
    ae50:	09 f4       	brne	.+2      	; 0xae54 <vfprintf+0x6c>
    ae52:	5a c3       	rjmp	.+1716   	; 0xb508 <vfprintf+0x720>
    ae54:	85 32       	cpi	r24, 0x25	; 37
    ae56:	51 f4       	brne	.+20     	; 0xae6c <vfprintf+0x84>
    ae58:	ee 85       	ldd	r30, Y+14	; 0x0e
    ae5a:	ff 85       	ldd	r31, Y+15	; 0x0f
    ae5c:	23 fd       	sbrc	r18, 3
    ae5e:	85 91       	lpm	r24, Z+
    ae60:	23 ff       	sbrs	r18, 3
    ae62:	81 91       	ld	r24, Z+
    ae64:	ee 87       	std	Y+14, r30	; 0x0e
    ae66:	ff 87       	std	Y+15, r31	; 0x0f
    ae68:	85 32       	cpi	r24, 0x25	; 37
    ae6a:	29 f4       	brne	.+10     	; 0xae76 <vfprintf+0x8e>
    ae6c:	90 e0       	ldi	r25, 0x00	; 0
    ae6e:	b3 01       	movw	r22, r6
    ae70:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    ae74:	e2 cf       	rjmp	.-60     	; 0xae3a <vfprintf+0x52>
    ae76:	98 2f       	mov	r25, r24
    ae78:	10 e0       	ldi	r17, 0x00	; 0
    ae7a:	88 24       	eor	r8, r8
    ae7c:	99 24       	eor	r9, r9
    ae7e:	10 32       	cpi	r17, 0x20	; 32
    ae80:	b0 f4       	brcc	.+44     	; 0xaeae <vfprintf+0xc6>
    ae82:	9b 32       	cpi	r25, 0x2B	; 43
    ae84:	69 f0       	breq	.+26     	; 0xaea0 <vfprintf+0xb8>
    ae86:	9c 32       	cpi	r25, 0x2C	; 44
    ae88:	28 f4       	brcc	.+10     	; 0xae94 <vfprintf+0xac>
    ae8a:	90 32       	cpi	r25, 0x20	; 32
    ae8c:	51 f0       	breq	.+20     	; 0xaea2 <vfprintf+0xba>
    ae8e:	93 32       	cpi	r25, 0x23	; 35
    ae90:	71 f4       	brne	.+28     	; 0xaeae <vfprintf+0xc6>
    ae92:	0b c0       	rjmp	.+22     	; 0xaeaa <vfprintf+0xc2>
    ae94:	9d 32       	cpi	r25, 0x2D	; 45
    ae96:	39 f0       	breq	.+14     	; 0xaea6 <vfprintf+0xbe>
    ae98:	90 33       	cpi	r25, 0x30	; 48
    ae9a:	49 f4       	brne	.+18     	; 0xaeae <vfprintf+0xc6>
    ae9c:	11 60       	ori	r17, 0x01	; 1
    ae9e:	28 c0       	rjmp	.+80     	; 0xaef0 <vfprintf+0x108>
    aea0:	12 60       	ori	r17, 0x02	; 2
    aea2:	14 60       	ori	r17, 0x04	; 4
    aea4:	25 c0       	rjmp	.+74     	; 0xaef0 <vfprintf+0x108>
    aea6:	18 60       	ori	r17, 0x08	; 8
    aea8:	23 c0       	rjmp	.+70     	; 0xaef0 <vfprintf+0x108>
    aeaa:	10 61       	ori	r17, 0x10	; 16
    aeac:	21 c0       	rjmp	.+66     	; 0xaef0 <vfprintf+0x108>
    aeae:	17 fd       	sbrc	r17, 7
    aeb0:	2a c0       	rjmp	.+84     	; 0xaf06 <vfprintf+0x11e>
    aeb2:	89 2f       	mov	r24, r25
    aeb4:	80 53       	subi	r24, 0x30	; 48
    aeb6:	8a 30       	cpi	r24, 0x0A	; 10
    aeb8:	78 f4       	brcc	.+30     	; 0xaed8 <vfprintf+0xf0>
    aeba:	16 ff       	sbrs	r17, 6
    aebc:	06 c0       	rjmp	.+12     	; 0xaeca <vfprintf+0xe2>
    aebe:	fa e0       	ldi	r31, 0x0A	; 10
    aec0:	9f 9e       	mul	r9, r31
    aec2:	90 2c       	mov	r9, r0
    aec4:	11 24       	eor	r1, r1
    aec6:	98 0e       	add	r9, r24
    aec8:	13 c0       	rjmp	.+38     	; 0xaef0 <vfprintf+0x108>
    aeca:	3a e0       	ldi	r19, 0x0A	; 10
    aecc:	83 9e       	mul	r8, r19
    aece:	80 2c       	mov	r8, r0
    aed0:	11 24       	eor	r1, r1
    aed2:	88 0e       	add	r8, r24
    aed4:	10 62       	ori	r17, 0x20	; 32
    aed6:	0c c0       	rjmp	.+24     	; 0xaef0 <vfprintf+0x108>
    aed8:	9e 32       	cpi	r25, 0x2E	; 46
    aeda:	21 f4       	brne	.+8      	; 0xaee4 <vfprintf+0xfc>
    aedc:	16 fd       	sbrc	r17, 6
    aede:	14 c3       	rjmp	.+1576   	; 0xb508 <vfprintf+0x720>
    aee0:	10 64       	ori	r17, 0x40	; 64
    aee2:	06 c0       	rjmp	.+12     	; 0xaef0 <vfprintf+0x108>
    aee4:	9c 36       	cpi	r25, 0x6C	; 108
    aee6:	11 f4       	brne	.+4      	; 0xaeec <vfprintf+0x104>
    aee8:	10 68       	ori	r17, 0x80	; 128
    aeea:	02 c0       	rjmp	.+4      	; 0xaef0 <vfprintf+0x108>
    aeec:	98 36       	cpi	r25, 0x68	; 104
    aeee:	59 f4       	brne	.+22     	; 0xaf06 <vfprintf+0x11e>
    aef0:	ee 85       	ldd	r30, Y+14	; 0x0e
    aef2:	ff 85       	ldd	r31, Y+15	; 0x0f
    aef4:	23 fd       	sbrc	r18, 3
    aef6:	95 91       	lpm	r25, Z+
    aef8:	23 ff       	sbrs	r18, 3
    aefa:	91 91       	ld	r25, Z+
    aefc:	ee 87       	std	Y+14, r30	; 0x0e
    aefe:	ff 87       	std	Y+15, r31	; 0x0f
    af00:	99 23       	and	r25, r25
    af02:	09 f0       	breq	.+2      	; 0xaf06 <vfprintf+0x11e>
    af04:	bc cf       	rjmp	.-136    	; 0xae7e <vfprintf+0x96>
    af06:	89 2f       	mov	r24, r25
    af08:	85 54       	subi	r24, 0x45	; 69
    af0a:	83 30       	cpi	r24, 0x03	; 3
    af0c:	20 f4       	brcc	.+8      	; 0xaf16 <vfprintf+0x12e>
    af0e:	81 2f       	mov	r24, r17
    af10:	80 61       	ori	r24, 0x10	; 16
    af12:	90 5e       	subi	r25, 0xE0	; 224
    af14:	07 c0       	rjmp	.+14     	; 0xaf24 <vfprintf+0x13c>
    af16:	89 2f       	mov	r24, r25
    af18:	85 56       	subi	r24, 0x65	; 101
    af1a:	83 30       	cpi	r24, 0x03	; 3
    af1c:	08 f0       	brcs	.+2      	; 0xaf20 <vfprintf+0x138>
    af1e:	9f c1       	rjmp	.+830    	; 0xb25e <vfprintf+0x476>
    af20:	81 2f       	mov	r24, r17
    af22:	8f 7e       	andi	r24, 0xEF	; 239
    af24:	86 fd       	sbrc	r24, 6
    af26:	02 c0       	rjmp	.+4      	; 0xaf2c <vfprintf+0x144>
    af28:	76 e0       	ldi	r23, 0x06	; 6
    af2a:	97 2e       	mov	r9, r23
    af2c:	6f e3       	ldi	r22, 0x3F	; 63
    af2e:	f6 2e       	mov	r15, r22
    af30:	f8 22       	and	r15, r24
    af32:	95 36       	cpi	r25, 0x65	; 101
    af34:	19 f4       	brne	.+6      	; 0xaf3c <vfprintf+0x154>
    af36:	f0 e4       	ldi	r31, 0x40	; 64
    af38:	ff 2a       	or	r15, r31
    af3a:	07 c0       	rjmp	.+14     	; 0xaf4a <vfprintf+0x162>
    af3c:	96 36       	cpi	r25, 0x66	; 102
    af3e:	19 f4       	brne	.+6      	; 0xaf46 <vfprintf+0x15e>
    af40:	20 e8       	ldi	r18, 0x80	; 128
    af42:	f2 2a       	or	r15, r18
    af44:	02 c0       	rjmp	.+4      	; 0xaf4a <vfprintf+0x162>
    af46:	91 10       	cpse	r9, r1
    af48:	9a 94       	dec	r9
    af4a:	f7 fe       	sbrs	r15, 7
    af4c:	0a c0       	rjmp	.+20     	; 0xaf62 <vfprintf+0x17a>
    af4e:	3b e3       	ldi	r19, 0x3B	; 59
    af50:	39 15       	cp	r19, r9
    af52:	18 f4       	brcc	.+6      	; 0xaf5a <vfprintf+0x172>
    af54:	5c e3       	ldi	r21, 0x3C	; 60
    af56:	b5 2e       	mov	r11, r21
    af58:	02 c0       	rjmp	.+4      	; 0xaf5e <vfprintf+0x176>
    af5a:	b9 2c       	mov	r11, r9
    af5c:	b3 94       	inc	r11
    af5e:	27 e0       	ldi	r18, 0x07	; 7
    af60:	09 c0       	rjmp	.+18     	; 0xaf74 <vfprintf+0x18c>
    af62:	47 e0       	ldi	r20, 0x07	; 7
    af64:	49 15       	cp	r20, r9
    af66:	20 f4       	brcc	.+8      	; 0xaf70 <vfprintf+0x188>
    af68:	bb 24       	eor	r11, r11
    af6a:	47 e0       	ldi	r20, 0x07	; 7
    af6c:	94 2e       	mov	r9, r20
    af6e:	f7 cf       	rjmp	.-18     	; 0xaf5e <vfprintf+0x176>
    af70:	29 2d       	mov	r18, r9
    af72:	bb 24       	eor	r11, r11
    af74:	c6 01       	movw	r24, r12
    af76:	04 96       	adiw	r24, 0x04	; 4
    af78:	8c 87       	std	Y+12, r24	; 0x0c
    af7a:	9d 87       	std	Y+13, r25	; 0x0d
    af7c:	f6 01       	movw	r30, r12
    af7e:	60 81       	ld	r22, Z
    af80:	71 81       	ldd	r23, Z+1	; 0x01
    af82:	82 81       	ldd	r24, Z+2	; 0x02
    af84:	93 81       	ldd	r25, Z+3	; 0x03
    af86:	ae 01       	movw	r20, r28
    af88:	4f 5f       	subi	r20, 0xFF	; 255
    af8a:	5f 4f       	sbci	r21, 0xFF	; 255
    af8c:	0b 2d       	mov	r16, r11
    af8e:	0e 94 d5 60 	call	0xc1aa	; 0xc1aa <__ftoa_engine>
    af92:	6c 01       	movw	r12, r24
    af94:	09 81       	ldd	r16, Y+1	; 0x01
    af96:	20 2e       	mov	r2, r16
    af98:	33 24       	eor	r3, r3
    af9a:	00 ff       	sbrs	r16, 0
    af9c:	04 c0       	rjmp	.+8      	; 0xafa6 <vfprintf+0x1be>
    af9e:	03 fd       	sbrc	r16, 3
    afa0:	02 c0       	rjmp	.+4      	; 0xafa6 <vfprintf+0x1be>
    afa2:	1d e2       	ldi	r17, 0x2D	; 45
    afa4:	09 c0       	rjmp	.+18     	; 0xafb8 <vfprintf+0x1d0>
    afa6:	f1 fe       	sbrs	r15, 1
    afa8:	02 c0       	rjmp	.+4      	; 0xafae <vfprintf+0x1c6>
    afaa:	1b e2       	ldi	r17, 0x2B	; 43
    afac:	05 c0       	rjmp	.+10     	; 0xafb8 <vfprintf+0x1d0>
    afae:	f2 fc       	sbrc	r15, 2
    afb0:	02 c0       	rjmp	.+4      	; 0xafb6 <vfprintf+0x1ce>
    afb2:	10 e0       	ldi	r17, 0x00	; 0
    afb4:	01 c0       	rjmp	.+2      	; 0xafb8 <vfprintf+0x1d0>
    afb6:	10 e2       	ldi	r17, 0x20	; 32
    afb8:	c1 01       	movw	r24, r2
    afba:	8c 70       	andi	r24, 0x0C	; 12
    afbc:	90 70       	andi	r25, 0x00	; 0
    afbe:	89 2b       	or	r24, r25
    afc0:	b9 f1       	breq	.+110    	; 0xb030 <vfprintf+0x248>
    afc2:	11 23       	and	r17, r17
    afc4:	11 f4       	brne	.+4      	; 0xafca <vfprintf+0x1e2>
    afc6:	83 e0       	ldi	r24, 0x03	; 3
    afc8:	01 c0       	rjmp	.+2      	; 0xafcc <vfprintf+0x1e4>
    afca:	84 e0       	ldi	r24, 0x04	; 4
    afcc:	88 15       	cp	r24, r8
    afce:	10 f0       	brcs	.+4      	; 0xafd4 <vfprintf+0x1ec>
    afd0:	88 24       	eor	r8, r8
    afd2:	0a c0       	rjmp	.+20     	; 0xafe8 <vfprintf+0x200>
    afd4:	88 1a       	sub	r8, r24
    afd6:	f3 fc       	sbrc	r15, 3
    afd8:	07 c0       	rjmp	.+14     	; 0xafe8 <vfprintf+0x200>
    afda:	80 e2       	ldi	r24, 0x20	; 32
    afdc:	90 e0       	ldi	r25, 0x00	; 0
    afde:	b3 01       	movw	r22, r6
    afe0:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    afe4:	8a 94       	dec	r8
    afe6:	c9 f7       	brne	.-14     	; 0xafda <vfprintf+0x1f2>
    afe8:	11 23       	and	r17, r17
    afea:	29 f0       	breq	.+10     	; 0xaff6 <vfprintf+0x20e>
    afec:	81 2f       	mov	r24, r17
    afee:	90 e0       	ldi	r25, 0x00	; 0
    aff0:	b3 01       	movw	r22, r6
    aff2:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    aff6:	23 fe       	sbrs	r2, 3
    aff8:	03 c0       	rjmp	.+6      	; 0xb000 <vfprintf+0x218>
    affa:	03 e3       	ldi	r16, 0x33	; 51
    affc:	12 e0       	ldi	r17, 0x02	; 2
    affe:	0e c0       	rjmp	.+28     	; 0xb01c <vfprintf+0x234>
    b000:	07 e3       	ldi	r16, 0x37	; 55
    b002:	12 e0       	ldi	r17, 0x02	; 2
    b004:	0b c0       	rjmp	.+22     	; 0xb01c <vfprintf+0x234>
    b006:	e1 14       	cp	r14, r1
    b008:	f1 04       	cpc	r15, r1
    b00a:	09 f0       	breq	.+2      	; 0xb00e <vfprintf+0x226>
    b00c:	80 52       	subi	r24, 0x20	; 32
    b00e:	90 e0       	ldi	r25, 0x00	; 0
    b010:	b3 01       	movw	r22, r6
    b012:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b016:	0f 5f       	subi	r16, 0xFF	; 255
    b018:	1f 4f       	sbci	r17, 0xFF	; 255
    b01a:	05 c0       	rjmp	.+10     	; 0xb026 <vfprintf+0x23e>
    b01c:	ef 2c       	mov	r14, r15
    b01e:	ff 24       	eor	r15, r15
    b020:	f0 e1       	ldi	r31, 0x10	; 16
    b022:	ef 22       	and	r14, r31
    b024:	ff 24       	eor	r15, r15
    b026:	f8 01       	movw	r30, r16
    b028:	84 91       	lpm	r24, Z+
    b02a:	88 23       	and	r24, r24
    b02c:	61 f7       	brne	.-40     	; 0xb006 <vfprintf+0x21e>
    b02e:	14 c1       	rjmp	.+552    	; 0xb258 <vfprintf+0x470>
    b030:	f7 fe       	sbrs	r15, 7
    b032:	12 c0       	rjmp	.+36     	; 0xb058 <vfprintf+0x270>
    b034:	bc 0c       	add	r11, r12
    b036:	24 fe       	sbrs	r2, 4
    b038:	04 c0       	rjmp	.+8      	; 0xb042 <vfprintf+0x25a>
    b03a:	8a 81       	ldd	r24, Y+2	; 0x02
    b03c:	81 33       	cpi	r24, 0x31	; 49
    b03e:	09 f4       	brne	.+2      	; 0xb042 <vfprintf+0x25a>
    b040:	ba 94       	dec	r11
    b042:	1b 14       	cp	r1, r11
    b044:	1c f0       	brlt	.+6      	; 0xb04c <vfprintf+0x264>
    b046:	bb 24       	eor	r11, r11
    b048:	b3 94       	inc	r11
    b04a:	2d c0       	rjmp	.+90     	; 0xb0a6 <vfprintf+0x2be>
    b04c:	f8 e0       	ldi	r31, 0x08	; 8
    b04e:	fb 15       	cp	r31, r11
    b050:	50 f5       	brcc	.+84     	; 0xb0a6 <vfprintf+0x2be>
    b052:	38 e0       	ldi	r19, 0x08	; 8
    b054:	b3 2e       	mov	r11, r19
    b056:	27 c0       	rjmp	.+78     	; 0xb0a6 <vfprintf+0x2be>
    b058:	f6 fc       	sbrc	r15, 6
    b05a:	25 c0       	rjmp	.+74     	; 0xb0a6 <vfprintf+0x2be>
    b05c:	89 2d       	mov	r24, r9
    b05e:	90 e0       	ldi	r25, 0x00	; 0
    b060:	8c 15       	cp	r24, r12
    b062:	9d 05       	cpc	r25, r13
    b064:	4c f0       	brlt	.+18     	; 0xb078 <vfprintf+0x290>
    b066:	2c ef       	ldi	r18, 0xFC	; 252
    b068:	c2 16       	cp	r12, r18
    b06a:	2f ef       	ldi	r18, 0xFF	; 255
    b06c:	d2 06       	cpc	r13, r18
    b06e:	24 f0       	brlt	.+8      	; 0xb078 <vfprintf+0x290>
    b070:	30 e8       	ldi	r19, 0x80	; 128
    b072:	f3 2a       	or	r15, r19
    b074:	01 c0       	rjmp	.+2      	; 0xb078 <vfprintf+0x290>
    b076:	9a 94       	dec	r9
    b078:	99 20       	and	r9, r9
    b07a:	49 f0       	breq	.+18     	; 0xb08e <vfprintf+0x2a6>
    b07c:	e2 e0       	ldi	r30, 0x02	; 2
    b07e:	f0 e0       	ldi	r31, 0x00	; 0
    b080:	ec 0f       	add	r30, r28
    b082:	fd 1f       	adc	r31, r29
    b084:	e9 0d       	add	r30, r9
    b086:	f1 1d       	adc	r31, r1
    b088:	80 81       	ld	r24, Z
    b08a:	80 33       	cpi	r24, 0x30	; 48
    b08c:	a1 f3       	breq	.-24     	; 0xb076 <vfprintf+0x28e>
    b08e:	f7 fe       	sbrs	r15, 7
    b090:	0a c0       	rjmp	.+20     	; 0xb0a6 <vfprintf+0x2be>
    b092:	b9 2c       	mov	r11, r9
    b094:	b3 94       	inc	r11
    b096:	89 2d       	mov	r24, r9
    b098:	90 e0       	ldi	r25, 0x00	; 0
    b09a:	c8 16       	cp	r12, r24
    b09c:	d9 06       	cpc	r13, r25
    b09e:	14 f0       	brlt	.+4      	; 0xb0a4 <vfprintf+0x2bc>
    b0a0:	99 24       	eor	r9, r9
    b0a2:	01 c0       	rjmp	.+2      	; 0xb0a6 <vfprintf+0x2be>
    b0a4:	9c 18       	sub	r9, r12
    b0a6:	f7 fc       	sbrc	r15, 7
    b0a8:	03 c0       	rjmp	.+6      	; 0xb0b0 <vfprintf+0x2c8>
    b0aa:	25 e0       	ldi	r18, 0x05	; 5
    b0ac:	30 e0       	ldi	r19, 0x00	; 0
    b0ae:	09 c0       	rjmp	.+18     	; 0xb0c2 <vfprintf+0x2da>
    b0b0:	1c 14       	cp	r1, r12
    b0b2:	1d 04       	cpc	r1, r13
    b0b4:	1c f0       	brlt	.+6      	; 0xb0bc <vfprintf+0x2d4>
    b0b6:	21 e0       	ldi	r18, 0x01	; 1
    b0b8:	30 e0       	ldi	r19, 0x00	; 0
    b0ba:	03 c0       	rjmp	.+6      	; 0xb0c2 <vfprintf+0x2da>
    b0bc:	96 01       	movw	r18, r12
    b0be:	2f 5f       	subi	r18, 0xFF	; 255
    b0c0:	3f 4f       	sbci	r19, 0xFF	; 255
    b0c2:	11 23       	and	r17, r17
    b0c4:	11 f0       	breq	.+4      	; 0xb0ca <vfprintf+0x2e2>
    b0c6:	2f 5f       	subi	r18, 0xFF	; 255
    b0c8:	3f 4f       	sbci	r19, 0xFF	; 255
    b0ca:	99 20       	and	r9, r9
    b0cc:	29 f0       	breq	.+10     	; 0xb0d8 <vfprintf+0x2f0>
    b0ce:	89 2d       	mov	r24, r9
    b0d0:	90 e0       	ldi	r25, 0x00	; 0
    b0d2:	01 96       	adiw	r24, 0x01	; 1
    b0d4:	28 0f       	add	r18, r24
    b0d6:	39 1f       	adc	r19, r25
    b0d8:	88 2d       	mov	r24, r8
    b0da:	90 e0       	ldi	r25, 0x00	; 0
    b0dc:	28 17       	cp	r18, r24
    b0de:	39 07       	cpc	r19, r25
    b0e0:	14 f0       	brlt	.+4      	; 0xb0e6 <vfprintf+0x2fe>
    b0e2:	88 24       	eor	r8, r8
    b0e4:	01 c0       	rjmp	.+2      	; 0xb0e8 <vfprintf+0x300>
    b0e6:	82 1a       	sub	r8, r18
    b0e8:	4f 2c       	mov	r4, r15
    b0ea:	55 24       	eor	r5, r5
    b0ec:	c2 01       	movw	r24, r4
    b0ee:	89 70       	andi	r24, 0x09	; 9
    b0f0:	90 70       	andi	r25, 0x00	; 0
    b0f2:	89 2b       	or	r24, r25
    b0f4:	39 f0       	breq	.+14     	; 0xb104 <vfprintf+0x31c>
    b0f6:	08 c0       	rjmp	.+16     	; 0xb108 <vfprintf+0x320>
    b0f8:	80 e2       	ldi	r24, 0x20	; 32
    b0fa:	90 e0       	ldi	r25, 0x00	; 0
    b0fc:	b3 01       	movw	r22, r6
    b0fe:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b102:	8a 94       	dec	r8
    b104:	88 20       	and	r8, r8
    b106:	c1 f7       	brne	.-16     	; 0xb0f8 <vfprintf+0x310>
    b108:	11 23       	and	r17, r17
    b10a:	29 f0       	breq	.+10     	; 0xb116 <vfprintf+0x32e>
    b10c:	81 2f       	mov	r24, r17
    b10e:	90 e0       	ldi	r25, 0x00	; 0
    b110:	b3 01       	movw	r22, r6
    b112:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b116:	43 fe       	sbrs	r4, 3
    b118:	07 c0       	rjmp	.+14     	; 0xb128 <vfprintf+0x340>
    b11a:	08 c0       	rjmp	.+16     	; 0xb12c <vfprintf+0x344>
    b11c:	80 e3       	ldi	r24, 0x30	; 48
    b11e:	90 e0       	ldi	r25, 0x00	; 0
    b120:	b3 01       	movw	r22, r6
    b122:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b126:	8a 94       	dec	r8
    b128:	88 20       	and	r8, r8
    b12a:	c1 f7       	brne	.-16     	; 0xb11c <vfprintf+0x334>
    b12c:	f7 fe       	sbrs	r15, 7
    b12e:	46 c0       	rjmp	.+140    	; 0xb1bc <vfprintf+0x3d4>
    b130:	86 01       	movw	r16, r12
    b132:	d7 fe       	sbrs	r13, 7
    b134:	02 c0       	rjmp	.+4      	; 0xb13a <vfprintf+0x352>
    b136:	00 e0       	ldi	r16, 0x00	; 0
    b138:	10 e0       	ldi	r17, 0x00	; 0
    b13a:	76 01       	movw	r14, r12
    b13c:	08 94       	sec
    b13e:	e1 1c       	adc	r14, r1
    b140:	f1 1c       	adc	r15, r1
    b142:	e0 1a       	sub	r14, r16
    b144:	f1 0a       	sbc	r15, r17
    b146:	41 e0       	ldi	r20, 0x01	; 1
    b148:	50 e0       	ldi	r21, 0x00	; 0
    b14a:	4c 0f       	add	r20, r28
    b14c:	5d 1f       	adc	r21, r29
    b14e:	e4 0e       	add	r14, r20
    b150:	f5 1e       	adc	r15, r21
    b152:	26 01       	movw	r4, r12
    b154:	4b 18       	sub	r4, r11
    b156:	51 08       	sbc	r5, r1
    b158:	89 2d       	mov	r24, r9
    b15a:	90 e0       	ldi	r25, 0x00	; 0
    b15c:	aa 24       	eor	r10, r10
    b15e:	bb 24       	eor	r11, r11
    b160:	a8 1a       	sub	r10, r24
    b162:	b9 0a       	sbc	r11, r25
    b164:	5f ef       	ldi	r21, 0xFF	; 255
    b166:	0f 3f       	cpi	r16, 0xFF	; 255
    b168:	15 07       	cpc	r17, r21
    b16a:	29 f4       	brne	.+10     	; 0xb176 <vfprintf+0x38e>
    b16c:	8e e2       	ldi	r24, 0x2E	; 46
    b16e:	90 e0       	ldi	r25, 0x00	; 0
    b170:	b3 01       	movw	r22, r6
    b172:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b176:	c0 16       	cp	r12, r16
    b178:	d1 06       	cpc	r13, r17
    b17a:	34 f0       	brlt	.+12     	; 0xb188 <vfprintf+0x3a0>
    b17c:	40 16       	cp	r4, r16
    b17e:	51 06       	cpc	r5, r17
    b180:	1c f4       	brge	.+6      	; 0xb188 <vfprintf+0x3a0>
    b182:	f7 01       	movw	r30, r14
    b184:	80 81       	ld	r24, Z
    b186:	01 c0       	rjmp	.+2      	; 0xb18a <vfprintf+0x3a2>
    b188:	80 e3       	ldi	r24, 0x30	; 48
    b18a:	01 50       	subi	r16, 0x01	; 1
    b18c:	10 40       	sbci	r17, 0x00	; 0
    b18e:	08 94       	sec
    b190:	e1 1c       	adc	r14, r1
    b192:	f1 1c       	adc	r15, r1
    b194:	0a 15       	cp	r16, r10
    b196:	1b 05       	cpc	r17, r11
    b198:	2c f0       	brlt	.+10     	; 0xb1a4 <vfprintf+0x3bc>
    b19a:	90 e0       	ldi	r25, 0x00	; 0
    b19c:	b3 01       	movw	r22, r6
    b19e:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b1a2:	e0 cf       	rjmp	.-64     	; 0xb164 <vfprintf+0x37c>
    b1a4:	0c 15       	cp	r16, r12
    b1a6:	1d 05       	cpc	r17, r13
    b1a8:	39 f4       	brne	.+14     	; 0xb1b8 <vfprintf+0x3d0>
    b1aa:	9a 81       	ldd	r25, Y+2	; 0x02
    b1ac:	96 33       	cpi	r25, 0x36	; 54
    b1ae:	18 f4       	brcc	.+6      	; 0xb1b6 <vfprintf+0x3ce>
    b1b0:	95 33       	cpi	r25, 0x35	; 53
    b1b2:	11 f4       	brne	.+4      	; 0xb1b8 <vfprintf+0x3d0>
    b1b4:	24 fe       	sbrs	r2, 4
    b1b6:	81 e3       	ldi	r24, 0x31	; 49
    b1b8:	90 e0       	ldi	r25, 0x00	; 0
    b1ba:	4b c0       	rjmp	.+150    	; 0xb252 <vfprintf+0x46a>
    b1bc:	8a 81       	ldd	r24, Y+2	; 0x02
    b1be:	81 33       	cpi	r24, 0x31	; 49
    b1c0:	09 f0       	breq	.+2      	; 0xb1c4 <vfprintf+0x3dc>
    b1c2:	0f 7e       	andi	r16, 0xEF	; 239
    b1c4:	90 e0       	ldi	r25, 0x00	; 0
    b1c6:	b3 01       	movw	r22, r6
    b1c8:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b1cc:	99 20       	and	r9, r9
    b1ce:	a1 f0       	breq	.+40     	; 0xb1f8 <vfprintf+0x410>
    b1d0:	8e e2       	ldi	r24, 0x2E	; 46
    b1d2:	90 e0       	ldi	r25, 0x00	; 0
    b1d4:	b3 01       	movw	r22, r6
    b1d6:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b1da:	12 e0       	ldi	r17, 0x02	; 2
    b1dc:	e1 e0       	ldi	r30, 0x01	; 1
    b1de:	f0 e0       	ldi	r31, 0x00	; 0
    b1e0:	ec 0f       	add	r30, r28
    b1e2:	fd 1f       	adc	r31, r29
    b1e4:	e1 0f       	add	r30, r17
    b1e6:	f1 1d       	adc	r31, r1
    b1e8:	1f 5f       	subi	r17, 0xFF	; 255
    b1ea:	80 81       	ld	r24, Z
    b1ec:	90 e0       	ldi	r25, 0x00	; 0
    b1ee:	b3 01       	movw	r22, r6
    b1f0:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b1f4:	9a 94       	dec	r9
    b1f6:	91 f7       	brne	.-28     	; 0xb1dc <vfprintf+0x3f4>
    b1f8:	44 fc       	sbrc	r4, 4
    b1fa:	03 c0       	rjmp	.+6      	; 0xb202 <vfprintf+0x41a>
    b1fc:	85 e6       	ldi	r24, 0x65	; 101
    b1fe:	90 e0       	ldi	r25, 0x00	; 0
    b200:	02 c0       	rjmp	.+4      	; 0xb206 <vfprintf+0x41e>
    b202:	85 e4       	ldi	r24, 0x45	; 69
    b204:	90 e0       	ldi	r25, 0x00	; 0
    b206:	b3 01       	movw	r22, r6
    b208:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b20c:	d7 fc       	sbrc	r13, 7
    b20e:	05 c0       	rjmp	.+10     	; 0xb21a <vfprintf+0x432>
    b210:	c1 14       	cp	r12, r1
    b212:	d1 04       	cpc	r13, r1
    b214:	41 f4       	brne	.+16     	; 0xb226 <vfprintf+0x43e>
    b216:	04 ff       	sbrs	r16, 4
    b218:	06 c0       	rjmp	.+12     	; 0xb226 <vfprintf+0x43e>
    b21a:	d0 94       	com	r13
    b21c:	c1 94       	neg	r12
    b21e:	d1 08       	sbc	r13, r1
    b220:	d3 94       	inc	r13
    b222:	8d e2       	ldi	r24, 0x2D	; 45
    b224:	01 c0       	rjmp	.+2      	; 0xb228 <vfprintf+0x440>
    b226:	8b e2       	ldi	r24, 0x2B	; 43
    b228:	90 e0       	ldi	r25, 0x00	; 0
    b22a:	b3 01       	movw	r22, r6
    b22c:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b230:	80 e3       	ldi	r24, 0x30	; 48
    b232:	05 c0       	rjmp	.+10     	; 0xb23e <vfprintf+0x456>
    b234:	8f 5f       	subi	r24, 0xFF	; 255
    b236:	26 ef       	ldi	r18, 0xF6	; 246
    b238:	3f ef       	ldi	r19, 0xFF	; 255
    b23a:	c2 0e       	add	r12, r18
    b23c:	d3 1e       	adc	r13, r19
    b23e:	3a e0       	ldi	r19, 0x0A	; 10
    b240:	c3 16       	cp	r12, r19
    b242:	d1 04       	cpc	r13, r1
    b244:	bc f7       	brge	.-18     	; 0xb234 <vfprintf+0x44c>
    b246:	90 e0       	ldi	r25, 0x00	; 0
    b248:	b3 01       	movw	r22, r6
    b24a:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b24e:	c6 01       	movw	r24, r12
    b250:	c0 96       	adiw	r24, 0x30	; 48
    b252:	b3 01       	movw	r22, r6
    b254:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b258:	cc 84       	ldd	r12, Y+12	; 0x0c
    b25a:	dd 84       	ldd	r13, Y+13	; 0x0d
    b25c:	52 c1       	rjmp	.+676    	; 0xb502 <vfprintf+0x71a>
    b25e:	93 36       	cpi	r25, 0x63	; 99
    b260:	31 f0       	breq	.+12     	; 0xb26e <vfprintf+0x486>
    b262:	93 37       	cpi	r25, 0x73	; 115
    b264:	99 f0       	breq	.+38     	; 0xb28c <vfprintf+0x4a4>
    b266:	93 35       	cpi	r25, 0x53	; 83
    b268:	09 f0       	breq	.+2      	; 0xb26c <vfprintf+0x484>
    b26a:	59 c0       	rjmp	.+178    	; 0xb31e <vfprintf+0x536>
    b26c:	23 c0       	rjmp	.+70     	; 0xb2b4 <vfprintf+0x4cc>
    b26e:	f6 01       	movw	r30, r12
    b270:	80 81       	ld	r24, Z
    b272:	89 83       	std	Y+1, r24	; 0x01
    b274:	5e 01       	movw	r10, r28
    b276:	08 94       	sec
    b278:	a1 1c       	adc	r10, r1
    b27a:	b1 1c       	adc	r11, r1
    b27c:	22 e0       	ldi	r18, 0x02	; 2
    b27e:	30 e0       	ldi	r19, 0x00	; 0
    b280:	c2 0e       	add	r12, r18
    b282:	d3 1e       	adc	r13, r19
    b284:	21 e0       	ldi	r18, 0x01	; 1
    b286:	e2 2e       	mov	r14, r18
    b288:	f1 2c       	mov	r15, r1
    b28a:	12 c0       	rjmp	.+36     	; 0xb2b0 <vfprintf+0x4c8>
    b28c:	f6 01       	movw	r30, r12
    b28e:	a0 80       	ld	r10, Z
    b290:	b1 80       	ldd	r11, Z+1	; 0x01
    b292:	16 fd       	sbrc	r17, 6
    b294:	03 c0       	rjmp	.+6      	; 0xb29c <vfprintf+0x4b4>
    b296:	6f ef       	ldi	r22, 0xFF	; 255
    b298:	7f ef       	ldi	r23, 0xFF	; 255
    b29a:	02 c0       	rjmp	.+4      	; 0xb2a0 <vfprintf+0x4b8>
    b29c:	69 2d       	mov	r22, r9
    b29e:	70 e0       	ldi	r23, 0x00	; 0
    b2a0:	22 e0       	ldi	r18, 0x02	; 2
    b2a2:	30 e0       	ldi	r19, 0x00	; 0
    b2a4:	c2 0e       	add	r12, r18
    b2a6:	d3 1e       	adc	r13, r19
    b2a8:	c5 01       	movw	r24, r10
    b2aa:	0e 94 e8 61 	call	0xc3d0	; 0xc3d0 <strnlen>
    b2ae:	7c 01       	movw	r14, r24
    b2b0:	1f 77       	andi	r17, 0x7F	; 127
    b2b2:	13 c0       	rjmp	.+38     	; 0xb2da <vfprintf+0x4f2>
    b2b4:	f6 01       	movw	r30, r12
    b2b6:	a0 80       	ld	r10, Z
    b2b8:	b1 80       	ldd	r11, Z+1	; 0x01
    b2ba:	16 fd       	sbrc	r17, 6
    b2bc:	03 c0       	rjmp	.+6      	; 0xb2c4 <vfprintf+0x4dc>
    b2be:	6f ef       	ldi	r22, 0xFF	; 255
    b2c0:	7f ef       	ldi	r23, 0xFF	; 255
    b2c2:	02 c0       	rjmp	.+4      	; 0xb2c8 <vfprintf+0x4e0>
    b2c4:	69 2d       	mov	r22, r9
    b2c6:	70 e0       	ldi	r23, 0x00	; 0
    b2c8:	22 e0       	ldi	r18, 0x02	; 2
    b2ca:	30 e0       	ldi	r19, 0x00	; 0
    b2cc:	c2 0e       	add	r12, r18
    b2ce:	d3 1e       	adc	r13, r19
    b2d0:	c5 01       	movw	r24, r10
    b2d2:	0e 94 cd 61 	call	0xc39a	; 0xc39a <strnlen_P>
    b2d6:	7c 01       	movw	r14, r24
    b2d8:	10 68       	ori	r17, 0x80	; 128
    b2da:	13 ff       	sbrs	r17, 3
    b2dc:	07 c0       	rjmp	.+14     	; 0xb2ec <vfprintf+0x504>
    b2de:	1b c0       	rjmp	.+54     	; 0xb316 <vfprintf+0x52e>
    b2e0:	80 e2       	ldi	r24, 0x20	; 32
    b2e2:	90 e0       	ldi	r25, 0x00	; 0
    b2e4:	b3 01       	movw	r22, r6
    b2e6:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b2ea:	8a 94       	dec	r8
    b2ec:	88 2d       	mov	r24, r8
    b2ee:	90 e0       	ldi	r25, 0x00	; 0
    b2f0:	e8 16       	cp	r14, r24
    b2f2:	f9 06       	cpc	r15, r25
    b2f4:	a8 f3       	brcs	.-22     	; 0xb2e0 <vfprintf+0x4f8>
    b2f6:	0f c0       	rjmp	.+30     	; 0xb316 <vfprintf+0x52e>
    b2f8:	f5 01       	movw	r30, r10
    b2fa:	17 fd       	sbrc	r17, 7
    b2fc:	85 91       	lpm	r24, Z+
    b2fe:	17 ff       	sbrs	r17, 7
    b300:	81 91       	ld	r24, Z+
    b302:	5f 01       	movw	r10, r30
    b304:	90 e0       	ldi	r25, 0x00	; 0
    b306:	b3 01       	movw	r22, r6
    b308:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b30c:	81 10       	cpse	r8, r1
    b30e:	8a 94       	dec	r8
    b310:	08 94       	sec
    b312:	e1 08       	sbc	r14, r1
    b314:	f1 08       	sbc	r15, r1
    b316:	e1 14       	cp	r14, r1
    b318:	f1 04       	cpc	r15, r1
    b31a:	71 f7       	brne	.-36     	; 0xb2f8 <vfprintf+0x510>
    b31c:	f2 c0       	rjmp	.+484    	; 0xb502 <vfprintf+0x71a>
    b31e:	94 36       	cpi	r25, 0x64	; 100
    b320:	11 f0       	breq	.+4      	; 0xb326 <vfprintf+0x53e>
    b322:	99 36       	cpi	r25, 0x69	; 105
    b324:	89 f5       	brne	.+98     	; 0xb388 <vfprintf+0x5a0>
    b326:	17 ff       	sbrs	r17, 7
    b328:	08 c0       	rjmp	.+16     	; 0xb33a <vfprintf+0x552>
    b32a:	f6 01       	movw	r30, r12
    b32c:	20 81       	ld	r18, Z
    b32e:	31 81       	ldd	r19, Z+1	; 0x01
    b330:	42 81       	ldd	r20, Z+2	; 0x02
    b332:	53 81       	ldd	r21, Z+3	; 0x03
    b334:	84 e0       	ldi	r24, 0x04	; 4
    b336:	90 e0       	ldi	r25, 0x00	; 0
    b338:	0a c0       	rjmp	.+20     	; 0xb34e <vfprintf+0x566>
    b33a:	f6 01       	movw	r30, r12
    b33c:	80 81       	ld	r24, Z
    b33e:	91 81       	ldd	r25, Z+1	; 0x01
    b340:	9c 01       	movw	r18, r24
    b342:	44 27       	eor	r20, r20
    b344:	37 fd       	sbrc	r19, 7
    b346:	40 95       	com	r20
    b348:	54 2f       	mov	r21, r20
    b34a:	82 e0       	ldi	r24, 0x02	; 2
    b34c:	90 e0       	ldi	r25, 0x00	; 0
    b34e:	c8 0e       	add	r12, r24
    b350:	d9 1e       	adc	r13, r25
    b352:	9f e6       	ldi	r25, 0x6F	; 111
    b354:	f9 2e       	mov	r15, r25
    b356:	f1 22       	and	r15, r17
    b358:	57 ff       	sbrs	r21, 7
    b35a:	09 c0       	rjmp	.+18     	; 0xb36e <vfprintf+0x586>
    b35c:	50 95       	com	r21
    b35e:	40 95       	com	r20
    b360:	30 95       	com	r19
    b362:	21 95       	neg	r18
    b364:	3f 4f       	sbci	r19, 0xFF	; 255
    b366:	4f 4f       	sbci	r20, 0xFF	; 255
    b368:	5f 4f       	sbci	r21, 0xFF	; 255
    b36a:	90 e8       	ldi	r25, 0x80	; 128
    b36c:	f9 2a       	or	r15, r25
    b36e:	ca 01       	movw	r24, r20
    b370:	b9 01       	movw	r22, r18
    b372:	ae 01       	movw	r20, r28
    b374:	4f 5f       	subi	r20, 0xFF	; 255
    b376:	5f 4f       	sbci	r21, 0xFF	; 255
    b378:	2a e0       	ldi	r18, 0x0A	; 10
    b37a:	30 e0       	ldi	r19, 0x00	; 0
    b37c:	0e 94 82 62 	call	0xc504	; 0xc504 <__ultoa_invert>
    b380:	e8 2e       	mov	r14, r24
    b382:	e8 89       	ldd	r30, Y+16	; 0x10
    b384:	ee 1a       	sub	r14, r30
    b386:	41 c0       	rjmp	.+130    	; 0xb40a <vfprintf+0x622>
    b388:	95 37       	cpi	r25, 0x75	; 117
    b38a:	21 f4       	brne	.+8      	; 0xb394 <vfprintf+0x5ac>
    b38c:	1f 7e       	andi	r17, 0xEF	; 239
    b38e:	2a e0       	ldi	r18, 0x0A	; 10
    b390:	30 e0       	ldi	r19, 0x00	; 0
    b392:	1c c0       	rjmp	.+56     	; 0xb3cc <vfprintf+0x5e4>
    b394:	19 7f       	andi	r17, 0xF9	; 249
    b396:	9f 36       	cpi	r25, 0x6F	; 111
    b398:	61 f0       	breq	.+24     	; 0xb3b2 <vfprintf+0x5ca>
    b39a:	90 37       	cpi	r25, 0x70	; 112
    b39c:	20 f4       	brcc	.+8      	; 0xb3a6 <vfprintf+0x5be>
    b39e:	98 35       	cpi	r25, 0x58	; 88
    b3a0:	09 f0       	breq	.+2      	; 0xb3a4 <vfprintf+0x5bc>
    b3a2:	b2 c0       	rjmp	.+356    	; 0xb508 <vfprintf+0x720>
    b3a4:	0f c0       	rjmp	.+30     	; 0xb3c4 <vfprintf+0x5dc>
    b3a6:	90 37       	cpi	r25, 0x70	; 112
    b3a8:	39 f0       	breq	.+14     	; 0xb3b8 <vfprintf+0x5d0>
    b3aa:	98 37       	cpi	r25, 0x78	; 120
    b3ac:	09 f0       	breq	.+2      	; 0xb3b0 <vfprintf+0x5c8>
    b3ae:	ac c0       	rjmp	.+344    	; 0xb508 <vfprintf+0x720>
    b3b0:	04 c0       	rjmp	.+8      	; 0xb3ba <vfprintf+0x5d2>
    b3b2:	28 e0       	ldi	r18, 0x08	; 8
    b3b4:	30 e0       	ldi	r19, 0x00	; 0
    b3b6:	0a c0       	rjmp	.+20     	; 0xb3cc <vfprintf+0x5e4>
    b3b8:	10 61       	ori	r17, 0x10	; 16
    b3ba:	14 fd       	sbrc	r17, 4
    b3bc:	14 60       	ori	r17, 0x04	; 4
    b3be:	20 e1       	ldi	r18, 0x10	; 16
    b3c0:	30 e0       	ldi	r19, 0x00	; 0
    b3c2:	04 c0       	rjmp	.+8      	; 0xb3cc <vfprintf+0x5e4>
    b3c4:	14 fd       	sbrc	r17, 4
    b3c6:	16 60       	ori	r17, 0x06	; 6
    b3c8:	20 e1       	ldi	r18, 0x10	; 16
    b3ca:	32 e0       	ldi	r19, 0x02	; 2
    b3cc:	17 ff       	sbrs	r17, 7
    b3ce:	08 c0       	rjmp	.+16     	; 0xb3e0 <vfprintf+0x5f8>
    b3d0:	f6 01       	movw	r30, r12
    b3d2:	60 81       	ld	r22, Z
    b3d4:	71 81       	ldd	r23, Z+1	; 0x01
    b3d6:	82 81       	ldd	r24, Z+2	; 0x02
    b3d8:	93 81       	ldd	r25, Z+3	; 0x03
    b3da:	44 e0       	ldi	r20, 0x04	; 4
    b3dc:	50 e0       	ldi	r21, 0x00	; 0
    b3de:	08 c0       	rjmp	.+16     	; 0xb3f0 <vfprintf+0x608>
    b3e0:	f6 01       	movw	r30, r12
    b3e2:	80 81       	ld	r24, Z
    b3e4:	91 81       	ldd	r25, Z+1	; 0x01
    b3e6:	bc 01       	movw	r22, r24
    b3e8:	80 e0       	ldi	r24, 0x00	; 0
    b3ea:	90 e0       	ldi	r25, 0x00	; 0
    b3ec:	42 e0       	ldi	r20, 0x02	; 2
    b3ee:	50 e0       	ldi	r21, 0x00	; 0
    b3f0:	c4 0e       	add	r12, r20
    b3f2:	d5 1e       	adc	r13, r21
    b3f4:	ae 01       	movw	r20, r28
    b3f6:	4f 5f       	subi	r20, 0xFF	; 255
    b3f8:	5f 4f       	sbci	r21, 0xFF	; 255
    b3fa:	0e 94 82 62 	call	0xc504	; 0xc504 <__ultoa_invert>
    b3fe:	e8 2e       	mov	r14, r24
    b400:	58 89       	ldd	r21, Y+16	; 0x10
    b402:	e5 1a       	sub	r14, r21
    b404:	8f e7       	ldi	r24, 0x7F	; 127
    b406:	f8 2e       	mov	r15, r24
    b408:	f1 22       	and	r15, r17
    b40a:	f6 fe       	sbrs	r15, 6
    b40c:	0b c0       	rjmp	.+22     	; 0xb424 <vfprintf+0x63c>
    b40e:	8e ef       	ldi	r24, 0xFE	; 254
    b410:	f8 22       	and	r15, r24
    b412:	e9 14       	cp	r14, r9
    b414:	38 f4       	brcc	.+14     	; 0xb424 <vfprintf+0x63c>
    b416:	f4 fe       	sbrs	r15, 4
    b418:	07 c0       	rjmp	.+14     	; 0xb428 <vfprintf+0x640>
    b41a:	f2 fc       	sbrc	r15, 2
    b41c:	05 c0       	rjmp	.+10     	; 0xb428 <vfprintf+0x640>
    b41e:	9f ee       	ldi	r25, 0xEF	; 239
    b420:	f9 22       	and	r15, r25
    b422:	02 c0       	rjmp	.+4      	; 0xb428 <vfprintf+0x640>
    b424:	1e 2d       	mov	r17, r14
    b426:	01 c0       	rjmp	.+2      	; 0xb42a <vfprintf+0x642>
    b428:	19 2d       	mov	r17, r9
    b42a:	f4 fe       	sbrs	r15, 4
    b42c:	0d c0       	rjmp	.+26     	; 0xb448 <vfprintf+0x660>
    b42e:	fe 01       	movw	r30, r28
    b430:	ee 0d       	add	r30, r14
    b432:	f1 1d       	adc	r31, r1
    b434:	80 81       	ld	r24, Z
    b436:	80 33       	cpi	r24, 0x30	; 48
    b438:	19 f4       	brne	.+6      	; 0xb440 <vfprintf+0x658>
    b43a:	e9 ee       	ldi	r30, 0xE9	; 233
    b43c:	fe 22       	and	r15, r30
    b43e:	08 c0       	rjmp	.+16     	; 0xb450 <vfprintf+0x668>
    b440:	1f 5f       	subi	r17, 0xFF	; 255
    b442:	f2 fe       	sbrs	r15, 2
    b444:	05 c0       	rjmp	.+10     	; 0xb450 <vfprintf+0x668>
    b446:	03 c0       	rjmp	.+6      	; 0xb44e <vfprintf+0x666>
    b448:	8f 2d       	mov	r24, r15
    b44a:	86 78       	andi	r24, 0x86	; 134
    b44c:	09 f0       	breq	.+2      	; 0xb450 <vfprintf+0x668>
    b44e:	1f 5f       	subi	r17, 0xFF	; 255
    b450:	0f 2d       	mov	r16, r15
    b452:	f3 fc       	sbrc	r15, 3
    b454:	14 c0       	rjmp	.+40     	; 0xb47e <vfprintf+0x696>
    b456:	f0 fe       	sbrs	r15, 0
    b458:	0f c0       	rjmp	.+30     	; 0xb478 <vfprintf+0x690>
    b45a:	18 15       	cp	r17, r8
    b45c:	10 f0       	brcs	.+4      	; 0xb462 <vfprintf+0x67a>
    b45e:	9e 2c       	mov	r9, r14
    b460:	0b c0       	rjmp	.+22     	; 0xb478 <vfprintf+0x690>
    b462:	9e 2c       	mov	r9, r14
    b464:	98 0c       	add	r9, r8
    b466:	91 1a       	sub	r9, r17
    b468:	18 2d       	mov	r17, r8
    b46a:	06 c0       	rjmp	.+12     	; 0xb478 <vfprintf+0x690>
    b46c:	80 e2       	ldi	r24, 0x20	; 32
    b46e:	90 e0       	ldi	r25, 0x00	; 0
    b470:	b3 01       	movw	r22, r6
    b472:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b476:	1f 5f       	subi	r17, 0xFF	; 255
    b478:	18 15       	cp	r17, r8
    b47a:	c0 f3       	brcs	.-16     	; 0xb46c <vfprintf+0x684>
    b47c:	04 c0       	rjmp	.+8      	; 0xb486 <vfprintf+0x69e>
    b47e:	18 15       	cp	r17, r8
    b480:	10 f4       	brcc	.+4      	; 0xb486 <vfprintf+0x69e>
    b482:	81 1a       	sub	r8, r17
    b484:	01 c0       	rjmp	.+2      	; 0xb488 <vfprintf+0x6a0>
    b486:	88 24       	eor	r8, r8
    b488:	04 ff       	sbrs	r16, 4
    b48a:	0f c0       	rjmp	.+30     	; 0xb4aa <vfprintf+0x6c2>
    b48c:	80 e3       	ldi	r24, 0x30	; 48
    b48e:	90 e0       	ldi	r25, 0x00	; 0
    b490:	b3 01       	movw	r22, r6
    b492:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b496:	02 ff       	sbrs	r16, 2
    b498:	1d c0       	rjmp	.+58     	; 0xb4d4 <vfprintf+0x6ec>
    b49a:	01 fd       	sbrc	r16, 1
    b49c:	03 c0       	rjmp	.+6      	; 0xb4a4 <vfprintf+0x6bc>
    b49e:	88 e7       	ldi	r24, 0x78	; 120
    b4a0:	90 e0       	ldi	r25, 0x00	; 0
    b4a2:	0e c0       	rjmp	.+28     	; 0xb4c0 <vfprintf+0x6d8>
    b4a4:	88 e5       	ldi	r24, 0x58	; 88
    b4a6:	90 e0       	ldi	r25, 0x00	; 0
    b4a8:	0b c0       	rjmp	.+22     	; 0xb4c0 <vfprintf+0x6d8>
    b4aa:	80 2f       	mov	r24, r16
    b4ac:	86 78       	andi	r24, 0x86	; 134
    b4ae:	91 f0       	breq	.+36     	; 0xb4d4 <vfprintf+0x6ec>
    b4b0:	01 ff       	sbrs	r16, 1
    b4b2:	02 c0       	rjmp	.+4      	; 0xb4b8 <vfprintf+0x6d0>
    b4b4:	8b e2       	ldi	r24, 0x2B	; 43
    b4b6:	01 c0       	rjmp	.+2      	; 0xb4ba <vfprintf+0x6d2>
    b4b8:	80 e2       	ldi	r24, 0x20	; 32
    b4ba:	f7 fc       	sbrc	r15, 7
    b4bc:	8d e2       	ldi	r24, 0x2D	; 45
    b4be:	90 e0       	ldi	r25, 0x00	; 0
    b4c0:	b3 01       	movw	r22, r6
    b4c2:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b4c6:	06 c0       	rjmp	.+12     	; 0xb4d4 <vfprintf+0x6ec>
    b4c8:	80 e3       	ldi	r24, 0x30	; 48
    b4ca:	90 e0       	ldi	r25, 0x00	; 0
    b4cc:	b3 01       	movw	r22, r6
    b4ce:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b4d2:	9a 94       	dec	r9
    b4d4:	e9 14       	cp	r14, r9
    b4d6:	c0 f3       	brcs	.-16     	; 0xb4c8 <vfprintf+0x6e0>
    b4d8:	ea 94       	dec	r14
    b4da:	e1 e0       	ldi	r30, 0x01	; 1
    b4dc:	f0 e0       	ldi	r31, 0x00	; 0
    b4de:	ec 0f       	add	r30, r28
    b4e0:	fd 1f       	adc	r31, r29
    b4e2:	ee 0d       	add	r30, r14
    b4e4:	f1 1d       	adc	r31, r1
    b4e6:	80 81       	ld	r24, Z
    b4e8:	90 e0       	ldi	r25, 0x00	; 0
    b4ea:	b3 01       	movw	r22, r6
    b4ec:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b4f0:	ee 20       	and	r14, r14
    b4f2:	91 f7       	brne	.-28     	; 0xb4d8 <vfprintf+0x6f0>
    b4f4:	06 c0       	rjmp	.+12     	; 0xb502 <vfprintf+0x71a>
    b4f6:	80 e2       	ldi	r24, 0x20	; 32
    b4f8:	90 e0       	ldi	r25, 0x00	; 0
    b4fa:	b3 01       	movw	r22, r6
    b4fc:	0e 94 33 62 	call	0xc466	; 0xc466 <fputc>
    b500:	8a 94       	dec	r8
    b502:	88 20       	and	r8, r8
    b504:	c1 f7       	brne	.-16     	; 0xb4f6 <vfprintf+0x70e>
    b506:	99 cc       	rjmp	.-1742   	; 0xae3a <vfprintf+0x52>
    b508:	f3 01       	movw	r30, r6
    b50a:	66 81       	ldd	r22, Z+6	; 0x06
    b50c:	77 81       	ldd	r23, Z+7	; 0x07
    b50e:	cb 01       	movw	r24, r22
    b510:	61 96       	adiw	r28, 0x11	; 17
    b512:	cd bf       	out	0x3d, r28	; 61
    b514:	de bf       	out	0x3e, r29	; 62
    b516:	cf 91       	pop	r28
    b518:	df 91       	pop	r29
    b51a:	1f 91       	pop	r17
    b51c:	0f 91       	pop	r16
    b51e:	ff 90       	pop	r15
    b520:	ef 90       	pop	r14
    b522:	df 90       	pop	r13
    b524:	cf 90       	pop	r12
    b526:	bf 90       	pop	r11
    b528:	af 90       	pop	r10
    b52a:	9f 90       	pop	r9
    b52c:	8f 90       	pop	r8
    b52e:	7f 90       	pop	r7
    b530:	6f 90       	pop	r6
    b532:	5f 90       	pop	r5
    b534:	4f 90       	pop	r4
    b536:	3f 90       	pop	r3
    b538:	2f 90       	pop	r2
    b53a:	08 95       	ret

0000b53c <__subsf3>:
    b53c:	50 58       	subi	r21, 0x80	; 128

0000b53e <__addsf3>:
    b53e:	bb 27       	eor	r27, r27
    b540:	aa 27       	eor	r26, r26
    b542:	0e d0       	rcall	.+28     	; 0xb560 <__addsf3x>
    b544:	29 c2       	rjmp	.+1106   	; 0xb998 <__fp_round>
    b546:	f2 d1       	rcall	.+996    	; 0xb92c <__fp_pscA>
    b548:	30 f0       	brcs	.+12     	; 0xb556 <__addsf3+0x18>
    b54a:	f7 d1       	rcall	.+1006   	; 0xb93a <__fp_pscB>
    b54c:	20 f0       	brcs	.+8      	; 0xb556 <__addsf3+0x18>
    b54e:	31 f4       	brne	.+12     	; 0xb55c <__addsf3+0x1e>
    b550:	9f 3f       	cpi	r25, 0xFF	; 255
    b552:	11 f4       	brne	.+4      	; 0xb558 <__addsf3+0x1a>
    b554:	1e f4       	brtc	.+6      	; 0xb55c <__addsf3+0x1e>
    b556:	c2 c1       	rjmp	.+900    	; 0xb8dc <__fp_nan>
    b558:	0e f4       	brtc	.+2      	; 0xb55c <__addsf3+0x1e>
    b55a:	e0 95       	com	r30
    b55c:	e7 fb       	bst	r30, 7
    b55e:	8f c1       	rjmp	.+798    	; 0xb87e <__fp_inf>

0000b560 <__addsf3x>:
    b560:	e9 2f       	mov	r30, r25
    b562:	3c d2       	rcall	.+1144   	; 0xb9dc <__fp_split3>
    b564:	80 f3       	brcs	.-32     	; 0xb546 <__addsf3+0x8>
    b566:	ba 17       	cp	r27, r26
    b568:	62 07       	cpc	r22, r18
    b56a:	73 07       	cpc	r23, r19
    b56c:	84 07       	cpc	r24, r20
    b56e:	95 07       	cpc	r25, r21
    b570:	18 f0       	brcs	.+6      	; 0xb578 <__addsf3x+0x18>
    b572:	71 f4       	brne	.+28     	; 0xb590 <__addsf3x+0x30>
    b574:	9e f5       	brtc	.+102    	; 0xb5dc <__addsf3x+0x7c>
    b576:	6b c2       	rjmp	.+1238   	; 0xba4e <__fp_zero>
    b578:	0e f4       	brtc	.+2      	; 0xb57c <__addsf3x+0x1c>
    b57a:	e0 95       	com	r30
    b57c:	0b 2e       	mov	r0, r27
    b57e:	ba 2f       	mov	r27, r26
    b580:	a0 2d       	mov	r26, r0
    b582:	0b 01       	movw	r0, r22
    b584:	b9 01       	movw	r22, r18
    b586:	90 01       	movw	r18, r0
    b588:	0c 01       	movw	r0, r24
    b58a:	ca 01       	movw	r24, r20
    b58c:	a0 01       	movw	r20, r0
    b58e:	11 24       	eor	r1, r1
    b590:	ff 27       	eor	r31, r31
    b592:	59 1b       	sub	r21, r25
    b594:	99 f0       	breq	.+38     	; 0xb5bc <__addsf3x+0x5c>
    b596:	59 3f       	cpi	r21, 0xF9	; 249
    b598:	50 f4       	brcc	.+20     	; 0xb5ae <__addsf3x+0x4e>
    b59a:	50 3e       	cpi	r21, 0xE0	; 224
    b59c:	68 f1       	brcs	.+90     	; 0xb5f8 <__addsf3x+0x98>
    b59e:	1a 16       	cp	r1, r26
    b5a0:	f0 40       	sbci	r31, 0x00	; 0
    b5a2:	a2 2f       	mov	r26, r18
    b5a4:	23 2f       	mov	r18, r19
    b5a6:	34 2f       	mov	r19, r20
    b5a8:	44 27       	eor	r20, r20
    b5aa:	58 5f       	subi	r21, 0xF8	; 248
    b5ac:	f3 cf       	rjmp	.-26     	; 0xb594 <__addsf3x+0x34>
    b5ae:	46 95       	lsr	r20
    b5b0:	37 95       	ror	r19
    b5b2:	27 95       	ror	r18
    b5b4:	a7 95       	ror	r26
    b5b6:	f0 40       	sbci	r31, 0x00	; 0
    b5b8:	53 95       	inc	r21
    b5ba:	c9 f7       	brne	.-14     	; 0xb5ae <__addsf3x+0x4e>
    b5bc:	7e f4       	brtc	.+30     	; 0xb5dc <__addsf3x+0x7c>
    b5be:	1f 16       	cp	r1, r31
    b5c0:	ba 0b       	sbc	r27, r26
    b5c2:	62 0b       	sbc	r22, r18
    b5c4:	73 0b       	sbc	r23, r19
    b5c6:	84 0b       	sbc	r24, r20
    b5c8:	ba f0       	brmi	.+46     	; 0xb5f8 <__addsf3x+0x98>
    b5ca:	91 50       	subi	r25, 0x01	; 1
    b5cc:	a1 f0       	breq	.+40     	; 0xb5f6 <__addsf3x+0x96>
    b5ce:	ff 0f       	add	r31, r31
    b5d0:	bb 1f       	adc	r27, r27
    b5d2:	66 1f       	adc	r22, r22
    b5d4:	77 1f       	adc	r23, r23
    b5d6:	88 1f       	adc	r24, r24
    b5d8:	c2 f7       	brpl	.-16     	; 0xb5ca <__addsf3x+0x6a>
    b5da:	0e c0       	rjmp	.+28     	; 0xb5f8 <__addsf3x+0x98>
    b5dc:	ba 0f       	add	r27, r26
    b5de:	62 1f       	adc	r22, r18
    b5e0:	73 1f       	adc	r23, r19
    b5e2:	84 1f       	adc	r24, r20
    b5e4:	48 f4       	brcc	.+18     	; 0xb5f8 <__addsf3x+0x98>
    b5e6:	87 95       	ror	r24
    b5e8:	77 95       	ror	r23
    b5ea:	67 95       	ror	r22
    b5ec:	b7 95       	ror	r27
    b5ee:	f7 95       	ror	r31
    b5f0:	9e 3f       	cpi	r25, 0xFE	; 254
    b5f2:	08 f0       	brcs	.+2      	; 0xb5f6 <__addsf3x+0x96>
    b5f4:	b3 cf       	rjmp	.-154    	; 0xb55c <__addsf3+0x1e>
    b5f6:	93 95       	inc	r25
    b5f8:	88 0f       	add	r24, r24
    b5fa:	08 f0       	brcs	.+2      	; 0xb5fe <__addsf3x+0x9e>
    b5fc:	99 27       	eor	r25, r25
    b5fe:	ee 0f       	add	r30, r30
    b600:	97 95       	ror	r25
    b602:	87 95       	ror	r24
    b604:	08 95       	ret

0000b606 <atan>:
    b606:	df 93       	push	r29
    b608:	dd 27       	eor	r29, r29
    b60a:	b9 2f       	mov	r27, r25
    b60c:	bf 77       	andi	r27, 0x7F	; 127
    b60e:	40 e8       	ldi	r20, 0x80	; 128
    b610:	5f e3       	ldi	r21, 0x3F	; 63
    b612:	16 16       	cp	r1, r22
    b614:	17 06       	cpc	r1, r23
    b616:	48 07       	cpc	r20, r24
    b618:	5b 07       	cpc	r21, r27
    b61a:	10 f4       	brcc	.+4      	; 0xb620 <atan+0x1a>
    b61c:	d9 2f       	mov	r29, r25
    b61e:	83 d2       	rcall	.+1286   	; 0xbb26 <inverse>
    b620:	9f 93       	push	r25
    b622:	8f 93       	push	r24
    b624:	7f 93       	push	r23
    b626:	6f 93       	push	r22
    b628:	96 d3       	rcall	.+1836   	; 0xbd56 <square>
    b62a:	e8 ee       	ldi	r30, 0xE8	; 232
    b62c:	f1 e0       	ldi	r31, 0x01	; 1
    b62e:	59 d1       	rcall	.+690    	; 0xb8e2 <__fp_powser>
    b630:	b3 d1       	rcall	.+870    	; 0xb998 <__fp_round>
    b632:	2f 91       	pop	r18
    b634:	3f 91       	pop	r19
    b636:	4f 91       	pop	r20
    b638:	5f 91       	pop	r21
    b63a:	ee d2       	rcall	.+1500   	; 0xbc18 <__mulsf3x>
    b63c:	dd 23       	and	r29, r29
    b63e:	49 f0       	breq	.+18     	; 0xb652 <atan+0x4c>
    b640:	90 58       	subi	r25, 0x80	; 128
    b642:	a2 ea       	ldi	r26, 0xA2	; 162
    b644:	2a ed       	ldi	r18, 0xDA	; 218
    b646:	3f e0       	ldi	r19, 0x0F	; 15
    b648:	49 ec       	ldi	r20, 0xC9	; 201
    b64a:	5f e3       	ldi	r21, 0x3F	; 63
    b64c:	d0 78       	andi	r29, 0x80	; 128
    b64e:	5d 27       	eor	r21, r29
    b650:	87 df       	rcall	.-242    	; 0xb560 <__addsf3x>
    b652:	df 91       	pop	r29
    b654:	a1 c1       	rjmp	.+834    	; 0xb998 <__fp_round>

0000b656 <ceil>:
    b656:	e4 d1       	rcall	.+968    	; 0xba20 <__fp_trunc>
    b658:	80 f0       	brcs	.+32     	; 0xb67a <ceil+0x24>
    b65a:	9f 37       	cpi	r25, 0x7F	; 127
    b65c:	40 f4       	brcc	.+16     	; 0xb66e <ceil+0x18>
    b65e:	91 11       	cpse	r25, r1
    b660:	0e f4       	brtc	.+2      	; 0xb664 <ceil+0xe>
    b662:	f6 c1       	rjmp	.+1004   	; 0xba50 <__fp_szero>
    b664:	60 e0       	ldi	r22, 0x00	; 0
    b666:	70 e0       	ldi	r23, 0x00	; 0
    b668:	80 e8       	ldi	r24, 0x80	; 128
    b66a:	9f e3       	ldi	r25, 0x3F	; 63
    b66c:	08 95       	ret
    b66e:	26 f0       	brts	.+8      	; 0xb678 <ceil+0x22>
    b670:	1b 16       	cp	r1, r27
    b672:	61 1d       	adc	r22, r1
    b674:	71 1d       	adc	r23, r1
    b676:	81 1d       	adc	r24, r1
    b678:	08 c1       	rjmp	.+528    	; 0xb88a <__fp_mintl>
    b67a:	22 c1       	rjmp	.+580    	; 0xb8c0 <__fp_mpack>

0000b67c <__cmpsf2>:
    b67c:	dc d0       	rcall	.+440    	; 0xb836 <__fp_cmp>
    b67e:	08 f4       	brcc	.+2      	; 0xb682 <__cmpsf2+0x6>
    b680:	81 e0       	ldi	r24, 0x01	; 1
    b682:	08 95       	ret

0000b684 <cos>:
    b684:	62 d1       	rcall	.+708    	; 0xb94a <__fp_rempio2>
    b686:	e3 95       	inc	r30
    b688:	98 c1       	rjmp	.+816    	; 0xb9ba <__fp_sinus>

0000b68a <__divsf3>:
    b68a:	0c d0       	rcall	.+24     	; 0xb6a4 <__divsf3x>
    b68c:	85 c1       	rjmp	.+778    	; 0xb998 <__fp_round>
    b68e:	55 d1       	rcall	.+682    	; 0xb93a <__fp_pscB>
    b690:	40 f0       	brcs	.+16     	; 0xb6a2 <__divsf3+0x18>
    b692:	4c d1       	rcall	.+664    	; 0xb92c <__fp_pscA>
    b694:	30 f0       	brcs	.+12     	; 0xb6a2 <__divsf3+0x18>
    b696:	21 f4       	brne	.+8      	; 0xb6a0 <__divsf3+0x16>
    b698:	5f 3f       	cpi	r21, 0xFF	; 255
    b69a:	19 f0       	breq	.+6      	; 0xb6a2 <__divsf3+0x18>
    b69c:	f0 c0       	rjmp	.+480    	; 0xb87e <__fp_inf>
    b69e:	51 11       	cpse	r21, r1
    b6a0:	d7 c1       	rjmp	.+942    	; 0xba50 <__fp_szero>
    b6a2:	1c c1       	rjmp	.+568    	; 0xb8dc <__fp_nan>

0000b6a4 <__divsf3x>:
    b6a4:	9b d1       	rcall	.+822    	; 0xb9dc <__fp_split3>
    b6a6:	98 f3       	brcs	.-26     	; 0xb68e <__divsf3+0x4>

0000b6a8 <__divsf3_pse>:
    b6a8:	99 23       	and	r25, r25
    b6aa:	c9 f3       	breq	.-14     	; 0xb69e <__divsf3+0x14>
    b6ac:	55 23       	and	r21, r21
    b6ae:	b1 f3       	breq	.-20     	; 0xb69c <__divsf3+0x12>
    b6b0:	95 1b       	sub	r25, r21
    b6b2:	55 0b       	sbc	r21, r21
    b6b4:	bb 27       	eor	r27, r27
    b6b6:	aa 27       	eor	r26, r26
    b6b8:	62 17       	cp	r22, r18
    b6ba:	73 07       	cpc	r23, r19
    b6bc:	84 07       	cpc	r24, r20
    b6be:	38 f0       	brcs	.+14     	; 0xb6ce <__divsf3_pse+0x26>
    b6c0:	9f 5f       	subi	r25, 0xFF	; 255
    b6c2:	5f 4f       	sbci	r21, 0xFF	; 255
    b6c4:	22 0f       	add	r18, r18
    b6c6:	33 1f       	adc	r19, r19
    b6c8:	44 1f       	adc	r20, r20
    b6ca:	aa 1f       	adc	r26, r26
    b6cc:	a9 f3       	breq	.-22     	; 0xb6b8 <__divsf3_pse+0x10>
    b6ce:	33 d0       	rcall	.+102    	; 0xb736 <__divsf3_pse+0x8e>
    b6d0:	0e 2e       	mov	r0, r30
    b6d2:	3a f0       	brmi	.+14     	; 0xb6e2 <__divsf3_pse+0x3a>
    b6d4:	e0 e8       	ldi	r30, 0x80	; 128
    b6d6:	30 d0       	rcall	.+96     	; 0xb738 <__divsf3_pse+0x90>
    b6d8:	91 50       	subi	r25, 0x01	; 1
    b6da:	50 40       	sbci	r21, 0x00	; 0
    b6dc:	e6 95       	lsr	r30
    b6de:	00 1c       	adc	r0, r0
    b6e0:	ca f7       	brpl	.-14     	; 0xb6d4 <__divsf3_pse+0x2c>
    b6e2:	29 d0       	rcall	.+82     	; 0xb736 <__divsf3_pse+0x8e>
    b6e4:	fe 2f       	mov	r31, r30
    b6e6:	27 d0       	rcall	.+78     	; 0xb736 <__divsf3_pse+0x8e>
    b6e8:	66 0f       	add	r22, r22
    b6ea:	77 1f       	adc	r23, r23
    b6ec:	88 1f       	adc	r24, r24
    b6ee:	bb 1f       	adc	r27, r27
    b6f0:	26 17       	cp	r18, r22
    b6f2:	37 07       	cpc	r19, r23
    b6f4:	48 07       	cpc	r20, r24
    b6f6:	ab 07       	cpc	r26, r27
    b6f8:	b0 e8       	ldi	r27, 0x80	; 128
    b6fa:	09 f0       	breq	.+2      	; 0xb6fe <__divsf3_pse+0x56>
    b6fc:	bb 0b       	sbc	r27, r27
    b6fe:	80 2d       	mov	r24, r0
    b700:	bf 01       	movw	r22, r30
    b702:	ff 27       	eor	r31, r31
    b704:	93 58       	subi	r25, 0x83	; 131
    b706:	5f 4f       	sbci	r21, 0xFF	; 255
    b708:	2a f0       	brmi	.+10     	; 0xb714 <__divsf3_pse+0x6c>
    b70a:	9e 3f       	cpi	r25, 0xFE	; 254
    b70c:	51 05       	cpc	r21, r1
    b70e:	68 f0       	brcs	.+26     	; 0xb72a <__divsf3_pse+0x82>
    b710:	b6 c0       	rjmp	.+364    	; 0xb87e <__fp_inf>
    b712:	9e c1       	rjmp	.+828    	; 0xba50 <__fp_szero>
    b714:	5f 3f       	cpi	r21, 0xFF	; 255
    b716:	ec f3       	brlt	.-6      	; 0xb712 <__divsf3_pse+0x6a>
    b718:	98 3e       	cpi	r25, 0xE8	; 232
    b71a:	dc f3       	brlt	.-10     	; 0xb712 <__divsf3_pse+0x6a>
    b71c:	86 95       	lsr	r24
    b71e:	77 95       	ror	r23
    b720:	67 95       	ror	r22
    b722:	b7 95       	ror	r27
    b724:	f7 95       	ror	r31
    b726:	9f 5f       	subi	r25, 0xFF	; 255
    b728:	c9 f7       	brne	.-14     	; 0xb71c <__divsf3_pse+0x74>
    b72a:	88 0f       	add	r24, r24
    b72c:	91 1d       	adc	r25, r1
    b72e:	96 95       	lsr	r25
    b730:	87 95       	ror	r24
    b732:	97 f9       	bld	r25, 7
    b734:	08 95       	ret
    b736:	e1 e0       	ldi	r30, 0x01	; 1
    b738:	66 0f       	add	r22, r22
    b73a:	77 1f       	adc	r23, r23
    b73c:	88 1f       	adc	r24, r24
    b73e:	bb 1f       	adc	r27, r27
    b740:	62 17       	cp	r22, r18
    b742:	73 07       	cpc	r23, r19
    b744:	84 07       	cpc	r24, r20
    b746:	ba 07       	cpc	r27, r26
    b748:	20 f0       	brcs	.+8      	; 0xb752 <__divsf3_pse+0xaa>
    b74a:	62 1b       	sub	r22, r18
    b74c:	73 0b       	sbc	r23, r19
    b74e:	84 0b       	sbc	r24, r20
    b750:	ba 0b       	sbc	r27, r26
    b752:	ee 1f       	adc	r30, r30
    b754:	88 f7       	brcc	.-30     	; 0xb738 <__divsf3_pse+0x90>
    b756:	e0 95       	com	r30
    b758:	08 95       	ret

0000b75a <__fixsfsi>:
    b75a:	04 d0       	rcall	.+8      	; 0xb764 <__fixunssfsi>
    b75c:	68 94       	set
    b75e:	b1 11       	cpse	r27, r1
    b760:	77 c1       	rjmp	.+750    	; 0xba50 <__fp_szero>
    b762:	08 95       	ret

0000b764 <__fixunssfsi>:
    b764:	43 d1       	rcall	.+646    	; 0xb9ec <__fp_splitA>
    b766:	88 f0       	brcs	.+34     	; 0xb78a <__fixunssfsi+0x26>
    b768:	9f 57       	subi	r25, 0x7F	; 127
    b76a:	90 f0       	brcs	.+36     	; 0xb790 <__fixunssfsi+0x2c>
    b76c:	b9 2f       	mov	r27, r25
    b76e:	99 27       	eor	r25, r25
    b770:	b7 51       	subi	r27, 0x17	; 23
    b772:	a0 f0       	brcs	.+40     	; 0xb79c <__fixunssfsi+0x38>
    b774:	d1 f0       	breq	.+52     	; 0xb7aa <__fixunssfsi+0x46>
    b776:	66 0f       	add	r22, r22
    b778:	77 1f       	adc	r23, r23
    b77a:	88 1f       	adc	r24, r24
    b77c:	99 1f       	adc	r25, r25
    b77e:	1a f0       	brmi	.+6      	; 0xb786 <__fixunssfsi+0x22>
    b780:	ba 95       	dec	r27
    b782:	c9 f7       	brne	.-14     	; 0xb776 <__fixunssfsi+0x12>
    b784:	12 c0       	rjmp	.+36     	; 0xb7aa <__fixunssfsi+0x46>
    b786:	b1 30       	cpi	r27, 0x01	; 1
    b788:	81 f0       	breq	.+32     	; 0xb7aa <__fixunssfsi+0x46>
    b78a:	61 d1       	rcall	.+706    	; 0xba4e <__fp_zero>
    b78c:	b1 e0       	ldi	r27, 0x01	; 1
    b78e:	08 95       	ret
    b790:	5e c1       	rjmp	.+700    	; 0xba4e <__fp_zero>
    b792:	67 2f       	mov	r22, r23
    b794:	78 2f       	mov	r23, r24
    b796:	88 27       	eor	r24, r24
    b798:	b8 5f       	subi	r27, 0xF8	; 248
    b79a:	39 f0       	breq	.+14     	; 0xb7aa <__fixunssfsi+0x46>
    b79c:	b9 3f       	cpi	r27, 0xF9	; 249
    b79e:	cc f3       	brlt	.-14     	; 0xb792 <__fixunssfsi+0x2e>
    b7a0:	86 95       	lsr	r24
    b7a2:	77 95       	ror	r23
    b7a4:	67 95       	ror	r22
    b7a6:	b3 95       	inc	r27
    b7a8:	d9 f7       	brne	.-10     	; 0xb7a0 <__fixunssfsi+0x3c>
    b7aa:	3e f4       	brtc	.+14     	; 0xb7ba <__fixunssfsi+0x56>
    b7ac:	90 95       	com	r25
    b7ae:	80 95       	com	r24
    b7b0:	70 95       	com	r23
    b7b2:	61 95       	neg	r22
    b7b4:	7f 4f       	sbci	r23, 0xFF	; 255
    b7b6:	8f 4f       	sbci	r24, 0xFF	; 255
    b7b8:	9f 4f       	sbci	r25, 0xFF	; 255
    b7ba:	08 95       	ret

0000b7bc <__floatunsisf>:
    b7bc:	e8 94       	clt
    b7be:	09 c0       	rjmp	.+18     	; 0xb7d2 <__floatsisf+0x12>

0000b7c0 <__floatsisf>:
    b7c0:	97 fb       	bst	r25, 7
    b7c2:	3e f4       	brtc	.+14     	; 0xb7d2 <__floatsisf+0x12>
    b7c4:	90 95       	com	r25
    b7c6:	80 95       	com	r24
    b7c8:	70 95       	com	r23
    b7ca:	61 95       	neg	r22
    b7cc:	7f 4f       	sbci	r23, 0xFF	; 255
    b7ce:	8f 4f       	sbci	r24, 0xFF	; 255
    b7d0:	9f 4f       	sbci	r25, 0xFF	; 255
    b7d2:	99 23       	and	r25, r25
    b7d4:	a9 f0       	breq	.+42     	; 0xb800 <__floatsisf+0x40>
    b7d6:	f9 2f       	mov	r31, r25
    b7d8:	96 e9       	ldi	r25, 0x96	; 150
    b7da:	bb 27       	eor	r27, r27
    b7dc:	93 95       	inc	r25
    b7de:	f6 95       	lsr	r31
    b7e0:	87 95       	ror	r24
    b7e2:	77 95       	ror	r23
    b7e4:	67 95       	ror	r22
    b7e6:	b7 95       	ror	r27
    b7e8:	f1 11       	cpse	r31, r1
    b7ea:	f8 cf       	rjmp	.-16     	; 0xb7dc <__floatsisf+0x1c>
    b7ec:	fa f4       	brpl	.+62     	; 0xb82c <__floatsisf+0x6c>
    b7ee:	bb 0f       	add	r27, r27
    b7f0:	11 f4       	brne	.+4      	; 0xb7f6 <__floatsisf+0x36>
    b7f2:	60 ff       	sbrs	r22, 0
    b7f4:	1b c0       	rjmp	.+54     	; 0xb82c <__floatsisf+0x6c>
    b7f6:	6f 5f       	subi	r22, 0xFF	; 255
    b7f8:	7f 4f       	sbci	r23, 0xFF	; 255
    b7fa:	8f 4f       	sbci	r24, 0xFF	; 255
    b7fc:	9f 4f       	sbci	r25, 0xFF	; 255
    b7fe:	16 c0       	rjmp	.+44     	; 0xb82c <__floatsisf+0x6c>
    b800:	88 23       	and	r24, r24
    b802:	11 f0       	breq	.+4      	; 0xb808 <__floatsisf+0x48>
    b804:	96 e9       	ldi	r25, 0x96	; 150
    b806:	11 c0       	rjmp	.+34     	; 0xb82a <__floatsisf+0x6a>
    b808:	77 23       	and	r23, r23
    b80a:	21 f0       	breq	.+8      	; 0xb814 <__floatsisf+0x54>
    b80c:	9e e8       	ldi	r25, 0x8E	; 142
    b80e:	87 2f       	mov	r24, r23
    b810:	76 2f       	mov	r23, r22
    b812:	05 c0       	rjmp	.+10     	; 0xb81e <__floatsisf+0x5e>
    b814:	66 23       	and	r22, r22
    b816:	71 f0       	breq	.+28     	; 0xb834 <__floatsisf+0x74>
    b818:	96 e8       	ldi	r25, 0x86	; 134
    b81a:	86 2f       	mov	r24, r22
    b81c:	70 e0       	ldi	r23, 0x00	; 0
    b81e:	60 e0       	ldi	r22, 0x00	; 0
    b820:	2a f0       	brmi	.+10     	; 0xb82c <__floatsisf+0x6c>
    b822:	9a 95       	dec	r25
    b824:	66 0f       	add	r22, r22
    b826:	77 1f       	adc	r23, r23
    b828:	88 1f       	adc	r24, r24
    b82a:	da f7       	brpl	.-10     	; 0xb822 <__floatsisf+0x62>
    b82c:	88 0f       	add	r24, r24
    b82e:	96 95       	lsr	r25
    b830:	87 95       	ror	r24
    b832:	97 f9       	bld	r25, 7
    b834:	08 95       	ret

0000b836 <__fp_cmp>:
    b836:	99 0f       	add	r25, r25
    b838:	00 08       	sbc	r0, r0
    b83a:	55 0f       	add	r21, r21
    b83c:	aa 0b       	sbc	r26, r26
    b83e:	e0 e8       	ldi	r30, 0x80	; 128
    b840:	fe ef       	ldi	r31, 0xFE	; 254
    b842:	16 16       	cp	r1, r22
    b844:	17 06       	cpc	r1, r23
    b846:	e8 07       	cpc	r30, r24
    b848:	f9 07       	cpc	r31, r25
    b84a:	c0 f0       	brcs	.+48     	; 0xb87c <__fp_cmp+0x46>
    b84c:	12 16       	cp	r1, r18
    b84e:	13 06       	cpc	r1, r19
    b850:	e4 07       	cpc	r30, r20
    b852:	f5 07       	cpc	r31, r21
    b854:	98 f0       	brcs	.+38     	; 0xb87c <__fp_cmp+0x46>
    b856:	62 1b       	sub	r22, r18
    b858:	73 0b       	sbc	r23, r19
    b85a:	84 0b       	sbc	r24, r20
    b85c:	95 0b       	sbc	r25, r21
    b85e:	39 f4       	brne	.+14     	; 0xb86e <__fp_cmp+0x38>
    b860:	0a 26       	eor	r0, r26
    b862:	61 f0       	breq	.+24     	; 0xb87c <__fp_cmp+0x46>
    b864:	23 2b       	or	r18, r19
    b866:	24 2b       	or	r18, r20
    b868:	25 2b       	or	r18, r21
    b86a:	21 f4       	brne	.+8      	; 0xb874 <__fp_cmp+0x3e>
    b86c:	08 95       	ret
    b86e:	0a 26       	eor	r0, r26
    b870:	09 f4       	brne	.+2      	; 0xb874 <__fp_cmp+0x3e>
    b872:	a1 40       	sbci	r26, 0x01	; 1
    b874:	a6 95       	lsr	r26
    b876:	8f ef       	ldi	r24, 0xFF	; 255
    b878:	81 1d       	adc	r24, r1
    b87a:	81 1d       	adc	r24, r1
    b87c:	08 95       	ret

0000b87e <__fp_inf>:
    b87e:	97 f9       	bld	r25, 7
    b880:	9f 67       	ori	r25, 0x7F	; 127
    b882:	80 e8       	ldi	r24, 0x80	; 128
    b884:	70 e0       	ldi	r23, 0x00	; 0
    b886:	60 e0       	ldi	r22, 0x00	; 0
    b888:	08 95       	ret

0000b88a <__fp_mintl>:
    b88a:	88 23       	and	r24, r24
    b88c:	71 f4       	brne	.+28     	; 0xb8aa <__fp_mintl+0x20>
    b88e:	77 23       	and	r23, r23
    b890:	21 f0       	breq	.+8      	; 0xb89a <__fp_mintl+0x10>
    b892:	98 50       	subi	r25, 0x08	; 8
    b894:	87 2b       	or	r24, r23
    b896:	76 2f       	mov	r23, r22
    b898:	07 c0       	rjmp	.+14     	; 0xb8a8 <__fp_mintl+0x1e>
    b89a:	66 23       	and	r22, r22
    b89c:	11 f4       	brne	.+4      	; 0xb8a2 <__fp_mintl+0x18>
    b89e:	99 27       	eor	r25, r25
    b8a0:	0d c0       	rjmp	.+26     	; 0xb8bc <__fp_mintl+0x32>
    b8a2:	90 51       	subi	r25, 0x10	; 16
    b8a4:	86 2b       	or	r24, r22
    b8a6:	70 e0       	ldi	r23, 0x00	; 0
    b8a8:	60 e0       	ldi	r22, 0x00	; 0
    b8aa:	2a f0       	brmi	.+10     	; 0xb8b6 <__fp_mintl+0x2c>
    b8ac:	9a 95       	dec	r25
    b8ae:	66 0f       	add	r22, r22
    b8b0:	77 1f       	adc	r23, r23
    b8b2:	88 1f       	adc	r24, r24
    b8b4:	da f7       	brpl	.-10     	; 0xb8ac <__fp_mintl+0x22>
    b8b6:	88 0f       	add	r24, r24
    b8b8:	96 95       	lsr	r25
    b8ba:	87 95       	ror	r24
    b8bc:	97 f9       	bld	r25, 7
    b8be:	08 95       	ret

0000b8c0 <__fp_mpack>:
    b8c0:	9f 3f       	cpi	r25, 0xFF	; 255
    b8c2:	31 f0       	breq	.+12     	; 0xb8d0 <__fp_mpack_finite+0xc>

0000b8c4 <__fp_mpack_finite>:
    b8c4:	91 50       	subi	r25, 0x01	; 1
    b8c6:	20 f4       	brcc	.+8      	; 0xb8d0 <__fp_mpack_finite+0xc>
    b8c8:	87 95       	ror	r24
    b8ca:	77 95       	ror	r23
    b8cc:	67 95       	ror	r22
    b8ce:	b7 95       	ror	r27
    b8d0:	88 0f       	add	r24, r24
    b8d2:	91 1d       	adc	r25, r1
    b8d4:	96 95       	lsr	r25
    b8d6:	87 95       	ror	r24
    b8d8:	97 f9       	bld	r25, 7
    b8da:	08 95       	ret

0000b8dc <__fp_nan>:
    b8dc:	9f ef       	ldi	r25, 0xFF	; 255
    b8de:	80 ec       	ldi	r24, 0xC0	; 192
    b8e0:	08 95       	ret

0000b8e2 <__fp_powser>:
    b8e2:	df 93       	push	r29
    b8e4:	cf 93       	push	r28
    b8e6:	1f 93       	push	r17
    b8e8:	0f 93       	push	r16
    b8ea:	ff 92       	push	r15
    b8ec:	ef 92       	push	r14
    b8ee:	df 92       	push	r13
    b8f0:	7b 01       	movw	r14, r22
    b8f2:	8c 01       	movw	r16, r24
    b8f4:	68 94       	set
    b8f6:	05 c0       	rjmp	.+10     	; 0xb902 <__fp_powser+0x20>
    b8f8:	da 2e       	mov	r13, r26
    b8fa:	ef 01       	movw	r28, r30
    b8fc:	8d d1       	rcall	.+794    	; 0xbc18 <__mulsf3x>
    b8fe:	fe 01       	movw	r30, r28
    b900:	e8 94       	clt
    b902:	a5 91       	lpm	r26, Z+
    b904:	25 91       	lpm	r18, Z+
    b906:	35 91       	lpm	r19, Z+
    b908:	45 91       	lpm	r20, Z+
    b90a:	55 91       	lpm	r21, Z+
    b90c:	ae f3       	brts	.-22     	; 0xb8f8 <__fp_powser+0x16>
    b90e:	ef 01       	movw	r28, r30
    b910:	27 de       	rcall	.-946    	; 0xb560 <__addsf3x>
    b912:	fe 01       	movw	r30, r28
    b914:	97 01       	movw	r18, r14
    b916:	a8 01       	movw	r20, r16
    b918:	da 94       	dec	r13
    b91a:	79 f7       	brne	.-34     	; 0xb8fa <__fp_powser+0x18>
    b91c:	df 90       	pop	r13
    b91e:	ef 90       	pop	r14
    b920:	ff 90       	pop	r15
    b922:	0f 91       	pop	r16
    b924:	1f 91       	pop	r17
    b926:	cf 91       	pop	r28
    b928:	df 91       	pop	r29
    b92a:	08 95       	ret

0000b92c <__fp_pscA>:
    b92c:	00 24       	eor	r0, r0
    b92e:	0a 94       	dec	r0
    b930:	16 16       	cp	r1, r22
    b932:	17 06       	cpc	r1, r23
    b934:	18 06       	cpc	r1, r24
    b936:	09 06       	cpc	r0, r25
    b938:	08 95       	ret

0000b93a <__fp_pscB>:
    b93a:	00 24       	eor	r0, r0
    b93c:	0a 94       	dec	r0
    b93e:	12 16       	cp	r1, r18
    b940:	13 06       	cpc	r1, r19
    b942:	14 06       	cpc	r1, r20
    b944:	05 06       	cpc	r0, r21
    b946:	08 95       	ret
    b948:	c9 cf       	rjmp	.-110    	; 0xb8dc <__fp_nan>

0000b94a <__fp_rempio2>:
    b94a:	50 d0       	rcall	.+160    	; 0xb9ec <__fp_splitA>
    b94c:	e8 f3       	brcs	.-6      	; 0xb948 <__fp_pscB+0xe>
    b94e:	e8 94       	clt
    b950:	e0 e0       	ldi	r30, 0x00	; 0
    b952:	bb 27       	eor	r27, r27
    b954:	9f 57       	subi	r25, 0x7F	; 127
    b956:	f0 f0       	brcs	.+60     	; 0xb994 <__fp_rempio2+0x4a>
    b958:	2a ed       	ldi	r18, 0xDA	; 218
    b95a:	3f e0       	ldi	r19, 0x0F	; 15
    b95c:	49 ec       	ldi	r20, 0xC9	; 201
    b95e:	06 c0       	rjmp	.+12     	; 0xb96c <__fp_rempio2+0x22>
    b960:	ee 0f       	add	r30, r30
    b962:	bb 0f       	add	r27, r27
    b964:	66 1f       	adc	r22, r22
    b966:	77 1f       	adc	r23, r23
    b968:	88 1f       	adc	r24, r24
    b96a:	28 f0       	brcs	.+10     	; 0xb976 <__fp_rempio2+0x2c>
    b96c:	b2 3a       	cpi	r27, 0xA2	; 162
    b96e:	62 07       	cpc	r22, r18
    b970:	73 07       	cpc	r23, r19
    b972:	84 07       	cpc	r24, r20
    b974:	28 f0       	brcs	.+10     	; 0xb980 <__fp_rempio2+0x36>
    b976:	b2 5a       	subi	r27, 0xA2	; 162
    b978:	62 0b       	sbc	r22, r18
    b97a:	73 0b       	sbc	r23, r19
    b97c:	84 0b       	sbc	r24, r20
    b97e:	e3 95       	inc	r30
    b980:	9a 95       	dec	r25
    b982:	72 f7       	brpl	.-36     	; 0xb960 <__fp_rempio2+0x16>
    b984:	80 38       	cpi	r24, 0x80	; 128
    b986:	30 f4       	brcc	.+12     	; 0xb994 <__fp_rempio2+0x4a>
    b988:	9a 95       	dec	r25
    b98a:	bb 0f       	add	r27, r27
    b98c:	66 1f       	adc	r22, r22
    b98e:	77 1f       	adc	r23, r23
    b990:	88 1f       	adc	r24, r24
    b992:	d2 f7       	brpl	.-12     	; 0xb988 <__fp_rempio2+0x3e>
    b994:	90 48       	sbci	r25, 0x80	; 128
    b996:	96 cf       	rjmp	.-212    	; 0xb8c4 <__fp_mpack_finite>

0000b998 <__fp_round>:
    b998:	09 2e       	mov	r0, r25
    b99a:	03 94       	inc	r0
    b99c:	00 0c       	add	r0, r0
    b99e:	11 f4       	brne	.+4      	; 0xb9a4 <__fp_round+0xc>
    b9a0:	88 23       	and	r24, r24
    b9a2:	52 f0       	brmi	.+20     	; 0xb9b8 <__fp_round+0x20>
    b9a4:	bb 0f       	add	r27, r27
    b9a6:	40 f4       	brcc	.+16     	; 0xb9b8 <__fp_round+0x20>
    b9a8:	bf 2b       	or	r27, r31
    b9aa:	11 f4       	brne	.+4      	; 0xb9b0 <__fp_round+0x18>
    b9ac:	60 ff       	sbrs	r22, 0
    b9ae:	04 c0       	rjmp	.+8      	; 0xb9b8 <__fp_round+0x20>
    b9b0:	6f 5f       	subi	r22, 0xFF	; 255
    b9b2:	7f 4f       	sbci	r23, 0xFF	; 255
    b9b4:	8f 4f       	sbci	r24, 0xFF	; 255
    b9b6:	9f 4f       	sbci	r25, 0xFF	; 255
    b9b8:	08 95       	ret

0000b9ba <__fp_sinus>:
    b9ba:	ef 93       	push	r30
    b9bc:	e0 ff       	sbrs	r30, 0
    b9be:	06 c0       	rjmp	.+12     	; 0xb9cc <__fp_sinus+0x12>
    b9c0:	a2 ea       	ldi	r26, 0xA2	; 162
    b9c2:	2a ed       	ldi	r18, 0xDA	; 218
    b9c4:	3f e0       	ldi	r19, 0x0F	; 15
    b9c6:	49 ec       	ldi	r20, 0xC9	; 201
    b9c8:	5f eb       	ldi	r21, 0xBF	; 191
    b9ca:	ca dd       	rcall	.-1132   	; 0xb560 <__addsf3x>
    b9cc:	e5 df       	rcall	.-54     	; 0xb998 <__fp_round>
    b9ce:	0f 90       	pop	r0
    b9d0:	03 94       	inc	r0
    b9d2:	01 fc       	sbrc	r0, 1
    b9d4:	90 58       	subi	r25, 0x80	; 128
    b9d6:	e5 e1       	ldi	r30, 0x15	; 21
    b9d8:	f2 e0       	ldi	r31, 0x02	; 2
    b9da:	d2 c1       	rjmp	.+932    	; 0xbd80 <__fp_powsodd>

0000b9dc <__fp_split3>:
    b9dc:	57 fd       	sbrc	r21, 7
    b9de:	90 58       	subi	r25, 0x80	; 128
    b9e0:	44 0f       	add	r20, r20
    b9e2:	55 1f       	adc	r21, r21
    b9e4:	59 f0       	breq	.+22     	; 0xb9fc <__fp_splitA+0x10>
    b9e6:	5f 3f       	cpi	r21, 0xFF	; 255
    b9e8:	71 f0       	breq	.+28     	; 0xba06 <__fp_splitA+0x1a>
    b9ea:	47 95       	ror	r20

0000b9ec <__fp_splitA>:
    b9ec:	88 0f       	add	r24, r24
    b9ee:	97 fb       	bst	r25, 7
    b9f0:	99 1f       	adc	r25, r25
    b9f2:	61 f0       	breq	.+24     	; 0xba0c <__fp_splitA+0x20>
    b9f4:	9f 3f       	cpi	r25, 0xFF	; 255
    b9f6:	79 f0       	breq	.+30     	; 0xba16 <__fp_splitA+0x2a>
    b9f8:	87 95       	ror	r24
    b9fa:	08 95       	ret
    b9fc:	12 16       	cp	r1, r18
    b9fe:	13 06       	cpc	r1, r19
    ba00:	14 06       	cpc	r1, r20
    ba02:	55 1f       	adc	r21, r21
    ba04:	f2 cf       	rjmp	.-28     	; 0xb9ea <__fp_split3+0xe>
    ba06:	46 95       	lsr	r20
    ba08:	f1 df       	rcall	.-30     	; 0xb9ec <__fp_splitA>
    ba0a:	08 c0       	rjmp	.+16     	; 0xba1c <__fp_splitA+0x30>
    ba0c:	16 16       	cp	r1, r22
    ba0e:	17 06       	cpc	r1, r23
    ba10:	18 06       	cpc	r1, r24
    ba12:	99 1f       	adc	r25, r25
    ba14:	f1 cf       	rjmp	.-30     	; 0xb9f8 <__fp_splitA+0xc>
    ba16:	86 95       	lsr	r24
    ba18:	71 05       	cpc	r23, r1
    ba1a:	61 05       	cpc	r22, r1
    ba1c:	08 94       	sec
    ba1e:	08 95       	ret

0000ba20 <__fp_trunc>:
    ba20:	e5 df       	rcall	.-54     	; 0xb9ec <__fp_splitA>
    ba22:	a0 f0       	brcs	.+40     	; 0xba4c <__fp_trunc+0x2c>
    ba24:	be e7       	ldi	r27, 0x7E	; 126
    ba26:	b9 17       	cp	r27, r25
    ba28:	88 f4       	brcc	.+34     	; 0xba4c <__fp_trunc+0x2c>
    ba2a:	bb 27       	eor	r27, r27
    ba2c:	9f 38       	cpi	r25, 0x8F	; 143
    ba2e:	60 f4       	brcc	.+24     	; 0xba48 <__fp_trunc+0x28>
    ba30:	16 16       	cp	r1, r22
    ba32:	b1 1d       	adc	r27, r1
    ba34:	67 2f       	mov	r22, r23
    ba36:	78 2f       	mov	r23, r24
    ba38:	88 27       	eor	r24, r24
    ba3a:	98 5f       	subi	r25, 0xF8	; 248
    ba3c:	f7 cf       	rjmp	.-18     	; 0xba2c <__fp_trunc+0xc>
    ba3e:	86 95       	lsr	r24
    ba40:	77 95       	ror	r23
    ba42:	67 95       	ror	r22
    ba44:	b1 1d       	adc	r27, r1
    ba46:	93 95       	inc	r25
    ba48:	96 39       	cpi	r25, 0x96	; 150
    ba4a:	c8 f3       	brcs	.-14     	; 0xba3e <__fp_trunc+0x1e>
    ba4c:	08 95       	ret

0000ba4e <__fp_zero>:
    ba4e:	e8 94       	clt

0000ba50 <__fp_szero>:
    ba50:	bb 27       	eor	r27, r27
    ba52:	66 27       	eor	r22, r22
    ba54:	77 27       	eor	r23, r23
    ba56:	cb 01       	movw	r24, r22
    ba58:	97 f9       	bld	r25, 7
    ba5a:	08 95       	ret

0000ba5c <__gesf2>:
    ba5c:	ec de       	rcall	.-552    	; 0xb836 <__fp_cmp>
    ba5e:	08 f4       	brcc	.+2      	; 0xba62 <__gesf2+0x6>
    ba60:	8f ef       	ldi	r24, 0xFF	; 255
    ba62:	08 95       	ret
    ba64:	63 df       	rcall	.-314    	; 0xb92c <__fp_pscA>
    ba66:	19 f0       	breq	.+6      	; 0xba6e <__gesf2+0x12>
    ba68:	68 df       	rcall	.-304    	; 0xb93a <__fp_pscB>
    ba6a:	09 f0       	breq	.+2      	; 0xba6e <__gesf2+0x12>
    ba6c:	37 cf       	rjmp	.-402    	; 0xb8dc <__fp_nan>
    ba6e:	07 cf       	rjmp	.-498    	; 0xb87e <__fp_inf>
    ba70:	b9 01       	movw	r22, r18
    ba72:	ca 01       	movw	r24, r20
    ba74:	25 cf       	rjmp	.-438    	; 0xb8c0 <__fp_mpack>

0000ba76 <hypot>:
    ba76:	9f 77       	andi	r25, 0x7F	; 127
    ba78:	5f 77       	andi	r21, 0x7F	; 127
    ba7a:	b0 df       	rcall	.-160    	; 0xb9dc <__fp_split3>
    ba7c:	98 f3       	brcs	.-26     	; 0xba64 <__gesf2+0x8>
    ba7e:	99 23       	and	r25, r25
    ba80:	b9 f3       	breq	.-18     	; 0xba70 <__gesf2+0x14>
    ba82:	55 23       	and	r21, r21
    ba84:	b9 f3       	breq	.-18     	; 0xba74 <__gesf2+0x18>
    ba86:	ff 27       	eor	r31, r31
    ba88:	95 17       	cp	r25, r21
    ba8a:	58 f4       	brcc	.+22     	; 0xbaa2 <hypot+0x2c>
    ba8c:	e5 2f       	mov	r30, r21
    ba8e:	e9 1b       	sub	r30, r25
    ba90:	ed 30       	cpi	r30, 0x0D	; 13
    ba92:	70 f7       	brcc	.-36     	; 0xba70 <__gesf2+0x14>
    ba94:	5e 3b       	cpi	r21, 0xBE	; 190
    ba96:	10 f0       	brcs	.+4      	; 0xba9c <hypot+0x26>
    ba98:	f1 e4       	ldi	r31, 0x41	; 65
    ba9a:	1c c0       	rjmp	.+56     	; 0xbad4 <hypot+0x5e>
    ba9c:	90 34       	cpi	r25, 0x40	; 64
    ba9e:	e0 f4       	brcc	.+56     	; 0xbad8 <hypot+0x62>
    baa0:	0a c0       	rjmp	.+20     	; 0xbab6 <hypot+0x40>
    baa2:	e9 2f       	mov	r30, r25
    baa4:	e5 1b       	sub	r30, r21
    baa6:	ed 30       	cpi	r30, 0x0D	; 13
    baa8:	28 f7       	brcc	.-54     	; 0xba74 <__gesf2+0x18>
    baaa:	9e 3b       	cpi	r25, 0xBE	; 190
    baac:	10 f0       	brcs	.+4      	; 0xbab2 <hypot+0x3c>
    baae:	f1 e4       	ldi	r31, 0x41	; 65
    bab0:	11 c0       	rjmp	.+34     	; 0xbad4 <hypot+0x5e>
    bab2:	50 34       	cpi	r21, 0x40	; 64
    bab4:	88 f4       	brcc	.+34     	; 0xbad8 <hypot+0x62>
    bab6:	f9 ea       	ldi	r31, 0xA9	; 169
    bab8:	88 23       	and	r24, r24
    baba:	2a f0       	brmi	.+10     	; 0xbac6 <hypot+0x50>
    babc:	9a 95       	dec	r25
    babe:	66 0f       	add	r22, r22
    bac0:	77 1f       	adc	r23, r23
    bac2:	88 1f       	adc	r24, r24
    bac4:	da f7       	brpl	.-10     	; 0xbabc <hypot+0x46>
    bac6:	44 23       	and	r20, r20
    bac8:	2a f0       	brmi	.+10     	; 0xbad4 <hypot+0x5e>
    baca:	5a 95       	dec	r21
    bacc:	22 0f       	add	r18, r18
    bace:	33 1f       	adc	r19, r19
    bad0:	44 1f       	adc	r20, r20
    bad2:	da f7       	brpl	.-10     	; 0xbaca <hypot+0x54>
    bad4:	9f 1b       	sub	r25, r31
    bad6:	5f 1b       	sub	r21, r31
    bad8:	ff 93       	push	r31
    bada:	1f 93       	push	r17
    badc:	0f 93       	push	r16
    bade:	ff 92       	push	r15
    bae0:	ef 92       	push	r14
    bae2:	79 01       	movw	r14, r18
    bae4:	8a 01       	movw	r16, r20
    bae6:	bb 27       	eor	r27, r27
    bae8:	ab 2f       	mov	r26, r27
    baea:	9b 01       	movw	r18, r22
    baec:	ac 01       	movw	r20, r24
    baee:	96 d0       	rcall	.+300    	; 0xbc1c <__mulsf3_pse>
    baf0:	97 01       	movw	r18, r14
    baf2:	a8 01       	movw	r20, r16
    baf4:	bf 93       	push	r27
    baf6:	7b 01       	movw	r14, r22
    baf8:	8c 01       	movw	r16, r24
    bafa:	aa 27       	eor	r26, r26
    bafc:	ba 2f       	mov	r27, r26
    bafe:	b9 01       	movw	r22, r18
    bb00:	ca 01       	movw	r24, r20
    bb02:	8c d0       	rcall	.+280    	; 0xbc1c <__mulsf3_pse>
    bb04:	af 91       	pop	r26
    bb06:	97 01       	movw	r18, r14
    bb08:	a8 01       	movw	r20, r16
    bb0a:	ef 90       	pop	r14
    bb0c:	ff 90       	pop	r15
    bb0e:	0f 91       	pop	r16
    bb10:	1f 91       	pop	r17
    bb12:	26 dd       	rcall	.-1460   	; 0xb560 <__addsf3x>
    bb14:	41 df       	rcall	.-382    	; 0xb998 <__fp_round>
    bb16:	e1 d0       	rcall	.+450    	; 0xbcda <sqrt>
    bb18:	4f 91       	pop	r20
    bb1a:	40 ff       	sbrs	r20, 0
    bb1c:	08 95       	ret
    bb1e:	55 27       	eor	r21, r21
    bb20:	47 fd       	sbrc	r20, 7
    bb22:	50 95       	com	r21
    bb24:	09 c0       	rjmp	.+18     	; 0xbb38 <ldexp>

0000bb26 <inverse>:
    bb26:	9b 01       	movw	r18, r22
    bb28:	ac 01       	movw	r20, r24
    bb2a:	60 e0       	ldi	r22, 0x00	; 0
    bb2c:	70 e0       	ldi	r23, 0x00	; 0
    bb2e:	80 e8       	ldi	r24, 0x80	; 128
    bb30:	9f e3       	ldi	r25, 0x3F	; 63
    bb32:	ab cd       	rjmp	.-1194   	; 0xb68a <__divsf3>
    bb34:	a4 ce       	rjmp	.-696    	; 0xb87e <__fp_inf>
    bb36:	c4 ce       	rjmp	.-632    	; 0xb8c0 <__fp_mpack>

0000bb38 <ldexp>:
    bb38:	59 df       	rcall	.-334    	; 0xb9ec <__fp_splitA>
    bb3a:	e8 f3       	brcs	.-6      	; 0xbb36 <inverse+0x10>
    bb3c:	99 23       	and	r25, r25
    bb3e:	d9 f3       	breq	.-10     	; 0xbb36 <inverse+0x10>
    bb40:	94 0f       	add	r25, r20
    bb42:	51 1d       	adc	r21, r1
    bb44:	bb f3       	brvs	.-18     	; 0xbb34 <inverse+0xe>
    bb46:	91 50       	subi	r25, 0x01	; 1
    bb48:	50 40       	sbci	r21, 0x00	; 0
    bb4a:	94 f0       	brlt	.+36     	; 0xbb70 <ldexp+0x38>
    bb4c:	59 f0       	breq	.+22     	; 0xbb64 <ldexp+0x2c>
    bb4e:	88 23       	and	r24, r24
    bb50:	32 f0       	brmi	.+12     	; 0xbb5e <ldexp+0x26>
    bb52:	66 0f       	add	r22, r22
    bb54:	77 1f       	adc	r23, r23
    bb56:	88 1f       	adc	r24, r24
    bb58:	91 50       	subi	r25, 0x01	; 1
    bb5a:	50 40       	sbci	r21, 0x00	; 0
    bb5c:	c1 f7       	brne	.-16     	; 0xbb4e <ldexp+0x16>
    bb5e:	9e 3f       	cpi	r25, 0xFE	; 254
    bb60:	51 05       	cpc	r21, r1
    bb62:	44 f7       	brge	.-48     	; 0xbb34 <inverse+0xe>
    bb64:	88 0f       	add	r24, r24
    bb66:	91 1d       	adc	r25, r1
    bb68:	96 95       	lsr	r25
    bb6a:	87 95       	ror	r24
    bb6c:	97 f9       	bld	r25, 7
    bb6e:	08 95       	ret
    bb70:	5f 3f       	cpi	r21, 0xFF	; 255
    bb72:	ac f0       	brlt	.+42     	; 0xbb9e <ldexp+0x66>
    bb74:	98 3e       	cpi	r25, 0xE8	; 232
    bb76:	9c f0       	brlt	.+38     	; 0xbb9e <ldexp+0x66>
    bb78:	bb 27       	eor	r27, r27
    bb7a:	86 95       	lsr	r24
    bb7c:	77 95       	ror	r23
    bb7e:	67 95       	ror	r22
    bb80:	b7 95       	ror	r27
    bb82:	08 f4       	brcc	.+2      	; 0xbb86 <ldexp+0x4e>
    bb84:	b1 60       	ori	r27, 0x01	; 1
    bb86:	93 95       	inc	r25
    bb88:	c1 f7       	brne	.-16     	; 0xbb7a <ldexp+0x42>
    bb8a:	bb 0f       	add	r27, r27
    bb8c:	58 f7       	brcc	.-42     	; 0xbb64 <ldexp+0x2c>
    bb8e:	11 f4       	brne	.+4      	; 0xbb94 <ldexp+0x5c>
    bb90:	60 ff       	sbrs	r22, 0
    bb92:	e8 cf       	rjmp	.-48     	; 0xbb64 <ldexp+0x2c>
    bb94:	6f 5f       	subi	r22, 0xFF	; 255
    bb96:	7f 4f       	sbci	r23, 0xFF	; 255
    bb98:	8f 4f       	sbci	r24, 0xFF	; 255
    bb9a:	9f 4f       	sbci	r25, 0xFF	; 255
    bb9c:	e3 cf       	rjmp	.-58     	; 0xbb64 <ldexp+0x2c>
    bb9e:	58 cf       	rjmp	.-336    	; 0xba50 <__fp_szero>

0000bba0 <lround>:
    bba0:	25 df       	rcall	.-438    	; 0xb9ec <__fp_splitA>
    bba2:	58 f1       	brcs	.+86     	; 0xbbfa <lround+0x5a>
    bba4:	9e 57       	subi	r25, 0x7E	; 126
    bba6:	58 f1       	brcs	.+86     	; 0xbbfe <lround+0x5e>
    bba8:	98 51       	subi	r25, 0x18	; 24
    bbaa:	a0 f0       	brcs	.+40     	; 0xbbd4 <lround+0x34>
    bbac:	e9 f0       	breq	.+58     	; 0xbbe8 <lround+0x48>
    bbae:	98 30       	cpi	r25, 0x08	; 8
    bbb0:	20 f5       	brcc	.+72     	; 0xbbfa <lround+0x5a>
    bbb2:	09 2e       	mov	r0, r25
    bbb4:	99 27       	eor	r25, r25
    bbb6:	66 0f       	add	r22, r22
    bbb8:	77 1f       	adc	r23, r23
    bbba:	88 1f       	adc	r24, r24
    bbbc:	99 1f       	adc	r25, r25
    bbbe:	0a 94       	dec	r0
    bbc0:	d1 f7       	brne	.-12     	; 0xbbb6 <lround+0x16>
    bbc2:	12 c0       	rjmp	.+36     	; 0xbbe8 <lround+0x48>
    bbc4:	06 2e       	mov	r0, r22
    bbc6:	67 2f       	mov	r22, r23
    bbc8:	78 2f       	mov	r23, r24
    bbca:	88 27       	eor	r24, r24
    bbcc:	98 5f       	subi	r25, 0xF8	; 248
    bbce:	11 f4       	brne	.+4      	; 0xbbd4 <lround+0x34>
    bbd0:	00 0c       	add	r0, r0
    bbd2:	07 c0       	rjmp	.+14     	; 0xbbe2 <lround+0x42>
    bbd4:	99 3f       	cpi	r25, 0xF9	; 249
    bbd6:	b4 f3       	brlt	.-20     	; 0xbbc4 <lround+0x24>
    bbd8:	86 95       	lsr	r24
    bbda:	77 95       	ror	r23
    bbdc:	67 95       	ror	r22
    bbde:	93 95       	inc	r25
    bbe0:	d9 f7       	brne	.-10     	; 0xbbd8 <lround+0x38>
    bbe2:	61 1d       	adc	r22, r1
    bbe4:	71 1d       	adc	r23, r1
    bbe6:	81 1d       	adc	r24, r1
    bbe8:	3e f4       	brtc	.+14     	; 0xbbf8 <lround+0x58>
    bbea:	90 95       	com	r25
    bbec:	80 95       	com	r24
    bbee:	70 95       	com	r23
    bbf0:	61 95       	neg	r22
    bbf2:	7f 4f       	sbci	r23, 0xFF	; 255
    bbf4:	8f 4f       	sbci	r24, 0xFF	; 255
    bbf6:	9f 4f       	sbci	r25, 0xFF	; 255
    bbf8:	08 95       	ret
    bbfa:	68 94       	set
    bbfc:	29 cf       	rjmp	.-430    	; 0xba50 <__fp_szero>
    bbfe:	27 cf       	rjmp	.-434    	; 0xba4e <__fp_zero>

0000bc00 <__mulsf3>:
    bc00:	0b d0       	rcall	.+22     	; 0xbc18 <__mulsf3x>
    bc02:	ca ce       	rjmp	.-620    	; 0xb998 <__fp_round>
    bc04:	93 de       	rcall	.-730    	; 0xb92c <__fp_pscA>
    bc06:	28 f0       	brcs	.+10     	; 0xbc12 <__mulsf3+0x12>
    bc08:	98 de       	rcall	.-720    	; 0xb93a <__fp_pscB>
    bc0a:	18 f0       	brcs	.+6      	; 0xbc12 <__mulsf3+0x12>
    bc0c:	95 23       	and	r25, r21
    bc0e:	09 f0       	breq	.+2      	; 0xbc12 <__mulsf3+0x12>
    bc10:	36 ce       	rjmp	.-916    	; 0xb87e <__fp_inf>
    bc12:	64 ce       	rjmp	.-824    	; 0xb8dc <__fp_nan>
    bc14:	11 24       	eor	r1, r1
    bc16:	1c cf       	rjmp	.-456    	; 0xba50 <__fp_szero>

0000bc18 <__mulsf3x>:
    bc18:	e1 de       	rcall	.-574    	; 0xb9dc <__fp_split3>
    bc1a:	a0 f3       	brcs	.-24     	; 0xbc04 <__mulsf3+0x4>

0000bc1c <__mulsf3_pse>:
    bc1c:	95 9f       	mul	r25, r21
    bc1e:	d1 f3       	breq	.-12     	; 0xbc14 <__mulsf3+0x14>
    bc20:	95 0f       	add	r25, r21
    bc22:	50 e0       	ldi	r21, 0x00	; 0
    bc24:	55 1f       	adc	r21, r21
    bc26:	62 9f       	mul	r22, r18
    bc28:	f0 01       	movw	r30, r0
    bc2a:	72 9f       	mul	r23, r18
    bc2c:	bb 27       	eor	r27, r27
    bc2e:	f0 0d       	add	r31, r0
    bc30:	b1 1d       	adc	r27, r1
    bc32:	63 9f       	mul	r22, r19
    bc34:	aa 27       	eor	r26, r26
    bc36:	f0 0d       	add	r31, r0
    bc38:	b1 1d       	adc	r27, r1
    bc3a:	aa 1f       	adc	r26, r26
    bc3c:	64 9f       	mul	r22, r20
    bc3e:	66 27       	eor	r22, r22
    bc40:	b0 0d       	add	r27, r0
    bc42:	a1 1d       	adc	r26, r1
    bc44:	66 1f       	adc	r22, r22
    bc46:	82 9f       	mul	r24, r18
    bc48:	22 27       	eor	r18, r18
    bc4a:	b0 0d       	add	r27, r0
    bc4c:	a1 1d       	adc	r26, r1
    bc4e:	62 1f       	adc	r22, r18
    bc50:	73 9f       	mul	r23, r19
    bc52:	b0 0d       	add	r27, r0
    bc54:	a1 1d       	adc	r26, r1
    bc56:	62 1f       	adc	r22, r18
    bc58:	83 9f       	mul	r24, r19
    bc5a:	a0 0d       	add	r26, r0
    bc5c:	61 1d       	adc	r22, r1
    bc5e:	22 1f       	adc	r18, r18
    bc60:	74 9f       	mul	r23, r20
    bc62:	33 27       	eor	r19, r19
    bc64:	a0 0d       	add	r26, r0
    bc66:	61 1d       	adc	r22, r1
    bc68:	23 1f       	adc	r18, r19
    bc6a:	84 9f       	mul	r24, r20
    bc6c:	60 0d       	add	r22, r0
    bc6e:	21 1d       	adc	r18, r1
    bc70:	82 2f       	mov	r24, r18
    bc72:	76 2f       	mov	r23, r22
    bc74:	6a 2f       	mov	r22, r26
    bc76:	11 24       	eor	r1, r1
    bc78:	9f 57       	subi	r25, 0x7F	; 127
    bc7a:	50 40       	sbci	r21, 0x00	; 0
    bc7c:	8a f0       	brmi	.+34     	; 0xbca0 <__mulsf3_pse+0x84>
    bc7e:	e1 f0       	breq	.+56     	; 0xbcb8 <__mulsf3_pse+0x9c>
    bc80:	88 23       	and	r24, r24
    bc82:	4a f0       	brmi	.+18     	; 0xbc96 <__mulsf3_pse+0x7a>
    bc84:	ee 0f       	add	r30, r30
    bc86:	ff 1f       	adc	r31, r31
    bc88:	bb 1f       	adc	r27, r27
    bc8a:	66 1f       	adc	r22, r22
    bc8c:	77 1f       	adc	r23, r23
    bc8e:	88 1f       	adc	r24, r24
    bc90:	91 50       	subi	r25, 0x01	; 1
    bc92:	50 40       	sbci	r21, 0x00	; 0
    bc94:	a9 f7       	brne	.-22     	; 0xbc80 <__mulsf3_pse+0x64>
    bc96:	9e 3f       	cpi	r25, 0xFE	; 254
    bc98:	51 05       	cpc	r21, r1
    bc9a:	70 f0       	brcs	.+28     	; 0xbcb8 <__mulsf3_pse+0x9c>
    bc9c:	f0 cd       	rjmp	.-1056   	; 0xb87e <__fp_inf>
    bc9e:	d8 ce       	rjmp	.-592    	; 0xba50 <__fp_szero>
    bca0:	5f 3f       	cpi	r21, 0xFF	; 255
    bca2:	ec f3       	brlt	.-6      	; 0xbc9e <__mulsf3_pse+0x82>
    bca4:	98 3e       	cpi	r25, 0xE8	; 232
    bca6:	dc f3       	brlt	.-10     	; 0xbc9e <__mulsf3_pse+0x82>
    bca8:	86 95       	lsr	r24
    bcaa:	77 95       	ror	r23
    bcac:	67 95       	ror	r22
    bcae:	b7 95       	ror	r27
    bcb0:	f7 95       	ror	r31
    bcb2:	e7 95       	ror	r30
    bcb4:	9f 5f       	subi	r25, 0xFF	; 255
    bcb6:	c1 f7       	brne	.-16     	; 0xbca8 <__mulsf3_pse+0x8c>
    bcb8:	fe 2b       	or	r31, r30
    bcba:	88 0f       	add	r24, r24
    bcbc:	91 1d       	adc	r25, r1
    bcbe:	96 95       	lsr	r25
    bcc0:	87 95       	ror	r24
    bcc2:	97 f9       	bld	r25, 7
    bcc4:	08 95       	ret

0000bcc6 <sin>:
    bcc6:	9f 93       	push	r25
    bcc8:	40 de       	rcall	.-896    	; 0xb94a <__fp_rempio2>
    bcca:	0f 90       	pop	r0
    bccc:	07 fc       	sbrc	r0, 7
    bcce:	ee 5f       	subi	r30, 0xFE	; 254
    bcd0:	74 ce       	rjmp	.-792    	; 0xb9ba <__fp_sinus>
    bcd2:	11 f4       	brne	.+4      	; 0xbcd8 <sin+0x12>
    bcd4:	0e f4       	brtc	.+2      	; 0xbcd8 <sin+0x12>
    bcd6:	02 ce       	rjmp	.-1020   	; 0xb8dc <__fp_nan>
    bcd8:	f3 cd       	rjmp	.-1050   	; 0xb8c0 <__fp_mpack>

0000bcda <sqrt>:
    bcda:	88 de       	rcall	.-752    	; 0xb9ec <__fp_splitA>
    bcdc:	d0 f3       	brcs	.-12     	; 0xbcd2 <sin+0xc>
    bcde:	99 23       	and	r25, r25
    bce0:	d9 f3       	breq	.-10     	; 0xbcd8 <sin+0x12>
    bce2:	ce f3       	brts	.-14     	; 0xbcd6 <sin+0x10>
    bce4:	9f 57       	subi	r25, 0x7F	; 127
    bce6:	55 0b       	sbc	r21, r21
    bce8:	87 ff       	sbrs	r24, 7
    bcea:	43 d0       	rcall	.+134    	; 0xbd72 <__fp_norm2>
    bcec:	00 24       	eor	r0, r0
    bcee:	a0 e6       	ldi	r26, 0x60	; 96
    bcf0:	40 ea       	ldi	r20, 0xA0	; 160
    bcf2:	90 01       	movw	r18, r0
    bcf4:	80 58       	subi	r24, 0x80	; 128
    bcf6:	56 95       	lsr	r21
    bcf8:	97 95       	ror	r25
    bcfa:	28 f4       	brcc	.+10     	; 0xbd06 <sqrt+0x2c>
    bcfc:	80 5c       	subi	r24, 0xC0	; 192
    bcfe:	66 0f       	add	r22, r22
    bd00:	77 1f       	adc	r23, r23
    bd02:	88 1f       	adc	r24, r24
    bd04:	20 f0       	brcs	.+8      	; 0xbd0e <sqrt+0x34>
    bd06:	26 17       	cp	r18, r22
    bd08:	37 07       	cpc	r19, r23
    bd0a:	48 07       	cpc	r20, r24
    bd0c:	30 f4       	brcc	.+12     	; 0xbd1a <sqrt+0x40>
    bd0e:	62 1b       	sub	r22, r18
    bd10:	73 0b       	sbc	r23, r19
    bd12:	84 0b       	sbc	r24, r20
    bd14:	20 29       	or	r18, r0
    bd16:	31 29       	or	r19, r1
    bd18:	4a 2b       	or	r20, r26
    bd1a:	a6 95       	lsr	r26
    bd1c:	17 94       	ror	r1
    bd1e:	07 94       	ror	r0
    bd20:	20 25       	eor	r18, r0
    bd22:	31 25       	eor	r19, r1
    bd24:	4a 27       	eor	r20, r26
    bd26:	58 f7       	brcc	.-42     	; 0xbcfe <sqrt+0x24>
    bd28:	66 0f       	add	r22, r22
    bd2a:	77 1f       	adc	r23, r23
    bd2c:	88 1f       	adc	r24, r24
    bd2e:	20 f0       	brcs	.+8      	; 0xbd38 <sqrt+0x5e>
    bd30:	26 17       	cp	r18, r22
    bd32:	37 07       	cpc	r19, r23
    bd34:	48 07       	cpc	r20, r24
    bd36:	30 f4       	brcc	.+12     	; 0xbd44 <sqrt+0x6a>
    bd38:	62 0b       	sbc	r22, r18
    bd3a:	73 0b       	sbc	r23, r19
    bd3c:	84 0b       	sbc	r24, r20
    bd3e:	20 0d       	add	r18, r0
    bd40:	31 1d       	adc	r19, r1
    bd42:	41 1d       	adc	r20, r1
    bd44:	a0 95       	com	r26
    bd46:	81 f7       	brne	.-32     	; 0xbd28 <sqrt+0x4e>
    bd48:	b9 01       	movw	r22, r18
    bd4a:	84 2f       	mov	r24, r20
    bd4c:	91 58       	subi	r25, 0x81	; 129
    bd4e:	88 0f       	add	r24, r24
    bd50:	96 95       	lsr	r25
    bd52:	87 95       	ror	r24
    bd54:	08 95       	ret

0000bd56 <square>:
    bd56:	9b 01       	movw	r18, r22
    bd58:	ac 01       	movw	r20, r24
    bd5a:	52 cf       	rjmp	.-348    	; 0xbc00 <__mulsf3>

0000bd5c <trunc>:
    bd5c:	61 de       	rcall	.-830    	; 0xba20 <__fp_trunc>
    bd5e:	20 f0       	brcs	.+8      	; 0xbd68 <trunc+0xc>
    bd60:	9f 37       	cpi	r25, 0x7F	; 127
    bd62:	08 f4       	brcc	.+2      	; 0xbd66 <trunc+0xa>
    bd64:	75 ce       	rjmp	.-790    	; 0xba50 <__fp_szero>
    bd66:	91 cd       	rjmp	.-1246   	; 0xb88a <__fp_mintl>
    bd68:	ab cd       	rjmp	.-1194   	; 0xb8c0 <__fp_mpack>

0000bd6a <__unordsf2>:
    bd6a:	65 dd       	rcall	.-1334   	; 0xb836 <__fp_cmp>
    bd6c:	88 0b       	sbc	r24, r24
    bd6e:	99 0b       	sbc	r25, r25
    bd70:	08 95       	ret

0000bd72 <__fp_norm2>:
    bd72:	91 50       	subi	r25, 0x01	; 1
    bd74:	50 40       	sbci	r21, 0x00	; 0
    bd76:	66 0f       	add	r22, r22
    bd78:	77 1f       	adc	r23, r23
    bd7a:	88 1f       	adc	r24, r24
    bd7c:	d2 f7       	brpl	.-12     	; 0xbd72 <__fp_norm2>
    bd7e:	08 95       	ret

0000bd80 <__fp_powsodd>:
    bd80:	9f 93       	push	r25
    bd82:	8f 93       	push	r24
    bd84:	7f 93       	push	r23
    bd86:	6f 93       	push	r22
    bd88:	ff 93       	push	r31
    bd8a:	ef 93       	push	r30
    bd8c:	9b 01       	movw	r18, r22
    bd8e:	ac 01       	movw	r20, r24
    bd90:	37 df       	rcall	.-402    	; 0xbc00 <__mulsf3>
    bd92:	ef 91       	pop	r30
    bd94:	ff 91       	pop	r31
    bd96:	a5 dd       	rcall	.-1206   	; 0xb8e2 <__fp_powser>
    bd98:	2f 91       	pop	r18
    bd9a:	3f 91       	pop	r19
    bd9c:	4f 91       	pop	r20
    bd9e:	5f 91       	pop	r21
    bda0:	2f cf       	rjmp	.-418    	; 0xbc00 <__mulsf3>

0000bda2 <__mulsi3>:
    bda2:	62 9f       	mul	r22, r18
    bda4:	d0 01       	movw	r26, r0
    bda6:	73 9f       	mul	r23, r19
    bda8:	f0 01       	movw	r30, r0
    bdaa:	82 9f       	mul	r24, r18
    bdac:	e0 0d       	add	r30, r0
    bdae:	f1 1d       	adc	r31, r1
    bdb0:	64 9f       	mul	r22, r20
    bdb2:	e0 0d       	add	r30, r0
    bdb4:	f1 1d       	adc	r31, r1
    bdb6:	92 9f       	mul	r25, r18
    bdb8:	f0 0d       	add	r31, r0
    bdba:	83 9f       	mul	r24, r19
    bdbc:	f0 0d       	add	r31, r0
    bdbe:	74 9f       	mul	r23, r20
    bdc0:	f0 0d       	add	r31, r0
    bdc2:	65 9f       	mul	r22, r21
    bdc4:	f0 0d       	add	r31, r0
    bdc6:	99 27       	eor	r25, r25
    bdc8:	72 9f       	mul	r23, r18
    bdca:	b0 0d       	add	r27, r0
    bdcc:	e1 1d       	adc	r30, r1
    bdce:	f9 1f       	adc	r31, r25
    bdd0:	63 9f       	mul	r22, r19
    bdd2:	b0 0d       	add	r27, r0
    bdd4:	e1 1d       	adc	r30, r1
    bdd6:	f9 1f       	adc	r31, r25
    bdd8:	bd 01       	movw	r22, r26
    bdda:	cf 01       	movw	r24, r30
    bddc:	11 24       	eor	r1, r1
    bdde:	08 95       	ret

0000bde0 <__udivmodsi4>:
    bde0:	a1 e2       	ldi	r26, 0x21	; 33
    bde2:	1a 2e       	mov	r1, r26
    bde4:	aa 1b       	sub	r26, r26
    bde6:	bb 1b       	sub	r27, r27
    bde8:	fd 01       	movw	r30, r26
    bdea:	0d c0       	rjmp	.+26     	; 0xbe06 <__udivmodsi4_ep>

0000bdec <__udivmodsi4_loop>:
    bdec:	aa 1f       	adc	r26, r26
    bdee:	bb 1f       	adc	r27, r27
    bdf0:	ee 1f       	adc	r30, r30
    bdf2:	ff 1f       	adc	r31, r31
    bdf4:	a2 17       	cp	r26, r18
    bdf6:	b3 07       	cpc	r27, r19
    bdf8:	e4 07       	cpc	r30, r20
    bdfa:	f5 07       	cpc	r31, r21
    bdfc:	20 f0       	brcs	.+8      	; 0xbe06 <__udivmodsi4_ep>
    bdfe:	a2 1b       	sub	r26, r18
    be00:	b3 0b       	sbc	r27, r19
    be02:	e4 0b       	sbc	r30, r20
    be04:	f5 0b       	sbc	r31, r21

0000be06 <__udivmodsi4_ep>:
    be06:	66 1f       	adc	r22, r22
    be08:	77 1f       	adc	r23, r23
    be0a:	88 1f       	adc	r24, r24
    be0c:	99 1f       	adc	r25, r25
    be0e:	1a 94       	dec	r1
    be10:	69 f7       	brne	.-38     	; 0xbdec <__udivmodsi4_loop>
    be12:	60 95       	com	r22
    be14:	70 95       	com	r23
    be16:	80 95       	com	r24
    be18:	90 95       	com	r25
    be1a:	9b 01       	movw	r18, r22
    be1c:	ac 01       	movw	r20, r24
    be1e:	bd 01       	movw	r22, r26
    be20:	cf 01       	movw	r24, r30
    be22:	08 95       	ret

0000be24 <__prologue_saves__>:
    be24:	2f 92       	push	r2
    be26:	3f 92       	push	r3
    be28:	4f 92       	push	r4
    be2a:	5f 92       	push	r5
    be2c:	6f 92       	push	r6
    be2e:	7f 92       	push	r7
    be30:	8f 92       	push	r8
    be32:	9f 92       	push	r9
    be34:	af 92       	push	r10
    be36:	bf 92       	push	r11
    be38:	cf 92       	push	r12
    be3a:	df 92       	push	r13
    be3c:	ef 92       	push	r14
    be3e:	ff 92       	push	r15
    be40:	0f 93       	push	r16
    be42:	1f 93       	push	r17
    be44:	cf 93       	push	r28
    be46:	df 93       	push	r29
    be48:	cd b7       	in	r28, 0x3d	; 61
    be4a:	de b7       	in	r29, 0x3e	; 62
    be4c:	ca 1b       	sub	r28, r26
    be4e:	db 0b       	sbc	r29, r27
    be50:	0f b6       	in	r0, 0x3f	; 63
    be52:	f8 94       	cli
    be54:	de bf       	out	0x3e, r29	; 62
    be56:	0f be       	out	0x3f, r0	; 63
    be58:	cd bf       	out	0x3d, r28	; 61
    be5a:	19 94       	eijmp

0000be5c <__epilogue_restores__>:
    be5c:	2a 88       	ldd	r2, Y+18	; 0x12
    be5e:	39 88       	ldd	r3, Y+17	; 0x11
    be60:	48 88       	ldd	r4, Y+16	; 0x10
    be62:	5f 84       	ldd	r5, Y+15	; 0x0f
    be64:	6e 84       	ldd	r6, Y+14	; 0x0e
    be66:	7d 84       	ldd	r7, Y+13	; 0x0d
    be68:	8c 84       	ldd	r8, Y+12	; 0x0c
    be6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    be6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    be6e:	b9 84       	ldd	r11, Y+9	; 0x09
    be70:	c8 84       	ldd	r12, Y+8	; 0x08
    be72:	df 80       	ldd	r13, Y+7	; 0x07
    be74:	ee 80       	ldd	r14, Y+6	; 0x06
    be76:	fd 80       	ldd	r15, Y+5	; 0x05
    be78:	0c 81       	ldd	r16, Y+4	; 0x04
    be7a:	1b 81       	ldd	r17, Y+3	; 0x03
    be7c:	aa 81       	ldd	r26, Y+2	; 0x02
    be7e:	b9 81       	ldd	r27, Y+1	; 0x01
    be80:	ce 0f       	add	r28, r30
    be82:	d1 1d       	adc	r29, r1
    be84:	0f b6       	in	r0, 0x3f	; 63
    be86:	f8 94       	cli
    be88:	de bf       	out	0x3e, r29	; 62
    be8a:	0f be       	out	0x3f, r0	; 63
    be8c:	cd bf       	out	0x3d, r28	; 61
    be8e:	ed 01       	movw	r28, r26
    be90:	08 95       	ret

0000be92 <strtod>:
    be92:	8f 92       	push	r8
    be94:	9f 92       	push	r9
    be96:	af 92       	push	r10
    be98:	bf 92       	push	r11
    be9a:	cf 92       	push	r12
    be9c:	df 92       	push	r13
    be9e:	ef 92       	push	r14
    bea0:	ff 92       	push	r15
    bea2:	0f 93       	push	r16
    bea4:	1f 93       	push	r17
    bea6:	cf 93       	push	r28
    bea8:	df 93       	push	r29
    beaa:	ec 01       	movw	r28, r24
    beac:	5b 01       	movw	r10, r22
    beae:	61 15       	cp	r22, r1
    beb0:	71 05       	cpc	r23, r1
    beb2:	19 f0       	breq	.+6      	; 0xbeba <strtod+0x28>
    beb4:	fb 01       	movw	r30, r22
    beb6:	80 83       	st	Z, r24
    beb8:	91 83       	std	Z+1, r25	; 0x01
    beba:	f9 90       	ld	r15, Y+
    bebc:	8f 2d       	mov	r24, r15
    bebe:	90 e0       	ldi	r25, 0x00	; 0
    bec0:	0e 94 ad 61 	call	0xc35a	; 0xc35a <isspace>
    bec4:	89 2b       	or	r24, r25
    bec6:	c9 f7       	brne	.-14     	; 0xbeba <strtod+0x28>
    bec8:	fd e2       	ldi	r31, 0x2D	; 45
    beca:	ff 16       	cp	r15, r31
    becc:	21 f4       	brne	.+8      	; 0xbed6 <strtod+0x44>
    bece:	f9 90       	ld	r15, Y+
    bed0:	ee 24       	eor	r14, r14
    bed2:	e3 94       	inc	r14
    bed4:	05 c0       	rjmp	.+10     	; 0xbee0 <strtod+0x4e>
    bed6:	2b e2       	ldi	r18, 0x2B	; 43
    bed8:	f2 16       	cp	r15, r18
    beda:	09 f4       	brne	.+2      	; 0xbede <strtod+0x4c>
    bedc:	f9 90       	ld	r15, Y+
    bede:	ee 24       	eor	r14, r14
    bee0:	8e 01       	movw	r16, r28
    bee2:	01 50       	subi	r16, 0x01	; 1
    bee4:	10 40       	sbci	r17, 0x00	; 0
    bee6:	c8 01       	movw	r24, r16
    bee8:	66 e0       	ldi	r22, 0x06	; 6
    beea:	7e e1       	ldi	r23, 0x1E	; 30
    beec:	43 e0       	ldi	r20, 0x03	; 3
    beee:	50 e0       	ldi	r21, 0x00	; 0
    bef0:	0e 94 b5 61 	call	0xc36a	; 0xc36a <strncasecmp_P>
    bef4:	89 2b       	or	r24, r25
    bef6:	01 f5       	brne	.+64     	; 0xbf38 <strtod+0xa6>
    bef8:	8e 01       	movw	r16, r28
    befa:	0e 5f       	subi	r16, 0xFE	; 254
    befc:	1f 4f       	sbci	r17, 0xFF	; 255
    befe:	c8 01       	movw	r24, r16
    bf00:	69 e0       	ldi	r22, 0x09	; 9
    bf02:	7e e1       	ldi	r23, 0x1E	; 30
    bf04:	45 e0       	ldi	r20, 0x05	; 5
    bf06:	50 e0       	ldi	r21, 0x00	; 0
    bf08:	0e 94 b5 61 	call	0xc36a	; 0xc36a <strncasecmp_P>
    bf0c:	89 2b       	or	r24, r25
    bf0e:	19 f4       	brne	.+6      	; 0xbf16 <strtod+0x84>
    bf10:	8e 01       	movw	r16, r28
    bf12:	09 5f       	subi	r16, 0xF9	; 249
    bf14:	1f 4f       	sbci	r17, 0xFF	; 255
    bf16:	a1 14       	cp	r10, r1
    bf18:	b1 04       	cpc	r11, r1
    bf1a:	19 f0       	breq	.+6      	; 0xbf22 <strtod+0x90>
    bf1c:	f5 01       	movw	r30, r10
    bf1e:	00 83       	st	Z, r16
    bf20:	11 83       	std	Z+1, r17	; 0x01
    bf22:	e0 fc       	sbrc	r14, 0
    bf24:	04 c0       	rjmp	.+8      	; 0xbf2e <strtod+0x9c>
    bf26:	70 e0       	ldi	r23, 0x00	; 0
    bf28:	90 e0       	ldi	r25, 0x00	; 0
    bf2a:	80 e8       	ldi	r24, 0x80	; 128
    bf2c:	14 c0       	rjmp	.+40     	; 0xbf56 <strtod+0xc4>
    bf2e:	70 e0       	ldi	r23, 0x00	; 0
    bf30:	90 e0       	ldi	r25, 0x00	; 0
    bf32:	80 e8       	ldi	r24, 0x80	; 128
    bf34:	6f ef       	ldi	r22, 0xFF	; 255
    bf36:	08 c1       	rjmp	.+528    	; 0xc148 <strtod+0x2b6>
    bf38:	c8 01       	movw	r24, r16
    bf3a:	6e e0       	ldi	r22, 0x0E	; 14
    bf3c:	7e e1       	ldi	r23, 0x1E	; 30
    bf3e:	43 e0       	ldi	r20, 0x03	; 3
    bf40:	50 e0       	ldi	r21, 0x00	; 0
    bf42:	0e 94 b5 61 	call	0xc36a	; 0xc36a <strncasecmp_P>
    bf46:	89 2b       	or	r24, r25
    bf48:	69 f4       	brne	.+26     	; 0xbf64 <strtod+0xd2>
    bf4a:	a1 14       	cp	r10, r1
    bf4c:	b1 04       	cpc	r11, r1
    bf4e:	29 f4       	brne	.+10     	; 0xbf5a <strtod+0xc8>
    bf50:	70 e0       	ldi	r23, 0x00	; 0
    bf52:	90 e0       	ldi	r25, 0x00	; 0
    bf54:	80 ec       	ldi	r24, 0xC0	; 192
    bf56:	6f e7       	ldi	r22, 0x7F	; 127
    bf58:	f7 c0       	rjmp	.+494    	; 0xc148 <strtod+0x2b6>
    bf5a:	22 96       	adiw	r28, 0x02	; 2
    bf5c:	f5 01       	movw	r30, r10
    bf5e:	c0 83       	st	Z, r28
    bf60:	d1 83       	std	Z+1, r29	; 0x01
    bf62:	f6 cf       	rjmp	.-20     	; 0xbf50 <strtod+0xbe>
    bf64:	88 24       	eor	r8, r8
    bf66:	99 24       	eor	r9, r9
    bf68:	40 e0       	ldi	r20, 0x00	; 0
    bf6a:	50 e0       	ldi	r21, 0x00	; 0
    bf6c:	60 e0       	ldi	r22, 0x00	; 0
    bf6e:	70 e0       	ldi	r23, 0x00	; 0
    bf70:	ef 2d       	mov	r30, r15
    bf72:	e0 53       	subi	r30, 0x30	; 48
    bf74:	ea 30       	cpi	r30, 0x0A	; 10
    bf76:	a0 f5       	brcc	.+104    	; 0xbfe0 <strtod+0x14e>
    bf78:	f2 e0       	ldi	r31, 0x02	; 2
    bf7a:	ef 2a       	or	r14, r31
    bf7c:	8e 2d       	mov	r24, r14
    bf7e:	90 e0       	ldi	r25, 0x00	; 0
    bf80:	9c 01       	movw	r18, r24
    bf82:	28 70       	andi	r18, 0x08	; 8
    bf84:	30 70       	andi	r19, 0x00	; 0
    bf86:	e2 fe       	sbrs	r14, 2
    bf88:	06 c0       	rjmp	.+12     	; 0xbf96 <strtod+0x104>
    bf8a:	23 2b       	or	r18, r19
    bf8c:	79 f5       	brne	.+94     	; 0xbfec <strtod+0x15a>
    bf8e:	08 94       	sec
    bf90:	81 1c       	adc	r8, r1
    bf92:	91 1c       	adc	r9, r1
    bf94:	2b c0       	rjmp	.+86     	; 0xbfec <strtod+0x15a>
    bf96:	23 2b       	or	r18, r19
    bf98:	19 f0       	breq	.+6      	; 0xbfa0 <strtod+0x10e>
    bf9a:	08 94       	sec
    bf9c:	81 08       	sbc	r8, r1
    bf9e:	91 08       	sbc	r9, r1
    bfa0:	db 01       	movw	r26, r22
    bfa2:	ca 01       	movw	r24, r20
    bfa4:	12 e0       	ldi	r17, 0x02	; 2
    bfa6:	88 0f       	add	r24, r24
    bfa8:	99 1f       	adc	r25, r25
    bfaa:	aa 1f       	adc	r26, r26
    bfac:	bb 1f       	adc	r27, r27
    bfae:	1a 95       	dec	r17
    bfb0:	d1 f7       	brne	.-12     	; 0xbfa6 <strtod+0x114>
    bfb2:	48 0f       	add	r20, r24
    bfb4:	59 1f       	adc	r21, r25
    bfb6:	6a 1f       	adc	r22, r26
    bfb8:	7b 1f       	adc	r23, r27
    bfba:	44 0f       	add	r20, r20
    bfbc:	55 1f       	adc	r21, r21
    bfbe:	66 1f       	adc	r22, r22
    bfc0:	77 1f       	adc	r23, r23
    bfc2:	4e 0f       	add	r20, r30
    bfc4:	51 1d       	adc	r21, r1
    bfc6:	61 1d       	adc	r22, r1
    bfc8:	71 1d       	adc	r23, r1
    bfca:	48 39       	cpi	r20, 0x98	; 152
    bfcc:	29 e9       	ldi	r18, 0x99	; 153
    bfce:	52 07       	cpc	r21, r18
    bfd0:	29 e9       	ldi	r18, 0x99	; 153
    bfd2:	62 07       	cpc	r22, r18
    bfd4:	29 e1       	ldi	r18, 0x19	; 25
    bfd6:	72 07       	cpc	r23, r18
    bfd8:	48 f0       	brcs	.+18     	; 0xbfec <strtod+0x15a>
    bfda:	84 e0       	ldi	r24, 0x04	; 4
    bfdc:	e8 2a       	or	r14, r24
    bfde:	06 c0       	rjmp	.+12     	; 0xbfec <strtod+0x15a>
    bfe0:	ee 3f       	cpi	r30, 0xFE	; 254
    bfe2:	31 f4       	brne	.+12     	; 0xbff0 <strtod+0x15e>
    bfe4:	e3 fc       	sbrc	r14, 3
    bfe6:	39 c0       	rjmp	.+114    	; 0xc05a <strtod+0x1c8>
    bfe8:	98 e0       	ldi	r25, 0x08	; 8
    bfea:	e9 2a       	or	r14, r25
    bfec:	f9 90       	ld	r15, Y+
    bfee:	c0 cf       	rjmp	.-128    	; 0xbf70 <strtod+0xde>
    bff0:	e5 33       	cpi	r30, 0x35	; 53
    bff2:	11 f0       	breq	.+4      	; 0xbff8 <strtod+0x166>
    bff4:	e5 31       	cpi	r30, 0x15	; 21
    bff6:	89 f5       	brne	.+98     	; 0xc05a <strtod+0x1c8>
    bff8:	29 91       	ld	r18, Y+
    bffa:	2d 32       	cpi	r18, 0x2D	; 45
    bffc:	19 f4       	brne	.+6      	; 0xc004 <strtod+0x172>
    bffe:	e0 e1       	ldi	r30, 0x10	; 16
    c000:	ee 2a       	or	r14, r30
    c002:	05 c0       	rjmp	.+10     	; 0xc00e <strtod+0x17c>
    c004:	2b 32       	cpi	r18, 0x2B	; 43
    c006:	19 f0       	breq	.+6      	; 0xc00e <strtod+0x17c>
    c008:	81 e0       	ldi	r24, 0x01	; 1
    c00a:	90 e0       	ldi	r25, 0x00	; 0
    c00c:	03 c0       	rjmp	.+6      	; 0xc014 <strtod+0x182>
    c00e:	29 91       	ld	r18, Y+
    c010:	82 e0       	ldi	r24, 0x02	; 2
    c012:	90 e0       	ldi	r25, 0x00	; 0
    c014:	e2 2f       	mov	r30, r18
    c016:	e0 53       	subi	r30, 0x30	; 48
    c018:	ea 30       	cpi	r30, 0x0A	; 10
    c01a:	18 f0       	brcs	.+6      	; 0xc022 <strtod+0x190>
    c01c:	c8 1b       	sub	r28, r24
    c01e:	d9 0b       	sbc	r29, r25
    c020:	1c c0       	rjmp	.+56     	; 0xc05a <strtod+0x1c8>
    c022:	20 e0       	ldi	r18, 0x00	; 0
    c024:	30 e0       	ldi	r19, 0x00	; 0
    c026:	fc e0       	ldi	r31, 0x0C	; 12
    c028:	20 38       	cpi	r18, 0x80	; 128
    c02a:	3f 07       	cpc	r19, r31
    c02c:	5c f4       	brge	.+22     	; 0xc044 <strtod+0x1b2>
    c02e:	c9 01       	movw	r24, r18
    c030:	88 0f       	add	r24, r24
    c032:	99 1f       	adc	r25, r25
    c034:	88 0f       	add	r24, r24
    c036:	99 1f       	adc	r25, r25
    c038:	28 0f       	add	r18, r24
    c03a:	39 1f       	adc	r19, r25
    c03c:	22 0f       	add	r18, r18
    c03e:	33 1f       	adc	r19, r19
    c040:	2e 0f       	add	r18, r30
    c042:	31 1d       	adc	r19, r1
    c044:	e9 91       	ld	r30, Y+
    c046:	e0 53       	subi	r30, 0x30	; 48
    c048:	ea 30       	cpi	r30, 0x0A	; 10
    c04a:	68 f3       	brcs	.-38     	; 0xc026 <strtod+0x194>
    c04c:	e4 fe       	sbrs	r14, 4
    c04e:	03 c0       	rjmp	.+6      	; 0xc056 <strtod+0x1c4>
    c050:	30 95       	com	r19
    c052:	21 95       	neg	r18
    c054:	3f 4f       	sbci	r19, 0xFF	; 255
    c056:	82 0e       	add	r8, r18
    c058:	93 1e       	adc	r9, r19
    c05a:	ce 2c       	mov	r12, r14
    c05c:	dd 24       	eor	r13, r13
    c05e:	e1 fe       	sbrs	r14, 1
    c060:	07 c0       	rjmp	.+14     	; 0xc070 <strtod+0x1de>
    c062:	a1 14       	cp	r10, r1
    c064:	b1 04       	cpc	r11, r1
    c066:	21 f0       	breq	.+8      	; 0xc070 <strtod+0x1de>
    c068:	21 97       	sbiw	r28, 0x01	; 1
    c06a:	f5 01       	movw	r30, r10
    c06c:	c0 83       	st	Z, r28
    c06e:	d1 83       	std	Z+1, r29	; 0x01
    c070:	cb 01       	movw	r24, r22
    c072:	ba 01       	movw	r22, r20
    c074:	0e 94 de 5b 	call	0xb7bc	; 0xb7bc <__floatunsisf>
    c078:	7b 01       	movw	r14, r22
    c07a:	8c 01       	movw	r16, r24
    c07c:	f3 e0       	ldi	r31, 0x03	; 3
    c07e:	cf 22       	and	r12, r31
    c080:	dd 24       	eor	r13, r13
    c082:	23 e0       	ldi	r18, 0x03	; 3
    c084:	c2 16       	cp	r12, r18
    c086:	d1 04       	cpc	r13, r1
    c088:	21 f4       	brne	.+8      	; 0xc092 <strtod+0x200>
    c08a:	17 fb       	bst	r17, 7
    c08c:	10 95       	com	r17
    c08e:	17 f9       	bld	r17, 7
    c090:	10 95       	com	r17
    c092:	57 01       	movw	r10, r14
    c094:	68 01       	movw	r12, r16
    c096:	c8 01       	movw	r24, r16
    c098:	b7 01       	movw	r22, r14
    c09a:	20 e0       	ldi	r18, 0x00	; 0
    c09c:	30 e0       	ldi	r19, 0x00	; 0
    c09e:	40 e0       	ldi	r20, 0x00	; 0
    c0a0:	50 e0       	ldi	r21, 0x00	; 0
    c0a2:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <__cmpsf2>
    c0a6:	88 23       	and	r24, r24
    c0a8:	09 f4       	brne	.+2      	; 0xc0ac <strtod+0x21a>
    c0aa:	4a c0       	rjmp	.+148    	; 0xc140 <strtod+0x2ae>
    c0ac:	97 fe       	sbrs	r9, 7
    c0ae:	0d c0       	rjmp	.+26     	; 0xc0ca <strtod+0x238>
    c0b0:	25 e2       	ldi	r18, 0x25	; 37
    c0b2:	e2 2e       	mov	r14, r18
    c0b4:	2e e1       	ldi	r18, 0x1E	; 30
    c0b6:	f2 2e       	mov	r15, r18
    c0b8:	90 94       	com	r9
    c0ba:	81 94       	neg	r8
    c0bc:	91 08       	sbc	r9, r1
    c0be:	93 94       	inc	r9
    c0c0:	c0 e2       	ldi	r28, 0x20	; 32
    c0c2:	d0 e0       	ldi	r29, 0x00	; 0
    c0c4:	00 e0       	ldi	r16, 0x00	; 0
    c0c6:	10 e0       	ldi	r17, 0x00	; 0
    c0c8:	12 c0       	rjmp	.+36     	; 0xc0ee <strtod+0x25c>
    c0ca:	9d e3       	ldi	r25, 0x3D	; 61
    c0cc:	e9 2e       	mov	r14, r25
    c0ce:	9e e1       	ldi	r25, 0x1E	; 30
    c0d0:	f9 2e       	mov	r15, r25
    c0d2:	f6 cf       	rjmp	.-20     	; 0xc0c0 <strtod+0x22e>
    c0d4:	f7 01       	movw	r30, r14
    c0d6:	25 91       	lpm	r18, Z+
    c0d8:	35 91       	lpm	r19, Z+
    c0da:	45 91       	lpm	r20, Z+
    c0dc:	54 91       	lpm	r21, Z+
    c0de:	c6 01       	movw	r24, r12
    c0e0:	b5 01       	movw	r22, r10
    c0e2:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <__mulsf3>
    c0e6:	5b 01       	movw	r10, r22
    c0e8:	6c 01       	movw	r12, r24
    c0ea:	8c 1a       	sub	r8, r28
    c0ec:	9d 0a       	sbc	r9, r29
    c0ee:	8c 16       	cp	r8, r28
    c0f0:	9d 06       	cpc	r9, r29
    c0f2:	84 f7       	brge	.-32     	; 0xc0d4 <strtod+0x242>
    c0f4:	d5 95       	asr	r29
    c0f6:	c7 95       	ror	r28
    c0f8:	0f 5f       	subi	r16, 0xFF	; 255
    c0fa:	1f 4f       	sbci	r17, 0xFF	; 255
    c0fc:	06 30       	cpi	r16, 0x06	; 6
    c0fe:	11 05       	cpc	r17, r1
    c100:	29 f0       	breq	.+10     	; 0xc10c <strtod+0x27a>
    c102:	8c ef       	ldi	r24, 0xFC	; 252
    c104:	9f ef       	ldi	r25, 0xFF	; 255
    c106:	e8 0e       	add	r14, r24
    c108:	f9 1e       	adc	r15, r25
    c10a:	f1 cf       	rjmp	.-30     	; 0xc0ee <strtod+0x25c>
    c10c:	c5 01       	movw	r24, r10
    c10e:	d6 01       	movw	r26, r12
    c110:	7c 01       	movw	r14, r24
    c112:	8d 01       	movw	r16, r26
    c114:	8c 2d       	mov	r24, r12
    c116:	88 0f       	add	r24, r24
    c118:	8d 2d       	mov	r24, r13
    c11a:	88 1f       	adc	r24, r24
    c11c:	8f 3f       	cpi	r24, 0xFF	; 255
    c11e:	51 f0       	breq	.+20     	; 0xc134 <strtod+0x2a2>
    c120:	c6 01       	movw	r24, r12
    c122:	b5 01       	movw	r22, r10
    c124:	20 e0       	ldi	r18, 0x00	; 0
    c126:	30 e0       	ldi	r19, 0x00	; 0
    c128:	40 e0       	ldi	r20, 0x00	; 0
    c12a:	50 e0       	ldi	r21, 0x00	; 0
    c12c:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <__cmpsf2>
    c130:	88 23       	and	r24, r24
    c132:	31 f4       	brne	.+12     	; 0xc140 <strtod+0x2ae>
    c134:	82 e2       	ldi	r24, 0x22	; 34
    c136:	90 e0       	ldi	r25, 0x00	; 0
    c138:	80 93 48 25 	sts	0x2548, r24
    c13c:	90 93 49 25 	sts	0x2549, r25
    c140:	7e 2d       	mov	r23, r14
    c142:	9f 2d       	mov	r25, r15
    c144:	80 2f       	mov	r24, r16
    c146:	61 2f       	mov	r22, r17
    c148:	27 2f       	mov	r18, r23
    c14a:	39 2f       	mov	r19, r25
    c14c:	48 2f       	mov	r20, r24
    c14e:	56 2f       	mov	r21, r22
    c150:	b9 01       	movw	r22, r18
    c152:	ca 01       	movw	r24, r20
    c154:	df 91       	pop	r29
    c156:	cf 91       	pop	r28
    c158:	1f 91       	pop	r17
    c15a:	0f 91       	pop	r16
    c15c:	ff 90       	pop	r15
    c15e:	ef 90       	pop	r14
    c160:	df 90       	pop	r13
    c162:	cf 90       	pop	r12
    c164:	bf 90       	pop	r11
    c166:	af 90       	pop	r10
    c168:	9f 90       	pop	r9
    c16a:	8f 90       	pop	r8
    c16c:	08 95       	ret

0000c16e <atoi>:
    c16e:	fc 01       	movw	r30, r24
    c170:	88 27       	eor	r24, r24
    c172:	99 27       	eor	r25, r25
    c174:	e8 94       	clt
    c176:	21 91       	ld	r18, Z+
    c178:	20 32       	cpi	r18, 0x20	; 32
    c17a:	e9 f3       	breq	.-6      	; 0xc176 <atoi+0x8>
    c17c:	29 30       	cpi	r18, 0x09	; 9
    c17e:	10 f0       	brcs	.+4      	; 0xc184 <atoi+0x16>
    c180:	2e 30       	cpi	r18, 0x0E	; 14
    c182:	c8 f3       	brcs	.-14     	; 0xc176 <atoi+0x8>
    c184:	2b 32       	cpi	r18, 0x2B	; 43
    c186:	41 f0       	breq	.+16     	; 0xc198 <atoi+0x2a>
    c188:	2d 32       	cpi	r18, 0x2D	; 45
    c18a:	39 f4       	brne	.+14     	; 0xc19a <atoi+0x2c>
    c18c:	68 94       	set
    c18e:	04 c0       	rjmp	.+8      	; 0xc198 <atoi+0x2a>
    c190:	0e 94 f3 61 	call	0xc3e6	; 0xc3e6 <__mulhi_const_10>
    c194:	82 0f       	add	r24, r18
    c196:	91 1d       	adc	r25, r1
    c198:	21 91       	ld	r18, Z+
    c19a:	20 53       	subi	r18, 0x30	; 48
    c19c:	2a 30       	cpi	r18, 0x0A	; 10
    c19e:	c0 f3       	brcs	.-16     	; 0xc190 <atoi+0x22>
    c1a0:	1e f4       	brtc	.+6      	; 0xc1a8 <atoi+0x3a>
    c1a2:	90 95       	com	r25
    c1a4:	81 95       	neg	r24
    c1a6:	9f 4f       	sbci	r25, 0xFF	; 255
    c1a8:	08 95       	ret

0000c1aa <__ftoa_engine>:
    c1aa:	28 30       	cpi	r18, 0x08	; 8
    c1ac:	08 f0       	brcs	.+2      	; 0xc1b0 <__ftoa_engine+0x6>
    c1ae:	27 e0       	ldi	r18, 0x07	; 7
    c1b0:	33 27       	eor	r19, r19
    c1b2:	da 01       	movw	r26, r20
    c1b4:	99 0f       	add	r25, r25
    c1b6:	31 1d       	adc	r19, r1
    c1b8:	87 fd       	sbrc	r24, 7
    c1ba:	91 60       	ori	r25, 0x01	; 1
    c1bc:	00 96       	adiw	r24, 0x00	; 0
    c1be:	61 05       	cpc	r22, r1
    c1c0:	71 05       	cpc	r23, r1
    c1c2:	39 f4       	brne	.+14     	; 0xc1d2 <__ftoa_engine+0x28>
    c1c4:	32 60       	ori	r19, 0x02	; 2
    c1c6:	2e 5f       	subi	r18, 0xFE	; 254
    c1c8:	3d 93       	st	X+, r19
    c1ca:	30 e3       	ldi	r19, 0x30	; 48
    c1cc:	2a 95       	dec	r18
    c1ce:	e1 f7       	brne	.-8      	; 0xc1c8 <__ftoa_engine+0x1e>
    c1d0:	08 95       	ret
    c1d2:	9f 3f       	cpi	r25, 0xFF	; 255
    c1d4:	30 f0       	brcs	.+12     	; 0xc1e2 <__ftoa_engine+0x38>
    c1d6:	80 38       	cpi	r24, 0x80	; 128
    c1d8:	71 05       	cpc	r23, r1
    c1da:	61 05       	cpc	r22, r1
    c1dc:	09 f0       	breq	.+2      	; 0xc1e0 <__ftoa_engine+0x36>
    c1de:	3c 5f       	subi	r19, 0xFC	; 252
    c1e0:	3c 5f       	subi	r19, 0xFC	; 252
    c1e2:	3d 93       	st	X+, r19
    c1e4:	91 30       	cpi	r25, 0x01	; 1
    c1e6:	08 f0       	brcs	.+2      	; 0xc1ea <__ftoa_engine+0x40>
    c1e8:	80 68       	ori	r24, 0x80	; 128
    c1ea:	91 1d       	adc	r25, r1
    c1ec:	df 93       	push	r29
    c1ee:	cf 93       	push	r28
    c1f0:	1f 93       	push	r17
    c1f2:	0f 93       	push	r16
    c1f4:	ff 92       	push	r15
    c1f6:	ef 92       	push	r14
    c1f8:	19 2f       	mov	r17, r25
    c1fa:	98 7f       	andi	r25, 0xF8	; 248
    c1fc:	96 95       	lsr	r25
    c1fe:	e9 2f       	mov	r30, r25
    c200:	96 95       	lsr	r25
    c202:	96 95       	lsr	r25
    c204:	e9 0f       	add	r30, r25
    c206:	ff 27       	eor	r31, r31
    c208:	e5 56       	subi	r30, 0x65	; 101
    c20a:	f1 4e       	sbci	r31, 0xE1	; 225
    c20c:	99 27       	eor	r25, r25
    c20e:	33 27       	eor	r19, r19
    c210:	ee 24       	eor	r14, r14
    c212:	ff 24       	eor	r15, r15
    c214:	a7 01       	movw	r20, r14
    c216:	e7 01       	movw	r28, r14
    c218:	05 90       	lpm	r0, Z+
    c21a:	08 94       	sec
    c21c:	07 94       	ror	r0
    c21e:	28 f4       	brcc	.+10     	; 0xc22a <__ftoa_engine+0x80>
    c220:	36 0f       	add	r19, r22
    c222:	e7 1e       	adc	r14, r23
    c224:	f8 1e       	adc	r15, r24
    c226:	49 1f       	adc	r20, r25
    c228:	51 1d       	adc	r21, r1
    c22a:	66 0f       	add	r22, r22
    c22c:	77 1f       	adc	r23, r23
    c22e:	88 1f       	adc	r24, r24
    c230:	99 1f       	adc	r25, r25
    c232:	06 94       	lsr	r0
    c234:	a1 f7       	brne	.-24     	; 0xc21e <__ftoa_engine+0x74>
    c236:	05 90       	lpm	r0, Z+
    c238:	07 94       	ror	r0
    c23a:	28 f4       	brcc	.+10     	; 0xc246 <__ftoa_engine+0x9c>
    c23c:	e7 0e       	add	r14, r23
    c23e:	f8 1e       	adc	r15, r24
    c240:	49 1f       	adc	r20, r25
    c242:	56 1f       	adc	r21, r22
    c244:	c1 1d       	adc	r28, r1
    c246:	77 0f       	add	r23, r23
    c248:	88 1f       	adc	r24, r24
    c24a:	99 1f       	adc	r25, r25
    c24c:	66 1f       	adc	r22, r22
    c24e:	06 94       	lsr	r0
    c250:	a1 f7       	brne	.-24     	; 0xc23a <__ftoa_engine+0x90>
    c252:	05 90       	lpm	r0, Z+
    c254:	07 94       	ror	r0
    c256:	28 f4       	brcc	.+10     	; 0xc262 <__ftoa_engine+0xb8>
    c258:	f8 0e       	add	r15, r24
    c25a:	49 1f       	adc	r20, r25
    c25c:	56 1f       	adc	r21, r22
    c25e:	c7 1f       	adc	r28, r23
    c260:	d1 1d       	adc	r29, r1
    c262:	88 0f       	add	r24, r24
    c264:	99 1f       	adc	r25, r25
    c266:	66 1f       	adc	r22, r22
    c268:	77 1f       	adc	r23, r23
    c26a:	06 94       	lsr	r0
    c26c:	a1 f7       	brne	.-24     	; 0xc256 <__ftoa_engine+0xac>
    c26e:	05 90       	lpm	r0, Z+
    c270:	07 94       	ror	r0
    c272:	20 f4       	brcc	.+8      	; 0xc27c <__ftoa_engine+0xd2>
    c274:	49 0f       	add	r20, r25
    c276:	56 1f       	adc	r21, r22
    c278:	c7 1f       	adc	r28, r23
    c27a:	d8 1f       	adc	r29, r24
    c27c:	99 0f       	add	r25, r25
    c27e:	66 1f       	adc	r22, r22
    c280:	77 1f       	adc	r23, r23
    c282:	88 1f       	adc	r24, r24
    c284:	06 94       	lsr	r0
    c286:	a9 f7       	brne	.-22     	; 0xc272 <__ftoa_engine+0xc8>
    c288:	84 91       	lpm	r24, Z+
    c28a:	10 95       	com	r17
    c28c:	17 70       	andi	r17, 0x07	; 7
    c28e:	41 f0       	breq	.+16     	; 0xc2a0 <__ftoa_engine+0xf6>
    c290:	d6 95       	lsr	r29
    c292:	c7 95       	ror	r28
    c294:	57 95       	ror	r21
    c296:	47 95       	ror	r20
    c298:	f7 94       	ror	r15
    c29a:	e7 94       	ror	r14
    c29c:	1a 95       	dec	r17
    c29e:	c1 f7       	brne	.-16     	; 0xc290 <__ftoa_engine+0xe6>
    c2a0:	e1 e4       	ldi	r30, 0x41	; 65
    c2a2:	fe e1       	ldi	r31, 0x1E	; 30
    c2a4:	68 94       	set
    c2a6:	15 90       	lpm	r1, Z+
    c2a8:	15 91       	lpm	r17, Z+
    c2aa:	35 91       	lpm	r19, Z+
    c2ac:	65 91       	lpm	r22, Z+
    c2ae:	95 91       	lpm	r25, Z+
    c2b0:	05 90       	lpm	r0, Z+
    c2b2:	7f e2       	ldi	r23, 0x2F	; 47
    c2b4:	73 95       	inc	r23
    c2b6:	e1 18       	sub	r14, r1
    c2b8:	f1 0a       	sbc	r15, r17
    c2ba:	43 0b       	sbc	r20, r19
    c2bc:	56 0b       	sbc	r21, r22
    c2be:	c9 0b       	sbc	r28, r25
    c2c0:	d0 09       	sbc	r29, r0
    c2c2:	c0 f7       	brcc	.-16     	; 0xc2b4 <__ftoa_engine+0x10a>
    c2c4:	e1 0c       	add	r14, r1
    c2c6:	f1 1e       	adc	r15, r17
    c2c8:	43 1f       	adc	r20, r19
    c2ca:	56 1f       	adc	r21, r22
    c2cc:	c9 1f       	adc	r28, r25
    c2ce:	d0 1d       	adc	r29, r0
    c2d0:	7e f4       	brtc	.+30     	; 0xc2f0 <__ftoa_engine+0x146>
    c2d2:	70 33       	cpi	r23, 0x30	; 48
    c2d4:	11 f4       	brne	.+4      	; 0xc2da <__ftoa_engine+0x130>
    c2d6:	8a 95       	dec	r24
    c2d8:	e6 cf       	rjmp	.-52     	; 0xc2a6 <__ftoa_engine+0xfc>
    c2da:	e8 94       	clt
    c2dc:	01 50       	subi	r16, 0x01	; 1
    c2de:	30 f0       	brcs	.+12     	; 0xc2ec <__ftoa_engine+0x142>
    c2e0:	08 0f       	add	r16, r24
    c2e2:	0a f4       	brpl	.+2      	; 0xc2e6 <__ftoa_engine+0x13c>
    c2e4:	00 27       	eor	r16, r16
    c2e6:	02 17       	cp	r16, r18
    c2e8:	08 f4       	brcc	.+2      	; 0xc2ec <__ftoa_engine+0x142>
    c2ea:	20 2f       	mov	r18, r16
    c2ec:	23 95       	inc	r18
    c2ee:	02 2f       	mov	r16, r18
    c2f0:	7a 33       	cpi	r23, 0x3A	; 58
    c2f2:	28 f0       	brcs	.+10     	; 0xc2fe <__ftoa_engine+0x154>
    c2f4:	79 e3       	ldi	r23, 0x39	; 57
    c2f6:	7d 93       	st	X+, r23
    c2f8:	2a 95       	dec	r18
    c2fa:	e9 f7       	brne	.-6      	; 0xc2f6 <__ftoa_engine+0x14c>
    c2fc:	10 c0       	rjmp	.+32     	; 0xc31e <__ftoa_engine+0x174>
    c2fe:	7d 93       	st	X+, r23
    c300:	2a 95       	dec	r18
    c302:	89 f6       	brne	.-94     	; 0xc2a6 <__ftoa_engine+0xfc>
    c304:	06 94       	lsr	r0
    c306:	97 95       	ror	r25
    c308:	67 95       	ror	r22
    c30a:	37 95       	ror	r19
    c30c:	17 95       	ror	r17
    c30e:	17 94       	ror	r1
    c310:	e1 18       	sub	r14, r1
    c312:	f1 0a       	sbc	r15, r17
    c314:	43 0b       	sbc	r20, r19
    c316:	56 0b       	sbc	r21, r22
    c318:	c9 0b       	sbc	r28, r25
    c31a:	d0 09       	sbc	r29, r0
    c31c:	98 f0       	brcs	.+38     	; 0xc344 <__ftoa_engine+0x19a>
    c31e:	23 95       	inc	r18
    c320:	7e 91       	ld	r23, -X
    c322:	73 95       	inc	r23
    c324:	7a 33       	cpi	r23, 0x3A	; 58
    c326:	08 f0       	brcs	.+2      	; 0xc32a <__ftoa_engine+0x180>
    c328:	70 e3       	ldi	r23, 0x30	; 48
    c32a:	7c 93       	st	X, r23
    c32c:	20 13       	cpse	r18, r16
    c32e:	b8 f7       	brcc	.-18     	; 0xc31e <__ftoa_engine+0x174>
    c330:	7e 91       	ld	r23, -X
    c332:	70 61       	ori	r23, 0x10	; 16
    c334:	7d 93       	st	X+, r23
    c336:	30 f0       	brcs	.+12     	; 0xc344 <__ftoa_engine+0x19a>
    c338:	83 95       	inc	r24
    c33a:	71 e3       	ldi	r23, 0x31	; 49
    c33c:	7d 93       	st	X+, r23
    c33e:	70 e3       	ldi	r23, 0x30	; 48
    c340:	2a 95       	dec	r18
    c342:	e1 f7       	brne	.-8      	; 0xc33c <__ftoa_engine+0x192>
    c344:	11 24       	eor	r1, r1
    c346:	ef 90       	pop	r14
    c348:	ff 90       	pop	r15
    c34a:	0f 91       	pop	r16
    c34c:	1f 91       	pop	r17
    c34e:	cf 91       	pop	r28
    c350:	df 91       	pop	r29
    c352:	99 27       	eor	r25, r25
    c354:	87 fd       	sbrc	r24, 7
    c356:	90 95       	com	r25
    c358:	08 95       	ret

0000c35a <isspace>:
    c35a:	91 11       	cpse	r25, r1
    c35c:	31 c1       	rjmp	.+610    	; 0xc5c0 <__ctype_isfalse>
    c35e:	80 32       	cpi	r24, 0x20	; 32
    c360:	19 f0       	breq	.+6      	; 0xc368 <isspace+0xe>
    c362:	89 50       	subi	r24, 0x09	; 9
    c364:	85 50       	subi	r24, 0x05	; 5
    c366:	d0 f7       	brcc	.-12     	; 0xc35c <isspace+0x2>
    c368:	08 95       	ret

0000c36a <strncasecmp_P>:
    c36a:	fb 01       	movw	r30, r22
    c36c:	dc 01       	movw	r26, r24
    c36e:	41 50       	subi	r20, 0x01	; 1
    c370:	50 40       	sbci	r21, 0x00	; 0
    c372:	88 f0       	brcs	.+34     	; 0xc396 <strncasecmp_P+0x2c>
    c374:	8d 91       	ld	r24, X+
    c376:	81 34       	cpi	r24, 0x41	; 65
    c378:	1c f0       	brlt	.+6      	; 0xc380 <strncasecmp_P+0x16>
    c37a:	8b 35       	cpi	r24, 0x5B	; 91
    c37c:	0c f4       	brge	.+2      	; 0xc380 <strncasecmp_P+0x16>
    c37e:	80 5e       	subi	r24, 0xE0	; 224
    c380:	65 91       	lpm	r22, Z+
    c382:	61 34       	cpi	r22, 0x41	; 65
    c384:	1c f0       	brlt	.+6      	; 0xc38c <strncasecmp_P+0x22>
    c386:	6b 35       	cpi	r22, 0x5B	; 91
    c388:	0c f4       	brge	.+2      	; 0xc38c <strncasecmp_P+0x22>
    c38a:	60 5e       	subi	r22, 0xE0	; 224
    c38c:	86 1b       	sub	r24, r22
    c38e:	61 11       	cpse	r22, r1
    c390:	71 f3       	breq	.-36     	; 0xc36e <strncasecmp_P+0x4>
    c392:	99 0b       	sbc	r25, r25
    c394:	08 95       	ret
    c396:	88 1b       	sub	r24, r24
    c398:	fc cf       	rjmp	.-8      	; 0xc392 <strncasecmp_P+0x28>

0000c39a <strnlen_P>:
    c39a:	fc 01       	movw	r30, r24
    c39c:	05 90       	lpm	r0, Z+
    c39e:	61 50       	subi	r22, 0x01	; 1
    c3a0:	70 40       	sbci	r23, 0x00	; 0
    c3a2:	01 10       	cpse	r0, r1
    c3a4:	d8 f7       	brcc	.-10     	; 0xc39c <strnlen_P+0x2>
    c3a6:	80 95       	com	r24
    c3a8:	90 95       	com	r25
    c3aa:	8e 0f       	add	r24, r30
    c3ac:	9f 1f       	adc	r25, r31
    c3ae:	08 95       	ret

0000c3b0 <memcpy>:
    c3b0:	fb 01       	movw	r30, r22
    c3b2:	dc 01       	movw	r26, r24
    c3b4:	02 c0       	rjmp	.+4      	; 0xc3ba <memcpy+0xa>
    c3b6:	01 90       	ld	r0, Z+
    c3b8:	0d 92       	st	X+, r0
    c3ba:	41 50       	subi	r20, 0x01	; 1
    c3bc:	50 40       	sbci	r21, 0x00	; 0
    c3be:	d8 f7       	brcc	.-10     	; 0xc3b6 <memcpy+0x6>
    c3c0:	08 95       	ret

0000c3c2 <memset>:
    c3c2:	dc 01       	movw	r26, r24
    c3c4:	01 c0       	rjmp	.+2      	; 0xc3c8 <memset+0x6>
    c3c6:	6d 93       	st	X+, r22
    c3c8:	41 50       	subi	r20, 0x01	; 1
    c3ca:	50 40       	sbci	r21, 0x00	; 0
    c3cc:	e0 f7       	brcc	.-8      	; 0xc3c6 <memset+0x4>
    c3ce:	08 95       	ret

0000c3d0 <strnlen>:
    c3d0:	fc 01       	movw	r30, r24
    c3d2:	61 50       	subi	r22, 0x01	; 1
    c3d4:	70 40       	sbci	r23, 0x00	; 0
    c3d6:	01 90       	ld	r0, Z+
    c3d8:	01 10       	cpse	r0, r1
    c3da:	d8 f7       	brcc	.-10     	; 0xc3d2 <strnlen+0x2>
    c3dc:	80 95       	com	r24
    c3de:	90 95       	com	r25
    c3e0:	8e 0f       	add	r24, r30
    c3e2:	9f 1f       	adc	r25, r31
    c3e4:	08 95       	ret

0000c3e6 <__mulhi_const_10>:
    c3e6:	7a e0       	ldi	r23, 0x0A	; 10
    c3e8:	97 9f       	mul	r25, r23
    c3ea:	90 2d       	mov	r25, r0
    c3ec:	87 9f       	mul	r24, r23
    c3ee:	80 2d       	mov	r24, r0
    c3f0:	91 0d       	add	r25, r1
    c3f2:	11 24       	eor	r1, r1
    c3f4:	08 95       	ret

0000c3f6 <clearerr>:
    c3f6:	fc 01       	movw	r30, r24
    c3f8:	83 81       	ldd	r24, Z+3	; 0x03
    c3fa:	8f 7c       	andi	r24, 0xCF	; 207
    c3fc:	83 83       	std	Z+3, r24	; 0x03
    c3fe:	08 95       	ret

0000c400 <fgets>:
    c400:	cf 92       	push	r12
    c402:	df 92       	push	r13
    c404:	ef 92       	push	r14
    c406:	ff 92       	push	r15
    c408:	0f 93       	push	r16
    c40a:	1f 93       	push	r17
    c40c:	cf 93       	push	r28
    c40e:	df 93       	push	r29
    c410:	7c 01       	movw	r14, r24
    c412:	6a 01       	movw	r12, r20
    c414:	fa 01       	movw	r30, r20
    c416:	83 81       	ldd	r24, Z+3	; 0x03
    c418:	80 ff       	sbrs	r24, 0
    c41a:	19 c0       	rjmp	.+50     	; 0xc44e <fgets+0x4e>
    c41c:	16 16       	cp	r1, r22
    c41e:	17 06       	cpc	r1, r23
    c420:	b4 f4       	brge	.+44     	; 0xc44e <fgets+0x4e>
    c422:	eb 01       	movw	r28, r22
    c424:	21 97       	sbiw	r28, 0x01	; 1
    c426:	87 01       	movw	r16, r14
    c428:	0d c0       	rjmp	.+26     	; 0xc444 <fgets+0x44>
    c42a:	c6 01       	movw	r24, r12
    c42c:	0e 94 e3 62 	call	0xc5c6	; 0xc5c6 <fgetc>
    c430:	ff ef       	ldi	r31, 0xFF	; 255
    c432:	8f 3f       	cpi	r24, 0xFF	; 255
    c434:	9f 07       	cpc	r25, r31
    c436:	59 f0       	breq	.+22     	; 0xc44e <fgets+0x4e>
    c438:	f8 01       	movw	r30, r16
    c43a:	81 93       	st	Z+, r24
    c43c:	8f 01       	movw	r16, r30
    c43e:	0a 97       	sbiw	r24, 0x0a	; 10
    c440:	19 f0       	breq	.+6      	; 0xc448 <fgets+0x48>
    c442:	21 97       	sbiw	r28, 0x01	; 1
    c444:	20 97       	sbiw	r28, 0x00	; 0
    c446:	89 f7       	brne	.-30     	; 0xc42a <fgets+0x2a>
    c448:	f8 01       	movw	r30, r16
    c44a:	10 82       	st	Z, r1
    c44c:	02 c0       	rjmp	.+4      	; 0xc452 <fgets+0x52>
    c44e:	ee 24       	eor	r14, r14
    c450:	ff 24       	eor	r15, r15
    c452:	c7 01       	movw	r24, r14
    c454:	df 91       	pop	r29
    c456:	cf 91       	pop	r28
    c458:	1f 91       	pop	r17
    c45a:	0f 91       	pop	r16
    c45c:	ff 90       	pop	r15
    c45e:	ef 90       	pop	r14
    c460:	df 90       	pop	r13
    c462:	cf 90       	pop	r12
    c464:	08 95       	ret

0000c466 <fputc>:
    c466:	0f 93       	push	r16
    c468:	1f 93       	push	r17
    c46a:	cf 93       	push	r28
    c46c:	df 93       	push	r29
    c46e:	8c 01       	movw	r16, r24
    c470:	eb 01       	movw	r28, r22
    c472:	8b 81       	ldd	r24, Y+3	; 0x03
    c474:	81 ff       	sbrs	r24, 1
    c476:	1b c0       	rjmp	.+54     	; 0xc4ae <fputc+0x48>
    c478:	82 ff       	sbrs	r24, 2
    c47a:	0d c0       	rjmp	.+26     	; 0xc496 <fputc+0x30>
    c47c:	2e 81       	ldd	r18, Y+6	; 0x06
    c47e:	3f 81       	ldd	r19, Y+7	; 0x07
    c480:	8c 81       	ldd	r24, Y+4	; 0x04
    c482:	9d 81       	ldd	r25, Y+5	; 0x05
    c484:	28 17       	cp	r18, r24
    c486:	39 07       	cpc	r19, r25
    c488:	64 f4       	brge	.+24     	; 0xc4a2 <fputc+0x3c>
    c48a:	e8 81       	ld	r30, Y
    c48c:	f9 81       	ldd	r31, Y+1	; 0x01
    c48e:	01 93       	st	Z+, r16
    c490:	e8 83       	st	Y, r30
    c492:	f9 83       	std	Y+1, r31	; 0x01
    c494:	06 c0       	rjmp	.+12     	; 0xc4a2 <fputc+0x3c>
    c496:	e8 85       	ldd	r30, Y+8	; 0x08
    c498:	f9 85       	ldd	r31, Y+9	; 0x09
    c49a:	80 2f       	mov	r24, r16
    c49c:	19 95       	eicall
    c49e:	89 2b       	or	r24, r25
    c4a0:	31 f4       	brne	.+12     	; 0xc4ae <fputc+0x48>
    c4a2:	8e 81       	ldd	r24, Y+6	; 0x06
    c4a4:	9f 81       	ldd	r25, Y+7	; 0x07
    c4a6:	01 96       	adiw	r24, 0x01	; 1
    c4a8:	8e 83       	std	Y+6, r24	; 0x06
    c4aa:	9f 83       	std	Y+7, r25	; 0x07
    c4ac:	02 c0       	rjmp	.+4      	; 0xc4b2 <fputc+0x4c>
    c4ae:	0f ef       	ldi	r16, 0xFF	; 255
    c4b0:	1f ef       	ldi	r17, 0xFF	; 255
    c4b2:	c8 01       	movw	r24, r16
    c4b4:	df 91       	pop	r29
    c4b6:	cf 91       	pop	r28
    c4b8:	1f 91       	pop	r17
    c4ba:	0f 91       	pop	r16
    c4bc:	08 95       	ret

0000c4be <printf_P>:
    c4be:	df 93       	push	r29
    c4c0:	cf 93       	push	r28
    c4c2:	cd b7       	in	r28, 0x3d	; 61
    c4c4:	de b7       	in	r29, 0x3e	; 62
    c4c6:	fe 01       	movw	r30, r28
    c4c8:	36 96       	adiw	r30, 0x06	; 6
    c4ca:	61 91       	ld	r22, Z+
    c4cc:	71 91       	ld	r23, Z+
    c4ce:	a0 91 44 25 	lds	r26, 0x2544
    c4d2:	b0 91 45 25 	lds	r27, 0x2545
    c4d6:	13 96       	adiw	r26, 0x03	; 3
    c4d8:	8c 91       	ld	r24, X
    c4da:	13 97       	sbiw	r26, 0x03	; 3
    c4dc:	88 60       	ori	r24, 0x08	; 8
    c4de:	13 96       	adiw	r26, 0x03	; 3
    c4e0:	8c 93       	st	X, r24
    c4e2:	80 91 44 25 	lds	r24, 0x2544
    c4e6:	90 91 45 25 	lds	r25, 0x2545
    c4ea:	af 01       	movw	r20, r30
    c4ec:	0e 94 f4 56 	call	0xade8	; 0xade8 <vfprintf>
    c4f0:	e0 91 44 25 	lds	r30, 0x2544
    c4f4:	f0 91 45 25 	lds	r31, 0x2545
    c4f8:	23 81       	ldd	r18, Z+3	; 0x03
    c4fa:	27 7f       	andi	r18, 0xF7	; 247
    c4fc:	23 83       	std	Z+3, r18	; 0x03
    c4fe:	cf 91       	pop	r28
    c500:	df 91       	pop	r29
    c502:	08 95       	ret

0000c504 <__ultoa_invert>:
    c504:	fa 01       	movw	r30, r20
    c506:	aa 27       	eor	r26, r26
    c508:	28 30       	cpi	r18, 0x08	; 8
    c50a:	51 f1       	breq	.+84     	; 0xc560 <__ultoa_invert+0x5c>
    c50c:	20 31       	cpi	r18, 0x10	; 16
    c50e:	81 f1       	breq	.+96     	; 0xc570 <__ultoa_invert+0x6c>
    c510:	e8 94       	clt
    c512:	6f 93       	push	r22
    c514:	6e 7f       	andi	r22, 0xFE	; 254
    c516:	6e 5f       	subi	r22, 0xFE	; 254
    c518:	7f 4f       	sbci	r23, 0xFF	; 255
    c51a:	8f 4f       	sbci	r24, 0xFF	; 255
    c51c:	9f 4f       	sbci	r25, 0xFF	; 255
    c51e:	af 4f       	sbci	r26, 0xFF	; 255
    c520:	b1 e0       	ldi	r27, 0x01	; 1
    c522:	3e d0       	rcall	.+124    	; 0xc5a0 <__ultoa_invert+0x9c>
    c524:	b4 e0       	ldi	r27, 0x04	; 4
    c526:	3c d0       	rcall	.+120    	; 0xc5a0 <__ultoa_invert+0x9c>
    c528:	67 0f       	add	r22, r23
    c52a:	78 1f       	adc	r23, r24
    c52c:	89 1f       	adc	r24, r25
    c52e:	9a 1f       	adc	r25, r26
    c530:	a1 1d       	adc	r26, r1
    c532:	68 0f       	add	r22, r24
    c534:	79 1f       	adc	r23, r25
    c536:	8a 1f       	adc	r24, r26
    c538:	91 1d       	adc	r25, r1
    c53a:	a1 1d       	adc	r26, r1
    c53c:	6a 0f       	add	r22, r26
    c53e:	71 1d       	adc	r23, r1
    c540:	81 1d       	adc	r24, r1
    c542:	91 1d       	adc	r25, r1
    c544:	a1 1d       	adc	r26, r1
    c546:	20 d0       	rcall	.+64     	; 0xc588 <__ultoa_invert+0x84>
    c548:	09 f4       	brne	.+2      	; 0xc54c <__ultoa_invert+0x48>
    c54a:	68 94       	set
    c54c:	3f 91       	pop	r19
    c54e:	2a e0       	ldi	r18, 0x0A	; 10
    c550:	26 9f       	mul	r18, r22
    c552:	11 24       	eor	r1, r1
    c554:	30 19       	sub	r19, r0
    c556:	30 5d       	subi	r19, 0xD0	; 208
    c558:	31 93       	st	Z+, r19
    c55a:	de f6       	brtc	.-74     	; 0xc512 <__ultoa_invert+0xe>
    c55c:	cf 01       	movw	r24, r30
    c55e:	08 95       	ret
    c560:	46 2f       	mov	r20, r22
    c562:	47 70       	andi	r20, 0x07	; 7
    c564:	40 5d       	subi	r20, 0xD0	; 208
    c566:	41 93       	st	Z+, r20
    c568:	b3 e0       	ldi	r27, 0x03	; 3
    c56a:	0f d0       	rcall	.+30     	; 0xc58a <__ultoa_invert+0x86>
    c56c:	c9 f7       	brne	.-14     	; 0xc560 <__ultoa_invert+0x5c>
    c56e:	f6 cf       	rjmp	.-20     	; 0xc55c <__ultoa_invert+0x58>
    c570:	46 2f       	mov	r20, r22
    c572:	4f 70       	andi	r20, 0x0F	; 15
    c574:	40 5d       	subi	r20, 0xD0	; 208
    c576:	4a 33       	cpi	r20, 0x3A	; 58
    c578:	18 f0       	brcs	.+6      	; 0xc580 <__ultoa_invert+0x7c>
    c57a:	49 5d       	subi	r20, 0xD9	; 217
    c57c:	31 fd       	sbrc	r19, 1
    c57e:	40 52       	subi	r20, 0x20	; 32
    c580:	41 93       	st	Z+, r20
    c582:	02 d0       	rcall	.+4      	; 0xc588 <__ultoa_invert+0x84>
    c584:	a9 f7       	brne	.-22     	; 0xc570 <__ultoa_invert+0x6c>
    c586:	ea cf       	rjmp	.-44     	; 0xc55c <__ultoa_invert+0x58>
    c588:	b4 e0       	ldi	r27, 0x04	; 4
    c58a:	a6 95       	lsr	r26
    c58c:	97 95       	ror	r25
    c58e:	87 95       	ror	r24
    c590:	77 95       	ror	r23
    c592:	67 95       	ror	r22
    c594:	ba 95       	dec	r27
    c596:	c9 f7       	brne	.-14     	; 0xc58a <__ultoa_invert+0x86>
    c598:	00 97       	sbiw	r24, 0x00	; 0
    c59a:	61 05       	cpc	r22, r1
    c59c:	71 05       	cpc	r23, r1
    c59e:	08 95       	ret
    c5a0:	9b 01       	movw	r18, r22
    c5a2:	ac 01       	movw	r20, r24
    c5a4:	0a 2e       	mov	r0, r26
    c5a6:	06 94       	lsr	r0
    c5a8:	57 95       	ror	r21
    c5aa:	47 95       	ror	r20
    c5ac:	37 95       	ror	r19
    c5ae:	27 95       	ror	r18
    c5b0:	ba 95       	dec	r27
    c5b2:	c9 f7       	brne	.-14     	; 0xc5a6 <__ultoa_invert+0xa2>
    c5b4:	62 0f       	add	r22, r18
    c5b6:	73 1f       	adc	r23, r19
    c5b8:	84 1f       	adc	r24, r20
    c5ba:	95 1f       	adc	r25, r21
    c5bc:	a0 1d       	adc	r26, r0
    c5be:	08 95       	ret

0000c5c0 <__ctype_isfalse>:
    c5c0:	99 27       	eor	r25, r25
    c5c2:	88 27       	eor	r24, r24

0000c5c4 <__ctype_istrue>:
    c5c4:	08 95       	ret

0000c5c6 <fgetc>:
    c5c6:	cf 93       	push	r28
    c5c8:	df 93       	push	r29
    c5ca:	ec 01       	movw	r28, r24
    c5cc:	4b 81       	ldd	r20, Y+3	; 0x03
    c5ce:	40 ff       	sbrs	r20, 0
    c5d0:	1a c0       	rjmp	.+52     	; 0xc606 <fgetc+0x40>
    c5d2:	46 ff       	sbrs	r20, 6
    c5d4:	0a c0       	rjmp	.+20     	; 0xc5ea <fgetc+0x24>
    c5d6:	4f 7b       	andi	r20, 0xBF	; 191
    c5d8:	4b 83       	std	Y+3, r20	; 0x03
    c5da:	8e 81       	ldd	r24, Y+6	; 0x06
    c5dc:	9f 81       	ldd	r25, Y+7	; 0x07
    c5de:	01 96       	adiw	r24, 0x01	; 1
    c5e0:	8e 83       	std	Y+6, r24	; 0x06
    c5e2:	9f 83       	std	Y+7, r25	; 0x07
    c5e4:	8a 81       	ldd	r24, Y+2	; 0x02
    c5e6:	28 2f       	mov	r18, r24
    c5e8:	2b c0       	rjmp	.+86     	; 0xc640 <fgetc+0x7a>
    c5ea:	42 ff       	sbrs	r20, 2
    c5ec:	13 c0       	rjmp	.+38     	; 0xc614 <fgetc+0x4e>
    c5ee:	e8 81       	ld	r30, Y
    c5f0:	f9 81       	ldd	r31, Y+1	; 0x01
    c5f2:	80 81       	ld	r24, Z
    c5f4:	28 2f       	mov	r18, r24
    c5f6:	33 27       	eor	r19, r19
    c5f8:	27 fd       	sbrc	r18, 7
    c5fa:	30 95       	com	r19
    c5fc:	21 15       	cp	r18, r1
    c5fe:	31 05       	cpc	r19, r1
    c600:	29 f4       	brne	.+10     	; 0xc60c <fgetc+0x46>
    c602:	40 62       	ori	r20, 0x20	; 32
    c604:	4b 83       	std	Y+3, r20	; 0x03
    c606:	2f ef       	ldi	r18, 0xFF	; 255
    c608:	3f ef       	ldi	r19, 0xFF	; 255
    c60a:	1b c0       	rjmp	.+54     	; 0xc642 <fgetc+0x7c>
    c60c:	31 96       	adiw	r30, 0x01	; 1
    c60e:	e8 83       	st	Y, r30
    c610:	f9 83       	std	Y+1, r31	; 0x01
    c612:	11 c0       	rjmp	.+34     	; 0xc636 <fgetc+0x70>
    c614:	ea 85       	ldd	r30, Y+10	; 0x0a
    c616:	fb 85       	ldd	r31, Y+11	; 0x0b
    c618:	ce 01       	movw	r24, r28
    c61a:	19 95       	eicall
    c61c:	9c 01       	movw	r18, r24
    c61e:	97 ff       	sbrs	r25, 7
    c620:	0a c0       	rjmp	.+20     	; 0xc636 <fgetc+0x70>
    c622:	9b 81       	ldd	r25, Y+3	; 0x03
    c624:	2f 5f       	subi	r18, 0xFF	; 255
    c626:	3f 4f       	sbci	r19, 0xFF	; 255
    c628:	11 f0       	breq	.+4      	; 0xc62e <fgetc+0x68>
    c62a:	80 e2       	ldi	r24, 0x20	; 32
    c62c:	01 c0       	rjmp	.+2      	; 0xc630 <fgetc+0x6a>
    c62e:	80 e1       	ldi	r24, 0x10	; 16
    c630:	89 2b       	or	r24, r25
    c632:	8b 83       	std	Y+3, r24	; 0x03
    c634:	e8 cf       	rjmp	.-48     	; 0xc606 <fgetc+0x40>
    c636:	8e 81       	ldd	r24, Y+6	; 0x06
    c638:	9f 81       	ldd	r25, Y+7	; 0x07
    c63a:	01 96       	adiw	r24, 0x01	; 1
    c63c:	8e 83       	std	Y+6, r24	; 0x06
    c63e:	9f 83       	std	Y+7, r25	; 0x07
    c640:	30 e0       	ldi	r19, 0x00	; 0
    c642:	c9 01       	movw	r24, r18
    c644:	df 91       	pop	r29
    c646:	cf 91       	pop	r28
    c648:	08 95       	ret

0000c64a <_exit>:
    c64a:	f8 94       	cli

0000c64c <__stop_program>:
    c64c:	ff cf       	rjmp	.-2      	; 0xc64c <__stop_program>
