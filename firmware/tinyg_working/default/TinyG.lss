
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000952e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00802000  0000952e  000095c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000613  0080212a  0080212a  000096ec  2**0
                  ALLOC
  3 .debug_aranges 00000360  00000000  00000000  000096ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000de6  00000000  00000000  00009a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000cde7  00000000  00000000  0000a832  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002c4f  00000000  00000000  00017619  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005109  00000000  00000000  0001a268  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b10  00000000  00000000  0001f374  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002519  00000000  00000000  0001fe84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003b35  00000000  00000000  0002239d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00025ed2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__ctors_end>
       4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
       8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
       c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      10:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      14:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      18:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      1c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      20:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      24:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      28:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      2c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      30:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      34:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      38:	0c 94 9c 27 	jmp	0x4f38	; 0x4f38 <__vector_14>
      3c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      40:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      44:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      48:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      4c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      50:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      54:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      58:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      5c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      60:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      64:	0c 94 18 2c 	jmp	0x5830	; 0x5830 <__vector_25>
      68:	0c 94 d5 29 	jmp	0x53aa	; 0x53aa <__vector_26>
      6c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      70:	0c 94 9e 37 	jmp	0x6f3c	; 0x6f3c <__vector_28>
      74:	0c 94 5b 35 	jmp	0x6ab6	; 0x6ab6 <__vector_29>
      78:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      7c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      80:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      84:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      88:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      8c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      90:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      94:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      98:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      9c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      a0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      a4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      a8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      ac:	0c 94 f1 33 	jmp	0x67e2	; 0x67e2 <__vector_43>
      b0:	0c 94 fb 33 	jmp	0x67f6	; 0x67f6 <__vector_44>
      b4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      b8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      bc:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__vector_47>
      c0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      c4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      c8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      cc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      d0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      d4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      d8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      dc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      e0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      e4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      e8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      ec:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      f0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      f4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      f8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      fc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     100:	0c 94 05 34 	jmp	0x680a	; 0x680a <__vector_64>
     104:	0c 94 0f 34 	jmp	0x681e	; 0x681e <__vector_65>
     108:	0c 94 c9 33 	jmp	0x6792	; 0x6792 <__vector_66>
     10c:	0c 94 d3 33 	jmp	0x67a6	; 0x67a6 <__vector_67>
     110:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     114:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     118:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     11c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     120:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     124:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     128:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     12c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     130:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     134:	0c 94 37 27 	jmp	0x4e6e	; 0x4e6e <__vector_77>
     138:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     13c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     140:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     144:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     148:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     14c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     150:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     154:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     158:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     15c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     160:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     164:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     168:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     16c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     170:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     174:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     178:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     17c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     180:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     184:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     188:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     18c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     190:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     194:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     198:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     19c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1a0:	0c 94 dd 33 	jmp	0x67ba	; 0x67ba <__vector_104>
     1a4:	0c 94 e7 33 	jmp	0x67ce	; 0x67ce <__vector_105>
     1a8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1ac:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1b0:	0c 94 6d 26 	jmp	0x4cda	; 0x4cda <__vector_108>
     1b4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1b8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1bc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1c0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1c4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1c8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1cc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1d0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1d4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1d8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1dc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1e0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1e4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <configs_P>:
     24b:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25b:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26b:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27b:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28b:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29b:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2ab:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bb:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2db:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2eb:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2fb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30b:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31b:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32b:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33b:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34b:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35b:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36b:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37b:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38b:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000399 <__c.3832>:
     399:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     3a9:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000003b4 <__c.3829>:
     3b4:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     3c4:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

000003ce <__c.3826>:
     3ce:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     3de:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000003e8 <__c.3823>:
     3e8:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     3f8:	74 3a 20 25 73 0a 00                                t: %s..

000003ff <__c.3820>:
     3ff:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     40f:	4d 6f 64 65 0a 00                                   Mode..

00000415 <__c.3817>:
     415:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     425:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

00000432 <__c.3749>:
     432:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     442:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     452:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     462:	29 0a 0a 00                                         )...

00000466 <__c.3747>:
     466:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     476:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     486:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000496 <__c.3745>:
     496:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     4a6:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4b6:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004c7 <__c.3743>:
     4c7:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     4d7:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4e7:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004f8 <__c.3741>:
     4f8:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     508:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     518:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     528:	6c 0a 00                                            l..

0000052b <__c.3739>:
     52b:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     53b:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     54b:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     55b:	6e 0a 00                                            n..

0000055e <__c.3737>:
     55e:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     56e:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     57e:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     58e:	74 65 70 73 29 0a 00                                teps)..

00000595 <__c.3735>:
     595:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     5a5:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     5b5:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     5c5:	70 0a 00                                            p..

000005c8 <__c.3733>:
     5c8:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     5d8:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     5e8:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     5f8:	73 74 65 70 73 29 0a 00                             steps)..

00000600 <__c.3731>:
     600:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     610:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     620:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     630:	73 74 65 70 73 29 0a 00                             steps)..

00000638 <__c.3726>:
     638:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     648:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

00000656 <__c.3712>:
     656:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     666:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     676:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000681 <__c.3710>:
     681:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     691:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     6a1:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000006ab <__c.3708>:
     6ab:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     6bb:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     6cb:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000006d5 <__c.3706>:
     6d5:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     6e5:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     6f5:	73 20 2d 2d 2d 0a 00                                s ---..

000006fc <__c.3704>:
     6fc:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     70c:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     71c:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000724 <bsel>:
     724:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

0000072f <bscale>:
     72f:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

0000073a <__c.3527>:
     73a:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     74a:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     75a:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000766 <readlnFuncs>:
     766:	78 2b 4d 2b 4d 2b b8 2b 4d 2b 4d 2b 4d 2b 4d 2b     x+M+M+.+M+M+M+M+
     776:	a4 2b 4d 2b 78 2b 4d 2b 4d 2b 78 2b ca 2b d0 2b     .+M+x+M+M+x+.+.+
     786:	4d 2b c4 2b 4d 2b be 2b 4d 2b 4d 2b 4d 2b 4d 2b     M+.+M+.+M+M+M+M+
     796:	b8 2b 4d 2b 4d 2b b8 2b 4d 2b 4d 2b 4d 2b 4d 2b     .+M+M+.+M+M+M+M+
     7a6:	4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b     M+M+M+M+M+M+M+M+
     7b6:	4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b     M+M+M+M+M+M+M+M+
     7c6:	4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b     M+M+M+M+M+M+M+M+
     7d6:	4d 2b 4d 2b 4d 2b 9a 2b 4d 2b 4d 2b 4d 2b 4d 2b     M+M+M+.+M+M+M+M+
     7e6:	4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b     M+M+M+M+M+M+M+M+
     7f6:	4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b     M+M+M+M+M+M+M+M+
     806:	4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b     M+M+M+M+M+M+M+M+
     816:	4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b     M+M+M+M+M+M+M+M+
     826:	4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b     M+M+M+M+M+M+M+M+
     836:	4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b     M+M+M+M+M+M+M+M+
     846:	4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b     M+M+M+M+M+M+M+M+
     856:	4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b 4d 2b a4 2b     M+M+M+M+M+M+M+.+

00000866 <getcFuncs>:
     866:	ea 2a da 2a da 2a b8 2b da 2a da 2a da 2a da 2a     .*.*.*.+.*.*.*.*
     876:	09 2b da 2a ea 2a da 2a da 2a ea 2a ca 2b d0 2b     .+.*.*.*.*.*.+.+
     886:	da 2a c4 2b da 2a be 2b da 2a da 2a da 2a da 2a     .*.+.*.+.*.*.*.*
     896:	b8 2b da 2a da 2a b8 2b da 2a da 2a da 2a da 2a     .+.*.*.+.*.*.*.*
     8a6:	da 2a da 2a da 2a da 2a da 2a da 2a da 2a da 2a     .*.*.*.*.*.*.*.*
     8b6:	da 2a da 2a da 2a da 2a da 2a da 2a da 2a da 2a     .*.*.*.*.*.*.*.*
     8c6:	da 2a da 2a da 2a da 2a da 2a da 2a da 2a da 2a     .*.*.*.*.*.*.*.*
     8d6:	da 2a da 2a da 2a ff 2a da 2a da 2a da 2a da 2a     .*.*.*.*.*.*.*.*
     8e6:	da 2a da 2a da 2a da 2a da 2a da 2a da 2a da 2a     .*.*.*.*.*.*.*.*
     8f6:	da 2a da 2a da 2a da 2a da 2a da 2a da 2a da 2a     .*.*.*.*.*.*.*.*
     906:	da 2a da 2a da 2a da 2a da 2a da 2a da 2a da 2a     .*.*.*.*.*.*.*.*
     916:	da 2a da 2a da 2a da 2a da 2a da 2a da 2a da 2a     .*.*.*.*.*.*.*.*
     926:	da 2a da 2a da 2a da 2a da 2a da 2a da 2a da 2a     .*.*.*.*.*.*.*.*
     936:	da 2a da 2a da 2a da 2a da 2a da 2a da 2a da 2a     .*.*.*.*.*.*.*.*
     946:	da 2a da 2a da 2a da 2a da 2a da 2a da 2a da 2a     .*.*.*.*.*.*.*.*
     956:	da 2a da 2a da 2a da 2a da 2a da 2a da 2a 09 2b     .*.*.*.*.*.*.*.+

00000966 <square_test1>:
     966:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     976:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     986:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     996:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     9a6:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     9b6:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     9c6:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000009d4 <square_test2>:
     9d4:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     9e4:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     9f4:	78 30 20 79 30 00                                   x0 y0.

000009fa <square_test10>:
     9fa:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     a0a:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     a1a:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000a26 <circle_test10>:
     a26:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     a36:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     a46:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     a56:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     a66:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     a76:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     a86:	30 00                                               0.

00000a88 <square_circle_test10>:
     a88:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     a98:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     aa8:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     ab8:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     ac8:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     ad8:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     ae8:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     af8:	31 30 20 79 30 00                                   10 y0.

00000afe <square_circle_test100>:
     afe:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     b0e:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     b1e:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     b2e:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     b3e:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     b4e:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     b5e:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     b6e:	35 30 20 6a 30 00                                   50 j0.

00000b74 <spiral_test5>:
     b74:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     b84:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     b94:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     ba4:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     bb4:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     bc4:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     bd4:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     be4:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

00000bee <spiral_test50a>:
     bee:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     bfe:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

00000c0e <dwell_test1>:
     c0e:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     c1e:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     c2e:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     c3e:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     c4e:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     c5e:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     c6e:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     c7e:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     c8e:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     c9e:	20 78 30 00                                          x0.

00000ca2 <dwell_test2>:
     ca2:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     cb2:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     cc2:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     cd2:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     ce2:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     cf2:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     d02:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     d12:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     d22:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000d2c <dwell_testMax>:
     d2c:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000d36 <g0_test1>:
     d36:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     d46:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000d56 <g0_test2>:
     d56:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     d66:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     d76:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     d86:	79 30 20 7a 30 00                                   y0 z0.

00000d8c <g0_test3>:
     d8c:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     d9c:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     dac:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000dba <radius_arc_test1>:
     dba:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     dca:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     dda:	72 35 30 0a 00                                      r50..

00000ddf <radius_arc_test2>:
     ddf:	67 32 0a 00                                         g2..

00000de3 <zoetrope>:
     de3:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     df3:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     e03:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     e13:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     e23:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     e33:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     e43:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     e53:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     e63:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     e73:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     e83:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     e93:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     ea3:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     eb3:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     ec3:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     ed3:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     ee3:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     ef3:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     f03:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     f13:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     f23:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     f33:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     f43:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     f53:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     f63:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     f73:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     f83:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     f93:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     fa3:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     fb3:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     fc3:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     fd3:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     fe3:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     ff3:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
    1003:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
    1013:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
    1023:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
    1033:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
    1043:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
    1053:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
    1063:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
    1073:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
    1083:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
    1093:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
    10a3:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
    10b3:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
    10c3:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
    10d3:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
    10e3:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
    10f3:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
    1103:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
    1113:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
    1123:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
    1133:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
    1143:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
    1153:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
    1163:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
    1173:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
    1183:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
    1193:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
    11a3:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
    11b3:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
    11c3:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
    11d3:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
    11e3:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
    11f3:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
    1203:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
    1213:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    1223:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    1233:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    1243:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    1253:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    1263:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    1273:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    1283:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    1293:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    12a3:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    12b3:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    12c3:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    12d3:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    12e3:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    12f3:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    1303:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    1313:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    1323:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    1333:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    1343:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    1353:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    1363:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    1373:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    1383:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    1393:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    13a3:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    13b3:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    13c3:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    13d3:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    13e3:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    13f3:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    1403:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    1413:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    1423:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    1433:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    1443:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    1453:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    1463:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    1473:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    1483:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    1493:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    14a3:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    14b3:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    14c3:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    14d3:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    14e3:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    14f3:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    1503:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    1513:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    1523:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    1533:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    1543:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    1553:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    1563:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    1573:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    1583:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    1593:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    15a3:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    15b3:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    15c3:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    15d3:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    15e3:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    15f3:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    1603:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    1613:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    1623:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    1633:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    1643:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    1653:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    1663:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    1673:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    1683:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    1693:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    16a3:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    16b3:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    16c3:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    16d3:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    16e3:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    16f3:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    1703:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    1713:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    1723:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    1733:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    1743:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    1753:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    1763:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    1773:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    1783:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    1793:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

0000179e <contraptor_circle>:
    179e:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    17ae:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    17be:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    17ce:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    17de:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    17ee:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    17fe:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    180e:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    181e:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    182e:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    183e:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    184e:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    185e:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    186e:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    187e:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    188e:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    189e:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    18ae:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    18be:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    18ce:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    18de:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    18ee:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    18fe:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    190e:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    191e:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    192e:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    193e:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    194e:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    195e:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    196e:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    197e:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    198e:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    199e:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    19ae:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    19be:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    19ce:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    19de:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    19ee:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    19fe:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    1a0e:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    1a1e:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1a2e:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1a3e:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    1a4e:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    1a5e:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    1a6e:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    1a7e:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    1a8e:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    1a9e:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1aae:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    1abe:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    1ace:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    1ade:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    1aee:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    1afe:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    1b0e:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1b1e:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1b2e:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1b3e:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1b4e:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1b5e:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1b6e:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001b7e <tgModeStringControl>:
    1b7e:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001b8b <tgModeStringConfig>:
    1b8b:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001b97 <tgModeStringGCode>:
    1b97:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

00001ba3 <tgModeStringDirect>:
    1ba3:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

00001bb0 <tgModeStrings>:
    1bb0:	7e 1b 8b 1b 97 1b a3 1b                             ~.......

00001bb8 <__c.3960>:
    1bb8:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1bc8:	69 6c 65 0a 00                                      ile..

00001bcd <__c.3938>:
    1bcd:	54 69 6e 79 47 20 5b 25 53 5d 3e 20 00              TinyG [%S]> .

00001bda <__c.3933>:
    1bda:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001be8 <__c.3863>:
    1be8:	62 75 69 6c 64 20 32 30 32 00                       build 202.

00001bf2 <__c.3861>:
    1bf2:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1c02:	25 53 0a 00                                         %S..

00001c06 <readlnFuncs>:
    1c06:	fe 36 d3 36 d3 36 3e 37 d3 36 d3 36 d3 36 d3 36     .6.6.6>7.6.6.6.6
    1c16:	2a 37 d3 36 fe 36 d3 36 d3 36 fe 36 50 37 56 37     *7.6.6.6.6.6P7V7
    1c26:	d3 36 4a 37 d3 36 44 37 d3 36 d3 36 d3 36 d3 36     .6J7.6D7.6.6.6.6
    1c36:	3e 37 d3 36 d3 36 3e 37 d3 36 d3 36 d3 36 d3 36     >7.6.6>7.6.6.6.6
    1c46:	d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36     .6.6.6.6.6.6.6.6
    1c56:	d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36     .6.6.6.6.6.6.6.6
    1c66:	d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36     .6.6.6.6.6.6.6.6
    1c76:	d3 36 d3 36 d3 36 20 37 d3 36 d3 36 d3 36 d3 36     .6.6.6 7.6.6.6.6
    1c86:	d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36     .6.6.6.6.6.6.6.6
    1c96:	d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36     .6.6.6.6.6.6.6.6
    1ca6:	d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36     .6.6.6.6.6.6.6.6
    1cb6:	d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36     .6.6.6.6.6.6.6.6
    1cc6:	d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36     .6.6.6.6.6.6.6.6
    1cd6:	d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36     .6.6.6.6.6.6.6.6
    1ce6:	d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36     .6.6.6.6.6.6.6.6
    1cf6:	d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 d3 36 2a 37     .6.6.6.6.6.6.6*7

00001d06 <getcFuncs>:
    1d06:	70 36 60 36 60 36 3e 37 60 36 60 36 60 36 60 36     p6`6`6>7`6`6`6`6
    1d16:	8f 36 60 36 70 36 60 36 60 36 70 36 50 37 56 37     .6`6p6`6`6p6P7V7
    1d26:	60 36 4a 37 60 36 44 37 60 36 60 36 60 36 60 36     `6J7`6D7`6`6`6`6
    1d36:	3e 37 60 36 60 36 3e 37 60 36 60 36 60 36 60 36     >7`6`6>7`6`6`6`6
    1d46:	60 36 60 36 60 36 60 36 60 36 60 36 60 36 60 36     `6`6`6`6`6`6`6`6
    1d56:	60 36 60 36 60 36 60 36 60 36 60 36 60 36 60 36     `6`6`6`6`6`6`6`6
    1d66:	60 36 60 36 60 36 60 36 60 36 60 36 60 36 60 36     `6`6`6`6`6`6`6`6
    1d76:	60 36 60 36 60 36 85 36 60 36 60 36 60 36 60 36     `6`6`6.6`6`6`6`6
    1d86:	60 36 60 36 60 36 60 36 60 36 60 36 60 36 60 36     `6`6`6`6`6`6`6`6
    1d96:	60 36 60 36 60 36 60 36 60 36 60 36 60 36 60 36     `6`6`6`6`6`6`6`6
    1da6:	60 36 60 36 60 36 60 36 60 36 60 36 60 36 60 36     `6`6`6`6`6`6`6`6
    1db6:	60 36 60 36 60 36 60 36 60 36 60 36 60 36 60 36     `6`6`6`6`6`6`6`6
    1dc6:	60 36 60 36 60 36 60 36 60 36 60 36 60 36 60 36     `6`6`6`6`6`6`6`6
    1dd6:	60 36 60 36 60 36 60 36 60 36 60 36 60 36 60 36     `6`6`6`6`6`6`6`6
    1de6:	60 36 60 36 60 36 60 36 60 36 60 36 60 36 60 36     `6`6`6`6`6`6`6`6
    1df6:	60 36 60 36 60 36 60 36 60 36 60 36 60 36 8f 36     `6`6`6`6`6`6`6.6

00001e06 <pstr_inf>:
    1e06:	49 4e 46                                            INF

00001e09 <pstr_inity>:
    1e09:	49 4e 49 54 59                                      INITY

00001e0e <pstr_nan>:
    1e0e:	4e 41 4e                                            NAN

00001e11 <pwr_m10>:
    1e11:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1e21:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001e29 <pwr_p10>:
    1e29:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1e39:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1e49:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1e59:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1e69:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1e79:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1e89:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1e99:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1ea9:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1eb9:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1ec9:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1ed9:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1ee9:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1ef9:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1f09:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1f19:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1f29:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1f39:	3d 27 00                                            ='.

00001f3c <__ctors_end>:
    1f3c:	11 24       	eor	r1, r1
    1f3e:	1f be       	out	0x3f, r1	; 63
    1f40:	cf ef       	ldi	r28, 0xFF	; 255
    1f42:	df e5       	ldi	r29, 0x5F	; 95
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	00 e0       	ldi	r16, 0x00	; 0
    1f4a:	0c bf       	out	0x3c, r16	; 60

00001f4c <__do_copy_data>:
    1f4c:	11 e2       	ldi	r17, 0x21	; 33
    1f4e:	a0 e0       	ldi	r26, 0x00	; 0
    1f50:	b0 e2       	ldi	r27, 0x20	; 32
    1f52:	ee e2       	ldi	r30, 0x2E	; 46
    1f54:	f5 e9       	ldi	r31, 0x95	; 149
    1f56:	00 e0       	ldi	r16, 0x00	; 0
    1f58:	0b bf       	out	0x3b, r16	; 59
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <__do_copy_data+0x14>
    1f5c:	07 90       	elpm	r0, Z+
    1f5e:	0d 92       	st	X+, r0
    1f60:	aa 32       	cpi	r26, 0x2A	; 42
    1f62:	b1 07       	cpc	r27, r17
    1f64:	d9 f7       	brne	.-10     	; 0x1f5c <__do_copy_data+0x10>

00001f66 <__do_clear_bss>:
    1f66:	17 e2       	ldi	r17, 0x27	; 39
    1f68:	aa e2       	ldi	r26, 0x2A	; 42
    1f6a:	b1 e2       	ldi	r27, 0x21	; 33
    1f6c:	01 c0       	rjmp	.+2      	; 0x1f70 <.do_clear_bss_start>

00001f6e <.do_clear_bss_loop>:
    1f6e:	1d 92       	st	X+, r1

00001f70 <.do_clear_bss_start>:
    1f70:	ad 33       	cpi	r26, 0x3D	; 61
    1f72:	b1 07       	cpc	r27, r17
    1f74:	e1 f7       	brne	.-8      	; 0x1f6e <.do_clear_bss_loop>
    1f76:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <main>
    1f7a:	0c 94 95 4a 	jmp	0x952a	; 0x952a <_exit>

00001f7e <__bad_interrupt>:
    1f7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001f82 <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1f82:	f8 94       	cli
	xmega_init();				// xmega setup
    1f84:	0e 94 ba 1b 	call	0x3774	; 0x3774 <xmega_init>
	xio_init();					// xmega io subsystem
    1f88:	0e 94 69 28 	call	0x50d2	; 0x50d2 <xio_init>

	cfg_init();					// get config record from eeprom
    1f8c:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <cfg_init>
	st_init(); 					// stepper subsystem
    1f90:	0e 94 29 24 	call	0x4852	; 0x4852 <st_init>
	ls_init();					// limit switches
    1f94:	0e 94 a1 33 	call	0x6742	; 0x6742 <ls_init>
	mv_init();					// move buffers
    1f98:	0e 94 7d 31 	call	0x62fa	; 0x62fa <mv_init>
	mc_init();					// motion control subsystem
    1f9c:	0e 94 df 1b 	call	0x37be	; 0x37be <mc_init>
	spindle_init();				// spindle controller
    1fa0:	0e 94 0d 24 	call	0x481a	; 0x481a <spindle_init>
	en_init();					// encoders
    1fa4:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <en_init>
	gc_init();					// gcode-parser
    1fa8:	0e 94 13 10 	call	0x2026	; 0x2026 <gc_init>
	dd_init();					// direct drive commands
    1fac:	0e 94 79 31 	call	0x62f2	; 0x62f2 <dd_init>
	tg_init();					// tinyg parsers
    1fb0:	0e 94 1e 30 	call	0x603c	; 0x603c <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1fb4:	0e 94 0f 28 	call	0x501e	; 0x501e <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1fb8:	e0 ea       	ldi	r30, 0xA0	; 160
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 91 a2 00 	lds	r24, 0x00A2
    1fc0:	81 60       	ori	r24, 0x01	; 1
    1fc2:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1fc4:	80 91 a2 00 	lds	r24, 0x00A2
    1fc8:	82 60       	ori	r24, 0x02	; 2
    1fca:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1fcc:	80 91 a2 00 	lds	r24, 0x00A2
    1fd0:	84 60       	ori	r24, 0x04	; 4
    1fd2:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1fd4:	78 94       	sei

	// Debug help:
	// Pre-load the USB RX (input) buffer with some test strings
	// Be mindful of the 16 char limit on the RX (circular) buffer.
	xio_usb_queue_RX_char(ETX);
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <xio_usb_queue_RX_char>
//	xio_usb_queue_RX_string("f\n");
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");

	for(;;){
		tg_controller();
    1fdc:	0e 94 fd 30 	call	0x61fa	; 0x61fa <tg_controller>
    1fe0:	fd cf       	rjmp	.-6      	; 0x1fdc <main+0x5a>

00001fe2 <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1fe2:	80 93 77 21 	sts	0x2177, r24
	gc.plane_axis_1 = axis_1;
    1fe6:	60 93 78 21 	sts	0x2178, r22
	gc.plane_axis_2 = axis_2;
    1fea:	40 93 79 21 	sts	0x2179, r20
}
    1fee:	08 95       	ret

00001ff0 <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1ff0:	ef 92       	push	r14
    1ff2:	ff 92       	push	r15
    1ff4:	0f 93       	push	r16
    1ff6:	1f 93       	push	r17
    1ff8:	7b 01       	movw	r14, r22
    1ffa:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1ffc:	80 91 37 21 	lds	r24, 0x2137
    2000:	88 23       	and	r24, r24
    2002:	51 f0       	breq	.+20     	; 0x2018 <to_millimeters+0x28>
    2004:	c8 01       	movw	r24, r16
    2006:	b7 01       	movw	r22, r14
    2008:	25 e8       	ldi	r18, 0x85	; 133
    200a:	32 e4       	ldi	r19, 0x42	; 66
    200c:	41 e2       	ldi	r20, 0x21	; 33
    200e:	5d e3       	ldi	r21, 0x3D	; 61
    2010:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2014:	7b 01       	movw	r14, r22
    2016:	8c 01       	movw	r16, r24
}
    2018:	b7 01       	movw	r22, r14
    201a:	c8 01       	movw	r24, r16
    201c:	1f 91       	pop	r17
    201e:	0f 91       	pop	r16
    2020:	ff 90       	pop	r15
    2022:	ef 90       	pop	r14
    2024:	08 95       	ret

00002026 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    2026:	86 e5       	ldi	r24, 0x56	; 86
    2028:	ea e2       	ldi	r30, 0x2A	; 42
    202a:	f1 e2       	ldi	r31, 0x21	; 33
    202c:	df 01       	movw	r26, r30
    202e:	1d 92       	st	X+, r1
    2030:	8a 95       	dec	r24
    2032:	e9 f7       	brne	.-6      	; 0x202e <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 e0       	ldi	r26, 0x00	; 0
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	80 93 3b 21 	sts	0x213B, r24
    2040:	90 93 3c 21 	sts	0x213C, r25
    2044:	a0 93 3d 21 	sts	0x213D, r26
    2048:	b0 93 3e 21 	sts	0x213E, r27
	gc.radius = 0;							// radius value
    204c:	80 93 3f 21 	sts	0x213F, r24
    2050:	90 93 40 21 	sts	0x2140, r25
    2054:	a0 93 41 21 	sts	0x2141, r26
    2058:	b0 93 42 21 	sts	0x2142, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    205c:	80 91 73 26 	lds	r24, 0x2673
    2060:	90 91 74 26 	lds	r25, 0x2674
    2064:	a0 91 75 26 	lds	r26, 0x2675
    2068:	b0 91 76 26 	lds	r27, 0x2676
    206c:	80 93 43 21 	sts	0x2143, r24
    2070:	90 93 44 21 	sts	0x2144, r25
    2074:	a0 93 45 21 	sts	0x2145, r26
    2078:	b0 93 46 21 	sts	0x2146, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    207c:	80 91 77 26 	lds	r24, 0x2677
    2080:	90 91 78 26 	lds	r25, 0x2678
    2084:	a0 91 79 26 	lds	r26, 0x2679
    2088:	b0 91 7a 26 	lds	r27, 0x267A
    208c:	80 93 47 21 	sts	0x2147, r24
    2090:	90 93 48 21 	sts	0x2148, r25
    2094:	a0 93 49 21 	sts	0x2149, r26
    2098:	b0 93 4a 21 	sts	0x214A, r27

	gc.absolute_mode = TRUE;
    209c:	21 e0       	ldi	r18, 0x01	; 1
    209e:	20 93 38 21 	sts	0x2138, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	a0 e8       	ldi	r26, 0x80	; 128
    20a8:	bf eb       	ldi	r27, 0xBF	; 191
    20aa:	80 93 4f 21 	sts	0x214F, r24
    20ae:	90 93 50 21 	sts	0x2150, r25
    20b2:	a0 93 51 21 	sts	0x2151, r26
    20b6:	b0 93 52 21 	sts	0x2152, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    20ba:	10 92 39 21 	sts	0x2139, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    20be:	10 92 7e 21 	sts	0x217E, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    20c2:	10 92 7f 21 	sts	0x217F, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    20c6:	10 92 77 21 	sts	0x2177, r1
	gc.plane_axis_1 = axis_1;
    20ca:	20 93 78 21 	sts	0x2178, r18
	gc.plane_axis_2 = axis_2;
    20ce:	82 e0       	ldi	r24, 0x02	; 2
    20d0:	80 93 79 21 	sts	0x2179, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X, Y, Z);
}
    20d4:	08 95       	ret

000020d6 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    20d6:	4f 92       	push	r4
    20d8:	5f 92       	push	r5
    20da:	6f 92       	push	r6
    20dc:	7f 92       	push	r7
    20de:	8f 92       	push	r8
    20e0:	9f 92       	push	r9
    20e2:	af 92       	push	r10
    20e4:	bf 92       	push	r11
    20e6:	cf 92       	push	r12
    20e8:	df 92       	push	r13
    20ea:	ef 92       	push	r14
    20ec:	ff 92       	push	r15
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	0f 92       	push	r0
    20f8:	0f 92       	push	r0
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	3b 01       	movw	r6, r22
    2100:	2a 01       	movw	r4, r20
    2102:	49 01       	movw	r8, r18
    2104:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    2106:	d8 01       	movw	r26, r16
    2108:	ed 91       	ld	r30, X+
    210a:	fc 91       	ld	r31, X
    210c:	e2 0f       	add	r30, r18
    210e:	f3 1f       	adc	r31, r19
    2110:	e0 81       	ld	r30, Z
    2112:	ee 23       	and	r30, r30
    2114:	41 f0       	breq	.+16     	; 0x2126 <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    2116:	dc 01       	movw	r26, r24
    2118:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    211a:	e1 54       	subi	r30, 0x41	; 65
    211c:	ea 31       	cpi	r30, 0x1A	; 26
    211e:	30 f0       	brcs	.+12     	; 0x212c <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    2120:	88 e0       	ldi	r24, 0x08	; 8
    2122:	80 93 2a 21 	sts	0x212A, r24
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	35 c0       	rjmp	.+106    	; 0x2196 <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    212c:	f8 01       	movw	r30, r16
    212e:	80 81       	ld	r24, Z
    2130:	91 81       	ldd	r25, Z+1	; 0x01
    2132:	01 96       	adiw	r24, 0x01	; 1
    2134:	80 83       	st	Z, r24
    2136:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    2138:	89 01       	movw	r16, r18
    213a:	08 0f       	add	r16, r24
    213c:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    213e:	c8 01       	movw	r24, r16
    2140:	be 01       	movw	r22, r28
    2142:	6f 5f       	subi	r22, 0xFF	; 255
    2144:	7f 4f       	sbci	r23, 0xFF	; 255
    2146:	0e 94 c9 46 	call	0x8d92	; 0x8d92 <strtod>
    214a:	6b 01       	movw	r12, r22
    214c:	7c 01       	movw	r14, r24
    214e:	d3 01       	movw	r26, r6
    2150:	6d 93       	st	X+, r22
    2152:	7d 93       	st	X+, r23
    2154:	8d 93       	st	X+, r24
    2156:	9c 93       	st	X, r25
    2158:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	80 17       	cp	r24, r16
    2160:	91 07       	cpc	r25, r17
    2162:	11 f4       	brne	.+4      	; 0x2168 <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    2164:	8c e0       	ldi	r24, 0x0C	; 12
    2166:	dd cf       	rjmp	.-70     	; 0x2122 <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    2168:	88 19       	sub	r24, r8
    216a:	99 09       	sbc	r25, r9
    216c:	f5 01       	movw	r30, r10
    216e:	80 83       	st	Z, r24
    2170:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    2172:	c7 01       	movw	r24, r14
    2174:	b6 01       	movw	r22, r12
    2176:	0e 94 2e 46 	call	0x8c5c	; 0x8c5c <trunc>
    217a:	9b 01       	movw	r18, r22
    217c:	ac 01       	movw	r20, r24
    217e:	c7 01       	movw	r24, r14
    2180:	b6 01       	movw	r22, r12
    2182:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    2186:	d2 01       	movw	r26, r4
    2188:	6d 93       	st	X+, r22
    218a:	7d 93       	st	X+, r23
    218c:	8d 93       	st	X+, r24
    218e:	9c 93       	st	X, r25
    2190:	13 97       	sbiw	r26, 0x03	; 3
    2192:	21 e0       	ldi	r18, 0x01	; 1
    2194:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    2196:	c9 01       	movw	r24, r18
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
    21a4:	ff 90       	pop	r15
    21a6:	ef 90       	pop	r14
    21a8:	df 90       	pop	r13
    21aa:	cf 90       	pop	r12
    21ac:	bf 90       	pop	r11
    21ae:	af 90       	pop	r10
    21b0:	9f 90       	pop	r9
    21b2:	8f 90       	pop	r8
    21b4:	7f 90       	pop	r7
    21b6:	6f 90       	pop	r6
    21b8:	5f 90       	pop	r5
    21ba:	4f 90       	pop	r4
    21bc:	08 95       	ret

000021be <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    21be:	af 92       	push	r10
    21c0:	bf 92       	push	r11
    21c2:	cf 92       	push	r12
    21c4:	df 92       	push	r13
    21c6:	ef 92       	push	r14
    21c8:	ff 92       	push	r15
    21ca:	0f 93       	push	r16
    21cc:	1f 93       	push	r17
    21ce:	79 01       	movw	r14, r18
    21d0:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    21d2:	5f 77       	andi	r21, 0x7F	; 127
    21d4:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    21d8:	0e 94 83 42 	call	0x8506	; 0x8506 <atan>
    21dc:	5b 01       	movw	r10, r22
    21de:	6c 01       	movw	r12, r24

	if (y>0) {
    21e0:	c8 01       	movw	r24, r16
    21e2:	b7 01       	movw	r22, r14
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	0e 94 ae 44 	call	0x895c	; 0x895c <__gesf2>
    21f0:	18 16       	cp	r1, r24
    21f2:	cc f0       	brlt	.+50     	; 0x2226 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    21f4:	c6 01       	movw	r24, r12
    21f6:	b5 01       	movw	r22, r10
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	50 e0       	ldi	r21, 0x00	; 0
    2200:	0e 94 ae 44 	call	0x895c	; 0x895c <__gesf2>
    2204:	18 16       	cp	r1, r24
    2206:	2c f4       	brge	.+10     	; 0x2212 <theta+0x54>
	    {
			return(M_PI-theta);
    2208:	6b ed       	ldi	r22, 0xDB	; 219
    220a:	7f e0       	ldi	r23, 0x0F	; 15
    220c:	89 e4       	ldi	r24, 0x49	; 73
    220e:	90 e4       	ldi	r25, 0x40	; 64
    2210:	04 c0       	rjmp	.+8      	; 0x221a <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    2212:	6b ed       	ldi	r22, 0xDB	; 219
    2214:	7f e0       	ldi	r23, 0x0F	; 15
    2216:	89 e4       	ldi	r24, 0x49	; 73
    2218:	90 ec       	ldi	r25, 0xC0	; 192
    221a:	a6 01       	movw	r20, r12
    221c:	95 01       	movw	r18, r10
    221e:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    2222:	5b 01       	movw	r10, r22
    2224:	6c 01       	movw	r12, r24
		}
	}
}
    2226:	b5 01       	movw	r22, r10
    2228:	c6 01       	movw	r24, r12
    222a:	1f 91       	pop	r17
    222c:	0f 91       	pop	r16
    222e:	ff 90       	pop	r15
    2230:	ef 90       	pop	r14
    2232:	df 90       	pop	r13
    2234:	cf 90       	pop	r12
    2236:	bf 90       	pop	r11
    2238:	af 90       	pop	r10
    223a:	08 95       	ret

0000223c <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    223c:	2f 92       	push	r2
    223e:	3f 92       	push	r3
    2240:	4f 92       	push	r4
    2242:	5f 92       	push	r5
    2244:	6f 92       	push	r6
    2246:	7f 92       	push	r7
    2248:	8f 92       	push	r8
    224a:	9f 92       	push	r9
    224c:	af 92       	push	r10
    224e:	bf 92       	push	r11
    2250:	cf 92       	push	r12
    2252:	df 92       	push	r13
    2254:	ef 92       	push	r14
    2256:	ff 92       	push	r15
    2258:	0f 93       	push	r16
    225a:	1f 93       	push	r17
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	68 97       	sbiw	r28, 0x18	; 24
    2266:	cd bf       	out	0x3d, r28	; 61
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    226c:	19 82       	std	Y+1, r1	; 0x01
    226e:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    2270:	ef e5       	ldi	r30, 0x5F	; 95
    2272:	f1 e2       	ldi	r31, 0x21	; 33
    2274:	8c e0       	ldi	r24, 0x0C	; 12
    2276:	df 01       	movw	r26, r30
    2278:	28 2f       	mov	r18, r24
    227a:	1d 92       	st	X+, r1
    227c:	2a 95       	dec	r18
    227e:	e9 f7       	brne	.-6      	; 0x227a <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    2280:	3c 96       	adiw	r30, 0x0c	; 12
    2282:	df 01       	movw	r26, r30
    2284:	1d 92       	st	X+, r1
    2286:	8a 95       	dec	r24
    2288:	e9 f7       	brne	.-6      	; 0x2284 <gc_execute_block+0x48>

	gc.status = TG_OK;
    228a:	10 92 2a 21 	sts	0x212A, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    228e:	10 92 3a 21 	sts	0x213A, r1
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set
    2292:	10 92 7f 21 	sts	0x217F, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2296:	5e 01       	movw	r10, r28
    2298:	08 94       	sec
    229a:	a1 1c       	adc	r10, r1
    229c:	b1 1c       	adc	r11, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    229e:	ff 24       	eor	r15, r15
    22a0:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    22a2:	ba e0       	ldi	r27, 0x0A	; 10
    22a4:	cb 2e       	mov	r12, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    22a6:	a2 e0       	ldi	r26, 0x02	; 2
    22a8:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    22aa:	77 24       	eor	r7, r7
    22ac:	7a 94       	dec	r7

					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    22ae:	f3 e0       	ldi	r31, 0x03	; 3
    22b0:	df 2e       	mov	r13, r31

					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    22b2:	e4 e0       	ldi	r30, 0x04	; 4
    22b4:	6e 2e       	mov	r6, r30
    22b6:	0a c1       	rjmp	.+532    	; 0x24cc <gc_execute_block+0x290>
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    22b8:	80 91 2b 21 	lds	r24, 0x212B
    22bc:	8d 34       	cpi	r24, 0x4D	; 77
    22be:	09 f4       	brne	.+2      	; 0x22c2 <gc_execute_block+0x86>
    22c0:	be c0       	rjmp	.+380    	; 0x243e <gc_execute_block+0x202>
    22c2:	84 35       	cpi	r24, 0x54	; 84
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <gc_execute_block+0x8c>
    22c6:	f0 c0       	rjmp	.+480    	; 0x24a8 <gc_execute_block+0x26c>
    22c8:	87 34       	cpi	r24, 0x47	; 71
    22ca:	09 f0       	breq	.+2      	; 0x22ce <gc_execute_block+0x92>
    22cc:	fb c0       	rjmp	.+502    	; 0x24c4 <gc_execute_block+0x288>
			case 'G':
				switch((int)gc.value) {
    22ce:	60 91 2c 21 	lds	r22, 0x212C
    22d2:	70 91 2d 21 	lds	r23, 0x212D
    22d6:	80 91 2e 21 	lds	r24, 0x212E
    22da:	90 91 2f 21 	lds	r25, 0x212F
    22de:	0e 94 2d 43 	call	0x865a	; 0x865a <__fixsfsi>
    22e2:	65 31       	cpi	r22, 0x15	; 21
    22e4:	71 05       	cpc	r23, r1
    22e6:	09 f4       	brne	.+2      	; 0x22ea <gc_execute_block+0xae>
    22e8:	8f c0       	rjmp	.+286    	; 0x2408 <gc_execute_block+0x1cc>
    22ea:	66 31       	cpi	r22, 0x16	; 22
    22ec:	71 05       	cpc	r23, r1
    22ee:	84 f5       	brge	.+96     	; 0x2350 <gc_execute_block+0x114>
    22f0:	64 30       	cpi	r22, 0x04	; 4
    22f2:	71 05       	cpc	r23, r1
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <gc_execute_block+0xbc>
    22f6:	6d c0       	rjmp	.+218    	; 0x23d2 <gc_execute_block+0x196>
    22f8:	65 30       	cpi	r22, 0x05	; 5
    22fa:	71 05       	cpc	r23, r1
    22fc:	a4 f4       	brge	.+40     	; 0x2326 <gc_execute_block+0xea>
    22fe:	61 30       	cpi	r22, 0x01	; 1
    2300:	71 05       	cpc	r23, r1
    2302:	09 f4       	brne	.+2      	; 0x2306 <gc_execute_block+0xca>
    2304:	57 c0       	rjmp	.+174    	; 0x23b4 <gc_execute_block+0x178>
    2306:	62 30       	cpi	r22, 0x02	; 2
    2308:	71 05       	cpc	r23, r1
    230a:	24 f4       	brge	.+8      	; 0x2314 <gc_execute_block+0xd8>
    230c:	67 2b       	or	r22, r23
    230e:	09 f4       	brne	.+2      	; 0x2312 <gc_execute_block+0xd6>
    2310:	4c c0       	rjmp	.+152    	; 0x23aa <gc_execute_block+0x16e>
    2312:	c7 c0       	rjmp	.+398    	; 0x24a2 <gc_execute_block+0x266>
    2314:	62 30       	cpi	r22, 0x02	; 2
    2316:	71 05       	cpc	r23, r1
    2318:	09 f4       	brne	.+2      	; 0x231c <gc_execute_block+0xe0>
    231a:	51 c0       	rjmp	.+162    	; 0x23be <gc_execute_block+0x182>
    231c:	63 30       	cpi	r22, 0x03	; 3
    231e:	71 05       	cpc	r23, r1
    2320:	09 f0       	breq	.+2      	; 0x2324 <gc_execute_block+0xe8>
    2322:	bf c0       	rjmp	.+382    	; 0x24a2 <gc_execute_block+0x266>
    2324:	51 c0       	rjmp	.+162    	; 0x23c8 <gc_execute_block+0x18c>
    2326:	62 31       	cpi	r22, 0x12	; 18
    2328:	71 05       	cpc	r23, r1
    232a:	09 f4       	brne	.+2      	; 0x232e <gc_execute_block+0xf2>
    232c:	5c c0       	rjmp	.+184    	; 0x23e6 <gc_execute_block+0x1aa>
    232e:	63 31       	cpi	r22, 0x13	; 19
    2330:	71 05       	cpc	r23, r1
    2332:	2c f4       	brge	.+10     	; 0x233e <gc_execute_block+0x102>
    2334:	61 31       	cpi	r22, 0x11	; 17
    2336:	71 05       	cpc	r23, r1
    2338:	09 f0       	breq	.+2      	; 0x233c <gc_execute_block+0x100>
    233a:	b3 c0       	rjmp	.+358    	; 0x24a2 <gc_execute_block+0x266>
    233c:	4d c0       	rjmp	.+154    	; 0x23d8 <gc_execute_block+0x19c>
    233e:	63 31       	cpi	r22, 0x13	; 19
    2340:	71 05       	cpc	r23, r1
    2342:	09 f4       	brne	.+2      	; 0x2346 <gc_execute_block+0x10a>
    2344:	57 c0       	rjmp	.+174    	; 0x23f4 <gc_execute_block+0x1b8>
    2346:	64 31       	cpi	r22, 0x14	; 20
    2348:	71 05       	cpc	r23, r1
    234a:	09 f0       	breq	.+2      	; 0x234e <gc_execute_block+0x112>
    234c:	aa c0       	rjmp	.+340    	; 0x24a2 <gc_execute_block+0x266>
    234e:	59 c0       	rjmp	.+178    	; 0x2402 <gc_execute_block+0x1c6>
    2350:	6a 35       	cpi	r22, 0x5A	; 90
    2352:	71 05       	cpc	r23, r1
    2354:	09 f4       	brne	.+2      	; 0x2358 <gc_execute_block+0x11c>
    2356:	64 c0       	rjmp	.+200    	; 0x2420 <gc_execute_block+0x1e4>
    2358:	6b 35       	cpi	r22, 0x5B	; 91
    235a:	71 05       	cpc	r23, r1
    235c:	ac f4       	brge	.+42     	; 0x2388 <gc_execute_block+0x14c>
    235e:	6e 31       	cpi	r22, 0x1E	; 30
    2360:	71 05       	cpc	r23, r1
    2362:	09 f4       	brne	.+2      	; 0x2366 <gc_execute_block+0x12a>
    2364:	54 c0       	rjmp	.+168    	; 0x240e <gc_execute_block+0x1d2>
    2366:	6f 31       	cpi	r22, 0x1F	; 31
    2368:	71 05       	cpc	r23, r1
    236a:	2c f4       	brge	.+10     	; 0x2376 <gc_execute_block+0x13a>
    236c:	6c 31       	cpi	r22, 0x1C	; 28
    236e:	71 05       	cpc	r23, r1
    2370:	09 f0       	breq	.+2      	; 0x2374 <gc_execute_block+0x138>
    2372:	97 c0       	rjmp	.+302    	; 0x24a2 <gc_execute_block+0x266>
    2374:	4c c0       	rjmp	.+152    	; 0x240e <gc_execute_block+0x1d2>
    2376:	65 33       	cpi	r22, 0x35	; 53
    2378:	71 05       	cpc	r23, r1
    237a:	09 f4       	brne	.+2      	; 0x237e <gc_execute_block+0x142>
    237c:	4b c0       	rjmp	.+150    	; 0x2414 <gc_execute_block+0x1d8>
    237e:	60 35       	cpi	r22, 0x50	; 80
    2380:	71 05       	cpc	r23, r1
    2382:	09 f0       	breq	.+2      	; 0x2386 <gc_execute_block+0x14a>
    2384:	8e c0       	rjmp	.+284    	; 0x24a2 <gc_execute_block+0x266>
    2386:	49 c0       	rjmp	.+146    	; 0x241a <gc_execute_block+0x1de>
    2388:	6c 35       	cpi	r22, 0x5C	; 92
    238a:	71 05       	cpc	r23, r1
    238c:	09 f4       	brne	.+2      	; 0x2390 <gc_execute_block+0x154>
    238e:	4e c0       	rjmp	.+156    	; 0x242c <gc_execute_block+0x1f0>
    2390:	6c 35       	cpi	r22, 0x5C	; 92
    2392:	71 05       	cpc	r23, r1
    2394:	0c f4       	brge	.+2      	; 0x2398 <gc_execute_block+0x15c>
    2396:	47 c0       	rjmp	.+142    	; 0x2426 <gc_execute_block+0x1ea>
    2398:	6d 35       	cpi	r22, 0x5D	; 93
    239a:	71 05       	cpc	r23, r1
    239c:	09 f4       	brne	.+2      	; 0x23a0 <gc_execute_block+0x164>
    239e:	49 c0       	rjmp	.+146    	; 0x2432 <gc_execute_block+0x1f6>
    23a0:	6e 35       	cpi	r22, 0x5E	; 94
    23a2:	71 05       	cpc	r23, r1
    23a4:	09 f0       	breq	.+2      	; 0x23a8 <gc_execute_block+0x16c>
    23a6:	7d c0       	rjmp	.+250    	; 0x24a2 <gc_execute_block+0x266>
    23a8:	47 c0       	rjmp	.+142    	; 0x2438 <gc_execute_block+0x1fc>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    23aa:	f0 92 7f 21 	sts	0x217F, r15
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    23ae:	10 92 35 21 	sts	0x2135, r1
    23b2:	88 c0       	rjmp	.+272    	; 0x24c4 <gc_execute_block+0x288>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    23b4:	f0 92 7f 21 	sts	0x217F, r15
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    23b8:	f0 92 35 21 	sts	0x2135, r15
    23bc:	83 c0       	rjmp	.+262    	; 0x24c4 <gc_execute_block+0x288>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    23be:	f0 92 7f 21 	sts	0x217F, r15
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    23c2:	e0 92 35 21 	sts	0x2135, r14
    23c6:	7e c0       	rjmp	.+252    	; 0x24c4 <gc_execute_block+0x288>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    23c8:	f0 92 7f 21 	sts	0x217F, r15
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    23cc:	d0 92 35 21 	sts	0x2135, r13
    23d0:	79 c0       	rjmp	.+242    	; 0x24c4 <gc_execute_block+0x288>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    23d2:	e0 92 7f 21 	sts	0x217F, r14
    23d6:	76 c0       	rjmp	.+236    	; 0x24c4 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23d8:	10 92 77 21 	sts	0x2177, r1
	gc.plane_axis_1 = axis_1;
    23dc:	f0 92 78 21 	sts	0x2178, r15
	gc.plane_axis_2 = axis_2;
    23e0:	e0 92 79 21 	sts	0x2179, r14
    23e4:	6f c0       	rjmp	.+222    	; 0x24c4 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23e6:	10 92 77 21 	sts	0x2177, r1
	gc.plane_axis_1 = axis_1;
    23ea:	e0 92 78 21 	sts	0x2178, r14
	gc.plane_axis_2 = axis_2;
    23ee:	f0 92 79 21 	sts	0x2179, r15
    23f2:	68 c0       	rjmp	.+208    	; 0x24c4 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23f4:	f0 92 77 21 	sts	0x2177, r15
	gc.plane_axis_1 = axis_1;
    23f8:	e0 92 78 21 	sts	0x2178, r14
	gc.plane_axis_2 = axis_2;
    23fc:	10 92 79 21 	sts	0x2179, r1
    2400:	61 c0       	rjmp	.+194    	; 0x24c4 <gc_execute_block+0x288>

					case 17: { select_plane(X, Y, Z); break; }
					case 18: { select_plane(X, Z, Y); break; }
					case 19: { select_plane(Y, Z, X); break; }

					case 20: { gc.inches_mode = TRUE; break; }
    2402:	f0 92 37 21 	sts	0x2137, r15
    2406:	5e c0       	rjmp	.+188    	; 0x24c4 <gc_execute_block+0x288>
					case 21: { gc.inches_mode = FALSE; break; }
    2408:	10 92 37 21 	sts	0x2137, r1
    240c:	5b c0       	rjmp	.+182    	; 0x24c4 <gc_execute_block+0x288>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    240e:	d0 92 7f 21 	sts	0x217F, r13
    2412:	58 c0       	rjmp	.+176    	; 0x24c4 <gc_execute_block+0x288>

					case 53: { gc.absolute_override = TRUE; break; }
    2414:	f0 92 7e 21 	sts	0x217E, r15
    2418:	55 c0       	rjmp	.+170    	; 0x24c4 <gc_execute_block+0x288>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    241a:	60 92 35 21 	sts	0x2135, r6
    241e:	52 c0       	rjmp	.+164    	; 0x24c4 <gc_execute_block+0x288>
					case 90: { gc.absolute_mode = TRUE; break; }
    2420:	f0 92 38 21 	sts	0x2138, r15
    2424:	4f c0       	rjmp	.+158    	; 0x24c4 <gc_execute_block+0x288>
					case 91: { gc.absolute_mode = FALSE; break; }
    2426:	10 92 38 21 	sts	0x2138, r1
    242a:	4c c0       	rjmp	.+152    	; 0x24c4 <gc_execute_block+0x288>
					case 92: { gc.set_origin_mode = TRUE; break; }
    242c:	f0 92 3a 21 	sts	0x213A, r15
    2430:	49 c0       	rjmp	.+146    	; 0x24c4 <gc_execute_block+0x288>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    2432:	f0 92 36 21 	sts	0x2136, r15
    2436:	46 c0       	rjmp	.+140    	; 0x24c4 <gc_execute_block+0x288>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2438:	10 92 36 21 	sts	0x2136, r1
    243c:	43 c0       	rjmp	.+134    	; 0x24c4 <gc_execute_block+0x288>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    243e:	60 91 2c 21 	lds	r22, 0x212C
    2442:	70 91 2d 21 	lds	r23, 0x212D
    2446:	80 91 2e 21 	lds	r24, 0x212E
    244a:	90 91 2f 21 	lds	r25, 0x212F
    244e:	0e 94 2d 43 	call	0x865a	; 0x865a <__fixsfsi>
    2452:	63 30       	cpi	r22, 0x03	; 3
    2454:	71 05       	cpc	r23, r1
    2456:	e1 f0       	breq	.+56     	; 0x2490 <gc_execute_block+0x254>
    2458:	64 30       	cpi	r22, 0x04	; 4
    245a:	71 05       	cpc	r23, r1
    245c:	34 f4       	brge	.+12     	; 0x246a <gc_execute_block+0x22e>
    245e:	77 fd       	sbrc	r23, 7
    2460:	20 c0       	rjmp	.+64     	; 0x24a2 <gc_execute_block+0x266>
    2462:	62 30       	cpi	r22, 0x02	; 2
    2464:	71 05       	cpc	r23, r1
    2466:	74 f0       	brlt	.+28     	; 0x2484 <gc_execute_block+0x248>
    2468:	10 c0       	rjmp	.+32     	; 0x248a <gc_execute_block+0x24e>
    246a:	65 30       	cpi	r22, 0x05	; 5
    246c:	71 05       	cpc	r23, r1
    246e:	b1 f0       	breq	.+44     	; 0x249c <gc_execute_block+0x260>
    2470:	65 30       	cpi	r22, 0x05	; 5
    2472:	71 05       	cpc	r23, r1
    2474:	84 f0       	brlt	.+32     	; 0x2496 <gc_execute_block+0x25a>
    2476:	6e 31       	cpi	r22, 0x1E	; 30
    2478:	71 05       	cpc	r23, r1
    247a:	39 f0       	breq	.+14     	; 0x248a <gc_execute_block+0x24e>
    247c:	6c 33       	cpi	r22, 0x3C	; 60
    247e:	71 05       	cpc	r23, r1
    2480:	81 f4       	brne	.+32     	; 0x24a2 <gc_execute_block+0x266>
    2482:	03 c0       	rjmp	.+6      	; 0x248a <gc_execute_block+0x24e>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    2484:	f0 92 34 21 	sts	0x2134, r15
    2488:	1d c0       	rjmp	.+58     	; 0x24c4 <gc_execute_block+0x288>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    248a:	e0 92 34 21 	sts	0x2134, r14
    248e:	1a c0       	rjmp	.+52     	; 0x24c4 <gc_execute_block+0x288>
					case 3: gc.spindle_direction = 1; break;
    2490:	f0 92 7b 21 	sts	0x217B, r15
    2494:	17 c0       	rjmp	.+46     	; 0x24c4 <gc_execute_block+0x288>
					case 4: gc.spindle_direction = -1; break;
    2496:	70 92 7b 21 	sts	0x217B, r7
    249a:	14 c0       	rjmp	.+40     	; 0x24c4 <gc_execute_block+0x288>
					case 5: gc.spindle_direction = 0; break;
    249c:	10 92 7b 21 	sts	0x217B, r1
    24a0:	11 c0       	rjmp	.+34     	; 0x24c4 <gc_execute_block+0x288>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    24a2:	c0 92 2a 21 	sts	0x212A, r12
    24a6:	0e c0       	rjmp	.+28     	; 0x24c4 <gc_execute_block+0x288>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    24a8:	60 91 2c 21 	lds	r22, 0x212C
    24ac:	70 91 2d 21 	lds	r23, 0x212D
    24b0:	80 91 2e 21 	lds	r24, 0x212E
    24b4:	90 91 2f 21 	lds	r25, 0x212F
    24b8:	0e 94 2e 46 	call	0x8c5c	; 0x8c5c <trunc>
    24bc:	0e 94 32 43 	call	0x8664	; 0x8664 <__fixunssfsi>
    24c0:	60 93 7a 21 	sts	0x217A, r22
		}
		if(gc.status) {
    24c4:	80 91 2a 21 	lds	r24, 0x212A
    24c8:	88 23       	and	r24, r24
    24ca:	69 f4       	brne	.+26     	; 0x24e6 <gc_execute_block+0x2aa>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    24cc:	8b e2       	ldi	r24, 0x2B	; 43
    24ce:	91 e2       	ldi	r25, 0x21	; 33
    24d0:	6c e2       	ldi	r22, 0x2C	; 44
    24d2:	71 e2       	ldi	r23, 0x21	; 33
    24d4:	40 e3       	ldi	r20, 0x30	; 48
    24d6:	51 e2       	ldi	r21, 0x21	; 33
    24d8:	94 01       	movw	r18, r8
    24da:	85 01       	movw	r16, r10
    24dc:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_gc_next_statement>
    24e0:	89 2b       	or	r24, r25
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <gc_execute_block+0x2aa>
    24e4:	e9 ce       	rjmp	.-558    	; 0x22b8 <gc_execute_block+0x7c>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    24e6:	80 91 2a 21 	lds	r24, 0x212A
    24ea:	88 23       	and	r24, r24
    24ec:	09 f0       	breq	.+2      	; 0x24f0 <gc_execute_block+0x2b4>
    24ee:	96 c3       	rjmp	.+1836   	; 0x2c1c <gc_execute_block+0x9e0>
		return(gc.status); 
	}

	i = 0;
    24f0:	19 82       	std	Y+1, r1	; 0x01
    24f2:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    24f4:	eb e6       	ldi	r30, 0x6B	; 107
    24f6:	f1 e2       	ldi	r31, 0x21	; 33
    24f8:	8c e0       	ldi	r24, 0x0C	; 12
    24fa:	df 01       	movw	r26, r30
    24fc:	1d 92       	st	X+, r1
    24fe:	8a 95       	dec	r24
    2500:	e9 f7       	brne	.-6      	; 0x24fc <gc_execute_block+0x2c0>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    2502:	df 01       	movw	r26, r30
    2504:	1c 97       	sbiw	r26, 0x0c	; 12
    2506:	78 97       	sbiw	r30, 0x18	; 24
    2508:	8c e0       	ldi	r24, 0x0C	; 12
    250a:	01 90       	ld	r0, Z+
    250c:	0d 92       	st	X+, r0
    250e:	81 50       	subi	r24, 0x01	; 1
    2510:	e1 f7       	brne	.-8      	; 0x250a <gc_execute_block+0x2ce>
    2512:	c6 c0       	rjmp	.+396    	; 0x26a0 <gc_execute_block+0x464>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2514:	c0 90 2c 21 	lds	r12, 0x212C
    2518:	d0 90 2d 21 	lds	r13, 0x212D
    251c:	e0 90 2e 21 	lds	r14, 0x212E
    2520:	f0 90 2f 21 	lds	r15, 0x212F
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    2524:	80 91 37 21 	lds	r24, 0x2137
    2528:	88 23       	and	r24, r24
    252a:	19 f4       	brne	.+6      	; 0x2532 <gc_execute_block+0x2f6>
    252c:	a7 01       	movw	r20, r14
    252e:	96 01       	movw	r18, r12
    2530:	0a c0       	rjmp	.+20     	; 0x2546 <gc_execute_block+0x30a>
    2532:	c7 01       	movw	r24, r14
    2534:	b6 01       	movw	r22, r12
    2536:	25 e8       	ldi	r18, 0x85	; 133
    2538:	32 e4       	ldi	r19, 0x42	; 66
    253a:	41 e2       	ldi	r20, 0x21	; 33
    253c:	5d e3       	ldi	r21, 0x3D	; 61
    253e:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2542:	9b 01       	movw	r18, r22
    2544:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2546:	20 93 4b 21 	sts	0x214B, r18
    254a:	30 93 4c 21 	sts	0x214C, r19
    254e:	40 93 4d 21 	sts	0x214D, r20
    2552:	50 93 4e 21 	sts	0x214E, r21
		switch(gc.letter) {
    2556:	00 91 2b 21 	lds	r16, 0x212B
    255a:	00 35       	cpi	r16, 0x50	; 80
    255c:	09 f4       	brne	.+2      	; 0x2560 <gc_execute_block+0x324>
    255e:	47 c0       	rjmp	.+142    	; 0x25ee <gc_execute_block+0x3b2>
    2560:	01 35       	cpi	r16, 0x51	; 81
    2562:	58 f4       	brcc	.+22     	; 0x257a <gc_execute_block+0x33e>
    2564:	06 34       	cpi	r16, 0x46	; 70
    2566:	c1 f0       	breq	.+48     	; 0x2598 <gc_execute_block+0x35c>
    2568:	06 34       	cpi	r16, 0x46	; 70
    256a:	08 f4       	brcc	.+2      	; 0x256e <gc_execute_block+0x332>
    256c:	9f c0       	rjmp	.+318    	; 0x26ac <gc_execute_block+0x470>
    256e:	80 2f       	mov	r24, r16
    2570:	89 54       	subi	r24, 0x49	; 73
    2572:	83 30       	cpi	r24, 0x03	; 3
    2574:	08 f0       	brcs	.+2      	; 0x2578 <gc_execute_block+0x33c>
    2576:	9a c0       	rjmp	.+308    	; 0x26ac <gc_execute_block+0x470>
    2578:	2d c0       	rjmp	.+90     	; 0x25d4 <gc_execute_block+0x398>
    257a:	03 35       	cpi	r16, 0x53	; 83
    257c:	09 f4       	brne	.+2      	; 0x2580 <gc_execute_block+0x344>
    257e:	4b c0       	rjmp	.+150    	; 0x2616 <gc_execute_block+0x3da>
    2580:	04 35       	cpi	r16, 0x54	; 84
    2582:	20 f4       	brcc	.+8      	; 0x258c <gc_execute_block+0x350>
    2584:	02 35       	cpi	r16, 0x52	; 82
    2586:	09 f0       	breq	.+2      	; 0x258a <gc_execute_block+0x34e>
    2588:	91 c0       	rjmp	.+290    	; 0x26ac <gc_execute_block+0x470>
    258a:	3a c0       	rjmp	.+116    	; 0x2600 <gc_execute_block+0x3c4>
    258c:	80 2f       	mov	r24, r16
    258e:	88 55       	subi	r24, 0x58	; 88
    2590:	83 30       	cpi	r24, 0x03	; 3
    2592:	08 f0       	brcs	.+2      	; 0x2596 <gc_execute_block+0x35a>
    2594:	8b c0       	rjmp	.+278    	; 0x26ac <gc_execute_block+0x470>
    2596:	48 c0       	rjmp	.+144    	; 0x2628 <gc_execute_block+0x3ec>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    2598:	80 91 36 21 	lds	r24, 0x2136
    259c:	88 23       	and	r24, r24
    259e:	49 f0       	breq	.+18     	; 0x25b2 <gc_execute_block+0x376>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    25a0:	20 93 4f 21 	sts	0x214F, r18
    25a4:	30 93 50 21 	sts	0x2150, r19
    25a8:	40 93 51 21 	sts	0x2151, r20
    25ac:	50 93 52 21 	sts	0x2152, r21
    25b0:	7d c0       	rjmp	.+250    	; 0x26ac <gc_execute_block+0x470>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    25b2:	ca 01       	movw	r24, r20
    25b4:	b9 01       	movw	r22, r18
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e7       	ldi	r20, 0x70	; 112
    25bc:	52 e4       	ldi	r21, 0x42	; 66
    25be:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    25c2:	60 93 43 21 	sts	0x2143, r22
    25c6:	70 93 44 21 	sts	0x2144, r23
    25ca:	80 93 45 21 	sts	0x2145, r24
    25ce:	90 93 46 21 	sts	0x2146, r25
    25d2:	6c c0       	rjmp	.+216    	; 0x26ac <gc_execute_block+0x470>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    25d4:	e0 2f       	mov	r30, r16
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	ee 0f       	add	r30, r30
    25da:	ff 1f       	adc	r31, r31
    25dc:	ee 0f       	add	r30, r30
    25de:	ff 1f       	adc	r31, r31
    25e0:	e9 5b       	subi	r30, 0xB9	; 185
    25e2:	ff 4d       	sbci	r31, 0xDF	; 223
    25e4:	20 83       	st	Z, r18
    25e6:	31 83       	std	Z+1, r19	; 0x01
    25e8:	42 83       	std	Z+2, r20	; 0x02
    25ea:	53 83       	std	Z+3, r21	; 0x03
    25ec:	5f c0       	rjmp	.+190    	; 0x26ac <gc_execute_block+0x470>
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
    25ee:	c0 92 3b 21 	sts	0x213B, r12
    25f2:	d0 92 3c 21 	sts	0x213C, r13
    25f6:	e0 92 3d 21 	sts	0x213D, r14
    25fa:	f0 92 3e 21 	sts	0x213E, r15
    25fe:	56 c0       	rjmp	.+172    	; 0x26ac <gc_execute_block+0x470>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    2600:	20 93 3f 21 	sts	0x213F, r18
    2604:	30 93 40 21 	sts	0x2140, r19
    2608:	40 93 41 21 	sts	0x2141, r20
    260c:	50 93 42 21 	sts	0x2142, r21
    2610:	70 92 39 21 	sts	0x2139, r7
    2614:	4b c0       	rjmp	.+150    	; 0x26ac <gc_execute_block+0x470>
			case 'S': gc.spindle_speed = gc.value; break;
    2616:	c7 01       	movw	r24, r14
    2618:	b6 01       	movw	r22, r12
    261a:	0e 94 2d 43 	call	0x865a	; 0x865a <__fixsfsi>
    261e:	60 93 7c 21 	sts	0x217C, r22
    2622:	70 93 7d 21 	sts	0x217D, r23
    2626:	42 c0       	rjmp	.+132    	; 0x26ac <gc_execute_block+0x470>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2628:	80 91 3a 21 	lds	r24, 0x213A
    262c:	88 23       	and	r24, r24
    262e:	69 f0       	breq	.+26     	; 0x264a <gc_execute_block+0x40e>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    2630:	e0 2f       	mov	r30, r16
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	ee 0f       	add	r30, r30
    2636:	ff 1f       	adc	r31, r31
    2638:	ee 0f       	add	r30, r30
    263a:	ff 1f       	adc	r31, r31
    263c:	e6 53       	subi	r30, 0x36	; 54
    263e:	f0 4e       	sbci	r31, 0xE0	; 224
    2640:	21 a7       	std	Z+41, r18	; 0x29
    2642:	32 a7       	std	Z+42, r19	; 0x2a
    2644:	43 a7       	std	Z+43, r20	; 0x2b
    2646:	54 a7       	std	Z+44, r21	; 0x2c
    2648:	31 c0       	rjmp	.+98     	; 0x26ac <gc_execute_block+0x470>
				} else if (gc.absolute_mode || gc.absolute_override) {
    264a:	80 91 38 21 	lds	r24, 0x2138
    264e:	88 23       	and	r24, r24
    2650:	21 f4       	brne	.+8      	; 0x265a <gc_execute_block+0x41e>
    2652:	80 91 7e 21 	lds	r24, 0x217E
    2656:	88 23       	and	r24, r24
    2658:	69 f0       	breq	.+26     	; 0x2674 <gc_execute_block+0x438>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    265a:	e0 2f       	mov	r30, r16
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	ee 0f       	add	r30, r30
    2660:	ff 1f       	adc	r31, r31
    2662:	ee 0f       	add	r30, r30
    2664:	ff 1f       	adc	r31, r31
    2666:	e6 53       	subi	r30, 0x36	; 54
    2668:	f0 4e       	sbci	r31, 0xE0	; 224
    266a:	25 ab       	std	Z+53, r18	; 0x35
    266c:	36 ab       	std	Z+54, r19	; 0x36
    266e:	47 ab       	std	Z+55, r20	; 0x37
    2670:	50 af       	std	Z+56, r21	; 0x38
    2672:	1c c0       	rjmp	.+56     	; 0x26ac <gc_execute_block+0x470>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    2674:	10 e0       	ldi	r17, 0x00	; 0
    2676:	00 0f       	add	r16, r16
    2678:	11 1f       	adc	r17, r17
    267a:	00 0f       	add	r16, r16
    267c:	11 1f       	adc	r17, r17
    267e:	06 53       	subi	r16, 0x36	; 54
    2680:	10 4e       	sbci	r17, 0xE0	; 224
    2682:	f8 01       	movw	r30, r16
    2684:	65 a9       	ldd	r22, Z+53	; 0x35
    2686:	76 a9       	ldd	r23, Z+54	; 0x36
    2688:	87 a9       	ldd	r24, Z+55	; 0x37
    268a:	90 ad       	ldd	r25, Z+56	; 0x38
    268c:	0e 94 1f 42 	call	0x843e	; 0x843e <__addsf3>
    2690:	d8 01       	movw	r26, r16
    2692:	d5 96       	adiw	r26, 0x35	; 53
    2694:	6d 93       	st	X+, r22
    2696:	7d 93       	st	X+, r23
    2698:	8d 93       	st	X+, r24
    269a:	9c 93       	st	X, r25
    269c:	d8 97       	sbiw	r26, 0x38	; 56
    269e:	06 c0       	rjmp	.+12     	; 0x26ac <gc_execute_block+0x470>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    26a0:	5e 01       	movw	r10, r28
    26a2:	08 94       	sec
    26a4:	a1 1c       	adc	r10, r1
    26a6:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    26a8:	77 24       	eor	r7, r7
    26aa:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    26ac:	8b e2       	ldi	r24, 0x2B	; 43
    26ae:	91 e2       	ldi	r25, 0x21	; 33
    26b0:	6c e2       	ldi	r22, 0x2C	; 44
    26b2:	71 e2       	ldi	r23, 0x21	; 33
    26b4:	40 e3       	ldi	r20, 0x30	; 48
    26b6:	51 e2       	ldi	r21, 0x21	; 33
    26b8:	94 01       	movw	r18, r8
    26ba:	85 01       	movw	r16, r10
    26bc:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_gc_next_statement>
    26c0:	89 2b       	or	r24, r25
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <gc_execute_block+0x48a>
    26c4:	27 cf       	rjmp	.-434    	; 0x2514 <gc_execute_block+0x2d8>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    26c6:	80 91 2a 21 	lds	r24, 0x212A
    26ca:	88 23       	and	r24, r24
    26cc:	09 f0       	breq	.+2      	; 0x26d0 <gc_execute_block+0x494>
    26ce:	a6 c2       	rjmp	.+1356   	; 0x2c1c <gc_execute_block+0x9e0>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    26d0:	80 91 7b 21 	lds	r24, 0x217B
    26d4:	88 23       	and	r24, r24
    26d6:	71 f0       	breq	.+28     	; 0x26f4 <gc_execute_block+0x4b8>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    26d8:	40 91 7c 21 	lds	r20, 0x217C
    26dc:	50 91 7d 21 	lds	r21, 0x217D
    26e0:	66 27       	eor	r22, r22
    26e2:	57 fd       	sbrc	r21, 7
    26e4:	60 95       	com	r22
    26e6:	76 2f       	mov	r23, r22
    26e8:	99 27       	eor	r25, r25
    26ea:	87 fd       	sbrc	r24, 7
    26ec:	90 95       	com	r25
    26ee:	0e 94 14 24 	call	0x4828	; 0x4828 <spindle_run>
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <gc_execute_block+0x4bc>
	} else {
		spindle_stop();
    26f4:	0e 94 24 24 	call	0x4848	; 0x4848 <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    26f8:	80 91 7f 21 	lds	r24, 0x217F
    26fc:	82 30       	cpi	r24, 0x02	; 2
    26fe:	49 f0       	breq	.+18     	; 0x2712 <gc_execute_block+0x4d6>
    2700:	83 30       	cpi	r24, 0x03	; 3
    2702:	21 f0       	breq	.+8      	; 0x270c <gc_execute_block+0x4d0>
    2704:	81 30       	cpi	r24, 0x01	; 1
    2706:	09 f0       	breq	.+2      	; 0x270a <gc_execute_block+0x4ce>
    2708:	7a c2       	rjmp	.+1268   	; 0x2bfe <gc_execute_block+0x9c2>
    270a:	0e c0       	rjmp	.+28     	; 0x2728 <gc_execute_block+0x4ec>
		case NEXT_ACTION_DEFAULT: break;		// nothing to do here
    	case NEXT_ACTION_GO_HOME: mc_go_home(); break;
    270c:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <mc_go_home>
    2710:	76 c2       	rjmp	.+1260   	; 0x2bfe <gc_execute_block+0x9c2>
		case NEXT_ACTION_DWELL: mc_dwell(gc.dwell_time); break;
    2712:	60 91 3b 21 	lds	r22, 0x213B
    2716:	70 91 3c 21 	lds	r23, 0x213C
    271a:	80 91 3d 21 	lds	r24, 0x213D
    271e:	90 91 3e 21 	lds	r25, 0x213E
    2722:	0e 94 34 1c 	call	0x3868	; 0x3868 <mc_dwell>
    2726:	6b c2       	rjmp	.+1238   	; 0x2bfe <gc_execute_block+0x9c2>
		case NEXT_ACTION_MOTION: 
			switch (gc.motion_mode) {
    2728:	b0 91 35 21 	lds	r27, 0x2135
    272c:	b8 8f       	std	Y+24, r27	; 0x18
    272e:	b2 30       	cpi	r27, 0x02	; 2
    2730:	20 f0       	brcs	.+8      	; 0x273a <gc_execute_block+0x4fe>
    2732:	b4 30       	cpi	r27, 0x04	; 4
    2734:	08 f0       	brcs	.+2      	; 0x2738 <gc_execute_block+0x4fc>
    2736:	63 c2       	rjmp	.+1222   	; 0x2bfe <gc_execute_block+0x9c2>
    2738:	31 c0       	rjmp	.+98     	; 0x279c <gc_execute_block+0x560>
				case MOTION_MODE_CANCEL: break;
				case MOTION_MODE_RAPID_LINEAR:
				case MOTION_MODE_LINEAR:
					gc.status = mc_line_nonblock(gc.target[X], gc.target[Y], gc.target[Z], 
    273a:	60 91 5f 21 	lds	r22, 0x215F
    273e:	70 91 60 21 	lds	r23, 0x2160
    2742:	80 91 61 21 	lds	r24, 0x2161
    2746:	90 91 62 21 	lds	r25, 0x2162
    274a:	20 91 63 21 	lds	r18, 0x2163
    274e:	30 91 64 21 	lds	r19, 0x2164
    2752:	40 91 65 21 	lds	r20, 0x2165
    2756:	50 91 66 21 	lds	r21, 0x2166
    275a:	e0 90 67 21 	lds	r14, 0x2167
    275e:	f0 90 68 21 	lds	r15, 0x2168
    2762:	00 91 69 21 	lds	r16, 0x2169
    2766:	10 91 6a 21 	lds	r17, 0x216A
    276a:	80 90 36 21 	lds	r8, 0x2136
    276e:	88 20       	and	r8, r8
    2770:	49 f0       	breq	.+18     	; 0x2784 <gc_execute_block+0x548>
    2772:	a0 90 4f 21 	lds	r10, 0x214F
    2776:	b0 90 50 21 	lds	r11, 0x2150
    277a:	c0 90 51 21 	lds	r12, 0x2151
    277e:	d0 90 52 21 	lds	r13, 0x2152
    2782:	08 c0       	rjmp	.+16     	; 0x2794 <gc_execute_block+0x558>
    2784:	a0 90 43 21 	lds	r10, 0x2143
    2788:	b0 90 44 21 	lds	r11, 0x2144
    278c:	c0 90 45 21 	lds	r12, 0x2145
    2790:	d0 90 46 21 	lds	r13, 0x2146
    2794:	99 24       	eor	r9, r9
    2796:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <mc_line_nonblock>
    279a:	6b c1       	rjmp	.+726    	; 0x2a72 <gc_execute_block+0x836>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    279c:	80 91 39 21 	lds	r24, 0x2139
    27a0:	88 23       	and	r24, r24
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <gc_execute_block+0x56a>
    27a4:	e8 c0       	rjmp	.+464    	; 0x2976 <gc_execute_block+0x73a>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    27a6:	e0 91 77 21 	lds	r30, 0x2177
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	ee 0f       	add	r30, r30
    27ae:	ff 1f       	adc	r31, r31
    27b0:	ee 0f       	add	r30, r30
    27b2:	ff 1f       	adc	r31, r31
    27b4:	e6 5d       	subi	r30, 0xD6	; 214
    27b6:	fe 4d       	sbci	r31, 0xDE	; 222
    27b8:	65 a9       	ldd	r22, Z+53	; 0x35
    27ba:	76 a9       	ldd	r23, Z+54	; 0x36
    27bc:	87 a9       	ldd	r24, Z+55	; 0x37
    27be:	90 ad       	ldd	r25, Z+56	; 0x38
    27c0:	21 a5       	ldd	r18, Z+41	; 0x29
    27c2:	32 a5       	ldd	r19, Z+42	; 0x2a
    27c4:	43 a5       	ldd	r20, Z+43	; 0x2b
    27c6:	54 a5       	ldd	r21, Z+44	; 0x2c
    27c8:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    27cc:	6f 83       	std	Y+7, r22	; 0x07
    27ce:	78 87       	std	Y+8, r23	; 0x08
    27d0:	89 87       	std	Y+9, r24	; 0x09
    27d2:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    27d4:	e0 91 78 21 	lds	r30, 0x2178
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	ee 0f       	add	r30, r30
    27dc:	ff 1f       	adc	r31, r31
    27de:	ee 0f       	add	r30, r30
    27e0:	ff 1f       	adc	r31, r31
    27e2:	e6 5d       	subi	r30, 0xD6	; 214
    27e4:	fe 4d       	sbci	r31, 0xDE	; 222
    27e6:	65 a9       	ldd	r22, Z+53	; 0x35
    27e8:	76 a9       	ldd	r23, Z+54	; 0x36
    27ea:	87 a9       	ldd	r24, Z+55	; 0x37
    27ec:	90 ad       	ldd	r25, Z+56	; 0x38
    27ee:	21 a5       	ldd	r18, Z+41	; 0x29
    27f0:	32 a5       	ldd	r19, Z+42	; 0x2a
    27f2:	43 a5       	ldd	r20, Z+43	; 0x2b
    27f4:	54 a5       	ldd	r21, Z+44	; 0x2c
    27f6:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    27fa:	1b 01       	movw	r2, r22
    27fc:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    27fe:	10 92 6b 21 	sts	0x216B, r1
    2802:	10 92 6c 21 	sts	0x216C, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    2806:	60 90 3f 21 	lds	r6, 0x213F
    280a:	70 90 40 21 	lds	r7, 0x2140
    280e:	80 90 41 21 	lds	r8, 0x2141
    2812:	90 90 42 21 	lds	r9, 0x2142
    2816:	c4 01       	movw	r24, r8
    2818:	b3 01       	movw	r22, r6
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e8       	ldi	r20, 0x80	; 128
    2820:	50 e4       	ldi	r21, 0x40	; 64
    2822:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2826:	a4 01       	movw	r20, r8
    2828:	93 01       	movw	r18, r6
    282a:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    282e:	5b 01       	movw	r10, r22
    2830:	6c 01       	movw	r12, r24
    2832:	6f 81       	ldd	r22, Y+7	; 0x07
    2834:	78 85       	ldd	r23, Y+8	; 0x08
    2836:	89 85       	ldd	r24, Y+9	; 0x09
    2838:	9a 85       	ldd	r25, Y+10	; 0x0a
    283a:	9b 01       	movw	r18, r22
    283c:	ac 01       	movw	r20, r24
    283e:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2842:	7b 01       	movw	r14, r22
    2844:	8c 01       	movw	r16, r24
    2846:	c2 01       	movw	r24, r4
    2848:	b1 01       	movw	r22, r2
    284a:	a2 01       	movw	r20, r4
    284c:	91 01       	movw	r18, r2
    284e:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2852:	9b 01       	movw	r18, r22
    2854:	ac 01       	movw	r20, r24
    2856:	c8 01       	movw	r24, r16
    2858:	b7 01       	movw	r22, r14
    285a:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    285e:	9b 01       	movw	r18, r22
    2860:	ac 01       	movw	r20, r24
    2862:	c6 01       	movw	r24, r12
    2864:	b5 01       	movw	r22, r10
    2866:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    286a:	0e 94 ed 45 	call	0x8bda	; 0x8bda <sqrt>
    286e:	7b 01       	movw	r14, r22
    2870:	8c 01       	movw	r16, r24
    2872:	6f 81       	ldd	r22, Y+7	; 0x07
    2874:	78 85       	ldd	r23, Y+8	; 0x08
    2876:	89 85       	ldd	r24, Y+9	; 0x09
    2878:	9a 85       	ldd	r25, Y+10	; 0x0a
    287a:	a2 01       	movw	r20, r4
    287c:	91 01       	movw	r18, r2
    287e:	0e 94 bb 44 	call	0x8976	; 0x8976 <hypot>
    2882:	9b 01       	movw	r18, r22
    2884:	ac 01       	movw	r20, r24
    2886:	17 fb       	bst	r17, 7
    2888:	10 95       	com	r17
    288a:	17 f9       	bld	r17, 7
    288c:	10 95       	com	r17
    288e:	c8 01       	movw	r24, r16
    2890:	b7 01       	movw	r22, r14
    2892:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    2896:	7b 01       	movw	r14, r22
    2898:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    289a:	a8 01       	movw	r20, r16
    289c:	97 01       	movw	r18, r14
    289e:	0e 94 35 46 	call	0x8c6a	; 0x8c6a <__unordsf2>
    28a2:	88 23       	and	r24, r24
    28a4:	11 f0       	breq	.+4      	; 0x28aa <gc_execute_block+0x66e>
		FAIL(TG_FLOATING_POINT_ERROR); 
    28a6:	8d e0       	ldi	r24, 0x0D	; 13
    28a8:	e4 c0       	rjmp	.+456    	; 0x2a72 <gc_execute_block+0x836>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    28aa:	e8 8d       	ldd	r30, Y+24	; 0x18
    28ac:	e3 30       	cpi	r30, 0x03	; 3
    28ae:	21 f4       	brne	.+8      	; 0x28b8 <gc_execute_block+0x67c>
		h_x2_div_d = -h_x2_div_d;
    28b0:	17 fb       	bst	r17, 7
    28b2:	10 95       	com	r17
    28b4:	17 f9       	bld	r17, 7
    28b6:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    28b8:	c4 01       	movw	r24, r8
    28ba:	b3 01       	movw	r22, r6
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e0       	ldi	r20, 0x00	; 0
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	0e 94 be 42 	call	0x857c	; 0x857c <__cmpsf2>
    28c8:	88 23       	and	r24, r24
    28ca:	24 f4       	brge	.+8      	; 0x28d4 <gc_execute_block+0x698>
		h_x2_div_d = -h_x2_div_d; 
    28cc:	17 fb       	bst	r17, 7
    28ce:	10 95       	com	r17
    28d0:	17 f9       	bld	r17, 7
    28d2:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    28d4:	80 91 77 21 	lds	r24, 0x2177
    28d8:	c8 2e       	mov	r12, r24
    28da:	dd 24       	eor	r13, r13
    28dc:	cc 0c       	add	r12, r12
    28de:	dd 1c       	adc	r13, r13
    28e0:	cc 0c       	add	r12, r12
    28e2:	dd 1c       	adc	r13, r13
    28e4:	2b e6       	ldi	r18, 0x6B	; 107
    28e6:	31 e2       	ldi	r19, 0x21	; 33
    28e8:	c2 0e       	add	r12, r18
    28ea:	d3 1e       	adc	r13, r19
    28ec:	c2 01       	movw	r24, r4
    28ee:	b1 01       	movw	r22, r2
    28f0:	a8 01       	movw	r20, r16
    28f2:	97 01       	movw	r18, r14
    28f4:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    28f8:	9b 01       	movw	r18, r22
    28fa:	ac 01       	movw	r20, r24
    28fc:	6f 81       	ldd	r22, Y+7	; 0x07
    28fe:	78 85       	ldd	r23, Y+8	; 0x08
    2900:	89 85       	ldd	r24, Y+9	; 0x09
    2902:	9a 85       	ldd	r25, Y+10	; 0x0a
    2904:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	5f e3       	ldi	r21, 0x3F	; 63
    2910:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2914:	d6 01       	movw	r26, r12
    2916:	6d 93       	st	X+, r22
    2918:	7d 93       	st	X+, r23
    291a:	8d 93       	st	X+, r24
    291c:	9c 93       	st	X, r25
    291e:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    2920:	80 91 78 21 	lds	r24, 0x2178
    2924:	c8 2e       	mov	r12, r24
    2926:	dd 24       	eor	r13, r13
    2928:	cc 0c       	add	r12, r12
    292a:	dd 1c       	adc	r13, r13
    292c:	cc 0c       	add	r12, r12
    292e:	dd 1c       	adc	r13, r13
    2930:	eb e6       	ldi	r30, 0x6B	; 107
    2932:	f1 e2       	ldi	r31, 0x21	; 33
    2934:	ce 0e       	add	r12, r30
    2936:	df 1e       	adc	r13, r31
    2938:	6f 81       	ldd	r22, Y+7	; 0x07
    293a:	78 85       	ldd	r23, Y+8	; 0x08
    293c:	89 85       	ldd	r24, Y+9	; 0x09
    293e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2940:	a8 01       	movw	r20, r16
    2942:	97 01       	movw	r18, r14
    2944:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2948:	9b 01       	movw	r18, r22
    294a:	ac 01       	movw	r20, r24
    294c:	c2 01       	movw	r24, r4
    294e:	b1 01       	movw	r22, r2
    2950:	0e 94 1f 42 	call	0x843e	; 0x843e <__addsf3>
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e0       	ldi	r20, 0x00	; 0
    295a:	5f e3       	ldi	r21, 0x3F	; 63
    295c:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2960:	d6 01       	movw	r26, r12
    2962:	6d 93       	st	X+, r22
    2964:	7d 93       	st	X+, r23
    2966:	8d 93       	st	X+, r24
    2968:	9c 93       	st	X, r25
    296a:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    296c:	80 91 2a 21 	lds	r24, 0x212A
    2970:	88 23       	and	r24, r24
    2972:	09 f0       	breq	.+2      	; 0x2976 <gc_execute_block+0x73a>
    2974:	44 c1       	rjmp	.+648    	; 0x2bfe <gc_execute_block+0x9c2>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    2976:	e0 91 77 21 	lds	r30, 0x2177
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	ee 0f       	add	r30, r30
    297e:	ff 1f       	adc	r31, r31
    2980:	ee 0f       	add	r30, r30
    2982:	ff 1f       	adc	r31, r31
    2984:	e5 59       	subi	r30, 0x95	; 149
    2986:	fe 4d       	sbci	r31, 0xDE	; 222
    2988:	60 81       	ld	r22, Z
    298a:	71 81       	ldd	r23, Z+1	; 0x01
    298c:	82 81       	ldd	r24, Z+2	; 0x02
    298e:	93 81       	ldd	r25, Z+3	; 0x03
    2990:	90 58       	subi	r25, 0x80	; 128
    2992:	e0 91 78 21 	lds	r30, 0x2178
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	ee 0f       	add	r30, r30
    299a:	ff 1f       	adc	r31, r31
    299c:	ee 0f       	add	r30, r30
    299e:	ff 1f       	adc	r31, r31
    29a0:	e5 59       	subi	r30, 0x95	; 149
    29a2:	fe 4d       	sbci	r31, 0xDE	; 222
    29a4:	20 81       	ld	r18, Z
    29a6:	31 81       	ldd	r19, Z+1	; 0x01
    29a8:	42 81       	ldd	r20, Z+2	; 0x02
    29aa:	53 81       	ldd	r21, Z+3	; 0x03
    29ac:	50 58       	subi	r21, 0x80	; 128
    29ae:	0e 94 df 10 	call	0x21be	; 0x21be <theta>
    29b2:	6f 87       	std	Y+15, r22	; 0x0f
    29b4:	78 8b       	std	Y+16, r23	; 0x10
    29b6:	89 8b       	std	Y+17, r24	; 0x11
    29b8:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    29ba:	9b 01       	movw	r18, r22
    29bc:	ac 01       	movw	r20, r24
    29be:	0e 94 35 46 	call	0x8c6a	; 0x8c6a <__unordsf2>
    29c2:	88 23       	and	r24, r24
    29c4:	09 f0       	breq	.+2      	; 0x29c8 <gc_execute_block+0x78c>
    29c6:	54 c0       	rjmp	.+168    	; 0x2a70 <gc_execute_block+0x834>
		FAIL(TG_ARC_ERROR); 
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    29c8:	e0 91 77 21 	lds	r30, 0x2177
    29cc:	0e 2f       	mov	r16, r30
    29ce:	10 e0       	ldi	r17, 0x00	; 0
    29d0:	e0 91 78 21 	lds	r30, 0x2178
    29d4:	ce 2e       	mov	r12, r30
    29d6:	dd 24       	eor	r13, r13
    29d8:	00 0f       	add	r16, r16
    29da:	11 1f       	adc	r17, r17
    29dc:	00 0f       	add	r16, r16
    29de:	11 1f       	adc	r17, r17
    29e0:	06 5d       	subi	r16, 0xD6	; 214
    29e2:	1e 4d       	sbci	r17, 0xDE	; 222
    29e4:	f8 01       	movw	r30, r16
    29e6:	ef 5b       	subi	r30, 0xBF	; 191
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	d8 01       	movw	r26, r16
    29ec:	d5 96       	adiw	r26, 0x35	; 53
    29ee:	6d 91       	ld	r22, X+
    29f0:	7d 91       	ld	r23, X+
    29f2:	8d 91       	ld	r24, X+
    29f4:	9c 91       	ld	r25, X
    29f6:	d8 97       	sbiw	r26, 0x38	; 56
    29f8:	20 81       	ld	r18, Z
    29fa:	31 81       	ldd	r19, Z+1	; 0x01
    29fc:	42 81       	ldd	r20, Z+2	; 0x02
    29fe:	53 81       	ldd	r21, Z+3	; 0x03
    2a00:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    2a04:	f8 01       	movw	r30, r16
    2a06:	21 a5       	ldd	r18, Z+41	; 0x29
    2a08:	32 a5       	ldd	r19, Z+42	; 0x2a
    2a0a:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a0c:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a0e:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    2a12:	7b 01       	movw	r14, r22
    2a14:	8c 01       	movw	r16, r24
    2a16:	cc 0c       	add	r12, r12
    2a18:	dd 1c       	adc	r13, r13
    2a1a:	cc 0c       	add	r12, r12
    2a1c:	dd 1c       	adc	r13, r13
    2a1e:	2a e2       	ldi	r18, 0x2A	; 42
    2a20:	31 e2       	ldi	r19, 0x21	; 33
    2a22:	c2 0e       	add	r12, r18
    2a24:	d3 1e       	adc	r13, r19
    2a26:	f6 01       	movw	r30, r12
    2a28:	ef 5b       	subi	r30, 0xBF	; 191
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	d6 01       	movw	r26, r12
    2a2e:	d5 96       	adiw	r26, 0x35	; 53
    2a30:	6d 91       	ld	r22, X+
    2a32:	7d 91       	ld	r23, X+
    2a34:	8d 91       	ld	r24, X+
    2a36:	9c 91       	ld	r25, X
    2a38:	d8 97       	sbiw	r26, 0x38	; 56
    2a3a:	20 81       	ld	r18, Z
    2a3c:	31 81       	ldd	r19, Z+1	; 0x01
    2a3e:	42 81       	ldd	r20, Z+2	; 0x02
    2a40:	53 81       	ldd	r21, Z+3	; 0x03
    2a42:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    2a46:	f6 01       	movw	r30, r12
    2a48:	21 a5       	ldd	r18, Z+41	; 0x29
    2a4a:	32 a5       	ldd	r19, Z+42	; 0x2a
    2a4c:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a4e:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a50:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    2a54:	9b 01       	movw	r18, r22
    2a56:	ac 01       	movw	r20, r24
    2a58:	c8 01       	movw	r24, r16
    2a5a:	b7 01       	movw	r22, r14
    2a5c:	0e 94 df 10 	call	0x21be	; 0x21be <theta>
    2a60:	7b 01       	movw	r14, r22
    2a62:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    2a64:	a8 01       	movw	r20, r16
    2a66:	97 01       	movw	r18, r14
    2a68:	0e 94 35 46 	call	0x8c6a	; 0x8c6a <__unordsf2>
    2a6c:	88 23       	and	r24, r24
    2a6e:	21 f0       	breq	.+8      	; 0x2a78 <gc_execute_block+0x83c>
		FAIL(TG_ARC_ERROR); 
    2a70:	8f e0       	ldi	r24, 0x0F	; 15
    2a72:	80 93 2a 21 	sts	0x212A, r24
    2a76:	c3 c0       	rjmp	.+390    	; 0x2bfe <gc_execute_block+0x9c2>
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    2a78:	c8 01       	movw	r24, r16
    2a7a:	b7 01       	movw	r22, r14
    2a7c:	2f 85       	ldd	r18, Y+15	; 0x0f
    2a7e:	38 89       	ldd	r19, Y+16	; 0x10
    2a80:	49 89       	ldd	r20, Y+17	; 0x11
    2a82:	5a 89       	ldd	r21, Y+18	; 0x12
    2a84:	0e 94 be 42 	call	0x857c	; 0x857c <__cmpsf2>
    2a88:	88 23       	and	r24, r24
    2a8a:	54 f4       	brge	.+20     	; 0x2aa0 <gc_execute_block+0x864>
		theta_end += 2*M_PI;
    2a8c:	c8 01       	movw	r24, r16
    2a8e:	b7 01       	movw	r22, r14
    2a90:	2b ed       	ldi	r18, 0xDB	; 219
    2a92:	3f e0       	ldi	r19, 0x0F	; 15
    2a94:	49 ec       	ldi	r20, 0xC9	; 201
    2a96:	50 e4       	ldi	r21, 0x40	; 64
    2a98:	0e 94 1f 42 	call	0x843e	; 0x843e <__addsf3>
    2a9c:	7b 01       	movw	r14, r22
    2a9e:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    2aa0:	c8 01       	movw	r24, r16
    2aa2:	b7 01       	movw	r22, r14
    2aa4:	2f 85       	ldd	r18, Y+15	; 0x0f
    2aa6:	38 89       	ldd	r19, Y+16	; 0x10
    2aa8:	49 89       	ldd	r20, Y+17	; 0x11
    2aaa:	5a 89       	ldd	r21, Y+18	; 0x12
    2aac:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    2ab0:	6b 87       	std	Y+11, r22	; 0x0b
    2ab2:	7c 87       	std	Y+12, r23	; 0x0c
    2ab4:	8d 87       	std	Y+13, r24	; 0x0d
    2ab6:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2ab8:	80 91 35 21 	lds	r24, 0x2135
    2abc:	83 30       	cpi	r24, 0x03	; 3
    2abe:	71 f4       	brne	.+28     	; 0x2adc <gc_execute_block+0x8a0>
		angular_travel = angular_travel - 2*M_PI;
    2ac0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac8:	2b ed       	ldi	r18, 0xDB	; 219
    2aca:	3f e0       	ldi	r19, 0x0F	; 15
    2acc:	49 ec       	ldi	r20, 0xC9	; 201
    2ace:	50 e4       	ldi	r21, 0x40	; 64
    2ad0:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    2ad4:	6b 87       	std	Y+11, r22	; 0x0b
    2ad6:	7c 87       	std	Y+12, r23	; 0x0c
    2ad8:	8d 87       	std	Y+13, r24	; 0x0d
    2ada:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2adc:	80 91 77 21 	lds	r24, 0x2177
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	2d 83       	std	Y+5, r18	; 0x05
    2ae6:	3e 83       	std	Y+6, r19	; 0x06
    2ae8:	f9 01       	movw	r30, r18
    2aea:	ee 0f       	add	r30, r30
    2aec:	ff 1f       	adc	r31, r31
    2aee:	ee 0f       	add	r30, r30
    2af0:	ff 1f       	adc	r31, r31
    2af2:	e5 59       	subi	r30, 0x95	; 149
    2af4:	fe 4d       	sbci	r31, 0xDE	; 222
    2af6:	e0 80       	ld	r14, Z
    2af8:	f1 80       	ldd	r15, Z+1	; 0x01
    2afa:	02 81       	ldd	r16, Z+2	; 0x02
    2afc:	13 81       	ldd	r17, Z+3	; 0x03
    2afe:	80 91 78 21 	lds	r24, 0x2178
    2b02:	a8 2f       	mov	r26, r24
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	ab 83       	std	Y+3, r26	; 0x03
    2b08:	bc 83       	std	Y+4, r27	; 0x04
    2b0a:	fd 01       	movw	r30, r26
    2b0c:	ee 0f       	add	r30, r30
    2b0e:	ff 1f       	adc	r31, r31
    2b10:	ee 0f       	add	r30, r30
    2b12:	ff 1f       	adc	r31, r31
    2b14:	e5 59       	subi	r30, 0x95	; 149
    2b16:	fe 4d       	sbci	r31, 0xDE	; 222
    2b18:	20 81       	ld	r18, Z
    2b1a:	31 81       	ldd	r19, Z+1	; 0x01
    2b1c:	42 81       	ldd	r20, Z+2	; 0x02
    2b1e:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2b20:	80 91 79 21 	lds	r24, 0x2179
    2b24:	28 2e       	mov	r2, r24
    2b26:	33 24       	eor	r3, r3
    2b28:	f1 01       	movw	r30, r2
    2b2a:	ee 0f       	add	r30, r30
    2b2c:	ff 1f       	adc	r31, r31
    2b2e:	ee 0f       	add	r30, r30
    2b30:	ff 1f       	adc	r31, r31
    2b32:	e6 5d       	subi	r30, 0xD6	; 214
    2b34:	fe 4d       	sbci	r31, 0xDE	; 222
    2b36:	85 a9       	ldd	r24, Z+53	; 0x35
    2b38:	96 a9       	ldd	r25, Z+54	; 0x36
    2b3a:	a7 a9       	ldd	r26, Z+55	; 0x37
    2b3c:	b0 ad       	ldd	r27, Z+56	; 0x38
    2b3e:	8c 8b       	std	Y+20, r24	; 0x14
    2b40:	9d 8b       	std	Y+21, r25	; 0x15
    2b42:	ae 8b       	std	Y+22, r26	; 0x16
    2b44:	bf 8b       	std	Y+23, r27	; 0x17
    2b46:	a1 a4       	ldd	r10, Z+41	; 0x29
    2b48:	b2 a4       	ldd	r11, Z+42	; 0x2a
    2b4a:	c3 a4       	ldd	r12, Z+43	; 0x2b
    2b4c:	d4 a4       	ldd	r13, Z+44	; 0x2c

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    2b4e:	90 91 36 21 	lds	r25, 0x2136
    2b52:	9b 8b       	std	Y+19, r25	; 0x13
    2b54:	99 23       	and	r25, r25
    2b56:	49 f0       	breq	.+18     	; 0x2b6a <gc_execute_block+0x92e>
    2b58:	40 90 4f 21 	lds	r4, 0x214F
    2b5c:	50 90 50 21 	lds	r5, 0x2150
    2b60:	60 90 51 21 	lds	r6, 0x2151
    2b64:	70 90 52 21 	lds	r7, 0x2152
    2b68:	08 c0       	rjmp	.+16     	; 0x2b7a <gc_execute_block+0x93e>
    2b6a:	40 90 43 21 	lds	r4, 0x2143
    2b6e:	50 90 44 21 	lds	r5, 0x2144
    2b72:	60 90 45 21 	lds	r6, 0x2145
    2b76:	70 90 46 21 	lds	r7, 0x2146
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2b7a:	c8 01       	movw	r24, r16
    2b7c:	b7 01       	movw	r22, r14
    2b7e:	0e 94 bb 44 	call	0x8976	; 0x8976 <hypot>
    2b82:	7b 01       	movw	r14, r22
    2b84:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    2b86:	ad b7       	in	r26, 0x3d	; 61
    2b88:	be b7       	in	r27, 0x3e	; 62
    2b8a:	1a 97       	sbiw	r26, 0x0a	; 10
    2b8c:	ad bf       	out	0x3d, r26	; 61
    2b8e:	be bf       	out	0x3e, r27	; 62
    2b90:	8d b6       	in	r8, 0x3d	; 61
    2b92:	9e b6       	in	r9, 0x3e	; 62
    2b94:	08 94       	sec
    2b96:	81 1c       	adc	r8, r1
    2b98:	91 1c       	adc	r9, r1
    2b9a:	6c 89       	ldd	r22, Y+20	; 0x14
    2b9c:	7d 89       	ldd	r23, Y+21	; 0x15
    2b9e:	8e 89       	ldd	r24, Y+22	; 0x16
    2ba0:	9f 89       	ldd	r25, Y+23	; 0x17
    2ba2:	a6 01       	movw	r20, r12
    2ba4:	95 01       	movw	r18, r10
    2ba6:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    2baa:	5b 01       	movw	r10, r22
    2bac:	6c 01       	movw	r12, r24
    2bae:	2b 81       	ldd	r18, Y+3	; 0x03
    2bb0:	3c 81       	ldd	r19, Y+4	; 0x04
    2bb2:	f4 01       	movw	r30, r8
    2bb4:	20 83       	st	Z, r18
    2bb6:	31 83       	std	Z+1, r19	; 0x01
    2bb8:	22 82       	std	Z+2, r2	; 0x02
    2bba:	33 82       	std	Z+3, r3	; 0x03
    2bbc:	d4 01       	movw	r26, r8
    2bbe:	14 96       	adiw	r26, 0x04	; 4
    2bc0:	4d 92       	st	X+, r4
    2bc2:	5d 92       	st	X+, r5
    2bc4:	6d 92       	st	X+, r6
    2bc6:	7c 92       	st	X, r7
    2bc8:	17 97       	sbiw	r26, 0x07	; 7
    2bca:	eb 89       	ldd	r30, Y+19	; 0x13
    2bcc:	18 96       	adiw	r26, 0x08	; 8
    2bce:	ec 93       	st	X, r30
    2bd0:	18 97       	sbiw	r26, 0x08	; 8
    2bd2:	19 96       	adiw	r26, 0x09	; 9
    2bd4:	1c 92       	st	X, r1
    2bd6:	6f 85       	ldd	r22, Y+15	; 0x0f
    2bd8:	78 89       	ldd	r23, Y+16	; 0x10
    2bda:	89 89       	ldd	r24, Y+17	; 0x11
    2bdc:	9a 89       	ldd	r25, Y+18	; 0x12
    2bde:	2b 85       	ldd	r18, Y+11	; 0x0b
    2be0:	3c 85       	ldd	r19, Y+12	; 0x0c
    2be2:	4d 85       	ldd	r20, Y+13	; 0x0d
    2be4:	5e 85       	ldd	r21, Y+14	; 0x0e
    2be6:	8d 80       	ldd	r8, Y+5	; 0x05
    2be8:	9e 80       	ldd	r9, Y+6	; 0x06
    2bea:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <mc_arc_nonblock>
    2bee:	80 93 2a 21 	sts	0x212A, r24
    2bf2:	2d b7       	in	r18, 0x3d	; 61
    2bf4:	3e b7       	in	r19, 0x3e	; 62
    2bf6:	26 5f       	subi	r18, 0xF6	; 246
    2bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bfa:	2d bf       	out	0x3d, r18	; 61
    2bfc:	3e bf       	out	0x3e, r19	; 62
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_CONTINUE)) {
    2bfe:	80 91 2a 21 	lds	r24, 0x212A
    2c02:	88 23       	and	r24, r24
    2c04:	11 f0       	breq	.+4      	; 0x2c0a <gc_execute_block+0x9ce>
    2c06:	82 30       	cpi	r24, 0x02	; 2
    2c08:	49 f4       	brne	.+18     	; 0x2c1c <gc_execute_block+0x9e0>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2c0a:	e3 e5       	ldi	r30, 0x53	; 83
    2c0c:	f1 e2       	ldi	r31, 0x21	; 33
    2c0e:	df 01       	movw	r26, r30
    2c10:	1c 96       	adiw	r26, 0x0c	; 12
    2c12:	9c e0       	ldi	r25, 0x0C	; 12
    2c14:	0d 90       	ld	r0, X+
    2c16:	01 92       	st	Z+, r0
    2c18:	91 50       	subi	r25, 0x01	; 1
    2c1a:	e1 f7       	brne	.-8      	; 0x2c14 <gc_execute_block+0x9d8>
	};
	return(gc.status);
}
    2c1c:	68 96       	adiw	r28, 0x18	; 24
    2c1e:	cd bf       	out	0x3d, r28	; 61
    2c20:	de bf       	out	0x3e, r29	; 62
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	1f 91       	pop	r17
    2c28:	0f 91       	pop	r16
    2c2a:	ff 90       	pop	r15
    2c2c:	ef 90       	pop	r14
    2c2e:	df 90       	pop	r13
    2c30:	cf 90       	pop	r12
    2c32:	bf 90       	pop	r11
    2c34:	af 90       	pop	r10
    2c36:	9f 90       	pop	r9
    2c38:	8f 90       	pop	r8
    2c3a:	7f 90       	pop	r7
    2c3c:	6f 90       	pop	r6
    2c3e:	5f 90       	pop	r5
    2c40:	4f 90       	pop	r4
    2c42:	3f 90       	pop	r3
    2c44:	2f 90       	pop	r2
    2c46:	08 95       	ret

00002c48 <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	ec 01       	movw	r28, r24
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	10 c0       	rjmp	.+32     	; 0x2c74 <gc_gcode_parser+0x2c>
	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    2c54:	e1 32       	cpi	r30, 0x21	; 33
    2c56:	70 f0       	brcs	.+28     	; 0x2c74 <gc_gcode_parser+0x2c>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    2c58:	8e 2f       	mov	r24, r30
    2c5a:	81 56       	subi	r24, 0x61	; 97
    2c5c:	a9 2f       	mov	r26, r25
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	9f 5f       	subi	r25, 0xFF	; 255
    2c62:	8a 31       	cpi	r24, 0x1A	; 26
    2c64:	20 f4       	brcc	.+8      	; 0x2c6e <gc_gcode_parser+0x26>
			block[j++] = c-'a'+'A';
    2c66:	ac 0f       	add	r26, r28
    2c68:	bd 1f       	adc	r27, r29
    2c6a:	e0 52       	subi	r30, 0x20	; 32
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <gc_gcode_parser+0x2a>
		} else {
			block[j++] = c;
    2c6e:	ac 0f       	add	r26, r28
    2c70:	bd 1f       	adc	r27, r29
    2c72:	ec 93       	st	X, r30

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
    2c74:	fe 01       	movw	r30, r28
    2c76:	e2 0f       	add	r30, r18
    2c78:	f1 1d       	adc	r31, r1
    2c7a:	e0 81       	ld	r30, Z
    2c7c:	2f 5f       	subi	r18, 0xFF	; 255
    2c7e:	ee 23       	and	r30, r30
    2c80:	49 f7       	brne	.-46     	; 0x2c54 <gc_gcode_parser+0xc>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    2c82:	fe 01       	movw	r30, r28
    2c84:	e9 0f       	add	r30, r25
    2c86:	f1 1d       	adc	r31, r1
    2c88:	10 82       	st	Z, r1
{
	_gc_normalize_gcode_block(block);
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    2c8a:	88 81       	ld	r24, Y
    2c8c:	88 32       	cpi	r24, 0x28	; 40
    2c8e:	61 f0       	breq	.+24     	; 0x2ca8 <gc_gcode_parser+0x60>
		return(TG_OK);
	}
	if (block[0] == 'Q') { 					// quit
    2c90:	81 35       	cpi	r24, 0x51	; 81
    2c92:	11 f4       	brne	.+4      	; 0x2c98 <gc_gcode_parser+0x50>
    2c94:	83 e0       	ldi	r24, 0x03	; 3
    2c96:	09 c0       	rjmp	.+18     	; 0x2caa <gc_gcode_parser+0x62>
		return(TG_QUIT);
	} 
	if (block[0] == '/') { 					// ignore block delete
    2c98:	8f 32       	cpi	r24, 0x2F	; 47
    2c9a:	31 f0       	breq	.+12     	; 0x2ca8 <gc_gcode_parser+0x60>
		return(TG_OK);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2c9c:	ce 01       	movw	r24, r28
    2c9e:	0e 94 1e 11 	call	0x223c	; 0x223c <gc_execute_block>
    2ca2:	80 93 2a 21 	sts	0x212A, r24
    2ca6:	01 c0       	rjmp	.+2      	; 0x2caa <gc_gcode_parser+0x62>
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
}
    2caa:	df 91       	pop	r29
    2cac:	cf 91       	pop	r28
    2cae:	08 95       	ret

00002cb0 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2cb0:	cf 92       	push	r12
    2cb2:	df 92       	push	r13
    2cb4:	ef 92       	push	r14
    2cb6:	ff 92       	push	r15
    2cb8:	0f 93       	push	r16
    2cba:	1f 93       	push	r17
    2cbc:	cf 93       	push	r28
    2cbe:	df 93       	push	r29
    2cc0:	cb e7       	ldi	r28, 0x7B	; 123
    2cc2:	d6 e2       	ldi	r29, 0x26	; 38
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2cc4:	68 81       	ld	r22, Y
    2cc6:	70 e0       	ldi	r23, 0x00	; 0
    2cc8:	88 27       	eor	r24, r24
    2cca:	77 fd       	sbrc	r23, 7
    2ccc:	80 95       	com	r24
    2cce:	98 2f       	mov	r25, r24
    2cd0:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    2cd4:	9b 01       	movw	r18, r22
    2cd6:	ac 01       	movw	r20, r24
    2cd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cda:	78 85       	ldd	r23, Y+8	; 0x08
    2cdc:	89 85       	ldd	r24, Y+9	; 0x09
    2cde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce0:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    2ce4:	9b 01       	movw	r18, r22
    2ce6:	ac 01       	movw	r20, r24
    2ce8:	60 e0       	ldi	r22, 0x00	; 0
    2cea:	70 e0       	ldi	r23, 0x00	; 0
    2cec:	84 eb       	ldi	r24, 0xB4	; 180
    2cee:	93 e4       	ldi	r25, 0x43	; 67
    2cf0:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    2cf4:	2b 85       	ldd	r18, Y+11	; 0x0b
    2cf6:	3c 85       	ldd	r19, Y+12	; 0x0c
    2cf8:	4d 85       	ldd	r20, Y+13	; 0x0d
    2cfa:	5e 85       	ldd	r21, Y+14	; 0x0e
    2cfc:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    2d00:	6b 8b       	std	Y+19, r22	; 0x13
    2d02:	7c 8b       	std	Y+20, r23	; 0x14
    2d04:	8d 8b       	std	Y+21, r24	; 0x15
    2d06:	9e 8b       	std	Y+22, r25	; 0x16
    2d08:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    2d0a:	86 e2       	ldi	r24, 0x26	; 38
    2d0c:	cb 3d       	cpi	r28, 0xDB	; 219
    2d0e:	d8 07       	cpc	r29, r24
    2d10:	c9 f6       	brne	.-78     	; 0x2cc4 <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    2d12:	00 91 7b 26 	lds	r16, 0x267B
    2d16:	10 e0       	ldi	r17, 0x00	; 0
    2d18:	b8 01       	movw	r22, r16
    2d1a:	88 27       	eor	r24, r24
    2d1c:	77 fd       	sbrc	r23, 7
    2d1e:	80 95       	com	r24
    2d20:	98 2f       	mov	r25, r24
    2d22:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    2d26:	9b 01       	movw	r18, r22
    2d28:	ac 01       	movw	r20, r24
    2d2a:	60 91 82 26 	lds	r22, 0x2682
    2d2e:	70 91 83 26 	lds	r23, 0x2683
    2d32:	80 91 84 26 	lds	r24, 0x2684
    2d36:	90 91 85 26 	lds	r25, 0x2685
    2d3a:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    2d3e:	9b 01       	movw	r18, r22
    2d40:	ac 01       	movw	r20, r24
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	70 e0       	ldi	r23, 0x00	; 0
    2d46:	84 eb       	ldi	r24, 0xB4	; 180
    2d48:	93 e4       	ldi	r25, 0x43	; 67
    2d4a:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    2d4e:	6b 01       	movw	r12, r22
    2d50:	7c 01       	movw	r14, r24
    2d52:	80 91 80 26 	lds	r24, 0x2680
    2d56:	90 91 81 26 	lds	r25, 0x2681
    2d5a:	08 9f       	mul	r16, r24
    2d5c:	b0 01       	movw	r22, r0
    2d5e:	09 9f       	mul	r16, r25
    2d60:	70 0d       	add	r23, r0
    2d62:	18 9f       	mul	r17, r24
    2d64:	70 0d       	add	r23, r0
    2d66:	11 24       	eor	r1, r1
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	0e 94 5e 43 	call	0x86bc	; 0x86bc <__floatunsisf>
    2d70:	a7 01       	movw	r20, r14
    2d72:	96 01       	movw	r18, r12
    2d74:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    2d78:	60 93 73 26 	sts	0x2673, r22
    2d7c:	70 93 74 26 	sts	0x2674, r23
    2d80:	80 93 75 26 	sts	0x2675, r24
    2d84:	90 93 76 26 	sts	0x2676, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    2d88:	80 91 7e 26 	lds	r24, 0x267E
    2d8c:	90 91 7f 26 	lds	r25, 0x267F
    2d90:	08 9f       	mul	r16, r24
    2d92:	b0 01       	movw	r22, r0
    2d94:	09 9f       	mul	r16, r25
    2d96:	70 0d       	add	r23, r0
    2d98:	18 9f       	mul	r17, r24
    2d9a:	70 0d       	add	r23, r0
    2d9c:	11 24       	eor	r1, r1
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	0e 94 5e 43 	call	0x86bc	; 0x86bc <__floatunsisf>
    2da6:	a7 01       	movw	r20, r14
    2da8:	96 01       	movw	r18, r12
    2daa:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    2dae:	60 93 77 26 	sts	0x2677, r22
    2db2:	70 93 78 26 	sts	0x2678, r23
    2db6:	80 93 79 26 	sts	0x2679, r24
    2dba:	90 93 7a 26 	sts	0x267A, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	1f 91       	pop	r17
    2dc4:	0f 91       	pop	r16
    2dc6:	ff 90       	pop	r15
    2dc8:	ef 90       	pop	r14
    2dca:	df 90       	pop	r13
    2dcc:	cf 90       	pop	r12
    2dce:	08 95       	ret

00002dd0 <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    2dd0:	ed e6       	ldi	r30, 0x6D	; 109
    2dd2:	f6 e2       	ldi	r31, 0x26	; 38
    2dd4:	84 e6       	ldi	r24, 0x64	; 100
    2dd6:	80 93 6d 26 	sts	0x266D, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2dda:	8a e0       	ldi	r24, 0x0A	; 10
    2ddc:	97 ed       	ldi	r25, 0xD7	; 215
    2dde:	a3 e2       	ldi	r26, 0x23	; 35
    2de0:	bc e3       	ldi	r27, 0x3C	; 60
    2de2:	80 93 6f 26 	sts	0x266F, r24
    2de6:	90 93 70 26 	sts	0x2670, r25
    2dea:	a0 93 71 26 	sts	0x2671, r26
    2dee:	b0 93 72 26 	sts	0x2672, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2df2:	8c ed       	ldi	r24, 0xDC	; 220
    2df4:	95 e0       	ldi	r25, 0x05	; 5
    2df6:	80 93 7e 26 	sts	0x267E, r24
    2dfa:	90 93 7f 26 	sts	0x267F, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2dfe:	80 93 96 26 	sts	0x2696, r24
    2e02:	90 93 97 26 	sts	0x2697, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2e06:	80 93 ae 26 	sts	0x26AE, r24
    2e0a:	90 93 af 26 	sts	0x26AF, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2e0e:	80 93 c6 26 	sts	0x26C6, r24
    2e12:	90 93 c7 26 	sts	0x26C7, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2e16:	80 93 80 26 	sts	0x2680, r24
    2e1a:	90 93 81 26 	sts	0x2681, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2e1e:	80 93 98 26 	sts	0x2698, r24
    2e22:	90 93 99 26 	sts	0x2699, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2e26:	80 93 b0 26 	sts	0x26B0, r24
    2e2a:	90 93 b1 26 	sts	0x26B1, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2e2e:	80 93 c8 26 	sts	0x26C8, r24
    2e32:	90 93 c9 26 	sts	0x26C9, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2e36:	86 e6       	ldi	r24, 0x66	; 102
    2e38:	96 e6       	ldi	r25, 0x66	; 102
    2e3a:	a6 ee       	ldi	r26, 0xE6	; 230
    2e3c:	bf e3       	ldi	r27, 0x3F	; 63
    2e3e:	80 93 82 26 	sts	0x2682, r24
    2e42:	90 93 83 26 	sts	0x2683, r25
    2e46:	a0 93 84 26 	sts	0x2684, r26
    2e4a:	b0 93 85 26 	sts	0x2685, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2e4e:	80 93 9a 26 	sts	0x269A, r24
    2e52:	90 93 9b 26 	sts	0x269B, r25
    2e56:	a0 93 9c 26 	sts	0x269C, r26
    2e5a:	b0 93 9d 26 	sts	0x269D, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2e5e:	80 93 b2 26 	sts	0x26B2, r24
    2e62:	90 93 b3 26 	sts	0x26B3, r25
    2e66:	a0 93 b4 26 	sts	0x26B4, r26
    2e6a:	b0 93 b5 26 	sts	0x26B5, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2e6e:	80 93 ca 26 	sts	0x26CA, r24
    2e72:	90 93 cb 26 	sts	0x26CB, r25
    2e76:	a0 93 cc 26 	sts	0x26CC, r26
    2e7a:	b0 93 cd 26 	sts	0x26CD, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    2e7e:	8c e5       	ldi	r24, 0x5C	; 92
    2e80:	9f e8       	ldi	r25, 0x8F	; 143
    2e82:	a2 ea       	ldi	r26, 0xA2	; 162
    2e84:	bf e3       	ldi	r27, 0x3F	; 63
    2e86:	80 93 86 26 	sts	0x2686, r24
    2e8a:	90 93 87 26 	sts	0x2687, r25
    2e8e:	a0 93 88 26 	sts	0x2688, r26
    2e92:	b0 93 89 26 	sts	0x2689, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    2e96:	80 93 9e 26 	sts	0x269E, r24
    2e9a:	90 93 9f 26 	sts	0x269F, r25
    2e9e:	a0 93 a0 26 	sts	0x26A0, r26
    2ea2:	b0 93 a1 26 	sts	0x26A1, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    2ea6:	80 93 b6 26 	sts	0x26B6, r24
    2eaa:	90 93 b7 26 	sts	0x26B7, r25
    2eae:	a0 93 b8 26 	sts	0x26B8, r26
    2eb2:	b0 93 b9 26 	sts	0x26B9, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    2eb6:	80 93 ce 26 	sts	0x26CE, r24
    2eba:	90 93 cf 26 	sts	0x26CF, r25
    2ebe:	a0 93 d0 26 	sts	0x26D0, r26
    2ec2:	b0 93 d1 26 	sts	0x26D1, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	a8 ec       	ldi	r26, 0xC8	; 200
    2ecc:	b3 e4       	ldi	r27, 0x43	; 67
    2ece:	80 93 8a 26 	sts	0x268A, r24
    2ed2:	90 93 8b 26 	sts	0x268B, r25
    2ed6:	a0 93 8c 26 	sts	0x268C, r26
    2eda:	b0 93 8d 26 	sts	0x268D, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    2ede:	80 93 a2 26 	sts	0x26A2, r24
    2ee2:	90 93 a3 26 	sts	0x26A3, r25
    2ee6:	a0 93 a4 26 	sts	0x26A4, r26
    2eea:	b0 93 a5 26 	sts	0x26A5, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	a6 e9       	ldi	r26, 0x96	; 150
    2ef4:	b3 e4       	ldi	r27, 0x43	; 67
    2ef6:	80 93 ba 26 	sts	0x26BA, r24
    2efa:	90 93 bb 26 	sts	0x26BB, r25
    2efe:	a0 93 bc 26 	sts	0x26BC, r26
    2f02:	b0 93 bd 26 	sts	0x26BD, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	a0 e8       	ldi	r26, 0x80	; 128
    2f0c:	bf eb       	ldi	r27, 0xBF	; 191
    2f0e:	80 93 d2 26 	sts	0x26D2, r24
    2f12:	90 93 d3 26 	sts	0x26D3, r25
    2f16:	a0 93 d4 26 	sts	0x26D4, r26
    2f1a:	b0 93 d5 26 	sts	0x26D5, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    2f1e:	88 e0       	ldi	r24, 0x08	; 8
    2f20:	80 93 7b 26 	sts	0x267B, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    2f24:	80 93 93 26 	sts	0x2693, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    2f28:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A].microstep = A_MICROSTEPS;
    2f2a:	80 93 c3 26 	sts	0x26C3, r24

	cfg.a[X].polarity = X_POLARITY;
    2f2e:	10 92 7d 26 	sts	0x267D, r1
	cfg.a[Y].polarity = Y_POLARITY;
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	80 93 95 26 	sts	0x2695, r24
	cfg.a[Z].polarity = Z_POLARITY;
    2f38:	10 92 ad 26 	sts	0x26AD, r1
	cfg.a[A].polarity = A_POLARITY;
    2f3c:	10 92 c5 26 	sts	0x26C5, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    2f40:	80 93 92 26 	sts	0x2692, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    2f44:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    2f46:	80 93 c2 26 	sts	0x26C2, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    2f4a:	10 92 da 26 	sts	0x26DA, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    2f4e:	80 93 7c 26 	sts	0x267C, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    2f52:	80 93 94 26 	sts	0x2694, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    2f56:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    2f58:	80 93 c4 26 	sts	0x26C4, r24

	_cfg_computed();		// generate computed values from the above
    2f5c:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_cfg_computed>
}
    2f60:	08 95       	ret

00002f62 <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2f62:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <cfg_reset>
}
    2f66:	08 95       	ret

00002f68 <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2f68:	87 30       	cpi	r24, 0x07	; 7
    2f6a:	31 f1       	breq	.+76     	; 0x2fb8 <_cfg_print_status+0x50>
    2f6c:	88 30       	cpi	r24, 0x08	; 8
    2f6e:	30 f4       	brcc	.+12     	; 0x2f7c <_cfg_print_status+0x14>
    2f70:	82 30       	cpi	r24, 0x02	; 2
    2f72:	59 f0       	breq	.+22     	; 0x2f8a <_cfg_print_status+0x22>
    2f74:	83 30       	cpi	r24, 0x03	; 3
    2f76:	09 f0       	breq	.+2      	; 0x2f7a <_cfg_print_status+0x12>
    2f78:	45 c0       	rjmp	.+138    	; 0x3004 <_cfg_print_status+0x9c>
    2f7a:	0c c0       	rjmp	.+24     	; 0x2f94 <_cfg_print_status+0x2c>
    2f7c:	8d 30       	cpi	r24, 0x0D	; 13
    2f7e:	09 f1       	breq	.+66     	; 0x2fc2 <_cfg_print_status+0x5a>
    2f80:	8f 30       	cpi	r24, 0x0F	; 15
    2f82:	81 f1       	breq	.+96     	; 0x2fe4 <_cfg_print_status+0x7c>
    2f84:	8c 30       	cpi	r24, 0x0C	; 12
    2f86:	f1 f5       	brne	.+124    	; 0x3004 <_cfg_print_status+0x9c>
    2f88:	12 c0       	rjmp	.+36     	; 0x2fae <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_CONTINUE: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2f8a:	00 d0       	rcall	.+0      	; 0x2f8c <_cfg_print_status+0x24>
    2f8c:	0f 92       	push	r0
    2f8e:	85 e1       	ldi	r24, 0x15	; 21
    2f90:	94 e0       	ldi	r25, 0x04	; 4
    2f92:	1b c0       	rjmp	.+54     	; 0x2fca <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2f94:	0f 92       	push	r0
    2f96:	0f 92       	push	r0
    2f98:	8f ef       	ldi	r24, 0xFF	; 255
    2f9a:	93 e0       	ldi	r25, 0x03	; 3
    2f9c:	ed b7       	in	r30, 0x3d	; 61
    2f9e:	fe b7       	in	r31, 0x3e	; 62
    2fa0:	81 83       	std	Z+1, r24	; 0x01
    2fa2:	92 83       	std	Z+2, r25	; 0x02
    2fa4:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2fae:	00 d0       	rcall	.+0      	; 0x2fb0 <_cfg_print_status+0x48>
    2fb0:	0f 92       	push	r0
    2fb2:	88 ee       	ldi	r24, 0xE8	; 232
    2fb4:	93 e0       	ldi	r25, 0x03	; 3
    2fb6:	09 c0       	rjmp	.+18     	; 0x2fca <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2fb8:	00 d0       	rcall	.+0      	; 0x2fba <_cfg_print_status+0x52>
    2fba:	0f 92       	push	r0
    2fbc:	8e ec       	ldi	r24, 0xCE	; 206
    2fbe:	93 e0       	ldi	r25, 0x03	; 3
    2fc0:	04 c0       	rjmp	.+8      	; 0x2fca <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2fc2:	00 d0       	rcall	.+0      	; 0x2fc4 <_cfg_print_status+0x5c>
    2fc4:	0f 92       	push	r0
    2fc6:	84 eb       	ldi	r24, 0xB4	; 180
    2fc8:	93 e0       	ldi	r25, 0x03	; 3
    2fca:	ed b7       	in	r30, 0x3d	; 61
    2fcc:	fe b7       	in	r31, 0x3e	; 62
    2fce:	81 83       	std	Z+1, r24	; 0x01
    2fd0:	92 83       	std	Z+2, r25	; 0x02
    2fd2:	63 83       	std	Z+3, r22	; 0x03
    2fd4:	74 83       	std	Z+4, r23	; 0x04
    2fd6:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	08 95       	ret
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2fe4:	00 d0       	rcall	.+0      	; 0x2fe6 <_cfg_print_status+0x7e>
    2fe6:	0f 92       	push	r0
    2fe8:	89 e9       	ldi	r24, 0x99	; 153
    2fea:	93 e0       	ldi	r25, 0x03	; 3
    2fec:	ed b7       	in	r30, 0x3d	; 61
    2fee:	fe b7       	in	r31, 0x3e	; 62
    2ff0:	81 83       	std	Z+1, r24	; 0x01
    2ff2:	92 83       	std	Z+2, r25	; 0x02
    2ff4:	63 83       	std	Z+3, r22	; 0x03
    2ff6:	74 83       	std	Z+4, r23	; 0x04
    2ff8:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
    2ffc:	0f 90       	pop	r0
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	08 95       	ret

00003006 <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    3006:	ef 92       	push	r14
    3008:	ff 92       	push	r15
    300a:	0f 93       	push	r16
    300c:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    300e:	e8 2e       	mov	r14, r24
    3010:	ff 24       	eor	r15, r15
    3012:	87 01       	movw	r16, r14
    3014:	00 0f       	add	r16, r16
    3016:	11 1f       	adc	r17, r17
    3018:	f8 01       	movw	r30, r16
    301a:	ed 5b       	subi	r30, 0xBD	; 189
    301c:	fd 4f       	sbci	r31, 0xFD	; 253
    301e:	25 91       	lpm	r18, Z+
    3020:	34 91       	lpm	r19, Z+
    3022:	00 d0       	rcall	.+0      	; 0x3024 <_cfg_dump_axis+0x1e>
    3024:	0f 92       	push	r0
    3026:	88 e3       	ldi	r24, 0x38	; 56
    3028:	96 e0       	ldi	r25, 0x06	; 6
    302a:	ad b7       	in	r26, 0x3d	; 61
    302c:	be b7       	in	r27, 0x3e	; 62
    302e:	11 96       	adiw	r26, 0x01	; 1
    3030:	8d 93       	st	X+, r24
    3032:	9c 93       	st	X, r25
    3034:	12 97       	sbiw	r26, 0x02	; 2
    3036:	13 96       	adiw	r26, 0x03	; 3
    3038:	2d 93       	st	X+, r18
    303a:	3c 93       	st	X, r19
    303c:	14 97       	sbiw	r26, 0x04	; 4
    303e:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	96 e0       	ldi	r25, 0x06	; 6
    3046:	ed b7       	in	r30, 0x3d	; 61
    3048:	fe b7       	in	r31, 0x3e	; 62
    304a:	81 83       	std	Z+1, r24	; 0x01
    304c:	92 83       	std	Z+2, r25	; 0x02
    304e:	0e 0d       	add	r16, r14
    3050:	1f 1d       	adc	r17, r15
    3052:	83 e0       	ldi	r24, 0x03	; 3
    3054:	00 0f       	add	r16, r16
    3056:	11 1f       	adc	r17, r17
    3058:	8a 95       	dec	r24
    305a:	e1 f7       	brne	.-8      	; 0x3054 <_cfg_dump_axis+0x4e>
    305c:	03 59       	subi	r16, 0x93	; 147
    305e:	19 4d       	sbci	r17, 0xD9	; 217
    3060:	d8 01       	movw	r26, r16
    3062:	51 96       	adiw	r26, 0x11	; 17
    3064:	8d 91       	ld	r24, X+
    3066:	9c 91       	ld	r25, X
    3068:	52 97       	sbiw	r26, 0x12	; 18
    306a:	83 83       	std	Z+3, r24	; 0x03
    306c:	94 83       	std	Z+4, r25	; 0x04
    306e:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    3072:	88 ec       	ldi	r24, 0xC8	; 200
    3074:	95 e0       	ldi	r25, 0x05	; 5
    3076:	ed b7       	in	r30, 0x3d	; 61
    3078:	fe b7       	in	r31, 0x3e	; 62
    307a:	81 83       	std	Z+1, r24	; 0x01
    307c:	92 83       	std	Z+2, r25	; 0x02
    307e:	d8 01       	movw	r26, r16
    3080:	53 96       	adiw	r26, 0x13	; 19
    3082:	8d 91       	ld	r24, X+
    3084:	9c 91       	ld	r25, X
    3086:	54 97       	sbiw	r26, 0x14	; 20
    3088:	83 83       	std	Z+3, r24	; 0x03
    308a:	94 83       	std	Z+4, r25	; 0x04
    308c:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    3090:	ed b7       	in	r30, 0x3d	; 61
    3092:	fe b7       	in	r31, 0x3e	; 62
    3094:	31 96       	adiw	r30, 0x01	; 1
    3096:	85 e9       	ldi	r24, 0x95	; 149
    3098:	95 e0       	ldi	r25, 0x05	; 5
    309a:	ad b7       	in	r26, 0x3d	; 61
    309c:	be b7       	in	r27, 0x3e	; 62
    309e:	11 96       	adiw	r26, 0x01	; 1
    30a0:	8d 93       	st	X+, r24
    30a2:	9c 93       	st	X, r25
    30a4:	12 97       	sbiw	r26, 0x02	; 2
    30a6:	d8 01       	movw	r26, r16
    30a8:	1e 96       	adiw	r26, 0x0e	; 14
    30aa:	8c 91       	ld	r24, X
    30ac:	82 83       	std	Z+2, r24	; 0x02
    30ae:	13 82       	std	Z+3, r1	; 0x03
    30b0:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    30b4:	0f 92       	push	r0
    30b6:	0f 92       	push	r0
    30b8:	8e e5       	ldi	r24, 0x5E	; 94
    30ba:	95 e0       	ldi	r25, 0x05	; 5
    30bc:	ed b7       	in	r30, 0x3d	; 61
    30be:	fe b7       	in	r31, 0x3e	; 62
    30c0:	81 83       	std	Z+1, r24	; 0x01
    30c2:	92 83       	std	Z+2, r25	; 0x02
    30c4:	f8 01       	movw	r30, r16
    30c6:	85 89       	ldd	r24, Z+21	; 0x15
    30c8:	96 89       	ldd	r25, Z+22	; 0x16
    30ca:	a7 89       	ldd	r26, Z+23	; 0x17
    30cc:	b0 8d       	ldd	r27, Z+24	; 0x18
    30ce:	ed b7       	in	r30, 0x3d	; 61
    30d0:	fe b7       	in	r31, 0x3e	; 62
    30d2:	83 83       	std	Z+3, r24	; 0x03
    30d4:	94 83       	std	Z+4, r25	; 0x04
    30d6:	a5 83       	std	Z+5, r26	; 0x05
    30d8:	b6 83       	std	Z+6, r27	; 0x06
    30da:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    30de:	8b e2       	ldi	r24, 0x2B	; 43
    30e0:	95 e0       	ldi	r25, 0x05	; 5
    30e2:	ad b7       	in	r26, 0x3d	; 61
    30e4:	be b7       	in	r27, 0x3e	; 62
    30e6:	11 96       	adiw	r26, 0x01	; 1
    30e8:	8d 93       	st	X+, r24
    30ea:	9c 93       	st	X, r25
    30ec:	12 97       	sbiw	r26, 0x02	; 2
    30ee:	f8 01       	movw	r30, r16
    30f0:	81 8d       	ldd	r24, Z+25	; 0x19
    30f2:	92 8d       	ldd	r25, Z+26	; 0x1a
    30f4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    30f6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    30f8:	ed b7       	in	r30, 0x3d	; 61
    30fa:	fe b7       	in	r31, 0x3e	; 62
    30fc:	83 83       	std	Z+3, r24	; 0x03
    30fe:	94 83       	std	Z+4, r25	; 0x04
    3100:	a5 83       	std	Z+5, r26	; 0x05
    3102:	b6 83       	std	Z+6, r27	; 0x06
    3104:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    3108:	88 ef       	ldi	r24, 0xF8	; 248
    310a:	94 e0       	ldi	r25, 0x04	; 4
    310c:	ad b7       	in	r26, 0x3d	; 61
    310e:	be b7       	in	r27, 0x3e	; 62
    3110:	11 96       	adiw	r26, 0x01	; 1
    3112:	8d 93       	st	X+, r24
    3114:	9c 93       	st	X, r25
    3116:	12 97       	sbiw	r26, 0x02	; 2
    3118:	f8 01       	movw	r30, r16
    311a:	85 8d       	ldd	r24, Z+29	; 0x1d
    311c:	96 8d       	ldd	r25, Z+30	; 0x1e
    311e:	a7 8d       	ldd	r26, Z+31	; 0x1f
    3120:	b0 a1       	ldd	r27, Z+32	; 0x20
    3122:	ed b7       	in	r30, 0x3d	; 61
    3124:	fe b7       	in	r31, 0x3e	; 62
    3126:	83 83       	std	Z+3, r24	; 0x03
    3128:	94 83       	std	Z+4, r25	; 0x04
    312a:	a5 83       	std	Z+5, r26	; 0x05
    312c:	b6 83       	std	Z+6, r27	; 0x06
    312e:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    3132:	0f 90       	pop	r0
    3134:	0f 90       	pop	r0
    3136:	ed b7       	in	r30, 0x3d	; 61
    3138:	fe b7       	in	r31, 0x3e	; 62
    313a:	31 96       	adiw	r30, 0x01	; 1
    313c:	87 ec       	ldi	r24, 0xC7	; 199
    313e:	94 e0       	ldi	r25, 0x04	; 4
    3140:	ad b7       	in	r26, 0x3d	; 61
    3142:	be b7       	in	r27, 0x3e	; 62
    3144:	11 96       	adiw	r26, 0x01	; 1
    3146:	8d 93       	st	X+, r24
    3148:	9c 93       	st	X, r25
    314a:	12 97       	sbiw	r26, 0x02	; 2
    314c:	d8 01       	movw	r26, r16
    314e:	95 96       	adiw	r26, 0x25	; 37
    3150:	8c 91       	ld	r24, X
    3152:	82 83       	std	Z+2, r24	; 0x02
    3154:	13 82       	std	Z+3, r1	; 0x03
    3156:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    315a:	ed b7       	in	r30, 0x3d	; 61
    315c:	fe b7       	in	r31, 0x3e	; 62
    315e:	31 96       	adiw	r30, 0x01	; 1
    3160:	86 e9       	ldi	r24, 0x96	; 150
    3162:	94 e0       	ldi	r25, 0x04	; 4
    3164:	ad b7       	in	r26, 0x3d	; 61
    3166:	be b7       	in	r27, 0x3e	; 62
    3168:	11 96       	adiw	r26, 0x01	; 1
    316a:	8d 93       	st	X+, r24
    316c:	9c 93       	st	X, r25
    316e:	12 97       	sbiw	r26, 0x02	; 2
    3170:	d8 01       	movw	r26, r16
    3172:	1f 96       	adiw	r26, 0x0f	; 15
    3174:	8c 91       	ld	r24, X
    3176:	82 83       	std	Z+2, r24	; 0x02
    3178:	13 82       	std	Z+3, r1	; 0x03
    317a:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    317e:	ed b7       	in	r30, 0x3d	; 61
    3180:	fe b7       	in	r31, 0x3e	; 62
    3182:	31 96       	adiw	r30, 0x01	; 1
    3184:	86 e6       	ldi	r24, 0x66	; 102
    3186:	94 e0       	ldi	r25, 0x04	; 4
    3188:	ad b7       	in	r26, 0x3d	; 61
    318a:	be b7       	in	r27, 0x3e	; 62
    318c:	11 96       	adiw	r26, 0x01	; 1
    318e:	8d 93       	st	X+, r24
    3190:	9c 93       	st	X, r25
    3192:	12 97       	sbiw	r26, 0x02	; 2
    3194:	d8 01       	movw	r26, r16
    3196:	50 96       	adiw	r26, 0x10	; 16
    3198:	8c 91       	ld	r24, X
    319a:	82 83       	std	Z+2, r24	; 0x02
    319c:	13 82       	std	Z+3, r1	; 0x03
    319e:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    31a2:	0f 92       	push	r0
    31a4:	0f 92       	push	r0
    31a6:	82 e3       	ldi	r24, 0x32	; 50
    31a8:	94 e0       	ldi	r25, 0x04	; 4
    31aa:	ed b7       	in	r30, 0x3d	; 61
    31ac:	fe b7       	in	r31, 0x3e	; 62
    31ae:	81 83       	std	Z+1, r24	; 0x01
    31b0:	92 83       	std	Z+2, r25	; 0x02
    31b2:	f8 01       	movw	r30, r16
    31b4:	81 a1       	ldd	r24, Z+33	; 0x21
    31b6:	92 a1       	ldd	r25, Z+34	; 0x22
    31b8:	a3 a1       	ldd	r26, Z+35	; 0x23
    31ba:	b4 a1       	ldd	r27, Z+36	; 0x24
    31bc:	ed b7       	in	r30, 0x3d	; 61
    31be:	fe b7       	in	r31, 0x3e	; 62
    31c0:	83 83       	std	Z+3, r24	; 0x03
    31c2:	94 83       	std	Z+4, r25	; 0x04
    31c4:	a5 83       	std	Z+5, r26	; 0x05
    31c6:	b6 83       	std	Z+6, r27	; 0x06
    31c8:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
    31cc:	8d b7       	in	r24, 0x3d	; 61
    31ce:	9e b7       	in	r25, 0x3e	; 62
    31d0:	06 96       	adiw	r24, 0x06	; 6
    31d2:	8d bf       	out	0x3d, r24	; 61
    31d4:	9e bf       	out	0x3e, r25	; 62
}
    31d6:	1f 91       	pop	r17
    31d8:	0f 91       	pop	r16
    31da:	ff 90       	pop	r15
    31dc:	ef 90       	pop	r14
    31de:	08 95       	ret

000031e0 <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    31e0:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    31e2:	00 d0       	rcall	.+0      	; 0x31e4 <cfg_dump+0x4>
    31e4:	0f 92       	push	r0
    31e6:	ed b7       	in	r30, 0x3d	; 61
    31e8:	fe b7       	in	r31, 0x3e	; 62
    31ea:	31 96       	adiw	r30, 0x01	; 1
    31ec:	8c ef       	ldi	r24, 0xFC	; 252
    31ee:	96 e0       	ldi	r25, 0x06	; 6
    31f0:	ad b7       	in	r26, 0x3d	; 61
    31f2:	be b7       	in	r27, 0x3e	; 62
    31f4:	11 96       	adiw	r26, 0x01	; 1
    31f6:	8d 93       	st	X+, r24
    31f8:	9c 93       	st	X, r25
    31fa:	12 97       	sbiw	r26, 0x02	; 2
    31fc:	80 91 6d 26 	lds	r24, 0x266D
    3200:	82 83       	std	Z+2, r24	; 0x02
    3202:	13 82       	std	Z+3, r1	; 0x03
    3204:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	85 ed       	ldi	r24, 0xD5	; 213
    320e:	96 e0       	ldi	r25, 0x06	; 6
    3210:	ed b7       	in	r30, 0x3d	; 61
    3212:	fe b7       	in	r31, 0x3e	; 62
    3214:	81 83       	std	Z+1, r24	; 0x01
    3216:	92 83       	std	Z+2, r25	; 0x02
    3218:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    321c:	00 d0       	rcall	.+0      	; 0x321e <cfg_dump+0x3e>
    321e:	0f 92       	push	r0
    3220:	8b ea       	ldi	r24, 0xAB	; 171
    3222:	96 e0       	ldi	r25, 0x06	; 6
    3224:	ad b7       	in	r26, 0x3d	; 61
    3226:	be b7       	in	r27, 0x3e	; 62
    3228:	11 96       	adiw	r26, 0x01	; 1
    322a:	8d 93       	st	X+, r24
    322c:	9c 93       	st	X, r25
    322e:	12 97       	sbiw	r26, 0x02	; 2
    3230:	80 91 6f 26 	lds	r24, 0x266F
    3234:	90 91 70 26 	lds	r25, 0x2670
    3238:	a0 91 71 26 	lds	r26, 0x2671
    323c:	b0 91 72 26 	lds	r27, 0x2672
    3240:	ed b7       	in	r30, 0x3d	; 61
    3242:	fe b7       	in	r31, 0x3e	; 62
    3244:	83 83       	std	Z+3, r24	; 0x03
    3246:	94 83       	std	Z+4, r25	; 0x04
    3248:	a5 83       	std	Z+5, r26	; 0x05
    324a:	b6 83       	std	Z+6, r27	; 0x06
    324c:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    3250:	81 e8       	ldi	r24, 0x81	; 129
    3252:	96 e0       	ldi	r25, 0x06	; 6
    3254:	ad b7       	in	r26, 0x3d	; 61
    3256:	be b7       	in	r27, 0x3e	; 62
    3258:	11 96       	adiw	r26, 0x01	; 1
    325a:	8d 93       	st	X+, r24
    325c:	9c 93       	st	X, r25
    325e:	12 97       	sbiw	r26, 0x02	; 2
    3260:	80 91 77 26 	lds	r24, 0x2677
    3264:	90 91 78 26 	lds	r25, 0x2678
    3268:	a0 91 79 26 	lds	r26, 0x2679
    326c:	b0 91 7a 26 	lds	r27, 0x267A
    3270:	ed b7       	in	r30, 0x3d	; 61
    3272:	fe b7       	in	r31, 0x3e	; 62
    3274:	83 83       	std	Z+3, r24	; 0x03
    3276:	94 83       	std	Z+4, r25	; 0x04
    3278:	a5 83       	std	Z+5, r26	; 0x05
    327a:	b6 83       	std	Z+6, r27	; 0x06
    327c:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    3280:	86 e5       	ldi	r24, 0x56	; 86
    3282:	96 e0       	ldi	r25, 0x06	; 6
    3284:	ad b7       	in	r26, 0x3d	; 61
    3286:	be b7       	in	r27, 0x3e	; 62
    3288:	11 96       	adiw	r26, 0x01	; 1
    328a:	8d 93       	st	X+, r24
    328c:	9c 93       	st	X, r25
    328e:	12 97       	sbiw	r26, 0x02	; 2
    3290:	80 91 73 26 	lds	r24, 0x2673
    3294:	90 91 74 26 	lds	r25, 0x2674
    3298:	a0 91 75 26 	lds	r26, 0x2675
    329c:	b0 91 76 26 	lds	r27, 0x2676
    32a0:	ed b7       	in	r30, 0x3d	; 61
    32a2:	fe b7       	in	r31, 0x3e	; 62
    32a4:	83 83       	std	Z+3, r24	; 0x03
    32a6:	94 83       	std	Z+4, r25	; 0x04
    32a8:	a5 83       	std	Z+5, r26	; 0x05
    32aa:	b6 83       	std	Z+6, r27	; 0x06
    32ac:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
    32b0:	10 e0       	ldi	r17, 0x00	; 0
    32b2:	8d b7       	in	r24, 0x3d	; 61
    32b4:	9e b7       	in	r25, 0x3e	; 62
    32b6:	06 96       	adiw	r24, 0x06	; 6
    32b8:	8d bf       	out	0x3d, r24	; 61
    32ba:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
		_cfg_dump_axis(axis);
    32bc:	81 2f       	mov	r24, r17
    32be:	0e 94 03 18 	call	0x3006	; 0x3006 <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    32c2:	1f 5f       	subi	r17, 0xFF	; 255
    32c4:	14 30       	cpi	r17, 0x04	; 4
    32c6:	d1 f7       	brne	.-12     	; 0x32bc <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    32c8:	1f 91       	pop	r17
    32ca:	08 95       	ret

000032cc <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	6d e6       	ldi	r22, 0x6D	; 109
    32d2:	76 e2       	ldi	r23, 0x26	; 38
    32d4:	4e e6       	ldi	r20, 0x6E	; 110
    32d6:	50 e0       	ldi	r21, 0x00	; 0
    32d8:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <memcpy_to_eeprom_with_checksum>
}
    32dc:	08 95       	ret

000032de <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	0e 94 9d 2c 	call	0x593a	; 0x593a <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    32e6:	84 36       	cpi	r24, 0x64	; 100
    32e8:	19 f0       	breq	.+6      	; 0x32f0 <cfg_read+0x12>
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	0d c0       	rjmp	.+26     	; 0x330a <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    32f0:	8d e6       	ldi	r24, 0x6D	; 109
    32f2:	96 e2       	ldi	r25, 0x26	; 38
    32f4:	60 e0       	ldi	r22, 0x00	; 0
    32f6:	70 e0       	ldi	r23, 0x00	; 0
    32f8:	4e e6       	ldi	r20, 0x6E	; 110
    32fa:	50 e0       	ldi	r21, 0x00	; 0
    32fc:	0e 94 a7 2c 	call	0x594e	; 0x594e <memcpy_from_eeprom_with_checksum>
    3300:	00 97       	sbiw	r24, 0x00	; 0
    3302:	11 f0       	breq	.+4      	; 0x3308 <cfg_read+0x2a>
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    330a:	c9 01       	movw	r24, r18
    330c:	08 95       	ret

0000330e <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    330e:	cf 92       	push	r12
    3310:	df 92       	push	r13
    3312:	ef 92       	push	r14
    3314:	ff 92       	push	r15
    3316:	1f 93       	push	r17
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	0f 92       	push	r0
    331e:	0f 92       	push	r0
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    3324:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    3326:	19 82       	std	Y+1, r1	; 0x01
    3328:	1a 82       	std	Y+2, r1	; 0x02
    332a:	cc 24       	eor	r12, r12
    332c:	dd 24       	eor	r13, r13
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	2b c0       	rjmp	.+86     	; 0x338a <cfg_parse+0x7c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    3334:	9d 33       	cpi	r25, 0x3D	; 61
    3336:	49 f4       	brne	.+18     	; 0x334a <cfg_parse+0x3c>
			text[j++] = 0;						// terminate tag at separator
    3338:	f7 01       	movw	r30, r14
    333a:	e2 0f       	add	r30, r18
    333c:	f1 1d       	adc	r31, r1
    333e:	10 82       	st	Z, r1
    3340:	2f 5f       	subi	r18, 0xFF	; 255
			val = &text[j];						// new string starts at value
    3342:	67 01       	movw	r12, r14
    3344:	c2 0e       	add	r12, r18
    3346:	d1 1c       	adc	r13, r1
    3348:	20 c0       	rjmp	.+64     	; 0x338a <cfg_parse+0x7c>
		} else if ( (c == '-') || 				// pass special characters
    334a:	9d 32       	cpi	r25, 0x2D	; 45
    334c:	c9 f0       	breq	.+50     	; 0x3380 <cfg_parse+0x72>
    334e:	9b 32       	cpi	r25, 0x2B	; 43
    3350:	b9 f0       	breq	.+46     	; 0x3380 <cfg_parse+0x72>
    3352:	9e 32       	cpi	r25, 0x2E	; 46
    3354:	a9 f0       	breq	.+42     	; 0x3380 <cfg_parse+0x72>
    3356:	9f 33       	cpi	r25, 0x3F	; 63
    3358:	99 f0       	breq	.+38     	; 0x3380 <cfg_parse+0x72>
    335a:	98 32       	cpi	r25, 0x28	; 40
    335c:	89 f0       	breq	.+34     	; 0x3380 <cfg_parse+0x72>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    335e:	89 2f       	mov	r24, r25
    3360:	81 56       	subi	r24, 0x61	; 97
    3362:	8a 31       	cpi	r24, 0x1A	; 26
    3364:	28 f4       	brcc	.+10     	; 0x3370 <cfg_parse+0x62>
			text[j++] = c-'a'+'A';
    3366:	f7 01       	movw	r30, r14
    3368:	e2 0f       	add	r30, r18
    336a:	f1 1d       	adc	r31, r1
    336c:	90 52       	subi	r25, 0x20	; 32
    336e:	0b c0       	rjmp	.+22     	; 0x3386 <cfg_parse+0x78>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    3370:	89 2f       	mov	r24, r25
    3372:	81 54       	subi	r24, 0x41	; 65
    3374:	8a 31       	cpi	r24, 0x1A	; 26
    3376:	20 f0       	brcs	.+8      	; 0x3380 <cfg_parse+0x72>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
    3378:	89 2f       	mov	r24, r25
    337a:	80 53       	subi	r24, 0x30	; 48
    337c:	8a 30       	cpi	r24, 0x0A	; 10
    337e:	28 f4       	brcc	.+10     	; 0x338a <cfg_parse+0x7c>
			text[j++] = c;
    3380:	f7 01       	movw	r30, r14
    3382:	e2 0f       	add	r30, r18
    3384:	f1 1d       	adc	r31, r1
    3386:	90 83       	st	Z, r25
    3388:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    338a:	f7 01       	movw	r30, r14
    338c:	e3 0f       	add	r30, r19
    338e:	f1 1d       	adc	r31, r1
    3390:	90 81       	ld	r25, Z
    3392:	3f 5f       	subi	r19, 0xFF	; 255
    3394:	99 23       	and	r25, r25
    3396:	71 f6       	brne	.-100    	; 0x3334 <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    3398:	f7 01       	movw	r30, r14
    339a:	e2 0f       	add	r30, r18
    339c:	f1 1d       	adc	r31, r1
    339e:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    33a0:	2f 5f       	subi	r18, 0xFF	; 255
    33a2:	c7 01       	movw	r24, r14
    33a4:	82 0f       	add	r24, r18
    33a6:	91 1d       	adc	r25, r1
    33a8:	89 83       	std	Y+1, r24	; 0x01
    33aa:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    33ac:	10 92 6e 26 	sts	0x266E, r1
	switch (text[0]) {
    33b0:	f7 01       	movw	r30, r14
    33b2:	80 81       	ld	r24, Z
    33b4:	81 35       	cpi	r24, 0x51	; 81
    33b6:	d1 f0       	breq	.+52     	; 0x33ec <cfg_parse+0xde>
    33b8:	82 35       	cpi	r24, 0x52	; 82
    33ba:	60 f4       	brcc	.+24     	; 0x33d4 <cfg_parse+0xc6>
    33bc:	81 34       	cpi	r24, 0x41	; 65
    33be:	59 f1       	breq	.+86     	; 0x3416 <cfg_parse+0x108>
    33c0:	82 34       	cpi	r24, 0x42	; 66
    33c2:	28 f4       	brcc	.+10     	; 0x33ce <cfg_parse+0xc0>
    33c4:	88 32       	cpi	r24, 0x28	; 40
    33c6:	11 f1       	breq	.+68     	; 0x340c <cfg_parse+0xfe>
    33c8:	8f 33       	cpi	r24, 0x3F	; 63
    33ca:	39 f5       	brne	.+78     	; 0x341a <cfg_parse+0x10c>
    33cc:	0c c0       	rjmp	.+24     	; 0x33e6 <cfg_parse+0xd8>
    33ce:	8d 34       	cpi	r24, 0x4D	; 77
    33d0:	21 f5       	brne	.+72     	; 0x341a <cfg_parse+0x10c>
    33d2:	0e c0       	rjmp	.+28     	; 0x33f0 <cfg_parse+0xe2>
    33d4:	89 35       	cpi	r24, 0x59	; 89
    33d6:	29 f0       	breq	.+10     	; 0x33e2 <cfg_parse+0xd4>
    33d8:	8a 35       	cpi	r24, 0x5A	; 90
    33da:	d9 f0       	breq	.+54     	; 0x3412 <cfg_parse+0x104>
    33dc:	88 35       	cpi	r24, 0x58	; 88
    33de:	e9 f4       	brne	.+58     	; 0x341a <cfg_parse+0x10c>
    33e0:	1f c0       	rjmp	.+62     	; 0x3420 <cfg_parse+0x112>
    33e2:	11 e0       	ldi	r17, 0x01	; 1
    33e4:	1e c0       	rjmp	.+60     	; 0x3422 <cfg_parse+0x114>
		case '?': cfg_dump(); status (TG_OK); break;
    33e6:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <cfg_dump>
    33ea:	10 c0       	rjmp	.+32     	; 0x340c <cfg_parse+0xfe>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    33ec:	83 e0       	ldi	r24, 0x03	; 3
    33ee:	16 c0       	rjmp	.+44     	; 0x341c <cfg_parse+0x10e>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    33f0:	c6 01       	movw	r24, r12
    33f2:	be 01       	movw	r22, r28
    33f4:	6f 5f       	subi	r22, 0xFF	; 255
    33f6:	7f 4f       	sbci	r23, 0xFF	; 255
    33f8:	0e 94 c9 46 	call	0x8d92	; 0x8d92 <strtod>
    33fc:	60 93 6f 26 	sts	0x266F, r22
    3400:	70 93 70 26 	sts	0x2670, r23
    3404:	80 93 71 26 	sts	0x2671, r24
    3408:	90 93 72 26 	sts	0x2672, r25
				  status(TG_OK); 
    340c:	10 92 6e 26 	sts	0x266E, r1
    3410:	07 c0       	rjmp	.+14     	; 0x3420 <cfg_parse+0x112>
				  break;
    3412:	12 e0       	ldi	r17, 0x02	; 2
    3414:	06 c0       	rjmp	.+12     	; 0x3422 <cfg_parse+0x114>

		case 'X': axis = X; break;
		case 'Y': axis = Y; break;
		case 'Z': axis = Z; break;
    3416:	13 e0       	ldi	r17, 0x03	; 3
    3418:	04 c0       	rjmp	.+8      	; 0x3422 <cfg_parse+0x114>
		case 'A': axis = A; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    341a:	87 e0       	ldi	r24, 0x07	; 7
    341c:	80 93 6e 26 	sts	0x266E, r24
    3420:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    3422:	80 91 6e 26 	lds	r24, 0x266E
    3426:	88 23       	and	r24, r24
    3428:	09 f0       	breq	.+2      	; 0x342c <cfg_parse+0x11e>
    342a:	ee c0       	rjmp	.+476    	; 0x3608 <cfg_parse+0x2fa>
		status(TG_OK);							// pre-emptive setting
    342c:	10 92 6e 26 	sts	0x266E, r1
		switch (text[1]) {
    3430:	f7 01       	movw	r30, r14
    3432:	81 81       	ldd	r24, Z+1	; 0x01
    3434:	8c 34       	cpi	r24, 0x4C	; 76
    3436:	09 f4       	brne	.+2      	; 0x343a <cfg_parse+0x12c>
    3438:	b8 c0       	rjmp	.+368    	; 0x35aa <cfg_parse+0x29c>
    343a:	8d 34       	cpi	r24, 0x4D	; 77
    343c:	30 f4       	brcc	.+12     	; 0x344a <cfg_parse+0x13c>
    343e:	84 34       	cpi	r24, 0x44	; 68
    3440:	a9 f1       	breq	.+106    	; 0x34ac <cfg_parse+0x19e>
    3442:	86 34       	cpi	r24, 0x46	; 70
    3444:	09 f0       	breq	.+2      	; 0x3448 <cfg_parse+0x13a>
    3446:	dd c0       	rjmp	.+442    	; 0x3602 <cfg_parse+0x2f4>
    3448:	1d c0       	rjmp	.+58     	; 0x3484 <cfg_parse+0x176>
    344a:	80 35       	cpi	r24, 0x50	; 80
    344c:	09 f4       	brne	.+2      	; 0x3450 <cfg_parse+0x142>
    344e:	47 c0       	rjmp	.+142    	; 0x34de <cfg_parse+0x1d0>
    3450:	83 35       	cpi	r24, 0x53	; 83
    3452:	21 f0       	breq	.+8      	; 0x345c <cfg_parse+0x14e>
    3454:	8d 34       	cpi	r24, 0x4D	; 77
    3456:	09 f0       	breq	.+2      	; 0x345a <cfg_parse+0x14c>
    3458:	d4 c0       	rjmp	.+424    	; 0x3602 <cfg_parse+0x2f4>
    345a:	58 c0       	rjmp	.+176    	; 0x350c <cfg_parse+0x1fe>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    345c:	c6 01       	movw	r24, r12
    345e:	0e 94 37 48 	call	0x906e	; 0x906e <atoi>
    3462:	21 2f       	mov	r18, r17
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	f9 01       	movw	r30, r18
    3468:	ee 0f       	add	r30, r30
    346a:	ff 1f       	adc	r31, r31
    346c:	e2 0f       	add	r30, r18
    346e:	f3 1f       	adc	r31, r19
    3470:	53 e0       	ldi	r21, 0x03	; 3
    3472:	ee 0f       	add	r30, r30
    3474:	ff 1f       	adc	r31, r31
    3476:	5a 95       	dec	r21
    3478:	e1 f7       	brne	.-8      	; 0x3472 <cfg_parse+0x164>
    347a:	e3 59       	subi	r30, 0x93	; 147
    347c:	f9 4d       	sbci	r31, 0xD9	; 217
    347e:	81 8b       	std	Z+17, r24	; 0x11
    3480:	92 8b       	std	Z+18, r25	; 0x12
    3482:	c2 c0       	rjmp	.+388    	; 0x3608 <cfg_parse+0x2fa>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    3484:	c6 01       	movw	r24, r12
    3486:	0e 94 37 48 	call	0x906e	; 0x906e <atoi>
    348a:	21 2f       	mov	r18, r17
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	f9 01       	movw	r30, r18
    3490:	ee 0f       	add	r30, r30
    3492:	ff 1f       	adc	r31, r31
    3494:	e2 0f       	add	r30, r18
    3496:	f3 1f       	adc	r31, r19
    3498:	23 e0       	ldi	r18, 0x03	; 3
    349a:	ee 0f       	add	r30, r30
    349c:	ff 1f       	adc	r31, r31
    349e:	2a 95       	dec	r18
    34a0:	e1 f7       	brne	.-8      	; 0x349a <cfg_parse+0x18c>
    34a2:	e3 59       	subi	r30, 0x93	; 147
    34a4:	f9 4d       	sbci	r31, 0xD9	; 217
    34a6:	83 8b       	std	Z+19, r24	; 0x13
    34a8:	94 8b       	std	Z+20, r25	; 0x14
    34aa:	ae c0       	rjmp	.+348    	; 0x3608 <cfg_parse+0x2fa>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    34ac:	c6 01       	movw	r24, r12
    34ae:	be 01       	movw	r22, r28
    34b0:	6f 5f       	subi	r22, 0xFF	; 255
    34b2:	7f 4f       	sbci	r23, 0xFF	; 255
    34b4:	0e 94 c9 46 	call	0x8d92	; 0x8d92 <strtod>
    34b8:	21 2f       	mov	r18, r17
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	f9 01       	movw	r30, r18
    34be:	ee 0f       	add	r30, r30
    34c0:	ff 1f       	adc	r31, r31
    34c2:	e2 0f       	add	r30, r18
    34c4:	f3 1f       	adc	r31, r19
    34c6:	b3 e0       	ldi	r27, 0x03	; 3
    34c8:	ee 0f       	add	r30, r30
    34ca:	ff 1f       	adc	r31, r31
    34cc:	ba 95       	dec	r27
    34ce:	e1 f7       	brne	.-8      	; 0x34c8 <cfg_parse+0x1ba>
    34d0:	e3 59       	subi	r30, 0x93	; 147
    34d2:	f9 4d       	sbci	r31, 0xD9	; 217
    34d4:	65 8b       	std	Z+21, r22	; 0x15
    34d6:	76 8b       	std	Z+22, r23	; 0x16
    34d8:	87 8b       	std	Z+23, r24	; 0x17
    34da:	90 8f       	std	Z+24, r25	; 0x18
    34dc:	95 c0       	rjmp	.+298    	; 0x3608 <cfg_parse+0x2fa>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    34de:	c6 01       	movw	r24, r12
    34e0:	0e 94 37 48 	call	0x906e	; 0x906e <atoi>
    34e4:	68 2f       	mov	r22, r24
    34e6:	81 2f       	mov	r24, r17
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	fc 01       	movw	r30, r24
    34ec:	ee 0f       	add	r30, r30
    34ee:	ff 1f       	adc	r31, r31
    34f0:	e8 0f       	add	r30, r24
    34f2:	f9 1f       	adc	r31, r25
    34f4:	73 e0       	ldi	r23, 0x03	; 3
    34f6:	ee 0f       	add	r30, r30
    34f8:	ff 1f       	adc	r31, r31
    34fa:	7a 95       	dec	r23
    34fc:	e1 f7       	brne	.-8      	; 0x34f6 <cfg_parse+0x1e8>
    34fe:	e3 59       	subi	r30, 0x93	; 147
    3500:	f9 4d       	sbci	r31, 0xD9	; 217
    3502:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    3504:	81 2f       	mov	r24, r17
    3506:	0e 94 96 24 	call	0x492c	; 0x492c <st_set_polarity>
    350a:	7e c0       	rjmp	.+252    	; 0x3608 <cfg_parse+0x2fa>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    350c:	f7 01       	movw	r30, r14
    350e:	82 81       	ldd	r24, Z+2	; 0x02
    3510:	89 34       	cpi	r24, 0x49	; 73
    3512:	99 f4       	brne	.+38     	; 0x353a <cfg_parse+0x22c>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    3514:	c6 01       	movw	r24, r12
    3516:	0e 94 37 48 	call	0x906e	; 0x906e <atoi>
    351a:	21 2f       	mov	r18, r17
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	f9 01       	movw	r30, r18
    3520:	ee 0f       	add	r30, r30
    3522:	ff 1f       	adc	r31, r31
    3524:	e2 0f       	add	r30, r18
    3526:	f3 1f       	adc	r31, r19
    3528:	53 e0       	ldi	r21, 0x03	; 3
    352a:	ee 0f       	add	r30, r30
    352c:	ff 1f       	adc	r31, r31
    352e:	5a 95       	dec	r21
    3530:	e1 f7       	brne	.-8      	; 0x352a <cfg_parse+0x21c>
    3532:	e3 59       	subi	r30, 0x93	; 147
    3534:	f9 4d       	sbci	r31, 0xD9	; 217
    3536:	86 87       	std	Z+14, r24	; 0x0e
    3538:	67 c0       	rjmp	.+206    	; 0x3608 <cfg_parse+0x2fa>
				} else if (text[3] == 'R') {
    353a:	f7 01       	movw	r30, r14
    353c:	83 81       	ldd	r24, Z+3	; 0x03
    353e:	82 35       	cpi	r24, 0x52	; 82
    3540:	c9 f4       	brne	.+50     	; 0x3574 <cfg_parse+0x266>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    3542:	c6 01       	movw	r24, r12
    3544:	be 01       	movw	r22, r28
    3546:	6f 5f       	subi	r22, 0xFF	; 255
    3548:	7f 4f       	sbci	r23, 0xFF	; 255
    354a:	0e 94 c9 46 	call	0x8d92	; 0x8d92 <strtod>
    354e:	21 2f       	mov	r18, r17
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	f9 01       	movw	r30, r18
    3554:	ee 0f       	add	r30, r30
    3556:	ff 1f       	adc	r31, r31
    3558:	e2 0f       	add	r30, r18
    355a:	f3 1f       	adc	r31, r19
    355c:	13 e0       	ldi	r17, 0x03	; 3
    355e:	ee 0f       	add	r30, r30
    3560:	ff 1f       	adc	r31, r31
    3562:	1a 95       	dec	r17
    3564:	e1 f7       	brne	.-8      	; 0x355e <cfg_parse+0x250>
    3566:	e3 59       	subi	r30, 0x93	; 147
    3568:	f9 4d       	sbci	r31, 0xD9	; 217
    356a:	61 8f       	std	Z+25, r22	; 0x19
    356c:	72 8f       	std	Z+26, r23	; 0x1a
    356e:	83 8f       	std	Z+27, r24	; 0x1b
    3570:	94 8f       	std	Z+28, r25	; 0x1c
    3572:	4a c0       	rjmp	.+148    	; 0x3608 <cfg_parse+0x2fa>
				} else if (text[3] == 'T') {
    3574:	84 35       	cpi	r24, 0x54	; 84
    3576:	c9 f4       	brne	.+50     	; 0x35aa <cfg_parse+0x29c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    3578:	c6 01       	movw	r24, r12
    357a:	be 01       	movw	r22, r28
    357c:	6f 5f       	subi	r22, 0xFF	; 255
    357e:	7f 4f       	sbci	r23, 0xFF	; 255
    3580:	0e 94 c9 46 	call	0x8d92	; 0x8d92 <strtod>
    3584:	21 2f       	mov	r18, r17
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	f9 01       	movw	r30, r18
    358a:	ee 0f       	add	r30, r30
    358c:	ff 1f       	adc	r31, r31
    358e:	e2 0f       	add	r30, r18
    3590:	f3 1f       	adc	r31, r19
    3592:	a3 e0       	ldi	r26, 0x03	; 3
    3594:	ee 0f       	add	r30, r30
    3596:	ff 1f       	adc	r31, r31
    3598:	aa 95       	dec	r26
    359a:	e1 f7       	brne	.-8      	; 0x3594 <cfg_parse+0x286>
    359c:	e3 59       	subi	r30, 0x93	; 147
    359e:	f9 4d       	sbci	r31, 0xD9	; 217
    35a0:	65 8f       	std	Z+29, r22	; 0x1d
    35a2:	76 8f       	std	Z+30, r23	; 0x1e
    35a4:	87 8f       	std	Z+31, r24	; 0x1f
    35a6:	90 a3       	std	Z+32, r25	; 0x20
    35a8:	2f c0       	rjmp	.+94     	; 0x3608 <cfg_parse+0x2fa>
				}
			case 'L': 
				if (text[2] == 'O') {
    35aa:	f7 01       	movw	r30, r14
    35ac:	82 81       	ldd	r24, Z+2	; 0x02
    35ae:	8f 34       	cpi	r24, 0x4F	; 79
    35b0:	99 f4       	brne	.+38     	; 0x35d8 <cfg_parse+0x2ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    35b2:	c6 01       	movw	r24, r12
    35b4:	0e 94 37 48 	call	0x906e	; 0x906e <atoi>
    35b8:	21 2f       	mov	r18, r17
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	f9 01       	movw	r30, r18
    35be:	ee 0f       	add	r30, r30
    35c0:	ff 1f       	adc	r31, r31
    35c2:	e2 0f       	add	r30, r18
    35c4:	f3 1f       	adc	r31, r19
    35c6:	53 e0       	ldi	r21, 0x03	; 3
    35c8:	ee 0f       	add	r30, r30
    35ca:	ff 1f       	adc	r31, r31
    35cc:	5a 95       	dec	r21
    35ce:	e1 f7       	brne	.-8      	; 0x35c8 <cfg_parse+0x2ba>
    35d0:	e3 59       	subi	r30, 0x93	; 147
    35d2:	f9 4d       	sbci	r31, 0xD9	; 217
    35d4:	87 87       	std	Z+15, r24	; 0x0f
    35d6:	18 c0       	rjmp	.+48     	; 0x3608 <cfg_parse+0x2fa>
				} else if (text[2] == 'I') {
    35d8:	89 34       	cpi	r24, 0x49	; 73
    35da:	99 f4       	brne	.+38     	; 0x3602 <cfg_parse+0x2f4>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    35dc:	c6 01       	movw	r24, r12
    35de:	0e 94 37 48 	call	0x906e	; 0x906e <atoi>
    35e2:	21 2f       	mov	r18, r17
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	f9 01       	movw	r30, r18
    35e8:	ee 0f       	add	r30, r30
    35ea:	ff 1f       	adc	r31, r31
    35ec:	e2 0f       	add	r30, r18
    35ee:	f3 1f       	adc	r31, r19
    35f0:	23 e0       	ldi	r18, 0x03	; 3
    35f2:	ee 0f       	add	r30, r30
    35f4:	ff 1f       	adc	r31, r31
    35f6:	2a 95       	dec	r18
    35f8:	e1 f7       	brne	.-8      	; 0x35f2 <cfg_parse+0x2e4>
    35fa:	e3 59       	subi	r30, 0x93	; 147
    35fc:	f9 4d       	sbci	r31, 0xD9	; 217
    35fe:	85 a3       	std	Z+37, r24	; 0x25
    3600:	03 c0       	rjmp	.+6      	; 0x3608 <cfg_parse+0x2fa>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    3602:	87 e0       	ldi	r24, 0x07	; 7
    3604:	80 93 6e 26 	sts	0x266E, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    3608:	80 91 6e 26 	lds	r24, 0x266E
    360c:	b7 01       	movw	r22, r14
    360e:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    3612:	80 91 6e 26 	lds	r24, 0x266E
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	cf 91       	pop	r28
    361e:	df 91       	pop	r29
    3620:	1f 91       	pop	r17
    3622:	ff 90       	pop	r15
    3624:	ef 90       	pop	r14
    3626:	df 90       	pop	r13
    3628:	cf 90       	pop	r12
    362a:	08 95       	ret

0000362c <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    362c:	ef 92       	push	r14
    362e:	ff 92       	push	r15
    3630:	0f 93       	push	r16
    3632:	1f 93       	push	r17
    3634:	df 93       	push	r29
    3636:	cf 93       	push	r28
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
    363c:	a8 97       	sbiw	r28, 0x28	; 40
    363e:	cd bf       	out	0x3d, r28	; 61
    3640:	de bf       	out	0x3e, r29	; 62
    3642:	0b e4       	ldi	r16, 0x4B	; 75
    3644:	12 e0       	ldi	r17, 0x02	; 2
    3646:	a0 e0       	ldi	r26, 0x00	; 0
    3648:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    364a:	7e 01       	movw	r14, r28
    364c:	08 94       	sec
    364e:	e1 1c       	adc	r14, r1
    3650:	f1 1c       	adc	r15, r1
    3652:	02 c0       	rjmp	.+4      	; 0x3658 <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3654:	0f 5f       	subi	r16, 0xFF	; 255
    3656:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    3658:	f8 01       	movw	r30, r16
    365a:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    365c:	88 23       	and	r24, r24
    365e:	89 f4       	brne	.+34     	; 0x3682 <cfg_test+0x56>
			text[j] = 0;
    3660:	ce 01       	movw	r24, r28
    3662:	01 96       	adiw	r24, 0x01	; 1
    3664:	a8 0f       	add	r26, r24
    3666:	b9 1f       	adc	r27, r25
    3668:	1c 92       	st	X, r1
			cfg_parse(text);
    366a:	0e 94 87 19 	call	0x330e	; 0x330e <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    366e:	a8 96       	adiw	r28, 0x28	; 40
    3670:	cd bf       	out	0x3d, r28	; 61
    3672:	de bf       	out	0x3e, r29	; 62
    3674:	cf 91       	pop	r28
    3676:	df 91       	pop	r29
    3678:	1f 91       	pop	r17
    367a:	0f 91       	pop	r16
    367c:	ff 90       	pop	r15
    367e:	ef 90       	pop	r14
    3680:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    3682:	8d 30       	cpi	r24, 0x0D	; 13
    3684:	21 f0       	breq	.+8      	; 0x368e <cfg_test+0x62>
    3686:	8a 30       	cpi	r24, 0x0A	; 10
    3688:	11 f0       	breq	.+4      	; 0x368e <cfg_test+0x62>
    368a:	8b 33       	cpi	r24, 0x3B	; 59
    368c:	49 f4       	brne	.+18     	; 0x36a0 <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    368e:	ae 0d       	add	r26, r14
    3690:	bf 1d       	adc	r27, r15
    3692:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    3694:	c7 01       	movw	r24, r14
    3696:	0e 94 87 19 	call	0x330e	; 0x330e <cfg_parse>
    369a:	a0 e0       	ldi	r26, 0x00	; 0
    369c:	b0 e0       	ldi	r27, 0x00	; 0
    369e:	da cf       	rjmp	.-76     	; 0x3654 <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    36a0:	81 32       	cpi	r24, 0x21	; 33
    36a2:	c0 f2       	brcs	.-80     	; 0x3654 <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    36a4:	f7 01       	movw	r30, r14
    36a6:	ea 0f       	add	r30, r26
    36a8:	fb 1f       	adc	r31, r27
    36aa:	80 83       	st	Z, r24
    36ac:	11 96       	adiw	r26, 0x01	; 1
    36ae:	d2 cf       	rjmp	.-92     	; 0x3654 <cfg_test+0x28>

000036b0 <en_init>:


void en_init(void) 
{
	return;
}
    36b0:	08 95       	ret

000036b2 <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
    36b2:	88 23       	and	r24, r24
    36b4:	b1 f0       	breq	.+44     	; 0x36e2 <en_write+0x30>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    36b6:	e0 91 69 26 	lds	r30, 0x2669
    36ba:	f0 91 6a 26 	lds	r31, 0x266A
    36be:	80 e2       	ldi	r24, 0x20	; 32
    36c0:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    36c2:	e0 91 59 26 	lds	r30, 0x2659
    36c6:	f0 91 5a 26 	lds	r31, 0x265A
    36ca:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    36cc:	e0 91 49 26 	lds	r30, 0x2649
    36d0:	f0 91 4a 26 	lds	r31, 0x264A
    36d4:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    36d6:	e0 91 39 26 	lds	r30, 0x2639
    36da:	f0 91 3a 26 	lds	r31, 0x263A
    36de:	85 83       	std	Z+5, r24	; 0x05
    36e0:	08 95       	ret
void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36e2:	e0 91 69 26 	lds	r30, 0x2669
    36e6:	f0 91 6a 26 	lds	r31, 0x266A
    36ea:	80 e2       	ldi	r24, 0x20	; 32
    36ec:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36ee:	e0 91 59 26 	lds	r30, 0x2659
    36f2:	f0 91 5a 26 	lds	r31, 0x265A
    36f6:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36f8:	e0 91 49 26 	lds	r30, 0x2649
    36fc:	f0 91 4a 26 	lds	r31, 0x264A
    3700:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    3702:	e0 91 39 26 	lds	r30, 0x2639
    3706:	f0 91 3a 26 	lds	r31, 0x263A
    370a:	86 83       	std	Z+6, r24	; 0x06
    370c:	08 95       	ret

0000370e <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    370e:	0f 93       	push	r16
    3710:	df 93       	push	r29
    3712:	cf 93       	push	r28
    3714:	0f 92       	push	r0
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    371a:	8b ec       	ldi	r24, 0xCB	; 203
    371c:	e0 e5       	ldi	r30, 0x50	; 80
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    3722:	88 e0       	ldi	r24, 0x08	; 8
    3724:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    3728:	80 91 51 00 	lds	r24, 0x0051
    372c:	83 ff       	sbrs	r24, 3
    372e:	fc cf       	rjmp	.-8      	; 0x3728 <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    3730:	82 ec       	ldi	r24, 0xC2	; 194
    3732:	e0 e5       	ldi	r30, 0x50	; 80
    3734:	f0 e0       	ldi	r31, 0x00	; 0
    3736:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    3738:	88 e1       	ldi	r24, 0x18	; 24
    373a:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    373e:	80 91 51 00 	lds	r24, 0x0051
    3742:	84 ff       	sbrs	r24, 4
    3744:	fc cf       	rjmp	.-8      	; 0x373e <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3746:	8f b7       	in	r24, 0x3f	; 63
    3748:	89 83       	std	Y+1, r24	; 0x01
    374a:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    374c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    374e:	24 e0       	ldi	r18, 0x04	; 4
    3750:	80 e4       	ldi	r24, 0x40	; 64
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	fc 01       	movw	r30, r24
    3756:	08 ed       	ldi	r16, 0xD8	; 216
    3758:	04 bf       	out	0x34, r16	; 52
    375a:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    375c:	89 81       	ldd	r24, Y+1	; 0x01
    375e:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    3760:	80 91 50 00 	lds	r24, 0x0050
    3764:	8e 7f       	andi	r24, 0xFE	; 254
    3766:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    376a:	0f 90       	pop	r0
    376c:	cf 91       	pop	r28
    376e:	df 91       	pop	r29
    3770:	0f 91       	pop	r16
    3772:	08 95       	ret

00003774 <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    3774:	0e 94 87 1b 	call	0x370e	; 0x370e <xmega_init_clocks>
}
    3778:	08 95       	ret

0000377a <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    377a:	0f 93       	push	r16
    377c:	df 93       	push	r29
    377e:	cf 93       	push	r28
    3780:	0f 92       	push	r0
    3782:	cd b7       	in	r28, 0x3d	; 61
    3784:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3786:	2f b7       	in	r18, 0x3f	; 63
    3788:	29 83       	std	Y+1, r18	; 0x01
    378a:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    378c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    378e:	fc 01       	movw	r30, r24
    3790:	08 ed       	ldi	r16, 0xD8	; 216
    3792:	04 bf       	out	0x34, r16	; 52
    3794:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3796:	89 81       	ldd	r24, Y+1	; 0x01
    3798:	8f bf       	out	0x3f, r24	; 63
#endif
}
    379a:	0f 90       	pop	r0
    379c:	cf 91       	pop	r28
    379e:	df 91       	pop	r29
    37a0:	0f 91       	pop	r16
    37a2:	08 95       	ret

000037a4 <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

void mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    37a4:	10 92 80 21 	sts	0x2180, r1
	ma.arc_state = MC_STATE_OFF;
    37a8:	10 92 dd 26 	sts	0x26DD, r1
}
    37ac:	08 95       	ret

000037ae <mc_go_home>:
 */

void mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    37ae:	8c e0       	ldi	r24, 0x0C	; 12
    37b0:	e1 e8       	ldi	r30, 0x81	; 129
    37b2:	f1 e2       	ldi	r31, 0x21	; 33
    37b4:	df 01       	movw	r26, r30
    37b6:	1d 92       	st	X+, r1
    37b8:	8a 95       	dec	r24
    37ba:	e9 f7       	brne	.-6      	; 0x37b6 <mc_go_home+0x8>
}
    37bc:	08 95       	ret

000037be <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    37be:	8c e0       	ldi	r24, 0x0C	; 12
    37c0:	e1 e8       	ldi	r30, 0x81	; 129
    37c2:	f1 e2       	ldi	r31, 0x21	; 33
    37c4:	df 01       	movw	r26, r30
    37c6:	1d 92       	st	X+, r1
    37c8:	8a 95       	dec	r24
    37ca:	e9 f7       	brne	.-6      	; 0x37c6 <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    37cc:	10 92 80 21 	sts	0x2180, r1
	ma.arc_state = MC_STATE_OFF;
    37d0:	10 92 dd 26 	sts	0x26DD, r1
}
    37d4:	08 95       	ret

000037d6 <mc_line_continuation>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continuation() 
{
    37d6:	af 92       	push	r10
    37d8:	bf 92       	push	r11
    37da:	cf 92       	push	r12
    37dc:	df 92       	push	r13
    37de:	ef 92       	push	r14
    37e0:	ff 92       	push	r15
    37e2:	0f 93       	push	r16
    37e4:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    37e6:	80 91 80 21 	lds	r24, 0x2180
    37ea:	88 23       	and	r24, r24
    37ec:	19 f4       	brne	.+6      	; 0x37f4 <mc_line_continuation+0x1e>
    37ee:	21 e0       	ldi	r18, 0x01	; 1
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	30 c0       	rjmp	.+96     	; 0x3854 <mc_line_continuation+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    37f4:	82 e0       	ldi	r24, 0x02	; 2
    37f6:	80 93 80 21 	sts	0x2180, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    37fa:	0e 94 a4 31 	call	0x6348	; 0x6348 <mv_test_move_buffer_full>
    37fe:	88 23       	and	r24, r24
    3800:	19 f0       	breq	.+6      	; 0x3808 <mc_line_continuation+0x32>
    3802:	22 e0       	ldi	r18, 0x02	; 2
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	26 c0       	rjmp	.+76     	; 0x3854 <mc_line_continuation+0x7e>
		return (TG_CONTINUE);
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    3808:	60 91 99 21 	lds	r22, 0x2199
    380c:	70 91 9a 21 	lds	r23, 0x219A
    3810:	80 91 9b 21 	lds	r24, 0x219B
    3814:	90 91 9c 21 	lds	r25, 0x219C
    3818:	20 91 9d 21 	lds	r18, 0x219D
    381c:	30 91 9e 21 	lds	r19, 0x219E
    3820:	40 91 9f 21 	lds	r20, 0x219F
    3824:	50 91 a0 21 	lds	r21, 0x21A0
    3828:	e0 90 a1 21 	lds	r14, 0x21A1
    382c:	f0 90 a2 21 	lds	r15, 0x21A2
    3830:	00 91 a3 21 	lds	r16, 0x21A3
    3834:	10 91 a4 21 	lds	r17, 0x21A4
    3838:	a0 90 a5 21 	lds	r10, 0x21A5
    383c:	b0 90 a6 21 	lds	r11, 0x21A6
    3840:	c0 90 a7 21 	lds	r12, 0x21A7
    3844:	d0 90 a8 21 	lds	r13, 0x21A8
    3848:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    384c:	10 92 80 21 	sts	0x2180, r1
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3854:	c9 01       	movw	r24, r18
    3856:	1f 91       	pop	r17
    3858:	0f 91       	pop	r16
    385a:	ff 90       	pop	r15
    385c:	ef 90       	pop	r14
    385e:	df 90       	pop	r13
    3860:	cf 90       	pop	r12
    3862:	bf 90       	pop	r11
    3864:	af 90       	pop	r10
    3866:	08 95       	ret

00003868 <mc_dwell>:
 * Dwells are queued as linbes so the line continuation is used for non-blocking.
 */

int mc_dwell(double seconds) 
{
	mc.steps[X] = 0;
    3868:	10 92 99 21 	sts	0x2199, r1
    386c:	10 92 9a 21 	sts	0x219A, r1
    3870:	10 92 9b 21 	sts	0x219B, r1
    3874:	10 92 9c 21 	sts	0x219C, r1
	mc.steps[Y] = 0;
    3878:	10 92 9d 21 	sts	0x219D, r1
    387c:	10 92 9e 21 	sts	0x219E, r1
    3880:	10 92 9f 21 	sts	0x219F, r1
    3884:	10 92 a0 21 	sts	0x21A0, r1
	mc.steps[Z] = 0;
    3888:	10 92 a1 21 	sts	0x21A1, r1
    388c:	10 92 a2 21 	sts	0x21A2, r1
    3890:	10 92 a3 21 	sts	0x21A3, r1
    3894:	10 92 a4 21 	sts	0x21A4, r1
	mc.microseconds = trunc(seconds*1000000);
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	34 e2       	ldi	r19, 0x24	; 36
    389c:	44 e7       	ldi	r20, 0x74	; 116
    389e:	59 e4       	ldi	r21, 0x49	; 73
    38a0:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    38a4:	0e 94 32 43 	call	0x8664	; 0x8664 <__fixunssfsi>
    38a8:	60 93 a5 21 	sts	0x21A5, r22
    38ac:	70 93 a6 21 	sts	0x21A6, r23
    38b0:	80 93 a7 21 	sts	0x21A7, r24
    38b4:	90 93 a8 21 	sts	0x21A8, r25
	mc.line_state = MC_STATE_NEW;
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	80 93 80 21 	sts	0x2180, r24
	return (mc_line_continuation());
    38be:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <mc_line_continuation>
}
    38c2:	08 95       	ret

000038c4 <mc_line_nonblock>:
/* 
 * mc_line_nonblock() - mc_line with non-blocking behavior
 */

int mc_line_nonblock(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    38c4:	2f 92       	push	r2
    38c6:	3f 92       	push	r3
    38c8:	4f 92       	push	r4
    38ca:	5f 92       	push	r5
    38cc:	6f 92       	push	r6
    38ce:	7f 92       	push	r7
    38d0:	8f 92       	push	r8
    38d2:	9f 92       	push	r9
    38d4:	af 92       	push	r10
    38d6:	bf 92       	push	r11
    38d8:	cf 92       	push	r12
    38da:	df 92       	push	r13
    38dc:	ef 92       	push	r14
    38de:	ff 92       	push	r15
    38e0:	0f 93       	push	r16
    38e2:	1f 93       	push	r17
    38e4:	df 93       	push	r29
    38e6:	cf 93       	push	r28
    38e8:	cd b7       	in	r28, 0x3d	; 61
    38ea:	de b7       	in	r29, 0x3e	; 62
    38ec:	64 97       	sbiw	r28, 0x14	; 20
    38ee:	cd bf       	out	0x3d, r28	; 61
    38f0:	de bf       	out	0x3e, r29	; 62
    38f2:	2d 87       	std	Y+13, r18	; 0x0d
    38f4:	3e 87       	std	Y+14, r19	; 0x0e
    38f6:	4f 87       	std	Y+15, r20	; 0x0f
    38f8:	58 8b       	std	Y+16, r21	; 0x10
    38fa:	a9 8a       	std	Y+17, r10	; 0x11
    38fc:	ba 8a       	std	Y+18, r11	; 0x12
    38fe:	cb 8a       	std	Y+19, r12	; 0x13
    3900:	dc 8a       	std	Y+20, r13	; 0x14
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    3902:	20 91 8e 26 	lds	r18, 0x268E
    3906:	30 91 8f 26 	lds	r19, 0x268F
    390a:	40 91 90 26 	lds	r20, 0x2690
    390e:	50 91 91 26 	lds	r21, 0x2691
    3912:	29 87       	std	Y+9, r18	; 0x09
    3914:	3a 87       	std	Y+10, r19	; 0x0a
    3916:	4b 87       	std	Y+11, r20	; 0x0b
    3918:	5c 87       	std	Y+12, r21	; 0x0c
    391a:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    391e:	0e 94 50 45 	call	0x8aa0	; 0x8aa0 <lround>
    3922:	2b 01       	movw	r4, r22
    3924:	3c 01       	movw	r6, r24
    3926:	40 92 8d 21 	sts	0x218D, r4
    392a:	50 92 8e 21 	sts	0x218E, r5
    392e:	60 92 8f 21 	sts	0x218F, r6
    3932:	70 92 90 21 	sts	0x2190, r7
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    3936:	80 91 a6 26 	lds	r24, 0x26A6
    393a:	90 91 a7 26 	lds	r25, 0x26A7
    393e:	a0 91 a8 26 	lds	r26, 0x26A8
    3942:	b0 91 a9 26 	lds	r27, 0x26A9
    3946:	8d 83       	std	Y+5, r24	; 0x05
    3948:	9e 83       	std	Y+6, r25	; 0x06
    394a:	af 83       	std	Y+7, r26	; 0x07
    394c:	b8 87       	std	Y+8, r27	; 0x08
    394e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3950:	7e 85       	ldd	r23, Y+14	; 0x0e
    3952:	8f 85       	ldd	r24, Y+15	; 0x0f
    3954:	98 89       	ldd	r25, Y+16	; 0x10
    3956:	2d 81       	ldd	r18, Y+5	; 0x05
    3958:	3e 81       	ldd	r19, Y+6	; 0x06
    395a:	4f 81       	ldd	r20, Y+7	; 0x07
    395c:	58 85       	ldd	r21, Y+8	; 0x08
    395e:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    3962:	0e 94 50 45 	call	0x8aa0	; 0x8aa0 <lround>
    3966:	5b 01       	movw	r10, r22
    3968:	6c 01       	movw	r12, r24
    396a:	a0 92 91 21 	sts	0x2191, r10
    396e:	b0 92 92 21 	sts	0x2192, r11
    3972:	c0 92 93 21 	sts	0x2193, r12
    3976:	d0 92 94 21 	sts	0x2194, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    397a:	20 91 be 26 	lds	r18, 0x26BE
    397e:	30 91 bf 26 	lds	r19, 0x26BF
    3982:	40 91 c0 26 	lds	r20, 0x26C0
    3986:	50 91 c1 26 	lds	r21, 0x26C1
    398a:	29 83       	std	Y+1, r18	; 0x01
    398c:	3a 83       	std	Y+2, r19	; 0x02
    398e:	4b 83       	std	Y+3, r20	; 0x03
    3990:	5c 83       	std	Y+4, r21	; 0x04
    3992:	c8 01       	movw	r24, r16
    3994:	b7 01       	movw	r22, r14
    3996:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    399a:	0e 94 50 45 	call	0x8aa0	; 0x8aa0 <lround>
    399e:	9b 01       	movw	r18, r22
    39a0:	ac 01       	movw	r20, r24
    39a2:	20 93 95 21 	sts	0x2195, r18
    39a6:	30 93 96 21 	sts	0x2196, r19
    39aa:	40 93 97 21 	sts	0x2197, r20
    39ae:	50 93 98 21 	sts	0x2198, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    39b2:	80 91 81 21 	lds	r24, 0x2181
    39b6:	90 91 82 21 	lds	r25, 0x2182
    39ba:	a0 91 83 21 	lds	r26, 0x2183
    39be:	b0 91 84 21 	lds	r27, 0x2184
    39c2:	83 01       	movw	r16, r6
    39c4:	72 01       	movw	r14, r4
    39c6:	e8 1a       	sub	r14, r24
    39c8:	f9 0a       	sbc	r15, r25
    39ca:	0a 0b       	sbc	r16, r26
    39cc:	1b 0b       	sbc	r17, r27
    39ce:	e0 92 99 21 	sts	0x2199, r14
    39d2:	f0 92 9a 21 	sts	0x219A, r15
    39d6:	00 93 9b 21 	sts	0x219B, r16
    39da:	10 93 9c 21 	sts	0x219C, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    39de:	80 91 85 21 	lds	r24, 0x2185
    39e2:	90 91 86 21 	lds	r25, 0x2186
    39e6:	a0 91 87 21 	lds	r26, 0x2187
    39ea:	b0 91 88 21 	lds	r27, 0x2188
    39ee:	a8 1a       	sub	r10, r24
    39f0:	b9 0a       	sbc	r11, r25
    39f2:	ca 0a       	sbc	r12, r26
    39f4:	db 0a       	sbc	r13, r27
    39f6:	a0 92 9d 21 	sts	0x219D, r10
    39fa:	b0 92 9e 21 	sts	0x219E, r11
    39fe:	c0 92 9f 21 	sts	0x219F, r12
    3a02:	d0 92 a0 21 	sts	0x21A0, r13
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    3a06:	80 91 89 21 	lds	r24, 0x2189
    3a0a:	90 91 8a 21 	lds	r25, 0x218A
    3a0e:	a0 91 8b 21 	lds	r26, 0x218B
    3a12:	b0 91 8c 21 	lds	r27, 0x218C
    3a16:	19 01       	movw	r2, r18
    3a18:	2a 01       	movw	r4, r20
    3a1a:	28 1a       	sub	r2, r24
    3a1c:	39 0a       	sbc	r3, r25
    3a1e:	4a 0a       	sbc	r4, r26
    3a20:	5b 0a       	sbc	r5, r27
    3a22:	20 92 a1 21 	sts	0x21A1, r2
    3a26:	30 92 a2 21 	sts	0x21A2, r3
    3a2a:	40 92 a3 21 	sts	0x21A3, r4
    3a2e:	50 92 a4 21 	sts	0x21A4, r5

	if (invert_feed_rate) {
    3a32:	89 28       	or	r8, r9
    3a34:	59 f0       	breq	.+22     	; 0x3a4c <mc_line_nonblock+0x188>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3a36:	60 ec       	ldi	r22, 0xC0	; 192
    3a38:	71 ee       	ldi	r23, 0xE1	; 225
    3a3a:	84 e6       	ldi	r24, 0x64	; 100
    3a3c:	9c e4       	ldi	r25, 0x4C	; 76
    3a3e:	29 89       	ldd	r18, Y+17	; 0x11
    3a40:	3a 89       	ldd	r19, Y+18	; 0x12
    3a42:	4b 89       	ldd	r20, Y+19	; 0x13
    3a44:	5c 89       	ldd	r21, Y+20	; 0x14
    3a46:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    3a4a:	4a c0       	rjmp	.+148    	; 0x3ae0 <mc_line_nonblock+0x21c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    3a4c:	c8 01       	movw	r24, r16
    3a4e:	b7 01       	movw	r22, r14
    3a50:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    3a54:	29 85       	ldd	r18, Y+9	; 0x09
    3a56:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a58:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a5a:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a5c:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    3a60:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <square>
    3a64:	3b 01       	movw	r6, r22
    3a66:	4c 01       	movw	r8, r24
    3a68:	c6 01       	movw	r24, r12
    3a6a:	b5 01       	movw	r22, r10
    3a6c:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    3a70:	2d 81       	ldd	r18, Y+5	; 0x05
    3a72:	3e 81       	ldd	r19, Y+6	; 0x06
    3a74:	4f 81       	ldd	r20, Y+7	; 0x07
    3a76:	58 85       	ldd	r21, Y+8	; 0x08
    3a78:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    3a7c:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <square>
    3a80:	5b 01       	movw	r10, r22
    3a82:	6c 01       	movw	r12, r24
    3a84:	c2 01       	movw	r24, r4
    3a86:	b1 01       	movw	r22, r2
    3a88:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    3a8c:	29 81       	ldd	r18, Y+1	; 0x01
    3a8e:	3a 81       	ldd	r19, Y+2	; 0x02
    3a90:	4b 81       	ldd	r20, Y+3	; 0x03
    3a92:	5c 81       	ldd	r21, Y+4	; 0x04
    3a94:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    3a98:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <square>
    3a9c:	7b 01       	movw	r14, r22
    3a9e:	8c 01       	movw	r16, r24
    3aa0:	c4 01       	movw	r24, r8
    3aa2:	b3 01       	movw	r22, r6
    3aa4:	a6 01       	movw	r20, r12
    3aa6:	95 01       	movw	r18, r10
    3aa8:	0e 94 1f 42 	call	0x843e	; 0x843e <__addsf3>
    3aac:	a8 01       	movw	r20, r16
    3aae:	97 01       	movw	r18, r14
    3ab0:	0e 94 1f 42 	call	0x843e	; 0x843e <__addsf3>
    3ab4:	0e 94 ed 45 	call	0x8bda	; 0x8bda <sqrt>
    3ab8:	60 93 a9 21 	sts	0x21A9, r22
    3abc:	70 93 aa 21 	sts	0x21AA, r23
    3ac0:	80 93 ab 21 	sts	0x21AB, r24
    3ac4:	90 93 ac 21 	sts	0x21AC, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3ac8:	29 89       	ldd	r18, Y+17	; 0x11
    3aca:	3a 89       	ldd	r19, Y+18	; 0x12
    3acc:	4b 89       	ldd	r20, Y+19	; 0x13
    3ace:	5c 89       	ldd	r21, Y+20	; 0x14
    3ad0:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    3ad4:	20 e0       	ldi	r18, 0x00	; 0
    3ad6:	34 e2       	ldi	r19, 0x24	; 36
    3ad8:	44 e7       	ldi	r20, 0x74	; 116
    3ada:	59 e4       	ldi	r21, 0x49	; 73
    3adc:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    3ae0:	0e 94 50 45 	call	0x8aa0	; 0x8aa0 <lround>
    3ae4:	60 93 a5 21 	sts	0x21A5, r22
    3ae8:	70 93 a6 21 	sts	0x21A6, r23
    3aec:	80 93 a7 21 	sts	0x21A7, r24
    3af0:	90 93 a8 21 	sts	0x21A8, r25
	}
	mc.line_state = MC_STATE_NEW;
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	80 93 80 21 	sts	0x2180, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3afa:	e1 e8       	ldi	r30, 0x81	; 129
    3afc:	f1 e2       	ldi	r31, 0x21	; 33
    3afe:	df 01       	movw	r26, r30
    3b00:	1c 96       	adiw	r26, 0x0c	; 12
    3b02:	8c e0       	ldi	r24, 0x0C	; 12
    3b04:	0d 90       	ld	r0, X+
    3b06:	01 92       	st	Z+, r0
    3b08:	81 50       	subi	r24, 0x01	; 1
    3b0a:	e1 f7       	brne	.-8      	; 0x3b04 <mc_line_nonblock+0x240>
	return (mc_line_continuation());
    3b0c:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <mc_line_continuation>
}
    3b10:	64 96       	adiw	r28, 0x14	; 20
    3b12:	cd bf       	out	0x3d, r28	; 61
    3b14:	de bf       	out	0x3e, r29	; 62
    3b16:	cf 91       	pop	r28
    3b18:	df 91       	pop	r29
    3b1a:	1f 91       	pop	r17
    3b1c:	0f 91       	pop	r16
    3b1e:	ff 90       	pop	r15
    3b20:	ef 90       	pop	r14
    3b22:	df 90       	pop	r13
    3b24:	cf 90       	pop	r12
    3b26:	bf 90       	pop	r11
    3b28:	af 90       	pop	r10
    3b2a:	9f 90       	pop	r9
    3b2c:	8f 90       	pop	r8
    3b2e:	7f 90       	pop	r7
    3b30:	6f 90       	pop	r6
    3b32:	5f 90       	pop	r5
    3b34:	4f 90       	pop	r4
    3b36:	3f 90       	pop	r3
    3b38:	2f 90       	pop	r2
    3b3a:	08 95       	ret

00003b3c <mc_line>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    3b3c:	2f 92       	push	r2
    3b3e:	3f 92       	push	r3
    3b40:	4f 92       	push	r4
    3b42:	5f 92       	push	r5
    3b44:	6f 92       	push	r6
    3b46:	7f 92       	push	r7
    3b48:	8f 92       	push	r8
    3b4a:	9f 92       	push	r9
    3b4c:	af 92       	push	r10
    3b4e:	bf 92       	push	r11
    3b50:	cf 92       	push	r12
    3b52:	df 92       	push	r13
    3b54:	ef 92       	push	r14
    3b56:	ff 92       	push	r15
    3b58:	0f 93       	push	r16
    3b5a:	1f 93       	push	r17
    3b5c:	df 93       	push	r29
    3b5e:	cf 93       	push	r28
    3b60:	cd b7       	in	r28, 0x3d	; 61
    3b62:	de b7       	in	r29, 0x3e	; 62
    3b64:	6c 97       	sbiw	r28, 0x1c	; 28
    3b66:	cd bf       	out	0x3d, r28	; 61
    3b68:	de bf       	out	0x3e, r29	; 62
    3b6a:	2d 8b       	std	Y+21, r18	; 0x15
    3b6c:	3e 8b       	std	Y+22, r19	; 0x16
    3b6e:	4f 8b       	std	Y+23, r20	; 0x17
    3b70:	58 8f       	std	Y+24, r21	; 0x18
    3b72:	a9 8e       	std	Y+25, r10	; 0x19
    3b74:	ba 8e       	std	Y+26, r11	; 0x1a
    3b76:	cb 8e       	std	Y+27, r12	; 0x1b
    3b78:	dc 8e       	std	Y+28, r13	; 0x1c
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    3b7a:	20 91 8e 26 	lds	r18, 0x268E
    3b7e:	30 91 8f 26 	lds	r19, 0x268F
    3b82:	40 91 90 26 	lds	r20, 0x2690
    3b86:	50 91 91 26 	lds	r21, 0x2691
    3b8a:	29 8b       	std	Y+17, r18	; 0x11
    3b8c:	3a 8b       	std	Y+18, r19	; 0x12
    3b8e:	4b 8b       	std	Y+19, r20	; 0x13
    3b90:	5c 8b       	std	Y+20, r21	; 0x14
    3b92:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    3b96:	0e 94 50 45 	call	0x8aa0	; 0x8aa0 <lround>
    3b9a:	2b 01       	movw	r4, r22
    3b9c:	3c 01       	movw	r6, r24
    3b9e:	40 92 8d 21 	sts	0x218D, r4
    3ba2:	50 92 8e 21 	sts	0x218E, r5
    3ba6:	60 92 8f 21 	sts	0x218F, r6
    3baa:	70 92 90 21 	sts	0x2190, r7
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    3bae:	80 91 a6 26 	lds	r24, 0x26A6
    3bb2:	90 91 a7 26 	lds	r25, 0x26A7
    3bb6:	a0 91 a8 26 	lds	r26, 0x26A8
    3bba:	b0 91 a9 26 	lds	r27, 0x26A9
    3bbe:	8d 87       	std	Y+13, r24	; 0x0d
    3bc0:	9e 87       	std	Y+14, r25	; 0x0e
    3bc2:	af 87       	std	Y+15, r26	; 0x0f
    3bc4:	b8 8b       	std	Y+16, r27	; 0x10
    3bc6:	6d 89       	ldd	r22, Y+21	; 0x15
    3bc8:	7e 89       	ldd	r23, Y+22	; 0x16
    3bca:	8f 89       	ldd	r24, Y+23	; 0x17
    3bcc:	98 8d       	ldd	r25, Y+24	; 0x18
    3bce:	2d 85       	ldd	r18, Y+13	; 0x0d
    3bd0:	3e 85       	ldd	r19, Y+14	; 0x0e
    3bd2:	4f 85       	ldd	r20, Y+15	; 0x0f
    3bd4:	58 89       	ldd	r21, Y+16	; 0x10
    3bd6:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    3bda:	0e 94 50 45 	call	0x8aa0	; 0x8aa0 <lround>
    3bde:	5b 01       	movw	r10, r22
    3be0:	6c 01       	movw	r12, r24
    3be2:	a0 92 91 21 	sts	0x2191, r10
    3be6:	b0 92 92 21 	sts	0x2192, r11
    3bea:	c0 92 93 21 	sts	0x2193, r12
    3bee:	d0 92 94 21 	sts	0x2194, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    3bf2:	20 91 be 26 	lds	r18, 0x26BE
    3bf6:	30 91 bf 26 	lds	r19, 0x26BF
    3bfa:	40 91 c0 26 	lds	r20, 0x26C0
    3bfe:	50 91 c1 26 	lds	r21, 0x26C1
    3c02:	29 87       	std	Y+9, r18	; 0x09
    3c04:	3a 87       	std	Y+10, r19	; 0x0a
    3c06:	4b 87       	std	Y+11, r20	; 0x0b
    3c08:	5c 87       	std	Y+12, r21	; 0x0c
    3c0a:	c8 01       	movw	r24, r16
    3c0c:	b7 01       	movw	r22, r14
    3c0e:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    3c12:	0e 94 50 45 	call	0x8aa0	; 0x8aa0 <lround>
    3c16:	9b 01       	movw	r18, r22
    3c18:	ac 01       	movw	r20, r24
    3c1a:	20 93 95 21 	sts	0x2195, r18
    3c1e:	30 93 96 21 	sts	0x2196, r19
    3c22:	40 93 97 21 	sts	0x2197, r20
    3c26:	50 93 98 21 	sts	0x2198, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    3c2a:	80 91 81 21 	lds	r24, 0x2181
    3c2e:	90 91 82 21 	lds	r25, 0x2182
    3c32:	a0 91 83 21 	lds	r26, 0x2183
    3c36:	b0 91 84 21 	lds	r27, 0x2184
    3c3a:	83 01       	movw	r16, r6
    3c3c:	72 01       	movw	r14, r4
    3c3e:	e8 1a       	sub	r14, r24
    3c40:	f9 0a       	sbc	r15, r25
    3c42:	0a 0b       	sbc	r16, r26
    3c44:	1b 0b       	sbc	r17, r27
    3c46:	ed 82       	std	Y+5, r14	; 0x05
    3c48:	fe 82       	std	Y+6, r15	; 0x06
    3c4a:	0f 83       	std	Y+7, r16	; 0x07
    3c4c:	18 87       	std	Y+8, r17	; 0x08
    3c4e:	e0 92 99 21 	sts	0x2199, r14
    3c52:	f0 92 9a 21 	sts	0x219A, r15
    3c56:	00 93 9b 21 	sts	0x219B, r16
    3c5a:	10 93 9c 21 	sts	0x219C, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    3c5e:	80 91 85 21 	lds	r24, 0x2185
    3c62:	90 91 86 21 	lds	r25, 0x2186
    3c66:	a0 91 87 21 	lds	r26, 0x2187
    3c6a:	b0 91 88 21 	lds	r27, 0x2188
    3c6e:	86 01       	movw	r16, r12
    3c70:	75 01       	movw	r14, r10
    3c72:	e8 1a       	sub	r14, r24
    3c74:	f9 0a       	sbc	r15, r25
    3c76:	0a 0b       	sbc	r16, r26
    3c78:	1b 0b       	sbc	r17, r27
    3c7a:	e9 82       	std	Y+1, r14	; 0x01
    3c7c:	fa 82       	std	Y+2, r15	; 0x02
    3c7e:	0b 83       	std	Y+3, r16	; 0x03
    3c80:	1c 83       	std	Y+4, r17	; 0x04
    3c82:	e0 92 9d 21 	sts	0x219D, r14
    3c86:	f0 92 9e 21 	sts	0x219E, r15
    3c8a:	00 93 9f 21 	sts	0x219F, r16
    3c8e:	10 93 a0 21 	sts	0x21A0, r17
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    3c92:	80 91 89 21 	lds	r24, 0x2189
    3c96:	90 91 8a 21 	lds	r25, 0x218A
    3c9a:	a0 91 8b 21 	lds	r26, 0x218B
    3c9e:	b0 91 8c 21 	lds	r27, 0x218C
    3ca2:	19 01       	movw	r2, r18
    3ca4:	2a 01       	movw	r4, r20
    3ca6:	28 1a       	sub	r2, r24
    3ca8:	39 0a       	sbc	r3, r25
    3caa:	4a 0a       	sbc	r4, r26
    3cac:	5b 0a       	sbc	r5, r27
    3cae:	20 92 a1 21 	sts	0x21A1, r2
    3cb2:	30 92 a2 21 	sts	0x21A2, r3
    3cb6:	40 92 a3 21 	sts	0x21A3, r4
    3cba:	50 92 a4 21 	sts	0x21A4, r5

	if (invert_feed_rate) {
    3cbe:	89 28       	or	r8, r9
    3cc0:	59 f0       	breq	.+22     	; 0x3cd8 <mc_line+0x19c>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3cc2:	60 ec       	ldi	r22, 0xC0	; 192
    3cc4:	71 ee       	ldi	r23, 0xE1	; 225
    3cc6:	84 e6       	ldi	r24, 0x64	; 100
    3cc8:	9c e4       	ldi	r25, 0x4C	; 76
    3cca:	29 8d       	ldd	r18, Y+25	; 0x19
    3ccc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3cce:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3cd0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3cd2:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    3cd6:	4e c0       	rjmp	.+156    	; 0x3d74 <mc_line+0x238>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    3cd8:	6d 81       	ldd	r22, Y+5	; 0x05
    3cda:	7e 81       	ldd	r23, Y+6	; 0x06
    3cdc:	8f 81       	ldd	r24, Y+7	; 0x07
    3cde:	98 85       	ldd	r25, Y+8	; 0x08
    3ce0:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    3ce4:	29 89       	ldd	r18, Y+17	; 0x11
    3ce6:	3a 89       	ldd	r19, Y+18	; 0x12
    3ce8:	4b 89       	ldd	r20, Y+19	; 0x13
    3cea:	5c 89       	ldd	r21, Y+20	; 0x14
    3cec:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    3cf0:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <square>
    3cf4:	3b 01       	movw	r6, r22
    3cf6:	4c 01       	movw	r8, r24
    3cf8:	69 81       	ldd	r22, Y+1	; 0x01
    3cfa:	7a 81       	ldd	r23, Y+2	; 0x02
    3cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    3d00:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    3d04:	2d 85       	ldd	r18, Y+13	; 0x0d
    3d06:	3e 85       	ldd	r19, Y+14	; 0x0e
    3d08:	4f 85       	ldd	r20, Y+15	; 0x0f
    3d0a:	58 89       	ldd	r21, Y+16	; 0x10
    3d0c:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    3d10:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <square>
    3d14:	5b 01       	movw	r10, r22
    3d16:	6c 01       	movw	r12, r24
    3d18:	c2 01       	movw	r24, r4
    3d1a:	b1 01       	movw	r22, r2
    3d1c:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    3d20:	29 85       	ldd	r18, Y+9	; 0x09
    3d22:	3a 85       	ldd	r19, Y+10	; 0x0a
    3d24:	4b 85       	ldd	r20, Y+11	; 0x0b
    3d26:	5c 85       	ldd	r21, Y+12	; 0x0c
    3d28:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    3d2c:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <square>
    3d30:	7b 01       	movw	r14, r22
    3d32:	8c 01       	movw	r16, r24
    3d34:	c4 01       	movw	r24, r8
    3d36:	b3 01       	movw	r22, r6
    3d38:	a6 01       	movw	r20, r12
    3d3a:	95 01       	movw	r18, r10
    3d3c:	0e 94 1f 42 	call	0x843e	; 0x843e <__addsf3>
    3d40:	a8 01       	movw	r20, r16
    3d42:	97 01       	movw	r18, r14
    3d44:	0e 94 1f 42 	call	0x843e	; 0x843e <__addsf3>
    3d48:	0e 94 ed 45 	call	0x8bda	; 0x8bda <sqrt>
    3d4c:	60 93 a9 21 	sts	0x21A9, r22
    3d50:	70 93 aa 21 	sts	0x21AA, r23
    3d54:	80 93 ab 21 	sts	0x21AB, r24
    3d58:	90 93 ac 21 	sts	0x21AC, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3d5c:	29 8d       	ldd	r18, Y+25	; 0x19
    3d5e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3d60:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3d62:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3d64:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    3d68:	20 e0       	ldi	r18, 0x00	; 0
    3d6a:	34 e2       	ldi	r19, 0x24	; 36
    3d6c:	44 e7       	ldi	r20, 0x74	; 116
    3d6e:	59 e4       	ldi	r21, 0x49	; 73
    3d70:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    3d74:	0e 94 50 45 	call	0x8aa0	; 0x8aa0 <lround>
    3d78:	60 93 a5 21 	sts	0x21A5, r22
    3d7c:	70 93 a6 21 	sts	0x21A6, r23
    3d80:	80 93 a7 21 	sts	0x21A7, r24
    3d84:	90 93 a8 21 	sts	0x21A8, r25
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    3d88:	a0 90 a5 21 	lds	r10, 0x21A5
    3d8c:	b0 90 a6 21 	lds	r11, 0x21A6
    3d90:	c0 90 a7 21 	lds	r12, 0x21A7
    3d94:	d0 90 a8 21 	lds	r13, 0x21A8
    3d98:	6d 81       	ldd	r22, Y+5	; 0x05
    3d9a:	7e 81       	ldd	r23, Y+6	; 0x06
    3d9c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d9e:	98 85       	ldd	r25, Y+8	; 0x08
    3da0:	29 81       	ldd	r18, Y+1	; 0x01
    3da2:	3a 81       	ldd	r19, Y+2	; 0x02
    3da4:	4b 81       	ldd	r20, Y+3	; 0x03
    3da6:	5c 81       	ldd	r21, Y+4	; 0x04
    3da8:	82 01       	movw	r16, r4
    3daa:	71 01       	movw	r14, r2
    3dac:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3db0:	e1 e8       	ldi	r30, 0x81	; 129
    3db2:	f1 e2       	ldi	r31, 0x21	; 33
    3db4:	df 01       	movw	r26, r30
    3db6:	1c 96       	adiw	r26, 0x0c	; 12
    3db8:	8c e0       	ldi	r24, 0x0C	; 12
    3dba:	0d 90       	ld	r0, X+
    3dbc:	01 92       	st	Z+, r0
    3dbe:	81 50       	subi	r24, 0x01	; 1
    3dc0:	e1 f7       	brne	.-8      	; 0x3dba <mc_line+0x27e>
	return (TG_OK);
}
    3dc2:	80 e0       	ldi	r24, 0x00	; 0
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	6c 96       	adiw	r28, 0x1c	; 28
    3dc8:	cd bf       	out	0x3d, r28	; 61
    3dca:	de bf       	out	0x3e, r29	; 62
    3dcc:	cf 91       	pop	r28
    3dce:	df 91       	pop	r29
    3dd0:	1f 91       	pop	r17
    3dd2:	0f 91       	pop	r16
    3dd4:	ff 90       	pop	r15
    3dd6:	ef 90       	pop	r14
    3dd8:	df 90       	pop	r13
    3dda:	cf 90       	pop	r12
    3ddc:	bf 90       	pop	r11
    3dde:	af 90       	pop	r10
    3de0:	9f 90       	pop	r9
    3de2:	8f 90       	pop	r8
    3de4:	7f 90       	pop	r7
    3de6:	6f 90       	pop	r6
    3de8:	5f 90       	pop	r5
    3dea:	4f 90       	pop	r4
    3dec:	3f 90       	pop	r3
    3dee:	2f 90       	pop	r2
    3df0:	08 95       	ret

00003df2 <mc_arc_continuation>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continuation() 
{
    3df2:	8f 92       	push	r8
    3df4:	9f 92       	push	r9
    3df6:	af 92       	push	r10
    3df8:	bf 92       	push	r11
    3dfa:	cf 92       	push	r12
    3dfc:	df 92       	push	r13
    3dfe:	ef 92       	push	r14
    3e00:	ff 92       	push	r15
    3e02:	0f 93       	push	r16
    3e04:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3e06:	80 91 dd 26 	lds	r24, 0x26DD
    3e0a:	88 23       	and	r24, r24
    3e0c:	19 f4       	brne	.+6      	; 0x3e14 <mc_arc_continuation+0x22>
    3e0e:	21 e0       	ldi	r18, 0x01	; 1
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	dd c0       	rjmp	.+442    	; 0x3fce <mc_arc_continuation+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3e14:	81 30       	cpi	r24, 0x01	; 1
    3e16:	09 f0       	breq	.+2      	; 0x3e1a <mc_arc_continuation+0x28>
    3e18:	ca c0       	rjmp	.+404    	; 0x3fae <mc_arc_continuation+0x1bc>
		ma.segment_counter=0;
    3e1a:	10 92 e0 26 	sts	0x26E0, r1
    3e1e:	10 92 e1 26 	sts	0x26E1, r1
		ma.arc_state = MC_STATE_RUNNING;
    3e22:	82 e0       	ldi	r24, 0x02	; 2
    3e24:	80 93 dd 26 	sts	0x26DD, r24
    3e28:	c2 c0       	rjmp	.+388    	; 0x3fae <mc_arc_continuation+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3e2a:	0e 94 a4 31 	call	0x6348	; 0x6348 <mv_test_move_buffer_full>
    3e2e:	88 23       	and	r24, r24
    3e30:	19 f0       	breq	.+6      	; 0x3e38 <mc_arc_continuation+0x46>
    3e32:	22 e0       	ldi	r18, 0x02	; 2
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	cb c0       	rjmp	.+406    	; 0x3fce <mc_arc_continuation+0x1dc>
			return (TG_CONTINUE);
		}
		ma.segment_counter++;
    3e38:	80 91 e0 26 	lds	r24, 0x26E0
    3e3c:	90 91 e1 26 	lds	r25, 0x26E1
    3e40:	01 96       	adiw	r24, 0x01	; 1
    3e42:	80 93 e0 26 	sts	0x26E0, r24
    3e46:	90 93 e1 26 	sts	0x26E1, r25
		ma.theta += ma.theta_per_segment;
    3e4a:	60 91 02 27 	lds	r22, 0x2702
    3e4e:	70 91 03 27 	lds	r23, 0x2703
    3e52:	80 91 04 27 	lds	r24, 0x2704
    3e56:	90 91 05 27 	lds	r25, 0x2705
    3e5a:	20 91 0e 27 	lds	r18, 0x270E
    3e5e:	30 91 0f 27 	lds	r19, 0x270F
    3e62:	40 91 10 27 	lds	r20, 0x2710
    3e66:	50 91 11 27 	lds	r21, 0x2711
    3e6a:	0e 94 1f 42 	call	0x843e	; 0x843e <__addsf3>
    3e6e:	7b 01       	movw	r14, r22
    3e70:	8c 01       	movw	r16, r24
    3e72:	cb 01       	movw	r24, r22
    3e74:	d8 01       	movw	r26, r16
    3e76:	80 93 02 27 	sts	0x2702, r24
    3e7a:	90 93 03 27 	sts	0x2703, r25
    3e7e:	a0 93 04 27 	sts	0x2704, r26
    3e82:	b0 93 05 27 	sts	0x2705, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3e86:	b7 01       	movw	r22, r14
    3e88:	c8 01       	movw	r24, r16
    3e8a:	0e 94 e3 45 	call	0x8bc6	; 0x8bc6 <sin>
    3e8e:	80 90 06 27 	lds	r8, 0x2706
    3e92:	90 90 07 27 	lds	r9, 0x2707
    3e96:	a0 90 08 27 	lds	r10, 0x2708
    3e9a:	b0 90 09 27 	lds	r11, 0x2709
    3e9e:	c0 90 e4 26 	lds	r12, 0x26E4
    3ea2:	d0 90 e5 26 	lds	r13, 0x26E5
    3ea6:	cc 0c       	add	r12, r12
    3ea8:	dd 1c       	adc	r13, r13
    3eaa:	cc 0c       	add	r12, r12
    3eac:	dd 1c       	adc	r13, r13
    3eae:	2d ed       	ldi	r18, 0xDD	; 221
    3eb0:	36 e2       	ldi	r19, 0x26	; 38
    3eb2:	c2 0e       	add	r12, r18
    3eb4:	d3 1e       	adc	r13, r19
    3eb6:	a5 01       	movw	r20, r10
    3eb8:	94 01       	movw	r18, r8
    3eba:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    3ebe:	9b 01       	movw	r18, r22
    3ec0:	ac 01       	movw	r20, r24
    3ec2:	60 91 fa 26 	lds	r22, 0x26FA
    3ec6:	70 91 fb 26 	lds	r23, 0x26FB
    3eca:	80 91 fc 26 	lds	r24, 0x26FC
    3ece:	90 91 fd 26 	lds	r25, 0x26FD
    3ed2:	0e 94 1f 42 	call	0x843e	; 0x843e <__addsf3>
    3ed6:	f6 01       	movw	r30, r12
    3ed8:	65 87       	std	Z+13, r22	; 0x0d
    3eda:	76 87       	std	Z+14, r23	; 0x0e
    3edc:	87 87       	std	Z+15, r24	; 0x0f
    3ede:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3ee0:	b7 01       	movw	r22, r14
    3ee2:	c8 01       	movw	r24, r16
    3ee4:	0e 94 c2 42 	call	0x8584	; 0x8584 <cos>
    3ee8:	00 91 e6 26 	lds	r16, 0x26E6
    3eec:	10 91 e7 26 	lds	r17, 0x26E7
    3ef0:	00 0f       	add	r16, r16
    3ef2:	11 1f       	adc	r17, r17
    3ef4:	00 0f       	add	r16, r16
    3ef6:	11 1f       	adc	r17, r17
    3ef8:	03 52       	subi	r16, 0x23	; 35
    3efa:	19 4d       	sbci	r17, 0xD9	; 217
    3efc:	a5 01       	movw	r20, r10
    3efe:	94 01       	movw	r18, r8
    3f00:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    3f04:	9b 01       	movw	r18, r22
    3f06:	ac 01       	movw	r20, r24
    3f08:	60 91 fe 26 	lds	r22, 0x26FE
    3f0c:	70 91 ff 26 	lds	r23, 0x26FF
    3f10:	80 91 00 27 	lds	r24, 0x2700
    3f14:	90 91 01 27 	lds	r25, 0x2701
    3f18:	0e 94 1f 42 	call	0x843e	; 0x843e <__addsf3>
    3f1c:	f8 01       	movw	r30, r16
    3f1e:	65 87       	std	Z+13, r22	; 0x0d
    3f20:	76 87       	std	Z+14, r23	; 0x0e
    3f22:	87 87       	std	Z+15, r24	; 0x0f
    3f24:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3f26:	00 91 e8 26 	lds	r16, 0x26E8
    3f2a:	10 91 e9 26 	lds	r17, 0x26E9
    3f2e:	00 0f       	add	r16, r16
    3f30:	11 1f       	adc	r17, r17
    3f32:	00 0f       	add	r16, r16
    3f34:	11 1f       	adc	r17, r17
    3f36:	03 52       	subi	r16, 0x23	; 35
    3f38:	19 4d       	sbci	r17, 0xD9	; 217
    3f3a:	f8 01       	movw	r30, r16
    3f3c:	65 85       	ldd	r22, Z+13	; 0x0d
    3f3e:	76 85       	ldd	r23, Z+14	; 0x0e
    3f40:	87 85       	ldd	r24, Z+15	; 0x0f
    3f42:	90 89       	ldd	r25, Z+16	; 0x10
    3f44:	20 91 12 27 	lds	r18, 0x2712
    3f48:	30 91 13 27 	lds	r19, 0x2713
    3f4c:	40 91 14 27 	lds	r20, 0x2714
    3f50:	50 91 15 27 	lds	r21, 0x2715
    3f54:	0e 94 1f 42 	call	0x843e	; 0x843e <__addsf3>
    3f58:	f8 01       	movw	r30, r16
    3f5a:	65 87       	std	Z+13, r22	; 0x0d
    3f5c:	76 87       	std	Z+14, r23	; 0x0e
    3f5e:	87 87       	std	Z+15, r24	; 0x0f
    3f60:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    3f62:	60 91 ea 26 	lds	r22, 0x26EA
    3f66:	70 91 eb 26 	lds	r23, 0x26EB
    3f6a:	80 91 ec 26 	lds	r24, 0x26EC
    3f6e:	90 91 ed 26 	lds	r25, 0x26ED
    3f72:	20 91 ee 26 	lds	r18, 0x26EE
    3f76:	30 91 ef 26 	lds	r19, 0x26EF
    3f7a:	40 91 f0 26 	lds	r20, 0x26F0
    3f7e:	50 91 f1 26 	lds	r21, 0x26F1
    3f82:	e0 90 f2 26 	lds	r14, 0x26F2
    3f86:	f0 90 f3 26 	lds	r15, 0x26F3
    3f8a:	00 91 f4 26 	lds	r16, 0x26F4
    3f8e:	10 91 f5 26 	lds	r17, 0x26F5
    3f92:	a0 90 0a 27 	lds	r10, 0x270A
    3f96:	b0 90 0b 27 	lds	r11, 0x270B
    3f9a:	c0 90 0c 27 	lds	r12, 0x270C
    3f9e:	d0 90 0d 27 	lds	r13, 0x270D
    3fa2:	80 90 e2 26 	lds	r8, 0x26E2
    3fa6:	90 90 e3 26 	lds	r9, 0x26E3
    3faa:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3fae:	20 91 e0 26 	lds	r18, 0x26E0
    3fb2:	30 91 e1 26 	lds	r19, 0x26E1
    3fb6:	80 91 de 26 	lds	r24, 0x26DE
    3fba:	90 91 df 26 	lds	r25, 0x26DF
    3fbe:	82 17       	cp	r24, r18
    3fc0:	93 07       	cpc	r25, r19
    3fc2:	0c f0       	brlt	.+2      	; 0x3fc6 <mc_arc_continuation+0x1d4>
    3fc4:	32 cf       	rjmp	.-412    	; 0x3e2a <mc_arc_continuation+0x38>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3fc6:	10 92 dd 26 	sts	0x26DD, r1
    3fca:	20 e0       	ldi	r18, 0x00	; 0
    3fcc:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3fce:	c9 01       	movw	r24, r18
    3fd0:	1f 91       	pop	r17
    3fd2:	0f 91       	pop	r16
    3fd4:	ff 90       	pop	r15
    3fd6:	ef 90       	pop	r14
    3fd8:	df 90       	pop	r13
    3fda:	cf 90       	pop	r12
    3fdc:	bf 90       	pop	r11
    3fde:	af 90       	pop	r10
    3fe0:	9f 90       	pop	r9
    3fe2:	8f 90       	pop	r8
    3fe4:	08 95       	ret

00003fe6 <mc_arc_nonblock>:

int mc_arc_nonblock(double theta, double angular_travel, 
					double radius, double linear_travel, 
					int axis_1, int axis_2, int axis_linear, 
					double feed_rate, int invert_feed_rate)
{
    3fe6:	2f 92       	push	r2
    3fe8:	3f 92       	push	r3
    3fea:	4f 92       	push	r4
    3fec:	5f 92       	push	r5
    3fee:	6f 92       	push	r6
    3ff0:	7f 92       	push	r7
    3ff2:	8f 92       	push	r8
    3ff4:	9f 92       	push	r9
    3ff6:	af 92       	push	r10
    3ff8:	bf 92       	push	r11
    3ffa:	cf 92       	push	r12
    3ffc:	df 92       	push	r13
    3ffe:	ef 92       	push	r14
    4000:	ff 92       	push	r15
    4002:	0f 93       	push	r16
    4004:	1f 93       	push	r17
    4006:	df 93       	push	r29
    4008:	cf 93       	push	r28
    400a:	cd b7       	in	r28, 0x3d	; 61
    400c:	de b7       	in	r29, 0x3e	; 62
    400e:	28 97       	sbiw	r28, 0x08	; 8
    4010:	cd bf       	out	0x3d, r28	; 61
    4012:	de bf       	out	0x3e, r29	; 62
    4014:	69 83       	std	Y+1, r22	; 0x01
    4016:	7a 83       	std	Y+2, r23	; 0x02
    4018:	8b 83       	std	Y+3, r24	; 0x03
    401a:	9c 83       	std	Y+4, r25	; 0x04
    401c:	29 01       	movw	r4, r18
    401e:	3a 01       	movw	r6, r20
    4020:	ed 82       	std	Y+5, r14	; 0x05
    4022:	fe 82       	std	Y+6, r15	; 0x06
    4024:	0f 83       	std	Y+7, r16	; 0x07
    4026:	18 87       	std	Y+8, r17	; 0x08
    4028:	2e 8c       	ldd	r2, Y+30	; 0x1e
    402a:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    402c:	60 93 02 27 	sts	0x2702, r22
    4030:	70 93 03 27 	sts	0x2703, r23
    4034:	80 93 04 27 	sts	0x2704, r24
    4038:	90 93 05 27 	sts	0x2705, r25
	ma.radius = radius;
    403c:	e0 92 06 27 	sts	0x2706, r14
    4040:	f0 92 07 27 	sts	0x2707, r15
    4044:	00 93 08 27 	sts	0x2708, r16
    4048:	10 93 09 27 	sts	0x2709, r17
	ma.angular_travel = angular_travel;
    404c:	20 93 16 27 	sts	0x2716, r18
    4050:	30 93 17 27 	sts	0x2717, r19
    4054:	40 93 18 27 	sts	0x2718, r20
    4058:	50 93 19 27 	sts	0x2719, r21
	ma.linear_travel = linear_travel;
    405c:	a0 92 1a 27 	sts	0x271A, r10
    4060:	b0 92 1b 27 	sts	0x271B, r11
    4064:	c0 92 1c 27 	sts	0x271C, r12
    4068:	d0 92 1d 27 	sts	0x271D, r13
	ma.feed_rate = feed_rate;
    406c:	8a a1       	ldd	r24, Y+34	; 0x22
    406e:	9b a1       	ldd	r25, Y+35	; 0x23
    4070:	ac a1       	ldd	r26, Y+36	; 0x24
    4072:	bd a1       	ldd	r27, Y+37	; 0x25
    4074:	80 93 0a 27 	sts	0x270A, r24
    4078:	90 93 0b 27 	sts	0x270B, r25
    407c:	a0 93 0c 27 	sts	0x270C, r26
    4080:	b0 93 0d 27 	sts	0x270D, r27
	ma.invert_feed_rate = invert_feed_rate;
    4084:	ae a1       	ldd	r26, Y+38	; 0x26
    4086:	bf a1       	ldd	r27, Y+39	; 0x27
    4088:	a0 93 e2 26 	sts	0x26E2, r26
    408c:	b0 93 e3 26 	sts	0x26E3, r27
	ma.axis_1 = axis_1;
    4090:	80 92 e4 26 	sts	0x26E4, r8
    4094:	90 92 e5 26 	sts	0x26E5, r9
	ma.axis_2 = axis_2;
    4098:	20 92 e6 26 	sts	0x26E6, r2
    409c:	30 92 e7 26 	sts	0x26E7, r3
	ma.axis_linear = axis_linear;
    40a0:	e8 a1       	ldd	r30, Y+32	; 0x20
    40a2:	f9 a1       	ldd	r31, Y+33	; 0x21
    40a4:	e0 93 e8 26 	sts	0x26E8, r30
    40a8:	f0 93 e9 26 	sts	0x26E9, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    40ac:	ca 01       	movw	r24, r20
    40ae:	b9 01       	movw	r22, r18
    40b0:	a8 01       	movw	r20, r16
    40b2:	97 01       	movw	r18, r14
    40b4:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    40b8:	7b 01       	movw	r14, r22
    40ba:	8c 01       	movw	r16, r24
    40bc:	c6 01       	movw	r24, r12
    40be:	b5 01       	movw	r22, r10
    40c0:	0e 94 2d 43 	call	0x865a	; 0x865a <__fixsfsi>
    40c4:	97 ff       	sbrs	r25, 7
    40c6:	07 c0       	rjmp	.+14     	; 0x40d6 <mc_arc_nonblock+0xf0>
    40c8:	90 95       	com	r25
    40ca:	80 95       	com	r24
    40cc:	70 95       	com	r23
    40ce:	61 95       	neg	r22
    40d0:	7f 4f       	sbci	r23, 0xFF	; 255
    40d2:	8f 4f       	sbci	r24, 0xFF	; 255
    40d4:	9f 4f       	sbci	r25, 0xFF	; 255
    40d6:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    40da:	9b 01       	movw	r18, r22
    40dc:	ac 01       	movw	r20, r24
    40de:	c8 01       	movw	r24, r16
    40e0:	b7 01       	movw	r22, r14
    40e2:	0e 94 bb 44 	call	0x8976	; 0x8976 <hypot>
    40e6:	7b 01       	movw	r14, r22
    40e8:	8c 01       	movw	r16, r24
    40ea:	60 93 f6 26 	sts	0x26F6, r22
    40ee:	70 93 f7 26 	sts	0x26F7, r23
    40f2:	80 93 f8 26 	sts	0x26F8, r24
    40f6:	90 93 f9 26 	sts	0x26F9, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    40fa:	2a e0       	ldi	r18, 0x0A	; 10
    40fc:	37 ed       	ldi	r19, 0xD7	; 215
    40fe:	43 e2       	ldi	r20, 0x23	; 35
    4100:	5c e3       	ldi	r21, 0x3C	; 60
    4102:	0e 94 be 42 	call	0x857c	; 0x857c <__cmpsf2>
    4106:	88 23       	and	r24, r24
    4108:	1c f4       	brge	.+6      	; 0x4110 <mc_arc_nonblock+0x12a>
    410a:	2f e0       	ldi	r18, 0x0F	; 15
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	fb c0       	rjmp	.+502    	; 0x4306 <mc_arc_nonblock+0x320>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    4110:	c8 01       	movw	r24, r16
    4112:	b7 01       	movw	r22, r14
    4114:	20 91 6f 26 	lds	r18, 0x266F
    4118:	30 91 70 26 	lds	r19, 0x2670
    411c:	40 91 71 26 	lds	r20, 0x2671
    4120:	50 91 72 26 	lds	r21, 0x2672
    4124:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    4128:	0e 94 ab 42 	call	0x8556	; 0x8556 <ceil>
    412c:	0e 94 2d 43 	call	0x865a	; 0x865a <__fixsfsi>
    4130:	8b 01       	movw	r16, r22
    4132:	60 93 de 26 	sts	0x26DE, r22
    4136:	70 93 df 26 	sts	0x26DF, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    413a:	8e a1       	ldd	r24, Y+38	; 0x26
    413c:	9f a1       	ldd	r25, Y+39	; 0x27
    413e:	89 2b       	or	r24, r25
    4140:	b9 f0       	breq	.+46     	; 0x4170 <mc_arc_nonblock+0x18a>
		ma.feed_rate *= ma.segments; 
    4142:	b8 01       	movw	r22, r16
    4144:	88 27       	eor	r24, r24
    4146:	77 fd       	sbrc	r23, 7
    4148:	80 95       	com	r24
    414a:	98 2f       	mov	r25, r24
    414c:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    4150:	9b 01       	movw	r18, r22
    4152:	ac 01       	movw	r20, r24
    4154:	6a a1       	ldd	r22, Y+34	; 0x22
    4156:	7b a1       	ldd	r23, Y+35	; 0x23
    4158:	8c a1       	ldd	r24, Y+36	; 0x24
    415a:	9d a1       	ldd	r25, Y+37	; 0x25
    415c:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    4160:	60 93 0a 27 	sts	0x270A, r22
    4164:	70 93 0b 27 	sts	0x270B, r23
    4168:	80 93 0c 27 	sts	0x270C, r24
    416c:	90 93 0d 27 	sts	0x270D, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    4170:	b8 01       	movw	r22, r16
    4172:	88 27       	eor	r24, r24
    4174:	77 fd       	sbrc	r23, 7
    4176:	80 95       	com	r24
    4178:	98 2f       	mov	r25, r24
    417a:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    417e:	7b 01       	movw	r14, r22
    4180:	8c 01       	movw	r16, r24
    4182:	c3 01       	movw	r24, r6
    4184:	b2 01       	movw	r22, r4
    4186:	a8 01       	movw	r20, r16
    4188:	97 01       	movw	r18, r14
    418a:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    418e:	60 93 0e 27 	sts	0x270E, r22
    4192:	70 93 0f 27 	sts	0x270F, r23
    4196:	80 93 10 27 	sts	0x2710, r24
    419a:	90 93 11 27 	sts	0x2711, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    419e:	c6 01       	movw	r24, r12
    41a0:	b5 01       	movw	r22, r10
    41a2:	a8 01       	movw	r20, r16
    41a4:	97 01       	movw	r18, r14
    41a6:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    41aa:	60 93 12 27 	sts	0x2712, r22
    41ae:	70 93 13 27 	sts	0x2713, r23
    41b2:	80 93 14 27 	sts	0x2714, r24
    41b6:	90 93 15 27 	sts	0x2715, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    41ba:	69 81       	ldd	r22, Y+1	; 0x01
    41bc:	7a 81       	ldd	r23, Y+2	; 0x02
    41be:	8b 81       	ldd	r24, Y+3	; 0x03
    41c0:	9c 81       	ldd	r25, Y+4	; 0x04
    41c2:	0e 94 e3 45 	call	0x8bc6	; 0x8bc6 <sin>
    41c6:	5b 01       	movw	r10, r22
    41c8:	6c 01       	movw	r12, r24
    41ca:	f4 01       	movw	r30, r8
    41cc:	ee 0f       	add	r30, r30
    41ce:	ff 1f       	adc	r31, r31
    41d0:	ee 0f       	add	r30, r30
    41d2:	ff 1f       	adc	r31, r31
    41d4:	e0 58       	subi	r30, 0x80	; 128
    41d6:	fe 4d       	sbci	r31, 0xDE	; 222
    41d8:	61 81       	ldd	r22, Z+1	; 0x01
    41da:	72 81       	ldd	r23, Z+2	; 0x02
    41dc:	83 81       	ldd	r24, Z+3	; 0x03
    41de:	94 81       	ldd	r25, Z+4	; 0x04
    41e0:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    41e4:	f4 01       	movw	r30, r8
    41e6:	ee 0f       	add	r30, r30
    41e8:	ff 1f       	adc	r31, r31
    41ea:	e8 0d       	add	r30, r8
    41ec:	f9 1d       	adc	r31, r9
    41ee:	13 e0       	ldi	r17, 0x03	; 3
    41f0:	ee 0f       	add	r30, r30
    41f2:	ff 1f       	adc	r31, r31
    41f4:	1a 95       	dec	r17
    41f6:	e1 f7       	brne	.-8      	; 0x41f0 <mc_arc_nonblock+0x20a>
    41f8:	e3 59       	subi	r30, 0x93	; 147
    41fa:	f9 4d       	sbci	r31, 0xD9	; 217
    41fc:	21 a1       	ldd	r18, Z+33	; 0x21
    41fe:	32 a1       	ldd	r19, Z+34	; 0x22
    4200:	43 a1       	ldd	r20, Z+35	; 0x23
    4202:	54 a1       	ldd	r21, Z+36	; 0x24
    4204:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    4208:	7b 01       	movw	r14, r22
    420a:	8c 01       	movw	r16, r24
    420c:	c6 01       	movw	r24, r12
    420e:	b5 01       	movw	r22, r10
    4210:	2d 81       	ldd	r18, Y+5	; 0x05
    4212:	3e 81       	ldd	r19, Y+6	; 0x06
    4214:	4f 81       	ldd	r20, Y+7	; 0x07
    4216:	58 85       	ldd	r21, Y+8	; 0x08
    4218:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    421c:	9b 01       	movw	r18, r22
    421e:	ac 01       	movw	r20, r24
    4220:	c8 01       	movw	r24, r16
    4222:	b7 01       	movw	r22, r14
    4224:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    4228:	60 93 fa 26 	sts	0x26FA, r22
    422c:	70 93 fb 26 	sts	0x26FB, r23
    4230:	80 93 fc 26 	sts	0x26FC, r24
    4234:	90 93 fd 26 	sts	0x26FD, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    4238:	69 81       	ldd	r22, Y+1	; 0x01
    423a:	7a 81       	ldd	r23, Y+2	; 0x02
    423c:	8b 81       	ldd	r24, Y+3	; 0x03
    423e:	9c 81       	ldd	r25, Y+4	; 0x04
    4240:	0e 94 c2 42 	call	0x8584	; 0x8584 <cos>
    4244:	5b 01       	movw	r10, r22
    4246:	6c 01       	movw	r12, r24
    4248:	f1 01       	movw	r30, r2
    424a:	ee 0f       	add	r30, r30
    424c:	ff 1f       	adc	r31, r31
    424e:	ee 0f       	add	r30, r30
    4250:	ff 1f       	adc	r31, r31
    4252:	e0 58       	subi	r30, 0x80	; 128
    4254:	fe 4d       	sbci	r31, 0xDE	; 222
    4256:	61 81       	ldd	r22, Z+1	; 0x01
    4258:	72 81       	ldd	r23, Z+2	; 0x02
    425a:	83 81       	ldd	r24, Z+3	; 0x03
    425c:	94 81       	ldd	r25, Z+4	; 0x04
    425e:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    4262:	f1 01       	movw	r30, r2
    4264:	ee 0f       	add	r30, r30
    4266:	ff 1f       	adc	r31, r31
    4268:	e2 0d       	add	r30, r2
    426a:	f3 1d       	adc	r31, r3
    426c:	53 e0       	ldi	r21, 0x03	; 3
    426e:	ee 0f       	add	r30, r30
    4270:	ff 1f       	adc	r31, r31
    4272:	5a 95       	dec	r21
    4274:	e1 f7       	brne	.-8      	; 0x426e <mc_arc_nonblock+0x288>
    4276:	e3 59       	subi	r30, 0x93	; 147
    4278:	f9 4d       	sbci	r31, 0xD9	; 217
    427a:	21 a1       	ldd	r18, Z+33	; 0x21
    427c:	32 a1       	ldd	r19, Z+34	; 0x22
    427e:	43 a1       	ldd	r20, Z+35	; 0x23
    4280:	54 a1       	ldd	r21, Z+36	; 0x24
    4282:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    4286:	7b 01       	movw	r14, r22
    4288:	8c 01       	movw	r16, r24
    428a:	c6 01       	movw	r24, r12
    428c:	b5 01       	movw	r22, r10
    428e:	2d 81       	ldd	r18, Y+5	; 0x05
    4290:	3e 81       	ldd	r19, Y+6	; 0x06
    4292:	4f 81       	ldd	r20, Y+7	; 0x07
    4294:	58 85       	ldd	r21, Y+8	; 0x08
    4296:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    429a:	9b 01       	movw	r18, r22
    429c:	ac 01       	movw	r20, r24
    429e:	c8 01       	movw	r24, r16
    42a0:	b7 01       	movw	r22, r14
    42a2:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    42a6:	60 93 fe 26 	sts	0x26FE, r22
    42aa:	70 93 ff 26 	sts	0x26FF, r23
    42ae:	80 93 00 27 	sts	0x2700, r24
    42b2:	90 93 01 27 	sts	0x2701, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    42b6:	e8 a1       	ldd	r30, Y+32	; 0x20
    42b8:	f9 a1       	ldd	r31, Y+33	; 0x21
    42ba:	ee 0f       	add	r30, r30
    42bc:	ff 1f       	adc	r31, r31
    42be:	ee 0f       	add	r30, r30
    42c0:	ff 1f       	adc	r31, r31
    42c2:	8f 01       	movw	r16, r30
    42c4:	03 52       	subi	r16, 0x23	; 35
    42c6:	19 4d       	sbci	r17, 0xD9	; 217
    42c8:	e0 58       	subi	r30, 0x80	; 128
    42ca:	fe 4d       	sbci	r31, 0xDE	; 222
    42cc:	61 81       	ldd	r22, Z+1	; 0x01
    42ce:	72 81       	ldd	r23, Z+2	; 0x02
    42d0:	83 81       	ldd	r24, Z+3	; 0x03
    42d2:	94 81       	ldd	r25, Z+4	; 0x04
    42d4:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    42d8:	20 91 be 26 	lds	r18, 0x26BE
    42dc:	30 91 bf 26 	lds	r19, 0x26BF
    42e0:	40 91 c0 26 	lds	r20, 0x26C0
    42e4:	50 91 c1 26 	lds	r21, 0x26C1
    42e8:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    42ec:	d8 01       	movw	r26, r16
    42ee:	1d 96       	adiw	r26, 0x0d	; 13
    42f0:	6d 93       	st	X+, r22
    42f2:	7d 93       	st	X+, r23
    42f4:	8d 93       	st	X+, r24
    42f6:	9c 93       	st	X, r25
    42f8:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    42fa:	81 e0       	ldi	r24, 0x01	; 1
    42fc:	80 93 dd 26 	sts	0x26DD, r24
	return (mc_arc_continuation());
    4300:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <mc_arc_continuation>
    4304:	9c 01       	movw	r18, r24
}
    4306:	c9 01       	movw	r24, r18
    4308:	28 96       	adiw	r28, 0x08	; 8
    430a:	cd bf       	out	0x3d, r28	; 61
    430c:	de bf       	out	0x3e, r29	; 62
    430e:	cf 91       	pop	r28
    4310:	df 91       	pop	r29
    4312:	1f 91       	pop	r17
    4314:	0f 91       	pop	r16
    4316:	ff 90       	pop	r15
    4318:	ef 90       	pop	r14
    431a:	df 90       	pop	r13
    431c:	cf 90       	pop	r12
    431e:	bf 90       	pop	r11
    4320:	af 90       	pop	r10
    4322:	9f 90       	pop	r9
    4324:	8f 90       	pop	r8
    4326:	7f 90       	pop	r7
    4328:	6f 90       	pop	r6
    432a:	5f 90       	pop	r5
    432c:	4f 90       	pop	r4
    432e:	3f 90       	pop	r3
    4330:	2f 90       	pop	r2
    4332:	08 95       	ret

00004334 <mc_arc>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    4334:	2f 92       	push	r2
    4336:	3f 92       	push	r3
    4338:	4f 92       	push	r4
    433a:	5f 92       	push	r5
    433c:	6f 92       	push	r6
    433e:	7f 92       	push	r7
    4340:	8f 92       	push	r8
    4342:	9f 92       	push	r9
    4344:	af 92       	push	r10
    4346:	bf 92       	push	r11
    4348:	cf 92       	push	r12
    434a:	df 92       	push	r13
    434c:	ef 92       	push	r14
    434e:	ff 92       	push	r15
    4350:	0f 93       	push	r16
    4352:	1f 93       	push	r17
    4354:	df 93       	push	r29
    4356:	cf 93       	push	r28
    4358:	cd b7       	in	r28, 0x3d	; 61
    435a:	de b7       	in	r29, 0x3e	; 62
    435c:	28 97       	sbiw	r28, 0x08	; 8
    435e:	cd bf       	out	0x3d, r28	; 61
    4360:	de bf       	out	0x3e, r29	; 62
    4362:	69 83       	std	Y+1, r22	; 0x01
    4364:	7a 83       	std	Y+2, r23	; 0x02
    4366:	8b 83       	std	Y+3, r24	; 0x03
    4368:	9c 83       	std	Y+4, r25	; 0x04
    436a:	29 01       	movw	r4, r18
    436c:	3a 01       	movw	r6, r20
    436e:	ed 82       	std	Y+5, r14	; 0x05
    4370:	fe 82       	std	Y+6, r15	; 0x06
    4372:	0f 83       	std	Y+7, r16	; 0x07
    4374:	18 87       	std	Y+8, r17	; 0x08
    4376:	2e 8c       	ldd	r2, Y+30	; 0x1e
    4378:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    437a:	60 93 02 27 	sts	0x2702, r22
    437e:	70 93 03 27 	sts	0x2703, r23
    4382:	80 93 04 27 	sts	0x2704, r24
    4386:	90 93 05 27 	sts	0x2705, r25
	ma.radius = radius;
    438a:	e0 92 06 27 	sts	0x2706, r14
    438e:	f0 92 07 27 	sts	0x2707, r15
    4392:	00 93 08 27 	sts	0x2708, r16
    4396:	10 93 09 27 	sts	0x2709, r17
	ma.angular_travel = angular_travel;
    439a:	20 93 16 27 	sts	0x2716, r18
    439e:	30 93 17 27 	sts	0x2717, r19
    43a2:	40 93 18 27 	sts	0x2718, r20
    43a6:	50 93 19 27 	sts	0x2719, r21
	ma.linear_travel = linear_travel;
    43aa:	a0 92 1a 27 	sts	0x271A, r10
    43ae:	b0 92 1b 27 	sts	0x271B, r11
    43b2:	c0 92 1c 27 	sts	0x271C, r12
    43b6:	d0 92 1d 27 	sts	0x271D, r13
	ma.feed_rate = feed_rate;
    43ba:	8a a1       	ldd	r24, Y+34	; 0x22
    43bc:	9b a1       	ldd	r25, Y+35	; 0x23
    43be:	ac a1       	ldd	r26, Y+36	; 0x24
    43c0:	bd a1       	ldd	r27, Y+37	; 0x25
    43c2:	80 93 0a 27 	sts	0x270A, r24
    43c6:	90 93 0b 27 	sts	0x270B, r25
    43ca:	a0 93 0c 27 	sts	0x270C, r26
    43ce:	b0 93 0d 27 	sts	0x270D, r27
	ma.invert_feed_rate = invert_feed_rate;
    43d2:	ae a1       	ldd	r26, Y+38	; 0x26
    43d4:	bf a1       	ldd	r27, Y+39	; 0x27
    43d6:	a0 93 e2 26 	sts	0x26E2, r26
    43da:	b0 93 e3 26 	sts	0x26E3, r27
	ma.axis_1 = axis_1;
    43de:	80 92 e4 26 	sts	0x26E4, r8
    43e2:	90 92 e5 26 	sts	0x26E5, r9
	ma.axis_2 = axis_2;
    43e6:	20 92 e6 26 	sts	0x26E6, r2
    43ea:	30 92 e7 26 	sts	0x26E7, r3
	ma.axis_linear = axis_linear;
    43ee:	e8 a1       	ldd	r30, Y+32	; 0x20
    43f0:	f9 a1       	ldd	r31, Y+33	; 0x21
    43f2:	e0 93 e8 26 	sts	0x26E8, r30
    43f6:	f0 93 e9 26 	sts	0x26E9, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    43fa:	ca 01       	movw	r24, r20
    43fc:	b9 01       	movw	r22, r18
    43fe:	a8 01       	movw	r20, r16
    4400:	97 01       	movw	r18, r14
    4402:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    4406:	7b 01       	movw	r14, r22
    4408:	8c 01       	movw	r16, r24
    440a:	c6 01       	movw	r24, r12
    440c:	b5 01       	movw	r22, r10
    440e:	0e 94 2d 43 	call	0x865a	; 0x865a <__fixsfsi>
    4412:	97 ff       	sbrs	r25, 7
    4414:	07 c0       	rjmp	.+14     	; 0x4424 <mc_arc+0xf0>
    4416:	90 95       	com	r25
    4418:	80 95       	com	r24
    441a:	70 95       	com	r23
    441c:	61 95       	neg	r22
    441e:	7f 4f       	sbci	r23, 0xFF	; 255
    4420:	8f 4f       	sbci	r24, 0xFF	; 255
    4422:	9f 4f       	sbci	r25, 0xFF	; 255
    4424:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    4428:	9b 01       	movw	r18, r22
    442a:	ac 01       	movw	r20, r24
    442c:	c8 01       	movw	r24, r16
    442e:	b7 01       	movw	r22, r14
    4430:	0e 94 bb 44 	call	0x8976	; 0x8976 <hypot>
    4434:	7b 01       	movw	r14, r22
    4436:	8c 01       	movw	r16, r24
    4438:	60 93 f6 26 	sts	0x26F6, r22
    443c:	70 93 f7 26 	sts	0x26F7, r23
    4440:	80 93 f8 26 	sts	0x26F8, r24
    4444:	90 93 f9 26 	sts	0x26F9, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    4448:	2a e0       	ldi	r18, 0x0A	; 10
    444a:	37 ed       	ldi	r19, 0xD7	; 215
    444c:	43 e2       	ldi	r20, 0x23	; 35
    444e:	5c e3       	ldi	r21, 0x3C	; 60
    4450:	0e 94 be 42 	call	0x857c	; 0x857c <__cmpsf2>
    4454:	88 23       	and	r24, r24
    4456:	1c f4       	brge	.+6      	; 0x445e <mc_arc+0x12a>
    4458:	2f e0       	ldi	r18, 0x0F	; 15
    445a:	30 e0       	ldi	r19, 0x00	; 0
    445c:	c7 c1       	rjmp	.+910    	; 0x47ec <mc_arc+0x4b8>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    445e:	c8 01       	movw	r24, r16
    4460:	b7 01       	movw	r22, r14
    4462:	20 91 6f 26 	lds	r18, 0x266F
    4466:	30 91 70 26 	lds	r19, 0x2670
    446a:	40 91 71 26 	lds	r20, 0x2671
    446e:	50 91 72 26 	lds	r21, 0x2672
    4472:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    4476:	0e 94 ab 42 	call	0x8556	; 0x8556 <ceil>
    447a:	0e 94 2d 43 	call	0x865a	; 0x865a <__fixsfsi>
    447e:	8b 01       	movw	r16, r22
    4480:	60 93 de 26 	sts	0x26DE, r22
    4484:	70 93 df 26 	sts	0x26DF, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    4488:	2e a1       	ldd	r18, Y+38	; 0x26
    448a:	3f a1       	ldd	r19, Y+39	; 0x27
    448c:	23 2b       	or	r18, r19
    448e:	b9 f0       	breq	.+46     	; 0x44be <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    4490:	b8 01       	movw	r22, r16
    4492:	88 27       	eor	r24, r24
    4494:	77 fd       	sbrc	r23, 7
    4496:	80 95       	com	r24
    4498:	98 2f       	mov	r25, r24
    449a:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    449e:	9b 01       	movw	r18, r22
    44a0:	ac 01       	movw	r20, r24
    44a2:	6a a1       	ldd	r22, Y+34	; 0x22
    44a4:	7b a1       	ldd	r23, Y+35	; 0x23
    44a6:	8c a1       	ldd	r24, Y+36	; 0x24
    44a8:	9d a1       	ldd	r25, Y+37	; 0x25
    44aa:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    44ae:	60 93 0a 27 	sts	0x270A, r22
    44b2:	70 93 0b 27 	sts	0x270B, r23
    44b6:	80 93 0c 27 	sts	0x270C, r24
    44ba:	90 93 0d 27 	sts	0x270D, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    44be:	b8 01       	movw	r22, r16
    44c0:	88 27       	eor	r24, r24
    44c2:	77 fd       	sbrc	r23, 7
    44c4:	80 95       	com	r24
    44c6:	98 2f       	mov	r25, r24
    44c8:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    44cc:	7b 01       	movw	r14, r22
    44ce:	8c 01       	movw	r16, r24
    44d0:	c3 01       	movw	r24, r6
    44d2:	b2 01       	movw	r22, r4
    44d4:	a8 01       	movw	r20, r16
    44d6:	97 01       	movw	r18, r14
    44d8:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    44dc:	60 93 0e 27 	sts	0x270E, r22
    44e0:	70 93 0f 27 	sts	0x270F, r23
    44e4:	80 93 10 27 	sts	0x2710, r24
    44e8:	90 93 11 27 	sts	0x2711, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    44ec:	c6 01       	movw	r24, r12
    44ee:	b5 01       	movw	r22, r10
    44f0:	a8 01       	movw	r20, r16
    44f2:	97 01       	movw	r18, r14
    44f4:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    44f8:	60 93 12 27 	sts	0x2712, r22
    44fc:	70 93 13 27 	sts	0x2713, r23
    4500:	80 93 14 27 	sts	0x2714, r24
    4504:	90 93 15 27 	sts	0x2715, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    4508:	69 81       	ldd	r22, Y+1	; 0x01
    450a:	7a 81       	ldd	r23, Y+2	; 0x02
    450c:	8b 81       	ldd	r24, Y+3	; 0x03
    450e:	9c 81       	ldd	r25, Y+4	; 0x04
    4510:	0e 94 e3 45 	call	0x8bc6	; 0x8bc6 <sin>
    4514:	5b 01       	movw	r10, r22
    4516:	6c 01       	movw	r12, r24
    4518:	f4 01       	movw	r30, r8
    451a:	ee 0f       	add	r30, r30
    451c:	ff 1f       	adc	r31, r31
    451e:	ee 0f       	add	r30, r30
    4520:	ff 1f       	adc	r31, r31
    4522:	e0 58       	subi	r30, 0x80	; 128
    4524:	fe 4d       	sbci	r31, 0xDE	; 222
    4526:	61 81       	ldd	r22, Z+1	; 0x01
    4528:	72 81       	ldd	r23, Z+2	; 0x02
    452a:	83 81       	ldd	r24, Z+3	; 0x03
    452c:	94 81       	ldd	r25, Z+4	; 0x04
    452e:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    4532:	f4 01       	movw	r30, r8
    4534:	ee 0f       	add	r30, r30
    4536:	ff 1f       	adc	r31, r31
    4538:	e8 0d       	add	r30, r8
    453a:	f9 1d       	adc	r31, r9
    453c:	13 e0       	ldi	r17, 0x03	; 3
    453e:	ee 0f       	add	r30, r30
    4540:	ff 1f       	adc	r31, r31
    4542:	1a 95       	dec	r17
    4544:	e1 f7       	brne	.-8      	; 0x453e <mc_arc+0x20a>
    4546:	e3 59       	subi	r30, 0x93	; 147
    4548:	f9 4d       	sbci	r31, 0xD9	; 217
    454a:	21 a1       	ldd	r18, Z+33	; 0x21
    454c:	32 a1       	ldd	r19, Z+34	; 0x22
    454e:	43 a1       	ldd	r20, Z+35	; 0x23
    4550:	54 a1       	ldd	r21, Z+36	; 0x24
    4552:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    4556:	7b 01       	movw	r14, r22
    4558:	8c 01       	movw	r16, r24
    455a:	c6 01       	movw	r24, r12
    455c:	b5 01       	movw	r22, r10
    455e:	2d 81       	ldd	r18, Y+5	; 0x05
    4560:	3e 81       	ldd	r19, Y+6	; 0x06
    4562:	4f 81       	ldd	r20, Y+7	; 0x07
    4564:	58 85       	ldd	r21, Y+8	; 0x08
    4566:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    456a:	9b 01       	movw	r18, r22
    456c:	ac 01       	movw	r20, r24
    456e:	c8 01       	movw	r24, r16
    4570:	b7 01       	movw	r22, r14
    4572:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    4576:	60 93 fa 26 	sts	0x26FA, r22
    457a:	70 93 fb 26 	sts	0x26FB, r23
    457e:	80 93 fc 26 	sts	0x26FC, r24
    4582:	90 93 fd 26 	sts	0x26FD, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    4586:	69 81       	ldd	r22, Y+1	; 0x01
    4588:	7a 81       	ldd	r23, Y+2	; 0x02
    458a:	8b 81       	ldd	r24, Y+3	; 0x03
    458c:	9c 81       	ldd	r25, Y+4	; 0x04
    458e:	0e 94 c2 42 	call	0x8584	; 0x8584 <cos>
    4592:	5b 01       	movw	r10, r22
    4594:	6c 01       	movw	r12, r24
    4596:	f1 01       	movw	r30, r2
    4598:	ee 0f       	add	r30, r30
    459a:	ff 1f       	adc	r31, r31
    459c:	ee 0f       	add	r30, r30
    459e:	ff 1f       	adc	r31, r31
    45a0:	e0 58       	subi	r30, 0x80	; 128
    45a2:	fe 4d       	sbci	r31, 0xDE	; 222
    45a4:	61 81       	ldd	r22, Z+1	; 0x01
    45a6:	72 81       	ldd	r23, Z+2	; 0x02
    45a8:	83 81       	ldd	r24, Z+3	; 0x03
    45aa:	94 81       	ldd	r25, Z+4	; 0x04
    45ac:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    45b0:	f1 01       	movw	r30, r2
    45b2:	ee 0f       	add	r30, r30
    45b4:	ff 1f       	adc	r31, r31
    45b6:	e2 0d       	add	r30, r2
    45b8:	f3 1d       	adc	r31, r3
    45ba:	53 e0       	ldi	r21, 0x03	; 3
    45bc:	ee 0f       	add	r30, r30
    45be:	ff 1f       	adc	r31, r31
    45c0:	5a 95       	dec	r21
    45c2:	e1 f7       	brne	.-8      	; 0x45bc <mc_arc+0x288>
    45c4:	e3 59       	subi	r30, 0x93	; 147
    45c6:	f9 4d       	sbci	r31, 0xD9	; 217
    45c8:	21 a1       	ldd	r18, Z+33	; 0x21
    45ca:	32 a1       	ldd	r19, Z+34	; 0x22
    45cc:	43 a1       	ldd	r20, Z+35	; 0x23
    45ce:	54 a1       	ldd	r21, Z+36	; 0x24
    45d0:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    45d4:	7b 01       	movw	r14, r22
    45d6:	8c 01       	movw	r16, r24
    45d8:	c6 01       	movw	r24, r12
    45da:	b5 01       	movw	r22, r10
    45dc:	2d 81       	ldd	r18, Y+5	; 0x05
    45de:	3e 81       	ldd	r19, Y+6	; 0x06
    45e0:	4f 81       	ldd	r20, Y+7	; 0x07
    45e2:	58 85       	ldd	r21, Y+8	; 0x08
    45e4:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    45e8:	9b 01       	movw	r18, r22
    45ea:	ac 01       	movw	r20, r24
    45ec:	c8 01       	movw	r24, r16
    45ee:	b7 01       	movw	r22, r14
    45f0:	0e 94 1e 42 	call	0x843c	; 0x843c <__subsf3>
    45f4:	60 93 fe 26 	sts	0x26FE, r22
    45f8:	70 93 ff 26 	sts	0x26FF, r23
    45fc:	80 93 00 27 	sts	0x2700, r24
    4600:	90 93 01 27 	sts	0x2701, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    4604:	e8 a1       	ldd	r30, Y+32	; 0x20
    4606:	f9 a1       	ldd	r31, Y+33	; 0x21
    4608:	ee 0f       	add	r30, r30
    460a:	ff 1f       	adc	r31, r31
    460c:	ee 0f       	add	r30, r30
    460e:	ff 1f       	adc	r31, r31
    4610:	8f 01       	movw	r16, r30
    4612:	03 52       	subi	r16, 0x23	; 35
    4614:	19 4d       	sbci	r17, 0xD9	; 217
    4616:	e0 58       	subi	r30, 0x80	; 128
    4618:	fe 4d       	sbci	r31, 0xDE	; 222
    461a:	61 81       	ldd	r22, Z+1	; 0x01
    461c:	72 81       	ldd	r23, Z+2	; 0x02
    461e:	83 81       	ldd	r24, Z+3	; 0x03
    4620:	94 81       	ldd	r25, Z+4	; 0x04
    4622:	0e 94 60 43 	call	0x86c0	; 0x86c0 <__floatsisf>
    4626:	20 91 be 26 	lds	r18, 0x26BE
    462a:	30 91 bf 26 	lds	r19, 0x26BF
    462e:	40 91 c0 26 	lds	r20, 0x26C0
    4632:	50 91 c1 26 	lds	r21, 0x26C1
    4636:	0e 94 c5 42 	call	0x858a	; 0x858a <__divsf3>
    463a:	d8 01       	movw	r26, r16
    463c:	1d 96       	adiw	r26, 0x0d	; 13
    463e:	6d 93       	st	X+, r22
    4640:	7d 93       	st	X+, r23
    4642:	8d 93       	st	X+, r24
    4644:	9c 93       	st	X, r25
    4646:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    4648:	10 92 e0 26 	sts	0x26E0, r1
    464c:	10 92 e1 26 	sts	0x26E1, r1
    4650:	bf c0       	rjmp	.+382    	; 0x47d0 <mc_arc+0x49c>
		ma.theta += ma.theta_per_segment;
    4652:	60 91 02 27 	lds	r22, 0x2702
    4656:	70 91 03 27 	lds	r23, 0x2703
    465a:	80 91 04 27 	lds	r24, 0x2704
    465e:	90 91 05 27 	lds	r25, 0x2705
    4662:	20 91 0e 27 	lds	r18, 0x270E
    4666:	30 91 0f 27 	lds	r19, 0x270F
    466a:	40 91 10 27 	lds	r20, 0x2710
    466e:	50 91 11 27 	lds	r21, 0x2711
    4672:	0e 94 1f 42 	call	0x843e	; 0x843e <__addsf3>
    4676:	7b 01       	movw	r14, r22
    4678:	8c 01       	movw	r16, r24
    467a:	cb 01       	movw	r24, r22
    467c:	d8 01       	movw	r26, r16
    467e:	80 93 02 27 	sts	0x2702, r24
    4682:	90 93 03 27 	sts	0x2703, r25
    4686:	a0 93 04 27 	sts	0x2704, r26
    468a:	b0 93 05 27 	sts	0x2705, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    468e:	b7 01       	movw	r22, r14
    4690:	c8 01       	movw	r24, r16
    4692:	0e 94 e3 45 	call	0x8bc6	; 0x8bc6 <sin>
    4696:	80 90 06 27 	lds	r8, 0x2706
    469a:	90 90 07 27 	lds	r9, 0x2707
    469e:	a0 90 08 27 	lds	r10, 0x2708
    46a2:	b0 90 09 27 	lds	r11, 0x2709
    46a6:	c0 90 e4 26 	lds	r12, 0x26E4
    46aa:	d0 90 e5 26 	lds	r13, 0x26E5
    46ae:	cc 0c       	add	r12, r12
    46b0:	dd 1c       	adc	r13, r13
    46b2:	cc 0c       	add	r12, r12
    46b4:	dd 1c       	adc	r13, r13
    46b6:	ed ed       	ldi	r30, 0xDD	; 221
    46b8:	f6 e2       	ldi	r31, 0x26	; 38
    46ba:	ce 0e       	add	r12, r30
    46bc:	df 1e       	adc	r13, r31
    46be:	a5 01       	movw	r20, r10
    46c0:	94 01       	movw	r18, r8
    46c2:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    46c6:	9b 01       	movw	r18, r22
    46c8:	ac 01       	movw	r20, r24
    46ca:	60 91 fa 26 	lds	r22, 0x26FA
    46ce:	70 91 fb 26 	lds	r23, 0x26FB
    46d2:	80 91 fc 26 	lds	r24, 0x26FC
    46d6:	90 91 fd 26 	lds	r25, 0x26FD
    46da:	0e 94 1f 42 	call	0x843e	; 0x843e <__addsf3>
    46de:	d6 01       	movw	r26, r12
    46e0:	1d 96       	adiw	r26, 0x0d	; 13
    46e2:	6d 93       	st	X+, r22
    46e4:	7d 93       	st	X+, r23
    46e6:	8d 93       	st	X+, r24
    46e8:	9c 93       	st	X, r25
    46ea:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    46ec:	b7 01       	movw	r22, r14
    46ee:	c8 01       	movw	r24, r16
    46f0:	0e 94 c2 42 	call	0x8584	; 0x8584 <cos>
    46f4:	00 91 e6 26 	lds	r16, 0x26E6
    46f8:	10 91 e7 26 	lds	r17, 0x26E7
    46fc:	00 0f       	add	r16, r16
    46fe:	11 1f       	adc	r17, r17
    4700:	00 0f       	add	r16, r16
    4702:	11 1f       	adc	r17, r17
    4704:	03 52       	subi	r16, 0x23	; 35
    4706:	19 4d       	sbci	r17, 0xD9	; 217
    4708:	a5 01       	movw	r20, r10
    470a:	94 01       	movw	r18, r8
    470c:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    4710:	9b 01       	movw	r18, r22
    4712:	ac 01       	movw	r20, r24
    4714:	60 91 fe 26 	lds	r22, 0x26FE
    4718:	70 91 ff 26 	lds	r23, 0x26FF
    471c:	80 91 00 27 	lds	r24, 0x2700
    4720:	90 91 01 27 	lds	r25, 0x2701
    4724:	0e 94 1f 42 	call	0x843e	; 0x843e <__addsf3>
    4728:	f8 01       	movw	r30, r16
    472a:	65 87       	std	Z+13, r22	; 0x0d
    472c:	76 87       	std	Z+14, r23	; 0x0e
    472e:	87 87       	std	Z+15, r24	; 0x0f
    4730:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    4732:	00 91 e8 26 	lds	r16, 0x26E8
    4736:	10 91 e9 26 	lds	r17, 0x26E9
    473a:	00 0f       	add	r16, r16
    473c:	11 1f       	adc	r17, r17
    473e:	00 0f       	add	r16, r16
    4740:	11 1f       	adc	r17, r17
    4742:	03 52       	subi	r16, 0x23	; 35
    4744:	19 4d       	sbci	r17, 0xD9	; 217
    4746:	d8 01       	movw	r26, r16
    4748:	1d 96       	adiw	r26, 0x0d	; 13
    474a:	6d 91       	ld	r22, X+
    474c:	7d 91       	ld	r23, X+
    474e:	8d 91       	ld	r24, X+
    4750:	9c 91       	ld	r25, X
    4752:	50 97       	sbiw	r26, 0x10	; 16
    4754:	20 91 12 27 	lds	r18, 0x2712
    4758:	30 91 13 27 	lds	r19, 0x2713
    475c:	40 91 14 27 	lds	r20, 0x2714
    4760:	50 91 15 27 	lds	r21, 0x2715
    4764:	0e 94 1f 42 	call	0x843e	; 0x843e <__addsf3>
    4768:	f8 01       	movw	r30, r16
    476a:	65 87       	std	Z+13, r22	; 0x0d
    476c:	76 87       	std	Z+14, r23	; 0x0e
    476e:	87 87       	std	Z+15, r24	; 0x0f
    4770:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    4772:	60 91 ea 26 	lds	r22, 0x26EA
    4776:	70 91 eb 26 	lds	r23, 0x26EB
    477a:	80 91 ec 26 	lds	r24, 0x26EC
    477e:	90 91 ed 26 	lds	r25, 0x26ED
    4782:	20 91 ee 26 	lds	r18, 0x26EE
    4786:	30 91 ef 26 	lds	r19, 0x26EF
    478a:	40 91 f0 26 	lds	r20, 0x26F0
    478e:	50 91 f1 26 	lds	r21, 0x26F1
    4792:	e0 90 f2 26 	lds	r14, 0x26F2
    4796:	f0 90 f3 26 	lds	r15, 0x26F3
    479a:	00 91 f4 26 	lds	r16, 0x26F4
    479e:	10 91 f5 26 	lds	r17, 0x26F5
    47a2:	a0 90 0a 27 	lds	r10, 0x270A
    47a6:	b0 90 0b 27 	lds	r11, 0x270B
    47aa:	c0 90 0c 27 	lds	r12, 0x270C
    47ae:	d0 90 0d 27 	lds	r13, 0x270D
    47b2:	80 90 e2 26 	lds	r8, 0x26E2
    47b6:	90 90 e3 26 	lds	r9, 0x26E3
    47ba:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    47be:	80 91 e0 26 	lds	r24, 0x26E0
    47c2:	90 91 e1 26 	lds	r25, 0x26E1
    47c6:	01 96       	adiw	r24, 0x01	; 1
    47c8:	80 93 e0 26 	sts	0x26E0, r24
    47cc:	90 93 e1 26 	sts	0x26E1, r25
    47d0:	20 91 e0 26 	lds	r18, 0x26E0
    47d4:	30 91 e1 26 	lds	r19, 0x26E1
    47d8:	80 91 de 26 	lds	r24, 0x26DE
    47dc:	90 91 df 26 	lds	r25, 0x26DF
    47e0:	82 17       	cp	r24, r18
    47e2:	93 07       	cpc	r25, r19
    47e4:	0c f0       	brlt	.+2      	; 0x47e8 <mc_arc+0x4b4>
    47e6:	35 cf       	rjmp	.-406    	; 0x4652 <mc_arc+0x31e>
    47e8:	20 e0       	ldi	r18, 0x00	; 0
    47ea:	30 e0       	ldi	r19, 0x00	; 0
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    47ec:	c9 01       	movw	r24, r18
    47ee:	28 96       	adiw	r28, 0x08	; 8
    47f0:	cd bf       	out	0x3d, r28	; 61
    47f2:	de bf       	out	0x3e, r29	; 62
    47f4:	cf 91       	pop	r28
    47f6:	df 91       	pop	r29
    47f8:	1f 91       	pop	r17
    47fa:	0f 91       	pop	r16
    47fc:	ff 90       	pop	r15
    47fe:	ef 90       	pop	r14
    4800:	df 90       	pop	r13
    4802:	cf 90       	pop	r12
    4804:	bf 90       	pop	r11
    4806:	af 90       	pop	r10
    4808:	9f 90       	pop	r9
    480a:	8f 90       	pop	r8
    480c:	7f 90       	pop	r7
    480e:	6f 90       	pop	r6
    4810:	5f 90       	pop	r5
    4812:	4f 90       	pop	r4
    4814:	3f 90       	pop	r3
    4816:	2f 90       	pop	r2
    4818:	08 95       	ret

0000481a <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    481a:	e0 e6       	ldi	r30, 0x60	; 96
    481c:	f6 e0       	ldi	r31, 0x06	; 6
    481e:	80 e4       	ldi	r24, 0x40	; 64
    4820:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    4822:	80 e8       	ldi	r24, 0x80	; 128
    4824:	81 83       	std	Z+1, r24	; 0x01
}
    4826:	08 95       	ret

00004828 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    4828:	97 fd       	sbrc	r25, 7
    482a:	05 c0       	rjmp	.+10     	; 0x4836 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    482c:	80 e8       	ldi	r24, 0x80	; 128
    482e:	e0 e6       	ldi	r30, 0x60	; 96
    4830:	f6 e0       	ldi	r31, 0x06	; 6
    4832:	85 83       	std	Z+5, r24	; 0x05
    4834:	04 c0       	rjmp	.+8      	; 0x483e <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    4836:	80 e8       	ldi	r24, 0x80	; 128
    4838:	e0 e6       	ldi	r30, 0x60	; 96
    483a:	f6 e0       	ldi	r31, 0x06	; 6
    483c:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    483e:	80 e4       	ldi	r24, 0x40	; 64
    4840:	e0 e6       	ldi	r30, 0x60	; 96
    4842:	f6 e0       	ldi	r31, 0x06	; 6
    4844:	85 83       	std	Z+5, r24	; 0x05
}
    4846:	08 95       	ret

00004848 <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    4848:	80 e4       	ldi	r24, 0x40	; 64
    484a:	e0 e6       	ldi	r30, 0x60	; 96
    484c:	f6 e0       	ldi	r31, 0x06	; 6
    484e:	86 83       	std	Z+6, r24	; 0x06
}
    4850:	08 95       	ret

00004852 <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    4852:	cf 93       	push	r28
    4854:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    4856:	10 92 2a 26 	sts	0x262A, r1
	ax.exec_mutex = FALSE;
    485a:	10 92 29 26 	sts	0x2629, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    485e:	80 e0       	ldi	r24, 0x00	; 0
    4860:	96 e0       	ldi	r25, 0x06	; 6
    4862:	80 93 39 26 	sts	0x2639, r24
    4866:	90 93 3a 26 	sts	0x263A, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    486a:	80 ea       	ldi	r24, 0xA0	; 160
    486c:	96 e0       	ldi	r25, 0x06	; 6
    486e:	80 93 49 26 	sts	0x2649, r24
    4872:	90 93 4a 26 	sts	0x264A, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    4876:	80 e8       	ldi	r24, 0x80	; 128
    4878:	96 e0       	ldi	r25, 0x06	; 6
    487a:	80 93 59 26 	sts	0x2659, r24
    487e:	90 93 5a 26 	sts	0x265A, r25
	ax.a[A].port = &A_MOTOR_PORT;
    4882:	80 e6       	ldi	r24, 0x60	; 96
    4884:	96 e0       	ldi	r25, 0x06	; 6
    4886:	80 93 69 26 	sts	0x2669, r24
    488a:	90 93 6a 26 	sts	0x266A, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    488e:	80 e0       	ldi	r24, 0x00	; 0
    4890:	98 e0       	ldi	r25, 0x08	; 8
    4892:	80 93 3b 26 	sts	0x263B, r24
    4896:	90 93 3c 26 	sts	0x263C, r25
	ax.a[Y].timer = &Y_TIMER;
    489a:	80 e0       	ldi	r24, 0x00	; 0
    489c:	99 e0       	ldi	r25, 0x09	; 9
    489e:	80 93 4b 26 	sts	0x264B, r24
    48a2:	90 93 4c 26 	sts	0x264C, r25
	ax.a[Z].timer = &Z_TIMER;
    48a6:	80 e0       	ldi	r24, 0x00	; 0
    48a8:	9a e0       	ldi	r25, 0x0A	; 10
    48aa:	80 93 5b 26 	sts	0x265B, r24
    48ae:	90 93 5c 26 	sts	0x265C, r25
	ax.a[A].timer = &A_TIMER;
    48b2:	80 e0       	ldi	r24, 0x00	; 0
    48b4:	9b e0       	ldi	r25, 0x0B	; 11
    48b6:	80 93 6b 26 	sts	0x266B, r24
    48ba:	90 93 6c 26 	sts	0x266C, r25
    48be:	cd e7       	ldi	r28, 0x7D	; 125
    48c0:	d6 e2       	ldi	r29, 0x26	; 38
    48c2:	a7 e3       	ldi	r26, 0x37	; 55
    48c4:	b6 e2       	ldi	r27, 0x26	; 38

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    48c6:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    48c8:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    48ca:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    48cc:	88 81       	ld	r24, Y
    48ce:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    48d0:	12 96       	adiw	r26, 0x02	; 2
    48d2:	ed 91       	ld	r30, X+
    48d4:	fc 91       	ld	r31, X
    48d6:	13 97       	sbiw	r26, 0x03	; 3
    48d8:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    48da:	12 96       	adiw	r26, 0x02	; 2
    48dc:	ed 91       	ld	r30, X+
    48de:	fc 91       	ld	r31, X
    48e0:	13 97       	sbiw	r26, 0x03	; 3
    48e2:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
    48e4:	12 96       	adiw	r26, 0x02	; 2
    48e6:	ed 91       	ld	r30, X+
    48e8:	fc 91       	ld	r31, X
    48ea:	13 97       	sbiw	r26, 0x03	; 3
    48ec:	84 81       	ldd	r24, Z+4	; 0x04
    48ee:	88 61       	ori	r24, 0x18	; 24
    48f0:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    48f2:	12 96       	adiw	r26, 0x02	; 2
    48f4:	ed 91       	ld	r30, X+
    48f6:	fc 91       	ld	r31, X
    48f8:	13 97       	sbiw	r26, 0x03	; 3
    48fa:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    48fc:	14 96       	adiw	r26, 0x04	; 4
    48fe:	ed 91       	ld	r30, X+
    4900:	fc 91       	ld	r31, X
    4902:	15 97       	sbiw	r26, 0x05	; 5
    4904:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    4906:	14 96       	adiw	r26, 0x04	; 4
    4908:	ed 91       	ld	r30, X+
    490a:	fc 91       	ld	r31, X
    490c:	15 97       	sbiw	r26, 0x05	; 5
    490e:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    4910:	14 96       	adiw	r26, 0x04	; 4
    4912:	ed 91       	ld	r30, X+
    4914:	fc 91       	ld	r31, X
    4916:	15 97       	sbiw	r26, 0x05	; 5
    4918:	96 83       	std	Z+6, r25	; 0x06
    491a:	68 96       	adiw	r28, 0x18	; 24
    491c:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    491e:	86 e2       	ldi	r24, 0x26	; 38
    4920:	cd 3d       	cpi	r28, 0xDD	; 221
    4922:	d8 07       	cpc	r29, r24
    4924:	99 f6       	brne	.-90     	; 0x48cc <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    4926:	df 91       	pop	r29
    4928:	cf 91       	pop	r28
    492a:	08 95       	ret

0000492c <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    492c:	e8 2f       	mov	r30, r24
    492e:	f0 e0       	ldi	r31, 0x00	; 0
    4930:	84 e0       	ldi	r24, 0x04	; 4
    4932:	ee 0f       	add	r30, r30
    4934:	ff 1f       	adc	r31, r31
    4936:	8a 95       	dec	r24
    4938:	e1 f7       	brne	.-8      	; 0x4932 <st_set_polarity+0x6>
    493a:	e7 5d       	subi	r30, 0xD7	; 215
    493c:	f9 4d       	sbci	r31, 0xD9	; 217
    493e:	66 87       	std	Z+14, r22	; 0x0e
}
    4940:	08 95       	ret

00004942 <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X].step_counter = 0x00001000;
    4942:	2d e2       	ldi	r18, 0x2D	; 45
    4944:	36 e2       	ldi	r19, 0x26	; 38
    4946:	80 e0       	ldi	r24, 0x00	; 0
    4948:	90 e1       	ldi	r25, 0x10	; 16
    494a:	a0 e0       	ldi	r26, 0x00	; 0
    494c:	b0 e0       	ldi	r27, 0x00	; 0
    494e:	80 93 2d 26 	sts	0x262D, r24
    4952:	90 93 2e 26 	sts	0x262E, r25
    4956:	a0 93 2f 26 	sts	0x262F, r26
    495a:	b0 93 30 26 	sts	0x2630, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    495e:	e0 91 3b 26 	lds	r30, 0x263B
    4962:	f0 91 3c 26 	lds	r31, 0x263C
    4966:	80 e0       	ldi	r24, 0x00	; 0
    4968:	90 e1       	ldi	r25, 0x10	; 16
    496a:	86 a3       	std	Z+38, r24	; 0x26
    496c:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    496e:	41 e0       	ldi	r20, 0x01	; 1
    4970:	40 83       	st	Z, r20

	ax.a[Y].step_counter = 0x00000800;
    4972:	80 e0       	ldi	r24, 0x00	; 0
    4974:	98 e0       	ldi	r25, 0x08	; 8
    4976:	a0 e0       	ldi	r26, 0x00	; 0
    4978:	b0 e0       	ldi	r27, 0x00	; 0
    497a:	80 93 3d 26 	sts	0x263D, r24
    497e:	90 93 3e 26 	sts	0x263E, r25
    4982:	a0 93 3f 26 	sts	0x263F, r26
    4986:	b0 93 40 26 	sts	0x2640, r27
	ax.a[Y].timer->PER = 0x2000;
    498a:	e0 91 4b 26 	lds	r30, 0x264B
    498e:	f0 91 4c 26 	lds	r31, 0x264C
    4992:	80 e0       	ldi	r24, 0x00	; 0
    4994:	90 e2       	ldi	r25, 0x20	; 32
    4996:	86 a3       	std	Z+38, r24	; 0x26
    4998:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    499a:	40 83       	st	Z, r20

	ax.a[Z].step_counter = 0x00000600;
    499c:	80 e0       	ldi	r24, 0x00	; 0
    499e:	96 e0       	ldi	r25, 0x06	; 6
    49a0:	a0 e0       	ldi	r26, 0x00	; 0
    49a2:	b0 e0       	ldi	r27, 0x00	; 0
    49a4:	80 93 4d 26 	sts	0x264D, r24
    49a8:	90 93 4e 26 	sts	0x264E, r25
    49ac:	a0 93 4f 26 	sts	0x264F, r26
    49b0:	b0 93 50 26 	sts	0x2650, r27
	ax.a[Z].timer->PER = 0x3000;
    49b4:	e0 91 5b 26 	lds	r30, 0x265B
    49b8:	f0 91 5c 26 	lds	r31, 0x265C
    49bc:	80 e0       	ldi	r24, 0x00	; 0
    49be:	90 e3       	ldi	r25, 0x30	; 48
    49c0:	86 a3       	std	Z+38, r24	; 0x26
    49c2:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    49c4:	40 83       	st	Z, r20

	ax.a[A].step_counter = 0x00000400;
    49c6:	80 e0       	ldi	r24, 0x00	; 0
    49c8:	94 e0       	ldi	r25, 0x04	; 4
    49ca:	a0 e0       	ldi	r26, 0x00	; 0
    49cc:	b0 e0       	ldi	r27, 0x00	; 0
    49ce:	80 93 5d 26 	sts	0x265D, r24
    49d2:	90 93 5e 26 	sts	0x265E, r25
    49d6:	a0 93 5f 26 	sts	0x265F, r26
    49da:	b0 93 60 26 	sts	0x2660, r27
	ax.a[A].timer->PER = 0x4000;
    49de:	d9 01       	movw	r26, r18
    49e0:	de 96       	adiw	r26, 0x3e	; 62
    49e2:	ed 91       	ld	r30, X+
    49e4:	fc 91       	ld	r31, X
    49e6:	df 97       	sbiw	r26, 0x3f	; 63
    49e8:	80 e0       	ldi	r24, 0x00	; 0
    49ea:	90 e4       	ldi	r25, 0x40	; 64
    49ec:	86 a3       	std	Z+38, r24	; 0x26
    49ee:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    49f0:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    49f2:	23 50       	subi	r18, 0x03	; 3
    49f4:	30 40       	sbci	r19, 0x00	; 0
    49f6:	f9 01       	movw	r30, r18
    49f8:	80 81       	ld	r24, Z
    49fa:	8f 60       	ori	r24, 0x0F	; 15
    49fc:	80 83       	st	Z, r24
}
    49fe:	08 95       	ret

00004a00 <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    4a00:	f8 94       	cli
	mv_flush();									// flush the move buffer
    4a02:	0e 94 c5 31 	call	0x638a	; 0x638a <mv_flush>
	sei();
    4a06:	78 94       	sei
}
    4a08:	08 95       	ret

00004a0a <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    4a0a:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    4a0c:	e0 91 3b 26 	lds	r30, 0x263B
    4a10:	f0 91 3c 26 	lds	r31, 0x263C
    4a14:	10 82       	st	Z, r1
    4a16:	e0 91 4b 26 	lds	r30, 0x264B
    4a1a:	f0 91 4c 26 	lds	r31, 0x264C
    4a1e:	10 82       	st	Z, r1
    4a20:	e0 91 5b 26 	lds	r30, 0x265B
    4a24:	f0 91 5c 26 	lds	r31, 0x265C
    4a28:	10 82       	st	Z, r1
    4a2a:	e0 91 6b 26 	lds	r30, 0x266B
    4a2e:	f0 91 6c 26 	lds	r31, 0x266C
    4a32:	10 82       	st	Z, r1
	}	
	mv_flush();									// flush the move buffer
    4a34:	0e 94 c5 31 	call	0x638a	; 0x638a <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4a38:	10 92 2a 26 	sts	0x262A, r1
	sei();
    4a3c:	78 94       	sei
}
    4a3e:	08 95       	ret

00004a40 <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    4a40:	cf 92       	push	r12
    4a42:	df 92       	push	r13
    4a44:	ef 92       	push	r14
    4a46:	ff 92       	push	r15
    4a48:	0f 93       	push	r16
    4a4a:	1f 93       	push	r17
    4a4c:	cf 93       	push	r28
    4a4e:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    4a50:	80 91 29 26 	lds	r24, 0x2629
    4a54:	88 23       	and	r24, r24
    4a56:	09 f0       	breq	.+2      	; 0x4a5a <st_execute_move+0x1a>
    4a58:	32 c1       	rjmp	.+612    	; 0x4cbe <st_execute_move+0x27e>
		return;
	}
	ax.exec_mutex = TRUE;
    4a5a:	81 e0       	ldi	r24, 0x01	; 1
    4a5c:	80 93 29 26 	sts	0x2629, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    4a60:	80 91 2a 26 	lds	r24, 0x262A
    4a64:	88 23       	and	r24, r24
    4a66:	09 f0       	breq	.+2      	; 0x4a6a <st_execute_move+0x2a>
    4a68:	28 c1       	rjmp	.+592    	; 0x4cba <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    4a6a:	0e 94 82 31 	call	0x6304	; 0x6304 <mv_dequeue_move_buffer>
    4a6e:	80 93 2b 26 	sts	0x262B, r24
    4a72:	90 93 2c 26 	sts	0x262C, r25
    4a76:	89 2b       	or	r24, r25
    4a78:	09 f4       	brne	.+2      	; 0x4a7c <st_execute_move+0x3c>
    4a7a:	1f c1       	rjmp	.+574    	; 0x4cba <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;
		return;
    4a7c:	6d e2       	ldi	r22, 0x2D	; 45
    4a7e:	76 e2       	ldi	r23, 0x26	; 38
    4a80:	00 e0       	ldi	r16, 0x00	; 0
    4a82:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4a84:	94 e0       	ldi	r25, 0x04	; 4
    4a86:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4a88:	82 e0       	ldi	r24, 0x02	; 2
    4a8a:	d8 2e       	mov	r13, r24
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.exec_mutex = FALSE;
		return;
    4a8c:	f0 2e       	mov	r15, r16
    4a8e:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    4a90:	db 01       	movw	r26, r22
    4a92:	1e 96       	adiw	r26, 0x0e	; 14
    4a94:	ed 91       	ld	r30, X+
    4a96:	fc 91       	ld	r31, X
    4a98:	1f 97       	sbiw	r26, 0x0f	; 15
    4a9a:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    4a9c:	c0 91 2b 26 	lds	r28, 0x262B
    4aa0:	d0 91 2c 26 	lds	r29, 0x262C
    4aa4:	c8 01       	movw	r24, r16
    4aa6:	fc 01       	movw	r30, r24
    4aa8:	b3 e0       	ldi	r27, 0x03	; 3
    4aaa:	ee 0f       	add	r30, r30
    4aac:	ff 1f       	adc	r31, r31
    4aae:	ba 95       	dec	r27
    4ab0:	e1 f7       	brne	.-8      	; 0x4aaa <st_execute_move+0x6a>
    4ab2:	88 0f       	add	r24, r24
    4ab4:	99 1f       	adc	r25, r25
    4ab6:	e8 0f       	add	r30, r24
    4ab8:	f9 1f       	adc	r31, r25
    4aba:	ec 0f       	add	r30, r28
    4abc:	fd 1f       	adc	r31, r29
    4abe:	80 81       	ld	r24, Z
    4ac0:	91 81       	ldd	r25, Z+1	; 0x01
    4ac2:	a2 81       	ldd	r26, Z+2	; 0x02
    4ac4:	b3 81       	ldd	r27, Z+3	; 0x03
    4ac6:	00 97       	sbiw	r24, 0x00	; 0
    4ac8:	a1 05       	cpc	r26, r1
    4aca:	b1 05       	cpc	r27, r1
    4acc:	09 f4       	brne	.+2      	; 0x4ad0 <st_execute_move+0x90>
    4ace:	a6 c0       	rjmp	.+332    	; 0x4c1c <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    4ad0:	c8 01       	movw	r24, r16
    4ad2:	9c 01       	movw	r18, r24
    4ad4:	f3 e0       	ldi	r31, 0x03	; 3
    4ad6:	22 0f       	add	r18, r18
    4ad8:	33 1f       	adc	r19, r19
    4ada:	fa 95       	dec	r31
    4adc:	e1 f7       	brne	.-8      	; 0x4ad6 <st_execute_move+0x96>
    4ade:	88 0f       	add	r24, r24
    4ae0:	99 1f       	adc	r25, r25
    4ae2:	28 0f       	add	r18, r24
    4ae4:	39 1f       	adc	r19, r25
    4ae6:	c2 0f       	add	r28, r18
    4ae8:	d3 1f       	adc	r29, r19
    4aea:	89 85       	ldd	r24, Y+9	; 0x09
    4aec:	fb 01       	movw	r30, r22
    4aee:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4af0:	e0 91 2b 26 	lds	r30, 0x262B
    4af4:	f0 91 2c 26 	lds	r31, 0x262C
    4af8:	c8 01       	movw	r24, r16
    4afa:	9c 01       	movw	r18, r24
    4afc:	53 e0       	ldi	r21, 0x03	; 3
    4afe:	22 0f       	add	r18, r18
    4b00:	33 1f       	adc	r19, r19
    4b02:	5a 95       	dec	r21
    4b04:	e1 f7       	brne	.-8      	; 0x4afe <st_execute_move+0xbe>
    4b06:	88 0f       	add	r24, r24
    4b08:	99 1f       	adc	r25, r25
    4b0a:	28 0f       	add	r18, r24
    4b0c:	39 1f       	adc	r19, r25
    4b0e:	e2 0f       	add	r30, r18
    4b10:	f3 1f       	adc	r31, r19
    4b12:	90 85       	ldd	r25, Z+8	; 0x08
    4b14:	db 01       	movw	r26, r22
    4b16:	1a 96       	adiw	r26, 0x0a	; 10
    4b18:	8c 91       	ld	r24, X
    4b1a:	1a 97       	sbiw	r26, 0x0a	; 10
    4b1c:	1c 96       	adiw	r26, 0x0c	; 12
    4b1e:	ed 91       	ld	r30, X+
    4b20:	fc 91       	ld	r31, X
    4b22:	1d 97       	sbiw	r26, 0x0d	; 13
    4b24:	98 17       	cp	r25, r24
    4b26:	11 f0       	breq	.+4      	; 0x4b2c <st_execute_move+0xec>
    4b28:	d5 82       	std	Z+5, r13	; 0x05
    4b2a:	01 c0       	rjmp	.+2      	; 0x4b2e <st_execute_move+0xee>
    4b2c:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    4b2e:	40 91 2b 26 	lds	r20, 0x262B
    4b32:	50 91 2c 26 	lds	r21, 0x262C
    4b36:	8f 2d       	mov	r24, r15
    4b38:	9e 2d       	mov	r25, r14
    4b3a:	fc 01       	movw	r30, r24
    4b3c:	33 e0       	ldi	r19, 0x03	; 3
    4b3e:	ee 0f       	add	r30, r30
    4b40:	ff 1f       	adc	r31, r31
    4b42:	3a 95       	dec	r19
    4b44:	e1 f7       	brne	.-8      	; 0x4b3e <st_execute_move+0xfe>
    4b46:	88 0f       	add	r24, r24
    4b48:	99 1f       	adc	r25, r25
    4b4a:	e8 0f       	add	r30, r24
    4b4c:	f9 1f       	adc	r31, r25
    4b4e:	e4 0f       	add	r30, r20
    4b50:	f5 1f       	adc	r31, r21
    4b52:	80 81       	ld	r24, Z
    4b54:	91 81       	ldd	r25, Z+1	; 0x01
    4b56:	a2 81       	ldd	r26, Z+2	; 0x02
    4b58:	b3 81       	ldd	r27, Z+3	; 0x03
    4b5a:	fb 01       	movw	r30, r22
    4b5c:	80 83       	st	Z, r24
    4b5e:	91 83       	std	Z+1, r25	; 0x01
    4b60:	a2 83       	std	Z+2, r26	; 0x02
    4b62:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    4b64:	8f 2d       	mov	r24, r15
    4b66:	9e 2d       	mov	r25, r14
    4b68:	fc 01       	movw	r30, r24
    4b6a:	b3 e0       	ldi	r27, 0x03	; 3
    4b6c:	ee 0f       	add	r30, r30
    4b6e:	ff 1f       	adc	r31, r31
    4b70:	ba 95       	dec	r27
    4b72:	e1 f7       	brne	.-8      	; 0x4b6c <st_execute_move+0x12c>
    4b74:	88 0f       	add	r24, r24
    4b76:	99 1f       	adc	r25, r25
    4b78:	e8 0f       	add	r30, r24
    4b7a:	f9 1f       	adc	r31, r25
    4b7c:	e4 0f       	add	r30, r20
    4b7e:	f5 1f       	adc	r31, r21
    4b80:	86 81       	ldd	r24, Z+6	; 0x06
    4b82:	97 81       	ldd	r25, Z+7	; 0x07
    4b84:	db 01       	movw	r26, r22
    4b86:	16 96       	adiw	r26, 0x06	; 6
    4b88:	8d 93       	st	X+, r24
    4b8a:	9c 93       	st	X, r25
    4b8c:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    4b8e:	8f 2d       	mov	r24, r15
    4b90:	9e 2d       	mov	r25, r14
    4b92:	fc 01       	movw	r30, r24
    4b94:	33 e0       	ldi	r19, 0x03	; 3
    4b96:	ee 0f       	add	r30, r30
    4b98:	ff 1f       	adc	r31, r31
    4b9a:	3a 95       	dec	r19
    4b9c:	e1 f7       	brne	.-8      	; 0x4b96 <st_execute_move+0x156>
    4b9e:	88 0f       	add	r24, r24
    4ba0:	99 1f       	adc	r25, r25
    4ba2:	e8 0f       	add	r30, r24
    4ba4:	f9 1f       	adc	r31, r25
    4ba6:	e4 0f       	add	r30, r20
    4ba8:	f5 1f       	adc	r31, r21
    4baa:	86 81       	ldd	r24, Z+6	; 0x06
    4bac:	97 81       	ldd	r25, Z+7	; 0x07
    4bae:	18 96       	adiw	r26, 0x08	; 8
    4bb0:	8d 93       	st	X+, r24
    4bb2:	9c 93       	st	X, r25
    4bb4:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    4bb6:	8f 2d       	mov	r24, r15
    4bb8:	9e 2d       	mov	r25, r14
    4bba:	fc 01       	movw	r30, r24
    4bbc:	33 e0       	ldi	r19, 0x03	; 3
    4bbe:	ee 0f       	add	r30, r30
    4bc0:	ff 1f       	adc	r31, r31
    4bc2:	3a 95       	dec	r19
    4bc4:	e1 f7       	brne	.-8      	; 0x4bbe <st_execute_move+0x17e>
    4bc6:	88 0f       	add	r24, r24
    4bc8:	99 1f       	adc	r25, r25
    4bca:	e8 0f       	add	r30, r24
    4bcc:	f9 1f       	adc	r31, r25
    4bce:	e4 0f       	add	r30, r20
    4bd0:	f5 1f       	adc	r31, r21
    4bd2:	84 81       	ldd	r24, Z+4	; 0x04
    4bd4:	95 81       	ldd	r25, Z+5	; 0x05
    4bd6:	14 96       	adiw	r26, 0x04	; 4
    4bd8:	8d 93       	st	X+, r24
    4bda:	9c 93       	st	X, r25
    4bdc:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    4bde:	1e 96       	adiw	r26, 0x0e	; 14
    4be0:	ed 91       	ld	r30, X+
    4be2:	fc 91       	ld	r31, X
    4be4:	1f 97       	sbiw	r26, 0x0f	; 15
    4be6:	8f 2d       	mov	r24, r15
    4be8:	9e 2d       	mov	r25, r14
    4bea:	9c 01       	movw	r18, r24
    4bec:	b3 e0       	ldi	r27, 0x03	; 3
    4bee:	22 0f       	add	r18, r18
    4bf0:	33 1f       	adc	r19, r19
    4bf2:	ba 95       	dec	r27
    4bf4:	e1 f7       	brne	.-8      	; 0x4bee <st_execute_move+0x1ae>
    4bf6:	88 0f       	add	r24, r24
    4bf8:	99 1f       	adc	r25, r25
    4bfa:	28 0f       	add	r18, r24
    4bfc:	39 1f       	adc	r19, r25
    4bfe:	42 0f       	add	r20, r18
    4c00:	53 1f       	adc	r21, r19
    4c02:	da 01       	movw	r26, r20
    4c04:	14 96       	adiw	r26, 0x04	; 4
    4c06:	8d 91       	ld	r24, X+
    4c08:	9c 91       	ld	r25, X
    4c0a:	15 97       	sbiw	r26, 0x05	; 5
    4c0c:	86 a3       	std	Z+38, r24	; 0x26
    4c0e:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4c10:	db 01       	movw	r26, r22
    4c12:	1c 96       	adiw	r26, 0x0c	; 12
    4c14:	ed 91       	ld	r30, X+
    4c16:	fc 91       	ld	r31, X
    4c18:	1d 97       	sbiw	r26, 0x0d	; 13
    4c1a:	c6 82       	std	Z+6, r12	; 0x06
    4c1c:	0f 5f       	subi	r16, 0xFF	; 255
    4c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c20:	60 5f       	subi	r22, 0xF0	; 240
    4c22:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    4c24:	03 30       	cpi	r16, 0x03	; 3
    4c26:	11 05       	cpc	r17, r1
    4c28:	09 f0       	breq	.+2      	; 0x4c2c <st_execute_move+0x1ec>
    4c2a:	30 cf       	rjmp	.-416    	; 0x4a8c <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4c2c:	10 92 2a 26 	sts	0x262A, r1
	if (ax.a[X].step_counter) { 
    4c30:	80 91 2d 26 	lds	r24, 0x262D
    4c34:	90 91 2e 26 	lds	r25, 0x262E
    4c38:	a0 91 2f 26 	lds	r26, 0x262F
    4c3c:	b0 91 30 26 	lds	r27, 0x2630
    4c40:	00 97       	sbiw	r24, 0x00	; 0
    4c42:	a1 05       	cpc	r26, r1
    4c44:	b1 05       	cpc	r27, r1
    4c46:	59 f0       	breq	.+22     	; 0x4c5e <st_execute_move+0x21e>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    4c48:	e0 91 3b 26 	lds	r30, 0x263B
    4c4c:	f0 91 3c 26 	lds	r31, 0x263C
    4c50:	81 e0       	ldi	r24, 0x01	; 1
    4c52:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4c54:	80 91 2a 26 	lds	r24, 0x262A
    4c58:	88 60       	ori	r24, 0x08	; 8
    4c5a:	80 93 2a 26 	sts	0x262A, r24
	}
	if (ax.a[Y].step_counter) {
    4c5e:	80 91 3d 26 	lds	r24, 0x263D
    4c62:	90 91 3e 26 	lds	r25, 0x263E
    4c66:	a0 91 3f 26 	lds	r26, 0x263F
    4c6a:	b0 91 40 26 	lds	r27, 0x2640
    4c6e:	00 97       	sbiw	r24, 0x00	; 0
    4c70:	a1 05       	cpc	r26, r1
    4c72:	b1 05       	cpc	r27, r1
    4c74:	59 f0       	breq	.+22     	; 0x4c8c <st_execute_move+0x24c>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4c76:	e0 91 4b 26 	lds	r30, 0x264B
    4c7a:	f0 91 4c 26 	lds	r31, 0x264C
    4c7e:	81 e0       	ldi	r24, 0x01	; 1
    4c80:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4c82:	80 91 2a 26 	lds	r24, 0x262A
    4c86:	84 60       	ori	r24, 0x04	; 4
    4c88:	80 93 2a 26 	sts	0x262A, r24
	}
	if (ax.a[Z].step_counter) {
    4c8c:	80 91 4d 26 	lds	r24, 0x264D
    4c90:	90 91 4e 26 	lds	r25, 0x264E
    4c94:	a0 91 4f 26 	lds	r26, 0x264F
    4c98:	b0 91 50 26 	lds	r27, 0x2650
    4c9c:	00 97       	sbiw	r24, 0x00	; 0
    4c9e:	a1 05       	cpc	r26, r1
    4ca0:	b1 05       	cpc	r27, r1
    4ca2:	59 f0       	breq	.+22     	; 0x4cba <st_execute_move+0x27a>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4ca4:	e0 91 5b 26 	lds	r30, 0x265B
    4ca8:	f0 91 5c 26 	lds	r31, 0x265C
    4cac:	81 e0       	ldi	r24, 0x01	; 1
    4cae:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4cb0:	80 91 2a 26 	lds	r24, 0x262A
    4cb4:	82 60       	ori	r24, 0x02	; 2
    4cb6:	80 93 2a 26 	sts	0x262A, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4cba:	10 92 29 26 	sts	0x2629, r1
}
    4cbe:	df 91       	pop	r29
    4cc0:	cf 91       	pop	r28
    4cc2:	1f 91       	pop	r17
    4cc4:	0f 91       	pop	r16
    4cc6:	ff 90       	pop	r15
    4cc8:	ef 90       	pop	r14
    4cca:	df 90       	pop	r13
    4ccc:	cf 90       	pop	r12
    4cce:	08 95       	ret

00004cd0 <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4cd0:	10 92 29 26 	sts	0x2629, r1
	st_execute_move();		// recursively empty the move queue
    4cd4:	0e 94 20 25 	call	0x4a40	; 0x4a40 <st_execute_move>
	return;
}
    4cd8:	08 95       	ret

00004cda <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4cda:	1f 92       	push	r1
    4cdc:	0f 92       	push	r0
    4cde:	0f b6       	in	r0, 0x3f	; 63
    4ce0:	0f 92       	push	r0
    4ce2:	0b b6       	in	r0, 0x3b	; 59
    4ce4:	0f 92       	push	r0
    4ce6:	11 24       	eor	r1, r1
    4ce8:	2f 93       	push	r18
    4cea:	3f 93       	push	r19
    4cec:	4f 93       	push	r20
    4cee:	5f 93       	push	r21
    4cf0:	6f 93       	push	r22
    4cf2:	7f 93       	push	r23
    4cf4:	8f 93       	push	r24
    4cf6:	9f 93       	push	r25
    4cf8:	af 93       	push	r26
    4cfa:	bf 93       	push	r27
    4cfc:	ef 93       	push	r30
    4cfe:	ff 93       	push	r31
	if (--ax.a[A].postscale_counter != 0) {
    4d00:	80 91 65 26 	lds	r24, 0x2665
    4d04:	90 91 66 26 	lds	r25, 0x2666
    4d08:	01 97       	sbiw	r24, 0x01	; 1
    4d0a:	80 93 65 26 	sts	0x2665, r24
    4d0e:	90 93 66 26 	sts	0x2666, r25
    4d12:	89 2b       	or	r24, r25
    4d14:	a1 f5       	brne	.+104    	; 0x4d7e <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4d16:	e0 e6       	ldi	r30, 0x60	; 96
    4d18:	f6 e0       	ldi	r31, 0x06	; 6
    4d1a:	81 e0       	ldi	r24, 0x01	; 1
    4d1c:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    4d1e:	80 91 5d 26 	lds	r24, 0x265D
    4d22:	90 91 5e 26 	lds	r25, 0x265E
    4d26:	a0 91 5f 26 	lds	r26, 0x265F
    4d2a:	b0 91 60 26 	lds	r27, 0x2660
    4d2e:	01 97       	sbiw	r24, 0x01	; 1
    4d30:	a1 09       	sbc	r26, r1
    4d32:	b1 09       	sbc	r27, r1
    4d34:	80 93 5d 26 	sts	0x265D, r24
    4d38:	90 93 5e 26 	sts	0x265E, r25
    4d3c:	a0 93 5f 26 	sts	0x265F, r26
    4d40:	b0 93 60 26 	sts	0x2660, r27
    4d44:	00 97       	sbiw	r24, 0x00	; 0
    4d46:	a1 05       	cpc	r26, r1
    4d48:	b1 05       	cpc	r27, r1
    4d4a:	69 f4       	brne	.+26     	; 0x4d66 <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4d4c:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4d50:	84 e0       	ldi	r24, 0x04	; 4
    4d52:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4d54:	80 91 2a 26 	lds	r24, 0x262A
    4d58:	8e 7f       	andi	r24, 0xFE	; 254
    4d5a:	80 93 2a 26 	sts	0x262A, r24
		if (ax.active_axes == 0) {
    4d5e:	88 23       	and	r24, r24
    4d60:	11 f4       	brne	.+4      	; 0x4d66 <__vector_108+0x8c>
			st_execute_move();
    4d62:	0e 94 20 25 	call	0x4a40	; 0x4a40 <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    4d66:	80 91 63 26 	lds	r24, 0x2663
    4d6a:	90 91 64 26 	lds	r25, 0x2664
    4d6e:	80 93 65 26 	sts	0x2665, r24
    4d72:	90 93 66 26 	sts	0x2666, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4d76:	81 e0       	ldi	r24, 0x01	; 1
    4d78:	e0 e6       	ldi	r30, 0x60	; 96
    4d7a:	f6 e0       	ldi	r31, 0x06	; 6
    4d7c:	86 83       	std	Z+6, r24	; 0x06
}
    4d7e:	ff 91       	pop	r31
    4d80:	ef 91       	pop	r30
    4d82:	bf 91       	pop	r27
    4d84:	af 91       	pop	r26
    4d86:	9f 91       	pop	r25
    4d88:	8f 91       	pop	r24
    4d8a:	7f 91       	pop	r23
    4d8c:	6f 91       	pop	r22
    4d8e:	5f 91       	pop	r21
    4d90:	4f 91       	pop	r20
    4d92:	3f 91       	pop	r19
    4d94:	2f 91       	pop	r18
    4d96:	0f 90       	pop	r0
    4d98:	0b be       	out	0x3b, r0	; 59
    4d9a:	0f 90       	pop	r0
    4d9c:	0f be       	out	0x3f, r0	; 63
    4d9e:	0f 90       	pop	r0
    4da0:	1f 90       	pop	r1
    4da2:	18 95       	reti

00004da4 <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4da4:	1f 92       	push	r1
    4da6:	0f 92       	push	r0
    4da8:	0f b6       	in	r0, 0x3f	; 63
    4daa:	0f 92       	push	r0
    4dac:	0b b6       	in	r0, 0x3b	; 59
    4dae:	0f 92       	push	r0
    4db0:	11 24       	eor	r1, r1
    4db2:	2f 93       	push	r18
    4db4:	3f 93       	push	r19
    4db6:	4f 93       	push	r20
    4db8:	5f 93       	push	r21
    4dba:	6f 93       	push	r22
    4dbc:	7f 93       	push	r23
    4dbe:	8f 93       	push	r24
    4dc0:	9f 93       	push	r25
    4dc2:	af 93       	push	r26
    4dc4:	bf 93       	push	r27
    4dc6:	ef 93       	push	r30
    4dc8:	ff 93       	push	r31
	if (--ax.a[Z].postscale_counter != 0) {
    4dca:	80 91 55 26 	lds	r24, 0x2655
    4dce:	90 91 56 26 	lds	r25, 0x2656
    4dd2:	01 97       	sbiw	r24, 0x01	; 1
    4dd4:	80 93 55 26 	sts	0x2655, r24
    4dd8:	90 93 56 26 	sts	0x2656, r25
    4ddc:	89 2b       	or	r24, r25
    4dde:	a1 f5       	brne	.+104    	; 0x4e48 <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4de0:	e0 e8       	ldi	r30, 0x80	; 128
    4de2:	f6 e0       	ldi	r31, 0x06	; 6
    4de4:	81 e0       	ldi	r24, 0x01	; 1
    4de6:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    4de8:	80 91 4d 26 	lds	r24, 0x264D
    4dec:	90 91 4e 26 	lds	r25, 0x264E
    4df0:	a0 91 4f 26 	lds	r26, 0x264F
    4df4:	b0 91 50 26 	lds	r27, 0x2650
    4df8:	01 97       	sbiw	r24, 0x01	; 1
    4dfa:	a1 09       	sbc	r26, r1
    4dfc:	b1 09       	sbc	r27, r1
    4dfe:	80 93 4d 26 	sts	0x264D, r24
    4e02:	90 93 4e 26 	sts	0x264E, r25
    4e06:	a0 93 4f 26 	sts	0x264F, r26
    4e0a:	b0 93 50 26 	sts	0x2650, r27
    4e0e:	00 97       	sbiw	r24, 0x00	; 0
    4e10:	a1 05       	cpc	r26, r1
    4e12:	b1 05       	cpc	r27, r1
    4e14:	69 f4       	brne	.+26     	; 0x4e30 <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4e16:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4e1a:	84 e0       	ldi	r24, 0x04	; 4
    4e1c:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4e1e:	80 91 2a 26 	lds	r24, 0x262A
    4e22:	8d 7f       	andi	r24, 0xFD	; 253
    4e24:	80 93 2a 26 	sts	0x262A, r24
		if (ax.active_axes == 0) {
    4e28:	88 23       	and	r24, r24
    4e2a:	11 f4       	brne	.+4      	; 0x4e30 <__vector_47+0x8c>
			st_execute_move();
    4e2c:	0e 94 20 25 	call	0x4a40	; 0x4a40 <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    4e30:	80 91 53 26 	lds	r24, 0x2653
    4e34:	90 91 54 26 	lds	r25, 0x2654
    4e38:	80 93 55 26 	sts	0x2655, r24
    4e3c:	90 93 56 26 	sts	0x2656, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4e40:	81 e0       	ldi	r24, 0x01	; 1
    4e42:	e0 e8       	ldi	r30, 0x80	; 128
    4e44:	f6 e0       	ldi	r31, 0x06	; 6
    4e46:	86 83       	std	Z+6, r24	; 0x06
}
    4e48:	ff 91       	pop	r31
    4e4a:	ef 91       	pop	r30
    4e4c:	bf 91       	pop	r27
    4e4e:	af 91       	pop	r26
    4e50:	9f 91       	pop	r25
    4e52:	8f 91       	pop	r24
    4e54:	7f 91       	pop	r23
    4e56:	6f 91       	pop	r22
    4e58:	5f 91       	pop	r21
    4e5a:	4f 91       	pop	r20
    4e5c:	3f 91       	pop	r19
    4e5e:	2f 91       	pop	r18
    4e60:	0f 90       	pop	r0
    4e62:	0b be       	out	0x3b, r0	; 59
    4e64:	0f 90       	pop	r0
    4e66:	0f be       	out	0x3f, r0	; 63
    4e68:	0f 90       	pop	r0
    4e6a:	1f 90       	pop	r1
    4e6c:	18 95       	reti

00004e6e <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4e6e:	1f 92       	push	r1
    4e70:	0f 92       	push	r0
    4e72:	0f b6       	in	r0, 0x3f	; 63
    4e74:	0f 92       	push	r0
    4e76:	0b b6       	in	r0, 0x3b	; 59
    4e78:	0f 92       	push	r0
    4e7a:	11 24       	eor	r1, r1
    4e7c:	2f 93       	push	r18
    4e7e:	3f 93       	push	r19
    4e80:	4f 93       	push	r20
    4e82:	5f 93       	push	r21
    4e84:	6f 93       	push	r22
    4e86:	7f 93       	push	r23
    4e88:	8f 93       	push	r24
    4e8a:	9f 93       	push	r25
    4e8c:	af 93       	push	r26
    4e8e:	bf 93       	push	r27
    4e90:	ef 93       	push	r30
    4e92:	ff 93       	push	r31
	if (--ax.a[Y].postscale_counter != 0) {
    4e94:	80 91 45 26 	lds	r24, 0x2645
    4e98:	90 91 46 26 	lds	r25, 0x2646
    4e9c:	01 97       	sbiw	r24, 0x01	; 1
    4e9e:	80 93 45 26 	sts	0x2645, r24
    4ea2:	90 93 46 26 	sts	0x2646, r25
    4ea6:	89 2b       	or	r24, r25
    4ea8:	a1 f5       	brne	.+104    	; 0x4f12 <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4eaa:	e0 ea       	ldi	r30, 0xA0	; 160
    4eac:	f6 e0       	ldi	r31, 0x06	; 6
    4eae:	81 e0       	ldi	r24, 0x01	; 1
    4eb0:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    4eb2:	80 91 3d 26 	lds	r24, 0x263D
    4eb6:	90 91 3e 26 	lds	r25, 0x263E
    4eba:	a0 91 3f 26 	lds	r26, 0x263F
    4ebe:	b0 91 40 26 	lds	r27, 0x2640
    4ec2:	01 97       	sbiw	r24, 0x01	; 1
    4ec4:	a1 09       	sbc	r26, r1
    4ec6:	b1 09       	sbc	r27, r1
    4ec8:	80 93 3d 26 	sts	0x263D, r24
    4ecc:	90 93 3e 26 	sts	0x263E, r25
    4ed0:	a0 93 3f 26 	sts	0x263F, r26
    4ed4:	b0 93 40 26 	sts	0x2640, r27
    4ed8:	00 97       	sbiw	r24, 0x00	; 0
    4eda:	a1 05       	cpc	r26, r1
    4edc:	b1 05       	cpc	r27, r1
    4ede:	69 f4       	brne	.+26     	; 0x4efa <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4ee0:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4ee4:	84 e0       	ldi	r24, 0x04	; 4
    4ee6:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4ee8:	80 91 2a 26 	lds	r24, 0x262A
    4eec:	8b 7f       	andi	r24, 0xFB	; 251
    4eee:	80 93 2a 26 	sts	0x262A, r24
		if (ax.active_axes == 0) {
    4ef2:	88 23       	and	r24, r24
    4ef4:	11 f4       	brne	.+4      	; 0x4efa <__vector_77+0x8c>
			st_execute_move();
    4ef6:	0e 94 20 25 	call	0x4a40	; 0x4a40 <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    4efa:	80 91 43 26 	lds	r24, 0x2643
    4efe:	90 91 44 26 	lds	r25, 0x2644
    4f02:	80 93 45 26 	sts	0x2645, r24
    4f06:	90 93 46 26 	sts	0x2646, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4f0a:	81 e0       	ldi	r24, 0x01	; 1
    4f0c:	e0 ea       	ldi	r30, 0xA0	; 160
    4f0e:	f6 e0       	ldi	r31, 0x06	; 6
    4f10:	86 83       	std	Z+6, r24	; 0x06
}
    4f12:	ff 91       	pop	r31
    4f14:	ef 91       	pop	r30
    4f16:	bf 91       	pop	r27
    4f18:	af 91       	pop	r26
    4f1a:	9f 91       	pop	r25
    4f1c:	8f 91       	pop	r24
    4f1e:	7f 91       	pop	r23
    4f20:	6f 91       	pop	r22
    4f22:	5f 91       	pop	r21
    4f24:	4f 91       	pop	r20
    4f26:	3f 91       	pop	r19
    4f28:	2f 91       	pop	r18
    4f2a:	0f 90       	pop	r0
    4f2c:	0b be       	out	0x3b, r0	; 59
    4f2e:	0f 90       	pop	r0
    4f30:	0f be       	out	0x3f, r0	; 63
    4f32:	0f 90       	pop	r0
    4f34:	1f 90       	pop	r1
    4f36:	18 95       	reti

00004f38 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4f38:	1f 92       	push	r1
    4f3a:	0f 92       	push	r0
    4f3c:	0f b6       	in	r0, 0x3f	; 63
    4f3e:	0f 92       	push	r0
    4f40:	0b b6       	in	r0, 0x3b	; 59
    4f42:	0f 92       	push	r0
    4f44:	11 24       	eor	r1, r1
    4f46:	2f 93       	push	r18
    4f48:	3f 93       	push	r19
    4f4a:	4f 93       	push	r20
    4f4c:	5f 93       	push	r21
    4f4e:	6f 93       	push	r22
    4f50:	7f 93       	push	r23
    4f52:	8f 93       	push	r24
    4f54:	9f 93       	push	r25
    4f56:	af 93       	push	r26
    4f58:	bf 93       	push	r27
    4f5a:	ef 93       	push	r30
    4f5c:	ff 93       	push	r31
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    4f5e:	80 91 35 26 	lds	r24, 0x2635
    4f62:	90 91 36 26 	lds	r25, 0x2636
    4f66:	01 97       	sbiw	r24, 0x01	; 1
    4f68:	80 93 35 26 	sts	0x2635, r24
    4f6c:	90 93 36 26 	sts	0x2636, r25
    4f70:	89 2b       	or	r24, r25
    4f72:	d1 f5       	brne	.+116    	; 0x4fe8 <__vector_14+0xb0>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    4f74:	80 91 38 26 	lds	r24, 0x2638
    4f78:	88 23       	and	r24, r24
    4f7a:	21 f4       	brne	.+8      	; 0x4f84 <__vector_14+0x4c>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    4f7c:	81 e0       	ldi	r24, 0x01	; 1
    4f7e:	e0 e0       	ldi	r30, 0x00	; 0
    4f80:	f6 e0       	ldi	r31, 0x06	; 6
    4f82:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    4f84:	80 91 2d 26 	lds	r24, 0x262D
    4f88:	90 91 2e 26 	lds	r25, 0x262E
    4f8c:	a0 91 2f 26 	lds	r26, 0x262F
    4f90:	b0 91 30 26 	lds	r27, 0x2630
    4f94:	01 97       	sbiw	r24, 0x01	; 1
    4f96:	a1 09       	sbc	r26, r1
    4f98:	b1 09       	sbc	r27, r1
    4f9a:	80 93 2d 26 	sts	0x262D, r24
    4f9e:	90 93 2e 26 	sts	0x262E, r25
    4fa2:	a0 93 2f 26 	sts	0x262F, r26
    4fa6:	b0 93 30 26 	sts	0x2630, r27
    4faa:	00 97       	sbiw	r24, 0x00	; 0
    4fac:	a1 05       	cpc	r26, r1
    4fae:	b1 05       	cpc	r27, r1
    4fb0:	79 f4       	brne	.+30     	; 0x4fd0 <__vector_14+0x98>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    4fb2:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4fb6:	84 e0       	ldi	r24, 0x04	; 4
    4fb8:	e0 e0       	ldi	r30, 0x00	; 0
    4fba:	f6 e0       	ldi	r31, 0x06	; 6
    4fbc:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    4fbe:	80 91 2a 26 	lds	r24, 0x262A
    4fc2:	87 7f       	andi	r24, 0xF7	; 247
    4fc4:	80 93 2a 26 	sts	0x262A, r24
		if (ax.active_axes == 0) {				// if all axes are done
    4fc8:	88 23       	and	r24, r24
    4fca:	11 f4       	brne	.+4      	; 0x4fd0 <__vector_14+0x98>
			st_execute_move();					// ...run the next move
    4fcc:	0e 94 20 25 	call	0x4a40	; 0x4a40 <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    4fd0:	80 91 33 26 	lds	r24, 0x2633
    4fd4:	90 91 34 26 	lds	r25, 0x2634
    4fd8:	80 93 35 26 	sts	0x2635, r24
    4fdc:	90 93 36 26 	sts	0x2636, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    4fe0:	81 e0       	ldi	r24, 0x01	; 1
    4fe2:	e0 e0       	ldi	r30, 0x00	; 0
    4fe4:	f6 e0       	ldi	r31, 0x06	; 6
    4fe6:	86 83       	std	Z+6, r24	; 0x06
}
    4fe8:	ff 91       	pop	r31
    4fea:	ef 91       	pop	r30
    4fec:	bf 91       	pop	r27
    4fee:	af 91       	pop	r26
    4ff0:	9f 91       	pop	r25
    4ff2:	8f 91       	pop	r24
    4ff4:	7f 91       	pop	r23
    4ff6:	6f 91       	pop	r22
    4ff8:	5f 91       	pop	r21
    4ffa:	4f 91       	pop	r20
    4ffc:	3f 91       	pop	r19
    4ffe:	2f 91       	pop	r18
    5000:	0f 90       	pop	r0
    5002:	0b be       	out	0x3b, r0	; 59
    5004:	0f 90       	pop	r0
    5006:	0f be       	out	0x3f, r0	; 63
    5008:	0f 90       	pop	r0
    500a:	1f 90       	pop	r1
    500c:	18 95       	reti

0000500e <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    500e:	e0 ea       	ldi	r30, 0xA0	; 160
    5010:	f0 e0       	ldi	r31, 0x00	; 0
    5012:	82 81       	ldd	r24, Z+2	; 0x02
    5014:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    5016:	98 ed       	ldi	r25, 0xD8	; 216
    5018:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    501a:	82 83       	std	Z+2, r24	; 0x02
}
    501c:	08 95       	ret

0000501e <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    501e:	e0 ea       	ldi	r30, 0xA0	; 160
    5020:	f0 e0       	ldi	r31, 0x00	; 0
    5022:	82 81       	ldd	r24, Z+2	; 0x02
    5024:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    5026:	98 ed       	ldi	r25, 0xD8	; 216
    5028:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    502a:	82 83       	std	Z+2, r24	; 0x02
}
    502c:	08 95       	ret

0000502e <xio_fget_ln>:
 *	dev		XIO device enumeration
 */

int xio_fget_ln(uint8_t dev, char *buf, uint8_t len)
{
	switch (dev) {
    502e:	81 30       	cpi	r24, 0x01	; 1
    5030:	61 f0       	breq	.+24     	; 0x504a <xio_fget_ln+0x1c>
    5032:	81 30       	cpi	r24, 0x01	; 1
    5034:	38 f0       	brcs	.+14     	; 0x5044 <xio_fget_ln+0x16>
    5036:	82 30       	cpi	r24, 0x02	; 2
    5038:	69 f0       	breq	.+26     	; 0x5054 <xio_fget_ln+0x26>
    503a:	84 30       	cpi	r24, 0x04	; 4
    503c:	81 f0       	breq	.+32     	; 0x505e <xio_fget_ln+0x30>
    503e:	20 e1       	ldi	r18, 0x10	; 16
    5040:	30 e0       	ldi	r19, 0x00	; 0
    5042:	12 c0       	rjmp	.+36     	; 0x5068 <xio_fget_ln+0x3a>
    5044:	20 e0       	ldi	r18, 0x00	; 0
    5046:	30 e0       	ldi	r19, 0x00	; 0
    5048:	0f c0       	rjmp	.+30     	; 0x5068 <xio_fget_ln+0x3a>
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): return (xio_usb_readln(buf, len));
    504a:	cb 01       	movw	r24, r22
    504c:	64 2f       	mov	r22, r20
    504e:	0e 94 0f 2b 	call	0x561e	; 0x561e <xio_usb_readln>
    5052:	09 c0       	rjmp	.+18     	; 0x5066 <xio_fget_ln+0x38>
		case (XIO_DEV_RS485): return (xio_rs485_readln(buf, len));
    5054:	cb 01       	movw	r24, r22
    5056:	64 2f       	mov	r22, r20
    5058:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <xio_rs485_readln>
    505c:	04 c0       	rjmp	.+8      	; 0x5066 <xio_fget_ln+0x38>
//		case (XIO_DEV_AUX): return (xio_aux_readln(buf, len));
		case (XIO_DEV_PGM): return (xio_pgm_readln(buf, len));
    505e:	cb 01       	movw	r24, r22
    5060:	64 2f       	mov	r22, r20
    5062:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <xio_pgm_readln>
    5066:	9c 01       	movw	r18, r24
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    5068:	c9 01       	movw	r24, r18
    506a:	08 95       	ret

0000506c <xio_control>:
 * xio_control() - common entry point for device control functions
 */

int8_t xio_control(uint8_t dev, const uint16_t control, const int16_t arg)
{
	switch (dev) {
    506c:	81 30       	cpi	r24, 0x01	; 1
    506e:	51 f0       	breq	.+20     	; 0x5084 <xio_control+0x18>
    5070:	81 30       	cpi	r24, 0x01	; 1
    5072:	30 f0       	brcs	.+12     	; 0x5080 <xio_control+0x14>
    5074:	82 30       	cpi	r24, 0x02	; 2
    5076:	59 f0       	breq	.+22     	; 0x508e <xio_control+0x22>
    5078:	84 30       	cpi	r24, 0x04	; 4
    507a:	71 f0       	breq	.+28     	; 0x5098 <xio_control+0x2c>
    507c:	80 e1       	ldi	r24, 0x10	; 16
    507e:	08 95       	ret
    5080:	80 e0       	ldi	r24, 0x00	; 0
    5082:	08 95       	ret
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): return (xio_usb_control(control, arg));
    5084:	cb 01       	movw	r24, r22
    5086:	ba 01       	movw	r22, r20
    5088:	0e 94 4e 29 	call	0x529c	; 0x529c <xio_usb_control>
    508c:	08 95       	ret
		case (XIO_DEV_RS485): return (xio_rs485_control(control, arg));
    508e:	cb 01       	movw	r24, r22
    5090:	ba 01       	movw	r22, r20
    5092:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <xio_rs485_control>
    5096:	08 95       	ret
//		case (XIO_DEV_AUX): return (xio_aux_control(control, arg));
		case (XIO_DEV_PGM): return (xio_pgm_control(control, arg));
    5098:	cb 01       	movw	r24, r22
    509a:	ba 01       	movw	r22, r20
    509c:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <xio_pgm_control>
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    50a0:	08 95       	ret

000050a2 <xio_dev_init>:
 * xio_dev_init() - common entry point for device init functions
 */

int8_t xio_dev_init(uint8_t dev, const int16_t arg)
{
	switch (dev) {
    50a2:	81 30       	cpi	r24, 0x01	; 1
    50a4:	41 f0       	breq	.+16     	; 0x50b6 <xio_dev_init+0x14>
    50a6:	81 30       	cpi	r24, 0x01	; 1
    50a8:	68 f0       	brcs	.+26     	; 0x50c4 <xio_dev_init+0x22>
    50aa:	82 30       	cpi	r24, 0x02	; 2
    50ac:	41 f0       	breq	.+16     	; 0x50be <xio_dev_init+0x1c>
    50ae:	84 30       	cpi	r24, 0x04	; 4
    50b0:	59 f0       	breq	.+22     	; 0x50c8 <xio_dev_init+0x26>
    50b2:	80 e1       	ldi	r24, 0x10	; 16
    50b4:	08 95       	ret
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): xio_usb_init(arg); return (TG_OK);
    50b6:	cb 01       	movw	r24, r22
    50b8:	0e 94 94 28 	call	0x5128	; 0x5128 <xio_usb_init>
    50bc:	03 c0       	rjmp	.+6      	; 0x50c4 <xio_dev_init+0x22>
		case (XIO_DEV_RS485): xio_rs485_init(arg); return (TG_OK);
    50be:	cb 01       	movw	r24, r22
    50c0:	0e 94 19 34 	call	0x6832	; 0x6832 <xio_rs485_init>
    50c4:	80 e0       	ldi	r24, 0x00	; 0
    50c6:	08 95       	ret
//		case (XIO_DEV_AUX): xio_aux_init(arg); return (TG_OK);
		case (XIO_DEV_PGM): xio_pgm_init(arg); return (TG_OK);
    50c8:	cb 01       	movw	r24, r22
    50ca:	0e 94 3e 2e 	call	0x5c7c	; 0x5c7c <xio_pgm_init>
    50ce:	80 e0       	ldi	r24, 0x00	; 0
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    50d0:	08 95       	ret

000050d2 <xio_init>:
 */

void xio_init(void)
{	
	// USB port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_SEMICOLONS | XIO_BAUD_115200);
    50d2:	85 e0       	ldi	r24, 0x05	; 5
    50d4:	90 e5       	ldi	r25, 0x50	; 80
    50d6:	0e 94 94 28 	call	0x5128	; 0x5128 <xio_usb_init>

	// RS485 port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_BAUD_115200);
    50da:	85 e0       	ldi	r24, 0x05	; 5
    50dc:	90 e1       	ldi	r25, 0x10	; 16
    50de:	0e 94 94 28 	call	0x5128	; 0x5128 <xio_usb_init>

	// PGM file defaults are:	XIO_RD | XIO_BLOCK
//	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE | XIO_SEMICOLONS);
	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE);
    50e2:	80 e0       	ldi	r24, 0x00	; 0
    50e4:	95 e1       	ldi	r25, 0x15	; 21
    50e6:	0e 94 3e 2e 	call	0x5c7c	; 0x5c7c <xio_pgm_init>
//	xio_pgm_init(XIO_LINEMODE);

	stddev = &dev_usb;				// stddev is a convenience
    50ea:	80 e0       	ldi	r24, 0x00	; 0
    50ec:	90 e2       	ldi	r25, 0x20	; 32
    50ee:	80 93 db 26 	sts	0x26DB, r24
    50f2:	90 93 dc 26 	sts	0x26DC, r25
	stdin = &dev_usb;				// define the console device
    50f6:	80 93 35 27 	sts	0x2735, r24
    50fa:	90 93 36 27 	sts	0x2736, r25
	stdout = &dev_usb;				// ...
    50fe:	80 93 37 27 	sts	0x2737, r24
    5102:	90 93 38 27 	sts	0x2738, r25
	stderr = &dev_usb;				// ...
    5106:	80 93 39 27 	sts	0x2739, r24
    510a:	90 93 3a 27 	sts	0x273A, r25

	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    510e:	0f 92       	push	r0
    5110:	0f 92       	push	r0
    5112:	8a e3       	ldi	r24, 0x3A	; 58
    5114:	97 e0       	ldi	r25, 0x07	; 7
    5116:	ed b7       	in	r30, 0x3d	; 61
    5118:	fe b7       	in	r31, 0x3e	; 62
    511a:	81 83       	std	Z+1, r24	; 0x01
    511c:	92 83       	std	Z+2, r25	; 0x02
    511e:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
    5122:	0f 90       	pop	r0
    5124:	0f 90       	pop	r0
}
    5126:	08 95       	ret

00005128 <xio_usb_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_usb_init(const uint16_t control)
{
    5128:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    512a:	e8 2f       	mov	r30, r24
    512c:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	f.flags = XIO_FLAG_USB_DEFS_gm;		// set flags to defaults & initial state
    512e:	87 e3       	ldi	r24, 0x37	; 55
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	80 93 ad 21 	sts	0x21AD, r24
    5136:	90 93 ae 21 	sts	0x21AE, r25
		f.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		f.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    513a:	26 ff       	sbrs	r18, 6
    513c:	06 c0       	rjmp	.+12     	; 0x514a <xio_usb_init+0x22>
		f.flags |= XIO_FLAG_BLOCK_bm;
    513e:	87 e3       	ldi	r24, 0x37	; 55
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	80 93 ad 21 	sts	0x21AD, r24
    5146:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOBLOCK) {
    514a:	27 ff       	sbrs	r18, 7
    514c:	06 c0       	rjmp	.+12     	; 0x515a <xio_usb_init+0x32>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    514e:	83 e3       	ldi	r24, 0x33	; 51
    5150:	90 e0       	ldi	r25, 0x00	; 0
    5152:	80 93 ad 21 	sts	0x21AD, r24
    5156:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_ECHO) {
    515a:	30 ff       	sbrs	r19, 0
    515c:	09 c0       	rjmp	.+18     	; 0x5170 <xio_usb_init+0x48>
		f.flags |= XIO_FLAG_ECHO_bm;
    515e:	80 91 ad 21 	lds	r24, 0x21AD
    5162:	90 91 ae 21 	lds	r25, 0x21AE
    5166:	80 61       	ori	r24, 0x10	; 16
    5168:	80 93 ad 21 	sts	0x21AD, r24
    516c:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOECHO) {
    5170:	31 ff       	sbrs	r19, 1
    5172:	09 c0       	rjmp	.+18     	; 0x5186 <xio_usb_init+0x5e>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    5174:	80 91 ad 21 	lds	r24, 0x21AD
    5178:	90 91 ae 21 	lds	r25, 0x21AE
    517c:	8f 7e       	andi	r24, 0xEF	; 239
    517e:	80 93 ad 21 	sts	0x21AD, r24
    5182:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_CRLF) {
    5186:	32 ff       	sbrs	r19, 2
    5188:	09 c0       	rjmp	.+18     	; 0x519c <xio_usb_init+0x74>
		f.flags |= XIO_FLAG_CRLF_bm;
    518a:	80 91 ad 21 	lds	r24, 0x21AD
    518e:	90 91 ae 21 	lds	r25, 0x21AE
    5192:	80 62       	ori	r24, 0x20	; 32
    5194:	80 93 ad 21 	sts	0x21AD, r24
    5198:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOCRLF) {
    519c:	33 ff       	sbrs	r19, 3
    519e:	09 c0       	rjmp	.+18     	; 0x51b2 <xio_usb_init+0x8a>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    51a0:	80 91 ad 21 	lds	r24, 0x21AD
    51a4:	90 91 ae 21 	lds	r25, 0x21AE
    51a8:	8f 7d       	andi	r24, 0xDF	; 223
    51aa:	80 93 ad 21 	sts	0x21AD, r24
    51ae:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_LINEMODE) {
    51b2:	34 ff       	sbrs	r19, 4
    51b4:	09 c0       	rjmp	.+18     	; 0x51c8 <xio_usb_init+0xa0>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    51b6:	80 91 ad 21 	lds	r24, 0x21AD
    51ba:	90 91 ae 21 	lds	r25, 0x21AE
    51be:	80 64       	ori	r24, 0x40	; 64
    51c0:	80 93 ad 21 	sts	0x21AD, r24
    51c4:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOLINEMODE) {
    51c8:	35 ff       	sbrs	r19, 5
    51ca:	09 c0       	rjmp	.+18     	; 0x51de <xio_usb_init+0xb6>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    51cc:	80 91 ad 21 	lds	r24, 0x21AD
    51d0:	90 91 ae 21 	lds	r25, 0x21AE
    51d4:	8f 7b       	andi	r24, 0xBF	; 191
    51d6:	80 93 ad 21 	sts	0x21AD, r24
    51da:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_SEMICOLONS) {
    51de:	36 ff       	sbrs	r19, 6
    51e0:	09 c0       	rjmp	.+18     	; 0x51f4 <xio_usb_init+0xcc>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    51e2:	80 91 ad 21 	lds	r24, 0x21AD
    51e6:	90 91 ae 21 	lds	r25, 0x21AE
    51ea:	80 68       	ori	r24, 0x80	; 128
    51ec:	80 93 ad 21 	sts	0x21AD, r24
    51f0:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    51f4:	37 ff       	sbrs	r19, 7
    51f6:	09 c0       	rjmp	.+18     	; 0x520a <xio_usb_init+0xe2>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    51f8:	80 91 ad 21 	lds	r24, 0x21AD
    51fc:	90 91 ae 21 	lds	r25, 0x21AE
    5200:	8f 77       	andi	r24, 0x7F	; 127
    5202:	80 93 ad 21 	sts	0x21AD, r24
    5206:	90 93 ae 21 	sts	0x21AE, r25
	}

	// character signals and error returns
	f.sig = 0;
    520a:	10 92 af 21 	sts	0x21AF, r1
	dev_usb.udata = &(f.sig);				// bind sig register to FILE struct
    520e:	8f ea       	ldi	r24, 0xAF	; 175
    5210:	91 e2       	ldi	r25, 0x21	; 33
    5212:	80 93 0c 20 	sts	0x200C, r24
    5216:	90 93 0d 20 	sts	0x200D, r25

	// setup internal RX/TX buffers
	f.rx_buf_head = 1;						// can't use location 0
    521a:	81 e0       	ldi	r24, 0x01	; 1
    521c:	80 93 b6 21 	sts	0x21B6, r24
	f.rx_buf_tail = 1;
    5220:	80 93 b5 21 	sts	0x21B5, r24
	f.tx_buf_head = 1;
    5224:	80 93 b8 21 	sts	0x21B8, r24
	f.tx_buf_tail = 1;
    5228:	80 93 b7 21 	sts	0x21B7, r24
	f.len = sizeof(f.buf);					// offset to zero
    522c:	82 e0       	ldi	r24, 0x02	; 2
    522e:	80 93 b2 21 	sts	0x21B2, r24

	f.usart = &USB_USART;					// bind USART structure
    5232:	80 ea       	ldi	r24, 0xA0	; 160
    5234:	98 e0       	ldi	r25, 0x08	; 8
    5236:	80 93 cb 22 	sts	0x22CB, r24
    523a:	90 93 cc 22 	sts	0x22CC, r25
	f.port = &USB_PORT;						// bind PORT structure
    523e:	80 e4       	ldi	r24, 0x40	; 64
    5240:	96 e0       	ldi	r25, 0x06	; 6
    5242:	80 93 cd 22 	sts	0x22CD, r24
    5246:	90 93 ce 22 	sts	0x22CE, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    524a:	ee 23       	and	r30, r30
    524c:	09 f4       	brne	.+2      	; 0x5250 <xio_usb_init+0x128>
    524e:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    5250:	8e 2f       	mov	r24, r30
    5252:	90 e0       	ldi	r25, 0x00	; 0
    5254:	fc 01       	movw	r30, r24
    5256:	ec 5d       	subi	r30, 0xDC	; 220
    5258:	f8 4f       	sbci	r31, 0xF8	; 248
    525a:	e4 91       	lpm	r30, Z+
    525c:	a0 ea       	ldi	r26, 0xA0	; 160
    525e:	b8 e0       	ldi	r27, 0x08	; 8
    5260:	16 96       	adiw	r26, 0x06	; 6
    5262:	ec 93       	st	X, r30
    5264:	16 97       	sbiw	r26, 0x06	; 6
	f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    5266:	81 5d       	subi	r24, 0xD1	; 209
    5268:	98 4f       	sbci	r25, 0xF8	; 248
    526a:	fc 01       	movw	r30, r24
    526c:	84 91       	lpm	r24, Z+
    526e:	17 96       	adiw	r26, 0x07	; 7
    5270:	8c 93       	st	X, r24
    5272:	17 97       	sbiw	r26, 0x07	; 7
	f.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm; // enable tx and rx on USART
    5274:	88 e1       	ldi	r24, 0x18	; 24
    5276:	14 96       	adiw	r26, 0x04	; 4
    5278:	8c 93       	st	X, r24
    527a:	14 97       	sbiw	r26, 0x04	; 4
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    527c:	81 e2       	ldi	r24, 0x21	; 33
    527e:	13 96       	adiw	r26, 0x03	; 3
    5280:	8c 93       	st	X, r24

	f.port->DIRCLR = USB_RX_bm;	 			// clr RX pin as input
    5282:	e0 e4       	ldi	r30, 0x40	; 64
    5284:	f6 e0       	ldi	r31, 0x06	; 6
    5286:	84 e0       	ldi	r24, 0x04	; 4
    5288:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_TX_bm; 			// set TX pin as output
    528a:	88 e0       	ldi	r24, 0x08	; 8
    528c:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_TX_bm;				// set TX HI as initial state
    528e:	85 83       	std	Z+5, r24	; 0x05
	f.port->DIRCLR = USB_CTS_bm; 			// set CTS pin as input
    5290:	81 e0       	ldi	r24, 0x01	; 1
    5292:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_RTS_bm; 			// set RTS pin as output
    5294:	82 e0       	ldi	r24, 0x02	; 2
    5296:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
    5298:	85 83       	std	Z+5, r24	; 0x05
//	f.port->OUTCLR = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
}
    529a:	08 95       	ret

0000529c <xio_usb_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_usb_control(const uint16_t control, const int16_t arg)
{
    529c:	ac 01       	movw	r20, r24
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    529e:	8f 70       	andi	r24, 0x0F	; 15
    52a0:	90 70       	andi	r25, 0x00	; 0
    52a2:	00 97       	sbiw	r24, 0x00	; 0
    52a4:	91 f0       	breq	.+36     	; 0x52ca <xio_usb_control+0x2e>
		f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    52a6:	a0 91 cb 22 	lds	r26, 0x22CB
    52aa:	b0 91 cc 22 	lds	r27, 0x22CC
    52ae:	9c 01       	movw	r18, r24
    52b0:	2c 5d       	subi	r18, 0xDC	; 220
    52b2:	38 4f       	sbci	r19, 0xF8	; 248
    52b4:	f9 01       	movw	r30, r18
    52b6:	24 91       	lpm	r18, Z+
    52b8:	16 96       	adiw	r26, 0x06	; 6
    52ba:	2c 93       	st	X, r18
    52bc:	16 97       	sbiw	r26, 0x06	; 6
		f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    52be:	81 5d       	subi	r24, 0xD1	; 209
    52c0:	98 4f       	sbci	r25, 0xF8	; 248
    52c2:	fc 01       	movw	r30, r24
    52c4:	84 91       	lpm	r24, Z+
    52c6:	17 96       	adiw	r26, 0x07	; 7
    52c8:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    52ca:	46 ff       	sbrs	r20, 6
    52cc:	09 c0       	rjmp	.+18     	; 0x52e0 <xio_usb_control+0x44>
		f.flags |= XIO_FLAG_BLOCK_bm;
    52ce:	80 91 ad 21 	lds	r24, 0x21AD
    52d2:	90 91 ae 21 	lds	r25, 0x21AE
    52d6:	84 60       	ori	r24, 0x04	; 4
    52d8:	80 93 ad 21 	sts	0x21AD, r24
    52dc:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOBLOCK) {
    52e0:	47 ff       	sbrs	r20, 7
    52e2:	09 c0       	rjmp	.+18     	; 0x52f6 <xio_usb_control+0x5a>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    52e4:	80 91 ad 21 	lds	r24, 0x21AD
    52e8:	90 91 ae 21 	lds	r25, 0x21AE
    52ec:	8b 7f       	andi	r24, 0xFB	; 251
    52ee:	80 93 ad 21 	sts	0x21AD, r24
    52f2:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_ECHO) {
    52f6:	50 ff       	sbrs	r21, 0
    52f8:	09 c0       	rjmp	.+18     	; 0x530c <xio_usb_control+0x70>
		f.flags |= XIO_FLAG_ECHO_bm;
    52fa:	80 91 ad 21 	lds	r24, 0x21AD
    52fe:	90 91 ae 21 	lds	r25, 0x21AE
    5302:	80 61       	ori	r24, 0x10	; 16
    5304:	80 93 ad 21 	sts	0x21AD, r24
    5308:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOECHO) {
    530c:	51 ff       	sbrs	r21, 1
    530e:	09 c0       	rjmp	.+18     	; 0x5322 <xio_usb_control+0x86>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    5310:	80 91 ad 21 	lds	r24, 0x21AD
    5314:	90 91 ae 21 	lds	r25, 0x21AE
    5318:	8f 7e       	andi	r24, 0xEF	; 239
    531a:	80 93 ad 21 	sts	0x21AD, r24
    531e:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_CRLF) {
    5322:	52 ff       	sbrs	r21, 2
    5324:	09 c0       	rjmp	.+18     	; 0x5338 <xio_usb_control+0x9c>
		f.flags |= XIO_FLAG_CRLF_bm;
    5326:	80 91 ad 21 	lds	r24, 0x21AD
    532a:	90 91 ae 21 	lds	r25, 0x21AE
    532e:	80 62       	ori	r24, 0x20	; 32
    5330:	80 93 ad 21 	sts	0x21AD, r24
    5334:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOCRLF) {
    5338:	53 ff       	sbrs	r21, 3
    533a:	09 c0       	rjmp	.+18     	; 0x534e <xio_usb_control+0xb2>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    533c:	80 91 ad 21 	lds	r24, 0x21AD
    5340:	90 91 ae 21 	lds	r25, 0x21AE
    5344:	8f 7d       	andi	r24, 0xDF	; 223
    5346:	80 93 ad 21 	sts	0x21AD, r24
    534a:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_LINEMODE) {
    534e:	54 ff       	sbrs	r21, 4
    5350:	09 c0       	rjmp	.+18     	; 0x5364 <xio_usb_control+0xc8>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    5352:	80 91 ad 21 	lds	r24, 0x21AD
    5356:	90 91 ae 21 	lds	r25, 0x21AE
    535a:	80 64       	ori	r24, 0x40	; 64
    535c:	80 93 ad 21 	sts	0x21AD, r24
    5360:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOLINEMODE) {
    5364:	55 ff       	sbrs	r21, 5
    5366:	09 c0       	rjmp	.+18     	; 0x537a <xio_usb_control+0xde>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    5368:	80 91 ad 21 	lds	r24, 0x21AD
    536c:	90 91 ae 21 	lds	r25, 0x21AE
    5370:	8f 7b       	andi	r24, 0xBF	; 191
    5372:	80 93 ad 21 	sts	0x21AD, r24
    5376:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_SEMICOLONS) {
    537a:	56 ff       	sbrs	r21, 6
    537c:	09 c0       	rjmp	.+18     	; 0x5390 <xio_usb_control+0xf4>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    537e:	80 91 ad 21 	lds	r24, 0x21AD
    5382:	90 91 ae 21 	lds	r25, 0x21AE
    5386:	80 68       	ori	r24, 0x80	; 128
    5388:	80 93 ad 21 	sts	0x21AD, r24
    538c:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5390:	57 ff       	sbrs	r21, 7
    5392:	09 c0       	rjmp	.+18     	; 0x53a6 <xio_usb_control+0x10a>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5394:	80 91 ad 21 	lds	r24, 0x21AD
    5398:	90 91 ae 21 	lds	r25, 0x21AE
    539c:	8f 77       	andi	r24, 0x7F	; 127
    539e:	80 93 ad 21 	sts	0x21AD, r24
    53a2:	90 93 ae 21 	sts	0x21AE, r25
	}
	return (0);
}
    53a6:	80 e0       	ldi	r24, 0x00	; 0
    53a8:	08 95       	ret

000053aa <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)		//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    53aa:	1f 92       	push	r1
    53ac:	0f 92       	push	r0
    53ae:	0f b6       	in	r0, 0x3f	; 63
    53b0:	0f 92       	push	r0
    53b2:	0b b6       	in	r0, 0x3b	; 59
    53b4:	0f 92       	push	r0
    53b6:	11 24       	eor	r1, r1
    53b8:	8f 93       	push	r24
    53ba:	9f 93       	push	r25
    53bc:	af 93       	push	r26
    53be:	bf 93       	push	r27
    53c0:	ef 93       	push	r30
    53c2:	ff 93       	push	r31
	if (f.tx_buf_head == f.tx_buf_tail) {			// buffer empty - disable ints
    53c4:	90 91 b8 21 	lds	r25, 0x21B8
    53c8:	80 91 b7 21 	lds	r24, 0x21B7
    53cc:	98 17       	cp	r25, r24
    53ce:	39 f4       	brne	.+14     	; 0x53de <__vector_26+0x34>
		f.usart->CTRLA = USARTC0_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    53d0:	e0 91 cb 22 	lds	r30, 0x22CB
    53d4:	f0 91 cc 22 	lds	r31, 0x22CC
    53d8:	80 e2       	ldi	r24, 0x20	; 32
    53da:	83 83       	std	Z+3, r24	; 0x03
    53dc:	1d c0       	rjmp	.+58     	; 0x5418 <__vector_26+0x6e>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(f.flags)) {
    53de:	80 91 ad 21 	lds	r24, 0x21AD
    53e2:	90 91 ae 21 	lds	r25, 0x21AE
    53e6:	93 fd       	sbrc	r25, 3
    53e8:	17 c0       	rjmp	.+46     	; 0x5418 <__vector_26+0x6e>
		if (--(f.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    53ea:	80 91 b7 21 	lds	r24, 0x21B7
    53ee:	81 50       	subi	r24, 0x01	; 1
    53f0:	80 93 b7 21 	sts	0x21B7, r24
    53f4:	80 91 b7 21 	lds	r24, 0x21B7
    53f8:	88 23       	and	r24, r24
    53fa:	19 f4       	brne	.+6      	; 0x5402 <__vector_26+0x58>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    53fc:	81 e1       	ldi	r24, 0x11	; 17
    53fe:	80 93 b7 21 	sts	0x21B7, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];	// write char to TX DATA register
    5402:	e0 91 cb 22 	lds	r30, 0x22CB
    5406:	f0 91 cc 22 	lds	r31, 0x22CC
    540a:	a0 91 b7 21 	lds	r26, 0x21B7
    540e:	b0 e0       	ldi	r27, 0x00	; 0
    5410:	a7 54       	subi	r26, 0x47	; 71
    5412:	bd 4d       	sbci	r27, 0xDD	; 221
    5414:	8c 91       	ld	r24, X
    5416:	80 83       	st	Z, r24
	}
}
    5418:	ff 91       	pop	r31
    541a:	ef 91       	pop	r30
    541c:	bf 91       	pop	r27
    541e:	af 91       	pop	r26
    5420:	9f 91       	pop	r25
    5422:	8f 91       	pop	r24
    5424:	0f 90       	pop	r0
    5426:	0b be       	out	0x3b, r0	; 59
    5428:	0f 90       	pop	r0
    542a:	0f be       	out	0x3f, r0	; 63
    542c:	0f 90       	pop	r0
    542e:	1f 90       	pop	r1
    5430:	18 95       	reti

00005432 <xio_usb_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
    5432:	48 2f       	mov	r20, r24
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    5434:	20 91 ad 21 	lds	r18, 0x21AD
    5438:	30 91 ae 21 	lds	r19, 0x21AE
    543c:	d9 01       	movw	r26, r18
    543e:	a4 70       	andi	r26, 0x04	; 4
    5440:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    5442:	b9 01       	movw	r22, r18
    5444:	60 72       	andi	r22, 0x20	; 32
    5446:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
    5448:	90 91 b8 21 	lds	r25, 0x21B8
    544c:	91 50       	subi	r25, 0x01	; 1
    544e:	c1 f4       	brne	.+48     	; 0x5480 <xio_usb_putc+0x4e>
    5450:	91 e1       	ldi	r25, 0x11	; 17
    5452:	16 c0       	rjmp	.+44     	; 0x5480 <xio_usb_putc+0x4e>
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    5454:	10 97       	sbiw	r26, 0x00	; 0
    5456:	61 f0       	breq	.+24     	; 0x5470 <xio_usb_putc+0x3e>
			sleep_mode();
    5458:	80 91 48 00 	lds	r24, 0x0048
    545c:	81 60       	ori	r24, 0x01	; 1
    545e:	80 93 48 00 	sts	0x0048, r24
    5462:	88 95       	sleep
    5464:	80 91 48 00 	lds	r24, 0x0048
    5468:	8e 7f       	andi	r24, 0xFE	; 254
    546a:	80 93 48 00 	sts	0x0048, r24
    546e:	08 c0       	rjmp	.+16     	; 0x5480 <xio_usb_putc+0x4e>
    5470:	90 93 b9 21 	sts	0x21B9, r25
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    5474:	83 e0       	ldi	r24, 0x03	; 3
    5476:	80 93 af 21 	sts	0x21AF, r24
    547a:	2f ef       	ldi	r18, 0xFF	; 255
    547c:	3f ef       	ldi	r19, 0xFF	; 255
    547e:	54 c0       	rjmp	.+168    	; 0x5528 <xio_usb_putc+0xf6>
int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
    5480:	80 91 b7 21 	lds	r24, 0x21B7
    5484:	98 17       	cp	r25, r24
    5486:	31 f3       	breq	.-52     	; 0x5454 <xio_usb_putc+0x22>
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
    5488:	90 93 b8 21 	sts	0x21B8, r25
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer
    548c:	e0 91 b8 21 	lds	r30, 0x21B8
    5490:	f0 e0       	ldi	r31, 0x00	; 0
    5492:	e7 54       	subi	r30, 0x47	; 71
    5494:	fd 4d       	sbci	r31, 0xDD	; 221
    5496:	40 83       	st	Z, r20

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    5498:	61 15       	cp	r22, r1
    549a:	71 05       	cpc	r23, r1
    549c:	21 f0       	breq	.+8      	; 0x54a6 <xio_usb_putc+0x74>
    549e:	4a 30       	cpi	r20, 0x0A	; 10
    54a0:	11 f4       	brne	.+4      	; 0x54a6 <xio_usb_putc+0x74>
    54a2:	4d e0       	ldi	r20, 0x0D	; 13
    54a4:	d1 cf       	rjmp	.-94     	; 0x5448 <xio_usb_putc+0x16>
    54a6:	90 93 b9 21 	sts	0x21B9, r25
		return xio_usb_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (f.usart->STATUS & 0x20) {
    54aa:	a0 91 cb 22 	lds	r26, 0x22CB
    54ae:	b0 91 cc 22 	lds	r27, 0x22CC
    54b2:	11 96       	adiw	r26, 0x01	; 1
    54b4:	8c 91       	ld	r24, X
    54b6:	11 97       	sbiw	r26, 0x01	; 1
    54b8:	85 ff       	sbrs	r24, 5
    54ba:	27 c0       	rjmp	.+78     	; 0x550a <xio_usb_putc+0xd8>
		if (f.tx_buf_head == f.tx_buf_tail) {	// buf might be empty if IRQ got it
    54bc:	90 91 b8 21 	lds	r25, 0x21B8
    54c0:	80 91 b7 21 	lds	r24, 0x21B7
    54c4:	98 17       	cp	r25, r24
    54c6:	71 f1       	breq	.+92     	; 0x5524 <xio_usb_putc+0xf2>
			return (0);
		}
		f.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    54c8:	38 60       	ori	r19, 0x08	; 8
    54ca:	20 93 ad 21 	sts	0x21AD, r18
    54ce:	30 93 ae 21 	sts	0x21AE, r19
		if (--(f.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    54d2:	80 91 b7 21 	lds	r24, 0x21B7
    54d6:	81 50       	subi	r24, 0x01	; 1
    54d8:	80 93 b7 21 	sts	0x21B7, r24
    54dc:	80 91 b7 21 	lds	r24, 0x21B7
    54e0:	88 23       	and	r24, r24
    54e2:	19 f4       	brne	.+6      	; 0x54ea <xio_usb_putc+0xb8>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    54e4:	81 e1       	ldi	r24, 0x11	; 17
    54e6:	80 93 b7 21 	sts	0x21B7, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];// write char to TX DATA register
    54ea:	e0 91 b7 21 	lds	r30, 0x21B7
    54ee:	f0 e0       	ldi	r31, 0x00	; 0
    54f0:	e7 54       	subi	r30, 0x47	; 71
    54f2:	fd 4d       	sbci	r31, 0xDD	; 221
    54f4:	80 81       	ld	r24, Z
    54f6:	8c 93       	st	X, r24
		f.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    54f8:	80 91 ad 21 	lds	r24, 0x21AD
    54fc:	90 91 ae 21 	lds	r25, 0x21AE
    5500:	97 7f       	andi	r25, 0xF7	; 247
    5502:	80 93 ad 21 	sts	0x21AD, r24
    5506:	90 93 ae 21 	sts	0x21AE, r25
	}
	// enable interrupts regardless
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    550a:	e0 91 cb 22 	lds	r30, 0x22CB
    550e:	f0 91 cc 22 	lds	r31, 0x22CC
    5512:	81 e2       	ldi	r24, 0x21	; 33
    5514:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    5516:	80 91 a2 00 	lds	r24, 0x00A2
    551a:	81 60       	ori	r24, 0x01	; 1
    551c:	e0 ea       	ldi	r30, 0xA0	; 160
    551e:	f0 e0       	ldi	r31, 0x00	; 0
    5520:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    5522:	78 94       	sei
    5524:	20 e0       	ldi	r18, 0x00	; 0
    5526:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    5528:	c9 01       	movw	r24, r18
    552a:	08 95       	ret

0000552c <xio_usb_getc>:
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(f.flags)) {
    552c:	20 91 ad 21 	lds	r18, 0x21AD
    5530:	30 91 ae 21 	lds	r19, 0x21AE
    5534:	24 70       	andi	r18, 0x04	; 4
    5536:	30 70       	andi	r19, 0x00	; 0
    5538:	15 c0       	rjmp	.+42     	; 0x5564 <xio_usb_getc+0x38>
    553a:	21 15       	cp	r18, r1
    553c:	31 05       	cpc	r19, r1
    553e:	61 f0       	breq	.+24     	; 0x5558 <xio_usb_getc+0x2c>
			sleep_mode();
    5540:	80 91 48 00 	lds	r24, 0x0048
    5544:	81 60       	ori	r24, 0x01	; 1
    5546:	80 93 48 00 	sts	0x0048, r24
    554a:	88 95       	sleep
    554c:	80 91 48 00 	lds	r24, 0x0048
    5550:	8e 7f       	andi	r24, 0xFE	; 254
    5552:	80 93 48 00 	sts	0x0048, r24
    5556:	06 c0       	rjmp	.+12     	; 0x5564 <xio_usb_getc+0x38>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    5558:	83 e0       	ldi	r24, 0x03	; 3
    555a:	80 93 af 21 	sts	0x21AF, r24
    555e:	2f ef       	ldi	r18, 0xFF	; 255
    5560:	3f ef       	ldi	r19, 0xFF	; 255
    5562:	26 c0       	rjmp	.+76     	; 0x55b0 <xio_usb_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
    5564:	90 91 b6 21 	lds	r25, 0x21B6
    5568:	80 91 b5 21 	lds	r24, 0x21B5
    556c:	98 17       	cp	r25, r24
    556e:	29 f3       	breq	.-54     	; 0x553a <xio_usb_getc+0xe>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    5570:	80 91 b5 21 	lds	r24, 0x21B5
    5574:	81 50       	subi	r24, 0x01	; 1
    5576:	80 93 b5 21 	sts	0x21B5, r24
    557a:	80 91 b5 21 	lds	r24, 0x21B5
    557e:	88 23       	and	r24, r24
    5580:	19 f4       	brne	.+6      	; 0x5588 <xio_usb_getc+0x5c>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5582:	8e ef       	ldi	r24, 0xFE	; 254
    5584:	80 93 b5 21 	sts	0x21B5, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    5588:	e0 91 b5 21 	lds	r30, 0x21B5
    558c:	f0 e0       	ldi	r31, 0x00	; 0
    558e:	e3 55       	subi	r30, 0x53	; 83
    5590:	fe 4d       	sbci	r31, 0xDE	; 222
    5592:	85 85       	ldd	r24, Z+13	; 0x0d
    5594:	8f 77       	andi	r24, 0x7F	; 127
    5596:	80 93 b0 21 	sts	0x21B0, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[f.c])))());
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	88 0f       	add	r24, r24
    559e:	99 1f       	adc	r25, r25
    55a0:	8a 59       	subi	r24, 0x9A	; 154
    55a2:	97 4f       	sbci	r25, 0xF7	; 247
    55a4:	fc 01       	movw	r30, r24
    55a6:	25 91       	lpm	r18, Z+
    55a8:	34 91       	lpm	r19, Z+
    55aa:	f9 01       	movw	r30, r18
    55ac:	19 95       	eicall
    55ae:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    55b0:	c9 01       	movw	r24, r18
    55b2:	08 95       	ret

000055b4 <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    55b4:	80 91 ad 21 	lds	r24, 0x21AD
    55b8:	84 ff       	sbrs	r24, 4
    55ba:	08 c0       	rjmp	.+16     	; 0x55cc <_getc_char+0x18>
    55bc:	60 91 37 27 	lds	r22, 0x2737
    55c0:	70 91 38 27 	lds	r23, 0x2738
    55c4:	80 91 b0 21 	lds	r24, 0x21B0
    55c8:	0e 94 19 2a 	call	0x5432	; 0x5432 <xio_usb_putc>
	return(f.c);
}
    55cc:	80 91 b0 21 	lds	r24, 0x21B0
    55d0:	90 e0       	ldi	r25, 0x00	; 0
    55d2:	08 95       	ret

000055d4 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(f.flags)) f.c = '\n';
    55d4:	90 91 ad 21 	lds	r25, 0x21AD
    55d8:	96 ff       	sbrs	r25, 6
    55da:	03 c0       	rjmp	.+6      	; 0x55e2 <_getc_NEWLINE+0xe>
    55dc:	8a e0       	ldi	r24, 0x0A	; 10
    55de:	80 93 b0 21 	sts	0x21B0, r24
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    55e2:	94 ff       	sbrs	r25, 4
    55e4:	08 c0       	rjmp	.+16     	; 0x55f6 <_getc_NEWLINE+0x22>
    55e6:	60 91 37 27 	lds	r22, 0x2737
    55ea:	70 91 38 27 	lds	r23, 0x2738
    55ee:	80 91 b0 21 	lds	r24, 0x21B0
    55f2:	0e 94 19 2a 	call	0x5432	; 0x5432 <xio_usb_putc>
	return(f.c);
}
    55f6:	80 91 b0 21 	lds	r24, 0x21B0
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	08 95       	ret

000055fe <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(f.flags)) {
    55fe:	80 91 ad 21 	lds	r24, 0x21AD
    5602:	87 ff       	sbrs	r24, 7
    5604:	03 c0       	rjmp	.+6      	; 0x560c <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    5606:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <_getc_NEWLINE>
    560a:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    560c:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <_getc_char>
}
    5610:	08 95       	ret

00005612 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	f.sig = XIO_SIG_DELETE;
    5612:	8a e0       	ldi	r24, 0x0A	; 10
    5614:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    5618:	8f ef       	ldi	r24, 0xFF	; 255
    561a:	9f ef       	ldi	r25, 0xFF	; 255
    561c:	08 95       	ret

0000561e <xio_usb_readln>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_usb_readln(char *buf, uint8_t len)
{
	if (!IN_LINE(f.flags)) {					// first time thru initializations
    561e:	20 91 ad 21 	lds	r18, 0x21AD
    5622:	30 91 ae 21 	lds	r19, 0x21AE
    5626:	36 fd       	sbrc	r19, 6
    5628:	0d c0       	rjmp	.+26     	; 0x5644 <xio_usb_readln+0x26>
		f.i = 0;								// zero buffer
    562a:	10 92 b1 21 	sts	0x21B1, r1
		f.len = len;							// save arg into struct 
    562e:	60 93 b2 21 	sts	0x21B2, r22
		f.buf = buf;							// save arg into struct 
    5632:	80 93 b3 21 	sts	0x21B3, r24
    5636:	90 93 b4 21 	sts	0x21B4, r25
//		f.sig = XIO_SIG_OK;						// no signal action
		f.flags |= XIO_FLAG_IN_LINE_bm;			// yes, we are busy getting a line
    563a:	30 64       	ori	r19, 0x40	; 64
    563c:	20 93 ad 21 	sts	0x21AD, r18
    5640:	30 93 ae 21 	sts	0x21AE, r19
	}
	if (f.rx_buf_head == f.rx_buf_tail) {		// RX ISR buffer empty
    5644:	90 91 b6 21 	lds	r25, 0x21B6
    5648:	80 91 b5 21 	lds	r24, 0x21B5
    564c:	98 17       	cp	r25, r24
    564e:	19 f4       	brne	.+6      	; 0x5656 <xio_usb_readln+0x38>
    5650:	22 e0       	ldi	r18, 0x02	; 2
    5652:	30 e0       	ldi	r19, 0x00	; 0
    5654:	20 c0       	rjmp	.+64     	; 0x5696 <xio_usb_readln+0x78>
//		f.sig = XIO_SIG_WOULDBLOCK;
		return(TG_CONTINUE);
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    5656:	80 91 b5 21 	lds	r24, 0x21B5
    565a:	81 50       	subi	r24, 0x01	; 1
    565c:	80 93 b5 21 	sts	0x21B5, r24
    5660:	80 91 b5 21 	lds	r24, 0x21B5
    5664:	88 23       	and	r24, r24
    5666:	19 f4       	brne	.+6      	; 0x566e <xio_usb_readln+0x50>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5668:	8e ef       	ldi	r24, 0xFE	; 254
    566a:	80 93 b5 21 	sts	0x21B5, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    566e:	e0 91 b5 21 	lds	r30, 0x21B5
    5672:	f0 e0       	ldi	r31, 0x00	; 0
    5674:	e3 55       	subi	r30, 0x53	; 83
    5676:	fe 4d       	sbci	r31, 0xDE	; 222
    5678:	85 85       	ldd	r24, Z+13	; 0x0d
    567a:	8f 77       	andi	r24, 0x7F	; 127
    567c:	80 93 b0 21 	sts	0x21B0, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[f.c])))()); // dispatch on character
    5680:	90 e0       	ldi	r25, 0x00	; 0
    5682:	88 0f       	add	r24, r24
    5684:	99 1f       	adc	r25, r25
    5686:	8a 59       	subi	r24, 0x9A	; 154
    5688:	98 4f       	sbci	r25, 0xF8	; 248
    568a:	fc 01       	movw	r30, r24
    568c:	25 91       	lpm	r18, Z+
    568e:	34 91       	lpm	r19, Z+
    5690:	f9 01       	movw	r30, r18
    5692:	19 95       	eicall
    5694:	9c 01       	movw	r18, r24
}
    5696:	c9 01       	movw	r24, r18
    5698:	08 95       	ret

0000569a <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (f.i > f.len) {							// trap buffer overflow
    569a:	90 91 b1 21 	lds	r25, 0x21B1
    569e:	20 91 b2 21 	lds	r18, 0x21B2
    56a2:	e0 91 b3 21 	lds	r30, 0x21B3
    56a6:	f0 91 b4 21 	lds	r31, 0x21B4
    56aa:	29 17       	cp	r18, r25
    56ac:	48 f4       	brcc	.+18     	; 0x56c0 <_readln_char+0x26>
		f.sig = XIO_SIG_EOL;
    56ae:	81 e0       	ldi	r24, 0x01	; 1
    56b0:	80 93 af 21 	sts	0x21AF, r24
		f.buf[f.len] = NUL;						// f.len is zero based
    56b4:	e2 0f       	add	r30, r18
    56b6:	f1 1d       	adc	r31, r1
    56b8:	10 82       	st	Z, r1
    56ba:	26 e0       	ldi	r18, 0x06	; 6
    56bc:	30 e0       	ldi	r19, 0x00	; 0
    56be:	16 c0       	rjmp	.+44     	; 0x56ec <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	f.buf[f.i++] = f.c;
    56c0:	e9 0f       	add	r30, r25
    56c2:	f1 1d       	adc	r31, r1
    56c4:	80 91 b0 21 	lds	r24, 0x21B0
    56c8:	80 83       	st	Z, r24
    56ca:	9f 5f       	subi	r25, 0xFF	; 255
    56cc:	90 93 b1 21 	sts	0x21B1, r25
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);// conditional echo
    56d0:	80 91 ad 21 	lds	r24, 0x21AD
    56d4:	84 ff       	sbrs	r24, 4
    56d6:	08 c0       	rjmp	.+16     	; 0x56e8 <_readln_char+0x4e>
    56d8:	60 91 37 27 	lds	r22, 0x2737
    56dc:	70 91 38 27 	lds	r23, 0x2738
    56e0:	80 91 b0 21 	lds	r24, 0x21B0
    56e4:	0e 94 19 2a 	call	0x5432	; 0x5432 <xio_usb_putc>
    56e8:	22 e0       	ldi	r18, 0x02	; 2
    56ea:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_CONTINUE);						// line is still in process
}
    56ec:	c9 01       	movw	r24, r18
    56ee:	08 95       	ret

000056f0 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	f.sig = XIO_SIG_EOL;
    56f0:	81 e0       	ldi	r24, 0x01	; 1
    56f2:	80 93 af 21 	sts	0x21AF, r24
	f.buf[f.i] = NUL;
    56f6:	80 91 b1 21 	lds	r24, 0x21B1
    56fa:	e0 91 b3 21 	lds	r30, 0x21B3
    56fe:	f0 91 b4 21 	lds	r31, 0x21B4
    5702:	e8 0f       	add	r30, r24
    5704:	f1 1d       	adc	r31, r1
    5706:	10 82       	st	Z, r1
	f.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    5708:	20 91 ad 21 	lds	r18, 0x21AD
    570c:	30 91 ae 21 	lds	r19, 0x21AE
    5710:	c9 01       	movw	r24, r18
    5712:	9f 7b       	andi	r25, 0xBF	; 191
    5714:	80 93 ad 21 	sts	0x21AD, r24
    5718:	90 93 ae 21 	sts	0x21AE, r25
	if (ECHO(f.flags)) xio_usb_putc('\n',stdout);// echo a newline
    571c:	24 ff       	sbrs	r18, 4
    571e:	07 c0       	rjmp	.+14     	; 0x572e <_readln_NEWLINE+0x3e>
    5720:	60 91 37 27 	lds	r22, 0x2737
    5724:	70 91 38 27 	lds	r23, 0x2738
    5728:	8a e0       	ldi	r24, 0x0A	; 10
    572a:	0e 94 19 2a 	call	0x5432	; 0x5432 <xio_usb_putc>
	return 0;
//	return ((int)f.line_func(f.buf));			// call line handler function
}
    572e:	80 e0       	ldi	r24, 0x00	; 0
    5730:	90 e0       	ldi	r25, 0x00	; 0
    5732:	08 95       	ret

00005734 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(f.flags)) {
    5734:	80 91 ad 21 	lds	r24, 0x21AD
    5738:	87 ff       	sbrs	r24, 7
    573a:	03 c0       	rjmp	.+6      	; 0x5742 <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    573c:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <_readln_NEWLINE>
    5740:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    5742:	0e 94 4d 2b 	call	0x569a	; 0x569a <_readln_char>
	}
}
    5746:	08 95       	ret

00005748 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--f.i >= 0) {
    5748:	80 91 b1 21 	lds	r24, 0x21B1
    574c:	81 50       	subi	r24, 0x01	; 1
    574e:	80 93 b1 21 	sts	0x21B1, r24
		if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    5752:	80 91 ad 21 	lds	r24, 0x21AD
    5756:	84 ff       	sbrs	r24, 4
    5758:	08 c0       	rjmp	.+16     	; 0x576a <_readln_DELETE+0x22>
    575a:	60 91 37 27 	lds	r22, 0x2737
    575e:	70 91 38 27 	lds	r23, 0x2738
    5762:	80 91 b0 21 	lds	r24, 0x21B0
    5766:	0e 94 19 2a 	call	0x5432	; 0x5432 <xio_usb_putc>
	} else {
		f.i = 0;
	}
	return (TG_CONTINUE);						// line is still in process
}
    576a:	82 e0       	ldi	r24, 0x02	; 2
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	08 95       	ret

00005770 <_sig_KILL>:
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
	f.sig = XIO_SIG_KILL;
    5770:	84 e0       	ldi	r24, 0x04	; 4
    5772:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    5776:	8f ef       	ldi	r24, 0xFF	; 255
    5778:	9f ef       	ldi	r25, 0xFF	; 255
    577a:	08 95       	ret

0000577c <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
	f.sig = XIO_SIG_PAUSE;
    577c:	86 e0       	ldi	r24, 0x06	; 6
    577e:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    5782:	8f ef       	ldi	r24, 0xFF	; 255
    5784:	9f ef       	ldi	r25, 0xFF	; 255
    5786:	08 95       	ret

00005788 <_sig_RESUME>:

static int _sig_RESUME(void)
{
	f.sig = XIO_SIG_RESUME;
    5788:	87 e0       	ldi	r24, 0x07	; 7
    578a:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    578e:	8f ef       	ldi	r24, 0xFF	; 255
    5790:	9f ef       	ldi	r25, 0xFF	; 255
    5792:	08 95       	ret

00005794 <_sig_SHIFTOUT>:

static int _sig_SHIFTOUT(void)
{
	f.sig = XIO_SIG_SHIFTOUT;
    5794:	88 e0       	ldi	r24, 0x08	; 8
    5796:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    579a:	8f ef       	ldi	r24, 0xFF	; 255
    579c:	9f ef       	ldi	r25, 0xFF	; 255
    579e:	08 95       	ret

000057a0 <_sig_SHIFTIN>:

static int _sig_SHIFTIN(void)
{
	f.sig = XIO_SIG_SHIFTIN;
    57a0:	89 e0       	ldi	r24, 0x09	; 9
    57a2:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    57a6:	8f ef       	ldi	r24, 0xFF	; 255
    57a8:	9f ef       	ldi	r25, 0xFF	; 255
    57aa:	08 95       	ret

000057ac <xio_usb_queue_RX_char>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_usb_queue_RX_char(const char c)
{
    57ac:	28 2f       	mov	r18, r24
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    57ae:	83 30       	cpi	r24, 0x03	; 3
    57b0:	31 f4       	brne	.+12     	; 0x57be <xio_usb_queue_RX_char+0x12>
		f.sig = XIO_SIG_KILL;					// set signal value
    57b2:	84 e0       	ldi	r24, 0x04	; 4
    57b4:	80 93 af 21 	sts	0x21AF, r24
		signal_etx();							// call app-specific signal handler
    57b8:	0e 94 f6 37 	call	0x6fec	; 0x6fec <signal_etx>
    57bc:	08 95       	ret
		return;
	}

	// normal path
	if ((--f.rx_buf_head) == 0) { 				// wrap condition
    57be:	80 91 b6 21 	lds	r24, 0x21B6
    57c2:	81 50       	subi	r24, 0x01	; 1
    57c4:	80 93 b6 21 	sts	0x21B6, r24
    57c8:	80 91 b6 21 	lds	r24, 0x21B6
    57cc:	88 23       	and	r24, r24
    57ce:	19 f4       	brne	.+6      	; 0x57d6 <xio_usb_queue_RX_char+0x2a>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    57d0:	8e ef       	ldi	r24, 0xFE	; 254
    57d2:	80 93 b6 21 	sts	0x21B6, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    57d6:	90 91 b6 21 	lds	r25, 0x21B6
    57da:	80 91 b5 21 	lds	r24, 0x21B5
    57de:	98 17       	cp	r25, r24
    57e0:	39 f0       	breq	.+14     	; 0x57f0 <xio_usb_queue_RX_char+0x44>
		f.rx_buf[f.rx_buf_head] = c;			// FAKE INPUT DATA
    57e2:	e0 91 b6 21 	lds	r30, 0x21B6
    57e6:	f0 e0       	ldi	r31, 0x00	; 0
    57e8:	e3 55       	subi	r30, 0x53	; 83
    57ea:	fe 4d       	sbci	r31, 0xDE	; 222
    57ec:	25 87       	std	Z+13, r18	; 0x0d
    57ee:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    57f0:	80 91 b6 21 	lds	r24, 0x21B6
    57f4:	8f 5f       	subi	r24, 0xFF	; 255
    57f6:	80 93 b6 21 	sts	0x21B6, r24
    57fa:	80 91 b6 21 	lds	r24, 0x21B6
    57fe:	8f 3f       	cpi	r24, 0xFF	; 255
    5800:	19 f4       	brne	.+6      	; 0x5808 <xio_usb_queue_RX_char+0x5c>
		f.rx_buf_head = 1;
    5802:	81 e0       	ldi	r24, 0x01	; 1
    5804:	80 93 b6 21 	sts	0x21B6, r24
    5808:	08 95       	ret

0000580a <xio_usb_queue_RX_string>:
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_usb_queue_RX_string(char *buf)
{
    580a:	1f 93       	push	r17
    580c:	cf 93       	push	r28
    580e:	df 93       	push	r29
    5810:	ec 01       	movw	r28, r24
    5812:	10 e0       	ldi	r17, 0x00	; 0
    5814:	02 c0       	rjmp	.+4      	; 0x581a <xio_usb_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    5816:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <xio_usb_queue_RX_char>
void xio_usb_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    581a:	fe 01       	movw	r30, r28
    581c:	e1 0f       	add	r30, r17
    581e:	f1 1d       	adc	r31, r1
    5820:	80 81       	ld	r24, Z
    5822:	1f 5f       	subi	r17, 0xFF	; 255
    5824:	88 23       	and	r24, r24
    5826:	b9 f7       	brne	.-18     	; 0x5816 <xio_usb_queue_RX_string+0xc>
		xio_usb_queue_RX_char(c);
	}
}
    5828:	df 91       	pop	r29
    582a:	cf 91       	pop	r28
    582c:	1f 91       	pop	r17
    582e:	08 95       	ret

00005830 <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    5830:	1f 92       	push	r1
    5832:	0f 92       	push	r0
    5834:	0f b6       	in	r0, 0x3f	; 63
    5836:	0f 92       	push	r0
    5838:	0b b6       	in	r0, 0x3b	; 59
    583a:	0f 92       	push	r0
    583c:	11 24       	eor	r1, r1
    583e:	2f 93       	push	r18
    5840:	3f 93       	push	r19
    5842:	4f 93       	push	r20
    5844:	5f 93       	push	r21
    5846:	6f 93       	push	r22
    5848:	7f 93       	push	r23
    584a:	8f 93       	push	r24
    584c:	9f 93       	push	r25
    584e:	af 93       	push	r26
    5850:	bf 93       	push	r27
    5852:	ef 93       	push	r30
    5854:	ff 93       	push	r31
	uint8_t c = f.usart->DATA;					// can only read DATA once
    5856:	e0 91 cb 22 	lds	r30, 0x22CB
    585a:	f0 91 cc 22 	lds	r31, 0x22CC
    585e:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    5860:	23 30       	cpi	r18, 0x03	; 3
    5862:	31 f4       	brne	.+12     	; 0x5870 <__vector_25+0x40>
		f.sig = XIO_SIG_KILL;					// set signal value
    5864:	84 e0       	ldi	r24, 0x04	; 4
    5866:	80 93 af 21 	sts	0x21AF, r24
		signal_etx();							// call app-specific signal handler
    586a:	0e 94 f6 37 	call	0x6fec	; 0x6fec <signal_etx>
    586e:	25 c0       	rjmp	.+74     	; 0x58ba <__vector_25+0x8a>
		return;
	}

	// normal character path
	if ((--f.rx_buf_head) == 0) { 				// advance buffer head with wrap
    5870:	80 91 b6 21 	lds	r24, 0x21B6
    5874:	81 50       	subi	r24, 0x01	; 1
    5876:	80 93 b6 21 	sts	0x21B6, r24
    587a:	80 91 b6 21 	lds	r24, 0x21B6
    587e:	88 23       	and	r24, r24
    5880:	19 f4       	brne	.+6      	; 0x5888 <__vector_25+0x58>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    5882:	8e ef       	ldi	r24, 0xFE	; 254
    5884:	80 93 b6 21 	sts	0x21B6, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    5888:	90 91 b6 21 	lds	r25, 0x21B6
    588c:	80 91 b5 21 	lds	r24, 0x21B5
    5890:	98 17       	cp	r25, r24
    5892:	39 f0       	breq	.+14     	; 0x58a2 <__vector_25+0x72>
		f.rx_buf[f.rx_buf_head] = c;
    5894:	e0 91 b6 21 	lds	r30, 0x21B6
    5898:	f0 e0       	ldi	r31, 0x00	; 0
    589a:	e3 55       	subi	r30, 0x53	; 83
    589c:	fe 4d       	sbci	r31, 0xDE	; 222
    589e:	25 87       	std	Z+13, r18	; 0x0d
    58a0:	0c c0       	rjmp	.+24     	; 0x58ba <__vector_25+0x8a>
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    58a2:	80 91 b6 21 	lds	r24, 0x21B6
    58a6:	8f 5f       	subi	r24, 0xFF	; 255
    58a8:	80 93 b6 21 	sts	0x21B6, r24
    58ac:	80 91 b6 21 	lds	r24, 0x21B6
    58b0:	8f 3f       	cpi	r24, 0xFF	; 255
    58b2:	19 f4       	brne	.+6      	; 0x58ba <__vector_25+0x8a>
		f.rx_buf_head = 1;
    58b4:	81 e0       	ldi	r24, 0x01	; 1
    58b6:	80 93 b6 21 	sts	0x21B6, r24
	}
	// activate flow control here or before it gets to this level
}
    58ba:	ff 91       	pop	r31
    58bc:	ef 91       	pop	r30
    58be:	bf 91       	pop	r27
    58c0:	af 91       	pop	r26
    58c2:	9f 91       	pop	r25
    58c4:	8f 91       	pop	r24
    58c6:	7f 91       	pop	r23
    58c8:	6f 91       	pop	r22
    58ca:	5f 91       	pop	r21
    58cc:	4f 91       	pop	r20
    58ce:	3f 91       	pop	r19
    58d0:	2f 91       	pop	r18
    58d2:	0f 90       	pop	r0
    58d4:	0b be       	out	0x3b, r0	; 59
    58d6:	0f 90       	pop	r0
    58d8:	0f be       	out	0x3f, r0	; 63
    58da:	0f 90       	pop	r0
    58dc:	1f 90       	pop	r1
    58de:	18 95       	reti

000058e0 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    58e0:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    58e2:	e0 ec       	ldi	r30, 0xC0	; 192
    58e4:	f1 e0       	ldi	r31, 0x01	; 1
    58e6:	80 91 cf 01 	lds	r24, 0x01CF
    58ea:	87 fd       	sbrc	r24, 7
    58ec:	fa cf       	rjmp	.-12     	; 0x58e2 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    58ee:	26 2f       	mov	r18, r22
    58f0:	30 e0       	ldi	r19, 0x00	; 0
    58f2:	2f 71       	andi	r18, 0x1F	; 31
    58f4:	30 70       	andi	r19, 0x00	; 0
    58f6:	89 2f       	mov	r24, r25
    58f8:	90 e0       	ldi	r25, 0x00	; 0
    58fa:	45 e0       	ldi	r20, 0x05	; 5
    58fc:	88 0f       	add	r24, r24
    58fe:	99 1f       	adc	r25, r25
    5900:	4a 95       	dec	r20
    5902:	e1 f7       	brne	.-8      	; 0x58fc <EEPROM_ReadByte+0x1c>
    5904:	28 2b       	or	r18, r24
    5906:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    5908:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    590c:	83 2f       	mov	r24, r19
    590e:	8f 71       	andi	r24, 0x1F	; 31
    5910:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5912:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    5914:	86 e0       	ldi	r24, 0x06	; 6
    5916:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5918:	ef 93       	push	r30
    591a:	ff 93       	push	r31
    591c:	0f 93       	push	r16
    591e:	2f 93       	push	r18
    5920:	eb ec       	ldi	r30, 0xCB	; 203
    5922:	f1 e0       	ldi	r31, 0x01	; 1
    5924:	08 ed       	ldi	r16, 0xD8	; 216
    5926:	21 e0       	ldi	r18, 0x01	; 1
    5928:	04 bf       	out	0x34, r16	; 52
    592a:	20 83       	st	Z, r18
    592c:	2f 91       	pop	r18
    592e:	0f 91       	pop	r16
    5930:	ff 91       	pop	r31
    5932:	ef 91       	pop	r30

	return NVM.DATA0;
    5934:	80 91 c4 01 	lds	r24, 0x01C4
}
    5938:	08 95       	ret

0000593a <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    593a:	68 2f       	mov	r22, r24
    593c:	6f 71       	andi	r22, 0x1F	; 31
    593e:	55 e0       	ldi	r21, 0x05	; 5
    5940:	96 95       	lsr	r25
    5942:	87 95       	ror	r24
    5944:	5a 95       	dec	r21
    5946:	e1 f7       	brne	.-8      	; 0x5940 <eeprom_get_char+0x6>
    5948:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <EEPROM_ReadByte>
}
    594c:	08 95       	ret

0000594e <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    594e:	8f 92       	push	r8
    5950:	9f 92       	push	r9
    5952:	af 92       	push	r10
    5954:	bf 92       	push	r11
    5956:	cf 92       	push	r12
    5958:	df 92       	push	r13
    595a:	ff 92       	push	r15
    595c:	0f 93       	push	r16
    595e:	1f 93       	push	r17
    5960:	cf 93       	push	r28
    5962:	df 93       	push	r29
    5964:	4c 01       	movw	r8, r24
    5966:	5b 01       	movw	r10, r22
    5968:	6a 01       	movw	r12, r20
    596a:	8b 01       	movw	r16, r22
    596c:	ea 01       	movw	r28, r20
    596e:	ff 24       	eor	r15, r15
    5970:	18 c0       	rjmp	.+48     	; 0x59a2 <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5972:	c8 01       	movw	r24, r16
    5974:	0e 94 9d 2c 	call	0x593a	; 0x593a <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    5978:	ff 20       	and	r15, r15
    597a:	19 f0       	breq	.+6      	; 0x5982 <memcpy_from_eeprom_with_checksum+0x34>
    597c:	21 e0       	ldi	r18, 0x01	; 1
    597e:	30 e0       	ldi	r19, 0x00	; 0
    5980:	08 c0       	rjmp	.+16     	; 0x5992 <memcpy_from_eeprom_with_checksum+0x44>
    5982:	2f 2d       	mov	r18, r15
    5984:	33 27       	eor	r19, r19
    5986:	27 fd       	sbrc	r18, 7
    5988:	30 95       	com	r19
    598a:	22 27       	eor	r18, r18
    598c:	33 0f       	add	r19, r19
    598e:	22 1f       	adc	r18, r18
    5990:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5992:	0f 5f       	subi	r16, 0xFF	; 255
    5994:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    5996:	f8 2e       	mov	r15, r24
    5998:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    599a:	f4 01       	movw	r30, r8
    599c:	81 93       	st	Z+, r24
    599e:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    59a0:	21 97       	sbiw	r28, 0x01	; 1
    59a2:	20 97       	sbiw	r28, 0x00	; 0
    59a4:	31 f7       	brne	.-52     	; 0x5972 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    59a6:	c6 01       	movw	r24, r12
    59a8:	8a 0d       	add	r24, r10
    59aa:	9b 1d       	adc	r25, r11
    59ac:	0e 94 9d 2c 	call	0x593a	; 0x593a <eeprom_get_char>
    59b0:	20 e0       	ldi	r18, 0x00	; 0
    59b2:	30 e0       	ldi	r19, 0x00	; 0
    59b4:	f8 16       	cp	r15, r24
    59b6:	11 f4       	brne	.+4      	; 0x59bc <memcpy_from_eeprom_with_checksum+0x6e>
    59b8:	21 e0       	ldi	r18, 0x01	; 1
    59ba:	30 e0       	ldi	r19, 0x00	; 0
}
    59bc:	c9 01       	movw	r24, r18
    59be:	df 91       	pop	r29
    59c0:	cf 91       	pop	r28
    59c2:	1f 91       	pop	r17
    59c4:	0f 91       	pop	r16
    59c6:	ff 90       	pop	r15
    59c8:	df 90       	pop	r13
    59ca:	cf 90       	pop	r12
    59cc:	bf 90       	pop	r11
    59ce:	af 90       	pop	r10
    59d0:	9f 90       	pop	r9
    59d2:	8f 90       	pop	r8
    59d4:	08 95       	ret

000059d6 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    59d6:	80 91 cf 01 	lds	r24, 0x01CF
    59da:	87 fd       	sbrc	r24, 7
    59dc:	fc cf       	rjmp	.-8      	; 0x59d6 <EEPROM_WaitForNVM>
}
    59de:	08 95       	ret

000059e0 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    59e0:	80 91 cf 01 	lds	r24, 0x01CF
    59e4:	87 fd       	sbrc	r24, 7
    59e6:	fc cf       	rjmp	.-8      	; 0x59e0 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    59e8:	80 91 cf 01 	lds	r24, 0x01CF
    59ec:	81 ff       	sbrs	r24, 1
    59ee:	12 c0       	rjmp	.+36     	; 0x5a14 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    59f0:	86 e3       	ldi	r24, 0x36	; 54
    59f2:	e0 ec       	ldi	r30, 0xC0	; 192
    59f4:	f1 e0       	ldi	r31, 0x01	; 1
    59f6:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    59f8:	ef 93       	push	r30
    59fa:	ff 93       	push	r31
    59fc:	0f 93       	push	r16
    59fe:	2f 93       	push	r18
    5a00:	eb ec       	ldi	r30, 0xCB	; 203
    5a02:	f1 e0       	ldi	r31, 0x01	; 1
    5a04:	08 ed       	ldi	r16, 0xD8	; 216
    5a06:	21 e0       	ldi	r18, 0x01	; 1
    5a08:	04 bf       	out	0x34, r16	; 52
    5a0a:	20 83       	st	Z, r18
    5a0c:	2f 91       	pop	r18
    5a0e:	0f 91       	pop	r16
    5a10:	ff 91       	pop	r31
    5a12:	ef 91       	pop	r30
    5a14:	08 95       	ret

00005a16 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    5a16:	df 92       	push	r13
    5a18:	ef 92       	push	r14
    5a1a:	ff 92       	push	r15
    5a1c:	0f 93       	push	r16
    5a1e:	1f 93       	push	r17
    5a20:	e8 2e       	mov	r14, r24
    5a22:	06 2f       	mov	r16, r22
    5a24:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    5a26:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5a2a:	e0 ec       	ldi	r30, 0xC0	; 192
    5a2c:	f1 e0       	ldi	r31, 0x01	; 1
    5a2e:	83 e3       	ldi	r24, 0x33	; 51
    5a30:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    5a32:	10 e0       	ldi	r17, 0x00	; 0
    5a34:	0f 71       	andi	r16, 0x1F	; 31
    5a36:	10 70       	andi	r17, 0x00	; 0
    5a38:	ff 24       	eor	r15, r15
    5a3a:	75 e0       	ldi	r23, 0x05	; 5
    5a3c:	ee 0c       	add	r14, r14
    5a3e:	ff 1c       	adc	r15, r15
    5a40:	7a 95       	dec	r23
    5a42:	e1 f7       	brne	.-8      	; 0x5a3c <EEPROM_WriteByte+0x26>
    5a44:	0e 29       	or	r16, r14
    5a46:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    5a48:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5a4a:	81 2f       	mov	r24, r17
    5a4c:	8f 71       	andi	r24, 0x1F	; 31
    5a4e:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5a50:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5a52:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5a54:	85 e3       	ldi	r24, 0x35	; 53
    5a56:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5a58:	ef 93       	push	r30
    5a5a:	ff 93       	push	r31
    5a5c:	0f 93       	push	r16
    5a5e:	2f 93       	push	r18
    5a60:	eb ec       	ldi	r30, 0xCB	; 203
    5a62:	f1 e0       	ldi	r31, 0x01	; 1
    5a64:	08 ed       	ldi	r16, 0xD8	; 216
    5a66:	21 e0       	ldi	r18, 0x01	; 1
    5a68:	04 bf       	out	0x34, r16	; 52
    5a6a:	20 83       	st	Z, r18
    5a6c:	2f 91       	pop	r18
    5a6e:	0f 91       	pop	r16
    5a70:	ff 91       	pop	r31
    5a72:	ef 91       	pop	r30
}
    5a74:	1f 91       	pop	r17
    5a76:	0f 91       	pop	r16
    5a78:	ff 90       	pop	r15
    5a7a:	ef 90       	pop	r14
    5a7c:	df 90       	pop	r13
    5a7e:	08 95       	ret

00005a80 <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    5a80:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    5a82:	68 2f       	mov	r22, r24
    5a84:	6f 71       	andi	r22, 0x1F	; 31
    5a86:	e5 e0       	ldi	r30, 0x05	; 5
    5a88:	96 95       	lsr	r25
    5a8a:	87 95       	ror	r24
    5a8c:	ea 95       	dec	r30
    5a8e:	e1 f7       	brne	.-8      	; 0x5a88 <eeprom_put_char+0x8>
    5a90:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <EEPROM_WriteByte>
}
    5a94:	08 95       	ret

00005a96 <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    5a96:	8f 92       	push	r8
    5a98:	9f 92       	push	r9
    5a9a:	af 92       	push	r10
    5a9c:	bf 92       	push	r11
    5a9e:	cf 92       	push	r12
    5aa0:	df 92       	push	r13
    5aa2:	ef 92       	push	r14
    5aa4:	ff 92       	push	r15
    5aa6:	0f 93       	push	r16
    5aa8:	df 93       	push	r29
    5aaa:	cf 93       	push	r28
    5aac:	0f 92       	push	r0
    5aae:	0f 92       	push	r0
    5ab0:	cd b7       	in	r28, 0x3d	; 61
    5ab2:	de b7       	in	r29, 0x3e	; 62
    5ab4:	5c 01       	movw	r10, r24
    5ab6:	6b 01       	movw	r12, r22
    5ab8:	7a 01       	movw	r14, r20
    5aba:	4a 01       	movw	r8, r20
    5abc:	00 e0       	ldi	r16, 0x00	; 0
    5abe:	1e c0       	rjmp	.+60     	; 0x5afc <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    5ac0:	00 23       	and	r16, r16
    5ac2:	19 f0       	breq	.+6      	; 0x5aca <memcpy_to_eeprom_with_checksum+0x34>
    5ac4:	21 e0       	ldi	r18, 0x01	; 1
    5ac6:	30 e0       	ldi	r19, 0x00	; 0
    5ac8:	08 c0       	rjmp	.+16     	; 0x5ada <memcpy_to_eeprom_with_checksum+0x44>
    5aca:	20 2f       	mov	r18, r16
    5acc:	33 27       	eor	r19, r19
    5ace:	27 fd       	sbrc	r18, 7
    5ad0:	30 95       	com	r19
    5ad2:	22 27       	eor	r18, r18
    5ad4:	33 0f       	add	r19, r19
    5ad6:	22 1f       	adc	r18, r18
    5ad8:	33 27       	eor	r19, r19
    checksum += *source;
    5ada:	f6 01       	movw	r30, r12
    5adc:	61 91       	ld	r22, Z+
    5ade:	6f 01       	movw	r12, r30
    5ae0:	06 2f       	mov	r16, r22
    5ae2:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    5ae4:	9c 01       	movw	r18, r24
    5ae6:	2f 5f       	subi	r18, 0xFF	; 255
    5ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    5aea:	29 83       	std	Y+1, r18	; 0x01
    5aec:	3a 83       	std	Y+2, r19	; 0x02
    5aee:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    5af2:	08 94       	sec
    5af4:	81 08       	sbc	r8, r1
    5af6:	91 08       	sbc	r9, r1
    5af8:	89 81       	ldd	r24, Y+1	; 0x01
    5afa:	9a 81       	ldd	r25, Y+2	; 0x02
    5afc:	81 14       	cp	r8, r1
    5afe:	91 04       	cpc	r9, r1
    5b00:	f9 f6       	brne	.-66     	; 0x5ac0 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    5b02:	c7 01       	movw	r24, r14
    5b04:	8a 0d       	add	r24, r10
    5b06:	9b 1d       	adc	r25, r11
    5b08:	60 2f       	mov	r22, r16
    5b0a:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <eeprom_put_char>
}
    5b0e:	0f 90       	pop	r0
    5b10:	0f 90       	pop	r0
    5b12:	cf 91       	pop	r28
    5b14:	df 91       	pop	r29
    5b16:	0f 91       	pop	r16
    5b18:	ff 90       	pop	r15
    5b1a:	ef 90       	pop	r14
    5b1c:	df 90       	pop	r13
    5b1e:	cf 90       	pop	r12
    5b20:	bf 90       	pop	r11
    5b22:	af 90       	pop	r10
    5b24:	9f 90       	pop	r9
    5b26:	8f 90       	pop	r8
    5b28:	08 95       	ret

00005b2a <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    5b2a:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5b2c:	e0 ec       	ldi	r30, 0xC0	; 192
    5b2e:	f1 e0       	ldi	r31, 0x01	; 1
    5b30:	80 91 cf 01 	lds	r24, 0x01CF
    5b34:	87 fd       	sbrc	r24, 7
    5b36:	fa cf       	rjmp	.-12     	; 0x5b2c <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5b38:	83 e3       	ldi	r24, 0x33	; 51
    5b3a:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    5b3c:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    5b40:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5b42:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5b44:	64 83       	std	Z+4, r22	; 0x04
}
    5b46:	08 95       	ret

00005b48 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    5b48:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5b4a:	e0 ec       	ldi	r30, 0xC0	; 192
    5b4c:	f1 e0       	ldi	r31, 0x01	; 1
    5b4e:	80 91 cf 01 	lds	r24, 0x01CF
    5b52:	87 fd       	sbrc	r24, 7
    5b54:	fa cf       	rjmp	.-12     	; 0x5b4a <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5b56:	83 e3       	ldi	r24, 0x33	; 51
    5b58:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    5b5a:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5b5c:	12 82       	std	Z+2, r1	; 0x02
    5b5e:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    5b60:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    5b64:	8d 91       	ld	r24, X+
    5b66:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    5b68:	9f 5f       	subi	r25, 0xFF	; 255
    5b6a:	90 32       	cpi	r25, 0x20	; 32
    5b6c:	c9 f7       	brne	.-14     	; 0x5b60 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    5b6e:	08 95       	ret

00005b70 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    5b70:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5b72:	e0 ec       	ldi	r30, 0xC0	; 192
    5b74:	f1 e0       	ldi	r31, 0x01	; 1
    5b76:	80 91 cf 01 	lds	r24, 0x01CF
    5b7a:	87 fd       	sbrc	r24, 7
    5b7c:	fa cf       	rjmp	.-12     	; 0x5b72 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5b7e:	89 2f       	mov	r24, r25
    5b80:	90 e0       	ldi	r25, 0x00	; 0
    5b82:	a5 e0       	ldi	r26, 0x05	; 5
    5b84:	88 0f       	add	r24, r24
    5b86:	99 1f       	adc	r25, r25
    5b88:	aa 95       	dec	r26
    5b8a:	e1 f7       	brne	.-8      	; 0x5b84 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5b8c:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5b90:	89 2f       	mov	r24, r25
    5b92:	8f 71       	andi	r24, 0x1F	; 31
    5b94:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5b96:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5b98:	85 e3       	ldi	r24, 0x35	; 53
    5b9a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5b9c:	ef 93       	push	r30
    5b9e:	ff 93       	push	r31
    5ba0:	0f 93       	push	r16
    5ba2:	2f 93       	push	r18
    5ba4:	eb ec       	ldi	r30, 0xCB	; 203
    5ba6:	f1 e0       	ldi	r31, 0x01	; 1
    5ba8:	08 ed       	ldi	r16, 0xD8	; 216
    5baa:	21 e0       	ldi	r18, 0x01	; 1
    5bac:	04 bf       	out	0x34, r16	; 52
    5bae:	20 83       	st	Z, r18
    5bb0:	2f 91       	pop	r18
    5bb2:	0f 91       	pop	r16
    5bb4:	ff 91       	pop	r31
    5bb6:	ef 91       	pop	r30
}
    5bb8:	08 95       	ret

00005bba <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    5bba:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5bbc:	e0 ec       	ldi	r30, 0xC0	; 192
    5bbe:	f1 e0       	ldi	r31, 0x01	; 1
    5bc0:	80 91 cf 01 	lds	r24, 0x01CF
    5bc4:	87 fd       	sbrc	r24, 7
    5bc6:	fa cf       	rjmp	.-12     	; 0x5bbc <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5bc8:	89 2f       	mov	r24, r25
    5bca:	90 e0       	ldi	r25, 0x00	; 0
    5bcc:	b5 e0       	ldi	r27, 0x05	; 5
    5bce:	88 0f       	add	r24, r24
    5bd0:	99 1f       	adc	r25, r25
    5bd2:	ba 95       	dec	r27
    5bd4:	e1 f7       	brne	.-8      	; 0x5bce <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5bd6:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5bda:	89 2f       	mov	r24, r25
    5bdc:	8f 71       	andi	r24, 0x1F	; 31
    5bde:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5be0:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    5be2:	82 e3       	ldi	r24, 0x32	; 50
    5be4:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5be6:	ef 93       	push	r30
    5be8:	ff 93       	push	r31
    5bea:	0f 93       	push	r16
    5bec:	2f 93       	push	r18
    5bee:	eb ec       	ldi	r30, 0xCB	; 203
    5bf0:	f1 e0       	ldi	r31, 0x01	; 1
    5bf2:	08 ed       	ldi	r16, 0xD8	; 216
    5bf4:	21 e0       	ldi	r18, 0x01	; 1
    5bf6:	04 bf       	out	0x34, r16	; 52
    5bf8:	20 83       	st	Z, r18
    5bfa:	2f 91       	pop	r18
    5bfc:	0f 91       	pop	r16
    5bfe:	ff 91       	pop	r31
    5c00:	ef 91       	pop	r30
}
    5c02:	08 95       	ret

00005c04 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    5c04:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5c06:	e0 ec       	ldi	r30, 0xC0	; 192
    5c08:	f1 e0       	ldi	r31, 0x01	; 1
    5c0a:	80 91 cf 01 	lds	r24, 0x01CF
    5c0e:	87 fd       	sbrc	r24, 7
    5c10:	fa cf       	rjmp	.-12     	; 0x5c06 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5c12:	89 2f       	mov	r24, r25
    5c14:	90 e0       	ldi	r25, 0x00	; 0
    5c16:	25 e0       	ldi	r18, 0x05	; 5
    5c18:	88 0f       	add	r24, r24
    5c1a:	99 1f       	adc	r25, r25
    5c1c:	2a 95       	dec	r18
    5c1e:	e1 f7       	brne	.-8      	; 0x5c18 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5c20:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5c24:	89 2f       	mov	r24, r25
    5c26:	8f 71       	andi	r24, 0x1F	; 31
    5c28:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5c2a:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    5c2c:	84 e3       	ldi	r24, 0x34	; 52
    5c2e:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5c30:	ef 93       	push	r30
    5c32:	ff 93       	push	r31
    5c34:	0f 93       	push	r16
    5c36:	2f 93       	push	r18
    5c38:	eb ec       	ldi	r30, 0xCB	; 203
    5c3a:	f1 e0       	ldi	r31, 0x01	; 1
    5c3c:	08 ed       	ldi	r16, 0xD8	; 216
    5c3e:	21 e0       	ldi	r18, 0x01	; 1
    5c40:	04 bf       	out	0x34, r16	; 52
    5c42:	20 83       	st	Z, r18
    5c44:	2f 91       	pop	r18
    5c46:	0f 91       	pop	r16
    5c48:	ff 91       	pop	r31
    5c4a:	ef 91       	pop	r30
}
    5c4c:	08 95       	ret

00005c4e <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5c4e:	80 91 cf 01 	lds	r24, 0x01CF
    5c52:	87 fd       	sbrc	r24, 7
    5c54:	fc cf       	rjmp	.-8      	; 0x5c4e <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    5c56:	80 e3       	ldi	r24, 0x30	; 48
    5c58:	e0 ec       	ldi	r30, 0xC0	; 192
    5c5a:	f1 e0       	ldi	r31, 0x01	; 1
    5c5c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5c5e:	ef 93       	push	r30
    5c60:	ff 93       	push	r31
    5c62:	0f 93       	push	r16
    5c64:	2f 93       	push	r18
    5c66:	eb ec       	ldi	r30, 0xCB	; 203
    5c68:	f1 e0       	ldi	r31, 0x01	; 1
    5c6a:	08 ed       	ldi	r16, 0xD8	; 216
    5c6c:	21 e0       	ldi	r18, 0x01	; 1
    5c6e:	04 bf       	out	0x34, r16	; 52
    5c70:	20 83       	st	Z, r18
    5c72:	2f 91       	pop	r18
    5c74:	0f 91       	pop	r16
    5c76:	ff 91       	pop	r31
    5c78:	ef 91       	pop	r30
}
    5c7a:	08 95       	ret

00005c7c <xio_pgm_init>:
 *
 *  Control parameters are defaulted and may be set using xio_pgm_control()
 */

void xio_pgm_init(const uint16_t control)
{
    5c7c:	9c 01       	movw	r18, r24
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;	// set flags to defaults & initial state
    5c7e:	85 e0       	ldi	r24, 0x05	; 5
    5c80:	90 e0       	ldi	r25, 0x00	; 0
    5c82:	80 93 cf 22 	sts	0x22CF, r24
    5c86:	90 93 d0 22 	sts	0x22D0, r25
	if (control & XIO_WR) {				// this is actually an error. Ignore for now.
    5c8a:	25 ff       	sbrs	r18, 5
    5c8c:	06 c0       	rjmp	.+12     	; 0x5c9a <xio_pgm_init+0x1e>
		fpgm.flags |= XIO_FLAG_WR_bm;
    5c8e:	87 e0       	ldi	r24, 0x07	; 7
    5c90:	90 e0       	ldi	r25, 0x00	; 0
    5c92:	80 93 cf 22 	sts	0x22CF, r24
    5c96:	90 93 d0 22 	sts	0x22D0, r25
	}
	if (control & XIO_NOBLOCK) {		// this is also technically a config error.
    5c9a:	27 ff       	sbrs	r18, 7
    5c9c:	09 c0       	rjmp	.+18     	; 0x5cb0 <xio_pgm_init+0x34>
		fpgm.flags &= ~XIO_FLAG_BLOCK_bm;
    5c9e:	80 91 cf 22 	lds	r24, 0x22CF
    5ca2:	90 91 d0 22 	lds	r25, 0x22D0
    5ca6:	8b 7f       	andi	r24, 0xFB	; 251
    5ca8:	80 93 cf 22 	sts	0x22CF, r24
    5cac:	90 93 d0 22 	sts	0x22D0, r25
	}
	if (control & XIO_ECHO) {
    5cb0:	30 ff       	sbrs	r19, 0
    5cb2:	09 c0       	rjmp	.+18     	; 0x5cc6 <xio_pgm_init+0x4a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5cb4:	80 91 cf 22 	lds	r24, 0x22CF
    5cb8:	90 91 d0 22 	lds	r25, 0x22D0
    5cbc:	80 61       	ori	r24, 0x10	; 16
    5cbe:	80 93 cf 22 	sts	0x22CF, r24
    5cc2:	90 93 d0 22 	sts	0x22D0, r25
	}
	if (control & XIO_NOECHO) {
    5cc6:	31 ff       	sbrs	r19, 1
    5cc8:	09 c0       	rjmp	.+18     	; 0x5cdc <xio_pgm_init+0x60>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5cca:	80 91 cf 22 	lds	r24, 0x22CF
    5cce:	90 91 d0 22 	lds	r25, 0x22D0
    5cd2:	8f 7e       	andi	r24, 0xEF	; 239
    5cd4:	80 93 cf 22 	sts	0x22CF, r24
    5cd8:	90 93 d0 22 	sts	0x22D0, r25
	}
	if (control & XIO_CRLF) {
    5cdc:	32 ff       	sbrs	r19, 2
    5cde:	09 c0       	rjmp	.+18     	; 0x5cf2 <xio_pgm_init+0x76>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5ce0:	80 91 cf 22 	lds	r24, 0x22CF
    5ce4:	90 91 d0 22 	lds	r25, 0x22D0
    5ce8:	80 62       	ori	r24, 0x20	; 32
    5cea:	80 93 cf 22 	sts	0x22CF, r24
    5cee:	90 93 d0 22 	sts	0x22D0, r25
	}
	if (control & XIO_NOCRLF) {
    5cf2:	33 ff       	sbrs	r19, 3
    5cf4:	09 c0       	rjmp	.+18     	; 0x5d08 <xio_pgm_init+0x8c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5cf6:	80 91 cf 22 	lds	r24, 0x22CF
    5cfa:	90 91 d0 22 	lds	r25, 0x22D0
    5cfe:	8f 7d       	andi	r24, 0xDF	; 223
    5d00:	80 93 cf 22 	sts	0x22CF, r24
    5d04:	90 93 d0 22 	sts	0x22D0, r25
	}
	if (control & XIO_LINEMODE) {
    5d08:	34 ff       	sbrs	r19, 4
    5d0a:	09 c0       	rjmp	.+18     	; 0x5d1e <xio_pgm_init+0xa2>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5d0c:	80 91 cf 22 	lds	r24, 0x22CF
    5d10:	90 91 d0 22 	lds	r25, 0x22D0
    5d14:	80 64       	ori	r24, 0x40	; 64
    5d16:	80 93 cf 22 	sts	0x22CF, r24
    5d1a:	90 93 d0 22 	sts	0x22D0, r25
	}
	if (control & XIO_NOLINEMODE) {
    5d1e:	35 ff       	sbrs	r19, 5
    5d20:	09 c0       	rjmp	.+18     	; 0x5d34 <xio_pgm_init+0xb8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5d22:	80 91 cf 22 	lds	r24, 0x22CF
    5d26:	90 91 d0 22 	lds	r25, 0x22D0
    5d2a:	8f 7b       	andi	r24, 0xBF	; 191
    5d2c:	80 93 cf 22 	sts	0x22CF, r24
    5d30:	90 93 d0 22 	sts	0x22D0, r25
	}
	if (control & XIO_SEMICOLONS) {
    5d34:	36 ff       	sbrs	r19, 6
    5d36:	09 c0       	rjmp	.+18     	; 0x5d4a <xio_pgm_init+0xce>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5d38:	80 91 cf 22 	lds	r24, 0x22CF
    5d3c:	90 91 d0 22 	lds	r25, 0x22D0
    5d40:	80 68       	ori	r24, 0x80	; 128
    5d42:	80 93 cf 22 	sts	0x22CF, r24
    5d46:	90 93 d0 22 	sts	0x22D0, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5d4a:	37 ff       	sbrs	r19, 7
    5d4c:	09 c0       	rjmp	.+18     	; 0x5d60 <xio_pgm_init+0xe4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5d4e:	80 91 cf 22 	lds	r24, 0x22CF
    5d52:	90 91 d0 22 	lds	r25, 0x22D0
    5d56:	8f 77       	andi	r24, 0x7F	; 127
    5d58:	80 93 cf 22 	sts	0x22CF, r24
    5d5c:	90 93 d0 22 	sts	0x22D0, r25
	}
	fpgm.idx = 0;
    5d60:	10 92 dd 22 	sts	0x22DD, r1
    5d64:	10 92 de 22 	sts	0x22DE, r1
	fpgm.sig = 0;
    5d68:	10 92 d1 22 	sts	0x22D1, r1
	dev_pgm.udata = &(fpgm.sig); 	// bind signals register to pgm FILE struct
    5d6c:	81 ed       	ldi	r24, 0xD1	; 209
    5d6e:	92 e2       	ldi	r25, 0x22	; 34
    5d70:	80 93 1a 20 	sts	0x201A, r24
    5d74:	90 93 1b 20 	sts	0x201B, r25
	fpgm.len = sizeof(fpgm.buf);
    5d78:	82 e0       	ldi	r24, 0x02	; 2
    5d7a:	80 93 d4 22 	sts	0x22D4, r24
}
    5d7e:	08 95       	ret

00005d80 <xio_pgm_open>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

FILE * xio_pgm_open(const prog_char *addr)
{
	fpgm.flags &= XIO_FLAG_RESET_gm;			// reset the signaling bits
    5d80:	20 91 cf 22 	lds	r18, 0x22CF
    5d84:	30 91 d0 22 	lds	r19, 0x22D0
    5d88:	3f 70       	andi	r19, 0x0F	; 15
    5d8a:	20 93 cf 22 	sts	0x22CF, r18
    5d8e:	30 93 d0 22 	sts	0x22D0, r19
	fpgm.pgmbase_P = (PROGMEM char *)addr;		// might want to range check this
    5d92:	80 93 db 22 	sts	0x22DB, r24
    5d96:	90 93 dc 22 	sts	0x22DC, r25
	fpgm.idx = 0;
    5d9a:	10 92 dd 22 	sts	0x22DD, r1
    5d9e:	10 92 de 22 	sts	0x22DE, r1
	return(&dev_pgm);
}
    5da2:	8e e0       	ldi	r24, 0x0E	; 14
    5da4:	90 e2       	ldi	r25, 0x20	; 32
    5da6:	08 95       	ret

00005da8 <xio_pgm_control>:
 *	XIO_SEMICOLONS <null>		Treat semicolons as line breaks
 *	XIO_NOSEMICOLONS <null>	Y	Don't treat semicolons as line breaks
 */

int8_t xio_pgm_control(const uint16_t control, const int16_t arg)
{
    5da8:	9c 01       	movw	r18, r24
	// transfer control flags to internal flag bits
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;		// set flags to defaults & initial state
    5daa:	85 e0       	ldi	r24, 0x05	; 5
    5dac:	90 e0       	ldi	r25, 0x00	; 0
    5dae:	80 93 cf 22 	sts	0x22CF, r24
    5db2:	90 93 d0 22 	sts	0x22D0, r25
	if (control & XIO_ECHO) {
    5db6:	30 ff       	sbrs	r19, 0
    5db8:	06 c0       	rjmp	.+12     	; 0x5dc6 <xio_pgm_control+0x1e>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5dba:	85 e1       	ldi	r24, 0x15	; 21
    5dbc:	90 e0       	ldi	r25, 0x00	; 0
    5dbe:	80 93 cf 22 	sts	0x22CF, r24
    5dc2:	90 93 d0 22 	sts	0x22D0, r25
	}
	if (control & XIO_NOECHO) {
    5dc6:	31 ff       	sbrs	r19, 1
    5dc8:	09 c0       	rjmp	.+18     	; 0x5ddc <xio_pgm_control+0x34>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5dca:	80 91 cf 22 	lds	r24, 0x22CF
    5dce:	90 91 d0 22 	lds	r25, 0x22D0
    5dd2:	8f 7e       	andi	r24, 0xEF	; 239
    5dd4:	80 93 cf 22 	sts	0x22CF, r24
    5dd8:	90 93 d0 22 	sts	0x22D0, r25
	}
	if (control & XIO_CRLF) {
    5ddc:	32 ff       	sbrs	r19, 2
    5dde:	09 c0       	rjmp	.+18     	; 0x5df2 <xio_pgm_control+0x4a>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5de0:	80 91 cf 22 	lds	r24, 0x22CF
    5de4:	90 91 d0 22 	lds	r25, 0x22D0
    5de8:	80 62       	ori	r24, 0x20	; 32
    5dea:	80 93 cf 22 	sts	0x22CF, r24
    5dee:	90 93 d0 22 	sts	0x22D0, r25
	}
	if (control & XIO_NOCRLF) {
    5df2:	33 ff       	sbrs	r19, 3
    5df4:	09 c0       	rjmp	.+18     	; 0x5e08 <xio_pgm_control+0x60>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5df6:	80 91 cf 22 	lds	r24, 0x22CF
    5dfa:	90 91 d0 22 	lds	r25, 0x22D0
    5dfe:	8f 7d       	andi	r24, 0xDF	; 223
    5e00:	80 93 cf 22 	sts	0x22CF, r24
    5e04:	90 93 d0 22 	sts	0x22D0, r25
	}
	if (control & XIO_LINEMODE) {
    5e08:	34 ff       	sbrs	r19, 4
    5e0a:	09 c0       	rjmp	.+18     	; 0x5e1e <xio_pgm_control+0x76>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5e0c:	80 91 cf 22 	lds	r24, 0x22CF
    5e10:	90 91 d0 22 	lds	r25, 0x22D0
    5e14:	80 64       	ori	r24, 0x40	; 64
    5e16:	80 93 cf 22 	sts	0x22CF, r24
    5e1a:	90 93 d0 22 	sts	0x22D0, r25
	}
	if (control & XIO_NOLINEMODE) {
    5e1e:	35 ff       	sbrs	r19, 5
    5e20:	09 c0       	rjmp	.+18     	; 0x5e34 <xio_pgm_control+0x8c>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5e22:	80 91 cf 22 	lds	r24, 0x22CF
    5e26:	90 91 d0 22 	lds	r25, 0x22D0
    5e2a:	8f 7b       	andi	r24, 0xBF	; 191
    5e2c:	80 93 cf 22 	sts	0x22CF, r24
    5e30:	90 93 d0 22 	sts	0x22D0, r25
	}
	if (control & XIO_SEMICOLONS) {
    5e34:	36 ff       	sbrs	r19, 6
    5e36:	09 c0       	rjmp	.+18     	; 0x5e4a <xio_pgm_control+0xa2>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5e38:	80 91 cf 22 	lds	r24, 0x22CF
    5e3c:	90 91 d0 22 	lds	r25, 0x22D0
    5e40:	80 68       	ori	r24, 0x80	; 128
    5e42:	80 93 cf 22 	sts	0x22CF, r24
    5e46:	90 93 d0 22 	sts	0x22D0, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5e4a:	37 ff       	sbrs	r19, 7
    5e4c:	09 c0       	rjmp	.+18     	; 0x5e60 <xio_pgm_control+0xb8>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5e4e:	80 91 cf 22 	lds	r24, 0x22CF
    5e52:	90 91 d0 22 	lds	r25, 0x22D0
    5e56:	8f 77       	andi	r24, 0x7F	; 127
    5e58:	80 93 cf 22 	sts	0x22CF, r24
    5e5c:	90 93 d0 22 	sts	0x22D0, r25
	}
	return (0);
}
    5e60:	80 e0       	ldi	r24, 0x00	; 0
    5e62:	08 95       	ret

00005e64 <xio_pgm_putc>:
 */

int xio_pgm_putc(const char c, FILE *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    5e64:	8f ef       	ldi	r24, 0xFF	; 255
    5e66:	9f ef       	ldi	r25, 0xFF	; 255
    5e68:	08 95       	ret

00005e6a <xio_pgm_readln>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_pgm_readln(char *buf, uint8_t len)
{
    5e6a:	9c 01       	movw	r18, r24
	if (!(fpgm.pgmbase_P)) {					// return error if no file is open
    5e6c:	80 91 db 22 	lds	r24, 0x22DB
    5e70:	90 91 dc 22 	lds	r25, 0x22DC
    5e74:	89 2b       	or	r24, r25
    5e76:	19 f4       	brne	.+6      	; 0x5e7e <xio_pgm_readln+0x14>
    5e78:	21 e1       	ldi	r18, 0x11	; 17
    5e7a:	30 e0       	ldi	r19, 0x00	; 0
    5e7c:	17 c0       	rjmp	.+46     	; 0x5eac <xio_pgm_readln+0x42>
		return (TG_FILE_NOT_OPEN);
	}
	fpgm.sig = XIO_SIG_OK;						// initialize signal
    5e7e:	10 92 d1 22 	sts	0x22D1, r1
	if (fgets(buf, len, &dev_pgm) == NULL) {
    5e82:	c9 01       	movw	r24, r18
    5e84:	70 e0       	ldi	r23, 0x00	; 0
    5e86:	4e e0       	ldi	r20, 0x0E	; 14
    5e88:	50 e2       	ldi	r21, 0x20	; 32
    5e8a:	0e 94 70 49 	call	0x92e0	; 0x92e0 <fgets>
    5e8e:	89 2b       	or	r24, r25
    5e90:	19 f0       	breq	.+6      	; 0x5e98 <xio_pgm_readln+0x2e>
    5e92:	20 e0       	ldi	r18, 0x00	; 0
    5e94:	30 e0       	ldi	r19, 0x00	; 0
    5e96:	0a c0       	rjmp	.+20     	; 0x5eac <xio_pgm_readln+0x42>
		fpgm.pgmbase_P = NULL;
    5e98:	10 92 db 22 	sts	0x22DB, r1
    5e9c:	10 92 dc 22 	sts	0x22DC, r1
		clearerr(&dev_pgm);
    5ea0:	8e e0       	ldi	r24, 0x0E	; 14
    5ea2:	90 e2       	ldi	r25, 0x20	; 32
    5ea4:	0e 94 6b 49 	call	0x92d6	; 0x92d6 <clearerr>
    5ea8:	24 e0       	ldi	r18, 0x04	; 4
    5eaa:	30 e0       	ldi	r19, 0x00	; 0
		return (TG_EOF);
	}
	return (TG_OK);
}
    5eac:	c9 01       	movw	r24, r18
    5eae:	08 95       	ret

00005eb0 <xio_pgm_getc>:
 *		- Note: putc should expand newlines to <cr><lf>
 */

int xio_pgm_getc(FILE *stream)
{
	if (fpgm.flags & XIO_FLAG_EOF_bm) {
    5eb0:	40 91 cf 22 	lds	r20, 0x22CF
    5eb4:	50 91 d0 22 	lds	r21, 0x22D0
    5eb8:	55 ff       	sbrs	r21, 5
    5eba:	06 c0       	rjmp	.+12     	; 0x5ec8 <xio_pgm_getc+0x18>
		fpgm.sig = XIO_SIG_EOF;
    5ebc:	82 e0       	ldi	r24, 0x02	; 2
    5ebe:	80 93 d1 22 	sts	0x22D1, r24
    5ec2:	2e ef       	ldi	r18, 0xFE	; 254
    5ec4:	3f ef       	ldi	r19, 0xFF	; 255
    5ec6:	3f c0       	rjmp	.+126    	; 0x5f46 <xio_pgm_getc+0x96>
		return (_FDEV_EOF);
	}
	if ((fpgm.c = pgm_read_byte(&fpgm.pgmbase_P[fpgm.idx])) == NUL) {
    5ec8:	20 91 dd 22 	lds	r18, 0x22DD
    5ecc:	30 91 de 22 	lds	r19, 0x22DE
    5ed0:	e0 91 db 22 	lds	r30, 0x22DB
    5ed4:	f0 91 dc 22 	lds	r31, 0x22DC
    5ed8:	e2 0f       	add	r30, r18
    5eda:	f3 1f       	adc	r31, r19
    5edc:	84 91       	lpm	r24, Z+
    5ede:	80 93 d2 22 	sts	0x22D2, r24
    5ee2:	88 23       	and	r24, r24
    5ee4:	29 f4       	brne	.+10     	; 0x5ef0 <xio_pgm_getc+0x40>
		fpgm.flags |= XIO_FLAG_EOF_bm;
    5ee6:	50 62       	ori	r21, 0x20	; 32
    5ee8:	40 93 cf 22 	sts	0x22CF, r20
    5eec:	50 93 d0 22 	sts	0x22D0, r21
	}
	++fpgm.idx;
    5ef0:	2f 5f       	subi	r18, 0xFF	; 255
    5ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ef4:	20 93 dd 22 	sts	0x22DD, r18
    5ef8:	30 93 de 22 	sts	0x22DE, r19
	if (!LINEMODE(fpgm.flags)) {		// processing is simple if not LINEMODE
    5efc:	90 91 cf 22 	lds	r25, 0x22CF
    5f00:	96 fd       	sbrc	r25, 6
    5f02:	07 c0       	rjmp	.+14     	; 0x5f12 <xio_pgm_getc+0x62>
		if (ECHO(fpgm.flags)) {
    5f04:	94 ff       	sbrs	r25, 4
    5f06:	1b c0       	rjmp	.+54     	; 0x5f3e <xio_pgm_getc+0x8e>
			putchar(fpgm.c);
    5f08:	60 91 37 27 	lds	r22, 0x2737
    5f0c:	70 91 38 27 	lds	r23, 0x2738
    5f10:	13 c0       	rjmp	.+38     	; 0x5f38 <xio_pgm_getc+0x88>
		}
		return (fpgm.c);
	}
	// now do the LINEMODE stuff
	if (fpgm.c == NUL) {				// perform newline substitutions
    5f12:	88 23       	and	r24, r24
    5f14:	31 f0       	breq	.+12     	; 0x5f22 <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if (fpgm.c == '\r') {
    5f16:	8d 30       	cpi	r24, 0x0D	; 13
    5f18:	21 f0       	breq	.+8      	; 0x5f22 <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if ((SEMICOLONS(fpgm.flags)) && (fpgm.c == ';')) {
    5f1a:	97 ff       	sbrs	r25, 7
    5f1c:	05 c0       	rjmp	.+10     	; 0x5f28 <xio_pgm_getc+0x78>
    5f1e:	8b 33       	cpi	r24, 0x3B	; 59
    5f20:	19 f4       	brne	.+6      	; 0x5f28 <xio_pgm_getc+0x78>
		fpgm.c = '\n';
    5f22:	8a e0       	ldi	r24, 0x0A	; 10
    5f24:	80 93 d2 22 	sts	0x22D2, r24
	}
	if (ECHO(fpgm.flags)) {
    5f28:	94 ff       	sbrs	r25, 4
    5f2a:	09 c0       	rjmp	.+18     	; 0x5f3e <xio_pgm_getc+0x8e>
		putchar(fpgm.c);
    5f2c:	60 91 37 27 	lds	r22, 0x2737
    5f30:	70 91 38 27 	lds	r23, 0x2738
    5f34:	80 91 d2 22 	lds	r24, 0x22D2
    5f38:	90 e0       	ldi	r25, 0x00	; 0
    5f3a:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
	}
	return (fpgm.c);
    5f3e:	80 91 d2 22 	lds	r24, 0x22D2
    5f42:	28 2f       	mov	r18, r24
    5f44:	30 e0       	ldi	r19, 0x00	; 0
}
    5f46:	c9 01       	movw	r24, r18
    5f48:	08 95       	ret

00005f4a <_tg_set_source>:
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.source = d;									// d = XIO device #. See xio.h
    5f4a:	80 93 e3 22 	sts	0x22E3, r24
	tg.prompts = TRUE;
    5f4e:	61 e0       	ldi	r22, 0x01	; 1
    5f50:	60 93 e5 22 	sts	0x22E5, r22

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5f54:	42 e0       	ldi	r20, 0x02	; 2
    5f56:	40 93 3b 23 	sts	0x233B, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5f5a:	27 ef       	ldi	r18, 0xF7	; 247
    5f5c:	3f e2       	ldi	r19, 0x2F	; 47
    5f5e:	20 93 3d 23 	sts	0x233D, r18
    5f62:	30 93 3e 23 	sts	0x233E, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5f66:	90 e5       	ldi	r25, 0x50	; 80
    5f68:	90 93 3c 23 	sts	0x233C, r25
	tg.source = d;									// d = XIO device #. See xio.h
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5f6c:	40 93 8f 23 	sts	0x238F, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5f70:	20 93 91 23 	sts	0x2391, r18
    5f74:	30 93 92 23 	sts	0x2392, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5f78:	90 93 90 23 	sts	0x2390, r25
	tg.source = d;									// d = XIO device #. See xio.h
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5f7c:	40 93 e3 23 	sts	0x23E3, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5f80:	20 93 e5 23 	sts	0x23E5, r18
    5f84:	30 93 e6 23 	sts	0x23E6, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5f88:	90 93 e4 23 	sts	0x23E4, r25
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
		tg.dev[i].poll_func = &_tg_poll_signal;
    5f8c:	20 93 39 24 	sts	0x2439, r18
    5f90:	30 93 3a 24 	sts	0x243A, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5f94:	90 93 38 24 	sts	0x2438, r25
	}
	tg.dev[XIO_DEV_PGM].state = TG_SRC_INACTIVE;	// program memory is an exception
    5f98:	10 92 37 24 	sts	0x2437, r1

	// make selected device active
	tg.dev[d].state = TG_SRC_ACTIVE;	
    5f9c:	48 2f       	mov	r20, r24
    5f9e:	50 e0       	ldi	r21, 0x00	; 0
    5fa0:	24 e5       	ldi	r18, 0x54	; 84
    5fa2:	30 e0       	ldi	r19, 0x00	; 0
    5fa4:	42 9f       	mul	r20, r18
    5fa6:	f0 01       	movw	r30, r0
    5fa8:	43 9f       	mul	r20, r19
    5faa:	f0 0d       	add	r31, r0
    5fac:	52 9f       	mul	r21, r18
    5fae:	f0 0d       	add	r31, r0
    5fb0:	11 24       	eor	r1, r1
    5fb2:	e0 52       	subi	r30, 0x20	; 32
    5fb4:	fd 4d       	sbci	r31, 0xDD	; 221
    5fb6:	67 83       	std	Z+7, r22	; 0x07
	tg.dev[d].poll_func = &_tg_poll_active;
    5fb8:	2a e2       	ldi	r18, 0x2A	; 42
    5fba:	30 e0       	ldi	r19, 0x00	; 0
    5fbc:	42 9f       	mul	r20, r18
    5fbe:	f0 01       	movw	r30, r0
    5fc0:	43 9f       	mul	r20, r19
    5fc2:	f0 0d       	add	r31, r0
    5fc4:	52 9f       	mul	r21, r18
    5fc6:	f0 0d       	add	r31, r0
    5fc8:	11 24       	eor	r1, r1
    5fca:	ee 0f       	add	r30, r30
    5fcc:	ff 1f       	adc	r31, r31
    5fce:	ee 51       	subi	r30, 0x1E	; 30
    5fd0:	fd 4d       	sbci	r31, 0xDD	; 221
    5fd2:	2b e8       	ldi	r18, 0x8B	; 139
    5fd4:	30 e3       	ldi	r19, 0x30	; 48
    5fd6:	27 83       	std	Z+7, r18	; 0x07
    5fd8:	30 87       	std	Z+8, r19	; 0x08
	if (d == XIO_DEV_PGM) {
    5fda:	84 30       	cpi	r24, 0x04	; 4
    5fdc:	11 f4       	brne	.+4      	; 0x5fe2 <_tg_set_source+0x98>
		tg.prompts = FALSE;							// no prompts for file input
    5fde:	10 92 e5 22 	sts	0x22E5, r1
    5fe2:	08 95       	ret

00005fe4 <tg_reset_source>:
 * tg_reset_source()  Reset source to default input device
 */

void tg_reset_source()
{
	_tg_set_source(tg.source_default);
    5fe4:	80 91 e4 22 	lds	r24, 0x22E4
    5fe8:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <_tg_set_source>
}
    5fec:	08 95       	ret

00005fee <_tg_poll_signal>:
 *	If a signal is received it's dispatched from the low-level line reader
 *	Any line that's read is ignored (tossed)
 */

static void _tg_poll_signal(uint8_t d)
{
    5fee:	48 2f       	mov	r20, r24
	if (tg.dev[d].state != TG_SRC_SIGNAL) {			// sanity check
    5ff0:	28 2f       	mov	r18, r24
    5ff2:	30 e0       	ldi	r19, 0x00	; 0
    5ff4:	84 e5       	ldi	r24, 0x54	; 84
    5ff6:	90 e0       	ldi	r25, 0x00	; 0
    5ff8:	28 9f       	mul	r18, r24
    5ffa:	f0 01       	movw	r30, r0
    5ffc:	29 9f       	mul	r18, r25
    5ffe:	f0 0d       	add	r31, r0
    6000:	38 9f       	mul	r19, r24
    6002:	f0 0d       	add	r31, r0
    6004:	11 24       	eor	r1, r1
    6006:	e0 52       	subi	r30, 0x20	; 32
    6008:	fd 4d       	sbci	r31, 0xDD	; 221
    600a:	87 81       	ldd	r24, Z+7	; 0x07
    600c:	82 30       	cpi	r24, 0x02	; 2
    600e:	a9 f4       	brne	.+42     	; 0x603a <__stack+0x3b>
		return;
	}
	tg.status = xio_fget_ln(d, tg.dev[d].buf, tg.dev[d].len);
    6010:	85 e1       	ldi	r24, 0x15	; 21
    6012:	90 e0       	ldi	r25, 0x00	; 0
    6014:	28 9f       	mul	r18, r24
    6016:	b0 01       	movw	r22, r0
    6018:	29 9f       	mul	r18, r25
    601a:	70 0d       	add	r23, r0
    601c:	38 9f       	mul	r19, r24
    601e:	70 0d       	add	r23, r0
    6020:	11 24       	eor	r1, r1
    6022:	66 0f       	add	r22, r22
    6024:	77 1f       	adc	r23, r23
    6026:	66 0f       	add	r22, r22
    6028:	77 1f       	adc	r23, r23
    602a:	65 51       	subi	r22, 0x15	; 21
    602c:	7d 4d       	sbci	r23, 0xDD	; 221
    602e:	84 2f       	mov	r24, r20
    6030:	40 85       	ldd	r20, Z+8	; 0x08
    6032:	0e 94 17 28 	call	0x502e	; 0x502e <xio_fget_ln>
    6036:	80 93 e1 22 	sts	0x22E1, r24
    603a:	08 95       	ret

0000603c <tg_init>:
{
//	xio_control(XIO_DEV_USB, XIO_SIG_FUNC, (int)&tg_signal); // bind sig handler
//	xio_control(XIO_DEV_RS485, XIO_SIG_FUNC, (int)&tg_signal);
//	xio_control(XIO_DEV_AUX, XIO_SIG_FUNC, (int)&tg_signal);

	tg.source_default = XIO_DEV_USB; 
    603c:	81 e0       	ldi	r24, 0x01	; 1
    603e:	80 93 e4 22 	sts	0x22E4, r24
	tg.state = TG_STATE_READY_UNPROMPTED;
    6042:	10 92 e0 22 	sts	0x22E0, r1
	_tg_set_source(tg.source_default);		// set initial active source
    6046:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <_tg_set_source>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    604a:	10 92 e2 22 	sts	0x22E2, r1
	tg.source_default = XIO_DEV_USB; 
	tg.state = TG_STATE_READY_UNPROMPTED;
	_tg_set_source(tg.source_default);		// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode

	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    604e:	00 d0       	rcall	.+0      	; 0x6050 <tg_init+0x14>
    6050:	0f 92       	push	r0
    6052:	82 ef       	ldi	r24, 0xF2	; 242
    6054:	9b e1       	ldi	r25, 0x1B	; 27
    6056:	ed b7       	in	r30, 0x3d	; 61
    6058:	fe b7       	in	r31, 0x3e	; 62
    605a:	81 83       	std	Z+1, r24	; 0x01
    605c:	92 83       	std	Z+2, r25	; 0x02
    605e:	88 ee       	ldi	r24, 0xE8	; 232
    6060:	9b e1       	ldi	r25, 0x1B	; 27
    6062:	83 83       	std	Z+3, r24	; 0x03
    6064:	94 83       	std	Z+4, r25	; 0x04
    6066:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
    606a:	0f 90       	pop	r0
    606c:	0f 90       	pop	r0
    606e:	0f 90       	pop	r0
    6070:	0f 90       	pop	r0
}
    6072:	08 95       	ret

00006074 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    6074:	fc 01       	movw	r30, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    6076:	80 91 e2 22 	lds	r24, 0x22E2
    607a:	88 23       	and	r24, r24
    607c:	79 f5       	brne	.+94     	; 0x60dc <tg_parser+0x68>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    607e:	90 81       	ld	r25, Z
    6080:	89 2f       	mov	r24, r25
    6082:	81 56       	subi	r24, 0x61	; 97
    6084:	8a 31       	cpi	r24, 0x1A	; 26
    6086:	10 f4       	brcc	.+4      	; 0x608c <tg_parser+0x18>
			buf[0] = buf[0]-'a'+'A';
    6088:	90 52       	subi	r25, 0x20	; 32
    608a:	90 83       	st	Z, r25
		}
		switch (buf[0]) {
    608c:	80 81       	ld	r24, Z
    608e:	86 34       	cpi	r24, 0x46	; 70
    6090:	b1 f0       	breq	.+44     	; 0x60be <tg_parser+0x4a>
    6092:	87 34       	cpi	r24, 0x47	; 71
    6094:	38 f4       	brcc	.+14     	; 0x60a4 <tg_parser+0x30>
    6096:	83 34       	cpi	r24, 0x43	; 67
    6098:	61 f0       	breq	.+24     	; 0x60b2 <tg_parser+0x3e>
    609a:	84 34       	cpi	r24, 0x44	; 68
    609c:	71 f0       	breq	.+28     	; 0x60ba <tg_parser+0x46>
    609e:	8f 33       	cpi	r24, 0x3F	; 63
    60a0:	d9 f4       	brne	.+54     	; 0x60d8 <tg_parser+0x64>
    60a2:	07 c0       	rjmp	.+14     	; 0x60b2 <tg_parser+0x3e>
    60a4:	87 34       	cpi	r24, 0x47	; 71
    60a6:	19 f0       	breq	.+6      	; 0x60ae <tg_parser+0x3a>
    60a8:	8d 54       	subi	r24, 0x4D	; 77
    60aa:	82 30       	cpi	r24, 0x02	; 2
    60ac:	a8 f4       	brcc	.+42     	; 0x60d8 <tg_parser+0x64>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    60ae:	82 e0       	ldi	r24, 0x02	; 2
    60b0:	01 c0       	rjmp	.+2      	; 0x60b4 <tg_parser+0x40>
	if (tg.mode == TG_CONTROL_MODE) {
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
			buf[0] = buf[0]-'a'+'A';
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    60b2:	81 e0       	ldi	r24, 0x01	; 1
    60b4:	80 93 e2 22 	sts	0x22E2, r24
    60b8:	11 c0       	rjmp	.+34     	; 0x60dc <tg_parser+0x68>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    60ba:	83 e0       	ldi	r24, 0x03	; 3
    60bc:	fb cf       	rjmp	.-10     	; 0x60b4 <tg_parser+0x40>
//	xio_pgm_open(PGMFILE(&circle_test10));
//	xio_pgm_open(PGMFILE(&square_circle_test10));
//	xio_pgm_open(PGMFILE(&square_circle_test100));
//	xio_pgm_open(PGMFILE(&spiral_test50a));
//	xio_pgm_open(PGMFILE(&spiral_test5));
	xio_pgm_open(PGMFILE(&dwell_test2));
    60be:	82 ea       	ldi	r24, 0xA2	; 162
    60c0:	9c e0       	ldi	r25, 0x0C	; 12
    60c2:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <xio_pgm_open>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    60c6:	82 e0       	ldi	r24, 0x02	; 2
    60c8:	80 93 e2 22 	sts	0x22E2, r24
//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
//	xio_pgm_open(PGMFILE(&zoetrope));

	// set mode and source for file mode
	_tg_set_mode(TG_GCODE_MODE);
	_tg_set_source(XIO_DEV_PGM);
    60cc:	84 e0       	ldi	r24, 0x04	; 4
    60ce:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <_tg_set_source>
    60d2:	20 e0       	ldi	r18, 0x00	; 0
    60d4:	30 e0       	ldi	r19, 0x00	; 0
    60d6:	1d c0       	rjmp	.+58     	; 0x6112 <tg_parser+0x9e>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    60d8:	10 92 e2 22 	sts	0x22E2, r1
			case 'F': return (_tg_test_file());
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    60dc:	10 92 e1 22 	sts	0x22E1, r1
	switch (tg.mode) {
    60e0:	80 91 e2 22 	lds	r24, 0x22E2
    60e4:	82 30       	cpi	r24, 0x02	; 2
    60e6:	41 f0       	breq	.+16     	; 0x60f8 <tg_parser+0x84>
    60e8:	83 30       	cpi	r24, 0x03	; 3
    60ea:	51 f0       	breq	.+20     	; 0x6100 <tg_parser+0x8c>
    60ec:	81 30       	cpi	r24, 0x01	; 1
    60ee:	69 f4       	brne	.+26     	; 0x610a <tg_parser+0x96>
//		case TG_CONTROL_MODE: 
//			break;

		case TG_CONFIG_MODE:
			tg.status = cfg_parse(buf);
    60f0:	cf 01       	movw	r24, r30
    60f2:	0e 94 87 19 	call	0x330e	; 0x330e <cfg_parse>
    60f6:	07 c0       	rjmp	.+14     	; 0x6106 <tg_parser+0x92>
			break;

		case TG_GCODE_MODE: 
			tg.status = gc_gcode_parser(buf);
    60f8:	cf 01       	movw	r24, r30
    60fa:	0e 94 24 16 	call	0x2c48	; 0x2c48 <gc_gcode_parser>
    60fe:	03 c0       	rjmp	.+6      	; 0x6106 <tg_parser+0x92>
			break;

		case TG_DIRECT_DRIVE_MODE:
			tg.status = dd_parser(buf);
    6100:	cf 01       	movw	r24, r30
    6102:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <dd_parser>
    6106:	80 93 e1 22 	sts	0x22E1, r24
			break;
	}
	return (tg.status);
    610a:	80 91 e1 22 	lds	r24, 0x22E1
    610e:	28 2f       	mov	r18, r24
    6110:	30 e0       	ldi	r19, 0x00	; 0
}
    6112:	c9 01       	movw	r24, r18
    6114:	08 95       	ret

00006116 <_tg_poll_active>:
/* 
 * _tg_poll_active() - Perform a non-blocking line read from active input device
 */

static void _tg_poll_active(uint8_t d)
{
    6116:	cf 93       	push	r28
    6118:	df 93       	push	r29
    611a:	48 2f       	mov	r20, r24
	if (tg.dev[d].state != TG_SRC_ACTIVE) {			// sanity check
    611c:	28 2f       	mov	r18, r24
    611e:	30 e0       	ldi	r19, 0x00	; 0
    6120:	84 e5       	ldi	r24, 0x54	; 84
    6122:	90 e0       	ldi	r25, 0x00	; 0
    6124:	28 9f       	mul	r18, r24
    6126:	f0 01       	movw	r30, r0
    6128:	29 9f       	mul	r18, r25
    612a:	f0 0d       	add	r31, r0
    612c:	38 9f       	mul	r19, r24
    612e:	f0 0d       	add	r31, r0
    6130:	11 24       	eor	r1, r1
    6132:	e0 52       	subi	r30, 0x20	; 32
    6134:	fd 4d       	sbci	r31, 0xDD	; 221
    6136:	97 81       	ldd	r25, Z+7	; 0x07
    6138:	91 30       	cpi	r25, 0x01	; 1
    613a:	09 f0       	breq	.+2      	; 0x613e <_tg_poll_active+0x28>
    613c:	5b c0       	rjmp	.+182    	; 0x61f4 <_tg_poll_active+0xde>
		return;
	}

	// special handling for file sources
	if (tg.source == XIO_DEV_PGM) {
    613e:	80 91 e3 22 	lds	r24, 0x22E3
    6142:	84 30       	cpi	r24, 0x04	; 4
    6144:	39 f4       	brne	.+14     	; 0x6154 <_tg_poll_active+0x3e>
		if (tg.state == TG_STATE_READY_UNPROMPTED) {
    6146:	80 91 e0 22 	lds	r24, 0x22E0
    614a:	88 23       	and	r24, r24
    614c:	09 f0       	breq	.+2      	; 0x6150 <_tg_poll_active+0x3a>
    614e:	52 c0       	rjmp	.+164    	; 0x61f4 <_tg_poll_active+0xde>
			tg.state = TG_STATE_READY_PROMPTED; 	// issue "virtual prompt"
    6150:	90 93 e0 22 	sts	0x22E0, r25
			return;									// not ready for next line
		}
	}

	// read input line or return if not a completed line
	if ((tg.status = xio_fget_ln(d, tg.dev[d].buf, tg.dev[d].len)) == TG_OK) {
    6154:	85 e1       	ldi	r24, 0x15	; 21
    6156:	90 e0       	ldi	r25, 0x00	; 0
    6158:	28 9f       	mul	r18, r24
    615a:	e0 01       	movw	r28, r0
    615c:	29 9f       	mul	r18, r25
    615e:	d0 0d       	add	r29, r0
    6160:	38 9f       	mul	r19, r24
    6162:	d0 0d       	add	r29, r0
    6164:	11 24       	eor	r1, r1
    6166:	cc 0f       	add	r28, r28
    6168:	dd 1f       	adc	r29, r29
    616a:	cc 0f       	add	r28, r28
    616c:	dd 1f       	adc	r29, r29
    616e:	c5 51       	subi	r28, 0x15	; 21
    6170:	dd 4d       	sbci	r29, 0xDD	; 221
    6172:	84 e5       	ldi	r24, 0x54	; 84
    6174:	90 e0       	ldi	r25, 0x00	; 0
    6176:	28 9f       	mul	r18, r24
    6178:	f0 01       	movw	r30, r0
    617a:	29 9f       	mul	r18, r25
    617c:	f0 0d       	add	r31, r0
    617e:	38 9f       	mul	r19, r24
    6180:	f0 0d       	add	r31, r0
    6182:	11 24       	eor	r1, r1
    6184:	e0 52       	subi	r30, 0x20	; 32
    6186:	fd 4d       	sbci	r31, 0xDD	; 221
    6188:	84 2f       	mov	r24, r20
    618a:	be 01       	movw	r22, r28
    618c:	40 85       	ldd	r20, Z+8	; 0x08
    618e:	0e 94 17 28 	call	0x502e	; 0x502e <xio_fget_ln>
    6192:	80 93 e1 22 	sts	0x22E1, r24
    6196:	88 23       	and	r24, r24
    6198:	29 f4       	brne	.+10     	; 0x61a4 <_tg_poll_active+0x8e>
		tg.status = tg_parser(tg.dev[d].buf);	// dispatch to parser
    619a:	ce 01       	movw	r24, r28
    619c:	0e 94 3a 30 	call	0x6074	; 0x6074 <tg_parser>
    61a0:	80 93 e1 22 	sts	0x22E1, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_STATE_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    61a4:	80 91 e1 22 	lds	r24, 0x22E1
    61a8:	82 30       	cpi	r24, 0x02	; 2
    61aa:	61 f0       	breq	.+24     	; 0x61c4 <_tg_poll_active+0xae>
    61ac:	83 30       	cpi	r24, 0x03	; 3
    61ae:	28 f4       	brcc	.+10     	; 0x61ba <_tg_poll_active+0xa4>
    61b0:	88 23       	and	r24, r24
    61b2:	f1 f0       	breq	.+60     	; 0x61f0 <_tg_poll_active+0xda>
    61b4:	81 30       	cpi	r24, 0x01	; 1
    61b6:	e1 f4       	brne	.+56     	; 0x61f0 <_tg_poll_active+0xda>
    61b8:	1d c0       	rjmp	.+58     	; 0x61f4 <_tg_poll_active+0xde>
    61ba:	83 30       	cpi	r24, 0x03	; 3
    61bc:	31 f0       	breq	.+12     	; 0x61ca <_tg_poll_active+0xb4>
    61be:	84 30       	cpi	r24, 0x04	; 4
    61c0:	b9 f4       	brne	.+46     	; 0x61f0 <_tg_poll_active+0xda>
    61c2:	06 c0       	rjmp	.+12     	; 0x61d0 <_tg_poll_active+0xba>
		case TG_NOOP: {
			break;
		}

		case TG_CONTINUE: { 						// returned without a new line
			tg.state = TG_STATE_READING_COMMAND; 
    61c4:	80 93 e0 22 	sts	0x22E0, r24
    61c8:	15 c0       	rjmp	.+42     	; 0x61f4 <_tg_poll_active+0xde>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    61ca:	10 92 e2 22 	sts	0x22E2, r1
    61ce:	10 c0       	rjmp	.+32     	; 0x61f0 <_tg_poll_active+0xda>
			tg.state = TG_STATE_READY_UNPROMPTED;
			break;
		}
					  	
		case TG_EOF: {								// file devices only
			printf_P(PSTR("End of command file\n"));
    61d0:	0f 92       	push	r0
    61d2:	0f 92       	push	r0
    61d4:	88 eb       	ldi	r24, 0xB8	; 184
    61d6:	9b e1       	ldi	r25, 0x1B	; 27
    61d8:	ed b7       	in	r30, 0x3d	; 61
    61da:	fe b7       	in	r31, 0x3e	; 62
    61dc:	81 83       	std	Z+1, r24	; 0x01
    61de:	92 83       	std	Z+2, r25	; 0x02
    61e0:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
			_tg_set_source(tg.source_default);		// reset to default src
    61e4:	0f 90       	pop	r0
    61e6:	0f 90       	pop	r0
    61e8:	80 91 e4 22 	lds	r24, 0x22E4
    61ec:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <_tg_set_source>
			tg.state = TG_STATE_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_STATE_READY_UNPROMPTED;	// traps various error returns
    61f0:	10 92 e0 22 	sts	0x22E0, r1
		}
	}
}
    61f4:	df 91       	pop	r29
    61f6:	cf 91       	pop	r28
    61f8:	08 95       	ret

000061fa <tg_controller>:
 *	more to the point - a hack. If the flow of control gets much more complicated 
 *	it will make sense to replace this section with an event driven dispatcher.
 */

void tg_controller()
{
    61fa:	cf 93       	push	r28
    61fc:	df 93       	push	r29
	tgModeStringDirect
};

void _tg_prompt()
{
	if ((tg.prompts) && (tg.state == TG_STATE_READY_UNPROMPTED)) {
    61fe:	80 91 e5 22 	lds	r24, 0x22E5
    6202:	88 23       	and	r24, r24
    6204:	09 f1       	breq	.+66     	; 0x6248 <tg_controller+0x4e>
    6206:	80 91 e0 22 	lds	r24, 0x22E0
    620a:	88 23       	and	r24, r24
    620c:	e9 f4       	brne	.+58     	; 0x6248 <tg_controller+0x4e>
		printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    620e:	80 91 e2 22 	lds	r24, 0x22E2
    6212:	e8 2f       	mov	r30, r24
    6214:	f0 e0       	ldi	r31, 0x00	; 0
    6216:	ee 0f       	add	r30, r30
    6218:	ff 1f       	adc	r31, r31
    621a:	e0 55       	subi	r30, 0x50	; 80
    621c:	f4 4e       	sbci	r31, 0xE4	; 228
    621e:	25 91       	lpm	r18, Z+
    6220:	34 91       	lpm	r19, Z+
    6222:	00 d0       	rcall	.+0      	; 0x6224 <tg_controller+0x2a>
    6224:	0f 92       	push	r0
    6226:	8a ed       	ldi	r24, 0xDA	; 218
    6228:	9b e1       	ldi	r25, 0x1B	; 27
    622a:	ed b7       	in	r30, 0x3d	; 61
    622c:	fe b7       	in	r31, 0x3e	; 62
    622e:	81 83       	std	Z+1, r24	; 0x01
    6230:	92 83       	std	Z+2, r25	; 0x02
    6232:	23 83       	std	Z+3, r18	; 0x03
    6234:	34 83       	std	Z+4, r19	; 0x04
    6236:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
		tg.state = TG_STATE_READY_PROMPTED;
    623a:	81 e0       	ldi	r24, 0x01	; 1
    623c:	80 93 e0 22 	sts	0x22E0, r24
    6240:	0f 90       	pop	r0
    6242:	0f 90       	pop	r0
    6244:	0f 90       	pop	r0
    6246:	0f 90       	pop	r0
	}
	// bastardized prompts for file sources (no asterisk returned)
	if ((!tg.prompts) && (tg.state == TG_STATE_READY_UNPROMPTED)) {
    6248:	80 91 e5 22 	lds	r24, 0x22E5
    624c:	88 23       	and	r24, r24
    624e:	f1 f4       	brne	.+60     	; 0x628c <tg_controller+0x92>
    6250:	80 91 e0 22 	lds	r24, 0x22E0
    6254:	88 23       	and	r24, r24
    6256:	d1 f4       	brne	.+52     	; 0x628c <tg_controller+0x92>
		printf_P(PSTR("TinyG [%S]> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    6258:	80 91 e2 22 	lds	r24, 0x22E2
    625c:	e8 2f       	mov	r30, r24
    625e:	f0 e0       	ldi	r31, 0x00	; 0
    6260:	ee 0f       	add	r30, r30
    6262:	ff 1f       	adc	r31, r31
    6264:	e0 55       	subi	r30, 0x50	; 80
    6266:	f4 4e       	sbci	r31, 0xE4	; 228
    6268:	25 91       	lpm	r18, Z+
    626a:	34 91       	lpm	r19, Z+
    626c:	00 d0       	rcall	.+0      	; 0x626e <tg_controller+0x74>
    626e:	0f 92       	push	r0
    6270:	8d ec       	ldi	r24, 0xCD	; 205
    6272:	9b e1       	ldi	r25, 0x1B	; 27
    6274:	ed b7       	in	r30, 0x3d	; 61
    6276:	fe b7       	in	r31, 0x3e	; 62
    6278:	81 83       	std	Z+1, r24	; 0x01
    627a:	92 83       	std	Z+2, r25	; 0x02
    627c:	23 83       	std	Z+3, r18	; 0x03
    627e:	34 83       	std	Z+4, r19	; 0x04
    6280:	0e 94 cf 49 	call	0x939e	; 0x939e <printf_P>
    6284:	0f 90       	pop	r0
    6286:	0f 90       	pop	r0
    6288:	0f 90       	pop	r0
    628a:	0f 90       	pop	r0
//	uint8_t i = 1;

	_tg_prompt();		// Send a prompt - but only if controller is ready for input


	if ((tg.status = mc_line_continuation()) == TG_OK) { // Run the line generator 
    628c:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <mc_line_continuation>
    6290:	80 93 e1 22 	sts	0x22E1, r24
    6294:	88 23       	and	r24, r24
    6296:	31 f0       	breq	.+12     	; 0x62a4 <tg_controller+0xaa>
		tg.state = TG_STATE_READY_UNPROMPTED;
		return;
	}

	if ((tg.status = mc_arc_continuation()) == TG_OK) {	 // Run the arc generator 
    6298:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <mc_arc_continuation>
    629c:	80 93 e1 22 	sts	0x22E1, r24
    62a0:	88 23       	and	r24, r24
    62a2:	19 f4       	brne	.+6      	; 0x62aa <tg_controller+0xb0>
		tg.state = TG_STATE_READY_UNPROMPTED;
    62a4:	10 92 e0 22 	sts	0x22E0, r1
    62a8:	21 c0       	rjmp	.+66     	; 0x62ec <tg_controller+0xf2>
		return;
	}

	for (tg.i=1; tg.i < XIO_DEV_MAX; tg.i++) {	// Scan all input devices 
    62aa:	81 e0       	ldi	r24, 0x01	; 1
    62ac:	80 93 e6 22 	sts	0x22E6, r24
		tg.dev[tg.i].poll_func(tg.i);			//   ...(except /dev/null)
    62b0:	ca e2       	ldi	r28, 0x2A	; 42
    62b2:	d0 e0       	ldi	r29, 0x00	; 0
    62b4:	17 c0       	rjmp	.+46     	; 0x62e4 <tg_controller+0xea>
    62b6:	82 2f       	mov	r24, r18
    62b8:	90 e0       	ldi	r25, 0x00	; 0
    62ba:	8c 9f       	mul	r24, r28
    62bc:	f0 01       	movw	r30, r0
    62be:	8d 9f       	mul	r24, r29
    62c0:	f0 0d       	add	r31, r0
    62c2:	9c 9f       	mul	r25, r28
    62c4:	f0 0d       	add	r31, r0
    62c6:	11 24       	eor	r1, r1
    62c8:	ee 0f       	add	r30, r30
    62ca:	ff 1f       	adc	r31, r31
    62cc:	ee 51       	subi	r30, 0x1E	; 30
    62ce:	fd 4d       	sbci	r31, 0xDD	; 221
    62d0:	07 80       	ldd	r0, Z+7	; 0x07
    62d2:	f0 85       	ldd	r31, Z+8	; 0x08
    62d4:	e0 2d       	mov	r30, r0
    62d6:	82 2f       	mov	r24, r18
    62d8:	19 95       	eicall
	if ((tg.status = mc_arc_continuation()) == TG_OK) {	 // Run the arc generator 
		tg.state = TG_STATE_READY_UNPROMPTED;
		return;
	}

	for (tg.i=1; tg.i < XIO_DEV_MAX; tg.i++) {	// Scan all input devices 
    62da:	80 91 e6 22 	lds	r24, 0x22E6
    62de:	8f 5f       	subi	r24, 0xFF	; 255
    62e0:	80 93 e6 22 	sts	0x22E6, r24
    62e4:	20 91 e6 22 	lds	r18, 0x22E6
    62e8:	25 30       	cpi	r18, 0x05	; 5
    62ea:	28 f3       	brcs	.-54     	; 0x62b6 <tg_controller+0xbc>
		tg.dev[tg.i].poll_func(tg.i);			//   ...(except /dev/null)
	}
}
    62ec:	df 91       	pop	r29
    62ee:	cf 91       	pop	r28
    62f0:	08 95       	ret

000062f2 <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    62f2:	08 95       	ret

000062f4 <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    62f4:	80 e0       	ldi	r24, 0x00	; 0
    62f6:	90 e0       	ldi	r25, 0x00	; 0
    62f8:	08 95       	ret

000062fa <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    62fa:	10 92 8b 24 	sts	0x248B, r1
	mv.move_buffer_tail = 0;
    62fe:	10 92 8c 24 	sts	0x248C, r1
}
    6302:	08 95       	ret

00006304 <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    6304:	90 91 8b 24 	lds	r25, 0x248B
    6308:	80 91 8c 24 	lds	r24, 0x248C
    630c:	98 17       	cp	r25, r24
    630e:	19 f4       	brne	.+6      	; 0x6316 <mv_dequeue_move_buffer+0x12>
    6310:	20 e0       	ldi	r18, 0x00	; 0
    6312:	30 e0       	ldi	r19, 0x00	; 0
    6314:	17 c0       	rjmp	.+46     	; 0x6344 <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    6316:	90 91 8c 24 	lds	r25, 0x248C
    631a:	8e e1       	ldi	r24, 0x1E	; 30
    631c:	98 9f       	mul	r25, r24
    631e:	90 01       	movw	r18, r0
    6320:	11 24       	eor	r1, r1
    6322:	21 57       	subi	r18, 0x71	; 113
    6324:	3b 4d       	sbci	r19, 0xDB	; 219
    6326:	20 93 8d 24 	sts	0x248D, r18
    632a:	30 93 8e 24 	sts	0x248E, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    632e:	80 91 8c 24 	lds	r24, 0x248C
    6332:	8f 5f       	subi	r24, 0xFF	; 255
    6334:	80 93 8c 24 	sts	0x248C, r24
    6338:	80 91 8c 24 	lds	r24, 0x248C
    633c:	84 30       	cpi	r24, 0x04	; 4
    633e:	10 f0       	brcs	.+4      	; 0x6344 <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    6340:	10 92 8c 24 	sts	0x248C, r1
	}
	return (mv.p); 
}
    6344:	c9 01       	movw	r24, r18
    6346:	08 95       	ret

00006348 <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    6348:	90 91 8b 24 	lds	r25, 0x248B
    634c:	9f 5f       	subi	r25, 0xFF	; 255
    634e:	94 30       	cpi	r25, 0x04	; 4
    6350:	08 f0       	brcs	.+2      	; 0x6354 <mv_test_move_buffer_full+0xc>
    6352:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    6354:	80 91 8c 24 	lds	r24, 0x248C
    6358:	20 e0       	ldi	r18, 0x00	; 0
    635a:	89 17       	cp	r24, r25
    635c:	09 f4       	brne	.+2      	; 0x6360 <mv_test_move_buffer_full+0x18>
    635e:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    6360:	82 2f       	mov	r24, r18
    6362:	08 95       	ret

00006364 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    6364:	0b c0       	rjmp	.+22     	; 0x637c <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    6366:	80 91 48 00 	lds	r24, 0x0048
    636a:	81 60       	ori	r24, 0x01	; 1
    636c:	80 93 48 00 	sts	0x0048, r24
    6370:	88 95       	sleep
    6372:	80 91 48 00 	lds	r24, 0x0048
    6376:	8e 7f       	andi	r24, 0xFE	; 254
    6378:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    637c:	90 91 8c 24 	lds	r25, 0x248C
    6380:	80 91 8b 24 	lds	r24, 0x248B
    6384:	98 17       	cp	r25, r24
    6386:	79 f7       	brne	.-34     	; 0x6366 <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    6388:	08 95       	ret

0000638a <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    638a:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    638c:	80 91 8b 24 	lds	r24, 0x248B
    6390:	80 93 8c 24 	sts	0x248C, r24
	mv.p = NULL;
    6394:	10 92 8d 24 	sts	0x248D, r1
    6398:	10 92 8e 24 	sts	0x248E, r1
	sei();
    639c:	78 94       	sei
}
    639e:	08 95       	ret

000063a0 <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    63a0:	2f 92       	push	r2
    63a2:	3f 92       	push	r3
    63a4:	4f 92       	push	r4
    63a6:	5f 92       	push	r5
    63a8:	6f 92       	push	r6
    63aa:	7f 92       	push	r7
    63ac:	8f 92       	push	r8
    63ae:	9f 92       	push	r9
    63b0:	af 92       	push	r10
    63b2:	bf 92       	push	r11
    63b4:	cf 92       	push	r12
    63b6:	df 92       	push	r13
    63b8:	ef 92       	push	r14
    63ba:	ff 92       	push	r15
    63bc:	0f 93       	push	r16
    63be:	1f 93       	push	r17
    63c0:	df 93       	push	r29
    63c2:	cf 93       	push	r28
    63c4:	cd b7       	in	r28, 0x3d	; 61
    63c6:	de b7       	in	r29, 0x3e	; 62
    63c8:	2b 97       	sbiw	r28, 0x0b	; 11
    63ca:	cd bf       	out	0x3d, r28	; 61
    63cc:	de bf       	out	0x3e, r29	; 62
    63ce:	3b 01       	movw	r6, r22
    63d0:	4c 01       	movw	r8, r24
    63d2:	19 01       	movw	r2, r18
    63d4:	2a 01       	movw	r4, r20
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    63d6:	20 91 8b 24 	lds	r18, 0x248B
    63da:	2f 5f       	subi	r18, 0xFF	; 255
    63dc:	29 87       	std	Y+9, r18	; 0x09
    63de:	24 30       	cpi	r18, 0x04	; 4
    63e0:	08 f0       	brcs	.+2      	; 0x63e4 <mv_queue_move_buffer+0x44>
    63e2:	19 86       	std	Y+9, r1	; 0x09
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    63e4:	80 91 8c 24 	lds	r24, 0x248C
    63e8:	39 85       	ldd	r19, Y+9	; 0x09
    63ea:	83 17       	cp	r24, r19
    63ec:	11 f4       	brne	.+4      	; 0x63f2 <mv_queue_move_buffer+0x52>
    63ee:	86 e0       	ldi	r24, 0x06	; 6
    63f0:	92 c1       	rjmp	.+804    	; 0x6716 <mv_queue_move_buffer+0x376>
		return (TG_BUFFER_FULL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    63f2:	e0 91 8b 24 	lds	r30, 0x248B
    63f6:	8e e1       	ldi	r24, 0x1E	; 30
    63f8:	e8 9f       	mul	r30, r24
    63fa:	f0 01       	movw	r30, r0
    63fc:	11 24       	eor	r1, r1
    63fe:	e1 57       	subi	r30, 0x71	; 113
    6400:	fb 4d       	sbci	r31, 0xDB	; 219
    6402:	e0 93 8d 24 	sts	0x248D, r30
    6406:	f0 93 8e 24 	sts	0x248E, r31
	memset(mv.p, 0, sizeof(struct mvMove));
    640a:	df 01       	movw	r26, r30
    640c:	1d 92       	st	X+, r1
    640e:	8a 95       	dec	r24
    6410:	e9 f7       	brne	.-6      	; 0x640c <mv_queue_move_buffer+0x6c>
	mv.p->a[X].steps = steps_x;
    6412:	e0 91 8d 24 	lds	r30, 0x248D
    6416:	f0 91 8e 24 	lds	r31, 0x248E
    641a:	ea 87       	std	Y+10, r30	; 0x0a
    641c:	fb 87       	std	Y+11, r31	; 0x0b
    641e:	60 82       	st	Z, r6
    6420:	71 82       	std	Z+1, r7	; 0x01
    6422:	82 82       	std	Z+2, r8	; 0x02
    6424:	93 82       	std	Z+3, r9	; 0x03
	mv.p->a[Y].steps = steps_y;
    6426:	22 86       	std	Z+10, r2	; 0x0a
    6428:	33 86       	std	Z+11, r3	; 0x0b
    642a:	44 86       	std	Z+12, r4	; 0x0c
    642c:	55 86       	std	Z+13, r5	; 0x0d
	mv.p->a[Z].steps = steps_z;
    642e:	e4 8a       	std	Z+20, r14	; 0x14
    6430:	f5 8a       	std	Z+21, r15	; 0x15
    6432:	06 8b       	std	Z+22, r16	; 0x16
    6434:	17 8b       	std	Z+23, r17	; 0x17
	ticks = microseconds * TICKS_PER_MICROSECOND;
    6436:	a5 e0       	ldi	r26, 0x05	; 5
    6438:	aa 0c       	add	r10, r10
    643a:	bb 1c       	adc	r11, r11
    643c:	cc 1c       	adc	r12, r12
    643e:	dd 1c       	adc	r13, r13
    6440:	aa 95       	dec	r26
    6442:	d1 f7       	brne	.-12     	; 0x6438 <mv_queue_move_buffer+0x98>
    6444:	a6 01       	movw	r20, r12
    6446:	95 01       	movw	r18, r10
    6448:	60 e0       	ldi	r22, 0x00	; 0
    644a:	70 e0       	ldi	r23, 0x00	; 0
    644c:	80 e0       	ldi	r24, 0x00	; 0
    644e:	90 e0       	ldi	r25, 0x00	; 0
    6450:	a9 82       	std	Y+1, r10	; 0x01
    6452:	3a 83       	std	Y+2, r19	; 0x02
    6454:	4b 83       	std	Y+3, r20	; 0x03
    6456:	5c 83       	std	Y+4, r21	; 0x04
    6458:	6d 83       	std	Y+5, r22	; 0x05
    645a:	7e 83       	std	Y+6, r23	; 0x06
    645c:	8f 83       	std	Y+7, r24	; 0x07
    645e:	98 87       	std	Y+8, r25	; 0x08

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    6460:	61 14       	cp	r6, r1
    6462:	71 04       	cpc	r7, r1
    6464:	81 04       	cpc	r8, r1
    6466:	91 04       	cpc	r9, r1
    6468:	09 f0       	breq	.+2      	; 0x646c <mv_queue_move_buffer+0xcc>
    646a:	4b c0       	rjmp	.+150    	; 0x6502 <mv_queue_move_buffer+0x162>
    646c:	21 14       	cp	r2, r1
    646e:	31 04       	cpc	r3, r1
    6470:	41 04       	cpc	r4, r1
    6472:	51 04       	cpc	r5, r1
    6474:	09 f0       	breq	.+2      	; 0x6478 <mv_queue_move_buffer+0xd8>
    6476:	45 c0       	rjmp	.+138    	; 0x6502 <mv_queue_move_buffer+0x162>
    6478:	e1 14       	cp	r14, r1
    647a:	f1 04       	cpc	r15, r1
    647c:	01 05       	cpc	r16, r1
    647e:	11 05       	cpc	r17, r1
    6480:	09 f0       	breq	.+2      	; 0x6484 <mv_queue_move_buffer+0xe4>
    6482:	3f c0       	rjmp	.+126    	; 0x6502 <mv_queue_move_buffer+0x162>
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    6484:	81 e0       	ldi	r24, 0x01	; 1
    6486:	90 e0       	ldi	r25, 0x00	; 0
    6488:	a0 e0       	ldi	r26, 0x00	; 0
    648a:	b0 e0       	ldi	r27, 0x00	; 0
    648c:	80 83       	st	Z, r24
    648e:	91 83       	std	Z+1, r25	; 0x01
    6490:	a2 83       	std	Z+2, r26	; 0x02
    6492:	b3 83       	std	Z+3, r27	; 0x03
		mv.p->a[X].postscale = 1;
    6494:	81 e0       	ldi	r24, 0x01	; 1
    6496:	90 e0       	ldi	r25, 0x00	; 0
    6498:	86 83       	std	Z+6, r24	; 0x06
    649a:	97 83       	std	Z+7, r25	; 0x07
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
    649c:	60 e0       	ldi	r22, 0x00	; 0
    649e:	70 e0       	ldi	r23, 0x00	; 0
    64a0:	80 e0       	ldi	r24, 0x00	; 0
    64a2:	90 e0       	ldi	r25, 0x00	; 0
    64a4:	aa 24       	eor	r10, r10
    64a6:	a3 94       	inc	r10
    64a8:	bb 24       	eor	r11, r11
    64aa:	cc 24       	eor	r12, r12
    64ac:	dd 24       	eor	r13, r13
    64ae:	ee 24       	eor	r14, r14
    64b0:	ff 24       	eor	r15, r15
    64b2:	00 e0       	ldi	r16, 0x00	; 0
    64b4:	10 e0       	ldi	r17, 0x00	; 0
    64b6:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <__udivdi3>
    64ba:	c9 01       	movw	r24, r18
    64bc:	da 01       	movw	r26, r20
    64be:	9c 01       	movw	r18, r24
    64c0:	ad 01       	movw	r20, r26
    64c2:	10 c0       	rjmp	.+32     	; 0x64e4 <mv_queue_move_buffer+0x144>
		while (ticks_per_step & 0xFFFF0000) {
			ticks_per_step >>= 1;
    64c4:	56 95       	lsr	r21
    64c6:	47 95       	ror	r20
    64c8:	37 95       	ror	r19
    64ca:	27 95       	ror	r18
			mv.p->a[X].postscale <<= 1;
    64cc:	aa 85       	ldd	r26, Y+10	; 0x0a
    64ce:	bb 85       	ldd	r27, Y+11	; 0x0b
    64d0:	16 96       	adiw	r26, 0x06	; 6
    64d2:	8d 91       	ld	r24, X+
    64d4:	9c 91       	ld	r25, X
    64d6:	17 97       	sbiw	r26, 0x07	; 7
    64d8:	88 0f       	add	r24, r24
    64da:	99 1f       	adc	r25, r25
    64dc:	16 96       	adiw	r26, 0x06	; 6
    64de:	8d 93       	st	X+, r24
    64e0:	9c 93       	st	X, r25
    64e2:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
		while (ticks_per_step & 0xFFFF0000) {
    64e4:	da 01       	movw	r26, r20
    64e6:	c9 01       	movw	r24, r18
    64e8:	80 70       	andi	r24, 0x00	; 0
    64ea:	90 70       	andi	r25, 0x00	; 0
    64ec:	00 97       	sbiw	r24, 0x00	; 0
    64ee:	a1 05       	cpc	r26, r1
    64f0:	b1 05       	cpc	r27, r1
    64f2:	41 f7       	brne	.-48     	; 0x64c4 <mv_queue_move_buffer+0x124>
			ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    64f4:	ea 85       	ldd	r30, Y+10	; 0x0a
    64f6:	fb 85       	ldd	r31, Y+11	; 0x0b
    64f8:	24 83       	std	Z+4, r18	; 0x04
    64fa:	35 83       	std	Z+5, r19	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    64fc:	81 e0       	ldi	r24, 0x01	; 1
    64fe:	81 87       	std	Z+9, r24	; 0x09
    6500:	04 c1       	rjmp	.+520    	; 0x670a <mv_queue_move_buffer+0x36a>
	mv.p->a[Y].steps = steps_y;
	mv.p->a[Z].steps = steps_z;
	ticks = microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    6502:	44 24       	eor	r4, r4
    6504:	55 24       	eor	r5, r5
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    6506:	40 91 8d 24 	lds	r20, 0x248D
    650a:	50 91 8e 24 	lds	r21, 0x248E
    650e:	34 2c       	mov	r3, r4
    6510:	25 2c       	mov	r2, r5
    6512:	c2 01       	movw	r24, r4
    6514:	fc 01       	movw	r30, r24
    6516:	73 e0       	ldi	r23, 0x03	; 3
    6518:	ee 0f       	add	r30, r30
    651a:	ff 1f       	adc	r31, r31
    651c:	7a 95       	dec	r23
    651e:	e1 f7       	brne	.-8      	; 0x6518 <mv_queue_move_buffer+0x178>
    6520:	88 0f       	add	r24, r24
    6522:	99 1f       	adc	r25, r25
    6524:	e8 0f       	add	r30, r24
    6526:	f9 1f       	adc	r31, r25
    6528:	e4 0f       	add	r30, r20
    652a:	f5 1f       	adc	r31, r21
    652c:	80 81       	ld	r24, Z
    652e:	91 81       	ldd	r25, Z+1	; 0x01
    6530:	a2 81       	ldd	r26, Z+2	; 0x02
    6532:	b3 81       	ldd	r27, Z+3	; 0x03
    6534:	00 97       	sbiw	r24, 0x00	; 0
    6536:	a1 05       	cpc	r26, r1
    6538:	b1 05       	cpc	r27, r1
    653a:	09 f4       	brne	.+2      	; 0x653e <mv_queue_move_buffer+0x19e>
    653c:	de c0       	rjmp	.+444    	; 0x66fa <mv_queue_move_buffer+0x35a>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    653e:	b7 ff       	sbrs	r27, 7
    6540:	10 c0       	rjmp	.+32     	; 0x6562 <mv_queue_move_buffer+0x1c2>
    6542:	c2 01       	movw	r24, r4
    6544:	fc 01       	movw	r30, r24
    6546:	33 e0       	ldi	r19, 0x03	; 3
    6548:	ee 0f       	add	r30, r30
    654a:	ff 1f       	adc	r31, r31
    654c:	3a 95       	dec	r19
    654e:	e1 f7       	brne	.-8      	; 0x6548 <mv_queue_move_buffer+0x1a8>
    6550:	88 0f       	add	r24, r24
    6552:	99 1f       	adc	r25, r25
    6554:	e8 0f       	add	r30, r24
    6556:	f9 1f       	adc	r31, r25
    6558:	e4 0f       	add	r30, r20
    655a:	f5 1f       	adc	r31, r21
    655c:	21 e0       	ldi	r18, 0x01	; 1
    655e:	20 87       	std	Z+8, r18	; 0x08
    6560:	0e c0       	rjmp	.+28     	; 0x657e <mv_queue_move_buffer+0x1de>
    6562:	c2 01       	movw	r24, r4
    6564:	fc 01       	movw	r30, r24
    6566:	03 e0       	ldi	r16, 0x03	; 3
    6568:	ee 0f       	add	r30, r30
    656a:	ff 1f       	adc	r31, r31
    656c:	0a 95       	dec	r16
    656e:	e1 f7       	brne	.-8      	; 0x6568 <mv_queue_move_buffer+0x1c8>
    6570:	88 0f       	add	r24, r24
    6572:	99 1f       	adc	r25, r25
    6574:	e8 0f       	add	r30, r24
    6576:	f9 1f       	adc	r31, r25
    6578:	e4 0f       	add	r30, r20
    657a:	f5 1f       	adc	r31, r21
    657c:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    657e:	83 2d       	mov	r24, r3
    6580:	92 2d       	mov	r25, r2
    6582:	fc 01       	movw	r30, r24
    6584:	b3 e0       	ldi	r27, 0x03	; 3
    6586:	ee 0f       	add	r30, r30
    6588:	ff 1f       	adc	r31, r31
    658a:	ba 95       	dec	r27
    658c:	e1 f7       	brne	.-8      	; 0x6586 <mv_queue_move_buffer+0x1e6>
    658e:	88 0f       	add	r24, r24
    6590:	99 1f       	adc	r25, r25
    6592:	e8 0f       	add	r30, r24
    6594:	f9 1f       	adc	r31, r25
    6596:	e4 0f       	add	r30, r20
    6598:	f5 1f       	adc	r31, r21
    659a:	83 2d       	mov	r24, r3
    659c:	92 2d       	mov	r25, r2
    659e:	9c 01       	movw	r18, r24
    65a0:	73 e0       	ldi	r23, 0x03	; 3
    65a2:	22 0f       	add	r18, r18
    65a4:	33 1f       	adc	r19, r19
    65a6:	7a 95       	dec	r23
    65a8:	e1 f7       	brne	.-8      	; 0x65a2 <mv_queue_move_buffer+0x202>
    65aa:	88 0f       	add	r24, r24
    65ac:	99 1f       	adc	r25, r25
    65ae:	28 0f       	add	r18, r24
    65b0:	39 1f       	adc	r19, r25
    65b2:	42 0f       	add	r20, r18
    65b4:	53 1f       	adc	r21, r19
    65b6:	da 01       	movw	r26, r20
    65b8:	2d 91       	ld	r18, X+
    65ba:	3d 91       	ld	r19, X+
    65bc:	4d 91       	ld	r20, X+
    65be:	5c 91       	ld	r21, X
    65c0:	57 ff       	sbrs	r21, 7
    65c2:	07 c0       	rjmp	.+14     	; 0x65d2 <mv_queue_move_buffer+0x232>
    65c4:	50 95       	com	r21
    65c6:	40 95       	com	r20
    65c8:	30 95       	com	r19
    65ca:	21 95       	neg	r18
    65cc:	3f 4f       	sbci	r19, 0xFF	; 255
    65ce:	4f 4f       	sbci	r20, 0xFF	; 255
    65d0:	5f 4f       	sbci	r21, 0xFF	; 255
    65d2:	20 83       	st	Z, r18
    65d4:	31 83       	std	Z+1, r19	; 0x01
    65d6:	42 83       	std	Z+2, r20	; 0x02
    65d8:	53 83       	std	Z+3, r21	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    65da:	e0 91 8d 24 	lds	r30, 0x248D
    65de:	f0 91 8e 24 	lds	r31, 0x248E
    65e2:	ea 87       	std	Y+10, r30	; 0x0a
    65e4:	fb 87       	std	Y+11, r31	; 0x0b
    65e6:	83 2d       	mov	r24, r3
    65e8:	92 2d       	mov	r25, r2
    65ea:	fc 01       	movw	r30, r24
    65ec:	03 e0       	ldi	r16, 0x03	; 3
    65ee:	ee 0f       	add	r30, r30
    65f0:	ff 1f       	adc	r31, r31
    65f2:	0a 95       	dec	r16
    65f4:	e1 f7       	brne	.-8      	; 0x65ee <mv_queue_move_buffer+0x24e>
    65f6:	88 0f       	add	r24, r24
    65f8:	99 1f       	adc	r25, r25
    65fa:	e8 0f       	add	r30, r24
    65fc:	f9 1f       	adc	r31, r25
    65fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    6600:	3b 85       	ldd	r19, Y+11	; 0x0b
    6602:	e2 0f       	add	r30, r18
    6604:	f3 1f       	adc	r31, r19
    6606:	41 e0       	ldi	r20, 0x01	; 1
    6608:	50 e0       	ldi	r21, 0x00	; 0
    660a:	46 83       	std	Z+6, r20	; 0x06
    660c:	57 83       	std	Z+7, r21	; 0x07
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    660e:	83 2d       	mov	r24, r3
    6610:	92 2d       	mov	r25, r2
    6612:	fc 01       	movw	r30, r24
    6614:	b3 e0       	ldi	r27, 0x03	; 3
    6616:	ee 0f       	add	r30, r30
    6618:	ff 1f       	adc	r31, r31
    661a:	ba 95       	dec	r27
    661c:	e1 f7       	brne	.-8      	; 0x6616 <mv_queue_move_buffer+0x276>
    661e:	88 0f       	add	r24, r24
    6620:	99 1f       	adc	r25, r25
    6622:	e8 0f       	add	r30, r24
    6624:	f9 1f       	adc	r31, r25
    6626:	e2 0f       	add	r30, r18
    6628:	f3 1f       	adc	r31, r19
    662a:	e0 80       	ld	r14, Z
    662c:	f1 80       	ldd	r15, Z+1	; 0x01
    662e:	02 81       	ldd	r16, Z+2	; 0x02
    6630:	13 81       	ldd	r17, Z+3	; 0x03
    6632:	37 01       	movw	r6, r14
    6634:	48 01       	movw	r8, r16
    6636:	99 0c       	add	r9, r9
    6638:	66 08       	sbc	r6, r6
    663a:	76 2c       	mov	r7, r6
    663c:	43 01       	movw	r8, r6
    663e:	29 81       	ldd	r18, Y+1	; 0x01
    6640:	3a 81       	ldd	r19, Y+2	; 0x02
    6642:	4b 81       	ldd	r20, Y+3	; 0x03
    6644:	5c 81       	ldd	r21, Y+4	; 0x04
    6646:	6d 81       	ldd	r22, Y+5	; 0x05
    6648:	7e 81       	ldd	r23, Y+6	; 0x06
    664a:	8f 81       	ldd	r24, Y+7	; 0x07
    664c:	98 85       	ldd	r25, Y+8	; 0x08
    664e:	57 01       	movw	r10, r14
    6650:	68 01       	movw	r12, r16
    6652:	e6 2c       	mov	r14, r6
    6654:	f6 2c       	mov	r15, r6
    6656:	06 2d       	mov	r16, r6
    6658:	16 2d       	mov	r17, r6
    665a:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <__udivdi3>
    665e:	c9 01       	movw	r24, r18
    6660:	da 01       	movw	r26, r20
    6662:	ac 01       	movw	r20, r24
    6664:	bd 01       	movw	r22, r26
    6666:	2c c0       	rjmp	.+88     	; 0x66c0 <mv_queue_move_buffer+0x320>
				while (ticks_per_step & 0xFFFF0000) {
					ticks_per_step >>= 1;
    6668:	76 95       	lsr	r23
    666a:	67 95       	ror	r22
    666c:	57 95       	ror	r21
    666e:	47 95       	ror	r20
					mv.p->a[i].postscale <<= 1;
    6670:	83 2d       	mov	r24, r3
    6672:	92 2d       	mov	r25, r2
    6674:	dc 01       	movw	r26, r24
    6676:	33 e0       	ldi	r19, 0x03	; 3
    6678:	aa 0f       	add	r26, r26
    667a:	bb 1f       	adc	r27, r27
    667c:	3a 95       	dec	r19
    667e:	e1 f7       	brne	.-8      	; 0x6678 <mv_queue_move_buffer+0x2d8>
    6680:	88 0f       	add	r24, r24
    6682:	99 1f       	adc	r25, r25
    6684:	a8 0f       	add	r26, r24
    6686:	b9 1f       	adc	r27, r25
    6688:	8a 85       	ldd	r24, Y+10	; 0x0a
    668a:	9b 85       	ldd	r25, Y+11	; 0x0b
    668c:	a8 0f       	add	r26, r24
    668e:	b9 1f       	adc	r27, r25
    6690:	83 2d       	mov	r24, r3
    6692:	92 2d       	mov	r25, r2
    6694:	fc 01       	movw	r30, r24
    6696:	03 e0       	ldi	r16, 0x03	; 3
    6698:	ee 0f       	add	r30, r30
    669a:	ff 1f       	adc	r31, r31
    669c:	0a 95       	dec	r16
    669e:	e1 f7       	brne	.-8      	; 0x6698 <mv_queue_move_buffer+0x2f8>
    66a0:	88 0f       	add	r24, r24
    66a2:	99 1f       	adc	r25, r25
    66a4:	e8 0f       	add	r30, r24
    66a6:	f9 1f       	adc	r31, r25
    66a8:	2a 85       	ldd	r18, Y+10	; 0x0a
    66aa:	3b 85       	ldd	r19, Y+11	; 0x0b
    66ac:	e2 0f       	add	r30, r18
    66ae:	f3 1f       	adc	r31, r19
    66b0:	86 81       	ldd	r24, Z+6	; 0x06
    66b2:	97 81       	ldd	r25, Z+7	; 0x07
    66b4:	88 0f       	add	r24, r24
    66b6:	99 1f       	adc	r25, r25
    66b8:	16 96       	adiw	r26, 0x06	; 6
    66ba:	8d 93       	st	X+, r24
    66bc:	9c 93       	st	X, r25
    66be:	17 97       	sbiw	r26, 0x07	; 7

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
				while (ticks_per_step & 0xFFFF0000) {
    66c0:	db 01       	movw	r26, r22
    66c2:	ca 01       	movw	r24, r20
    66c4:	80 70       	andi	r24, 0x00	; 0
    66c6:	90 70       	andi	r25, 0x00	; 0
    66c8:	00 97       	sbiw	r24, 0x00	; 0
    66ca:	a1 05       	cpc	r26, r1
    66cc:	b1 05       	cpc	r27, r1
    66ce:	61 f6       	brne	.-104    	; 0x6668 <mv_queue_move_buffer+0x2c8>
					ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    66d0:	83 2d       	mov	r24, r3
    66d2:	92 2d       	mov	r25, r2
    66d4:	9c 01       	movw	r18, r24
    66d6:	73 e0       	ldi	r23, 0x03	; 3
    66d8:	22 0f       	add	r18, r18
    66da:	33 1f       	adc	r19, r19
    66dc:	7a 95       	dec	r23
    66de:	e1 f7       	brne	.-8      	; 0x66d8 <mv_queue_move_buffer+0x338>
    66e0:	88 0f       	add	r24, r24
    66e2:	99 1f       	adc	r25, r25
    66e4:	28 0f       	add	r18, r24
    66e6:	39 1f       	adc	r19, r25
    66e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    66ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    66ec:	82 0f       	add	r24, r18
    66ee:	93 1f       	adc	r25, r19
    66f0:	dc 01       	movw	r26, r24
    66f2:	14 96       	adiw	r26, 0x04	; 4
    66f4:	4d 93       	st	X+, r20
    66f6:	5c 93       	st	X, r21
    66f8:	15 97       	sbiw	r26, 0x05	; 5
    66fa:	08 94       	sec
    66fc:	41 1c       	adc	r4, r1
    66fe:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    6700:	b3 e0       	ldi	r27, 0x03	; 3
    6702:	4b 16       	cp	r4, r27
    6704:	51 04       	cpc	r5, r1
    6706:	09 f0       	breq	.+2      	; 0x670a <mv_queue_move_buffer+0x36a>
    6708:	fe ce       	rjmp	.-516    	; 0x6506 <mv_queue_move_buffer+0x166>
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    670a:	e9 85       	ldd	r30, Y+9	; 0x09
    670c:	e0 93 8b 24 	sts	0x248B, r30
	st_execute_move();
    6710:	0e 94 20 25 	call	0x4a40	; 0x4a40 <st_execute_move>
    6714:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    6716:	2b 96       	adiw	r28, 0x0b	; 11
    6718:	cd bf       	out	0x3d, r28	; 61
    671a:	de bf       	out	0x3e, r29	; 62
    671c:	cf 91       	pop	r28
    671e:	df 91       	pop	r29
    6720:	1f 91       	pop	r17
    6722:	0f 91       	pop	r16
    6724:	ff 90       	pop	r15
    6726:	ef 90       	pop	r14
    6728:	df 90       	pop	r13
    672a:	cf 90       	pop	r12
    672c:	bf 90       	pop	r11
    672e:	af 90       	pop	r10
    6730:	9f 90       	pop	r9
    6732:	8f 90       	pop	r8
    6734:	7f 90       	pop	r7
    6736:	6f 90       	pop	r6
    6738:	5f 90       	pop	r5
    673a:	4f 90       	pop	r4
    673c:	3f 90       	pop	r3
    673e:	2f 90       	pop	r2
    6740:	08 95       	ret

00006742 <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    6742:	a9 e3       	ldi	r26, 0x39	; 57
    6744:	b6 e2       	ldi	r27, 0x26	; 38
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    6746:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    6748:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    674a:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    674c:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    674e:	ed 91       	ld	r30, X+
    6750:	fc 91       	ld	r31, X
    6752:	11 97       	sbiw	r26, 0x01	; 1
    6754:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    6756:	ed 91       	ld	r30, X+
    6758:	fc 91       	ld	r31, X
    675a:	11 97       	sbiw	r26, 0x01	; 1
    675c:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    675e:	ed 91       	ld	r30, X+
    6760:	fc 91       	ld	r31, X
    6762:	11 97       	sbiw	r26, 0x01	; 1
    6764:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    6766:	ed 91       	ld	r30, X+
    6768:	fc 91       	ld	r31, X
    676a:	11 97       	sbiw	r26, 0x01	; 1
    676c:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    676e:	ed 91       	ld	r30, X+
    6770:	fc 91       	ld	r31, X
    6772:	11 97       	sbiw	r26, 0x01	; 1
    6774:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    6776:	ed 91       	ld	r30, X+
    6778:	fc 91       	ld	r31, X
    677a:	11 97       	sbiw	r26, 0x01	; 1
    677c:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    677e:	ed 91       	ld	r30, X+
    6780:	fc 91       	ld	r31, X
    6782:	11 97       	sbiw	r26, 0x01	; 1
    6784:	31 87       	std	Z+9, r19	; 0x09
    6786:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    6788:	46 e2       	ldi	r20, 0x26	; 38
    678a:	a9 37       	cpi	r26, 0x79	; 121
    678c:	b4 07       	cpc	r27, r20
    678e:	f9 f6       	brne	.-66     	; 0x674e <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    6790:	08 95       	ret

00006792 <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    6792:	1f 92       	push	r1
    6794:	0f 92       	push	r0
    6796:	0f b6       	in	r0, 0x3f	; 63
    6798:	0f 92       	push	r0
    679a:	11 24       	eor	r1, r1
    679c:	0f 90       	pop	r0
    679e:	0f be       	out	0x3f, r0	; 63
    67a0:	0f 90       	pop	r0
    67a2:	1f 90       	pop	r1
    67a4:	18 95       	reti

000067a6 <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    67a6:	1f 92       	push	r1
    67a8:	0f 92       	push	r0
    67aa:	0f b6       	in	r0, 0x3f	; 63
    67ac:	0f 92       	push	r0
    67ae:	11 24       	eor	r1, r1
    67b0:	0f 90       	pop	r0
    67b2:	0f be       	out	0x3f, r0	; 63
    67b4:	0f 90       	pop	r0
    67b6:	1f 90       	pop	r1
    67b8:	18 95       	reti

000067ba <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    67ba:	1f 92       	push	r1
    67bc:	0f 92       	push	r0
    67be:	0f b6       	in	r0, 0x3f	; 63
    67c0:	0f 92       	push	r0
    67c2:	11 24       	eor	r1, r1
    67c4:	0f 90       	pop	r0
    67c6:	0f be       	out	0x3f, r0	; 63
    67c8:	0f 90       	pop	r0
    67ca:	1f 90       	pop	r1
    67cc:	18 95       	reti

000067ce <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    67ce:	1f 92       	push	r1
    67d0:	0f 92       	push	r0
    67d2:	0f b6       	in	r0, 0x3f	; 63
    67d4:	0f 92       	push	r0
    67d6:	11 24       	eor	r1, r1
    67d8:	0f 90       	pop	r0
    67da:	0f be       	out	0x3f, r0	; 63
    67dc:	0f 90       	pop	r0
    67de:	1f 90       	pop	r1
    67e0:	18 95       	reti

000067e2 <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    67e2:	1f 92       	push	r1
    67e4:	0f 92       	push	r0
    67e6:	0f b6       	in	r0, 0x3f	; 63
    67e8:	0f 92       	push	r0
    67ea:	11 24       	eor	r1, r1
    67ec:	0f 90       	pop	r0
    67ee:	0f be       	out	0x3f, r0	; 63
    67f0:	0f 90       	pop	r0
    67f2:	1f 90       	pop	r1
    67f4:	18 95       	reti

000067f6 <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    67f6:	1f 92       	push	r1
    67f8:	0f 92       	push	r0
    67fa:	0f b6       	in	r0, 0x3f	; 63
    67fc:	0f 92       	push	r0
    67fe:	11 24       	eor	r1, r1
    6800:	0f 90       	pop	r0
    6802:	0f be       	out	0x3f, r0	; 63
    6804:	0f 90       	pop	r0
    6806:	1f 90       	pop	r1
    6808:	18 95       	reti

0000680a <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    680a:	1f 92       	push	r1
    680c:	0f 92       	push	r0
    680e:	0f b6       	in	r0, 0x3f	; 63
    6810:	0f 92       	push	r0
    6812:	11 24       	eor	r1, r1
    6814:	0f 90       	pop	r0
    6816:	0f be       	out	0x3f, r0	; 63
    6818:	0f 90       	pop	r0
    681a:	1f 90       	pop	r1
    681c:	18 95       	reti

0000681e <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    681e:	1f 92       	push	r1
    6820:	0f 92       	push	r0
    6822:	0f b6       	in	r0, 0x3f	; 63
    6824:	0f 92       	push	r0
    6826:	11 24       	eor	r1, r1
    6828:	0f 90       	pop	r0
    682a:	0f be       	out	0x3f, r0	; 63
    682c:	0f 90       	pop	r0
    682e:	1f 90       	pop	r1
    6830:	18 95       	reti

00006832 <xio_rs485_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_rs485_init(const uint16_t control)
{
    6832:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    6834:	e8 2f       	mov	r30, r24
    6836:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	fr.flags = XIO_FLAG_RS485_DEFS_gm;		// set flags to defaults & initial state
    6838:	87 e3       	ldi	r24, 0x37	; 55
    683a:	90 e0       	ldi	r25, 0x00	; 0
    683c:	80 93 07 25 	sts	0x2507, r24
    6840:	90 93 08 25 	sts	0x2508, r25
		fr.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		fr.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    6844:	26 ff       	sbrs	r18, 6
    6846:	06 c0       	rjmp	.+12     	; 0x6854 <xio_rs485_init+0x22>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    6848:	87 e3       	ldi	r24, 0x37	; 55
    684a:	90 e0       	ldi	r25, 0x00	; 0
    684c:	80 93 07 25 	sts	0x2507, r24
    6850:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_NOBLOCK) {
    6854:	27 ff       	sbrs	r18, 7
    6856:	06 c0       	rjmp	.+12     	; 0x6864 <xio_rs485_init+0x32>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    6858:	83 e3       	ldi	r24, 0x33	; 51
    685a:	90 e0       	ldi	r25, 0x00	; 0
    685c:	80 93 07 25 	sts	0x2507, r24
    6860:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_ECHO) {
    6864:	30 ff       	sbrs	r19, 0
    6866:	09 c0       	rjmp	.+18     	; 0x687a <xio_rs485_init+0x48>
		fr.flags |= XIO_FLAG_ECHO_bm;
    6868:	80 91 07 25 	lds	r24, 0x2507
    686c:	90 91 08 25 	lds	r25, 0x2508
    6870:	80 61       	ori	r24, 0x10	; 16
    6872:	80 93 07 25 	sts	0x2507, r24
    6876:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_NOECHO) {
    687a:	31 ff       	sbrs	r19, 1
    687c:	09 c0       	rjmp	.+18     	; 0x6890 <xio_rs485_init+0x5e>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    687e:	80 91 07 25 	lds	r24, 0x2507
    6882:	90 91 08 25 	lds	r25, 0x2508
    6886:	8f 7e       	andi	r24, 0xEF	; 239
    6888:	80 93 07 25 	sts	0x2507, r24
    688c:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_CRLF) {
    6890:	32 ff       	sbrs	r19, 2
    6892:	09 c0       	rjmp	.+18     	; 0x68a6 <xio_rs485_init+0x74>
		fr.flags |= XIO_FLAG_CRLF_bm;
    6894:	80 91 07 25 	lds	r24, 0x2507
    6898:	90 91 08 25 	lds	r25, 0x2508
    689c:	80 62       	ori	r24, 0x20	; 32
    689e:	80 93 07 25 	sts	0x2507, r24
    68a2:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_NOCRLF) {
    68a6:	33 ff       	sbrs	r19, 3
    68a8:	09 c0       	rjmp	.+18     	; 0x68bc <xio_rs485_init+0x8a>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    68aa:	80 91 07 25 	lds	r24, 0x2507
    68ae:	90 91 08 25 	lds	r25, 0x2508
    68b2:	8f 7d       	andi	r24, 0xDF	; 223
    68b4:	80 93 07 25 	sts	0x2507, r24
    68b8:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_LINEMODE) {
    68bc:	34 ff       	sbrs	r19, 4
    68be:	09 c0       	rjmp	.+18     	; 0x68d2 <xio_rs485_init+0xa0>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    68c0:	80 91 07 25 	lds	r24, 0x2507
    68c4:	90 91 08 25 	lds	r25, 0x2508
    68c8:	80 64       	ori	r24, 0x40	; 64
    68ca:	80 93 07 25 	sts	0x2507, r24
    68ce:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_NOLINEMODE) {
    68d2:	35 ff       	sbrs	r19, 5
    68d4:	09 c0       	rjmp	.+18     	; 0x68e8 <xio_rs485_init+0xb6>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    68d6:	80 91 07 25 	lds	r24, 0x2507
    68da:	90 91 08 25 	lds	r25, 0x2508
    68de:	8f 7b       	andi	r24, 0xBF	; 191
    68e0:	80 93 07 25 	sts	0x2507, r24
    68e4:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_SEMICOLONS) {
    68e8:	36 ff       	sbrs	r19, 6
    68ea:	09 c0       	rjmp	.+18     	; 0x68fe <xio_rs485_init+0xcc>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    68ec:	80 91 07 25 	lds	r24, 0x2507
    68f0:	90 91 08 25 	lds	r25, 0x2508
    68f4:	80 68       	ori	r24, 0x80	; 128
    68f6:	80 93 07 25 	sts	0x2507, r24
    68fa:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    68fe:	37 ff       	sbrs	r19, 7
    6900:	09 c0       	rjmp	.+18     	; 0x6914 <xio_rs485_init+0xe2>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    6902:	80 91 07 25 	lds	r24, 0x2507
    6906:	90 91 08 25 	lds	r25, 0x2508
    690a:	8f 77       	andi	r24, 0x7F	; 127
    690c:	80 93 07 25 	sts	0x2507, r24
    6910:	90 93 08 25 	sts	0x2508, r25
	}

	// character signals and error returns
	fr.sig = 0;
    6914:	10 92 09 25 	sts	0x2509, r1
	dev_rs485.udata = &(fr.sig);				// bind sig register to FILE struct
    6918:	89 e0       	ldi	r24, 0x09	; 9
    691a:	95 e2       	ldi	r25, 0x25	; 37
    691c:	80 93 28 20 	sts	0x2028, r24
    6920:	90 93 29 20 	sts	0x2029, r25

	// setup internal RX/TX buffers
	fr.rx_buf_head = 1;						// can't use location 0
    6924:	81 e0       	ldi	r24, 0x01	; 1
    6926:	80 93 10 25 	sts	0x2510, r24
	fr.rx_buf_tail = 1;
    692a:	80 93 0f 25 	sts	0x250F, r24
	fr.tx_buf_head = 1;
    692e:	80 93 12 25 	sts	0x2512, r24
	fr.tx_buf_tail = 1;
    6932:	80 93 11 25 	sts	0x2511, r24
	fr.len = sizeof(fr.buf);					// offset to zero
    6936:	82 e0       	ldi	r24, 0x02	; 2
    6938:	80 93 0c 25 	sts	0x250C, r24

	fr.usart = &RS485_USART;				// bind USART structure
    693c:	80 eb       	ldi	r24, 0xB0	; 176
    693e:	98 e0       	ldi	r25, 0x08	; 8
    6940:	80 93 25 26 	sts	0x2625, r24
    6944:	90 93 26 26 	sts	0x2626, r25
	fr.port = &RS485_PORT;					// bind PORT structure
    6948:	80 e4       	ldi	r24, 0x40	; 64
    694a:	96 e0       	ldi	r25, 0x06	; 6
    694c:	80 93 27 26 	sts	0x2627, r24
    6950:	90 93 28 26 	sts	0x2628, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    6954:	ee 23       	and	r30, r30
    6956:	09 f4       	brne	.+2      	; 0x695a <xio_rs485_init+0x128>
    6958:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    695a:	8e 2f       	mov	r24, r30
    695c:	90 e0       	ldi	r25, 0x00	; 0
    695e:	fc 01       	movw	r30, r24
    6960:	ec 5d       	subi	r30, 0xDC	; 220
    6962:	f8 4f       	sbci	r31, 0xF8	; 248
    6964:	e4 91       	lpm	r30, Z+
    6966:	a0 eb       	ldi	r26, 0xB0	; 176
    6968:	b8 e0       	ldi	r27, 0x08	; 8
    696a:	16 96       	adiw	r26, 0x06	; 6
    696c:	ec 93       	st	X, r30
    696e:	16 97       	sbiw	r26, 0x06	; 6
	fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    6970:	81 5d       	subi	r24, 0xD1	; 209
    6972:	98 4f       	sbci	r25, 0xF8	; 248
    6974:	fc 01       	movw	r30, r24
    6976:	84 91       	lpm	r24, Z+
    6978:	17 96       	adiw	r26, 0x07	; 7
    697a:	8c 93       	st	X, r24
    697c:	17 97       	sbiw	r26, 0x07	; 7
	fr.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx on USART
    697e:	88 e1       	ldi	r24, 0x18	; 24
    6980:	14 96       	adiw	r26, 0x04	; 4
    6982:	8c 93       	st	X, r24
    6984:	14 97       	sbiw	r26, 0x04	; 4
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    6986:	81 e2       	ldi	r24, 0x21	; 33
    6988:	13 96       	adiw	r26, 0x03	; 3
    698a:	8c 93       	st	X, r24

	fr.port->DIRCLR = RS485_RX_bm;	// clr RX pin as input
    698c:	e0 e4       	ldi	r30, 0x40	; 64
    698e:	f6 e0       	ldi	r31, 0x06	; 6
    6990:	80 e4       	ldi	r24, 0x40	; 64
    6992:	82 83       	std	Z+2, r24	; 0x02
	fr.port->DIRSET = RS485_TX_bm; 	// set TX pin as output
    6994:	80 e8       	ldi	r24, 0x80	; 128
    6996:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTSET = RS485_TX_bm;	// set TX HI as initial state
    6998:	85 83       	std	Z+5, r24	; 0x05
	fr.port->DIRSET = RS485_DE_bm; 	// Data Enable (TX) to output (TX enabled hi)
    699a:	90 e2       	ldi	r25, 0x20	; 32
    699c:	91 83       	std	Z+1, r25	; 0x01
	fr.port->DIRSET = RS485_RE_bm; 	// Recv Enable (RX) to output (RX enabled lo)
    699e:	80 e1       	ldi	r24, 0x10	; 16
    69a0:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTCLR = RS485_DE_bm;	// DE lo initially (TX disabled)
    69a2:	96 83       	std	Z+6, r25	; 0x06
	fr.port->OUTCLR = RS485_RE_bm; 	// RE lo initially (RX enabled)
    69a4:	86 83       	std	Z+6, r24	; 0x06
}
    69a6:	08 95       	ret

000069a8 <xio_rs485_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_rs485_control(const uint16_t control, const int16_t arg)
{
    69a8:	ac 01       	movw	r20, r24
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    69aa:	8f 70       	andi	r24, 0x0F	; 15
    69ac:	90 70       	andi	r25, 0x00	; 0
    69ae:	00 97       	sbiw	r24, 0x00	; 0
    69b0:	91 f0       	breq	.+36     	; 0x69d6 <xio_rs485_control+0x2e>
		fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    69b2:	a0 91 25 26 	lds	r26, 0x2625
    69b6:	b0 91 26 26 	lds	r27, 0x2626
    69ba:	9c 01       	movw	r18, r24
    69bc:	2c 5d       	subi	r18, 0xDC	; 220
    69be:	38 4f       	sbci	r19, 0xF8	; 248
    69c0:	f9 01       	movw	r30, r18
    69c2:	24 91       	lpm	r18, Z+
    69c4:	16 96       	adiw	r26, 0x06	; 6
    69c6:	2c 93       	st	X, r18
    69c8:	16 97       	sbiw	r26, 0x06	; 6
		fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    69ca:	81 5d       	subi	r24, 0xD1	; 209
    69cc:	98 4f       	sbci	r25, 0xF8	; 248
    69ce:	fc 01       	movw	r30, r24
    69d0:	84 91       	lpm	r24, Z+
    69d2:	17 96       	adiw	r26, 0x07	; 7
    69d4:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    69d6:	46 ff       	sbrs	r20, 6
    69d8:	09 c0       	rjmp	.+18     	; 0x69ec <xio_rs485_control+0x44>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    69da:	80 91 07 25 	lds	r24, 0x2507
    69de:	90 91 08 25 	lds	r25, 0x2508
    69e2:	84 60       	ori	r24, 0x04	; 4
    69e4:	80 93 07 25 	sts	0x2507, r24
    69e8:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_NOBLOCK) {
    69ec:	47 ff       	sbrs	r20, 7
    69ee:	09 c0       	rjmp	.+18     	; 0x6a02 <xio_rs485_control+0x5a>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    69f0:	80 91 07 25 	lds	r24, 0x2507
    69f4:	90 91 08 25 	lds	r25, 0x2508
    69f8:	8b 7f       	andi	r24, 0xFB	; 251
    69fa:	80 93 07 25 	sts	0x2507, r24
    69fe:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_ECHO) {
    6a02:	50 ff       	sbrs	r21, 0
    6a04:	09 c0       	rjmp	.+18     	; 0x6a18 <xio_rs485_control+0x70>
		fr.flags |= XIO_FLAG_ECHO_bm;
    6a06:	80 91 07 25 	lds	r24, 0x2507
    6a0a:	90 91 08 25 	lds	r25, 0x2508
    6a0e:	80 61       	ori	r24, 0x10	; 16
    6a10:	80 93 07 25 	sts	0x2507, r24
    6a14:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_NOECHO) {
    6a18:	51 ff       	sbrs	r21, 1
    6a1a:	09 c0       	rjmp	.+18     	; 0x6a2e <xio_rs485_control+0x86>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    6a1c:	80 91 07 25 	lds	r24, 0x2507
    6a20:	90 91 08 25 	lds	r25, 0x2508
    6a24:	8f 7e       	andi	r24, 0xEF	; 239
    6a26:	80 93 07 25 	sts	0x2507, r24
    6a2a:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_CRLF) {
    6a2e:	52 ff       	sbrs	r21, 2
    6a30:	09 c0       	rjmp	.+18     	; 0x6a44 <xio_rs485_control+0x9c>
		fr.flags |= XIO_FLAG_CRLF_bm;
    6a32:	80 91 07 25 	lds	r24, 0x2507
    6a36:	90 91 08 25 	lds	r25, 0x2508
    6a3a:	80 62       	ori	r24, 0x20	; 32
    6a3c:	80 93 07 25 	sts	0x2507, r24
    6a40:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_NOCRLF) {
    6a44:	53 ff       	sbrs	r21, 3
    6a46:	09 c0       	rjmp	.+18     	; 0x6a5a <xio_rs485_control+0xb2>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    6a48:	80 91 07 25 	lds	r24, 0x2507
    6a4c:	90 91 08 25 	lds	r25, 0x2508
    6a50:	8f 7d       	andi	r24, 0xDF	; 223
    6a52:	80 93 07 25 	sts	0x2507, r24
    6a56:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_LINEMODE) {
    6a5a:	54 ff       	sbrs	r21, 4
    6a5c:	09 c0       	rjmp	.+18     	; 0x6a70 <xio_rs485_control+0xc8>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    6a5e:	80 91 07 25 	lds	r24, 0x2507
    6a62:	90 91 08 25 	lds	r25, 0x2508
    6a66:	80 64       	ori	r24, 0x40	; 64
    6a68:	80 93 07 25 	sts	0x2507, r24
    6a6c:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_NOLINEMODE) {
    6a70:	55 ff       	sbrs	r21, 5
    6a72:	09 c0       	rjmp	.+18     	; 0x6a86 <xio_rs485_control+0xde>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    6a74:	80 91 07 25 	lds	r24, 0x2507
    6a78:	90 91 08 25 	lds	r25, 0x2508
    6a7c:	8f 7b       	andi	r24, 0xBF	; 191
    6a7e:	80 93 07 25 	sts	0x2507, r24
    6a82:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_SEMICOLONS) {
    6a86:	56 ff       	sbrs	r21, 6
    6a88:	09 c0       	rjmp	.+18     	; 0x6a9c <xio_rs485_control+0xf4>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    6a8a:	80 91 07 25 	lds	r24, 0x2507
    6a8e:	90 91 08 25 	lds	r25, 0x2508
    6a92:	80 68       	ori	r24, 0x80	; 128
    6a94:	80 93 07 25 	sts	0x2507, r24
    6a98:	90 93 08 25 	sts	0x2508, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    6a9c:	57 ff       	sbrs	r21, 7
    6a9e:	09 c0       	rjmp	.+18     	; 0x6ab2 <xio_rs485_control+0x10a>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    6aa0:	80 91 07 25 	lds	r24, 0x2507
    6aa4:	90 91 08 25 	lds	r25, 0x2508
    6aa8:	8f 77       	andi	r24, 0x7F	; 127
    6aaa:	80 93 07 25 	sts	0x2507, r24
    6aae:	90 93 08 25 	sts	0x2508, r25
	}
	return (0);
}
    6ab2:	80 e0       	ldi	r24, 0x00	; 0
    6ab4:	08 95       	ret

00006ab6 <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC0 data register empty
{
    6ab6:	1f 92       	push	r1
    6ab8:	0f 92       	push	r0
    6aba:	0f b6       	in	r0, 0x3f	; 63
    6abc:	0f 92       	push	r0
    6abe:	0b b6       	in	r0, 0x3b	; 59
    6ac0:	0f 92       	push	r0
    6ac2:	11 24       	eor	r1, r1
    6ac4:	8f 93       	push	r24
    6ac6:	9f 93       	push	r25
    6ac8:	af 93       	push	r26
    6aca:	bf 93       	push	r27
    6acc:	ef 93       	push	r30
    6ace:	ff 93       	push	r31
	if (fr.tx_buf_head == fr.tx_buf_tail) {			// buffer empty - disable ints
    6ad0:	90 91 12 25 	lds	r25, 0x2512
    6ad4:	80 91 11 25 	lds	r24, 0x2511
    6ad8:	98 17       	cp	r25, r24
    6ada:	39 f4       	brne	.+14     	; 0x6aea <__vector_29+0x34>
		fr.usart->CTRLA = USART_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    6adc:	e0 91 25 26 	lds	r30, 0x2625
    6ae0:	f0 91 26 26 	lds	r31, 0x2626
    6ae4:	80 e2       	ldi	r24, 0x20	; 32
    6ae6:	83 83       	std	Z+3, r24	; 0x03
    6ae8:	1d c0       	rjmp	.+58     	; 0x6b24 <__vector_29+0x6e>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(fr.flags)) {
    6aea:	80 91 07 25 	lds	r24, 0x2507
    6aee:	90 91 08 25 	lds	r25, 0x2508
    6af2:	93 fd       	sbrc	r25, 3
    6af4:	17 c0       	rjmp	.+46     	; 0x6b24 <__vector_29+0x6e>
		if (--(fr.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    6af6:	80 91 11 25 	lds	r24, 0x2511
    6afa:	81 50       	subi	r24, 0x01	; 1
    6afc:	80 93 11 25 	sts	0x2511, r24
    6b00:	80 91 11 25 	lds	r24, 0x2511
    6b04:	88 23       	and	r24, r24
    6b06:	19 f4       	brne	.+6      	; 0x6b0e <__vector_29+0x58>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6b08:	81 e1       	ldi	r24, 0x11	; 17
    6b0a:	80 93 11 25 	sts	0x2511, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];	// write char to TX DATA register
    6b0e:	e0 91 25 26 	lds	r30, 0x2625
    6b12:	f0 91 26 26 	lds	r31, 0x2626
    6b16:	a0 91 11 25 	lds	r26, 0x2511
    6b1a:	b0 e0       	ldi	r27, 0x00	; 0
    6b1c:	ad 5e       	subi	r26, 0xED	; 237
    6b1e:	b9 4d       	sbci	r27, 0xD9	; 217
    6b20:	8c 91       	ld	r24, X
    6b22:	80 83       	st	Z, r24
	}
}
    6b24:	ff 91       	pop	r31
    6b26:	ef 91       	pop	r30
    6b28:	bf 91       	pop	r27
    6b2a:	af 91       	pop	r26
    6b2c:	9f 91       	pop	r25
    6b2e:	8f 91       	pop	r24
    6b30:	0f 90       	pop	r0
    6b32:	0b be       	out	0x3b, r0	; 59
    6b34:	0f 90       	pop	r0
    6b36:	0f be       	out	0x3f, r0	; 63
    6b38:	0f 90       	pop	r0
    6b3a:	1f 90       	pop	r1
    6b3c:	18 95       	reti

00006b3e <xio_rs485_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_rs485_putc(const char c, FILE *stream)
{
    6b3e:	48 2f       	mov	r20, r24
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(fr.flags)) {
    6b40:	20 91 07 25 	lds	r18, 0x2507
    6b44:	30 91 08 25 	lds	r19, 0x2508
    6b48:	d9 01       	movw	r26, r18
    6b4a:	a4 70       	andi	r26, 0x04	; 4
    6b4c:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	fr.tx_buf_head = fr.next_tx_buf_head;			// accept the next buffer head value
	fr.tx_buf[fr.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(fr.flags) && (c == '\n')) {			// detect LF and add a CR
    6b4e:	b9 01       	movw	r22, r18
    6b50:	60 72       	andi	r22, 0x20	; 32
    6b52:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_rs485_putc(const char c, FILE *stream)
{
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
    6b54:	90 91 12 25 	lds	r25, 0x2512
    6b58:	91 50       	subi	r25, 0x01	; 1
    6b5a:	c1 f4       	brne	.+48     	; 0x6b8c <xio_rs485_putc+0x4e>
    6b5c:	91 e1       	ldi	r25, 0x11	; 17
    6b5e:	16 c0       	rjmp	.+44     	; 0x6b8c <xio_rs485_putc+0x4e>
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(fr.flags)) {
    6b60:	10 97       	sbiw	r26, 0x00	; 0
    6b62:	61 f0       	breq	.+24     	; 0x6b7c <xio_rs485_putc+0x3e>
			sleep_mode();
    6b64:	80 91 48 00 	lds	r24, 0x0048
    6b68:	81 60       	ori	r24, 0x01	; 1
    6b6a:	80 93 48 00 	sts	0x0048, r24
    6b6e:	88 95       	sleep
    6b70:	80 91 48 00 	lds	r24, 0x0048
    6b74:	8e 7f       	andi	r24, 0xFE	; 254
    6b76:	80 93 48 00 	sts	0x0048, r24
    6b7a:	08 c0       	rjmp	.+16     	; 0x6b8c <xio_rs485_putc+0x4e>
    6b7c:	90 93 13 25 	sts	0x2513, r25
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
    6b80:	83 e0       	ldi	r24, 0x03	; 3
    6b82:	80 93 09 25 	sts	0x2509, r24
    6b86:	2f ef       	ldi	r18, 0xFF	; 255
    6b88:	3f ef       	ldi	r19, 0xFF	; 255
    6b8a:	54 c0       	rjmp	.+168    	; 0x6c34 <xio_rs485_putc+0xf6>
int xio_rs485_putc(const char c, FILE *stream)
{
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
    6b8c:	80 91 11 25 	lds	r24, 0x2511
    6b90:	98 17       	cp	r25, r24
    6b92:	31 f3       	breq	.-52     	; 0x6b60 <xio_rs485_putc+0x22>
			fr.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	fr.tx_buf_head = fr.next_tx_buf_head;			// accept the next buffer head value
    6b94:	90 93 12 25 	sts	0x2512, r25
	fr.tx_buf[fr.tx_buf_head] = c;				// ...and write char to buffer
    6b98:	e0 91 12 25 	lds	r30, 0x2512
    6b9c:	f0 e0       	ldi	r31, 0x00	; 0
    6b9e:	ed 5e       	subi	r30, 0xED	; 237
    6ba0:	f9 4d       	sbci	r31, 0xD9	; 217
    6ba2:	40 83       	st	Z, r20

	if (CRLF(fr.flags) && (c == '\n')) {			// detect LF and add a CR
    6ba4:	61 15       	cp	r22, r1
    6ba6:	71 05       	cpc	r23, r1
    6ba8:	21 f0       	breq	.+8      	; 0x6bb2 <xio_rs485_putc+0x74>
    6baa:	4a 30       	cpi	r20, 0x0A	; 10
    6bac:	11 f4       	brne	.+4      	; 0x6bb2 <xio_rs485_putc+0x74>
    6bae:	4d e0       	ldi	r20, 0x0D	; 13
    6bb0:	d1 cf       	rjmp	.-94     	; 0x6b54 <xio_rs485_putc+0x16>
    6bb2:	90 93 13 25 	sts	0x2513, r25
		return xio_rs485_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (fr.usart->STATUS & 0x20) {
    6bb6:	a0 91 25 26 	lds	r26, 0x2625
    6bba:	b0 91 26 26 	lds	r27, 0x2626
    6bbe:	11 96       	adiw	r26, 0x01	; 1
    6bc0:	8c 91       	ld	r24, X
    6bc2:	11 97       	sbiw	r26, 0x01	; 1
    6bc4:	85 ff       	sbrs	r24, 5
    6bc6:	27 c0       	rjmp	.+78     	; 0x6c16 <xio_rs485_putc+0xd8>
		if (fr.tx_buf_head == fr.tx_buf_tail) {	// buf might be empty if IRQ got it
    6bc8:	90 91 12 25 	lds	r25, 0x2512
    6bcc:	80 91 11 25 	lds	r24, 0x2511
    6bd0:	98 17       	cp	r25, r24
    6bd2:	71 f1       	breq	.+92     	; 0x6c30 <xio_rs485_putc+0xf2>
			return (0);
		}
		fr.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    6bd4:	38 60       	ori	r19, 0x08	; 8
    6bd6:	20 93 07 25 	sts	0x2507, r18
    6bda:	30 93 08 25 	sts	0x2508, r19
		if (--(fr.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    6bde:	80 91 11 25 	lds	r24, 0x2511
    6be2:	81 50       	subi	r24, 0x01	; 1
    6be4:	80 93 11 25 	sts	0x2511, r24
    6be8:	80 91 11 25 	lds	r24, 0x2511
    6bec:	88 23       	and	r24, r24
    6bee:	19 f4       	brne	.+6      	; 0x6bf6 <xio_rs485_putc+0xb8>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6bf0:	81 e1       	ldi	r24, 0x11	; 17
    6bf2:	80 93 11 25 	sts	0x2511, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];// write char to TX DATA register
    6bf6:	e0 91 11 25 	lds	r30, 0x2511
    6bfa:	f0 e0       	ldi	r31, 0x00	; 0
    6bfc:	ed 5e       	subi	r30, 0xED	; 237
    6bfe:	f9 4d       	sbci	r31, 0xD9	; 217
    6c00:	80 81       	ld	r24, Z
    6c02:	8c 93       	st	X, r24
		fr.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    6c04:	80 91 07 25 	lds	r24, 0x2507
    6c08:	90 91 08 25 	lds	r25, 0x2508
    6c0c:	97 7f       	andi	r25, 0xF7	; 247
    6c0e:	80 93 07 25 	sts	0x2507, r24
    6c12:	90 93 08 25 	sts	0x2508, r25
	}
	// enable interrupts regardless
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    6c16:	e0 91 25 26 	lds	r30, 0x2625
    6c1a:	f0 91 26 26 	lds	r31, 0x2626
    6c1e:	81 e2       	ldi	r24, 0x21	; 33
    6c20:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    6c22:	80 91 a2 00 	lds	r24, 0x00A2
    6c26:	81 60       	ori	r24, 0x01	; 1
    6c28:	e0 ea       	ldi	r30, 0xA0	; 160
    6c2a:	f0 e0       	ldi	r31, 0x00	; 0
    6c2c:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    6c2e:	78 94       	sei
    6c30:	20 e0       	ldi	r18, 0x00	; 0
    6c32:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    6c34:	c9 01       	movw	r24, r18
    6c36:	08 95       	ret

00006c38 <xio_rs485_getc>:
 */

int xio_rs485_getc(FILE *stream)
{
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(fr.flags)) {
    6c38:	20 91 07 25 	lds	r18, 0x2507
    6c3c:	30 91 08 25 	lds	r19, 0x2508
    6c40:	24 70       	andi	r18, 0x04	; 4
    6c42:	30 70       	andi	r19, 0x00	; 0
    6c44:	15 c0       	rjmp	.+42     	; 0x6c70 <xio_rs485_getc+0x38>
    6c46:	21 15       	cp	r18, r1
    6c48:	31 05       	cpc	r19, r1
    6c4a:	61 f0       	breq	.+24     	; 0x6c64 <xio_rs485_getc+0x2c>
			sleep_mode();
    6c4c:	80 91 48 00 	lds	r24, 0x0048
    6c50:	81 60       	ori	r24, 0x01	; 1
    6c52:	80 93 48 00 	sts	0x0048, r24
    6c56:	88 95       	sleep
    6c58:	80 91 48 00 	lds	r24, 0x0048
    6c5c:	8e 7f       	andi	r24, 0xFE	; 254
    6c5e:	80 93 48 00 	sts	0x0048, r24
    6c62:	06 c0       	rjmp	.+12     	; 0x6c70 <xio_rs485_getc+0x38>
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
    6c64:	83 e0       	ldi	r24, 0x03	; 3
    6c66:	80 93 09 25 	sts	0x2509, r24
    6c6a:	2f ef       	ldi	r18, 0xFF	; 255
    6c6c:	3f ef       	ldi	r19, 0xFF	; 255
    6c6e:	26 c0       	rjmp	.+76     	; 0x6cbc <xio_rs485_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_rs485_getc(FILE *stream)
{
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
    6c70:	90 91 10 25 	lds	r25, 0x2510
    6c74:	80 91 0f 25 	lds	r24, 0x250F
    6c78:	98 17       	cp	r25, r24
    6c7a:	29 f3       	breq	.-54     	; 0x6c46 <xio_rs485_getc+0xe>
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    6c7c:	80 91 0f 25 	lds	r24, 0x250F
    6c80:	81 50       	subi	r24, 0x01	; 1
    6c82:	80 93 0f 25 	sts	0x250F, r24
    6c86:	80 91 0f 25 	lds	r24, 0x250F
    6c8a:	88 23       	and	r24, r24
    6c8c:	19 f4       	brne	.+6      	; 0x6c94 <xio_rs485_getc+0x5c>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6c8e:	8e ef       	ldi	r24, 0xFE	; 254
    6c90:	80 93 0f 25 	sts	0x250F, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    6c94:	e0 91 0f 25 	lds	r30, 0x250F
    6c98:	f0 e0       	ldi	r31, 0x00	; 0
    6c9a:	e9 5f       	subi	r30, 0xF9	; 249
    6c9c:	fa 4d       	sbci	r31, 0xDA	; 218
    6c9e:	85 85       	ldd	r24, Z+13	; 0x0d
    6ca0:	8f 77       	andi	r24, 0x7F	; 127
    6ca2:	80 93 0a 25 	sts	0x250A, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[fr.c])))());
    6ca6:	90 e0       	ldi	r25, 0x00	; 0
    6ca8:	88 0f       	add	r24, r24
    6caa:	99 1f       	adc	r25, r25
    6cac:	8a 5f       	subi	r24, 0xFA	; 250
    6cae:	92 4e       	sbci	r25, 0xE2	; 226
    6cb0:	fc 01       	movw	r30, r24
    6cb2:	25 91       	lpm	r18, Z+
    6cb4:	34 91       	lpm	r19, Z+
    6cb6:	f9 01       	movw	r30, r18
    6cb8:	19 95       	eicall
    6cba:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    6cbc:	c9 01       	movw	r24, r18
    6cbe:	08 95       	ret

00006cc0 <_getc_char>:

/* xio_rs485_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    6cc0:	80 91 07 25 	lds	r24, 0x2507
    6cc4:	84 ff       	sbrs	r24, 4
    6cc6:	08 c0       	rjmp	.+16     	; 0x6cd8 <_getc_char+0x18>
    6cc8:	60 91 37 27 	lds	r22, 0x2737
    6ccc:	70 91 38 27 	lds	r23, 0x2738
    6cd0:	80 91 0a 25 	lds	r24, 0x250A
    6cd4:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <xio_rs485_putc>
	return(fr.c);
}
    6cd8:	80 91 0a 25 	lds	r24, 0x250A
    6cdc:	90 e0       	ldi	r25, 0x00	; 0
    6cde:	08 95       	ret

00006ce0 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(fr.flags)) fr.c = '\n';
    6ce0:	90 91 07 25 	lds	r25, 0x2507
    6ce4:	96 ff       	sbrs	r25, 6
    6ce6:	03 c0       	rjmp	.+6      	; 0x6cee <_getc_NEWLINE+0xe>
    6ce8:	8a e0       	ldi	r24, 0x0A	; 10
    6cea:	80 93 0a 25 	sts	0x250A, r24
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    6cee:	94 ff       	sbrs	r25, 4
    6cf0:	08 c0       	rjmp	.+16     	; 0x6d02 <_getc_NEWLINE+0x22>
    6cf2:	60 91 37 27 	lds	r22, 0x2737
    6cf6:	70 91 38 27 	lds	r23, 0x2738
    6cfa:	80 91 0a 25 	lds	r24, 0x250A
    6cfe:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <xio_rs485_putc>
	return(fr.c);
}
    6d02:	80 91 0a 25 	lds	r24, 0x250A
    6d06:	90 e0       	ldi	r25, 0x00	; 0
    6d08:	08 95       	ret

00006d0a <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(fr.flags)) {
    6d0a:	80 91 07 25 	lds	r24, 0x2507
    6d0e:	87 ff       	sbrs	r24, 7
    6d10:	03 c0       	rjmp	.+6      	; 0x6d18 <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    6d12:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <_getc_NEWLINE>
    6d16:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    6d18:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <_getc_char>
}
    6d1c:	08 95       	ret

00006d1e <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	fr.sig = XIO_SIG_DELETE;
    6d1e:	8a e0       	ldi	r24, 0x0A	; 10
    6d20:	80 93 09 25 	sts	0x2509, r24
	return(_FDEV_ERR);
}
    6d24:	8f ef       	ldi	r24, 0xFF	; 255
    6d26:	9f ef       	ldi	r25, 0xFF	; 255
    6d28:	08 95       	ret

00006d2a <xio_rs485_readln>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_rs485_readln(char *buf, uint8_t len)
{
	if (!IN_LINE(fr.flags)) {					// first time thru initializations
    6d2a:	20 91 07 25 	lds	r18, 0x2507
    6d2e:	30 91 08 25 	lds	r19, 0x2508
    6d32:	36 fd       	sbrc	r19, 6
    6d34:	0d c0       	rjmp	.+26     	; 0x6d50 <xio_rs485_readln+0x26>
		fr.i = 0;								// zero buffer
    6d36:	10 92 0b 25 	sts	0x250B, r1
		fr.len = len;							// save arg into struct 
    6d3a:	60 93 0c 25 	sts	0x250C, r22
		fr.buf = buf;							// save arg into struct 
    6d3e:	80 93 0d 25 	sts	0x250D, r24
    6d42:	90 93 0e 25 	sts	0x250E, r25
//		fr.sig = XIO_SIG_OK;					// no signal action
		fr.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    6d46:	30 64       	ori	r19, 0x40	; 64
    6d48:	20 93 07 25 	sts	0x2507, r18
    6d4c:	30 93 08 25 	sts	0x2508, r19
	}
	if (fr.rx_buf_head == fr.rx_buf_tail) {		// RX ISR buffer empty
    6d50:	90 91 10 25 	lds	r25, 0x2510
    6d54:	80 91 0f 25 	lds	r24, 0x250F
    6d58:	98 17       	cp	r25, r24
    6d5a:	19 f4       	brne	.+6      	; 0x6d62 <xio_rs485_readln+0x38>
    6d5c:	22 e0       	ldi	r18, 0x02	; 2
    6d5e:	30 e0       	ldi	r19, 0x00	; 0
    6d60:	20 c0       	rjmp	.+64     	; 0x6da2 <xio_rs485_readln+0x78>
//		fr.sig = XIO_SIG_WOULDBLOCK;
		return(TG_CONTINUE);
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    6d62:	80 91 0f 25 	lds	r24, 0x250F
    6d66:	81 50       	subi	r24, 0x01	; 1
    6d68:	80 93 0f 25 	sts	0x250F, r24
    6d6c:	80 91 0f 25 	lds	r24, 0x250F
    6d70:	88 23       	and	r24, r24
    6d72:	19 f4       	brne	.+6      	; 0x6d7a <xio_rs485_readln+0x50>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6d74:	8e ef       	ldi	r24, 0xFE	; 254
    6d76:	80 93 0f 25 	sts	0x250F, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    6d7a:	e0 91 0f 25 	lds	r30, 0x250F
    6d7e:	f0 e0       	ldi	r31, 0x00	; 0
    6d80:	e9 5f       	subi	r30, 0xF9	; 249
    6d82:	fa 4d       	sbci	r31, 0xDA	; 218
    6d84:	85 85       	ldd	r24, Z+13	; 0x0d
    6d86:	8f 77       	andi	r24, 0x7F	; 127
    6d88:	80 93 0a 25 	sts	0x250A, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[fr.c])))()); // dispatch on character
    6d8c:	90 e0       	ldi	r25, 0x00	; 0
    6d8e:	88 0f       	add	r24, r24
    6d90:	99 1f       	adc	r25, r25
    6d92:	8a 5f       	subi	r24, 0xFA	; 250
    6d94:	93 4e       	sbci	r25, 0xE3	; 227
    6d96:	fc 01       	movw	r30, r24
    6d98:	25 91       	lpm	r18, Z+
    6d9a:	34 91       	lpm	r19, Z+
    6d9c:	f9 01       	movw	r30, r18
    6d9e:	19 95       	eicall
    6da0:	9c 01       	movw	r18, r24
}
    6da2:	c9 01       	movw	r24, r18
    6da4:	08 95       	ret

00006da6 <_readln_char>:

/* xio_rs485_readln helper routines */

static int _readln_char(void)
{
	if (fr.i > fr.len) {						// trap buffer overflow
    6da6:	90 91 0b 25 	lds	r25, 0x250B
    6daa:	20 91 0c 25 	lds	r18, 0x250C
    6dae:	e0 91 0d 25 	lds	r30, 0x250D
    6db2:	f0 91 0e 25 	lds	r31, 0x250E
    6db6:	29 17       	cp	r18, r25
    6db8:	48 f4       	brcc	.+18     	; 0x6dcc <_readln_char+0x26>
		fr.sig = XIO_SIG_EOL;
    6dba:	81 e0       	ldi	r24, 0x01	; 1
    6dbc:	80 93 09 25 	sts	0x2509, r24
		fr.buf[fr.len] = NUL;					// fr.len is zero based
    6dc0:	e2 0f       	add	r30, r18
    6dc2:	f1 1d       	adc	r31, r1
    6dc4:	10 82       	st	Z, r1
    6dc6:	26 e0       	ldi	r18, 0x06	; 6
    6dc8:	30 e0       	ldi	r19, 0x00	; 0
    6dca:	16 c0       	rjmp	.+44     	; 0x6df8 <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	fr.buf[fr.i++] = fr.c;
    6dcc:	e9 0f       	add	r30, r25
    6dce:	f1 1d       	adc	r31, r1
    6dd0:	80 91 0a 25 	lds	r24, 0x250A
    6dd4:	80 83       	st	Z, r24
    6dd6:	9f 5f       	subi	r25, 0xFF	; 255
    6dd8:	90 93 0b 25 	sts	0x250B, r25
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);// conditional echo
    6ddc:	80 91 07 25 	lds	r24, 0x2507
    6de0:	84 ff       	sbrs	r24, 4
    6de2:	08 c0       	rjmp	.+16     	; 0x6df4 <_readln_char+0x4e>
    6de4:	60 91 37 27 	lds	r22, 0x2737
    6de8:	70 91 38 27 	lds	r23, 0x2738
    6dec:	80 91 0a 25 	lds	r24, 0x250A
    6df0:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <xio_rs485_putc>
    6df4:	22 e0       	ldi	r18, 0x02	; 2
    6df6:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_CONTINUE);						// line is still in process
}
    6df8:	c9 01       	movw	r24, r18
    6dfa:	08 95       	ret

00006dfc <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	fr.sig = XIO_SIG_EOL;
    6dfc:	81 e0       	ldi	r24, 0x01	; 1
    6dfe:	80 93 09 25 	sts	0x2509, r24
	fr.buf[fr.i] = NUL;
    6e02:	80 91 0b 25 	lds	r24, 0x250B
    6e06:	e0 91 0d 25 	lds	r30, 0x250D
    6e0a:	f0 91 0e 25 	lds	r31, 0x250E
    6e0e:	e8 0f       	add	r30, r24
    6e10:	f1 1d       	adc	r31, r1
    6e12:	10 82       	st	Z, r1
	fr.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    6e14:	20 91 07 25 	lds	r18, 0x2507
    6e18:	30 91 08 25 	lds	r19, 0x2508
    6e1c:	c9 01       	movw	r24, r18
    6e1e:	9f 7b       	andi	r25, 0xBF	; 191
    6e20:	80 93 07 25 	sts	0x2507, r24
    6e24:	90 93 08 25 	sts	0x2508, r25
	if (ECHO(fr.flags)) xio_rs485_putc('\n',stdout);// echo a newline
    6e28:	24 ff       	sbrs	r18, 4
    6e2a:	07 c0       	rjmp	.+14     	; 0x6e3a <_readln_NEWLINE+0x3e>
    6e2c:	60 91 37 27 	lds	r22, 0x2737
    6e30:	70 91 38 27 	lds	r23, 0x2738
    6e34:	8a e0       	ldi	r24, 0x0A	; 10
    6e36:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <xio_rs485_putc>
	return 0;
//	return ((int)fr.line_func(fr.buf));			// call line handler function
}
    6e3a:	80 e0       	ldi	r24, 0x00	; 0
    6e3c:	90 e0       	ldi	r25, 0x00	; 0
    6e3e:	08 95       	ret

00006e40 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(fr.flags)) {
    6e40:	80 91 07 25 	lds	r24, 0x2507
    6e44:	87 ff       	sbrs	r24, 7
    6e46:	03 c0       	rjmp	.+6      	; 0x6e4e <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    6e48:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <_readln_NEWLINE>
    6e4c:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    6e4e:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <_readln_char>
	}
}
    6e52:	08 95       	ret

00006e54 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--fr.i >= 0) {
    6e54:	80 91 0b 25 	lds	r24, 0x250B
    6e58:	81 50       	subi	r24, 0x01	; 1
    6e5a:	80 93 0b 25 	sts	0x250B, r24
		if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    6e5e:	80 91 07 25 	lds	r24, 0x2507
    6e62:	84 ff       	sbrs	r24, 4
    6e64:	08 c0       	rjmp	.+16     	; 0x6e76 <_readln_DELETE+0x22>
    6e66:	60 91 37 27 	lds	r22, 0x2737
    6e6a:	70 91 38 27 	lds	r23, 0x2738
    6e6e:	80 91 0a 25 	lds	r24, 0x250A
    6e72:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <xio_rs485_putc>
	} else {
		fr.i = 0;
	}
	return (TG_CONTINUE);						// line is still in process
}
    6e76:	82 e0       	ldi	r24, 0x02	; 2
    6e78:	90 e0       	ldi	r25, 0x00	; 0
    6e7a:	08 95       	ret

00006e7c <_sig_KILL>:
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
	fr.sig = XIO_SIG_KILL;
    6e7c:	84 e0       	ldi	r24, 0x04	; 4
    6e7e:	80 93 09 25 	sts	0x2509, r24
	return(_FDEV_ERR);
}
    6e82:	8f ef       	ldi	r24, 0xFF	; 255
    6e84:	9f ef       	ldi	r25, 0xFF	; 255
    6e86:	08 95       	ret

00006e88 <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
	fr.sig = XIO_SIG_PAUSE;
    6e88:	86 e0       	ldi	r24, 0x06	; 6
    6e8a:	80 93 09 25 	sts	0x2509, r24
	return(_FDEV_ERR);
}
    6e8e:	8f ef       	ldi	r24, 0xFF	; 255
    6e90:	9f ef       	ldi	r25, 0xFF	; 255
    6e92:	08 95       	ret

00006e94 <_sig_RESUME>:

static int _sig_RESUME(void)
{
	fr.sig = XIO_SIG_RESUME;
    6e94:	87 e0       	ldi	r24, 0x07	; 7
    6e96:	80 93 09 25 	sts	0x2509, r24
	return(_FDEV_ERR);
}
    6e9a:	8f ef       	ldi	r24, 0xFF	; 255
    6e9c:	9f ef       	ldi	r25, 0xFF	; 255
    6e9e:	08 95       	ret

00006ea0 <_sig_SHIFTOUT>:

static int _sig_SHIFTOUT(void)
{
	fr.sig = XIO_SIG_SHIFTOUT;
    6ea0:	88 e0       	ldi	r24, 0x08	; 8
    6ea2:	80 93 09 25 	sts	0x2509, r24
	return(_FDEV_ERR);
}
    6ea6:	8f ef       	ldi	r24, 0xFF	; 255
    6ea8:	9f ef       	ldi	r25, 0xFF	; 255
    6eaa:	08 95       	ret

00006eac <_sig_SHIFTIN>:

static int _sig_SHIFTIN(void)
{
	fr.sig = XIO_SIG_SHIFTIN;
    6eac:	89 e0       	ldi	r24, 0x09	; 9
    6eae:	80 93 09 25 	sts	0x2509, r24
	return(_FDEV_ERR);
}
    6eb2:	8f ef       	ldi	r24, 0xFF	; 255
    6eb4:	9f ef       	ldi	r25, 0xFF	; 255
    6eb6:	08 95       	ret

00006eb8 <xio_rs485_queue_RX_char>:
/*
 * xio_rs485_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_rs485_queue_RX_char(const char c)
{
    6eb8:	28 2f       	mov	r18, r24
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6eba:	83 30       	cpi	r24, 0x03	; 3
    6ebc:	31 f4       	brne	.+12     	; 0x6eca <xio_rs485_queue_RX_char+0x12>
		fr.sig = XIO_SIG_KILL;					// set signal value
    6ebe:	84 e0       	ldi	r24, 0x04	; 4
    6ec0:	80 93 09 25 	sts	0x2509, r24
		signal_etx();							// call app-specific signal handler
    6ec4:	0e 94 f6 37 	call	0x6fec	; 0x6fec <signal_etx>
    6ec8:	08 95       	ret
		return;
	}

	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// wrap condition
    6eca:	80 91 10 25 	lds	r24, 0x2510
    6ece:	81 50       	subi	r24, 0x01	; 1
    6ed0:	80 93 10 25 	sts	0x2510, r24
    6ed4:	80 91 10 25 	lds	r24, 0x2510
    6ed8:	88 23       	and	r24, r24
    6eda:	19 f4       	brne	.+6      	; 0x6ee2 <xio_rs485_queue_RX_char+0x2a>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6edc:	8e ef       	ldi	r24, 0xFE	; 254
    6ede:	80 93 10 25 	sts	0x2510, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    6ee2:	90 91 10 25 	lds	r25, 0x2510
    6ee6:	80 91 0f 25 	lds	r24, 0x250F
    6eea:	98 17       	cp	r25, r24
    6eec:	39 f0       	breq	.+14     	; 0x6efc <xio_rs485_queue_RX_char+0x44>
		fr.rx_buf[fr.rx_buf_head] = c;			// FAKE INPUT DATA
    6eee:	e0 91 10 25 	lds	r30, 0x2510
    6ef2:	f0 e0       	ldi	r31, 0x00	; 0
    6ef4:	e9 5f       	subi	r30, 0xF9	; 249
    6ef6:	fa 4d       	sbci	r31, 0xDA	; 218
    6ef8:	25 87       	std	Z+13, r18	; 0x0d
    6efa:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6efc:	80 91 10 25 	lds	r24, 0x2510
    6f00:	8f 5f       	subi	r24, 0xFF	; 255
    6f02:	80 93 10 25 	sts	0x2510, r24
    6f06:	80 91 10 25 	lds	r24, 0x2510
    6f0a:	8f 3f       	cpi	r24, 0xFF	; 255
    6f0c:	19 f4       	brne	.+6      	; 0x6f14 <xio_rs485_queue_RX_char+0x5c>
		fr.rx_buf_head = 1;
    6f0e:	81 e0       	ldi	r24, 0x01	; 1
    6f10:	80 93 10 25 	sts	0x2510, r24
    6f14:	08 95       	ret

00006f16 <xio_rs485_queue_RX_string>:
/*
 * xio_rs485_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_rs485_queue_RX_string(char *buf)
{
    6f16:	1f 93       	push	r17
    6f18:	cf 93       	push	r28
    6f1a:	df 93       	push	r29
    6f1c:	ec 01       	movw	r28, r24
    6f1e:	10 e0       	ldi	r17, 0x00	; 0
    6f20:	02 c0       	rjmp	.+4      	; 0x6f26 <xio_rs485_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_rs485_queue_RX_char(c);
    6f22:	0e 94 5c 37 	call	0x6eb8	; 0x6eb8 <xio_rs485_queue_RX_char>
void xio_rs485_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    6f26:	fe 01       	movw	r30, r28
    6f28:	e1 0f       	add	r30, r17
    6f2a:	f1 1d       	adc	r31, r1
    6f2c:	80 81       	ld	r24, Z
    6f2e:	1f 5f       	subi	r17, 0xFF	; 255
    6f30:	88 23       	and	r24, r24
    6f32:	b9 f7       	brne	.-18     	; 0x6f22 <xio_rs485_queue_RX_string+0xc>
		xio_rs485_queue_RX_char(c);
	}
}
    6f34:	df 91       	pop	r29
    6f36:	cf 91       	pop	r28
    6f38:	1f 91       	pop	r17
    6f3a:	08 95       	ret

00006f3c <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)		//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    6f3c:	1f 92       	push	r1
    6f3e:	0f 92       	push	r0
    6f40:	0f b6       	in	r0, 0x3f	; 63
    6f42:	0f 92       	push	r0
    6f44:	0b b6       	in	r0, 0x3b	; 59
    6f46:	0f 92       	push	r0
    6f48:	11 24       	eor	r1, r1
    6f4a:	2f 93       	push	r18
    6f4c:	3f 93       	push	r19
    6f4e:	4f 93       	push	r20
    6f50:	5f 93       	push	r21
    6f52:	6f 93       	push	r22
    6f54:	7f 93       	push	r23
    6f56:	8f 93       	push	r24
    6f58:	9f 93       	push	r25
    6f5a:	af 93       	push	r26
    6f5c:	bf 93       	push	r27
    6f5e:	ef 93       	push	r30
    6f60:	ff 93       	push	r31
	uint8_t c = fr.usart->DATA;					// can only read DATA once
    6f62:	e0 91 25 26 	lds	r30, 0x2625
    6f66:	f0 91 26 26 	lds	r31, 0x2626
    6f6a:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6f6c:	23 30       	cpi	r18, 0x03	; 3
    6f6e:	31 f4       	brne	.+12     	; 0x6f7c <__vector_28+0x40>
		fr.sig = XIO_SIG_KILL;					// set signal value
    6f70:	84 e0       	ldi	r24, 0x04	; 4
    6f72:	80 93 09 25 	sts	0x2509, r24
		signal_etx();							// call app-specific signal handler
    6f76:	0e 94 f6 37 	call	0x6fec	; 0x6fec <signal_etx>
    6f7a:	25 c0       	rjmp	.+74     	; 0x6fc6 <__vector_28+0x8a>
		return;
	}

	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// advance buffer head with wrap
    6f7c:	80 91 10 25 	lds	r24, 0x2510
    6f80:	81 50       	subi	r24, 0x01	; 1
    6f82:	80 93 10 25 	sts	0x2510, r24
    6f86:	80 91 10 25 	lds	r24, 0x2510
    6f8a:	88 23       	and	r24, r24
    6f8c:	19 f4       	brne	.+6      	; 0x6f94 <__vector_28+0x58>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6f8e:	8e ef       	ldi	r24, 0xFE	; 254
    6f90:	80 93 10 25 	sts	0x2510, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    6f94:	90 91 10 25 	lds	r25, 0x2510
    6f98:	80 91 0f 25 	lds	r24, 0x250F
    6f9c:	98 17       	cp	r25, r24
    6f9e:	39 f0       	breq	.+14     	; 0x6fae <__vector_28+0x72>
		fr.rx_buf[fr.rx_buf_head] = c;			// (= USARTC0.DATA;)
    6fa0:	e0 91 10 25 	lds	r30, 0x2510
    6fa4:	f0 e0       	ldi	r31, 0x00	; 0
    6fa6:	e9 5f       	subi	r30, 0xF9	; 249
    6fa8:	fa 4d       	sbci	r31, 0xDA	; 218
    6faa:	25 87       	std	Z+13, r18	; 0x0d
    6fac:	0c c0       	rjmp	.+24     	; 0x6fc6 <__vector_28+0x8a>
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6fae:	80 91 10 25 	lds	r24, 0x2510
    6fb2:	8f 5f       	subi	r24, 0xFF	; 255
    6fb4:	80 93 10 25 	sts	0x2510, r24
    6fb8:	80 91 10 25 	lds	r24, 0x2510
    6fbc:	8f 3f       	cpi	r24, 0xFF	; 255
    6fbe:	19 f4       	brne	.+6      	; 0x6fc6 <__vector_28+0x8a>
		fr.rx_buf_head = 1;
    6fc0:	81 e0       	ldi	r24, 0x01	; 1
    6fc2:	80 93 10 25 	sts	0x2510, r24
	}
	// activate flow control here or before it gets to this level
}
    6fc6:	ff 91       	pop	r31
    6fc8:	ef 91       	pop	r30
    6fca:	bf 91       	pop	r27
    6fcc:	af 91       	pop	r26
    6fce:	9f 91       	pop	r25
    6fd0:	8f 91       	pop	r24
    6fd2:	7f 91       	pop	r23
    6fd4:	6f 91       	pop	r22
    6fd6:	5f 91       	pop	r21
    6fd8:	4f 91       	pop	r20
    6fda:	3f 91       	pop	r19
    6fdc:	2f 91       	pop	r18
    6fde:	0f 90       	pop	r0
    6fe0:	0b be       	out	0x3b, r0	; 59
    6fe2:	0f 90       	pop	r0
    6fe4:	0f be       	out	0x3f, r0	; 63
    6fe6:	0f 90       	pop	r0
    6fe8:	1f 90       	pop	r1
    6fea:	18 95       	reti

00006fec <signal_etx>:
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx() {			// ^c
{
	tg_reset_source();					// return control to standard device
    6fec:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <tg_reset_source>
	mc_motion_stop();					// stop computing and generating motions
    6ff0:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    6ff4:	0e 94 c5 31 	call	0x638a	; 0x638a <mv_flush>
	st_stop_steppers();					// stop the steppers
    6ff8:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <st_stop_steppers>
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
*/
}
    6ffc:	08 95       	ret

00006ffe <__udivdi3>:
    6ffe:	ae e5       	ldi	r26, 0x5E	; 94
    7000:	b0 e0       	ldi	r27, 0x00	; 0
    7002:	e5 e0       	ldi	r30, 0x05	; 5
    7004:	f8 e3       	ldi	r31, 0x38	; 56
    7006:	0c 94 92 46 	jmp	0x8d24	; 0x8d24 <__prologue_saves__>
    700a:	a8 e0       	ldi	r26, 0x08	; 8
    700c:	4e 01       	movw	r8, r28
    700e:	08 94       	sec
    7010:	81 1c       	adc	r8, r1
    7012:	91 1c       	adc	r9, r1
    7014:	f4 01       	movw	r30, r8
    7016:	6a 2e       	mov	r6, r26
    7018:	11 92       	st	Z+, r1
    701a:	6a 94       	dec	r6
    701c:	e9 f7       	brne	.-6      	; 0x7018 <__udivdi3+0x1a>
    701e:	29 83       	std	Y+1, r18	; 0x01
    7020:	3a 83       	std	Y+2, r19	; 0x02
    7022:	4b 83       	std	Y+3, r20	; 0x03
    7024:	5c 83       	std	Y+4, r21	; 0x04
    7026:	6d 83       	std	Y+5, r22	; 0x05
    7028:	7e 83       	std	Y+6, r23	; 0x06
    702a:	8f 83       	std	Y+7, r24	; 0x07
    702c:	98 87       	std	Y+8, r25	; 0x08
    702e:	ce 01       	movw	r24, r28
    7030:	09 96       	adiw	r24, 0x09	; 9
    7032:	fc 01       	movw	r30, r24
    7034:	11 92       	st	Z+, r1
    7036:	aa 95       	dec	r26
    7038:	e9 f7       	brne	.-6      	; 0x7034 <__udivdi3+0x36>
    703a:	a9 86       	std	Y+9, r10	; 0x09
    703c:	ba 86       	std	Y+10, r11	; 0x0a
    703e:	cb 86       	std	Y+11, r12	; 0x0b
    7040:	dc 86       	std	Y+12, r13	; 0x0c
    7042:	ed 86       	std	Y+13, r14	; 0x0d
    7044:	fe 86       	std	Y+14, r15	; 0x0e
    7046:	0f 87       	std	Y+15, r16	; 0x0f
    7048:	18 8b       	std	Y+16, r17	; 0x10
    704a:	29 84       	ldd	r2, Y+9	; 0x09
    704c:	3a 84       	ldd	r3, Y+10	; 0x0a
    704e:	4b 84       	ldd	r4, Y+11	; 0x0b
    7050:	5c 84       	ldd	r5, Y+12	; 0x0c
    7052:	ed 84       	ldd	r14, Y+13	; 0x0d
    7054:	fe 84       	ldd	r15, Y+14	; 0x0e
    7056:	0f 85       	ldd	r16, Y+15	; 0x0f
    7058:	18 89       	ldd	r17, Y+16	; 0x10
    705a:	69 80       	ldd	r6, Y+1	; 0x01
    705c:	7a 80       	ldd	r7, Y+2	; 0x02
    705e:	8b 80       	ldd	r8, Y+3	; 0x03
    7060:	9c 80       	ldd	r9, Y+4	; 0x04
    7062:	6d a6       	std	Y+45, r6	; 0x2d
    7064:	7e a6       	std	Y+46, r7	; 0x2e
    7066:	8f a6       	std	Y+47, r8	; 0x2f
    7068:	98 aa       	std	Y+48, r9	; 0x30
    706a:	6d 80       	ldd	r6, Y+5	; 0x05
    706c:	7e 80       	ldd	r7, Y+6	; 0x06
    706e:	8f 80       	ldd	r8, Y+7	; 0x07
    7070:	98 84       	ldd	r9, Y+8	; 0x08
    7072:	e1 14       	cp	r14, r1
    7074:	f1 04       	cpc	r15, r1
    7076:	01 05       	cpc	r16, r1
    7078:	11 05       	cpc	r17, r1
    707a:	09 f0       	breq	.+2      	; 0x707e <__udivdi3+0x80>
    707c:	b3 c3       	rjmp	.+1894   	; 0x77e4 <__udivdi3+0x7e6>
    707e:	62 14       	cp	r6, r2
    7080:	73 04       	cpc	r7, r3
    7082:	84 04       	cpc	r8, r4
    7084:	95 04       	cpc	r9, r5
    7086:	08 f0       	brcs	.+2      	; 0x708a <__udivdi3+0x8c>
    7088:	3d c1       	rjmp	.+634    	; 0x7304 <__udivdi3+0x306>
    708a:	00 e0       	ldi	r16, 0x00	; 0
    708c:	20 16       	cp	r2, r16
    708e:	00 e0       	ldi	r16, 0x00	; 0
    7090:	30 06       	cpc	r3, r16
    7092:	01 e0       	ldi	r16, 0x01	; 1
    7094:	40 06       	cpc	r4, r16
    7096:	00 e0       	ldi	r16, 0x00	; 0
    7098:	50 06       	cpc	r5, r16
    709a:	88 f4       	brcc	.+34     	; 0x70be <__udivdi3+0xc0>
    709c:	1f ef       	ldi	r17, 0xFF	; 255
    709e:	21 16       	cp	r2, r17
    70a0:	31 04       	cpc	r3, r1
    70a2:	41 04       	cpc	r4, r1
    70a4:	51 04       	cpc	r5, r1
    70a6:	39 f0       	breq	.+14     	; 0x70b6 <__udivdi3+0xb8>
    70a8:	30 f0       	brcs	.+12     	; 0x70b6 <__udivdi3+0xb8>
    70aa:	48 e0       	ldi	r20, 0x08	; 8
    70ac:	e4 2e       	mov	r14, r20
    70ae:	f1 2c       	mov	r15, r1
    70b0:	01 2d       	mov	r16, r1
    70b2:	11 2d       	mov	r17, r1
    70b4:	18 c0       	rjmp	.+48     	; 0x70e6 <__udivdi3+0xe8>
    70b6:	ee 24       	eor	r14, r14
    70b8:	ff 24       	eor	r15, r15
    70ba:	87 01       	movw	r16, r14
    70bc:	14 c0       	rjmp	.+40     	; 0x70e6 <__udivdi3+0xe8>
    70be:	20 e0       	ldi	r18, 0x00	; 0
    70c0:	22 16       	cp	r2, r18
    70c2:	20 e0       	ldi	r18, 0x00	; 0
    70c4:	32 06       	cpc	r3, r18
    70c6:	20 e0       	ldi	r18, 0x00	; 0
    70c8:	42 06       	cpc	r4, r18
    70ca:	21 e0       	ldi	r18, 0x01	; 1
    70cc:	52 06       	cpc	r5, r18
    70ce:	30 f0       	brcs	.+12     	; 0x70dc <__udivdi3+0xde>
    70d0:	38 e1       	ldi	r19, 0x18	; 24
    70d2:	e3 2e       	mov	r14, r19
    70d4:	f1 2c       	mov	r15, r1
    70d6:	01 2d       	mov	r16, r1
    70d8:	11 2d       	mov	r17, r1
    70da:	05 c0       	rjmp	.+10     	; 0x70e6 <__udivdi3+0xe8>
    70dc:	20 e1       	ldi	r18, 0x10	; 16
    70de:	e2 2e       	mov	r14, r18
    70e0:	f1 2c       	mov	r15, r1
    70e2:	01 2d       	mov	r16, r1
    70e4:	11 2d       	mov	r17, r1
    70e6:	d2 01       	movw	r26, r4
    70e8:	c1 01       	movw	r24, r2
    70ea:	0e 2c       	mov	r0, r14
    70ec:	04 c0       	rjmp	.+8      	; 0x70f6 <__udivdi3+0xf8>
    70ee:	b6 95       	lsr	r27
    70f0:	a7 95       	ror	r26
    70f2:	97 95       	ror	r25
    70f4:	87 95       	ror	r24
    70f6:	0a 94       	dec	r0
    70f8:	d2 f7       	brpl	.-12     	; 0x70ee <__udivdi3+0xf0>
    70fa:	86 5d       	subi	r24, 0xD6	; 214
    70fc:	9f 4d       	sbci	r25, 0xDF	; 223
    70fe:	dc 01       	movw	r26, r24
    7100:	2c 91       	ld	r18, X
    7102:	80 e2       	ldi	r24, 0x20	; 32
    7104:	90 e0       	ldi	r25, 0x00	; 0
    7106:	a0 e0       	ldi	r26, 0x00	; 0
    7108:	b0 e0       	ldi	r27, 0x00	; 0
    710a:	8e 19       	sub	r24, r14
    710c:	9f 09       	sbc	r25, r15
    710e:	a0 0b       	sbc	r26, r16
    7110:	b1 0b       	sbc	r27, r17
    7112:	7c 01       	movw	r14, r24
    7114:	8d 01       	movw	r16, r26
    7116:	e2 1a       	sub	r14, r18
    7118:	f1 08       	sbc	r15, r1
    711a:	01 09       	sbc	r16, r1
    711c:	11 09       	sbc	r17, r1
    711e:	e1 14       	cp	r14, r1
    7120:	f1 04       	cpc	r15, r1
    7122:	01 05       	cpc	r16, r1
    7124:	11 05       	cpc	r17, r1
    7126:	a1 f1       	breq	.+104    	; 0x7190 <__udivdi3+0x192>
    7128:	0e 2c       	mov	r0, r14
    712a:	04 c0       	rjmp	.+8      	; 0x7134 <__udivdi3+0x136>
    712c:	22 0c       	add	r2, r2
    712e:	33 1c       	adc	r3, r3
    7130:	44 1c       	adc	r4, r4
    7132:	55 1c       	adc	r5, r5
    7134:	0a 94       	dec	r0
    7136:	d2 f7       	brpl	.-12     	; 0x712c <__udivdi3+0x12e>
    7138:	a4 01       	movw	r20, r8
    713a:	93 01       	movw	r18, r6
    713c:	0e 2c       	mov	r0, r14
    713e:	04 c0       	rjmp	.+8      	; 0x7148 <__udivdi3+0x14a>
    7140:	22 0f       	add	r18, r18
    7142:	33 1f       	adc	r19, r19
    7144:	44 1f       	adc	r20, r20
    7146:	55 1f       	adc	r21, r21
    7148:	0a 94       	dec	r0
    714a:	d2 f7       	brpl	.-12     	; 0x7140 <__udivdi3+0x142>
    714c:	80 e2       	ldi	r24, 0x20	; 32
    714e:	90 e0       	ldi	r25, 0x00	; 0
    7150:	8e 19       	sub	r24, r14
    7152:	9f 09       	sbc	r25, r15
    7154:	6d a4       	ldd	r6, Y+45	; 0x2d
    7156:	7e a4       	ldd	r7, Y+46	; 0x2e
    7158:	8f a4       	ldd	r8, Y+47	; 0x2f
    715a:	98 a8       	ldd	r9, Y+48	; 0x30
    715c:	04 c0       	rjmp	.+8      	; 0x7166 <__udivdi3+0x168>
    715e:	96 94       	lsr	r9
    7160:	87 94       	ror	r8
    7162:	77 94       	ror	r7
    7164:	67 94       	ror	r6
    7166:	8a 95       	dec	r24
    7168:	d2 f7       	brpl	.-12     	; 0x715e <__udivdi3+0x160>
    716a:	62 2a       	or	r6, r18
    716c:	73 2a       	or	r7, r19
    716e:	84 2a       	or	r8, r20
    7170:	95 2a       	or	r9, r21
    7172:	ad a4       	ldd	r10, Y+45	; 0x2d
    7174:	be a4       	ldd	r11, Y+46	; 0x2e
    7176:	cf a4       	ldd	r12, Y+47	; 0x2f
    7178:	d8 a8       	ldd	r13, Y+48	; 0x30
    717a:	04 c0       	rjmp	.+8      	; 0x7184 <__udivdi3+0x186>
    717c:	aa 0c       	add	r10, r10
    717e:	bb 1c       	adc	r11, r11
    7180:	cc 1c       	adc	r12, r12
    7182:	dd 1c       	adc	r13, r13
    7184:	ea 94       	dec	r14
    7186:	d2 f7       	brpl	.-12     	; 0x717c <__udivdi3+0x17e>
    7188:	ad a6       	std	Y+45, r10	; 0x2d
    718a:	be a6       	std	Y+46, r11	; 0x2e
    718c:	cf a6       	std	Y+47, r12	; 0x2f
    718e:	d8 aa       	std	Y+48, r13	; 0x30
    7190:	62 01       	movw	r12, r4
    7192:	ee 24       	eor	r14, r14
    7194:	ff 24       	eor	r15, r15
    7196:	cd aa       	std	Y+53, r12	; 0x35
    7198:	de aa       	std	Y+54, r13	; 0x36
    719a:	ef aa       	std	Y+55, r14	; 0x37
    719c:	f8 ae       	std	Y+56, r15	; 0x38
    719e:	92 01       	movw	r18, r4
    71a0:	81 01       	movw	r16, r2
    71a2:	20 70       	andi	r18, 0x00	; 0
    71a4:	30 70       	andi	r19, 0x00	; 0
    71a6:	09 af       	std	Y+57, r16	; 0x39
    71a8:	1a af       	std	Y+58, r17	; 0x3a
    71aa:	2b af       	std	Y+59, r18	; 0x3b
    71ac:	3c af       	std	Y+60, r19	; 0x3c
    71ae:	c4 01       	movw	r24, r8
    71b0:	b3 01       	movw	r22, r6
    71b2:	a7 01       	movw	r20, r14
    71b4:	96 01       	movw	r18, r12
    71b6:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    71ba:	7b 01       	movw	r14, r22
    71bc:	8c 01       	movw	r16, r24
    71be:	c4 01       	movw	r24, r8
    71c0:	b3 01       	movw	r22, r6
    71c2:	2d a9       	ldd	r18, Y+53	; 0x35
    71c4:	3e a9       	ldd	r19, Y+54	; 0x36
    71c6:	4f a9       	ldd	r20, Y+55	; 0x37
    71c8:	58 ad       	ldd	r21, Y+56	; 0x38
    71ca:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    71ce:	c9 01       	movw	r24, r18
    71d0:	da 01       	movw	r26, r20
    71d2:	3c 01       	movw	r6, r24
    71d4:	4d 01       	movw	r8, r26
    71d6:	c4 01       	movw	r24, r8
    71d8:	b3 01       	movw	r22, r6
    71da:	29 ad       	ldd	r18, Y+57	; 0x39
    71dc:	3a ad       	ldd	r19, Y+58	; 0x3a
    71de:	4b ad       	ldd	r20, Y+59	; 0x3b
    71e0:	5c ad       	ldd	r21, Y+60	; 0x3c
    71e2:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <__mulsi3>
    71e6:	9b 01       	movw	r18, r22
    71e8:	ac 01       	movw	r20, r24
    71ea:	87 01       	movw	r16, r14
    71ec:	ff 24       	eor	r15, r15
    71ee:	ee 24       	eor	r14, r14
    71f0:	ad a4       	ldd	r10, Y+45	; 0x2d
    71f2:	be a4       	ldd	r11, Y+46	; 0x2e
    71f4:	cf a4       	ldd	r12, Y+47	; 0x2f
    71f6:	d8 a8       	ldd	r13, Y+48	; 0x30
    71f8:	c6 01       	movw	r24, r12
    71fa:	aa 27       	eor	r26, r26
    71fc:	bb 27       	eor	r27, r27
    71fe:	57 01       	movw	r10, r14
    7200:	68 01       	movw	r12, r16
    7202:	a8 2a       	or	r10, r24
    7204:	b9 2a       	or	r11, r25
    7206:	ca 2a       	or	r12, r26
    7208:	db 2a       	or	r13, r27
    720a:	a2 16       	cp	r10, r18
    720c:	b3 06       	cpc	r11, r19
    720e:	c4 06       	cpc	r12, r20
    7210:	d5 06       	cpc	r13, r21
    7212:	e0 f4       	brcc	.+56     	; 0x724c <__udivdi3+0x24e>
    7214:	08 94       	sec
    7216:	61 08       	sbc	r6, r1
    7218:	71 08       	sbc	r7, r1
    721a:	81 08       	sbc	r8, r1
    721c:	91 08       	sbc	r9, r1
    721e:	a2 0c       	add	r10, r2
    7220:	b3 1c       	adc	r11, r3
    7222:	c4 1c       	adc	r12, r4
    7224:	d5 1c       	adc	r13, r5
    7226:	a2 14       	cp	r10, r2
    7228:	b3 04       	cpc	r11, r3
    722a:	c4 04       	cpc	r12, r4
    722c:	d5 04       	cpc	r13, r5
    722e:	70 f0       	brcs	.+28     	; 0x724c <__udivdi3+0x24e>
    7230:	a2 16       	cp	r10, r18
    7232:	b3 06       	cpc	r11, r19
    7234:	c4 06       	cpc	r12, r20
    7236:	d5 06       	cpc	r13, r21
    7238:	48 f4       	brcc	.+18     	; 0x724c <__udivdi3+0x24e>
    723a:	08 94       	sec
    723c:	61 08       	sbc	r6, r1
    723e:	71 08       	sbc	r7, r1
    7240:	81 08       	sbc	r8, r1
    7242:	91 08       	sbc	r9, r1
    7244:	a2 0c       	add	r10, r2
    7246:	b3 1c       	adc	r11, r3
    7248:	c4 1c       	adc	r12, r4
    724a:	d5 1c       	adc	r13, r5
    724c:	a2 1a       	sub	r10, r18
    724e:	b3 0a       	sbc	r11, r19
    7250:	c4 0a       	sbc	r12, r20
    7252:	d5 0a       	sbc	r13, r21
    7254:	c6 01       	movw	r24, r12
    7256:	b5 01       	movw	r22, r10
    7258:	2d a9       	ldd	r18, Y+53	; 0x35
    725a:	3e a9       	ldd	r19, Y+54	; 0x36
    725c:	4f a9       	ldd	r20, Y+55	; 0x37
    725e:	58 ad       	ldd	r21, Y+56	; 0x38
    7260:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    7264:	7b 01       	movw	r14, r22
    7266:	8c 01       	movw	r16, r24
    7268:	c6 01       	movw	r24, r12
    726a:	b5 01       	movw	r22, r10
    726c:	2d a9       	ldd	r18, Y+53	; 0x35
    726e:	3e a9       	ldd	r19, Y+54	; 0x36
    7270:	4f a9       	ldd	r20, Y+55	; 0x37
    7272:	58 ad       	ldd	r21, Y+56	; 0x38
    7274:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    7278:	c9 01       	movw	r24, r18
    727a:	da 01       	movw	r26, r20
    727c:	5c 01       	movw	r10, r24
    727e:	6d 01       	movw	r12, r26
    7280:	c6 01       	movw	r24, r12
    7282:	b5 01       	movw	r22, r10
    7284:	29 ad       	ldd	r18, Y+57	; 0x39
    7286:	3a ad       	ldd	r19, Y+58	; 0x3a
    7288:	4b ad       	ldd	r20, Y+59	; 0x3b
    728a:	5c ad       	ldd	r21, Y+60	; 0x3c
    728c:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <__mulsi3>
    7290:	9b 01       	movw	r18, r22
    7292:	ac 01       	movw	r20, r24
    7294:	87 01       	movw	r16, r14
    7296:	ff 24       	eor	r15, r15
    7298:	ee 24       	eor	r14, r14
    729a:	8d a5       	ldd	r24, Y+45	; 0x2d
    729c:	9e a5       	ldd	r25, Y+46	; 0x2e
    729e:	af a5       	ldd	r26, Y+47	; 0x2f
    72a0:	b8 a9       	ldd	r27, Y+48	; 0x30
    72a2:	a0 70       	andi	r26, 0x00	; 0
    72a4:	b0 70       	andi	r27, 0x00	; 0
    72a6:	e8 2a       	or	r14, r24
    72a8:	f9 2a       	or	r15, r25
    72aa:	0a 2b       	or	r16, r26
    72ac:	1b 2b       	or	r17, r27
    72ae:	e2 16       	cp	r14, r18
    72b0:	f3 06       	cpc	r15, r19
    72b2:	04 07       	cpc	r16, r20
    72b4:	15 07       	cpc	r17, r21
    72b6:	c0 f4       	brcc	.+48     	; 0x72e8 <__udivdi3+0x2ea>
    72b8:	08 94       	sec
    72ba:	a1 08       	sbc	r10, r1
    72bc:	b1 08       	sbc	r11, r1
    72be:	c1 08       	sbc	r12, r1
    72c0:	d1 08       	sbc	r13, r1
    72c2:	e2 0c       	add	r14, r2
    72c4:	f3 1c       	adc	r15, r3
    72c6:	04 1d       	adc	r16, r4
    72c8:	15 1d       	adc	r17, r5
    72ca:	e2 14       	cp	r14, r2
    72cc:	f3 04       	cpc	r15, r3
    72ce:	04 05       	cpc	r16, r4
    72d0:	15 05       	cpc	r17, r5
    72d2:	50 f0       	brcs	.+20     	; 0x72e8 <__udivdi3+0x2ea>
    72d4:	e2 16       	cp	r14, r18
    72d6:	f3 06       	cpc	r15, r19
    72d8:	04 07       	cpc	r16, r20
    72da:	15 07       	cpc	r17, r21
    72dc:	28 f4       	brcc	.+10     	; 0x72e8 <__udivdi3+0x2ea>
    72de:	08 94       	sec
    72e0:	a1 08       	sbc	r10, r1
    72e2:	b1 08       	sbc	r11, r1
    72e4:	c1 08       	sbc	r12, r1
    72e6:	d1 08       	sbc	r13, r1
    72e8:	d3 01       	movw	r26, r6
    72ea:	99 27       	eor	r25, r25
    72ec:	88 27       	eor	r24, r24
    72ee:	86 01       	movw	r16, r12
    72f0:	75 01       	movw	r14, r10
    72f2:	e8 2a       	or	r14, r24
    72f4:	f9 2a       	or	r15, r25
    72f6:	0a 2b       	or	r16, r26
    72f8:	1b 2b       	or	r17, r27
    72fa:	e9 aa       	std	Y+49, r14	; 0x31
    72fc:	fa aa       	std	Y+50, r15	; 0x32
    72fe:	0b ab       	std	Y+51, r16	; 0x33
    7300:	1c ab       	std	Y+52, r17	; 0x34
    7302:	cf c4       	rjmp	.+2462   	; 0x7ca2 <__udivdi3+0xca4>
    7304:	21 14       	cp	r2, r1
    7306:	31 04       	cpc	r3, r1
    7308:	41 04       	cpc	r4, r1
    730a:	51 04       	cpc	r5, r1
    730c:	71 f4       	brne	.+28     	; 0x732a <__udivdi3+0x32c>
    730e:	61 e0       	ldi	r22, 0x01	; 1
    7310:	70 e0       	ldi	r23, 0x00	; 0
    7312:	80 e0       	ldi	r24, 0x00	; 0
    7314:	90 e0       	ldi	r25, 0x00	; 0
    7316:	20 e0       	ldi	r18, 0x00	; 0
    7318:	30 e0       	ldi	r19, 0x00	; 0
    731a:	40 e0       	ldi	r20, 0x00	; 0
    731c:	50 e0       	ldi	r21, 0x00	; 0
    731e:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    7322:	c9 01       	movw	r24, r18
    7324:	da 01       	movw	r26, r20
    7326:	1c 01       	movw	r2, r24
    7328:	2d 01       	movw	r4, r26
    732a:	00 e0       	ldi	r16, 0x00	; 0
    732c:	20 16       	cp	r2, r16
    732e:	00 e0       	ldi	r16, 0x00	; 0
    7330:	30 06       	cpc	r3, r16
    7332:	01 e0       	ldi	r16, 0x01	; 1
    7334:	40 06       	cpc	r4, r16
    7336:	00 e0       	ldi	r16, 0x00	; 0
    7338:	50 06       	cpc	r5, r16
    733a:	88 f4       	brcc	.+34     	; 0x735e <__udivdi3+0x360>
    733c:	1f ef       	ldi	r17, 0xFF	; 255
    733e:	21 16       	cp	r2, r17
    7340:	31 04       	cpc	r3, r1
    7342:	41 04       	cpc	r4, r1
    7344:	51 04       	cpc	r5, r1
    7346:	31 f0       	breq	.+12     	; 0x7354 <__udivdi3+0x356>
    7348:	28 f0       	brcs	.+10     	; 0x7354 <__udivdi3+0x356>
    734a:	48 e0       	ldi	r20, 0x08	; 8
    734c:	50 e0       	ldi	r21, 0x00	; 0
    734e:	60 e0       	ldi	r22, 0x00	; 0
    7350:	70 e0       	ldi	r23, 0x00	; 0
    7352:	17 c0       	rjmp	.+46     	; 0x7382 <__udivdi3+0x384>
    7354:	40 e0       	ldi	r20, 0x00	; 0
    7356:	50 e0       	ldi	r21, 0x00	; 0
    7358:	60 e0       	ldi	r22, 0x00	; 0
    735a:	70 e0       	ldi	r23, 0x00	; 0
    735c:	12 c0       	rjmp	.+36     	; 0x7382 <__udivdi3+0x384>
    735e:	20 e0       	ldi	r18, 0x00	; 0
    7360:	22 16       	cp	r2, r18
    7362:	20 e0       	ldi	r18, 0x00	; 0
    7364:	32 06       	cpc	r3, r18
    7366:	20 e0       	ldi	r18, 0x00	; 0
    7368:	42 06       	cpc	r4, r18
    736a:	21 e0       	ldi	r18, 0x01	; 1
    736c:	52 06       	cpc	r5, r18
    736e:	28 f0       	brcs	.+10     	; 0x737a <__udivdi3+0x37c>
    7370:	48 e1       	ldi	r20, 0x18	; 24
    7372:	50 e0       	ldi	r21, 0x00	; 0
    7374:	60 e0       	ldi	r22, 0x00	; 0
    7376:	70 e0       	ldi	r23, 0x00	; 0
    7378:	04 c0       	rjmp	.+8      	; 0x7382 <__udivdi3+0x384>
    737a:	40 e1       	ldi	r20, 0x10	; 16
    737c:	50 e0       	ldi	r21, 0x00	; 0
    737e:	60 e0       	ldi	r22, 0x00	; 0
    7380:	70 e0       	ldi	r23, 0x00	; 0
    7382:	d2 01       	movw	r26, r4
    7384:	c1 01       	movw	r24, r2
    7386:	04 2e       	mov	r0, r20
    7388:	04 c0       	rjmp	.+8      	; 0x7392 <__udivdi3+0x394>
    738a:	b6 95       	lsr	r27
    738c:	a7 95       	ror	r26
    738e:	97 95       	ror	r25
    7390:	87 95       	ror	r24
    7392:	0a 94       	dec	r0
    7394:	d2 f7       	brpl	.-12     	; 0x738a <__udivdi3+0x38c>
    7396:	86 5d       	subi	r24, 0xD6	; 214
    7398:	9f 4d       	sbci	r25, 0xDF	; 223
    739a:	dc 01       	movw	r26, r24
    739c:	2c 91       	ld	r18, X
    739e:	e0 e2       	ldi	r30, 0x20	; 32
    73a0:	ee 2e       	mov	r14, r30
    73a2:	f1 2c       	mov	r15, r1
    73a4:	01 2d       	mov	r16, r1
    73a6:	11 2d       	mov	r17, r1
    73a8:	d8 01       	movw	r26, r16
    73aa:	c7 01       	movw	r24, r14
    73ac:	84 1b       	sub	r24, r20
    73ae:	95 0b       	sbc	r25, r21
    73b0:	a6 0b       	sbc	r26, r22
    73b2:	b7 0b       	sbc	r27, r23
    73b4:	82 1b       	sub	r24, r18
    73b6:	91 09       	sbc	r25, r1
    73b8:	a1 09       	sbc	r26, r1
    73ba:	b1 09       	sbc	r27, r1
    73bc:	00 97       	sbiw	r24, 0x00	; 0
    73be:	a1 05       	cpc	r26, r1
    73c0:	b1 05       	cpc	r27, r1
    73c2:	61 f4       	brne	.+24     	; 0x73dc <__udivdi3+0x3de>
    73c4:	64 01       	movw	r12, r8
    73c6:	53 01       	movw	r10, r6
    73c8:	a2 18       	sub	r10, r2
    73ca:	b3 08       	sbc	r11, r3
    73cc:	c4 08       	sbc	r12, r4
    73ce:	d5 08       	sbc	r13, r5
    73d0:	31 e0       	ldi	r19, 0x01	; 1
    73d2:	63 2e       	mov	r6, r19
    73d4:	71 2c       	mov	r7, r1
    73d6:	81 2c       	mov	r8, r1
    73d8:	91 2c       	mov	r9, r1
    73da:	1e c1       	rjmp	.+572    	; 0x7618 <__udivdi3+0x61a>
    73dc:	6f 96       	adiw	r28, 0x1f	; 31
    73de:	8f af       	std	Y+63, r24	; 0x3f
    73e0:	6f 97       	sbiw	r28, 0x1f	; 31
    73e2:	08 2e       	mov	r0, r24
    73e4:	04 c0       	rjmp	.+8      	; 0x73ee <__udivdi3+0x3f0>
    73e6:	22 0c       	add	r2, r2
    73e8:	33 1c       	adc	r3, r3
    73ea:	44 1c       	adc	r4, r4
    73ec:	55 1c       	adc	r5, r5
    73ee:	0a 94       	dec	r0
    73f0:	d2 f7       	brpl	.-12     	; 0x73e6 <__udivdi3+0x3e8>
    73f2:	ee 2d       	mov	r30, r14
    73f4:	e8 1b       	sub	r30, r24
    73f6:	64 01       	movw	r12, r8
    73f8:	53 01       	movw	r10, r6
    73fa:	0e 2e       	mov	r0, r30
    73fc:	04 c0       	rjmp	.+8      	; 0x7406 <__udivdi3+0x408>
    73fe:	d6 94       	lsr	r13
    7400:	c7 94       	ror	r12
    7402:	b7 94       	ror	r11
    7404:	a7 94       	ror	r10
    7406:	0a 94       	dec	r0
    7408:	d2 f7       	brpl	.-12     	; 0x73fe <__udivdi3+0x400>
    740a:	a4 01       	movw	r20, r8
    740c:	93 01       	movw	r18, r6
    740e:	6f 96       	adiw	r28, 0x1f	; 31
    7410:	0f ac       	ldd	r0, Y+63	; 0x3f
    7412:	6f 97       	sbiw	r28, 0x1f	; 31
    7414:	04 c0       	rjmp	.+8      	; 0x741e <__udivdi3+0x420>
    7416:	22 0f       	add	r18, r18
    7418:	33 1f       	adc	r19, r19
    741a:	44 1f       	adc	r20, r20
    741c:	55 1f       	adc	r21, r21
    741e:	0a 94       	dec	r0
    7420:	d2 f7       	brpl	.-12     	; 0x7416 <__udivdi3+0x418>
    7422:	6d a4       	ldd	r6, Y+45	; 0x2d
    7424:	7e a4       	ldd	r7, Y+46	; 0x2e
    7426:	8f a4       	ldd	r8, Y+47	; 0x2f
    7428:	98 a8       	ldd	r9, Y+48	; 0x30
    742a:	0e 2e       	mov	r0, r30
    742c:	04 c0       	rjmp	.+8      	; 0x7436 <__udivdi3+0x438>
    742e:	96 94       	lsr	r9
    7430:	87 94       	ror	r8
    7432:	77 94       	ror	r7
    7434:	67 94       	ror	r6
    7436:	0a 94       	dec	r0
    7438:	d2 f7       	brpl	.-12     	; 0x742e <__udivdi3+0x430>
    743a:	84 01       	movw	r16, r8
    743c:	73 01       	movw	r14, r6
    743e:	e2 2a       	or	r14, r18
    7440:	f3 2a       	or	r15, r19
    7442:	04 2b       	or	r16, r20
    7444:	15 2b       	or	r17, r21
    7446:	e9 a6       	std	Y+41, r14	; 0x29
    7448:	fa a6       	std	Y+42, r15	; 0x2a
    744a:	0b a7       	std	Y+43, r16	; 0x2b
    744c:	1c a7       	std	Y+44, r17	; 0x2c
    744e:	32 01       	movw	r6, r4
    7450:	88 24       	eor	r8, r8
    7452:	99 24       	eor	r9, r9
    7454:	92 01       	movw	r18, r4
    7456:	81 01       	movw	r16, r2
    7458:	20 70       	andi	r18, 0x00	; 0
    745a:	30 70       	andi	r19, 0x00	; 0
    745c:	21 96       	adiw	r28, 0x01	; 1
    745e:	0c af       	std	Y+60, r16	; 0x3c
    7460:	1d af       	std	Y+61, r17	; 0x3d
    7462:	2e af       	std	Y+62, r18	; 0x3e
    7464:	3f af       	std	Y+63, r19	; 0x3f
    7466:	21 97       	sbiw	r28, 0x01	; 1
    7468:	c6 01       	movw	r24, r12
    746a:	b5 01       	movw	r22, r10
    746c:	a4 01       	movw	r20, r8
    746e:	93 01       	movw	r18, r6
    7470:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    7474:	7b 01       	movw	r14, r22
    7476:	8c 01       	movw	r16, r24
    7478:	c6 01       	movw	r24, r12
    747a:	b5 01       	movw	r22, r10
    747c:	a4 01       	movw	r20, r8
    747e:	93 01       	movw	r18, r6
    7480:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    7484:	c9 01       	movw	r24, r18
    7486:	da 01       	movw	r26, r20
    7488:	25 96       	adiw	r28, 0x05	; 5
    748a:	8c af       	std	Y+60, r24	; 0x3c
    748c:	9d af       	std	Y+61, r25	; 0x3d
    748e:	ae af       	std	Y+62, r26	; 0x3e
    7490:	bf af       	std	Y+63, r27	; 0x3f
    7492:	25 97       	sbiw	r28, 0x05	; 5
    7494:	bc 01       	movw	r22, r24
    7496:	cd 01       	movw	r24, r26
    7498:	21 96       	adiw	r28, 0x01	; 1
    749a:	2c ad       	ldd	r18, Y+60	; 0x3c
    749c:	3d ad       	ldd	r19, Y+61	; 0x3d
    749e:	4e ad       	ldd	r20, Y+62	; 0x3e
    74a0:	5f ad       	ldd	r21, Y+63	; 0x3f
    74a2:	21 97       	sbiw	r28, 0x01	; 1
    74a4:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <__mulsi3>
    74a8:	9b 01       	movw	r18, r22
    74aa:	ac 01       	movw	r20, r24
    74ac:	87 01       	movw	r16, r14
    74ae:	ff 24       	eor	r15, r15
    74b0:	ee 24       	eor	r14, r14
    74b2:	a9 a4       	ldd	r10, Y+41	; 0x29
    74b4:	ba a4       	ldd	r11, Y+42	; 0x2a
    74b6:	cb a4       	ldd	r12, Y+43	; 0x2b
    74b8:	dc a4       	ldd	r13, Y+44	; 0x2c
    74ba:	c6 01       	movw	r24, r12
    74bc:	aa 27       	eor	r26, r26
    74be:	bb 27       	eor	r27, r27
    74c0:	5c 01       	movw	r10, r24
    74c2:	6d 01       	movw	r12, r26
    74c4:	ae 28       	or	r10, r14
    74c6:	bf 28       	or	r11, r15
    74c8:	c0 2a       	or	r12, r16
    74ca:	d1 2a       	or	r13, r17
    74cc:	a2 16       	cp	r10, r18
    74ce:	b3 06       	cpc	r11, r19
    74d0:	c4 06       	cpc	r12, r20
    74d2:	d5 06       	cpc	r13, r21
    74d4:	60 f5       	brcc	.+88     	; 0x752e <__udivdi3+0x530>
    74d6:	25 96       	adiw	r28, 0x05	; 5
    74d8:	6c ad       	ldd	r22, Y+60	; 0x3c
    74da:	7d ad       	ldd	r23, Y+61	; 0x3d
    74dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    74de:	9f ad       	ldd	r25, Y+63	; 0x3f
    74e0:	25 97       	sbiw	r28, 0x05	; 5
    74e2:	61 50       	subi	r22, 0x01	; 1
    74e4:	70 40       	sbci	r23, 0x00	; 0
    74e6:	80 40       	sbci	r24, 0x00	; 0
    74e8:	90 40       	sbci	r25, 0x00	; 0
    74ea:	25 96       	adiw	r28, 0x05	; 5
    74ec:	6c af       	std	Y+60, r22	; 0x3c
    74ee:	7d af       	std	Y+61, r23	; 0x3d
    74f0:	8e af       	std	Y+62, r24	; 0x3e
    74f2:	9f af       	std	Y+63, r25	; 0x3f
    74f4:	25 97       	sbiw	r28, 0x05	; 5
    74f6:	a2 0c       	add	r10, r2
    74f8:	b3 1c       	adc	r11, r3
    74fa:	c4 1c       	adc	r12, r4
    74fc:	d5 1c       	adc	r13, r5
    74fe:	a2 14       	cp	r10, r2
    7500:	b3 04       	cpc	r11, r3
    7502:	c4 04       	cpc	r12, r4
    7504:	d5 04       	cpc	r13, r5
    7506:	98 f0       	brcs	.+38     	; 0x752e <__udivdi3+0x530>
    7508:	a2 16       	cp	r10, r18
    750a:	b3 06       	cpc	r11, r19
    750c:	c4 06       	cpc	r12, r20
    750e:	d5 06       	cpc	r13, r21
    7510:	70 f4       	brcc	.+28     	; 0x752e <__udivdi3+0x530>
    7512:	61 50       	subi	r22, 0x01	; 1
    7514:	70 40       	sbci	r23, 0x00	; 0
    7516:	80 40       	sbci	r24, 0x00	; 0
    7518:	90 40       	sbci	r25, 0x00	; 0
    751a:	25 96       	adiw	r28, 0x05	; 5
    751c:	6c af       	std	Y+60, r22	; 0x3c
    751e:	7d af       	std	Y+61, r23	; 0x3d
    7520:	8e af       	std	Y+62, r24	; 0x3e
    7522:	9f af       	std	Y+63, r25	; 0x3f
    7524:	25 97       	sbiw	r28, 0x05	; 5
    7526:	a2 0c       	add	r10, r2
    7528:	b3 1c       	adc	r11, r3
    752a:	c4 1c       	adc	r12, r4
    752c:	d5 1c       	adc	r13, r5
    752e:	a2 1a       	sub	r10, r18
    7530:	b3 0a       	sbc	r11, r19
    7532:	c4 0a       	sbc	r12, r20
    7534:	d5 0a       	sbc	r13, r21
    7536:	c6 01       	movw	r24, r12
    7538:	b5 01       	movw	r22, r10
    753a:	a4 01       	movw	r20, r8
    753c:	93 01       	movw	r18, r6
    753e:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    7542:	7b 01       	movw	r14, r22
    7544:	8c 01       	movw	r16, r24
    7546:	c6 01       	movw	r24, r12
    7548:	b5 01       	movw	r22, r10
    754a:	a4 01       	movw	r20, r8
    754c:	93 01       	movw	r18, r6
    754e:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    7552:	c9 01       	movw	r24, r18
    7554:	da 01       	movw	r26, r20
    7556:	3c 01       	movw	r6, r24
    7558:	4d 01       	movw	r8, r26
    755a:	c4 01       	movw	r24, r8
    755c:	b3 01       	movw	r22, r6
    755e:	21 96       	adiw	r28, 0x01	; 1
    7560:	2c ad       	ldd	r18, Y+60	; 0x3c
    7562:	3d ad       	ldd	r19, Y+61	; 0x3d
    7564:	4e ad       	ldd	r20, Y+62	; 0x3e
    7566:	5f ad       	ldd	r21, Y+63	; 0x3f
    7568:	21 97       	sbiw	r28, 0x01	; 1
    756a:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <__mulsi3>
    756e:	9b 01       	movw	r18, r22
    7570:	ac 01       	movw	r20, r24
    7572:	87 01       	movw	r16, r14
    7574:	ff 24       	eor	r15, r15
    7576:	ee 24       	eor	r14, r14
    7578:	89 a5       	ldd	r24, Y+41	; 0x29
    757a:	9a a5       	ldd	r25, Y+42	; 0x2a
    757c:	ab a5       	ldd	r26, Y+43	; 0x2b
    757e:	bc a5       	ldd	r27, Y+44	; 0x2c
    7580:	a0 70       	andi	r26, 0x00	; 0
    7582:	b0 70       	andi	r27, 0x00	; 0
    7584:	57 01       	movw	r10, r14
    7586:	68 01       	movw	r12, r16
    7588:	a8 2a       	or	r10, r24
    758a:	b9 2a       	or	r11, r25
    758c:	ca 2a       	or	r12, r26
    758e:	db 2a       	or	r13, r27
    7590:	a2 16       	cp	r10, r18
    7592:	b3 06       	cpc	r11, r19
    7594:	c4 06       	cpc	r12, r20
    7596:	d5 06       	cpc	r13, r21
    7598:	e0 f4       	brcc	.+56     	; 0x75d2 <__udivdi3+0x5d4>
    759a:	08 94       	sec
    759c:	61 08       	sbc	r6, r1
    759e:	71 08       	sbc	r7, r1
    75a0:	81 08       	sbc	r8, r1
    75a2:	91 08       	sbc	r9, r1
    75a4:	a2 0c       	add	r10, r2
    75a6:	b3 1c       	adc	r11, r3
    75a8:	c4 1c       	adc	r12, r4
    75aa:	d5 1c       	adc	r13, r5
    75ac:	a2 14       	cp	r10, r2
    75ae:	b3 04       	cpc	r11, r3
    75b0:	c4 04       	cpc	r12, r4
    75b2:	d5 04       	cpc	r13, r5
    75b4:	70 f0       	brcs	.+28     	; 0x75d2 <__udivdi3+0x5d4>
    75b6:	a2 16       	cp	r10, r18
    75b8:	b3 06       	cpc	r11, r19
    75ba:	c4 06       	cpc	r12, r20
    75bc:	d5 06       	cpc	r13, r21
    75be:	48 f4       	brcc	.+18     	; 0x75d2 <__udivdi3+0x5d4>
    75c0:	08 94       	sec
    75c2:	61 08       	sbc	r6, r1
    75c4:	71 08       	sbc	r7, r1
    75c6:	81 08       	sbc	r8, r1
    75c8:	91 08       	sbc	r9, r1
    75ca:	a2 0c       	add	r10, r2
    75cc:	b3 1c       	adc	r11, r3
    75ce:	c4 1c       	adc	r12, r4
    75d0:	d5 1c       	adc	r13, r5
    75d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    75d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    75d6:	af a5       	ldd	r26, Y+47	; 0x2f
    75d8:	b8 a9       	ldd	r27, Y+48	; 0x30
    75da:	6f 96       	adiw	r28, 0x1f	; 31
    75dc:	0f ac       	ldd	r0, Y+63	; 0x3f
    75de:	6f 97       	sbiw	r28, 0x1f	; 31
    75e0:	04 c0       	rjmp	.+8      	; 0x75ea <__udivdi3+0x5ec>
    75e2:	88 0f       	add	r24, r24
    75e4:	99 1f       	adc	r25, r25
    75e6:	aa 1f       	adc	r26, r26
    75e8:	bb 1f       	adc	r27, r27
    75ea:	0a 94       	dec	r0
    75ec:	d2 f7       	brpl	.-12     	; 0x75e2 <__udivdi3+0x5e4>
    75ee:	8d a7       	std	Y+45, r24	; 0x2d
    75f0:	9e a7       	std	Y+46, r25	; 0x2e
    75f2:	af a7       	std	Y+47, r26	; 0x2f
    75f4:	b8 ab       	std	Y+48, r27	; 0x30
    75f6:	a2 1a       	sub	r10, r18
    75f8:	b3 0a       	sbc	r11, r19
    75fa:	c4 0a       	sbc	r12, r20
    75fc:	d5 0a       	sbc	r13, r21
    75fe:	25 96       	adiw	r28, 0x05	; 5
    7600:	ec ac       	ldd	r14, Y+60	; 0x3c
    7602:	fd ac       	ldd	r15, Y+61	; 0x3d
    7604:	0e ad       	ldd	r16, Y+62	; 0x3e
    7606:	1f ad       	ldd	r17, Y+63	; 0x3f
    7608:	25 97       	sbiw	r28, 0x05	; 5
    760a:	d7 01       	movw	r26, r14
    760c:	99 27       	eor	r25, r25
    760e:	88 27       	eor	r24, r24
    7610:	68 2a       	or	r6, r24
    7612:	79 2a       	or	r7, r25
    7614:	8a 2a       	or	r8, r26
    7616:	9b 2a       	or	r9, r27
    7618:	82 01       	movw	r16, r4
    761a:	22 27       	eor	r18, r18
    761c:	33 27       	eor	r19, r19
    761e:	29 96       	adiw	r28, 0x09	; 9
    7620:	0c af       	std	Y+60, r16	; 0x3c
    7622:	1d af       	std	Y+61, r17	; 0x3d
    7624:	2e af       	std	Y+62, r18	; 0x3e
    7626:	3f af       	std	Y+63, r19	; 0x3f
    7628:	29 97       	sbiw	r28, 0x09	; 9
    762a:	a2 01       	movw	r20, r4
    762c:	91 01       	movw	r18, r2
    762e:	40 70       	andi	r20, 0x00	; 0
    7630:	50 70       	andi	r21, 0x00	; 0
    7632:	2d 96       	adiw	r28, 0x0d	; 13
    7634:	2c af       	std	Y+60, r18	; 0x3c
    7636:	3d af       	std	Y+61, r19	; 0x3d
    7638:	4e af       	std	Y+62, r20	; 0x3e
    763a:	5f af       	std	Y+63, r21	; 0x3f
    763c:	2d 97       	sbiw	r28, 0x0d	; 13
    763e:	c6 01       	movw	r24, r12
    7640:	b5 01       	movw	r22, r10
    7642:	29 96       	adiw	r28, 0x09	; 9
    7644:	2c ad       	ldd	r18, Y+60	; 0x3c
    7646:	3d ad       	ldd	r19, Y+61	; 0x3d
    7648:	4e ad       	ldd	r20, Y+62	; 0x3e
    764a:	5f ad       	ldd	r21, Y+63	; 0x3f
    764c:	29 97       	sbiw	r28, 0x09	; 9
    764e:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    7652:	7b 01       	movw	r14, r22
    7654:	8c 01       	movw	r16, r24
    7656:	c6 01       	movw	r24, r12
    7658:	b5 01       	movw	r22, r10
    765a:	29 96       	adiw	r28, 0x09	; 9
    765c:	2c ad       	ldd	r18, Y+60	; 0x3c
    765e:	3d ad       	ldd	r19, Y+61	; 0x3d
    7660:	4e ad       	ldd	r20, Y+62	; 0x3e
    7662:	5f ad       	ldd	r21, Y+63	; 0x3f
    7664:	29 97       	sbiw	r28, 0x09	; 9
    7666:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    766a:	c9 01       	movw	r24, r18
    766c:	da 01       	movw	r26, r20
    766e:	61 96       	adiw	r28, 0x11	; 17
    7670:	8c af       	std	Y+60, r24	; 0x3c
    7672:	9d af       	std	Y+61, r25	; 0x3d
    7674:	ae af       	std	Y+62, r26	; 0x3e
    7676:	bf af       	std	Y+63, r27	; 0x3f
    7678:	61 97       	sbiw	r28, 0x11	; 17
    767a:	bc 01       	movw	r22, r24
    767c:	cd 01       	movw	r24, r26
    767e:	2d 96       	adiw	r28, 0x0d	; 13
    7680:	2c ad       	ldd	r18, Y+60	; 0x3c
    7682:	3d ad       	ldd	r19, Y+61	; 0x3d
    7684:	4e ad       	ldd	r20, Y+62	; 0x3e
    7686:	5f ad       	ldd	r21, Y+63	; 0x3f
    7688:	2d 97       	sbiw	r28, 0x0d	; 13
    768a:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <__mulsi3>
    768e:	9b 01       	movw	r18, r22
    7690:	ac 01       	movw	r20, r24
    7692:	87 01       	movw	r16, r14
    7694:	ff 24       	eor	r15, r15
    7696:	ee 24       	eor	r14, r14
    7698:	ad a4       	ldd	r10, Y+45	; 0x2d
    769a:	be a4       	ldd	r11, Y+46	; 0x2e
    769c:	cf a4       	ldd	r12, Y+47	; 0x2f
    769e:	d8 a8       	ldd	r13, Y+48	; 0x30
    76a0:	c6 01       	movw	r24, r12
    76a2:	aa 27       	eor	r26, r26
    76a4:	bb 27       	eor	r27, r27
    76a6:	57 01       	movw	r10, r14
    76a8:	68 01       	movw	r12, r16
    76aa:	a8 2a       	or	r10, r24
    76ac:	b9 2a       	or	r11, r25
    76ae:	ca 2a       	or	r12, r26
    76b0:	db 2a       	or	r13, r27
    76b2:	a2 16       	cp	r10, r18
    76b4:	b3 06       	cpc	r11, r19
    76b6:	c4 06       	cpc	r12, r20
    76b8:	d5 06       	cpc	r13, r21
    76ba:	60 f5       	brcc	.+88     	; 0x7714 <__udivdi3+0x716>
    76bc:	61 96       	adiw	r28, 0x11	; 17
    76be:	6c ad       	ldd	r22, Y+60	; 0x3c
    76c0:	7d ad       	ldd	r23, Y+61	; 0x3d
    76c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    76c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    76c6:	61 97       	sbiw	r28, 0x11	; 17
    76c8:	61 50       	subi	r22, 0x01	; 1
    76ca:	70 40       	sbci	r23, 0x00	; 0
    76cc:	80 40       	sbci	r24, 0x00	; 0
    76ce:	90 40       	sbci	r25, 0x00	; 0
    76d0:	61 96       	adiw	r28, 0x11	; 17
    76d2:	6c af       	std	Y+60, r22	; 0x3c
    76d4:	7d af       	std	Y+61, r23	; 0x3d
    76d6:	8e af       	std	Y+62, r24	; 0x3e
    76d8:	9f af       	std	Y+63, r25	; 0x3f
    76da:	61 97       	sbiw	r28, 0x11	; 17
    76dc:	a2 0c       	add	r10, r2
    76de:	b3 1c       	adc	r11, r3
    76e0:	c4 1c       	adc	r12, r4
    76e2:	d5 1c       	adc	r13, r5
    76e4:	a2 14       	cp	r10, r2
    76e6:	b3 04       	cpc	r11, r3
    76e8:	c4 04       	cpc	r12, r4
    76ea:	d5 04       	cpc	r13, r5
    76ec:	98 f0       	brcs	.+38     	; 0x7714 <__udivdi3+0x716>
    76ee:	a2 16       	cp	r10, r18
    76f0:	b3 06       	cpc	r11, r19
    76f2:	c4 06       	cpc	r12, r20
    76f4:	d5 06       	cpc	r13, r21
    76f6:	70 f4       	brcc	.+28     	; 0x7714 <__udivdi3+0x716>
    76f8:	61 50       	subi	r22, 0x01	; 1
    76fa:	70 40       	sbci	r23, 0x00	; 0
    76fc:	80 40       	sbci	r24, 0x00	; 0
    76fe:	90 40       	sbci	r25, 0x00	; 0
    7700:	61 96       	adiw	r28, 0x11	; 17
    7702:	6c af       	std	Y+60, r22	; 0x3c
    7704:	7d af       	std	Y+61, r23	; 0x3d
    7706:	8e af       	std	Y+62, r24	; 0x3e
    7708:	9f af       	std	Y+63, r25	; 0x3f
    770a:	61 97       	sbiw	r28, 0x11	; 17
    770c:	a2 0c       	add	r10, r2
    770e:	b3 1c       	adc	r11, r3
    7710:	c4 1c       	adc	r12, r4
    7712:	d5 1c       	adc	r13, r5
    7714:	a2 1a       	sub	r10, r18
    7716:	b3 0a       	sbc	r11, r19
    7718:	c4 0a       	sbc	r12, r20
    771a:	d5 0a       	sbc	r13, r21
    771c:	c6 01       	movw	r24, r12
    771e:	b5 01       	movw	r22, r10
    7720:	29 96       	adiw	r28, 0x09	; 9
    7722:	2c ad       	ldd	r18, Y+60	; 0x3c
    7724:	3d ad       	ldd	r19, Y+61	; 0x3d
    7726:	4e ad       	ldd	r20, Y+62	; 0x3e
    7728:	5f ad       	ldd	r21, Y+63	; 0x3f
    772a:	29 97       	sbiw	r28, 0x09	; 9
    772c:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    7730:	7b 01       	movw	r14, r22
    7732:	8c 01       	movw	r16, r24
    7734:	c6 01       	movw	r24, r12
    7736:	b5 01       	movw	r22, r10
    7738:	29 96       	adiw	r28, 0x09	; 9
    773a:	2c ad       	ldd	r18, Y+60	; 0x3c
    773c:	3d ad       	ldd	r19, Y+61	; 0x3d
    773e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7740:	5f ad       	ldd	r21, Y+63	; 0x3f
    7742:	29 97       	sbiw	r28, 0x09	; 9
    7744:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    7748:	c9 01       	movw	r24, r18
    774a:	da 01       	movw	r26, r20
    774c:	5c 01       	movw	r10, r24
    774e:	6d 01       	movw	r12, r26
    7750:	c6 01       	movw	r24, r12
    7752:	b5 01       	movw	r22, r10
    7754:	2d 96       	adiw	r28, 0x0d	; 13
    7756:	2c ad       	ldd	r18, Y+60	; 0x3c
    7758:	3d ad       	ldd	r19, Y+61	; 0x3d
    775a:	4e ad       	ldd	r20, Y+62	; 0x3e
    775c:	5f ad       	ldd	r21, Y+63	; 0x3f
    775e:	2d 97       	sbiw	r28, 0x0d	; 13
    7760:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <__mulsi3>
    7764:	9b 01       	movw	r18, r22
    7766:	ac 01       	movw	r20, r24
    7768:	87 01       	movw	r16, r14
    776a:	ff 24       	eor	r15, r15
    776c:	ee 24       	eor	r14, r14
    776e:	8d a5       	ldd	r24, Y+45	; 0x2d
    7770:	9e a5       	ldd	r25, Y+46	; 0x2e
    7772:	af a5       	ldd	r26, Y+47	; 0x2f
    7774:	b8 a9       	ldd	r27, Y+48	; 0x30
    7776:	a0 70       	andi	r26, 0x00	; 0
    7778:	b0 70       	andi	r27, 0x00	; 0
    777a:	e8 2a       	or	r14, r24
    777c:	f9 2a       	or	r15, r25
    777e:	0a 2b       	or	r16, r26
    7780:	1b 2b       	or	r17, r27
    7782:	e2 16       	cp	r14, r18
    7784:	f3 06       	cpc	r15, r19
    7786:	04 07       	cpc	r16, r20
    7788:	15 07       	cpc	r17, r21
    778a:	c0 f4       	brcc	.+48     	; 0x77bc <__udivdi3+0x7be>
    778c:	08 94       	sec
    778e:	a1 08       	sbc	r10, r1
    7790:	b1 08       	sbc	r11, r1
    7792:	c1 08       	sbc	r12, r1
    7794:	d1 08       	sbc	r13, r1
    7796:	e2 0c       	add	r14, r2
    7798:	f3 1c       	adc	r15, r3
    779a:	04 1d       	adc	r16, r4
    779c:	15 1d       	adc	r17, r5
    779e:	e2 14       	cp	r14, r2
    77a0:	f3 04       	cpc	r15, r3
    77a2:	04 05       	cpc	r16, r4
    77a4:	15 05       	cpc	r17, r5
    77a6:	50 f0       	brcs	.+20     	; 0x77bc <__udivdi3+0x7be>
    77a8:	e2 16       	cp	r14, r18
    77aa:	f3 06       	cpc	r15, r19
    77ac:	04 07       	cpc	r16, r20
    77ae:	15 07       	cpc	r17, r21
    77b0:	28 f4       	brcc	.+10     	; 0x77bc <__udivdi3+0x7be>
    77b2:	08 94       	sec
    77b4:	a1 08       	sbc	r10, r1
    77b6:	b1 08       	sbc	r11, r1
    77b8:	c1 08       	sbc	r12, r1
    77ba:	d1 08       	sbc	r13, r1
    77bc:	61 96       	adiw	r28, 0x11	; 17
    77be:	ec ac       	ldd	r14, Y+60	; 0x3c
    77c0:	fd ac       	ldd	r15, Y+61	; 0x3d
    77c2:	0e ad       	ldd	r16, Y+62	; 0x3e
    77c4:	1f ad       	ldd	r17, Y+63	; 0x3f
    77c6:	61 97       	sbiw	r28, 0x11	; 17
    77c8:	d7 01       	movw	r26, r14
    77ca:	99 27       	eor	r25, r25
    77cc:	88 27       	eor	r24, r24
    77ce:	96 01       	movw	r18, r12
    77d0:	85 01       	movw	r16, r10
    77d2:	08 2b       	or	r16, r24
    77d4:	19 2b       	or	r17, r25
    77d6:	2a 2b       	or	r18, r26
    77d8:	3b 2b       	or	r19, r27
    77da:	09 ab       	std	Y+49, r16	; 0x31
    77dc:	1a ab       	std	Y+50, r17	; 0x32
    77de:	2b ab       	std	Y+51, r18	; 0x33
    77e0:	3c ab       	std	Y+52, r19	; 0x34
    77e2:	62 c2       	rjmp	.+1220   	; 0x7ca8 <__udivdi3+0xcaa>
    77e4:	6e 14       	cp	r6, r14
    77e6:	7f 04       	cpc	r7, r15
    77e8:	80 06       	cpc	r8, r16
    77ea:	91 06       	cpc	r9, r17
    77ec:	08 f4       	brcc	.+2      	; 0x77f0 <__udivdi3+0x7f2>
    77ee:	51 c2       	rjmp	.+1186   	; 0x7c92 <__udivdi3+0xc94>
    77f0:	20 e0       	ldi	r18, 0x00	; 0
    77f2:	e2 16       	cp	r14, r18
    77f4:	20 e0       	ldi	r18, 0x00	; 0
    77f6:	f2 06       	cpc	r15, r18
    77f8:	21 e0       	ldi	r18, 0x01	; 1
    77fa:	02 07       	cpc	r16, r18
    77fc:	20 e0       	ldi	r18, 0x00	; 0
    77fe:	12 07       	cpc	r17, r18
    7800:	88 f4       	brcc	.+34     	; 0x7824 <__udivdi3+0x826>
    7802:	3f ef       	ldi	r19, 0xFF	; 255
    7804:	e3 16       	cp	r14, r19
    7806:	f1 04       	cpc	r15, r1
    7808:	01 05       	cpc	r16, r1
    780a:	11 05       	cpc	r17, r1
    780c:	31 f0       	breq	.+12     	; 0x781a <__udivdi3+0x81c>
    780e:	28 f0       	brcs	.+10     	; 0x781a <__udivdi3+0x81c>
    7810:	48 e0       	ldi	r20, 0x08	; 8
    7812:	50 e0       	ldi	r21, 0x00	; 0
    7814:	60 e0       	ldi	r22, 0x00	; 0
    7816:	70 e0       	ldi	r23, 0x00	; 0
    7818:	17 c0       	rjmp	.+46     	; 0x7848 <__udivdi3+0x84a>
    781a:	40 e0       	ldi	r20, 0x00	; 0
    781c:	50 e0       	ldi	r21, 0x00	; 0
    781e:	60 e0       	ldi	r22, 0x00	; 0
    7820:	70 e0       	ldi	r23, 0x00	; 0
    7822:	12 c0       	rjmp	.+36     	; 0x7848 <__udivdi3+0x84a>
    7824:	40 e0       	ldi	r20, 0x00	; 0
    7826:	e4 16       	cp	r14, r20
    7828:	40 e0       	ldi	r20, 0x00	; 0
    782a:	f4 06       	cpc	r15, r20
    782c:	40 e0       	ldi	r20, 0x00	; 0
    782e:	04 07       	cpc	r16, r20
    7830:	41 e0       	ldi	r20, 0x01	; 1
    7832:	14 07       	cpc	r17, r20
    7834:	28 f0       	brcs	.+10     	; 0x7840 <__udivdi3+0x842>
    7836:	48 e1       	ldi	r20, 0x18	; 24
    7838:	50 e0       	ldi	r21, 0x00	; 0
    783a:	60 e0       	ldi	r22, 0x00	; 0
    783c:	70 e0       	ldi	r23, 0x00	; 0
    783e:	04 c0       	rjmp	.+8      	; 0x7848 <__udivdi3+0x84a>
    7840:	40 e1       	ldi	r20, 0x10	; 16
    7842:	50 e0       	ldi	r21, 0x00	; 0
    7844:	60 e0       	ldi	r22, 0x00	; 0
    7846:	70 e0       	ldi	r23, 0x00	; 0
    7848:	d8 01       	movw	r26, r16
    784a:	c7 01       	movw	r24, r14
    784c:	04 2e       	mov	r0, r20
    784e:	04 c0       	rjmp	.+8      	; 0x7858 <__udivdi3+0x85a>
    7850:	b6 95       	lsr	r27
    7852:	a7 95       	ror	r26
    7854:	97 95       	ror	r25
    7856:	87 95       	ror	r24
    7858:	0a 94       	dec	r0
    785a:	d2 f7       	brpl	.-12     	; 0x7850 <__udivdi3+0x852>
    785c:	86 5d       	subi	r24, 0xD6	; 214
    785e:	9f 4d       	sbci	r25, 0xDF	; 223
    7860:	dc 01       	movw	r26, r24
    7862:	2c 91       	ld	r18, X
    7864:	30 e2       	ldi	r19, 0x20	; 32
    7866:	a3 2e       	mov	r10, r19
    7868:	b1 2c       	mov	r11, r1
    786a:	c1 2c       	mov	r12, r1
    786c:	d1 2c       	mov	r13, r1
    786e:	d6 01       	movw	r26, r12
    7870:	c5 01       	movw	r24, r10
    7872:	84 1b       	sub	r24, r20
    7874:	95 0b       	sbc	r25, r21
    7876:	a6 0b       	sbc	r26, r22
    7878:	b7 0b       	sbc	r27, r23
    787a:	82 1b       	sub	r24, r18
    787c:	91 09       	sbc	r25, r1
    787e:	a1 09       	sbc	r26, r1
    7880:	b1 09       	sbc	r27, r1
    7882:	00 97       	sbiw	r24, 0x00	; 0
    7884:	a1 05       	cpc	r26, r1
    7886:	b1 05       	cpc	r27, r1
    7888:	89 f4       	brne	.+34     	; 0x78ac <__udivdi3+0x8ae>
    788a:	e6 14       	cp	r14, r6
    788c:	f7 04       	cpc	r15, r7
    788e:	08 05       	cpc	r16, r8
    7890:	19 05       	cpc	r17, r9
    7892:	08 f4       	brcc	.+2      	; 0x7896 <__udivdi3+0x898>
    7894:	f2 c1       	rjmp	.+996    	; 0x7c7a <__udivdi3+0xc7c>
    7896:	6d a4       	ldd	r6, Y+45	; 0x2d
    7898:	7e a4       	ldd	r7, Y+46	; 0x2e
    789a:	8f a4       	ldd	r8, Y+47	; 0x2f
    789c:	98 a8       	ldd	r9, Y+48	; 0x30
    789e:	62 14       	cp	r6, r2
    78a0:	73 04       	cpc	r7, r3
    78a2:	84 04       	cpc	r8, r4
    78a4:	95 04       	cpc	r9, r5
    78a6:	08 f0       	brcs	.+2      	; 0x78aa <__udivdi3+0x8ac>
    78a8:	e8 c1       	rjmp	.+976    	; 0x7c7a <__udivdi3+0xc7c>
    78aa:	f3 c1       	rjmp	.+998    	; 0x7c92 <__udivdi3+0xc94>
    78ac:	6e 96       	adiw	r28, 0x1e	; 30
    78ae:	8f af       	std	Y+63, r24	; 0x3f
    78b0:	6e 97       	sbiw	r28, 0x1e	; 30
    78b2:	08 2e       	mov	r0, r24
    78b4:	04 c0       	rjmp	.+8      	; 0x78be <__udivdi3+0x8c0>
    78b6:	ee 0c       	add	r14, r14
    78b8:	ff 1c       	adc	r15, r15
    78ba:	00 1f       	adc	r16, r16
    78bc:	11 1f       	adc	r17, r17
    78be:	0a 94       	dec	r0
    78c0:	d2 f7       	brpl	.-12     	; 0x78b6 <__udivdi3+0x8b8>
    78c2:	6a 2d       	mov	r22, r10
    78c4:	68 1b       	sub	r22, r24
    78c6:	d2 01       	movw	r26, r4
    78c8:	c1 01       	movw	r24, r2
    78ca:	06 2e       	mov	r0, r22
    78cc:	04 c0       	rjmp	.+8      	; 0x78d6 <__udivdi3+0x8d8>
    78ce:	b6 95       	lsr	r27
    78d0:	a7 95       	ror	r26
    78d2:	97 95       	ror	r25
    78d4:	87 95       	ror	r24
    78d6:	0a 94       	dec	r0
    78d8:	d2 f7       	brpl	.-12     	; 0x78ce <__udivdi3+0x8d0>
    78da:	5c 01       	movw	r10, r24
    78dc:	6d 01       	movw	r12, r26
    78de:	ae 28       	or	r10, r14
    78e0:	bf 28       	or	r11, r15
    78e2:	c0 2a       	or	r12, r16
    78e4:	d1 2a       	or	r13, r17
    78e6:	ad a2       	std	Y+37, r10	; 0x25
    78e8:	be a2       	std	Y+38, r11	; 0x26
    78ea:	cf a2       	std	Y+39, r12	; 0x27
    78ec:	d8 a6       	std	Y+40, r13	; 0x28
    78ee:	72 01       	movw	r14, r4
    78f0:	61 01       	movw	r12, r2
    78f2:	6e 96       	adiw	r28, 0x1e	; 30
    78f4:	0f ac       	ldd	r0, Y+63	; 0x3f
    78f6:	6e 97       	sbiw	r28, 0x1e	; 30
    78f8:	04 c0       	rjmp	.+8      	; 0x7902 <__udivdi3+0x904>
    78fa:	cc 0c       	add	r12, r12
    78fc:	dd 1c       	adc	r13, r13
    78fe:	ee 1c       	adc	r14, r14
    7900:	ff 1c       	adc	r15, r15
    7902:	0a 94       	dec	r0
    7904:	d2 f7       	brpl	.-12     	; 0x78fa <__udivdi3+0x8fc>
    7906:	c9 a2       	std	Y+33, r12	; 0x21
    7908:	da a2       	std	Y+34, r13	; 0x22
    790a:	eb a2       	std	Y+35, r14	; 0x23
    790c:	fc a2       	std	Y+36, r15	; 0x24
    790e:	64 01       	movw	r12, r8
    7910:	53 01       	movw	r10, r6
    7912:	06 2e       	mov	r0, r22
    7914:	04 c0       	rjmp	.+8      	; 0x791e <__udivdi3+0x920>
    7916:	d6 94       	lsr	r13
    7918:	c7 94       	ror	r12
    791a:	b7 94       	ror	r11
    791c:	a7 94       	ror	r10
    791e:	0a 94       	dec	r0
    7920:	d2 f7       	brpl	.-12     	; 0x7916 <__udivdi3+0x918>
    7922:	d4 01       	movw	r26, r8
    7924:	c3 01       	movw	r24, r6
    7926:	6e 96       	adiw	r28, 0x1e	; 30
    7928:	0f ac       	ldd	r0, Y+63	; 0x3f
    792a:	6e 97       	sbiw	r28, 0x1e	; 30
    792c:	04 c0       	rjmp	.+8      	; 0x7936 <__udivdi3+0x938>
    792e:	88 0f       	add	r24, r24
    7930:	99 1f       	adc	r25, r25
    7932:	aa 1f       	adc	r26, r26
    7934:	bb 1f       	adc	r27, r27
    7936:	0a 94       	dec	r0
    7938:	d2 f7       	brpl	.-12     	; 0x792e <__udivdi3+0x930>
    793a:	ed a4       	ldd	r14, Y+45	; 0x2d
    793c:	fe a4       	ldd	r15, Y+46	; 0x2e
    793e:	0f a5       	ldd	r16, Y+47	; 0x2f
    7940:	18 a9       	ldd	r17, Y+48	; 0x30
    7942:	04 c0       	rjmp	.+8      	; 0x794c <__udivdi3+0x94e>
    7944:	16 95       	lsr	r17
    7946:	07 95       	ror	r16
    7948:	f7 94       	ror	r15
    794a:	e7 94       	ror	r14
    794c:	6a 95       	dec	r22
    794e:	d2 f7       	brpl	.-12     	; 0x7944 <__udivdi3+0x946>
    7950:	37 01       	movw	r6, r14
    7952:	48 01       	movw	r8, r16
    7954:	68 2a       	or	r6, r24
    7956:	79 2a       	or	r7, r25
    7958:	8a 2a       	or	r8, r26
    795a:	9b 2a       	or	r9, r27
    795c:	6d 8e       	std	Y+29, r6	; 0x1d
    795e:	7e 8e       	std	Y+30, r7	; 0x1e
    7960:	8f 8e       	std	Y+31, r8	; 0x1f
    7962:	98 a2       	std	Y+32, r9	; 0x20
    7964:	ed a0       	ldd	r14, Y+37	; 0x25
    7966:	fe a0       	ldd	r15, Y+38	; 0x26
    7968:	0f a1       	ldd	r16, Y+39	; 0x27
    796a:	18 a5       	ldd	r17, Y+40	; 0x28
    796c:	38 01       	movw	r6, r16
    796e:	88 24       	eor	r8, r8
    7970:	99 24       	eor	r9, r9
    7972:	98 01       	movw	r18, r16
    7974:	87 01       	movw	r16, r14
    7976:	20 70       	andi	r18, 0x00	; 0
    7978:	30 70       	andi	r19, 0x00	; 0
    797a:	65 96       	adiw	r28, 0x15	; 21
    797c:	0c af       	std	Y+60, r16	; 0x3c
    797e:	1d af       	std	Y+61, r17	; 0x3d
    7980:	2e af       	std	Y+62, r18	; 0x3e
    7982:	3f af       	std	Y+63, r19	; 0x3f
    7984:	65 97       	sbiw	r28, 0x15	; 21
    7986:	c6 01       	movw	r24, r12
    7988:	b5 01       	movw	r22, r10
    798a:	a4 01       	movw	r20, r8
    798c:	93 01       	movw	r18, r6
    798e:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    7992:	7b 01       	movw	r14, r22
    7994:	8c 01       	movw	r16, r24
    7996:	c6 01       	movw	r24, r12
    7998:	b5 01       	movw	r22, r10
    799a:	a4 01       	movw	r20, r8
    799c:	93 01       	movw	r18, r6
    799e:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    79a2:	c9 01       	movw	r24, r18
    79a4:	da 01       	movw	r26, r20
    79a6:	1c 01       	movw	r2, r24
    79a8:	2d 01       	movw	r4, r26
    79aa:	c2 01       	movw	r24, r4
    79ac:	b1 01       	movw	r22, r2
    79ae:	65 96       	adiw	r28, 0x15	; 21
    79b0:	2c ad       	ldd	r18, Y+60	; 0x3c
    79b2:	3d ad       	ldd	r19, Y+61	; 0x3d
    79b4:	4e ad       	ldd	r20, Y+62	; 0x3e
    79b6:	5f ad       	ldd	r21, Y+63	; 0x3f
    79b8:	65 97       	sbiw	r28, 0x15	; 21
    79ba:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <__mulsi3>
    79be:	9b 01       	movw	r18, r22
    79c0:	ac 01       	movw	r20, r24
    79c2:	87 01       	movw	r16, r14
    79c4:	ff 24       	eor	r15, r15
    79c6:	ee 24       	eor	r14, r14
    79c8:	ad 8c       	ldd	r10, Y+29	; 0x1d
    79ca:	be 8c       	ldd	r11, Y+30	; 0x1e
    79cc:	cf 8c       	ldd	r12, Y+31	; 0x1f
    79ce:	d8 a0       	ldd	r13, Y+32	; 0x20
    79d0:	c6 01       	movw	r24, r12
    79d2:	aa 27       	eor	r26, r26
    79d4:	bb 27       	eor	r27, r27
    79d6:	57 01       	movw	r10, r14
    79d8:	68 01       	movw	r12, r16
    79da:	a8 2a       	or	r10, r24
    79dc:	b9 2a       	or	r11, r25
    79de:	ca 2a       	or	r12, r26
    79e0:	db 2a       	or	r13, r27
    79e2:	a2 16       	cp	r10, r18
    79e4:	b3 06       	cpc	r11, r19
    79e6:	c4 06       	cpc	r12, r20
    79e8:	d5 06       	cpc	r13, r21
    79ea:	00 f5       	brcc	.+64     	; 0x7a2c <__udivdi3+0xa2e>
    79ec:	08 94       	sec
    79ee:	21 08       	sbc	r2, r1
    79f0:	31 08       	sbc	r3, r1
    79f2:	41 08       	sbc	r4, r1
    79f4:	51 08       	sbc	r5, r1
    79f6:	ed a0       	ldd	r14, Y+37	; 0x25
    79f8:	fe a0       	ldd	r15, Y+38	; 0x26
    79fa:	0f a1       	ldd	r16, Y+39	; 0x27
    79fc:	18 a5       	ldd	r17, Y+40	; 0x28
    79fe:	ae 0c       	add	r10, r14
    7a00:	bf 1c       	adc	r11, r15
    7a02:	c0 1e       	adc	r12, r16
    7a04:	d1 1e       	adc	r13, r17
    7a06:	ae 14       	cp	r10, r14
    7a08:	bf 04       	cpc	r11, r15
    7a0a:	c0 06       	cpc	r12, r16
    7a0c:	d1 06       	cpc	r13, r17
    7a0e:	70 f0       	brcs	.+28     	; 0x7a2c <__udivdi3+0xa2e>
    7a10:	a2 16       	cp	r10, r18
    7a12:	b3 06       	cpc	r11, r19
    7a14:	c4 06       	cpc	r12, r20
    7a16:	d5 06       	cpc	r13, r21
    7a18:	48 f4       	brcc	.+18     	; 0x7a2c <__udivdi3+0xa2e>
    7a1a:	08 94       	sec
    7a1c:	21 08       	sbc	r2, r1
    7a1e:	31 08       	sbc	r3, r1
    7a20:	41 08       	sbc	r4, r1
    7a22:	51 08       	sbc	r5, r1
    7a24:	ae 0c       	add	r10, r14
    7a26:	bf 1c       	adc	r11, r15
    7a28:	c0 1e       	adc	r12, r16
    7a2a:	d1 1e       	adc	r13, r17
    7a2c:	a2 1a       	sub	r10, r18
    7a2e:	b3 0a       	sbc	r11, r19
    7a30:	c4 0a       	sbc	r12, r20
    7a32:	d5 0a       	sbc	r13, r21
    7a34:	c6 01       	movw	r24, r12
    7a36:	b5 01       	movw	r22, r10
    7a38:	a4 01       	movw	r20, r8
    7a3a:	93 01       	movw	r18, r6
    7a3c:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    7a40:	7b 01       	movw	r14, r22
    7a42:	8c 01       	movw	r16, r24
    7a44:	c6 01       	movw	r24, r12
    7a46:	b5 01       	movw	r22, r10
    7a48:	a4 01       	movw	r20, r8
    7a4a:	93 01       	movw	r18, r6
    7a4c:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__udivmodsi4>
    7a50:	c9 01       	movw	r24, r18
    7a52:	da 01       	movw	r26, r20
    7a54:	3c 01       	movw	r6, r24
    7a56:	4d 01       	movw	r8, r26
    7a58:	c4 01       	movw	r24, r8
    7a5a:	b3 01       	movw	r22, r6
    7a5c:	65 96       	adiw	r28, 0x15	; 21
    7a5e:	2c ad       	ldd	r18, Y+60	; 0x3c
    7a60:	3d ad       	ldd	r19, Y+61	; 0x3d
    7a62:	4e ad       	ldd	r20, Y+62	; 0x3e
    7a64:	5f ad       	ldd	r21, Y+63	; 0x3f
    7a66:	65 97       	sbiw	r28, 0x15	; 21
    7a68:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <__mulsi3>
    7a6c:	9b 01       	movw	r18, r22
    7a6e:	ac 01       	movw	r20, r24
    7a70:	87 01       	movw	r16, r14
    7a72:	ff 24       	eor	r15, r15
    7a74:	ee 24       	eor	r14, r14
    7a76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7a78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7a7a:	af 8d       	ldd	r26, Y+31	; 0x1f
    7a7c:	b8 a1       	ldd	r27, Y+32	; 0x20
    7a7e:	a0 70       	andi	r26, 0x00	; 0
    7a80:	b0 70       	andi	r27, 0x00	; 0
    7a82:	57 01       	movw	r10, r14
    7a84:	68 01       	movw	r12, r16
    7a86:	a8 2a       	or	r10, r24
    7a88:	b9 2a       	or	r11, r25
    7a8a:	ca 2a       	or	r12, r26
    7a8c:	db 2a       	or	r13, r27
    7a8e:	a2 16       	cp	r10, r18
    7a90:	b3 06       	cpc	r11, r19
    7a92:	c4 06       	cpc	r12, r20
    7a94:	d5 06       	cpc	r13, r21
    7a96:	00 f5       	brcc	.+64     	; 0x7ad8 <__udivdi3+0xada>
    7a98:	08 94       	sec
    7a9a:	61 08       	sbc	r6, r1
    7a9c:	71 08       	sbc	r7, r1
    7a9e:	81 08       	sbc	r8, r1
    7aa0:	91 08       	sbc	r9, r1
    7aa2:	6d a1       	ldd	r22, Y+37	; 0x25
    7aa4:	7e a1       	ldd	r23, Y+38	; 0x26
    7aa6:	8f a1       	ldd	r24, Y+39	; 0x27
    7aa8:	98 a5       	ldd	r25, Y+40	; 0x28
    7aaa:	a6 0e       	add	r10, r22
    7aac:	b7 1e       	adc	r11, r23
    7aae:	c8 1e       	adc	r12, r24
    7ab0:	d9 1e       	adc	r13, r25
    7ab2:	a6 16       	cp	r10, r22
    7ab4:	b7 06       	cpc	r11, r23
    7ab6:	c8 06       	cpc	r12, r24
    7ab8:	d9 06       	cpc	r13, r25
    7aba:	70 f0       	brcs	.+28     	; 0x7ad8 <__udivdi3+0xada>
    7abc:	a2 16       	cp	r10, r18
    7abe:	b3 06       	cpc	r11, r19
    7ac0:	c4 06       	cpc	r12, r20
    7ac2:	d5 06       	cpc	r13, r21
    7ac4:	48 f4       	brcc	.+18     	; 0x7ad8 <__udivdi3+0xada>
    7ac6:	08 94       	sec
    7ac8:	61 08       	sbc	r6, r1
    7aca:	71 08       	sbc	r7, r1
    7acc:	81 08       	sbc	r8, r1
    7ace:	91 08       	sbc	r9, r1
    7ad0:	a6 0e       	add	r10, r22
    7ad2:	b7 1e       	adc	r11, r23
    7ad4:	c8 1e       	adc	r12, r24
    7ad6:	d9 1e       	adc	r13, r25
    7ad8:	d6 01       	movw	r26, r12
    7ada:	c5 01       	movw	r24, r10
    7adc:	82 1b       	sub	r24, r18
    7ade:	93 0b       	sbc	r25, r19
    7ae0:	a4 0b       	sbc	r26, r20
    7ae2:	b5 0b       	sbc	r27, r21
    7ae4:	89 8f       	std	Y+25, r24	; 0x19
    7ae6:	9a 8f       	std	Y+26, r25	; 0x1a
    7ae8:	ab 8f       	std	Y+27, r26	; 0x1b
    7aea:	bc 8f       	std	Y+28, r27	; 0x1c
    7aec:	d1 01       	movw	r26, r2
    7aee:	99 27       	eor	r25, r25
    7af0:	88 27       	eor	r24, r24
    7af2:	64 01       	movw	r12, r8
    7af4:	53 01       	movw	r10, r6
    7af6:	a8 2a       	or	r10, r24
    7af8:	b9 2a       	or	r11, r25
    7afa:	ca 2a       	or	r12, r26
    7afc:	db 2a       	or	r13, r27
    7afe:	a9 aa       	std	Y+49, r10	; 0x31
    7b00:	ba aa       	std	Y+50, r11	; 0x32
    7b02:	cb aa       	std	Y+51, r12	; 0x33
    7b04:	dc aa       	std	Y+52, r13	; 0x34
    7b06:	86 01       	movw	r16, r12
    7b08:	75 01       	movw	r14, r10
    7b0a:	2f ef       	ldi	r18, 0xFF	; 255
    7b0c:	3f ef       	ldi	r19, 0xFF	; 255
    7b0e:	40 e0       	ldi	r20, 0x00	; 0
    7b10:	50 e0       	ldi	r21, 0x00	; 0
    7b12:	e2 22       	and	r14, r18
    7b14:	f3 22       	and	r15, r19
    7b16:	04 23       	and	r16, r20
    7b18:	15 23       	and	r17, r21
    7b1a:	a6 01       	movw	r20, r12
    7b1c:	66 27       	eor	r22, r22
    7b1e:	77 27       	eor	r23, r23
    7b20:	6d 96       	adiw	r28, 0x1d	; 29
    7b22:	4c af       	std	Y+60, r20	; 0x3c
    7b24:	5d af       	std	Y+61, r21	; 0x3d
    7b26:	6e af       	std	Y+62, r22	; 0x3e
    7b28:	7f af       	std	Y+63, r23	; 0x3f
    7b2a:	6d 97       	sbiw	r28, 0x1d	; 29
    7b2c:	a9 a0       	ldd	r10, Y+33	; 0x21
    7b2e:	ba a0       	ldd	r11, Y+34	; 0x22
    7b30:	cb a0       	ldd	r12, Y+35	; 0x23
    7b32:	dc a0       	ldd	r13, Y+36	; 0x24
    7b34:	6f ef       	ldi	r22, 0xFF	; 255
    7b36:	7f ef       	ldi	r23, 0xFF	; 255
    7b38:	80 e0       	ldi	r24, 0x00	; 0
    7b3a:	90 e0       	ldi	r25, 0x00	; 0
    7b3c:	a6 22       	and	r10, r22
    7b3e:	b7 22       	and	r11, r23
    7b40:	c8 22       	and	r12, r24
    7b42:	d9 22       	and	r13, r25
    7b44:	89 a1       	ldd	r24, Y+33	; 0x21
    7b46:	9a a1       	ldd	r25, Y+34	; 0x22
    7b48:	ab a1       	ldd	r26, Y+35	; 0x23
    7b4a:	bc a1       	ldd	r27, Y+36	; 0x24
    7b4c:	1d 01       	movw	r2, r26
    7b4e:	44 24       	eor	r4, r4
    7b50:	55 24       	eor	r5, r5
    7b52:	c8 01       	movw	r24, r16
    7b54:	b7 01       	movw	r22, r14
    7b56:	a6 01       	movw	r20, r12
    7b58:	95 01       	movw	r18, r10
    7b5a:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <__mulsi3>
    7b5e:	69 96       	adiw	r28, 0x19	; 25
    7b60:	6c af       	std	Y+60, r22	; 0x3c
    7b62:	7d af       	std	Y+61, r23	; 0x3d
    7b64:	8e af       	std	Y+62, r24	; 0x3e
    7b66:	9f af       	std	Y+63, r25	; 0x3f
    7b68:	69 97       	sbiw	r28, 0x19	; 25
    7b6a:	c8 01       	movw	r24, r16
    7b6c:	b7 01       	movw	r22, r14
    7b6e:	a2 01       	movw	r20, r4
    7b70:	91 01       	movw	r18, r2
    7b72:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <__mulsi3>
    7b76:	3b 01       	movw	r6, r22
    7b78:	4c 01       	movw	r8, r24
    7b7a:	6d 96       	adiw	r28, 0x1d	; 29
    7b7c:	6c ad       	ldd	r22, Y+60	; 0x3c
    7b7e:	7d ad       	ldd	r23, Y+61	; 0x3d
    7b80:	8e ad       	ldd	r24, Y+62	; 0x3e
    7b82:	9f ad       	ldd	r25, Y+63	; 0x3f
    7b84:	6d 97       	sbiw	r28, 0x1d	; 29
    7b86:	a6 01       	movw	r20, r12
    7b88:	95 01       	movw	r18, r10
    7b8a:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <__mulsi3>
    7b8e:	7b 01       	movw	r14, r22
    7b90:	8c 01       	movw	r16, r24
    7b92:	6d 96       	adiw	r28, 0x1d	; 29
    7b94:	6c ad       	ldd	r22, Y+60	; 0x3c
    7b96:	7d ad       	ldd	r23, Y+61	; 0x3d
    7b98:	8e ad       	ldd	r24, Y+62	; 0x3e
    7b9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    7b9c:	6d 97       	sbiw	r28, 0x1d	; 29
    7b9e:	a2 01       	movw	r20, r4
    7ba0:	91 01       	movw	r18, r2
    7ba2:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <__mulsi3>
    7ba6:	5b 01       	movw	r10, r22
    7ba8:	6c 01       	movw	r12, r24
    7baa:	a8 01       	movw	r20, r16
    7bac:	97 01       	movw	r18, r14
    7bae:	26 0d       	add	r18, r6
    7bb0:	37 1d       	adc	r19, r7
    7bb2:	48 1d       	adc	r20, r8
    7bb4:	59 1d       	adc	r21, r9
    7bb6:	69 96       	adiw	r28, 0x19	; 25
    7bb8:	6c ac       	ldd	r6, Y+60	; 0x3c
    7bba:	7d ac       	ldd	r7, Y+61	; 0x3d
    7bbc:	8e ac       	ldd	r8, Y+62	; 0x3e
    7bbe:	9f ac       	ldd	r9, Y+63	; 0x3f
    7bc0:	69 97       	sbiw	r28, 0x19	; 25
    7bc2:	c4 01       	movw	r24, r8
    7bc4:	aa 27       	eor	r26, r26
    7bc6:	bb 27       	eor	r27, r27
    7bc8:	28 0f       	add	r18, r24
    7bca:	39 1f       	adc	r19, r25
    7bcc:	4a 1f       	adc	r20, r26
    7bce:	5b 1f       	adc	r21, r27
    7bd0:	2e 15       	cp	r18, r14
    7bd2:	3f 05       	cpc	r19, r15
    7bd4:	40 07       	cpc	r20, r16
    7bd6:	51 07       	cpc	r21, r17
    7bd8:	48 f4       	brcc	.+18     	; 0x7bec <__udivdi3+0xbee>
    7bda:	e1 2c       	mov	r14, r1
    7bdc:	f1 2c       	mov	r15, r1
    7bde:	61 e0       	ldi	r22, 0x01	; 1
    7be0:	06 2f       	mov	r16, r22
    7be2:	11 2d       	mov	r17, r1
    7be4:	ae 0c       	add	r10, r14
    7be6:	bf 1c       	adc	r11, r15
    7be8:	c0 1e       	adc	r12, r16
    7bea:	d1 1e       	adc	r13, r17
    7bec:	ca 01       	movw	r24, r20
    7bee:	aa 27       	eor	r26, r26
    7bf0:	bb 27       	eor	r27, r27
    7bf2:	bc 01       	movw	r22, r24
    7bf4:	cd 01       	movw	r24, r26
    7bf6:	6a 0d       	add	r22, r10
    7bf8:	7b 1d       	adc	r23, r11
    7bfa:	8c 1d       	adc	r24, r12
    7bfc:	9d 1d       	adc	r25, r13
    7bfe:	69 8c       	ldd	r6, Y+25	; 0x19
    7c00:	7a 8c       	ldd	r7, Y+26	; 0x1a
    7c02:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7c04:	9c 8c       	ldd	r9, Y+28	; 0x1c
    7c06:	66 16       	cp	r6, r22
    7c08:	77 06       	cpc	r7, r23
    7c0a:	88 06       	cpc	r8, r24
    7c0c:	99 06       	cpc	r9, r25
    7c0e:	40 f1       	brcs	.+80     	; 0x7c60 <__udivdi3+0xc62>
    7c10:	66 15       	cp	r22, r6
    7c12:	77 05       	cpc	r23, r7
    7c14:	88 05       	cpc	r24, r8
    7c16:	99 05       	cpc	r25, r9
    7c18:	09 f0       	breq	.+2      	; 0x7c1c <__udivdi3+0xc1e>
    7c1a:	43 c0       	rjmp	.+134    	; 0x7ca2 <__udivdi3+0xca4>
    7c1c:	d9 01       	movw	r26, r18
    7c1e:	99 27       	eor	r25, r25
    7c20:	88 27       	eor	r24, r24
    7c22:	69 96       	adiw	r28, 0x19	; 25
    7c24:	2c ad       	ldd	r18, Y+60	; 0x3c
    7c26:	3d ad       	ldd	r19, Y+61	; 0x3d
    7c28:	4e ad       	ldd	r20, Y+62	; 0x3e
    7c2a:	5f ad       	ldd	r21, Y+63	; 0x3f
    7c2c:	69 97       	sbiw	r28, 0x19	; 25
    7c2e:	40 70       	andi	r20, 0x00	; 0
    7c30:	50 70       	andi	r21, 0x00	; 0
    7c32:	82 0f       	add	r24, r18
    7c34:	93 1f       	adc	r25, r19
    7c36:	a4 1f       	adc	r26, r20
    7c38:	b5 1f       	adc	r27, r21
    7c3a:	2d a5       	ldd	r18, Y+45	; 0x2d
    7c3c:	3e a5       	ldd	r19, Y+46	; 0x2e
    7c3e:	4f a5       	ldd	r20, Y+47	; 0x2f
    7c40:	58 a9       	ldd	r21, Y+48	; 0x30
    7c42:	6e 96       	adiw	r28, 0x1e	; 30
    7c44:	0f ac       	ldd	r0, Y+63	; 0x3f
    7c46:	6e 97       	sbiw	r28, 0x1e	; 30
    7c48:	04 c0       	rjmp	.+8      	; 0x7c52 <__udivdi3+0xc54>
    7c4a:	22 0f       	add	r18, r18
    7c4c:	33 1f       	adc	r19, r19
    7c4e:	44 1f       	adc	r20, r20
    7c50:	55 1f       	adc	r21, r21
    7c52:	0a 94       	dec	r0
    7c54:	d2 f7       	brpl	.-12     	; 0x7c4a <__udivdi3+0xc4c>
    7c56:	28 17       	cp	r18, r24
    7c58:	39 07       	cpc	r19, r25
    7c5a:	4a 07       	cpc	r20, r26
    7c5c:	5b 07       	cpc	r21, r27
    7c5e:	08 f5       	brcc	.+66     	; 0x7ca2 <__udivdi3+0xca4>
    7c60:	09 a9       	ldd	r16, Y+49	; 0x31
    7c62:	1a a9       	ldd	r17, Y+50	; 0x32
    7c64:	2b a9       	ldd	r18, Y+51	; 0x33
    7c66:	3c a9       	ldd	r19, Y+52	; 0x34
    7c68:	01 50       	subi	r16, 0x01	; 1
    7c6a:	10 40       	sbci	r17, 0x00	; 0
    7c6c:	20 40       	sbci	r18, 0x00	; 0
    7c6e:	30 40       	sbci	r19, 0x00	; 0
    7c70:	09 ab       	std	Y+49, r16	; 0x31
    7c72:	1a ab       	std	Y+50, r17	; 0x32
    7c74:	2b ab       	std	Y+51, r18	; 0x33
    7c76:	3c ab       	std	Y+52, r19	; 0x34
    7c78:	14 c0       	rjmp	.+40     	; 0x7ca2 <__udivdi3+0xca4>
    7c7a:	66 24       	eor	r6, r6
    7c7c:	77 24       	eor	r7, r7
    7c7e:	43 01       	movw	r8, r6
    7c80:	21 e0       	ldi	r18, 0x01	; 1
    7c82:	30 e0       	ldi	r19, 0x00	; 0
    7c84:	40 e0       	ldi	r20, 0x00	; 0
    7c86:	50 e0       	ldi	r21, 0x00	; 0
    7c88:	29 ab       	std	Y+49, r18	; 0x31
    7c8a:	3a ab       	std	Y+50, r19	; 0x32
    7c8c:	4b ab       	std	Y+51, r20	; 0x33
    7c8e:	5c ab       	std	Y+52, r21	; 0x34
    7c90:	0b c0       	rjmp	.+22     	; 0x7ca8 <__udivdi3+0xcaa>
    7c92:	66 24       	eor	r6, r6
    7c94:	77 24       	eor	r7, r7
    7c96:	43 01       	movw	r8, r6
    7c98:	19 aa       	std	Y+49, r1	; 0x31
    7c9a:	1a aa       	std	Y+50, r1	; 0x32
    7c9c:	1b aa       	std	Y+51, r1	; 0x33
    7c9e:	1c aa       	std	Y+52, r1	; 0x34
    7ca0:	03 c0       	rjmp	.+6      	; 0x7ca8 <__udivdi3+0xcaa>
    7ca2:	66 24       	eor	r6, r6
    7ca4:	77 24       	eor	r7, r7
    7ca6:	43 01       	movw	r8, r6
    7ca8:	fe 01       	movw	r30, r28
    7caa:	71 96       	adiw	r30, 0x11	; 17
    7cac:	88 e0       	ldi	r24, 0x08	; 8
    7cae:	df 01       	movw	r26, r30
    7cb0:	1d 92       	st	X+, r1
    7cb2:	8a 95       	dec	r24
    7cb4:	e9 f7       	brne	.-6      	; 0x7cb0 <__udivdi3+0xcb2>
    7cb6:	a9 a8       	ldd	r10, Y+49	; 0x31
    7cb8:	ba a8       	ldd	r11, Y+50	; 0x32
    7cba:	cb a8       	ldd	r12, Y+51	; 0x33
    7cbc:	dc a8       	ldd	r13, Y+52	; 0x34
    7cbe:	a9 8a       	std	Y+17, r10	; 0x11
    7cc0:	ba 8a       	std	Y+18, r11	; 0x12
    7cc2:	cb 8a       	std	Y+19, r12	; 0x13
    7cc4:	dc 8a       	std	Y+20, r13	; 0x14
    7cc6:	6d 8a       	std	Y+21, r6	; 0x15
    7cc8:	7e 8a       	std	Y+22, r7	; 0x16
    7cca:	8f 8a       	std	Y+23, r8	; 0x17
    7ccc:	98 8e       	std	Y+24, r9	; 0x18
    7cce:	29 a9       	ldd	r18, Y+49	; 0x31
    7cd0:	3a 89       	ldd	r19, Y+18	; 0x12
    7cd2:	4b 89       	ldd	r20, Y+19	; 0x13
    7cd4:	5c 89       	ldd	r21, Y+20	; 0x14
    7cd6:	66 2d       	mov	r22, r6
    7cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    7cda:	8f 89       	ldd	r24, Y+23	; 0x17
    7cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    7cde:	c2 5a       	subi	r28, 0xA2	; 162
    7ce0:	df 4f       	sbci	r29, 0xFF	; 255
    7ce2:	e2 e1       	ldi	r30, 0x12	; 18
    7ce4:	0c 94 ae 46 	jmp	0x8d5c	; 0x8d5c <__epilogue_restores__>

00007ce8 <vfprintf>:
    7ce8:	2f 92       	push	r2
    7cea:	3f 92       	push	r3
    7cec:	4f 92       	push	r4
    7cee:	5f 92       	push	r5
    7cf0:	6f 92       	push	r6
    7cf2:	7f 92       	push	r7
    7cf4:	8f 92       	push	r8
    7cf6:	9f 92       	push	r9
    7cf8:	af 92       	push	r10
    7cfa:	bf 92       	push	r11
    7cfc:	cf 92       	push	r12
    7cfe:	df 92       	push	r13
    7d00:	ef 92       	push	r14
    7d02:	ff 92       	push	r15
    7d04:	0f 93       	push	r16
    7d06:	1f 93       	push	r17
    7d08:	df 93       	push	r29
    7d0a:	cf 93       	push	r28
    7d0c:	cd b7       	in	r28, 0x3d	; 61
    7d0e:	de b7       	in	r29, 0x3e	; 62
    7d10:	61 97       	sbiw	r28, 0x11	; 17
    7d12:	cd bf       	out	0x3d, r28	; 61
    7d14:	de bf       	out	0x3e, r29	; 62
    7d16:	3c 01       	movw	r6, r24
    7d18:	6e 87       	std	Y+14, r22	; 0x0e
    7d1a:	7f 87       	std	Y+15, r23	; 0x0f
    7d1c:	6a 01       	movw	r12, r20
    7d1e:	fc 01       	movw	r30, r24
    7d20:	16 82       	std	Z+6, r1	; 0x06
    7d22:	17 82       	std	Z+7, r1	; 0x07
    7d24:	83 81       	ldd	r24, Z+3	; 0x03
    7d26:	81 fd       	sbrc	r24, 1
    7d28:	03 c0       	rjmp	.+6      	; 0x7d30 <vfprintf+0x48>
    7d2a:	6f ef       	ldi	r22, 0xFF	; 255
    7d2c:	7f ef       	ldi	r23, 0xFF	; 255
    7d2e:	6f c3       	rjmp	.+1758   	; 0x840e <vfprintf+0x726>
    7d30:	9e 01       	movw	r18, r28
    7d32:	2f 5f       	subi	r18, 0xFF	; 255
    7d34:	3f 4f       	sbci	r19, 0xFF	; 255
    7d36:	28 8b       	std	Y+16, r18	; 0x10
    7d38:	39 8b       	std	Y+17, r19	; 0x11
    7d3a:	f3 01       	movw	r30, r6
    7d3c:	23 81       	ldd	r18, Z+3	; 0x03
    7d3e:	ee 85       	ldd	r30, Y+14	; 0x0e
    7d40:	ff 85       	ldd	r31, Y+15	; 0x0f
    7d42:	23 fd       	sbrc	r18, 3
    7d44:	85 91       	lpm	r24, Z+
    7d46:	23 ff       	sbrs	r18, 3
    7d48:	81 91       	ld	r24, Z+
    7d4a:	ee 87       	std	Y+14, r30	; 0x0e
    7d4c:	ff 87       	std	Y+15, r31	; 0x0f
    7d4e:	88 23       	and	r24, r24
    7d50:	09 f4       	brne	.+2      	; 0x7d54 <vfprintf+0x6c>
    7d52:	5a c3       	rjmp	.+1716   	; 0x8408 <vfprintf+0x720>
    7d54:	85 32       	cpi	r24, 0x25	; 37
    7d56:	51 f4       	brne	.+20     	; 0x7d6c <vfprintf+0x84>
    7d58:	ee 85       	ldd	r30, Y+14	; 0x0e
    7d5a:	ff 85       	ldd	r31, Y+15	; 0x0f
    7d5c:	23 fd       	sbrc	r18, 3
    7d5e:	85 91       	lpm	r24, Z+
    7d60:	23 ff       	sbrs	r18, 3
    7d62:	81 91       	ld	r24, Z+
    7d64:	ee 87       	std	Y+14, r30	; 0x0e
    7d66:	ff 87       	std	Y+15, r31	; 0x0f
    7d68:	85 32       	cpi	r24, 0x25	; 37
    7d6a:	29 f4       	brne	.+10     	; 0x7d76 <vfprintf+0x8e>
    7d6c:	90 e0       	ldi	r25, 0x00	; 0
    7d6e:	b3 01       	movw	r22, r6
    7d70:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    7d74:	e2 cf       	rjmp	.-60     	; 0x7d3a <vfprintf+0x52>
    7d76:	98 2f       	mov	r25, r24
    7d78:	10 e0       	ldi	r17, 0x00	; 0
    7d7a:	88 24       	eor	r8, r8
    7d7c:	99 24       	eor	r9, r9
    7d7e:	10 32       	cpi	r17, 0x20	; 32
    7d80:	b0 f4       	brcc	.+44     	; 0x7dae <vfprintf+0xc6>
    7d82:	9b 32       	cpi	r25, 0x2B	; 43
    7d84:	69 f0       	breq	.+26     	; 0x7da0 <vfprintf+0xb8>
    7d86:	9c 32       	cpi	r25, 0x2C	; 44
    7d88:	28 f4       	brcc	.+10     	; 0x7d94 <vfprintf+0xac>
    7d8a:	90 32       	cpi	r25, 0x20	; 32
    7d8c:	51 f0       	breq	.+20     	; 0x7da2 <vfprintf+0xba>
    7d8e:	93 32       	cpi	r25, 0x23	; 35
    7d90:	71 f4       	brne	.+28     	; 0x7dae <vfprintf+0xc6>
    7d92:	0b c0       	rjmp	.+22     	; 0x7daa <vfprintf+0xc2>
    7d94:	9d 32       	cpi	r25, 0x2D	; 45
    7d96:	39 f0       	breq	.+14     	; 0x7da6 <vfprintf+0xbe>
    7d98:	90 33       	cpi	r25, 0x30	; 48
    7d9a:	49 f4       	brne	.+18     	; 0x7dae <vfprintf+0xc6>
    7d9c:	11 60       	ori	r17, 0x01	; 1
    7d9e:	28 c0       	rjmp	.+80     	; 0x7df0 <vfprintf+0x108>
    7da0:	12 60       	ori	r17, 0x02	; 2
    7da2:	14 60       	ori	r17, 0x04	; 4
    7da4:	25 c0       	rjmp	.+74     	; 0x7df0 <vfprintf+0x108>
    7da6:	18 60       	ori	r17, 0x08	; 8
    7da8:	23 c0       	rjmp	.+70     	; 0x7df0 <vfprintf+0x108>
    7daa:	10 61       	ori	r17, 0x10	; 16
    7dac:	21 c0       	rjmp	.+66     	; 0x7df0 <vfprintf+0x108>
    7dae:	17 fd       	sbrc	r17, 7
    7db0:	2a c0       	rjmp	.+84     	; 0x7e06 <vfprintf+0x11e>
    7db2:	89 2f       	mov	r24, r25
    7db4:	80 53       	subi	r24, 0x30	; 48
    7db6:	8a 30       	cpi	r24, 0x0A	; 10
    7db8:	78 f4       	brcc	.+30     	; 0x7dd8 <vfprintf+0xf0>
    7dba:	16 ff       	sbrs	r17, 6
    7dbc:	06 c0       	rjmp	.+12     	; 0x7dca <vfprintf+0xe2>
    7dbe:	fa e0       	ldi	r31, 0x0A	; 10
    7dc0:	9f 9e       	mul	r9, r31
    7dc2:	90 2c       	mov	r9, r0
    7dc4:	11 24       	eor	r1, r1
    7dc6:	98 0e       	add	r9, r24
    7dc8:	13 c0       	rjmp	.+38     	; 0x7df0 <vfprintf+0x108>
    7dca:	3a e0       	ldi	r19, 0x0A	; 10
    7dcc:	83 9e       	mul	r8, r19
    7dce:	80 2c       	mov	r8, r0
    7dd0:	11 24       	eor	r1, r1
    7dd2:	88 0e       	add	r8, r24
    7dd4:	10 62       	ori	r17, 0x20	; 32
    7dd6:	0c c0       	rjmp	.+24     	; 0x7df0 <vfprintf+0x108>
    7dd8:	9e 32       	cpi	r25, 0x2E	; 46
    7dda:	21 f4       	brne	.+8      	; 0x7de4 <vfprintf+0xfc>
    7ddc:	16 fd       	sbrc	r17, 6
    7dde:	14 c3       	rjmp	.+1576   	; 0x8408 <vfprintf+0x720>
    7de0:	10 64       	ori	r17, 0x40	; 64
    7de2:	06 c0       	rjmp	.+12     	; 0x7df0 <vfprintf+0x108>
    7de4:	9c 36       	cpi	r25, 0x6C	; 108
    7de6:	11 f4       	brne	.+4      	; 0x7dec <vfprintf+0x104>
    7de8:	10 68       	ori	r17, 0x80	; 128
    7dea:	02 c0       	rjmp	.+4      	; 0x7df0 <vfprintf+0x108>
    7dec:	98 36       	cpi	r25, 0x68	; 104
    7dee:	59 f4       	brne	.+22     	; 0x7e06 <vfprintf+0x11e>
    7df0:	ee 85       	ldd	r30, Y+14	; 0x0e
    7df2:	ff 85       	ldd	r31, Y+15	; 0x0f
    7df4:	23 fd       	sbrc	r18, 3
    7df6:	95 91       	lpm	r25, Z+
    7df8:	23 ff       	sbrs	r18, 3
    7dfa:	91 91       	ld	r25, Z+
    7dfc:	ee 87       	std	Y+14, r30	; 0x0e
    7dfe:	ff 87       	std	Y+15, r31	; 0x0f
    7e00:	99 23       	and	r25, r25
    7e02:	09 f0       	breq	.+2      	; 0x7e06 <vfprintf+0x11e>
    7e04:	bc cf       	rjmp	.-136    	; 0x7d7e <vfprintf+0x96>
    7e06:	89 2f       	mov	r24, r25
    7e08:	85 54       	subi	r24, 0x45	; 69
    7e0a:	83 30       	cpi	r24, 0x03	; 3
    7e0c:	20 f4       	brcc	.+8      	; 0x7e16 <vfprintf+0x12e>
    7e0e:	81 2f       	mov	r24, r17
    7e10:	80 61       	ori	r24, 0x10	; 16
    7e12:	90 5e       	subi	r25, 0xE0	; 224
    7e14:	07 c0       	rjmp	.+14     	; 0x7e24 <vfprintf+0x13c>
    7e16:	89 2f       	mov	r24, r25
    7e18:	85 56       	subi	r24, 0x65	; 101
    7e1a:	83 30       	cpi	r24, 0x03	; 3
    7e1c:	08 f0       	brcs	.+2      	; 0x7e20 <vfprintf+0x138>
    7e1e:	9f c1       	rjmp	.+830    	; 0x815e <vfprintf+0x476>
    7e20:	81 2f       	mov	r24, r17
    7e22:	8f 7e       	andi	r24, 0xEF	; 239
    7e24:	86 fd       	sbrc	r24, 6
    7e26:	02 c0       	rjmp	.+4      	; 0x7e2c <vfprintf+0x144>
    7e28:	76 e0       	ldi	r23, 0x06	; 6
    7e2a:	97 2e       	mov	r9, r23
    7e2c:	6f e3       	ldi	r22, 0x3F	; 63
    7e2e:	f6 2e       	mov	r15, r22
    7e30:	f8 22       	and	r15, r24
    7e32:	95 36       	cpi	r25, 0x65	; 101
    7e34:	19 f4       	brne	.+6      	; 0x7e3c <vfprintf+0x154>
    7e36:	f0 e4       	ldi	r31, 0x40	; 64
    7e38:	ff 2a       	or	r15, r31
    7e3a:	07 c0       	rjmp	.+14     	; 0x7e4a <vfprintf+0x162>
    7e3c:	96 36       	cpi	r25, 0x66	; 102
    7e3e:	19 f4       	brne	.+6      	; 0x7e46 <vfprintf+0x15e>
    7e40:	20 e8       	ldi	r18, 0x80	; 128
    7e42:	f2 2a       	or	r15, r18
    7e44:	02 c0       	rjmp	.+4      	; 0x7e4a <vfprintf+0x162>
    7e46:	91 10       	cpse	r9, r1
    7e48:	9a 94       	dec	r9
    7e4a:	f7 fe       	sbrs	r15, 7
    7e4c:	0a c0       	rjmp	.+20     	; 0x7e62 <vfprintf+0x17a>
    7e4e:	3b e3       	ldi	r19, 0x3B	; 59
    7e50:	39 15       	cp	r19, r9
    7e52:	18 f4       	brcc	.+6      	; 0x7e5a <vfprintf+0x172>
    7e54:	5c e3       	ldi	r21, 0x3C	; 60
    7e56:	b5 2e       	mov	r11, r21
    7e58:	02 c0       	rjmp	.+4      	; 0x7e5e <vfprintf+0x176>
    7e5a:	b9 2c       	mov	r11, r9
    7e5c:	b3 94       	inc	r11
    7e5e:	27 e0       	ldi	r18, 0x07	; 7
    7e60:	09 c0       	rjmp	.+18     	; 0x7e74 <vfprintf+0x18c>
    7e62:	47 e0       	ldi	r20, 0x07	; 7
    7e64:	49 15       	cp	r20, r9
    7e66:	20 f4       	brcc	.+8      	; 0x7e70 <vfprintf+0x188>
    7e68:	bb 24       	eor	r11, r11
    7e6a:	47 e0       	ldi	r20, 0x07	; 7
    7e6c:	94 2e       	mov	r9, r20
    7e6e:	f7 cf       	rjmp	.-18     	; 0x7e5e <vfprintf+0x176>
    7e70:	29 2d       	mov	r18, r9
    7e72:	bb 24       	eor	r11, r11
    7e74:	c6 01       	movw	r24, r12
    7e76:	04 96       	adiw	r24, 0x04	; 4
    7e78:	8c 87       	std	Y+12, r24	; 0x0c
    7e7a:	9d 87       	std	Y+13, r25	; 0x0d
    7e7c:	f6 01       	movw	r30, r12
    7e7e:	60 81       	ld	r22, Z
    7e80:	71 81       	ldd	r23, Z+1	; 0x01
    7e82:	82 81       	ldd	r24, Z+2	; 0x02
    7e84:	93 81       	ldd	r25, Z+3	; 0x03
    7e86:	ae 01       	movw	r20, r28
    7e88:	4f 5f       	subi	r20, 0xFF	; 255
    7e8a:	5f 4f       	sbci	r21, 0xFF	; 255
    7e8c:	0b 2d       	mov	r16, r11
    7e8e:	0e 94 55 48 	call	0x90aa	; 0x90aa <__ftoa_engine>
    7e92:	6c 01       	movw	r12, r24
    7e94:	09 81       	ldd	r16, Y+1	; 0x01
    7e96:	20 2e       	mov	r2, r16
    7e98:	33 24       	eor	r3, r3
    7e9a:	00 ff       	sbrs	r16, 0
    7e9c:	04 c0       	rjmp	.+8      	; 0x7ea6 <vfprintf+0x1be>
    7e9e:	03 fd       	sbrc	r16, 3
    7ea0:	02 c0       	rjmp	.+4      	; 0x7ea6 <vfprintf+0x1be>
    7ea2:	1d e2       	ldi	r17, 0x2D	; 45
    7ea4:	09 c0       	rjmp	.+18     	; 0x7eb8 <vfprintf+0x1d0>
    7ea6:	f1 fe       	sbrs	r15, 1
    7ea8:	02 c0       	rjmp	.+4      	; 0x7eae <vfprintf+0x1c6>
    7eaa:	1b e2       	ldi	r17, 0x2B	; 43
    7eac:	05 c0       	rjmp	.+10     	; 0x7eb8 <vfprintf+0x1d0>
    7eae:	f2 fc       	sbrc	r15, 2
    7eb0:	02 c0       	rjmp	.+4      	; 0x7eb6 <vfprintf+0x1ce>
    7eb2:	10 e0       	ldi	r17, 0x00	; 0
    7eb4:	01 c0       	rjmp	.+2      	; 0x7eb8 <vfprintf+0x1d0>
    7eb6:	10 e2       	ldi	r17, 0x20	; 32
    7eb8:	c1 01       	movw	r24, r2
    7eba:	8c 70       	andi	r24, 0x0C	; 12
    7ebc:	90 70       	andi	r25, 0x00	; 0
    7ebe:	89 2b       	or	r24, r25
    7ec0:	b9 f1       	breq	.+110    	; 0x7f30 <vfprintf+0x248>
    7ec2:	11 23       	and	r17, r17
    7ec4:	11 f4       	brne	.+4      	; 0x7eca <vfprintf+0x1e2>
    7ec6:	83 e0       	ldi	r24, 0x03	; 3
    7ec8:	01 c0       	rjmp	.+2      	; 0x7ecc <vfprintf+0x1e4>
    7eca:	84 e0       	ldi	r24, 0x04	; 4
    7ecc:	88 15       	cp	r24, r8
    7ece:	10 f0       	brcs	.+4      	; 0x7ed4 <vfprintf+0x1ec>
    7ed0:	88 24       	eor	r8, r8
    7ed2:	0a c0       	rjmp	.+20     	; 0x7ee8 <vfprintf+0x200>
    7ed4:	88 1a       	sub	r8, r24
    7ed6:	f3 fc       	sbrc	r15, 3
    7ed8:	07 c0       	rjmp	.+14     	; 0x7ee8 <vfprintf+0x200>
    7eda:	80 e2       	ldi	r24, 0x20	; 32
    7edc:	90 e0       	ldi	r25, 0x00	; 0
    7ede:	b3 01       	movw	r22, r6
    7ee0:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    7ee4:	8a 94       	dec	r8
    7ee6:	c9 f7       	brne	.-14     	; 0x7eda <vfprintf+0x1f2>
    7ee8:	11 23       	and	r17, r17
    7eea:	29 f0       	breq	.+10     	; 0x7ef6 <vfprintf+0x20e>
    7eec:	81 2f       	mov	r24, r17
    7eee:	90 e0       	ldi	r25, 0x00	; 0
    7ef0:	b3 01       	movw	r22, r6
    7ef2:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    7ef6:	23 fe       	sbrs	r2, 3
    7ef8:	03 c0       	rjmp	.+6      	; 0x7f00 <vfprintf+0x218>
    7efa:	03 e3       	ldi	r16, 0x33	; 51
    7efc:	12 e0       	ldi	r17, 0x02	; 2
    7efe:	0e c0       	rjmp	.+28     	; 0x7f1c <vfprintf+0x234>
    7f00:	07 e3       	ldi	r16, 0x37	; 55
    7f02:	12 e0       	ldi	r17, 0x02	; 2
    7f04:	0b c0       	rjmp	.+22     	; 0x7f1c <vfprintf+0x234>
    7f06:	e1 14       	cp	r14, r1
    7f08:	f1 04       	cpc	r15, r1
    7f0a:	09 f0       	breq	.+2      	; 0x7f0e <vfprintf+0x226>
    7f0c:	80 52       	subi	r24, 0x20	; 32
    7f0e:	90 e0       	ldi	r25, 0x00	; 0
    7f10:	b3 01       	movw	r22, r6
    7f12:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    7f16:	0f 5f       	subi	r16, 0xFF	; 255
    7f18:	1f 4f       	sbci	r17, 0xFF	; 255
    7f1a:	05 c0       	rjmp	.+10     	; 0x7f26 <vfprintf+0x23e>
    7f1c:	ef 2c       	mov	r14, r15
    7f1e:	ff 24       	eor	r15, r15
    7f20:	f0 e1       	ldi	r31, 0x10	; 16
    7f22:	ef 22       	and	r14, r31
    7f24:	ff 24       	eor	r15, r15
    7f26:	f8 01       	movw	r30, r16
    7f28:	84 91       	lpm	r24, Z+
    7f2a:	88 23       	and	r24, r24
    7f2c:	61 f7       	brne	.-40     	; 0x7f06 <vfprintf+0x21e>
    7f2e:	14 c1       	rjmp	.+552    	; 0x8158 <vfprintf+0x470>
    7f30:	f7 fe       	sbrs	r15, 7
    7f32:	12 c0       	rjmp	.+36     	; 0x7f58 <vfprintf+0x270>
    7f34:	bc 0c       	add	r11, r12
    7f36:	24 fe       	sbrs	r2, 4
    7f38:	04 c0       	rjmp	.+8      	; 0x7f42 <vfprintf+0x25a>
    7f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    7f3c:	81 33       	cpi	r24, 0x31	; 49
    7f3e:	09 f4       	brne	.+2      	; 0x7f42 <vfprintf+0x25a>
    7f40:	ba 94       	dec	r11
    7f42:	1b 14       	cp	r1, r11
    7f44:	1c f0       	brlt	.+6      	; 0x7f4c <vfprintf+0x264>
    7f46:	bb 24       	eor	r11, r11
    7f48:	b3 94       	inc	r11
    7f4a:	2d c0       	rjmp	.+90     	; 0x7fa6 <vfprintf+0x2be>
    7f4c:	f8 e0       	ldi	r31, 0x08	; 8
    7f4e:	fb 15       	cp	r31, r11
    7f50:	50 f5       	brcc	.+84     	; 0x7fa6 <vfprintf+0x2be>
    7f52:	38 e0       	ldi	r19, 0x08	; 8
    7f54:	b3 2e       	mov	r11, r19
    7f56:	27 c0       	rjmp	.+78     	; 0x7fa6 <vfprintf+0x2be>
    7f58:	f6 fc       	sbrc	r15, 6
    7f5a:	25 c0       	rjmp	.+74     	; 0x7fa6 <vfprintf+0x2be>
    7f5c:	89 2d       	mov	r24, r9
    7f5e:	90 e0       	ldi	r25, 0x00	; 0
    7f60:	8c 15       	cp	r24, r12
    7f62:	9d 05       	cpc	r25, r13
    7f64:	4c f0       	brlt	.+18     	; 0x7f78 <vfprintf+0x290>
    7f66:	2c ef       	ldi	r18, 0xFC	; 252
    7f68:	c2 16       	cp	r12, r18
    7f6a:	2f ef       	ldi	r18, 0xFF	; 255
    7f6c:	d2 06       	cpc	r13, r18
    7f6e:	24 f0       	brlt	.+8      	; 0x7f78 <vfprintf+0x290>
    7f70:	30 e8       	ldi	r19, 0x80	; 128
    7f72:	f3 2a       	or	r15, r19
    7f74:	01 c0       	rjmp	.+2      	; 0x7f78 <vfprintf+0x290>
    7f76:	9a 94       	dec	r9
    7f78:	99 20       	and	r9, r9
    7f7a:	49 f0       	breq	.+18     	; 0x7f8e <vfprintf+0x2a6>
    7f7c:	e2 e0       	ldi	r30, 0x02	; 2
    7f7e:	f0 e0       	ldi	r31, 0x00	; 0
    7f80:	ec 0f       	add	r30, r28
    7f82:	fd 1f       	adc	r31, r29
    7f84:	e9 0d       	add	r30, r9
    7f86:	f1 1d       	adc	r31, r1
    7f88:	80 81       	ld	r24, Z
    7f8a:	80 33       	cpi	r24, 0x30	; 48
    7f8c:	a1 f3       	breq	.-24     	; 0x7f76 <vfprintf+0x28e>
    7f8e:	f7 fe       	sbrs	r15, 7
    7f90:	0a c0       	rjmp	.+20     	; 0x7fa6 <vfprintf+0x2be>
    7f92:	b9 2c       	mov	r11, r9
    7f94:	b3 94       	inc	r11
    7f96:	89 2d       	mov	r24, r9
    7f98:	90 e0       	ldi	r25, 0x00	; 0
    7f9a:	c8 16       	cp	r12, r24
    7f9c:	d9 06       	cpc	r13, r25
    7f9e:	14 f0       	brlt	.+4      	; 0x7fa4 <vfprintf+0x2bc>
    7fa0:	99 24       	eor	r9, r9
    7fa2:	01 c0       	rjmp	.+2      	; 0x7fa6 <vfprintf+0x2be>
    7fa4:	9c 18       	sub	r9, r12
    7fa6:	f7 fc       	sbrc	r15, 7
    7fa8:	03 c0       	rjmp	.+6      	; 0x7fb0 <vfprintf+0x2c8>
    7faa:	25 e0       	ldi	r18, 0x05	; 5
    7fac:	30 e0       	ldi	r19, 0x00	; 0
    7fae:	09 c0       	rjmp	.+18     	; 0x7fc2 <vfprintf+0x2da>
    7fb0:	1c 14       	cp	r1, r12
    7fb2:	1d 04       	cpc	r1, r13
    7fb4:	1c f0       	brlt	.+6      	; 0x7fbc <vfprintf+0x2d4>
    7fb6:	21 e0       	ldi	r18, 0x01	; 1
    7fb8:	30 e0       	ldi	r19, 0x00	; 0
    7fba:	03 c0       	rjmp	.+6      	; 0x7fc2 <vfprintf+0x2da>
    7fbc:	96 01       	movw	r18, r12
    7fbe:	2f 5f       	subi	r18, 0xFF	; 255
    7fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    7fc2:	11 23       	and	r17, r17
    7fc4:	11 f0       	breq	.+4      	; 0x7fca <vfprintf+0x2e2>
    7fc6:	2f 5f       	subi	r18, 0xFF	; 255
    7fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    7fca:	99 20       	and	r9, r9
    7fcc:	29 f0       	breq	.+10     	; 0x7fd8 <vfprintf+0x2f0>
    7fce:	89 2d       	mov	r24, r9
    7fd0:	90 e0       	ldi	r25, 0x00	; 0
    7fd2:	01 96       	adiw	r24, 0x01	; 1
    7fd4:	28 0f       	add	r18, r24
    7fd6:	39 1f       	adc	r19, r25
    7fd8:	88 2d       	mov	r24, r8
    7fda:	90 e0       	ldi	r25, 0x00	; 0
    7fdc:	28 17       	cp	r18, r24
    7fde:	39 07       	cpc	r19, r25
    7fe0:	14 f0       	brlt	.+4      	; 0x7fe6 <vfprintf+0x2fe>
    7fe2:	88 24       	eor	r8, r8
    7fe4:	01 c0       	rjmp	.+2      	; 0x7fe8 <vfprintf+0x300>
    7fe6:	82 1a       	sub	r8, r18
    7fe8:	4f 2c       	mov	r4, r15
    7fea:	55 24       	eor	r5, r5
    7fec:	c2 01       	movw	r24, r4
    7fee:	89 70       	andi	r24, 0x09	; 9
    7ff0:	90 70       	andi	r25, 0x00	; 0
    7ff2:	89 2b       	or	r24, r25
    7ff4:	39 f0       	breq	.+14     	; 0x8004 <vfprintf+0x31c>
    7ff6:	08 c0       	rjmp	.+16     	; 0x8008 <vfprintf+0x320>
    7ff8:	80 e2       	ldi	r24, 0x20	; 32
    7ffa:	90 e0       	ldi	r25, 0x00	; 0
    7ffc:	b3 01       	movw	r22, r6
    7ffe:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    8002:	8a 94       	dec	r8
    8004:	88 20       	and	r8, r8
    8006:	c1 f7       	brne	.-16     	; 0x7ff8 <vfprintf+0x310>
    8008:	11 23       	and	r17, r17
    800a:	29 f0       	breq	.+10     	; 0x8016 <vfprintf+0x32e>
    800c:	81 2f       	mov	r24, r17
    800e:	90 e0       	ldi	r25, 0x00	; 0
    8010:	b3 01       	movw	r22, r6
    8012:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    8016:	43 fe       	sbrs	r4, 3
    8018:	07 c0       	rjmp	.+14     	; 0x8028 <vfprintf+0x340>
    801a:	08 c0       	rjmp	.+16     	; 0x802c <vfprintf+0x344>
    801c:	80 e3       	ldi	r24, 0x30	; 48
    801e:	90 e0       	ldi	r25, 0x00	; 0
    8020:	b3 01       	movw	r22, r6
    8022:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    8026:	8a 94       	dec	r8
    8028:	88 20       	and	r8, r8
    802a:	c1 f7       	brne	.-16     	; 0x801c <vfprintf+0x334>
    802c:	f7 fe       	sbrs	r15, 7
    802e:	46 c0       	rjmp	.+140    	; 0x80bc <vfprintf+0x3d4>
    8030:	86 01       	movw	r16, r12
    8032:	d7 fe       	sbrs	r13, 7
    8034:	02 c0       	rjmp	.+4      	; 0x803a <vfprintf+0x352>
    8036:	00 e0       	ldi	r16, 0x00	; 0
    8038:	10 e0       	ldi	r17, 0x00	; 0
    803a:	76 01       	movw	r14, r12
    803c:	08 94       	sec
    803e:	e1 1c       	adc	r14, r1
    8040:	f1 1c       	adc	r15, r1
    8042:	e0 1a       	sub	r14, r16
    8044:	f1 0a       	sbc	r15, r17
    8046:	41 e0       	ldi	r20, 0x01	; 1
    8048:	50 e0       	ldi	r21, 0x00	; 0
    804a:	4c 0f       	add	r20, r28
    804c:	5d 1f       	adc	r21, r29
    804e:	e4 0e       	add	r14, r20
    8050:	f5 1e       	adc	r15, r21
    8052:	26 01       	movw	r4, r12
    8054:	4b 18       	sub	r4, r11
    8056:	51 08       	sbc	r5, r1
    8058:	89 2d       	mov	r24, r9
    805a:	90 e0       	ldi	r25, 0x00	; 0
    805c:	aa 24       	eor	r10, r10
    805e:	bb 24       	eor	r11, r11
    8060:	a8 1a       	sub	r10, r24
    8062:	b9 0a       	sbc	r11, r25
    8064:	5f ef       	ldi	r21, 0xFF	; 255
    8066:	0f 3f       	cpi	r16, 0xFF	; 255
    8068:	15 07       	cpc	r17, r21
    806a:	29 f4       	brne	.+10     	; 0x8076 <vfprintf+0x38e>
    806c:	8e e2       	ldi	r24, 0x2E	; 46
    806e:	90 e0       	ldi	r25, 0x00	; 0
    8070:	b3 01       	movw	r22, r6
    8072:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    8076:	c0 16       	cp	r12, r16
    8078:	d1 06       	cpc	r13, r17
    807a:	34 f0       	brlt	.+12     	; 0x8088 <vfprintf+0x3a0>
    807c:	40 16       	cp	r4, r16
    807e:	51 06       	cpc	r5, r17
    8080:	1c f4       	brge	.+6      	; 0x8088 <vfprintf+0x3a0>
    8082:	f7 01       	movw	r30, r14
    8084:	80 81       	ld	r24, Z
    8086:	01 c0       	rjmp	.+2      	; 0x808a <vfprintf+0x3a2>
    8088:	80 e3       	ldi	r24, 0x30	; 48
    808a:	01 50       	subi	r16, 0x01	; 1
    808c:	10 40       	sbci	r17, 0x00	; 0
    808e:	08 94       	sec
    8090:	e1 1c       	adc	r14, r1
    8092:	f1 1c       	adc	r15, r1
    8094:	0a 15       	cp	r16, r10
    8096:	1b 05       	cpc	r17, r11
    8098:	2c f0       	brlt	.+10     	; 0x80a4 <vfprintf+0x3bc>
    809a:	90 e0       	ldi	r25, 0x00	; 0
    809c:	b3 01       	movw	r22, r6
    809e:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    80a2:	e0 cf       	rjmp	.-64     	; 0x8064 <vfprintf+0x37c>
    80a4:	0c 15       	cp	r16, r12
    80a6:	1d 05       	cpc	r17, r13
    80a8:	39 f4       	brne	.+14     	; 0x80b8 <vfprintf+0x3d0>
    80aa:	9a 81       	ldd	r25, Y+2	; 0x02
    80ac:	96 33       	cpi	r25, 0x36	; 54
    80ae:	18 f4       	brcc	.+6      	; 0x80b6 <vfprintf+0x3ce>
    80b0:	95 33       	cpi	r25, 0x35	; 53
    80b2:	11 f4       	brne	.+4      	; 0x80b8 <vfprintf+0x3d0>
    80b4:	24 fe       	sbrs	r2, 4
    80b6:	81 e3       	ldi	r24, 0x31	; 49
    80b8:	90 e0       	ldi	r25, 0x00	; 0
    80ba:	4b c0       	rjmp	.+150    	; 0x8152 <vfprintf+0x46a>
    80bc:	8a 81       	ldd	r24, Y+2	; 0x02
    80be:	81 33       	cpi	r24, 0x31	; 49
    80c0:	09 f0       	breq	.+2      	; 0x80c4 <vfprintf+0x3dc>
    80c2:	0f 7e       	andi	r16, 0xEF	; 239
    80c4:	90 e0       	ldi	r25, 0x00	; 0
    80c6:	b3 01       	movw	r22, r6
    80c8:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    80cc:	99 20       	and	r9, r9
    80ce:	a1 f0       	breq	.+40     	; 0x80f8 <vfprintf+0x410>
    80d0:	8e e2       	ldi	r24, 0x2E	; 46
    80d2:	90 e0       	ldi	r25, 0x00	; 0
    80d4:	b3 01       	movw	r22, r6
    80d6:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    80da:	12 e0       	ldi	r17, 0x02	; 2
    80dc:	e1 e0       	ldi	r30, 0x01	; 1
    80de:	f0 e0       	ldi	r31, 0x00	; 0
    80e0:	ec 0f       	add	r30, r28
    80e2:	fd 1f       	adc	r31, r29
    80e4:	e1 0f       	add	r30, r17
    80e6:	f1 1d       	adc	r31, r1
    80e8:	1f 5f       	subi	r17, 0xFF	; 255
    80ea:	80 81       	ld	r24, Z
    80ec:	90 e0       	ldi	r25, 0x00	; 0
    80ee:	b3 01       	movw	r22, r6
    80f0:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    80f4:	9a 94       	dec	r9
    80f6:	91 f7       	brne	.-28     	; 0x80dc <vfprintf+0x3f4>
    80f8:	44 fc       	sbrc	r4, 4
    80fa:	03 c0       	rjmp	.+6      	; 0x8102 <vfprintf+0x41a>
    80fc:	85 e6       	ldi	r24, 0x65	; 101
    80fe:	90 e0       	ldi	r25, 0x00	; 0
    8100:	02 c0       	rjmp	.+4      	; 0x8106 <vfprintf+0x41e>
    8102:	85 e4       	ldi	r24, 0x45	; 69
    8104:	90 e0       	ldi	r25, 0x00	; 0
    8106:	b3 01       	movw	r22, r6
    8108:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    810c:	d7 fc       	sbrc	r13, 7
    810e:	05 c0       	rjmp	.+10     	; 0x811a <vfprintf+0x432>
    8110:	c1 14       	cp	r12, r1
    8112:	d1 04       	cpc	r13, r1
    8114:	41 f4       	brne	.+16     	; 0x8126 <vfprintf+0x43e>
    8116:	04 ff       	sbrs	r16, 4
    8118:	06 c0       	rjmp	.+12     	; 0x8126 <vfprintf+0x43e>
    811a:	d0 94       	com	r13
    811c:	c1 94       	neg	r12
    811e:	d1 08       	sbc	r13, r1
    8120:	d3 94       	inc	r13
    8122:	8d e2       	ldi	r24, 0x2D	; 45
    8124:	01 c0       	rjmp	.+2      	; 0x8128 <vfprintf+0x440>
    8126:	8b e2       	ldi	r24, 0x2B	; 43
    8128:	90 e0       	ldi	r25, 0x00	; 0
    812a:	b3 01       	movw	r22, r6
    812c:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    8130:	80 e3       	ldi	r24, 0x30	; 48
    8132:	05 c0       	rjmp	.+10     	; 0x813e <vfprintf+0x456>
    8134:	8f 5f       	subi	r24, 0xFF	; 255
    8136:	26 ef       	ldi	r18, 0xF6	; 246
    8138:	3f ef       	ldi	r19, 0xFF	; 255
    813a:	c2 0e       	add	r12, r18
    813c:	d3 1e       	adc	r13, r19
    813e:	3a e0       	ldi	r19, 0x0A	; 10
    8140:	c3 16       	cp	r12, r19
    8142:	d1 04       	cpc	r13, r1
    8144:	bc f7       	brge	.-18     	; 0x8134 <vfprintf+0x44c>
    8146:	90 e0       	ldi	r25, 0x00	; 0
    8148:	b3 01       	movw	r22, r6
    814a:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    814e:	c6 01       	movw	r24, r12
    8150:	c0 96       	adiw	r24, 0x30	; 48
    8152:	b3 01       	movw	r22, r6
    8154:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    8158:	cc 84       	ldd	r12, Y+12	; 0x0c
    815a:	dd 84       	ldd	r13, Y+13	; 0x0d
    815c:	52 c1       	rjmp	.+676    	; 0x8402 <vfprintf+0x71a>
    815e:	93 36       	cpi	r25, 0x63	; 99
    8160:	31 f0       	breq	.+12     	; 0x816e <vfprintf+0x486>
    8162:	93 37       	cpi	r25, 0x73	; 115
    8164:	99 f0       	breq	.+38     	; 0x818c <vfprintf+0x4a4>
    8166:	93 35       	cpi	r25, 0x53	; 83
    8168:	09 f0       	breq	.+2      	; 0x816c <vfprintf+0x484>
    816a:	59 c0       	rjmp	.+178    	; 0x821e <vfprintf+0x536>
    816c:	23 c0       	rjmp	.+70     	; 0x81b4 <vfprintf+0x4cc>
    816e:	f6 01       	movw	r30, r12
    8170:	80 81       	ld	r24, Z
    8172:	89 83       	std	Y+1, r24	; 0x01
    8174:	5e 01       	movw	r10, r28
    8176:	08 94       	sec
    8178:	a1 1c       	adc	r10, r1
    817a:	b1 1c       	adc	r11, r1
    817c:	22 e0       	ldi	r18, 0x02	; 2
    817e:	30 e0       	ldi	r19, 0x00	; 0
    8180:	c2 0e       	add	r12, r18
    8182:	d3 1e       	adc	r13, r19
    8184:	21 e0       	ldi	r18, 0x01	; 1
    8186:	e2 2e       	mov	r14, r18
    8188:	f1 2c       	mov	r15, r1
    818a:	12 c0       	rjmp	.+36     	; 0x81b0 <vfprintf+0x4c8>
    818c:	f6 01       	movw	r30, r12
    818e:	a0 80       	ld	r10, Z
    8190:	b1 80       	ldd	r11, Z+1	; 0x01
    8192:	16 fd       	sbrc	r17, 6
    8194:	03 c0       	rjmp	.+6      	; 0x819c <vfprintf+0x4b4>
    8196:	6f ef       	ldi	r22, 0xFF	; 255
    8198:	7f ef       	ldi	r23, 0xFF	; 255
    819a:	02 c0       	rjmp	.+4      	; 0x81a0 <vfprintf+0x4b8>
    819c:	69 2d       	mov	r22, r9
    819e:	70 e0       	ldi	r23, 0x00	; 0
    81a0:	22 e0       	ldi	r18, 0x02	; 2
    81a2:	30 e0       	ldi	r19, 0x00	; 0
    81a4:	c2 0e       	add	r12, r18
    81a6:	d3 1e       	adc	r13, r19
    81a8:	c5 01       	movw	r24, r10
    81aa:	0e 94 58 49 	call	0x92b0	; 0x92b0 <strnlen>
    81ae:	7c 01       	movw	r14, r24
    81b0:	1f 77       	andi	r17, 0x7F	; 127
    81b2:	13 c0       	rjmp	.+38     	; 0x81da <vfprintf+0x4f2>
    81b4:	f6 01       	movw	r30, r12
    81b6:	a0 80       	ld	r10, Z
    81b8:	b1 80       	ldd	r11, Z+1	; 0x01
    81ba:	16 fd       	sbrc	r17, 6
    81bc:	03 c0       	rjmp	.+6      	; 0x81c4 <vfprintf+0x4dc>
    81be:	6f ef       	ldi	r22, 0xFF	; 255
    81c0:	7f ef       	ldi	r23, 0xFF	; 255
    81c2:	02 c0       	rjmp	.+4      	; 0x81c8 <vfprintf+0x4e0>
    81c4:	69 2d       	mov	r22, r9
    81c6:	70 e0       	ldi	r23, 0x00	; 0
    81c8:	22 e0       	ldi	r18, 0x02	; 2
    81ca:	30 e0       	ldi	r19, 0x00	; 0
    81cc:	c2 0e       	add	r12, r18
    81ce:	d3 1e       	adc	r13, r19
    81d0:	c5 01       	movw	r24, r10
    81d2:	0e 94 4d 49 	call	0x929a	; 0x929a <strnlen_P>
    81d6:	7c 01       	movw	r14, r24
    81d8:	10 68       	ori	r17, 0x80	; 128
    81da:	13 ff       	sbrs	r17, 3
    81dc:	07 c0       	rjmp	.+14     	; 0x81ec <vfprintf+0x504>
    81de:	1b c0       	rjmp	.+54     	; 0x8216 <vfprintf+0x52e>
    81e0:	80 e2       	ldi	r24, 0x20	; 32
    81e2:	90 e0       	ldi	r25, 0x00	; 0
    81e4:	b3 01       	movw	r22, r6
    81e6:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    81ea:	8a 94       	dec	r8
    81ec:	88 2d       	mov	r24, r8
    81ee:	90 e0       	ldi	r25, 0x00	; 0
    81f0:	e8 16       	cp	r14, r24
    81f2:	f9 06       	cpc	r15, r25
    81f4:	a8 f3       	brcs	.-22     	; 0x81e0 <vfprintf+0x4f8>
    81f6:	0f c0       	rjmp	.+30     	; 0x8216 <vfprintf+0x52e>
    81f8:	f5 01       	movw	r30, r10
    81fa:	17 fd       	sbrc	r17, 7
    81fc:	85 91       	lpm	r24, Z+
    81fe:	17 ff       	sbrs	r17, 7
    8200:	81 91       	ld	r24, Z+
    8202:	5f 01       	movw	r10, r30
    8204:	90 e0       	ldi	r25, 0x00	; 0
    8206:	b3 01       	movw	r22, r6
    8208:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    820c:	81 10       	cpse	r8, r1
    820e:	8a 94       	dec	r8
    8210:	08 94       	sec
    8212:	e1 08       	sbc	r14, r1
    8214:	f1 08       	sbc	r15, r1
    8216:	e1 14       	cp	r14, r1
    8218:	f1 04       	cpc	r15, r1
    821a:	71 f7       	brne	.-36     	; 0x81f8 <vfprintf+0x510>
    821c:	f2 c0       	rjmp	.+484    	; 0x8402 <vfprintf+0x71a>
    821e:	94 36       	cpi	r25, 0x64	; 100
    8220:	11 f0       	breq	.+4      	; 0x8226 <vfprintf+0x53e>
    8222:	99 36       	cpi	r25, 0x69	; 105
    8224:	89 f5       	brne	.+98     	; 0x8288 <vfprintf+0x5a0>
    8226:	17 ff       	sbrs	r17, 7
    8228:	08 c0       	rjmp	.+16     	; 0x823a <vfprintf+0x552>
    822a:	f6 01       	movw	r30, r12
    822c:	20 81       	ld	r18, Z
    822e:	31 81       	ldd	r19, Z+1	; 0x01
    8230:	42 81       	ldd	r20, Z+2	; 0x02
    8232:	53 81       	ldd	r21, Z+3	; 0x03
    8234:	84 e0       	ldi	r24, 0x04	; 4
    8236:	90 e0       	ldi	r25, 0x00	; 0
    8238:	0a c0       	rjmp	.+20     	; 0x824e <vfprintf+0x566>
    823a:	f6 01       	movw	r30, r12
    823c:	80 81       	ld	r24, Z
    823e:	91 81       	ldd	r25, Z+1	; 0x01
    8240:	9c 01       	movw	r18, r24
    8242:	44 27       	eor	r20, r20
    8244:	37 fd       	sbrc	r19, 7
    8246:	40 95       	com	r20
    8248:	54 2f       	mov	r21, r20
    824a:	82 e0       	ldi	r24, 0x02	; 2
    824c:	90 e0       	ldi	r25, 0x00	; 0
    824e:	c8 0e       	add	r12, r24
    8250:	d9 1e       	adc	r13, r25
    8252:	9f e6       	ldi	r25, 0x6F	; 111
    8254:	f9 2e       	mov	r15, r25
    8256:	f1 22       	and	r15, r17
    8258:	57 ff       	sbrs	r21, 7
    825a:	09 c0       	rjmp	.+18     	; 0x826e <vfprintf+0x586>
    825c:	50 95       	com	r21
    825e:	40 95       	com	r20
    8260:	30 95       	com	r19
    8262:	21 95       	neg	r18
    8264:	3f 4f       	sbci	r19, 0xFF	; 255
    8266:	4f 4f       	sbci	r20, 0xFF	; 255
    8268:	5f 4f       	sbci	r21, 0xFF	; 255
    826a:	90 e8       	ldi	r25, 0x80	; 128
    826c:	f9 2a       	or	r15, r25
    826e:	ca 01       	movw	r24, r20
    8270:	b9 01       	movw	r22, r18
    8272:	ae 01       	movw	r20, r28
    8274:	4f 5f       	subi	r20, 0xFF	; 255
    8276:	5f 4f       	sbci	r21, 0xFF	; 255
    8278:	2a e0       	ldi	r18, 0x0A	; 10
    827a:	30 e0       	ldi	r19, 0x00	; 0
    827c:	0e 94 f2 49 	call	0x93e4	; 0x93e4 <__ultoa_invert>
    8280:	e8 2e       	mov	r14, r24
    8282:	e8 89       	ldd	r30, Y+16	; 0x10
    8284:	ee 1a       	sub	r14, r30
    8286:	41 c0       	rjmp	.+130    	; 0x830a <vfprintf+0x622>
    8288:	95 37       	cpi	r25, 0x75	; 117
    828a:	21 f4       	brne	.+8      	; 0x8294 <vfprintf+0x5ac>
    828c:	1f 7e       	andi	r17, 0xEF	; 239
    828e:	2a e0       	ldi	r18, 0x0A	; 10
    8290:	30 e0       	ldi	r19, 0x00	; 0
    8292:	1c c0       	rjmp	.+56     	; 0x82cc <vfprintf+0x5e4>
    8294:	19 7f       	andi	r17, 0xF9	; 249
    8296:	9f 36       	cpi	r25, 0x6F	; 111
    8298:	61 f0       	breq	.+24     	; 0x82b2 <vfprintf+0x5ca>
    829a:	90 37       	cpi	r25, 0x70	; 112
    829c:	20 f4       	brcc	.+8      	; 0x82a6 <vfprintf+0x5be>
    829e:	98 35       	cpi	r25, 0x58	; 88
    82a0:	09 f0       	breq	.+2      	; 0x82a4 <vfprintf+0x5bc>
    82a2:	b2 c0       	rjmp	.+356    	; 0x8408 <vfprintf+0x720>
    82a4:	0f c0       	rjmp	.+30     	; 0x82c4 <vfprintf+0x5dc>
    82a6:	90 37       	cpi	r25, 0x70	; 112
    82a8:	39 f0       	breq	.+14     	; 0x82b8 <vfprintf+0x5d0>
    82aa:	98 37       	cpi	r25, 0x78	; 120
    82ac:	09 f0       	breq	.+2      	; 0x82b0 <vfprintf+0x5c8>
    82ae:	ac c0       	rjmp	.+344    	; 0x8408 <vfprintf+0x720>
    82b0:	04 c0       	rjmp	.+8      	; 0x82ba <vfprintf+0x5d2>
    82b2:	28 e0       	ldi	r18, 0x08	; 8
    82b4:	30 e0       	ldi	r19, 0x00	; 0
    82b6:	0a c0       	rjmp	.+20     	; 0x82cc <vfprintf+0x5e4>
    82b8:	10 61       	ori	r17, 0x10	; 16
    82ba:	14 fd       	sbrc	r17, 4
    82bc:	14 60       	ori	r17, 0x04	; 4
    82be:	20 e1       	ldi	r18, 0x10	; 16
    82c0:	30 e0       	ldi	r19, 0x00	; 0
    82c2:	04 c0       	rjmp	.+8      	; 0x82cc <vfprintf+0x5e4>
    82c4:	14 fd       	sbrc	r17, 4
    82c6:	16 60       	ori	r17, 0x06	; 6
    82c8:	20 e1       	ldi	r18, 0x10	; 16
    82ca:	32 e0       	ldi	r19, 0x02	; 2
    82cc:	17 ff       	sbrs	r17, 7
    82ce:	08 c0       	rjmp	.+16     	; 0x82e0 <vfprintf+0x5f8>
    82d0:	f6 01       	movw	r30, r12
    82d2:	60 81       	ld	r22, Z
    82d4:	71 81       	ldd	r23, Z+1	; 0x01
    82d6:	82 81       	ldd	r24, Z+2	; 0x02
    82d8:	93 81       	ldd	r25, Z+3	; 0x03
    82da:	44 e0       	ldi	r20, 0x04	; 4
    82dc:	50 e0       	ldi	r21, 0x00	; 0
    82de:	08 c0       	rjmp	.+16     	; 0x82f0 <vfprintf+0x608>
    82e0:	f6 01       	movw	r30, r12
    82e2:	80 81       	ld	r24, Z
    82e4:	91 81       	ldd	r25, Z+1	; 0x01
    82e6:	bc 01       	movw	r22, r24
    82e8:	80 e0       	ldi	r24, 0x00	; 0
    82ea:	90 e0       	ldi	r25, 0x00	; 0
    82ec:	42 e0       	ldi	r20, 0x02	; 2
    82ee:	50 e0       	ldi	r21, 0x00	; 0
    82f0:	c4 0e       	add	r12, r20
    82f2:	d5 1e       	adc	r13, r21
    82f4:	ae 01       	movw	r20, r28
    82f6:	4f 5f       	subi	r20, 0xFF	; 255
    82f8:	5f 4f       	sbci	r21, 0xFF	; 255
    82fa:	0e 94 f2 49 	call	0x93e4	; 0x93e4 <__ultoa_invert>
    82fe:	e8 2e       	mov	r14, r24
    8300:	58 89       	ldd	r21, Y+16	; 0x10
    8302:	e5 1a       	sub	r14, r21
    8304:	8f e7       	ldi	r24, 0x7F	; 127
    8306:	f8 2e       	mov	r15, r24
    8308:	f1 22       	and	r15, r17
    830a:	f6 fe       	sbrs	r15, 6
    830c:	0b c0       	rjmp	.+22     	; 0x8324 <vfprintf+0x63c>
    830e:	8e ef       	ldi	r24, 0xFE	; 254
    8310:	f8 22       	and	r15, r24
    8312:	e9 14       	cp	r14, r9
    8314:	38 f4       	brcc	.+14     	; 0x8324 <vfprintf+0x63c>
    8316:	f4 fe       	sbrs	r15, 4
    8318:	07 c0       	rjmp	.+14     	; 0x8328 <vfprintf+0x640>
    831a:	f2 fc       	sbrc	r15, 2
    831c:	05 c0       	rjmp	.+10     	; 0x8328 <vfprintf+0x640>
    831e:	9f ee       	ldi	r25, 0xEF	; 239
    8320:	f9 22       	and	r15, r25
    8322:	02 c0       	rjmp	.+4      	; 0x8328 <vfprintf+0x640>
    8324:	1e 2d       	mov	r17, r14
    8326:	01 c0       	rjmp	.+2      	; 0x832a <vfprintf+0x642>
    8328:	19 2d       	mov	r17, r9
    832a:	f4 fe       	sbrs	r15, 4
    832c:	0d c0       	rjmp	.+26     	; 0x8348 <vfprintf+0x660>
    832e:	fe 01       	movw	r30, r28
    8330:	ee 0d       	add	r30, r14
    8332:	f1 1d       	adc	r31, r1
    8334:	80 81       	ld	r24, Z
    8336:	80 33       	cpi	r24, 0x30	; 48
    8338:	19 f4       	brne	.+6      	; 0x8340 <vfprintf+0x658>
    833a:	e9 ee       	ldi	r30, 0xE9	; 233
    833c:	fe 22       	and	r15, r30
    833e:	08 c0       	rjmp	.+16     	; 0x8350 <vfprintf+0x668>
    8340:	1f 5f       	subi	r17, 0xFF	; 255
    8342:	f2 fe       	sbrs	r15, 2
    8344:	05 c0       	rjmp	.+10     	; 0x8350 <vfprintf+0x668>
    8346:	03 c0       	rjmp	.+6      	; 0x834e <vfprintf+0x666>
    8348:	8f 2d       	mov	r24, r15
    834a:	86 78       	andi	r24, 0x86	; 134
    834c:	09 f0       	breq	.+2      	; 0x8350 <vfprintf+0x668>
    834e:	1f 5f       	subi	r17, 0xFF	; 255
    8350:	0f 2d       	mov	r16, r15
    8352:	f3 fc       	sbrc	r15, 3
    8354:	14 c0       	rjmp	.+40     	; 0x837e <vfprintf+0x696>
    8356:	f0 fe       	sbrs	r15, 0
    8358:	0f c0       	rjmp	.+30     	; 0x8378 <vfprintf+0x690>
    835a:	18 15       	cp	r17, r8
    835c:	10 f0       	brcs	.+4      	; 0x8362 <vfprintf+0x67a>
    835e:	9e 2c       	mov	r9, r14
    8360:	0b c0       	rjmp	.+22     	; 0x8378 <vfprintf+0x690>
    8362:	9e 2c       	mov	r9, r14
    8364:	98 0c       	add	r9, r8
    8366:	91 1a       	sub	r9, r17
    8368:	18 2d       	mov	r17, r8
    836a:	06 c0       	rjmp	.+12     	; 0x8378 <vfprintf+0x690>
    836c:	80 e2       	ldi	r24, 0x20	; 32
    836e:	90 e0       	ldi	r25, 0x00	; 0
    8370:	b3 01       	movw	r22, r6
    8372:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    8376:	1f 5f       	subi	r17, 0xFF	; 255
    8378:	18 15       	cp	r17, r8
    837a:	c0 f3       	brcs	.-16     	; 0x836c <vfprintf+0x684>
    837c:	04 c0       	rjmp	.+8      	; 0x8386 <vfprintf+0x69e>
    837e:	18 15       	cp	r17, r8
    8380:	10 f4       	brcc	.+4      	; 0x8386 <vfprintf+0x69e>
    8382:	81 1a       	sub	r8, r17
    8384:	01 c0       	rjmp	.+2      	; 0x8388 <vfprintf+0x6a0>
    8386:	88 24       	eor	r8, r8
    8388:	04 ff       	sbrs	r16, 4
    838a:	0f c0       	rjmp	.+30     	; 0x83aa <vfprintf+0x6c2>
    838c:	80 e3       	ldi	r24, 0x30	; 48
    838e:	90 e0       	ldi	r25, 0x00	; 0
    8390:	b3 01       	movw	r22, r6
    8392:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    8396:	02 ff       	sbrs	r16, 2
    8398:	1d c0       	rjmp	.+58     	; 0x83d4 <vfprintf+0x6ec>
    839a:	01 fd       	sbrc	r16, 1
    839c:	03 c0       	rjmp	.+6      	; 0x83a4 <vfprintf+0x6bc>
    839e:	88 e7       	ldi	r24, 0x78	; 120
    83a0:	90 e0       	ldi	r25, 0x00	; 0
    83a2:	0e c0       	rjmp	.+28     	; 0x83c0 <vfprintf+0x6d8>
    83a4:	88 e5       	ldi	r24, 0x58	; 88
    83a6:	90 e0       	ldi	r25, 0x00	; 0
    83a8:	0b c0       	rjmp	.+22     	; 0x83c0 <vfprintf+0x6d8>
    83aa:	80 2f       	mov	r24, r16
    83ac:	86 78       	andi	r24, 0x86	; 134
    83ae:	91 f0       	breq	.+36     	; 0x83d4 <vfprintf+0x6ec>
    83b0:	01 ff       	sbrs	r16, 1
    83b2:	02 c0       	rjmp	.+4      	; 0x83b8 <vfprintf+0x6d0>
    83b4:	8b e2       	ldi	r24, 0x2B	; 43
    83b6:	01 c0       	rjmp	.+2      	; 0x83ba <vfprintf+0x6d2>
    83b8:	80 e2       	ldi	r24, 0x20	; 32
    83ba:	f7 fc       	sbrc	r15, 7
    83bc:	8d e2       	ldi	r24, 0x2D	; 45
    83be:	90 e0       	ldi	r25, 0x00	; 0
    83c0:	b3 01       	movw	r22, r6
    83c2:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    83c6:	06 c0       	rjmp	.+12     	; 0x83d4 <vfprintf+0x6ec>
    83c8:	80 e3       	ldi	r24, 0x30	; 48
    83ca:	90 e0       	ldi	r25, 0x00	; 0
    83cc:	b3 01       	movw	r22, r6
    83ce:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    83d2:	9a 94       	dec	r9
    83d4:	e9 14       	cp	r14, r9
    83d6:	c0 f3       	brcs	.-16     	; 0x83c8 <vfprintf+0x6e0>
    83d8:	ea 94       	dec	r14
    83da:	e1 e0       	ldi	r30, 0x01	; 1
    83dc:	f0 e0       	ldi	r31, 0x00	; 0
    83de:	ec 0f       	add	r30, r28
    83e0:	fd 1f       	adc	r31, r29
    83e2:	ee 0d       	add	r30, r14
    83e4:	f1 1d       	adc	r31, r1
    83e6:	80 81       	ld	r24, Z
    83e8:	90 e0       	ldi	r25, 0x00	; 0
    83ea:	b3 01       	movw	r22, r6
    83ec:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    83f0:	ee 20       	and	r14, r14
    83f2:	91 f7       	brne	.-28     	; 0x83d8 <vfprintf+0x6f0>
    83f4:	06 c0       	rjmp	.+12     	; 0x8402 <vfprintf+0x71a>
    83f6:	80 e2       	ldi	r24, 0x20	; 32
    83f8:	90 e0       	ldi	r25, 0x00	; 0
    83fa:	b3 01       	movw	r22, r6
    83fc:	0e 94 a3 49 	call	0x9346	; 0x9346 <fputc>
    8400:	8a 94       	dec	r8
    8402:	88 20       	and	r8, r8
    8404:	c1 f7       	brne	.-16     	; 0x83f6 <vfprintf+0x70e>
    8406:	99 cc       	rjmp	.-1742   	; 0x7d3a <vfprintf+0x52>
    8408:	f3 01       	movw	r30, r6
    840a:	66 81       	ldd	r22, Z+6	; 0x06
    840c:	77 81       	ldd	r23, Z+7	; 0x07
    840e:	cb 01       	movw	r24, r22
    8410:	61 96       	adiw	r28, 0x11	; 17
    8412:	cd bf       	out	0x3d, r28	; 61
    8414:	de bf       	out	0x3e, r29	; 62
    8416:	cf 91       	pop	r28
    8418:	df 91       	pop	r29
    841a:	1f 91       	pop	r17
    841c:	0f 91       	pop	r16
    841e:	ff 90       	pop	r15
    8420:	ef 90       	pop	r14
    8422:	df 90       	pop	r13
    8424:	cf 90       	pop	r12
    8426:	bf 90       	pop	r11
    8428:	af 90       	pop	r10
    842a:	9f 90       	pop	r9
    842c:	8f 90       	pop	r8
    842e:	7f 90       	pop	r7
    8430:	6f 90       	pop	r6
    8432:	5f 90       	pop	r5
    8434:	4f 90       	pop	r4
    8436:	3f 90       	pop	r3
    8438:	2f 90       	pop	r2
    843a:	08 95       	ret

0000843c <__subsf3>:
    843c:	50 58       	subi	r21, 0x80	; 128

0000843e <__addsf3>:
    843e:	bb 27       	eor	r27, r27
    8440:	aa 27       	eor	r26, r26
    8442:	0e d0       	rcall	.+28     	; 0x8460 <__addsf3x>
    8444:	29 c2       	rjmp	.+1106   	; 0x8898 <__fp_round>
    8446:	f2 d1       	rcall	.+996    	; 0x882c <__fp_pscA>
    8448:	30 f0       	brcs	.+12     	; 0x8456 <__addsf3+0x18>
    844a:	f7 d1       	rcall	.+1006   	; 0x883a <__fp_pscB>
    844c:	20 f0       	brcs	.+8      	; 0x8456 <__addsf3+0x18>
    844e:	31 f4       	brne	.+12     	; 0x845c <__addsf3+0x1e>
    8450:	9f 3f       	cpi	r25, 0xFF	; 255
    8452:	11 f4       	brne	.+4      	; 0x8458 <__addsf3+0x1a>
    8454:	1e f4       	brtc	.+6      	; 0x845c <__addsf3+0x1e>
    8456:	c2 c1       	rjmp	.+900    	; 0x87dc <__fp_nan>
    8458:	0e f4       	brtc	.+2      	; 0x845c <__addsf3+0x1e>
    845a:	e0 95       	com	r30
    845c:	e7 fb       	bst	r30, 7
    845e:	8f c1       	rjmp	.+798    	; 0x877e <__fp_inf>

00008460 <__addsf3x>:
    8460:	e9 2f       	mov	r30, r25
    8462:	3c d2       	rcall	.+1144   	; 0x88dc <__fp_split3>
    8464:	80 f3       	brcs	.-32     	; 0x8446 <__addsf3+0x8>
    8466:	ba 17       	cp	r27, r26
    8468:	62 07       	cpc	r22, r18
    846a:	73 07       	cpc	r23, r19
    846c:	84 07       	cpc	r24, r20
    846e:	95 07       	cpc	r25, r21
    8470:	18 f0       	brcs	.+6      	; 0x8478 <__addsf3x+0x18>
    8472:	71 f4       	brne	.+28     	; 0x8490 <__addsf3x+0x30>
    8474:	9e f5       	brtc	.+102    	; 0x84dc <__addsf3x+0x7c>
    8476:	6b c2       	rjmp	.+1238   	; 0x894e <__fp_zero>
    8478:	0e f4       	brtc	.+2      	; 0x847c <__addsf3x+0x1c>
    847a:	e0 95       	com	r30
    847c:	0b 2e       	mov	r0, r27
    847e:	ba 2f       	mov	r27, r26
    8480:	a0 2d       	mov	r26, r0
    8482:	0b 01       	movw	r0, r22
    8484:	b9 01       	movw	r22, r18
    8486:	90 01       	movw	r18, r0
    8488:	0c 01       	movw	r0, r24
    848a:	ca 01       	movw	r24, r20
    848c:	a0 01       	movw	r20, r0
    848e:	11 24       	eor	r1, r1
    8490:	ff 27       	eor	r31, r31
    8492:	59 1b       	sub	r21, r25
    8494:	99 f0       	breq	.+38     	; 0x84bc <__addsf3x+0x5c>
    8496:	59 3f       	cpi	r21, 0xF9	; 249
    8498:	50 f4       	brcc	.+20     	; 0x84ae <__addsf3x+0x4e>
    849a:	50 3e       	cpi	r21, 0xE0	; 224
    849c:	68 f1       	brcs	.+90     	; 0x84f8 <__addsf3x+0x98>
    849e:	1a 16       	cp	r1, r26
    84a0:	f0 40       	sbci	r31, 0x00	; 0
    84a2:	a2 2f       	mov	r26, r18
    84a4:	23 2f       	mov	r18, r19
    84a6:	34 2f       	mov	r19, r20
    84a8:	44 27       	eor	r20, r20
    84aa:	58 5f       	subi	r21, 0xF8	; 248
    84ac:	f3 cf       	rjmp	.-26     	; 0x8494 <__addsf3x+0x34>
    84ae:	46 95       	lsr	r20
    84b0:	37 95       	ror	r19
    84b2:	27 95       	ror	r18
    84b4:	a7 95       	ror	r26
    84b6:	f0 40       	sbci	r31, 0x00	; 0
    84b8:	53 95       	inc	r21
    84ba:	c9 f7       	brne	.-14     	; 0x84ae <__addsf3x+0x4e>
    84bc:	7e f4       	brtc	.+30     	; 0x84dc <__addsf3x+0x7c>
    84be:	1f 16       	cp	r1, r31
    84c0:	ba 0b       	sbc	r27, r26
    84c2:	62 0b       	sbc	r22, r18
    84c4:	73 0b       	sbc	r23, r19
    84c6:	84 0b       	sbc	r24, r20
    84c8:	ba f0       	brmi	.+46     	; 0x84f8 <__addsf3x+0x98>
    84ca:	91 50       	subi	r25, 0x01	; 1
    84cc:	a1 f0       	breq	.+40     	; 0x84f6 <__addsf3x+0x96>
    84ce:	ff 0f       	add	r31, r31
    84d0:	bb 1f       	adc	r27, r27
    84d2:	66 1f       	adc	r22, r22
    84d4:	77 1f       	adc	r23, r23
    84d6:	88 1f       	adc	r24, r24
    84d8:	c2 f7       	brpl	.-16     	; 0x84ca <__addsf3x+0x6a>
    84da:	0e c0       	rjmp	.+28     	; 0x84f8 <__addsf3x+0x98>
    84dc:	ba 0f       	add	r27, r26
    84de:	62 1f       	adc	r22, r18
    84e0:	73 1f       	adc	r23, r19
    84e2:	84 1f       	adc	r24, r20
    84e4:	48 f4       	brcc	.+18     	; 0x84f8 <__addsf3x+0x98>
    84e6:	87 95       	ror	r24
    84e8:	77 95       	ror	r23
    84ea:	67 95       	ror	r22
    84ec:	b7 95       	ror	r27
    84ee:	f7 95       	ror	r31
    84f0:	9e 3f       	cpi	r25, 0xFE	; 254
    84f2:	08 f0       	brcs	.+2      	; 0x84f6 <__addsf3x+0x96>
    84f4:	b3 cf       	rjmp	.-154    	; 0x845c <__addsf3+0x1e>
    84f6:	93 95       	inc	r25
    84f8:	88 0f       	add	r24, r24
    84fa:	08 f0       	brcs	.+2      	; 0x84fe <__addsf3x+0x9e>
    84fc:	99 27       	eor	r25, r25
    84fe:	ee 0f       	add	r30, r30
    8500:	97 95       	ror	r25
    8502:	87 95       	ror	r24
    8504:	08 95       	ret

00008506 <atan>:
    8506:	df 93       	push	r29
    8508:	dd 27       	eor	r29, r29
    850a:	b9 2f       	mov	r27, r25
    850c:	bf 77       	andi	r27, 0x7F	; 127
    850e:	40 e8       	ldi	r20, 0x80	; 128
    8510:	5f e3       	ldi	r21, 0x3F	; 63
    8512:	16 16       	cp	r1, r22
    8514:	17 06       	cpc	r1, r23
    8516:	48 07       	cpc	r20, r24
    8518:	5b 07       	cpc	r21, r27
    851a:	10 f4       	brcc	.+4      	; 0x8520 <atan+0x1a>
    851c:	d9 2f       	mov	r29, r25
    851e:	83 d2       	rcall	.+1286   	; 0x8a26 <inverse>
    8520:	9f 93       	push	r25
    8522:	8f 93       	push	r24
    8524:	7f 93       	push	r23
    8526:	6f 93       	push	r22
    8528:	96 d3       	rcall	.+1836   	; 0x8c56 <square>
    852a:	e8 ee       	ldi	r30, 0xE8	; 232
    852c:	f1 e0       	ldi	r31, 0x01	; 1
    852e:	59 d1       	rcall	.+690    	; 0x87e2 <__fp_powser>
    8530:	b3 d1       	rcall	.+870    	; 0x8898 <__fp_round>
    8532:	2f 91       	pop	r18
    8534:	3f 91       	pop	r19
    8536:	4f 91       	pop	r20
    8538:	5f 91       	pop	r21
    853a:	ee d2       	rcall	.+1500   	; 0x8b18 <__mulsf3x>
    853c:	dd 23       	and	r29, r29
    853e:	49 f0       	breq	.+18     	; 0x8552 <atan+0x4c>
    8540:	90 58       	subi	r25, 0x80	; 128
    8542:	a2 ea       	ldi	r26, 0xA2	; 162
    8544:	2a ed       	ldi	r18, 0xDA	; 218
    8546:	3f e0       	ldi	r19, 0x0F	; 15
    8548:	49 ec       	ldi	r20, 0xC9	; 201
    854a:	5f e3       	ldi	r21, 0x3F	; 63
    854c:	d0 78       	andi	r29, 0x80	; 128
    854e:	5d 27       	eor	r21, r29
    8550:	87 df       	rcall	.-242    	; 0x8460 <__addsf3x>
    8552:	df 91       	pop	r29
    8554:	a1 c1       	rjmp	.+834    	; 0x8898 <__fp_round>

00008556 <ceil>:
    8556:	e4 d1       	rcall	.+968    	; 0x8920 <__fp_trunc>
    8558:	80 f0       	brcs	.+32     	; 0x857a <ceil+0x24>
    855a:	9f 37       	cpi	r25, 0x7F	; 127
    855c:	40 f4       	brcc	.+16     	; 0x856e <ceil+0x18>
    855e:	91 11       	cpse	r25, r1
    8560:	0e f4       	brtc	.+2      	; 0x8564 <ceil+0xe>
    8562:	f6 c1       	rjmp	.+1004   	; 0x8950 <__fp_szero>
    8564:	60 e0       	ldi	r22, 0x00	; 0
    8566:	70 e0       	ldi	r23, 0x00	; 0
    8568:	80 e8       	ldi	r24, 0x80	; 128
    856a:	9f e3       	ldi	r25, 0x3F	; 63
    856c:	08 95       	ret
    856e:	26 f0       	brts	.+8      	; 0x8578 <ceil+0x22>
    8570:	1b 16       	cp	r1, r27
    8572:	61 1d       	adc	r22, r1
    8574:	71 1d       	adc	r23, r1
    8576:	81 1d       	adc	r24, r1
    8578:	08 c1       	rjmp	.+528    	; 0x878a <__fp_mintl>
    857a:	22 c1       	rjmp	.+580    	; 0x87c0 <__fp_mpack>

0000857c <__cmpsf2>:
    857c:	dc d0       	rcall	.+440    	; 0x8736 <__fp_cmp>
    857e:	08 f4       	brcc	.+2      	; 0x8582 <__cmpsf2+0x6>
    8580:	81 e0       	ldi	r24, 0x01	; 1
    8582:	08 95       	ret

00008584 <cos>:
    8584:	62 d1       	rcall	.+708    	; 0x884a <__fp_rempio2>
    8586:	e3 95       	inc	r30
    8588:	98 c1       	rjmp	.+816    	; 0x88ba <__fp_sinus>

0000858a <__divsf3>:
    858a:	0c d0       	rcall	.+24     	; 0x85a4 <__divsf3x>
    858c:	85 c1       	rjmp	.+778    	; 0x8898 <__fp_round>
    858e:	55 d1       	rcall	.+682    	; 0x883a <__fp_pscB>
    8590:	40 f0       	brcs	.+16     	; 0x85a2 <__divsf3+0x18>
    8592:	4c d1       	rcall	.+664    	; 0x882c <__fp_pscA>
    8594:	30 f0       	brcs	.+12     	; 0x85a2 <__divsf3+0x18>
    8596:	21 f4       	brne	.+8      	; 0x85a0 <__divsf3+0x16>
    8598:	5f 3f       	cpi	r21, 0xFF	; 255
    859a:	19 f0       	breq	.+6      	; 0x85a2 <__divsf3+0x18>
    859c:	f0 c0       	rjmp	.+480    	; 0x877e <__fp_inf>
    859e:	51 11       	cpse	r21, r1
    85a0:	d7 c1       	rjmp	.+942    	; 0x8950 <__fp_szero>
    85a2:	1c c1       	rjmp	.+568    	; 0x87dc <__fp_nan>

000085a4 <__divsf3x>:
    85a4:	9b d1       	rcall	.+822    	; 0x88dc <__fp_split3>
    85a6:	98 f3       	brcs	.-26     	; 0x858e <__divsf3+0x4>

000085a8 <__divsf3_pse>:
    85a8:	99 23       	and	r25, r25
    85aa:	c9 f3       	breq	.-14     	; 0x859e <__divsf3+0x14>
    85ac:	55 23       	and	r21, r21
    85ae:	b1 f3       	breq	.-20     	; 0x859c <__divsf3+0x12>
    85b0:	95 1b       	sub	r25, r21
    85b2:	55 0b       	sbc	r21, r21
    85b4:	bb 27       	eor	r27, r27
    85b6:	aa 27       	eor	r26, r26
    85b8:	62 17       	cp	r22, r18
    85ba:	73 07       	cpc	r23, r19
    85bc:	84 07       	cpc	r24, r20
    85be:	38 f0       	brcs	.+14     	; 0x85ce <__divsf3_pse+0x26>
    85c0:	9f 5f       	subi	r25, 0xFF	; 255
    85c2:	5f 4f       	sbci	r21, 0xFF	; 255
    85c4:	22 0f       	add	r18, r18
    85c6:	33 1f       	adc	r19, r19
    85c8:	44 1f       	adc	r20, r20
    85ca:	aa 1f       	adc	r26, r26
    85cc:	a9 f3       	breq	.-22     	; 0x85b8 <__divsf3_pse+0x10>
    85ce:	33 d0       	rcall	.+102    	; 0x8636 <__divsf3_pse+0x8e>
    85d0:	0e 2e       	mov	r0, r30
    85d2:	3a f0       	brmi	.+14     	; 0x85e2 <__divsf3_pse+0x3a>
    85d4:	e0 e8       	ldi	r30, 0x80	; 128
    85d6:	30 d0       	rcall	.+96     	; 0x8638 <__divsf3_pse+0x90>
    85d8:	91 50       	subi	r25, 0x01	; 1
    85da:	50 40       	sbci	r21, 0x00	; 0
    85dc:	e6 95       	lsr	r30
    85de:	00 1c       	adc	r0, r0
    85e0:	ca f7       	brpl	.-14     	; 0x85d4 <__divsf3_pse+0x2c>
    85e2:	29 d0       	rcall	.+82     	; 0x8636 <__divsf3_pse+0x8e>
    85e4:	fe 2f       	mov	r31, r30
    85e6:	27 d0       	rcall	.+78     	; 0x8636 <__divsf3_pse+0x8e>
    85e8:	66 0f       	add	r22, r22
    85ea:	77 1f       	adc	r23, r23
    85ec:	88 1f       	adc	r24, r24
    85ee:	bb 1f       	adc	r27, r27
    85f0:	26 17       	cp	r18, r22
    85f2:	37 07       	cpc	r19, r23
    85f4:	48 07       	cpc	r20, r24
    85f6:	ab 07       	cpc	r26, r27
    85f8:	b0 e8       	ldi	r27, 0x80	; 128
    85fa:	09 f0       	breq	.+2      	; 0x85fe <__divsf3_pse+0x56>
    85fc:	bb 0b       	sbc	r27, r27
    85fe:	80 2d       	mov	r24, r0
    8600:	bf 01       	movw	r22, r30
    8602:	ff 27       	eor	r31, r31
    8604:	93 58       	subi	r25, 0x83	; 131
    8606:	5f 4f       	sbci	r21, 0xFF	; 255
    8608:	2a f0       	brmi	.+10     	; 0x8614 <__divsf3_pse+0x6c>
    860a:	9e 3f       	cpi	r25, 0xFE	; 254
    860c:	51 05       	cpc	r21, r1
    860e:	68 f0       	brcs	.+26     	; 0x862a <__divsf3_pse+0x82>
    8610:	b6 c0       	rjmp	.+364    	; 0x877e <__fp_inf>
    8612:	9e c1       	rjmp	.+828    	; 0x8950 <__fp_szero>
    8614:	5f 3f       	cpi	r21, 0xFF	; 255
    8616:	ec f3       	brlt	.-6      	; 0x8612 <__divsf3_pse+0x6a>
    8618:	98 3e       	cpi	r25, 0xE8	; 232
    861a:	dc f3       	brlt	.-10     	; 0x8612 <__divsf3_pse+0x6a>
    861c:	86 95       	lsr	r24
    861e:	77 95       	ror	r23
    8620:	67 95       	ror	r22
    8622:	b7 95       	ror	r27
    8624:	f7 95       	ror	r31
    8626:	9f 5f       	subi	r25, 0xFF	; 255
    8628:	c9 f7       	brne	.-14     	; 0x861c <__divsf3_pse+0x74>
    862a:	88 0f       	add	r24, r24
    862c:	91 1d       	adc	r25, r1
    862e:	96 95       	lsr	r25
    8630:	87 95       	ror	r24
    8632:	97 f9       	bld	r25, 7
    8634:	08 95       	ret
    8636:	e1 e0       	ldi	r30, 0x01	; 1
    8638:	66 0f       	add	r22, r22
    863a:	77 1f       	adc	r23, r23
    863c:	88 1f       	adc	r24, r24
    863e:	bb 1f       	adc	r27, r27
    8640:	62 17       	cp	r22, r18
    8642:	73 07       	cpc	r23, r19
    8644:	84 07       	cpc	r24, r20
    8646:	ba 07       	cpc	r27, r26
    8648:	20 f0       	brcs	.+8      	; 0x8652 <__divsf3_pse+0xaa>
    864a:	62 1b       	sub	r22, r18
    864c:	73 0b       	sbc	r23, r19
    864e:	84 0b       	sbc	r24, r20
    8650:	ba 0b       	sbc	r27, r26
    8652:	ee 1f       	adc	r30, r30
    8654:	88 f7       	brcc	.-30     	; 0x8638 <__divsf3_pse+0x90>
    8656:	e0 95       	com	r30
    8658:	08 95       	ret

0000865a <__fixsfsi>:
    865a:	04 d0       	rcall	.+8      	; 0x8664 <__fixunssfsi>
    865c:	68 94       	set
    865e:	b1 11       	cpse	r27, r1
    8660:	77 c1       	rjmp	.+750    	; 0x8950 <__fp_szero>
    8662:	08 95       	ret

00008664 <__fixunssfsi>:
    8664:	43 d1       	rcall	.+646    	; 0x88ec <__fp_splitA>
    8666:	88 f0       	brcs	.+34     	; 0x868a <__fixunssfsi+0x26>
    8668:	9f 57       	subi	r25, 0x7F	; 127
    866a:	90 f0       	brcs	.+36     	; 0x8690 <__fixunssfsi+0x2c>
    866c:	b9 2f       	mov	r27, r25
    866e:	99 27       	eor	r25, r25
    8670:	b7 51       	subi	r27, 0x17	; 23
    8672:	a0 f0       	brcs	.+40     	; 0x869c <__fixunssfsi+0x38>
    8674:	d1 f0       	breq	.+52     	; 0x86aa <__fixunssfsi+0x46>
    8676:	66 0f       	add	r22, r22
    8678:	77 1f       	adc	r23, r23
    867a:	88 1f       	adc	r24, r24
    867c:	99 1f       	adc	r25, r25
    867e:	1a f0       	brmi	.+6      	; 0x8686 <__fixunssfsi+0x22>
    8680:	ba 95       	dec	r27
    8682:	c9 f7       	brne	.-14     	; 0x8676 <__fixunssfsi+0x12>
    8684:	12 c0       	rjmp	.+36     	; 0x86aa <__fixunssfsi+0x46>
    8686:	b1 30       	cpi	r27, 0x01	; 1
    8688:	81 f0       	breq	.+32     	; 0x86aa <__fixunssfsi+0x46>
    868a:	61 d1       	rcall	.+706    	; 0x894e <__fp_zero>
    868c:	b1 e0       	ldi	r27, 0x01	; 1
    868e:	08 95       	ret
    8690:	5e c1       	rjmp	.+700    	; 0x894e <__fp_zero>
    8692:	67 2f       	mov	r22, r23
    8694:	78 2f       	mov	r23, r24
    8696:	88 27       	eor	r24, r24
    8698:	b8 5f       	subi	r27, 0xF8	; 248
    869a:	39 f0       	breq	.+14     	; 0x86aa <__fixunssfsi+0x46>
    869c:	b9 3f       	cpi	r27, 0xF9	; 249
    869e:	cc f3       	brlt	.-14     	; 0x8692 <__fixunssfsi+0x2e>
    86a0:	86 95       	lsr	r24
    86a2:	77 95       	ror	r23
    86a4:	67 95       	ror	r22
    86a6:	b3 95       	inc	r27
    86a8:	d9 f7       	brne	.-10     	; 0x86a0 <__fixunssfsi+0x3c>
    86aa:	3e f4       	brtc	.+14     	; 0x86ba <__fixunssfsi+0x56>
    86ac:	90 95       	com	r25
    86ae:	80 95       	com	r24
    86b0:	70 95       	com	r23
    86b2:	61 95       	neg	r22
    86b4:	7f 4f       	sbci	r23, 0xFF	; 255
    86b6:	8f 4f       	sbci	r24, 0xFF	; 255
    86b8:	9f 4f       	sbci	r25, 0xFF	; 255
    86ba:	08 95       	ret

000086bc <__floatunsisf>:
    86bc:	e8 94       	clt
    86be:	09 c0       	rjmp	.+18     	; 0x86d2 <__floatsisf+0x12>

000086c0 <__floatsisf>:
    86c0:	97 fb       	bst	r25, 7
    86c2:	3e f4       	brtc	.+14     	; 0x86d2 <__floatsisf+0x12>
    86c4:	90 95       	com	r25
    86c6:	80 95       	com	r24
    86c8:	70 95       	com	r23
    86ca:	61 95       	neg	r22
    86cc:	7f 4f       	sbci	r23, 0xFF	; 255
    86ce:	8f 4f       	sbci	r24, 0xFF	; 255
    86d0:	9f 4f       	sbci	r25, 0xFF	; 255
    86d2:	99 23       	and	r25, r25
    86d4:	a9 f0       	breq	.+42     	; 0x8700 <__floatsisf+0x40>
    86d6:	f9 2f       	mov	r31, r25
    86d8:	96 e9       	ldi	r25, 0x96	; 150
    86da:	bb 27       	eor	r27, r27
    86dc:	93 95       	inc	r25
    86de:	f6 95       	lsr	r31
    86e0:	87 95       	ror	r24
    86e2:	77 95       	ror	r23
    86e4:	67 95       	ror	r22
    86e6:	b7 95       	ror	r27
    86e8:	f1 11       	cpse	r31, r1
    86ea:	f8 cf       	rjmp	.-16     	; 0x86dc <__floatsisf+0x1c>
    86ec:	fa f4       	brpl	.+62     	; 0x872c <__floatsisf+0x6c>
    86ee:	bb 0f       	add	r27, r27
    86f0:	11 f4       	brne	.+4      	; 0x86f6 <__floatsisf+0x36>
    86f2:	60 ff       	sbrs	r22, 0
    86f4:	1b c0       	rjmp	.+54     	; 0x872c <__floatsisf+0x6c>
    86f6:	6f 5f       	subi	r22, 0xFF	; 255
    86f8:	7f 4f       	sbci	r23, 0xFF	; 255
    86fa:	8f 4f       	sbci	r24, 0xFF	; 255
    86fc:	9f 4f       	sbci	r25, 0xFF	; 255
    86fe:	16 c0       	rjmp	.+44     	; 0x872c <__floatsisf+0x6c>
    8700:	88 23       	and	r24, r24
    8702:	11 f0       	breq	.+4      	; 0x8708 <__floatsisf+0x48>
    8704:	96 e9       	ldi	r25, 0x96	; 150
    8706:	11 c0       	rjmp	.+34     	; 0x872a <__floatsisf+0x6a>
    8708:	77 23       	and	r23, r23
    870a:	21 f0       	breq	.+8      	; 0x8714 <__floatsisf+0x54>
    870c:	9e e8       	ldi	r25, 0x8E	; 142
    870e:	87 2f       	mov	r24, r23
    8710:	76 2f       	mov	r23, r22
    8712:	05 c0       	rjmp	.+10     	; 0x871e <__floatsisf+0x5e>
    8714:	66 23       	and	r22, r22
    8716:	71 f0       	breq	.+28     	; 0x8734 <__floatsisf+0x74>
    8718:	96 e8       	ldi	r25, 0x86	; 134
    871a:	86 2f       	mov	r24, r22
    871c:	70 e0       	ldi	r23, 0x00	; 0
    871e:	60 e0       	ldi	r22, 0x00	; 0
    8720:	2a f0       	brmi	.+10     	; 0x872c <__floatsisf+0x6c>
    8722:	9a 95       	dec	r25
    8724:	66 0f       	add	r22, r22
    8726:	77 1f       	adc	r23, r23
    8728:	88 1f       	adc	r24, r24
    872a:	da f7       	brpl	.-10     	; 0x8722 <__floatsisf+0x62>
    872c:	88 0f       	add	r24, r24
    872e:	96 95       	lsr	r25
    8730:	87 95       	ror	r24
    8732:	97 f9       	bld	r25, 7
    8734:	08 95       	ret

00008736 <__fp_cmp>:
    8736:	99 0f       	add	r25, r25
    8738:	00 08       	sbc	r0, r0
    873a:	55 0f       	add	r21, r21
    873c:	aa 0b       	sbc	r26, r26
    873e:	e0 e8       	ldi	r30, 0x80	; 128
    8740:	fe ef       	ldi	r31, 0xFE	; 254
    8742:	16 16       	cp	r1, r22
    8744:	17 06       	cpc	r1, r23
    8746:	e8 07       	cpc	r30, r24
    8748:	f9 07       	cpc	r31, r25
    874a:	c0 f0       	brcs	.+48     	; 0x877c <__fp_cmp+0x46>
    874c:	12 16       	cp	r1, r18
    874e:	13 06       	cpc	r1, r19
    8750:	e4 07       	cpc	r30, r20
    8752:	f5 07       	cpc	r31, r21
    8754:	98 f0       	brcs	.+38     	; 0x877c <__fp_cmp+0x46>
    8756:	62 1b       	sub	r22, r18
    8758:	73 0b       	sbc	r23, r19
    875a:	84 0b       	sbc	r24, r20
    875c:	95 0b       	sbc	r25, r21
    875e:	39 f4       	brne	.+14     	; 0x876e <__fp_cmp+0x38>
    8760:	0a 26       	eor	r0, r26
    8762:	61 f0       	breq	.+24     	; 0x877c <__fp_cmp+0x46>
    8764:	23 2b       	or	r18, r19
    8766:	24 2b       	or	r18, r20
    8768:	25 2b       	or	r18, r21
    876a:	21 f4       	brne	.+8      	; 0x8774 <__fp_cmp+0x3e>
    876c:	08 95       	ret
    876e:	0a 26       	eor	r0, r26
    8770:	09 f4       	brne	.+2      	; 0x8774 <__fp_cmp+0x3e>
    8772:	a1 40       	sbci	r26, 0x01	; 1
    8774:	a6 95       	lsr	r26
    8776:	8f ef       	ldi	r24, 0xFF	; 255
    8778:	81 1d       	adc	r24, r1
    877a:	81 1d       	adc	r24, r1
    877c:	08 95       	ret

0000877e <__fp_inf>:
    877e:	97 f9       	bld	r25, 7
    8780:	9f 67       	ori	r25, 0x7F	; 127
    8782:	80 e8       	ldi	r24, 0x80	; 128
    8784:	70 e0       	ldi	r23, 0x00	; 0
    8786:	60 e0       	ldi	r22, 0x00	; 0
    8788:	08 95       	ret

0000878a <__fp_mintl>:
    878a:	88 23       	and	r24, r24
    878c:	71 f4       	brne	.+28     	; 0x87aa <__fp_mintl+0x20>
    878e:	77 23       	and	r23, r23
    8790:	21 f0       	breq	.+8      	; 0x879a <__fp_mintl+0x10>
    8792:	98 50       	subi	r25, 0x08	; 8
    8794:	87 2b       	or	r24, r23
    8796:	76 2f       	mov	r23, r22
    8798:	07 c0       	rjmp	.+14     	; 0x87a8 <__fp_mintl+0x1e>
    879a:	66 23       	and	r22, r22
    879c:	11 f4       	brne	.+4      	; 0x87a2 <__fp_mintl+0x18>
    879e:	99 27       	eor	r25, r25
    87a0:	0d c0       	rjmp	.+26     	; 0x87bc <__fp_mintl+0x32>
    87a2:	90 51       	subi	r25, 0x10	; 16
    87a4:	86 2b       	or	r24, r22
    87a6:	70 e0       	ldi	r23, 0x00	; 0
    87a8:	60 e0       	ldi	r22, 0x00	; 0
    87aa:	2a f0       	brmi	.+10     	; 0x87b6 <__fp_mintl+0x2c>
    87ac:	9a 95       	dec	r25
    87ae:	66 0f       	add	r22, r22
    87b0:	77 1f       	adc	r23, r23
    87b2:	88 1f       	adc	r24, r24
    87b4:	da f7       	brpl	.-10     	; 0x87ac <__fp_mintl+0x22>
    87b6:	88 0f       	add	r24, r24
    87b8:	96 95       	lsr	r25
    87ba:	87 95       	ror	r24
    87bc:	97 f9       	bld	r25, 7
    87be:	08 95       	ret

000087c0 <__fp_mpack>:
    87c0:	9f 3f       	cpi	r25, 0xFF	; 255
    87c2:	31 f0       	breq	.+12     	; 0x87d0 <__fp_mpack_finite+0xc>

000087c4 <__fp_mpack_finite>:
    87c4:	91 50       	subi	r25, 0x01	; 1
    87c6:	20 f4       	brcc	.+8      	; 0x87d0 <__fp_mpack_finite+0xc>
    87c8:	87 95       	ror	r24
    87ca:	77 95       	ror	r23
    87cc:	67 95       	ror	r22
    87ce:	b7 95       	ror	r27
    87d0:	88 0f       	add	r24, r24
    87d2:	91 1d       	adc	r25, r1
    87d4:	96 95       	lsr	r25
    87d6:	87 95       	ror	r24
    87d8:	97 f9       	bld	r25, 7
    87da:	08 95       	ret

000087dc <__fp_nan>:
    87dc:	9f ef       	ldi	r25, 0xFF	; 255
    87de:	80 ec       	ldi	r24, 0xC0	; 192
    87e0:	08 95       	ret

000087e2 <__fp_powser>:
    87e2:	df 93       	push	r29
    87e4:	cf 93       	push	r28
    87e6:	1f 93       	push	r17
    87e8:	0f 93       	push	r16
    87ea:	ff 92       	push	r15
    87ec:	ef 92       	push	r14
    87ee:	df 92       	push	r13
    87f0:	7b 01       	movw	r14, r22
    87f2:	8c 01       	movw	r16, r24
    87f4:	68 94       	set
    87f6:	05 c0       	rjmp	.+10     	; 0x8802 <__fp_powser+0x20>
    87f8:	da 2e       	mov	r13, r26
    87fa:	ef 01       	movw	r28, r30
    87fc:	8d d1       	rcall	.+794    	; 0x8b18 <__mulsf3x>
    87fe:	fe 01       	movw	r30, r28
    8800:	e8 94       	clt
    8802:	a5 91       	lpm	r26, Z+
    8804:	25 91       	lpm	r18, Z+
    8806:	35 91       	lpm	r19, Z+
    8808:	45 91       	lpm	r20, Z+
    880a:	55 91       	lpm	r21, Z+
    880c:	ae f3       	brts	.-22     	; 0x87f8 <__fp_powser+0x16>
    880e:	ef 01       	movw	r28, r30
    8810:	27 de       	rcall	.-946    	; 0x8460 <__addsf3x>
    8812:	fe 01       	movw	r30, r28
    8814:	97 01       	movw	r18, r14
    8816:	a8 01       	movw	r20, r16
    8818:	da 94       	dec	r13
    881a:	79 f7       	brne	.-34     	; 0x87fa <__fp_powser+0x18>
    881c:	df 90       	pop	r13
    881e:	ef 90       	pop	r14
    8820:	ff 90       	pop	r15
    8822:	0f 91       	pop	r16
    8824:	1f 91       	pop	r17
    8826:	cf 91       	pop	r28
    8828:	df 91       	pop	r29
    882a:	08 95       	ret

0000882c <__fp_pscA>:
    882c:	00 24       	eor	r0, r0
    882e:	0a 94       	dec	r0
    8830:	16 16       	cp	r1, r22
    8832:	17 06       	cpc	r1, r23
    8834:	18 06       	cpc	r1, r24
    8836:	09 06       	cpc	r0, r25
    8838:	08 95       	ret

0000883a <__fp_pscB>:
    883a:	00 24       	eor	r0, r0
    883c:	0a 94       	dec	r0
    883e:	12 16       	cp	r1, r18
    8840:	13 06       	cpc	r1, r19
    8842:	14 06       	cpc	r1, r20
    8844:	05 06       	cpc	r0, r21
    8846:	08 95       	ret
    8848:	c9 cf       	rjmp	.-110    	; 0x87dc <__fp_nan>

0000884a <__fp_rempio2>:
    884a:	50 d0       	rcall	.+160    	; 0x88ec <__fp_splitA>
    884c:	e8 f3       	brcs	.-6      	; 0x8848 <__fp_pscB+0xe>
    884e:	e8 94       	clt
    8850:	e0 e0       	ldi	r30, 0x00	; 0
    8852:	bb 27       	eor	r27, r27
    8854:	9f 57       	subi	r25, 0x7F	; 127
    8856:	f0 f0       	brcs	.+60     	; 0x8894 <__fp_rempio2+0x4a>
    8858:	2a ed       	ldi	r18, 0xDA	; 218
    885a:	3f e0       	ldi	r19, 0x0F	; 15
    885c:	49 ec       	ldi	r20, 0xC9	; 201
    885e:	06 c0       	rjmp	.+12     	; 0x886c <__fp_rempio2+0x22>
    8860:	ee 0f       	add	r30, r30
    8862:	bb 0f       	add	r27, r27
    8864:	66 1f       	adc	r22, r22
    8866:	77 1f       	adc	r23, r23
    8868:	88 1f       	adc	r24, r24
    886a:	28 f0       	brcs	.+10     	; 0x8876 <__fp_rempio2+0x2c>
    886c:	b2 3a       	cpi	r27, 0xA2	; 162
    886e:	62 07       	cpc	r22, r18
    8870:	73 07       	cpc	r23, r19
    8872:	84 07       	cpc	r24, r20
    8874:	28 f0       	brcs	.+10     	; 0x8880 <__fp_rempio2+0x36>
    8876:	b2 5a       	subi	r27, 0xA2	; 162
    8878:	62 0b       	sbc	r22, r18
    887a:	73 0b       	sbc	r23, r19
    887c:	84 0b       	sbc	r24, r20
    887e:	e3 95       	inc	r30
    8880:	9a 95       	dec	r25
    8882:	72 f7       	brpl	.-36     	; 0x8860 <__fp_rempio2+0x16>
    8884:	80 38       	cpi	r24, 0x80	; 128
    8886:	30 f4       	brcc	.+12     	; 0x8894 <__fp_rempio2+0x4a>
    8888:	9a 95       	dec	r25
    888a:	bb 0f       	add	r27, r27
    888c:	66 1f       	adc	r22, r22
    888e:	77 1f       	adc	r23, r23
    8890:	88 1f       	adc	r24, r24
    8892:	d2 f7       	brpl	.-12     	; 0x8888 <__fp_rempio2+0x3e>
    8894:	90 48       	sbci	r25, 0x80	; 128
    8896:	96 cf       	rjmp	.-212    	; 0x87c4 <__fp_mpack_finite>

00008898 <__fp_round>:
    8898:	09 2e       	mov	r0, r25
    889a:	03 94       	inc	r0
    889c:	00 0c       	add	r0, r0
    889e:	11 f4       	brne	.+4      	; 0x88a4 <__fp_round+0xc>
    88a0:	88 23       	and	r24, r24
    88a2:	52 f0       	brmi	.+20     	; 0x88b8 <__fp_round+0x20>
    88a4:	bb 0f       	add	r27, r27
    88a6:	40 f4       	brcc	.+16     	; 0x88b8 <__fp_round+0x20>
    88a8:	bf 2b       	or	r27, r31
    88aa:	11 f4       	brne	.+4      	; 0x88b0 <__fp_round+0x18>
    88ac:	60 ff       	sbrs	r22, 0
    88ae:	04 c0       	rjmp	.+8      	; 0x88b8 <__fp_round+0x20>
    88b0:	6f 5f       	subi	r22, 0xFF	; 255
    88b2:	7f 4f       	sbci	r23, 0xFF	; 255
    88b4:	8f 4f       	sbci	r24, 0xFF	; 255
    88b6:	9f 4f       	sbci	r25, 0xFF	; 255
    88b8:	08 95       	ret

000088ba <__fp_sinus>:
    88ba:	ef 93       	push	r30
    88bc:	e0 ff       	sbrs	r30, 0
    88be:	06 c0       	rjmp	.+12     	; 0x88cc <__fp_sinus+0x12>
    88c0:	a2 ea       	ldi	r26, 0xA2	; 162
    88c2:	2a ed       	ldi	r18, 0xDA	; 218
    88c4:	3f e0       	ldi	r19, 0x0F	; 15
    88c6:	49 ec       	ldi	r20, 0xC9	; 201
    88c8:	5f eb       	ldi	r21, 0xBF	; 191
    88ca:	ca dd       	rcall	.-1132   	; 0x8460 <__addsf3x>
    88cc:	e5 df       	rcall	.-54     	; 0x8898 <__fp_round>
    88ce:	0f 90       	pop	r0
    88d0:	03 94       	inc	r0
    88d2:	01 fc       	sbrc	r0, 1
    88d4:	90 58       	subi	r25, 0x80	; 128
    88d6:	e5 e1       	ldi	r30, 0x15	; 21
    88d8:	f2 e0       	ldi	r31, 0x02	; 2
    88da:	d2 c1       	rjmp	.+932    	; 0x8c80 <__fp_powsodd>

000088dc <__fp_split3>:
    88dc:	57 fd       	sbrc	r21, 7
    88de:	90 58       	subi	r25, 0x80	; 128
    88e0:	44 0f       	add	r20, r20
    88e2:	55 1f       	adc	r21, r21
    88e4:	59 f0       	breq	.+22     	; 0x88fc <__fp_splitA+0x10>
    88e6:	5f 3f       	cpi	r21, 0xFF	; 255
    88e8:	71 f0       	breq	.+28     	; 0x8906 <__fp_splitA+0x1a>
    88ea:	47 95       	ror	r20

000088ec <__fp_splitA>:
    88ec:	88 0f       	add	r24, r24
    88ee:	97 fb       	bst	r25, 7
    88f0:	99 1f       	adc	r25, r25
    88f2:	61 f0       	breq	.+24     	; 0x890c <__fp_splitA+0x20>
    88f4:	9f 3f       	cpi	r25, 0xFF	; 255
    88f6:	79 f0       	breq	.+30     	; 0x8916 <__fp_splitA+0x2a>
    88f8:	87 95       	ror	r24
    88fa:	08 95       	ret
    88fc:	12 16       	cp	r1, r18
    88fe:	13 06       	cpc	r1, r19
    8900:	14 06       	cpc	r1, r20
    8902:	55 1f       	adc	r21, r21
    8904:	f2 cf       	rjmp	.-28     	; 0x88ea <__fp_split3+0xe>
    8906:	46 95       	lsr	r20
    8908:	f1 df       	rcall	.-30     	; 0x88ec <__fp_splitA>
    890a:	08 c0       	rjmp	.+16     	; 0x891c <__fp_splitA+0x30>
    890c:	16 16       	cp	r1, r22
    890e:	17 06       	cpc	r1, r23
    8910:	18 06       	cpc	r1, r24
    8912:	99 1f       	adc	r25, r25
    8914:	f1 cf       	rjmp	.-30     	; 0x88f8 <__fp_splitA+0xc>
    8916:	86 95       	lsr	r24
    8918:	71 05       	cpc	r23, r1
    891a:	61 05       	cpc	r22, r1
    891c:	08 94       	sec
    891e:	08 95       	ret

00008920 <__fp_trunc>:
    8920:	e5 df       	rcall	.-54     	; 0x88ec <__fp_splitA>
    8922:	a0 f0       	brcs	.+40     	; 0x894c <__fp_trunc+0x2c>
    8924:	be e7       	ldi	r27, 0x7E	; 126
    8926:	b9 17       	cp	r27, r25
    8928:	88 f4       	brcc	.+34     	; 0x894c <__fp_trunc+0x2c>
    892a:	bb 27       	eor	r27, r27
    892c:	9f 38       	cpi	r25, 0x8F	; 143
    892e:	60 f4       	brcc	.+24     	; 0x8948 <__fp_trunc+0x28>
    8930:	16 16       	cp	r1, r22
    8932:	b1 1d       	adc	r27, r1
    8934:	67 2f       	mov	r22, r23
    8936:	78 2f       	mov	r23, r24
    8938:	88 27       	eor	r24, r24
    893a:	98 5f       	subi	r25, 0xF8	; 248
    893c:	f7 cf       	rjmp	.-18     	; 0x892c <__fp_trunc+0xc>
    893e:	86 95       	lsr	r24
    8940:	77 95       	ror	r23
    8942:	67 95       	ror	r22
    8944:	b1 1d       	adc	r27, r1
    8946:	93 95       	inc	r25
    8948:	96 39       	cpi	r25, 0x96	; 150
    894a:	c8 f3       	brcs	.-14     	; 0x893e <__fp_trunc+0x1e>
    894c:	08 95       	ret

0000894e <__fp_zero>:
    894e:	e8 94       	clt

00008950 <__fp_szero>:
    8950:	bb 27       	eor	r27, r27
    8952:	66 27       	eor	r22, r22
    8954:	77 27       	eor	r23, r23
    8956:	cb 01       	movw	r24, r22
    8958:	97 f9       	bld	r25, 7
    895a:	08 95       	ret

0000895c <__gesf2>:
    895c:	ec de       	rcall	.-552    	; 0x8736 <__fp_cmp>
    895e:	08 f4       	brcc	.+2      	; 0x8962 <__gesf2+0x6>
    8960:	8f ef       	ldi	r24, 0xFF	; 255
    8962:	08 95       	ret
    8964:	63 df       	rcall	.-314    	; 0x882c <__fp_pscA>
    8966:	19 f0       	breq	.+6      	; 0x896e <__gesf2+0x12>
    8968:	68 df       	rcall	.-304    	; 0x883a <__fp_pscB>
    896a:	09 f0       	breq	.+2      	; 0x896e <__gesf2+0x12>
    896c:	37 cf       	rjmp	.-402    	; 0x87dc <__fp_nan>
    896e:	07 cf       	rjmp	.-498    	; 0x877e <__fp_inf>
    8970:	b9 01       	movw	r22, r18
    8972:	ca 01       	movw	r24, r20
    8974:	25 cf       	rjmp	.-438    	; 0x87c0 <__fp_mpack>

00008976 <hypot>:
    8976:	9f 77       	andi	r25, 0x7F	; 127
    8978:	5f 77       	andi	r21, 0x7F	; 127
    897a:	b0 df       	rcall	.-160    	; 0x88dc <__fp_split3>
    897c:	98 f3       	brcs	.-26     	; 0x8964 <__gesf2+0x8>
    897e:	99 23       	and	r25, r25
    8980:	b9 f3       	breq	.-18     	; 0x8970 <__gesf2+0x14>
    8982:	55 23       	and	r21, r21
    8984:	b9 f3       	breq	.-18     	; 0x8974 <__gesf2+0x18>
    8986:	ff 27       	eor	r31, r31
    8988:	95 17       	cp	r25, r21
    898a:	58 f4       	brcc	.+22     	; 0x89a2 <hypot+0x2c>
    898c:	e5 2f       	mov	r30, r21
    898e:	e9 1b       	sub	r30, r25
    8990:	ed 30       	cpi	r30, 0x0D	; 13
    8992:	70 f7       	brcc	.-36     	; 0x8970 <__gesf2+0x14>
    8994:	5e 3b       	cpi	r21, 0xBE	; 190
    8996:	10 f0       	brcs	.+4      	; 0x899c <hypot+0x26>
    8998:	f1 e4       	ldi	r31, 0x41	; 65
    899a:	1c c0       	rjmp	.+56     	; 0x89d4 <hypot+0x5e>
    899c:	90 34       	cpi	r25, 0x40	; 64
    899e:	e0 f4       	brcc	.+56     	; 0x89d8 <hypot+0x62>
    89a0:	0a c0       	rjmp	.+20     	; 0x89b6 <hypot+0x40>
    89a2:	e9 2f       	mov	r30, r25
    89a4:	e5 1b       	sub	r30, r21
    89a6:	ed 30       	cpi	r30, 0x0D	; 13
    89a8:	28 f7       	brcc	.-54     	; 0x8974 <__gesf2+0x18>
    89aa:	9e 3b       	cpi	r25, 0xBE	; 190
    89ac:	10 f0       	brcs	.+4      	; 0x89b2 <hypot+0x3c>
    89ae:	f1 e4       	ldi	r31, 0x41	; 65
    89b0:	11 c0       	rjmp	.+34     	; 0x89d4 <hypot+0x5e>
    89b2:	50 34       	cpi	r21, 0x40	; 64
    89b4:	88 f4       	brcc	.+34     	; 0x89d8 <hypot+0x62>
    89b6:	f9 ea       	ldi	r31, 0xA9	; 169
    89b8:	88 23       	and	r24, r24
    89ba:	2a f0       	brmi	.+10     	; 0x89c6 <hypot+0x50>
    89bc:	9a 95       	dec	r25
    89be:	66 0f       	add	r22, r22
    89c0:	77 1f       	adc	r23, r23
    89c2:	88 1f       	adc	r24, r24
    89c4:	da f7       	brpl	.-10     	; 0x89bc <hypot+0x46>
    89c6:	44 23       	and	r20, r20
    89c8:	2a f0       	brmi	.+10     	; 0x89d4 <hypot+0x5e>
    89ca:	5a 95       	dec	r21
    89cc:	22 0f       	add	r18, r18
    89ce:	33 1f       	adc	r19, r19
    89d0:	44 1f       	adc	r20, r20
    89d2:	da f7       	brpl	.-10     	; 0x89ca <hypot+0x54>
    89d4:	9f 1b       	sub	r25, r31
    89d6:	5f 1b       	sub	r21, r31
    89d8:	ff 93       	push	r31
    89da:	1f 93       	push	r17
    89dc:	0f 93       	push	r16
    89de:	ff 92       	push	r15
    89e0:	ef 92       	push	r14
    89e2:	79 01       	movw	r14, r18
    89e4:	8a 01       	movw	r16, r20
    89e6:	bb 27       	eor	r27, r27
    89e8:	ab 2f       	mov	r26, r27
    89ea:	9b 01       	movw	r18, r22
    89ec:	ac 01       	movw	r20, r24
    89ee:	96 d0       	rcall	.+300    	; 0x8b1c <__mulsf3_pse>
    89f0:	97 01       	movw	r18, r14
    89f2:	a8 01       	movw	r20, r16
    89f4:	bf 93       	push	r27
    89f6:	7b 01       	movw	r14, r22
    89f8:	8c 01       	movw	r16, r24
    89fa:	aa 27       	eor	r26, r26
    89fc:	ba 2f       	mov	r27, r26
    89fe:	b9 01       	movw	r22, r18
    8a00:	ca 01       	movw	r24, r20
    8a02:	8c d0       	rcall	.+280    	; 0x8b1c <__mulsf3_pse>
    8a04:	af 91       	pop	r26
    8a06:	97 01       	movw	r18, r14
    8a08:	a8 01       	movw	r20, r16
    8a0a:	ef 90       	pop	r14
    8a0c:	ff 90       	pop	r15
    8a0e:	0f 91       	pop	r16
    8a10:	1f 91       	pop	r17
    8a12:	26 dd       	rcall	.-1460   	; 0x8460 <__addsf3x>
    8a14:	41 df       	rcall	.-382    	; 0x8898 <__fp_round>
    8a16:	e1 d0       	rcall	.+450    	; 0x8bda <sqrt>
    8a18:	4f 91       	pop	r20
    8a1a:	40 ff       	sbrs	r20, 0
    8a1c:	08 95       	ret
    8a1e:	55 27       	eor	r21, r21
    8a20:	47 fd       	sbrc	r20, 7
    8a22:	50 95       	com	r21
    8a24:	09 c0       	rjmp	.+18     	; 0x8a38 <ldexp>

00008a26 <inverse>:
    8a26:	9b 01       	movw	r18, r22
    8a28:	ac 01       	movw	r20, r24
    8a2a:	60 e0       	ldi	r22, 0x00	; 0
    8a2c:	70 e0       	ldi	r23, 0x00	; 0
    8a2e:	80 e8       	ldi	r24, 0x80	; 128
    8a30:	9f e3       	ldi	r25, 0x3F	; 63
    8a32:	ab cd       	rjmp	.-1194   	; 0x858a <__divsf3>
    8a34:	a4 ce       	rjmp	.-696    	; 0x877e <__fp_inf>
    8a36:	c4 ce       	rjmp	.-632    	; 0x87c0 <__fp_mpack>

00008a38 <ldexp>:
    8a38:	59 df       	rcall	.-334    	; 0x88ec <__fp_splitA>
    8a3a:	e8 f3       	brcs	.-6      	; 0x8a36 <inverse+0x10>
    8a3c:	99 23       	and	r25, r25
    8a3e:	d9 f3       	breq	.-10     	; 0x8a36 <inverse+0x10>
    8a40:	94 0f       	add	r25, r20
    8a42:	51 1d       	adc	r21, r1
    8a44:	bb f3       	brvs	.-18     	; 0x8a34 <inverse+0xe>
    8a46:	91 50       	subi	r25, 0x01	; 1
    8a48:	50 40       	sbci	r21, 0x00	; 0
    8a4a:	94 f0       	brlt	.+36     	; 0x8a70 <ldexp+0x38>
    8a4c:	59 f0       	breq	.+22     	; 0x8a64 <ldexp+0x2c>
    8a4e:	88 23       	and	r24, r24
    8a50:	32 f0       	brmi	.+12     	; 0x8a5e <ldexp+0x26>
    8a52:	66 0f       	add	r22, r22
    8a54:	77 1f       	adc	r23, r23
    8a56:	88 1f       	adc	r24, r24
    8a58:	91 50       	subi	r25, 0x01	; 1
    8a5a:	50 40       	sbci	r21, 0x00	; 0
    8a5c:	c1 f7       	brne	.-16     	; 0x8a4e <ldexp+0x16>
    8a5e:	9e 3f       	cpi	r25, 0xFE	; 254
    8a60:	51 05       	cpc	r21, r1
    8a62:	44 f7       	brge	.-48     	; 0x8a34 <inverse+0xe>
    8a64:	88 0f       	add	r24, r24
    8a66:	91 1d       	adc	r25, r1
    8a68:	96 95       	lsr	r25
    8a6a:	87 95       	ror	r24
    8a6c:	97 f9       	bld	r25, 7
    8a6e:	08 95       	ret
    8a70:	5f 3f       	cpi	r21, 0xFF	; 255
    8a72:	ac f0       	brlt	.+42     	; 0x8a9e <ldexp+0x66>
    8a74:	98 3e       	cpi	r25, 0xE8	; 232
    8a76:	9c f0       	brlt	.+38     	; 0x8a9e <ldexp+0x66>
    8a78:	bb 27       	eor	r27, r27
    8a7a:	86 95       	lsr	r24
    8a7c:	77 95       	ror	r23
    8a7e:	67 95       	ror	r22
    8a80:	b7 95       	ror	r27
    8a82:	08 f4       	brcc	.+2      	; 0x8a86 <ldexp+0x4e>
    8a84:	b1 60       	ori	r27, 0x01	; 1
    8a86:	93 95       	inc	r25
    8a88:	c1 f7       	brne	.-16     	; 0x8a7a <ldexp+0x42>
    8a8a:	bb 0f       	add	r27, r27
    8a8c:	58 f7       	brcc	.-42     	; 0x8a64 <ldexp+0x2c>
    8a8e:	11 f4       	brne	.+4      	; 0x8a94 <ldexp+0x5c>
    8a90:	60 ff       	sbrs	r22, 0
    8a92:	e8 cf       	rjmp	.-48     	; 0x8a64 <ldexp+0x2c>
    8a94:	6f 5f       	subi	r22, 0xFF	; 255
    8a96:	7f 4f       	sbci	r23, 0xFF	; 255
    8a98:	8f 4f       	sbci	r24, 0xFF	; 255
    8a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    8a9c:	e3 cf       	rjmp	.-58     	; 0x8a64 <ldexp+0x2c>
    8a9e:	58 cf       	rjmp	.-336    	; 0x8950 <__fp_szero>

00008aa0 <lround>:
    8aa0:	25 df       	rcall	.-438    	; 0x88ec <__fp_splitA>
    8aa2:	58 f1       	brcs	.+86     	; 0x8afa <lround+0x5a>
    8aa4:	9e 57       	subi	r25, 0x7E	; 126
    8aa6:	58 f1       	brcs	.+86     	; 0x8afe <lround+0x5e>
    8aa8:	98 51       	subi	r25, 0x18	; 24
    8aaa:	a0 f0       	brcs	.+40     	; 0x8ad4 <lround+0x34>
    8aac:	e9 f0       	breq	.+58     	; 0x8ae8 <lround+0x48>
    8aae:	98 30       	cpi	r25, 0x08	; 8
    8ab0:	20 f5       	brcc	.+72     	; 0x8afa <lround+0x5a>
    8ab2:	09 2e       	mov	r0, r25
    8ab4:	99 27       	eor	r25, r25
    8ab6:	66 0f       	add	r22, r22
    8ab8:	77 1f       	adc	r23, r23
    8aba:	88 1f       	adc	r24, r24
    8abc:	99 1f       	adc	r25, r25
    8abe:	0a 94       	dec	r0
    8ac0:	d1 f7       	brne	.-12     	; 0x8ab6 <lround+0x16>
    8ac2:	12 c0       	rjmp	.+36     	; 0x8ae8 <lround+0x48>
    8ac4:	06 2e       	mov	r0, r22
    8ac6:	67 2f       	mov	r22, r23
    8ac8:	78 2f       	mov	r23, r24
    8aca:	88 27       	eor	r24, r24
    8acc:	98 5f       	subi	r25, 0xF8	; 248
    8ace:	11 f4       	brne	.+4      	; 0x8ad4 <lround+0x34>
    8ad0:	00 0c       	add	r0, r0
    8ad2:	07 c0       	rjmp	.+14     	; 0x8ae2 <lround+0x42>
    8ad4:	99 3f       	cpi	r25, 0xF9	; 249
    8ad6:	b4 f3       	brlt	.-20     	; 0x8ac4 <lround+0x24>
    8ad8:	86 95       	lsr	r24
    8ada:	77 95       	ror	r23
    8adc:	67 95       	ror	r22
    8ade:	93 95       	inc	r25
    8ae0:	d9 f7       	brne	.-10     	; 0x8ad8 <lround+0x38>
    8ae2:	61 1d       	adc	r22, r1
    8ae4:	71 1d       	adc	r23, r1
    8ae6:	81 1d       	adc	r24, r1
    8ae8:	3e f4       	brtc	.+14     	; 0x8af8 <lround+0x58>
    8aea:	90 95       	com	r25
    8aec:	80 95       	com	r24
    8aee:	70 95       	com	r23
    8af0:	61 95       	neg	r22
    8af2:	7f 4f       	sbci	r23, 0xFF	; 255
    8af4:	8f 4f       	sbci	r24, 0xFF	; 255
    8af6:	9f 4f       	sbci	r25, 0xFF	; 255
    8af8:	08 95       	ret
    8afa:	68 94       	set
    8afc:	29 cf       	rjmp	.-430    	; 0x8950 <__fp_szero>
    8afe:	27 cf       	rjmp	.-434    	; 0x894e <__fp_zero>

00008b00 <__mulsf3>:
    8b00:	0b d0       	rcall	.+22     	; 0x8b18 <__mulsf3x>
    8b02:	ca ce       	rjmp	.-620    	; 0x8898 <__fp_round>
    8b04:	93 de       	rcall	.-730    	; 0x882c <__fp_pscA>
    8b06:	28 f0       	brcs	.+10     	; 0x8b12 <__mulsf3+0x12>
    8b08:	98 de       	rcall	.-720    	; 0x883a <__fp_pscB>
    8b0a:	18 f0       	brcs	.+6      	; 0x8b12 <__mulsf3+0x12>
    8b0c:	95 23       	and	r25, r21
    8b0e:	09 f0       	breq	.+2      	; 0x8b12 <__mulsf3+0x12>
    8b10:	36 ce       	rjmp	.-916    	; 0x877e <__fp_inf>
    8b12:	64 ce       	rjmp	.-824    	; 0x87dc <__fp_nan>
    8b14:	11 24       	eor	r1, r1
    8b16:	1c cf       	rjmp	.-456    	; 0x8950 <__fp_szero>

00008b18 <__mulsf3x>:
    8b18:	e1 de       	rcall	.-574    	; 0x88dc <__fp_split3>
    8b1a:	a0 f3       	brcs	.-24     	; 0x8b04 <__mulsf3+0x4>

00008b1c <__mulsf3_pse>:
    8b1c:	95 9f       	mul	r25, r21
    8b1e:	d1 f3       	breq	.-12     	; 0x8b14 <__mulsf3+0x14>
    8b20:	95 0f       	add	r25, r21
    8b22:	50 e0       	ldi	r21, 0x00	; 0
    8b24:	55 1f       	adc	r21, r21
    8b26:	62 9f       	mul	r22, r18
    8b28:	f0 01       	movw	r30, r0
    8b2a:	72 9f       	mul	r23, r18
    8b2c:	bb 27       	eor	r27, r27
    8b2e:	f0 0d       	add	r31, r0
    8b30:	b1 1d       	adc	r27, r1
    8b32:	63 9f       	mul	r22, r19
    8b34:	aa 27       	eor	r26, r26
    8b36:	f0 0d       	add	r31, r0
    8b38:	b1 1d       	adc	r27, r1
    8b3a:	aa 1f       	adc	r26, r26
    8b3c:	64 9f       	mul	r22, r20
    8b3e:	66 27       	eor	r22, r22
    8b40:	b0 0d       	add	r27, r0
    8b42:	a1 1d       	adc	r26, r1
    8b44:	66 1f       	adc	r22, r22
    8b46:	82 9f       	mul	r24, r18
    8b48:	22 27       	eor	r18, r18
    8b4a:	b0 0d       	add	r27, r0
    8b4c:	a1 1d       	adc	r26, r1
    8b4e:	62 1f       	adc	r22, r18
    8b50:	73 9f       	mul	r23, r19
    8b52:	b0 0d       	add	r27, r0
    8b54:	a1 1d       	adc	r26, r1
    8b56:	62 1f       	adc	r22, r18
    8b58:	83 9f       	mul	r24, r19
    8b5a:	a0 0d       	add	r26, r0
    8b5c:	61 1d       	adc	r22, r1
    8b5e:	22 1f       	adc	r18, r18
    8b60:	74 9f       	mul	r23, r20
    8b62:	33 27       	eor	r19, r19
    8b64:	a0 0d       	add	r26, r0
    8b66:	61 1d       	adc	r22, r1
    8b68:	23 1f       	adc	r18, r19
    8b6a:	84 9f       	mul	r24, r20
    8b6c:	60 0d       	add	r22, r0
    8b6e:	21 1d       	adc	r18, r1
    8b70:	82 2f       	mov	r24, r18
    8b72:	76 2f       	mov	r23, r22
    8b74:	6a 2f       	mov	r22, r26
    8b76:	11 24       	eor	r1, r1
    8b78:	9f 57       	subi	r25, 0x7F	; 127
    8b7a:	50 40       	sbci	r21, 0x00	; 0
    8b7c:	8a f0       	brmi	.+34     	; 0x8ba0 <__mulsf3_pse+0x84>
    8b7e:	e1 f0       	breq	.+56     	; 0x8bb8 <__mulsf3_pse+0x9c>
    8b80:	88 23       	and	r24, r24
    8b82:	4a f0       	brmi	.+18     	; 0x8b96 <__mulsf3_pse+0x7a>
    8b84:	ee 0f       	add	r30, r30
    8b86:	ff 1f       	adc	r31, r31
    8b88:	bb 1f       	adc	r27, r27
    8b8a:	66 1f       	adc	r22, r22
    8b8c:	77 1f       	adc	r23, r23
    8b8e:	88 1f       	adc	r24, r24
    8b90:	91 50       	subi	r25, 0x01	; 1
    8b92:	50 40       	sbci	r21, 0x00	; 0
    8b94:	a9 f7       	brne	.-22     	; 0x8b80 <__mulsf3_pse+0x64>
    8b96:	9e 3f       	cpi	r25, 0xFE	; 254
    8b98:	51 05       	cpc	r21, r1
    8b9a:	70 f0       	brcs	.+28     	; 0x8bb8 <__mulsf3_pse+0x9c>
    8b9c:	f0 cd       	rjmp	.-1056   	; 0x877e <__fp_inf>
    8b9e:	d8 ce       	rjmp	.-592    	; 0x8950 <__fp_szero>
    8ba0:	5f 3f       	cpi	r21, 0xFF	; 255
    8ba2:	ec f3       	brlt	.-6      	; 0x8b9e <__mulsf3_pse+0x82>
    8ba4:	98 3e       	cpi	r25, 0xE8	; 232
    8ba6:	dc f3       	brlt	.-10     	; 0x8b9e <__mulsf3_pse+0x82>
    8ba8:	86 95       	lsr	r24
    8baa:	77 95       	ror	r23
    8bac:	67 95       	ror	r22
    8bae:	b7 95       	ror	r27
    8bb0:	f7 95       	ror	r31
    8bb2:	e7 95       	ror	r30
    8bb4:	9f 5f       	subi	r25, 0xFF	; 255
    8bb6:	c1 f7       	brne	.-16     	; 0x8ba8 <__mulsf3_pse+0x8c>
    8bb8:	fe 2b       	or	r31, r30
    8bba:	88 0f       	add	r24, r24
    8bbc:	91 1d       	adc	r25, r1
    8bbe:	96 95       	lsr	r25
    8bc0:	87 95       	ror	r24
    8bc2:	97 f9       	bld	r25, 7
    8bc4:	08 95       	ret

00008bc6 <sin>:
    8bc6:	9f 93       	push	r25
    8bc8:	40 de       	rcall	.-896    	; 0x884a <__fp_rempio2>
    8bca:	0f 90       	pop	r0
    8bcc:	07 fc       	sbrc	r0, 7
    8bce:	ee 5f       	subi	r30, 0xFE	; 254
    8bd0:	74 ce       	rjmp	.-792    	; 0x88ba <__fp_sinus>
    8bd2:	11 f4       	brne	.+4      	; 0x8bd8 <sin+0x12>
    8bd4:	0e f4       	brtc	.+2      	; 0x8bd8 <sin+0x12>
    8bd6:	02 ce       	rjmp	.-1020   	; 0x87dc <__fp_nan>
    8bd8:	f3 cd       	rjmp	.-1050   	; 0x87c0 <__fp_mpack>

00008bda <sqrt>:
    8bda:	88 de       	rcall	.-752    	; 0x88ec <__fp_splitA>
    8bdc:	d0 f3       	brcs	.-12     	; 0x8bd2 <sin+0xc>
    8bde:	99 23       	and	r25, r25
    8be0:	d9 f3       	breq	.-10     	; 0x8bd8 <sin+0x12>
    8be2:	ce f3       	brts	.-14     	; 0x8bd6 <sin+0x10>
    8be4:	9f 57       	subi	r25, 0x7F	; 127
    8be6:	55 0b       	sbc	r21, r21
    8be8:	87 ff       	sbrs	r24, 7
    8bea:	43 d0       	rcall	.+134    	; 0x8c72 <__fp_norm2>
    8bec:	00 24       	eor	r0, r0
    8bee:	a0 e6       	ldi	r26, 0x60	; 96
    8bf0:	40 ea       	ldi	r20, 0xA0	; 160
    8bf2:	90 01       	movw	r18, r0
    8bf4:	80 58       	subi	r24, 0x80	; 128
    8bf6:	56 95       	lsr	r21
    8bf8:	97 95       	ror	r25
    8bfa:	28 f4       	brcc	.+10     	; 0x8c06 <sqrt+0x2c>
    8bfc:	80 5c       	subi	r24, 0xC0	; 192
    8bfe:	66 0f       	add	r22, r22
    8c00:	77 1f       	adc	r23, r23
    8c02:	88 1f       	adc	r24, r24
    8c04:	20 f0       	brcs	.+8      	; 0x8c0e <sqrt+0x34>
    8c06:	26 17       	cp	r18, r22
    8c08:	37 07       	cpc	r19, r23
    8c0a:	48 07       	cpc	r20, r24
    8c0c:	30 f4       	brcc	.+12     	; 0x8c1a <sqrt+0x40>
    8c0e:	62 1b       	sub	r22, r18
    8c10:	73 0b       	sbc	r23, r19
    8c12:	84 0b       	sbc	r24, r20
    8c14:	20 29       	or	r18, r0
    8c16:	31 29       	or	r19, r1
    8c18:	4a 2b       	or	r20, r26
    8c1a:	a6 95       	lsr	r26
    8c1c:	17 94       	ror	r1
    8c1e:	07 94       	ror	r0
    8c20:	20 25       	eor	r18, r0
    8c22:	31 25       	eor	r19, r1
    8c24:	4a 27       	eor	r20, r26
    8c26:	58 f7       	brcc	.-42     	; 0x8bfe <sqrt+0x24>
    8c28:	66 0f       	add	r22, r22
    8c2a:	77 1f       	adc	r23, r23
    8c2c:	88 1f       	adc	r24, r24
    8c2e:	20 f0       	brcs	.+8      	; 0x8c38 <sqrt+0x5e>
    8c30:	26 17       	cp	r18, r22
    8c32:	37 07       	cpc	r19, r23
    8c34:	48 07       	cpc	r20, r24
    8c36:	30 f4       	brcc	.+12     	; 0x8c44 <sqrt+0x6a>
    8c38:	62 0b       	sbc	r22, r18
    8c3a:	73 0b       	sbc	r23, r19
    8c3c:	84 0b       	sbc	r24, r20
    8c3e:	20 0d       	add	r18, r0
    8c40:	31 1d       	adc	r19, r1
    8c42:	41 1d       	adc	r20, r1
    8c44:	a0 95       	com	r26
    8c46:	81 f7       	brne	.-32     	; 0x8c28 <sqrt+0x4e>
    8c48:	b9 01       	movw	r22, r18
    8c4a:	84 2f       	mov	r24, r20
    8c4c:	91 58       	subi	r25, 0x81	; 129
    8c4e:	88 0f       	add	r24, r24
    8c50:	96 95       	lsr	r25
    8c52:	87 95       	ror	r24
    8c54:	08 95       	ret

00008c56 <square>:
    8c56:	9b 01       	movw	r18, r22
    8c58:	ac 01       	movw	r20, r24
    8c5a:	52 cf       	rjmp	.-348    	; 0x8b00 <__mulsf3>

00008c5c <trunc>:
    8c5c:	61 de       	rcall	.-830    	; 0x8920 <__fp_trunc>
    8c5e:	20 f0       	brcs	.+8      	; 0x8c68 <trunc+0xc>
    8c60:	9f 37       	cpi	r25, 0x7F	; 127
    8c62:	08 f4       	brcc	.+2      	; 0x8c66 <trunc+0xa>
    8c64:	75 ce       	rjmp	.-790    	; 0x8950 <__fp_szero>
    8c66:	91 cd       	rjmp	.-1246   	; 0x878a <__fp_mintl>
    8c68:	ab cd       	rjmp	.-1194   	; 0x87c0 <__fp_mpack>

00008c6a <__unordsf2>:
    8c6a:	65 dd       	rcall	.-1334   	; 0x8736 <__fp_cmp>
    8c6c:	88 0b       	sbc	r24, r24
    8c6e:	99 0b       	sbc	r25, r25
    8c70:	08 95       	ret

00008c72 <__fp_norm2>:
    8c72:	91 50       	subi	r25, 0x01	; 1
    8c74:	50 40       	sbci	r21, 0x00	; 0
    8c76:	66 0f       	add	r22, r22
    8c78:	77 1f       	adc	r23, r23
    8c7a:	88 1f       	adc	r24, r24
    8c7c:	d2 f7       	brpl	.-12     	; 0x8c72 <__fp_norm2>
    8c7e:	08 95       	ret

00008c80 <__fp_powsodd>:
    8c80:	9f 93       	push	r25
    8c82:	8f 93       	push	r24
    8c84:	7f 93       	push	r23
    8c86:	6f 93       	push	r22
    8c88:	ff 93       	push	r31
    8c8a:	ef 93       	push	r30
    8c8c:	9b 01       	movw	r18, r22
    8c8e:	ac 01       	movw	r20, r24
    8c90:	37 df       	rcall	.-402    	; 0x8b00 <__mulsf3>
    8c92:	ef 91       	pop	r30
    8c94:	ff 91       	pop	r31
    8c96:	a5 dd       	rcall	.-1206   	; 0x87e2 <__fp_powser>
    8c98:	2f 91       	pop	r18
    8c9a:	3f 91       	pop	r19
    8c9c:	4f 91       	pop	r20
    8c9e:	5f 91       	pop	r21
    8ca0:	2f cf       	rjmp	.-418    	; 0x8b00 <__mulsf3>

00008ca2 <__mulsi3>:
    8ca2:	62 9f       	mul	r22, r18
    8ca4:	d0 01       	movw	r26, r0
    8ca6:	73 9f       	mul	r23, r19
    8ca8:	f0 01       	movw	r30, r0
    8caa:	82 9f       	mul	r24, r18
    8cac:	e0 0d       	add	r30, r0
    8cae:	f1 1d       	adc	r31, r1
    8cb0:	64 9f       	mul	r22, r20
    8cb2:	e0 0d       	add	r30, r0
    8cb4:	f1 1d       	adc	r31, r1
    8cb6:	92 9f       	mul	r25, r18
    8cb8:	f0 0d       	add	r31, r0
    8cba:	83 9f       	mul	r24, r19
    8cbc:	f0 0d       	add	r31, r0
    8cbe:	74 9f       	mul	r23, r20
    8cc0:	f0 0d       	add	r31, r0
    8cc2:	65 9f       	mul	r22, r21
    8cc4:	f0 0d       	add	r31, r0
    8cc6:	99 27       	eor	r25, r25
    8cc8:	72 9f       	mul	r23, r18
    8cca:	b0 0d       	add	r27, r0
    8ccc:	e1 1d       	adc	r30, r1
    8cce:	f9 1f       	adc	r31, r25
    8cd0:	63 9f       	mul	r22, r19
    8cd2:	b0 0d       	add	r27, r0
    8cd4:	e1 1d       	adc	r30, r1
    8cd6:	f9 1f       	adc	r31, r25
    8cd8:	bd 01       	movw	r22, r26
    8cda:	cf 01       	movw	r24, r30
    8cdc:	11 24       	eor	r1, r1
    8cde:	08 95       	ret

00008ce0 <__udivmodsi4>:
    8ce0:	a1 e2       	ldi	r26, 0x21	; 33
    8ce2:	1a 2e       	mov	r1, r26
    8ce4:	aa 1b       	sub	r26, r26
    8ce6:	bb 1b       	sub	r27, r27
    8ce8:	fd 01       	movw	r30, r26
    8cea:	0d c0       	rjmp	.+26     	; 0x8d06 <__udivmodsi4_ep>

00008cec <__udivmodsi4_loop>:
    8cec:	aa 1f       	adc	r26, r26
    8cee:	bb 1f       	adc	r27, r27
    8cf0:	ee 1f       	adc	r30, r30
    8cf2:	ff 1f       	adc	r31, r31
    8cf4:	a2 17       	cp	r26, r18
    8cf6:	b3 07       	cpc	r27, r19
    8cf8:	e4 07       	cpc	r30, r20
    8cfa:	f5 07       	cpc	r31, r21
    8cfc:	20 f0       	brcs	.+8      	; 0x8d06 <__udivmodsi4_ep>
    8cfe:	a2 1b       	sub	r26, r18
    8d00:	b3 0b       	sbc	r27, r19
    8d02:	e4 0b       	sbc	r30, r20
    8d04:	f5 0b       	sbc	r31, r21

00008d06 <__udivmodsi4_ep>:
    8d06:	66 1f       	adc	r22, r22
    8d08:	77 1f       	adc	r23, r23
    8d0a:	88 1f       	adc	r24, r24
    8d0c:	99 1f       	adc	r25, r25
    8d0e:	1a 94       	dec	r1
    8d10:	69 f7       	brne	.-38     	; 0x8cec <__udivmodsi4_loop>
    8d12:	60 95       	com	r22
    8d14:	70 95       	com	r23
    8d16:	80 95       	com	r24
    8d18:	90 95       	com	r25
    8d1a:	9b 01       	movw	r18, r22
    8d1c:	ac 01       	movw	r20, r24
    8d1e:	bd 01       	movw	r22, r26
    8d20:	cf 01       	movw	r24, r30
    8d22:	08 95       	ret

00008d24 <__prologue_saves__>:
    8d24:	2f 92       	push	r2
    8d26:	3f 92       	push	r3
    8d28:	4f 92       	push	r4
    8d2a:	5f 92       	push	r5
    8d2c:	6f 92       	push	r6
    8d2e:	7f 92       	push	r7
    8d30:	8f 92       	push	r8
    8d32:	9f 92       	push	r9
    8d34:	af 92       	push	r10
    8d36:	bf 92       	push	r11
    8d38:	cf 92       	push	r12
    8d3a:	df 92       	push	r13
    8d3c:	ef 92       	push	r14
    8d3e:	ff 92       	push	r15
    8d40:	0f 93       	push	r16
    8d42:	1f 93       	push	r17
    8d44:	cf 93       	push	r28
    8d46:	df 93       	push	r29
    8d48:	cd b7       	in	r28, 0x3d	; 61
    8d4a:	de b7       	in	r29, 0x3e	; 62
    8d4c:	ca 1b       	sub	r28, r26
    8d4e:	db 0b       	sbc	r29, r27
    8d50:	0f b6       	in	r0, 0x3f	; 63
    8d52:	f8 94       	cli
    8d54:	de bf       	out	0x3e, r29	; 62
    8d56:	0f be       	out	0x3f, r0	; 63
    8d58:	cd bf       	out	0x3d, r28	; 61
    8d5a:	19 94       	eijmp

00008d5c <__epilogue_restores__>:
    8d5c:	2a 88       	ldd	r2, Y+18	; 0x12
    8d5e:	39 88       	ldd	r3, Y+17	; 0x11
    8d60:	48 88       	ldd	r4, Y+16	; 0x10
    8d62:	5f 84       	ldd	r5, Y+15	; 0x0f
    8d64:	6e 84       	ldd	r6, Y+14	; 0x0e
    8d66:	7d 84       	ldd	r7, Y+13	; 0x0d
    8d68:	8c 84       	ldd	r8, Y+12	; 0x0c
    8d6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    8d6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    8d6e:	b9 84       	ldd	r11, Y+9	; 0x09
    8d70:	c8 84       	ldd	r12, Y+8	; 0x08
    8d72:	df 80       	ldd	r13, Y+7	; 0x07
    8d74:	ee 80       	ldd	r14, Y+6	; 0x06
    8d76:	fd 80       	ldd	r15, Y+5	; 0x05
    8d78:	0c 81       	ldd	r16, Y+4	; 0x04
    8d7a:	1b 81       	ldd	r17, Y+3	; 0x03
    8d7c:	aa 81       	ldd	r26, Y+2	; 0x02
    8d7e:	b9 81       	ldd	r27, Y+1	; 0x01
    8d80:	ce 0f       	add	r28, r30
    8d82:	d1 1d       	adc	r29, r1
    8d84:	0f b6       	in	r0, 0x3f	; 63
    8d86:	f8 94       	cli
    8d88:	de bf       	out	0x3e, r29	; 62
    8d8a:	0f be       	out	0x3f, r0	; 63
    8d8c:	cd bf       	out	0x3d, r28	; 61
    8d8e:	ed 01       	movw	r28, r26
    8d90:	08 95       	ret

00008d92 <strtod>:
    8d92:	8f 92       	push	r8
    8d94:	9f 92       	push	r9
    8d96:	af 92       	push	r10
    8d98:	bf 92       	push	r11
    8d9a:	cf 92       	push	r12
    8d9c:	df 92       	push	r13
    8d9e:	ef 92       	push	r14
    8da0:	ff 92       	push	r15
    8da2:	0f 93       	push	r16
    8da4:	1f 93       	push	r17
    8da6:	cf 93       	push	r28
    8da8:	df 93       	push	r29
    8daa:	ec 01       	movw	r28, r24
    8dac:	5b 01       	movw	r10, r22
    8dae:	61 15       	cp	r22, r1
    8db0:	71 05       	cpc	r23, r1
    8db2:	19 f0       	breq	.+6      	; 0x8dba <strtod+0x28>
    8db4:	fb 01       	movw	r30, r22
    8db6:	80 83       	st	Z, r24
    8db8:	91 83       	std	Z+1, r25	; 0x01
    8dba:	f9 90       	ld	r15, Y+
    8dbc:	8f 2d       	mov	r24, r15
    8dbe:	90 e0       	ldi	r25, 0x00	; 0
    8dc0:	0e 94 2d 49 	call	0x925a	; 0x925a <isspace>
    8dc4:	89 2b       	or	r24, r25
    8dc6:	c9 f7       	brne	.-14     	; 0x8dba <strtod+0x28>
    8dc8:	fd e2       	ldi	r31, 0x2D	; 45
    8dca:	ff 16       	cp	r15, r31
    8dcc:	21 f4       	brne	.+8      	; 0x8dd6 <strtod+0x44>
    8dce:	f9 90       	ld	r15, Y+
    8dd0:	ee 24       	eor	r14, r14
    8dd2:	e3 94       	inc	r14
    8dd4:	05 c0       	rjmp	.+10     	; 0x8de0 <strtod+0x4e>
    8dd6:	2b e2       	ldi	r18, 0x2B	; 43
    8dd8:	f2 16       	cp	r15, r18
    8dda:	09 f4       	brne	.+2      	; 0x8dde <strtod+0x4c>
    8ddc:	f9 90       	ld	r15, Y+
    8dde:	ee 24       	eor	r14, r14
    8de0:	8e 01       	movw	r16, r28
    8de2:	01 50       	subi	r16, 0x01	; 1
    8de4:	10 40       	sbci	r17, 0x00	; 0
    8de6:	c8 01       	movw	r24, r16
    8de8:	66 e0       	ldi	r22, 0x06	; 6
    8dea:	7e e1       	ldi	r23, 0x1E	; 30
    8dec:	43 e0       	ldi	r20, 0x03	; 3
    8dee:	50 e0       	ldi	r21, 0x00	; 0
    8df0:	0e 94 35 49 	call	0x926a	; 0x926a <strncasecmp_P>
    8df4:	89 2b       	or	r24, r25
    8df6:	01 f5       	brne	.+64     	; 0x8e38 <strtod+0xa6>
    8df8:	8e 01       	movw	r16, r28
    8dfa:	0e 5f       	subi	r16, 0xFE	; 254
    8dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    8dfe:	c8 01       	movw	r24, r16
    8e00:	69 e0       	ldi	r22, 0x09	; 9
    8e02:	7e e1       	ldi	r23, 0x1E	; 30
    8e04:	45 e0       	ldi	r20, 0x05	; 5
    8e06:	50 e0       	ldi	r21, 0x00	; 0
    8e08:	0e 94 35 49 	call	0x926a	; 0x926a <strncasecmp_P>
    8e0c:	89 2b       	or	r24, r25
    8e0e:	19 f4       	brne	.+6      	; 0x8e16 <strtod+0x84>
    8e10:	8e 01       	movw	r16, r28
    8e12:	09 5f       	subi	r16, 0xF9	; 249
    8e14:	1f 4f       	sbci	r17, 0xFF	; 255
    8e16:	a1 14       	cp	r10, r1
    8e18:	b1 04       	cpc	r11, r1
    8e1a:	19 f0       	breq	.+6      	; 0x8e22 <strtod+0x90>
    8e1c:	f5 01       	movw	r30, r10
    8e1e:	00 83       	st	Z, r16
    8e20:	11 83       	std	Z+1, r17	; 0x01
    8e22:	e0 fc       	sbrc	r14, 0
    8e24:	04 c0       	rjmp	.+8      	; 0x8e2e <strtod+0x9c>
    8e26:	70 e0       	ldi	r23, 0x00	; 0
    8e28:	90 e0       	ldi	r25, 0x00	; 0
    8e2a:	80 e8       	ldi	r24, 0x80	; 128
    8e2c:	14 c0       	rjmp	.+40     	; 0x8e56 <strtod+0xc4>
    8e2e:	70 e0       	ldi	r23, 0x00	; 0
    8e30:	90 e0       	ldi	r25, 0x00	; 0
    8e32:	80 e8       	ldi	r24, 0x80	; 128
    8e34:	6f ef       	ldi	r22, 0xFF	; 255
    8e36:	08 c1       	rjmp	.+528    	; 0x9048 <strtod+0x2b6>
    8e38:	c8 01       	movw	r24, r16
    8e3a:	6e e0       	ldi	r22, 0x0E	; 14
    8e3c:	7e e1       	ldi	r23, 0x1E	; 30
    8e3e:	43 e0       	ldi	r20, 0x03	; 3
    8e40:	50 e0       	ldi	r21, 0x00	; 0
    8e42:	0e 94 35 49 	call	0x926a	; 0x926a <strncasecmp_P>
    8e46:	89 2b       	or	r24, r25
    8e48:	69 f4       	brne	.+26     	; 0x8e64 <strtod+0xd2>
    8e4a:	a1 14       	cp	r10, r1
    8e4c:	b1 04       	cpc	r11, r1
    8e4e:	29 f4       	brne	.+10     	; 0x8e5a <strtod+0xc8>
    8e50:	70 e0       	ldi	r23, 0x00	; 0
    8e52:	90 e0       	ldi	r25, 0x00	; 0
    8e54:	80 ec       	ldi	r24, 0xC0	; 192
    8e56:	6f e7       	ldi	r22, 0x7F	; 127
    8e58:	f7 c0       	rjmp	.+494    	; 0x9048 <strtod+0x2b6>
    8e5a:	22 96       	adiw	r28, 0x02	; 2
    8e5c:	f5 01       	movw	r30, r10
    8e5e:	c0 83       	st	Z, r28
    8e60:	d1 83       	std	Z+1, r29	; 0x01
    8e62:	f6 cf       	rjmp	.-20     	; 0x8e50 <strtod+0xbe>
    8e64:	88 24       	eor	r8, r8
    8e66:	99 24       	eor	r9, r9
    8e68:	40 e0       	ldi	r20, 0x00	; 0
    8e6a:	50 e0       	ldi	r21, 0x00	; 0
    8e6c:	60 e0       	ldi	r22, 0x00	; 0
    8e6e:	70 e0       	ldi	r23, 0x00	; 0
    8e70:	ef 2d       	mov	r30, r15
    8e72:	e0 53       	subi	r30, 0x30	; 48
    8e74:	ea 30       	cpi	r30, 0x0A	; 10
    8e76:	a0 f5       	brcc	.+104    	; 0x8ee0 <strtod+0x14e>
    8e78:	f2 e0       	ldi	r31, 0x02	; 2
    8e7a:	ef 2a       	or	r14, r31
    8e7c:	8e 2d       	mov	r24, r14
    8e7e:	90 e0       	ldi	r25, 0x00	; 0
    8e80:	9c 01       	movw	r18, r24
    8e82:	28 70       	andi	r18, 0x08	; 8
    8e84:	30 70       	andi	r19, 0x00	; 0
    8e86:	e2 fe       	sbrs	r14, 2
    8e88:	06 c0       	rjmp	.+12     	; 0x8e96 <strtod+0x104>
    8e8a:	23 2b       	or	r18, r19
    8e8c:	79 f5       	brne	.+94     	; 0x8eec <strtod+0x15a>
    8e8e:	08 94       	sec
    8e90:	81 1c       	adc	r8, r1
    8e92:	91 1c       	adc	r9, r1
    8e94:	2b c0       	rjmp	.+86     	; 0x8eec <strtod+0x15a>
    8e96:	23 2b       	or	r18, r19
    8e98:	19 f0       	breq	.+6      	; 0x8ea0 <strtod+0x10e>
    8e9a:	08 94       	sec
    8e9c:	81 08       	sbc	r8, r1
    8e9e:	91 08       	sbc	r9, r1
    8ea0:	db 01       	movw	r26, r22
    8ea2:	ca 01       	movw	r24, r20
    8ea4:	12 e0       	ldi	r17, 0x02	; 2
    8ea6:	88 0f       	add	r24, r24
    8ea8:	99 1f       	adc	r25, r25
    8eaa:	aa 1f       	adc	r26, r26
    8eac:	bb 1f       	adc	r27, r27
    8eae:	1a 95       	dec	r17
    8eb0:	d1 f7       	brne	.-12     	; 0x8ea6 <strtod+0x114>
    8eb2:	48 0f       	add	r20, r24
    8eb4:	59 1f       	adc	r21, r25
    8eb6:	6a 1f       	adc	r22, r26
    8eb8:	7b 1f       	adc	r23, r27
    8eba:	44 0f       	add	r20, r20
    8ebc:	55 1f       	adc	r21, r21
    8ebe:	66 1f       	adc	r22, r22
    8ec0:	77 1f       	adc	r23, r23
    8ec2:	4e 0f       	add	r20, r30
    8ec4:	51 1d       	adc	r21, r1
    8ec6:	61 1d       	adc	r22, r1
    8ec8:	71 1d       	adc	r23, r1
    8eca:	48 39       	cpi	r20, 0x98	; 152
    8ecc:	29 e9       	ldi	r18, 0x99	; 153
    8ece:	52 07       	cpc	r21, r18
    8ed0:	29 e9       	ldi	r18, 0x99	; 153
    8ed2:	62 07       	cpc	r22, r18
    8ed4:	29 e1       	ldi	r18, 0x19	; 25
    8ed6:	72 07       	cpc	r23, r18
    8ed8:	48 f0       	brcs	.+18     	; 0x8eec <strtod+0x15a>
    8eda:	84 e0       	ldi	r24, 0x04	; 4
    8edc:	e8 2a       	or	r14, r24
    8ede:	06 c0       	rjmp	.+12     	; 0x8eec <strtod+0x15a>
    8ee0:	ee 3f       	cpi	r30, 0xFE	; 254
    8ee2:	31 f4       	brne	.+12     	; 0x8ef0 <strtod+0x15e>
    8ee4:	e3 fc       	sbrc	r14, 3
    8ee6:	39 c0       	rjmp	.+114    	; 0x8f5a <strtod+0x1c8>
    8ee8:	98 e0       	ldi	r25, 0x08	; 8
    8eea:	e9 2a       	or	r14, r25
    8eec:	f9 90       	ld	r15, Y+
    8eee:	c0 cf       	rjmp	.-128    	; 0x8e70 <strtod+0xde>
    8ef0:	e5 33       	cpi	r30, 0x35	; 53
    8ef2:	11 f0       	breq	.+4      	; 0x8ef8 <strtod+0x166>
    8ef4:	e5 31       	cpi	r30, 0x15	; 21
    8ef6:	89 f5       	brne	.+98     	; 0x8f5a <strtod+0x1c8>
    8ef8:	29 91       	ld	r18, Y+
    8efa:	2d 32       	cpi	r18, 0x2D	; 45
    8efc:	19 f4       	brne	.+6      	; 0x8f04 <strtod+0x172>
    8efe:	e0 e1       	ldi	r30, 0x10	; 16
    8f00:	ee 2a       	or	r14, r30
    8f02:	05 c0       	rjmp	.+10     	; 0x8f0e <strtod+0x17c>
    8f04:	2b 32       	cpi	r18, 0x2B	; 43
    8f06:	19 f0       	breq	.+6      	; 0x8f0e <strtod+0x17c>
    8f08:	81 e0       	ldi	r24, 0x01	; 1
    8f0a:	90 e0       	ldi	r25, 0x00	; 0
    8f0c:	03 c0       	rjmp	.+6      	; 0x8f14 <strtod+0x182>
    8f0e:	29 91       	ld	r18, Y+
    8f10:	82 e0       	ldi	r24, 0x02	; 2
    8f12:	90 e0       	ldi	r25, 0x00	; 0
    8f14:	e2 2f       	mov	r30, r18
    8f16:	e0 53       	subi	r30, 0x30	; 48
    8f18:	ea 30       	cpi	r30, 0x0A	; 10
    8f1a:	18 f0       	brcs	.+6      	; 0x8f22 <strtod+0x190>
    8f1c:	c8 1b       	sub	r28, r24
    8f1e:	d9 0b       	sbc	r29, r25
    8f20:	1c c0       	rjmp	.+56     	; 0x8f5a <strtod+0x1c8>
    8f22:	20 e0       	ldi	r18, 0x00	; 0
    8f24:	30 e0       	ldi	r19, 0x00	; 0
    8f26:	fc e0       	ldi	r31, 0x0C	; 12
    8f28:	20 38       	cpi	r18, 0x80	; 128
    8f2a:	3f 07       	cpc	r19, r31
    8f2c:	5c f4       	brge	.+22     	; 0x8f44 <strtod+0x1b2>
    8f2e:	c9 01       	movw	r24, r18
    8f30:	88 0f       	add	r24, r24
    8f32:	99 1f       	adc	r25, r25
    8f34:	88 0f       	add	r24, r24
    8f36:	99 1f       	adc	r25, r25
    8f38:	28 0f       	add	r18, r24
    8f3a:	39 1f       	adc	r19, r25
    8f3c:	22 0f       	add	r18, r18
    8f3e:	33 1f       	adc	r19, r19
    8f40:	2e 0f       	add	r18, r30
    8f42:	31 1d       	adc	r19, r1
    8f44:	e9 91       	ld	r30, Y+
    8f46:	e0 53       	subi	r30, 0x30	; 48
    8f48:	ea 30       	cpi	r30, 0x0A	; 10
    8f4a:	68 f3       	brcs	.-38     	; 0x8f26 <strtod+0x194>
    8f4c:	e4 fe       	sbrs	r14, 4
    8f4e:	03 c0       	rjmp	.+6      	; 0x8f56 <strtod+0x1c4>
    8f50:	30 95       	com	r19
    8f52:	21 95       	neg	r18
    8f54:	3f 4f       	sbci	r19, 0xFF	; 255
    8f56:	82 0e       	add	r8, r18
    8f58:	93 1e       	adc	r9, r19
    8f5a:	ce 2c       	mov	r12, r14
    8f5c:	dd 24       	eor	r13, r13
    8f5e:	e1 fe       	sbrs	r14, 1
    8f60:	07 c0       	rjmp	.+14     	; 0x8f70 <strtod+0x1de>
    8f62:	a1 14       	cp	r10, r1
    8f64:	b1 04       	cpc	r11, r1
    8f66:	21 f0       	breq	.+8      	; 0x8f70 <strtod+0x1de>
    8f68:	21 97       	sbiw	r28, 0x01	; 1
    8f6a:	f5 01       	movw	r30, r10
    8f6c:	c0 83       	st	Z, r28
    8f6e:	d1 83       	std	Z+1, r29	; 0x01
    8f70:	cb 01       	movw	r24, r22
    8f72:	ba 01       	movw	r22, r20
    8f74:	0e 94 5e 43 	call	0x86bc	; 0x86bc <__floatunsisf>
    8f78:	7b 01       	movw	r14, r22
    8f7a:	8c 01       	movw	r16, r24
    8f7c:	f3 e0       	ldi	r31, 0x03	; 3
    8f7e:	cf 22       	and	r12, r31
    8f80:	dd 24       	eor	r13, r13
    8f82:	23 e0       	ldi	r18, 0x03	; 3
    8f84:	c2 16       	cp	r12, r18
    8f86:	d1 04       	cpc	r13, r1
    8f88:	21 f4       	brne	.+8      	; 0x8f92 <strtod+0x200>
    8f8a:	17 fb       	bst	r17, 7
    8f8c:	10 95       	com	r17
    8f8e:	17 f9       	bld	r17, 7
    8f90:	10 95       	com	r17
    8f92:	57 01       	movw	r10, r14
    8f94:	68 01       	movw	r12, r16
    8f96:	c8 01       	movw	r24, r16
    8f98:	b7 01       	movw	r22, r14
    8f9a:	20 e0       	ldi	r18, 0x00	; 0
    8f9c:	30 e0       	ldi	r19, 0x00	; 0
    8f9e:	40 e0       	ldi	r20, 0x00	; 0
    8fa0:	50 e0       	ldi	r21, 0x00	; 0
    8fa2:	0e 94 be 42 	call	0x857c	; 0x857c <__cmpsf2>
    8fa6:	88 23       	and	r24, r24
    8fa8:	09 f4       	brne	.+2      	; 0x8fac <strtod+0x21a>
    8faa:	4a c0       	rjmp	.+148    	; 0x9040 <strtod+0x2ae>
    8fac:	97 fe       	sbrs	r9, 7
    8fae:	0d c0       	rjmp	.+26     	; 0x8fca <strtod+0x238>
    8fb0:	25 e2       	ldi	r18, 0x25	; 37
    8fb2:	e2 2e       	mov	r14, r18
    8fb4:	2e e1       	ldi	r18, 0x1E	; 30
    8fb6:	f2 2e       	mov	r15, r18
    8fb8:	90 94       	com	r9
    8fba:	81 94       	neg	r8
    8fbc:	91 08       	sbc	r9, r1
    8fbe:	93 94       	inc	r9
    8fc0:	c0 e2       	ldi	r28, 0x20	; 32
    8fc2:	d0 e0       	ldi	r29, 0x00	; 0
    8fc4:	00 e0       	ldi	r16, 0x00	; 0
    8fc6:	10 e0       	ldi	r17, 0x00	; 0
    8fc8:	12 c0       	rjmp	.+36     	; 0x8fee <strtod+0x25c>
    8fca:	9d e3       	ldi	r25, 0x3D	; 61
    8fcc:	e9 2e       	mov	r14, r25
    8fce:	9e e1       	ldi	r25, 0x1E	; 30
    8fd0:	f9 2e       	mov	r15, r25
    8fd2:	f6 cf       	rjmp	.-20     	; 0x8fc0 <strtod+0x22e>
    8fd4:	f7 01       	movw	r30, r14
    8fd6:	25 91       	lpm	r18, Z+
    8fd8:	35 91       	lpm	r19, Z+
    8fda:	45 91       	lpm	r20, Z+
    8fdc:	54 91       	lpm	r21, Z+
    8fde:	c6 01       	movw	r24, r12
    8fe0:	b5 01       	movw	r22, r10
    8fe2:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    8fe6:	5b 01       	movw	r10, r22
    8fe8:	6c 01       	movw	r12, r24
    8fea:	8c 1a       	sub	r8, r28
    8fec:	9d 0a       	sbc	r9, r29
    8fee:	8c 16       	cp	r8, r28
    8ff0:	9d 06       	cpc	r9, r29
    8ff2:	84 f7       	brge	.-32     	; 0x8fd4 <strtod+0x242>
    8ff4:	d5 95       	asr	r29
    8ff6:	c7 95       	ror	r28
    8ff8:	0f 5f       	subi	r16, 0xFF	; 255
    8ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    8ffc:	06 30       	cpi	r16, 0x06	; 6
    8ffe:	11 05       	cpc	r17, r1
    9000:	29 f0       	breq	.+10     	; 0x900c <strtod+0x27a>
    9002:	8c ef       	ldi	r24, 0xFC	; 252
    9004:	9f ef       	ldi	r25, 0xFF	; 255
    9006:	e8 0e       	add	r14, r24
    9008:	f9 1e       	adc	r15, r25
    900a:	f1 cf       	rjmp	.-30     	; 0x8fee <strtod+0x25c>
    900c:	c5 01       	movw	r24, r10
    900e:	d6 01       	movw	r26, r12
    9010:	7c 01       	movw	r14, r24
    9012:	8d 01       	movw	r16, r26
    9014:	8c 2d       	mov	r24, r12
    9016:	88 0f       	add	r24, r24
    9018:	8d 2d       	mov	r24, r13
    901a:	88 1f       	adc	r24, r24
    901c:	8f 3f       	cpi	r24, 0xFF	; 255
    901e:	51 f0       	breq	.+20     	; 0x9034 <strtod+0x2a2>
    9020:	c6 01       	movw	r24, r12
    9022:	b5 01       	movw	r22, r10
    9024:	20 e0       	ldi	r18, 0x00	; 0
    9026:	30 e0       	ldi	r19, 0x00	; 0
    9028:	40 e0       	ldi	r20, 0x00	; 0
    902a:	50 e0       	ldi	r21, 0x00	; 0
    902c:	0e 94 be 42 	call	0x857c	; 0x857c <__cmpsf2>
    9030:	88 23       	and	r24, r24
    9032:	31 f4       	brne	.+12     	; 0x9040 <strtod+0x2ae>
    9034:	82 e2       	ldi	r24, 0x22	; 34
    9036:	90 e0       	ldi	r25, 0x00	; 0
    9038:	80 93 3b 27 	sts	0x273B, r24
    903c:	90 93 3c 27 	sts	0x273C, r25
    9040:	7e 2d       	mov	r23, r14
    9042:	9f 2d       	mov	r25, r15
    9044:	80 2f       	mov	r24, r16
    9046:	61 2f       	mov	r22, r17
    9048:	27 2f       	mov	r18, r23
    904a:	39 2f       	mov	r19, r25
    904c:	48 2f       	mov	r20, r24
    904e:	56 2f       	mov	r21, r22
    9050:	b9 01       	movw	r22, r18
    9052:	ca 01       	movw	r24, r20
    9054:	df 91       	pop	r29
    9056:	cf 91       	pop	r28
    9058:	1f 91       	pop	r17
    905a:	0f 91       	pop	r16
    905c:	ff 90       	pop	r15
    905e:	ef 90       	pop	r14
    9060:	df 90       	pop	r13
    9062:	cf 90       	pop	r12
    9064:	bf 90       	pop	r11
    9066:	af 90       	pop	r10
    9068:	9f 90       	pop	r9
    906a:	8f 90       	pop	r8
    906c:	08 95       	ret

0000906e <atoi>:
    906e:	fc 01       	movw	r30, r24
    9070:	88 27       	eor	r24, r24
    9072:	99 27       	eor	r25, r25
    9074:	e8 94       	clt
    9076:	21 91       	ld	r18, Z+
    9078:	20 32       	cpi	r18, 0x20	; 32
    907a:	e9 f3       	breq	.-6      	; 0x9076 <atoi+0x8>
    907c:	29 30       	cpi	r18, 0x09	; 9
    907e:	10 f0       	brcs	.+4      	; 0x9084 <atoi+0x16>
    9080:	2e 30       	cpi	r18, 0x0E	; 14
    9082:	c8 f3       	brcs	.-14     	; 0x9076 <atoi+0x8>
    9084:	2b 32       	cpi	r18, 0x2B	; 43
    9086:	41 f0       	breq	.+16     	; 0x9098 <atoi+0x2a>
    9088:	2d 32       	cpi	r18, 0x2D	; 45
    908a:	39 f4       	brne	.+14     	; 0x909a <atoi+0x2c>
    908c:	68 94       	set
    908e:	04 c0       	rjmp	.+8      	; 0x9098 <atoi+0x2a>
    9090:	0e 94 63 49 	call	0x92c6	; 0x92c6 <__mulhi_const_10>
    9094:	82 0f       	add	r24, r18
    9096:	91 1d       	adc	r25, r1
    9098:	21 91       	ld	r18, Z+
    909a:	20 53       	subi	r18, 0x30	; 48
    909c:	2a 30       	cpi	r18, 0x0A	; 10
    909e:	c0 f3       	brcs	.-16     	; 0x9090 <atoi+0x22>
    90a0:	1e f4       	brtc	.+6      	; 0x90a8 <atoi+0x3a>
    90a2:	90 95       	com	r25
    90a4:	81 95       	neg	r24
    90a6:	9f 4f       	sbci	r25, 0xFF	; 255
    90a8:	08 95       	ret

000090aa <__ftoa_engine>:
    90aa:	28 30       	cpi	r18, 0x08	; 8
    90ac:	08 f0       	brcs	.+2      	; 0x90b0 <__ftoa_engine+0x6>
    90ae:	27 e0       	ldi	r18, 0x07	; 7
    90b0:	33 27       	eor	r19, r19
    90b2:	da 01       	movw	r26, r20
    90b4:	99 0f       	add	r25, r25
    90b6:	31 1d       	adc	r19, r1
    90b8:	87 fd       	sbrc	r24, 7
    90ba:	91 60       	ori	r25, 0x01	; 1
    90bc:	00 96       	adiw	r24, 0x00	; 0
    90be:	61 05       	cpc	r22, r1
    90c0:	71 05       	cpc	r23, r1
    90c2:	39 f4       	brne	.+14     	; 0x90d2 <__ftoa_engine+0x28>
    90c4:	32 60       	ori	r19, 0x02	; 2
    90c6:	2e 5f       	subi	r18, 0xFE	; 254
    90c8:	3d 93       	st	X+, r19
    90ca:	30 e3       	ldi	r19, 0x30	; 48
    90cc:	2a 95       	dec	r18
    90ce:	e1 f7       	brne	.-8      	; 0x90c8 <__ftoa_engine+0x1e>
    90d0:	08 95       	ret
    90d2:	9f 3f       	cpi	r25, 0xFF	; 255
    90d4:	30 f0       	brcs	.+12     	; 0x90e2 <__ftoa_engine+0x38>
    90d6:	80 38       	cpi	r24, 0x80	; 128
    90d8:	71 05       	cpc	r23, r1
    90da:	61 05       	cpc	r22, r1
    90dc:	09 f0       	breq	.+2      	; 0x90e0 <__ftoa_engine+0x36>
    90de:	3c 5f       	subi	r19, 0xFC	; 252
    90e0:	3c 5f       	subi	r19, 0xFC	; 252
    90e2:	3d 93       	st	X+, r19
    90e4:	91 30       	cpi	r25, 0x01	; 1
    90e6:	08 f0       	brcs	.+2      	; 0x90ea <__ftoa_engine+0x40>
    90e8:	80 68       	ori	r24, 0x80	; 128
    90ea:	91 1d       	adc	r25, r1
    90ec:	df 93       	push	r29
    90ee:	cf 93       	push	r28
    90f0:	1f 93       	push	r17
    90f2:	0f 93       	push	r16
    90f4:	ff 92       	push	r15
    90f6:	ef 92       	push	r14
    90f8:	19 2f       	mov	r17, r25
    90fa:	98 7f       	andi	r25, 0xF8	; 248
    90fc:	96 95       	lsr	r25
    90fe:	e9 2f       	mov	r30, r25
    9100:	96 95       	lsr	r25
    9102:	96 95       	lsr	r25
    9104:	e9 0f       	add	r30, r25
    9106:	ff 27       	eor	r31, r31
    9108:	e5 56       	subi	r30, 0x65	; 101
    910a:	f1 4e       	sbci	r31, 0xE1	; 225
    910c:	99 27       	eor	r25, r25
    910e:	33 27       	eor	r19, r19
    9110:	ee 24       	eor	r14, r14
    9112:	ff 24       	eor	r15, r15
    9114:	a7 01       	movw	r20, r14
    9116:	e7 01       	movw	r28, r14
    9118:	05 90       	lpm	r0, Z+
    911a:	08 94       	sec
    911c:	07 94       	ror	r0
    911e:	28 f4       	brcc	.+10     	; 0x912a <__ftoa_engine+0x80>
    9120:	36 0f       	add	r19, r22
    9122:	e7 1e       	adc	r14, r23
    9124:	f8 1e       	adc	r15, r24
    9126:	49 1f       	adc	r20, r25
    9128:	51 1d       	adc	r21, r1
    912a:	66 0f       	add	r22, r22
    912c:	77 1f       	adc	r23, r23
    912e:	88 1f       	adc	r24, r24
    9130:	99 1f       	adc	r25, r25
    9132:	06 94       	lsr	r0
    9134:	a1 f7       	brne	.-24     	; 0x911e <__ftoa_engine+0x74>
    9136:	05 90       	lpm	r0, Z+
    9138:	07 94       	ror	r0
    913a:	28 f4       	brcc	.+10     	; 0x9146 <__ftoa_engine+0x9c>
    913c:	e7 0e       	add	r14, r23
    913e:	f8 1e       	adc	r15, r24
    9140:	49 1f       	adc	r20, r25
    9142:	56 1f       	adc	r21, r22
    9144:	c1 1d       	adc	r28, r1
    9146:	77 0f       	add	r23, r23
    9148:	88 1f       	adc	r24, r24
    914a:	99 1f       	adc	r25, r25
    914c:	66 1f       	adc	r22, r22
    914e:	06 94       	lsr	r0
    9150:	a1 f7       	brne	.-24     	; 0x913a <__ftoa_engine+0x90>
    9152:	05 90       	lpm	r0, Z+
    9154:	07 94       	ror	r0
    9156:	28 f4       	brcc	.+10     	; 0x9162 <__ftoa_engine+0xb8>
    9158:	f8 0e       	add	r15, r24
    915a:	49 1f       	adc	r20, r25
    915c:	56 1f       	adc	r21, r22
    915e:	c7 1f       	adc	r28, r23
    9160:	d1 1d       	adc	r29, r1
    9162:	88 0f       	add	r24, r24
    9164:	99 1f       	adc	r25, r25
    9166:	66 1f       	adc	r22, r22
    9168:	77 1f       	adc	r23, r23
    916a:	06 94       	lsr	r0
    916c:	a1 f7       	brne	.-24     	; 0x9156 <__ftoa_engine+0xac>
    916e:	05 90       	lpm	r0, Z+
    9170:	07 94       	ror	r0
    9172:	20 f4       	brcc	.+8      	; 0x917c <__ftoa_engine+0xd2>
    9174:	49 0f       	add	r20, r25
    9176:	56 1f       	adc	r21, r22
    9178:	c7 1f       	adc	r28, r23
    917a:	d8 1f       	adc	r29, r24
    917c:	99 0f       	add	r25, r25
    917e:	66 1f       	adc	r22, r22
    9180:	77 1f       	adc	r23, r23
    9182:	88 1f       	adc	r24, r24
    9184:	06 94       	lsr	r0
    9186:	a9 f7       	brne	.-22     	; 0x9172 <__ftoa_engine+0xc8>
    9188:	84 91       	lpm	r24, Z+
    918a:	10 95       	com	r17
    918c:	17 70       	andi	r17, 0x07	; 7
    918e:	41 f0       	breq	.+16     	; 0x91a0 <__ftoa_engine+0xf6>
    9190:	d6 95       	lsr	r29
    9192:	c7 95       	ror	r28
    9194:	57 95       	ror	r21
    9196:	47 95       	ror	r20
    9198:	f7 94       	ror	r15
    919a:	e7 94       	ror	r14
    919c:	1a 95       	dec	r17
    919e:	c1 f7       	brne	.-16     	; 0x9190 <__ftoa_engine+0xe6>
    91a0:	e1 e4       	ldi	r30, 0x41	; 65
    91a2:	fe e1       	ldi	r31, 0x1E	; 30
    91a4:	68 94       	set
    91a6:	15 90       	lpm	r1, Z+
    91a8:	15 91       	lpm	r17, Z+
    91aa:	35 91       	lpm	r19, Z+
    91ac:	65 91       	lpm	r22, Z+
    91ae:	95 91       	lpm	r25, Z+
    91b0:	05 90       	lpm	r0, Z+
    91b2:	7f e2       	ldi	r23, 0x2F	; 47
    91b4:	73 95       	inc	r23
    91b6:	e1 18       	sub	r14, r1
    91b8:	f1 0a       	sbc	r15, r17
    91ba:	43 0b       	sbc	r20, r19
    91bc:	56 0b       	sbc	r21, r22
    91be:	c9 0b       	sbc	r28, r25
    91c0:	d0 09       	sbc	r29, r0
    91c2:	c0 f7       	brcc	.-16     	; 0x91b4 <__ftoa_engine+0x10a>
    91c4:	e1 0c       	add	r14, r1
    91c6:	f1 1e       	adc	r15, r17
    91c8:	43 1f       	adc	r20, r19
    91ca:	56 1f       	adc	r21, r22
    91cc:	c9 1f       	adc	r28, r25
    91ce:	d0 1d       	adc	r29, r0
    91d0:	7e f4       	brtc	.+30     	; 0x91f0 <__ftoa_engine+0x146>
    91d2:	70 33       	cpi	r23, 0x30	; 48
    91d4:	11 f4       	brne	.+4      	; 0x91da <__ftoa_engine+0x130>
    91d6:	8a 95       	dec	r24
    91d8:	e6 cf       	rjmp	.-52     	; 0x91a6 <__ftoa_engine+0xfc>
    91da:	e8 94       	clt
    91dc:	01 50       	subi	r16, 0x01	; 1
    91de:	30 f0       	brcs	.+12     	; 0x91ec <__ftoa_engine+0x142>
    91e0:	08 0f       	add	r16, r24
    91e2:	0a f4       	brpl	.+2      	; 0x91e6 <__ftoa_engine+0x13c>
    91e4:	00 27       	eor	r16, r16
    91e6:	02 17       	cp	r16, r18
    91e8:	08 f4       	brcc	.+2      	; 0x91ec <__ftoa_engine+0x142>
    91ea:	20 2f       	mov	r18, r16
    91ec:	23 95       	inc	r18
    91ee:	02 2f       	mov	r16, r18
    91f0:	7a 33       	cpi	r23, 0x3A	; 58
    91f2:	28 f0       	brcs	.+10     	; 0x91fe <__ftoa_engine+0x154>
    91f4:	79 e3       	ldi	r23, 0x39	; 57
    91f6:	7d 93       	st	X+, r23
    91f8:	2a 95       	dec	r18
    91fa:	e9 f7       	brne	.-6      	; 0x91f6 <__ftoa_engine+0x14c>
    91fc:	10 c0       	rjmp	.+32     	; 0x921e <__ftoa_engine+0x174>
    91fe:	7d 93       	st	X+, r23
    9200:	2a 95       	dec	r18
    9202:	89 f6       	brne	.-94     	; 0x91a6 <__ftoa_engine+0xfc>
    9204:	06 94       	lsr	r0
    9206:	97 95       	ror	r25
    9208:	67 95       	ror	r22
    920a:	37 95       	ror	r19
    920c:	17 95       	ror	r17
    920e:	17 94       	ror	r1
    9210:	e1 18       	sub	r14, r1
    9212:	f1 0a       	sbc	r15, r17
    9214:	43 0b       	sbc	r20, r19
    9216:	56 0b       	sbc	r21, r22
    9218:	c9 0b       	sbc	r28, r25
    921a:	d0 09       	sbc	r29, r0
    921c:	98 f0       	brcs	.+38     	; 0x9244 <__ftoa_engine+0x19a>
    921e:	23 95       	inc	r18
    9220:	7e 91       	ld	r23, -X
    9222:	73 95       	inc	r23
    9224:	7a 33       	cpi	r23, 0x3A	; 58
    9226:	08 f0       	brcs	.+2      	; 0x922a <__ftoa_engine+0x180>
    9228:	70 e3       	ldi	r23, 0x30	; 48
    922a:	7c 93       	st	X, r23
    922c:	20 13       	cpse	r18, r16
    922e:	b8 f7       	brcc	.-18     	; 0x921e <__ftoa_engine+0x174>
    9230:	7e 91       	ld	r23, -X
    9232:	70 61       	ori	r23, 0x10	; 16
    9234:	7d 93       	st	X+, r23
    9236:	30 f0       	brcs	.+12     	; 0x9244 <__ftoa_engine+0x19a>
    9238:	83 95       	inc	r24
    923a:	71 e3       	ldi	r23, 0x31	; 49
    923c:	7d 93       	st	X+, r23
    923e:	70 e3       	ldi	r23, 0x30	; 48
    9240:	2a 95       	dec	r18
    9242:	e1 f7       	brne	.-8      	; 0x923c <__ftoa_engine+0x192>
    9244:	11 24       	eor	r1, r1
    9246:	ef 90       	pop	r14
    9248:	ff 90       	pop	r15
    924a:	0f 91       	pop	r16
    924c:	1f 91       	pop	r17
    924e:	cf 91       	pop	r28
    9250:	df 91       	pop	r29
    9252:	99 27       	eor	r25, r25
    9254:	87 fd       	sbrc	r24, 7
    9256:	90 95       	com	r25
    9258:	08 95       	ret

0000925a <isspace>:
    925a:	91 11       	cpse	r25, r1
    925c:	21 c1       	rjmp	.+578    	; 0x94a0 <__ctype_isfalse>
    925e:	80 32       	cpi	r24, 0x20	; 32
    9260:	19 f0       	breq	.+6      	; 0x9268 <isspace+0xe>
    9262:	89 50       	subi	r24, 0x09	; 9
    9264:	85 50       	subi	r24, 0x05	; 5
    9266:	d0 f7       	brcc	.-12     	; 0x925c <isspace+0x2>
    9268:	08 95       	ret

0000926a <strncasecmp_P>:
    926a:	fb 01       	movw	r30, r22
    926c:	dc 01       	movw	r26, r24
    926e:	41 50       	subi	r20, 0x01	; 1
    9270:	50 40       	sbci	r21, 0x00	; 0
    9272:	88 f0       	brcs	.+34     	; 0x9296 <strncasecmp_P+0x2c>
    9274:	8d 91       	ld	r24, X+
    9276:	81 34       	cpi	r24, 0x41	; 65
    9278:	1c f0       	brlt	.+6      	; 0x9280 <strncasecmp_P+0x16>
    927a:	8b 35       	cpi	r24, 0x5B	; 91
    927c:	0c f4       	brge	.+2      	; 0x9280 <strncasecmp_P+0x16>
    927e:	80 5e       	subi	r24, 0xE0	; 224
    9280:	65 91       	lpm	r22, Z+
    9282:	61 34       	cpi	r22, 0x41	; 65
    9284:	1c f0       	brlt	.+6      	; 0x928c <strncasecmp_P+0x22>
    9286:	6b 35       	cpi	r22, 0x5B	; 91
    9288:	0c f4       	brge	.+2      	; 0x928c <strncasecmp_P+0x22>
    928a:	60 5e       	subi	r22, 0xE0	; 224
    928c:	86 1b       	sub	r24, r22
    928e:	61 11       	cpse	r22, r1
    9290:	71 f3       	breq	.-36     	; 0x926e <strncasecmp_P+0x4>
    9292:	99 0b       	sbc	r25, r25
    9294:	08 95       	ret
    9296:	88 1b       	sub	r24, r24
    9298:	fc cf       	rjmp	.-8      	; 0x9292 <strncasecmp_P+0x28>

0000929a <strnlen_P>:
    929a:	fc 01       	movw	r30, r24
    929c:	05 90       	lpm	r0, Z+
    929e:	61 50       	subi	r22, 0x01	; 1
    92a0:	70 40       	sbci	r23, 0x00	; 0
    92a2:	01 10       	cpse	r0, r1
    92a4:	d8 f7       	brcc	.-10     	; 0x929c <strnlen_P+0x2>
    92a6:	80 95       	com	r24
    92a8:	90 95       	com	r25
    92aa:	8e 0f       	add	r24, r30
    92ac:	9f 1f       	adc	r25, r31
    92ae:	08 95       	ret

000092b0 <strnlen>:
    92b0:	fc 01       	movw	r30, r24
    92b2:	61 50       	subi	r22, 0x01	; 1
    92b4:	70 40       	sbci	r23, 0x00	; 0
    92b6:	01 90       	ld	r0, Z+
    92b8:	01 10       	cpse	r0, r1
    92ba:	d8 f7       	brcc	.-10     	; 0x92b2 <strnlen+0x2>
    92bc:	80 95       	com	r24
    92be:	90 95       	com	r25
    92c0:	8e 0f       	add	r24, r30
    92c2:	9f 1f       	adc	r25, r31
    92c4:	08 95       	ret

000092c6 <__mulhi_const_10>:
    92c6:	7a e0       	ldi	r23, 0x0A	; 10
    92c8:	97 9f       	mul	r25, r23
    92ca:	90 2d       	mov	r25, r0
    92cc:	87 9f       	mul	r24, r23
    92ce:	80 2d       	mov	r24, r0
    92d0:	91 0d       	add	r25, r1
    92d2:	11 24       	eor	r1, r1
    92d4:	08 95       	ret

000092d6 <clearerr>:
    92d6:	fc 01       	movw	r30, r24
    92d8:	83 81       	ldd	r24, Z+3	; 0x03
    92da:	8f 7c       	andi	r24, 0xCF	; 207
    92dc:	83 83       	std	Z+3, r24	; 0x03
    92de:	08 95       	ret

000092e0 <fgets>:
    92e0:	cf 92       	push	r12
    92e2:	df 92       	push	r13
    92e4:	ef 92       	push	r14
    92e6:	ff 92       	push	r15
    92e8:	0f 93       	push	r16
    92ea:	1f 93       	push	r17
    92ec:	cf 93       	push	r28
    92ee:	df 93       	push	r29
    92f0:	7c 01       	movw	r14, r24
    92f2:	6a 01       	movw	r12, r20
    92f4:	fa 01       	movw	r30, r20
    92f6:	83 81       	ldd	r24, Z+3	; 0x03
    92f8:	80 ff       	sbrs	r24, 0
    92fa:	19 c0       	rjmp	.+50     	; 0x932e <fgets+0x4e>
    92fc:	16 16       	cp	r1, r22
    92fe:	17 06       	cpc	r1, r23
    9300:	b4 f4       	brge	.+44     	; 0x932e <fgets+0x4e>
    9302:	eb 01       	movw	r28, r22
    9304:	21 97       	sbiw	r28, 0x01	; 1
    9306:	87 01       	movw	r16, r14
    9308:	0d c0       	rjmp	.+26     	; 0x9324 <fgets+0x44>
    930a:	c6 01       	movw	r24, r12
    930c:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <fgetc>
    9310:	ff ef       	ldi	r31, 0xFF	; 255
    9312:	8f 3f       	cpi	r24, 0xFF	; 255
    9314:	9f 07       	cpc	r25, r31
    9316:	59 f0       	breq	.+22     	; 0x932e <fgets+0x4e>
    9318:	f8 01       	movw	r30, r16
    931a:	81 93       	st	Z+, r24
    931c:	8f 01       	movw	r16, r30
    931e:	0a 97       	sbiw	r24, 0x0a	; 10
    9320:	19 f0       	breq	.+6      	; 0x9328 <fgets+0x48>
    9322:	21 97       	sbiw	r28, 0x01	; 1
    9324:	20 97       	sbiw	r28, 0x00	; 0
    9326:	89 f7       	brne	.-30     	; 0x930a <fgets+0x2a>
    9328:	f8 01       	movw	r30, r16
    932a:	10 82       	st	Z, r1
    932c:	02 c0       	rjmp	.+4      	; 0x9332 <fgets+0x52>
    932e:	ee 24       	eor	r14, r14
    9330:	ff 24       	eor	r15, r15
    9332:	c7 01       	movw	r24, r14
    9334:	df 91       	pop	r29
    9336:	cf 91       	pop	r28
    9338:	1f 91       	pop	r17
    933a:	0f 91       	pop	r16
    933c:	ff 90       	pop	r15
    933e:	ef 90       	pop	r14
    9340:	df 90       	pop	r13
    9342:	cf 90       	pop	r12
    9344:	08 95       	ret

00009346 <fputc>:
    9346:	0f 93       	push	r16
    9348:	1f 93       	push	r17
    934a:	cf 93       	push	r28
    934c:	df 93       	push	r29
    934e:	8c 01       	movw	r16, r24
    9350:	eb 01       	movw	r28, r22
    9352:	8b 81       	ldd	r24, Y+3	; 0x03
    9354:	81 ff       	sbrs	r24, 1
    9356:	1b c0       	rjmp	.+54     	; 0x938e <fputc+0x48>
    9358:	82 ff       	sbrs	r24, 2
    935a:	0d c0       	rjmp	.+26     	; 0x9376 <fputc+0x30>
    935c:	2e 81       	ldd	r18, Y+6	; 0x06
    935e:	3f 81       	ldd	r19, Y+7	; 0x07
    9360:	8c 81       	ldd	r24, Y+4	; 0x04
    9362:	9d 81       	ldd	r25, Y+5	; 0x05
    9364:	28 17       	cp	r18, r24
    9366:	39 07       	cpc	r19, r25
    9368:	64 f4       	brge	.+24     	; 0x9382 <fputc+0x3c>
    936a:	e8 81       	ld	r30, Y
    936c:	f9 81       	ldd	r31, Y+1	; 0x01
    936e:	01 93       	st	Z+, r16
    9370:	e8 83       	st	Y, r30
    9372:	f9 83       	std	Y+1, r31	; 0x01
    9374:	06 c0       	rjmp	.+12     	; 0x9382 <fputc+0x3c>
    9376:	e8 85       	ldd	r30, Y+8	; 0x08
    9378:	f9 85       	ldd	r31, Y+9	; 0x09
    937a:	80 2f       	mov	r24, r16
    937c:	19 95       	eicall
    937e:	89 2b       	or	r24, r25
    9380:	31 f4       	brne	.+12     	; 0x938e <fputc+0x48>
    9382:	8e 81       	ldd	r24, Y+6	; 0x06
    9384:	9f 81       	ldd	r25, Y+7	; 0x07
    9386:	01 96       	adiw	r24, 0x01	; 1
    9388:	8e 83       	std	Y+6, r24	; 0x06
    938a:	9f 83       	std	Y+7, r25	; 0x07
    938c:	02 c0       	rjmp	.+4      	; 0x9392 <fputc+0x4c>
    938e:	0f ef       	ldi	r16, 0xFF	; 255
    9390:	1f ef       	ldi	r17, 0xFF	; 255
    9392:	c8 01       	movw	r24, r16
    9394:	df 91       	pop	r29
    9396:	cf 91       	pop	r28
    9398:	1f 91       	pop	r17
    939a:	0f 91       	pop	r16
    939c:	08 95       	ret

0000939e <printf_P>:
    939e:	df 93       	push	r29
    93a0:	cf 93       	push	r28
    93a2:	cd b7       	in	r28, 0x3d	; 61
    93a4:	de b7       	in	r29, 0x3e	; 62
    93a6:	fe 01       	movw	r30, r28
    93a8:	36 96       	adiw	r30, 0x06	; 6
    93aa:	61 91       	ld	r22, Z+
    93ac:	71 91       	ld	r23, Z+
    93ae:	a0 91 37 27 	lds	r26, 0x2737
    93b2:	b0 91 38 27 	lds	r27, 0x2738
    93b6:	13 96       	adiw	r26, 0x03	; 3
    93b8:	8c 91       	ld	r24, X
    93ba:	13 97       	sbiw	r26, 0x03	; 3
    93bc:	88 60       	ori	r24, 0x08	; 8
    93be:	13 96       	adiw	r26, 0x03	; 3
    93c0:	8c 93       	st	X, r24
    93c2:	80 91 37 27 	lds	r24, 0x2737
    93c6:	90 91 38 27 	lds	r25, 0x2738
    93ca:	af 01       	movw	r20, r30
    93cc:	0e 94 74 3e 	call	0x7ce8	; 0x7ce8 <vfprintf>
    93d0:	e0 91 37 27 	lds	r30, 0x2737
    93d4:	f0 91 38 27 	lds	r31, 0x2738
    93d8:	23 81       	ldd	r18, Z+3	; 0x03
    93da:	27 7f       	andi	r18, 0xF7	; 247
    93dc:	23 83       	std	Z+3, r18	; 0x03
    93de:	cf 91       	pop	r28
    93e0:	df 91       	pop	r29
    93e2:	08 95       	ret

000093e4 <__ultoa_invert>:
    93e4:	fa 01       	movw	r30, r20
    93e6:	aa 27       	eor	r26, r26
    93e8:	28 30       	cpi	r18, 0x08	; 8
    93ea:	51 f1       	breq	.+84     	; 0x9440 <__ultoa_invert+0x5c>
    93ec:	20 31       	cpi	r18, 0x10	; 16
    93ee:	81 f1       	breq	.+96     	; 0x9450 <__ultoa_invert+0x6c>
    93f0:	e8 94       	clt
    93f2:	6f 93       	push	r22
    93f4:	6e 7f       	andi	r22, 0xFE	; 254
    93f6:	6e 5f       	subi	r22, 0xFE	; 254
    93f8:	7f 4f       	sbci	r23, 0xFF	; 255
    93fa:	8f 4f       	sbci	r24, 0xFF	; 255
    93fc:	9f 4f       	sbci	r25, 0xFF	; 255
    93fe:	af 4f       	sbci	r26, 0xFF	; 255
    9400:	b1 e0       	ldi	r27, 0x01	; 1
    9402:	3e d0       	rcall	.+124    	; 0x9480 <__ultoa_invert+0x9c>
    9404:	b4 e0       	ldi	r27, 0x04	; 4
    9406:	3c d0       	rcall	.+120    	; 0x9480 <__ultoa_invert+0x9c>
    9408:	67 0f       	add	r22, r23
    940a:	78 1f       	adc	r23, r24
    940c:	89 1f       	adc	r24, r25
    940e:	9a 1f       	adc	r25, r26
    9410:	a1 1d       	adc	r26, r1
    9412:	68 0f       	add	r22, r24
    9414:	79 1f       	adc	r23, r25
    9416:	8a 1f       	adc	r24, r26
    9418:	91 1d       	adc	r25, r1
    941a:	a1 1d       	adc	r26, r1
    941c:	6a 0f       	add	r22, r26
    941e:	71 1d       	adc	r23, r1
    9420:	81 1d       	adc	r24, r1
    9422:	91 1d       	adc	r25, r1
    9424:	a1 1d       	adc	r26, r1
    9426:	20 d0       	rcall	.+64     	; 0x9468 <__ultoa_invert+0x84>
    9428:	09 f4       	brne	.+2      	; 0x942c <__ultoa_invert+0x48>
    942a:	68 94       	set
    942c:	3f 91       	pop	r19
    942e:	2a e0       	ldi	r18, 0x0A	; 10
    9430:	26 9f       	mul	r18, r22
    9432:	11 24       	eor	r1, r1
    9434:	30 19       	sub	r19, r0
    9436:	30 5d       	subi	r19, 0xD0	; 208
    9438:	31 93       	st	Z+, r19
    943a:	de f6       	brtc	.-74     	; 0x93f2 <__ultoa_invert+0xe>
    943c:	cf 01       	movw	r24, r30
    943e:	08 95       	ret
    9440:	46 2f       	mov	r20, r22
    9442:	47 70       	andi	r20, 0x07	; 7
    9444:	40 5d       	subi	r20, 0xD0	; 208
    9446:	41 93       	st	Z+, r20
    9448:	b3 e0       	ldi	r27, 0x03	; 3
    944a:	0f d0       	rcall	.+30     	; 0x946a <__ultoa_invert+0x86>
    944c:	c9 f7       	brne	.-14     	; 0x9440 <__ultoa_invert+0x5c>
    944e:	f6 cf       	rjmp	.-20     	; 0x943c <__ultoa_invert+0x58>
    9450:	46 2f       	mov	r20, r22
    9452:	4f 70       	andi	r20, 0x0F	; 15
    9454:	40 5d       	subi	r20, 0xD0	; 208
    9456:	4a 33       	cpi	r20, 0x3A	; 58
    9458:	18 f0       	brcs	.+6      	; 0x9460 <__ultoa_invert+0x7c>
    945a:	49 5d       	subi	r20, 0xD9	; 217
    945c:	31 fd       	sbrc	r19, 1
    945e:	40 52       	subi	r20, 0x20	; 32
    9460:	41 93       	st	Z+, r20
    9462:	02 d0       	rcall	.+4      	; 0x9468 <__ultoa_invert+0x84>
    9464:	a9 f7       	brne	.-22     	; 0x9450 <__ultoa_invert+0x6c>
    9466:	ea cf       	rjmp	.-44     	; 0x943c <__ultoa_invert+0x58>
    9468:	b4 e0       	ldi	r27, 0x04	; 4
    946a:	a6 95       	lsr	r26
    946c:	97 95       	ror	r25
    946e:	87 95       	ror	r24
    9470:	77 95       	ror	r23
    9472:	67 95       	ror	r22
    9474:	ba 95       	dec	r27
    9476:	c9 f7       	brne	.-14     	; 0x946a <__ultoa_invert+0x86>
    9478:	00 97       	sbiw	r24, 0x00	; 0
    947a:	61 05       	cpc	r22, r1
    947c:	71 05       	cpc	r23, r1
    947e:	08 95       	ret
    9480:	9b 01       	movw	r18, r22
    9482:	ac 01       	movw	r20, r24
    9484:	0a 2e       	mov	r0, r26
    9486:	06 94       	lsr	r0
    9488:	57 95       	ror	r21
    948a:	47 95       	ror	r20
    948c:	37 95       	ror	r19
    948e:	27 95       	ror	r18
    9490:	ba 95       	dec	r27
    9492:	c9 f7       	brne	.-14     	; 0x9486 <__ultoa_invert+0xa2>
    9494:	62 0f       	add	r22, r18
    9496:	73 1f       	adc	r23, r19
    9498:	84 1f       	adc	r24, r20
    949a:	95 1f       	adc	r25, r21
    949c:	a0 1d       	adc	r26, r0
    949e:	08 95       	ret

000094a0 <__ctype_isfalse>:
    94a0:	99 27       	eor	r25, r25
    94a2:	88 27       	eor	r24, r24

000094a4 <__ctype_istrue>:
    94a4:	08 95       	ret

000094a6 <fgetc>:
    94a6:	cf 93       	push	r28
    94a8:	df 93       	push	r29
    94aa:	ec 01       	movw	r28, r24
    94ac:	4b 81       	ldd	r20, Y+3	; 0x03
    94ae:	40 ff       	sbrs	r20, 0
    94b0:	1a c0       	rjmp	.+52     	; 0x94e6 <fgetc+0x40>
    94b2:	46 ff       	sbrs	r20, 6
    94b4:	0a c0       	rjmp	.+20     	; 0x94ca <fgetc+0x24>
    94b6:	4f 7b       	andi	r20, 0xBF	; 191
    94b8:	4b 83       	std	Y+3, r20	; 0x03
    94ba:	8e 81       	ldd	r24, Y+6	; 0x06
    94bc:	9f 81       	ldd	r25, Y+7	; 0x07
    94be:	01 96       	adiw	r24, 0x01	; 1
    94c0:	8e 83       	std	Y+6, r24	; 0x06
    94c2:	9f 83       	std	Y+7, r25	; 0x07
    94c4:	8a 81       	ldd	r24, Y+2	; 0x02
    94c6:	28 2f       	mov	r18, r24
    94c8:	2b c0       	rjmp	.+86     	; 0x9520 <fgetc+0x7a>
    94ca:	42 ff       	sbrs	r20, 2
    94cc:	13 c0       	rjmp	.+38     	; 0x94f4 <fgetc+0x4e>
    94ce:	e8 81       	ld	r30, Y
    94d0:	f9 81       	ldd	r31, Y+1	; 0x01
    94d2:	80 81       	ld	r24, Z
    94d4:	28 2f       	mov	r18, r24
    94d6:	33 27       	eor	r19, r19
    94d8:	27 fd       	sbrc	r18, 7
    94da:	30 95       	com	r19
    94dc:	21 15       	cp	r18, r1
    94de:	31 05       	cpc	r19, r1
    94e0:	29 f4       	brne	.+10     	; 0x94ec <fgetc+0x46>
    94e2:	40 62       	ori	r20, 0x20	; 32
    94e4:	4b 83       	std	Y+3, r20	; 0x03
    94e6:	2f ef       	ldi	r18, 0xFF	; 255
    94e8:	3f ef       	ldi	r19, 0xFF	; 255
    94ea:	1b c0       	rjmp	.+54     	; 0x9522 <fgetc+0x7c>
    94ec:	31 96       	adiw	r30, 0x01	; 1
    94ee:	e8 83       	st	Y, r30
    94f0:	f9 83       	std	Y+1, r31	; 0x01
    94f2:	11 c0       	rjmp	.+34     	; 0x9516 <fgetc+0x70>
    94f4:	ea 85       	ldd	r30, Y+10	; 0x0a
    94f6:	fb 85       	ldd	r31, Y+11	; 0x0b
    94f8:	ce 01       	movw	r24, r28
    94fa:	19 95       	eicall
    94fc:	9c 01       	movw	r18, r24
    94fe:	97 ff       	sbrs	r25, 7
    9500:	0a c0       	rjmp	.+20     	; 0x9516 <fgetc+0x70>
    9502:	9b 81       	ldd	r25, Y+3	; 0x03
    9504:	2f 5f       	subi	r18, 0xFF	; 255
    9506:	3f 4f       	sbci	r19, 0xFF	; 255
    9508:	11 f0       	breq	.+4      	; 0x950e <fgetc+0x68>
    950a:	80 e2       	ldi	r24, 0x20	; 32
    950c:	01 c0       	rjmp	.+2      	; 0x9510 <fgetc+0x6a>
    950e:	80 e1       	ldi	r24, 0x10	; 16
    9510:	89 2b       	or	r24, r25
    9512:	8b 83       	std	Y+3, r24	; 0x03
    9514:	e8 cf       	rjmp	.-48     	; 0x94e6 <fgetc+0x40>
    9516:	8e 81       	ldd	r24, Y+6	; 0x06
    9518:	9f 81       	ldd	r25, Y+7	; 0x07
    951a:	01 96       	adiw	r24, 0x01	; 1
    951c:	8e 83       	std	Y+6, r24	; 0x06
    951e:	9f 83       	std	Y+7, r25	; 0x07
    9520:	30 e0       	ldi	r19, 0x00	; 0
    9522:	c9 01       	movw	r24, r18
    9524:	df 91       	pop	r29
    9526:	cf 91       	pop	r28
    9528:	08 95       	ret

0000952a <_exit>:
    952a:	f8 94       	cli

0000952c <__stop_program>:
    952c:	ff cf       	rjmp	.-2      	; 0x952c <__stop_program>
