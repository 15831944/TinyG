
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009106  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00802000  00009106  0000919a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000412  00802104  00802104  0000929e  2**0
                  ALLOC
  3 .debug_aranges 00000380  00000000  00000000  0000929e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000dcb  00000000  00000000  0000961e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000d715  00000000  00000000  0000a3e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002d0a  00000000  00000000  00017afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004e70  00000000  00000000  0001a808  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ad0  00000000  00000000  0001f678  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000024e1  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000039c5  00000000  00000000  00022629  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00025fee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__ctors_end>
       4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
       8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
       c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      10:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      14:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      18:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      1c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      20:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      24:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      28:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      2c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      30:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      34:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      38:	0c 94 a7 27 	jmp	0x4f4e	; 0x4f4e <__vector_14>
      3c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      40:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      44:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      48:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      4c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      50:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      54:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      58:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      5c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      60:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      64:	0c 94 57 32 	jmp	0x64ae	; 0x64ae <__vector_25>
      68:	0c 94 f3 2f 	jmp	0x5fe6	; 0x5fe6 <__vector_26>
      6c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      70:	0c 94 f9 34 	jmp	0x69f2	; 0x69f2 <__vector_28>
      74:	0c 94 af 32 	jmp	0x655e	; 0x655e <__vector_29>
      78:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      7c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      80:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      84:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      88:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      8c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      90:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      94:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      98:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      9c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      a0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      a4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      a8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      ac:	0c 94 fb 2e 	jmp	0x5df6	; 0x5df6 <__vector_43>
      b0:	0c 94 05 2f 	jmp	0x5e0a	; 0x5e0a <__vector_44>
      b4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      b8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      bc:	0c 94 dd 26 	jmp	0x4dba	; 0x4dba <__vector_47>
      c0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      c4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      c8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      cc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      d0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      d4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      d8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      dc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      e0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      e4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      e8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      ec:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      f0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      f4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      f8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      fc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     100:	0c 94 0f 2f 	jmp	0x5e1e	; 0x5e1e <__vector_64>
     104:	0c 94 19 2f 	jmp	0x5e32	; 0x5e32 <__vector_65>
     108:	0c 94 d3 2e 	jmp	0x5da6	; 0x5da6 <__vector_66>
     10c:	0c 94 dd 2e 	jmp	0x5dba	; 0x5dba <__vector_67>
     110:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     114:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     118:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     11c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     120:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     124:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     128:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     12c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     130:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     134:	0c 94 42 27 	jmp	0x4e84	; 0x4e84 <__vector_77>
     138:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     13c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     140:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     144:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     148:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     14c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     150:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     154:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     158:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     15c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     160:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     164:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     168:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     16c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     170:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     174:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     178:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     17c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     180:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     184:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     188:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     18c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     190:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     194:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     198:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     19c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1a0:	0c 94 e7 2e 	jmp	0x5dce	; 0x5dce <__vector_104>
     1a4:	0c 94 f1 2e 	jmp	0x5de2	; 0x5de2 <__vector_105>
     1a8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1ac:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1b0:	0c 94 78 26 	jmp	0x4cf0	; 0x4cf0 <__vector_108>
     1b4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1b8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1bc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1c0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1c4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1c8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1cc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1d0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1d4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1d8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1dc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1e0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1e4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <configs_P>:
     24b:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25b:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26b:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27b:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28b:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29b:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2ab:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bb:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2db:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2eb:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2fb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30b:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31b:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32b:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33b:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34b:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35b:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36b:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37b:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38b:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000399 <__c.3833>:
     399:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     3a9:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000003b4 <__c.3830>:
     3b4:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     3c4:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

000003ce <__c.3827>:
     3ce:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     3de:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000003e8 <__c.3824>:
     3e8:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     3f8:	74 3a 20 25 73 0a 00                                t: %s..

000003ff <__c.3821>:
     3ff:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     40f:	4d 6f 64 65 0a 00                                   Mode..

00000415 <__c.3818>:
     415:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     425:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

00000432 <__c.3750>:
     432:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     442:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     452:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     462:	29 0a 0a 00                                         )...

00000466 <__c.3748>:
     466:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     476:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     486:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000496 <__c.3746>:
     496:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     4a6:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4b6:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004c7 <__c.3744>:
     4c7:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     4d7:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4e7:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004f8 <__c.3742>:
     4f8:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     508:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     518:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     528:	6c 0a 00                                            l..

0000052b <__c.3740>:
     52b:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     53b:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     54b:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     55b:	6e 0a 00                                            n..

0000055e <__c.3738>:
     55e:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     56e:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     57e:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     58e:	74 65 70 73 29 0a 00                                teps)..

00000595 <__c.3736>:
     595:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     5a5:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     5b5:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     5c5:	70 0a 00                                            p..

000005c8 <__c.3734>:
     5c8:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     5d8:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     5e8:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     5f8:	73 74 65 70 73 29 0a 00                             steps)..

00000600 <__c.3732>:
     600:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     610:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     620:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     630:	73 74 65 70 73 29 0a 00                             steps)..

00000638 <__c.3727>:
     638:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     648:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

00000656 <__c.3713>:
     656:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     666:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     676:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000681 <__c.3711>:
     681:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     691:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     6a1:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000006ab <__c.3709>:
     6ab:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     6bb:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     6cb:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000006d5 <__c.3707>:
     6d5:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     6e5:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     6f5:	73 20 2d 2d 2d 0a 00                                s ---..

000006fc <__c.3705>:
     6fc:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     70c:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     71c:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000724 <__c.3671>:
     724:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     734:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     744:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000750 <square_test1>:
     750:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     760:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     770:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     780:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     790:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     7a0:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     7b0:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000007be <square_test2>:
     7be:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     7ce:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     7de:	78 30 20 79 30 00                                   x0 y0.

000007e4 <square_test10>:
     7e4:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     7f4:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     804:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000810 <circle_test10>:
     810:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     820:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     830:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     840:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     850:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     860:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     870:	30 00                                               0.

00000872 <square_circle_test10>:
     872:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     882:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     892:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     8a2:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     8b2:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     8c2:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     8d2:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     8e2:	31 30 20 79 30 00                                   10 y0.

000008e8 <square_circle_test100>:
     8e8:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     8f8:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     908:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     918:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     928:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     938:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     948:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     958:	35 30 20 6a 30 00                                   50 j0.

0000095e <spiral_test5>:
     95e:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     96e:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     97e:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     98e:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     99e:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     9ae:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     9be:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     9ce:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

000009d8 <spiral_test50a>:
     9d8:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     9e8:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

000009f8 <dwell_test1>:
     9f8:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     a08:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     a18:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     a28:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     a38:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     a48:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     a58:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     a68:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     a78:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     a88:	20 78 30 00                                          x0.

00000a8c <dwell_test2>:
     a8c:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     a9c:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     aac:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     abc:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     acc:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     adc:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     aec:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     afc:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     b0c:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000b16 <dwell_testMax>:
     b16:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000b20 <g0_test1>:
     b20:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     b30:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000b40 <g0_test2>:
     b40:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     b50:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     b60:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     b70:	79 30 20 7a 30 00                                   y0 z0.

00000b76 <g0_test3>:
     b76:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     b86:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     b96:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000ba4 <radius_arc_test1>:
     ba4:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     bb4:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     bc4:	72 35 30 0a 00                                      r50..

00000bc9 <radius_arc_test2>:
     bc9:	67 32 0a 00                                         g2..

00000bcd <zoetrope>:
     bcd:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     bdd:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     bed:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     bfd:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     c0d:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     c1d:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     c2d:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     c3d:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     c4d:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     c5d:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     c6d:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     c7d:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     c8d:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     c9d:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     cad:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     cbd:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     ccd:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     cdd:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     ced:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     cfd:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     d0d:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     d1d:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     d2d:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     d3d:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     d4d:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     d5d:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     d6d:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     d7d:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     d8d:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     d9d:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     dad:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     dbd:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     dcd:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     ddd:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     ded:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     dfd:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
     e0d:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
     e1d:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
     e2d:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
     e3d:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
     e4d:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
     e5d:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
     e6d:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
     e7d:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
     e8d:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
     e9d:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
     ead:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
     ebd:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
     ecd:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
     edd:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
     eed:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
     efd:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
     f0d:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
     f1d:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
     f2d:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
     f3d:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
     f4d:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
     f5d:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
     f6d:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
     f7d:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
     f8d:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
     f9d:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
     fad:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
     fbd:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
     fcd:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
     fdd:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
     fed:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
     ffd:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    100d:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    101d:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    102d:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    103d:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    104d:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    105d:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    106d:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    107d:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    108d:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    109d:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    10ad:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    10bd:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    10cd:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    10dd:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    10ed:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    10fd:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    110d:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    111d:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    112d:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    113d:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    114d:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    115d:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    116d:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    117d:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    118d:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    119d:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    11ad:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    11bd:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    11cd:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    11dd:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    11ed:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    11fd:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    120d:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    121d:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    122d:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    123d:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    124d:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    125d:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    126d:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    127d:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    128d:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    129d:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    12ad:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    12bd:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    12cd:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    12dd:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    12ed:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    12fd:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    130d:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    131d:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    132d:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    133d:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    134d:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    135d:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    136d:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    137d:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    138d:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    139d:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    13ad:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    13bd:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    13cd:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    13dd:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    13ed:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    13fd:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    140d:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    141d:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    142d:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    143d:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    144d:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    145d:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    146d:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    147d:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    148d:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    149d:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    14ad:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    14bd:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    14cd:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    14dd:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    14ed:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    14fd:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    150d:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    151d:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    152d:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    153d:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    154d:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    155d:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    156d:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    157d:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

00001588 <contraptor_circle>:
    1588:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    1598:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    15a8:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    15b8:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    15c8:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    15d8:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    15e8:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    15f8:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    1608:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    1618:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    1628:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    1638:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    1648:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    1658:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    1668:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    1678:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    1688:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    1698:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    16a8:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    16b8:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    16c8:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    16d8:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    16e8:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    16f8:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    1708:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    1718:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    1728:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    1738:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    1748:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    1758:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    1768:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    1778:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    1788:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    1798:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    17a8:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    17b8:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    17c8:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    17d8:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    17e8:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    17f8:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    1808:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1818:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1828:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    1838:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    1848:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    1858:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    1868:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    1878:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    1888:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1898:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    18a8:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    18b8:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    18c8:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    18d8:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    18e8:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    18f8:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1908:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1918:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1928:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1938:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1948:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1958:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001968 <tgModeStringControl>:
    1968:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001975 <tgModeStringConfig>:
    1975:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001981 <tgModeStringGCode>:
    1981:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

0000198d <tgModeStringDirect>:
    198d:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

0000199a <tgModeStrings>:
    199a:	68 19 75 19 81 19 8d 19                             h.u.....

000019a2 <__c.3841>:
    19a2:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    19b2:	69 6c 65 0a 00                                      ile..

000019b7 <__c.3904>:
    19b7:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

000019c5 <__c.3821>:
    19c5:	62 75 69 6c 64 20 32 30 34 00                       build 204.

000019cf <__c.3819>:
    19cf:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    19df:	25 53 0a 00                                         %S..

000019e3 <bsel>:
    19e3:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

000019ee <bscale>:
    19ee:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

000019f9 <readlnFuncs>:
    19f9:	bc 31 91 31 91 31 fc 31 91 31 91 31 91 31 91 31     .1.1.1.1.1.1.1.1
    1a09:	e8 31 91 31 bc 31 91 31 91 31 bc 31 91 31 91 31     .1.1.1.1.1.1.1.1
    1a19:	91 31 08 32 91 31 02 32 91 31 91 31 91 31 91 31     .1.2.1.2.1.1.1.1
    1a29:	fc 31 91 31 91 31 fc 31 91 31 91 31 91 31 91 31     .1.1.1.1.1.1.1.1
    1a39:	91 31 91 31 91 31 91 31 91 31 91 31 91 31 91 31     .1.1.1.1.1.1.1.1
    1a49:	91 31 91 31 91 31 91 31 91 31 91 31 91 31 91 31     .1.1.1.1.1.1.1.1
    1a59:	91 31 91 31 91 31 91 31 91 31 91 31 91 31 91 31     .1.1.1.1.1.1.1.1
    1a69:	91 31 91 31 91 31 de 31 91 31 91 31 91 31 91 31     .1.1.1.1.1.1.1.1
    1a79:	91 31 91 31 91 31 91 31 91 31 91 31 91 31 91 31     .1.1.1.1.1.1.1.1
    1a89:	91 31 91 31 91 31 91 31 91 31 91 31 91 31 91 31     .1.1.1.1.1.1.1.1
    1a99:	91 31 91 31 91 31 91 31 91 31 91 31 91 31 91 31     .1.1.1.1.1.1.1.1
    1aa9:	91 31 91 31 91 31 91 31 91 31 91 31 91 31 91 31     .1.1.1.1.1.1.1.1
    1ab9:	91 31 91 31 91 31 91 31 91 31 91 31 91 31 91 31     .1.1.1.1.1.1.1.1
    1ac9:	91 31 91 31 91 31 91 31 91 31 91 31 91 31 91 31     .1.1.1.1.1.1.1.1
    1ad9:	91 31 91 31 91 31 91 31 91 31 91 31 91 31 91 31     .1.1.1.1.1.1.1.1
    1ae9:	91 31 91 31 91 31 91 31 91 31 91 31 91 31 e8 31     .1.1.1.1.1.1.1.1

00001af9 <getcFuncs>:
    1af9:	0d 31 fd 30 fd 30 fc 31 fd 30 fd 30 fd 30 fd 30     .1.0.0.1.0.0.0.0
    1b09:	2e 31 fd 30 0d 31 fd 30 fd 30 0d 31 fd 30 fd 30     .1.0.1.0.0.1.0.0
    1b19:	fd 30 08 32 fd 30 02 32 fd 30 fd 30 fd 30 fd 30     .0.2.0.2.0.0.0.0
    1b29:	fc 31 fd 30 fd 30 fc 31 fd 30 fd 30 fd 30 fd 30     .1.0.0.1.0.0.0.0
    1b39:	fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30     .0.0.0.0.0.0.0.0
    1b49:	fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30     .0.0.0.0.0.0.0.0
    1b59:	fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30     .0.0.0.0.0.0.0.0
    1b69:	fd 30 fd 30 fd 30 24 31 fd 30 fd 30 fd 30 fd 30     .0.0.0$1.0.0.0.0
    1b79:	fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30     .0.0.0.0.0.0.0.0
    1b89:	fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30     .0.0.0.0.0.0.0.0
    1b99:	fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30     .0.0.0.0.0.0.0.0
    1ba9:	fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30     .0.0.0.0.0.0.0.0
    1bb9:	fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30     .0.0.0.0.0.0.0.0
    1bc9:	fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30     .0.0.0.0.0.0.0.0
    1bd9:	fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30     .0.0.0.0.0.0.0.0
    1be9:	fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 fd 30 2e 31     .0.0.0.0.0.0.0.1

00001bf9 <readlnFuncs>:
    1bf9:	5e 34 33 34 33 34 9e 34 33 34 33 34 33 34 33 34     ^43434.434343434
    1c09:	8a 34 33 34 5e 34 33 34 33 34 5e 34 33 34 33 34     .434^43434^43434
    1c19:	33 34 aa 34 33 34 a4 34 33 34 33 34 33 34 33 34     34.434.434343434
    1c29:	9e 34 33 34 33 34 9e 34 33 34 33 34 33 34 33 34     .43434.434343434
    1c39:	33 34 33 34 33 34 33 34 33 34 33 34 33 34 33 34     3434343434343434
    1c49:	33 34 33 34 33 34 33 34 33 34 33 34 33 34 33 34     3434343434343434
    1c59:	33 34 33 34 33 34 33 34 33 34 33 34 33 34 33 34     3434343434343434
    1c69:	33 34 33 34 33 34 80 34 33 34 33 34 33 34 33 34     343434.434343434
    1c79:	33 34 33 34 33 34 33 34 33 34 33 34 33 34 33 34     3434343434343434
    1c89:	33 34 33 34 33 34 33 34 33 34 33 34 33 34 33 34     3434343434343434
    1c99:	33 34 33 34 33 34 33 34 33 34 33 34 33 34 33 34     3434343434343434
    1ca9:	33 34 33 34 33 34 33 34 33 34 33 34 33 34 33 34     3434343434343434
    1cb9:	33 34 33 34 33 34 33 34 33 34 33 34 33 34 33 34     3434343434343434
    1cc9:	33 34 33 34 33 34 33 34 33 34 33 34 33 34 33 34     3434343434343434
    1cd9:	33 34 33 34 33 34 33 34 33 34 33 34 33 34 33 34     3434343434343434
    1ce9:	33 34 33 34 33 34 33 34 33 34 33 34 33 34 8a 34     34343434343434.4

00001cf9 <getcFuncs>:
    1cf9:	ca 33 ba 33 ba 33 9e 34 ba 33 ba 33 ba 33 ba 33     .3.3.3.4.3.3.3.3
    1d09:	eb 33 ba 33 ca 33 ba 33 ba 33 ca 33 ba 33 ba 33     .3.3.3.3.3.3.3.3
    1d19:	ba 33 aa 34 ba 33 a4 34 ba 33 ba 33 ba 33 ba 33     .3.4.3.4.3.3.3.3
    1d29:	9e 34 ba 33 ba 33 9e 34 ba 33 ba 33 ba 33 ba 33     .4.3.3.4.3.3.3.3
    1d39:	ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33     .3.3.3.3.3.3.3.3
    1d49:	ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33     .3.3.3.3.3.3.3.3
    1d59:	ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33     .3.3.3.3.3.3.3.3
    1d69:	ba 33 ba 33 ba 33 e1 33 ba 33 ba 33 ba 33 ba 33     .3.3.3.3.3.3.3.3
    1d79:	ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33     .3.3.3.3.3.3.3.3
    1d89:	ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33     .3.3.3.3.3.3.3.3
    1d99:	ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33     .3.3.3.3.3.3.3.3
    1da9:	ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33     .3.3.3.3.3.3.3.3
    1db9:	ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33     .3.3.3.3.3.3.3.3
    1dc9:	ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33     .3.3.3.3.3.3.3.3
    1dd9:	ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33     .3.3.3.3.3.3.3.3
    1de9:	ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 ba 33 eb 33     .3.3.3.3.3.3.3.3

00001df9 <pstr_inf>:
    1df9:	49 4e 46                                            INF

00001dfc <pstr_inity>:
    1dfc:	49 4e 49 54 59                                      INITY

00001e01 <pstr_nan>:
    1e01:	4e 41 4e                                            NAN

00001e04 <pwr_m10>:
    1e04:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1e14:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001e1c <pwr_p10>:
    1e1c:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1e2c:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1e3c:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1e4c:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1e5c:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1e6c:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1e7c:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1e8c:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1e9c:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1eac:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1ebc:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1ecc:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1edc:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1eec:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1efc:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1f0c:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1f1c:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1f2c:	3d 27                                               ='

00001f2e <__ctors_end>:
    1f2e:	11 24       	eor	r1, r1
    1f30:	1f be       	out	0x3f, r1	; 63
    1f32:	cf ef       	ldi	r28, 0xFF	; 255
    1f34:	df e5       	ldi	r29, 0x5F	; 95
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	00 e0       	ldi	r16, 0x00	; 0
    1f3c:	0c bf       	out	0x3c, r16	; 60

00001f3e <__do_copy_data>:
    1f3e:	11 e2       	ldi	r17, 0x21	; 33
    1f40:	a0 e0       	ldi	r26, 0x00	; 0
    1f42:	b0 e2       	ldi	r27, 0x20	; 32
    1f44:	e6 e0       	ldi	r30, 0x06	; 6
    1f46:	f1 e9       	ldi	r31, 0x91	; 145
    1f48:	00 e0       	ldi	r16, 0x00	; 0
    1f4a:	0b bf       	out	0x3b, r16	; 59
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <__do_copy_data+0x14>
    1f4e:	07 90       	elpm	r0, Z+
    1f50:	0d 92       	st	X+, r0
    1f52:	a4 30       	cpi	r26, 0x04	; 4
    1f54:	b1 07       	cpc	r27, r17
    1f56:	d9 f7       	brne	.-10     	; 0x1f4e <__do_copy_data+0x10>

00001f58 <__do_clear_bss>:
    1f58:	15 e2       	ldi	r17, 0x25	; 37
    1f5a:	a4 e0       	ldi	r26, 0x04	; 4
    1f5c:	b1 e2       	ldi	r27, 0x21	; 33
    1f5e:	01 c0       	rjmp	.+2      	; 0x1f62 <.do_clear_bss_start>

00001f60 <.do_clear_bss_loop>:
    1f60:	1d 92       	st	X+, r1

00001f62 <.do_clear_bss_start>:
    1f62:	a6 31       	cpi	r26, 0x16	; 22
    1f64:	b1 07       	cpc	r27, r17
    1f66:	e1 f7       	brne	.-8      	; 0x1f60 <.do_clear_bss_loop>
    1f68:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <main>
    1f6c:	0c 94 81 48 	jmp	0x9102	; 0x9102 <_exit>

00001f70 <__bad_interrupt>:
    1f70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001f74 <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1f74:	f8 94       	cli
	xmega_init();				// xmega setup
    1f76:	0e 94 b5 1b 	call	0x376a	; 0x376a <xmega_init>
	xio_init();					// xmega io subsystem
    1f7a:	0e 94 97 28 	call	0x512e	; 0x512e <xio_init>

	cfg_init();					// get config record from eeprom
    1f7e:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <cfg_init>
	st_init(); 					// stepper subsystem
    1f82:	0e 94 34 24 	call	0x4868	; 0x4868 <st_init>
	ls_init();					// limit switches
    1f86:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <ls_init>
	mv_init();					// move buffers
    1f8a:	0e 94 87 2c 	call	0x590e	; 0x590e <mv_init>
	mc_init();					// motion control subsystem
    1f8e:	0e 94 de 1b 	call	0x37bc	; 0x37bc <mc_init>
	spindle_init();				// spindle controller
    1f92:	0e 94 18 24 	call	0x4830	; 0x4830 <spindle_init>
	en_init();					// encoders
    1f96:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <en_init>
	gc_init();					// gcode-parser
    1f9a:	0e 94 0d 10 	call	0x201a	; 0x201a <gc_init>
	dd_init();					// direct drive commands
    1f9e:	0e 94 83 2c 	call	0x5906	; 0x5906 <dd_init>
	tg_init();					// tinyg parsers
    1fa2:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1fa6:	0e 94 1a 28 	call	0x5034	; 0x5034 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1faa:	e0 ea       	ldi	r30, 0xA0	; 160
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 91 a2 00 	lds	r24, 0x00A2
    1fb2:	81 60       	ori	r24, 0x01	; 1
    1fb4:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1fb6:	80 91 a2 00 	lds	r24, 0x00A2
    1fba:	82 60       	ori	r24, 0x02	; 2
    1fbc:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1fbe:	80 91 a2 00 	lds	r24, 0x00A2
    1fc2:	84 60       	ori	r24, 0x04	; 4
    1fc4:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1fc6:	78 94       	sei

	// Debug help:
	// Pre-load the USB RX (input) buffer with some test strings
	// Be mindful of the 16 char limit on the RX (circular) buffer.
//	xio_usb_queue_RX_char(ETX);			// set control-c (kill)
	xio_usb_queue_RX_string("f\n");
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e2       	ldi	r25, 0x20	; 32
    1fcc:	0e 94 44 32 	call	0x6488	; 0x6488 <xio_usb_queue_RX_string>
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");

	for(;;){
		tg_controller();
    1fd0:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <tg_controller>
    1fd4:	fd cf       	rjmp	.-6      	; 0x1fd0 <main+0x5c>

00001fd6 <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1fd6:	80 93 51 21 	sts	0x2151, r24
	gc.plane_axis_1 = axis_1;
    1fda:	60 93 52 21 	sts	0x2152, r22
	gc.plane_axis_2 = axis_2;
    1fde:	40 93 53 21 	sts	0x2153, r20
}
    1fe2:	08 95       	ret

00001fe4 <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	7b 01       	movw	r14, r22
    1fee:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1ff0:	80 91 11 21 	lds	r24, 0x2111
    1ff4:	88 23       	and	r24, r24
    1ff6:	51 f0       	breq	.+20     	; 0x200c <to_millimeters+0x28>
    1ff8:	c8 01       	movw	r24, r16
    1ffa:	b7 01       	movw	r22, r14
    1ffc:	25 e8       	ldi	r18, 0x85	; 133
    1ffe:	32 e4       	ldi	r19, 0x42	; 66
    2000:	41 e2       	ldi	r20, 0x21	; 33
    2002:	5d e3       	ldi	r21, 0x3D	; 61
    2004:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    2008:	7b 01       	movw	r14, r22
    200a:	8c 01       	movw	r16, r24
}
    200c:	b7 01       	movw	r22, r14
    200e:	c8 01       	movw	r24, r16
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	ff 90       	pop	r15
    2016:	ef 90       	pop	r14
    2018:	08 95       	ret

0000201a <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    201a:	86 e5       	ldi	r24, 0x56	; 86
    201c:	e4 e0       	ldi	r30, 0x04	; 4
    201e:	f1 e2       	ldi	r31, 0x21	; 33
    2020:	df 01       	movw	r26, r30
    2022:	1d 92       	st	X+, r1
    2024:	8a 95       	dec	r24
    2026:	e9 f7       	brne	.-6      	; 0x2022 <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	a0 e0       	ldi	r26, 0x00	; 0
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	80 93 15 21 	sts	0x2115, r24
    2034:	90 93 16 21 	sts	0x2116, r25
    2038:	a0 93 17 21 	sts	0x2117, r26
    203c:	b0 93 18 21 	sts	0x2118, r27
	gc.radius = 0;							// radius value
    2040:	80 93 19 21 	sts	0x2119, r24
    2044:	90 93 1a 21 	sts	0x211A, r25
    2048:	a0 93 1b 21 	sts	0x211B, r26
    204c:	b0 93 1c 21 	sts	0x211C, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    2050:	80 91 87 22 	lds	r24, 0x2287
    2054:	90 91 88 22 	lds	r25, 0x2288
    2058:	a0 91 89 22 	lds	r26, 0x2289
    205c:	b0 91 8a 22 	lds	r27, 0x228A
    2060:	80 93 1d 21 	sts	0x211D, r24
    2064:	90 93 1e 21 	sts	0x211E, r25
    2068:	a0 93 1f 21 	sts	0x211F, r26
    206c:	b0 93 20 21 	sts	0x2120, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    2070:	80 91 8b 22 	lds	r24, 0x228B
    2074:	90 91 8c 22 	lds	r25, 0x228C
    2078:	a0 91 8d 22 	lds	r26, 0x228D
    207c:	b0 91 8e 22 	lds	r27, 0x228E
    2080:	80 93 21 21 	sts	0x2121, r24
    2084:	90 93 22 21 	sts	0x2122, r25
    2088:	a0 93 23 21 	sts	0x2123, r26
    208c:	b0 93 24 21 	sts	0x2124, r27

	gc.absolute_mode = TRUE;
    2090:	21 e0       	ldi	r18, 0x01	; 1
    2092:	20 93 12 21 	sts	0x2112, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a0 e8       	ldi	r26, 0x80	; 128
    209c:	bf eb       	ldi	r27, 0xBF	; 191
    209e:	80 93 29 21 	sts	0x2129, r24
    20a2:	90 93 2a 21 	sts	0x212A, r25
    20a6:	a0 93 2b 21 	sts	0x212B, r26
    20aa:	b0 93 2c 21 	sts	0x212C, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    20ae:	10 92 13 21 	sts	0x2113, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    20b2:	10 92 58 21 	sts	0x2158, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    20b6:	10 92 59 21 	sts	0x2159, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    20ba:	10 92 51 21 	sts	0x2151, r1
	gc.plane_axis_1 = axis_1;
    20be:	20 93 52 21 	sts	0x2152, r18
	gc.plane_axis_2 = axis_2;
    20c2:	82 e0       	ldi	r24, 0x02	; 2
    20c4:	80 93 53 21 	sts	0x2153, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X, Y, Z);
}
    20c8:	08 95       	ret

000020ca <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    20ca:	4f 92       	push	r4
    20cc:	5f 92       	push	r5
    20ce:	6f 92       	push	r6
    20d0:	7f 92       	push	r7
    20d2:	8f 92       	push	r8
    20d4:	9f 92       	push	r9
    20d6:	af 92       	push	r10
    20d8:	bf 92       	push	r11
    20da:	cf 92       	push	r12
    20dc:	df 92       	push	r13
    20de:	ef 92       	push	r14
    20e0:	ff 92       	push	r15
    20e2:	0f 93       	push	r16
    20e4:	1f 93       	push	r17
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	0f 92       	push	r0
    20ec:	0f 92       	push	r0
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	3b 01       	movw	r6, r22
    20f4:	2a 01       	movw	r4, r20
    20f6:	49 01       	movw	r8, r18
    20f8:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    20fa:	d8 01       	movw	r26, r16
    20fc:	ed 91       	ld	r30, X+
    20fe:	fc 91       	ld	r31, X
    2100:	e2 0f       	add	r30, r18
    2102:	f3 1f       	adc	r31, r19
    2104:	e0 81       	ld	r30, Z
    2106:	ee 23       	and	r30, r30
    2108:	41 f0       	breq	.+16     	; 0x211a <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    210a:	dc 01       	movw	r26, r24
    210c:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    210e:	e1 54       	subi	r30, 0x41	; 65
    2110:	ea 31       	cpi	r30, 0x1A	; 26
    2112:	30 f0       	brcs	.+12     	; 0x2120 <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    2114:	8a e0       	ldi	r24, 0x0A	; 10
    2116:	80 93 04 21 	sts	0x2104, r24
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	35 c0       	rjmp	.+106    	; 0x218a <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    2120:	f8 01       	movw	r30, r16
    2122:	80 81       	ld	r24, Z
    2124:	91 81       	ldd	r25, Z+1	; 0x01
    2126:	01 96       	adiw	r24, 0x01	; 1
    2128:	80 83       	st	Z, r24
    212a:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    212c:	89 01       	movw	r16, r18
    212e:	08 0f       	add	r16, r24
    2130:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    2132:	c8 01       	movw	r24, r16
    2134:	be 01       	movw	r22, r28
    2136:	6f 5f       	subi	r22, 0xFF	; 255
    2138:	7f 4f       	sbci	r23, 0xFF	; 255
    213a:	0e 94 b5 44 	call	0x896a	; 0x896a <strtod>
    213e:	6b 01       	movw	r12, r22
    2140:	7c 01       	movw	r14, r24
    2142:	d3 01       	movw	r26, r6
    2144:	6d 93       	st	X+, r22
    2146:	7d 93       	st	X+, r23
    2148:	8d 93       	st	X+, r24
    214a:	9c 93       	st	X, r25
    214c:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	9a 81       	ldd	r25, Y+2	; 0x02
    2152:	80 17       	cp	r24, r16
    2154:	91 07       	cpc	r25, r17
    2156:	11 f4       	brne	.+4      	; 0x215c <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    2158:	8d e0       	ldi	r24, 0x0D	; 13
    215a:	dd cf       	rjmp	.-70     	; 0x2116 <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    215c:	88 19       	sub	r24, r8
    215e:	99 09       	sbc	r25, r9
    2160:	f5 01       	movw	r30, r10
    2162:	80 83       	st	Z, r24
    2164:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    2166:	c7 01       	movw	r24, r14
    2168:	b6 01       	movw	r22, r12
    216a:	0e 94 1a 44 	call	0x8834	; 0x8834 <trunc>
    216e:	9b 01       	movw	r18, r22
    2170:	ac 01       	movw	r20, r24
    2172:	c7 01       	movw	r24, r14
    2174:	b6 01       	movw	r22, r12
    2176:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    217a:	d2 01       	movw	r26, r4
    217c:	6d 93       	st	X+, r22
    217e:	7d 93       	st	X+, r23
    2180:	8d 93       	st	X+, r24
    2182:	9c 93       	st	X, r25
    2184:	13 97       	sbiw	r26, 0x03	; 3
    2186:	21 e0       	ldi	r18, 0x01	; 1
    2188:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    218a:	c9 01       	movw	r24, r18
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	1f 91       	pop	r17
    2196:	0f 91       	pop	r16
    2198:	ff 90       	pop	r15
    219a:	ef 90       	pop	r14
    219c:	df 90       	pop	r13
    219e:	cf 90       	pop	r12
    21a0:	bf 90       	pop	r11
    21a2:	af 90       	pop	r10
    21a4:	9f 90       	pop	r9
    21a6:	8f 90       	pop	r8
    21a8:	7f 90       	pop	r7
    21aa:	6f 90       	pop	r6
    21ac:	5f 90       	pop	r5
    21ae:	4f 90       	pop	r4
    21b0:	08 95       	ret

000021b2 <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    21b2:	af 92       	push	r10
    21b4:	bf 92       	push	r11
    21b6:	cf 92       	push	r12
    21b8:	df 92       	push	r13
    21ba:	ef 92       	push	r14
    21bc:	ff 92       	push	r15
    21be:	0f 93       	push	r16
    21c0:	1f 93       	push	r17
    21c2:	79 01       	movw	r14, r18
    21c4:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    21c6:	5f 77       	andi	r21, 0x7F	; 127
    21c8:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    21cc:	0e 94 6f 40 	call	0x80de	; 0x80de <atan>
    21d0:	5b 01       	movw	r10, r22
    21d2:	6c 01       	movw	r12, r24

	if (y>0) {
    21d4:	c8 01       	movw	r24, r16
    21d6:	b7 01       	movw	r22, r14
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	50 e0       	ldi	r21, 0x00	; 0
    21e0:	0e 94 9a 42 	call	0x8534	; 0x8534 <__gesf2>
    21e4:	18 16       	cp	r1, r24
    21e6:	cc f0       	brlt	.+50     	; 0x221a <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    21e8:	c6 01       	movw	r24, r12
    21ea:	b5 01       	movw	r22, r10
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	50 e0       	ldi	r21, 0x00	; 0
    21f4:	0e 94 9a 42 	call	0x8534	; 0x8534 <__gesf2>
    21f8:	18 16       	cp	r1, r24
    21fa:	2c f4       	brge	.+10     	; 0x2206 <theta+0x54>
	    {
			return(M_PI-theta);
    21fc:	6b ed       	ldi	r22, 0xDB	; 219
    21fe:	7f e0       	ldi	r23, 0x0F	; 15
    2200:	89 e4       	ldi	r24, 0x49	; 73
    2202:	90 e4       	ldi	r25, 0x40	; 64
    2204:	04 c0       	rjmp	.+8      	; 0x220e <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    2206:	6b ed       	ldi	r22, 0xDB	; 219
    2208:	7f e0       	ldi	r23, 0x0F	; 15
    220a:	89 e4       	ldi	r24, 0x49	; 73
    220c:	90 ec       	ldi	r25, 0xC0	; 192
    220e:	a6 01       	movw	r20, r12
    2210:	95 01       	movw	r18, r10
    2212:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    2216:	5b 01       	movw	r10, r22
    2218:	6c 01       	movw	r12, r24
		}
	}
}
    221a:	b5 01       	movw	r22, r10
    221c:	c6 01       	movw	r24, r12
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	ff 90       	pop	r15
    2224:	ef 90       	pop	r14
    2226:	df 90       	pop	r13
    2228:	cf 90       	pop	r12
    222a:	bf 90       	pop	r11
    222c:	af 90       	pop	r10
    222e:	08 95       	ret

00002230 <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    2230:	2f 92       	push	r2
    2232:	3f 92       	push	r3
    2234:	4f 92       	push	r4
    2236:	5f 92       	push	r5
    2238:	6f 92       	push	r6
    223a:	7f 92       	push	r7
    223c:	8f 92       	push	r8
    223e:	9f 92       	push	r9
    2240:	af 92       	push	r10
    2242:	bf 92       	push	r11
    2244:	cf 92       	push	r12
    2246:	df 92       	push	r13
    2248:	ef 92       	push	r14
    224a:	ff 92       	push	r15
    224c:	0f 93       	push	r16
    224e:	1f 93       	push	r17
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	68 97       	sbiw	r28, 0x18	; 24
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    2260:	19 82       	std	Y+1, r1	; 0x01
    2262:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    2264:	e9 e3       	ldi	r30, 0x39	; 57
    2266:	f1 e2       	ldi	r31, 0x21	; 33
    2268:	8c e0       	ldi	r24, 0x0C	; 12
    226a:	df 01       	movw	r26, r30
    226c:	28 2f       	mov	r18, r24
    226e:	1d 92       	st	X+, r1
    2270:	2a 95       	dec	r18
    2272:	e9 f7       	brne	.-6      	; 0x226e <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    2274:	3c 96       	adiw	r30, 0x0c	; 12
    2276:	df 01       	movw	r26, r30
    2278:	1d 92       	st	X+, r1
    227a:	8a 95       	dec	r24
    227c:	e9 f7       	brne	.-6      	; 0x2278 <gc_execute_block+0x48>

	gc.status = TG_OK;
    227e:	10 92 04 21 	sts	0x2104, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    2282:	10 92 14 21 	sts	0x2114, r1
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set
    2286:	10 92 59 21 	sts	0x2159, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    228a:	5e 01       	movw	r10, r28
    228c:	08 94       	sec
    228e:	a1 1c       	adc	r10, r1
    2290:	b1 1c       	adc	r11, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    2292:	ff 24       	eor	r15, r15
    2294:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    2296:	bc e0       	ldi	r27, 0x0C	; 12
    2298:	cb 2e       	mov	r12, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    229a:	a2 e0       	ldi	r26, 0x02	; 2
    229c:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    229e:	77 24       	eor	r7, r7
    22a0:	7a 94       	dec	r7

					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    22a2:	f3 e0       	ldi	r31, 0x03	; 3
    22a4:	df 2e       	mov	r13, r31

					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    22a6:	e4 e0       	ldi	r30, 0x04	; 4
    22a8:	6e 2e       	mov	r6, r30
    22aa:	0a c1       	rjmp	.+532    	; 0x24c0 <gc_execute_block+0x290>
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    22ac:	80 91 05 21 	lds	r24, 0x2105
    22b0:	8d 34       	cpi	r24, 0x4D	; 77
    22b2:	09 f4       	brne	.+2      	; 0x22b6 <gc_execute_block+0x86>
    22b4:	be c0       	rjmp	.+380    	; 0x2432 <gc_execute_block+0x202>
    22b6:	84 35       	cpi	r24, 0x54	; 84
    22b8:	09 f4       	brne	.+2      	; 0x22bc <gc_execute_block+0x8c>
    22ba:	f0 c0       	rjmp	.+480    	; 0x249c <gc_execute_block+0x26c>
    22bc:	87 34       	cpi	r24, 0x47	; 71
    22be:	09 f0       	breq	.+2      	; 0x22c2 <gc_execute_block+0x92>
    22c0:	fb c0       	rjmp	.+502    	; 0x24b8 <gc_execute_block+0x288>
			case 'G':
				switch((int)gc.value) {
    22c2:	60 91 06 21 	lds	r22, 0x2106
    22c6:	70 91 07 21 	lds	r23, 0x2107
    22ca:	80 91 08 21 	lds	r24, 0x2108
    22ce:	90 91 09 21 	lds	r25, 0x2109
    22d2:	0e 94 19 41 	call	0x8232	; 0x8232 <__fixsfsi>
    22d6:	65 31       	cpi	r22, 0x15	; 21
    22d8:	71 05       	cpc	r23, r1
    22da:	09 f4       	brne	.+2      	; 0x22de <gc_execute_block+0xae>
    22dc:	8f c0       	rjmp	.+286    	; 0x23fc <gc_execute_block+0x1cc>
    22de:	66 31       	cpi	r22, 0x16	; 22
    22e0:	71 05       	cpc	r23, r1
    22e2:	84 f5       	brge	.+96     	; 0x2344 <gc_execute_block+0x114>
    22e4:	64 30       	cpi	r22, 0x04	; 4
    22e6:	71 05       	cpc	r23, r1
    22e8:	09 f4       	brne	.+2      	; 0x22ec <gc_execute_block+0xbc>
    22ea:	6d c0       	rjmp	.+218    	; 0x23c6 <gc_execute_block+0x196>
    22ec:	65 30       	cpi	r22, 0x05	; 5
    22ee:	71 05       	cpc	r23, r1
    22f0:	a4 f4       	brge	.+40     	; 0x231a <gc_execute_block+0xea>
    22f2:	61 30       	cpi	r22, 0x01	; 1
    22f4:	71 05       	cpc	r23, r1
    22f6:	09 f4       	brne	.+2      	; 0x22fa <gc_execute_block+0xca>
    22f8:	57 c0       	rjmp	.+174    	; 0x23a8 <gc_execute_block+0x178>
    22fa:	62 30       	cpi	r22, 0x02	; 2
    22fc:	71 05       	cpc	r23, r1
    22fe:	24 f4       	brge	.+8      	; 0x2308 <gc_execute_block+0xd8>
    2300:	67 2b       	or	r22, r23
    2302:	09 f4       	brne	.+2      	; 0x2306 <gc_execute_block+0xd6>
    2304:	4c c0       	rjmp	.+152    	; 0x239e <gc_execute_block+0x16e>
    2306:	c7 c0       	rjmp	.+398    	; 0x2496 <gc_execute_block+0x266>
    2308:	62 30       	cpi	r22, 0x02	; 2
    230a:	71 05       	cpc	r23, r1
    230c:	09 f4       	brne	.+2      	; 0x2310 <gc_execute_block+0xe0>
    230e:	51 c0       	rjmp	.+162    	; 0x23b2 <gc_execute_block+0x182>
    2310:	63 30       	cpi	r22, 0x03	; 3
    2312:	71 05       	cpc	r23, r1
    2314:	09 f0       	breq	.+2      	; 0x2318 <gc_execute_block+0xe8>
    2316:	bf c0       	rjmp	.+382    	; 0x2496 <gc_execute_block+0x266>
    2318:	51 c0       	rjmp	.+162    	; 0x23bc <gc_execute_block+0x18c>
    231a:	62 31       	cpi	r22, 0x12	; 18
    231c:	71 05       	cpc	r23, r1
    231e:	09 f4       	brne	.+2      	; 0x2322 <gc_execute_block+0xf2>
    2320:	5c c0       	rjmp	.+184    	; 0x23da <gc_execute_block+0x1aa>
    2322:	63 31       	cpi	r22, 0x13	; 19
    2324:	71 05       	cpc	r23, r1
    2326:	2c f4       	brge	.+10     	; 0x2332 <gc_execute_block+0x102>
    2328:	61 31       	cpi	r22, 0x11	; 17
    232a:	71 05       	cpc	r23, r1
    232c:	09 f0       	breq	.+2      	; 0x2330 <gc_execute_block+0x100>
    232e:	b3 c0       	rjmp	.+358    	; 0x2496 <gc_execute_block+0x266>
    2330:	4d c0       	rjmp	.+154    	; 0x23cc <gc_execute_block+0x19c>
    2332:	63 31       	cpi	r22, 0x13	; 19
    2334:	71 05       	cpc	r23, r1
    2336:	09 f4       	brne	.+2      	; 0x233a <gc_execute_block+0x10a>
    2338:	57 c0       	rjmp	.+174    	; 0x23e8 <gc_execute_block+0x1b8>
    233a:	64 31       	cpi	r22, 0x14	; 20
    233c:	71 05       	cpc	r23, r1
    233e:	09 f0       	breq	.+2      	; 0x2342 <gc_execute_block+0x112>
    2340:	aa c0       	rjmp	.+340    	; 0x2496 <gc_execute_block+0x266>
    2342:	59 c0       	rjmp	.+178    	; 0x23f6 <gc_execute_block+0x1c6>
    2344:	6a 35       	cpi	r22, 0x5A	; 90
    2346:	71 05       	cpc	r23, r1
    2348:	09 f4       	brne	.+2      	; 0x234c <gc_execute_block+0x11c>
    234a:	64 c0       	rjmp	.+200    	; 0x2414 <gc_execute_block+0x1e4>
    234c:	6b 35       	cpi	r22, 0x5B	; 91
    234e:	71 05       	cpc	r23, r1
    2350:	ac f4       	brge	.+42     	; 0x237c <gc_execute_block+0x14c>
    2352:	6e 31       	cpi	r22, 0x1E	; 30
    2354:	71 05       	cpc	r23, r1
    2356:	09 f4       	brne	.+2      	; 0x235a <gc_execute_block+0x12a>
    2358:	54 c0       	rjmp	.+168    	; 0x2402 <gc_execute_block+0x1d2>
    235a:	6f 31       	cpi	r22, 0x1F	; 31
    235c:	71 05       	cpc	r23, r1
    235e:	2c f4       	brge	.+10     	; 0x236a <gc_execute_block+0x13a>
    2360:	6c 31       	cpi	r22, 0x1C	; 28
    2362:	71 05       	cpc	r23, r1
    2364:	09 f0       	breq	.+2      	; 0x2368 <gc_execute_block+0x138>
    2366:	97 c0       	rjmp	.+302    	; 0x2496 <gc_execute_block+0x266>
    2368:	4c c0       	rjmp	.+152    	; 0x2402 <gc_execute_block+0x1d2>
    236a:	65 33       	cpi	r22, 0x35	; 53
    236c:	71 05       	cpc	r23, r1
    236e:	09 f4       	brne	.+2      	; 0x2372 <gc_execute_block+0x142>
    2370:	4b c0       	rjmp	.+150    	; 0x2408 <gc_execute_block+0x1d8>
    2372:	60 35       	cpi	r22, 0x50	; 80
    2374:	71 05       	cpc	r23, r1
    2376:	09 f0       	breq	.+2      	; 0x237a <gc_execute_block+0x14a>
    2378:	8e c0       	rjmp	.+284    	; 0x2496 <gc_execute_block+0x266>
    237a:	49 c0       	rjmp	.+146    	; 0x240e <gc_execute_block+0x1de>
    237c:	6c 35       	cpi	r22, 0x5C	; 92
    237e:	71 05       	cpc	r23, r1
    2380:	09 f4       	brne	.+2      	; 0x2384 <gc_execute_block+0x154>
    2382:	4e c0       	rjmp	.+156    	; 0x2420 <gc_execute_block+0x1f0>
    2384:	6c 35       	cpi	r22, 0x5C	; 92
    2386:	71 05       	cpc	r23, r1
    2388:	0c f4       	brge	.+2      	; 0x238c <gc_execute_block+0x15c>
    238a:	47 c0       	rjmp	.+142    	; 0x241a <gc_execute_block+0x1ea>
    238c:	6d 35       	cpi	r22, 0x5D	; 93
    238e:	71 05       	cpc	r23, r1
    2390:	09 f4       	brne	.+2      	; 0x2394 <gc_execute_block+0x164>
    2392:	49 c0       	rjmp	.+146    	; 0x2426 <gc_execute_block+0x1f6>
    2394:	6e 35       	cpi	r22, 0x5E	; 94
    2396:	71 05       	cpc	r23, r1
    2398:	09 f0       	breq	.+2      	; 0x239c <gc_execute_block+0x16c>
    239a:	7d c0       	rjmp	.+250    	; 0x2496 <gc_execute_block+0x266>
    239c:	47 c0       	rjmp	.+142    	; 0x242c <gc_execute_block+0x1fc>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    239e:	f0 92 59 21 	sts	0x2159, r15
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    23a2:	10 92 0f 21 	sts	0x210F, r1
    23a6:	88 c0       	rjmp	.+272    	; 0x24b8 <gc_execute_block+0x288>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    23a8:	f0 92 59 21 	sts	0x2159, r15
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    23ac:	f0 92 0f 21 	sts	0x210F, r15
    23b0:	83 c0       	rjmp	.+262    	; 0x24b8 <gc_execute_block+0x288>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    23b2:	f0 92 59 21 	sts	0x2159, r15
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    23b6:	e0 92 0f 21 	sts	0x210F, r14
    23ba:	7e c0       	rjmp	.+252    	; 0x24b8 <gc_execute_block+0x288>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    23bc:	f0 92 59 21 	sts	0x2159, r15
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    23c0:	d0 92 0f 21 	sts	0x210F, r13
    23c4:	79 c0       	rjmp	.+242    	; 0x24b8 <gc_execute_block+0x288>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    23c6:	e0 92 59 21 	sts	0x2159, r14
    23ca:	76 c0       	rjmp	.+236    	; 0x24b8 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23cc:	10 92 51 21 	sts	0x2151, r1
	gc.plane_axis_1 = axis_1;
    23d0:	f0 92 52 21 	sts	0x2152, r15
	gc.plane_axis_2 = axis_2;
    23d4:	e0 92 53 21 	sts	0x2153, r14
    23d8:	6f c0       	rjmp	.+222    	; 0x24b8 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23da:	10 92 51 21 	sts	0x2151, r1
	gc.plane_axis_1 = axis_1;
    23de:	e0 92 52 21 	sts	0x2152, r14
	gc.plane_axis_2 = axis_2;
    23e2:	f0 92 53 21 	sts	0x2153, r15
    23e6:	68 c0       	rjmp	.+208    	; 0x24b8 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23e8:	f0 92 51 21 	sts	0x2151, r15
	gc.plane_axis_1 = axis_1;
    23ec:	e0 92 52 21 	sts	0x2152, r14
	gc.plane_axis_2 = axis_2;
    23f0:	10 92 53 21 	sts	0x2153, r1
    23f4:	61 c0       	rjmp	.+194    	; 0x24b8 <gc_execute_block+0x288>

					case 17: { select_plane(X, Y, Z); break; }
					case 18: { select_plane(X, Z, Y); break; }
					case 19: { select_plane(Y, Z, X); break; }

					case 20: { gc.inches_mode = TRUE; break; }
    23f6:	f0 92 11 21 	sts	0x2111, r15
    23fa:	5e c0       	rjmp	.+188    	; 0x24b8 <gc_execute_block+0x288>
					case 21: { gc.inches_mode = FALSE; break; }
    23fc:	10 92 11 21 	sts	0x2111, r1
    2400:	5b c0       	rjmp	.+182    	; 0x24b8 <gc_execute_block+0x288>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    2402:	d0 92 59 21 	sts	0x2159, r13
    2406:	58 c0       	rjmp	.+176    	; 0x24b8 <gc_execute_block+0x288>

					case 53: { gc.absolute_override = TRUE; break; }
    2408:	f0 92 58 21 	sts	0x2158, r15
    240c:	55 c0       	rjmp	.+170    	; 0x24b8 <gc_execute_block+0x288>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    240e:	60 92 0f 21 	sts	0x210F, r6
    2412:	52 c0       	rjmp	.+164    	; 0x24b8 <gc_execute_block+0x288>
					case 90: { gc.absolute_mode = TRUE; break; }
    2414:	f0 92 12 21 	sts	0x2112, r15
    2418:	4f c0       	rjmp	.+158    	; 0x24b8 <gc_execute_block+0x288>
					case 91: { gc.absolute_mode = FALSE; break; }
    241a:	10 92 12 21 	sts	0x2112, r1
    241e:	4c c0       	rjmp	.+152    	; 0x24b8 <gc_execute_block+0x288>
					case 92: { gc.set_origin_mode = TRUE; break; }
    2420:	f0 92 14 21 	sts	0x2114, r15
    2424:	49 c0       	rjmp	.+146    	; 0x24b8 <gc_execute_block+0x288>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    2426:	f0 92 10 21 	sts	0x2110, r15
    242a:	46 c0       	rjmp	.+140    	; 0x24b8 <gc_execute_block+0x288>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    242c:	10 92 10 21 	sts	0x2110, r1
    2430:	43 c0       	rjmp	.+134    	; 0x24b8 <gc_execute_block+0x288>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    2432:	60 91 06 21 	lds	r22, 0x2106
    2436:	70 91 07 21 	lds	r23, 0x2107
    243a:	80 91 08 21 	lds	r24, 0x2108
    243e:	90 91 09 21 	lds	r25, 0x2109
    2442:	0e 94 19 41 	call	0x8232	; 0x8232 <__fixsfsi>
    2446:	63 30       	cpi	r22, 0x03	; 3
    2448:	71 05       	cpc	r23, r1
    244a:	e1 f0       	breq	.+56     	; 0x2484 <gc_execute_block+0x254>
    244c:	64 30       	cpi	r22, 0x04	; 4
    244e:	71 05       	cpc	r23, r1
    2450:	34 f4       	brge	.+12     	; 0x245e <gc_execute_block+0x22e>
    2452:	77 fd       	sbrc	r23, 7
    2454:	20 c0       	rjmp	.+64     	; 0x2496 <gc_execute_block+0x266>
    2456:	62 30       	cpi	r22, 0x02	; 2
    2458:	71 05       	cpc	r23, r1
    245a:	74 f0       	brlt	.+28     	; 0x2478 <gc_execute_block+0x248>
    245c:	10 c0       	rjmp	.+32     	; 0x247e <gc_execute_block+0x24e>
    245e:	65 30       	cpi	r22, 0x05	; 5
    2460:	71 05       	cpc	r23, r1
    2462:	b1 f0       	breq	.+44     	; 0x2490 <gc_execute_block+0x260>
    2464:	65 30       	cpi	r22, 0x05	; 5
    2466:	71 05       	cpc	r23, r1
    2468:	84 f0       	brlt	.+32     	; 0x248a <gc_execute_block+0x25a>
    246a:	6e 31       	cpi	r22, 0x1E	; 30
    246c:	71 05       	cpc	r23, r1
    246e:	39 f0       	breq	.+14     	; 0x247e <gc_execute_block+0x24e>
    2470:	6c 33       	cpi	r22, 0x3C	; 60
    2472:	71 05       	cpc	r23, r1
    2474:	81 f4       	brne	.+32     	; 0x2496 <gc_execute_block+0x266>
    2476:	03 c0       	rjmp	.+6      	; 0x247e <gc_execute_block+0x24e>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    2478:	f0 92 0e 21 	sts	0x210E, r15
    247c:	1d c0       	rjmp	.+58     	; 0x24b8 <gc_execute_block+0x288>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    247e:	e0 92 0e 21 	sts	0x210E, r14
    2482:	1a c0       	rjmp	.+52     	; 0x24b8 <gc_execute_block+0x288>
					case 3: gc.spindle_direction = 1; break;
    2484:	f0 92 55 21 	sts	0x2155, r15
    2488:	17 c0       	rjmp	.+46     	; 0x24b8 <gc_execute_block+0x288>
					case 4: gc.spindle_direction = -1; break;
    248a:	70 92 55 21 	sts	0x2155, r7
    248e:	14 c0       	rjmp	.+40     	; 0x24b8 <gc_execute_block+0x288>
					case 5: gc.spindle_direction = 0; break;
    2490:	10 92 55 21 	sts	0x2155, r1
    2494:	11 c0       	rjmp	.+34     	; 0x24b8 <gc_execute_block+0x288>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    2496:	c0 92 04 21 	sts	0x2104, r12
    249a:	0e c0       	rjmp	.+28     	; 0x24b8 <gc_execute_block+0x288>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    249c:	60 91 06 21 	lds	r22, 0x2106
    24a0:	70 91 07 21 	lds	r23, 0x2107
    24a4:	80 91 08 21 	lds	r24, 0x2108
    24a8:	90 91 09 21 	lds	r25, 0x2109
    24ac:	0e 94 1a 44 	call	0x8834	; 0x8834 <trunc>
    24b0:	0e 94 1e 41 	call	0x823c	; 0x823c <__fixunssfsi>
    24b4:	60 93 54 21 	sts	0x2154, r22
		}
		if(gc.status) {
    24b8:	80 91 04 21 	lds	r24, 0x2104
    24bc:	88 23       	and	r24, r24
    24be:	69 f4       	brne	.+26     	; 0x24da <gc_execute_block+0x2aa>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    24c0:	85 e0       	ldi	r24, 0x05	; 5
    24c2:	91 e2       	ldi	r25, 0x21	; 33
    24c4:	66 e0       	ldi	r22, 0x06	; 6
    24c6:	71 e2       	ldi	r23, 0x21	; 33
    24c8:	4a e0       	ldi	r20, 0x0A	; 10
    24ca:	51 e2       	ldi	r21, 0x21	; 33
    24cc:	94 01       	movw	r18, r8
    24ce:	85 01       	movw	r16, r10
    24d0:	0e 94 65 10 	call	0x20ca	; 0x20ca <_gc_next_statement>
    24d4:	89 2b       	or	r24, r25
    24d6:	09 f0       	breq	.+2      	; 0x24da <gc_execute_block+0x2aa>
    24d8:	e9 ce       	rjmp	.-558    	; 0x22ac <gc_execute_block+0x7c>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    24da:	80 91 04 21 	lds	r24, 0x2104
    24de:	88 23       	and	r24, r24
    24e0:	09 f0       	breq	.+2      	; 0x24e4 <gc_execute_block+0x2b4>
    24e2:	97 c3       	rjmp	.+1838   	; 0x2c12 <gc_execute_block+0x9e2>
		return(gc.status); 
	}

	i = 0;
    24e4:	19 82       	std	Y+1, r1	; 0x01
    24e6:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    24e8:	e5 e4       	ldi	r30, 0x45	; 69
    24ea:	f1 e2       	ldi	r31, 0x21	; 33
    24ec:	8c e0       	ldi	r24, 0x0C	; 12
    24ee:	df 01       	movw	r26, r30
    24f0:	1d 92       	st	X+, r1
    24f2:	8a 95       	dec	r24
    24f4:	e9 f7       	brne	.-6      	; 0x24f0 <gc_execute_block+0x2c0>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    24f6:	df 01       	movw	r26, r30
    24f8:	1c 97       	sbiw	r26, 0x0c	; 12
    24fa:	78 97       	sbiw	r30, 0x18	; 24
    24fc:	8c e0       	ldi	r24, 0x0C	; 12
    24fe:	01 90       	ld	r0, Z+
    2500:	0d 92       	st	X+, r0
    2502:	81 50       	subi	r24, 0x01	; 1
    2504:	e1 f7       	brne	.-8      	; 0x24fe <gc_execute_block+0x2ce>
    2506:	c6 c0       	rjmp	.+396    	; 0x2694 <gc_execute_block+0x464>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2508:	c0 90 06 21 	lds	r12, 0x2106
    250c:	d0 90 07 21 	lds	r13, 0x2107
    2510:	e0 90 08 21 	lds	r14, 0x2108
    2514:	f0 90 09 21 	lds	r15, 0x2109
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    2518:	80 91 11 21 	lds	r24, 0x2111
    251c:	88 23       	and	r24, r24
    251e:	19 f4       	brne	.+6      	; 0x2526 <gc_execute_block+0x2f6>
    2520:	a7 01       	movw	r20, r14
    2522:	96 01       	movw	r18, r12
    2524:	0a c0       	rjmp	.+20     	; 0x253a <gc_execute_block+0x30a>
    2526:	c7 01       	movw	r24, r14
    2528:	b6 01       	movw	r22, r12
    252a:	25 e8       	ldi	r18, 0x85	; 133
    252c:	32 e4       	ldi	r19, 0x42	; 66
    252e:	41 e2       	ldi	r20, 0x21	; 33
    2530:	5d e3       	ldi	r21, 0x3D	; 61
    2532:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    2536:	9b 01       	movw	r18, r22
    2538:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    253a:	20 93 25 21 	sts	0x2125, r18
    253e:	30 93 26 21 	sts	0x2126, r19
    2542:	40 93 27 21 	sts	0x2127, r20
    2546:	50 93 28 21 	sts	0x2128, r21
		switch(gc.letter) {
    254a:	00 91 05 21 	lds	r16, 0x2105
    254e:	00 35       	cpi	r16, 0x50	; 80
    2550:	09 f4       	brne	.+2      	; 0x2554 <gc_execute_block+0x324>
    2552:	47 c0       	rjmp	.+142    	; 0x25e2 <gc_execute_block+0x3b2>
    2554:	01 35       	cpi	r16, 0x51	; 81
    2556:	58 f4       	brcc	.+22     	; 0x256e <gc_execute_block+0x33e>
    2558:	06 34       	cpi	r16, 0x46	; 70
    255a:	c1 f0       	breq	.+48     	; 0x258c <gc_execute_block+0x35c>
    255c:	06 34       	cpi	r16, 0x46	; 70
    255e:	08 f4       	brcc	.+2      	; 0x2562 <gc_execute_block+0x332>
    2560:	9f c0       	rjmp	.+318    	; 0x26a0 <gc_execute_block+0x470>
    2562:	80 2f       	mov	r24, r16
    2564:	89 54       	subi	r24, 0x49	; 73
    2566:	83 30       	cpi	r24, 0x03	; 3
    2568:	08 f0       	brcs	.+2      	; 0x256c <gc_execute_block+0x33c>
    256a:	9a c0       	rjmp	.+308    	; 0x26a0 <gc_execute_block+0x470>
    256c:	2d c0       	rjmp	.+90     	; 0x25c8 <gc_execute_block+0x398>
    256e:	03 35       	cpi	r16, 0x53	; 83
    2570:	09 f4       	brne	.+2      	; 0x2574 <gc_execute_block+0x344>
    2572:	4b c0       	rjmp	.+150    	; 0x260a <gc_execute_block+0x3da>
    2574:	04 35       	cpi	r16, 0x54	; 84
    2576:	20 f4       	brcc	.+8      	; 0x2580 <gc_execute_block+0x350>
    2578:	02 35       	cpi	r16, 0x52	; 82
    257a:	09 f0       	breq	.+2      	; 0x257e <gc_execute_block+0x34e>
    257c:	91 c0       	rjmp	.+290    	; 0x26a0 <gc_execute_block+0x470>
    257e:	3a c0       	rjmp	.+116    	; 0x25f4 <gc_execute_block+0x3c4>
    2580:	80 2f       	mov	r24, r16
    2582:	88 55       	subi	r24, 0x58	; 88
    2584:	83 30       	cpi	r24, 0x03	; 3
    2586:	08 f0       	brcs	.+2      	; 0x258a <gc_execute_block+0x35a>
    2588:	8b c0       	rjmp	.+278    	; 0x26a0 <gc_execute_block+0x470>
    258a:	48 c0       	rjmp	.+144    	; 0x261c <gc_execute_block+0x3ec>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    258c:	80 91 10 21 	lds	r24, 0x2110
    2590:	88 23       	and	r24, r24
    2592:	49 f0       	breq	.+18     	; 0x25a6 <gc_execute_block+0x376>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    2594:	20 93 29 21 	sts	0x2129, r18
    2598:	30 93 2a 21 	sts	0x212A, r19
    259c:	40 93 2b 21 	sts	0x212B, r20
    25a0:	50 93 2c 21 	sts	0x212C, r21
    25a4:	7d c0       	rjmp	.+250    	; 0x26a0 <gc_execute_block+0x470>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    25a6:	ca 01       	movw	r24, r20
    25a8:	b9 01       	movw	r22, r18
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	40 e7       	ldi	r20, 0x70	; 112
    25b0:	52 e4       	ldi	r21, 0x42	; 66
    25b2:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    25b6:	60 93 1d 21 	sts	0x211D, r22
    25ba:	70 93 1e 21 	sts	0x211E, r23
    25be:	80 93 1f 21 	sts	0x211F, r24
    25c2:	90 93 20 21 	sts	0x2120, r25
    25c6:	6c c0       	rjmp	.+216    	; 0x26a0 <gc_execute_block+0x470>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    25c8:	e0 2f       	mov	r30, r16
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	ee 0f       	add	r30, r30
    25ce:	ff 1f       	adc	r31, r31
    25d0:	ee 0f       	add	r30, r30
    25d2:	ff 1f       	adc	r31, r31
    25d4:	ef 5d       	subi	r30, 0xDF	; 223
    25d6:	ff 4d       	sbci	r31, 0xDF	; 223
    25d8:	20 83       	st	Z, r18
    25da:	31 83       	std	Z+1, r19	; 0x01
    25dc:	42 83       	std	Z+2, r20	; 0x02
    25de:	53 83       	std	Z+3, r21	; 0x03
    25e0:	5f c0       	rjmp	.+190    	; 0x26a0 <gc_execute_block+0x470>
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
    25e2:	c0 92 15 21 	sts	0x2115, r12
    25e6:	d0 92 16 21 	sts	0x2116, r13
    25ea:	e0 92 17 21 	sts	0x2117, r14
    25ee:	f0 92 18 21 	sts	0x2118, r15
    25f2:	56 c0       	rjmp	.+172    	; 0x26a0 <gc_execute_block+0x470>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    25f4:	20 93 19 21 	sts	0x2119, r18
    25f8:	30 93 1a 21 	sts	0x211A, r19
    25fc:	40 93 1b 21 	sts	0x211B, r20
    2600:	50 93 1c 21 	sts	0x211C, r21
    2604:	70 92 13 21 	sts	0x2113, r7
    2608:	4b c0       	rjmp	.+150    	; 0x26a0 <gc_execute_block+0x470>
			case 'S': gc.spindle_speed = gc.value; break;
    260a:	c7 01       	movw	r24, r14
    260c:	b6 01       	movw	r22, r12
    260e:	0e 94 19 41 	call	0x8232	; 0x8232 <__fixsfsi>
    2612:	60 93 56 21 	sts	0x2156, r22
    2616:	70 93 57 21 	sts	0x2157, r23
    261a:	42 c0       	rjmp	.+132    	; 0x26a0 <gc_execute_block+0x470>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    261c:	80 91 14 21 	lds	r24, 0x2114
    2620:	88 23       	and	r24, r24
    2622:	69 f0       	breq	.+26     	; 0x263e <gc_execute_block+0x40e>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    2624:	e0 2f       	mov	r30, r16
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	ee 0f       	add	r30, r30
    262a:	ff 1f       	adc	r31, r31
    262c:	ee 0f       	add	r30, r30
    262e:	ff 1f       	adc	r31, r31
    2630:	ec 55       	subi	r30, 0x5C	; 92
    2632:	f0 4e       	sbci	r31, 0xE0	; 224
    2634:	21 a7       	std	Z+41, r18	; 0x29
    2636:	32 a7       	std	Z+42, r19	; 0x2a
    2638:	43 a7       	std	Z+43, r20	; 0x2b
    263a:	54 a7       	std	Z+44, r21	; 0x2c
    263c:	31 c0       	rjmp	.+98     	; 0x26a0 <gc_execute_block+0x470>
				} else if (gc.absolute_mode || gc.absolute_override) {
    263e:	80 91 12 21 	lds	r24, 0x2112
    2642:	88 23       	and	r24, r24
    2644:	21 f4       	brne	.+8      	; 0x264e <gc_execute_block+0x41e>
    2646:	80 91 58 21 	lds	r24, 0x2158
    264a:	88 23       	and	r24, r24
    264c:	69 f0       	breq	.+26     	; 0x2668 <gc_execute_block+0x438>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    264e:	e0 2f       	mov	r30, r16
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	ee 0f       	add	r30, r30
    2654:	ff 1f       	adc	r31, r31
    2656:	ee 0f       	add	r30, r30
    2658:	ff 1f       	adc	r31, r31
    265a:	ec 55       	subi	r30, 0x5C	; 92
    265c:	f0 4e       	sbci	r31, 0xE0	; 224
    265e:	25 ab       	std	Z+53, r18	; 0x35
    2660:	36 ab       	std	Z+54, r19	; 0x36
    2662:	47 ab       	std	Z+55, r20	; 0x37
    2664:	50 af       	std	Z+56, r21	; 0x38
    2666:	1c c0       	rjmp	.+56     	; 0x26a0 <gc_execute_block+0x470>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    2668:	10 e0       	ldi	r17, 0x00	; 0
    266a:	00 0f       	add	r16, r16
    266c:	11 1f       	adc	r17, r17
    266e:	00 0f       	add	r16, r16
    2670:	11 1f       	adc	r17, r17
    2672:	0c 55       	subi	r16, 0x5C	; 92
    2674:	10 4e       	sbci	r17, 0xE0	; 224
    2676:	f8 01       	movw	r30, r16
    2678:	65 a9       	ldd	r22, Z+53	; 0x35
    267a:	76 a9       	ldd	r23, Z+54	; 0x36
    267c:	87 a9       	ldd	r24, Z+55	; 0x37
    267e:	90 ad       	ldd	r25, Z+56	; 0x38
    2680:	0e 94 0b 40 	call	0x8016	; 0x8016 <__addsf3>
    2684:	d8 01       	movw	r26, r16
    2686:	d5 96       	adiw	r26, 0x35	; 53
    2688:	6d 93       	st	X+, r22
    268a:	7d 93       	st	X+, r23
    268c:	8d 93       	st	X+, r24
    268e:	9c 93       	st	X, r25
    2690:	d8 97       	sbiw	r26, 0x38	; 56
    2692:	06 c0       	rjmp	.+12     	; 0x26a0 <gc_execute_block+0x470>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2694:	5e 01       	movw	r10, r28
    2696:	08 94       	sec
    2698:	a1 1c       	adc	r10, r1
    269a:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    269c:	77 24       	eor	r7, r7
    269e:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    26a0:	85 e0       	ldi	r24, 0x05	; 5
    26a2:	91 e2       	ldi	r25, 0x21	; 33
    26a4:	66 e0       	ldi	r22, 0x06	; 6
    26a6:	71 e2       	ldi	r23, 0x21	; 33
    26a8:	4a e0       	ldi	r20, 0x0A	; 10
    26aa:	51 e2       	ldi	r21, 0x21	; 33
    26ac:	94 01       	movw	r18, r8
    26ae:	85 01       	movw	r16, r10
    26b0:	0e 94 65 10 	call	0x20ca	; 0x20ca <_gc_next_statement>
    26b4:	89 2b       	or	r24, r25
    26b6:	09 f0       	breq	.+2      	; 0x26ba <gc_execute_block+0x48a>
    26b8:	27 cf       	rjmp	.-434    	; 0x2508 <gc_execute_block+0x2d8>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    26ba:	80 91 04 21 	lds	r24, 0x2104
    26be:	88 23       	and	r24, r24
    26c0:	09 f0       	breq	.+2      	; 0x26c4 <gc_execute_block+0x494>
    26c2:	a7 c2       	rjmp	.+1358   	; 0x2c12 <gc_execute_block+0x9e2>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    26c4:	80 91 55 21 	lds	r24, 0x2155
    26c8:	88 23       	and	r24, r24
    26ca:	71 f0       	breq	.+28     	; 0x26e8 <gc_execute_block+0x4b8>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    26cc:	40 91 56 21 	lds	r20, 0x2156
    26d0:	50 91 57 21 	lds	r21, 0x2157
    26d4:	66 27       	eor	r22, r22
    26d6:	57 fd       	sbrc	r21, 7
    26d8:	60 95       	com	r22
    26da:	76 2f       	mov	r23, r22
    26dc:	99 27       	eor	r25, r25
    26de:	87 fd       	sbrc	r24, 7
    26e0:	90 95       	com	r25
    26e2:	0e 94 1f 24 	call	0x483e	; 0x483e <spindle_run>
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <gc_execute_block+0x4bc>
	} else {
		spindle_stop();
    26e8:	0e 94 2f 24 	call	0x485e	; 0x485e <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    26ec:	80 91 59 21 	lds	r24, 0x2159
    26f0:	82 30       	cpi	r24, 0x02	; 2
    26f2:	49 f0       	breq	.+18     	; 0x2706 <gc_execute_block+0x4d6>
    26f4:	83 30       	cpi	r24, 0x03	; 3
    26f6:	21 f0       	breq	.+8      	; 0x2700 <gc_execute_block+0x4d0>
    26f8:	81 30       	cpi	r24, 0x01	; 1
    26fa:	09 f0       	breq	.+2      	; 0x26fe <gc_execute_block+0x4ce>
    26fc:	7d c2       	rjmp	.+1274   	; 0x2bf8 <gc_execute_block+0x9c8>
    26fe:	0e c0       	rjmp	.+28     	; 0x271c <gc_execute_block+0x4ec>
		case NEXT_ACTION_DEFAULT: {				// nothing to do here
			break;
		}

		case NEXT_ACTION_GO_HOME: { 
			gc.status = mc_go_home(); 
    2700:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <mc_go_home>
    2704:	77 c2       	rjmp	.+1262   	; 0x2bf4 <gc_execute_block+0x9c4>
			break;
		}

		case NEXT_ACTION_DWELL: {
			gc.status = mc_dwell(gc.dwell_time); 
    2706:	60 91 15 21 	lds	r22, 0x2115
    270a:	70 91 16 21 	lds	r23, 0x2116
    270e:	80 91 17 21 	lds	r24, 0x2117
    2712:	90 91 18 21 	lds	r25, 0x2118
    2716:	0e 94 33 1c 	call	0x3866	; 0x3866 <mc_dwell>
    271a:	6c c2       	rjmp	.+1240   	; 0x2bf4 <gc_execute_block+0x9c4>
			break;
		}

		case NEXT_ACTION_MOTION: {
			switch (gc.motion_mode) {
    271c:	b0 91 0f 21 	lds	r27, 0x210F
    2720:	b8 8f       	std	Y+24, r27	; 0x18
    2722:	b2 30       	cpi	r27, 0x02	; 2
    2724:	20 f0       	brcs	.+8      	; 0x272e <gc_execute_block+0x4fe>
    2726:	b4 30       	cpi	r27, 0x04	; 4
    2728:	08 f0       	brcs	.+2      	; 0x272c <gc_execute_block+0x4fc>
    272a:	66 c2       	rjmp	.+1228   	; 0x2bf8 <gc_execute_block+0x9c8>
    272c:	31 c0       	rjmp	.+98     	; 0x2790 <gc_execute_block+0x560>
				case MOTION_MODE_CANCEL: {
					break;
				}

				case MOTION_MODE_RAPID_LINEAR: case MOTION_MODE_LINEAR: {
					gc.status = mc_line(gc.target[X], gc.target[Y], gc.target[Z],
    272e:	60 91 39 21 	lds	r22, 0x2139
    2732:	70 91 3a 21 	lds	r23, 0x213A
    2736:	80 91 3b 21 	lds	r24, 0x213B
    273a:	90 91 3c 21 	lds	r25, 0x213C
    273e:	20 91 3d 21 	lds	r18, 0x213D
    2742:	30 91 3e 21 	lds	r19, 0x213E
    2746:	40 91 3f 21 	lds	r20, 0x213F
    274a:	50 91 40 21 	lds	r21, 0x2140
    274e:	e0 90 41 21 	lds	r14, 0x2141
    2752:	f0 90 42 21 	lds	r15, 0x2142
    2756:	00 91 43 21 	lds	r16, 0x2143
    275a:	10 91 44 21 	lds	r17, 0x2144
    275e:	80 90 10 21 	lds	r8, 0x2110
    2762:	88 20       	and	r8, r8
    2764:	49 f0       	breq	.+18     	; 0x2778 <gc_execute_block+0x548>
    2766:	a0 90 29 21 	lds	r10, 0x2129
    276a:	b0 90 2a 21 	lds	r11, 0x212A
    276e:	c0 90 2b 21 	lds	r12, 0x212B
    2772:	d0 90 2c 21 	lds	r13, 0x212C
    2776:	08 c0       	rjmp	.+16     	; 0x2788 <gc_execute_block+0x558>
    2778:	a0 90 1d 21 	lds	r10, 0x211D
    277c:	b0 90 1e 21 	lds	r11, 0x211E
    2780:	c0 90 1f 21 	lds	r12, 0x211F
    2784:	d0 90 20 21 	lds	r13, 0x2120
    2788:	99 24       	eor	r9, r9
    278a:	0e 94 6d 1c 	call	0x38da	; 0x38da <mc_line>
    278e:	32 c2       	rjmp	.+1124   	; 0x2bf4 <gc_execute_block+0x9c4>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    2790:	80 91 13 21 	lds	r24, 0x2113
    2794:	88 23       	and	r24, r24
    2796:	09 f4       	brne	.+2      	; 0x279a <gc_execute_block+0x56a>
    2798:	ec c0       	rjmp	.+472    	; 0x2972 <gc_execute_block+0x742>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    279a:	e0 91 51 21 	lds	r30, 0x2151
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	ee 0f       	add	r30, r30
    27a2:	ff 1f       	adc	r31, r31
    27a4:	ee 0f       	add	r30, r30
    27a6:	ff 1f       	adc	r31, r31
    27a8:	ec 5f       	subi	r30, 0xFC	; 252
    27aa:	fe 4d       	sbci	r31, 0xDE	; 222
    27ac:	65 a9       	ldd	r22, Z+53	; 0x35
    27ae:	76 a9       	ldd	r23, Z+54	; 0x36
    27b0:	87 a9       	ldd	r24, Z+55	; 0x37
    27b2:	90 ad       	ldd	r25, Z+56	; 0x38
    27b4:	21 a5       	ldd	r18, Z+41	; 0x29
    27b6:	32 a5       	ldd	r19, Z+42	; 0x2a
    27b8:	43 a5       	ldd	r20, Z+43	; 0x2b
    27ba:	54 a5       	ldd	r21, Z+44	; 0x2c
    27bc:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    27c0:	6f 83       	std	Y+7, r22	; 0x07
    27c2:	78 87       	std	Y+8, r23	; 0x08
    27c4:	89 87       	std	Y+9, r24	; 0x09
    27c6:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    27c8:	e0 91 52 21 	lds	r30, 0x2152
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	ee 0f       	add	r30, r30
    27d0:	ff 1f       	adc	r31, r31
    27d2:	ee 0f       	add	r30, r30
    27d4:	ff 1f       	adc	r31, r31
    27d6:	ec 5f       	subi	r30, 0xFC	; 252
    27d8:	fe 4d       	sbci	r31, 0xDE	; 222
    27da:	65 a9       	ldd	r22, Z+53	; 0x35
    27dc:	76 a9       	ldd	r23, Z+54	; 0x36
    27de:	87 a9       	ldd	r24, Z+55	; 0x37
    27e0:	90 ad       	ldd	r25, Z+56	; 0x38
    27e2:	21 a5       	ldd	r18, Z+41	; 0x29
    27e4:	32 a5       	ldd	r19, Z+42	; 0x2a
    27e6:	43 a5       	ldd	r20, Z+43	; 0x2b
    27e8:	54 a5       	ldd	r21, Z+44	; 0x2c
    27ea:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    27ee:	1b 01       	movw	r2, r22
    27f0:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    27f2:	10 92 45 21 	sts	0x2145, r1
    27f6:	10 92 46 21 	sts	0x2146, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    27fa:	60 90 19 21 	lds	r6, 0x2119
    27fe:	70 90 1a 21 	lds	r7, 0x211A
    2802:	80 90 1b 21 	lds	r8, 0x211B
    2806:	90 90 1c 21 	lds	r9, 0x211C
    280a:	c4 01       	movw	r24, r8
    280c:	b3 01       	movw	r22, r6
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e8       	ldi	r20, 0x80	; 128
    2814:	50 e4       	ldi	r21, 0x40	; 64
    2816:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    281a:	a4 01       	movw	r20, r8
    281c:	93 01       	movw	r18, r6
    281e:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    2822:	5b 01       	movw	r10, r22
    2824:	6c 01       	movw	r12, r24
    2826:	6f 81       	ldd	r22, Y+7	; 0x07
    2828:	78 85       	ldd	r23, Y+8	; 0x08
    282a:	89 85       	ldd	r24, Y+9	; 0x09
    282c:	9a 85       	ldd	r25, Y+10	; 0x0a
    282e:	9b 01       	movw	r18, r22
    2830:	ac 01       	movw	r20, r24
    2832:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    2836:	7b 01       	movw	r14, r22
    2838:	8c 01       	movw	r16, r24
    283a:	c2 01       	movw	r24, r4
    283c:	b1 01       	movw	r22, r2
    283e:	a2 01       	movw	r20, r4
    2840:	91 01       	movw	r18, r2
    2842:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    2846:	9b 01       	movw	r18, r22
    2848:	ac 01       	movw	r20, r24
    284a:	c8 01       	movw	r24, r16
    284c:	b7 01       	movw	r22, r14
    284e:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    2852:	9b 01       	movw	r18, r22
    2854:	ac 01       	movw	r20, r24
    2856:	c6 01       	movw	r24, r12
    2858:	b5 01       	movw	r22, r10
    285a:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    285e:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <sqrt>
    2862:	7b 01       	movw	r14, r22
    2864:	8c 01       	movw	r16, r24
    2866:	6f 81       	ldd	r22, Y+7	; 0x07
    2868:	78 85       	ldd	r23, Y+8	; 0x08
    286a:	89 85       	ldd	r24, Y+9	; 0x09
    286c:	9a 85       	ldd	r25, Y+10	; 0x0a
    286e:	a2 01       	movw	r20, r4
    2870:	91 01       	movw	r18, r2
    2872:	0e 94 a7 42 	call	0x854e	; 0x854e <hypot>
    2876:	9b 01       	movw	r18, r22
    2878:	ac 01       	movw	r20, r24
    287a:	17 fb       	bst	r17, 7
    287c:	10 95       	com	r17
    287e:	17 f9       	bld	r17, 7
    2880:	10 95       	com	r17
    2882:	c8 01       	movw	r24, r16
    2884:	b7 01       	movw	r22, r14
    2886:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    288a:	7b 01       	movw	r14, r22
    288c:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    288e:	a8 01       	movw	r20, r16
    2890:	97 01       	movw	r18, r14
    2892:	0e 94 21 44 	call	0x8842	; 0x8842 <__unordsf2>
    2896:	88 23       	and	r24, r24
    2898:	21 f0       	breq	.+8      	; 0x28a2 <gc_execute_block+0x672>
		FAIL(TG_FLOATING_POINT_ERROR); 
    289a:	8e e0       	ldi	r24, 0x0E	; 14
    289c:	80 93 04 21 	sts	0x2104, r24
    28a0:	65 c0       	rjmp	.+202    	; 0x296c <gc_execute_block+0x73c>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    28a2:	e8 8d       	ldd	r30, Y+24	; 0x18
    28a4:	e3 30       	cpi	r30, 0x03	; 3
    28a6:	21 f4       	brne	.+8      	; 0x28b0 <gc_execute_block+0x680>
		h_x2_div_d = -h_x2_div_d;
    28a8:	17 fb       	bst	r17, 7
    28aa:	10 95       	com	r17
    28ac:	17 f9       	bld	r17, 7
    28ae:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    28b0:	c4 01       	movw	r24, r8
    28b2:	b3 01       	movw	r22, r6
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e0       	ldi	r20, 0x00	; 0
    28ba:	50 e0       	ldi	r21, 0x00	; 0
    28bc:	0e 94 aa 40 	call	0x8154	; 0x8154 <__cmpsf2>
    28c0:	88 23       	and	r24, r24
    28c2:	24 f4       	brge	.+8      	; 0x28cc <gc_execute_block+0x69c>
		h_x2_div_d = -h_x2_div_d; 
    28c4:	17 fb       	bst	r17, 7
    28c6:	10 95       	com	r17
    28c8:	17 f9       	bld	r17, 7
    28ca:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    28cc:	80 91 51 21 	lds	r24, 0x2151
    28d0:	c8 2e       	mov	r12, r24
    28d2:	dd 24       	eor	r13, r13
    28d4:	cc 0c       	add	r12, r12
    28d6:	dd 1c       	adc	r13, r13
    28d8:	cc 0c       	add	r12, r12
    28da:	dd 1c       	adc	r13, r13
    28dc:	25 e4       	ldi	r18, 0x45	; 69
    28de:	31 e2       	ldi	r19, 0x21	; 33
    28e0:	c2 0e       	add	r12, r18
    28e2:	d3 1e       	adc	r13, r19
    28e4:	c2 01       	movw	r24, r4
    28e6:	b1 01       	movw	r22, r2
    28e8:	a8 01       	movw	r20, r16
    28ea:	97 01       	movw	r18, r14
    28ec:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    28f0:	9b 01       	movw	r18, r22
    28f2:	ac 01       	movw	r20, r24
    28f4:	6f 81       	ldd	r22, Y+7	; 0x07
    28f6:	78 85       	ldd	r23, Y+8	; 0x08
    28f8:	89 85       	ldd	r24, Y+9	; 0x09
    28fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fc:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	5f e3       	ldi	r21, 0x3F	; 63
    2908:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    290c:	d6 01       	movw	r26, r12
    290e:	6d 93       	st	X+, r22
    2910:	7d 93       	st	X+, r23
    2912:	8d 93       	st	X+, r24
    2914:	9c 93       	st	X, r25
    2916:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    2918:	80 91 52 21 	lds	r24, 0x2152
    291c:	c8 2e       	mov	r12, r24
    291e:	dd 24       	eor	r13, r13
    2920:	cc 0c       	add	r12, r12
    2922:	dd 1c       	adc	r13, r13
    2924:	cc 0c       	add	r12, r12
    2926:	dd 1c       	adc	r13, r13
    2928:	e5 e4       	ldi	r30, 0x45	; 69
    292a:	f1 e2       	ldi	r31, 0x21	; 33
    292c:	ce 0e       	add	r12, r30
    292e:	df 1e       	adc	r13, r31
    2930:	6f 81       	ldd	r22, Y+7	; 0x07
    2932:	78 85       	ldd	r23, Y+8	; 0x08
    2934:	89 85       	ldd	r24, Y+9	; 0x09
    2936:	9a 85       	ldd	r25, Y+10	; 0x0a
    2938:	a8 01       	movw	r20, r16
    293a:	97 01       	movw	r18, r14
    293c:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    2940:	9b 01       	movw	r18, r22
    2942:	ac 01       	movw	r20, r24
    2944:	c2 01       	movw	r24, r4
    2946:	b1 01       	movw	r22, r2
    2948:	0e 94 0b 40 	call	0x8016	; 0x8016 <__addsf3>
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e0       	ldi	r20, 0x00	; 0
    2952:	5f e3       	ldi	r21, 0x3F	; 63
    2954:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    2958:	d6 01       	movw	r26, r12
    295a:	6d 93       	st	X+, r22
    295c:	7d 93       	st	X+, r23
    295e:	8d 93       	st	X+, r24
    2960:	9c 93       	st	X, r25
    2962:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    2964:	80 91 04 21 	lds	r24, 0x2104
    2968:	88 23       	and	r24, r24
    296a:	19 f0       	breq	.+6      	; 0x2972 <gc_execute_block+0x742>
			return (gc.status);
    296c:	80 91 04 21 	lds	r24, 0x2104
    2970:	41 c1       	rjmp	.+642    	; 0x2bf4 <gc_execute_block+0x9c4>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    2972:	e0 91 51 21 	lds	r30, 0x2151
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	ee 0f       	add	r30, r30
    297a:	ff 1f       	adc	r31, r31
    297c:	ee 0f       	add	r30, r30
    297e:	ff 1f       	adc	r31, r31
    2980:	eb 5b       	subi	r30, 0xBB	; 187
    2982:	fe 4d       	sbci	r31, 0xDE	; 222
    2984:	60 81       	ld	r22, Z
    2986:	71 81       	ldd	r23, Z+1	; 0x01
    2988:	82 81       	ldd	r24, Z+2	; 0x02
    298a:	93 81       	ldd	r25, Z+3	; 0x03
    298c:	90 58       	subi	r25, 0x80	; 128
    298e:	e0 91 52 21 	lds	r30, 0x2152
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	ee 0f       	add	r30, r30
    2996:	ff 1f       	adc	r31, r31
    2998:	ee 0f       	add	r30, r30
    299a:	ff 1f       	adc	r31, r31
    299c:	eb 5b       	subi	r30, 0xBB	; 187
    299e:	fe 4d       	sbci	r31, 0xDE	; 222
    29a0:	20 81       	ld	r18, Z
    29a2:	31 81       	ldd	r19, Z+1	; 0x01
    29a4:	42 81       	ldd	r20, Z+2	; 0x02
    29a6:	53 81       	ldd	r21, Z+3	; 0x03
    29a8:	50 58       	subi	r21, 0x80	; 128
    29aa:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <theta>
    29ae:	6f 87       	std	Y+15, r22	; 0x0f
    29b0:	78 8b       	std	Y+16, r23	; 0x10
    29b2:	89 8b       	std	Y+17, r24	; 0x11
    29b4:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    29b6:	9b 01       	movw	r18, r22
    29b8:	ac 01       	movw	r20, r24
    29ba:	0e 94 21 44 	call	0x8842	; 0x8842 <__unordsf2>
    29be:	88 23       	and	r24, r24
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <gc_execute_block+0x794>
    29c2:	54 c0       	rjmp	.+168    	; 0x2a6c <gc_execute_block+0x83c>
		FAIL(TG_ARC_ERROR); 
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    29c4:	e0 91 51 21 	lds	r30, 0x2151
    29c8:	0e 2f       	mov	r16, r30
    29ca:	10 e0       	ldi	r17, 0x00	; 0
    29cc:	e0 91 52 21 	lds	r30, 0x2152
    29d0:	ce 2e       	mov	r12, r30
    29d2:	dd 24       	eor	r13, r13
    29d4:	00 0f       	add	r16, r16
    29d6:	11 1f       	adc	r17, r17
    29d8:	00 0f       	add	r16, r16
    29da:	11 1f       	adc	r17, r17
    29dc:	0c 5f       	subi	r16, 0xFC	; 252
    29de:	1e 4d       	sbci	r17, 0xDE	; 222
    29e0:	f8 01       	movw	r30, r16
    29e2:	ef 5b       	subi	r30, 0xBF	; 191
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	d8 01       	movw	r26, r16
    29e8:	d5 96       	adiw	r26, 0x35	; 53
    29ea:	6d 91       	ld	r22, X+
    29ec:	7d 91       	ld	r23, X+
    29ee:	8d 91       	ld	r24, X+
    29f0:	9c 91       	ld	r25, X
    29f2:	d8 97       	sbiw	r26, 0x38	; 56
    29f4:	20 81       	ld	r18, Z
    29f6:	31 81       	ldd	r19, Z+1	; 0x01
    29f8:	42 81       	ldd	r20, Z+2	; 0x02
    29fa:	53 81       	ldd	r21, Z+3	; 0x03
    29fc:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    2a00:	f8 01       	movw	r30, r16
    2a02:	21 a5       	ldd	r18, Z+41	; 0x29
    2a04:	32 a5       	ldd	r19, Z+42	; 0x2a
    2a06:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a08:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a0a:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    2a0e:	7b 01       	movw	r14, r22
    2a10:	8c 01       	movw	r16, r24
    2a12:	cc 0c       	add	r12, r12
    2a14:	dd 1c       	adc	r13, r13
    2a16:	cc 0c       	add	r12, r12
    2a18:	dd 1c       	adc	r13, r13
    2a1a:	24 e0       	ldi	r18, 0x04	; 4
    2a1c:	31 e2       	ldi	r19, 0x21	; 33
    2a1e:	c2 0e       	add	r12, r18
    2a20:	d3 1e       	adc	r13, r19
    2a22:	f6 01       	movw	r30, r12
    2a24:	ef 5b       	subi	r30, 0xBF	; 191
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	d6 01       	movw	r26, r12
    2a2a:	d5 96       	adiw	r26, 0x35	; 53
    2a2c:	6d 91       	ld	r22, X+
    2a2e:	7d 91       	ld	r23, X+
    2a30:	8d 91       	ld	r24, X+
    2a32:	9c 91       	ld	r25, X
    2a34:	d8 97       	sbiw	r26, 0x38	; 56
    2a36:	20 81       	ld	r18, Z
    2a38:	31 81       	ldd	r19, Z+1	; 0x01
    2a3a:	42 81       	ldd	r20, Z+2	; 0x02
    2a3c:	53 81       	ldd	r21, Z+3	; 0x03
    2a3e:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    2a42:	f6 01       	movw	r30, r12
    2a44:	21 a5       	ldd	r18, Z+41	; 0x29
    2a46:	32 a5       	ldd	r19, Z+42	; 0x2a
    2a48:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a4a:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a4c:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    2a50:	9b 01       	movw	r18, r22
    2a52:	ac 01       	movw	r20, r24
    2a54:	c8 01       	movw	r24, r16
    2a56:	b7 01       	movw	r22, r14
    2a58:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <theta>
    2a5c:	7b 01       	movw	r14, r22
    2a5e:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    2a60:	a8 01       	movw	r20, r16
    2a62:	97 01       	movw	r18, r14
    2a64:	0e 94 21 44 	call	0x8842	; 0x8842 <__unordsf2>
    2a68:	88 23       	and	r24, r24
    2a6a:	19 f0       	breq	.+6      	; 0x2a72 <gc_execute_block+0x842>
		FAIL(TG_ARC_ERROR); 
    2a6c:	80 e1       	ldi	r24, 0x10	; 16
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	c1 c0       	rjmp	.+386    	; 0x2bf4 <gc_execute_block+0x9c4>
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    2a72:	c8 01       	movw	r24, r16
    2a74:	b7 01       	movw	r22, r14
    2a76:	2f 85       	ldd	r18, Y+15	; 0x0f
    2a78:	38 89       	ldd	r19, Y+16	; 0x10
    2a7a:	49 89       	ldd	r20, Y+17	; 0x11
    2a7c:	5a 89       	ldd	r21, Y+18	; 0x12
    2a7e:	0e 94 aa 40 	call	0x8154	; 0x8154 <__cmpsf2>
    2a82:	88 23       	and	r24, r24
    2a84:	54 f4       	brge	.+20     	; 0x2a9a <gc_execute_block+0x86a>
		theta_end += 2*M_PI;
    2a86:	c8 01       	movw	r24, r16
    2a88:	b7 01       	movw	r22, r14
    2a8a:	2b ed       	ldi	r18, 0xDB	; 219
    2a8c:	3f e0       	ldi	r19, 0x0F	; 15
    2a8e:	49 ec       	ldi	r20, 0xC9	; 201
    2a90:	50 e4       	ldi	r21, 0x40	; 64
    2a92:	0e 94 0b 40 	call	0x8016	; 0x8016 <__addsf3>
    2a96:	7b 01       	movw	r14, r22
    2a98:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    2a9a:	c8 01       	movw	r24, r16
    2a9c:	b7 01       	movw	r22, r14
    2a9e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2aa0:	38 89       	ldd	r19, Y+16	; 0x10
    2aa2:	49 89       	ldd	r20, Y+17	; 0x11
    2aa4:	5a 89       	ldd	r21, Y+18	; 0x12
    2aa6:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    2aaa:	6b 87       	std	Y+11, r22	; 0x0b
    2aac:	7c 87       	std	Y+12, r23	; 0x0c
    2aae:	8d 87       	std	Y+13, r24	; 0x0d
    2ab0:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2ab2:	80 91 0f 21 	lds	r24, 0x210F
    2ab6:	83 30       	cpi	r24, 0x03	; 3
    2ab8:	71 f4       	brne	.+28     	; 0x2ad6 <gc_execute_block+0x8a6>
		angular_travel = angular_travel - 2*M_PI;
    2aba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2abc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac2:	2b ed       	ldi	r18, 0xDB	; 219
    2ac4:	3f e0       	ldi	r19, 0x0F	; 15
    2ac6:	49 ec       	ldi	r20, 0xC9	; 201
    2ac8:	50 e4       	ldi	r21, 0x40	; 64
    2aca:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    2ace:	6b 87       	std	Y+11, r22	; 0x0b
    2ad0:	7c 87       	std	Y+12, r23	; 0x0c
    2ad2:	8d 87       	std	Y+13, r24	; 0x0d
    2ad4:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2ad6:	80 91 51 21 	lds	r24, 0x2151
    2ada:	28 2f       	mov	r18, r24
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	2d 83       	std	Y+5, r18	; 0x05
    2ae0:	3e 83       	std	Y+6, r19	; 0x06
    2ae2:	f9 01       	movw	r30, r18
    2ae4:	ee 0f       	add	r30, r30
    2ae6:	ff 1f       	adc	r31, r31
    2ae8:	ee 0f       	add	r30, r30
    2aea:	ff 1f       	adc	r31, r31
    2aec:	eb 5b       	subi	r30, 0xBB	; 187
    2aee:	fe 4d       	sbci	r31, 0xDE	; 222
    2af0:	e0 80       	ld	r14, Z
    2af2:	f1 80       	ldd	r15, Z+1	; 0x01
    2af4:	02 81       	ldd	r16, Z+2	; 0x02
    2af6:	13 81       	ldd	r17, Z+3	; 0x03
    2af8:	80 91 52 21 	lds	r24, 0x2152
    2afc:	a8 2f       	mov	r26, r24
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	ab 83       	std	Y+3, r26	; 0x03
    2b02:	bc 83       	std	Y+4, r27	; 0x04
    2b04:	fd 01       	movw	r30, r26
    2b06:	ee 0f       	add	r30, r30
    2b08:	ff 1f       	adc	r31, r31
    2b0a:	ee 0f       	add	r30, r30
    2b0c:	ff 1f       	adc	r31, r31
    2b0e:	eb 5b       	subi	r30, 0xBB	; 187
    2b10:	fe 4d       	sbci	r31, 0xDE	; 222
    2b12:	20 81       	ld	r18, Z
    2b14:	31 81       	ldd	r19, Z+1	; 0x01
    2b16:	42 81       	ldd	r20, Z+2	; 0x02
    2b18:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2b1a:	80 91 53 21 	lds	r24, 0x2153
    2b1e:	28 2e       	mov	r2, r24
    2b20:	33 24       	eor	r3, r3
    2b22:	f1 01       	movw	r30, r2
    2b24:	ee 0f       	add	r30, r30
    2b26:	ff 1f       	adc	r31, r31
    2b28:	ee 0f       	add	r30, r30
    2b2a:	ff 1f       	adc	r31, r31
    2b2c:	ec 5f       	subi	r30, 0xFC	; 252
    2b2e:	fe 4d       	sbci	r31, 0xDE	; 222
    2b30:	85 a9       	ldd	r24, Z+53	; 0x35
    2b32:	96 a9       	ldd	r25, Z+54	; 0x36
    2b34:	a7 a9       	ldd	r26, Z+55	; 0x37
    2b36:	b0 ad       	ldd	r27, Z+56	; 0x38
    2b38:	8c 8b       	std	Y+20, r24	; 0x14
    2b3a:	9d 8b       	std	Y+21, r25	; 0x15
    2b3c:	ae 8b       	std	Y+22, r26	; 0x16
    2b3e:	bf 8b       	std	Y+23, r27	; 0x17
    2b40:	a1 a4       	ldd	r10, Z+41	; 0x29
    2b42:	b2 a4       	ldd	r11, Z+42	; 0x2a
    2b44:	c3 a4       	ldd	r12, Z+43	; 0x2b
    2b46:	d4 a4       	ldd	r13, Z+44	; 0x2c

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2b48:	90 91 10 21 	lds	r25, 0x2110
    2b4c:	9b 8b       	std	Y+19, r25	; 0x13
    2b4e:	99 23       	and	r25, r25
    2b50:	49 f0       	breq	.+18     	; 0x2b64 <gc_execute_block+0x934>
    2b52:	40 90 29 21 	lds	r4, 0x2129
    2b56:	50 90 2a 21 	lds	r5, 0x212A
    2b5a:	60 90 2b 21 	lds	r6, 0x212B
    2b5e:	70 90 2c 21 	lds	r7, 0x212C
    2b62:	08 c0       	rjmp	.+16     	; 0x2b74 <gc_execute_block+0x944>
    2b64:	40 90 1d 21 	lds	r4, 0x211D
    2b68:	50 90 1e 21 	lds	r5, 0x211E
    2b6c:	60 90 1f 21 	lds	r6, 0x211F
    2b70:	70 90 20 21 	lds	r7, 0x2120
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2b74:	c8 01       	movw	r24, r16
    2b76:	b7 01       	movw	r22, r14
    2b78:	0e 94 a7 42 	call	0x854e	; 0x854e <hypot>
    2b7c:	7b 01       	movw	r14, r22
    2b7e:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2b80:	ad b7       	in	r26, 0x3d	; 61
    2b82:	be b7       	in	r27, 0x3e	; 62
    2b84:	1a 97       	sbiw	r26, 0x0a	; 10
    2b86:	ad bf       	out	0x3d, r26	; 61
    2b88:	be bf       	out	0x3e, r27	; 62
    2b8a:	8d b6       	in	r8, 0x3d	; 61
    2b8c:	9e b6       	in	r9, 0x3e	; 62
    2b8e:	08 94       	sec
    2b90:	81 1c       	adc	r8, r1
    2b92:	91 1c       	adc	r9, r1
    2b94:	6c 89       	ldd	r22, Y+20	; 0x14
    2b96:	7d 89       	ldd	r23, Y+21	; 0x15
    2b98:	8e 89       	ldd	r24, Y+22	; 0x16
    2b9a:	9f 89       	ldd	r25, Y+23	; 0x17
    2b9c:	a6 01       	movw	r20, r12
    2b9e:	95 01       	movw	r18, r10
    2ba0:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    2ba4:	5b 01       	movw	r10, r22
    2ba6:	6c 01       	movw	r12, r24
    2ba8:	2b 81       	ldd	r18, Y+3	; 0x03
    2baa:	3c 81       	ldd	r19, Y+4	; 0x04
    2bac:	f4 01       	movw	r30, r8
    2bae:	20 83       	st	Z, r18
    2bb0:	31 83       	std	Z+1, r19	; 0x01
    2bb2:	22 82       	std	Z+2, r2	; 0x02
    2bb4:	33 82       	std	Z+3, r3	; 0x03
    2bb6:	d4 01       	movw	r26, r8
    2bb8:	14 96       	adiw	r26, 0x04	; 4
    2bba:	4d 92       	st	X+, r4
    2bbc:	5d 92       	st	X+, r5
    2bbe:	6d 92       	st	X+, r6
    2bc0:	7c 92       	st	X, r7
    2bc2:	17 97       	sbiw	r26, 0x07	; 7
    2bc4:	eb 89       	ldd	r30, Y+19	; 0x13
    2bc6:	18 96       	adiw	r26, 0x08	; 8
    2bc8:	ec 93       	st	X, r30
    2bca:	18 97       	sbiw	r26, 0x08	; 8
    2bcc:	19 96       	adiw	r26, 0x09	; 9
    2bce:	1c 92       	st	X, r1
    2bd0:	6f 85       	ldd	r22, Y+15	; 0x0f
    2bd2:	78 89       	ldd	r23, Y+16	; 0x10
    2bd4:	89 89       	ldd	r24, Y+17	; 0x11
    2bd6:	9a 89       	ldd	r25, Y+18	; 0x12
    2bd8:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bda:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bdc:	4d 85       	ldd	r20, Y+13	; 0x0d
    2bde:	5e 85       	ldd	r21, Y+14	; 0x0e
    2be0:	8d 80       	ldd	r8, Y+5	; 0x05
    2be2:	9e 80       	ldd	r9, Y+6	; 0x06
    2be4:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <mc_arc>
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//					   (gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//						gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    2be8:	2d b7       	in	r18, 0x3d	; 61
    2bea:	3e b7       	in	r19, 0x3e	; 62
    2bec:	26 5f       	subi	r18, 0xF6	; 246
    2bee:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf0:	2d bf       	out	0x3d, r18	; 61
    2bf2:	3e bf       	out	0x3e, r19	; 62
										gc.inverse_feed_rate_mode); 
					break;
				}

				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: {
					gc.status = _gc_compute_arc(); 
    2bf4:	80 93 04 21 	sts	0x2104, r24
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    2bf8:	80 91 04 21 	lds	r24, 0x2104
    2bfc:	82 30       	cpi	r24, 0x02	; 2
    2bfe:	48 f4       	brcc	.+18     	; 0x2c12 <gc_execute_block+0x9e2>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2c00:	ed e2       	ldi	r30, 0x2D	; 45
    2c02:	f1 e2       	ldi	r31, 0x21	; 33
    2c04:	df 01       	movw	r26, r30
    2c06:	1c 96       	adiw	r26, 0x0c	; 12
    2c08:	9c e0       	ldi	r25, 0x0C	; 12
    2c0a:	0d 90       	ld	r0, X+
    2c0c:	01 92       	st	Z+, r0
    2c0e:	91 50       	subi	r25, 0x01	; 1
    2c10:	e1 f7       	brne	.-8      	; 0x2c0a <gc_execute_block+0x9da>
	};
	return(gc.status);
}
    2c12:	68 96       	adiw	r28, 0x18	; 24
    2c14:	cd bf       	out	0x3d, r28	; 61
    2c16:	de bf       	out	0x3e, r29	; 62
    2c18:	cf 91       	pop	r28
    2c1a:	df 91       	pop	r29
    2c1c:	1f 91       	pop	r17
    2c1e:	0f 91       	pop	r16
    2c20:	ff 90       	pop	r15
    2c22:	ef 90       	pop	r14
    2c24:	df 90       	pop	r13
    2c26:	cf 90       	pop	r12
    2c28:	bf 90       	pop	r11
    2c2a:	af 90       	pop	r10
    2c2c:	9f 90       	pop	r9
    2c2e:	8f 90       	pop	r8
    2c30:	7f 90       	pop	r7
    2c32:	6f 90       	pop	r6
    2c34:	5f 90       	pop	r5
    2c36:	4f 90       	pop	r4
    2c38:	3f 90       	pop	r3
    2c3a:	2f 90       	pop	r2
    2c3c:	08 95       	ret

00002c3e <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2c3e:	cf 93       	push	r28
    2c40:	df 93       	push	r29
    2c42:	ec 01       	movw	r28, r24
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	10 c0       	rjmp	.+32     	; 0x2c6a <gc_gcode_parser+0x2c>
	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    2c4a:	e1 32       	cpi	r30, 0x21	; 33
    2c4c:	70 f0       	brcs	.+28     	; 0x2c6a <gc_gcode_parser+0x2c>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    2c4e:	8e 2f       	mov	r24, r30
    2c50:	81 56       	subi	r24, 0x61	; 97
    2c52:	a9 2f       	mov	r26, r25
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	9f 5f       	subi	r25, 0xFF	; 255
    2c58:	8a 31       	cpi	r24, 0x1A	; 26
    2c5a:	20 f4       	brcc	.+8      	; 0x2c64 <gc_gcode_parser+0x26>
			block[j++] = c-'a'+'A';
    2c5c:	ac 0f       	add	r26, r28
    2c5e:	bd 1f       	adc	r27, r29
    2c60:	e0 52       	subi	r30, 0x20	; 32
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <gc_gcode_parser+0x2a>
		} else {
			block[j++] = c;
    2c64:	ac 0f       	add	r26, r28
    2c66:	bd 1f       	adc	r27, r29
    2c68:	ec 93       	st	X, r30

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	e2 0f       	add	r30, r18
    2c6e:	f1 1d       	adc	r31, r1
    2c70:	e0 81       	ld	r30, Z
    2c72:	2f 5f       	subi	r18, 0xFF	; 255
    2c74:	ee 23       	and	r30, r30
    2c76:	49 f7       	brne	.-46     	; 0x2c4a <gc_gcode_parser+0xc>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    2c78:	fe 01       	movw	r30, r28
    2c7a:	e9 0f       	add	r30, r25
    2c7c:	f1 1d       	adc	r31, r1
    2c7e:	10 82       	st	Z, r1
{
	_gc_normalize_gcode_block(block);
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    2c80:	88 81       	ld	r24, Y
    2c82:	88 32       	cpi	r24, 0x28	; 40
    2c84:	61 f0       	breq	.+24     	; 0x2c9e <gc_gcode_parser+0x60>
		return(TG_OK);
	}
	if (block[0] == 'Q') { 					// quit
    2c86:	81 35       	cpi	r24, 0x51	; 81
    2c88:	11 f4       	brne	.+4      	; 0x2c8e <gc_gcode_parser+0x50>
    2c8a:	83 e0       	ldi	r24, 0x03	; 3
    2c8c:	09 c0       	rjmp	.+18     	; 0x2ca0 <gc_gcode_parser+0x62>
		return(TG_QUIT);
	} 
	if (block[0] == '/') { 					// ignore block delete
    2c8e:	8f 32       	cpi	r24, 0x2F	; 47
    2c90:	31 f0       	breq	.+12     	; 0x2c9e <gc_gcode_parser+0x60>
		return(TG_OK);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2c92:	ce 01       	movw	r24, r28
    2c94:	0e 94 18 11 	call	0x2230	; 0x2230 <gc_execute_block>
    2c98:	80 93 04 21 	sts	0x2104, r24
    2c9c:	01 c0       	rjmp	.+2      	; 0x2ca0 <gc_gcode_parser+0x62>
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
}
    2ca0:	df 91       	pop	r29
    2ca2:	cf 91       	pop	r28
    2ca4:	08 95       	ret

00002ca6 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2ca6:	cf 92       	push	r12
    2ca8:	df 92       	push	r13
    2caa:	ef 92       	push	r14
    2cac:	ff 92       	push	r15
    2cae:	0f 93       	push	r16
    2cb0:	1f 93       	push	r17
    2cb2:	cf 93       	push	r28
    2cb4:	df 93       	push	r29
    2cb6:	cf e8       	ldi	r28, 0x8F	; 143
    2cb8:	d2 e2       	ldi	r29, 0x22	; 34
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2cba:	68 81       	ld	r22, Y
    2cbc:	70 e0       	ldi	r23, 0x00	; 0
    2cbe:	88 27       	eor	r24, r24
    2cc0:	77 fd       	sbrc	r23, 7
    2cc2:	80 95       	com	r24
    2cc4:	98 2f       	mov	r25, r24
    2cc6:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    2cca:	9b 01       	movw	r18, r22
    2ccc:	ac 01       	movw	r20, r24
    2cce:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd0:	78 85       	ldd	r23, Y+8	; 0x08
    2cd2:	89 85       	ldd	r24, Y+9	; 0x09
    2cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd6:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    2cda:	9b 01       	movw	r18, r22
    2cdc:	ac 01       	movw	r20, r24
    2cde:	60 e0       	ldi	r22, 0x00	; 0
    2ce0:	70 e0       	ldi	r23, 0x00	; 0
    2ce2:	84 eb       	ldi	r24, 0xB4	; 180
    2ce4:	93 e4       	ldi	r25, 0x43	; 67
    2ce6:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    2cea:	2b 85       	ldd	r18, Y+11	; 0x0b
    2cec:	3c 85       	ldd	r19, Y+12	; 0x0c
    2cee:	4d 85       	ldd	r20, Y+13	; 0x0d
    2cf0:	5e 85       	ldd	r21, Y+14	; 0x0e
    2cf2:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    2cf6:	6b 8b       	std	Y+19, r22	; 0x13
    2cf8:	7c 8b       	std	Y+20, r23	; 0x14
    2cfa:	8d 8b       	std	Y+21, r24	; 0x15
    2cfc:	9e 8b       	std	Y+22, r25	; 0x16
    2cfe:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    2d00:	82 e2       	ldi	r24, 0x22	; 34
    2d02:	cf 3e       	cpi	r28, 0xEF	; 239
    2d04:	d8 07       	cpc	r29, r24
    2d06:	c9 f6       	brne	.-78     	; 0x2cba <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    2d08:	00 91 8f 22 	lds	r16, 0x228F
    2d0c:	10 e0       	ldi	r17, 0x00	; 0
    2d0e:	b8 01       	movw	r22, r16
    2d10:	88 27       	eor	r24, r24
    2d12:	77 fd       	sbrc	r23, 7
    2d14:	80 95       	com	r24
    2d16:	98 2f       	mov	r25, r24
    2d18:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    2d1c:	9b 01       	movw	r18, r22
    2d1e:	ac 01       	movw	r20, r24
    2d20:	60 91 96 22 	lds	r22, 0x2296
    2d24:	70 91 97 22 	lds	r23, 0x2297
    2d28:	80 91 98 22 	lds	r24, 0x2298
    2d2c:	90 91 99 22 	lds	r25, 0x2299
    2d30:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    2d34:	9b 01       	movw	r18, r22
    2d36:	ac 01       	movw	r20, r24
    2d38:	60 e0       	ldi	r22, 0x00	; 0
    2d3a:	70 e0       	ldi	r23, 0x00	; 0
    2d3c:	84 eb       	ldi	r24, 0xB4	; 180
    2d3e:	93 e4       	ldi	r25, 0x43	; 67
    2d40:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    2d44:	6b 01       	movw	r12, r22
    2d46:	7c 01       	movw	r14, r24
    2d48:	80 91 94 22 	lds	r24, 0x2294
    2d4c:	90 91 95 22 	lds	r25, 0x2295
    2d50:	08 9f       	mul	r16, r24
    2d52:	b0 01       	movw	r22, r0
    2d54:	09 9f       	mul	r16, r25
    2d56:	70 0d       	add	r23, r0
    2d58:	18 9f       	mul	r17, r24
    2d5a:	70 0d       	add	r23, r0
    2d5c:	11 24       	eor	r1, r1
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	0e 94 4a 41 	call	0x8294	; 0x8294 <__floatunsisf>
    2d66:	a7 01       	movw	r20, r14
    2d68:	96 01       	movw	r18, r12
    2d6a:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    2d6e:	60 93 87 22 	sts	0x2287, r22
    2d72:	70 93 88 22 	sts	0x2288, r23
    2d76:	80 93 89 22 	sts	0x2289, r24
    2d7a:	90 93 8a 22 	sts	0x228A, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    2d7e:	80 91 92 22 	lds	r24, 0x2292
    2d82:	90 91 93 22 	lds	r25, 0x2293
    2d86:	08 9f       	mul	r16, r24
    2d88:	b0 01       	movw	r22, r0
    2d8a:	09 9f       	mul	r16, r25
    2d8c:	70 0d       	add	r23, r0
    2d8e:	18 9f       	mul	r17, r24
    2d90:	70 0d       	add	r23, r0
    2d92:	11 24       	eor	r1, r1
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	0e 94 4a 41 	call	0x8294	; 0x8294 <__floatunsisf>
    2d9c:	a7 01       	movw	r20, r14
    2d9e:	96 01       	movw	r18, r12
    2da0:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    2da4:	60 93 8b 22 	sts	0x228B, r22
    2da8:	70 93 8c 22 	sts	0x228C, r23
    2dac:	80 93 8d 22 	sts	0x228D, r24
    2db0:	90 93 8e 22 	sts	0x228E, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    2db4:	df 91       	pop	r29
    2db6:	cf 91       	pop	r28
    2db8:	1f 91       	pop	r17
    2dba:	0f 91       	pop	r16
    2dbc:	ff 90       	pop	r15
    2dbe:	ef 90       	pop	r14
    2dc0:	df 90       	pop	r13
    2dc2:	cf 90       	pop	r12
    2dc4:	08 95       	ret

00002dc6 <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    2dc6:	e1 e8       	ldi	r30, 0x81	; 129
    2dc8:	f2 e2       	ldi	r31, 0x22	; 34
    2dca:	84 e6       	ldi	r24, 0x64	; 100
    2dcc:	80 93 81 22 	sts	0x2281, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2dd0:	8a e0       	ldi	r24, 0x0A	; 10
    2dd2:	97 ed       	ldi	r25, 0xD7	; 215
    2dd4:	a3 e2       	ldi	r26, 0x23	; 35
    2dd6:	bc e3       	ldi	r27, 0x3C	; 60
    2dd8:	80 93 83 22 	sts	0x2283, r24
    2ddc:	90 93 84 22 	sts	0x2284, r25
    2de0:	a0 93 85 22 	sts	0x2285, r26
    2de4:	b0 93 86 22 	sts	0x2286, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2de8:	8c ed       	ldi	r24, 0xDC	; 220
    2dea:	95 e0       	ldi	r25, 0x05	; 5
    2dec:	80 93 92 22 	sts	0x2292, r24
    2df0:	90 93 93 22 	sts	0x2293, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2df4:	80 93 aa 22 	sts	0x22AA, r24
    2df8:	90 93 ab 22 	sts	0x22AB, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2dfc:	80 93 c2 22 	sts	0x22C2, r24
    2e00:	90 93 c3 22 	sts	0x22C3, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2e04:	80 93 da 22 	sts	0x22DA, r24
    2e08:	90 93 db 22 	sts	0x22DB, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2e0c:	80 93 94 22 	sts	0x2294, r24
    2e10:	90 93 95 22 	sts	0x2295, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2e14:	80 93 ac 22 	sts	0x22AC, r24
    2e18:	90 93 ad 22 	sts	0x22AD, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2e1c:	80 93 c4 22 	sts	0x22C4, r24
    2e20:	90 93 c5 22 	sts	0x22C5, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2e24:	80 93 dc 22 	sts	0x22DC, r24
    2e28:	90 93 dd 22 	sts	0x22DD, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2e2c:	86 e6       	ldi	r24, 0x66	; 102
    2e2e:	96 e6       	ldi	r25, 0x66	; 102
    2e30:	a6 ee       	ldi	r26, 0xE6	; 230
    2e32:	bf e3       	ldi	r27, 0x3F	; 63
    2e34:	80 93 96 22 	sts	0x2296, r24
    2e38:	90 93 97 22 	sts	0x2297, r25
    2e3c:	a0 93 98 22 	sts	0x2298, r26
    2e40:	b0 93 99 22 	sts	0x2299, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2e44:	80 93 ae 22 	sts	0x22AE, r24
    2e48:	90 93 af 22 	sts	0x22AF, r25
    2e4c:	a0 93 b0 22 	sts	0x22B0, r26
    2e50:	b0 93 b1 22 	sts	0x22B1, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2e54:	80 93 c6 22 	sts	0x22C6, r24
    2e58:	90 93 c7 22 	sts	0x22C7, r25
    2e5c:	a0 93 c8 22 	sts	0x22C8, r26
    2e60:	b0 93 c9 22 	sts	0x22C9, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2e64:	80 93 de 22 	sts	0x22DE, r24
    2e68:	90 93 df 22 	sts	0x22DF, r25
    2e6c:	a0 93 e0 22 	sts	0x22E0, r26
    2e70:	b0 93 e1 22 	sts	0x22E1, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    2e74:	8c e5       	ldi	r24, 0x5C	; 92
    2e76:	9f e8       	ldi	r25, 0x8F	; 143
    2e78:	a2 ea       	ldi	r26, 0xA2	; 162
    2e7a:	bf e3       	ldi	r27, 0x3F	; 63
    2e7c:	80 93 9a 22 	sts	0x229A, r24
    2e80:	90 93 9b 22 	sts	0x229B, r25
    2e84:	a0 93 9c 22 	sts	0x229C, r26
    2e88:	b0 93 9d 22 	sts	0x229D, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    2e8c:	80 93 b2 22 	sts	0x22B2, r24
    2e90:	90 93 b3 22 	sts	0x22B3, r25
    2e94:	a0 93 b4 22 	sts	0x22B4, r26
    2e98:	b0 93 b5 22 	sts	0x22B5, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    2e9c:	80 93 ca 22 	sts	0x22CA, r24
    2ea0:	90 93 cb 22 	sts	0x22CB, r25
    2ea4:	a0 93 cc 22 	sts	0x22CC, r26
    2ea8:	b0 93 cd 22 	sts	0x22CD, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    2eac:	80 93 e2 22 	sts	0x22E2, r24
    2eb0:	90 93 e3 22 	sts	0x22E3, r25
    2eb4:	a0 93 e4 22 	sts	0x22E4, r26
    2eb8:	b0 93 e5 22 	sts	0x22E5, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	a8 ec       	ldi	r26, 0xC8	; 200
    2ec2:	b3 e4       	ldi	r27, 0x43	; 67
    2ec4:	80 93 9e 22 	sts	0x229E, r24
    2ec8:	90 93 9f 22 	sts	0x229F, r25
    2ecc:	a0 93 a0 22 	sts	0x22A0, r26
    2ed0:	b0 93 a1 22 	sts	0x22A1, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    2ed4:	80 93 b6 22 	sts	0x22B6, r24
    2ed8:	90 93 b7 22 	sts	0x22B7, r25
    2edc:	a0 93 b8 22 	sts	0x22B8, r26
    2ee0:	b0 93 b9 22 	sts	0x22B9, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	a6 e9       	ldi	r26, 0x96	; 150
    2eea:	b3 e4       	ldi	r27, 0x43	; 67
    2eec:	80 93 ce 22 	sts	0x22CE, r24
    2ef0:	90 93 cf 22 	sts	0x22CF, r25
    2ef4:	a0 93 d0 22 	sts	0x22D0, r26
    2ef8:	b0 93 d1 22 	sts	0x22D1, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	a0 e8       	ldi	r26, 0x80	; 128
    2f02:	bf eb       	ldi	r27, 0xBF	; 191
    2f04:	80 93 e6 22 	sts	0x22E6, r24
    2f08:	90 93 e7 22 	sts	0x22E7, r25
    2f0c:	a0 93 e8 22 	sts	0x22E8, r26
    2f10:	b0 93 e9 22 	sts	0x22E9, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    2f14:	88 e0       	ldi	r24, 0x08	; 8
    2f16:	80 93 8f 22 	sts	0x228F, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    2f1a:	80 93 a7 22 	sts	0x22A7, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    2f1e:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A].microstep = A_MICROSTEPS;
    2f20:	80 93 d7 22 	sts	0x22D7, r24

	cfg.a[X].polarity = X_POLARITY;
    2f24:	10 92 91 22 	sts	0x2291, r1
	cfg.a[Y].polarity = Y_POLARITY;
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	80 93 a9 22 	sts	0x22A9, r24
	cfg.a[Z].polarity = Z_POLARITY;
    2f2e:	10 92 c1 22 	sts	0x22C1, r1
	cfg.a[A].polarity = A_POLARITY;
    2f32:	10 92 d9 22 	sts	0x22D9, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    2f36:	80 93 a6 22 	sts	0x22A6, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    2f3a:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    2f3c:	80 93 d6 22 	sts	0x22D6, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    2f40:	10 92 ee 22 	sts	0x22EE, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    2f44:	80 93 90 22 	sts	0x2290, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    2f48:	80 93 a8 22 	sts	0x22A8, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    2f4c:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    2f4e:	80 93 d8 22 	sts	0x22D8, r24

	_cfg_computed();		// generate computed values from the above
    2f52:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <_cfg_computed>
}
    2f56:	08 95       	ret

00002f58 <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2f58:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <cfg_reset>
}
    2f5c:	08 95       	ret

00002f5e <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2f5e:	89 30       	cpi	r24, 0x09	; 9
    2f60:	31 f1       	breq	.+76     	; 0x2fae <_cfg_print_status+0x50>
    2f62:	8a 30       	cpi	r24, 0x0A	; 10
    2f64:	30 f4       	brcc	.+12     	; 0x2f72 <_cfg_print_status+0x14>
    2f66:	81 30       	cpi	r24, 0x01	; 1
    2f68:	59 f0       	breq	.+22     	; 0x2f80 <_cfg_print_status+0x22>
    2f6a:	83 30       	cpi	r24, 0x03	; 3
    2f6c:	09 f0       	breq	.+2      	; 0x2f70 <_cfg_print_status+0x12>
    2f6e:	45 c0       	rjmp	.+138    	; 0x2ffa <_cfg_print_status+0x9c>
    2f70:	0c c0       	rjmp	.+24     	; 0x2f8a <_cfg_print_status+0x2c>
    2f72:	8e 30       	cpi	r24, 0x0E	; 14
    2f74:	09 f1       	breq	.+66     	; 0x2fb8 <_cfg_print_status+0x5a>
    2f76:	80 31       	cpi	r24, 0x10	; 16
    2f78:	81 f1       	breq	.+96     	; 0x2fda <_cfg_print_status+0x7c>
    2f7a:	8d 30       	cpi	r24, 0x0D	; 13
    2f7c:	f1 f5       	brne	.+124    	; 0x2ffa <_cfg_print_status+0x9c>
    2f7e:	12 c0       	rjmp	.+36     	; 0x2fa4 <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_EAGAIN: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2f80:	00 d0       	rcall	.+0      	; 0x2f82 <_cfg_print_status+0x24>
    2f82:	0f 92       	push	r0
    2f84:	85 e1       	ldi	r24, 0x15	; 21
    2f86:	94 e0       	ldi	r25, 0x04	; 4
    2f88:	1b c0       	rjmp	.+54     	; 0x2fc0 <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2f8a:	0f 92       	push	r0
    2f8c:	0f 92       	push	r0
    2f8e:	8f ef       	ldi	r24, 0xFF	; 255
    2f90:	93 e0       	ldi	r25, 0x03	; 3
    2f92:	ed b7       	in	r30, 0x3d	; 61
    2f94:	fe b7       	in	r31, 0x3e	; 62
    2f96:	81 83       	std	Z+1, r24	; 0x01
    2f98:	92 83       	std	Z+2, r25	; 0x02
    2f9a:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2fa4:	00 d0       	rcall	.+0      	; 0x2fa6 <_cfg_print_status+0x48>
    2fa6:	0f 92       	push	r0
    2fa8:	88 ee       	ldi	r24, 0xE8	; 232
    2faa:	93 e0       	ldi	r25, 0x03	; 3
    2fac:	09 c0       	rjmp	.+18     	; 0x2fc0 <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2fae:	00 d0       	rcall	.+0      	; 0x2fb0 <_cfg_print_status+0x52>
    2fb0:	0f 92       	push	r0
    2fb2:	8e ec       	ldi	r24, 0xCE	; 206
    2fb4:	93 e0       	ldi	r25, 0x03	; 3
    2fb6:	04 c0       	rjmp	.+8      	; 0x2fc0 <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2fb8:	00 d0       	rcall	.+0      	; 0x2fba <_cfg_print_status+0x5c>
    2fba:	0f 92       	push	r0
    2fbc:	84 eb       	ldi	r24, 0xB4	; 180
    2fbe:	93 e0       	ldi	r25, 0x03	; 3
    2fc0:	ed b7       	in	r30, 0x3d	; 61
    2fc2:	fe b7       	in	r31, 0x3e	; 62
    2fc4:	81 83       	std	Z+1, r24	; 0x01
    2fc6:	92 83       	std	Z+2, r25	; 0x02
    2fc8:	63 83       	std	Z+3, r22	; 0x03
    2fca:	74 83       	std	Z+4, r23	; 0x04
    2fcc:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	08 95       	ret
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <_cfg_print_status+0x7e>
    2fdc:	0f 92       	push	r0
    2fde:	89 e9       	ldi	r24, 0x99	; 153
    2fe0:	93 e0       	ldi	r25, 0x03	; 3
    2fe2:	ed b7       	in	r30, 0x3d	; 61
    2fe4:	fe b7       	in	r31, 0x3e	; 62
    2fe6:	81 83       	std	Z+1, r24	; 0x01
    2fe8:	92 83       	std	Z+2, r25	; 0x02
    2fea:	63 83       	std	Z+3, r22	; 0x03
    2fec:	74 83       	std	Z+4, r23	; 0x04
    2fee:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	0f 90       	pop	r0
    2ff8:	0f 90       	pop	r0
    2ffa:	08 95       	ret

00002ffc <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    2ffc:	ef 92       	push	r14
    2ffe:	ff 92       	push	r15
    3000:	0f 93       	push	r16
    3002:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    3004:	e8 2e       	mov	r14, r24
    3006:	ff 24       	eor	r15, r15
    3008:	87 01       	movw	r16, r14
    300a:	00 0f       	add	r16, r16
    300c:	11 1f       	adc	r17, r17
    300e:	f8 01       	movw	r30, r16
    3010:	ed 5b       	subi	r30, 0xBD	; 189
    3012:	fd 4f       	sbci	r31, 0xFD	; 253
    3014:	25 91       	lpm	r18, Z+
    3016:	34 91       	lpm	r19, Z+
    3018:	00 d0       	rcall	.+0      	; 0x301a <_cfg_dump_axis+0x1e>
    301a:	0f 92       	push	r0
    301c:	88 e3       	ldi	r24, 0x38	; 56
    301e:	96 e0       	ldi	r25, 0x06	; 6
    3020:	ad b7       	in	r26, 0x3d	; 61
    3022:	be b7       	in	r27, 0x3e	; 62
    3024:	11 96       	adiw	r26, 0x01	; 1
    3026:	8d 93       	st	X+, r24
    3028:	9c 93       	st	X, r25
    302a:	12 97       	sbiw	r26, 0x02	; 2
    302c:	13 96       	adiw	r26, 0x03	; 3
    302e:	2d 93       	st	X+, r18
    3030:	3c 93       	st	X, r19
    3032:	14 97       	sbiw	r26, 0x04	; 4
    3034:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	96 e0       	ldi	r25, 0x06	; 6
    303c:	ed b7       	in	r30, 0x3d	; 61
    303e:	fe b7       	in	r31, 0x3e	; 62
    3040:	81 83       	std	Z+1, r24	; 0x01
    3042:	92 83       	std	Z+2, r25	; 0x02
    3044:	0e 0d       	add	r16, r14
    3046:	1f 1d       	adc	r17, r15
    3048:	83 e0       	ldi	r24, 0x03	; 3
    304a:	00 0f       	add	r16, r16
    304c:	11 1f       	adc	r17, r17
    304e:	8a 95       	dec	r24
    3050:	e1 f7       	brne	.-8      	; 0x304a <_cfg_dump_axis+0x4e>
    3052:	0f 57       	subi	r16, 0x7F	; 127
    3054:	1d 4d       	sbci	r17, 0xDD	; 221
    3056:	d8 01       	movw	r26, r16
    3058:	51 96       	adiw	r26, 0x11	; 17
    305a:	8d 91       	ld	r24, X+
    305c:	9c 91       	ld	r25, X
    305e:	52 97       	sbiw	r26, 0x12	; 18
    3060:	83 83       	std	Z+3, r24	; 0x03
    3062:	94 83       	std	Z+4, r25	; 0x04
    3064:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    3068:	88 ec       	ldi	r24, 0xC8	; 200
    306a:	95 e0       	ldi	r25, 0x05	; 5
    306c:	ed b7       	in	r30, 0x3d	; 61
    306e:	fe b7       	in	r31, 0x3e	; 62
    3070:	81 83       	std	Z+1, r24	; 0x01
    3072:	92 83       	std	Z+2, r25	; 0x02
    3074:	d8 01       	movw	r26, r16
    3076:	53 96       	adiw	r26, 0x13	; 19
    3078:	8d 91       	ld	r24, X+
    307a:	9c 91       	ld	r25, X
    307c:	54 97       	sbiw	r26, 0x14	; 20
    307e:	83 83       	std	Z+3, r24	; 0x03
    3080:	94 83       	std	Z+4, r25	; 0x04
    3082:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    3086:	ed b7       	in	r30, 0x3d	; 61
    3088:	fe b7       	in	r31, 0x3e	; 62
    308a:	31 96       	adiw	r30, 0x01	; 1
    308c:	85 e9       	ldi	r24, 0x95	; 149
    308e:	95 e0       	ldi	r25, 0x05	; 5
    3090:	ad b7       	in	r26, 0x3d	; 61
    3092:	be b7       	in	r27, 0x3e	; 62
    3094:	11 96       	adiw	r26, 0x01	; 1
    3096:	8d 93       	st	X+, r24
    3098:	9c 93       	st	X, r25
    309a:	12 97       	sbiw	r26, 0x02	; 2
    309c:	d8 01       	movw	r26, r16
    309e:	1e 96       	adiw	r26, 0x0e	; 14
    30a0:	8c 91       	ld	r24, X
    30a2:	82 83       	std	Z+2, r24	; 0x02
    30a4:	13 82       	std	Z+3, r1	; 0x03
    30a6:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    30aa:	0f 92       	push	r0
    30ac:	0f 92       	push	r0
    30ae:	8e e5       	ldi	r24, 0x5E	; 94
    30b0:	95 e0       	ldi	r25, 0x05	; 5
    30b2:	ed b7       	in	r30, 0x3d	; 61
    30b4:	fe b7       	in	r31, 0x3e	; 62
    30b6:	81 83       	std	Z+1, r24	; 0x01
    30b8:	92 83       	std	Z+2, r25	; 0x02
    30ba:	f8 01       	movw	r30, r16
    30bc:	85 89       	ldd	r24, Z+21	; 0x15
    30be:	96 89       	ldd	r25, Z+22	; 0x16
    30c0:	a7 89       	ldd	r26, Z+23	; 0x17
    30c2:	b0 8d       	ldd	r27, Z+24	; 0x18
    30c4:	ed b7       	in	r30, 0x3d	; 61
    30c6:	fe b7       	in	r31, 0x3e	; 62
    30c8:	83 83       	std	Z+3, r24	; 0x03
    30ca:	94 83       	std	Z+4, r25	; 0x04
    30cc:	a5 83       	std	Z+5, r26	; 0x05
    30ce:	b6 83       	std	Z+6, r27	; 0x06
    30d0:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    30d4:	8b e2       	ldi	r24, 0x2B	; 43
    30d6:	95 e0       	ldi	r25, 0x05	; 5
    30d8:	ad b7       	in	r26, 0x3d	; 61
    30da:	be b7       	in	r27, 0x3e	; 62
    30dc:	11 96       	adiw	r26, 0x01	; 1
    30de:	8d 93       	st	X+, r24
    30e0:	9c 93       	st	X, r25
    30e2:	12 97       	sbiw	r26, 0x02	; 2
    30e4:	f8 01       	movw	r30, r16
    30e6:	81 8d       	ldd	r24, Z+25	; 0x19
    30e8:	92 8d       	ldd	r25, Z+26	; 0x1a
    30ea:	a3 8d       	ldd	r26, Z+27	; 0x1b
    30ec:	b4 8d       	ldd	r27, Z+28	; 0x1c
    30ee:	ed b7       	in	r30, 0x3d	; 61
    30f0:	fe b7       	in	r31, 0x3e	; 62
    30f2:	83 83       	std	Z+3, r24	; 0x03
    30f4:	94 83       	std	Z+4, r25	; 0x04
    30f6:	a5 83       	std	Z+5, r26	; 0x05
    30f8:	b6 83       	std	Z+6, r27	; 0x06
    30fa:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    30fe:	88 ef       	ldi	r24, 0xF8	; 248
    3100:	94 e0       	ldi	r25, 0x04	; 4
    3102:	ad b7       	in	r26, 0x3d	; 61
    3104:	be b7       	in	r27, 0x3e	; 62
    3106:	11 96       	adiw	r26, 0x01	; 1
    3108:	8d 93       	st	X+, r24
    310a:	9c 93       	st	X, r25
    310c:	12 97       	sbiw	r26, 0x02	; 2
    310e:	f8 01       	movw	r30, r16
    3110:	85 8d       	ldd	r24, Z+29	; 0x1d
    3112:	96 8d       	ldd	r25, Z+30	; 0x1e
    3114:	a7 8d       	ldd	r26, Z+31	; 0x1f
    3116:	b0 a1       	ldd	r27, Z+32	; 0x20
    3118:	ed b7       	in	r30, 0x3d	; 61
    311a:	fe b7       	in	r31, 0x3e	; 62
    311c:	83 83       	std	Z+3, r24	; 0x03
    311e:	94 83       	std	Z+4, r25	; 0x04
    3120:	a5 83       	std	Z+5, r26	; 0x05
    3122:	b6 83       	std	Z+6, r27	; 0x06
    3124:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    3128:	0f 90       	pop	r0
    312a:	0f 90       	pop	r0
    312c:	ed b7       	in	r30, 0x3d	; 61
    312e:	fe b7       	in	r31, 0x3e	; 62
    3130:	31 96       	adiw	r30, 0x01	; 1
    3132:	87 ec       	ldi	r24, 0xC7	; 199
    3134:	94 e0       	ldi	r25, 0x04	; 4
    3136:	ad b7       	in	r26, 0x3d	; 61
    3138:	be b7       	in	r27, 0x3e	; 62
    313a:	11 96       	adiw	r26, 0x01	; 1
    313c:	8d 93       	st	X+, r24
    313e:	9c 93       	st	X, r25
    3140:	12 97       	sbiw	r26, 0x02	; 2
    3142:	d8 01       	movw	r26, r16
    3144:	95 96       	adiw	r26, 0x25	; 37
    3146:	8c 91       	ld	r24, X
    3148:	82 83       	std	Z+2, r24	; 0x02
    314a:	13 82       	std	Z+3, r1	; 0x03
    314c:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    3150:	ed b7       	in	r30, 0x3d	; 61
    3152:	fe b7       	in	r31, 0x3e	; 62
    3154:	31 96       	adiw	r30, 0x01	; 1
    3156:	86 e9       	ldi	r24, 0x96	; 150
    3158:	94 e0       	ldi	r25, 0x04	; 4
    315a:	ad b7       	in	r26, 0x3d	; 61
    315c:	be b7       	in	r27, 0x3e	; 62
    315e:	11 96       	adiw	r26, 0x01	; 1
    3160:	8d 93       	st	X+, r24
    3162:	9c 93       	st	X, r25
    3164:	12 97       	sbiw	r26, 0x02	; 2
    3166:	d8 01       	movw	r26, r16
    3168:	1f 96       	adiw	r26, 0x0f	; 15
    316a:	8c 91       	ld	r24, X
    316c:	82 83       	std	Z+2, r24	; 0x02
    316e:	13 82       	std	Z+3, r1	; 0x03
    3170:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    3174:	ed b7       	in	r30, 0x3d	; 61
    3176:	fe b7       	in	r31, 0x3e	; 62
    3178:	31 96       	adiw	r30, 0x01	; 1
    317a:	86 e6       	ldi	r24, 0x66	; 102
    317c:	94 e0       	ldi	r25, 0x04	; 4
    317e:	ad b7       	in	r26, 0x3d	; 61
    3180:	be b7       	in	r27, 0x3e	; 62
    3182:	11 96       	adiw	r26, 0x01	; 1
    3184:	8d 93       	st	X+, r24
    3186:	9c 93       	st	X, r25
    3188:	12 97       	sbiw	r26, 0x02	; 2
    318a:	d8 01       	movw	r26, r16
    318c:	50 96       	adiw	r26, 0x10	; 16
    318e:	8c 91       	ld	r24, X
    3190:	82 83       	std	Z+2, r24	; 0x02
    3192:	13 82       	std	Z+3, r1	; 0x03
    3194:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    3198:	0f 92       	push	r0
    319a:	0f 92       	push	r0
    319c:	82 e3       	ldi	r24, 0x32	; 50
    319e:	94 e0       	ldi	r25, 0x04	; 4
    31a0:	ed b7       	in	r30, 0x3d	; 61
    31a2:	fe b7       	in	r31, 0x3e	; 62
    31a4:	81 83       	std	Z+1, r24	; 0x01
    31a6:	92 83       	std	Z+2, r25	; 0x02
    31a8:	f8 01       	movw	r30, r16
    31aa:	81 a1       	ldd	r24, Z+33	; 0x21
    31ac:	92 a1       	ldd	r25, Z+34	; 0x22
    31ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    31b0:	b4 a1       	ldd	r27, Z+36	; 0x24
    31b2:	ed b7       	in	r30, 0x3d	; 61
    31b4:	fe b7       	in	r31, 0x3e	; 62
    31b6:	83 83       	std	Z+3, r24	; 0x03
    31b8:	94 83       	std	Z+4, r25	; 0x04
    31ba:	a5 83       	std	Z+5, r26	; 0x05
    31bc:	b6 83       	std	Z+6, r27	; 0x06
    31be:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
    31c2:	8d b7       	in	r24, 0x3d	; 61
    31c4:	9e b7       	in	r25, 0x3e	; 62
    31c6:	06 96       	adiw	r24, 0x06	; 6
    31c8:	8d bf       	out	0x3d, r24	; 61
    31ca:	9e bf       	out	0x3e, r25	; 62
}
    31cc:	1f 91       	pop	r17
    31ce:	0f 91       	pop	r16
    31d0:	ff 90       	pop	r15
    31d2:	ef 90       	pop	r14
    31d4:	08 95       	ret

000031d6 <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    31d6:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    31d8:	00 d0       	rcall	.+0      	; 0x31da <cfg_dump+0x4>
    31da:	0f 92       	push	r0
    31dc:	ed b7       	in	r30, 0x3d	; 61
    31de:	fe b7       	in	r31, 0x3e	; 62
    31e0:	31 96       	adiw	r30, 0x01	; 1
    31e2:	8c ef       	ldi	r24, 0xFC	; 252
    31e4:	96 e0       	ldi	r25, 0x06	; 6
    31e6:	ad b7       	in	r26, 0x3d	; 61
    31e8:	be b7       	in	r27, 0x3e	; 62
    31ea:	11 96       	adiw	r26, 0x01	; 1
    31ec:	8d 93       	st	X+, r24
    31ee:	9c 93       	st	X, r25
    31f0:	12 97       	sbiw	r26, 0x02	; 2
    31f2:	80 91 81 22 	lds	r24, 0x2281
    31f6:	82 83       	std	Z+2, r24	; 0x02
    31f8:	13 82       	std	Z+3, r1	; 0x03
    31fa:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    31fe:	0f 90       	pop	r0
    3200:	0f 90       	pop	r0
    3202:	85 ed       	ldi	r24, 0xD5	; 213
    3204:	96 e0       	ldi	r25, 0x06	; 6
    3206:	ed b7       	in	r30, 0x3d	; 61
    3208:	fe b7       	in	r31, 0x3e	; 62
    320a:	81 83       	std	Z+1, r24	; 0x01
    320c:	92 83       	std	Z+2, r25	; 0x02
    320e:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    3212:	00 d0       	rcall	.+0      	; 0x3214 <cfg_dump+0x3e>
    3214:	0f 92       	push	r0
    3216:	8b ea       	ldi	r24, 0xAB	; 171
    3218:	96 e0       	ldi	r25, 0x06	; 6
    321a:	ad b7       	in	r26, 0x3d	; 61
    321c:	be b7       	in	r27, 0x3e	; 62
    321e:	11 96       	adiw	r26, 0x01	; 1
    3220:	8d 93       	st	X+, r24
    3222:	9c 93       	st	X, r25
    3224:	12 97       	sbiw	r26, 0x02	; 2
    3226:	80 91 83 22 	lds	r24, 0x2283
    322a:	90 91 84 22 	lds	r25, 0x2284
    322e:	a0 91 85 22 	lds	r26, 0x2285
    3232:	b0 91 86 22 	lds	r27, 0x2286
    3236:	ed b7       	in	r30, 0x3d	; 61
    3238:	fe b7       	in	r31, 0x3e	; 62
    323a:	83 83       	std	Z+3, r24	; 0x03
    323c:	94 83       	std	Z+4, r25	; 0x04
    323e:	a5 83       	std	Z+5, r26	; 0x05
    3240:	b6 83       	std	Z+6, r27	; 0x06
    3242:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    3246:	81 e8       	ldi	r24, 0x81	; 129
    3248:	96 e0       	ldi	r25, 0x06	; 6
    324a:	ad b7       	in	r26, 0x3d	; 61
    324c:	be b7       	in	r27, 0x3e	; 62
    324e:	11 96       	adiw	r26, 0x01	; 1
    3250:	8d 93       	st	X+, r24
    3252:	9c 93       	st	X, r25
    3254:	12 97       	sbiw	r26, 0x02	; 2
    3256:	80 91 8b 22 	lds	r24, 0x228B
    325a:	90 91 8c 22 	lds	r25, 0x228C
    325e:	a0 91 8d 22 	lds	r26, 0x228D
    3262:	b0 91 8e 22 	lds	r27, 0x228E
    3266:	ed b7       	in	r30, 0x3d	; 61
    3268:	fe b7       	in	r31, 0x3e	; 62
    326a:	83 83       	std	Z+3, r24	; 0x03
    326c:	94 83       	std	Z+4, r25	; 0x04
    326e:	a5 83       	std	Z+5, r26	; 0x05
    3270:	b6 83       	std	Z+6, r27	; 0x06
    3272:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    3276:	86 e5       	ldi	r24, 0x56	; 86
    3278:	96 e0       	ldi	r25, 0x06	; 6
    327a:	ad b7       	in	r26, 0x3d	; 61
    327c:	be b7       	in	r27, 0x3e	; 62
    327e:	11 96       	adiw	r26, 0x01	; 1
    3280:	8d 93       	st	X+, r24
    3282:	9c 93       	st	X, r25
    3284:	12 97       	sbiw	r26, 0x02	; 2
    3286:	80 91 87 22 	lds	r24, 0x2287
    328a:	90 91 88 22 	lds	r25, 0x2288
    328e:	a0 91 89 22 	lds	r26, 0x2289
    3292:	b0 91 8a 22 	lds	r27, 0x228A
    3296:	ed b7       	in	r30, 0x3d	; 61
    3298:	fe b7       	in	r31, 0x3e	; 62
    329a:	83 83       	std	Z+3, r24	; 0x03
    329c:	94 83       	std	Z+4, r25	; 0x04
    329e:	a5 83       	std	Z+5, r26	; 0x05
    32a0:	b6 83       	std	Z+6, r27	; 0x06
    32a2:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
    32a6:	10 e0       	ldi	r17, 0x00	; 0
    32a8:	8d b7       	in	r24, 0x3d	; 61
    32aa:	9e b7       	in	r25, 0x3e	; 62
    32ac:	06 96       	adiw	r24, 0x06	; 6
    32ae:	8d bf       	out	0x3d, r24	; 61
    32b0:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
		_cfg_dump_axis(axis);
    32b2:	81 2f       	mov	r24, r17
    32b4:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    32b8:	1f 5f       	subi	r17, 0xFF	; 255
    32ba:	14 30       	cpi	r17, 0x04	; 4
    32bc:	d1 f7       	brne	.-12     	; 0x32b2 <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    32be:	1f 91       	pop	r17
    32c0:	08 95       	ret

000032c2 <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	61 e8       	ldi	r22, 0x81	; 129
    32c8:	72 e2       	ldi	r23, 0x22	; 34
    32ca:	4e e6       	ldi	r20, 0x6E	; 110
    32cc:	50 e0       	ldi	r21, 0x00	; 0
    32ce:	0e 94 9c 2a 	call	0x5538	; 0x5538 <memcpy_to_eeprom_with_checksum>
}
    32d2:	08 95       	ret

000032d4 <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	0e 94 ee 29 	call	0x53dc	; 0x53dc <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    32dc:	84 36       	cpi	r24, 0x64	; 100
    32de:	19 f0       	breq	.+6      	; 0x32e6 <cfg_read+0x12>
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	0d c0       	rjmp	.+26     	; 0x3300 <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    32e6:	81 e8       	ldi	r24, 0x81	; 129
    32e8:	92 e2       	ldi	r25, 0x22	; 34
    32ea:	60 e0       	ldi	r22, 0x00	; 0
    32ec:	70 e0       	ldi	r23, 0x00	; 0
    32ee:	4e e6       	ldi	r20, 0x6E	; 110
    32f0:	50 e0       	ldi	r21, 0x00	; 0
    32f2:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <memcpy_from_eeprom_with_checksum>
    32f6:	00 97       	sbiw	r24, 0x00	; 0
    32f8:	11 f0       	breq	.+4      	; 0x32fe <cfg_read+0x2a>
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    3300:	c9 01       	movw	r24, r18
    3302:	08 95       	ret

00003304 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    3304:	cf 92       	push	r12
    3306:	df 92       	push	r13
    3308:	ef 92       	push	r14
    330a:	ff 92       	push	r15
    330c:	1f 93       	push	r17
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	0f 92       	push	r0
    3314:	0f 92       	push	r0
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    331c:	19 82       	std	Y+1, r1	; 0x01
    331e:	1a 82       	std	Y+2, r1	; 0x02
    3320:	cc 24       	eor	r12, r12
    3322:	dd 24       	eor	r13, r13
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	2b c0       	rjmp	.+86     	; 0x3380 <cfg_parse+0x7c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    332a:	9d 33       	cpi	r25, 0x3D	; 61
    332c:	49 f4       	brne	.+18     	; 0x3340 <cfg_parse+0x3c>
			text[j++] = 0;						// terminate tag at separator
    332e:	f7 01       	movw	r30, r14
    3330:	e2 0f       	add	r30, r18
    3332:	f1 1d       	adc	r31, r1
    3334:	10 82       	st	Z, r1
    3336:	2f 5f       	subi	r18, 0xFF	; 255
			val = &text[j];						// new string starts at value
    3338:	67 01       	movw	r12, r14
    333a:	c2 0e       	add	r12, r18
    333c:	d1 1c       	adc	r13, r1
    333e:	20 c0       	rjmp	.+64     	; 0x3380 <cfg_parse+0x7c>
		} else if ( (c == '-') || 				// pass special characters
    3340:	9d 32       	cpi	r25, 0x2D	; 45
    3342:	c9 f0       	breq	.+50     	; 0x3376 <cfg_parse+0x72>
    3344:	9b 32       	cpi	r25, 0x2B	; 43
    3346:	b9 f0       	breq	.+46     	; 0x3376 <cfg_parse+0x72>
    3348:	9e 32       	cpi	r25, 0x2E	; 46
    334a:	a9 f0       	breq	.+42     	; 0x3376 <cfg_parse+0x72>
    334c:	9f 33       	cpi	r25, 0x3F	; 63
    334e:	99 f0       	breq	.+38     	; 0x3376 <cfg_parse+0x72>
    3350:	98 32       	cpi	r25, 0x28	; 40
    3352:	89 f0       	breq	.+34     	; 0x3376 <cfg_parse+0x72>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    3354:	89 2f       	mov	r24, r25
    3356:	81 56       	subi	r24, 0x61	; 97
    3358:	8a 31       	cpi	r24, 0x1A	; 26
    335a:	28 f4       	brcc	.+10     	; 0x3366 <cfg_parse+0x62>
			text[j++] = c-'a'+'A';
    335c:	f7 01       	movw	r30, r14
    335e:	e2 0f       	add	r30, r18
    3360:	f1 1d       	adc	r31, r1
    3362:	90 52       	subi	r25, 0x20	; 32
    3364:	0b c0       	rjmp	.+22     	; 0x337c <cfg_parse+0x78>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    3366:	89 2f       	mov	r24, r25
    3368:	81 54       	subi	r24, 0x41	; 65
    336a:	8a 31       	cpi	r24, 0x1A	; 26
    336c:	20 f0       	brcs	.+8      	; 0x3376 <cfg_parse+0x72>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
    336e:	89 2f       	mov	r24, r25
    3370:	80 53       	subi	r24, 0x30	; 48
    3372:	8a 30       	cpi	r24, 0x0A	; 10
    3374:	28 f4       	brcc	.+10     	; 0x3380 <cfg_parse+0x7c>
			text[j++] = c;
    3376:	f7 01       	movw	r30, r14
    3378:	e2 0f       	add	r30, r18
    337a:	f1 1d       	adc	r31, r1
    337c:	90 83       	st	Z, r25
    337e:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    3380:	f7 01       	movw	r30, r14
    3382:	e3 0f       	add	r30, r19
    3384:	f1 1d       	adc	r31, r1
    3386:	90 81       	ld	r25, Z
    3388:	3f 5f       	subi	r19, 0xFF	; 255
    338a:	99 23       	and	r25, r25
    338c:	71 f6       	brne	.-100    	; 0x332a <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    338e:	f7 01       	movw	r30, r14
    3390:	e2 0f       	add	r30, r18
    3392:	f1 1d       	adc	r31, r1
    3394:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    3396:	2f 5f       	subi	r18, 0xFF	; 255
    3398:	c7 01       	movw	r24, r14
    339a:	82 0f       	add	r24, r18
    339c:	91 1d       	adc	r25, r1
    339e:	89 83       	std	Y+1, r24	; 0x01
    33a0:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    33a2:	10 92 82 22 	sts	0x2282, r1
	switch (text[0]) {
    33a6:	f7 01       	movw	r30, r14
    33a8:	80 81       	ld	r24, Z
    33aa:	81 35       	cpi	r24, 0x51	; 81
    33ac:	d1 f0       	breq	.+52     	; 0x33e2 <cfg_parse+0xde>
    33ae:	82 35       	cpi	r24, 0x52	; 82
    33b0:	60 f4       	brcc	.+24     	; 0x33ca <cfg_parse+0xc6>
    33b2:	81 34       	cpi	r24, 0x41	; 65
    33b4:	59 f1       	breq	.+86     	; 0x340c <cfg_parse+0x108>
    33b6:	82 34       	cpi	r24, 0x42	; 66
    33b8:	28 f4       	brcc	.+10     	; 0x33c4 <cfg_parse+0xc0>
    33ba:	88 32       	cpi	r24, 0x28	; 40
    33bc:	11 f1       	breq	.+68     	; 0x3402 <cfg_parse+0xfe>
    33be:	8f 33       	cpi	r24, 0x3F	; 63
    33c0:	39 f5       	brne	.+78     	; 0x3410 <cfg_parse+0x10c>
    33c2:	0c c0       	rjmp	.+24     	; 0x33dc <cfg_parse+0xd8>
    33c4:	8d 34       	cpi	r24, 0x4D	; 77
    33c6:	21 f5       	brne	.+72     	; 0x3410 <cfg_parse+0x10c>
    33c8:	0e c0       	rjmp	.+28     	; 0x33e6 <cfg_parse+0xe2>
    33ca:	89 35       	cpi	r24, 0x59	; 89
    33cc:	29 f0       	breq	.+10     	; 0x33d8 <cfg_parse+0xd4>
    33ce:	8a 35       	cpi	r24, 0x5A	; 90
    33d0:	d9 f0       	breq	.+54     	; 0x3408 <cfg_parse+0x104>
    33d2:	88 35       	cpi	r24, 0x58	; 88
    33d4:	e9 f4       	brne	.+58     	; 0x3410 <cfg_parse+0x10c>
    33d6:	1f c0       	rjmp	.+62     	; 0x3416 <cfg_parse+0x112>
    33d8:	11 e0       	ldi	r17, 0x01	; 1
    33da:	1e c0       	rjmp	.+60     	; 0x3418 <cfg_parse+0x114>
		case '?': cfg_dump(); status (TG_OK); break;
    33dc:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <cfg_dump>
    33e0:	10 c0       	rjmp	.+32     	; 0x3402 <cfg_parse+0xfe>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    33e2:	83 e0       	ldi	r24, 0x03	; 3
    33e4:	16 c0       	rjmp	.+44     	; 0x3412 <cfg_parse+0x10e>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    33e6:	c6 01       	movw	r24, r12
    33e8:	be 01       	movw	r22, r28
    33ea:	6f 5f       	subi	r22, 0xFF	; 255
    33ec:	7f 4f       	sbci	r23, 0xFF	; 255
    33ee:	0e 94 b5 44 	call	0x896a	; 0x896a <strtod>
    33f2:	60 93 83 22 	sts	0x2283, r22
    33f6:	70 93 84 22 	sts	0x2284, r23
    33fa:	80 93 85 22 	sts	0x2285, r24
    33fe:	90 93 86 22 	sts	0x2286, r25
				  status(TG_OK); 
    3402:	10 92 82 22 	sts	0x2282, r1
    3406:	07 c0       	rjmp	.+14     	; 0x3416 <cfg_parse+0x112>
				  break;
    3408:	12 e0       	ldi	r17, 0x02	; 2
    340a:	06 c0       	rjmp	.+12     	; 0x3418 <cfg_parse+0x114>

		case 'X': axis = X; break;
		case 'Y': axis = Y; break;
		case 'Z': axis = Z; break;
    340c:	13 e0       	ldi	r17, 0x03	; 3
    340e:	04 c0       	rjmp	.+8      	; 0x3418 <cfg_parse+0x114>
		case 'A': axis = A; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    3410:	89 e0       	ldi	r24, 0x09	; 9
    3412:	80 93 82 22 	sts	0x2282, r24
    3416:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    3418:	80 91 82 22 	lds	r24, 0x2282
    341c:	88 23       	and	r24, r24
    341e:	09 f0       	breq	.+2      	; 0x3422 <cfg_parse+0x11e>
    3420:	ee c0       	rjmp	.+476    	; 0x35fe <cfg_parse+0x2fa>
		status(TG_OK);							// pre-emptive setting
    3422:	10 92 82 22 	sts	0x2282, r1
		switch (text[1]) {
    3426:	f7 01       	movw	r30, r14
    3428:	81 81       	ldd	r24, Z+1	; 0x01
    342a:	8c 34       	cpi	r24, 0x4C	; 76
    342c:	09 f4       	brne	.+2      	; 0x3430 <cfg_parse+0x12c>
    342e:	b8 c0       	rjmp	.+368    	; 0x35a0 <cfg_parse+0x29c>
    3430:	8d 34       	cpi	r24, 0x4D	; 77
    3432:	30 f4       	brcc	.+12     	; 0x3440 <cfg_parse+0x13c>
    3434:	84 34       	cpi	r24, 0x44	; 68
    3436:	a9 f1       	breq	.+106    	; 0x34a2 <cfg_parse+0x19e>
    3438:	86 34       	cpi	r24, 0x46	; 70
    343a:	09 f0       	breq	.+2      	; 0x343e <cfg_parse+0x13a>
    343c:	dd c0       	rjmp	.+442    	; 0x35f8 <cfg_parse+0x2f4>
    343e:	1d c0       	rjmp	.+58     	; 0x347a <cfg_parse+0x176>
    3440:	80 35       	cpi	r24, 0x50	; 80
    3442:	09 f4       	brne	.+2      	; 0x3446 <cfg_parse+0x142>
    3444:	47 c0       	rjmp	.+142    	; 0x34d4 <cfg_parse+0x1d0>
    3446:	83 35       	cpi	r24, 0x53	; 83
    3448:	21 f0       	breq	.+8      	; 0x3452 <cfg_parse+0x14e>
    344a:	8d 34       	cpi	r24, 0x4D	; 77
    344c:	09 f0       	breq	.+2      	; 0x3450 <cfg_parse+0x14c>
    344e:	d4 c0       	rjmp	.+424    	; 0x35f8 <cfg_parse+0x2f4>
    3450:	58 c0       	rjmp	.+176    	; 0x3502 <cfg_parse+0x1fe>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    3452:	c6 01       	movw	r24, r12
    3454:	0e 94 23 46 	call	0x8c46	; 0x8c46 <atoi>
    3458:	21 2f       	mov	r18, r17
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	f9 01       	movw	r30, r18
    345e:	ee 0f       	add	r30, r30
    3460:	ff 1f       	adc	r31, r31
    3462:	e2 0f       	add	r30, r18
    3464:	f3 1f       	adc	r31, r19
    3466:	53 e0       	ldi	r21, 0x03	; 3
    3468:	ee 0f       	add	r30, r30
    346a:	ff 1f       	adc	r31, r31
    346c:	5a 95       	dec	r21
    346e:	e1 f7       	brne	.-8      	; 0x3468 <cfg_parse+0x164>
    3470:	ef 57       	subi	r30, 0x7F	; 127
    3472:	fd 4d       	sbci	r31, 0xDD	; 221
    3474:	81 8b       	std	Z+17, r24	; 0x11
    3476:	92 8b       	std	Z+18, r25	; 0x12
    3478:	c2 c0       	rjmp	.+388    	; 0x35fe <cfg_parse+0x2fa>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    347a:	c6 01       	movw	r24, r12
    347c:	0e 94 23 46 	call	0x8c46	; 0x8c46 <atoi>
    3480:	21 2f       	mov	r18, r17
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	f9 01       	movw	r30, r18
    3486:	ee 0f       	add	r30, r30
    3488:	ff 1f       	adc	r31, r31
    348a:	e2 0f       	add	r30, r18
    348c:	f3 1f       	adc	r31, r19
    348e:	23 e0       	ldi	r18, 0x03	; 3
    3490:	ee 0f       	add	r30, r30
    3492:	ff 1f       	adc	r31, r31
    3494:	2a 95       	dec	r18
    3496:	e1 f7       	brne	.-8      	; 0x3490 <cfg_parse+0x18c>
    3498:	ef 57       	subi	r30, 0x7F	; 127
    349a:	fd 4d       	sbci	r31, 0xDD	; 221
    349c:	83 8b       	std	Z+19, r24	; 0x13
    349e:	94 8b       	std	Z+20, r25	; 0x14
    34a0:	ae c0       	rjmp	.+348    	; 0x35fe <cfg_parse+0x2fa>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    34a2:	c6 01       	movw	r24, r12
    34a4:	be 01       	movw	r22, r28
    34a6:	6f 5f       	subi	r22, 0xFF	; 255
    34a8:	7f 4f       	sbci	r23, 0xFF	; 255
    34aa:	0e 94 b5 44 	call	0x896a	; 0x896a <strtod>
    34ae:	21 2f       	mov	r18, r17
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	f9 01       	movw	r30, r18
    34b4:	ee 0f       	add	r30, r30
    34b6:	ff 1f       	adc	r31, r31
    34b8:	e2 0f       	add	r30, r18
    34ba:	f3 1f       	adc	r31, r19
    34bc:	b3 e0       	ldi	r27, 0x03	; 3
    34be:	ee 0f       	add	r30, r30
    34c0:	ff 1f       	adc	r31, r31
    34c2:	ba 95       	dec	r27
    34c4:	e1 f7       	brne	.-8      	; 0x34be <cfg_parse+0x1ba>
    34c6:	ef 57       	subi	r30, 0x7F	; 127
    34c8:	fd 4d       	sbci	r31, 0xDD	; 221
    34ca:	65 8b       	std	Z+21, r22	; 0x15
    34cc:	76 8b       	std	Z+22, r23	; 0x16
    34ce:	87 8b       	std	Z+23, r24	; 0x17
    34d0:	90 8f       	std	Z+24, r25	; 0x18
    34d2:	95 c0       	rjmp	.+298    	; 0x35fe <cfg_parse+0x2fa>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    34d4:	c6 01       	movw	r24, r12
    34d6:	0e 94 23 46 	call	0x8c46	; 0x8c46 <atoi>
    34da:	68 2f       	mov	r22, r24
    34dc:	81 2f       	mov	r24, r17
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	fc 01       	movw	r30, r24
    34e2:	ee 0f       	add	r30, r30
    34e4:	ff 1f       	adc	r31, r31
    34e6:	e8 0f       	add	r30, r24
    34e8:	f9 1f       	adc	r31, r25
    34ea:	73 e0       	ldi	r23, 0x03	; 3
    34ec:	ee 0f       	add	r30, r30
    34ee:	ff 1f       	adc	r31, r31
    34f0:	7a 95       	dec	r23
    34f2:	e1 f7       	brne	.-8      	; 0x34ec <cfg_parse+0x1e8>
    34f4:	ef 57       	subi	r30, 0x7F	; 127
    34f6:	fd 4d       	sbci	r31, 0xDD	; 221
    34f8:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    34fa:	81 2f       	mov	r24, r17
    34fc:	0e 94 a1 24 	call	0x4942	; 0x4942 <st_set_polarity>
    3500:	7e c0       	rjmp	.+252    	; 0x35fe <cfg_parse+0x2fa>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    3502:	f7 01       	movw	r30, r14
    3504:	82 81       	ldd	r24, Z+2	; 0x02
    3506:	89 34       	cpi	r24, 0x49	; 73
    3508:	99 f4       	brne	.+38     	; 0x3530 <cfg_parse+0x22c>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    350a:	c6 01       	movw	r24, r12
    350c:	0e 94 23 46 	call	0x8c46	; 0x8c46 <atoi>
    3510:	21 2f       	mov	r18, r17
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	f9 01       	movw	r30, r18
    3516:	ee 0f       	add	r30, r30
    3518:	ff 1f       	adc	r31, r31
    351a:	e2 0f       	add	r30, r18
    351c:	f3 1f       	adc	r31, r19
    351e:	53 e0       	ldi	r21, 0x03	; 3
    3520:	ee 0f       	add	r30, r30
    3522:	ff 1f       	adc	r31, r31
    3524:	5a 95       	dec	r21
    3526:	e1 f7       	brne	.-8      	; 0x3520 <cfg_parse+0x21c>
    3528:	ef 57       	subi	r30, 0x7F	; 127
    352a:	fd 4d       	sbci	r31, 0xDD	; 221
    352c:	86 87       	std	Z+14, r24	; 0x0e
    352e:	67 c0       	rjmp	.+206    	; 0x35fe <cfg_parse+0x2fa>
				} else if (text[3] == 'R') {
    3530:	f7 01       	movw	r30, r14
    3532:	83 81       	ldd	r24, Z+3	; 0x03
    3534:	82 35       	cpi	r24, 0x52	; 82
    3536:	c9 f4       	brne	.+50     	; 0x356a <cfg_parse+0x266>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    3538:	c6 01       	movw	r24, r12
    353a:	be 01       	movw	r22, r28
    353c:	6f 5f       	subi	r22, 0xFF	; 255
    353e:	7f 4f       	sbci	r23, 0xFF	; 255
    3540:	0e 94 b5 44 	call	0x896a	; 0x896a <strtod>
    3544:	21 2f       	mov	r18, r17
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	f9 01       	movw	r30, r18
    354a:	ee 0f       	add	r30, r30
    354c:	ff 1f       	adc	r31, r31
    354e:	e2 0f       	add	r30, r18
    3550:	f3 1f       	adc	r31, r19
    3552:	13 e0       	ldi	r17, 0x03	; 3
    3554:	ee 0f       	add	r30, r30
    3556:	ff 1f       	adc	r31, r31
    3558:	1a 95       	dec	r17
    355a:	e1 f7       	brne	.-8      	; 0x3554 <cfg_parse+0x250>
    355c:	ef 57       	subi	r30, 0x7F	; 127
    355e:	fd 4d       	sbci	r31, 0xDD	; 221
    3560:	61 8f       	std	Z+25, r22	; 0x19
    3562:	72 8f       	std	Z+26, r23	; 0x1a
    3564:	83 8f       	std	Z+27, r24	; 0x1b
    3566:	94 8f       	std	Z+28, r25	; 0x1c
    3568:	4a c0       	rjmp	.+148    	; 0x35fe <cfg_parse+0x2fa>
				} else if (text[3] == 'T') {
    356a:	84 35       	cpi	r24, 0x54	; 84
    356c:	c9 f4       	brne	.+50     	; 0x35a0 <cfg_parse+0x29c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    356e:	c6 01       	movw	r24, r12
    3570:	be 01       	movw	r22, r28
    3572:	6f 5f       	subi	r22, 0xFF	; 255
    3574:	7f 4f       	sbci	r23, 0xFF	; 255
    3576:	0e 94 b5 44 	call	0x896a	; 0x896a <strtod>
    357a:	21 2f       	mov	r18, r17
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	f9 01       	movw	r30, r18
    3580:	ee 0f       	add	r30, r30
    3582:	ff 1f       	adc	r31, r31
    3584:	e2 0f       	add	r30, r18
    3586:	f3 1f       	adc	r31, r19
    3588:	a3 e0       	ldi	r26, 0x03	; 3
    358a:	ee 0f       	add	r30, r30
    358c:	ff 1f       	adc	r31, r31
    358e:	aa 95       	dec	r26
    3590:	e1 f7       	brne	.-8      	; 0x358a <cfg_parse+0x286>
    3592:	ef 57       	subi	r30, 0x7F	; 127
    3594:	fd 4d       	sbci	r31, 0xDD	; 221
    3596:	65 8f       	std	Z+29, r22	; 0x1d
    3598:	76 8f       	std	Z+30, r23	; 0x1e
    359a:	87 8f       	std	Z+31, r24	; 0x1f
    359c:	90 a3       	std	Z+32, r25	; 0x20
    359e:	2f c0       	rjmp	.+94     	; 0x35fe <cfg_parse+0x2fa>
				}
			case 'L': 
				if (text[2] == 'O') {
    35a0:	f7 01       	movw	r30, r14
    35a2:	82 81       	ldd	r24, Z+2	; 0x02
    35a4:	8f 34       	cpi	r24, 0x4F	; 79
    35a6:	99 f4       	brne	.+38     	; 0x35ce <cfg_parse+0x2ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    35a8:	c6 01       	movw	r24, r12
    35aa:	0e 94 23 46 	call	0x8c46	; 0x8c46 <atoi>
    35ae:	21 2f       	mov	r18, r17
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	f9 01       	movw	r30, r18
    35b4:	ee 0f       	add	r30, r30
    35b6:	ff 1f       	adc	r31, r31
    35b8:	e2 0f       	add	r30, r18
    35ba:	f3 1f       	adc	r31, r19
    35bc:	53 e0       	ldi	r21, 0x03	; 3
    35be:	ee 0f       	add	r30, r30
    35c0:	ff 1f       	adc	r31, r31
    35c2:	5a 95       	dec	r21
    35c4:	e1 f7       	brne	.-8      	; 0x35be <cfg_parse+0x2ba>
    35c6:	ef 57       	subi	r30, 0x7F	; 127
    35c8:	fd 4d       	sbci	r31, 0xDD	; 221
    35ca:	87 87       	std	Z+15, r24	; 0x0f
    35cc:	18 c0       	rjmp	.+48     	; 0x35fe <cfg_parse+0x2fa>
				} else if (text[2] == 'I') {
    35ce:	89 34       	cpi	r24, 0x49	; 73
    35d0:	99 f4       	brne	.+38     	; 0x35f8 <cfg_parse+0x2f4>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    35d2:	c6 01       	movw	r24, r12
    35d4:	0e 94 23 46 	call	0x8c46	; 0x8c46 <atoi>
    35d8:	21 2f       	mov	r18, r17
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	f9 01       	movw	r30, r18
    35de:	ee 0f       	add	r30, r30
    35e0:	ff 1f       	adc	r31, r31
    35e2:	e2 0f       	add	r30, r18
    35e4:	f3 1f       	adc	r31, r19
    35e6:	23 e0       	ldi	r18, 0x03	; 3
    35e8:	ee 0f       	add	r30, r30
    35ea:	ff 1f       	adc	r31, r31
    35ec:	2a 95       	dec	r18
    35ee:	e1 f7       	brne	.-8      	; 0x35e8 <cfg_parse+0x2e4>
    35f0:	ef 57       	subi	r30, 0x7F	; 127
    35f2:	fd 4d       	sbci	r31, 0xDD	; 221
    35f4:	85 a3       	std	Z+37, r24	; 0x25
    35f6:	03 c0       	rjmp	.+6      	; 0x35fe <cfg_parse+0x2fa>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    35f8:	89 e0       	ldi	r24, 0x09	; 9
    35fa:	80 93 82 22 	sts	0x2282, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    35fe:	80 91 82 22 	lds	r24, 0x2282
    3602:	b7 01       	movw	r22, r14
    3604:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    3608:	80 91 82 22 	lds	r24, 0x2282
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	0f 90       	pop	r0
    3610:	0f 90       	pop	r0
    3612:	cf 91       	pop	r28
    3614:	df 91       	pop	r29
    3616:	1f 91       	pop	r17
    3618:	ff 90       	pop	r15
    361a:	ef 90       	pop	r14
    361c:	df 90       	pop	r13
    361e:	cf 90       	pop	r12
    3620:	08 95       	ret

00003622 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3622:	ef 92       	push	r14
    3624:	ff 92       	push	r15
    3626:	0f 93       	push	r16
    3628:	1f 93       	push	r17
    362a:	df 93       	push	r29
    362c:	cf 93       	push	r28
    362e:	cd b7       	in	r28, 0x3d	; 61
    3630:	de b7       	in	r29, 0x3e	; 62
    3632:	a8 97       	sbiw	r28, 0x28	; 40
    3634:	cd bf       	out	0x3d, r28	; 61
    3636:	de bf       	out	0x3e, r29	; 62
    3638:	0b e4       	ldi	r16, 0x4B	; 75
    363a:	12 e0       	ldi	r17, 0x02	; 2
    363c:	a0 e0       	ldi	r26, 0x00	; 0
    363e:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    3640:	7e 01       	movw	r14, r28
    3642:	08 94       	sec
    3644:	e1 1c       	adc	r14, r1
    3646:	f1 1c       	adc	r15, r1
    3648:	02 c0       	rjmp	.+4      	; 0x364e <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    364a:	0f 5f       	subi	r16, 0xFF	; 255
    364c:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    364e:	f8 01       	movw	r30, r16
    3650:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    3652:	88 23       	and	r24, r24
    3654:	89 f4       	brne	.+34     	; 0x3678 <cfg_test+0x56>
			text[j] = 0;
    3656:	ce 01       	movw	r24, r28
    3658:	01 96       	adiw	r24, 0x01	; 1
    365a:	a8 0f       	add	r26, r24
    365c:	b9 1f       	adc	r27, r25
    365e:	1c 92       	st	X, r1
			cfg_parse(text);
    3660:	0e 94 82 19 	call	0x3304	; 0x3304 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    3664:	a8 96       	adiw	r28, 0x28	; 40
    3666:	cd bf       	out	0x3d, r28	; 61
    3668:	de bf       	out	0x3e, r29	; 62
    366a:	cf 91       	pop	r28
    366c:	df 91       	pop	r29
    366e:	1f 91       	pop	r17
    3670:	0f 91       	pop	r16
    3672:	ff 90       	pop	r15
    3674:	ef 90       	pop	r14
    3676:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    3678:	8d 30       	cpi	r24, 0x0D	; 13
    367a:	21 f0       	breq	.+8      	; 0x3684 <cfg_test+0x62>
    367c:	8a 30       	cpi	r24, 0x0A	; 10
    367e:	11 f0       	breq	.+4      	; 0x3684 <cfg_test+0x62>
    3680:	8b 33       	cpi	r24, 0x3B	; 59
    3682:	49 f4       	brne	.+18     	; 0x3696 <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    3684:	ae 0d       	add	r26, r14
    3686:	bf 1d       	adc	r27, r15
    3688:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    368a:	c7 01       	movw	r24, r14
    368c:	0e 94 82 19 	call	0x3304	; 0x3304 <cfg_parse>
    3690:	a0 e0       	ldi	r26, 0x00	; 0
    3692:	b0 e0       	ldi	r27, 0x00	; 0
    3694:	da cf       	rjmp	.-76     	; 0x364a <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    3696:	81 32       	cpi	r24, 0x21	; 33
    3698:	c0 f2       	brcs	.-80     	; 0x364a <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    369a:	f7 01       	movw	r30, r14
    369c:	ea 0f       	add	r30, r26
    369e:	fb 1f       	adc	r31, r27
    36a0:	80 83       	st	Z, r24
    36a2:	11 96       	adiw	r26, 0x01	; 1
    36a4:	d2 cf       	rjmp	.-92     	; 0x364a <cfg_test+0x28>

000036a6 <en_init>:


void en_init(void) 
{
	return;
}
    36a6:	08 95       	ret

000036a8 <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
    36a8:	88 23       	and	r24, r24
    36aa:	b1 f0       	breq	.+44     	; 0x36d8 <en_write+0x30>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    36ac:	e0 91 7d 22 	lds	r30, 0x227D
    36b0:	f0 91 7e 22 	lds	r31, 0x227E
    36b4:	80 e2       	ldi	r24, 0x20	; 32
    36b6:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    36b8:	e0 91 6d 22 	lds	r30, 0x226D
    36bc:	f0 91 6e 22 	lds	r31, 0x226E
    36c0:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    36c2:	e0 91 5d 22 	lds	r30, 0x225D
    36c6:	f0 91 5e 22 	lds	r31, 0x225E
    36ca:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    36cc:	e0 91 4d 22 	lds	r30, 0x224D
    36d0:	f0 91 4e 22 	lds	r31, 0x224E
    36d4:	85 83       	std	Z+5, r24	; 0x05
    36d6:	08 95       	ret
void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36d8:	e0 91 7d 22 	lds	r30, 0x227D
    36dc:	f0 91 7e 22 	lds	r31, 0x227E
    36e0:	80 e2       	ldi	r24, 0x20	; 32
    36e2:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36e4:	e0 91 6d 22 	lds	r30, 0x226D
    36e8:	f0 91 6e 22 	lds	r31, 0x226E
    36ec:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36ee:	e0 91 5d 22 	lds	r30, 0x225D
    36f2:	f0 91 5e 22 	lds	r31, 0x225E
    36f6:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36f8:	e0 91 4d 22 	lds	r30, 0x224D
    36fc:	f0 91 4e 22 	lds	r31, 0x224E
    3700:	86 83       	std	Z+6, r24	; 0x06
    3702:	08 95       	ret

00003704 <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    3704:	0f 93       	push	r16
    3706:	df 93       	push	r29
    3708:	cf 93       	push	r28
    370a:	0f 92       	push	r0
    370c:	cd b7       	in	r28, 0x3d	; 61
    370e:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    3710:	8b ec       	ldi	r24, 0xCB	; 203
    3712:	e0 e5       	ldi	r30, 0x50	; 80
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    3718:	88 e0       	ldi	r24, 0x08	; 8
    371a:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    371e:	80 91 51 00 	lds	r24, 0x0051
    3722:	83 ff       	sbrs	r24, 3
    3724:	fc cf       	rjmp	.-8      	; 0x371e <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    3726:	82 ec       	ldi	r24, 0xC2	; 194
    3728:	e0 e5       	ldi	r30, 0x50	; 80
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    372e:	88 e1       	ldi	r24, 0x18	; 24
    3730:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    3734:	80 91 51 00 	lds	r24, 0x0051
    3738:	84 ff       	sbrs	r24, 4
    373a:	fc cf       	rjmp	.-8      	; 0x3734 <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    373c:	8f b7       	in	r24, 0x3f	; 63
    373e:	89 83       	std	Y+1, r24	; 0x01
    3740:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3742:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3744:	24 e0       	ldi	r18, 0x04	; 4
    3746:	80 e4       	ldi	r24, 0x40	; 64
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	fc 01       	movw	r30, r24
    374c:	08 ed       	ldi	r16, 0xD8	; 216
    374e:	04 bf       	out	0x34, r16	; 52
    3750:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3752:	89 81       	ldd	r24, Y+1	; 0x01
    3754:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    3756:	80 91 50 00 	lds	r24, 0x0050
    375a:	8e 7f       	andi	r24, 0xFE	; 254
    375c:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    3760:	0f 90       	pop	r0
    3762:	cf 91       	pop	r28
    3764:	df 91       	pop	r29
    3766:	0f 91       	pop	r16
    3768:	08 95       	ret

0000376a <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    376a:	0e 94 82 1b 	call	0x3704	; 0x3704 <xmega_init_clocks>
}
    376e:	08 95       	ret

00003770 <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3770:	0f 93       	push	r16
    3772:	df 93       	push	r29
    3774:	cf 93       	push	r28
    3776:	0f 92       	push	r0
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    377c:	2f b7       	in	r18, 0x3f	; 63
    377e:	29 83       	std	Y+1, r18	; 0x01
    3780:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3782:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3784:	fc 01       	movw	r30, r24
    3786:	08 ed       	ldi	r16, 0xD8	; 216
    3788:	04 bf       	out	0x34, r16	; 52
    378a:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	8f bf       	out	0x3f, r24	; 63
#endif
}
    3790:	0f 90       	pop	r0
    3792:	cf 91       	pop	r28
    3794:	df 91       	pop	r29
    3796:	0f 91       	pop	r16
    3798:	08 95       	ret

0000379a <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

int mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    379a:	10 92 5a 21 	sts	0x215A, r1
	ma.arc_state = MC_STATE_OFF;
    379e:	10 92 ef 22 	sts	0x22EF, r1
	return (TG_OK);
}
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	08 95       	ret

000037a8 <mc_go_home>:
 */

int mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    37a8:	8c e0       	ldi	r24, 0x0C	; 12
    37aa:	eb e5       	ldi	r30, 0x5B	; 91
    37ac:	f1 e2       	ldi	r31, 0x21	; 33
    37ae:	df 01       	movw	r26, r30
    37b0:	1d 92       	st	X+, r1
    37b2:	8a 95       	dec	r24
    37b4:	e9 f7       	brne	.-6      	; 0x37b0 <mc_go_home+0x8>
	return (TG_OK);
}
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	08 95       	ret

000037bc <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    37bc:	8c e0       	ldi	r24, 0x0C	; 12
    37be:	eb e5       	ldi	r30, 0x5B	; 91
    37c0:	f1 e2       	ldi	r31, 0x21	; 33
    37c2:	df 01       	movw	r26, r30
    37c4:	1d 92       	st	X+, r1
    37c6:	8a 95       	dec	r24
    37c8:	e9 f7       	brne	.-6      	; 0x37c4 <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    37ca:	10 92 5a 21 	sts	0x215A, r1
	ma.arc_state = MC_STATE_OFF;
    37ce:	10 92 ef 22 	sts	0x22EF, r1
}
    37d2:	08 95       	ret

000037d4 <mc_line_continue>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continue() 
{
    37d4:	af 92       	push	r10
    37d6:	bf 92       	push	r11
    37d8:	cf 92       	push	r12
    37da:	df 92       	push	r13
    37dc:	ef 92       	push	r14
    37de:	ff 92       	push	r15
    37e0:	0f 93       	push	r16
    37e2:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    37e4:	80 91 5a 21 	lds	r24, 0x215A
    37e8:	88 23       	and	r24, r24
    37ea:	19 f4       	brne	.+6      	; 0x37f2 <mc_line_continue+0x1e>
    37ec:	22 e0       	ldi	r18, 0x02	; 2
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	30 c0       	rjmp	.+96     	; 0x3852 <mc_line_continue+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    37f2:	82 e0       	ldi	r24, 0x02	; 2
    37f4:	80 93 5a 21 	sts	0x215A, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    37f8:	0e 94 ae 2c 	call	0x595c	; 0x595c <mv_test_move_buffer_full>
    37fc:	88 23       	and	r24, r24
    37fe:	19 f0       	breq	.+6      	; 0x3806 <mc_line_continue+0x32>
    3800:	21 e0       	ldi	r18, 0x01	; 1
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	26 c0       	rjmp	.+76     	; 0x3852 <mc_line_continue+0x7e>
		return (TG_EAGAIN);
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    3806:	60 91 73 21 	lds	r22, 0x2173
    380a:	70 91 74 21 	lds	r23, 0x2174
    380e:	80 91 75 21 	lds	r24, 0x2175
    3812:	90 91 76 21 	lds	r25, 0x2176
    3816:	20 91 77 21 	lds	r18, 0x2177
    381a:	30 91 78 21 	lds	r19, 0x2178
    381e:	40 91 79 21 	lds	r20, 0x2179
    3822:	50 91 7a 21 	lds	r21, 0x217A
    3826:	e0 90 7b 21 	lds	r14, 0x217B
    382a:	f0 90 7c 21 	lds	r15, 0x217C
    382e:	00 91 7d 21 	lds	r16, 0x217D
    3832:	10 91 7e 21 	lds	r17, 0x217E
    3836:	a0 90 7f 21 	lds	r10, 0x217F
    383a:	b0 90 80 21 	lds	r11, 0x2180
    383e:	c0 90 81 21 	lds	r12, 0x2181
    3842:	d0 90 82 21 	lds	r13, 0x2182
    3846:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    384a:	10 92 5a 21 	sts	0x215A, r1
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3852:	c9 01       	movw	r24, r18
    3854:	1f 91       	pop	r17
    3856:	0f 91       	pop	r16
    3858:	ff 90       	pop	r15
    385a:	ef 90       	pop	r14
    385c:	df 90       	pop	r13
    385e:	cf 90       	pop	r12
    3860:	bf 90       	pop	r11
    3862:	af 90       	pop	r10
    3864:	08 95       	ret

00003866 <mc_dwell>:
 * NOTE: It's not necessary to set the target as this is set correctly in the Gcode. 
 */

int mc_dwell(double seconds) 
{
	mc.steps[X] = 0;
    3866:	10 92 73 21 	sts	0x2173, r1
    386a:	10 92 74 21 	sts	0x2174, r1
    386e:	10 92 75 21 	sts	0x2175, r1
    3872:	10 92 76 21 	sts	0x2176, r1
	mc.steps[Y] = 0;
    3876:	10 92 77 21 	sts	0x2177, r1
    387a:	10 92 78 21 	sts	0x2178, r1
    387e:	10 92 79 21 	sts	0x2179, r1
    3882:	10 92 7a 21 	sts	0x217A, r1
	mc.steps[Z] = 0;
    3886:	10 92 7b 21 	sts	0x217B, r1
    388a:	10 92 7c 21 	sts	0x217C, r1
    388e:	10 92 7d 21 	sts	0x217D, r1
    3892:	10 92 7e 21 	sts	0x217E, r1
	mc.mm_of_travel = 0;	// not actually used, but makes debug make more sense
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	40 e0       	ldi	r20, 0x00	; 0
    389c:	50 e0       	ldi	r21, 0x00	; 0
    389e:	20 93 83 21 	sts	0x2183, r18
    38a2:	30 93 84 21 	sts	0x2184, r19
    38a6:	40 93 85 21 	sts	0x2185, r20
    38aa:	50 93 86 21 	sts	0x2186, r21
	mc.microseconds = trunc(seconds*1000000);
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	34 e2       	ldi	r19, 0x24	; 36
    38b2:	44 e7       	ldi	r20, 0x74	; 116
    38b4:	59 e4       	ldi	r21, 0x49	; 73
    38b6:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    38ba:	0e 94 1e 41 	call	0x823c	; 0x823c <__fixunssfsi>
    38be:	60 93 7f 21 	sts	0x217F, r22
    38c2:	70 93 80 21 	sts	0x2180, r23
    38c6:	80 93 81 21 	sts	0x2181, r24
    38ca:	90 93 82 21 	sts	0x2182, r25
	mc.line_state = MC_STATE_NEW;
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	80 93 5a 21 	sts	0x215A, r24
	return (mc_line_continue());
    38d4:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <mc_line_continue>
}
    38d8:	08 95       	ret

000038da <mc_line>:
/* 
 * mc_line() - queue a line move; non-blocking version
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    38da:	2f 92       	push	r2
    38dc:	3f 92       	push	r3
    38de:	4f 92       	push	r4
    38e0:	5f 92       	push	r5
    38e2:	6f 92       	push	r6
    38e4:	7f 92       	push	r7
    38e6:	8f 92       	push	r8
    38e8:	9f 92       	push	r9
    38ea:	af 92       	push	r10
    38ec:	bf 92       	push	r11
    38ee:	cf 92       	push	r12
    38f0:	df 92       	push	r13
    38f2:	ef 92       	push	r14
    38f4:	ff 92       	push	r15
    38f6:	0f 93       	push	r16
    38f8:	1f 93       	push	r17
    38fa:	df 93       	push	r29
    38fc:	cf 93       	push	r28
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
    3902:	64 97       	sbiw	r28, 0x14	; 20
    3904:	cd bf       	out	0x3d, r28	; 61
    3906:	de bf       	out	0x3e, r29	; 62
    3908:	2d 87       	std	Y+13, r18	; 0x0d
    390a:	3e 87       	std	Y+14, r19	; 0x0e
    390c:	4f 87       	std	Y+15, r20	; 0x0f
    390e:	58 8b       	std	Y+16, r21	; 0x10
    3910:	a9 8a       	std	Y+17, r10	; 0x11
    3912:	ba 8a       	std	Y+18, r11	; 0x12
    3914:	cb 8a       	std	Y+19, r12	; 0x13
    3916:	dc 8a       	std	Y+20, r13	; 0x14
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    3918:	20 91 a2 22 	lds	r18, 0x22A2
    391c:	30 91 a3 22 	lds	r19, 0x22A3
    3920:	40 91 a4 22 	lds	r20, 0x22A4
    3924:	50 91 a5 22 	lds	r21, 0x22A5
    3928:	29 87       	std	Y+9, r18	; 0x09
    392a:	3a 87       	std	Y+10, r19	; 0x0a
    392c:	4b 87       	std	Y+11, r20	; 0x0b
    392e:	5c 87       	std	Y+12, r21	; 0x0c
    3930:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    3934:	0e 94 3c 43 	call	0x8678	; 0x8678 <lround>
    3938:	2b 01       	movw	r4, r22
    393a:	3c 01       	movw	r6, r24
    393c:	40 92 67 21 	sts	0x2167, r4
    3940:	50 92 68 21 	sts	0x2168, r5
    3944:	60 92 69 21 	sts	0x2169, r6
    3948:	70 92 6a 21 	sts	0x216A, r7
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    394c:	80 91 ba 22 	lds	r24, 0x22BA
    3950:	90 91 bb 22 	lds	r25, 0x22BB
    3954:	a0 91 bc 22 	lds	r26, 0x22BC
    3958:	b0 91 bd 22 	lds	r27, 0x22BD
    395c:	8d 83       	std	Y+5, r24	; 0x05
    395e:	9e 83       	std	Y+6, r25	; 0x06
    3960:	af 83       	std	Y+7, r26	; 0x07
    3962:	b8 87       	std	Y+8, r27	; 0x08
    3964:	6d 85       	ldd	r22, Y+13	; 0x0d
    3966:	7e 85       	ldd	r23, Y+14	; 0x0e
    3968:	8f 85       	ldd	r24, Y+15	; 0x0f
    396a:	98 89       	ldd	r25, Y+16	; 0x10
    396c:	2d 81       	ldd	r18, Y+5	; 0x05
    396e:	3e 81       	ldd	r19, Y+6	; 0x06
    3970:	4f 81       	ldd	r20, Y+7	; 0x07
    3972:	58 85       	ldd	r21, Y+8	; 0x08
    3974:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    3978:	0e 94 3c 43 	call	0x8678	; 0x8678 <lround>
    397c:	5b 01       	movw	r10, r22
    397e:	6c 01       	movw	r12, r24
    3980:	a0 92 6b 21 	sts	0x216B, r10
    3984:	b0 92 6c 21 	sts	0x216C, r11
    3988:	c0 92 6d 21 	sts	0x216D, r12
    398c:	d0 92 6e 21 	sts	0x216E, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    3990:	20 91 d2 22 	lds	r18, 0x22D2
    3994:	30 91 d3 22 	lds	r19, 0x22D3
    3998:	40 91 d4 22 	lds	r20, 0x22D4
    399c:	50 91 d5 22 	lds	r21, 0x22D5
    39a0:	29 83       	std	Y+1, r18	; 0x01
    39a2:	3a 83       	std	Y+2, r19	; 0x02
    39a4:	4b 83       	std	Y+3, r20	; 0x03
    39a6:	5c 83       	std	Y+4, r21	; 0x04
    39a8:	c8 01       	movw	r24, r16
    39aa:	b7 01       	movw	r22, r14
    39ac:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    39b0:	0e 94 3c 43 	call	0x8678	; 0x8678 <lround>
    39b4:	9b 01       	movw	r18, r22
    39b6:	ac 01       	movw	r20, r24
    39b8:	20 93 6f 21 	sts	0x216F, r18
    39bc:	30 93 70 21 	sts	0x2170, r19
    39c0:	40 93 71 21 	sts	0x2171, r20
    39c4:	50 93 72 21 	sts	0x2172, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    39c8:	80 91 5b 21 	lds	r24, 0x215B
    39cc:	90 91 5c 21 	lds	r25, 0x215C
    39d0:	a0 91 5d 21 	lds	r26, 0x215D
    39d4:	b0 91 5e 21 	lds	r27, 0x215E
    39d8:	83 01       	movw	r16, r6
    39da:	72 01       	movw	r14, r4
    39dc:	e8 1a       	sub	r14, r24
    39de:	f9 0a       	sbc	r15, r25
    39e0:	0a 0b       	sbc	r16, r26
    39e2:	1b 0b       	sbc	r17, r27
    39e4:	e0 92 73 21 	sts	0x2173, r14
    39e8:	f0 92 74 21 	sts	0x2174, r15
    39ec:	00 93 75 21 	sts	0x2175, r16
    39f0:	10 93 76 21 	sts	0x2176, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    39f4:	80 91 5f 21 	lds	r24, 0x215F
    39f8:	90 91 60 21 	lds	r25, 0x2160
    39fc:	a0 91 61 21 	lds	r26, 0x2161
    3a00:	b0 91 62 21 	lds	r27, 0x2162
    3a04:	a8 1a       	sub	r10, r24
    3a06:	b9 0a       	sbc	r11, r25
    3a08:	ca 0a       	sbc	r12, r26
    3a0a:	db 0a       	sbc	r13, r27
    3a0c:	a0 92 77 21 	sts	0x2177, r10
    3a10:	b0 92 78 21 	sts	0x2178, r11
    3a14:	c0 92 79 21 	sts	0x2179, r12
    3a18:	d0 92 7a 21 	sts	0x217A, r13
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    3a1c:	80 91 63 21 	lds	r24, 0x2163
    3a20:	90 91 64 21 	lds	r25, 0x2164
    3a24:	a0 91 65 21 	lds	r26, 0x2165
    3a28:	b0 91 66 21 	lds	r27, 0x2166
    3a2c:	19 01       	movw	r2, r18
    3a2e:	2a 01       	movw	r4, r20
    3a30:	28 1a       	sub	r2, r24
    3a32:	39 0a       	sbc	r3, r25
    3a34:	4a 0a       	sbc	r4, r26
    3a36:	5b 0a       	sbc	r5, r27
    3a38:	20 92 7b 21 	sts	0x217B, r2
    3a3c:	30 92 7c 21 	sts	0x217C, r3
    3a40:	40 92 7d 21 	sts	0x217D, r4
    3a44:	50 92 7e 21 	sts	0x217E, r5

	if (invert_feed_rate) {
    3a48:	89 28       	or	r8, r9
    3a4a:	59 f0       	breq	.+22     	; 0x3a62 <mc_line+0x188>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3a4c:	60 ec       	ldi	r22, 0xC0	; 192
    3a4e:	71 ee       	ldi	r23, 0xE1	; 225
    3a50:	84 e6       	ldi	r24, 0x64	; 100
    3a52:	9c e4       	ldi	r25, 0x4C	; 76
    3a54:	29 89       	ldd	r18, Y+17	; 0x11
    3a56:	3a 89       	ldd	r19, Y+18	; 0x12
    3a58:	4b 89       	ldd	r20, Y+19	; 0x13
    3a5a:	5c 89       	ldd	r21, Y+20	; 0x14
    3a5c:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    3a60:	4a c0       	rjmp	.+148    	; 0x3af6 <mc_line+0x21c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    3a62:	c8 01       	movw	r24, r16
    3a64:	b7 01       	movw	r22, r14
    3a66:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    3a6a:	29 85       	ldd	r18, Y+9	; 0x09
    3a6c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a6e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a70:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a72:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    3a76:	0e 94 17 44 	call	0x882e	; 0x882e <square>
    3a7a:	3b 01       	movw	r6, r22
    3a7c:	4c 01       	movw	r8, r24
    3a7e:	c6 01       	movw	r24, r12
    3a80:	b5 01       	movw	r22, r10
    3a82:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    3a86:	2d 81       	ldd	r18, Y+5	; 0x05
    3a88:	3e 81       	ldd	r19, Y+6	; 0x06
    3a8a:	4f 81       	ldd	r20, Y+7	; 0x07
    3a8c:	58 85       	ldd	r21, Y+8	; 0x08
    3a8e:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    3a92:	0e 94 17 44 	call	0x882e	; 0x882e <square>
    3a96:	5b 01       	movw	r10, r22
    3a98:	6c 01       	movw	r12, r24
    3a9a:	c2 01       	movw	r24, r4
    3a9c:	b1 01       	movw	r22, r2
    3a9e:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    3aa2:	29 81       	ldd	r18, Y+1	; 0x01
    3aa4:	3a 81       	ldd	r19, Y+2	; 0x02
    3aa6:	4b 81       	ldd	r20, Y+3	; 0x03
    3aa8:	5c 81       	ldd	r21, Y+4	; 0x04
    3aaa:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    3aae:	0e 94 17 44 	call	0x882e	; 0x882e <square>
    3ab2:	7b 01       	movw	r14, r22
    3ab4:	8c 01       	movw	r16, r24
    3ab6:	c4 01       	movw	r24, r8
    3ab8:	b3 01       	movw	r22, r6
    3aba:	a6 01       	movw	r20, r12
    3abc:	95 01       	movw	r18, r10
    3abe:	0e 94 0b 40 	call	0x8016	; 0x8016 <__addsf3>
    3ac2:	a8 01       	movw	r20, r16
    3ac4:	97 01       	movw	r18, r14
    3ac6:	0e 94 0b 40 	call	0x8016	; 0x8016 <__addsf3>
    3aca:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <sqrt>
    3ace:	60 93 83 21 	sts	0x2183, r22
    3ad2:	70 93 84 21 	sts	0x2184, r23
    3ad6:	80 93 85 21 	sts	0x2185, r24
    3ada:	90 93 86 21 	sts	0x2186, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3ade:	29 89       	ldd	r18, Y+17	; 0x11
    3ae0:	3a 89       	ldd	r19, Y+18	; 0x12
    3ae2:	4b 89       	ldd	r20, Y+19	; 0x13
    3ae4:	5c 89       	ldd	r21, Y+20	; 0x14
    3ae6:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	34 e2       	ldi	r19, 0x24	; 36
    3aee:	44 e7       	ldi	r20, 0x74	; 116
    3af0:	59 e4       	ldi	r21, 0x49	; 73
    3af2:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    3af6:	0e 94 3c 43 	call	0x8678	; 0x8678 <lround>
    3afa:	60 93 7f 21 	sts	0x217F, r22
    3afe:	70 93 80 21 	sts	0x2180, r23
    3b02:	80 93 81 21 	sts	0x2181, r24
    3b06:	90 93 82 21 	sts	0x2182, r25
	}
	mc.line_state = MC_STATE_NEW;
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	80 93 5a 21 	sts	0x215A, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3b10:	eb e5       	ldi	r30, 0x5B	; 91
    3b12:	f1 e2       	ldi	r31, 0x21	; 33
    3b14:	df 01       	movw	r26, r30
    3b16:	1c 96       	adiw	r26, 0x0c	; 12
    3b18:	8c e0       	ldi	r24, 0x0C	; 12
    3b1a:	0d 90       	ld	r0, X+
    3b1c:	01 92       	st	Z+, r0
    3b1e:	81 50       	subi	r24, 0x01	; 1
    3b20:	e1 f7       	brne	.-8      	; 0x3b1a <mc_line+0x240>
	return (mc_line_continue());
    3b22:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <mc_line_continue>
}
    3b26:	64 96       	adiw	r28, 0x14	; 20
    3b28:	cd bf       	out	0x3d, r28	; 61
    3b2a:	de bf       	out	0x3e, r29	; 62
    3b2c:	cf 91       	pop	r28
    3b2e:	df 91       	pop	r29
    3b30:	1f 91       	pop	r17
    3b32:	0f 91       	pop	r16
    3b34:	ff 90       	pop	r15
    3b36:	ef 90       	pop	r14
    3b38:	df 90       	pop	r13
    3b3a:	cf 90       	pop	r12
    3b3c:	bf 90       	pop	r11
    3b3e:	af 90       	pop	r10
    3b40:	9f 90       	pop	r9
    3b42:	8f 90       	pop	r8
    3b44:	7f 90       	pop	r7
    3b46:	6f 90       	pop	r6
    3b48:	5f 90       	pop	r5
    3b4a:	4f 90       	pop	r4
    3b4c:	3f 90       	pop	r3
    3b4e:	2f 90       	pop	r2
    3b50:	08 95       	ret

00003b52 <mc_arc_continue>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continue() 
{
    3b52:	8f 92       	push	r8
    3b54:	9f 92       	push	r9
    3b56:	af 92       	push	r10
    3b58:	bf 92       	push	r11
    3b5a:	cf 92       	push	r12
    3b5c:	df 92       	push	r13
    3b5e:	ef 92       	push	r14
    3b60:	ff 92       	push	r15
    3b62:	0f 93       	push	r16
    3b64:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3b66:	80 91 ef 22 	lds	r24, 0x22EF
    3b6a:	88 23       	and	r24, r24
    3b6c:	19 f4       	brne	.+6      	; 0x3b74 <mc_arc_continue+0x22>
    3b6e:	22 e0       	ldi	r18, 0x02	; 2
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	dd c0       	rjmp	.+442    	; 0x3d2e <mc_arc_continue+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3b74:	81 30       	cpi	r24, 0x01	; 1
    3b76:	09 f0       	breq	.+2      	; 0x3b7a <mc_arc_continue+0x28>
    3b78:	ca c0       	rjmp	.+404    	; 0x3d0e <mc_arc_continue+0x1bc>
		ma.segment_counter=0;
    3b7a:	10 92 f2 22 	sts	0x22F2, r1
    3b7e:	10 92 f3 22 	sts	0x22F3, r1
		ma.arc_state = MC_STATE_RUNNING;
    3b82:	82 e0       	ldi	r24, 0x02	; 2
    3b84:	80 93 ef 22 	sts	0x22EF, r24
    3b88:	c2 c0       	rjmp	.+388    	; 0x3d0e <mc_arc_continue+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3b8a:	0e 94 ae 2c 	call	0x595c	; 0x595c <mv_test_move_buffer_full>
    3b8e:	88 23       	and	r24, r24
    3b90:	19 f0       	breq	.+6      	; 0x3b98 <mc_arc_continue+0x46>
    3b92:	21 e0       	ldi	r18, 0x01	; 1
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	cb c0       	rjmp	.+406    	; 0x3d2e <mc_arc_continue+0x1dc>
			return (TG_EAGAIN);
		}
		ma.segment_counter++;
    3b98:	80 91 f2 22 	lds	r24, 0x22F2
    3b9c:	90 91 f3 22 	lds	r25, 0x22F3
    3ba0:	01 96       	adiw	r24, 0x01	; 1
    3ba2:	80 93 f2 22 	sts	0x22F2, r24
    3ba6:	90 93 f3 22 	sts	0x22F3, r25
		ma.theta += ma.theta_per_segment;
    3baa:	60 91 14 23 	lds	r22, 0x2314
    3bae:	70 91 15 23 	lds	r23, 0x2315
    3bb2:	80 91 16 23 	lds	r24, 0x2316
    3bb6:	90 91 17 23 	lds	r25, 0x2317
    3bba:	20 91 20 23 	lds	r18, 0x2320
    3bbe:	30 91 21 23 	lds	r19, 0x2321
    3bc2:	40 91 22 23 	lds	r20, 0x2322
    3bc6:	50 91 23 23 	lds	r21, 0x2323
    3bca:	0e 94 0b 40 	call	0x8016	; 0x8016 <__addsf3>
    3bce:	7b 01       	movw	r14, r22
    3bd0:	8c 01       	movw	r16, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	d8 01       	movw	r26, r16
    3bd6:	80 93 14 23 	sts	0x2314, r24
    3bda:	90 93 15 23 	sts	0x2315, r25
    3bde:	a0 93 16 23 	sts	0x2316, r26
    3be2:	b0 93 17 23 	sts	0x2317, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3be6:	b7 01       	movw	r22, r14
    3be8:	c8 01       	movw	r24, r16
    3bea:	0e 94 cf 43 	call	0x879e	; 0x879e <sin>
    3bee:	80 90 18 23 	lds	r8, 0x2318
    3bf2:	90 90 19 23 	lds	r9, 0x2319
    3bf6:	a0 90 1a 23 	lds	r10, 0x231A
    3bfa:	b0 90 1b 23 	lds	r11, 0x231B
    3bfe:	c0 90 f6 22 	lds	r12, 0x22F6
    3c02:	d0 90 f7 22 	lds	r13, 0x22F7
    3c06:	cc 0c       	add	r12, r12
    3c08:	dd 1c       	adc	r13, r13
    3c0a:	cc 0c       	add	r12, r12
    3c0c:	dd 1c       	adc	r13, r13
    3c0e:	2f ee       	ldi	r18, 0xEF	; 239
    3c10:	32 e2       	ldi	r19, 0x22	; 34
    3c12:	c2 0e       	add	r12, r18
    3c14:	d3 1e       	adc	r13, r19
    3c16:	a5 01       	movw	r20, r10
    3c18:	94 01       	movw	r18, r8
    3c1a:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    3c1e:	9b 01       	movw	r18, r22
    3c20:	ac 01       	movw	r20, r24
    3c22:	60 91 0c 23 	lds	r22, 0x230C
    3c26:	70 91 0d 23 	lds	r23, 0x230D
    3c2a:	80 91 0e 23 	lds	r24, 0x230E
    3c2e:	90 91 0f 23 	lds	r25, 0x230F
    3c32:	0e 94 0b 40 	call	0x8016	; 0x8016 <__addsf3>
    3c36:	f6 01       	movw	r30, r12
    3c38:	65 87       	std	Z+13, r22	; 0x0d
    3c3a:	76 87       	std	Z+14, r23	; 0x0e
    3c3c:	87 87       	std	Z+15, r24	; 0x0f
    3c3e:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3c40:	b7 01       	movw	r22, r14
    3c42:	c8 01       	movw	r24, r16
    3c44:	0e 94 ae 40 	call	0x815c	; 0x815c <cos>
    3c48:	00 91 f8 22 	lds	r16, 0x22F8
    3c4c:	10 91 f9 22 	lds	r17, 0x22F9
    3c50:	00 0f       	add	r16, r16
    3c52:	11 1f       	adc	r17, r17
    3c54:	00 0f       	add	r16, r16
    3c56:	11 1f       	adc	r17, r17
    3c58:	01 51       	subi	r16, 0x11	; 17
    3c5a:	1d 4d       	sbci	r17, 0xDD	; 221
    3c5c:	a5 01       	movw	r20, r10
    3c5e:	94 01       	movw	r18, r8
    3c60:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    3c64:	9b 01       	movw	r18, r22
    3c66:	ac 01       	movw	r20, r24
    3c68:	60 91 10 23 	lds	r22, 0x2310
    3c6c:	70 91 11 23 	lds	r23, 0x2311
    3c70:	80 91 12 23 	lds	r24, 0x2312
    3c74:	90 91 13 23 	lds	r25, 0x2313
    3c78:	0e 94 0b 40 	call	0x8016	; 0x8016 <__addsf3>
    3c7c:	f8 01       	movw	r30, r16
    3c7e:	65 87       	std	Z+13, r22	; 0x0d
    3c80:	76 87       	std	Z+14, r23	; 0x0e
    3c82:	87 87       	std	Z+15, r24	; 0x0f
    3c84:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3c86:	00 91 fa 22 	lds	r16, 0x22FA
    3c8a:	10 91 fb 22 	lds	r17, 0x22FB
    3c8e:	00 0f       	add	r16, r16
    3c90:	11 1f       	adc	r17, r17
    3c92:	00 0f       	add	r16, r16
    3c94:	11 1f       	adc	r17, r17
    3c96:	01 51       	subi	r16, 0x11	; 17
    3c98:	1d 4d       	sbci	r17, 0xDD	; 221
    3c9a:	f8 01       	movw	r30, r16
    3c9c:	65 85       	ldd	r22, Z+13	; 0x0d
    3c9e:	76 85       	ldd	r23, Z+14	; 0x0e
    3ca0:	87 85       	ldd	r24, Z+15	; 0x0f
    3ca2:	90 89       	ldd	r25, Z+16	; 0x10
    3ca4:	20 91 24 23 	lds	r18, 0x2324
    3ca8:	30 91 25 23 	lds	r19, 0x2325
    3cac:	40 91 26 23 	lds	r20, 0x2326
    3cb0:	50 91 27 23 	lds	r21, 0x2327
    3cb4:	0e 94 0b 40 	call	0x8016	; 0x8016 <__addsf3>
    3cb8:	f8 01       	movw	r30, r16
    3cba:	65 87       	std	Z+13, r22	; 0x0d
    3cbc:	76 87       	std	Z+14, r23	; 0x0e
    3cbe:	87 87       	std	Z+15, r24	; 0x0f
    3cc0:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    3cc2:	60 91 fc 22 	lds	r22, 0x22FC
    3cc6:	70 91 fd 22 	lds	r23, 0x22FD
    3cca:	80 91 fe 22 	lds	r24, 0x22FE
    3cce:	90 91 ff 22 	lds	r25, 0x22FF
    3cd2:	20 91 00 23 	lds	r18, 0x2300
    3cd6:	30 91 01 23 	lds	r19, 0x2301
    3cda:	40 91 02 23 	lds	r20, 0x2302
    3cde:	50 91 03 23 	lds	r21, 0x2303
    3ce2:	e0 90 04 23 	lds	r14, 0x2304
    3ce6:	f0 90 05 23 	lds	r15, 0x2305
    3cea:	00 91 06 23 	lds	r16, 0x2306
    3cee:	10 91 07 23 	lds	r17, 0x2307
    3cf2:	a0 90 1c 23 	lds	r10, 0x231C
    3cf6:	b0 90 1d 23 	lds	r11, 0x231D
    3cfa:	c0 90 1e 23 	lds	r12, 0x231E
    3cfe:	d0 90 1f 23 	lds	r13, 0x231F
    3d02:	80 90 f4 22 	lds	r8, 0x22F4
    3d06:	90 90 f5 22 	lds	r9, 0x22F5
    3d0a:	0e 94 6d 1c 	call	0x38da	; 0x38da <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3d0e:	20 91 f2 22 	lds	r18, 0x22F2
    3d12:	30 91 f3 22 	lds	r19, 0x22F3
    3d16:	80 91 f0 22 	lds	r24, 0x22F0
    3d1a:	90 91 f1 22 	lds	r25, 0x22F1
    3d1e:	82 17       	cp	r24, r18
    3d20:	93 07       	cpc	r25, r19
    3d22:	0c f0       	brlt	.+2      	; 0x3d26 <mc_arc_continue+0x1d4>
    3d24:	32 cf       	rjmp	.-412    	; 0x3b8a <mc_arc_continue+0x38>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3d26:	10 92 ef 22 	sts	0x22EF, r1
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3d2e:	c9 01       	movw	r24, r18
    3d30:	1f 91       	pop	r17
    3d32:	0f 91       	pop	r16
    3d34:	ff 90       	pop	r15
    3d36:	ef 90       	pop	r14
    3d38:	df 90       	pop	r13
    3d3a:	cf 90       	pop	r12
    3d3c:	bf 90       	pop	r11
    3d3e:	af 90       	pop	r10
    3d40:	9f 90       	pop	r9
    3d42:	8f 90       	pop	r8
    3d44:	08 95       	ret

00003d46 <mc_arc>:
 */

int mc_arc(double theta, double angular_travel, double radius, 
		   double linear_travel, int axis_1, int axis_2, int axis_linear, 
		   double feed_rate, int invert_feed_rate)
{
    3d46:	2f 92       	push	r2
    3d48:	3f 92       	push	r3
    3d4a:	4f 92       	push	r4
    3d4c:	5f 92       	push	r5
    3d4e:	6f 92       	push	r6
    3d50:	7f 92       	push	r7
    3d52:	8f 92       	push	r8
    3d54:	9f 92       	push	r9
    3d56:	af 92       	push	r10
    3d58:	bf 92       	push	r11
    3d5a:	cf 92       	push	r12
    3d5c:	df 92       	push	r13
    3d5e:	ef 92       	push	r14
    3d60:	ff 92       	push	r15
    3d62:	0f 93       	push	r16
    3d64:	1f 93       	push	r17
    3d66:	df 93       	push	r29
    3d68:	cf 93       	push	r28
    3d6a:	cd b7       	in	r28, 0x3d	; 61
    3d6c:	de b7       	in	r29, 0x3e	; 62
    3d6e:	28 97       	sbiw	r28, 0x08	; 8
    3d70:	cd bf       	out	0x3d, r28	; 61
    3d72:	de bf       	out	0x3e, r29	; 62
    3d74:	69 83       	std	Y+1, r22	; 0x01
    3d76:	7a 83       	std	Y+2, r23	; 0x02
    3d78:	8b 83       	std	Y+3, r24	; 0x03
    3d7a:	9c 83       	std	Y+4, r25	; 0x04
    3d7c:	29 01       	movw	r4, r18
    3d7e:	3a 01       	movw	r6, r20
    3d80:	ed 82       	std	Y+5, r14	; 0x05
    3d82:	fe 82       	std	Y+6, r15	; 0x06
    3d84:	0f 83       	std	Y+7, r16	; 0x07
    3d86:	18 87       	std	Y+8, r17	; 0x08
    3d88:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3d8a:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3d8c:	60 93 14 23 	sts	0x2314, r22
    3d90:	70 93 15 23 	sts	0x2315, r23
    3d94:	80 93 16 23 	sts	0x2316, r24
    3d98:	90 93 17 23 	sts	0x2317, r25
	ma.radius = radius;
    3d9c:	e0 92 18 23 	sts	0x2318, r14
    3da0:	f0 92 19 23 	sts	0x2319, r15
    3da4:	00 93 1a 23 	sts	0x231A, r16
    3da8:	10 93 1b 23 	sts	0x231B, r17
	ma.angular_travel = angular_travel;
    3dac:	20 93 28 23 	sts	0x2328, r18
    3db0:	30 93 29 23 	sts	0x2329, r19
    3db4:	40 93 2a 23 	sts	0x232A, r20
    3db8:	50 93 2b 23 	sts	0x232B, r21
	ma.linear_travel = linear_travel;
    3dbc:	a0 92 2c 23 	sts	0x232C, r10
    3dc0:	b0 92 2d 23 	sts	0x232D, r11
    3dc4:	c0 92 2e 23 	sts	0x232E, r12
    3dc8:	d0 92 2f 23 	sts	0x232F, r13
	ma.feed_rate = feed_rate;
    3dcc:	8a a1       	ldd	r24, Y+34	; 0x22
    3dce:	9b a1       	ldd	r25, Y+35	; 0x23
    3dd0:	ac a1       	ldd	r26, Y+36	; 0x24
    3dd2:	bd a1       	ldd	r27, Y+37	; 0x25
    3dd4:	80 93 1c 23 	sts	0x231C, r24
    3dd8:	90 93 1d 23 	sts	0x231D, r25
    3ddc:	a0 93 1e 23 	sts	0x231E, r26
    3de0:	b0 93 1f 23 	sts	0x231F, r27
	ma.invert_feed_rate = invert_feed_rate;
    3de4:	ae a1       	ldd	r26, Y+38	; 0x26
    3de6:	bf a1       	ldd	r27, Y+39	; 0x27
    3de8:	a0 93 f4 22 	sts	0x22F4, r26
    3dec:	b0 93 f5 22 	sts	0x22F5, r27
	ma.axis_1 = axis_1;
    3df0:	80 92 f6 22 	sts	0x22F6, r8
    3df4:	90 92 f7 22 	sts	0x22F7, r9
	ma.axis_2 = axis_2;
    3df8:	20 92 f8 22 	sts	0x22F8, r2
    3dfc:	30 92 f9 22 	sts	0x22F9, r3
	ma.axis_linear = axis_linear;
    3e00:	e8 a1       	ldd	r30, Y+32	; 0x20
    3e02:	f9 a1       	ldd	r31, Y+33	; 0x21
    3e04:	e0 93 fa 22 	sts	0x22FA, r30
    3e08:	f0 93 fb 22 	sts	0x22FB, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3e0c:	ca 01       	movw	r24, r20
    3e0e:	b9 01       	movw	r22, r18
    3e10:	a8 01       	movw	r20, r16
    3e12:	97 01       	movw	r18, r14
    3e14:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    3e18:	7b 01       	movw	r14, r22
    3e1a:	8c 01       	movw	r16, r24
    3e1c:	c6 01       	movw	r24, r12
    3e1e:	b5 01       	movw	r22, r10
    3e20:	0e 94 19 41 	call	0x8232	; 0x8232 <__fixsfsi>
    3e24:	97 ff       	sbrs	r25, 7
    3e26:	07 c0       	rjmp	.+14     	; 0x3e36 <mc_arc+0xf0>
    3e28:	90 95       	com	r25
    3e2a:	80 95       	com	r24
    3e2c:	70 95       	com	r23
    3e2e:	61 95       	neg	r22
    3e30:	7f 4f       	sbci	r23, 0xFF	; 255
    3e32:	8f 4f       	sbci	r24, 0xFF	; 255
    3e34:	9f 4f       	sbci	r25, 0xFF	; 255
    3e36:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    3e3a:	9b 01       	movw	r18, r22
    3e3c:	ac 01       	movw	r20, r24
    3e3e:	c8 01       	movw	r24, r16
    3e40:	b7 01       	movw	r22, r14
    3e42:	0e 94 a7 42 	call	0x854e	; 0x854e <hypot>
    3e46:	7b 01       	movw	r14, r22
    3e48:	8c 01       	movw	r16, r24
    3e4a:	60 93 08 23 	sts	0x2308, r22
    3e4e:	70 93 09 23 	sts	0x2309, r23
    3e52:	80 93 0a 23 	sts	0x230A, r24
    3e56:	90 93 0b 23 	sts	0x230B, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3e5a:	2a e0       	ldi	r18, 0x0A	; 10
    3e5c:	37 ed       	ldi	r19, 0xD7	; 215
    3e5e:	43 e2       	ldi	r20, 0x23	; 35
    3e60:	5c e3       	ldi	r21, 0x3C	; 60
    3e62:	0e 94 aa 40 	call	0x8154	; 0x8154 <__cmpsf2>
    3e66:	88 23       	and	r24, r24
    3e68:	1c f4       	brge	.+6      	; 0x3e70 <mc_arc+0x12a>
    3e6a:	20 e1       	ldi	r18, 0x10	; 16
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	fb c0       	rjmp	.+502    	; 0x4066 <mc_arc+0x320>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3e70:	c8 01       	movw	r24, r16
    3e72:	b7 01       	movw	r22, r14
    3e74:	20 91 83 22 	lds	r18, 0x2283
    3e78:	30 91 84 22 	lds	r19, 0x2284
    3e7c:	40 91 85 22 	lds	r20, 0x2285
    3e80:	50 91 86 22 	lds	r21, 0x2286
    3e84:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    3e88:	0e 94 97 40 	call	0x812e	; 0x812e <ceil>
    3e8c:	0e 94 19 41 	call	0x8232	; 0x8232 <__fixsfsi>
    3e90:	8b 01       	movw	r16, r22
    3e92:	60 93 f0 22 	sts	0x22F0, r22
    3e96:	70 93 f1 22 	sts	0x22F1, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    3e9a:	8e a1       	ldd	r24, Y+38	; 0x26
    3e9c:	9f a1       	ldd	r25, Y+39	; 0x27
    3e9e:	89 2b       	or	r24, r25
    3ea0:	b9 f0       	breq	.+46     	; 0x3ed0 <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    3ea2:	b8 01       	movw	r22, r16
    3ea4:	88 27       	eor	r24, r24
    3ea6:	77 fd       	sbrc	r23, 7
    3ea8:	80 95       	com	r24
    3eaa:	98 2f       	mov	r25, r24
    3eac:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    3eb0:	9b 01       	movw	r18, r22
    3eb2:	ac 01       	movw	r20, r24
    3eb4:	6a a1       	ldd	r22, Y+34	; 0x22
    3eb6:	7b a1       	ldd	r23, Y+35	; 0x23
    3eb8:	8c a1       	ldd	r24, Y+36	; 0x24
    3eba:	9d a1       	ldd	r25, Y+37	; 0x25
    3ebc:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    3ec0:	60 93 1c 23 	sts	0x231C, r22
    3ec4:	70 93 1d 23 	sts	0x231D, r23
    3ec8:	80 93 1e 23 	sts	0x231E, r24
    3ecc:	90 93 1f 23 	sts	0x231F, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    3ed0:	b8 01       	movw	r22, r16
    3ed2:	88 27       	eor	r24, r24
    3ed4:	77 fd       	sbrc	r23, 7
    3ed6:	80 95       	com	r24
    3ed8:	98 2f       	mov	r25, r24
    3eda:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    3ede:	7b 01       	movw	r14, r22
    3ee0:	8c 01       	movw	r16, r24
    3ee2:	c3 01       	movw	r24, r6
    3ee4:	b2 01       	movw	r22, r4
    3ee6:	a8 01       	movw	r20, r16
    3ee8:	97 01       	movw	r18, r14
    3eea:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    3eee:	60 93 20 23 	sts	0x2320, r22
    3ef2:	70 93 21 23 	sts	0x2321, r23
    3ef6:	80 93 22 23 	sts	0x2322, r24
    3efa:	90 93 23 23 	sts	0x2323, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    3efe:	c6 01       	movw	r24, r12
    3f00:	b5 01       	movw	r22, r10
    3f02:	a8 01       	movw	r20, r16
    3f04:	97 01       	movw	r18, r14
    3f06:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    3f0a:	60 93 24 23 	sts	0x2324, r22
    3f0e:	70 93 25 23 	sts	0x2325, r23
    3f12:	80 93 26 23 	sts	0x2326, r24
    3f16:	90 93 27 23 	sts	0x2327, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    3f1a:	69 81       	ldd	r22, Y+1	; 0x01
    3f1c:	7a 81       	ldd	r23, Y+2	; 0x02
    3f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f20:	9c 81       	ldd	r25, Y+4	; 0x04
    3f22:	0e 94 cf 43 	call	0x879e	; 0x879e <sin>
    3f26:	5b 01       	movw	r10, r22
    3f28:	6c 01       	movw	r12, r24
    3f2a:	f4 01       	movw	r30, r8
    3f2c:	ee 0f       	add	r30, r30
    3f2e:	ff 1f       	adc	r31, r31
    3f30:	ee 0f       	add	r30, r30
    3f32:	ff 1f       	adc	r31, r31
    3f34:	e6 5a       	subi	r30, 0xA6	; 166
    3f36:	fe 4d       	sbci	r31, 0xDE	; 222
    3f38:	61 81       	ldd	r22, Z+1	; 0x01
    3f3a:	72 81       	ldd	r23, Z+2	; 0x02
    3f3c:	83 81       	ldd	r24, Z+3	; 0x03
    3f3e:	94 81       	ldd	r25, Z+4	; 0x04
    3f40:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    3f44:	f4 01       	movw	r30, r8
    3f46:	ee 0f       	add	r30, r30
    3f48:	ff 1f       	adc	r31, r31
    3f4a:	e8 0d       	add	r30, r8
    3f4c:	f9 1d       	adc	r31, r9
    3f4e:	13 e0       	ldi	r17, 0x03	; 3
    3f50:	ee 0f       	add	r30, r30
    3f52:	ff 1f       	adc	r31, r31
    3f54:	1a 95       	dec	r17
    3f56:	e1 f7       	brne	.-8      	; 0x3f50 <mc_arc+0x20a>
    3f58:	ef 57       	subi	r30, 0x7F	; 127
    3f5a:	fd 4d       	sbci	r31, 0xDD	; 221
    3f5c:	21 a1       	ldd	r18, Z+33	; 0x21
    3f5e:	32 a1       	ldd	r19, Z+34	; 0x22
    3f60:	43 a1       	ldd	r20, Z+35	; 0x23
    3f62:	54 a1       	ldd	r21, Z+36	; 0x24
    3f64:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    3f68:	7b 01       	movw	r14, r22
    3f6a:	8c 01       	movw	r16, r24
    3f6c:	c6 01       	movw	r24, r12
    3f6e:	b5 01       	movw	r22, r10
    3f70:	2d 81       	ldd	r18, Y+5	; 0x05
    3f72:	3e 81       	ldd	r19, Y+6	; 0x06
    3f74:	4f 81       	ldd	r20, Y+7	; 0x07
    3f76:	58 85       	ldd	r21, Y+8	; 0x08
    3f78:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    3f7c:	9b 01       	movw	r18, r22
    3f7e:	ac 01       	movw	r20, r24
    3f80:	c8 01       	movw	r24, r16
    3f82:	b7 01       	movw	r22, r14
    3f84:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    3f88:	60 93 0c 23 	sts	0x230C, r22
    3f8c:	70 93 0d 23 	sts	0x230D, r23
    3f90:	80 93 0e 23 	sts	0x230E, r24
    3f94:	90 93 0f 23 	sts	0x230F, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    3f98:	69 81       	ldd	r22, Y+1	; 0x01
    3f9a:	7a 81       	ldd	r23, Y+2	; 0x02
    3f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa0:	0e 94 ae 40 	call	0x815c	; 0x815c <cos>
    3fa4:	5b 01       	movw	r10, r22
    3fa6:	6c 01       	movw	r12, r24
    3fa8:	f1 01       	movw	r30, r2
    3faa:	ee 0f       	add	r30, r30
    3fac:	ff 1f       	adc	r31, r31
    3fae:	ee 0f       	add	r30, r30
    3fb0:	ff 1f       	adc	r31, r31
    3fb2:	e6 5a       	subi	r30, 0xA6	; 166
    3fb4:	fe 4d       	sbci	r31, 0xDE	; 222
    3fb6:	61 81       	ldd	r22, Z+1	; 0x01
    3fb8:	72 81       	ldd	r23, Z+2	; 0x02
    3fba:	83 81       	ldd	r24, Z+3	; 0x03
    3fbc:	94 81       	ldd	r25, Z+4	; 0x04
    3fbe:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    3fc2:	f1 01       	movw	r30, r2
    3fc4:	ee 0f       	add	r30, r30
    3fc6:	ff 1f       	adc	r31, r31
    3fc8:	e2 0d       	add	r30, r2
    3fca:	f3 1d       	adc	r31, r3
    3fcc:	53 e0       	ldi	r21, 0x03	; 3
    3fce:	ee 0f       	add	r30, r30
    3fd0:	ff 1f       	adc	r31, r31
    3fd2:	5a 95       	dec	r21
    3fd4:	e1 f7       	brne	.-8      	; 0x3fce <mc_arc+0x288>
    3fd6:	ef 57       	subi	r30, 0x7F	; 127
    3fd8:	fd 4d       	sbci	r31, 0xDD	; 221
    3fda:	21 a1       	ldd	r18, Z+33	; 0x21
    3fdc:	32 a1       	ldd	r19, Z+34	; 0x22
    3fde:	43 a1       	ldd	r20, Z+35	; 0x23
    3fe0:	54 a1       	ldd	r21, Z+36	; 0x24
    3fe2:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    3fe6:	7b 01       	movw	r14, r22
    3fe8:	8c 01       	movw	r16, r24
    3fea:	c6 01       	movw	r24, r12
    3fec:	b5 01       	movw	r22, r10
    3fee:	2d 81       	ldd	r18, Y+5	; 0x05
    3ff0:	3e 81       	ldd	r19, Y+6	; 0x06
    3ff2:	4f 81       	ldd	r20, Y+7	; 0x07
    3ff4:	58 85       	ldd	r21, Y+8	; 0x08
    3ff6:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    3ffa:	9b 01       	movw	r18, r22
    3ffc:	ac 01       	movw	r20, r24
    3ffe:	c8 01       	movw	r24, r16
    4000:	b7 01       	movw	r22, r14
    4002:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    4006:	60 93 10 23 	sts	0x2310, r22
    400a:	70 93 11 23 	sts	0x2311, r23
    400e:	80 93 12 23 	sts	0x2312, r24
    4012:	90 93 13 23 	sts	0x2313, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    4016:	e8 a1       	ldd	r30, Y+32	; 0x20
    4018:	f9 a1       	ldd	r31, Y+33	; 0x21
    401a:	ee 0f       	add	r30, r30
    401c:	ff 1f       	adc	r31, r31
    401e:	ee 0f       	add	r30, r30
    4020:	ff 1f       	adc	r31, r31
    4022:	8f 01       	movw	r16, r30
    4024:	01 51       	subi	r16, 0x11	; 17
    4026:	1d 4d       	sbci	r17, 0xDD	; 221
    4028:	e6 5a       	subi	r30, 0xA6	; 166
    402a:	fe 4d       	sbci	r31, 0xDE	; 222
    402c:	61 81       	ldd	r22, Z+1	; 0x01
    402e:	72 81       	ldd	r23, Z+2	; 0x02
    4030:	83 81       	ldd	r24, Z+3	; 0x03
    4032:	94 81       	ldd	r25, Z+4	; 0x04
    4034:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    4038:	20 91 d2 22 	lds	r18, 0x22D2
    403c:	30 91 d3 22 	lds	r19, 0x22D3
    4040:	40 91 d4 22 	lds	r20, 0x22D4
    4044:	50 91 d5 22 	lds	r21, 0x22D5
    4048:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    404c:	d8 01       	movw	r26, r16
    404e:	1d 96       	adiw	r26, 0x0d	; 13
    4050:	6d 93       	st	X+, r22
    4052:	7d 93       	st	X+, r23
    4054:	8d 93       	st	X+, r24
    4056:	9c 93       	st	X, r25
    4058:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    405a:	81 e0       	ldi	r24, 0x01	; 1
    405c:	80 93 ef 22 	sts	0x22EF, r24
	return (mc_arc_continue());
    4060:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <mc_arc_continue>
    4064:	9c 01       	movw	r18, r24
}
    4066:	c9 01       	movw	r24, r18
    4068:	28 96       	adiw	r28, 0x08	; 8
    406a:	cd bf       	out	0x3d, r28	; 61
    406c:	de bf       	out	0x3e, r29	; 62
    406e:	cf 91       	pop	r28
    4070:	df 91       	pop	r29
    4072:	1f 91       	pop	r17
    4074:	0f 91       	pop	r16
    4076:	ff 90       	pop	r15
    4078:	ef 90       	pop	r14
    407a:	df 90       	pop	r13
    407c:	cf 90       	pop	r12
    407e:	bf 90       	pop	r11
    4080:	af 90       	pop	r10
    4082:	9f 90       	pop	r9
    4084:	8f 90       	pop	r8
    4086:	7f 90       	pop	r7
    4088:	6f 90       	pop	r6
    408a:	5f 90       	pop	r5
    408c:	4f 90       	pop	r4
    408e:	3f 90       	pop	r3
    4090:	2f 90       	pop	r2
    4092:	08 95       	ret

00004094 <mc_arc_blocking>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc_blocking(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    4094:	2f 92       	push	r2
    4096:	3f 92       	push	r3
    4098:	4f 92       	push	r4
    409a:	5f 92       	push	r5
    409c:	6f 92       	push	r6
    409e:	7f 92       	push	r7
    40a0:	8f 92       	push	r8
    40a2:	9f 92       	push	r9
    40a4:	af 92       	push	r10
    40a6:	bf 92       	push	r11
    40a8:	cf 92       	push	r12
    40aa:	df 92       	push	r13
    40ac:	ef 92       	push	r14
    40ae:	ff 92       	push	r15
    40b0:	0f 93       	push	r16
    40b2:	1f 93       	push	r17
    40b4:	df 93       	push	r29
    40b6:	cf 93       	push	r28
    40b8:	cd b7       	in	r28, 0x3d	; 61
    40ba:	de b7       	in	r29, 0x3e	; 62
    40bc:	28 97       	sbiw	r28, 0x08	; 8
    40be:	cd bf       	out	0x3d, r28	; 61
    40c0:	de bf       	out	0x3e, r29	; 62
    40c2:	69 83       	std	Y+1, r22	; 0x01
    40c4:	7a 83       	std	Y+2, r23	; 0x02
    40c6:	8b 83       	std	Y+3, r24	; 0x03
    40c8:	9c 83       	std	Y+4, r25	; 0x04
    40ca:	29 01       	movw	r4, r18
    40cc:	3a 01       	movw	r6, r20
    40ce:	ed 82       	std	Y+5, r14	; 0x05
    40d0:	fe 82       	std	Y+6, r15	; 0x06
    40d2:	0f 83       	std	Y+7, r16	; 0x07
    40d4:	18 87       	std	Y+8, r17	; 0x08
    40d6:	2e 8c       	ldd	r2, Y+30	; 0x1e
    40d8:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    40da:	60 93 14 23 	sts	0x2314, r22
    40de:	70 93 15 23 	sts	0x2315, r23
    40e2:	80 93 16 23 	sts	0x2316, r24
    40e6:	90 93 17 23 	sts	0x2317, r25
	ma.radius = radius;
    40ea:	e0 92 18 23 	sts	0x2318, r14
    40ee:	f0 92 19 23 	sts	0x2319, r15
    40f2:	00 93 1a 23 	sts	0x231A, r16
    40f6:	10 93 1b 23 	sts	0x231B, r17
	ma.angular_travel = angular_travel;
    40fa:	20 93 28 23 	sts	0x2328, r18
    40fe:	30 93 29 23 	sts	0x2329, r19
    4102:	40 93 2a 23 	sts	0x232A, r20
    4106:	50 93 2b 23 	sts	0x232B, r21
	ma.linear_travel = linear_travel;
    410a:	a0 92 2c 23 	sts	0x232C, r10
    410e:	b0 92 2d 23 	sts	0x232D, r11
    4112:	c0 92 2e 23 	sts	0x232E, r12
    4116:	d0 92 2f 23 	sts	0x232F, r13
	ma.feed_rate = feed_rate;
    411a:	8a a1       	ldd	r24, Y+34	; 0x22
    411c:	9b a1       	ldd	r25, Y+35	; 0x23
    411e:	ac a1       	ldd	r26, Y+36	; 0x24
    4120:	bd a1       	ldd	r27, Y+37	; 0x25
    4122:	80 93 1c 23 	sts	0x231C, r24
    4126:	90 93 1d 23 	sts	0x231D, r25
    412a:	a0 93 1e 23 	sts	0x231E, r26
    412e:	b0 93 1f 23 	sts	0x231F, r27
	ma.invert_feed_rate = invert_feed_rate;
    4132:	ae a1       	ldd	r26, Y+38	; 0x26
    4134:	bf a1       	ldd	r27, Y+39	; 0x27
    4136:	a0 93 f4 22 	sts	0x22F4, r26
    413a:	b0 93 f5 22 	sts	0x22F5, r27
	ma.axis_1 = axis_1;
    413e:	80 92 f6 22 	sts	0x22F6, r8
    4142:	90 92 f7 22 	sts	0x22F7, r9
	ma.axis_2 = axis_2;
    4146:	20 92 f8 22 	sts	0x22F8, r2
    414a:	30 92 f9 22 	sts	0x22F9, r3
	ma.axis_linear = axis_linear;
    414e:	e8 a1       	ldd	r30, Y+32	; 0x20
    4150:	f9 a1       	ldd	r31, Y+33	; 0x21
    4152:	e0 93 fa 22 	sts	0x22FA, r30
    4156:	f0 93 fb 22 	sts	0x22FB, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    415a:	ca 01       	movw	r24, r20
    415c:	b9 01       	movw	r22, r18
    415e:	a8 01       	movw	r20, r16
    4160:	97 01       	movw	r18, r14
    4162:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    4166:	7b 01       	movw	r14, r22
    4168:	8c 01       	movw	r16, r24
    416a:	c6 01       	movw	r24, r12
    416c:	b5 01       	movw	r22, r10
    416e:	0e 94 19 41 	call	0x8232	; 0x8232 <__fixsfsi>
    4172:	97 ff       	sbrs	r25, 7
    4174:	07 c0       	rjmp	.+14     	; 0x4184 <mc_arc_blocking+0xf0>
    4176:	90 95       	com	r25
    4178:	80 95       	com	r24
    417a:	70 95       	com	r23
    417c:	61 95       	neg	r22
    417e:	7f 4f       	sbci	r23, 0xFF	; 255
    4180:	8f 4f       	sbci	r24, 0xFF	; 255
    4182:	9f 4f       	sbci	r25, 0xFF	; 255
    4184:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    4188:	9b 01       	movw	r18, r22
    418a:	ac 01       	movw	r20, r24
    418c:	c8 01       	movw	r24, r16
    418e:	b7 01       	movw	r22, r14
    4190:	0e 94 a7 42 	call	0x854e	; 0x854e <hypot>
    4194:	7b 01       	movw	r14, r22
    4196:	8c 01       	movw	r16, r24
    4198:	60 93 08 23 	sts	0x2308, r22
    419c:	70 93 09 23 	sts	0x2309, r23
    41a0:	80 93 0a 23 	sts	0x230A, r24
    41a4:	90 93 0b 23 	sts	0x230B, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    41a8:	2a e0       	ldi	r18, 0x0A	; 10
    41aa:	37 ed       	ldi	r19, 0xD7	; 215
    41ac:	43 e2       	ldi	r20, 0x23	; 35
    41ae:	5c e3       	ldi	r21, 0x3C	; 60
    41b0:	0e 94 aa 40 	call	0x8154	; 0x8154 <__cmpsf2>
    41b4:	88 23       	and	r24, r24
    41b6:	1c f4       	brge	.+6      	; 0x41be <mc_arc_blocking+0x12a>
    41b8:	20 e1       	ldi	r18, 0x10	; 16
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	c7 c1       	rjmp	.+910    	; 0x454c <mc_arc_blocking+0x4b8>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    41be:	c8 01       	movw	r24, r16
    41c0:	b7 01       	movw	r22, r14
    41c2:	20 91 83 22 	lds	r18, 0x2283
    41c6:	30 91 84 22 	lds	r19, 0x2284
    41ca:	40 91 85 22 	lds	r20, 0x2285
    41ce:	50 91 86 22 	lds	r21, 0x2286
    41d2:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    41d6:	0e 94 97 40 	call	0x812e	; 0x812e <ceil>
    41da:	0e 94 19 41 	call	0x8232	; 0x8232 <__fixsfsi>
    41de:	8b 01       	movw	r16, r22
    41e0:	60 93 f0 22 	sts	0x22F0, r22
    41e4:	70 93 f1 22 	sts	0x22F1, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    41e8:	2e a1       	ldd	r18, Y+38	; 0x26
    41ea:	3f a1       	ldd	r19, Y+39	; 0x27
    41ec:	23 2b       	or	r18, r19
    41ee:	b9 f0       	breq	.+46     	; 0x421e <mc_arc_blocking+0x18a>
		ma.feed_rate *= ma.segments; 
    41f0:	b8 01       	movw	r22, r16
    41f2:	88 27       	eor	r24, r24
    41f4:	77 fd       	sbrc	r23, 7
    41f6:	80 95       	com	r24
    41f8:	98 2f       	mov	r25, r24
    41fa:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    41fe:	9b 01       	movw	r18, r22
    4200:	ac 01       	movw	r20, r24
    4202:	6a a1       	ldd	r22, Y+34	; 0x22
    4204:	7b a1       	ldd	r23, Y+35	; 0x23
    4206:	8c a1       	ldd	r24, Y+36	; 0x24
    4208:	9d a1       	ldd	r25, Y+37	; 0x25
    420a:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    420e:	60 93 1c 23 	sts	0x231C, r22
    4212:	70 93 1d 23 	sts	0x231D, r23
    4216:	80 93 1e 23 	sts	0x231E, r24
    421a:	90 93 1f 23 	sts	0x231F, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    421e:	b8 01       	movw	r22, r16
    4220:	88 27       	eor	r24, r24
    4222:	77 fd       	sbrc	r23, 7
    4224:	80 95       	com	r24
    4226:	98 2f       	mov	r25, r24
    4228:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    422c:	7b 01       	movw	r14, r22
    422e:	8c 01       	movw	r16, r24
    4230:	c3 01       	movw	r24, r6
    4232:	b2 01       	movw	r22, r4
    4234:	a8 01       	movw	r20, r16
    4236:	97 01       	movw	r18, r14
    4238:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    423c:	60 93 20 23 	sts	0x2320, r22
    4240:	70 93 21 23 	sts	0x2321, r23
    4244:	80 93 22 23 	sts	0x2322, r24
    4248:	90 93 23 23 	sts	0x2323, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    424c:	c6 01       	movw	r24, r12
    424e:	b5 01       	movw	r22, r10
    4250:	a8 01       	movw	r20, r16
    4252:	97 01       	movw	r18, r14
    4254:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    4258:	60 93 24 23 	sts	0x2324, r22
    425c:	70 93 25 23 	sts	0x2325, r23
    4260:	80 93 26 23 	sts	0x2326, r24
    4264:	90 93 27 23 	sts	0x2327, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    4268:	69 81       	ldd	r22, Y+1	; 0x01
    426a:	7a 81       	ldd	r23, Y+2	; 0x02
    426c:	8b 81       	ldd	r24, Y+3	; 0x03
    426e:	9c 81       	ldd	r25, Y+4	; 0x04
    4270:	0e 94 cf 43 	call	0x879e	; 0x879e <sin>
    4274:	5b 01       	movw	r10, r22
    4276:	6c 01       	movw	r12, r24
    4278:	f4 01       	movw	r30, r8
    427a:	ee 0f       	add	r30, r30
    427c:	ff 1f       	adc	r31, r31
    427e:	ee 0f       	add	r30, r30
    4280:	ff 1f       	adc	r31, r31
    4282:	e6 5a       	subi	r30, 0xA6	; 166
    4284:	fe 4d       	sbci	r31, 0xDE	; 222
    4286:	61 81       	ldd	r22, Z+1	; 0x01
    4288:	72 81       	ldd	r23, Z+2	; 0x02
    428a:	83 81       	ldd	r24, Z+3	; 0x03
    428c:	94 81       	ldd	r25, Z+4	; 0x04
    428e:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    4292:	f4 01       	movw	r30, r8
    4294:	ee 0f       	add	r30, r30
    4296:	ff 1f       	adc	r31, r31
    4298:	e8 0d       	add	r30, r8
    429a:	f9 1d       	adc	r31, r9
    429c:	13 e0       	ldi	r17, 0x03	; 3
    429e:	ee 0f       	add	r30, r30
    42a0:	ff 1f       	adc	r31, r31
    42a2:	1a 95       	dec	r17
    42a4:	e1 f7       	brne	.-8      	; 0x429e <mc_arc_blocking+0x20a>
    42a6:	ef 57       	subi	r30, 0x7F	; 127
    42a8:	fd 4d       	sbci	r31, 0xDD	; 221
    42aa:	21 a1       	ldd	r18, Z+33	; 0x21
    42ac:	32 a1       	ldd	r19, Z+34	; 0x22
    42ae:	43 a1       	ldd	r20, Z+35	; 0x23
    42b0:	54 a1       	ldd	r21, Z+36	; 0x24
    42b2:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    42b6:	7b 01       	movw	r14, r22
    42b8:	8c 01       	movw	r16, r24
    42ba:	c6 01       	movw	r24, r12
    42bc:	b5 01       	movw	r22, r10
    42be:	2d 81       	ldd	r18, Y+5	; 0x05
    42c0:	3e 81       	ldd	r19, Y+6	; 0x06
    42c2:	4f 81       	ldd	r20, Y+7	; 0x07
    42c4:	58 85       	ldd	r21, Y+8	; 0x08
    42c6:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    42ca:	9b 01       	movw	r18, r22
    42cc:	ac 01       	movw	r20, r24
    42ce:	c8 01       	movw	r24, r16
    42d0:	b7 01       	movw	r22, r14
    42d2:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    42d6:	60 93 0c 23 	sts	0x230C, r22
    42da:	70 93 0d 23 	sts	0x230D, r23
    42de:	80 93 0e 23 	sts	0x230E, r24
    42e2:	90 93 0f 23 	sts	0x230F, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    42e6:	69 81       	ldd	r22, Y+1	; 0x01
    42e8:	7a 81       	ldd	r23, Y+2	; 0x02
    42ea:	8b 81       	ldd	r24, Y+3	; 0x03
    42ec:	9c 81       	ldd	r25, Y+4	; 0x04
    42ee:	0e 94 ae 40 	call	0x815c	; 0x815c <cos>
    42f2:	5b 01       	movw	r10, r22
    42f4:	6c 01       	movw	r12, r24
    42f6:	f1 01       	movw	r30, r2
    42f8:	ee 0f       	add	r30, r30
    42fa:	ff 1f       	adc	r31, r31
    42fc:	ee 0f       	add	r30, r30
    42fe:	ff 1f       	adc	r31, r31
    4300:	e6 5a       	subi	r30, 0xA6	; 166
    4302:	fe 4d       	sbci	r31, 0xDE	; 222
    4304:	61 81       	ldd	r22, Z+1	; 0x01
    4306:	72 81       	ldd	r23, Z+2	; 0x02
    4308:	83 81       	ldd	r24, Z+3	; 0x03
    430a:	94 81       	ldd	r25, Z+4	; 0x04
    430c:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    4310:	f1 01       	movw	r30, r2
    4312:	ee 0f       	add	r30, r30
    4314:	ff 1f       	adc	r31, r31
    4316:	e2 0d       	add	r30, r2
    4318:	f3 1d       	adc	r31, r3
    431a:	53 e0       	ldi	r21, 0x03	; 3
    431c:	ee 0f       	add	r30, r30
    431e:	ff 1f       	adc	r31, r31
    4320:	5a 95       	dec	r21
    4322:	e1 f7       	brne	.-8      	; 0x431c <mc_arc_blocking+0x288>
    4324:	ef 57       	subi	r30, 0x7F	; 127
    4326:	fd 4d       	sbci	r31, 0xDD	; 221
    4328:	21 a1       	ldd	r18, Z+33	; 0x21
    432a:	32 a1       	ldd	r19, Z+34	; 0x22
    432c:	43 a1       	ldd	r20, Z+35	; 0x23
    432e:	54 a1       	ldd	r21, Z+36	; 0x24
    4330:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    4334:	7b 01       	movw	r14, r22
    4336:	8c 01       	movw	r16, r24
    4338:	c6 01       	movw	r24, r12
    433a:	b5 01       	movw	r22, r10
    433c:	2d 81       	ldd	r18, Y+5	; 0x05
    433e:	3e 81       	ldd	r19, Y+6	; 0x06
    4340:	4f 81       	ldd	r20, Y+7	; 0x07
    4342:	58 85       	ldd	r21, Y+8	; 0x08
    4344:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    4348:	9b 01       	movw	r18, r22
    434a:	ac 01       	movw	r20, r24
    434c:	c8 01       	movw	r24, r16
    434e:	b7 01       	movw	r22, r14
    4350:	0e 94 0a 40 	call	0x8014	; 0x8014 <__subsf3>
    4354:	60 93 10 23 	sts	0x2310, r22
    4358:	70 93 11 23 	sts	0x2311, r23
    435c:	80 93 12 23 	sts	0x2312, r24
    4360:	90 93 13 23 	sts	0x2313, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    4364:	e8 a1       	ldd	r30, Y+32	; 0x20
    4366:	f9 a1       	ldd	r31, Y+33	; 0x21
    4368:	ee 0f       	add	r30, r30
    436a:	ff 1f       	adc	r31, r31
    436c:	ee 0f       	add	r30, r30
    436e:	ff 1f       	adc	r31, r31
    4370:	8f 01       	movw	r16, r30
    4372:	01 51       	subi	r16, 0x11	; 17
    4374:	1d 4d       	sbci	r17, 0xDD	; 221
    4376:	e6 5a       	subi	r30, 0xA6	; 166
    4378:	fe 4d       	sbci	r31, 0xDE	; 222
    437a:	61 81       	ldd	r22, Z+1	; 0x01
    437c:	72 81       	ldd	r23, Z+2	; 0x02
    437e:	83 81       	ldd	r24, Z+3	; 0x03
    4380:	94 81       	ldd	r25, Z+4	; 0x04
    4382:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    4386:	20 91 d2 22 	lds	r18, 0x22D2
    438a:	30 91 d3 22 	lds	r19, 0x22D3
    438e:	40 91 d4 22 	lds	r20, 0x22D4
    4392:	50 91 d5 22 	lds	r21, 0x22D5
    4396:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    439a:	d8 01       	movw	r26, r16
    439c:	1d 96       	adiw	r26, 0x0d	; 13
    439e:	6d 93       	st	X+, r22
    43a0:	7d 93       	st	X+, r23
    43a2:	8d 93       	st	X+, r24
    43a4:	9c 93       	st	X, r25
    43a6:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    43a8:	10 92 f2 22 	sts	0x22F2, r1
    43ac:	10 92 f3 22 	sts	0x22F3, r1
    43b0:	bf c0       	rjmp	.+382    	; 0x4530 <mc_arc_blocking+0x49c>
		ma.theta += ma.theta_per_segment;
    43b2:	60 91 14 23 	lds	r22, 0x2314
    43b6:	70 91 15 23 	lds	r23, 0x2315
    43ba:	80 91 16 23 	lds	r24, 0x2316
    43be:	90 91 17 23 	lds	r25, 0x2317
    43c2:	20 91 20 23 	lds	r18, 0x2320
    43c6:	30 91 21 23 	lds	r19, 0x2321
    43ca:	40 91 22 23 	lds	r20, 0x2322
    43ce:	50 91 23 23 	lds	r21, 0x2323
    43d2:	0e 94 0b 40 	call	0x8016	; 0x8016 <__addsf3>
    43d6:	7b 01       	movw	r14, r22
    43d8:	8c 01       	movw	r16, r24
    43da:	cb 01       	movw	r24, r22
    43dc:	d8 01       	movw	r26, r16
    43de:	80 93 14 23 	sts	0x2314, r24
    43e2:	90 93 15 23 	sts	0x2315, r25
    43e6:	a0 93 16 23 	sts	0x2316, r26
    43ea:	b0 93 17 23 	sts	0x2317, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    43ee:	b7 01       	movw	r22, r14
    43f0:	c8 01       	movw	r24, r16
    43f2:	0e 94 cf 43 	call	0x879e	; 0x879e <sin>
    43f6:	80 90 18 23 	lds	r8, 0x2318
    43fa:	90 90 19 23 	lds	r9, 0x2319
    43fe:	a0 90 1a 23 	lds	r10, 0x231A
    4402:	b0 90 1b 23 	lds	r11, 0x231B
    4406:	c0 90 f6 22 	lds	r12, 0x22F6
    440a:	d0 90 f7 22 	lds	r13, 0x22F7
    440e:	cc 0c       	add	r12, r12
    4410:	dd 1c       	adc	r13, r13
    4412:	cc 0c       	add	r12, r12
    4414:	dd 1c       	adc	r13, r13
    4416:	ef ee       	ldi	r30, 0xEF	; 239
    4418:	f2 e2       	ldi	r31, 0x22	; 34
    441a:	ce 0e       	add	r12, r30
    441c:	df 1e       	adc	r13, r31
    441e:	a5 01       	movw	r20, r10
    4420:	94 01       	movw	r18, r8
    4422:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    4426:	9b 01       	movw	r18, r22
    4428:	ac 01       	movw	r20, r24
    442a:	60 91 0c 23 	lds	r22, 0x230C
    442e:	70 91 0d 23 	lds	r23, 0x230D
    4432:	80 91 0e 23 	lds	r24, 0x230E
    4436:	90 91 0f 23 	lds	r25, 0x230F
    443a:	0e 94 0b 40 	call	0x8016	; 0x8016 <__addsf3>
    443e:	d6 01       	movw	r26, r12
    4440:	1d 96       	adiw	r26, 0x0d	; 13
    4442:	6d 93       	st	X+, r22
    4444:	7d 93       	st	X+, r23
    4446:	8d 93       	st	X+, r24
    4448:	9c 93       	st	X, r25
    444a:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    444c:	b7 01       	movw	r22, r14
    444e:	c8 01       	movw	r24, r16
    4450:	0e 94 ae 40 	call	0x815c	; 0x815c <cos>
    4454:	00 91 f8 22 	lds	r16, 0x22F8
    4458:	10 91 f9 22 	lds	r17, 0x22F9
    445c:	00 0f       	add	r16, r16
    445e:	11 1f       	adc	r17, r17
    4460:	00 0f       	add	r16, r16
    4462:	11 1f       	adc	r17, r17
    4464:	01 51       	subi	r16, 0x11	; 17
    4466:	1d 4d       	sbci	r17, 0xDD	; 221
    4468:	a5 01       	movw	r20, r10
    446a:	94 01       	movw	r18, r8
    446c:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    4470:	9b 01       	movw	r18, r22
    4472:	ac 01       	movw	r20, r24
    4474:	60 91 10 23 	lds	r22, 0x2310
    4478:	70 91 11 23 	lds	r23, 0x2311
    447c:	80 91 12 23 	lds	r24, 0x2312
    4480:	90 91 13 23 	lds	r25, 0x2313
    4484:	0e 94 0b 40 	call	0x8016	; 0x8016 <__addsf3>
    4488:	f8 01       	movw	r30, r16
    448a:	65 87       	std	Z+13, r22	; 0x0d
    448c:	76 87       	std	Z+14, r23	; 0x0e
    448e:	87 87       	std	Z+15, r24	; 0x0f
    4490:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    4492:	00 91 fa 22 	lds	r16, 0x22FA
    4496:	10 91 fb 22 	lds	r17, 0x22FB
    449a:	00 0f       	add	r16, r16
    449c:	11 1f       	adc	r17, r17
    449e:	00 0f       	add	r16, r16
    44a0:	11 1f       	adc	r17, r17
    44a2:	01 51       	subi	r16, 0x11	; 17
    44a4:	1d 4d       	sbci	r17, 0xDD	; 221
    44a6:	d8 01       	movw	r26, r16
    44a8:	1d 96       	adiw	r26, 0x0d	; 13
    44aa:	6d 91       	ld	r22, X+
    44ac:	7d 91       	ld	r23, X+
    44ae:	8d 91       	ld	r24, X+
    44b0:	9c 91       	ld	r25, X
    44b2:	50 97       	sbiw	r26, 0x10	; 16
    44b4:	20 91 24 23 	lds	r18, 0x2324
    44b8:	30 91 25 23 	lds	r19, 0x2325
    44bc:	40 91 26 23 	lds	r20, 0x2326
    44c0:	50 91 27 23 	lds	r21, 0x2327
    44c4:	0e 94 0b 40 	call	0x8016	; 0x8016 <__addsf3>
    44c8:	f8 01       	movw	r30, r16
    44ca:	65 87       	std	Z+13, r22	; 0x0d
    44cc:	76 87       	std	Z+14, r23	; 0x0e
    44ce:	87 87       	std	Z+15, r24	; 0x0f
    44d0:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    44d2:	60 91 fc 22 	lds	r22, 0x22FC
    44d6:	70 91 fd 22 	lds	r23, 0x22FD
    44da:	80 91 fe 22 	lds	r24, 0x22FE
    44de:	90 91 ff 22 	lds	r25, 0x22FF
    44e2:	20 91 00 23 	lds	r18, 0x2300
    44e6:	30 91 01 23 	lds	r19, 0x2301
    44ea:	40 91 02 23 	lds	r20, 0x2302
    44ee:	50 91 03 23 	lds	r21, 0x2303
    44f2:	e0 90 04 23 	lds	r14, 0x2304
    44f6:	f0 90 05 23 	lds	r15, 0x2305
    44fa:	00 91 06 23 	lds	r16, 0x2306
    44fe:	10 91 07 23 	lds	r17, 0x2307
    4502:	a0 90 1c 23 	lds	r10, 0x231C
    4506:	b0 90 1d 23 	lds	r11, 0x231D
    450a:	c0 90 1e 23 	lds	r12, 0x231E
    450e:	d0 90 1f 23 	lds	r13, 0x231F
    4512:	80 90 f4 22 	lds	r8, 0x22F4
    4516:	90 90 f5 22 	lds	r9, 0x22F5
    451a:	0e 94 6d 1c 	call	0x38da	; 0x38da <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    451e:	80 91 f2 22 	lds	r24, 0x22F2
    4522:	90 91 f3 22 	lds	r25, 0x22F3
    4526:	01 96       	adiw	r24, 0x01	; 1
    4528:	80 93 f2 22 	sts	0x22F2, r24
    452c:	90 93 f3 22 	sts	0x22F3, r25
    4530:	20 91 f2 22 	lds	r18, 0x22F2
    4534:	30 91 f3 22 	lds	r19, 0x22F3
    4538:	80 91 f0 22 	lds	r24, 0x22F0
    453c:	90 91 f1 22 	lds	r25, 0x22F1
    4540:	82 17       	cp	r24, r18
    4542:	93 07       	cpc	r25, r19
    4544:	0c f0       	brlt	.+2      	; 0x4548 <mc_arc_blocking+0x4b4>
    4546:	35 cf       	rjmp	.-406    	; 0x43b2 <mc_arc_blocking+0x31e>
    4548:	20 e0       	ldi	r18, 0x00	; 0
    454a:	30 e0       	ldi	r19, 0x00	; 0
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    454c:	c9 01       	movw	r24, r18
    454e:	28 96       	adiw	r28, 0x08	; 8
    4550:	cd bf       	out	0x3d, r28	; 61
    4552:	de bf       	out	0x3e, r29	; 62
    4554:	cf 91       	pop	r28
    4556:	df 91       	pop	r29
    4558:	1f 91       	pop	r17
    455a:	0f 91       	pop	r16
    455c:	ff 90       	pop	r15
    455e:	ef 90       	pop	r14
    4560:	df 90       	pop	r13
    4562:	cf 90       	pop	r12
    4564:	bf 90       	pop	r11
    4566:	af 90       	pop	r10
    4568:	9f 90       	pop	r9
    456a:	8f 90       	pop	r8
    456c:	7f 90       	pop	r7
    456e:	6f 90       	pop	r6
    4570:	5f 90       	pop	r5
    4572:	4f 90       	pop	r4
    4574:	3f 90       	pop	r3
    4576:	2f 90       	pop	r2
    4578:	08 95       	ret

0000457a <mc_line_blocking>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line_blocking(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    457a:	2f 92       	push	r2
    457c:	3f 92       	push	r3
    457e:	4f 92       	push	r4
    4580:	5f 92       	push	r5
    4582:	6f 92       	push	r6
    4584:	7f 92       	push	r7
    4586:	8f 92       	push	r8
    4588:	9f 92       	push	r9
    458a:	af 92       	push	r10
    458c:	bf 92       	push	r11
    458e:	cf 92       	push	r12
    4590:	df 92       	push	r13
    4592:	ef 92       	push	r14
    4594:	ff 92       	push	r15
    4596:	0f 93       	push	r16
    4598:	1f 93       	push	r17
    459a:	df 93       	push	r29
    459c:	cf 93       	push	r28
    459e:	cd b7       	in	r28, 0x3d	; 61
    45a0:	de b7       	in	r29, 0x3e	; 62
    45a2:	6c 97       	sbiw	r28, 0x1c	; 28
    45a4:	cd bf       	out	0x3d, r28	; 61
    45a6:	de bf       	out	0x3e, r29	; 62
    45a8:	2d 8b       	std	Y+21, r18	; 0x15
    45aa:	3e 8b       	std	Y+22, r19	; 0x16
    45ac:	4f 8b       	std	Y+23, r20	; 0x17
    45ae:	58 8f       	std	Y+24, r21	; 0x18
    45b0:	a9 8e       	std	Y+25, r10	; 0x19
    45b2:	ba 8e       	std	Y+26, r11	; 0x1a
    45b4:	cb 8e       	std	Y+27, r12	; 0x1b
    45b6:	dc 8e       	std	Y+28, r13	; 0x1c
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    45b8:	20 91 a2 22 	lds	r18, 0x22A2
    45bc:	30 91 a3 22 	lds	r19, 0x22A3
    45c0:	40 91 a4 22 	lds	r20, 0x22A4
    45c4:	50 91 a5 22 	lds	r21, 0x22A5
    45c8:	29 8b       	std	Y+17, r18	; 0x11
    45ca:	3a 8b       	std	Y+18, r19	; 0x12
    45cc:	4b 8b       	std	Y+19, r20	; 0x13
    45ce:	5c 8b       	std	Y+20, r21	; 0x14
    45d0:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    45d4:	0e 94 3c 43 	call	0x8678	; 0x8678 <lround>
    45d8:	2b 01       	movw	r4, r22
    45da:	3c 01       	movw	r6, r24
    45dc:	40 92 67 21 	sts	0x2167, r4
    45e0:	50 92 68 21 	sts	0x2168, r5
    45e4:	60 92 69 21 	sts	0x2169, r6
    45e8:	70 92 6a 21 	sts	0x216A, r7
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    45ec:	80 91 ba 22 	lds	r24, 0x22BA
    45f0:	90 91 bb 22 	lds	r25, 0x22BB
    45f4:	a0 91 bc 22 	lds	r26, 0x22BC
    45f8:	b0 91 bd 22 	lds	r27, 0x22BD
    45fc:	8d 87       	std	Y+13, r24	; 0x0d
    45fe:	9e 87       	std	Y+14, r25	; 0x0e
    4600:	af 87       	std	Y+15, r26	; 0x0f
    4602:	b8 8b       	std	Y+16, r27	; 0x10
    4604:	6d 89       	ldd	r22, Y+21	; 0x15
    4606:	7e 89       	ldd	r23, Y+22	; 0x16
    4608:	8f 89       	ldd	r24, Y+23	; 0x17
    460a:	98 8d       	ldd	r25, Y+24	; 0x18
    460c:	2d 85       	ldd	r18, Y+13	; 0x0d
    460e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4610:	4f 85       	ldd	r20, Y+15	; 0x0f
    4612:	58 89       	ldd	r21, Y+16	; 0x10
    4614:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    4618:	0e 94 3c 43 	call	0x8678	; 0x8678 <lround>
    461c:	5b 01       	movw	r10, r22
    461e:	6c 01       	movw	r12, r24
    4620:	a0 92 6b 21 	sts	0x216B, r10
    4624:	b0 92 6c 21 	sts	0x216C, r11
    4628:	c0 92 6d 21 	sts	0x216D, r12
    462c:	d0 92 6e 21 	sts	0x216E, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    4630:	20 91 d2 22 	lds	r18, 0x22D2
    4634:	30 91 d3 22 	lds	r19, 0x22D3
    4638:	40 91 d4 22 	lds	r20, 0x22D4
    463c:	50 91 d5 22 	lds	r21, 0x22D5
    4640:	29 87       	std	Y+9, r18	; 0x09
    4642:	3a 87       	std	Y+10, r19	; 0x0a
    4644:	4b 87       	std	Y+11, r20	; 0x0b
    4646:	5c 87       	std	Y+12, r21	; 0x0c
    4648:	c8 01       	movw	r24, r16
    464a:	b7 01       	movw	r22, r14
    464c:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    4650:	0e 94 3c 43 	call	0x8678	; 0x8678 <lround>
    4654:	9b 01       	movw	r18, r22
    4656:	ac 01       	movw	r20, r24
    4658:	20 93 6f 21 	sts	0x216F, r18
    465c:	30 93 70 21 	sts	0x2170, r19
    4660:	40 93 71 21 	sts	0x2171, r20
    4664:	50 93 72 21 	sts	0x2172, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    4668:	80 91 5b 21 	lds	r24, 0x215B
    466c:	90 91 5c 21 	lds	r25, 0x215C
    4670:	a0 91 5d 21 	lds	r26, 0x215D
    4674:	b0 91 5e 21 	lds	r27, 0x215E
    4678:	83 01       	movw	r16, r6
    467a:	72 01       	movw	r14, r4
    467c:	e8 1a       	sub	r14, r24
    467e:	f9 0a       	sbc	r15, r25
    4680:	0a 0b       	sbc	r16, r26
    4682:	1b 0b       	sbc	r17, r27
    4684:	ed 82       	std	Y+5, r14	; 0x05
    4686:	fe 82       	std	Y+6, r15	; 0x06
    4688:	0f 83       	std	Y+7, r16	; 0x07
    468a:	18 87       	std	Y+8, r17	; 0x08
    468c:	e0 92 73 21 	sts	0x2173, r14
    4690:	f0 92 74 21 	sts	0x2174, r15
    4694:	00 93 75 21 	sts	0x2175, r16
    4698:	10 93 76 21 	sts	0x2176, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    469c:	80 91 5f 21 	lds	r24, 0x215F
    46a0:	90 91 60 21 	lds	r25, 0x2160
    46a4:	a0 91 61 21 	lds	r26, 0x2161
    46a8:	b0 91 62 21 	lds	r27, 0x2162
    46ac:	86 01       	movw	r16, r12
    46ae:	75 01       	movw	r14, r10
    46b0:	e8 1a       	sub	r14, r24
    46b2:	f9 0a       	sbc	r15, r25
    46b4:	0a 0b       	sbc	r16, r26
    46b6:	1b 0b       	sbc	r17, r27
    46b8:	e9 82       	std	Y+1, r14	; 0x01
    46ba:	fa 82       	std	Y+2, r15	; 0x02
    46bc:	0b 83       	std	Y+3, r16	; 0x03
    46be:	1c 83       	std	Y+4, r17	; 0x04
    46c0:	e0 92 77 21 	sts	0x2177, r14
    46c4:	f0 92 78 21 	sts	0x2178, r15
    46c8:	00 93 79 21 	sts	0x2179, r16
    46cc:	10 93 7a 21 	sts	0x217A, r17
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    46d0:	80 91 63 21 	lds	r24, 0x2163
    46d4:	90 91 64 21 	lds	r25, 0x2164
    46d8:	a0 91 65 21 	lds	r26, 0x2165
    46dc:	b0 91 66 21 	lds	r27, 0x2166
    46e0:	19 01       	movw	r2, r18
    46e2:	2a 01       	movw	r4, r20
    46e4:	28 1a       	sub	r2, r24
    46e6:	39 0a       	sbc	r3, r25
    46e8:	4a 0a       	sbc	r4, r26
    46ea:	5b 0a       	sbc	r5, r27
    46ec:	20 92 7b 21 	sts	0x217B, r2
    46f0:	30 92 7c 21 	sts	0x217C, r3
    46f4:	40 92 7d 21 	sts	0x217D, r4
    46f8:	50 92 7e 21 	sts	0x217E, r5

	if (invert_feed_rate) {
    46fc:	89 28       	or	r8, r9
    46fe:	59 f0       	breq	.+22     	; 0x4716 <mc_line_blocking+0x19c>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    4700:	60 ec       	ldi	r22, 0xC0	; 192
    4702:	71 ee       	ldi	r23, 0xE1	; 225
    4704:	84 e6       	ldi	r24, 0x64	; 100
    4706:	9c e4       	ldi	r25, 0x4C	; 76
    4708:	29 8d       	ldd	r18, Y+25	; 0x19
    470a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    470c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    470e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4710:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    4714:	4e c0       	rjmp	.+156    	; 0x47b2 <mc_line_blocking+0x238>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    4716:	6d 81       	ldd	r22, Y+5	; 0x05
    4718:	7e 81       	ldd	r23, Y+6	; 0x06
    471a:	8f 81       	ldd	r24, Y+7	; 0x07
    471c:	98 85       	ldd	r25, Y+8	; 0x08
    471e:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    4722:	29 89       	ldd	r18, Y+17	; 0x11
    4724:	3a 89       	ldd	r19, Y+18	; 0x12
    4726:	4b 89       	ldd	r20, Y+19	; 0x13
    4728:	5c 89       	ldd	r21, Y+20	; 0x14
    472a:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    472e:	0e 94 17 44 	call	0x882e	; 0x882e <square>
    4732:	3b 01       	movw	r6, r22
    4734:	4c 01       	movw	r8, r24
    4736:	69 81       	ldd	r22, Y+1	; 0x01
    4738:	7a 81       	ldd	r23, Y+2	; 0x02
    473a:	8b 81       	ldd	r24, Y+3	; 0x03
    473c:	9c 81       	ldd	r25, Y+4	; 0x04
    473e:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    4742:	2d 85       	ldd	r18, Y+13	; 0x0d
    4744:	3e 85       	ldd	r19, Y+14	; 0x0e
    4746:	4f 85       	ldd	r20, Y+15	; 0x0f
    4748:	58 89       	ldd	r21, Y+16	; 0x10
    474a:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    474e:	0e 94 17 44 	call	0x882e	; 0x882e <square>
    4752:	5b 01       	movw	r10, r22
    4754:	6c 01       	movw	r12, r24
    4756:	c2 01       	movw	r24, r4
    4758:	b1 01       	movw	r22, r2
    475a:	0e 94 4c 41 	call	0x8298	; 0x8298 <__floatsisf>
    475e:	29 85       	ldd	r18, Y+9	; 0x09
    4760:	3a 85       	ldd	r19, Y+10	; 0x0a
    4762:	4b 85       	ldd	r20, Y+11	; 0x0b
    4764:	5c 85       	ldd	r21, Y+12	; 0x0c
    4766:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    476a:	0e 94 17 44 	call	0x882e	; 0x882e <square>
    476e:	7b 01       	movw	r14, r22
    4770:	8c 01       	movw	r16, r24
    4772:	c4 01       	movw	r24, r8
    4774:	b3 01       	movw	r22, r6
    4776:	a6 01       	movw	r20, r12
    4778:	95 01       	movw	r18, r10
    477a:	0e 94 0b 40 	call	0x8016	; 0x8016 <__addsf3>
    477e:	a8 01       	movw	r20, r16
    4780:	97 01       	movw	r18, r14
    4782:	0e 94 0b 40 	call	0x8016	; 0x8016 <__addsf3>
    4786:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <sqrt>
    478a:	60 93 83 21 	sts	0x2183, r22
    478e:	70 93 84 21 	sts	0x2184, r23
    4792:	80 93 85 21 	sts	0x2185, r24
    4796:	90 93 86 21 	sts	0x2186, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    479a:	29 8d       	ldd	r18, Y+25	; 0x19
    479c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    479e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    47a0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    47a2:	0e 94 b1 40 	call	0x8162	; 0x8162 <__divsf3>
    47a6:	20 e0       	ldi	r18, 0x00	; 0
    47a8:	34 e2       	ldi	r19, 0x24	; 36
    47aa:	44 e7       	ldi	r20, 0x74	; 116
    47ac:	59 e4       	ldi	r21, 0x49	; 73
    47ae:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    47b2:	0e 94 3c 43 	call	0x8678	; 0x8678 <lround>
    47b6:	60 93 7f 21 	sts	0x217F, r22
    47ba:	70 93 80 21 	sts	0x2180, r23
    47be:	80 93 81 21 	sts	0x2181, r24
    47c2:	90 93 82 21 	sts	0x2182, r25
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    47c6:	a0 90 7f 21 	lds	r10, 0x217F
    47ca:	b0 90 80 21 	lds	r11, 0x2180
    47ce:	c0 90 81 21 	lds	r12, 0x2181
    47d2:	d0 90 82 21 	lds	r13, 0x2182
    47d6:	6d 81       	ldd	r22, Y+5	; 0x05
    47d8:	7e 81       	ldd	r23, Y+6	; 0x06
    47da:	8f 81       	ldd	r24, Y+7	; 0x07
    47dc:	98 85       	ldd	r25, Y+8	; 0x08
    47de:	29 81       	ldd	r18, Y+1	; 0x01
    47e0:	3a 81       	ldd	r19, Y+2	; 0x02
    47e2:	4b 81       	ldd	r20, Y+3	; 0x03
    47e4:	5c 81       	ldd	r21, Y+4	; 0x04
    47e6:	82 01       	movw	r16, r4
    47e8:	71 01       	movw	r14, r2
    47ea:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    47ee:	eb e5       	ldi	r30, 0x5B	; 91
    47f0:	f1 e2       	ldi	r31, 0x21	; 33
    47f2:	df 01       	movw	r26, r30
    47f4:	1c 96       	adiw	r26, 0x0c	; 12
    47f6:	8c e0       	ldi	r24, 0x0C	; 12
    47f8:	0d 90       	ld	r0, X+
    47fa:	01 92       	st	Z+, r0
    47fc:	81 50       	subi	r24, 0x01	; 1
    47fe:	e1 f7       	brne	.-8      	; 0x47f8 <mc_line_blocking+0x27e>
	return (TG_OK);
}
    4800:	80 e0       	ldi	r24, 0x00	; 0
    4802:	90 e0       	ldi	r25, 0x00	; 0
    4804:	6c 96       	adiw	r28, 0x1c	; 28
    4806:	cd bf       	out	0x3d, r28	; 61
    4808:	de bf       	out	0x3e, r29	; 62
    480a:	cf 91       	pop	r28
    480c:	df 91       	pop	r29
    480e:	1f 91       	pop	r17
    4810:	0f 91       	pop	r16
    4812:	ff 90       	pop	r15
    4814:	ef 90       	pop	r14
    4816:	df 90       	pop	r13
    4818:	cf 90       	pop	r12
    481a:	bf 90       	pop	r11
    481c:	af 90       	pop	r10
    481e:	9f 90       	pop	r9
    4820:	8f 90       	pop	r8
    4822:	7f 90       	pop	r7
    4824:	6f 90       	pop	r6
    4826:	5f 90       	pop	r5
    4828:	4f 90       	pop	r4
    482a:	3f 90       	pop	r3
    482c:	2f 90       	pop	r2
    482e:	08 95       	ret

00004830 <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    4830:	e0 e6       	ldi	r30, 0x60	; 96
    4832:	f6 e0       	ldi	r31, 0x06	; 6
    4834:	80 e4       	ldi	r24, 0x40	; 64
    4836:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    4838:	80 e8       	ldi	r24, 0x80	; 128
    483a:	81 83       	std	Z+1, r24	; 0x01
}
    483c:	08 95       	ret

0000483e <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    483e:	97 fd       	sbrc	r25, 7
    4840:	05 c0       	rjmp	.+10     	; 0x484c <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    4842:	80 e8       	ldi	r24, 0x80	; 128
    4844:	e0 e6       	ldi	r30, 0x60	; 96
    4846:	f6 e0       	ldi	r31, 0x06	; 6
    4848:	85 83       	std	Z+5, r24	; 0x05
    484a:	04 c0       	rjmp	.+8      	; 0x4854 <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    484c:	80 e8       	ldi	r24, 0x80	; 128
    484e:	e0 e6       	ldi	r30, 0x60	; 96
    4850:	f6 e0       	ldi	r31, 0x06	; 6
    4852:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    4854:	80 e4       	ldi	r24, 0x40	; 64
    4856:	e0 e6       	ldi	r30, 0x60	; 96
    4858:	f6 e0       	ldi	r31, 0x06	; 6
    485a:	85 83       	std	Z+5, r24	; 0x05
}
    485c:	08 95       	ret

0000485e <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    485e:	80 e4       	ldi	r24, 0x40	; 64
    4860:	e0 e6       	ldi	r30, 0x60	; 96
    4862:	f6 e0       	ldi	r31, 0x06	; 6
    4864:	86 83       	std	Z+6, r24	; 0x06
}
    4866:	08 95       	ret

00004868 <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    4868:	cf 93       	push	r28
    486a:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    486c:	10 92 3e 22 	sts	0x223E, r1
	ax.exec_mutex = FALSE;
    4870:	10 92 3d 22 	sts	0x223D, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    4874:	80 e0       	ldi	r24, 0x00	; 0
    4876:	96 e0       	ldi	r25, 0x06	; 6
    4878:	80 93 4d 22 	sts	0x224D, r24
    487c:	90 93 4e 22 	sts	0x224E, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    4880:	80 ea       	ldi	r24, 0xA0	; 160
    4882:	96 e0       	ldi	r25, 0x06	; 6
    4884:	80 93 5d 22 	sts	0x225D, r24
    4888:	90 93 5e 22 	sts	0x225E, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    488c:	80 e8       	ldi	r24, 0x80	; 128
    488e:	96 e0       	ldi	r25, 0x06	; 6
    4890:	80 93 6d 22 	sts	0x226D, r24
    4894:	90 93 6e 22 	sts	0x226E, r25
	ax.a[A].port = &A_MOTOR_PORT;
    4898:	80 e6       	ldi	r24, 0x60	; 96
    489a:	96 e0       	ldi	r25, 0x06	; 6
    489c:	80 93 7d 22 	sts	0x227D, r24
    48a0:	90 93 7e 22 	sts	0x227E, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    48a4:	80 e0       	ldi	r24, 0x00	; 0
    48a6:	98 e0       	ldi	r25, 0x08	; 8
    48a8:	80 93 4f 22 	sts	0x224F, r24
    48ac:	90 93 50 22 	sts	0x2250, r25
	ax.a[Y].timer = &Y_TIMER;
    48b0:	80 e0       	ldi	r24, 0x00	; 0
    48b2:	99 e0       	ldi	r25, 0x09	; 9
    48b4:	80 93 5f 22 	sts	0x225F, r24
    48b8:	90 93 60 22 	sts	0x2260, r25
	ax.a[Z].timer = &Z_TIMER;
    48bc:	80 e0       	ldi	r24, 0x00	; 0
    48be:	9a e0       	ldi	r25, 0x0A	; 10
    48c0:	80 93 6f 22 	sts	0x226F, r24
    48c4:	90 93 70 22 	sts	0x2270, r25
	ax.a[A].timer = &A_TIMER;
    48c8:	80 e0       	ldi	r24, 0x00	; 0
    48ca:	9b e0       	ldi	r25, 0x0B	; 11
    48cc:	80 93 7f 22 	sts	0x227F, r24
    48d0:	90 93 80 22 	sts	0x2280, r25
    48d4:	c1 e9       	ldi	r28, 0x91	; 145
    48d6:	d2 e2       	ldi	r29, 0x22	; 34
    48d8:	ab e4       	ldi	r26, 0x4B	; 75
    48da:	b2 e2       	ldi	r27, 0x22	; 34

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    48dc:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    48de:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    48e0:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    48e2:	88 81       	ld	r24, Y
    48e4:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    48e6:	12 96       	adiw	r26, 0x02	; 2
    48e8:	ed 91       	ld	r30, X+
    48ea:	fc 91       	ld	r31, X
    48ec:	13 97       	sbiw	r26, 0x03	; 3
    48ee:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    48f0:	12 96       	adiw	r26, 0x02	; 2
    48f2:	ed 91       	ld	r30, X+
    48f4:	fc 91       	ld	r31, X
    48f6:	13 97       	sbiw	r26, 0x03	; 3
    48f8:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
    48fa:	12 96       	adiw	r26, 0x02	; 2
    48fc:	ed 91       	ld	r30, X+
    48fe:	fc 91       	ld	r31, X
    4900:	13 97       	sbiw	r26, 0x03	; 3
    4902:	84 81       	ldd	r24, Z+4	; 0x04
    4904:	88 61       	ori	r24, 0x18	; 24
    4906:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4908:	12 96       	adiw	r26, 0x02	; 2
    490a:	ed 91       	ld	r30, X+
    490c:	fc 91       	ld	r31, X
    490e:	13 97       	sbiw	r26, 0x03	; 3
    4910:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    4912:	14 96       	adiw	r26, 0x04	; 4
    4914:	ed 91       	ld	r30, X+
    4916:	fc 91       	ld	r31, X
    4918:	15 97       	sbiw	r26, 0x05	; 5
    491a:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    491c:	14 96       	adiw	r26, 0x04	; 4
    491e:	ed 91       	ld	r30, X+
    4920:	fc 91       	ld	r31, X
    4922:	15 97       	sbiw	r26, 0x05	; 5
    4924:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    4926:	14 96       	adiw	r26, 0x04	; 4
    4928:	ed 91       	ld	r30, X+
    492a:	fc 91       	ld	r31, X
    492c:	15 97       	sbiw	r26, 0x05	; 5
    492e:	96 83       	std	Z+6, r25	; 0x06
    4930:	68 96       	adiw	r28, 0x18	; 24
    4932:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    4934:	82 e2       	ldi	r24, 0x22	; 34
    4936:	c1 3f       	cpi	r28, 0xF1	; 241
    4938:	d8 07       	cpc	r29, r24
    493a:	99 f6       	brne	.-90     	; 0x48e2 <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    493c:	df 91       	pop	r29
    493e:	cf 91       	pop	r28
    4940:	08 95       	ret

00004942 <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    4942:	e8 2f       	mov	r30, r24
    4944:	f0 e0       	ldi	r31, 0x00	; 0
    4946:	84 e0       	ldi	r24, 0x04	; 4
    4948:	ee 0f       	add	r30, r30
    494a:	ff 1f       	adc	r31, r31
    494c:	8a 95       	dec	r24
    494e:	e1 f7       	brne	.-8      	; 0x4948 <st_set_polarity+0x6>
    4950:	e3 5c       	subi	r30, 0xC3	; 195
    4952:	fd 4d       	sbci	r31, 0xDD	; 221
    4954:	66 87       	std	Z+14, r22	; 0x0e
}
    4956:	08 95       	ret

00004958 <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X].step_counter = 0x00001000;
    4958:	21 e4       	ldi	r18, 0x41	; 65
    495a:	32 e2       	ldi	r19, 0x22	; 34
    495c:	80 e0       	ldi	r24, 0x00	; 0
    495e:	90 e1       	ldi	r25, 0x10	; 16
    4960:	a0 e0       	ldi	r26, 0x00	; 0
    4962:	b0 e0       	ldi	r27, 0x00	; 0
    4964:	80 93 41 22 	sts	0x2241, r24
    4968:	90 93 42 22 	sts	0x2242, r25
    496c:	a0 93 43 22 	sts	0x2243, r26
    4970:	b0 93 44 22 	sts	0x2244, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    4974:	e0 91 4f 22 	lds	r30, 0x224F
    4978:	f0 91 50 22 	lds	r31, 0x2250
    497c:	80 e0       	ldi	r24, 0x00	; 0
    497e:	90 e1       	ldi	r25, 0x10	; 16
    4980:	86 a3       	std	Z+38, r24	; 0x26
    4982:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    4984:	41 e0       	ldi	r20, 0x01	; 1
    4986:	40 83       	st	Z, r20

	ax.a[Y].step_counter = 0x00000800;
    4988:	80 e0       	ldi	r24, 0x00	; 0
    498a:	98 e0       	ldi	r25, 0x08	; 8
    498c:	a0 e0       	ldi	r26, 0x00	; 0
    498e:	b0 e0       	ldi	r27, 0x00	; 0
    4990:	80 93 51 22 	sts	0x2251, r24
    4994:	90 93 52 22 	sts	0x2252, r25
    4998:	a0 93 53 22 	sts	0x2253, r26
    499c:	b0 93 54 22 	sts	0x2254, r27
	ax.a[Y].timer->PER = 0x2000;
    49a0:	e0 91 5f 22 	lds	r30, 0x225F
    49a4:	f0 91 60 22 	lds	r31, 0x2260
    49a8:	80 e0       	ldi	r24, 0x00	; 0
    49aa:	90 e2       	ldi	r25, 0x20	; 32
    49ac:	86 a3       	std	Z+38, r24	; 0x26
    49ae:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    49b0:	40 83       	st	Z, r20

	ax.a[Z].step_counter = 0x00000600;
    49b2:	80 e0       	ldi	r24, 0x00	; 0
    49b4:	96 e0       	ldi	r25, 0x06	; 6
    49b6:	a0 e0       	ldi	r26, 0x00	; 0
    49b8:	b0 e0       	ldi	r27, 0x00	; 0
    49ba:	80 93 61 22 	sts	0x2261, r24
    49be:	90 93 62 22 	sts	0x2262, r25
    49c2:	a0 93 63 22 	sts	0x2263, r26
    49c6:	b0 93 64 22 	sts	0x2264, r27
	ax.a[Z].timer->PER = 0x3000;
    49ca:	e0 91 6f 22 	lds	r30, 0x226F
    49ce:	f0 91 70 22 	lds	r31, 0x2270
    49d2:	80 e0       	ldi	r24, 0x00	; 0
    49d4:	90 e3       	ldi	r25, 0x30	; 48
    49d6:	86 a3       	std	Z+38, r24	; 0x26
    49d8:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    49da:	40 83       	st	Z, r20

	ax.a[A].step_counter = 0x00000400;
    49dc:	80 e0       	ldi	r24, 0x00	; 0
    49de:	94 e0       	ldi	r25, 0x04	; 4
    49e0:	a0 e0       	ldi	r26, 0x00	; 0
    49e2:	b0 e0       	ldi	r27, 0x00	; 0
    49e4:	80 93 71 22 	sts	0x2271, r24
    49e8:	90 93 72 22 	sts	0x2272, r25
    49ec:	a0 93 73 22 	sts	0x2273, r26
    49f0:	b0 93 74 22 	sts	0x2274, r27
	ax.a[A].timer->PER = 0x4000;
    49f4:	d9 01       	movw	r26, r18
    49f6:	de 96       	adiw	r26, 0x3e	; 62
    49f8:	ed 91       	ld	r30, X+
    49fa:	fc 91       	ld	r31, X
    49fc:	df 97       	sbiw	r26, 0x3f	; 63
    49fe:	80 e0       	ldi	r24, 0x00	; 0
    4a00:	90 e4       	ldi	r25, 0x40	; 64
    4a02:	86 a3       	std	Z+38, r24	; 0x26
    4a04:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    4a06:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    4a08:	23 50       	subi	r18, 0x03	; 3
    4a0a:	30 40       	sbci	r19, 0x00	; 0
    4a0c:	f9 01       	movw	r30, r18
    4a0e:	80 81       	ld	r24, Z
    4a10:	8f 60       	ori	r24, 0x0F	; 15
    4a12:	80 83       	st	Z, r24
}
    4a14:	08 95       	ret

00004a16 <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    4a16:	f8 94       	cli
	mv_flush();									// flush the move buffer
    4a18:	0e 94 cf 2c 	call	0x599e	; 0x599e <mv_flush>
	sei();
    4a1c:	78 94       	sei
}
    4a1e:	08 95       	ret

00004a20 <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    4a20:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    4a22:	e0 91 4f 22 	lds	r30, 0x224F
    4a26:	f0 91 50 22 	lds	r31, 0x2250
    4a2a:	10 82       	st	Z, r1
    4a2c:	e0 91 5f 22 	lds	r30, 0x225F
    4a30:	f0 91 60 22 	lds	r31, 0x2260
    4a34:	10 82       	st	Z, r1
    4a36:	e0 91 6f 22 	lds	r30, 0x226F
    4a3a:	f0 91 70 22 	lds	r31, 0x2270
    4a3e:	10 82       	st	Z, r1
    4a40:	e0 91 7f 22 	lds	r30, 0x227F
    4a44:	f0 91 80 22 	lds	r31, 0x2280
    4a48:	10 82       	st	Z, r1
	}	
	mv_flush();									// flush the move buffer
    4a4a:	0e 94 cf 2c 	call	0x599e	; 0x599e <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4a4e:	10 92 3e 22 	sts	0x223E, r1
	sei();
    4a52:	78 94       	sei
}
    4a54:	08 95       	ret

00004a56 <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    4a56:	cf 92       	push	r12
    4a58:	df 92       	push	r13
    4a5a:	ef 92       	push	r14
    4a5c:	ff 92       	push	r15
    4a5e:	0f 93       	push	r16
    4a60:	1f 93       	push	r17
    4a62:	cf 93       	push	r28
    4a64:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    4a66:	80 91 3d 22 	lds	r24, 0x223D
    4a6a:	88 23       	and	r24, r24
    4a6c:	09 f0       	breq	.+2      	; 0x4a70 <st_execute_move+0x1a>
    4a6e:	32 c1       	rjmp	.+612    	; 0x4cd4 <st_execute_move+0x27e>
		return;
	}
	ax.exec_mutex = TRUE;
    4a70:	81 e0       	ldi	r24, 0x01	; 1
    4a72:	80 93 3d 22 	sts	0x223D, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    4a76:	80 91 3e 22 	lds	r24, 0x223E
    4a7a:	88 23       	and	r24, r24
    4a7c:	09 f0       	breq	.+2      	; 0x4a80 <st_execute_move+0x2a>
    4a7e:	28 c1       	rjmp	.+592    	; 0x4cd0 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    4a80:	0e 94 8c 2c 	call	0x5918	; 0x5918 <mv_dequeue_move_buffer>
    4a84:	80 93 3f 22 	sts	0x223F, r24
    4a88:	90 93 40 22 	sts	0x2240, r25
    4a8c:	89 2b       	or	r24, r25
    4a8e:	09 f4       	brne	.+2      	; 0x4a92 <st_execute_move+0x3c>
    4a90:	1f c1       	rjmp	.+574    	; 0x4cd0 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;
		return;
    4a92:	61 e4       	ldi	r22, 0x41	; 65
    4a94:	72 e2       	ldi	r23, 0x22	; 34
    4a96:	00 e0       	ldi	r16, 0x00	; 0
    4a98:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4a9a:	94 e0       	ldi	r25, 0x04	; 4
    4a9c:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4a9e:	82 e0       	ldi	r24, 0x02	; 2
    4aa0:	d8 2e       	mov	r13, r24
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.exec_mutex = FALSE;
		return;
    4aa2:	f0 2e       	mov	r15, r16
    4aa4:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    4aa6:	db 01       	movw	r26, r22
    4aa8:	1e 96       	adiw	r26, 0x0e	; 14
    4aaa:	ed 91       	ld	r30, X+
    4aac:	fc 91       	ld	r31, X
    4aae:	1f 97       	sbiw	r26, 0x0f	; 15
    4ab0:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    4ab2:	c0 91 3f 22 	lds	r28, 0x223F
    4ab6:	d0 91 40 22 	lds	r29, 0x2240
    4aba:	c8 01       	movw	r24, r16
    4abc:	fc 01       	movw	r30, r24
    4abe:	b3 e0       	ldi	r27, 0x03	; 3
    4ac0:	ee 0f       	add	r30, r30
    4ac2:	ff 1f       	adc	r31, r31
    4ac4:	ba 95       	dec	r27
    4ac6:	e1 f7       	brne	.-8      	; 0x4ac0 <st_execute_move+0x6a>
    4ac8:	88 0f       	add	r24, r24
    4aca:	99 1f       	adc	r25, r25
    4acc:	e8 0f       	add	r30, r24
    4ace:	f9 1f       	adc	r31, r25
    4ad0:	ec 0f       	add	r30, r28
    4ad2:	fd 1f       	adc	r31, r29
    4ad4:	80 81       	ld	r24, Z
    4ad6:	91 81       	ldd	r25, Z+1	; 0x01
    4ad8:	a2 81       	ldd	r26, Z+2	; 0x02
    4ada:	b3 81       	ldd	r27, Z+3	; 0x03
    4adc:	00 97       	sbiw	r24, 0x00	; 0
    4ade:	a1 05       	cpc	r26, r1
    4ae0:	b1 05       	cpc	r27, r1
    4ae2:	09 f4       	brne	.+2      	; 0x4ae6 <st_execute_move+0x90>
    4ae4:	a6 c0       	rjmp	.+332    	; 0x4c32 <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    4ae6:	c8 01       	movw	r24, r16
    4ae8:	9c 01       	movw	r18, r24
    4aea:	f3 e0       	ldi	r31, 0x03	; 3
    4aec:	22 0f       	add	r18, r18
    4aee:	33 1f       	adc	r19, r19
    4af0:	fa 95       	dec	r31
    4af2:	e1 f7       	brne	.-8      	; 0x4aec <st_execute_move+0x96>
    4af4:	88 0f       	add	r24, r24
    4af6:	99 1f       	adc	r25, r25
    4af8:	28 0f       	add	r18, r24
    4afa:	39 1f       	adc	r19, r25
    4afc:	c2 0f       	add	r28, r18
    4afe:	d3 1f       	adc	r29, r19
    4b00:	89 85       	ldd	r24, Y+9	; 0x09
    4b02:	fb 01       	movw	r30, r22
    4b04:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4b06:	e0 91 3f 22 	lds	r30, 0x223F
    4b0a:	f0 91 40 22 	lds	r31, 0x2240
    4b0e:	c8 01       	movw	r24, r16
    4b10:	9c 01       	movw	r18, r24
    4b12:	53 e0       	ldi	r21, 0x03	; 3
    4b14:	22 0f       	add	r18, r18
    4b16:	33 1f       	adc	r19, r19
    4b18:	5a 95       	dec	r21
    4b1a:	e1 f7       	brne	.-8      	; 0x4b14 <st_execute_move+0xbe>
    4b1c:	88 0f       	add	r24, r24
    4b1e:	99 1f       	adc	r25, r25
    4b20:	28 0f       	add	r18, r24
    4b22:	39 1f       	adc	r19, r25
    4b24:	e2 0f       	add	r30, r18
    4b26:	f3 1f       	adc	r31, r19
    4b28:	90 85       	ldd	r25, Z+8	; 0x08
    4b2a:	db 01       	movw	r26, r22
    4b2c:	1a 96       	adiw	r26, 0x0a	; 10
    4b2e:	8c 91       	ld	r24, X
    4b30:	1a 97       	sbiw	r26, 0x0a	; 10
    4b32:	1c 96       	adiw	r26, 0x0c	; 12
    4b34:	ed 91       	ld	r30, X+
    4b36:	fc 91       	ld	r31, X
    4b38:	1d 97       	sbiw	r26, 0x0d	; 13
    4b3a:	98 17       	cp	r25, r24
    4b3c:	11 f0       	breq	.+4      	; 0x4b42 <st_execute_move+0xec>
    4b3e:	d5 82       	std	Z+5, r13	; 0x05
    4b40:	01 c0       	rjmp	.+2      	; 0x4b44 <st_execute_move+0xee>
    4b42:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    4b44:	40 91 3f 22 	lds	r20, 0x223F
    4b48:	50 91 40 22 	lds	r21, 0x2240
    4b4c:	8f 2d       	mov	r24, r15
    4b4e:	9e 2d       	mov	r25, r14
    4b50:	fc 01       	movw	r30, r24
    4b52:	33 e0       	ldi	r19, 0x03	; 3
    4b54:	ee 0f       	add	r30, r30
    4b56:	ff 1f       	adc	r31, r31
    4b58:	3a 95       	dec	r19
    4b5a:	e1 f7       	brne	.-8      	; 0x4b54 <st_execute_move+0xfe>
    4b5c:	88 0f       	add	r24, r24
    4b5e:	99 1f       	adc	r25, r25
    4b60:	e8 0f       	add	r30, r24
    4b62:	f9 1f       	adc	r31, r25
    4b64:	e4 0f       	add	r30, r20
    4b66:	f5 1f       	adc	r31, r21
    4b68:	80 81       	ld	r24, Z
    4b6a:	91 81       	ldd	r25, Z+1	; 0x01
    4b6c:	a2 81       	ldd	r26, Z+2	; 0x02
    4b6e:	b3 81       	ldd	r27, Z+3	; 0x03
    4b70:	fb 01       	movw	r30, r22
    4b72:	80 83       	st	Z, r24
    4b74:	91 83       	std	Z+1, r25	; 0x01
    4b76:	a2 83       	std	Z+2, r26	; 0x02
    4b78:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    4b7a:	8f 2d       	mov	r24, r15
    4b7c:	9e 2d       	mov	r25, r14
    4b7e:	fc 01       	movw	r30, r24
    4b80:	b3 e0       	ldi	r27, 0x03	; 3
    4b82:	ee 0f       	add	r30, r30
    4b84:	ff 1f       	adc	r31, r31
    4b86:	ba 95       	dec	r27
    4b88:	e1 f7       	brne	.-8      	; 0x4b82 <st_execute_move+0x12c>
    4b8a:	88 0f       	add	r24, r24
    4b8c:	99 1f       	adc	r25, r25
    4b8e:	e8 0f       	add	r30, r24
    4b90:	f9 1f       	adc	r31, r25
    4b92:	e4 0f       	add	r30, r20
    4b94:	f5 1f       	adc	r31, r21
    4b96:	86 81       	ldd	r24, Z+6	; 0x06
    4b98:	97 81       	ldd	r25, Z+7	; 0x07
    4b9a:	db 01       	movw	r26, r22
    4b9c:	16 96       	adiw	r26, 0x06	; 6
    4b9e:	8d 93       	st	X+, r24
    4ba0:	9c 93       	st	X, r25
    4ba2:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    4ba4:	8f 2d       	mov	r24, r15
    4ba6:	9e 2d       	mov	r25, r14
    4ba8:	fc 01       	movw	r30, r24
    4baa:	33 e0       	ldi	r19, 0x03	; 3
    4bac:	ee 0f       	add	r30, r30
    4bae:	ff 1f       	adc	r31, r31
    4bb0:	3a 95       	dec	r19
    4bb2:	e1 f7       	brne	.-8      	; 0x4bac <st_execute_move+0x156>
    4bb4:	88 0f       	add	r24, r24
    4bb6:	99 1f       	adc	r25, r25
    4bb8:	e8 0f       	add	r30, r24
    4bba:	f9 1f       	adc	r31, r25
    4bbc:	e4 0f       	add	r30, r20
    4bbe:	f5 1f       	adc	r31, r21
    4bc0:	86 81       	ldd	r24, Z+6	; 0x06
    4bc2:	97 81       	ldd	r25, Z+7	; 0x07
    4bc4:	18 96       	adiw	r26, 0x08	; 8
    4bc6:	8d 93       	st	X+, r24
    4bc8:	9c 93       	st	X, r25
    4bca:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    4bcc:	8f 2d       	mov	r24, r15
    4bce:	9e 2d       	mov	r25, r14
    4bd0:	fc 01       	movw	r30, r24
    4bd2:	33 e0       	ldi	r19, 0x03	; 3
    4bd4:	ee 0f       	add	r30, r30
    4bd6:	ff 1f       	adc	r31, r31
    4bd8:	3a 95       	dec	r19
    4bda:	e1 f7       	brne	.-8      	; 0x4bd4 <st_execute_move+0x17e>
    4bdc:	88 0f       	add	r24, r24
    4bde:	99 1f       	adc	r25, r25
    4be0:	e8 0f       	add	r30, r24
    4be2:	f9 1f       	adc	r31, r25
    4be4:	e4 0f       	add	r30, r20
    4be6:	f5 1f       	adc	r31, r21
    4be8:	84 81       	ldd	r24, Z+4	; 0x04
    4bea:	95 81       	ldd	r25, Z+5	; 0x05
    4bec:	14 96       	adiw	r26, 0x04	; 4
    4bee:	8d 93       	st	X+, r24
    4bf0:	9c 93       	st	X, r25
    4bf2:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    4bf4:	1e 96       	adiw	r26, 0x0e	; 14
    4bf6:	ed 91       	ld	r30, X+
    4bf8:	fc 91       	ld	r31, X
    4bfa:	1f 97       	sbiw	r26, 0x0f	; 15
    4bfc:	8f 2d       	mov	r24, r15
    4bfe:	9e 2d       	mov	r25, r14
    4c00:	9c 01       	movw	r18, r24
    4c02:	b3 e0       	ldi	r27, 0x03	; 3
    4c04:	22 0f       	add	r18, r18
    4c06:	33 1f       	adc	r19, r19
    4c08:	ba 95       	dec	r27
    4c0a:	e1 f7       	brne	.-8      	; 0x4c04 <st_execute_move+0x1ae>
    4c0c:	88 0f       	add	r24, r24
    4c0e:	99 1f       	adc	r25, r25
    4c10:	28 0f       	add	r18, r24
    4c12:	39 1f       	adc	r19, r25
    4c14:	42 0f       	add	r20, r18
    4c16:	53 1f       	adc	r21, r19
    4c18:	da 01       	movw	r26, r20
    4c1a:	14 96       	adiw	r26, 0x04	; 4
    4c1c:	8d 91       	ld	r24, X+
    4c1e:	9c 91       	ld	r25, X
    4c20:	15 97       	sbiw	r26, 0x05	; 5
    4c22:	86 a3       	std	Z+38, r24	; 0x26
    4c24:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4c26:	db 01       	movw	r26, r22
    4c28:	1c 96       	adiw	r26, 0x0c	; 12
    4c2a:	ed 91       	ld	r30, X+
    4c2c:	fc 91       	ld	r31, X
    4c2e:	1d 97       	sbiw	r26, 0x0d	; 13
    4c30:	c6 82       	std	Z+6, r12	; 0x06
    4c32:	0f 5f       	subi	r16, 0xFF	; 255
    4c34:	1f 4f       	sbci	r17, 0xFF	; 255
    4c36:	60 5f       	subi	r22, 0xF0	; 240
    4c38:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    4c3a:	03 30       	cpi	r16, 0x03	; 3
    4c3c:	11 05       	cpc	r17, r1
    4c3e:	09 f0       	breq	.+2      	; 0x4c42 <st_execute_move+0x1ec>
    4c40:	30 cf       	rjmp	.-416    	; 0x4aa2 <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4c42:	10 92 3e 22 	sts	0x223E, r1
	if (ax.a[X].step_counter) { 
    4c46:	80 91 41 22 	lds	r24, 0x2241
    4c4a:	90 91 42 22 	lds	r25, 0x2242
    4c4e:	a0 91 43 22 	lds	r26, 0x2243
    4c52:	b0 91 44 22 	lds	r27, 0x2244
    4c56:	00 97       	sbiw	r24, 0x00	; 0
    4c58:	a1 05       	cpc	r26, r1
    4c5a:	b1 05       	cpc	r27, r1
    4c5c:	59 f0       	breq	.+22     	; 0x4c74 <st_execute_move+0x21e>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    4c5e:	e0 91 4f 22 	lds	r30, 0x224F
    4c62:	f0 91 50 22 	lds	r31, 0x2250
    4c66:	81 e0       	ldi	r24, 0x01	; 1
    4c68:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4c6a:	80 91 3e 22 	lds	r24, 0x223E
    4c6e:	88 60       	ori	r24, 0x08	; 8
    4c70:	80 93 3e 22 	sts	0x223E, r24
	}
	if (ax.a[Y].step_counter) {
    4c74:	80 91 51 22 	lds	r24, 0x2251
    4c78:	90 91 52 22 	lds	r25, 0x2252
    4c7c:	a0 91 53 22 	lds	r26, 0x2253
    4c80:	b0 91 54 22 	lds	r27, 0x2254
    4c84:	00 97       	sbiw	r24, 0x00	; 0
    4c86:	a1 05       	cpc	r26, r1
    4c88:	b1 05       	cpc	r27, r1
    4c8a:	59 f0       	breq	.+22     	; 0x4ca2 <st_execute_move+0x24c>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4c8c:	e0 91 5f 22 	lds	r30, 0x225F
    4c90:	f0 91 60 22 	lds	r31, 0x2260
    4c94:	81 e0       	ldi	r24, 0x01	; 1
    4c96:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4c98:	80 91 3e 22 	lds	r24, 0x223E
    4c9c:	84 60       	ori	r24, 0x04	; 4
    4c9e:	80 93 3e 22 	sts	0x223E, r24
	}
	if (ax.a[Z].step_counter) {
    4ca2:	80 91 61 22 	lds	r24, 0x2261
    4ca6:	90 91 62 22 	lds	r25, 0x2262
    4caa:	a0 91 63 22 	lds	r26, 0x2263
    4cae:	b0 91 64 22 	lds	r27, 0x2264
    4cb2:	00 97       	sbiw	r24, 0x00	; 0
    4cb4:	a1 05       	cpc	r26, r1
    4cb6:	b1 05       	cpc	r27, r1
    4cb8:	59 f0       	breq	.+22     	; 0x4cd0 <st_execute_move+0x27a>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4cba:	e0 91 6f 22 	lds	r30, 0x226F
    4cbe:	f0 91 70 22 	lds	r31, 0x2270
    4cc2:	81 e0       	ldi	r24, 0x01	; 1
    4cc4:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4cc6:	80 91 3e 22 	lds	r24, 0x223E
    4cca:	82 60       	ori	r24, 0x02	; 2
    4ccc:	80 93 3e 22 	sts	0x223E, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4cd0:	10 92 3d 22 	sts	0x223D, r1
}
    4cd4:	df 91       	pop	r29
    4cd6:	cf 91       	pop	r28
    4cd8:	1f 91       	pop	r17
    4cda:	0f 91       	pop	r16
    4cdc:	ff 90       	pop	r15
    4cde:	ef 90       	pop	r14
    4ce0:	df 90       	pop	r13
    4ce2:	cf 90       	pop	r12
    4ce4:	08 95       	ret

00004ce6 <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4ce6:	10 92 3d 22 	sts	0x223D, r1
	st_execute_move();		// recursively empty the move queue
    4cea:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <st_execute_move>
	return;
}
    4cee:	08 95       	ret

00004cf0 <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4cf0:	1f 92       	push	r1
    4cf2:	0f 92       	push	r0
    4cf4:	0f b6       	in	r0, 0x3f	; 63
    4cf6:	0f 92       	push	r0
    4cf8:	0b b6       	in	r0, 0x3b	; 59
    4cfa:	0f 92       	push	r0
    4cfc:	11 24       	eor	r1, r1
    4cfe:	2f 93       	push	r18
    4d00:	3f 93       	push	r19
    4d02:	4f 93       	push	r20
    4d04:	5f 93       	push	r21
    4d06:	6f 93       	push	r22
    4d08:	7f 93       	push	r23
    4d0a:	8f 93       	push	r24
    4d0c:	9f 93       	push	r25
    4d0e:	af 93       	push	r26
    4d10:	bf 93       	push	r27
    4d12:	ef 93       	push	r30
    4d14:	ff 93       	push	r31
	if (--ax.a[A].postscale_counter != 0) {
    4d16:	80 91 79 22 	lds	r24, 0x2279
    4d1a:	90 91 7a 22 	lds	r25, 0x227A
    4d1e:	01 97       	sbiw	r24, 0x01	; 1
    4d20:	80 93 79 22 	sts	0x2279, r24
    4d24:	90 93 7a 22 	sts	0x227A, r25
    4d28:	89 2b       	or	r24, r25
    4d2a:	a1 f5       	brne	.+104    	; 0x4d94 <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4d2c:	e0 e6       	ldi	r30, 0x60	; 96
    4d2e:	f6 e0       	ldi	r31, 0x06	; 6
    4d30:	81 e0       	ldi	r24, 0x01	; 1
    4d32:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    4d34:	80 91 71 22 	lds	r24, 0x2271
    4d38:	90 91 72 22 	lds	r25, 0x2272
    4d3c:	a0 91 73 22 	lds	r26, 0x2273
    4d40:	b0 91 74 22 	lds	r27, 0x2274
    4d44:	01 97       	sbiw	r24, 0x01	; 1
    4d46:	a1 09       	sbc	r26, r1
    4d48:	b1 09       	sbc	r27, r1
    4d4a:	80 93 71 22 	sts	0x2271, r24
    4d4e:	90 93 72 22 	sts	0x2272, r25
    4d52:	a0 93 73 22 	sts	0x2273, r26
    4d56:	b0 93 74 22 	sts	0x2274, r27
    4d5a:	00 97       	sbiw	r24, 0x00	; 0
    4d5c:	a1 05       	cpc	r26, r1
    4d5e:	b1 05       	cpc	r27, r1
    4d60:	69 f4       	brne	.+26     	; 0x4d7c <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4d62:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4d66:	84 e0       	ldi	r24, 0x04	; 4
    4d68:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4d6a:	80 91 3e 22 	lds	r24, 0x223E
    4d6e:	8e 7f       	andi	r24, 0xFE	; 254
    4d70:	80 93 3e 22 	sts	0x223E, r24
		if (ax.active_axes == 0) {
    4d74:	88 23       	and	r24, r24
    4d76:	11 f4       	brne	.+4      	; 0x4d7c <__vector_108+0x8c>
			st_execute_move();
    4d78:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    4d7c:	80 91 77 22 	lds	r24, 0x2277
    4d80:	90 91 78 22 	lds	r25, 0x2278
    4d84:	80 93 79 22 	sts	0x2279, r24
    4d88:	90 93 7a 22 	sts	0x227A, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4d8c:	81 e0       	ldi	r24, 0x01	; 1
    4d8e:	e0 e6       	ldi	r30, 0x60	; 96
    4d90:	f6 e0       	ldi	r31, 0x06	; 6
    4d92:	86 83       	std	Z+6, r24	; 0x06
}
    4d94:	ff 91       	pop	r31
    4d96:	ef 91       	pop	r30
    4d98:	bf 91       	pop	r27
    4d9a:	af 91       	pop	r26
    4d9c:	9f 91       	pop	r25
    4d9e:	8f 91       	pop	r24
    4da0:	7f 91       	pop	r23
    4da2:	6f 91       	pop	r22
    4da4:	5f 91       	pop	r21
    4da6:	4f 91       	pop	r20
    4da8:	3f 91       	pop	r19
    4daa:	2f 91       	pop	r18
    4dac:	0f 90       	pop	r0
    4dae:	0b be       	out	0x3b, r0	; 59
    4db0:	0f 90       	pop	r0
    4db2:	0f be       	out	0x3f, r0	; 63
    4db4:	0f 90       	pop	r0
    4db6:	1f 90       	pop	r1
    4db8:	18 95       	reti

00004dba <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4dba:	1f 92       	push	r1
    4dbc:	0f 92       	push	r0
    4dbe:	0f b6       	in	r0, 0x3f	; 63
    4dc0:	0f 92       	push	r0
    4dc2:	0b b6       	in	r0, 0x3b	; 59
    4dc4:	0f 92       	push	r0
    4dc6:	11 24       	eor	r1, r1
    4dc8:	2f 93       	push	r18
    4dca:	3f 93       	push	r19
    4dcc:	4f 93       	push	r20
    4dce:	5f 93       	push	r21
    4dd0:	6f 93       	push	r22
    4dd2:	7f 93       	push	r23
    4dd4:	8f 93       	push	r24
    4dd6:	9f 93       	push	r25
    4dd8:	af 93       	push	r26
    4dda:	bf 93       	push	r27
    4ddc:	ef 93       	push	r30
    4dde:	ff 93       	push	r31
	if (--ax.a[Z].postscale_counter != 0) {
    4de0:	80 91 69 22 	lds	r24, 0x2269
    4de4:	90 91 6a 22 	lds	r25, 0x226A
    4de8:	01 97       	sbiw	r24, 0x01	; 1
    4dea:	80 93 69 22 	sts	0x2269, r24
    4dee:	90 93 6a 22 	sts	0x226A, r25
    4df2:	89 2b       	or	r24, r25
    4df4:	a1 f5       	brne	.+104    	; 0x4e5e <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4df6:	e0 e8       	ldi	r30, 0x80	; 128
    4df8:	f6 e0       	ldi	r31, 0x06	; 6
    4dfa:	81 e0       	ldi	r24, 0x01	; 1
    4dfc:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    4dfe:	80 91 61 22 	lds	r24, 0x2261
    4e02:	90 91 62 22 	lds	r25, 0x2262
    4e06:	a0 91 63 22 	lds	r26, 0x2263
    4e0a:	b0 91 64 22 	lds	r27, 0x2264
    4e0e:	01 97       	sbiw	r24, 0x01	; 1
    4e10:	a1 09       	sbc	r26, r1
    4e12:	b1 09       	sbc	r27, r1
    4e14:	80 93 61 22 	sts	0x2261, r24
    4e18:	90 93 62 22 	sts	0x2262, r25
    4e1c:	a0 93 63 22 	sts	0x2263, r26
    4e20:	b0 93 64 22 	sts	0x2264, r27
    4e24:	00 97       	sbiw	r24, 0x00	; 0
    4e26:	a1 05       	cpc	r26, r1
    4e28:	b1 05       	cpc	r27, r1
    4e2a:	69 f4       	brne	.+26     	; 0x4e46 <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4e2c:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4e30:	84 e0       	ldi	r24, 0x04	; 4
    4e32:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4e34:	80 91 3e 22 	lds	r24, 0x223E
    4e38:	8d 7f       	andi	r24, 0xFD	; 253
    4e3a:	80 93 3e 22 	sts	0x223E, r24
		if (ax.active_axes == 0) {
    4e3e:	88 23       	and	r24, r24
    4e40:	11 f4       	brne	.+4      	; 0x4e46 <__vector_47+0x8c>
			st_execute_move();
    4e42:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    4e46:	80 91 67 22 	lds	r24, 0x2267
    4e4a:	90 91 68 22 	lds	r25, 0x2268
    4e4e:	80 93 69 22 	sts	0x2269, r24
    4e52:	90 93 6a 22 	sts	0x226A, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4e56:	81 e0       	ldi	r24, 0x01	; 1
    4e58:	e0 e8       	ldi	r30, 0x80	; 128
    4e5a:	f6 e0       	ldi	r31, 0x06	; 6
    4e5c:	86 83       	std	Z+6, r24	; 0x06
}
    4e5e:	ff 91       	pop	r31
    4e60:	ef 91       	pop	r30
    4e62:	bf 91       	pop	r27
    4e64:	af 91       	pop	r26
    4e66:	9f 91       	pop	r25
    4e68:	8f 91       	pop	r24
    4e6a:	7f 91       	pop	r23
    4e6c:	6f 91       	pop	r22
    4e6e:	5f 91       	pop	r21
    4e70:	4f 91       	pop	r20
    4e72:	3f 91       	pop	r19
    4e74:	2f 91       	pop	r18
    4e76:	0f 90       	pop	r0
    4e78:	0b be       	out	0x3b, r0	; 59
    4e7a:	0f 90       	pop	r0
    4e7c:	0f be       	out	0x3f, r0	; 63
    4e7e:	0f 90       	pop	r0
    4e80:	1f 90       	pop	r1
    4e82:	18 95       	reti

00004e84 <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4e84:	1f 92       	push	r1
    4e86:	0f 92       	push	r0
    4e88:	0f b6       	in	r0, 0x3f	; 63
    4e8a:	0f 92       	push	r0
    4e8c:	0b b6       	in	r0, 0x3b	; 59
    4e8e:	0f 92       	push	r0
    4e90:	11 24       	eor	r1, r1
    4e92:	2f 93       	push	r18
    4e94:	3f 93       	push	r19
    4e96:	4f 93       	push	r20
    4e98:	5f 93       	push	r21
    4e9a:	6f 93       	push	r22
    4e9c:	7f 93       	push	r23
    4e9e:	8f 93       	push	r24
    4ea0:	9f 93       	push	r25
    4ea2:	af 93       	push	r26
    4ea4:	bf 93       	push	r27
    4ea6:	ef 93       	push	r30
    4ea8:	ff 93       	push	r31
	if (--ax.a[Y].postscale_counter != 0) {
    4eaa:	80 91 59 22 	lds	r24, 0x2259
    4eae:	90 91 5a 22 	lds	r25, 0x225A
    4eb2:	01 97       	sbiw	r24, 0x01	; 1
    4eb4:	80 93 59 22 	sts	0x2259, r24
    4eb8:	90 93 5a 22 	sts	0x225A, r25
    4ebc:	89 2b       	or	r24, r25
    4ebe:	a1 f5       	brne	.+104    	; 0x4f28 <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4ec0:	e0 ea       	ldi	r30, 0xA0	; 160
    4ec2:	f6 e0       	ldi	r31, 0x06	; 6
    4ec4:	81 e0       	ldi	r24, 0x01	; 1
    4ec6:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    4ec8:	80 91 51 22 	lds	r24, 0x2251
    4ecc:	90 91 52 22 	lds	r25, 0x2252
    4ed0:	a0 91 53 22 	lds	r26, 0x2253
    4ed4:	b0 91 54 22 	lds	r27, 0x2254
    4ed8:	01 97       	sbiw	r24, 0x01	; 1
    4eda:	a1 09       	sbc	r26, r1
    4edc:	b1 09       	sbc	r27, r1
    4ede:	80 93 51 22 	sts	0x2251, r24
    4ee2:	90 93 52 22 	sts	0x2252, r25
    4ee6:	a0 93 53 22 	sts	0x2253, r26
    4eea:	b0 93 54 22 	sts	0x2254, r27
    4eee:	00 97       	sbiw	r24, 0x00	; 0
    4ef0:	a1 05       	cpc	r26, r1
    4ef2:	b1 05       	cpc	r27, r1
    4ef4:	69 f4       	brne	.+26     	; 0x4f10 <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4ef6:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4efa:	84 e0       	ldi	r24, 0x04	; 4
    4efc:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4efe:	80 91 3e 22 	lds	r24, 0x223E
    4f02:	8b 7f       	andi	r24, 0xFB	; 251
    4f04:	80 93 3e 22 	sts	0x223E, r24
		if (ax.active_axes == 0) {
    4f08:	88 23       	and	r24, r24
    4f0a:	11 f4       	brne	.+4      	; 0x4f10 <__vector_77+0x8c>
			st_execute_move();
    4f0c:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    4f10:	80 91 57 22 	lds	r24, 0x2257
    4f14:	90 91 58 22 	lds	r25, 0x2258
    4f18:	80 93 59 22 	sts	0x2259, r24
    4f1c:	90 93 5a 22 	sts	0x225A, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4f20:	81 e0       	ldi	r24, 0x01	; 1
    4f22:	e0 ea       	ldi	r30, 0xA0	; 160
    4f24:	f6 e0       	ldi	r31, 0x06	; 6
    4f26:	86 83       	std	Z+6, r24	; 0x06
}
    4f28:	ff 91       	pop	r31
    4f2a:	ef 91       	pop	r30
    4f2c:	bf 91       	pop	r27
    4f2e:	af 91       	pop	r26
    4f30:	9f 91       	pop	r25
    4f32:	8f 91       	pop	r24
    4f34:	7f 91       	pop	r23
    4f36:	6f 91       	pop	r22
    4f38:	5f 91       	pop	r21
    4f3a:	4f 91       	pop	r20
    4f3c:	3f 91       	pop	r19
    4f3e:	2f 91       	pop	r18
    4f40:	0f 90       	pop	r0
    4f42:	0b be       	out	0x3b, r0	; 59
    4f44:	0f 90       	pop	r0
    4f46:	0f be       	out	0x3f, r0	; 63
    4f48:	0f 90       	pop	r0
    4f4a:	1f 90       	pop	r1
    4f4c:	18 95       	reti

00004f4e <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4f4e:	1f 92       	push	r1
    4f50:	0f 92       	push	r0
    4f52:	0f b6       	in	r0, 0x3f	; 63
    4f54:	0f 92       	push	r0
    4f56:	0b b6       	in	r0, 0x3b	; 59
    4f58:	0f 92       	push	r0
    4f5a:	11 24       	eor	r1, r1
    4f5c:	2f 93       	push	r18
    4f5e:	3f 93       	push	r19
    4f60:	4f 93       	push	r20
    4f62:	5f 93       	push	r21
    4f64:	6f 93       	push	r22
    4f66:	7f 93       	push	r23
    4f68:	8f 93       	push	r24
    4f6a:	9f 93       	push	r25
    4f6c:	af 93       	push	r26
    4f6e:	bf 93       	push	r27
    4f70:	ef 93       	push	r30
    4f72:	ff 93       	push	r31
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    4f74:	80 91 49 22 	lds	r24, 0x2249
    4f78:	90 91 4a 22 	lds	r25, 0x224A
    4f7c:	01 97       	sbiw	r24, 0x01	; 1
    4f7e:	80 93 49 22 	sts	0x2249, r24
    4f82:	90 93 4a 22 	sts	0x224A, r25
    4f86:	89 2b       	or	r24, r25
    4f88:	d1 f5       	brne	.+116    	; 0x4ffe <__vector_14+0xb0>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    4f8a:	80 91 4c 22 	lds	r24, 0x224C
    4f8e:	88 23       	and	r24, r24
    4f90:	21 f4       	brne	.+8      	; 0x4f9a <__vector_14+0x4c>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    4f92:	81 e0       	ldi	r24, 0x01	; 1
    4f94:	e0 e0       	ldi	r30, 0x00	; 0
    4f96:	f6 e0       	ldi	r31, 0x06	; 6
    4f98:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    4f9a:	80 91 41 22 	lds	r24, 0x2241
    4f9e:	90 91 42 22 	lds	r25, 0x2242
    4fa2:	a0 91 43 22 	lds	r26, 0x2243
    4fa6:	b0 91 44 22 	lds	r27, 0x2244
    4faa:	01 97       	sbiw	r24, 0x01	; 1
    4fac:	a1 09       	sbc	r26, r1
    4fae:	b1 09       	sbc	r27, r1
    4fb0:	80 93 41 22 	sts	0x2241, r24
    4fb4:	90 93 42 22 	sts	0x2242, r25
    4fb8:	a0 93 43 22 	sts	0x2243, r26
    4fbc:	b0 93 44 22 	sts	0x2244, r27
    4fc0:	00 97       	sbiw	r24, 0x00	; 0
    4fc2:	a1 05       	cpc	r26, r1
    4fc4:	b1 05       	cpc	r27, r1
    4fc6:	79 f4       	brne	.+30     	; 0x4fe6 <__vector_14+0x98>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    4fc8:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4fcc:	84 e0       	ldi	r24, 0x04	; 4
    4fce:	e0 e0       	ldi	r30, 0x00	; 0
    4fd0:	f6 e0       	ldi	r31, 0x06	; 6
    4fd2:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    4fd4:	80 91 3e 22 	lds	r24, 0x223E
    4fd8:	87 7f       	andi	r24, 0xF7	; 247
    4fda:	80 93 3e 22 	sts	0x223E, r24
		if (ax.active_axes == 0) {				// if all axes are done
    4fde:	88 23       	and	r24, r24
    4fe0:	11 f4       	brne	.+4      	; 0x4fe6 <__vector_14+0x98>
			st_execute_move();					// ...run the next move
    4fe2:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    4fe6:	80 91 47 22 	lds	r24, 0x2247
    4fea:	90 91 48 22 	lds	r25, 0x2248
    4fee:	80 93 49 22 	sts	0x2249, r24
    4ff2:	90 93 4a 22 	sts	0x224A, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    4ff6:	81 e0       	ldi	r24, 0x01	; 1
    4ff8:	e0 e0       	ldi	r30, 0x00	; 0
    4ffa:	f6 e0       	ldi	r31, 0x06	; 6
    4ffc:	86 83       	std	Z+6, r24	; 0x06
}
    4ffe:	ff 91       	pop	r31
    5000:	ef 91       	pop	r30
    5002:	bf 91       	pop	r27
    5004:	af 91       	pop	r26
    5006:	9f 91       	pop	r25
    5008:	8f 91       	pop	r24
    500a:	7f 91       	pop	r23
    500c:	6f 91       	pop	r22
    500e:	5f 91       	pop	r21
    5010:	4f 91       	pop	r20
    5012:	3f 91       	pop	r19
    5014:	2f 91       	pop	r18
    5016:	0f 90       	pop	r0
    5018:	0b be       	out	0x3b, r0	; 59
    501a:	0f 90       	pop	r0
    501c:	0f be       	out	0x3f, r0	; 63
    501e:	0f 90       	pop	r0
    5020:	1f 90       	pop	r1
    5022:	18 95       	reti

00005024 <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    5024:	e0 ea       	ldi	r30, 0xA0	; 160
    5026:	f0 e0       	ldi	r31, 0x00	; 0
    5028:	82 81       	ldd	r24, Z+2	; 0x02
    502a:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    502c:	98 ed       	ldi	r25, 0xD8	; 216
    502e:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    5030:	82 83       	std	Z+2, r24	; 0x02
}
    5032:	08 95       	ret

00005034 <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    5034:	e0 ea       	ldi	r30, 0xA0	; 160
    5036:	f0 e0       	ldi	r31, 0x00	; 0
    5038:	82 81       	ldd	r24, Z+2	; 0x02
    503a:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    503c:	98 ed       	ldi	r25, 0xD8	; 216
    503e:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    5040:	82 83       	std	Z+2, r24	; 0x02
}
    5042:	08 95       	ret

00005044 <xio_setflags>:
 * xio_set_control_flags()
 */

void xio_setflags(const uint8_t dev, const uint16_t control)
{
	struct xioDEVICE *d = &ds[dev];
    5044:	97 e1       	ldi	r25, 0x17	; 23
    5046:	89 9f       	mul	r24, r25
    5048:	f0 01       	movw	r30, r0
    504a:	11 24       	eor	r1, r1
    504c:	e1 53       	subi	r30, 0x31	; 49
    504e:	fc 4d       	sbci	r31, 0xDC	; 220

	if (control & XIO_RD) {
    5050:	64 ff       	sbrs	r22, 4
    5052:	05 c0       	rjmp	.+10     	; 0x505e <xio_setflags+0x1a>
		d->flags |= XIO_FLAG_RD_bm;
    5054:	80 81       	ld	r24, Z
    5056:	91 81       	ldd	r25, Z+1	; 0x01
    5058:	81 60       	ori	r24, 0x01	; 1
    505a:	80 83       	st	Z, r24
    505c:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_WR) {
    505e:	65 ff       	sbrs	r22, 5
    5060:	05 c0       	rjmp	.+10     	; 0x506c <xio_setflags+0x28>
		d->flags |= XIO_FLAG_WR_bm;
    5062:	80 81       	ld	r24, Z
    5064:	91 81       	ldd	r25, Z+1	; 0x01
    5066:	82 60       	ori	r24, 0x02	; 2
    5068:	80 83       	st	Z, r24
    506a:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_BLOCK) {
    506c:	66 ff       	sbrs	r22, 6
    506e:	05 c0       	rjmp	.+10     	; 0x507a <xio_setflags+0x36>
		d->flags |= XIO_FLAG_BLOCK_bm;
    5070:	80 81       	ld	r24, Z
    5072:	91 81       	ldd	r25, Z+1	; 0x01
    5074:	84 60       	ori	r24, 0x04	; 4
    5076:	80 83       	st	Z, r24
    5078:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOBLOCK) {
    507a:	67 ff       	sbrs	r22, 7
    507c:	05 c0       	rjmp	.+10     	; 0x5088 <xio_setflags+0x44>
		d->flags &= ~XIO_FLAG_BLOCK_bm;
    507e:	80 81       	ld	r24, Z
    5080:	91 81       	ldd	r25, Z+1	; 0x01
    5082:	8b 7f       	andi	r24, 0xFB	; 251
    5084:	80 83       	st	Z, r24
    5086:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_ECHO) {
    5088:	70 ff       	sbrs	r23, 0
    508a:	05 c0       	rjmp	.+10     	; 0x5096 <xio_setflags+0x52>
		d->flags |= XIO_FLAG_ECHO_bm;
    508c:	80 81       	ld	r24, Z
    508e:	91 81       	ldd	r25, Z+1	; 0x01
    5090:	80 61       	ori	r24, 0x10	; 16
    5092:	80 83       	st	Z, r24
    5094:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOECHO) {
    5096:	71 ff       	sbrs	r23, 1
    5098:	05 c0       	rjmp	.+10     	; 0x50a4 <xio_setflags+0x60>
		d->flags &= ~XIO_FLAG_ECHO_bm;
    509a:	80 81       	ld	r24, Z
    509c:	91 81       	ldd	r25, Z+1	; 0x01
    509e:	8f 7e       	andi	r24, 0xEF	; 239
    50a0:	80 83       	st	Z, r24
    50a2:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_CRLF) {
    50a4:	72 ff       	sbrs	r23, 2
    50a6:	05 c0       	rjmp	.+10     	; 0x50b2 <xio_setflags+0x6e>
		d->flags |= XIO_FLAG_CRLF_bm;
    50a8:	80 81       	ld	r24, Z
    50aa:	91 81       	ldd	r25, Z+1	; 0x01
    50ac:	80 62       	ori	r24, 0x20	; 32
    50ae:	80 83       	st	Z, r24
    50b0:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOCRLF) {
    50b2:	73 ff       	sbrs	r23, 3
    50b4:	05 c0       	rjmp	.+10     	; 0x50c0 <xio_setflags+0x7c>
		d->flags &= ~XIO_FLAG_CRLF_bm;
    50b6:	80 81       	ld	r24, Z
    50b8:	91 81       	ldd	r25, Z+1	; 0x01
    50ba:	8f 7d       	andi	r24, 0xDF	; 223
    50bc:	80 83       	st	Z, r24
    50be:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_LINEMODE) {
    50c0:	74 ff       	sbrs	r23, 4
    50c2:	05 c0       	rjmp	.+10     	; 0x50ce <xio_setflags+0x8a>
		d->flags |= XIO_FLAG_LINEMODE_bm;
    50c4:	80 81       	ld	r24, Z
    50c6:	91 81       	ldd	r25, Z+1	; 0x01
    50c8:	80 64       	ori	r24, 0x40	; 64
    50ca:	80 83       	st	Z, r24
    50cc:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOLINEMODE) {
    50ce:	75 ff       	sbrs	r23, 5
    50d0:	05 c0       	rjmp	.+10     	; 0x50dc <xio_setflags+0x98>
		d->flags &= ~XIO_FLAG_LINEMODE_bm;
    50d2:	80 81       	ld	r24, Z
    50d4:	91 81       	ldd	r25, Z+1	; 0x01
    50d6:	8f 7b       	andi	r24, 0xBF	; 191
    50d8:	80 83       	st	Z, r24
    50da:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_SEMICOLONS) {
    50dc:	76 ff       	sbrs	r23, 6
    50de:	05 c0       	rjmp	.+10     	; 0x50ea <xio_setflags+0xa6>
		d->flags |= XIO_FLAG_SEMICOLONS_bm;
    50e0:	80 81       	ld	r24, Z
    50e2:	91 81       	ldd	r25, Z+1	; 0x01
    50e4:	80 68       	ori	r24, 0x80	; 128
    50e6:	80 83       	st	Z, r24
    50e8:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOSEMICOLONS) {
    50ea:	77 ff       	sbrs	r23, 7
    50ec:	05 c0       	rjmp	.+10     	; 0x50f8 <xio_setflags+0xb4>
		d->flags &= ~XIO_FLAG_SEMICOLONS_bm;
    50ee:	80 81       	ld	r24, Z
    50f0:	91 81       	ldd	r25, Z+1	; 0x01
    50f2:	8f 77       	andi	r24, 0x7F	; 127
    50f4:	80 83       	st	Z, r24
    50f6:	91 83       	std	Z+1, r25	; 0x01
    50f8:	08 95       	ret

000050fa <xio_readln>:
 */

int xio_readln(uint8_t dev, char *buf, uint8_t len)
{

	switch (dev) {
    50fa:	81 30       	cpi	r24, 0x01	; 1
    50fc:	61 f0       	breq	.+24     	; 0x5116 <xio_readln+0x1c>
    50fe:	81 30       	cpi	r24, 0x01	; 1
    5100:	28 f0       	brcs	.+10     	; 0x510c <xio_readln+0x12>
    5102:	83 30       	cpi	r24, 0x03	; 3
    5104:	69 f0       	breq	.+26     	; 0x5120 <xio_readln+0x26>
    5106:	21 e1       	ldi	r18, 0x11	; 17
    5108:	30 e0       	ldi	r19, 0x00	; 0
    510a:	0f c0       	rjmp	.+30     	; 0x512a <xio_readln+0x30>
		case (XIO_DEV_RS485): return (xio_readln_rs485(buf, len));
    510c:	cb 01       	movw	r24, r22
    510e:	64 2f       	mov	r22, r20
    5110:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <xio_readln_rs485>
    5114:	09 c0       	rjmp	.+18     	; 0x5128 <xio_readln+0x2e>
		case (XIO_DEV_USB): return (xio_readln_usb(buf, len));
    5116:	cb 01       	movw	r24, r22
    5118:	64 2f       	mov	r22, r20
    511a:	0e 94 5f 31 	call	0x62be	; 0x62be <xio_readln_usb>
    511e:	04 c0       	rjmp	.+8      	; 0x5128 <xio_readln+0x2e>
//		case (XIO_DEV_TTL): return (xio_readln_aux(buf, len));
		case (XIO_DEV_PGM): return (xio_readln_pgm(buf, len));
    5120:	cb 01       	movw	r24, r22
    5122:	64 2f       	mov	r22, r20
    5124:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <xio_readln_pgm>
    5128:	9c 01       	movw	r18, r24
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    512a:	c9 01       	movw	r24, r18
    512c:	08 95       	ret

0000512e <xio_init>:
/*
 *	xio_init() - initialize all active XIO devices
 */

void xio_init(void)
{	
    512e:	4f 92       	push	r4
    5130:	5f 92       	push	r5
    5132:	6f 92       	push	r6
    5134:	7f 92       	push	r7
    5136:	8f 92       	push	r8
    5138:	9f 92       	push	r9
    513a:	af 92       	push	r10
    513c:	cf 92       	push	r12
    513e:	ef 92       	push	r14
    5140:	ff 92       	push	r15
    5142:	0f 93       	push	r16
    5144:	1f 93       	push	r17
	// RS485 device setup (brute force!)
	memset (&ds[XIO_DEV_RS485], 0, sizeof(struct xioDEVICE));	// clear dev struct
    5146:	9f ec       	ldi	r25, 0xCF	; 207
    5148:	49 2e       	mov	r4, r25
    514a:	93 e2       	ldi	r25, 0x23	; 35
    514c:	59 2e       	mov	r5, r25
    514e:	87 e1       	ldi	r24, 0x17	; 23
    5150:	f8 2e       	mov	r15, r24
    5152:	d2 01       	movw	r26, r4
    5154:	ef 2d       	mov	r30, r15
    5156:	1d 92       	st	X+, r1
    5158:	ea 95       	dec	r30
    515a:	e9 f7       	brne	.-6      	; 0x5156 <xio_init+0x28>
	ds[XIO_DEV_RS485].x = &us[XIO_DEV_RS485_OFFSET];			// bind USART struct
    515c:	00 e3       	ldi	r16, 0x30	; 48
    515e:	60 2e       	mov	r6, r16
    5160:	03 e2       	ldi	r16, 0x23	; 35
    5162:	70 2e       	mov	r7, r16
    5164:	60 92 e0 23 	sts	0x23E0, r6
    5168:	70 92 e1 23 	sts	0x23E1, r7
	ds[XIO_DEV_RS485].fdev = &ss[XIO_DEV_RS485];				// bind stdio struct
    516c:	17 e8       	ldi	r17, 0x87	; 135
    516e:	81 2e       	mov	r8, r17
    5170:	14 e2       	ldi	r17, 0x24	; 36
    5172:	91 2e       	mov	r9, r17
    5174:	80 92 e2 23 	sts	0x23E2, r8
    5178:	90 92 e3 23 	sts	0x23E3, r9
	xio_init_usart(XIO_DEV_RS485, RS485_INIT_bm, &RS485_USART, &RS485_PORT, 
    517c:	80 e0       	ldi	r24, 0x00	; 0
    517e:	65 e7       	ldi	r22, 0x75	; 117
    5180:	75 e1       	ldi	r23, 0x15	; 21
    5182:	40 eb       	ldi	r20, 0xB0	; 176
    5184:	58 e0       	ldi	r21, 0x08	; 8
    5186:	20 e4       	ldi	r18, 0x40	; 64
    5188:	36 e0       	ldi	r19, 0x06	; 6
    518a:	00 e4       	ldi	r16, 0x40	; 64
    518c:	b0 eb       	ldi	r27, 0xB0	; 176
    518e:	eb 2e       	mov	r14, r27
    5190:	a0 e3       	ldi	r26, 0x30	; 48
    5192:	ca 2e       	mov	r12, r26
    5194:	f0 e8       	ldi	r31, 0x80	; 128
    5196:	af 2e       	mov	r10, r31
    5198:	0e 94 57 2f 	call	0x5eae	; 0x5eae <xio_init_usart>
		RS485_DIRCLR_bm,RS485_DIRSET_bm,RS485_OUTCLR_bm,RS485_OUTSET_bm);
	fdev_setup_stream(ds[XIO_DEV_RS485].fdev, 
    519c:	49 ef       	ldi	r20, 0xF9	; 249
    519e:	52 e3       	ldi	r21, 0x32	; 50
    51a0:	e0 91 e2 23 	lds	r30, 0x23E2
    51a4:	f0 91 e3 23 	lds	r31, 0x23E3
    51a8:	40 87       	std	Z+8, r20	; 0x08
    51aa:	51 87       	std	Z+9, r21	; 0x09
    51ac:	26 e7       	ldi	r18, 0x76	; 118
    51ae:	33 e3       	ldi	r19, 0x33	; 51
    51b0:	22 87       	std	Z+10, r18	; 0x0a
    51b2:	33 87       	std	Z+11, r19	; 0x0b
    51b4:	13 e0       	ldi	r17, 0x03	; 3
    51b6:	13 83       	std	Z+3, r17	; 0x03
    51b8:	e0 91 e2 23 	lds	r30, 0x23E2
    51bc:	f0 91 e3 23 	lds	r31, 0x23E3
    51c0:	14 86       	std	Z+12, r1	; 0x0c
    51c2:	15 86       	std	Z+13, r1	; 0x0d
		xio_putc_rs485, xio_getc_rs485, _FDEV_SETUP_RW);
	ds[XIO_DEV_RS485].dev_open = &xio_open_rs485;				// function bindings
    51c4:	84 ef       	ldi	r24, 0xF4	; 244
    51c6:	92 e3       	ldi	r25, 0x32	; 50
    51c8:	80 93 d6 23 	sts	0x23D6, r24
    51cc:	90 93 d7 23 	sts	0x23D7, r25
	ds[XIO_DEV_RS485].dev_setflags = &xio_setflags_rs485;
    51d0:	80 eb       	ldi	r24, 0xB0	; 176
    51d2:	94 e3       	ldi	r25, 0x34	; 52
    51d4:	80 93 d8 23 	sts	0x23D8, r24
    51d8:	90 93 d9 23 	sts	0x23D9, r25
	ds[XIO_DEV_RS485].dev_putc = &xio_putc_rs485;
    51dc:	40 93 da 23 	sts	0x23DA, r20
    51e0:	50 93 db 23 	sts	0x23DB, r21
	ds[XIO_DEV_RS485].dev_getc = &xio_getc_rs485;
    51e4:	20 93 dc 23 	sts	0x23DC, r18
    51e8:	30 93 dd 23 	sts	0x23DD, r19
	ds[XIO_DEV_RS485].dev_readln = &xio_readln_rs485;
    51ec:	81 ef       	ldi	r24, 0xF1	; 241
    51ee:	93 e3       	ldi	r25, 0x33	; 51
    51f0:	80 93 de 23 	sts	0x23DE, r24
    51f4:	90 93 df 23 	sts	0x23DF, r25

	// USB device setup
	memset (&ds[XIO_DEV_USB], 0, sizeof(struct xioDEVICE));		// clear dev struct
    51f8:	87 e1       	ldi	r24, 0x17	; 23
    51fa:	90 e0       	ldi	r25, 0x00	; 0
    51fc:	48 0e       	add	r4, r24
    51fe:	59 1e       	adc	r5, r25
    5200:	d2 01       	movw	r26, r4
    5202:	ef 2d       	mov	r30, r15
    5204:	1d 92       	st	X+, r1
    5206:	ea 95       	dec	r30
    5208:	e9 f7       	brne	.-6      	; 0x5204 <xio_init+0xd6>
	ds[XIO_DEV_USB].x = &us[XIO_DEV_USB_OFFSET];				// bind USART struct
    520a:	8f e2       	ldi	r24, 0x2F	; 47
    520c:	90 e0       	ldi	r25, 0x00	; 0
    520e:	68 0e       	add	r6, r24
    5210:	79 1e       	adc	r7, r25
    5212:	60 92 f7 23 	sts	0x23F7, r6
    5216:	70 92 f8 23 	sts	0x23F8, r7
	ds[XIO_DEV_USB].fdev = &ss[XIO_DEV_USB];					// bind stdio struct
    521a:	ae e0       	ldi	r26, 0x0E	; 14
    521c:	b0 e0       	ldi	r27, 0x00	; 0
    521e:	8a 0e       	add	r8, r26
    5220:	9b 1e       	adc	r9, r27
    5222:	80 92 f9 23 	sts	0x23F9, r8
    5226:	90 92 fa 23 	sts	0x23FA, r9
	xio_init_usart(XIO_DEV_USB, USB_INIT_bm, &USB_USART, &USB_PORT, 
    522a:	81 e0       	ldi	r24, 0x01	; 1
    522c:	65 e7       	ldi	r22, 0x75	; 117
    522e:	75 e5       	ldi	r23, 0x55	; 85
    5230:	40 ea       	ldi	r20, 0xA0	; 160
    5232:	58 e0       	ldi	r21, 0x08	; 8
    5234:	20 e4       	ldi	r18, 0x40	; 64
    5236:	36 e0       	ldi	r19, 0x06	; 6
    5238:	05 e0       	ldi	r16, 0x05	; 5
    523a:	ea e0       	ldi	r30, 0x0A	; 10
    523c:	ee 2e       	mov	r14, r30
    523e:	cc 24       	eor	r12, r12
    5240:	9a e0       	ldi	r25, 0x0A	; 10
    5242:	a9 2e       	mov	r10, r25
    5244:	0e 94 57 2f 	call	0x5eae	; 0x5eae <xio_init_usart>
		USB_DIRCLR_bm, USB_DIRSET_bm, USB_OUTCLR_bm, USB_OUTSET_bm);
	fdev_setup_stream(ds[XIO_DEV_USB].fdev, 
    5248:	4c e3       	ldi	r20, 0x3C	; 60
    524a:	50 e3       	ldi	r21, 0x30	; 48
    524c:	e0 91 f9 23 	lds	r30, 0x23F9
    5250:	f0 91 fa 23 	lds	r31, 0x23FA
    5254:	40 87       	std	Z+8, r20	; 0x08
    5256:	51 87       	std	Z+9, r21	; 0x09
    5258:	29 eb       	ldi	r18, 0xB9	; 185
    525a:	30 e3       	ldi	r19, 0x30	; 48
    525c:	22 87       	std	Z+10, r18	; 0x0a
    525e:	33 87       	std	Z+11, r19	; 0x0b
    5260:	13 83       	std	Z+3, r17	; 0x03
    5262:	e0 91 f9 23 	lds	r30, 0x23F9
    5266:	f0 91 fa 23 	lds	r31, 0x23FA
    526a:	14 86       	std	Z+12, r1	; 0x0c
    526c:	15 86       	std	Z+13, r1	; 0x0d
		xio_putc_usb, xio_getc_usb, _FDEV_SETUP_RW);
	ds[XIO_DEV_USB].dev_open = &xio_open_usb;
    526e:	87 e3       	ldi	r24, 0x37	; 55
    5270:	90 e3       	ldi	r25, 0x30	; 48
    5272:	80 93 ed 23 	sts	0x23ED, r24
    5276:	90 93 ee 23 	sts	0x23EE, r25
	ds[XIO_DEV_USB].dev_setflags = &xio_setflags_usb;
    527a:	8e e0       	ldi	r24, 0x0E	; 14
    527c:	92 e3       	ldi	r25, 0x32	; 50
    527e:	80 93 ef 23 	sts	0x23EF, r24
    5282:	90 93 f0 23 	sts	0x23F0, r25
	ds[XIO_DEV_USB].dev_putc = &xio_putc_usb;
    5286:	40 93 f1 23 	sts	0x23F1, r20
    528a:	50 93 f2 23 	sts	0x23F2, r21
	ds[XIO_DEV_USB].dev_getc = &xio_getc_usb;
    528e:	20 93 f3 23 	sts	0x23F3, r18
    5292:	30 93 f4 23 	sts	0x23F4, r19
	ds[XIO_DEV_USB].dev_readln = &xio_readln_usb;
    5296:	8f e5       	ldi	r24, 0x5F	; 95
    5298:	91 e3       	ldi	r25, 0x31	; 49
    529a:	80 93 f5 23 	sts	0x23F5, r24
    529e:	90 93 f6 23 	sts	0x23F6, r25

	// Program memory file device setup
	memset (&ds[XIO_DEV_PGM], 0, sizeof(struct xioDEVICE));		// clear dev struct
    52a2:	e4 e1       	ldi	r30, 0x14	; 20
    52a4:	f4 e2       	ldi	r31, 0x24	; 36
    52a6:	df 01       	movw	r26, r30
    52a8:	1d 92       	st	X+, r1
    52aa:	fa 94       	dec	r15
    52ac:	e9 f7       	brne	.-6      	; 0x52a8 <xio_init+0x17a>
	ds[XIO_DEV_PGM].x = &fs[XIO_DEV_PGM_OFFSET];				// bind FILE struct
    52ae:	8d eb       	ldi	r24, 0xBD	; 189
    52b0:	93 e2       	ldi	r25, 0x23	; 35
    52b2:	80 93 25 24 	sts	0x2425, r24
    52b6:	90 93 26 24 	sts	0x2426, r25
	ds[XIO_DEV_PGM].fdev = &ss[XIO_DEV_PGM];					// bind stdio struct
    52ba:	ec e1       	ldi	r30, 0x1C	; 28
    52bc:	f0 e0       	ldi	r31, 0x00	; 0
    52be:	8e 0e       	add	r8, r30
    52c0:	9f 1e       	adc	r9, r31
    52c2:	80 92 27 24 	sts	0x2427, r8
    52c6:	90 92 28 24 	sts	0x2428, r9
	xio_init_pgm(PGM_INIT_bm);
    52ca:	80 e5       	ldi	r24, 0x50	; 80
    52cc:	95 e1       	ldi	r25, 0x15	; 21
    52ce:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <xio_init_pgm>
	fdev_setup_stream(ds[XIO_DEV_PGM].fdev, 
    52d2:	e0 91 27 24 	lds	r30, 0x2427
    52d6:	f0 91 28 24 	lds	r31, 0x2428
    52da:	49 e6       	ldi	r20, 0x69	; 105
    52dc:	55 e3       	ldi	r21, 0x35	; 53
    52de:	40 87       	std	Z+8, r20	; 0x08
    52e0:	51 87       	std	Z+9, r21	; 0x09
    52e2:	23 e9       	ldi	r18, 0x93	; 147
    52e4:	35 e3       	ldi	r19, 0x35	; 53
    52e6:	22 87       	std	Z+10, r18	; 0x0a
    52e8:	33 87       	std	Z+11, r19	; 0x0b
    52ea:	13 83       	std	Z+3, r17	; 0x03
    52ec:	e0 91 27 24 	lds	r30, 0x2427
    52f0:	f0 91 28 24 	lds	r31, 0x2428
    52f4:	14 86       	std	Z+12, r1	; 0x0c
    52f6:	15 86       	std	Z+13, r1	; 0x0d
		xio_putc_pgm, xio_getc_pgm, _FDEV_SETUP_RW);
	ds[XIO_DEV_PGM].dev_open = &xio_open_pgm;
    52f8:	81 e5       	ldi	r24, 0x51	; 81
    52fa:	95 e3       	ldi	r25, 0x35	; 53
    52fc:	80 93 1b 24 	sts	0x241B, r24
    5300:	90 93 1c 24 	sts	0x241C, r25
	ds[XIO_DEV_PGM].dev_setflags = &xio_setflags_pgm;
    5304:	8f ed       	ldi	r24, 0xDF	; 223
    5306:	95 e3       	ldi	r25, 0x35	; 53
    5308:	80 93 1d 24 	sts	0x241D, r24
    530c:	90 93 1e 24 	sts	0x241E, r25
	ds[XIO_DEV_PGM].dev_putc = &xio_putc_pgm;
    5310:	40 93 1f 24 	sts	0x241F, r20
    5314:	50 93 20 24 	sts	0x2420, r21
	ds[XIO_DEV_PGM].dev_getc = &xio_getc_pgm;
    5318:	20 93 21 24 	sts	0x2421, r18
    531c:	30 93 22 24 	sts	0x2422, r19
	ds[XIO_DEV_PGM].dev_readln = &xio_readln_pgm;
    5320:	8c e6       	ldi	r24, 0x6C	; 108
    5322:	95 e3       	ldi	r25, 0x35	; 53
    5324:	80 93 23 24 	sts	0x2423, r24
    5328:	90 93 24 24 	sts	0x2424, r25

	// setup stdio bindings to default IO device
	stdin = fdev_usb;				// define the console device
    532c:	80 91 f9 23 	lds	r24, 0x23F9
    5330:	90 91 fa 23 	lds	r25, 0x23FA
    5334:	80 93 0e 25 	sts	0x250E, r24
    5338:	90 93 0f 25 	sts	0x250F, r25
	stdout = fdev_usb;				// ...
    533c:	80 93 10 25 	sts	0x2510, r24
    5340:	90 93 11 25 	sts	0x2511, r25
	stderr = fdev_usb;				// ...
    5344:	80 93 12 25 	sts	0x2512, r24
    5348:	90 93 13 25 	sts	0x2513, r25

	// tell the world we are ready!
	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    534c:	0f 92       	push	r0
    534e:	0f 92       	push	r0
    5350:	84 e2       	ldi	r24, 0x24	; 36
    5352:	97 e0       	ldi	r25, 0x07	; 7
    5354:	ad b7       	in	r26, 0x3d	; 61
    5356:	be b7       	in	r27, 0x3e	; 62
    5358:	11 96       	adiw	r26, 0x01	; 1
    535a:	8d 93       	st	X+, r24
    535c:	9c 93       	st	X, r25
    535e:	12 97       	sbiw	r26, 0x02	; 2
    5360:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
    5364:	0f 90       	pop	r0
    5366:	0f 90       	pop	r0
}
    5368:	1f 91       	pop	r17
    536a:	0f 91       	pop	r16
    536c:	ff 90       	pop	r15
    536e:	ef 90       	pop	r14
    5370:	cf 90       	pop	r12
    5372:	af 90       	pop	r10
    5374:	9f 90       	pop	r9
    5376:	8f 90       	pop	r8
    5378:	7f 90       	pop	r7
    537a:	6f 90       	pop	r6
    537c:	5f 90       	pop	r5
    537e:	4f 90       	pop	r4
    5380:	08 95       	ret

00005382 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    5382:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5384:	e0 ec       	ldi	r30, 0xC0	; 192
    5386:	f1 e0       	ldi	r31, 0x01	; 1
    5388:	80 91 cf 01 	lds	r24, 0x01CF
    538c:	87 fd       	sbrc	r24, 7
    538e:	fa cf       	rjmp	.-12     	; 0x5384 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    5390:	26 2f       	mov	r18, r22
    5392:	30 e0       	ldi	r19, 0x00	; 0
    5394:	2f 71       	andi	r18, 0x1F	; 31
    5396:	30 70       	andi	r19, 0x00	; 0
    5398:	89 2f       	mov	r24, r25
    539a:	90 e0       	ldi	r25, 0x00	; 0
    539c:	45 e0       	ldi	r20, 0x05	; 5
    539e:	88 0f       	add	r24, r24
    53a0:	99 1f       	adc	r25, r25
    53a2:	4a 95       	dec	r20
    53a4:	e1 f7       	brne	.-8      	; 0x539e <EEPROM_ReadByte+0x1c>
    53a6:	28 2b       	or	r18, r24
    53a8:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    53aa:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    53ae:	83 2f       	mov	r24, r19
    53b0:	8f 71       	andi	r24, 0x1F	; 31
    53b2:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    53b4:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    53b6:	86 e0       	ldi	r24, 0x06	; 6
    53b8:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    53ba:	ef 93       	push	r30
    53bc:	ff 93       	push	r31
    53be:	0f 93       	push	r16
    53c0:	2f 93       	push	r18
    53c2:	eb ec       	ldi	r30, 0xCB	; 203
    53c4:	f1 e0       	ldi	r31, 0x01	; 1
    53c6:	08 ed       	ldi	r16, 0xD8	; 216
    53c8:	21 e0       	ldi	r18, 0x01	; 1
    53ca:	04 bf       	out	0x34, r16	; 52
    53cc:	20 83       	st	Z, r18
    53ce:	2f 91       	pop	r18
    53d0:	0f 91       	pop	r16
    53d2:	ff 91       	pop	r31
    53d4:	ef 91       	pop	r30

	return NVM.DATA0;
    53d6:	80 91 c4 01 	lds	r24, 0x01C4
}
    53da:	08 95       	ret

000053dc <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    53dc:	68 2f       	mov	r22, r24
    53de:	6f 71       	andi	r22, 0x1F	; 31
    53e0:	55 e0       	ldi	r21, 0x05	; 5
    53e2:	96 95       	lsr	r25
    53e4:	87 95       	ror	r24
    53e6:	5a 95       	dec	r21
    53e8:	e1 f7       	brne	.-8      	; 0x53e2 <eeprom_get_char+0x6>
    53ea:	0e 94 c1 29 	call	0x5382	; 0x5382 <EEPROM_ReadByte>
}
    53ee:	08 95       	ret

000053f0 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    53f0:	8f 92       	push	r8
    53f2:	9f 92       	push	r9
    53f4:	af 92       	push	r10
    53f6:	bf 92       	push	r11
    53f8:	cf 92       	push	r12
    53fa:	df 92       	push	r13
    53fc:	ff 92       	push	r15
    53fe:	0f 93       	push	r16
    5400:	1f 93       	push	r17
    5402:	cf 93       	push	r28
    5404:	df 93       	push	r29
    5406:	4c 01       	movw	r8, r24
    5408:	5b 01       	movw	r10, r22
    540a:	6a 01       	movw	r12, r20
    540c:	8b 01       	movw	r16, r22
    540e:	ea 01       	movw	r28, r20
    5410:	ff 24       	eor	r15, r15
    5412:	18 c0       	rjmp	.+48     	; 0x5444 <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5414:	c8 01       	movw	r24, r16
    5416:	0e 94 ee 29 	call	0x53dc	; 0x53dc <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    541a:	ff 20       	and	r15, r15
    541c:	19 f0       	breq	.+6      	; 0x5424 <memcpy_from_eeprom_with_checksum+0x34>
    541e:	21 e0       	ldi	r18, 0x01	; 1
    5420:	30 e0       	ldi	r19, 0x00	; 0
    5422:	08 c0       	rjmp	.+16     	; 0x5434 <memcpy_from_eeprom_with_checksum+0x44>
    5424:	2f 2d       	mov	r18, r15
    5426:	33 27       	eor	r19, r19
    5428:	27 fd       	sbrc	r18, 7
    542a:	30 95       	com	r19
    542c:	22 27       	eor	r18, r18
    542e:	33 0f       	add	r19, r19
    5430:	22 1f       	adc	r18, r18
    5432:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5434:	0f 5f       	subi	r16, 0xFF	; 255
    5436:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    5438:	f8 2e       	mov	r15, r24
    543a:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    543c:	f4 01       	movw	r30, r8
    543e:	81 93       	st	Z+, r24
    5440:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    5442:	21 97       	sbiw	r28, 0x01	; 1
    5444:	20 97       	sbiw	r28, 0x00	; 0
    5446:	31 f7       	brne	.-52     	; 0x5414 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    5448:	c6 01       	movw	r24, r12
    544a:	8a 0d       	add	r24, r10
    544c:	9b 1d       	adc	r25, r11
    544e:	0e 94 ee 29 	call	0x53dc	; 0x53dc <eeprom_get_char>
    5452:	20 e0       	ldi	r18, 0x00	; 0
    5454:	30 e0       	ldi	r19, 0x00	; 0
    5456:	f8 16       	cp	r15, r24
    5458:	11 f4       	brne	.+4      	; 0x545e <memcpy_from_eeprom_with_checksum+0x6e>
    545a:	21 e0       	ldi	r18, 0x01	; 1
    545c:	30 e0       	ldi	r19, 0x00	; 0
}
    545e:	c9 01       	movw	r24, r18
    5460:	df 91       	pop	r29
    5462:	cf 91       	pop	r28
    5464:	1f 91       	pop	r17
    5466:	0f 91       	pop	r16
    5468:	ff 90       	pop	r15
    546a:	df 90       	pop	r13
    546c:	cf 90       	pop	r12
    546e:	bf 90       	pop	r11
    5470:	af 90       	pop	r10
    5472:	9f 90       	pop	r9
    5474:	8f 90       	pop	r8
    5476:	08 95       	ret

00005478 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5478:	80 91 cf 01 	lds	r24, 0x01CF
    547c:	87 fd       	sbrc	r24, 7
    547e:	fc cf       	rjmp	.-8      	; 0x5478 <EEPROM_WaitForNVM>
}
    5480:	08 95       	ret

00005482 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5482:	80 91 cf 01 	lds	r24, 0x01CF
    5486:	87 fd       	sbrc	r24, 7
    5488:	fc cf       	rjmp	.-8      	; 0x5482 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    548a:	80 91 cf 01 	lds	r24, 0x01CF
    548e:	81 ff       	sbrs	r24, 1
    5490:	12 c0       	rjmp	.+36     	; 0x54b6 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    5492:	86 e3       	ldi	r24, 0x36	; 54
    5494:	e0 ec       	ldi	r30, 0xC0	; 192
    5496:	f1 e0       	ldi	r31, 0x01	; 1
    5498:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    549a:	ef 93       	push	r30
    549c:	ff 93       	push	r31
    549e:	0f 93       	push	r16
    54a0:	2f 93       	push	r18
    54a2:	eb ec       	ldi	r30, 0xCB	; 203
    54a4:	f1 e0       	ldi	r31, 0x01	; 1
    54a6:	08 ed       	ldi	r16, 0xD8	; 216
    54a8:	21 e0       	ldi	r18, 0x01	; 1
    54aa:	04 bf       	out	0x34, r16	; 52
    54ac:	20 83       	st	Z, r18
    54ae:	2f 91       	pop	r18
    54b0:	0f 91       	pop	r16
    54b2:	ff 91       	pop	r31
    54b4:	ef 91       	pop	r30
    54b6:	08 95       	ret

000054b8 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    54b8:	df 92       	push	r13
    54ba:	ef 92       	push	r14
    54bc:	ff 92       	push	r15
    54be:	0f 93       	push	r16
    54c0:	1f 93       	push	r17
    54c2:	e8 2e       	mov	r14, r24
    54c4:	06 2f       	mov	r16, r22
    54c6:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    54c8:	0e 94 41 2a 	call	0x5482	; 0x5482 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    54cc:	e0 ec       	ldi	r30, 0xC0	; 192
    54ce:	f1 e0       	ldi	r31, 0x01	; 1
    54d0:	83 e3       	ldi	r24, 0x33	; 51
    54d2:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    54d4:	10 e0       	ldi	r17, 0x00	; 0
    54d6:	0f 71       	andi	r16, 0x1F	; 31
    54d8:	10 70       	andi	r17, 0x00	; 0
    54da:	ff 24       	eor	r15, r15
    54dc:	75 e0       	ldi	r23, 0x05	; 5
    54de:	ee 0c       	add	r14, r14
    54e0:	ff 1c       	adc	r15, r15
    54e2:	7a 95       	dec	r23
    54e4:	e1 f7       	brne	.-8      	; 0x54de <EEPROM_WriteByte+0x26>
    54e6:	0e 29       	or	r16, r14
    54e8:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    54ea:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    54ec:	81 2f       	mov	r24, r17
    54ee:	8f 71       	andi	r24, 0x1F	; 31
    54f0:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    54f2:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    54f4:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    54f6:	85 e3       	ldi	r24, 0x35	; 53
    54f8:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    54fa:	ef 93       	push	r30
    54fc:	ff 93       	push	r31
    54fe:	0f 93       	push	r16
    5500:	2f 93       	push	r18
    5502:	eb ec       	ldi	r30, 0xCB	; 203
    5504:	f1 e0       	ldi	r31, 0x01	; 1
    5506:	08 ed       	ldi	r16, 0xD8	; 216
    5508:	21 e0       	ldi	r18, 0x01	; 1
    550a:	04 bf       	out	0x34, r16	; 52
    550c:	20 83       	st	Z, r18
    550e:	2f 91       	pop	r18
    5510:	0f 91       	pop	r16
    5512:	ff 91       	pop	r31
    5514:	ef 91       	pop	r30
}
    5516:	1f 91       	pop	r17
    5518:	0f 91       	pop	r16
    551a:	ff 90       	pop	r15
    551c:	ef 90       	pop	r14
    551e:	df 90       	pop	r13
    5520:	08 95       	ret

00005522 <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    5522:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    5524:	68 2f       	mov	r22, r24
    5526:	6f 71       	andi	r22, 0x1F	; 31
    5528:	e5 e0       	ldi	r30, 0x05	; 5
    552a:	96 95       	lsr	r25
    552c:	87 95       	ror	r24
    552e:	ea 95       	dec	r30
    5530:	e1 f7       	brne	.-8      	; 0x552a <eeprom_put_char+0x8>
    5532:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <EEPROM_WriteByte>
}
    5536:	08 95       	ret

00005538 <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    5538:	8f 92       	push	r8
    553a:	9f 92       	push	r9
    553c:	af 92       	push	r10
    553e:	bf 92       	push	r11
    5540:	cf 92       	push	r12
    5542:	df 92       	push	r13
    5544:	ef 92       	push	r14
    5546:	ff 92       	push	r15
    5548:	0f 93       	push	r16
    554a:	df 93       	push	r29
    554c:	cf 93       	push	r28
    554e:	0f 92       	push	r0
    5550:	0f 92       	push	r0
    5552:	cd b7       	in	r28, 0x3d	; 61
    5554:	de b7       	in	r29, 0x3e	; 62
    5556:	5c 01       	movw	r10, r24
    5558:	6b 01       	movw	r12, r22
    555a:	7a 01       	movw	r14, r20
    555c:	4a 01       	movw	r8, r20
    555e:	00 e0       	ldi	r16, 0x00	; 0
    5560:	1e c0       	rjmp	.+60     	; 0x559e <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    5562:	00 23       	and	r16, r16
    5564:	19 f0       	breq	.+6      	; 0x556c <memcpy_to_eeprom_with_checksum+0x34>
    5566:	21 e0       	ldi	r18, 0x01	; 1
    5568:	30 e0       	ldi	r19, 0x00	; 0
    556a:	08 c0       	rjmp	.+16     	; 0x557c <memcpy_to_eeprom_with_checksum+0x44>
    556c:	20 2f       	mov	r18, r16
    556e:	33 27       	eor	r19, r19
    5570:	27 fd       	sbrc	r18, 7
    5572:	30 95       	com	r19
    5574:	22 27       	eor	r18, r18
    5576:	33 0f       	add	r19, r19
    5578:	22 1f       	adc	r18, r18
    557a:	33 27       	eor	r19, r19
    checksum += *source;
    557c:	f6 01       	movw	r30, r12
    557e:	61 91       	ld	r22, Z+
    5580:	6f 01       	movw	r12, r30
    5582:	06 2f       	mov	r16, r22
    5584:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    5586:	9c 01       	movw	r18, r24
    5588:	2f 5f       	subi	r18, 0xFF	; 255
    558a:	3f 4f       	sbci	r19, 0xFF	; 255
    558c:	29 83       	std	Y+1, r18	; 0x01
    558e:	3a 83       	std	Y+2, r19	; 0x02
    5590:	0e 94 91 2a 	call	0x5522	; 0x5522 <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    5594:	08 94       	sec
    5596:	81 08       	sbc	r8, r1
    5598:	91 08       	sbc	r9, r1
    559a:	89 81       	ldd	r24, Y+1	; 0x01
    559c:	9a 81       	ldd	r25, Y+2	; 0x02
    559e:	81 14       	cp	r8, r1
    55a0:	91 04       	cpc	r9, r1
    55a2:	f9 f6       	brne	.-66     	; 0x5562 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    55a4:	c7 01       	movw	r24, r14
    55a6:	8a 0d       	add	r24, r10
    55a8:	9b 1d       	adc	r25, r11
    55aa:	60 2f       	mov	r22, r16
    55ac:	0e 94 91 2a 	call	0x5522	; 0x5522 <eeprom_put_char>
}
    55b0:	0f 90       	pop	r0
    55b2:	0f 90       	pop	r0
    55b4:	cf 91       	pop	r28
    55b6:	df 91       	pop	r29
    55b8:	0f 91       	pop	r16
    55ba:	ff 90       	pop	r15
    55bc:	ef 90       	pop	r14
    55be:	df 90       	pop	r13
    55c0:	cf 90       	pop	r12
    55c2:	bf 90       	pop	r11
    55c4:	af 90       	pop	r10
    55c6:	9f 90       	pop	r9
    55c8:	8f 90       	pop	r8
    55ca:	08 95       	ret

000055cc <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    55cc:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55ce:	e0 ec       	ldi	r30, 0xC0	; 192
    55d0:	f1 e0       	ldi	r31, 0x01	; 1
    55d2:	80 91 cf 01 	lds	r24, 0x01CF
    55d6:	87 fd       	sbrc	r24, 7
    55d8:	fa cf       	rjmp	.-12     	; 0x55ce <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    55da:	83 e3       	ldi	r24, 0x33	; 51
    55dc:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    55de:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    55e2:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    55e4:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    55e6:	64 83       	std	Z+4, r22	; 0x04
}
    55e8:	08 95       	ret

000055ea <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    55ea:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55ec:	e0 ec       	ldi	r30, 0xC0	; 192
    55ee:	f1 e0       	ldi	r31, 0x01	; 1
    55f0:	80 91 cf 01 	lds	r24, 0x01CF
    55f4:	87 fd       	sbrc	r24, 7
    55f6:	fa cf       	rjmp	.-12     	; 0x55ec <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    55f8:	83 e3       	ldi	r24, 0x33	; 51
    55fa:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    55fc:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    55fe:	12 82       	std	Z+2, r1	; 0x02
    5600:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    5602:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    5606:	8d 91       	ld	r24, X+
    5608:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    560a:	9f 5f       	subi	r25, 0xFF	; 255
    560c:	90 32       	cpi	r25, 0x20	; 32
    560e:	c9 f7       	brne	.-14     	; 0x5602 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    5610:	08 95       	ret

00005612 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    5612:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5614:	e0 ec       	ldi	r30, 0xC0	; 192
    5616:	f1 e0       	ldi	r31, 0x01	; 1
    5618:	80 91 cf 01 	lds	r24, 0x01CF
    561c:	87 fd       	sbrc	r24, 7
    561e:	fa cf       	rjmp	.-12     	; 0x5614 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5620:	89 2f       	mov	r24, r25
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	a5 e0       	ldi	r26, 0x05	; 5
    5626:	88 0f       	add	r24, r24
    5628:	99 1f       	adc	r25, r25
    562a:	aa 95       	dec	r26
    562c:	e1 f7       	brne	.-8      	; 0x5626 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    562e:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5632:	89 2f       	mov	r24, r25
    5634:	8f 71       	andi	r24, 0x1F	; 31
    5636:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5638:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    563a:	85 e3       	ldi	r24, 0x35	; 53
    563c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    563e:	ef 93       	push	r30
    5640:	ff 93       	push	r31
    5642:	0f 93       	push	r16
    5644:	2f 93       	push	r18
    5646:	eb ec       	ldi	r30, 0xCB	; 203
    5648:	f1 e0       	ldi	r31, 0x01	; 1
    564a:	08 ed       	ldi	r16, 0xD8	; 216
    564c:	21 e0       	ldi	r18, 0x01	; 1
    564e:	04 bf       	out	0x34, r16	; 52
    5650:	20 83       	st	Z, r18
    5652:	2f 91       	pop	r18
    5654:	0f 91       	pop	r16
    5656:	ff 91       	pop	r31
    5658:	ef 91       	pop	r30
}
    565a:	08 95       	ret

0000565c <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    565c:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    565e:	e0 ec       	ldi	r30, 0xC0	; 192
    5660:	f1 e0       	ldi	r31, 0x01	; 1
    5662:	80 91 cf 01 	lds	r24, 0x01CF
    5666:	87 fd       	sbrc	r24, 7
    5668:	fa cf       	rjmp	.-12     	; 0x565e <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    566a:	89 2f       	mov	r24, r25
    566c:	90 e0       	ldi	r25, 0x00	; 0
    566e:	b5 e0       	ldi	r27, 0x05	; 5
    5670:	88 0f       	add	r24, r24
    5672:	99 1f       	adc	r25, r25
    5674:	ba 95       	dec	r27
    5676:	e1 f7       	brne	.-8      	; 0x5670 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5678:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    567c:	89 2f       	mov	r24, r25
    567e:	8f 71       	andi	r24, 0x1F	; 31
    5680:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5682:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    5684:	82 e3       	ldi	r24, 0x32	; 50
    5686:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5688:	ef 93       	push	r30
    568a:	ff 93       	push	r31
    568c:	0f 93       	push	r16
    568e:	2f 93       	push	r18
    5690:	eb ec       	ldi	r30, 0xCB	; 203
    5692:	f1 e0       	ldi	r31, 0x01	; 1
    5694:	08 ed       	ldi	r16, 0xD8	; 216
    5696:	21 e0       	ldi	r18, 0x01	; 1
    5698:	04 bf       	out	0x34, r16	; 52
    569a:	20 83       	st	Z, r18
    569c:	2f 91       	pop	r18
    569e:	0f 91       	pop	r16
    56a0:	ff 91       	pop	r31
    56a2:	ef 91       	pop	r30
}
    56a4:	08 95       	ret

000056a6 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    56a6:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    56a8:	e0 ec       	ldi	r30, 0xC0	; 192
    56aa:	f1 e0       	ldi	r31, 0x01	; 1
    56ac:	80 91 cf 01 	lds	r24, 0x01CF
    56b0:	87 fd       	sbrc	r24, 7
    56b2:	fa cf       	rjmp	.-12     	; 0x56a8 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    56b4:	89 2f       	mov	r24, r25
    56b6:	90 e0       	ldi	r25, 0x00	; 0
    56b8:	25 e0       	ldi	r18, 0x05	; 5
    56ba:	88 0f       	add	r24, r24
    56bc:	99 1f       	adc	r25, r25
    56be:	2a 95       	dec	r18
    56c0:	e1 f7       	brne	.-8      	; 0x56ba <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    56c2:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    56c6:	89 2f       	mov	r24, r25
    56c8:	8f 71       	andi	r24, 0x1F	; 31
    56ca:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    56cc:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    56ce:	84 e3       	ldi	r24, 0x34	; 52
    56d0:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    56d2:	ef 93       	push	r30
    56d4:	ff 93       	push	r31
    56d6:	0f 93       	push	r16
    56d8:	2f 93       	push	r18
    56da:	eb ec       	ldi	r30, 0xCB	; 203
    56dc:	f1 e0       	ldi	r31, 0x01	; 1
    56de:	08 ed       	ldi	r16, 0xD8	; 216
    56e0:	21 e0       	ldi	r18, 0x01	; 1
    56e2:	04 bf       	out	0x34, r16	; 52
    56e4:	20 83       	st	Z, r18
    56e6:	2f 91       	pop	r18
    56e8:	0f 91       	pop	r16
    56ea:	ff 91       	pop	r31
    56ec:	ef 91       	pop	r30
}
    56ee:	08 95       	ret

000056f0 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    56f0:	80 91 cf 01 	lds	r24, 0x01CF
    56f4:	87 fd       	sbrc	r24, 7
    56f6:	fc cf       	rjmp	.-8      	; 0x56f0 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    56f8:	80 e3       	ldi	r24, 0x30	; 48
    56fa:	e0 ec       	ldi	r30, 0xC0	; 192
    56fc:	f1 e0       	ldi	r31, 0x01	; 1
    56fe:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5700:	ef 93       	push	r30
    5702:	ff 93       	push	r31
    5704:	0f 93       	push	r16
    5706:	2f 93       	push	r18
    5708:	eb ec       	ldi	r30, 0xCB	; 203
    570a:	f1 e0       	ldi	r31, 0x01	; 1
    570c:	08 ed       	ldi	r16, 0xD8	; 216
    570e:	21 e0       	ldi	r18, 0x01	; 1
    5710:	04 bf       	out	0x34, r16	; 52
    5712:	20 83       	st	Z, r18
    5714:	2f 91       	pop	r18
    5716:	0f 91       	pop	r16
    5718:	ff 91       	pop	r31
    571a:	ef 91       	pop	r30
}
    571c:	08 95       	ret

0000571e <tg_reset_source>:
 * tg_reset_source()  Reset source to default input device
 */

void tg_reset_source()
{
	_tg_set_source(tg.default_src);
    571e:	80 91 8c 21 	lds	r24, 0x218C
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    5722:	80 93 8b 21 	sts	0x218B, r24
	if (tg.src == XIO_DEV_PGM) {
    5726:	83 30       	cpi	r24, 0x03	; 3
    5728:	21 f4       	brne	.+8      	; 0x5732 <tg_reset_source+0x14>
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    572a:	80 91 88 21 	lds	r24, 0x2188
    572e:	8e 7f       	andi	r24, 0xFE	; 254
    5730:	03 c0       	rjmp	.+6      	; 0x5738 <tg_reset_source+0x1a>
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    5732:	80 91 88 21 	lds	r24, 0x2188
    5736:	81 60       	ori	r24, 0x01	; 1
    5738:	80 93 88 21 	sts	0x2188, r24
    573c:	08 95       	ret

0000573e <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    573e:	fc 01       	movw	r30, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    5740:	80 91 8a 21 	lds	r24, 0x218A
    5744:	88 23       	and	r24, r24
    5746:	a1 f5       	brne	.+104    	; 0x57b0 <tg_parser+0x72>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    5748:	90 81       	ld	r25, Z
    574a:	89 2f       	mov	r24, r25
    574c:	81 56       	subi	r24, 0x61	; 97
    574e:	8a 31       	cpi	r24, 0x1A	; 26
    5750:	10 f4       	brcc	.+4      	; 0x5756 <tg_parser+0x18>
			buf[0] = buf[0]-'a'+'A';
    5752:	90 52       	subi	r25, 0x20	; 32
    5754:	90 83       	st	Z, r25
		}
		switch (buf[0]) {
    5756:	80 81       	ld	r24, Z
    5758:	86 34       	cpi	r24, 0x46	; 70
    575a:	b1 f0       	breq	.+44     	; 0x5788 <tg_parser+0x4a>
    575c:	87 34       	cpi	r24, 0x47	; 71
    575e:	38 f4       	brcc	.+14     	; 0x576e <tg_parser+0x30>
    5760:	83 34       	cpi	r24, 0x43	; 67
    5762:	61 f0       	breq	.+24     	; 0x577c <tg_parser+0x3e>
    5764:	84 34       	cpi	r24, 0x44	; 68
    5766:	71 f0       	breq	.+28     	; 0x5784 <tg_parser+0x46>
    5768:	8f 33       	cpi	r24, 0x3F	; 63
    576a:	01 f5       	brne	.+64     	; 0x57ac <tg_parser+0x6e>
    576c:	07 c0       	rjmp	.+14     	; 0x577c <tg_parser+0x3e>
    576e:	87 34       	cpi	r24, 0x47	; 71
    5770:	19 f0       	breq	.+6      	; 0x5778 <tg_parser+0x3a>
    5772:	8d 54       	subi	r24, 0x4D	; 77
    5774:	82 30       	cpi	r24, 0x02	; 2
    5776:	d0 f4       	brcc	.+52     	; 0x57ac <tg_parser+0x6e>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5778:	82 e0       	ldi	r24, 0x02	; 2
    577a:	01 c0       	rjmp	.+2      	; 0x577e <tg_parser+0x40>
	if (tg.mode == TG_CONTROL_MODE) {
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
			buf[0] = buf[0]-'a'+'A';
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    577c:	81 e0       	ldi	r24, 0x01	; 1
    577e:	80 93 8a 21 	sts	0x218A, r24
    5782:	16 c0       	rjmp	.+44     	; 0x57b0 <tg_parser+0x72>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5784:	83 e0       	ldi	r24, 0x03	; 3
    5786:	fb cf       	rjmp	.-10     	; 0x577e <tg_parser+0x40>
//	xio_open_pgm(PGMFILE(&square_circle_test100));
//	xio_open_pgm(PGMFILE(&spiral_test50a));
//	xio_open_pgm(PGMFILE(&spiral_test5));
//	xio_open_pgm(PGMFILE(&dwell_test2));

	xio_open_pgm(PGMFILE(&contraptor_circle)); 	// contraptor circle test
    5788:	88 e8       	ldi	r24, 0x88	; 136
    578a:	95 e1       	ldi	r25, 0x15	; 21
    578c:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <xio_open_pgm>
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    5790:	83 e0       	ldi	r24, 0x03	; 3
    5792:	80 93 8b 21 	sts	0x218B, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    5796:	80 91 88 21 	lds	r24, 0x2188
    579a:	8e 7f       	andi	r24, 0xFE	; 254
    579c:	80 93 88 21 	sts	0x2188, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    57a0:	82 e0       	ldi	r24, 0x02	; 2
    57a2:	80 93 8a 21 	sts	0x218A, r24
    57a6:	20 e0       	ldi	r18, 0x00	; 0
    57a8:	30 e0       	ldi	r19, 0x00	; 0
    57aa:	1d c0       	rjmp	.+58     	; 0x57e6 <tg_parser+0xa8>
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
			case 'C': case '?': _tg_set_mode(TG_CONFIG_MODE); break;
			case 'D': _tg_set_mode(TG_DIRECT_DRIVE_MODE); break;
			case 'F': return (_tg_test_file());
    57ac:	10 92 8a 21 	sts	0x218A, r1
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    57b0:	10 92 89 21 	sts	0x2189, r1
	switch (tg.mode) {
    57b4:	80 91 8a 21 	lds	r24, 0x218A
    57b8:	82 30       	cpi	r24, 0x02	; 2
    57ba:	41 f0       	breq	.+16     	; 0x57cc <tg_parser+0x8e>
    57bc:	83 30       	cpi	r24, 0x03	; 3
    57be:	51 f0       	breq	.+20     	; 0x57d4 <tg_parser+0x96>
    57c0:	81 30       	cpi	r24, 0x01	; 1
    57c2:	69 f4       	brne	.+26     	; 0x57de <tg_parser+0xa0>
		case TG_CONFIG_MODE: tg.status = cfg_parse(buf); break;
    57c4:	cf 01       	movw	r24, r30
    57c6:	0e 94 82 19 	call	0x3304	; 0x3304 <cfg_parse>
    57ca:	07 c0       	rjmp	.+14     	; 0x57da <tg_parser+0x9c>
		case TG_GCODE_MODE: tg.status = gc_gcode_parser(buf); break;
    57cc:	cf 01       	movw	r24, r30
    57ce:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <gc_gcode_parser>
    57d2:	03 c0       	rjmp	.+6      	; 0x57da <tg_parser+0x9c>
		case TG_DIRECT_DRIVE_MODE: tg.status = dd_parser(buf); break;
    57d4:	cf 01       	movw	r24, r30
    57d6:	0e 94 84 2c 	call	0x5908	; 0x5908 <dd_parser>
    57da:	80 93 89 21 	sts	0x2189, r24
	}
	return (tg.status);
    57de:	80 91 89 21 	lds	r24, 0x2189
    57e2:	28 2f       	mov	r18, r24
    57e4:	30 e0       	ldi	r19, 0x00	; 0
}
    57e6:	c9 01       	movw	r24, r18
    57e8:	08 95       	ret

000057ea <tg_controller>:
 */

void tg_controller()
{
	// top priority tasks
	st_execute_move();
    57ea:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <st_execute_move>

	// medium priority tasks
	if ((tg.status = mc_line_continue()) == TG_EAGAIN) {	// line generator
    57ee:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <mc_line_continue>
    57f2:	80 93 89 21 	sts	0x2189, r24
    57f6:	81 30       	cpi	r24, 0x01	; 1
    57f8:	09 f4       	brne	.+2      	; 0x57fc <tg_controller+0x12>
    57fa:	5f c0       	rjmp	.+190    	; 0x58ba <tg_controller+0xd0>
		return;
	}
	if ((tg.status = mc_arc_continue()) == TG_EAGAIN) {	 	// arc generator 
    57fc:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <mc_arc_continue>
    5800:	80 93 89 21 	sts	0x2189, r24
    5804:	81 30       	cpi	r24, 0x01	; 1
    5806:	09 f4       	brne	.+2      	; 0x580a <tg_controller+0x20>
    5808:	58 c0       	rjmp	.+176    	; 0x58ba <tg_controller+0xd0>
 */

static int _tg_read_next_line()
{
	// read input line or return if not a completed line
	if ((tg.status = xio_readln(tg.src, tg.buf, tg.len)) == TG_OK) {
    580a:	80 91 8b 21 	lds	r24, 0x218B
    580e:	6f e8       	ldi	r22, 0x8F	; 143
    5810:	71 e2       	ldi	r23, 0x21	; 33
    5812:	40 91 8e 21 	lds	r20, 0x218E
    5816:	0e 94 7d 28 	call	0x50fa	; 0x50fa <xio_readln>
    581a:	80 93 89 21 	sts	0x2189, r24
    581e:	88 23       	and	r24, r24
    5820:	31 f4       	brne	.+12     	; 0x582e <tg_controller+0x44>
		tg.status = tg_parser(tg.buf);				// dispatch to parser
    5822:	8f e8       	ldi	r24, 0x8F	; 143
    5824:	91 e2       	ldi	r25, 0x21	; 33
    5826:	0e 94 9f 2b 	call	0x573e	; 0x573e <tg_parser>
    582a:	80 93 89 21 	sts	0x2189, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    582e:	80 91 89 21 	lds	r24, 0x2189
    5832:	83 30       	cpi	r24, 0x03	; 3
    5834:	18 f4       	brcc	.+6      	; 0x583c <tg_controller+0x52>
    5836:	81 30       	cpi	r24, 0x01	; 1
    5838:	c8 f4       	brcc	.+50     	; 0x586c <tg_controller+0x82>
    583a:	16 c0       	rjmp	.+44     	; 0x5868 <tg_controller+0x7e>
    583c:	83 30       	cpi	r24, 0x03	; 3
    583e:	19 f0       	breq	.+6      	; 0x5846 <tg_controller+0x5c>
    5840:	85 30       	cpi	r24, 0x05	; 5
    5842:	91 f4       	brne	.+36     	; 0x5868 <tg_controller+0x7e>
    5844:	03 c0       	rjmp	.+6      	; 0x584c <tg_controller+0x62>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5846:	10 92 8a 21 	sts	0x218A, r1
    584a:	0e c0       	rjmp	.+28     	; 0x5868 <tg_controller+0x7e>
			_tg_set_mode(TG_CONTROL_MODE);
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
    584c:	0f 92       	push	r0
    584e:	0f 92       	push	r0
    5850:	82 ea       	ldi	r24, 0xA2	; 162
    5852:	99 e1       	ldi	r25, 0x19	; 25
    5854:	ed b7       	in	r30, 0x3d	; 61
    5856:	fe b7       	in	r31, 0x3e	; 62
    5858:	81 83       	std	Z+1, r24	; 0x01
    585a:	92 83       	std	Z+2, r25	; 0x02
    585c:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
			tg_reset_source();						// reset to default src
    5860:	0f 90       	pop	r0
    5862:	0f 90       	pop	r0
    5864:	0e 94 8f 2b 	call	0x571e	; 0x571e <tg_reset_source>
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_READY_UNPROMPTED;			// traps various error returns
    5868:	10 92 87 21 	sts	0x2187, r1
	if ((tg.status = mc_arc_continue()) == TG_EAGAIN) {	 	// arc generator 
		return;
	}

	// low priority tasks
	if ((tg.status = _tg_read_next_line()) == TG_EAGAIN) {	// input line
    586c:	10 92 89 21 	sts	0x2189, r1
	tgModeStringDirect
};

void _tg_prompt()
{
	if (tg.state == TG_READY_UNPROMPTED) {
    5870:	80 91 87 21 	lds	r24, 0x2187
    5874:	88 23       	and	r24, r24
    5876:	09 f5       	brne	.+66     	; 0x58ba <tg_controller+0xd0>
		if (tg.flags && TG_FLAG_PROMPTS_bm) {
    5878:	80 91 88 21 	lds	r24, 0x2188
    587c:	88 23       	and	r24, r24
    587e:	d1 f0       	breq	.+52     	; 0x58b4 <tg_controller+0xca>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5880:	80 91 8a 21 	lds	r24, 0x218A
    5884:	e8 2f       	mov	r30, r24
    5886:	f0 e0       	ldi	r31, 0x00	; 0
    5888:	ee 0f       	add	r30, r30
    588a:	ff 1f       	adc	r31, r31
    588c:	e6 56       	subi	r30, 0x66	; 102
    588e:	f6 4e       	sbci	r31, 0xE6	; 230
    5890:	25 91       	lpm	r18, Z+
    5892:	34 91       	lpm	r19, Z+
    5894:	00 d0       	rcall	.+0      	; 0x5896 <tg_controller+0xac>
    5896:	0f 92       	push	r0
    5898:	87 eb       	ldi	r24, 0xB7	; 183
    589a:	99 e1       	ldi	r25, 0x19	; 25
    589c:	ed b7       	in	r30, 0x3d	; 61
    589e:	fe b7       	in	r31, 0x3e	; 62
    58a0:	81 83       	std	Z+1, r24	; 0x01
    58a2:	92 83       	std	Z+2, r25	; 0x02
    58a4:	23 83       	std	Z+3, r18	; 0x03
    58a6:	34 83       	std	Z+4, r19	; 0x04
    58a8:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
    58ac:	0f 90       	pop	r0
    58ae:	0f 90       	pop	r0
    58b0:	0f 90       	pop	r0
    58b2:	0f 90       	pop	r0
		}
		tg.state = TG_READY_PROMPTED;
    58b4:	81 e0       	ldi	r24, 0x01	; 1
    58b6:	80 93 87 21 	sts	0x2187, r24
    58ba:	08 95       	ret

000058bc <tg_init>:
 */

void tg_init() 
{
	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
    58bc:	81 e0       	ldi	r24, 0x01	; 1
    58be:	80 93 8c 21 	sts	0x218C, r24
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    58c2:	ec e8       	ldi	r30, 0x8C	; 140
    58c4:	f1 e2       	ldi	r31, 0x21	; 33
    58c6:	80 93 8b 21 	sts	0x218B, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    58ca:	34 97       	sbiw	r30, 0x04	; 4
    58cc:	80 81       	ld	r24, Z
    58ce:	81 60       	ori	r24, 0x01	; 1
    58d0:	80 83       	st	Z, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    58d2:	10 92 8a 21 	sts	0x218A, r1
{
	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
	_tg_set_source(tg.default_src);			// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
	tg.state = TG_READY_UNPROMPTED;
    58d6:	10 92 87 21 	sts	0x2187, r1
	tg.len = sizeof(tg.buf);
    58da:	80 e5       	ldi	r24, 0x50	; 80
    58dc:	80 93 8e 21 	sts	0x218E, r24

	// version string
	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    58e0:	00 d0       	rcall	.+0      	; 0x58e2 <tg_init+0x26>
    58e2:	0f 92       	push	r0
    58e4:	8f ec       	ldi	r24, 0xCF	; 207
    58e6:	99 e1       	ldi	r25, 0x19	; 25
    58e8:	ed b7       	in	r30, 0x3d	; 61
    58ea:	fe b7       	in	r31, 0x3e	; 62
    58ec:	81 83       	std	Z+1, r24	; 0x01
    58ee:	92 83       	std	Z+2, r25	; 0x02
    58f0:	85 ec       	ldi	r24, 0xC5	; 197
    58f2:	99 e1       	ldi	r25, 0x19	; 25
    58f4:	83 83       	std	Z+3, r24	; 0x03
    58f6:	94 83       	std	Z+4, r25	; 0x04
    58f8:	0e 94 bb 47 	call	0x8f76	; 0x8f76 <printf_P>
    58fc:	0f 90       	pop	r0
    58fe:	0f 90       	pop	r0
    5900:	0f 90       	pop	r0
    5902:	0f 90       	pop	r0
}
    5904:	08 95       	ret

00005906 <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    5906:	08 95       	ret

00005908 <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    5908:	80 e0       	ldi	r24, 0x00	; 0
    590a:	90 e0       	ldi	r25, 0x00	; 0
    590c:	08 95       	ret

0000590e <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    590e:	10 92 df 21 	sts	0x21DF, r1
	mv.move_buffer_tail = 0;
    5912:	10 92 e0 21 	sts	0x21E0, r1
}
    5916:	08 95       	ret

00005918 <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    5918:	90 91 df 21 	lds	r25, 0x21DF
    591c:	80 91 e0 21 	lds	r24, 0x21E0
    5920:	98 17       	cp	r25, r24
    5922:	19 f4       	brne	.+6      	; 0x592a <mv_dequeue_move_buffer+0x12>
    5924:	20 e0       	ldi	r18, 0x00	; 0
    5926:	30 e0       	ldi	r19, 0x00	; 0
    5928:	17 c0       	rjmp	.+46     	; 0x5958 <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    592a:	90 91 e0 21 	lds	r25, 0x21E0
    592e:	8e e1       	ldi	r24, 0x1E	; 30
    5930:	98 9f       	mul	r25, r24
    5932:	90 01       	movw	r18, r0
    5934:	11 24       	eor	r1, r1
    5936:	2d 51       	subi	r18, 0x1D	; 29
    5938:	3e 4d       	sbci	r19, 0xDE	; 222
    593a:	20 93 e1 21 	sts	0x21E1, r18
    593e:	30 93 e2 21 	sts	0x21E2, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    5942:	80 91 e0 21 	lds	r24, 0x21E0
    5946:	8f 5f       	subi	r24, 0xFF	; 255
    5948:	80 93 e0 21 	sts	0x21E0, r24
    594c:	80 91 e0 21 	lds	r24, 0x21E0
    5950:	83 30       	cpi	r24, 0x03	; 3
    5952:	10 f0       	brcs	.+4      	; 0x5958 <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    5954:	10 92 e0 21 	sts	0x21E0, r1
	}
	return (mv.p); 
}
    5958:	c9 01       	movw	r24, r18
    595a:	08 95       	ret

0000595c <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    595c:	90 91 df 21 	lds	r25, 0x21DF
    5960:	9f 5f       	subi	r25, 0xFF	; 255
    5962:	93 30       	cpi	r25, 0x03	; 3
    5964:	08 f0       	brcs	.+2      	; 0x5968 <mv_test_move_buffer_full+0xc>
    5966:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    5968:	80 91 e0 21 	lds	r24, 0x21E0
    596c:	20 e0       	ldi	r18, 0x00	; 0
    596e:	89 17       	cp	r24, r25
    5970:	09 f4       	brne	.+2      	; 0x5974 <mv_test_move_buffer_full+0x18>
    5972:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    5974:	82 2f       	mov	r24, r18
    5976:	08 95       	ret

00005978 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    5978:	0b c0       	rjmp	.+22     	; 0x5990 <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    597a:	80 91 48 00 	lds	r24, 0x0048
    597e:	81 60       	ori	r24, 0x01	; 1
    5980:	80 93 48 00 	sts	0x0048, r24
    5984:	88 95       	sleep
    5986:	80 91 48 00 	lds	r24, 0x0048
    598a:	8e 7f       	andi	r24, 0xFE	; 254
    598c:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    5990:	90 91 e0 21 	lds	r25, 0x21E0
    5994:	80 91 df 21 	lds	r24, 0x21DF
    5998:	98 17       	cp	r25, r24
    599a:	79 f7       	brne	.-34     	; 0x597a <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    599c:	08 95       	ret

0000599e <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    599e:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    59a0:	80 91 df 21 	lds	r24, 0x21DF
    59a4:	80 93 e0 21 	sts	0x21E0, r24
	mv.p = NULL;
    59a8:	10 92 e1 21 	sts	0x21E1, r1
    59ac:	10 92 e2 21 	sts	0x21E2, r1
	sei();
    59b0:	78 94       	sei
}
    59b2:	08 95       	ret

000059b4 <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    59b4:	2f 92       	push	r2
    59b6:	3f 92       	push	r3
    59b8:	4f 92       	push	r4
    59ba:	5f 92       	push	r5
    59bc:	6f 92       	push	r6
    59be:	7f 92       	push	r7
    59c0:	8f 92       	push	r8
    59c2:	9f 92       	push	r9
    59c4:	af 92       	push	r10
    59c6:	bf 92       	push	r11
    59c8:	cf 92       	push	r12
    59ca:	df 92       	push	r13
    59cc:	ef 92       	push	r14
    59ce:	ff 92       	push	r15
    59d0:	0f 93       	push	r16
    59d2:	1f 93       	push	r17
    59d4:	df 93       	push	r29
    59d6:	cf 93       	push	r28
    59d8:	cd b7       	in	r28, 0x3d	; 61
    59da:	de b7       	in	r29, 0x3e	; 62
    59dc:	2b 97       	sbiw	r28, 0x0b	; 11
    59de:	cd bf       	out	0x3d, r28	; 61
    59e0:	de bf       	out	0x3e, r29	; 62
    59e2:	3b 01       	movw	r6, r22
    59e4:	4c 01       	movw	r8, r24
    59e6:	19 01       	movw	r2, r18
    59e8:	2a 01       	movw	r4, r20
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    59ea:	20 91 df 21 	lds	r18, 0x21DF
    59ee:	2f 5f       	subi	r18, 0xFF	; 255
    59f0:	29 87       	std	Y+9, r18	; 0x09
    59f2:	23 30       	cpi	r18, 0x03	; 3
    59f4:	08 f0       	brcs	.+2      	; 0x59f8 <mv_queue_move_buffer+0x44>
    59f6:	19 86       	std	Y+9, r1	; 0x09
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    59f8:	80 91 e0 21 	lds	r24, 0x21E0
    59fc:	39 85       	ldd	r19, Y+9	; 0x09
    59fe:	83 17       	cp	r24, r19
    5a00:	11 f4       	brne	.+4      	; 0x5a06 <mv_queue_move_buffer+0x52>
    5a02:	87 e0       	ldi	r24, 0x07	; 7
    5a04:	92 c1       	rjmp	.+804    	; 0x5d2a <mv_queue_move_buffer+0x376>
		return (TG_BUFFER_FULL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    5a06:	e0 91 df 21 	lds	r30, 0x21DF
    5a0a:	8e e1       	ldi	r24, 0x1E	; 30
    5a0c:	e8 9f       	mul	r30, r24
    5a0e:	f0 01       	movw	r30, r0
    5a10:	11 24       	eor	r1, r1
    5a12:	ed 51       	subi	r30, 0x1D	; 29
    5a14:	fe 4d       	sbci	r31, 0xDE	; 222
    5a16:	e0 93 e1 21 	sts	0x21E1, r30
    5a1a:	f0 93 e2 21 	sts	0x21E2, r31
	memset(mv.p, 0, sizeof(struct mvMove));
    5a1e:	df 01       	movw	r26, r30
    5a20:	1d 92       	st	X+, r1
    5a22:	8a 95       	dec	r24
    5a24:	e9 f7       	brne	.-6      	; 0x5a20 <mv_queue_move_buffer+0x6c>
	mv.p->a[X].steps = steps_x;
    5a26:	e0 91 e1 21 	lds	r30, 0x21E1
    5a2a:	f0 91 e2 21 	lds	r31, 0x21E2
    5a2e:	ea 87       	std	Y+10, r30	; 0x0a
    5a30:	fb 87       	std	Y+11, r31	; 0x0b
    5a32:	60 82       	st	Z, r6
    5a34:	71 82       	std	Z+1, r7	; 0x01
    5a36:	82 82       	std	Z+2, r8	; 0x02
    5a38:	93 82       	std	Z+3, r9	; 0x03
	mv.p->a[Y].steps = steps_y;
    5a3a:	22 86       	std	Z+10, r2	; 0x0a
    5a3c:	33 86       	std	Z+11, r3	; 0x0b
    5a3e:	44 86       	std	Z+12, r4	; 0x0c
    5a40:	55 86       	std	Z+13, r5	; 0x0d
	mv.p->a[Z].steps = steps_z;
    5a42:	e4 8a       	std	Z+20, r14	; 0x14
    5a44:	f5 8a       	std	Z+21, r15	; 0x15
    5a46:	06 8b       	std	Z+22, r16	; 0x16
    5a48:	17 8b       	std	Z+23, r17	; 0x17
	ticks = microseconds * TICKS_PER_MICROSECOND;
    5a4a:	a5 e0       	ldi	r26, 0x05	; 5
    5a4c:	aa 0c       	add	r10, r10
    5a4e:	bb 1c       	adc	r11, r11
    5a50:	cc 1c       	adc	r12, r12
    5a52:	dd 1c       	adc	r13, r13
    5a54:	aa 95       	dec	r26
    5a56:	d1 f7       	brne	.-12     	; 0x5a4c <mv_queue_move_buffer+0x98>
    5a58:	a6 01       	movw	r20, r12
    5a5a:	95 01       	movw	r18, r10
    5a5c:	60 e0       	ldi	r22, 0x00	; 0
    5a5e:	70 e0       	ldi	r23, 0x00	; 0
    5a60:	80 e0       	ldi	r24, 0x00	; 0
    5a62:	90 e0       	ldi	r25, 0x00	; 0
    5a64:	a9 82       	std	Y+1, r10	; 0x01
    5a66:	3a 83       	std	Y+2, r19	; 0x02
    5a68:	4b 83       	std	Y+3, r20	; 0x03
    5a6a:	5c 83       	std	Y+4, r21	; 0x04
    5a6c:	6d 83       	std	Y+5, r22	; 0x05
    5a6e:	7e 83       	std	Y+6, r23	; 0x06
    5a70:	8f 83       	std	Y+7, r24	; 0x07
    5a72:	98 87       	std	Y+8, r25	; 0x08

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    5a74:	61 14       	cp	r6, r1
    5a76:	71 04       	cpc	r7, r1
    5a78:	81 04       	cpc	r8, r1
    5a7a:	91 04       	cpc	r9, r1
    5a7c:	09 f0       	breq	.+2      	; 0x5a80 <mv_queue_move_buffer+0xcc>
    5a7e:	4b c0       	rjmp	.+150    	; 0x5b16 <mv_queue_move_buffer+0x162>
    5a80:	21 14       	cp	r2, r1
    5a82:	31 04       	cpc	r3, r1
    5a84:	41 04       	cpc	r4, r1
    5a86:	51 04       	cpc	r5, r1
    5a88:	09 f0       	breq	.+2      	; 0x5a8c <mv_queue_move_buffer+0xd8>
    5a8a:	45 c0       	rjmp	.+138    	; 0x5b16 <mv_queue_move_buffer+0x162>
    5a8c:	e1 14       	cp	r14, r1
    5a8e:	f1 04       	cpc	r15, r1
    5a90:	01 05       	cpc	r16, r1
    5a92:	11 05       	cpc	r17, r1
    5a94:	09 f0       	breq	.+2      	; 0x5a98 <mv_queue_move_buffer+0xe4>
    5a96:	3f c0       	rjmp	.+126    	; 0x5b16 <mv_queue_move_buffer+0x162>
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    5a98:	81 e0       	ldi	r24, 0x01	; 1
    5a9a:	90 e0       	ldi	r25, 0x00	; 0
    5a9c:	a0 e0       	ldi	r26, 0x00	; 0
    5a9e:	b0 e0       	ldi	r27, 0x00	; 0
    5aa0:	80 83       	st	Z, r24
    5aa2:	91 83       	std	Z+1, r25	; 0x01
    5aa4:	a2 83       	std	Z+2, r26	; 0x02
    5aa6:	b3 83       	std	Z+3, r27	; 0x03
		mv.p->a[X].postscale = 1;
    5aa8:	81 e0       	ldi	r24, 0x01	; 1
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	86 83       	std	Z+6, r24	; 0x06
    5aae:	97 83       	std	Z+7, r25	; 0x07
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
    5ab0:	60 e0       	ldi	r22, 0x00	; 0
    5ab2:	70 e0       	ldi	r23, 0x00	; 0
    5ab4:	80 e0       	ldi	r24, 0x00	; 0
    5ab6:	90 e0       	ldi	r25, 0x00	; 0
    5ab8:	aa 24       	eor	r10, r10
    5aba:	a3 94       	inc	r10
    5abc:	bb 24       	eor	r11, r11
    5abe:	cc 24       	eor	r12, r12
    5ac0:	dd 24       	eor	r13, r13
    5ac2:	ee 24       	eor	r14, r14
    5ac4:	ff 24       	eor	r15, r15
    5ac6:	00 e0       	ldi	r16, 0x00	; 0
    5ac8:	10 e0       	ldi	r17, 0x00	; 0
    5aca:	0e 94 eb 35 	call	0x6bd6	; 0x6bd6 <__udivdi3>
    5ace:	c9 01       	movw	r24, r18
    5ad0:	da 01       	movw	r26, r20
    5ad2:	9c 01       	movw	r18, r24
    5ad4:	ad 01       	movw	r20, r26
    5ad6:	10 c0       	rjmp	.+32     	; 0x5af8 <mv_queue_move_buffer+0x144>
		while (ticks_per_step & 0xFFFF0000) {
			ticks_per_step >>= 1;
    5ad8:	56 95       	lsr	r21
    5ada:	47 95       	ror	r20
    5adc:	37 95       	ror	r19
    5ade:	27 95       	ror	r18
			mv.p->a[X].postscale <<= 1;
    5ae0:	aa 85       	ldd	r26, Y+10	; 0x0a
    5ae2:	bb 85       	ldd	r27, Y+11	; 0x0b
    5ae4:	16 96       	adiw	r26, 0x06	; 6
    5ae6:	8d 91       	ld	r24, X+
    5ae8:	9c 91       	ld	r25, X
    5aea:	17 97       	sbiw	r26, 0x07	; 7
    5aec:	88 0f       	add	r24, r24
    5aee:	99 1f       	adc	r25, r25
    5af0:	16 96       	adiw	r26, 0x06	; 6
    5af2:	8d 93       	st	X+, r24
    5af4:	9c 93       	st	X, r25
    5af6:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
		while (ticks_per_step & 0xFFFF0000) {
    5af8:	da 01       	movw	r26, r20
    5afa:	c9 01       	movw	r24, r18
    5afc:	80 70       	andi	r24, 0x00	; 0
    5afe:	90 70       	andi	r25, 0x00	; 0
    5b00:	00 97       	sbiw	r24, 0x00	; 0
    5b02:	a1 05       	cpc	r26, r1
    5b04:	b1 05       	cpc	r27, r1
    5b06:	41 f7       	brne	.-48     	; 0x5ad8 <mv_queue_move_buffer+0x124>
			ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    5b08:	ea 85       	ldd	r30, Y+10	; 0x0a
    5b0a:	fb 85       	ldd	r31, Y+11	; 0x0b
    5b0c:	24 83       	std	Z+4, r18	; 0x04
    5b0e:	35 83       	std	Z+5, r19	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    5b10:	81 e0       	ldi	r24, 0x01	; 1
    5b12:	81 87       	std	Z+9, r24	; 0x09
    5b14:	04 c1       	rjmp	.+520    	; 0x5d1e <mv_queue_move_buffer+0x36a>
	mv.p->a[Y].steps = steps_y;
	mv.p->a[Z].steps = steps_z;
	ticks = microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    5b16:	44 24       	eor	r4, r4
    5b18:	55 24       	eor	r5, r5
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    5b1a:	40 91 e1 21 	lds	r20, 0x21E1
    5b1e:	50 91 e2 21 	lds	r21, 0x21E2
    5b22:	34 2c       	mov	r3, r4
    5b24:	25 2c       	mov	r2, r5
    5b26:	c2 01       	movw	r24, r4
    5b28:	fc 01       	movw	r30, r24
    5b2a:	73 e0       	ldi	r23, 0x03	; 3
    5b2c:	ee 0f       	add	r30, r30
    5b2e:	ff 1f       	adc	r31, r31
    5b30:	7a 95       	dec	r23
    5b32:	e1 f7       	brne	.-8      	; 0x5b2c <mv_queue_move_buffer+0x178>
    5b34:	88 0f       	add	r24, r24
    5b36:	99 1f       	adc	r25, r25
    5b38:	e8 0f       	add	r30, r24
    5b3a:	f9 1f       	adc	r31, r25
    5b3c:	e4 0f       	add	r30, r20
    5b3e:	f5 1f       	adc	r31, r21
    5b40:	80 81       	ld	r24, Z
    5b42:	91 81       	ldd	r25, Z+1	; 0x01
    5b44:	a2 81       	ldd	r26, Z+2	; 0x02
    5b46:	b3 81       	ldd	r27, Z+3	; 0x03
    5b48:	00 97       	sbiw	r24, 0x00	; 0
    5b4a:	a1 05       	cpc	r26, r1
    5b4c:	b1 05       	cpc	r27, r1
    5b4e:	09 f4       	brne	.+2      	; 0x5b52 <mv_queue_move_buffer+0x19e>
    5b50:	de c0       	rjmp	.+444    	; 0x5d0e <mv_queue_move_buffer+0x35a>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    5b52:	b7 ff       	sbrs	r27, 7
    5b54:	10 c0       	rjmp	.+32     	; 0x5b76 <mv_queue_move_buffer+0x1c2>
    5b56:	c2 01       	movw	r24, r4
    5b58:	fc 01       	movw	r30, r24
    5b5a:	33 e0       	ldi	r19, 0x03	; 3
    5b5c:	ee 0f       	add	r30, r30
    5b5e:	ff 1f       	adc	r31, r31
    5b60:	3a 95       	dec	r19
    5b62:	e1 f7       	brne	.-8      	; 0x5b5c <mv_queue_move_buffer+0x1a8>
    5b64:	88 0f       	add	r24, r24
    5b66:	99 1f       	adc	r25, r25
    5b68:	e8 0f       	add	r30, r24
    5b6a:	f9 1f       	adc	r31, r25
    5b6c:	e4 0f       	add	r30, r20
    5b6e:	f5 1f       	adc	r31, r21
    5b70:	21 e0       	ldi	r18, 0x01	; 1
    5b72:	20 87       	std	Z+8, r18	; 0x08
    5b74:	0e c0       	rjmp	.+28     	; 0x5b92 <mv_queue_move_buffer+0x1de>
    5b76:	c2 01       	movw	r24, r4
    5b78:	fc 01       	movw	r30, r24
    5b7a:	03 e0       	ldi	r16, 0x03	; 3
    5b7c:	ee 0f       	add	r30, r30
    5b7e:	ff 1f       	adc	r31, r31
    5b80:	0a 95       	dec	r16
    5b82:	e1 f7       	brne	.-8      	; 0x5b7c <mv_queue_move_buffer+0x1c8>
    5b84:	88 0f       	add	r24, r24
    5b86:	99 1f       	adc	r25, r25
    5b88:	e8 0f       	add	r30, r24
    5b8a:	f9 1f       	adc	r31, r25
    5b8c:	e4 0f       	add	r30, r20
    5b8e:	f5 1f       	adc	r31, r21
    5b90:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    5b92:	83 2d       	mov	r24, r3
    5b94:	92 2d       	mov	r25, r2
    5b96:	fc 01       	movw	r30, r24
    5b98:	b3 e0       	ldi	r27, 0x03	; 3
    5b9a:	ee 0f       	add	r30, r30
    5b9c:	ff 1f       	adc	r31, r31
    5b9e:	ba 95       	dec	r27
    5ba0:	e1 f7       	brne	.-8      	; 0x5b9a <mv_queue_move_buffer+0x1e6>
    5ba2:	88 0f       	add	r24, r24
    5ba4:	99 1f       	adc	r25, r25
    5ba6:	e8 0f       	add	r30, r24
    5ba8:	f9 1f       	adc	r31, r25
    5baa:	e4 0f       	add	r30, r20
    5bac:	f5 1f       	adc	r31, r21
    5bae:	83 2d       	mov	r24, r3
    5bb0:	92 2d       	mov	r25, r2
    5bb2:	9c 01       	movw	r18, r24
    5bb4:	73 e0       	ldi	r23, 0x03	; 3
    5bb6:	22 0f       	add	r18, r18
    5bb8:	33 1f       	adc	r19, r19
    5bba:	7a 95       	dec	r23
    5bbc:	e1 f7       	brne	.-8      	; 0x5bb6 <mv_queue_move_buffer+0x202>
    5bbe:	88 0f       	add	r24, r24
    5bc0:	99 1f       	adc	r25, r25
    5bc2:	28 0f       	add	r18, r24
    5bc4:	39 1f       	adc	r19, r25
    5bc6:	42 0f       	add	r20, r18
    5bc8:	53 1f       	adc	r21, r19
    5bca:	da 01       	movw	r26, r20
    5bcc:	2d 91       	ld	r18, X+
    5bce:	3d 91       	ld	r19, X+
    5bd0:	4d 91       	ld	r20, X+
    5bd2:	5c 91       	ld	r21, X
    5bd4:	57 ff       	sbrs	r21, 7
    5bd6:	07 c0       	rjmp	.+14     	; 0x5be6 <mv_queue_move_buffer+0x232>
    5bd8:	50 95       	com	r21
    5bda:	40 95       	com	r20
    5bdc:	30 95       	com	r19
    5bde:	21 95       	neg	r18
    5be0:	3f 4f       	sbci	r19, 0xFF	; 255
    5be2:	4f 4f       	sbci	r20, 0xFF	; 255
    5be4:	5f 4f       	sbci	r21, 0xFF	; 255
    5be6:	20 83       	st	Z, r18
    5be8:	31 83       	std	Z+1, r19	; 0x01
    5bea:	42 83       	std	Z+2, r20	; 0x02
    5bec:	53 83       	std	Z+3, r21	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    5bee:	e0 91 e1 21 	lds	r30, 0x21E1
    5bf2:	f0 91 e2 21 	lds	r31, 0x21E2
    5bf6:	ea 87       	std	Y+10, r30	; 0x0a
    5bf8:	fb 87       	std	Y+11, r31	; 0x0b
    5bfa:	83 2d       	mov	r24, r3
    5bfc:	92 2d       	mov	r25, r2
    5bfe:	fc 01       	movw	r30, r24
    5c00:	03 e0       	ldi	r16, 0x03	; 3
    5c02:	ee 0f       	add	r30, r30
    5c04:	ff 1f       	adc	r31, r31
    5c06:	0a 95       	dec	r16
    5c08:	e1 f7       	brne	.-8      	; 0x5c02 <mv_queue_move_buffer+0x24e>
    5c0a:	88 0f       	add	r24, r24
    5c0c:	99 1f       	adc	r25, r25
    5c0e:	e8 0f       	add	r30, r24
    5c10:	f9 1f       	adc	r31, r25
    5c12:	2a 85       	ldd	r18, Y+10	; 0x0a
    5c14:	3b 85       	ldd	r19, Y+11	; 0x0b
    5c16:	e2 0f       	add	r30, r18
    5c18:	f3 1f       	adc	r31, r19
    5c1a:	41 e0       	ldi	r20, 0x01	; 1
    5c1c:	50 e0       	ldi	r21, 0x00	; 0
    5c1e:	46 83       	std	Z+6, r20	; 0x06
    5c20:	57 83       	std	Z+7, r21	; 0x07
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    5c22:	83 2d       	mov	r24, r3
    5c24:	92 2d       	mov	r25, r2
    5c26:	fc 01       	movw	r30, r24
    5c28:	b3 e0       	ldi	r27, 0x03	; 3
    5c2a:	ee 0f       	add	r30, r30
    5c2c:	ff 1f       	adc	r31, r31
    5c2e:	ba 95       	dec	r27
    5c30:	e1 f7       	brne	.-8      	; 0x5c2a <mv_queue_move_buffer+0x276>
    5c32:	88 0f       	add	r24, r24
    5c34:	99 1f       	adc	r25, r25
    5c36:	e8 0f       	add	r30, r24
    5c38:	f9 1f       	adc	r31, r25
    5c3a:	e2 0f       	add	r30, r18
    5c3c:	f3 1f       	adc	r31, r19
    5c3e:	e0 80       	ld	r14, Z
    5c40:	f1 80       	ldd	r15, Z+1	; 0x01
    5c42:	02 81       	ldd	r16, Z+2	; 0x02
    5c44:	13 81       	ldd	r17, Z+3	; 0x03
    5c46:	37 01       	movw	r6, r14
    5c48:	48 01       	movw	r8, r16
    5c4a:	99 0c       	add	r9, r9
    5c4c:	66 08       	sbc	r6, r6
    5c4e:	76 2c       	mov	r7, r6
    5c50:	43 01       	movw	r8, r6
    5c52:	29 81       	ldd	r18, Y+1	; 0x01
    5c54:	3a 81       	ldd	r19, Y+2	; 0x02
    5c56:	4b 81       	ldd	r20, Y+3	; 0x03
    5c58:	5c 81       	ldd	r21, Y+4	; 0x04
    5c5a:	6d 81       	ldd	r22, Y+5	; 0x05
    5c5c:	7e 81       	ldd	r23, Y+6	; 0x06
    5c5e:	8f 81       	ldd	r24, Y+7	; 0x07
    5c60:	98 85       	ldd	r25, Y+8	; 0x08
    5c62:	57 01       	movw	r10, r14
    5c64:	68 01       	movw	r12, r16
    5c66:	e6 2c       	mov	r14, r6
    5c68:	f6 2c       	mov	r15, r6
    5c6a:	06 2d       	mov	r16, r6
    5c6c:	16 2d       	mov	r17, r6
    5c6e:	0e 94 eb 35 	call	0x6bd6	; 0x6bd6 <__udivdi3>
    5c72:	c9 01       	movw	r24, r18
    5c74:	da 01       	movw	r26, r20
    5c76:	ac 01       	movw	r20, r24
    5c78:	bd 01       	movw	r22, r26
    5c7a:	2c c0       	rjmp	.+88     	; 0x5cd4 <mv_queue_move_buffer+0x320>
				while (ticks_per_step & 0xFFFF0000) {
					ticks_per_step >>= 1;
    5c7c:	76 95       	lsr	r23
    5c7e:	67 95       	ror	r22
    5c80:	57 95       	ror	r21
    5c82:	47 95       	ror	r20
					mv.p->a[i].postscale <<= 1;
    5c84:	83 2d       	mov	r24, r3
    5c86:	92 2d       	mov	r25, r2
    5c88:	dc 01       	movw	r26, r24
    5c8a:	33 e0       	ldi	r19, 0x03	; 3
    5c8c:	aa 0f       	add	r26, r26
    5c8e:	bb 1f       	adc	r27, r27
    5c90:	3a 95       	dec	r19
    5c92:	e1 f7       	brne	.-8      	; 0x5c8c <mv_queue_move_buffer+0x2d8>
    5c94:	88 0f       	add	r24, r24
    5c96:	99 1f       	adc	r25, r25
    5c98:	a8 0f       	add	r26, r24
    5c9a:	b9 1f       	adc	r27, r25
    5c9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5ca0:	a8 0f       	add	r26, r24
    5ca2:	b9 1f       	adc	r27, r25
    5ca4:	83 2d       	mov	r24, r3
    5ca6:	92 2d       	mov	r25, r2
    5ca8:	fc 01       	movw	r30, r24
    5caa:	03 e0       	ldi	r16, 0x03	; 3
    5cac:	ee 0f       	add	r30, r30
    5cae:	ff 1f       	adc	r31, r31
    5cb0:	0a 95       	dec	r16
    5cb2:	e1 f7       	brne	.-8      	; 0x5cac <mv_queue_move_buffer+0x2f8>
    5cb4:	88 0f       	add	r24, r24
    5cb6:	99 1f       	adc	r25, r25
    5cb8:	e8 0f       	add	r30, r24
    5cba:	f9 1f       	adc	r31, r25
    5cbc:	2a 85       	ldd	r18, Y+10	; 0x0a
    5cbe:	3b 85       	ldd	r19, Y+11	; 0x0b
    5cc0:	e2 0f       	add	r30, r18
    5cc2:	f3 1f       	adc	r31, r19
    5cc4:	86 81       	ldd	r24, Z+6	; 0x06
    5cc6:	97 81       	ldd	r25, Z+7	; 0x07
    5cc8:	88 0f       	add	r24, r24
    5cca:	99 1f       	adc	r25, r25
    5ccc:	16 96       	adiw	r26, 0x06	; 6
    5cce:	8d 93       	st	X+, r24
    5cd0:	9c 93       	st	X, r25
    5cd2:	17 97       	sbiw	r26, 0x07	; 7

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
				while (ticks_per_step & 0xFFFF0000) {
    5cd4:	db 01       	movw	r26, r22
    5cd6:	ca 01       	movw	r24, r20
    5cd8:	80 70       	andi	r24, 0x00	; 0
    5cda:	90 70       	andi	r25, 0x00	; 0
    5cdc:	00 97       	sbiw	r24, 0x00	; 0
    5cde:	a1 05       	cpc	r26, r1
    5ce0:	b1 05       	cpc	r27, r1
    5ce2:	61 f6       	brne	.-104    	; 0x5c7c <mv_queue_move_buffer+0x2c8>
					ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    5ce4:	83 2d       	mov	r24, r3
    5ce6:	92 2d       	mov	r25, r2
    5ce8:	9c 01       	movw	r18, r24
    5cea:	73 e0       	ldi	r23, 0x03	; 3
    5cec:	22 0f       	add	r18, r18
    5cee:	33 1f       	adc	r19, r19
    5cf0:	7a 95       	dec	r23
    5cf2:	e1 f7       	brne	.-8      	; 0x5cec <mv_queue_move_buffer+0x338>
    5cf4:	88 0f       	add	r24, r24
    5cf6:	99 1f       	adc	r25, r25
    5cf8:	28 0f       	add	r18, r24
    5cfa:	39 1f       	adc	r19, r25
    5cfc:	8a 85       	ldd	r24, Y+10	; 0x0a
    5cfe:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d00:	82 0f       	add	r24, r18
    5d02:	93 1f       	adc	r25, r19
    5d04:	dc 01       	movw	r26, r24
    5d06:	14 96       	adiw	r26, 0x04	; 4
    5d08:	4d 93       	st	X+, r20
    5d0a:	5c 93       	st	X, r21
    5d0c:	15 97       	sbiw	r26, 0x05	; 5
    5d0e:	08 94       	sec
    5d10:	41 1c       	adc	r4, r1
    5d12:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    5d14:	b3 e0       	ldi	r27, 0x03	; 3
    5d16:	4b 16       	cp	r4, r27
    5d18:	51 04       	cpc	r5, r1
    5d1a:	09 f0       	breq	.+2      	; 0x5d1e <mv_queue_move_buffer+0x36a>
    5d1c:	fe ce       	rjmp	.-516    	; 0x5b1a <mv_queue_move_buffer+0x166>
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    5d1e:	e9 85       	ldd	r30, Y+9	; 0x09
    5d20:	e0 93 df 21 	sts	0x21DF, r30
	st_execute_move();
    5d24:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <st_execute_move>
    5d28:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    5d2a:	2b 96       	adiw	r28, 0x0b	; 11
    5d2c:	cd bf       	out	0x3d, r28	; 61
    5d2e:	de bf       	out	0x3e, r29	; 62
    5d30:	cf 91       	pop	r28
    5d32:	df 91       	pop	r29
    5d34:	1f 91       	pop	r17
    5d36:	0f 91       	pop	r16
    5d38:	ff 90       	pop	r15
    5d3a:	ef 90       	pop	r14
    5d3c:	df 90       	pop	r13
    5d3e:	cf 90       	pop	r12
    5d40:	bf 90       	pop	r11
    5d42:	af 90       	pop	r10
    5d44:	9f 90       	pop	r9
    5d46:	8f 90       	pop	r8
    5d48:	7f 90       	pop	r7
    5d4a:	6f 90       	pop	r6
    5d4c:	5f 90       	pop	r5
    5d4e:	4f 90       	pop	r4
    5d50:	3f 90       	pop	r3
    5d52:	2f 90       	pop	r2
    5d54:	08 95       	ret

00005d56 <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    5d56:	ad e4       	ldi	r26, 0x4D	; 77
    5d58:	b2 e2       	ldi	r27, 0x22	; 34
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5d5a:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5d5c:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5d5e:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5d60:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5d62:	ed 91       	ld	r30, X+
    5d64:	fc 91       	ld	r31, X
    5d66:	11 97       	sbiw	r26, 0x01	; 1
    5d68:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5d6a:	ed 91       	ld	r30, X+
    5d6c:	fc 91       	ld	r31, X
    5d6e:	11 97       	sbiw	r26, 0x01	; 1
    5d70:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5d72:	ed 91       	ld	r30, X+
    5d74:	fc 91       	ld	r31, X
    5d76:	11 97       	sbiw	r26, 0x01	; 1
    5d78:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    5d7a:	ed 91       	ld	r30, X+
    5d7c:	fc 91       	ld	r31, X
    5d7e:	11 97       	sbiw	r26, 0x01	; 1
    5d80:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    5d82:	ed 91       	ld	r30, X+
    5d84:	fc 91       	ld	r31, X
    5d86:	11 97       	sbiw	r26, 0x01	; 1
    5d88:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    5d8a:	ed 91       	ld	r30, X+
    5d8c:	fc 91       	ld	r31, X
    5d8e:	11 97       	sbiw	r26, 0x01	; 1
    5d90:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5d92:	ed 91       	ld	r30, X+
    5d94:	fc 91       	ld	r31, X
    5d96:	11 97       	sbiw	r26, 0x01	; 1
    5d98:	31 87       	std	Z+9, r19	; 0x09
    5d9a:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    5d9c:	42 e2       	ldi	r20, 0x22	; 34
    5d9e:	ad 38       	cpi	r26, 0x8D	; 141
    5da0:	b4 07       	cpc	r27, r20
    5da2:	f9 f6       	brne	.-66     	; 0x5d62 <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    5da4:	08 95       	ret

00005da6 <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    5da6:	1f 92       	push	r1
    5da8:	0f 92       	push	r0
    5daa:	0f b6       	in	r0, 0x3f	; 63
    5dac:	0f 92       	push	r0
    5dae:	11 24       	eor	r1, r1
    5db0:	0f 90       	pop	r0
    5db2:	0f be       	out	0x3f, r0	; 63
    5db4:	0f 90       	pop	r0
    5db6:	1f 90       	pop	r1
    5db8:	18 95       	reti

00005dba <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    5dba:	1f 92       	push	r1
    5dbc:	0f 92       	push	r0
    5dbe:	0f b6       	in	r0, 0x3f	; 63
    5dc0:	0f 92       	push	r0
    5dc2:	11 24       	eor	r1, r1
    5dc4:	0f 90       	pop	r0
    5dc6:	0f be       	out	0x3f, r0	; 63
    5dc8:	0f 90       	pop	r0
    5dca:	1f 90       	pop	r1
    5dcc:	18 95       	reti

00005dce <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    5dce:	1f 92       	push	r1
    5dd0:	0f 92       	push	r0
    5dd2:	0f b6       	in	r0, 0x3f	; 63
    5dd4:	0f 92       	push	r0
    5dd6:	11 24       	eor	r1, r1
    5dd8:	0f 90       	pop	r0
    5dda:	0f be       	out	0x3f, r0	; 63
    5ddc:	0f 90       	pop	r0
    5dde:	1f 90       	pop	r1
    5de0:	18 95       	reti

00005de2 <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    5de2:	1f 92       	push	r1
    5de4:	0f 92       	push	r0
    5de6:	0f b6       	in	r0, 0x3f	; 63
    5de8:	0f 92       	push	r0
    5dea:	11 24       	eor	r1, r1
    5dec:	0f 90       	pop	r0
    5dee:	0f be       	out	0x3f, r0	; 63
    5df0:	0f 90       	pop	r0
    5df2:	1f 90       	pop	r1
    5df4:	18 95       	reti

00005df6 <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    5df6:	1f 92       	push	r1
    5df8:	0f 92       	push	r0
    5dfa:	0f b6       	in	r0, 0x3f	; 63
    5dfc:	0f 92       	push	r0
    5dfe:	11 24       	eor	r1, r1
    5e00:	0f 90       	pop	r0
    5e02:	0f be       	out	0x3f, r0	; 63
    5e04:	0f 90       	pop	r0
    5e06:	1f 90       	pop	r1
    5e08:	18 95       	reti

00005e0a <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    5e0a:	1f 92       	push	r1
    5e0c:	0f 92       	push	r0
    5e0e:	0f b6       	in	r0, 0x3f	; 63
    5e10:	0f 92       	push	r0
    5e12:	11 24       	eor	r1, r1
    5e14:	0f 90       	pop	r0
    5e16:	0f be       	out	0x3f, r0	; 63
    5e18:	0f 90       	pop	r0
    5e1a:	1f 90       	pop	r1
    5e1c:	18 95       	reti

00005e1e <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    5e1e:	1f 92       	push	r1
    5e20:	0f 92       	push	r0
    5e22:	0f b6       	in	r0, 0x3f	; 63
    5e24:	0f 92       	push	r0
    5e26:	11 24       	eor	r1, r1
    5e28:	0f 90       	pop	r0
    5e2a:	0f be       	out	0x3f, r0	; 63
    5e2c:	0f 90       	pop	r0
    5e2e:	1f 90       	pop	r1
    5e30:	18 95       	reti

00005e32 <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    5e32:	1f 92       	push	r1
    5e34:	0f 92       	push	r0
    5e36:	0f b6       	in	r0, 0x3f	; 63
    5e38:	0f 92       	push	r0
    5e3a:	11 24       	eor	r1, r1
    5e3c:	0f 90       	pop	r0
    5e3e:	0f be       	out	0x3f, r0	; 63
    5e40:	0f 90       	pop	r0
    5e42:	1f 90       	pop	r1
    5e44:	18 95       	reti

00005e46 <signal_etx>:
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx() {			// ^c
{
	tg_reset_source();					// return control to standard device
    5e46:	0e 94 8f 2b 	call	0x571e	; 0x571e <tg_reset_source>
	mc_motion_stop();					// stop computing and generating motions
    5e4a:	0e 94 cd 1b 	call	0x379a	; 0x379a <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    5e4e:	0e 94 cf 2c 	call	0x599e	; 0x599e <mv_flush>
	st_stop_steppers();					// stop the steppers
    5e52:	0e 94 10 25 	call	0x4a20	; 0x4a20 <st_stop_steppers>
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
*/
}
    5e56:	08 95       	ret

00005e58 <xio_set_baud_usart>:
	USX->port->OUTCLR = outclr;
	USX->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
    5e58:	cf 93       	push	r28
    5e5a:	df 93       	push	r29
	USX->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    5e5c:	90 e0       	ldi	r25, 0x00	; 0
    5e5e:	27 e1       	ldi	r18, 0x17	; 23
    5e60:	30 e0       	ldi	r19, 0x00	; 0
    5e62:	82 9f       	mul	r24, r18
    5e64:	d0 01       	movw	r26, r0
    5e66:	83 9f       	mul	r24, r19
    5e68:	b0 0d       	add	r27, r0
    5e6a:	92 9f       	mul	r25, r18
    5e6c:	b0 0d       	add	r27, r0
    5e6e:	11 24       	eor	r1, r1
    5e70:	a1 53       	subi	r26, 0x31	; 49
    5e72:	bc 4d       	sbci	r27, 0xDC	; 220
    5e74:	51 96       	adiw	r26, 0x11	; 17
    5e76:	ed 91       	ld	r30, X+
    5e78:	fc 91       	ld	r31, X
    5e7a:	52 97       	sbiw	r26, 0x12	; 18
    5e7c:	87 81       	ldd	r24, Z+7	; 0x07
    5e7e:	90 85       	ldd	r25, Z+8	; 0x08
    5e80:	26 2f       	mov	r18, r22
    5e82:	30 e0       	ldi	r19, 0x00	; 0
    5e84:	f9 01       	movw	r30, r18
    5e86:	ed 51       	subi	r30, 0x1D	; 29
    5e88:	f6 4e       	sbci	r31, 0xE6	; 230
    5e8a:	e4 91       	lpm	r30, Z+
    5e8c:	ec 01       	movw	r28, r24
    5e8e:	ee 83       	std	Y+6, r30	; 0x06
	USX->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    5e90:	51 96       	adiw	r26, 0x11	; 17
    5e92:	ed 91       	ld	r30, X+
    5e94:	fc 91       	ld	r31, X
    5e96:	52 97       	sbiw	r26, 0x12	; 18
    5e98:	a7 81       	ldd	r26, Z+7	; 0x07
    5e9a:	b0 85       	ldd	r27, Z+8	; 0x08
    5e9c:	22 51       	subi	r18, 0x12	; 18
    5e9e:	36 4e       	sbci	r19, 0xE6	; 230
    5ea0:	f9 01       	movw	r30, r18
    5ea2:	64 91       	lpm	r22, Z+
    5ea4:	17 96       	adiw	r26, 0x07	; 7
    5ea6:	6c 93       	st	X, r22
}
    5ea8:	df 91       	pop	r29
    5eaa:	cf 91       	pop	r28
    5eac:	08 95       	ret

00005eae <xio_init_usart>:
					const struct PORT_struct *port_addr,
					const uint8_t dirclr, 
					const uint8_t dirset, 
					const uint8_t outclr, 
					const uint8_t outset) 
{
    5eae:	af 92       	push	r10
    5eb0:	cf 92       	push	r12
    5eb2:	df 92       	push	r13
    5eb4:	ef 92       	push	r14
    5eb6:	ff 92       	push	r15
    5eb8:	0f 93       	push	r16
    5eba:	1f 93       	push	r17
    5ebc:	cf 93       	push	r28
    5ebe:	df 93       	push	r29
    5ec0:	f6 2e       	mov	r15, r22
    5ec2:	d0 2e       	mov	r13, r16
//	struct xioUSART *u = (struct xioUSART *)ds[dev].x; // example of a cast for FILEs
//	struct xioUSART *u = ds[dev].x;

	// bind USART and PORT structures - do this first
	USX->usart = (struct USART_struct *)usart_addr;
    5ec4:	c8 2f       	mov	r28, r24
    5ec6:	d0 e0       	ldi	r29, 0x00	; 0
    5ec8:	e7 e1       	ldi	r30, 0x17	; 23
    5eca:	f0 e0       	ldi	r31, 0x00	; 0
    5ecc:	ce 9f       	mul	r28, r30
    5ece:	80 01       	movw	r16, r0
    5ed0:	cf 9f       	mul	r28, r31
    5ed2:	10 0d       	add	r17, r0
    5ed4:	de 9f       	mul	r29, r30
    5ed6:	10 0d       	add	r17, r0
    5ed8:	11 24       	eor	r1, r1
    5eda:	01 53       	subi	r16, 0x31	; 49
    5edc:	1c 4d       	sbci	r17, 0xDC	; 220
    5ede:	d8 01       	movw	r26, r16
    5ee0:	51 96       	adiw	r26, 0x11	; 17
    5ee2:	ed 91       	ld	r30, X+
    5ee4:	fc 91       	ld	r31, X
    5ee6:	52 97       	sbiw	r26, 0x12	; 18
    5ee8:	47 83       	std	Z+7, r20	; 0x07
    5eea:	50 87       	std	Z+8, r21	; 0x08
	USX->port = (struct PORT_struct *)port_addr;
    5eec:	21 87       	std	Z+9, r18	; 0x09
    5eee:	32 87       	std	Z+10, r19	; 0x0a

	// set flags
	xio_setflags(dev, control);			// generic version. does not validate flags
    5ef0:	0e 94 22 28 	call	0x5044	; 0x5044 <xio_setflags>

	// setup internal RX/TX buffers
	USX->rx_buf_head = 1;					// can't use location 0
    5ef4:	d8 01       	movw	r26, r16
    5ef6:	51 96       	adiw	r26, 0x11	; 17
    5ef8:	ed 91       	ld	r30, X+
    5efa:	fc 91       	ld	r31, X
    5efc:	52 97       	sbiw	r26, 0x12	; 18
    5efe:	81 e0       	ldi	r24, 0x01	; 1
    5f00:	83 83       	std	Z+3, r24	; 0x03
	USX->rx_buf_tail = 1;
    5f02:	51 96       	adiw	r26, 0x11	; 17
    5f04:	ed 91       	ld	r30, X+
    5f06:	fc 91       	ld	r31, X
    5f08:	52 97       	sbiw	r26, 0x12	; 18
    5f0a:	82 83       	std	Z+2, r24	; 0x02
	USX->tx_buf_head = 1;
    5f0c:	51 96       	adiw	r26, 0x11	; 17
    5f0e:	ed 91       	ld	r30, X+
    5f10:	fc 91       	ld	r31, X
    5f12:	52 97       	sbiw	r26, 0x12	; 18
    5f14:	85 83       	std	Z+5, r24	; 0x05
	USX->tx_buf_tail = 1;
    5f16:	51 96       	adiw	r26, 0x11	; 17
    5f18:	ed 91       	ld	r30, X+
    5f1a:	fc 91       	ld	r31, X
    5f1c:	52 97       	sbiw	r26, 0x12	; 18
    5f1e:	84 83       	std	Z+4, r24	; 0x04

	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    5f20:	2f 2d       	mov	r18, r15
    5f22:	2f 70       	andi	r18, 0x0F	; 15
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
    5f24:	09 f4       	brne	.+2      	; 0x5f28 <xio_init_usart+0x7a>
    5f26:	25 e0       	ldi	r18, 0x05	; 5
	USX->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
	USX->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    5f28:	87 e1       	ldi	r24, 0x17	; 23
    5f2a:	90 e0       	ldi	r25, 0x00	; 0
    5f2c:	c8 9f       	mul	r28, r24
    5f2e:	d0 01       	movw	r26, r0
    5f30:	c9 9f       	mul	r28, r25
    5f32:	b0 0d       	add	r27, r0
    5f34:	d8 9f       	mul	r29, r24
    5f36:	b0 0d       	add	r27, r0
    5f38:	11 24       	eor	r1, r1
    5f3a:	a1 53       	subi	r26, 0x31	; 49
    5f3c:	bc 4d       	sbci	r27, 0xDC	; 220
    5f3e:	51 96       	adiw	r26, 0x11	; 17
    5f40:	ed 91       	ld	r30, X+
    5f42:	fc 91       	ld	r31, X
    5f44:	52 97       	sbiw	r26, 0x12	; 18
    5f46:	87 81       	ldd	r24, Z+7	; 0x07
    5f48:	90 85       	ldd	r25, Z+8	; 0x08
    5f4a:	30 e0       	ldi	r19, 0x00	; 0
    5f4c:	f9 01       	movw	r30, r18
    5f4e:	ed 51       	subi	r30, 0x1D	; 29
    5f50:	f6 4e       	sbci	r31, 0xE6	; 230
    5f52:	e4 91       	lpm	r30, Z+
    5f54:	ec 01       	movw	r28, r24
    5f56:	ee 83       	std	Y+6, r30	; 0x06
	USX->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    5f58:	51 96       	adiw	r26, 0x11	; 17
    5f5a:	ed 91       	ld	r30, X+
    5f5c:	fc 91       	ld	r31, X
    5f5e:	52 97       	sbiw	r26, 0x12	; 18
    5f60:	c7 81       	ldd	r28, Z+7	; 0x07
    5f62:	d0 85       	ldd	r29, Z+8	; 0x08
    5f64:	22 51       	subi	r18, 0x12	; 18
    5f66:	36 4e       	sbci	r19, 0xE6	; 230
    5f68:	f9 01       	movw	r30, r18
    5f6a:	f4 90       	lpm	r15, Z+
    5f6c:	ff 82       	std	Y+7, r15	; 0x07
	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
	xio_set_baud_usart(dev, baud);					// usart must be bound first

	USX->usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx on USART
    5f6e:	51 96       	adiw	r26, 0x11	; 17
    5f70:	ed 91       	ld	r30, X+
    5f72:	fc 91       	ld	r31, X
    5f74:	52 97       	sbiw	r26, 0x12	; 18
    5f76:	07 80       	ldd	r0, Z+7	; 0x07
    5f78:	f0 85       	ldd	r31, Z+8	; 0x08
    5f7a:	e0 2d       	mov	r30, r0
    5f7c:	88 e1       	ldi	r24, 0x18	; 24
    5f7e:	84 83       	std	Z+4, r24	; 0x04
	USX->usart->CTRLA = CTRLA_RXON_TXON;				// enable tx and rx interrupts
    5f80:	51 96       	adiw	r26, 0x11	; 17
    5f82:	ed 91       	ld	r30, X+
    5f84:	fc 91       	ld	r31, X
    5f86:	52 97       	sbiw	r26, 0x12	; 18
    5f88:	07 80       	ldd	r0, Z+7	; 0x07
    5f8a:	f0 85       	ldd	r31, Z+8	; 0x08
    5f8c:	e0 2d       	mov	r30, r0
    5f8e:	81 e2       	ldi	r24, 0x21	; 33
    5f90:	83 83       	std	Z+3, r24	; 0x03

	USX->port->DIRCLR = dirclr;
    5f92:	51 96       	adiw	r26, 0x11	; 17
    5f94:	ed 91       	ld	r30, X+
    5f96:	fc 91       	ld	r31, X
    5f98:	52 97       	sbiw	r26, 0x12	; 18
    5f9a:	01 84       	ldd	r0, Z+9	; 0x09
    5f9c:	f2 85       	ldd	r31, Z+10	; 0x0a
    5f9e:	e0 2d       	mov	r30, r0
    5fa0:	d2 82       	std	Z+2, r13	; 0x02
	USX->port->DIRSET = dirset;
    5fa2:	51 96       	adiw	r26, 0x11	; 17
    5fa4:	ed 91       	ld	r30, X+
    5fa6:	fc 91       	ld	r31, X
    5fa8:	52 97       	sbiw	r26, 0x12	; 18
    5faa:	01 84       	ldd	r0, Z+9	; 0x09
    5fac:	f2 85       	ldd	r31, Z+10	; 0x0a
    5fae:	e0 2d       	mov	r30, r0
    5fb0:	e1 82       	std	Z+1, r14	; 0x01
	USX->port->OUTCLR = outclr;
    5fb2:	51 96       	adiw	r26, 0x11	; 17
    5fb4:	ed 91       	ld	r30, X+
    5fb6:	fc 91       	ld	r31, X
    5fb8:	52 97       	sbiw	r26, 0x12	; 18
    5fba:	01 84       	ldd	r0, Z+9	; 0x09
    5fbc:	f2 85       	ldd	r31, Z+10	; 0x0a
    5fbe:	e0 2d       	mov	r30, r0
    5fc0:	c6 82       	std	Z+6, r12	; 0x06
	USX->port->OUTSET = outset;
    5fc2:	51 96       	adiw	r26, 0x11	; 17
    5fc4:	ed 91       	ld	r30, X+
    5fc6:	fc 91       	ld	r31, X
    5fc8:	52 97       	sbiw	r26, 0x12	; 18
    5fca:	01 84       	ldd	r0, Z+9	; 0x09
    5fcc:	f2 85       	ldd	r31, Z+10	; 0x0a
    5fce:	e0 2d       	mov	r30, r0
    5fd0:	a5 82       	std	Z+5, r10	; 0x05
}
    5fd2:	df 91       	pop	r29
    5fd4:	cf 91       	pop	r28
    5fd6:	1f 91       	pop	r17
    5fd8:	0f 91       	pop	r16
    5fda:	ff 90       	pop	r15
    5fdc:	ef 90       	pop	r14
    5fde:	df 90       	pop	r13
    5fe0:	cf 90       	pop	r12
    5fe2:	af 90       	pop	r10
    5fe4:	08 95       	ret

00005fe6 <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)	//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    5fe6:	1f 92       	push	r1
    5fe8:	0f 92       	push	r0
    5fea:	0f b6       	in	r0, 0x3f	; 63
    5fec:	0f 92       	push	r0
    5fee:	0b b6       	in	r0, 0x3b	; 59
    5ff0:	0f 92       	push	r0
    5ff2:	11 24       	eor	r1, r1
    5ff4:	8f 93       	push	r24
    5ff6:	9f 93       	push	r25
    5ff8:	af 93       	push	r26
    5ffa:	bf 93       	push	r27
    5ffc:	ef 93       	push	r30
    5ffe:	ff 93       	push	r31
	if (USBu.tx_buf_head == USBu.tx_buf_tail) {	// buffer empty - disable ints
    6000:	90 91 64 23 	lds	r25, 0x2364
    6004:	80 91 63 23 	lds	r24, 0x2363
    6008:	98 17       	cp	r25, r24
    600a:	39 f4       	brne	.+14     	; 0x601a <__stack+0x1b>
		USBu.usart->CTRLA = CTRLA_RXON_TXOFF;	// won't work if you just &= it
    600c:	e0 91 66 23 	lds	r30, 0x2366
    6010:	f0 91 67 23 	lds	r31, 0x2367
    6014:	80 e2       	ldi	r24, 0x20	; 32
    6016:	83 83       	std	Z+3, r24	; 0x03
    6018:	1d c0       	rjmp	.+58     	; 0x6054 <__stack+0x55>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(USB.flags)) {
    601a:	80 91 e6 23 	lds	r24, 0x23E6
    601e:	90 91 e7 23 	lds	r25, 0x23E7
    6022:	93 fd       	sbrc	r25, 3
    6024:	17 c0       	rjmp	.+46     	; 0x6054 <__stack+0x55>
		if (--(USBu.tx_buf_tail) == 0) {		// advance tail and wrap 
    6026:	80 91 63 23 	lds	r24, 0x2363
    602a:	81 50       	subi	r24, 0x01	; 1
    602c:	80 93 63 23 	sts	0x2363, r24
    6030:	80 91 63 23 	lds	r24, 0x2363
    6034:	88 23       	and	r24, r24
    6036:	19 f4       	brne	.+6      	; 0x603e <__stack+0x3f>
			USBu.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one err (OBOE)
    6038:	81 e1       	ldi	r24, 0x11	; 17
    603a:	80 93 63 23 	sts	0x2363, r24
		}
		USBu.usart->DATA = USBu.tx_buf[USBu.tx_buf_tail]; // write to TX DATA reg
    603e:	e0 91 66 23 	lds	r30, 0x2366
    6042:	f0 91 67 23 	lds	r31, 0x2367
    6046:	a0 91 63 23 	lds	r26, 0x2363
    604a:	b0 e0       	ldi	r27, 0x00	; 0
    604c:	a4 58       	subi	r26, 0x84	; 132
    604e:	bc 4d       	sbci	r27, 0xDC	; 220
    6050:	8c 91       	ld	r24, X
    6052:	80 83       	st	Z, r24
	}
}
    6054:	ff 91       	pop	r31
    6056:	ef 91       	pop	r30
    6058:	bf 91       	pop	r27
    605a:	af 91       	pop	r26
    605c:	9f 91       	pop	r25
    605e:	8f 91       	pop	r24
    6060:	0f 90       	pop	r0
    6062:	0b be       	out	0x3b, r0	; 59
    6064:	0f 90       	pop	r0
    6066:	0f be       	out	0x3f, r0	; 63
    6068:	0f 90       	pop	r0
    606a:	1f 90       	pop	r1
    606c:	18 95       	reti

0000606e <xio_open_usb>:
 */

struct __file * xio_open_usb()
{
	return(USB.fdev);
}
    606e:	80 91 f9 23 	lds	r24, 0x23F9
    6072:	90 91 fa 23 	lds	r25, 0x23FA
    6076:	08 95       	ret

00006078 <xio_putc_usb>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_usb(const char c, FILE *stream)
{
    6078:	48 2f       	mov	r20, r24
	if ((USBu.next_tx_buf_head = USBu.tx_buf_head-1) == 0) { // advance head and wrap
		USBu.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one
	}
	while(USBu.next_tx_buf_head == USBu.tx_buf_tail) {   // buf full. sleep or return
		if (BLOCKING(USB.flags)) {
    607a:	20 91 e6 23 	lds	r18, 0x23E6
    607e:	30 91 e7 23 	lds	r19, 0x23E7
    6082:	d9 01       	movw	r26, r18
    6084:	a4 70       	andi	r26, 0x04	; 4
    6086:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	USBu.tx_buf_head = USBu.next_tx_buf_head;	// accept the next buffer head value
	USBu.tx_buf[USBu.tx_buf_head] = c;			// ...and write char to buffer

	if (CRLF(USB.flags) && (c == '\n')) {		// detect LF and add a CR
    6088:	b9 01       	movw	r22, r18
    608a:	60 72       	andi	r22, 0x20	; 32
    608c:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_usb(const char c, FILE *stream)
{
	if ((USBu.next_tx_buf_head = USBu.tx_buf_head-1) == 0) { // advance head and wrap
    608e:	90 91 64 23 	lds	r25, 0x2364
    6092:	91 50       	subi	r25, 0x01	; 1
    6094:	c1 f4       	brne	.+48     	; 0x60c6 <xio_putc_usb+0x4e>
    6096:	91 e1       	ldi	r25, 0x11	; 17
    6098:	16 c0       	rjmp	.+44     	; 0x60c6 <xio_putc_usb+0x4e>
		USBu.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one
	}
	while(USBu.next_tx_buf_head == USBu.tx_buf_tail) {   // buf full. sleep or return
		if (BLOCKING(USB.flags)) {
    609a:	10 97       	sbiw	r26, 0x00	; 0
    609c:	61 f0       	breq	.+24     	; 0x60b6 <xio_putc_usb+0x3e>
			sleep_mode();
    609e:	80 91 48 00 	lds	r24, 0x0048
    60a2:	81 60       	ori	r24, 0x01	; 1
    60a4:	80 93 48 00 	sts	0x0048, r24
    60a8:	88 95       	sleep
    60aa:	80 91 48 00 	lds	r24, 0x0048
    60ae:	8e 7f       	andi	r24, 0xFE	; 254
    60b0:	80 93 48 00 	sts	0x0048, r24
    60b4:	08 c0       	rjmp	.+16     	; 0x60c6 <xio_putc_usb+0x4e>
    60b6:	90 93 65 23 	sts	0x2365, r25
		} else {
			USB.sig = XIO_SIG_EAGAIN;
    60ba:	81 e0       	ldi	r24, 0x01	; 1
    60bc:	80 93 e9 23 	sts	0x23E9, r24
    60c0:	2f ef       	ldi	r18, 0xFF	; 255
    60c2:	3f ef       	ldi	r19, 0xFF	; 255
    60c4:	54 c0       	rjmp	.+168    	; 0x616e <xio_putc_usb+0xf6>
int xio_putc_usb(const char c, FILE *stream)
{
	if ((USBu.next_tx_buf_head = USBu.tx_buf_head-1) == 0) { // advance head and wrap
		USBu.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one
	}
	while(USBu.next_tx_buf_head == USBu.tx_buf_tail) {   // buf full. sleep or return
    60c6:	80 91 63 23 	lds	r24, 0x2363
    60ca:	98 17       	cp	r25, r24
    60cc:	31 f3       	breq	.-52     	; 0x609a <xio_putc_usb+0x22>
			USB.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	USBu.tx_buf_head = USBu.next_tx_buf_head;	// accept the next buffer head value
    60ce:	90 93 64 23 	sts	0x2364, r25
	USBu.tx_buf[USBu.tx_buf_head] = c;			// ...and write char to buffer
    60d2:	e0 91 64 23 	lds	r30, 0x2364
    60d6:	f0 e0       	ldi	r31, 0x00	; 0
    60d8:	e4 58       	subi	r30, 0x84	; 132
    60da:	fc 4d       	sbci	r31, 0xDC	; 220
    60dc:	40 83       	st	Z, r20

	if (CRLF(USB.flags) && (c == '\n')) {		// detect LF and add a CR
    60de:	61 15       	cp	r22, r1
    60e0:	71 05       	cpc	r23, r1
    60e2:	21 f0       	breq	.+8      	; 0x60ec <xio_putc_usb+0x74>
    60e4:	4a 30       	cpi	r20, 0x0A	; 10
    60e6:	11 f4       	brne	.+4      	; 0x60ec <xio_putc_usb+0x74>
    60e8:	4d e0       	ldi	r20, 0x0D	; 13
    60ea:	d1 cf       	rjmp	.-94     	; 0x608e <xio_putc_usb+0x16>
    60ec:	90 93 65 23 	sts	0x2365, r25
		return xio_putc_usb('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (USBu.usart->STATUS & 0x20) {
    60f0:	a0 91 66 23 	lds	r26, 0x2366
    60f4:	b0 91 67 23 	lds	r27, 0x2367
    60f8:	11 96       	adiw	r26, 0x01	; 1
    60fa:	8c 91       	ld	r24, X
    60fc:	11 97       	sbiw	r26, 0x01	; 1
    60fe:	85 ff       	sbrs	r24, 5
    6100:	27 c0       	rjmp	.+78     	; 0x6150 <xio_putc_usb+0xd8>
		if (USBu.tx_buf_head == USBu.tx_buf_tail) {	// buf might be empty if IRQ got it
    6102:	90 91 64 23 	lds	r25, 0x2364
    6106:	80 91 63 23 	lds	r24, 0x2363
    610a:	98 17       	cp	r25, r24
    610c:	71 f1       	breq	.+92     	; 0x616a <xio_putc_usb+0xf2>
			return (0);
		}
		USB.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    610e:	38 60       	ori	r19, 0x08	; 8
    6110:	20 93 e6 23 	sts	0x23E6, r18
    6114:	30 93 e7 23 	sts	0x23E7, r19
		if (--(USBu.tx_buf_tail) == 0) {		// advance tail and wrap if needed
    6118:	80 91 63 23 	lds	r24, 0x2363
    611c:	81 50       	subi	r24, 0x01	; 1
    611e:	80 93 63 23 	sts	0x2363, r24
    6122:	80 91 63 23 	lds	r24, 0x2363
    6126:	88 23       	and	r24, r24
    6128:	19 f4       	brne	.+6      	; 0x6130 <xio_putc_usb+0xb8>
			USBu.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one error (OBOE)
    612a:	81 e1       	ldi	r24, 0x11	; 17
    612c:	80 93 63 23 	sts	0x2363, r24
		}
		USBu.usart->DATA = USBu.tx_buf[USBu.tx_buf_tail];// write char to TX DATA reg
    6130:	e0 91 63 23 	lds	r30, 0x2363
    6134:	f0 e0       	ldi	r31, 0x00	; 0
    6136:	e4 58       	subi	r30, 0x84	; 132
    6138:	fc 4d       	sbci	r31, 0xDC	; 220
    613a:	80 81       	ld	r24, Z
    613c:	8c 93       	st	X, r24
		USB.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    613e:	80 91 e6 23 	lds	r24, 0x23E6
    6142:	90 91 e7 23 	lds	r25, 0x23E7
    6146:	97 7f       	andi	r25, 0xF7	; 247
    6148:	80 93 e6 23 	sts	0x23E6, r24
    614c:	90 93 e7 23 	sts	0x23E7, r25
	}
	// enable interrupts regardless
	USBu.usart->CTRLA = CTRLA_RXON_TXON;		// doesn't work if you just |= it
    6150:	e0 91 66 23 	lds	r30, 0x2366
    6154:	f0 91 67 23 	lds	r31, 0x2367
    6158:	81 e2       	ldi	r24, 0x21	; 33
    615a:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    615c:	80 91 a2 00 	lds	r24, 0x00A2
    6160:	81 60       	ori	r24, 0x01	; 1
    6162:	e0 ea       	ldi	r30, 0xA0	; 160
    6164:	f0 e0       	ldi	r31, 0x00	; 0
    6166:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    6168:	78 94       	sei
    616a:	20 e0       	ldi	r18, 0x00	; 0
    616c:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    616e:	c9 01       	movw	r24, r18
    6170:	08 95       	ret

00006172 <xio_getc_usb>:
 */

int xio_getc_usb(FILE *stream)
{
	while (USBu.rx_buf_head == USBu.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(USB.flags)) {
    6172:	20 91 e6 23 	lds	r18, 0x23E6
    6176:	30 91 e7 23 	lds	r19, 0x23E7
    617a:	24 70       	andi	r18, 0x04	; 4
    617c:	30 70       	andi	r19, 0x00	; 0
    617e:	15 c0       	rjmp	.+42     	; 0x61aa <xio_getc_usb+0x38>
    6180:	21 15       	cp	r18, r1
    6182:	31 05       	cpc	r19, r1
    6184:	61 f0       	breq	.+24     	; 0x619e <xio_getc_usb+0x2c>
			sleep_mode();
    6186:	80 91 48 00 	lds	r24, 0x0048
    618a:	81 60       	ori	r24, 0x01	; 1
    618c:	80 93 48 00 	sts	0x0048, r24
    6190:	88 95       	sleep
    6192:	80 91 48 00 	lds	r24, 0x0048
    6196:	8e 7f       	andi	r24, 0xFE	; 254
    6198:	80 93 48 00 	sts	0x0048, r24
    619c:	06 c0       	rjmp	.+12     	; 0x61aa <xio_getc_usb+0x38>
		} else {
			USB.sig = XIO_SIG_EAGAIN;
    619e:	81 e0       	ldi	r24, 0x01	; 1
    61a0:	80 93 e9 23 	sts	0x23E9, r24
    61a4:	2f ef       	ldi	r18, 0xFF	; 255
    61a6:	3f ef       	ldi	r19, 0xFF	; 255
    61a8:	26 c0       	rjmp	.+76     	; 0x61f6 <xio_getc_usb+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_getc_usb(FILE *stream)
{
	while (USBu.rx_buf_head == USBu.rx_buf_tail) {	// RX ISR buffer empty
    61aa:	90 91 62 23 	lds	r25, 0x2362
    61ae:	80 91 61 23 	lds	r24, 0x2361
    61b2:	98 17       	cp	r25, r24
    61b4:	29 f3       	breq	.-54     	; 0x6180 <xio_getc_usb+0xe>
		} else {
			USB.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(USBu.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    61b6:	80 91 61 23 	lds	r24, 0x2361
    61ba:	81 50       	subi	r24, 0x01	; 1
    61bc:	80 93 61 23 	sts	0x2361, r24
    61c0:	80 91 61 23 	lds	r24, 0x2361
    61c4:	88 23       	and	r24, r24
    61c6:	19 f4       	brne	.+6      	; 0x61ce <xio_getc_usb+0x5c>
		USBu.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    61c8:	81 e1       	ldi	r24, 0x11	; 17
    61ca:	80 93 61 23 	sts	0x2361, r24
	}
	USB.c = (USBu.rx_buf[USBu.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    61ce:	e0 91 61 23 	lds	r30, 0x2361
    61d2:	f0 e0       	ldi	r31, 0x00	; 0
    61d4:	e0 5d       	subi	r30, 0xD0	; 208
    61d6:	fc 4d       	sbci	r31, 0xDC	; 220
    61d8:	82 ad       	ldd	r24, Z+58	; 0x3a
    61da:	8f 77       	andi	r24, 0x7F	; 127
    61dc:	80 93 ea 23 	sts	0x23EA, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[USB.c])))());
    61e0:	90 e0       	ldi	r25, 0x00	; 0
    61e2:	88 0f       	add	r24, r24
    61e4:	99 1f       	adc	r25, r25
    61e6:	87 50       	subi	r24, 0x07	; 7
    61e8:	95 4e       	sbci	r25, 0xE5	; 229
    61ea:	fc 01       	movw	r30, r24
    61ec:	25 91       	lpm	r18, Z+
    61ee:	34 91       	lpm	r19, Z+
    61f0:	f9 01       	movw	r30, r18
    61f2:	19 95       	eicall
    61f4:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    61f6:	c9 01       	movw	r24, r18
    61f8:	08 95       	ret

000061fa <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(USB.flags)) xio_putc_usb(USB.c, stdout);
    61fa:	80 91 e6 23 	lds	r24, 0x23E6
    61fe:	84 ff       	sbrs	r24, 4
    6200:	08 c0       	rjmp	.+16     	; 0x6212 <_getc_char+0x18>
    6202:	60 91 10 25 	lds	r22, 0x2510
    6206:	70 91 11 25 	lds	r23, 0x2511
    620a:	80 91 ea 23 	lds	r24, 0x23EA
    620e:	0e 94 3c 30 	call	0x6078	; 0x6078 <xio_putc_usb>
	return(USB.c);
}
    6212:	80 91 ea 23 	lds	r24, 0x23EA
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	08 95       	ret

0000621a <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(USB.flags)) USB.c = '\n';
    621a:	80 91 e6 23 	lds	r24, 0x23E6
    621e:	86 ff       	sbrs	r24, 6
    6220:	03 c0       	rjmp	.+6      	; 0x6228 <_getc_NEWLINE+0xe>
    6222:	8a e0       	ldi	r24, 0x0A	; 10
    6224:	80 93 ea 23 	sts	0x23EA, r24
	if (ECHO(USB.flags)) xio_putc_usb(USB.c, stdout);
    6228:	80 91 e6 23 	lds	r24, 0x23E6
    622c:	84 ff       	sbrs	r24, 4
    622e:	08 c0       	rjmp	.+16     	; 0x6240 <_getc_NEWLINE+0x26>
    6230:	60 91 10 25 	lds	r22, 0x2510
    6234:	70 91 11 25 	lds	r23, 0x2511
    6238:	80 91 ea 23 	lds	r24, 0x23EA
    623c:	0e 94 3c 30 	call	0x6078	; 0x6078 <xio_putc_usb>
	return(USB.c);
}
    6240:	80 91 ea 23 	lds	r24, 0x23EA
    6244:	90 e0       	ldi	r25, 0x00	; 0
    6246:	08 95       	ret

00006248 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(USB.flags)) {
    6248:	80 91 e6 23 	lds	r24, 0x23E6
    624c:	87 ff       	sbrs	r24, 7
    624e:	03 c0       	rjmp	.+6      	; 0x6256 <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    6250:	0e 94 0d 31 	call	0x621a	; 0x621a <_getc_NEWLINE>
    6254:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    6256:	0e 94 fd 30 	call	0x61fa	; 0x61fa <_getc_char>
}
    625a:	08 95       	ret

0000625c <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	USB.sig = XIO_SIG_DELETE;
    625c:	89 e0       	ldi	r24, 0x09	; 9
    625e:	80 93 e9 23 	sts	0x23E9, r24
	return(_FDEV_ERR);
}
    6262:	8f ef       	ldi	r24, 0xFF	; 255
    6264:	9f ef       	ldi	r25, 0xFF	; 255
    6266:	08 95       	ret

00006268 <_xio_usb_readchar>:
	}
}

int _xio_usb_readchar(char *buf, uint8_t len)
{
	if (USBu.rx_buf_head == USBu.rx_buf_tail) {	// RX ISR buffer empty
    6268:	90 91 62 23 	lds	r25, 0x2362
    626c:	80 91 61 23 	lds	r24, 0x2361
    6270:	98 17       	cp	r25, r24
    6272:	19 f4       	brne	.+6      	; 0x627a <_xio_usb_readchar+0x12>
    6274:	28 e0       	ldi	r18, 0x08	; 8
    6276:	30 e0       	ldi	r19, 0x00	; 0
    6278:	20 c0       	rjmp	.+64     	; 0x62ba <_xio_usb_readchar+0x52>
		return(TG_BUFFER_EMPTY);
	}
	if (--(USBu.rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
    627a:	80 91 61 23 	lds	r24, 0x2361
    627e:	81 50       	subi	r24, 0x01	; 1
    6280:	80 93 61 23 	sts	0x2361, r24
    6284:	80 91 61 23 	lds	r24, 0x2361
    6288:	88 23       	and	r24, r24
    628a:	19 f4       	brne	.+6      	; 0x6292 <_xio_usb_readchar+0x2a>
		USBu.rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    628c:	81 e1       	ldi	r24, 0x11	; 17
    628e:	80 93 61 23 	sts	0x2361, r24
	}
	USB.c = (USBu.rx_buf[USBu.rx_buf_tail] & 0x007F); // get char from RX Q & mask MSB
    6292:	e0 91 61 23 	lds	r30, 0x2361
    6296:	f0 e0       	ldi	r31, 0x00	; 0
    6298:	e0 5d       	subi	r30, 0xD0	; 208
    629a:	fc 4d       	sbci	r31, 0xDC	; 220
    629c:	82 ad       	ldd	r24, Z+58	; 0x3a
    629e:	8f 77       	andi	r24, 0x7F	; 127
    62a0:	80 93 ea 23 	sts	0x23EA, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[USB.c])))()); // dispatch char
    62a4:	90 e0       	ldi	r25, 0x00	; 0
    62a6:	88 0f       	add	r24, r24
    62a8:	99 1f       	adc	r25, r25
    62aa:	87 50       	subi	r24, 0x07	; 7
    62ac:	96 4e       	sbci	r25, 0xE6	; 230
    62ae:	fc 01       	movw	r30, r24
    62b0:	25 91       	lpm	r18, Z+
    62b2:	34 91       	lpm	r19, Z+
    62b4:	f9 01       	movw	r30, r18
    62b6:	19 95       	eicall
    62b8:	9c 01       	movw	r18, r24
}
    62ba:	c9 01       	movw	r24, r18
    62bc:	08 95       	ret

000062be <xio_readln_usb>:

int xio_readln_usb(char *buf, uint8_t size)
{
//	uint8_t status = 0;

	if (!IN_LINE(USB.flags)) {					// first time thru initializations
    62be:	20 91 e6 23 	lds	r18, 0x23E6
    62c2:	30 91 e7 23 	lds	r19, 0x23E7
    62c6:	36 fd       	sbrc	r19, 6
    62c8:	11 c0       	rjmp	.+34     	; 0x62ec <xio_readln_usb+0x2e>
		USB.len = 0;							// zero buffer
    62ca:	10 92 eb 23 	sts	0x23EB, r1
		USB.status = 0;
    62ce:	10 92 e8 23 	sts	0x23E8, r1
		USB.size = size;
    62d2:	60 93 ec 23 	sts	0x23EC, r22
		USB.buf = buf;
    62d6:	80 93 fb 23 	sts	0x23FB, r24
    62da:	90 93 fc 23 	sts	0x23FC, r25
		USB.sig = XIO_SIG_OK;					// reset signal register
    62de:	10 92 e9 23 	sts	0x23E9, r1
		USB.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    62e2:	30 64       	ori	r19, 0x40	; 64
    62e4:	20 93 e6 23 	sts	0x23E6, r18
    62e8:	30 93 e7 23 	sts	0x23E7, r19
	}
	while (TRUE) { 
		switch (USB.status = _xio_usb_readchar(USB.buf, USB.size)) {
    62ec:	80 91 fb 23 	lds	r24, 0x23FB
    62f0:	90 91 fc 23 	lds	r25, 0x23FC
    62f4:	60 91 ec 23 	lds	r22, 0x23EC
    62f8:	0e 94 34 31 	call	0x6268	; 0x6268 <_xio_usb_readchar>
    62fc:	80 93 e8 23 	sts	0x23E8, r24
    6300:	87 30       	cpi	r24, 0x07	; 7
    6302:	29 f0       	breq	.+10     	; 0x630e <xio_readln_usb+0x50>
    6304:	88 30       	cpi	r24, 0x08	; 8
    6306:	31 f0       	breq	.+12     	; 0x6314 <xio_readln_usb+0x56>
    6308:	84 30       	cpi	r24, 0x04	; 4
    630a:	81 f7       	brne	.-32     	; 0x62ec <xio_readln_usb+0x2e>
    630c:	06 c0       	rjmp	.+12     	; 0x631a <xio_readln_usb+0x5c>
    630e:	27 e0       	ldi	r18, 0x07	; 7
    6310:	30 e0       	ldi	r19, 0x00	; 0
    6312:	05 c0       	rjmp	.+10     	; 0x631e <xio_readln_usb+0x60>
    6314:	21 e0       	ldi	r18, 0x01	; 1
    6316:	30 e0       	ldi	r19, 0x00	; 0
    6318:	02 c0       	rjmp	.+4      	; 0x631e <xio_readln_usb+0x60>
    631a:	20 e0       	ldi	r18, 0x00	; 0
    631c:	30 e0       	ldi	r19, 0x00	; 0
			case (TG_BUFFER_FULL): return (USB.status); break;	// overrun error
			case (TG_EOL): return (TG_OK); break;				// got completed line
			case (TG_EAGAIN): break;							// loop
		}
	}
}
    631e:	c9 01       	movw	r24, r18
    6320:	08 95       	ret

00006322 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (USB.len > USB.size) {						// trap buffer overflow
    6322:	90 91 eb 23 	lds	r25, 0x23EB
    6326:	20 91 ec 23 	lds	r18, 0x23EC
    632a:	e0 91 fb 23 	lds	r30, 0x23FB
    632e:	f0 91 fc 23 	lds	r31, 0x23FC
    6332:	29 17       	cp	r18, r25
    6334:	48 f4       	brcc	.+18     	; 0x6348 <_readln_char+0x26>
		USB.sig = XIO_SIG_EOL;
    6336:	82 e0       	ldi	r24, 0x02	; 2
    6338:	80 93 e9 23 	sts	0x23E9, r24
		USB.buf[USB.size] = NUL;					// size is zero based
    633c:	e2 0f       	add	r30, r18
    633e:	f1 1d       	adc	r31, r1
    6340:	10 82       	st	Z, r1
    6342:	27 e0       	ldi	r18, 0x07	; 7
    6344:	30 e0       	ldi	r19, 0x00	; 0
    6346:	16 c0       	rjmp	.+44     	; 0x6374 <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	USB.buf[USB.len++] = USB.c;
    6348:	e9 0f       	add	r30, r25
    634a:	f1 1d       	adc	r31, r1
    634c:	80 91 ea 23 	lds	r24, 0x23EA
    6350:	80 83       	st	Z, r24
    6352:	9f 5f       	subi	r25, 0xFF	; 255
    6354:	90 93 eb 23 	sts	0x23EB, r25
	if (ECHO(USB.flags)) xio_putc_usb(USB.c, stdout);// conditional echo
    6358:	80 91 e6 23 	lds	r24, 0x23E6
    635c:	84 ff       	sbrs	r24, 4
    635e:	08 c0       	rjmp	.+16     	; 0x6370 <_readln_char+0x4e>
    6360:	60 91 10 25 	lds	r22, 0x2510
    6364:	70 91 11 25 	lds	r23, 0x2511
    6368:	80 91 ea 23 	lds	r24, 0x23EA
    636c:	0e 94 3c 30 	call	0x6078	; 0x6078 <xio_putc_usb>
    6370:	21 e0       	ldi	r18, 0x01	; 1
    6372:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_EAGAIN);							// line is still in process
}
    6374:	c9 01       	movw	r24, r18
    6376:	08 95       	ret

00006378 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	USB.sig = XIO_SIG_EOL;
    6378:	82 e0       	ldi	r24, 0x02	; 2
    637a:	80 93 e9 23 	sts	0x23E9, r24
	USB.buf[USB.len] = NUL;
    637e:	80 91 eb 23 	lds	r24, 0x23EB
    6382:	e0 91 fb 23 	lds	r30, 0x23FB
    6386:	f0 91 fc 23 	lds	r31, 0x23FC
    638a:	e8 0f       	add	r30, r24
    638c:	f1 1d       	adc	r31, r1
    638e:	10 82       	st	Z, r1
	USB.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    6390:	20 91 e6 23 	lds	r18, 0x23E6
    6394:	30 91 e7 23 	lds	r19, 0x23E7
    6398:	c9 01       	movw	r24, r18
    639a:	9f 7b       	andi	r25, 0xBF	; 191
    639c:	80 93 e6 23 	sts	0x23E6, r24
    63a0:	90 93 e7 23 	sts	0x23E7, r25
	if (ECHO(USB.flags)) xio_putc_usb('\n',stdout);// echo a newline
    63a4:	24 ff       	sbrs	r18, 4
    63a6:	07 c0       	rjmp	.+14     	; 0x63b6 <_readln_NEWLINE+0x3e>
    63a8:	60 91 10 25 	lds	r22, 0x2510
    63ac:	70 91 11 25 	lds	r23, 0x2511
    63b0:	8a e0       	ldi	r24, 0x0A	; 10
    63b2:	0e 94 3c 30 	call	0x6078	; 0x6078 <xio_putc_usb>
	return (TG_EOL);							// return for end-of-line
}
    63b6:	84 e0       	ldi	r24, 0x04	; 4
    63b8:	90 e0       	ldi	r25, 0x00	; 0
    63ba:	08 95       	ret

000063bc <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(USB.flags)) {
    63bc:	80 91 e6 23 	lds	r24, 0x23E6
    63c0:	87 ff       	sbrs	r24, 7
    63c2:	03 c0       	rjmp	.+6      	; 0x63ca <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    63c4:	0e 94 bc 31 	call	0x6378	; 0x6378 <_readln_NEWLINE>
    63c8:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    63ca:	0e 94 91 31 	call	0x6322	; 0x6322 <_readln_char>
	}
}
    63ce:	08 95       	ret

000063d0 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--USB.len >= 0) {
    63d0:	80 91 eb 23 	lds	r24, 0x23EB
    63d4:	81 50       	subi	r24, 0x01	; 1
    63d6:	80 93 eb 23 	sts	0x23EB, r24
		if (ECHO(USB.flags)) xio_putc_usb(USB.c, stdout);
    63da:	80 91 e6 23 	lds	r24, 0x23E6
    63de:	84 ff       	sbrs	r24, 4
    63e0:	08 c0       	rjmp	.+16     	; 0x63f2 <_readln_DELETE+0x22>
    63e2:	60 91 10 25 	lds	r22, 0x2510
    63e6:	70 91 11 25 	lds	r23, 0x2511
    63ea:	80 91 ea 23 	lds	r24, 0x23EA
    63ee:	0e 94 3c 30 	call	0x6078	; 0x6078 <xio_putc_usb>
	} else {
		USB.len = 0;
	}
	return (TG_EAGAIN);							// line is still in process
}
    63f2:	81 e0       	ldi	r24, 0x01	; 1
    63f4:	90 e0       	ldi	r25, 0x00	; 0
    63f6:	08 95       	ret

000063f8 <_sig_KILL>:
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
	USB.sig = XIO_SIG_KILL;
    63f8:	84 e0       	ldi	r24, 0x04	; 4
    63fa:	80 93 e9 23 	sts	0x23E9, r24
	return(_FDEV_ERR);
}
    63fe:	8f ef       	ldi	r24, 0xFF	; 255
    6400:	9f ef       	ldi	r25, 0xFF	; 255
    6402:	08 95       	ret

00006404 <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
	USB.sig = XIO_SIG_PAUSE;
    6404:	86 e0       	ldi	r24, 0x06	; 6
    6406:	80 93 e9 23 	sts	0x23E9, r24
	return(_FDEV_ERR);
}
    640a:	8f ef       	ldi	r24, 0xFF	; 255
    640c:	9f ef       	ldi	r25, 0xFF	; 255
    640e:	08 95       	ret

00006410 <_sig_RESUME>:

static int _sig_RESUME(void)
{
	USB.sig = XIO_SIG_RESUME;
    6410:	87 e0       	ldi	r24, 0x07	; 7
    6412:	80 93 e9 23 	sts	0x23E9, r24
	return(_FDEV_ERR);
}
    6416:	8f ef       	ldi	r24, 0xFF	; 255
    6418:	9f ef       	ldi	r25, 0xFF	; 255
    641a:	08 95       	ret

0000641c <xio_setflags_usb>:
/*
 *	xio_setflags_usb() - check and set control flags for device
 */

int xio_setflags_usb(const uint16_t control)
{
    641c:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_USB, control);
    641e:	81 e0       	ldi	r24, 0x01	; 1
    6420:	0e 94 22 28 	call	0x5044	; 0x5044 <xio_setflags>
	return (TG_OK);									// for now it's always OK
}
    6424:	80 e0       	ldi	r24, 0x00	; 0
    6426:	90 e0       	ldi	r25, 0x00	; 0
    6428:	08 95       	ret

0000642a <xio_usb_queue_RX_char>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_usb_queue_RX_char(const char c)
{
    642a:	28 2f       	mov	r18, r24
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    642c:	83 30       	cpi	r24, 0x03	; 3
    642e:	31 f4       	brne	.+12     	; 0x643c <xio_usb_queue_RX_char+0x12>
		USB.sig = XIO_SIG_KILL;					// set signal value
    6430:	84 e0       	ldi	r24, 0x04	; 4
    6432:	80 93 e9 23 	sts	0x23E9, r24
		signal_etx();							// call app-specific signal handler
    6436:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <signal_etx>
    643a:	08 95       	ret
		return;
	}

	// normal path
	if ((--USBu.rx_buf_head) == 0) { 			// wrap condition
    643c:	80 91 62 23 	lds	r24, 0x2362
    6440:	81 50       	subi	r24, 0x01	; 1
    6442:	80 93 62 23 	sts	0x2362, r24
    6446:	80 91 62 23 	lds	r24, 0x2362
    644a:	88 23       	and	r24, r24
    644c:	19 f4       	brne	.+6      	; 0x6454 <xio_usb_queue_RX_char+0x2a>
		USBu.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    644e:	81 e1       	ldi	r24, 0x11	; 17
    6450:	80 93 62 23 	sts	0x2362, r24
	}
	if (USBu.rx_buf_head != USBu.rx_buf_tail) {	// write char unless buffer full
    6454:	90 91 62 23 	lds	r25, 0x2362
    6458:	80 91 61 23 	lds	r24, 0x2361
    645c:	98 17       	cp	r25, r24
    645e:	39 f0       	breq	.+14     	; 0x646e <xio_usb_queue_RX_char+0x44>
		USBu.rx_buf[USBu.rx_buf_head] = c;		// FAKE INPUT DATA
    6460:	e0 91 62 23 	lds	r30, 0x2362
    6464:	f0 e0       	ldi	r31, 0x00	; 0
    6466:	e0 5d       	subi	r30, 0xD0	; 208
    6468:	fc 4d       	sbci	r31, 0xDC	; 220
    646a:	22 af       	std	Z+58, r18	; 0x3a
    646c:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++USBu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    646e:	80 91 62 23 	lds	r24, 0x2362
    6472:	8f 5f       	subi	r24, 0xFF	; 255
    6474:	80 93 62 23 	sts	0x2362, r24
    6478:	80 91 62 23 	lds	r24, 0x2362
    647c:	82 31       	cpi	r24, 0x12	; 18
    647e:	18 f0       	brcs	.+6      	; 0x6486 <xio_usb_queue_RX_char+0x5c>
		USBu.rx_buf_head = 1;
    6480:	81 e0       	ldi	r24, 0x01	; 1
    6482:	80 93 62 23 	sts	0x2362, r24
    6486:	08 95       	ret

00006488 <xio_usb_queue_RX_string>:
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_usb_queue_RX_string(char *buf)
{
    6488:	1f 93       	push	r17
    648a:	cf 93       	push	r28
    648c:	df 93       	push	r29
    648e:	ec 01       	movw	r28, r24
    6490:	10 e0       	ldi	r17, 0x00	; 0
    6492:	02 c0       	rjmp	.+4      	; 0x6498 <xio_usb_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    6494:	0e 94 15 32 	call	0x642a	; 0x642a <xio_usb_queue_RX_char>
void xio_usb_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    6498:	fe 01       	movw	r30, r28
    649a:	e1 0f       	add	r30, r17
    649c:	f1 1d       	adc	r31, r1
    649e:	80 81       	ld	r24, Z
    64a0:	1f 5f       	subi	r17, 0xFF	; 255
    64a2:	88 23       	and	r24, r24
    64a4:	b9 f7       	brne	.-18     	; 0x6494 <xio_usb_queue_RX_string+0xc>
		xio_usb_queue_RX_char(c);
	}
}
    64a6:	df 91       	pop	r29
    64a8:	cf 91       	pop	r28
    64aa:	1f 91       	pop	r17
    64ac:	08 95       	ret

000064ae <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    64ae:	1f 92       	push	r1
    64b0:	0f 92       	push	r0
    64b2:	0f b6       	in	r0, 0x3f	; 63
    64b4:	0f 92       	push	r0
    64b6:	0b b6       	in	r0, 0x3b	; 59
    64b8:	0f 92       	push	r0
    64ba:	11 24       	eor	r1, r1
    64bc:	2f 93       	push	r18
    64be:	3f 93       	push	r19
    64c0:	4f 93       	push	r20
    64c2:	5f 93       	push	r21
    64c4:	6f 93       	push	r22
    64c6:	7f 93       	push	r23
    64c8:	8f 93       	push	r24
    64ca:	9f 93       	push	r25
    64cc:	af 93       	push	r26
    64ce:	bf 93       	push	r27
    64d0:	ef 93       	push	r30
    64d2:	ff 93       	push	r31
	uint8_t c = USBu.usart->DATA;				// can only read DATA once
    64d4:	e0 91 66 23 	lds	r30, 0x2366
    64d8:	f0 91 67 23 	lds	r31, 0x2367
    64dc:	20 81       	ld	r18, Z

	// trap signals - do not insert character into RX queue
	if (c == ETX) {								// trap ^c signal
    64de:	23 30       	cpi	r18, 0x03	; 3
    64e0:	31 f4       	brne	.+12     	; 0x64ee <__vector_25+0x40>
		USB.sig = XIO_SIG_KILL;					// set signal value
    64e2:	84 e0       	ldi	r24, 0x04	; 4
    64e4:	80 93 e9 23 	sts	0x23E9, r24
		signal_etx();							// call app-specific signal handler
    64e8:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <signal_etx>
    64ec:	25 c0       	rjmp	.+74     	; 0x6538 <__vector_25+0x8a>
		return;
	}

	// normal character path
	if ((--USBu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    64ee:	80 91 62 23 	lds	r24, 0x2362
    64f2:	81 50       	subi	r24, 0x01	; 1
    64f4:	80 93 62 23 	sts	0x2362, r24
    64f8:	80 91 62 23 	lds	r24, 0x2362
    64fc:	88 23       	and	r24, r24
    64fe:	19 f4       	brne	.+6      	; 0x6506 <__vector_25+0x58>
		USBu.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    6500:	81 e1       	ldi	r24, 0x11	; 17
    6502:	80 93 62 23 	sts	0x2362, r24
	}
	if (USBu.rx_buf_head != USBu.rx_buf_tail) {	// write char unless buffer full
    6506:	90 91 62 23 	lds	r25, 0x2362
    650a:	80 91 61 23 	lds	r24, 0x2361
    650e:	98 17       	cp	r25, r24
    6510:	39 f0       	breq	.+14     	; 0x6520 <__vector_25+0x72>
		USBu.rx_buf[USBu.rx_buf_head] = c;
    6512:	e0 91 62 23 	lds	r30, 0x2362
    6516:	f0 e0       	ldi	r31, 0x00	; 0
    6518:	e0 5d       	subi	r30, 0xD0	; 208
    651a:	fc 4d       	sbci	r31, 0xDC	; 220
    651c:	22 af       	std	Z+58, r18	; 0x3a
    651e:	0c c0       	rjmp	.+24     	; 0x6538 <__vector_25+0x8a>
		return;
	}
	// buffer-full handling
	if ((++USBu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6520:	80 91 62 23 	lds	r24, 0x2362
    6524:	8f 5f       	subi	r24, 0xFF	; 255
    6526:	80 93 62 23 	sts	0x2362, r24
    652a:	80 91 62 23 	lds	r24, 0x2362
    652e:	82 31       	cpi	r24, 0x12	; 18
    6530:	18 f0       	brcs	.+6      	; 0x6538 <__vector_25+0x8a>
		USBu.rx_buf_head = 1;
    6532:	81 e0       	ldi	r24, 0x01	; 1
    6534:	80 93 62 23 	sts	0x2362, r24
	}
	// activate flow control here or before it gets to this level
}
    6538:	ff 91       	pop	r31
    653a:	ef 91       	pop	r30
    653c:	bf 91       	pop	r27
    653e:	af 91       	pop	r26
    6540:	9f 91       	pop	r25
    6542:	8f 91       	pop	r24
    6544:	7f 91       	pop	r23
    6546:	6f 91       	pop	r22
    6548:	5f 91       	pop	r21
    654a:	4f 91       	pop	r20
    654c:	3f 91       	pop	r19
    654e:	2f 91       	pop	r18
    6550:	0f 90       	pop	r0
    6552:	0b be       	out	0x3b, r0	; 59
    6554:	0f 90       	pop	r0
    6556:	0f be       	out	0x3f, r0	; 63
    6558:	0f 90       	pop	r0
    655a:	1f 90       	pop	r1
    655c:	18 95       	reti

0000655e <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC0 data register empty
{
    655e:	1f 92       	push	r1
    6560:	0f 92       	push	r0
    6562:	0f b6       	in	r0, 0x3f	; 63
    6564:	0f 92       	push	r0
    6566:	0b b6       	in	r0, 0x3b	; 59
    6568:	0f 92       	push	r0
    656a:	11 24       	eor	r1, r1
    656c:	8f 93       	push	r24
    656e:	9f 93       	push	r25
    6570:	af 93       	push	r26
    6572:	bf 93       	push	r27
    6574:	ef 93       	push	r30
    6576:	ff 93       	push	r31
	if (RSu.tx_buf_head == RSu.tx_buf_tail) {	// buffer empty - disable ints
    6578:	90 91 35 23 	lds	r25, 0x2335
    657c:	80 91 34 23 	lds	r24, 0x2334
    6580:	98 17       	cp	r25, r24
    6582:	39 f4       	brne	.+14     	; 0x6592 <__vector_29+0x34>
		RSu.usart->CTRLA = CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    6584:	e0 91 37 23 	lds	r30, 0x2337
    6588:	f0 91 38 23 	lds	r31, 0x2338
    658c:	80 e2       	ldi	r24, 0x20	; 32
    658e:	83 83       	std	Z+3, r24	; 0x03
    6590:	1e c0       	rjmp	.+60     	; 0x65ce <__vector_29+0x70>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(RS.flags)) {
    6592:	80 91 cf 23 	lds	r24, 0x23CF
    6596:	90 91 d0 23 	lds	r25, 0x23D0
    659a:	93 fd       	sbrc	r25, 3
    659c:	18 c0       	rjmp	.+48     	; 0x65ce <__vector_29+0x70>
		if (--(RSu.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    659e:	80 91 34 23 	lds	r24, 0x2334
    65a2:	81 50       	subi	r24, 0x01	; 1
    65a4:	80 93 34 23 	sts	0x2334, r24
    65a8:	80 91 34 23 	lds	r24, 0x2334
    65ac:	88 23       	and	r24, r24
    65ae:	19 f4       	brne	.+6      	; 0x65b6 <__vector_29+0x58>
			RSu.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    65b0:	81 e1       	ldi	r24, 0x11	; 17
    65b2:	80 93 34 23 	sts	0x2334, r24
		}
		RSu.usart->DATA = RSu.tx_buf[RSu.tx_buf_tail];	// write char to TX DATA reg
    65b6:	e0 91 37 23 	lds	r30, 0x2337
    65ba:	f0 91 38 23 	lds	r31, 0x2338
    65be:	a0 91 34 23 	lds	r26, 0x2334
    65c2:	b0 e0       	ldi	r27, 0x00	; 0
    65c4:	a0 5d       	subi	r26, 0xD0	; 208
    65c6:	bc 4d       	sbci	r27, 0xDC	; 220
    65c8:	5d 96       	adiw	r26, 0x1d	; 29
    65ca:	8c 91       	ld	r24, X
    65cc:	80 83       	st	Z, r24
	}
}
    65ce:	ff 91       	pop	r31
    65d0:	ef 91       	pop	r30
    65d2:	bf 91       	pop	r27
    65d4:	af 91       	pop	r26
    65d6:	9f 91       	pop	r25
    65d8:	8f 91       	pop	r24
    65da:	0f 90       	pop	r0
    65dc:	0b be       	out	0x3b, r0	; 59
    65de:	0f 90       	pop	r0
    65e0:	0f be       	out	0x3f, r0	; 63
    65e2:	0f 90       	pop	r0
    65e4:	1f 90       	pop	r1
    65e6:	18 95       	reti

000065e8 <xio_open_rs485>:
 */

struct __file * xio_open_rs485()
{
	return(RS.fdev);
}
    65e8:	80 91 e2 23 	lds	r24, 0x23E2
    65ec:	90 91 e3 23 	lds	r25, 0x23E3
    65f0:	08 95       	ret

000065f2 <xio_putc_rs485>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_rs485(const char c, FILE *stream)
{
    65f2:	48 2f       	mov	r20, r24
	if ((RSu.next_tx_buf_head = RSu.tx_buf_head-1) == 0) { // advance head w/wrap
		RSu.next_tx_buf_head = TX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
	}
	while(RSu.next_tx_buf_head == RSu.tx_buf_tail) { // TX buffer full. sleep or ret
		if (BLOCKING(RS.flags)) {
    65f4:	20 91 cf 23 	lds	r18, 0x23CF
    65f8:	30 91 d0 23 	lds	r19, 0x23D0
    65fc:	d9 01       	movw	r26, r18
    65fe:	a4 70       	andi	r26, 0x04	; 4
    6600:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	RSu.tx_buf_head = RSu.next_tx_buf_head;			// accept next buffer head value
	RSu.tx_buf[RSu.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(RS.flags) && (c == '\n')) {			// detect LF and add a CR
    6602:	b9 01       	movw	r22, r18
    6604:	60 72       	andi	r22, 0x20	; 32
    6606:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_rs485(const char c, FILE *stream)
{
	if ((RSu.next_tx_buf_head = RSu.tx_buf_head-1) == 0) { // advance head w/wrap
    6608:	90 91 35 23 	lds	r25, 0x2335
    660c:	91 50       	subi	r25, 0x01	; 1
    660e:	c1 f4       	brne	.+48     	; 0x6640 <xio_putc_rs485+0x4e>
    6610:	91 e1       	ldi	r25, 0x11	; 17
    6612:	16 c0       	rjmp	.+44     	; 0x6640 <xio_putc_rs485+0x4e>
		RSu.next_tx_buf_head = TX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
	}
	while(RSu.next_tx_buf_head == RSu.tx_buf_tail) { // TX buffer full. sleep or ret
		if (BLOCKING(RS.flags)) {
    6614:	10 97       	sbiw	r26, 0x00	; 0
    6616:	61 f0       	breq	.+24     	; 0x6630 <xio_putc_rs485+0x3e>
			sleep_mode();
    6618:	80 91 48 00 	lds	r24, 0x0048
    661c:	81 60       	ori	r24, 0x01	; 1
    661e:	80 93 48 00 	sts	0x0048, r24
    6622:	88 95       	sleep
    6624:	80 91 48 00 	lds	r24, 0x0048
    6628:	8e 7f       	andi	r24, 0xFE	; 254
    662a:	80 93 48 00 	sts	0x0048, r24
    662e:	08 c0       	rjmp	.+16     	; 0x6640 <xio_putc_rs485+0x4e>
    6630:	90 93 36 23 	sts	0x2336, r25
		} else {
			RS.sig = XIO_SIG_EAGAIN;
    6634:	81 e0       	ldi	r24, 0x01	; 1
    6636:	80 93 d2 23 	sts	0x23D2, r24
    663a:	2f ef       	ldi	r18, 0xFF	; 255
    663c:	3f ef       	ldi	r19, 0xFF	; 255
    663e:	54 c0       	rjmp	.+168    	; 0x66e8 <xio_putc_rs485+0xf6>
int xio_putc_rs485(const char c, FILE *stream)
{
	if ((RSu.next_tx_buf_head = RSu.tx_buf_head-1) == 0) { // advance head w/wrap
		RSu.next_tx_buf_head = TX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
	}
	while(RSu.next_tx_buf_head == RSu.tx_buf_tail) { // TX buffer full. sleep or ret
    6640:	80 91 34 23 	lds	r24, 0x2334
    6644:	98 17       	cp	r25, r24
    6646:	31 f3       	breq	.-52     	; 0x6614 <xio_putc_rs485+0x22>
			RS.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	RSu.tx_buf_head = RSu.next_tx_buf_head;			// accept next buffer head value
    6648:	90 93 35 23 	sts	0x2335, r25
	RSu.tx_buf[RSu.tx_buf_head] = c;				// ...and write char to buffer
    664c:	e0 91 35 23 	lds	r30, 0x2335
    6650:	f0 e0       	ldi	r31, 0x00	; 0
    6652:	e0 5d       	subi	r30, 0xD0	; 208
    6654:	fc 4d       	sbci	r31, 0xDC	; 220
    6656:	45 8f       	std	Z+29, r20	; 0x1d

	if (CRLF(RS.flags) && (c == '\n')) {			// detect LF and add a CR
    6658:	61 15       	cp	r22, r1
    665a:	71 05       	cpc	r23, r1
    665c:	21 f0       	breq	.+8      	; 0x6666 <xio_putc_rs485+0x74>
    665e:	4a 30       	cpi	r20, 0x0A	; 10
    6660:	11 f4       	brne	.+4      	; 0x6666 <xio_putc_rs485+0x74>
    6662:	4d e0       	ldi	r20, 0x0D	; 13
    6664:	d1 cf       	rjmp	.-94     	; 0x6608 <xio_putc_rs485+0x16>
    6666:	90 93 36 23 	sts	0x2336, r25
		return xio_putc_rs485('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (RSu.usart->STATUS & 0x20) {
    666a:	a0 91 37 23 	lds	r26, 0x2337
    666e:	b0 91 38 23 	lds	r27, 0x2338
    6672:	11 96       	adiw	r26, 0x01	; 1
    6674:	8c 91       	ld	r24, X
    6676:	11 97       	sbiw	r26, 0x01	; 1
    6678:	85 ff       	sbrs	r24, 5
    667a:	27 c0       	rjmp	.+78     	; 0x66ca <xio_putc_rs485+0xd8>
		if (RSu.tx_buf_head == RSu.tx_buf_tail) {	// buf may be empty if IRQ got it
    667c:	90 91 35 23 	lds	r25, 0x2335
    6680:	80 91 34 23 	lds	r24, 0x2334
    6684:	98 17       	cp	r25, r24
    6686:	71 f1       	breq	.+92     	; 0x66e4 <xio_putc_rs485+0xf2>
			return (0);
		}
		RS.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    6688:	38 60       	ori	r19, 0x08	; 8
    668a:	20 93 cf 23 	sts	0x23CF, r18
    668e:	30 93 d0 23 	sts	0x23D0, r19
		if (--(RSu.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    6692:	80 91 34 23 	lds	r24, 0x2334
    6696:	81 50       	subi	r24, 0x01	; 1
    6698:	80 93 34 23 	sts	0x2334, r24
    669c:	80 91 34 23 	lds	r24, 0x2334
    66a0:	88 23       	and	r24, r24
    66a2:	19 f4       	brne	.+6      	; 0x66aa <xio_putc_rs485+0xb8>
			RSu.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    66a4:	81 e1       	ldi	r24, 0x11	; 17
    66a6:	80 93 34 23 	sts	0x2334, r24
		}
		RSu.usart->DATA = RSu.tx_buf[RSu.tx_buf_tail];// write char to TX DATA reg
    66aa:	e0 91 34 23 	lds	r30, 0x2334
    66ae:	f0 e0       	ldi	r31, 0x00	; 0
    66b0:	e0 5d       	subi	r30, 0xD0	; 208
    66b2:	fc 4d       	sbci	r31, 0xDC	; 220
    66b4:	85 8d       	ldd	r24, Z+29	; 0x1d
    66b6:	8c 93       	st	X, r24
		RS.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    66b8:	80 91 cf 23 	lds	r24, 0x23CF
    66bc:	90 91 d0 23 	lds	r25, 0x23D0
    66c0:	97 7f       	andi	r25, 0xF7	; 247
    66c2:	80 93 cf 23 	sts	0x23CF, r24
    66c6:	90 93 d0 23 	sts	0x23D0, r25
	}
	// enable interrupts regardless
	RSu.usart->CTRLA = CTRLA_RXON_TXON;			// won't work if you just |= it
    66ca:	e0 91 37 23 	lds	r30, 0x2337
    66ce:	f0 91 38 23 	lds	r31, 0x2338
    66d2:	81 e2       	ldi	r24, 0x21	; 33
    66d4:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    66d6:	80 91 a2 00 	lds	r24, 0x00A2
    66da:	81 60       	ori	r24, 0x01	; 1
    66dc:	e0 ea       	ldi	r30, 0xA0	; 160
    66de:	f0 e0       	ldi	r31, 0x00	; 0
    66e0:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    66e2:	78 94       	sei
    66e4:	20 e0       	ldi	r18, 0x00	; 0
    66e6:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    66e8:	c9 01       	movw	r24, r18
    66ea:	08 95       	ret

000066ec <xio_getc_rs485>:
 */

int xio_getc_rs485(FILE *stream)
{
	while (RSu.rx_buf_head == RSu.rx_buf_tail) {// RX ISR buffer empty
		if (BLOCKING(RS.flags)) {
    66ec:	20 91 cf 23 	lds	r18, 0x23CF
    66f0:	30 91 d0 23 	lds	r19, 0x23D0
    66f4:	24 70       	andi	r18, 0x04	; 4
    66f6:	30 70       	andi	r19, 0x00	; 0
    66f8:	15 c0       	rjmp	.+42     	; 0x6724 <xio_getc_rs485+0x38>
    66fa:	21 15       	cp	r18, r1
    66fc:	31 05       	cpc	r19, r1
    66fe:	61 f0       	breq	.+24     	; 0x6718 <xio_getc_rs485+0x2c>
			sleep_mode();
    6700:	80 91 48 00 	lds	r24, 0x0048
    6704:	81 60       	ori	r24, 0x01	; 1
    6706:	80 93 48 00 	sts	0x0048, r24
    670a:	88 95       	sleep
    670c:	80 91 48 00 	lds	r24, 0x0048
    6710:	8e 7f       	andi	r24, 0xFE	; 254
    6712:	80 93 48 00 	sts	0x0048, r24
    6716:	06 c0       	rjmp	.+12     	; 0x6724 <xio_getc_rs485+0x38>
		} else {
			RS.sig = XIO_SIG_EAGAIN;
    6718:	81 e0       	ldi	r24, 0x01	; 1
    671a:	80 93 d2 23 	sts	0x23D2, r24
    671e:	2f ef       	ldi	r18, 0xFF	; 255
    6720:	3f ef       	ldi	r19, 0xFF	; 255
    6722:	26 c0       	rjmp	.+76     	; 0x6770 <xio_getc_rs485+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_getc_rs485(FILE *stream)
{
	while (RSu.rx_buf_head == RSu.rx_buf_tail) {// RX ISR buffer empty
    6724:	90 91 33 23 	lds	r25, 0x2333
    6728:	80 91 32 23 	lds	r24, 0x2332
    672c:	98 17       	cp	r25, r24
    672e:	29 f3       	breq	.-54     	; 0x66fa <xio_getc_rs485+0xe>
		} else {
			RS.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(RSu.rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
    6730:	80 91 32 23 	lds	r24, 0x2332
    6734:	81 50       	subi	r24, 0x01	; 1
    6736:	80 93 32 23 	sts	0x2332, r24
    673a:	80 91 32 23 	lds	r24, 0x2332
    673e:	88 23       	and	r24, r24
    6740:	19 f4       	brne	.+6      	; 0x6748 <xio_getc_rs485+0x5c>
		RSu.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6742:	81 e1       	ldi	r24, 0x11	; 17
    6744:	80 93 32 23 	sts	0x2332, r24
	}
	RS.c = (RSu.rx_buf[RSu.rx_buf_tail] & 0x007F);	// get char from RX & mask MSB
    6748:	e0 91 32 23 	lds	r30, 0x2332
    674c:	f0 e0       	ldi	r31, 0x00	; 0
    674e:	e0 5d       	subi	r30, 0xD0	; 208
    6750:	fc 4d       	sbci	r31, 0xDC	; 220
    6752:	83 85       	ldd	r24, Z+11	; 0x0b
    6754:	8f 77       	andi	r24, 0x7F	; 127
    6756:	80 93 d3 23 	sts	0x23D3, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[RS.c])))());
    675a:	90 e0       	ldi	r25, 0x00	; 0
    675c:	88 0f       	add	r24, r24
    675e:	99 1f       	adc	r25, r25
    6760:	87 50       	subi	r24, 0x07	; 7
    6762:	93 4e       	sbci	r25, 0xE3	; 227
    6764:	fc 01       	movw	r30, r24
    6766:	25 91       	lpm	r18, Z+
    6768:	34 91       	lpm	r19, Z+
    676a:	f9 01       	movw	r30, r18
    676c:	19 95       	eicall
    676e:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    6770:	c9 01       	movw	r24, r18
    6772:	08 95       	ret

00006774 <_getc_char>:

/* xio_rs485_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(RS.flags)) xio_putc_rs485(RS.c, stdout);
    6774:	80 91 cf 23 	lds	r24, 0x23CF
    6778:	84 ff       	sbrs	r24, 4
    677a:	08 c0       	rjmp	.+16     	; 0x678c <_getc_char+0x18>
    677c:	60 91 10 25 	lds	r22, 0x2510
    6780:	70 91 11 25 	lds	r23, 0x2511
    6784:	80 91 d3 23 	lds	r24, 0x23D3
    6788:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <xio_putc_rs485>
	return(RS.c);
}
    678c:	80 91 d3 23 	lds	r24, 0x23D3
    6790:	90 e0       	ldi	r25, 0x00	; 0
    6792:	08 95       	ret

00006794 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(RS.flags)) RS.c = '\n';
    6794:	80 91 cf 23 	lds	r24, 0x23CF
    6798:	86 ff       	sbrs	r24, 6
    679a:	03 c0       	rjmp	.+6      	; 0x67a2 <_getc_NEWLINE+0xe>
    679c:	8a e0       	ldi	r24, 0x0A	; 10
    679e:	80 93 d3 23 	sts	0x23D3, r24
	if (ECHO(RS.flags)) xio_putc_rs485(RS.c, stdout);
    67a2:	80 91 cf 23 	lds	r24, 0x23CF
    67a6:	84 ff       	sbrs	r24, 4
    67a8:	08 c0       	rjmp	.+16     	; 0x67ba <_getc_NEWLINE+0x26>
    67aa:	60 91 10 25 	lds	r22, 0x2510
    67ae:	70 91 11 25 	lds	r23, 0x2511
    67b2:	80 91 d3 23 	lds	r24, 0x23D3
    67b6:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <xio_putc_rs485>
	return(RS.c);
}
    67ba:	80 91 d3 23 	lds	r24, 0x23D3
    67be:	90 e0       	ldi	r25, 0x00	; 0
    67c0:	08 95       	ret

000067c2 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(RS.flags)) {
    67c2:	80 91 cf 23 	lds	r24, 0x23CF
    67c6:	87 ff       	sbrs	r24, 7
    67c8:	03 c0       	rjmp	.+6      	; 0x67d0 <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    67ca:	0e 94 ca 33 	call	0x6794	; 0x6794 <_getc_NEWLINE>
    67ce:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    67d0:	0e 94 ba 33 	call	0x6774	; 0x6774 <_getc_char>
}
    67d4:	08 95       	ret

000067d6 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	RS.sig = XIO_SIG_DELETE;
    67d6:	89 e0       	ldi	r24, 0x09	; 9
    67d8:	80 93 d2 23 	sts	0x23D2, r24
	return(_FDEV_ERR);
}
    67dc:	8f ef       	ldi	r24, 0xFF	; 255
    67de:	9f ef       	ldi	r25, 0xFF	; 255
    67e0:	08 95       	ret

000067e2 <xio_readln_rs485>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_rs485(char *buf, uint8_t size)
{
	if (!IN_LINE(RS.flags)) {					// first time thru initializations
    67e2:	20 91 cf 23 	lds	r18, 0x23CF
    67e6:	30 91 d0 23 	lds	r19, 0x23D0
    67ea:	36 fd       	sbrc	r19, 6
    67ec:	11 c0       	rjmp	.+34     	; 0x6810 <xio_readln_rs485+0x2e>
		RS.len = 0;								// zero buffer
    67ee:	10 92 d4 23 	sts	0x23D4, r1
		RS.status = 0;
    67f2:	10 92 d1 23 	sts	0x23D1, r1
		RS.size = size;
    67f6:	60 93 d5 23 	sts	0x23D5, r22
		RS.buf = buf;
    67fa:	80 93 e4 23 	sts	0x23E4, r24
    67fe:	90 93 e5 23 	sts	0x23E5, r25
		RS.sig = XIO_SIG_OK;					// no signal action
    6802:	10 92 d2 23 	sts	0x23D2, r1
		RS.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    6806:	30 64       	ori	r19, 0x40	; 64
    6808:	20 93 cf 23 	sts	0x23CF, r18
    680c:	30 93 d0 23 	sts	0x23D0, r19
	}
	if (RSu.rx_buf_head == RSu.rx_buf_tail) {	// RX ISR buffer empty
    6810:	90 91 33 23 	lds	r25, 0x2333
    6814:	80 91 32 23 	lds	r24, 0x2332
    6818:	98 17       	cp	r25, r24
    681a:	19 f4       	brne	.+6      	; 0x6822 <xio_readln_rs485+0x40>
    681c:	21 e0       	ldi	r18, 0x01	; 1
    681e:	30 e0       	ldi	r19, 0x00	; 0
    6820:	20 c0       	rjmp	.+64     	; 0x6862 <xio_readln_rs485+0x80>
//		RS.sig = XIO_SIG_EAGAIN;
		return(TG_EAGAIN);
	}
	if (--(RSu.rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
    6822:	80 91 32 23 	lds	r24, 0x2332
    6826:	81 50       	subi	r24, 0x01	; 1
    6828:	80 93 32 23 	sts	0x2332, r24
    682c:	80 91 32 23 	lds	r24, 0x2332
    6830:	88 23       	and	r24, r24
    6832:	19 f4       	brne	.+6      	; 0x683a <xio_readln_rs485+0x58>
		RSu.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6834:	81 e1       	ldi	r24, 0x11	; 17
    6836:	80 93 32 23 	sts	0x2332, r24
	}
	RS.c = (RSu.rx_buf[RSu.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    683a:	e0 91 32 23 	lds	r30, 0x2332
    683e:	f0 e0       	ldi	r31, 0x00	; 0
    6840:	e0 5d       	subi	r30, 0xD0	; 208
    6842:	fc 4d       	sbci	r31, 0xDC	; 220
    6844:	83 85       	ldd	r24, Z+11	; 0x0b
    6846:	8f 77       	andi	r24, 0x7F	; 127
    6848:	80 93 d3 23 	sts	0x23D3, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[RS.c])))()); // dispatch char
    684c:	90 e0       	ldi	r25, 0x00	; 0
    684e:	88 0f       	add	r24, r24
    6850:	99 1f       	adc	r25, r25
    6852:	87 50       	subi	r24, 0x07	; 7
    6854:	94 4e       	sbci	r25, 0xE4	; 228
    6856:	fc 01       	movw	r30, r24
    6858:	25 91       	lpm	r18, Z+
    685a:	34 91       	lpm	r19, Z+
    685c:	f9 01       	movw	r30, r18
    685e:	19 95       	eicall
    6860:	9c 01       	movw	r18, r24
}
    6862:	c9 01       	movw	r24, r18
    6864:	08 95       	ret

00006866 <_readln_char>:

/* xio_rs485_readln helper routines */

static int _readln_char(void)
{
	if (RS.len > RS.size) {						// trap buffer overflow
    6866:	90 91 d4 23 	lds	r25, 0x23D4
    686a:	20 91 d5 23 	lds	r18, 0x23D5
    686e:	e0 91 e4 23 	lds	r30, 0x23E4
    6872:	f0 91 e5 23 	lds	r31, 0x23E5
    6876:	29 17       	cp	r18, r25
    6878:	48 f4       	brcc	.+18     	; 0x688c <_readln_char+0x26>
		RS.sig = XIO_SIG_EOL;
    687a:	82 e0       	ldi	r24, 0x02	; 2
    687c:	80 93 d2 23 	sts	0x23D2, r24
		RS.buf[RS.size] = NUL;					// RS.len is zero based
    6880:	e2 0f       	add	r30, r18
    6882:	f1 1d       	adc	r31, r1
    6884:	10 82       	st	Z, r1
    6886:	27 e0       	ldi	r18, 0x07	; 7
    6888:	30 e0       	ldi	r19, 0x00	; 0
    688a:	16 c0       	rjmp	.+44     	; 0x68b8 <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	RS.buf[RS.len++] = RS.c;
    688c:	e9 0f       	add	r30, r25
    688e:	f1 1d       	adc	r31, r1
    6890:	80 91 d3 23 	lds	r24, 0x23D3
    6894:	80 83       	st	Z, r24
    6896:	9f 5f       	subi	r25, 0xFF	; 255
    6898:	90 93 d4 23 	sts	0x23D4, r25
	if (ECHO(RS.flags)) xio_putc_rs485(RS.c, stdout);// conditional echo
    689c:	80 91 cf 23 	lds	r24, 0x23CF
    68a0:	84 ff       	sbrs	r24, 4
    68a2:	08 c0       	rjmp	.+16     	; 0x68b4 <_readln_char+0x4e>
    68a4:	60 91 10 25 	lds	r22, 0x2510
    68a8:	70 91 11 25 	lds	r23, 0x2511
    68ac:	80 91 d3 23 	lds	r24, 0x23D3
    68b0:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <xio_putc_rs485>
    68b4:	21 e0       	ldi	r18, 0x01	; 1
    68b6:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_EAGAIN);							// line is still in process
}
    68b8:	c9 01       	movw	r24, r18
    68ba:	08 95       	ret

000068bc <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handle valid newline char
{
	RS.sig = XIO_SIG_EOL;
    68bc:	82 e0       	ldi	r24, 0x02	; 2
    68be:	80 93 d2 23 	sts	0x23D2, r24
	RS.buf[RS.len] = NUL;
    68c2:	80 91 d4 23 	lds	r24, 0x23D4
    68c6:	e0 91 e4 23 	lds	r30, 0x23E4
    68ca:	f0 91 e5 23 	lds	r31, 0x23E5
    68ce:	e8 0f       	add	r30, r24
    68d0:	f1 1d       	adc	r31, r1
    68d2:	10 82       	st	Z, r1
	RS.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    68d4:	20 91 cf 23 	lds	r18, 0x23CF
    68d8:	30 91 d0 23 	lds	r19, 0x23D0
    68dc:	c9 01       	movw	r24, r18
    68de:	9f 7b       	andi	r25, 0xBF	; 191
    68e0:	80 93 cf 23 	sts	0x23CF, r24
    68e4:	90 93 d0 23 	sts	0x23D0, r25
	if (ECHO(RS.flags)) xio_putc_rs485('\n',stdout);// echo a newline
    68e8:	24 ff       	sbrs	r18, 4
    68ea:	07 c0       	rjmp	.+14     	; 0x68fa <_readln_NEWLINE+0x3e>
    68ec:	60 91 10 25 	lds	r22, 0x2510
    68f0:	70 91 11 25 	lds	r23, 0x2511
    68f4:	8a e0       	ldi	r24, 0x0A	; 10
    68f6:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <xio_putc_rs485>
	return 0;
}
    68fa:	80 e0       	ldi	r24, 0x00	; 0
    68fc:	90 e0       	ldi	r25, 0x00	; 0
    68fe:	08 95       	ret

00006900 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(RS.flags)) {
    6900:	80 91 cf 23 	lds	r24, 0x23CF
    6904:	87 ff       	sbrs	r24, 7
    6906:	03 c0       	rjmp	.+6      	; 0x690e <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi-mode treat as an EOL
    6908:	0e 94 5e 34 	call	0x68bc	; 0x68bc <_readln_NEWLINE>
    690c:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    690e:	0e 94 33 34 	call	0x6866	; 0x6866 <_readln_char>
	}
}
    6912:	08 95       	ret

00006914 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--RS.len >= 0) {
    6914:	80 91 d4 23 	lds	r24, 0x23D4
    6918:	81 50       	subi	r24, 0x01	; 1
    691a:	80 93 d4 23 	sts	0x23D4, r24
		if (ECHO(RS.flags)) xio_putc_rs485(RS.c, stdout);
    691e:	80 91 cf 23 	lds	r24, 0x23CF
    6922:	84 ff       	sbrs	r24, 4
    6924:	08 c0       	rjmp	.+16     	; 0x6936 <_readln_DELETE+0x22>
    6926:	60 91 10 25 	lds	r22, 0x2510
    692a:	70 91 11 25 	lds	r23, 0x2511
    692e:	80 91 d3 23 	lds	r24, 0x23D3
    6932:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <xio_putc_rs485>
	} else {
		RS.len = 0;
	}
	return (TG_EAGAIN);							// line is still in process
}
    6936:	81 e0       	ldi	r24, 0x01	; 1
    6938:	90 e0       	ldi	r25, 0x00	; 0
    693a:	08 95       	ret

0000693c <_sig_KILL>:
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
	RS.sig = XIO_SIG_KILL;
    693c:	84 e0       	ldi	r24, 0x04	; 4
    693e:	80 93 d2 23 	sts	0x23D2, r24
	return(_FDEV_ERR);
}
    6942:	8f ef       	ldi	r24, 0xFF	; 255
    6944:	9f ef       	ldi	r25, 0xFF	; 255
    6946:	08 95       	ret

00006948 <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
	RS.sig = XIO_SIG_PAUSE;
    6948:	86 e0       	ldi	r24, 0x06	; 6
    694a:	80 93 d2 23 	sts	0x23D2, r24
	return(_FDEV_ERR);
}
    694e:	8f ef       	ldi	r24, 0xFF	; 255
    6950:	9f ef       	ldi	r25, 0xFF	; 255
    6952:	08 95       	ret

00006954 <_sig_RESUME>:

static int _sig_RESUME(void)
{
	RS.sig = XIO_SIG_RESUME;
    6954:	87 e0       	ldi	r24, 0x07	; 7
    6956:	80 93 d2 23 	sts	0x23D2, r24
	return(_FDEV_ERR);
}
    695a:	8f ef       	ldi	r24, 0xFF	; 255
    695c:	9f ef       	ldi	r25, 0xFF	; 255
    695e:	08 95       	ret

00006960 <xio_setflags_rs485>:
/*
 *	xio_setflags_rs485() - check and set control flags for device
 */

int xio_setflags_rs485(const uint16_t control)
{
    6960:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_RS485, control);
    6962:	80 e0       	ldi	r24, 0x00	; 0
    6964:	0e 94 22 28 	call	0x5044	; 0x5044 <xio_setflags>
	return (TG_OK);									// for now it's always OK
}
    6968:	80 e0       	ldi	r24, 0x00	; 0
    696a:	90 e0       	ldi	r25, 0x00	; 0
    696c:	08 95       	ret

0000696e <xio_rs485_queue_RX_char>:
/*
 * xio_rs485_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_rs485_queue_RX_char(const char c)
{
    696e:	28 2f       	mov	r18, r24
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6970:	83 30       	cpi	r24, 0x03	; 3
    6972:	31 f4       	brne	.+12     	; 0x6980 <xio_rs485_queue_RX_char+0x12>
		RS.sig = XIO_SIG_KILL;					// set signal value
    6974:	84 e0       	ldi	r24, 0x04	; 4
    6976:	80 93 d2 23 	sts	0x23D2, r24
		signal_etx();							// call app-specific signal handler
    697a:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <signal_etx>
    697e:	08 95       	ret
		return;
	}

	// normal path
	if ((--RSu.rx_buf_head) == 0) { 			// wrap condition
    6980:	80 91 33 23 	lds	r24, 0x2333
    6984:	81 50       	subi	r24, 0x01	; 1
    6986:	80 93 33 23 	sts	0x2333, r24
    698a:	80 91 33 23 	lds	r24, 0x2333
    698e:	88 23       	and	r24, r24
    6990:	19 f4       	brne	.+6      	; 0x6998 <xio_rs485_queue_RX_char+0x2a>
		RSu.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6992:	81 e1       	ldi	r24, 0x11	; 17
    6994:	80 93 33 23 	sts	0x2333, r24
	}
	if (RSu.rx_buf_head != RSu.rx_buf_tail) {	// write char unless buffer full
    6998:	90 91 33 23 	lds	r25, 0x2333
    699c:	80 91 32 23 	lds	r24, 0x2332
    69a0:	98 17       	cp	r25, r24
    69a2:	39 f0       	breq	.+14     	; 0x69b2 <xio_rs485_queue_RX_char+0x44>
		RSu.rx_buf[RSu.rx_buf_head] = c;		// FAKE INPUT DATA
    69a4:	e0 91 33 23 	lds	r30, 0x2333
    69a8:	f0 e0       	ldi	r31, 0x00	; 0
    69aa:	e0 5d       	subi	r30, 0xD0	; 208
    69ac:	fc 4d       	sbci	r31, 0xDC	; 220
    69ae:	23 87       	std	Z+11, r18	; 0x0b
    69b0:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++RSu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    69b2:	80 91 33 23 	lds	r24, 0x2333
    69b6:	8f 5f       	subi	r24, 0xFF	; 255
    69b8:	80 93 33 23 	sts	0x2333, r24
    69bc:	80 91 33 23 	lds	r24, 0x2333
    69c0:	82 31       	cpi	r24, 0x12	; 18
    69c2:	18 f0       	brcs	.+6      	; 0x69ca <xio_rs485_queue_RX_char+0x5c>
		RSu.rx_buf_head = 1;
    69c4:	81 e0       	ldi	r24, 0x01	; 1
    69c6:	80 93 33 23 	sts	0x2333, r24
    69ca:	08 95       	ret

000069cc <xio_rs485_queue_RX_string>:
/*
 * xio_rs485_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_rs485_queue_RX_string(char *buf)
{
    69cc:	1f 93       	push	r17
    69ce:	cf 93       	push	r28
    69d0:	df 93       	push	r29
    69d2:	ec 01       	movw	r28, r24
    69d4:	10 e0       	ldi	r17, 0x00	; 0
    69d6:	02 c0       	rjmp	.+4      	; 0x69dc <xio_rs485_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_rs485_queue_RX_char(c);
    69d8:	0e 94 b7 34 	call	0x696e	; 0x696e <xio_rs485_queue_RX_char>
void xio_rs485_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    69dc:	fe 01       	movw	r30, r28
    69de:	e1 0f       	add	r30, r17
    69e0:	f1 1d       	adc	r31, r1
    69e2:	80 81       	ld	r24, Z
    69e4:	1f 5f       	subi	r17, 0xFF	; 255
    69e6:	88 23       	and	r24, r24
    69e8:	b9 f7       	brne	.-18     	; 0x69d8 <xio_rs485_queue_RX_string+0xc>
		xio_rs485_queue_RX_char(c);
	}
}
    69ea:	df 91       	pop	r29
    69ec:	cf 91       	pop	r28
    69ee:	1f 91       	pop	r17
    69f0:	08 95       	ret

000069f2 <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)	//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    69f2:	1f 92       	push	r1
    69f4:	0f 92       	push	r0
    69f6:	0f b6       	in	r0, 0x3f	; 63
    69f8:	0f 92       	push	r0
    69fa:	0b b6       	in	r0, 0x3b	; 59
    69fc:	0f 92       	push	r0
    69fe:	11 24       	eor	r1, r1
    6a00:	2f 93       	push	r18
    6a02:	3f 93       	push	r19
    6a04:	4f 93       	push	r20
    6a06:	5f 93       	push	r21
    6a08:	6f 93       	push	r22
    6a0a:	7f 93       	push	r23
    6a0c:	8f 93       	push	r24
    6a0e:	9f 93       	push	r25
    6a10:	af 93       	push	r26
    6a12:	bf 93       	push	r27
    6a14:	ef 93       	push	r30
    6a16:	ff 93       	push	r31
	uint8_t c = RSu.usart->DATA;				// can only read DATA once
    6a18:	e0 91 37 23 	lds	r30, 0x2337
    6a1c:	f0 91 38 23 	lds	r31, 0x2338
    6a20:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6a22:	23 30       	cpi	r18, 0x03	; 3
    6a24:	31 f4       	brne	.+12     	; 0x6a32 <__vector_28+0x40>
		RS.sig = XIO_SIG_KILL;					// set signal value
    6a26:	84 e0       	ldi	r24, 0x04	; 4
    6a28:	80 93 d2 23 	sts	0x23D2, r24
		signal_etx();							// call app-specific signal handler
    6a2c:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <signal_etx>
    6a30:	25 c0       	rjmp	.+74     	; 0x6a7c <__vector_28+0x8a>
		return;
	}

	// normal path
	if ((--RSu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    6a32:	80 91 33 23 	lds	r24, 0x2333
    6a36:	81 50       	subi	r24, 0x01	; 1
    6a38:	80 93 33 23 	sts	0x2333, r24
    6a3c:	80 91 33 23 	lds	r24, 0x2333
    6a40:	88 23       	and	r24, r24
    6a42:	19 f4       	brne	.+6      	; 0x6a4a <__vector_28+0x58>
		RSu.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6a44:	81 e1       	ldi	r24, 0x11	; 17
    6a46:	80 93 33 23 	sts	0x2333, r24
	}
	if (RSu.rx_buf_head != RSu.rx_buf_tail) {	// write char unless buffer full
    6a4a:	90 91 33 23 	lds	r25, 0x2333
    6a4e:	80 91 32 23 	lds	r24, 0x2332
    6a52:	98 17       	cp	r25, r24
    6a54:	39 f0       	breq	.+14     	; 0x6a64 <__vector_28+0x72>
		RSu.rx_buf[RSu.rx_buf_head] = c;		// (= USARTC0.DATA;)
    6a56:	e0 91 33 23 	lds	r30, 0x2333
    6a5a:	f0 e0       	ldi	r31, 0x00	; 0
    6a5c:	e0 5d       	subi	r30, 0xD0	; 208
    6a5e:	fc 4d       	sbci	r31, 0xDC	; 220
    6a60:	23 87       	std	Z+11, r18	; 0x0b
    6a62:	0c c0       	rjmp	.+24     	; 0x6a7c <__vector_28+0x8a>
		return;
	}
	// buffer-full handling
	if ((++RSu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6a64:	80 91 33 23 	lds	r24, 0x2333
    6a68:	8f 5f       	subi	r24, 0xFF	; 255
    6a6a:	80 93 33 23 	sts	0x2333, r24
    6a6e:	80 91 33 23 	lds	r24, 0x2333
    6a72:	82 31       	cpi	r24, 0x12	; 18
    6a74:	18 f0       	brcs	.+6      	; 0x6a7c <__vector_28+0x8a>
		RSu.rx_buf_head = 1;
    6a76:	81 e0       	ldi	r24, 0x01	; 1
    6a78:	80 93 33 23 	sts	0x2333, r24
	}
	// activate flow control here or before it gets to this level
}
    6a7c:	ff 91       	pop	r31
    6a7e:	ef 91       	pop	r30
    6a80:	bf 91       	pop	r27
    6a82:	af 91       	pop	r26
    6a84:	9f 91       	pop	r25
    6a86:	8f 91       	pop	r24
    6a88:	7f 91       	pop	r23
    6a8a:	6f 91       	pop	r22
    6a8c:	5f 91       	pop	r21
    6a8e:	4f 91       	pop	r20
    6a90:	3f 91       	pop	r19
    6a92:	2f 91       	pop	r18
    6a94:	0f 90       	pop	r0
    6a96:	0b be       	out	0x3b, r0	; 59
    6a98:	0f 90       	pop	r0
    6a9a:	0f be       	out	0x3f, r0	; 63
    6a9c:	0f 90       	pop	r0
    6a9e:	1f 90       	pop	r1
    6aa0:	18 95       	reti

00006aa2 <xio_open_pgm>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

struct __file * xio_open_pgm(const prog_char *addr)
{
	PGM.flags &= XIO_FLAG_RESET_gm;			// reset flag signaling bits
    6aa2:	20 91 14 24 	lds	r18, 0x2414
    6aa6:	30 91 15 24 	lds	r19, 0x2415
    6aaa:	3f 70       	andi	r19, 0x0F	; 15
    6aac:	20 93 14 24 	sts	0x2414, r18
    6ab0:	30 93 15 24 	sts	0x2415, r19
	PGM.sig = 0;							// reset signal
    6ab4:	10 92 17 24 	sts	0x2417, r1
	PGMf.pgmbase_P = (PROGMEM char *)addr;	// might want to range check this
    6ab8:	80 93 c1 23 	sts	0x23C1, r24
    6abc:	90 93 c2 23 	sts	0x23C2, r25
	PGMf.len = 0;							// initialize buffer pointer
    6ac0:	10 92 bf 23 	sts	0x23BF, r1
    6ac4:	10 92 c0 23 	sts	0x23C0, r1
	return(PGM.fdev);							// return pointer to the fdev stream
}
    6ac8:	80 91 27 24 	lds	r24, 0x2427
    6acc:	90 91 28 24 	lds	r25, 0x2428
    6ad0:	08 95       	ret

00006ad2 <xio_putc_pgm>:
 */

int xio_putc_pgm(const char c, FILE *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    6ad2:	8f ef       	ldi	r24, 0xFF	; 255
    6ad4:	9f ef       	ldi	r25, 0xFF	; 255
    6ad6:	08 95       	ret

00006ad8 <xio_readln_pgm>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_pgm(char *buf, uint8_t len)
{
    6ad8:	9c 01       	movw	r18, r24
	if (!(PGMf.pgmbase_P)) {					// return error if no file is open
    6ada:	80 91 c1 23 	lds	r24, 0x23C1
    6ade:	90 91 c2 23 	lds	r25, 0x23C2
    6ae2:	89 2b       	or	r24, r25
    6ae4:	19 f4       	brne	.+6      	; 0x6aec <xio_readln_pgm+0x14>
    6ae6:	22 e1       	ldi	r18, 0x12	; 18
    6ae8:	30 e0       	ldi	r19, 0x00	; 0
    6aea:	1b c0       	rjmp	.+54     	; 0x6b22 <xio_readln_pgm+0x4a>
		return (TG_FILE_NOT_OPEN);
	}
	PGM.sig = XIO_SIG_OK;						// initialize signal
    6aec:	10 92 17 24 	sts	0x2417, r1
	if (fgets(buf, len, PGM.fdev) == NULL) {
    6af0:	40 91 27 24 	lds	r20, 0x2427
    6af4:	50 91 28 24 	lds	r21, 0x2428
    6af8:	c9 01       	movw	r24, r18
    6afa:	70 e0       	ldi	r23, 0x00	; 0
    6afc:	0e 94 5c 47 	call	0x8eb8	; 0x8eb8 <fgets>
    6b00:	89 2b       	or	r24, r25
    6b02:	19 f0       	breq	.+6      	; 0x6b0a <xio_readln_pgm+0x32>
    6b04:	20 e0       	ldi	r18, 0x00	; 0
    6b06:	30 e0       	ldi	r19, 0x00	; 0
    6b08:	0c c0       	rjmp	.+24     	; 0x6b22 <xio_readln_pgm+0x4a>
		PGMf.pgmbase_P = NULL;
    6b0a:	10 92 c1 23 	sts	0x23C1, r1
    6b0e:	10 92 c2 23 	sts	0x23C2, r1
		clearerr(PGM.fdev);
    6b12:	80 91 27 24 	lds	r24, 0x2427
    6b16:	90 91 28 24 	lds	r25, 0x2428
    6b1a:	0e 94 57 47 	call	0x8eae	; 0x8eae <clearerr>
    6b1e:	25 e0       	ldi	r18, 0x05	; 5
    6b20:	30 e0       	ldi	r19, 0x00	; 0
		return (TG_EOF);
	}
	return (TG_OK);
}
    6b22:	c9 01       	movw	r24, r18
    6b24:	08 95       	ret

00006b26 <xio_getc_pgm>:
 */

int xio_getc_pgm(FILE *stream)
{

	if (PGM.flags & XIO_FLAG_EOF_bm) {
    6b26:	20 91 14 24 	lds	r18, 0x2414
    6b2a:	30 91 15 24 	lds	r19, 0x2415
    6b2e:	35 ff       	sbrs	r19, 5
    6b30:	06 c0       	rjmp	.+12     	; 0x6b3e <xio_getc_pgm+0x18>
		PGM.sig = XIO_SIG_EOF;
    6b32:	83 e0       	ldi	r24, 0x03	; 3
    6b34:	80 93 17 24 	sts	0x2417, r24
    6b38:	2e ef       	ldi	r18, 0xFE	; 254
    6b3a:	3f ef       	ldi	r19, 0xFF	; 255
    6b3c:	3e c0       	rjmp	.+124    	; 0x6bba <xio_getc_pgm+0x94>
		return (_FDEV_EOF);
	}
	if ((PGM.c = pgm_read_byte(&PGMf.pgmbase_P[PGMf.len])) == NUL) {
    6b3e:	80 91 bf 23 	lds	r24, 0x23BF
    6b42:	90 91 c0 23 	lds	r25, 0x23C0
    6b46:	e0 91 c1 23 	lds	r30, 0x23C1
    6b4a:	f0 91 c2 23 	lds	r31, 0x23C2
    6b4e:	e8 0f       	add	r30, r24
    6b50:	f9 1f       	adc	r31, r25
    6b52:	e4 91       	lpm	r30, Z+
    6b54:	e0 93 18 24 	sts	0x2418, r30
    6b58:	ee 23       	and	r30, r30
    6b5a:	29 f4       	brne	.+10     	; 0x6b66 <xio_getc_pgm+0x40>
		PGM.flags |= XIO_FLAG_EOF_bm;
    6b5c:	30 62       	ori	r19, 0x20	; 32
    6b5e:	20 93 14 24 	sts	0x2414, r18
    6b62:	30 93 15 24 	sts	0x2415, r19
	}
	++PGMf.len;
    6b66:	01 96       	adiw	r24, 0x01	; 1
    6b68:	80 93 bf 23 	sts	0x23BF, r24
    6b6c:	90 93 c0 23 	sts	0x23C0, r25
	if (!LINEMODE(PGM.flags)) {			// processing is simple if not LINEMODE
    6b70:	90 91 14 24 	lds	r25, 0x2414
    6b74:	96 fd       	sbrc	r25, 6
    6b76:	03 c0       	rjmp	.+6      	; 0x6b7e <xio_getc_pgm+0x58>
		if (ECHO(PGM.flags)) {
    6b78:	94 ff       	sbrs	r25, 4
    6b7a:	1b c0       	rjmp	.+54     	; 0x6bb2 <xio_getc_pgm+0x8c>
    6b7c:	11 c0       	rjmp	.+34     	; 0x6ba0 <xio_getc_pgm+0x7a>
			putchar(PGM.c);
		}
		return (PGM.c);
	}
	// now do the LINEMODE stuff
	if (PGM.c == NUL) {					// perform newline substitutions
    6b7e:	80 91 18 24 	lds	r24, 0x2418
    6b82:	88 23       	and	r24, r24
    6b84:	31 f0       	breq	.+12     	; 0x6b92 <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if (PGM.c == '\r') {
    6b86:	8d 30       	cpi	r24, 0x0D	; 13
    6b88:	21 f0       	breq	.+8      	; 0x6b92 <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if ((SEMICOLONS(PGM.flags)) && (PGM.c == ';')) {
    6b8a:	97 ff       	sbrs	r25, 7
    6b8c:	05 c0       	rjmp	.+10     	; 0x6b98 <xio_getc_pgm+0x72>
    6b8e:	8b 33       	cpi	r24, 0x3B	; 59
    6b90:	19 f4       	brne	.+6      	; 0x6b98 <xio_getc_pgm+0x72>
		PGM.c = '\n';
    6b92:	8a e0       	ldi	r24, 0x0A	; 10
    6b94:	80 93 18 24 	sts	0x2418, r24
	}
	if (ECHO(PGM.flags)) {
    6b98:	80 91 14 24 	lds	r24, 0x2414
    6b9c:	84 ff       	sbrs	r24, 4
    6b9e:	09 c0       	rjmp	.+18     	; 0x6bb2 <xio_getc_pgm+0x8c>
		putchar(PGM.c);
    6ba0:	60 91 10 25 	lds	r22, 0x2510
    6ba4:	70 91 11 25 	lds	r23, 0x2511
    6ba8:	80 91 18 24 	lds	r24, 0x2418
    6bac:	90 e0       	ldi	r25, 0x00	; 0
    6bae:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
	}
	return (PGM.c);
    6bb2:	80 91 18 24 	lds	r24, 0x2418
    6bb6:	28 2f       	mov	r18, r24
    6bb8:	30 e0       	ldi	r19, 0x00	; 0
}
    6bba:	c9 01       	movw	r24, r18
    6bbc:	08 95       	ret

00006bbe <xio_setflags_pgm>:
/*
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
    6bbe:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_PGM, control);
    6bc0:	83 e0       	ldi	r24, 0x03	; 3
    6bc2:	0e 94 22 28 	call	0x5044	; 0x5044 <xio_setflags>
	return (TG_OK);									// for now it's always OK
}
    6bc6:	80 e0       	ldi	r24, 0x00	; 0
    6bc8:	90 e0       	ldi	r25, 0x00	; 0
    6bca:	08 95       	ret

00006bcc <xio_init_pgm>:
/* 
 *	xio_init_pgm() - initialize and set controls for program memory device 
 */

void xio_init_pgm(const uint16_t control)
{
    6bcc:	bc 01       	movw	r22, r24
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
	xio_setflags(XIO_DEV_PGM, control);
    6bce:	83 e0       	ldi	r24, 0x03	; 3
    6bd0:	0e 94 22 28 	call	0x5044	; 0x5044 <xio_setflags>
{
	// might be useful to sanity check the control bits before calling set flags
	//	- RD and BLOCK are mandatory
	// 	- WR and NOBLOCK are restricted
	xio_setflags_pgm(control);
}
    6bd4:	08 95       	ret

00006bd6 <__udivdi3>:
    6bd6:	ae e5       	ldi	r26, 0x5E	; 94
    6bd8:	b0 e0       	ldi	r27, 0x00	; 0
    6bda:	e1 ef       	ldi	r30, 0xF1	; 241
    6bdc:	f5 e3       	ldi	r31, 0x35	; 53
    6bde:	0c 94 7e 44 	jmp	0x88fc	; 0x88fc <__prologue_saves__>
    6be2:	a8 e0       	ldi	r26, 0x08	; 8
    6be4:	4e 01       	movw	r8, r28
    6be6:	08 94       	sec
    6be8:	81 1c       	adc	r8, r1
    6bea:	91 1c       	adc	r9, r1
    6bec:	f4 01       	movw	r30, r8
    6bee:	6a 2e       	mov	r6, r26
    6bf0:	11 92       	st	Z+, r1
    6bf2:	6a 94       	dec	r6
    6bf4:	e9 f7       	brne	.-6      	; 0x6bf0 <__udivdi3+0x1a>
    6bf6:	29 83       	std	Y+1, r18	; 0x01
    6bf8:	3a 83       	std	Y+2, r19	; 0x02
    6bfa:	4b 83       	std	Y+3, r20	; 0x03
    6bfc:	5c 83       	std	Y+4, r21	; 0x04
    6bfe:	6d 83       	std	Y+5, r22	; 0x05
    6c00:	7e 83       	std	Y+6, r23	; 0x06
    6c02:	8f 83       	std	Y+7, r24	; 0x07
    6c04:	98 87       	std	Y+8, r25	; 0x08
    6c06:	ce 01       	movw	r24, r28
    6c08:	09 96       	adiw	r24, 0x09	; 9
    6c0a:	fc 01       	movw	r30, r24
    6c0c:	11 92       	st	Z+, r1
    6c0e:	aa 95       	dec	r26
    6c10:	e9 f7       	brne	.-6      	; 0x6c0c <__udivdi3+0x36>
    6c12:	a9 86       	std	Y+9, r10	; 0x09
    6c14:	ba 86       	std	Y+10, r11	; 0x0a
    6c16:	cb 86       	std	Y+11, r12	; 0x0b
    6c18:	dc 86       	std	Y+12, r13	; 0x0c
    6c1a:	ed 86       	std	Y+13, r14	; 0x0d
    6c1c:	fe 86       	std	Y+14, r15	; 0x0e
    6c1e:	0f 87       	std	Y+15, r16	; 0x0f
    6c20:	18 8b       	std	Y+16, r17	; 0x10
    6c22:	29 84       	ldd	r2, Y+9	; 0x09
    6c24:	3a 84       	ldd	r3, Y+10	; 0x0a
    6c26:	4b 84       	ldd	r4, Y+11	; 0x0b
    6c28:	5c 84       	ldd	r5, Y+12	; 0x0c
    6c2a:	ed 84       	ldd	r14, Y+13	; 0x0d
    6c2c:	fe 84       	ldd	r15, Y+14	; 0x0e
    6c2e:	0f 85       	ldd	r16, Y+15	; 0x0f
    6c30:	18 89       	ldd	r17, Y+16	; 0x10
    6c32:	69 80       	ldd	r6, Y+1	; 0x01
    6c34:	7a 80       	ldd	r7, Y+2	; 0x02
    6c36:	8b 80       	ldd	r8, Y+3	; 0x03
    6c38:	9c 80       	ldd	r9, Y+4	; 0x04
    6c3a:	6d a6       	std	Y+45, r6	; 0x2d
    6c3c:	7e a6       	std	Y+46, r7	; 0x2e
    6c3e:	8f a6       	std	Y+47, r8	; 0x2f
    6c40:	98 aa       	std	Y+48, r9	; 0x30
    6c42:	6d 80       	ldd	r6, Y+5	; 0x05
    6c44:	7e 80       	ldd	r7, Y+6	; 0x06
    6c46:	8f 80       	ldd	r8, Y+7	; 0x07
    6c48:	98 84       	ldd	r9, Y+8	; 0x08
    6c4a:	e1 14       	cp	r14, r1
    6c4c:	f1 04       	cpc	r15, r1
    6c4e:	01 05       	cpc	r16, r1
    6c50:	11 05       	cpc	r17, r1
    6c52:	09 f0       	breq	.+2      	; 0x6c56 <__udivdi3+0x80>
    6c54:	b3 c3       	rjmp	.+1894   	; 0x73bc <__udivdi3+0x7e6>
    6c56:	62 14       	cp	r6, r2
    6c58:	73 04       	cpc	r7, r3
    6c5a:	84 04       	cpc	r8, r4
    6c5c:	95 04       	cpc	r9, r5
    6c5e:	08 f0       	brcs	.+2      	; 0x6c62 <__udivdi3+0x8c>
    6c60:	3d c1       	rjmp	.+634    	; 0x6edc <__udivdi3+0x306>
    6c62:	00 e0       	ldi	r16, 0x00	; 0
    6c64:	20 16       	cp	r2, r16
    6c66:	00 e0       	ldi	r16, 0x00	; 0
    6c68:	30 06       	cpc	r3, r16
    6c6a:	01 e0       	ldi	r16, 0x01	; 1
    6c6c:	40 06       	cpc	r4, r16
    6c6e:	00 e0       	ldi	r16, 0x00	; 0
    6c70:	50 06       	cpc	r5, r16
    6c72:	88 f4       	brcc	.+34     	; 0x6c96 <__udivdi3+0xc0>
    6c74:	1f ef       	ldi	r17, 0xFF	; 255
    6c76:	21 16       	cp	r2, r17
    6c78:	31 04       	cpc	r3, r1
    6c7a:	41 04       	cpc	r4, r1
    6c7c:	51 04       	cpc	r5, r1
    6c7e:	39 f0       	breq	.+14     	; 0x6c8e <__udivdi3+0xb8>
    6c80:	30 f0       	brcs	.+12     	; 0x6c8e <__udivdi3+0xb8>
    6c82:	48 e0       	ldi	r20, 0x08	; 8
    6c84:	e4 2e       	mov	r14, r20
    6c86:	f1 2c       	mov	r15, r1
    6c88:	01 2d       	mov	r16, r1
    6c8a:	11 2d       	mov	r17, r1
    6c8c:	18 c0       	rjmp	.+48     	; 0x6cbe <__udivdi3+0xe8>
    6c8e:	ee 24       	eor	r14, r14
    6c90:	ff 24       	eor	r15, r15
    6c92:	87 01       	movw	r16, r14
    6c94:	14 c0       	rjmp	.+40     	; 0x6cbe <__udivdi3+0xe8>
    6c96:	20 e0       	ldi	r18, 0x00	; 0
    6c98:	22 16       	cp	r2, r18
    6c9a:	20 e0       	ldi	r18, 0x00	; 0
    6c9c:	32 06       	cpc	r3, r18
    6c9e:	20 e0       	ldi	r18, 0x00	; 0
    6ca0:	42 06       	cpc	r4, r18
    6ca2:	21 e0       	ldi	r18, 0x01	; 1
    6ca4:	52 06       	cpc	r5, r18
    6ca6:	30 f0       	brcs	.+12     	; 0x6cb4 <__udivdi3+0xde>
    6ca8:	38 e1       	ldi	r19, 0x18	; 24
    6caa:	e3 2e       	mov	r14, r19
    6cac:	f1 2c       	mov	r15, r1
    6cae:	01 2d       	mov	r16, r1
    6cb0:	11 2d       	mov	r17, r1
    6cb2:	05 c0       	rjmp	.+10     	; 0x6cbe <__udivdi3+0xe8>
    6cb4:	20 e1       	ldi	r18, 0x10	; 16
    6cb6:	e2 2e       	mov	r14, r18
    6cb8:	f1 2c       	mov	r15, r1
    6cba:	01 2d       	mov	r16, r1
    6cbc:	11 2d       	mov	r17, r1
    6cbe:	d2 01       	movw	r26, r4
    6cc0:	c1 01       	movw	r24, r2
    6cc2:	0e 2c       	mov	r0, r14
    6cc4:	04 c0       	rjmp	.+8      	; 0x6cce <__udivdi3+0xf8>
    6cc6:	b6 95       	lsr	r27
    6cc8:	a7 95       	ror	r26
    6cca:	97 95       	ror	r25
    6ccc:	87 95       	ror	r24
    6cce:	0a 94       	dec	r0
    6cd0:	d2 f7       	brpl	.-12     	; 0x6cc6 <__udivdi3+0xf0>
    6cd2:	8d 5f       	subi	r24, 0xFD	; 253
    6cd4:	9f 4d       	sbci	r25, 0xDF	; 223
    6cd6:	dc 01       	movw	r26, r24
    6cd8:	2c 91       	ld	r18, X
    6cda:	80 e2       	ldi	r24, 0x20	; 32
    6cdc:	90 e0       	ldi	r25, 0x00	; 0
    6cde:	a0 e0       	ldi	r26, 0x00	; 0
    6ce0:	b0 e0       	ldi	r27, 0x00	; 0
    6ce2:	8e 19       	sub	r24, r14
    6ce4:	9f 09       	sbc	r25, r15
    6ce6:	a0 0b       	sbc	r26, r16
    6ce8:	b1 0b       	sbc	r27, r17
    6cea:	7c 01       	movw	r14, r24
    6cec:	8d 01       	movw	r16, r26
    6cee:	e2 1a       	sub	r14, r18
    6cf0:	f1 08       	sbc	r15, r1
    6cf2:	01 09       	sbc	r16, r1
    6cf4:	11 09       	sbc	r17, r1
    6cf6:	e1 14       	cp	r14, r1
    6cf8:	f1 04       	cpc	r15, r1
    6cfa:	01 05       	cpc	r16, r1
    6cfc:	11 05       	cpc	r17, r1
    6cfe:	a1 f1       	breq	.+104    	; 0x6d68 <__udivdi3+0x192>
    6d00:	0e 2c       	mov	r0, r14
    6d02:	04 c0       	rjmp	.+8      	; 0x6d0c <__udivdi3+0x136>
    6d04:	22 0c       	add	r2, r2
    6d06:	33 1c       	adc	r3, r3
    6d08:	44 1c       	adc	r4, r4
    6d0a:	55 1c       	adc	r5, r5
    6d0c:	0a 94       	dec	r0
    6d0e:	d2 f7       	brpl	.-12     	; 0x6d04 <__udivdi3+0x12e>
    6d10:	a4 01       	movw	r20, r8
    6d12:	93 01       	movw	r18, r6
    6d14:	0e 2c       	mov	r0, r14
    6d16:	04 c0       	rjmp	.+8      	; 0x6d20 <__udivdi3+0x14a>
    6d18:	22 0f       	add	r18, r18
    6d1a:	33 1f       	adc	r19, r19
    6d1c:	44 1f       	adc	r20, r20
    6d1e:	55 1f       	adc	r21, r21
    6d20:	0a 94       	dec	r0
    6d22:	d2 f7       	brpl	.-12     	; 0x6d18 <__udivdi3+0x142>
    6d24:	80 e2       	ldi	r24, 0x20	; 32
    6d26:	90 e0       	ldi	r25, 0x00	; 0
    6d28:	8e 19       	sub	r24, r14
    6d2a:	9f 09       	sbc	r25, r15
    6d2c:	6d a4       	ldd	r6, Y+45	; 0x2d
    6d2e:	7e a4       	ldd	r7, Y+46	; 0x2e
    6d30:	8f a4       	ldd	r8, Y+47	; 0x2f
    6d32:	98 a8       	ldd	r9, Y+48	; 0x30
    6d34:	04 c0       	rjmp	.+8      	; 0x6d3e <__udivdi3+0x168>
    6d36:	96 94       	lsr	r9
    6d38:	87 94       	ror	r8
    6d3a:	77 94       	ror	r7
    6d3c:	67 94       	ror	r6
    6d3e:	8a 95       	dec	r24
    6d40:	d2 f7       	brpl	.-12     	; 0x6d36 <__udivdi3+0x160>
    6d42:	62 2a       	or	r6, r18
    6d44:	73 2a       	or	r7, r19
    6d46:	84 2a       	or	r8, r20
    6d48:	95 2a       	or	r9, r21
    6d4a:	ad a4       	ldd	r10, Y+45	; 0x2d
    6d4c:	be a4       	ldd	r11, Y+46	; 0x2e
    6d4e:	cf a4       	ldd	r12, Y+47	; 0x2f
    6d50:	d8 a8       	ldd	r13, Y+48	; 0x30
    6d52:	04 c0       	rjmp	.+8      	; 0x6d5c <__udivdi3+0x186>
    6d54:	aa 0c       	add	r10, r10
    6d56:	bb 1c       	adc	r11, r11
    6d58:	cc 1c       	adc	r12, r12
    6d5a:	dd 1c       	adc	r13, r13
    6d5c:	ea 94       	dec	r14
    6d5e:	d2 f7       	brpl	.-12     	; 0x6d54 <__udivdi3+0x17e>
    6d60:	ad a6       	std	Y+45, r10	; 0x2d
    6d62:	be a6       	std	Y+46, r11	; 0x2e
    6d64:	cf a6       	std	Y+47, r12	; 0x2f
    6d66:	d8 aa       	std	Y+48, r13	; 0x30
    6d68:	62 01       	movw	r12, r4
    6d6a:	ee 24       	eor	r14, r14
    6d6c:	ff 24       	eor	r15, r15
    6d6e:	cd aa       	std	Y+53, r12	; 0x35
    6d70:	de aa       	std	Y+54, r13	; 0x36
    6d72:	ef aa       	std	Y+55, r14	; 0x37
    6d74:	f8 ae       	std	Y+56, r15	; 0x38
    6d76:	92 01       	movw	r18, r4
    6d78:	81 01       	movw	r16, r2
    6d7a:	20 70       	andi	r18, 0x00	; 0
    6d7c:	30 70       	andi	r19, 0x00	; 0
    6d7e:	09 af       	std	Y+57, r16	; 0x39
    6d80:	1a af       	std	Y+58, r17	; 0x3a
    6d82:	2b af       	std	Y+59, r18	; 0x3b
    6d84:	3c af       	std	Y+60, r19	; 0x3c
    6d86:	c4 01       	movw	r24, r8
    6d88:	b3 01       	movw	r22, r6
    6d8a:	a7 01       	movw	r20, r14
    6d8c:	96 01       	movw	r18, r12
    6d8e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    6d92:	7b 01       	movw	r14, r22
    6d94:	8c 01       	movw	r16, r24
    6d96:	c4 01       	movw	r24, r8
    6d98:	b3 01       	movw	r22, r6
    6d9a:	2d a9       	ldd	r18, Y+53	; 0x35
    6d9c:	3e a9       	ldd	r19, Y+54	; 0x36
    6d9e:	4f a9       	ldd	r20, Y+55	; 0x37
    6da0:	58 ad       	ldd	r21, Y+56	; 0x38
    6da2:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    6da6:	c9 01       	movw	r24, r18
    6da8:	da 01       	movw	r26, r20
    6daa:	3c 01       	movw	r6, r24
    6dac:	4d 01       	movw	r8, r26
    6dae:	c4 01       	movw	r24, r8
    6db0:	b3 01       	movw	r22, r6
    6db2:	29 ad       	ldd	r18, Y+57	; 0x39
    6db4:	3a ad       	ldd	r19, Y+58	; 0x3a
    6db6:	4b ad       	ldd	r20, Y+59	; 0x3b
    6db8:	5c ad       	ldd	r21, Y+60	; 0x3c
    6dba:	0e 94 3d 44 	call	0x887a	; 0x887a <__mulsi3>
    6dbe:	9b 01       	movw	r18, r22
    6dc0:	ac 01       	movw	r20, r24
    6dc2:	87 01       	movw	r16, r14
    6dc4:	ff 24       	eor	r15, r15
    6dc6:	ee 24       	eor	r14, r14
    6dc8:	ad a4       	ldd	r10, Y+45	; 0x2d
    6dca:	be a4       	ldd	r11, Y+46	; 0x2e
    6dcc:	cf a4       	ldd	r12, Y+47	; 0x2f
    6dce:	d8 a8       	ldd	r13, Y+48	; 0x30
    6dd0:	c6 01       	movw	r24, r12
    6dd2:	aa 27       	eor	r26, r26
    6dd4:	bb 27       	eor	r27, r27
    6dd6:	57 01       	movw	r10, r14
    6dd8:	68 01       	movw	r12, r16
    6dda:	a8 2a       	or	r10, r24
    6ddc:	b9 2a       	or	r11, r25
    6dde:	ca 2a       	or	r12, r26
    6de0:	db 2a       	or	r13, r27
    6de2:	a2 16       	cp	r10, r18
    6de4:	b3 06       	cpc	r11, r19
    6de6:	c4 06       	cpc	r12, r20
    6de8:	d5 06       	cpc	r13, r21
    6dea:	e0 f4       	brcc	.+56     	; 0x6e24 <__udivdi3+0x24e>
    6dec:	08 94       	sec
    6dee:	61 08       	sbc	r6, r1
    6df0:	71 08       	sbc	r7, r1
    6df2:	81 08       	sbc	r8, r1
    6df4:	91 08       	sbc	r9, r1
    6df6:	a2 0c       	add	r10, r2
    6df8:	b3 1c       	adc	r11, r3
    6dfa:	c4 1c       	adc	r12, r4
    6dfc:	d5 1c       	adc	r13, r5
    6dfe:	a2 14       	cp	r10, r2
    6e00:	b3 04       	cpc	r11, r3
    6e02:	c4 04       	cpc	r12, r4
    6e04:	d5 04       	cpc	r13, r5
    6e06:	70 f0       	brcs	.+28     	; 0x6e24 <__udivdi3+0x24e>
    6e08:	a2 16       	cp	r10, r18
    6e0a:	b3 06       	cpc	r11, r19
    6e0c:	c4 06       	cpc	r12, r20
    6e0e:	d5 06       	cpc	r13, r21
    6e10:	48 f4       	brcc	.+18     	; 0x6e24 <__udivdi3+0x24e>
    6e12:	08 94       	sec
    6e14:	61 08       	sbc	r6, r1
    6e16:	71 08       	sbc	r7, r1
    6e18:	81 08       	sbc	r8, r1
    6e1a:	91 08       	sbc	r9, r1
    6e1c:	a2 0c       	add	r10, r2
    6e1e:	b3 1c       	adc	r11, r3
    6e20:	c4 1c       	adc	r12, r4
    6e22:	d5 1c       	adc	r13, r5
    6e24:	a2 1a       	sub	r10, r18
    6e26:	b3 0a       	sbc	r11, r19
    6e28:	c4 0a       	sbc	r12, r20
    6e2a:	d5 0a       	sbc	r13, r21
    6e2c:	c6 01       	movw	r24, r12
    6e2e:	b5 01       	movw	r22, r10
    6e30:	2d a9       	ldd	r18, Y+53	; 0x35
    6e32:	3e a9       	ldd	r19, Y+54	; 0x36
    6e34:	4f a9       	ldd	r20, Y+55	; 0x37
    6e36:	58 ad       	ldd	r21, Y+56	; 0x38
    6e38:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    6e3c:	7b 01       	movw	r14, r22
    6e3e:	8c 01       	movw	r16, r24
    6e40:	c6 01       	movw	r24, r12
    6e42:	b5 01       	movw	r22, r10
    6e44:	2d a9       	ldd	r18, Y+53	; 0x35
    6e46:	3e a9       	ldd	r19, Y+54	; 0x36
    6e48:	4f a9       	ldd	r20, Y+55	; 0x37
    6e4a:	58 ad       	ldd	r21, Y+56	; 0x38
    6e4c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    6e50:	c9 01       	movw	r24, r18
    6e52:	da 01       	movw	r26, r20
    6e54:	5c 01       	movw	r10, r24
    6e56:	6d 01       	movw	r12, r26
    6e58:	c6 01       	movw	r24, r12
    6e5a:	b5 01       	movw	r22, r10
    6e5c:	29 ad       	ldd	r18, Y+57	; 0x39
    6e5e:	3a ad       	ldd	r19, Y+58	; 0x3a
    6e60:	4b ad       	ldd	r20, Y+59	; 0x3b
    6e62:	5c ad       	ldd	r21, Y+60	; 0x3c
    6e64:	0e 94 3d 44 	call	0x887a	; 0x887a <__mulsi3>
    6e68:	9b 01       	movw	r18, r22
    6e6a:	ac 01       	movw	r20, r24
    6e6c:	87 01       	movw	r16, r14
    6e6e:	ff 24       	eor	r15, r15
    6e70:	ee 24       	eor	r14, r14
    6e72:	8d a5       	ldd	r24, Y+45	; 0x2d
    6e74:	9e a5       	ldd	r25, Y+46	; 0x2e
    6e76:	af a5       	ldd	r26, Y+47	; 0x2f
    6e78:	b8 a9       	ldd	r27, Y+48	; 0x30
    6e7a:	a0 70       	andi	r26, 0x00	; 0
    6e7c:	b0 70       	andi	r27, 0x00	; 0
    6e7e:	e8 2a       	or	r14, r24
    6e80:	f9 2a       	or	r15, r25
    6e82:	0a 2b       	or	r16, r26
    6e84:	1b 2b       	or	r17, r27
    6e86:	e2 16       	cp	r14, r18
    6e88:	f3 06       	cpc	r15, r19
    6e8a:	04 07       	cpc	r16, r20
    6e8c:	15 07       	cpc	r17, r21
    6e8e:	c0 f4       	brcc	.+48     	; 0x6ec0 <__udivdi3+0x2ea>
    6e90:	08 94       	sec
    6e92:	a1 08       	sbc	r10, r1
    6e94:	b1 08       	sbc	r11, r1
    6e96:	c1 08       	sbc	r12, r1
    6e98:	d1 08       	sbc	r13, r1
    6e9a:	e2 0c       	add	r14, r2
    6e9c:	f3 1c       	adc	r15, r3
    6e9e:	04 1d       	adc	r16, r4
    6ea0:	15 1d       	adc	r17, r5
    6ea2:	e2 14       	cp	r14, r2
    6ea4:	f3 04       	cpc	r15, r3
    6ea6:	04 05       	cpc	r16, r4
    6ea8:	15 05       	cpc	r17, r5
    6eaa:	50 f0       	brcs	.+20     	; 0x6ec0 <__udivdi3+0x2ea>
    6eac:	e2 16       	cp	r14, r18
    6eae:	f3 06       	cpc	r15, r19
    6eb0:	04 07       	cpc	r16, r20
    6eb2:	15 07       	cpc	r17, r21
    6eb4:	28 f4       	brcc	.+10     	; 0x6ec0 <__udivdi3+0x2ea>
    6eb6:	08 94       	sec
    6eb8:	a1 08       	sbc	r10, r1
    6eba:	b1 08       	sbc	r11, r1
    6ebc:	c1 08       	sbc	r12, r1
    6ebe:	d1 08       	sbc	r13, r1
    6ec0:	d3 01       	movw	r26, r6
    6ec2:	99 27       	eor	r25, r25
    6ec4:	88 27       	eor	r24, r24
    6ec6:	86 01       	movw	r16, r12
    6ec8:	75 01       	movw	r14, r10
    6eca:	e8 2a       	or	r14, r24
    6ecc:	f9 2a       	or	r15, r25
    6ece:	0a 2b       	or	r16, r26
    6ed0:	1b 2b       	or	r17, r27
    6ed2:	e9 aa       	std	Y+49, r14	; 0x31
    6ed4:	fa aa       	std	Y+50, r15	; 0x32
    6ed6:	0b ab       	std	Y+51, r16	; 0x33
    6ed8:	1c ab       	std	Y+52, r17	; 0x34
    6eda:	cf c4       	rjmp	.+2462   	; 0x787a <__udivdi3+0xca4>
    6edc:	21 14       	cp	r2, r1
    6ede:	31 04       	cpc	r3, r1
    6ee0:	41 04       	cpc	r4, r1
    6ee2:	51 04       	cpc	r5, r1
    6ee4:	71 f4       	brne	.+28     	; 0x6f02 <__udivdi3+0x32c>
    6ee6:	61 e0       	ldi	r22, 0x01	; 1
    6ee8:	70 e0       	ldi	r23, 0x00	; 0
    6eea:	80 e0       	ldi	r24, 0x00	; 0
    6eec:	90 e0       	ldi	r25, 0x00	; 0
    6eee:	20 e0       	ldi	r18, 0x00	; 0
    6ef0:	30 e0       	ldi	r19, 0x00	; 0
    6ef2:	40 e0       	ldi	r20, 0x00	; 0
    6ef4:	50 e0       	ldi	r21, 0x00	; 0
    6ef6:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    6efa:	c9 01       	movw	r24, r18
    6efc:	da 01       	movw	r26, r20
    6efe:	1c 01       	movw	r2, r24
    6f00:	2d 01       	movw	r4, r26
    6f02:	00 e0       	ldi	r16, 0x00	; 0
    6f04:	20 16       	cp	r2, r16
    6f06:	00 e0       	ldi	r16, 0x00	; 0
    6f08:	30 06       	cpc	r3, r16
    6f0a:	01 e0       	ldi	r16, 0x01	; 1
    6f0c:	40 06       	cpc	r4, r16
    6f0e:	00 e0       	ldi	r16, 0x00	; 0
    6f10:	50 06       	cpc	r5, r16
    6f12:	88 f4       	brcc	.+34     	; 0x6f36 <__udivdi3+0x360>
    6f14:	1f ef       	ldi	r17, 0xFF	; 255
    6f16:	21 16       	cp	r2, r17
    6f18:	31 04       	cpc	r3, r1
    6f1a:	41 04       	cpc	r4, r1
    6f1c:	51 04       	cpc	r5, r1
    6f1e:	31 f0       	breq	.+12     	; 0x6f2c <__udivdi3+0x356>
    6f20:	28 f0       	brcs	.+10     	; 0x6f2c <__udivdi3+0x356>
    6f22:	48 e0       	ldi	r20, 0x08	; 8
    6f24:	50 e0       	ldi	r21, 0x00	; 0
    6f26:	60 e0       	ldi	r22, 0x00	; 0
    6f28:	70 e0       	ldi	r23, 0x00	; 0
    6f2a:	17 c0       	rjmp	.+46     	; 0x6f5a <__udivdi3+0x384>
    6f2c:	40 e0       	ldi	r20, 0x00	; 0
    6f2e:	50 e0       	ldi	r21, 0x00	; 0
    6f30:	60 e0       	ldi	r22, 0x00	; 0
    6f32:	70 e0       	ldi	r23, 0x00	; 0
    6f34:	12 c0       	rjmp	.+36     	; 0x6f5a <__udivdi3+0x384>
    6f36:	20 e0       	ldi	r18, 0x00	; 0
    6f38:	22 16       	cp	r2, r18
    6f3a:	20 e0       	ldi	r18, 0x00	; 0
    6f3c:	32 06       	cpc	r3, r18
    6f3e:	20 e0       	ldi	r18, 0x00	; 0
    6f40:	42 06       	cpc	r4, r18
    6f42:	21 e0       	ldi	r18, 0x01	; 1
    6f44:	52 06       	cpc	r5, r18
    6f46:	28 f0       	brcs	.+10     	; 0x6f52 <__udivdi3+0x37c>
    6f48:	48 e1       	ldi	r20, 0x18	; 24
    6f4a:	50 e0       	ldi	r21, 0x00	; 0
    6f4c:	60 e0       	ldi	r22, 0x00	; 0
    6f4e:	70 e0       	ldi	r23, 0x00	; 0
    6f50:	04 c0       	rjmp	.+8      	; 0x6f5a <__udivdi3+0x384>
    6f52:	40 e1       	ldi	r20, 0x10	; 16
    6f54:	50 e0       	ldi	r21, 0x00	; 0
    6f56:	60 e0       	ldi	r22, 0x00	; 0
    6f58:	70 e0       	ldi	r23, 0x00	; 0
    6f5a:	d2 01       	movw	r26, r4
    6f5c:	c1 01       	movw	r24, r2
    6f5e:	04 2e       	mov	r0, r20
    6f60:	04 c0       	rjmp	.+8      	; 0x6f6a <__udivdi3+0x394>
    6f62:	b6 95       	lsr	r27
    6f64:	a7 95       	ror	r26
    6f66:	97 95       	ror	r25
    6f68:	87 95       	ror	r24
    6f6a:	0a 94       	dec	r0
    6f6c:	d2 f7       	brpl	.-12     	; 0x6f62 <__udivdi3+0x38c>
    6f6e:	8d 5f       	subi	r24, 0xFD	; 253
    6f70:	9f 4d       	sbci	r25, 0xDF	; 223
    6f72:	dc 01       	movw	r26, r24
    6f74:	2c 91       	ld	r18, X
    6f76:	e0 e2       	ldi	r30, 0x20	; 32
    6f78:	ee 2e       	mov	r14, r30
    6f7a:	f1 2c       	mov	r15, r1
    6f7c:	01 2d       	mov	r16, r1
    6f7e:	11 2d       	mov	r17, r1
    6f80:	d8 01       	movw	r26, r16
    6f82:	c7 01       	movw	r24, r14
    6f84:	84 1b       	sub	r24, r20
    6f86:	95 0b       	sbc	r25, r21
    6f88:	a6 0b       	sbc	r26, r22
    6f8a:	b7 0b       	sbc	r27, r23
    6f8c:	82 1b       	sub	r24, r18
    6f8e:	91 09       	sbc	r25, r1
    6f90:	a1 09       	sbc	r26, r1
    6f92:	b1 09       	sbc	r27, r1
    6f94:	00 97       	sbiw	r24, 0x00	; 0
    6f96:	a1 05       	cpc	r26, r1
    6f98:	b1 05       	cpc	r27, r1
    6f9a:	61 f4       	brne	.+24     	; 0x6fb4 <__udivdi3+0x3de>
    6f9c:	64 01       	movw	r12, r8
    6f9e:	53 01       	movw	r10, r6
    6fa0:	a2 18       	sub	r10, r2
    6fa2:	b3 08       	sbc	r11, r3
    6fa4:	c4 08       	sbc	r12, r4
    6fa6:	d5 08       	sbc	r13, r5
    6fa8:	31 e0       	ldi	r19, 0x01	; 1
    6faa:	63 2e       	mov	r6, r19
    6fac:	71 2c       	mov	r7, r1
    6fae:	81 2c       	mov	r8, r1
    6fb0:	91 2c       	mov	r9, r1
    6fb2:	1e c1       	rjmp	.+572    	; 0x71f0 <__udivdi3+0x61a>
    6fb4:	6f 96       	adiw	r28, 0x1f	; 31
    6fb6:	8f af       	std	Y+63, r24	; 0x3f
    6fb8:	6f 97       	sbiw	r28, 0x1f	; 31
    6fba:	08 2e       	mov	r0, r24
    6fbc:	04 c0       	rjmp	.+8      	; 0x6fc6 <__udivdi3+0x3f0>
    6fbe:	22 0c       	add	r2, r2
    6fc0:	33 1c       	adc	r3, r3
    6fc2:	44 1c       	adc	r4, r4
    6fc4:	55 1c       	adc	r5, r5
    6fc6:	0a 94       	dec	r0
    6fc8:	d2 f7       	brpl	.-12     	; 0x6fbe <__udivdi3+0x3e8>
    6fca:	ee 2d       	mov	r30, r14
    6fcc:	e8 1b       	sub	r30, r24
    6fce:	64 01       	movw	r12, r8
    6fd0:	53 01       	movw	r10, r6
    6fd2:	0e 2e       	mov	r0, r30
    6fd4:	04 c0       	rjmp	.+8      	; 0x6fde <__udivdi3+0x408>
    6fd6:	d6 94       	lsr	r13
    6fd8:	c7 94       	ror	r12
    6fda:	b7 94       	ror	r11
    6fdc:	a7 94       	ror	r10
    6fde:	0a 94       	dec	r0
    6fe0:	d2 f7       	brpl	.-12     	; 0x6fd6 <__udivdi3+0x400>
    6fe2:	a4 01       	movw	r20, r8
    6fe4:	93 01       	movw	r18, r6
    6fe6:	6f 96       	adiw	r28, 0x1f	; 31
    6fe8:	0f ac       	ldd	r0, Y+63	; 0x3f
    6fea:	6f 97       	sbiw	r28, 0x1f	; 31
    6fec:	04 c0       	rjmp	.+8      	; 0x6ff6 <__udivdi3+0x420>
    6fee:	22 0f       	add	r18, r18
    6ff0:	33 1f       	adc	r19, r19
    6ff2:	44 1f       	adc	r20, r20
    6ff4:	55 1f       	adc	r21, r21
    6ff6:	0a 94       	dec	r0
    6ff8:	d2 f7       	brpl	.-12     	; 0x6fee <__udivdi3+0x418>
    6ffa:	6d a4       	ldd	r6, Y+45	; 0x2d
    6ffc:	7e a4       	ldd	r7, Y+46	; 0x2e
    6ffe:	8f a4       	ldd	r8, Y+47	; 0x2f
    7000:	98 a8       	ldd	r9, Y+48	; 0x30
    7002:	0e 2e       	mov	r0, r30
    7004:	04 c0       	rjmp	.+8      	; 0x700e <__udivdi3+0x438>
    7006:	96 94       	lsr	r9
    7008:	87 94       	ror	r8
    700a:	77 94       	ror	r7
    700c:	67 94       	ror	r6
    700e:	0a 94       	dec	r0
    7010:	d2 f7       	brpl	.-12     	; 0x7006 <__udivdi3+0x430>
    7012:	84 01       	movw	r16, r8
    7014:	73 01       	movw	r14, r6
    7016:	e2 2a       	or	r14, r18
    7018:	f3 2a       	or	r15, r19
    701a:	04 2b       	or	r16, r20
    701c:	15 2b       	or	r17, r21
    701e:	e9 a6       	std	Y+41, r14	; 0x29
    7020:	fa a6       	std	Y+42, r15	; 0x2a
    7022:	0b a7       	std	Y+43, r16	; 0x2b
    7024:	1c a7       	std	Y+44, r17	; 0x2c
    7026:	32 01       	movw	r6, r4
    7028:	88 24       	eor	r8, r8
    702a:	99 24       	eor	r9, r9
    702c:	92 01       	movw	r18, r4
    702e:	81 01       	movw	r16, r2
    7030:	20 70       	andi	r18, 0x00	; 0
    7032:	30 70       	andi	r19, 0x00	; 0
    7034:	21 96       	adiw	r28, 0x01	; 1
    7036:	0c af       	std	Y+60, r16	; 0x3c
    7038:	1d af       	std	Y+61, r17	; 0x3d
    703a:	2e af       	std	Y+62, r18	; 0x3e
    703c:	3f af       	std	Y+63, r19	; 0x3f
    703e:	21 97       	sbiw	r28, 0x01	; 1
    7040:	c6 01       	movw	r24, r12
    7042:	b5 01       	movw	r22, r10
    7044:	a4 01       	movw	r20, r8
    7046:	93 01       	movw	r18, r6
    7048:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    704c:	7b 01       	movw	r14, r22
    704e:	8c 01       	movw	r16, r24
    7050:	c6 01       	movw	r24, r12
    7052:	b5 01       	movw	r22, r10
    7054:	a4 01       	movw	r20, r8
    7056:	93 01       	movw	r18, r6
    7058:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    705c:	c9 01       	movw	r24, r18
    705e:	da 01       	movw	r26, r20
    7060:	25 96       	adiw	r28, 0x05	; 5
    7062:	8c af       	std	Y+60, r24	; 0x3c
    7064:	9d af       	std	Y+61, r25	; 0x3d
    7066:	ae af       	std	Y+62, r26	; 0x3e
    7068:	bf af       	std	Y+63, r27	; 0x3f
    706a:	25 97       	sbiw	r28, 0x05	; 5
    706c:	bc 01       	movw	r22, r24
    706e:	cd 01       	movw	r24, r26
    7070:	21 96       	adiw	r28, 0x01	; 1
    7072:	2c ad       	ldd	r18, Y+60	; 0x3c
    7074:	3d ad       	ldd	r19, Y+61	; 0x3d
    7076:	4e ad       	ldd	r20, Y+62	; 0x3e
    7078:	5f ad       	ldd	r21, Y+63	; 0x3f
    707a:	21 97       	sbiw	r28, 0x01	; 1
    707c:	0e 94 3d 44 	call	0x887a	; 0x887a <__mulsi3>
    7080:	9b 01       	movw	r18, r22
    7082:	ac 01       	movw	r20, r24
    7084:	87 01       	movw	r16, r14
    7086:	ff 24       	eor	r15, r15
    7088:	ee 24       	eor	r14, r14
    708a:	a9 a4       	ldd	r10, Y+41	; 0x29
    708c:	ba a4       	ldd	r11, Y+42	; 0x2a
    708e:	cb a4       	ldd	r12, Y+43	; 0x2b
    7090:	dc a4       	ldd	r13, Y+44	; 0x2c
    7092:	c6 01       	movw	r24, r12
    7094:	aa 27       	eor	r26, r26
    7096:	bb 27       	eor	r27, r27
    7098:	5c 01       	movw	r10, r24
    709a:	6d 01       	movw	r12, r26
    709c:	ae 28       	or	r10, r14
    709e:	bf 28       	or	r11, r15
    70a0:	c0 2a       	or	r12, r16
    70a2:	d1 2a       	or	r13, r17
    70a4:	a2 16       	cp	r10, r18
    70a6:	b3 06       	cpc	r11, r19
    70a8:	c4 06       	cpc	r12, r20
    70aa:	d5 06       	cpc	r13, r21
    70ac:	60 f5       	brcc	.+88     	; 0x7106 <__udivdi3+0x530>
    70ae:	25 96       	adiw	r28, 0x05	; 5
    70b0:	6c ad       	ldd	r22, Y+60	; 0x3c
    70b2:	7d ad       	ldd	r23, Y+61	; 0x3d
    70b4:	8e ad       	ldd	r24, Y+62	; 0x3e
    70b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    70b8:	25 97       	sbiw	r28, 0x05	; 5
    70ba:	61 50       	subi	r22, 0x01	; 1
    70bc:	70 40       	sbci	r23, 0x00	; 0
    70be:	80 40       	sbci	r24, 0x00	; 0
    70c0:	90 40       	sbci	r25, 0x00	; 0
    70c2:	25 96       	adiw	r28, 0x05	; 5
    70c4:	6c af       	std	Y+60, r22	; 0x3c
    70c6:	7d af       	std	Y+61, r23	; 0x3d
    70c8:	8e af       	std	Y+62, r24	; 0x3e
    70ca:	9f af       	std	Y+63, r25	; 0x3f
    70cc:	25 97       	sbiw	r28, 0x05	; 5
    70ce:	a2 0c       	add	r10, r2
    70d0:	b3 1c       	adc	r11, r3
    70d2:	c4 1c       	adc	r12, r4
    70d4:	d5 1c       	adc	r13, r5
    70d6:	a2 14       	cp	r10, r2
    70d8:	b3 04       	cpc	r11, r3
    70da:	c4 04       	cpc	r12, r4
    70dc:	d5 04       	cpc	r13, r5
    70de:	98 f0       	brcs	.+38     	; 0x7106 <__udivdi3+0x530>
    70e0:	a2 16       	cp	r10, r18
    70e2:	b3 06       	cpc	r11, r19
    70e4:	c4 06       	cpc	r12, r20
    70e6:	d5 06       	cpc	r13, r21
    70e8:	70 f4       	brcc	.+28     	; 0x7106 <__udivdi3+0x530>
    70ea:	61 50       	subi	r22, 0x01	; 1
    70ec:	70 40       	sbci	r23, 0x00	; 0
    70ee:	80 40       	sbci	r24, 0x00	; 0
    70f0:	90 40       	sbci	r25, 0x00	; 0
    70f2:	25 96       	adiw	r28, 0x05	; 5
    70f4:	6c af       	std	Y+60, r22	; 0x3c
    70f6:	7d af       	std	Y+61, r23	; 0x3d
    70f8:	8e af       	std	Y+62, r24	; 0x3e
    70fa:	9f af       	std	Y+63, r25	; 0x3f
    70fc:	25 97       	sbiw	r28, 0x05	; 5
    70fe:	a2 0c       	add	r10, r2
    7100:	b3 1c       	adc	r11, r3
    7102:	c4 1c       	adc	r12, r4
    7104:	d5 1c       	adc	r13, r5
    7106:	a2 1a       	sub	r10, r18
    7108:	b3 0a       	sbc	r11, r19
    710a:	c4 0a       	sbc	r12, r20
    710c:	d5 0a       	sbc	r13, r21
    710e:	c6 01       	movw	r24, r12
    7110:	b5 01       	movw	r22, r10
    7112:	a4 01       	movw	r20, r8
    7114:	93 01       	movw	r18, r6
    7116:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    711a:	7b 01       	movw	r14, r22
    711c:	8c 01       	movw	r16, r24
    711e:	c6 01       	movw	r24, r12
    7120:	b5 01       	movw	r22, r10
    7122:	a4 01       	movw	r20, r8
    7124:	93 01       	movw	r18, r6
    7126:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    712a:	c9 01       	movw	r24, r18
    712c:	da 01       	movw	r26, r20
    712e:	3c 01       	movw	r6, r24
    7130:	4d 01       	movw	r8, r26
    7132:	c4 01       	movw	r24, r8
    7134:	b3 01       	movw	r22, r6
    7136:	21 96       	adiw	r28, 0x01	; 1
    7138:	2c ad       	ldd	r18, Y+60	; 0x3c
    713a:	3d ad       	ldd	r19, Y+61	; 0x3d
    713c:	4e ad       	ldd	r20, Y+62	; 0x3e
    713e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7140:	21 97       	sbiw	r28, 0x01	; 1
    7142:	0e 94 3d 44 	call	0x887a	; 0x887a <__mulsi3>
    7146:	9b 01       	movw	r18, r22
    7148:	ac 01       	movw	r20, r24
    714a:	87 01       	movw	r16, r14
    714c:	ff 24       	eor	r15, r15
    714e:	ee 24       	eor	r14, r14
    7150:	89 a5       	ldd	r24, Y+41	; 0x29
    7152:	9a a5       	ldd	r25, Y+42	; 0x2a
    7154:	ab a5       	ldd	r26, Y+43	; 0x2b
    7156:	bc a5       	ldd	r27, Y+44	; 0x2c
    7158:	a0 70       	andi	r26, 0x00	; 0
    715a:	b0 70       	andi	r27, 0x00	; 0
    715c:	57 01       	movw	r10, r14
    715e:	68 01       	movw	r12, r16
    7160:	a8 2a       	or	r10, r24
    7162:	b9 2a       	or	r11, r25
    7164:	ca 2a       	or	r12, r26
    7166:	db 2a       	or	r13, r27
    7168:	a2 16       	cp	r10, r18
    716a:	b3 06       	cpc	r11, r19
    716c:	c4 06       	cpc	r12, r20
    716e:	d5 06       	cpc	r13, r21
    7170:	e0 f4       	brcc	.+56     	; 0x71aa <__udivdi3+0x5d4>
    7172:	08 94       	sec
    7174:	61 08       	sbc	r6, r1
    7176:	71 08       	sbc	r7, r1
    7178:	81 08       	sbc	r8, r1
    717a:	91 08       	sbc	r9, r1
    717c:	a2 0c       	add	r10, r2
    717e:	b3 1c       	adc	r11, r3
    7180:	c4 1c       	adc	r12, r4
    7182:	d5 1c       	adc	r13, r5
    7184:	a2 14       	cp	r10, r2
    7186:	b3 04       	cpc	r11, r3
    7188:	c4 04       	cpc	r12, r4
    718a:	d5 04       	cpc	r13, r5
    718c:	70 f0       	brcs	.+28     	; 0x71aa <__udivdi3+0x5d4>
    718e:	a2 16       	cp	r10, r18
    7190:	b3 06       	cpc	r11, r19
    7192:	c4 06       	cpc	r12, r20
    7194:	d5 06       	cpc	r13, r21
    7196:	48 f4       	brcc	.+18     	; 0x71aa <__udivdi3+0x5d4>
    7198:	08 94       	sec
    719a:	61 08       	sbc	r6, r1
    719c:	71 08       	sbc	r7, r1
    719e:	81 08       	sbc	r8, r1
    71a0:	91 08       	sbc	r9, r1
    71a2:	a2 0c       	add	r10, r2
    71a4:	b3 1c       	adc	r11, r3
    71a6:	c4 1c       	adc	r12, r4
    71a8:	d5 1c       	adc	r13, r5
    71aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    71ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    71ae:	af a5       	ldd	r26, Y+47	; 0x2f
    71b0:	b8 a9       	ldd	r27, Y+48	; 0x30
    71b2:	6f 96       	adiw	r28, 0x1f	; 31
    71b4:	0f ac       	ldd	r0, Y+63	; 0x3f
    71b6:	6f 97       	sbiw	r28, 0x1f	; 31
    71b8:	04 c0       	rjmp	.+8      	; 0x71c2 <__udivdi3+0x5ec>
    71ba:	88 0f       	add	r24, r24
    71bc:	99 1f       	adc	r25, r25
    71be:	aa 1f       	adc	r26, r26
    71c0:	bb 1f       	adc	r27, r27
    71c2:	0a 94       	dec	r0
    71c4:	d2 f7       	brpl	.-12     	; 0x71ba <__udivdi3+0x5e4>
    71c6:	8d a7       	std	Y+45, r24	; 0x2d
    71c8:	9e a7       	std	Y+46, r25	; 0x2e
    71ca:	af a7       	std	Y+47, r26	; 0x2f
    71cc:	b8 ab       	std	Y+48, r27	; 0x30
    71ce:	a2 1a       	sub	r10, r18
    71d0:	b3 0a       	sbc	r11, r19
    71d2:	c4 0a       	sbc	r12, r20
    71d4:	d5 0a       	sbc	r13, r21
    71d6:	25 96       	adiw	r28, 0x05	; 5
    71d8:	ec ac       	ldd	r14, Y+60	; 0x3c
    71da:	fd ac       	ldd	r15, Y+61	; 0x3d
    71dc:	0e ad       	ldd	r16, Y+62	; 0x3e
    71de:	1f ad       	ldd	r17, Y+63	; 0x3f
    71e0:	25 97       	sbiw	r28, 0x05	; 5
    71e2:	d7 01       	movw	r26, r14
    71e4:	99 27       	eor	r25, r25
    71e6:	88 27       	eor	r24, r24
    71e8:	68 2a       	or	r6, r24
    71ea:	79 2a       	or	r7, r25
    71ec:	8a 2a       	or	r8, r26
    71ee:	9b 2a       	or	r9, r27
    71f0:	82 01       	movw	r16, r4
    71f2:	22 27       	eor	r18, r18
    71f4:	33 27       	eor	r19, r19
    71f6:	29 96       	adiw	r28, 0x09	; 9
    71f8:	0c af       	std	Y+60, r16	; 0x3c
    71fa:	1d af       	std	Y+61, r17	; 0x3d
    71fc:	2e af       	std	Y+62, r18	; 0x3e
    71fe:	3f af       	std	Y+63, r19	; 0x3f
    7200:	29 97       	sbiw	r28, 0x09	; 9
    7202:	a2 01       	movw	r20, r4
    7204:	91 01       	movw	r18, r2
    7206:	40 70       	andi	r20, 0x00	; 0
    7208:	50 70       	andi	r21, 0x00	; 0
    720a:	2d 96       	adiw	r28, 0x0d	; 13
    720c:	2c af       	std	Y+60, r18	; 0x3c
    720e:	3d af       	std	Y+61, r19	; 0x3d
    7210:	4e af       	std	Y+62, r20	; 0x3e
    7212:	5f af       	std	Y+63, r21	; 0x3f
    7214:	2d 97       	sbiw	r28, 0x0d	; 13
    7216:	c6 01       	movw	r24, r12
    7218:	b5 01       	movw	r22, r10
    721a:	29 96       	adiw	r28, 0x09	; 9
    721c:	2c ad       	ldd	r18, Y+60	; 0x3c
    721e:	3d ad       	ldd	r19, Y+61	; 0x3d
    7220:	4e ad       	ldd	r20, Y+62	; 0x3e
    7222:	5f ad       	ldd	r21, Y+63	; 0x3f
    7224:	29 97       	sbiw	r28, 0x09	; 9
    7226:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    722a:	7b 01       	movw	r14, r22
    722c:	8c 01       	movw	r16, r24
    722e:	c6 01       	movw	r24, r12
    7230:	b5 01       	movw	r22, r10
    7232:	29 96       	adiw	r28, 0x09	; 9
    7234:	2c ad       	ldd	r18, Y+60	; 0x3c
    7236:	3d ad       	ldd	r19, Y+61	; 0x3d
    7238:	4e ad       	ldd	r20, Y+62	; 0x3e
    723a:	5f ad       	ldd	r21, Y+63	; 0x3f
    723c:	29 97       	sbiw	r28, 0x09	; 9
    723e:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    7242:	c9 01       	movw	r24, r18
    7244:	da 01       	movw	r26, r20
    7246:	61 96       	adiw	r28, 0x11	; 17
    7248:	8c af       	std	Y+60, r24	; 0x3c
    724a:	9d af       	std	Y+61, r25	; 0x3d
    724c:	ae af       	std	Y+62, r26	; 0x3e
    724e:	bf af       	std	Y+63, r27	; 0x3f
    7250:	61 97       	sbiw	r28, 0x11	; 17
    7252:	bc 01       	movw	r22, r24
    7254:	cd 01       	movw	r24, r26
    7256:	2d 96       	adiw	r28, 0x0d	; 13
    7258:	2c ad       	ldd	r18, Y+60	; 0x3c
    725a:	3d ad       	ldd	r19, Y+61	; 0x3d
    725c:	4e ad       	ldd	r20, Y+62	; 0x3e
    725e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7260:	2d 97       	sbiw	r28, 0x0d	; 13
    7262:	0e 94 3d 44 	call	0x887a	; 0x887a <__mulsi3>
    7266:	9b 01       	movw	r18, r22
    7268:	ac 01       	movw	r20, r24
    726a:	87 01       	movw	r16, r14
    726c:	ff 24       	eor	r15, r15
    726e:	ee 24       	eor	r14, r14
    7270:	ad a4       	ldd	r10, Y+45	; 0x2d
    7272:	be a4       	ldd	r11, Y+46	; 0x2e
    7274:	cf a4       	ldd	r12, Y+47	; 0x2f
    7276:	d8 a8       	ldd	r13, Y+48	; 0x30
    7278:	c6 01       	movw	r24, r12
    727a:	aa 27       	eor	r26, r26
    727c:	bb 27       	eor	r27, r27
    727e:	57 01       	movw	r10, r14
    7280:	68 01       	movw	r12, r16
    7282:	a8 2a       	or	r10, r24
    7284:	b9 2a       	or	r11, r25
    7286:	ca 2a       	or	r12, r26
    7288:	db 2a       	or	r13, r27
    728a:	a2 16       	cp	r10, r18
    728c:	b3 06       	cpc	r11, r19
    728e:	c4 06       	cpc	r12, r20
    7290:	d5 06       	cpc	r13, r21
    7292:	60 f5       	brcc	.+88     	; 0x72ec <__udivdi3+0x716>
    7294:	61 96       	adiw	r28, 0x11	; 17
    7296:	6c ad       	ldd	r22, Y+60	; 0x3c
    7298:	7d ad       	ldd	r23, Y+61	; 0x3d
    729a:	8e ad       	ldd	r24, Y+62	; 0x3e
    729c:	9f ad       	ldd	r25, Y+63	; 0x3f
    729e:	61 97       	sbiw	r28, 0x11	; 17
    72a0:	61 50       	subi	r22, 0x01	; 1
    72a2:	70 40       	sbci	r23, 0x00	; 0
    72a4:	80 40       	sbci	r24, 0x00	; 0
    72a6:	90 40       	sbci	r25, 0x00	; 0
    72a8:	61 96       	adiw	r28, 0x11	; 17
    72aa:	6c af       	std	Y+60, r22	; 0x3c
    72ac:	7d af       	std	Y+61, r23	; 0x3d
    72ae:	8e af       	std	Y+62, r24	; 0x3e
    72b0:	9f af       	std	Y+63, r25	; 0x3f
    72b2:	61 97       	sbiw	r28, 0x11	; 17
    72b4:	a2 0c       	add	r10, r2
    72b6:	b3 1c       	adc	r11, r3
    72b8:	c4 1c       	adc	r12, r4
    72ba:	d5 1c       	adc	r13, r5
    72bc:	a2 14       	cp	r10, r2
    72be:	b3 04       	cpc	r11, r3
    72c0:	c4 04       	cpc	r12, r4
    72c2:	d5 04       	cpc	r13, r5
    72c4:	98 f0       	brcs	.+38     	; 0x72ec <__udivdi3+0x716>
    72c6:	a2 16       	cp	r10, r18
    72c8:	b3 06       	cpc	r11, r19
    72ca:	c4 06       	cpc	r12, r20
    72cc:	d5 06       	cpc	r13, r21
    72ce:	70 f4       	brcc	.+28     	; 0x72ec <__udivdi3+0x716>
    72d0:	61 50       	subi	r22, 0x01	; 1
    72d2:	70 40       	sbci	r23, 0x00	; 0
    72d4:	80 40       	sbci	r24, 0x00	; 0
    72d6:	90 40       	sbci	r25, 0x00	; 0
    72d8:	61 96       	adiw	r28, 0x11	; 17
    72da:	6c af       	std	Y+60, r22	; 0x3c
    72dc:	7d af       	std	Y+61, r23	; 0x3d
    72de:	8e af       	std	Y+62, r24	; 0x3e
    72e0:	9f af       	std	Y+63, r25	; 0x3f
    72e2:	61 97       	sbiw	r28, 0x11	; 17
    72e4:	a2 0c       	add	r10, r2
    72e6:	b3 1c       	adc	r11, r3
    72e8:	c4 1c       	adc	r12, r4
    72ea:	d5 1c       	adc	r13, r5
    72ec:	a2 1a       	sub	r10, r18
    72ee:	b3 0a       	sbc	r11, r19
    72f0:	c4 0a       	sbc	r12, r20
    72f2:	d5 0a       	sbc	r13, r21
    72f4:	c6 01       	movw	r24, r12
    72f6:	b5 01       	movw	r22, r10
    72f8:	29 96       	adiw	r28, 0x09	; 9
    72fa:	2c ad       	ldd	r18, Y+60	; 0x3c
    72fc:	3d ad       	ldd	r19, Y+61	; 0x3d
    72fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    7300:	5f ad       	ldd	r21, Y+63	; 0x3f
    7302:	29 97       	sbiw	r28, 0x09	; 9
    7304:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    7308:	7b 01       	movw	r14, r22
    730a:	8c 01       	movw	r16, r24
    730c:	c6 01       	movw	r24, r12
    730e:	b5 01       	movw	r22, r10
    7310:	29 96       	adiw	r28, 0x09	; 9
    7312:	2c ad       	ldd	r18, Y+60	; 0x3c
    7314:	3d ad       	ldd	r19, Y+61	; 0x3d
    7316:	4e ad       	ldd	r20, Y+62	; 0x3e
    7318:	5f ad       	ldd	r21, Y+63	; 0x3f
    731a:	29 97       	sbiw	r28, 0x09	; 9
    731c:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    7320:	c9 01       	movw	r24, r18
    7322:	da 01       	movw	r26, r20
    7324:	5c 01       	movw	r10, r24
    7326:	6d 01       	movw	r12, r26
    7328:	c6 01       	movw	r24, r12
    732a:	b5 01       	movw	r22, r10
    732c:	2d 96       	adiw	r28, 0x0d	; 13
    732e:	2c ad       	ldd	r18, Y+60	; 0x3c
    7330:	3d ad       	ldd	r19, Y+61	; 0x3d
    7332:	4e ad       	ldd	r20, Y+62	; 0x3e
    7334:	5f ad       	ldd	r21, Y+63	; 0x3f
    7336:	2d 97       	sbiw	r28, 0x0d	; 13
    7338:	0e 94 3d 44 	call	0x887a	; 0x887a <__mulsi3>
    733c:	9b 01       	movw	r18, r22
    733e:	ac 01       	movw	r20, r24
    7340:	87 01       	movw	r16, r14
    7342:	ff 24       	eor	r15, r15
    7344:	ee 24       	eor	r14, r14
    7346:	8d a5       	ldd	r24, Y+45	; 0x2d
    7348:	9e a5       	ldd	r25, Y+46	; 0x2e
    734a:	af a5       	ldd	r26, Y+47	; 0x2f
    734c:	b8 a9       	ldd	r27, Y+48	; 0x30
    734e:	a0 70       	andi	r26, 0x00	; 0
    7350:	b0 70       	andi	r27, 0x00	; 0
    7352:	e8 2a       	or	r14, r24
    7354:	f9 2a       	or	r15, r25
    7356:	0a 2b       	or	r16, r26
    7358:	1b 2b       	or	r17, r27
    735a:	e2 16       	cp	r14, r18
    735c:	f3 06       	cpc	r15, r19
    735e:	04 07       	cpc	r16, r20
    7360:	15 07       	cpc	r17, r21
    7362:	c0 f4       	brcc	.+48     	; 0x7394 <__udivdi3+0x7be>
    7364:	08 94       	sec
    7366:	a1 08       	sbc	r10, r1
    7368:	b1 08       	sbc	r11, r1
    736a:	c1 08       	sbc	r12, r1
    736c:	d1 08       	sbc	r13, r1
    736e:	e2 0c       	add	r14, r2
    7370:	f3 1c       	adc	r15, r3
    7372:	04 1d       	adc	r16, r4
    7374:	15 1d       	adc	r17, r5
    7376:	e2 14       	cp	r14, r2
    7378:	f3 04       	cpc	r15, r3
    737a:	04 05       	cpc	r16, r4
    737c:	15 05       	cpc	r17, r5
    737e:	50 f0       	brcs	.+20     	; 0x7394 <__udivdi3+0x7be>
    7380:	e2 16       	cp	r14, r18
    7382:	f3 06       	cpc	r15, r19
    7384:	04 07       	cpc	r16, r20
    7386:	15 07       	cpc	r17, r21
    7388:	28 f4       	brcc	.+10     	; 0x7394 <__udivdi3+0x7be>
    738a:	08 94       	sec
    738c:	a1 08       	sbc	r10, r1
    738e:	b1 08       	sbc	r11, r1
    7390:	c1 08       	sbc	r12, r1
    7392:	d1 08       	sbc	r13, r1
    7394:	61 96       	adiw	r28, 0x11	; 17
    7396:	ec ac       	ldd	r14, Y+60	; 0x3c
    7398:	fd ac       	ldd	r15, Y+61	; 0x3d
    739a:	0e ad       	ldd	r16, Y+62	; 0x3e
    739c:	1f ad       	ldd	r17, Y+63	; 0x3f
    739e:	61 97       	sbiw	r28, 0x11	; 17
    73a0:	d7 01       	movw	r26, r14
    73a2:	99 27       	eor	r25, r25
    73a4:	88 27       	eor	r24, r24
    73a6:	96 01       	movw	r18, r12
    73a8:	85 01       	movw	r16, r10
    73aa:	08 2b       	or	r16, r24
    73ac:	19 2b       	or	r17, r25
    73ae:	2a 2b       	or	r18, r26
    73b0:	3b 2b       	or	r19, r27
    73b2:	09 ab       	std	Y+49, r16	; 0x31
    73b4:	1a ab       	std	Y+50, r17	; 0x32
    73b6:	2b ab       	std	Y+51, r18	; 0x33
    73b8:	3c ab       	std	Y+52, r19	; 0x34
    73ba:	62 c2       	rjmp	.+1220   	; 0x7880 <__udivdi3+0xcaa>
    73bc:	6e 14       	cp	r6, r14
    73be:	7f 04       	cpc	r7, r15
    73c0:	80 06       	cpc	r8, r16
    73c2:	91 06       	cpc	r9, r17
    73c4:	08 f4       	brcc	.+2      	; 0x73c8 <__udivdi3+0x7f2>
    73c6:	51 c2       	rjmp	.+1186   	; 0x786a <__udivdi3+0xc94>
    73c8:	20 e0       	ldi	r18, 0x00	; 0
    73ca:	e2 16       	cp	r14, r18
    73cc:	20 e0       	ldi	r18, 0x00	; 0
    73ce:	f2 06       	cpc	r15, r18
    73d0:	21 e0       	ldi	r18, 0x01	; 1
    73d2:	02 07       	cpc	r16, r18
    73d4:	20 e0       	ldi	r18, 0x00	; 0
    73d6:	12 07       	cpc	r17, r18
    73d8:	88 f4       	brcc	.+34     	; 0x73fc <__udivdi3+0x826>
    73da:	3f ef       	ldi	r19, 0xFF	; 255
    73dc:	e3 16       	cp	r14, r19
    73de:	f1 04       	cpc	r15, r1
    73e0:	01 05       	cpc	r16, r1
    73e2:	11 05       	cpc	r17, r1
    73e4:	31 f0       	breq	.+12     	; 0x73f2 <__udivdi3+0x81c>
    73e6:	28 f0       	brcs	.+10     	; 0x73f2 <__udivdi3+0x81c>
    73e8:	48 e0       	ldi	r20, 0x08	; 8
    73ea:	50 e0       	ldi	r21, 0x00	; 0
    73ec:	60 e0       	ldi	r22, 0x00	; 0
    73ee:	70 e0       	ldi	r23, 0x00	; 0
    73f0:	17 c0       	rjmp	.+46     	; 0x7420 <__udivdi3+0x84a>
    73f2:	40 e0       	ldi	r20, 0x00	; 0
    73f4:	50 e0       	ldi	r21, 0x00	; 0
    73f6:	60 e0       	ldi	r22, 0x00	; 0
    73f8:	70 e0       	ldi	r23, 0x00	; 0
    73fa:	12 c0       	rjmp	.+36     	; 0x7420 <__udivdi3+0x84a>
    73fc:	40 e0       	ldi	r20, 0x00	; 0
    73fe:	e4 16       	cp	r14, r20
    7400:	40 e0       	ldi	r20, 0x00	; 0
    7402:	f4 06       	cpc	r15, r20
    7404:	40 e0       	ldi	r20, 0x00	; 0
    7406:	04 07       	cpc	r16, r20
    7408:	41 e0       	ldi	r20, 0x01	; 1
    740a:	14 07       	cpc	r17, r20
    740c:	28 f0       	brcs	.+10     	; 0x7418 <__udivdi3+0x842>
    740e:	48 e1       	ldi	r20, 0x18	; 24
    7410:	50 e0       	ldi	r21, 0x00	; 0
    7412:	60 e0       	ldi	r22, 0x00	; 0
    7414:	70 e0       	ldi	r23, 0x00	; 0
    7416:	04 c0       	rjmp	.+8      	; 0x7420 <__udivdi3+0x84a>
    7418:	40 e1       	ldi	r20, 0x10	; 16
    741a:	50 e0       	ldi	r21, 0x00	; 0
    741c:	60 e0       	ldi	r22, 0x00	; 0
    741e:	70 e0       	ldi	r23, 0x00	; 0
    7420:	d8 01       	movw	r26, r16
    7422:	c7 01       	movw	r24, r14
    7424:	04 2e       	mov	r0, r20
    7426:	04 c0       	rjmp	.+8      	; 0x7430 <__udivdi3+0x85a>
    7428:	b6 95       	lsr	r27
    742a:	a7 95       	ror	r26
    742c:	97 95       	ror	r25
    742e:	87 95       	ror	r24
    7430:	0a 94       	dec	r0
    7432:	d2 f7       	brpl	.-12     	; 0x7428 <__udivdi3+0x852>
    7434:	8d 5f       	subi	r24, 0xFD	; 253
    7436:	9f 4d       	sbci	r25, 0xDF	; 223
    7438:	dc 01       	movw	r26, r24
    743a:	2c 91       	ld	r18, X
    743c:	30 e2       	ldi	r19, 0x20	; 32
    743e:	a3 2e       	mov	r10, r19
    7440:	b1 2c       	mov	r11, r1
    7442:	c1 2c       	mov	r12, r1
    7444:	d1 2c       	mov	r13, r1
    7446:	d6 01       	movw	r26, r12
    7448:	c5 01       	movw	r24, r10
    744a:	84 1b       	sub	r24, r20
    744c:	95 0b       	sbc	r25, r21
    744e:	a6 0b       	sbc	r26, r22
    7450:	b7 0b       	sbc	r27, r23
    7452:	82 1b       	sub	r24, r18
    7454:	91 09       	sbc	r25, r1
    7456:	a1 09       	sbc	r26, r1
    7458:	b1 09       	sbc	r27, r1
    745a:	00 97       	sbiw	r24, 0x00	; 0
    745c:	a1 05       	cpc	r26, r1
    745e:	b1 05       	cpc	r27, r1
    7460:	89 f4       	brne	.+34     	; 0x7484 <__udivdi3+0x8ae>
    7462:	e6 14       	cp	r14, r6
    7464:	f7 04       	cpc	r15, r7
    7466:	08 05       	cpc	r16, r8
    7468:	19 05       	cpc	r17, r9
    746a:	08 f4       	brcc	.+2      	; 0x746e <__udivdi3+0x898>
    746c:	f2 c1       	rjmp	.+996    	; 0x7852 <__udivdi3+0xc7c>
    746e:	6d a4       	ldd	r6, Y+45	; 0x2d
    7470:	7e a4       	ldd	r7, Y+46	; 0x2e
    7472:	8f a4       	ldd	r8, Y+47	; 0x2f
    7474:	98 a8       	ldd	r9, Y+48	; 0x30
    7476:	62 14       	cp	r6, r2
    7478:	73 04       	cpc	r7, r3
    747a:	84 04       	cpc	r8, r4
    747c:	95 04       	cpc	r9, r5
    747e:	08 f0       	brcs	.+2      	; 0x7482 <__udivdi3+0x8ac>
    7480:	e8 c1       	rjmp	.+976    	; 0x7852 <__udivdi3+0xc7c>
    7482:	f3 c1       	rjmp	.+998    	; 0x786a <__udivdi3+0xc94>
    7484:	6e 96       	adiw	r28, 0x1e	; 30
    7486:	8f af       	std	Y+63, r24	; 0x3f
    7488:	6e 97       	sbiw	r28, 0x1e	; 30
    748a:	08 2e       	mov	r0, r24
    748c:	04 c0       	rjmp	.+8      	; 0x7496 <__udivdi3+0x8c0>
    748e:	ee 0c       	add	r14, r14
    7490:	ff 1c       	adc	r15, r15
    7492:	00 1f       	adc	r16, r16
    7494:	11 1f       	adc	r17, r17
    7496:	0a 94       	dec	r0
    7498:	d2 f7       	brpl	.-12     	; 0x748e <__udivdi3+0x8b8>
    749a:	6a 2d       	mov	r22, r10
    749c:	68 1b       	sub	r22, r24
    749e:	d2 01       	movw	r26, r4
    74a0:	c1 01       	movw	r24, r2
    74a2:	06 2e       	mov	r0, r22
    74a4:	04 c0       	rjmp	.+8      	; 0x74ae <__udivdi3+0x8d8>
    74a6:	b6 95       	lsr	r27
    74a8:	a7 95       	ror	r26
    74aa:	97 95       	ror	r25
    74ac:	87 95       	ror	r24
    74ae:	0a 94       	dec	r0
    74b0:	d2 f7       	brpl	.-12     	; 0x74a6 <__udivdi3+0x8d0>
    74b2:	5c 01       	movw	r10, r24
    74b4:	6d 01       	movw	r12, r26
    74b6:	ae 28       	or	r10, r14
    74b8:	bf 28       	or	r11, r15
    74ba:	c0 2a       	or	r12, r16
    74bc:	d1 2a       	or	r13, r17
    74be:	ad a2       	std	Y+37, r10	; 0x25
    74c0:	be a2       	std	Y+38, r11	; 0x26
    74c2:	cf a2       	std	Y+39, r12	; 0x27
    74c4:	d8 a6       	std	Y+40, r13	; 0x28
    74c6:	72 01       	movw	r14, r4
    74c8:	61 01       	movw	r12, r2
    74ca:	6e 96       	adiw	r28, 0x1e	; 30
    74cc:	0f ac       	ldd	r0, Y+63	; 0x3f
    74ce:	6e 97       	sbiw	r28, 0x1e	; 30
    74d0:	04 c0       	rjmp	.+8      	; 0x74da <__udivdi3+0x904>
    74d2:	cc 0c       	add	r12, r12
    74d4:	dd 1c       	adc	r13, r13
    74d6:	ee 1c       	adc	r14, r14
    74d8:	ff 1c       	adc	r15, r15
    74da:	0a 94       	dec	r0
    74dc:	d2 f7       	brpl	.-12     	; 0x74d2 <__udivdi3+0x8fc>
    74de:	c9 a2       	std	Y+33, r12	; 0x21
    74e0:	da a2       	std	Y+34, r13	; 0x22
    74e2:	eb a2       	std	Y+35, r14	; 0x23
    74e4:	fc a2       	std	Y+36, r15	; 0x24
    74e6:	64 01       	movw	r12, r8
    74e8:	53 01       	movw	r10, r6
    74ea:	06 2e       	mov	r0, r22
    74ec:	04 c0       	rjmp	.+8      	; 0x74f6 <__udivdi3+0x920>
    74ee:	d6 94       	lsr	r13
    74f0:	c7 94       	ror	r12
    74f2:	b7 94       	ror	r11
    74f4:	a7 94       	ror	r10
    74f6:	0a 94       	dec	r0
    74f8:	d2 f7       	brpl	.-12     	; 0x74ee <__udivdi3+0x918>
    74fa:	d4 01       	movw	r26, r8
    74fc:	c3 01       	movw	r24, r6
    74fe:	6e 96       	adiw	r28, 0x1e	; 30
    7500:	0f ac       	ldd	r0, Y+63	; 0x3f
    7502:	6e 97       	sbiw	r28, 0x1e	; 30
    7504:	04 c0       	rjmp	.+8      	; 0x750e <__udivdi3+0x938>
    7506:	88 0f       	add	r24, r24
    7508:	99 1f       	adc	r25, r25
    750a:	aa 1f       	adc	r26, r26
    750c:	bb 1f       	adc	r27, r27
    750e:	0a 94       	dec	r0
    7510:	d2 f7       	brpl	.-12     	; 0x7506 <__udivdi3+0x930>
    7512:	ed a4       	ldd	r14, Y+45	; 0x2d
    7514:	fe a4       	ldd	r15, Y+46	; 0x2e
    7516:	0f a5       	ldd	r16, Y+47	; 0x2f
    7518:	18 a9       	ldd	r17, Y+48	; 0x30
    751a:	04 c0       	rjmp	.+8      	; 0x7524 <__udivdi3+0x94e>
    751c:	16 95       	lsr	r17
    751e:	07 95       	ror	r16
    7520:	f7 94       	ror	r15
    7522:	e7 94       	ror	r14
    7524:	6a 95       	dec	r22
    7526:	d2 f7       	brpl	.-12     	; 0x751c <__udivdi3+0x946>
    7528:	37 01       	movw	r6, r14
    752a:	48 01       	movw	r8, r16
    752c:	68 2a       	or	r6, r24
    752e:	79 2a       	or	r7, r25
    7530:	8a 2a       	or	r8, r26
    7532:	9b 2a       	or	r9, r27
    7534:	6d 8e       	std	Y+29, r6	; 0x1d
    7536:	7e 8e       	std	Y+30, r7	; 0x1e
    7538:	8f 8e       	std	Y+31, r8	; 0x1f
    753a:	98 a2       	std	Y+32, r9	; 0x20
    753c:	ed a0       	ldd	r14, Y+37	; 0x25
    753e:	fe a0       	ldd	r15, Y+38	; 0x26
    7540:	0f a1       	ldd	r16, Y+39	; 0x27
    7542:	18 a5       	ldd	r17, Y+40	; 0x28
    7544:	38 01       	movw	r6, r16
    7546:	88 24       	eor	r8, r8
    7548:	99 24       	eor	r9, r9
    754a:	98 01       	movw	r18, r16
    754c:	87 01       	movw	r16, r14
    754e:	20 70       	andi	r18, 0x00	; 0
    7550:	30 70       	andi	r19, 0x00	; 0
    7552:	65 96       	adiw	r28, 0x15	; 21
    7554:	0c af       	std	Y+60, r16	; 0x3c
    7556:	1d af       	std	Y+61, r17	; 0x3d
    7558:	2e af       	std	Y+62, r18	; 0x3e
    755a:	3f af       	std	Y+63, r19	; 0x3f
    755c:	65 97       	sbiw	r28, 0x15	; 21
    755e:	c6 01       	movw	r24, r12
    7560:	b5 01       	movw	r22, r10
    7562:	a4 01       	movw	r20, r8
    7564:	93 01       	movw	r18, r6
    7566:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    756a:	7b 01       	movw	r14, r22
    756c:	8c 01       	movw	r16, r24
    756e:	c6 01       	movw	r24, r12
    7570:	b5 01       	movw	r22, r10
    7572:	a4 01       	movw	r20, r8
    7574:	93 01       	movw	r18, r6
    7576:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    757a:	c9 01       	movw	r24, r18
    757c:	da 01       	movw	r26, r20
    757e:	1c 01       	movw	r2, r24
    7580:	2d 01       	movw	r4, r26
    7582:	c2 01       	movw	r24, r4
    7584:	b1 01       	movw	r22, r2
    7586:	65 96       	adiw	r28, 0x15	; 21
    7588:	2c ad       	ldd	r18, Y+60	; 0x3c
    758a:	3d ad       	ldd	r19, Y+61	; 0x3d
    758c:	4e ad       	ldd	r20, Y+62	; 0x3e
    758e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7590:	65 97       	sbiw	r28, 0x15	; 21
    7592:	0e 94 3d 44 	call	0x887a	; 0x887a <__mulsi3>
    7596:	9b 01       	movw	r18, r22
    7598:	ac 01       	movw	r20, r24
    759a:	87 01       	movw	r16, r14
    759c:	ff 24       	eor	r15, r15
    759e:	ee 24       	eor	r14, r14
    75a0:	ad 8c       	ldd	r10, Y+29	; 0x1d
    75a2:	be 8c       	ldd	r11, Y+30	; 0x1e
    75a4:	cf 8c       	ldd	r12, Y+31	; 0x1f
    75a6:	d8 a0       	ldd	r13, Y+32	; 0x20
    75a8:	c6 01       	movw	r24, r12
    75aa:	aa 27       	eor	r26, r26
    75ac:	bb 27       	eor	r27, r27
    75ae:	57 01       	movw	r10, r14
    75b0:	68 01       	movw	r12, r16
    75b2:	a8 2a       	or	r10, r24
    75b4:	b9 2a       	or	r11, r25
    75b6:	ca 2a       	or	r12, r26
    75b8:	db 2a       	or	r13, r27
    75ba:	a2 16       	cp	r10, r18
    75bc:	b3 06       	cpc	r11, r19
    75be:	c4 06       	cpc	r12, r20
    75c0:	d5 06       	cpc	r13, r21
    75c2:	00 f5       	brcc	.+64     	; 0x7604 <__udivdi3+0xa2e>
    75c4:	08 94       	sec
    75c6:	21 08       	sbc	r2, r1
    75c8:	31 08       	sbc	r3, r1
    75ca:	41 08       	sbc	r4, r1
    75cc:	51 08       	sbc	r5, r1
    75ce:	ed a0       	ldd	r14, Y+37	; 0x25
    75d0:	fe a0       	ldd	r15, Y+38	; 0x26
    75d2:	0f a1       	ldd	r16, Y+39	; 0x27
    75d4:	18 a5       	ldd	r17, Y+40	; 0x28
    75d6:	ae 0c       	add	r10, r14
    75d8:	bf 1c       	adc	r11, r15
    75da:	c0 1e       	adc	r12, r16
    75dc:	d1 1e       	adc	r13, r17
    75de:	ae 14       	cp	r10, r14
    75e0:	bf 04       	cpc	r11, r15
    75e2:	c0 06       	cpc	r12, r16
    75e4:	d1 06       	cpc	r13, r17
    75e6:	70 f0       	brcs	.+28     	; 0x7604 <__udivdi3+0xa2e>
    75e8:	a2 16       	cp	r10, r18
    75ea:	b3 06       	cpc	r11, r19
    75ec:	c4 06       	cpc	r12, r20
    75ee:	d5 06       	cpc	r13, r21
    75f0:	48 f4       	brcc	.+18     	; 0x7604 <__udivdi3+0xa2e>
    75f2:	08 94       	sec
    75f4:	21 08       	sbc	r2, r1
    75f6:	31 08       	sbc	r3, r1
    75f8:	41 08       	sbc	r4, r1
    75fa:	51 08       	sbc	r5, r1
    75fc:	ae 0c       	add	r10, r14
    75fe:	bf 1c       	adc	r11, r15
    7600:	c0 1e       	adc	r12, r16
    7602:	d1 1e       	adc	r13, r17
    7604:	a2 1a       	sub	r10, r18
    7606:	b3 0a       	sbc	r11, r19
    7608:	c4 0a       	sbc	r12, r20
    760a:	d5 0a       	sbc	r13, r21
    760c:	c6 01       	movw	r24, r12
    760e:	b5 01       	movw	r22, r10
    7610:	a4 01       	movw	r20, r8
    7612:	93 01       	movw	r18, r6
    7614:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    7618:	7b 01       	movw	r14, r22
    761a:	8c 01       	movw	r16, r24
    761c:	c6 01       	movw	r24, r12
    761e:	b5 01       	movw	r22, r10
    7620:	a4 01       	movw	r20, r8
    7622:	93 01       	movw	r18, r6
    7624:	0e 94 5c 44 	call	0x88b8	; 0x88b8 <__udivmodsi4>
    7628:	c9 01       	movw	r24, r18
    762a:	da 01       	movw	r26, r20
    762c:	3c 01       	movw	r6, r24
    762e:	4d 01       	movw	r8, r26
    7630:	c4 01       	movw	r24, r8
    7632:	b3 01       	movw	r22, r6
    7634:	65 96       	adiw	r28, 0x15	; 21
    7636:	2c ad       	ldd	r18, Y+60	; 0x3c
    7638:	3d ad       	ldd	r19, Y+61	; 0x3d
    763a:	4e ad       	ldd	r20, Y+62	; 0x3e
    763c:	5f ad       	ldd	r21, Y+63	; 0x3f
    763e:	65 97       	sbiw	r28, 0x15	; 21
    7640:	0e 94 3d 44 	call	0x887a	; 0x887a <__mulsi3>
    7644:	9b 01       	movw	r18, r22
    7646:	ac 01       	movw	r20, r24
    7648:	87 01       	movw	r16, r14
    764a:	ff 24       	eor	r15, r15
    764c:	ee 24       	eor	r14, r14
    764e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7650:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7652:	af 8d       	ldd	r26, Y+31	; 0x1f
    7654:	b8 a1       	ldd	r27, Y+32	; 0x20
    7656:	a0 70       	andi	r26, 0x00	; 0
    7658:	b0 70       	andi	r27, 0x00	; 0
    765a:	57 01       	movw	r10, r14
    765c:	68 01       	movw	r12, r16
    765e:	a8 2a       	or	r10, r24
    7660:	b9 2a       	or	r11, r25
    7662:	ca 2a       	or	r12, r26
    7664:	db 2a       	or	r13, r27
    7666:	a2 16       	cp	r10, r18
    7668:	b3 06       	cpc	r11, r19
    766a:	c4 06       	cpc	r12, r20
    766c:	d5 06       	cpc	r13, r21
    766e:	00 f5       	brcc	.+64     	; 0x76b0 <__udivdi3+0xada>
    7670:	08 94       	sec
    7672:	61 08       	sbc	r6, r1
    7674:	71 08       	sbc	r7, r1
    7676:	81 08       	sbc	r8, r1
    7678:	91 08       	sbc	r9, r1
    767a:	6d a1       	ldd	r22, Y+37	; 0x25
    767c:	7e a1       	ldd	r23, Y+38	; 0x26
    767e:	8f a1       	ldd	r24, Y+39	; 0x27
    7680:	98 a5       	ldd	r25, Y+40	; 0x28
    7682:	a6 0e       	add	r10, r22
    7684:	b7 1e       	adc	r11, r23
    7686:	c8 1e       	adc	r12, r24
    7688:	d9 1e       	adc	r13, r25
    768a:	a6 16       	cp	r10, r22
    768c:	b7 06       	cpc	r11, r23
    768e:	c8 06       	cpc	r12, r24
    7690:	d9 06       	cpc	r13, r25
    7692:	70 f0       	brcs	.+28     	; 0x76b0 <__udivdi3+0xada>
    7694:	a2 16       	cp	r10, r18
    7696:	b3 06       	cpc	r11, r19
    7698:	c4 06       	cpc	r12, r20
    769a:	d5 06       	cpc	r13, r21
    769c:	48 f4       	brcc	.+18     	; 0x76b0 <__udivdi3+0xada>
    769e:	08 94       	sec
    76a0:	61 08       	sbc	r6, r1
    76a2:	71 08       	sbc	r7, r1
    76a4:	81 08       	sbc	r8, r1
    76a6:	91 08       	sbc	r9, r1
    76a8:	a6 0e       	add	r10, r22
    76aa:	b7 1e       	adc	r11, r23
    76ac:	c8 1e       	adc	r12, r24
    76ae:	d9 1e       	adc	r13, r25
    76b0:	d6 01       	movw	r26, r12
    76b2:	c5 01       	movw	r24, r10
    76b4:	82 1b       	sub	r24, r18
    76b6:	93 0b       	sbc	r25, r19
    76b8:	a4 0b       	sbc	r26, r20
    76ba:	b5 0b       	sbc	r27, r21
    76bc:	89 8f       	std	Y+25, r24	; 0x19
    76be:	9a 8f       	std	Y+26, r25	; 0x1a
    76c0:	ab 8f       	std	Y+27, r26	; 0x1b
    76c2:	bc 8f       	std	Y+28, r27	; 0x1c
    76c4:	d1 01       	movw	r26, r2
    76c6:	99 27       	eor	r25, r25
    76c8:	88 27       	eor	r24, r24
    76ca:	64 01       	movw	r12, r8
    76cc:	53 01       	movw	r10, r6
    76ce:	a8 2a       	or	r10, r24
    76d0:	b9 2a       	or	r11, r25
    76d2:	ca 2a       	or	r12, r26
    76d4:	db 2a       	or	r13, r27
    76d6:	a9 aa       	std	Y+49, r10	; 0x31
    76d8:	ba aa       	std	Y+50, r11	; 0x32
    76da:	cb aa       	std	Y+51, r12	; 0x33
    76dc:	dc aa       	std	Y+52, r13	; 0x34
    76de:	86 01       	movw	r16, r12
    76e0:	75 01       	movw	r14, r10
    76e2:	2f ef       	ldi	r18, 0xFF	; 255
    76e4:	3f ef       	ldi	r19, 0xFF	; 255
    76e6:	40 e0       	ldi	r20, 0x00	; 0
    76e8:	50 e0       	ldi	r21, 0x00	; 0
    76ea:	e2 22       	and	r14, r18
    76ec:	f3 22       	and	r15, r19
    76ee:	04 23       	and	r16, r20
    76f0:	15 23       	and	r17, r21
    76f2:	a6 01       	movw	r20, r12
    76f4:	66 27       	eor	r22, r22
    76f6:	77 27       	eor	r23, r23
    76f8:	6d 96       	adiw	r28, 0x1d	; 29
    76fa:	4c af       	std	Y+60, r20	; 0x3c
    76fc:	5d af       	std	Y+61, r21	; 0x3d
    76fe:	6e af       	std	Y+62, r22	; 0x3e
    7700:	7f af       	std	Y+63, r23	; 0x3f
    7702:	6d 97       	sbiw	r28, 0x1d	; 29
    7704:	a9 a0       	ldd	r10, Y+33	; 0x21
    7706:	ba a0       	ldd	r11, Y+34	; 0x22
    7708:	cb a0       	ldd	r12, Y+35	; 0x23
    770a:	dc a0       	ldd	r13, Y+36	; 0x24
    770c:	6f ef       	ldi	r22, 0xFF	; 255
    770e:	7f ef       	ldi	r23, 0xFF	; 255
    7710:	80 e0       	ldi	r24, 0x00	; 0
    7712:	90 e0       	ldi	r25, 0x00	; 0
    7714:	a6 22       	and	r10, r22
    7716:	b7 22       	and	r11, r23
    7718:	c8 22       	and	r12, r24
    771a:	d9 22       	and	r13, r25
    771c:	89 a1       	ldd	r24, Y+33	; 0x21
    771e:	9a a1       	ldd	r25, Y+34	; 0x22
    7720:	ab a1       	ldd	r26, Y+35	; 0x23
    7722:	bc a1       	ldd	r27, Y+36	; 0x24
    7724:	1d 01       	movw	r2, r26
    7726:	44 24       	eor	r4, r4
    7728:	55 24       	eor	r5, r5
    772a:	c8 01       	movw	r24, r16
    772c:	b7 01       	movw	r22, r14
    772e:	a6 01       	movw	r20, r12
    7730:	95 01       	movw	r18, r10
    7732:	0e 94 3d 44 	call	0x887a	; 0x887a <__mulsi3>
    7736:	69 96       	adiw	r28, 0x19	; 25
    7738:	6c af       	std	Y+60, r22	; 0x3c
    773a:	7d af       	std	Y+61, r23	; 0x3d
    773c:	8e af       	std	Y+62, r24	; 0x3e
    773e:	9f af       	std	Y+63, r25	; 0x3f
    7740:	69 97       	sbiw	r28, 0x19	; 25
    7742:	c8 01       	movw	r24, r16
    7744:	b7 01       	movw	r22, r14
    7746:	a2 01       	movw	r20, r4
    7748:	91 01       	movw	r18, r2
    774a:	0e 94 3d 44 	call	0x887a	; 0x887a <__mulsi3>
    774e:	3b 01       	movw	r6, r22
    7750:	4c 01       	movw	r8, r24
    7752:	6d 96       	adiw	r28, 0x1d	; 29
    7754:	6c ad       	ldd	r22, Y+60	; 0x3c
    7756:	7d ad       	ldd	r23, Y+61	; 0x3d
    7758:	8e ad       	ldd	r24, Y+62	; 0x3e
    775a:	9f ad       	ldd	r25, Y+63	; 0x3f
    775c:	6d 97       	sbiw	r28, 0x1d	; 29
    775e:	a6 01       	movw	r20, r12
    7760:	95 01       	movw	r18, r10
    7762:	0e 94 3d 44 	call	0x887a	; 0x887a <__mulsi3>
    7766:	7b 01       	movw	r14, r22
    7768:	8c 01       	movw	r16, r24
    776a:	6d 96       	adiw	r28, 0x1d	; 29
    776c:	6c ad       	ldd	r22, Y+60	; 0x3c
    776e:	7d ad       	ldd	r23, Y+61	; 0x3d
    7770:	8e ad       	ldd	r24, Y+62	; 0x3e
    7772:	9f ad       	ldd	r25, Y+63	; 0x3f
    7774:	6d 97       	sbiw	r28, 0x1d	; 29
    7776:	a2 01       	movw	r20, r4
    7778:	91 01       	movw	r18, r2
    777a:	0e 94 3d 44 	call	0x887a	; 0x887a <__mulsi3>
    777e:	5b 01       	movw	r10, r22
    7780:	6c 01       	movw	r12, r24
    7782:	a8 01       	movw	r20, r16
    7784:	97 01       	movw	r18, r14
    7786:	26 0d       	add	r18, r6
    7788:	37 1d       	adc	r19, r7
    778a:	48 1d       	adc	r20, r8
    778c:	59 1d       	adc	r21, r9
    778e:	69 96       	adiw	r28, 0x19	; 25
    7790:	6c ac       	ldd	r6, Y+60	; 0x3c
    7792:	7d ac       	ldd	r7, Y+61	; 0x3d
    7794:	8e ac       	ldd	r8, Y+62	; 0x3e
    7796:	9f ac       	ldd	r9, Y+63	; 0x3f
    7798:	69 97       	sbiw	r28, 0x19	; 25
    779a:	c4 01       	movw	r24, r8
    779c:	aa 27       	eor	r26, r26
    779e:	bb 27       	eor	r27, r27
    77a0:	28 0f       	add	r18, r24
    77a2:	39 1f       	adc	r19, r25
    77a4:	4a 1f       	adc	r20, r26
    77a6:	5b 1f       	adc	r21, r27
    77a8:	2e 15       	cp	r18, r14
    77aa:	3f 05       	cpc	r19, r15
    77ac:	40 07       	cpc	r20, r16
    77ae:	51 07       	cpc	r21, r17
    77b0:	48 f4       	brcc	.+18     	; 0x77c4 <__udivdi3+0xbee>
    77b2:	e1 2c       	mov	r14, r1
    77b4:	f1 2c       	mov	r15, r1
    77b6:	61 e0       	ldi	r22, 0x01	; 1
    77b8:	06 2f       	mov	r16, r22
    77ba:	11 2d       	mov	r17, r1
    77bc:	ae 0c       	add	r10, r14
    77be:	bf 1c       	adc	r11, r15
    77c0:	c0 1e       	adc	r12, r16
    77c2:	d1 1e       	adc	r13, r17
    77c4:	ca 01       	movw	r24, r20
    77c6:	aa 27       	eor	r26, r26
    77c8:	bb 27       	eor	r27, r27
    77ca:	bc 01       	movw	r22, r24
    77cc:	cd 01       	movw	r24, r26
    77ce:	6a 0d       	add	r22, r10
    77d0:	7b 1d       	adc	r23, r11
    77d2:	8c 1d       	adc	r24, r12
    77d4:	9d 1d       	adc	r25, r13
    77d6:	69 8c       	ldd	r6, Y+25	; 0x19
    77d8:	7a 8c       	ldd	r7, Y+26	; 0x1a
    77da:	8b 8c       	ldd	r8, Y+27	; 0x1b
    77dc:	9c 8c       	ldd	r9, Y+28	; 0x1c
    77de:	66 16       	cp	r6, r22
    77e0:	77 06       	cpc	r7, r23
    77e2:	88 06       	cpc	r8, r24
    77e4:	99 06       	cpc	r9, r25
    77e6:	40 f1       	brcs	.+80     	; 0x7838 <__udivdi3+0xc62>
    77e8:	66 15       	cp	r22, r6
    77ea:	77 05       	cpc	r23, r7
    77ec:	88 05       	cpc	r24, r8
    77ee:	99 05       	cpc	r25, r9
    77f0:	09 f0       	breq	.+2      	; 0x77f4 <__udivdi3+0xc1e>
    77f2:	43 c0       	rjmp	.+134    	; 0x787a <__udivdi3+0xca4>
    77f4:	d9 01       	movw	r26, r18
    77f6:	99 27       	eor	r25, r25
    77f8:	88 27       	eor	r24, r24
    77fa:	69 96       	adiw	r28, 0x19	; 25
    77fc:	2c ad       	ldd	r18, Y+60	; 0x3c
    77fe:	3d ad       	ldd	r19, Y+61	; 0x3d
    7800:	4e ad       	ldd	r20, Y+62	; 0x3e
    7802:	5f ad       	ldd	r21, Y+63	; 0x3f
    7804:	69 97       	sbiw	r28, 0x19	; 25
    7806:	40 70       	andi	r20, 0x00	; 0
    7808:	50 70       	andi	r21, 0x00	; 0
    780a:	82 0f       	add	r24, r18
    780c:	93 1f       	adc	r25, r19
    780e:	a4 1f       	adc	r26, r20
    7810:	b5 1f       	adc	r27, r21
    7812:	2d a5       	ldd	r18, Y+45	; 0x2d
    7814:	3e a5       	ldd	r19, Y+46	; 0x2e
    7816:	4f a5       	ldd	r20, Y+47	; 0x2f
    7818:	58 a9       	ldd	r21, Y+48	; 0x30
    781a:	6e 96       	adiw	r28, 0x1e	; 30
    781c:	0f ac       	ldd	r0, Y+63	; 0x3f
    781e:	6e 97       	sbiw	r28, 0x1e	; 30
    7820:	04 c0       	rjmp	.+8      	; 0x782a <__udivdi3+0xc54>
    7822:	22 0f       	add	r18, r18
    7824:	33 1f       	adc	r19, r19
    7826:	44 1f       	adc	r20, r20
    7828:	55 1f       	adc	r21, r21
    782a:	0a 94       	dec	r0
    782c:	d2 f7       	brpl	.-12     	; 0x7822 <__udivdi3+0xc4c>
    782e:	28 17       	cp	r18, r24
    7830:	39 07       	cpc	r19, r25
    7832:	4a 07       	cpc	r20, r26
    7834:	5b 07       	cpc	r21, r27
    7836:	08 f5       	brcc	.+66     	; 0x787a <__udivdi3+0xca4>
    7838:	09 a9       	ldd	r16, Y+49	; 0x31
    783a:	1a a9       	ldd	r17, Y+50	; 0x32
    783c:	2b a9       	ldd	r18, Y+51	; 0x33
    783e:	3c a9       	ldd	r19, Y+52	; 0x34
    7840:	01 50       	subi	r16, 0x01	; 1
    7842:	10 40       	sbci	r17, 0x00	; 0
    7844:	20 40       	sbci	r18, 0x00	; 0
    7846:	30 40       	sbci	r19, 0x00	; 0
    7848:	09 ab       	std	Y+49, r16	; 0x31
    784a:	1a ab       	std	Y+50, r17	; 0x32
    784c:	2b ab       	std	Y+51, r18	; 0x33
    784e:	3c ab       	std	Y+52, r19	; 0x34
    7850:	14 c0       	rjmp	.+40     	; 0x787a <__udivdi3+0xca4>
    7852:	66 24       	eor	r6, r6
    7854:	77 24       	eor	r7, r7
    7856:	43 01       	movw	r8, r6
    7858:	21 e0       	ldi	r18, 0x01	; 1
    785a:	30 e0       	ldi	r19, 0x00	; 0
    785c:	40 e0       	ldi	r20, 0x00	; 0
    785e:	50 e0       	ldi	r21, 0x00	; 0
    7860:	29 ab       	std	Y+49, r18	; 0x31
    7862:	3a ab       	std	Y+50, r19	; 0x32
    7864:	4b ab       	std	Y+51, r20	; 0x33
    7866:	5c ab       	std	Y+52, r21	; 0x34
    7868:	0b c0       	rjmp	.+22     	; 0x7880 <__udivdi3+0xcaa>
    786a:	66 24       	eor	r6, r6
    786c:	77 24       	eor	r7, r7
    786e:	43 01       	movw	r8, r6
    7870:	19 aa       	std	Y+49, r1	; 0x31
    7872:	1a aa       	std	Y+50, r1	; 0x32
    7874:	1b aa       	std	Y+51, r1	; 0x33
    7876:	1c aa       	std	Y+52, r1	; 0x34
    7878:	03 c0       	rjmp	.+6      	; 0x7880 <__udivdi3+0xcaa>
    787a:	66 24       	eor	r6, r6
    787c:	77 24       	eor	r7, r7
    787e:	43 01       	movw	r8, r6
    7880:	fe 01       	movw	r30, r28
    7882:	71 96       	adiw	r30, 0x11	; 17
    7884:	88 e0       	ldi	r24, 0x08	; 8
    7886:	df 01       	movw	r26, r30
    7888:	1d 92       	st	X+, r1
    788a:	8a 95       	dec	r24
    788c:	e9 f7       	brne	.-6      	; 0x7888 <__udivdi3+0xcb2>
    788e:	a9 a8       	ldd	r10, Y+49	; 0x31
    7890:	ba a8       	ldd	r11, Y+50	; 0x32
    7892:	cb a8       	ldd	r12, Y+51	; 0x33
    7894:	dc a8       	ldd	r13, Y+52	; 0x34
    7896:	a9 8a       	std	Y+17, r10	; 0x11
    7898:	ba 8a       	std	Y+18, r11	; 0x12
    789a:	cb 8a       	std	Y+19, r12	; 0x13
    789c:	dc 8a       	std	Y+20, r13	; 0x14
    789e:	6d 8a       	std	Y+21, r6	; 0x15
    78a0:	7e 8a       	std	Y+22, r7	; 0x16
    78a2:	8f 8a       	std	Y+23, r8	; 0x17
    78a4:	98 8e       	std	Y+24, r9	; 0x18
    78a6:	29 a9       	ldd	r18, Y+49	; 0x31
    78a8:	3a 89       	ldd	r19, Y+18	; 0x12
    78aa:	4b 89       	ldd	r20, Y+19	; 0x13
    78ac:	5c 89       	ldd	r21, Y+20	; 0x14
    78ae:	66 2d       	mov	r22, r6
    78b0:	7e 89       	ldd	r23, Y+22	; 0x16
    78b2:	8f 89       	ldd	r24, Y+23	; 0x17
    78b4:	98 8d       	ldd	r25, Y+24	; 0x18
    78b6:	c2 5a       	subi	r28, 0xA2	; 162
    78b8:	df 4f       	sbci	r29, 0xFF	; 255
    78ba:	e2 e1       	ldi	r30, 0x12	; 18
    78bc:	0c 94 9a 44 	jmp	0x8934	; 0x8934 <__epilogue_restores__>

000078c0 <vfprintf>:
    78c0:	2f 92       	push	r2
    78c2:	3f 92       	push	r3
    78c4:	4f 92       	push	r4
    78c6:	5f 92       	push	r5
    78c8:	6f 92       	push	r6
    78ca:	7f 92       	push	r7
    78cc:	8f 92       	push	r8
    78ce:	9f 92       	push	r9
    78d0:	af 92       	push	r10
    78d2:	bf 92       	push	r11
    78d4:	cf 92       	push	r12
    78d6:	df 92       	push	r13
    78d8:	ef 92       	push	r14
    78da:	ff 92       	push	r15
    78dc:	0f 93       	push	r16
    78de:	1f 93       	push	r17
    78e0:	df 93       	push	r29
    78e2:	cf 93       	push	r28
    78e4:	cd b7       	in	r28, 0x3d	; 61
    78e6:	de b7       	in	r29, 0x3e	; 62
    78e8:	61 97       	sbiw	r28, 0x11	; 17
    78ea:	cd bf       	out	0x3d, r28	; 61
    78ec:	de bf       	out	0x3e, r29	; 62
    78ee:	3c 01       	movw	r6, r24
    78f0:	6e 87       	std	Y+14, r22	; 0x0e
    78f2:	7f 87       	std	Y+15, r23	; 0x0f
    78f4:	6a 01       	movw	r12, r20
    78f6:	fc 01       	movw	r30, r24
    78f8:	16 82       	std	Z+6, r1	; 0x06
    78fa:	17 82       	std	Z+7, r1	; 0x07
    78fc:	83 81       	ldd	r24, Z+3	; 0x03
    78fe:	81 fd       	sbrc	r24, 1
    7900:	03 c0       	rjmp	.+6      	; 0x7908 <vfprintf+0x48>
    7902:	6f ef       	ldi	r22, 0xFF	; 255
    7904:	7f ef       	ldi	r23, 0xFF	; 255
    7906:	6f c3       	rjmp	.+1758   	; 0x7fe6 <vfprintf+0x726>
    7908:	9e 01       	movw	r18, r28
    790a:	2f 5f       	subi	r18, 0xFF	; 255
    790c:	3f 4f       	sbci	r19, 0xFF	; 255
    790e:	28 8b       	std	Y+16, r18	; 0x10
    7910:	39 8b       	std	Y+17, r19	; 0x11
    7912:	f3 01       	movw	r30, r6
    7914:	23 81       	ldd	r18, Z+3	; 0x03
    7916:	ee 85       	ldd	r30, Y+14	; 0x0e
    7918:	ff 85       	ldd	r31, Y+15	; 0x0f
    791a:	23 fd       	sbrc	r18, 3
    791c:	85 91       	lpm	r24, Z+
    791e:	23 ff       	sbrs	r18, 3
    7920:	81 91       	ld	r24, Z+
    7922:	ee 87       	std	Y+14, r30	; 0x0e
    7924:	ff 87       	std	Y+15, r31	; 0x0f
    7926:	88 23       	and	r24, r24
    7928:	09 f4       	brne	.+2      	; 0x792c <vfprintf+0x6c>
    792a:	5a c3       	rjmp	.+1716   	; 0x7fe0 <vfprintf+0x720>
    792c:	85 32       	cpi	r24, 0x25	; 37
    792e:	51 f4       	brne	.+20     	; 0x7944 <vfprintf+0x84>
    7930:	ee 85       	ldd	r30, Y+14	; 0x0e
    7932:	ff 85       	ldd	r31, Y+15	; 0x0f
    7934:	23 fd       	sbrc	r18, 3
    7936:	85 91       	lpm	r24, Z+
    7938:	23 ff       	sbrs	r18, 3
    793a:	81 91       	ld	r24, Z+
    793c:	ee 87       	std	Y+14, r30	; 0x0e
    793e:	ff 87       	std	Y+15, r31	; 0x0f
    7940:	85 32       	cpi	r24, 0x25	; 37
    7942:	29 f4       	brne	.+10     	; 0x794e <vfprintf+0x8e>
    7944:	90 e0       	ldi	r25, 0x00	; 0
    7946:	b3 01       	movw	r22, r6
    7948:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    794c:	e2 cf       	rjmp	.-60     	; 0x7912 <vfprintf+0x52>
    794e:	98 2f       	mov	r25, r24
    7950:	10 e0       	ldi	r17, 0x00	; 0
    7952:	88 24       	eor	r8, r8
    7954:	99 24       	eor	r9, r9
    7956:	10 32       	cpi	r17, 0x20	; 32
    7958:	b0 f4       	brcc	.+44     	; 0x7986 <vfprintf+0xc6>
    795a:	9b 32       	cpi	r25, 0x2B	; 43
    795c:	69 f0       	breq	.+26     	; 0x7978 <vfprintf+0xb8>
    795e:	9c 32       	cpi	r25, 0x2C	; 44
    7960:	28 f4       	brcc	.+10     	; 0x796c <vfprintf+0xac>
    7962:	90 32       	cpi	r25, 0x20	; 32
    7964:	51 f0       	breq	.+20     	; 0x797a <vfprintf+0xba>
    7966:	93 32       	cpi	r25, 0x23	; 35
    7968:	71 f4       	brne	.+28     	; 0x7986 <vfprintf+0xc6>
    796a:	0b c0       	rjmp	.+22     	; 0x7982 <vfprintf+0xc2>
    796c:	9d 32       	cpi	r25, 0x2D	; 45
    796e:	39 f0       	breq	.+14     	; 0x797e <vfprintf+0xbe>
    7970:	90 33       	cpi	r25, 0x30	; 48
    7972:	49 f4       	brne	.+18     	; 0x7986 <vfprintf+0xc6>
    7974:	11 60       	ori	r17, 0x01	; 1
    7976:	28 c0       	rjmp	.+80     	; 0x79c8 <vfprintf+0x108>
    7978:	12 60       	ori	r17, 0x02	; 2
    797a:	14 60       	ori	r17, 0x04	; 4
    797c:	25 c0       	rjmp	.+74     	; 0x79c8 <vfprintf+0x108>
    797e:	18 60       	ori	r17, 0x08	; 8
    7980:	23 c0       	rjmp	.+70     	; 0x79c8 <vfprintf+0x108>
    7982:	10 61       	ori	r17, 0x10	; 16
    7984:	21 c0       	rjmp	.+66     	; 0x79c8 <vfprintf+0x108>
    7986:	17 fd       	sbrc	r17, 7
    7988:	2a c0       	rjmp	.+84     	; 0x79de <vfprintf+0x11e>
    798a:	89 2f       	mov	r24, r25
    798c:	80 53       	subi	r24, 0x30	; 48
    798e:	8a 30       	cpi	r24, 0x0A	; 10
    7990:	78 f4       	brcc	.+30     	; 0x79b0 <vfprintf+0xf0>
    7992:	16 ff       	sbrs	r17, 6
    7994:	06 c0       	rjmp	.+12     	; 0x79a2 <vfprintf+0xe2>
    7996:	fa e0       	ldi	r31, 0x0A	; 10
    7998:	9f 9e       	mul	r9, r31
    799a:	90 2c       	mov	r9, r0
    799c:	11 24       	eor	r1, r1
    799e:	98 0e       	add	r9, r24
    79a0:	13 c0       	rjmp	.+38     	; 0x79c8 <vfprintf+0x108>
    79a2:	3a e0       	ldi	r19, 0x0A	; 10
    79a4:	83 9e       	mul	r8, r19
    79a6:	80 2c       	mov	r8, r0
    79a8:	11 24       	eor	r1, r1
    79aa:	88 0e       	add	r8, r24
    79ac:	10 62       	ori	r17, 0x20	; 32
    79ae:	0c c0       	rjmp	.+24     	; 0x79c8 <vfprintf+0x108>
    79b0:	9e 32       	cpi	r25, 0x2E	; 46
    79b2:	21 f4       	brne	.+8      	; 0x79bc <vfprintf+0xfc>
    79b4:	16 fd       	sbrc	r17, 6
    79b6:	14 c3       	rjmp	.+1576   	; 0x7fe0 <vfprintf+0x720>
    79b8:	10 64       	ori	r17, 0x40	; 64
    79ba:	06 c0       	rjmp	.+12     	; 0x79c8 <vfprintf+0x108>
    79bc:	9c 36       	cpi	r25, 0x6C	; 108
    79be:	11 f4       	brne	.+4      	; 0x79c4 <vfprintf+0x104>
    79c0:	10 68       	ori	r17, 0x80	; 128
    79c2:	02 c0       	rjmp	.+4      	; 0x79c8 <vfprintf+0x108>
    79c4:	98 36       	cpi	r25, 0x68	; 104
    79c6:	59 f4       	brne	.+22     	; 0x79de <vfprintf+0x11e>
    79c8:	ee 85       	ldd	r30, Y+14	; 0x0e
    79ca:	ff 85       	ldd	r31, Y+15	; 0x0f
    79cc:	23 fd       	sbrc	r18, 3
    79ce:	95 91       	lpm	r25, Z+
    79d0:	23 ff       	sbrs	r18, 3
    79d2:	91 91       	ld	r25, Z+
    79d4:	ee 87       	std	Y+14, r30	; 0x0e
    79d6:	ff 87       	std	Y+15, r31	; 0x0f
    79d8:	99 23       	and	r25, r25
    79da:	09 f0       	breq	.+2      	; 0x79de <vfprintf+0x11e>
    79dc:	bc cf       	rjmp	.-136    	; 0x7956 <vfprintf+0x96>
    79de:	89 2f       	mov	r24, r25
    79e0:	85 54       	subi	r24, 0x45	; 69
    79e2:	83 30       	cpi	r24, 0x03	; 3
    79e4:	20 f4       	brcc	.+8      	; 0x79ee <vfprintf+0x12e>
    79e6:	81 2f       	mov	r24, r17
    79e8:	80 61       	ori	r24, 0x10	; 16
    79ea:	90 5e       	subi	r25, 0xE0	; 224
    79ec:	07 c0       	rjmp	.+14     	; 0x79fc <vfprintf+0x13c>
    79ee:	89 2f       	mov	r24, r25
    79f0:	85 56       	subi	r24, 0x65	; 101
    79f2:	83 30       	cpi	r24, 0x03	; 3
    79f4:	08 f0       	brcs	.+2      	; 0x79f8 <vfprintf+0x138>
    79f6:	9f c1       	rjmp	.+830    	; 0x7d36 <vfprintf+0x476>
    79f8:	81 2f       	mov	r24, r17
    79fa:	8f 7e       	andi	r24, 0xEF	; 239
    79fc:	86 fd       	sbrc	r24, 6
    79fe:	02 c0       	rjmp	.+4      	; 0x7a04 <vfprintf+0x144>
    7a00:	76 e0       	ldi	r23, 0x06	; 6
    7a02:	97 2e       	mov	r9, r23
    7a04:	6f e3       	ldi	r22, 0x3F	; 63
    7a06:	f6 2e       	mov	r15, r22
    7a08:	f8 22       	and	r15, r24
    7a0a:	95 36       	cpi	r25, 0x65	; 101
    7a0c:	19 f4       	brne	.+6      	; 0x7a14 <vfprintf+0x154>
    7a0e:	f0 e4       	ldi	r31, 0x40	; 64
    7a10:	ff 2a       	or	r15, r31
    7a12:	07 c0       	rjmp	.+14     	; 0x7a22 <vfprintf+0x162>
    7a14:	96 36       	cpi	r25, 0x66	; 102
    7a16:	19 f4       	brne	.+6      	; 0x7a1e <vfprintf+0x15e>
    7a18:	20 e8       	ldi	r18, 0x80	; 128
    7a1a:	f2 2a       	or	r15, r18
    7a1c:	02 c0       	rjmp	.+4      	; 0x7a22 <vfprintf+0x162>
    7a1e:	91 10       	cpse	r9, r1
    7a20:	9a 94       	dec	r9
    7a22:	f7 fe       	sbrs	r15, 7
    7a24:	0a c0       	rjmp	.+20     	; 0x7a3a <vfprintf+0x17a>
    7a26:	3b e3       	ldi	r19, 0x3B	; 59
    7a28:	39 15       	cp	r19, r9
    7a2a:	18 f4       	brcc	.+6      	; 0x7a32 <vfprintf+0x172>
    7a2c:	5c e3       	ldi	r21, 0x3C	; 60
    7a2e:	b5 2e       	mov	r11, r21
    7a30:	02 c0       	rjmp	.+4      	; 0x7a36 <vfprintf+0x176>
    7a32:	b9 2c       	mov	r11, r9
    7a34:	b3 94       	inc	r11
    7a36:	27 e0       	ldi	r18, 0x07	; 7
    7a38:	09 c0       	rjmp	.+18     	; 0x7a4c <vfprintf+0x18c>
    7a3a:	47 e0       	ldi	r20, 0x07	; 7
    7a3c:	49 15       	cp	r20, r9
    7a3e:	20 f4       	brcc	.+8      	; 0x7a48 <vfprintf+0x188>
    7a40:	bb 24       	eor	r11, r11
    7a42:	47 e0       	ldi	r20, 0x07	; 7
    7a44:	94 2e       	mov	r9, r20
    7a46:	f7 cf       	rjmp	.-18     	; 0x7a36 <vfprintf+0x176>
    7a48:	29 2d       	mov	r18, r9
    7a4a:	bb 24       	eor	r11, r11
    7a4c:	c6 01       	movw	r24, r12
    7a4e:	04 96       	adiw	r24, 0x04	; 4
    7a50:	8c 87       	std	Y+12, r24	; 0x0c
    7a52:	9d 87       	std	Y+13, r25	; 0x0d
    7a54:	f6 01       	movw	r30, r12
    7a56:	60 81       	ld	r22, Z
    7a58:	71 81       	ldd	r23, Z+1	; 0x01
    7a5a:	82 81       	ldd	r24, Z+2	; 0x02
    7a5c:	93 81       	ldd	r25, Z+3	; 0x03
    7a5e:	ae 01       	movw	r20, r28
    7a60:	4f 5f       	subi	r20, 0xFF	; 255
    7a62:	5f 4f       	sbci	r21, 0xFF	; 255
    7a64:	0b 2d       	mov	r16, r11
    7a66:	0e 94 41 46 	call	0x8c82	; 0x8c82 <__ftoa_engine>
    7a6a:	6c 01       	movw	r12, r24
    7a6c:	09 81       	ldd	r16, Y+1	; 0x01
    7a6e:	20 2e       	mov	r2, r16
    7a70:	33 24       	eor	r3, r3
    7a72:	00 ff       	sbrs	r16, 0
    7a74:	04 c0       	rjmp	.+8      	; 0x7a7e <vfprintf+0x1be>
    7a76:	03 fd       	sbrc	r16, 3
    7a78:	02 c0       	rjmp	.+4      	; 0x7a7e <vfprintf+0x1be>
    7a7a:	1d e2       	ldi	r17, 0x2D	; 45
    7a7c:	09 c0       	rjmp	.+18     	; 0x7a90 <vfprintf+0x1d0>
    7a7e:	f1 fe       	sbrs	r15, 1
    7a80:	02 c0       	rjmp	.+4      	; 0x7a86 <vfprintf+0x1c6>
    7a82:	1b e2       	ldi	r17, 0x2B	; 43
    7a84:	05 c0       	rjmp	.+10     	; 0x7a90 <vfprintf+0x1d0>
    7a86:	f2 fc       	sbrc	r15, 2
    7a88:	02 c0       	rjmp	.+4      	; 0x7a8e <vfprintf+0x1ce>
    7a8a:	10 e0       	ldi	r17, 0x00	; 0
    7a8c:	01 c0       	rjmp	.+2      	; 0x7a90 <vfprintf+0x1d0>
    7a8e:	10 e2       	ldi	r17, 0x20	; 32
    7a90:	c1 01       	movw	r24, r2
    7a92:	8c 70       	andi	r24, 0x0C	; 12
    7a94:	90 70       	andi	r25, 0x00	; 0
    7a96:	89 2b       	or	r24, r25
    7a98:	b9 f1       	breq	.+110    	; 0x7b08 <vfprintf+0x248>
    7a9a:	11 23       	and	r17, r17
    7a9c:	11 f4       	brne	.+4      	; 0x7aa2 <vfprintf+0x1e2>
    7a9e:	83 e0       	ldi	r24, 0x03	; 3
    7aa0:	01 c0       	rjmp	.+2      	; 0x7aa4 <vfprintf+0x1e4>
    7aa2:	84 e0       	ldi	r24, 0x04	; 4
    7aa4:	88 15       	cp	r24, r8
    7aa6:	10 f0       	brcs	.+4      	; 0x7aac <vfprintf+0x1ec>
    7aa8:	88 24       	eor	r8, r8
    7aaa:	0a c0       	rjmp	.+20     	; 0x7ac0 <vfprintf+0x200>
    7aac:	88 1a       	sub	r8, r24
    7aae:	f3 fc       	sbrc	r15, 3
    7ab0:	07 c0       	rjmp	.+14     	; 0x7ac0 <vfprintf+0x200>
    7ab2:	80 e2       	ldi	r24, 0x20	; 32
    7ab4:	90 e0       	ldi	r25, 0x00	; 0
    7ab6:	b3 01       	movw	r22, r6
    7ab8:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7abc:	8a 94       	dec	r8
    7abe:	c9 f7       	brne	.-14     	; 0x7ab2 <vfprintf+0x1f2>
    7ac0:	11 23       	and	r17, r17
    7ac2:	29 f0       	breq	.+10     	; 0x7ace <vfprintf+0x20e>
    7ac4:	81 2f       	mov	r24, r17
    7ac6:	90 e0       	ldi	r25, 0x00	; 0
    7ac8:	b3 01       	movw	r22, r6
    7aca:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7ace:	23 fe       	sbrs	r2, 3
    7ad0:	03 c0       	rjmp	.+6      	; 0x7ad8 <vfprintf+0x218>
    7ad2:	03 e3       	ldi	r16, 0x33	; 51
    7ad4:	12 e0       	ldi	r17, 0x02	; 2
    7ad6:	0e c0       	rjmp	.+28     	; 0x7af4 <vfprintf+0x234>
    7ad8:	07 e3       	ldi	r16, 0x37	; 55
    7ada:	12 e0       	ldi	r17, 0x02	; 2
    7adc:	0b c0       	rjmp	.+22     	; 0x7af4 <vfprintf+0x234>
    7ade:	e1 14       	cp	r14, r1
    7ae0:	f1 04       	cpc	r15, r1
    7ae2:	09 f0       	breq	.+2      	; 0x7ae6 <vfprintf+0x226>
    7ae4:	80 52       	subi	r24, 0x20	; 32
    7ae6:	90 e0       	ldi	r25, 0x00	; 0
    7ae8:	b3 01       	movw	r22, r6
    7aea:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7aee:	0f 5f       	subi	r16, 0xFF	; 255
    7af0:	1f 4f       	sbci	r17, 0xFF	; 255
    7af2:	05 c0       	rjmp	.+10     	; 0x7afe <vfprintf+0x23e>
    7af4:	ef 2c       	mov	r14, r15
    7af6:	ff 24       	eor	r15, r15
    7af8:	f0 e1       	ldi	r31, 0x10	; 16
    7afa:	ef 22       	and	r14, r31
    7afc:	ff 24       	eor	r15, r15
    7afe:	f8 01       	movw	r30, r16
    7b00:	84 91       	lpm	r24, Z+
    7b02:	88 23       	and	r24, r24
    7b04:	61 f7       	brne	.-40     	; 0x7ade <vfprintf+0x21e>
    7b06:	14 c1       	rjmp	.+552    	; 0x7d30 <vfprintf+0x470>
    7b08:	f7 fe       	sbrs	r15, 7
    7b0a:	12 c0       	rjmp	.+36     	; 0x7b30 <vfprintf+0x270>
    7b0c:	bc 0c       	add	r11, r12
    7b0e:	24 fe       	sbrs	r2, 4
    7b10:	04 c0       	rjmp	.+8      	; 0x7b1a <vfprintf+0x25a>
    7b12:	8a 81       	ldd	r24, Y+2	; 0x02
    7b14:	81 33       	cpi	r24, 0x31	; 49
    7b16:	09 f4       	brne	.+2      	; 0x7b1a <vfprintf+0x25a>
    7b18:	ba 94       	dec	r11
    7b1a:	1b 14       	cp	r1, r11
    7b1c:	1c f0       	brlt	.+6      	; 0x7b24 <vfprintf+0x264>
    7b1e:	bb 24       	eor	r11, r11
    7b20:	b3 94       	inc	r11
    7b22:	2d c0       	rjmp	.+90     	; 0x7b7e <vfprintf+0x2be>
    7b24:	f8 e0       	ldi	r31, 0x08	; 8
    7b26:	fb 15       	cp	r31, r11
    7b28:	50 f5       	brcc	.+84     	; 0x7b7e <vfprintf+0x2be>
    7b2a:	38 e0       	ldi	r19, 0x08	; 8
    7b2c:	b3 2e       	mov	r11, r19
    7b2e:	27 c0       	rjmp	.+78     	; 0x7b7e <vfprintf+0x2be>
    7b30:	f6 fc       	sbrc	r15, 6
    7b32:	25 c0       	rjmp	.+74     	; 0x7b7e <vfprintf+0x2be>
    7b34:	89 2d       	mov	r24, r9
    7b36:	90 e0       	ldi	r25, 0x00	; 0
    7b38:	8c 15       	cp	r24, r12
    7b3a:	9d 05       	cpc	r25, r13
    7b3c:	4c f0       	brlt	.+18     	; 0x7b50 <vfprintf+0x290>
    7b3e:	2c ef       	ldi	r18, 0xFC	; 252
    7b40:	c2 16       	cp	r12, r18
    7b42:	2f ef       	ldi	r18, 0xFF	; 255
    7b44:	d2 06       	cpc	r13, r18
    7b46:	24 f0       	brlt	.+8      	; 0x7b50 <vfprintf+0x290>
    7b48:	30 e8       	ldi	r19, 0x80	; 128
    7b4a:	f3 2a       	or	r15, r19
    7b4c:	01 c0       	rjmp	.+2      	; 0x7b50 <vfprintf+0x290>
    7b4e:	9a 94       	dec	r9
    7b50:	99 20       	and	r9, r9
    7b52:	49 f0       	breq	.+18     	; 0x7b66 <vfprintf+0x2a6>
    7b54:	e2 e0       	ldi	r30, 0x02	; 2
    7b56:	f0 e0       	ldi	r31, 0x00	; 0
    7b58:	ec 0f       	add	r30, r28
    7b5a:	fd 1f       	adc	r31, r29
    7b5c:	e9 0d       	add	r30, r9
    7b5e:	f1 1d       	adc	r31, r1
    7b60:	80 81       	ld	r24, Z
    7b62:	80 33       	cpi	r24, 0x30	; 48
    7b64:	a1 f3       	breq	.-24     	; 0x7b4e <vfprintf+0x28e>
    7b66:	f7 fe       	sbrs	r15, 7
    7b68:	0a c0       	rjmp	.+20     	; 0x7b7e <vfprintf+0x2be>
    7b6a:	b9 2c       	mov	r11, r9
    7b6c:	b3 94       	inc	r11
    7b6e:	89 2d       	mov	r24, r9
    7b70:	90 e0       	ldi	r25, 0x00	; 0
    7b72:	c8 16       	cp	r12, r24
    7b74:	d9 06       	cpc	r13, r25
    7b76:	14 f0       	brlt	.+4      	; 0x7b7c <vfprintf+0x2bc>
    7b78:	99 24       	eor	r9, r9
    7b7a:	01 c0       	rjmp	.+2      	; 0x7b7e <vfprintf+0x2be>
    7b7c:	9c 18       	sub	r9, r12
    7b7e:	f7 fc       	sbrc	r15, 7
    7b80:	03 c0       	rjmp	.+6      	; 0x7b88 <vfprintf+0x2c8>
    7b82:	25 e0       	ldi	r18, 0x05	; 5
    7b84:	30 e0       	ldi	r19, 0x00	; 0
    7b86:	09 c0       	rjmp	.+18     	; 0x7b9a <vfprintf+0x2da>
    7b88:	1c 14       	cp	r1, r12
    7b8a:	1d 04       	cpc	r1, r13
    7b8c:	1c f0       	brlt	.+6      	; 0x7b94 <vfprintf+0x2d4>
    7b8e:	21 e0       	ldi	r18, 0x01	; 1
    7b90:	30 e0       	ldi	r19, 0x00	; 0
    7b92:	03 c0       	rjmp	.+6      	; 0x7b9a <vfprintf+0x2da>
    7b94:	96 01       	movw	r18, r12
    7b96:	2f 5f       	subi	r18, 0xFF	; 255
    7b98:	3f 4f       	sbci	r19, 0xFF	; 255
    7b9a:	11 23       	and	r17, r17
    7b9c:	11 f0       	breq	.+4      	; 0x7ba2 <vfprintf+0x2e2>
    7b9e:	2f 5f       	subi	r18, 0xFF	; 255
    7ba0:	3f 4f       	sbci	r19, 0xFF	; 255
    7ba2:	99 20       	and	r9, r9
    7ba4:	29 f0       	breq	.+10     	; 0x7bb0 <vfprintf+0x2f0>
    7ba6:	89 2d       	mov	r24, r9
    7ba8:	90 e0       	ldi	r25, 0x00	; 0
    7baa:	01 96       	adiw	r24, 0x01	; 1
    7bac:	28 0f       	add	r18, r24
    7bae:	39 1f       	adc	r19, r25
    7bb0:	88 2d       	mov	r24, r8
    7bb2:	90 e0       	ldi	r25, 0x00	; 0
    7bb4:	28 17       	cp	r18, r24
    7bb6:	39 07       	cpc	r19, r25
    7bb8:	14 f0       	brlt	.+4      	; 0x7bbe <vfprintf+0x2fe>
    7bba:	88 24       	eor	r8, r8
    7bbc:	01 c0       	rjmp	.+2      	; 0x7bc0 <vfprintf+0x300>
    7bbe:	82 1a       	sub	r8, r18
    7bc0:	4f 2c       	mov	r4, r15
    7bc2:	55 24       	eor	r5, r5
    7bc4:	c2 01       	movw	r24, r4
    7bc6:	89 70       	andi	r24, 0x09	; 9
    7bc8:	90 70       	andi	r25, 0x00	; 0
    7bca:	89 2b       	or	r24, r25
    7bcc:	39 f0       	breq	.+14     	; 0x7bdc <vfprintf+0x31c>
    7bce:	08 c0       	rjmp	.+16     	; 0x7be0 <vfprintf+0x320>
    7bd0:	80 e2       	ldi	r24, 0x20	; 32
    7bd2:	90 e0       	ldi	r25, 0x00	; 0
    7bd4:	b3 01       	movw	r22, r6
    7bd6:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7bda:	8a 94       	dec	r8
    7bdc:	88 20       	and	r8, r8
    7bde:	c1 f7       	brne	.-16     	; 0x7bd0 <vfprintf+0x310>
    7be0:	11 23       	and	r17, r17
    7be2:	29 f0       	breq	.+10     	; 0x7bee <vfprintf+0x32e>
    7be4:	81 2f       	mov	r24, r17
    7be6:	90 e0       	ldi	r25, 0x00	; 0
    7be8:	b3 01       	movw	r22, r6
    7bea:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7bee:	43 fe       	sbrs	r4, 3
    7bf0:	07 c0       	rjmp	.+14     	; 0x7c00 <vfprintf+0x340>
    7bf2:	08 c0       	rjmp	.+16     	; 0x7c04 <vfprintf+0x344>
    7bf4:	80 e3       	ldi	r24, 0x30	; 48
    7bf6:	90 e0       	ldi	r25, 0x00	; 0
    7bf8:	b3 01       	movw	r22, r6
    7bfa:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7bfe:	8a 94       	dec	r8
    7c00:	88 20       	and	r8, r8
    7c02:	c1 f7       	brne	.-16     	; 0x7bf4 <vfprintf+0x334>
    7c04:	f7 fe       	sbrs	r15, 7
    7c06:	46 c0       	rjmp	.+140    	; 0x7c94 <vfprintf+0x3d4>
    7c08:	86 01       	movw	r16, r12
    7c0a:	d7 fe       	sbrs	r13, 7
    7c0c:	02 c0       	rjmp	.+4      	; 0x7c12 <vfprintf+0x352>
    7c0e:	00 e0       	ldi	r16, 0x00	; 0
    7c10:	10 e0       	ldi	r17, 0x00	; 0
    7c12:	76 01       	movw	r14, r12
    7c14:	08 94       	sec
    7c16:	e1 1c       	adc	r14, r1
    7c18:	f1 1c       	adc	r15, r1
    7c1a:	e0 1a       	sub	r14, r16
    7c1c:	f1 0a       	sbc	r15, r17
    7c1e:	41 e0       	ldi	r20, 0x01	; 1
    7c20:	50 e0       	ldi	r21, 0x00	; 0
    7c22:	4c 0f       	add	r20, r28
    7c24:	5d 1f       	adc	r21, r29
    7c26:	e4 0e       	add	r14, r20
    7c28:	f5 1e       	adc	r15, r21
    7c2a:	26 01       	movw	r4, r12
    7c2c:	4b 18       	sub	r4, r11
    7c2e:	51 08       	sbc	r5, r1
    7c30:	89 2d       	mov	r24, r9
    7c32:	90 e0       	ldi	r25, 0x00	; 0
    7c34:	aa 24       	eor	r10, r10
    7c36:	bb 24       	eor	r11, r11
    7c38:	a8 1a       	sub	r10, r24
    7c3a:	b9 0a       	sbc	r11, r25
    7c3c:	5f ef       	ldi	r21, 0xFF	; 255
    7c3e:	0f 3f       	cpi	r16, 0xFF	; 255
    7c40:	15 07       	cpc	r17, r21
    7c42:	29 f4       	brne	.+10     	; 0x7c4e <vfprintf+0x38e>
    7c44:	8e e2       	ldi	r24, 0x2E	; 46
    7c46:	90 e0       	ldi	r25, 0x00	; 0
    7c48:	b3 01       	movw	r22, r6
    7c4a:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7c4e:	c0 16       	cp	r12, r16
    7c50:	d1 06       	cpc	r13, r17
    7c52:	34 f0       	brlt	.+12     	; 0x7c60 <vfprintf+0x3a0>
    7c54:	40 16       	cp	r4, r16
    7c56:	51 06       	cpc	r5, r17
    7c58:	1c f4       	brge	.+6      	; 0x7c60 <vfprintf+0x3a0>
    7c5a:	f7 01       	movw	r30, r14
    7c5c:	80 81       	ld	r24, Z
    7c5e:	01 c0       	rjmp	.+2      	; 0x7c62 <vfprintf+0x3a2>
    7c60:	80 e3       	ldi	r24, 0x30	; 48
    7c62:	01 50       	subi	r16, 0x01	; 1
    7c64:	10 40       	sbci	r17, 0x00	; 0
    7c66:	08 94       	sec
    7c68:	e1 1c       	adc	r14, r1
    7c6a:	f1 1c       	adc	r15, r1
    7c6c:	0a 15       	cp	r16, r10
    7c6e:	1b 05       	cpc	r17, r11
    7c70:	2c f0       	brlt	.+10     	; 0x7c7c <vfprintf+0x3bc>
    7c72:	90 e0       	ldi	r25, 0x00	; 0
    7c74:	b3 01       	movw	r22, r6
    7c76:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7c7a:	e0 cf       	rjmp	.-64     	; 0x7c3c <vfprintf+0x37c>
    7c7c:	0c 15       	cp	r16, r12
    7c7e:	1d 05       	cpc	r17, r13
    7c80:	39 f4       	brne	.+14     	; 0x7c90 <vfprintf+0x3d0>
    7c82:	9a 81       	ldd	r25, Y+2	; 0x02
    7c84:	96 33       	cpi	r25, 0x36	; 54
    7c86:	18 f4       	brcc	.+6      	; 0x7c8e <vfprintf+0x3ce>
    7c88:	95 33       	cpi	r25, 0x35	; 53
    7c8a:	11 f4       	brne	.+4      	; 0x7c90 <vfprintf+0x3d0>
    7c8c:	24 fe       	sbrs	r2, 4
    7c8e:	81 e3       	ldi	r24, 0x31	; 49
    7c90:	90 e0       	ldi	r25, 0x00	; 0
    7c92:	4b c0       	rjmp	.+150    	; 0x7d2a <vfprintf+0x46a>
    7c94:	8a 81       	ldd	r24, Y+2	; 0x02
    7c96:	81 33       	cpi	r24, 0x31	; 49
    7c98:	09 f0       	breq	.+2      	; 0x7c9c <vfprintf+0x3dc>
    7c9a:	0f 7e       	andi	r16, 0xEF	; 239
    7c9c:	90 e0       	ldi	r25, 0x00	; 0
    7c9e:	b3 01       	movw	r22, r6
    7ca0:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7ca4:	99 20       	and	r9, r9
    7ca6:	a1 f0       	breq	.+40     	; 0x7cd0 <vfprintf+0x410>
    7ca8:	8e e2       	ldi	r24, 0x2E	; 46
    7caa:	90 e0       	ldi	r25, 0x00	; 0
    7cac:	b3 01       	movw	r22, r6
    7cae:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7cb2:	12 e0       	ldi	r17, 0x02	; 2
    7cb4:	e1 e0       	ldi	r30, 0x01	; 1
    7cb6:	f0 e0       	ldi	r31, 0x00	; 0
    7cb8:	ec 0f       	add	r30, r28
    7cba:	fd 1f       	adc	r31, r29
    7cbc:	e1 0f       	add	r30, r17
    7cbe:	f1 1d       	adc	r31, r1
    7cc0:	1f 5f       	subi	r17, 0xFF	; 255
    7cc2:	80 81       	ld	r24, Z
    7cc4:	90 e0       	ldi	r25, 0x00	; 0
    7cc6:	b3 01       	movw	r22, r6
    7cc8:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7ccc:	9a 94       	dec	r9
    7cce:	91 f7       	brne	.-28     	; 0x7cb4 <vfprintf+0x3f4>
    7cd0:	44 fc       	sbrc	r4, 4
    7cd2:	03 c0       	rjmp	.+6      	; 0x7cda <vfprintf+0x41a>
    7cd4:	85 e6       	ldi	r24, 0x65	; 101
    7cd6:	90 e0       	ldi	r25, 0x00	; 0
    7cd8:	02 c0       	rjmp	.+4      	; 0x7cde <vfprintf+0x41e>
    7cda:	85 e4       	ldi	r24, 0x45	; 69
    7cdc:	90 e0       	ldi	r25, 0x00	; 0
    7cde:	b3 01       	movw	r22, r6
    7ce0:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7ce4:	d7 fc       	sbrc	r13, 7
    7ce6:	05 c0       	rjmp	.+10     	; 0x7cf2 <vfprintf+0x432>
    7ce8:	c1 14       	cp	r12, r1
    7cea:	d1 04       	cpc	r13, r1
    7cec:	41 f4       	brne	.+16     	; 0x7cfe <vfprintf+0x43e>
    7cee:	04 ff       	sbrs	r16, 4
    7cf0:	06 c0       	rjmp	.+12     	; 0x7cfe <vfprintf+0x43e>
    7cf2:	d0 94       	com	r13
    7cf4:	c1 94       	neg	r12
    7cf6:	d1 08       	sbc	r13, r1
    7cf8:	d3 94       	inc	r13
    7cfa:	8d e2       	ldi	r24, 0x2D	; 45
    7cfc:	01 c0       	rjmp	.+2      	; 0x7d00 <vfprintf+0x440>
    7cfe:	8b e2       	ldi	r24, 0x2B	; 43
    7d00:	90 e0       	ldi	r25, 0x00	; 0
    7d02:	b3 01       	movw	r22, r6
    7d04:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7d08:	80 e3       	ldi	r24, 0x30	; 48
    7d0a:	05 c0       	rjmp	.+10     	; 0x7d16 <vfprintf+0x456>
    7d0c:	8f 5f       	subi	r24, 0xFF	; 255
    7d0e:	26 ef       	ldi	r18, 0xF6	; 246
    7d10:	3f ef       	ldi	r19, 0xFF	; 255
    7d12:	c2 0e       	add	r12, r18
    7d14:	d3 1e       	adc	r13, r19
    7d16:	3a e0       	ldi	r19, 0x0A	; 10
    7d18:	c3 16       	cp	r12, r19
    7d1a:	d1 04       	cpc	r13, r1
    7d1c:	bc f7       	brge	.-18     	; 0x7d0c <vfprintf+0x44c>
    7d1e:	90 e0       	ldi	r25, 0x00	; 0
    7d20:	b3 01       	movw	r22, r6
    7d22:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7d26:	c6 01       	movw	r24, r12
    7d28:	c0 96       	adiw	r24, 0x30	; 48
    7d2a:	b3 01       	movw	r22, r6
    7d2c:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7d30:	cc 84       	ldd	r12, Y+12	; 0x0c
    7d32:	dd 84       	ldd	r13, Y+13	; 0x0d
    7d34:	52 c1       	rjmp	.+676    	; 0x7fda <vfprintf+0x71a>
    7d36:	93 36       	cpi	r25, 0x63	; 99
    7d38:	31 f0       	breq	.+12     	; 0x7d46 <vfprintf+0x486>
    7d3a:	93 37       	cpi	r25, 0x73	; 115
    7d3c:	99 f0       	breq	.+38     	; 0x7d64 <vfprintf+0x4a4>
    7d3e:	93 35       	cpi	r25, 0x53	; 83
    7d40:	09 f0       	breq	.+2      	; 0x7d44 <vfprintf+0x484>
    7d42:	59 c0       	rjmp	.+178    	; 0x7df6 <vfprintf+0x536>
    7d44:	23 c0       	rjmp	.+70     	; 0x7d8c <vfprintf+0x4cc>
    7d46:	f6 01       	movw	r30, r12
    7d48:	80 81       	ld	r24, Z
    7d4a:	89 83       	std	Y+1, r24	; 0x01
    7d4c:	5e 01       	movw	r10, r28
    7d4e:	08 94       	sec
    7d50:	a1 1c       	adc	r10, r1
    7d52:	b1 1c       	adc	r11, r1
    7d54:	22 e0       	ldi	r18, 0x02	; 2
    7d56:	30 e0       	ldi	r19, 0x00	; 0
    7d58:	c2 0e       	add	r12, r18
    7d5a:	d3 1e       	adc	r13, r19
    7d5c:	21 e0       	ldi	r18, 0x01	; 1
    7d5e:	e2 2e       	mov	r14, r18
    7d60:	f1 2c       	mov	r15, r1
    7d62:	12 c0       	rjmp	.+36     	; 0x7d88 <vfprintf+0x4c8>
    7d64:	f6 01       	movw	r30, r12
    7d66:	a0 80       	ld	r10, Z
    7d68:	b1 80       	ldd	r11, Z+1	; 0x01
    7d6a:	16 fd       	sbrc	r17, 6
    7d6c:	03 c0       	rjmp	.+6      	; 0x7d74 <vfprintf+0x4b4>
    7d6e:	6f ef       	ldi	r22, 0xFF	; 255
    7d70:	7f ef       	ldi	r23, 0xFF	; 255
    7d72:	02 c0       	rjmp	.+4      	; 0x7d78 <vfprintf+0x4b8>
    7d74:	69 2d       	mov	r22, r9
    7d76:	70 e0       	ldi	r23, 0x00	; 0
    7d78:	22 e0       	ldi	r18, 0x02	; 2
    7d7a:	30 e0       	ldi	r19, 0x00	; 0
    7d7c:	c2 0e       	add	r12, r18
    7d7e:	d3 1e       	adc	r13, r19
    7d80:	c5 01       	movw	r24, r10
    7d82:	0e 94 44 47 	call	0x8e88	; 0x8e88 <strnlen>
    7d86:	7c 01       	movw	r14, r24
    7d88:	1f 77       	andi	r17, 0x7F	; 127
    7d8a:	13 c0       	rjmp	.+38     	; 0x7db2 <vfprintf+0x4f2>
    7d8c:	f6 01       	movw	r30, r12
    7d8e:	a0 80       	ld	r10, Z
    7d90:	b1 80       	ldd	r11, Z+1	; 0x01
    7d92:	16 fd       	sbrc	r17, 6
    7d94:	03 c0       	rjmp	.+6      	; 0x7d9c <vfprintf+0x4dc>
    7d96:	6f ef       	ldi	r22, 0xFF	; 255
    7d98:	7f ef       	ldi	r23, 0xFF	; 255
    7d9a:	02 c0       	rjmp	.+4      	; 0x7da0 <vfprintf+0x4e0>
    7d9c:	69 2d       	mov	r22, r9
    7d9e:	70 e0       	ldi	r23, 0x00	; 0
    7da0:	22 e0       	ldi	r18, 0x02	; 2
    7da2:	30 e0       	ldi	r19, 0x00	; 0
    7da4:	c2 0e       	add	r12, r18
    7da6:	d3 1e       	adc	r13, r19
    7da8:	c5 01       	movw	r24, r10
    7daa:	0e 94 39 47 	call	0x8e72	; 0x8e72 <strnlen_P>
    7dae:	7c 01       	movw	r14, r24
    7db0:	10 68       	ori	r17, 0x80	; 128
    7db2:	13 ff       	sbrs	r17, 3
    7db4:	07 c0       	rjmp	.+14     	; 0x7dc4 <vfprintf+0x504>
    7db6:	1b c0       	rjmp	.+54     	; 0x7dee <vfprintf+0x52e>
    7db8:	80 e2       	ldi	r24, 0x20	; 32
    7dba:	90 e0       	ldi	r25, 0x00	; 0
    7dbc:	b3 01       	movw	r22, r6
    7dbe:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7dc2:	8a 94       	dec	r8
    7dc4:	88 2d       	mov	r24, r8
    7dc6:	90 e0       	ldi	r25, 0x00	; 0
    7dc8:	e8 16       	cp	r14, r24
    7dca:	f9 06       	cpc	r15, r25
    7dcc:	a8 f3       	brcs	.-22     	; 0x7db8 <vfprintf+0x4f8>
    7dce:	0f c0       	rjmp	.+30     	; 0x7dee <vfprintf+0x52e>
    7dd0:	f5 01       	movw	r30, r10
    7dd2:	17 fd       	sbrc	r17, 7
    7dd4:	85 91       	lpm	r24, Z+
    7dd6:	17 ff       	sbrs	r17, 7
    7dd8:	81 91       	ld	r24, Z+
    7dda:	5f 01       	movw	r10, r30
    7ddc:	90 e0       	ldi	r25, 0x00	; 0
    7dde:	b3 01       	movw	r22, r6
    7de0:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7de4:	81 10       	cpse	r8, r1
    7de6:	8a 94       	dec	r8
    7de8:	08 94       	sec
    7dea:	e1 08       	sbc	r14, r1
    7dec:	f1 08       	sbc	r15, r1
    7dee:	e1 14       	cp	r14, r1
    7df0:	f1 04       	cpc	r15, r1
    7df2:	71 f7       	brne	.-36     	; 0x7dd0 <vfprintf+0x510>
    7df4:	f2 c0       	rjmp	.+484    	; 0x7fda <vfprintf+0x71a>
    7df6:	94 36       	cpi	r25, 0x64	; 100
    7df8:	11 f0       	breq	.+4      	; 0x7dfe <vfprintf+0x53e>
    7dfa:	99 36       	cpi	r25, 0x69	; 105
    7dfc:	89 f5       	brne	.+98     	; 0x7e60 <vfprintf+0x5a0>
    7dfe:	17 ff       	sbrs	r17, 7
    7e00:	08 c0       	rjmp	.+16     	; 0x7e12 <vfprintf+0x552>
    7e02:	f6 01       	movw	r30, r12
    7e04:	20 81       	ld	r18, Z
    7e06:	31 81       	ldd	r19, Z+1	; 0x01
    7e08:	42 81       	ldd	r20, Z+2	; 0x02
    7e0a:	53 81       	ldd	r21, Z+3	; 0x03
    7e0c:	84 e0       	ldi	r24, 0x04	; 4
    7e0e:	90 e0       	ldi	r25, 0x00	; 0
    7e10:	0a c0       	rjmp	.+20     	; 0x7e26 <vfprintf+0x566>
    7e12:	f6 01       	movw	r30, r12
    7e14:	80 81       	ld	r24, Z
    7e16:	91 81       	ldd	r25, Z+1	; 0x01
    7e18:	9c 01       	movw	r18, r24
    7e1a:	44 27       	eor	r20, r20
    7e1c:	37 fd       	sbrc	r19, 7
    7e1e:	40 95       	com	r20
    7e20:	54 2f       	mov	r21, r20
    7e22:	82 e0       	ldi	r24, 0x02	; 2
    7e24:	90 e0       	ldi	r25, 0x00	; 0
    7e26:	c8 0e       	add	r12, r24
    7e28:	d9 1e       	adc	r13, r25
    7e2a:	9f e6       	ldi	r25, 0x6F	; 111
    7e2c:	f9 2e       	mov	r15, r25
    7e2e:	f1 22       	and	r15, r17
    7e30:	57 ff       	sbrs	r21, 7
    7e32:	09 c0       	rjmp	.+18     	; 0x7e46 <vfprintf+0x586>
    7e34:	50 95       	com	r21
    7e36:	40 95       	com	r20
    7e38:	30 95       	com	r19
    7e3a:	21 95       	neg	r18
    7e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    7e3e:	4f 4f       	sbci	r20, 0xFF	; 255
    7e40:	5f 4f       	sbci	r21, 0xFF	; 255
    7e42:	90 e8       	ldi	r25, 0x80	; 128
    7e44:	f9 2a       	or	r15, r25
    7e46:	ca 01       	movw	r24, r20
    7e48:	b9 01       	movw	r22, r18
    7e4a:	ae 01       	movw	r20, r28
    7e4c:	4f 5f       	subi	r20, 0xFF	; 255
    7e4e:	5f 4f       	sbci	r21, 0xFF	; 255
    7e50:	2a e0       	ldi	r18, 0x0A	; 10
    7e52:	30 e0       	ldi	r19, 0x00	; 0
    7e54:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <__ultoa_invert>
    7e58:	e8 2e       	mov	r14, r24
    7e5a:	e8 89       	ldd	r30, Y+16	; 0x10
    7e5c:	ee 1a       	sub	r14, r30
    7e5e:	41 c0       	rjmp	.+130    	; 0x7ee2 <vfprintf+0x622>
    7e60:	95 37       	cpi	r25, 0x75	; 117
    7e62:	21 f4       	brne	.+8      	; 0x7e6c <vfprintf+0x5ac>
    7e64:	1f 7e       	andi	r17, 0xEF	; 239
    7e66:	2a e0       	ldi	r18, 0x0A	; 10
    7e68:	30 e0       	ldi	r19, 0x00	; 0
    7e6a:	1c c0       	rjmp	.+56     	; 0x7ea4 <vfprintf+0x5e4>
    7e6c:	19 7f       	andi	r17, 0xF9	; 249
    7e6e:	9f 36       	cpi	r25, 0x6F	; 111
    7e70:	61 f0       	breq	.+24     	; 0x7e8a <vfprintf+0x5ca>
    7e72:	90 37       	cpi	r25, 0x70	; 112
    7e74:	20 f4       	brcc	.+8      	; 0x7e7e <vfprintf+0x5be>
    7e76:	98 35       	cpi	r25, 0x58	; 88
    7e78:	09 f0       	breq	.+2      	; 0x7e7c <vfprintf+0x5bc>
    7e7a:	b2 c0       	rjmp	.+356    	; 0x7fe0 <vfprintf+0x720>
    7e7c:	0f c0       	rjmp	.+30     	; 0x7e9c <vfprintf+0x5dc>
    7e7e:	90 37       	cpi	r25, 0x70	; 112
    7e80:	39 f0       	breq	.+14     	; 0x7e90 <vfprintf+0x5d0>
    7e82:	98 37       	cpi	r25, 0x78	; 120
    7e84:	09 f0       	breq	.+2      	; 0x7e88 <vfprintf+0x5c8>
    7e86:	ac c0       	rjmp	.+344    	; 0x7fe0 <vfprintf+0x720>
    7e88:	04 c0       	rjmp	.+8      	; 0x7e92 <vfprintf+0x5d2>
    7e8a:	28 e0       	ldi	r18, 0x08	; 8
    7e8c:	30 e0       	ldi	r19, 0x00	; 0
    7e8e:	0a c0       	rjmp	.+20     	; 0x7ea4 <vfprintf+0x5e4>
    7e90:	10 61       	ori	r17, 0x10	; 16
    7e92:	14 fd       	sbrc	r17, 4
    7e94:	14 60       	ori	r17, 0x04	; 4
    7e96:	20 e1       	ldi	r18, 0x10	; 16
    7e98:	30 e0       	ldi	r19, 0x00	; 0
    7e9a:	04 c0       	rjmp	.+8      	; 0x7ea4 <vfprintf+0x5e4>
    7e9c:	14 fd       	sbrc	r17, 4
    7e9e:	16 60       	ori	r17, 0x06	; 6
    7ea0:	20 e1       	ldi	r18, 0x10	; 16
    7ea2:	32 e0       	ldi	r19, 0x02	; 2
    7ea4:	17 ff       	sbrs	r17, 7
    7ea6:	08 c0       	rjmp	.+16     	; 0x7eb8 <vfprintf+0x5f8>
    7ea8:	f6 01       	movw	r30, r12
    7eaa:	60 81       	ld	r22, Z
    7eac:	71 81       	ldd	r23, Z+1	; 0x01
    7eae:	82 81       	ldd	r24, Z+2	; 0x02
    7eb0:	93 81       	ldd	r25, Z+3	; 0x03
    7eb2:	44 e0       	ldi	r20, 0x04	; 4
    7eb4:	50 e0       	ldi	r21, 0x00	; 0
    7eb6:	08 c0       	rjmp	.+16     	; 0x7ec8 <vfprintf+0x608>
    7eb8:	f6 01       	movw	r30, r12
    7eba:	80 81       	ld	r24, Z
    7ebc:	91 81       	ldd	r25, Z+1	; 0x01
    7ebe:	bc 01       	movw	r22, r24
    7ec0:	80 e0       	ldi	r24, 0x00	; 0
    7ec2:	90 e0       	ldi	r25, 0x00	; 0
    7ec4:	42 e0       	ldi	r20, 0x02	; 2
    7ec6:	50 e0       	ldi	r21, 0x00	; 0
    7ec8:	c4 0e       	add	r12, r20
    7eca:	d5 1e       	adc	r13, r21
    7ecc:	ae 01       	movw	r20, r28
    7ece:	4f 5f       	subi	r20, 0xFF	; 255
    7ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    7ed2:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <__ultoa_invert>
    7ed6:	e8 2e       	mov	r14, r24
    7ed8:	58 89       	ldd	r21, Y+16	; 0x10
    7eda:	e5 1a       	sub	r14, r21
    7edc:	8f e7       	ldi	r24, 0x7F	; 127
    7ede:	f8 2e       	mov	r15, r24
    7ee0:	f1 22       	and	r15, r17
    7ee2:	f6 fe       	sbrs	r15, 6
    7ee4:	0b c0       	rjmp	.+22     	; 0x7efc <vfprintf+0x63c>
    7ee6:	8e ef       	ldi	r24, 0xFE	; 254
    7ee8:	f8 22       	and	r15, r24
    7eea:	e9 14       	cp	r14, r9
    7eec:	38 f4       	brcc	.+14     	; 0x7efc <vfprintf+0x63c>
    7eee:	f4 fe       	sbrs	r15, 4
    7ef0:	07 c0       	rjmp	.+14     	; 0x7f00 <vfprintf+0x640>
    7ef2:	f2 fc       	sbrc	r15, 2
    7ef4:	05 c0       	rjmp	.+10     	; 0x7f00 <vfprintf+0x640>
    7ef6:	9f ee       	ldi	r25, 0xEF	; 239
    7ef8:	f9 22       	and	r15, r25
    7efa:	02 c0       	rjmp	.+4      	; 0x7f00 <vfprintf+0x640>
    7efc:	1e 2d       	mov	r17, r14
    7efe:	01 c0       	rjmp	.+2      	; 0x7f02 <vfprintf+0x642>
    7f00:	19 2d       	mov	r17, r9
    7f02:	f4 fe       	sbrs	r15, 4
    7f04:	0d c0       	rjmp	.+26     	; 0x7f20 <vfprintf+0x660>
    7f06:	fe 01       	movw	r30, r28
    7f08:	ee 0d       	add	r30, r14
    7f0a:	f1 1d       	adc	r31, r1
    7f0c:	80 81       	ld	r24, Z
    7f0e:	80 33       	cpi	r24, 0x30	; 48
    7f10:	19 f4       	brne	.+6      	; 0x7f18 <vfprintf+0x658>
    7f12:	e9 ee       	ldi	r30, 0xE9	; 233
    7f14:	fe 22       	and	r15, r30
    7f16:	08 c0       	rjmp	.+16     	; 0x7f28 <vfprintf+0x668>
    7f18:	1f 5f       	subi	r17, 0xFF	; 255
    7f1a:	f2 fe       	sbrs	r15, 2
    7f1c:	05 c0       	rjmp	.+10     	; 0x7f28 <vfprintf+0x668>
    7f1e:	03 c0       	rjmp	.+6      	; 0x7f26 <vfprintf+0x666>
    7f20:	8f 2d       	mov	r24, r15
    7f22:	86 78       	andi	r24, 0x86	; 134
    7f24:	09 f0       	breq	.+2      	; 0x7f28 <vfprintf+0x668>
    7f26:	1f 5f       	subi	r17, 0xFF	; 255
    7f28:	0f 2d       	mov	r16, r15
    7f2a:	f3 fc       	sbrc	r15, 3
    7f2c:	14 c0       	rjmp	.+40     	; 0x7f56 <vfprintf+0x696>
    7f2e:	f0 fe       	sbrs	r15, 0
    7f30:	0f c0       	rjmp	.+30     	; 0x7f50 <vfprintf+0x690>
    7f32:	18 15       	cp	r17, r8
    7f34:	10 f0       	brcs	.+4      	; 0x7f3a <vfprintf+0x67a>
    7f36:	9e 2c       	mov	r9, r14
    7f38:	0b c0       	rjmp	.+22     	; 0x7f50 <vfprintf+0x690>
    7f3a:	9e 2c       	mov	r9, r14
    7f3c:	98 0c       	add	r9, r8
    7f3e:	91 1a       	sub	r9, r17
    7f40:	18 2d       	mov	r17, r8
    7f42:	06 c0       	rjmp	.+12     	; 0x7f50 <vfprintf+0x690>
    7f44:	80 e2       	ldi	r24, 0x20	; 32
    7f46:	90 e0       	ldi	r25, 0x00	; 0
    7f48:	b3 01       	movw	r22, r6
    7f4a:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7f4e:	1f 5f       	subi	r17, 0xFF	; 255
    7f50:	18 15       	cp	r17, r8
    7f52:	c0 f3       	brcs	.-16     	; 0x7f44 <vfprintf+0x684>
    7f54:	04 c0       	rjmp	.+8      	; 0x7f5e <vfprintf+0x69e>
    7f56:	18 15       	cp	r17, r8
    7f58:	10 f4       	brcc	.+4      	; 0x7f5e <vfprintf+0x69e>
    7f5a:	81 1a       	sub	r8, r17
    7f5c:	01 c0       	rjmp	.+2      	; 0x7f60 <vfprintf+0x6a0>
    7f5e:	88 24       	eor	r8, r8
    7f60:	04 ff       	sbrs	r16, 4
    7f62:	0f c0       	rjmp	.+30     	; 0x7f82 <vfprintf+0x6c2>
    7f64:	80 e3       	ldi	r24, 0x30	; 48
    7f66:	90 e0       	ldi	r25, 0x00	; 0
    7f68:	b3 01       	movw	r22, r6
    7f6a:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7f6e:	02 ff       	sbrs	r16, 2
    7f70:	1d c0       	rjmp	.+58     	; 0x7fac <vfprintf+0x6ec>
    7f72:	01 fd       	sbrc	r16, 1
    7f74:	03 c0       	rjmp	.+6      	; 0x7f7c <vfprintf+0x6bc>
    7f76:	88 e7       	ldi	r24, 0x78	; 120
    7f78:	90 e0       	ldi	r25, 0x00	; 0
    7f7a:	0e c0       	rjmp	.+28     	; 0x7f98 <vfprintf+0x6d8>
    7f7c:	88 e5       	ldi	r24, 0x58	; 88
    7f7e:	90 e0       	ldi	r25, 0x00	; 0
    7f80:	0b c0       	rjmp	.+22     	; 0x7f98 <vfprintf+0x6d8>
    7f82:	80 2f       	mov	r24, r16
    7f84:	86 78       	andi	r24, 0x86	; 134
    7f86:	91 f0       	breq	.+36     	; 0x7fac <vfprintf+0x6ec>
    7f88:	01 ff       	sbrs	r16, 1
    7f8a:	02 c0       	rjmp	.+4      	; 0x7f90 <vfprintf+0x6d0>
    7f8c:	8b e2       	ldi	r24, 0x2B	; 43
    7f8e:	01 c0       	rjmp	.+2      	; 0x7f92 <vfprintf+0x6d2>
    7f90:	80 e2       	ldi	r24, 0x20	; 32
    7f92:	f7 fc       	sbrc	r15, 7
    7f94:	8d e2       	ldi	r24, 0x2D	; 45
    7f96:	90 e0       	ldi	r25, 0x00	; 0
    7f98:	b3 01       	movw	r22, r6
    7f9a:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7f9e:	06 c0       	rjmp	.+12     	; 0x7fac <vfprintf+0x6ec>
    7fa0:	80 e3       	ldi	r24, 0x30	; 48
    7fa2:	90 e0       	ldi	r25, 0x00	; 0
    7fa4:	b3 01       	movw	r22, r6
    7fa6:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7faa:	9a 94       	dec	r9
    7fac:	e9 14       	cp	r14, r9
    7fae:	c0 f3       	brcs	.-16     	; 0x7fa0 <vfprintf+0x6e0>
    7fb0:	ea 94       	dec	r14
    7fb2:	e1 e0       	ldi	r30, 0x01	; 1
    7fb4:	f0 e0       	ldi	r31, 0x00	; 0
    7fb6:	ec 0f       	add	r30, r28
    7fb8:	fd 1f       	adc	r31, r29
    7fba:	ee 0d       	add	r30, r14
    7fbc:	f1 1d       	adc	r31, r1
    7fbe:	80 81       	ld	r24, Z
    7fc0:	90 e0       	ldi	r25, 0x00	; 0
    7fc2:	b3 01       	movw	r22, r6
    7fc4:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7fc8:	ee 20       	and	r14, r14
    7fca:	91 f7       	brne	.-28     	; 0x7fb0 <vfprintf+0x6f0>
    7fcc:	06 c0       	rjmp	.+12     	; 0x7fda <vfprintf+0x71a>
    7fce:	80 e2       	ldi	r24, 0x20	; 32
    7fd0:	90 e0       	ldi	r25, 0x00	; 0
    7fd2:	b3 01       	movw	r22, r6
    7fd4:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <fputc>
    7fd8:	8a 94       	dec	r8
    7fda:	88 20       	and	r8, r8
    7fdc:	c1 f7       	brne	.-16     	; 0x7fce <vfprintf+0x70e>
    7fde:	99 cc       	rjmp	.-1742   	; 0x7912 <vfprintf+0x52>
    7fe0:	f3 01       	movw	r30, r6
    7fe2:	66 81       	ldd	r22, Z+6	; 0x06
    7fe4:	77 81       	ldd	r23, Z+7	; 0x07
    7fe6:	cb 01       	movw	r24, r22
    7fe8:	61 96       	adiw	r28, 0x11	; 17
    7fea:	cd bf       	out	0x3d, r28	; 61
    7fec:	de bf       	out	0x3e, r29	; 62
    7fee:	cf 91       	pop	r28
    7ff0:	df 91       	pop	r29
    7ff2:	1f 91       	pop	r17
    7ff4:	0f 91       	pop	r16
    7ff6:	ff 90       	pop	r15
    7ff8:	ef 90       	pop	r14
    7ffa:	df 90       	pop	r13
    7ffc:	cf 90       	pop	r12
    7ffe:	bf 90       	pop	r11
    8000:	af 90       	pop	r10
    8002:	9f 90       	pop	r9
    8004:	8f 90       	pop	r8
    8006:	7f 90       	pop	r7
    8008:	6f 90       	pop	r6
    800a:	5f 90       	pop	r5
    800c:	4f 90       	pop	r4
    800e:	3f 90       	pop	r3
    8010:	2f 90       	pop	r2
    8012:	08 95       	ret

00008014 <__subsf3>:
    8014:	50 58       	subi	r21, 0x80	; 128

00008016 <__addsf3>:
    8016:	bb 27       	eor	r27, r27
    8018:	aa 27       	eor	r26, r26
    801a:	0e d0       	rcall	.+28     	; 0x8038 <__addsf3x>
    801c:	29 c2       	rjmp	.+1106   	; 0x8470 <__fp_round>
    801e:	f2 d1       	rcall	.+996    	; 0x8404 <__fp_pscA>
    8020:	30 f0       	brcs	.+12     	; 0x802e <__addsf3+0x18>
    8022:	f7 d1       	rcall	.+1006   	; 0x8412 <__fp_pscB>
    8024:	20 f0       	brcs	.+8      	; 0x802e <__addsf3+0x18>
    8026:	31 f4       	brne	.+12     	; 0x8034 <__addsf3+0x1e>
    8028:	9f 3f       	cpi	r25, 0xFF	; 255
    802a:	11 f4       	brne	.+4      	; 0x8030 <__addsf3+0x1a>
    802c:	1e f4       	brtc	.+6      	; 0x8034 <__addsf3+0x1e>
    802e:	c2 c1       	rjmp	.+900    	; 0x83b4 <__fp_nan>
    8030:	0e f4       	brtc	.+2      	; 0x8034 <__addsf3+0x1e>
    8032:	e0 95       	com	r30
    8034:	e7 fb       	bst	r30, 7
    8036:	8f c1       	rjmp	.+798    	; 0x8356 <__fp_inf>

00008038 <__addsf3x>:
    8038:	e9 2f       	mov	r30, r25
    803a:	3c d2       	rcall	.+1144   	; 0x84b4 <__fp_split3>
    803c:	80 f3       	brcs	.-32     	; 0x801e <__addsf3+0x8>
    803e:	ba 17       	cp	r27, r26
    8040:	62 07       	cpc	r22, r18
    8042:	73 07       	cpc	r23, r19
    8044:	84 07       	cpc	r24, r20
    8046:	95 07       	cpc	r25, r21
    8048:	18 f0       	brcs	.+6      	; 0x8050 <__addsf3x+0x18>
    804a:	71 f4       	brne	.+28     	; 0x8068 <__addsf3x+0x30>
    804c:	9e f5       	brtc	.+102    	; 0x80b4 <__addsf3x+0x7c>
    804e:	6b c2       	rjmp	.+1238   	; 0x8526 <__fp_zero>
    8050:	0e f4       	brtc	.+2      	; 0x8054 <__addsf3x+0x1c>
    8052:	e0 95       	com	r30
    8054:	0b 2e       	mov	r0, r27
    8056:	ba 2f       	mov	r27, r26
    8058:	a0 2d       	mov	r26, r0
    805a:	0b 01       	movw	r0, r22
    805c:	b9 01       	movw	r22, r18
    805e:	90 01       	movw	r18, r0
    8060:	0c 01       	movw	r0, r24
    8062:	ca 01       	movw	r24, r20
    8064:	a0 01       	movw	r20, r0
    8066:	11 24       	eor	r1, r1
    8068:	ff 27       	eor	r31, r31
    806a:	59 1b       	sub	r21, r25
    806c:	99 f0       	breq	.+38     	; 0x8094 <__addsf3x+0x5c>
    806e:	59 3f       	cpi	r21, 0xF9	; 249
    8070:	50 f4       	brcc	.+20     	; 0x8086 <__addsf3x+0x4e>
    8072:	50 3e       	cpi	r21, 0xE0	; 224
    8074:	68 f1       	brcs	.+90     	; 0x80d0 <__addsf3x+0x98>
    8076:	1a 16       	cp	r1, r26
    8078:	f0 40       	sbci	r31, 0x00	; 0
    807a:	a2 2f       	mov	r26, r18
    807c:	23 2f       	mov	r18, r19
    807e:	34 2f       	mov	r19, r20
    8080:	44 27       	eor	r20, r20
    8082:	58 5f       	subi	r21, 0xF8	; 248
    8084:	f3 cf       	rjmp	.-26     	; 0x806c <__addsf3x+0x34>
    8086:	46 95       	lsr	r20
    8088:	37 95       	ror	r19
    808a:	27 95       	ror	r18
    808c:	a7 95       	ror	r26
    808e:	f0 40       	sbci	r31, 0x00	; 0
    8090:	53 95       	inc	r21
    8092:	c9 f7       	brne	.-14     	; 0x8086 <__addsf3x+0x4e>
    8094:	7e f4       	brtc	.+30     	; 0x80b4 <__addsf3x+0x7c>
    8096:	1f 16       	cp	r1, r31
    8098:	ba 0b       	sbc	r27, r26
    809a:	62 0b       	sbc	r22, r18
    809c:	73 0b       	sbc	r23, r19
    809e:	84 0b       	sbc	r24, r20
    80a0:	ba f0       	brmi	.+46     	; 0x80d0 <__addsf3x+0x98>
    80a2:	91 50       	subi	r25, 0x01	; 1
    80a4:	a1 f0       	breq	.+40     	; 0x80ce <__addsf3x+0x96>
    80a6:	ff 0f       	add	r31, r31
    80a8:	bb 1f       	adc	r27, r27
    80aa:	66 1f       	adc	r22, r22
    80ac:	77 1f       	adc	r23, r23
    80ae:	88 1f       	adc	r24, r24
    80b0:	c2 f7       	brpl	.-16     	; 0x80a2 <__addsf3x+0x6a>
    80b2:	0e c0       	rjmp	.+28     	; 0x80d0 <__addsf3x+0x98>
    80b4:	ba 0f       	add	r27, r26
    80b6:	62 1f       	adc	r22, r18
    80b8:	73 1f       	adc	r23, r19
    80ba:	84 1f       	adc	r24, r20
    80bc:	48 f4       	brcc	.+18     	; 0x80d0 <__addsf3x+0x98>
    80be:	87 95       	ror	r24
    80c0:	77 95       	ror	r23
    80c2:	67 95       	ror	r22
    80c4:	b7 95       	ror	r27
    80c6:	f7 95       	ror	r31
    80c8:	9e 3f       	cpi	r25, 0xFE	; 254
    80ca:	08 f0       	brcs	.+2      	; 0x80ce <__addsf3x+0x96>
    80cc:	b3 cf       	rjmp	.-154    	; 0x8034 <__addsf3+0x1e>
    80ce:	93 95       	inc	r25
    80d0:	88 0f       	add	r24, r24
    80d2:	08 f0       	brcs	.+2      	; 0x80d6 <__addsf3x+0x9e>
    80d4:	99 27       	eor	r25, r25
    80d6:	ee 0f       	add	r30, r30
    80d8:	97 95       	ror	r25
    80da:	87 95       	ror	r24
    80dc:	08 95       	ret

000080de <atan>:
    80de:	df 93       	push	r29
    80e0:	dd 27       	eor	r29, r29
    80e2:	b9 2f       	mov	r27, r25
    80e4:	bf 77       	andi	r27, 0x7F	; 127
    80e6:	40 e8       	ldi	r20, 0x80	; 128
    80e8:	5f e3       	ldi	r21, 0x3F	; 63
    80ea:	16 16       	cp	r1, r22
    80ec:	17 06       	cpc	r1, r23
    80ee:	48 07       	cpc	r20, r24
    80f0:	5b 07       	cpc	r21, r27
    80f2:	10 f4       	brcc	.+4      	; 0x80f8 <atan+0x1a>
    80f4:	d9 2f       	mov	r29, r25
    80f6:	83 d2       	rcall	.+1286   	; 0x85fe <inverse>
    80f8:	9f 93       	push	r25
    80fa:	8f 93       	push	r24
    80fc:	7f 93       	push	r23
    80fe:	6f 93       	push	r22
    8100:	96 d3       	rcall	.+1836   	; 0x882e <square>
    8102:	e8 ee       	ldi	r30, 0xE8	; 232
    8104:	f1 e0       	ldi	r31, 0x01	; 1
    8106:	59 d1       	rcall	.+690    	; 0x83ba <__fp_powser>
    8108:	b3 d1       	rcall	.+870    	; 0x8470 <__fp_round>
    810a:	2f 91       	pop	r18
    810c:	3f 91       	pop	r19
    810e:	4f 91       	pop	r20
    8110:	5f 91       	pop	r21
    8112:	ee d2       	rcall	.+1500   	; 0x86f0 <__mulsf3x>
    8114:	dd 23       	and	r29, r29
    8116:	49 f0       	breq	.+18     	; 0x812a <atan+0x4c>
    8118:	90 58       	subi	r25, 0x80	; 128
    811a:	a2 ea       	ldi	r26, 0xA2	; 162
    811c:	2a ed       	ldi	r18, 0xDA	; 218
    811e:	3f e0       	ldi	r19, 0x0F	; 15
    8120:	49 ec       	ldi	r20, 0xC9	; 201
    8122:	5f e3       	ldi	r21, 0x3F	; 63
    8124:	d0 78       	andi	r29, 0x80	; 128
    8126:	5d 27       	eor	r21, r29
    8128:	87 df       	rcall	.-242    	; 0x8038 <__addsf3x>
    812a:	df 91       	pop	r29
    812c:	a1 c1       	rjmp	.+834    	; 0x8470 <__fp_round>

0000812e <ceil>:
    812e:	e4 d1       	rcall	.+968    	; 0x84f8 <__fp_trunc>
    8130:	80 f0       	brcs	.+32     	; 0x8152 <ceil+0x24>
    8132:	9f 37       	cpi	r25, 0x7F	; 127
    8134:	40 f4       	brcc	.+16     	; 0x8146 <ceil+0x18>
    8136:	91 11       	cpse	r25, r1
    8138:	0e f4       	brtc	.+2      	; 0x813c <ceil+0xe>
    813a:	f6 c1       	rjmp	.+1004   	; 0x8528 <__fp_szero>
    813c:	60 e0       	ldi	r22, 0x00	; 0
    813e:	70 e0       	ldi	r23, 0x00	; 0
    8140:	80 e8       	ldi	r24, 0x80	; 128
    8142:	9f e3       	ldi	r25, 0x3F	; 63
    8144:	08 95       	ret
    8146:	26 f0       	brts	.+8      	; 0x8150 <ceil+0x22>
    8148:	1b 16       	cp	r1, r27
    814a:	61 1d       	adc	r22, r1
    814c:	71 1d       	adc	r23, r1
    814e:	81 1d       	adc	r24, r1
    8150:	08 c1       	rjmp	.+528    	; 0x8362 <__fp_mintl>
    8152:	22 c1       	rjmp	.+580    	; 0x8398 <__fp_mpack>

00008154 <__cmpsf2>:
    8154:	dc d0       	rcall	.+440    	; 0x830e <__fp_cmp>
    8156:	08 f4       	brcc	.+2      	; 0x815a <__cmpsf2+0x6>
    8158:	81 e0       	ldi	r24, 0x01	; 1
    815a:	08 95       	ret

0000815c <cos>:
    815c:	62 d1       	rcall	.+708    	; 0x8422 <__fp_rempio2>
    815e:	e3 95       	inc	r30
    8160:	98 c1       	rjmp	.+816    	; 0x8492 <__fp_sinus>

00008162 <__divsf3>:
    8162:	0c d0       	rcall	.+24     	; 0x817c <__divsf3x>
    8164:	85 c1       	rjmp	.+778    	; 0x8470 <__fp_round>
    8166:	55 d1       	rcall	.+682    	; 0x8412 <__fp_pscB>
    8168:	40 f0       	brcs	.+16     	; 0x817a <__divsf3+0x18>
    816a:	4c d1       	rcall	.+664    	; 0x8404 <__fp_pscA>
    816c:	30 f0       	brcs	.+12     	; 0x817a <__divsf3+0x18>
    816e:	21 f4       	brne	.+8      	; 0x8178 <__divsf3+0x16>
    8170:	5f 3f       	cpi	r21, 0xFF	; 255
    8172:	19 f0       	breq	.+6      	; 0x817a <__divsf3+0x18>
    8174:	f0 c0       	rjmp	.+480    	; 0x8356 <__fp_inf>
    8176:	51 11       	cpse	r21, r1
    8178:	d7 c1       	rjmp	.+942    	; 0x8528 <__fp_szero>
    817a:	1c c1       	rjmp	.+568    	; 0x83b4 <__fp_nan>

0000817c <__divsf3x>:
    817c:	9b d1       	rcall	.+822    	; 0x84b4 <__fp_split3>
    817e:	98 f3       	brcs	.-26     	; 0x8166 <__divsf3+0x4>

00008180 <__divsf3_pse>:
    8180:	99 23       	and	r25, r25
    8182:	c9 f3       	breq	.-14     	; 0x8176 <__divsf3+0x14>
    8184:	55 23       	and	r21, r21
    8186:	b1 f3       	breq	.-20     	; 0x8174 <__divsf3+0x12>
    8188:	95 1b       	sub	r25, r21
    818a:	55 0b       	sbc	r21, r21
    818c:	bb 27       	eor	r27, r27
    818e:	aa 27       	eor	r26, r26
    8190:	62 17       	cp	r22, r18
    8192:	73 07       	cpc	r23, r19
    8194:	84 07       	cpc	r24, r20
    8196:	38 f0       	brcs	.+14     	; 0x81a6 <__divsf3_pse+0x26>
    8198:	9f 5f       	subi	r25, 0xFF	; 255
    819a:	5f 4f       	sbci	r21, 0xFF	; 255
    819c:	22 0f       	add	r18, r18
    819e:	33 1f       	adc	r19, r19
    81a0:	44 1f       	adc	r20, r20
    81a2:	aa 1f       	adc	r26, r26
    81a4:	a9 f3       	breq	.-22     	; 0x8190 <__divsf3_pse+0x10>
    81a6:	33 d0       	rcall	.+102    	; 0x820e <__divsf3_pse+0x8e>
    81a8:	0e 2e       	mov	r0, r30
    81aa:	3a f0       	brmi	.+14     	; 0x81ba <__divsf3_pse+0x3a>
    81ac:	e0 e8       	ldi	r30, 0x80	; 128
    81ae:	30 d0       	rcall	.+96     	; 0x8210 <__divsf3_pse+0x90>
    81b0:	91 50       	subi	r25, 0x01	; 1
    81b2:	50 40       	sbci	r21, 0x00	; 0
    81b4:	e6 95       	lsr	r30
    81b6:	00 1c       	adc	r0, r0
    81b8:	ca f7       	brpl	.-14     	; 0x81ac <__divsf3_pse+0x2c>
    81ba:	29 d0       	rcall	.+82     	; 0x820e <__divsf3_pse+0x8e>
    81bc:	fe 2f       	mov	r31, r30
    81be:	27 d0       	rcall	.+78     	; 0x820e <__divsf3_pse+0x8e>
    81c0:	66 0f       	add	r22, r22
    81c2:	77 1f       	adc	r23, r23
    81c4:	88 1f       	adc	r24, r24
    81c6:	bb 1f       	adc	r27, r27
    81c8:	26 17       	cp	r18, r22
    81ca:	37 07       	cpc	r19, r23
    81cc:	48 07       	cpc	r20, r24
    81ce:	ab 07       	cpc	r26, r27
    81d0:	b0 e8       	ldi	r27, 0x80	; 128
    81d2:	09 f0       	breq	.+2      	; 0x81d6 <__divsf3_pse+0x56>
    81d4:	bb 0b       	sbc	r27, r27
    81d6:	80 2d       	mov	r24, r0
    81d8:	bf 01       	movw	r22, r30
    81da:	ff 27       	eor	r31, r31
    81dc:	93 58       	subi	r25, 0x83	; 131
    81de:	5f 4f       	sbci	r21, 0xFF	; 255
    81e0:	2a f0       	brmi	.+10     	; 0x81ec <__divsf3_pse+0x6c>
    81e2:	9e 3f       	cpi	r25, 0xFE	; 254
    81e4:	51 05       	cpc	r21, r1
    81e6:	68 f0       	brcs	.+26     	; 0x8202 <__divsf3_pse+0x82>
    81e8:	b6 c0       	rjmp	.+364    	; 0x8356 <__fp_inf>
    81ea:	9e c1       	rjmp	.+828    	; 0x8528 <__fp_szero>
    81ec:	5f 3f       	cpi	r21, 0xFF	; 255
    81ee:	ec f3       	brlt	.-6      	; 0x81ea <__divsf3_pse+0x6a>
    81f0:	98 3e       	cpi	r25, 0xE8	; 232
    81f2:	dc f3       	brlt	.-10     	; 0x81ea <__divsf3_pse+0x6a>
    81f4:	86 95       	lsr	r24
    81f6:	77 95       	ror	r23
    81f8:	67 95       	ror	r22
    81fa:	b7 95       	ror	r27
    81fc:	f7 95       	ror	r31
    81fe:	9f 5f       	subi	r25, 0xFF	; 255
    8200:	c9 f7       	brne	.-14     	; 0x81f4 <__divsf3_pse+0x74>
    8202:	88 0f       	add	r24, r24
    8204:	91 1d       	adc	r25, r1
    8206:	96 95       	lsr	r25
    8208:	87 95       	ror	r24
    820a:	97 f9       	bld	r25, 7
    820c:	08 95       	ret
    820e:	e1 e0       	ldi	r30, 0x01	; 1
    8210:	66 0f       	add	r22, r22
    8212:	77 1f       	adc	r23, r23
    8214:	88 1f       	adc	r24, r24
    8216:	bb 1f       	adc	r27, r27
    8218:	62 17       	cp	r22, r18
    821a:	73 07       	cpc	r23, r19
    821c:	84 07       	cpc	r24, r20
    821e:	ba 07       	cpc	r27, r26
    8220:	20 f0       	brcs	.+8      	; 0x822a <__divsf3_pse+0xaa>
    8222:	62 1b       	sub	r22, r18
    8224:	73 0b       	sbc	r23, r19
    8226:	84 0b       	sbc	r24, r20
    8228:	ba 0b       	sbc	r27, r26
    822a:	ee 1f       	adc	r30, r30
    822c:	88 f7       	brcc	.-30     	; 0x8210 <__divsf3_pse+0x90>
    822e:	e0 95       	com	r30
    8230:	08 95       	ret

00008232 <__fixsfsi>:
    8232:	04 d0       	rcall	.+8      	; 0x823c <__fixunssfsi>
    8234:	68 94       	set
    8236:	b1 11       	cpse	r27, r1
    8238:	77 c1       	rjmp	.+750    	; 0x8528 <__fp_szero>
    823a:	08 95       	ret

0000823c <__fixunssfsi>:
    823c:	43 d1       	rcall	.+646    	; 0x84c4 <__fp_splitA>
    823e:	88 f0       	brcs	.+34     	; 0x8262 <__fixunssfsi+0x26>
    8240:	9f 57       	subi	r25, 0x7F	; 127
    8242:	90 f0       	brcs	.+36     	; 0x8268 <__fixunssfsi+0x2c>
    8244:	b9 2f       	mov	r27, r25
    8246:	99 27       	eor	r25, r25
    8248:	b7 51       	subi	r27, 0x17	; 23
    824a:	a0 f0       	brcs	.+40     	; 0x8274 <__fixunssfsi+0x38>
    824c:	d1 f0       	breq	.+52     	; 0x8282 <__fixunssfsi+0x46>
    824e:	66 0f       	add	r22, r22
    8250:	77 1f       	adc	r23, r23
    8252:	88 1f       	adc	r24, r24
    8254:	99 1f       	adc	r25, r25
    8256:	1a f0       	brmi	.+6      	; 0x825e <__fixunssfsi+0x22>
    8258:	ba 95       	dec	r27
    825a:	c9 f7       	brne	.-14     	; 0x824e <__fixunssfsi+0x12>
    825c:	12 c0       	rjmp	.+36     	; 0x8282 <__fixunssfsi+0x46>
    825e:	b1 30       	cpi	r27, 0x01	; 1
    8260:	81 f0       	breq	.+32     	; 0x8282 <__fixunssfsi+0x46>
    8262:	61 d1       	rcall	.+706    	; 0x8526 <__fp_zero>
    8264:	b1 e0       	ldi	r27, 0x01	; 1
    8266:	08 95       	ret
    8268:	5e c1       	rjmp	.+700    	; 0x8526 <__fp_zero>
    826a:	67 2f       	mov	r22, r23
    826c:	78 2f       	mov	r23, r24
    826e:	88 27       	eor	r24, r24
    8270:	b8 5f       	subi	r27, 0xF8	; 248
    8272:	39 f0       	breq	.+14     	; 0x8282 <__fixunssfsi+0x46>
    8274:	b9 3f       	cpi	r27, 0xF9	; 249
    8276:	cc f3       	brlt	.-14     	; 0x826a <__fixunssfsi+0x2e>
    8278:	86 95       	lsr	r24
    827a:	77 95       	ror	r23
    827c:	67 95       	ror	r22
    827e:	b3 95       	inc	r27
    8280:	d9 f7       	brne	.-10     	; 0x8278 <__fixunssfsi+0x3c>
    8282:	3e f4       	brtc	.+14     	; 0x8292 <__fixunssfsi+0x56>
    8284:	90 95       	com	r25
    8286:	80 95       	com	r24
    8288:	70 95       	com	r23
    828a:	61 95       	neg	r22
    828c:	7f 4f       	sbci	r23, 0xFF	; 255
    828e:	8f 4f       	sbci	r24, 0xFF	; 255
    8290:	9f 4f       	sbci	r25, 0xFF	; 255
    8292:	08 95       	ret

00008294 <__floatunsisf>:
    8294:	e8 94       	clt
    8296:	09 c0       	rjmp	.+18     	; 0x82aa <__floatsisf+0x12>

00008298 <__floatsisf>:
    8298:	97 fb       	bst	r25, 7
    829a:	3e f4       	brtc	.+14     	; 0x82aa <__floatsisf+0x12>
    829c:	90 95       	com	r25
    829e:	80 95       	com	r24
    82a0:	70 95       	com	r23
    82a2:	61 95       	neg	r22
    82a4:	7f 4f       	sbci	r23, 0xFF	; 255
    82a6:	8f 4f       	sbci	r24, 0xFF	; 255
    82a8:	9f 4f       	sbci	r25, 0xFF	; 255
    82aa:	99 23       	and	r25, r25
    82ac:	a9 f0       	breq	.+42     	; 0x82d8 <__floatsisf+0x40>
    82ae:	f9 2f       	mov	r31, r25
    82b0:	96 e9       	ldi	r25, 0x96	; 150
    82b2:	bb 27       	eor	r27, r27
    82b4:	93 95       	inc	r25
    82b6:	f6 95       	lsr	r31
    82b8:	87 95       	ror	r24
    82ba:	77 95       	ror	r23
    82bc:	67 95       	ror	r22
    82be:	b7 95       	ror	r27
    82c0:	f1 11       	cpse	r31, r1
    82c2:	f8 cf       	rjmp	.-16     	; 0x82b4 <__floatsisf+0x1c>
    82c4:	fa f4       	brpl	.+62     	; 0x8304 <__floatsisf+0x6c>
    82c6:	bb 0f       	add	r27, r27
    82c8:	11 f4       	brne	.+4      	; 0x82ce <__floatsisf+0x36>
    82ca:	60 ff       	sbrs	r22, 0
    82cc:	1b c0       	rjmp	.+54     	; 0x8304 <__floatsisf+0x6c>
    82ce:	6f 5f       	subi	r22, 0xFF	; 255
    82d0:	7f 4f       	sbci	r23, 0xFF	; 255
    82d2:	8f 4f       	sbci	r24, 0xFF	; 255
    82d4:	9f 4f       	sbci	r25, 0xFF	; 255
    82d6:	16 c0       	rjmp	.+44     	; 0x8304 <__floatsisf+0x6c>
    82d8:	88 23       	and	r24, r24
    82da:	11 f0       	breq	.+4      	; 0x82e0 <__floatsisf+0x48>
    82dc:	96 e9       	ldi	r25, 0x96	; 150
    82de:	11 c0       	rjmp	.+34     	; 0x8302 <__floatsisf+0x6a>
    82e0:	77 23       	and	r23, r23
    82e2:	21 f0       	breq	.+8      	; 0x82ec <__floatsisf+0x54>
    82e4:	9e e8       	ldi	r25, 0x8E	; 142
    82e6:	87 2f       	mov	r24, r23
    82e8:	76 2f       	mov	r23, r22
    82ea:	05 c0       	rjmp	.+10     	; 0x82f6 <__floatsisf+0x5e>
    82ec:	66 23       	and	r22, r22
    82ee:	71 f0       	breq	.+28     	; 0x830c <__floatsisf+0x74>
    82f0:	96 e8       	ldi	r25, 0x86	; 134
    82f2:	86 2f       	mov	r24, r22
    82f4:	70 e0       	ldi	r23, 0x00	; 0
    82f6:	60 e0       	ldi	r22, 0x00	; 0
    82f8:	2a f0       	brmi	.+10     	; 0x8304 <__floatsisf+0x6c>
    82fa:	9a 95       	dec	r25
    82fc:	66 0f       	add	r22, r22
    82fe:	77 1f       	adc	r23, r23
    8300:	88 1f       	adc	r24, r24
    8302:	da f7       	brpl	.-10     	; 0x82fa <__floatsisf+0x62>
    8304:	88 0f       	add	r24, r24
    8306:	96 95       	lsr	r25
    8308:	87 95       	ror	r24
    830a:	97 f9       	bld	r25, 7
    830c:	08 95       	ret

0000830e <__fp_cmp>:
    830e:	99 0f       	add	r25, r25
    8310:	00 08       	sbc	r0, r0
    8312:	55 0f       	add	r21, r21
    8314:	aa 0b       	sbc	r26, r26
    8316:	e0 e8       	ldi	r30, 0x80	; 128
    8318:	fe ef       	ldi	r31, 0xFE	; 254
    831a:	16 16       	cp	r1, r22
    831c:	17 06       	cpc	r1, r23
    831e:	e8 07       	cpc	r30, r24
    8320:	f9 07       	cpc	r31, r25
    8322:	c0 f0       	brcs	.+48     	; 0x8354 <__fp_cmp+0x46>
    8324:	12 16       	cp	r1, r18
    8326:	13 06       	cpc	r1, r19
    8328:	e4 07       	cpc	r30, r20
    832a:	f5 07       	cpc	r31, r21
    832c:	98 f0       	brcs	.+38     	; 0x8354 <__fp_cmp+0x46>
    832e:	62 1b       	sub	r22, r18
    8330:	73 0b       	sbc	r23, r19
    8332:	84 0b       	sbc	r24, r20
    8334:	95 0b       	sbc	r25, r21
    8336:	39 f4       	brne	.+14     	; 0x8346 <__fp_cmp+0x38>
    8338:	0a 26       	eor	r0, r26
    833a:	61 f0       	breq	.+24     	; 0x8354 <__fp_cmp+0x46>
    833c:	23 2b       	or	r18, r19
    833e:	24 2b       	or	r18, r20
    8340:	25 2b       	or	r18, r21
    8342:	21 f4       	brne	.+8      	; 0x834c <__fp_cmp+0x3e>
    8344:	08 95       	ret
    8346:	0a 26       	eor	r0, r26
    8348:	09 f4       	brne	.+2      	; 0x834c <__fp_cmp+0x3e>
    834a:	a1 40       	sbci	r26, 0x01	; 1
    834c:	a6 95       	lsr	r26
    834e:	8f ef       	ldi	r24, 0xFF	; 255
    8350:	81 1d       	adc	r24, r1
    8352:	81 1d       	adc	r24, r1
    8354:	08 95       	ret

00008356 <__fp_inf>:
    8356:	97 f9       	bld	r25, 7
    8358:	9f 67       	ori	r25, 0x7F	; 127
    835a:	80 e8       	ldi	r24, 0x80	; 128
    835c:	70 e0       	ldi	r23, 0x00	; 0
    835e:	60 e0       	ldi	r22, 0x00	; 0
    8360:	08 95       	ret

00008362 <__fp_mintl>:
    8362:	88 23       	and	r24, r24
    8364:	71 f4       	brne	.+28     	; 0x8382 <__fp_mintl+0x20>
    8366:	77 23       	and	r23, r23
    8368:	21 f0       	breq	.+8      	; 0x8372 <__fp_mintl+0x10>
    836a:	98 50       	subi	r25, 0x08	; 8
    836c:	87 2b       	or	r24, r23
    836e:	76 2f       	mov	r23, r22
    8370:	07 c0       	rjmp	.+14     	; 0x8380 <__fp_mintl+0x1e>
    8372:	66 23       	and	r22, r22
    8374:	11 f4       	brne	.+4      	; 0x837a <__fp_mintl+0x18>
    8376:	99 27       	eor	r25, r25
    8378:	0d c0       	rjmp	.+26     	; 0x8394 <__fp_mintl+0x32>
    837a:	90 51       	subi	r25, 0x10	; 16
    837c:	86 2b       	or	r24, r22
    837e:	70 e0       	ldi	r23, 0x00	; 0
    8380:	60 e0       	ldi	r22, 0x00	; 0
    8382:	2a f0       	brmi	.+10     	; 0x838e <__fp_mintl+0x2c>
    8384:	9a 95       	dec	r25
    8386:	66 0f       	add	r22, r22
    8388:	77 1f       	adc	r23, r23
    838a:	88 1f       	adc	r24, r24
    838c:	da f7       	brpl	.-10     	; 0x8384 <__fp_mintl+0x22>
    838e:	88 0f       	add	r24, r24
    8390:	96 95       	lsr	r25
    8392:	87 95       	ror	r24
    8394:	97 f9       	bld	r25, 7
    8396:	08 95       	ret

00008398 <__fp_mpack>:
    8398:	9f 3f       	cpi	r25, 0xFF	; 255
    839a:	31 f0       	breq	.+12     	; 0x83a8 <__fp_mpack_finite+0xc>

0000839c <__fp_mpack_finite>:
    839c:	91 50       	subi	r25, 0x01	; 1
    839e:	20 f4       	brcc	.+8      	; 0x83a8 <__fp_mpack_finite+0xc>
    83a0:	87 95       	ror	r24
    83a2:	77 95       	ror	r23
    83a4:	67 95       	ror	r22
    83a6:	b7 95       	ror	r27
    83a8:	88 0f       	add	r24, r24
    83aa:	91 1d       	adc	r25, r1
    83ac:	96 95       	lsr	r25
    83ae:	87 95       	ror	r24
    83b0:	97 f9       	bld	r25, 7
    83b2:	08 95       	ret

000083b4 <__fp_nan>:
    83b4:	9f ef       	ldi	r25, 0xFF	; 255
    83b6:	80 ec       	ldi	r24, 0xC0	; 192
    83b8:	08 95       	ret

000083ba <__fp_powser>:
    83ba:	df 93       	push	r29
    83bc:	cf 93       	push	r28
    83be:	1f 93       	push	r17
    83c0:	0f 93       	push	r16
    83c2:	ff 92       	push	r15
    83c4:	ef 92       	push	r14
    83c6:	df 92       	push	r13
    83c8:	7b 01       	movw	r14, r22
    83ca:	8c 01       	movw	r16, r24
    83cc:	68 94       	set
    83ce:	05 c0       	rjmp	.+10     	; 0x83da <__fp_powser+0x20>
    83d0:	da 2e       	mov	r13, r26
    83d2:	ef 01       	movw	r28, r30
    83d4:	8d d1       	rcall	.+794    	; 0x86f0 <__mulsf3x>
    83d6:	fe 01       	movw	r30, r28
    83d8:	e8 94       	clt
    83da:	a5 91       	lpm	r26, Z+
    83dc:	25 91       	lpm	r18, Z+
    83de:	35 91       	lpm	r19, Z+
    83e0:	45 91       	lpm	r20, Z+
    83e2:	55 91       	lpm	r21, Z+
    83e4:	ae f3       	brts	.-22     	; 0x83d0 <__fp_powser+0x16>
    83e6:	ef 01       	movw	r28, r30
    83e8:	27 de       	rcall	.-946    	; 0x8038 <__addsf3x>
    83ea:	fe 01       	movw	r30, r28
    83ec:	97 01       	movw	r18, r14
    83ee:	a8 01       	movw	r20, r16
    83f0:	da 94       	dec	r13
    83f2:	79 f7       	brne	.-34     	; 0x83d2 <__fp_powser+0x18>
    83f4:	df 90       	pop	r13
    83f6:	ef 90       	pop	r14
    83f8:	ff 90       	pop	r15
    83fa:	0f 91       	pop	r16
    83fc:	1f 91       	pop	r17
    83fe:	cf 91       	pop	r28
    8400:	df 91       	pop	r29
    8402:	08 95       	ret

00008404 <__fp_pscA>:
    8404:	00 24       	eor	r0, r0
    8406:	0a 94       	dec	r0
    8408:	16 16       	cp	r1, r22
    840a:	17 06       	cpc	r1, r23
    840c:	18 06       	cpc	r1, r24
    840e:	09 06       	cpc	r0, r25
    8410:	08 95       	ret

00008412 <__fp_pscB>:
    8412:	00 24       	eor	r0, r0
    8414:	0a 94       	dec	r0
    8416:	12 16       	cp	r1, r18
    8418:	13 06       	cpc	r1, r19
    841a:	14 06       	cpc	r1, r20
    841c:	05 06       	cpc	r0, r21
    841e:	08 95       	ret
    8420:	c9 cf       	rjmp	.-110    	; 0x83b4 <__fp_nan>

00008422 <__fp_rempio2>:
    8422:	50 d0       	rcall	.+160    	; 0x84c4 <__fp_splitA>
    8424:	e8 f3       	brcs	.-6      	; 0x8420 <__fp_pscB+0xe>
    8426:	e8 94       	clt
    8428:	e0 e0       	ldi	r30, 0x00	; 0
    842a:	bb 27       	eor	r27, r27
    842c:	9f 57       	subi	r25, 0x7F	; 127
    842e:	f0 f0       	brcs	.+60     	; 0x846c <__fp_rempio2+0x4a>
    8430:	2a ed       	ldi	r18, 0xDA	; 218
    8432:	3f e0       	ldi	r19, 0x0F	; 15
    8434:	49 ec       	ldi	r20, 0xC9	; 201
    8436:	06 c0       	rjmp	.+12     	; 0x8444 <__fp_rempio2+0x22>
    8438:	ee 0f       	add	r30, r30
    843a:	bb 0f       	add	r27, r27
    843c:	66 1f       	adc	r22, r22
    843e:	77 1f       	adc	r23, r23
    8440:	88 1f       	adc	r24, r24
    8442:	28 f0       	brcs	.+10     	; 0x844e <__fp_rempio2+0x2c>
    8444:	b2 3a       	cpi	r27, 0xA2	; 162
    8446:	62 07       	cpc	r22, r18
    8448:	73 07       	cpc	r23, r19
    844a:	84 07       	cpc	r24, r20
    844c:	28 f0       	brcs	.+10     	; 0x8458 <__fp_rempio2+0x36>
    844e:	b2 5a       	subi	r27, 0xA2	; 162
    8450:	62 0b       	sbc	r22, r18
    8452:	73 0b       	sbc	r23, r19
    8454:	84 0b       	sbc	r24, r20
    8456:	e3 95       	inc	r30
    8458:	9a 95       	dec	r25
    845a:	72 f7       	brpl	.-36     	; 0x8438 <__fp_rempio2+0x16>
    845c:	80 38       	cpi	r24, 0x80	; 128
    845e:	30 f4       	brcc	.+12     	; 0x846c <__fp_rempio2+0x4a>
    8460:	9a 95       	dec	r25
    8462:	bb 0f       	add	r27, r27
    8464:	66 1f       	adc	r22, r22
    8466:	77 1f       	adc	r23, r23
    8468:	88 1f       	adc	r24, r24
    846a:	d2 f7       	brpl	.-12     	; 0x8460 <__fp_rempio2+0x3e>
    846c:	90 48       	sbci	r25, 0x80	; 128
    846e:	96 cf       	rjmp	.-212    	; 0x839c <__fp_mpack_finite>

00008470 <__fp_round>:
    8470:	09 2e       	mov	r0, r25
    8472:	03 94       	inc	r0
    8474:	00 0c       	add	r0, r0
    8476:	11 f4       	brne	.+4      	; 0x847c <__fp_round+0xc>
    8478:	88 23       	and	r24, r24
    847a:	52 f0       	brmi	.+20     	; 0x8490 <__fp_round+0x20>
    847c:	bb 0f       	add	r27, r27
    847e:	40 f4       	brcc	.+16     	; 0x8490 <__fp_round+0x20>
    8480:	bf 2b       	or	r27, r31
    8482:	11 f4       	brne	.+4      	; 0x8488 <__fp_round+0x18>
    8484:	60 ff       	sbrs	r22, 0
    8486:	04 c0       	rjmp	.+8      	; 0x8490 <__fp_round+0x20>
    8488:	6f 5f       	subi	r22, 0xFF	; 255
    848a:	7f 4f       	sbci	r23, 0xFF	; 255
    848c:	8f 4f       	sbci	r24, 0xFF	; 255
    848e:	9f 4f       	sbci	r25, 0xFF	; 255
    8490:	08 95       	ret

00008492 <__fp_sinus>:
    8492:	ef 93       	push	r30
    8494:	e0 ff       	sbrs	r30, 0
    8496:	06 c0       	rjmp	.+12     	; 0x84a4 <__fp_sinus+0x12>
    8498:	a2 ea       	ldi	r26, 0xA2	; 162
    849a:	2a ed       	ldi	r18, 0xDA	; 218
    849c:	3f e0       	ldi	r19, 0x0F	; 15
    849e:	49 ec       	ldi	r20, 0xC9	; 201
    84a0:	5f eb       	ldi	r21, 0xBF	; 191
    84a2:	ca dd       	rcall	.-1132   	; 0x8038 <__addsf3x>
    84a4:	e5 df       	rcall	.-54     	; 0x8470 <__fp_round>
    84a6:	0f 90       	pop	r0
    84a8:	03 94       	inc	r0
    84aa:	01 fc       	sbrc	r0, 1
    84ac:	90 58       	subi	r25, 0x80	; 128
    84ae:	e5 e1       	ldi	r30, 0x15	; 21
    84b0:	f2 e0       	ldi	r31, 0x02	; 2
    84b2:	d2 c1       	rjmp	.+932    	; 0x8858 <__fp_powsodd>

000084b4 <__fp_split3>:
    84b4:	57 fd       	sbrc	r21, 7
    84b6:	90 58       	subi	r25, 0x80	; 128
    84b8:	44 0f       	add	r20, r20
    84ba:	55 1f       	adc	r21, r21
    84bc:	59 f0       	breq	.+22     	; 0x84d4 <__fp_splitA+0x10>
    84be:	5f 3f       	cpi	r21, 0xFF	; 255
    84c0:	71 f0       	breq	.+28     	; 0x84de <__fp_splitA+0x1a>
    84c2:	47 95       	ror	r20

000084c4 <__fp_splitA>:
    84c4:	88 0f       	add	r24, r24
    84c6:	97 fb       	bst	r25, 7
    84c8:	99 1f       	adc	r25, r25
    84ca:	61 f0       	breq	.+24     	; 0x84e4 <__fp_splitA+0x20>
    84cc:	9f 3f       	cpi	r25, 0xFF	; 255
    84ce:	79 f0       	breq	.+30     	; 0x84ee <__fp_splitA+0x2a>
    84d0:	87 95       	ror	r24
    84d2:	08 95       	ret
    84d4:	12 16       	cp	r1, r18
    84d6:	13 06       	cpc	r1, r19
    84d8:	14 06       	cpc	r1, r20
    84da:	55 1f       	adc	r21, r21
    84dc:	f2 cf       	rjmp	.-28     	; 0x84c2 <__fp_split3+0xe>
    84de:	46 95       	lsr	r20
    84e0:	f1 df       	rcall	.-30     	; 0x84c4 <__fp_splitA>
    84e2:	08 c0       	rjmp	.+16     	; 0x84f4 <__fp_splitA+0x30>
    84e4:	16 16       	cp	r1, r22
    84e6:	17 06       	cpc	r1, r23
    84e8:	18 06       	cpc	r1, r24
    84ea:	99 1f       	adc	r25, r25
    84ec:	f1 cf       	rjmp	.-30     	; 0x84d0 <__fp_splitA+0xc>
    84ee:	86 95       	lsr	r24
    84f0:	71 05       	cpc	r23, r1
    84f2:	61 05       	cpc	r22, r1
    84f4:	08 94       	sec
    84f6:	08 95       	ret

000084f8 <__fp_trunc>:
    84f8:	e5 df       	rcall	.-54     	; 0x84c4 <__fp_splitA>
    84fa:	a0 f0       	brcs	.+40     	; 0x8524 <__fp_trunc+0x2c>
    84fc:	be e7       	ldi	r27, 0x7E	; 126
    84fe:	b9 17       	cp	r27, r25
    8500:	88 f4       	brcc	.+34     	; 0x8524 <__fp_trunc+0x2c>
    8502:	bb 27       	eor	r27, r27
    8504:	9f 38       	cpi	r25, 0x8F	; 143
    8506:	60 f4       	brcc	.+24     	; 0x8520 <__fp_trunc+0x28>
    8508:	16 16       	cp	r1, r22
    850a:	b1 1d       	adc	r27, r1
    850c:	67 2f       	mov	r22, r23
    850e:	78 2f       	mov	r23, r24
    8510:	88 27       	eor	r24, r24
    8512:	98 5f       	subi	r25, 0xF8	; 248
    8514:	f7 cf       	rjmp	.-18     	; 0x8504 <__fp_trunc+0xc>
    8516:	86 95       	lsr	r24
    8518:	77 95       	ror	r23
    851a:	67 95       	ror	r22
    851c:	b1 1d       	adc	r27, r1
    851e:	93 95       	inc	r25
    8520:	96 39       	cpi	r25, 0x96	; 150
    8522:	c8 f3       	brcs	.-14     	; 0x8516 <__fp_trunc+0x1e>
    8524:	08 95       	ret

00008526 <__fp_zero>:
    8526:	e8 94       	clt

00008528 <__fp_szero>:
    8528:	bb 27       	eor	r27, r27
    852a:	66 27       	eor	r22, r22
    852c:	77 27       	eor	r23, r23
    852e:	cb 01       	movw	r24, r22
    8530:	97 f9       	bld	r25, 7
    8532:	08 95       	ret

00008534 <__gesf2>:
    8534:	ec de       	rcall	.-552    	; 0x830e <__fp_cmp>
    8536:	08 f4       	brcc	.+2      	; 0x853a <__gesf2+0x6>
    8538:	8f ef       	ldi	r24, 0xFF	; 255
    853a:	08 95       	ret
    853c:	63 df       	rcall	.-314    	; 0x8404 <__fp_pscA>
    853e:	19 f0       	breq	.+6      	; 0x8546 <__gesf2+0x12>
    8540:	68 df       	rcall	.-304    	; 0x8412 <__fp_pscB>
    8542:	09 f0       	breq	.+2      	; 0x8546 <__gesf2+0x12>
    8544:	37 cf       	rjmp	.-402    	; 0x83b4 <__fp_nan>
    8546:	07 cf       	rjmp	.-498    	; 0x8356 <__fp_inf>
    8548:	b9 01       	movw	r22, r18
    854a:	ca 01       	movw	r24, r20
    854c:	25 cf       	rjmp	.-438    	; 0x8398 <__fp_mpack>

0000854e <hypot>:
    854e:	9f 77       	andi	r25, 0x7F	; 127
    8550:	5f 77       	andi	r21, 0x7F	; 127
    8552:	b0 df       	rcall	.-160    	; 0x84b4 <__fp_split3>
    8554:	98 f3       	brcs	.-26     	; 0x853c <__gesf2+0x8>
    8556:	99 23       	and	r25, r25
    8558:	b9 f3       	breq	.-18     	; 0x8548 <__gesf2+0x14>
    855a:	55 23       	and	r21, r21
    855c:	b9 f3       	breq	.-18     	; 0x854c <__gesf2+0x18>
    855e:	ff 27       	eor	r31, r31
    8560:	95 17       	cp	r25, r21
    8562:	58 f4       	brcc	.+22     	; 0x857a <hypot+0x2c>
    8564:	e5 2f       	mov	r30, r21
    8566:	e9 1b       	sub	r30, r25
    8568:	ed 30       	cpi	r30, 0x0D	; 13
    856a:	70 f7       	brcc	.-36     	; 0x8548 <__gesf2+0x14>
    856c:	5e 3b       	cpi	r21, 0xBE	; 190
    856e:	10 f0       	brcs	.+4      	; 0x8574 <hypot+0x26>
    8570:	f1 e4       	ldi	r31, 0x41	; 65
    8572:	1c c0       	rjmp	.+56     	; 0x85ac <hypot+0x5e>
    8574:	90 34       	cpi	r25, 0x40	; 64
    8576:	e0 f4       	brcc	.+56     	; 0x85b0 <hypot+0x62>
    8578:	0a c0       	rjmp	.+20     	; 0x858e <hypot+0x40>
    857a:	e9 2f       	mov	r30, r25
    857c:	e5 1b       	sub	r30, r21
    857e:	ed 30       	cpi	r30, 0x0D	; 13
    8580:	28 f7       	brcc	.-54     	; 0x854c <__gesf2+0x18>
    8582:	9e 3b       	cpi	r25, 0xBE	; 190
    8584:	10 f0       	brcs	.+4      	; 0x858a <hypot+0x3c>
    8586:	f1 e4       	ldi	r31, 0x41	; 65
    8588:	11 c0       	rjmp	.+34     	; 0x85ac <hypot+0x5e>
    858a:	50 34       	cpi	r21, 0x40	; 64
    858c:	88 f4       	brcc	.+34     	; 0x85b0 <hypot+0x62>
    858e:	f9 ea       	ldi	r31, 0xA9	; 169
    8590:	88 23       	and	r24, r24
    8592:	2a f0       	brmi	.+10     	; 0x859e <hypot+0x50>
    8594:	9a 95       	dec	r25
    8596:	66 0f       	add	r22, r22
    8598:	77 1f       	adc	r23, r23
    859a:	88 1f       	adc	r24, r24
    859c:	da f7       	brpl	.-10     	; 0x8594 <hypot+0x46>
    859e:	44 23       	and	r20, r20
    85a0:	2a f0       	brmi	.+10     	; 0x85ac <hypot+0x5e>
    85a2:	5a 95       	dec	r21
    85a4:	22 0f       	add	r18, r18
    85a6:	33 1f       	adc	r19, r19
    85a8:	44 1f       	adc	r20, r20
    85aa:	da f7       	brpl	.-10     	; 0x85a2 <hypot+0x54>
    85ac:	9f 1b       	sub	r25, r31
    85ae:	5f 1b       	sub	r21, r31
    85b0:	ff 93       	push	r31
    85b2:	1f 93       	push	r17
    85b4:	0f 93       	push	r16
    85b6:	ff 92       	push	r15
    85b8:	ef 92       	push	r14
    85ba:	79 01       	movw	r14, r18
    85bc:	8a 01       	movw	r16, r20
    85be:	bb 27       	eor	r27, r27
    85c0:	ab 2f       	mov	r26, r27
    85c2:	9b 01       	movw	r18, r22
    85c4:	ac 01       	movw	r20, r24
    85c6:	96 d0       	rcall	.+300    	; 0x86f4 <__mulsf3_pse>
    85c8:	97 01       	movw	r18, r14
    85ca:	a8 01       	movw	r20, r16
    85cc:	bf 93       	push	r27
    85ce:	7b 01       	movw	r14, r22
    85d0:	8c 01       	movw	r16, r24
    85d2:	aa 27       	eor	r26, r26
    85d4:	ba 2f       	mov	r27, r26
    85d6:	b9 01       	movw	r22, r18
    85d8:	ca 01       	movw	r24, r20
    85da:	8c d0       	rcall	.+280    	; 0x86f4 <__mulsf3_pse>
    85dc:	af 91       	pop	r26
    85de:	97 01       	movw	r18, r14
    85e0:	a8 01       	movw	r20, r16
    85e2:	ef 90       	pop	r14
    85e4:	ff 90       	pop	r15
    85e6:	0f 91       	pop	r16
    85e8:	1f 91       	pop	r17
    85ea:	26 dd       	rcall	.-1460   	; 0x8038 <__addsf3x>
    85ec:	41 df       	rcall	.-382    	; 0x8470 <__fp_round>
    85ee:	e1 d0       	rcall	.+450    	; 0x87b2 <sqrt>
    85f0:	4f 91       	pop	r20
    85f2:	40 ff       	sbrs	r20, 0
    85f4:	08 95       	ret
    85f6:	55 27       	eor	r21, r21
    85f8:	47 fd       	sbrc	r20, 7
    85fa:	50 95       	com	r21
    85fc:	09 c0       	rjmp	.+18     	; 0x8610 <ldexp>

000085fe <inverse>:
    85fe:	9b 01       	movw	r18, r22
    8600:	ac 01       	movw	r20, r24
    8602:	60 e0       	ldi	r22, 0x00	; 0
    8604:	70 e0       	ldi	r23, 0x00	; 0
    8606:	80 e8       	ldi	r24, 0x80	; 128
    8608:	9f e3       	ldi	r25, 0x3F	; 63
    860a:	ab cd       	rjmp	.-1194   	; 0x8162 <__divsf3>
    860c:	a4 ce       	rjmp	.-696    	; 0x8356 <__fp_inf>
    860e:	c4 ce       	rjmp	.-632    	; 0x8398 <__fp_mpack>

00008610 <ldexp>:
    8610:	59 df       	rcall	.-334    	; 0x84c4 <__fp_splitA>
    8612:	e8 f3       	brcs	.-6      	; 0x860e <inverse+0x10>
    8614:	99 23       	and	r25, r25
    8616:	d9 f3       	breq	.-10     	; 0x860e <inverse+0x10>
    8618:	94 0f       	add	r25, r20
    861a:	51 1d       	adc	r21, r1
    861c:	bb f3       	brvs	.-18     	; 0x860c <inverse+0xe>
    861e:	91 50       	subi	r25, 0x01	; 1
    8620:	50 40       	sbci	r21, 0x00	; 0
    8622:	94 f0       	brlt	.+36     	; 0x8648 <ldexp+0x38>
    8624:	59 f0       	breq	.+22     	; 0x863c <ldexp+0x2c>
    8626:	88 23       	and	r24, r24
    8628:	32 f0       	brmi	.+12     	; 0x8636 <ldexp+0x26>
    862a:	66 0f       	add	r22, r22
    862c:	77 1f       	adc	r23, r23
    862e:	88 1f       	adc	r24, r24
    8630:	91 50       	subi	r25, 0x01	; 1
    8632:	50 40       	sbci	r21, 0x00	; 0
    8634:	c1 f7       	brne	.-16     	; 0x8626 <ldexp+0x16>
    8636:	9e 3f       	cpi	r25, 0xFE	; 254
    8638:	51 05       	cpc	r21, r1
    863a:	44 f7       	brge	.-48     	; 0x860c <inverse+0xe>
    863c:	88 0f       	add	r24, r24
    863e:	91 1d       	adc	r25, r1
    8640:	96 95       	lsr	r25
    8642:	87 95       	ror	r24
    8644:	97 f9       	bld	r25, 7
    8646:	08 95       	ret
    8648:	5f 3f       	cpi	r21, 0xFF	; 255
    864a:	ac f0       	brlt	.+42     	; 0x8676 <ldexp+0x66>
    864c:	98 3e       	cpi	r25, 0xE8	; 232
    864e:	9c f0       	brlt	.+38     	; 0x8676 <ldexp+0x66>
    8650:	bb 27       	eor	r27, r27
    8652:	86 95       	lsr	r24
    8654:	77 95       	ror	r23
    8656:	67 95       	ror	r22
    8658:	b7 95       	ror	r27
    865a:	08 f4       	brcc	.+2      	; 0x865e <ldexp+0x4e>
    865c:	b1 60       	ori	r27, 0x01	; 1
    865e:	93 95       	inc	r25
    8660:	c1 f7       	brne	.-16     	; 0x8652 <ldexp+0x42>
    8662:	bb 0f       	add	r27, r27
    8664:	58 f7       	brcc	.-42     	; 0x863c <ldexp+0x2c>
    8666:	11 f4       	brne	.+4      	; 0x866c <ldexp+0x5c>
    8668:	60 ff       	sbrs	r22, 0
    866a:	e8 cf       	rjmp	.-48     	; 0x863c <ldexp+0x2c>
    866c:	6f 5f       	subi	r22, 0xFF	; 255
    866e:	7f 4f       	sbci	r23, 0xFF	; 255
    8670:	8f 4f       	sbci	r24, 0xFF	; 255
    8672:	9f 4f       	sbci	r25, 0xFF	; 255
    8674:	e3 cf       	rjmp	.-58     	; 0x863c <ldexp+0x2c>
    8676:	58 cf       	rjmp	.-336    	; 0x8528 <__fp_szero>

00008678 <lround>:
    8678:	25 df       	rcall	.-438    	; 0x84c4 <__fp_splitA>
    867a:	58 f1       	brcs	.+86     	; 0x86d2 <lround+0x5a>
    867c:	9e 57       	subi	r25, 0x7E	; 126
    867e:	58 f1       	brcs	.+86     	; 0x86d6 <lround+0x5e>
    8680:	98 51       	subi	r25, 0x18	; 24
    8682:	a0 f0       	brcs	.+40     	; 0x86ac <lround+0x34>
    8684:	e9 f0       	breq	.+58     	; 0x86c0 <lround+0x48>
    8686:	98 30       	cpi	r25, 0x08	; 8
    8688:	20 f5       	brcc	.+72     	; 0x86d2 <lround+0x5a>
    868a:	09 2e       	mov	r0, r25
    868c:	99 27       	eor	r25, r25
    868e:	66 0f       	add	r22, r22
    8690:	77 1f       	adc	r23, r23
    8692:	88 1f       	adc	r24, r24
    8694:	99 1f       	adc	r25, r25
    8696:	0a 94       	dec	r0
    8698:	d1 f7       	brne	.-12     	; 0x868e <lround+0x16>
    869a:	12 c0       	rjmp	.+36     	; 0x86c0 <lround+0x48>
    869c:	06 2e       	mov	r0, r22
    869e:	67 2f       	mov	r22, r23
    86a0:	78 2f       	mov	r23, r24
    86a2:	88 27       	eor	r24, r24
    86a4:	98 5f       	subi	r25, 0xF8	; 248
    86a6:	11 f4       	brne	.+4      	; 0x86ac <lround+0x34>
    86a8:	00 0c       	add	r0, r0
    86aa:	07 c0       	rjmp	.+14     	; 0x86ba <lround+0x42>
    86ac:	99 3f       	cpi	r25, 0xF9	; 249
    86ae:	b4 f3       	brlt	.-20     	; 0x869c <lround+0x24>
    86b0:	86 95       	lsr	r24
    86b2:	77 95       	ror	r23
    86b4:	67 95       	ror	r22
    86b6:	93 95       	inc	r25
    86b8:	d9 f7       	brne	.-10     	; 0x86b0 <lround+0x38>
    86ba:	61 1d       	adc	r22, r1
    86bc:	71 1d       	adc	r23, r1
    86be:	81 1d       	adc	r24, r1
    86c0:	3e f4       	brtc	.+14     	; 0x86d0 <lround+0x58>
    86c2:	90 95       	com	r25
    86c4:	80 95       	com	r24
    86c6:	70 95       	com	r23
    86c8:	61 95       	neg	r22
    86ca:	7f 4f       	sbci	r23, 0xFF	; 255
    86cc:	8f 4f       	sbci	r24, 0xFF	; 255
    86ce:	9f 4f       	sbci	r25, 0xFF	; 255
    86d0:	08 95       	ret
    86d2:	68 94       	set
    86d4:	29 cf       	rjmp	.-430    	; 0x8528 <__fp_szero>
    86d6:	27 cf       	rjmp	.-434    	; 0x8526 <__fp_zero>

000086d8 <__mulsf3>:
    86d8:	0b d0       	rcall	.+22     	; 0x86f0 <__mulsf3x>
    86da:	ca ce       	rjmp	.-620    	; 0x8470 <__fp_round>
    86dc:	93 de       	rcall	.-730    	; 0x8404 <__fp_pscA>
    86de:	28 f0       	brcs	.+10     	; 0x86ea <__mulsf3+0x12>
    86e0:	98 de       	rcall	.-720    	; 0x8412 <__fp_pscB>
    86e2:	18 f0       	brcs	.+6      	; 0x86ea <__mulsf3+0x12>
    86e4:	95 23       	and	r25, r21
    86e6:	09 f0       	breq	.+2      	; 0x86ea <__mulsf3+0x12>
    86e8:	36 ce       	rjmp	.-916    	; 0x8356 <__fp_inf>
    86ea:	64 ce       	rjmp	.-824    	; 0x83b4 <__fp_nan>
    86ec:	11 24       	eor	r1, r1
    86ee:	1c cf       	rjmp	.-456    	; 0x8528 <__fp_szero>

000086f0 <__mulsf3x>:
    86f0:	e1 de       	rcall	.-574    	; 0x84b4 <__fp_split3>
    86f2:	a0 f3       	brcs	.-24     	; 0x86dc <__mulsf3+0x4>

000086f4 <__mulsf3_pse>:
    86f4:	95 9f       	mul	r25, r21
    86f6:	d1 f3       	breq	.-12     	; 0x86ec <__mulsf3+0x14>
    86f8:	95 0f       	add	r25, r21
    86fa:	50 e0       	ldi	r21, 0x00	; 0
    86fc:	55 1f       	adc	r21, r21
    86fe:	62 9f       	mul	r22, r18
    8700:	f0 01       	movw	r30, r0
    8702:	72 9f       	mul	r23, r18
    8704:	bb 27       	eor	r27, r27
    8706:	f0 0d       	add	r31, r0
    8708:	b1 1d       	adc	r27, r1
    870a:	63 9f       	mul	r22, r19
    870c:	aa 27       	eor	r26, r26
    870e:	f0 0d       	add	r31, r0
    8710:	b1 1d       	adc	r27, r1
    8712:	aa 1f       	adc	r26, r26
    8714:	64 9f       	mul	r22, r20
    8716:	66 27       	eor	r22, r22
    8718:	b0 0d       	add	r27, r0
    871a:	a1 1d       	adc	r26, r1
    871c:	66 1f       	adc	r22, r22
    871e:	82 9f       	mul	r24, r18
    8720:	22 27       	eor	r18, r18
    8722:	b0 0d       	add	r27, r0
    8724:	a1 1d       	adc	r26, r1
    8726:	62 1f       	adc	r22, r18
    8728:	73 9f       	mul	r23, r19
    872a:	b0 0d       	add	r27, r0
    872c:	a1 1d       	adc	r26, r1
    872e:	62 1f       	adc	r22, r18
    8730:	83 9f       	mul	r24, r19
    8732:	a0 0d       	add	r26, r0
    8734:	61 1d       	adc	r22, r1
    8736:	22 1f       	adc	r18, r18
    8738:	74 9f       	mul	r23, r20
    873a:	33 27       	eor	r19, r19
    873c:	a0 0d       	add	r26, r0
    873e:	61 1d       	adc	r22, r1
    8740:	23 1f       	adc	r18, r19
    8742:	84 9f       	mul	r24, r20
    8744:	60 0d       	add	r22, r0
    8746:	21 1d       	adc	r18, r1
    8748:	82 2f       	mov	r24, r18
    874a:	76 2f       	mov	r23, r22
    874c:	6a 2f       	mov	r22, r26
    874e:	11 24       	eor	r1, r1
    8750:	9f 57       	subi	r25, 0x7F	; 127
    8752:	50 40       	sbci	r21, 0x00	; 0
    8754:	8a f0       	brmi	.+34     	; 0x8778 <__mulsf3_pse+0x84>
    8756:	e1 f0       	breq	.+56     	; 0x8790 <__mulsf3_pse+0x9c>
    8758:	88 23       	and	r24, r24
    875a:	4a f0       	brmi	.+18     	; 0x876e <__mulsf3_pse+0x7a>
    875c:	ee 0f       	add	r30, r30
    875e:	ff 1f       	adc	r31, r31
    8760:	bb 1f       	adc	r27, r27
    8762:	66 1f       	adc	r22, r22
    8764:	77 1f       	adc	r23, r23
    8766:	88 1f       	adc	r24, r24
    8768:	91 50       	subi	r25, 0x01	; 1
    876a:	50 40       	sbci	r21, 0x00	; 0
    876c:	a9 f7       	brne	.-22     	; 0x8758 <__mulsf3_pse+0x64>
    876e:	9e 3f       	cpi	r25, 0xFE	; 254
    8770:	51 05       	cpc	r21, r1
    8772:	70 f0       	brcs	.+28     	; 0x8790 <__mulsf3_pse+0x9c>
    8774:	f0 cd       	rjmp	.-1056   	; 0x8356 <__fp_inf>
    8776:	d8 ce       	rjmp	.-592    	; 0x8528 <__fp_szero>
    8778:	5f 3f       	cpi	r21, 0xFF	; 255
    877a:	ec f3       	brlt	.-6      	; 0x8776 <__mulsf3_pse+0x82>
    877c:	98 3e       	cpi	r25, 0xE8	; 232
    877e:	dc f3       	brlt	.-10     	; 0x8776 <__mulsf3_pse+0x82>
    8780:	86 95       	lsr	r24
    8782:	77 95       	ror	r23
    8784:	67 95       	ror	r22
    8786:	b7 95       	ror	r27
    8788:	f7 95       	ror	r31
    878a:	e7 95       	ror	r30
    878c:	9f 5f       	subi	r25, 0xFF	; 255
    878e:	c1 f7       	brne	.-16     	; 0x8780 <__mulsf3_pse+0x8c>
    8790:	fe 2b       	or	r31, r30
    8792:	88 0f       	add	r24, r24
    8794:	91 1d       	adc	r25, r1
    8796:	96 95       	lsr	r25
    8798:	87 95       	ror	r24
    879a:	97 f9       	bld	r25, 7
    879c:	08 95       	ret

0000879e <sin>:
    879e:	9f 93       	push	r25
    87a0:	40 de       	rcall	.-896    	; 0x8422 <__fp_rempio2>
    87a2:	0f 90       	pop	r0
    87a4:	07 fc       	sbrc	r0, 7
    87a6:	ee 5f       	subi	r30, 0xFE	; 254
    87a8:	74 ce       	rjmp	.-792    	; 0x8492 <__fp_sinus>
    87aa:	11 f4       	brne	.+4      	; 0x87b0 <sin+0x12>
    87ac:	0e f4       	brtc	.+2      	; 0x87b0 <sin+0x12>
    87ae:	02 ce       	rjmp	.-1020   	; 0x83b4 <__fp_nan>
    87b0:	f3 cd       	rjmp	.-1050   	; 0x8398 <__fp_mpack>

000087b2 <sqrt>:
    87b2:	88 de       	rcall	.-752    	; 0x84c4 <__fp_splitA>
    87b4:	d0 f3       	brcs	.-12     	; 0x87aa <sin+0xc>
    87b6:	99 23       	and	r25, r25
    87b8:	d9 f3       	breq	.-10     	; 0x87b0 <sin+0x12>
    87ba:	ce f3       	brts	.-14     	; 0x87ae <sin+0x10>
    87bc:	9f 57       	subi	r25, 0x7F	; 127
    87be:	55 0b       	sbc	r21, r21
    87c0:	87 ff       	sbrs	r24, 7
    87c2:	43 d0       	rcall	.+134    	; 0x884a <__fp_norm2>
    87c4:	00 24       	eor	r0, r0
    87c6:	a0 e6       	ldi	r26, 0x60	; 96
    87c8:	40 ea       	ldi	r20, 0xA0	; 160
    87ca:	90 01       	movw	r18, r0
    87cc:	80 58       	subi	r24, 0x80	; 128
    87ce:	56 95       	lsr	r21
    87d0:	97 95       	ror	r25
    87d2:	28 f4       	brcc	.+10     	; 0x87de <sqrt+0x2c>
    87d4:	80 5c       	subi	r24, 0xC0	; 192
    87d6:	66 0f       	add	r22, r22
    87d8:	77 1f       	adc	r23, r23
    87da:	88 1f       	adc	r24, r24
    87dc:	20 f0       	brcs	.+8      	; 0x87e6 <sqrt+0x34>
    87de:	26 17       	cp	r18, r22
    87e0:	37 07       	cpc	r19, r23
    87e2:	48 07       	cpc	r20, r24
    87e4:	30 f4       	brcc	.+12     	; 0x87f2 <sqrt+0x40>
    87e6:	62 1b       	sub	r22, r18
    87e8:	73 0b       	sbc	r23, r19
    87ea:	84 0b       	sbc	r24, r20
    87ec:	20 29       	or	r18, r0
    87ee:	31 29       	or	r19, r1
    87f0:	4a 2b       	or	r20, r26
    87f2:	a6 95       	lsr	r26
    87f4:	17 94       	ror	r1
    87f6:	07 94       	ror	r0
    87f8:	20 25       	eor	r18, r0
    87fa:	31 25       	eor	r19, r1
    87fc:	4a 27       	eor	r20, r26
    87fe:	58 f7       	brcc	.-42     	; 0x87d6 <sqrt+0x24>
    8800:	66 0f       	add	r22, r22
    8802:	77 1f       	adc	r23, r23
    8804:	88 1f       	adc	r24, r24
    8806:	20 f0       	brcs	.+8      	; 0x8810 <sqrt+0x5e>
    8808:	26 17       	cp	r18, r22
    880a:	37 07       	cpc	r19, r23
    880c:	48 07       	cpc	r20, r24
    880e:	30 f4       	brcc	.+12     	; 0x881c <sqrt+0x6a>
    8810:	62 0b       	sbc	r22, r18
    8812:	73 0b       	sbc	r23, r19
    8814:	84 0b       	sbc	r24, r20
    8816:	20 0d       	add	r18, r0
    8818:	31 1d       	adc	r19, r1
    881a:	41 1d       	adc	r20, r1
    881c:	a0 95       	com	r26
    881e:	81 f7       	brne	.-32     	; 0x8800 <sqrt+0x4e>
    8820:	b9 01       	movw	r22, r18
    8822:	84 2f       	mov	r24, r20
    8824:	91 58       	subi	r25, 0x81	; 129
    8826:	88 0f       	add	r24, r24
    8828:	96 95       	lsr	r25
    882a:	87 95       	ror	r24
    882c:	08 95       	ret

0000882e <square>:
    882e:	9b 01       	movw	r18, r22
    8830:	ac 01       	movw	r20, r24
    8832:	52 cf       	rjmp	.-348    	; 0x86d8 <__mulsf3>

00008834 <trunc>:
    8834:	61 de       	rcall	.-830    	; 0x84f8 <__fp_trunc>
    8836:	20 f0       	brcs	.+8      	; 0x8840 <trunc+0xc>
    8838:	9f 37       	cpi	r25, 0x7F	; 127
    883a:	08 f4       	brcc	.+2      	; 0x883e <trunc+0xa>
    883c:	75 ce       	rjmp	.-790    	; 0x8528 <__fp_szero>
    883e:	91 cd       	rjmp	.-1246   	; 0x8362 <__fp_mintl>
    8840:	ab cd       	rjmp	.-1194   	; 0x8398 <__fp_mpack>

00008842 <__unordsf2>:
    8842:	65 dd       	rcall	.-1334   	; 0x830e <__fp_cmp>
    8844:	88 0b       	sbc	r24, r24
    8846:	99 0b       	sbc	r25, r25
    8848:	08 95       	ret

0000884a <__fp_norm2>:
    884a:	91 50       	subi	r25, 0x01	; 1
    884c:	50 40       	sbci	r21, 0x00	; 0
    884e:	66 0f       	add	r22, r22
    8850:	77 1f       	adc	r23, r23
    8852:	88 1f       	adc	r24, r24
    8854:	d2 f7       	brpl	.-12     	; 0x884a <__fp_norm2>
    8856:	08 95       	ret

00008858 <__fp_powsodd>:
    8858:	9f 93       	push	r25
    885a:	8f 93       	push	r24
    885c:	7f 93       	push	r23
    885e:	6f 93       	push	r22
    8860:	ff 93       	push	r31
    8862:	ef 93       	push	r30
    8864:	9b 01       	movw	r18, r22
    8866:	ac 01       	movw	r20, r24
    8868:	37 df       	rcall	.-402    	; 0x86d8 <__mulsf3>
    886a:	ef 91       	pop	r30
    886c:	ff 91       	pop	r31
    886e:	a5 dd       	rcall	.-1206   	; 0x83ba <__fp_powser>
    8870:	2f 91       	pop	r18
    8872:	3f 91       	pop	r19
    8874:	4f 91       	pop	r20
    8876:	5f 91       	pop	r21
    8878:	2f cf       	rjmp	.-418    	; 0x86d8 <__mulsf3>

0000887a <__mulsi3>:
    887a:	62 9f       	mul	r22, r18
    887c:	d0 01       	movw	r26, r0
    887e:	73 9f       	mul	r23, r19
    8880:	f0 01       	movw	r30, r0
    8882:	82 9f       	mul	r24, r18
    8884:	e0 0d       	add	r30, r0
    8886:	f1 1d       	adc	r31, r1
    8888:	64 9f       	mul	r22, r20
    888a:	e0 0d       	add	r30, r0
    888c:	f1 1d       	adc	r31, r1
    888e:	92 9f       	mul	r25, r18
    8890:	f0 0d       	add	r31, r0
    8892:	83 9f       	mul	r24, r19
    8894:	f0 0d       	add	r31, r0
    8896:	74 9f       	mul	r23, r20
    8898:	f0 0d       	add	r31, r0
    889a:	65 9f       	mul	r22, r21
    889c:	f0 0d       	add	r31, r0
    889e:	99 27       	eor	r25, r25
    88a0:	72 9f       	mul	r23, r18
    88a2:	b0 0d       	add	r27, r0
    88a4:	e1 1d       	adc	r30, r1
    88a6:	f9 1f       	adc	r31, r25
    88a8:	63 9f       	mul	r22, r19
    88aa:	b0 0d       	add	r27, r0
    88ac:	e1 1d       	adc	r30, r1
    88ae:	f9 1f       	adc	r31, r25
    88b0:	bd 01       	movw	r22, r26
    88b2:	cf 01       	movw	r24, r30
    88b4:	11 24       	eor	r1, r1
    88b6:	08 95       	ret

000088b8 <__udivmodsi4>:
    88b8:	a1 e2       	ldi	r26, 0x21	; 33
    88ba:	1a 2e       	mov	r1, r26
    88bc:	aa 1b       	sub	r26, r26
    88be:	bb 1b       	sub	r27, r27
    88c0:	fd 01       	movw	r30, r26
    88c2:	0d c0       	rjmp	.+26     	; 0x88de <__udivmodsi4_ep>

000088c4 <__udivmodsi4_loop>:
    88c4:	aa 1f       	adc	r26, r26
    88c6:	bb 1f       	adc	r27, r27
    88c8:	ee 1f       	adc	r30, r30
    88ca:	ff 1f       	adc	r31, r31
    88cc:	a2 17       	cp	r26, r18
    88ce:	b3 07       	cpc	r27, r19
    88d0:	e4 07       	cpc	r30, r20
    88d2:	f5 07       	cpc	r31, r21
    88d4:	20 f0       	brcs	.+8      	; 0x88de <__udivmodsi4_ep>
    88d6:	a2 1b       	sub	r26, r18
    88d8:	b3 0b       	sbc	r27, r19
    88da:	e4 0b       	sbc	r30, r20
    88dc:	f5 0b       	sbc	r31, r21

000088de <__udivmodsi4_ep>:
    88de:	66 1f       	adc	r22, r22
    88e0:	77 1f       	adc	r23, r23
    88e2:	88 1f       	adc	r24, r24
    88e4:	99 1f       	adc	r25, r25
    88e6:	1a 94       	dec	r1
    88e8:	69 f7       	brne	.-38     	; 0x88c4 <__udivmodsi4_loop>
    88ea:	60 95       	com	r22
    88ec:	70 95       	com	r23
    88ee:	80 95       	com	r24
    88f0:	90 95       	com	r25
    88f2:	9b 01       	movw	r18, r22
    88f4:	ac 01       	movw	r20, r24
    88f6:	bd 01       	movw	r22, r26
    88f8:	cf 01       	movw	r24, r30
    88fa:	08 95       	ret

000088fc <__prologue_saves__>:
    88fc:	2f 92       	push	r2
    88fe:	3f 92       	push	r3
    8900:	4f 92       	push	r4
    8902:	5f 92       	push	r5
    8904:	6f 92       	push	r6
    8906:	7f 92       	push	r7
    8908:	8f 92       	push	r8
    890a:	9f 92       	push	r9
    890c:	af 92       	push	r10
    890e:	bf 92       	push	r11
    8910:	cf 92       	push	r12
    8912:	df 92       	push	r13
    8914:	ef 92       	push	r14
    8916:	ff 92       	push	r15
    8918:	0f 93       	push	r16
    891a:	1f 93       	push	r17
    891c:	cf 93       	push	r28
    891e:	df 93       	push	r29
    8920:	cd b7       	in	r28, 0x3d	; 61
    8922:	de b7       	in	r29, 0x3e	; 62
    8924:	ca 1b       	sub	r28, r26
    8926:	db 0b       	sbc	r29, r27
    8928:	0f b6       	in	r0, 0x3f	; 63
    892a:	f8 94       	cli
    892c:	de bf       	out	0x3e, r29	; 62
    892e:	0f be       	out	0x3f, r0	; 63
    8930:	cd bf       	out	0x3d, r28	; 61
    8932:	19 94       	eijmp

00008934 <__epilogue_restores__>:
    8934:	2a 88       	ldd	r2, Y+18	; 0x12
    8936:	39 88       	ldd	r3, Y+17	; 0x11
    8938:	48 88       	ldd	r4, Y+16	; 0x10
    893a:	5f 84       	ldd	r5, Y+15	; 0x0f
    893c:	6e 84       	ldd	r6, Y+14	; 0x0e
    893e:	7d 84       	ldd	r7, Y+13	; 0x0d
    8940:	8c 84       	ldd	r8, Y+12	; 0x0c
    8942:	9b 84       	ldd	r9, Y+11	; 0x0b
    8944:	aa 84       	ldd	r10, Y+10	; 0x0a
    8946:	b9 84       	ldd	r11, Y+9	; 0x09
    8948:	c8 84       	ldd	r12, Y+8	; 0x08
    894a:	df 80       	ldd	r13, Y+7	; 0x07
    894c:	ee 80       	ldd	r14, Y+6	; 0x06
    894e:	fd 80       	ldd	r15, Y+5	; 0x05
    8950:	0c 81       	ldd	r16, Y+4	; 0x04
    8952:	1b 81       	ldd	r17, Y+3	; 0x03
    8954:	aa 81       	ldd	r26, Y+2	; 0x02
    8956:	b9 81       	ldd	r27, Y+1	; 0x01
    8958:	ce 0f       	add	r28, r30
    895a:	d1 1d       	adc	r29, r1
    895c:	0f b6       	in	r0, 0x3f	; 63
    895e:	f8 94       	cli
    8960:	de bf       	out	0x3e, r29	; 62
    8962:	0f be       	out	0x3f, r0	; 63
    8964:	cd bf       	out	0x3d, r28	; 61
    8966:	ed 01       	movw	r28, r26
    8968:	08 95       	ret

0000896a <strtod>:
    896a:	8f 92       	push	r8
    896c:	9f 92       	push	r9
    896e:	af 92       	push	r10
    8970:	bf 92       	push	r11
    8972:	cf 92       	push	r12
    8974:	df 92       	push	r13
    8976:	ef 92       	push	r14
    8978:	ff 92       	push	r15
    897a:	0f 93       	push	r16
    897c:	1f 93       	push	r17
    897e:	cf 93       	push	r28
    8980:	df 93       	push	r29
    8982:	ec 01       	movw	r28, r24
    8984:	5b 01       	movw	r10, r22
    8986:	61 15       	cp	r22, r1
    8988:	71 05       	cpc	r23, r1
    898a:	19 f0       	breq	.+6      	; 0x8992 <strtod+0x28>
    898c:	fb 01       	movw	r30, r22
    898e:	80 83       	st	Z, r24
    8990:	91 83       	std	Z+1, r25	; 0x01
    8992:	f9 90       	ld	r15, Y+
    8994:	8f 2d       	mov	r24, r15
    8996:	90 e0       	ldi	r25, 0x00	; 0
    8998:	0e 94 19 47 	call	0x8e32	; 0x8e32 <isspace>
    899c:	89 2b       	or	r24, r25
    899e:	c9 f7       	brne	.-14     	; 0x8992 <strtod+0x28>
    89a0:	fd e2       	ldi	r31, 0x2D	; 45
    89a2:	ff 16       	cp	r15, r31
    89a4:	21 f4       	brne	.+8      	; 0x89ae <strtod+0x44>
    89a6:	f9 90       	ld	r15, Y+
    89a8:	ee 24       	eor	r14, r14
    89aa:	e3 94       	inc	r14
    89ac:	05 c0       	rjmp	.+10     	; 0x89b8 <strtod+0x4e>
    89ae:	2b e2       	ldi	r18, 0x2B	; 43
    89b0:	f2 16       	cp	r15, r18
    89b2:	09 f4       	brne	.+2      	; 0x89b6 <strtod+0x4c>
    89b4:	f9 90       	ld	r15, Y+
    89b6:	ee 24       	eor	r14, r14
    89b8:	8e 01       	movw	r16, r28
    89ba:	01 50       	subi	r16, 0x01	; 1
    89bc:	10 40       	sbci	r17, 0x00	; 0
    89be:	c8 01       	movw	r24, r16
    89c0:	69 ef       	ldi	r22, 0xF9	; 249
    89c2:	7d e1       	ldi	r23, 0x1D	; 29
    89c4:	43 e0       	ldi	r20, 0x03	; 3
    89c6:	50 e0       	ldi	r21, 0x00	; 0
    89c8:	0e 94 21 47 	call	0x8e42	; 0x8e42 <strncasecmp_P>
    89cc:	89 2b       	or	r24, r25
    89ce:	01 f5       	brne	.+64     	; 0x8a10 <strtod+0xa6>
    89d0:	8e 01       	movw	r16, r28
    89d2:	0e 5f       	subi	r16, 0xFE	; 254
    89d4:	1f 4f       	sbci	r17, 0xFF	; 255
    89d6:	c8 01       	movw	r24, r16
    89d8:	6c ef       	ldi	r22, 0xFC	; 252
    89da:	7d e1       	ldi	r23, 0x1D	; 29
    89dc:	45 e0       	ldi	r20, 0x05	; 5
    89de:	50 e0       	ldi	r21, 0x00	; 0
    89e0:	0e 94 21 47 	call	0x8e42	; 0x8e42 <strncasecmp_P>
    89e4:	89 2b       	or	r24, r25
    89e6:	19 f4       	brne	.+6      	; 0x89ee <strtod+0x84>
    89e8:	8e 01       	movw	r16, r28
    89ea:	09 5f       	subi	r16, 0xF9	; 249
    89ec:	1f 4f       	sbci	r17, 0xFF	; 255
    89ee:	a1 14       	cp	r10, r1
    89f0:	b1 04       	cpc	r11, r1
    89f2:	19 f0       	breq	.+6      	; 0x89fa <strtod+0x90>
    89f4:	f5 01       	movw	r30, r10
    89f6:	00 83       	st	Z, r16
    89f8:	11 83       	std	Z+1, r17	; 0x01
    89fa:	e0 fc       	sbrc	r14, 0
    89fc:	04 c0       	rjmp	.+8      	; 0x8a06 <strtod+0x9c>
    89fe:	70 e0       	ldi	r23, 0x00	; 0
    8a00:	90 e0       	ldi	r25, 0x00	; 0
    8a02:	80 e8       	ldi	r24, 0x80	; 128
    8a04:	14 c0       	rjmp	.+40     	; 0x8a2e <strtod+0xc4>
    8a06:	70 e0       	ldi	r23, 0x00	; 0
    8a08:	90 e0       	ldi	r25, 0x00	; 0
    8a0a:	80 e8       	ldi	r24, 0x80	; 128
    8a0c:	6f ef       	ldi	r22, 0xFF	; 255
    8a0e:	08 c1       	rjmp	.+528    	; 0x8c20 <strtod+0x2b6>
    8a10:	c8 01       	movw	r24, r16
    8a12:	61 e0       	ldi	r22, 0x01	; 1
    8a14:	7e e1       	ldi	r23, 0x1E	; 30
    8a16:	43 e0       	ldi	r20, 0x03	; 3
    8a18:	50 e0       	ldi	r21, 0x00	; 0
    8a1a:	0e 94 21 47 	call	0x8e42	; 0x8e42 <strncasecmp_P>
    8a1e:	89 2b       	or	r24, r25
    8a20:	69 f4       	brne	.+26     	; 0x8a3c <strtod+0xd2>
    8a22:	a1 14       	cp	r10, r1
    8a24:	b1 04       	cpc	r11, r1
    8a26:	29 f4       	brne	.+10     	; 0x8a32 <strtod+0xc8>
    8a28:	70 e0       	ldi	r23, 0x00	; 0
    8a2a:	90 e0       	ldi	r25, 0x00	; 0
    8a2c:	80 ec       	ldi	r24, 0xC0	; 192
    8a2e:	6f e7       	ldi	r22, 0x7F	; 127
    8a30:	f7 c0       	rjmp	.+494    	; 0x8c20 <strtod+0x2b6>
    8a32:	22 96       	adiw	r28, 0x02	; 2
    8a34:	f5 01       	movw	r30, r10
    8a36:	c0 83       	st	Z, r28
    8a38:	d1 83       	std	Z+1, r29	; 0x01
    8a3a:	f6 cf       	rjmp	.-20     	; 0x8a28 <strtod+0xbe>
    8a3c:	88 24       	eor	r8, r8
    8a3e:	99 24       	eor	r9, r9
    8a40:	40 e0       	ldi	r20, 0x00	; 0
    8a42:	50 e0       	ldi	r21, 0x00	; 0
    8a44:	60 e0       	ldi	r22, 0x00	; 0
    8a46:	70 e0       	ldi	r23, 0x00	; 0
    8a48:	ef 2d       	mov	r30, r15
    8a4a:	e0 53       	subi	r30, 0x30	; 48
    8a4c:	ea 30       	cpi	r30, 0x0A	; 10
    8a4e:	a0 f5       	brcc	.+104    	; 0x8ab8 <strtod+0x14e>
    8a50:	f2 e0       	ldi	r31, 0x02	; 2
    8a52:	ef 2a       	or	r14, r31
    8a54:	8e 2d       	mov	r24, r14
    8a56:	90 e0       	ldi	r25, 0x00	; 0
    8a58:	9c 01       	movw	r18, r24
    8a5a:	28 70       	andi	r18, 0x08	; 8
    8a5c:	30 70       	andi	r19, 0x00	; 0
    8a5e:	e2 fe       	sbrs	r14, 2
    8a60:	06 c0       	rjmp	.+12     	; 0x8a6e <strtod+0x104>
    8a62:	23 2b       	or	r18, r19
    8a64:	79 f5       	brne	.+94     	; 0x8ac4 <strtod+0x15a>
    8a66:	08 94       	sec
    8a68:	81 1c       	adc	r8, r1
    8a6a:	91 1c       	adc	r9, r1
    8a6c:	2b c0       	rjmp	.+86     	; 0x8ac4 <strtod+0x15a>
    8a6e:	23 2b       	or	r18, r19
    8a70:	19 f0       	breq	.+6      	; 0x8a78 <strtod+0x10e>
    8a72:	08 94       	sec
    8a74:	81 08       	sbc	r8, r1
    8a76:	91 08       	sbc	r9, r1
    8a78:	db 01       	movw	r26, r22
    8a7a:	ca 01       	movw	r24, r20
    8a7c:	12 e0       	ldi	r17, 0x02	; 2
    8a7e:	88 0f       	add	r24, r24
    8a80:	99 1f       	adc	r25, r25
    8a82:	aa 1f       	adc	r26, r26
    8a84:	bb 1f       	adc	r27, r27
    8a86:	1a 95       	dec	r17
    8a88:	d1 f7       	brne	.-12     	; 0x8a7e <strtod+0x114>
    8a8a:	48 0f       	add	r20, r24
    8a8c:	59 1f       	adc	r21, r25
    8a8e:	6a 1f       	adc	r22, r26
    8a90:	7b 1f       	adc	r23, r27
    8a92:	44 0f       	add	r20, r20
    8a94:	55 1f       	adc	r21, r21
    8a96:	66 1f       	adc	r22, r22
    8a98:	77 1f       	adc	r23, r23
    8a9a:	4e 0f       	add	r20, r30
    8a9c:	51 1d       	adc	r21, r1
    8a9e:	61 1d       	adc	r22, r1
    8aa0:	71 1d       	adc	r23, r1
    8aa2:	48 39       	cpi	r20, 0x98	; 152
    8aa4:	29 e9       	ldi	r18, 0x99	; 153
    8aa6:	52 07       	cpc	r21, r18
    8aa8:	29 e9       	ldi	r18, 0x99	; 153
    8aaa:	62 07       	cpc	r22, r18
    8aac:	29 e1       	ldi	r18, 0x19	; 25
    8aae:	72 07       	cpc	r23, r18
    8ab0:	48 f0       	brcs	.+18     	; 0x8ac4 <strtod+0x15a>
    8ab2:	84 e0       	ldi	r24, 0x04	; 4
    8ab4:	e8 2a       	or	r14, r24
    8ab6:	06 c0       	rjmp	.+12     	; 0x8ac4 <strtod+0x15a>
    8ab8:	ee 3f       	cpi	r30, 0xFE	; 254
    8aba:	31 f4       	brne	.+12     	; 0x8ac8 <strtod+0x15e>
    8abc:	e3 fc       	sbrc	r14, 3
    8abe:	39 c0       	rjmp	.+114    	; 0x8b32 <strtod+0x1c8>
    8ac0:	98 e0       	ldi	r25, 0x08	; 8
    8ac2:	e9 2a       	or	r14, r25
    8ac4:	f9 90       	ld	r15, Y+
    8ac6:	c0 cf       	rjmp	.-128    	; 0x8a48 <strtod+0xde>
    8ac8:	e5 33       	cpi	r30, 0x35	; 53
    8aca:	11 f0       	breq	.+4      	; 0x8ad0 <strtod+0x166>
    8acc:	e5 31       	cpi	r30, 0x15	; 21
    8ace:	89 f5       	brne	.+98     	; 0x8b32 <strtod+0x1c8>
    8ad0:	29 91       	ld	r18, Y+
    8ad2:	2d 32       	cpi	r18, 0x2D	; 45
    8ad4:	19 f4       	brne	.+6      	; 0x8adc <strtod+0x172>
    8ad6:	e0 e1       	ldi	r30, 0x10	; 16
    8ad8:	ee 2a       	or	r14, r30
    8ada:	05 c0       	rjmp	.+10     	; 0x8ae6 <strtod+0x17c>
    8adc:	2b 32       	cpi	r18, 0x2B	; 43
    8ade:	19 f0       	breq	.+6      	; 0x8ae6 <strtod+0x17c>
    8ae0:	81 e0       	ldi	r24, 0x01	; 1
    8ae2:	90 e0       	ldi	r25, 0x00	; 0
    8ae4:	03 c0       	rjmp	.+6      	; 0x8aec <strtod+0x182>
    8ae6:	29 91       	ld	r18, Y+
    8ae8:	82 e0       	ldi	r24, 0x02	; 2
    8aea:	90 e0       	ldi	r25, 0x00	; 0
    8aec:	e2 2f       	mov	r30, r18
    8aee:	e0 53       	subi	r30, 0x30	; 48
    8af0:	ea 30       	cpi	r30, 0x0A	; 10
    8af2:	18 f0       	brcs	.+6      	; 0x8afa <strtod+0x190>
    8af4:	c8 1b       	sub	r28, r24
    8af6:	d9 0b       	sbc	r29, r25
    8af8:	1c c0       	rjmp	.+56     	; 0x8b32 <strtod+0x1c8>
    8afa:	20 e0       	ldi	r18, 0x00	; 0
    8afc:	30 e0       	ldi	r19, 0x00	; 0
    8afe:	fc e0       	ldi	r31, 0x0C	; 12
    8b00:	20 38       	cpi	r18, 0x80	; 128
    8b02:	3f 07       	cpc	r19, r31
    8b04:	5c f4       	brge	.+22     	; 0x8b1c <strtod+0x1b2>
    8b06:	c9 01       	movw	r24, r18
    8b08:	88 0f       	add	r24, r24
    8b0a:	99 1f       	adc	r25, r25
    8b0c:	88 0f       	add	r24, r24
    8b0e:	99 1f       	adc	r25, r25
    8b10:	28 0f       	add	r18, r24
    8b12:	39 1f       	adc	r19, r25
    8b14:	22 0f       	add	r18, r18
    8b16:	33 1f       	adc	r19, r19
    8b18:	2e 0f       	add	r18, r30
    8b1a:	31 1d       	adc	r19, r1
    8b1c:	e9 91       	ld	r30, Y+
    8b1e:	e0 53       	subi	r30, 0x30	; 48
    8b20:	ea 30       	cpi	r30, 0x0A	; 10
    8b22:	68 f3       	brcs	.-38     	; 0x8afe <strtod+0x194>
    8b24:	e4 fe       	sbrs	r14, 4
    8b26:	03 c0       	rjmp	.+6      	; 0x8b2e <strtod+0x1c4>
    8b28:	30 95       	com	r19
    8b2a:	21 95       	neg	r18
    8b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    8b2e:	82 0e       	add	r8, r18
    8b30:	93 1e       	adc	r9, r19
    8b32:	ce 2c       	mov	r12, r14
    8b34:	dd 24       	eor	r13, r13
    8b36:	e1 fe       	sbrs	r14, 1
    8b38:	07 c0       	rjmp	.+14     	; 0x8b48 <strtod+0x1de>
    8b3a:	a1 14       	cp	r10, r1
    8b3c:	b1 04       	cpc	r11, r1
    8b3e:	21 f0       	breq	.+8      	; 0x8b48 <strtod+0x1de>
    8b40:	21 97       	sbiw	r28, 0x01	; 1
    8b42:	f5 01       	movw	r30, r10
    8b44:	c0 83       	st	Z, r28
    8b46:	d1 83       	std	Z+1, r29	; 0x01
    8b48:	cb 01       	movw	r24, r22
    8b4a:	ba 01       	movw	r22, r20
    8b4c:	0e 94 4a 41 	call	0x8294	; 0x8294 <__floatunsisf>
    8b50:	7b 01       	movw	r14, r22
    8b52:	8c 01       	movw	r16, r24
    8b54:	f3 e0       	ldi	r31, 0x03	; 3
    8b56:	cf 22       	and	r12, r31
    8b58:	dd 24       	eor	r13, r13
    8b5a:	23 e0       	ldi	r18, 0x03	; 3
    8b5c:	c2 16       	cp	r12, r18
    8b5e:	d1 04       	cpc	r13, r1
    8b60:	21 f4       	brne	.+8      	; 0x8b6a <strtod+0x200>
    8b62:	17 fb       	bst	r17, 7
    8b64:	10 95       	com	r17
    8b66:	17 f9       	bld	r17, 7
    8b68:	10 95       	com	r17
    8b6a:	57 01       	movw	r10, r14
    8b6c:	68 01       	movw	r12, r16
    8b6e:	c8 01       	movw	r24, r16
    8b70:	b7 01       	movw	r22, r14
    8b72:	20 e0       	ldi	r18, 0x00	; 0
    8b74:	30 e0       	ldi	r19, 0x00	; 0
    8b76:	40 e0       	ldi	r20, 0x00	; 0
    8b78:	50 e0       	ldi	r21, 0x00	; 0
    8b7a:	0e 94 aa 40 	call	0x8154	; 0x8154 <__cmpsf2>
    8b7e:	88 23       	and	r24, r24
    8b80:	09 f4       	brne	.+2      	; 0x8b84 <strtod+0x21a>
    8b82:	4a c0       	rjmp	.+148    	; 0x8c18 <strtod+0x2ae>
    8b84:	97 fe       	sbrs	r9, 7
    8b86:	0d c0       	rjmp	.+26     	; 0x8ba2 <strtod+0x238>
    8b88:	28 e1       	ldi	r18, 0x18	; 24
    8b8a:	e2 2e       	mov	r14, r18
    8b8c:	2e e1       	ldi	r18, 0x1E	; 30
    8b8e:	f2 2e       	mov	r15, r18
    8b90:	90 94       	com	r9
    8b92:	81 94       	neg	r8
    8b94:	91 08       	sbc	r9, r1
    8b96:	93 94       	inc	r9
    8b98:	c0 e2       	ldi	r28, 0x20	; 32
    8b9a:	d0 e0       	ldi	r29, 0x00	; 0
    8b9c:	00 e0       	ldi	r16, 0x00	; 0
    8b9e:	10 e0       	ldi	r17, 0x00	; 0
    8ba0:	12 c0       	rjmp	.+36     	; 0x8bc6 <strtod+0x25c>
    8ba2:	90 e3       	ldi	r25, 0x30	; 48
    8ba4:	e9 2e       	mov	r14, r25
    8ba6:	9e e1       	ldi	r25, 0x1E	; 30
    8ba8:	f9 2e       	mov	r15, r25
    8baa:	f6 cf       	rjmp	.-20     	; 0x8b98 <strtod+0x22e>
    8bac:	f7 01       	movw	r30, r14
    8bae:	25 91       	lpm	r18, Z+
    8bb0:	35 91       	lpm	r19, Z+
    8bb2:	45 91       	lpm	r20, Z+
    8bb4:	54 91       	lpm	r21, Z+
    8bb6:	c6 01       	movw	r24, r12
    8bb8:	b5 01       	movw	r22, r10
    8bba:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <__mulsf3>
    8bbe:	5b 01       	movw	r10, r22
    8bc0:	6c 01       	movw	r12, r24
    8bc2:	8c 1a       	sub	r8, r28
    8bc4:	9d 0a       	sbc	r9, r29
    8bc6:	8c 16       	cp	r8, r28
    8bc8:	9d 06       	cpc	r9, r29
    8bca:	84 f7       	brge	.-32     	; 0x8bac <strtod+0x242>
    8bcc:	d5 95       	asr	r29
    8bce:	c7 95       	ror	r28
    8bd0:	0f 5f       	subi	r16, 0xFF	; 255
    8bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    8bd4:	06 30       	cpi	r16, 0x06	; 6
    8bd6:	11 05       	cpc	r17, r1
    8bd8:	29 f0       	breq	.+10     	; 0x8be4 <strtod+0x27a>
    8bda:	8c ef       	ldi	r24, 0xFC	; 252
    8bdc:	9f ef       	ldi	r25, 0xFF	; 255
    8bde:	e8 0e       	add	r14, r24
    8be0:	f9 1e       	adc	r15, r25
    8be2:	f1 cf       	rjmp	.-30     	; 0x8bc6 <strtod+0x25c>
    8be4:	c5 01       	movw	r24, r10
    8be6:	d6 01       	movw	r26, r12
    8be8:	7c 01       	movw	r14, r24
    8bea:	8d 01       	movw	r16, r26
    8bec:	8c 2d       	mov	r24, r12
    8bee:	88 0f       	add	r24, r24
    8bf0:	8d 2d       	mov	r24, r13
    8bf2:	88 1f       	adc	r24, r24
    8bf4:	8f 3f       	cpi	r24, 0xFF	; 255
    8bf6:	51 f0       	breq	.+20     	; 0x8c0c <strtod+0x2a2>
    8bf8:	c6 01       	movw	r24, r12
    8bfa:	b5 01       	movw	r22, r10
    8bfc:	20 e0       	ldi	r18, 0x00	; 0
    8bfe:	30 e0       	ldi	r19, 0x00	; 0
    8c00:	40 e0       	ldi	r20, 0x00	; 0
    8c02:	50 e0       	ldi	r21, 0x00	; 0
    8c04:	0e 94 aa 40 	call	0x8154	; 0x8154 <__cmpsf2>
    8c08:	88 23       	and	r24, r24
    8c0a:	31 f4       	brne	.+12     	; 0x8c18 <strtod+0x2ae>
    8c0c:	82 e2       	ldi	r24, 0x22	; 34
    8c0e:	90 e0       	ldi	r25, 0x00	; 0
    8c10:	80 93 14 25 	sts	0x2514, r24
    8c14:	90 93 15 25 	sts	0x2515, r25
    8c18:	7e 2d       	mov	r23, r14
    8c1a:	9f 2d       	mov	r25, r15
    8c1c:	80 2f       	mov	r24, r16
    8c1e:	61 2f       	mov	r22, r17
    8c20:	27 2f       	mov	r18, r23
    8c22:	39 2f       	mov	r19, r25
    8c24:	48 2f       	mov	r20, r24
    8c26:	56 2f       	mov	r21, r22
    8c28:	b9 01       	movw	r22, r18
    8c2a:	ca 01       	movw	r24, r20
    8c2c:	df 91       	pop	r29
    8c2e:	cf 91       	pop	r28
    8c30:	1f 91       	pop	r17
    8c32:	0f 91       	pop	r16
    8c34:	ff 90       	pop	r15
    8c36:	ef 90       	pop	r14
    8c38:	df 90       	pop	r13
    8c3a:	cf 90       	pop	r12
    8c3c:	bf 90       	pop	r11
    8c3e:	af 90       	pop	r10
    8c40:	9f 90       	pop	r9
    8c42:	8f 90       	pop	r8
    8c44:	08 95       	ret

00008c46 <atoi>:
    8c46:	fc 01       	movw	r30, r24
    8c48:	88 27       	eor	r24, r24
    8c4a:	99 27       	eor	r25, r25
    8c4c:	e8 94       	clt
    8c4e:	21 91       	ld	r18, Z+
    8c50:	20 32       	cpi	r18, 0x20	; 32
    8c52:	e9 f3       	breq	.-6      	; 0x8c4e <atoi+0x8>
    8c54:	29 30       	cpi	r18, 0x09	; 9
    8c56:	10 f0       	brcs	.+4      	; 0x8c5c <atoi+0x16>
    8c58:	2e 30       	cpi	r18, 0x0E	; 14
    8c5a:	c8 f3       	brcs	.-14     	; 0x8c4e <atoi+0x8>
    8c5c:	2b 32       	cpi	r18, 0x2B	; 43
    8c5e:	41 f0       	breq	.+16     	; 0x8c70 <atoi+0x2a>
    8c60:	2d 32       	cpi	r18, 0x2D	; 45
    8c62:	39 f4       	brne	.+14     	; 0x8c72 <atoi+0x2c>
    8c64:	68 94       	set
    8c66:	04 c0       	rjmp	.+8      	; 0x8c70 <atoi+0x2a>
    8c68:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <__mulhi_const_10>
    8c6c:	82 0f       	add	r24, r18
    8c6e:	91 1d       	adc	r25, r1
    8c70:	21 91       	ld	r18, Z+
    8c72:	20 53       	subi	r18, 0x30	; 48
    8c74:	2a 30       	cpi	r18, 0x0A	; 10
    8c76:	c0 f3       	brcs	.-16     	; 0x8c68 <atoi+0x22>
    8c78:	1e f4       	brtc	.+6      	; 0x8c80 <atoi+0x3a>
    8c7a:	90 95       	com	r25
    8c7c:	81 95       	neg	r24
    8c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    8c80:	08 95       	ret

00008c82 <__ftoa_engine>:
    8c82:	28 30       	cpi	r18, 0x08	; 8
    8c84:	08 f0       	brcs	.+2      	; 0x8c88 <__ftoa_engine+0x6>
    8c86:	27 e0       	ldi	r18, 0x07	; 7
    8c88:	33 27       	eor	r19, r19
    8c8a:	da 01       	movw	r26, r20
    8c8c:	99 0f       	add	r25, r25
    8c8e:	31 1d       	adc	r19, r1
    8c90:	87 fd       	sbrc	r24, 7
    8c92:	91 60       	ori	r25, 0x01	; 1
    8c94:	00 96       	adiw	r24, 0x00	; 0
    8c96:	61 05       	cpc	r22, r1
    8c98:	71 05       	cpc	r23, r1
    8c9a:	39 f4       	brne	.+14     	; 0x8caa <__ftoa_engine+0x28>
    8c9c:	32 60       	ori	r19, 0x02	; 2
    8c9e:	2e 5f       	subi	r18, 0xFE	; 254
    8ca0:	3d 93       	st	X+, r19
    8ca2:	30 e3       	ldi	r19, 0x30	; 48
    8ca4:	2a 95       	dec	r18
    8ca6:	e1 f7       	brne	.-8      	; 0x8ca0 <__ftoa_engine+0x1e>
    8ca8:	08 95       	ret
    8caa:	9f 3f       	cpi	r25, 0xFF	; 255
    8cac:	30 f0       	brcs	.+12     	; 0x8cba <__ftoa_engine+0x38>
    8cae:	80 38       	cpi	r24, 0x80	; 128
    8cb0:	71 05       	cpc	r23, r1
    8cb2:	61 05       	cpc	r22, r1
    8cb4:	09 f0       	breq	.+2      	; 0x8cb8 <__ftoa_engine+0x36>
    8cb6:	3c 5f       	subi	r19, 0xFC	; 252
    8cb8:	3c 5f       	subi	r19, 0xFC	; 252
    8cba:	3d 93       	st	X+, r19
    8cbc:	91 30       	cpi	r25, 0x01	; 1
    8cbe:	08 f0       	brcs	.+2      	; 0x8cc2 <__ftoa_engine+0x40>
    8cc0:	80 68       	ori	r24, 0x80	; 128
    8cc2:	91 1d       	adc	r25, r1
    8cc4:	df 93       	push	r29
    8cc6:	cf 93       	push	r28
    8cc8:	1f 93       	push	r17
    8cca:	0f 93       	push	r16
    8ccc:	ff 92       	push	r15
    8cce:	ef 92       	push	r14
    8cd0:	19 2f       	mov	r17, r25
    8cd2:	98 7f       	andi	r25, 0xF8	; 248
    8cd4:	96 95       	lsr	r25
    8cd6:	e9 2f       	mov	r30, r25
    8cd8:	96 95       	lsr	r25
    8cda:	96 95       	lsr	r25
    8cdc:	e9 0f       	add	r30, r25
    8cde:	ff 27       	eor	r31, r31
    8ce0:	e2 57       	subi	r30, 0x72	; 114
    8ce2:	f1 4e       	sbci	r31, 0xE1	; 225
    8ce4:	99 27       	eor	r25, r25
    8ce6:	33 27       	eor	r19, r19
    8ce8:	ee 24       	eor	r14, r14
    8cea:	ff 24       	eor	r15, r15
    8cec:	a7 01       	movw	r20, r14
    8cee:	e7 01       	movw	r28, r14
    8cf0:	05 90       	lpm	r0, Z+
    8cf2:	08 94       	sec
    8cf4:	07 94       	ror	r0
    8cf6:	28 f4       	brcc	.+10     	; 0x8d02 <__ftoa_engine+0x80>
    8cf8:	36 0f       	add	r19, r22
    8cfa:	e7 1e       	adc	r14, r23
    8cfc:	f8 1e       	adc	r15, r24
    8cfe:	49 1f       	adc	r20, r25
    8d00:	51 1d       	adc	r21, r1
    8d02:	66 0f       	add	r22, r22
    8d04:	77 1f       	adc	r23, r23
    8d06:	88 1f       	adc	r24, r24
    8d08:	99 1f       	adc	r25, r25
    8d0a:	06 94       	lsr	r0
    8d0c:	a1 f7       	brne	.-24     	; 0x8cf6 <__ftoa_engine+0x74>
    8d0e:	05 90       	lpm	r0, Z+
    8d10:	07 94       	ror	r0
    8d12:	28 f4       	brcc	.+10     	; 0x8d1e <__ftoa_engine+0x9c>
    8d14:	e7 0e       	add	r14, r23
    8d16:	f8 1e       	adc	r15, r24
    8d18:	49 1f       	adc	r20, r25
    8d1a:	56 1f       	adc	r21, r22
    8d1c:	c1 1d       	adc	r28, r1
    8d1e:	77 0f       	add	r23, r23
    8d20:	88 1f       	adc	r24, r24
    8d22:	99 1f       	adc	r25, r25
    8d24:	66 1f       	adc	r22, r22
    8d26:	06 94       	lsr	r0
    8d28:	a1 f7       	brne	.-24     	; 0x8d12 <__ftoa_engine+0x90>
    8d2a:	05 90       	lpm	r0, Z+
    8d2c:	07 94       	ror	r0
    8d2e:	28 f4       	brcc	.+10     	; 0x8d3a <__ftoa_engine+0xb8>
    8d30:	f8 0e       	add	r15, r24
    8d32:	49 1f       	adc	r20, r25
    8d34:	56 1f       	adc	r21, r22
    8d36:	c7 1f       	adc	r28, r23
    8d38:	d1 1d       	adc	r29, r1
    8d3a:	88 0f       	add	r24, r24
    8d3c:	99 1f       	adc	r25, r25
    8d3e:	66 1f       	adc	r22, r22
    8d40:	77 1f       	adc	r23, r23
    8d42:	06 94       	lsr	r0
    8d44:	a1 f7       	brne	.-24     	; 0x8d2e <__ftoa_engine+0xac>
    8d46:	05 90       	lpm	r0, Z+
    8d48:	07 94       	ror	r0
    8d4a:	20 f4       	brcc	.+8      	; 0x8d54 <__ftoa_engine+0xd2>
    8d4c:	49 0f       	add	r20, r25
    8d4e:	56 1f       	adc	r21, r22
    8d50:	c7 1f       	adc	r28, r23
    8d52:	d8 1f       	adc	r29, r24
    8d54:	99 0f       	add	r25, r25
    8d56:	66 1f       	adc	r22, r22
    8d58:	77 1f       	adc	r23, r23
    8d5a:	88 1f       	adc	r24, r24
    8d5c:	06 94       	lsr	r0
    8d5e:	a9 f7       	brne	.-22     	; 0x8d4a <__ftoa_engine+0xc8>
    8d60:	84 91       	lpm	r24, Z+
    8d62:	10 95       	com	r17
    8d64:	17 70       	andi	r17, 0x07	; 7
    8d66:	41 f0       	breq	.+16     	; 0x8d78 <__ftoa_engine+0xf6>
    8d68:	d6 95       	lsr	r29
    8d6a:	c7 95       	ror	r28
    8d6c:	57 95       	ror	r21
    8d6e:	47 95       	ror	r20
    8d70:	f7 94       	ror	r15
    8d72:	e7 94       	ror	r14
    8d74:	1a 95       	dec	r17
    8d76:	c1 f7       	brne	.-16     	; 0x8d68 <__ftoa_engine+0xe6>
    8d78:	e4 e3       	ldi	r30, 0x34	; 52
    8d7a:	fe e1       	ldi	r31, 0x1E	; 30
    8d7c:	68 94       	set
    8d7e:	15 90       	lpm	r1, Z+
    8d80:	15 91       	lpm	r17, Z+
    8d82:	35 91       	lpm	r19, Z+
    8d84:	65 91       	lpm	r22, Z+
    8d86:	95 91       	lpm	r25, Z+
    8d88:	05 90       	lpm	r0, Z+
    8d8a:	7f e2       	ldi	r23, 0x2F	; 47
    8d8c:	73 95       	inc	r23
    8d8e:	e1 18       	sub	r14, r1
    8d90:	f1 0a       	sbc	r15, r17
    8d92:	43 0b       	sbc	r20, r19
    8d94:	56 0b       	sbc	r21, r22
    8d96:	c9 0b       	sbc	r28, r25
    8d98:	d0 09       	sbc	r29, r0
    8d9a:	c0 f7       	brcc	.-16     	; 0x8d8c <__ftoa_engine+0x10a>
    8d9c:	e1 0c       	add	r14, r1
    8d9e:	f1 1e       	adc	r15, r17
    8da0:	43 1f       	adc	r20, r19
    8da2:	56 1f       	adc	r21, r22
    8da4:	c9 1f       	adc	r28, r25
    8da6:	d0 1d       	adc	r29, r0
    8da8:	7e f4       	brtc	.+30     	; 0x8dc8 <__ftoa_engine+0x146>
    8daa:	70 33       	cpi	r23, 0x30	; 48
    8dac:	11 f4       	brne	.+4      	; 0x8db2 <__ftoa_engine+0x130>
    8dae:	8a 95       	dec	r24
    8db0:	e6 cf       	rjmp	.-52     	; 0x8d7e <__ftoa_engine+0xfc>
    8db2:	e8 94       	clt
    8db4:	01 50       	subi	r16, 0x01	; 1
    8db6:	30 f0       	brcs	.+12     	; 0x8dc4 <__ftoa_engine+0x142>
    8db8:	08 0f       	add	r16, r24
    8dba:	0a f4       	brpl	.+2      	; 0x8dbe <__ftoa_engine+0x13c>
    8dbc:	00 27       	eor	r16, r16
    8dbe:	02 17       	cp	r16, r18
    8dc0:	08 f4       	brcc	.+2      	; 0x8dc4 <__ftoa_engine+0x142>
    8dc2:	20 2f       	mov	r18, r16
    8dc4:	23 95       	inc	r18
    8dc6:	02 2f       	mov	r16, r18
    8dc8:	7a 33       	cpi	r23, 0x3A	; 58
    8dca:	28 f0       	brcs	.+10     	; 0x8dd6 <__ftoa_engine+0x154>
    8dcc:	79 e3       	ldi	r23, 0x39	; 57
    8dce:	7d 93       	st	X+, r23
    8dd0:	2a 95       	dec	r18
    8dd2:	e9 f7       	brne	.-6      	; 0x8dce <__ftoa_engine+0x14c>
    8dd4:	10 c0       	rjmp	.+32     	; 0x8df6 <__ftoa_engine+0x174>
    8dd6:	7d 93       	st	X+, r23
    8dd8:	2a 95       	dec	r18
    8dda:	89 f6       	brne	.-94     	; 0x8d7e <__ftoa_engine+0xfc>
    8ddc:	06 94       	lsr	r0
    8dde:	97 95       	ror	r25
    8de0:	67 95       	ror	r22
    8de2:	37 95       	ror	r19
    8de4:	17 95       	ror	r17
    8de6:	17 94       	ror	r1
    8de8:	e1 18       	sub	r14, r1
    8dea:	f1 0a       	sbc	r15, r17
    8dec:	43 0b       	sbc	r20, r19
    8dee:	56 0b       	sbc	r21, r22
    8df0:	c9 0b       	sbc	r28, r25
    8df2:	d0 09       	sbc	r29, r0
    8df4:	98 f0       	brcs	.+38     	; 0x8e1c <__ftoa_engine+0x19a>
    8df6:	23 95       	inc	r18
    8df8:	7e 91       	ld	r23, -X
    8dfa:	73 95       	inc	r23
    8dfc:	7a 33       	cpi	r23, 0x3A	; 58
    8dfe:	08 f0       	brcs	.+2      	; 0x8e02 <__ftoa_engine+0x180>
    8e00:	70 e3       	ldi	r23, 0x30	; 48
    8e02:	7c 93       	st	X, r23
    8e04:	20 13       	cpse	r18, r16
    8e06:	b8 f7       	brcc	.-18     	; 0x8df6 <__ftoa_engine+0x174>
    8e08:	7e 91       	ld	r23, -X
    8e0a:	70 61       	ori	r23, 0x10	; 16
    8e0c:	7d 93       	st	X+, r23
    8e0e:	30 f0       	brcs	.+12     	; 0x8e1c <__ftoa_engine+0x19a>
    8e10:	83 95       	inc	r24
    8e12:	71 e3       	ldi	r23, 0x31	; 49
    8e14:	7d 93       	st	X+, r23
    8e16:	70 e3       	ldi	r23, 0x30	; 48
    8e18:	2a 95       	dec	r18
    8e1a:	e1 f7       	brne	.-8      	; 0x8e14 <__ftoa_engine+0x192>
    8e1c:	11 24       	eor	r1, r1
    8e1e:	ef 90       	pop	r14
    8e20:	ff 90       	pop	r15
    8e22:	0f 91       	pop	r16
    8e24:	1f 91       	pop	r17
    8e26:	cf 91       	pop	r28
    8e28:	df 91       	pop	r29
    8e2a:	99 27       	eor	r25, r25
    8e2c:	87 fd       	sbrc	r24, 7
    8e2e:	90 95       	com	r25
    8e30:	08 95       	ret

00008e32 <isspace>:
    8e32:	91 11       	cpse	r25, r1
    8e34:	21 c1       	rjmp	.+578    	; 0x9078 <__ctype_isfalse>
    8e36:	80 32       	cpi	r24, 0x20	; 32
    8e38:	19 f0       	breq	.+6      	; 0x8e40 <isspace+0xe>
    8e3a:	89 50       	subi	r24, 0x09	; 9
    8e3c:	85 50       	subi	r24, 0x05	; 5
    8e3e:	d0 f7       	brcc	.-12     	; 0x8e34 <isspace+0x2>
    8e40:	08 95       	ret

00008e42 <strncasecmp_P>:
    8e42:	fb 01       	movw	r30, r22
    8e44:	dc 01       	movw	r26, r24
    8e46:	41 50       	subi	r20, 0x01	; 1
    8e48:	50 40       	sbci	r21, 0x00	; 0
    8e4a:	88 f0       	brcs	.+34     	; 0x8e6e <strncasecmp_P+0x2c>
    8e4c:	8d 91       	ld	r24, X+
    8e4e:	81 34       	cpi	r24, 0x41	; 65
    8e50:	1c f0       	brlt	.+6      	; 0x8e58 <strncasecmp_P+0x16>
    8e52:	8b 35       	cpi	r24, 0x5B	; 91
    8e54:	0c f4       	brge	.+2      	; 0x8e58 <strncasecmp_P+0x16>
    8e56:	80 5e       	subi	r24, 0xE0	; 224
    8e58:	65 91       	lpm	r22, Z+
    8e5a:	61 34       	cpi	r22, 0x41	; 65
    8e5c:	1c f0       	brlt	.+6      	; 0x8e64 <strncasecmp_P+0x22>
    8e5e:	6b 35       	cpi	r22, 0x5B	; 91
    8e60:	0c f4       	brge	.+2      	; 0x8e64 <strncasecmp_P+0x22>
    8e62:	60 5e       	subi	r22, 0xE0	; 224
    8e64:	86 1b       	sub	r24, r22
    8e66:	61 11       	cpse	r22, r1
    8e68:	71 f3       	breq	.-36     	; 0x8e46 <strncasecmp_P+0x4>
    8e6a:	99 0b       	sbc	r25, r25
    8e6c:	08 95       	ret
    8e6e:	88 1b       	sub	r24, r24
    8e70:	fc cf       	rjmp	.-8      	; 0x8e6a <strncasecmp_P+0x28>

00008e72 <strnlen_P>:
    8e72:	fc 01       	movw	r30, r24
    8e74:	05 90       	lpm	r0, Z+
    8e76:	61 50       	subi	r22, 0x01	; 1
    8e78:	70 40       	sbci	r23, 0x00	; 0
    8e7a:	01 10       	cpse	r0, r1
    8e7c:	d8 f7       	brcc	.-10     	; 0x8e74 <strnlen_P+0x2>
    8e7e:	80 95       	com	r24
    8e80:	90 95       	com	r25
    8e82:	8e 0f       	add	r24, r30
    8e84:	9f 1f       	adc	r25, r31
    8e86:	08 95       	ret

00008e88 <strnlen>:
    8e88:	fc 01       	movw	r30, r24
    8e8a:	61 50       	subi	r22, 0x01	; 1
    8e8c:	70 40       	sbci	r23, 0x00	; 0
    8e8e:	01 90       	ld	r0, Z+
    8e90:	01 10       	cpse	r0, r1
    8e92:	d8 f7       	brcc	.-10     	; 0x8e8a <strnlen+0x2>
    8e94:	80 95       	com	r24
    8e96:	90 95       	com	r25
    8e98:	8e 0f       	add	r24, r30
    8e9a:	9f 1f       	adc	r25, r31
    8e9c:	08 95       	ret

00008e9e <__mulhi_const_10>:
    8e9e:	7a e0       	ldi	r23, 0x0A	; 10
    8ea0:	97 9f       	mul	r25, r23
    8ea2:	90 2d       	mov	r25, r0
    8ea4:	87 9f       	mul	r24, r23
    8ea6:	80 2d       	mov	r24, r0
    8ea8:	91 0d       	add	r25, r1
    8eaa:	11 24       	eor	r1, r1
    8eac:	08 95       	ret

00008eae <clearerr>:
    8eae:	fc 01       	movw	r30, r24
    8eb0:	83 81       	ldd	r24, Z+3	; 0x03
    8eb2:	8f 7c       	andi	r24, 0xCF	; 207
    8eb4:	83 83       	std	Z+3, r24	; 0x03
    8eb6:	08 95       	ret

00008eb8 <fgets>:
    8eb8:	cf 92       	push	r12
    8eba:	df 92       	push	r13
    8ebc:	ef 92       	push	r14
    8ebe:	ff 92       	push	r15
    8ec0:	0f 93       	push	r16
    8ec2:	1f 93       	push	r17
    8ec4:	cf 93       	push	r28
    8ec6:	df 93       	push	r29
    8ec8:	7c 01       	movw	r14, r24
    8eca:	6a 01       	movw	r12, r20
    8ecc:	fa 01       	movw	r30, r20
    8ece:	83 81       	ldd	r24, Z+3	; 0x03
    8ed0:	80 ff       	sbrs	r24, 0
    8ed2:	19 c0       	rjmp	.+50     	; 0x8f06 <fgets+0x4e>
    8ed4:	16 16       	cp	r1, r22
    8ed6:	17 06       	cpc	r1, r23
    8ed8:	b4 f4       	brge	.+44     	; 0x8f06 <fgets+0x4e>
    8eda:	eb 01       	movw	r28, r22
    8edc:	21 97       	sbiw	r28, 0x01	; 1
    8ede:	87 01       	movw	r16, r14
    8ee0:	0d c0       	rjmp	.+26     	; 0x8efc <fgets+0x44>
    8ee2:	c6 01       	movw	r24, r12
    8ee4:	0e 94 3f 48 	call	0x907e	; 0x907e <fgetc>
    8ee8:	ff ef       	ldi	r31, 0xFF	; 255
    8eea:	8f 3f       	cpi	r24, 0xFF	; 255
    8eec:	9f 07       	cpc	r25, r31
    8eee:	59 f0       	breq	.+22     	; 0x8f06 <fgets+0x4e>
    8ef0:	f8 01       	movw	r30, r16
    8ef2:	81 93       	st	Z+, r24
    8ef4:	8f 01       	movw	r16, r30
    8ef6:	0a 97       	sbiw	r24, 0x0a	; 10
    8ef8:	19 f0       	breq	.+6      	; 0x8f00 <fgets+0x48>
    8efa:	21 97       	sbiw	r28, 0x01	; 1
    8efc:	20 97       	sbiw	r28, 0x00	; 0
    8efe:	89 f7       	brne	.-30     	; 0x8ee2 <fgets+0x2a>
    8f00:	f8 01       	movw	r30, r16
    8f02:	10 82       	st	Z, r1
    8f04:	02 c0       	rjmp	.+4      	; 0x8f0a <fgets+0x52>
    8f06:	ee 24       	eor	r14, r14
    8f08:	ff 24       	eor	r15, r15
    8f0a:	c7 01       	movw	r24, r14
    8f0c:	df 91       	pop	r29
    8f0e:	cf 91       	pop	r28
    8f10:	1f 91       	pop	r17
    8f12:	0f 91       	pop	r16
    8f14:	ff 90       	pop	r15
    8f16:	ef 90       	pop	r14
    8f18:	df 90       	pop	r13
    8f1a:	cf 90       	pop	r12
    8f1c:	08 95       	ret

00008f1e <fputc>:
    8f1e:	0f 93       	push	r16
    8f20:	1f 93       	push	r17
    8f22:	cf 93       	push	r28
    8f24:	df 93       	push	r29
    8f26:	8c 01       	movw	r16, r24
    8f28:	eb 01       	movw	r28, r22
    8f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    8f2c:	81 ff       	sbrs	r24, 1
    8f2e:	1b c0       	rjmp	.+54     	; 0x8f66 <fputc+0x48>
    8f30:	82 ff       	sbrs	r24, 2
    8f32:	0d c0       	rjmp	.+26     	; 0x8f4e <fputc+0x30>
    8f34:	2e 81       	ldd	r18, Y+6	; 0x06
    8f36:	3f 81       	ldd	r19, Y+7	; 0x07
    8f38:	8c 81       	ldd	r24, Y+4	; 0x04
    8f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    8f3c:	28 17       	cp	r18, r24
    8f3e:	39 07       	cpc	r19, r25
    8f40:	64 f4       	brge	.+24     	; 0x8f5a <fputc+0x3c>
    8f42:	e8 81       	ld	r30, Y
    8f44:	f9 81       	ldd	r31, Y+1	; 0x01
    8f46:	01 93       	st	Z+, r16
    8f48:	e8 83       	st	Y, r30
    8f4a:	f9 83       	std	Y+1, r31	; 0x01
    8f4c:	06 c0       	rjmp	.+12     	; 0x8f5a <fputc+0x3c>
    8f4e:	e8 85       	ldd	r30, Y+8	; 0x08
    8f50:	f9 85       	ldd	r31, Y+9	; 0x09
    8f52:	80 2f       	mov	r24, r16
    8f54:	19 95       	eicall
    8f56:	89 2b       	or	r24, r25
    8f58:	31 f4       	brne	.+12     	; 0x8f66 <fputc+0x48>
    8f5a:	8e 81       	ldd	r24, Y+6	; 0x06
    8f5c:	9f 81       	ldd	r25, Y+7	; 0x07
    8f5e:	01 96       	adiw	r24, 0x01	; 1
    8f60:	8e 83       	std	Y+6, r24	; 0x06
    8f62:	9f 83       	std	Y+7, r25	; 0x07
    8f64:	02 c0       	rjmp	.+4      	; 0x8f6a <fputc+0x4c>
    8f66:	0f ef       	ldi	r16, 0xFF	; 255
    8f68:	1f ef       	ldi	r17, 0xFF	; 255
    8f6a:	c8 01       	movw	r24, r16
    8f6c:	df 91       	pop	r29
    8f6e:	cf 91       	pop	r28
    8f70:	1f 91       	pop	r17
    8f72:	0f 91       	pop	r16
    8f74:	08 95       	ret

00008f76 <printf_P>:
    8f76:	df 93       	push	r29
    8f78:	cf 93       	push	r28
    8f7a:	cd b7       	in	r28, 0x3d	; 61
    8f7c:	de b7       	in	r29, 0x3e	; 62
    8f7e:	fe 01       	movw	r30, r28
    8f80:	36 96       	adiw	r30, 0x06	; 6
    8f82:	61 91       	ld	r22, Z+
    8f84:	71 91       	ld	r23, Z+
    8f86:	a0 91 10 25 	lds	r26, 0x2510
    8f8a:	b0 91 11 25 	lds	r27, 0x2511
    8f8e:	13 96       	adiw	r26, 0x03	; 3
    8f90:	8c 91       	ld	r24, X
    8f92:	13 97       	sbiw	r26, 0x03	; 3
    8f94:	88 60       	ori	r24, 0x08	; 8
    8f96:	13 96       	adiw	r26, 0x03	; 3
    8f98:	8c 93       	st	X, r24
    8f9a:	80 91 10 25 	lds	r24, 0x2510
    8f9e:	90 91 11 25 	lds	r25, 0x2511
    8fa2:	af 01       	movw	r20, r30
    8fa4:	0e 94 60 3c 	call	0x78c0	; 0x78c0 <vfprintf>
    8fa8:	e0 91 10 25 	lds	r30, 0x2510
    8fac:	f0 91 11 25 	lds	r31, 0x2511
    8fb0:	23 81       	ldd	r18, Z+3	; 0x03
    8fb2:	27 7f       	andi	r18, 0xF7	; 247
    8fb4:	23 83       	std	Z+3, r18	; 0x03
    8fb6:	cf 91       	pop	r28
    8fb8:	df 91       	pop	r29
    8fba:	08 95       	ret

00008fbc <__ultoa_invert>:
    8fbc:	fa 01       	movw	r30, r20
    8fbe:	aa 27       	eor	r26, r26
    8fc0:	28 30       	cpi	r18, 0x08	; 8
    8fc2:	51 f1       	breq	.+84     	; 0x9018 <__ultoa_invert+0x5c>
    8fc4:	20 31       	cpi	r18, 0x10	; 16
    8fc6:	81 f1       	breq	.+96     	; 0x9028 <__ultoa_invert+0x6c>
    8fc8:	e8 94       	clt
    8fca:	6f 93       	push	r22
    8fcc:	6e 7f       	andi	r22, 0xFE	; 254
    8fce:	6e 5f       	subi	r22, 0xFE	; 254
    8fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    8fd2:	8f 4f       	sbci	r24, 0xFF	; 255
    8fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    8fd6:	af 4f       	sbci	r26, 0xFF	; 255
    8fd8:	b1 e0       	ldi	r27, 0x01	; 1
    8fda:	3e d0       	rcall	.+124    	; 0x9058 <__ultoa_invert+0x9c>
    8fdc:	b4 e0       	ldi	r27, 0x04	; 4
    8fde:	3c d0       	rcall	.+120    	; 0x9058 <__ultoa_invert+0x9c>
    8fe0:	67 0f       	add	r22, r23
    8fe2:	78 1f       	adc	r23, r24
    8fe4:	89 1f       	adc	r24, r25
    8fe6:	9a 1f       	adc	r25, r26
    8fe8:	a1 1d       	adc	r26, r1
    8fea:	68 0f       	add	r22, r24
    8fec:	79 1f       	adc	r23, r25
    8fee:	8a 1f       	adc	r24, r26
    8ff0:	91 1d       	adc	r25, r1
    8ff2:	a1 1d       	adc	r26, r1
    8ff4:	6a 0f       	add	r22, r26
    8ff6:	71 1d       	adc	r23, r1
    8ff8:	81 1d       	adc	r24, r1
    8ffa:	91 1d       	adc	r25, r1
    8ffc:	a1 1d       	adc	r26, r1
    8ffe:	20 d0       	rcall	.+64     	; 0x9040 <__ultoa_invert+0x84>
    9000:	09 f4       	brne	.+2      	; 0x9004 <__ultoa_invert+0x48>
    9002:	68 94       	set
    9004:	3f 91       	pop	r19
    9006:	2a e0       	ldi	r18, 0x0A	; 10
    9008:	26 9f       	mul	r18, r22
    900a:	11 24       	eor	r1, r1
    900c:	30 19       	sub	r19, r0
    900e:	30 5d       	subi	r19, 0xD0	; 208
    9010:	31 93       	st	Z+, r19
    9012:	de f6       	brtc	.-74     	; 0x8fca <__ultoa_invert+0xe>
    9014:	cf 01       	movw	r24, r30
    9016:	08 95       	ret
    9018:	46 2f       	mov	r20, r22
    901a:	47 70       	andi	r20, 0x07	; 7
    901c:	40 5d       	subi	r20, 0xD0	; 208
    901e:	41 93       	st	Z+, r20
    9020:	b3 e0       	ldi	r27, 0x03	; 3
    9022:	0f d0       	rcall	.+30     	; 0x9042 <__ultoa_invert+0x86>
    9024:	c9 f7       	brne	.-14     	; 0x9018 <__ultoa_invert+0x5c>
    9026:	f6 cf       	rjmp	.-20     	; 0x9014 <__ultoa_invert+0x58>
    9028:	46 2f       	mov	r20, r22
    902a:	4f 70       	andi	r20, 0x0F	; 15
    902c:	40 5d       	subi	r20, 0xD0	; 208
    902e:	4a 33       	cpi	r20, 0x3A	; 58
    9030:	18 f0       	brcs	.+6      	; 0x9038 <__ultoa_invert+0x7c>
    9032:	49 5d       	subi	r20, 0xD9	; 217
    9034:	31 fd       	sbrc	r19, 1
    9036:	40 52       	subi	r20, 0x20	; 32
    9038:	41 93       	st	Z+, r20
    903a:	02 d0       	rcall	.+4      	; 0x9040 <__ultoa_invert+0x84>
    903c:	a9 f7       	brne	.-22     	; 0x9028 <__ultoa_invert+0x6c>
    903e:	ea cf       	rjmp	.-44     	; 0x9014 <__ultoa_invert+0x58>
    9040:	b4 e0       	ldi	r27, 0x04	; 4
    9042:	a6 95       	lsr	r26
    9044:	97 95       	ror	r25
    9046:	87 95       	ror	r24
    9048:	77 95       	ror	r23
    904a:	67 95       	ror	r22
    904c:	ba 95       	dec	r27
    904e:	c9 f7       	brne	.-14     	; 0x9042 <__ultoa_invert+0x86>
    9050:	00 97       	sbiw	r24, 0x00	; 0
    9052:	61 05       	cpc	r22, r1
    9054:	71 05       	cpc	r23, r1
    9056:	08 95       	ret
    9058:	9b 01       	movw	r18, r22
    905a:	ac 01       	movw	r20, r24
    905c:	0a 2e       	mov	r0, r26
    905e:	06 94       	lsr	r0
    9060:	57 95       	ror	r21
    9062:	47 95       	ror	r20
    9064:	37 95       	ror	r19
    9066:	27 95       	ror	r18
    9068:	ba 95       	dec	r27
    906a:	c9 f7       	brne	.-14     	; 0x905e <__ultoa_invert+0xa2>
    906c:	62 0f       	add	r22, r18
    906e:	73 1f       	adc	r23, r19
    9070:	84 1f       	adc	r24, r20
    9072:	95 1f       	adc	r25, r21
    9074:	a0 1d       	adc	r26, r0
    9076:	08 95       	ret

00009078 <__ctype_isfalse>:
    9078:	99 27       	eor	r25, r25
    907a:	88 27       	eor	r24, r24

0000907c <__ctype_istrue>:
    907c:	08 95       	ret

0000907e <fgetc>:
    907e:	cf 93       	push	r28
    9080:	df 93       	push	r29
    9082:	ec 01       	movw	r28, r24
    9084:	4b 81       	ldd	r20, Y+3	; 0x03
    9086:	40 ff       	sbrs	r20, 0
    9088:	1a c0       	rjmp	.+52     	; 0x90be <fgetc+0x40>
    908a:	46 ff       	sbrs	r20, 6
    908c:	0a c0       	rjmp	.+20     	; 0x90a2 <fgetc+0x24>
    908e:	4f 7b       	andi	r20, 0xBF	; 191
    9090:	4b 83       	std	Y+3, r20	; 0x03
    9092:	8e 81       	ldd	r24, Y+6	; 0x06
    9094:	9f 81       	ldd	r25, Y+7	; 0x07
    9096:	01 96       	adiw	r24, 0x01	; 1
    9098:	8e 83       	std	Y+6, r24	; 0x06
    909a:	9f 83       	std	Y+7, r25	; 0x07
    909c:	8a 81       	ldd	r24, Y+2	; 0x02
    909e:	28 2f       	mov	r18, r24
    90a0:	2b c0       	rjmp	.+86     	; 0x90f8 <fgetc+0x7a>
    90a2:	42 ff       	sbrs	r20, 2
    90a4:	13 c0       	rjmp	.+38     	; 0x90cc <fgetc+0x4e>
    90a6:	e8 81       	ld	r30, Y
    90a8:	f9 81       	ldd	r31, Y+1	; 0x01
    90aa:	80 81       	ld	r24, Z
    90ac:	28 2f       	mov	r18, r24
    90ae:	33 27       	eor	r19, r19
    90b0:	27 fd       	sbrc	r18, 7
    90b2:	30 95       	com	r19
    90b4:	21 15       	cp	r18, r1
    90b6:	31 05       	cpc	r19, r1
    90b8:	29 f4       	brne	.+10     	; 0x90c4 <fgetc+0x46>
    90ba:	40 62       	ori	r20, 0x20	; 32
    90bc:	4b 83       	std	Y+3, r20	; 0x03
    90be:	2f ef       	ldi	r18, 0xFF	; 255
    90c0:	3f ef       	ldi	r19, 0xFF	; 255
    90c2:	1b c0       	rjmp	.+54     	; 0x90fa <fgetc+0x7c>
    90c4:	31 96       	adiw	r30, 0x01	; 1
    90c6:	e8 83       	st	Y, r30
    90c8:	f9 83       	std	Y+1, r31	; 0x01
    90ca:	11 c0       	rjmp	.+34     	; 0x90ee <fgetc+0x70>
    90cc:	ea 85       	ldd	r30, Y+10	; 0x0a
    90ce:	fb 85       	ldd	r31, Y+11	; 0x0b
    90d0:	ce 01       	movw	r24, r28
    90d2:	19 95       	eicall
    90d4:	9c 01       	movw	r18, r24
    90d6:	97 ff       	sbrs	r25, 7
    90d8:	0a c0       	rjmp	.+20     	; 0x90ee <fgetc+0x70>
    90da:	9b 81       	ldd	r25, Y+3	; 0x03
    90dc:	2f 5f       	subi	r18, 0xFF	; 255
    90de:	3f 4f       	sbci	r19, 0xFF	; 255
    90e0:	11 f0       	breq	.+4      	; 0x90e6 <fgetc+0x68>
    90e2:	80 e2       	ldi	r24, 0x20	; 32
    90e4:	01 c0       	rjmp	.+2      	; 0x90e8 <fgetc+0x6a>
    90e6:	80 e1       	ldi	r24, 0x10	; 16
    90e8:	89 2b       	or	r24, r25
    90ea:	8b 83       	std	Y+3, r24	; 0x03
    90ec:	e8 cf       	rjmp	.-48     	; 0x90be <fgetc+0x40>
    90ee:	8e 81       	ldd	r24, Y+6	; 0x06
    90f0:	9f 81       	ldd	r25, Y+7	; 0x07
    90f2:	01 96       	adiw	r24, 0x01	; 1
    90f4:	8e 83       	std	Y+6, r24	; 0x06
    90f6:	9f 83       	std	Y+7, r25	; 0x07
    90f8:	30 e0       	ldi	r19, 0x00	; 0
    90fa:	c9 01       	movw	r24, r18
    90fc:	df 91       	pop	r29
    90fe:	cf 91       	pop	r28
    9100:	08 95       	ret

00009102 <_exit>:
    9102:	f8 94       	cli

00009104 <__stop_program>:
    9104:	ff cf       	rjmp	.-2      	; 0x9104 <__stop_program>
