
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007aee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00802000  00007aee  00007b82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000547  00802110  00802110  00007c92  2**0
                  ALLOC
  3 .debug_aranges 00000400  00000000  00000000  00007c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001041  00000000  00000000  00008092  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000d9d5  00000000  00000000  000090d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002fe3  00000000  00000000  00016aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004ea5  00000000  00000000  00019a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c10  00000000  00000000  0001e930  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000261d  00000000  00000000  0001f540  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003b70  00000000  00000000  00021b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  000256cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__ctors_end>
       4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
       8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
       c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      10:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      14:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      18:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      1c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      20:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      24:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      28:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      2c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      30:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      34:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      38:	0c 94 1b 1b 	jmp	0x3636	; 0x3636 <__vector_14>
      3c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      40:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      44:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      48:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      4c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      50:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      54:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      58:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      5c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      60:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      64:	0c 94 1f 27 	jmp	0x4e3e	; 0x4e3e <__vector_25>
      68:	0c 94 db 26 	jmp	0x4db6	; 0x4db6 <__vector_26>
      6c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      70:	0c 94 31 28 	jmp	0x5062	; 0x5062 <__vector_28>
      74:	0c 94 cd 27 	jmp	0x4f9a	; 0x4f9a <__vector_29>
      78:	0c 94 17 28 	jmp	0x502e	; 0x502e <__vector_30>
      7c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      80:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      84:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      88:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      8c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      90:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      94:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      98:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      9c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      a0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      a4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      a8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      ac:	0c 94 15 23 	jmp	0x462a	; 0x462a <__vector_43>
      b0:	0c 94 1f 23 	jmp	0x463e	; 0x463e <__vector_44>
      b4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      b8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      bc:	0c 94 47 1a 	jmp	0x348e	; 0x348e <__vector_47>
      c0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      c4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      c8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      cc:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      d0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      d4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      d8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      dc:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      e0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      e4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      e8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      ec:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      f0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      f4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      f8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      fc:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     100:	0c 94 29 23 	jmp	0x4652	; 0x4652 <__vector_64>
     104:	0c 94 33 23 	jmp	0x4666	; 0x4666 <__vector_65>
     108:	0c 94 ed 22 	jmp	0x45da	; 0x45da <__vector_66>
     10c:	0c 94 f7 22 	jmp	0x45ee	; 0x45ee <__vector_67>
     110:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     114:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     118:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     11c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     120:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     124:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     128:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     12c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     130:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     134:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__vector_77>
     138:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     13c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     140:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     144:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     148:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     14c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     150:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     154:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     158:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     15c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     160:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     164:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     168:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     16c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     170:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     174:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     178:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     17c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     180:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     184:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     188:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     18c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     190:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     194:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     198:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     19c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1a0:	0c 94 01 23 	jmp	0x4602	; 0x4602 <__vector_104>
     1a4:	0c 94 0b 23 	jmp	0x4616	; 0x4616 <__vector_105>
     1a8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1ac:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1b0:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__vector_108>
     1b4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1b8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1bc:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1c0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1c4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1c8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1cc:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1d0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1d4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1d8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1dc:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1e0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1e4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <__c.3946>:
     23b:	25 73 0a 00                                         %s..

0000023f <cfgMsgXaxis>:
     23f:	58 00                                               X.

00000241 <cfgMsgYaxis>:
     241:	59 00                                               Y.

00000243 <cfgMsgZaxis>:
     243:	5a 00                                               Z.

00000245 <cfgMsgAaxis>:
     245:	41 00                                               A.

00000247 <cfgMsgs>:
     247:	3f 02 41 02 43 02 45 02                             ?.A.C.E.

0000024f <configs_P>:
     24f:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25f:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26f:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27f:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28f:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29f:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2af:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bf:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cf:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2df:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2ef:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2ff:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30f:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31f:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32f:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33f:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34f:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35f:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36f:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37f:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38f:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

0000039d <__c.3759>:
     39d:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     3ad:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     3bd:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     3cd:	29 0a 0a 00                                         )...

000003d1 <__c.3757>:
     3d1:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     3e1:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     3f1:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000401 <__c.3755>:
     401:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     411:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     421:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

00000432 <__c.3753>:
     432:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     442:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     452:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

00000463 <__c.3751>:
     463:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     473:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     483:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     493:	6c 0a 00                                            l..

00000496 <__c.3749>:
     496:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     4a6:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     4b6:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     4c6:	6e 0a 00                                            n..

000004c9 <__c.3747>:
     4c9:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     4d9:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     4e9:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     4f9:	74 65 70 73 29 0a 00                                teps)..

00000500 <__c.3745>:
     500:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     510:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     520:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     530:	70 0a 00                                            p..

00000533 <__c.3743>:
     533:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     543:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     553:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     563:	73 74 65 70 73 29 0a 00                             steps)..

0000056b <__c.3741>:
     56b:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     57b:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     58b:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     59b:	73 74 65 70 73 29 0a 00                             steps)..

000005a3 <__c.3736>:
     5a3:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     5b3:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

000005c1 <__c.3722>:
     5c1:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     5d1:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     5e1:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

000005ec <__c.3720>:
     5ec:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     5fc:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     60c:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

00000616 <__c.3718>:
     616:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     626:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     636:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

00000640 <__c.3716>:
     640:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     650:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     660:	73 20 2d 2d 2d 0a 00                                s ---..

00000667 <__c.3714>:
     667:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     677:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     687:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

0000068f <__c.3718>:
     68f:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     69f:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     6af:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

000006bb <tgModeStringControl>:
     6bb:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

000006c8 <tgModeStringConfig>:
     6c8:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

000006d4 <tgModeStringGCode>:
     6d4:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

000006e0 <tgModeStringDirect>:
     6e0:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

000006ed <tgModeStrings>:
     6ed:	bb 06 c8 06 d4 06 e0 06                             ........

000006f5 <tgStatusMsg00>:
     6f5:	4f 4b 00                                            OK.

000006f8 <tgStatusMsg01>:
     6f8:	45 52 52 4f 52 00                                   ERROR.

000006fe <tgStatusMsg02>:
     6fe:	45 41 47 41 49 4e 00                                EAGAIN.

00000705 <tgStatusMsg03>:
     705:	4e 4f 4f 50 00                                      NOOP.

0000070a <tgStatusMsg04>:
     70a:	45 6e 64 20 6f 66 20 6c 69 6e 65 00                 End of line.

00000716 <tgStatusMsg05>:
     716:	45 6e 64 20 6f 66 20 66 69 6c 65 00                 End of file.

00000722 <tgStatusMsg06>:
     722:	46 69 6c 65 20 6e 6f 74 20 6f 70 65 6e 00           File not open.

00000730 <tgStatusMsg07>:
     730:	4e 6f 20 73 75 63 68 20 64 65 76 69 63 65 00        No such device.

0000073f <tgStatusMsg08>:
     73f:	42 75 66 66 65 72 20 65 6d 70 74 79 00              Buffer empty.

0000074c <tgStatusMsg09>:
     74c:	42 75 66 66 65 72 20 66 75 6c 6c 20 2d 20 66 61     Buffer full - fa
     75c:	74 61 6c 00                                         tal.

00000760 <tgStatusMsg10>:
     760:	42 75 66 66 65 72 20 66 75 6c 6c 20 2d 20 6e 6f     Buffer full - no
     770:	6e 2d 66 61 74 61 6c 00                             n-fatal.

00000778 <tgStatusMsg11>:
     778:	51 55 49 54 00                                      QUIT.

0000077d <tgStatusMsg12>:
     77d:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 63 6f 6d     Unrecognized com
     78d:	6d 61 6e 64 00                                      mand.

00000792 <tgStatusMsg13>:
     792:	45 78 70 65 63 74 65 64 20 63 6f 6d 6d 61 6e 64     Expected command
     7a2:	20 6c 65 74 74 65 72 00                              letter.

000007aa <tgStatusMsg14>:
     7aa:	55 6e 73 75 70 70 6f 72 74 65 64 20 73 74 61 74     Unsupported stat
     7ba:	65 6d 65 6e 74 00                                   ement.

000007c0 <tgStatusMsg15>:
     7c0:	50 61 72 61 6d 65 74 65 72 20 6f 76 65 72 20 72     Parameter over r
     7d0:	61 6e 67 65 00                                      ange.

000007d5 <tgStatusMsg16>:
     7d5:	42 61 64 20 6e 75 6d 62 65 72 20 66 6f 72 6d 61     Bad number forma
     7e5:	74 00                                               t.

000007e7 <tgStatusMsg17>:
     7e7:	46 6c 6f 61 74 69 6e 67 20 70 6f 69 6e 74 20 65     Floating point e
     7f7:	72 72 6f 72 00                                      rror.

000007fc <tgStatusMsg18>:
     7fc:	4d 6f 74 69 6f 6e 20 63 6f 6e 74 72 6f 6c 20 65     Motion control e
     80c:	72 72 6f 72 00                                      rror.

00000811 <tgStatusMsg19>:
     811:	41 72 63 20 73 70 65 63 69 66 69 63 61 74 69 6f     Arc specificatio
     821:	6e 20 65 72 72 6f 72 00                             n error.

00000829 <tgStatusMsg20>:
     829:	5a 65 72 6f 20 6c 65 6e 67 74 68 20 6c 69 6e 65     Zero length line
	...

0000083a <tgStatusStrings>:
     83a:	f5 06 f8 06 fe 06 05 07 0a 07 16 07 22 07 30 07     ............".0.
     84a:	3f 07 4c 07 60 07 78 07 7d 07 92 07 aa 07 c0 07     ?.L.`.x.}.......
     85a:	d5 07 e7 07 fc 07 11 08 29 08                       ........).

00000864 <__c.4074>:
     864:	25 53 3a 20 25 73 0a 00                             %S: %s..

0000086c <__c.3969>:
     86c:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
     87c:	69 6c 65 0a 00                                      ile..

00000881 <__c.4032>:
     881:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

0000088f <__c.3945>:
     88f:	62 75 69 6c 64 20 32 30 39 00                       build 209.

00000899 <__c.3943>:
     899:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
     8a9:	25 53 0a 00                                         %S..

000008ad <bsel>:
     8ad:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

000008b8 <bscale>:
     8b8:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

000008c3 <readlnFuncs>:
     8c3:	8a 25 46 25 46 25 46 25 46 25 46 25 46 25 46 25     .%F%F%F%F%F%F%F%
     8d3:	d4 25 46 25 8a 25 46 25 46 25 8a 25 46 25 46 25     .%F%.%F%F%.%F%F%
     8e3:	46 25 46 25 46 25 46 25 46 25 46 25 46 25 46 25     F%F%F%F%F%F%F%F%
     8f3:	46 25 46 25 46 25 46 25 46 25 46 25 46 25 46 25     F%F%F%F%F%F%F%F%
     903:	46 25 46 25 46 25 46 25 46 25 46 25 46 25 46 25     F%F%F%F%F%F%F%F%
     913:	46 25 46 25 46 25 46 25 46 25 46 25 46 25 46 25     F%F%F%F%F%F%F%F%
     923:	46 25 46 25 46 25 46 25 46 25 46 25 46 25 46 25     F%F%F%F%F%F%F%F%
     933:	46 25 46 25 46 25 bd 25 46 25 46 25 46 25 46 25     F%F%F%.%F%F%F%F%
     943:	46 25 46 25 46 25 46 25 46 25 46 25 46 25 46 25     F%F%F%F%F%F%F%F%
     953:	46 25 46 25 46 25 46 25 46 25 46 25 46 25 46 25     F%F%F%F%F%F%F%F%
     963:	46 25 46 25 46 25 46 25 46 25 46 25 46 25 46 25     F%F%F%F%F%F%F%F%
     973:	46 25 46 25 46 25 46 25 46 25 46 25 46 25 46 25     F%F%F%F%F%F%F%F%
     983:	46 25 46 25 46 25 46 25 46 25 46 25 46 25 46 25     F%F%F%F%F%F%F%F%
     993:	46 25 46 25 46 25 46 25 46 25 46 25 46 25 46 25     F%F%F%F%F%F%F%F%
     9a3:	46 25 46 25 46 25 46 25 46 25 46 25 46 25 46 25     F%F%F%F%F%F%F%F%
     9b3:	46 25 46 25 46 25 46 25 46 25 46 25 46 25 d4 25     F%F%F%F%F%F%F%.%

000009c3 <getcFuncs>:
     9c3:	7d 24 50 24 50 24 50 24 50 24 50 24 50 24 50 24     }$P$P$P$P$P$P$P$
     9d3:	d2 24 50 24 7d 24 50 24 50 24 7d 24 50 24 50 24     .$P$}$P$P$}$P$P$
     9e3:	50 24 50 24 50 24 50 24 50 24 50 24 50 24 50 24     P$P$P$P$P$P$P$P$
     9f3:	50 24 50 24 50 24 50 24 50 24 50 24 50 24 50 24     P$P$P$P$P$P$P$P$
     a03:	50 24 50 24 50 24 50 24 50 24 50 24 50 24 50 24     P$P$P$P$P$P$P$P$
     a13:	50 24 50 24 50 24 50 24 50 24 50 24 50 24 50 24     P$P$P$P$P$P$P$P$
     a23:	50 24 50 24 50 24 50 24 50 24 50 24 50 24 50 24     P$P$P$P$P$P$P$P$
     a33:	50 24 50 24 50 24 bb 24 50 24 50 24 50 24 50 24     P$P$P$.$P$P$P$P$
     a43:	50 24 50 24 50 24 50 24 50 24 50 24 50 24 50 24     P$P$P$P$P$P$P$P$
     a53:	50 24 50 24 50 24 50 24 50 24 50 24 50 24 50 24     P$P$P$P$P$P$P$P$
     a63:	50 24 50 24 50 24 50 24 50 24 50 24 50 24 50 24     P$P$P$P$P$P$P$P$
     a73:	50 24 50 24 50 24 50 24 50 24 50 24 50 24 50 24     P$P$P$P$P$P$P$P$
     a83:	50 24 50 24 50 24 50 24 50 24 50 24 50 24 50 24     P$P$P$P$P$P$P$P$
     a93:	50 24 50 24 50 24 50 24 50 24 50 24 50 24 50 24     P$P$P$P$P$P$P$P$
     aa3:	50 24 50 24 50 24 50 24 50 24 50 24 50 24 50 24     P$P$P$P$P$P$P$P$
     ab3:	50 24 50 24 50 24 50 24 50 24 50 24 50 24 d2 24     P$P$P$P$P$P$P$.$

00000ac3 <pstr_inf>:
     ac3:	49 4e 46                                            INF

00000ac6 <pstr_inity>:
     ac6:	49 4e 49 54 59                                      INITY

00000acb <pstr_nan>:
     acb:	4e 41 4e                                            NAN

00000ace <pwr_m10>:
     ace:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     ade:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000ae6 <pwr_p10>:
     ae6:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     af6:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     b06:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     b16:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     b26:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     b36:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     b46:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     b56:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     b66:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     b76:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     b86:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     b96:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     ba6:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     bb6:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     bc6:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     bd6:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     be6:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     bf6:	3d 27                                               ='

00000bf8 <__ctors_end>:
     bf8:	11 24       	eor	r1, r1
     bfa:	1f be       	out	0x3f, r1	; 63
     bfc:	cf ef       	ldi	r28, 0xFF	; 255
     bfe:	df e5       	ldi	r29, 0x5F	; 95
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	00 e0       	ldi	r16, 0x00	; 0
     c06:	0c bf       	out	0x3c, r16	; 60

00000c08 <__do_copy_data>:
     c08:	11 e2       	ldi	r17, 0x21	; 33
     c0a:	a0 e0       	ldi	r26, 0x00	; 0
     c0c:	b0 e2       	ldi	r27, 0x20	; 32
     c0e:	ee ee       	ldi	r30, 0xEE	; 238
     c10:	fa e7       	ldi	r31, 0x7A	; 122
     c12:	00 e0       	ldi	r16, 0x00	; 0
     c14:	0b bf       	out	0x3b, r16	; 59
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <__do_copy_data+0x14>
     c18:	07 90       	elpm	r0, Z+
     c1a:	0d 92       	st	X+, r0
     c1c:	a0 31       	cpi	r26, 0x10	; 16
     c1e:	b1 07       	cpc	r27, r17
     c20:	d9 f7       	brne	.-10     	; 0xc18 <__do_copy_data+0x10>

00000c22 <__do_clear_bss>:
     c22:	16 e2       	ldi	r17, 0x26	; 38
     c24:	a0 e1       	ldi	r26, 0x10	; 16
     c26:	b1 e2       	ldi	r27, 0x21	; 33
     c28:	01 c0       	rjmp	.+2      	; 0xc2c <.do_clear_bss_start>

00000c2a <.do_clear_bss_loop>:
     c2a:	1d 92       	st	X+, r1

00000c2c <.do_clear_bss_start>:
     c2c:	a7 35       	cpi	r26, 0x57	; 87
     c2e:	b1 07       	cpc	r27, r17
     c30:	e1 f7       	brne	.-8      	; 0xc2a <.do_clear_bss_loop>
     c32:	0e 94 1f 06 	call	0xc3e	; 0xc3e <main>
     c36:	0c 94 75 3d 	jmp	0x7aea	; 0x7aea <_exit>

00000c3a <__bad_interrupt>:
     c3a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c3e <main>:


int main(void) 
{
	// Order dependent inits are numbered (n):
	cli();
     c3e:	f8 94       	cli
	hw_init();					// (1) hardware setup
     c40:	0e 94 ce 29 	call	0x539c	; 0x539c <hw_init>
	xio_init();					// (2) xmega io subsystem
     c44:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <xio_init>
	cfg_init();					// (3) config record from eeprom (reqs xio)
     c48:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <cfg_init>
	tg_init();					// (4) tinyg controller (selects std devices)
     c4c:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <tg_init>
	xio_init_stdio();			// (5) set stdin, stdout, stderr
     c50:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <xio_init_stdio>

	st_init(); 					// stepper subsystem
     c54:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <st_init>
	ls_init();					// limit switches
     c58:	0e 94 c5 22 	call	0x458a	; 0x458a <ls_init>
	mv_init();					// move buffers
     c5c:	0e 94 0f 20 	call	0x401e	; 0x401e <mv_init>
	mc_init();					// motion control subsystem
     c60:	0e 94 97 12 	call	0x252e	; 0x252e <mc_init>
	sp_init();					// spindle controller
     c64:	0e 94 94 17 	call	0x2f28	; 0x2f28 <sp_init>
	en_init();					// encoders
     c68:	0e 94 f5 11 	call	0x23ea	; 0x23ea <en_init>
	gc_init();					// gcode-parser
     c6c:	0e 94 72 06 	call	0xce4	; 0xce4 <gc_init>
	dd_init();					// direct drive commands
     c70:	0e 94 0b 20 	call	0x4016	; 0x4016 <dd_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
     c74:	0e 94 93 1b 	call	0x3726	; 0x3726 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
     c78:	e0 ea       	ldi	r30, 0xA0	; 160
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 91 a2 00 	lds	r24, 0x00A2
     c80:	81 60       	ori	r24, 0x01	; 1
     c82:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
     c84:	80 91 a2 00 	lds	r24, 0x00A2
     c88:	82 60       	ori	r24, 0x02	; 2
     c8a:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
     c8c:	80 91 a2 00 	lds	r24, 0x00A2
     c90:	84 60       	ori	r24, 0x04	; 4
     c92:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
     c94:	78 94       	sei

	tg_alive();					// (LAST) announce things are online
     c96:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <tg_alive>
//	xio_queue_RX_string_usb("g92 x0 y0 z0\n");
//	xio_queue_RX_string_usb("g0 x0 y0 z0\n");

#ifdef __NORMAL_MODE
	for(;;){
		tg_controller();	// this node executes gcode blocks received via RS485
     c9a:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <tg_controller>
     c9e:	fd cf       	rjmp	.-6      	; 0xc9a <main+0x5c>

00000ca0 <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
     ca0:	80 93 23 21 	sts	0x2123, r24
	gc.plane_axis_1 = axis_1;
     ca4:	60 93 24 21 	sts	0x2124, r22
	gc.plane_axis_2 = axis_2;
     ca8:	40 93 25 21 	sts	0x2125, r20
}
     cac:	08 95       	ret

00000cae <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	7b 01       	movw	r14, r22
     cb8:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
     cba:	80 91 1e 21 	lds	r24, 0x211E
     cbe:	88 23       	and	r24, r24
     cc0:	51 f0       	breq	.+20     	; 0xcd6 <to_millimeters+0x28>
     cc2:	c8 01       	movw	r24, r16
     cc4:	b7 01       	movw	r22, r14
     cc6:	25 e8       	ldi	r18, 0x85	; 133
     cc8:	32 e4       	ldi	r19, 0x42	; 66
     cca:	41 e2       	ldi	r20, 0x21	; 33
     ccc:	5d e3       	ldi	r21, 0x3D	; 61
     cce:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
     cd2:	7b 01       	movw	r14, r22
     cd4:	8c 01       	movw	r16, r24
}
     cd6:	b7 01       	movw	r22, r14
     cd8:	c8 01       	movw	r24, r16
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	08 95       	ret

00000ce4 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
     ce4:	86 e5       	ldi	r24, 0x56	; 86
     ce6:	e0 e1       	ldi	r30, 0x10	; 16
     ce8:	f1 e2       	ldi	r31, 0x21	; 33
     cea:	df 01       	movw	r26, r30
     cec:	1d 92       	st	X+, r1
     cee:	8a 95       	dec	r24
     cf0:	e9 f7       	brne	.-6      	; 0xcec <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	a0 e0       	ldi	r26, 0x00	; 0
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	80 93 26 21 	sts	0x2126, r24
     cfe:	90 93 27 21 	sts	0x2127, r25
     d02:	a0 93 28 21 	sts	0x2128, r26
     d06:	b0 93 29 21 	sts	0x2129, r27
	gc.radius = 0;							// radius value
     d0a:	80 93 2a 21 	sts	0x212A, r24
     d0e:	90 93 2b 21 	sts	0x212B, r25
     d12:	a0 93 2c 21 	sts	0x212C, r26
     d16:	b0 93 2d 21 	sts	0x212D, r27
	gc.feed_rate = cfg.default_feed_rate;	// Note: is divided by 60 in Grbl
     d1a:	80 91 57 22 	lds	r24, 0x2257
     d1e:	90 91 58 22 	lds	r25, 0x2258
     d22:	a0 91 59 22 	lds	r26, 0x2259
     d26:	b0 91 5a 22 	lds	r27, 0x225A
     d2a:	80 93 2e 21 	sts	0x212E, r24
     d2e:	90 93 2f 21 	sts	0x212F, r25
     d32:	a0 93 30 21 	sts	0x2130, r26
     d36:	b0 93 31 21 	sts	0x2131, r27
	gc.seek_rate = cfg.default_seek_rate;	// Note: is divided by 60 in Grbl
     d3a:	80 91 5b 22 	lds	r24, 0x225B
     d3e:	90 91 5c 22 	lds	r25, 0x225C
     d42:	a0 91 5d 22 	lds	r26, 0x225D
     d46:	b0 91 5e 22 	lds	r27, 0x225E
     d4a:	80 93 32 21 	sts	0x2132, r24
     d4e:	90 93 33 21 	sts	0x2133, r25
     d52:	a0 93 34 21 	sts	0x2134, r26
     d56:	b0 93 35 21 	sts	0x2135, r27

	gc.inches_mode = TRUE;					// default for US
     d5a:	21 e0       	ldi	r18, 0x01	; 1
     d5c:	20 93 1e 21 	sts	0x211E, r18
	gc.absolute_mode = TRUE;
     d60:	20 93 1f 21 	sts	0x211F, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	a0 e8       	ldi	r26, 0x80	; 128
     d6a:	bf eb       	ldi	r27, 0xBF	; 191
     d6c:	80 93 3a 21 	sts	0x213A, r24
     d70:	90 93 3b 21 	sts	0x213B, r25
     d74:	a0 93 3c 21 	sts	0x213C, r26
     d78:	b0 93 3d 21 	sts	0x213D, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
     d7c:	10 92 20 21 	sts	0x2120, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
     d80:	10 92 22 21 	sts	0x2122, r1
	gc.next_action = NEXT_ACTION_NONE; 		// no operation
     d84:	10 92 1a 21 	sts	0x211A, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
     d88:	10 92 23 21 	sts	0x2123, r1
	gc.plane_axis_1 = axis_1;
     d8c:	20 93 24 21 	sts	0x2124, r18
	gc.plane_axis_2 = axis_2;
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	80 93 25 21 	sts	0x2125, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_NONE; 		// no operation

	select_plane(X, Y, Z);					// default planes, 0, 1 and 2
}
     d96:	08 95       	ret

00000d98 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check gc.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
     d98:	4f 92       	push	r4
     d9a:	5f 92       	push	r5
     d9c:	6f 92       	push	r6
     d9e:	7f 92       	push	r7
     da0:	8f 92       	push	r8
     da2:	9f 92       	push	r9
     da4:	af 92       	push	r10
     da6:	bf 92       	push	r11
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	0f 92       	push	r0
     dba:	0f 92       	push	r0
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	7c 01       	movw	r14, r24
     dc2:	3b 01       	movw	r6, r22
     dc4:	2a 01       	movw	r4, r20
     dc6:	49 01       	movw	r8, r18
     dc8:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
     dca:	d8 01       	movw	r26, r16
     dcc:	ed 91       	ld	r30, X+
     dce:	fc 91       	ld	r31, X
     dd0:	e2 0f       	add	r30, r18
     dd2:	f3 1f       	adc	r31, r19
     dd4:	80 81       	ld	r24, Z
     dd6:	88 23       	and	r24, r24
     dd8:	51 f0       	breq	.+20     	; 0xdee <_gc_next_statement+0x56>
		return(FALSE); // No more statements
	}
	*letter = buf[*i];
     dda:	f7 01       	movw	r30, r14
     ddc:	80 83       	st	Z, r24
	if(!isupper(*letter)) {
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 f1 3b 	call	0x77e2	; 0x77e2 <isupper>
     de4:	89 2b       	or	r24, r25
     de6:	31 f4       	brne	.+12     	; 0xdf4 <_gc_next_statement+0x5c>
		gc.status = TG_EXPECTED_COMMAND_LETTER;
     de8:	8d e0       	ldi	r24, 0x0D	; 13
     dea:	80 93 10 21 	sts	0x2110, r24
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	34 c0       	rjmp	.+104    	; 0xe5c <_gc_next_statement+0xc4>
		return(FALSE);
	}
	(*i)++;
     df4:	d8 01       	movw	r26, r16
     df6:	8d 91       	ld	r24, X+
     df8:	9c 91       	ld	r25, X
     dfa:	11 97       	sbiw	r26, 0x01	; 1
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	8d 93       	st	X+, r24
     e00:	9c 93       	st	X, r25
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
     e02:	84 01       	movw	r16, r8
     e04:	08 0f       	add	r16, r24
     e06:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
     e08:	c8 01       	movw	r24, r16
     e0a:	be 01       	movw	r22, r28
     e0c:	6f 5f       	subi	r22, 0xFF	; 255
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	0e 94 8d 39 	call	0x731a	; 0x731a <strtod>
     e14:	6b 01       	movw	r12, r22
     e16:	7c 01       	movw	r14, r24
     e18:	f3 01       	movw	r30, r6
     e1a:	60 83       	st	Z, r22
     e1c:	71 83       	std	Z+1, r23	; 0x01
     e1e:	82 83       	std	Z+2, r24	; 0x02
     e20:	93 83       	std	Z+3, r25	; 0x03
	if(end == start) { 
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	80 17       	cp	r24, r16
     e28:	91 07       	cpc	r25, r17
     e2a:	11 f4       	brne	.+4      	; 0xe30 <_gc_next_statement+0x98>
		gc.status = TG_BAD_NUMBER_FORMAT; 
     e2c:	80 e1       	ldi	r24, 0x10	; 16
     e2e:	dd cf       	rjmp	.-70     	; 0xdea <_gc_next_statement+0x52>
		return(FALSE); 
	};
	*i = end - buf;
     e30:	88 19       	sub	r24, r8
     e32:	99 09       	sbc	r25, r9
     e34:	d5 01       	movw	r26, r10
     e36:	8d 93       	st	X+, r24
     e38:	9c 93       	st	X, r25
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
     e3a:	c7 01       	movw	r24, r14
     e3c:	b6 01       	movw	r22, r12
     e3e:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <trunc>
     e42:	9b 01       	movw	r18, r22
     e44:	ac 01       	movw	r20, r24
     e46:	c7 01       	movw	r24, r14
     e48:	b6 01       	movw	r22, r12
     e4a:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__subsf3>
     e4e:	f2 01       	movw	r30, r4
     e50:	60 83       	st	Z, r22
     e52:	71 83       	std	Z+1, r23	; 0x01
     e54:	82 83       	std	Z+2, r24	; 0x02
     e56:	93 83       	std	Z+3, r25	; 0x03
     e58:	21 e0       	ldi	r18, 0x01	; 1
     e5a:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
     e5c:	c9 01       	movw	r24, r18
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	ff 90       	pop	r15
     e6c:	ef 90       	pop	r14
     e6e:	df 90       	pop	r13
     e70:	cf 90       	pop	r12
     e72:	bf 90       	pop	r11
     e74:	af 90       	pop	r10
     e76:	9f 90       	pop	r9
     e78:	8f 90       	pop	r8
     e7a:	7f 90       	pop	r7
     e7c:	6f 90       	pop	r6
     e7e:	5f 90       	pop	r5
     e80:	4f 90       	pop	r4
     e82:	08 95       	ret

00000e84 <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
     e84:	af 92       	push	r10
     e86:	bf 92       	push	r11
     e88:	cf 92       	push	r12
     e8a:	df 92       	push	r13
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	79 01       	movw	r14, r18
     e96:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
     e98:	5f 77       	andi	r21, 0x7F	; 127
     e9a:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
     e9e:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <atan>
     ea2:	5b 01       	movw	r10, r22
     ea4:	6c 01       	movw	r12, r24

	if (y>0) {
     ea6:	c8 01       	movw	r24, r16
     ea8:	b7 01       	movw	r22, r14
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	50 e0       	ldi	r21, 0x00	; 0
     eb2:	0e 94 72 37 	call	0x6ee4	; 0x6ee4 <__gesf2>
     eb6:	18 16       	cp	r1, r24
     eb8:	cc f0       	brlt	.+50     	; 0xeec <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
     eba:	c6 01       	movw	r24, r12
     ebc:	b5 01       	movw	r22, r10
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	0e 94 72 37 	call	0x6ee4	; 0x6ee4 <__gesf2>
     eca:	18 16       	cp	r1, r24
     ecc:	2c f4       	brge	.+10     	; 0xed8 <theta+0x54>
	    {
			return(M_PI-theta);
     ece:	6b ed       	ldi	r22, 0xDB	; 219
     ed0:	7f e0       	ldi	r23, 0x0F	; 15
     ed2:	89 e4       	ldi	r24, 0x49	; 73
     ed4:	90 e4       	ldi	r25, 0x40	; 64
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <theta+0x5c>
    	} else {
			return(-M_PI-theta);
     ed8:	6b ed       	ldi	r22, 0xDB	; 219
     eda:	7f e0       	ldi	r23, 0x0F	; 15
     edc:	89 e4       	ldi	r24, 0x49	; 73
     ede:	90 ec       	ldi	r25, 0xC0	; 192
     ee0:	a6 01       	movw	r20, r12
     ee2:	95 01       	movw	r18, r10
     ee4:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__subsf3>
     ee8:	5b 01       	movw	r10, r22
     eea:	6c 01       	movw	r12, r24
		}
	}
}
     eec:	b5 01       	movw	r22, r10
     eee:	c6 01       	movw	r24, r12
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	df 90       	pop	r13
     efa:	cf 90       	pop	r12
     efc:	bf 90       	pop	r11
     efe:	af 90       	pop	r10
     f00:	08 95       	ret

00000f02 <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
     f02:	2f 92       	push	r2
     f04:	3f 92       	push	r3
     f06:	4f 92       	push	r4
     f08:	5f 92       	push	r5
     f0a:	6f 92       	push	r6
     f0c:	7f 92       	push	r7
     f0e:	8f 92       	push	r8
     f10:	9f 92       	push	r9
     f12:	af 92       	push	r10
     f14:	bf 92       	push	r11
     f16:	cf 92       	push	r12
     f18:	df 92       	push	r13
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	68 97       	sbiw	r28, 0x18	; 24
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	5c 01       	movw	r10, r24
	int i = 0;  				// index into Gcode block buffer (buf)
     f32:	19 82       	std	Y+1, r1	; 0x01
     f34:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
     f36:	ea e4       	ldi	r30, 0x4A	; 74
     f38:	f1 e2       	ldi	r31, 0x21	; 33
     f3a:	8c e0       	ldi	r24, 0x0C	; 12
     f3c:	df 01       	movw	r26, r30
     f3e:	28 2f       	mov	r18, r24
     f40:	1d 92       	st	X+, r1
     f42:	2a 95       	dec	r18
     f44:	e9 f7       	brne	.-6      	; 0xf40 <gc_execute_block+0x3e>
	clear_vector(gc.offset);
     f46:	3c 96       	adiw	r30, 0x0c	; 12
     f48:	df 01       	movw	r26, r30
     f4a:	1d 92       	st	X+, r1
     f4c:	8a 95       	dec	r24
     f4e:	e9 f7       	brne	.-6      	; 0xf4a <gc_execute_block+0x48>

	gc.status = TG_OK;
     f50:	10 92 10 21 	sts	0x2110, r1
	gc.set_origin_mode = 0;	// you are not in set origin mode unless you say you are
     f54:	10 92 21 21 	sts	0x2121, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
     f58:	4e 01       	movw	r8, r28
     f5a:	08 94       	sec
     f5c:	81 1c       	adc	r8, r1
     f5e:	91 1c       	adc	r9, r1

			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_STOP; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_END; break;
					case 3: gc.spindle_direction = 1; break;
     f60:	ff 24       	eor	r15, r15
     f62:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: gc.status = TG_UNSUPPORTED_STATEMENT;
     f64:	be e0       	ldi	r27, 0x0E	; 14
     f66:	cb 2e       	mov	r12, r27
				break;

			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_STOP; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_END; break;
     f68:	a2 e0       	ldi	r26, 0x02	; 2
     f6a:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
     f6c:	77 24       	eor	r7, r7
     f6e:	7a 94       	dec	r7

					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
     f70:	f3 e0       	ldi	r31, 0x03	; 3
     f72:	df 2e       	mov	r13, r31

					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
     f74:	e4 e0       	ldi	r30, 0x04	; 4
     f76:	6e 2e       	mov	r6, r30
     f78:	0a c1       	rjmp	.+532    	; 0x118e <gc_execute_block+0x28c>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;	// you are not in set origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
     f7a:	80 91 11 21 	lds	r24, 0x2111
     f7e:	8d 34       	cpi	r24, 0x4D	; 77
     f80:	09 f4       	brne	.+2      	; 0xf84 <gc_execute_block+0x82>
     f82:	be c0       	rjmp	.+380    	; 0x1100 <gc_execute_block+0x1fe>
     f84:	84 35       	cpi	r24, 0x54	; 84
     f86:	09 f4       	brne	.+2      	; 0xf8a <gc_execute_block+0x88>
     f88:	f0 c0       	rjmp	.+480    	; 0x116a <gc_execute_block+0x268>
     f8a:	87 34       	cpi	r24, 0x47	; 71
     f8c:	09 f0       	breq	.+2      	; 0xf90 <gc_execute_block+0x8e>
     f8e:	fb c0       	rjmp	.+502    	; 0x1186 <gc_execute_block+0x284>
			case 'G':
				switch((int)gc.value) {
     f90:	60 91 12 21 	lds	r22, 0x2112
     f94:	70 91 13 21 	lds	r23, 0x2113
     f98:	80 91 14 21 	lds	r24, 0x2114
     f9c:	90 91 15 21 	lds	r25, 0x2115
     fa0:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__fixsfsi>
     fa4:	65 31       	cpi	r22, 0x15	; 21
     fa6:	71 05       	cpc	r23, r1
     fa8:	09 f4       	brne	.+2      	; 0xfac <gc_execute_block+0xaa>
     faa:	8f c0       	rjmp	.+286    	; 0x10ca <gc_execute_block+0x1c8>
     fac:	66 31       	cpi	r22, 0x16	; 22
     fae:	71 05       	cpc	r23, r1
     fb0:	84 f5       	brge	.+96     	; 0x1012 <gc_execute_block+0x110>
     fb2:	64 30       	cpi	r22, 0x04	; 4
     fb4:	71 05       	cpc	r23, r1
     fb6:	09 f4       	brne	.+2      	; 0xfba <gc_execute_block+0xb8>
     fb8:	6d c0       	rjmp	.+218    	; 0x1094 <gc_execute_block+0x192>
     fba:	65 30       	cpi	r22, 0x05	; 5
     fbc:	71 05       	cpc	r23, r1
     fbe:	a4 f4       	brge	.+40     	; 0xfe8 <gc_execute_block+0xe6>
     fc0:	61 30       	cpi	r22, 0x01	; 1
     fc2:	71 05       	cpc	r23, r1
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <gc_execute_block+0xc6>
     fc6:	57 c0       	rjmp	.+174    	; 0x1076 <gc_execute_block+0x174>
     fc8:	62 30       	cpi	r22, 0x02	; 2
     fca:	71 05       	cpc	r23, r1
     fcc:	24 f4       	brge	.+8      	; 0xfd6 <gc_execute_block+0xd4>
     fce:	67 2b       	or	r22, r23
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <gc_execute_block+0xd2>
     fd2:	4c c0       	rjmp	.+152    	; 0x106c <gc_execute_block+0x16a>
     fd4:	c7 c0       	rjmp	.+398    	; 0x1164 <gc_execute_block+0x262>
     fd6:	62 30       	cpi	r22, 0x02	; 2
     fd8:	71 05       	cpc	r23, r1
     fda:	09 f4       	brne	.+2      	; 0xfde <gc_execute_block+0xdc>
     fdc:	51 c0       	rjmp	.+162    	; 0x1080 <gc_execute_block+0x17e>
     fde:	63 30       	cpi	r22, 0x03	; 3
     fe0:	71 05       	cpc	r23, r1
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <gc_execute_block+0xe4>
     fe4:	bf c0       	rjmp	.+382    	; 0x1164 <gc_execute_block+0x262>
     fe6:	51 c0       	rjmp	.+162    	; 0x108a <gc_execute_block+0x188>
     fe8:	62 31       	cpi	r22, 0x12	; 18
     fea:	71 05       	cpc	r23, r1
     fec:	09 f4       	brne	.+2      	; 0xff0 <gc_execute_block+0xee>
     fee:	5c c0       	rjmp	.+184    	; 0x10a8 <gc_execute_block+0x1a6>
     ff0:	63 31       	cpi	r22, 0x13	; 19
     ff2:	71 05       	cpc	r23, r1
     ff4:	2c f4       	brge	.+10     	; 0x1000 <gc_execute_block+0xfe>
     ff6:	61 31       	cpi	r22, 0x11	; 17
     ff8:	71 05       	cpc	r23, r1
     ffa:	09 f0       	breq	.+2      	; 0xffe <gc_execute_block+0xfc>
     ffc:	b3 c0       	rjmp	.+358    	; 0x1164 <gc_execute_block+0x262>
     ffe:	4d c0       	rjmp	.+154    	; 0x109a <gc_execute_block+0x198>
    1000:	63 31       	cpi	r22, 0x13	; 19
    1002:	71 05       	cpc	r23, r1
    1004:	09 f4       	brne	.+2      	; 0x1008 <gc_execute_block+0x106>
    1006:	57 c0       	rjmp	.+174    	; 0x10b6 <gc_execute_block+0x1b4>
    1008:	64 31       	cpi	r22, 0x14	; 20
    100a:	71 05       	cpc	r23, r1
    100c:	09 f0       	breq	.+2      	; 0x1010 <gc_execute_block+0x10e>
    100e:	aa c0       	rjmp	.+340    	; 0x1164 <gc_execute_block+0x262>
    1010:	59 c0       	rjmp	.+178    	; 0x10c4 <gc_execute_block+0x1c2>
    1012:	6a 35       	cpi	r22, 0x5A	; 90
    1014:	71 05       	cpc	r23, r1
    1016:	09 f4       	brne	.+2      	; 0x101a <gc_execute_block+0x118>
    1018:	64 c0       	rjmp	.+200    	; 0x10e2 <gc_execute_block+0x1e0>
    101a:	6b 35       	cpi	r22, 0x5B	; 91
    101c:	71 05       	cpc	r23, r1
    101e:	ac f4       	brge	.+42     	; 0x104a <gc_execute_block+0x148>
    1020:	6e 31       	cpi	r22, 0x1E	; 30
    1022:	71 05       	cpc	r23, r1
    1024:	09 f4       	brne	.+2      	; 0x1028 <gc_execute_block+0x126>
    1026:	54 c0       	rjmp	.+168    	; 0x10d0 <gc_execute_block+0x1ce>
    1028:	6f 31       	cpi	r22, 0x1F	; 31
    102a:	71 05       	cpc	r23, r1
    102c:	2c f4       	brge	.+10     	; 0x1038 <gc_execute_block+0x136>
    102e:	6c 31       	cpi	r22, 0x1C	; 28
    1030:	71 05       	cpc	r23, r1
    1032:	09 f0       	breq	.+2      	; 0x1036 <gc_execute_block+0x134>
    1034:	97 c0       	rjmp	.+302    	; 0x1164 <gc_execute_block+0x262>
    1036:	4c c0       	rjmp	.+152    	; 0x10d0 <gc_execute_block+0x1ce>
    1038:	65 33       	cpi	r22, 0x35	; 53
    103a:	71 05       	cpc	r23, r1
    103c:	09 f4       	brne	.+2      	; 0x1040 <gc_execute_block+0x13e>
    103e:	4b c0       	rjmp	.+150    	; 0x10d6 <gc_execute_block+0x1d4>
    1040:	60 35       	cpi	r22, 0x50	; 80
    1042:	71 05       	cpc	r23, r1
    1044:	09 f0       	breq	.+2      	; 0x1048 <gc_execute_block+0x146>
    1046:	8e c0       	rjmp	.+284    	; 0x1164 <gc_execute_block+0x262>
    1048:	49 c0       	rjmp	.+146    	; 0x10dc <gc_execute_block+0x1da>
    104a:	6c 35       	cpi	r22, 0x5C	; 92
    104c:	71 05       	cpc	r23, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <gc_execute_block+0x150>
    1050:	4e c0       	rjmp	.+156    	; 0x10ee <gc_execute_block+0x1ec>
    1052:	6c 35       	cpi	r22, 0x5C	; 92
    1054:	71 05       	cpc	r23, r1
    1056:	0c f4       	brge	.+2      	; 0x105a <gc_execute_block+0x158>
    1058:	47 c0       	rjmp	.+142    	; 0x10e8 <gc_execute_block+0x1e6>
    105a:	6d 35       	cpi	r22, 0x5D	; 93
    105c:	71 05       	cpc	r23, r1
    105e:	09 f4       	brne	.+2      	; 0x1062 <gc_execute_block+0x160>
    1060:	49 c0       	rjmp	.+146    	; 0x10f4 <gc_execute_block+0x1f2>
    1062:	6e 35       	cpi	r22, 0x5E	; 94
    1064:	71 05       	cpc	r23, r1
    1066:	09 f0       	breq	.+2      	; 0x106a <gc_execute_block+0x168>
    1068:	7d c0       	rjmp	.+250    	; 0x1164 <gc_execute_block+0x262>
    106a:	47 c0       	rjmp	.+142    	; 0x10fa <gc_execute_block+0x1f8>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    106c:	f0 92 1a 21 	sts	0x211A, r15
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    1070:	10 92 1c 21 	sts	0x211C, r1
    1074:	88 c0       	rjmp	.+272    	; 0x1186 <gc_execute_block+0x284>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    1076:	f0 92 1a 21 	sts	0x211A, r15
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    107a:	f0 92 1c 21 	sts	0x211C, r15
    107e:	83 c0       	rjmp	.+262    	; 0x1186 <gc_execute_block+0x284>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    1080:	f0 92 1a 21 	sts	0x211A, r15
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    1084:	e0 92 1c 21 	sts	0x211C, r14
    1088:	7e c0       	rjmp	.+252    	; 0x1186 <gc_execute_block+0x284>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    108a:	f0 92 1a 21 	sts	0x211A, r15
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    108e:	d0 92 1c 21 	sts	0x211C, r13
    1092:	79 c0       	rjmp	.+242    	; 0x1186 <gc_execute_block+0x284>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    1094:	e0 92 1a 21 	sts	0x211A, r14
    1098:	76 c0       	rjmp	.+236    	; 0x1186 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    109a:	10 92 23 21 	sts	0x2123, r1
	gc.plane_axis_1 = axis_1;
    109e:	f0 92 24 21 	sts	0x2124, r15
	gc.plane_axis_2 = axis_2;
    10a2:	e0 92 25 21 	sts	0x2125, r14
    10a6:	6f c0       	rjmp	.+222    	; 0x1186 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    10a8:	10 92 23 21 	sts	0x2123, r1
	gc.plane_axis_1 = axis_1;
    10ac:	e0 92 24 21 	sts	0x2124, r14
	gc.plane_axis_2 = axis_2;
    10b0:	f0 92 25 21 	sts	0x2125, r15
    10b4:	68 c0       	rjmp	.+208    	; 0x1186 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    10b6:	f0 92 23 21 	sts	0x2123, r15
	gc.plane_axis_1 = axis_1;
    10ba:	e0 92 24 21 	sts	0x2124, r14
	gc.plane_axis_2 = axis_2;
    10be:	10 92 25 21 	sts	0x2125, r1
    10c2:	61 c0       	rjmp	.+194    	; 0x1186 <gc_execute_block+0x284>

					case 17: { select_plane(X, Y, Z); break; }
					case 18: { select_plane(X, Z, Y); break; }
					case 19: { select_plane(Y, Z, X); break; }

					case 20: { gc.inches_mode = TRUE; break; }
    10c4:	f0 92 1e 21 	sts	0x211E, r15
    10c8:	5e c0       	rjmp	.+188    	; 0x1186 <gc_execute_block+0x284>
					case 21: { gc.inches_mode = FALSE; break; }
    10ca:	10 92 1e 21 	sts	0x211E, r1
    10ce:	5b c0       	rjmp	.+182    	; 0x1186 <gc_execute_block+0x284>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    10d0:	d0 92 1a 21 	sts	0x211A, r13
    10d4:	58 c0       	rjmp	.+176    	; 0x1186 <gc_execute_block+0x284>

					case 53: { gc.absolute_override = TRUE; break; }
    10d6:	f0 92 22 21 	sts	0x2122, r15
    10da:	55 c0       	rjmp	.+170    	; 0x1186 <gc_execute_block+0x284>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    10dc:	60 92 1c 21 	sts	0x211C, r6
    10e0:	52 c0       	rjmp	.+164    	; 0x1186 <gc_execute_block+0x284>
					case 90: { gc.absolute_mode = TRUE; break; }
    10e2:	f0 92 1f 21 	sts	0x211F, r15
    10e6:	4f c0       	rjmp	.+158    	; 0x1186 <gc_execute_block+0x284>
					case 91: { gc.absolute_mode = FALSE; break; }
    10e8:	10 92 1f 21 	sts	0x211F, r1
    10ec:	4c c0       	rjmp	.+152    	; 0x1186 <gc_execute_block+0x284>
					case 92: { gc.set_origin_mode = TRUE; break; }
    10ee:	f0 92 21 21 	sts	0x2121, r15
    10f2:	49 c0       	rjmp	.+146    	; 0x1186 <gc_execute_block+0x284>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    10f4:	f0 92 1d 21 	sts	0x211D, r15
    10f8:	46 c0       	rjmp	.+140    	; 0x1186 <gc_execute_block+0x284>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    10fa:	10 92 1d 21 	sts	0x211D, r1
    10fe:	43 c0       	rjmp	.+134    	; 0x1186 <gc_execute_block+0x284>
					default: gc.status = TG_UNSUPPORTED_STATEMENT;
				}
				break;

			case 'M':
				switch((int)gc.value) {
    1100:	60 91 12 21 	lds	r22, 0x2112
    1104:	70 91 13 21 	lds	r23, 0x2113
    1108:	80 91 14 21 	lds	r24, 0x2114
    110c:	90 91 15 21 	lds	r25, 0x2115
    1110:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__fixsfsi>
    1114:	63 30       	cpi	r22, 0x03	; 3
    1116:	71 05       	cpc	r23, r1
    1118:	e1 f0       	breq	.+56     	; 0x1152 <gc_execute_block+0x250>
    111a:	64 30       	cpi	r22, 0x04	; 4
    111c:	71 05       	cpc	r23, r1
    111e:	34 f4       	brge	.+12     	; 0x112c <gc_execute_block+0x22a>
    1120:	77 fd       	sbrc	r23, 7
    1122:	20 c0       	rjmp	.+64     	; 0x1164 <gc_execute_block+0x262>
    1124:	62 30       	cpi	r22, 0x02	; 2
    1126:	71 05       	cpc	r23, r1
    1128:	74 f0       	brlt	.+28     	; 0x1146 <gc_execute_block+0x244>
    112a:	10 c0       	rjmp	.+32     	; 0x114c <gc_execute_block+0x24a>
    112c:	65 30       	cpi	r22, 0x05	; 5
    112e:	71 05       	cpc	r23, r1
    1130:	b1 f0       	breq	.+44     	; 0x115e <gc_execute_block+0x25c>
    1132:	65 30       	cpi	r22, 0x05	; 5
    1134:	71 05       	cpc	r23, r1
    1136:	84 f0       	brlt	.+32     	; 0x1158 <gc_execute_block+0x256>
    1138:	6e 31       	cpi	r22, 0x1E	; 30
    113a:	71 05       	cpc	r23, r1
    113c:	39 f0       	breq	.+14     	; 0x114c <gc_execute_block+0x24a>
    113e:	6c 33       	cpi	r22, 0x3C	; 60
    1140:	71 05       	cpc	r23, r1
    1142:	81 f4       	brne	.+32     	; 0x1164 <gc_execute_block+0x262>
    1144:	03 c0       	rjmp	.+6      	; 0x114c <gc_execute_block+0x24a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_STOP; break;
    1146:	f0 92 1b 21 	sts	0x211B, r15
    114a:	1d c0       	rjmp	.+58     	; 0x1186 <gc_execute_block+0x284>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_END; break;
    114c:	e0 92 1b 21 	sts	0x211B, r14
    1150:	1a c0       	rjmp	.+52     	; 0x1186 <gc_execute_block+0x284>
					case 3: gc.spindle_direction = 1; break;
    1152:	f0 92 63 21 	sts	0x2163, r15
    1156:	17 c0       	rjmp	.+46     	; 0x1186 <gc_execute_block+0x284>
					case 4: gc.spindle_direction = -1; break;
    1158:	70 92 63 21 	sts	0x2163, r7
    115c:	14 c0       	rjmp	.+40     	; 0x1186 <gc_execute_block+0x284>
					case 5: gc.spindle_direction = 0; break;
    115e:	10 92 63 21 	sts	0x2163, r1
    1162:	11 c0       	rjmp	.+34     	; 0x1186 <gc_execute_block+0x284>
        			default: gc.status = TG_UNSUPPORTED_STATEMENT;
    1164:	c0 92 10 21 	sts	0x2110, r12
    1168:	0e c0       	rjmp	.+28     	; 0x1186 <gc_execute_block+0x284>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    116a:	60 91 12 21 	lds	r22, 0x2112
    116e:	70 91 13 21 	lds	r23, 0x2113
    1172:	80 91 14 21 	lds	r24, 0x2114
    1176:	90 91 15 21 	lds	r25, 0x2115
    117a:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <trunc>
    117e:	0e 94 f6 35 	call	0x6bec	; 0x6bec <__fixunssfsi>
    1182:	60 93 62 21 	sts	0x2162, r22
		}
		if(gc.status) {
    1186:	80 91 10 21 	lds	r24, 0x2110
    118a:	88 23       	and	r24, r24
    118c:	69 f4       	brne	.+26     	; 0x11a8 <gc_execute_block+0x2a6>

	gc.status = TG_OK;
	gc.set_origin_mode = 0;	// you are not in set origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    118e:	81 e1       	ldi	r24, 0x11	; 17
    1190:	91 e2       	ldi	r25, 0x21	; 33
    1192:	62 e1       	ldi	r22, 0x12	; 18
    1194:	71 e2       	ldi	r23, 0x21	; 33
    1196:	46 e1       	ldi	r20, 0x16	; 22
    1198:	51 e2       	ldi	r21, 0x21	; 33
    119a:	95 01       	movw	r18, r10
    119c:	84 01       	movw	r16, r8
    119e:	0e 94 cc 06 	call	0xd98	; 0xd98 <_gc_next_statement>
    11a2:	89 2b       	or	r24, r25
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <gc_execute_block+0x2a6>
    11a6:	e9 ce       	rjmp	.-558    	; 0xf7a <gc_execute_block+0x78>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    11a8:	80 91 10 21 	lds	r24, 0x2110
    11ac:	88 23       	and	r24, r24
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <gc_execute_block+0x2b0>
    11b0:	c2 c3       	rjmp	.+1924   	; 0x1936 <gc_execute_block+0xa34>
		return(gc.status); 
	}

	i = 0;
    11b2:	19 82       	std	Y+1, r1	; 0x01
    11b4:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    11b6:	e6 e5       	ldi	r30, 0x56	; 86
    11b8:	f1 e2       	ldi	r31, 0x21	; 33
    11ba:	8c e0       	ldi	r24, 0x0C	; 12
    11bc:	df 01       	movw	r26, r30
    11be:	1d 92       	st	X+, r1
    11c0:	8a 95       	dec	r24
    11c2:	e9 f7       	brne	.-6      	; 0x11be <gc_execute_block+0x2bc>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = position
    11c4:	df 01       	movw	r26, r30
    11c6:	1c 97       	sbiw	r26, 0x0c	; 12
    11c8:	78 97       	sbiw	r30, 0x18	; 24
    11ca:	8c e0       	ldi	r24, 0x0C	; 12
    11cc:	01 90       	ld	r0, Z+
    11ce:	0d 92       	st	X+, r0
    11d0:	81 50       	subi	r24, 0x01	; 1
    11d2:	e1 f7       	brne	.-8      	; 0x11cc <gc_execute_block+0x2ca>
    11d4:	cc c0       	rjmp	.+408    	; 0x136e <gc_execute_block+0x46c>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    11d6:	c0 90 12 21 	lds	r12, 0x2112
    11da:	d0 90 13 21 	lds	r13, 0x2113
    11de:	e0 90 14 21 	lds	r14, 0x2114
    11e2:	f0 90 15 21 	lds	r15, 0x2115
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    11e6:	80 91 1e 21 	lds	r24, 0x211E
    11ea:	88 23       	and	r24, r24
    11ec:	19 f4       	brne	.+6      	; 0x11f4 <gc_execute_block+0x2f2>
    11ee:	a7 01       	movw	r20, r14
    11f0:	96 01       	movw	r18, r12
    11f2:	0a c0       	rjmp	.+20     	; 0x1208 <gc_execute_block+0x306>
    11f4:	c7 01       	movw	r24, r14
    11f6:	b6 01       	movw	r22, r12
    11f8:	25 e8       	ldi	r18, 0x85	; 133
    11fa:	32 e4       	ldi	r19, 0x42	; 66
    11fc:	41 e2       	ldi	r20, 0x21	; 33
    11fe:	5d e3       	ldi	r21, 0x3D	; 61
    1200:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    1204:	9b 01       	movw	r18, r22
    1206:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    1208:	20 93 36 21 	sts	0x2136, r18
    120c:	30 93 37 21 	sts	0x2137, r19
    1210:	40 93 38 21 	sts	0x2138, r20
    1214:	50 93 39 21 	sts	0x2139, r21
		switch(gc.letter) {
    1218:	00 91 11 21 	lds	r16, 0x2111
    121c:	00 35       	cpi	r16, 0x50	; 80
    121e:	09 f4       	brne	.+2      	; 0x1222 <gc_execute_block+0x320>
    1220:	47 c0       	rjmp	.+142    	; 0x12b0 <gc_execute_block+0x3ae>
    1222:	01 35       	cpi	r16, 0x51	; 81
    1224:	58 f4       	brcc	.+22     	; 0x123c <gc_execute_block+0x33a>
    1226:	06 34       	cpi	r16, 0x46	; 70
    1228:	c1 f0       	breq	.+48     	; 0x125a <gc_execute_block+0x358>
    122a:	06 34       	cpi	r16, 0x46	; 70
    122c:	08 f4       	brcc	.+2      	; 0x1230 <gc_execute_block+0x32e>
    122e:	a7 c0       	rjmp	.+334    	; 0x137e <gc_execute_block+0x47c>
    1230:	80 2f       	mov	r24, r16
    1232:	89 54       	subi	r24, 0x49	; 73
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	08 f0       	brcs	.+2      	; 0x123a <gc_execute_block+0x338>
    1238:	a2 c0       	rjmp	.+324    	; 0x137e <gc_execute_block+0x47c>
    123a:	2d c0       	rjmp	.+90     	; 0x1296 <gc_execute_block+0x394>
    123c:	03 35       	cpi	r16, 0x53	; 83
    123e:	09 f4       	brne	.+2      	; 0x1242 <gc_execute_block+0x340>
    1240:	4b c0       	rjmp	.+150    	; 0x12d8 <gc_execute_block+0x3d6>
    1242:	04 35       	cpi	r16, 0x54	; 84
    1244:	20 f4       	brcc	.+8      	; 0x124e <gc_execute_block+0x34c>
    1246:	02 35       	cpi	r16, 0x52	; 82
    1248:	09 f0       	breq	.+2      	; 0x124c <gc_execute_block+0x34a>
    124a:	99 c0       	rjmp	.+306    	; 0x137e <gc_execute_block+0x47c>
    124c:	3a c0       	rjmp	.+116    	; 0x12c2 <gc_execute_block+0x3c0>
    124e:	80 2f       	mov	r24, r16
    1250:	88 55       	subi	r24, 0x58	; 88
    1252:	83 30       	cpi	r24, 0x03	; 3
    1254:	08 f0       	brcs	.+2      	; 0x1258 <gc_execute_block+0x356>
    1256:	93 c0       	rjmp	.+294    	; 0x137e <gc_execute_block+0x47c>
    1258:	48 c0       	rjmp	.+144    	; 0x12ea <gc_execute_block+0x3e8>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    125a:	80 91 1d 21 	lds	r24, 0x211D
    125e:	88 23       	and	r24, r24
    1260:	49 f0       	breq	.+18     	; 0x1274 <gc_execute_block+0x372>
					gc.inverse_feed_rate = gc.unit_converted_value; // secs per motion for this motion only
    1262:	20 93 3a 21 	sts	0x213A, r18
    1266:	30 93 3b 21 	sts	0x213B, r19
    126a:	40 93 3c 21 	sts	0x213C, r20
    126e:	50 93 3d 21 	sts	0x213D, r21
    1272:	85 c0       	rjmp	.+266    	; 0x137e <gc_execute_block+0x47c>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    1274:	ca 01       	movw	r24, r20
    1276:	b9 01       	movw	r22, r18
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e7       	ldi	r20, 0x70	; 112
    127e:	52 e4       	ldi	r21, 0x42	; 66
    1280:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    1284:	60 93 2e 21 	sts	0x212E, r22
    1288:	70 93 2f 21 	sts	0x212F, r23
    128c:	80 93 30 21 	sts	0x2130, r24
    1290:	90 93 31 21 	sts	0x2131, r25
    1294:	74 c0       	rjmp	.+232    	; 0x137e <gc_execute_block+0x47c>
				}
				break;
			case 'I': case 'J': case 'K': {
				gc.offset[gc.letter-'I'] = gc.unit_converted_value; 
    1296:	e0 2f       	mov	r30, r16
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	ee 0f       	add	r30, r30
    129c:	ff 1f       	adc	r31, r31
    129e:	ee 0f       	add	r30, r30
    12a0:	ff 1f       	adc	r31, r31
    12a2:	ee 5c       	subi	r30, 0xCE	; 206
    12a4:	ff 4d       	sbci	r31, 0xDF	; 223
    12a6:	20 83       	st	Z, r18
    12a8:	31 83       	std	Z+1, r19	; 0x01
    12aa:	42 83       	std	Z+2, r20	; 0x02
    12ac:	53 83       	std	Z+3, r21	; 0x03
    12ae:	67 c0       	rjmp	.+206    	; 0x137e <gc_execute_block+0x47c>
				break;
			}
			case 'P': {
				gc.dwell_time = gc.value; 			// dwell time in seconds
    12b0:	c0 92 26 21 	sts	0x2126, r12
    12b4:	d0 92 27 21 	sts	0x2127, r13
    12b8:	e0 92 28 21 	sts	0x2128, r14
    12bc:	f0 92 29 21 	sts	0x2129, r15
    12c0:	5e c0       	rjmp	.+188    	; 0x137e <gc_execute_block+0x47c>
				break;
			}
			case 'R': {
				gc.radius = gc.unit_converted_value; 
    12c2:	20 93 2a 21 	sts	0x212A, r18
    12c6:	30 93 2b 21 	sts	0x212B, r19
    12ca:	40 93 2c 21 	sts	0x212C, r20
    12ce:	50 93 2d 21 	sts	0x212D, r21
				gc.radius_mode = TRUE; 
    12d2:	70 92 20 21 	sts	0x2120, r7
    12d6:	53 c0       	rjmp	.+166    	; 0x137e <gc_execute_block+0x47c>
				break;
			}
			case 'S': {
				gc.spindle_speed = gc.value; 
    12d8:	c7 01       	movw	r24, r14
    12da:	b6 01       	movw	r22, r12
    12dc:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__fixsfsi>
    12e0:	60 93 64 21 	sts	0x2164, r22
    12e4:	70 93 65 21 	sts	0x2165, r23
    12e8:	4a c0       	rjmp	.+148    	; 0x137e <gc_execute_block+0x47c>
				break;
			}
			case 'X': case 'Y': case 'Z': {
				if (gc.set_origin_mode) {
    12ea:	80 91 21 21 	lds	r24, 0x2121
    12ee:	88 23       	and	r24, r24
    12f0:	99 f0       	breq	.+38     	; 0x1318 <gc_execute_block+0x416>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    12f2:	e0 2f       	mov	r30, r16
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	ee 0f       	add	r30, r30
    12f8:	ff 1f       	adc	r31, r31
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	e0 55       	subi	r30, 0x50	; 80
    1300:	f0 4e       	sbci	r31, 0xE0	; 224
    1302:	26 a7       	std	Z+46, r18	; 0x2e
    1304:	37 a7       	std	Z+47, r19	; 0x2f
    1306:	40 ab       	std	Z+48, r20	; 0x30
    1308:	51 ab       	std	Z+49, r21	; 0x31
					gc.target[gc.letter - 'X'] = gc.position[gc.letter - 'X'];
    130a:	22 af       	std	Z+58, r18	; 0x3a
    130c:	33 af       	std	Z+59, r19	; 0x3b
    130e:	44 af       	std	Z+60, r20	; 0x3c
    1310:	55 af       	std	Z+61, r21	; 0x3d
//					memcpy(gc.target, gc.position, sizeof(gc.target));	// target = position
					gc.next_action = NEXT_ACTION_SET_COORDINATES;
    1312:	60 92 1a 21 	sts	0x211A, r6
    1316:	33 c0       	rjmp	.+102    	; 0x137e <gc_execute_block+0x47c>
				} else if (gc.absolute_mode || gc.absolute_override) {
    1318:	80 91 1f 21 	lds	r24, 0x211F
    131c:	88 23       	and	r24, r24
    131e:	21 f4       	brne	.+8      	; 0x1328 <gc_execute_block+0x426>
    1320:	80 91 22 21 	lds	r24, 0x2122
    1324:	88 23       	and	r24, r24
    1326:	69 f0       	breq	.+26     	; 0x1342 <gc_execute_block+0x440>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    1328:	e0 2f       	mov	r30, r16
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	ee 0f       	add	r30, r30
    132e:	ff 1f       	adc	r31, r31
    1330:	ee 0f       	add	r30, r30
    1332:	ff 1f       	adc	r31, r31
    1334:	e0 55       	subi	r30, 0x50	; 80
    1336:	f0 4e       	sbci	r31, 0xE0	; 224
    1338:	22 af       	std	Z+58, r18	; 0x3a
    133a:	33 af       	std	Z+59, r19	; 0x3b
    133c:	44 af       	std	Z+60, r20	; 0x3c
    133e:	55 af       	std	Z+61, r21	; 0x3d
    1340:	1e c0       	rjmp	.+60     	; 0x137e <gc_execute_block+0x47c>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    1342:	10 e0       	ldi	r17, 0x00	; 0
    1344:	00 0f       	add	r16, r16
    1346:	11 1f       	adc	r17, r17
    1348:	00 0f       	add	r16, r16
    134a:	11 1f       	adc	r17, r17
    134c:	00 55       	subi	r16, 0x50	; 80
    134e:	10 4e       	sbci	r17, 0xE0	; 224
    1350:	f8 01       	movw	r30, r16
    1352:	62 ad       	ldd	r22, Z+58	; 0x3a
    1354:	73 ad       	ldd	r23, Z+59	; 0x3b
    1356:	84 ad       	ldd	r24, Z+60	; 0x3c
    1358:	95 ad       	ldd	r25, Z+61	; 0x3d
    135a:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <__addsf3>
    135e:	d8 01       	movw	r26, r16
    1360:	da 96       	adiw	r26, 0x3a	; 58
    1362:	6d 93       	st	X+, r22
    1364:	7d 93       	st	X+, r23
    1366:	8d 93       	st	X+, r24
    1368:	9c 93       	st	X, r25
    136a:	dd 97       	sbiw	r26, 0x3d	; 61
    136c:	08 c0       	rjmp	.+16     	; 0x137e <gc_execute_block+0x47c>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    136e:	4e 01       	movw	r8, r28
    1370:	08 94       	sec
    1372:	81 1c       	adc	r8, r1
    1374:	91 1c       	adc	r9, r1
			case 'X': case 'Y': case 'Z': {
				if (gc.set_origin_mode) {
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
					gc.target[gc.letter - 'X'] = gc.position[gc.letter - 'X'];
//					memcpy(gc.target, gc.position, sizeof(gc.target));	// target = position
					gc.next_action = NEXT_ACTION_SET_COORDINATES;
    1376:	14 e0       	ldi	r17, 0x04	; 4
    1378:	61 2e       	mov	r6, r17
				gc.dwell_time = gc.value; 			// dwell time in seconds
				break;
			}
			case 'R': {
				gc.radius = gc.unit_converted_value; 
				gc.radius_mode = TRUE; 
    137a:	77 24       	eor	r7, r7
    137c:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    137e:	81 e1       	ldi	r24, 0x11	; 17
    1380:	91 e2       	ldi	r25, 0x21	; 33
    1382:	62 e1       	ldi	r22, 0x12	; 18
    1384:	71 e2       	ldi	r23, 0x21	; 33
    1386:	46 e1       	ldi	r20, 0x16	; 22
    1388:	51 e2       	ldi	r21, 0x21	; 33
    138a:	95 01       	movw	r18, r10
    138c:	84 01       	movw	r16, r8
    138e:	0e 94 cc 06 	call	0xd98	; 0xd98 <_gc_next_statement>
    1392:	89 2b       	or	r24, r25
    1394:	09 f0       	breq	.+2      	; 0x1398 <gc_execute_block+0x496>
    1396:	1f cf       	rjmp	.-450    	; 0x11d6 <gc_execute_block+0x2d4>
			}
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    1398:	80 91 10 21 	lds	r24, 0x2110
    139c:	88 23       	and	r24, r24
    139e:	09 f0       	breq	.+2      	; 0x13a2 <gc_execute_block+0x4a0>
    13a0:	ca c2       	rjmp	.+1428   	; 0x1936 <gc_execute_block+0xa34>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    13a2:	80 91 63 21 	lds	r24, 0x2163
    13a6:	88 23       	and	r24, r24
    13a8:	71 f0       	breq	.+28     	; 0x13c6 <gc_execute_block+0x4c4>
    	sp_spindle_run(gc.spindle_direction, gc.spindle_speed);
    13aa:	40 91 64 21 	lds	r20, 0x2164
    13ae:	50 91 65 21 	lds	r21, 0x2165
    13b2:	66 27       	eor	r22, r22
    13b4:	57 fd       	sbrc	r21, 7
    13b6:	60 95       	com	r22
    13b8:	76 2f       	mov	r23, r22
    13ba:	99 27       	eor	r25, r25
    13bc:	87 fd       	sbrc	r24, 7
    13be:	90 95       	com	r25
    13c0:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <sp_spindle_run>
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <gc_execute_block+0x4c8>
	} else {
		sp_spindle_stop();
    13c6:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <sp_spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    13ca:	80 91 1a 21 	lds	r24, 0x211A
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	51 f1       	breq	.+84     	; 0x1426 <gc_execute_block+0x524>
    13d2:	83 30       	cpi	r24, 0x03	; 3
    13d4:	20 f4       	brcc	.+8      	; 0x13de <gc_execute_block+0x4dc>
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	09 f0       	breq	.+2      	; 0x13dc <gc_execute_block+0x4da>
    13da:	9e c2       	rjmp	.+1340   	; 0x1918 <gc_execute_block+0xa16>
    13dc:	2f c0       	rjmp	.+94     	; 0x143c <gc_execute_block+0x53a>
    13de:	83 30       	cpi	r24, 0x03	; 3
    13e0:	21 f0       	breq	.+8      	; 0x13ea <gc_execute_block+0x4e8>
    13e2:	84 30       	cpi	r24, 0x04	; 4
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <gc_execute_block+0x4e6>
    13e6:	98 c2       	rjmp	.+1328   	; 0x1918 <gc_execute_block+0xa16>
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <gc_execute_block+0x4ee>
		case NEXT_ACTION_NONE: {				// nothing to do here
			break;
		}

		case NEXT_ACTION_GO_HOME: { 
			gc.status = mc_home(); 
    13ea:	0e 94 8d 12 	call	0x251a	; 0x251a <mc_home>
    13ee:	92 c2       	rjmp	.+1316   	; 0x1914 <gc_execute_block+0xa12>
			break;
		}

		case NEXT_ACTION_SET_COORDINATES: { 
			gc.status = mc_set_position(gc.position[X], gc.position[Y], gc.position[Z]); 
    13f0:	60 91 3e 21 	lds	r22, 0x213E
    13f4:	70 91 3f 21 	lds	r23, 0x213F
    13f8:	80 91 40 21 	lds	r24, 0x2140
    13fc:	90 91 41 21 	lds	r25, 0x2141
    1400:	20 91 42 21 	lds	r18, 0x2142
    1404:	30 91 43 21 	lds	r19, 0x2143
    1408:	40 91 44 21 	lds	r20, 0x2144
    140c:	50 91 45 21 	lds	r21, 0x2145
    1410:	e0 90 46 21 	lds	r14, 0x2146
    1414:	f0 90 47 21 	lds	r15, 0x2147
    1418:	00 91 48 21 	lds	r16, 0x2148
    141c:	10 91 49 21 	lds	r17, 0x2149
    1420:	0e 94 29 13 	call	0x2652	; 0x2652 <mc_set_position>
    1424:	77 c2       	rjmp	.+1262   	; 0x1914 <gc_execute_block+0xa12>
			break;
		}

		case NEXT_ACTION_DWELL: {
			gc.status = mc_dwell(gc.dwell_time); 
    1426:	60 91 26 21 	lds	r22, 0x2126
    142a:	70 91 27 21 	lds	r23, 0x2127
    142e:	80 91 28 21 	lds	r24, 0x2128
    1432:	90 91 29 21 	lds	r25, 0x2129
    1436:	0e 94 ed 12 	call	0x25da	; 0x25da <mc_dwell>
    143a:	6c c2       	rjmp	.+1240   	; 0x1914 <gc_execute_block+0xa12>
			break;
		}

		case NEXT_ACTION_MOTION: {
			switch (gc.motion_mode) {
    143c:	b0 91 1c 21 	lds	r27, 0x211C
    1440:	b8 8f       	std	Y+24, r27	; 0x18
    1442:	b2 30       	cpi	r27, 0x02	; 2
    1444:	20 f0       	brcs	.+8      	; 0x144e <gc_execute_block+0x54c>
    1446:	b4 30       	cpi	r27, 0x04	; 4
    1448:	08 f0       	brcs	.+2      	; 0x144c <gc_execute_block+0x54a>
    144a:	66 c2       	rjmp	.+1228   	; 0x1918 <gc_execute_block+0xa16>
    144c:	31 c0       	rjmp	.+98     	; 0x14b0 <gc_execute_block+0x5ae>
				case MOTION_MODE_CANCEL: {
					break;
				}

				case MOTION_MODE_RAPID_LINEAR: case MOTION_MODE_LINEAR: {
					gc.status = mc_line(gc.target[X], gc.target[Y], gc.target[Z],
    144e:	60 91 4a 21 	lds	r22, 0x214A
    1452:	70 91 4b 21 	lds	r23, 0x214B
    1456:	80 91 4c 21 	lds	r24, 0x214C
    145a:	90 91 4d 21 	lds	r25, 0x214D
    145e:	20 91 4e 21 	lds	r18, 0x214E
    1462:	30 91 4f 21 	lds	r19, 0x214F
    1466:	40 91 50 21 	lds	r20, 0x2150
    146a:	50 91 51 21 	lds	r21, 0x2151
    146e:	e0 90 52 21 	lds	r14, 0x2152
    1472:	f0 90 53 21 	lds	r15, 0x2153
    1476:	00 91 54 21 	lds	r16, 0x2154
    147a:	10 91 55 21 	lds	r17, 0x2155
    147e:	80 90 1d 21 	lds	r8, 0x211D
    1482:	88 20       	and	r8, r8
    1484:	49 f0       	breq	.+18     	; 0x1498 <gc_execute_block+0x596>
    1486:	a0 90 3a 21 	lds	r10, 0x213A
    148a:	b0 90 3b 21 	lds	r11, 0x213B
    148e:	c0 90 3c 21 	lds	r12, 0x213C
    1492:	d0 90 3d 21 	lds	r13, 0x213D
    1496:	08 c0       	rjmp	.+16     	; 0x14a8 <gc_execute_block+0x5a6>
    1498:	a0 90 2e 21 	lds	r10, 0x212E
    149c:	b0 90 2f 21 	lds	r11, 0x212F
    14a0:	c0 90 30 21 	lds	r12, 0x2130
    14a4:	d0 90 31 21 	lds	r13, 0x2131
    14a8:	99 24       	eor	r9, r9
    14aa:	0e 94 87 13 	call	0x270e	; 0x270e <mc_line>
    14ae:	32 c2       	rjmp	.+1124   	; 0x1914 <gc_execute_block+0xa12>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    14b0:	80 91 20 21 	lds	r24, 0x2120
    14b4:	88 23       	and	r24, r24
    14b6:	09 f4       	brne	.+2      	; 0x14ba <gc_execute_block+0x5b8>
    14b8:	ec c0       	rjmp	.+472    	; 0x1692 <gc_execute_block+0x790>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    14ba:	e0 91 23 21 	lds	r30, 0x2123
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	ee 0f       	add	r30, r30
    14c2:	ff 1f       	adc	r31, r31
    14c4:	ee 0f       	add	r30, r30
    14c6:	ff 1f       	adc	r31, r31
    14c8:	e0 5f       	subi	r30, 0xF0	; 240
    14ca:	fe 4d       	sbci	r31, 0xDE	; 222
    14cc:	62 ad       	ldd	r22, Z+58	; 0x3a
    14ce:	73 ad       	ldd	r23, Z+59	; 0x3b
    14d0:	84 ad       	ldd	r24, Z+60	; 0x3c
    14d2:	95 ad       	ldd	r25, Z+61	; 0x3d
    14d4:	26 a5       	ldd	r18, Z+46	; 0x2e
    14d6:	37 a5       	ldd	r19, Z+47	; 0x2f
    14d8:	40 a9       	ldd	r20, Z+48	; 0x30
    14da:	51 a9       	ldd	r21, Z+49	; 0x31
    14dc:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__subsf3>
    14e0:	6f 83       	std	Y+7, r22	; 0x07
    14e2:	78 87       	std	Y+8, r23	; 0x08
    14e4:	89 87       	std	Y+9, r24	; 0x09
    14e6:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    14e8:	e0 91 24 21 	lds	r30, 0x2124
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	ee 0f       	add	r30, r30
    14f0:	ff 1f       	adc	r31, r31
    14f2:	ee 0f       	add	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	e0 5f       	subi	r30, 0xF0	; 240
    14f8:	fe 4d       	sbci	r31, 0xDE	; 222
    14fa:	62 ad       	ldd	r22, Z+58	; 0x3a
    14fc:	73 ad       	ldd	r23, Z+59	; 0x3b
    14fe:	84 ad       	ldd	r24, Z+60	; 0x3c
    1500:	95 ad       	ldd	r25, Z+61	; 0x3d
    1502:	26 a5       	ldd	r18, Z+46	; 0x2e
    1504:	37 a5       	ldd	r19, Z+47	; 0x2f
    1506:	40 a9       	ldd	r20, Z+48	; 0x30
    1508:	51 a9       	ldd	r21, Z+49	; 0x31
    150a:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__subsf3>
    150e:	1b 01       	movw	r2, r22
    1510:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    1512:	10 92 56 21 	sts	0x2156, r1
    1516:	10 92 57 21 	sts	0x2157, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    151a:	60 90 2a 21 	lds	r6, 0x212A
    151e:	70 90 2b 21 	lds	r7, 0x212B
    1522:	80 90 2c 21 	lds	r8, 0x212C
    1526:	90 90 2d 21 	lds	r9, 0x212D
    152a:	c4 01       	movw	r24, r8
    152c:	b3 01       	movw	r22, r6
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e8       	ldi	r20, 0x80	; 128
    1534:	50 e4       	ldi	r21, 0x40	; 64
    1536:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    153a:	a4 01       	movw	r20, r8
    153c:	93 01       	movw	r18, r6
    153e:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    1542:	5b 01       	movw	r10, r22
    1544:	6c 01       	movw	r12, r24
    1546:	6f 81       	ldd	r22, Y+7	; 0x07
    1548:	78 85       	ldd	r23, Y+8	; 0x08
    154a:	89 85       	ldd	r24, Y+9	; 0x09
    154c:	9a 85       	ldd	r25, Y+10	; 0x0a
    154e:	9b 01       	movw	r18, r22
    1550:	ac 01       	movw	r20, r24
    1552:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    1556:	7b 01       	movw	r14, r22
    1558:	8c 01       	movw	r16, r24
    155a:	c2 01       	movw	r24, r4
    155c:	b1 01       	movw	r22, r2
    155e:	a2 01       	movw	r20, r4
    1560:	91 01       	movw	r18, r2
    1562:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    1566:	9b 01       	movw	r18, r22
    1568:	ac 01       	movw	r20, r24
    156a:	c8 01       	movw	r24, r16
    156c:	b7 01       	movw	r22, r14
    156e:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__subsf3>
    1572:	9b 01       	movw	r18, r22
    1574:	ac 01       	movw	r20, r24
    1576:	c6 01       	movw	r24, r12
    1578:	b5 01       	movw	r22, r10
    157a:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__subsf3>
    157e:	0e 94 b1 38 	call	0x7162	; 0x7162 <sqrt>
    1582:	7b 01       	movw	r14, r22
    1584:	8c 01       	movw	r16, r24
    1586:	6f 81       	ldd	r22, Y+7	; 0x07
    1588:	78 85       	ldd	r23, Y+8	; 0x08
    158a:	89 85       	ldd	r24, Y+9	; 0x09
    158c:	9a 85       	ldd	r25, Y+10	; 0x0a
    158e:	a2 01       	movw	r20, r4
    1590:	91 01       	movw	r18, r2
    1592:	0e 94 7f 37 	call	0x6efe	; 0x6efe <hypot>
    1596:	9b 01       	movw	r18, r22
    1598:	ac 01       	movw	r20, r24
    159a:	17 fb       	bst	r17, 7
    159c:	10 95       	com	r17
    159e:	17 f9       	bld	r17, 7
    15a0:	10 95       	com	r17
    15a2:	c8 01       	movw	r24, r16
    15a4:	b7 01       	movw	r22, r14
    15a6:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    15aa:	7b 01       	movw	r14, r22
    15ac:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    15ae:	a8 01       	movw	r20, r16
    15b0:	97 01       	movw	r18, r14
    15b2:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <__unordsf2>
    15b6:	88 23       	and	r24, r24
    15b8:	21 f0       	breq	.+8      	; 0x15c2 <gc_execute_block+0x6c0>
		gc.status = TG_FLOATING_POINT_ERROR; 
    15ba:	81 e1       	ldi	r24, 0x11	; 17
    15bc:	80 93 10 21 	sts	0x2110, r24
    15c0:	65 c0       	rjmp	.+202    	; 0x168c <gc_execute_block+0x78a>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    15c2:	e8 8d       	ldd	r30, Y+24	; 0x18
    15c4:	e3 30       	cpi	r30, 0x03	; 3
    15c6:	21 f4       	brne	.+8      	; 0x15d0 <gc_execute_block+0x6ce>
		h_x2_div_d = -h_x2_div_d;
    15c8:	17 fb       	bst	r17, 7
    15ca:	10 95       	com	r17
    15cc:	17 f9       	bld	r17, 7
    15ce:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    15d0:	c4 01       	movw	r24, r8
    15d2:	b3 01       	movw	r22, r6
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e0       	ldi	r20, 0x00	; 0
    15da:	50 e0       	ldi	r21, 0x00	; 0
    15dc:	0e 94 82 35 	call	0x6b04	; 0x6b04 <__cmpsf2>
    15e0:	88 23       	and	r24, r24
    15e2:	24 f4       	brge	.+8      	; 0x15ec <gc_execute_block+0x6ea>
		h_x2_div_d = -h_x2_div_d; 
    15e4:	17 fb       	bst	r17, 7
    15e6:	10 95       	com	r17
    15e8:	17 f9       	bld	r17, 7
    15ea:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    15ec:	80 91 23 21 	lds	r24, 0x2123
    15f0:	c8 2e       	mov	r12, r24
    15f2:	dd 24       	eor	r13, r13
    15f4:	cc 0c       	add	r12, r12
    15f6:	dd 1c       	adc	r13, r13
    15f8:	cc 0c       	add	r12, r12
    15fa:	dd 1c       	adc	r13, r13
    15fc:	26 e5       	ldi	r18, 0x56	; 86
    15fe:	31 e2       	ldi	r19, 0x21	; 33
    1600:	c2 0e       	add	r12, r18
    1602:	d3 1e       	adc	r13, r19
    1604:	c2 01       	movw	r24, r4
    1606:	b1 01       	movw	r22, r2
    1608:	a8 01       	movw	r20, r16
    160a:	97 01       	movw	r18, r14
    160c:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    1610:	9b 01       	movw	r18, r22
    1612:	ac 01       	movw	r20, r24
    1614:	6f 81       	ldd	r22, Y+7	; 0x07
    1616:	78 85       	ldd	r23, Y+8	; 0x08
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__subsf3>
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	5f e3       	ldi	r21, 0x3F	; 63
    1628:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    162c:	d6 01       	movw	r26, r12
    162e:	6d 93       	st	X+, r22
    1630:	7d 93       	st	X+, r23
    1632:	8d 93       	st	X+, r24
    1634:	9c 93       	st	X, r25
    1636:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    1638:	80 91 24 21 	lds	r24, 0x2124
    163c:	c8 2e       	mov	r12, r24
    163e:	dd 24       	eor	r13, r13
    1640:	cc 0c       	add	r12, r12
    1642:	dd 1c       	adc	r13, r13
    1644:	cc 0c       	add	r12, r12
    1646:	dd 1c       	adc	r13, r13
    1648:	e6 e5       	ldi	r30, 0x56	; 86
    164a:	f1 e2       	ldi	r31, 0x21	; 33
    164c:	ce 0e       	add	r12, r30
    164e:	df 1e       	adc	r13, r31
    1650:	6f 81       	ldd	r22, Y+7	; 0x07
    1652:	78 85       	ldd	r23, Y+8	; 0x08
    1654:	89 85       	ldd	r24, Y+9	; 0x09
    1656:	9a 85       	ldd	r25, Y+10	; 0x0a
    1658:	a8 01       	movw	r20, r16
    165a:	97 01       	movw	r18, r14
    165c:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    1660:	9b 01       	movw	r18, r22
    1662:	ac 01       	movw	r20, r24
    1664:	c2 01       	movw	r24, r4
    1666:	b1 01       	movw	r22, r2
    1668:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <__addsf3>
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	5f e3       	ldi	r21, 0x3F	; 63
    1674:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    1678:	d6 01       	movw	r26, r12
    167a:	6d 93       	st	X+, r22
    167c:	7d 93       	st	X+, r23
    167e:	8d 93       	st	X+, r24
    1680:	9c 93       	st	X, r25
    1682:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    1684:	80 91 10 21 	lds	r24, 0x2110
    1688:	88 23       	and	r24, r24
    168a:	19 f0       	breq	.+6      	; 0x1692 <gc_execute_block+0x790>
			return (gc.status);
    168c:	80 91 10 21 	lds	r24, 0x2110
    1690:	41 c1       	rjmp	.+642    	; 0x1914 <gc_execute_block+0xa12>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    1692:	e0 91 23 21 	lds	r30, 0x2123
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	ee 0f       	add	r30, r30
    169a:	ff 1f       	adc	r31, r31
    169c:	ee 0f       	add	r30, r30
    169e:	ff 1f       	adc	r31, r31
    16a0:	ea 5a       	subi	r30, 0xAA	; 170
    16a2:	fe 4d       	sbci	r31, 0xDE	; 222
    16a4:	60 81       	ld	r22, Z
    16a6:	71 81       	ldd	r23, Z+1	; 0x01
    16a8:	82 81       	ldd	r24, Z+2	; 0x02
    16aa:	93 81       	ldd	r25, Z+3	; 0x03
    16ac:	90 58       	subi	r25, 0x80	; 128
    16ae:	e0 91 24 21 	lds	r30, 0x2124
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	ee 0f       	add	r30, r30
    16ba:	ff 1f       	adc	r31, r31
    16bc:	ea 5a       	subi	r30, 0xAA	; 170
    16be:	fe 4d       	sbci	r31, 0xDE	; 222
    16c0:	20 81       	ld	r18, Z
    16c2:	31 81       	ldd	r19, Z+1	; 0x01
    16c4:	42 81       	ldd	r20, Z+2	; 0x02
    16c6:	53 81       	ldd	r21, Z+3	; 0x03
    16c8:	50 58       	subi	r21, 0x80	; 128
    16ca:	0e 94 42 07 	call	0xe84	; 0xe84 <theta>
    16ce:	6f 87       	std	Y+15, r22	; 0x0f
    16d0:	78 8b       	std	Y+16, r23	; 0x10
    16d2:	89 8b       	std	Y+17, r24	; 0x11
    16d4:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    16d6:	9b 01       	movw	r18, r22
    16d8:	ac 01       	movw	r20, r24
    16da:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <__unordsf2>
    16de:	88 23       	and	r24, r24
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <gc_execute_block+0x7e2>
    16e2:	54 c0       	rjmp	.+168    	; 0x178c <gc_execute_block+0x88a>
		gc.status = TG_ARC_SPECIFICATION_ERROR;
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    16e4:	e0 91 23 21 	lds	r30, 0x2123
    16e8:	0e 2f       	mov	r16, r30
    16ea:	10 e0       	ldi	r17, 0x00	; 0
    16ec:	e0 91 24 21 	lds	r30, 0x2124
    16f0:	ce 2e       	mov	r12, r30
    16f2:	dd 24       	eor	r13, r13
    16f4:	00 0f       	add	r16, r16
    16f6:	11 1f       	adc	r17, r17
    16f8:	00 0f       	add	r16, r16
    16fa:	11 1f       	adc	r17, r17
    16fc:	00 5f       	subi	r16, 0xF0	; 240
    16fe:	1e 4d       	sbci	r17, 0xDE	; 222
    1700:	f8 01       	movw	r30, r16
    1702:	ea 5b       	subi	r30, 0xBA	; 186
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	d8 01       	movw	r26, r16
    1708:	da 96       	adiw	r26, 0x3a	; 58
    170a:	6d 91       	ld	r22, X+
    170c:	7d 91       	ld	r23, X+
    170e:	8d 91       	ld	r24, X+
    1710:	9c 91       	ld	r25, X
    1712:	dd 97       	sbiw	r26, 0x3d	; 61
    1714:	20 81       	ld	r18, Z
    1716:	31 81       	ldd	r19, Z+1	; 0x01
    1718:	42 81       	ldd	r20, Z+2	; 0x02
    171a:	53 81       	ldd	r21, Z+3	; 0x03
    171c:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__subsf3>
    1720:	f8 01       	movw	r30, r16
    1722:	26 a5       	ldd	r18, Z+46	; 0x2e
    1724:	37 a5       	ldd	r19, Z+47	; 0x2f
    1726:	40 a9       	ldd	r20, Z+48	; 0x30
    1728:	51 a9       	ldd	r21, Z+49	; 0x31
    172a:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__subsf3>
    172e:	7b 01       	movw	r14, r22
    1730:	8c 01       	movw	r16, r24
    1732:	cc 0c       	add	r12, r12
    1734:	dd 1c       	adc	r13, r13
    1736:	cc 0c       	add	r12, r12
    1738:	dd 1c       	adc	r13, r13
    173a:	20 e1       	ldi	r18, 0x10	; 16
    173c:	31 e2       	ldi	r19, 0x21	; 33
    173e:	c2 0e       	add	r12, r18
    1740:	d3 1e       	adc	r13, r19
    1742:	f6 01       	movw	r30, r12
    1744:	ea 5b       	subi	r30, 0xBA	; 186
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	d6 01       	movw	r26, r12
    174a:	da 96       	adiw	r26, 0x3a	; 58
    174c:	6d 91       	ld	r22, X+
    174e:	7d 91       	ld	r23, X+
    1750:	8d 91       	ld	r24, X+
    1752:	9c 91       	ld	r25, X
    1754:	dd 97       	sbiw	r26, 0x3d	; 61
    1756:	20 81       	ld	r18, Z
    1758:	31 81       	ldd	r19, Z+1	; 0x01
    175a:	42 81       	ldd	r20, Z+2	; 0x02
    175c:	53 81       	ldd	r21, Z+3	; 0x03
    175e:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__subsf3>
    1762:	f6 01       	movw	r30, r12
    1764:	26 a5       	ldd	r18, Z+46	; 0x2e
    1766:	37 a5       	ldd	r19, Z+47	; 0x2f
    1768:	40 a9       	ldd	r20, Z+48	; 0x30
    176a:	51 a9       	ldd	r21, Z+49	; 0x31
    176c:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__subsf3>
    1770:	9b 01       	movw	r18, r22
    1772:	ac 01       	movw	r20, r24
    1774:	c8 01       	movw	r24, r16
    1776:	b7 01       	movw	r22, r14
    1778:	0e 94 42 07 	call	0xe84	; 0xe84 <theta>
    177c:	7b 01       	movw	r14, r22
    177e:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    1780:	a8 01       	movw	r20, r16
    1782:	97 01       	movw	r18, r14
    1784:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <__unordsf2>
    1788:	88 23       	and	r24, r24
    178a:	19 f0       	breq	.+6      	; 0x1792 <gc_execute_block+0x890>
		gc.status = TG_ARC_SPECIFICATION_ERROR; 
    178c:	83 e1       	ldi	r24, 0x13	; 19
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	c1 c0       	rjmp	.+386    	; 0x1914 <gc_execute_block+0xa12>
		return(gc.status);
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    1792:	c8 01       	movw	r24, r16
    1794:	b7 01       	movw	r22, r14
    1796:	2f 85       	ldd	r18, Y+15	; 0x0f
    1798:	38 89       	ldd	r19, Y+16	; 0x10
    179a:	49 89       	ldd	r20, Y+17	; 0x11
    179c:	5a 89       	ldd	r21, Y+18	; 0x12
    179e:	0e 94 82 35 	call	0x6b04	; 0x6b04 <__cmpsf2>
    17a2:	88 23       	and	r24, r24
    17a4:	54 f4       	brge	.+20     	; 0x17ba <gc_execute_block+0x8b8>
		theta_end += 2*M_PI;
    17a6:	c8 01       	movw	r24, r16
    17a8:	b7 01       	movw	r22, r14
    17aa:	2b ed       	ldi	r18, 0xDB	; 219
    17ac:	3f e0       	ldi	r19, 0x0F	; 15
    17ae:	49 ec       	ldi	r20, 0xC9	; 201
    17b0:	50 e4       	ldi	r21, 0x40	; 64
    17b2:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <__addsf3>
    17b6:	7b 01       	movw	r14, r22
    17b8:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    17ba:	c8 01       	movw	r24, r16
    17bc:	b7 01       	movw	r22, r14
    17be:	2f 85       	ldd	r18, Y+15	; 0x0f
    17c0:	38 89       	ldd	r19, Y+16	; 0x10
    17c2:	49 89       	ldd	r20, Y+17	; 0x11
    17c4:	5a 89       	ldd	r21, Y+18	; 0x12
    17c6:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__subsf3>
    17ca:	6b 87       	std	Y+11, r22	; 0x0b
    17cc:	7c 87       	std	Y+12, r23	; 0x0c
    17ce:	8d 87       	std	Y+13, r24	; 0x0d
    17d0:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    17d2:	80 91 1c 21 	lds	r24, 0x211C
    17d6:	83 30       	cpi	r24, 0x03	; 3
    17d8:	71 f4       	brne	.+28     	; 0x17f6 <gc_execute_block+0x8f4>
		angular_travel = angular_travel - 2*M_PI;
    17da:	6b 85       	ldd	r22, Y+11	; 0x0b
    17dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17de:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e2:	2b ed       	ldi	r18, 0xDB	; 219
    17e4:	3f e0       	ldi	r19, 0x0F	; 15
    17e6:	49 ec       	ldi	r20, 0xC9	; 201
    17e8:	50 e4       	ldi	r21, 0x40	; 64
    17ea:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__subsf3>
    17ee:	6b 87       	std	Y+11, r22	; 0x0b
    17f0:	7c 87       	std	Y+12, r23	; 0x0c
    17f2:	8d 87       	std	Y+13, r24	; 0x0d
    17f4:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    17f6:	80 91 23 21 	lds	r24, 0x2123
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	2d 83       	std	Y+5, r18	; 0x05
    1800:	3e 83       	std	Y+6, r19	; 0x06
    1802:	f9 01       	movw	r30, r18
    1804:	ee 0f       	add	r30, r30
    1806:	ff 1f       	adc	r31, r31
    1808:	ee 0f       	add	r30, r30
    180a:	ff 1f       	adc	r31, r31
    180c:	ea 5a       	subi	r30, 0xAA	; 170
    180e:	fe 4d       	sbci	r31, 0xDE	; 222
    1810:	e0 80       	ld	r14, Z
    1812:	f1 80       	ldd	r15, Z+1	; 0x01
    1814:	02 81       	ldd	r16, Z+2	; 0x02
    1816:	13 81       	ldd	r17, Z+3	; 0x03
    1818:	80 91 24 21 	lds	r24, 0x2124
    181c:	a8 2f       	mov	r26, r24
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	ab 83       	std	Y+3, r26	; 0x03
    1822:	bc 83       	std	Y+4, r27	; 0x04
    1824:	fd 01       	movw	r30, r26
    1826:	ee 0f       	add	r30, r30
    1828:	ff 1f       	adc	r31, r31
    182a:	ee 0f       	add	r30, r30
    182c:	ff 1f       	adc	r31, r31
    182e:	ea 5a       	subi	r30, 0xAA	; 170
    1830:	fe 4d       	sbci	r31, 0xDE	; 222
    1832:	20 81       	ld	r18, Z
    1834:	31 81       	ldd	r19, Z+1	; 0x01
    1836:	42 81       	ldd	r20, Z+2	; 0x02
    1838:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    183a:	80 91 25 21 	lds	r24, 0x2125
    183e:	28 2e       	mov	r2, r24
    1840:	33 24       	eor	r3, r3
    1842:	f1 01       	movw	r30, r2
    1844:	ee 0f       	add	r30, r30
    1846:	ff 1f       	adc	r31, r31
    1848:	ee 0f       	add	r30, r30
    184a:	ff 1f       	adc	r31, r31
    184c:	e0 5f       	subi	r30, 0xF0	; 240
    184e:	fe 4d       	sbci	r31, 0xDE	; 222
    1850:	82 ad       	ldd	r24, Z+58	; 0x3a
    1852:	93 ad       	ldd	r25, Z+59	; 0x3b
    1854:	a4 ad       	ldd	r26, Z+60	; 0x3c
    1856:	b5 ad       	ldd	r27, Z+61	; 0x3d
    1858:	8c 8b       	std	Y+20, r24	; 0x14
    185a:	9d 8b       	std	Y+21, r25	; 0x15
    185c:	ae 8b       	std	Y+22, r26	; 0x16
    185e:	bf 8b       	std	Y+23, r27	; 0x17
    1860:	a6 a4       	ldd	r10, Z+46	; 0x2e
    1862:	b7 a4       	ldd	r11, Z+47	; 0x2f
    1864:	c0 a8       	ldd	r12, Z+48	; 0x30
    1866:	d1 a8       	ldd	r13, Z+49	; 0x31

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    1868:	90 91 1d 21 	lds	r25, 0x211D
    186c:	9b 8b       	std	Y+19, r25	; 0x13
    186e:	99 23       	and	r25, r25
    1870:	49 f0       	breq	.+18     	; 0x1884 <gc_execute_block+0x982>
    1872:	40 90 3a 21 	lds	r4, 0x213A
    1876:	50 90 3b 21 	lds	r5, 0x213B
    187a:	60 90 3c 21 	lds	r6, 0x213C
    187e:	70 90 3d 21 	lds	r7, 0x213D
    1882:	08 c0       	rjmp	.+16     	; 0x1894 <gc_execute_block+0x992>
    1884:	40 90 2e 21 	lds	r4, 0x212E
    1888:	50 90 2f 21 	lds	r5, 0x212F
    188c:	60 90 30 21 	lds	r6, 0x2130
    1890:	70 90 31 21 	lds	r7, 0x2131
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    1894:	c8 01       	movw	r24, r16
    1896:	b7 01       	movw	r22, r14
    1898:	0e 94 7f 37 	call	0x6efe	; 0x6efe <hypot>
    189c:	7b 01       	movw	r14, r22
    189e:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    18a0:	ad b7       	in	r26, 0x3d	; 61
    18a2:	be b7       	in	r27, 0x3e	; 62
    18a4:	1a 97       	sbiw	r26, 0x0a	; 10
    18a6:	ad bf       	out	0x3d, r26	; 61
    18a8:	be bf       	out	0x3e, r27	; 62
    18aa:	8d b6       	in	r8, 0x3d	; 61
    18ac:	9e b6       	in	r9, 0x3e	; 62
    18ae:	08 94       	sec
    18b0:	81 1c       	adc	r8, r1
    18b2:	91 1c       	adc	r9, r1
    18b4:	6c 89       	ldd	r22, Y+20	; 0x14
    18b6:	7d 89       	ldd	r23, Y+21	; 0x15
    18b8:	8e 89       	ldd	r24, Y+22	; 0x16
    18ba:	9f 89       	ldd	r25, Y+23	; 0x17
    18bc:	a6 01       	movw	r20, r12
    18be:	95 01       	movw	r18, r10
    18c0:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__subsf3>
    18c4:	5b 01       	movw	r10, r22
    18c6:	6c 01       	movw	r12, r24
    18c8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ca:	3c 81       	ldd	r19, Y+4	; 0x04
    18cc:	f4 01       	movw	r30, r8
    18ce:	20 83       	st	Z, r18
    18d0:	31 83       	std	Z+1, r19	; 0x01
    18d2:	22 82       	std	Z+2, r2	; 0x02
    18d4:	33 82       	std	Z+3, r3	; 0x03
    18d6:	d4 01       	movw	r26, r8
    18d8:	14 96       	adiw	r26, 0x04	; 4
    18da:	4d 92       	st	X+, r4
    18dc:	5d 92       	st	X+, r5
    18de:	6d 92       	st	X+, r6
    18e0:	7c 92       	st	X, r7
    18e2:	17 97       	sbiw	r26, 0x07	; 7
    18e4:	eb 89       	ldd	r30, Y+19	; 0x13
    18e6:	18 96       	adiw	r26, 0x08	; 8
    18e8:	ec 93       	st	X, r30
    18ea:	18 97       	sbiw	r26, 0x08	; 8
    18ec:	19 96       	adiw	r26, 0x09	; 9
    18ee:	1c 92       	st	X, r1
    18f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    18f2:	78 89       	ldd	r23, Y+16	; 0x10
    18f4:	89 89       	ldd	r24, Y+17	; 0x11
    18f6:	9a 89       	ldd	r25, Y+18	; 0x12
    18f8:	2b 85       	ldd	r18, Y+11	; 0x0b
    18fa:	3c 85       	ldd	r19, Y+12	; 0x0c
    18fc:	4d 85       	ldd	r20, Y+13	; 0x0d
    18fe:	5e 85       	ldd	r21, Y+14	; 0x0e
    1900:	8d 80       	ldd	r8, Y+5	; 0x05
    1902:	9e 80       	ldd	r9, Y+6	; 0x06
    1904:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <mc_arc>
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//					   (gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//						gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    1908:	2d b7       	in	r18, 0x3d	; 61
    190a:	3e b7       	in	r19, 0x3e	; 62
    190c:	26 5f       	subi	r18, 0xF6	; 246
    190e:	3f 4f       	sbci	r19, 0xFF	; 255
    1910:	2d bf       	out	0x3d, r18	; 61
    1912:	3e bf       	out	0x3e, r19	; 62
										gc.inverse_feed_rate_mode); 
					break;
				}

				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: {
					gc.status = _gc_compute_arc(); 
    1914:	80 93 10 21 	sts	0x2110, r24
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    1918:	80 91 10 21 	lds	r24, 0x2110
    191c:	88 23       	and	r24, r24
    191e:	11 f0       	breq	.+4      	; 0x1924 <gc_execute_block+0xa22>
    1920:	82 30       	cpi	r24, 0x02	; 2
    1922:	49 f4       	brne	.+18     	; 0x1936 <gc_execute_block+0xa34>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    1924:	ee e3       	ldi	r30, 0x3E	; 62
    1926:	f1 e2       	ldi	r31, 0x21	; 33
    1928:	df 01       	movw	r26, r30
    192a:	1c 96       	adiw	r26, 0x0c	; 12
    192c:	9c e0       	ldi	r25, 0x0C	; 12
    192e:	0d 90       	ld	r0, X+
    1930:	01 92       	st	Z+, r0
    1932:	91 50       	subi	r25, 0x01	; 1
    1934:	e1 f7       	brne	.-8      	; 0x192e <gc_execute_block+0xa2c>
	};
	return(gc.status);
}
    1936:	68 96       	adiw	r28, 0x18	; 24
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	df 90       	pop	r13
    194a:	cf 90       	pop	r12
    194c:	bf 90       	pop	r11
    194e:	af 90       	pop	r10
    1950:	9f 90       	pop	r9
    1952:	8f 90       	pop	r8
    1954:	7f 90       	pop	r7
    1956:	6f 90       	pop	r6
    1958:	5f 90       	pop	r5
    195a:	4f 90       	pop	r4
    195c:	3f 90       	pop	r3
    195e:	2f 90       	pop	r2
    1960:	08 95       	ret

00001962 <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    1962:	df 92       	push	r13
    1964:	ef 92       	push	r14
    1966:	ff 92       	push	r15
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	7c 01       	movw	r14, r24
	char *comment=0;	// comment pointer - first char past opening paren
	uint8_t i=0; 		// index for incoming characters
	uint8_t j=0;		// index for normalized characters

	// discard deleted block
	if (block[0] == '/') {
    1972:	fc 01       	movw	r30, r24
    1974:	80 81       	ld	r24, Z
    1976:	8f 32       	cpi	r24, 0x2F	; 47
    1978:	19 f0       	breq	.+6      	; 0x1980 <gc_gcode_parser+0x1e>
    197a:	00 e0       	ldi	r16, 0x00	; 0
    197c:	dd 24       	eor	r13, r13
    197e:	2a c0       	rjmp	.+84     	; 0x19d4 <gc_gcode_parser+0x72>
		block[0] = 0;
    1980:	f7 01       	movw	r30, r14
    1982:	10 82       	st	Z, r1
    1984:	6c c0       	rjmp	.+216    	; 0x1a5e <gc_gcode_parser+0xfc>
		return;
	}
	// normalize the comamnd block & mark the comment(if any)
	while ((c = toupper(block[i++])) != 0) {// NUL character
    1986:	d3 94       	inc	r13
		if ((isupper(c)) || (isdigit(c))) {	// capture common chars
    1988:	81 2f       	mov	r24, r17
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 f1 3b 	call	0x77e2	; 0x77e2 <isupper>
    1990:	89 2b       	or	r24, r25
    1992:	d9 f4       	brne	.+54     	; 0x19ca <gc_gcode_parser+0x68>
    1994:	81 2f       	mov	r24, r17
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	c0 97       	sbiw	r24, 0x30	; 48
    199a:	0a 97       	sbiw	r24, 0x0a	; 10
    199c:	b0 f0       	brcs	.+44     	; 0x19ca <gc_gcode_parser+0x68>
		 	block[j++] = c; 
			continue;
		}
		if (c == '(') {						// detect & handle comments
    199e:	18 32       	cpi	r17, 0x28	; 40
    19a0:	41 f4       	brne	.+16     	; 0x19b2 <gc_gcode_parser+0x50>
			block[j] = 0;
    19a2:	f7 01       	movw	r30, r14
    19a4:	e0 0f       	add	r30, r16
    19a6:	f1 1d       	adc	r31, r1
    19a8:	10 82       	st	Z, r1
			comment = &block[i]; 
    19aa:	e7 01       	movw	r28, r14
    19ac:	cd 0d       	add	r28, r13
    19ae:	d1 1d       	adc	r29, r1
    19b0:	1d c0       	rjmp	.+58     	; 0x19ec <gc_gcode_parser+0x8a>
			break;
		}
		if (c <= ' ') continue;				// toss controls & whitespace
    19b2:	11 32       	cpi	r17, 0x21	; 33
    19b4:	78 f0       	brcs	.+30     	; 0x19d4 <gc_gcode_parser+0x72>
		if (c == 0x7F) continue;			// toss DELETE
    19b6:	1f 37       	cpi	r17, 0x7F	; 127
    19b8:	69 f0       	breq	.+26     	; 0x19d4 <gc_gcode_parser+0x72>
		if (strchr("!$%,;:?@^_~`\'\"", c))	// toss invalid punctuation
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	90 e2       	ldi	r25, 0x20	; 32
    19be:	61 2f       	mov	r22, r17
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	0e 94 2d 3c 	call	0x785a	; 0x785a <strchr>
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	29 f4       	brne	.+10     	; 0x19d4 <gc_gcode_parser+0x72>
			continue;
		block[j++] = c;
    19ca:	f7 01       	movw	r30, r14
    19cc:	e0 0f       	add	r30, r16
    19ce:	f1 1d       	adc	r31, r1
    19d0:	10 83       	st	Z, r17
    19d2:	0f 5f       	subi	r16, 0xFF	; 255
	if (block[0] == '/') {
		block[0] = 0;
		return;
	}
	// normalize the comamnd block & mark the comment(if any)
	while ((c = toupper(block[i++])) != 0) {// NUL character
    19d4:	f7 01       	movw	r30, r14
    19d6:	ed 0d       	add	r30, r13
    19d8:	f1 1d       	adc	r31, r1
    19da:	80 81       	ld	r24, Z
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 02 3c 	call	0x7804	; 0x7804 <toupper>
    19e2:	18 2f       	mov	r17, r24
    19e4:	88 23       	and	r24, r24
    19e6:	79 f6       	brne	.-98     	; 0x1986 <gc_gcode_parser+0x24>
    19e8:	c0 e0       	ldi	r28, 0x00	; 0
    19ea:	d0 e0       	ldi	r29, 0x00	; 0
		if (c == 0x7F) continue;			// toss DELETE
		if (strchr("!$%,;:?@^_~`\'\"", c))	// toss invalid punctuation
			continue;
		block[j++] = c;
	}
	block[j] = 0;							// nul terminate the command
    19ec:	f7 01       	movw	r30, r14
    19ee:	e0 0f       	add	r30, r16
    19f0:	f1 1d       	adc	r31, r1
    19f2:	10 82       	st	Z, r1
	if (comment) {
    19f4:	20 97       	sbiw	r28, 0x00	; 0
    19f6:	99 f1       	breq	.+102    	; 0x1a5e <gc_gcode_parser+0xfc>
		if ((toupper(comment[0]) == 'M') && 
    19f8:	88 81       	ld	r24, Y
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 02 3c 	call	0x7804	; 0x7804 <toupper>
    1a00:	8d 34       	cpi	r24, 0x4D	; 77
    1a02:	91 05       	cpc	r25, r1
    1a04:	61 f5       	brne	.+88     	; 0x1a5e <gc_gcode_parser+0xfc>
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0e 94 02 3c 	call	0x7804	; 0x7804 <toupper>
    1a0e:	83 35       	cpi	r24, 0x53	; 83
    1a10:	91 05       	cpc	r25, r1
    1a12:	29 f5       	brne	.+74     	; 0x1a5e <gc_gcode_parser+0xfc>
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 02 3c 	call	0x7804	; 0x7804 <toupper>
    1a1c:	87 34       	cpi	r24, 0x47	; 71
    1a1e:	91 05       	cpc	r25, r1
    1a20:	f1 f4       	brne	.+60     	; 0x1a5e <gc_gcode_parser+0xfc>
    1a22:	04 c0       	rjmp	.+8      	; 0x1a2c <gc_gcode_parser+0xca>
			(toupper(comment[1]) == 'S') &&
			(toupper(comment[2]) == 'G')) {
			i=0;
			while ((c = comment[i++]) != 0) {// remove trailing parenthesis
				if (c == ')') {
    1a24:	99 32       	cpi	r25, 0x29	; 41
    1a26:	19 f4       	brne	.+6      	; 0x1a2e <gc_gcode_parser+0xcc>
					comment[--i] = 0;
    1a28:	10 82       	st	Z, r1
    1a2a:	08 c0       	rjmp	.+16     	; 0x1a3c <gc_gcode_parser+0xda>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
	if (comment) {
		if ((toupper(comment[0]) == 'M') && 
			(toupper(comment[1]) == 'S') &&
			(toupper(comment[2]) == 'G')) {
			i=0;
			while ((c = comment[i++]) != 0) {// remove trailing parenthesis
    1a2e:	fe 01       	movw	r30, r28
    1a30:	e8 0f       	add	r30, r24
    1a32:	f1 1d       	adc	r31, r1
    1a34:	90 81       	ld	r25, Z
    1a36:	8f 5f       	subi	r24, 0xFF	; 255
    1a38:	99 23       	and	r25, r25
    1a3a:	a1 f7       	brne	.-24     	; 0x1a24 <gc_gcode_parser+0xc2>
				if (c == ')') {
					comment[--i] = 0;
					break;
				}
			}
			printf_P(PSTR("%s\n"), (comment+3));
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <gc_gcode_parser+0xdc>
    1a3e:	0f 92       	push	r0
    1a40:	8b e3       	ldi	r24, 0x3B	; 59
    1a42:	92 e0       	ldi	r25, 0x02	; 2
    1a44:	ed b7       	in	r30, 0x3d	; 61
    1a46:	fe b7       	in	r31, 0x3e	; 62
    1a48:	81 83       	std	Z+1, r24	; 0x01
    1a4a:	92 83       	std	Z+2, r25	; 0x02
    1a4c:	23 96       	adiw	r28, 0x03	; 3
    1a4e:	c3 83       	std	Z+3, r28	; 0x03
    1a50:	d4 83       	std	Z+4, r29	; 0x04
    1a52:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
 */

uint8_t gc_gcode_parser(char *block)
{
	_gc_normalize_gcode_block(block);
	if (block[0] == 0) { 					// ignore comments (stripped)
    1a5e:	f7 01       	movw	r30, r14
    1a60:	80 81       	ld	r24, Z
    1a62:	88 23       	and	r24, r24
    1a64:	71 f0       	breq	.+28     	; 0x1a82 <gc_gcode_parser+0x120>
		return(TG_OK);
	}
	if (block[0] == 'Q') {					// quit gcode mode
    1a66:	81 35       	cpi	r24, 0x51	; 81
    1a68:	11 f4       	brne	.+4      	; 0x1a6e <gc_gcode_parser+0x10c>
    1a6a:	8b e0       	ldi	r24, 0x0B	; 11
    1a6c:	0a c0       	rjmp	.+20     	; 0x1a82 <gc_gcode_parser+0x120>
		return(TG_QUIT);
	}
	gc.status = gc_execute_block(block);	// execute gcode block
    1a6e:	c7 01       	movw	r24, r14
    1a70:	0e 94 81 07 	call	0xf02	; 0xf02 <gc_execute_block>
    1a74:	80 93 10 21 	sts	0x2110, r24
	tg_print_status(gc.status, block);
    1a78:	b7 01       	movw	r22, r14
    1a7a:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <tg_print_status>
	return (gc.status);
    1a7e:	80 91 10 21 	lds	r24, 0x2110
}
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	ff 90       	pop	r15
    1a8c:	ef 90       	pop	r14
    1a8e:	df 90       	pop	r13
    1a90:	08 95       	ret

00001a92 <gc_send_to_parser>:
 *	Inject a block into parser taking gcode command processing state into account
 */

void gc_send_to_parser(char *block)
{
	gc_gcode_parser(block);
    1a92:	0e 94 b1 0c 	call	0x1962	; 0x1962 <gc_gcode_parser>
	return;
}
    1a96:	08 95       	ret

00001a98 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    1a98:	cf 92       	push	r12
    1a9a:	df 92       	push	r13
    1a9c:	ef 92       	push	r14
    1a9e:	ff 92       	push	r15
    1aa0:	0f 93       	push	r16
    1aa2:	1f 93       	push	r17
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
    1aa8:	cf e5       	ldi	r28, 0x5F	; 95
    1aaa:	d2 e2       	ldi	r29, 0x22	; 34
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    1aac:	68 81       	ld	r22, Y
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	88 27       	eor	r24, r24
    1ab2:	77 fd       	sbrc	r23, 7
    1ab4:	80 95       	com	r24
    1ab6:	98 2f       	mov	r25, r24
    1ab8:	0e 94 24 36 	call	0x6c48	; 0x6c48 <__floatsisf>
    1abc:	9b 01       	movw	r18, r22
    1abe:	ac 01       	movw	r20, r24
    1ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac2:	78 85       	ldd	r23, Y+8	; 0x08
    1ac4:	89 85       	ldd	r24, Y+9	; 0x09
    1ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac8:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    1acc:	9b 01       	movw	r18, r22
    1ace:	ac 01       	movw	r20, r24
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	84 eb       	ldi	r24, 0xB4	; 180
    1ad6:	93 e4       	ldi	r25, 0x43	; 67
    1ad8:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    1adc:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ade:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ae0:	4d 85       	ldd	r20, Y+13	; 0x0d
    1ae2:	5e 85       	ldd	r21, Y+14	; 0x0e
    1ae4:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    1ae8:	6b 8b       	std	Y+19, r22	; 0x13
    1aea:	7c 8b       	std	Y+20, r23	; 0x14
    1aec:	8d 8b       	std	Y+21, r24	; 0x15
    1aee:	9e 8b       	std	Y+22, r25	; 0x16
    1af0:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    1af2:	82 e2       	ldi	r24, 0x22	; 34
    1af4:	cf 3b       	cpi	r28, 0xBF	; 191
    1af6:	d8 07       	cpc	r29, r24
    1af8:	c9 f6       	brne	.-78     	; 0x1aac <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    1afa:	00 91 5f 22 	lds	r16, 0x225F
    1afe:	10 e0       	ldi	r17, 0x00	; 0
    1b00:	b8 01       	movw	r22, r16
    1b02:	88 27       	eor	r24, r24
    1b04:	77 fd       	sbrc	r23, 7
    1b06:	80 95       	com	r24
    1b08:	98 2f       	mov	r25, r24
    1b0a:	0e 94 24 36 	call	0x6c48	; 0x6c48 <__floatsisf>
    1b0e:	9b 01       	movw	r18, r22
    1b10:	ac 01       	movw	r20, r24
    1b12:	60 91 66 22 	lds	r22, 0x2266
    1b16:	70 91 67 22 	lds	r23, 0x2267
    1b1a:	80 91 68 22 	lds	r24, 0x2268
    1b1e:	90 91 69 22 	lds	r25, 0x2269
    1b22:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    1b26:	9b 01       	movw	r18, r22
    1b28:	ac 01       	movw	r20, r24
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	84 eb       	ldi	r24, 0xB4	; 180
    1b30:	93 e4       	ldi	r25, 0x43	; 67
    1b32:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    1b36:	6b 01       	movw	r12, r22
    1b38:	7c 01       	movw	r14, r24
    1b3a:	80 91 64 22 	lds	r24, 0x2264
    1b3e:	90 91 65 22 	lds	r25, 0x2265
    1b42:	08 9f       	mul	r16, r24
    1b44:	b0 01       	movw	r22, r0
    1b46:	09 9f       	mul	r16, r25
    1b48:	70 0d       	add	r23, r0
    1b4a:	18 9f       	mul	r17, r24
    1b4c:	70 0d       	add	r23, r0
    1b4e:	11 24       	eor	r1, r1
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 22 36 	call	0x6c44	; 0x6c44 <__floatunsisf>
    1b58:	a7 01       	movw	r20, r14
    1b5a:	96 01       	movw	r18, r12
    1b5c:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    1b60:	60 93 57 22 	sts	0x2257, r22
    1b64:	70 93 58 22 	sts	0x2258, r23
    1b68:	80 93 59 22 	sts	0x2259, r24
    1b6c:	90 93 5a 22 	sts	0x225A, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    1b70:	80 91 62 22 	lds	r24, 0x2262
    1b74:	90 91 63 22 	lds	r25, 0x2263
    1b78:	08 9f       	mul	r16, r24
    1b7a:	b0 01       	movw	r22, r0
    1b7c:	09 9f       	mul	r16, r25
    1b7e:	70 0d       	add	r23, r0
    1b80:	18 9f       	mul	r17, r24
    1b82:	70 0d       	add	r23, r0
    1b84:	11 24       	eor	r1, r1
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	0e 94 22 36 	call	0x6c44	; 0x6c44 <__floatunsisf>
    1b8e:	a7 01       	movw	r20, r14
    1b90:	96 01       	movw	r18, r12
    1b92:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    1b96:	60 93 5b 22 	sts	0x225B, r22
    1b9a:	70 93 5c 22 	sts	0x225C, r23
    1b9e:	80 93 5d 22 	sts	0x225D, r24
    1ba2:	90 93 5e 22 	sts	0x225E, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	ff 90       	pop	r15
    1bb0:	ef 90       	pop	r14
    1bb2:	df 90       	pop	r13
    1bb4:	cf 90       	pop	r12
    1bb6:	08 95       	ret

00001bb8 <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    1bb8:	e1 e5       	ldi	r30, 0x51	; 81
    1bba:	f2 e2       	ldi	r31, 0x22	; 34
    1bbc:	84 e6       	ldi	r24, 0x64	; 100
    1bbe:	80 93 51 22 	sts	0x2251, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    1bc2:	8d ec       	ldi	r24, 0xCD	; 205
    1bc4:	9c ec       	ldi	r25, 0xCC	; 204
    1bc6:	ac e4       	ldi	r26, 0x4C	; 76
    1bc8:	bd e3       	ldi	r27, 0x3D	; 61
    1bca:	80 93 53 22 	sts	0x2253, r24
    1bce:	90 93 54 22 	sts	0x2254, r25
    1bd2:	a0 93 55 22 	sts	0x2255, r26
    1bd6:	b0 93 56 22 	sts	0x2256, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    1bda:	8c ed       	ldi	r24, 0xDC	; 220
    1bdc:	95 e0       	ldi	r25, 0x05	; 5
    1bde:	80 93 62 22 	sts	0x2262, r24
    1be2:	90 93 63 22 	sts	0x2263, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    1be6:	80 93 7a 22 	sts	0x227A, r24
    1bea:	90 93 7b 22 	sts	0x227B, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    1bee:	80 93 92 22 	sts	0x2292, r24
    1bf2:	90 93 93 22 	sts	0x2293, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    1bf6:	80 93 aa 22 	sts	0x22AA, r24
    1bfa:	90 93 ab 22 	sts	0x22AB, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    1bfe:	80 93 64 22 	sts	0x2264, r24
    1c02:	90 93 65 22 	sts	0x2265, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    1c06:	80 93 7c 22 	sts	0x227C, r24
    1c0a:	90 93 7d 22 	sts	0x227D, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    1c0e:	80 93 94 22 	sts	0x2294, r24
    1c12:	90 93 95 22 	sts	0x2295, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    1c16:	80 93 ac 22 	sts	0x22AC, r24
    1c1a:	90 93 ad 22 	sts	0x22AD, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    1c1e:	86 e6       	ldi	r24, 0x66	; 102
    1c20:	96 e6       	ldi	r25, 0x66	; 102
    1c22:	a6 ee       	ldi	r26, 0xE6	; 230
    1c24:	bf e3       	ldi	r27, 0x3F	; 63
    1c26:	80 93 66 22 	sts	0x2266, r24
    1c2a:	90 93 67 22 	sts	0x2267, r25
    1c2e:	a0 93 68 22 	sts	0x2268, r26
    1c32:	b0 93 69 22 	sts	0x2269, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    1c36:	80 93 7e 22 	sts	0x227E, r24
    1c3a:	90 93 7f 22 	sts	0x227F, r25
    1c3e:	a0 93 80 22 	sts	0x2280, r26
    1c42:	b0 93 81 22 	sts	0x2281, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    1c46:	80 93 96 22 	sts	0x2296, r24
    1c4a:	90 93 97 22 	sts	0x2297, r25
    1c4e:	a0 93 98 22 	sts	0x2298, r26
    1c52:	b0 93 99 22 	sts	0x2299, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    1c56:	80 93 ae 22 	sts	0x22AE, r24
    1c5a:	90 93 af 22 	sts	0x22AF, r25
    1c5e:	a0 93 b0 22 	sts	0x22B0, r26
    1c62:	b0 93 b1 22 	sts	0x22B1, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    1c66:	8c e5       	ldi	r24, 0x5C	; 92
    1c68:	9f e8       	ldi	r25, 0x8F	; 143
    1c6a:	a2 ea       	ldi	r26, 0xA2	; 162
    1c6c:	bf e3       	ldi	r27, 0x3F	; 63
    1c6e:	80 93 6a 22 	sts	0x226A, r24
    1c72:	90 93 6b 22 	sts	0x226B, r25
    1c76:	a0 93 6c 22 	sts	0x226C, r26
    1c7a:	b0 93 6d 22 	sts	0x226D, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    1c7e:	80 93 82 22 	sts	0x2282, r24
    1c82:	90 93 83 22 	sts	0x2283, r25
    1c86:	a0 93 84 22 	sts	0x2284, r26
    1c8a:	b0 93 85 22 	sts	0x2285, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    1c8e:	80 93 9a 22 	sts	0x229A, r24
    1c92:	90 93 9b 22 	sts	0x229B, r25
    1c96:	a0 93 9c 22 	sts	0x229C, r26
    1c9a:	b0 93 9d 22 	sts	0x229D, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    1c9e:	80 93 b2 22 	sts	0x22B2, r24
    1ca2:	90 93 b3 22 	sts	0x22B3, r25
    1ca6:	a0 93 b4 22 	sts	0x22B4, r26
    1caa:	b0 93 b5 22 	sts	0x22B5, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a8 ec       	ldi	r26, 0xC8	; 200
    1cb4:	b3 e4       	ldi	r27, 0x43	; 67
    1cb6:	80 93 6e 22 	sts	0x226E, r24
    1cba:	90 93 6f 22 	sts	0x226F, r25
    1cbe:	a0 93 70 22 	sts	0x2270, r26
    1cc2:	b0 93 71 22 	sts	0x2271, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    1cc6:	80 93 86 22 	sts	0x2286, r24
    1cca:	90 93 87 22 	sts	0x2287, r25
    1cce:	a0 93 88 22 	sts	0x2288, r26
    1cd2:	b0 93 89 22 	sts	0x2289, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a6 e9       	ldi	r26, 0x96	; 150
    1cdc:	b3 e4       	ldi	r27, 0x43	; 67
    1cde:	80 93 9e 22 	sts	0x229E, r24
    1ce2:	90 93 9f 22 	sts	0x229F, r25
    1ce6:	a0 93 a0 22 	sts	0x22A0, r26
    1cea:	b0 93 a1 22 	sts	0x22A1, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	a0 e8       	ldi	r26, 0x80	; 128
    1cf4:	bf eb       	ldi	r27, 0xBF	; 191
    1cf6:	80 93 b6 22 	sts	0x22B6, r24
    1cfa:	90 93 b7 22 	sts	0x22B7, r25
    1cfe:	a0 93 b8 22 	sts	0x22B8, r26
    1d02:	b0 93 b9 22 	sts	0x22B9, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    1d06:	88 e0       	ldi	r24, 0x08	; 8
    1d08:	80 93 5f 22 	sts	0x225F, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    1d0c:	80 93 77 22 	sts	0x2277, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    1d10:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A].microstep = A_MICROSTEPS;
    1d12:	80 93 a7 22 	sts	0x22A7, r24

	cfg.a[X].polarity = X_POLARITY;
    1d16:	10 92 61 22 	sts	0x2261, r1
	cfg.a[Y].polarity = Y_POLARITY;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	80 93 79 22 	sts	0x2279, r24
	cfg.a[Z].polarity = Z_POLARITY;
    1d20:	10 92 91 22 	sts	0x2291, r1
	cfg.a[A].polarity = A_POLARITY;
    1d24:	10 92 a9 22 	sts	0x22A9, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    1d28:	80 93 76 22 	sts	0x2276, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    1d2c:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    1d2e:	80 93 a6 22 	sts	0x22A6, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    1d32:	10 92 be 22 	sts	0x22BE, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    1d36:	80 93 60 22 	sts	0x2260, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    1d3a:	80 93 78 22 	sts	0x2278, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    1d3e:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    1d40:	80 93 a8 22 	sts	0x22A8, r24

	_cfg_computed();		// generate computed values from the above
    1d44:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <_cfg_computed>
}
    1d48:	08 95       	ret

00001d4a <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    1d4a:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <cfg_reset>
}
    1d4e:	08 95       	ret

00001d50 <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	61 e5       	ldi	r22, 0x51	; 81
    1d56:	72 e2       	ldi	r23, 0x22	; 34
    1d58:	4e e6       	ldi	r20, 0x6E	; 110
    1d5a:	50 e0       	ldi	r21, 0x00	; 0
    1d5c:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <memcpy_to_eeprom_with_checksum>
}
    1d60:	08 95       	ret

00001d62 <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    1d6a:	84 36       	cpi	r24, 0x64	; 100
    1d6c:	19 f0       	breq	.+6      	; 0x1d74 <cfg_read+0x12>
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	0d c0       	rjmp	.+26     	; 0x1d8e <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    1d74:	81 e5       	ldi	r24, 0x51	; 81
    1d76:	92 e2       	ldi	r25, 0x22	; 34
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	4e e6       	ldi	r20, 0x6E	; 110
    1d7e:	50 e0       	ldi	r21, 0x00	; 0
    1d80:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <memcpy_from_eeprom_with_checksum>
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	11 f0       	breq	.+4      	; 0x1d8c <cfg_read+0x2a>
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    1d8e:	c9 01       	movw	r24, r18
    1d90:	08 95       	ret

00001d92 <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    1d92:	ef 92       	push	r14
    1d94:	ff 92       	push	r15
    1d96:	0f 93       	push	r16
    1d98:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    1d9a:	e8 2e       	mov	r14, r24
    1d9c:	ff 24       	eor	r15, r15
    1d9e:	87 01       	movw	r16, r14
    1da0:	00 0f       	add	r16, r16
    1da2:	11 1f       	adc	r17, r17
    1da4:	f8 01       	movw	r30, r16
    1da6:	e9 5b       	subi	r30, 0xB9	; 185
    1da8:	fd 4f       	sbci	r31, 0xFD	; 253
    1daa:	25 91       	lpm	r18, Z+
    1dac:	34 91       	lpm	r19, Z+
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <_cfg_dump_axis+0x1e>
    1db0:	0f 92       	push	r0
    1db2:	83 ea       	ldi	r24, 0xA3	; 163
    1db4:	95 e0       	ldi	r25, 0x05	; 5
    1db6:	ad b7       	in	r26, 0x3d	; 61
    1db8:	be b7       	in	r27, 0x3e	; 62
    1dba:	11 96       	adiw	r26, 0x01	; 1
    1dbc:	8d 93       	st	X+, r24
    1dbe:	9c 93       	st	X, r25
    1dc0:	12 97       	sbiw	r26, 0x02	; 2
    1dc2:	13 96       	adiw	r26, 0x03	; 3
    1dc4:	2d 93       	st	X+, r18
    1dc6:	3c 93       	st	X, r19
    1dc8:	14 97       	sbiw	r26, 0x04	; 4
    1dca:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    1dce:	8b e6       	ldi	r24, 0x6B	; 107
    1dd0:	95 e0       	ldi	r25, 0x05	; 5
    1dd2:	ed b7       	in	r30, 0x3d	; 61
    1dd4:	fe b7       	in	r31, 0x3e	; 62
    1dd6:	81 83       	std	Z+1, r24	; 0x01
    1dd8:	92 83       	std	Z+2, r25	; 0x02
    1dda:	0e 0d       	add	r16, r14
    1ddc:	1f 1d       	adc	r17, r15
    1dde:	83 e0       	ldi	r24, 0x03	; 3
    1de0:	00 0f       	add	r16, r16
    1de2:	11 1f       	adc	r17, r17
    1de4:	8a 95       	dec	r24
    1de6:	e1 f7       	brne	.-8      	; 0x1de0 <_cfg_dump_axis+0x4e>
    1de8:	0f 5a       	subi	r16, 0xAF	; 175
    1dea:	1d 4d       	sbci	r17, 0xDD	; 221
    1dec:	d8 01       	movw	r26, r16
    1dee:	51 96       	adiw	r26, 0x11	; 17
    1df0:	8d 91       	ld	r24, X+
    1df2:	9c 91       	ld	r25, X
    1df4:	52 97       	sbiw	r26, 0x12	; 18
    1df6:	83 83       	std	Z+3, r24	; 0x03
    1df8:	94 83       	std	Z+4, r25	; 0x04
    1dfa:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    1dfe:	83 e3       	ldi	r24, 0x33	; 51
    1e00:	95 e0       	ldi	r25, 0x05	; 5
    1e02:	ed b7       	in	r30, 0x3d	; 61
    1e04:	fe b7       	in	r31, 0x3e	; 62
    1e06:	81 83       	std	Z+1, r24	; 0x01
    1e08:	92 83       	std	Z+2, r25	; 0x02
    1e0a:	d8 01       	movw	r26, r16
    1e0c:	53 96       	adiw	r26, 0x13	; 19
    1e0e:	8d 91       	ld	r24, X+
    1e10:	9c 91       	ld	r25, X
    1e12:	54 97       	sbiw	r26, 0x14	; 20
    1e14:	83 83       	std	Z+3, r24	; 0x03
    1e16:	94 83       	std	Z+4, r25	; 0x04
    1e18:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    1e1c:	ed b7       	in	r30, 0x3d	; 61
    1e1e:	fe b7       	in	r31, 0x3e	; 62
    1e20:	31 96       	adiw	r30, 0x01	; 1
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	95 e0       	ldi	r25, 0x05	; 5
    1e26:	ad b7       	in	r26, 0x3d	; 61
    1e28:	be b7       	in	r27, 0x3e	; 62
    1e2a:	11 96       	adiw	r26, 0x01	; 1
    1e2c:	8d 93       	st	X+, r24
    1e2e:	9c 93       	st	X, r25
    1e30:	12 97       	sbiw	r26, 0x02	; 2
    1e32:	d8 01       	movw	r26, r16
    1e34:	1e 96       	adiw	r26, 0x0e	; 14
    1e36:	8c 91       	ld	r24, X
    1e38:	82 83       	std	Z+2, r24	; 0x02
    1e3a:	13 82       	std	Z+3, r1	; 0x03
    1e3c:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    1e40:	0f 92       	push	r0
    1e42:	0f 92       	push	r0
    1e44:	89 ec       	ldi	r24, 0xC9	; 201
    1e46:	94 e0       	ldi	r25, 0x04	; 4
    1e48:	ed b7       	in	r30, 0x3d	; 61
    1e4a:	fe b7       	in	r31, 0x3e	; 62
    1e4c:	81 83       	std	Z+1, r24	; 0x01
    1e4e:	92 83       	std	Z+2, r25	; 0x02
    1e50:	f8 01       	movw	r30, r16
    1e52:	85 89       	ldd	r24, Z+21	; 0x15
    1e54:	96 89       	ldd	r25, Z+22	; 0x16
    1e56:	a7 89       	ldd	r26, Z+23	; 0x17
    1e58:	b0 8d       	ldd	r27, Z+24	; 0x18
    1e5a:	ed b7       	in	r30, 0x3d	; 61
    1e5c:	fe b7       	in	r31, 0x3e	; 62
    1e5e:	83 83       	std	Z+3, r24	; 0x03
    1e60:	94 83       	std	Z+4, r25	; 0x04
    1e62:	a5 83       	std	Z+5, r26	; 0x05
    1e64:	b6 83       	std	Z+6, r27	; 0x06
    1e66:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    1e6a:	86 e9       	ldi	r24, 0x96	; 150
    1e6c:	94 e0       	ldi	r25, 0x04	; 4
    1e6e:	ad b7       	in	r26, 0x3d	; 61
    1e70:	be b7       	in	r27, 0x3e	; 62
    1e72:	11 96       	adiw	r26, 0x01	; 1
    1e74:	8d 93       	st	X+, r24
    1e76:	9c 93       	st	X, r25
    1e78:	12 97       	sbiw	r26, 0x02	; 2
    1e7a:	f8 01       	movw	r30, r16
    1e7c:	81 8d       	ldd	r24, Z+25	; 0x19
    1e7e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e80:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1e82:	b4 8d       	ldd	r27, Z+28	; 0x1c
    1e84:	ed b7       	in	r30, 0x3d	; 61
    1e86:	fe b7       	in	r31, 0x3e	; 62
    1e88:	83 83       	std	Z+3, r24	; 0x03
    1e8a:	94 83       	std	Z+4, r25	; 0x04
    1e8c:	a5 83       	std	Z+5, r26	; 0x05
    1e8e:	b6 83       	std	Z+6, r27	; 0x06
    1e90:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    1e94:	83 e6       	ldi	r24, 0x63	; 99
    1e96:	94 e0       	ldi	r25, 0x04	; 4
    1e98:	ad b7       	in	r26, 0x3d	; 61
    1e9a:	be b7       	in	r27, 0x3e	; 62
    1e9c:	11 96       	adiw	r26, 0x01	; 1
    1e9e:	8d 93       	st	X+, r24
    1ea0:	9c 93       	st	X, r25
    1ea2:	12 97       	sbiw	r26, 0x02	; 2
    1ea4:	f8 01       	movw	r30, r16
    1ea6:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ea8:	96 8d       	ldd	r25, Z+30	; 0x1e
    1eaa:	a7 8d       	ldd	r26, Z+31	; 0x1f
    1eac:	b0 a1       	ldd	r27, Z+32	; 0x20
    1eae:	ed b7       	in	r30, 0x3d	; 61
    1eb0:	fe b7       	in	r31, 0x3e	; 62
    1eb2:	83 83       	std	Z+3, r24	; 0x03
    1eb4:	94 83       	std	Z+4, r25	; 0x04
    1eb6:	a5 83       	std	Z+5, r26	; 0x05
    1eb8:	b6 83       	std	Z+6, r27	; 0x06
    1eba:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	ed b7       	in	r30, 0x3d	; 61
    1ec4:	fe b7       	in	r31, 0x3e	; 62
    1ec6:	31 96       	adiw	r30, 0x01	; 1
    1ec8:	82 e3       	ldi	r24, 0x32	; 50
    1eca:	94 e0       	ldi	r25, 0x04	; 4
    1ecc:	ad b7       	in	r26, 0x3d	; 61
    1ece:	be b7       	in	r27, 0x3e	; 62
    1ed0:	11 96       	adiw	r26, 0x01	; 1
    1ed2:	8d 93       	st	X+, r24
    1ed4:	9c 93       	st	X, r25
    1ed6:	12 97       	sbiw	r26, 0x02	; 2
    1ed8:	d8 01       	movw	r26, r16
    1eda:	95 96       	adiw	r26, 0x25	; 37
    1edc:	8c 91       	ld	r24, X
    1ede:	82 83       	std	Z+2, r24	; 0x02
    1ee0:	13 82       	std	Z+3, r1	; 0x03
    1ee2:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    1ee6:	ed b7       	in	r30, 0x3d	; 61
    1ee8:	fe b7       	in	r31, 0x3e	; 62
    1eea:	31 96       	adiw	r30, 0x01	; 1
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	94 e0       	ldi	r25, 0x04	; 4
    1ef0:	ad b7       	in	r26, 0x3d	; 61
    1ef2:	be b7       	in	r27, 0x3e	; 62
    1ef4:	11 96       	adiw	r26, 0x01	; 1
    1ef6:	8d 93       	st	X+, r24
    1ef8:	9c 93       	st	X, r25
    1efa:	12 97       	sbiw	r26, 0x02	; 2
    1efc:	d8 01       	movw	r26, r16
    1efe:	1f 96       	adiw	r26, 0x0f	; 15
    1f00:	8c 91       	ld	r24, X
    1f02:	82 83       	std	Z+2, r24	; 0x02
    1f04:	13 82       	std	Z+3, r1	; 0x03
    1f06:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    1f0a:	ed b7       	in	r30, 0x3d	; 61
    1f0c:	fe b7       	in	r31, 0x3e	; 62
    1f0e:	31 96       	adiw	r30, 0x01	; 1
    1f10:	81 ed       	ldi	r24, 0xD1	; 209
    1f12:	93 e0       	ldi	r25, 0x03	; 3
    1f14:	ad b7       	in	r26, 0x3d	; 61
    1f16:	be b7       	in	r27, 0x3e	; 62
    1f18:	11 96       	adiw	r26, 0x01	; 1
    1f1a:	8d 93       	st	X+, r24
    1f1c:	9c 93       	st	X, r25
    1f1e:	12 97       	sbiw	r26, 0x02	; 2
    1f20:	d8 01       	movw	r26, r16
    1f22:	50 96       	adiw	r26, 0x10	; 16
    1f24:	8c 91       	ld	r24, X
    1f26:	82 83       	std	Z+2, r24	; 0x02
    1f28:	13 82       	std	Z+3, r1	; 0x03
    1f2a:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    1f2e:	0f 92       	push	r0
    1f30:	0f 92       	push	r0
    1f32:	8d e9       	ldi	r24, 0x9D	; 157
    1f34:	93 e0       	ldi	r25, 0x03	; 3
    1f36:	ed b7       	in	r30, 0x3d	; 61
    1f38:	fe b7       	in	r31, 0x3e	; 62
    1f3a:	81 83       	std	Z+1, r24	; 0x01
    1f3c:	92 83       	std	Z+2, r25	; 0x02
    1f3e:	f8 01       	movw	r30, r16
    1f40:	81 a1       	ldd	r24, Z+33	; 0x21
    1f42:	92 a1       	ldd	r25, Z+34	; 0x22
    1f44:	a3 a1       	ldd	r26, Z+35	; 0x23
    1f46:	b4 a1       	ldd	r27, Z+36	; 0x24
    1f48:	ed b7       	in	r30, 0x3d	; 61
    1f4a:	fe b7       	in	r31, 0x3e	; 62
    1f4c:	83 83       	std	Z+3, r24	; 0x03
    1f4e:	94 83       	std	Z+4, r25	; 0x04
    1f50:	a5 83       	std	Z+5, r26	; 0x05
    1f52:	b6 83       	std	Z+6, r27	; 0x06
    1f54:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
    1f58:	8d b7       	in	r24, 0x3d	; 61
    1f5a:	9e b7       	in	r25, 0x3e	; 62
    1f5c:	06 96       	adiw	r24, 0x06	; 6
    1f5e:	8d bf       	out	0x3d, r24	; 61
    1f60:	9e bf       	out	0x3e, r25	; 62
}
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	ff 90       	pop	r15
    1f68:	ef 90       	pop	r14
    1f6a:	08 95       	ret

00001f6c <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    1f6c:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <cfg_dump+0x4>
    1f70:	0f 92       	push	r0
    1f72:	ed b7       	in	r30, 0x3d	; 61
    1f74:	fe b7       	in	r31, 0x3e	; 62
    1f76:	31 96       	adiw	r30, 0x01	; 1
    1f78:	87 e6       	ldi	r24, 0x67	; 103
    1f7a:	96 e0       	ldi	r25, 0x06	; 6
    1f7c:	ad b7       	in	r26, 0x3d	; 61
    1f7e:	be b7       	in	r27, 0x3e	; 62
    1f80:	11 96       	adiw	r26, 0x01	; 1
    1f82:	8d 93       	st	X+, r24
    1f84:	9c 93       	st	X, r25
    1f86:	12 97       	sbiw	r26, 0x02	; 2
    1f88:	80 91 51 22 	lds	r24, 0x2251
    1f8c:	82 83       	std	Z+2, r24	; 0x02
    1f8e:	13 82       	std	Z+3, r1	; 0x03
    1f90:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	80 e4       	ldi	r24, 0x40	; 64
    1f9a:	96 e0       	ldi	r25, 0x06	; 6
    1f9c:	ed b7       	in	r30, 0x3d	; 61
    1f9e:	fe b7       	in	r31, 0x3e	; 62
    1fa0:	81 83       	std	Z+1, r24	; 0x01
    1fa2:	92 83       	std	Z+2, r25	; 0x02
    1fa4:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <cfg_dump+0x3e>
    1faa:	0f 92       	push	r0
    1fac:	86 e1       	ldi	r24, 0x16	; 22
    1fae:	96 e0       	ldi	r25, 0x06	; 6
    1fb0:	ad b7       	in	r26, 0x3d	; 61
    1fb2:	be b7       	in	r27, 0x3e	; 62
    1fb4:	11 96       	adiw	r26, 0x01	; 1
    1fb6:	8d 93       	st	X+, r24
    1fb8:	9c 93       	st	X, r25
    1fba:	12 97       	sbiw	r26, 0x02	; 2
    1fbc:	80 91 53 22 	lds	r24, 0x2253
    1fc0:	90 91 54 22 	lds	r25, 0x2254
    1fc4:	a0 91 55 22 	lds	r26, 0x2255
    1fc8:	b0 91 56 22 	lds	r27, 0x2256
    1fcc:	ed b7       	in	r30, 0x3d	; 61
    1fce:	fe b7       	in	r31, 0x3e	; 62
    1fd0:	83 83       	std	Z+3, r24	; 0x03
    1fd2:	94 83       	std	Z+4, r25	; 0x04
    1fd4:	a5 83       	std	Z+5, r26	; 0x05
    1fd6:	b6 83       	std	Z+6, r27	; 0x06
    1fd8:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    1fdc:	8c ee       	ldi	r24, 0xEC	; 236
    1fde:	95 e0       	ldi	r25, 0x05	; 5
    1fe0:	ad b7       	in	r26, 0x3d	; 61
    1fe2:	be b7       	in	r27, 0x3e	; 62
    1fe4:	11 96       	adiw	r26, 0x01	; 1
    1fe6:	8d 93       	st	X+, r24
    1fe8:	9c 93       	st	X, r25
    1fea:	12 97       	sbiw	r26, 0x02	; 2
    1fec:	80 91 5b 22 	lds	r24, 0x225B
    1ff0:	90 91 5c 22 	lds	r25, 0x225C
    1ff4:	a0 91 5d 22 	lds	r26, 0x225D
    1ff8:	b0 91 5e 22 	lds	r27, 0x225E
    1ffc:	ed b7       	in	r30, 0x3d	; 61
    1ffe:	fe b7       	in	r31, 0x3e	; 62
    2000:	83 83       	std	Z+3, r24	; 0x03
    2002:	94 83       	std	Z+4, r25	; 0x04
    2004:	a5 83       	std	Z+5, r26	; 0x05
    2006:	b6 83       	std	Z+6, r27	; 0x06
    2008:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    200c:	81 ec       	ldi	r24, 0xC1	; 193
    200e:	95 e0       	ldi	r25, 0x05	; 5
    2010:	ad b7       	in	r26, 0x3d	; 61
    2012:	be b7       	in	r27, 0x3e	; 62
    2014:	11 96       	adiw	r26, 0x01	; 1
    2016:	8d 93       	st	X+, r24
    2018:	9c 93       	st	X, r25
    201a:	12 97       	sbiw	r26, 0x02	; 2
    201c:	80 91 57 22 	lds	r24, 0x2257
    2020:	90 91 58 22 	lds	r25, 0x2258
    2024:	a0 91 59 22 	lds	r26, 0x2259
    2028:	b0 91 5a 22 	lds	r27, 0x225A
    202c:	ed b7       	in	r30, 0x3d	; 61
    202e:	fe b7       	in	r31, 0x3e	; 62
    2030:	83 83       	std	Z+3, r24	; 0x03
    2032:	94 83       	std	Z+4, r25	; 0x04
    2034:	a5 83       	std	Z+5, r26	; 0x05
    2036:	b6 83       	std	Z+6, r27	; 0x06
    2038:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
    203c:	10 e0       	ldi	r17, 0x00	; 0
    203e:	8d b7       	in	r24, 0x3d	; 61
    2040:	9e b7       	in	r25, 0x3e	; 62
    2042:	06 96       	adiw	r24, 0x06	; 6
    2044:	8d bf       	out	0x3d, r24	; 61
    2046:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
		_cfg_dump_axis(axis);
    2048:	81 2f       	mov	r24, r17
    204a:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    204e:	1f 5f       	subi	r17, 0xFF	; 255
    2050:	14 30       	cpi	r17, 0x04	; 4
    2052:	d1 f7       	brne	.-12     	; 0x2048 <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    2054:	1f 91       	pop	r17
    2056:	08 95       	ret

00002058 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    2058:	cf 92       	push	r12
    205a:	df 92       	push	r13
    205c:	ef 92       	push	r14
    205e:	ff 92       	push	r15
    2060:	0f 93       	push	r16
    2062:	1f 93       	push	r17
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	0f 92       	push	r0
    206a:	0f 92       	push	r0
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    2072:	19 82       	std	Y+1, r1	; 0x01
    2074:	1a 82       	std	Y+2, r1	; 0x02
    2076:	cc 24       	eor	r12, r12
    2078:	dd 24       	eor	r13, r13
    207a:	00 e0       	ldi	r16, 0x00	; 0
    207c:	10 e0       	ldi	r17, 0x00	; 0
    207e:	22 c0       	rjmp	.+68     	; 0x20c4 <cfg_parse+0x6c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = toupper(text[i++])) != 0) {
		if (c == '=') {							// handle separator
    2080:	9d 33       	cpi	r25, 0x3D	; 61
    2082:	49 f4       	brne	.+18     	; 0x2096 <cfg_parse+0x3e>
			text[j++] = 0;						// terminate tag at separator
    2084:	f7 01       	movw	r30, r14
    2086:	e1 0f       	add	r30, r17
    2088:	f1 1d       	adc	r31, r1
    208a:	10 82       	st	Z, r1
    208c:	1f 5f       	subi	r17, 0xFF	; 255
			val = &text[j];						// new string starts at value
    208e:	67 01       	movw	r12, r14
    2090:	c1 0e       	add	r12, r17
    2092:	d1 1c       	adc	r13, r1
    2094:	17 c0       	rjmp	.+46     	; 0x20c4 <cfg_parse+0x6c>
		} else if ( (c == '-') || 				// capture special characters
    2096:	9d 32       	cpi	r25, 0x2D	; 45
    2098:	81 f0       	breq	.+32     	; 0x20ba <cfg_parse+0x62>
    209a:	9b 32       	cpi	r25, 0x2B	; 43
    209c:	71 f0       	breq	.+28     	; 0x20ba <cfg_parse+0x62>
    209e:	9e 32       	cpi	r25, 0x2E	; 46
    20a0:	61 f0       	breq	.+24     	; 0x20ba <cfg_parse+0x62>
    20a2:	9f 33       	cpi	r25, 0x3F	; 63
    20a4:	51 f0       	breq	.+20     	; 0x20ba <cfg_parse+0x62>
    20a6:	98 32       	cpi	r25, 0x28	; 40
    20a8:	41 f0       	breq	.+16     	; 0x20ba <cfg_parse+0x62>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'A' && c <= 'Z') {		// capture letters
    20aa:	89 2f       	mov	r24, r25
    20ac:	81 54       	subi	r24, 0x41	; 65
    20ae:	8a 31       	cpi	r24, 0x1A	; 26
    20b0:	20 f0       	brcs	.+8      	; 0x20ba <cfg_parse+0x62>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// capture numbers
    20b2:	89 2f       	mov	r24, r25
    20b4:	80 53       	subi	r24, 0x30	; 48
    20b6:	8a 30       	cpi	r24, 0x0A	; 10
    20b8:	28 f4       	brcc	.+10     	; 0x20c4 <cfg_parse+0x6c>
			text[j++] = c;
    20ba:	f7 01       	movw	r30, r14
    20bc:	e1 0f       	add	r30, r17
    20be:	f1 1d       	adc	r31, r1
    20c0:	90 83       	st	Z, r25
    20c2:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = toupper(text[i++])) != 0) {
    20c4:	f7 01       	movw	r30, r14
    20c6:	e0 0f       	add	r30, r16
    20c8:	f1 1d       	adc	r31, r1
    20ca:	0f 5f       	subi	r16, 0xFF	; 255
    20cc:	80 81       	ld	r24, Z
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	0e 94 02 3c 	call	0x7804	; 0x7804 <toupper>
    20d4:	98 2f       	mov	r25, r24
    20d6:	88 23       	and	r24, r24
    20d8:	99 f6       	brne	.-90     	; 0x2080 <cfg_parse+0x28>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// capture numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// nul terminate line
    20da:	f7 01       	movw	r30, r14
    20dc:	e1 0f       	add	r30, r17
    20de:	f1 1d       	adc	r31, r1
    20e0:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    20e2:	1f 5f       	subi	r17, 0xFF	; 255
    20e4:	c7 01       	movw	r24, r14
    20e6:	81 0f       	add	r24, r17
    20e8:	91 1d       	adc	r25, r1
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    20ee:	10 92 52 22 	sts	0x2252, r1
	switch (text[0]) {
    20f2:	f7 01       	movw	r30, r14
    20f4:	80 81       	ld	r24, Z
    20f6:	81 35       	cpi	r24, 0x51	; 81
    20f8:	d1 f0       	breq	.+52     	; 0x212e <cfg_parse+0xd6>
    20fa:	82 35       	cpi	r24, 0x52	; 82
    20fc:	60 f4       	brcc	.+24     	; 0x2116 <cfg_parse+0xbe>
    20fe:	81 34       	cpi	r24, 0x41	; 65
    2100:	59 f1       	breq	.+86     	; 0x2158 <cfg_parse+0x100>
    2102:	82 34       	cpi	r24, 0x42	; 66
    2104:	28 f4       	brcc	.+10     	; 0x2110 <cfg_parse+0xb8>
    2106:	88 32       	cpi	r24, 0x28	; 40
    2108:	11 f1       	breq	.+68     	; 0x214e <cfg_parse+0xf6>
    210a:	8f 33       	cpi	r24, 0x3F	; 63
    210c:	39 f5       	brne	.+78     	; 0x215c <cfg_parse+0x104>
    210e:	0c c0       	rjmp	.+24     	; 0x2128 <cfg_parse+0xd0>
    2110:	8d 34       	cpi	r24, 0x4D	; 77
    2112:	21 f5       	brne	.+72     	; 0x215c <cfg_parse+0x104>
    2114:	0e c0       	rjmp	.+28     	; 0x2132 <cfg_parse+0xda>
    2116:	89 35       	cpi	r24, 0x59	; 89
    2118:	29 f0       	breq	.+10     	; 0x2124 <cfg_parse+0xcc>
    211a:	8a 35       	cpi	r24, 0x5A	; 90
    211c:	d9 f0       	breq	.+54     	; 0x2154 <cfg_parse+0xfc>
    211e:	88 35       	cpi	r24, 0x58	; 88
    2120:	e9 f4       	brne	.+58     	; 0x215c <cfg_parse+0x104>
    2122:	1f c0       	rjmp	.+62     	; 0x2162 <cfg_parse+0x10a>
    2124:	11 e0       	ldi	r17, 0x01	; 1
    2126:	1e c0       	rjmp	.+60     	; 0x2164 <cfg_parse+0x10c>
		case '?': cfg_dump(); cfg.status = TG_OK; break;
    2128:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <cfg_dump>
    212c:	10 c0       	rjmp	.+32     	; 0x214e <cfg_parse+0xf6>
		case '(': cfg.status = TG_OK; break;		// ignore comment lines
		case 'Q': cfg.status = TG_QUIT; break;
    212e:	8b e0       	ldi	r24, 0x0B	; 11
    2130:	16 c0       	rjmp	.+44     	; 0x215e <cfg_parse+0x106>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    2132:	c6 01       	movw	r24, r12
    2134:	be 01       	movw	r22, r28
    2136:	6f 5f       	subi	r22, 0xFF	; 255
    2138:	7f 4f       	sbci	r23, 0xFF	; 255
    213a:	0e 94 8d 39 	call	0x731a	; 0x731a <strtod>
    213e:	60 93 53 22 	sts	0x2253, r22
    2142:	70 93 54 22 	sts	0x2254, r23
    2146:	80 93 55 22 	sts	0x2255, r24
    214a:	90 93 56 22 	sts	0x2256, r25
				  cfg.status = TG_OK; 
    214e:	10 92 52 22 	sts	0x2252, r1
    2152:	07 c0       	rjmp	.+14     	; 0x2162 <cfg_parse+0x10a>
				  break;
    2154:	12 e0       	ldi	r17, 0x02	; 2
    2156:	06 c0       	rjmp	.+12     	; 0x2164 <cfg_parse+0x10c>

		case 'X': axis = X; break;
		case 'Y': axis = Y; break;
		case 'Z': axis = Z; break;
    2158:	13 e0       	ldi	r17, 0x03	; 3
    215a:	04 c0       	rjmp	.+8      	; 0x2164 <cfg_parse+0x10c>
		case 'A': axis = A; break;

		default: cfg.status = TG_UNRECOGNIZED_COMMAND; 	// error return
    215c:	8c e0       	ldi	r24, 0x0C	; 12
    215e:	80 93 52 22 	sts	0x2252, r24
    2162:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    2164:	80 91 52 22 	lds	r24, 0x2252
    2168:	88 23       	and	r24, r24
    216a:	09 f0       	breq	.+2      	; 0x216e <cfg_parse+0x116>
    216c:	ee c0       	rjmp	.+476    	; 0x234a <cfg_parse+0x2f2>
		cfg.status = TG_OK;							// pre-emptive setting
    216e:	10 92 52 22 	sts	0x2252, r1
		switch (text[1]) {
    2172:	f7 01       	movw	r30, r14
    2174:	81 81       	ldd	r24, Z+1	; 0x01
    2176:	8c 34       	cpi	r24, 0x4C	; 76
    2178:	09 f4       	brne	.+2      	; 0x217c <cfg_parse+0x124>
    217a:	b8 c0       	rjmp	.+368    	; 0x22ec <cfg_parse+0x294>
    217c:	8d 34       	cpi	r24, 0x4D	; 77
    217e:	30 f4       	brcc	.+12     	; 0x218c <cfg_parse+0x134>
    2180:	84 34       	cpi	r24, 0x44	; 68
    2182:	a9 f1       	breq	.+106    	; 0x21ee <cfg_parse+0x196>
    2184:	86 34       	cpi	r24, 0x46	; 70
    2186:	09 f0       	breq	.+2      	; 0x218a <cfg_parse+0x132>
    2188:	dd c0       	rjmp	.+442    	; 0x2344 <cfg_parse+0x2ec>
    218a:	1d c0       	rjmp	.+58     	; 0x21c6 <cfg_parse+0x16e>
    218c:	80 35       	cpi	r24, 0x50	; 80
    218e:	09 f4       	brne	.+2      	; 0x2192 <cfg_parse+0x13a>
    2190:	47 c0       	rjmp	.+142    	; 0x2220 <cfg_parse+0x1c8>
    2192:	83 35       	cpi	r24, 0x53	; 83
    2194:	21 f0       	breq	.+8      	; 0x219e <cfg_parse+0x146>
    2196:	8d 34       	cpi	r24, 0x4D	; 77
    2198:	09 f0       	breq	.+2      	; 0x219c <cfg_parse+0x144>
    219a:	d4 c0       	rjmp	.+424    	; 0x2344 <cfg_parse+0x2ec>
    219c:	58 c0       	rjmp	.+176    	; 0x224e <cfg_parse+0x1f6>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    219e:	c6 01       	movw	r24, r12
    21a0:	0e 94 fb 3a 	call	0x75f6	; 0x75f6 <atoi>
    21a4:	21 2f       	mov	r18, r17
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	f9 01       	movw	r30, r18
    21aa:	ee 0f       	add	r30, r30
    21ac:	ff 1f       	adc	r31, r31
    21ae:	e2 0f       	add	r30, r18
    21b0:	f3 1f       	adc	r31, r19
    21b2:	23 e0       	ldi	r18, 0x03	; 3
    21b4:	ee 0f       	add	r30, r30
    21b6:	ff 1f       	adc	r31, r31
    21b8:	2a 95       	dec	r18
    21ba:	e1 f7       	brne	.-8      	; 0x21b4 <cfg_parse+0x15c>
    21bc:	ef 5a       	subi	r30, 0xAF	; 175
    21be:	fd 4d       	sbci	r31, 0xDD	; 221
    21c0:	81 8b       	std	Z+17, r24	; 0x11
    21c2:	92 8b       	std	Z+18, r25	; 0x12
    21c4:	c2 c0       	rjmp	.+388    	; 0x234a <cfg_parse+0x2f2>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    21c6:	c6 01       	movw	r24, r12
    21c8:	0e 94 fb 3a 	call	0x75f6	; 0x75f6 <atoi>
    21cc:	21 2f       	mov	r18, r17
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	f9 01       	movw	r30, r18
    21d2:	ee 0f       	add	r30, r30
    21d4:	ff 1f       	adc	r31, r31
    21d6:	e2 0f       	add	r30, r18
    21d8:	f3 1f       	adc	r31, r19
    21da:	13 e0       	ldi	r17, 0x03	; 3
    21dc:	ee 0f       	add	r30, r30
    21de:	ff 1f       	adc	r31, r31
    21e0:	1a 95       	dec	r17
    21e2:	e1 f7       	brne	.-8      	; 0x21dc <cfg_parse+0x184>
    21e4:	ef 5a       	subi	r30, 0xAF	; 175
    21e6:	fd 4d       	sbci	r31, 0xDD	; 221
    21e8:	83 8b       	std	Z+19, r24	; 0x13
    21ea:	94 8b       	std	Z+20, r25	; 0x14
    21ec:	ae c0       	rjmp	.+348    	; 0x234a <cfg_parse+0x2f2>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    21ee:	c6 01       	movw	r24, r12
    21f0:	be 01       	movw	r22, r28
    21f2:	6f 5f       	subi	r22, 0xFF	; 255
    21f4:	7f 4f       	sbci	r23, 0xFF	; 255
    21f6:	0e 94 8d 39 	call	0x731a	; 0x731a <strtod>
    21fa:	21 2f       	mov	r18, r17
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	f9 01       	movw	r30, r18
    2200:	ee 0f       	add	r30, r30
    2202:	ff 1f       	adc	r31, r31
    2204:	e2 0f       	add	r30, r18
    2206:	f3 1f       	adc	r31, r19
    2208:	a3 e0       	ldi	r26, 0x03	; 3
    220a:	ee 0f       	add	r30, r30
    220c:	ff 1f       	adc	r31, r31
    220e:	aa 95       	dec	r26
    2210:	e1 f7       	brne	.-8      	; 0x220a <cfg_parse+0x1b2>
    2212:	ef 5a       	subi	r30, 0xAF	; 175
    2214:	fd 4d       	sbci	r31, 0xDD	; 221
    2216:	65 8b       	std	Z+21, r22	; 0x15
    2218:	76 8b       	std	Z+22, r23	; 0x16
    221a:	87 8b       	std	Z+23, r24	; 0x17
    221c:	90 8f       	std	Z+24, r25	; 0x18
    221e:	95 c0       	rjmp	.+298    	; 0x234a <cfg_parse+0x2f2>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    2220:	c6 01       	movw	r24, r12
    2222:	0e 94 fb 3a 	call	0x75f6	; 0x75f6 <atoi>
    2226:	68 2f       	mov	r22, r24
    2228:	81 2f       	mov	r24, r17
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	fc 01       	movw	r30, r24
    222e:	ee 0f       	add	r30, r30
    2230:	ff 1f       	adc	r31, r31
    2232:	e8 0f       	add	r30, r24
    2234:	f9 1f       	adc	r31, r25
    2236:	53 e0       	ldi	r21, 0x03	; 3
    2238:	ee 0f       	add	r30, r30
    223a:	ff 1f       	adc	r31, r31
    223c:	5a 95       	dec	r21
    223e:	e1 f7       	brne	.-8      	; 0x2238 <cfg_parse+0x1e0>
    2240:	ef 5a       	subi	r30, 0xAF	; 175
    2242:	fd 4d       	sbci	r31, 0xDD	; 221
    2244:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    2246:	81 2f       	mov	r24, r17
    2248:	0e 94 1f 18 	call	0x303e	; 0x303e <st_set_polarity>
    224c:	7e c0       	rjmp	.+252    	; 0x234a <cfg_parse+0x2f2>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    224e:	f7 01       	movw	r30, r14
    2250:	82 81       	ldd	r24, Z+2	; 0x02
    2252:	89 34       	cpi	r24, 0x49	; 73
    2254:	99 f4       	brne	.+38     	; 0x227c <cfg_parse+0x224>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    2256:	c6 01       	movw	r24, r12
    2258:	0e 94 fb 3a 	call	0x75f6	; 0x75f6 <atoi>
    225c:	21 2f       	mov	r18, r17
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	f9 01       	movw	r30, r18
    2262:	ee 0f       	add	r30, r30
    2264:	ff 1f       	adc	r31, r31
    2266:	e2 0f       	add	r30, r18
    2268:	f3 1f       	adc	r31, r19
    226a:	93 e0       	ldi	r25, 0x03	; 3
    226c:	ee 0f       	add	r30, r30
    226e:	ff 1f       	adc	r31, r31
    2270:	9a 95       	dec	r25
    2272:	e1 f7       	brne	.-8      	; 0x226c <cfg_parse+0x214>
    2274:	ef 5a       	subi	r30, 0xAF	; 175
    2276:	fd 4d       	sbci	r31, 0xDD	; 221
    2278:	86 87       	std	Z+14, r24	; 0x0e
    227a:	67 c0       	rjmp	.+206    	; 0x234a <cfg_parse+0x2f2>
				} else if (text[3] == 'R') {
    227c:	f7 01       	movw	r30, r14
    227e:	83 81       	ldd	r24, Z+3	; 0x03
    2280:	82 35       	cpi	r24, 0x52	; 82
    2282:	c9 f4       	brne	.+50     	; 0x22b6 <cfg_parse+0x25e>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    2284:	c6 01       	movw	r24, r12
    2286:	be 01       	movw	r22, r28
    2288:	6f 5f       	subi	r22, 0xFF	; 255
    228a:	7f 4f       	sbci	r23, 0xFF	; 255
    228c:	0e 94 8d 39 	call	0x731a	; 0x731a <strtod>
    2290:	21 2f       	mov	r18, r17
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	f9 01       	movw	r30, r18
    2296:	ee 0f       	add	r30, r30
    2298:	ff 1f       	adc	r31, r31
    229a:	e2 0f       	add	r30, r18
    229c:	f3 1f       	adc	r31, r19
    229e:	13 e0       	ldi	r17, 0x03	; 3
    22a0:	ee 0f       	add	r30, r30
    22a2:	ff 1f       	adc	r31, r31
    22a4:	1a 95       	dec	r17
    22a6:	e1 f7       	brne	.-8      	; 0x22a0 <cfg_parse+0x248>
    22a8:	ef 5a       	subi	r30, 0xAF	; 175
    22aa:	fd 4d       	sbci	r31, 0xDD	; 221
    22ac:	61 8f       	std	Z+25, r22	; 0x19
    22ae:	72 8f       	std	Z+26, r23	; 0x1a
    22b0:	83 8f       	std	Z+27, r24	; 0x1b
    22b2:	94 8f       	std	Z+28, r25	; 0x1c
    22b4:	4a c0       	rjmp	.+148    	; 0x234a <cfg_parse+0x2f2>
				} else if (text[3] == 'T') {
    22b6:	84 35       	cpi	r24, 0x54	; 84
    22b8:	c9 f4       	brne	.+50     	; 0x22ec <cfg_parse+0x294>
					CFG(axis).mm_travel = strtod(val, &end); break;
    22ba:	c6 01       	movw	r24, r12
    22bc:	be 01       	movw	r22, r28
    22be:	6f 5f       	subi	r22, 0xFF	; 255
    22c0:	7f 4f       	sbci	r23, 0xFF	; 255
    22c2:	0e 94 8d 39 	call	0x731a	; 0x731a <strtod>
    22c6:	21 2f       	mov	r18, r17
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	f9 01       	movw	r30, r18
    22cc:	ee 0f       	add	r30, r30
    22ce:	ff 1f       	adc	r31, r31
    22d0:	e2 0f       	add	r30, r18
    22d2:	f3 1f       	adc	r31, r19
    22d4:	a3 e0       	ldi	r26, 0x03	; 3
    22d6:	ee 0f       	add	r30, r30
    22d8:	ff 1f       	adc	r31, r31
    22da:	aa 95       	dec	r26
    22dc:	e1 f7       	brne	.-8      	; 0x22d6 <cfg_parse+0x27e>
    22de:	ef 5a       	subi	r30, 0xAF	; 175
    22e0:	fd 4d       	sbci	r31, 0xDD	; 221
    22e2:	65 8f       	std	Z+29, r22	; 0x1d
    22e4:	76 8f       	std	Z+30, r23	; 0x1e
    22e6:	87 8f       	std	Z+31, r24	; 0x1f
    22e8:	90 a3       	std	Z+32, r25	; 0x20
    22ea:	2f c0       	rjmp	.+94     	; 0x234a <cfg_parse+0x2f2>
				}
			case 'L': 
				if (text[2] == 'O') {
    22ec:	f7 01       	movw	r30, r14
    22ee:	82 81       	ldd	r24, Z+2	; 0x02
    22f0:	8f 34       	cpi	r24, 0x4F	; 79
    22f2:	99 f4       	brne	.+38     	; 0x231a <cfg_parse+0x2c2>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    22f4:	c6 01       	movw	r24, r12
    22f6:	0e 94 fb 3a 	call	0x75f6	; 0x75f6 <atoi>
    22fa:	21 2f       	mov	r18, r17
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	f9 01       	movw	r30, r18
    2300:	ee 0f       	add	r30, r30
    2302:	ff 1f       	adc	r31, r31
    2304:	e2 0f       	add	r30, r18
    2306:	f3 1f       	adc	r31, r19
    2308:	53 e0       	ldi	r21, 0x03	; 3
    230a:	ee 0f       	add	r30, r30
    230c:	ff 1f       	adc	r31, r31
    230e:	5a 95       	dec	r21
    2310:	e1 f7       	brne	.-8      	; 0x230a <cfg_parse+0x2b2>
    2312:	ef 5a       	subi	r30, 0xAF	; 175
    2314:	fd 4d       	sbci	r31, 0xDD	; 221
    2316:	87 87       	std	Z+15, r24	; 0x0f
    2318:	18 c0       	rjmp	.+48     	; 0x234a <cfg_parse+0x2f2>
				} else if (text[2] == 'I') {
    231a:	89 34       	cpi	r24, 0x49	; 73
    231c:	99 f4       	brne	.+38     	; 0x2344 <cfg_parse+0x2ec>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    231e:	c6 01       	movw	r24, r12
    2320:	0e 94 fb 3a 	call	0x75f6	; 0x75f6 <atoi>
    2324:	21 2f       	mov	r18, r17
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	f9 01       	movw	r30, r18
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	e2 0f       	add	r30, r18
    2330:	f3 1f       	adc	r31, r19
    2332:	23 e0       	ldi	r18, 0x03	; 3
    2334:	ee 0f       	add	r30, r30
    2336:	ff 1f       	adc	r31, r31
    2338:	2a 95       	dec	r18
    233a:	e1 f7       	brne	.-8      	; 0x2334 <cfg_parse+0x2dc>
    233c:	ef 5a       	subi	r30, 0xAF	; 175
    233e:	fd 4d       	sbci	r31, 0xDD	; 221
    2340:	85 a3       	std	Z+37, r24	; 0x25
    2342:	03 c0       	rjmp	.+6      	; 0x234a <cfg_parse+0x2f2>
				}

			default: cfg.status = TG_UNRECOGNIZED_COMMAND;	// error return
    2344:	8c e0       	ldi	r24, 0x0C	; 12
    2346:	80 93 52 22 	sts	0x2252, r24
		}
	}
//	cfg_write();
	return (cfg.status);
}
    234a:	80 91 52 22 	lds	r24, 0x2252
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	ff 90       	pop	r15
    235e:	ef 90       	pop	r14
    2360:	df 90       	pop	r13
    2362:	cf 90       	pop	r12
    2364:	08 95       	ret

00002366 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    2366:	ef 92       	push	r14
    2368:	ff 92       	push	r15
    236a:	0f 93       	push	r16
    236c:	1f 93       	push	r17
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	a8 97       	sbiw	r28, 0x28	; 40
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f e4       	ldi	r16, 0x4F	; 79
    237e:	12 e0       	ldi	r17, 0x02	; 2
    2380:	a0 e0       	ldi	r26, 0x00	; 0
    2382:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    2384:	7e 01       	movw	r14, r28
    2386:	08 94       	sec
    2388:	e1 1c       	adc	r14, r1
    238a:	f1 1c       	adc	r15, r1
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    238e:	0f 5f       	subi	r16, 0xFF	; 255
    2390:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    2392:	f8 01       	movw	r30, r16
    2394:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    2396:	88 23       	and	r24, r24
    2398:	89 f4       	brne	.+34     	; 0x23bc <cfg_test+0x56>
			text[j] = 0;
    239a:	ce 01       	movw	r24, r28
    239c:	01 96       	adiw	r24, 0x01	; 1
    239e:	a8 0f       	add	r26, r24
    23a0:	b9 1f       	adc	r27, r25
    23a2:	1c 92       	st	X, r1
			cfg_parse(text);
    23a4:	0e 94 2c 10 	call	0x2058	; 0x2058 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    23a8:	a8 96       	adiw	r28, 0x28	; 40
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	de bf       	out	0x3e, r29	; 62
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	1f 91       	pop	r17
    23b4:	0f 91       	pop	r16
    23b6:	ff 90       	pop	r15
    23b8:	ef 90       	pop	r14
    23ba:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    23bc:	8d 30       	cpi	r24, 0x0D	; 13
    23be:	21 f0       	breq	.+8      	; 0x23c8 <cfg_test+0x62>
    23c0:	8a 30       	cpi	r24, 0x0A	; 10
    23c2:	11 f0       	breq	.+4      	; 0x23c8 <cfg_test+0x62>
    23c4:	8b 33       	cpi	r24, 0x3B	; 59
    23c6:	49 f4       	brne	.+18     	; 0x23da <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    23c8:	ae 0d       	add	r26, r14
    23ca:	bf 1d       	adc	r27, r15
    23cc:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    23ce:	c7 01       	movw	r24, r14
    23d0:	0e 94 2c 10 	call	0x2058	; 0x2058 <cfg_parse>
    23d4:	a0 e0       	ldi	r26, 0x00	; 0
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	da cf       	rjmp	.-76     	; 0x238e <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    23da:	81 32       	cpi	r24, 0x21	; 33
    23dc:	c0 f2       	brcs	.-80     	; 0x238e <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    23de:	f7 01       	movw	r30, r14
    23e0:	ea 0f       	add	r30, r26
    23e2:	fb 1f       	adc	r31, r27
    23e4:	80 83       	st	Z, r24
    23e6:	11 96       	adiw	r26, 0x01	; 1
    23e8:	d2 cf       	rjmp	.-92     	; 0x238e <cfg_test+0x28>

000023ea <en_init>:
static uint8_t encoder_port_value;

void en_init(void) 
{
	return;
}
    23ea:	08 95       	ret

000023ec <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	encoder_port_value = b;
    23ec:	80 93 66 21 	sts	0x2166, r24

	if (b & 0x01) { 								// b0 is on A axis
    23f0:	98 2f       	mov	r25, r24
    23f2:	90 ff       	sbrs	r25, 0
    23f4:	07 c0       	rjmp	.+14     	; 0x2404 <en_write+0x18>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    23f6:	e0 91 4d 22 	lds	r30, 0x224D
    23fa:	f0 91 4e 22 	lds	r31, 0x224E
    23fe:	80 e2       	ldi	r24, 0x20	; 32
    2400:	85 83       	std	Z+5, r24	; 0x05
    2402:	06 c0       	rjmp	.+12     	; 0x2410 <en_write+0x24>
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    2404:	e0 91 4d 22 	lds	r30, 0x224D
    2408:	f0 91 4e 22 	lds	r31, 0x224E
    240c:	80 e2       	ldi	r24, 0x20	; 32
    240e:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b & 0x02) { 								// b1 is on Z axis
    2410:	91 ff       	sbrs	r25, 1
    2412:	07 c0       	rjmp	.+14     	; 0x2422 <en_write+0x36>
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    2414:	e0 91 3d 22 	lds	r30, 0x223D
    2418:	f0 91 3e 22 	lds	r31, 0x223E
    241c:	80 e2       	ldi	r24, 0x20	; 32
    241e:	85 83       	std	Z+5, r24	; 0x05
    2420:	06 c0       	rjmp	.+12     	; 0x242e <en_write+0x42>
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    2422:	e0 91 3d 22 	lds	r30, 0x223D
    2426:	f0 91 3e 22 	lds	r31, 0x223E
    242a:	80 e2       	ldi	r24, 0x20	; 32
    242c:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b & 0x04) { 								// b2 is on Y axis
    242e:	92 ff       	sbrs	r25, 2
    2430:	07 c0       	rjmp	.+14     	; 0x2440 <en_write+0x54>
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    2432:	e0 91 2d 22 	lds	r30, 0x222D
    2436:	f0 91 2e 22 	lds	r31, 0x222E
    243a:	80 e2       	ldi	r24, 0x20	; 32
    243c:	85 83       	std	Z+5, r24	; 0x05
    243e:	06 c0       	rjmp	.+12     	; 0x244c <en_write+0x60>
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    2440:	e0 91 2d 22 	lds	r30, 0x222D
    2444:	f0 91 2e 22 	lds	r31, 0x222E
    2448:	80 e2       	ldi	r24, 0x20	; 32
    244a:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b & 0x08) { 								// b3 is on X axis
    244c:	93 ff       	sbrs	r25, 3
    244e:	07 c0       	rjmp	.+14     	; 0x245e <en_write+0x72>
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    2450:	e0 91 1d 22 	lds	r30, 0x221D
    2454:	f0 91 1e 22 	lds	r31, 0x221E
    2458:	80 e2       	ldi	r24, 0x20	; 32
    245a:	85 83       	std	Z+5, r24	; 0x05
    245c:	08 95       	ret
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    245e:	e0 91 1d 22 	lds	r30, 0x221D
    2462:	f0 91 1e 22 	lds	r31, 0x221E
    2466:	80 e2       	ldi	r24, 0x20	; 32
    2468:	86 83       	std	Z+6, r24	; 0x06
    246a:	08 95       	ret

0000246c <en_toggle>:
 * en_toggle() - toggle lowest 4 bits of a byte to encoder output port
 */

void en_toggle(uint8_t b)
{
	encoder_port_value ^= b;	// xor the stored encoder value with b
    246c:	90 91 66 21 	lds	r25, 0x2166
    2470:	98 27       	eor	r25, r24
    2472:	90 93 66 21 	sts	0x2166, r25
	en_write(encoder_port_value);
    2476:	89 2f       	mov	r24, r25
    2478:	0e 94 f6 11 	call	0x23ec	; 0x23ec <en_write>
}
    247c:	08 95       	ret

0000247e <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    247e:	0f 93       	push	r16
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	0f 92       	push	r0
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    248a:	8b ec       	ldi	r24, 0xCB	; 203
    248c:	e0 e5       	ldi	r30, 0x50	; 80
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    2492:	88 e0       	ldi	r24, 0x08	; 8
    2494:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    2498:	80 91 51 00 	lds	r24, 0x0051
    249c:	83 ff       	sbrs	r24, 3
    249e:	fc cf       	rjmp	.-8      	; 0x2498 <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    24a0:	82 ec       	ldi	r24, 0xC2	; 194
    24a2:	e0 e5       	ldi	r30, 0x50	; 80
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    24a8:	88 e1       	ldi	r24, 0x18	; 24
    24aa:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    24ae:	80 91 51 00 	lds	r24, 0x0051
    24b2:	84 ff       	sbrs	r24, 4
    24b4:	fc cf       	rjmp	.-8      	; 0x24ae <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    24b6:	8f b7       	in	r24, 0x3f	; 63
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    24bc:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    24be:	24 e0       	ldi	r18, 0x04	; 4
    24c0:	80 e4       	ldi	r24, 0x40	; 64
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	fc 01       	movw	r30, r24
    24c6:	08 ed       	ldi	r16, 0xD8	; 216
    24c8:	04 bf       	out	0x34, r16	; 52
    24ca:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    24d0:	80 91 50 00 	lds	r24, 0x0050
    24d4:	8e 7f       	andi	r24, 0xFE	; 254
    24d6:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    24da:	0f 90       	pop	r0
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	0f 91       	pop	r16
    24e2:	08 95       	ret

000024e4 <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    24e4:	0e 94 3f 12 	call	0x247e	; 0x247e <xmega_init_clocks>
}
    24e8:	08 95       	ret

000024ea <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    24ea:	0f 93       	push	r16
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	0f 92       	push	r0
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    24f6:	2f b7       	in	r18, 0x3f	; 63
    24f8:	29 83       	std	Y+1, r18	; 0x01
    24fa:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    24fc:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    24fe:	fc 01       	movw	r30, r24
    2500:	08 ed       	ldi	r16, 0xD8	; 216
    2502:	04 bf       	out	0x34, r16	; 52
    2504:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	8f bf       	out	0x3f, r24	; 63
#endif
}
    250a:	0f 90       	pop	r0
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	0f 91       	pop	r16
    2512:	08 95       	ret

00002514 <mc_motion_start>:
 */

int mc_motion_start()
{
	return (TG_OK);
}
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	08 95       	ret

0000251a <mc_home>:
 */

int mc_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    251a:	8c e0       	ldi	r24, 0x0C	; 12
    251c:	e9 e6       	ldi	r30, 0x69	; 105
    251e:	f1 e2       	ldi	r31, 0x21	; 33
    2520:	df 01       	movw	r26, r30
    2522:	1d 92       	st	X+, r1
    2524:	8a 95       	dec	r24
    2526:	e9 f7       	brne	.-6      	; 0x2522 <mc_home+0x8>
	return (TG_OK);
}
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	08 95       	ret

0000252e <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    252e:	8c e0       	ldi	r24, 0x0C	; 12
    2530:	e9 e6       	ldi	r30, 0x69	; 105
    2532:	f1 e2       	ldi	r31, 0x21	; 33
    2534:	df 01       	movw	r26, r30
    2536:	1d 92       	st	X+, r1
    2538:	8a 95       	dec	r24
    253a:	e9 f7       	brne	.-6      	; 0x2536 <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    253c:	10 92 67 21 	sts	0x2167, r1
	ma.arc_state = MC_STATE_OFF;
    2540:	10 92 bf 22 	sts	0x22BF, r1
}
    2544:	08 95       	ret

00002546 <mc_line_continue>:
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 *	The mc.move_type must be set before calling this routine
 */
int mc_line_continue() 
{
    2546:	8f 92       	push	r8
    2548:	af 92       	push	r10
    254a:	bf 92       	push	r11
    254c:	cf 92       	push	r12
    254e:	df 92       	push	r13
    2550:	ef 92       	push	r14
    2552:	ff 92       	push	r15
    2554:	0f 93       	push	r16
    2556:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    2558:	80 91 67 21 	lds	r24, 0x2167
    255c:	88 23       	and	r24, r24
    255e:	19 f4       	brne	.+6      	; 0x2566 <mc_line_continue+0x20>
    2560:	23 e0       	ldi	r18, 0x03	; 3
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	2f c0       	rjmp	.+94     	; 0x25c4 <mc_line_continue+0x7e>
		return (TG_NOOP);			  // return NULL for non-started line
	}
//	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
	if (mv_test_move_buffer_full()) { // this is where you would block
    2566:	0e 94 36 20 	call	0x406c	; 0x406c <mv_test_move_buffer_full>
    256a:	88 23       	and	r24, r24
    256c:	19 f0       	breq	.+6      	; 0x2574 <mc_line_continue+0x2e>
    256e:	22 e0       	ldi	r18, 0x02	; 2
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	28 c0       	rjmp	.+80     	; 0x25c4 <mc_line_continue+0x7e>
		return (TG_EAGAIN);
	} else {
		mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds, mc.move_type); 
    2574:	60 91 81 21 	lds	r22, 0x2181
    2578:	70 91 82 21 	lds	r23, 0x2182
    257c:	80 91 83 21 	lds	r24, 0x2183
    2580:	90 91 84 21 	lds	r25, 0x2184
    2584:	20 91 85 21 	lds	r18, 0x2185
    2588:	30 91 86 21 	lds	r19, 0x2186
    258c:	40 91 87 21 	lds	r20, 0x2187
    2590:	50 91 88 21 	lds	r21, 0x2188
    2594:	e0 90 89 21 	lds	r14, 0x2189
    2598:	f0 90 8a 21 	lds	r15, 0x218A
    259c:	00 91 8b 21 	lds	r16, 0x218B
    25a0:	10 91 8c 21 	lds	r17, 0x218C
    25a4:	a0 90 8d 21 	lds	r10, 0x218D
    25a8:	b0 90 8e 21 	lds	r11, 0x218E
    25ac:	c0 90 8f 21 	lds	r12, 0x218F
    25b0:	d0 90 90 21 	lds	r13, 0x2190
    25b4:	80 90 68 21 	lds	r8, 0x2168
    25b8:	0e 94 62 20 	call	0x40c4	; 0x40c4 <mv_queue_move_buffer>
		mc.line_state = MC_STATE_OFF;	  // line is done. turn the generator off.
    25bc:	10 92 67 21 	sts	0x2167, r1
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
		return (TG_OK);
	}
}
    25c4:	c9 01       	movw	r24, r18
    25c6:	1f 91       	pop	r17
    25c8:	0f 91       	pop	r16
    25ca:	ff 90       	pop	r15
    25cc:	ef 90       	pop	r14
    25ce:	df 90       	pop	r13
    25d0:	cf 90       	pop	r12
    25d2:	bf 90       	pop	r11
    25d4:	af 90       	pop	r10
    25d6:	8f 90       	pop	r8
    25d8:	08 95       	ret

000025da <mc_dwell>:
 * NOTE: It's not necessary to set the target as this is set correctly in the Gcode. 
 */

int mc_dwell(double seconds) 
{
	mc.steps[X] = 0;
    25da:	10 92 81 21 	sts	0x2181, r1
    25de:	10 92 82 21 	sts	0x2182, r1
    25e2:	10 92 83 21 	sts	0x2183, r1
    25e6:	10 92 84 21 	sts	0x2184, r1
	mc.steps[Y] = 0;
    25ea:	10 92 85 21 	sts	0x2185, r1
    25ee:	10 92 86 21 	sts	0x2186, r1
    25f2:	10 92 87 21 	sts	0x2187, r1
    25f6:	10 92 88 21 	sts	0x2188, r1
	mc.steps[Z] = 0;
    25fa:	10 92 89 21 	sts	0x2189, r1
    25fe:	10 92 8a 21 	sts	0x218A, r1
    2602:	10 92 8b 21 	sts	0x218B, r1
    2606:	10 92 8c 21 	sts	0x218C, r1
	mc.mm_of_travel = 0;	// not actually used, but makes debug make more sense
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e0       	ldi	r20, 0x00	; 0
    2610:	50 e0       	ldi	r21, 0x00	; 0
    2612:	20 93 91 21 	sts	0x2191, r18
    2616:	30 93 92 21 	sts	0x2192, r19
    261a:	40 93 93 21 	sts	0x2193, r20
    261e:	50 93 94 21 	sts	0x2194, r21
	mc.microseconds = trunc(seconds*1000000);
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	34 e2       	ldi	r19, 0x24	; 36
    2626:	44 e7       	ldi	r20, 0x74	; 116
    2628:	59 e4       	ldi	r21, 0x49	; 73
    262a:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    262e:	0e 94 f6 35 	call	0x6bec	; 0x6bec <__fixunssfsi>
    2632:	60 93 8d 21 	sts	0x218D, r22
    2636:	70 93 8e 21 	sts	0x218E, r23
    263a:	80 93 8f 21 	sts	0x218F, r24
    263e:	90 93 90 21 	sts	0x2190, r25
	mc.move_type = MC_TYPE_DWELL;
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	80 93 68 21 	sts	0x2168, r24
	mc.line_state = MC_STATE_NEW;
    2648:	80 93 67 21 	sts	0x2167, r24
	return (mc_line_continue());
    264c:	0e 94 a3 12 	call	0x2546	; 0x2546 <mc_line_continue>
}
    2650:	08 95       	ret

00002652 <mc_set_position>:
/* 
 * mc_set_position() - set current position (support for G92)
 */

int mc_set_position(double x, double y, double z)
{
    2652:	8f 92       	push	r8
    2654:	9f 92       	push	r9
    2656:	af 92       	push	r10
    2658:	bf 92       	push	r11
    265a:	cf 92       	push	r12
    265c:	df 92       	push	r13
    265e:	ef 92       	push	r14
    2660:	ff 92       	push	r15
    2662:	0f 93       	push	r16
    2664:	1f 93       	push	r17
    2666:	49 01       	movw	r8, r18
    2668:	5a 01       	movw	r10, r20
	mc.position[X] = lround(x*CFG(X).steps_per_mm);
    266a:	20 91 72 22 	lds	r18, 0x2272
    266e:	30 91 73 22 	lds	r19, 0x2273
    2672:	40 91 74 22 	lds	r20, 0x2274
    2676:	50 91 75 22 	lds	r21, 0x2275
    267a:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    267e:	0e 94 14 38 	call	0x7028	; 0x7028 <lround>
    2682:	29 e6       	ldi	r18, 0x69	; 105
    2684:	c2 2e       	mov	r12, r18
    2686:	21 e2       	ldi	r18, 0x21	; 33
    2688:	d2 2e       	mov	r13, r18
    268a:	60 93 69 21 	sts	0x2169, r22
    268e:	70 93 6a 21 	sts	0x216A, r23
    2692:	80 93 6b 21 	sts	0x216B, r24
    2696:	90 93 6c 21 	sts	0x216C, r25
	mc.position[Y] = lround(y*CFG(Y).steps_per_mm);
    269a:	c5 01       	movw	r24, r10
    269c:	b4 01       	movw	r22, r8
    269e:	20 91 8a 22 	lds	r18, 0x228A
    26a2:	30 91 8b 22 	lds	r19, 0x228B
    26a6:	40 91 8c 22 	lds	r20, 0x228C
    26aa:	50 91 8d 22 	lds	r21, 0x228D
    26ae:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    26b2:	0e 94 14 38 	call	0x7028	; 0x7028 <lround>
    26b6:	f6 01       	movw	r30, r12
    26b8:	34 96       	adiw	r30, 0x04	; 4
    26ba:	60 93 6d 21 	sts	0x216D, r22
    26be:	71 83       	std	Z+1, r23	; 0x01
    26c0:	82 83       	std	Z+2, r24	; 0x02
    26c2:	93 83       	std	Z+3, r25	; 0x03
	mc.position[Z] = lround(z*CFG(Z).steps_per_mm); 
    26c4:	c8 01       	movw	r24, r16
    26c6:	b7 01       	movw	r22, r14
    26c8:	20 91 a2 22 	lds	r18, 0x22A2
    26cc:	30 91 a3 22 	lds	r19, 0x22A3
    26d0:	40 91 a4 22 	lds	r20, 0x22A4
    26d4:	50 91 a5 22 	lds	r21, 0x22A5
    26d8:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    26dc:	0e 94 14 38 	call	0x7028	; 0x7028 <lround>
    26e0:	28 e0       	ldi	r18, 0x08	; 8
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	c2 0e       	add	r12, r18
    26e6:	d3 1e       	adc	r13, r19
    26e8:	60 93 71 21 	sts	0x2171, r22
    26ec:	f6 01       	movw	r30, r12
    26ee:	71 83       	std	Z+1, r23	; 0x01
    26f0:	82 83       	std	Z+2, r24	; 0x02
    26f2:	93 83       	std	Z+3, r25	; 0x03
	return (TG_OK);
}
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	1f 91       	pop	r17
    26fa:	0f 91       	pop	r16
    26fc:	ff 90       	pop	r15
    26fe:	ef 90       	pop	r14
    2700:	df 90       	pop	r13
    2702:	cf 90       	pop	r12
    2704:	bf 90       	pop	r11
    2706:	af 90       	pop	r10
    2708:	9f 90       	pop	r9
    270a:	8f 90       	pop	r8
    270c:	08 95       	ret

0000270e <mc_line>:
 * Zero length lines that are actually dwells come in thru mc_dwell().
 * The mv_queue doesn't check line length and queues anything.
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    270e:	2f 92       	push	r2
    2710:	3f 92       	push	r3
    2712:	4f 92       	push	r4
    2714:	5f 92       	push	r5
    2716:	6f 92       	push	r6
    2718:	7f 92       	push	r7
    271a:	8f 92       	push	r8
    271c:	9f 92       	push	r9
    271e:	af 92       	push	r10
    2720:	bf 92       	push	r11
    2722:	cf 92       	push	r12
    2724:	df 92       	push	r13
    2726:	ef 92       	push	r14
    2728:	ff 92       	push	r15
    272a:	0f 93       	push	r16
    272c:	1f 93       	push	r17
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	62 97       	sbiw	r28, 0x12	; 18
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	19 01       	movw	r2, r18
    273e:	2a 01       	movw	r4, r20
    2740:	ad 86       	std	Y+13, r10	; 0x0d
    2742:	be 86       	std	Y+14, r11	; 0x0e
    2744:	cf 86       	std	Y+15, r12	; 0x0f
    2746:	d8 8a       	std	Y+16, r13	; 0x10
    2748:	89 8a       	std	Y+17, r8	; 0x11
    274a:	9a 8a       	std	Y+18, r9	; 0x12
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    274c:	20 91 72 22 	lds	r18, 0x2272
    2750:	30 91 73 22 	lds	r19, 0x2273
    2754:	40 91 74 22 	lds	r20, 0x2274
    2758:	50 91 75 22 	lds	r21, 0x2275
    275c:	29 87       	std	Y+9, r18	; 0x09
    275e:	3a 87       	std	Y+10, r19	; 0x0a
    2760:	4b 87       	std	Y+11, r20	; 0x0b
    2762:	5c 87       	std	Y+12, r21	; 0x0c
    2764:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    2768:	0e 94 14 38 	call	0x7028	; 0x7028 <lround>
    276c:	3b 01       	movw	r6, r22
    276e:	4c 01       	movw	r8, r24
    2770:	60 92 75 21 	sts	0x2175, r6
    2774:	70 92 76 21 	sts	0x2176, r7
    2778:	80 92 77 21 	sts	0x2177, r8
    277c:	90 92 78 21 	sts	0x2178, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    2780:	80 91 8a 22 	lds	r24, 0x228A
    2784:	90 91 8b 22 	lds	r25, 0x228B
    2788:	a0 91 8c 22 	lds	r26, 0x228C
    278c:	b0 91 8d 22 	lds	r27, 0x228D
    2790:	8d 83       	std	Y+5, r24	; 0x05
    2792:	9e 83       	std	Y+6, r25	; 0x06
    2794:	af 83       	std	Y+7, r26	; 0x07
    2796:	b8 87       	std	Y+8, r27	; 0x08
    2798:	c2 01       	movw	r24, r4
    279a:	b1 01       	movw	r22, r2
    279c:	2d 81       	ldd	r18, Y+5	; 0x05
    279e:	3e 81       	ldd	r19, Y+6	; 0x06
    27a0:	4f 81       	ldd	r20, Y+7	; 0x07
    27a2:	58 85       	ldd	r21, Y+8	; 0x08
    27a4:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    27a8:	0e 94 14 38 	call	0x7028	; 0x7028 <lround>
    27ac:	5b 01       	movw	r10, r22
    27ae:	6c 01       	movw	r12, r24
    27b0:	a0 92 79 21 	sts	0x2179, r10
    27b4:	b0 92 7a 21 	sts	0x217A, r11
    27b8:	c0 92 7b 21 	sts	0x217B, r12
    27bc:	d0 92 7c 21 	sts	0x217C, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    27c0:	20 91 a2 22 	lds	r18, 0x22A2
    27c4:	30 91 a3 22 	lds	r19, 0x22A3
    27c8:	40 91 a4 22 	lds	r20, 0x22A4
    27cc:	50 91 a5 22 	lds	r21, 0x22A5
    27d0:	29 83       	std	Y+1, r18	; 0x01
    27d2:	3a 83       	std	Y+2, r19	; 0x02
    27d4:	4b 83       	std	Y+3, r20	; 0x03
    27d6:	5c 83       	std	Y+4, r21	; 0x04
    27d8:	c8 01       	movw	r24, r16
    27da:	b7 01       	movw	r22, r14
    27dc:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    27e0:	0e 94 14 38 	call	0x7028	; 0x7028 <lround>
    27e4:	9b 01       	movw	r18, r22
    27e6:	ac 01       	movw	r20, r24
    27e8:	20 93 7d 21 	sts	0x217D, r18
    27ec:	30 93 7e 21 	sts	0x217E, r19
    27f0:	40 93 7f 21 	sts	0x217F, r20
    27f4:	50 93 80 21 	sts	0x2180, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    27f8:	80 91 69 21 	lds	r24, 0x2169
    27fc:	90 91 6a 21 	lds	r25, 0x216A
    2800:	a0 91 6b 21 	lds	r26, 0x216B
    2804:	b0 91 6c 21 	lds	r27, 0x216C
    2808:	84 01       	movw	r16, r8
    280a:	73 01       	movw	r14, r6
    280c:	e8 1a       	sub	r14, r24
    280e:	f9 0a       	sbc	r15, r25
    2810:	0a 0b       	sbc	r16, r26
    2812:	1b 0b       	sbc	r17, r27
    2814:	e0 92 81 21 	sts	0x2181, r14
    2818:	f0 92 82 21 	sts	0x2182, r15
    281c:	00 93 83 21 	sts	0x2183, r16
    2820:	10 93 84 21 	sts	0x2184, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    2824:	80 91 6d 21 	lds	r24, 0x216D
    2828:	90 91 6e 21 	lds	r25, 0x216E
    282c:	a0 91 6f 21 	lds	r26, 0x216F
    2830:	b0 91 70 21 	lds	r27, 0x2170
    2834:	a8 1a       	sub	r10, r24
    2836:	b9 0a       	sbc	r11, r25
    2838:	ca 0a       	sbc	r12, r26
    283a:	db 0a       	sbc	r13, r27
    283c:	a0 92 85 21 	sts	0x2185, r10
    2840:	b0 92 86 21 	sts	0x2186, r11
    2844:	c0 92 87 21 	sts	0x2187, r12
    2848:	d0 92 88 21 	sts	0x2188, r13
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    284c:	80 91 71 21 	lds	r24, 0x2171
    2850:	90 91 72 21 	lds	r25, 0x2172
    2854:	a0 91 73 21 	lds	r26, 0x2173
    2858:	b0 91 74 21 	lds	r27, 0x2174
    285c:	19 01       	movw	r2, r18
    285e:	2a 01       	movw	r4, r20
    2860:	28 1a       	sub	r2, r24
    2862:	39 0a       	sbc	r3, r25
    2864:	4a 0a       	sbc	r4, r26
    2866:	5b 0a       	sbc	r5, r27
    2868:	20 92 89 21 	sts	0x2189, r2
    286c:	30 92 8a 21 	sts	0x218A, r3
    2870:	40 92 8b 21 	sts	0x218B, r4
    2874:	50 92 8c 21 	sts	0x218C, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    2878:	d6 01       	movw	r26, r12
    287a:	c5 01       	movw	r24, r10
    287c:	8e 0d       	add	r24, r14
    287e:	9f 1d       	adc	r25, r15
    2880:	a0 1f       	adc	r26, r16
    2882:	b1 1f       	adc	r27, r17
    2884:	82 0d       	add	r24, r2
    2886:	93 1d       	adc	r25, r3
    2888:	a4 1d       	adc	r26, r4
    288a:	b5 1d       	adc	r27, r5
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	a1 05       	cpc	r26, r1
    2890:	b1 05       	cpc	r27, r1
    2892:	19 f4       	brne	.+6      	; 0x289a <mc_line+0x18c>
    2894:	24 e1       	ldi	r18, 0x14	; 20
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	74 c0       	rjmp	.+232    	; 0x2982 <mc_line+0x274>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    289a:	49 89       	ldd	r20, Y+17	; 0x11
    289c:	5a 89       	ldd	r21, Y+18	; 0x12
    289e:	45 2b       	or	r20, r21
    28a0:	59 f0       	breq	.+22     	; 0x28b8 <mc_line+0x1aa>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    28a2:	60 ec       	ldi	r22, 0xC0	; 192
    28a4:	71 ee       	ldi	r23, 0xE1	; 225
    28a6:	84 e6       	ldi	r24, 0x64	; 100
    28a8:	9c e4       	ldi	r25, 0x4C	; 76
    28aa:	2d 85       	ldd	r18, Y+13	; 0x0d
    28ac:	3e 85       	ldd	r19, Y+14	; 0x0e
    28ae:	4f 85       	ldd	r20, Y+15	; 0x0f
    28b0:	58 89       	ldd	r21, Y+16	; 0x10
    28b2:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    28b6:	4a c0       	rjmp	.+148    	; 0x294c <mc_line+0x23e>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    28b8:	c8 01       	movw	r24, r16
    28ba:	b7 01       	movw	r22, r14
    28bc:	0e 94 24 36 	call	0x6c48	; 0x6c48 <__floatsisf>
    28c0:	29 85       	ldd	r18, Y+9	; 0x09
    28c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    28c4:	4b 85       	ldd	r20, Y+11	; 0x0b
    28c6:	5c 85       	ldd	r21, Y+12	; 0x0c
    28c8:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    28cc:	0e 94 ef 38 	call	0x71de	; 0x71de <square>
    28d0:	3b 01       	movw	r6, r22
    28d2:	4c 01       	movw	r8, r24
    28d4:	c6 01       	movw	r24, r12
    28d6:	b5 01       	movw	r22, r10
    28d8:	0e 94 24 36 	call	0x6c48	; 0x6c48 <__floatsisf>
    28dc:	2d 81       	ldd	r18, Y+5	; 0x05
    28de:	3e 81       	ldd	r19, Y+6	; 0x06
    28e0:	4f 81       	ldd	r20, Y+7	; 0x07
    28e2:	58 85       	ldd	r21, Y+8	; 0x08
    28e4:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    28e8:	0e 94 ef 38 	call	0x71de	; 0x71de <square>
    28ec:	5b 01       	movw	r10, r22
    28ee:	6c 01       	movw	r12, r24
    28f0:	c2 01       	movw	r24, r4
    28f2:	b1 01       	movw	r22, r2
    28f4:	0e 94 24 36 	call	0x6c48	; 0x6c48 <__floatsisf>
    28f8:	29 81       	ldd	r18, Y+1	; 0x01
    28fa:	3a 81       	ldd	r19, Y+2	; 0x02
    28fc:	4b 81       	ldd	r20, Y+3	; 0x03
    28fe:	5c 81       	ldd	r21, Y+4	; 0x04
    2900:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    2904:	0e 94 ef 38 	call	0x71de	; 0x71de <square>
    2908:	7b 01       	movw	r14, r22
    290a:	8c 01       	movw	r16, r24
    290c:	c4 01       	movw	r24, r8
    290e:	b3 01       	movw	r22, r6
    2910:	a6 01       	movw	r20, r12
    2912:	95 01       	movw	r18, r10
    2914:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <__addsf3>
    2918:	a8 01       	movw	r20, r16
    291a:	97 01       	movw	r18, r14
    291c:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <__addsf3>
    2920:	0e 94 b1 38 	call	0x7162	; 0x7162 <sqrt>
    2924:	60 93 91 21 	sts	0x2191, r22
    2928:	70 93 92 21 	sts	0x2192, r23
    292c:	80 93 93 21 	sts	0x2193, r24
    2930:	90 93 94 21 	sts	0x2194, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    2934:	2d 85       	ldd	r18, Y+13	; 0x0d
    2936:	3e 85       	ldd	r19, Y+14	; 0x0e
    2938:	4f 85       	ldd	r20, Y+15	; 0x0f
    293a:	58 89       	ldd	r21, Y+16	; 0x10
    293c:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	34 e2       	ldi	r19, 0x24	; 36
    2944:	44 e7       	ldi	r20, 0x74	; 116
    2946:	59 e4       	ldi	r21, 0x49	; 73
    2948:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    294c:	0e 94 14 38 	call	0x7028	; 0x7028 <lround>
    2950:	60 93 8d 21 	sts	0x218D, r22
    2954:	70 93 8e 21 	sts	0x218E, r23
    2958:	80 93 8f 21 	sts	0x218F, r24
    295c:	90 93 90 21 	sts	0x2190, r25
	}
	mc.move_type = MC_TYPE_LINE;
    2960:	10 92 68 21 	sts	0x2168, r1
	mc.line_state = MC_STATE_NEW;
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	80 93 67 21 	sts	0x2167, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    296a:	e9 e6       	ldi	r30, 0x69	; 105
    296c:	f1 e2       	ldi	r31, 0x21	; 33
    296e:	df 01       	movw	r26, r30
    2970:	1c 96       	adiw	r26, 0x0c	; 12
    2972:	8c e0       	ldi	r24, 0x0C	; 12
    2974:	0d 90       	ld	r0, X+
    2976:	01 92       	st	Z+, r0
    2978:	81 50       	subi	r24, 0x01	; 1
    297a:	e1 f7       	brne	.-8      	; 0x2974 <mc_line+0x266>
	return (mc_line_continue());
    297c:	0e 94 a3 12 	call	0x2546	; 0x2546 <mc_line_continue>
    2980:	9c 01       	movw	r18, r24
}
    2982:	c9 01       	movw	r24, r18
    2984:	62 96       	adiw	r28, 0x12	; 18
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	1f 91       	pop	r17
    2990:	0f 91       	pop	r16
    2992:	ff 90       	pop	r15
    2994:	ef 90       	pop	r14
    2996:	df 90       	pop	r13
    2998:	cf 90       	pop	r12
    299a:	bf 90       	pop	r11
    299c:	af 90       	pop	r10
    299e:	9f 90       	pop	r9
    29a0:	8f 90       	pop	r8
    29a2:	7f 90       	pop	r7
    29a4:	6f 90       	pop	r6
    29a6:	5f 90       	pop	r5
    29a8:	4f 90       	pop	r4
    29aa:	3f 90       	pop	r3
    29ac:	2f 90       	pop	r2
    29ae:	08 95       	ret

000029b0 <mc_arc_continue>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continue() 
{
    29b0:	8f 92       	push	r8
    29b2:	9f 92       	push	r9
    29b4:	af 92       	push	r10
    29b6:	bf 92       	push	r11
    29b8:	cf 92       	push	r12
    29ba:	df 92       	push	r13
    29bc:	ef 92       	push	r14
    29be:	ff 92       	push	r15
    29c0:	0f 93       	push	r16
    29c2:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    29c4:	80 91 bf 22 	lds	r24, 0x22BF
    29c8:	88 23       	and	r24, r24
    29ca:	19 f4       	brne	.+6      	; 0x29d2 <mc_arc_continue+0x22>
    29cc:	23 e0       	ldi	r18, 0x03	; 3
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	de c0       	rjmp	.+444    	; 0x2b8e <mc_arc_continue+0x1de>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    29d2:	81 30       	cpi	r24, 0x01	; 1
    29d4:	39 f4       	brne	.+14     	; 0x29e4 <mc_arc_continue+0x34>
		ma.segment_counter=0;
    29d6:	10 92 c2 22 	sts	0x22C2, r1
    29da:	10 92 c3 22 	sts	0x22C3, r1
		ma.arc_state = MC_STATE_RUNNING;
    29de:	82 e0       	ldi	r24, 0x02	; 2
    29e0:	80 93 bf 22 	sts	0x22BF, r24
	}
	mc.move_type = MC_TYPE_LINE;
    29e4:	10 92 68 21 	sts	0x2168, r1
    29e8:	c2 c0       	rjmp	.+388    	; 0x2b6e <mc_arc_continue+0x1be>
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    29ea:	0e 94 36 20 	call	0x406c	; 0x406c <mv_test_move_buffer_full>
    29ee:	88 23       	and	r24, r24
    29f0:	19 f0       	breq	.+6      	; 0x29f8 <mc_arc_continue+0x48>
    29f2:	22 e0       	ldi	r18, 0x02	; 2
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	cb c0       	rjmp	.+406    	; 0x2b8e <mc_arc_continue+0x1de>
			return (TG_EAGAIN);
		}
		ma.segment_counter++;
    29f8:	80 91 c2 22 	lds	r24, 0x22C2
    29fc:	90 91 c3 22 	lds	r25, 0x22C3
    2a00:	01 96       	adiw	r24, 0x01	; 1
    2a02:	80 93 c2 22 	sts	0x22C2, r24
    2a06:	90 93 c3 22 	sts	0x22C3, r25
		ma.theta += ma.theta_per_segment;
    2a0a:	60 91 e4 22 	lds	r22, 0x22E4
    2a0e:	70 91 e5 22 	lds	r23, 0x22E5
    2a12:	80 91 e6 22 	lds	r24, 0x22E6
    2a16:	90 91 e7 22 	lds	r25, 0x22E7
    2a1a:	20 91 f0 22 	lds	r18, 0x22F0
    2a1e:	30 91 f1 22 	lds	r19, 0x22F1
    2a22:	40 91 f2 22 	lds	r20, 0x22F2
    2a26:	50 91 f3 22 	lds	r21, 0x22F3
    2a2a:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <__addsf3>
    2a2e:	7b 01       	movw	r14, r22
    2a30:	8c 01       	movw	r16, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	d8 01       	movw	r26, r16
    2a36:	80 93 e4 22 	sts	0x22E4, r24
    2a3a:	90 93 e5 22 	sts	0x22E5, r25
    2a3e:	a0 93 e6 22 	sts	0x22E6, r26
    2a42:	b0 93 e7 22 	sts	0x22E7, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    2a46:	b7 01       	movw	r22, r14
    2a48:	c8 01       	movw	r24, r16
    2a4a:	0e 94 a7 38 	call	0x714e	; 0x714e <sin>
    2a4e:	80 90 e8 22 	lds	r8, 0x22E8
    2a52:	90 90 e9 22 	lds	r9, 0x22E9
    2a56:	a0 90 ea 22 	lds	r10, 0x22EA
    2a5a:	b0 90 eb 22 	lds	r11, 0x22EB
    2a5e:	c0 90 c6 22 	lds	r12, 0x22C6
    2a62:	d0 90 c7 22 	lds	r13, 0x22C7
    2a66:	cc 0c       	add	r12, r12
    2a68:	dd 1c       	adc	r13, r13
    2a6a:	cc 0c       	add	r12, r12
    2a6c:	dd 1c       	adc	r13, r13
    2a6e:	2f eb       	ldi	r18, 0xBF	; 191
    2a70:	32 e2       	ldi	r19, 0x22	; 34
    2a72:	c2 0e       	add	r12, r18
    2a74:	d3 1e       	adc	r13, r19
    2a76:	a5 01       	movw	r20, r10
    2a78:	94 01       	movw	r18, r8
    2a7a:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    2a7e:	9b 01       	movw	r18, r22
    2a80:	ac 01       	movw	r20, r24
    2a82:	60 91 dc 22 	lds	r22, 0x22DC
    2a86:	70 91 dd 22 	lds	r23, 0x22DD
    2a8a:	80 91 de 22 	lds	r24, 0x22DE
    2a8e:	90 91 df 22 	lds	r25, 0x22DF
    2a92:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <__addsf3>
    2a96:	f6 01       	movw	r30, r12
    2a98:	65 87       	std	Z+13, r22	; 0x0d
    2a9a:	76 87       	std	Z+14, r23	; 0x0e
    2a9c:	87 87       	std	Z+15, r24	; 0x0f
    2a9e:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    2aa0:	b7 01       	movw	r22, r14
    2aa2:	c8 01       	movw	r24, r16
    2aa4:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <cos>
    2aa8:	00 91 c8 22 	lds	r16, 0x22C8
    2aac:	10 91 c9 22 	lds	r17, 0x22C9
    2ab0:	00 0f       	add	r16, r16
    2ab2:	11 1f       	adc	r17, r17
    2ab4:	00 0f       	add	r16, r16
    2ab6:	11 1f       	adc	r17, r17
    2ab8:	01 54       	subi	r16, 0x41	; 65
    2aba:	1d 4d       	sbci	r17, 0xDD	; 221
    2abc:	a5 01       	movw	r20, r10
    2abe:	94 01       	movw	r18, r8
    2ac0:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    2ac4:	9b 01       	movw	r18, r22
    2ac6:	ac 01       	movw	r20, r24
    2ac8:	60 91 e0 22 	lds	r22, 0x22E0
    2acc:	70 91 e1 22 	lds	r23, 0x22E1
    2ad0:	80 91 e2 22 	lds	r24, 0x22E2
    2ad4:	90 91 e3 22 	lds	r25, 0x22E3
    2ad8:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <__addsf3>
    2adc:	f8 01       	movw	r30, r16
    2ade:	65 87       	std	Z+13, r22	; 0x0d
    2ae0:	76 87       	std	Z+14, r23	; 0x0e
    2ae2:	87 87       	std	Z+15, r24	; 0x0f
    2ae4:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    2ae6:	00 91 ca 22 	lds	r16, 0x22CA
    2aea:	10 91 cb 22 	lds	r17, 0x22CB
    2aee:	00 0f       	add	r16, r16
    2af0:	11 1f       	adc	r17, r17
    2af2:	00 0f       	add	r16, r16
    2af4:	11 1f       	adc	r17, r17
    2af6:	01 54       	subi	r16, 0x41	; 65
    2af8:	1d 4d       	sbci	r17, 0xDD	; 221
    2afa:	f8 01       	movw	r30, r16
    2afc:	65 85       	ldd	r22, Z+13	; 0x0d
    2afe:	76 85       	ldd	r23, Z+14	; 0x0e
    2b00:	87 85       	ldd	r24, Z+15	; 0x0f
    2b02:	90 89       	ldd	r25, Z+16	; 0x10
    2b04:	20 91 f4 22 	lds	r18, 0x22F4
    2b08:	30 91 f5 22 	lds	r19, 0x22F5
    2b0c:	40 91 f6 22 	lds	r20, 0x22F6
    2b10:	50 91 f7 22 	lds	r21, 0x22F7
    2b14:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <__addsf3>
    2b18:	f8 01       	movw	r30, r16
    2b1a:	65 87       	std	Z+13, r22	; 0x0d
    2b1c:	76 87       	std	Z+14, r23	; 0x0e
    2b1e:	87 87       	std	Z+15, r24	; 0x0f
    2b20:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    2b22:	60 91 cc 22 	lds	r22, 0x22CC
    2b26:	70 91 cd 22 	lds	r23, 0x22CD
    2b2a:	80 91 ce 22 	lds	r24, 0x22CE
    2b2e:	90 91 cf 22 	lds	r25, 0x22CF
    2b32:	20 91 d0 22 	lds	r18, 0x22D0
    2b36:	30 91 d1 22 	lds	r19, 0x22D1
    2b3a:	40 91 d2 22 	lds	r20, 0x22D2
    2b3e:	50 91 d3 22 	lds	r21, 0x22D3
    2b42:	e0 90 d4 22 	lds	r14, 0x22D4
    2b46:	f0 90 d5 22 	lds	r15, 0x22D5
    2b4a:	00 91 d6 22 	lds	r16, 0x22D6
    2b4e:	10 91 d7 22 	lds	r17, 0x22D7
    2b52:	a0 90 ec 22 	lds	r10, 0x22EC
    2b56:	b0 90 ed 22 	lds	r11, 0x22ED
    2b5a:	c0 90 ee 22 	lds	r12, 0x22EE
    2b5e:	d0 90 ef 22 	lds	r13, 0x22EF
    2b62:	80 90 c4 22 	lds	r8, 0x22C4
    2b66:	90 90 c5 22 	lds	r9, 0x22C5
    2b6a:	0e 94 87 13 	call	0x270e	; 0x270e <mc_line>
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	mc.move_type = MC_TYPE_LINE;
	while (ma.segment_counter <= ma.segments) {
    2b6e:	20 91 c2 22 	lds	r18, 0x22C2
    2b72:	30 91 c3 22 	lds	r19, 0x22C3
    2b76:	80 91 c0 22 	lds	r24, 0x22C0
    2b7a:	90 91 c1 22 	lds	r25, 0x22C1
    2b7e:	82 17       	cp	r24, r18
    2b80:	93 07       	cpc	r25, r19
    2b82:	0c f0       	brlt	.+2      	; 0x2b86 <mc_arc_continue+0x1d6>
    2b84:	32 cf       	rjmp	.-412    	; 0x29ea <mc_arc_continue+0x3a>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    2b86:	10 92 bf 22 	sts	0x22BF, r1
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    2b8e:	c9 01       	movw	r24, r18
    2b90:	1f 91       	pop	r17
    2b92:	0f 91       	pop	r16
    2b94:	ff 90       	pop	r15
    2b96:	ef 90       	pop	r14
    2b98:	df 90       	pop	r13
    2b9a:	cf 90       	pop	r12
    2b9c:	bf 90       	pop	r11
    2b9e:	af 90       	pop	r10
    2ba0:	9f 90       	pop	r9
    2ba2:	8f 90       	pop	r8
    2ba4:	08 95       	ret

00002ba6 <mc_arc>:
		   int axis_1, 				// select circle plane in tool space
		   int axis_2,  			// select circle plane in tool space
		   int axis_linear, 		// linear travel if tracing a helical motion
		   double feed_rate, 		// feed rate
		   int invert_feed_rate)	// feed rate mode
{
    2ba6:	2f 92       	push	r2
    2ba8:	3f 92       	push	r3
    2baa:	4f 92       	push	r4
    2bac:	5f 92       	push	r5
    2bae:	6f 92       	push	r6
    2bb0:	7f 92       	push	r7
    2bb2:	8f 92       	push	r8
    2bb4:	9f 92       	push	r9
    2bb6:	af 92       	push	r10
    2bb8:	bf 92       	push	r11
    2bba:	cf 92       	push	r12
    2bbc:	df 92       	push	r13
    2bbe:	ef 92       	push	r14
    2bc0:	ff 92       	push	r15
    2bc2:	0f 93       	push	r16
    2bc4:	1f 93       	push	r17
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	cd b7       	in	r28, 0x3d	; 61
    2bcc:	de b7       	in	r29, 0x3e	; 62
    2bce:	28 97       	sbiw	r28, 0x08	; 8
    2bd0:	cd bf       	out	0x3d, r28	; 61
    2bd2:	de bf       	out	0x3e, r29	; 62
    2bd4:	69 83       	std	Y+1, r22	; 0x01
    2bd6:	7a 83       	std	Y+2, r23	; 0x02
    2bd8:	8b 83       	std	Y+3, r24	; 0x03
    2bda:	9c 83       	std	Y+4, r25	; 0x04
    2bdc:	29 01       	movw	r4, r18
    2bde:	3a 01       	movw	r6, r20
    2be0:	ed 82       	std	Y+5, r14	; 0x05
    2be2:	fe 82       	std	Y+6, r15	; 0x06
    2be4:	0f 83       	std	Y+7, r16	; 0x07
    2be6:	18 87       	std	Y+8, r17	; 0x08
    2be8:	14 01       	movw	r2, r8
    2bea:	88 a0       	ldd	r8, Y+32	; 0x20
    2bec:	99 a0       	ldd	r9, Y+33	; 0x21
	// load the move and arc structs
	mc.move_type = MC_TYPE_LINE;
    2bee:	10 92 68 21 	sts	0x2168, r1
	ma.theta = theta;
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	80 93 e4 22 	sts	0x22E4, r24
    2bfa:	90 93 e5 22 	sts	0x22E5, r25
    2bfe:	a0 93 e6 22 	sts	0x22E6, r26
    2c02:	b0 93 e7 22 	sts	0x22E7, r27
	ma.radius = radius;
    2c06:	e0 92 e8 22 	sts	0x22E8, r14
    2c0a:	f0 92 e9 22 	sts	0x22E9, r15
    2c0e:	00 93 ea 22 	sts	0x22EA, r16
    2c12:	10 93 eb 22 	sts	0x22EB, r17
	ma.angular_travel = angular_travel;
    2c16:	20 93 f8 22 	sts	0x22F8, r18
    2c1a:	30 93 f9 22 	sts	0x22F9, r19
    2c1e:	40 93 fa 22 	sts	0x22FA, r20
    2c22:	50 93 fb 22 	sts	0x22FB, r21
	ma.linear_travel = linear_travel;
    2c26:	a0 92 fc 22 	sts	0x22FC, r10
    2c2a:	b0 92 fd 22 	sts	0x22FD, r11
    2c2e:	c0 92 fe 22 	sts	0x22FE, r12
    2c32:	d0 92 ff 22 	sts	0x22FF, r13
	ma.feed_rate = feed_rate;
    2c36:	8a a1       	ldd	r24, Y+34	; 0x22
    2c38:	9b a1       	ldd	r25, Y+35	; 0x23
    2c3a:	ac a1       	ldd	r26, Y+36	; 0x24
    2c3c:	bd a1       	ldd	r27, Y+37	; 0x25
    2c3e:	80 93 ec 22 	sts	0x22EC, r24
    2c42:	90 93 ed 22 	sts	0x22ED, r25
    2c46:	a0 93 ee 22 	sts	0x22EE, r26
    2c4a:	b0 93 ef 22 	sts	0x22EF, r27
	ma.invert_feed_rate = invert_feed_rate;
    2c4e:	ae a1       	ldd	r26, Y+38	; 0x26
    2c50:	bf a1       	ldd	r27, Y+39	; 0x27
    2c52:	a0 93 c4 22 	sts	0x22C4, r26
    2c56:	b0 93 c5 22 	sts	0x22C5, r27
	ma.axis_1 = axis_1;
    2c5a:	20 92 c6 22 	sts	0x22C6, r2
    2c5e:	30 92 c7 22 	sts	0x22C7, r3
	ma.axis_2 = axis_2;
    2c62:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c64:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c66:	e0 93 c8 22 	sts	0x22C8, r30
    2c6a:	f0 93 c9 22 	sts	0x22C9, r31
	ma.axis_linear = axis_linear;
    2c6e:	80 92 ca 22 	sts	0x22CA, r8
    2c72:	90 92 cb 22 	sts	0x22CB, r9
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    2c76:	ca 01       	movw	r24, r20
    2c78:	b9 01       	movw	r22, r18
    2c7a:	a8 01       	movw	r20, r16
    2c7c:	97 01       	movw	r18, r14
    2c7e:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    2c82:	7b 01       	movw	r14, r22
    2c84:	8c 01       	movw	r16, r24
    2c86:	c6 01       	movw	r24, r12
    2c88:	b5 01       	movw	r22, r10
    2c8a:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__fixsfsi>
    2c8e:	97 ff       	sbrs	r25, 7
    2c90:	07 c0       	rjmp	.+14     	; 0x2ca0 <mc_arc+0xfa>
    2c92:	90 95       	com	r25
    2c94:	80 95       	com	r24
    2c96:	70 95       	com	r23
    2c98:	61 95       	neg	r22
    2c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c9c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca0:	0e 94 24 36 	call	0x6c48	; 0x6c48 <__floatsisf>
    2ca4:	9b 01       	movw	r18, r22
    2ca6:	ac 01       	movw	r20, r24
    2ca8:	c8 01       	movw	r24, r16
    2caa:	b7 01       	movw	r22, r14
    2cac:	0e 94 7f 37 	call	0x6efe	; 0x6efe <hypot>
    2cb0:	7b 01       	movw	r14, r22
    2cb2:	8c 01       	movw	r16, r24
    2cb4:	60 93 d8 22 	sts	0x22D8, r22
    2cb8:	70 93 d9 22 	sts	0x22D9, r23
    2cbc:	80 93 da 22 	sts	0x22DA, r24
    2cc0:	90 93 db 22 	sts	0x22DB, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    2cc4:	2d ec       	ldi	r18, 0xCD	; 205
    2cc6:	3c ec       	ldi	r19, 0xCC	; 204
    2cc8:	4c e4       	ldi	r20, 0x4C	; 76
    2cca:	5d e3       	ldi	r21, 0x3D	; 61
    2ccc:	0e 94 82 35 	call	0x6b04	; 0x6b04 <__cmpsf2>
    2cd0:	88 23       	and	r24, r24
    2cd2:	1c f4       	brge	.+6      	; 0x2cda <mc_arc+0x134>
    2cd4:	23 e1       	ldi	r18, 0x13	; 19
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	00 c1       	rjmp	.+512    	; 0x2eda <mc_arc+0x334>
		return (TG_ARC_SPECIFICATION_ERROR);
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    2cda:	c8 01       	movw	r24, r16
    2cdc:	b7 01       	movw	r22, r14
    2cde:	20 91 53 22 	lds	r18, 0x2253
    2ce2:	30 91 54 22 	lds	r19, 0x2254
    2ce6:	40 91 55 22 	lds	r20, 0x2255
    2cea:	50 91 56 22 	lds	r21, 0x2256
    2cee:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    2cf2:	0e 94 6f 35 	call	0x6ade	; 0x6ade <ceil>
    2cf6:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__fixsfsi>
    2cfa:	8b 01       	movw	r16, r22
    2cfc:	60 93 c0 22 	sts	0x22C0, r22
    2d00:	70 93 c1 22 	sts	0x22C1, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    2d04:	2e a1       	ldd	r18, Y+38	; 0x26
    2d06:	3f a1       	ldd	r19, Y+39	; 0x27
    2d08:	23 2b       	or	r18, r19
    2d0a:	b9 f0       	breq	.+46     	; 0x2d3a <mc_arc+0x194>
		ma.feed_rate *= ma.segments; 
    2d0c:	b8 01       	movw	r22, r16
    2d0e:	88 27       	eor	r24, r24
    2d10:	77 fd       	sbrc	r23, 7
    2d12:	80 95       	com	r24
    2d14:	98 2f       	mov	r25, r24
    2d16:	0e 94 24 36 	call	0x6c48	; 0x6c48 <__floatsisf>
    2d1a:	9b 01       	movw	r18, r22
    2d1c:	ac 01       	movw	r20, r24
    2d1e:	6a a1       	ldd	r22, Y+34	; 0x22
    2d20:	7b a1       	ldd	r23, Y+35	; 0x23
    2d22:	8c a1       	ldd	r24, Y+36	; 0x24
    2d24:	9d a1       	ldd	r25, Y+37	; 0x25
    2d26:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    2d2a:	60 93 ec 22 	sts	0x22EC, r22
    2d2e:	70 93 ed 22 	sts	0x22ED, r23
    2d32:	80 93 ee 22 	sts	0x22EE, r24
    2d36:	90 93 ef 22 	sts	0x22EF, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    2d3a:	b8 01       	movw	r22, r16
    2d3c:	88 27       	eor	r24, r24
    2d3e:	77 fd       	sbrc	r23, 7
    2d40:	80 95       	com	r24
    2d42:	98 2f       	mov	r25, r24
    2d44:	0e 94 24 36 	call	0x6c48	; 0x6c48 <__floatsisf>
    2d48:	7b 01       	movw	r14, r22
    2d4a:	8c 01       	movw	r16, r24
    2d4c:	c3 01       	movw	r24, r6
    2d4e:	b2 01       	movw	r22, r4
    2d50:	a8 01       	movw	r20, r16
    2d52:	97 01       	movw	r18, r14
    2d54:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    2d58:	60 93 f0 22 	sts	0x22F0, r22
    2d5c:	70 93 f1 22 	sts	0x22F1, r23
    2d60:	80 93 f2 22 	sts	0x22F2, r24
    2d64:	90 93 f3 22 	sts	0x22F3, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    2d68:	c6 01       	movw	r24, r12
    2d6a:	b5 01       	movw	r22, r10
    2d6c:	a8 01       	movw	r20, r16
    2d6e:	97 01       	movw	r18, r14
    2d70:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    2d74:	60 93 f4 22 	sts	0x22F4, r22
    2d78:	70 93 f5 22 	sts	0x22F5, r23
    2d7c:	80 93 f6 22 	sts	0x22F6, r24
    2d80:	90 93 f7 22 	sts	0x22F7, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    2d84:	69 81       	ldd	r22, Y+1	; 0x01
    2d86:	7a 81       	ldd	r23, Y+2	; 0x02
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8c:	0e 94 a7 38 	call	0x714e	; 0x714e <sin>
    2d90:	5b 01       	movw	r10, r22
    2d92:	6c 01       	movw	r12, r24
    2d94:	81 01       	movw	r16, r2
    2d96:	00 0f       	add	r16, r16
    2d98:	11 1f       	adc	r17, r17
    2d9a:	f8 01       	movw	r30, r16
    2d9c:	ee 0f       	add	r30, r30
    2d9e:	ff 1f       	adc	r31, r31
    2da0:	e7 59       	subi	r30, 0x97	; 151
    2da2:	fe 4d       	sbci	r31, 0xDE	; 222
    2da4:	60 81       	ld	r22, Z
    2da6:	71 81       	ldd	r23, Z+1	; 0x01
    2da8:	82 81       	ldd	r24, Z+2	; 0x02
    2daa:	93 81       	ldd	r25, Z+3	; 0x03
    2dac:	0e 94 24 36 	call	0x6c48	; 0x6c48 <__floatsisf>
    2db0:	02 0d       	add	r16, r2
    2db2:	13 1d       	adc	r17, r3
    2db4:	23 e0       	ldi	r18, 0x03	; 3
    2db6:	00 0f       	add	r16, r16
    2db8:	11 1f       	adc	r17, r17
    2dba:	2a 95       	dec	r18
    2dbc:	e1 f7       	brne	.-8      	; 0x2db6 <mc_arc+0x210>
    2dbe:	0f 5a       	subi	r16, 0xAF	; 175
    2dc0:	1d 4d       	sbci	r17, 0xDD	; 221
    2dc2:	d8 01       	movw	r26, r16
    2dc4:	91 96       	adiw	r26, 0x21	; 33
    2dc6:	2d 91       	ld	r18, X+
    2dc8:	3d 91       	ld	r19, X+
    2dca:	4d 91       	ld	r20, X+
    2dcc:	5c 91       	ld	r21, X
    2dce:	94 97       	sbiw	r26, 0x24	; 36
    2dd0:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    2dd4:	7b 01       	movw	r14, r22
    2dd6:	8c 01       	movw	r16, r24
    2dd8:	c6 01       	movw	r24, r12
    2dda:	b5 01       	movw	r22, r10
    2ddc:	2d 81       	ldd	r18, Y+5	; 0x05
    2dde:	3e 81       	ldd	r19, Y+6	; 0x06
    2de0:	4f 81       	ldd	r20, Y+7	; 0x07
    2de2:	58 85       	ldd	r21, Y+8	; 0x08
    2de4:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    2de8:	9b 01       	movw	r18, r22
    2dea:	ac 01       	movw	r20, r24
    2dec:	c8 01       	movw	r24, r16
    2dee:	b7 01       	movw	r22, r14
    2df0:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__subsf3>
    2df4:	60 93 dc 22 	sts	0x22DC, r22
    2df8:	70 93 dd 22 	sts	0x22DD, r23
    2dfc:	80 93 de 22 	sts	0x22DE, r24
    2e00:	90 93 df 22 	sts	0x22DF, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    2e04:	69 81       	ldd	r22, Y+1	; 0x01
    2e06:	7a 81       	ldd	r23, Y+2	; 0x02
    2e08:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e0c:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <cos>
    2e10:	5b 01       	movw	r10, r22
    2e12:	6c 01       	movw	r12, r24
    2e14:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2e16:	1f 8d       	ldd	r17, Y+31	; 0x1f
    2e18:	00 0f       	add	r16, r16
    2e1a:	11 1f       	adc	r17, r17
    2e1c:	f8 01       	movw	r30, r16
    2e1e:	ee 0f       	add	r30, r30
    2e20:	ff 1f       	adc	r31, r31
    2e22:	e7 59       	subi	r30, 0x97	; 151
    2e24:	fe 4d       	sbci	r31, 0xDE	; 222
    2e26:	60 81       	ld	r22, Z
    2e28:	71 81       	ldd	r23, Z+1	; 0x01
    2e2a:	82 81       	ldd	r24, Z+2	; 0x02
    2e2c:	93 81       	ldd	r25, Z+3	; 0x03
    2e2e:	0e 94 24 36 	call	0x6c48	; 0x6c48 <__floatsisf>
    2e32:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2e34:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2e36:	0e 0f       	add	r16, r30
    2e38:	1f 1f       	adc	r17, r31
    2e3a:	e3 e0       	ldi	r30, 0x03	; 3
    2e3c:	00 0f       	add	r16, r16
    2e3e:	11 1f       	adc	r17, r17
    2e40:	ea 95       	dec	r30
    2e42:	e1 f7       	brne	.-8      	; 0x2e3c <mc_arc+0x296>
    2e44:	0f 5a       	subi	r16, 0xAF	; 175
    2e46:	1d 4d       	sbci	r17, 0xDD	; 221
    2e48:	d8 01       	movw	r26, r16
    2e4a:	91 96       	adiw	r26, 0x21	; 33
    2e4c:	2d 91       	ld	r18, X+
    2e4e:	3d 91       	ld	r19, X+
    2e50:	4d 91       	ld	r20, X+
    2e52:	5c 91       	ld	r21, X
    2e54:	94 97       	sbiw	r26, 0x24	; 36
    2e56:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    2e5a:	7b 01       	movw	r14, r22
    2e5c:	8c 01       	movw	r16, r24
    2e5e:	c6 01       	movw	r24, r12
    2e60:	b5 01       	movw	r22, r10
    2e62:	2d 81       	ldd	r18, Y+5	; 0x05
    2e64:	3e 81       	ldd	r19, Y+6	; 0x06
    2e66:	4f 81       	ldd	r20, Y+7	; 0x07
    2e68:	58 85       	ldd	r21, Y+8	; 0x08
    2e6a:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    2e6e:	9b 01       	movw	r18, r22
    2e70:	ac 01       	movw	r20, r24
    2e72:	c8 01       	movw	r24, r16
    2e74:	b7 01       	movw	r22, r14
    2e76:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__subsf3>
    2e7a:	60 93 e0 22 	sts	0x22E0, r22
    2e7e:	70 93 e1 22 	sts	0x22E1, r23
    2e82:	80 93 e2 22 	sts	0x22E2, r24
    2e86:	90 93 e3 22 	sts	0x22E3, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    2e8a:	88 0c       	add	r8, r8
    2e8c:	99 1c       	adc	r9, r9
    2e8e:	88 0c       	add	r8, r8
    2e90:	99 1c       	adc	r9, r9
    2e92:	f4 01       	movw	r30, r8
    2e94:	e7 59       	subi	r30, 0x97	; 151
    2e96:	fe 4d       	sbci	r31, 0xDE	; 222
    2e98:	60 81       	ld	r22, Z
    2e9a:	71 81       	ldd	r23, Z+1	; 0x01
    2e9c:	82 81       	ldd	r24, Z+2	; 0x02
    2e9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ea0:	0e 94 24 36 	call	0x6c48	; 0x6c48 <__floatsisf>
    2ea4:	20 91 a2 22 	lds	r18, 0x22A2
    2ea8:	30 91 a3 22 	lds	r19, 0x22A3
    2eac:	40 91 a4 22 	lds	r20, 0x22A4
    2eb0:	50 91 a5 22 	lds	r21, 0x22A5
    2eb4:	0e 94 89 35 	call	0x6b12	; 0x6b12 <__divsf3>
    2eb8:	ef eb       	ldi	r30, 0xBF	; 191
    2eba:	f2 e2       	ldi	r31, 0x22	; 34
    2ebc:	8e 0e       	add	r8, r30
    2ebe:	9f 1e       	adc	r9, r31
    2ec0:	d4 01       	movw	r26, r8
    2ec2:	1d 96       	adiw	r26, 0x0d	; 13
    2ec4:	6d 93       	st	X+, r22
    2ec6:	7d 93       	st	X+, r23
    2ec8:	8d 93       	st	X+, r24
    2eca:	9c 93       	st	X, r25
    2ecc:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	80 93 bf 22 	sts	0x22BF, r24
	return (mc_arc_continue());
    2ed4:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <mc_arc_continue>
    2ed8:	9c 01       	movw	r18, r24
}
    2eda:	c9 01       	movw	r24, r18
    2edc:	28 96       	adiw	r28, 0x08	; 8
    2ede:	cd bf       	out	0x3d, r28	; 61
    2ee0:	de bf       	out	0x3e, r29	; 62
    2ee2:	cf 91       	pop	r28
    2ee4:	df 91       	pop	r29
    2ee6:	1f 91       	pop	r17
    2ee8:	0f 91       	pop	r16
    2eea:	ff 90       	pop	r15
    2eec:	ef 90       	pop	r14
    2eee:	df 90       	pop	r13
    2ef0:	cf 90       	pop	r12
    2ef2:	bf 90       	pop	r11
    2ef4:	af 90       	pop	r10
    2ef6:	9f 90       	pop	r9
    2ef8:	8f 90       	pop	r8
    2efa:	7f 90       	pop	r7
    2efc:	6f 90       	pop	r6
    2efe:	5f 90       	pop	r5
    2f00:	4f 90       	pop	r4
    2f02:	3f 90       	pop	r3
    2f04:	2f 90       	pop	r2
    2f06:	08 95       	ret

00002f08 <mc_motion_stop>:
 * mc_motion_stop() - stop current motion immediately
 */

int mc_motion_stop()
{
	st_stop();						// stop the steppers
    2f08:	0e 94 2d 18 	call	0x305a	; 0x305a <st_stop>
	return (TG_OK);
}
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	08 95       	ret

00002f12 <mc_motion_end>:
 * mc_motion_stop() - stop current motion immediately
 */

int mc_motion_stop()
{
	st_stop();						// stop the steppers
    2f12:	0e 94 2d 18 	call	0x305a	; 0x305a <st_stop>
 */

int mc_motion_end()
{
	mc_motion_stop();				// first actually stop the motion
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    2f16:	10 92 67 21 	sts	0x2167, r1
	ma.arc_state = MC_STATE_OFF;
    2f1a:	10 92 bf 22 	sts	0x22BF, r1
	mv_flush();						// empty and reset the move queue
    2f1e:	0e 94 57 20 	call	0x40ae	; 0x40ae <mv_flush>
	return (TG_OK);
}
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	08 95       	ret

00002f28 <sp_init>:
 *	See hardware.h for settings
 */

void sp_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    2f28:	e0 e6       	ldi	r30, 0x60	; 96
    2f2a:	f6 e0       	ldi	r31, 0x06	; 6
    2f2c:	80 e4       	ldi	r24, 0x40	; 64
    2f2e:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    2f30:	80 e8       	ldi	r24, 0x80	; 128
    2f32:	81 83       	std	Z+1, r24	; 0x01
}
    2f34:	08 95       	ret

00002f36 <sp_spindle_run>:

void sp_spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    2f36:	97 fd       	sbrc	r25, 7
    2f38:	05 c0       	rjmp	.+10     	; 0x2f44 <sp_spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    2f3a:	80 e8       	ldi	r24, 0x80	; 128
    2f3c:	e0 e6       	ldi	r30, 0x60	; 96
    2f3e:	f6 e0       	ldi	r31, 0x06	; 6
    2f40:	85 83       	std	Z+5, r24	; 0x05
    2f42:	04 c0       	rjmp	.+8      	; 0x2f4c <sp_spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    2f44:	80 e8       	ldi	r24, 0x80	; 128
    2f46:	e0 e6       	ldi	r30, 0x60	; 96
    2f48:	f6 e0       	ldi	r31, 0x06	; 6
    2f4a:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    2f4c:	80 e4       	ldi	r24, 0x40	; 64
    2f4e:	e0 e6       	ldi	r30, 0x60	; 96
    2f50:	f6 e0       	ldi	r31, 0x06	; 6
    2f52:	85 83       	std	Z+5, r24	; 0x05
}
    2f54:	08 95       	ret

00002f56 <sp_spindle_stop>:

void sp_spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    2f56:	80 e4       	ldi	r24, 0x40	; 64
    2f58:	e0 e6       	ldi	r30, 0x60	; 96
    2f5a:	f6 e0       	ldi	r31, 0x06	; 6
    2f5c:	86 83       	std	Z+6, r24	; 0x06
}
    2f5e:	08 95       	ret

00002f60 <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    2f60:	cf 93       	push	r28
    2f62:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    2f64:	10 92 0e 22 	sts	0x220E, r1
	ax.mutex = FALSE;
    2f68:	10 92 0c 22 	sts	0x220C, r1
	ax.stopped = FALSE;
    2f6c:	10 92 0d 22 	sts	0x220D, r1

	ax.a[X].port = &X_MOTOR_PORT;					// bind PORTs to structs
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	96 e0       	ldi	r25, 0x06	; 6
    2f74:	80 93 1d 22 	sts	0x221D, r24
    2f78:	90 93 1e 22 	sts	0x221E, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    2f7c:	80 ea       	ldi	r24, 0xA0	; 160
    2f7e:	96 e0       	ldi	r25, 0x06	; 6
    2f80:	80 93 2d 22 	sts	0x222D, r24
    2f84:	90 93 2e 22 	sts	0x222E, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    2f88:	80 e8       	ldi	r24, 0x80	; 128
    2f8a:	96 e0       	ldi	r25, 0x06	; 6
    2f8c:	80 93 3d 22 	sts	0x223D, r24
    2f90:	90 93 3e 22 	sts	0x223E, r25
	ax.a[A].port = &A_MOTOR_PORT;
    2f94:	80 e6       	ldi	r24, 0x60	; 96
    2f96:	96 e0       	ldi	r25, 0x06	; 6
    2f98:	80 93 4d 22 	sts	0x224D, r24
    2f9c:	90 93 4e 22 	sts	0x224E, r25

	ax.a[X].timer = &X_TIMER;						// bind TIMERs to structs
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	98 e0       	ldi	r25, 0x08	; 8
    2fa4:	80 93 1f 22 	sts	0x221F, r24
    2fa8:	90 93 20 22 	sts	0x2220, r25
	ax.a[Y].timer = &Y_TIMER;
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	99 e0       	ldi	r25, 0x09	; 9
    2fb0:	80 93 2f 22 	sts	0x222F, r24
    2fb4:	90 93 30 22 	sts	0x2230, r25
	ax.a[Z].timer = &Z_TIMER;
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	9a e0       	ldi	r25, 0x0A	; 10
    2fbc:	80 93 3f 22 	sts	0x223F, r24
    2fc0:	90 93 40 22 	sts	0x2240, r25
	ax.a[A].timer = &A_TIMER;
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	9b e0       	ldi	r25, 0x0B	; 11
    2fc8:	80 93 4f 22 	sts	0x224F, r24
    2fcc:	90 93 50 22 	sts	0x2250, r25
    2fd0:	c1 e6       	ldi	r28, 0x61	; 97
    2fd2:	d2 e2       	ldi	r29, 0x22	; 34
    2fd4:	ab e1       	ldi	r26, 0x1B	; 27
    2fd6:	b2 e2       	ldi	r27, 0x22	; 34

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    2fd8:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    2fda:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    2fdc:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    2fde:	88 81       	ld	r24, Y
    2fe0:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    2fe2:	12 96       	adiw	r26, 0x02	; 2
    2fe4:	ed 91       	ld	r30, X+
    2fe6:	fc 91       	ld	r31, X
    2fe8:	13 97       	sbiw	r26, 0x03	; 3
    2fea:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    2fec:	12 96       	adiw	r26, 0x02	; 2
    2fee:	ed 91       	ld	r30, X+
    2ff0:	fc 91       	ld	r31, X
    2ff2:	13 97       	sbiw	r26, 0x03	; 3
    2ff4:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
    2ff6:	12 96       	adiw	r26, 0x02	; 2
    2ff8:	ed 91       	ld	r30, X+
    2ffa:	fc 91       	ld	r31, X
    2ffc:	13 97       	sbiw	r26, 0x03	; 3
    2ffe:	84 81       	ldd	r24, Z+4	; 0x04
    3000:	88 61       	ori	r24, 0x18	; 24
    3002:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    3004:	12 96       	adiw	r26, 0x02	; 2
    3006:	ed 91       	ld	r30, X+
    3008:	fc 91       	ld	r31, X
    300a:	13 97       	sbiw	r26, 0x03	; 3
    300c:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    300e:	14 96       	adiw	r26, 0x04	; 4
    3010:	ed 91       	ld	r30, X+
    3012:	fc 91       	ld	r31, X
    3014:	15 97       	sbiw	r26, 0x05	; 5
    3016:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    3018:	14 96       	adiw	r26, 0x04	; 4
    301a:	ed 91       	ld	r30, X+
    301c:	fc 91       	ld	r31, X
    301e:	15 97       	sbiw	r26, 0x05	; 5
    3020:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    3022:	14 96       	adiw	r26, 0x04	; 4
    3024:	ed 91       	ld	r30, X+
    3026:	fc 91       	ld	r31, X
    3028:	15 97       	sbiw	r26, 0x05	; 5
    302a:	96 83       	std	Z+6, r25	; 0x06
    302c:	68 96       	adiw	r28, 0x18	; 24
    302e:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X].timer = &X_TIMER;						// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    3030:	82 e2       	ldi	r24, 0x22	; 34
    3032:	c1 3c       	cpi	r28, 0xC1	; 193
    3034:	d8 07       	cpc	r29, r24
    3036:	99 f6       	brne	.-90     	; 0x2fde <st_init+0x7e>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	08 95       	ret

0000303e <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    303e:	e8 2f       	mov	r30, r24
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	84 e0       	ldi	r24, 0x04	; 4
    3044:	ee 0f       	add	r30, r30
    3046:	ff 1f       	adc	r31, r31
    3048:	8a 95       	dec	r24
    304a:	e1 f7       	brne	.-8      	; 0x3044 <st_set_polarity+0x6>
    304c:	e4 5f       	subi	r30, 0xF4	; 244
    304e:	fd 4d       	sbci	r31, 0xDD	; 221
    3050:	67 87       	std	Z+15, r22	; 0x0f
}
    3052:	08 95       	ret

00003054 <st_start>:
 * st_stop() - stop steppers
 */

void st_start()
{
	ax.stopped = FALSE;
    3054:	10 92 0d 22 	sts	0x220D, r1
}
    3058:	08 95       	ret

0000305a <st_stop>:

void st_stop()
{
	ax.stopped = TRUE;
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	80 93 0d 22 	sts	0x220D, r24
}
    3060:	08 95       	ret

00003062 <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X].step_counter = 0x00001000;
    3062:	21 e1       	ldi	r18, 0x11	; 17
    3064:	32 e2       	ldi	r19, 0x22	; 34
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	90 e1       	ldi	r25, 0x10	; 16
    306a:	a0 e0       	ldi	r26, 0x00	; 0
    306c:	b0 e0       	ldi	r27, 0x00	; 0
    306e:	80 93 11 22 	sts	0x2211, r24
    3072:	90 93 12 22 	sts	0x2212, r25
    3076:	a0 93 13 22 	sts	0x2213, r26
    307a:	b0 93 14 22 	sts	0x2214, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    307e:	e0 91 1f 22 	lds	r30, 0x221F
    3082:	f0 91 20 22 	lds	r31, 0x2220
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	90 e1       	ldi	r25, 0x10	; 16
    308a:	86 a3       	std	Z+38, r24	; 0x26
    308c:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    308e:	41 e0       	ldi	r20, 0x01	; 1
    3090:	40 83       	st	Z, r20

	ax.a[Y].step_counter = 0x00000800;
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	98 e0       	ldi	r25, 0x08	; 8
    3096:	a0 e0       	ldi	r26, 0x00	; 0
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	80 93 21 22 	sts	0x2221, r24
    309e:	90 93 22 22 	sts	0x2222, r25
    30a2:	a0 93 23 22 	sts	0x2223, r26
    30a6:	b0 93 24 22 	sts	0x2224, r27
	ax.a[Y].timer->PER = 0x2000;
    30aa:	e0 91 2f 22 	lds	r30, 0x222F
    30ae:	f0 91 30 22 	lds	r31, 0x2230
    30b2:	80 e0       	ldi	r24, 0x00	; 0
    30b4:	90 e2       	ldi	r25, 0x20	; 32
    30b6:	86 a3       	std	Z+38, r24	; 0x26
    30b8:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    30ba:	40 83       	st	Z, r20

	ax.a[Z].step_counter = 0x00000600;
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	96 e0       	ldi	r25, 0x06	; 6
    30c0:	a0 e0       	ldi	r26, 0x00	; 0
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	80 93 31 22 	sts	0x2231, r24
    30c8:	90 93 32 22 	sts	0x2232, r25
    30cc:	a0 93 33 22 	sts	0x2233, r26
    30d0:	b0 93 34 22 	sts	0x2234, r27
	ax.a[Z].timer->PER = 0x3000;
    30d4:	e0 91 3f 22 	lds	r30, 0x223F
    30d8:	f0 91 40 22 	lds	r31, 0x2240
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	90 e3       	ldi	r25, 0x30	; 48
    30e0:	86 a3       	std	Z+38, r24	; 0x26
    30e2:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    30e4:	40 83       	st	Z, r20

	ax.a[A].step_counter = 0x00000400;
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	94 e0       	ldi	r25, 0x04	; 4
    30ea:	a0 e0       	ldi	r26, 0x00	; 0
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	80 93 41 22 	sts	0x2241, r24
    30f2:	90 93 42 22 	sts	0x2242, r25
    30f6:	a0 93 43 22 	sts	0x2243, r26
    30fa:	b0 93 44 22 	sts	0x2244, r27
	ax.a[A].timer->PER = 0x4000;
    30fe:	d9 01       	movw	r26, r18
    3100:	de 96       	adiw	r26, 0x3e	; 62
    3102:	ed 91       	ld	r30, X+
    3104:	fc 91       	ld	r31, X
    3106:	df 97       	sbiw	r26, 0x3f	; 63
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	90 e4       	ldi	r25, 0x40	; 64
    310c:	86 a3       	std	Z+38, r24	; 0x26
    310e:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    3110:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    3112:	23 50       	subi	r18, 0x03	; 3
    3114:	30 40       	sbci	r19, 0x00	; 0
    3116:	f9 01       	movw	r30, r18
    3118:	80 81       	ld	r24, Z
    311a:	8f 60       	ori	r24, 0x0F	; 15
    311c:	80 83       	st	Z, r24
}
    311e:	08 95       	ret

00003120 <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    3120:	cf 92       	push	r12
    3122:	df 92       	push	r13
    3124:	ef 92       	push	r14
    3126:	ff 92       	push	r15
    3128:	0f 93       	push	r16
    312a:	1f 93       	push	r17
    312c:	cf 93       	push	r28
    312e:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.mutex) { 			// prevents ISR from clobbering non-ISR invocation
    3130:	80 91 0c 22 	lds	r24, 0x220C
    3134:	88 23       	and	r24, r24
    3136:	09 f0       	breq	.+2      	; 0x313a <st_execute_move+0x1a>
    3138:	32 c1       	rjmp	.+612    	; 0x339e <st_execute_move+0x27e>
		return;
	}
	ax.mutex = TRUE;
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	80 93 0c 22 	sts	0x220C, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    3140:	80 91 0e 22 	lds	r24, 0x220E
    3144:	88 23       	and	r24, r24
    3146:	09 f0       	breq	.+2      	; 0x314a <st_execute_move+0x2a>
    3148:	28 c1       	rjmp	.+592    	; 0x339a <st_execute_move+0x27a>
		ax.mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    314a:	0e 94 14 20 	call	0x4028	; 0x4028 <mv_dequeue_move_buffer>
    314e:	80 93 0f 22 	sts	0x220F, r24
    3152:	90 93 10 22 	sts	0x2210, r25
    3156:	89 2b       	or	r24, r25
    3158:	09 f4       	brne	.+2      	; 0x315c <st_execute_move+0x3c>
    315a:	1f c1       	rjmp	.+574    	; 0x339a <st_execute_move+0x27a>
		ax.mutex = FALSE;
		return;
    315c:	61 e1       	ldi	r22, 0x11	; 17
    315e:	72 e2       	ldi	r23, 0x22	; 34
    3160:	00 e0       	ldi	r16, 0x00	; 0
    3162:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    3164:	94 e0       	ldi	r25, 0x04	; 4
    3166:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    3168:	82 e0       	ldi	r24, 0x02	; 2
    316a:	d8 2e       	mov	r13, r24
		ax.mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.mutex = FALSE;
		return;
    316c:	f0 2e       	mov	r15, r16
    316e:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    3170:	db 01       	movw	r26, r22
    3172:	1e 96       	adiw	r26, 0x0e	; 14
    3174:	ed 91       	ld	r30, X+
    3176:	fc 91       	ld	r31, X
    3178:	1f 97       	sbiw	r26, 0x0f	; 15
    317a:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    317c:	c0 91 0f 22 	lds	r28, 0x220F
    3180:	d0 91 10 22 	lds	r29, 0x2210
    3184:	c8 01       	movw	r24, r16
    3186:	fc 01       	movw	r30, r24
    3188:	b3 e0       	ldi	r27, 0x03	; 3
    318a:	ee 0f       	add	r30, r30
    318c:	ff 1f       	adc	r31, r31
    318e:	ba 95       	dec	r27
    3190:	e1 f7       	brne	.-8      	; 0x318a <st_execute_move+0x6a>
    3192:	88 0f       	add	r24, r24
    3194:	99 1f       	adc	r25, r25
    3196:	e8 0f       	add	r30, r24
    3198:	f9 1f       	adc	r31, r25
    319a:	ec 0f       	add	r30, r28
    319c:	fd 1f       	adc	r31, r29
    319e:	80 81       	ld	r24, Z
    31a0:	91 81       	ldd	r25, Z+1	; 0x01
    31a2:	a2 81       	ldd	r26, Z+2	; 0x02
    31a4:	b3 81       	ldd	r27, Z+3	; 0x03
    31a6:	00 97       	sbiw	r24, 0x00	; 0
    31a8:	a1 05       	cpc	r26, r1
    31aa:	b1 05       	cpc	r27, r1
    31ac:	09 f4       	brne	.+2      	; 0x31b0 <st_execute_move+0x90>
    31ae:	a6 c0       	rjmp	.+332    	; 0x32fc <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    31b0:	c8 01       	movw	r24, r16
    31b2:	9c 01       	movw	r18, r24
    31b4:	f3 e0       	ldi	r31, 0x03	; 3
    31b6:	22 0f       	add	r18, r18
    31b8:	33 1f       	adc	r19, r19
    31ba:	fa 95       	dec	r31
    31bc:	e1 f7       	brne	.-8      	; 0x31b6 <st_execute_move+0x96>
    31be:	88 0f       	add	r24, r24
    31c0:	99 1f       	adc	r25, r25
    31c2:	28 0f       	add	r18, r24
    31c4:	39 1f       	adc	r19, r25
    31c6:	c2 0f       	add	r28, r18
    31c8:	d3 1f       	adc	r29, r19
    31ca:	89 85       	ldd	r24, Y+9	; 0x09
    31cc:	fb 01       	movw	r30, r22
    31ce:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    31d0:	e0 91 0f 22 	lds	r30, 0x220F
    31d4:	f0 91 10 22 	lds	r31, 0x2210
    31d8:	c8 01       	movw	r24, r16
    31da:	9c 01       	movw	r18, r24
    31dc:	53 e0       	ldi	r21, 0x03	; 3
    31de:	22 0f       	add	r18, r18
    31e0:	33 1f       	adc	r19, r19
    31e2:	5a 95       	dec	r21
    31e4:	e1 f7       	brne	.-8      	; 0x31de <st_execute_move+0xbe>
    31e6:	88 0f       	add	r24, r24
    31e8:	99 1f       	adc	r25, r25
    31ea:	28 0f       	add	r18, r24
    31ec:	39 1f       	adc	r19, r25
    31ee:	e2 0f       	add	r30, r18
    31f0:	f3 1f       	adc	r31, r19
    31f2:	90 85       	ldd	r25, Z+8	; 0x08
    31f4:	db 01       	movw	r26, r22
    31f6:	1a 96       	adiw	r26, 0x0a	; 10
    31f8:	8c 91       	ld	r24, X
    31fa:	1a 97       	sbiw	r26, 0x0a	; 10
    31fc:	1c 96       	adiw	r26, 0x0c	; 12
    31fe:	ed 91       	ld	r30, X+
    3200:	fc 91       	ld	r31, X
    3202:	1d 97       	sbiw	r26, 0x0d	; 13
    3204:	98 17       	cp	r25, r24
    3206:	11 f0       	breq	.+4      	; 0x320c <st_execute_move+0xec>
    3208:	d5 82       	std	Z+5, r13	; 0x05
    320a:	01 c0       	rjmp	.+2      	; 0x320e <st_execute_move+0xee>
    320c:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    320e:	40 91 0f 22 	lds	r20, 0x220F
    3212:	50 91 10 22 	lds	r21, 0x2210
    3216:	8f 2d       	mov	r24, r15
    3218:	9e 2d       	mov	r25, r14
    321a:	fc 01       	movw	r30, r24
    321c:	33 e0       	ldi	r19, 0x03	; 3
    321e:	ee 0f       	add	r30, r30
    3220:	ff 1f       	adc	r31, r31
    3222:	3a 95       	dec	r19
    3224:	e1 f7       	brne	.-8      	; 0x321e <st_execute_move+0xfe>
    3226:	88 0f       	add	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	e8 0f       	add	r30, r24
    322c:	f9 1f       	adc	r31, r25
    322e:	e4 0f       	add	r30, r20
    3230:	f5 1f       	adc	r31, r21
    3232:	80 81       	ld	r24, Z
    3234:	91 81       	ldd	r25, Z+1	; 0x01
    3236:	a2 81       	ldd	r26, Z+2	; 0x02
    3238:	b3 81       	ldd	r27, Z+3	; 0x03
    323a:	fb 01       	movw	r30, r22
    323c:	80 83       	st	Z, r24
    323e:	91 83       	std	Z+1, r25	; 0x01
    3240:	a2 83       	std	Z+2, r26	; 0x02
    3242:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    3244:	8f 2d       	mov	r24, r15
    3246:	9e 2d       	mov	r25, r14
    3248:	fc 01       	movw	r30, r24
    324a:	b3 e0       	ldi	r27, 0x03	; 3
    324c:	ee 0f       	add	r30, r30
    324e:	ff 1f       	adc	r31, r31
    3250:	ba 95       	dec	r27
    3252:	e1 f7       	brne	.-8      	; 0x324c <st_execute_move+0x12c>
    3254:	88 0f       	add	r24, r24
    3256:	99 1f       	adc	r25, r25
    3258:	e8 0f       	add	r30, r24
    325a:	f9 1f       	adc	r31, r25
    325c:	e4 0f       	add	r30, r20
    325e:	f5 1f       	adc	r31, r21
    3260:	86 81       	ldd	r24, Z+6	; 0x06
    3262:	97 81       	ldd	r25, Z+7	; 0x07
    3264:	db 01       	movw	r26, r22
    3266:	16 96       	adiw	r26, 0x06	; 6
    3268:	8d 93       	st	X+, r24
    326a:	9c 93       	st	X, r25
    326c:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    326e:	8f 2d       	mov	r24, r15
    3270:	9e 2d       	mov	r25, r14
    3272:	fc 01       	movw	r30, r24
    3274:	33 e0       	ldi	r19, 0x03	; 3
    3276:	ee 0f       	add	r30, r30
    3278:	ff 1f       	adc	r31, r31
    327a:	3a 95       	dec	r19
    327c:	e1 f7       	brne	.-8      	; 0x3276 <st_execute_move+0x156>
    327e:	88 0f       	add	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	e8 0f       	add	r30, r24
    3284:	f9 1f       	adc	r31, r25
    3286:	e4 0f       	add	r30, r20
    3288:	f5 1f       	adc	r31, r21
    328a:	86 81       	ldd	r24, Z+6	; 0x06
    328c:	97 81       	ldd	r25, Z+7	; 0x07
    328e:	18 96       	adiw	r26, 0x08	; 8
    3290:	8d 93       	st	X+, r24
    3292:	9c 93       	st	X, r25
    3294:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    3296:	8f 2d       	mov	r24, r15
    3298:	9e 2d       	mov	r25, r14
    329a:	fc 01       	movw	r30, r24
    329c:	33 e0       	ldi	r19, 0x03	; 3
    329e:	ee 0f       	add	r30, r30
    32a0:	ff 1f       	adc	r31, r31
    32a2:	3a 95       	dec	r19
    32a4:	e1 f7       	brne	.-8      	; 0x329e <st_execute_move+0x17e>
    32a6:	88 0f       	add	r24, r24
    32a8:	99 1f       	adc	r25, r25
    32aa:	e8 0f       	add	r30, r24
    32ac:	f9 1f       	adc	r31, r25
    32ae:	e4 0f       	add	r30, r20
    32b0:	f5 1f       	adc	r31, r21
    32b2:	84 81       	ldd	r24, Z+4	; 0x04
    32b4:	95 81       	ldd	r25, Z+5	; 0x05
    32b6:	14 96       	adiw	r26, 0x04	; 4
    32b8:	8d 93       	st	X+, r24
    32ba:	9c 93       	st	X, r25
    32bc:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    32be:	1e 96       	adiw	r26, 0x0e	; 14
    32c0:	ed 91       	ld	r30, X+
    32c2:	fc 91       	ld	r31, X
    32c4:	1f 97       	sbiw	r26, 0x0f	; 15
    32c6:	8f 2d       	mov	r24, r15
    32c8:	9e 2d       	mov	r25, r14
    32ca:	9c 01       	movw	r18, r24
    32cc:	b3 e0       	ldi	r27, 0x03	; 3
    32ce:	22 0f       	add	r18, r18
    32d0:	33 1f       	adc	r19, r19
    32d2:	ba 95       	dec	r27
    32d4:	e1 f7       	brne	.-8      	; 0x32ce <st_execute_move+0x1ae>
    32d6:	88 0f       	add	r24, r24
    32d8:	99 1f       	adc	r25, r25
    32da:	28 0f       	add	r18, r24
    32dc:	39 1f       	adc	r19, r25
    32de:	42 0f       	add	r20, r18
    32e0:	53 1f       	adc	r21, r19
    32e2:	da 01       	movw	r26, r20
    32e4:	14 96       	adiw	r26, 0x04	; 4
    32e6:	8d 91       	ld	r24, X+
    32e8:	9c 91       	ld	r25, X
    32ea:	15 97       	sbiw	r26, 0x05	; 5
    32ec:	86 a3       	std	Z+38, r24	; 0x26
    32ee:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    32f0:	db 01       	movw	r26, r22
    32f2:	1c 96       	adiw	r26, 0x0c	; 12
    32f4:	ed 91       	ld	r30, X+
    32f6:	fc 91       	ld	r31, X
    32f8:	1d 97       	sbiw	r26, 0x0d	; 13
    32fa:	c6 82       	std	Z+6, r12	; 0x06
    32fc:	0f 5f       	subi	r16, 0xFF	; 255
    32fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3300:	60 5f       	subi	r22, 0xF0	; 240
    3302:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    3304:	03 30       	cpi	r16, 0x03	; 3
    3306:	11 05       	cpc	r17, r1
    3308:	09 f0       	breq	.+2      	; 0x330c <st_execute_move+0x1ec>
    330a:	30 cf       	rjmp	.-416    	; 0x316c <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    330c:	10 92 0e 22 	sts	0x220E, r1
	if (ax.a[X].step_counter) { 
    3310:	80 91 11 22 	lds	r24, 0x2211
    3314:	90 91 12 22 	lds	r25, 0x2212
    3318:	a0 91 13 22 	lds	r26, 0x2213
    331c:	b0 91 14 22 	lds	r27, 0x2214
    3320:	00 97       	sbiw	r24, 0x00	; 0
    3322:	a1 05       	cpc	r26, r1
    3324:	b1 05       	cpc	r27, r1
    3326:	59 f0       	breq	.+22     	; 0x333e <st_execute_move+0x21e>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    3328:	e0 91 1f 22 	lds	r30, 0x221F
    332c:	f0 91 20 22 	lds	r31, 0x2220
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    3334:	80 91 0e 22 	lds	r24, 0x220E
    3338:	88 60       	ori	r24, 0x08	; 8
    333a:	80 93 0e 22 	sts	0x220E, r24
	}
	if (ax.a[Y].step_counter) {
    333e:	80 91 21 22 	lds	r24, 0x2221
    3342:	90 91 22 22 	lds	r25, 0x2222
    3346:	a0 91 23 22 	lds	r26, 0x2223
    334a:	b0 91 24 22 	lds	r27, 0x2224
    334e:	00 97       	sbiw	r24, 0x00	; 0
    3350:	a1 05       	cpc	r26, r1
    3352:	b1 05       	cpc	r27, r1
    3354:	59 f0       	breq	.+22     	; 0x336c <st_execute_move+0x24c>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    3356:	e0 91 2f 22 	lds	r30, 0x222F
    335a:	f0 91 30 22 	lds	r31, 0x2230
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    3362:	80 91 0e 22 	lds	r24, 0x220E
    3366:	84 60       	ori	r24, 0x04	; 4
    3368:	80 93 0e 22 	sts	0x220E, r24
	}
	if (ax.a[Z].step_counter) {
    336c:	80 91 31 22 	lds	r24, 0x2231
    3370:	90 91 32 22 	lds	r25, 0x2232
    3374:	a0 91 33 22 	lds	r26, 0x2233
    3378:	b0 91 34 22 	lds	r27, 0x2234
    337c:	00 97       	sbiw	r24, 0x00	; 0
    337e:	a1 05       	cpc	r26, r1
    3380:	b1 05       	cpc	r27, r1
    3382:	59 f0       	breq	.+22     	; 0x339a <st_execute_move+0x27a>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    3384:	e0 91 3f 22 	lds	r30, 0x223F
    3388:	f0 91 40 22 	lds	r31, 0x2240
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    3390:	80 91 0e 22 	lds	r24, 0x220E
    3394:	82 60       	ori	r24, 0x02	; 2
    3396:	80 93 0e 22 	sts	0x220E, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.mutex = FALSE;
    339a:	10 92 0c 22 	sts	0x220C, r1
}
    339e:	df 91       	pop	r29
    33a0:	cf 91       	pop	r28
    33a2:	1f 91       	pop	r17
    33a4:	0f 91       	pop	r16
    33a6:	ff 90       	pop	r15
    33a8:	ef 90       	pop	r14
    33aa:	df 90       	pop	r13
    33ac:	cf 90       	pop	r12
    33ae:	08 95       	ret

000033b0 <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.mutex = FALSE;
    33b0:	10 92 0c 22 	sts	0x220C, r1
	st_execute_move();		// recursively empty the move queue
    33b4:	0e 94 90 18 	call	0x3120	; 0x3120 <st_execute_move>
	return;
}
    33b8:	08 95       	ret

000033ba <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    33ba:	1f 92       	push	r1
    33bc:	0f 92       	push	r0
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	0f 92       	push	r0
    33c2:	0b b6       	in	r0, 0x3b	; 59
    33c4:	0f 92       	push	r0
    33c6:	11 24       	eor	r1, r1
    33c8:	2f 93       	push	r18
    33ca:	3f 93       	push	r19
    33cc:	4f 93       	push	r20
    33ce:	5f 93       	push	r21
    33d0:	6f 93       	push	r22
    33d2:	7f 93       	push	r23
    33d4:	8f 93       	push	r24
    33d6:	9f 93       	push	r25
    33d8:	af 93       	push	r26
    33da:	bf 93       	push	r27
    33dc:	ef 93       	push	r30
    33de:	ff 93       	push	r31
	if (ax.stopped) {
    33e0:	80 91 0d 22 	lds	r24, 0x220D
    33e4:	88 23       	and	r24, r24
    33e6:	09 f0       	breq	.+2      	; 0x33ea <__vector_108+0x30>
    33e8:	3f c0       	rjmp	.+126    	; 0x3468 <__vector_108+0xae>
		return;
	}
	if (--ax.a[A].postscale_counter != 0) {
    33ea:	80 91 49 22 	lds	r24, 0x2249
    33ee:	90 91 4a 22 	lds	r25, 0x224A
    33f2:	01 97       	sbiw	r24, 0x01	; 1
    33f4:	80 93 49 22 	sts	0x2249, r24
    33f8:	90 93 4a 22 	sts	0x224A, r25
    33fc:	89 2b       	or	r24, r25
    33fe:	a1 f5       	brne	.+104    	; 0x3468 <__vector_108+0xae>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    3400:	e0 e6       	ldi	r30, 0x60	; 96
    3402:	f6 e0       	ldi	r31, 0x06	; 6
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    3408:	80 91 41 22 	lds	r24, 0x2241
    340c:	90 91 42 22 	lds	r25, 0x2242
    3410:	a0 91 43 22 	lds	r26, 0x2243
    3414:	b0 91 44 22 	lds	r27, 0x2244
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	a1 09       	sbc	r26, r1
    341c:	b1 09       	sbc	r27, r1
    341e:	80 93 41 22 	sts	0x2241, r24
    3422:	90 93 42 22 	sts	0x2242, r25
    3426:	a0 93 43 22 	sts	0x2243, r26
    342a:	b0 93 44 22 	sts	0x2244, r27
    342e:	00 97       	sbiw	r24, 0x00	; 0
    3430:	a1 05       	cpc	r26, r1
    3432:	b1 05       	cpc	r27, r1
    3434:	69 f4       	brne	.+26     	; 0x3450 <__vector_108+0x96>
		A_TIMER.CTRLA = TC_CLK_OFF;
    3436:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    343a:	84 e0       	ldi	r24, 0x04	; 4
    343c:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    343e:	80 91 0e 22 	lds	r24, 0x220E
    3442:	8e 7f       	andi	r24, 0xFE	; 254
    3444:	80 93 0e 22 	sts	0x220E, r24
		if (ax.active_axes == 0) {
    3448:	88 23       	and	r24, r24
    344a:	11 f4       	brne	.+4      	; 0x3450 <__vector_108+0x96>
			st_execute_move();
    344c:	0e 94 90 18 	call	0x3120	; 0x3120 <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    3450:	80 91 47 22 	lds	r24, 0x2247
    3454:	90 91 48 22 	lds	r25, 0x2248
    3458:	80 93 49 22 	sts	0x2249, r24
    345c:	90 93 4a 22 	sts	0x224A, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	e0 e6       	ldi	r30, 0x60	; 96
    3464:	f6 e0       	ldi	r31, 0x06	; 6
    3466:	86 83       	std	Z+6, r24	; 0x06
}
    3468:	ff 91       	pop	r31
    346a:	ef 91       	pop	r30
    346c:	bf 91       	pop	r27
    346e:	af 91       	pop	r26
    3470:	9f 91       	pop	r25
    3472:	8f 91       	pop	r24
    3474:	7f 91       	pop	r23
    3476:	6f 91       	pop	r22
    3478:	5f 91       	pop	r21
    347a:	4f 91       	pop	r20
    347c:	3f 91       	pop	r19
    347e:	2f 91       	pop	r18
    3480:	0f 90       	pop	r0
    3482:	0b be       	out	0x3b, r0	; 59
    3484:	0f 90       	pop	r0
    3486:	0f be       	out	0x3f, r0	; 63
    3488:	0f 90       	pop	r0
    348a:	1f 90       	pop	r1
    348c:	18 95       	reti

0000348e <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    348e:	1f 92       	push	r1
    3490:	0f 92       	push	r0
    3492:	0f b6       	in	r0, 0x3f	; 63
    3494:	0f 92       	push	r0
    3496:	0b b6       	in	r0, 0x3b	; 59
    3498:	0f 92       	push	r0
    349a:	11 24       	eor	r1, r1
    349c:	2f 93       	push	r18
    349e:	3f 93       	push	r19
    34a0:	4f 93       	push	r20
    34a2:	5f 93       	push	r21
    34a4:	6f 93       	push	r22
    34a6:	7f 93       	push	r23
    34a8:	8f 93       	push	r24
    34aa:	9f 93       	push	r25
    34ac:	af 93       	push	r26
    34ae:	bf 93       	push	r27
    34b0:	ef 93       	push	r30
    34b2:	ff 93       	push	r31
	if (ax.stopped) {
    34b4:	80 91 0d 22 	lds	r24, 0x220D
    34b8:	88 23       	and	r24, r24
    34ba:	09 f0       	breq	.+2      	; 0x34be <__vector_47+0x30>
    34bc:	3f c0       	rjmp	.+126    	; 0x353c <__vector_47+0xae>
		return;
	}
	if (--ax.a[Z].postscale_counter != 0) {
    34be:	80 91 39 22 	lds	r24, 0x2239
    34c2:	90 91 3a 22 	lds	r25, 0x223A
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	80 93 39 22 	sts	0x2239, r24
    34cc:	90 93 3a 22 	sts	0x223A, r25
    34d0:	89 2b       	or	r24, r25
    34d2:	a1 f5       	brne	.+104    	; 0x353c <__vector_47+0xae>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    34d4:	e0 e8       	ldi	r30, 0x80	; 128
    34d6:	f6 e0       	ldi	r31, 0x06	; 6
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    34dc:	80 91 31 22 	lds	r24, 0x2231
    34e0:	90 91 32 22 	lds	r25, 0x2232
    34e4:	a0 91 33 22 	lds	r26, 0x2233
    34e8:	b0 91 34 22 	lds	r27, 0x2234
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	a1 09       	sbc	r26, r1
    34f0:	b1 09       	sbc	r27, r1
    34f2:	80 93 31 22 	sts	0x2231, r24
    34f6:	90 93 32 22 	sts	0x2232, r25
    34fa:	a0 93 33 22 	sts	0x2233, r26
    34fe:	b0 93 34 22 	sts	0x2234, r27
    3502:	00 97       	sbiw	r24, 0x00	; 0
    3504:	a1 05       	cpc	r26, r1
    3506:	b1 05       	cpc	r27, r1
    3508:	69 f4       	brne	.+26     	; 0x3524 <__vector_47+0x96>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    350a:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    350e:	84 e0       	ldi	r24, 0x04	; 4
    3510:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    3512:	80 91 0e 22 	lds	r24, 0x220E
    3516:	8d 7f       	andi	r24, 0xFD	; 253
    3518:	80 93 0e 22 	sts	0x220E, r24
		if (ax.active_axes == 0) {
    351c:	88 23       	and	r24, r24
    351e:	11 f4       	brne	.+4      	; 0x3524 <__vector_47+0x96>
			st_execute_move();
    3520:	0e 94 90 18 	call	0x3120	; 0x3120 <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    3524:	80 91 37 22 	lds	r24, 0x2237
    3528:	90 91 38 22 	lds	r25, 0x2238
    352c:	80 93 39 22 	sts	0x2239, r24
    3530:	90 93 3a 22 	sts	0x223A, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	e0 e8       	ldi	r30, 0x80	; 128
    3538:	f6 e0       	ldi	r31, 0x06	; 6
    353a:	86 83       	std	Z+6, r24	; 0x06
}
    353c:	ff 91       	pop	r31
    353e:	ef 91       	pop	r30
    3540:	bf 91       	pop	r27
    3542:	af 91       	pop	r26
    3544:	9f 91       	pop	r25
    3546:	8f 91       	pop	r24
    3548:	7f 91       	pop	r23
    354a:	6f 91       	pop	r22
    354c:	5f 91       	pop	r21
    354e:	4f 91       	pop	r20
    3550:	3f 91       	pop	r19
    3552:	2f 91       	pop	r18
    3554:	0f 90       	pop	r0
    3556:	0b be       	out	0x3b, r0	; 59
    3558:	0f 90       	pop	r0
    355a:	0f be       	out	0x3f, r0	; 63
    355c:	0f 90       	pop	r0
    355e:	1f 90       	pop	r1
    3560:	18 95       	reti

00003562 <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    3562:	1f 92       	push	r1
    3564:	0f 92       	push	r0
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	0f 92       	push	r0
    356a:	0b b6       	in	r0, 0x3b	; 59
    356c:	0f 92       	push	r0
    356e:	11 24       	eor	r1, r1
    3570:	2f 93       	push	r18
    3572:	3f 93       	push	r19
    3574:	4f 93       	push	r20
    3576:	5f 93       	push	r21
    3578:	6f 93       	push	r22
    357a:	7f 93       	push	r23
    357c:	8f 93       	push	r24
    357e:	9f 93       	push	r25
    3580:	af 93       	push	r26
    3582:	bf 93       	push	r27
    3584:	ef 93       	push	r30
    3586:	ff 93       	push	r31
	if (ax.stopped) {
    3588:	80 91 0d 22 	lds	r24, 0x220D
    358c:	88 23       	and	r24, r24
    358e:	09 f0       	breq	.+2      	; 0x3592 <__vector_77+0x30>
    3590:	3f c0       	rjmp	.+126    	; 0x3610 <__vector_77+0xae>
		return;
	}
	if (--ax.a[Y].postscale_counter != 0) {
    3592:	80 91 29 22 	lds	r24, 0x2229
    3596:	90 91 2a 22 	lds	r25, 0x222A
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	80 93 29 22 	sts	0x2229, r24
    35a0:	90 93 2a 22 	sts	0x222A, r25
    35a4:	89 2b       	or	r24, r25
    35a6:	a1 f5       	brne	.+104    	; 0x3610 <__vector_77+0xae>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    35a8:	e0 ea       	ldi	r30, 0xA0	; 160
    35aa:	f6 e0       	ldi	r31, 0x06	; 6
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    35b0:	80 91 21 22 	lds	r24, 0x2221
    35b4:	90 91 22 22 	lds	r25, 0x2222
    35b8:	a0 91 23 22 	lds	r26, 0x2223
    35bc:	b0 91 24 22 	lds	r27, 0x2224
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	a1 09       	sbc	r26, r1
    35c4:	b1 09       	sbc	r27, r1
    35c6:	80 93 21 22 	sts	0x2221, r24
    35ca:	90 93 22 22 	sts	0x2222, r25
    35ce:	a0 93 23 22 	sts	0x2223, r26
    35d2:	b0 93 24 22 	sts	0x2224, r27
    35d6:	00 97       	sbiw	r24, 0x00	; 0
    35d8:	a1 05       	cpc	r26, r1
    35da:	b1 05       	cpc	r27, r1
    35dc:	69 f4       	brne	.+26     	; 0x35f8 <__vector_77+0x96>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    35de:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    35e2:	84 e0       	ldi	r24, 0x04	; 4
    35e4:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    35e6:	80 91 0e 22 	lds	r24, 0x220E
    35ea:	8b 7f       	andi	r24, 0xFB	; 251
    35ec:	80 93 0e 22 	sts	0x220E, r24
		if (ax.active_axes == 0) {
    35f0:	88 23       	and	r24, r24
    35f2:	11 f4       	brne	.+4      	; 0x35f8 <__vector_77+0x96>
			st_execute_move();
    35f4:	0e 94 90 18 	call	0x3120	; 0x3120 <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    35f8:	80 91 27 22 	lds	r24, 0x2227
    35fc:	90 91 28 22 	lds	r25, 0x2228
    3600:	80 93 29 22 	sts	0x2229, r24
    3604:	90 93 2a 22 	sts	0x222A, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	e0 ea       	ldi	r30, 0xA0	; 160
    360c:	f6 e0       	ldi	r31, 0x06	; 6
    360e:	86 83       	std	Z+6, r24	; 0x06
}
    3610:	ff 91       	pop	r31
    3612:	ef 91       	pop	r30
    3614:	bf 91       	pop	r27
    3616:	af 91       	pop	r26
    3618:	9f 91       	pop	r25
    361a:	8f 91       	pop	r24
    361c:	7f 91       	pop	r23
    361e:	6f 91       	pop	r22
    3620:	5f 91       	pop	r21
    3622:	4f 91       	pop	r20
    3624:	3f 91       	pop	r19
    3626:	2f 91       	pop	r18
    3628:	0f 90       	pop	r0
    362a:	0b be       	out	0x3b, r0	; 59
    362c:	0f 90       	pop	r0
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	0f 90       	pop	r0
    3632:	1f 90       	pop	r1
    3634:	18 95       	reti

00003636 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    3636:	1f 92       	push	r1
    3638:	0f 92       	push	r0
    363a:	0f b6       	in	r0, 0x3f	; 63
    363c:	0f 92       	push	r0
    363e:	0b b6       	in	r0, 0x3b	; 59
    3640:	0f 92       	push	r0
    3642:	11 24       	eor	r1, r1
    3644:	2f 93       	push	r18
    3646:	3f 93       	push	r19
    3648:	4f 93       	push	r20
    364a:	5f 93       	push	r21
    364c:	6f 93       	push	r22
    364e:	7f 93       	push	r23
    3650:	8f 93       	push	r24
    3652:	9f 93       	push	r25
    3654:	af 93       	push	r26
    3656:	bf 93       	push	r27
    3658:	ef 93       	push	r30
    365a:	ff 93       	push	r31
	if (ax.stopped) {
    365c:	80 91 0d 22 	lds	r24, 0x220D
    3660:	88 23       	and	r24, r24
    3662:	09 f0       	breq	.+2      	; 0x3666 <__vector_14+0x30>
    3664:	45 c0       	rjmp	.+138    	; 0x36f0 <__vector_14+0xba>
		return;
	}
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    3666:	80 91 19 22 	lds	r24, 0x2219
    366a:	90 91 1a 22 	lds	r25, 0x221A
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	80 93 19 22 	sts	0x2219, r24
    3674:	90 93 1a 22 	sts	0x221A, r25
    3678:	89 2b       	or	r24, r25
    367a:	d1 f5       	brne	.+116    	; 0x36f0 <__vector_14+0xba>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    367c:	80 91 1c 22 	lds	r24, 0x221C
    3680:	88 23       	and	r24, r24
    3682:	21 f4       	brne	.+8      	; 0x368c <__vector_14+0x56>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	e0 e0       	ldi	r30, 0x00	; 0
    3688:	f6 e0       	ldi	r31, 0x06	; 6
    368a:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    368c:	80 91 11 22 	lds	r24, 0x2211
    3690:	90 91 12 22 	lds	r25, 0x2212
    3694:	a0 91 13 22 	lds	r26, 0x2213
    3698:	b0 91 14 22 	lds	r27, 0x2214
    369c:	01 97       	sbiw	r24, 0x01	; 1
    369e:	a1 09       	sbc	r26, r1
    36a0:	b1 09       	sbc	r27, r1
    36a2:	80 93 11 22 	sts	0x2211, r24
    36a6:	90 93 12 22 	sts	0x2212, r25
    36aa:	a0 93 13 22 	sts	0x2213, r26
    36ae:	b0 93 14 22 	sts	0x2214, r27
    36b2:	00 97       	sbiw	r24, 0x00	; 0
    36b4:	a1 05       	cpc	r26, r1
    36b6:	b1 05       	cpc	r27, r1
    36b8:	79 f4       	brne	.+30     	; 0x36d8 <__vector_14+0xa2>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    36ba:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    36be:	84 e0       	ldi	r24, 0x04	; 4
    36c0:	e0 e0       	ldi	r30, 0x00	; 0
    36c2:	f6 e0       	ldi	r31, 0x06	; 6
    36c4:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    36c6:	80 91 0e 22 	lds	r24, 0x220E
    36ca:	87 7f       	andi	r24, 0xF7	; 247
    36cc:	80 93 0e 22 	sts	0x220E, r24
		if (ax.active_axes == 0) {				// if all axes are done
    36d0:	88 23       	and	r24, r24
    36d2:	11 f4       	brne	.+4      	; 0x36d8 <__vector_14+0xa2>
			st_execute_move();					// ...run the next move
    36d4:	0e 94 90 18 	call	0x3120	; 0x3120 <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    36d8:	80 91 17 22 	lds	r24, 0x2217
    36dc:	90 91 18 22 	lds	r25, 0x2218
    36e0:	80 93 19 22 	sts	0x2219, r24
    36e4:	90 93 1a 22 	sts	0x221A, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	e0 e0       	ldi	r30, 0x00	; 0
    36ec:	f6 e0       	ldi	r31, 0x06	; 6
    36ee:	86 83       	std	Z+6, r24	; 0x06
}
    36f0:	ff 91       	pop	r31
    36f2:	ef 91       	pop	r30
    36f4:	bf 91       	pop	r27
    36f6:	af 91       	pop	r26
    36f8:	9f 91       	pop	r25
    36fa:	8f 91       	pop	r24
    36fc:	7f 91       	pop	r23
    36fe:	6f 91       	pop	r22
    3700:	5f 91       	pop	r21
    3702:	4f 91       	pop	r20
    3704:	3f 91       	pop	r19
    3706:	2f 91       	pop	r18
    3708:	0f 90       	pop	r0
    370a:	0b be       	out	0x3b, r0	; 59
    370c:	0f 90       	pop	r0
    370e:	0f be       	out	0x3f, r0	; 63
    3710:	0f 90       	pop	r0
    3712:	1f 90       	pop	r1
    3714:	18 95       	reti

00003716 <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    3716:	e0 ea       	ldi	r30, 0xA0	; 160
    3718:	f0 e0       	ldi	r31, 0x00	; 0
    371a:	82 81       	ldd	r24, Z+2	; 0x02
    371c:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    371e:	98 ed       	ldi	r25, 0xD8	; 216
    3720:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    3722:	82 83       	std	Z+2, r24	; 0x02
}
    3724:	08 95       	ret

00003726 <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    3726:	e0 ea       	ldi	r30, 0xA0	; 160
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	82 81       	ldd	r24, Z+2	; 0x02
    372c:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    372e:	98 ed       	ldi	r25, 0xD8	; 216
    3730:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    3732:	82 83       	std	Z+2, r24	; 0x02
}
    3734:	08 95       	ret

00003736 <xio_setflags>:
 * xio_setflags()
 */

int xio_setflags(const uint8_t dev, const uint16_t control)
{
	struct xioDEVICE *d = &ds[dev];
    3736:	97 e1       	ldi	r25, 0x17	; 23
    3738:	89 9f       	mul	r24, r25
    373a:	f0 01       	movw	r30, r0
    373c:	11 24       	eor	r1, r1
    373e:	e7 54       	subi	r30, 0x47	; 71
    3740:	fb 4d       	sbci	r31, 0xDB	; 219

	if (control & XIO_RD) {
    3742:	64 ff       	sbrs	r22, 4
    3744:	05 c0       	rjmp	.+10     	; 0x3750 <xio_setflags+0x1a>
		d->flags |= XIO_FLAG_RD_bm;
    3746:	80 81       	ld	r24, Z
    3748:	91 81       	ldd	r25, Z+1	; 0x01
    374a:	81 60       	ori	r24, 0x01	; 1
    374c:	80 83       	st	Z, r24
    374e:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_WR) {
    3750:	65 ff       	sbrs	r22, 5
    3752:	05 c0       	rjmp	.+10     	; 0x375e <xio_setflags+0x28>
		d->flags |= XIO_FLAG_WR_bm;
    3754:	80 81       	ld	r24, Z
    3756:	91 81       	ldd	r25, Z+1	; 0x01
    3758:	82 60       	ori	r24, 0x02	; 2
    375a:	80 83       	st	Z, r24
    375c:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_BLOCK) {
    375e:	66 ff       	sbrs	r22, 6
    3760:	05 c0       	rjmp	.+10     	; 0x376c <xio_setflags+0x36>
		d->flags |= XIO_FLAG_BLOCK_bm;
    3762:	80 81       	ld	r24, Z
    3764:	91 81       	ldd	r25, Z+1	; 0x01
    3766:	84 60       	ori	r24, 0x04	; 4
    3768:	80 83       	st	Z, r24
    376a:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOBLOCK) {
    376c:	67 ff       	sbrs	r22, 7
    376e:	05 c0       	rjmp	.+10     	; 0x377a <xio_setflags+0x44>
		d->flags &= ~XIO_FLAG_BLOCK_bm;
    3770:	80 81       	ld	r24, Z
    3772:	91 81       	ldd	r25, Z+1	; 0x01
    3774:	8b 7f       	andi	r24, 0xFB	; 251
    3776:	80 83       	st	Z, r24
    3778:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_ECHO) {
    377a:	70 ff       	sbrs	r23, 0
    377c:	05 c0       	rjmp	.+10     	; 0x3788 <xio_setflags+0x52>
		d->flags |= XIO_FLAG_ECHO_bm;
    377e:	80 81       	ld	r24, Z
    3780:	91 81       	ldd	r25, Z+1	; 0x01
    3782:	80 61       	ori	r24, 0x10	; 16
    3784:	80 83       	st	Z, r24
    3786:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOECHO) {
    3788:	71 ff       	sbrs	r23, 1
    378a:	05 c0       	rjmp	.+10     	; 0x3796 <xio_setflags+0x60>
		d->flags &= ~XIO_FLAG_ECHO_bm;
    378c:	80 81       	ld	r24, Z
    378e:	91 81       	ldd	r25, Z+1	; 0x01
    3790:	8f 7e       	andi	r24, 0xEF	; 239
    3792:	80 83       	st	Z, r24
    3794:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_CRLF) {
    3796:	72 ff       	sbrs	r23, 2
    3798:	05 c0       	rjmp	.+10     	; 0x37a4 <xio_setflags+0x6e>
		d->flags |= XIO_FLAG_CRLF_bm;
    379a:	80 81       	ld	r24, Z
    379c:	91 81       	ldd	r25, Z+1	; 0x01
    379e:	80 62       	ori	r24, 0x20	; 32
    37a0:	80 83       	st	Z, r24
    37a2:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOCRLF) {
    37a4:	73 ff       	sbrs	r23, 3
    37a6:	05 c0       	rjmp	.+10     	; 0x37b2 <xio_setflags+0x7c>
		d->flags &= ~XIO_FLAG_CRLF_bm;
    37a8:	80 81       	ld	r24, Z
    37aa:	91 81       	ldd	r25, Z+1	; 0x01
    37ac:	8f 7d       	andi	r24, 0xDF	; 223
    37ae:	80 83       	st	Z, r24
    37b0:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_LINEMODE) {
    37b2:	74 ff       	sbrs	r23, 4
    37b4:	05 c0       	rjmp	.+10     	; 0x37c0 <xio_setflags+0x8a>
		d->flags |= XIO_FLAG_LINEMODE_bm;
    37b6:	80 81       	ld	r24, Z
    37b8:	91 81       	ldd	r25, Z+1	; 0x01
    37ba:	80 64       	ori	r24, 0x40	; 64
    37bc:	80 83       	st	Z, r24
    37be:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOLINEMODE) {
    37c0:	75 ff       	sbrs	r23, 5
    37c2:	05 c0       	rjmp	.+10     	; 0x37ce <xio_setflags+0x98>
		d->flags &= ~XIO_FLAG_LINEMODE_bm;
    37c4:	80 81       	ld	r24, Z
    37c6:	91 81       	ldd	r25, Z+1	; 0x01
    37c8:	8f 7b       	andi	r24, 0xBF	; 191
    37ca:	80 83       	st	Z, r24
    37cc:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_SEMICOLONS) {
    37ce:	76 ff       	sbrs	r23, 6
    37d0:	05 c0       	rjmp	.+10     	; 0x37dc <xio_setflags+0xa6>
		d->flags |= XIO_FLAG_SEMICOLONS_bm;
    37d2:	80 81       	ld	r24, Z
    37d4:	91 81       	ldd	r25, Z+1	; 0x01
    37d6:	80 68       	ori	r24, 0x80	; 128
    37d8:	80 83       	st	Z, r24
    37da:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOSEMICOLONS) {
    37dc:	77 ff       	sbrs	r23, 7
    37de:	05 c0       	rjmp	.+10     	; 0x37ea <xio_setflags+0xb4>
		d->flags &= ~XIO_FLAG_SEMICOLONS_bm;
    37e0:	80 81       	ld	r24, Z
    37e2:	91 81       	ldd	r25, Z+1	; 0x01
    37e4:	8f 77       	andi	r24, 0x7F	; 127
    37e6:	80 83       	st	Z, r24
    37e8:	91 83       	std	Z+1, r25	; 0x01
	}
	return (XIO_OK);
}
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	08 95       	ret

000037f0 <xio_set_stdin>:
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	27 e1       	ldi	r18, 0x17	; 23
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	82 9f       	mul	r24, r18
    37f8:	f0 01       	movw	r30, r0
    37fa:	83 9f       	mul	r24, r19
    37fc:	f0 0d       	add	r31, r0
    37fe:	92 9f       	mul	r25, r18
    3800:	f0 0d       	add	r31, r0
    3802:	11 24       	eor	r1, r1
    3804:	e7 54       	subi	r30, 0x47	; 71
    3806:	fb 4d       	sbci	r31, 0xDB	; 219
    3808:	83 89       	ldd	r24, Z+19	; 0x13
    380a:	94 89       	ldd	r25, Z+20	; 0x14
    380c:	80 93 4f 26 	sts	0x264F, r24
    3810:	90 93 50 26 	sts	0x2650, r25
}
    3814:	08 95       	ret

00003816 <xio_set_stdout>:

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	27 e1       	ldi	r18, 0x17	; 23
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	82 9f       	mul	r24, r18
    381e:	f0 01       	movw	r30, r0
    3820:	83 9f       	mul	r24, r19
    3822:	f0 0d       	add	r31, r0
    3824:	92 9f       	mul	r25, r18
    3826:	f0 0d       	add	r31, r0
    3828:	11 24       	eor	r1, r1
    382a:	e7 54       	subi	r30, 0x47	; 71
    382c:	fb 4d       	sbci	r31, 0xDB	; 219
    382e:	83 89       	ldd	r24, Z+19	; 0x13
    3830:	94 89       	ldd	r25, Z+20	; 0x14
    3832:	80 93 51 26 	sts	0x2651, r24
    3836:	90 93 52 26 	sts	0x2652, r25
}
    383a:	08 95       	ret

0000383c <xio_set_stderr>:

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	27 e1       	ldi	r18, 0x17	; 23
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	82 9f       	mul	r24, r18
    3844:	f0 01       	movw	r30, r0
    3846:	83 9f       	mul	r24, r19
    3848:	f0 0d       	add	r31, r0
    384a:	92 9f       	mul	r25, r18
    384c:	f0 0d       	add	r31, r0
    384e:	11 24       	eor	r1, r1
    3850:	e7 54       	subi	r30, 0x47	; 71
    3852:	fb 4d       	sbci	r31, 0xDB	; 219
    3854:	83 89       	ldd	r24, Z+19	; 0x13
    3856:	94 89       	ldd	r25, Z+20	; 0x14
    3858:	80 93 53 26 	sts	0x2653, r24
    385c:	90 93 54 26 	sts	0x2654, r25
}
    3860:	08 95       	ret

00003862 <xio_putc>:
/*
 * xio_putc() - common entry point for putc
 */

int xio_putc(const uint8_t dev, const char c)
{
    3862:	46 2f       	mov	r20, r22
	if (dev < XIO_DEV_COUNT) {
    3864:	88 30       	cpi	r24, 0x08	; 8
    3866:	18 f0       	brcs	.+6      	; 0x386e <xio_putc+0xc>
    3868:	27 e0       	ldi	r18, 0x07	; 7
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	15 c0       	rjmp	.+42     	; 0x3898 <xio_putc+0x36>
		return ds[dev].x_putc(c, ds[dev].fdev);
    386e:	28 2f       	mov	r18, r24
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	87 e1       	ldi	r24, 0x17	; 23
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	28 9f       	mul	r18, r24
    3878:	f0 01       	movw	r30, r0
    387a:	29 9f       	mul	r18, r25
    387c:	f0 0d       	add	r31, r0
    387e:	38 9f       	mul	r19, r24
    3880:	f0 0d       	add	r31, r0
    3882:	11 24       	eor	r1, r1
    3884:	e7 54       	subi	r30, 0x47	; 71
    3886:	fb 4d       	sbci	r31, 0xDB	; 219
    3888:	63 89       	ldd	r22, Z+19	; 0x13
    388a:	74 89       	ldd	r23, Z+20	; 0x14
    388c:	03 84       	ldd	r0, Z+11	; 0x0b
    388e:	f4 85       	ldd	r31, Z+12	; 0x0c
    3890:	e0 2d       	mov	r30, r0
    3892:	84 2f       	mov	r24, r20
    3894:	19 95       	eicall
    3896:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}
}
    3898:	c9 01       	movw	r24, r18
    389a:	08 95       	ret

0000389c <xio_getc>:
 * xio_getc() - common entry point for getc
 */

int xio_getc(const uint8_t dev)
{
	if (dev < XIO_DEV_COUNT) {
    389c:	88 30       	cpi	r24, 0x08	; 8
    389e:	18 f0       	brcs	.+6      	; 0x38a6 <xio_getc+0xa>
    38a0:	27 e0       	ldi	r18, 0x07	; 7
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	14 c0       	rjmp	.+40     	; 0x38ce <xio_getc+0x32>
		return ds[dev].x_getc(ds[dev].fdev);
    38a6:	28 2f       	mov	r18, r24
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	87 e1       	ldi	r24, 0x17	; 23
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	28 9f       	mul	r18, r24
    38b0:	f0 01       	movw	r30, r0
    38b2:	29 9f       	mul	r18, r25
    38b4:	f0 0d       	add	r31, r0
    38b6:	38 9f       	mul	r19, r24
    38b8:	f0 0d       	add	r31, r0
    38ba:	11 24       	eor	r1, r1
    38bc:	e7 54       	subi	r30, 0x47	; 71
    38be:	fb 4d       	sbci	r31, 0xDB	; 219
    38c0:	25 85       	ldd	r18, Z+13	; 0x0d
    38c2:	36 85       	ldd	r19, Z+14	; 0x0e
    38c4:	83 89       	ldd	r24, Z+19	; 0x13
    38c6:	94 89       	ldd	r25, Z+20	; 0x14
    38c8:	f9 01       	movw	r30, r18
    38ca:	19 95       	eicall
    38cc:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}		
}
    38ce:	c9 01       	movw	r24, r18
    38d0:	08 95       	ret

000038d2 <xio_readln>:
 *	size	size of text buffer in 1 offset form: e.g. use 80 instead of 79
 */

int xio_readln(const uint8_t dev, char *buf, const uint8_t size)
{
	if (dev < XIO_DEV_COUNT) {
    38d2:	88 30       	cpi	r24, 0x08	; 8
    38d4:	18 f0       	brcs	.+6      	; 0x38dc <xio_readln+0xa>
    38d6:	27 e0       	ldi	r18, 0x07	; 7
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	14 c0       	rjmp	.+40     	; 0x3904 <xio_readln+0x32>
		return ds[dev].x_readln(buf, size);
    38dc:	28 2f       	mov	r18, r24
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	87 e1       	ldi	r24, 0x17	; 23
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	28 9f       	mul	r18, r24
    38e6:	f0 01       	movw	r30, r0
    38e8:	29 9f       	mul	r18, r25
    38ea:	f0 0d       	add	r31, r0
    38ec:	38 9f       	mul	r19, r24
    38ee:	f0 0d       	add	r31, r0
    38f0:	11 24       	eor	r1, r1
    38f2:	e7 54       	subi	r30, 0x47	; 71
    38f4:	fb 4d       	sbci	r31, 0xDB	; 219
    38f6:	07 84       	ldd	r0, Z+15	; 0x0f
    38f8:	f0 89       	ldd	r31, Z+16	; 0x10
    38fa:	e0 2d       	mov	r30, r0
    38fc:	cb 01       	movw	r24, r22
    38fe:	64 2f       	mov	r22, r20
    3900:	19 95       	eicall
    3902:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}		
}
    3904:	c9 01       	movw	r24, r18
    3906:	08 95       	ret

00003908 <xio_init_dev>:
	int (*x_setflags)(const uint16_t control),// set device control flags
	int (*x_putc)(char, struct __file *),		// write char (stdio compatible)
	int (*x_getc)(struct __file *),			// read char (stdio compatible)
	int (*x_readln)(char *buf, uint8_t size)	// specialized line reader
	) 
{
    3908:	df 92       	push	r13
    390a:	ef 92       	push	r14
    390c:	ff 92       	push	r15
    390e:	0f 93       	push	r16
    3910:	1f 93       	push	r17
    3912:	cf 93       	push	r28
    3914:	df 93       	push	r29
	// clear device struct
	memset (&ds[dev], 0, sizeof(struct xioDEVICE));	
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	e7 e1       	ldi	r30, 0x17	; 23
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	8e 9f       	mul	r24, r30
    391e:	d0 01       	movw	r26, r0
    3920:	8f 9f       	mul	r24, r31
    3922:	b0 0d       	add	r27, r0
    3924:	9e 9f       	mul	r25, r30
    3926:	b0 0d       	add	r27, r0
    3928:	11 24       	eor	r1, r1
    392a:	a7 54       	subi	r26, 0x47	; 71
    392c:	bb 4d       	sbci	r27, 0xDB	; 219
    392e:	0f 2e       	mov	r0, r31
    3930:	f7 e1       	ldi	r31, 0x17	; 23
    3932:	df 2e       	mov	r13, r31
    3934:	f0 2d       	mov	r31, r0
    3936:	ed 01       	movw	r28, r26
    3938:	19 92       	st	Y+, r1
    393a:	da 94       	dec	r13
    393c:	e9 f7       	brne	.-6      	; 0x3938 <xio_init_dev+0x30>

	// bind functions
	ds[dev].x_open = x_open;	
    393e:	17 96       	adiw	r26, 0x07	; 7
    3940:	6d 93       	st	X+, r22
    3942:	7c 93       	st	X, r23
    3944:	18 97       	sbiw	r26, 0x08	; 8
	ds[dev].x_setflags = x_setflags;
    3946:	19 96       	adiw	r26, 0x09	; 9
    3948:	4d 93       	st	X+, r20
    394a:	5c 93       	st	X, r21
    394c:	1a 97       	sbiw	r26, 0x0a	; 10
	ds[dev].x_putc = x_putc;
    394e:	1b 96       	adiw	r26, 0x0b	; 11
    3950:	2d 93       	st	X+, r18
    3952:	3c 93       	st	X, r19
    3954:	1c 97       	sbiw	r26, 0x0c	; 12
	ds[dev].x_getc = x_getc;
    3956:	1d 96       	adiw	r26, 0x0d	; 13
    3958:	0d 93       	st	X+, r16
    395a:	1c 93       	st	X, r17
    395c:	1e 97       	sbiw	r26, 0x0e	; 14
	ds[dev].x_readln = x_readln;
    395e:	1f 96       	adiw	r26, 0x0f	; 15
    3960:	ed 92       	st	X+, r14
    3962:	fc 92       	st	X, r15
    3964:	50 97       	sbiw	r26, 0x10	; 16

	// bind and setup stdio struct
	ds[dev].fdev = &ss[dev];					
    3966:	88 0f       	add	r24, r24
    3968:	99 1f       	adc	r25, r25
    396a:	fc 01       	movw	r30, r24
    396c:	43 e0       	ldi	r20, 0x03	; 3
    396e:	ee 0f       	add	r30, r30
    3970:	ff 1f       	adc	r31, r31
    3972:	4a 95       	dec	r20
    3974:	e1 f7       	brne	.-8      	; 0x396e <xio_init_dev+0x66>
    3976:	e8 1b       	sub	r30, r24
    3978:	f9 0b       	sbc	r31, r25
    397a:	ef 58       	subi	r30, 0x8F	; 143
    397c:	fa 4d       	sbci	r31, 0xDA	; 218
    397e:	53 96       	adiw	r26, 0x13	; 19
    3980:	ed 93       	st	X+, r30
    3982:	fc 93       	st	X, r31
    3984:	54 97       	sbiw	r26, 0x14	; 20
	fdev_setup_stream(ds[dev].fdev, x_putc, x_getc, _FDEV_SETUP_RW);
    3986:	20 87       	std	Z+8, r18	; 0x08
    3988:	31 87       	std	Z+9, r19	; 0x09
    398a:	02 87       	std	Z+10, r16	; 0x0a
    398c:	13 87       	std	Z+11, r17	; 0x0b
    398e:	83 e0       	ldi	r24, 0x03	; 3
    3990:	83 83       	std	Z+3, r24	; 0x03
    3992:	14 86       	std	Z+12, r1	; 0x0c
    3994:	15 86       	std	Z+13, r1	; 0x0d
}
    3996:	df 91       	pop	r29
    3998:	cf 91       	pop	r28
    399a:	1f 91       	pop	r17
    399c:	0f 91       	pop	r16
    399e:	ff 90       	pop	r15
    39a0:	ef 90       	pop	r14
    39a2:	df 90       	pop	r13
    39a4:	08 95       	ret

000039a6 <xio_init_stdio>:
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    39a6:	80 91 e6 25 	lds	r24, 0x25E6
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	27 e1       	ldi	r18, 0x17	; 23
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	82 9f       	mul	r24, r18
    39b2:	f0 01       	movw	r30, r0
    39b4:	83 9f       	mul	r24, r19
    39b6:	f0 0d       	add	r31, r0
    39b8:	92 9f       	mul	r25, r18
    39ba:	f0 0d       	add	r31, r0
    39bc:	11 24       	eor	r1, r1
    39be:	e7 54       	subi	r30, 0x47	; 71
    39c0:	fb 4d       	sbci	r31, 0xDB	; 219
    39c2:	83 89       	ldd	r24, Z+19	; 0x13
    39c4:	94 89       	ldd	r25, Z+20	; 0x14
    39c6:	80 93 4f 26 	sts	0x264F, r24
    39ca:	90 93 50 26 	sts	0x2650, r25
}

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    39ce:	80 93 51 26 	sts	0x2651, r24
    39d2:	90 93 52 26 	sts	0x2652, r25
}

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    39d6:	80 93 53 26 	sts	0x2653, r24
    39da:	90 93 54 26 	sts	0x2654, r25
#ifdef __SLAVE_MODE
	xio_set_stderr(XIO_DEV_USB);		// +++ debug
#endif

	// tell the world we are ready!
	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    39de:	0f 92       	push	r0
    39e0:	0f 92       	push	r0
    39e2:	8f e8       	ldi	r24, 0x8F	; 143
    39e4:	96 e0       	ldi	r25, 0x06	; 6
    39e6:	ed b7       	in	r30, 0x3d	; 61
    39e8:	fe b7       	in	r31, 0x3e	; 62
    39ea:	81 83       	std	Z+1, r24	; 0x01
    39ec:	92 83       	std	Z+2, r25	; 0x02
    39ee:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
    39f2:	0f 90       	pop	r0
    39f4:	0f 90       	pop	r0
}
    39f6:	08 95       	ret

000039f8 <xio_init>:
extern struct tgController tg;			// needed by init() for default source

void xio_init()
{	
	// call device inits
	xio_init_rs485();
    39f8:	0e 94 89 28 	call	0x5112	; 0x5112 <xio_init_rs485>
	xio_init_usb();
    39fc:	0e 94 77 27 	call	0x4eee	; 0x4eee <xio_init_usb>
	xio_init_pgm();
    3a00:	0e 94 99 29 	call	0x5332	; 0x5332 <xio_init_pgm>
}
    3a04:	08 95       	ret

00003a06 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    3a06:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3a08:	e0 ec       	ldi	r30, 0xC0	; 192
    3a0a:	f1 e0       	ldi	r31, 0x01	; 1
    3a0c:	80 91 cf 01 	lds	r24, 0x01CF
    3a10:	87 fd       	sbrc	r24, 7
    3a12:	fa cf       	rjmp	.-12     	; 0x3a08 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    3a14:	26 2f       	mov	r18, r22
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	2f 71       	andi	r18, 0x1F	; 31
    3a1a:	30 70       	andi	r19, 0x00	; 0
    3a1c:	89 2f       	mov	r24, r25
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	45 e0       	ldi	r20, 0x05	; 5
    3a22:	88 0f       	add	r24, r24
    3a24:	99 1f       	adc	r25, r25
    3a26:	4a 95       	dec	r20
    3a28:	e1 f7       	brne	.-8      	; 0x3a22 <EEPROM_ReadByte+0x1c>
    3a2a:	28 2b       	or	r18, r24
    3a2c:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    3a2e:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    3a32:	83 2f       	mov	r24, r19
    3a34:	8f 71       	andi	r24, 0x1F	; 31
    3a36:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    3a38:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    3a3a:	86 e0       	ldi	r24, 0x06	; 6
    3a3c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3a3e:	ef 93       	push	r30
    3a40:	ff 93       	push	r31
    3a42:	0f 93       	push	r16
    3a44:	2f 93       	push	r18
    3a46:	eb ec       	ldi	r30, 0xCB	; 203
    3a48:	f1 e0       	ldi	r31, 0x01	; 1
    3a4a:	08 ed       	ldi	r16, 0xD8	; 216
    3a4c:	21 e0       	ldi	r18, 0x01	; 1
    3a4e:	04 bf       	out	0x34, r16	; 52
    3a50:	20 83       	st	Z, r18
    3a52:	2f 91       	pop	r18
    3a54:	0f 91       	pop	r16
    3a56:	ff 91       	pop	r31
    3a58:	ef 91       	pop	r30

	return NVM.DATA0;
    3a5a:	80 91 c4 01 	lds	r24, 0x01C4
}
    3a5e:	08 95       	ret

00003a60 <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    3a60:	68 2f       	mov	r22, r24
    3a62:	6f 71       	andi	r22, 0x1F	; 31
    3a64:	55 e0       	ldi	r21, 0x05	; 5
    3a66:	96 95       	lsr	r25
    3a68:	87 95       	ror	r24
    3a6a:	5a 95       	dec	r21
    3a6c:	e1 f7       	brne	.-8      	; 0x3a66 <eeprom_get_char+0x6>
    3a6e:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <EEPROM_ReadByte>
}
    3a72:	08 95       	ret

00003a74 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    3a74:	8f 92       	push	r8
    3a76:	9f 92       	push	r9
    3a78:	af 92       	push	r10
    3a7a:	bf 92       	push	r11
    3a7c:	cf 92       	push	r12
    3a7e:	df 92       	push	r13
    3a80:	ff 92       	push	r15
    3a82:	0f 93       	push	r16
    3a84:	1f 93       	push	r17
    3a86:	cf 93       	push	r28
    3a88:	df 93       	push	r29
    3a8a:	4c 01       	movw	r8, r24
    3a8c:	5b 01       	movw	r10, r22
    3a8e:	6a 01       	movw	r12, r20
    3a90:	8b 01       	movw	r16, r22
    3a92:	ea 01       	movw	r28, r20
    3a94:	ff 24       	eor	r15, r15
    3a96:	18 c0       	rjmp	.+48     	; 0x3ac8 <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    3a98:	c8 01       	movw	r24, r16
    3a9a:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    3a9e:	ff 20       	and	r15, r15
    3aa0:	19 f0       	breq	.+6      	; 0x3aa8 <memcpy_from_eeprom_with_checksum+0x34>
    3aa2:	21 e0       	ldi	r18, 0x01	; 1
    3aa4:	30 e0       	ldi	r19, 0x00	; 0
    3aa6:	08 c0       	rjmp	.+16     	; 0x3ab8 <memcpy_from_eeprom_with_checksum+0x44>
    3aa8:	2f 2d       	mov	r18, r15
    3aaa:	33 27       	eor	r19, r19
    3aac:	27 fd       	sbrc	r18, 7
    3aae:	30 95       	com	r19
    3ab0:	22 27       	eor	r18, r18
    3ab2:	33 0f       	add	r19, r19
    3ab4:	22 1f       	adc	r18, r18
    3ab6:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    3ab8:	0f 5f       	subi	r16, 0xFF	; 255
    3aba:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    3abc:	f8 2e       	mov	r15, r24
    3abe:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    3ac0:	f4 01       	movw	r30, r8
    3ac2:	81 93       	st	Z+, r24
    3ac4:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    3ac6:	21 97       	sbiw	r28, 0x01	; 1
    3ac8:	20 97       	sbiw	r28, 0x00	; 0
    3aca:	31 f7       	brne	.-52     	; 0x3a98 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    3acc:	c6 01       	movw	r24, r12
    3ace:	8a 0d       	add	r24, r10
    3ad0:	9b 1d       	adc	r25, r11
    3ad2:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <eeprom_get_char>
    3ad6:	20 e0       	ldi	r18, 0x00	; 0
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	f8 16       	cp	r15, r24
    3adc:	11 f4       	brne	.+4      	; 0x3ae2 <memcpy_from_eeprom_with_checksum+0x6e>
    3ade:	21 e0       	ldi	r18, 0x01	; 1
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
}
    3ae2:	c9 01       	movw	r24, r18
    3ae4:	df 91       	pop	r29
    3ae6:	cf 91       	pop	r28
    3ae8:	1f 91       	pop	r17
    3aea:	0f 91       	pop	r16
    3aec:	ff 90       	pop	r15
    3aee:	df 90       	pop	r13
    3af0:	cf 90       	pop	r12
    3af2:	bf 90       	pop	r11
    3af4:	af 90       	pop	r10
    3af6:	9f 90       	pop	r9
    3af8:	8f 90       	pop	r8
    3afa:	08 95       	ret

00003afc <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3afc:	80 91 cf 01 	lds	r24, 0x01CF
    3b00:	87 fd       	sbrc	r24, 7
    3b02:	fc cf       	rjmp	.-8      	; 0x3afc <EEPROM_WaitForNVM>
}
    3b04:	08 95       	ret

00003b06 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3b06:	80 91 cf 01 	lds	r24, 0x01CF
    3b0a:	87 fd       	sbrc	r24, 7
    3b0c:	fc cf       	rjmp	.-8      	; 0x3b06 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    3b0e:	80 91 cf 01 	lds	r24, 0x01CF
    3b12:	81 ff       	sbrs	r24, 1
    3b14:	12 c0       	rjmp	.+36     	; 0x3b3a <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    3b16:	86 e3       	ldi	r24, 0x36	; 54
    3b18:	e0 ec       	ldi	r30, 0xC0	; 192
    3b1a:	f1 e0       	ldi	r31, 0x01	; 1
    3b1c:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    3b1e:	ef 93       	push	r30
    3b20:	ff 93       	push	r31
    3b22:	0f 93       	push	r16
    3b24:	2f 93       	push	r18
    3b26:	eb ec       	ldi	r30, 0xCB	; 203
    3b28:	f1 e0       	ldi	r31, 0x01	; 1
    3b2a:	08 ed       	ldi	r16, 0xD8	; 216
    3b2c:	21 e0       	ldi	r18, 0x01	; 1
    3b2e:	04 bf       	out	0x34, r16	; 52
    3b30:	20 83       	st	Z, r18
    3b32:	2f 91       	pop	r18
    3b34:	0f 91       	pop	r16
    3b36:	ff 91       	pop	r31
    3b38:	ef 91       	pop	r30
    3b3a:	08 95       	ret

00003b3c <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    3b3c:	df 92       	push	r13
    3b3e:	ef 92       	push	r14
    3b40:	ff 92       	push	r15
    3b42:	0f 93       	push	r16
    3b44:	1f 93       	push	r17
    3b46:	e8 2e       	mov	r14, r24
    3b48:	06 2f       	mov	r16, r22
    3b4a:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    3b4c:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    3b50:	e0 ec       	ldi	r30, 0xC0	; 192
    3b52:	f1 e0       	ldi	r31, 0x01	; 1
    3b54:	83 e3       	ldi	r24, 0x33	; 51
    3b56:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    3b58:	10 e0       	ldi	r17, 0x00	; 0
    3b5a:	0f 71       	andi	r16, 0x1F	; 31
    3b5c:	10 70       	andi	r17, 0x00	; 0
    3b5e:	ff 24       	eor	r15, r15
    3b60:	75 e0       	ldi	r23, 0x05	; 5
    3b62:	ee 0c       	add	r14, r14
    3b64:	ff 1c       	adc	r15, r15
    3b66:	7a 95       	dec	r23
    3b68:	e1 f7       	brne	.-8      	; 0x3b62 <EEPROM_WriteByte+0x26>
    3b6a:	0e 29       	or	r16, r14
    3b6c:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    3b6e:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    3b70:	81 2f       	mov	r24, r17
    3b72:	8f 71       	andi	r24, 0x1F	; 31
    3b74:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    3b76:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    3b78:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    3b7a:	85 e3       	ldi	r24, 0x35	; 53
    3b7c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3b7e:	ef 93       	push	r30
    3b80:	ff 93       	push	r31
    3b82:	0f 93       	push	r16
    3b84:	2f 93       	push	r18
    3b86:	eb ec       	ldi	r30, 0xCB	; 203
    3b88:	f1 e0       	ldi	r31, 0x01	; 1
    3b8a:	08 ed       	ldi	r16, 0xD8	; 216
    3b8c:	21 e0       	ldi	r18, 0x01	; 1
    3b8e:	04 bf       	out	0x34, r16	; 52
    3b90:	20 83       	st	Z, r18
    3b92:	2f 91       	pop	r18
    3b94:	0f 91       	pop	r16
    3b96:	ff 91       	pop	r31
    3b98:	ef 91       	pop	r30
}
    3b9a:	1f 91       	pop	r17
    3b9c:	0f 91       	pop	r16
    3b9e:	ff 90       	pop	r15
    3ba0:	ef 90       	pop	r14
    3ba2:	df 90       	pop	r13
    3ba4:	08 95       	ret

00003ba6 <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    3ba6:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    3ba8:	68 2f       	mov	r22, r24
    3baa:	6f 71       	andi	r22, 0x1F	; 31
    3bac:	e5 e0       	ldi	r30, 0x05	; 5
    3bae:	96 95       	lsr	r25
    3bb0:	87 95       	ror	r24
    3bb2:	ea 95       	dec	r30
    3bb4:	e1 f7       	brne	.-8      	; 0x3bae <eeprom_put_char+0x8>
    3bb6:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <EEPROM_WriteByte>
}
    3bba:	08 95       	ret

00003bbc <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    3bbc:	8f 92       	push	r8
    3bbe:	9f 92       	push	r9
    3bc0:	af 92       	push	r10
    3bc2:	bf 92       	push	r11
    3bc4:	cf 92       	push	r12
    3bc6:	df 92       	push	r13
    3bc8:	ef 92       	push	r14
    3bca:	ff 92       	push	r15
    3bcc:	0f 93       	push	r16
    3bce:	df 93       	push	r29
    3bd0:	cf 93       	push	r28
    3bd2:	0f 92       	push	r0
    3bd4:	0f 92       	push	r0
    3bd6:	cd b7       	in	r28, 0x3d	; 61
    3bd8:	de b7       	in	r29, 0x3e	; 62
    3bda:	5c 01       	movw	r10, r24
    3bdc:	6b 01       	movw	r12, r22
    3bde:	7a 01       	movw	r14, r20
    3be0:	4a 01       	movw	r8, r20
    3be2:	00 e0       	ldi	r16, 0x00	; 0
    3be4:	1e c0       	rjmp	.+60     	; 0x3c22 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    3be6:	00 23       	and	r16, r16
    3be8:	19 f0       	breq	.+6      	; 0x3bf0 <memcpy_to_eeprom_with_checksum+0x34>
    3bea:	21 e0       	ldi	r18, 0x01	; 1
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	08 c0       	rjmp	.+16     	; 0x3c00 <memcpy_to_eeprom_with_checksum+0x44>
    3bf0:	20 2f       	mov	r18, r16
    3bf2:	33 27       	eor	r19, r19
    3bf4:	27 fd       	sbrc	r18, 7
    3bf6:	30 95       	com	r19
    3bf8:	22 27       	eor	r18, r18
    3bfa:	33 0f       	add	r19, r19
    3bfc:	22 1f       	adc	r18, r18
    3bfe:	33 27       	eor	r19, r19
    checksum += *source;
    3c00:	f6 01       	movw	r30, r12
    3c02:	61 91       	ld	r22, Z+
    3c04:	6f 01       	movw	r12, r30
    3c06:	06 2f       	mov	r16, r22
    3c08:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    3c0a:	9c 01       	movw	r18, r24
    3c0c:	2f 5f       	subi	r18, 0xFF	; 255
    3c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c10:	29 83       	std	Y+1, r18	; 0x01
    3c12:	3a 83       	std	Y+2, r19	; 0x02
    3c14:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    3c18:	08 94       	sec
    3c1a:	81 08       	sbc	r8, r1
    3c1c:	91 08       	sbc	r9, r1
    3c1e:	89 81       	ldd	r24, Y+1	; 0x01
    3c20:	9a 81       	ldd	r25, Y+2	; 0x02
    3c22:	81 14       	cp	r8, r1
    3c24:	91 04       	cpc	r9, r1
    3c26:	f9 f6       	brne	.-66     	; 0x3be6 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    3c28:	c7 01       	movw	r24, r14
    3c2a:	8a 0d       	add	r24, r10
    3c2c:	9b 1d       	adc	r25, r11
    3c2e:	60 2f       	mov	r22, r16
    3c30:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <eeprom_put_char>
}
    3c34:	0f 90       	pop	r0
    3c36:	0f 90       	pop	r0
    3c38:	cf 91       	pop	r28
    3c3a:	df 91       	pop	r29
    3c3c:	0f 91       	pop	r16
    3c3e:	ff 90       	pop	r15
    3c40:	ef 90       	pop	r14
    3c42:	df 90       	pop	r13
    3c44:	cf 90       	pop	r12
    3c46:	bf 90       	pop	r11
    3c48:	af 90       	pop	r10
    3c4a:	9f 90       	pop	r9
    3c4c:	8f 90       	pop	r8
    3c4e:	08 95       	ret

00003c50 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    3c50:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3c52:	e0 ec       	ldi	r30, 0xC0	; 192
    3c54:	f1 e0       	ldi	r31, 0x01	; 1
    3c56:	80 91 cf 01 	lds	r24, 0x01CF
    3c5a:	87 fd       	sbrc	r24, 7
    3c5c:	fa cf       	rjmp	.-12     	; 0x3c52 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    3c5e:	83 e3       	ldi	r24, 0x33	; 51
    3c60:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    3c62:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    3c66:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    3c68:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    3c6a:	64 83       	std	Z+4, r22	; 0x04
}
    3c6c:	08 95       	ret

00003c6e <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    3c6e:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3c70:	e0 ec       	ldi	r30, 0xC0	; 192
    3c72:	f1 e0       	ldi	r31, 0x01	; 1
    3c74:	80 91 cf 01 	lds	r24, 0x01CF
    3c78:	87 fd       	sbrc	r24, 7
    3c7a:	fa cf       	rjmp	.-12     	; 0x3c70 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    3c7c:	83 e3       	ldi	r24, 0x33	; 51
    3c7e:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    3c80:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    3c82:	12 82       	std	Z+2, r1	; 0x02
    3c84:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    3c86:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    3c8a:	8d 91       	ld	r24, X+
    3c8c:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    3c8e:	9f 5f       	subi	r25, 0xFF	; 255
    3c90:	90 32       	cpi	r25, 0x20	; 32
    3c92:	c9 f7       	brne	.-14     	; 0x3c86 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    3c94:	08 95       	ret

00003c96 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    3c96:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3c98:	e0 ec       	ldi	r30, 0xC0	; 192
    3c9a:	f1 e0       	ldi	r31, 0x01	; 1
    3c9c:	80 91 cf 01 	lds	r24, 0x01CF
    3ca0:	87 fd       	sbrc	r24, 7
    3ca2:	fa cf       	rjmp	.-12     	; 0x3c98 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    3ca4:	89 2f       	mov	r24, r25
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	a5 e0       	ldi	r26, 0x05	; 5
    3caa:	88 0f       	add	r24, r24
    3cac:	99 1f       	adc	r25, r25
    3cae:	aa 95       	dec	r26
    3cb0:	e1 f7       	brne	.-8      	; 0x3caa <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    3cb2:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    3cb6:	89 2f       	mov	r24, r25
    3cb8:	8f 71       	andi	r24, 0x1F	; 31
    3cba:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    3cbc:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    3cbe:	85 e3       	ldi	r24, 0x35	; 53
    3cc0:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3cc2:	ef 93       	push	r30
    3cc4:	ff 93       	push	r31
    3cc6:	0f 93       	push	r16
    3cc8:	2f 93       	push	r18
    3cca:	eb ec       	ldi	r30, 0xCB	; 203
    3ccc:	f1 e0       	ldi	r31, 0x01	; 1
    3cce:	08 ed       	ldi	r16, 0xD8	; 216
    3cd0:	21 e0       	ldi	r18, 0x01	; 1
    3cd2:	04 bf       	out	0x34, r16	; 52
    3cd4:	20 83       	st	Z, r18
    3cd6:	2f 91       	pop	r18
    3cd8:	0f 91       	pop	r16
    3cda:	ff 91       	pop	r31
    3cdc:	ef 91       	pop	r30
}
    3cde:	08 95       	ret

00003ce0 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    3ce0:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3ce2:	e0 ec       	ldi	r30, 0xC0	; 192
    3ce4:	f1 e0       	ldi	r31, 0x01	; 1
    3ce6:	80 91 cf 01 	lds	r24, 0x01CF
    3cea:	87 fd       	sbrc	r24, 7
    3cec:	fa cf       	rjmp	.-12     	; 0x3ce2 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    3cee:	89 2f       	mov	r24, r25
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	b5 e0       	ldi	r27, 0x05	; 5
    3cf4:	88 0f       	add	r24, r24
    3cf6:	99 1f       	adc	r25, r25
    3cf8:	ba 95       	dec	r27
    3cfa:	e1 f7       	brne	.-8      	; 0x3cf4 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    3cfc:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    3d00:	89 2f       	mov	r24, r25
    3d02:	8f 71       	andi	r24, 0x1F	; 31
    3d04:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    3d06:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    3d08:	82 e3       	ldi	r24, 0x32	; 50
    3d0a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3d0c:	ef 93       	push	r30
    3d0e:	ff 93       	push	r31
    3d10:	0f 93       	push	r16
    3d12:	2f 93       	push	r18
    3d14:	eb ec       	ldi	r30, 0xCB	; 203
    3d16:	f1 e0       	ldi	r31, 0x01	; 1
    3d18:	08 ed       	ldi	r16, 0xD8	; 216
    3d1a:	21 e0       	ldi	r18, 0x01	; 1
    3d1c:	04 bf       	out	0x34, r16	; 52
    3d1e:	20 83       	st	Z, r18
    3d20:	2f 91       	pop	r18
    3d22:	0f 91       	pop	r16
    3d24:	ff 91       	pop	r31
    3d26:	ef 91       	pop	r30
}
    3d28:	08 95       	ret

00003d2a <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    3d2a:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3d2c:	e0 ec       	ldi	r30, 0xC0	; 192
    3d2e:	f1 e0       	ldi	r31, 0x01	; 1
    3d30:	80 91 cf 01 	lds	r24, 0x01CF
    3d34:	87 fd       	sbrc	r24, 7
    3d36:	fa cf       	rjmp	.-12     	; 0x3d2c <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    3d38:	89 2f       	mov	r24, r25
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	25 e0       	ldi	r18, 0x05	; 5
    3d3e:	88 0f       	add	r24, r24
    3d40:	99 1f       	adc	r25, r25
    3d42:	2a 95       	dec	r18
    3d44:	e1 f7       	brne	.-8      	; 0x3d3e <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    3d46:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    3d4a:	89 2f       	mov	r24, r25
    3d4c:	8f 71       	andi	r24, 0x1F	; 31
    3d4e:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    3d50:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    3d52:	84 e3       	ldi	r24, 0x34	; 52
    3d54:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3d56:	ef 93       	push	r30
    3d58:	ff 93       	push	r31
    3d5a:	0f 93       	push	r16
    3d5c:	2f 93       	push	r18
    3d5e:	eb ec       	ldi	r30, 0xCB	; 203
    3d60:	f1 e0       	ldi	r31, 0x01	; 1
    3d62:	08 ed       	ldi	r16, 0xD8	; 216
    3d64:	21 e0       	ldi	r18, 0x01	; 1
    3d66:	04 bf       	out	0x34, r16	; 52
    3d68:	20 83       	st	Z, r18
    3d6a:	2f 91       	pop	r18
    3d6c:	0f 91       	pop	r16
    3d6e:	ff 91       	pop	r31
    3d70:	ef 91       	pop	r30
}
    3d72:	08 95       	ret

00003d74 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3d74:	80 91 cf 01 	lds	r24, 0x01CF
    3d78:	87 fd       	sbrc	r24, 7
    3d7a:	fc cf       	rjmp	.-8      	; 0x3d74 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    3d7c:	80 e3       	ldi	r24, 0x30	; 48
    3d7e:	e0 ec       	ldi	r30, 0xC0	; 192
    3d80:	f1 e0       	ldi	r31, 0x01	; 1
    3d82:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3d84:	ef 93       	push	r30
    3d86:	ff 93       	push	r31
    3d88:	0f 93       	push	r16
    3d8a:	2f 93       	push	r18
    3d8c:	eb ec       	ldi	r30, 0xCB	; 203
    3d8e:	f1 e0       	ldi	r31, 0x01	; 1
    3d90:	08 ed       	ldi	r16, 0xD8	; 216
    3d92:	21 e0       	ldi	r18, 0x01	; 1
    3d94:	04 bf       	out	0x34, r16	; 52
    3d96:	20 83       	st	Z, r18
    3d98:	2f 91       	pop	r18
    3d9a:	0f 91       	pop	r16
    3d9c:	ff 91       	pop	r31
    3d9e:	ef 91       	pop	r30
}
    3da0:	08 95       	ret

00003da2 <tg_init>:
 */

void tg_init() 
{
	// set input source
	tg.default_src = DEFAULT_SOURCE; 		// set in tinyg.h
    3da2:	81 e0       	ldi	r24, 0x01	; 1
    3da4:	80 93 e6 25 	sts	0x25E6, r24
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    3da8:	e6 ee       	ldi	r30, 0xE6	; 230
    3daa:	f5 e2       	ldi	r31, 0x25	; 37
    3dac:	80 93 e5 25 	sts	0x25E5, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    3db0:	34 97       	sbiw	r30, 0x04	; 4
    3db2:	80 81       	ld	r24, Z
    3db4:	81 60       	ori	r24, 0x01	; 1
    3db6:	80 83       	st	Z, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    3db8:	10 92 e4 25 	sts	0x25E4, r1
{
	// set input source
	tg.default_src = DEFAULT_SOURCE; 		// set in tinyg.h
	_tg_set_source(tg.default_src);			// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
	tg.state = TG_READY_UNPROMPTED;
    3dbc:	10 92 e1 25 	sts	0x25E1, r1
}
    3dc0:	08 95       	ret

00003dc2 <tg_reset_source>:
 * tg_reset_source()  Reset source to default input device
 */

void tg_reset_source()
{
	_tg_set_source(tg.default_src);
    3dc2:	80 91 e6 25 	lds	r24, 0x25E6
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    3dc6:	80 93 e5 25 	sts	0x25E5, r24
	if (tg.src == XIO_DEV_PGM) {
    3dca:	83 30       	cpi	r24, 0x03	; 3
    3dcc:	21 f4       	brne	.+8      	; 0x3dd6 <tg_reset_source+0x14>
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    3dce:	80 91 e2 25 	lds	r24, 0x25E2
    3dd2:	8e 7f       	andi	r24, 0xFE	; 254
    3dd4:	03 c0       	rjmp	.+6      	; 0x3ddc <tg_reset_source+0x1a>
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    3dd6:	80 91 e2 25 	lds	r24, 0x25E2
    3dda:	81 60       	ori	r24, 0x01	; 1
    3ddc:	80 93 e2 25 	sts	0x25E2, r24
    3de0:	08 95       	ret

00003de2 <tg_print_status>:
	tgStatusMsg20
};

void tg_print_status(const uint8_t status_code, const char *textbuf)
{
	switch (status_code) {		// don't send messages for these status codes
    3de2:	84 30       	cpi	r24, 0x04	; 4
    3de4:	28 f4       	brcc	.+10     	; 0x3df0 <tg_print_status+0xe>
    3de6:	82 30       	cpi	r24, 0x02	; 2
    3de8:	28 f5       	brcc	.+74     	; 0x3e34 <tg_print_status+0x52>
    3dea:	88 23       	and	r24, r24
    3dec:	19 f1       	breq	.+70     	; 0x3e34 <tg_print_status+0x52>
    3dee:	02 c0       	rjmp	.+4      	; 0x3df4 <tg_print_status+0x12>
    3df0:	8b 30       	cpi	r24, 0x0B	; 11
    3df2:	01 f1       	breq	.+64     	; 0x3e34 <tg_print_status+0x52>
		case TG_OK: return;
		case TG_EAGAIN: return;
		case TG_NOOP: return;
		case TG_QUIT: return;
	}
	printf_P(PSTR("%S: %s\n"),(PGM_P)pgm_read_word(&tgStatusStrings[status_code]), textbuf);
    3df4:	e8 2f       	mov	r30, r24
    3df6:	f0 e0       	ldi	r31, 0x00	; 0
    3df8:	ee 0f       	add	r30, r30
    3dfa:	ff 1f       	adc	r31, r31
    3dfc:	e6 5c       	subi	r30, 0xC6	; 198
    3dfe:	f7 4f       	sbci	r31, 0xF7	; 247
    3e00:	25 91       	lpm	r18, Z+
    3e02:	34 91       	lpm	r19, Z+
    3e04:	00 d0       	rcall	.+0      	; 0x3e06 <tg_print_status+0x24>
    3e06:	00 d0       	rcall	.+0      	; 0x3e08 <tg_print_status+0x26>
    3e08:	ed b7       	in	r30, 0x3d	; 61
    3e0a:	fe b7       	in	r31, 0x3e	; 62
    3e0c:	31 96       	adiw	r30, 0x01	; 1
    3e0e:	84 e6       	ldi	r24, 0x64	; 100
    3e10:	98 e0       	ldi	r25, 0x08	; 8
    3e12:	ad b7       	in	r26, 0x3d	; 61
    3e14:	be b7       	in	r27, 0x3e	; 62
    3e16:	11 96       	adiw	r26, 0x01	; 1
    3e18:	8d 93       	st	X+, r24
    3e1a:	9c 93       	st	X, r25
    3e1c:	12 97       	sbiw	r26, 0x02	; 2
    3e1e:	22 83       	std	Z+2, r18	; 0x02
    3e20:	33 83       	std	Z+3, r19	; 0x03
    3e22:	64 83       	std	Z+4, r22	; 0x04
    3e24:	75 83       	std	Z+5, r23	; 0x05
    3e26:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
    3e2a:	8d b7       	in	r24, 0x3d	; 61
    3e2c:	9e b7       	in	r25, 0x3e	; 62
    3e2e:	06 96       	adiw	r24, 0x06	; 6
    3e30:	8d bf       	out	0x3d, r24	; 61
    3e32:	9e bf       	out	0x3e, r25	; 62
    3e34:	08 95       	ret

00003e36 <_tg_prompt>:
	tgModeStringDirect
};

void _tg_prompt()
{
	if (tg.state == TG_READY_UNPROMPTED) {
    3e36:	80 91 e1 25 	lds	r24, 0x25E1
    3e3a:	88 23       	and	r24, r24
    3e3c:	09 f5       	brne	.+66     	; 0x3e80 <_tg_prompt+0x4a>
		if (tg.flags && TG_FLAG_PROMPTS_bm) {
    3e3e:	80 91 e2 25 	lds	r24, 0x25E2
    3e42:	88 23       	and	r24, r24
    3e44:	d1 f0       	breq	.+52     	; 0x3e7a <_tg_prompt+0x44>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    3e46:	80 91 e4 25 	lds	r24, 0x25E4
    3e4a:	e8 2f       	mov	r30, r24
    3e4c:	f0 e0       	ldi	r31, 0x00	; 0
    3e4e:	ee 0f       	add	r30, r30
    3e50:	ff 1f       	adc	r31, r31
    3e52:	e3 51       	subi	r30, 0x13	; 19
    3e54:	f9 4f       	sbci	r31, 0xF9	; 249
    3e56:	25 91       	lpm	r18, Z+
    3e58:	34 91       	lpm	r19, Z+
    3e5a:	00 d0       	rcall	.+0      	; 0x3e5c <_tg_prompt+0x26>
    3e5c:	0f 92       	push	r0
    3e5e:	81 e8       	ldi	r24, 0x81	; 129
    3e60:	98 e0       	ldi	r25, 0x08	; 8
    3e62:	ed b7       	in	r30, 0x3d	; 61
    3e64:	fe b7       	in	r31, 0x3e	; 62
    3e66:	81 83       	std	Z+1, r24	; 0x01
    3e68:	92 83       	std	Z+2, r25	; 0x02
    3e6a:	23 83       	std	Z+3, r18	; 0x03
    3e6c:	34 83       	std	Z+4, r19	; 0x04
    3e6e:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
    3e72:	0f 90       	pop	r0
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	0f 90       	pop	r0
		}
		tg.state = TG_READY_PROMPTED;
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	80 93 e1 25 	sts	0x25E1, r24
    3e80:	08 95       	ret

00003e82 <tg_alive>:
 * tg_alive() - announce that TinyG is alive
 */

void tg_alive() 
{
	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    3e82:	00 d0       	rcall	.+0      	; 0x3e84 <tg_alive+0x2>
    3e84:	0f 92       	push	r0
    3e86:	89 e9       	ldi	r24, 0x99	; 153
    3e88:	98 e0       	ldi	r25, 0x08	; 8
    3e8a:	ed b7       	in	r30, 0x3d	; 61
    3e8c:	fe b7       	in	r31, 0x3e	; 62
    3e8e:	81 83       	std	Z+1, r24	; 0x01
    3e90:	92 83       	std	Z+2, r25	; 0x02
    3e92:	8f e8       	ldi	r24, 0x8F	; 143
    3e94:	98 e0       	ldi	r25, 0x08	; 8
    3e96:	83 83       	std	Z+3, r24	; 0x03
    3e98:	94 83       	std	Z+4, r25	; 0x04
    3e9a:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
	_tg_prompt();
    3e9e:	0f 90       	pop	r0
    3ea0:	0f 90       	pop	r0
    3ea2:	0f 90       	pop	r0
    3ea4:	0f 90       	pop	r0
    3ea6:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <_tg_prompt>
}
    3eaa:	08 95       	ret

00003eac <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    3eac:	cf 93       	push	r28
    3eae:	df 93       	push	r29
    3eb0:	ec 01       	movw	r28, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    3eb2:	80 91 e4 25 	lds	r24, 0x25E4
    3eb6:	88 23       	and	r24, r24
    3eb8:	09 f0       	breq	.+2      	; 0x3ebc <tg_parser+0x10>
    3eba:	3f c0       	rjmp	.+126    	; 0x3f3a <tg_parser+0x8e>
		switch (toupper(buf[0])) {
    3ebc:	88 81       	ld	r24, Y
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	0e 94 02 3c 	call	0x7804	; 0x7804 <toupper>
    3ec4:	86 34       	cpi	r24, 0x46	; 70
    3ec6:	91 05       	cpc	r25, r1
    3ec8:	41 f1       	breq	.+80     	; 0x3f1a <tg_parser+0x6e>
    3eca:	87 34       	cpi	r24, 0x47	; 71
    3ecc:	91 05       	cpc	r25, r1
    3ece:	84 f4       	brge	.+32     	; 0x3ef0 <tg_parser+0x44>
    3ed0:	83 34       	cpi	r24, 0x43	; 67
    3ed2:	91 05       	cpc	r25, r1
    3ed4:	e1 f0       	breq	.+56     	; 0x3f0e <tg_parser+0x62>
    3ed6:	84 34       	cpi	r24, 0x44	; 68
    3ed8:	91 05       	cpc	r25, r1
    3eda:	34 f4       	brge	.+12     	; 0x3ee8 <tg_parser+0x3c>
    3edc:	88 32       	cpi	r24, 0x28	; 40
    3ede:	91 05       	cpc	r25, r1
    3ee0:	a1 f0       	breq	.+40     	; 0x3f0a <tg_parser+0x5e>
    3ee2:	cf 97       	sbiw	r24, 0x3f	; 63
    3ee4:	41 f5       	brne	.+80     	; 0x3f36 <tg_parser+0x8a>
    3ee6:	13 c0       	rjmp	.+38     	; 0x3f0e <tg_parser+0x62>
    3ee8:	84 34       	cpi	r24, 0x44	; 68
    3eea:	91 05       	cpc	r25, r1
    3eec:	21 f5       	brne	.+72     	; 0x3f36 <tg_parser+0x8a>
    3eee:	13 c0       	rjmp	.+38     	; 0x3f16 <tg_parser+0x6a>
    3ef0:	8f 34       	cpi	r24, 0x4F	; 79
    3ef2:	91 05       	cpc	r25, r1
    3ef4:	3c f4       	brge	.+14     	; 0x3f04 <tg_parser+0x58>
    3ef6:	8d 34       	cpi	r24, 0x4D	; 77
    3ef8:	91 05       	cpc	r25, r1
    3efa:	3c f4       	brge	.+14     	; 0x3f0a <tg_parser+0x5e>
    3efc:	87 34       	cpi	r24, 0x47	; 71
    3efe:	91 05       	cpc	r25, r1
    3f00:	d1 f4       	brne	.+52     	; 0x3f36 <tg_parser+0x8a>
    3f02:	03 c0       	rjmp	.+6      	; 0x3f0a <tg_parser+0x5e>
    3f04:	8c 35       	cpi	r24, 0x5C	; 92
    3f06:	91 05       	cpc	r25, r1
    3f08:	b1 f4       	brne	.+44     	; 0x3f36 <tg_parser+0x8a>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    3f0a:	82 e0       	ldi	r24, 0x02	; 2
    3f0c:	01 c0       	rjmp	.+2      	; 0x3f10 <tg_parser+0x64>
int tg_parser(char * buf)
{
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
		switch (toupper(buf[0])) {
			case 'G': case 'M': case 'N': case '(': case '\\': _tg_set_mode(TG_GCODE_MODE); break;
    3f0e:	81 e0       	ldi	r24, 0x01	; 1
    3f10:	80 93 e4 25 	sts	0x25E4, r24
    3f14:	12 c0       	rjmp	.+36     	; 0x3f3a <tg_parser+0x8e>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    3f16:	83 e0       	ldi	r24, 0x03	; 3
    3f18:	fb cf       	rjmp	.-10     	; 0x3f10 <tg_parser+0x64>
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    3f1a:	83 e0       	ldi	r24, 0x03	; 3
    3f1c:	80 93 e5 25 	sts	0x25E5, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    3f20:	80 91 e2 25 	lds	r24, 0x25E2
    3f24:	8e 7f       	andi	r24, 0xFE	; 254
    3f26:	80 93 e2 25 	sts	0x25E2, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    3f2a:	82 e0       	ldi	r24, 0x02	; 2
    3f2c:	80 93 e4 25 	sts	0x25E4, r24
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	1d c0       	rjmp	.+58     	; 0x3f70 <tg_parser+0xc4>
	if (tg.mode == TG_CONTROL_MODE) {
		switch (toupper(buf[0])) {
			case 'G': case 'M': case 'N': case '(': case '\\': _tg_set_mode(TG_GCODE_MODE); break;
			case 'C': case '?': _tg_set_mode(TG_CONFIG_MODE); break;
			case 'D': _tg_set_mode(TG_DIRECT_DRIVE_MODE); break;
			case 'F': return (_tg_test_file());
    3f36:	10 92 e4 25 	sts	0x25E4, r1
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    3f3a:	10 92 e3 25 	sts	0x25E3, r1
	switch (tg.mode) {
    3f3e:	80 91 e4 25 	lds	r24, 0x25E4
    3f42:	82 30       	cpi	r24, 0x02	; 2
    3f44:	41 f0       	breq	.+16     	; 0x3f56 <tg_parser+0xaa>
    3f46:	83 30       	cpi	r24, 0x03	; 3
    3f48:	51 f0       	breq	.+20     	; 0x3f5e <tg_parser+0xb2>
    3f4a:	81 30       	cpi	r24, 0x01	; 1
    3f4c:	69 f4       	brne	.+26     	; 0x3f68 <tg_parser+0xbc>
		case TG_CONFIG_MODE: tg.status = cfg_parse(buf); break;
    3f4e:	ce 01       	movw	r24, r28
    3f50:	0e 94 2c 10 	call	0x2058	; 0x2058 <cfg_parse>
    3f54:	07 c0       	rjmp	.+14     	; 0x3f64 <tg_parser+0xb8>
		case TG_GCODE_MODE: tg.status = gc_gcode_parser(buf); break;
    3f56:	ce 01       	movw	r24, r28
    3f58:	0e 94 b1 0c 	call	0x1962	; 0x1962 <gc_gcode_parser>
    3f5c:	03 c0       	rjmp	.+6      	; 0x3f64 <tg_parser+0xb8>
		case TG_DIRECT_DRIVE_MODE: tg.status = dd_parser(buf); break;
    3f5e:	ce 01       	movw	r24, r28
    3f60:	0e 94 0c 20 	call	0x4018	; 0x4018 <dd_parser>
    3f64:	80 93 e3 25 	sts	0x25E3, r24
	}
	return (tg.status);
    3f68:	80 91 e3 25 	lds	r24, 0x25E3
    3f6c:	28 2f       	mov	r18, r24
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
}
    3f70:	c9 01       	movw	r24, r18
    3f72:	df 91       	pop	r29
    3f74:	cf 91       	pop	r28
    3f76:	08 95       	ret

00003f78 <tg_read_next_line>:
 */

int tg_read_next_line()
{
	// read input line or return if not a completed line
	if ((tg.status = xio_readln(tg.src, tg.buf, sizeof(tg.buf))) == TG_OK) {
    3f78:	80 91 e5 25 	lds	r24, 0x25E5
    3f7c:	68 ee       	ldi	r22, 0xE8	; 232
    3f7e:	75 e2       	ldi	r23, 0x25	; 37
    3f80:	40 e5       	ldi	r20, 0x50	; 80
    3f82:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <xio_readln>
    3f86:	80 93 e3 25 	sts	0x25E3, r24
    3f8a:	88 23       	and	r24, r24
    3f8c:	31 f4       	brne	.+12     	; 0x3f9a <tg_read_next_line+0x22>
		tg.status = tg_parser(tg.buf);				// dispatch to parser
    3f8e:	88 ee       	ldi	r24, 0xE8	; 232
    3f90:	95 e2       	ldi	r25, 0x25	; 37
    3f92:	0e 94 56 1f 	call	0x3eac	; 0x3eac <tg_parser>
    3f96:	80 93 e3 25 	sts	0x25E3, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    3f9a:	80 91 e3 25 	lds	r24, 0x25E3
    3f9e:	84 30       	cpi	r24, 0x04	; 4
    3fa0:	18 f4       	brcc	.+6      	; 0x3fa8 <tg_read_next_line+0x30>
    3fa2:	82 30       	cpi	r24, 0x02	; 2
    3fa4:	c0 f4       	brcc	.+48     	; 0x3fd6 <tg_read_next_line+0x5e>
    3fa6:	15 c0       	rjmp	.+42     	; 0x3fd2 <tg_read_next_line+0x5a>
    3fa8:	85 30       	cpi	r24, 0x05	; 5
    3faa:	29 f0       	breq	.+10     	; 0x3fb6 <tg_read_next_line+0x3e>
    3fac:	8b 30       	cpi	r24, 0x0B	; 11
    3fae:	89 f4       	brne	.+34     	; 0x3fd2 <tg_read_next_line+0x5a>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    3fb0:	10 92 e4 25 	sts	0x25E4, r1
    3fb4:	0e c0       	rjmp	.+28     	; 0x3fd2 <tg_read_next_line+0x5a>
			_tg_set_mode(TG_CONTROL_MODE);
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
    3fb6:	0f 92       	push	r0
    3fb8:	0f 92       	push	r0
    3fba:	8c e6       	ldi	r24, 0x6C	; 108
    3fbc:	98 e0       	ldi	r25, 0x08	; 8
    3fbe:	ed b7       	in	r30, 0x3d	; 61
    3fc0:	fe b7       	in	r31, 0x3e	; 62
    3fc2:	81 83       	std	Z+1, r24	; 0x01
    3fc4:	92 83       	std	Z+2, r25	; 0x02
    3fc6:	0e 94 af 3c 	call	0x795e	; 0x795e <printf_P>
			tg_reset_source();						// reset to default src
    3fca:	0f 90       	pop	r0
    3fcc:	0f 90       	pop	r0
    3fce:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <tg_reset_source>
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_READY_UNPROMPTED;			// traps various error returns
    3fd2:	10 92 e1 25 	sts	0x25E1, r1
		}
	}
	return (tg.status);
}
    3fd6:	80 91 e3 25 	lds	r24, 0x25E3
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	08 95       	ret

00003fde <tg_controller>:
	case (TG_EAGAIN): { return; } \
	case (TG_OK): { tg.state = TG_READY_UNPROMPTED; _tg_prompt(); return; } }

void tg_controller()
{
	st_execute_move();					// always start with this
    3fde:	0e 94 90 18 	call	0x3120	; 0x3120 <st_execute_move>
	DISPATCH(mc_line_continue());
    3fe2:	0e 94 a3 12 	call	0x2546	; 0x2546 <mc_line_continue>
    3fe6:	00 97       	sbiw	r24, 0x00	; 0
    3fe8:	89 f0       	breq	.+34     	; 0x400c <tg_controller+0x2e>
    3fea:	02 97       	sbiw	r24, 0x02	; 2
    3fec:	09 f4       	brne	.+2      	; 0x3ff0 <tg_controller+0x12>
    3fee:	08 95       	ret
	DISPATCH(mc_arc_continue());
    3ff0:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <mc_arc_continue>
    3ff4:	00 97       	sbiw	r24, 0x00	; 0
    3ff6:	51 f0       	breq	.+20     	; 0x400c <tg_controller+0x2e>
    3ff8:	02 97       	sbiw	r24, 0x02	; 2
    3ffa:	09 f4       	brne	.+2      	; 0x3ffe <tg_controller+0x20>
    3ffc:	08 95       	ret
	DISPATCH(tg_read_next_line());
    3ffe:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <tg_read_next_line>
    4002:	00 97       	sbiw	r24, 0x00	; 0
    4004:	19 f0       	breq	.+6      	; 0x400c <tg_controller+0x2e>
    4006:	02 97       	sbiw	r24, 0x02	; 2
    4008:	19 f4       	brne	.+6      	; 0x4010 <tg_controller+0x32>
    400a:	08 95       	ret
    400c:	10 92 e1 25 	sts	0x25E1, r1
	_tg_prompt();						// always end with this
    4010:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <_tg_prompt>
    4014:	08 95       	ret

00004016 <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    4016:	08 95       	ret

00004018 <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    4018:	80 e0       	ldi	r24, 0x00	; 0
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	08 95       	ret

0000401e <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    401e:	10 92 ad 21 	sts	0x21AD, r1
	mv.move_buffer_tail = 0;
    4022:	10 92 ae 21 	sts	0x21AE, r1
}
    4026:	08 95       	ret

00004028 <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    4028:	90 91 ad 21 	lds	r25, 0x21AD
    402c:	80 91 ae 21 	lds	r24, 0x21AE
    4030:	98 17       	cp	r25, r24
    4032:	19 f4       	brne	.+6      	; 0x403a <mv_dequeue_move_buffer+0x12>
    4034:	20 e0       	ldi	r18, 0x00	; 0
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	17 c0       	rjmp	.+46     	; 0x4068 <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    403a:	90 91 ae 21 	lds	r25, 0x21AE
    403e:	8e e1       	ldi	r24, 0x1E	; 30
    4040:	98 9f       	mul	r25, r24
    4042:	90 01       	movw	r18, r0
    4044:	11 24       	eor	r1, r1
    4046:	2f 54       	subi	r18, 0x4F	; 79
    4048:	3e 4d       	sbci	r19, 0xDE	; 222
    404a:	20 93 af 21 	sts	0x21AF, r18
    404e:	30 93 b0 21 	sts	0x21B0, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    4052:	80 91 ae 21 	lds	r24, 0x21AE
    4056:	8f 5f       	subi	r24, 0xFF	; 255
    4058:	80 93 ae 21 	sts	0x21AE, r24
    405c:	80 91 ae 21 	lds	r24, 0x21AE
    4060:	83 30       	cpi	r24, 0x03	; 3
    4062:	10 f0       	brcs	.+4      	; 0x4068 <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    4064:	10 92 ae 21 	sts	0x21AE, r1
	}
	return (mv.p); 
}
    4068:	c9 01       	movw	r24, r18
    406a:	08 95       	ret

0000406c <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    406c:	90 91 ad 21 	lds	r25, 0x21AD
    4070:	9f 5f       	subi	r25, 0xFF	; 255
    4072:	93 30       	cpi	r25, 0x03	; 3
    4074:	08 f0       	brcs	.+2      	; 0x4078 <mv_test_move_buffer_full+0xc>
    4076:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    4078:	80 91 ae 21 	lds	r24, 0x21AE
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	89 17       	cp	r24, r25
    4080:	09 f4       	brne	.+2      	; 0x4084 <mv_test_move_buffer_full+0x18>
    4082:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    4084:	82 2f       	mov	r24, r18
    4086:	08 95       	ret

00004088 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    4088:	0b c0       	rjmp	.+22     	; 0x40a0 <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    408a:	80 91 48 00 	lds	r24, 0x0048
    408e:	81 60       	ori	r24, 0x01	; 1
    4090:	80 93 48 00 	sts	0x0048, r24
    4094:	88 95       	sleep
    4096:	80 91 48 00 	lds	r24, 0x0048
    409a:	8e 7f       	andi	r24, 0xFE	; 254
    409c:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    40a0:	90 91 ae 21 	lds	r25, 0x21AE
    40a4:	80 91 ad 21 	lds	r24, 0x21AD
    40a8:	98 17       	cp	r25, r24
    40aa:	79 f7       	brne	.-34     	; 0x408a <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    40ac:	08 95       	ret

000040ae <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    40ae:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    40b0:	80 91 ad 21 	lds	r24, 0x21AD
    40b4:	80 93 ae 21 	sts	0x21AE, r24
	mv.p = NULL;
    40b8:	10 92 af 21 	sts	0x21AF, r1
    40bc:	10 92 b0 21 	sts	0x21B0, r1
	sei();
    40c0:	78 94       	sei
}
    40c2:	08 95       	ret

000040c4 <mv_queue_move_buffer>:
 *	defines the period. 
 */

uint8_t mv_queue_move_buffer(int32_t steps_x, int32_t steps_y, int32_t steps_z, 
							 uint32_t microseconds, uint8_t move_type)
{
    40c4:	2f 92       	push	r2
    40c6:	3f 92       	push	r3
    40c8:	4f 92       	push	r4
    40ca:	5f 92       	push	r5
    40cc:	6f 92       	push	r6
    40ce:	7f 92       	push	r7
    40d0:	8f 92       	push	r8
    40d2:	9f 92       	push	r9
    40d4:	af 92       	push	r10
    40d6:	bf 92       	push	r11
    40d8:	cf 92       	push	r12
    40da:	df 92       	push	r13
    40dc:	ef 92       	push	r14
    40de:	ff 92       	push	r15
    40e0:	0f 93       	push	r16
    40e2:	1f 93       	push	r17
    40e4:	df 93       	push	r29
    40e6:	cf 93       	push	r28
    40e8:	cd b7       	in	r28, 0x3d	; 61
    40ea:	de b7       	in	r29, 0x3e	; 62
    40ec:	2b 97       	sbiw	r28, 0x0b	; 11
    40ee:	cd bf       	out	0x3d, r28	; 61
    40f0:	de bf       	out	0x3e, r29	; 62
    40f2:	1b 01       	movw	r2, r22
    40f4:	2c 01       	movw	r4, r24
    40f6:	2a 83       	std	Y+2, r18	; 0x02
    40f8:	3b 83       	std	Y+3, r19	; 0x03
    40fa:	4c 83       	std	Y+4, r20	; 0x04
    40fc:	5d 83       	std	Y+5, r21	; 0x05
    40fe:	ee 82       	std	Y+6, r14	; 0x06
    4100:	ff 82       	std	Y+7, r15	; 0x07
    4102:	08 87       	std	Y+8, r16	; 0x08
    4104:	19 87       	std	Y+9, r17	; 0x09
	uint8_t next_buffer_head;
	uint8_t i;

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    4106:	80 91 ad 21 	lds	r24, 0x21AD
    410a:	8f 5f       	subi	r24, 0xFF	; 255
    410c:	89 83       	std	Y+1, r24	; 0x01
    410e:	83 30       	cpi	r24, 0x03	; 3
    4110:	08 f0       	brcs	.+2      	; 0x4114 <mv_queue_move_buffer+0x50>
    4112:	19 82       	std	Y+1, r1	; 0x01
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    4114:	80 91 ae 21 	lds	r24, 0x21AE
    4118:	99 81       	ldd	r25, Y+1	; 0x01
    411a:	89 17       	cp	r24, r25
    411c:	11 f4       	brne	.+4      	; 0x4122 <mv_queue_move_buffer+0x5e>
    411e:	8a e0       	ldi	r24, 0x0A	; 10
    4120:	1e c2       	rjmp	.+1084   	; 0x455e <mv_queue_move_buffer+0x49a>
		return (TG_BUFFER_FULL_NON_FATAL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    4122:	e0 91 ad 21 	lds	r30, 0x21AD
    4126:	8e e1       	ldi	r24, 0x1E	; 30
    4128:	e8 9f       	mul	r30, r24
    412a:	f0 01       	movw	r30, r0
    412c:	11 24       	eor	r1, r1
    412e:	ef 54       	subi	r30, 0x4F	; 79
    4130:	fe 4d       	sbci	r31, 0xDE	; 222
    4132:	e0 93 af 21 	sts	0x21AF, r30
    4136:	f0 93 b0 21 	sts	0x21B0, r31
	memset(mv.p, 0, sizeof(struct mvMove));
    413a:	df 01       	movw	r26, r30
    413c:	1d 92       	st	X+, r1
    413e:	8a 95       	dec	r24
    4140:	e9 f7       	brne	.-6      	; 0x413c <mv_queue_move_buffer+0x78>
	mv.p->a[X].steps = steps_x;
    4142:	60 90 af 21 	lds	r6, 0x21AF
    4146:	70 90 b0 21 	lds	r7, 0x21B0
    414a:	f3 01       	movw	r30, r6
    414c:	20 82       	st	Z, r2
    414e:	31 82       	std	Z+1, r3	; 0x01
    4150:	42 82       	std	Z+2, r4	; 0x02
    4152:	53 82       	std	Z+3, r5	; 0x03
	mv.p->a[Y].steps = steps_y;
    4154:	8a 81       	ldd	r24, Y+2	; 0x02
    4156:	9b 81       	ldd	r25, Y+3	; 0x03
    4158:	ac 81       	ldd	r26, Y+4	; 0x04
    415a:	bd 81       	ldd	r27, Y+5	; 0x05
    415c:	82 87       	std	Z+10, r24	; 0x0a
    415e:	93 87       	std	Z+11, r25	; 0x0b
    4160:	a4 87       	std	Z+12, r26	; 0x0c
    4162:	b5 87       	std	Z+13, r27	; 0x0d
	mv.p->a[Z].steps = steps_z;
    4164:	8e 81       	ldd	r24, Y+6	; 0x06
    4166:	9f 81       	ldd	r25, Y+7	; 0x07
    4168:	a8 85       	ldd	r26, Y+8	; 0x08
    416a:	b9 85       	ldd	r27, Y+9	; 0x09
    416c:	84 8b       	std	Z+20, r24	; 0x14
    416e:	95 8b       	std	Z+21, r25	; 0x15
    4170:	a6 8b       	std	Z+22, r26	; 0x16
    4172:	b7 8b       	std	Z+23, r27	; 0x17
	mv.microseconds = (uint64_t)microseconds;			// cast to larger base
    4174:	a0 92 a5 21 	sts	0x21A5, r10
    4178:	b0 92 a6 21 	sts	0x21A6, r11
    417c:	c0 92 a7 21 	sts	0x21A7, r12
    4180:	d0 92 a8 21 	sts	0x21A8, r13
    4184:	10 92 a9 21 	sts	0x21A9, r1
    4188:	10 92 aa 21 	sts	0x21AA, r1
    418c:	10 92 ab 21 	sts	0x21AB, r1
    4190:	10 92 ac 21 	sts	0x21AC, r1
	mv.ticks = mv.microseconds * TICKS_PER_MICROSECOND;
    4194:	95 01       	movw	r18, r10
    4196:	a6 01       	movw	r20, r12
    4198:	60 e0       	ldi	r22, 0x00	; 0
    419a:	70 e0       	ldi	r23, 0x00	; 0
    419c:	80 e0       	ldi	r24, 0x00	; 0
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	05 e0       	ldi	r16, 0x05	; 5
    41a2:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__ashldi3>
    41a6:	fc 01       	movw	r30, r24
    41a8:	95 e9       	ldi	r25, 0x95	; 149
    41aa:	89 2e       	mov	r8, r25
    41ac:	91 e2       	ldi	r25, 0x21	; 33
    41ae:	99 2e       	mov	r9, r25
    41b0:	20 93 95 21 	sts	0x2195, r18
    41b4:	d4 01       	movw	r26, r8
    41b6:	11 96       	adiw	r26, 0x01	; 1
    41b8:	3c 93       	st	X, r19
    41ba:	11 97       	sbiw	r26, 0x01	; 1
    41bc:	12 96       	adiw	r26, 0x02	; 2
    41be:	4c 93       	st	X, r20
    41c0:	12 97       	sbiw	r26, 0x02	; 2
    41c2:	13 96       	adiw	r26, 0x03	; 3
    41c4:	5c 93       	st	X, r21
    41c6:	13 97       	sbiw	r26, 0x03	; 3
    41c8:	14 96       	adiw	r26, 0x04	; 4
    41ca:	6c 93       	st	X, r22
    41cc:	14 97       	sbiw	r26, 0x04	; 4
    41ce:	15 96       	adiw	r26, 0x05	; 5
    41d0:	7c 93       	st	X, r23
    41d2:	15 97       	sbiw	r26, 0x05	; 5
    41d4:	16 96       	adiw	r26, 0x06	; 6
    41d6:	ec 93       	st	X, r30
    41d8:	16 97       	sbiw	r26, 0x06	; 6
    41da:	17 96       	adiw	r26, 0x07	; 7
    41dc:	fc 93       	st	X, r31

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    41de:	21 14       	cp	r2, r1
    41e0:	31 04       	cpc	r3, r1
    41e2:	41 04       	cpc	r4, r1
    41e4:	51 04       	cpc	r5, r1
    41e6:	09 f0       	breq	.+2      	; 0x41ea <mv_queue_move_buffer+0x126>
    41e8:	73 c0       	rjmp	.+230    	; 0x42d0 <mv_queue_move_buffer+0x20c>
    41ea:	8a 81       	ldd	r24, Y+2	; 0x02
    41ec:	9b 81       	ldd	r25, Y+3	; 0x03
    41ee:	ac 81       	ldd	r26, Y+4	; 0x04
    41f0:	bd 81       	ldd	r27, Y+5	; 0x05
    41f2:	00 97       	sbiw	r24, 0x00	; 0
    41f4:	a1 05       	cpc	r26, r1
    41f6:	b1 05       	cpc	r27, r1
    41f8:	09 f0       	breq	.+2      	; 0x41fc <mv_queue_move_buffer+0x138>
    41fa:	6a c0       	rjmp	.+212    	; 0x42d0 <mv_queue_move_buffer+0x20c>
    41fc:	8e 81       	ldd	r24, Y+6	; 0x06
    41fe:	9f 81       	ldd	r25, Y+7	; 0x07
    4200:	a8 85       	ldd	r26, Y+8	; 0x08
    4202:	b9 85       	ldd	r27, Y+9	; 0x09
    4204:	00 97       	sbiw	r24, 0x00	; 0
    4206:	a1 05       	cpc	r26, r1
    4208:	b1 05       	cpc	r27, r1
    420a:	09 f0       	breq	.+2      	; 0x420e <mv_queue_move_buffer+0x14a>
    420c:	61 c0       	rjmp	.+194    	; 0x42d0 <mv_queue_move_buffer+0x20c>
		mv.p->a[X].steps = (((mv.ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	e8 2e       	mov	r14, r24
    4212:	f1 2c       	mov	r15, r1
    4214:	01 2d       	mov	r16, r1
    4216:	11 2d       	mov	r17, r1
    4218:	d3 01       	movw	r26, r6
    421a:	ed 92       	st	X+, r14
    421c:	fd 92       	st	X+, r15
    421e:	0d 93       	st	X+, r16
    4220:	1c 93       	st	X, r17
    4222:	13 97       	sbiw	r26, 0x03	; 3
		mv.p->a[X].postscale = 1;
    4224:	81 e0       	ldi	r24, 0x01	; 1
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	16 96       	adiw	r26, 0x06	; 6
    422a:	8d 93       	st	X+, r24
    422c:	9c 93       	st	X, r25
    422e:	17 97       	sbiw	r26, 0x07	; 7
		mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[X].steps); // expensive!
    4230:	cf 01       	movw	r24, r30
    4232:	aa 24       	eor	r10, r10
    4234:	a3 94       	inc	r10
    4236:	bb 24       	eor	r11, r11
    4238:	cc 24       	eor	r12, r12
    423a:	dd 24       	eor	r13, r13
    423c:	ee 24       	eor	r14, r14
    423e:	ff 24       	eor	r15, r15
    4240:	00 e0       	ldi	r16, 0x00	; 0
    4242:	10 e0       	ldi	r17, 0x00	; 0
    4244:	0e 94 c3 2a 	call	0x5586	; 0x5586 <__udivdi3>
    4248:	f4 01       	movw	r30, r8
    424a:	38 96       	adiw	r30, 0x08	; 8
    424c:	20 93 9d 21 	sts	0x219D, r18
    4250:	31 83       	std	Z+1, r19	; 0x01
    4252:	42 83       	std	Z+2, r20	; 0x02
    4254:	53 83       	std	Z+3, r21	; 0x03
    4256:	64 83       	std	Z+4, r22	; 0x04
    4258:	75 83       	std	Z+5, r23	; 0x05
    425a:	86 83       	std	Z+6, r24	; 0x06
    425c:	97 83       	std	Z+7, r25	; 0x07
		while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    425e:	7f 01       	movw	r14, r30
    4260:	19 c0       	rjmp	.+50     	; 0x4294 <mv_queue_move_buffer+0x1d0>
			mv.ticks_per_step >>= 1;
    4262:	8e 2f       	mov	r24, r30
    4264:	01 e0       	ldi	r16, 0x01	; 1
    4266:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <__lshrdi3>
    426a:	20 93 9d 21 	sts	0x219D, r18
    426e:	f7 01       	movw	r30, r14
    4270:	31 83       	std	Z+1, r19	; 0x01
    4272:	42 83       	std	Z+2, r20	; 0x02
    4274:	53 83       	std	Z+3, r21	; 0x03
    4276:	64 83       	std	Z+4, r22	; 0x04
    4278:	75 83       	std	Z+5, r23	; 0x05
    427a:	86 83       	std	Z+6, r24	; 0x06
    427c:	97 83       	std	Z+7, r25	; 0x07
			mv.p->a[X].postscale <<= 1;
    427e:	d3 01       	movw	r26, r6
    4280:	16 96       	adiw	r26, 0x06	; 6
    4282:	8d 91       	ld	r24, X+
    4284:	9c 91       	ld	r25, X
    4286:	17 97       	sbiw	r26, 0x07	; 7
    4288:	88 0f       	add	r24, r24
    428a:	99 1f       	adc	r25, r25
    428c:	16 96       	adiw	r26, 0x06	; 6
    428e:	8d 93       	st	X+, r24
    4290:	9c 93       	st	X, r25
    4292:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((mv.ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[X].steps); // expensive!
		while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    4294:	20 91 9d 21 	lds	r18, 0x219D
    4298:	30 91 9e 21 	lds	r19, 0x219E
    429c:	40 91 9f 21 	lds	r20, 0x219F
    42a0:	50 91 a0 21 	lds	r21, 0x21A0
    42a4:	60 91 a1 21 	lds	r22, 0x21A1
    42a8:	70 91 a2 21 	lds	r23, 0x21A2
    42ac:	e0 91 a3 21 	lds	r30, 0x21A3
    42b0:	90 91 a4 21 	lds	r25, 0x21A4
    42b4:	84 2f       	mov	r24, r20
    42b6:	85 2b       	or	r24, r21
    42b8:	86 2b       	or	r24, r22
    42ba:	87 2b       	or	r24, r23
    42bc:	8e 2b       	or	r24, r30
    42be:	89 2b       	or	r24, r25
    42c0:	81 f6       	brne	.-96     	; 0x4262 <mv_queue_move_buffer+0x19e>
			mv.ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
    42c2:	c9 01       	movw	r24, r18
    42c4:	f3 01       	movw	r30, r6
    42c6:	84 83       	std	Z+4, r24	; 0x04
    42c8:	95 83       	std	Z+5, r25	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    42ca:	81 e0       	ldi	r24, 0x01	; 1
    42cc:	81 87       	std	Z+9, r24	; 0x09
    42ce:	41 c1       	rjmp	.+642    	; 0x4552 <mv_queue_move_buffer+0x48e>
	mv.p->a[Z].steps = steps_z;
	mv.microseconds = (uint64_t)microseconds;			// cast to larger base
	mv.ticks = mv.microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    42d0:	44 24       	eor	r4, r4
    42d2:	55 24       	eor	r5, r5
				mv.p->a[i].steps = labs(mv.p->a[i].steps);

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
    42d4:	1d e9       	ldi	r17, 0x9D	; 157
    42d6:	21 2e       	mov	r2, r17
    42d8:	11 e2       	ldi	r17, 0x21	; 33
    42da:	31 2e       	mov	r3, r17
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    42dc:	40 91 af 21 	lds	r20, 0x21AF
    42e0:	50 91 b0 21 	lds	r21, 0x21B0
    42e4:	4a 86       	std	Y+10, r4	; 0x0a
    42e6:	5b 86       	std	Y+11, r5	; 0x0b
    42e8:	c2 01       	movw	r24, r4
    42ea:	f2 01       	movw	r30, r4
    42ec:	b3 e0       	ldi	r27, 0x03	; 3
    42ee:	ee 0f       	add	r30, r30
    42f0:	ff 1f       	adc	r31, r31
    42f2:	ba 95       	dec	r27
    42f4:	e1 f7       	brne	.-8      	; 0x42ee <mv_queue_move_buffer+0x22a>
    42f6:	88 0f       	add	r24, r24
    42f8:	99 1f       	adc	r25, r25
    42fa:	e8 0f       	add	r30, r24
    42fc:	f9 1f       	adc	r31, r25
    42fe:	e4 0f       	add	r30, r20
    4300:	f5 1f       	adc	r31, r21
    4302:	80 81       	ld	r24, Z
    4304:	91 81       	ldd	r25, Z+1	; 0x01
    4306:	a2 81       	ldd	r26, Z+2	; 0x02
    4308:	b3 81       	ldd	r27, Z+3	; 0x03
    430a:	00 97       	sbiw	r24, 0x00	; 0
    430c:	a1 05       	cpc	r26, r1
    430e:	b1 05       	cpc	r27, r1
    4310:	09 f4       	brne	.+2      	; 0x4314 <mv_queue_move_buffer+0x250>
    4312:	17 c1       	rjmp	.+558    	; 0x4542 <mv_queue_move_buffer+0x47e>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    4314:	b7 ff       	sbrs	r27, 7
    4316:	12 c0       	rjmp	.+36     	; 0x433c <mv_queue_move_buffer+0x278>
    4318:	c2 01       	movw	r24, r4
    431a:	92 01       	movw	r18, r4
    431c:	f3 e0       	ldi	r31, 0x03	; 3
    431e:	22 0f       	add	r18, r18
    4320:	33 1f       	adc	r19, r19
    4322:	fa 95       	dec	r31
    4324:	e1 f7       	brne	.-8      	; 0x431e <mv_queue_move_buffer+0x25a>
    4326:	88 0f       	add	r24, r24
    4328:	99 1f       	adc	r25, r25
    432a:	28 0f       	add	r18, r24
    432c:	39 1f       	adc	r19, r25
    432e:	42 0f       	add	r20, r18
    4330:	53 1f       	adc	r21, r19
    4332:	81 e0       	ldi	r24, 0x01	; 1
    4334:	da 01       	movw	r26, r20
    4336:	18 96       	adiw	r26, 0x08	; 8
    4338:	8c 93       	st	X, r24
    433a:	0f c0       	rjmp	.+30     	; 0x435a <mv_queue_move_buffer+0x296>
    433c:	c2 01       	movw	r24, r4
    433e:	92 01       	movw	r18, r4
    4340:	73 e0       	ldi	r23, 0x03	; 3
    4342:	22 0f       	add	r18, r18
    4344:	33 1f       	adc	r19, r19
    4346:	7a 95       	dec	r23
    4348:	e1 f7       	brne	.-8      	; 0x4342 <mv_queue_move_buffer+0x27e>
    434a:	88 0f       	add	r24, r24
    434c:	99 1f       	adc	r25, r25
    434e:	28 0f       	add	r18, r24
    4350:	39 1f       	adc	r19, r25
    4352:	42 0f       	add	r20, r18
    4354:	53 1f       	adc	r21, r19
    4356:	fa 01       	movw	r30, r20
    4358:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    435a:	e0 91 af 21 	lds	r30, 0x21AF
    435e:	f0 91 b0 21 	lds	r31, 0x21B0
    4362:	8a 85       	ldd	r24, Y+10	; 0x0a
    4364:	9b 85       	ldd	r25, Y+11	; 0x0b
    4366:	ac 01       	movw	r20, r24
    4368:	03 e0       	ldi	r16, 0x03	; 3
    436a:	44 0f       	add	r20, r20
    436c:	55 1f       	adc	r21, r21
    436e:	0a 95       	dec	r16
    4370:	e1 f7       	brne	.-8      	; 0x436a <mv_queue_move_buffer+0x2a6>
    4372:	88 0f       	add	r24, r24
    4374:	99 1f       	adc	r25, r25
    4376:	48 0f       	add	r20, r24
    4378:	59 1f       	adc	r21, r25
    437a:	4e 0f       	add	r20, r30
    437c:	5f 1f       	adc	r21, r31
    437e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4380:	9b 85       	ldd	r25, Y+11	; 0x0b
    4382:	9c 01       	movw	r18, r24
    4384:	b3 e0       	ldi	r27, 0x03	; 3
    4386:	22 0f       	add	r18, r18
    4388:	33 1f       	adc	r19, r19
    438a:	ba 95       	dec	r27
    438c:	e1 f7       	brne	.-8      	; 0x4386 <mv_queue_move_buffer+0x2c2>
    438e:	88 0f       	add	r24, r24
    4390:	99 1f       	adc	r25, r25
    4392:	28 0f       	add	r18, r24
    4394:	39 1f       	adc	r19, r25
    4396:	e2 0f       	add	r30, r18
    4398:	f3 1f       	adc	r31, r19
    439a:	80 81       	ld	r24, Z
    439c:	91 81       	ldd	r25, Z+1	; 0x01
    439e:	a2 81       	ldd	r26, Z+2	; 0x02
    43a0:	b3 81       	ldd	r27, Z+3	; 0x03
    43a2:	b7 ff       	sbrs	r27, 7
    43a4:	07 c0       	rjmp	.+14     	; 0x43b4 <mv_queue_move_buffer+0x2f0>
    43a6:	b0 95       	com	r27
    43a8:	a0 95       	com	r26
    43aa:	90 95       	com	r25
    43ac:	81 95       	neg	r24
    43ae:	9f 4f       	sbci	r25, 0xFF	; 255
    43b0:	af 4f       	sbci	r26, 0xFF	; 255
    43b2:	bf 4f       	sbci	r27, 0xFF	; 255
    43b4:	fa 01       	movw	r30, r20
    43b6:	80 83       	st	Z, r24
    43b8:	91 83       	std	Z+1, r25	; 0x01
    43ba:	a2 83       	std	Z+2, r26	; 0x02
    43bc:	b3 83       	std	Z+3, r27	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    43be:	a0 91 af 21 	lds	r26, 0x21AF
    43c2:	b0 91 b0 21 	lds	r27, 0x21B0
    43c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    43c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    43ca:	fc 01       	movw	r30, r24
    43cc:	73 e0       	ldi	r23, 0x03	; 3
    43ce:	ee 0f       	add	r30, r30
    43d0:	ff 1f       	adc	r31, r31
    43d2:	7a 95       	dec	r23
    43d4:	e1 f7       	brne	.-8      	; 0x43ce <mv_queue_move_buffer+0x30a>
    43d6:	88 0f       	add	r24, r24
    43d8:	99 1f       	adc	r25, r25
    43da:	e8 0f       	add	r30, r24
    43dc:	f9 1f       	adc	r31, r25
    43de:	ea 0f       	add	r30, r26
    43e0:	fb 1f       	adc	r31, r27
    43e2:	81 e0       	ldi	r24, 0x01	; 1
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	86 83       	std	Z+6, r24	; 0x06
    43e8:	97 83       	std	Z+7, r25	; 0x07
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
    43ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    43ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    43ee:	9c 01       	movw	r18, r24
    43f0:	53 e0       	ldi	r21, 0x03	; 3
    43f2:	22 0f       	add	r18, r18
    43f4:	33 1f       	adc	r19, r19
    43f6:	5a 95       	dec	r21
    43f8:	e1 f7       	brne	.-8      	; 0x43f2 <mv_queue_move_buffer+0x32e>
    43fa:	88 0f       	add	r24, r24
    43fc:	99 1f       	adc	r25, r25
    43fe:	28 0f       	add	r18, r24
    4400:	39 1f       	adc	r19, r25
    4402:	a2 0f       	add	r26, r18
    4404:	b3 1f       	adc	r27, r19
    4406:	ed 90       	ld	r14, X+
    4408:	fd 90       	ld	r15, X+
    440a:	0d 91       	ld	r16, X+
    440c:	1c 91       	ld	r17, X
    440e:	37 01       	movw	r6, r14
    4410:	48 01       	movw	r8, r16
    4412:	99 0c       	add	r9, r9
    4414:	66 08       	sbc	r6, r6
    4416:	76 2c       	mov	r7, r6
    4418:	43 01       	movw	r8, r6
    441a:	20 91 95 21 	lds	r18, 0x2195
    441e:	30 91 96 21 	lds	r19, 0x2196
    4422:	40 91 97 21 	lds	r20, 0x2197
    4426:	50 91 98 21 	lds	r21, 0x2198
    442a:	60 91 99 21 	lds	r22, 0x2199
    442e:	70 91 9a 21 	lds	r23, 0x219A
    4432:	80 91 9b 21 	lds	r24, 0x219B
    4436:	90 91 9c 21 	lds	r25, 0x219C
    443a:	57 01       	movw	r10, r14
    443c:	68 01       	movw	r12, r16
    443e:	e6 2c       	mov	r14, r6
    4440:	f6 2c       	mov	r15, r6
    4442:	06 2d       	mov	r16, r6
    4444:	16 2d       	mov	r17, r6
    4446:	0e 94 c3 2a 	call	0x5586	; 0x5586 <__udivdi3>
    444a:	20 93 9d 21 	sts	0x219D, r18
    444e:	d1 01       	movw	r26, r2
    4450:	11 96       	adiw	r26, 0x01	; 1
    4452:	3c 93       	st	X, r19
    4454:	11 97       	sbiw	r26, 0x01	; 1
    4456:	12 96       	adiw	r26, 0x02	; 2
    4458:	4c 93       	st	X, r20
    445a:	12 97       	sbiw	r26, 0x02	; 2
    445c:	13 96       	adiw	r26, 0x03	; 3
    445e:	5c 93       	st	X, r21
    4460:	13 97       	sbiw	r26, 0x03	; 3
    4462:	14 96       	adiw	r26, 0x04	; 4
    4464:	6c 93       	st	X, r22
    4466:	14 97       	sbiw	r26, 0x04	; 4
    4468:	15 96       	adiw	r26, 0x05	; 5
    446a:	7c 93       	st	X, r23
    446c:	15 97       	sbiw	r26, 0x05	; 5
    446e:	16 96       	adiw	r26, 0x06	; 6
    4470:	8c 93       	st	X, r24
    4472:	16 97       	sbiw	r26, 0x06	; 6
    4474:	17 96       	adiw	r26, 0x07	; 7
    4476:	9c 93       	st	X, r25
    4478:	37 c0       	rjmp	.+110    	; 0x44e8 <mv_queue_move_buffer+0x424>
				while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
					mv.ticks_per_step >>= 1;
    447a:	9d 01       	movw	r18, r26
    447c:	8e 2f       	mov	r24, r30
    447e:	01 e0       	ldi	r16, 0x01	; 1
    4480:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <__lshrdi3>
    4484:	20 93 9d 21 	sts	0x219D, r18
    4488:	f1 01       	movw	r30, r2
    448a:	31 83       	std	Z+1, r19	; 0x01
    448c:	42 83       	std	Z+2, r20	; 0x02
    448e:	53 83       	std	Z+3, r21	; 0x03
    4490:	64 83       	std	Z+4, r22	; 0x04
    4492:	75 83       	std	Z+5, r23	; 0x05
    4494:	86 83       	std	Z+6, r24	; 0x06
    4496:	97 83       	std	Z+7, r25	; 0x07
					mv.p->a[i].postscale <<= 1;
    4498:	a0 91 af 21 	lds	r26, 0x21AF
    449c:	b0 91 b0 21 	lds	r27, 0x21B0
    44a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    44a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    44a4:	fc 01       	movw	r30, r24
    44a6:	23 e0       	ldi	r18, 0x03	; 3
    44a8:	ee 0f       	add	r30, r30
    44aa:	ff 1f       	adc	r31, r31
    44ac:	2a 95       	dec	r18
    44ae:	e1 f7       	brne	.-8      	; 0x44a8 <mv_queue_move_buffer+0x3e4>
    44b0:	88 0f       	add	r24, r24
    44b2:	99 1f       	adc	r25, r25
    44b4:	e8 0f       	add	r30, r24
    44b6:	f9 1f       	adc	r31, r25
    44b8:	ea 0f       	add	r30, r26
    44ba:	fb 1f       	adc	r31, r27
    44bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    44be:	9b 85       	ldd	r25, Y+11	; 0x0b
    44c0:	9c 01       	movw	r18, r24
    44c2:	13 e0       	ldi	r17, 0x03	; 3
    44c4:	22 0f       	add	r18, r18
    44c6:	33 1f       	adc	r19, r19
    44c8:	1a 95       	dec	r17
    44ca:	e1 f7       	brne	.-8      	; 0x44c4 <mv_queue_move_buffer+0x400>
    44cc:	88 0f       	add	r24, r24
    44ce:	99 1f       	adc	r25, r25
    44d0:	28 0f       	add	r18, r24
    44d2:	39 1f       	adc	r19, r25
    44d4:	a2 0f       	add	r26, r18
    44d6:	b3 1f       	adc	r27, r19
    44d8:	16 96       	adiw	r26, 0x06	; 6
    44da:	8d 91       	ld	r24, X+
    44dc:	9c 91       	ld	r25, X
    44de:	17 97       	sbiw	r26, 0x07	; 7
    44e0:	88 0f       	add	r24, r24
    44e2:	99 1f       	adc	r25, r25
    44e4:	86 83       	std	Z+6, r24	; 0x06
    44e6:	97 83       	std	Z+7, r25	; 0x07

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
				while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    44e8:	a0 91 9d 21 	lds	r26, 0x219D
    44ec:	b0 91 9e 21 	lds	r27, 0x219E
    44f0:	40 91 9f 21 	lds	r20, 0x219F
    44f4:	50 91 a0 21 	lds	r21, 0x21A0
    44f8:	60 91 a1 21 	lds	r22, 0x21A1
    44fc:	70 91 a2 21 	lds	r23, 0x21A2
    4500:	e0 91 a3 21 	lds	r30, 0x21A3
    4504:	90 91 a4 21 	lds	r25, 0x21A4
    4508:	84 2f       	mov	r24, r20
    450a:	85 2b       	or	r24, r21
    450c:	86 2b       	or	r24, r22
    450e:	87 2b       	or	r24, r23
    4510:	8e 2b       	or	r24, r30
    4512:	89 2b       	or	r24, r25
    4514:	09 f0       	breq	.+2      	; 0x4518 <mv_queue_move_buffer+0x454>
    4516:	b1 cf       	rjmp	.-158    	; 0x447a <mv_queue_move_buffer+0x3b6>
					mv.ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
    4518:	e0 91 af 21 	lds	r30, 0x21AF
    451c:	f0 91 b0 21 	lds	r31, 0x21B0
    4520:	8a 85       	ldd	r24, Y+10	; 0x0a
    4522:	9b 85       	ldd	r25, Y+11	; 0x0b
    4524:	9c 01       	movw	r18, r24
    4526:	53 e0       	ldi	r21, 0x03	; 3
    4528:	22 0f       	add	r18, r18
    452a:	33 1f       	adc	r19, r19
    452c:	5a 95       	dec	r21
    452e:	e1 f7       	brne	.-8      	; 0x4528 <mv_queue_move_buffer+0x464>
    4530:	88 0f       	add	r24, r24
    4532:	99 1f       	adc	r25, r25
    4534:	28 0f       	add	r18, r24
    4536:	39 1f       	adc	r19, r25
    4538:	e2 0f       	add	r30, r18
    453a:	f3 1f       	adc	r31, r19
    453c:	cd 01       	movw	r24, r26
    453e:	84 83       	std	Z+4, r24	; 0x04
    4540:	95 83       	std	Z+5, r25	; 0x05
    4542:	08 94       	sec
    4544:	41 1c       	adc	r4, r1
    4546:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    4548:	f3 e0       	ldi	r31, 0x03	; 3
    454a:	4f 16       	cp	r4, r31
    454c:	51 04       	cpc	r5, r1
    454e:	09 f0       	breq	.+2      	; 0x4552 <mv_queue_move_buffer+0x48e>
    4550:	c5 ce       	rjmp	.-630    	; 0x42dc <mv_queue_move_buffer+0x218>
				}
				mv.p->a[i].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    4552:	89 81       	ldd	r24, Y+1	; 0x01
    4554:	80 93 ad 21 	sts	0x21AD, r24
	st_execute_move();
    4558:	0e 94 90 18 	call	0x3120	; 0x3120 <st_execute_move>
    455c:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    455e:	2b 96       	adiw	r28, 0x0b	; 11
    4560:	cd bf       	out	0x3d, r28	; 61
    4562:	de bf       	out	0x3e, r29	; 62
    4564:	cf 91       	pop	r28
    4566:	df 91       	pop	r29
    4568:	1f 91       	pop	r17
    456a:	0f 91       	pop	r16
    456c:	ff 90       	pop	r15
    456e:	ef 90       	pop	r14
    4570:	df 90       	pop	r13
    4572:	cf 90       	pop	r12
    4574:	bf 90       	pop	r11
    4576:	af 90       	pop	r10
    4578:	9f 90       	pop	r9
    457a:	8f 90       	pop	r8
    457c:	7f 90       	pop	r7
    457e:	6f 90       	pop	r6
    4580:	5f 90       	pop	r5
    4582:	4f 90       	pop	r4
    4584:	3f 90       	pop	r3
    4586:	2f 90       	pop	r2
    4588:	08 95       	ret

0000458a <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    458a:	ad e1       	ldi	r26, 0x1D	; 29
    458c:	b2 e2       	ldi	r27, 0x22	; 34
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    458e:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    4590:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    4592:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    4594:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    4596:	ed 91       	ld	r30, X+
    4598:	fc 91       	ld	r31, X
    459a:	11 97       	sbiw	r26, 0x01	; 1
    459c:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    459e:	ed 91       	ld	r30, X+
    45a0:	fc 91       	ld	r31, X
    45a2:	11 97       	sbiw	r26, 0x01	; 1
    45a4:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    45a6:	ed 91       	ld	r30, X+
    45a8:	fc 91       	ld	r31, X
    45aa:	11 97       	sbiw	r26, 0x01	; 1
    45ac:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    45ae:	ed 91       	ld	r30, X+
    45b0:	fc 91       	ld	r31, X
    45b2:	11 97       	sbiw	r26, 0x01	; 1
    45b4:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    45b6:	ed 91       	ld	r30, X+
    45b8:	fc 91       	ld	r31, X
    45ba:	11 97       	sbiw	r26, 0x01	; 1
    45bc:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    45be:	ed 91       	ld	r30, X+
    45c0:	fc 91       	ld	r31, X
    45c2:	11 97       	sbiw	r26, 0x01	; 1
    45c4:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    45c6:	ed 91       	ld	r30, X+
    45c8:	fc 91       	ld	r31, X
    45ca:	11 97       	sbiw	r26, 0x01	; 1
    45cc:	31 87       	std	Z+9, r19	; 0x09
    45ce:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    45d0:	42 e2       	ldi	r20, 0x22	; 34
    45d2:	ad 35       	cpi	r26, 0x5D	; 93
    45d4:	b4 07       	cpc	r27, r20
    45d6:	f9 f6       	brne	.-66     	; 0x4596 <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    45d8:	08 95       	ret

000045da <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    45da:	1f 92       	push	r1
    45dc:	0f 92       	push	r0
    45de:	0f b6       	in	r0, 0x3f	; 63
    45e0:	0f 92       	push	r0
    45e2:	11 24       	eor	r1, r1
    45e4:	0f 90       	pop	r0
    45e6:	0f be       	out	0x3f, r0	; 63
    45e8:	0f 90       	pop	r0
    45ea:	1f 90       	pop	r1
    45ec:	18 95       	reti

000045ee <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    45ee:	1f 92       	push	r1
    45f0:	0f 92       	push	r0
    45f2:	0f b6       	in	r0, 0x3f	; 63
    45f4:	0f 92       	push	r0
    45f6:	11 24       	eor	r1, r1
    45f8:	0f 90       	pop	r0
    45fa:	0f be       	out	0x3f, r0	; 63
    45fc:	0f 90       	pop	r0
    45fe:	1f 90       	pop	r1
    4600:	18 95       	reti

00004602 <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    4602:	1f 92       	push	r1
    4604:	0f 92       	push	r0
    4606:	0f b6       	in	r0, 0x3f	; 63
    4608:	0f 92       	push	r0
    460a:	11 24       	eor	r1, r1
    460c:	0f 90       	pop	r0
    460e:	0f be       	out	0x3f, r0	; 63
    4610:	0f 90       	pop	r0
    4612:	1f 90       	pop	r1
    4614:	18 95       	reti

00004616 <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    4616:	1f 92       	push	r1
    4618:	0f 92       	push	r0
    461a:	0f b6       	in	r0, 0x3f	; 63
    461c:	0f 92       	push	r0
    461e:	11 24       	eor	r1, r1
    4620:	0f 90       	pop	r0
    4622:	0f be       	out	0x3f, r0	; 63
    4624:	0f 90       	pop	r0
    4626:	1f 90       	pop	r1
    4628:	18 95       	reti

0000462a <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    462a:	1f 92       	push	r1
    462c:	0f 92       	push	r0
    462e:	0f b6       	in	r0, 0x3f	; 63
    4630:	0f 92       	push	r0
    4632:	11 24       	eor	r1, r1
    4634:	0f 90       	pop	r0
    4636:	0f be       	out	0x3f, r0	; 63
    4638:	0f 90       	pop	r0
    463a:	1f 90       	pop	r1
    463c:	18 95       	reti

0000463e <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    463e:	1f 92       	push	r1
    4640:	0f 92       	push	r0
    4642:	0f b6       	in	r0, 0x3f	; 63
    4644:	0f 92       	push	r0
    4646:	11 24       	eor	r1, r1
    4648:	0f 90       	pop	r0
    464a:	0f be       	out	0x3f, r0	; 63
    464c:	0f 90       	pop	r0
    464e:	1f 90       	pop	r1
    4650:	18 95       	reti

00004652 <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    4652:	1f 92       	push	r1
    4654:	0f 92       	push	r0
    4656:	0f b6       	in	r0, 0x3f	; 63
    4658:	0f 92       	push	r0
    465a:	11 24       	eor	r1, r1
    465c:	0f 90       	pop	r0
    465e:	0f be       	out	0x3f, r0	; 63
    4660:	0f 90       	pop	r0
    4662:	1f 90       	pop	r1
    4664:	18 95       	reti

00004666 <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    4666:	1f 92       	push	r1
    4668:	0f 92       	push	r0
    466a:	0f b6       	in	r0, 0x3f	; 63
    466c:	0f 92       	push	r0
    466e:	11 24       	eor	r1, r1
    4670:	0f 90       	pop	r0
    4672:	0f be       	out	0x3f, r0	; 63
    4674:	0f 90       	pop	r0
    4676:	1f 90       	pop	r1
    4678:	18 95       	reti

0000467a <tg_terminate>:

void tg_terminate()
{
//	tg_kill();
	return;
}
    467a:	08 95       	ret

0000467c <tg_pause>:

void tg_pause()
{
	return;
}
    467c:	08 95       	ret

0000467e <tg_resume>:

void tg_resume()
{
	return;
}
    467e:	08 95       	ret

00004680 <signal_etx>:
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx()				// ^c
{
	tg_reset_source();			// return control to standard device
    4680:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <tg_reset_source>
	mc_motion_stop();			// stop computing and generating motions
    4684:	0e 94 84 17 	call	0x2f08	; 0x2f08 <mc_motion_stop>
	return;
}
    4688:	08 95       	ret

0000468a <xio_set_baud_usart>:
	dx->port->OUTCLR = outclr;
	dx->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
    468a:	cf 93       	push	r28
    468c:	df 93       	push	r29
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	27 e1       	ldi	r18, 0x17	; 23
    4692:	30 e0       	ldi	r19, 0x00	; 0
    4694:	82 9f       	mul	r24, r18
    4696:	d0 01       	movw	r26, r0
    4698:	83 9f       	mul	r24, r19
    469a:	b0 0d       	add	r27, r0
    469c:	92 9f       	mul	r25, r18
    469e:	b0 0d       	add	r27, r0
    46a0:	11 24       	eor	r1, r1
    46a2:	a7 54       	subi	r26, 0x47	; 71
    46a4:	bb 4d       	sbci	r27, 0xDB	; 219
    46a6:	51 96       	adiw	r26, 0x11	; 17
    46a8:	ed 91       	ld	r30, X+
    46aa:	fc 91       	ld	r31, X
    46ac:	52 97       	sbiw	r26, 0x12	; 18
    46ae:	87 81       	ldd	r24, Z+7	; 0x07
    46b0:	90 85       	ldd	r25, Z+8	; 0x08
    46b2:	26 2f       	mov	r18, r22
    46b4:	30 e0       	ldi	r19, 0x00	; 0
    46b6:	f9 01       	movw	r30, r18
    46b8:	e3 55       	subi	r30, 0x53	; 83
    46ba:	f7 4f       	sbci	r31, 0xF7	; 247
    46bc:	e4 91       	lpm	r30, Z+
    46be:	ec 01       	movw	r28, r24
    46c0:	ee 83       	std	Y+6, r30	; 0x06
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    46c2:	51 96       	adiw	r26, 0x11	; 17
    46c4:	ed 91       	ld	r30, X+
    46c6:	fc 91       	ld	r31, X
    46c8:	52 97       	sbiw	r26, 0x12	; 18
    46ca:	a7 81       	ldd	r26, Z+7	; 0x07
    46cc:	b0 85       	ldd	r27, Z+8	; 0x08
    46ce:	28 54       	subi	r18, 0x48	; 72
    46d0:	37 4f       	sbci	r19, 0xF7	; 247
    46d2:	f9 01       	movw	r30, r18
    46d4:	64 91       	lpm	r22, Z+
    46d6:	17 96       	adiw	r26, 0x07	; 7
    46d8:	6c 93       	st	X, r22
}
    46da:	df 91       	pop	r29
    46dc:	cf 91       	pop	r28
    46de:	08 95       	ret

000046e0 <xio_putc_usart>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_usart(const uint8_t dev, const char c, FILE *stream)
{
    46e0:	cf 93       	push	r28
    46e2:	df 93       	push	r29
    46e4:	78 2f       	mov	r23, r24
    46e6:	da 01       	movw	r26, r20
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
    46e8:	87 e1       	ldi	r24, 0x17	; 23
    46ea:	78 9f       	mul	r23, r24
    46ec:	a0 01       	movw	r20, r0
    46ee:	11 24       	eor	r1, r1
    46f0:	47 54       	subi	r20, 0x47	; 71
    46f2:	5b 4d       	sbci	r21, 0xDB	; 219
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    46f4:	27 2f       	mov	r18, r23
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	87 e1       	ldi	r24, 0x17	; 23
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	28 9f       	mul	r18, r24
    46fe:	f0 01       	movw	r30, r0
    4700:	29 9f       	mul	r18, r25
    4702:	f0 0d       	add	r31, r0
    4704:	38 9f       	mul	r19, r24
    4706:	f0 0d       	add	r31, r0
    4708:	11 24       	eor	r1, r1
    470a:	e7 54       	subi	r30, 0x47	; 71
    470c:	fb 4d       	sbci	r31, 0xDB	; 219
    470e:	c1 89       	ldd	r28, Z+17	; 0x11
    4710:	d2 89       	ldd	r29, Z+18	; 0x12

	if ((dx->next_tx_buf_head = (dx->tx_buf_head)-1) == 0) { // adv. head & wrap
    4712:	8d 81       	ldd	r24, Y+5	; 0x05
    4714:	81 50       	subi	r24, 0x01	; 1
    4716:	8e 83       	std	Y+6, r24	; 0x06
    4718:	88 23       	and	r24, r24
    471a:	11 f4       	brne	.+4      	; 0x4720 <xio_putc_usart+0x40>
		dx->next_tx_buf_head = TX_BUFFER_SIZE-1;	 // -1 avoids the off-by-one
    471c:	8f e3       	ldi	r24, 0x3F	; 63
    471e:	8e 83       	std	Y+6, r24	; 0x06
	}
	while(dx->next_tx_buf_head == dx->tx_buf_tail) { // buf full. sleep or ret
    4720:	9e 81       	ldd	r25, Y+6	; 0x06
    4722:	16 c0       	rjmp	.+44     	; 0x4750 <xio_putc_usart+0x70>
		if (BLOCKING(d->flags)) {
    4724:	fa 01       	movw	r30, r20
    4726:	80 81       	ld	r24, Z
    4728:	82 ff       	sbrs	r24, 2
    472a:	0c c0       	rjmp	.+24     	; 0x4744 <xio_putc_usart+0x64>
			sleep_mode();
    472c:	80 91 48 00 	lds	r24, 0x0048
    4730:	81 60       	ori	r24, 0x01	; 1
    4732:	80 93 48 00 	sts	0x0048, r24
    4736:	88 95       	sleep
    4738:	80 91 48 00 	lds	r24, 0x0048
    473c:	8e 7f       	andi	r24, 0xFE	; 254
    473e:	80 93 48 00 	sts	0x0048, r24
    4742:	06 c0       	rjmp	.+12     	; 0x4750 <xio_putc_usart+0x70>
		} else {
			d->sig = XIO_SIG_EAGAIN;
    4744:	81 e0       	ldi	r24, 0x01	; 1
    4746:	ea 01       	movw	r28, r20
    4748:	8b 83       	std	Y+3, r24	; 0x03
    474a:	2f ef       	ldi	r18, 0xFF	; 255
    474c:	3f ef       	ldi	r19, 0xFF	; 255
    474e:	56 c0       	rjmp	.+172    	; 0x47fc <xio_putc_usart+0x11c>
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer

	if ((dx->next_tx_buf_head = (dx->tx_buf_head)-1) == 0) { // adv. head & wrap
		dx->next_tx_buf_head = TX_BUFFER_SIZE-1;	 // -1 avoids the off-by-one
	}
	while(dx->next_tx_buf_head == dx->tx_buf_tail) { // buf full. sleep or ret
    4750:	8c 81       	ldd	r24, Y+4	; 0x04
    4752:	98 17       	cp	r25, r24
    4754:	39 f3       	breq	.-50     	; 0x4724 <xio_putc_usart+0x44>
			d->sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	dx->tx_buf_head = dx->next_tx_buf_head;			// accept next buffer head
    4756:	9d 83       	std	Y+5, r25	; 0x05
	dx->tx_buf[dx->tx_buf_head] = c;				// ...write char to buffer
    4758:	8d 81       	ldd	r24, Y+5	; 0x05
    475a:	fe 01       	movw	r30, r28
    475c:	e8 0f       	add	r30, r24
    475e:	f1 1d       	adc	r31, r1
    4760:	e5 5b       	subi	r30, 0xB5	; 181
    4762:	ff 4f       	sbci	r31, 0xFF	; 255
    4764:	60 83       	st	Z, r22

	if (CRLF(d->flags) && (c == '\n')) {			// detect LF & add CR
    4766:	fa 01       	movw	r30, r20
    4768:	20 81       	ld	r18, Z
    476a:	31 81       	ldd	r19, Z+1	; 0x01
    476c:	25 ff       	sbrs	r18, 5
    476e:	0a c0       	rjmp	.+20     	; 0x4784 <xio_putc_usart+0xa4>
    4770:	6a 30       	cpi	r22, 0x0A	; 10
    4772:	41 f4       	brne	.+16     	; 0x4784 <xio_putc_usart+0xa4>
		return d->x_putc('\r', stream);				// recurse
    4774:	03 84       	ldd	r0, Z+11	; 0x0b
    4776:	f4 85       	ldd	r31, Z+12	; 0x0c
    4778:	e0 2d       	mov	r30, r0
    477a:	8d e0       	ldi	r24, 0x0D	; 13
    477c:	bd 01       	movw	r22, r26
    477e:	19 95       	eicall
    4780:	9c 01       	movw	r18, r24
    4782:	3c c0       	rjmp	.+120    	; 0x47fc <xio_putc_usart+0x11c>
	}

	// dequeue the buffer if DATA register is ready
	if (dx->usart->STATUS & 0x20) {
    4784:	ef 81       	ldd	r30, Y+7	; 0x07
    4786:	f8 85       	ldd	r31, Y+8	; 0x08
    4788:	81 81       	ldd	r24, Z+1	; 0x01
    478a:	85 ff       	sbrs	r24, 5
    478c:	26 c0       	rjmp	.+76     	; 0x47da <xio_putc_usart+0xfa>
		if (dx->tx_buf_head == dx->tx_buf_tail) {// buf might be empty if IRQ got it
    478e:	9d 81       	ldd	r25, Y+5	; 0x05
    4790:	8c 81       	ldd	r24, Y+4	; 0x04
    4792:	98 17       	cp	r25, r24
    4794:	89 f1       	breq	.+98     	; 0x47f8 <xio_putc_usart+0x118>
			return (XIO_OK);
		}
		d->flags |= XIO_FLAG_TX_MUTEX_bm;			// mutual exclusion from ISR
    4796:	38 60       	ori	r19, 0x08	; 8
    4798:	fa 01       	movw	r30, r20
    479a:	20 83       	st	Z, r18
    479c:	31 83       	std	Z+1, r19	; 0x01
		if (--(dx->tx_buf_tail) == 0) {				// advance tail & wrap if needed
    479e:	8c 81       	ldd	r24, Y+4	; 0x04
    47a0:	81 50       	subi	r24, 0x01	; 1
    47a2:	8c 83       	std	Y+4, r24	; 0x04
    47a4:	8c 81       	ldd	r24, Y+4	; 0x04
    47a6:	88 23       	and	r24, r24
    47a8:	11 f4       	brne	.+4      	; 0x47ae <xio_putc_usart+0xce>
			dx->tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoid off-by-one err (OBOE)
    47aa:	8f e3       	ldi	r24, 0x3F	; 63
    47ac:	8c 83       	std	Y+4, r24	; 0x04
		}
		if (dev == XIO_DEV_RS485) {					// ++++ HACK ++++
    47ae:	77 23       	and	r23, r23
    47b0:	21 f4       	brne	.+8      	; 0x47ba <xio_putc_usart+0xda>
			dx->port->OUTSET = (RS485_DE_bm | RS485_RE_bm);	// enable DE, disable RE
    47b2:	e9 85       	ldd	r30, Y+9	; 0x09
    47b4:	fa 85       	ldd	r31, Y+10	; 0x0a
    47b6:	80 e3       	ldi	r24, 0x30	; 48
    47b8:	85 83       	std	Z+5, r24	; 0x05
		}
		dx->usart->DATA = dx->tx_buf[dx->tx_buf_tail];// write to TX DATA reg
    47ba:	af 81       	ldd	r26, Y+7	; 0x07
    47bc:	b8 85       	ldd	r27, Y+8	; 0x08
    47be:	8c 81       	ldd	r24, Y+4	; 0x04
    47c0:	fe 01       	movw	r30, r28
    47c2:	e8 0f       	add	r30, r24
    47c4:	f1 1d       	adc	r31, r1
    47c6:	e5 5b       	subi	r30, 0xB5	; 181
    47c8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ca:	80 81       	ld	r24, Z
    47cc:	8c 93       	st	X, r24
		d->flags &= ~XIO_FLAG_TX_MUTEX_bm;			// release mutual exclusion lock
    47ce:	fa 01       	movw	r30, r20
    47d0:	80 81       	ld	r24, Z
    47d2:	91 81       	ldd	r25, Z+1	; 0x01
    47d4:	97 7f       	andi	r25, 0xF7	; 247
    47d6:	80 83       	st	Z, r24
    47d8:	91 83       	std	Z+1, r25	; 0x01
    47da:	ef 81       	ldd	r30, Y+7	; 0x07
    47dc:	f8 85       	ldd	r31, Y+8	; 0x08
	}
	// enable interrupts regardless
	if (dev == XIO_DEV_RS485) {						// ++++ HACK ++++
    47de:	77 23       	and	r23, r23
    47e0:	11 f4       	brne	.+4      	; 0x47e6 <xio_putc_usart+0x106>
		dx->usart->CTRLA = CTRLA_RXON_TXON_TXCON;	// doesn't work if you just |= it
    47e2:	85 e2       	ldi	r24, 0x25	; 37
    47e4:	01 c0       	rjmp	.+2      	; 0x47e8 <xio_putc_usart+0x108>
	} else {
		dx->usart->CTRLA = CTRLA_RXON_TXON;			// doesn't work if you just |= it
    47e6:	81 e2       	ldi	r24, 0x21	; 33
    47e8:	83 83       	std	Z+3, r24	; 0x03
	}
	PMIC_EnableLowLevel(); 							// enable USART TX interrupts
    47ea:	80 91 a2 00 	lds	r24, 0x00A2
    47ee:	81 60       	ori	r24, 0x01	; 1
    47f0:	e0 ea       	ldi	r30, 0xA0	; 160
    47f2:	f0 e0       	ldi	r31, 0x00	; 0
    47f4:	82 83       	std	Z+2, r24	; 0x02
	sei();											// enable global interrupts
    47f6:	78 94       	sei
    47f8:	20 e0       	ldi	r18, 0x00	; 0
    47fa:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_OK);
}
    47fc:	c9 01       	movw	r24, r18
    47fe:	df 91       	pop	r29
    4800:	cf 91       	pop	r28
    4802:	08 95       	ret

00004804 <xio_getc_usart>:
 *		  character helper routines. See them for behaviors
 */

int xio_getc_usart(const uint8_t dev, FILE *stream)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
    4804:	97 e1       	ldi	r25, 0x17	; 23
    4806:	89 9f       	mul	r24, r25
    4808:	d0 01       	movw	r26, r0
    480a:	11 24       	eor	r1, r1
    480c:	a7 54       	subi	r26, 0x47	; 71
    480e:	bb 4d       	sbci	r27, 0xDB	; 219
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    4810:	48 2f       	mov	r20, r24
    4812:	50 e0       	ldi	r21, 0x00	; 0
    4814:	27 e1       	ldi	r18, 0x17	; 23
    4816:	30 e0       	ldi	r19, 0x00	; 0
    4818:	42 9f       	mul	r20, r18
    481a:	f0 01       	movw	r30, r0
    481c:	43 9f       	mul	r20, r19
    481e:	f0 0d       	add	r31, r0
    4820:	52 9f       	mul	r21, r18
    4822:	f0 0d       	add	r31, r0
    4824:	11 24       	eor	r1, r1
    4826:	e7 54       	subi	r30, 0x47	; 71
    4828:	fb 4d       	sbci	r31, 0xDB	; 219
    482a:	01 88       	ldd	r0, Z+17	; 0x11
    482c:	f2 89       	ldd	r31, Z+18	; 0x12
    482e:	e0 2d       	mov	r30, r0

	gdev = dev;										// set dev number global var
    4830:	80 93 0b 22 	sts	0x220B, r24
    4834:	15 c0       	rjmp	.+42     	; 0x4860 <xio_getc_usart+0x5c>

	while (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(d->flags)) {
    4836:	8c 91       	ld	r24, X
    4838:	82 ff       	sbrs	r24, 2
    483a:	0c c0       	rjmp	.+24     	; 0x4854 <xio_getc_usart+0x50>
			sleep_mode();
    483c:	80 91 48 00 	lds	r24, 0x0048
    4840:	81 60       	ori	r24, 0x01	; 1
    4842:	80 93 48 00 	sts	0x0048, r24
    4846:	88 95       	sleep
    4848:	80 91 48 00 	lds	r24, 0x0048
    484c:	8e 7f       	andi	r24, 0xFE	; 254
    484e:	80 93 48 00 	sts	0x0048, r24
    4852:	06 c0       	rjmp	.+12     	; 0x4860 <xio_getc_usart+0x5c>
		} else {
			d->sig = XIO_SIG_EAGAIN;
    4854:	81 e0       	ldi	r24, 0x01	; 1
    4856:	13 96       	adiw	r26, 0x03	; 3
    4858:	8c 93       	st	X, r24
    485a:	2f ef       	ldi	r18, 0xFF	; 255
    485c:	3f ef       	ldi	r19, 0xFF	; 255
    485e:	1e c0       	rjmp	.+60     	; 0x489c <xio_getc_usart+0x98>
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer

	gdev = dev;										// set dev number global var

	while (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
    4860:	93 81       	ldd	r25, Z+3	; 0x03
    4862:	82 81       	ldd	r24, Z+2	; 0x02
    4864:	98 17       	cp	r25, r24
    4866:	39 f3       	breq	.-50     	; 0x4836 <xio_getc_usart+0x32>
		} else {
			d->sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(dx->rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
    4868:	82 81       	ldd	r24, Z+2	; 0x02
    486a:	81 50       	subi	r24, 0x01	; 1
    486c:	82 83       	std	Z+2, r24	; 0x02
    486e:	82 81       	ldd	r24, Z+2	; 0x02
    4870:	88 23       	and	r24, r24
    4872:	11 f4       	brne	.+4      	; 0x4878 <xio_getc_usart+0x74>
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    4874:	8f e3       	ldi	r24, 0x3F	; 63
    4876:	82 83       	std	Z+2, r24	; 0x02
	}
	d->c = (dx->rx_buf[dx->rx_buf_tail] & 0x007F);// get char from RX buf & mask MSB
    4878:	82 81       	ldd	r24, Z+2	; 0x02
    487a:	e8 0f       	add	r30, r24
    487c:	f1 1d       	adc	r31, r1
    487e:	83 85       	ldd	r24, Z+11	; 0x0b
    4880:	8f 77       	andi	r24, 0x7F	; 127
    4882:	14 96       	adiw	r26, 0x04	; 4
    4884:	8c 93       	st	X, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[d->c])))());
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	88 0f       	add	r24, r24
    488a:	99 1f       	adc	r25, r25
    488c:	8d 53       	subi	r24, 0x3D	; 61
    488e:	96 4f       	sbci	r25, 0xF6	; 246
    4890:	fc 01       	movw	r30, r24
    4892:	25 91       	lpm	r18, Z+
    4894:	34 91       	lpm	r19, Z+
    4896:	f9 01       	movw	r30, r18
    4898:	19 95       	eicall
    489a:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    489c:	c9 01       	movw	r24, r18
    489e:	08 95       	ret

000048a0 <_getc_char>:

// xio_getc_usart helper routines

static int _getc_char(void)
{
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    48a0:	80 91 0b 22 	lds	r24, 0x220B
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	27 e1       	ldi	r18, 0x17	; 23
    48a8:	30 e0       	ldi	r19, 0x00	; 0
    48aa:	82 9f       	mul	r24, r18
    48ac:	d0 01       	movw	r26, r0
    48ae:	83 9f       	mul	r24, r19
    48b0:	b0 0d       	add	r27, r0
    48b2:	92 9f       	mul	r25, r18
    48b4:	b0 0d       	add	r27, r0
    48b6:	11 24       	eor	r1, r1
    48b8:	a7 54       	subi	r26, 0x47	; 71
    48ba:	bb 4d       	sbci	r27, 0xDB	; 219
    48bc:	8c 91       	ld	r24, X
    48be:	84 ff       	sbrs	r24, 4
    48c0:	0b c0       	rjmp	.+22     	; 0x48d8 <_getc_char+0x38>
    48c2:	60 91 51 26 	lds	r22, 0x2651
    48c6:	70 91 52 26 	lds	r23, 0x2652
    48ca:	1b 96       	adiw	r26, 0x0b	; 11
    48cc:	ed 91       	ld	r30, X+
    48ce:	fc 91       	ld	r31, X
    48d0:	1c 97       	sbiw	r26, 0x0c	; 12
    48d2:	14 96       	adiw	r26, 0x04	; 4
    48d4:	8c 91       	ld	r24, X
    48d6:	19 95       	eicall
    48d8:	80 91 0b 22 	lds	r24, 0x220B
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	27 e1       	ldi	r18, 0x17	; 23
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	82 9f       	mul	r24, r18
    48e4:	f0 01       	movw	r30, r0
    48e6:	83 9f       	mul	r24, r19
    48e8:	f0 0d       	add	r31, r0
    48ea:	92 9f       	mul	r25, r18
    48ec:	f0 0d       	add	r31, r0
    48ee:	11 24       	eor	r1, r1
    48f0:	e7 54       	subi	r30, 0x47	; 71
    48f2:	fb 4d       	sbci	r31, 0xDB	; 219
	return(ds[gdev].c);
}
    48f4:	84 81       	ldd	r24, Z+4	; 0x04
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	08 95       	ret

000048fa <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(ds[gdev].flags)) ds[gdev].c = '\n';
    48fa:	80 91 0b 22 	lds	r24, 0x220B
    48fe:	28 2f       	mov	r18, r24
    4900:	30 e0       	ldi	r19, 0x00	; 0
    4902:	87 e1       	ldi	r24, 0x17	; 23
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	28 9f       	mul	r18, r24
    4908:	f0 01       	movw	r30, r0
    490a:	29 9f       	mul	r18, r25
    490c:	f0 0d       	add	r31, r0
    490e:	38 9f       	mul	r19, r24
    4910:	f0 0d       	add	r31, r0
    4912:	11 24       	eor	r1, r1
    4914:	e7 54       	subi	r30, 0x47	; 71
    4916:	fb 4d       	sbci	r31, 0xDB	; 219
    4918:	80 81       	ld	r24, Z
    491a:	86 ff       	sbrs	r24, 6
    491c:	02 c0       	rjmp	.+4      	; 0x4922 <_getc_NEWLINE+0x28>
    491e:	8a e0       	ldi	r24, 0x0A	; 10
    4920:	84 83       	std	Z+4, r24	; 0x04
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    4922:	87 e1       	ldi	r24, 0x17	; 23
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	28 9f       	mul	r18, r24
    4928:	d0 01       	movw	r26, r0
    492a:	29 9f       	mul	r18, r25
    492c:	b0 0d       	add	r27, r0
    492e:	38 9f       	mul	r19, r24
    4930:	b0 0d       	add	r27, r0
    4932:	11 24       	eor	r1, r1
    4934:	a7 54       	subi	r26, 0x47	; 71
    4936:	bb 4d       	sbci	r27, 0xDB	; 219
    4938:	8c 91       	ld	r24, X
    493a:	84 ff       	sbrs	r24, 4
    493c:	0b c0       	rjmp	.+22     	; 0x4954 <_getc_NEWLINE+0x5a>
    493e:	60 91 51 26 	lds	r22, 0x2651
    4942:	70 91 52 26 	lds	r23, 0x2652
    4946:	1b 96       	adiw	r26, 0x0b	; 11
    4948:	ed 91       	ld	r30, X+
    494a:	fc 91       	ld	r31, X
    494c:	1c 97       	sbiw	r26, 0x0c	; 12
    494e:	14 96       	adiw	r26, 0x04	; 4
    4950:	8c 91       	ld	r24, X
    4952:	19 95       	eicall
    4954:	80 91 0b 22 	lds	r24, 0x220B
    4958:	90 e0       	ldi	r25, 0x00	; 0
    495a:	27 e1       	ldi	r18, 0x17	; 23
    495c:	30 e0       	ldi	r19, 0x00	; 0
    495e:	82 9f       	mul	r24, r18
    4960:	f0 01       	movw	r30, r0
    4962:	83 9f       	mul	r24, r19
    4964:	f0 0d       	add	r31, r0
    4966:	92 9f       	mul	r25, r18
    4968:	f0 0d       	add	r31, r0
    496a:	11 24       	eor	r1, r1
    496c:	e7 54       	subi	r30, 0x47	; 71
    496e:	fb 4d       	sbci	r31, 0xDB	; 219
	return(ds[gdev].c);
}
    4970:	84 81       	ldd	r24, Z+4	; 0x04
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	08 95       	ret

00004976 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(ds[gdev].flags)) {
    4976:	80 91 0b 22 	lds	r24, 0x220B
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	27 e1       	ldi	r18, 0x17	; 23
    497e:	30 e0       	ldi	r19, 0x00	; 0
    4980:	82 9f       	mul	r24, r18
    4982:	f0 01       	movw	r30, r0
    4984:	83 9f       	mul	r24, r19
    4986:	f0 0d       	add	r31, r0
    4988:	92 9f       	mul	r25, r18
    498a:	f0 0d       	add	r31, r0
    498c:	11 24       	eor	r1, r1
    498e:	e7 54       	subi	r30, 0x47	; 71
    4990:	fb 4d       	sbci	r31, 0xDB	; 219
    4992:	80 81       	ld	r24, Z
    4994:	87 ff       	sbrs	r24, 7
    4996:	03 c0       	rjmp	.+6      	; 0x499e <_getc_SEMICOLON+0x28>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    4998:	0e 94 7d 24 	call	0x48fa	; 0x48fa <_getc_NEWLINE>
    499c:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    499e:	0e 94 50 24 	call	0x48a0	; 0x48a0 <_getc_char>
}
    49a2:	08 95       	ret

000049a4 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	ds[gdev].sig = XIO_SIG_DELETE;
    49a4:	80 91 0b 22 	lds	r24, 0x220B
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	27 e1       	ldi	r18, 0x17	; 23
    49ac:	30 e0       	ldi	r19, 0x00	; 0
    49ae:	82 9f       	mul	r24, r18
    49b0:	f0 01       	movw	r30, r0
    49b2:	83 9f       	mul	r24, r19
    49b4:	f0 0d       	add	r31, r0
    49b6:	92 9f       	mul	r25, r18
    49b8:	f0 0d       	add	r31, r0
    49ba:	11 24       	eor	r1, r1
    49bc:	e7 54       	subi	r30, 0x47	; 71
    49be:	fb 4d       	sbci	r31, 0xDB	; 219
    49c0:	89 e0       	ldi	r24, 0x09	; 9
    49c2:	83 83       	std	Z+3, r24	; 0x03
	return(_FDEV_ERR);
}
    49c4:	8f ef       	ldi	r24, 0xFF	; 255
    49c6:	9f ef       	ldi	r25, 0xFF	; 255
    49c8:	08 95       	ret

000049ca <xio_readln_usart>:
 *
 *	Note: LINEMODE flag in device struct is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_usart(const uint8_t dev, char *buf, const uint8_t size)
{
    49ca:	ff 92       	push	r15
    49cc:	0f 93       	push	r16
    49ce:	1f 93       	push	r17
    49d0:	cf 93       	push	r28
    49d2:	df 93       	push	r29
    49d4:	28 2f       	mov	r18, r24
	struct xioDEVICE *d = &ds[dev];				// init device struct pointer
    49d6:	87 e1       	ldi	r24, 0x17	; 23
    49d8:	28 9f       	mul	r18, r24
    49da:	e0 01       	movw	r28, r0
    49dc:	11 24       	eor	r1, r1
    49de:	c7 54       	subi	r28, 0x47	; 71
    49e0:	db 4d       	sbci	r29, 0xDB	; 219
	
	gdev = dev;									// set the global device number
    49e2:	20 93 0b 22 	sts	0x220B, r18

	if (!IN_LINE(d->flags)) {					// first time thru initializations
    49e6:	88 81       	ld	r24, Y
    49e8:	99 81       	ldd	r25, Y+1	; 0x01
    49ea:	96 fd       	sbrc	r25, 6
    49ec:	09 c0       	rjmp	.+18     	; 0x4a00 <xio_readln_usart+0x36>
		d->len = 0;								// zero buffer
    49ee:	1d 82       	std	Y+5, r1	; 0x05
		d->status = 0;
    49f0:	1a 82       	std	Y+2, r1	; 0x02
		d->size = size;
    49f2:	4e 83       	std	Y+6, r20	; 0x06
		d->buf = buf;
    49f4:	6d 8b       	std	Y+21, r22	; 0x15
    49f6:	7e 8b       	std	Y+22, r23	; 0x16
		d->sig = XIO_SIG_OK;					// reset signal register
    49f8:	1b 82       	std	Y+3, r1	; 0x03
		d->flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    49fa:	90 64       	ori	r25, 0x40	; 64
    49fc:	88 83       	st	Y, r24
    49fe:	99 83       	std	Y+1, r25	; 0x01
 */

static int _xio_readc_usart(const uint8_t dev, const char *buf)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    4a00:	30 e0       	ldi	r19, 0x00	; 0
    4a02:	87 e1       	ldi	r24, 0x17	; 23
    4a04:	90 e0       	ldi	r25, 0x00	; 0
    4a06:	28 9f       	mul	r18, r24
    4a08:	80 01       	movw	r16, r0
    4a0a:	29 9f       	mul	r18, r25
    4a0c:	10 0d       	add	r17, r0
    4a0e:	38 9f       	mul	r19, r24
    4a10:	10 0d       	add	r17, r0
    4a12:	11 24       	eor	r1, r1
    4a14:	06 53       	subi	r16, 0x36	; 54
    4a16:	1b 4d       	sbci	r17, 0xDB	; 219

	if (dx->rx_buf_head == dx->rx_buf_tail) {		// RX ISR buffer empty
		return(XIO_BUFFER_EMPTY);
	}
	if (--(dx->rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    4a18:	4f e3       	ldi	r20, 0x3F	; 63
    4a1a:	f4 2e       	mov	r15, r20
 */

static int _xio_readc_usart(const uint8_t dev, const char *buf)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    4a1c:	d8 01       	movw	r26, r16
    4a1e:	ed 91       	ld	r30, X+
    4a20:	fc 91       	ld	r31, X

	if (dx->rx_buf_head == dx->rx_buf_tail) {		// RX ISR buffer empty
    4a22:	93 81       	ldd	r25, Z+3	; 0x03
    4a24:	82 81       	ldd	r24, Z+2	; 0x02
    4a26:	98 17       	cp	r25, r24
    4a28:	19 f4       	brne	.+6      	; 0x4a30 <xio_readln_usart+0x66>
    4a2a:	88 e0       	ldi	r24, 0x08	; 8
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	17 c0       	rjmp	.+46     	; 0x4a5e <xio_readln_usart+0x94>
		return(XIO_BUFFER_EMPTY);
	}
	if (--(dx->rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
    4a30:	82 81       	ldd	r24, Z+2	; 0x02
    4a32:	81 50       	subi	r24, 0x01	; 1
    4a34:	82 83       	std	Z+2, r24	; 0x02
    4a36:	82 81       	ldd	r24, Z+2	; 0x02
    4a38:	88 23       	and	r24, r24
    4a3a:	09 f4       	brne	.+2      	; 0x4a3e <xio_readln_usart+0x74>
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    4a3c:	f2 82       	std	Z+2, r15	; 0x02
	}
	d->c = (dx->rx_buf[dx->rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    4a3e:	82 81       	ldd	r24, Z+2	; 0x02
    4a40:	e8 0f       	add	r30, r24
    4a42:	f1 1d       	adc	r31, r1
    4a44:	83 85       	ldd	r24, Z+11	; 0x0b
    4a46:	8f 77       	andi	r24, 0x7F	; 127
    4a48:	8c 83       	std	Y+4, r24	; 0x04
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[d->c])))()); // dispatch char
    4a4a:	90 e0       	ldi	r25, 0x00	; 0
    4a4c:	88 0f       	add	r24, r24
    4a4e:	99 1f       	adc	r25, r25
    4a50:	8d 53       	subi	r24, 0x3D	; 61
    4a52:	97 4f       	sbci	r25, 0xF7	; 247
    4a54:	fc 01       	movw	r30, r24
    4a56:	25 91       	lpm	r18, Z+
    4a58:	34 91       	lpm	r19, Z+
    4a5a:	f9 01       	movw	r30, r18
    4a5c:	19 95       	eicall
		d->buf = buf;
		d->sig = XIO_SIG_OK;					// reset signal register
		d->flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
	}
	while (TRUE) { 
		switch (d->status = _xio_readc_usart(dev, d->buf)) {
    4a5e:	8a 83       	std	Y+2, r24	; 0x02
    4a60:	88 30       	cpi	r24, 0x08	; 8
    4a62:	41 f0       	breq	.+16     	; 0x4a74 <xio_readln_usart+0xaa>
    4a64:	8a 30       	cpi	r24, 0x0A	; 10
    4a66:	19 f0       	breq	.+6      	; 0x4a6e <xio_readln_usart+0xa4>
    4a68:	84 30       	cpi	r24, 0x04	; 4
    4a6a:	c1 f6       	brne	.-80     	; 0x4a1c <xio_readln_usart+0x52>
    4a6c:	06 c0       	rjmp	.+12     	; 0x4a7a <xio_readln_usart+0xb0>
    4a6e:	2a e0       	ldi	r18, 0x0A	; 10
    4a70:	30 e0       	ldi	r19, 0x00	; 0
    4a72:	05 c0       	rjmp	.+10     	; 0x4a7e <xio_readln_usart+0xb4>
    4a74:	22 e0       	ldi	r18, 0x02	; 2
    4a76:	30 e0       	ldi	r19, 0x00	; 0
    4a78:	02 c0       	rjmp	.+4      	; 0x4a7e <xio_readln_usart+0xb4>
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
			case (XIO_EAGAIN): break;							// loop
		}
		// +++ put a size check here of buffers can overrun.
	}
	return (XIO_OK);
}
    4a7e:	c9 01       	movw	r24, r18
    4a80:	df 91       	pop	r29
    4a82:	cf 91       	pop	r28
    4a84:	1f 91       	pop	r17
    4a86:	0f 91       	pop	r16
    4a88:	ff 90       	pop	r15
    4a8a:	08 95       	ret

00004a8c <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (ds[gdev].len > ds[gdev].size) {			// trap buffer overflow
    4a8c:	80 91 0b 22 	lds	r24, 0x220B
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	27 e1       	ldi	r18, 0x17	; 23
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	82 9f       	mul	r24, r18
    4a98:	d0 01       	movw	r26, r0
    4a9a:	83 9f       	mul	r24, r19
    4a9c:	b0 0d       	add	r27, r0
    4a9e:	92 9f       	mul	r25, r18
    4aa0:	b0 0d       	add	r27, r0
    4aa2:	11 24       	eor	r1, r1
    4aa4:	a7 54       	subi	r26, 0x47	; 71
    4aa6:	bb 4d       	sbci	r27, 0xDB	; 219
    4aa8:	15 96       	adiw	r26, 0x05	; 5
    4aaa:	9c 91       	ld	r25, X
    4aac:	15 97       	sbiw	r26, 0x05	; 5
    4aae:	16 96       	adiw	r26, 0x06	; 6
    4ab0:	2c 91       	ld	r18, X
    4ab2:	16 97       	sbiw	r26, 0x06	; 6
    4ab4:	29 17       	cp	r18, r25
    4ab6:	70 f4       	brcc	.+28     	; 0x4ad4 <_readln_char+0x48>
		ds[gdev].sig = XIO_SIG_EOL;
    4ab8:	82 e0       	ldi	r24, 0x02	; 2
    4aba:	13 96       	adiw	r26, 0x03	; 3
    4abc:	8c 93       	st	X, r24
    4abe:	13 97       	sbiw	r26, 0x03	; 3
		ds[gdev].buf[ds[gdev].size] = NUL;		// size is zero based
    4ac0:	55 96       	adiw	r26, 0x15	; 21
    4ac2:	ed 91       	ld	r30, X+
    4ac4:	fc 91       	ld	r31, X
    4ac6:	56 97       	sbiw	r26, 0x16	; 22
    4ac8:	e2 0f       	add	r30, r18
    4aca:	f1 1d       	adc	r31, r1
    4acc:	10 82       	st	Z, r1
    4ace:	2a e0       	ldi	r18, 0x0A	; 10
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	1e c0       	rjmp	.+60     	; 0x4b10 <_readln_char+0x84>
		return (XIO_BUFFER_FULL_NON_FATAL);
	}
	ds[gdev].buf[ds[gdev].len++] = ds[gdev].c;
    4ad4:	55 96       	adiw	r26, 0x15	; 21
    4ad6:	ed 91       	ld	r30, X+
    4ad8:	fc 91       	ld	r31, X
    4ada:	56 97       	sbiw	r26, 0x16	; 22
    4adc:	e9 0f       	add	r30, r25
    4ade:	f1 1d       	adc	r31, r1
    4ae0:	14 96       	adiw	r26, 0x04	; 4
    4ae2:	8c 91       	ld	r24, X
    4ae4:	14 97       	sbiw	r26, 0x04	; 4
    4ae6:	80 83       	st	Z, r24
    4ae8:	9f 5f       	subi	r25, 0xFF	; 255
    4aea:	15 96       	adiw	r26, 0x05	; 5
    4aec:	9c 93       	st	X, r25
    4aee:	15 97       	sbiw	r26, 0x05	; 5
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);// conditional echo
    4af0:	8c 91       	ld	r24, X
    4af2:	84 ff       	sbrs	r24, 4
    4af4:	0b c0       	rjmp	.+22     	; 0x4b0c <_readln_char+0x80>
    4af6:	60 91 51 26 	lds	r22, 0x2651
    4afa:	70 91 52 26 	lds	r23, 0x2652
    4afe:	1b 96       	adiw	r26, 0x0b	; 11
    4b00:	ed 91       	ld	r30, X+
    4b02:	fc 91       	ld	r31, X
    4b04:	1c 97       	sbiw	r26, 0x0c	; 12
    4b06:	14 96       	adiw	r26, 0x04	; 4
    4b08:	8c 91       	ld	r24, X
    4b0a:	19 95       	eicall
    4b0c:	22 e0       	ldi	r18, 0x02	; 2
    4b0e:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_EAGAIN);						// line is still in process
}
    4b10:	c9 01       	movw	r24, r18
    4b12:	08 95       	ret

00004b14 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	ds[gdev].sig = XIO_SIG_EOL;
    4b14:	80 91 0b 22 	lds	r24, 0x220B
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	27 e1       	ldi	r18, 0x17	; 23
    4b1c:	30 e0       	ldi	r19, 0x00	; 0
    4b1e:	82 9f       	mul	r24, r18
    4b20:	d0 01       	movw	r26, r0
    4b22:	83 9f       	mul	r24, r19
    4b24:	b0 0d       	add	r27, r0
    4b26:	92 9f       	mul	r25, r18
    4b28:	b0 0d       	add	r27, r0
    4b2a:	11 24       	eor	r1, r1
    4b2c:	a7 54       	subi	r26, 0x47	; 71
    4b2e:	bb 4d       	sbci	r27, 0xDB	; 219
    4b30:	82 e0       	ldi	r24, 0x02	; 2
    4b32:	13 96       	adiw	r26, 0x03	; 3
    4b34:	8c 93       	st	X, r24
    4b36:	13 97       	sbiw	r26, 0x03	; 3
	ds[gdev].buf[ds[gdev].len] = NUL;
    4b38:	15 96       	adiw	r26, 0x05	; 5
    4b3a:	8c 91       	ld	r24, X
    4b3c:	15 97       	sbiw	r26, 0x05	; 5
    4b3e:	55 96       	adiw	r26, 0x15	; 21
    4b40:	ed 91       	ld	r30, X+
    4b42:	fc 91       	ld	r31, X
    4b44:	56 97       	sbiw	r26, 0x16	; 22
    4b46:	e8 0f       	add	r30, r24
    4b48:	f1 1d       	adc	r31, r1
    4b4a:	10 82       	st	Z, r1
	ds[gdev].flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    4b4c:	2d 91       	ld	r18, X+
    4b4e:	3c 91       	ld	r19, X
    4b50:	11 97       	sbiw	r26, 0x01	; 1
    4b52:	c9 01       	movw	r24, r18
    4b54:	9f 7b       	andi	r25, 0xBF	; 191
    4b56:	8d 93       	st	X+, r24
    4b58:	9c 93       	st	X, r25
    4b5a:	11 97       	sbiw	r26, 0x01	; 1
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc('\n',stdout);// echo a newline
    4b5c:	24 ff       	sbrs	r18, 4
    4b5e:	0a c0       	rjmp	.+20     	; 0x4b74 <_readln_NEWLINE+0x60>
    4b60:	60 91 51 26 	lds	r22, 0x2651
    4b64:	70 91 52 26 	lds	r23, 0x2652
    4b68:	1b 96       	adiw	r26, 0x0b	; 11
    4b6a:	ed 91       	ld	r30, X+
    4b6c:	fc 91       	ld	r31, X
    4b6e:	1c 97       	sbiw	r26, 0x0c	; 12
    4b70:	8a e0       	ldi	r24, 0x0A	; 10
    4b72:	19 95       	eicall
	return (XIO_EOL);							// return for end-of-line
}
    4b74:	84 e0       	ldi	r24, 0x04	; 4
    4b76:	90 e0       	ldi	r25, 0x00	; 0
    4b78:	08 95       	ret

00004b7a <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newln
{
	if (SEMICOLONS(ds[gdev].flags)) {
    4b7a:	80 91 0b 22 	lds	r24, 0x220B
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	27 e1       	ldi	r18, 0x17	; 23
    4b82:	30 e0       	ldi	r19, 0x00	; 0
    4b84:	82 9f       	mul	r24, r18
    4b86:	f0 01       	movw	r30, r0
    4b88:	83 9f       	mul	r24, r19
    4b8a:	f0 0d       	add	r31, r0
    4b8c:	92 9f       	mul	r25, r18
    4b8e:	f0 0d       	add	r31, r0
    4b90:	11 24       	eor	r1, r1
    4b92:	e7 54       	subi	r30, 0x47	; 71
    4b94:	fb 4d       	sbci	r31, 0xDB	; 219
    4b96:	80 81       	ld	r24, Z
    4b98:	87 ff       	sbrs	r24, 7
    4b9a:	03 c0       	rjmp	.+6      	; 0x4ba2 <_readln_SEMICOLON+0x28>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    4b9c:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <_readln_NEWLINE>
    4ba0:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    4ba2:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <_readln_char>
	}
}
    4ba6:	08 95       	ret

00004ba8 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--ds[gdev].len >= 0) {
    4ba8:	80 91 0b 22 	lds	r24, 0x220B
    4bac:	90 e0       	ldi	r25, 0x00	; 0
    4bae:	27 e1       	ldi	r18, 0x17	; 23
    4bb0:	30 e0       	ldi	r19, 0x00	; 0
    4bb2:	82 9f       	mul	r24, r18
    4bb4:	d0 01       	movw	r26, r0
    4bb6:	83 9f       	mul	r24, r19
    4bb8:	b0 0d       	add	r27, r0
    4bba:	92 9f       	mul	r25, r18
    4bbc:	b0 0d       	add	r27, r0
    4bbe:	11 24       	eor	r1, r1
    4bc0:	a7 54       	subi	r26, 0x47	; 71
    4bc2:	bb 4d       	sbci	r27, 0xDB	; 219
    4bc4:	15 96       	adiw	r26, 0x05	; 5
    4bc6:	8c 91       	ld	r24, X
    4bc8:	15 97       	sbiw	r26, 0x05	; 5
    4bca:	81 50       	subi	r24, 0x01	; 1
    4bcc:	15 96       	adiw	r26, 0x05	; 5
    4bce:	8c 93       	st	X, r24
    4bd0:	15 97       	sbiw	r26, 0x05	; 5
		if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    4bd2:	8c 91       	ld	r24, X
    4bd4:	84 ff       	sbrs	r24, 4
    4bd6:	0b c0       	rjmp	.+22     	; 0x4bee <_readln_DELETE+0x46>
    4bd8:	60 91 51 26 	lds	r22, 0x2651
    4bdc:	70 91 52 26 	lds	r23, 0x2652
    4be0:	1b 96       	adiw	r26, 0x0b	; 11
    4be2:	ed 91       	ld	r30, X+
    4be4:	fc 91       	ld	r31, X
    4be6:	1c 97       	sbiw	r26, 0x0c	; 12
    4be8:	14 96       	adiw	r26, 0x04	; 4
    4bea:	8c 91       	ld	r24, X
    4bec:	19 95       	eicall
	} else {
		ds[gdev].len = 0;
	}
	return (XIO_EAGAIN);						// line is still in process
}
    4bee:	82 e0       	ldi	r24, 0x02	; 2
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	08 95       	ret

00004bf4 <xio_queue_RX_char_usart>:
 */

void xio_queue_RX_char_usart(const uint8_t dev, const char c)
{
	struct xioDEVICE *d = &ds[dev];				// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));// init USART pointer
    4bf4:	90 e0       	ldi	r25, 0x00	; 0
    4bf6:	27 e1       	ldi	r18, 0x17	; 23
    4bf8:	30 e0       	ldi	r19, 0x00	; 0
    4bfa:	82 9f       	mul	r24, r18
    4bfc:	f0 01       	movw	r30, r0
    4bfe:	83 9f       	mul	r24, r19
    4c00:	f0 0d       	add	r31, r0
    4c02:	92 9f       	mul	r25, r18
    4c04:	f0 0d       	add	r31, r0
    4c06:	11 24       	eor	r1, r1
    4c08:	e7 54       	subi	r30, 0x47	; 71
    4c0a:	fb 4d       	sbci	r31, 0xDB	; 219
    4c0c:	81 89       	ldd	r24, Z+17	; 0x11
    4c0e:	92 89       	ldd	r25, Z+18	; 0x12

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    4c10:	63 30       	cpi	r22, 0x03	; 3
    4c12:	29 f4       	brne	.+10     	; 0x4c1e <xio_queue_RX_char_usart+0x2a>
		d->sig = XIO_SIG_KILL;					// set signal value
    4c14:	84 e0       	ldi	r24, 0x04	; 4
    4c16:	83 83       	std	Z+3, r24	; 0x03
		signal_etx();							// call app-specific sig handler
    4c18:	0e 94 40 23 	call	0x4680	; 0x4680 <signal_etx>
    4c1c:	08 95       	ret
 */

void xio_queue_RX_char_usart(const uint8_t dev, const char c)
{
	struct xioDEVICE *d = &ds[dev];				// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));// init USART pointer
    4c1e:	fc 01       	movw	r30, r24
		signal_etx();							// call app-specific sig handler
		return;
	}

	// normal path
	if ((--dx->rx_buf_head) == 0) { 			// wrap condition
    4c20:	83 81       	ldd	r24, Z+3	; 0x03
    4c22:	81 50       	subi	r24, 0x01	; 1
    4c24:	83 83       	std	Z+3, r24	; 0x03
    4c26:	83 81       	ldd	r24, Z+3	; 0x03
    4c28:	88 23       	and	r24, r24
    4c2a:	11 f4       	brne	.+4      	; 0x4c30 <xio_queue_RX_char_usart+0x3c>
		dx->rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    4c2c:	8f e3       	ldi	r24, 0x3F	; 63
    4c2e:	83 83       	std	Z+3, r24	; 0x03
	}
	if (dx->rx_buf_head != dx->rx_buf_tail) {	// write char unless buffer full
    4c30:	93 81       	ldd	r25, Z+3	; 0x03
    4c32:	82 81       	ldd	r24, Z+2	; 0x02
    4c34:	98 17       	cp	r25, r24
    4c36:	29 f0       	breq	.+10     	; 0x4c42 <xio_queue_RX_char_usart+0x4e>
		dx->rx_buf[dx->rx_buf_head] = c;		// FAKE INPUT DATA
    4c38:	83 81       	ldd	r24, Z+3	; 0x03
    4c3a:	e8 0f       	add	r30, r24
    4c3c:	f1 1d       	adc	r31, r1
    4c3e:	63 87       	std	Z+11, r22	; 0x0b
    4c40:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++dx->rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    4c42:	83 81       	ldd	r24, Z+3	; 0x03
    4c44:	8f 5f       	subi	r24, 0xFF	; 255
    4c46:	83 83       	std	Z+3, r24	; 0x03
    4c48:	83 81       	ldd	r24, Z+3	; 0x03
    4c4a:	80 34       	cpi	r24, 0x40	; 64
    4c4c:	10 f0       	brcs	.+4      	; 0x4c52 <xio_queue_RX_char_usart+0x5e>
		dx->rx_buf_head = 1;
    4c4e:	81 e0       	ldi	r24, 0x01	; 1
    4c50:	83 83       	std	Z+3, r24	; 0x03
    4c52:	08 95       	ret

00004c54 <xio_queue_RX_string_usart>:
/*
 * xio_queue_RX_string_usart() - fake ISR to put a string in the RX buffer
 */

void xio_queue_RX_string_usart(const uint8_t dev, const char *buf)
{
    4c54:	0f 93       	push	r16
    4c56:	1f 93       	push	r17
    4c58:	cf 93       	push	r28
    4c5a:	df 93       	push	r29
    4c5c:	08 2f       	mov	r16, r24
    4c5e:	eb 01       	movw	r28, r22
    4c60:	10 e0       	ldi	r17, 0x00	; 0
    4c62:	03 c0       	rjmp	.+6      	; 0x4c6a <xio_queue_RX_string_usart+0x16>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_queue_RX_char_usart(dev, c);
    4c64:	80 2f       	mov	r24, r16
    4c66:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <xio_queue_RX_char_usart>
void xio_queue_RX_string_usart(const uint8_t dev, const char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    4c6a:	fe 01       	movw	r30, r28
    4c6c:	e1 0f       	add	r30, r17
    4c6e:	f1 1d       	adc	r31, r1
    4c70:	60 81       	ld	r22, Z
    4c72:	1f 5f       	subi	r17, 0xFF	; 255
    4c74:	66 23       	and	r22, r22
    4c76:	b1 f7       	brne	.-20     	; 0x4c64 <xio_queue_RX_string_usart+0x10>
		xio_queue_RX_char_usart(dev, c);
	}
}
    4c78:	df 91       	pop	r29
    4c7a:	cf 91       	pop	r28
    4c7c:	1f 91       	pop	r17
    4c7e:	0f 91       	pop	r16
    4c80:	08 95       	ret

00004c82 <xio_init_usart>:
					const struct PORT_struct *port_addr,
					const uint8_t dirclr, 
					const uint8_t dirset, 
					const uint8_t outclr, 
					const uint8_t outset) 
{
    4c82:	8f 92       	push	r8
    4c84:	9f 92       	push	r9
    4c86:	af 92       	push	r10
    4c88:	bf 92       	push	r11
    4c8a:	cf 92       	push	r12
    4c8c:	df 92       	push	r13
    4c8e:	ef 92       	push	r14
    4c90:	ff 92       	push	r15
    4c92:	0f 93       	push	r16
    4c94:	1f 93       	push	r17
    4c96:	df 93       	push	r29
    4c98:	cf 93       	push	r28
    4c9a:	cd b7       	in	r28, 0x3d	; 61
    4c9c:	de b7       	in	r29, 0x3e	; 62
    4c9e:	b8 2e       	mov	r11, r24
    4ca0:	f4 2e       	mov	r15, r20
    4ca2:	9c 2c       	mov	r9, r12
	// do all the bindings first (and in this order)
	struct xioDEVICE *d = &ds[dev];					// setup device struct pointer
	d->x = &us[offset];								// bind USART struct to device
    4ca4:	8b e8       	ldi	r24, 0x8B	; 139
    4ca6:	68 9f       	mul	r22, r24
    4ca8:	60 01       	movw	r12, r0
    4caa:	11 24       	eor	r1, r1
    4cac:	80 e0       	ldi	r24, 0x00	; 0
    4cae:	93 e2       	ldi	r25, 0x23	; 35
    4cb0:	c8 0e       	add	r12, r24
    4cb2:	d9 1e       	adc	r13, r25
    4cb4:	6b 2d       	mov	r22, r11
    4cb6:	70 e0       	ldi	r23, 0x00	; 0
    4cb8:	87 e1       	ldi	r24, 0x17	; 23
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	68 9f       	mul	r22, r24
    4cbe:	f0 01       	movw	r30, r0
    4cc0:	69 9f       	mul	r22, r25
    4cc2:	f0 0d       	add	r31, r0
    4cc4:	78 9f       	mul	r23, r24
    4cc6:	f0 0d       	add	r31, r0
    4cc8:	11 24       	eor	r1, r1
    4cca:	e7 54       	subi	r30, 0x47	; 71
    4ccc:	fb 4d       	sbci	r31, 0xDB	; 219
    4cce:	c1 8a       	std	Z+17, r12	; 0x11
    4cd0:	d2 8a       	std	Z+18, r13	; 0x12
	struct xioUSART *dx = (struct xioUSART *)d->x;	// setup USART struct pointer
	dx->usart = (struct USART_struct *)usart_addr;	// bind USART 
    4cd2:	d6 01       	movw	r26, r12
    4cd4:	17 96       	adiw	r26, 0x07	; 7
    4cd6:	2d 93       	st	X+, r18
    4cd8:	3c 93       	st	X, r19
    4cda:	18 97       	sbiw	r26, 0x08	; 8
	dx->port = (struct PORT_struct *)port_addr;		// bind PORT
    4cdc:	19 96       	adiw	r26, 0x09	; 9
    4cde:	0d 93       	st	X+, r16
    4ce0:	1c 93       	st	X, r17
    4ce2:	1a 97       	sbiw	r26, 0x0a	; 10

	// set flags
	xio_setflags(dev, control);		// generic setflags - doesn't validate flags
    4ce4:	8b 2d       	mov	r24, r11
    4ce6:	64 2f       	mov	r22, r20
    4ce8:	75 2f       	mov	r23, r21
    4cea:	0e 94 9b 1b 	call	0x3736	; 0x3736 <xio_setflags>

	// setup internal RX/TX buffers
	dx->rx_buf_head = 1;			// can't use location 0 in circular buffer
    4cee:	81 e0       	ldi	r24, 0x01	; 1
    4cf0:	f6 01       	movw	r30, r12
    4cf2:	83 83       	std	Z+3, r24	; 0x03
	dx->rx_buf_tail = 1;
    4cf4:	82 83       	std	Z+2, r24	; 0x02
	dx->tx_buf_head = 1;
    4cf6:	85 83       	std	Z+5, r24	; 0x05
	dx->tx_buf_tail = 1;
    4cf8:	84 83       	std	Z+4, r24	; 0x04

	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    4cfa:	4f 2d       	mov	r20, r15
    4cfc:	4f 70       	andi	r20, 0x0F	; 15
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
    4cfe:	09 f4       	brne	.+2      	; 0x4d02 <xio_init_usart+0x80>
    4d00:	45 e0       	ldi	r20, 0x05	; 5
	dx->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    4d02:	2b 2d       	mov	r18, r11
    4d04:	30 e0       	ldi	r19, 0x00	; 0
    4d06:	87 e1       	ldi	r24, 0x17	; 23
    4d08:	90 e0       	ldi	r25, 0x00	; 0
    4d0a:	28 9f       	mul	r18, r24
    4d0c:	d0 01       	movw	r26, r0
    4d0e:	29 9f       	mul	r18, r25
    4d10:	b0 0d       	add	r27, r0
    4d12:	38 9f       	mul	r19, r24
    4d14:	b0 0d       	add	r27, r0
    4d16:	11 24       	eor	r1, r1
    4d18:	a7 54       	subi	r26, 0x47	; 71
    4d1a:	bb 4d       	sbci	r27, 0xDB	; 219
    4d1c:	51 96       	adiw	r26, 0x11	; 17
    4d1e:	ed 91       	ld	r30, X+
    4d20:	fc 91       	ld	r31, X
    4d22:	52 97       	sbiw	r26, 0x12	; 18
    4d24:	87 81       	ldd	r24, Z+7	; 0x07
    4d26:	90 85       	ldd	r25, Z+8	; 0x08
    4d28:	24 2f       	mov	r18, r20
    4d2a:	30 e0       	ldi	r19, 0x00	; 0
    4d2c:	f9 01       	movw	r30, r18
    4d2e:	e3 55       	subi	r30, 0x53	; 83
    4d30:	f7 4f       	sbci	r31, 0xF7	; 247
    4d32:	44 91       	lpm	r20, Z+
    4d34:	fc 01       	movw	r30, r24
    4d36:	46 83       	std	Z+6, r20	; 0x06
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    4d38:	51 96       	adiw	r26, 0x11	; 17
    4d3a:	ed 91       	ld	r30, X+
    4d3c:	fc 91       	ld	r31, X
    4d3e:	52 97       	sbiw	r26, 0x12	; 18
    4d40:	a7 81       	ldd	r26, Z+7	; 0x07
    4d42:	b0 85       	ldd	r27, Z+8	; 0x08
    4d44:	28 54       	subi	r18, 0x48	; 72
    4d46:	37 4f       	sbci	r19, 0xF7	; 247
    4d48:	f9 01       	movw	r30, r18
    4d4a:	f4 90       	lpm	r15, Z+
    4d4c:	17 96       	adiw	r26, 0x07	; 7
    4d4e:	fc 92       	st	X, r15
	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
	xio_set_baud_usart(dev, baud);					// usart must be bound first

	dx->usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx
    4d50:	d6 01       	movw	r26, r12
    4d52:	17 96       	adiw	r26, 0x07	; 7
    4d54:	ed 91       	ld	r30, X+
    4d56:	fc 91       	ld	r31, X
    4d58:	18 97       	sbiw	r26, 0x08	; 8
    4d5a:	88 e1       	ldi	r24, 0x18	; 24
    4d5c:	84 83       	std	Z+4, r24	; 0x04
	dx->usart->CTRLA = CTRLA_RXON_TXON;			   // enable tx and rx IRQs
    4d5e:	17 96       	adiw	r26, 0x07	; 7
    4d60:	ed 91       	ld	r30, X+
    4d62:	fc 91       	ld	r31, X
    4d64:	18 97       	sbiw	r26, 0x08	; 8
    4d66:	81 e2       	ldi	r24, 0x21	; 33
    4d68:	83 83       	std	Z+3, r24	; 0x03

	dx->port->DIRCLR = dirclr;
    4d6a:	19 96       	adiw	r26, 0x09	; 9
    4d6c:	ed 91       	ld	r30, X+
    4d6e:	fc 91       	ld	r31, X
    4d70:	1a 97       	sbiw	r26, 0x0a	; 10
    4d72:	e2 82       	std	Z+2, r14	; 0x02
	dx->port->DIRSET = dirset;
    4d74:	19 96       	adiw	r26, 0x09	; 9
    4d76:	ed 91       	ld	r30, X+
    4d78:	fc 91       	ld	r31, X
    4d7a:	1a 97       	sbiw	r26, 0x0a	; 10
    4d7c:	91 82       	std	Z+1, r9	; 0x01
	dx->port->OUTCLR = outclr;
    4d7e:	19 96       	adiw	r26, 0x09	; 9
    4d80:	ed 91       	ld	r30, X+
    4d82:	fc 91       	ld	r31, X
    4d84:	1a 97       	sbiw	r26, 0x0a	; 10
    4d86:	a6 82       	std	Z+6, r10	; 0x06
	dx->port->OUTSET = outset;
    4d88:	19 96       	adiw	r26, 0x09	; 9
    4d8a:	ed 91       	ld	r30, X+
    4d8c:	fc 91       	ld	r31, X
    4d8e:	1a 97       	sbiw	r26, 0x0a	; 10
    4d90:	85 82       	std	Z+5, r8	; 0x05
}
    4d92:	cf 91       	pop	r28
    4d94:	df 91       	pop	r29
    4d96:	1f 91       	pop	r17
    4d98:	0f 91       	pop	r16
    4d9a:	ff 90       	pop	r15
    4d9c:	ef 90       	pop	r14
    4d9e:	df 90       	pop	r13
    4da0:	cf 90       	pop	r12
    4da2:	bf 90       	pop	r11
    4da4:	af 90       	pop	r10
    4da6:	9f 90       	pop	r9
    4da8:	8f 90       	pop	r8
    4daa:	08 95       	ret

00004dac <xio_open_usb>:

#define USB ds[XIO_DEV_USB]			// device struct accessoor
#define USBu us[XIO_DEV_USB_OFFSET]	// usart extended struct accessor

/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
    4dac:	80 91 e3 24 	lds	r24, 0x24E3
    4db0:	90 91 e4 24 	lds	r25, 0x24E4
    4db4:	08 95       	ret

00004db6 <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)	//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    4db6:	1f 92       	push	r1
    4db8:	0f 92       	push	r0
    4dba:	0f b6       	in	r0, 0x3f	; 63
    4dbc:	0f 92       	push	r0
    4dbe:	0b b6       	in	r0, 0x3b	; 59
    4dc0:	0f 92       	push	r0
    4dc2:	11 24       	eor	r1, r1
    4dc4:	8f 93       	push	r24
    4dc6:	9f 93       	push	r25
    4dc8:	af 93       	push	r26
    4dca:	bf 93       	push	r27
    4dcc:	ef 93       	push	r30
    4dce:	ff 93       	push	r31
	if (USBu.tx_buf_head == USBu.tx_buf_tail) {	// buffer empty - disable ints
    4dd0:	90 91 90 23 	lds	r25, 0x2390
    4dd4:	80 91 8f 23 	lds	r24, 0x238F
    4dd8:	98 17       	cp	r25, r24
    4dda:	39 f4       	brne	.+14     	; 0x4dea <__vector_26+0x34>
		USBu.usart->CTRLA = CTRLA_RXON_TXOFF;	// won't work if you just &= it
    4ddc:	e0 91 92 23 	lds	r30, 0x2392
    4de0:	f0 91 93 23 	lds	r31, 0x2393
    4de4:	80 e2       	ldi	r24, 0x20	; 32
    4de6:	83 83       	std	Z+3, r24	; 0x03
    4de8:	1d c0       	rjmp	.+58     	; 0x4e24 <__vector_26+0x6e>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(USB.flags)) {
    4dea:	80 91 d0 24 	lds	r24, 0x24D0
    4dee:	90 91 d1 24 	lds	r25, 0x24D1
    4df2:	93 fd       	sbrc	r25, 3
    4df4:	17 c0       	rjmp	.+46     	; 0x4e24 <__vector_26+0x6e>
		if (--(USBu.tx_buf_tail) == 0) {		// advance tail and wrap 
    4df6:	80 91 8f 23 	lds	r24, 0x238F
    4dfa:	81 50       	subi	r24, 0x01	; 1
    4dfc:	80 93 8f 23 	sts	0x238F, r24
    4e00:	80 91 8f 23 	lds	r24, 0x238F
    4e04:	88 23       	and	r24, r24
    4e06:	19 f4       	brne	.+6      	; 0x4e0e <__vector_26+0x58>
			USBu.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one err (OBOE)
    4e08:	8f e3       	ldi	r24, 0x3F	; 63
    4e0a:	80 93 8f 23 	sts	0x238F, r24
		}
		USBu.usart->DATA = USBu.tx_buf[USBu.tx_buf_tail]; // write to TX DATA reg
    4e0e:	e0 91 92 23 	lds	r30, 0x2392
    4e12:	f0 91 93 23 	lds	r31, 0x2393
    4e16:	a0 91 8f 23 	lds	r26, 0x238F
    4e1a:	b0 e0       	ldi	r27, 0x00	; 0
    4e1c:	aa 52       	subi	r26, 0x2A	; 42
    4e1e:	bc 4d       	sbci	r27, 0xDC	; 220
    4e20:	8c 91       	ld	r24, X
    4e22:	80 83       	st	Z, r24
	}
}
    4e24:	ff 91       	pop	r31
    4e26:	ef 91       	pop	r30
    4e28:	bf 91       	pop	r27
    4e2a:	af 91       	pop	r26
    4e2c:	9f 91       	pop	r25
    4e2e:	8f 91       	pop	r24
    4e30:	0f 90       	pop	r0
    4e32:	0b be       	out	0x3b, r0	; 59
    4e34:	0f 90       	pop	r0
    4e36:	0f be       	out	0x3f, r0	; 63
    4e38:	0f 90       	pop	r0
    4e3a:	1f 90       	pop	r1
    4e3c:	18 95       	reti

00004e3e <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    4e3e:	1f 92       	push	r1
    4e40:	0f 92       	push	r0
    4e42:	0f b6       	in	r0, 0x3f	; 63
    4e44:	0f 92       	push	r0
    4e46:	0b b6       	in	r0, 0x3b	; 59
    4e48:	0f 92       	push	r0
    4e4a:	11 24       	eor	r1, r1
    4e4c:	2f 93       	push	r18
    4e4e:	3f 93       	push	r19
    4e50:	4f 93       	push	r20
    4e52:	5f 93       	push	r21
    4e54:	6f 93       	push	r22
    4e56:	7f 93       	push	r23
    4e58:	8f 93       	push	r24
    4e5a:	9f 93       	push	r25
    4e5c:	af 93       	push	r26
    4e5e:	bf 93       	push	r27
    4e60:	ef 93       	push	r30
    4e62:	ff 93       	push	r31
	uint8_t c = USBu.usart->DATA;				// can only read DATA once
    4e64:	e0 91 92 23 	lds	r30, 0x2392
    4e68:	f0 91 93 23 	lds	r31, 0x2393
    4e6c:	20 81       	ld	r18, Z

	// trap signals - do not insert character into RX queue
	if (c == ETX) {								// trap ^c signal
    4e6e:	23 30       	cpi	r18, 0x03	; 3
    4e70:	31 f4       	brne	.+12     	; 0x4e7e <__vector_25+0x40>
		USB.sig = XIO_SIG_KILL;					// set signal value
    4e72:	84 e0       	ldi	r24, 0x04	; 4
    4e74:	80 93 d3 24 	sts	0x24D3, r24
		signal_etx();							// call app-specific signal handler
    4e78:	0e 94 40 23 	call	0x4680	; 0x4680 <signal_etx>
    4e7c:	25 c0       	rjmp	.+74     	; 0x4ec8 <__vector_25+0x8a>
		return;
	}

	// normal character path
	if ((--USBu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    4e7e:	80 91 8e 23 	lds	r24, 0x238E
    4e82:	81 50       	subi	r24, 0x01	; 1
    4e84:	80 93 8e 23 	sts	0x238E, r24
    4e88:	80 91 8e 23 	lds	r24, 0x238E
    4e8c:	88 23       	and	r24, r24
    4e8e:	19 f4       	brne	.+6      	; 0x4e96 <__vector_25+0x58>
		USBu.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    4e90:	8f e3       	ldi	r24, 0x3F	; 63
    4e92:	80 93 8e 23 	sts	0x238E, r24
	}
	if (USBu.rx_buf_head != USBu.rx_buf_tail) {	// write char unless buffer full
    4e96:	90 91 8e 23 	lds	r25, 0x238E
    4e9a:	80 91 8d 23 	lds	r24, 0x238D
    4e9e:	98 17       	cp	r25, r24
    4ea0:	39 f0       	breq	.+14     	; 0x4eb0 <__vector_25+0x72>
		USBu.rx_buf[USBu.rx_buf_head] = c;
    4ea2:	e0 91 8e 23 	lds	r30, 0x238E
    4ea6:	f0 e0       	ldi	r31, 0x00	; 0
    4ea8:	ea 56       	subi	r30, 0x6A	; 106
    4eaa:	fc 4d       	sbci	r31, 0xDC	; 220
    4eac:	20 83       	st	Z, r18
    4eae:	0c c0       	rjmp	.+24     	; 0x4ec8 <__vector_25+0x8a>
		return;
	}
	// buffer-full handling
	if ((++USBu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    4eb0:	80 91 8e 23 	lds	r24, 0x238E
    4eb4:	8f 5f       	subi	r24, 0xFF	; 255
    4eb6:	80 93 8e 23 	sts	0x238E, r24
    4eba:	80 91 8e 23 	lds	r24, 0x238E
    4ebe:	80 34       	cpi	r24, 0x40	; 64
    4ec0:	18 f0       	brcs	.+6      	; 0x4ec8 <__vector_25+0x8a>
		USBu.rx_buf_head = 1;
    4ec2:	81 e0       	ldi	r24, 0x01	; 1
    4ec4:	80 93 8e 23 	sts	0x238E, r24
	}
	// activate flow control here or before it gets to this level
}
    4ec8:	ff 91       	pop	r31
    4eca:	ef 91       	pop	r30
    4ecc:	bf 91       	pop	r27
    4ece:	af 91       	pop	r26
    4ed0:	9f 91       	pop	r25
    4ed2:	8f 91       	pop	r24
    4ed4:	7f 91       	pop	r23
    4ed6:	6f 91       	pop	r22
    4ed8:	5f 91       	pop	r21
    4eda:	4f 91       	pop	r20
    4edc:	3f 91       	pop	r19
    4ede:	2f 91       	pop	r18
    4ee0:	0f 90       	pop	r0
    4ee2:	0b be       	out	0x3b, r0	; 59
    4ee4:	0f 90       	pop	r0
    4ee6:	0f be       	out	0x3f, r0	; 63
    4ee8:	0f 90       	pop	r0
    4eea:	1f 90       	pop	r1
    4eec:	18 95       	reti

00004eee <xio_init_usb>:
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
void xio_queue_RX_string_usb(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_USB, buf);}

void xio_init_usb()	// USB inits
{
    4eee:	8f 92       	push	r8
    4ef0:	af 92       	push	r10
    4ef2:	cf 92       	push	r12
    4ef4:	ef 92       	push	r14
    4ef6:	ff 92       	push	r15
    4ef8:	0f 93       	push	r16
    4efa:	1f 93       	push	r17
	xio_init_dev(XIO_DEV_USB, xio_open_usb, xio_setflags_usb, xio_putc_usb, xio_getc_usb, xio_readln_usb);
    4efc:	81 e0       	ldi	r24, 0x01	; 1
    4efe:	66 ed       	ldi	r22, 0xD6	; 214
    4f00:	76 e2       	ldi	r23, 0x26	; 38
    4f02:	43 ec       	ldi	r20, 0xC3	; 195
    4f04:	57 e2       	ldi	r21, 0x27	; 39
    4f06:	2c eb       	ldi	r18, 0xBC	; 188
    4f08:	37 e2       	ldi	r19, 0x27	; 39
    4f0a:	07 eb       	ldi	r16, 0xB7	; 183
    4f0c:	17 e2       	ldi	r17, 0x27	; 39
    4f0e:	f0 eb       	ldi	r31, 0xB0	; 176
    4f10:	ef 2e       	mov	r14, r31
    4f12:	f7 e2       	ldi	r31, 0x27	; 39
    4f14:	ff 2e       	mov	r15, r31
    4f16:	0e 94 84 1c 	call	0x3908	; 0x3908 <xio_init_dev>
	xio_init_usart(XIO_DEV_USB, XIO_DEV_USB_OFFSET, USB_INIT_bm, &USB_USART, &USB_PORT, USB_DIRCLR_bm, USB_DIRSET_bm, USB_OUTCLR_bm, USB_OUTSET_bm);
    4f1a:	81 e0       	ldi	r24, 0x01	; 1
    4f1c:	61 e0       	ldi	r22, 0x01	; 1
    4f1e:	45 e7       	ldi	r20, 0x75	; 117
    4f20:	55 e5       	ldi	r21, 0x55	; 85
    4f22:	20 ea       	ldi	r18, 0xA0	; 160
    4f24:	38 e0       	ldi	r19, 0x08	; 8
    4f26:	00 e4       	ldi	r16, 0x40	; 64
    4f28:	16 e0       	ldi	r17, 0x06	; 6
    4f2a:	e5 e0       	ldi	r30, 0x05	; 5
    4f2c:	ee 2e       	mov	r14, r30
    4f2e:	7a e0       	ldi	r23, 0x0A	; 10
    4f30:	c7 2e       	mov	r12, r23
    4f32:	aa 24       	eor	r10, r10
    4f34:	9a e0       	ldi	r25, 0x0A	; 10
    4f36:	89 2e       	mov	r8, r25
    4f38:	0e 94 41 26 	call	0x4c82	; 0x4c82 <xio_init_usart>
}
    4f3c:	1f 91       	pop	r17
    4f3e:	0f 91       	pop	r16
    4f40:	ff 90       	pop	r15
    4f42:	ef 90       	pop	r14
    4f44:	cf 90       	pop	r12
    4f46:	af 90       	pop	r10
    4f48:	8f 90       	pop	r8
    4f4a:	08 95       	ret

00004f4c <xio_queue_RX_string_usb>:
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
void xio_queue_RX_string_usb(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_USB, buf);}
    4f4c:	bc 01       	movw	r22, r24
    4f4e:	81 e0       	ldi	r24, 0x01	; 1
    4f50:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <xio_queue_RX_string_usart>
    4f54:	08 95       	ret

00004f56 <xio_queue_RX_char_usb>:
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
    4f56:	68 2f       	mov	r22, r24
    4f58:	81 e0       	ldi	r24, 0x01	; 1
    4f5a:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <xio_queue_RX_char_usart>
    4f5e:	08 95       	ret

00004f60 <xio_readln_usb>:
/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
    4f60:	9c 01       	movw	r18, r24
    4f62:	46 2f       	mov	r20, r22
    4f64:	81 e0       	ldi	r24, 0x01	; 1
    4f66:	b9 01       	movw	r22, r18
    4f68:	0e 94 e5 24 	call	0x49ca	; 0x49ca <xio_readln_usart>
    4f6c:	08 95       	ret

00004f6e <xio_getc_usb>:

/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
    4f6e:	bc 01       	movw	r22, r24
    4f70:	81 e0       	ldi	r24, 0x01	; 1
    4f72:	0e 94 02 24 	call	0x4804	; 0x4804 <xio_getc_usart>
    4f76:	08 95       	ret

00004f78 <xio_putc_usb>:
#define USBu us[XIO_DEV_USB_OFFSET]	// usart extended struct accessor

/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
    4f78:	98 2f       	mov	r25, r24
    4f7a:	ab 01       	movw	r20, r22
    4f7c:	81 e0       	ldi	r24, 0x01	; 1
    4f7e:	69 2f       	mov	r22, r25
    4f80:	0e 94 70 23 	call	0x46e0	; 0x46e0 <xio_putc_usart>
    4f84:	08 95       	ret

00004f86 <xio_setflags_usb>:
#define USB ds[XIO_DEV_USB]			// device struct accessoor
#define USBu us[XIO_DEV_USB_OFFSET]	// usart extended struct accessor

/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
    4f86:	bc 01       	movw	r22, r24
    4f88:	81 e0       	ldi	r24, 0x01	; 1
    4f8a:	0e 94 9b 1b 	call	0x3736	; 0x3736 <xio_setflags>
    4f8e:	08 95       	ret

00004f90 <xio_open_rs485>:

#define RS ds[XIO_DEV_RS485]			// device struct accessoor
#define RSu us[XIO_DEV_RS485_OFFSET]	// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
    4f90:	80 91 cc 24 	lds	r24, 0x24CC
    4f94:	90 91 cd 24 	lds	r25, 0x24CD
    4f98:	08 95       	ret

00004f9a <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC1 data register empty
{
    4f9a:	1f 92       	push	r1
    4f9c:	0f 92       	push	r0
    4f9e:	0f b6       	in	r0, 0x3f	; 63
    4fa0:	0f 92       	push	r0
    4fa2:	0b b6       	in	r0, 0x3b	; 59
    4fa4:	0f 92       	push	r0
    4fa6:	11 24       	eor	r1, r1
    4fa8:	8f 93       	push	r24
    4faa:	9f 93       	push	r25
    4fac:	af 93       	push	r26
    4fae:	bf 93       	push	r27
    4fb0:	ef 93       	push	r30
    4fb2:	ff 93       	push	r31
	if (RSu.tx_buf_head == RSu.tx_buf_tail) {	// buffer empty - disable ints (Note)
    4fb4:	90 91 05 23 	lds	r25, 0x2305
    4fb8:	80 91 04 23 	lds	r24, 0x2304
    4fbc:	98 17       	cp	r25, r24
    4fbe:	39 f4       	brne	.+14     	; 0x4fce <__vector_29+0x34>
		RSu.usart->CTRLA = CTRLA_RXON_TXOFF_TXCON;	// doesn't work if you just &= it
    4fc0:	e0 91 07 23 	lds	r30, 0x2307
    4fc4:	f0 91 08 23 	lds	r31, 0x2308
    4fc8:	84 e2       	ldi	r24, 0x24	; 36
    4fca:	83 83       	std	Z+3, r24	; 0x03
    4fcc:	23 c0       	rjmp	.+70     	; 0x5014 <__vector_29+0x7a>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(RS.flags)) {
    4fce:	80 91 b9 24 	lds	r24, 0x24B9
    4fd2:	90 91 ba 24 	lds	r25, 0x24BA
    4fd6:	93 fd       	sbrc	r25, 3
    4fd8:	1d c0       	rjmp	.+58     	; 0x5014 <__vector_29+0x7a>
		if (--(RSu.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    4fda:	80 91 04 23 	lds	r24, 0x2304
    4fde:	81 50       	subi	r24, 0x01	; 1
    4fe0:	80 93 04 23 	sts	0x2304, r24
    4fe4:	80 91 04 23 	lds	r24, 0x2304
    4fe8:	88 23       	and	r24, r24
    4fea:	19 f4       	brne	.+6      	; 0x4ff2 <__vector_29+0x58>
			RSu.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    4fec:	8f e3       	ldi	r24, 0x3F	; 63
    4fee:	80 93 04 23 	sts	0x2304, r24
		}
		RSu.port->OUTSET = (RS485_DE_bm | RS485_RE_bm);	// enable DE (TX, active hi)
    4ff2:	e0 91 09 23 	lds	r30, 0x2309
    4ff6:	f0 91 0a 23 	lds	r31, 0x230A
    4ffa:	80 e3       	ldi	r24, 0x30	; 48
    4ffc:	85 83       	std	Z+5, r24	; 0x05
														// disable RE (RX, active lo)
		RSu.usart->DATA = RSu.tx_buf[RSu.tx_buf_tail];	// write char to TX DATA reg
    4ffe:	a0 91 07 23 	lds	r26, 0x2307
    5002:	b0 91 08 23 	lds	r27, 0x2308
    5006:	e0 91 04 23 	lds	r30, 0x2304
    500a:	f0 e0       	ldi	r31, 0x00	; 0
    500c:	e5 5b       	subi	r30, 0xB5	; 181
    500e:	fc 4d       	sbci	r31, 0xDC	; 220
    5010:	80 81       	ld	r24, Z
    5012:	8c 93       	st	X, r24
	}
}
    5014:	ff 91       	pop	r31
    5016:	ef 91       	pop	r30
    5018:	bf 91       	pop	r27
    501a:	af 91       	pop	r26
    501c:	9f 91       	pop	r25
    501e:	8f 91       	pop	r24
    5020:	0f 90       	pop	r0
    5022:	0b be       	out	0x3b, r0	; 59
    5024:	0f 90       	pop	r0
    5026:	0f be       	out	0x3f, r0	; 63
    5028:	0f 90       	pop	r0
    502a:	1f 90       	pop	r1
    502c:	18 95       	reti

0000502e <__vector_30>:

/* Note: Finding a buffer empty condition on the first byte of a string is common 
 * as the TX byte is often written by the task itself */

ISR(RS485_TXC_ISR_vect)		// ISR(USARTC1_TXC_vect) // USARTC1 transmission complete
{
    502e:	1f 92       	push	r1
    5030:	0f 92       	push	r0
    5032:	0f b6       	in	r0, 0x3f	; 63
    5034:	0f 92       	push	r0
    5036:	0b b6       	in	r0, 0x3b	; 59
    5038:	0f 92       	push	r0
    503a:	11 24       	eor	r1, r1
    503c:	8f 93       	push	r24
    503e:	ef 93       	push	r30
    5040:	ff 93       	push	r31
//	_delay_us(10);
	RSu.port->OUTCLR = (RS485_DE_bm | RS485_RE_bm);	// disable DE (TX), enable RE (RX)
    5042:	e0 91 09 23 	lds	r30, 0x2309
    5046:	f0 91 0a 23 	lds	r31, 0x230A
    504a:	80 e3       	ldi	r24, 0x30	; 48
    504c:	86 83       	std	Z+6, r24	; 0x06
}
    504e:	ff 91       	pop	r31
    5050:	ef 91       	pop	r30
    5052:	8f 91       	pop	r24
    5054:	0f 90       	pop	r0
    5056:	0b be       	out	0x3b, r0	; 59
    5058:	0f 90       	pop	r0
    505a:	0f be       	out	0x3f, r0	; 63
    505c:	0f 90       	pop	r0
    505e:	1f 90       	pop	r1
    5060:	18 95       	reti

00005062 <__vector_28>:
/* 
 * RS485_RX_ISR - RS485 receiver interrupt (RX)
 */

ISR(RS485_RX_ISR_vect)	//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    5062:	1f 92       	push	r1
    5064:	0f 92       	push	r0
    5066:	0f b6       	in	r0, 0x3f	; 63
    5068:	0f 92       	push	r0
    506a:	0b b6       	in	r0, 0x3b	; 59
    506c:	0f 92       	push	r0
    506e:	11 24       	eor	r1, r1
    5070:	2f 93       	push	r18
    5072:	3f 93       	push	r19
    5074:	4f 93       	push	r20
    5076:	5f 93       	push	r21
    5078:	6f 93       	push	r22
    507a:	7f 93       	push	r23
    507c:	8f 93       	push	r24
    507e:	9f 93       	push	r25
    5080:	af 93       	push	r26
    5082:	bf 93       	push	r27
    5084:	ef 93       	push	r30
    5086:	ff 93       	push	r31
	uint8_t c = RSu.usart->DATA;				// can only read DATA once
    5088:	e0 91 07 23 	lds	r30, 0x2307
    508c:	f0 91 08 23 	lds	r31, 0x2308
    5090:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    5092:	23 30       	cpi	r18, 0x03	; 3
    5094:	31 f4       	brne	.+12     	; 0x50a2 <__vector_28+0x40>
		RS.sig = XIO_SIG_KILL;					// set signal value
    5096:	84 e0       	ldi	r24, 0x04	; 4
    5098:	80 93 bc 24 	sts	0x24BC, r24
		signal_etx();							// call app-specific signal handler
    509c:	0e 94 40 23 	call	0x4680	; 0x4680 <signal_etx>
    50a0:	25 c0       	rjmp	.+74     	; 0x50ec <__vector_28+0x8a>
		return;
	}

	// normal path
	if ((--RSu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    50a2:	80 91 03 23 	lds	r24, 0x2303
    50a6:	81 50       	subi	r24, 0x01	; 1
    50a8:	80 93 03 23 	sts	0x2303, r24
    50ac:	80 91 03 23 	lds	r24, 0x2303
    50b0:	88 23       	and	r24, r24
    50b2:	19 f4       	brne	.+6      	; 0x50ba <__vector_28+0x58>
		RSu.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    50b4:	8f e3       	ldi	r24, 0x3F	; 63
    50b6:	80 93 03 23 	sts	0x2303, r24
	}
	if (RSu.rx_buf_head != RSu.rx_buf_tail) {	// write char unless buffer full
    50ba:	90 91 03 23 	lds	r25, 0x2303
    50be:	80 91 02 23 	lds	r24, 0x2302
    50c2:	98 17       	cp	r25, r24
    50c4:	39 f0       	breq	.+14     	; 0x50d4 <__vector_28+0x72>
		RSu.rx_buf[RSu.rx_buf_head] = c;		// (= USARTC1.DATA;)
    50c6:	e0 91 03 23 	lds	r30, 0x2303
    50ca:	f0 e0       	ldi	r31, 0x00	; 0
    50cc:	e0 50       	subi	r30, 0x00	; 0
    50ce:	fd 4d       	sbci	r31, 0xDD	; 221
    50d0:	23 87       	std	Z+11, r18	; 0x0b
    50d2:	0c c0       	rjmp	.+24     	; 0x50ec <__vector_28+0x8a>
		return;
	}
	// buffer-full handling
	if ((++RSu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    50d4:	80 91 03 23 	lds	r24, 0x2303
    50d8:	8f 5f       	subi	r24, 0xFF	; 255
    50da:	80 93 03 23 	sts	0x2303, r24
    50de:	80 91 03 23 	lds	r24, 0x2303
    50e2:	80 34       	cpi	r24, 0x40	; 64
    50e4:	18 f0       	brcs	.+6      	; 0x50ec <__vector_28+0x8a>
		RSu.rx_buf_head = 1;
    50e6:	81 e0       	ldi	r24, 0x01	; 1
    50e8:	80 93 03 23 	sts	0x2303, r24
	}
	// activate flow control here or before it gets to this level
}
    50ec:	ff 91       	pop	r31
    50ee:	ef 91       	pop	r30
    50f0:	bf 91       	pop	r27
    50f2:	af 91       	pop	r26
    50f4:	9f 91       	pop	r25
    50f6:	8f 91       	pop	r24
    50f8:	7f 91       	pop	r23
    50fa:	6f 91       	pop	r22
    50fc:	5f 91       	pop	r21
    50fe:	4f 91       	pop	r20
    5100:	3f 91       	pop	r19
    5102:	2f 91       	pop	r18
    5104:	0f 90       	pop	r0
    5106:	0b be       	out	0x3b, r0	; 59
    5108:	0f 90       	pop	r0
    510a:	0f be       	out	0x3f, r0	; 63
    510c:	0f 90       	pop	r0
    510e:	1f 90       	pop	r1
    5110:	18 95       	reti

00005112 <xio_init_rs485>:
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
void xio_queue_RX_string_rs485(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_RS485, buf);}

void xio_init_rs485()	// RS485 init
{
    5112:	8f 92       	push	r8
    5114:	af 92       	push	r10
    5116:	cf 92       	push	r12
    5118:	ef 92       	push	r14
    511a:	ff 92       	push	r15
    511c:	0f 93       	push	r16
    511e:	1f 93       	push	r17
	xio_init_dev(XIO_DEV_RS485, xio_open_rs485, xio_setflags_rs485, xio_putc_rs485, xio_getc_rs485, xio_readln_rs485);
    5120:	80 e0       	ldi	r24, 0x00	; 0
    5122:	68 ec       	ldi	r22, 0xC8	; 200
    5124:	77 e2       	ldi	r23, 0x27	; 39
    5126:	46 ed       	ldi	r20, 0xD6	; 214
    5128:	58 e2       	ldi	r21, 0x28	; 40
    512a:	2f ec       	ldi	r18, 0xCF	; 207
    512c:	38 e2       	ldi	r19, 0x28	; 40
    512e:	0a ec       	ldi	r16, 0xCA	; 202
    5130:	18 e2       	ldi	r17, 0x28	; 40
    5132:	a3 ec       	ldi	r26, 0xC3	; 195
    5134:	ea 2e       	mov	r14, r26
    5136:	a8 e2       	ldi	r26, 0x28	; 40
    5138:	fa 2e       	mov	r15, r26
    513a:	0e 94 84 1c 	call	0x3908	; 0x3908 <xio_init_dev>
	xio_init_usart(XIO_DEV_RS485, XIO_DEV_RS485_OFFSET, RS485_INIT_bm, &RS485_USART, &RS485_PORT, RS485_DIRCLR_bm, RS485_DIRSET_bm, RS485_OUTCLR_bm, RS485_OUTSET_bm);
    513e:	80 e0       	ldi	r24, 0x00	; 0
    5140:	60 e0       	ldi	r22, 0x00	; 0
    5142:	45 e7       	ldi	r20, 0x75	; 117
    5144:	50 e1       	ldi	r21, 0x10	; 16
    5146:	20 eb       	ldi	r18, 0xB0	; 176
    5148:	38 e0       	ldi	r19, 0x08	; 8
    514a:	00 e4       	ldi	r16, 0x40	; 64
    514c:	16 e0       	ldi	r17, 0x06	; 6
    514e:	f0 e4       	ldi	r31, 0x40	; 64
    5150:	ef 2e       	mov	r14, r31
    5152:	e0 eb       	ldi	r30, 0xB0	; 176
    5154:	ce 2e       	mov	r12, r30
    5156:	70 e3       	ldi	r23, 0x30	; 48
    5158:	a7 2e       	mov	r10, r23
    515a:	90 e8       	ldi	r25, 0x80	; 128
    515c:	89 2e       	mov	r8, r25
    515e:	0e 94 41 26 	call	0x4c82	; 0x4c82 <xio_init_usart>
}
    5162:	1f 91       	pop	r17
    5164:	0f 91       	pop	r16
    5166:	ff 90       	pop	r15
    5168:	ef 90       	pop	r14
    516a:	cf 90       	pop	r12
    516c:	af 90       	pop	r10
    516e:	8f 90       	pop	r8
    5170:	08 95       	ret

00005172 <xio_queue_RX_string_rs485>:
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
void xio_queue_RX_string_rs485(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_RS485, buf);}
    5172:	bc 01       	movw	r22, r24
    5174:	80 e0       	ldi	r24, 0x00	; 0
    5176:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <xio_queue_RX_string_usart>
    517a:	08 95       	ret

0000517c <xio_queue_RX_char_rs485>:
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
    517c:	68 2f       	mov	r22, r24
    517e:	80 e0       	ldi	r24, 0x00	; 0
    5180:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <xio_queue_RX_char_usart>
    5184:	08 95       	ret

00005186 <xio_readln_rs485>:
/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
    5186:	9c 01       	movw	r18, r24
    5188:	46 2f       	mov	r20, r22
    518a:	80 e0       	ldi	r24, 0x00	; 0
    518c:	b9 01       	movw	r22, r18
    518e:	0e 94 e5 24 	call	0x49ca	; 0x49ca <xio_readln_usart>
    5192:	08 95       	ret

00005194 <xio_getc_rs485>:

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
    5194:	bc 01       	movw	r22, r24
    5196:	80 e0       	ldi	r24, 0x00	; 0
    5198:	0e 94 02 24 	call	0x4804	; 0x4804 <xio_getc_usart>
    519c:	08 95       	ret

0000519e <xio_putc_rs485>:
#define RSu us[XIO_DEV_RS485_OFFSET]	// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
    519e:	98 2f       	mov	r25, r24
    51a0:	ab 01       	movw	r20, r22
    51a2:	80 e0       	ldi	r24, 0x00	; 0
    51a4:	69 2f       	mov	r22, r25
    51a6:	0e 94 70 23 	call	0x46e0	; 0x46e0 <xio_putc_usart>
    51aa:	08 95       	ret

000051ac <xio_setflags_rs485>:
#define RS ds[XIO_DEV_RS485]			// device struct accessoor
#define RSu us[XIO_DEV_RS485_OFFSET]	// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
    51ac:	bc 01       	movw	r22, r24
    51ae:	80 e0       	ldi	r24, 0x00	; 0
    51b0:	0e 94 9b 1b 	call	0x3736	; 0x3736 <xio_setflags>
    51b4:	08 95       	ret

000051b6 <xio_open_pgm>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

struct __file * xio_open_pgm(const prog_char *addr)
{
	PGM.flags &= XIO_FLAG_RESET_gm;			// reset flag signaling bits
    51b6:	20 91 fe 24 	lds	r18, 0x24FE
    51ba:	30 91 ff 24 	lds	r19, 0x24FF
    51be:	3f 70       	andi	r19, 0x0F	; 15
    51c0:	20 93 fe 24 	sts	0x24FE, r18
    51c4:	30 93 ff 24 	sts	0x24FF, r19
	PGM.sig = 0;							// reset signal
    51c8:	10 92 01 25 	sts	0x2501, r1
	PGMf.pgmbase_P = (PROGMEM char *)addr;	// might want to range check this
    51cc:	80 93 a7 24 	sts	0x24A7, r24
    51d0:	90 93 a8 24 	sts	0x24A8, r25
	PGMf.len = 0;							// initialize buffer pointer
    51d4:	10 92 a3 24 	sts	0x24A3, r1
    51d8:	10 92 a4 24 	sts	0x24A4, r1
    51dc:	10 92 a5 24 	sts	0x24A5, r1
    51e0:	10 92 a6 24 	sts	0x24A6, r1
	return(PGM.fdev);							// return pointer to the fdev stream
}
    51e4:	80 91 11 25 	lds	r24, 0x2511
    51e8:	90 91 12 25 	lds	r25, 0x2512
    51ec:	08 95       	ret

000051ee <xio_putc_pgm>:
 */

int xio_putc_pgm(const char c, struct __file *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    51ee:	8f ef       	ldi	r24, 0xFF	; 255
    51f0:	9f ef       	ldi	r25, 0xFF	; 255
    51f2:	08 95       	ret

000051f4 <xio_readln_pgm>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_pgm(char *buf, const uint8_t size)
{
    51f4:	9c 01       	movw	r18, r24
	if (!(PGMf.pgmbase_P)) {					// return error if no file is open
    51f6:	80 91 a7 24 	lds	r24, 0x24A7
    51fa:	90 91 a8 24 	lds	r25, 0x24A8
    51fe:	89 2b       	or	r24, r25
    5200:	19 f4       	brne	.+6      	; 0x5208 <xio_readln_pgm+0x14>
    5202:	26 e0       	ldi	r18, 0x06	; 6
    5204:	30 e0       	ldi	r19, 0x00	; 0
    5206:	1b c0       	rjmp	.+54     	; 0x523e <xio_readln_pgm+0x4a>
		return (XIO_FILE_NOT_OPEN);
	}
	PGM.sig = XIO_SIG_OK;						// initialize signal
    5208:	10 92 01 25 	sts	0x2501, r1
	if (fgets(buf, size, PGM.fdev) == NULL) {
    520c:	40 91 11 25 	lds	r20, 0x2511
    5210:	50 91 12 25 	lds	r21, 0x2512
    5214:	c9 01       	movw	r24, r18
    5216:	70 e0       	ldi	r23, 0x00	; 0
    5218:	0e 94 50 3c 	call	0x78a0	; 0x78a0 <fgets>
    521c:	89 2b       	or	r24, r25
    521e:	19 f0       	breq	.+6      	; 0x5226 <xio_readln_pgm+0x32>
    5220:	20 e0       	ldi	r18, 0x00	; 0
    5222:	30 e0       	ldi	r19, 0x00	; 0
    5224:	0c c0       	rjmp	.+24     	; 0x523e <xio_readln_pgm+0x4a>
		PGMf.pgmbase_P = NULL;
    5226:	10 92 a7 24 	sts	0x24A7, r1
    522a:	10 92 a8 24 	sts	0x24A8, r1
		clearerr(PGM.fdev);
    522e:	80 91 11 25 	lds	r24, 0x2511
    5232:	90 91 12 25 	lds	r25, 0x2512
    5236:	0e 94 4b 3c 	call	0x7896	; 0x7896 <clearerr>
    523a:	25 e0       	ldi	r18, 0x05	; 5
    523c:	30 e0       	ldi	r19, 0x00	; 0
		return (XIO_EOF);
	}
	return (XIO_OK);
}
    523e:	c9 01       	movw	r24, r18
    5240:	08 95       	ret

00005242 <xio_getc_pgm>:
 */

int xio_getc_pgm(struct __file *stream)
{

	if (PGM.flags & XIO_FLAG_EOF_bm) {
    5242:	20 91 fe 24 	lds	r18, 0x24FE
    5246:	30 91 ff 24 	lds	r19, 0x24FF
    524a:	35 ff       	sbrs	r19, 5
    524c:	06 c0       	rjmp	.+12     	; 0x525a <xio_getc_pgm+0x18>
		PGM.sig = XIO_SIG_EOF;
    524e:	83 e0       	ldi	r24, 0x03	; 3
    5250:	80 93 01 25 	sts	0x2501, r24
    5254:	2e ef       	ldi	r18, 0xFE	; 254
    5256:	3f ef       	ldi	r19, 0xFF	; 255
    5258:	48 c0       	rjmp	.+144    	; 0x52ea <xio_getc_pgm+0xa8>
		return (_FDEV_EOF);
	}
	if ((PGM.c = pgm_read_byte(&PGMf.pgmbase_P[PGMf.len])) == NUL) {
    525a:	80 91 a3 24 	lds	r24, 0x24A3
    525e:	90 91 a4 24 	lds	r25, 0x24A4
    5262:	a0 91 a5 24 	lds	r26, 0x24A5
    5266:	b0 91 a6 24 	lds	r27, 0x24A6
    526a:	e0 91 a7 24 	lds	r30, 0x24A7
    526e:	f0 91 a8 24 	lds	r31, 0x24A8
    5272:	e8 0f       	add	r30, r24
    5274:	f9 1f       	adc	r31, r25
    5276:	e4 91       	lpm	r30, Z+
    5278:	e0 93 02 25 	sts	0x2502, r30
    527c:	ee 23       	and	r30, r30
    527e:	29 f4       	brne	.+10     	; 0x528a <xio_getc_pgm+0x48>
		PGM.flags |= XIO_FLAG_EOF_bm;
    5280:	30 62       	ori	r19, 0x20	; 32
    5282:	20 93 fe 24 	sts	0x24FE, r18
    5286:	30 93 ff 24 	sts	0x24FF, r19
	}
	++PGMf.len;
    528a:	01 96       	adiw	r24, 0x01	; 1
    528c:	a1 1d       	adc	r26, r1
    528e:	b1 1d       	adc	r27, r1
    5290:	80 93 a3 24 	sts	0x24A3, r24
    5294:	90 93 a4 24 	sts	0x24A4, r25
    5298:	a0 93 a5 24 	sts	0x24A5, r26
    529c:	b0 93 a6 24 	sts	0x24A6, r27
	if (!LINEMODE(PGM.flags)) {			// processing is simple if not LINEMODE
    52a0:	90 91 fe 24 	lds	r25, 0x24FE
    52a4:	96 fd       	sbrc	r25, 6
    52a6:	03 c0       	rjmp	.+6      	; 0x52ae <xio_getc_pgm+0x6c>
		if (ECHO(PGM.flags)) {
    52a8:	94 ff       	sbrs	r25, 4
    52aa:	1b c0       	rjmp	.+54     	; 0x52e2 <xio_getc_pgm+0xa0>
    52ac:	11 c0       	rjmp	.+34     	; 0x52d0 <xio_getc_pgm+0x8e>
			putchar(PGM.c);
		}
		return (PGM.c);
	}
	// now do the LINEMODE stuff
	if (PGM.c == NUL) {					// perform newline substitutions
    52ae:	80 91 02 25 	lds	r24, 0x2502
    52b2:	88 23       	and	r24, r24
    52b4:	31 f0       	breq	.+12     	; 0x52c2 <xio_getc_pgm+0x80>
		PGM.c = '\n';
	} else if (PGM.c == '\r') {
    52b6:	8d 30       	cpi	r24, 0x0D	; 13
    52b8:	21 f0       	breq	.+8      	; 0x52c2 <xio_getc_pgm+0x80>
		PGM.c = '\n';
	} else if ((SEMICOLONS(PGM.flags)) && (PGM.c == ';')) {
    52ba:	97 ff       	sbrs	r25, 7
    52bc:	05 c0       	rjmp	.+10     	; 0x52c8 <xio_getc_pgm+0x86>
    52be:	8b 33       	cpi	r24, 0x3B	; 59
    52c0:	19 f4       	brne	.+6      	; 0x52c8 <xio_getc_pgm+0x86>
		PGM.c = '\n';
    52c2:	8a e0       	ldi	r24, 0x0A	; 10
    52c4:	80 93 02 25 	sts	0x2502, r24
	}
	if (ECHO(PGM.flags)) {
    52c8:	80 91 fe 24 	lds	r24, 0x24FE
    52cc:	84 ff       	sbrs	r24, 4
    52ce:	09 c0       	rjmp	.+18     	; 0x52e2 <xio_getc_pgm+0xa0>
		putchar(PGM.c);
    52d0:	60 91 51 26 	lds	r22, 0x2651
    52d4:	70 91 52 26 	lds	r23, 0x2652
    52d8:	80 91 02 25 	lds	r24, 0x2502
    52dc:	90 e0       	ldi	r25, 0x00	; 0
    52de:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
	}
	return (PGM.c);
    52e2:	80 91 02 25 	lds	r24, 0x2502
    52e6:	28 2f       	mov	r18, r24
    52e8:	30 e0       	ldi	r19, 0x00	; 0
}
    52ea:	c9 01       	movw	r24, r18
    52ec:	08 95       	ret

000052ee <xio_setflags_pgm>:
/*
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
    52ee:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_PGM, control);
    52f0:	83 e0       	ldi	r24, 0x03	; 3
    52f2:	0e 94 9b 1b 	call	0x3736	; 0x3736 <xio_setflags>
	return (XIO_OK);									// for now it's always OK
}
    52f6:	80 e0       	ldi	r24, 0x00	; 0
    52f8:	90 e0       	ldi	r25, 0x00	; 0
    52fa:	08 95       	ret

000052fc <xio_init_file>:
 *	xio_init_file() - generic init for file devices
 */
void xio_init_file(const uint8_t dev, const uint8_t offset, const uint16_t control)
{
	// bind file struct to extended device parameters
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
    52fc:	90 e0       	ldi	r25, 0x00	; 0
    52fe:	27 e1       	ldi	r18, 0x17	; 23
    5300:	30 e0       	ldi	r19, 0x00	; 0
    5302:	82 9f       	mul	r24, r18
    5304:	f0 01       	movw	r30, r0
    5306:	83 9f       	mul	r24, r19
    5308:	f0 0d       	add	r31, r0
    530a:	92 9f       	mul	r25, r18
    530c:	f0 0d       	add	r31, r0
    530e:	11 24       	eor	r1, r1
    5310:	e7 54       	subi	r30, 0x47	; 71
    5312:	fb 4d       	sbci	r31, 0xDB	; 219
    5314:	70 e0       	ldi	r23, 0x00	; 0
    5316:	83 e0       	ldi	r24, 0x03	; 3
    5318:	66 0f       	add	r22, r22
    531a:	77 1f       	adc	r23, r23
    531c:	8a 95       	dec	r24
    531e:	e1 f7       	brne	.-8      	; 0x5318 <xio_init_file+0x1c>
    5320:	6f 55       	subi	r22, 0x5F	; 95
    5322:	7b 4d       	sbci	r23, 0xDB	; 219
    5324:	61 8b       	std	Z+17, r22	; 0x11
    5326:	72 8b       	std	Z+18, r23	; 0x12
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
	xio_setflags(XIO_DEV_PGM, control);
    5328:	83 e0       	ldi	r24, 0x03	; 3
    532a:	ba 01       	movw	r22, r20
    532c:	0e 94 9b 1b 	call	0x3736	; 0x3736 <xio_setflags>
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
	// might be useful to sanity check the control bits before calling set flags
	//	- RD and BLOCK are mandatory
	// 	- WR and NOBLOCK are restricted
	xio_setflags_pgm(control);
}
    5330:	08 95       	ret

00005332 <xio_init_pgm>:

/* 
 *	xio_init_pgm() - initialize and set controls for program memory device 
 */
void xio_init_pgm()
{
    5332:	ef 92       	push	r14
    5334:	ff 92       	push	r15
    5336:	0f 93       	push	r16
    5338:	1f 93       	push	r17
	// Program memory file device setup
	xio_init_dev(XIO_DEV_PGM, xio_open_pgm, xio_setflags_pgm, xio_putc_pgm, xio_getc_pgm, xio_readln_pgm);
    533a:	83 e0       	ldi	r24, 0x03	; 3
    533c:	6b ed       	ldi	r22, 0xDB	; 219
    533e:	78 e2       	ldi	r23, 0x28	; 40
    5340:	47 e7       	ldi	r20, 0x77	; 119
    5342:	59 e2       	ldi	r21, 0x29	; 41
    5344:	27 ef       	ldi	r18, 0xF7	; 247
    5346:	38 e2       	ldi	r19, 0x28	; 40
    5348:	01 e2       	ldi	r16, 0x21	; 33
    534a:	19 e2       	ldi	r17, 0x29	; 41
    534c:	9a ef       	ldi	r25, 0xFA	; 250
    534e:	e9 2e       	mov	r14, r25
    5350:	98 e2       	ldi	r25, 0x28	; 40
    5352:	f9 2e       	mov	r15, r25
    5354:	0e 94 84 1c 	call	0x3908	; 0x3908 <xio_init_dev>
 *	xio_init_file() - generic init for file devices
 */
void xio_init_file(const uint8_t dev, const uint8_t offset, const uint16_t control)
{
	// bind file struct to extended device parameters
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
    5358:	81 ea       	ldi	r24, 0xA1	; 161
    535a:	94 e2       	ldi	r25, 0x24	; 36
    535c:	80 93 0f 25 	sts	0x250F, r24
    5360:	90 93 10 25 	sts	0x2510, r25
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
	xio_setflags(XIO_DEV_PGM, control);
    5364:	83 e0       	ldi	r24, 0x03	; 3
    5366:	60 e5       	ldi	r22, 0x50	; 80
    5368:	75 e1       	ldi	r23, 0x15	; 21
    536a:	0e 94 9b 1b 	call	0x3736	; 0x3736 <xio_setflags>
void xio_init_pgm()
{
	// Program memory file device setup
	xio_init_dev(XIO_DEV_PGM, xio_open_pgm, xio_setflags_pgm, xio_putc_pgm, xio_getc_pgm, xio_readln_pgm);
	xio_init_file(XIO_DEV_PGM, XIO_DEV_PGM_OFFSET, PGM_INIT_bm);
}
    536e:	1f 91       	pop	r17
    5370:	0f 91       	pop	r16
    5372:	ff 90       	pop	r15
    5374:	ef 90       	pop	r14
    5376:	08 95       	ret

00005378 <net_init>:
 */

void net_init() 
{
	
}
    5378:	08 95       	ret

0000537a <tg_receiver>:
 * tg_receiver()
 */

void tg_receiver()
{
	tg_controller();	// this node executes gcode blocks received via RS485
    537a:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <tg_controller>
		if (c != CR) {
			en_toggle(1);
		}
	}
*/
}
    537e:	08 95       	ret

00005380 <tg_repeater>:
		_delay_ms(50);
	}
*/	
	char c;

	en_write(4);
    5380:	84 e0       	ldi	r24, 0x04	; 4
    5382:	0e 94 f6 11 	call	0x23ec	; 0x23ec <en_write>
	while (TRUE) {
		c = xio_getc(XIO_DEV_USB);		// blocking read
    5386:	81 e0       	ldi	r24, 0x01	; 1
    5388:	0e 94 4e 1c 	call	0x389c	; 0x389c <xio_getc>
    538c:	68 2f       	mov	r22, r24
		xio_putc(XIO_DEV_RS485, c);		// transfer to RS485 port
    538e:	80 e0       	ldi	r24, 0x00	; 0
    5390:	0e 94 31 1c 	call	0x3862	; 0x3862 <xio_putc>
		en_toggle(1);
    5394:	81 e0       	ldi	r24, 0x01	; 1
    5396:	0e 94 36 12 	call	0x246c	; 0x246c <en_toggle>
    539a:	f5 cf       	rjmp	.-22     	; 0x5386 <tg_repeater+0x6>

0000539c <hw_init>:
 * hw_init() - lowest level hardware init
 */

void hw_init() 
{
	xmega_init();
    539c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <xmega_init>
}
    53a0:	08 95       	ret

000053a2 <__lshrdi3>:
    53a2:	ef 92       	push	r14
    53a4:	ff 92       	push	r15
    53a6:	0f 93       	push	r16
    53a8:	df 93       	push	r29
    53aa:	cf 93       	push	r28
    53ac:	cd b7       	in	r28, 0x3d	; 61
    53ae:	de b7       	in	r29, 0x3e	; 62
    53b0:	60 97       	sbiw	r28, 0x10	; 16
    53b2:	cd bf       	out	0x3d, r28	; 61
    53b4:	de bf       	out	0x3e, r29	; 62
    53b6:	a8 2f       	mov	r26, r24
    53b8:	00 23       	and	r16, r16
    53ba:	09 f4       	brne	.+2      	; 0x53be <__lshrdi3+0x1c>
    53bc:	61 c0       	rjmp	.+194    	; 0x5480 <__lshrdi3+0xde>
    53be:	7e 01       	movw	r14, r28
    53c0:	08 94       	sec
    53c2:	e1 1c       	adc	r14, r1
    53c4:	f1 1c       	adc	r15, r1
    53c6:	88 e0       	ldi	r24, 0x08	; 8
    53c8:	f7 01       	movw	r30, r14
    53ca:	11 92       	st	Z+, r1
    53cc:	8a 95       	dec	r24
    53ce:	e9 f7       	brne	.-6      	; 0x53ca <__lshrdi3+0x28>
    53d0:	29 83       	std	Y+1, r18	; 0x01
    53d2:	3a 83       	std	Y+2, r19	; 0x02
    53d4:	4b 83       	std	Y+3, r20	; 0x03
    53d6:	5c 83       	std	Y+4, r21	; 0x04
    53d8:	6d 83       	std	Y+5, r22	; 0x05
    53da:	7e 83       	std	Y+6, r23	; 0x06
    53dc:	af 83       	std	Y+7, r26	; 0x07
    53de:	98 87       	std	Y+8, r25	; 0x08
    53e0:	80 e2       	ldi	r24, 0x20	; 32
    53e2:	80 1b       	sub	r24, r16
    53e4:	e8 2f       	mov	r30, r24
    53e6:	ff 27       	eor	r31, r31
    53e8:	e7 fd       	sbrc	r30, 7
    53ea:	f0 95       	com	r31
    53ec:	4d 81       	ldd	r20, Y+5	; 0x05
    53ee:	5e 81       	ldd	r21, Y+6	; 0x06
    53f0:	6f 81       	ldd	r22, Y+7	; 0x07
    53f2:	78 85       	ldd	r23, Y+8	; 0x08
    53f4:	18 16       	cp	r1, r24
    53f6:	84 f0       	brlt	.+32     	; 0x5418 <__lshrdi3+0x76>
    53f8:	1d 86       	std	Y+13, r1	; 0x0d
    53fa:	1e 86       	std	Y+14, r1	; 0x0e
    53fc:	1f 86       	std	Y+15, r1	; 0x0f
    53fe:	18 8a       	std	Y+16, r1	; 0x10
    5400:	88 27       	eor	r24, r24
    5402:	99 27       	eor	r25, r25
    5404:	8e 1b       	sub	r24, r30
    5406:	9f 0b       	sbc	r25, r31
    5408:	04 c0       	rjmp	.+8      	; 0x5412 <__lshrdi3+0x70>
    540a:	76 95       	lsr	r23
    540c:	67 95       	ror	r22
    540e:	57 95       	ror	r21
    5410:	47 95       	ror	r20
    5412:	8a 95       	dec	r24
    5414:	d2 f7       	brpl	.-12     	; 0x540a <__lshrdi3+0x68>
    5416:	28 c0       	rjmp	.+80     	; 0x5468 <__lshrdi3+0xc6>
    5418:	20 2f       	mov	r18, r16
    541a:	33 27       	eor	r19, r19
    541c:	27 fd       	sbrc	r18, 7
    541e:	30 95       	com	r19
    5420:	db 01       	movw	r26, r22
    5422:	ca 01       	movw	r24, r20
    5424:	02 2e       	mov	r0, r18
    5426:	04 c0       	rjmp	.+8      	; 0x5430 <__lshrdi3+0x8e>
    5428:	b6 95       	lsr	r27
    542a:	a7 95       	ror	r26
    542c:	97 95       	ror	r25
    542e:	87 95       	ror	r24
    5430:	0a 94       	dec	r0
    5432:	d2 f7       	brpl	.-12     	; 0x5428 <__lshrdi3+0x86>
    5434:	8d 87       	std	Y+13, r24	; 0x0d
    5436:	9e 87       	std	Y+14, r25	; 0x0e
    5438:	af 87       	std	Y+15, r26	; 0x0f
    543a:	b8 8b       	std	Y+16, r27	; 0x10
    543c:	04 c0       	rjmp	.+8      	; 0x5446 <__lshrdi3+0xa4>
    543e:	44 0f       	add	r20, r20
    5440:	55 1f       	adc	r21, r21
    5442:	66 1f       	adc	r22, r22
    5444:	77 1f       	adc	r23, r23
    5446:	ea 95       	dec	r30
    5448:	d2 f7       	brpl	.-12     	; 0x543e <__lshrdi3+0x9c>
    544a:	89 81       	ldd	r24, Y+1	; 0x01
    544c:	9a 81       	ldd	r25, Y+2	; 0x02
    544e:	ab 81       	ldd	r26, Y+3	; 0x03
    5450:	bc 81       	ldd	r27, Y+4	; 0x04
    5452:	04 c0       	rjmp	.+8      	; 0x545c <__lshrdi3+0xba>
    5454:	b6 95       	lsr	r27
    5456:	a7 95       	ror	r26
    5458:	97 95       	ror	r25
    545a:	87 95       	ror	r24
    545c:	2a 95       	dec	r18
    545e:	d2 f7       	brpl	.-12     	; 0x5454 <__lshrdi3+0xb2>
    5460:	48 2b       	or	r20, r24
    5462:	59 2b       	or	r21, r25
    5464:	6a 2b       	or	r22, r26
    5466:	7b 2b       	or	r23, r27
    5468:	49 87       	std	Y+9, r20	; 0x09
    546a:	5a 87       	std	Y+10, r21	; 0x0a
    546c:	6b 87       	std	Y+11, r22	; 0x0b
    546e:	7c 87       	std	Y+12, r23	; 0x0c
    5470:	29 85       	ldd	r18, Y+9	; 0x09
    5472:	3a 85       	ldd	r19, Y+10	; 0x0a
    5474:	4b 85       	ldd	r20, Y+11	; 0x0b
    5476:	5c 85       	ldd	r21, Y+12	; 0x0c
    5478:	6d 85       	ldd	r22, Y+13	; 0x0d
    547a:	7e 85       	ldd	r23, Y+14	; 0x0e
    547c:	af 85       	ldd	r26, Y+15	; 0x0f
    547e:	98 89       	ldd	r25, Y+16	; 0x10
    5480:	8a 2f       	mov	r24, r26
    5482:	60 96       	adiw	r28, 0x10	; 16
    5484:	cd bf       	out	0x3d, r28	; 61
    5486:	de bf       	out	0x3e, r29	; 62
    5488:	cf 91       	pop	r28
    548a:	df 91       	pop	r29
    548c:	0f 91       	pop	r16
    548e:	ff 90       	pop	r15
    5490:	ef 90       	pop	r14
    5492:	08 95       	ret

00005494 <__ashldi3>:
    5494:	ef 92       	push	r14
    5496:	ff 92       	push	r15
    5498:	0f 93       	push	r16
    549a:	df 93       	push	r29
    549c:	cf 93       	push	r28
    549e:	cd b7       	in	r28, 0x3d	; 61
    54a0:	de b7       	in	r29, 0x3e	; 62
    54a2:	60 97       	sbiw	r28, 0x10	; 16
    54a4:	cd bf       	out	0x3d, r28	; 61
    54a6:	de bf       	out	0x3e, r29	; 62
    54a8:	a8 2f       	mov	r26, r24
    54aa:	00 23       	and	r16, r16
    54ac:	09 f4       	brne	.+2      	; 0x54b0 <__ashldi3+0x1c>
    54ae:	61 c0       	rjmp	.+194    	; 0x5572 <__ashldi3+0xde>
    54b0:	7e 01       	movw	r14, r28
    54b2:	08 94       	sec
    54b4:	e1 1c       	adc	r14, r1
    54b6:	f1 1c       	adc	r15, r1
    54b8:	88 e0       	ldi	r24, 0x08	; 8
    54ba:	f7 01       	movw	r30, r14
    54bc:	11 92       	st	Z+, r1
    54be:	8a 95       	dec	r24
    54c0:	e9 f7       	brne	.-6      	; 0x54bc <__ashldi3+0x28>
    54c2:	29 83       	std	Y+1, r18	; 0x01
    54c4:	3a 83       	std	Y+2, r19	; 0x02
    54c6:	4b 83       	std	Y+3, r20	; 0x03
    54c8:	5c 83       	std	Y+4, r21	; 0x04
    54ca:	6d 83       	std	Y+5, r22	; 0x05
    54cc:	7e 83       	std	Y+6, r23	; 0x06
    54ce:	af 83       	std	Y+7, r26	; 0x07
    54d0:	98 87       	std	Y+8, r25	; 0x08
    54d2:	80 e2       	ldi	r24, 0x20	; 32
    54d4:	80 1b       	sub	r24, r16
    54d6:	e8 2f       	mov	r30, r24
    54d8:	ff 27       	eor	r31, r31
    54da:	e7 fd       	sbrc	r30, 7
    54dc:	f0 95       	com	r31
    54de:	49 81       	ldd	r20, Y+1	; 0x01
    54e0:	5a 81       	ldd	r21, Y+2	; 0x02
    54e2:	6b 81       	ldd	r22, Y+3	; 0x03
    54e4:	7c 81       	ldd	r23, Y+4	; 0x04
    54e6:	18 16       	cp	r1, r24
    54e8:	84 f0       	brlt	.+32     	; 0x550a <__ashldi3+0x76>
    54ea:	19 86       	std	Y+9, r1	; 0x09
    54ec:	1a 86       	std	Y+10, r1	; 0x0a
    54ee:	1b 86       	std	Y+11, r1	; 0x0b
    54f0:	1c 86       	std	Y+12, r1	; 0x0c
    54f2:	88 27       	eor	r24, r24
    54f4:	99 27       	eor	r25, r25
    54f6:	8e 1b       	sub	r24, r30
    54f8:	9f 0b       	sbc	r25, r31
    54fa:	04 c0       	rjmp	.+8      	; 0x5504 <__ashldi3+0x70>
    54fc:	44 0f       	add	r20, r20
    54fe:	55 1f       	adc	r21, r21
    5500:	66 1f       	adc	r22, r22
    5502:	77 1f       	adc	r23, r23
    5504:	8a 95       	dec	r24
    5506:	d2 f7       	brpl	.-12     	; 0x54fc <__ashldi3+0x68>
    5508:	28 c0       	rjmp	.+80     	; 0x555a <__ashldi3+0xc6>
    550a:	20 2f       	mov	r18, r16
    550c:	33 27       	eor	r19, r19
    550e:	27 fd       	sbrc	r18, 7
    5510:	30 95       	com	r19
    5512:	db 01       	movw	r26, r22
    5514:	ca 01       	movw	r24, r20
    5516:	02 2e       	mov	r0, r18
    5518:	04 c0       	rjmp	.+8      	; 0x5522 <__ashldi3+0x8e>
    551a:	88 0f       	add	r24, r24
    551c:	99 1f       	adc	r25, r25
    551e:	aa 1f       	adc	r26, r26
    5520:	bb 1f       	adc	r27, r27
    5522:	0a 94       	dec	r0
    5524:	d2 f7       	brpl	.-12     	; 0x551a <__ashldi3+0x86>
    5526:	89 87       	std	Y+9, r24	; 0x09
    5528:	9a 87       	std	Y+10, r25	; 0x0a
    552a:	ab 87       	std	Y+11, r26	; 0x0b
    552c:	bc 87       	std	Y+12, r27	; 0x0c
    552e:	04 c0       	rjmp	.+8      	; 0x5538 <__ashldi3+0xa4>
    5530:	76 95       	lsr	r23
    5532:	67 95       	ror	r22
    5534:	57 95       	ror	r21
    5536:	47 95       	ror	r20
    5538:	ea 95       	dec	r30
    553a:	d2 f7       	brpl	.-12     	; 0x5530 <__ashldi3+0x9c>
    553c:	8d 81       	ldd	r24, Y+5	; 0x05
    553e:	9e 81       	ldd	r25, Y+6	; 0x06
    5540:	af 81       	ldd	r26, Y+7	; 0x07
    5542:	b8 85       	ldd	r27, Y+8	; 0x08
    5544:	04 c0       	rjmp	.+8      	; 0x554e <__ashldi3+0xba>
    5546:	88 0f       	add	r24, r24
    5548:	99 1f       	adc	r25, r25
    554a:	aa 1f       	adc	r26, r26
    554c:	bb 1f       	adc	r27, r27
    554e:	2a 95       	dec	r18
    5550:	d2 f7       	brpl	.-12     	; 0x5546 <__ashldi3+0xb2>
    5552:	48 2b       	or	r20, r24
    5554:	59 2b       	or	r21, r25
    5556:	6a 2b       	or	r22, r26
    5558:	7b 2b       	or	r23, r27
    555a:	4d 87       	std	Y+13, r20	; 0x0d
    555c:	5e 87       	std	Y+14, r21	; 0x0e
    555e:	6f 87       	std	Y+15, r22	; 0x0f
    5560:	78 8b       	std	Y+16, r23	; 0x10
    5562:	29 85       	ldd	r18, Y+9	; 0x09
    5564:	3a 85       	ldd	r19, Y+10	; 0x0a
    5566:	4b 85       	ldd	r20, Y+11	; 0x0b
    5568:	5c 85       	ldd	r21, Y+12	; 0x0c
    556a:	6d 85       	ldd	r22, Y+13	; 0x0d
    556c:	7e 85       	ldd	r23, Y+14	; 0x0e
    556e:	af 85       	ldd	r26, Y+15	; 0x0f
    5570:	98 89       	ldd	r25, Y+16	; 0x10
    5572:	8a 2f       	mov	r24, r26
    5574:	60 96       	adiw	r28, 0x10	; 16
    5576:	cd bf       	out	0x3d, r28	; 61
    5578:	de bf       	out	0x3e, r29	; 62
    557a:	cf 91       	pop	r28
    557c:	df 91       	pop	r29
    557e:	0f 91       	pop	r16
    5580:	ff 90       	pop	r15
    5582:	ef 90       	pop	r14
    5584:	08 95       	ret

00005586 <__udivdi3>:
    5586:	ae e5       	ldi	r26, 0x5E	; 94
    5588:	b0 e0       	ldi	r27, 0x00	; 0
    558a:	e9 ec       	ldi	r30, 0xC9	; 201
    558c:	fa e2       	ldi	r31, 0x2A	; 42
    558e:	0c 94 56 39 	jmp	0x72ac	; 0x72ac <__prologue_saves__>
    5592:	a8 e0       	ldi	r26, 0x08	; 8
    5594:	4e 01       	movw	r8, r28
    5596:	08 94       	sec
    5598:	81 1c       	adc	r8, r1
    559a:	91 1c       	adc	r9, r1
    559c:	f4 01       	movw	r30, r8
    559e:	6a 2e       	mov	r6, r26
    55a0:	11 92       	st	Z+, r1
    55a2:	6a 94       	dec	r6
    55a4:	e9 f7       	brne	.-6      	; 0x55a0 <__udivdi3+0x1a>
    55a6:	29 83       	std	Y+1, r18	; 0x01
    55a8:	3a 83       	std	Y+2, r19	; 0x02
    55aa:	4b 83       	std	Y+3, r20	; 0x03
    55ac:	5c 83       	std	Y+4, r21	; 0x04
    55ae:	6d 83       	std	Y+5, r22	; 0x05
    55b0:	7e 83       	std	Y+6, r23	; 0x06
    55b2:	8f 83       	std	Y+7, r24	; 0x07
    55b4:	98 87       	std	Y+8, r25	; 0x08
    55b6:	ce 01       	movw	r24, r28
    55b8:	09 96       	adiw	r24, 0x09	; 9
    55ba:	fc 01       	movw	r30, r24
    55bc:	11 92       	st	Z+, r1
    55be:	aa 95       	dec	r26
    55c0:	e9 f7       	brne	.-6      	; 0x55bc <__udivdi3+0x36>
    55c2:	a9 86       	std	Y+9, r10	; 0x09
    55c4:	ba 86       	std	Y+10, r11	; 0x0a
    55c6:	cb 86       	std	Y+11, r12	; 0x0b
    55c8:	dc 86       	std	Y+12, r13	; 0x0c
    55ca:	ed 86       	std	Y+13, r14	; 0x0d
    55cc:	fe 86       	std	Y+14, r15	; 0x0e
    55ce:	0f 87       	std	Y+15, r16	; 0x0f
    55d0:	18 8b       	std	Y+16, r17	; 0x10
    55d2:	29 84       	ldd	r2, Y+9	; 0x09
    55d4:	3a 84       	ldd	r3, Y+10	; 0x0a
    55d6:	4b 84       	ldd	r4, Y+11	; 0x0b
    55d8:	5c 84       	ldd	r5, Y+12	; 0x0c
    55da:	ed 84       	ldd	r14, Y+13	; 0x0d
    55dc:	fe 84       	ldd	r15, Y+14	; 0x0e
    55de:	0f 85       	ldd	r16, Y+15	; 0x0f
    55e0:	18 89       	ldd	r17, Y+16	; 0x10
    55e2:	69 80       	ldd	r6, Y+1	; 0x01
    55e4:	7a 80       	ldd	r7, Y+2	; 0x02
    55e6:	8b 80       	ldd	r8, Y+3	; 0x03
    55e8:	9c 80       	ldd	r9, Y+4	; 0x04
    55ea:	6d a6       	std	Y+45, r6	; 0x2d
    55ec:	7e a6       	std	Y+46, r7	; 0x2e
    55ee:	8f a6       	std	Y+47, r8	; 0x2f
    55f0:	98 aa       	std	Y+48, r9	; 0x30
    55f2:	6d 80       	ldd	r6, Y+5	; 0x05
    55f4:	7e 80       	ldd	r7, Y+6	; 0x06
    55f6:	8f 80       	ldd	r8, Y+7	; 0x07
    55f8:	98 84       	ldd	r9, Y+8	; 0x08
    55fa:	e1 14       	cp	r14, r1
    55fc:	f1 04       	cpc	r15, r1
    55fe:	01 05       	cpc	r16, r1
    5600:	11 05       	cpc	r17, r1
    5602:	09 f0       	breq	.+2      	; 0x5606 <__udivdi3+0x80>
    5604:	b3 c3       	rjmp	.+1894   	; 0x5d6c <__udivdi3+0x7e6>
    5606:	62 14       	cp	r6, r2
    5608:	73 04       	cpc	r7, r3
    560a:	84 04       	cpc	r8, r4
    560c:	95 04       	cpc	r9, r5
    560e:	08 f0       	brcs	.+2      	; 0x5612 <__udivdi3+0x8c>
    5610:	3d c1       	rjmp	.+634    	; 0x588c <__udivdi3+0x306>
    5612:	00 e0       	ldi	r16, 0x00	; 0
    5614:	20 16       	cp	r2, r16
    5616:	00 e0       	ldi	r16, 0x00	; 0
    5618:	30 06       	cpc	r3, r16
    561a:	01 e0       	ldi	r16, 0x01	; 1
    561c:	40 06       	cpc	r4, r16
    561e:	00 e0       	ldi	r16, 0x00	; 0
    5620:	50 06       	cpc	r5, r16
    5622:	88 f4       	brcc	.+34     	; 0x5646 <__udivdi3+0xc0>
    5624:	1f ef       	ldi	r17, 0xFF	; 255
    5626:	21 16       	cp	r2, r17
    5628:	31 04       	cpc	r3, r1
    562a:	41 04       	cpc	r4, r1
    562c:	51 04       	cpc	r5, r1
    562e:	39 f0       	breq	.+14     	; 0x563e <__udivdi3+0xb8>
    5630:	30 f0       	brcs	.+12     	; 0x563e <__udivdi3+0xb8>
    5632:	48 e0       	ldi	r20, 0x08	; 8
    5634:	e4 2e       	mov	r14, r20
    5636:	f1 2c       	mov	r15, r1
    5638:	01 2d       	mov	r16, r1
    563a:	11 2d       	mov	r17, r1
    563c:	18 c0       	rjmp	.+48     	; 0x566e <__udivdi3+0xe8>
    563e:	ee 24       	eor	r14, r14
    5640:	ff 24       	eor	r15, r15
    5642:	87 01       	movw	r16, r14
    5644:	14 c0       	rjmp	.+40     	; 0x566e <__udivdi3+0xe8>
    5646:	20 e0       	ldi	r18, 0x00	; 0
    5648:	22 16       	cp	r2, r18
    564a:	20 e0       	ldi	r18, 0x00	; 0
    564c:	32 06       	cpc	r3, r18
    564e:	20 e0       	ldi	r18, 0x00	; 0
    5650:	42 06       	cpc	r4, r18
    5652:	21 e0       	ldi	r18, 0x01	; 1
    5654:	52 06       	cpc	r5, r18
    5656:	30 f0       	brcs	.+12     	; 0x5664 <__udivdi3+0xde>
    5658:	38 e1       	ldi	r19, 0x18	; 24
    565a:	e3 2e       	mov	r14, r19
    565c:	f1 2c       	mov	r15, r1
    565e:	01 2d       	mov	r16, r1
    5660:	11 2d       	mov	r17, r1
    5662:	05 c0       	rjmp	.+10     	; 0x566e <__udivdi3+0xe8>
    5664:	20 e1       	ldi	r18, 0x10	; 16
    5666:	e2 2e       	mov	r14, r18
    5668:	f1 2c       	mov	r15, r1
    566a:	01 2d       	mov	r16, r1
    566c:	11 2d       	mov	r17, r1
    566e:	d2 01       	movw	r26, r4
    5670:	c1 01       	movw	r24, r2
    5672:	0e 2c       	mov	r0, r14
    5674:	04 c0       	rjmp	.+8      	; 0x567e <__udivdi3+0xf8>
    5676:	b6 95       	lsr	r27
    5678:	a7 95       	ror	r26
    567a:	97 95       	ror	r25
    567c:	87 95       	ror	r24
    567e:	0a 94       	dec	r0
    5680:	d2 f7       	brpl	.-12     	; 0x5676 <__udivdi3+0xf0>
    5682:	81 5f       	subi	r24, 0xF1	; 241
    5684:	9f 4d       	sbci	r25, 0xDF	; 223
    5686:	dc 01       	movw	r26, r24
    5688:	2c 91       	ld	r18, X
    568a:	80 e2       	ldi	r24, 0x20	; 32
    568c:	90 e0       	ldi	r25, 0x00	; 0
    568e:	a0 e0       	ldi	r26, 0x00	; 0
    5690:	b0 e0       	ldi	r27, 0x00	; 0
    5692:	8e 19       	sub	r24, r14
    5694:	9f 09       	sbc	r25, r15
    5696:	a0 0b       	sbc	r26, r16
    5698:	b1 0b       	sbc	r27, r17
    569a:	7c 01       	movw	r14, r24
    569c:	8d 01       	movw	r16, r26
    569e:	e2 1a       	sub	r14, r18
    56a0:	f1 08       	sbc	r15, r1
    56a2:	01 09       	sbc	r16, r1
    56a4:	11 09       	sbc	r17, r1
    56a6:	e1 14       	cp	r14, r1
    56a8:	f1 04       	cpc	r15, r1
    56aa:	01 05       	cpc	r16, r1
    56ac:	11 05       	cpc	r17, r1
    56ae:	a1 f1       	breq	.+104    	; 0x5718 <__udivdi3+0x192>
    56b0:	0e 2c       	mov	r0, r14
    56b2:	04 c0       	rjmp	.+8      	; 0x56bc <__udivdi3+0x136>
    56b4:	22 0c       	add	r2, r2
    56b6:	33 1c       	adc	r3, r3
    56b8:	44 1c       	adc	r4, r4
    56ba:	55 1c       	adc	r5, r5
    56bc:	0a 94       	dec	r0
    56be:	d2 f7       	brpl	.-12     	; 0x56b4 <__udivdi3+0x12e>
    56c0:	a4 01       	movw	r20, r8
    56c2:	93 01       	movw	r18, r6
    56c4:	0e 2c       	mov	r0, r14
    56c6:	04 c0       	rjmp	.+8      	; 0x56d0 <__udivdi3+0x14a>
    56c8:	22 0f       	add	r18, r18
    56ca:	33 1f       	adc	r19, r19
    56cc:	44 1f       	adc	r20, r20
    56ce:	55 1f       	adc	r21, r21
    56d0:	0a 94       	dec	r0
    56d2:	d2 f7       	brpl	.-12     	; 0x56c8 <__udivdi3+0x142>
    56d4:	80 e2       	ldi	r24, 0x20	; 32
    56d6:	90 e0       	ldi	r25, 0x00	; 0
    56d8:	8e 19       	sub	r24, r14
    56da:	9f 09       	sbc	r25, r15
    56dc:	6d a4       	ldd	r6, Y+45	; 0x2d
    56de:	7e a4       	ldd	r7, Y+46	; 0x2e
    56e0:	8f a4       	ldd	r8, Y+47	; 0x2f
    56e2:	98 a8       	ldd	r9, Y+48	; 0x30
    56e4:	04 c0       	rjmp	.+8      	; 0x56ee <__udivdi3+0x168>
    56e6:	96 94       	lsr	r9
    56e8:	87 94       	ror	r8
    56ea:	77 94       	ror	r7
    56ec:	67 94       	ror	r6
    56ee:	8a 95       	dec	r24
    56f0:	d2 f7       	brpl	.-12     	; 0x56e6 <__udivdi3+0x160>
    56f2:	62 2a       	or	r6, r18
    56f4:	73 2a       	or	r7, r19
    56f6:	84 2a       	or	r8, r20
    56f8:	95 2a       	or	r9, r21
    56fa:	ad a4       	ldd	r10, Y+45	; 0x2d
    56fc:	be a4       	ldd	r11, Y+46	; 0x2e
    56fe:	cf a4       	ldd	r12, Y+47	; 0x2f
    5700:	d8 a8       	ldd	r13, Y+48	; 0x30
    5702:	04 c0       	rjmp	.+8      	; 0x570c <__udivdi3+0x186>
    5704:	aa 0c       	add	r10, r10
    5706:	bb 1c       	adc	r11, r11
    5708:	cc 1c       	adc	r12, r12
    570a:	dd 1c       	adc	r13, r13
    570c:	ea 94       	dec	r14
    570e:	d2 f7       	brpl	.-12     	; 0x5704 <__udivdi3+0x17e>
    5710:	ad a6       	std	Y+45, r10	; 0x2d
    5712:	be a6       	std	Y+46, r11	; 0x2e
    5714:	cf a6       	std	Y+47, r12	; 0x2f
    5716:	d8 aa       	std	Y+48, r13	; 0x30
    5718:	62 01       	movw	r12, r4
    571a:	ee 24       	eor	r14, r14
    571c:	ff 24       	eor	r15, r15
    571e:	cd aa       	std	Y+53, r12	; 0x35
    5720:	de aa       	std	Y+54, r13	; 0x36
    5722:	ef aa       	std	Y+55, r14	; 0x37
    5724:	f8 ae       	std	Y+56, r15	; 0x38
    5726:	92 01       	movw	r18, r4
    5728:	81 01       	movw	r16, r2
    572a:	20 70       	andi	r18, 0x00	; 0
    572c:	30 70       	andi	r19, 0x00	; 0
    572e:	09 af       	std	Y+57, r16	; 0x39
    5730:	1a af       	std	Y+58, r17	; 0x3a
    5732:	2b af       	std	Y+59, r18	; 0x3b
    5734:	3c af       	std	Y+60, r19	; 0x3c
    5736:	c4 01       	movw	r24, r8
    5738:	b3 01       	movw	r22, r6
    573a:	a7 01       	movw	r20, r14
    573c:	96 01       	movw	r18, r12
    573e:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    5742:	7b 01       	movw	r14, r22
    5744:	8c 01       	movw	r16, r24
    5746:	c4 01       	movw	r24, r8
    5748:	b3 01       	movw	r22, r6
    574a:	2d a9       	ldd	r18, Y+53	; 0x35
    574c:	3e a9       	ldd	r19, Y+54	; 0x36
    574e:	4f a9       	ldd	r20, Y+55	; 0x37
    5750:	58 ad       	ldd	r21, Y+56	; 0x38
    5752:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    5756:	c9 01       	movw	r24, r18
    5758:	da 01       	movw	r26, r20
    575a:	3c 01       	movw	r6, r24
    575c:	4d 01       	movw	r8, r26
    575e:	c4 01       	movw	r24, r8
    5760:	b3 01       	movw	r22, r6
    5762:	29 ad       	ldd	r18, Y+57	; 0x39
    5764:	3a ad       	ldd	r19, Y+58	; 0x3a
    5766:	4b ad       	ldd	r20, Y+59	; 0x3b
    5768:	5c ad       	ldd	r21, Y+60	; 0x3c
    576a:	0e 94 15 39 	call	0x722a	; 0x722a <__mulsi3>
    576e:	9b 01       	movw	r18, r22
    5770:	ac 01       	movw	r20, r24
    5772:	87 01       	movw	r16, r14
    5774:	ff 24       	eor	r15, r15
    5776:	ee 24       	eor	r14, r14
    5778:	ad a4       	ldd	r10, Y+45	; 0x2d
    577a:	be a4       	ldd	r11, Y+46	; 0x2e
    577c:	cf a4       	ldd	r12, Y+47	; 0x2f
    577e:	d8 a8       	ldd	r13, Y+48	; 0x30
    5780:	c6 01       	movw	r24, r12
    5782:	aa 27       	eor	r26, r26
    5784:	bb 27       	eor	r27, r27
    5786:	57 01       	movw	r10, r14
    5788:	68 01       	movw	r12, r16
    578a:	a8 2a       	or	r10, r24
    578c:	b9 2a       	or	r11, r25
    578e:	ca 2a       	or	r12, r26
    5790:	db 2a       	or	r13, r27
    5792:	a2 16       	cp	r10, r18
    5794:	b3 06       	cpc	r11, r19
    5796:	c4 06       	cpc	r12, r20
    5798:	d5 06       	cpc	r13, r21
    579a:	e0 f4       	brcc	.+56     	; 0x57d4 <__udivdi3+0x24e>
    579c:	08 94       	sec
    579e:	61 08       	sbc	r6, r1
    57a0:	71 08       	sbc	r7, r1
    57a2:	81 08       	sbc	r8, r1
    57a4:	91 08       	sbc	r9, r1
    57a6:	a2 0c       	add	r10, r2
    57a8:	b3 1c       	adc	r11, r3
    57aa:	c4 1c       	adc	r12, r4
    57ac:	d5 1c       	adc	r13, r5
    57ae:	a2 14       	cp	r10, r2
    57b0:	b3 04       	cpc	r11, r3
    57b2:	c4 04       	cpc	r12, r4
    57b4:	d5 04       	cpc	r13, r5
    57b6:	70 f0       	brcs	.+28     	; 0x57d4 <__udivdi3+0x24e>
    57b8:	a2 16       	cp	r10, r18
    57ba:	b3 06       	cpc	r11, r19
    57bc:	c4 06       	cpc	r12, r20
    57be:	d5 06       	cpc	r13, r21
    57c0:	48 f4       	brcc	.+18     	; 0x57d4 <__udivdi3+0x24e>
    57c2:	08 94       	sec
    57c4:	61 08       	sbc	r6, r1
    57c6:	71 08       	sbc	r7, r1
    57c8:	81 08       	sbc	r8, r1
    57ca:	91 08       	sbc	r9, r1
    57cc:	a2 0c       	add	r10, r2
    57ce:	b3 1c       	adc	r11, r3
    57d0:	c4 1c       	adc	r12, r4
    57d2:	d5 1c       	adc	r13, r5
    57d4:	a2 1a       	sub	r10, r18
    57d6:	b3 0a       	sbc	r11, r19
    57d8:	c4 0a       	sbc	r12, r20
    57da:	d5 0a       	sbc	r13, r21
    57dc:	c6 01       	movw	r24, r12
    57de:	b5 01       	movw	r22, r10
    57e0:	2d a9       	ldd	r18, Y+53	; 0x35
    57e2:	3e a9       	ldd	r19, Y+54	; 0x36
    57e4:	4f a9       	ldd	r20, Y+55	; 0x37
    57e6:	58 ad       	ldd	r21, Y+56	; 0x38
    57e8:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    57ec:	7b 01       	movw	r14, r22
    57ee:	8c 01       	movw	r16, r24
    57f0:	c6 01       	movw	r24, r12
    57f2:	b5 01       	movw	r22, r10
    57f4:	2d a9       	ldd	r18, Y+53	; 0x35
    57f6:	3e a9       	ldd	r19, Y+54	; 0x36
    57f8:	4f a9       	ldd	r20, Y+55	; 0x37
    57fa:	58 ad       	ldd	r21, Y+56	; 0x38
    57fc:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    5800:	c9 01       	movw	r24, r18
    5802:	da 01       	movw	r26, r20
    5804:	5c 01       	movw	r10, r24
    5806:	6d 01       	movw	r12, r26
    5808:	c6 01       	movw	r24, r12
    580a:	b5 01       	movw	r22, r10
    580c:	29 ad       	ldd	r18, Y+57	; 0x39
    580e:	3a ad       	ldd	r19, Y+58	; 0x3a
    5810:	4b ad       	ldd	r20, Y+59	; 0x3b
    5812:	5c ad       	ldd	r21, Y+60	; 0x3c
    5814:	0e 94 15 39 	call	0x722a	; 0x722a <__mulsi3>
    5818:	9b 01       	movw	r18, r22
    581a:	ac 01       	movw	r20, r24
    581c:	87 01       	movw	r16, r14
    581e:	ff 24       	eor	r15, r15
    5820:	ee 24       	eor	r14, r14
    5822:	8d a5       	ldd	r24, Y+45	; 0x2d
    5824:	9e a5       	ldd	r25, Y+46	; 0x2e
    5826:	af a5       	ldd	r26, Y+47	; 0x2f
    5828:	b8 a9       	ldd	r27, Y+48	; 0x30
    582a:	a0 70       	andi	r26, 0x00	; 0
    582c:	b0 70       	andi	r27, 0x00	; 0
    582e:	e8 2a       	or	r14, r24
    5830:	f9 2a       	or	r15, r25
    5832:	0a 2b       	or	r16, r26
    5834:	1b 2b       	or	r17, r27
    5836:	e2 16       	cp	r14, r18
    5838:	f3 06       	cpc	r15, r19
    583a:	04 07       	cpc	r16, r20
    583c:	15 07       	cpc	r17, r21
    583e:	c0 f4       	brcc	.+48     	; 0x5870 <__udivdi3+0x2ea>
    5840:	08 94       	sec
    5842:	a1 08       	sbc	r10, r1
    5844:	b1 08       	sbc	r11, r1
    5846:	c1 08       	sbc	r12, r1
    5848:	d1 08       	sbc	r13, r1
    584a:	e2 0c       	add	r14, r2
    584c:	f3 1c       	adc	r15, r3
    584e:	04 1d       	adc	r16, r4
    5850:	15 1d       	adc	r17, r5
    5852:	e2 14       	cp	r14, r2
    5854:	f3 04       	cpc	r15, r3
    5856:	04 05       	cpc	r16, r4
    5858:	15 05       	cpc	r17, r5
    585a:	50 f0       	brcs	.+20     	; 0x5870 <__udivdi3+0x2ea>
    585c:	e2 16       	cp	r14, r18
    585e:	f3 06       	cpc	r15, r19
    5860:	04 07       	cpc	r16, r20
    5862:	15 07       	cpc	r17, r21
    5864:	28 f4       	brcc	.+10     	; 0x5870 <__udivdi3+0x2ea>
    5866:	08 94       	sec
    5868:	a1 08       	sbc	r10, r1
    586a:	b1 08       	sbc	r11, r1
    586c:	c1 08       	sbc	r12, r1
    586e:	d1 08       	sbc	r13, r1
    5870:	d3 01       	movw	r26, r6
    5872:	99 27       	eor	r25, r25
    5874:	88 27       	eor	r24, r24
    5876:	86 01       	movw	r16, r12
    5878:	75 01       	movw	r14, r10
    587a:	e8 2a       	or	r14, r24
    587c:	f9 2a       	or	r15, r25
    587e:	0a 2b       	or	r16, r26
    5880:	1b 2b       	or	r17, r27
    5882:	e9 aa       	std	Y+49, r14	; 0x31
    5884:	fa aa       	std	Y+50, r15	; 0x32
    5886:	0b ab       	std	Y+51, r16	; 0x33
    5888:	1c ab       	std	Y+52, r17	; 0x34
    588a:	cf c4       	rjmp	.+2462   	; 0x622a <__stack+0x22b>
    588c:	21 14       	cp	r2, r1
    588e:	31 04       	cpc	r3, r1
    5890:	41 04       	cpc	r4, r1
    5892:	51 04       	cpc	r5, r1
    5894:	71 f4       	brne	.+28     	; 0x58b2 <__udivdi3+0x32c>
    5896:	61 e0       	ldi	r22, 0x01	; 1
    5898:	70 e0       	ldi	r23, 0x00	; 0
    589a:	80 e0       	ldi	r24, 0x00	; 0
    589c:	90 e0       	ldi	r25, 0x00	; 0
    589e:	20 e0       	ldi	r18, 0x00	; 0
    58a0:	30 e0       	ldi	r19, 0x00	; 0
    58a2:	40 e0       	ldi	r20, 0x00	; 0
    58a4:	50 e0       	ldi	r21, 0x00	; 0
    58a6:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    58aa:	c9 01       	movw	r24, r18
    58ac:	da 01       	movw	r26, r20
    58ae:	1c 01       	movw	r2, r24
    58b0:	2d 01       	movw	r4, r26
    58b2:	00 e0       	ldi	r16, 0x00	; 0
    58b4:	20 16       	cp	r2, r16
    58b6:	00 e0       	ldi	r16, 0x00	; 0
    58b8:	30 06       	cpc	r3, r16
    58ba:	01 e0       	ldi	r16, 0x01	; 1
    58bc:	40 06       	cpc	r4, r16
    58be:	00 e0       	ldi	r16, 0x00	; 0
    58c0:	50 06       	cpc	r5, r16
    58c2:	88 f4       	brcc	.+34     	; 0x58e6 <__udivdi3+0x360>
    58c4:	1f ef       	ldi	r17, 0xFF	; 255
    58c6:	21 16       	cp	r2, r17
    58c8:	31 04       	cpc	r3, r1
    58ca:	41 04       	cpc	r4, r1
    58cc:	51 04       	cpc	r5, r1
    58ce:	31 f0       	breq	.+12     	; 0x58dc <__udivdi3+0x356>
    58d0:	28 f0       	brcs	.+10     	; 0x58dc <__udivdi3+0x356>
    58d2:	48 e0       	ldi	r20, 0x08	; 8
    58d4:	50 e0       	ldi	r21, 0x00	; 0
    58d6:	60 e0       	ldi	r22, 0x00	; 0
    58d8:	70 e0       	ldi	r23, 0x00	; 0
    58da:	17 c0       	rjmp	.+46     	; 0x590a <__udivdi3+0x384>
    58dc:	40 e0       	ldi	r20, 0x00	; 0
    58de:	50 e0       	ldi	r21, 0x00	; 0
    58e0:	60 e0       	ldi	r22, 0x00	; 0
    58e2:	70 e0       	ldi	r23, 0x00	; 0
    58e4:	12 c0       	rjmp	.+36     	; 0x590a <__udivdi3+0x384>
    58e6:	20 e0       	ldi	r18, 0x00	; 0
    58e8:	22 16       	cp	r2, r18
    58ea:	20 e0       	ldi	r18, 0x00	; 0
    58ec:	32 06       	cpc	r3, r18
    58ee:	20 e0       	ldi	r18, 0x00	; 0
    58f0:	42 06       	cpc	r4, r18
    58f2:	21 e0       	ldi	r18, 0x01	; 1
    58f4:	52 06       	cpc	r5, r18
    58f6:	28 f0       	brcs	.+10     	; 0x5902 <__udivdi3+0x37c>
    58f8:	48 e1       	ldi	r20, 0x18	; 24
    58fa:	50 e0       	ldi	r21, 0x00	; 0
    58fc:	60 e0       	ldi	r22, 0x00	; 0
    58fe:	70 e0       	ldi	r23, 0x00	; 0
    5900:	04 c0       	rjmp	.+8      	; 0x590a <__udivdi3+0x384>
    5902:	40 e1       	ldi	r20, 0x10	; 16
    5904:	50 e0       	ldi	r21, 0x00	; 0
    5906:	60 e0       	ldi	r22, 0x00	; 0
    5908:	70 e0       	ldi	r23, 0x00	; 0
    590a:	d2 01       	movw	r26, r4
    590c:	c1 01       	movw	r24, r2
    590e:	04 2e       	mov	r0, r20
    5910:	04 c0       	rjmp	.+8      	; 0x591a <__udivdi3+0x394>
    5912:	b6 95       	lsr	r27
    5914:	a7 95       	ror	r26
    5916:	97 95       	ror	r25
    5918:	87 95       	ror	r24
    591a:	0a 94       	dec	r0
    591c:	d2 f7       	brpl	.-12     	; 0x5912 <__udivdi3+0x38c>
    591e:	81 5f       	subi	r24, 0xF1	; 241
    5920:	9f 4d       	sbci	r25, 0xDF	; 223
    5922:	dc 01       	movw	r26, r24
    5924:	2c 91       	ld	r18, X
    5926:	e0 e2       	ldi	r30, 0x20	; 32
    5928:	ee 2e       	mov	r14, r30
    592a:	f1 2c       	mov	r15, r1
    592c:	01 2d       	mov	r16, r1
    592e:	11 2d       	mov	r17, r1
    5930:	d8 01       	movw	r26, r16
    5932:	c7 01       	movw	r24, r14
    5934:	84 1b       	sub	r24, r20
    5936:	95 0b       	sbc	r25, r21
    5938:	a6 0b       	sbc	r26, r22
    593a:	b7 0b       	sbc	r27, r23
    593c:	82 1b       	sub	r24, r18
    593e:	91 09       	sbc	r25, r1
    5940:	a1 09       	sbc	r26, r1
    5942:	b1 09       	sbc	r27, r1
    5944:	00 97       	sbiw	r24, 0x00	; 0
    5946:	a1 05       	cpc	r26, r1
    5948:	b1 05       	cpc	r27, r1
    594a:	61 f4       	brne	.+24     	; 0x5964 <__udivdi3+0x3de>
    594c:	64 01       	movw	r12, r8
    594e:	53 01       	movw	r10, r6
    5950:	a2 18       	sub	r10, r2
    5952:	b3 08       	sbc	r11, r3
    5954:	c4 08       	sbc	r12, r4
    5956:	d5 08       	sbc	r13, r5
    5958:	31 e0       	ldi	r19, 0x01	; 1
    595a:	63 2e       	mov	r6, r19
    595c:	71 2c       	mov	r7, r1
    595e:	81 2c       	mov	r8, r1
    5960:	91 2c       	mov	r9, r1
    5962:	1e c1       	rjmp	.+572    	; 0x5ba0 <__udivdi3+0x61a>
    5964:	6f 96       	adiw	r28, 0x1f	; 31
    5966:	8f af       	std	Y+63, r24	; 0x3f
    5968:	6f 97       	sbiw	r28, 0x1f	; 31
    596a:	08 2e       	mov	r0, r24
    596c:	04 c0       	rjmp	.+8      	; 0x5976 <__udivdi3+0x3f0>
    596e:	22 0c       	add	r2, r2
    5970:	33 1c       	adc	r3, r3
    5972:	44 1c       	adc	r4, r4
    5974:	55 1c       	adc	r5, r5
    5976:	0a 94       	dec	r0
    5978:	d2 f7       	brpl	.-12     	; 0x596e <__udivdi3+0x3e8>
    597a:	ee 2d       	mov	r30, r14
    597c:	e8 1b       	sub	r30, r24
    597e:	64 01       	movw	r12, r8
    5980:	53 01       	movw	r10, r6
    5982:	0e 2e       	mov	r0, r30
    5984:	04 c0       	rjmp	.+8      	; 0x598e <__udivdi3+0x408>
    5986:	d6 94       	lsr	r13
    5988:	c7 94       	ror	r12
    598a:	b7 94       	ror	r11
    598c:	a7 94       	ror	r10
    598e:	0a 94       	dec	r0
    5990:	d2 f7       	brpl	.-12     	; 0x5986 <__udivdi3+0x400>
    5992:	a4 01       	movw	r20, r8
    5994:	93 01       	movw	r18, r6
    5996:	6f 96       	adiw	r28, 0x1f	; 31
    5998:	0f ac       	ldd	r0, Y+63	; 0x3f
    599a:	6f 97       	sbiw	r28, 0x1f	; 31
    599c:	04 c0       	rjmp	.+8      	; 0x59a6 <__udivdi3+0x420>
    599e:	22 0f       	add	r18, r18
    59a0:	33 1f       	adc	r19, r19
    59a2:	44 1f       	adc	r20, r20
    59a4:	55 1f       	adc	r21, r21
    59a6:	0a 94       	dec	r0
    59a8:	d2 f7       	brpl	.-12     	; 0x599e <__udivdi3+0x418>
    59aa:	6d a4       	ldd	r6, Y+45	; 0x2d
    59ac:	7e a4       	ldd	r7, Y+46	; 0x2e
    59ae:	8f a4       	ldd	r8, Y+47	; 0x2f
    59b0:	98 a8       	ldd	r9, Y+48	; 0x30
    59b2:	0e 2e       	mov	r0, r30
    59b4:	04 c0       	rjmp	.+8      	; 0x59be <__udivdi3+0x438>
    59b6:	96 94       	lsr	r9
    59b8:	87 94       	ror	r8
    59ba:	77 94       	ror	r7
    59bc:	67 94       	ror	r6
    59be:	0a 94       	dec	r0
    59c0:	d2 f7       	brpl	.-12     	; 0x59b6 <__udivdi3+0x430>
    59c2:	84 01       	movw	r16, r8
    59c4:	73 01       	movw	r14, r6
    59c6:	e2 2a       	or	r14, r18
    59c8:	f3 2a       	or	r15, r19
    59ca:	04 2b       	or	r16, r20
    59cc:	15 2b       	or	r17, r21
    59ce:	e9 a6       	std	Y+41, r14	; 0x29
    59d0:	fa a6       	std	Y+42, r15	; 0x2a
    59d2:	0b a7       	std	Y+43, r16	; 0x2b
    59d4:	1c a7       	std	Y+44, r17	; 0x2c
    59d6:	32 01       	movw	r6, r4
    59d8:	88 24       	eor	r8, r8
    59da:	99 24       	eor	r9, r9
    59dc:	92 01       	movw	r18, r4
    59de:	81 01       	movw	r16, r2
    59e0:	20 70       	andi	r18, 0x00	; 0
    59e2:	30 70       	andi	r19, 0x00	; 0
    59e4:	21 96       	adiw	r28, 0x01	; 1
    59e6:	0c af       	std	Y+60, r16	; 0x3c
    59e8:	1d af       	std	Y+61, r17	; 0x3d
    59ea:	2e af       	std	Y+62, r18	; 0x3e
    59ec:	3f af       	std	Y+63, r19	; 0x3f
    59ee:	21 97       	sbiw	r28, 0x01	; 1
    59f0:	c6 01       	movw	r24, r12
    59f2:	b5 01       	movw	r22, r10
    59f4:	a4 01       	movw	r20, r8
    59f6:	93 01       	movw	r18, r6
    59f8:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    59fc:	7b 01       	movw	r14, r22
    59fe:	8c 01       	movw	r16, r24
    5a00:	c6 01       	movw	r24, r12
    5a02:	b5 01       	movw	r22, r10
    5a04:	a4 01       	movw	r20, r8
    5a06:	93 01       	movw	r18, r6
    5a08:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    5a0c:	c9 01       	movw	r24, r18
    5a0e:	da 01       	movw	r26, r20
    5a10:	25 96       	adiw	r28, 0x05	; 5
    5a12:	8c af       	std	Y+60, r24	; 0x3c
    5a14:	9d af       	std	Y+61, r25	; 0x3d
    5a16:	ae af       	std	Y+62, r26	; 0x3e
    5a18:	bf af       	std	Y+63, r27	; 0x3f
    5a1a:	25 97       	sbiw	r28, 0x05	; 5
    5a1c:	bc 01       	movw	r22, r24
    5a1e:	cd 01       	movw	r24, r26
    5a20:	21 96       	adiw	r28, 0x01	; 1
    5a22:	2c ad       	ldd	r18, Y+60	; 0x3c
    5a24:	3d ad       	ldd	r19, Y+61	; 0x3d
    5a26:	4e ad       	ldd	r20, Y+62	; 0x3e
    5a28:	5f ad       	ldd	r21, Y+63	; 0x3f
    5a2a:	21 97       	sbiw	r28, 0x01	; 1
    5a2c:	0e 94 15 39 	call	0x722a	; 0x722a <__mulsi3>
    5a30:	9b 01       	movw	r18, r22
    5a32:	ac 01       	movw	r20, r24
    5a34:	87 01       	movw	r16, r14
    5a36:	ff 24       	eor	r15, r15
    5a38:	ee 24       	eor	r14, r14
    5a3a:	a9 a4       	ldd	r10, Y+41	; 0x29
    5a3c:	ba a4       	ldd	r11, Y+42	; 0x2a
    5a3e:	cb a4       	ldd	r12, Y+43	; 0x2b
    5a40:	dc a4       	ldd	r13, Y+44	; 0x2c
    5a42:	c6 01       	movw	r24, r12
    5a44:	aa 27       	eor	r26, r26
    5a46:	bb 27       	eor	r27, r27
    5a48:	5c 01       	movw	r10, r24
    5a4a:	6d 01       	movw	r12, r26
    5a4c:	ae 28       	or	r10, r14
    5a4e:	bf 28       	or	r11, r15
    5a50:	c0 2a       	or	r12, r16
    5a52:	d1 2a       	or	r13, r17
    5a54:	a2 16       	cp	r10, r18
    5a56:	b3 06       	cpc	r11, r19
    5a58:	c4 06       	cpc	r12, r20
    5a5a:	d5 06       	cpc	r13, r21
    5a5c:	60 f5       	brcc	.+88     	; 0x5ab6 <__udivdi3+0x530>
    5a5e:	25 96       	adiw	r28, 0x05	; 5
    5a60:	6c ad       	ldd	r22, Y+60	; 0x3c
    5a62:	7d ad       	ldd	r23, Y+61	; 0x3d
    5a64:	8e ad       	ldd	r24, Y+62	; 0x3e
    5a66:	9f ad       	ldd	r25, Y+63	; 0x3f
    5a68:	25 97       	sbiw	r28, 0x05	; 5
    5a6a:	61 50       	subi	r22, 0x01	; 1
    5a6c:	70 40       	sbci	r23, 0x00	; 0
    5a6e:	80 40       	sbci	r24, 0x00	; 0
    5a70:	90 40       	sbci	r25, 0x00	; 0
    5a72:	25 96       	adiw	r28, 0x05	; 5
    5a74:	6c af       	std	Y+60, r22	; 0x3c
    5a76:	7d af       	std	Y+61, r23	; 0x3d
    5a78:	8e af       	std	Y+62, r24	; 0x3e
    5a7a:	9f af       	std	Y+63, r25	; 0x3f
    5a7c:	25 97       	sbiw	r28, 0x05	; 5
    5a7e:	a2 0c       	add	r10, r2
    5a80:	b3 1c       	adc	r11, r3
    5a82:	c4 1c       	adc	r12, r4
    5a84:	d5 1c       	adc	r13, r5
    5a86:	a2 14       	cp	r10, r2
    5a88:	b3 04       	cpc	r11, r3
    5a8a:	c4 04       	cpc	r12, r4
    5a8c:	d5 04       	cpc	r13, r5
    5a8e:	98 f0       	brcs	.+38     	; 0x5ab6 <__udivdi3+0x530>
    5a90:	a2 16       	cp	r10, r18
    5a92:	b3 06       	cpc	r11, r19
    5a94:	c4 06       	cpc	r12, r20
    5a96:	d5 06       	cpc	r13, r21
    5a98:	70 f4       	brcc	.+28     	; 0x5ab6 <__udivdi3+0x530>
    5a9a:	61 50       	subi	r22, 0x01	; 1
    5a9c:	70 40       	sbci	r23, 0x00	; 0
    5a9e:	80 40       	sbci	r24, 0x00	; 0
    5aa0:	90 40       	sbci	r25, 0x00	; 0
    5aa2:	25 96       	adiw	r28, 0x05	; 5
    5aa4:	6c af       	std	Y+60, r22	; 0x3c
    5aa6:	7d af       	std	Y+61, r23	; 0x3d
    5aa8:	8e af       	std	Y+62, r24	; 0x3e
    5aaa:	9f af       	std	Y+63, r25	; 0x3f
    5aac:	25 97       	sbiw	r28, 0x05	; 5
    5aae:	a2 0c       	add	r10, r2
    5ab0:	b3 1c       	adc	r11, r3
    5ab2:	c4 1c       	adc	r12, r4
    5ab4:	d5 1c       	adc	r13, r5
    5ab6:	a2 1a       	sub	r10, r18
    5ab8:	b3 0a       	sbc	r11, r19
    5aba:	c4 0a       	sbc	r12, r20
    5abc:	d5 0a       	sbc	r13, r21
    5abe:	c6 01       	movw	r24, r12
    5ac0:	b5 01       	movw	r22, r10
    5ac2:	a4 01       	movw	r20, r8
    5ac4:	93 01       	movw	r18, r6
    5ac6:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    5aca:	7b 01       	movw	r14, r22
    5acc:	8c 01       	movw	r16, r24
    5ace:	c6 01       	movw	r24, r12
    5ad0:	b5 01       	movw	r22, r10
    5ad2:	a4 01       	movw	r20, r8
    5ad4:	93 01       	movw	r18, r6
    5ad6:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    5ada:	c9 01       	movw	r24, r18
    5adc:	da 01       	movw	r26, r20
    5ade:	3c 01       	movw	r6, r24
    5ae0:	4d 01       	movw	r8, r26
    5ae2:	c4 01       	movw	r24, r8
    5ae4:	b3 01       	movw	r22, r6
    5ae6:	21 96       	adiw	r28, 0x01	; 1
    5ae8:	2c ad       	ldd	r18, Y+60	; 0x3c
    5aea:	3d ad       	ldd	r19, Y+61	; 0x3d
    5aec:	4e ad       	ldd	r20, Y+62	; 0x3e
    5aee:	5f ad       	ldd	r21, Y+63	; 0x3f
    5af0:	21 97       	sbiw	r28, 0x01	; 1
    5af2:	0e 94 15 39 	call	0x722a	; 0x722a <__mulsi3>
    5af6:	9b 01       	movw	r18, r22
    5af8:	ac 01       	movw	r20, r24
    5afa:	87 01       	movw	r16, r14
    5afc:	ff 24       	eor	r15, r15
    5afe:	ee 24       	eor	r14, r14
    5b00:	89 a5       	ldd	r24, Y+41	; 0x29
    5b02:	9a a5       	ldd	r25, Y+42	; 0x2a
    5b04:	ab a5       	ldd	r26, Y+43	; 0x2b
    5b06:	bc a5       	ldd	r27, Y+44	; 0x2c
    5b08:	a0 70       	andi	r26, 0x00	; 0
    5b0a:	b0 70       	andi	r27, 0x00	; 0
    5b0c:	57 01       	movw	r10, r14
    5b0e:	68 01       	movw	r12, r16
    5b10:	a8 2a       	or	r10, r24
    5b12:	b9 2a       	or	r11, r25
    5b14:	ca 2a       	or	r12, r26
    5b16:	db 2a       	or	r13, r27
    5b18:	a2 16       	cp	r10, r18
    5b1a:	b3 06       	cpc	r11, r19
    5b1c:	c4 06       	cpc	r12, r20
    5b1e:	d5 06       	cpc	r13, r21
    5b20:	e0 f4       	brcc	.+56     	; 0x5b5a <__udivdi3+0x5d4>
    5b22:	08 94       	sec
    5b24:	61 08       	sbc	r6, r1
    5b26:	71 08       	sbc	r7, r1
    5b28:	81 08       	sbc	r8, r1
    5b2a:	91 08       	sbc	r9, r1
    5b2c:	a2 0c       	add	r10, r2
    5b2e:	b3 1c       	adc	r11, r3
    5b30:	c4 1c       	adc	r12, r4
    5b32:	d5 1c       	adc	r13, r5
    5b34:	a2 14       	cp	r10, r2
    5b36:	b3 04       	cpc	r11, r3
    5b38:	c4 04       	cpc	r12, r4
    5b3a:	d5 04       	cpc	r13, r5
    5b3c:	70 f0       	brcs	.+28     	; 0x5b5a <__udivdi3+0x5d4>
    5b3e:	a2 16       	cp	r10, r18
    5b40:	b3 06       	cpc	r11, r19
    5b42:	c4 06       	cpc	r12, r20
    5b44:	d5 06       	cpc	r13, r21
    5b46:	48 f4       	brcc	.+18     	; 0x5b5a <__udivdi3+0x5d4>
    5b48:	08 94       	sec
    5b4a:	61 08       	sbc	r6, r1
    5b4c:	71 08       	sbc	r7, r1
    5b4e:	81 08       	sbc	r8, r1
    5b50:	91 08       	sbc	r9, r1
    5b52:	a2 0c       	add	r10, r2
    5b54:	b3 1c       	adc	r11, r3
    5b56:	c4 1c       	adc	r12, r4
    5b58:	d5 1c       	adc	r13, r5
    5b5a:	8d a5       	ldd	r24, Y+45	; 0x2d
    5b5c:	9e a5       	ldd	r25, Y+46	; 0x2e
    5b5e:	af a5       	ldd	r26, Y+47	; 0x2f
    5b60:	b8 a9       	ldd	r27, Y+48	; 0x30
    5b62:	6f 96       	adiw	r28, 0x1f	; 31
    5b64:	0f ac       	ldd	r0, Y+63	; 0x3f
    5b66:	6f 97       	sbiw	r28, 0x1f	; 31
    5b68:	04 c0       	rjmp	.+8      	; 0x5b72 <__udivdi3+0x5ec>
    5b6a:	88 0f       	add	r24, r24
    5b6c:	99 1f       	adc	r25, r25
    5b6e:	aa 1f       	adc	r26, r26
    5b70:	bb 1f       	adc	r27, r27
    5b72:	0a 94       	dec	r0
    5b74:	d2 f7       	brpl	.-12     	; 0x5b6a <__udivdi3+0x5e4>
    5b76:	8d a7       	std	Y+45, r24	; 0x2d
    5b78:	9e a7       	std	Y+46, r25	; 0x2e
    5b7a:	af a7       	std	Y+47, r26	; 0x2f
    5b7c:	b8 ab       	std	Y+48, r27	; 0x30
    5b7e:	a2 1a       	sub	r10, r18
    5b80:	b3 0a       	sbc	r11, r19
    5b82:	c4 0a       	sbc	r12, r20
    5b84:	d5 0a       	sbc	r13, r21
    5b86:	25 96       	adiw	r28, 0x05	; 5
    5b88:	ec ac       	ldd	r14, Y+60	; 0x3c
    5b8a:	fd ac       	ldd	r15, Y+61	; 0x3d
    5b8c:	0e ad       	ldd	r16, Y+62	; 0x3e
    5b8e:	1f ad       	ldd	r17, Y+63	; 0x3f
    5b90:	25 97       	sbiw	r28, 0x05	; 5
    5b92:	d7 01       	movw	r26, r14
    5b94:	99 27       	eor	r25, r25
    5b96:	88 27       	eor	r24, r24
    5b98:	68 2a       	or	r6, r24
    5b9a:	79 2a       	or	r7, r25
    5b9c:	8a 2a       	or	r8, r26
    5b9e:	9b 2a       	or	r9, r27
    5ba0:	82 01       	movw	r16, r4
    5ba2:	22 27       	eor	r18, r18
    5ba4:	33 27       	eor	r19, r19
    5ba6:	29 96       	adiw	r28, 0x09	; 9
    5ba8:	0c af       	std	Y+60, r16	; 0x3c
    5baa:	1d af       	std	Y+61, r17	; 0x3d
    5bac:	2e af       	std	Y+62, r18	; 0x3e
    5bae:	3f af       	std	Y+63, r19	; 0x3f
    5bb0:	29 97       	sbiw	r28, 0x09	; 9
    5bb2:	a2 01       	movw	r20, r4
    5bb4:	91 01       	movw	r18, r2
    5bb6:	40 70       	andi	r20, 0x00	; 0
    5bb8:	50 70       	andi	r21, 0x00	; 0
    5bba:	2d 96       	adiw	r28, 0x0d	; 13
    5bbc:	2c af       	std	Y+60, r18	; 0x3c
    5bbe:	3d af       	std	Y+61, r19	; 0x3d
    5bc0:	4e af       	std	Y+62, r20	; 0x3e
    5bc2:	5f af       	std	Y+63, r21	; 0x3f
    5bc4:	2d 97       	sbiw	r28, 0x0d	; 13
    5bc6:	c6 01       	movw	r24, r12
    5bc8:	b5 01       	movw	r22, r10
    5bca:	29 96       	adiw	r28, 0x09	; 9
    5bcc:	2c ad       	ldd	r18, Y+60	; 0x3c
    5bce:	3d ad       	ldd	r19, Y+61	; 0x3d
    5bd0:	4e ad       	ldd	r20, Y+62	; 0x3e
    5bd2:	5f ad       	ldd	r21, Y+63	; 0x3f
    5bd4:	29 97       	sbiw	r28, 0x09	; 9
    5bd6:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    5bda:	7b 01       	movw	r14, r22
    5bdc:	8c 01       	movw	r16, r24
    5bde:	c6 01       	movw	r24, r12
    5be0:	b5 01       	movw	r22, r10
    5be2:	29 96       	adiw	r28, 0x09	; 9
    5be4:	2c ad       	ldd	r18, Y+60	; 0x3c
    5be6:	3d ad       	ldd	r19, Y+61	; 0x3d
    5be8:	4e ad       	ldd	r20, Y+62	; 0x3e
    5bea:	5f ad       	ldd	r21, Y+63	; 0x3f
    5bec:	29 97       	sbiw	r28, 0x09	; 9
    5bee:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    5bf2:	c9 01       	movw	r24, r18
    5bf4:	da 01       	movw	r26, r20
    5bf6:	61 96       	adiw	r28, 0x11	; 17
    5bf8:	8c af       	std	Y+60, r24	; 0x3c
    5bfa:	9d af       	std	Y+61, r25	; 0x3d
    5bfc:	ae af       	std	Y+62, r26	; 0x3e
    5bfe:	bf af       	std	Y+63, r27	; 0x3f
    5c00:	61 97       	sbiw	r28, 0x11	; 17
    5c02:	bc 01       	movw	r22, r24
    5c04:	cd 01       	movw	r24, r26
    5c06:	2d 96       	adiw	r28, 0x0d	; 13
    5c08:	2c ad       	ldd	r18, Y+60	; 0x3c
    5c0a:	3d ad       	ldd	r19, Y+61	; 0x3d
    5c0c:	4e ad       	ldd	r20, Y+62	; 0x3e
    5c0e:	5f ad       	ldd	r21, Y+63	; 0x3f
    5c10:	2d 97       	sbiw	r28, 0x0d	; 13
    5c12:	0e 94 15 39 	call	0x722a	; 0x722a <__mulsi3>
    5c16:	9b 01       	movw	r18, r22
    5c18:	ac 01       	movw	r20, r24
    5c1a:	87 01       	movw	r16, r14
    5c1c:	ff 24       	eor	r15, r15
    5c1e:	ee 24       	eor	r14, r14
    5c20:	ad a4       	ldd	r10, Y+45	; 0x2d
    5c22:	be a4       	ldd	r11, Y+46	; 0x2e
    5c24:	cf a4       	ldd	r12, Y+47	; 0x2f
    5c26:	d8 a8       	ldd	r13, Y+48	; 0x30
    5c28:	c6 01       	movw	r24, r12
    5c2a:	aa 27       	eor	r26, r26
    5c2c:	bb 27       	eor	r27, r27
    5c2e:	57 01       	movw	r10, r14
    5c30:	68 01       	movw	r12, r16
    5c32:	a8 2a       	or	r10, r24
    5c34:	b9 2a       	or	r11, r25
    5c36:	ca 2a       	or	r12, r26
    5c38:	db 2a       	or	r13, r27
    5c3a:	a2 16       	cp	r10, r18
    5c3c:	b3 06       	cpc	r11, r19
    5c3e:	c4 06       	cpc	r12, r20
    5c40:	d5 06       	cpc	r13, r21
    5c42:	60 f5       	brcc	.+88     	; 0x5c9c <__udivdi3+0x716>
    5c44:	61 96       	adiw	r28, 0x11	; 17
    5c46:	6c ad       	ldd	r22, Y+60	; 0x3c
    5c48:	7d ad       	ldd	r23, Y+61	; 0x3d
    5c4a:	8e ad       	ldd	r24, Y+62	; 0x3e
    5c4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    5c4e:	61 97       	sbiw	r28, 0x11	; 17
    5c50:	61 50       	subi	r22, 0x01	; 1
    5c52:	70 40       	sbci	r23, 0x00	; 0
    5c54:	80 40       	sbci	r24, 0x00	; 0
    5c56:	90 40       	sbci	r25, 0x00	; 0
    5c58:	61 96       	adiw	r28, 0x11	; 17
    5c5a:	6c af       	std	Y+60, r22	; 0x3c
    5c5c:	7d af       	std	Y+61, r23	; 0x3d
    5c5e:	8e af       	std	Y+62, r24	; 0x3e
    5c60:	9f af       	std	Y+63, r25	; 0x3f
    5c62:	61 97       	sbiw	r28, 0x11	; 17
    5c64:	a2 0c       	add	r10, r2
    5c66:	b3 1c       	adc	r11, r3
    5c68:	c4 1c       	adc	r12, r4
    5c6a:	d5 1c       	adc	r13, r5
    5c6c:	a2 14       	cp	r10, r2
    5c6e:	b3 04       	cpc	r11, r3
    5c70:	c4 04       	cpc	r12, r4
    5c72:	d5 04       	cpc	r13, r5
    5c74:	98 f0       	brcs	.+38     	; 0x5c9c <__udivdi3+0x716>
    5c76:	a2 16       	cp	r10, r18
    5c78:	b3 06       	cpc	r11, r19
    5c7a:	c4 06       	cpc	r12, r20
    5c7c:	d5 06       	cpc	r13, r21
    5c7e:	70 f4       	brcc	.+28     	; 0x5c9c <__udivdi3+0x716>
    5c80:	61 50       	subi	r22, 0x01	; 1
    5c82:	70 40       	sbci	r23, 0x00	; 0
    5c84:	80 40       	sbci	r24, 0x00	; 0
    5c86:	90 40       	sbci	r25, 0x00	; 0
    5c88:	61 96       	adiw	r28, 0x11	; 17
    5c8a:	6c af       	std	Y+60, r22	; 0x3c
    5c8c:	7d af       	std	Y+61, r23	; 0x3d
    5c8e:	8e af       	std	Y+62, r24	; 0x3e
    5c90:	9f af       	std	Y+63, r25	; 0x3f
    5c92:	61 97       	sbiw	r28, 0x11	; 17
    5c94:	a2 0c       	add	r10, r2
    5c96:	b3 1c       	adc	r11, r3
    5c98:	c4 1c       	adc	r12, r4
    5c9a:	d5 1c       	adc	r13, r5
    5c9c:	a2 1a       	sub	r10, r18
    5c9e:	b3 0a       	sbc	r11, r19
    5ca0:	c4 0a       	sbc	r12, r20
    5ca2:	d5 0a       	sbc	r13, r21
    5ca4:	c6 01       	movw	r24, r12
    5ca6:	b5 01       	movw	r22, r10
    5ca8:	29 96       	adiw	r28, 0x09	; 9
    5caa:	2c ad       	ldd	r18, Y+60	; 0x3c
    5cac:	3d ad       	ldd	r19, Y+61	; 0x3d
    5cae:	4e ad       	ldd	r20, Y+62	; 0x3e
    5cb0:	5f ad       	ldd	r21, Y+63	; 0x3f
    5cb2:	29 97       	sbiw	r28, 0x09	; 9
    5cb4:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    5cb8:	7b 01       	movw	r14, r22
    5cba:	8c 01       	movw	r16, r24
    5cbc:	c6 01       	movw	r24, r12
    5cbe:	b5 01       	movw	r22, r10
    5cc0:	29 96       	adiw	r28, 0x09	; 9
    5cc2:	2c ad       	ldd	r18, Y+60	; 0x3c
    5cc4:	3d ad       	ldd	r19, Y+61	; 0x3d
    5cc6:	4e ad       	ldd	r20, Y+62	; 0x3e
    5cc8:	5f ad       	ldd	r21, Y+63	; 0x3f
    5cca:	29 97       	sbiw	r28, 0x09	; 9
    5ccc:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    5cd0:	c9 01       	movw	r24, r18
    5cd2:	da 01       	movw	r26, r20
    5cd4:	5c 01       	movw	r10, r24
    5cd6:	6d 01       	movw	r12, r26
    5cd8:	c6 01       	movw	r24, r12
    5cda:	b5 01       	movw	r22, r10
    5cdc:	2d 96       	adiw	r28, 0x0d	; 13
    5cde:	2c ad       	ldd	r18, Y+60	; 0x3c
    5ce0:	3d ad       	ldd	r19, Y+61	; 0x3d
    5ce2:	4e ad       	ldd	r20, Y+62	; 0x3e
    5ce4:	5f ad       	ldd	r21, Y+63	; 0x3f
    5ce6:	2d 97       	sbiw	r28, 0x0d	; 13
    5ce8:	0e 94 15 39 	call	0x722a	; 0x722a <__mulsi3>
    5cec:	9b 01       	movw	r18, r22
    5cee:	ac 01       	movw	r20, r24
    5cf0:	87 01       	movw	r16, r14
    5cf2:	ff 24       	eor	r15, r15
    5cf4:	ee 24       	eor	r14, r14
    5cf6:	8d a5       	ldd	r24, Y+45	; 0x2d
    5cf8:	9e a5       	ldd	r25, Y+46	; 0x2e
    5cfa:	af a5       	ldd	r26, Y+47	; 0x2f
    5cfc:	b8 a9       	ldd	r27, Y+48	; 0x30
    5cfe:	a0 70       	andi	r26, 0x00	; 0
    5d00:	b0 70       	andi	r27, 0x00	; 0
    5d02:	e8 2a       	or	r14, r24
    5d04:	f9 2a       	or	r15, r25
    5d06:	0a 2b       	or	r16, r26
    5d08:	1b 2b       	or	r17, r27
    5d0a:	e2 16       	cp	r14, r18
    5d0c:	f3 06       	cpc	r15, r19
    5d0e:	04 07       	cpc	r16, r20
    5d10:	15 07       	cpc	r17, r21
    5d12:	c0 f4       	brcc	.+48     	; 0x5d44 <__udivdi3+0x7be>
    5d14:	08 94       	sec
    5d16:	a1 08       	sbc	r10, r1
    5d18:	b1 08       	sbc	r11, r1
    5d1a:	c1 08       	sbc	r12, r1
    5d1c:	d1 08       	sbc	r13, r1
    5d1e:	e2 0c       	add	r14, r2
    5d20:	f3 1c       	adc	r15, r3
    5d22:	04 1d       	adc	r16, r4
    5d24:	15 1d       	adc	r17, r5
    5d26:	e2 14       	cp	r14, r2
    5d28:	f3 04       	cpc	r15, r3
    5d2a:	04 05       	cpc	r16, r4
    5d2c:	15 05       	cpc	r17, r5
    5d2e:	50 f0       	brcs	.+20     	; 0x5d44 <__udivdi3+0x7be>
    5d30:	e2 16       	cp	r14, r18
    5d32:	f3 06       	cpc	r15, r19
    5d34:	04 07       	cpc	r16, r20
    5d36:	15 07       	cpc	r17, r21
    5d38:	28 f4       	brcc	.+10     	; 0x5d44 <__udivdi3+0x7be>
    5d3a:	08 94       	sec
    5d3c:	a1 08       	sbc	r10, r1
    5d3e:	b1 08       	sbc	r11, r1
    5d40:	c1 08       	sbc	r12, r1
    5d42:	d1 08       	sbc	r13, r1
    5d44:	61 96       	adiw	r28, 0x11	; 17
    5d46:	ec ac       	ldd	r14, Y+60	; 0x3c
    5d48:	fd ac       	ldd	r15, Y+61	; 0x3d
    5d4a:	0e ad       	ldd	r16, Y+62	; 0x3e
    5d4c:	1f ad       	ldd	r17, Y+63	; 0x3f
    5d4e:	61 97       	sbiw	r28, 0x11	; 17
    5d50:	d7 01       	movw	r26, r14
    5d52:	99 27       	eor	r25, r25
    5d54:	88 27       	eor	r24, r24
    5d56:	96 01       	movw	r18, r12
    5d58:	85 01       	movw	r16, r10
    5d5a:	08 2b       	or	r16, r24
    5d5c:	19 2b       	or	r17, r25
    5d5e:	2a 2b       	or	r18, r26
    5d60:	3b 2b       	or	r19, r27
    5d62:	09 ab       	std	Y+49, r16	; 0x31
    5d64:	1a ab       	std	Y+50, r17	; 0x32
    5d66:	2b ab       	std	Y+51, r18	; 0x33
    5d68:	3c ab       	std	Y+52, r19	; 0x34
    5d6a:	62 c2       	rjmp	.+1220   	; 0x6230 <__stack+0x231>
    5d6c:	6e 14       	cp	r6, r14
    5d6e:	7f 04       	cpc	r7, r15
    5d70:	80 06       	cpc	r8, r16
    5d72:	91 06       	cpc	r9, r17
    5d74:	08 f4       	brcc	.+2      	; 0x5d78 <__udivdi3+0x7f2>
    5d76:	51 c2       	rjmp	.+1186   	; 0x621a <__stack+0x21b>
    5d78:	20 e0       	ldi	r18, 0x00	; 0
    5d7a:	e2 16       	cp	r14, r18
    5d7c:	20 e0       	ldi	r18, 0x00	; 0
    5d7e:	f2 06       	cpc	r15, r18
    5d80:	21 e0       	ldi	r18, 0x01	; 1
    5d82:	02 07       	cpc	r16, r18
    5d84:	20 e0       	ldi	r18, 0x00	; 0
    5d86:	12 07       	cpc	r17, r18
    5d88:	88 f4       	brcc	.+34     	; 0x5dac <__udivdi3+0x826>
    5d8a:	3f ef       	ldi	r19, 0xFF	; 255
    5d8c:	e3 16       	cp	r14, r19
    5d8e:	f1 04       	cpc	r15, r1
    5d90:	01 05       	cpc	r16, r1
    5d92:	11 05       	cpc	r17, r1
    5d94:	31 f0       	breq	.+12     	; 0x5da2 <__udivdi3+0x81c>
    5d96:	28 f0       	brcs	.+10     	; 0x5da2 <__udivdi3+0x81c>
    5d98:	48 e0       	ldi	r20, 0x08	; 8
    5d9a:	50 e0       	ldi	r21, 0x00	; 0
    5d9c:	60 e0       	ldi	r22, 0x00	; 0
    5d9e:	70 e0       	ldi	r23, 0x00	; 0
    5da0:	17 c0       	rjmp	.+46     	; 0x5dd0 <__udivdi3+0x84a>
    5da2:	40 e0       	ldi	r20, 0x00	; 0
    5da4:	50 e0       	ldi	r21, 0x00	; 0
    5da6:	60 e0       	ldi	r22, 0x00	; 0
    5da8:	70 e0       	ldi	r23, 0x00	; 0
    5daa:	12 c0       	rjmp	.+36     	; 0x5dd0 <__udivdi3+0x84a>
    5dac:	40 e0       	ldi	r20, 0x00	; 0
    5dae:	e4 16       	cp	r14, r20
    5db0:	40 e0       	ldi	r20, 0x00	; 0
    5db2:	f4 06       	cpc	r15, r20
    5db4:	40 e0       	ldi	r20, 0x00	; 0
    5db6:	04 07       	cpc	r16, r20
    5db8:	41 e0       	ldi	r20, 0x01	; 1
    5dba:	14 07       	cpc	r17, r20
    5dbc:	28 f0       	brcs	.+10     	; 0x5dc8 <__udivdi3+0x842>
    5dbe:	48 e1       	ldi	r20, 0x18	; 24
    5dc0:	50 e0       	ldi	r21, 0x00	; 0
    5dc2:	60 e0       	ldi	r22, 0x00	; 0
    5dc4:	70 e0       	ldi	r23, 0x00	; 0
    5dc6:	04 c0       	rjmp	.+8      	; 0x5dd0 <__udivdi3+0x84a>
    5dc8:	40 e1       	ldi	r20, 0x10	; 16
    5dca:	50 e0       	ldi	r21, 0x00	; 0
    5dcc:	60 e0       	ldi	r22, 0x00	; 0
    5dce:	70 e0       	ldi	r23, 0x00	; 0
    5dd0:	d8 01       	movw	r26, r16
    5dd2:	c7 01       	movw	r24, r14
    5dd4:	04 2e       	mov	r0, r20
    5dd6:	04 c0       	rjmp	.+8      	; 0x5de0 <__udivdi3+0x85a>
    5dd8:	b6 95       	lsr	r27
    5dda:	a7 95       	ror	r26
    5ddc:	97 95       	ror	r25
    5dde:	87 95       	ror	r24
    5de0:	0a 94       	dec	r0
    5de2:	d2 f7       	brpl	.-12     	; 0x5dd8 <__udivdi3+0x852>
    5de4:	81 5f       	subi	r24, 0xF1	; 241
    5de6:	9f 4d       	sbci	r25, 0xDF	; 223
    5de8:	dc 01       	movw	r26, r24
    5dea:	2c 91       	ld	r18, X
    5dec:	30 e2       	ldi	r19, 0x20	; 32
    5dee:	a3 2e       	mov	r10, r19
    5df0:	b1 2c       	mov	r11, r1
    5df2:	c1 2c       	mov	r12, r1
    5df4:	d1 2c       	mov	r13, r1
    5df6:	d6 01       	movw	r26, r12
    5df8:	c5 01       	movw	r24, r10
    5dfa:	84 1b       	sub	r24, r20
    5dfc:	95 0b       	sbc	r25, r21
    5dfe:	a6 0b       	sbc	r26, r22
    5e00:	b7 0b       	sbc	r27, r23
    5e02:	82 1b       	sub	r24, r18
    5e04:	91 09       	sbc	r25, r1
    5e06:	a1 09       	sbc	r26, r1
    5e08:	b1 09       	sbc	r27, r1
    5e0a:	00 97       	sbiw	r24, 0x00	; 0
    5e0c:	a1 05       	cpc	r26, r1
    5e0e:	b1 05       	cpc	r27, r1
    5e10:	89 f4       	brne	.+34     	; 0x5e34 <__udivdi3+0x8ae>
    5e12:	e6 14       	cp	r14, r6
    5e14:	f7 04       	cpc	r15, r7
    5e16:	08 05       	cpc	r16, r8
    5e18:	19 05       	cpc	r17, r9
    5e1a:	08 f4       	brcc	.+2      	; 0x5e1e <__udivdi3+0x898>
    5e1c:	f2 c1       	rjmp	.+996    	; 0x6202 <__stack+0x203>
    5e1e:	6d a4       	ldd	r6, Y+45	; 0x2d
    5e20:	7e a4       	ldd	r7, Y+46	; 0x2e
    5e22:	8f a4       	ldd	r8, Y+47	; 0x2f
    5e24:	98 a8       	ldd	r9, Y+48	; 0x30
    5e26:	62 14       	cp	r6, r2
    5e28:	73 04       	cpc	r7, r3
    5e2a:	84 04       	cpc	r8, r4
    5e2c:	95 04       	cpc	r9, r5
    5e2e:	08 f0       	brcs	.+2      	; 0x5e32 <__udivdi3+0x8ac>
    5e30:	e8 c1       	rjmp	.+976    	; 0x6202 <__stack+0x203>
    5e32:	f3 c1       	rjmp	.+998    	; 0x621a <__stack+0x21b>
    5e34:	6e 96       	adiw	r28, 0x1e	; 30
    5e36:	8f af       	std	Y+63, r24	; 0x3f
    5e38:	6e 97       	sbiw	r28, 0x1e	; 30
    5e3a:	08 2e       	mov	r0, r24
    5e3c:	04 c0       	rjmp	.+8      	; 0x5e46 <__udivdi3+0x8c0>
    5e3e:	ee 0c       	add	r14, r14
    5e40:	ff 1c       	adc	r15, r15
    5e42:	00 1f       	adc	r16, r16
    5e44:	11 1f       	adc	r17, r17
    5e46:	0a 94       	dec	r0
    5e48:	d2 f7       	brpl	.-12     	; 0x5e3e <__udivdi3+0x8b8>
    5e4a:	6a 2d       	mov	r22, r10
    5e4c:	68 1b       	sub	r22, r24
    5e4e:	d2 01       	movw	r26, r4
    5e50:	c1 01       	movw	r24, r2
    5e52:	06 2e       	mov	r0, r22
    5e54:	04 c0       	rjmp	.+8      	; 0x5e5e <__udivdi3+0x8d8>
    5e56:	b6 95       	lsr	r27
    5e58:	a7 95       	ror	r26
    5e5a:	97 95       	ror	r25
    5e5c:	87 95       	ror	r24
    5e5e:	0a 94       	dec	r0
    5e60:	d2 f7       	brpl	.-12     	; 0x5e56 <__udivdi3+0x8d0>
    5e62:	5c 01       	movw	r10, r24
    5e64:	6d 01       	movw	r12, r26
    5e66:	ae 28       	or	r10, r14
    5e68:	bf 28       	or	r11, r15
    5e6a:	c0 2a       	or	r12, r16
    5e6c:	d1 2a       	or	r13, r17
    5e6e:	ad a2       	std	Y+37, r10	; 0x25
    5e70:	be a2       	std	Y+38, r11	; 0x26
    5e72:	cf a2       	std	Y+39, r12	; 0x27
    5e74:	d8 a6       	std	Y+40, r13	; 0x28
    5e76:	72 01       	movw	r14, r4
    5e78:	61 01       	movw	r12, r2
    5e7a:	6e 96       	adiw	r28, 0x1e	; 30
    5e7c:	0f ac       	ldd	r0, Y+63	; 0x3f
    5e7e:	6e 97       	sbiw	r28, 0x1e	; 30
    5e80:	04 c0       	rjmp	.+8      	; 0x5e8a <__udivdi3+0x904>
    5e82:	cc 0c       	add	r12, r12
    5e84:	dd 1c       	adc	r13, r13
    5e86:	ee 1c       	adc	r14, r14
    5e88:	ff 1c       	adc	r15, r15
    5e8a:	0a 94       	dec	r0
    5e8c:	d2 f7       	brpl	.-12     	; 0x5e82 <__udivdi3+0x8fc>
    5e8e:	c9 a2       	std	Y+33, r12	; 0x21
    5e90:	da a2       	std	Y+34, r13	; 0x22
    5e92:	eb a2       	std	Y+35, r14	; 0x23
    5e94:	fc a2       	std	Y+36, r15	; 0x24
    5e96:	64 01       	movw	r12, r8
    5e98:	53 01       	movw	r10, r6
    5e9a:	06 2e       	mov	r0, r22
    5e9c:	04 c0       	rjmp	.+8      	; 0x5ea6 <__udivdi3+0x920>
    5e9e:	d6 94       	lsr	r13
    5ea0:	c7 94       	ror	r12
    5ea2:	b7 94       	ror	r11
    5ea4:	a7 94       	ror	r10
    5ea6:	0a 94       	dec	r0
    5ea8:	d2 f7       	brpl	.-12     	; 0x5e9e <__udivdi3+0x918>
    5eaa:	d4 01       	movw	r26, r8
    5eac:	c3 01       	movw	r24, r6
    5eae:	6e 96       	adiw	r28, 0x1e	; 30
    5eb0:	0f ac       	ldd	r0, Y+63	; 0x3f
    5eb2:	6e 97       	sbiw	r28, 0x1e	; 30
    5eb4:	04 c0       	rjmp	.+8      	; 0x5ebe <__udivdi3+0x938>
    5eb6:	88 0f       	add	r24, r24
    5eb8:	99 1f       	adc	r25, r25
    5eba:	aa 1f       	adc	r26, r26
    5ebc:	bb 1f       	adc	r27, r27
    5ebe:	0a 94       	dec	r0
    5ec0:	d2 f7       	brpl	.-12     	; 0x5eb6 <__udivdi3+0x930>
    5ec2:	ed a4       	ldd	r14, Y+45	; 0x2d
    5ec4:	fe a4       	ldd	r15, Y+46	; 0x2e
    5ec6:	0f a5       	ldd	r16, Y+47	; 0x2f
    5ec8:	18 a9       	ldd	r17, Y+48	; 0x30
    5eca:	04 c0       	rjmp	.+8      	; 0x5ed4 <__udivdi3+0x94e>
    5ecc:	16 95       	lsr	r17
    5ece:	07 95       	ror	r16
    5ed0:	f7 94       	ror	r15
    5ed2:	e7 94       	ror	r14
    5ed4:	6a 95       	dec	r22
    5ed6:	d2 f7       	brpl	.-12     	; 0x5ecc <__udivdi3+0x946>
    5ed8:	37 01       	movw	r6, r14
    5eda:	48 01       	movw	r8, r16
    5edc:	68 2a       	or	r6, r24
    5ede:	79 2a       	or	r7, r25
    5ee0:	8a 2a       	or	r8, r26
    5ee2:	9b 2a       	or	r9, r27
    5ee4:	6d 8e       	std	Y+29, r6	; 0x1d
    5ee6:	7e 8e       	std	Y+30, r7	; 0x1e
    5ee8:	8f 8e       	std	Y+31, r8	; 0x1f
    5eea:	98 a2       	std	Y+32, r9	; 0x20
    5eec:	ed a0       	ldd	r14, Y+37	; 0x25
    5eee:	fe a0       	ldd	r15, Y+38	; 0x26
    5ef0:	0f a1       	ldd	r16, Y+39	; 0x27
    5ef2:	18 a5       	ldd	r17, Y+40	; 0x28
    5ef4:	38 01       	movw	r6, r16
    5ef6:	88 24       	eor	r8, r8
    5ef8:	99 24       	eor	r9, r9
    5efa:	98 01       	movw	r18, r16
    5efc:	87 01       	movw	r16, r14
    5efe:	20 70       	andi	r18, 0x00	; 0
    5f00:	30 70       	andi	r19, 0x00	; 0
    5f02:	65 96       	adiw	r28, 0x15	; 21
    5f04:	0c af       	std	Y+60, r16	; 0x3c
    5f06:	1d af       	std	Y+61, r17	; 0x3d
    5f08:	2e af       	std	Y+62, r18	; 0x3e
    5f0a:	3f af       	std	Y+63, r19	; 0x3f
    5f0c:	65 97       	sbiw	r28, 0x15	; 21
    5f0e:	c6 01       	movw	r24, r12
    5f10:	b5 01       	movw	r22, r10
    5f12:	a4 01       	movw	r20, r8
    5f14:	93 01       	movw	r18, r6
    5f16:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    5f1a:	7b 01       	movw	r14, r22
    5f1c:	8c 01       	movw	r16, r24
    5f1e:	c6 01       	movw	r24, r12
    5f20:	b5 01       	movw	r22, r10
    5f22:	a4 01       	movw	r20, r8
    5f24:	93 01       	movw	r18, r6
    5f26:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    5f2a:	c9 01       	movw	r24, r18
    5f2c:	da 01       	movw	r26, r20
    5f2e:	1c 01       	movw	r2, r24
    5f30:	2d 01       	movw	r4, r26
    5f32:	c2 01       	movw	r24, r4
    5f34:	b1 01       	movw	r22, r2
    5f36:	65 96       	adiw	r28, 0x15	; 21
    5f38:	2c ad       	ldd	r18, Y+60	; 0x3c
    5f3a:	3d ad       	ldd	r19, Y+61	; 0x3d
    5f3c:	4e ad       	ldd	r20, Y+62	; 0x3e
    5f3e:	5f ad       	ldd	r21, Y+63	; 0x3f
    5f40:	65 97       	sbiw	r28, 0x15	; 21
    5f42:	0e 94 15 39 	call	0x722a	; 0x722a <__mulsi3>
    5f46:	9b 01       	movw	r18, r22
    5f48:	ac 01       	movw	r20, r24
    5f4a:	87 01       	movw	r16, r14
    5f4c:	ff 24       	eor	r15, r15
    5f4e:	ee 24       	eor	r14, r14
    5f50:	ad 8c       	ldd	r10, Y+29	; 0x1d
    5f52:	be 8c       	ldd	r11, Y+30	; 0x1e
    5f54:	cf 8c       	ldd	r12, Y+31	; 0x1f
    5f56:	d8 a0       	ldd	r13, Y+32	; 0x20
    5f58:	c6 01       	movw	r24, r12
    5f5a:	aa 27       	eor	r26, r26
    5f5c:	bb 27       	eor	r27, r27
    5f5e:	57 01       	movw	r10, r14
    5f60:	68 01       	movw	r12, r16
    5f62:	a8 2a       	or	r10, r24
    5f64:	b9 2a       	or	r11, r25
    5f66:	ca 2a       	or	r12, r26
    5f68:	db 2a       	or	r13, r27
    5f6a:	a2 16       	cp	r10, r18
    5f6c:	b3 06       	cpc	r11, r19
    5f6e:	c4 06       	cpc	r12, r20
    5f70:	d5 06       	cpc	r13, r21
    5f72:	00 f5       	brcc	.+64     	; 0x5fb4 <__udivdi3+0xa2e>
    5f74:	08 94       	sec
    5f76:	21 08       	sbc	r2, r1
    5f78:	31 08       	sbc	r3, r1
    5f7a:	41 08       	sbc	r4, r1
    5f7c:	51 08       	sbc	r5, r1
    5f7e:	ed a0       	ldd	r14, Y+37	; 0x25
    5f80:	fe a0       	ldd	r15, Y+38	; 0x26
    5f82:	0f a1       	ldd	r16, Y+39	; 0x27
    5f84:	18 a5       	ldd	r17, Y+40	; 0x28
    5f86:	ae 0c       	add	r10, r14
    5f88:	bf 1c       	adc	r11, r15
    5f8a:	c0 1e       	adc	r12, r16
    5f8c:	d1 1e       	adc	r13, r17
    5f8e:	ae 14       	cp	r10, r14
    5f90:	bf 04       	cpc	r11, r15
    5f92:	c0 06       	cpc	r12, r16
    5f94:	d1 06       	cpc	r13, r17
    5f96:	70 f0       	brcs	.+28     	; 0x5fb4 <__udivdi3+0xa2e>
    5f98:	a2 16       	cp	r10, r18
    5f9a:	b3 06       	cpc	r11, r19
    5f9c:	c4 06       	cpc	r12, r20
    5f9e:	d5 06       	cpc	r13, r21
    5fa0:	48 f4       	brcc	.+18     	; 0x5fb4 <__udivdi3+0xa2e>
    5fa2:	08 94       	sec
    5fa4:	21 08       	sbc	r2, r1
    5fa6:	31 08       	sbc	r3, r1
    5fa8:	41 08       	sbc	r4, r1
    5faa:	51 08       	sbc	r5, r1
    5fac:	ae 0c       	add	r10, r14
    5fae:	bf 1c       	adc	r11, r15
    5fb0:	c0 1e       	adc	r12, r16
    5fb2:	d1 1e       	adc	r13, r17
    5fb4:	a2 1a       	sub	r10, r18
    5fb6:	b3 0a       	sbc	r11, r19
    5fb8:	c4 0a       	sbc	r12, r20
    5fba:	d5 0a       	sbc	r13, r21
    5fbc:	c6 01       	movw	r24, r12
    5fbe:	b5 01       	movw	r22, r10
    5fc0:	a4 01       	movw	r20, r8
    5fc2:	93 01       	movw	r18, r6
    5fc4:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    5fc8:	7b 01       	movw	r14, r22
    5fca:	8c 01       	movw	r16, r24
    5fcc:	c6 01       	movw	r24, r12
    5fce:	b5 01       	movw	r22, r10
    5fd0:	a4 01       	movw	r20, r8
    5fd2:	93 01       	movw	r18, r6
    5fd4:	0e 94 34 39 	call	0x7268	; 0x7268 <__udivmodsi4>
    5fd8:	c9 01       	movw	r24, r18
    5fda:	da 01       	movw	r26, r20
    5fdc:	3c 01       	movw	r6, r24
    5fde:	4d 01       	movw	r8, r26
    5fe0:	c4 01       	movw	r24, r8
    5fe2:	b3 01       	movw	r22, r6
    5fe4:	65 96       	adiw	r28, 0x15	; 21
    5fe6:	2c ad       	ldd	r18, Y+60	; 0x3c
    5fe8:	3d ad       	ldd	r19, Y+61	; 0x3d
    5fea:	4e ad       	ldd	r20, Y+62	; 0x3e
    5fec:	5f ad       	ldd	r21, Y+63	; 0x3f
    5fee:	65 97       	sbiw	r28, 0x15	; 21
    5ff0:	0e 94 15 39 	call	0x722a	; 0x722a <__mulsi3>
    5ff4:	9b 01       	movw	r18, r22
    5ff6:	ac 01       	movw	r20, r24
    5ff8:	87 01       	movw	r16, r14
    5ffa:	ff 24       	eor	r15, r15
    5ffc:	ee 24       	eor	r14, r14
    5ffe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6000:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6002:	af 8d       	ldd	r26, Y+31	; 0x1f
    6004:	b8 a1       	ldd	r27, Y+32	; 0x20
    6006:	a0 70       	andi	r26, 0x00	; 0
    6008:	b0 70       	andi	r27, 0x00	; 0
    600a:	57 01       	movw	r10, r14
    600c:	68 01       	movw	r12, r16
    600e:	a8 2a       	or	r10, r24
    6010:	b9 2a       	or	r11, r25
    6012:	ca 2a       	or	r12, r26
    6014:	db 2a       	or	r13, r27
    6016:	a2 16       	cp	r10, r18
    6018:	b3 06       	cpc	r11, r19
    601a:	c4 06       	cpc	r12, r20
    601c:	d5 06       	cpc	r13, r21
    601e:	00 f5       	brcc	.+64     	; 0x6060 <__stack+0x61>
    6020:	08 94       	sec
    6022:	61 08       	sbc	r6, r1
    6024:	71 08       	sbc	r7, r1
    6026:	81 08       	sbc	r8, r1
    6028:	91 08       	sbc	r9, r1
    602a:	6d a1       	ldd	r22, Y+37	; 0x25
    602c:	7e a1       	ldd	r23, Y+38	; 0x26
    602e:	8f a1       	ldd	r24, Y+39	; 0x27
    6030:	98 a5       	ldd	r25, Y+40	; 0x28
    6032:	a6 0e       	add	r10, r22
    6034:	b7 1e       	adc	r11, r23
    6036:	c8 1e       	adc	r12, r24
    6038:	d9 1e       	adc	r13, r25
    603a:	a6 16       	cp	r10, r22
    603c:	b7 06       	cpc	r11, r23
    603e:	c8 06       	cpc	r12, r24
    6040:	d9 06       	cpc	r13, r25
    6042:	70 f0       	brcs	.+28     	; 0x6060 <__stack+0x61>
    6044:	a2 16       	cp	r10, r18
    6046:	b3 06       	cpc	r11, r19
    6048:	c4 06       	cpc	r12, r20
    604a:	d5 06       	cpc	r13, r21
    604c:	48 f4       	brcc	.+18     	; 0x6060 <__stack+0x61>
    604e:	08 94       	sec
    6050:	61 08       	sbc	r6, r1
    6052:	71 08       	sbc	r7, r1
    6054:	81 08       	sbc	r8, r1
    6056:	91 08       	sbc	r9, r1
    6058:	a6 0e       	add	r10, r22
    605a:	b7 1e       	adc	r11, r23
    605c:	c8 1e       	adc	r12, r24
    605e:	d9 1e       	adc	r13, r25
    6060:	d6 01       	movw	r26, r12
    6062:	c5 01       	movw	r24, r10
    6064:	82 1b       	sub	r24, r18
    6066:	93 0b       	sbc	r25, r19
    6068:	a4 0b       	sbc	r26, r20
    606a:	b5 0b       	sbc	r27, r21
    606c:	89 8f       	std	Y+25, r24	; 0x19
    606e:	9a 8f       	std	Y+26, r25	; 0x1a
    6070:	ab 8f       	std	Y+27, r26	; 0x1b
    6072:	bc 8f       	std	Y+28, r27	; 0x1c
    6074:	d1 01       	movw	r26, r2
    6076:	99 27       	eor	r25, r25
    6078:	88 27       	eor	r24, r24
    607a:	64 01       	movw	r12, r8
    607c:	53 01       	movw	r10, r6
    607e:	a8 2a       	or	r10, r24
    6080:	b9 2a       	or	r11, r25
    6082:	ca 2a       	or	r12, r26
    6084:	db 2a       	or	r13, r27
    6086:	a9 aa       	std	Y+49, r10	; 0x31
    6088:	ba aa       	std	Y+50, r11	; 0x32
    608a:	cb aa       	std	Y+51, r12	; 0x33
    608c:	dc aa       	std	Y+52, r13	; 0x34
    608e:	86 01       	movw	r16, r12
    6090:	75 01       	movw	r14, r10
    6092:	2f ef       	ldi	r18, 0xFF	; 255
    6094:	3f ef       	ldi	r19, 0xFF	; 255
    6096:	40 e0       	ldi	r20, 0x00	; 0
    6098:	50 e0       	ldi	r21, 0x00	; 0
    609a:	e2 22       	and	r14, r18
    609c:	f3 22       	and	r15, r19
    609e:	04 23       	and	r16, r20
    60a0:	15 23       	and	r17, r21
    60a2:	a6 01       	movw	r20, r12
    60a4:	66 27       	eor	r22, r22
    60a6:	77 27       	eor	r23, r23
    60a8:	6d 96       	adiw	r28, 0x1d	; 29
    60aa:	4c af       	std	Y+60, r20	; 0x3c
    60ac:	5d af       	std	Y+61, r21	; 0x3d
    60ae:	6e af       	std	Y+62, r22	; 0x3e
    60b0:	7f af       	std	Y+63, r23	; 0x3f
    60b2:	6d 97       	sbiw	r28, 0x1d	; 29
    60b4:	a9 a0       	ldd	r10, Y+33	; 0x21
    60b6:	ba a0       	ldd	r11, Y+34	; 0x22
    60b8:	cb a0       	ldd	r12, Y+35	; 0x23
    60ba:	dc a0       	ldd	r13, Y+36	; 0x24
    60bc:	6f ef       	ldi	r22, 0xFF	; 255
    60be:	7f ef       	ldi	r23, 0xFF	; 255
    60c0:	80 e0       	ldi	r24, 0x00	; 0
    60c2:	90 e0       	ldi	r25, 0x00	; 0
    60c4:	a6 22       	and	r10, r22
    60c6:	b7 22       	and	r11, r23
    60c8:	c8 22       	and	r12, r24
    60ca:	d9 22       	and	r13, r25
    60cc:	89 a1       	ldd	r24, Y+33	; 0x21
    60ce:	9a a1       	ldd	r25, Y+34	; 0x22
    60d0:	ab a1       	ldd	r26, Y+35	; 0x23
    60d2:	bc a1       	ldd	r27, Y+36	; 0x24
    60d4:	1d 01       	movw	r2, r26
    60d6:	44 24       	eor	r4, r4
    60d8:	55 24       	eor	r5, r5
    60da:	c8 01       	movw	r24, r16
    60dc:	b7 01       	movw	r22, r14
    60de:	a6 01       	movw	r20, r12
    60e0:	95 01       	movw	r18, r10
    60e2:	0e 94 15 39 	call	0x722a	; 0x722a <__mulsi3>
    60e6:	69 96       	adiw	r28, 0x19	; 25
    60e8:	6c af       	std	Y+60, r22	; 0x3c
    60ea:	7d af       	std	Y+61, r23	; 0x3d
    60ec:	8e af       	std	Y+62, r24	; 0x3e
    60ee:	9f af       	std	Y+63, r25	; 0x3f
    60f0:	69 97       	sbiw	r28, 0x19	; 25
    60f2:	c8 01       	movw	r24, r16
    60f4:	b7 01       	movw	r22, r14
    60f6:	a2 01       	movw	r20, r4
    60f8:	91 01       	movw	r18, r2
    60fa:	0e 94 15 39 	call	0x722a	; 0x722a <__mulsi3>
    60fe:	3b 01       	movw	r6, r22
    6100:	4c 01       	movw	r8, r24
    6102:	6d 96       	adiw	r28, 0x1d	; 29
    6104:	6c ad       	ldd	r22, Y+60	; 0x3c
    6106:	7d ad       	ldd	r23, Y+61	; 0x3d
    6108:	8e ad       	ldd	r24, Y+62	; 0x3e
    610a:	9f ad       	ldd	r25, Y+63	; 0x3f
    610c:	6d 97       	sbiw	r28, 0x1d	; 29
    610e:	a6 01       	movw	r20, r12
    6110:	95 01       	movw	r18, r10
    6112:	0e 94 15 39 	call	0x722a	; 0x722a <__mulsi3>
    6116:	7b 01       	movw	r14, r22
    6118:	8c 01       	movw	r16, r24
    611a:	6d 96       	adiw	r28, 0x1d	; 29
    611c:	6c ad       	ldd	r22, Y+60	; 0x3c
    611e:	7d ad       	ldd	r23, Y+61	; 0x3d
    6120:	8e ad       	ldd	r24, Y+62	; 0x3e
    6122:	9f ad       	ldd	r25, Y+63	; 0x3f
    6124:	6d 97       	sbiw	r28, 0x1d	; 29
    6126:	a2 01       	movw	r20, r4
    6128:	91 01       	movw	r18, r2
    612a:	0e 94 15 39 	call	0x722a	; 0x722a <__mulsi3>
    612e:	5b 01       	movw	r10, r22
    6130:	6c 01       	movw	r12, r24
    6132:	a8 01       	movw	r20, r16
    6134:	97 01       	movw	r18, r14
    6136:	26 0d       	add	r18, r6
    6138:	37 1d       	adc	r19, r7
    613a:	48 1d       	adc	r20, r8
    613c:	59 1d       	adc	r21, r9
    613e:	69 96       	adiw	r28, 0x19	; 25
    6140:	6c ac       	ldd	r6, Y+60	; 0x3c
    6142:	7d ac       	ldd	r7, Y+61	; 0x3d
    6144:	8e ac       	ldd	r8, Y+62	; 0x3e
    6146:	9f ac       	ldd	r9, Y+63	; 0x3f
    6148:	69 97       	sbiw	r28, 0x19	; 25
    614a:	c4 01       	movw	r24, r8
    614c:	aa 27       	eor	r26, r26
    614e:	bb 27       	eor	r27, r27
    6150:	28 0f       	add	r18, r24
    6152:	39 1f       	adc	r19, r25
    6154:	4a 1f       	adc	r20, r26
    6156:	5b 1f       	adc	r21, r27
    6158:	2e 15       	cp	r18, r14
    615a:	3f 05       	cpc	r19, r15
    615c:	40 07       	cpc	r20, r16
    615e:	51 07       	cpc	r21, r17
    6160:	48 f4       	brcc	.+18     	; 0x6174 <__stack+0x175>
    6162:	e1 2c       	mov	r14, r1
    6164:	f1 2c       	mov	r15, r1
    6166:	61 e0       	ldi	r22, 0x01	; 1
    6168:	06 2f       	mov	r16, r22
    616a:	11 2d       	mov	r17, r1
    616c:	ae 0c       	add	r10, r14
    616e:	bf 1c       	adc	r11, r15
    6170:	c0 1e       	adc	r12, r16
    6172:	d1 1e       	adc	r13, r17
    6174:	ca 01       	movw	r24, r20
    6176:	aa 27       	eor	r26, r26
    6178:	bb 27       	eor	r27, r27
    617a:	bc 01       	movw	r22, r24
    617c:	cd 01       	movw	r24, r26
    617e:	6a 0d       	add	r22, r10
    6180:	7b 1d       	adc	r23, r11
    6182:	8c 1d       	adc	r24, r12
    6184:	9d 1d       	adc	r25, r13
    6186:	69 8c       	ldd	r6, Y+25	; 0x19
    6188:	7a 8c       	ldd	r7, Y+26	; 0x1a
    618a:	8b 8c       	ldd	r8, Y+27	; 0x1b
    618c:	9c 8c       	ldd	r9, Y+28	; 0x1c
    618e:	66 16       	cp	r6, r22
    6190:	77 06       	cpc	r7, r23
    6192:	88 06       	cpc	r8, r24
    6194:	99 06       	cpc	r9, r25
    6196:	40 f1       	brcs	.+80     	; 0x61e8 <__stack+0x1e9>
    6198:	66 15       	cp	r22, r6
    619a:	77 05       	cpc	r23, r7
    619c:	88 05       	cpc	r24, r8
    619e:	99 05       	cpc	r25, r9
    61a0:	09 f0       	breq	.+2      	; 0x61a4 <__stack+0x1a5>
    61a2:	43 c0       	rjmp	.+134    	; 0x622a <__stack+0x22b>
    61a4:	d9 01       	movw	r26, r18
    61a6:	99 27       	eor	r25, r25
    61a8:	88 27       	eor	r24, r24
    61aa:	69 96       	adiw	r28, 0x19	; 25
    61ac:	2c ad       	ldd	r18, Y+60	; 0x3c
    61ae:	3d ad       	ldd	r19, Y+61	; 0x3d
    61b0:	4e ad       	ldd	r20, Y+62	; 0x3e
    61b2:	5f ad       	ldd	r21, Y+63	; 0x3f
    61b4:	69 97       	sbiw	r28, 0x19	; 25
    61b6:	40 70       	andi	r20, 0x00	; 0
    61b8:	50 70       	andi	r21, 0x00	; 0
    61ba:	82 0f       	add	r24, r18
    61bc:	93 1f       	adc	r25, r19
    61be:	a4 1f       	adc	r26, r20
    61c0:	b5 1f       	adc	r27, r21
    61c2:	2d a5       	ldd	r18, Y+45	; 0x2d
    61c4:	3e a5       	ldd	r19, Y+46	; 0x2e
    61c6:	4f a5       	ldd	r20, Y+47	; 0x2f
    61c8:	58 a9       	ldd	r21, Y+48	; 0x30
    61ca:	6e 96       	adiw	r28, 0x1e	; 30
    61cc:	0f ac       	ldd	r0, Y+63	; 0x3f
    61ce:	6e 97       	sbiw	r28, 0x1e	; 30
    61d0:	04 c0       	rjmp	.+8      	; 0x61da <__stack+0x1db>
    61d2:	22 0f       	add	r18, r18
    61d4:	33 1f       	adc	r19, r19
    61d6:	44 1f       	adc	r20, r20
    61d8:	55 1f       	adc	r21, r21
    61da:	0a 94       	dec	r0
    61dc:	d2 f7       	brpl	.-12     	; 0x61d2 <__stack+0x1d3>
    61de:	28 17       	cp	r18, r24
    61e0:	39 07       	cpc	r19, r25
    61e2:	4a 07       	cpc	r20, r26
    61e4:	5b 07       	cpc	r21, r27
    61e6:	08 f5       	brcc	.+66     	; 0x622a <__stack+0x22b>
    61e8:	09 a9       	ldd	r16, Y+49	; 0x31
    61ea:	1a a9       	ldd	r17, Y+50	; 0x32
    61ec:	2b a9       	ldd	r18, Y+51	; 0x33
    61ee:	3c a9       	ldd	r19, Y+52	; 0x34
    61f0:	01 50       	subi	r16, 0x01	; 1
    61f2:	10 40       	sbci	r17, 0x00	; 0
    61f4:	20 40       	sbci	r18, 0x00	; 0
    61f6:	30 40       	sbci	r19, 0x00	; 0
    61f8:	09 ab       	std	Y+49, r16	; 0x31
    61fa:	1a ab       	std	Y+50, r17	; 0x32
    61fc:	2b ab       	std	Y+51, r18	; 0x33
    61fe:	3c ab       	std	Y+52, r19	; 0x34
    6200:	14 c0       	rjmp	.+40     	; 0x622a <__stack+0x22b>
    6202:	66 24       	eor	r6, r6
    6204:	77 24       	eor	r7, r7
    6206:	43 01       	movw	r8, r6
    6208:	21 e0       	ldi	r18, 0x01	; 1
    620a:	30 e0       	ldi	r19, 0x00	; 0
    620c:	40 e0       	ldi	r20, 0x00	; 0
    620e:	50 e0       	ldi	r21, 0x00	; 0
    6210:	29 ab       	std	Y+49, r18	; 0x31
    6212:	3a ab       	std	Y+50, r19	; 0x32
    6214:	4b ab       	std	Y+51, r20	; 0x33
    6216:	5c ab       	std	Y+52, r21	; 0x34
    6218:	0b c0       	rjmp	.+22     	; 0x6230 <__stack+0x231>
    621a:	66 24       	eor	r6, r6
    621c:	77 24       	eor	r7, r7
    621e:	43 01       	movw	r8, r6
    6220:	19 aa       	std	Y+49, r1	; 0x31
    6222:	1a aa       	std	Y+50, r1	; 0x32
    6224:	1b aa       	std	Y+51, r1	; 0x33
    6226:	1c aa       	std	Y+52, r1	; 0x34
    6228:	03 c0       	rjmp	.+6      	; 0x6230 <__stack+0x231>
    622a:	66 24       	eor	r6, r6
    622c:	77 24       	eor	r7, r7
    622e:	43 01       	movw	r8, r6
    6230:	fe 01       	movw	r30, r28
    6232:	71 96       	adiw	r30, 0x11	; 17
    6234:	88 e0       	ldi	r24, 0x08	; 8
    6236:	df 01       	movw	r26, r30
    6238:	1d 92       	st	X+, r1
    623a:	8a 95       	dec	r24
    623c:	e9 f7       	brne	.-6      	; 0x6238 <__stack+0x239>
    623e:	a9 a8       	ldd	r10, Y+49	; 0x31
    6240:	ba a8       	ldd	r11, Y+50	; 0x32
    6242:	cb a8       	ldd	r12, Y+51	; 0x33
    6244:	dc a8       	ldd	r13, Y+52	; 0x34
    6246:	a9 8a       	std	Y+17, r10	; 0x11
    6248:	ba 8a       	std	Y+18, r11	; 0x12
    624a:	cb 8a       	std	Y+19, r12	; 0x13
    624c:	dc 8a       	std	Y+20, r13	; 0x14
    624e:	6d 8a       	std	Y+21, r6	; 0x15
    6250:	7e 8a       	std	Y+22, r7	; 0x16
    6252:	8f 8a       	std	Y+23, r8	; 0x17
    6254:	98 8e       	std	Y+24, r9	; 0x18
    6256:	29 a9       	ldd	r18, Y+49	; 0x31
    6258:	3a 89       	ldd	r19, Y+18	; 0x12
    625a:	4b 89       	ldd	r20, Y+19	; 0x13
    625c:	5c 89       	ldd	r21, Y+20	; 0x14
    625e:	66 2d       	mov	r22, r6
    6260:	7e 89       	ldd	r23, Y+22	; 0x16
    6262:	8f 89       	ldd	r24, Y+23	; 0x17
    6264:	98 8d       	ldd	r25, Y+24	; 0x18
    6266:	c2 5a       	subi	r28, 0xA2	; 162
    6268:	df 4f       	sbci	r29, 0xFF	; 255
    626a:	e2 e1       	ldi	r30, 0x12	; 18
    626c:	0c 94 72 39 	jmp	0x72e4	; 0x72e4 <__epilogue_restores__>

00006270 <vfprintf>:
    6270:	2f 92       	push	r2
    6272:	3f 92       	push	r3
    6274:	4f 92       	push	r4
    6276:	5f 92       	push	r5
    6278:	6f 92       	push	r6
    627a:	7f 92       	push	r7
    627c:	8f 92       	push	r8
    627e:	9f 92       	push	r9
    6280:	af 92       	push	r10
    6282:	bf 92       	push	r11
    6284:	cf 92       	push	r12
    6286:	df 92       	push	r13
    6288:	ef 92       	push	r14
    628a:	ff 92       	push	r15
    628c:	0f 93       	push	r16
    628e:	1f 93       	push	r17
    6290:	df 93       	push	r29
    6292:	cf 93       	push	r28
    6294:	cd b7       	in	r28, 0x3d	; 61
    6296:	de b7       	in	r29, 0x3e	; 62
    6298:	61 97       	sbiw	r28, 0x11	; 17
    629a:	cd bf       	out	0x3d, r28	; 61
    629c:	de bf       	out	0x3e, r29	; 62
    629e:	3c 01       	movw	r6, r24
    62a0:	6e 87       	std	Y+14, r22	; 0x0e
    62a2:	7f 87       	std	Y+15, r23	; 0x0f
    62a4:	6a 01       	movw	r12, r20
    62a6:	fc 01       	movw	r30, r24
    62a8:	16 82       	std	Z+6, r1	; 0x06
    62aa:	17 82       	std	Z+7, r1	; 0x07
    62ac:	83 81       	ldd	r24, Z+3	; 0x03
    62ae:	81 fd       	sbrc	r24, 1
    62b0:	03 c0       	rjmp	.+6      	; 0x62b8 <vfprintf+0x48>
    62b2:	6f ef       	ldi	r22, 0xFF	; 255
    62b4:	7f ef       	ldi	r23, 0xFF	; 255
    62b6:	6f c3       	rjmp	.+1758   	; 0x6996 <vfprintf+0x726>
    62b8:	9e 01       	movw	r18, r28
    62ba:	2f 5f       	subi	r18, 0xFF	; 255
    62bc:	3f 4f       	sbci	r19, 0xFF	; 255
    62be:	28 8b       	std	Y+16, r18	; 0x10
    62c0:	39 8b       	std	Y+17, r19	; 0x11
    62c2:	f3 01       	movw	r30, r6
    62c4:	23 81       	ldd	r18, Z+3	; 0x03
    62c6:	ee 85       	ldd	r30, Y+14	; 0x0e
    62c8:	ff 85       	ldd	r31, Y+15	; 0x0f
    62ca:	23 fd       	sbrc	r18, 3
    62cc:	85 91       	lpm	r24, Z+
    62ce:	23 ff       	sbrs	r18, 3
    62d0:	81 91       	ld	r24, Z+
    62d2:	ee 87       	std	Y+14, r30	; 0x0e
    62d4:	ff 87       	std	Y+15, r31	; 0x0f
    62d6:	88 23       	and	r24, r24
    62d8:	09 f4       	brne	.+2      	; 0x62dc <vfprintf+0x6c>
    62da:	5a c3       	rjmp	.+1716   	; 0x6990 <vfprintf+0x720>
    62dc:	85 32       	cpi	r24, 0x25	; 37
    62de:	51 f4       	brne	.+20     	; 0x62f4 <vfprintf+0x84>
    62e0:	ee 85       	ldd	r30, Y+14	; 0x0e
    62e2:	ff 85       	ldd	r31, Y+15	; 0x0f
    62e4:	23 fd       	sbrc	r18, 3
    62e6:	85 91       	lpm	r24, Z+
    62e8:	23 ff       	sbrs	r18, 3
    62ea:	81 91       	ld	r24, Z+
    62ec:	ee 87       	std	Y+14, r30	; 0x0e
    62ee:	ff 87       	std	Y+15, r31	; 0x0f
    62f0:	85 32       	cpi	r24, 0x25	; 37
    62f2:	29 f4       	brne	.+10     	; 0x62fe <vfprintf+0x8e>
    62f4:	90 e0       	ldi	r25, 0x00	; 0
    62f6:	b3 01       	movw	r22, r6
    62f8:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    62fc:	e2 cf       	rjmp	.-60     	; 0x62c2 <vfprintf+0x52>
    62fe:	98 2f       	mov	r25, r24
    6300:	10 e0       	ldi	r17, 0x00	; 0
    6302:	88 24       	eor	r8, r8
    6304:	99 24       	eor	r9, r9
    6306:	10 32       	cpi	r17, 0x20	; 32
    6308:	b0 f4       	brcc	.+44     	; 0x6336 <vfprintf+0xc6>
    630a:	9b 32       	cpi	r25, 0x2B	; 43
    630c:	69 f0       	breq	.+26     	; 0x6328 <vfprintf+0xb8>
    630e:	9c 32       	cpi	r25, 0x2C	; 44
    6310:	28 f4       	brcc	.+10     	; 0x631c <vfprintf+0xac>
    6312:	90 32       	cpi	r25, 0x20	; 32
    6314:	51 f0       	breq	.+20     	; 0x632a <vfprintf+0xba>
    6316:	93 32       	cpi	r25, 0x23	; 35
    6318:	71 f4       	brne	.+28     	; 0x6336 <vfprintf+0xc6>
    631a:	0b c0       	rjmp	.+22     	; 0x6332 <vfprintf+0xc2>
    631c:	9d 32       	cpi	r25, 0x2D	; 45
    631e:	39 f0       	breq	.+14     	; 0x632e <vfprintf+0xbe>
    6320:	90 33       	cpi	r25, 0x30	; 48
    6322:	49 f4       	brne	.+18     	; 0x6336 <vfprintf+0xc6>
    6324:	11 60       	ori	r17, 0x01	; 1
    6326:	28 c0       	rjmp	.+80     	; 0x6378 <vfprintf+0x108>
    6328:	12 60       	ori	r17, 0x02	; 2
    632a:	14 60       	ori	r17, 0x04	; 4
    632c:	25 c0       	rjmp	.+74     	; 0x6378 <vfprintf+0x108>
    632e:	18 60       	ori	r17, 0x08	; 8
    6330:	23 c0       	rjmp	.+70     	; 0x6378 <vfprintf+0x108>
    6332:	10 61       	ori	r17, 0x10	; 16
    6334:	21 c0       	rjmp	.+66     	; 0x6378 <vfprintf+0x108>
    6336:	17 fd       	sbrc	r17, 7
    6338:	2a c0       	rjmp	.+84     	; 0x638e <vfprintf+0x11e>
    633a:	89 2f       	mov	r24, r25
    633c:	80 53       	subi	r24, 0x30	; 48
    633e:	8a 30       	cpi	r24, 0x0A	; 10
    6340:	78 f4       	brcc	.+30     	; 0x6360 <vfprintf+0xf0>
    6342:	16 ff       	sbrs	r17, 6
    6344:	06 c0       	rjmp	.+12     	; 0x6352 <vfprintf+0xe2>
    6346:	fa e0       	ldi	r31, 0x0A	; 10
    6348:	9f 9e       	mul	r9, r31
    634a:	90 2c       	mov	r9, r0
    634c:	11 24       	eor	r1, r1
    634e:	98 0e       	add	r9, r24
    6350:	13 c0       	rjmp	.+38     	; 0x6378 <vfprintf+0x108>
    6352:	3a e0       	ldi	r19, 0x0A	; 10
    6354:	83 9e       	mul	r8, r19
    6356:	80 2c       	mov	r8, r0
    6358:	11 24       	eor	r1, r1
    635a:	88 0e       	add	r8, r24
    635c:	10 62       	ori	r17, 0x20	; 32
    635e:	0c c0       	rjmp	.+24     	; 0x6378 <vfprintf+0x108>
    6360:	9e 32       	cpi	r25, 0x2E	; 46
    6362:	21 f4       	brne	.+8      	; 0x636c <vfprintf+0xfc>
    6364:	16 fd       	sbrc	r17, 6
    6366:	14 c3       	rjmp	.+1576   	; 0x6990 <vfprintf+0x720>
    6368:	10 64       	ori	r17, 0x40	; 64
    636a:	06 c0       	rjmp	.+12     	; 0x6378 <vfprintf+0x108>
    636c:	9c 36       	cpi	r25, 0x6C	; 108
    636e:	11 f4       	brne	.+4      	; 0x6374 <vfprintf+0x104>
    6370:	10 68       	ori	r17, 0x80	; 128
    6372:	02 c0       	rjmp	.+4      	; 0x6378 <vfprintf+0x108>
    6374:	98 36       	cpi	r25, 0x68	; 104
    6376:	59 f4       	brne	.+22     	; 0x638e <vfprintf+0x11e>
    6378:	ee 85       	ldd	r30, Y+14	; 0x0e
    637a:	ff 85       	ldd	r31, Y+15	; 0x0f
    637c:	23 fd       	sbrc	r18, 3
    637e:	95 91       	lpm	r25, Z+
    6380:	23 ff       	sbrs	r18, 3
    6382:	91 91       	ld	r25, Z+
    6384:	ee 87       	std	Y+14, r30	; 0x0e
    6386:	ff 87       	std	Y+15, r31	; 0x0f
    6388:	99 23       	and	r25, r25
    638a:	09 f0       	breq	.+2      	; 0x638e <vfprintf+0x11e>
    638c:	bc cf       	rjmp	.-136    	; 0x6306 <vfprintf+0x96>
    638e:	89 2f       	mov	r24, r25
    6390:	85 54       	subi	r24, 0x45	; 69
    6392:	83 30       	cpi	r24, 0x03	; 3
    6394:	20 f4       	brcc	.+8      	; 0x639e <vfprintf+0x12e>
    6396:	81 2f       	mov	r24, r17
    6398:	80 61       	ori	r24, 0x10	; 16
    639a:	90 5e       	subi	r25, 0xE0	; 224
    639c:	07 c0       	rjmp	.+14     	; 0x63ac <vfprintf+0x13c>
    639e:	89 2f       	mov	r24, r25
    63a0:	85 56       	subi	r24, 0x65	; 101
    63a2:	83 30       	cpi	r24, 0x03	; 3
    63a4:	08 f0       	brcs	.+2      	; 0x63a8 <vfprintf+0x138>
    63a6:	9f c1       	rjmp	.+830    	; 0x66e6 <vfprintf+0x476>
    63a8:	81 2f       	mov	r24, r17
    63aa:	8f 7e       	andi	r24, 0xEF	; 239
    63ac:	86 fd       	sbrc	r24, 6
    63ae:	02 c0       	rjmp	.+4      	; 0x63b4 <vfprintf+0x144>
    63b0:	76 e0       	ldi	r23, 0x06	; 6
    63b2:	97 2e       	mov	r9, r23
    63b4:	6f e3       	ldi	r22, 0x3F	; 63
    63b6:	f6 2e       	mov	r15, r22
    63b8:	f8 22       	and	r15, r24
    63ba:	95 36       	cpi	r25, 0x65	; 101
    63bc:	19 f4       	brne	.+6      	; 0x63c4 <vfprintf+0x154>
    63be:	f0 e4       	ldi	r31, 0x40	; 64
    63c0:	ff 2a       	or	r15, r31
    63c2:	07 c0       	rjmp	.+14     	; 0x63d2 <vfprintf+0x162>
    63c4:	96 36       	cpi	r25, 0x66	; 102
    63c6:	19 f4       	brne	.+6      	; 0x63ce <vfprintf+0x15e>
    63c8:	20 e8       	ldi	r18, 0x80	; 128
    63ca:	f2 2a       	or	r15, r18
    63cc:	02 c0       	rjmp	.+4      	; 0x63d2 <vfprintf+0x162>
    63ce:	91 10       	cpse	r9, r1
    63d0:	9a 94       	dec	r9
    63d2:	f7 fe       	sbrs	r15, 7
    63d4:	0a c0       	rjmp	.+20     	; 0x63ea <vfprintf+0x17a>
    63d6:	3b e3       	ldi	r19, 0x3B	; 59
    63d8:	39 15       	cp	r19, r9
    63da:	18 f4       	brcc	.+6      	; 0x63e2 <vfprintf+0x172>
    63dc:	5c e3       	ldi	r21, 0x3C	; 60
    63de:	b5 2e       	mov	r11, r21
    63e0:	02 c0       	rjmp	.+4      	; 0x63e6 <vfprintf+0x176>
    63e2:	b9 2c       	mov	r11, r9
    63e4:	b3 94       	inc	r11
    63e6:	27 e0       	ldi	r18, 0x07	; 7
    63e8:	09 c0       	rjmp	.+18     	; 0x63fc <vfprintf+0x18c>
    63ea:	47 e0       	ldi	r20, 0x07	; 7
    63ec:	49 15       	cp	r20, r9
    63ee:	20 f4       	brcc	.+8      	; 0x63f8 <vfprintf+0x188>
    63f0:	bb 24       	eor	r11, r11
    63f2:	47 e0       	ldi	r20, 0x07	; 7
    63f4:	94 2e       	mov	r9, r20
    63f6:	f7 cf       	rjmp	.-18     	; 0x63e6 <vfprintf+0x176>
    63f8:	29 2d       	mov	r18, r9
    63fa:	bb 24       	eor	r11, r11
    63fc:	c6 01       	movw	r24, r12
    63fe:	04 96       	adiw	r24, 0x04	; 4
    6400:	8c 87       	std	Y+12, r24	; 0x0c
    6402:	9d 87       	std	Y+13, r25	; 0x0d
    6404:	f6 01       	movw	r30, r12
    6406:	60 81       	ld	r22, Z
    6408:	71 81       	ldd	r23, Z+1	; 0x01
    640a:	82 81       	ldd	r24, Z+2	; 0x02
    640c:	93 81       	ldd	r25, Z+3	; 0x03
    640e:	ae 01       	movw	r20, r28
    6410:	4f 5f       	subi	r20, 0xFF	; 255
    6412:	5f 4f       	sbci	r21, 0xFF	; 255
    6414:	0b 2d       	mov	r16, r11
    6416:	0e 94 19 3b 	call	0x7632	; 0x7632 <__ftoa_engine>
    641a:	6c 01       	movw	r12, r24
    641c:	09 81       	ldd	r16, Y+1	; 0x01
    641e:	20 2e       	mov	r2, r16
    6420:	33 24       	eor	r3, r3
    6422:	00 ff       	sbrs	r16, 0
    6424:	04 c0       	rjmp	.+8      	; 0x642e <vfprintf+0x1be>
    6426:	03 fd       	sbrc	r16, 3
    6428:	02 c0       	rjmp	.+4      	; 0x642e <vfprintf+0x1be>
    642a:	1d e2       	ldi	r17, 0x2D	; 45
    642c:	09 c0       	rjmp	.+18     	; 0x6440 <vfprintf+0x1d0>
    642e:	f1 fe       	sbrs	r15, 1
    6430:	02 c0       	rjmp	.+4      	; 0x6436 <vfprintf+0x1c6>
    6432:	1b e2       	ldi	r17, 0x2B	; 43
    6434:	05 c0       	rjmp	.+10     	; 0x6440 <vfprintf+0x1d0>
    6436:	f2 fc       	sbrc	r15, 2
    6438:	02 c0       	rjmp	.+4      	; 0x643e <vfprintf+0x1ce>
    643a:	10 e0       	ldi	r17, 0x00	; 0
    643c:	01 c0       	rjmp	.+2      	; 0x6440 <vfprintf+0x1d0>
    643e:	10 e2       	ldi	r17, 0x20	; 32
    6440:	c1 01       	movw	r24, r2
    6442:	8c 70       	andi	r24, 0x0C	; 12
    6444:	90 70       	andi	r25, 0x00	; 0
    6446:	89 2b       	or	r24, r25
    6448:	b9 f1       	breq	.+110    	; 0x64b8 <vfprintf+0x248>
    644a:	11 23       	and	r17, r17
    644c:	11 f4       	brne	.+4      	; 0x6452 <vfprintf+0x1e2>
    644e:	83 e0       	ldi	r24, 0x03	; 3
    6450:	01 c0       	rjmp	.+2      	; 0x6454 <vfprintf+0x1e4>
    6452:	84 e0       	ldi	r24, 0x04	; 4
    6454:	88 15       	cp	r24, r8
    6456:	10 f0       	brcs	.+4      	; 0x645c <vfprintf+0x1ec>
    6458:	88 24       	eor	r8, r8
    645a:	0a c0       	rjmp	.+20     	; 0x6470 <vfprintf+0x200>
    645c:	88 1a       	sub	r8, r24
    645e:	f3 fc       	sbrc	r15, 3
    6460:	07 c0       	rjmp	.+14     	; 0x6470 <vfprintf+0x200>
    6462:	80 e2       	ldi	r24, 0x20	; 32
    6464:	90 e0       	ldi	r25, 0x00	; 0
    6466:	b3 01       	movw	r22, r6
    6468:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    646c:	8a 94       	dec	r8
    646e:	c9 f7       	brne	.-14     	; 0x6462 <vfprintf+0x1f2>
    6470:	11 23       	and	r17, r17
    6472:	29 f0       	breq	.+10     	; 0x647e <vfprintf+0x20e>
    6474:	81 2f       	mov	r24, r17
    6476:	90 e0       	ldi	r25, 0x00	; 0
    6478:	b3 01       	movw	r22, r6
    647a:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    647e:	23 fe       	sbrs	r2, 3
    6480:	03 c0       	rjmp	.+6      	; 0x6488 <vfprintf+0x218>
    6482:	03 e3       	ldi	r16, 0x33	; 51
    6484:	12 e0       	ldi	r17, 0x02	; 2
    6486:	0e c0       	rjmp	.+28     	; 0x64a4 <vfprintf+0x234>
    6488:	07 e3       	ldi	r16, 0x37	; 55
    648a:	12 e0       	ldi	r17, 0x02	; 2
    648c:	0b c0       	rjmp	.+22     	; 0x64a4 <vfprintf+0x234>
    648e:	e1 14       	cp	r14, r1
    6490:	f1 04       	cpc	r15, r1
    6492:	09 f0       	breq	.+2      	; 0x6496 <vfprintf+0x226>
    6494:	80 52       	subi	r24, 0x20	; 32
    6496:	90 e0       	ldi	r25, 0x00	; 0
    6498:	b3 01       	movw	r22, r6
    649a:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    649e:	0f 5f       	subi	r16, 0xFF	; 255
    64a0:	1f 4f       	sbci	r17, 0xFF	; 255
    64a2:	05 c0       	rjmp	.+10     	; 0x64ae <vfprintf+0x23e>
    64a4:	ef 2c       	mov	r14, r15
    64a6:	ff 24       	eor	r15, r15
    64a8:	f0 e1       	ldi	r31, 0x10	; 16
    64aa:	ef 22       	and	r14, r31
    64ac:	ff 24       	eor	r15, r15
    64ae:	f8 01       	movw	r30, r16
    64b0:	84 91       	lpm	r24, Z+
    64b2:	88 23       	and	r24, r24
    64b4:	61 f7       	brne	.-40     	; 0x648e <vfprintf+0x21e>
    64b6:	14 c1       	rjmp	.+552    	; 0x66e0 <vfprintf+0x470>
    64b8:	f7 fe       	sbrs	r15, 7
    64ba:	12 c0       	rjmp	.+36     	; 0x64e0 <vfprintf+0x270>
    64bc:	bc 0c       	add	r11, r12
    64be:	24 fe       	sbrs	r2, 4
    64c0:	04 c0       	rjmp	.+8      	; 0x64ca <vfprintf+0x25a>
    64c2:	8a 81       	ldd	r24, Y+2	; 0x02
    64c4:	81 33       	cpi	r24, 0x31	; 49
    64c6:	09 f4       	brne	.+2      	; 0x64ca <vfprintf+0x25a>
    64c8:	ba 94       	dec	r11
    64ca:	1b 14       	cp	r1, r11
    64cc:	1c f0       	brlt	.+6      	; 0x64d4 <vfprintf+0x264>
    64ce:	bb 24       	eor	r11, r11
    64d0:	b3 94       	inc	r11
    64d2:	2d c0       	rjmp	.+90     	; 0x652e <vfprintf+0x2be>
    64d4:	f8 e0       	ldi	r31, 0x08	; 8
    64d6:	fb 15       	cp	r31, r11
    64d8:	50 f5       	brcc	.+84     	; 0x652e <vfprintf+0x2be>
    64da:	38 e0       	ldi	r19, 0x08	; 8
    64dc:	b3 2e       	mov	r11, r19
    64de:	27 c0       	rjmp	.+78     	; 0x652e <vfprintf+0x2be>
    64e0:	f6 fc       	sbrc	r15, 6
    64e2:	25 c0       	rjmp	.+74     	; 0x652e <vfprintf+0x2be>
    64e4:	89 2d       	mov	r24, r9
    64e6:	90 e0       	ldi	r25, 0x00	; 0
    64e8:	8c 15       	cp	r24, r12
    64ea:	9d 05       	cpc	r25, r13
    64ec:	4c f0       	brlt	.+18     	; 0x6500 <vfprintf+0x290>
    64ee:	2c ef       	ldi	r18, 0xFC	; 252
    64f0:	c2 16       	cp	r12, r18
    64f2:	2f ef       	ldi	r18, 0xFF	; 255
    64f4:	d2 06       	cpc	r13, r18
    64f6:	24 f0       	brlt	.+8      	; 0x6500 <vfprintf+0x290>
    64f8:	30 e8       	ldi	r19, 0x80	; 128
    64fa:	f3 2a       	or	r15, r19
    64fc:	01 c0       	rjmp	.+2      	; 0x6500 <vfprintf+0x290>
    64fe:	9a 94       	dec	r9
    6500:	99 20       	and	r9, r9
    6502:	49 f0       	breq	.+18     	; 0x6516 <vfprintf+0x2a6>
    6504:	e2 e0       	ldi	r30, 0x02	; 2
    6506:	f0 e0       	ldi	r31, 0x00	; 0
    6508:	ec 0f       	add	r30, r28
    650a:	fd 1f       	adc	r31, r29
    650c:	e9 0d       	add	r30, r9
    650e:	f1 1d       	adc	r31, r1
    6510:	80 81       	ld	r24, Z
    6512:	80 33       	cpi	r24, 0x30	; 48
    6514:	a1 f3       	breq	.-24     	; 0x64fe <vfprintf+0x28e>
    6516:	f7 fe       	sbrs	r15, 7
    6518:	0a c0       	rjmp	.+20     	; 0x652e <vfprintf+0x2be>
    651a:	b9 2c       	mov	r11, r9
    651c:	b3 94       	inc	r11
    651e:	89 2d       	mov	r24, r9
    6520:	90 e0       	ldi	r25, 0x00	; 0
    6522:	c8 16       	cp	r12, r24
    6524:	d9 06       	cpc	r13, r25
    6526:	14 f0       	brlt	.+4      	; 0x652c <vfprintf+0x2bc>
    6528:	99 24       	eor	r9, r9
    652a:	01 c0       	rjmp	.+2      	; 0x652e <vfprintf+0x2be>
    652c:	9c 18       	sub	r9, r12
    652e:	f7 fc       	sbrc	r15, 7
    6530:	03 c0       	rjmp	.+6      	; 0x6538 <vfprintf+0x2c8>
    6532:	25 e0       	ldi	r18, 0x05	; 5
    6534:	30 e0       	ldi	r19, 0x00	; 0
    6536:	09 c0       	rjmp	.+18     	; 0x654a <vfprintf+0x2da>
    6538:	1c 14       	cp	r1, r12
    653a:	1d 04       	cpc	r1, r13
    653c:	1c f0       	brlt	.+6      	; 0x6544 <vfprintf+0x2d4>
    653e:	21 e0       	ldi	r18, 0x01	; 1
    6540:	30 e0       	ldi	r19, 0x00	; 0
    6542:	03 c0       	rjmp	.+6      	; 0x654a <vfprintf+0x2da>
    6544:	96 01       	movw	r18, r12
    6546:	2f 5f       	subi	r18, 0xFF	; 255
    6548:	3f 4f       	sbci	r19, 0xFF	; 255
    654a:	11 23       	and	r17, r17
    654c:	11 f0       	breq	.+4      	; 0x6552 <vfprintf+0x2e2>
    654e:	2f 5f       	subi	r18, 0xFF	; 255
    6550:	3f 4f       	sbci	r19, 0xFF	; 255
    6552:	99 20       	and	r9, r9
    6554:	29 f0       	breq	.+10     	; 0x6560 <vfprintf+0x2f0>
    6556:	89 2d       	mov	r24, r9
    6558:	90 e0       	ldi	r25, 0x00	; 0
    655a:	01 96       	adiw	r24, 0x01	; 1
    655c:	28 0f       	add	r18, r24
    655e:	39 1f       	adc	r19, r25
    6560:	88 2d       	mov	r24, r8
    6562:	90 e0       	ldi	r25, 0x00	; 0
    6564:	28 17       	cp	r18, r24
    6566:	39 07       	cpc	r19, r25
    6568:	14 f0       	brlt	.+4      	; 0x656e <vfprintf+0x2fe>
    656a:	88 24       	eor	r8, r8
    656c:	01 c0       	rjmp	.+2      	; 0x6570 <vfprintf+0x300>
    656e:	82 1a       	sub	r8, r18
    6570:	4f 2c       	mov	r4, r15
    6572:	55 24       	eor	r5, r5
    6574:	c2 01       	movw	r24, r4
    6576:	89 70       	andi	r24, 0x09	; 9
    6578:	90 70       	andi	r25, 0x00	; 0
    657a:	89 2b       	or	r24, r25
    657c:	39 f0       	breq	.+14     	; 0x658c <vfprintf+0x31c>
    657e:	08 c0       	rjmp	.+16     	; 0x6590 <vfprintf+0x320>
    6580:	80 e2       	ldi	r24, 0x20	; 32
    6582:	90 e0       	ldi	r25, 0x00	; 0
    6584:	b3 01       	movw	r22, r6
    6586:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    658a:	8a 94       	dec	r8
    658c:	88 20       	and	r8, r8
    658e:	c1 f7       	brne	.-16     	; 0x6580 <vfprintf+0x310>
    6590:	11 23       	and	r17, r17
    6592:	29 f0       	breq	.+10     	; 0x659e <vfprintf+0x32e>
    6594:	81 2f       	mov	r24, r17
    6596:	90 e0       	ldi	r25, 0x00	; 0
    6598:	b3 01       	movw	r22, r6
    659a:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    659e:	43 fe       	sbrs	r4, 3
    65a0:	07 c0       	rjmp	.+14     	; 0x65b0 <vfprintf+0x340>
    65a2:	08 c0       	rjmp	.+16     	; 0x65b4 <vfprintf+0x344>
    65a4:	80 e3       	ldi	r24, 0x30	; 48
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	b3 01       	movw	r22, r6
    65aa:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    65ae:	8a 94       	dec	r8
    65b0:	88 20       	and	r8, r8
    65b2:	c1 f7       	brne	.-16     	; 0x65a4 <vfprintf+0x334>
    65b4:	f7 fe       	sbrs	r15, 7
    65b6:	46 c0       	rjmp	.+140    	; 0x6644 <vfprintf+0x3d4>
    65b8:	86 01       	movw	r16, r12
    65ba:	d7 fe       	sbrs	r13, 7
    65bc:	02 c0       	rjmp	.+4      	; 0x65c2 <vfprintf+0x352>
    65be:	00 e0       	ldi	r16, 0x00	; 0
    65c0:	10 e0       	ldi	r17, 0x00	; 0
    65c2:	76 01       	movw	r14, r12
    65c4:	08 94       	sec
    65c6:	e1 1c       	adc	r14, r1
    65c8:	f1 1c       	adc	r15, r1
    65ca:	e0 1a       	sub	r14, r16
    65cc:	f1 0a       	sbc	r15, r17
    65ce:	41 e0       	ldi	r20, 0x01	; 1
    65d0:	50 e0       	ldi	r21, 0x00	; 0
    65d2:	4c 0f       	add	r20, r28
    65d4:	5d 1f       	adc	r21, r29
    65d6:	e4 0e       	add	r14, r20
    65d8:	f5 1e       	adc	r15, r21
    65da:	26 01       	movw	r4, r12
    65dc:	4b 18       	sub	r4, r11
    65de:	51 08       	sbc	r5, r1
    65e0:	89 2d       	mov	r24, r9
    65e2:	90 e0       	ldi	r25, 0x00	; 0
    65e4:	aa 24       	eor	r10, r10
    65e6:	bb 24       	eor	r11, r11
    65e8:	a8 1a       	sub	r10, r24
    65ea:	b9 0a       	sbc	r11, r25
    65ec:	5f ef       	ldi	r21, 0xFF	; 255
    65ee:	0f 3f       	cpi	r16, 0xFF	; 255
    65f0:	15 07       	cpc	r17, r21
    65f2:	29 f4       	brne	.+10     	; 0x65fe <vfprintf+0x38e>
    65f4:	8e e2       	ldi	r24, 0x2E	; 46
    65f6:	90 e0       	ldi	r25, 0x00	; 0
    65f8:	b3 01       	movw	r22, r6
    65fa:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    65fe:	c0 16       	cp	r12, r16
    6600:	d1 06       	cpc	r13, r17
    6602:	34 f0       	brlt	.+12     	; 0x6610 <vfprintf+0x3a0>
    6604:	40 16       	cp	r4, r16
    6606:	51 06       	cpc	r5, r17
    6608:	1c f4       	brge	.+6      	; 0x6610 <vfprintf+0x3a0>
    660a:	f7 01       	movw	r30, r14
    660c:	80 81       	ld	r24, Z
    660e:	01 c0       	rjmp	.+2      	; 0x6612 <vfprintf+0x3a2>
    6610:	80 e3       	ldi	r24, 0x30	; 48
    6612:	01 50       	subi	r16, 0x01	; 1
    6614:	10 40       	sbci	r17, 0x00	; 0
    6616:	08 94       	sec
    6618:	e1 1c       	adc	r14, r1
    661a:	f1 1c       	adc	r15, r1
    661c:	0a 15       	cp	r16, r10
    661e:	1b 05       	cpc	r17, r11
    6620:	2c f0       	brlt	.+10     	; 0x662c <vfprintf+0x3bc>
    6622:	90 e0       	ldi	r25, 0x00	; 0
    6624:	b3 01       	movw	r22, r6
    6626:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    662a:	e0 cf       	rjmp	.-64     	; 0x65ec <vfprintf+0x37c>
    662c:	0c 15       	cp	r16, r12
    662e:	1d 05       	cpc	r17, r13
    6630:	39 f4       	brne	.+14     	; 0x6640 <vfprintf+0x3d0>
    6632:	9a 81       	ldd	r25, Y+2	; 0x02
    6634:	96 33       	cpi	r25, 0x36	; 54
    6636:	18 f4       	brcc	.+6      	; 0x663e <vfprintf+0x3ce>
    6638:	95 33       	cpi	r25, 0x35	; 53
    663a:	11 f4       	brne	.+4      	; 0x6640 <vfprintf+0x3d0>
    663c:	24 fe       	sbrs	r2, 4
    663e:	81 e3       	ldi	r24, 0x31	; 49
    6640:	90 e0       	ldi	r25, 0x00	; 0
    6642:	4b c0       	rjmp	.+150    	; 0x66da <vfprintf+0x46a>
    6644:	8a 81       	ldd	r24, Y+2	; 0x02
    6646:	81 33       	cpi	r24, 0x31	; 49
    6648:	09 f0       	breq	.+2      	; 0x664c <vfprintf+0x3dc>
    664a:	0f 7e       	andi	r16, 0xEF	; 239
    664c:	90 e0       	ldi	r25, 0x00	; 0
    664e:	b3 01       	movw	r22, r6
    6650:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    6654:	99 20       	and	r9, r9
    6656:	a1 f0       	breq	.+40     	; 0x6680 <vfprintf+0x410>
    6658:	8e e2       	ldi	r24, 0x2E	; 46
    665a:	90 e0       	ldi	r25, 0x00	; 0
    665c:	b3 01       	movw	r22, r6
    665e:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    6662:	12 e0       	ldi	r17, 0x02	; 2
    6664:	e1 e0       	ldi	r30, 0x01	; 1
    6666:	f0 e0       	ldi	r31, 0x00	; 0
    6668:	ec 0f       	add	r30, r28
    666a:	fd 1f       	adc	r31, r29
    666c:	e1 0f       	add	r30, r17
    666e:	f1 1d       	adc	r31, r1
    6670:	1f 5f       	subi	r17, 0xFF	; 255
    6672:	80 81       	ld	r24, Z
    6674:	90 e0       	ldi	r25, 0x00	; 0
    6676:	b3 01       	movw	r22, r6
    6678:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    667c:	9a 94       	dec	r9
    667e:	91 f7       	brne	.-28     	; 0x6664 <vfprintf+0x3f4>
    6680:	44 fc       	sbrc	r4, 4
    6682:	03 c0       	rjmp	.+6      	; 0x668a <vfprintf+0x41a>
    6684:	85 e6       	ldi	r24, 0x65	; 101
    6686:	90 e0       	ldi	r25, 0x00	; 0
    6688:	02 c0       	rjmp	.+4      	; 0x668e <vfprintf+0x41e>
    668a:	85 e4       	ldi	r24, 0x45	; 69
    668c:	90 e0       	ldi	r25, 0x00	; 0
    668e:	b3 01       	movw	r22, r6
    6690:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    6694:	d7 fc       	sbrc	r13, 7
    6696:	05 c0       	rjmp	.+10     	; 0x66a2 <vfprintf+0x432>
    6698:	c1 14       	cp	r12, r1
    669a:	d1 04       	cpc	r13, r1
    669c:	41 f4       	brne	.+16     	; 0x66ae <vfprintf+0x43e>
    669e:	04 ff       	sbrs	r16, 4
    66a0:	06 c0       	rjmp	.+12     	; 0x66ae <vfprintf+0x43e>
    66a2:	d0 94       	com	r13
    66a4:	c1 94       	neg	r12
    66a6:	d1 08       	sbc	r13, r1
    66a8:	d3 94       	inc	r13
    66aa:	8d e2       	ldi	r24, 0x2D	; 45
    66ac:	01 c0       	rjmp	.+2      	; 0x66b0 <vfprintf+0x440>
    66ae:	8b e2       	ldi	r24, 0x2B	; 43
    66b0:	90 e0       	ldi	r25, 0x00	; 0
    66b2:	b3 01       	movw	r22, r6
    66b4:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    66b8:	80 e3       	ldi	r24, 0x30	; 48
    66ba:	05 c0       	rjmp	.+10     	; 0x66c6 <vfprintf+0x456>
    66bc:	8f 5f       	subi	r24, 0xFF	; 255
    66be:	26 ef       	ldi	r18, 0xF6	; 246
    66c0:	3f ef       	ldi	r19, 0xFF	; 255
    66c2:	c2 0e       	add	r12, r18
    66c4:	d3 1e       	adc	r13, r19
    66c6:	3a e0       	ldi	r19, 0x0A	; 10
    66c8:	c3 16       	cp	r12, r19
    66ca:	d1 04       	cpc	r13, r1
    66cc:	bc f7       	brge	.-18     	; 0x66bc <vfprintf+0x44c>
    66ce:	90 e0       	ldi	r25, 0x00	; 0
    66d0:	b3 01       	movw	r22, r6
    66d2:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    66d6:	c6 01       	movw	r24, r12
    66d8:	c0 96       	adiw	r24, 0x30	; 48
    66da:	b3 01       	movw	r22, r6
    66dc:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    66e0:	cc 84       	ldd	r12, Y+12	; 0x0c
    66e2:	dd 84       	ldd	r13, Y+13	; 0x0d
    66e4:	52 c1       	rjmp	.+676    	; 0x698a <vfprintf+0x71a>
    66e6:	93 36       	cpi	r25, 0x63	; 99
    66e8:	31 f0       	breq	.+12     	; 0x66f6 <vfprintf+0x486>
    66ea:	93 37       	cpi	r25, 0x73	; 115
    66ec:	99 f0       	breq	.+38     	; 0x6714 <vfprintf+0x4a4>
    66ee:	93 35       	cpi	r25, 0x53	; 83
    66f0:	09 f0       	breq	.+2      	; 0x66f4 <vfprintf+0x484>
    66f2:	59 c0       	rjmp	.+178    	; 0x67a6 <vfprintf+0x536>
    66f4:	23 c0       	rjmp	.+70     	; 0x673c <vfprintf+0x4cc>
    66f6:	f6 01       	movw	r30, r12
    66f8:	80 81       	ld	r24, Z
    66fa:	89 83       	std	Y+1, r24	; 0x01
    66fc:	5e 01       	movw	r10, r28
    66fe:	08 94       	sec
    6700:	a1 1c       	adc	r10, r1
    6702:	b1 1c       	adc	r11, r1
    6704:	22 e0       	ldi	r18, 0x02	; 2
    6706:	30 e0       	ldi	r19, 0x00	; 0
    6708:	c2 0e       	add	r12, r18
    670a:	d3 1e       	adc	r13, r19
    670c:	21 e0       	ldi	r18, 0x01	; 1
    670e:	e2 2e       	mov	r14, r18
    6710:	f1 2c       	mov	r15, r1
    6712:	12 c0       	rjmp	.+36     	; 0x6738 <vfprintf+0x4c8>
    6714:	f6 01       	movw	r30, r12
    6716:	a0 80       	ld	r10, Z
    6718:	b1 80       	ldd	r11, Z+1	; 0x01
    671a:	16 fd       	sbrc	r17, 6
    671c:	03 c0       	rjmp	.+6      	; 0x6724 <vfprintf+0x4b4>
    671e:	6f ef       	ldi	r22, 0xFF	; 255
    6720:	7f ef       	ldi	r23, 0xFF	; 255
    6722:	02 c0       	rjmp	.+4      	; 0x6728 <vfprintf+0x4b8>
    6724:	69 2d       	mov	r22, r9
    6726:	70 e0       	ldi	r23, 0x00	; 0
    6728:	22 e0       	ldi	r18, 0x02	; 2
    672a:	30 e0       	ldi	r19, 0x00	; 0
    672c:	c2 0e       	add	r12, r18
    672e:	d3 1e       	adc	r13, r19
    6730:	c5 01       	movw	r24, r10
    6732:	0e 94 38 3c 	call	0x7870	; 0x7870 <strnlen>
    6736:	7c 01       	movw	r14, r24
    6738:	1f 77       	andi	r17, 0x7F	; 127
    673a:	13 c0       	rjmp	.+38     	; 0x6762 <vfprintf+0x4f2>
    673c:	f6 01       	movw	r30, r12
    673e:	a0 80       	ld	r10, Z
    6740:	b1 80       	ldd	r11, Z+1	; 0x01
    6742:	16 fd       	sbrc	r17, 6
    6744:	03 c0       	rjmp	.+6      	; 0x674c <vfprintf+0x4dc>
    6746:	6f ef       	ldi	r22, 0xFF	; 255
    6748:	7f ef       	ldi	r23, 0xFF	; 255
    674a:	02 c0       	rjmp	.+4      	; 0x6750 <vfprintf+0x4e0>
    674c:	69 2d       	mov	r22, r9
    674e:	70 e0       	ldi	r23, 0x00	; 0
    6750:	22 e0       	ldi	r18, 0x02	; 2
    6752:	30 e0       	ldi	r19, 0x00	; 0
    6754:	c2 0e       	add	r12, r18
    6756:	d3 1e       	adc	r13, r19
    6758:	c5 01       	movw	r24, r10
    675a:	0e 94 22 3c 	call	0x7844	; 0x7844 <strnlen_P>
    675e:	7c 01       	movw	r14, r24
    6760:	10 68       	ori	r17, 0x80	; 128
    6762:	13 ff       	sbrs	r17, 3
    6764:	07 c0       	rjmp	.+14     	; 0x6774 <vfprintf+0x504>
    6766:	1b c0       	rjmp	.+54     	; 0x679e <vfprintf+0x52e>
    6768:	80 e2       	ldi	r24, 0x20	; 32
    676a:	90 e0       	ldi	r25, 0x00	; 0
    676c:	b3 01       	movw	r22, r6
    676e:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    6772:	8a 94       	dec	r8
    6774:	88 2d       	mov	r24, r8
    6776:	90 e0       	ldi	r25, 0x00	; 0
    6778:	e8 16       	cp	r14, r24
    677a:	f9 06       	cpc	r15, r25
    677c:	a8 f3       	brcs	.-22     	; 0x6768 <vfprintf+0x4f8>
    677e:	0f c0       	rjmp	.+30     	; 0x679e <vfprintf+0x52e>
    6780:	f5 01       	movw	r30, r10
    6782:	17 fd       	sbrc	r17, 7
    6784:	85 91       	lpm	r24, Z+
    6786:	17 ff       	sbrs	r17, 7
    6788:	81 91       	ld	r24, Z+
    678a:	5f 01       	movw	r10, r30
    678c:	90 e0       	ldi	r25, 0x00	; 0
    678e:	b3 01       	movw	r22, r6
    6790:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    6794:	81 10       	cpse	r8, r1
    6796:	8a 94       	dec	r8
    6798:	08 94       	sec
    679a:	e1 08       	sbc	r14, r1
    679c:	f1 08       	sbc	r15, r1
    679e:	e1 14       	cp	r14, r1
    67a0:	f1 04       	cpc	r15, r1
    67a2:	71 f7       	brne	.-36     	; 0x6780 <vfprintf+0x510>
    67a4:	f2 c0       	rjmp	.+484    	; 0x698a <vfprintf+0x71a>
    67a6:	94 36       	cpi	r25, 0x64	; 100
    67a8:	11 f0       	breq	.+4      	; 0x67ae <vfprintf+0x53e>
    67aa:	99 36       	cpi	r25, 0x69	; 105
    67ac:	89 f5       	brne	.+98     	; 0x6810 <vfprintf+0x5a0>
    67ae:	17 ff       	sbrs	r17, 7
    67b0:	08 c0       	rjmp	.+16     	; 0x67c2 <vfprintf+0x552>
    67b2:	f6 01       	movw	r30, r12
    67b4:	20 81       	ld	r18, Z
    67b6:	31 81       	ldd	r19, Z+1	; 0x01
    67b8:	42 81       	ldd	r20, Z+2	; 0x02
    67ba:	53 81       	ldd	r21, Z+3	; 0x03
    67bc:	84 e0       	ldi	r24, 0x04	; 4
    67be:	90 e0       	ldi	r25, 0x00	; 0
    67c0:	0a c0       	rjmp	.+20     	; 0x67d6 <vfprintf+0x566>
    67c2:	f6 01       	movw	r30, r12
    67c4:	80 81       	ld	r24, Z
    67c6:	91 81       	ldd	r25, Z+1	; 0x01
    67c8:	9c 01       	movw	r18, r24
    67ca:	44 27       	eor	r20, r20
    67cc:	37 fd       	sbrc	r19, 7
    67ce:	40 95       	com	r20
    67d0:	54 2f       	mov	r21, r20
    67d2:	82 e0       	ldi	r24, 0x02	; 2
    67d4:	90 e0       	ldi	r25, 0x00	; 0
    67d6:	c8 0e       	add	r12, r24
    67d8:	d9 1e       	adc	r13, r25
    67da:	9f e6       	ldi	r25, 0x6F	; 111
    67dc:	f9 2e       	mov	r15, r25
    67de:	f1 22       	and	r15, r17
    67e0:	57 ff       	sbrs	r21, 7
    67e2:	09 c0       	rjmp	.+18     	; 0x67f6 <vfprintf+0x586>
    67e4:	50 95       	com	r21
    67e6:	40 95       	com	r20
    67e8:	30 95       	com	r19
    67ea:	21 95       	neg	r18
    67ec:	3f 4f       	sbci	r19, 0xFF	; 255
    67ee:	4f 4f       	sbci	r20, 0xFF	; 255
    67f0:	5f 4f       	sbci	r21, 0xFF	; 255
    67f2:	90 e8       	ldi	r25, 0x80	; 128
    67f4:	f9 2a       	or	r15, r25
    67f6:	ca 01       	movw	r24, r20
    67f8:	b9 01       	movw	r22, r18
    67fa:	ae 01       	movw	r20, r28
    67fc:	4f 5f       	subi	r20, 0xFF	; 255
    67fe:	5f 4f       	sbci	r21, 0xFF	; 255
    6800:	2a e0       	ldi	r18, 0x0A	; 10
    6802:	30 e0       	ldi	r19, 0x00	; 0
    6804:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__ultoa_invert>
    6808:	e8 2e       	mov	r14, r24
    680a:	e8 89       	ldd	r30, Y+16	; 0x10
    680c:	ee 1a       	sub	r14, r30
    680e:	41 c0       	rjmp	.+130    	; 0x6892 <vfprintf+0x622>
    6810:	95 37       	cpi	r25, 0x75	; 117
    6812:	21 f4       	brne	.+8      	; 0x681c <vfprintf+0x5ac>
    6814:	1f 7e       	andi	r17, 0xEF	; 239
    6816:	2a e0       	ldi	r18, 0x0A	; 10
    6818:	30 e0       	ldi	r19, 0x00	; 0
    681a:	1c c0       	rjmp	.+56     	; 0x6854 <vfprintf+0x5e4>
    681c:	19 7f       	andi	r17, 0xF9	; 249
    681e:	9f 36       	cpi	r25, 0x6F	; 111
    6820:	61 f0       	breq	.+24     	; 0x683a <vfprintf+0x5ca>
    6822:	90 37       	cpi	r25, 0x70	; 112
    6824:	20 f4       	brcc	.+8      	; 0x682e <vfprintf+0x5be>
    6826:	98 35       	cpi	r25, 0x58	; 88
    6828:	09 f0       	breq	.+2      	; 0x682c <vfprintf+0x5bc>
    682a:	b2 c0       	rjmp	.+356    	; 0x6990 <vfprintf+0x720>
    682c:	0f c0       	rjmp	.+30     	; 0x684c <vfprintf+0x5dc>
    682e:	90 37       	cpi	r25, 0x70	; 112
    6830:	39 f0       	breq	.+14     	; 0x6840 <vfprintf+0x5d0>
    6832:	98 37       	cpi	r25, 0x78	; 120
    6834:	09 f0       	breq	.+2      	; 0x6838 <vfprintf+0x5c8>
    6836:	ac c0       	rjmp	.+344    	; 0x6990 <vfprintf+0x720>
    6838:	04 c0       	rjmp	.+8      	; 0x6842 <vfprintf+0x5d2>
    683a:	28 e0       	ldi	r18, 0x08	; 8
    683c:	30 e0       	ldi	r19, 0x00	; 0
    683e:	0a c0       	rjmp	.+20     	; 0x6854 <vfprintf+0x5e4>
    6840:	10 61       	ori	r17, 0x10	; 16
    6842:	14 fd       	sbrc	r17, 4
    6844:	14 60       	ori	r17, 0x04	; 4
    6846:	20 e1       	ldi	r18, 0x10	; 16
    6848:	30 e0       	ldi	r19, 0x00	; 0
    684a:	04 c0       	rjmp	.+8      	; 0x6854 <vfprintf+0x5e4>
    684c:	14 fd       	sbrc	r17, 4
    684e:	16 60       	ori	r17, 0x06	; 6
    6850:	20 e1       	ldi	r18, 0x10	; 16
    6852:	32 e0       	ldi	r19, 0x02	; 2
    6854:	17 ff       	sbrs	r17, 7
    6856:	08 c0       	rjmp	.+16     	; 0x6868 <vfprintf+0x5f8>
    6858:	f6 01       	movw	r30, r12
    685a:	60 81       	ld	r22, Z
    685c:	71 81       	ldd	r23, Z+1	; 0x01
    685e:	82 81       	ldd	r24, Z+2	; 0x02
    6860:	93 81       	ldd	r25, Z+3	; 0x03
    6862:	44 e0       	ldi	r20, 0x04	; 4
    6864:	50 e0       	ldi	r21, 0x00	; 0
    6866:	08 c0       	rjmp	.+16     	; 0x6878 <vfprintf+0x608>
    6868:	f6 01       	movw	r30, r12
    686a:	80 81       	ld	r24, Z
    686c:	91 81       	ldd	r25, Z+1	; 0x01
    686e:	bc 01       	movw	r22, r24
    6870:	80 e0       	ldi	r24, 0x00	; 0
    6872:	90 e0       	ldi	r25, 0x00	; 0
    6874:	42 e0       	ldi	r20, 0x02	; 2
    6876:	50 e0       	ldi	r21, 0x00	; 0
    6878:	c4 0e       	add	r12, r20
    687a:	d5 1e       	adc	r13, r21
    687c:	ae 01       	movw	r20, r28
    687e:	4f 5f       	subi	r20, 0xFF	; 255
    6880:	5f 4f       	sbci	r21, 0xFF	; 255
    6882:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__ultoa_invert>
    6886:	e8 2e       	mov	r14, r24
    6888:	58 89       	ldd	r21, Y+16	; 0x10
    688a:	e5 1a       	sub	r14, r21
    688c:	8f e7       	ldi	r24, 0x7F	; 127
    688e:	f8 2e       	mov	r15, r24
    6890:	f1 22       	and	r15, r17
    6892:	f6 fe       	sbrs	r15, 6
    6894:	0b c0       	rjmp	.+22     	; 0x68ac <vfprintf+0x63c>
    6896:	8e ef       	ldi	r24, 0xFE	; 254
    6898:	f8 22       	and	r15, r24
    689a:	e9 14       	cp	r14, r9
    689c:	38 f4       	brcc	.+14     	; 0x68ac <vfprintf+0x63c>
    689e:	f4 fe       	sbrs	r15, 4
    68a0:	07 c0       	rjmp	.+14     	; 0x68b0 <vfprintf+0x640>
    68a2:	f2 fc       	sbrc	r15, 2
    68a4:	05 c0       	rjmp	.+10     	; 0x68b0 <vfprintf+0x640>
    68a6:	9f ee       	ldi	r25, 0xEF	; 239
    68a8:	f9 22       	and	r15, r25
    68aa:	02 c0       	rjmp	.+4      	; 0x68b0 <vfprintf+0x640>
    68ac:	1e 2d       	mov	r17, r14
    68ae:	01 c0       	rjmp	.+2      	; 0x68b2 <vfprintf+0x642>
    68b0:	19 2d       	mov	r17, r9
    68b2:	f4 fe       	sbrs	r15, 4
    68b4:	0d c0       	rjmp	.+26     	; 0x68d0 <vfprintf+0x660>
    68b6:	fe 01       	movw	r30, r28
    68b8:	ee 0d       	add	r30, r14
    68ba:	f1 1d       	adc	r31, r1
    68bc:	80 81       	ld	r24, Z
    68be:	80 33       	cpi	r24, 0x30	; 48
    68c0:	19 f4       	brne	.+6      	; 0x68c8 <vfprintf+0x658>
    68c2:	e9 ee       	ldi	r30, 0xE9	; 233
    68c4:	fe 22       	and	r15, r30
    68c6:	08 c0       	rjmp	.+16     	; 0x68d8 <vfprintf+0x668>
    68c8:	1f 5f       	subi	r17, 0xFF	; 255
    68ca:	f2 fe       	sbrs	r15, 2
    68cc:	05 c0       	rjmp	.+10     	; 0x68d8 <vfprintf+0x668>
    68ce:	03 c0       	rjmp	.+6      	; 0x68d6 <vfprintf+0x666>
    68d0:	8f 2d       	mov	r24, r15
    68d2:	86 78       	andi	r24, 0x86	; 134
    68d4:	09 f0       	breq	.+2      	; 0x68d8 <vfprintf+0x668>
    68d6:	1f 5f       	subi	r17, 0xFF	; 255
    68d8:	0f 2d       	mov	r16, r15
    68da:	f3 fc       	sbrc	r15, 3
    68dc:	14 c0       	rjmp	.+40     	; 0x6906 <vfprintf+0x696>
    68de:	f0 fe       	sbrs	r15, 0
    68e0:	0f c0       	rjmp	.+30     	; 0x6900 <vfprintf+0x690>
    68e2:	18 15       	cp	r17, r8
    68e4:	10 f0       	brcs	.+4      	; 0x68ea <vfprintf+0x67a>
    68e6:	9e 2c       	mov	r9, r14
    68e8:	0b c0       	rjmp	.+22     	; 0x6900 <vfprintf+0x690>
    68ea:	9e 2c       	mov	r9, r14
    68ec:	98 0c       	add	r9, r8
    68ee:	91 1a       	sub	r9, r17
    68f0:	18 2d       	mov	r17, r8
    68f2:	06 c0       	rjmp	.+12     	; 0x6900 <vfprintf+0x690>
    68f4:	80 e2       	ldi	r24, 0x20	; 32
    68f6:	90 e0       	ldi	r25, 0x00	; 0
    68f8:	b3 01       	movw	r22, r6
    68fa:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    68fe:	1f 5f       	subi	r17, 0xFF	; 255
    6900:	18 15       	cp	r17, r8
    6902:	c0 f3       	brcs	.-16     	; 0x68f4 <vfprintf+0x684>
    6904:	04 c0       	rjmp	.+8      	; 0x690e <vfprintf+0x69e>
    6906:	18 15       	cp	r17, r8
    6908:	10 f4       	brcc	.+4      	; 0x690e <vfprintf+0x69e>
    690a:	81 1a       	sub	r8, r17
    690c:	01 c0       	rjmp	.+2      	; 0x6910 <vfprintf+0x6a0>
    690e:	88 24       	eor	r8, r8
    6910:	04 ff       	sbrs	r16, 4
    6912:	0f c0       	rjmp	.+30     	; 0x6932 <vfprintf+0x6c2>
    6914:	80 e3       	ldi	r24, 0x30	; 48
    6916:	90 e0       	ldi	r25, 0x00	; 0
    6918:	b3 01       	movw	r22, r6
    691a:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    691e:	02 ff       	sbrs	r16, 2
    6920:	1d c0       	rjmp	.+58     	; 0x695c <vfprintf+0x6ec>
    6922:	01 fd       	sbrc	r16, 1
    6924:	03 c0       	rjmp	.+6      	; 0x692c <vfprintf+0x6bc>
    6926:	88 e7       	ldi	r24, 0x78	; 120
    6928:	90 e0       	ldi	r25, 0x00	; 0
    692a:	0e c0       	rjmp	.+28     	; 0x6948 <vfprintf+0x6d8>
    692c:	88 e5       	ldi	r24, 0x58	; 88
    692e:	90 e0       	ldi	r25, 0x00	; 0
    6930:	0b c0       	rjmp	.+22     	; 0x6948 <vfprintf+0x6d8>
    6932:	80 2f       	mov	r24, r16
    6934:	86 78       	andi	r24, 0x86	; 134
    6936:	91 f0       	breq	.+36     	; 0x695c <vfprintf+0x6ec>
    6938:	01 ff       	sbrs	r16, 1
    693a:	02 c0       	rjmp	.+4      	; 0x6940 <vfprintf+0x6d0>
    693c:	8b e2       	ldi	r24, 0x2B	; 43
    693e:	01 c0       	rjmp	.+2      	; 0x6942 <vfprintf+0x6d2>
    6940:	80 e2       	ldi	r24, 0x20	; 32
    6942:	f7 fc       	sbrc	r15, 7
    6944:	8d e2       	ldi	r24, 0x2D	; 45
    6946:	90 e0       	ldi	r25, 0x00	; 0
    6948:	b3 01       	movw	r22, r6
    694a:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    694e:	06 c0       	rjmp	.+12     	; 0x695c <vfprintf+0x6ec>
    6950:	80 e3       	ldi	r24, 0x30	; 48
    6952:	90 e0       	ldi	r25, 0x00	; 0
    6954:	b3 01       	movw	r22, r6
    6956:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    695a:	9a 94       	dec	r9
    695c:	e9 14       	cp	r14, r9
    695e:	c0 f3       	brcs	.-16     	; 0x6950 <vfprintf+0x6e0>
    6960:	ea 94       	dec	r14
    6962:	e1 e0       	ldi	r30, 0x01	; 1
    6964:	f0 e0       	ldi	r31, 0x00	; 0
    6966:	ec 0f       	add	r30, r28
    6968:	fd 1f       	adc	r31, r29
    696a:	ee 0d       	add	r30, r14
    696c:	f1 1d       	adc	r31, r1
    696e:	80 81       	ld	r24, Z
    6970:	90 e0       	ldi	r25, 0x00	; 0
    6972:	b3 01       	movw	r22, r6
    6974:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    6978:	ee 20       	and	r14, r14
    697a:	91 f7       	brne	.-28     	; 0x6960 <vfprintf+0x6f0>
    697c:	06 c0       	rjmp	.+12     	; 0x698a <vfprintf+0x71a>
    697e:	80 e2       	ldi	r24, 0x20	; 32
    6980:	90 e0       	ldi	r25, 0x00	; 0
    6982:	b3 01       	movw	r22, r6
    6984:	0e 94 83 3c 	call	0x7906	; 0x7906 <fputc>
    6988:	8a 94       	dec	r8
    698a:	88 20       	and	r8, r8
    698c:	c1 f7       	brne	.-16     	; 0x697e <vfprintf+0x70e>
    698e:	99 cc       	rjmp	.-1742   	; 0x62c2 <vfprintf+0x52>
    6990:	f3 01       	movw	r30, r6
    6992:	66 81       	ldd	r22, Z+6	; 0x06
    6994:	77 81       	ldd	r23, Z+7	; 0x07
    6996:	cb 01       	movw	r24, r22
    6998:	61 96       	adiw	r28, 0x11	; 17
    699a:	cd bf       	out	0x3d, r28	; 61
    699c:	de bf       	out	0x3e, r29	; 62
    699e:	cf 91       	pop	r28
    69a0:	df 91       	pop	r29
    69a2:	1f 91       	pop	r17
    69a4:	0f 91       	pop	r16
    69a6:	ff 90       	pop	r15
    69a8:	ef 90       	pop	r14
    69aa:	df 90       	pop	r13
    69ac:	cf 90       	pop	r12
    69ae:	bf 90       	pop	r11
    69b0:	af 90       	pop	r10
    69b2:	9f 90       	pop	r9
    69b4:	8f 90       	pop	r8
    69b6:	7f 90       	pop	r7
    69b8:	6f 90       	pop	r6
    69ba:	5f 90       	pop	r5
    69bc:	4f 90       	pop	r4
    69be:	3f 90       	pop	r3
    69c0:	2f 90       	pop	r2
    69c2:	08 95       	ret

000069c4 <__subsf3>:
    69c4:	50 58       	subi	r21, 0x80	; 128

000069c6 <__addsf3>:
    69c6:	bb 27       	eor	r27, r27
    69c8:	aa 27       	eor	r26, r26
    69ca:	0e d0       	rcall	.+28     	; 0x69e8 <__addsf3x>
    69cc:	29 c2       	rjmp	.+1106   	; 0x6e20 <__fp_round>
    69ce:	f2 d1       	rcall	.+996    	; 0x6db4 <__fp_pscA>
    69d0:	30 f0       	brcs	.+12     	; 0x69de <__addsf3+0x18>
    69d2:	f7 d1       	rcall	.+1006   	; 0x6dc2 <__fp_pscB>
    69d4:	20 f0       	brcs	.+8      	; 0x69de <__addsf3+0x18>
    69d6:	31 f4       	brne	.+12     	; 0x69e4 <__addsf3+0x1e>
    69d8:	9f 3f       	cpi	r25, 0xFF	; 255
    69da:	11 f4       	brne	.+4      	; 0x69e0 <__addsf3+0x1a>
    69dc:	1e f4       	brtc	.+6      	; 0x69e4 <__addsf3+0x1e>
    69de:	c2 c1       	rjmp	.+900    	; 0x6d64 <__fp_nan>
    69e0:	0e f4       	brtc	.+2      	; 0x69e4 <__addsf3+0x1e>
    69e2:	e0 95       	com	r30
    69e4:	e7 fb       	bst	r30, 7
    69e6:	8f c1       	rjmp	.+798    	; 0x6d06 <__fp_inf>

000069e8 <__addsf3x>:
    69e8:	e9 2f       	mov	r30, r25
    69ea:	3c d2       	rcall	.+1144   	; 0x6e64 <__fp_split3>
    69ec:	80 f3       	brcs	.-32     	; 0x69ce <__addsf3+0x8>
    69ee:	ba 17       	cp	r27, r26
    69f0:	62 07       	cpc	r22, r18
    69f2:	73 07       	cpc	r23, r19
    69f4:	84 07       	cpc	r24, r20
    69f6:	95 07       	cpc	r25, r21
    69f8:	18 f0       	brcs	.+6      	; 0x6a00 <__addsf3x+0x18>
    69fa:	71 f4       	brne	.+28     	; 0x6a18 <__addsf3x+0x30>
    69fc:	9e f5       	brtc	.+102    	; 0x6a64 <__addsf3x+0x7c>
    69fe:	6b c2       	rjmp	.+1238   	; 0x6ed6 <__fp_zero>
    6a00:	0e f4       	brtc	.+2      	; 0x6a04 <__addsf3x+0x1c>
    6a02:	e0 95       	com	r30
    6a04:	0b 2e       	mov	r0, r27
    6a06:	ba 2f       	mov	r27, r26
    6a08:	a0 2d       	mov	r26, r0
    6a0a:	0b 01       	movw	r0, r22
    6a0c:	b9 01       	movw	r22, r18
    6a0e:	90 01       	movw	r18, r0
    6a10:	0c 01       	movw	r0, r24
    6a12:	ca 01       	movw	r24, r20
    6a14:	a0 01       	movw	r20, r0
    6a16:	11 24       	eor	r1, r1
    6a18:	ff 27       	eor	r31, r31
    6a1a:	59 1b       	sub	r21, r25
    6a1c:	99 f0       	breq	.+38     	; 0x6a44 <__addsf3x+0x5c>
    6a1e:	59 3f       	cpi	r21, 0xF9	; 249
    6a20:	50 f4       	brcc	.+20     	; 0x6a36 <__addsf3x+0x4e>
    6a22:	50 3e       	cpi	r21, 0xE0	; 224
    6a24:	68 f1       	brcs	.+90     	; 0x6a80 <__addsf3x+0x98>
    6a26:	1a 16       	cp	r1, r26
    6a28:	f0 40       	sbci	r31, 0x00	; 0
    6a2a:	a2 2f       	mov	r26, r18
    6a2c:	23 2f       	mov	r18, r19
    6a2e:	34 2f       	mov	r19, r20
    6a30:	44 27       	eor	r20, r20
    6a32:	58 5f       	subi	r21, 0xF8	; 248
    6a34:	f3 cf       	rjmp	.-26     	; 0x6a1c <__addsf3x+0x34>
    6a36:	46 95       	lsr	r20
    6a38:	37 95       	ror	r19
    6a3a:	27 95       	ror	r18
    6a3c:	a7 95       	ror	r26
    6a3e:	f0 40       	sbci	r31, 0x00	; 0
    6a40:	53 95       	inc	r21
    6a42:	c9 f7       	brne	.-14     	; 0x6a36 <__addsf3x+0x4e>
    6a44:	7e f4       	brtc	.+30     	; 0x6a64 <__addsf3x+0x7c>
    6a46:	1f 16       	cp	r1, r31
    6a48:	ba 0b       	sbc	r27, r26
    6a4a:	62 0b       	sbc	r22, r18
    6a4c:	73 0b       	sbc	r23, r19
    6a4e:	84 0b       	sbc	r24, r20
    6a50:	ba f0       	brmi	.+46     	; 0x6a80 <__addsf3x+0x98>
    6a52:	91 50       	subi	r25, 0x01	; 1
    6a54:	a1 f0       	breq	.+40     	; 0x6a7e <__addsf3x+0x96>
    6a56:	ff 0f       	add	r31, r31
    6a58:	bb 1f       	adc	r27, r27
    6a5a:	66 1f       	adc	r22, r22
    6a5c:	77 1f       	adc	r23, r23
    6a5e:	88 1f       	adc	r24, r24
    6a60:	c2 f7       	brpl	.-16     	; 0x6a52 <__addsf3x+0x6a>
    6a62:	0e c0       	rjmp	.+28     	; 0x6a80 <__addsf3x+0x98>
    6a64:	ba 0f       	add	r27, r26
    6a66:	62 1f       	adc	r22, r18
    6a68:	73 1f       	adc	r23, r19
    6a6a:	84 1f       	adc	r24, r20
    6a6c:	48 f4       	brcc	.+18     	; 0x6a80 <__addsf3x+0x98>
    6a6e:	87 95       	ror	r24
    6a70:	77 95       	ror	r23
    6a72:	67 95       	ror	r22
    6a74:	b7 95       	ror	r27
    6a76:	f7 95       	ror	r31
    6a78:	9e 3f       	cpi	r25, 0xFE	; 254
    6a7a:	08 f0       	brcs	.+2      	; 0x6a7e <__addsf3x+0x96>
    6a7c:	b3 cf       	rjmp	.-154    	; 0x69e4 <__addsf3+0x1e>
    6a7e:	93 95       	inc	r25
    6a80:	88 0f       	add	r24, r24
    6a82:	08 f0       	brcs	.+2      	; 0x6a86 <__addsf3x+0x9e>
    6a84:	99 27       	eor	r25, r25
    6a86:	ee 0f       	add	r30, r30
    6a88:	97 95       	ror	r25
    6a8a:	87 95       	ror	r24
    6a8c:	08 95       	ret

00006a8e <atan>:
    6a8e:	df 93       	push	r29
    6a90:	dd 27       	eor	r29, r29
    6a92:	b9 2f       	mov	r27, r25
    6a94:	bf 77       	andi	r27, 0x7F	; 127
    6a96:	40 e8       	ldi	r20, 0x80	; 128
    6a98:	5f e3       	ldi	r21, 0x3F	; 63
    6a9a:	16 16       	cp	r1, r22
    6a9c:	17 06       	cpc	r1, r23
    6a9e:	48 07       	cpc	r20, r24
    6aa0:	5b 07       	cpc	r21, r27
    6aa2:	10 f4       	brcc	.+4      	; 0x6aa8 <atan+0x1a>
    6aa4:	d9 2f       	mov	r29, r25
    6aa6:	83 d2       	rcall	.+1286   	; 0x6fae <inverse>
    6aa8:	9f 93       	push	r25
    6aaa:	8f 93       	push	r24
    6aac:	7f 93       	push	r23
    6aae:	6f 93       	push	r22
    6ab0:	96 d3       	rcall	.+1836   	; 0x71de <square>
    6ab2:	e8 ee       	ldi	r30, 0xE8	; 232
    6ab4:	f1 e0       	ldi	r31, 0x01	; 1
    6ab6:	59 d1       	rcall	.+690    	; 0x6d6a <__fp_powser>
    6ab8:	b3 d1       	rcall	.+870    	; 0x6e20 <__fp_round>
    6aba:	2f 91       	pop	r18
    6abc:	3f 91       	pop	r19
    6abe:	4f 91       	pop	r20
    6ac0:	5f 91       	pop	r21
    6ac2:	ee d2       	rcall	.+1500   	; 0x70a0 <__mulsf3x>
    6ac4:	dd 23       	and	r29, r29
    6ac6:	49 f0       	breq	.+18     	; 0x6ada <atan+0x4c>
    6ac8:	90 58       	subi	r25, 0x80	; 128
    6aca:	a2 ea       	ldi	r26, 0xA2	; 162
    6acc:	2a ed       	ldi	r18, 0xDA	; 218
    6ace:	3f e0       	ldi	r19, 0x0F	; 15
    6ad0:	49 ec       	ldi	r20, 0xC9	; 201
    6ad2:	5f e3       	ldi	r21, 0x3F	; 63
    6ad4:	d0 78       	andi	r29, 0x80	; 128
    6ad6:	5d 27       	eor	r21, r29
    6ad8:	87 df       	rcall	.-242    	; 0x69e8 <__addsf3x>
    6ada:	df 91       	pop	r29
    6adc:	a1 c1       	rjmp	.+834    	; 0x6e20 <__fp_round>

00006ade <ceil>:
    6ade:	e4 d1       	rcall	.+968    	; 0x6ea8 <__fp_trunc>
    6ae0:	80 f0       	brcs	.+32     	; 0x6b02 <ceil+0x24>
    6ae2:	9f 37       	cpi	r25, 0x7F	; 127
    6ae4:	40 f4       	brcc	.+16     	; 0x6af6 <ceil+0x18>
    6ae6:	91 11       	cpse	r25, r1
    6ae8:	0e f4       	brtc	.+2      	; 0x6aec <ceil+0xe>
    6aea:	f6 c1       	rjmp	.+1004   	; 0x6ed8 <__fp_szero>
    6aec:	60 e0       	ldi	r22, 0x00	; 0
    6aee:	70 e0       	ldi	r23, 0x00	; 0
    6af0:	80 e8       	ldi	r24, 0x80	; 128
    6af2:	9f e3       	ldi	r25, 0x3F	; 63
    6af4:	08 95       	ret
    6af6:	26 f0       	brts	.+8      	; 0x6b00 <ceil+0x22>
    6af8:	1b 16       	cp	r1, r27
    6afa:	61 1d       	adc	r22, r1
    6afc:	71 1d       	adc	r23, r1
    6afe:	81 1d       	adc	r24, r1
    6b00:	08 c1       	rjmp	.+528    	; 0x6d12 <__fp_mintl>
    6b02:	22 c1       	rjmp	.+580    	; 0x6d48 <__fp_mpack>

00006b04 <__cmpsf2>:
    6b04:	dc d0       	rcall	.+440    	; 0x6cbe <__fp_cmp>
    6b06:	08 f4       	brcc	.+2      	; 0x6b0a <__cmpsf2+0x6>
    6b08:	81 e0       	ldi	r24, 0x01	; 1
    6b0a:	08 95       	ret

00006b0c <cos>:
    6b0c:	62 d1       	rcall	.+708    	; 0x6dd2 <__fp_rempio2>
    6b0e:	e3 95       	inc	r30
    6b10:	98 c1       	rjmp	.+816    	; 0x6e42 <__fp_sinus>

00006b12 <__divsf3>:
    6b12:	0c d0       	rcall	.+24     	; 0x6b2c <__divsf3x>
    6b14:	85 c1       	rjmp	.+778    	; 0x6e20 <__fp_round>
    6b16:	55 d1       	rcall	.+682    	; 0x6dc2 <__fp_pscB>
    6b18:	40 f0       	brcs	.+16     	; 0x6b2a <__divsf3+0x18>
    6b1a:	4c d1       	rcall	.+664    	; 0x6db4 <__fp_pscA>
    6b1c:	30 f0       	brcs	.+12     	; 0x6b2a <__divsf3+0x18>
    6b1e:	21 f4       	brne	.+8      	; 0x6b28 <__divsf3+0x16>
    6b20:	5f 3f       	cpi	r21, 0xFF	; 255
    6b22:	19 f0       	breq	.+6      	; 0x6b2a <__divsf3+0x18>
    6b24:	f0 c0       	rjmp	.+480    	; 0x6d06 <__fp_inf>
    6b26:	51 11       	cpse	r21, r1
    6b28:	d7 c1       	rjmp	.+942    	; 0x6ed8 <__fp_szero>
    6b2a:	1c c1       	rjmp	.+568    	; 0x6d64 <__fp_nan>

00006b2c <__divsf3x>:
    6b2c:	9b d1       	rcall	.+822    	; 0x6e64 <__fp_split3>
    6b2e:	98 f3       	brcs	.-26     	; 0x6b16 <__divsf3+0x4>

00006b30 <__divsf3_pse>:
    6b30:	99 23       	and	r25, r25
    6b32:	c9 f3       	breq	.-14     	; 0x6b26 <__divsf3+0x14>
    6b34:	55 23       	and	r21, r21
    6b36:	b1 f3       	breq	.-20     	; 0x6b24 <__divsf3+0x12>
    6b38:	95 1b       	sub	r25, r21
    6b3a:	55 0b       	sbc	r21, r21
    6b3c:	bb 27       	eor	r27, r27
    6b3e:	aa 27       	eor	r26, r26
    6b40:	62 17       	cp	r22, r18
    6b42:	73 07       	cpc	r23, r19
    6b44:	84 07       	cpc	r24, r20
    6b46:	38 f0       	brcs	.+14     	; 0x6b56 <__divsf3_pse+0x26>
    6b48:	9f 5f       	subi	r25, 0xFF	; 255
    6b4a:	5f 4f       	sbci	r21, 0xFF	; 255
    6b4c:	22 0f       	add	r18, r18
    6b4e:	33 1f       	adc	r19, r19
    6b50:	44 1f       	adc	r20, r20
    6b52:	aa 1f       	adc	r26, r26
    6b54:	a9 f3       	breq	.-22     	; 0x6b40 <__divsf3_pse+0x10>
    6b56:	33 d0       	rcall	.+102    	; 0x6bbe <__divsf3_pse+0x8e>
    6b58:	0e 2e       	mov	r0, r30
    6b5a:	3a f0       	brmi	.+14     	; 0x6b6a <__divsf3_pse+0x3a>
    6b5c:	e0 e8       	ldi	r30, 0x80	; 128
    6b5e:	30 d0       	rcall	.+96     	; 0x6bc0 <__divsf3_pse+0x90>
    6b60:	91 50       	subi	r25, 0x01	; 1
    6b62:	50 40       	sbci	r21, 0x00	; 0
    6b64:	e6 95       	lsr	r30
    6b66:	00 1c       	adc	r0, r0
    6b68:	ca f7       	brpl	.-14     	; 0x6b5c <__divsf3_pse+0x2c>
    6b6a:	29 d0       	rcall	.+82     	; 0x6bbe <__divsf3_pse+0x8e>
    6b6c:	fe 2f       	mov	r31, r30
    6b6e:	27 d0       	rcall	.+78     	; 0x6bbe <__divsf3_pse+0x8e>
    6b70:	66 0f       	add	r22, r22
    6b72:	77 1f       	adc	r23, r23
    6b74:	88 1f       	adc	r24, r24
    6b76:	bb 1f       	adc	r27, r27
    6b78:	26 17       	cp	r18, r22
    6b7a:	37 07       	cpc	r19, r23
    6b7c:	48 07       	cpc	r20, r24
    6b7e:	ab 07       	cpc	r26, r27
    6b80:	b0 e8       	ldi	r27, 0x80	; 128
    6b82:	09 f0       	breq	.+2      	; 0x6b86 <__divsf3_pse+0x56>
    6b84:	bb 0b       	sbc	r27, r27
    6b86:	80 2d       	mov	r24, r0
    6b88:	bf 01       	movw	r22, r30
    6b8a:	ff 27       	eor	r31, r31
    6b8c:	93 58       	subi	r25, 0x83	; 131
    6b8e:	5f 4f       	sbci	r21, 0xFF	; 255
    6b90:	2a f0       	brmi	.+10     	; 0x6b9c <__divsf3_pse+0x6c>
    6b92:	9e 3f       	cpi	r25, 0xFE	; 254
    6b94:	51 05       	cpc	r21, r1
    6b96:	68 f0       	brcs	.+26     	; 0x6bb2 <__divsf3_pse+0x82>
    6b98:	b6 c0       	rjmp	.+364    	; 0x6d06 <__fp_inf>
    6b9a:	9e c1       	rjmp	.+828    	; 0x6ed8 <__fp_szero>
    6b9c:	5f 3f       	cpi	r21, 0xFF	; 255
    6b9e:	ec f3       	brlt	.-6      	; 0x6b9a <__divsf3_pse+0x6a>
    6ba0:	98 3e       	cpi	r25, 0xE8	; 232
    6ba2:	dc f3       	brlt	.-10     	; 0x6b9a <__divsf3_pse+0x6a>
    6ba4:	86 95       	lsr	r24
    6ba6:	77 95       	ror	r23
    6ba8:	67 95       	ror	r22
    6baa:	b7 95       	ror	r27
    6bac:	f7 95       	ror	r31
    6bae:	9f 5f       	subi	r25, 0xFF	; 255
    6bb0:	c9 f7       	brne	.-14     	; 0x6ba4 <__divsf3_pse+0x74>
    6bb2:	88 0f       	add	r24, r24
    6bb4:	91 1d       	adc	r25, r1
    6bb6:	96 95       	lsr	r25
    6bb8:	87 95       	ror	r24
    6bba:	97 f9       	bld	r25, 7
    6bbc:	08 95       	ret
    6bbe:	e1 e0       	ldi	r30, 0x01	; 1
    6bc0:	66 0f       	add	r22, r22
    6bc2:	77 1f       	adc	r23, r23
    6bc4:	88 1f       	adc	r24, r24
    6bc6:	bb 1f       	adc	r27, r27
    6bc8:	62 17       	cp	r22, r18
    6bca:	73 07       	cpc	r23, r19
    6bcc:	84 07       	cpc	r24, r20
    6bce:	ba 07       	cpc	r27, r26
    6bd0:	20 f0       	brcs	.+8      	; 0x6bda <__divsf3_pse+0xaa>
    6bd2:	62 1b       	sub	r22, r18
    6bd4:	73 0b       	sbc	r23, r19
    6bd6:	84 0b       	sbc	r24, r20
    6bd8:	ba 0b       	sbc	r27, r26
    6bda:	ee 1f       	adc	r30, r30
    6bdc:	88 f7       	brcc	.-30     	; 0x6bc0 <__divsf3_pse+0x90>
    6bde:	e0 95       	com	r30
    6be0:	08 95       	ret

00006be2 <__fixsfsi>:
    6be2:	04 d0       	rcall	.+8      	; 0x6bec <__fixunssfsi>
    6be4:	68 94       	set
    6be6:	b1 11       	cpse	r27, r1
    6be8:	77 c1       	rjmp	.+750    	; 0x6ed8 <__fp_szero>
    6bea:	08 95       	ret

00006bec <__fixunssfsi>:
    6bec:	43 d1       	rcall	.+646    	; 0x6e74 <__fp_splitA>
    6bee:	88 f0       	brcs	.+34     	; 0x6c12 <__fixunssfsi+0x26>
    6bf0:	9f 57       	subi	r25, 0x7F	; 127
    6bf2:	90 f0       	brcs	.+36     	; 0x6c18 <__fixunssfsi+0x2c>
    6bf4:	b9 2f       	mov	r27, r25
    6bf6:	99 27       	eor	r25, r25
    6bf8:	b7 51       	subi	r27, 0x17	; 23
    6bfa:	a0 f0       	brcs	.+40     	; 0x6c24 <__fixunssfsi+0x38>
    6bfc:	d1 f0       	breq	.+52     	; 0x6c32 <__fixunssfsi+0x46>
    6bfe:	66 0f       	add	r22, r22
    6c00:	77 1f       	adc	r23, r23
    6c02:	88 1f       	adc	r24, r24
    6c04:	99 1f       	adc	r25, r25
    6c06:	1a f0       	brmi	.+6      	; 0x6c0e <__fixunssfsi+0x22>
    6c08:	ba 95       	dec	r27
    6c0a:	c9 f7       	brne	.-14     	; 0x6bfe <__fixunssfsi+0x12>
    6c0c:	12 c0       	rjmp	.+36     	; 0x6c32 <__fixunssfsi+0x46>
    6c0e:	b1 30       	cpi	r27, 0x01	; 1
    6c10:	81 f0       	breq	.+32     	; 0x6c32 <__fixunssfsi+0x46>
    6c12:	61 d1       	rcall	.+706    	; 0x6ed6 <__fp_zero>
    6c14:	b1 e0       	ldi	r27, 0x01	; 1
    6c16:	08 95       	ret
    6c18:	5e c1       	rjmp	.+700    	; 0x6ed6 <__fp_zero>
    6c1a:	67 2f       	mov	r22, r23
    6c1c:	78 2f       	mov	r23, r24
    6c1e:	88 27       	eor	r24, r24
    6c20:	b8 5f       	subi	r27, 0xF8	; 248
    6c22:	39 f0       	breq	.+14     	; 0x6c32 <__fixunssfsi+0x46>
    6c24:	b9 3f       	cpi	r27, 0xF9	; 249
    6c26:	cc f3       	brlt	.-14     	; 0x6c1a <__fixunssfsi+0x2e>
    6c28:	86 95       	lsr	r24
    6c2a:	77 95       	ror	r23
    6c2c:	67 95       	ror	r22
    6c2e:	b3 95       	inc	r27
    6c30:	d9 f7       	brne	.-10     	; 0x6c28 <__fixunssfsi+0x3c>
    6c32:	3e f4       	brtc	.+14     	; 0x6c42 <__fixunssfsi+0x56>
    6c34:	90 95       	com	r25
    6c36:	80 95       	com	r24
    6c38:	70 95       	com	r23
    6c3a:	61 95       	neg	r22
    6c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    6c3e:	8f 4f       	sbci	r24, 0xFF	; 255
    6c40:	9f 4f       	sbci	r25, 0xFF	; 255
    6c42:	08 95       	ret

00006c44 <__floatunsisf>:
    6c44:	e8 94       	clt
    6c46:	09 c0       	rjmp	.+18     	; 0x6c5a <__floatsisf+0x12>

00006c48 <__floatsisf>:
    6c48:	97 fb       	bst	r25, 7
    6c4a:	3e f4       	brtc	.+14     	; 0x6c5a <__floatsisf+0x12>
    6c4c:	90 95       	com	r25
    6c4e:	80 95       	com	r24
    6c50:	70 95       	com	r23
    6c52:	61 95       	neg	r22
    6c54:	7f 4f       	sbci	r23, 0xFF	; 255
    6c56:	8f 4f       	sbci	r24, 0xFF	; 255
    6c58:	9f 4f       	sbci	r25, 0xFF	; 255
    6c5a:	99 23       	and	r25, r25
    6c5c:	a9 f0       	breq	.+42     	; 0x6c88 <__floatsisf+0x40>
    6c5e:	f9 2f       	mov	r31, r25
    6c60:	96 e9       	ldi	r25, 0x96	; 150
    6c62:	bb 27       	eor	r27, r27
    6c64:	93 95       	inc	r25
    6c66:	f6 95       	lsr	r31
    6c68:	87 95       	ror	r24
    6c6a:	77 95       	ror	r23
    6c6c:	67 95       	ror	r22
    6c6e:	b7 95       	ror	r27
    6c70:	f1 11       	cpse	r31, r1
    6c72:	f8 cf       	rjmp	.-16     	; 0x6c64 <__floatsisf+0x1c>
    6c74:	fa f4       	brpl	.+62     	; 0x6cb4 <__floatsisf+0x6c>
    6c76:	bb 0f       	add	r27, r27
    6c78:	11 f4       	brne	.+4      	; 0x6c7e <__floatsisf+0x36>
    6c7a:	60 ff       	sbrs	r22, 0
    6c7c:	1b c0       	rjmp	.+54     	; 0x6cb4 <__floatsisf+0x6c>
    6c7e:	6f 5f       	subi	r22, 0xFF	; 255
    6c80:	7f 4f       	sbci	r23, 0xFF	; 255
    6c82:	8f 4f       	sbci	r24, 0xFF	; 255
    6c84:	9f 4f       	sbci	r25, 0xFF	; 255
    6c86:	16 c0       	rjmp	.+44     	; 0x6cb4 <__floatsisf+0x6c>
    6c88:	88 23       	and	r24, r24
    6c8a:	11 f0       	breq	.+4      	; 0x6c90 <__floatsisf+0x48>
    6c8c:	96 e9       	ldi	r25, 0x96	; 150
    6c8e:	11 c0       	rjmp	.+34     	; 0x6cb2 <__floatsisf+0x6a>
    6c90:	77 23       	and	r23, r23
    6c92:	21 f0       	breq	.+8      	; 0x6c9c <__floatsisf+0x54>
    6c94:	9e e8       	ldi	r25, 0x8E	; 142
    6c96:	87 2f       	mov	r24, r23
    6c98:	76 2f       	mov	r23, r22
    6c9a:	05 c0       	rjmp	.+10     	; 0x6ca6 <__floatsisf+0x5e>
    6c9c:	66 23       	and	r22, r22
    6c9e:	71 f0       	breq	.+28     	; 0x6cbc <__floatsisf+0x74>
    6ca0:	96 e8       	ldi	r25, 0x86	; 134
    6ca2:	86 2f       	mov	r24, r22
    6ca4:	70 e0       	ldi	r23, 0x00	; 0
    6ca6:	60 e0       	ldi	r22, 0x00	; 0
    6ca8:	2a f0       	brmi	.+10     	; 0x6cb4 <__floatsisf+0x6c>
    6caa:	9a 95       	dec	r25
    6cac:	66 0f       	add	r22, r22
    6cae:	77 1f       	adc	r23, r23
    6cb0:	88 1f       	adc	r24, r24
    6cb2:	da f7       	brpl	.-10     	; 0x6caa <__floatsisf+0x62>
    6cb4:	88 0f       	add	r24, r24
    6cb6:	96 95       	lsr	r25
    6cb8:	87 95       	ror	r24
    6cba:	97 f9       	bld	r25, 7
    6cbc:	08 95       	ret

00006cbe <__fp_cmp>:
    6cbe:	99 0f       	add	r25, r25
    6cc0:	00 08       	sbc	r0, r0
    6cc2:	55 0f       	add	r21, r21
    6cc4:	aa 0b       	sbc	r26, r26
    6cc6:	e0 e8       	ldi	r30, 0x80	; 128
    6cc8:	fe ef       	ldi	r31, 0xFE	; 254
    6cca:	16 16       	cp	r1, r22
    6ccc:	17 06       	cpc	r1, r23
    6cce:	e8 07       	cpc	r30, r24
    6cd0:	f9 07       	cpc	r31, r25
    6cd2:	c0 f0       	brcs	.+48     	; 0x6d04 <__fp_cmp+0x46>
    6cd4:	12 16       	cp	r1, r18
    6cd6:	13 06       	cpc	r1, r19
    6cd8:	e4 07       	cpc	r30, r20
    6cda:	f5 07       	cpc	r31, r21
    6cdc:	98 f0       	brcs	.+38     	; 0x6d04 <__fp_cmp+0x46>
    6cde:	62 1b       	sub	r22, r18
    6ce0:	73 0b       	sbc	r23, r19
    6ce2:	84 0b       	sbc	r24, r20
    6ce4:	95 0b       	sbc	r25, r21
    6ce6:	39 f4       	brne	.+14     	; 0x6cf6 <__fp_cmp+0x38>
    6ce8:	0a 26       	eor	r0, r26
    6cea:	61 f0       	breq	.+24     	; 0x6d04 <__fp_cmp+0x46>
    6cec:	23 2b       	or	r18, r19
    6cee:	24 2b       	or	r18, r20
    6cf0:	25 2b       	or	r18, r21
    6cf2:	21 f4       	brne	.+8      	; 0x6cfc <__fp_cmp+0x3e>
    6cf4:	08 95       	ret
    6cf6:	0a 26       	eor	r0, r26
    6cf8:	09 f4       	brne	.+2      	; 0x6cfc <__fp_cmp+0x3e>
    6cfa:	a1 40       	sbci	r26, 0x01	; 1
    6cfc:	a6 95       	lsr	r26
    6cfe:	8f ef       	ldi	r24, 0xFF	; 255
    6d00:	81 1d       	adc	r24, r1
    6d02:	81 1d       	adc	r24, r1
    6d04:	08 95       	ret

00006d06 <__fp_inf>:
    6d06:	97 f9       	bld	r25, 7
    6d08:	9f 67       	ori	r25, 0x7F	; 127
    6d0a:	80 e8       	ldi	r24, 0x80	; 128
    6d0c:	70 e0       	ldi	r23, 0x00	; 0
    6d0e:	60 e0       	ldi	r22, 0x00	; 0
    6d10:	08 95       	ret

00006d12 <__fp_mintl>:
    6d12:	88 23       	and	r24, r24
    6d14:	71 f4       	brne	.+28     	; 0x6d32 <__fp_mintl+0x20>
    6d16:	77 23       	and	r23, r23
    6d18:	21 f0       	breq	.+8      	; 0x6d22 <__fp_mintl+0x10>
    6d1a:	98 50       	subi	r25, 0x08	; 8
    6d1c:	87 2b       	or	r24, r23
    6d1e:	76 2f       	mov	r23, r22
    6d20:	07 c0       	rjmp	.+14     	; 0x6d30 <__fp_mintl+0x1e>
    6d22:	66 23       	and	r22, r22
    6d24:	11 f4       	brne	.+4      	; 0x6d2a <__fp_mintl+0x18>
    6d26:	99 27       	eor	r25, r25
    6d28:	0d c0       	rjmp	.+26     	; 0x6d44 <__fp_mintl+0x32>
    6d2a:	90 51       	subi	r25, 0x10	; 16
    6d2c:	86 2b       	or	r24, r22
    6d2e:	70 e0       	ldi	r23, 0x00	; 0
    6d30:	60 e0       	ldi	r22, 0x00	; 0
    6d32:	2a f0       	brmi	.+10     	; 0x6d3e <__fp_mintl+0x2c>
    6d34:	9a 95       	dec	r25
    6d36:	66 0f       	add	r22, r22
    6d38:	77 1f       	adc	r23, r23
    6d3a:	88 1f       	adc	r24, r24
    6d3c:	da f7       	brpl	.-10     	; 0x6d34 <__fp_mintl+0x22>
    6d3e:	88 0f       	add	r24, r24
    6d40:	96 95       	lsr	r25
    6d42:	87 95       	ror	r24
    6d44:	97 f9       	bld	r25, 7
    6d46:	08 95       	ret

00006d48 <__fp_mpack>:
    6d48:	9f 3f       	cpi	r25, 0xFF	; 255
    6d4a:	31 f0       	breq	.+12     	; 0x6d58 <__fp_mpack_finite+0xc>

00006d4c <__fp_mpack_finite>:
    6d4c:	91 50       	subi	r25, 0x01	; 1
    6d4e:	20 f4       	brcc	.+8      	; 0x6d58 <__fp_mpack_finite+0xc>
    6d50:	87 95       	ror	r24
    6d52:	77 95       	ror	r23
    6d54:	67 95       	ror	r22
    6d56:	b7 95       	ror	r27
    6d58:	88 0f       	add	r24, r24
    6d5a:	91 1d       	adc	r25, r1
    6d5c:	96 95       	lsr	r25
    6d5e:	87 95       	ror	r24
    6d60:	97 f9       	bld	r25, 7
    6d62:	08 95       	ret

00006d64 <__fp_nan>:
    6d64:	9f ef       	ldi	r25, 0xFF	; 255
    6d66:	80 ec       	ldi	r24, 0xC0	; 192
    6d68:	08 95       	ret

00006d6a <__fp_powser>:
    6d6a:	df 93       	push	r29
    6d6c:	cf 93       	push	r28
    6d6e:	1f 93       	push	r17
    6d70:	0f 93       	push	r16
    6d72:	ff 92       	push	r15
    6d74:	ef 92       	push	r14
    6d76:	df 92       	push	r13
    6d78:	7b 01       	movw	r14, r22
    6d7a:	8c 01       	movw	r16, r24
    6d7c:	68 94       	set
    6d7e:	05 c0       	rjmp	.+10     	; 0x6d8a <__fp_powser+0x20>
    6d80:	da 2e       	mov	r13, r26
    6d82:	ef 01       	movw	r28, r30
    6d84:	8d d1       	rcall	.+794    	; 0x70a0 <__mulsf3x>
    6d86:	fe 01       	movw	r30, r28
    6d88:	e8 94       	clt
    6d8a:	a5 91       	lpm	r26, Z+
    6d8c:	25 91       	lpm	r18, Z+
    6d8e:	35 91       	lpm	r19, Z+
    6d90:	45 91       	lpm	r20, Z+
    6d92:	55 91       	lpm	r21, Z+
    6d94:	ae f3       	brts	.-22     	; 0x6d80 <__fp_powser+0x16>
    6d96:	ef 01       	movw	r28, r30
    6d98:	27 de       	rcall	.-946    	; 0x69e8 <__addsf3x>
    6d9a:	fe 01       	movw	r30, r28
    6d9c:	97 01       	movw	r18, r14
    6d9e:	a8 01       	movw	r20, r16
    6da0:	da 94       	dec	r13
    6da2:	79 f7       	brne	.-34     	; 0x6d82 <__fp_powser+0x18>
    6da4:	df 90       	pop	r13
    6da6:	ef 90       	pop	r14
    6da8:	ff 90       	pop	r15
    6daa:	0f 91       	pop	r16
    6dac:	1f 91       	pop	r17
    6dae:	cf 91       	pop	r28
    6db0:	df 91       	pop	r29
    6db2:	08 95       	ret

00006db4 <__fp_pscA>:
    6db4:	00 24       	eor	r0, r0
    6db6:	0a 94       	dec	r0
    6db8:	16 16       	cp	r1, r22
    6dba:	17 06       	cpc	r1, r23
    6dbc:	18 06       	cpc	r1, r24
    6dbe:	09 06       	cpc	r0, r25
    6dc0:	08 95       	ret

00006dc2 <__fp_pscB>:
    6dc2:	00 24       	eor	r0, r0
    6dc4:	0a 94       	dec	r0
    6dc6:	12 16       	cp	r1, r18
    6dc8:	13 06       	cpc	r1, r19
    6dca:	14 06       	cpc	r1, r20
    6dcc:	05 06       	cpc	r0, r21
    6dce:	08 95       	ret
    6dd0:	c9 cf       	rjmp	.-110    	; 0x6d64 <__fp_nan>

00006dd2 <__fp_rempio2>:
    6dd2:	50 d0       	rcall	.+160    	; 0x6e74 <__fp_splitA>
    6dd4:	e8 f3       	brcs	.-6      	; 0x6dd0 <__fp_pscB+0xe>
    6dd6:	e8 94       	clt
    6dd8:	e0 e0       	ldi	r30, 0x00	; 0
    6dda:	bb 27       	eor	r27, r27
    6ddc:	9f 57       	subi	r25, 0x7F	; 127
    6dde:	f0 f0       	brcs	.+60     	; 0x6e1c <__fp_rempio2+0x4a>
    6de0:	2a ed       	ldi	r18, 0xDA	; 218
    6de2:	3f e0       	ldi	r19, 0x0F	; 15
    6de4:	49 ec       	ldi	r20, 0xC9	; 201
    6de6:	06 c0       	rjmp	.+12     	; 0x6df4 <__fp_rempio2+0x22>
    6de8:	ee 0f       	add	r30, r30
    6dea:	bb 0f       	add	r27, r27
    6dec:	66 1f       	adc	r22, r22
    6dee:	77 1f       	adc	r23, r23
    6df0:	88 1f       	adc	r24, r24
    6df2:	28 f0       	brcs	.+10     	; 0x6dfe <__fp_rempio2+0x2c>
    6df4:	b2 3a       	cpi	r27, 0xA2	; 162
    6df6:	62 07       	cpc	r22, r18
    6df8:	73 07       	cpc	r23, r19
    6dfa:	84 07       	cpc	r24, r20
    6dfc:	28 f0       	brcs	.+10     	; 0x6e08 <__fp_rempio2+0x36>
    6dfe:	b2 5a       	subi	r27, 0xA2	; 162
    6e00:	62 0b       	sbc	r22, r18
    6e02:	73 0b       	sbc	r23, r19
    6e04:	84 0b       	sbc	r24, r20
    6e06:	e3 95       	inc	r30
    6e08:	9a 95       	dec	r25
    6e0a:	72 f7       	brpl	.-36     	; 0x6de8 <__fp_rempio2+0x16>
    6e0c:	80 38       	cpi	r24, 0x80	; 128
    6e0e:	30 f4       	brcc	.+12     	; 0x6e1c <__fp_rempio2+0x4a>
    6e10:	9a 95       	dec	r25
    6e12:	bb 0f       	add	r27, r27
    6e14:	66 1f       	adc	r22, r22
    6e16:	77 1f       	adc	r23, r23
    6e18:	88 1f       	adc	r24, r24
    6e1a:	d2 f7       	brpl	.-12     	; 0x6e10 <__fp_rempio2+0x3e>
    6e1c:	90 48       	sbci	r25, 0x80	; 128
    6e1e:	96 cf       	rjmp	.-212    	; 0x6d4c <__fp_mpack_finite>

00006e20 <__fp_round>:
    6e20:	09 2e       	mov	r0, r25
    6e22:	03 94       	inc	r0
    6e24:	00 0c       	add	r0, r0
    6e26:	11 f4       	brne	.+4      	; 0x6e2c <__fp_round+0xc>
    6e28:	88 23       	and	r24, r24
    6e2a:	52 f0       	brmi	.+20     	; 0x6e40 <__fp_round+0x20>
    6e2c:	bb 0f       	add	r27, r27
    6e2e:	40 f4       	brcc	.+16     	; 0x6e40 <__fp_round+0x20>
    6e30:	bf 2b       	or	r27, r31
    6e32:	11 f4       	brne	.+4      	; 0x6e38 <__fp_round+0x18>
    6e34:	60 ff       	sbrs	r22, 0
    6e36:	04 c0       	rjmp	.+8      	; 0x6e40 <__fp_round+0x20>
    6e38:	6f 5f       	subi	r22, 0xFF	; 255
    6e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    6e3c:	8f 4f       	sbci	r24, 0xFF	; 255
    6e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    6e40:	08 95       	ret

00006e42 <__fp_sinus>:
    6e42:	ef 93       	push	r30
    6e44:	e0 ff       	sbrs	r30, 0
    6e46:	06 c0       	rjmp	.+12     	; 0x6e54 <__fp_sinus+0x12>
    6e48:	a2 ea       	ldi	r26, 0xA2	; 162
    6e4a:	2a ed       	ldi	r18, 0xDA	; 218
    6e4c:	3f e0       	ldi	r19, 0x0F	; 15
    6e4e:	49 ec       	ldi	r20, 0xC9	; 201
    6e50:	5f eb       	ldi	r21, 0xBF	; 191
    6e52:	ca dd       	rcall	.-1132   	; 0x69e8 <__addsf3x>
    6e54:	e5 df       	rcall	.-54     	; 0x6e20 <__fp_round>
    6e56:	0f 90       	pop	r0
    6e58:	03 94       	inc	r0
    6e5a:	01 fc       	sbrc	r0, 1
    6e5c:	90 58       	subi	r25, 0x80	; 128
    6e5e:	e5 e1       	ldi	r30, 0x15	; 21
    6e60:	f2 e0       	ldi	r31, 0x02	; 2
    6e62:	d2 c1       	rjmp	.+932    	; 0x7208 <__fp_powsodd>

00006e64 <__fp_split3>:
    6e64:	57 fd       	sbrc	r21, 7
    6e66:	90 58       	subi	r25, 0x80	; 128
    6e68:	44 0f       	add	r20, r20
    6e6a:	55 1f       	adc	r21, r21
    6e6c:	59 f0       	breq	.+22     	; 0x6e84 <__fp_splitA+0x10>
    6e6e:	5f 3f       	cpi	r21, 0xFF	; 255
    6e70:	71 f0       	breq	.+28     	; 0x6e8e <__fp_splitA+0x1a>
    6e72:	47 95       	ror	r20

00006e74 <__fp_splitA>:
    6e74:	88 0f       	add	r24, r24
    6e76:	97 fb       	bst	r25, 7
    6e78:	99 1f       	adc	r25, r25
    6e7a:	61 f0       	breq	.+24     	; 0x6e94 <__fp_splitA+0x20>
    6e7c:	9f 3f       	cpi	r25, 0xFF	; 255
    6e7e:	79 f0       	breq	.+30     	; 0x6e9e <__fp_splitA+0x2a>
    6e80:	87 95       	ror	r24
    6e82:	08 95       	ret
    6e84:	12 16       	cp	r1, r18
    6e86:	13 06       	cpc	r1, r19
    6e88:	14 06       	cpc	r1, r20
    6e8a:	55 1f       	adc	r21, r21
    6e8c:	f2 cf       	rjmp	.-28     	; 0x6e72 <__fp_split3+0xe>
    6e8e:	46 95       	lsr	r20
    6e90:	f1 df       	rcall	.-30     	; 0x6e74 <__fp_splitA>
    6e92:	08 c0       	rjmp	.+16     	; 0x6ea4 <__fp_splitA+0x30>
    6e94:	16 16       	cp	r1, r22
    6e96:	17 06       	cpc	r1, r23
    6e98:	18 06       	cpc	r1, r24
    6e9a:	99 1f       	adc	r25, r25
    6e9c:	f1 cf       	rjmp	.-30     	; 0x6e80 <__fp_splitA+0xc>
    6e9e:	86 95       	lsr	r24
    6ea0:	71 05       	cpc	r23, r1
    6ea2:	61 05       	cpc	r22, r1
    6ea4:	08 94       	sec
    6ea6:	08 95       	ret

00006ea8 <__fp_trunc>:
    6ea8:	e5 df       	rcall	.-54     	; 0x6e74 <__fp_splitA>
    6eaa:	a0 f0       	brcs	.+40     	; 0x6ed4 <__fp_trunc+0x2c>
    6eac:	be e7       	ldi	r27, 0x7E	; 126
    6eae:	b9 17       	cp	r27, r25
    6eb0:	88 f4       	brcc	.+34     	; 0x6ed4 <__fp_trunc+0x2c>
    6eb2:	bb 27       	eor	r27, r27
    6eb4:	9f 38       	cpi	r25, 0x8F	; 143
    6eb6:	60 f4       	brcc	.+24     	; 0x6ed0 <__fp_trunc+0x28>
    6eb8:	16 16       	cp	r1, r22
    6eba:	b1 1d       	adc	r27, r1
    6ebc:	67 2f       	mov	r22, r23
    6ebe:	78 2f       	mov	r23, r24
    6ec0:	88 27       	eor	r24, r24
    6ec2:	98 5f       	subi	r25, 0xF8	; 248
    6ec4:	f7 cf       	rjmp	.-18     	; 0x6eb4 <__fp_trunc+0xc>
    6ec6:	86 95       	lsr	r24
    6ec8:	77 95       	ror	r23
    6eca:	67 95       	ror	r22
    6ecc:	b1 1d       	adc	r27, r1
    6ece:	93 95       	inc	r25
    6ed0:	96 39       	cpi	r25, 0x96	; 150
    6ed2:	c8 f3       	brcs	.-14     	; 0x6ec6 <__fp_trunc+0x1e>
    6ed4:	08 95       	ret

00006ed6 <__fp_zero>:
    6ed6:	e8 94       	clt

00006ed8 <__fp_szero>:
    6ed8:	bb 27       	eor	r27, r27
    6eda:	66 27       	eor	r22, r22
    6edc:	77 27       	eor	r23, r23
    6ede:	cb 01       	movw	r24, r22
    6ee0:	97 f9       	bld	r25, 7
    6ee2:	08 95       	ret

00006ee4 <__gesf2>:
    6ee4:	ec de       	rcall	.-552    	; 0x6cbe <__fp_cmp>
    6ee6:	08 f4       	brcc	.+2      	; 0x6eea <__gesf2+0x6>
    6ee8:	8f ef       	ldi	r24, 0xFF	; 255
    6eea:	08 95       	ret
    6eec:	63 df       	rcall	.-314    	; 0x6db4 <__fp_pscA>
    6eee:	19 f0       	breq	.+6      	; 0x6ef6 <__gesf2+0x12>
    6ef0:	68 df       	rcall	.-304    	; 0x6dc2 <__fp_pscB>
    6ef2:	09 f0       	breq	.+2      	; 0x6ef6 <__gesf2+0x12>
    6ef4:	37 cf       	rjmp	.-402    	; 0x6d64 <__fp_nan>
    6ef6:	07 cf       	rjmp	.-498    	; 0x6d06 <__fp_inf>
    6ef8:	b9 01       	movw	r22, r18
    6efa:	ca 01       	movw	r24, r20
    6efc:	25 cf       	rjmp	.-438    	; 0x6d48 <__fp_mpack>

00006efe <hypot>:
    6efe:	9f 77       	andi	r25, 0x7F	; 127
    6f00:	5f 77       	andi	r21, 0x7F	; 127
    6f02:	b0 df       	rcall	.-160    	; 0x6e64 <__fp_split3>
    6f04:	98 f3       	brcs	.-26     	; 0x6eec <__gesf2+0x8>
    6f06:	99 23       	and	r25, r25
    6f08:	b9 f3       	breq	.-18     	; 0x6ef8 <__gesf2+0x14>
    6f0a:	55 23       	and	r21, r21
    6f0c:	b9 f3       	breq	.-18     	; 0x6efc <__gesf2+0x18>
    6f0e:	ff 27       	eor	r31, r31
    6f10:	95 17       	cp	r25, r21
    6f12:	58 f4       	brcc	.+22     	; 0x6f2a <hypot+0x2c>
    6f14:	e5 2f       	mov	r30, r21
    6f16:	e9 1b       	sub	r30, r25
    6f18:	ed 30       	cpi	r30, 0x0D	; 13
    6f1a:	70 f7       	brcc	.-36     	; 0x6ef8 <__gesf2+0x14>
    6f1c:	5e 3b       	cpi	r21, 0xBE	; 190
    6f1e:	10 f0       	brcs	.+4      	; 0x6f24 <hypot+0x26>
    6f20:	f1 e4       	ldi	r31, 0x41	; 65
    6f22:	1c c0       	rjmp	.+56     	; 0x6f5c <hypot+0x5e>
    6f24:	90 34       	cpi	r25, 0x40	; 64
    6f26:	e0 f4       	brcc	.+56     	; 0x6f60 <hypot+0x62>
    6f28:	0a c0       	rjmp	.+20     	; 0x6f3e <hypot+0x40>
    6f2a:	e9 2f       	mov	r30, r25
    6f2c:	e5 1b       	sub	r30, r21
    6f2e:	ed 30       	cpi	r30, 0x0D	; 13
    6f30:	28 f7       	brcc	.-54     	; 0x6efc <__gesf2+0x18>
    6f32:	9e 3b       	cpi	r25, 0xBE	; 190
    6f34:	10 f0       	brcs	.+4      	; 0x6f3a <hypot+0x3c>
    6f36:	f1 e4       	ldi	r31, 0x41	; 65
    6f38:	11 c0       	rjmp	.+34     	; 0x6f5c <hypot+0x5e>
    6f3a:	50 34       	cpi	r21, 0x40	; 64
    6f3c:	88 f4       	brcc	.+34     	; 0x6f60 <hypot+0x62>
    6f3e:	f9 ea       	ldi	r31, 0xA9	; 169
    6f40:	88 23       	and	r24, r24
    6f42:	2a f0       	brmi	.+10     	; 0x6f4e <hypot+0x50>
    6f44:	9a 95       	dec	r25
    6f46:	66 0f       	add	r22, r22
    6f48:	77 1f       	adc	r23, r23
    6f4a:	88 1f       	adc	r24, r24
    6f4c:	da f7       	brpl	.-10     	; 0x6f44 <hypot+0x46>
    6f4e:	44 23       	and	r20, r20
    6f50:	2a f0       	brmi	.+10     	; 0x6f5c <hypot+0x5e>
    6f52:	5a 95       	dec	r21
    6f54:	22 0f       	add	r18, r18
    6f56:	33 1f       	adc	r19, r19
    6f58:	44 1f       	adc	r20, r20
    6f5a:	da f7       	brpl	.-10     	; 0x6f52 <hypot+0x54>
    6f5c:	9f 1b       	sub	r25, r31
    6f5e:	5f 1b       	sub	r21, r31
    6f60:	ff 93       	push	r31
    6f62:	1f 93       	push	r17
    6f64:	0f 93       	push	r16
    6f66:	ff 92       	push	r15
    6f68:	ef 92       	push	r14
    6f6a:	79 01       	movw	r14, r18
    6f6c:	8a 01       	movw	r16, r20
    6f6e:	bb 27       	eor	r27, r27
    6f70:	ab 2f       	mov	r26, r27
    6f72:	9b 01       	movw	r18, r22
    6f74:	ac 01       	movw	r20, r24
    6f76:	96 d0       	rcall	.+300    	; 0x70a4 <__mulsf3_pse>
    6f78:	97 01       	movw	r18, r14
    6f7a:	a8 01       	movw	r20, r16
    6f7c:	bf 93       	push	r27
    6f7e:	7b 01       	movw	r14, r22
    6f80:	8c 01       	movw	r16, r24
    6f82:	aa 27       	eor	r26, r26
    6f84:	ba 2f       	mov	r27, r26
    6f86:	b9 01       	movw	r22, r18
    6f88:	ca 01       	movw	r24, r20
    6f8a:	8c d0       	rcall	.+280    	; 0x70a4 <__mulsf3_pse>
    6f8c:	af 91       	pop	r26
    6f8e:	97 01       	movw	r18, r14
    6f90:	a8 01       	movw	r20, r16
    6f92:	ef 90       	pop	r14
    6f94:	ff 90       	pop	r15
    6f96:	0f 91       	pop	r16
    6f98:	1f 91       	pop	r17
    6f9a:	26 dd       	rcall	.-1460   	; 0x69e8 <__addsf3x>
    6f9c:	41 df       	rcall	.-382    	; 0x6e20 <__fp_round>
    6f9e:	e1 d0       	rcall	.+450    	; 0x7162 <sqrt>
    6fa0:	4f 91       	pop	r20
    6fa2:	40 ff       	sbrs	r20, 0
    6fa4:	08 95       	ret
    6fa6:	55 27       	eor	r21, r21
    6fa8:	47 fd       	sbrc	r20, 7
    6faa:	50 95       	com	r21
    6fac:	09 c0       	rjmp	.+18     	; 0x6fc0 <ldexp>

00006fae <inverse>:
    6fae:	9b 01       	movw	r18, r22
    6fb0:	ac 01       	movw	r20, r24
    6fb2:	60 e0       	ldi	r22, 0x00	; 0
    6fb4:	70 e0       	ldi	r23, 0x00	; 0
    6fb6:	80 e8       	ldi	r24, 0x80	; 128
    6fb8:	9f e3       	ldi	r25, 0x3F	; 63
    6fba:	ab cd       	rjmp	.-1194   	; 0x6b12 <__divsf3>
    6fbc:	a4 ce       	rjmp	.-696    	; 0x6d06 <__fp_inf>
    6fbe:	c4 ce       	rjmp	.-632    	; 0x6d48 <__fp_mpack>

00006fc0 <ldexp>:
    6fc0:	59 df       	rcall	.-334    	; 0x6e74 <__fp_splitA>
    6fc2:	e8 f3       	brcs	.-6      	; 0x6fbe <inverse+0x10>
    6fc4:	99 23       	and	r25, r25
    6fc6:	d9 f3       	breq	.-10     	; 0x6fbe <inverse+0x10>
    6fc8:	94 0f       	add	r25, r20
    6fca:	51 1d       	adc	r21, r1
    6fcc:	bb f3       	brvs	.-18     	; 0x6fbc <inverse+0xe>
    6fce:	91 50       	subi	r25, 0x01	; 1
    6fd0:	50 40       	sbci	r21, 0x00	; 0
    6fd2:	94 f0       	brlt	.+36     	; 0x6ff8 <ldexp+0x38>
    6fd4:	59 f0       	breq	.+22     	; 0x6fec <ldexp+0x2c>
    6fd6:	88 23       	and	r24, r24
    6fd8:	32 f0       	brmi	.+12     	; 0x6fe6 <ldexp+0x26>
    6fda:	66 0f       	add	r22, r22
    6fdc:	77 1f       	adc	r23, r23
    6fde:	88 1f       	adc	r24, r24
    6fe0:	91 50       	subi	r25, 0x01	; 1
    6fe2:	50 40       	sbci	r21, 0x00	; 0
    6fe4:	c1 f7       	brne	.-16     	; 0x6fd6 <ldexp+0x16>
    6fe6:	9e 3f       	cpi	r25, 0xFE	; 254
    6fe8:	51 05       	cpc	r21, r1
    6fea:	44 f7       	brge	.-48     	; 0x6fbc <inverse+0xe>
    6fec:	88 0f       	add	r24, r24
    6fee:	91 1d       	adc	r25, r1
    6ff0:	96 95       	lsr	r25
    6ff2:	87 95       	ror	r24
    6ff4:	97 f9       	bld	r25, 7
    6ff6:	08 95       	ret
    6ff8:	5f 3f       	cpi	r21, 0xFF	; 255
    6ffa:	ac f0       	brlt	.+42     	; 0x7026 <ldexp+0x66>
    6ffc:	98 3e       	cpi	r25, 0xE8	; 232
    6ffe:	9c f0       	brlt	.+38     	; 0x7026 <ldexp+0x66>
    7000:	bb 27       	eor	r27, r27
    7002:	86 95       	lsr	r24
    7004:	77 95       	ror	r23
    7006:	67 95       	ror	r22
    7008:	b7 95       	ror	r27
    700a:	08 f4       	brcc	.+2      	; 0x700e <ldexp+0x4e>
    700c:	b1 60       	ori	r27, 0x01	; 1
    700e:	93 95       	inc	r25
    7010:	c1 f7       	brne	.-16     	; 0x7002 <ldexp+0x42>
    7012:	bb 0f       	add	r27, r27
    7014:	58 f7       	brcc	.-42     	; 0x6fec <ldexp+0x2c>
    7016:	11 f4       	brne	.+4      	; 0x701c <ldexp+0x5c>
    7018:	60 ff       	sbrs	r22, 0
    701a:	e8 cf       	rjmp	.-48     	; 0x6fec <ldexp+0x2c>
    701c:	6f 5f       	subi	r22, 0xFF	; 255
    701e:	7f 4f       	sbci	r23, 0xFF	; 255
    7020:	8f 4f       	sbci	r24, 0xFF	; 255
    7022:	9f 4f       	sbci	r25, 0xFF	; 255
    7024:	e3 cf       	rjmp	.-58     	; 0x6fec <ldexp+0x2c>
    7026:	58 cf       	rjmp	.-336    	; 0x6ed8 <__fp_szero>

00007028 <lround>:
    7028:	25 df       	rcall	.-438    	; 0x6e74 <__fp_splitA>
    702a:	58 f1       	brcs	.+86     	; 0x7082 <lround+0x5a>
    702c:	9e 57       	subi	r25, 0x7E	; 126
    702e:	58 f1       	brcs	.+86     	; 0x7086 <lround+0x5e>
    7030:	98 51       	subi	r25, 0x18	; 24
    7032:	a0 f0       	brcs	.+40     	; 0x705c <lround+0x34>
    7034:	e9 f0       	breq	.+58     	; 0x7070 <lround+0x48>
    7036:	98 30       	cpi	r25, 0x08	; 8
    7038:	20 f5       	brcc	.+72     	; 0x7082 <lround+0x5a>
    703a:	09 2e       	mov	r0, r25
    703c:	99 27       	eor	r25, r25
    703e:	66 0f       	add	r22, r22
    7040:	77 1f       	adc	r23, r23
    7042:	88 1f       	adc	r24, r24
    7044:	99 1f       	adc	r25, r25
    7046:	0a 94       	dec	r0
    7048:	d1 f7       	brne	.-12     	; 0x703e <lround+0x16>
    704a:	12 c0       	rjmp	.+36     	; 0x7070 <lround+0x48>
    704c:	06 2e       	mov	r0, r22
    704e:	67 2f       	mov	r22, r23
    7050:	78 2f       	mov	r23, r24
    7052:	88 27       	eor	r24, r24
    7054:	98 5f       	subi	r25, 0xF8	; 248
    7056:	11 f4       	brne	.+4      	; 0x705c <lround+0x34>
    7058:	00 0c       	add	r0, r0
    705a:	07 c0       	rjmp	.+14     	; 0x706a <lround+0x42>
    705c:	99 3f       	cpi	r25, 0xF9	; 249
    705e:	b4 f3       	brlt	.-20     	; 0x704c <lround+0x24>
    7060:	86 95       	lsr	r24
    7062:	77 95       	ror	r23
    7064:	67 95       	ror	r22
    7066:	93 95       	inc	r25
    7068:	d9 f7       	brne	.-10     	; 0x7060 <lround+0x38>
    706a:	61 1d       	adc	r22, r1
    706c:	71 1d       	adc	r23, r1
    706e:	81 1d       	adc	r24, r1
    7070:	3e f4       	brtc	.+14     	; 0x7080 <lround+0x58>
    7072:	90 95       	com	r25
    7074:	80 95       	com	r24
    7076:	70 95       	com	r23
    7078:	61 95       	neg	r22
    707a:	7f 4f       	sbci	r23, 0xFF	; 255
    707c:	8f 4f       	sbci	r24, 0xFF	; 255
    707e:	9f 4f       	sbci	r25, 0xFF	; 255
    7080:	08 95       	ret
    7082:	68 94       	set
    7084:	29 cf       	rjmp	.-430    	; 0x6ed8 <__fp_szero>
    7086:	27 cf       	rjmp	.-434    	; 0x6ed6 <__fp_zero>

00007088 <__mulsf3>:
    7088:	0b d0       	rcall	.+22     	; 0x70a0 <__mulsf3x>
    708a:	ca ce       	rjmp	.-620    	; 0x6e20 <__fp_round>
    708c:	93 de       	rcall	.-730    	; 0x6db4 <__fp_pscA>
    708e:	28 f0       	brcs	.+10     	; 0x709a <__mulsf3+0x12>
    7090:	98 de       	rcall	.-720    	; 0x6dc2 <__fp_pscB>
    7092:	18 f0       	brcs	.+6      	; 0x709a <__mulsf3+0x12>
    7094:	95 23       	and	r25, r21
    7096:	09 f0       	breq	.+2      	; 0x709a <__mulsf3+0x12>
    7098:	36 ce       	rjmp	.-916    	; 0x6d06 <__fp_inf>
    709a:	64 ce       	rjmp	.-824    	; 0x6d64 <__fp_nan>
    709c:	11 24       	eor	r1, r1
    709e:	1c cf       	rjmp	.-456    	; 0x6ed8 <__fp_szero>

000070a0 <__mulsf3x>:
    70a0:	e1 de       	rcall	.-574    	; 0x6e64 <__fp_split3>
    70a2:	a0 f3       	brcs	.-24     	; 0x708c <__mulsf3+0x4>

000070a4 <__mulsf3_pse>:
    70a4:	95 9f       	mul	r25, r21
    70a6:	d1 f3       	breq	.-12     	; 0x709c <__mulsf3+0x14>
    70a8:	95 0f       	add	r25, r21
    70aa:	50 e0       	ldi	r21, 0x00	; 0
    70ac:	55 1f       	adc	r21, r21
    70ae:	62 9f       	mul	r22, r18
    70b0:	f0 01       	movw	r30, r0
    70b2:	72 9f       	mul	r23, r18
    70b4:	bb 27       	eor	r27, r27
    70b6:	f0 0d       	add	r31, r0
    70b8:	b1 1d       	adc	r27, r1
    70ba:	63 9f       	mul	r22, r19
    70bc:	aa 27       	eor	r26, r26
    70be:	f0 0d       	add	r31, r0
    70c0:	b1 1d       	adc	r27, r1
    70c2:	aa 1f       	adc	r26, r26
    70c4:	64 9f       	mul	r22, r20
    70c6:	66 27       	eor	r22, r22
    70c8:	b0 0d       	add	r27, r0
    70ca:	a1 1d       	adc	r26, r1
    70cc:	66 1f       	adc	r22, r22
    70ce:	82 9f       	mul	r24, r18
    70d0:	22 27       	eor	r18, r18
    70d2:	b0 0d       	add	r27, r0
    70d4:	a1 1d       	adc	r26, r1
    70d6:	62 1f       	adc	r22, r18
    70d8:	73 9f       	mul	r23, r19
    70da:	b0 0d       	add	r27, r0
    70dc:	a1 1d       	adc	r26, r1
    70de:	62 1f       	adc	r22, r18
    70e0:	83 9f       	mul	r24, r19
    70e2:	a0 0d       	add	r26, r0
    70e4:	61 1d       	adc	r22, r1
    70e6:	22 1f       	adc	r18, r18
    70e8:	74 9f       	mul	r23, r20
    70ea:	33 27       	eor	r19, r19
    70ec:	a0 0d       	add	r26, r0
    70ee:	61 1d       	adc	r22, r1
    70f0:	23 1f       	adc	r18, r19
    70f2:	84 9f       	mul	r24, r20
    70f4:	60 0d       	add	r22, r0
    70f6:	21 1d       	adc	r18, r1
    70f8:	82 2f       	mov	r24, r18
    70fa:	76 2f       	mov	r23, r22
    70fc:	6a 2f       	mov	r22, r26
    70fe:	11 24       	eor	r1, r1
    7100:	9f 57       	subi	r25, 0x7F	; 127
    7102:	50 40       	sbci	r21, 0x00	; 0
    7104:	8a f0       	brmi	.+34     	; 0x7128 <__mulsf3_pse+0x84>
    7106:	e1 f0       	breq	.+56     	; 0x7140 <__mulsf3_pse+0x9c>
    7108:	88 23       	and	r24, r24
    710a:	4a f0       	brmi	.+18     	; 0x711e <__mulsf3_pse+0x7a>
    710c:	ee 0f       	add	r30, r30
    710e:	ff 1f       	adc	r31, r31
    7110:	bb 1f       	adc	r27, r27
    7112:	66 1f       	adc	r22, r22
    7114:	77 1f       	adc	r23, r23
    7116:	88 1f       	adc	r24, r24
    7118:	91 50       	subi	r25, 0x01	; 1
    711a:	50 40       	sbci	r21, 0x00	; 0
    711c:	a9 f7       	brne	.-22     	; 0x7108 <__mulsf3_pse+0x64>
    711e:	9e 3f       	cpi	r25, 0xFE	; 254
    7120:	51 05       	cpc	r21, r1
    7122:	70 f0       	brcs	.+28     	; 0x7140 <__mulsf3_pse+0x9c>
    7124:	f0 cd       	rjmp	.-1056   	; 0x6d06 <__fp_inf>
    7126:	d8 ce       	rjmp	.-592    	; 0x6ed8 <__fp_szero>
    7128:	5f 3f       	cpi	r21, 0xFF	; 255
    712a:	ec f3       	brlt	.-6      	; 0x7126 <__mulsf3_pse+0x82>
    712c:	98 3e       	cpi	r25, 0xE8	; 232
    712e:	dc f3       	brlt	.-10     	; 0x7126 <__mulsf3_pse+0x82>
    7130:	86 95       	lsr	r24
    7132:	77 95       	ror	r23
    7134:	67 95       	ror	r22
    7136:	b7 95       	ror	r27
    7138:	f7 95       	ror	r31
    713a:	e7 95       	ror	r30
    713c:	9f 5f       	subi	r25, 0xFF	; 255
    713e:	c1 f7       	brne	.-16     	; 0x7130 <__mulsf3_pse+0x8c>
    7140:	fe 2b       	or	r31, r30
    7142:	88 0f       	add	r24, r24
    7144:	91 1d       	adc	r25, r1
    7146:	96 95       	lsr	r25
    7148:	87 95       	ror	r24
    714a:	97 f9       	bld	r25, 7
    714c:	08 95       	ret

0000714e <sin>:
    714e:	9f 93       	push	r25
    7150:	40 de       	rcall	.-896    	; 0x6dd2 <__fp_rempio2>
    7152:	0f 90       	pop	r0
    7154:	07 fc       	sbrc	r0, 7
    7156:	ee 5f       	subi	r30, 0xFE	; 254
    7158:	74 ce       	rjmp	.-792    	; 0x6e42 <__fp_sinus>
    715a:	11 f4       	brne	.+4      	; 0x7160 <sin+0x12>
    715c:	0e f4       	brtc	.+2      	; 0x7160 <sin+0x12>
    715e:	02 ce       	rjmp	.-1020   	; 0x6d64 <__fp_nan>
    7160:	f3 cd       	rjmp	.-1050   	; 0x6d48 <__fp_mpack>

00007162 <sqrt>:
    7162:	88 de       	rcall	.-752    	; 0x6e74 <__fp_splitA>
    7164:	d0 f3       	brcs	.-12     	; 0x715a <sin+0xc>
    7166:	99 23       	and	r25, r25
    7168:	d9 f3       	breq	.-10     	; 0x7160 <sin+0x12>
    716a:	ce f3       	brts	.-14     	; 0x715e <sin+0x10>
    716c:	9f 57       	subi	r25, 0x7F	; 127
    716e:	55 0b       	sbc	r21, r21
    7170:	87 ff       	sbrs	r24, 7
    7172:	43 d0       	rcall	.+134    	; 0x71fa <__fp_norm2>
    7174:	00 24       	eor	r0, r0
    7176:	a0 e6       	ldi	r26, 0x60	; 96
    7178:	40 ea       	ldi	r20, 0xA0	; 160
    717a:	90 01       	movw	r18, r0
    717c:	80 58       	subi	r24, 0x80	; 128
    717e:	56 95       	lsr	r21
    7180:	97 95       	ror	r25
    7182:	28 f4       	brcc	.+10     	; 0x718e <sqrt+0x2c>
    7184:	80 5c       	subi	r24, 0xC0	; 192
    7186:	66 0f       	add	r22, r22
    7188:	77 1f       	adc	r23, r23
    718a:	88 1f       	adc	r24, r24
    718c:	20 f0       	brcs	.+8      	; 0x7196 <sqrt+0x34>
    718e:	26 17       	cp	r18, r22
    7190:	37 07       	cpc	r19, r23
    7192:	48 07       	cpc	r20, r24
    7194:	30 f4       	brcc	.+12     	; 0x71a2 <sqrt+0x40>
    7196:	62 1b       	sub	r22, r18
    7198:	73 0b       	sbc	r23, r19
    719a:	84 0b       	sbc	r24, r20
    719c:	20 29       	or	r18, r0
    719e:	31 29       	or	r19, r1
    71a0:	4a 2b       	or	r20, r26
    71a2:	a6 95       	lsr	r26
    71a4:	17 94       	ror	r1
    71a6:	07 94       	ror	r0
    71a8:	20 25       	eor	r18, r0
    71aa:	31 25       	eor	r19, r1
    71ac:	4a 27       	eor	r20, r26
    71ae:	58 f7       	brcc	.-42     	; 0x7186 <sqrt+0x24>
    71b0:	66 0f       	add	r22, r22
    71b2:	77 1f       	adc	r23, r23
    71b4:	88 1f       	adc	r24, r24
    71b6:	20 f0       	brcs	.+8      	; 0x71c0 <sqrt+0x5e>
    71b8:	26 17       	cp	r18, r22
    71ba:	37 07       	cpc	r19, r23
    71bc:	48 07       	cpc	r20, r24
    71be:	30 f4       	brcc	.+12     	; 0x71cc <sqrt+0x6a>
    71c0:	62 0b       	sbc	r22, r18
    71c2:	73 0b       	sbc	r23, r19
    71c4:	84 0b       	sbc	r24, r20
    71c6:	20 0d       	add	r18, r0
    71c8:	31 1d       	adc	r19, r1
    71ca:	41 1d       	adc	r20, r1
    71cc:	a0 95       	com	r26
    71ce:	81 f7       	brne	.-32     	; 0x71b0 <sqrt+0x4e>
    71d0:	b9 01       	movw	r22, r18
    71d2:	84 2f       	mov	r24, r20
    71d4:	91 58       	subi	r25, 0x81	; 129
    71d6:	88 0f       	add	r24, r24
    71d8:	96 95       	lsr	r25
    71da:	87 95       	ror	r24
    71dc:	08 95       	ret

000071de <square>:
    71de:	9b 01       	movw	r18, r22
    71e0:	ac 01       	movw	r20, r24
    71e2:	52 cf       	rjmp	.-348    	; 0x7088 <__mulsf3>

000071e4 <trunc>:
    71e4:	61 de       	rcall	.-830    	; 0x6ea8 <__fp_trunc>
    71e6:	20 f0       	brcs	.+8      	; 0x71f0 <trunc+0xc>
    71e8:	9f 37       	cpi	r25, 0x7F	; 127
    71ea:	08 f4       	brcc	.+2      	; 0x71ee <trunc+0xa>
    71ec:	75 ce       	rjmp	.-790    	; 0x6ed8 <__fp_szero>
    71ee:	91 cd       	rjmp	.-1246   	; 0x6d12 <__fp_mintl>
    71f0:	ab cd       	rjmp	.-1194   	; 0x6d48 <__fp_mpack>

000071f2 <__unordsf2>:
    71f2:	65 dd       	rcall	.-1334   	; 0x6cbe <__fp_cmp>
    71f4:	88 0b       	sbc	r24, r24
    71f6:	99 0b       	sbc	r25, r25
    71f8:	08 95       	ret

000071fa <__fp_norm2>:
    71fa:	91 50       	subi	r25, 0x01	; 1
    71fc:	50 40       	sbci	r21, 0x00	; 0
    71fe:	66 0f       	add	r22, r22
    7200:	77 1f       	adc	r23, r23
    7202:	88 1f       	adc	r24, r24
    7204:	d2 f7       	brpl	.-12     	; 0x71fa <__fp_norm2>
    7206:	08 95       	ret

00007208 <__fp_powsodd>:
    7208:	9f 93       	push	r25
    720a:	8f 93       	push	r24
    720c:	7f 93       	push	r23
    720e:	6f 93       	push	r22
    7210:	ff 93       	push	r31
    7212:	ef 93       	push	r30
    7214:	9b 01       	movw	r18, r22
    7216:	ac 01       	movw	r20, r24
    7218:	37 df       	rcall	.-402    	; 0x7088 <__mulsf3>
    721a:	ef 91       	pop	r30
    721c:	ff 91       	pop	r31
    721e:	a5 dd       	rcall	.-1206   	; 0x6d6a <__fp_powser>
    7220:	2f 91       	pop	r18
    7222:	3f 91       	pop	r19
    7224:	4f 91       	pop	r20
    7226:	5f 91       	pop	r21
    7228:	2f cf       	rjmp	.-418    	; 0x7088 <__mulsf3>

0000722a <__mulsi3>:
    722a:	62 9f       	mul	r22, r18
    722c:	d0 01       	movw	r26, r0
    722e:	73 9f       	mul	r23, r19
    7230:	f0 01       	movw	r30, r0
    7232:	82 9f       	mul	r24, r18
    7234:	e0 0d       	add	r30, r0
    7236:	f1 1d       	adc	r31, r1
    7238:	64 9f       	mul	r22, r20
    723a:	e0 0d       	add	r30, r0
    723c:	f1 1d       	adc	r31, r1
    723e:	92 9f       	mul	r25, r18
    7240:	f0 0d       	add	r31, r0
    7242:	83 9f       	mul	r24, r19
    7244:	f0 0d       	add	r31, r0
    7246:	74 9f       	mul	r23, r20
    7248:	f0 0d       	add	r31, r0
    724a:	65 9f       	mul	r22, r21
    724c:	f0 0d       	add	r31, r0
    724e:	99 27       	eor	r25, r25
    7250:	72 9f       	mul	r23, r18
    7252:	b0 0d       	add	r27, r0
    7254:	e1 1d       	adc	r30, r1
    7256:	f9 1f       	adc	r31, r25
    7258:	63 9f       	mul	r22, r19
    725a:	b0 0d       	add	r27, r0
    725c:	e1 1d       	adc	r30, r1
    725e:	f9 1f       	adc	r31, r25
    7260:	bd 01       	movw	r22, r26
    7262:	cf 01       	movw	r24, r30
    7264:	11 24       	eor	r1, r1
    7266:	08 95       	ret

00007268 <__udivmodsi4>:
    7268:	a1 e2       	ldi	r26, 0x21	; 33
    726a:	1a 2e       	mov	r1, r26
    726c:	aa 1b       	sub	r26, r26
    726e:	bb 1b       	sub	r27, r27
    7270:	fd 01       	movw	r30, r26
    7272:	0d c0       	rjmp	.+26     	; 0x728e <__udivmodsi4_ep>

00007274 <__udivmodsi4_loop>:
    7274:	aa 1f       	adc	r26, r26
    7276:	bb 1f       	adc	r27, r27
    7278:	ee 1f       	adc	r30, r30
    727a:	ff 1f       	adc	r31, r31
    727c:	a2 17       	cp	r26, r18
    727e:	b3 07       	cpc	r27, r19
    7280:	e4 07       	cpc	r30, r20
    7282:	f5 07       	cpc	r31, r21
    7284:	20 f0       	brcs	.+8      	; 0x728e <__udivmodsi4_ep>
    7286:	a2 1b       	sub	r26, r18
    7288:	b3 0b       	sbc	r27, r19
    728a:	e4 0b       	sbc	r30, r20
    728c:	f5 0b       	sbc	r31, r21

0000728e <__udivmodsi4_ep>:
    728e:	66 1f       	adc	r22, r22
    7290:	77 1f       	adc	r23, r23
    7292:	88 1f       	adc	r24, r24
    7294:	99 1f       	adc	r25, r25
    7296:	1a 94       	dec	r1
    7298:	69 f7       	brne	.-38     	; 0x7274 <__udivmodsi4_loop>
    729a:	60 95       	com	r22
    729c:	70 95       	com	r23
    729e:	80 95       	com	r24
    72a0:	90 95       	com	r25
    72a2:	9b 01       	movw	r18, r22
    72a4:	ac 01       	movw	r20, r24
    72a6:	bd 01       	movw	r22, r26
    72a8:	cf 01       	movw	r24, r30
    72aa:	08 95       	ret

000072ac <__prologue_saves__>:
    72ac:	2f 92       	push	r2
    72ae:	3f 92       	push	r3
    72b0:	4f 92       	push	r4
    72b2:	5f 92       	push	r5
    72b4:	6f 92       	push	r6
    72b6:	7f 92       	push	r7
    72b8:	8f 92       	push	r8
    72ba:	9f 92       	push	r9
    72bc:	af 92       	push	r10
    72be:	bf 92       	push	r11
    72c0:	cf 92       	push	r12
    72c2:	df 92       	push	r13
    72c4:	ef 92       	push	r14
    72c6:	ff 92       	push	r15
    72c8:	0f 93       	push	r16
    72ca:	1f 93       	push	r17
    72cc:	cf 93       	push	r28
    72ce:	df 93       	push	r29
    72d0:	cd b7       	in	r28, 0x3d	; 61
    72d2:	de b7       	in	r29, 0x3e	; 62
    72d4:	ca 1b       	sub	r28, r26
    72d6:	db 0b       	sbc	r29, r27
    72d8:	0f b6       	in	r0, 0x3f	; 63
    72da:	f8 94       	cli
    72dc:	de bf       	out	0x3e, r29	; 62
    72de:	0f be       	out	0x3f, r0	; 63
    72e0:	cd bf       	out	0x3d, r28	; 61
    72e2:	19 94       	eijmp

000072e4 <__epilogue_restores__>:
    72e4:	2a 88       	ldd	r2, Y+18	; 0x12
    72e6:	39 88       	ldd	r3, Y+17	; 0x11
    72e8:	48 88       	ldd	r4, Y+16	; 0x10
    72ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    72ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    72ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    72f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    72f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    72f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    72f6:	b9 84       	ldd	r11, Y+9	; 0x09
    72f8:	c8 84       	ldd	r12, Y+8	; 0x08
    72fa:	df 80       	ldd	r13, Y+7	; 0x07
    72fc:	ee 80       	ldd	r14, Y+6	; 0x06
    72fe:	fd 80       	ldd	r15, Y+5	; 0x05
    7300:	0c 81       	ldd	r16, Y+4	; 0x04
    7302:	1b 81       	ldd	r17, Y+3	; 0x03
    7304:	aa 81       	ldd	r26, Y+2	; 0x02
    7306:	b9 81       	ldd	r27, Y+1	; 0x01
    7308:	ce 0f       	add	r28, r30
    730a:	d1 1d       	adc	r29, r1
    730c:	0f b6       	in	r0, 0x3f	; 63
    730e:	f8 94       	cli
    7310:	de bf       	out	0x3e, r29	; 62
    7312:	0f be       	out	0x3f, r0	; 63
    7314:	cd bf       	out	0x3d, r28	; 61
    7316:	ed 01       	movw	r28, r26
    7318:	08 95       	ret

0000731a <strtod>:
    731a:	8f 92       	push	r8
    731c:	9f 92       	push	r9
    731e:	af 92       	push	r10
    7320:	bf 92       	push	r11
    7322:	cf 92       	push	r12
    7324:	df 92       	push	r13
    7326:	ef 92       	push	r14
    7328:	ff 92       	push	r15
    732a:	0f 93       	push	r16
    732c:	1f 93       	push	r17
    732e:	cf 93       	push	r28
    7330:	df 93       	push	r29
    7332:	ec 01       	movw	r28, r24
    7334:	5b 01       	movw	r10, r22
    7336:	61 15       	cp	r22, r1
    7338:	71 05       	cpc	r23, r1
    733a:	19 f0       	breq	.+6      	; 0x7342 <strtod+0x28>
    733c:	fb 01       	movw	r30, r22
    733e:	80 83       	st	Z, r24
    7340:	91 83       	std	Z+1, r25	; 0x01
    7342:	f9 90       	ld	r15, Y+
    7344:	8f 2d       	mov	r24, r15
    7346:	90 e0       	ldi	r25, 0x00	; 0
    7348:	0e 94 fa 3b 	call	0x77f4	; 0x77f4 <isspace>
    734c:	89 2b       	or	r24, r25
    734e:	c9 f7       	brne	.-14     	; 0x7342 <strtod+0x28>
    7350:	fd e2       	ldi	r31, 0x2D	; 45
    7352:	ff 16       	cp	r15, r31
    7354:	21 f4       	brne	.+8      	; 0x735e <strtod+0x44>
    7356:	f9 90       	ld	r15, Y+
    7358:	ee 24       	eor	r14, r14
    735a:	e3 94       	inc	r14
    735c:	05 c0       	rjmp	.+10     	; 0x7368 <strtod+0x4e>
    735e:	2b e2       	ldi	r18, 0x2B	; 43
    7360:	f2 16       	cp	r15, r18
    7362:	09 f4       	brne	.+2      	; 0x7366 <strtod+0x4c>
    7364:	f9 90       	ld	r15, Y+
    7366:	ee 24       	eor	r14, r14
    7368:	8e 01       	movw	r16, r28
    736a:	01 50       	subi	r16, 0x01	; 1
    736c:	10 40       	sbci	r17, 0x00	; 0
    736e:	c8 01       	movw	r24, r16
    7370:	63 ec       	ldi	r22, 0xC3	; 195
    7372:	7a e0       	ldi	r23, 0x0A	; 10
    7374:	43 e0       	ldi	r20, 0x03	; 3
    7376:	50 e0       	ldi	r21, 0x00	; 0
    7378:	0e 94 0a 3c 	call	0x7814	; 0x7814 <strncasecmp_P>
    737c:	89 2b       	or	r24, r25
    737e:	01 f5       	brne	.+64     	; 0x73c0 <strtod+0xa6>
    7380:	8e 01       	movw	r16, r28
    7382:	0e 5f       	subi	r16, 0xFE	; 254
    7384:	1f 4f       	sbci	r17, 0xFF	; 255
    7386:	c8 01       	movw	r24, r16
    7388:	66 ec       	ldi	r22, 0xC6	; 198
    738a:	7a e0       	ldi	r23, 0x0A	; 10
    738c:	45 e0       	ldi	r20, 0x05	; 5
    738e:	50 e0       	ldi	r21, 0x00	; 0
    7390:	0e 94 0a 3c 	call	0x7814	; 0x7814 <strncasecmp_P>
    7394:	89 2b       	or	r24, r25
    7396:	19 f4       	brne	.+6      	; 0x739e <strtod+0x84>
    7398:	8e 01       	movw	r16, r28
    739a:	09 5f       	subi	r16, 0xF9	; 249
    739c:	1f 4f       	sbci	r17, 0xFF	; 255
    739e:	a1 14       	cp	r10, r1
    73a0:	b1 04       	cpc	r11, r1
    73a2:	19 f0       	breq	.+6      	; 0x73aa <strtod+0x90>
    73a4:	f5 01       	movw	r30, r10
    73a6:	00 83       	st	Z, r16
    73a8:	11 83       	std	Z+1, r17	; 0x01
    73aa:	e0 fc       	sbrc	r14, 0
    73ac:	04 c0       	rjmp	.+8      	; 0x73b6 <strtod+0x9c>
    73ae:	70 e0       	ldi	r23, 0x00	; 0
    73b0:	90 e0       	ldi	r25, 0x00	; 0
    73b2:	80 e8       	ldi	r24, 0x80	; 128
    73b4:	14 c0       	rjmp	.+40     	; 0x73de <strtod+0xc4>
    73b6:	70 e0       	ldi	r23, 0x00	; 0
    73b8:	90 e0       	ldi	r25, 0x00	; 0
    73ba:	80 e8       	ldi	r24, 0x80	; 128
    73bc:	6f ef       	ldi	r22, 0xFF	; 255
    73be:	08 c1       	rjmp	.+528    	; 0x75d0 <strtod+0x2b6>
    73c0:	c8 01       	movw	r24, r16
    73c2:	6b ec       	ldi	r22, 0xCB	; 203
    73c4:	7a e0       	ldi	r23, 0x0A	; 10
    73c6:	43 e0       	ldi	r20, 0x03	; 3
    73c8:	50 e0       	ldi	r21, 0x00	; 0
    73ca:	0e 94 0a 3c 	call	0x7814	; 0x7814 <strncasecmp_P>
    73ce:	89 2b       	or	r24, r25
    73d0:	69 f4       	brne	.+26     	; 0x73ec <strtod+0xd2>
    73d2:	a1 14       	cp	r10, r1
    73d4:	b1 04       	cpc	r11, r1
    73d6:	29 f4       	brne	.+10     	; 0x73e2 <strtod+0xc8>
    73d8:	70 e0       	ldi	r23, 0x00	; 0
    73da:	90 e0       	ldi	r25, 0x00	; 0
    73dc:	80 ec       	ldi	r24, 0xC0	; 192
    73de:	6f e7       	ldi	r22, 0x7F	; 127
    73e0:	f7 c0       	rjmp	.+494    	; 0x75d0 <strtod+0x2b6>
    73e2:	22 96       	adiw	r28, 0x02	; 2
    73e4:	f5 01       	movw	r30, r10
    73e6:	c0 83       	st	Z, r28
    73e8:	d1 83       	std	Z+1, r29	; 0x01
    73ea:	f6 cf       	rjmp	.-20     	; 0x73d8 <strtod+0xbe>
    73ec:	88 24       	eor	r8, r8
    73ee:	99 24       	eor	r9, r9
    73f0:	40 e0       	ldi	r20, 0x00	; 0
    73f2:	50 e0       	ldi	r21, 0x00	; 0
    73f4:	60 e0       	ldi	r22, 0x00	; 0
    73f6:	70 e0       	ldi	r23, 0x00	; 0
    73f8:	ef 2d       	mov	r30, r15
    73fa:	e0 53       	subi	r30, 0x30	; 48
    73fc:	ea 30       	cpi	r30, 0x0A	; 10
    73fe:	a0 f5       	brcc	.+104    	; 0x7468 <strtod+0x14e>
    7400:	f2 e0       	ldi	r31, 0x02	; 2
    7402:	ef 2a       	or	r14, r31
    7404:	8e 2d       	mov	r24, r14
    7406:	90 e0       	ldi	r25, 0x00	; 0
    7408:	9c 01       	movw	r18, r24
    740a:	28 70       	andi	r18, 0x08	; 8
    740c:	30 70       	andi	r19, 0x00	; 0
    740e:	e2 fe       	sbrs	r14, 2
    7410:	06 c0       	rjmp	.+12     	; 0x741e <strtod+0x104>
    7412:	23 2b       	or	r18, r19
    7414:	79 f5       	brne	.+94     	; 0x7474 <strtod+0x15a>
    7416:	08 94       	sec
    7418:	81 1c       	adc	r8, r1
    741a:	91 1c       	adc	r9, r1
    741c:	2b c0       	rjmp	.+86     	; 0x7474 <strtod+0x15a>
    741e:	23 2b       	or	r18, r19
    7420:	19 f0       	breq	.+6      	; 0x7428 <strtod+0x10e>
    7422:	08 94       	sec
    7424:	81 08       	sbc	r8, r1
    7426:	91 08       	sbc	r9, r1
    7428:	db 01       	movw	r26, r22
    742a:	ca 01       	movw	r24, r20
    742c:	12 e0       	ldi	r17, 0x02	; 2
    742e:	88 0f       	add	r24, r24
    7430:	99 1f       	adc	r25, r25
    7432:	aa 1f       	adc	r26, r26
    7434:	bb 1f       	adc	r27, r27
    7436:	1a 95       	dec	r17
    7438:	d1 f7       	brne	.-12     	; 0x742e <strtod+0x114>
    743a:	48 0f       	add	r20, r24
    743c:	59 1f       	adc	r21, r25
    743e:	6a 1f       	adc	r22, r26
    7440:	7b 1f       	adc	r23, r27
    7442:	44 0f       	add	r20, r20
    7444:	55 1f       	adc	r21, r21
    7446:	66 1f       	adc	r22, r22
    7448:	77 1f       	adc	r23, r23
    744a:	4e 0f       	add	r20, r30
    744c:	51 1d       	adc	r21, r1
    744e:	61 1d       	adc	r22, r1
    7450:	71 1d       	adc	r23, r1
    7452:	48 39       	cpi	r20, 0x98	; 152
    7454:	29 e9       	ldi	r18, 0x99	; 153
    7456:	52 07       	cpc	r21, r18
    7458:	29 e9       	ldi	r18, 0x99	; 153
    745a:	62 07       	cpc	r22, r18
    745c:	29 e1       	ldi	r18, 0x19	; 25
    745e:	72 07       	cpc	r23, r18
    7460:	48 f0       	brcs	.+18     	; 0x7474 <strtod+0x15a>
    7462:	84 e0       	ldi	r24, 0x04	; 4
    7464:	e8 2a       	or	r14, r24
    7466:	06 c0       	rjmp	.+12     	; 0x7474 <strtod+0x15a>
    7468:	ee 3f       	cpi	r30, 0xFE	; 254
    746a:	31 f4       	brne	.+12     	; 0x7478 <strtod+0x15e>
    746c:	e3 fc       	sbrc	r14, 3
    746e:	39 c0       	rjmp	.+114    	; 0x74e2 <strtod+0x1c8>
    7470:	98 e0       	ldi	r25, 0x08	; 8
    7472:	e9 2a       	or	r14, r25
    7474:	f9 90       	ld	r15, Y+
    7476:	c0 cf       	rjmp	.-128    	; 0x73f8 <strtod+0xde>
    7478:	e5 33       	cpi	r30, 0x35	; 53
    747a:	11 f0       	breq	.+4      	; 0x7480 <strtod+0x166>
    747c:	e5 31       	cpi	r30, 0x15	; 21
    747e:	89 f5       	brne	.+98     	; 0x74e2 <strtod+0x1c8>
    7480:	29 91       	ld	r18, Y+
    7482:	2d 32       	cpi	r18, 0x2D	; 45
    7484:	19 f4       	brne	.+6      	; 0x748c <strtod+0x172>
    7486:	e0 e1       	ldi	r30, 0x10	; 16
    7488:	ee 2a       	or	r14, r30
    748a:	05 c0       	rjmp	.+10     	; 0x7496 <strtod+0x17c>
    748c:	2b 32       	cpi	r18, 0x2B	; 43
    748e:	19 f0       	breq	.+6      	; 0x7496 <strtod+0x17c>
    7490:	81 e0       	ldi	r24, 0x01	; 1
    7492:	90 e0       	ldi	r25, 0x00	; 0
    7494:	03 c0       	rjmp	.+6      	; 0x749c <strtod+0x182>
    7496:	29 91       	ld	r18, Y+
    7498:	82 e0       	ldi	r24, 0x02	; 2
    749a:	90 e0       	ldi	r25, 0x00	; 0
    749c:	e2 2f       	mov	r30, r18
    749e:	e0 53       	subi	r30, 0x30	; 48
    74a0:	ea 30       	cpi	r30, 0x0A	; 10
    74a2:	18 f0       	brcs	.+6      	; 0x74aa <strtod+0x190>
    74a4:	c8 1b       	sub	r28, r24
    74a6:	d9 0b       	sbc	r29, r25
    74a8:	1c c0       	rjmp	.+56     	; 0x74e2 <strtod+0x1c8>
    74aa:	20 e0       	ldi	r18, 0x00	; 0
    74ac:	30 e0       	ldi	r19, 0x00	; 0
    74ae:	fc e0       	ldi	r31, 0x0C	; 12
    74b0:	20 38       	cpi	r18, 0x80	; 128
    74b2:	3f 07       	cpc	r19, r31
    74b4:	5c f4       	brge	.+22     	; 0x74cc <strtod+0x1b2>
    74b6:	c9 01       	movw	r24, r18
    74b8:	88 0f       	add	r24, r24
    74ba:	99 1f       	adc	r25, r25
    74bc:	88 0f       	add	r24, r24
    74be:	99 1f       	adc	r25, r25
    74c0:	28 0f       	add	r18, r24
    74c2:	39 1f       	adc	r19, r25
    74c4:	22 0f       	add	r18, r18
    74c6:	33 1f       	adc	r19, r19
    74c8:	2e 0f       	add	r18, r30
    74ca:	31 1d       	adc	r19, r1
    74cc:	e9 91       	ld	r30, Y+
    74ce:	e0 53       	subi	r30, 0x30	; 48
    74d0:	ea 30       	cpi	r30, 0x0A	; 10
    74d2:	68 f3       	brcs	.-38     	; 0x74ae <strtod+0x194>
    74d4:	e4 fe       	sbrs	r14, 4
    74d6:	03 c0       	rjmp	.+6      	; 0x74de <strtod+0x1c4>
    74d8:	30 95       	com	r19
    74da:	21 95       	neg	r18
    74dc:	3f 4f       	sbci	r19, 0xFF	; 255
    74de:	82 0e       	add	r8, r18
    74e0:	93 1e       	adc	r9, r19
    74e2:	ce 2c       	mov	r12, r14
    74e4:	dd 24       	eor	r13, r13
    74e6:	e1 fe       	sbrs	r14, 1
    74e8:	07 c0       	rjmp	.+14     	; 0x74f8 <strtod+0x1de>
    74ea:	a1 14       	cp	r10, r1
    74ec:	b1 04       	cpc	r11, r1
    74ee:	21 f0       	breq	.+8      	; 0x74f8 <strtod+0x1de>
    74f0:	21 97       	sbiw	r28, 0x01	; 1
    74f2:	f5 01       	movw	r30, r10
    74f4:	c0 83       	st	Z, r28
    74f6:	d1 83       	std	Z+1, r29	; 0x01
    74f8:	cb 01       	movw	r24, r22
    74fa:	ba 01       	movw	r22, r20
    74fc:	0e 94 22 36 	call	0x6c44	; 0x6c44 <__floatunsisf>
    7500:	7b 01       	movw	r14, r22
    7502:	8c 01       	movw	r16, r24
    7504:	f3 e0       	ldi	r31, 0x03	; 3
    7506:	cf 22       	and	r12, r31
    7508:	dd 24       	eor	r13, r13
    750a:	23 e0       	ldi	r18, 0x03	; 3
    750c:	c2 16       	cp	r12, r18
    750e:	d1 04       	cpc	r13, r1
    7510:	21 f4       	brne	.+8      	; 0x751a <strtod+0x200>
    7512:	17 fb       	bst	r17, 7
    7514:	10 95       	com	r17
    7516:	17 f9       	bld	r17, 7
    7518:	10 95       	com	r17
    751a:	57 01       	movw	r10, r14
    751c:	68 01       	movw	r12, r16
    751e:	c8 01       	movw	r24, r16
    7520:	b7 01       	movw	r22, r14
    7522:	20 e0       	ldi	r18, 0x00	; 0
    7524:	30 e0       	ldi	r19, 0x00	; 0
    7526:	40 e0       	ldi	r20, 0x00	; 0
    7528:	50 e0       	ldi	r21, 0x00	; 0
    752a:	0e 94 82 35 	call	0x6b04	; 0x6b04 <__cmpsf2>
    752e:	88 23       	and	r24, r24
    7530:	09 f4       	brne	.+2      	; 0x7534 <strtod+0x21a>
    7532:	4a c0       	rjmp	.+148    	; 0x75c8 <strtod+0x2ae>
    7534:	97 fe       	sbrs	r9, 7
    7536:	0d c0       	rjmp	.+26     	; 0x7552 <strtod+0x238>
    7538:	22 ee       	ldi	r18, 0xE2	; 226
    753a:	e2 2e       	mov	r14, r18
    753c:	2a e0       	ldi	r18, 0x0A	; 10
    753e:	f2 2e       	mov	r15, r18
    7540:	90 94       	com	r9
    7542:	81 94       	neg	r8
    7544:	91 08       	sbc	r9, r1
    7546:	93 94       	inc	r9
    7548:	c0 e2       	ldi	r28, 0x20	; 32
    754a:	d0 e0       	ldi	r29, 0x00	; 0
    754c:	00 e0       	ldi	r16, 0x00	; 0
    754e:	10 e0       	ldi	r17, 0x00	; 0
    7550:	12 c0       	rjmp	.+36     	; 0x7576 <strtod+0x25c>
    7552:	9a ef       	ldi	r25, 0xFA	; 250
    7554:	e9 2e       	mov	r14, r25
    7556:	9a e0       	ldi	r25, 0x0A	; 10
    7558:	f9 2e       	mov	r15, r25
    755a:	f6 cf       	rjmp	.-20     	; 0x7548 <strtod+0x22e>
    755c:	f7 01       	movw	r30, r14
    755e:	25 91       	lpm	r18, Z+
    7560:	35 91       	lpm	r19, Z+
    7562:	45 91       	lpm	r20, Z+
    7564:	54 91       	lpm	r21, Z+
    7566:	c6 01       	movw	r24, r12
    7568:	b5 01       	movw	r22, r10
    756a:	0e 94 44 38 	call	0x7088	; 0x7088 <__mulsf3>
    756e:	5b 01       	movw	r10, r22
    7570:	6c 01       	movw	r12, r24
    7572:	8c 1a       	sub	r8, r28
    7574:	9d 0a       	sbc	r9, r29
    7576:	8c 16       	cp	r8, r28
    7578:	9d 06       	cpc	r9, r29
    757a:	84 f7       	brge	.-32     	; 0x755c <strtod+0x242>
    757c:	d5 95       	asr	r29
    757e:	c7 95       	ror	r28
    7580:	0f 5f       	subi	r16, 0xFF	; 255
    7582:	1f 4f       	sbci	r17, 0xFF	; 255
    7584:	06 30       	cpi	r16, 0x06	; 6
    7586:	11 05       	cpc	r17, r1
    7588:	29 f0       	breq	.+10     	; 0x7594 <strtod+0x27a>
    758a:	8c ef       	ldi	r24, 0xFC	; 252
    758c:	9f ef       	ldi	r25, 0xFF	; 255
    758e:	e8 0e       	add	r14, r24
    7590:	f9 1e       	adc	r15, r25
    7592:	f1 cf       	rjmp	.-30     	; 0x7576 <strtod+0x25c>
    7594:	c5 01       	movw	r24, r10
    7596:	d6 01       	movw	r26, r12
    7598:	7c 01       	movw	r14, r24
    759a:	8d 01       	movw	r16, r26
    759c:	8c 2d       	mov	r24, r12
    759e:	88 0f       	add	r24, r24
    75a0:	8d 2d       	mov	r24, r13
    75a2:	88 1f       	adc	r24, r24
    75a4:	8f 3f       	cpi	r24, 0xFF	; 255
    75a6:	51 f0       	breq	.+20     	; 0x75bc <strtod+0x2a2>
    75a8:	c6 01       	movw	r24, r12
    75aa:	b5 01       	movw	r22, r10
    75ac:	20 e0       	ldi	r18, 0x00	; 0
    75ae:	30 e0       	ldi	r19, 0x00	; 0
    75b0:	40 e0       	ldi	r20, 0x00	; 0
    75b2:	50 e0       	ldi	r21, 0x00	; 0
    75b4:	0e 94 82 35 	call	0x6b04	; 0x6b04 <__cmpsf2>
    75b8:	88 23       	and	r24, r24
    75ba:	31 f4       	brne	.+12     	; 0x75c8 <strtod+0x2ae>
    75bc:	82 e2       	ldi	r24, 0x22	; 34
    75be:	90 e0       	ldi	r25, 0x00	; 0
    75c0:	80 93 55 26 	sts	0x2655, r24
    75c4:	90 93 56 26 	sts	0x2656, r25
    75c8:	7e 2d       	mov	r23, r14
    75ca:	9f 2d       	mov	r25, r15
    75cc:	80 2f       	mov	r24, r16
    75ce:	61 2f       	mov	r22, r17
    75d0:	27 2f       	mov	r18, r23
    75d2:	39 2f       	mov	r19, r25
    75d4:	48 2f       	mov	r20, r24
    75d6:	56 2f       	mov	r21, r22
    75d8:	b9 01       	movw	r22, r18
    75da:	ca 01       	movw	r24, r20
    75dc:	df 91       	pop	r29
    75de:	cf 91       	pop	r28
    75e0:	1f 91       	pop	r17
    75e2:	0f 91       	pop	r16
    75e4:	ff 90       	pop	r15
    75e6:	ef 90       	pop	r14
    75e8:	df 90       	pop	r13
    75ea:	cf 90       	pop	r12
    75ec:	bf 90       	pop	r11
    75ee:	af 90       	pop	r10
    75f0:	9f 90       	pop	r9
    75f2:	8f 90       	pop	r8
    75f4:	08 95       	ret

000075f6 <atoi>:
    75f6:	fc 01       	movw	r30, r24
    75f8:	88 27       	eor	r24, r24
    75fa:	99 27       	eor	r25, r25
    75fc:	e8 94       	clt
    75fe:	21 91       	ld	r18, Z+
    7600:	20 32       	cpi	r18, 0x20	; 32
    7602:	e9 f3       	breq	.-6      	; 0x75fe <atoi+0x8>
    7604:	29 30       	cpi	r18, 0x09	; 9
    7606:	10 f0       	brcs	.+4      	; 0x760c <atoi+0x16>
    7608:	2e 30       	cpi	r18, 0x0E	; 14
    760a:	c8 f3       	brcs	.-14     	; 0x75fe <atoi+0x8>
    760c:	2b 32       	cpi	r18, 0x2B	; 43
    760e:	41 f0       	breq	.+16     	; 0x7620 <atoi+0x2a>
    7610:	2d 32       	cpi	r18, 0x2D	; 45
    7612:	39 f4       	brne	.+14     	; 0x7622 <atoi+0x2c>
    7614:	68 94       	set
    7616:	04 c0       	rjmp	.+8      	; 0x7620 <atoi+0x2a>
    7618:	0e 94 43 3c 	call	0x7886	; 0x7886 <__mulhi_const_10>
    761c:	82 0f       	add	r24, r18
    761e:	91 1d       	adc	r25, r1
    7620:	21 91       	ld	r18, Z+
    7622:	20 53       	subi	r18, 0x30	; 48
    7624:	2a 30       	cpi	r18, 0x0A	; 10
    7626:	c0 f3       	brcs	.-16     	; 0x7618 <atoi+0x22>
    7628:	1e f4       	brtc	.+6      	; 0x7630 <atoi+0x3a>
    762a:	90 95       	com	r25
    762c:	81 95       	neg	r24
    762e:	9f 4f       	sbci	r25, 0xFF	; 255
    7630:	08 95       	ret

00007632 <__ftoa_engine>:
    7632:	28 30       	cpi	r18, 0x08	; 8
    7634:	08 f0       	brcs	.+2      	; 0x7638 <__ftoa_engine+0x6>
    7636:	27 e0       	ldi	r18, 0x07	; 7
    7638:	33 27       	eor	r19, r19
    763a:	da 01       	movw	r26, r20
    763c:	99 0f       	add	r25, r25
    763e:	31 1d       	adc	r19, r1
    7640:	87 fd       	sbrc	r24, 7
    7642:	91 60       	ori	r25, 0x01	; 1
    7644:	00 96       	adiw	r24, 0x00	; 0
    7646:	61 05       	cpc	r22, r1
    7648:	71 05       	cpc	r23, r1
    764a:	39 f4       	brne	.+14     	; 0x765a <__ftoa_engine+0x28>
    764c:	32 60       	ori	r19, 0x02	; 2
    764e:	2e 5f       	subi	r18, 0xFE	; 254
    7650:	3d 93       	st	X+, r19
    7652:	30 e3       	ldi	r19, 0x30	; 48
    7654:	2a 95       	dec	r18
    7656:	e1 f7       	brne	.-8      	; 0x7650 <__ftoa_engine+0x1e>
    7658:	08 95       	ret
    765a:	9f 3f       	cpi	r25, 0xFF	; 255
    765c:	30 f0       	brcs	.+12     	; 0x766a <__ftoa_engine+0x38>
    765e:	80 38       	cpi	r24, 0x80	; 128
    7660:	71 05       	cpc	r23, r1
    7662:	61 05       	cpc	r22, r1
    7664:	09 f0       	breq	.+2      	; 0x7668 <__ftoa_engine+0x36>
    7666:	3c 5f       	subi	r19, 0xFC	; 252
    7668:	3c 5f       	subi	r19, 0xFC	; 252
    766a:	3d 93       	st	X+, r19
    766c:	91 30       	cpi	r25, 0x01	; 1
    766e:	08 f0       	brcs	.+2      	; 0x7672 <__ftoa_engine+0x40>
    7670:	80 68       	ori	r24, 0x80	; 128
    7672:	91 1d       	adc	r25, r1
    7674:	df 93       	push	r29
    7676:	cf 93       	push	r28
    7678:	1f 93       	push	r17
    767a:	0f 93       	push	r16
    767c:	ff 92       	push	r15
    767e:	ef 92       	push	r14
    7680:	19 2f       	mov	r17, r25
    7682:	98 7f       	andi	r25, 0xF8	; 248
    7684:	96 95       	lsr	r25
    7686:	e9 2f       	mov	r30, r25
    7688:	96 95       	lsr	r25
    768a:	96 95       	lsr	r25
    768c:	e9 0f       	add	r30, r25
    768e:	ff 27       	eor	r31, r31
    7690:	e8 5a       	subi	r30, 0xA8	; 168
    7692:	f4 4f       	sbci	r31, 0xF4	; 244
    7694:	99 27       	eor	r25, r25
    7696:	33 27       	eor	r19, r19
    7698:	ee 24       	eor	r14, r14
    769a:	ff 24       	eor	r15, r15
    769c:	a7 01       	movw	r20, r14
    769e:	e7 01       	movw	r28, r14
    76a0:	05 90       	lpm	r0, Z+
    76a2:	08 94       	sec
    76a4:	07 94       	ror	r0
    76a6:	28 f4       	brcc	.+10     	; 0x76b2 <__ftoa_engine+0x80>
    76a8:	36 0f       	add	r19, r22
    76aa:	e7 1e       	adc	r14, r23
    76ac:	f8 1e       	adc	r15, r24
    76ae:	49 1f       	adc	r20, r25
    76b0:	51 1d       	adc	r21, r1
    76b2:	66 0f       	add	r22, r22
    76b4:	77 1f       	adc	r23, r23
    76b6:	88 1f       	adc	r24, r24
    76b8:	99 1f       	adc	r25, r25
    76ba:	06 94       	lsr	r0
    76bc:	a1 f7       	brne	.-24     	; 0x76a6 <__ftoa_engine+0x74>
    76be:	05 90       	lpm	r0, Z+
    76c0:	07 94       	ror	r0
    76c2:	28 f4       	brcc	.+10     	; 0x76ce <__ftoa_engine+0x9c>
    76c4:	e7 0e       	add	r14, r23
    76c6:	f8 1e       	adc	r15, r24
    76c8:	49 1f       	adc	r20, r25
    76ca:	56 1f       	adc	r21, r22
    76cc:	c1 1d       	adc	r28, r1
    76ce:	77 0f       	add	r23, r23
    76d0:	88 1f       	adc	r24, r24
    76d2:	99 1f       	adc	r25, r25
    76d4:	66 1f       	adc	r22, r22
    76d6:	06 94       	lsr	r0
    76d8:	a1 f7       	brne	.-24     	; 0x76c2 <__ftoa_engine+0x90>
    76da:	05 90       	lpm	r0, Z+
    76dc:	07 94       	ror	r0
    76de:	28 f4       	brcc	.+10     	; 0x76ea <__ftoa_engine+0xb8>
    76e0:	f8 0e       	add	r15, r24
    76e2:	49 1f       	adc	r20, r25
    76e4:	56 1f       	adc	r21, r22
    76e6:	c7 1f       	adc	r28, r23
    76e8:	d1 1d       	adc	r29, r1
    76ea:	88 0f       	add	r24, r24
    76ec:	99 1f       	adc	r25, r25
    76ee:	66 1f       	adc	r22, r22
    76f0:	77 1f       	adc	r23, r23
    76f2:	06 94       	lsr	r0
    76f4:	a1 f7       	brne	.-24     	; 0x76de <__ftoa_engine+0xac>
    76f6:	05 90       	lpm	r0, Z+
    76f8:	07 94       	ror	r0
    76fa:	20 f4       	brcc	.+8      	; 0x7704 <__ftoa_engine+0xd2>
    76fc:	49 0f       	add	r20, r25
    76fe:	56 1f       	adc	r21, r22
    7700:	c7 1f       	adc	r28, r23
    7702:	d8 1f       	adc	r29, r24
    7704:	99 0f       	add	r25, r25
    7706:	66 1f       	adc	r22, r22
    7708:	77 1f       	adc	r23, r23
    770a:	88 1f       	adc	r24, r24
    770c:	06 94       	lsr	r0
    770e:	a9 f7       	brne	.-22     	; 0x76fa <__ftoa_engine+0xc8>
    7710:	84 91       	lpm	r24, Z+
    7712:	10 95       	com	r17
    7714:	17 70       	andi	r17, 0x07	; 7
    7716:	41 f0       	breq	.+16     	; 0x7728 <__ftoa_engine+0xf6>
    7718:	d6 95       	lsr	r29
    771a:	c7 95       	ror	r28
    771c:	57 95       	ror	r21
    771e:	47 95       	ror	r20
    7720:	f7 94       	ror	r15
    7722:	e7 94       	ror	r14
    7724:	1a 95       	dec	r17
    7726:	c1 f7       	brne	.-16     	; 0x7718 <__ftoa_engine+0xe6>
    7728:	ee ef       	ldi	r30, 0xFE	; 254
    772a:	fa e0       	ldi	r31, 0x0A	; 10
    772c:	68 94       	set
    772e:	15 90       	lpm	r1, Z+
    7730:	15 91       	lpm	r17, Z+
    7732:	35 91       	lpm	r19, Z+
    7734:	65 91       	lpm	r22, Z+
    7736:	95 91       	lpm	r25, Z+
    7738:	05 90       	lpm	r0, Z+
    773a:	7f e2       	ldi	r23, 0x2F	; 47
    773c:	73 95       	inc	r23
    773e:	e1 18       	sub	r14, r1
    7740:	f1 0a       	sbc	r15, r17
    7742:	43 0b       	sbc	r20, r19
    7744:	56 0b       	sbc	r21, r22
    7746:	c9 0b       	sbc	r28, r25
    7748:	d0 09       	sbc	r29, r0
    774a:	c0 f7       	brcc	.-16     	; 0x773c <__ftoa_engine+0x10a>
    774c:	e1 0c       	add	r14, r1
    774e:	f1 1e       	adc	r15, r17
    7750:	43 1f       	adc	r20, r19
    7752:	56 1f       	adc	r21, r22
    7754:	c9 1f       	adc	r28, r25
    7756:	d0 1d       	adc	r29, r0
    7758:	7e f4       	brtc	.+30     	; 0x7778 <__ftoa_engine+0x146>
    775a:	70 33       	cpi	r23, 0x30	; 48
    775c:	11 f4       	brne	.+4      	; 0x7762 <__ftoa_engine+0x130>
    775e:	8a 95       	dec	r24
    7760:	e6 cf       	rjmp	.-52     	; 0x772e <__ftoa_engine+0xfc>
    7762:	e8 94       	clt
    7764:	01 50       	subi	r16, 0x01	; 1
    7766:	30 f0       	brcs	.+12     	; 0x7774 <__ftoa_engine+0x142>
    7768:	08 0f       	add	r16, r24
    776a:	0a f4       	brpl	.+2      	; 0x776e <__ftoa_engine+0x13c>
    776c:	00 27       	eor	r16, r16
    776e:	02 17       	cp	r16, r18
    7770:	08 f4       	brcc	.+2      	; 0x7774 <__ftoa_engine+0x142>
    7772:	20 2f       	mov	r18, r16
    7774:	23 95       	inc	r18
    7776:	02 2f       	mov	r16, r18
    7778:	7a 33       	cpi	r23, 0x3A	; 58
    777a:	28 f0       	brcs	.+10     	; 0x7786 <__ftoa_engine+0x154>
    777c:	79 e3       	ldi	r23, 0x39	; 57
    777e:	7d 93       	st	X+, r23
    7780:	2a 95       	dec	r18
    7782:	e9 f7       	brne	.-6      	; 0x777e <__ftoa_engine+0x14c>
    7784:	10 c0       	rjmp	.+32     	; 0x77a6 <__ftoa_engine+0x174>
    7786:	7d 93       	st	X+, r23
    7788:	2a 95       	dec	r18
    778a:	89 f6       	brne	.-94     	; 0x772e <__ftoa_engine+0xfc>
    778c:	06 94       	lsr	r0
    778e:	97 95       	ror	r25
    7790:	67 95       	ror	r22
    7792:	37 95       	ror	r19
    7794:	17 95       	ror	r17
    7796:	17 94       	ror	r1
    7798:	e1 18       	sub	r14, r1
    779a:	f1 0a       	sbc	r15, r17
    779c:	43 0b       	sbc	r20, r19
    779e:	56 0b       	sbc	r21, r22
    77a0:	c9 0b       	sbc	r28, r25
    77a2:	d0 09       	sbc	r29, r0
    77a4:	98 f0       	brcs	.+38     	; 0x77cc <__ftoa_engine+0x19a>
    77a6:	23 95       	inc	r18
    77a8:	7e 91       	ld	r23, -X
    77aa:	73 95       	inc	r23
    77ac:	7a 33       	cpi	r23, 0x3A	; 58
    77ae:	08 f0       	brcs	.+2      	; 0x77b2 <__ftoa_engine+0x180>
    77b0:	70 e3       	ldi	r23, 0x30	; 48
    77b2:	7c 93       	st	X, r23
    77b4:	20 13       	cpse	r18, r16
    77b6:	b8 f7       	brcc	.-18     	; 0x77a6 <__ftoa_engine+0x174>
    77b8:	7e 91       	ld	r23, -X
    77ba:	70 61       	ori	r23, 0x10	; 16
    77bc:	7d 93       	st	X+, r23
    77be:	30 f0       	brcs	.+12     	; 0x77cc <__ftoa_engine+0x19a>
    77c0:	83 95       	inc	r24
    77c2:	71 e3       	ldi	r23, 0x31	; 49
    77c4:	7d 93       	st	X+, r23
    77c6:	70 e3       	ldi	r23, 0x30	; 48
    77c8:	2a 95       	dec	r18
    77ca:	e1 f7       	brne	.-8      	; 0x77c4 <__ftoa_engine+0x192>
    77cc:	11 24       	eor	r1, r1
    77ce:	ef 90       	pop	r14
    77d0:	ff 90       	pop	r15
    77d2:	0f 91       	pop	r16
    77d4:	1f 91       	pop	r17
    77d6:	cf 91       	pop	r28
    77d8:	df 91       	pop	r29
    77da:	99 27       	eor	r25, r25
    77dc:	87 fd       	sbrc	r24, 7
    77de:	90 95       	com	r25
    77e0:	08 95       	ret

000077e2 <isupper>:
    77e2:	85 fd       	sbrc	r24, 5
    77e4:	3d c1       	rjmp	.+634    	; 0x7a60 <__ctype_isfalse>

000077e6 <isalpha>:
    77e6:	80 62       	ori	r24, 0x20	; 32

000077e8 <islower>:
    77e8:	91 11       	cpse	r25, r1
    77ea:	3a c1       	rjmp	.+628    	; 0x7a60 <__ctype_isfalse>
    77ec:	81 56       	subi	r24, 0x61	; 97
    77ee:	8a 51       	subi	r24, 0x1A	; 26
    77f0:	e0 f7       	brcc	.-8      	; 0x77ea <islower+0x2>
    77f2:	08 95       	ret

000077f4 <isspace>:
    77f4:	91 11       	cpse	r25, r1
    77f6:	34 c1       	rjmp	.+616    	; 0x7a60 <__ctype_isfalse>
    77f8:	80 32       	cpi	r24, 0x20	; 32
    77fa:	19 f0       	breq	.+6      	; 0x7802 <isspace+0xe>
    77fc:	89 50       	subi	r24, 0x09	; 9
    77fe:	85 50       	subi	r24, 0x05	; 5
    7800:	d0 f7       	brcc	.-12     	; 0x77f6 <isspace+0x2>
    7802:	08 95       	ret

00007804 <toupper>:
    7804:	91 11       	cpse	r25, r1
    7806:	08 95       	ret
    7808:	81 56       	subi	r24, 0x61	; 97
    780a:	8a 51       	subi	r24, 0x1A	; 26
    780c:	08 f4       	brcc	.+2      	; 0x7810 <toupper+0xc>
    780e:	80 52       	subi	r24, 0x20	; 32
    7810:	85 58       	subi	r24, 0x85	; 133
    7812:	08 95       	ret

00007814 <strncasecmp_P>:
    7814:	fb 01       	movw	r30, r22
    7816:	dc 01       	movw	r26, r24
    7818:	41 50       	subi	r20, 0x01	; 1
    781a:	50 40       	sbci	r21, 0x00	; 0
    781c:	88 f0       	brcs	.+34     	; 0x7840 <strncasecmp_P+0x2c>
    781e:	8d 91       	ld	r24, X+
    7820:	81 34       	cpi	r24, 0x41	; 65
    7822:	1c f0       	brlt	.+6      	; 0x782a <strncasecmp_P+0x16>
    7824:	8b 35       	cpi	r24, 0x5B	; 91
    7826:	0c f4       	brge	.+2      	; 0x782a <strncasecmp_P+0x16>
    7828:	80 5e       	subi	r24, 0xE0	; 224
    782a:	65 91       	lpm	r22, Z+
    782c:	61 34       	cpi	r22, 0x41	; 65
    782e:	1c f0       	brlt	.+6      	; 0x7836 <strncasecmp_P+0x22>
    7830:	6b 35       	cpi	r22, 0x5B	; 91
    7832:	0c f4       	brge	.+2      	; 0x7836 <strncasecmp_P+0x22>
    7834:	60 5e       	subi	r22, 0xE0	; 224
    7836:	86 1b       	sub	r24, r22
    7838:	61 11       	cpse	r22, r1
    783a:	71 f3       	breq	.-36     	; 0x7818 <strncasecmp_P+0x4>
    783c:	99 0b       	sbc	r25, r25
    783e:	08 95       	ret
    7840:	88 1b       	sub	r24, r24
    7842:	fc cf       	rjmp	.-8      	; 0x783c <strncasecmp_P+0x28>

00007844 <strnlen_P>:
    7844:	fc 01       	movw	r30, r24
    7846:	05 90       	lpm	r0, Z+
    7848:	61 50       	subi	r22, 0x01	; 1
    784a:	70 40       	sbci	r23, 0x00	; 0
    784c:	01 10       	cpse	r0, r1
    784e:	d8 f7       	brcc	.-10     	; 0x7846 <strnlen_P+0x2>
    7850:	80 95       	com	r24
    7852:	90 95       	com	r25
    7854:	8e 0f       	add	r24, r30
    7856:	9f 1f       	adc	r25, r31
    7858:	08 95       	ret

0000785a <strchr>:
    785a:	fc 01       	movw	r30, r24
    785c:	81 91       	ld	r24, Z+
    785e:	86 17       	cp	r24, r22
    7860:	21 f0       	breq	.+8      	; 0x786a <strchr+0x10>
    7862:	88 23       	and	r24, r24
    7864:	d9 f7       	brne	.-10     	; 0x785c <strchr+0x2>
    7866:	99 27       	eor	r25, r25
    7868:	08 95       	ret
    786a:	31 97       	sbiw	r30, 0x01	; 1
    786c:	cf 01       	movw	r24, r30
    786e:	08 95       	ret

00007870 <strnlen>:
    7870:	fc 01       	movw	r30, r24
    7872:	61 50       	subi	r22, 0x01	; 1
    7874:	70 40       	sbci	r23, 0x00	; 0
    7876:	01 90       	ld	r0, Z+
    7878:	01 10       	cpse	r0, r1
    787a:	d8 f7       	brcc	.-10     	; 0x7872 <strnlen+0x2>
    787c:	80 95       	com	r24
    787e:	90 95       	com	r25
    7880:	8e 0f       	add	r24, r30
    7882:	9f 1f       	adc	r25, r31
    7884:	08 95       	ret

00007886 <__mulhi_const_10>:
    7886:	7a e0       	ldi	r23, 0x0A	; 10
    7888:	97 9f       	mul	r25, r23
    788a:	90 2d       	mov	r25, r0
    788c:	87 9f       	mul	r24, r23
    788e:	80 2d       	mov	r24, r0
    7890:	91 0d       	add	r25, r1
    7892:	11 24       	eor	r1, r1
    7894:	08 95       	ret

00007896 <clearerr>:
    7896:	fc 01       	movw	r30, r24
    7898:	83 81       	ldd	r24, Z+3	; 0x03
    789a:	8f 7c       	andi	r24, 0xCF	; 207
    789c:	83 83       	std	Z+3, r24	; 0x03
    789e:	08 95       	ret

000078a0 <fgets>:
    78a0:	cf 92       	push	r12
    78a2:	df 92       	push	r13
    78a4:	ef 92       	push	r14
    78a6:	ff 92       	push	r15
    78a8:	0f 93       	push	r16
    78aa:	1f 93       	push	r17
    78ac:	cf 93       	push	r28
    78ae:	df 93       	push	r29
    78b0:	7c 01       	movw	r14, r24
    78b2:	6a 01       	movw	r12, r20
    78b4:	fa 01       	movw	r30, r20
    78b6:	83 81       	ldd	r24, Z+3	; 0x03
    78b8:	80 ff       	sbrs	r24, 0
    78ba:	19 c0       	rjmp	.+50     	; 0x78ee <fgets+0x4e>
    78bc:	16 16       	cp	r1, r22
    78be:	17 06       	cpc	r1, r23
    78c0:	b4 f4       	brge	.+44     	; 0x78ee <fgets+0x4e>
    78c2:	eb 01       	movw	r28, r22
    78c4:	21 97       	sbiw	r28, 0x01	; 1
    78c6:	87 01       	movw	r16, r14
    78c8:	0d c0       	rjmp	.+26     	; 0x78e4 <fgets+0x44>
    78ca:	c6 01       	movw	r24, r12
    78cc:	0e 94 33 3d 	call	0x7a66	; 0x7a66 <fgetc>
    78d0:	ff ef       	ldi	r31, 0xFF	; 255
    78d2:	8f 3f       	cpi	r24, 0xFF	; 255
    78d4:	9f 07       	cpc	r25, r31
    78d6:	59 f0       	breq	.+22     	; 0x78ee <fgets+0x4e>
    78d8:	f8 01       	movw	r30, r16
    78da:	81 93       	st	Z+, r24
    78dc:	8f 01       	movw	r16, r30
    78de:	0a 97       	sbiw	r24, 0x0a	; 10
    78e0:	19 f0       	breq	.+6      	; 0x78e8 <fgets+0x48>
    78e2:	21 97       	sbiw	r28, 0x01	; 1
    78e4:	20 97       	sbiw	r28, 0x00	; 0
    78e6:	89 f7       	brne	.-30     	; 0x78ca <fgets+0x2a>
    78e8:	f8 01       	movw	r30, r16
    78ea:	10 82       	st	Z, r1
    78ec:	02 c0       	rjmp	.+4      	; 0x78f2 <fgets+0x52>
    78ee:	ee 24       	eor	r14, r14
    78f0:	ff 24       	eor	r15, r15
    78f2:	c7 01       	movw	r24, r14
    78f4:	df 91       	pop	r29
    78f6:	cf 91       	pop	r28
    78f8:	1f 91       	pop	r17
    78fa:	0f 91       	pop	r16
    78fc:	ff 90       	pop	r15
    78fe:	ef 90       	pop	r14
    7900:	df 90       	pop	r13
    7902:	cf 90       	pop	r12
    7904:	08 95       	ret

00007906 <fputc>:
    7906:	0f 93       	push	r16
    7908:	1f 93       	push	r17
    790a:	cf 93       	push	r28
    790c:	df 93       	push	r29
    790e:	8c 01       	movw	r16, r24
    7910:	eb 01       	movw	r28, r22
    7912:	8b 81       	ldd	r24, Y+3	; 0x03
    7914:	81 ff       	sbrs	r24, 1
    7916:	1b c0       	rjmp	.+54     	; 0x794e <fputc+0x48>
    7918:	82 ff       	sbrs	r24, 2
    791a:	0d c0       	rjmp	.+26     	; 0x7936 <fputc+0x30>
    791c:	2e 81       	ldd	r18, Y+6	; 0x06
    791e:	3f 81       	ldd	r19, Y+7	; 0x07
    7920:	8c 81       	ldd	r24, Y+4	; 0x04
    7922:	9d 81       	ldd	r25, Y+5	; 0x05
    7924:	28 17       	cp	r18, r24
    7926:	39 07       	cpc	r19, r25
    7928:	64 f4       	brge	.+24     	; 0x7942 <fputc+0x3c>
    792a:	e8 81       	ld	r30, Y
    792c:	f9 81       	ldd	r31, Y+1	; 0x01
    792e:	01 93       	st	Z+, r16
    7930:	e8 83       	st	Y, r30
    7932:	f9 83       	std	Y+1, r31	; 0x01
    7934:	06 c0       	rjmp	.+12     	; 0x7942 <fputc+0x3c>
    7936:	e8 85       	ldd	r30, Y+8	; 0x08
    7938:	f9 85       	ldd	r31, Y+9	; 0x09
    793a:	80 2f       	mov	r24, r16
    793c:	19 95       	eicall
    793e:	89 2b       	or	r24, r25
    7940:	31 f4       	brne	.+12     	; 0x794e <fputc+0x48>
    7942:	8e 81       	ldd	r24, Y+6	; 0x06
    7944:	9f 81       	ldd	r25, Y+7	; 0x07
    7946:	01 96       	adiw	r24, 0x01	; 1
    7948:	8e 83       	std	Y+6, r24	; 0x06
    794a:	9f 83       	std	Y+7, r25	; 0x07
    794c:	02 c0       	rjmp	.+4      	; 0x7952 <fputc+0x4c>
    794e:	0f ef       	ldi	r16, 0xFF	; 255
    7950:	1f ef       	ldi	r17, 0xFF	; 255
    7952:	c8 01       	movw	r24, r16
    7954:	df 91       	pop	r29
    7956:	cf 91       	pop	r28
    7958:	1f 91       	pop	r17
    795a:	0f 91       	pop	r16
    795c:	08 95       	ret

0000795e <printf_P>:
    795e:	df 93       	push	r29
    7960:	cf 93       	push	r28
    7962:	cd b7       	in	r28, 0x3d	; 61
    7964:	de b7       	in	r29, 0x3e	; 62
    7966:	fe 01       	movw	r30, r28
    7968:	36 96       	adiw	r30, 0x06	; 6
    796a:	61 91       	ld	r22, Z+
    796c:	71 91       	ld	r23, Z+
    796e:	a0 91 51 26 	lds	r26, 0x2651
    7972:	b0 91 52 26 	lds	r27, 0x2652
    7976:	13 96       	adiw	r26, 0x03	; 3
    7978:	8c 91       	ld	r24, X
    797a:	13 97       	sbiw	r26, 0x03	; 3
    797c:	88 60       	ori	r24, 0x08	; 8
    797e:	13 96       	adiw	r26, 0x03	; 3
    7980:	8c 93       	st	X, r24
    7982:	80 91 51 26 	lds	r24, 0x2651
    7986:	90 91 52 26 	lds	r25, 0x2652
    798a:	af 01       	movw	r20, r30
    798c:	0e 94 38 31 	call	0x6270	; 0x6270 <vfprintf>
    7990:	e0 91 51 26 	lds	r30, 0x2651
    7994:	f0 91 52 26 	lds	r31, 0x2652
    7998:	23 81       	ldd	r18, Z+3	; 0x03
    799a:	27 7f       	andi	r18, 0xF7	; 247
    799c:	23 83       	std	Z+3, r18	; 0x03
    799e:	cf 91       	pop	r28
    79a0:	df 91       	pop	r29
    79a2:	08 95       	ret

000079a4 <__ultoa_invert>:
    79a4:	fa 01       	movw	r30, r20
    79a6:	aa 27       	eor	r26, r26
    79a8:	28 30       	cpi	r18, 0x08	; 8
    79aa:	51 f1       	breq	.+84     	; 0x7a00 <__ultoa_invert+0x5c>
    79ac:	20 31       	cpi	r18, 0x10	; 16
    79ae:	81 f1       	breq	.+96     	; 0x7a10 <__ultoa_invert+0x6c>
    79b0:	e8 94       	clt
    79b2:	6f 93       	push	r22
    79b4:	6e 7f       	andi	r22, 0xFE	; 254
    79b6:	6e 5f       	subi	r22, 0xFE	; 254
    79b8:	7f 4f       	sbci	r23, 0xFF	; 255
    79ba:	8f 4f       	sbci	r24, 0xFF	; 255
    79bc:	9f 4f       	sbci	r25, 0xFF	; 255
    79be:	af 4f       	sbci	r26, 0xFF	; 255
    79c0:	b1 e0       	ldi	r27, 0x01	; 1
    79c2:	3e d0       	rcall	.+124    	; 0x7a40 <__ultoa_invert+0x9c>
    79c4:	b4 e0       	ldi	r27, 0x04	; 4
    79c6:	3c d0       	rcall	.+120    	; 0x7a40 <__ultoa_invert+0x9c>
    79c8:	67 0f       	add	r22, r23
    79ca:	78 1f       	adc	r23, r24
    79cc:	89 1f       	adc	r24, r25
    79ce:	9a 1f       	adc	r25, r26
    79d0:	a1 1d       	adc	r26, r1
    79d2:	68 0f       	add	r22, r24
    79d4:	79 1f       	adc	r23, r25
    79d6:	8a 1f       	adc	r24, r26
    79d8:	91 1d       	adc	r25, r1
    79da:	a1 1d       	adc	r26, r1
    79dc:	6a 0f       	add	r22, r26
    79de:	71 1d       	adc	r23, r1
    79e0:	81 1d       	adc	r24, r1
    79e2:	91 1d       	adc	r25, r1
    79e4:	a1 1d       	adc	r26, r1
    79e6:	20 d0       	rcall	.+64     	; 0x7a28 <__ultoa_invert+0x84>
    79e8:	09 f4       	brne	.+2      	; 0x79ec <__ultoa_invert+0x48>
    79ea:	68 94       	set
    79ec:	3f 91       	pop	r19
    79ee:	2a e0       	ldi	r18, 0x0A	; 10
    79f0:	26 9f       	mul	r18, r22
    79f2:	11 24       	eor	r1, r1
    79f4:	30 19       	sub	r19, r0
    79f6:	30 5d       	subi	r19, 0xD0	; 208
    79f8:	31 93       	st	Z+, r19
    79fa:	de f6       	brtc	.-74     	; 0x79b2 <__ultoa_invert+0xe>
    79fc:	cf 01       	movw	r24, r30
    79fe:	08 95       	ret
    7a00:	46 2f       	mov	r20, r22
    7a02:	47 70       	andi	r20, 0x07	; 7
    7a04:	40 5d       	subi	r20, 0xD0	; 208
    7a06:	41 93       	st	Z+, r20
    7a08:	b3 e0       	ldi	r27, 0x03	; 3
    7a0a:	0f d0       	rcall	.+30     	; 0x7a2a <__ultoa_invert+0x86>
    7a0c:	c9 f7       	brne	.-14     	; 0x7a00 <__ultoa_invert+0x5c>
    7a0e:	f6 cf       	rjmp	.-20     	; 0x79fc <__ultoa_invert+0x58>
    7a10:	46 2f       	mov	r20, r22
    7a12:	4f 70       	andi	r20, 0x0F	; 15
    7a14:	40 5d       	subi	r20, 0xD0	; 208
    7a16:	4a 33       	cpi	r20, 0x3A	; 58
    7a18:	18 f0       	brcs	.+6      	; 0x7a20 <__ultoa_invert+0x7c>
    7a1a:	49 5d       	subi	r20, 0xD9	; 217
    7a1c:	31 fd       	sbrc	r19, 1
    7a1e:	40 52       	subi	r20, 0x20	; 32
    7a20:	41 93       	st	Z+, r20
    7a22:	02 d0       	rcall	.+4      	; 0x7a28 <__ultoa_invert+0x84>
    7a24:	a9 f7       	brne	.-22     	; 0x7a10 <__ultoa_invert+0x6c>
    7a26:	ea cf       	rjmp	.-44     	; 0x79fc <__ultoa_invert+0x58>
    7a28:	b4 e0       	ldi	r27, 0x04	; 4
    7a2a:	a6 95       	lsr	r26
    7a2c:	97 95       	ror	r25
    7a2e:	87 95       	ror	r24
    7a30:	77 95       	ror	r23
    7a32:	67 95       	ror	r22
    7a34:	ba 95       	dec	r27
    7a36:	c9 f7       	brne	.-14     	; 0x7a2a <__ultoa_invert+0x86>
    7a38:	00 97       	sbiw	r24, 0x00	; 0
    7a3a:	61 05       	cpc	r22, r1
    7a3c:	71 05       	cpc	r23, r1
    7a3e:	08 95       	ret
    7a40:	9b 01       	movw	r18, r22
    7a42:	ac 01       	movw	r20, r24
    7a44:	0a 2e       	mov	r0, r26
    7a46:	06 94       	lsr	r0
    7a48:	57 95       	ror	r21
    7a4a:	47 95       	ror	r20
    7a4c:	37 95       	ror	r19
    7a4e:	27 95       	ror	r18
    7a50:	ba 95       	dec	r27
    7a52:	c9 f7       	brne	.-14     	; 0x7a46 <__ultoa_invert+0xa2>
    7a54:	62 0f       	add	r22, r18
    7a56:	73 1f       	adc	r23, r19
    7a58:	84 1f       	adc	r24, r20
    7a5a:	95 1f       	adc	r25, r21
    7a5c:	a0 1d       	adc	r26, r0
    7a5e:	08 95       	ret

00007a60 <__ctype_isfalse>:
    7a60:	99 27       	eor	r25, r25
    7a62:	88 27       	eor	r24, r24

00007a64 <__ctype_istrue>:
    7a64:	08 95       	ret

00007a66 <fgetc>:
    7a66:	cf 93       	push	r28
    7a68:	df 93       	push	r29
    7a6a:	ec 01       	movw	r28, r24
    7a6c:	4b 81       	ldd	r20, Y+3	; 0x03
    7a6e:	40 ff       	sbrs	r20, 0
    7a70:	1a c0       	rjmp	.+52     	; 0x7aa6 <fgetc+0x40>
    7a72:	46 ff       	sbrs	r20, 6
    7a74:	0a c0       	rjmp	.+20     	; 0x7a8a <fgetc+0x24>
    7a76:	4f 7b       	andi	r20, 0xBF	; 191
    7a78:	4b 83       	std	Y+3, r20	; 0x03
    7a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    7a7c:	9f 81       	ldd	r25, Y+7	; 0x07
    7a7e:	01 96       	adiw	r24, 0x01	; 1
    7a80:	8e 83       	std	Y+6, r24	; 0x06
    7a82:	9f 83       	std	Y+7, r25	; 0x07
    7a84:	8a 81       	ldd	r24, Y+2	; 0x02
    7a86:	28 2f       	mov	r18, r24
    7a88:	2b c0       	rjmp	.+86     	; 0x7ae0 <fgetc+0x7a>
    7a8a:	42 ff       	sbrs	r20, 2
    7a8c:	13 c0       	rjmp	.+38     	; 0x7ab4 <fgetc+0x4e>
    7a8e:	e8 81       	ld	r30, Y
    7a90:	f9 81       	ldd	r31, Y+1	; 0x01
    7a92:	80 81       	ld	r24, Z
    7a94:	28 2f       	mov	r18, r24
    7a96:	33 27       	eor	r19, r19
    7a98:	27 fd       	sbrc	r18, 7
    7a9a:	30 95       	com	r19
    7a9c:	21 15       	cp	r18, r1
    7a9e:	31 05       	cpc	r19, r1
    7aa0:	29 f4       	brne	.+10     	; 0x7aac <fgetc+0x46>
    7aa2:	40 62       	ori	r20, 0x20	; 32
    7aa4:	4b 83       	std	Y+3, r20	; 0x03
    7aa6:	2f ef       	ldi	r18, 0xFF	; 255
    7aa8:	3f ef       	ldi	r19, 0xFF	; 255
    7aaa:	1b c0       	rjmp	.+54     	; 0x7ae2 <fgetc+0x7c>
    7aac:	31 96       	adiw	r30, 0x01	; 1
    7aae:	e8 83       	st	Y, r30
    7ab0:	f9 83       	std	Y+1, r31	; 0x01
    7ab2:	11 c0       	rjmp	.+34     	; 0x7ad6 <fgetc+0x70>
    7ab4:	ea 85       	ldd	r30, Y+10	; 0x0a
    7ab6:	fb 85       	ldd	r31, Y+11	; 0x0b
    7ab8:	ce 01       	movw	r24, r28
    7aba:	19 95       	eicall
    7abc:	9c 01       	movw	r18, r24
    7abe:	97 ff       	sbrs	r25, 7
    7ac0:	0a c0       	rjmp	.+20     	; 0x7ad6 <fgetc+0x70>
    7ac2:	9b 81       	ldd	r25, Y+3	; 0x03
    7ac4:	2f 5f       	subi	r18, 0xFF	; 255
    7ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    7ac8:	11 f0       	breq	.+4      	; 0x7ace <fgetc+0x68>
    7aca:	80 e2       	ldi	r24, 0x20	; 32
    7acc:	01 c0       	rjmp	.+2      	; 0x7ad0 <fgetc+0x6a>
    7ace:	80 e1       	ldi	r24, 0x10	; 16
    7ad0:	89 2b       	or	r24, r25
    7ad2:	8b 83       	std	Y+3, r24	; 0x03
    7ad4:	e8 cf       	rjmp	.-48     	; 0x7aa6 <fgetc+0x40>
    7ad6:	8e 81       	ldd	r24, Y+6	; 0x06
    7ad8:	9f 81       	ldd	r25, Y+7	; 0x07
    7ada:	01 96       	adiw	r24, 0x01	; 1
    7adc:	8e 83       	std	Y+6, r24	; 0x06
    7ade:	9f 83       	std	Y+7, r25	; 0x07
    7ae0:	30 e0       	ldi	r19, 0x00	; 0
    7ae2:	c9 01       	movw	r24, r18
    7ae4:	df 91       	pop	r29
    7ae6:	cf 91       	pop	r28
    7ae8:	08 95       	ret

00007aea <_exit>:
    7aea:	f8 94       	cli

00007aec <__stop_program>:
    7aec:	ff cf       	rjmp	.-2      	; 0x7aec <__stop_program>
