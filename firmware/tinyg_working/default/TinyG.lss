
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000082c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00802000  000082c0  00008354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000547  00802132  00802132  00008486  2**0
                  ALLOC
  3 .debug_aranges 000003e0  00000000  00000000  00008486  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000102b  00000000  00000000  00008866  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000da68  00000000  00000000  00009891  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002f76  00000000  00000000  000172f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004f7b  00000000  00000000  0001a26f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000bf0  00000000  00000000  0001f1ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002621  00000000  00000000  0001fddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003e2a  00000000  00000000  000223fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00026227  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__ctors_end>
       4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
       8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
       c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      10:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      14:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      18:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      1c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      20:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      24:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      28:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      2c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      30:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      34:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      38:	0c 94 09 1f 	jmp	0x3e12	; 0x3e12 <__vector_14>
      3c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      40:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      44:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      48:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      4c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      50:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      54:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      58:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      5c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      60:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      64:	0c 94 0b 2b 	jmp	0x5616	; 0x5616 <__vector_25>
      68:	0c 94 c7 2a 	jmp	0x558e	; 0x558e <__vector_26>
      6c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      70:	0c 94 1d 2c 	jmp	0x583a	; 0x583a <__vector_28>
      74:	0c 94 b9 2b 	jmp	0x5772	; 0x5772 <__vector_29>
      78:	0c 94 03 2c 	jmp	0x5806	; 0x5806 <__vector_30>
      7c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      80:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      84:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      88:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      8c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      90:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      94:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      98:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      9c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      a0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      a4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      a8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      ac:	0c 94 01 27 	jmp	0x4e02	; 0x4e02 <__vector_43>
      b0:	0c 94 0b 27 	jmp	0x4e16	; 0x4e16 <__vector_44>
      b4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      b8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      bc:	0c 94 35 1e 	jmp	0x3c6a	; 0x3c6a <__vector_47>
      c0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      c4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      c8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      cc:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      d0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      d4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      d8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      dc:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      e0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      e4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      e8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      ec:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      f0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      f4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      f8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
      fc:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     100:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__vector_64>
     104:	0c 94 1f 27 	jmp	0x4e3e	; 0x4e3e <__vector_65>
     108:	0c 94 d9 26 	jmp	0x4db2	; 0x4db2 <__vector_66>
     10c:	0c 94 e3 26 	jmp	0x4dc6	; 0x4dc6 <__vector_67>
     110:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     114:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     118:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     11c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     120:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     124:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     128:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     12c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     130:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     134:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__vector_77>
     138:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     13c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     140:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     144:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     148:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     14c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     150:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     154:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     158:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     15c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     160:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     164:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     168:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     16c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     170:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     174:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     178:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     17c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     180:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     184:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     188:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     18c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     190:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     194:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     198:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     19c:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1a0:	0c 94 ed 26 	jmp	0x4dda	; 0x4dda <__vector_104>
     1a4:	0c 94 f7 26 	jmp	0x4dee	; 0x4dee <__vector_105>
     1a8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1ac:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1b0:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <__vector_108>
     1b4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1b8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1bc:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1c0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1c4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1c8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1cc:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1d0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1d4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1d8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1dc:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1e0:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1e4:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <__c.3960>:
     23b:	25 73 0a 00                                         %s..

0000023f <cfgMsgXaxis>:
     23f:	58 00                                               X.

00000241 <cfgMsgYaxis>:
     241:	59 00                                               Y.

00000243 <cfgMsgZaxis>:
     243:	5a 00                                               Z.

00000245 <cfgMsgAaxis>:
     245:	41 00                                               A.

00000247 <cfgMsgs>:
     247:	3f 02 41 02 43 02 45 02                             ?.A.C.E.

0000024f <configs_P>:
     24f:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25f:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26f:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27f:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28f:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29f:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2af:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bf:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cf:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2df:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2ef:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2ff:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30f:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31f:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32f:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33f:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34f:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35f:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36f:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37f:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38f:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

0000039d <__c.3757>:
     39d:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     3ad:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     3bd:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     3cd:	29 0a 0a 00                                         )...

000003d1 <__c.3755>:
     3d1:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     3e1:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     3f1:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000401 <__c.3753>:
     401:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     411:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     421:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

00000432 <__c.3751>:
     432:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     442:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     452:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

00000463 <__c.3749>:
     463:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     473:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     483:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     493:	6c 0a 00                                            l..

00000496 <__c.3747>:
     496:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     4a6:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     4b6:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     4c6:	6e 0a 00                                            n..

000004c9 <__c.3745>:
     4c9:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     4d9:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     4e9:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     4f9:	74 65 70 73 29 0a 00                                teps)..

00000500 <__c.3743>:
     500:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     510:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     520:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     530:	70 0a 00                                            p..

00000533 <__c.3741>:
     533:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     543:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     553:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     563:	73 74 65 70 73 29 0a 00                             steps)..

0000056b <__c.3739>:
     56b:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     57b:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     58b:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     59b:	73 74 65 70 73 29 0a 00                             steps)..

000005a3 <__c.3734>:
     5a3:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     5b3:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

000005c1 <__c.3720>:
     5c1:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     5d1:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     5e1:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

000005ec <__c.3718>:
     5ec:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     5fc:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     60c:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

00000616 <__c.3716>:
     616:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     626:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     636:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

00000640 <__c.3714>:
     640:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     650:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     660:	73 20 2d 2d 2d 0a 00                                s ---..

00000667 <__c.3712>:
     667:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     677:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     687:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

0000068f <__c.3713>:
     68f:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     69f:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     6af:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

000006bb <tgModeStringControl>:
     6bb:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

000006c8 <tgModeStringConfig>:
     6c8:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

000006d4 <tgModeStringGCode>:
     6d4:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

000006e0 <tgModeStringDirect>:
     6e0:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

000006ed <tgModeStrings>:
     6ed:	bb 06 c8 06 d4 06 e0 06                             ........

000006f5 <tgStatusMsg00>:
     6f5:	4f 4b 00                                            OK.

000006f8 <tgStatusMsg01>:
     6f8:	45 52 52 4f 52 00                                   ERROR.

000006fe <tgStatusMsg02>:
     6fe:	45 41 47 41 49 4e 00                                EAGAIN.

00000705 <tgStatusMsg03>:
     705:	4e 4f 4f 50 00                                      NOOP.

0000070a <tgStatusMsg04>:
     70a:	45 6e 64 20 6f 66 20 6c 69 6e 65 00                 End of line.

00000716 <tgStatusMsg05>:
     716:	45 6e 64 20 6f 66 20 66 69 6c 65 00                 End of file.

00000722 <tgStatusMsg06>:
     722:	46 69 6c 65 20 6e 6f 74 20 6f 70 65 6e 00           File not open.

00000730 <tgStatusMsg07>:
     730:	4e 6f 20 73 75 63 68 20 64 65 76 69 63 65 00        No such device.

0000073f <tgStatusMsg08>:
     73f:	42 75 66 66 65 72 20 65 6d 70 74 79 00              Buffer empty.

0000074c <tgStatusMsg09>:
     74c:	42 75 66 66 65 72 20 66 75 6c 6c 20 2d 20 66 61     Buffer full - fa
     75c:	74 61 6c 00                                         tal.

00000760 <tgStatusMsg10>:
     760:	42 75 66 66 65 72 20 66 75 6c 6c 20 2d 20 6e 6f     Buffer full - no
     770:	6e 2d 66 61 74 61 6c 00                             n-fatal.

00000778 <tgStatusMsg11>:
     778:	51 55 49 54 00                                      QUIT.

0000077d <tgStatusMsg12>:
     77d:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 63 6f 6d     Unrecognized com
     78d:	6d 61 6e 64 00                                      mand.

00000792 <tgStatusMsg13>:
     792:	45 78 70 65 63 74 65 64 20 63 6f 6d 6d 61 6e 64     Expected command
     7a2:	20 6c 65 74 74 65 72 00                              letter.

000007aa <tgStatusMsg14>:
     7aa:	55 6e 73 75 70 70 6f 72 74 65 64 20 73 74 61 74     Unsupported stat
     7ba:	65 6d 65 6e 74 00                                   ement.

000007c0 <tgStatusMsg15>:
     7c0:	50 61 72 61 6d 65 74 65 72 20 6f 76 65 72 20 72     Parameter over r
     7d0:	61 6e 67 65 00                                      ange.

000007d5 <tgStatusMsg16>:
     7d5:	42 61 64 20 6e 75 6d 62 65 72 20 66 6f 72 6d 61     Bad number forma
     7e5:	74 00                                               t.

000007e7 <tgStatusMsg17>:
     7e7:	46 6c 6f 61 74 69 6e 67 20 70 6f 69 6e 74 20 65     Floating point e
     7f7:	72 72 6f 72 00                                      rror.

000007fc <tgStatusMsg18>:
     7fc:	4d 6f 74 69 6f 6e 20 63 6f 6e 74 72 6f 6c 20 65     Motion control e
     80c:	72 72 6f 72 00                                      rror.

00000811 <tgStatusMsg19>:
     811:	41 72 63 20 73 70 65 63 69 66 69 63 61 74 69 6f     Arc specificatio
     821:	6e 20 65 72 72 6f 72 00                             n error.

00000829 <tgStatusMsg20>:
     829:	5a 65 72 6f 20 6c 65 6e 67 74 68 20 6c 69 6e 65     Zero length line
	...

0000083a <tgStatusStrings>:
     83a:	f5 06 f8 06 fe 06 05 07 0a 07 16 07 22 07 30 07     ............".0.
     84a:	3f 07 4c 07 60 07 78 07 7d 07 92 07 aa 07 c0 07     ?.L.`.x.}.......
     85a:	d5 07 e7 07 fc 07 11 08 29 08                       ........).

00000864 <__c.4084>:
     864:	25 53 3a 20 25 73 0a 00                             %S: %s..

0000086c <__c.3979>:
     86c:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
     87c:	69 6c 65 0a 00                                      ile..

00000881 <__c.4042>:
     881:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

0000088f <__c.3954>:
     88f:	62 75 69 6c 64 20 32 30 39 00                       build 209.

00000899 <__c.3952>:
     899:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
     8a9:	25 53 0a 00                                         %S..

000008ad <bsel>:
     8ad:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

000008b8 <bscale>:
     8b8:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

000008c3 <readlnFuncs>:
     8c3:	76 29 32 29 32 29 32 29 32 29 32 29 32 29 32 29     v)2)2)2)2)2)2)2)
     8d3:	c0 29 32 29 76 29 32 29 32 29 76 29 32 29 32 29     .)2)v)2)2)v)2)2)
     8e3:	32 29 32 29 32 29 32 29 32 29 32 29 32 29 32 29     2)2)2)2)2)2)2)2)
     8f3:	32 29 32 29 32 29 32 29 32 29 32 29 32 29 32 29     2)2)2)2)2)2)2)2)
     903:	32 29 32 29 32 29 32 29 32 29 32 29 32 29 32 29     2)2)2)2)2)2)2)2)
     913:	32 29 32 29 32 29 32 29 32 29 32 29 32 29 32 29     2)2)2)2)2)2)2)2)
     923:	32 29 32 29 32 29 32 29 32 29 32 29 32 29 32 29     2)2)2)2)2)2)2)2)
     933:	32 29 32 29 32 29 a9 29 32 29 32 29 32 29 32 29     2)2)2).)2)2)2)2)
     943:	32 29 32 29 32 29 32 29 32 29 32 29 32 29 32 29     2)2)2)2)2)2)2)2)
     953:	32 29 32 29 32 29 32 29 32 29 32 29 32 29 32 29     2)2)2)2)2)2)2)2)
     963:	32 29 32 29 32 29 32 29 32 29 32 29 32 29 32 29     2)2)2)2)2)2)2)2)
     973:	32 29 32 29 32 29 32 29 32 29 32 29 32 29 32 29     2)2)2)2)2)2)2)2)
     983:	32 29 32 29 32 29 32 29 32 29 32 29 32 29 32 29     2)2)2)2)2)2)2)2)
     993:	32 29 32 29 32 29 32 29 32 29 32 29 32 29 32 29     2)2)2)2)2)2)2)2)
     9a3:	32 29 32 29 32 29 32 29 32 29 32 29 32 29 32 29     2)2)2)2)2)2)2)2)
     9b3:	32 29 32 29 32 29 32 29 32 29 32 29 32 29 c0 29     2)2)2)2)2)2)2).)

000009c3 <getcFuncs>:
     9c3:	69 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28     i(<(<(<(<(<(<(<(
     9d3:	be 28 3c 28 69 28 3c 28 3c 28 69 28 3c 28 3c 28     .(<(i(<(<(i(<(<(
     9e3:	3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28     <(<(<(<(<(<(<(<(
     9f3:	3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28     <(<(<(<(<(<(<(<(
     a03:	3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28     <(<(<(<(<(<(<(<(
     a13:	3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28     <(<(<(<(<(<(<(<(
     a23:	3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28     <(<(<(<(<(<(<(<(
     a33:	3c 28 3c 28 3c 28 a7 28 3c 28 3c 28 3c 28 3c 28     <(<(<(.(<(<(<(<(
     a43:	3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28     <(<(<(<(<(<(<(<(
     a53:	3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28     <(<(<(<(<(<(<(<(
     a63:	3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28     <(<(<(<(<(<(<(<(
     a73:	3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28     <(<(<(<(<(<(<(<(
     a83:	3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28     <(<(<(<(<(<(<(<(
     a93:	3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28     <(<(<(<(<(<(<(<(
     aa3:	3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28     <(<(<(<(<(<(<(<(
     ab3:	3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 3c 28 be 28     <(<(<(<(<(<(<(.(

00000ac3 <pstr_inf>:
     ac3:	49 4e 46                                            INF

00000ac6 <pstr_inity>:
     ac6:	49 4e 49 54 59                                      INITY

00000acb <pstr_nan>:
     acb:	4e 41 4e                                            NAN

00000ace <pwr_m10>:
     ace:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     ade:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000ae6 <pwr_p10>:
     ae6:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     af6:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     b06:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     b16:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     b26:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     b36:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     b46:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     b56:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     b66:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     b76:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     b86:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     b96:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     ba6:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     bb6:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     bc6:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     bd6:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     be6:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     bf6:	3d 27                                               ='

00000bf8 <__ctors_end>:
     bf8:	11 24       	eor	r1, r1
     bfa:	1f be       	out	0x3f, r1	; 63
     bfc:	cf ef       	ldi	r28, 0xFF	; 255
     bfe:	df e5       	ldi	r29, 0x5F	; 95
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	00 e0       	ldi	r16, 0x00	; 0
     c06:	0c bf       	out	0x3c, r16	; 60

00000c08 <__do_copy_data>:
     c08:	11 e2       	ldi	r17, 0x21	; 33
     c0a:	a0 e0       	ldi	r26, 0x00	; 0
     c0c:	b0 e2       	ldi	r27, 0x20	; 32
     c0e:	e0 ec       	ldi	r30, 0xC0	; 192
     c10:	f2 e8       	ldi	r31, 0x82	; 130
     c12:	00 e0       	ldi	r16, 0x00	; 0
     c14:	0b bf       	out	0x3b, r16	; 59
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <__do_copy_data+0x14>
     c18:	07 90       	elpm	r0, Z+
     c1a:	0d 92       	st	X+, r0
     c1c:	a2 33       	cpi	r26, 0x32	; 50
     c1e:	b1 07       	cpc	r27, r17
     c20:	d9 f7       	brne	.-10     	; 0xc18 <__do_copy_data+0x10>

00000c22 <__do_clear_bss>:
     c22:	16 e2       	ldi	r17, 0x26	; 38
     c24:	a2 e3       	ldi	r26, 0x32	; 50
     c26:	b1 e2       	ldi	r27, 0x21	; 33
     c28:	01 c0       	rjmp	.+2      	; 0xc2c <.do_clear_bss_start>

00000c2a <.do_clear_bss_loop>:
     c2a:	1d 92       	st	X+, r1

00000c2c <.do_clear_bss_start>:
     c2c:	a9 37       	cpi	r26, 0x79	; 121
     c2e:	b1 07       	cpc	r27, r17
     c30:	e1 f7       	brne	.-8      	; 0xc2a <.do_clear_bss_loop>
     c32:	0e 94 1f 06 	call	0xc3e	; 0xc3e <main>
     c36:	0c 94 5e 41 	jmp	0x82bc	; 0x82bc <_exit>

00000c3a <__bad_interrupt>:
     c3a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c3e <main>:
#include "gcode.h"


int main(void) 
{
	cli();						// Order dependent inits (1-N):
     c3e:	f8 94       	cli
	xmega_init();				// (1) xmega setup
     c40:	0e 94 70 12 	call	0x24e0	; 0x24e0 <xmega_init>
	xio_init();					// (3) xmega io subsystem
     c44:	0e 94 c1 20 	call	0x4182	; 0x4182 <xio_init>
	tg_init();					// (2) tinyg controller
     c48:	0e 94 1e 23 	call	0x463c	; 0x463c <tg_init>
	cfg_init();					// (4) get config record from eeprom
     c4c:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <cfg_init>

	st_init(); 					// stepper subsystem
     c50:	0e 94 9e 1b 	call	0x373c	; 0x373c <st_init>
	ls_init();					// limit switches
     c54:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <ls_init>
	mv_init();					// move buffers
     c58:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <mv_init>
	mc_init();					// motion control subsystem
     c5c:	0e 94 98 12 	call	0x2530	; 0x2530 <mc_init>
	spindle_init();				// spindle controller
     c60:	0e 94 82 1b 	call	0x3704	; 0x3704 <spindle_init>
	en_init();					// encoders
     c64:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <en_init>
	gc_init();					// gcode-parser
     c68:	0e 94 72 06 	call	0xce4	; 0xce4 <gc_init>
	dd_init();					// direct drive commands
     c6c:	0e 94 f7 23 	call	0x47ee	; 0x47ee <dd_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
     c70:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
     c74:	e0 ea       	ldi	r30, 0xA0	; 160
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 91 a2 00 	lds	r24, 0x00A2
     c7c:	81 60       	ori	r24, 0x01	; 1
     c7e:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
     c80:	80 91 a2 00 	lds	r24, 0x00A2
     c84:	82 60       	ori	r24, 0x02	; 2
     c86:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
     c88:	80 91 a2 00 	lds	r24, 0x00A2
     c8c:	84 60       	ori	r24, 0x04	; 4
     c8e:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
     c90:	78 94       	sei
//	xio_queue_RX_string_usb("g0 x10 y11 z12\n");
//	xio_queue_RX_string_usb("g92 x0 y0 z0\n");
//	xio_queue_RX_string_usb("g0 x0 y0 z0\n");


	xio_queue_RX_string_usb("G1 X7.626420 Y4.890310 Z-0.100000");
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e2       	ldi	r25, 0x20	; 32
     c96:	0e 94 92 2b 	call	0x5724	; 0x5724 <xio_queue_RX_string_usb>
	}
#endif

#ifdef __NORMAL_MODE
	for(;;){
		tg_controller();	// this node executes gcode blocks received via RS485
     c9a:	0e 94 db 23 	call	0x47b6	; 0x47b6 <tg_controller>
     c9e:	fd cf       	rjmp	.-6      	; 0xc9a <main+0x5c>

00000ca0 <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
     ca0:	80 93 45 21 	sts	0x2145, r24
	gc.plane_axis_1 = axis_1;
     ca4:	60 93 46 21 	sts	0x2146, r22
	gc.plane_axis_2 = axis_2;
     ca8:	40 93 47 21 	sts	0x2147, r20
}
     cac:	08 95       	ret

00000cae <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	7b 01       	movw	r14, r22
     cb8:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
     cba:	80 91 40 21 	lds	r24, 0x2140
     cbe:	88 23       	and	r24, r24
     cc0:	51 f0       	breq	.+20     	; 0xcd6 <to_millimeters+0x28>
     cc2:	c8 01       	movw	r24, r16
     cc4:	b7 01       	movw	r22, r14
     cc6:	25 e8       	ldi	r18, 0x85	; 133
     cc8:	32 e4       	ldi	r19, 0x42	; 66
     cca:	41 e2       	ldi	r20, 0x21	; 33
     ccc:	5d e3       	ldi	r21, 0x3D	; 61
     cce:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
     cd2:	7b 01       	movw	r14, r22
     cd4:	8c 01       	movw	r16, r24
}
     cd6:	b7 01       	movw	r22, r14
     cd8:	c8 01       	movw	r24, r16
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	08 95       	ret

00000ce4 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
     ce4:	86 e5       	ldi	r24, 0x56	; 86
     ce6:	e2 e3       	ldi	r30, 0x32	; 50
     ce8:	f1 e2       	ldi	r31, 0x21	; 33
     cea:	df 01       	movw	r26, r30
     cec:	1d 92       	st	X+, r1
     cee:	8a 95       	dec	r24
     cf0:	e9 f7       	brne	.-6      	; 0xcec <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	a0 e0       	ldi	r26, 0x00	; 0
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	80 93 48 21 	sts	0x2148, r24
     cfe:	90 93 49 21 	sts	0x2149, r25
     d02:	a0 93 4a 21 	sts	0x214A, r26
     d06:	b0 93 4b 21 	sts	0x214B, r27
	gc.radius = 0;							// radius value
     d0a:	80 93 4c 21 	sts	0x214C, r24
     d0e:	90 93 4d 21 	sts	0x214D, r25
     d12:	a0 93 4e 21 	sts	0x214E, r26
     d16:	b0 93 4f 21 	sts	0x214F, r27
	gc.feed_rate = cfg.default_feed_rate;	// Note: is divided by 60 in Grbl
     d1a:	80 91 79 22 	lds	r24, 0x2279
     d1e:	90 91 7a 22 	lds	r25, 0x227A
     d22:	a0 91 7b 22 	lds	r26, 0x227B
     d26:	b0 91 7c 22 	lds	r27, 0x227C
     d2a:	80 93 50 21 	sts	0x2150, r24
     d2e:	90 93 51 21 	sts	0x2151, r25
     d32:	a0 93 52 21 	sts	0x2152, r26
     d36:	b0 93 53 21 	sts	0x2153, r27
	gc.seek_rate = cfg.default_seek_rate;	// Note: is divided by 60 in Grbl
     d3a:	80 91 7d 22 	lds	r24, 0x227D
     d3e:	90 91 7e 22 	lds	r25, 0x227E
     d42:	a0 91 7f 22 	lds	r26, 0x227F
     d46:	b0 91 80 22 	lds	r27, 0x2280
     d4a:	80 93 54 21 	sts	0x2154, r24
     d4e:	90 93 55 21 	sts	0x2155, r25
     d52:	a0 93 56 21 	sts	0x2156, r26
     d56:	b0 93 57 21 	sts	0x2157, r27

	gc.absolute_mode = TRUE;
     d5a:	21 e0       	ldi	r18, 0x01	; 1
     d5c:	20 93 41 21 	sts	0x2141, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	a0 e8       	ldi	r26, 0x80	; 128
     d66:	bf eb       	ldi	r27, 0xBF	; 191
     d68:	80 93 5c 21 	sts	0x215C, r24
     d6c:	90 93 5d 21 	sts	0x215D, r25
     d70:	a0 93 5e 21 	sts	0x215E, r26
     d74:	b0 93 5f 21 	sts	0x215F, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
     d78:	10 92 42 21 	sts	0x2142, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
     d7c:	10 92 44 21 	sts	0x2144, r1
	gc.next_action = NEXT_ACTION_NONE; 		// no operation
     d80:	10 92 3c 21 	sts	0x213C, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
     d84:	10 92 45 21 	sts	0x2145, r1
	gc.plane_axis_1 = axis_1;
     d88:	20 93 46 21 	sts	0x2146, r18
	gc.plane_axis_2 = axis_2;
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	80 93 47 21 	sts	0x2147, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_NONE; 		// no operation

	select_plane(X, Y, Z);					// default planes, 0, 1 and 2
}
     d92:	08 95       	ret

00000d94 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check gc.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
     d94:	4f 92       	push	r4
     d96:	5f 92       	push	r5
     d98:	6f 92       	push	r6
     d9a:	7f 92       	push	r7
     d9c:	8f 92       	push	r8
     d9e:	9f 92       	push	r9
     da0:	af 92       	push	r10
     da2:	bf 92       	push	r11
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	0f 92       	push	r0
     db6:	0f 92       	push	r0
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	7c 01       	movw	r14, r24
     dbe:	3b 01       	movw	r6, r22
     dc0:	2a 01       	movw	r4, r20
     dc2:	49 01       	movw	r8, r18
     dc4:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
     dc6:	d8 01       	movw	r26, r16
     dc8:	ed 91       	ld	r30, X+
     dca:	fc 91       	ld	r31, X
     dcc:	e2 0f       	add	r30, r18
     dce:	f3 1f       	adc	r31, r19
     dd0:	80 81       	ld	r24, Z
     dd2:	88 23       	and	r24, r24
     dd4:	51 f0       	breq	.+20     	; 0xdea <_gc_next_statement+0x56>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
     dd6:	f7 01       	movw	r30, r14
     dd8:	80 83       	st	Z, r24
	if(!isupper(*letter)) {
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 da 3f 	call	0x7fb4	; 0x7fb4 <isupper>
     de0:	89 2b       	or	r24, r25
     de2:	31 f4       	brne	.+12     	; 0xdf0 <_gc_next_statement+0x5c>
		gc.status = TG_EXPECTED_COMMAND_LETTER;
     de4:	8d e0       	ldi	r24, 0x0D	; 13
     de6:	80 93 32 21 	sts	0x2132, r24
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	34 c0       	rjmp	.+104    	; 0xe58 <_gc_next_statement+0xc4>
		return(FALSE);
	}
	(*i)++;
     df0:	d8 01       	movw	r26, r16
     df2:	8d 91       	ld	r24, X+
     df4:	9c 91       	ld	r25, X
     df6:	11 97       	sbiw	r26, 0x01	; 1
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	8d 93       	st	X+, r24
     dfc:	9c 93       	st	X, r25
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
     dfe:	84 01       	movw	r16, r8
     e00:	08 0f       	add	r16, r24
     e02:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
     e04:	c8 01       	movw	r24, r16
     e06:	be 01       	movw	r22, r28
     e08:	6f 5f       	subi	r22, 0xFF	; 255
     e0a:	7f 4f       	sbci	r23, 0xFF	; 255
     e0c:	0e 94 76 3d 	call	0x7aec	; 0x7aec <strtod>
     e10:	6b 01       	movw	r12, r22
     e12:	7c 01       	movw	r14, r24
     e14:	f3 01       	movw	r30, r6
     e16:	60 83       	st	Z, r22
     e18:	71 83       	std	Z+1, r23	; 0x01
     e1a:	82 83       	std	Z+2, r24	; 0x02
     e1c:	93 83       	std	Z+3, r25	; 0x03
	if(end == start) { 
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	9a 81       	ldd	r25, Y+2	; 0x02
     e22:	80 17       	cp	r24, r16
     e24:	91 07       	cpc	r25, r17
     e26:	11 f4       	brne	.+4      	; 0xe2c <_gc_next_statement+0x98>
		gc.status = TG_BAD_NUMBER_FORMAT; 
     e28:	80 e1       	ldi	r24, 0x10	; 16
     e2a:	dd cf       	rjmp	.-70     	; 0xde6 <_gc_next_statement+0x52>
		return(FALSE); 
	};
	*i = end - buf;
     e2c:	88 19       	sub	r24, r8
     e2e:	99 09       	sbc	r25, r9
     e30:	d5 01       	movw	r26, r10
     e32:	8d 93       	st	X+, r24
     e34:	9c 93       	st	X, r25
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
     e36:	c7 01       	movw	r24, r14
     e38:	b6 01       	movw	r22, r12
     e3a:	0e 94 db 3c 	call	0x79b6	; 0x79b6 <trunc>
     e3e:	9b 01       	movw	r18, r22
     e40:	ac 01       	movw	r20, r24
     e42:	c7 01       	movw	r24, r14
     e44:	b6 01       	movw	r22, r12
     e46:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
     e4a:	f2 01       	movw	r30, r4
     e4c:	60 83       	st	Z, r22
     e4e:	71 83       	std	Z+1, r23	; 0x01
     e50:	82 83       	std	Z+2, r24	; 0x02
     e52:	93 83       	std	Z+3, r25	; 0x03
     e54:	21 e0       	ldi	r18, 0x01	; 1
     e56:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
     e58:	c9 01       	movw	r24, r18
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	bf 90       	pop	r11
     e70:	af 90       	pop	r10
     e72:	9f 90       	pop	r9
     e74:	8f 90       	pop	r8
     e76:	7f 90       	pop	r7
     e78:	6f 90       	pop	r6
     e7a:	5f 90       	pop	r5
     e7c:	4f 90       	pop	r4
     e7e:	08 95       	ret

00000e80 <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
     e80:	af 92       	push	r10
     e82:	bf 92       	push	r11
     e84:	cf 92       	push	r12
     e86:	df 92       	push	r13
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	79 01       	movw	r14, r18
     e92:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
     e94:	5f 77       	andi	r21, 0x7F	; 127
     e96:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
     e9a:	0e 94 30 39 	call	0x7260	; 0x7260 <atan>
     e9e:	5b 01       	movw	r10, r22
     ea0:	6c 01       	movw	r12, r24

	if (y>0) {
     ea2:	c8 01       	movw	r24, r16
     ea4:	b7 01       	movw	r22, r14
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <__gesf2>
     eb2:	18 16       	cp	r1, r24
     eb4:	cc f0       	brlt	.+50     	; 0xee8 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
     eb6:	c6 01       	movw	r24, r12
     eb8:	b5 01       	movw	r22, r10
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e0       	ldi	r20, 0x00	; 0
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <__gesf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	2c f4       	brge	.+10     	; 0xed4 <theta+0x54>
	    {
			return(M_PI-theta);
     eca:	6b ed       	ldi	r22, 0xDB	; 219
     ecc:	7f e0       	ldi	r23, 0x0F	; 15
     ece:	89 e4       	ldi	r24, 0x49	; 73
     ed0:	90 e4       	ldi	r25, 0x40	; 64
     ed2:	04 c0       	rjmp	.+8      	; 0xedc <theta+0x5c>
    	} else {
			return(-M_PI-theta);
     ed4:	6b ed       	ldi	r22, 0xDB	; 219
     ed6:	7f e0       	ldi	r23, 0x0F	; 15
     ed8:	89 e4       	ldi	r24, 0x49	; 73
     eda:	90 ec       	ldi	r25, 0xC0	; 192
     edc:	a6 01       	movw	r20, r12
     ede:	95 01       	movw	r18, r10
     ee0:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
     ee4:	5b 01       	movw	r10, r22
     ee6:	6c 01       	movw	r12, r24
		}
	}
}
     ee8:	b5 01       	movw	r22, r10
     eea:	c6 01       	movw	r24, r12
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	df 90       	pop	r13
     ef6:	cf 90       	pop	r12
     ef8:	bf 90       	pop	r11
     efa:	af 90       	pop	r10
     efc:	08 95       	ret

00000efe <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
     efe:	2f 92       	push	r2
     f00:	3f 92       	push	r3
     f02:	4f 92       	push	r4
     f04:	5f 92       	push	r5
     f06:	6f 92       	push	r6
     f08:	7f 92       	push	r7
     f0a:	8f 92       	push	r8
     f0c:	9f 92       	push	r9
     f0e:	af 92       	push	r10
     f10:	bf 92       	push	r11
     f12:	cf 92       	push	r12
     f14:	df 92       	push	r13
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	68 97       	sbiw	r28, 0x18	; 24
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	5c 01       	movw	r10, r24
	int i = 0;  				// index into Gcode block buffer (buf)
     f2e:	19 82       	std	Y+1, r1	; 0x01
     f30:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
     f32:	ec e6       	ldi	r30, 0x6C	; 108
     f34:	f1 e2       	ldi	r31, 0x21	; 33
     f36:	8c e0       	ldi	r24, 0x0C	; 12
     f38:	df 01       	movw	r26, r30
     f3a:	28 2f       	mov	r18, r24
     f3c:	1d 92       	st	X+, r1
     f3e:	2a 95       	dec	r18
     f40:	e9 f7       	brne	.-6      	; 0xf3c <gc_execute_block+0x3e>
	clear_vector(gc.offset);
     f42:	3c 96       	adiw	r30, 0x0c	; 12
     f44:	df 01       	movw	r26, r30
     f46:	1d 92       	st	X+, r1
     f48:	8a 95       	dec	r24
     f4a:	e9 f7       	brne	.-6      	; 0xf46 <gc_execute_block+0x48>

	gc.status = TG_OK;
     f4c:	10 92 32 21 	sts	0x2132, r1
	gc.set_origin_mode = 0;	// you are not in set origin mode unless you say you are
     f50:	10 92 43 21 	sts	0x2143, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
     f54:	4e 01       	movw	r8, r28
     f56:	08 94       	sec
     f58:	81 1c       	adc	r8, r1
     f5a:	91 1c       	adc	r9, r1

			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
     f5c:	ff 24       	eor	r15, r15
     f5e:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: gc.status = TG_UNSUPPORTED_STATEMENT;
     f60:	be e0       	ldi	r27, 0x0E	; 14
     f62:	cb 2e       	mov	r12, r27
				break;

			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     f64:	a2 e0       	ldi	r26, 0x02	; 2
     f66:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
     f68:	77 24       	eor	r7, r7
     f6a:	7a 94       	dec	r7

					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
     f6c:	f3 e0       	ldi	r31, 0x03	; 3
     f6e:	df 2e       	mov	r13, r31

					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
     f70:	e4 e0       	ldi	r30, 0x04	; 4
     f72:	6e 2e       	mov	r6, r30
     f74:	0a c1       	rjmp	.+532    	; 0x118a <gc_execute_block+0x28c>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;	// you are not in set origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
     f76:	80 91 33 21 	lds	r24, 0x2133
     f7a:	8d 34       	cpi	r24, 0x4D	; 77
     f7c:	09 f4       	brne	.+2      	; 0xf80 <gc_execute_block+0x82>
     f7e:	be c0       	rjmp	.+380    	; 0x10fc <gc_execute_block+0x1fe>
     f80:	84 35       	cpi	r24, 0x54	; 84
     f82:	09 f4       	brne	.+2      	; 0xf86 <gc_execute_block+0x88>
     f84:	f0 c0       	rjmp	.+480    	; 0x1166 <gc_execute_block+0x268>
     f86:	87 34       	cpi	r24, 0x47	; 71
     f88:	09 f0       	breq	.+2      	; 0xf8c <gc_execute_block+0x8e>
     f8a:	fb c0       	rjmp	.+502    	; 0x1182 <gc_execute_block+0x284>
			case 'G':
				switch((int)gc.value) {
     f8c:	60 91 34 21 	lds	r22, 0x2134
     f90:	70 91 35 21 	lds	r23, 0x2135
     f94:	80 91 36 21 	lds	r24, 0x2136
     f98:	90 91 37 21 	lds	r25, 0x2137
     f9c:	0e 94 da 39 	call	0x73b4	; 0x73b4 <__fixsfsi>
     fa0:	65 31       	cpi	r22, 0x15	; 21
     fa2:	71 05       	cpc	r23, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <gc_execute_block+0xaa>
     fa6:	8f c0       	rjmp	.+286    	; 0x10c6 <gc_execute_block+0x1c8>
     fa8:	66 31       	cpi	r22, 0x16	; 22
     faa:	71 05       	cpc	r23, r1
     fac:	84 f5       	brge	.+96     	; 0x100e <gc_execute_block+0x110>
     fae:	64 30       	cpi	r22, 0x04	; 4
     fb0:	71 05       	cpc	r23, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <gc_execute_block+0xb8>
     fb4:	6d c0       	rjmp	.+218    	; 0x1090 <gc_execute_block+0x192>
     fb6:	65 30       	cpi	r22, 0x05	; 5
     fb8:	71 05       	cpc	r23, r1
     fba:	a4 f4       	brge	.+40     	; 0xfe4 <gc_execute_block+0xe6>
     fbc:	61 30       	cpi	r22, 0x01	; 1
     fbe:	71 05       	cpc	r23, r1
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <gc_execute_block+0xc6>
     fc2:	57 c0       	rjmp	.+174    	; 0x1072 <gc_execute_block+0x174>
     fc4:	62 30       	cpi	r22, 0x02	; 2
     fc6:	71 05       	cpc	r23, r1
     fc8:	24 f4       	brge	.+8      	; 0xfd2 <gc_execute_block+0xd4>
     fca:	67 2b       	or	r22, r23
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <gc_execute_block+0xd2>
     fce:	4c c0       	rjmp	.+152    	; 0x1068 <gc_execute_block+0x16a>
     fd0:	c7 c0       	rjmp	.+398    	; 0x1160 <gc_execute_block+0x262>
     fd2:	62 30       	cpi	r22, 0x02	; 2
     fd4:	71 05       	cpc	r23, r1
     fd6:	09 f4       	brne	.+2      	; 0xfda <gc_execute_block+0xdc>
     fd8:	51 c0       	rjmp	.+162    	; 0x107c <gc_execute_block+0x17e>
     fda:	63 30       	cpi	r22, 0x03	; 3
     fdc:	71 05       	cpc	r23, r1
     fde:	09 f0       	breq	.+2      	; 0xfe2 <gc_execute_block+0xe4>
     fe0:	bf c0       	rjmp	.+382    	; 0x1160 <gc_execute_block+0x262>
     fe2:	51 c0       	rjmp	.+162    	; 0x1086 <gc_execute_block+0x188>
     fe4:	62 31       	cpi	r22, 0x12	; 18
     fe6:	71 05       	cpc	r23, r1
     fe8:	09 f4       	brne	.+2      	; 0xfec <gc_execute_block+0xee>
     fea:	5c c0       	rjmp	.+184    	; 0x10a4 <gc_execute_block+0x1a6>
     fec:	63 31       	cpi	r22, 0x13	; 19
     fee:	71 05       	cpc	r23, r1
     ff0:	2c f4       	brge	.+10     	; 0xffc <gc_execute_block+0xfe>
     ff2:	61 31       	cpi	r22, 0x11	; 17
     ff4:	71 05       	cpc	r23, r1
     ff6:	09 f0       	breq	.+2      	; 0xffa <gc_execute_block+0xfc>
     ff8:	b3 c0       	rjmp	.+358    	; 0x1160 <gc_execute_block+0x262>
     ffa:	4d c0       	rjmp	.+154    	; 0x1096 <gc_execute_block+0x198>
     ffc:	63 31       	cpi	r22, 0x13	; 19
     ffe:	71 05       	cpc	r23, r1
    1000:	09 f4       	brne	.+2      	; 0x1004 <gc_execute_block+0x106>
    1002:	57 c0       	rjmp	.+174    	; 0x10b2 <gc_execute_block+0x1b4>
    1004:	64 31       	cpi	r22, 0x14	; 20
    1006:	71 05       	cpc	r23, r1
    1008:	09 f0       	breq	.+2      	; 0x100c <gc_execute_block+0x10e>
    100a:	aa c0       	rjmp	.+340    	; 0x1160 <gc_execute_block+0x262>
    100c:	59 c0       	rjmp	.+178    	; 0x10c0 <gc_execute_block+0x1c2>
    100e:	6a 35       	cpi	r22, 0x5A	; 90
    1010:	71 05       	cpc	r23, r1
    1012:	09 f4       	brne	.+2      	; 0x1016 <gc_execute_block+0x118>
    1014:	64 c0       	rjmp	.+200    	; 0x10de <gc_execute_block+0x1e0>
    1016:	6b 35       	cpi	r22, 0x5B	; 91
    1018:	71 05       	cpc	r23, r1
    101a:	ac f4       	brge	.+42     	; 0x1046 <gc_execute_block+0x148>
    101c:	6e 31       	cpi	r22, 0x1E	; 30
    101e:	71 05       	cpc	r23, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <gc_execute_block+0x126>
    1022:	54 c0       	rjmp	.+168    	; 0x10cc <gc_execute_block+0x1ce>
    1024:	6f 31       	cpi	r22, 0x1F	; 31
    1026:	71 05       	cpc	r23, r1
    1028:	2c f4       	brge	.+10     	; 0x1034 <gc_execute_block+0x136>
    102a:	6c 31       	cpi	r22, 0x1C	; 28
    102c:	71 05       	cpc	r23, r1
    102e:	09 f0       	breq	.+2      	; 0x1032 <gc_execute_block+0x134>
    1030:	97 c0       	rjmp	.+302    	; 0x1160 <gc_execute_block+0x262>
    1032:	4c c0       	rjmp	.+152    	; 0x10cc <gc_execute_block+0x1ce>
    1034:	65 33       	cpi	r22, 0x35	; 53
    1036:	71 05       	cpc	r23, r1
    1038:	09 f4       	brne	.+2      	; 0x103c <gc_execute_block+0x13e>
    103a:	4b c0       	rjmp	.+150    	; 0x10d2 <gc_execute_block+0x1d4>
    103c:	60 35       	cpi	r22, 0x50	; 80
    103e:	71 05       	cpc	r23, r1
    1040:	09 f0       	breq	.+2      	; 0x1044 <gc_execute_block+0x146>
    1042:	8e c0       	rjmp	.+284    	; 0x1160 <gc_execute_block+0x262>
    1044:	49 c0       	rjmp	.+146    	; 0x10d8 <gc_execute_block+0x1da>
    1046:	6c 35       	cpi	r22, 0x5C	; 92
    1048:	71 05       	cpc	r23, r1
    104a:	09 f4       	brne	.+2      	; 0x104e <gc_execute_block+0x150>
    104c:	4e c0       	rjmp	.+156    	; 0x10ea <gc_execute_block+0x1ec>
    104e:	6c 35       	cpi	r22, 0x5C	; 92
    1050:	71 05       	cpc	r23, r1
    1052:	0c f4       	brge	.+2      	; 0x1056 <gc_execute_block+0x158>
    1054:	47 c0       	rjmp	.+142    	; 0x10e4 <gc_execute_block+0x1e6>
    1056:	6d 35       	cpi	r22, 0x5D	; 93
    1058:	71 05       	cpc	r23, r1
    105a:	09 f4       	brne	.+2      	; 0x105e <gc_execute_block+0x160>
    105c:	49 c0       	rjmp	.+146    	; 0x10f0 <gc_execute_block+0x1f2>
    105e:	6e 35       	cpi	r22, 0x5E	; 94
    1060:	71 05       	cpc	r23, r1
    1062:	09 f0       	breq	.+2      	; 0x1066 <gc_execute_block+0x168>
    1064:	7d c0       	rjmp	.+250    	; 0x1160 <gc_execute_block+0x262>
    1066:	47 c0       	rjmp	.+142    	; 0x10f6 <gc_execute_block+0x1f8>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    1068:	f0 92 3c 21 	sts	0x213C, r15
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    106c:	10 92 3e 21 	sts	0x213E, r1
    1070:	88 c0       	rjmp	.+272    	; 0x1182 <gc_execute_block+0x284>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    1072:	f0 92 3c 21 	sts	0x213C, r15
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    1076:	f0 92 3e 21 	sts	0x213E, r15
    107a:	83 c0       	rjmp	.+262    	; 0x1182 <gc_execute_block+0x284>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    107c:	f0 92 3c 21 	sts	0x213C, r15
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    1080:	e0 92 3e 21 	sts	0x213E, r14
    1084:	7e c0       	rjmp	.+252    	; 0x1182 <gc_execute_block+0x284>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    1086:	f0 92 3c 21 	sts	0x213C, r15
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    108a:	d0 92 3e 21 	sts	0x213E, r13
    108e:	79 c0       	rjmp	.+242    	; 0x1182 <gc_execute_block+0x284>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    1090:	e0 92 3c 21 	sts	0x213C, r14
    1094:	76 c0       	rjmp	.+236    	; 0x1182 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1096:	10 92 45 21 	sts	0x2145, r1
	gc.plane_axis_1 = axis_1;
    109a:	f0 92 46 21 	sts	0x2146, r15
	gc.plane_axis_2 = axis_2;
    109e:	e0 92 47 21 	sts	0x2147, r14
    10a2:	6f c0       	rjmp	.+222    	; 0x1182 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    10a4:	10 92 45 21 	sts	0x2145, r1
	gc.plane_axis_1 = axis_1;
    10a8:	e0 92 46 21 	sts	0x2146, r14
	gc.plane_axis_2 = axis_2;
    10ac:	f0 92 47 21 	sts	0x2147, r15
    10b0:	68 c0       	rjmp	.+208    	; 0x1182 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    10b2:	f0 92 45 21 	sts	0x2145, r15
	gc.plane_axis_1 = axis_1;
    10b6:	e0 92 46 21 	sts	0x2146, r14
	gc.plane_axis_2 = axis_2;
    10ba:	10 92 47 21 	sts	0x2147, r1
    10be:	61 c0       	rjmp	.+194    	; 0x1182 <gc_execute_block+0x284>

					case 17: { select_plane(X, Y, Z); break; }
					case 18: { select_plane(X, Z, Y); break; }
					case 19: { select_plane(Y, Z, X); break; }

					case 20: { gc.inches_mode = TRUE; break; }
    10c0:	f0 92 40 21 	sts	0x2140, r15
    10c4:	5e c0       	rjmp	.+188    	; 0x1182 <gc_execute_block+0x284>
					case 21: { gc.inches_mode = FALSE; break; }
    10c6:	10 92 40 21 	sts	0x2140, r1
    10ca:	5b c0       	rjmp	.+182    	; 0x1182 <gc_execute_block+0x284>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    10cc:	d0 92 3c 21 	sts	0x213C, r13
    10d0:	58 c0       	rjmp	.+176    	; 0x1182 <gc_execute_block+0x284>

					case 53: { gc.absolute_override = TRUE; break; }
    10d2:	f0 92 44 21 	sts	0x2144, r15
    10d6:	55 c0       	rjmp	.+170    	; 0x1182 <gc_execute_block+0x284>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    10d8:	60 92 3e 21 	sts	0x213E, r6
    10dc:	52 c0       	rjmp	.+164    	; 0x1182 <gc_execute_block+0x284>
					case 90: { gc.absolute_mode = TRUE; break; }
    10de:	f0 92 41 21 	sts	0x2141, r15
    10e2:	4f c0       	rjmp	.+158    	; 0x1182 <gc_execute_block+0x284>
					case 91: { gc.absolute_mode = FALSE; break; }
    10e4:	10 92 41 21 	sts	0x2141, r1
    10e8:	4c c0       	rjmp	.+152    	; 0x1182 <gc_execute_block+0x284>
					case 92: { gc.set_origin_mode = TRUE; break; }
    10ea:	f0 92 43 21 	sts	0x2143, r15
    10ee:	49 c0       	rjmp	.+146    	; 0x1182 <gc_execute_block+0x284>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    10f0:	f0 92 3f 21 	sts	0x213F, r15
    10f4:	46 c0       	rjmp	.+140    	; 0x1182 <gc_execute_block+0x284>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    10f6:	10 92 3f 21 	sts	0x213F, r1
    10fa:	43 c0       	rjmp	.+134    	; 0x1182 <gc_execute_block+0x284>
					default: gc.status = TG_UNSUPPORTED_STATEMENT;
				}
				break;

			case 'M':
				switch((int)gc.value) {
    10fc:	60 91 34 21 	lds	r22, 0x2134
    1100:	70 91 35 21 	lds	r23, 0x2135
    1104:	80 91 36 21 	lds	r24, 0x2136
    1108:	90 91 37 21 	lds	r25, 0x2137
    110c:	0e 94 da 39 	call	0x73b4	; 0x73b4 <__fixsfsi>
    1110:	63 30       	cpi	r22, 0x03	; 3
    1112:	71 05       	cpc	r23, r1
    1114:	e1 f0       	breq	.+56     	; 0x114e <gc_execute_block+0x250>
    1116:	64 30       	cpi	r22, 0x04	; 4
    1118:	71 05       	cpc	r23, r1
    111a:	34 f4       	brge	.+12     	; 0x1128 <gc_execute_block+0x22a>
    111c:	77 fd       	sbrc	r23, 7
    111e:	20 c0       	rjmp	.+64     	; 0x1160 <gc_execute_block+0x262>
    1120:	62 30       	cpi	r22, 0x02	; 2
    1122:	71 05       	cpc	r23, r1
    1124:	74 f0       	brlt	.+28     	; 0x1142 <gc_execute_block+0x244>
    1126:	10 c0       	rjmp	.+32     	; 0x1148 <gc_execute_block+0x24a>
    1128:	65 30       	cpi	r22, 0x05	; 5
    112a:	71 05       	cpc	r23, r1
    112c:	b1 f0       	breq	.+44     	; 0x115a <gc_execute_block+0x25c>
    112e:	65 30       	cpi	r22, 0x05	; 5
    1130:	71 05       	cpc	r23, r1
    1132:	84 f0       	brlt	.+32     	; 0x1154 <gc_execute_block+0x256>
    1134:	6e 31       	cpi	r22, 0x1E	; 30
    1136:	71 05       	cpc	r23, r1
    1138:	39 f0       	breq	.+14     	; 0x1148 <gc_execute_block+0x24a>
    113a:	6c 33       	cpi	r22, 0x3C	; 60
    113c:	71 05       	cpc	r23, r1
    113e:	81 f4       	brne	.+32     	; 0x1160 <gc_execute_block+0x262>
    1140:	03 c0       	rjmp	.+6      	; 0x1148 <gc_execute_block+0x24a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    1142:	f0 92 3d 21 	sts	0x213D, r15
    1146:	1d c0       	rjmp	.+58     	; 0x1182 <gc_execute_block+0x284>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    1148:	e0 92 3d 21 	sts	0x213D, r14
    114c:	1a c0       	rjmp	.+52     	; 0x1182 <gc_execute_block+0x284>
					case 3: gc.spindle_direction = 1; break;
    114e:	f0 92 85 21 	sts	0x2185, r15
    1152:	17 c0       	rjmp	.+46     	; 0x1182 <gc_execute_block+0x284>
					case 4: gc.spindle_direction = -1; break;
    1154:	70 92 85 21 	sts	0x2185, r7
    1158:	14 c0       	rjmp	.+40     	; 0x1182 <gc_execute_block+0x284>
					case 5: gc.spindle_direction = 0; break;
    115a:	10 92 85 21 	sts	0x2185, r1
    115e:	11 c0       	rjmp	.+34     	; 0x1182 <gc_execute_block+0x284>
        			default: gc.status = TG_UNSUPPORTED_STATEMENT;
    1160:	c0 92 32 21 	sts	0x2132, r12
    1164:	0e c0       	rjmp	.+28     	; 0x1182 <gc_execute_block+0x284>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    1166:	60 91 34 21 	lds	r22, 0x2134
    116a:	70 91 35 21 	lds	r23, 0x2135
    116e:	80 91 36 21 	lds	r24, 0x2136
    1172:	90 91 37 21 	lds	r25, 0x2137
    1176:	0e 94 db 3c 	call	0x79b6	; 0x79b6 <trunc>
    117a:	0e 94 df 39 	call	0x73be	; 0x73be <__fixunssfsi>
    117e:	60 93 84 21 	sts	0x2184, r22
		}
		if(gc.status) {
    1182:	80 91 32 21 	lds	r24, 0x2132
    1186:	88 23       	and	r24, r24
    1188:	69 f4       	brne	.+26     	; 0x11a4 <gc_execute_block+0x2a6>

	gc.status = TG_OK;
	gc.set_origin_mode = 0;	// you are not in set origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    118a:	83 e3       	ldi	r24, 0x33	; 51
    118c:	91 e2       	ldi	r25, 0x21	; 33
    118e:	64 e3       	ldi	r22, 0x34	; 52
    1190:	71 e2       	ldi	r23, 0x21	; 33
    1192:	48 e3       	ldi	r20, 0x38	; 56
    1194:	51 e2       	ldi	r21, 0x21	; 33
    1196:	95 01       	movw	r18, r10
    1198:	84 01       	movw	r16, r8
    119a:	0e 94 ca 06 	call	0xd94	; 0xd94 <_gc_next_statement>
    119e:	89 2b       	or	r24, r25
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <gc_execute_block+0x2a6>
    11a2:	e9 ce       	rjmp	.-558    	; 0xf76 <gc_execute_block+0x78>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    11a4:	80 91 32 21 	lds	r24, 0x2132
    11a8:	88 23       	and	r24, r24
    11aa:	09 f0       	breq	.+2      	; 0x11ae <gc_execute_block+0x2b0>
    11ac:	c2 c3       	rjmp	.+1924   	; 0x1932 <gc_execute_block+0xa34>
		return(gc.status); 
	}

	i = 0;
    11ae:	19 82       	std	Y+1, r1	; 0x01
    11b0:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    11b2:	e8 e7       	ldi	r30, 0x78	; 120
    11b4:	f1 e2       	ldi	r31, 0x21	; 33
    11b6:	8c e0       	ldi	r24, 0x0C	; 12
    11b8:	df 01       	movw	r26, r30
    11ba:	1d 92       	st	X+, r1
    11bc:	8a 95       	dec	r24
    11be:	e9 f7       	brne	.-6      	; 0x11ba <gc_execute_block+0x2bc>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = position
    11c0:	df 01       	movw	r26, r30
    11c2:	1c 97       	sbiw	r26, 0x0c	; 12
    11c4:	78 97       	sbiw	r30, 0x18	; 24
    11c6:	8c e0       	ldi	r24, 0x0C	; 12
    11c8:	01 90       	ld	r0, Z+
    11ca:	0d 92       	st	X+, r0
    11cc:	81 50       	subi	r24, 0x01	; 1
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <gc_execute_block+0x2ca>
    11d0:	cc c0       	rjmp	.+408    	; 0x136a <gc_execute_block+0x46c>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    11d2:	c0 90 34 21 	lds	r12, 0x2134
    11d6:	d0 90 35 21 	lds	r13, 0x2135
    11da:	e0 90 36 21 	lds	r14, 0x2136
    11de:	f0 90 37 21 	lds	r15, 0x2137
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    11e2:	80 91 40 21 	lds	r24, 0x2140
    11e6:	88 23       	and	r24, r24
    11e8:	19 f4       	brne	.+6      	; 0x11f0 <gc_execute_block+0x2f2>
    11ea:	a7 01       	movw	r20, r14
    11ec:	96 01       	movw	r18, r12
    11ee:	0a c0       	rjmp	.+20     	; 0x1204 <gc_execute_block+0x306>
    11f0:	c7 01       	movw	r24, r14
    11f2:	b6 01       	movw	r22, r12
    11f4:	25 e8       	ldi	r18, 0x85	; 133
    11f6:	32 e4       	ldi	r19, 0x42	; 66
    11f8:	41 e2       	ldi	r20, 0x21	; 33
    11fa:	5d e3       	ldi	r21, 0x3D	; 61
    11fc:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    1200:	9b 01       	movw	r18, r22
    1202:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    1204:	20 93 58 21 	sts	0x2158, r18
    1208:	30 93 59 21 	sts	0x2159, r19
    120c:	40 93 5a 21 	sts	0x215A, r20
    1210:	50 93 5b 21 	sts	0x215B, r21
		switch(gc.letter) {
    1214:	00 91 33 21 	lds	r16, 0x2133
    1218:	00 35       	cpi	r16, 0x50	; 80
    121a:	09 f4       	brne	.+2      	; 0x121e <gc_execute_block+0x320>
    121c:	47 c0       	rjmp	.+142    	; 0x12ac <gc_execute_block+0x3ae>
    121e:	01 35       	cpi	r16, 0x51	; 81
    1220:	58 f4       	brcc	.+22     	; 0x1238 <gc_execute_block+0x33a>
    1222:	06 34       	cpi	r16, 0x46	; 70
    1224:	c1 f0       	breq	.+48     	; 0x1256 <gc_execute_block+0x358>
    1226:	06 34       	cpi	r16, 0x46	; 70
    1228:	08 f4       	brcc	.+2      	; 0x122c <gc_execute_block+0x32e>
    122a:	a7 c0       	rjmp	.+334    	; 0x137a <gc_execute_block+0x47c>
    122c:	80 2f       	mov	r24, r16
    122e:	89 54       	subi	r24, 0x49	; 73
    1230:	83 30       	cpi	r24, 0x03	; 3
    1232:	08 f0       	brcs	.+2      	; 0x1236 <gc_execute_block+0x338>
    1234:	a2 c0       	rjmp	.+324    	; 0x137a <gc_execute_block+0x47c>
    1236:	2d c0       	rjmp	.+90     	; 0x1292 <gc_execute_block+0x394>
    1238:	03 35       	cpi	r16, 0x53	; 83
    123a:	09 f4       	brne	.+2      	; 0x123e <gc_execute_block+0x340>
    123c:	4b c0       	rjmp	.+150    	; 0x12d4 <gc_execute_block+0x3d6>
    123e:	04 35       	cpi	r16, 0x54	; 84
    1240:	20 f4       	brcc	.+8      	; 0x124a <gc_execute_block+0x34c>
    1242:	02 35       	cpi	r16, 0x52	; 82
    1244:	09 f0       	breq	.+2      	; 0x1248 <gc_execute_block+0x34a>
    1246:	99 c0       	rjmp	.+306    	; 0x137a <gc_execute_block+0x47c>
    1248:	3a c0       	rjmp	.+116    	; 0x12be <gc_execute_block+0x3c0>
    124a:	80 2f       	mov	r24, r16
    124c:	88 55       	subi	r24, 0x58	; 88
    124e:	83 30       	cpi	r24, 0x03	; 3
    1250:	08 f0       	brcs	.+2      	; 0x1254 <gc_execute_block+0x356>
    1252:	93 c0       	rjmp	.+294    	; 0x137a <gc_execute_block+0x47c>
    1254:	48 c0       	rjmp	.+144    	; 0x12e6 <gc_execute_block+0x3e8>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    1256:	80 91 3f 21 	lds	r24, 0x213F
    125a:	88 23       	and	r24, r24
    125c:	49 f0       	breq	.+18     	; 0x1270 <gc_execute_block+0x372>
					gc.inverse_feed_rate = gc.unit_converted_value; // secs per motion for this motion only
    125e:	20 93 5c 21 	sts	0x215C, r18
    1262:	30 93 5d 21 	sts	0x215D, r19
    1266:	40 93 5e 21 	sts	0x215E, r20
    126a:	50 93 5f 21 	sts	0x215F, r21
    126e:	85 c0       	rjmp	.+266    	; 0x137a <gc_execute_block+0x47c>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    1270:	ca 01       	movw	r24, r20
    1272:	b9 01       	movw	r22, r18
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e7       	ldi	r20, 0x70	; 112
    127a:	52 e4       	ldi	r21, 0x42	; 66
    127c:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    1280:	60 93 50 21 	sts	0x2150, r22
    1284:	70 93 51 21 	sts	0x2151, r23
    1288:	80 93 52 21 	sts	0x2152, r24
    128c:	90 93 53 21 	sts	0x2153, r25
    1290:	74 c0       	rjmp	.+232    	; 0x137a <gc_execute_block+0x47c>
				}
				break;
			case 'I': case 'J': case 'K': {
				gc.offset[gc.letter-'I'] = gc.unit_converted_value; 
    1292:	e0 2f       	mov	r30, r16
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	ee 0f       	add	r30, r30
    1298:	ff 1f       	adc	r31, r31
    129a:	ee 0f       	add	r30, r30
    129c:	ff 1f       	adc	r31, r31
    129e:	ec 5a       	subi	r30, 0xAC	; 172
    12a0:	ff 4d       	sbci	r31, 0xDF	; 223
    12a2:	20 83       	st	Z, r18
    12a4:	31 83       	std	Z+1, r19	; 0x01
    12a6:	42 83       	std	Z+2, r20	; 0x02
    12a8:	53 83       	std	Z+3, r21	; 0x03
    12aa:	67 c0       	rjmp	.+206    	; 0x137a <gc_execute_block+0x47c>
				break;
			}
			case 'P': {
				gc.dwell_time = gc.value; 			// dwell time in seconds
    12ac:	c0 92 48 21 	sts	0x2148, r12
    12b0:	d0 92 49 21 	sts	0x2149, r13
    12b4:	e0 92 4a 21 	sts	0x214A, r14
    12b8:	f0 92 4b 21 	sts	0x214B, r15
    12bc:	5e c0       	rjmp	.+188    	; 0x137a <gc_execute_block+0x47c>
				break;
			}
			case 'R': {
				gc.radius = gc.unit_converted_value; 
    12be:	20 93 4c 21 	sts	0x214C, r18
    12c2:	30 93 4d 21 	sts	0x214D, r19
    12c6:	40 93 4e 21 	sts	0x214E, r20
    12ca:	50 93 4f 21 	sts	0x214F, r21
				gc.radius_mode = TRUE; 
    12ce:	70 92 42 21 	sts	0x2142, r7
    12d2:	53 c0       	rjmp	.+166    	; 0x137a <gc_execute_block+0x47c>
				break;
			}
			case 'S': {
				gc.spindle_speed = gc.value; 
    12d4:	c7 01       	movw	r24, r14
    12d6:	b6 01       	movw	r22, r12
    12d8:	0e 94 da 39 	call	0x73b4	; 0x73b4 <__fixsfsi>
    12dc:	60 93 86 21 	sts	0x2186, r22
    12e0:	70 93 87 21 	sts	0x2187, r23
    12e4:	4a c0       	rjmp	.+148    	; 0x137a <gc_execute_block+0x47c>
				break;
			}
			case 'X': case 'Y': case 'Z': {
				if (gc.set_origin_mode) {
    12e6:	80 91 43 21 	lds	r24, 0x2143
    12ea:	88 23       	and	r24, r24
    12ec:	99 f0       	breq	.+38     	; 0x1314 <gc_execute_block+0x416>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    12ee:	e0 2f       	mov	r30, r16
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	ee 0f       	add	r30, r30
    12f4:	ff 1f       	adc	r31, r31
    12f6:	ee 0f       	add	r30, r30
    12f8:	ff 1f       	adc	r31, r31
    12fa:	ee 52       	subi	r30, 0x2E	; 46
    12fc:	f0 4e       	sbci	r31, 0xE0	; 224
    12fe:	26 a7       	std	Z+46, r18	; 0x2e
    1300:	37 a7       	std	Z+47, r19	; 0x2f
    1302:	40 ab       	std	Z+48, r20	; 0x30
    1304:	51 ab       	std	Z+49, r21	; 0x31
					gc.target[gc.letter - 'X'] = gc.position[gc.letter - 'X'];
    1306:	22 af       	std	Z+58, r18	; 0x3a
    1308:	33 af       	std	Z+59, r19	; 0x3b
    130a:	44 af       	std	Z+60, r20	; 0x3c
    130c:	55 af       	std	Z+61, r21	; 0x3d
//					memcpy(gc.target, gc.position, sizeof(gc.target));	// target = position
					gc.next_action = NEXT_ACTION_SET_COORDINATES;
    130e:	60 92 3c 21 	sts	0x213C, r6
    1312:	33 c0       	rjmp	.+102    	; 0x137a <gc_execute_block+0x47c>
				} else if (gc.absolute_mode || gc.absolute_override) {
    1314:	80 91 41 21 	lds	r24, 0x2141
    1318:	88 23       	and	r24, r24
    131a:	21 f4       	brne	.+8      	; 0x1324 <gc_execute_block+0x426>
    131c:	80 91 44 21 	lds	r24, 0x2144
    1320:	88 23       	and	r24, r24
    1322:	69 f0       	breq	.+26     	; 0x133e <gc_execute_block+0x440>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    1324:	e0 2f       	mov	r30, r16
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	ee 0f       	add	r30, r30
    132a:	ff 1f       	adc	r31, r31
    132c:	ee 0f       	add	r30, r30
    132e:	ff 1f       	adc	r31, r31
    1330:	ee 52       	subi	r30, 0x2E	; 46
    1332:	f0 4e       	sbci	r31, 0xE0	; 224
    1334:	22 af       	std	Z+58, r18	; 0x3a
    1336:	33 af       	std	Z+59, r19	; 0x3b
    1338:	44 af       	std	Z+60, r20	; 0x3c
    133a:	55 af       	std	Z+61, r21	; 0x3d
    133c:	1e c0       	rjmp	.+60     	; 0x137a <gc_execute_block+0x47c>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    133e:	10 e0       	ldi	r17, 0x00	; 0
    1340:	00 0f       	add	r16, r16
    1342:	11 1f       	adc	r17, r17
    1344:	00 0f       	add	r16, r16
    1346:	11 1f       	adc	r17, r17
    1348:	0e 52       	subi	r16, 0x2E	; 46
    134a:	10 4e       	sbci	r17, 0xE0	; 224
    134c:	f8 01       	movw	r30, r16
    134e:	62 ad       	ldd	r22, Z+58	; 0x3a
    1350:	73 ad       	ldd	r23, Z+59	; 0x3b
    1352:	84 ad       	ldd	r24, Z+60	; 0x3c
    1354:	95 ad       	ldd	r25, Z+61	; 0x3d
    1356:	0e 94 cc 38 	call	0x7198	; 0x7198 <__addsf3>
    135a:	d8 01       	movw	r26, r16
    135c:	da 96       	adiw	r26, 0x3a	; 58
    135e:	6d 93       	st	X+, r22
    1360:	7d 93       	st	X+, r23
    1362:	8d 93       	st	X+, r24
    1364:	9c 93       	st	X, r25
    1366:	dd 97       	sbiw	r26, 0x3d	; 61
    1368:	08 c0       	rjmp	.+16     	; 0x137a <gc_execute_block+0x47c>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    136a:	4e 01       	movw	r8, r28
    136c:	08 94       	sec
    136e:	81 1c       	adc	r8, r1
    1370:	91 1c       	adc	r9, r1
			case 'X': case 'Y': case 'Z': {
				if (gc.set_origin_mode) {
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
					gc.target[gc.letter - 'X'] = gc.position[gc.letter - 'X'];
//					memcpy(gc.target, gc.position, sizeof(gc.target));	// target = position
					gc.next_action = NEXT_ACTION_SET_COORDINATES;
    1372:	14 e0       	ldi	r17, 0x04	; 4
    1374:	61 2e       	mov	r6, r17
				gc.dwell_time = gc.value; 			// dwell time in seconds
				break;
			}
			case 'R': {
				gc.radius = gc.unit_converted_value; 
				gc.radius_mode = TRUE; 
    1376:	77 24       	eor	r7, r7
    1378:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    137a:	83 e3       	ldi	r24, 0x33	; 51
    137c:	91 e2       	ldi	r25, 0x21	; 33
    137e:	64 e3       	ldi	r22, 0x34	; 52
    1380:	71 e2       	ldi	r23, 0x21	; 33
    1382:	48 e3       	ldi	r20, 0x38	; 56
    1384:	51 e2       	ldi	r21, 0x21	; 33
    1386:	95 01       	movw	r18, r10
    1388:	84 01       	movw	r16, r8
    138a:	0e 94 ca 06 	call	0xd94	; 0xd94 <_gc_next_statement>
    138e:	89 2b       	or	r24, r25
    1390:	09 f0       	breq	.+2      	; 0x1394 <gc_execute_block+0x496>
    1392:	1f cf       	rjmp	.-450    	; 0x11d2 <gc_execute_block+0x2d4>
			}
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    1394:	80 91 32 21 	lds	r24, 0x2132
    1398:	88 23       	and	r24, r24
    139a:	09 f0       	breq	.+2      	; 0x139e <gc_execute_block+0x4a0>
    139c:	ca c2       	rjmp	.+1428   	; 0x1932 <gc_execute_block+0xa34>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    139e:	80 91 85 21 	lds	r24, 0x2185
    13a2:	88 23       	and	r24, r24
    13a4:	71 f0       	breq	.+28     	; 0x13c2 <gc_execute_block+0x4c4>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    13a6:	40 91 86 21 	lds	r20, 0x2186
    13aa:	50 91 87 21 	lds	r21, 0x2187
    13ae:	66 27       	eor	r22, r22
    13b0:	57 fd       	sbrc	r21, 7
    13b2:	60 95       	com	r22
    13b4:	76 2f       	mov	r23, r22
    13b6:	99 27       	eor	r25, r25
    13b8:	87 fd       	sbrc	r24, 7
    13ba:	90 95       	com	r25
    13bc:	0e 94 89 1b 	call	0x3712	; 0x3712 <spindle_run>
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <gc_execute_block+0x4c8>
	} else {
		spindle_stop();
    13c2:	0e 94 99 1b 	call	0x3732	; 0x3732 <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    13c6:	80 91 3c 21 	lds	r24, 0x213C
    13ca:	82 30       	cpi	r24, 0x02	; 2
    13cc:	51 f1       	breq	.+84     	; 0x1422 <gc_execute_block+0x524>
    13ce:	83 30       	cpi	r24, 0x03	; 3
    13d0:	20 f4       	brcc	.+8      	; 0x13da <gc_execute_block+0x4dc>
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <gc_execute_block+0x4da>
    13d6:	9e c2       	rjmp	.+1340   	; 0x1914 <gc_execute_block+0xa16>
    13d8:	2f c0       	rjmp	.+94     	; 0x1438 <gc_execute_block+0x53a>
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	21 f0       	breq	.+8      	; 0x13e6 <gc_execute_block+0x4e8>
    13de:	84 30       	cpi	r24, 0x04	; 4
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <gc_execute_block+0x4e6>
    13e2:	98 c2       	rjmp	.+1328   	; 0x1914 <gc_execute_block+0xa16>
    13e4:	03 c0       	rjmp	.+6      	; 0x13ec <gc_execute_block+0x4ee>
		case NEXT_ACTION_NONE: {				// nothing to do here
			break;
		}

		case NEXT_ACTION_GO_HOME: { 
			gc.status = mc_home(); 
    13e6:	0e 94 8e 12 	call	0x251c	; 0x251c <mc_home>
    13ea:	92 c2       	rjmp	.+1316   	; 0x1910 <gc_execute_block+0xa12>
			break;
		}

		case NEXT_ACTION_SET_COORDINATES: { 
			gc.status = mc_set_position(gc.position[X], gc.position[Y], gc.position[Z]); 
    13ec:	60 91 60 21 	lds	r22, 0x2160
    13f0:	70 91 61 21 	lds	r23, 0x2161
    13f4:	80 91 62 21 	lds	r24, 0x2162
    13f8:	90 91 63 21 	lds	r25, 0x2163
    13fc:	20 91 64 21 	lds	r18, 0x2164
    1400:	30 91 65 21 	lds	r19, 0x2165
    1404:	40 91 66 21 	lds	r20, 0x2166
    1408:	50 91 67 21 	lds	r21, 0x2167
    140c:	e0 90 68 21 	lds	r14, 0x2168
    1410:	f0 90 69 21 	lds	r15, 0x2169
    1414:	00 91 6a 21 	lds	r16, 0x216A
    1418:	10 91 6b 21 	lds	r17, 0x216B
    141c:	0e 94 2d 13 	call	0x265a	; 0x265a <mc_set_position>
    1420:	77 c2       	rjmp	.+1262   	; 0x1910 <gc_execute_block+0xa12>
			break;
		}

		case NEXT_ACTION_DWELL: {
			gc.status = mc_dwell(gc.dwell_time); 
    1422:	60 91 48 21 	lds	r22, 0x2148
    1426:	70 91 49 21 	lds	r23, 0x2149
    142a:	80 91 4a 21 	lds	r24, 0x214A
    142e:	90 91 4b 21 	lds	r25, 0x214B
    1432:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <mc_dwell>
    1436:	6c c2       	rjmp	.+1240   	; 0x1910 <gc_execute_block+0xa12>
			break;
		}

		case NEXT_ACTION_MOTION: {
			switch (gc.motion_mode) {
    1438:	b0 91 3e 21 	lds	r27, 0x213E
    143c:	b8 8f       	std	Y+24, r27	; 0x18
    143e:	b2 30       	cpi	r27, 0x02	; 2
    1440:	20 f0       	brcs	.+8      	; 0x144a <gc_execute_block+0x54c>
    1442:	b4 30       	cpi	r27, 0x04	; 4
    1444:	08 f0       	brcs	.+2      	; 0x1448 <gc_execute_block+0x54a>
    1446:	66 c2       	rjmp	.+1228   	; 0x1914 <gc_execute_block+0xa16>
    1448:	31 c0       	rjmp	.+98     	; 0x14ac <gc_execute_block+0x5ae>
				case MOTION_MODE_CANCEL: {
					break;
				}

				case MOTION_MODE_RAPID_LINEAR: case MOTION_MODE_LINEAR: {
					gc.status = mc_line(gc.target[X], gc.target[Y], gc.target[Z],
    144a:	60 91 6c 21 	lds	r22, 0x216C
    144e:	70 91 6d 21 	lds	r23, 0x216D
    1452:	80 91 6e 21 	lds	r24, 0x216E
    1456:	90 91 6f 21 	lds	r25, 0x216F
    145a:	20 91 70 21 	lds	r18, 0x2170
    145e:	30 91 71 21 	lds	r19, 0x2171
    1462:	40 91 72 21 	lds	r20, 0x2172
    1466:	50 91 73 21 	lds	r21, 0x2173
    146a:	e0 90 74 21 	lds	r14, 0x2174
    146e:	f0 90 75 21 	lds	r15, 0x2175
    1472:	00 91 76 21 	lds	r16, 0x2176
    1476:	10 91 77 21 	lds	r17, 0x2177
    147a:	80 90 3f 21 	lds	r8, 0x213F
    147e:	88 20       	and	r8, r8
    1480:	49 f0       	breq	.+18     	; 0x1494 <gc_execute_block+0x596>
    1482:	a0 90 5c 21 	lds	r10, 0x215C
    1486:	b0 90 5d 21 	lds	r11, 0x215D
    148a:	c0 90 5e 21 	lds	r12, 0x215E
    148e:	d0 90 5f 21 	lds	r13, 0x215F
    1492:	08 c0       	rjmp	.+16     	; 0x14a4 <gc_execute_block+0x5a6>
    1494:	a0 90 50 21 	lds	r10, 0x2150
    1498:	b0 90 51 21 	lds	r11, 0x2151
    149c:	c0 90 52 21 	lds	r12, 0x2152
    14a0:	d0 90 53 21 	lds	r13, 0x2153
    14a4:	99 24       	eor	r9, r9
    14a6:	0e 94 8b 13 	call	0x2716	; 0x2716 <mc_line>
    14aa:	32 c2       	rjmp	.+1124   	; 0x1910 <gc_execute_block+0xa12>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    14ac:	80 91 42 21 	lds	r24, 0x2142
    14b0:	88 23       	and	r24, r24
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <gc_execute_block+0x5b8>
    14b4:	ec c0       	rjmp	.+472    	; 0x168e <gc_execute_block+0x790>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    14b6:	e0 91 45 21 	lds	r30, 0x2145
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	ee 0f       	add	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	ee 0f       	add	r30, r30
    14c2:	ff 1f       	adc	r31, r31
    14c4:	ee 5c       	subi	r30, 0xCE	; 206
    14c6:	fe 4d       	sbci	r31, 0xDE	; 222
    14c8:	62 ad       	ldd	r22, Z+58	; 0x3a
    14ca:	73 ad       	ldd	r23, Z+59	; 0x3b
    14cc:	84 ad       	ldd	r24, Z+60	; 0x3c
    14ce:	95 ad       	ldd	r25, Z+61	; 0x3d
    14d0:	26 a5       	ldd	r18, Z+46	; 0x2e
    14d2:	37 a5       	ldd	r19, Z+47	; 0x2f
    14d4:	40 a9       	ldd	r20, Z+48	; 0x30
    14d6:	51 a9       	ldd	r21, Z+49	; 0x31
    14d8:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
    14dc:	6f 83       	std	Y+7, r22	; 0x07
    14de:	78 87       	std	Y+8, r23	; 0x08
    14e0:	89 87       	std	Y+9, r24	; 0x09
    14e2:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    14e4:	e0 91 46 21 	lds	r30, 0x2146
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	ee 0f       	add	r30, r30
    14ec:	ff 1f       	adc	r31, r31
    14ee:	ee 0f       	add	r30, r30
    14f0:	ff 1f       	adc	r31, r31
    14f2:	ee 5c       	subi	r30, 0xCE	; 206
    14f4:	fe 4d       	sbci	r31, 0xDE	; 222
    14f6:	62 ad       	ldd	r22, Z+58	; 0x3a
    14f8:	73 ad       	ldd	r23, Z+59	; 0x3b
    14fa:	84 ad       	ldd	r24, Z+60	; 0x3c
    14fc:	95 ad       	ldd	r25, Z+61	; 0x3d
    14fe:	26 a5       	ldd	r18, Z+46	; 0x2e
    1500:	37 a5       	ldd	r19, Z+47	; 0x2f
    1502:	40 a9       	ldd	r20, Z+48	; 0x30
    1504:	51 a9       	ldd	r21, Z+49	; 0x31
    1506:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
    150a:	1b 01       	movw	r2, r22
    150c:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    150e:	10 92 78 21 	sts	0x2178, r1
    1512:	10 92 79 21 	sts	0x2179, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    1516:	60 90 4c 21 	lds	r6, 0x214C
    151a:	70 90 4d 21 	lds	r7, 0x214D
    151e:	80 90 4e 21 	lds	r8, 0x214E
    1522:	90 90 4f 21 	lds	r9, 0x214F
    1526:	c4 01       	movw	r24, r8
    1528:	b3 01       	movw	r22, r6
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	40 e8       	ldi	r20, 0x80	; 128
    1530:	50 e4       	ldi	r21, 0x40	; 64
    1532:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    1536:	a4 01       	movw	r20, r8
    1538:	93 01       	movw	r18, r6
    153a:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    153e:	5b 01       	movw	r10, r22
    1540:	6c 01       	movw	r12, r24
    1542:	6f 81       	ldd	r22, Y+7	; 0x07
    1544:	78 85       	ldd	r23, Y+8	; 0x08
    1546:	89 85       	ldd	r24, Y+9	; 0x09
    1548:	9a 85       	ldd	r25, Y+10	; 0x0a
    154a:	9b 01       	movw	r18, r22
    154c:	ac 01       	movw	r20, r24
    154e:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    1552:	7b 01       	movw	r14, r22
    1554:	8c 01       	movw	r16, r24
    1556:	c2 01       	movw	r24, r4
    1558:	b1 01       	movw	r22, r2
    155a:	a2 01       	movw	r20, r4
    155c:	91 01       	movw	r18, r2
    155e:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    1562:	9b 01       	movw	r18, r22
    1564:	ac 01       	movw	r20, r24
    1566:	c8 01       	movw	r24, r16
    1568:	b7 01       	movw	r22, r14
    156a:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
    156e:	9b 01       	movw	r18, r22
    1570:	ac 01       	movw	r20, r24
    1572:	c6 01       	movw	r24, r12
    1574:	b5 01       	movw	r22, r10
    1576:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
    157a:	0e 94 9a 3c 	call	0x7934	; 0x7934 <sqrt>
    157e:	7b 01       	movw	r14, r22
    1580:	8c 01       	movw	r16, r24
    1582:	6f 81       	ldd	r22, Y+7	; 0x07
    1584:	78 85       	ldd	r23, Y+8	; 0x08
    1586:	89 85       	ldd	r24, Y+9	; 0x09
    1588:	9a 85       	ldd	r25, Y+10	; 0x0a
    158a:	a2 01       	movw	r20, r4
    158c:	91 01       	movw	r18, r2
    158e:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <hypot>
    1592:	9b 01       	movw	r18, r22
    1594:	ac 01       	movw	r20, r24
    1596:	17 fb       	bst	r17, 7
    1598:	10 95       	com	r17
    159a:	17 f9       	bld	r17, 7
    159c:	10 95       	com	r17
    159e:	c8 01       	movw	r24, r16
    15a0:	b7 01       	movw	r22, r14
    15a2:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    15a6:	7b 01       	movw	r14, r22
    15a8:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    15aa:	a8 01       	movw	r20, r16
    15ac:	97 01       	movw	r18, r14
    15ae:	0e 94 e2 3c 	call	0x79c4	; 0x79c4 <__unordsf2>
    15b2:	88 23       	and	r24, r24
    15b4:	21 f0       	breq	.+8      	; 0x15be <gc_execute_block+0x6c0>
		gc.status = TG_FLOATING_POINT_ERROR; 
    15b6:	81 e1       	ldi	r24, 0x11	; 17
    15b8:	80 93 32 21 	sts	0x2132, r24
    15bc:	65 c0       	rjmp	.+202    	; 0x1688 <gc_execute_block+0x78a>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    15be:	e8 8d       	ldd	r30, Y+24	; 0x18
    15c0:	e3 30       	cpi	r30, 0x03	; 3
    15c2:	21 f4       	brne	.+8      	; 0x15cc <gc_execute_block+0x6ce>
		h_x2_div_d = -h_x2_div_d;
    15c4:	17 fb       	bst	r17, 7
    15c6:	10 95       	com	r17
    15c8:	17 f9       	bld	r17, 7
    15ca:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    15cc:	c4 01       	movw	r24, r8
    15ce:	b3 01       	movw	r22, r6
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	0e 94 6b 39 	call	0x72d6	; 0x72d6 <__cmpsf2>
    15dc:	88 23       	and	r24, r24
    15de:	24 f4       	brge	.+8      	; 0x15e8 <gc_execute_block+0x6ea>
		h_x2_div_d = -h_x2_div_d; 
    15e0:	17 fb       	bst	r17, 7
    15e2:	10 95       	com	r17
    15e4:	17 f9       	bld	r17, 7
    15e6:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    15e8:	80 91 45 21 	lds	r24, 0x2145
    15ec:	c8 2e       	mov	r12, r24
    15ee:	dd 24       	eor	r13, r13
    15f0:	cc 0c       	add	r12, r12
    15f2:	dd 1c       	adc	r13, r13
    15f4:	cc 0c       	add	r12, r12
    15f6:	dd 1c       	adc	r13, r13
    15f8:	28 e7       	ldi	r18, 0x78	; 120
    15fa:	31 e2       	ldi	r19, 0x21	; 33
    15fc:	c2 0e       	add	r12, r18
    15fe:	d3 1e       	adc	r13, r19
    1600:	c2 01       	movw	r24, r4
    1602:	b1 01       	movw	r22, r2
    1604:	a8 01       	movw	r20, r16
    1606:	97 01       	movw	r18, r14
    1608:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    160c:	9b 01       	movw	r18, r22
    160e:	ac 01       	movw	r20, r24
    1610:	6f 81       	ldd	r22, Y+7	; 0x07
    1612:	78 85       	ldd	r23, Y+8	; 0x08
    1614:	89 85       	ldd	r24, Y+9	; 0x09
    1616:	9a 85       	ldd	r25, Y+10	; 0x0a
    1618:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	5f e3       	ldi	r21, 0x3F	; 63
    1624:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    1628:	d6 01       	movw	r26, r12
    162a:	6d 93       	st	X+, r22
    162c:	7d 93       	st	X+, r23
    162e:	8d 93       	st	X+, r24
    1630:	9c 93       	st	X, r25
    1632:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    1634:	80 91 46 21 	lds	r24, 0x2146
    1638:	c8 2e       	mov	r12, r24
    163a:	dd 24       	eor	r13, r13
    163c:	cc 0c       	add	r12, r12
    163e:	dd 1c       	adc	r13, r13
    1640:	cc 0c       	add	r12, r12
    1642:	dd 1c       	adc	r13, r13
    1644:	e8 e7       	ldi	r30, 0x78	; 120
    1646:	f1 e2       	ldi	r31, 0x21	; 33
    1648:	ce 0e       	add	r12, r30
    164a:	df 1e       	adc	r13, r31
    164c:	6f 81       	ldd	r22, Y+7	; 0x07
    164e:	78 85       	ldd	r23, Y+8	; 0x08
    1650:	89 85       	ldd	r24, Y+9	; 0x09
    1652:	9a 85       	ldd	r25, Y+10	; 0x0a
    1654:	a8 01       	movw	r20, r16
    1656:	97 01       	movw	r18, r14
    1658:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    165c:	9b 01       	movw	r18, r22
    165e:	ac 01       	movw	r20, r24
    1660:	c2 01       	movw	r24, r4
    1662:	b1 01       	movw	r22, r2
    1664:	0e 94 cc 38 	call	0x7198	; 0x7198 <__addsf3>
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e0       	ldi	r20, 0x00	; 0
    166e:	5f e3       	ldi	r21, 0x3F	; 63
    1670:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    1674:	d6 01       	movw	r26, r12
    1676:	6d 93       	st	X+, r22
    1678:	7d 93       	st	X+, r23
    167a:	8d 93       	st	X+, r24
    167c:	9c 93       	st	X, r25
    167e:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    1680:	80 91 32 21 	lds	r24, 0x2132
    1684:	88 23       	and	r24, r24
    1686:	19 f0       	breq	.+6      	; 0x168e <gc_execute_block+0x790>
			return (gc.status);
    1688:	80 91 32 21 	lds	r24, 0x2132
    168c:	41 c1       	rjmp	.+642    	; 0x1910 <gc_execute_block+0xa12>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    168e:	e0 91 45 21 	lds	r30, 0x2145
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	ee 0f       	add	r30, r30
    169a:	ff 1f       	adc	r31, r31
    169c:	e8 58       	subi	r30, 0x88	; 136
    169e:	fe 4d       	sbci	r31, 0xDE	; 222
    16a0:	60 81       	ld	r22, Z
    16a2:	71 81       	ldd	r23, Z+1	; 0x01
    16a4:	82 81       	ldd	r24, Z+2	; 0x02
    16a6:	93 81       	ldd	r25, Z+3	; 0x03
    16a8:	90 58       	subi	r25, 0x80	; 128
    16aa:	e0 91 46 21 	lds	r30, 0x2146
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	ee 0f       	add	r30, r30
    16b2:	ff 1f       	adc	r31, r31
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	e8 58       	subi	r30, 0x88	; 136
    16ba:	fe 4d       	sbci	r31, 0xDE	; 222
    16bc:	20 81       	ld	r18, Z
    16be:	31 81       	ldd	r19, Z+1	; 0x01
    16c0:	42 81       	ldd	r20, Z+2	; 0x02
    16c2:	53 81       	ldd	r21, Z+3	; 0x03
    16c4:	50 58       	subi	r21, 0x80	; 128
    16c6:	0e 94 40 07 	call	0xe80	; 0xe80 <theta>
    16ca:	6f 87       	std	Y+15, r22	; 0x0f
    16cc:	78 8b       	std	Y+16, r23	; 0x10
    16ce:	89 8b       	std	Y+17, r24	; 0x11
    16d0:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    16d2:	9b 01       	movw	r18, r22
    16d4:	ac 01       	movw	r20, r24
    16d6:	0e 94 e2 3c 	call	0x79c4	; 0x79c4 <__unordsf2>
    16da:	88 23       	and	r24, r24
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <gc_execute_block+0x7e2>
    16de:	54 c0       	rjmp	.+168    	; 0x1788 <gc_execute_block+0x88a>
		gc.status = TG_ARC_SPECIFICATION_ERROR;
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    16e0:	e0 91 45 21 	lds	r30, 0x2145
    16e4:	0e 2f       	mov	r16, r30
    16e6:	10 e0       	ldi	r17, 0x00	; 0
    16e8:	e0 91 46 21 	lds	r30, 0x2146
    16ec:	ce 2e       	mov	r12, r30
    16ee:	dd 24       	eor	r13, r13
    16f0:	00 0f       	add	r16, r16
    16f2:	11 1f       	adc	r17, r17
    16f4:	00 0f       	add	r16, r16
    16f6:	11 1f       	adc	r17, r17
    16f8:	0e 5c       	subi	r16, 0xCE	; 206
    16fa:	1e 4d       	sbci	r17, 0xDE	; 222
    16fc:	f8 01       	movw	r30, r16
    16fe:	ea 5b       	subi	r30, 0xBA	; 186
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	d8 01       	movw	r26, r16
    1704:	da 96       	adiw	r26, 0x3a	; 58
    1706:	6d 91       	ld	r22, X+
    1708:	7d 91       	ld	r23, X+
    170a:	8d 91       	ld	r24, X+
    170c:	9c 91       	ld	r25, X
    170e:	dd 97       	sbiw	r26, 0x3d	; 61
    1710:	20 81       	ld	r18, Z
    1712:	31 81       	ldd	r19, Z+1	; 0x01
    1714:	42 81       	ldd	r20, Z+2	; 0x02
    1716:	53 81       	ldd	r21, Z+3	; 0x03
    1718:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
    171c:	f8 01       	movw	r30, r16
    171e:	26 a5       	ldd	r18, Z+46	; 0x2e
    1720:	37 a5       	ldd	r19, Z+47	; 0x2f
    1722:	40 a9       	ldd	r20, Z+48	; 0x30
    1724:	51 a9       	ldd	r21, Z+49	; 0x31
    1726:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
    172a:	7b 01       	movw	r14, r22
    172c:	8c 01       	movw	r16, r24
    172e:	cc 0c       	add	r12, r12
    1730:	dd 1c       	adc	r13, r13
    1732:	cc 0c       	add	r12, r12
    1734:	dd 1c       	adc	r13, r13
    1736:	22 e3       	ldi	r18, 0x32	; 50
    1738:	31 e2       	ldi	r19, 0x21	; 33
    173a:	c2 0e       	add	r12, r18
    173c:	d3 1e       	adc	r13, r19
    173e:	f6 01       	movw	r30, r12
    1740:	ea 5b       	subi	r30, 0xBA	; 186
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	d6 01       	movw	r26, r12
    1746:	da 96       	adiw	r26, 0x3a	; 58
    1748:	6d 91       	ld	r22, X+
    174a:	7d 91       	ld	r23, X+
    174c:	8d 91       	ld	r24, X+
    174e:	9c 91       	ld	r25, X
    1750:	dd 97       	sbiw	r26, 0x3d	; 61
    1752:	20 81       	ld	r18, Z
    1754:	31 81       	ldd	r19, Z+1	; 0x01
    1756:	42 81       	ldd	r20, Z+2	; 0x02
    1758:	53 81       	ldd	r21, Z+3	; 0x03
    175a:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
    175e:	f6 01       	movw	r30, r12
    1760:	26 a5       	ldd	r18, Z+46	; 0x2e
    1762:	37 a5       	ldd	r19, Z+47	; 0x2f
    1764:	40 a9       	ldd	r20, Z+48	; 0x30
    1766:	51 a9       	ldd	r21, Z+49	; 0x31
    1768:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
    176c:	9b 01       	movw	r18, r22
    176e:	ac 01       	movw	r20, r24
    1770:	c8 01       	movw	r24, r16
    1772:	b7 01       	movw	r22, r14
    1774:	0e 94 40 07 	call	0xe80	; 0xe80 <theta>
    1778:	7b 01       	movw	r14, r22
    177a:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    177c:	a8 01       	movw	r20, r16
    177e:	97 01       	movw	r18, r14
    1780:	0e 94 e2 3c 	call	0x79c4	; 0x79c4 <__unordsf2>
    1784:	88 23       	and	r24, r24
    1786:	19 f0       	breq	.+6      	; 0x178e <gc_execute_block+0x890>
		gc.status = TG_ARC_SPECIFICATION_ERROR; 
    1788:	83 e1       	ldi	r24, 0x13	; 19
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	c1 c0       	rjmp	.+386    	; 0x1910 <gc_execute_block+0xa12>
		return(gc.status);
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    178e:	c8 01       	movw	r24, r16
    1790:	b7 01       	movw	r22, r14
    1792:	2f 85       	ldd	r18, Y+15	; 0x0f
    1794:	38 89       	ldd	r19, Y+16	; 0x10
    1796:	49 89       	ldd	r20, Y+17	; 0x11
    1798:	5a 89       	ldd	r21, Y+18	; 0x12
    179a:	0e 94 6b 39 	call	0x72d6	; 0x72d6 <__cmpsf2>
    179e:	88 23       	and	r24, r24
    17a0:	54 f4       	brge	.+20     	; 0x17b6 <gc_execute_block+0x8b8>
		theta_end += 2*M_PI;
    17a2:	c8 01       	movw	r24, r16
    17a4:	b7 01       	movw	r22, r14
    17a6:	2b ed       	ldi	r18, 0xDB	; 219
    17a8:	3f e0       	ldi	r19, 0x0F	; 15
    17aa:	49 ec       	ldi	r20, 0xC9	; 201
    17ac:	50 e4       	ldi	r21, 0x40	; 64
    17ae:	0e 94 cc 38 	call	0x7198	; 0x7198 <__addsf3>
    17b2:	7b 01       	movw	r14, r22
    17b4:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    17b6:	c8 01       	movw	r24, r16
    17b8:	b7 01       	movw	r22, r14
    17ba:	2f 85       	ldd	r18, Y+15	; 0x0f
    17bc:	38 89       	ldd	r19, Y+16	; 0x10
    17be:	49 89       	ldd	r20, Y+17	; 0x11
    17c0:	5a 89       	ldd	r21, Y+18	; 0x12
    17c2:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
    17c6:	6b 87       	std	Y+11, r22	; 0x0b
    17c8:	7c 87       	std	Y+12, r23	; 0x0c
    17ca:	8d 87       	std	Y+13, r24	; 0x0d
    17cc:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    17ce:	80 91 3e 21 	lds	r24, 0x213E
    17d2:	83 30       	cpi	r24, 0x03	; 3
    17d4:	71 f4       	brne	.+28     	; 0x17f2 <gc_execute_block+0x8f4>
		angular_travel = angular_travel - 2*M_PI;
    17d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17da:	8d 85       	ldd	r24, Y+13	; 0x0d
    17dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17de:	2b ed       	ldi	r18, 0xDB	; 219
    17e0:	3f e0       	ldi	r19, 0x0F	; 15
    17e2:	49 ec       	ldi	r20, 0xC9	; 201
    17e4:	50 e4       	ldi	r21, 0x40	; 64
    17e6:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
    17ea:	6b 87       	std	Y+11, r22	; 0x0b
    17ec:	7c 87       	std	Y+12, r23	; 0x0c
    17ee:	8d 87       	std	Y+13, r24	; 0x0d
    17f0:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    17f2:	80 91 45 21 	lds	r24, 0x2145
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	2d 83       	std	Y+5, r18	; 0x05
    17fc:	3e 83       	std	Y+6, r19	; 0x06
    17fe:	f9 01       	movw	r30, r18
    1800:	ee 0f       	add	r30, r30
    1802:	ff 1f       	adc	r31, r31
    1804:	ee 0f       	add	r30, r30
    1806:	ff 1f       	adc	r31, r31
    1808:	e8 58       	subi	r30, 0x88	; 136
    180a:	fe 4d       	sbci	r31, 0xDE	; 222
    180c:	e0 80       	ld	r14, Z
    180e:	f1 80       	ldd	r15, Z+1	; 0x01
    1810:	02 81       	ldd	r16, Z+2	; 0x02
    1812:	13 81       	ldd	r17, Z+3	; 0x03
    1814:	80 91 46 21 	lds	r24, 0x2146
    1818:	a8 2f       	mov	r26, r24
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	ab 83       	std	Y+3, r26	; 0x03
    181e:	bc 83       	std	Y+4, r27	; 0x04
    1820:	fd 01       	movw	r30, r26
    1822:	ee 0f       	add	r30, r30
    1824:	ff 1f       	adc	r31, r31
    1826:	ee 0f       	add	r30, r30
    1828:	ff 1f       	adc	r31, r31
    182a:	e8 58       	subi	r30, 0x88	; 136
    182c:	fe 4d       	sbci	r31, 0xDE	; 222
    182e:	20 81       	ld	r18, Z
    1830:	31 81       	ldd	r19, Z+1	; 0x01
    1832:	42 81       	ldd	r20, Z+2	; 0x02
    1834:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    1836:	80 91 47 21 	lds	r24, 0x2147
    183a:	28 2e       	mov	r2, r24
    183c:	33 24       	eor	r3, r3
    183e:	f1 01       	movw	r30, r2
    1840:	ee 0f       	add	r30, r30
    1842:	ff 1f       	adc	r31, r31
    1844:	ee 0f       	add	r30, r30
    1846:	ff 1f       	adc	r31, r31
    1848:	ee 5c       	subi	r30, 0xCE	; 206
    184a:	fe 4d       	sbci	r31, 0xDE	; 222
    184c:	82 ad       	ldd	r24, Z+58	; 0x3a
    184e:	93 ad       	ldd	r25, Z+59	; 0x3b
    1850:	a4 ad       	ldd	r26, Z+60	; 0x3c
    1852:	b5 ad       	ldd	r27, Z+61	; 0x3d
    1854:	8c 8b       	std	Y+20, r24	; 0x14
    1856:	9d 8b       	std	Y+21, r25	; 0x15
    1858:	ae 8b       	std	Y+22, r26	; 0x16
    185a:	bf 8b       	std	Y+23, r27	; 0x17
    185c:	a6 a4       	ldd	r10, Z+46	; 0x2e
    185e:	b7 a4       	ldd	r11, Z+47	; 0x2f
    1860:	c0 a8       	ldd	r12, Z+48	; 0x30
    1862:	d1 a8       	ldd	r13, Z+49	; 0x31

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    1864:	90 91 3f 21 	lds	r25, 0x213F
    1868:	9b 8b       	std	Y+19, r25	; 0x13
    186a:	99 23       	and	r25, r25
    186c:	49 f0       	breq	.+18     	; 0x1880 <gc_execute_block+0x982>
    186e:	40 90 5c 21 	lds	r4, 0x215C
    1872:	50 90 5d 21 	lds	r5, 0x215D
    1876:	60 90 5e 21 	lds	r6, 0x215E
    187a:	70 90 5f 21 	lds	r7, 0x215F
    187e:	08 c0       	rjmp	.+16     	; 0x1890 <gc_execute_block+0x992>
    1880:	40 90 50 21 	lds	r4, 0x2150
    1884:	50 90 51 21 	lds	r5, 0x2151
    1888:	60 90 52 21 	lds	r6, 0x2152
    188c:	70 90 53 21 	lds	r7, 0x2153
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    1890:	c8 01       	movw	r24, r16
    1892:	b7 01       	movw	r22, r14
    1894:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <hypot>
    1898:	7b 01       	movw	r14, r22
    189a:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    189c:	ad b7       	in	r26, 0x3d	; 61
    189e:	be b7       	in	r27, 0x3e	; 62
    18a0:	1a 97       	sbiw	r26, 0x0a	; 10
    18a2:	ad bf       	out	0x3d, r26	; 61
    18a4:	be bf       	out	0x3e, r27	; 62
    18a6:	8d b6       	in	r8, 0x3d	; 61
    18a8:	9e b6       	in	r9, 0x3e	; 62
    18aa:	08 94       	sec
    18ac:	81 1c       	adc	r8, r1
    18ae:	91 1c       	adc	r9, r1
    18b0:	6c 89       	ldd	r22, Y+20	; 0x14
    18b2:	7d 89       	ldd	r23, Y+21	; 0x15
    18b4:	8e 89       	ldd	r24, Y+22	; 0x16
    18b6:	9f 89       	ldd	r25, Y+23	; 0x17
    18b8:	a6 01       	movw	r20, r12
    18ba:	95 01       	movw	r18, r10
    18bc:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
    18c0:	5b 01       	movw	r10, r22
    18c2:	6c 01       	movw	r12, r24
    18c4:	2b 81       	ldd	r18, Y+3	; 0x03
    18c6:	3c 81       	ldd	r19, Y+4	; 0x04
    18c8:	f4 01       	movw	r30, r8
    18ca:	20 83       	st	Z, r18
    18cc:	31 83       	std	Z+1, r19	; 0x01
    18ce:	22 82       	std	Z+2, r2	; 0x02
    18d0:	33 82       	std	Z+3, r3	; 0x03
    18d2:	d4 01       	movw	r26, r8
    18d4:	14 96       	adiw	r26, 0x04	; 4
    18d6:	4d 92       	st	X+, r4
    18d8:	5d 92       	st	X+, r5
    18da:	6d 92       	st	X+, r6
    18dc:	7c 92       	st	X, r7
    18de:	17 97       	sbiw	r26, 0x07	; 7
    18e0:	eb 89       	ldd	r30, Y+19	; 0x13
    18e2:	18 96       	adiw	r26, 0x08	; 8
    18e4:	ec 93       	st	X, r30
    18e6:	18 97       	sbiw	r26, 0x08	; 8
    18e8:	19 96       	adiw	r26, 0x09	; 9
    18ea:	1c 92       	st	X, r1
    18ec:	6f 85       	ldd	r22, Y+15	; 0x0f
    18ee:	78 89       	ldd	r23, Y+16	; 0x10
    18f0:	89 89       	ldd	r24, Y+17	; 0x11
    18f2:	9a 89       	ldd	r25, Y+18	; 0x12
    18f4:	2b 85       	ldd	r18, Y+11	; 0x0b
    18f6:	3c 85       	ldd	r19, Y+12	; 0x0c
    18f8:	4d 85       	ldd	r20, Y+13	; 0x0d
    18fa:	5e 85       	ldd	r21, Y+14	; 0x0e
    18fc:	8d 80       	ldd	r8, Y+5	; 0x05
    18fe:	9e 80       	ldd	r9, Y+6	; 0x06
    1900:	0e 94 d7 15 	call	0x2bae	; 0x2bae <mc_arc>
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//					   (gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//						gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    1904:	2d b7       	in	r18, 0x3d	; 61
    1906:	3e b7       	in	r19, 0x3e	; 62
    1908:	26 5f       	subi	r18, 0xF6	; 246
    190a:	3f 4f       	sbci	r19, 0xFF	; 255
    190c:	2d bf       	out	0x3d, r18	; 61
    190e:	3e bf       	out	0x3e, r19	; 62
										gc.inverse_feed_rate_mode); 
					break;
				}

				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: {
					gc.status = _gc_compute_arc(); 
    1910:	80 93 32 21 	sts	0x2132, r24
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    1914:	80 91 32 21 	lds	r24, 0x2132
    1918:	88 23       	and	r24, r24
    191a:	11 f0       	breq	.+4      	; 0x1920 <gc_execute_block+0xa22>
    191c:	82 30       	cpi	r24, 0x02	; 2
    191e:	49 f4       	brne	.+18     	; 0x1932 <gc_execute_block+0xa34>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    1920:	e0 e6       	ldi	r30, 0x60	; 96
    1922:	f1 e2       	ldi	r31, 0x21	; 33
    1924:	df 01       	movw	r26, r30
    1926:	1c 96       	adiw	r26, 0x0c	; 12
    1928:	9c e0       	ldi	r25, 0x0C	; 12
    192a:	0d 90       	ld	r0, X+
    192c:	01 92       	st	Z+, r0
    192e:	91 50       	subi	r25, 0x01	; 1
    1930:	e1 f7       	brne	.-8      	; 0x192a <gc_execute_block+0xa2c>
	};
	return(gc.status);
}
    1932:	68 96       	adiw	r28, 0x18	; 24
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	1f 91       	pop	r17
    193e:	0f 91       	pop	r16
    1940:	ff 90       	pop	r15
    1942:	ef 90       	pop	r14
    1944:	df 90       	pop	r13
    1946:	cf 90       	pop	r12
    1948:	bf 90       	pop	r11
    194a:	af 90       	pop	r10
    194c:	9f 90       	pop	r9
    194e:	8f 90       	pop	r8
    1950:	7f 90       	pop	r7
    1952:	6f 90       	pop	r6
    1954:	5f 90       	pop	r5
    1956:	4f 90       	pop	r4
    1958:	3f 90       	pop	r3
    195a:	2f 90       	pop	r2
    195c:	08 95       	ret

0000195e <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    195e:	df 92       	push	r13
    1960:	ef 92       	push	r14
    1962:	ff 92       	push	r15
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	7c 01       	movw	r14, r24
	char *comment=0;	// comment pointer - first char past opening paren
	uint8_t i=0; 		// index for incoming characters
	uint8_t j=0;		// index for normalized characters

	// discard deleted block
	if (block[0] == '/') {
    196e:	fc 01       	movw	r30, r24
    1970:	80 81       	ld	r24, Z
    1972:	8f 32       	cpi	r24, 0x2F	; 47
    1974:	19 f0       	breq	.+6      	; 0x197c <gc_gcode_parser+0x1e>
    1976:	00 e0       	ldi	r16, 0x00	; 0
    1978:	dd 24       	eor	r13, r13
    197a:	2a c0       	rjmp	.+84     	; 0x19d0 <gc_gcode_parser+0x72>
		block[0] = 0;
    197c:	f7 01       	movw	r30, r14
    197e:	10 82       	st	Z, r1
    1980:	6c c0       	rjmp	.+216    	; 0x1a5a <gc_gcode_parser+0xfc>
		return;
	}
	// normalize the comamnd block & mark the comment(if any)
	while ((c = toupper(block[i++])) != 0) {// NUL character
    1982:	d3 94       	inc	r13
		if ((isupper(c)) || (isdigit(c))) {	// capture common chars
    1984:	81 2f       	mov	r24, r17
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 da 3f 	call	0x7fb4	; 0x7fb4 <isupper>
    198c:	89 2b       	or	r24, r25
    198e:	d9 f4       	brne	.+54     	; 0x19c6 <gc_gcode_parser+0x68>
    1990:	81 2f       	mov	r24, r17
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	c0 97       	sbiw	r24, 0x30	; 48
    1996:	0a 97       	sbiw	r24, 0x0a	; 10
    1998:	b0 f0       	brcs	.+44     	; 0x19c6 <gc_gcode_parser+0x68>
		 	block[j++] = c; 
			continue;
		}
		if (c == '(') {						// detect & handle comments
    199a:	18 32       	cpi	r17, 0x28	; 40
    199c:	41 f4       	brne	.+16     	; 0x19ae <gc_gcode_parser+0x50>
			block[j] = 0;
    199e:	f7 01       	movw	r30, r14
    19a0:	e0 0f       	add	r30, r16
    19a2:	f1 1d       	adc	r31, r1
    19a4:	10 82       	st	Z, r1
			comment = &block[i]; 
    19a6:	e7 01       	movw	r28, r14
    19a8:	cd 0d       	add	r28, r13
    19aa:	d1 1d       	adc	r29, r1
    19ac:	1d c0       	rjmp	.+58     	; 0x19e8 <gc_gcode_parser+0x8a>
			break;
		}
		if (c <= ' ') continue;				// toss controls & whitespace
    19ae:	11 32       	cpi	r17, 0x21	; 33
    19b0:	78 f0       	brcs	.+30     	; 0x19d0 <gc_gcode_parser+0x72>
		if (c == 0x7F) continue;			// toss DELETE
    19b2:	1f 37       	cpi	r17, 0x7F	; 127
    19b4:	69 f0       	breq	.+26     	; 0x19d0 <gc_gcode_parser+0x72>
		if (strchr("!$%,;:?@^_~`\'\"", c))	// toss invalid punctuation
    19b6:	82 e2       	ldi	r24, 0x22	; 34
    19b8:	90 e2       	ldi	r25, 0x20	; 32
    19ba:	61 2f       	mov	r22, r17
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	0e 94 16 40 	call	0x802c	; 0x802c <strchr>
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	29 f4       	brne	.+10     	; 0x19d0 <gc_gcode_parser+0x72>
			continue;
		block[j++] = c;
    19c6:	f7 01       	movw	r30, r14
    19c8:	e0 0f       	add	r30, r16
    19ca:	f1 1d       	adc	r31, r1
    19cc:	10 83       	st	Z, r17
    19ce:	0f 5f       	subi	r16, 0xFF	; 255
	if (block[0] == '/') {
		block[0] = 0;
		return;
	}
	// normalize the comamnd block & mark the comment(if any)
	while ((c = toupper(block[i++])) != 0) {// NUL character
    19d0:	f7 01       	movw	r30, r14
    19d2:	ed 0d       	add	r30, r13
    19d4:	f1 1d       	adc	r31, r1
    19d6:	80 81       	ld	r24, Z
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	0e 94 eb 3f 	call	0x7fd6	; 0x7fd6 <toupper>
    19de:	18 2f       	mov	r17, r24
    19e0:	88 23       	and	r24, r24
    19e2:	79 f6       	brne	.-98     	; 0x1982 <gc_gcode_parser+0x24>
    19e4:	c0 e0       	ldi	r28, 0x00	; 0
    19e6:	d0 e0       	ldi	r29, 0x00	; 0
		if (c == 0x7F) continue;			// toss DELETE
		if (strchr("!$%,;:?@^_~`\'\"", c))	// toss invalid punctuation
			continue;
		block[j++] = c;
	}
	block[j] = 0;							// nul terminate the command
    19e8:	f7 01       	movw	r30, r14
    19ea:	e0 0f       	add	r30, r16
    19ec:	f1 1d       	adc	r31, r1
    19ee:	10 82       	st	Z, r1
	if (comment) {
    19f0:	20 97       	sbiw	r28, 0x00	; 0
    19f2:	99 f1       	breq	.+102    	; 0x1a5a <gc_gcode_parser+0xfc>
		if ((toupper(comment[0]) == 'M') && 
    19f4:	88 81       	ld	r24, Y
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	0e 94 eb 3f 	call	0x7fd6	; 0x7fd6 <toupper>
    19fc:	8d 34       	cpi	r24, 0x4D	; 77
    19fe:	91 05       	cpc	r25, r1
    1a00:	61 f5       	brne	.+88     	; 0x1a5a <gc_gcode_parser+0xfc>
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 eb 3f 	call	0x7fd6	; 0x7fd6 <toupper>
    1a0a:	83 35       	cpi	r24, 0x53	; 83
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	29 f5       	brne	.+74     	; 0x1a5a <gc_gcode_parser+0xfc>
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 eb 3f 	call	0x7fd6	; 0x7fd6 <toupper>
    1a18:	87 34       	cpi	r24, 0x47	; 71
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	f1 f4       	brne	.+60     	; 0x1a5a <gc_gcode_parser+0xfc>
    1a1e:	04 c0       	rjmp	.+8      	; 0x1a28 <gc_gcode_parser+0xca>
			(toupper(comment[1]) == 'S') &&
			(toupper(comment[2]) == 'G')) {
			i=0;
			while ((c = comment[i++]) != 0) {// remove trailing parenthesis
				if (c == ')') {
    1a20:	99 32       	cpi	r25, 0x29	; 41
    1a22:	19 f4       	brne	.+6      	; 0x1a2a <gc_gcode_parser+0xcc>
					comment[--i] = 0;
    1a24:	10 82       	st	Z, r1
    1a26:	08 c0       	rjmp	.+16     	; 0x1a38 <gc_gcode_parser+0xda>
    1a28:	80 e0       	ldi	r24, 0x00	; 0
	if (comment) {
		if ((toupper(comment[0]) == 'M') && 
			(toupper(comment[1]) == 'S') &&
			(toupper(comment[2]) == 'G')) {
			i=0;
			while ((c = comment[i++]) != 0) {// remove trailing parenthesis
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e8 0f       	add	r30, r24
    1a2e:	f1 1d       	adc	r31, r1
    1a30:	90 81       	ld	r25, Z
    1a32:	8f 5f       	subi	r24, 0xFF	; 255
    1a34:	99 23       	and	r25, r25
    1a36:	a1 f7       	brne	.-24     	; 0x1a20 <gc_gcode_parser+0xc2>
				if (c == ')') {
					comment[--i] = 0;
					break;
				}
			}
			printf_P(PSTR("%s\n"), (comment+3));
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <gc_gcode_parser+0xdc>
    1a3a:	0f 92       	push	r0
    1a3c:	8b e3       	ldi	r24, 0x3B	; 59
    1a3e:	92 e0       	ldi	r25, 0x02	; 2
    1a40:	ed b7       	in	r30, 0x3d	; 61
    1a42:	fe b7       	in	r31, 0x3e	; 62
    1a44:	81 83       	std	Z+1, r24	; 0x01
    1a46:	92 83       	std	Z+2, r25	; 0x02
    1a48:	23 96       	adiw	r28, 0x03	; 3
    1a4a:	c3 83       	std	Z+3, r28	; 0x03
    1a4c:	d4 83       	std	Z+4, r29	; 0x04
    1a4e:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
 */

uint8_t gc_gcode_parser(char *block)
{
	_gc_normalize_gcode_block(block);
	if (block[0] == 0) { 					// ignore comments (stripped)
    1a5a:	f7 01       	movw	r30, r14
    1a5c:	80 81       	ld	r24, Z
    1a5e:	88 23       	and	r24, r24
    1a60:	71 f0       	breq	.+28     	; 0x1a7e <gc_gcode_parser+0x120>
		return(TG_OK);
	}
	if (block[0] == 'Q') {					// quit gcode mode
    1a62:	81 35       	cpi	r24, 0x51	; 81
    1a64:	11 f4       	brne	.+4      	; 0x1a6a <gc_gcode_parser+0x10c>
    1a66:	8b e0       	ldi	r24, 0x0B	; 11
    1a68:	0a c0       	rjmp	.+20     	; 0x1a7e <gc_gcode_parser+0x120>
		return(TG_QUIT);
	}
	gc.status = gc_execute_block(block);	// execute gcode block
    1a6a:	c7 01       	movw	r24, r14
    1a6c:	0e 94 7f 07 	call	0xefe	; 0xefe <gc_execute_block>
    1a70:	80 93 32 21 	sts	0x2132, r24
	tg_print_status(gc.status, block);
    1a74:	b7 01       	movw	r22, r14
    1a76:	0e 94 ce 22 	call	0x459c	; 0x459c <tg_print_status>
	return (gc.status);
    1a7a:	80 91 32 21 	lds	r24, 0x2132
}
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
    1a84:	0f 91       	pop	r16
    1a86:	ff 90       	pop	r15
    1a88:	ef 90       	pop	r14
    1a8a:	df 90       	pop	r13
    1a8c:	08 95       	ret

00001a8e <gc_send_to_parser>:
 *	Inject a block into parser taking gcode command processing state into account
 */

void gc_send_to_parser(char *block)
{
	gc_gcode_parser(block);
    1a8e:	0e 94 af 0c 	call	0x195e	; 0x195e <gc_gcode_parser>
	return;
}
    1a92:	08 95       	ret

00001a94 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    1a94:	cf 92       	push	r12
    1a96:	df 92       	push	r13
    1a98:	ef 92       	push	r14
    1a9a:	ff 92       	push	r15
    1a9c:	0f 93       	push	r16
    1a9e:	1f 93       	push	r17
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
    1aa4:	c1 e8       	ldi	r28, 0x81	; 129
    1aa6:	d2 e2       	ldi	r29, 0x22	; 34
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    1aa8:	68 81       	ld	r22, Y
    1aaa:	70 e0       	ldi	r23, 0x00	; 0
    1aac:	88 27       	eor	r24, r24
    1aae:	77 fd       	sbrc	r23, 7
    1ab0:	80 95       	com	r24
    1ab2:	98 2f       	mov	r25, r24
    1ab4:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    1ab8:	9b 01       	movw	r18, r22
    1aba:	ac 01       	movw	r20, r24
    1abc:	6f 81       	ldd	r22, Y+7	; 0x07
    1abe:	78 85       	ldd	r23, Y+8	; 0x08
    1ac0:	89 85       	ldd	r24, Y+9	; 0x09
    1ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac4:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    1ac8:	9b 01       	movw	r18, r22
    1aca:	ac 01       	movw	r20, r24
    1acc:	60 e0       	ldi	r22, 0x00	; 0
    1ace:	70 e0       	ldi	r23, 0x00	; 0
    1ad0:	84 eb       	ldi	r24, 0xB4	; 180
    1ad2:	93 e4       	ldi	r25, 0x43	; 67
    1ad4:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    1ad8:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ada:	3c 85       	ldd	r19, Y+12	; 0x0c
    1adc:	4d 85       	ldd	r20, Y+13	; 0x0d
    1ade:	5e 85       	ldd	r21, Y+14	; 0x0e
    1ae0:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    1ae4:	6b 8b       	std	Y+19, r22	; 0x13
    1ae6:	7c 8b       	std	Y+20, r23	; 0x14
    1ae8:	8d 8b       	std	Y+21, r24	; 0x15
    1aea:	9e 8b       	std	Y+22, r25	; 0x16
    1aec:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    1aee:	82 e2       	ldi	r24, 0x22	; 34
    1af0:	c1 3e       	cpi	r28, 0xE1	; 225
    1af2:	d8 07       	cpc	r29, r24
    1af4:	c9 f6       	brne	.-78     	; 0x1aa8 <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    1af6:	00 91 81 22 	lds	r16, 0x2281
    1afa:	10 e0       	ldi	r17, 0x00	; 0
    1afc:	b8 01       	movw	r22, r16
    1afe:	88 27       	eor	r24, r24
    1b00:	77 fd       	sbrc	r23, 7
    1b02:	80 95       	com	r24
    1b04:	98 2f       	mov	r25, r24
    1b06:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    1b0a:	9b 01       	movw	r18, r22
    1b0c:	ac 01       	movw	r20, r24
    1b0e:	60 91 88 22 	lds	r22, 0x2288
    1b12:	70 91 89 22 	lds	r23, 0x2289
    1b16:	80 91 8a 22 	lds	r24, 0x228A
    1b1a:	90 91 8b 22 	lds	r25, 0x228B
    1b1e:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    1b22:	9b 01       	movw	r18, r22
    1b24:	ac 01       	movw	r20, r24
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	84 eb       	ldi	r24, 0xB4	; 180
    1b2c:	93 e4       	ldi	r25, 0x43	; 67
    1b2e:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    1b32:	6b 01       	movw	r12, r22
    1b34:	7c 01       	movw	r14, r24
    1b36:	80 91 86 22 	lds	r24, 0x2286
    1b3a:	90 91 87 22 	lds	r25, 0x2287
    1b3e:	08 9f       	mul	r16, r24
    1b40:	b0 01       	movw	r22, r0
    1b42:	09 9f       	mul	r16, r25
    1b44:	70 0d       	add	r23, r0
    1b46:	18 9f       	mul	r17, r24
    1b48:	70 0d       	add	r23, r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	0e 94 0b 3a 	call	0x7416	; 0x7416 <__floatunsisf>
    1b54:	a7 01       	movw	r20, r14
    1b56:	96 01       	movw	r18, r12
    1b58:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    1b5c:	60 93 79 22 	sts	0x2279, r22
    1b60:	70 93 7a 22 	sts	0x227A, r23
    1b64:	80 93 7b 22 	sts	0x227B, r24
    1b68:	90 93 7c 22 	sts	0x227C, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    1b6c:	80 91 84 22 	lds	r24, 0x2284
    1b70:	90 91 85 22 	lds	r25, 0x2285
    1b74:	08 9f       	mul	r16, r24
    1b76:	b0 01       	movw	r22, r0
    1b78:	09 9f       	mul	r16, r25
    1b7a:	70 0d       	add	r23, r0
    1b7c:	18 9f       	mul	r17, r24
    1b7e:	70 0d       	add	r23, r0
    1b80:	11 24       	eor	r1, r1
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	0e 94 0b 3a 	call	0x7416	; 0x7416 <__floatunsisf>
    1b8a:	a7 01       	movw	r20, r14
    1b8c:	96 01       	movw	r18, r12
    1b8e:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    1b92:	60 93 7d 22 	sts	0x227D, r22
    1b96:	70 93 7e 22 	sts	0x227E, r23
    1b9a:	80 93 7f 22 	sts	0x227F, r24
    1b9e:	90 93 80 22 	sts	0x2280, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	ff 90       	pop	r15
    1bac:	ef 90       	pop	r14
    1bae:	df 90       	pop	r13
    1bb0:	cf 90       	pop	r12
    1bb2:	08 95       	ret

00001bb4 <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    1bb4:	e3 e7       	ldi	r30, 0x73	; 115
    1bb6:	f2 e2       	ldi	r31, 0x22	; 34
    1bb8:	84 e6       	ldi	r24, 0x64	; 100
    1bba:	80 93 73 22 	sts	0x2273, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    1bbe:	8d ec       	ldi	r24, 0xCD	; 205
    1bc0:	9c ec       	ldi	r25, 0xCC	; 204
    1bc2:	ac e4       	ldi	r26, 0x4C	; 76
    1bc4:	bd e3       	ldi	r27, 0x3D	; 61
    1bc6:	80 93 75 22 	sts	0x2275, r24
    1bca:	90 93 76 22 	sts	0x2276, r25
    1bce:	a0 93 77 22 	sts	0x2277, r26
    1bd2:	b0 93 78 22 	sts	0x2278, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    1bd6:	8c ed       	ldi	r24, 0xDC	; 220
    1bd8:	95 e0       	ldi	r25, 0x05	; 5
    1bda:	80 93 84 22 	sts	0x2284, r24
    1bde:	90 93 85 22 	sts	0x2285, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    1be2:	80 93 9c 22 	sts	0x229C, r24
    1be6:	90 93 9d 22 	sts	0x229D, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    1bea:	80 93 b4 22 	sts	0x22B4, r24
    1bee:	90 93 b5 22 	sts	0x22B5, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    1bf2:	80 93 cc 22 	sts	0x22CC, r24
    1bf6:	90 93 cd 22 	sts	0x22CD, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    1bfa:	80 93 86 22 	sts	0x2286, r24
    1bfe:	90 93 87 22 	sts	0x2287, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    1c02:	80 93 9e 22 	sts	0x229E, r24
    1c06:	90 93 9f 22 	sts	0x229F, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    1c0a:	80 93 b6 22 	sts	0x22B6, r24
    1c0e:	90 93 b7 22 	sts	0x22B7, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    1c12:	80 93 ce 22 	sts	0x22CE, r24
    1c16:	90 93 cf 22 	sts	0x22CF, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    1c1a:	86 e6       	ldi	r24, 0x66	; 102
    1c1c:	96 e6       	ldi	r25, 0x66	; 102
    1c1e:	a6 ee       	ldi	r26, 0xE6	; 230
    1c20:	bf e3       	ldi	r27, 0x3F	; 63
    1c22:	80 93 88 22 	sts	0x2288, r24
    1c26:	90 93 89 22 	sts	0x2289, r25
    1c2a:	a0 93 8a 22 	sts	0x228A, r26
    1c2e:	b0 93 8b 22 	sts	0x228B, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    1c32:	80 93 a0 22 	sts	0x22A0, r24
    1c36:	90 93 a1 22 	sts	0x22A1, r25
    1c3a:	a0 93 a2 22 	sts	0x22A2, r26
    1c3e:	b0 93 a3 22 	sts	0x22A3, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    1c42:	80 93 b8 22 	sts	0x22B8, r24
    1c46:	90 93 b9 22 	sts	0x22B9, r25
    1c4a:	a0 93 ba 22 	sts	0x22BA, r26
    1c4e:	b0 93 bb 22 	sts	0x22BB, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    1c52:	80 93 d0 22 	sts	0x22D0, r24
    1c56:	90 93 d1 22 	sts	0x22D1, r25
    1c5a:	a0 93 d2 22 	sts	0x22D2, r26
    1c5e:	b0 93 d3 22 	sts	0x22D3, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    1c62:	8c e5       	ldi	r24, 0x5C	; 92
    1c64:	9f e8       	ldi	r25, 0x8F	; 143
    1c66:	a2 ea       	ldi	r26, 0xA2	; 162
    1c68:	bf e3       	ldi	r27, 0x3F	; 63
    1c6a:	80 93 8c 22 	sts	0x228C, r24
    1c6e:	90 93 8d 22 	sts	0x228D, r25
    1c72:	a0 93 8e 22 	sts	0x228E, r26
    1c76:	b0 93 8f 22 	sts	0x228F, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    1c7a:	80 93 a4 22 	sts	0x22A4, r24
    1c7e:	90 93 a5 22 	sts	0x22A5, r25
    1c82:	a0 93 a6 22 	sts	0x22A6, r26
    1c86:	b0 93 a7 22 	sts	0x22A7, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    1c8a:	80 93 bc 22 	sts	0x22BC, r24
    1c8e:	90 93 bd 22 	sts	0x22BD, r25
    1c92:	a0 93 be 22 	sts	0x22BE, r26
    1c96:	b0 93 bf 22 	sts	0x22BF, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    1c9a:	80 93 d4 22 	sts	0x22D4, r24
    1c9e:	90 93 d5 22 	sts	0x22D5, r25
    1ca2:	a0 93 d6 22 	sts	0x22D6, r26
    1ca6:	b0 93 d7 22 	sts	0x22D7, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a8 ec       	ldi	r26, 0xC8	; 200
    1cb0:	b3 e4       	ldi	r27, 0x43	; 67
    1cb2:	80 93 90 22 	sts	0x2290, r24
    1cb6:	90 93 91 22 	sts	0x2291, r25
    1cba:	a0 93 92 22 	sts	0x2292, r26
    1cbe:	b0 93 93 22 	sts	0x2293, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    1cc2:	80 93 a8 22 	sts	0x22A8, r24
    1cc6:	90 93 a9 22 	sts	0x22A9, r25
    1cca:	a0 93 aa 22 	sts	0x22AA, r26
    1cce:	b0 93 ab 22 	sts	0x22AB, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	a6 e9       	ldi	r26, 0x96	; 150
    1cd8:	b3 e4       	ldi	r27, 0x43	; 67
    1cda:	80 93 c0 22 	sts	0x22C0, r24
    1cde:	90 93 c1 22 	sts	0x22C1, r25
    1ce2:	a0 93 c2 22 	sts	0x22C2, r26
    1ce6:	b0 93 c3 22 	sts	0x22C3, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	a0 e8       	ldi	r26, 0x80	; 128
    1cf0:	bf eb       	ldi	r27, 0xBF	; 191
    1cf2:	80 93 d8 22 	sts	0x22D8, r24
    1cf6:	90 93 d9 22 	sts	0x22D9, r25
    1cfa:	a0 93 da 22 	sts	0x22DA, r26
    1cfe:	b0 93 db 22 	sts	0x22DB, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    1d02:	88 e0       	ldi	r24, 0x08	; 8
    1d04:	80 93 81 22 	sts	0x2281, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    1d08:	80 93 99 22 	sts	0x2299, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    1d0c:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A].microstep = A_MICROSTEPS;
    1d0e:	80 93 c9 22 	sts	0x22C9, r24

	cfg.a[X].polarity = X_POLARITY;
    1d12:	10 92 83 22 	sts	0x2283, r1
	cfg.a[Y].polarity = Y_POLARITY;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	80 93 9b 22 	sts	0x229B, r24
	cfg.a[Z].polarity = Z_POLARITY;
    1d1c:	10 92 b3 22 	sts	0x22B3, r1
	cfg.a[A].polarity = A_POLARITY;
    1d20:	10 92 cb 22 	sts	0x22CB, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    1d24:	80 93 98 22 	sts	0x2298, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    1d28:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    1d2a:	80 93 c8 22 	sts	0x22C8, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    1d2e:	10 92 e0 22 	sts	0x22E0, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    1d32:	80 93 82 22 	sts	0x2282, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    1d36:	80 93 9a 22 	sts	0x229A, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    1d3a:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    1d3c:	80 93 ca 22 	sts	0x22CA, r24

	_cfg_computed();		// generate computed values from the above
    1d40:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_cfg_computed>
}
    1d44:	08 95       	ret

00001d46 <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    1d46:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <cfg_reset>
}
    1d4a:	08 95       	ret

00001d4c <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	63 e7       	ldi	r22, 0x73	; 115
    1d52:	72 e2       	ldi	r23, 0x22	; 34
    1d54:	4e e6       	ldi	r20, 0x6E	; 110
    1d56:	50 e0       	ldi	r21, 0x00	; 0
    1d58:	0e 94 cb 21 	call	0x4396	; 0x4396 <memcpy_to_eeprom_with_checksum>
}
    1d5c:	08 95       	ret

00001d5e <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0e 94 1d 21 	call	0x423a	; 0x423a <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    1d66:	84 36       	cpi	r24, 0x64	; 100
    1d68:	19 f0       	breq	.+6      	; 0x1d70 <cfg_read+0x12>
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	0d c0       	rjmp	.+26     	; 0x1d8a <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    1d70:	83 e7       	ldi	r24, 0x73	; 115
    1d72:	92 e2       	ldi	r25, 0x22	; 34
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	4e e6       	ldi	r20, 0x6E	; 110
    1d7a:	50 e0       	ldi	r21, 0x00	; 0
    1d7c:	0e 94 27 21 	call	0x424e	; 0x424e <memcpy_from_eeprom_with_checksum>
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	11 f0       	breq	.+4      	; 0x1d88 <cfg_read+0x2a>
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    1d8a:	c9 01       	movw	r24, r18
    1d8c:	08 95       	ret

00001d8e <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    1d8e:	ef 92       	push	r14
    1d90:	ff 92       	push	r15
    1d92:	0f 93       	push	r16
    1d94:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    1d96:	e8 2e       	mov	r14, r24
    1d98:	ff 24       	eor	r15, r15
    1d9a:	87 01       	movw	r16, r14
    1d9c:	00 0f       	add	r16, r16
    1d9e:	11 1f       	adc	r17, r17
    1da0:	f8 01       	movw	r30, r16
    1da2:	e9 5b       	subi	r30, 0xB9	; 185
    1da4:	fd 4f       	sbci	r31, 0xFD	; 253
    1da6:	25 91       	lpm	r18, Z+
    1da8:	34 91       	lpm	r19, Z+
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <_cfg_dump_axis+0x1e>
    1dac:	0f 92       	push	r0
    1dae:	83 ea       	ldi	r24, 0xA3	; 163
    1db0:	95 e0       	ldi	r25, 0x05	; 5
    1db2:	ad b7       	in	r26, 0x3d	; 61
    1db4:	be b7       	in	r27, 0x3e	; 62
    1db6:	11 96       	adiw	r26, 0x01	; 1
    1db8:	8d 93       	st	X+, r24
    1dba:	9c 93       	st	X, r25
    1dbc:	12 97       	sbiw	r26, 0x02	; 2
    1dbe:	13 96       	adiw	r26, 0x03	; 3
    1dc0:	2d 93       	st	X+, r18
    1dc2:	3c 93       	st	X, r19
    1dc4:	14 97       	sbiw	r26, 0x04	; 4
    1dc6:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    1dca:	8b e6       	ldi	r24, 0x6B	; 107
    1dcc:	95 e0       	ldi	r25, 0x05	; 5
    1dce:	ed b7       	in	r30, 0x3d	; 61
    1dd0:	fe b7       	in	r31, 0x3e	; 62
    1dd2:	81 83       	std	Z+1, r24	; 0x01
    1dd4:	92 83       	std	Z+2, r25	; 0x02
    1dd6:	0e 0d       	add	r16, r14
    1dd8:	1f 1d       	adc	r17, r15
    1dda:	83 e0       	ldi	r24, 0x03	; 3
    1ddc:	00 0f       	add	r16, r16
    1dde:	11 1f       	adc	r17, r17
    1de0:	8a 95       	dec	r24
    1de2:	e1 f7       	brne	.-8      	; 0x1ddc <_cfg_dump_axis+0x4e>
    1de4:	0d 58       	subi	r16, 0x8D	; 141
    1de6:	1d 4d       	sbci	r17, 0xDD	; 221
    1de8:	d8 01       	movw	r26, r16
    1dea:	51 96       	adiw	r26, 0x11	; 17
    1dec:	8d 91       	ld	r24, X+
    1dee:	9c 91       	ld	r25, X
    1df0:	52 97       	sbiw	r26, 0x12	; 18
    1df2:	83 83       	std	Z+3, r24	; 0x03
    1df4:	94 83       	std	Z+4, r25	; 0x04
    1df6:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    1dfa:	83 e3       	ldi	r24, 0x33	; 51
    1dfc:	95 e0       	ldi	r25, 0x05	; 5
    1dfe:	ed b7       	in	r30, 0x3d	; 61
    1e00:	fe b7       	in	r31, 0x3e	; 62
    1e02:	81 83       	std	Z+1, r24	; 0x01
    1e04:	92 83       	std	Z+2, r25	; 0x02
    1e06:	d8 01       	movw	r26, r16
    1e08:	53 96       	adiw	r26, 0x13	; 19
    1e0a:	8d 91       	ld	r24, X+
    1e0c:	9c 91       	ld	r25, X
    1e0e:	54 97       	sbiw	r26, 0x14	; 20
    1e10:	83 83       	std	Z+3, r24	; 0x03
    1e12:	94 83       	std	Z+4, r25	; 0x04
    1e14:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    1e18:	ed b7       	in	r30, 0x3d	; 61
    1e1a:	fe b7       	in	r31, 0x3e	; 62
    1e1c:	31 96       	adiw	r30, 0x01	; 1
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	95 e0       	ldi	r25, 0x05	; 5
    1e22:	ad b7       	in	r26, 0x3d	; 61
    1e24:	be b7       	in	r27, 0x3e	; 62
    1e26:	11 96       	adiw	r26, 0x01	; 1
    1e28:	8d 93       	st	X+, r24
    1e2a:	9c 93       	st	X, r25
    1e2c:	12 97       	sbiw	r26, 0x02	; 2
    1e2e:	d8 01       	movw	r26, r16
    1e30:	1e 96       	adiw	r26, 0x0e	; 14
    1e32:	8c 91       	ld	r24, X
    1e34:	82 83       	std	Z+2, r24	; 0x02
    1e36:	13 82       	std	Z+3, r1	; 0x03
    1e38:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    1e3c:	0f 92       	push	r0
    1e3e:	0f 92       	push	r0
    1e40:	89 ec       	ldi	r24, 0xC9	; 201
    1e42:	94 e0       	ldi	r25, 0x04	; 4
    1e44:	ed b7       	in	r30, 0x3d	; 61
    1e46:	fe b7       	in	r31, 0x3e	; 62
    1e48:	81 83       	std	Z+1, r24	; 0x01
    1e4a:	92 83       	std	Z+2, r25	; 0x02
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	85 89       	ldd	r24, Z+21	; 0x15
    1e50:	96 89       	ldd	r25, Z+22	; 0x16
    1e52:	a7 89       	ldd	r26, Z+23	; 0x17
    1e54:	b0 8d       	ldd	r27, Z+24	; 0x18
    1e56:	ed b7       	in	r30, 0x3d	; 61
    1e58:	fe b7       	in	r31, 0x3e	; 62
    1e5a:	83 83       	std	Z+3, r24	; 0x03
    1e5c:	94 83       	std	Z+4, r25	; 0x04
    1e5e:	a5 83       	std	Z+5, r26	; 0x05
    1e60:	b6 83       	std	Z+6, r27	; 0x06
    1e62:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    1e66:	86 e9       	ldi	r24, 0x96	; 150
    1e68:	94 e0       	ldi	r25, 0x04	; 4
    1e6a:	ad b7       	in	r26, 0x3d	; 61
    1e6c:	be b7       	in	r27, 0x3e	; 62
    1e6e:	11 96       	adiw	r26, 0x01	; 1
    1e70:	8d 93       	st	X+, r24
    1e72:	9c 93       	st	X, r25
    1e74:	12 97       	sbiw	r26, 0x02	; 2
    1e76:	f8 01       	movw	r30, r16
    1e78:	81 8d       	ldd	r24, Z+25	; 0x19
    1e7a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e7c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1e7e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    1e80:	ed b7       	in	r30, 0x3d	; 61
    1e82:	fe b7       	in	r31, 0x3e	; 62
    1e84:	83 83       	std	Z+3, r24	; 0x03
    1e86:	94 83       	std	Z+4, r25	; 0x04
    1e88:	a5 83       	std	Z+5, r26	; 0x05
    1e8a:	b6 83       	std	Z+6, r27	; 0x06
    1e8c:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    1e90:	83 e6       	ldi	r24, 0x63	; 99
    1e92:	94 e0       	ldi	r25, 0x04	; 4
    1e94:	ad b7       	in	r26, 0x3d	; 61
    1e96:	be b7       	in	r27, 0x3e	; 62
    1e98:	11 96       	adiw	r26, 0x01	; 1
    1e9a:	8d 93       	st	X+, r24
    1e9c:	9c 93       	st	X, r25
    1e9e:	12 97       	sbiw	r26, 0x02	; 2
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ea4:	96 8d       	ldd	r25, Z+30	; 0x1e
    1ea6:	a7 8d       	ldd	r26, Z+31	; 0x1f
    1ea8:	b0 a1       	ldd	r27, Z+32	; 0x20
    1eaa:	ed b7       	in	r30, 0x3d	; 61
    1eac:	fe b7       	in	r31, 0x3e	; 62
    1eae:	83 83       	std	Z+3, r24	; 0x03
    1eb0:	94 83       	std	Z+4, r25	; 0x04
    1eb2:	a5 83       	std	Z+5, r26	; 0x05
    1eb4:	b6 83       	std	Z+6, r27	; 0x06
    1eb6:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	ed b7       	in	r30, 0x3d	; 61
    1ec0:	fe b7       	in	r31, 0x3e	; 62
    1ec2:	31 96       	adiw	r30, 0x01	; 1
    1ec4:	82 e3       	ldi	r24, 0x32	; 50
    1ec6:	94 e0       	ldi	r25, 0x04	; 4
    1ec8:	ad b7       	in	r26, 0x3d	; 61
    1eca:	be b7       	in	r27, 0x3e	; 62
    1ecc:	11 96       	adiw	r26, 0x01	; 1
    1ece:	8d 93       	st	X+, r24
    1ed0:	9c 93       	st	X, r25
    1ed2:	12 97       	sbiw	r26, 0x02	; 2
    1ed4:	d8 01       	movw	r26, r16
    1ed6:	95 96       	adiw	r26, 0x25	; 37
    1ed8:	8c 91       	ld	r24, X
    1eda:	82 83       	std	Z+2, r24	; 0x02
    1edc:	13 82       	std	Z+3, r1	; 0x03
    1ede:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    1ee2:	ed b7       	in	r30, 0x3d	; 61
    1ee4:	fe b7       	in	r31, 0x3e	; 62
    1ee6:	31 96       	adiw	r30, 0x01	; 1
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	94 e0       	ldi	r25, 0x04	; 4
    1eec:	ad b7       	in	r26, 0x3d	; 61
    1eee:	be b7       	in	r27, 0x3e	; 62
    1ef0:	11 96       	adiw	r26, 0x01	; 1
    1ef2:	8d 93       	st	X+, r24
    1ef4:	9c 93       	st	X, r25
    1ef6:	12 97       	sbiw	r26, 0x02	; 2
    1ef8:	d8 01       	movw	r26, r16
    1efa:	1f 96       	adiw	r26, 0x0f	; 15
    1efc:	8c 91       	ld	r24, X
    1efe:	82 83       	std	Z+2, r24	; 0x02
    1f00:	13 82       	std	Z+3, r1	; 0x03
    1f02:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    1f06:	ed b7       	in	r30, 0x3d	; 61
    1f08:	fe b7       	in	r31, 0x3e	; 62
    1f0a:	31 96       	adiw	r30, 0x01	; 1
    1f0c:	81 ed       	ldi	r24, 0xD1	; 209
    1f0e:	93 e0       	ldi	r25, 0x03	; 3
    1f10:	ad b7       	in	r26, 0x3d	; 61
    1f12:	be b7       	in	r27, 0x3e	; 62
    1f14:	11 96       	adiw	r26, 0x01	; 1
    1f16:	8d 93       	st	X+, r24
    1f18:	9c 93       	st	X, r25
    1f1a:	12 97       	sbiw	r26, 0x02	; 2
    1f1c:	d8 01       	movw	r26, r16
    1f1e:	50 96       	adiw	r26, 0x10	; 16
    1f20:	8c 91       	ld	r24, X
    1f22:	82 83       	std	Z+2, r24	; 0x02
    1f24:	13 82       	std	Z+3, r1	; 0x03
    1f26:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    1f2a:	0f 92       	push	r0
    1f2c:	0f 92       	push	r0
    1f2e:	8d e9       	ldi	r24, 0x9D	; 157
    1f30:	93 e0       	ldi	r25, 0x03	; 3
    1f32:	ed b7       	in	r30, 0x3d	; 61
    1f34:	fe b7       	in	r31, 0x3e	; 62
    1f36:	81 83       	std	Z+1, r24	; 0x01
    1f38:	92 83       	std	Z+2, r25	; 0x02
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	81 a1       	ldd	r24, Z+33	; 0x21
    1f3e:	92 a1       	ldd	r25, Z+34	; 0x22
    1f40:	a3 a1       	ldd	r26, Z+35	; 0x23
    1f42:	b4 a1       	ldd	r27, Z+36	; 0x24
    1f44:	ed b7       	in	r30, 0x3d	; 61
    1f46:	fe b7       	in	r31, 0x3e	; 62
    1f48:	83 83       	std	Z+3, r24	; 0x03
    1f4a:	94 83       	std	Z+4, r25	; 0x04
    1f4c:	a5 83       	std	Z+5, r26	; 0x05
    1f4e:	b6 83       	std	Z+6, r27	; 0x06
    1f50:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
    1f54:	8d b7       	in	r24, 0x3d	; 61
    1f56:	9e b7       	in	r25, 0x3e	; 62
    1f58:	06 96       	adiw	r24, 0x06	; 6
    1f5a:	8d bf       	out	0x3d, r24	; 61
    1f5c:	9e bf       	out	0x3e, r25	; 62
}
    1f5e:	1f 91       	pop	r17
    1f60:	0f 91       	pop	r16
    1f62:	ff 90       	pop	r15
    1f64:	ef 90       	pop	r14
    1f66:	08 95       	ret

00001f68 <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    1f68:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <cfg_dump+0x4>
    1f6c:	0f 92       	push	r0
    1f6e:	ed b7       	in	r30, 0x3d	; 61
    1f70:	fe b7       	in	r31, 0x3e	; 62
    1f72:	31 96       	adiw	r30, 0x01	; 1
    1f74:	87 e6       	ldi	r24, 0x67	; 103
    1f76:	96 e0       	ldi	r25, 0x06	; 6
    1f78:	ad b7       	in	r26, 0x3d	; 61
    1f7a:	be b7       	in	r27, 0x3e	; 62
    1f7c:	11 96       	adiw	r26, 0x01	; 1
    1f7e:	8d 93       	st	X+, r24
    1f80:	9c 93       	st	X, r25
    1f82:	12 97       	sbiw	r26, 0x02	; 2
    1f84:	80 91 73 22 	lds	r24, 0x2273
    1f88:	82 83       	std	Z+2, r24	; 0x02
    1f8a:	13 82       	std	Z+3, r1	; 0x03
    1f8c:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	80 e4       	ldi	r24, 0x40	; 64
    1f96:	96 e0       	ldi	r25, 0x06	; 6
    1f98:	ed b7       	in	r30, 0x3d	; 61
    1f9a:	fe b7       	in	r31, 0x3e	; 62
    1f9c:	81 83       	std	Z+1, r24	; 0x01
    1f9e:	92 83       	std	Z+2, r25	; 0x02
    1fa0:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    1fa4:	00 d0       	rcall	.+0      	; 0x1fa6 <cfg_dump+0x3e>
    1fa6:	0f 92       	push	r0
    1fa8:	86 e1       	ldi	r24, 0x16	; 22
    1faa:	96 e0       	ldi	r25, 0x06	; 6
    1fac:	ad b7       	in	r26, 0x3d	; 61
    1fae:	be b7       	in	r27, 0x3e	; 62
    1fb0:	11 96       	adiw	r26, 0x01	; 1
    1fb2:	8d 93       	st	X+, r24
    1fb4:	9c 93       	st	X, r25
    1fb6:	12 97       	sbiw	r26, 0x02	; 2
    1fb8:	80 91 75 22 	lds	r24, 0x2275
    1fbc:	90 91 76 22 	lds	r25, 0x2276
    1fc0:	a0 91 77 22 	lds	r26, 0x2277
    1fc4:	b0 91 78 22 	lds	r27, 0x2278
    1fc8:	ed b7       	in	r30, 0x3d	; 61
    1fca:	fe b7       	in	r31, 0x3e	; 62
    1fcc:	83 83       	std	Z+3, r24	; 0x03
    1fce:	94 83       	std	Z+4, r25	; 0x04
    1fd0:	a5 83       	std	Z+5, r26	; 0x05
    1fd2:	b6 83       	std	Z+6, r27	; 0x06
    1fd4:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    1fd8:	8c ee       	ldi	r24, 0xEC	; 236
    1fda:	95 e0       	ldi	r25, 0x05	; 5
    1fdc:	ad b7       	in	r26, 0x3d	; 61
    1fde:	be b7       	in	r27, 0x3e	; 62
    1fe0:	11 96       	adiw	r26, 0x01	; 1
    1fe2:	8d 93       	st	X+, r24
    1fe4:	9c 93       	st	X, r25
    1fe6:	12 97       	sbiw	r26, 0x02	; 2
    1fe8:	80 91 7d 22 	lds	r24, 0x227D
    1fec:	90 91 7e 22 	lds	r25, 0x227E
    1ff0:	a0 91 7f 22 	lds	r26, 0x227F
    1ff4:	b0 91 80 22 	lds	r27, 0x2280
    1ff8:	ed b7       	in	r30, 0x3d	; 61
    1ffa:	fe b7       	in	r31, 0x3e	; 62
    1ffc:	83 83       	std	Z+3, r24	; 0x03
    1ffe:	94 83       	std	Z+4, r25	; 0x04
    2000:	a5 83       	std	Z+5, r26	; 0x05
    2002:	b6 83       	std	Z+6, r27	; 0x06
    2004:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    2008:	81 ec       	ldi	r24, 0xC1	; 193
    200a:	95 e0       	ldi	r25, 0x05	; 5
    200c:	ad b7       	in	r26, 0x3d	; 61
    200e:	be b7       	in	r27, 0x3e	; 62
    2010:	11 96       	adiw	r26, 0x01	; 1
    2012:	8d 93       	st	X+, r24
    2014:	9c 93       	st	X, r25
    2016:	12 97       	sbiw	r26, 0x02	; 2
    2018:	80 91 79 22 	lds	r24, 0x2279
    201c:	90 91 7a 22 	lds	r25, 0x227A
    2020:	a0 91 7b 22 	lds	r26, 0x227B
    2024:	b0 91 7c 22 	lds	r27, 0x227C
    2028:	ed b7       	in	r30, 0x3d	; 61
    202a:	fe b7       	in	r31, 0x3e	; 62
    202c:	83 83       	std	Z+3, r24	; 0x03
    202e:	94 83       	std	Z+4, r25	; 0x04
    2030:	a5 83       	std	Z+5, r26	; 0x05
    2032:	b6 83       	std	Z+6, r27	; 0x06
    2034:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
    2038:	10 e0       	ldi	r17, 0x00	; 0
    203a:	8d b7       	in	r24, 0x3d	; 61
    203c:	9e b7       	in	r25, 0x3e	; 62
    203e:	06 96       	adiw	r24, 0x06	; 6
    2040:	8d bf       	out	0x3d, r24	; 61
    2042:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
		_cfg_dump_axis(axis);
    2044:	81 2f       	mov	r24, r17
    2046:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    204a:	1f 5f       	subi	r17, 0xFF	; 255
    204c:	14 30       	cpi	r17, 0x04	; 4
    204e:	d1 f7       	brne	.-12     	; 0x2044 <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    2050:	1f 91       	pop	r17
    2052:	08 95       	ret

00002054 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    2054:	cf 92       	push	r12
    2056:	df 92       	push	r13
    2058:	ef 92       	push	r14
    205a:	ff 92       	push	r15
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	0f 92       	push	r0
    2066:	0f 92       	push	r0
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    206e:	19 82       	std	Y+1, r1	; 0x01
    2070:	1a 82       	std	Y+2, r1	; 0x02
    2072:	cc 24       	eor	r12, r12
    2074:	dd 24       	eor	r13, r13
    2076:	00 e0       	ldi	r16, 0x00	; 0
    2078:	10 e0       	ldi	r17, 0x00	; 0
    207a:	22 c0       	rjmp	.+68     	; 0x20c0 <cfg_parse+0x6c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = toupper(text[i++])) != 0) {
		if (c == '=') {							// handle separator
    207c:	9d 33       	cpi	r25, 0x3D	; 61
    207e:	49 f4       	brne	.+18     	; 0x2092 <cfg_parse+0x3e>
			text[j++] = 0;						// terminate tag at separator
    2080:	f7 01       	movw	r30, r14
    2082:	e1 0f       	add	r30, r17
    2084:	f1 1d       	adc	r31, r1
    2086:	10 82       	st	Z, r1
    2088:	1f 5f       	subi	r17, 0xFF	; 255
			val = &text[j];						// new string starts at value
    208a:	67 01       	movw	r12, r14
    208c:	c1 0e       	add	r12, r17
    208e:	d1 1c       	adc	r13, r1
    2090:	17 c0       	rjmp	.+46     	; 0x20c0 <cfg_parse+0x6c>
		} else if ( (c == '-') || 				// capture special characters
    2092:	9d 32       	cpi	r25, 0x2D	; 45
    2094:	81 f0       	breq	.+32     	; 0x20b6 <cfg_parse+0x62>
    2096:	9b 32       	cpi	r25, 0x2B	; 43
    2098:	71 f0       	breq	.+28     	; 0x20b6 <cfg_parse+0x62>
    209a:	9e 32       	cpi	r25, 0x2E	; 46
    209c:	61 f0       	breq	.+24     	; 0x20b6 <cfg_parse+0x62>
    209e:	9f 33       	cpi	r25, 0x3F	; 63
    20a0:	51 f0       	breq	.+20     	; 0x20b6 <cfg_parse+0x62>
    20a2:	98 32       	cpi	r25, 0x28	; 40
    20a4:	41 f0       	breq	.+16     	; 0x20b6 <cfg_parse+0x62>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'A' && c <= 'Z') {		// capture letters
    20a6:	89 2f       	mov	r24, r25
    20a8:	81 54       	subi	r24, 0x41	; 65
    20aa:	8a 31       	cpi	r24, 0x1A	; 26
    20ac:	20 f0       	brcs	.+8      	; 0x20b6 <cfg_parse+0x62>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// capture numbers
    20ae:	89 2f       	mov	r24, r25
    20b0:	80 53       	subi	r24, 0x30	; 48
    20b2:	8a 30       	cpi	r24, 0x0A	; 10
    20b4:	28 f4       	brcc	.+10     	; 0x20c0 <cfg_parse+0x6c>
			text[j++] = c;
    20b6:	f7 01       	movw	r30, r14
    20b8:	e1 0f       	add	r30, r17
    20ba:	f1 1d       	adc	r31, r1
    20bc:	90 83       	st	Z, r25
    20be:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = toupper(text[i++])) != 0) {
    20c0:	f7 01       	movw	r30, r14
    20c2:	e0 0f       	add	r30, r16
    20c4:	f1 1d       	adc	r31, r1
    20c6:	0f 5f       	subi	r16, 0xFF	; 255
    20c8:	80 81       	ld	r24, Z
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	0e 94 eb 3f 	call	0x7fd6	; 0x7fd6 <toupper>
    20d0:	98 2f       	mov	r25, r24
    20d2:	88 23       	and	r24, r24
    20d4:	99 f6       	brne	.-90     	; 0x207c <cfg_parse+0x28>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// capture numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// nul terminate line
    20d6:	f7 01       	movw	r30, r14
    20d8:	e1 0f       	add	r30, r17
    20da:	f1 1d       	adc	r31, r1
    20dc:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    20de:	1f 5f       	subi	r17, 0xFF	; 255
    20e0:	c7 01       	movw	r24, r14
    20e2:	81 0f       	add	r24, r17
    20e4:	91 1d       	adc	r25, r1
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    20ea:	10 92 74 22 	sts	0x2274, r1
	switch (text[0]) {
    20ee:	f7 01       	movw	r30, r14
    20f0:	80 81       	ld	r24, Z
    20f2:	81 35       	cpi	r24, 0x51	; 81
    20f4:	d1 f0       	breq	.+52     	; 0x212a <cfg_parse+0xd6>
    20f6:	82 35       	cpi	r24, 0x52	; 82
    20f8:	60 f4       	brcc	.+24     	; 0x2112 <cfg_parse+0xbe>
    20fa:	81 34       	cpi	r24, 0x41	; 65
    20fc:	59 f1       	breq	.+86     	; 0x2154 <cfg_parse+0x100>
    20fe:	82 34       	cpi	r24, 0x42	; 66
    2100:	28 f4       	brcc	.+10     	; 0x210c <cfg_parse+0xb8>
    2102:	88 32       	cpi	r24, 0x28	; 40
    2104:	11 f1       	breq	.+68     	; 0x214a <cfg_parse+0xf6>
    2106:	8f 33       	cpi	r24, 0x3F	; 63
    2108:	39 f5       	brne	.+78     	; 0x2158 <cfg_parse+0x104>
    210a:	0c c0       	rjmp	.+24     	; 0x2124 <cfg_parse+0xd0>
    210c:	8d 34       	cpi	r24, 0x4D	; 77
    210e:	21 f5       	brne	.+72     	; 0x2158 <cfg_parse+0x104>
    2110:	0e c0       	rjmp	.+28     	; 0x212e <cfg_parse+0xda>
    2112:	89 35       	cpi	r24, 0x59	; 89
    2114:	29 f0       	breq	.+10     	; 0x2120 <cfg_parse+0xcc>
    2116:	8a 35       	cpi	r24, 0x5A	; 90
    2118:	d9 f0       	breq	.+54     	; 0x2150 <cfg_parse+0xfc>
    211a:	88 35       	cpi	r24, 0x58	; 88
    211c:	e9 f4       	brne	.+58     	; 0x2158 <cfg_parse+0x104>
    211e:	1f c0       	rjmp	.+62     	; 0x215e <cfg_parse+0x10a>
    2120:	11 e0       	ldi	r17, 0x01	; 1
    2122:	1e c0       	rjmp	.+60     	; 0x2160 <cfg_parse+0x10c>
		case '?': cfg_dump(); cfg.status = TG_OK; break;
    2124:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <cfg_dump>
    2128:	10 c0       	rjmp	.+32     	; 0x214a <cfg_parse+0xf6>
		case '(': cfg.status = TG_OK; break;		// ignore comment lines
		case 'Q': cfg.status = TG_QUIT; break;
    212a:	8b e0       	ldi	r24, 0x0B	; 11
    212c:	16 c0       	rjmp	.+44     	; 0x215a <cfg_parse+0x106>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    212e:	c6 01       	movw	r24, r12
    2130:	be 01       	movw	r22, r28
    2132:	6f 5f       	subi	r22, 0xFF	; 255
    2134:	7f 4f       	sbci	r23, 0xFF	; 255
    2136:	0e 94 76 3d 	call	0x7aec	; 0x7aec <strtod>
    213a:	60 93 75 22 	sts	0x2275, r22
    213e:	70 93 76 22 	sts	0x2276, r23
    2142:	80 93 77 22 	sts	0x2277, r24
    2146:	90 93 78 22 	sts	0x2278, r25
				  cfg.status = TG_OK; 
    214a:	10 92 74 22 	sts	0x2274, r1
    214e:	07 c0       	rjmp	.+14     	; 0x215e <cfg_parse+0x10a>
				  break;
    2150:	12 e0       	ldi	r17, 0x02	; 2
    2152:	06 c0       	rjmp	.+12     	; 0x2160 <cfg_parse+0x10c>

		case 'X': axis = X; break;
		case 'Y': axis = Y; break;
		case 'Z': axis = Z; break;
    2154:	13 e0       	ldi	r17, 0x03	; 3
    2156:	04 c0       	rjmp	.+8      	; 0x2160 <cfg_parse+0x10c>
		case 'A': axis = A; break;

		default: cfg.status = TG_UNRECOGNIZED_COMMAND; 	// error return
    2158:	8c e0       	ldi	r24, 0x0C	; 12
    215a:	80 93 74 22 	sts	0x2274, r24
    215e:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    2160:	80 91 74 22 	lds	r24, 0x2274
    2164:	88 23       	and	r24, r24
    2166:	09 f0       	breq	.+2      	; 0x216a <cfg_parse+0x116>
    2168:	ee c0       	rjmp	.+476    	; 0x2346 <cfg_parse+0x2f2>
		cfg.status = TG_OK;							// pre-emptive setting
    216a:	10 92 74 22 	sts	0x2274, r1
		switch (text[1]) {
    216e:	f7 01       	movw	r30, r14
    2170:	81 81       	ldd	r24, Z+1	; 0x01
    2172:	8c 34       	cpi	r24, 0x4C	; 76
    2174:	09 f4       	brne	.+2      	; 0x2178 <cfg_parse+0x124>
    2176:	b8 c0       	rjmp	.+368    	; 0x22e8 <cfg_parse+0x294>
    2178:	8d 34       	cpi	r24, 0x4D	; 77
    217a:	30 f4       	brcc	.+12     	; 0x2188 <cfg_parse+0x134>
    217c:	84 34       	cpi	r24, 0x44	; 68
    217e:	a9 f1       	breq	.+106    	; 0x21ea <cfg_parse+0x196>
    2180:	86 34       	cpi	r24, 0x46	; 70
    2182:	09 f0       	breq	.+2      	; 0x2186 <cfg_parse+0x132>
    2184:	dd c0       	rjmp	.+442    	; 0x2340 <cfg_parse+0x2ec>
    2186:	1d c0       	rjmp	.+58     	; 0x21c2 <cfg_parse+0x16e>
    2188:	80 35       	cpi	r24, 0x50	; 80
    218a:	09 f4       	brne	.+2      	; 0x218e <cfg_parse+0x13a>
    218c:	47 c0       	rjmp	.+142    	; 0x221c <cfg_parse+0x1c8>
    218e:	83 35       	cpi	r24, 0x53	; 83
    2190:	21 f0       	breq	.+8      	; 0x219a <cfg_parse+0x146>
    2192:	8d 34       	cpi	r24, 0x4D	; 77
    2194:	09 f0       	breq	.+2      	; 0x2198 <cfg_parse+0x144>
    2196:	d4 c0       	rjmp	.+424    	; 0x2340 <cfg_parse+0x2ec>
    2198:	58 c0       	rjmp	.+176    	; 0x224a <cfg_parse+0x1f6>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    219a:	c6 01       	movw	r24, r12
    219c:	0e 94 e4 3e 	call	0x7dc8	; 0x7dc8 <atoi>
    21a0:	21 2f       	mov	r18, r17
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	f9 01       	movw	r30, r18
    21a6:	ee 0f       	add	r30, r30
    21a8:	ff 1f       	adc	r31, r31
    21aa:	e2 0f       	add	r30, r18
    21ac:	f3 1f       	adc	r31, r19
    21ae:	23 e0       	ldi	r18, 0x03	; 3
    21b0:	ee 0f       	add	r30, r30
    21b2:	ff 1f       	adc	r31, r31
    21b4:	2a 95       	dec	r18
    21b6:	e1 f7       	brne	.-8      	; 0x21b0 <cfg_parse+0x15c>
    21b8:	ed 58       	subi	r30, 0x8D	; 141
    21ba:	fd 4d       	sbci	r31, 0xDD	; 221
    21bc:	81 8b       	std	Z+17, r24	; 0x11
    21be:	92 8b       	std	Z+18, r25	; 0x12
    21c0:	c2 c0       	rjmp	.+388    	; 0x2346 <cfg_parse+0x2f2>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    21c2:	c6 01       	movw	r24, r12
    21c4:	0e 94 e4 3e 	call	0x7dc8	; 0x7dc8 <atoi>
    21c8:	21 2f       	mov	r18, r17
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	f9 01       	movw	r30, r18
    21ce:	ee 0f       	add	r30, r30
    21d0:	ff 1f       	adc	r31, r31
    21d2:	e2 0f       	add	r30, r18
    21d4:	f3 1f       	adc	r31, r19
    21d6:	13 e0       	ldi	r17, 0x03	; 3
    21d8:	ee 0f       	add	r30, r30
    21da:	ff 1f       	adc	r31, r31
    21dc:	1a 95       	dec	r17
    21de:	e1 f7       	brne	.-8      	; 0x21d8 <cfg_parse+0x184>
    21e0:	ed 58       	subi	r30, 0x8D	; 141
    21e2:	fd 4d       	sbci	r31, 0xDD	; 221
    21e4:	83 8b       	std	Z+19, r24	; 0x13
    21e6:	94 8b       	std	Z+20, r25	; 0x14
    21e8:	ae c0       	rjmp	.+348    	; 0x2346 <cfg_parse+0x2f2>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    21ea:	c6 01       	movw	r24, r12
    21ec:	be 01       	movw	r22, r28
    21ee:	6f 5f       	subi	r22, 0xFF	; 255
    21f0:	7f 4f       	sbci	r23, 0xFF	; 255
    21f2:	0e 94 76 3d 	call	0x7aec	; 0x7aec <strtod>
    21f6:	21 2f       	mov	r18, r17
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	f9 01       	movw	r30, r18
    21fc:	ee 0f       	add	r30, r30
    21fe:	ff 1f       	adc	r31, r31
    2200:	e2 0f       	add	r30, r18
    2202:	f3 1f       	adc	r31, r19
    2204:	a3 e0       	ldi	r26, 0x03	; 3
    2206:	ee 0f       	add	r30, r30
    2208:	ff 1f       	adc	r31, r31
    220a:	aa 95       	dec	r26
    220c:	e1 f7       	brne	.-8      	; 0x2206 <cfg_parse+0x1b2>
    220e:	ed 58       	subi	r30, 0x8D	; 141
    2210:	fd 4d       	sbci	r31, 0xDD	; 221
    2212:	65 8b       	std	Z+21, r22	; 0x15
    2214:	76 8b       	std	Z+22, r23	; 0x16
    2216:	87 8b       	std	Z+23, r24	; 0x17
    2218:	90 8f       	std	Z+24, r25	; 0x18
    221a:	95 c0       	rjmp	.+298    	; 0x2346 <cfg_parse+0x2f2>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    221c:	c6 01       	movw	r24, r12
    221e:	0e 94 e4 3e 	call	0x7dc8	; 0x7dc8 <atoi>
    2222:	68 2f       	mov	r22, r24
    2224:	81 2f       	mov	r24, r17
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	fc 01       	movw	r30, r24
    222a:	ee 0f       	add	r30, r30
    222c:	ff 1f       	adc	r31, r31
    222e:	e8 0f       	add	r30, r24
    2230:	f9 1f       	adc	r31, r25
    2232:	53 e0       	ldi	r21, 0x03	; 3
    2234:	ee 0f       	add	r30, r30
    2236:	ff 1f       	adc	r31, r31
    2238:	5a 95       	dec	r21
    223a:	e1 f7       	brne	.-8      	; 0x2234 <cfg_parse+0x1e0>
    223c:	ed 58       	subi	r30, 0x8D	; 141
    223e:	fd 4d       	sbci	r31, 0xDD	; 221
    2240:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    2242:	81 2f       	mov	r24, r17
    2244:	0e 94 0d 1c 	call	0x381a	; 0x381a <st_set_polarity>
    2248:	7e c0       	rjmp	.+252    	; 0x2346 <cfg_parse+0x2f2>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    224a:	f7 01       	movw	r30, r14
    224c:	82 81       	ldd	r24, Z+2	; 0x02
    224e:	89 34       	cpi	r24, 0x49	; 73
    2250:	99 f4       	brne	.+38     	; 0x2278 <cfg_parse+0x224>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    2252:	c6 01       	movw	r24, r12
    2254:	0e 94 e4 3e 	call	0x7dc8	; 0x7dc8 <atoi>
    2258:	21 2f       	mov	r18, r17
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	f9 01       	movw	r30, r18
    225e:	ee 0f       	add	r30, r30
    2260:	ff 1f       	adc	r31, r31
    2262:	e2 0f       	add	r30, r18
    2264:	f3 1f       	adc	r31, r19
    2266:	93 e0       	ldi	r25, 0x03	; 3
    2268:	ee 0f       	add	r30, r30
    226a:	ff 1f       	adc	r31, r31
    226c:	9a 95       	dec	r25
    226e:	e1 f7       	brne	.-8      	; 0x2268 <cfg_parse+0x214>
    2270:	ed 58       	subi	r30, 0x8D	; 141
    2272:	fd 4d       	sbci	r31, 0xDD	; 221
    2274:	86 87       	std	Z+14, r24	; 0x0e
    2276:	67 c0       	rjmp	.+206    	; 0x2346 <cfg_parse+0x2f2>
				} else if (text[3] == 'R') {
    2278:	f7 01       	movw	r30, r14
    227a:	83 81       	ldd	r24, Z+3	; 0x03
    227c:	82 35       	cpi	r24, 0x52	; 82
    227e:	c9 f4       	brne	.+50     	; 0x22b2 <cfg_parse+0x25e>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    2280:	c6 01       	movw	r24, r12
    2282:	be 01       	movw	r22, r28
    2284:	6f 5f       	subi	r22, 0xFF	; 255
    2286:	7f 4f       	sbci	r23, 0xFF	; 255
    2288:	0e 94 76 3d 	call	0x7aec	; 0x7aec <strtod>
    228c:	21 2f       	mov	r18, r17
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	f9 01       	movw	r30, r18
    2292:	ee 0f       	add	r30, r30
    2294:	ff 1f       	adc	r31, r31
    2296:	e2 0f       	add	r30, r18
    2298:	f3 1f       	adc	r31, r19
    229a:	13 e0       	ldi	r17, 0x03	; 3
    229c:	ee 0f       	add	r30, r30
    229e:	ff 1f       	adc	r31, r31
    22a0:	1a 95       	dec	r17
    22a2:	e1 f7       	brne	.-8      	; 0x229c <cfg_parse+0x248>
    22a4:	ed 58       	subi	r30, 0x8D	; 141
    22a6:	fd 4d       	sbci	r31, 0xDD	; 221
    22a8:	61 8f       	std	Z+25, r22	; 0x19
    22aa:	72 8f       	std	Z+26, r23	; 0x1a
    22ac:	83 8f       	std	Z+27, r24	; 0x1b
    22ae:	94 8f       	std	Z+28, r25	; 0x1c
    22b0:	4a c0       	rjmp	.+148    	; 0x2346 <cfg_parse+0x2f2>
				} else if (text[3] == 'T') {
    22b2:	84 35       	cpi	r24, 0x54	; 84
    22b4:	c9 f4       	brne	.+50     	; 0x22e8 <cfg_parse+0x294>
					CFG(axis).mm_travel = strtod(val, &end); break;
    22b6:	c6 01       	movw	r24, r12
    22b8:	be 01       	movw	r22, r28
    22ba:	6f 5f       	subi	r22, 0xFF	; 255
    22bc:	7f 4f       	sbci	r23, 0xFF	; 255
    22be:	0e 94 76 3d 	call	0x7aec	; 0x7aec <strtod>
    22c2:	21 2f       	mov	r18, r17
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	f9 01       	movw	r30, r18
    22c8:	ee 0f       	add	r30, r30
    22ca:	ff 1f       	adc	r31, r31
    22cc:	e2 0f       	add	r30, r18
    22ce:	f3 1f       	adc	r31, r19
    22d0:	a3 e0       	ldi	r26, 0x03	; 3
    22d2:	ee 0f       	add	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	aa 95       	dec	r26
    22d8:	e1 f7       	brne	.-8      	; 0x22d2 <cfg_parse+0x27e>
    22da:	ed 58       	subi	r30, 0x8D	; 141
    22dc:	fd 4d       	sbci	r31, 0xDD	; 221
    22de:	65 8f       	std	Z+29, r22	; 0x1d
    22e0:	76 8f       	std	Z+30, r23	; 0x1e
    22e2:	87 8f       	std	Z+31, r24	; 0x1f
    22e4:	90 a3       	std	Z+32, r25	; 0x20
    22e6:	2f c0       	rjmp	.+94     	; 0x2346 <cfg_parse+0x2f2>
				}
			case 'L': 
				if (text[2] == 'O') {
    22e8:	f7 01       	movw	r30, r14
    22ea:	82 81       	ldd	r24, Z+2	; 0x02
    22ec:	8f 34       	cpi	r24, 0x4F	; 79
    22ee:	99 f4       	brne	.+38     	; 0x2316 <cfg_parse+0x2c2>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    22f0:	c6 01       	movw	r24, r12
    22f2:	0e 94 e4 3e 	call	0x7dc8	; 0x7dc8 <atoi>
    22f6:	21 2f       	mov	r18, r17
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	f9 01       	movw	r30, r18
    22fc:	ee 0f       	add	r30, r30
    22fe:	ff 1f       	adc	r31, r31
    2300:	e2 0f       	add	r30, r18
    2302:	f3 1f       	adc	r31, r19
    2304:	53 e0       	ldi	r21, 0x03	; 3
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	5a 95       	dec	r21
    230c:	e1 f7       	brne	.-8      	; 0x2306 <cfg_parse+0x2b2>
    230e:	ed 58       	subi	r30, 0x8D	; 141
    2310:	fd 4d       	sbci	r31, 0xDD	; 221
    2312:	87 87       	std	Z+15, r24	; 0x0f
    2314:	18 c0       	rjmp	.+48     	; 0x2346 <cfg_parse+0x2f2>
				} else if (text[2] == 'I') {
    2316:	89 34       	cpi	r24, 0x49	; 73
    2318:	99 f4       	brne	.+38     	; 0x2340 <cfg_parse+0x2ec>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    231a:	c6 01       	movw	r24, r12
    231c:	0e 94 e4 3e 	call	0x7dc8	; 0x7dc8 <atoi>
    2320:	21 2f       	mov	r18, r17
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	f9 01       	movw	r30, r18
    2326:	ee 0f       	add	r30, r30
    2328:	ff 1f       	adc	r31, r31
    232a:	e2 0f       	add	r30, r18
    232c:	f3 1f       	adc	r31, r19
    232e:	23 e0       	ldi	r18, 0x03	; 3
    2330:	ee 0f       	add	r30, r30
    2332:	ff 1f       	adc	r31, r31
    2334:	2a 95       	dec	r18
    2336:	e1 f7       	brne	.-8      	; 0x2330 <cfg_parse+0x2dc>
    2338:	ed 58       	subi	r30, 0x8D	; 141
    233a:	fd 4d       	sbci	r31, 0xDD	; 221
    233c:	85 a3       	std	Z+37, r24	; 0x25
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <cfg_parse+0x2f2>
				}

			default: cfg.status = TG_UNRECOGNIZED_COMMAND;	// error return
    2340:	8c e0       	ldi	r24, 0x0C	; 12
    2342:	80 93 74 22 	sts	0x2274, r24
		}
	}
//	cfg_write();
	return (cfg.status);
}
    2346:	80 91 74 22 	lds	r24, 0x2274
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	ff 90       	pop	r15
    235a:	ef 90       	pop	r14
    235c:	df 90       	pop	r13
    235e:	cf 90       	pop	r12
    2360:	08 95       	ret

00002362 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    2362:	ef 92       	push	r14
    2364:	ff 92       	push	r15
    2366:	0f 93       	push	r16
    2368:	1f 93       	push	r17
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	a8 97       	sbiw	r28, 0x28	; 40
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	de bf       	out	0x3e, r29	; 62
    2378:	0f e4       	ldi	r16, 0x4F	; 79
    237a:	12 e0       	ldi	r17, 0x02	; 2
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    2380:	7e 01       	movw	r14, r28
    2382:	08 94       	sec
    2384:	e1 1c       	adc	r14, r1
    2386:	f1 1c       	adc	r15, r1
    2388:	02 c0       	rjmp	.+4      	; 0x238e <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    238a:	0f 5f       	subi	r16, 0xFF	; 255
    238c:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    238e:	f8 01       	movw	r30, r16
    2390:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    2392:	88 23       	and	r24, r24
    2394:	89 f4       	brne	.+34     	; 0x23b8 <cfg_test+0x56>
			text[j] = 0;
    2396:	ce 01       	movw	r24, r28
    2398:	01 96       	adiw	r24, 0x01	; 1
    239a:	a8 0f       	add	r26, r24
    239c:	b9 1f       	adc	r27, r25
    239e:	1c 92       	st	X, r1
			cfg_parse(text);
    23a0:	0e 94 2a 10 	call	0x2054	; 0x2054 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    23a4:	a8 96       	adiw	r28, 0x28	; 40
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	1f 91       	pop	r17
    23b0:	0f 91       	pop	r16
    23b2:	ff 90       	pop	r15
    23b4:	ef 90       	pop	r14
    23b6:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    23b8:	8d 30       	cpi	r24, 0x0D	; 13
    23ba:	21 f0       	breq	.+8      	; 0x23c4 <cfg_test+0x62>
    23bc:	8a 30       	cpi	r24, 0x0A	; 10
    23be:	11 f0       	breq	.+4      	; 0x23c4 <cfg_test+0x62>
    23c0:	8b 33       	cpi	r24, 0x3B	; 59
    23c2:	49 f4       	brne	.+18     	; 0x23d6 <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    23c4:	ae 0d       	add	r26, r14
    23c6:	bf 1d       	adc	r27, r15
    23c8:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    23ca:	c7 01       	movw	r24, r14
    23cc:	0e 94 2a 10 	call	0x2054	; 0x2054 <cfg_parse>
    23d0:	a0 e0       	ldi	r26, 0x00	; 0
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	da cf       	rjmp	.-76     	; 0x238a <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    23d6:	81 32       	cpi	r24, 0x21	; 33
    23d8:	c0 f2       	brcs	.-80     	; 0x238a <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    23da:	f7 01       	movw	r30, r14
    23dc:	ea 0f       	add	r30, r26
    23de:	fb 1f       	adc	r31, r27
    23e0:	80 83       	st	Z, r24
    23e2:	11 96       	adiw	r26, 0x01	; 1
    23e4:	d2 cf       	rjmp	.-92     	; 0x238a <cfg_test+0x28>

000023e6 <en_init>:
static uint8_t encoder_port_value;

void en_init(void) 
{
	return;
}
    23e6:	08 95       	ret

000023e8 <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	encoder_port_value = b;
    23e8:	80 93 88 21 	sts	0x2188, r24

	if (b & 0x01) { 								// b0 is on A axis
    23ec:	98 2f       	mov	r25, r24
    23ee:	90 ff       	sbrs	r25, 0
    23f0:	07 c0       	rjmp	.+14     	; 0x2400 <en_write+0x18>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    23f2:	e0 91 6f 22 	lds	r30, 0x226F
    23f6:	f0 91 70 22 	lds	r31, 0x2270
    23fa:	80 e2       	ldi	r24, 0x20	; 32
    23fc:	85 83       	std	Z+5, r24	; 0x05
    23fe:	06 c0       	rjmp	.+12     	; 0x240c <en_write+0x24>
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    2400:	e0 91 6f 22 	lds	r30, 0x226F
    2404:	f0 91 70 22 	lds	r31, 0x2270
    2408:	80 e2       	ldi	r24, 0x20	; 32
    240a:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b & 0x02) { 								// b1 is on Z axis
    240c:	91 ff       	sbrs	r25, 1
    240e:	07 c0       	rjmp	.+14     	; 0x241e <en_write+0x36>
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    2410:	e0 91 5f 22 	lds	r30, 0x225F
    2414:	f0 91 60 22 	lds	r31, 0x2260
    2418:	80 e2       	ldi	r24, 0x20	; 32
    241a:	85 83       	std	Z+5, r24	; 0x05
    241c:	06 c0       	rjmp	.+12     	; 0x242a <en_write+0x42>
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    241e:	e0 91 5f 22 	lds	r30, 0x225F
    2422:	f0 91 60 22 	lds	r31, 0x2260
    2426:	80 e2       	ldi	r24, 0x20	; 32
    2428:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b & 0x04) { 								// b2 is on Y axis
    242a:	92 ff       	sbrs	r25, 2
    242c:	07 c0       	rjmp	.+14     	; 0x243c <en_write+0x54>
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    242e:	e0 91 4f 22 	lds	r30, 0x224F
    2432:	f0 91 50 22 	lds	r31, 0x2250
    2436:	80 e2       	ldi	r24, 0x20	; 32
    2438:	85 83       	std	Z+5, r24	; 0x05
    243a:	06 c0       	rjmp	.+12     	; 0x2448 <en_write+0x60>
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    243c:	e0 91 4f 22 	lds	r30, 0x224F
    2440:	f0 91 50 22 	lds	r31, 0x2250
    2444:	80 e2       	ldi	r24, 0x20	; 32
    2446:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b & 0x08) { 								// b3 is on X axis
    2448:	93 ff       	sbrs	r25, 3
    244a:	07 c0       	rjmp	.+14     	; 0x245a <en_write+0x72>
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    244c:	e0 91 3f 22 	lds	r30, 0x223F
    2450:	f0 91 40 22 	lds	r31, 0x2240
    2454:	80 e2       	ldi	r24, 0x20	; 32
    2456:	85 83       	std	Z+5, r24	; 0x05
    2458:	08 95       	ret
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    245a:	e0 91 3f 22 	lds	r30, 0x223F
    245e:	f0 91 40 22 	lds	r31, 0x2240
    2462:	80 e2       	ldi	r24, 0x20	; 32
    2464:	86 83       	std	Z+6, r24	; 0x06
    2466:	08 95       	ret

00002468 <en_toggle>:
 * en_toggle() - toggle lowest 4 bits of a byte to encoder output port
 */

void en_toggle(uint8_t b)
{
	encoder_port_value ^= b;	// xor the stored encoder value with b
    2468:	90 91 88 21 	lds	r25, 0x2188
    246c:	98 27       	eor	r25, r24
    246e:	90 93 88 21 	sts	0x2188, r25
	en_write(encoder_port_value);
    2472:	89 2f       	mov	r24, r25
    2474:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <en_write>
}
    2478:	08 95       	ret

0000247a <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    247a:	0f 93       	push	r16
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	0f 92       	push	r0
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    2486:	8b ec       	ldi	r24, 0xCB	; 203
    2488:	e0 e5       	ldi	r30, 0x50	; 80
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    248e:	88 e0       	ldi	r24, 0x08	; 8
    2490:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    2494:	80 91 51 00 	lds	r24, 0x0051
    2498:	83 ff       	sbrs	r24, 3
    249a:	fc cf       	rjmp	.-8      	; 0x2494 <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    249c:	82 ec       	ldi	r24, 0xC2	; 194
    249e:	e0 e5       	ldi	r30, 0x50	; 80
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    24a4:	88 e1       	ldi	r24, 0x18	; 24
    24a6:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    24aa:	80 91 51 00 	lds	r24, 0x0051
    24ae:	84 ff       	sbrs	r24, 4
    24b0:	fc cf       	rjmp	.-8      	; 0x24aa <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    24b2:	8f b7       	in	r24, 0x3f	; 63
    24b4:	89 83       	std	Y+1, r24	; 0x01
    24b6:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    24b8:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    24ba:	24 e0       	ldi	r18, 0x04	; 4
    24bc:	80 e4       	ldi	r24, 0x40	; 64
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	fc 01       	movw	r30, r24
    24c2:	08 ed       	ldi	r16, 0xD8	; 216
    24c4:	04 bf       	out	0x34, r16	; 52
    24c6:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    24cc:	80 91 50 00 	lds	r24, 0x0050
    24d0:	8e 7f       	andi	r24, 0xFE	; 254
    24d2:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    24d6:	0f 90       	pop	r0
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	0f 91       	pop	r16
    24de:	08 95       	ret

000024e0 <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    24e0:	0e 94 3d 12 	call	0x247a	; 0x247a <xmega_init_clocks>
}
    24e4:	08 95       	ret

000024e6 <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    24e6:	0f 93       	push	r16
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	0f 92       	push	r0
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    24f2:	2f b7       	in	r18, 0x3f	; 63
    24f4:	29 83       	std	Y+1, r18	; 0x01
    24f6:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    24f8:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    24fa:	fc 01       	movw	r30, r24
    24fc:	08 ed       	ldi	r16, 0xD8	; 216
    24fe:	04 bf       	out	0x34, r16	; 52
    2500:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	8f bf       	out	0x3f, r24	; 63
#endif
}
    2506:	0f 90       	pop	r0
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	0f 91       	pop	r16
    250e:	08 95       	ret

00002510 <mc_motion_start>:
 */

int mc_motion_start()
{
	return (TG_OK);
}
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	08 95       	ret

00002516 <mc_motion_end>:
 */

int mc_motion_end()
{
	return (TG_OK);
}
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	08 95       	ret

0000251c <mc_home>:
 */

int mc_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    251c:	8c e0       	ldi	r24, 0x0C	; 12
    251e:	eb e8       	ldi	r30, 0x8B	; 139
    2520:	f1 e2       	ldi	r31, 0x21	; 33
    2522:	df 01       	movw	r26, r30
    2524:	1d 92       	st	X+, r1
    2526:	8a 95       	dec	r24
    2528:	e9 f7       	brne	.-6      	; 0x2524 <mc_home+0x8>
	return (TG_OK);
}
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	08 95       	ret

00002530 <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    2530:	8c e0       	ldi	r24, 0x0C	; 12
    2532:	eb e8       	ldi	r30, 0x8B	; 139
    2534:	f1 e2       	ldi	r31, 0x21	; 33
    2536:	df 01       	movw	r26, r30
    2538:	1d 92       	st	X+, r1
    253a:	8a 95       	dec	r24
    253c:	e9 f7       	brne	.-6      	; 0x2538 <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    253e:	10 92 89 21 	sts	0x2189, r1
	ma.arc_state = MC_STATE_OFF;
    2542:	10 92 e1 22 	sts	0x22E1, r1
}
    2546:	08 95       	ret

00002548 <mc_line_continue>:
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 *	The mc.move_type must be set before calling this routine
 */
int mc_line_continue() 
{
    2548:	8f 92       	push	r8
    254a:	af 92       	push	r10
    254c:	bf 92       	push	r11
    254e:	cf 92       	push	r12
    2550:	df 92       	push	r13
    2552:	ef 92       	push	r14
    2554:	ff 92       	push	r15
    2556:	0f 93       	push	r16
    2558:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    255a:	80 91 89 21 	lds	r24, 0x2189
    255e:	88 23       	and	r24, r24
    2560:	19 f4       	brne	.+6      	; 0x2568 <mc_line_continue+0x20>
    2562:	23 e0       	ldi	r18, 0x03	; 3
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	32 c0       	rjmp	.+100    	; 0x25cc <mc_line_continue+0x84>
		return (TG_NOOP);			  // return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    2568:	82 e0       	ldi	r24, 0x02	; 2
    256a:	80 93 89 21 	sts	0x2189, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    256e:	0e 94 22 24 	call	0x4844	; 0x4844 <mv_test_move_buffer_full>
    2572:	88 23       	and	r24, r24
    2574:	19 f0       	breq	.+6      	; 0x257c <mc_line_continue+0x34>
    2576:	22 e0       	ldi	r18, 0x02	; 2
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	28 c0       	rjmp	.+80     	; 0x25cc <mc_line_continue+0x84>
		return (TG_EAGAIN);
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds, mc.move_type); 
    257c:	60 91 a3 21 	lds	r22, 0x21A3
    2580:	70 91 a4 21 	lds	r23, 0x21A4
    2584:	80 91 a5 21 	lds	r24, 0x21A5
    2588:	90 91 a6 21 	lds	r25, 0x21A6
    258c:	20 91 a7 21 	lds	r18, 0x21A7
    2590:	30 91 a8 21 	lds	r19, 0x21A8
    2594:	40 91 a9 21 	lds	r20, 0x21A9
    2598:	50 91 aa 21 	lds	r21, 0x21AA
    259c:	e0 90 ab 21 	lds	r14, 0x21AB
    25a0:	f0 90 ac 21 	lds	r15, 0x21AC
    25a4:	00 91 ad 21 	lds	r16, 0x21AD
    25a8:	10 91 ae 21 	lds	r17, 0x21AE
    25ac:	a0 90 af 21 	lds	r10, 0x21AF
    25b0:	b0 90 b0 21 	lds	r11, 0x21B0
    25b4:	c0 90 b1 21 	lds	r12, 0x21B1
    25b8:	d0 90 b2 21 	lds	r13, 0x21B2
    25bc:	80 90 8a 21 	lds	r8, 0x218A
    25c0:	0e 94 4e 24 	call	0x489c	; 0x489c <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;	  // line is done. turn the generator off.
    25c4:	10 92 89 21 	sts	0x2189, r1
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    25cc:	c9 01       	movw	r24, r18
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	ff 90       	pop	r15
    25d4:	ef 90       	pop	r14
    25d6:	df 90       	pop	r13
    25d8:	cf 90       	pop	r12
    25da:	bf 90       	pop	r11
    25dc:	af 90       	pop	r10
    25de:	8f 90       	pop	r8
    25e0:	08 95       	ret

000025e2 <mc_dwell>:
 * NOTE: It's not necessary to set the target as this is set correctly in the Gcode. 
 */

int mc_dwell(double seconds) 
{
	mc.steps[X] = 0;
    25e2:	10 92 a3 21 	sts	0x21A3, r1
    25e6:	10 92 a4 21 	sts	0x21A4, r1
    25ea:	10 92 a5 21 	sts	0x21A5, r1
    25ee:	10 92 a6 21 	sts	0x21A6, r1
	mc.steps[Y] = 0;
    25f2:	10 92 a7 21 	sts	0x21A7, r1
    25f6:	10 92 a8 21 	sts	0x21A8, r1
    25fa:	10 92 a9 21 	sts	0x21A9, r1
    25fe:	10 92 aa 21 	sts	0x21AA, r1
	mc.steps[Z] = 0;
    2602:	10 92 ab 21 	sts	0x21AB, r1
    2606:	10 92 ac 21 	sts	0x21AC, r1
    260a:	10 92 ad 21 	sts	0x21AD, r1
    260e:	10 92 ae 21 	sts	0x21AE, r1
	mc.mm_of_travel = 0;	// not actually used, but makes debug make more sense
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	50 e0       	ldi	r21, 0x00	; 0
    261a:	20 93 b3 21 	sts	0x21B3, r18
    261e:	30 93 b4 21 	sts	0x21B4, r19
    2622:	40 93 b5 21 	sts	0x21B5, r20
    2626:	50 93 b6 21 	sts	0x21B6, r21
	mc.microseconds = trunc(seconds*1000000);
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	34 e2       	ldi	r19, 0x24	; 36
    262e:	44 e7       	ldi	r20, 0x74	; 116
    2630:	59 e4       	ldi	r21, 0x49	; 73
    2632:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    2636:	0e 94 df 39 	call	0x73be	; 0x73be <__fixunssfsi>
    263a:	60 93 af 21 	sts	0x21AF, r22
    263e:	70 93 b0 21 	sts	0x21B0, r23
    2642:	80 93 b1 21 	sts	0x21B1, r24
    2646:	90 93 b2 21 	sts	0x21B2, r25
	mc.move_type = MC_TYPE_DWELL;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	80 93 8a 21 	sts	0x218A, r24
	mc.line_state = MC_STATE_NEW;
    2650:	80 93 89 21 	sts	0x2189, r24
	return (mc_line_continue());
    2654:	0e 94 a4 12 	call	0x2548	; 0x2548 <mc_line_continue>
}
    2658:	08 95       	ret

0000265a <mc_set_position>:
/* 
 * mc_set_position() - set current position (support for G92)
 */

int mc_set_position(double x, double y, double z)
{
    265a:	8f 92       	push	r8
    265c:	9f 92       	push	r9
    265e:	af 92       	push	r10
    2660:	bf 92       	push	r11
    2662:	cf 92       	push	r12
    2664:	df 92       	push	r13
    2666:	ef 92       	push	r14
    2668:	ff 92       	push	r15
    266a:	0f 93       	push	r16
    266c:	1f 93       	push	r17
    266e:	49 01       	movw	r8, r18
    2670:	5a 01       	movw	r10, r20
	mc.position[X] = lround(x*CFG(X).steps_per_mm);
    2672:	20 91 94 22 	lds	r18, 0x2294
    2676:	30 91 95 22 	lds	r19, 0x2295
    267a:	40 91 96 22 	lds	r20, 0x2296
    267e:	50 91 97 22 	lds	r21, 0x2297
    2682:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    2686:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <lround>
    268a:	2b e8       	ldi	r18, 0x8B	; 139
    268c:	c2 2e       	mov	r12, r18
    268e:	21 e2       	ldi	r18, 0x21	; 33
    2690:	d2 2e       	mov	r13, r18
    2692:	60 93 8b 21 	sts	0x218B, r22
    2696:	70 93 8c 21 	sts	0x218C, r23
    269a:	80 93 8d 21 	sts	0x218D, r24
    269e:	90 93 8e 21 	sts	0x218E, r25
	mc.position[Y] = lround(y*CFG(Y).steps_per_mm);
    26a2:	c5 01       	movw	r24, r10
    26a4:	b4 01       	movw	r22, r8
    26a6:	20 91 ac 22 	lds	r18, 0x22AC
    26aa:	30 91 ad 22 	lds	r19, 0x22AD
    26ae:	40 91 ae 22 	lds	r20, 0x22AE
    26b2:	50 91 af 22 	lds	r21, 0x22AF
    26b6:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    26ba:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <lround>
    26be:	f6 01       	movw	r30, r12
    26c0:	34 96       	adiw	r30, 0x04	; 4
    26c2:	60 93 8f 21 	sts	0x218F, r22
    26c6:	71 83       	std	Z+1, r23	; 0x01
    26c8:	82 83       	std	Z+2, r24	; 0x02
    26ca:	93 83       	std	Z+3, r25	; 0x03
	mc.position[Z] = lround(z*CFG(Z).steps_per_mm); 
    26cc:	c8 01       	movw	r24, r16
    26ce:	b7 01       	movw	r22, r14
    26d0:	20 91 c4 22 	lds	r18, 0x22C4
    26d4:	30 91 c5 22 	lds	r19, 0x22C5
    26d8:	40 91 c6 22 	lds	r20, 0x22C6
    26dc:	50 91 c7 22 	lds	r21, 0x22C7
    26e0:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    26e4:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <lround>
    26e8:	28 e0       	ldi	r18, 0x08	; 8
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	c2 0e       	add	r12, r18
    26ee:	d3 1e       	adc	r13, r19
    26f0:	60 93 93 21 	sts	0x2193, r22
    26f4:	f6 01       	movw	r30, r12
    26f6:	71 83       	std	Z+1, r23	; 0x01
    26f8:	82 83       	std	Z+2, r24	; 0x02
    26fa:	93 83       	std	Z+3, r25	; 0x03
	return (TG_OK);
}
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	1f 91       	pop	r17
    2702:	0f 91       	pop	r16
    2704:	ff 90       	pop	r15
    2706:	ef 90       	pop	r14
    2708:	df 90       	pop	r13
    270a:	cf 90       	pop	r12
    270c:	bf 90       	pop	r11
    270e:	af 90       	pop	r10
    2710:	9f 90       	pop	r9
    2712:	8f 90       	pop	r8
    2714:	08 95       	ret

00002716 <mc_line>:
 * Zero length lines that are actually dwells come in thru mc_dwell().
 * The mv_queue doesn't check line length and queues anything.
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    2716:	2f 92       	push	r2
    2718:	3f 92       	push	r3
    271a:	4f 92       	push	r4
    271c:	5f 92       	push	r5
    271e:	6f 92       	push	r6
    2720:	7f 92       	push	r7
    2722:	8f 92       	push	r8
    2724:	9f 92       	push	r9
    2726:	af 92       	push	r10
    2728:	bf 92       	push	r11
    272a:	cf 92       	push	r12
    272c:	df 92       	push	r13
    272e:	ef 92       	push	r14
    2730:	ff 92       	push	r15
    2732:	0f 93       	push	r16
    2734:	1f 93       	push	r17
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
    273e:	62 97       	sbiw	r28, 0x12	; 18
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	19 01       	movw	r2, r18
    2746:	2a 01       	movw	r4, r20
    2748:	ad 86       	std	Y+13, r10	; 0x0d
    274a:	be 86       	std	Y+14, r11	; 0x0e
    274c:	cf 86       	std	Y+15, r12	; 0x0f
    274e:	d8 8a       	std	Y+16, r13	; 0x10
    2750:	89 8a       	std	Y+17, r8	; 0x11
    2752:	9a 8a       	std	Y+18, r9	; 0x12
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    2754:	20 91 94 22 	lds	r18, 0x2294
    2758:	30 91 95 22 	lds	r19, 0x2295
    275c:	40 91 96 22 	lds	r20, 0x2296
    2760:	50 91 97 22 	lds	r21, 0x2297
    2764:	29 87       	std	Y+9, r18	; 0x09
    2766:	3a 87       	std	Y+10, r19	; 0x0a
    2768:	4b 87       	std	Y+11, r20	; 0x0b
    276a:	5c 87       	std	Y+12, r21	; 0x0c
    276c:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    2770:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <lround>
    2774:	3b 01       	movw	r6, r22
    2776:	4c 01       	movw	r8, r24
    2778:	60 92 97 21 	sts	0x2197, r6
    277c:	70 92 98 21 	sts	0x2198, r7
    2780:	80 92 99 21 	sts	0x2199, r8
    2784:	90 92 9a 21 	sts	0x219A, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    2788:	80 91 ac 22 	lds	r24, 0x22AC
    278c:	90 91 ad 22 	lds	r25, 0x22AD
    2790:	a0 91 ae 22 	lds	r26, 0x22AE
    2794:	b0 91 af 22 	lds	r27, 0x22AF
    2798:	8d 83       	std	Y+5, r24	; 0x05
    279a:	9e 83       	std	Y+6, r25	; 0x06
    279c:	af 83       	std	Y+7, r26	; 0x07
    279e:	b8 87       	std	Y+8, r27	; 0x08
    27a0:	c2 01       	movw	r24, r4
    27a2:	b1 01       	movw	r22, r2
    27a4:	2d 81       	ldd	r18, Y+5	; 0x05
    27a6:	3e 81       	ldd	r19, Y+6	; 0x06
    27a8:	4f 81       	ldd	r20, Y+7	; 0x07
    27aa:	58 85       	ldd	r21, Y+8	; 0x08
    27ac:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    27b0:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <lround>
    27b4:	5b 01       	movw	r10, r22
    27b6:	6c 01       	movw	r12, r24
    27b8:	a0 92 9b 21 	sts	0x219B, r10
    27bc:	b0 92 9c 21 	sts	0x219C, r11
    27c0:	c0 92 9d 21 	sts	0x219D, r12
    27c4:	d0 92 9e 21 	sts	0x219E, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    27c8:	20 91 c4 22 	lds	r18, 0x22C4
    27cc:	30 91 c5 22 	lds	r19, 0x22C5
    27d0:	40 91 c6 22 	lds	r20, 0x22C6
    27d4:	50 91 c7 22 	lds	r21, 0x22C7
    27d8:	29 83       	std	Y+1, r18	; 0x01
    27da:	3a 83       	std	Y+2, r19	; 0x02
    27dc:	4b 83       	std	Y+3, r20	; 0x03
    27de:	5c 83       	std	Y+4, r21	; 0x04
    27e0:	c8 01       	movw	r24, r16
    27e2:	b7 01       	movw	r22, r14
    27e4:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    27e8:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <lround>
    27ec:	9b 01       	movw	r18, r22
    27ee:	ac 01       	movw	r20, r24
    27f0:	20 93 9f 21 	sts	0x219F, r18
    27f4:	30 93 a0 21 	sts	0x21A0, r19
    27f8:	40 93 a1 21 	sts	0x21A1, r20
    27fc:	50 93 a2 21 	sts	0x21A2, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    2800:	80 91 8b 21 	lds	r24, 0x218B
    2804:	90 91 8c 21 	lds	r25, 0x218C
    2808:	a0 91 8d 21 	lds	r26, 0x218D
    280c:	b0 91 8e 21 	lds	r27, 0x218E
    2810:	84 01       	movw	r16, r8
    2812:	73 01       	movw	r14, r6
    2814:	e8 1a       	sub	r14, r24
    2816:	f9 0a       	sbc	r15, r25
    2818:	0a 0b       	sbc	r16, r26
    281a:	1b 0b       	sbc	r17, r27
    281c:	e0 92 a3 21 	sts	0x21A3, r14
    2820:	f0 92 a4 21 	sts	0x21A4, r15
    2824:	00 93 a5 21 	sts	0x21A5, r16
    2828:	10 93 a6 21 	sts	0x21A6, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    282c:	80 91 8f 21 	lds	r24, 0x218F
    2830:	90 91 90 21 	lds	r25, 0x2190
    2834:	a0 91 91 21 	lds	r26, 0x2191
    2838:	b0 91 92 21 	lds	r27, 0x2192
    283c:	a8 1a       	sub	r10, r24
    283e:	b9 0a       	sbc	r11, r25
    2840:	ca 0a       	sbc	r12, r26
    2842:	db 0a       	sbc	r13, r27
    2844:	a0 92 a7 21 	sts	0x21A7, r10
    2848:	b0 92 a8 21 	sts	0x21A8, r11
    284c:	c0 92 a9 21 	sts	0x21A9, r12
    2850:	d0 92 aa 21 	sts	0x21AA, r13
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    2854:	80 91 93 21 	lds	r24, 0x2193
    2858:	90 91 94 21 	lds	r25, 0x2194
    285c:	a0 91 95 21 	lds	r26, 0x2195
    2860:	b0 91 96 21 	lds	r27, 0x2196
    2864:	19 01       	movw	r2, r18
    2866:	2a 01       	movw	r4, r20
    2868:	28 1a       	sub	r2, r24
    286a:	39 0a       	sbc	r3, r25
    286c:	4a 0a       	sbc	r4, r26
    286e:	5b 0a       	sbc	r5, r27
    2870:	20 92 ab 21 	sts	0x21AB, r2
    2874:	30 92 ac 21 	sts	0x21AC, r3
    2878:	40 92 ad 21 	sts	0x21AD, r4
    287c:	50 92 ae 21 	sts	0x21AE, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    2880:	d6 01       	movw	r26, r12
    2882:	c5 01       	movw	r24, r10
    2884:	8e 0d       	add	r24, r14
    2886:	9f 1d       	adc	r25, r15
    2888:	a0 1f       	adc	r26, r16
    288a:	b1 1f       	adc	r27, r17
    288c:	82 0d       	add	r24, r2
    288e:	93 1d       	adc	r25, r3
    2890:	a4 1d       	adc	r26, r4
    2892:	b5 1d       	adc	r27, r5
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	a1 05       	cpc	r26, r1
    2898:	b1 05       	cpc	r27, r1
    289a:	19 f4       	brne	.+6      	; 0x28a2 <mc_line+0x18c>
    289c:	24 e1       	ldi	r18, 0x14	; 20
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	74 c0       	rjmp	.+232    	; 0x298a <mc_line+0x274>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    28a2:	49 89       	ldd	r20, Y+17	; 0x11
    28a4:	5a 89       	ldd	r21, Y+18	; 0x12
    28a6:	45 2b       	or	r20, r21
    28a8:	59 f0       	breq	.+22     	; 0x28c0 <mc_line+0x1aa>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    28aa:	60 ec       	ldi	r22, 0xC0	; 192
    28ac:	71 ee       	ldi	r23, 0xE1	; 225
    28ae:	84 e6       	ldi	r24, 0x64	; 100
    28b0:	9c e4       	ldi	r25, 0x4C	; 76
    28b2:	2d 85       	ldd	r18, Y+13	; 0x0d
    28b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    28b6:	4f 85       	ldd	r20, Y+15	; 0x0f
    28b8:	58 89       	ldd	r21, Y+16	; 0x10
    28ba:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    28be:	4a c0       	rjmp	.+148    	; 0x2954 <mc_line+0x23e>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    28c0:	c8 01       	movw	r24, r16
    28c2:	b7 01       	movw	r22, r14
    28c4:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    28c8:	29 85       	ldd	r18, Y+9	; 0x09
    28ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    28cc:	4b 85       	ldd	r20, Y+11	; 0x0b
    28ce:	5c 85       	ldd	r21, Y+12	; 0x0c
    28d0:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    28d4:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <square>
    28d8:	3b 01       	movw	r6, r22
    28da:	4c 01       	movw	r8, r24
    28dc:	c6 01       	movw	r24, r12
    28de:	b5 01       	movw	r22, r10
    28e0:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    28e4:	2d 81       	ldd	r18, Y+5	; 0x05
    28e6:	3e 81       	ldd	r19, Y+6	; 0x06
    28e8:	4f 81       	ldd	r20, Y+7	; 0x07
    28ea:	58 85       	ldd	r21, Y+8	; 0x08
    28ec:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    28f0:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <square>
    28f4:	5b 01       	movw	r10, r22
    28f6:	6c 01       	movw	r12, r24
    28f8:	c2 01       	movw	r24, r4
    28fa:	b1 01       	movw	r22, r2
    28fc:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    2900:	29 81       	ldd	r18, Y+1	; 0x01
    2902:	3a 81       	ldd	r19, Y+2	; 0x02
    2904:	4b 81       	ldd	r20, Y+3	; 0x03
    2906:	5c 81       	ldd	r21, Y+4	; 0x04
    2908:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    290c:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <square>
    2910:	7b 01       	movw	r14, r22
    2912:	8c 01       	movw	r16, r24
    2914:	c4 01       	movw	r24, r8
    2916:	b3 01       	movw	r22, r6
    2918:	a6 01       	movw	r20, r12
    291a:	95 01       	movw	r18, r10
    291c:	0e 94 cc 38 	call	0x7198	; 0x7198 <__addsf3>
    2920:	a8 01       	movw	r20, r16
    2922:	97 01       	movw	r18, r14
    2924:	0e 94 cc 38 	call	0x7198	; 0x7198 <__addsf3>
    2928:	0e 94 9a 3c 	call	0x7934	; 0x7934 <sqrt>
    292c:	60 93 b3 21 	sts	0x21B3, r22
    2930:	70 93 b4 21 	sts	0x21B4, r23
    2934:	80 93 b5 21 	sts	0x21B5, r24
    2938:	90 93 b6 21 	sts	0x21B6, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    293c:	2d 85       	ldd	r18, Y+13	; 0x0d
    293e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2940:	4f 85       	ldd	r20, Y+15	; 0x0f
    2942:	58 89       	ldd	r21, Y+16	; 0x10
    2944:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	34 e2       	ldi	r19, 0x24	; 36
    294c:	44 e7       	ldi	r20, 0x74	; 116
    294e:	59 e4       	ldi	r21, 0x49	; 73
    2950:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    2954:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <lround>
    2958:	60 93 af 21 	sts	0x21AF, r22
    295c:	70 93 b0 21 	sts	0x21B0, r23
    2960:	80 93 b1 21 	sts	0x21B1, r24
    2964:	90 93 b2 21 	sts	0x21B2, r25
	}
	mc.move_type = MC_TYPE_LINE;
    2968:	10 92 8a 21 	sts	0x218A, r1
	mc.line_state = MC_STATE_NEW;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	80 93 89 21 	sts	0x2189, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    2972:	eb e8       	ldi	r30, 0x8B	; 139
    2974:	f1 e2       	ldi	r31, 0x21	; 33
    2976:	df 01       	movw	r26, r30
    2978:	1c 96       	adiw	r26, 0x0c	; 12
    297a:	8c e0       	ldi	r24, 0x0C	; 12
    297c:	0d 90       	ld	r0, X+
    297e:	01 92       	st	Z+, r0
    2980:	81 50       	subi	r24, 0x01	; 1
    2982:	e1 f7       	brne	.-8      	; 0x297c <mc_line+0x266>
	return (mc_line_continue());
    2984:	0e 94 a4 12 	call	0x2548	; 0x2548 <mc_line_continue>
    2988:	9c 01       	movw	r18, r24
}
    298a:	c9 01       	movw	r24, r18
    298c:	62 96       	adiw	r28, 0x12	; 18
    298e:	cd bf       	out	0x3d, r28	; 61
    2990:	de bf       	out	0x3e, r29	; 62
    2992:	cf 91       	pop	r28
    2994:	df 91       	pop	r29
    2996:	1f 91       	pop	r17
    2998:	0f 91       	pop	r16
    299a:	ff 90       	pop	r15
    299c:	ef 90       	pop	r14
    299e:	df 90       	pop	r13
    29a0:	cf 90       	pop	r12
    29a2:	bf 90       	pop	r11
    29a4:	af 90       	pop	r10
    29a6:	9f 90       	pop	r9
    29a8:	8f 90       	pop	r8
    29aa:	7f 90       	pop	r7
    29ac:	6f 90       	pop	r6
    29ae:	5f 90       	pop	r5
    29b0:	4f 90       	pop	r4
    29b2:	3f 90       	pop	r3
    29b4:	2f 90       	pop	r2
    29b6:	08 95       	ret

000029b8 <mc_arc_continue>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continue() 
{
    29b8:	8f 92       	push	r8
    29ba:	9f 92       	push	r9
    29bc:	af 92       	push	r10
    29be:	bf 92       	push	r11
    29c0:	cf 92       	push	r12
    29c2:	df 92       	push	r13
    29c4:	ef 92       	push	r14
    29c6:	ff 92       	push	r15
    29c8:	0f 93       	push	r16
    29ca:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    29cc:	80 91 e1 22 	lds	r24, 0x22E1
    29d0:	88 23       	and	r24, r24
    29d2:	19 f4       	brne	.+6      	; 0x29da <mc_arc_continue+0x22>
    29d4:	23 e0       	ldi	r18, 0x03	; 3
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	de c0       	rjmp	.+444    	; 0x2b96 <mc_arc_continue+0x1de>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    29da:	81 30       	cpi	r24, 0x01	; 1
    29dc:	39 f4       	brne	.+14     	; 0x29ec <mc_arc_continue+0x34>
		ma.segment_counter=0;
    29de:	10 92 e4 22 	sts	0x22E4, r1
    29e2:	10 92 e5 22 	sts	0x22E5, r1
		ma.arc_state = MC_STATE_RUNNING;
    29e6:	82 e0       	ldi	r24, 0x02	; 2
    29e8:	80 93 e1 22 	sts	0x22E1, r24
	}
	mc.move_type = MC_TYPE_LINE;
    29ec:	10 92 8a 21 	sts	0x218A, r1
    29f0:	c2 c0       	rjmp	.+388    	; 0x2b76 <mc_arc_continue+0x1be>
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    29f2:	0e 94 22 24 	call	0x4844	; 0x4844 <mv_test_move_buffer_full>
    29f6:	88 23       	and	r24, r24
    29f8:	19 f0       	breq	.+6      	; 0x2a00 <mc_arc_continue+0x48>
    29fa:	22 e0       	ldi	r18, 0x02	; 2
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	cb c0       	rjmp	.+406    	; 0x2b96 <mc_arc_continue+0x1de>
			return (TG_EAGAIN);
		}
		ma.segment_counter++;
    2a00:	80 91 e4 22 	lds	r24, 0x22E4
    2a04:	90 91 e5 22 	lds	r25, 0x22E5
    2a08:	01 96       	adiw	r24, 0x01	; 1
    2a0a:	80 93 e4 22 	sts	0x22E4, r24
    2a0e:	90 93 e5 22 	sts	0x22E5, r25
		ma.theta += ma.theta_per_segment;
    2a12:	60 91 06 23 	lds	r22, 0x2306
    2a16:	70 91 07 23 	lds	r23, 0x2307
    2a1a:	80 91 08 23 	lds	r24, 0x2308
    2a1e:	90 91 09 23 	lds	r25, 0x2309
    2a22:	20 91 12 23 	lds	r18, 0x2312
    2a26:	30 91 13 23 	lds	r19, 0x2313
    2a2a:	40 91 14 23 	lds	r20, 0x2314
    2a2e:	50 91 15 23 	lds	r21, 0x2315
    2a32:	0e 94 cc 38 	call	0x7198	; 0x7198 <__addsf3>
    2a36:	7b 01       	movw	r14, r22
    2a38:	8c 01       	movw	r16, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	d8 01       	movw	r26, r16
    2a3e:	80 93 06 23 	sts	0x2306, r24
    2a42:	90 93 07 23 	sts	0x2307, r25
    2a46:	a0 93 08 23 	sts	0x2308, r26
    2a4a:	b0 93 09 23 	sts	0x2309, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    2a4e:	b7 01       	movw	r22, r14
    2a50:	c8 01       	movw	r24, r16
    2a52:	0e 94 90 3c 	call	0x7920	; 0x7920 <sin>
    2a56:	80 90 0a 23 	lds	r8, 0x230A
    2a5a:	90 90 0b 23 	lds	r9, 0x230B
    2a5e:	a0 90 0c 23 	lds	r10, 0x230C
    2a62:	b0 90 0d 23 	lds	r11, 0x230D
    2a66:	c0 90 e8 22 	lds	r12, 0x22E8
    2a6a:	d0 90 e9 22 	lds	r13, 0x22E9
    2a6e:	cc 0c       	add	r12, r12
    2a70:	dd 1c       	adc	r13, r13
    2a72:	cc 0c       	add	r12, r12
    2a74:	dd 1c       	adc	r13, r13
    2a76:	21 ee       	ldi	r18, 0xE1	; 225
    2a78:	32 e2       	ldi	r19, 0x22	; 34
    2a7a:	c2 0e       	add	r12, r18
    2a7c:	d3 1e       	adc	r13, r19
    2a7e:	a5 01       	movw	r20, r10
    2a80:	94 01       	movw	r18, r8
    2a82:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    2a86:	9b 01       	movw	r18, r22
    2a88:	ac 01       	movw	r20, r24
    2a8a:	60 91 fe 22 	lds	r22, 0x22FE
    2a8e:	70 91 ff 22 	lds	r23, 0x22FF
    2a92:	80 91 00 23 	lds	r24, 0x2300
    2a96:	90 91 01 23 	lds	r25, 0x2301
    2a9a:	0e 94 cc 38 	call	0x7198	; 0x7198 <__addsf3>
    2a9e:	f6 01       	movw	r30, r12
    2aa0:	65 87       	std	Z+13, r22	; 0x0d
    2aa2:	76 87       	std	Z+14, r23	; 0x0e
    2aa4:	87 87       	std	Z+15, r24	; 0x0f
    2aa6:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    2aa8:	b7 01       	movw	r22, r14
    2aaa:	c8 01       	movw	r24, r16
    2aac:	0e 94 6f 39 	call	0x72de	; 0x72de <cos>
    2ab0:	00 91 ea 22 	lds	r16, 0x22EA
    2ab4:	10 91 eb 22 	lds	r17, 0x22EB
    2ab8:	00 0f       	add	r16, r16
    2aba:	11 1f       	adc	r17, r17
    2abc:	00 0f       	add	r16, r16
    2abe:	11 1f       	adc	r17, r17
    2ac0:	0f 51       	subi	r16, 0x1F	; 31
    2ac2:	1d 4d       	sbci	r17, 0xDD	; 221
    2ac4:	a5 01       	movw	r20, r10
    2ac6:	94 01       	movw	r18, r8
    2ac8:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    2acc:	9b 01       	movw	r18, r22
    2ace:	ac 01       	movw	r20, r24
    2ad0:	60 91 02 23 	lds	r22, 0x2302
    2ad4:	70 91 03 23 	lds	r23, 0x2303
    2ad8:	80 91 04 23 	lds	r24, 0x2304
    2adc:	90 91 05 23 	lds	r25, 0x2305
    2ae0:	0e 94 cc 38 	call	0x7198	; 0x7198 <__addsf3>
    2ae4:	f8 01       	movw	r30, r16
    2ae6:	65 87       	std	Z+13, r22	; 0x0d
    2ae8:	76 87       	std	Z+14, r23	; 0x0e
    2aea:	87 87       	std	Z+15, r24	; 0x0f
    2aec:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    2aee:	00 91 ec 22 	lds	r16, 0x22EC
    2af2:	10 91 ed 22 	lds	r17, 0x22ED
    2af6:	00 0f       	add	r16, r16
    2af8:	11 1f       	adc	r17, r17
    2afa:	00 0f       	add	r16, r16
    2afc:	11 1f       	adc	r17, r17
    2afe:	0f 51       	subi	r16, 0x1F	; 31
    2b00:	1d 4d       	sbci	r17, 0xDD	; 221
    2b02:	f8 01       	movw	r30, r16
    2b04:	65 85       	ldd	r22, Z+13	; 0x0d
    2b06:	76 85       	ldd	r23, Z+14	; 0x0e
    2b08:	87 85       	ldd	r24, Z+15	; 0x0f
    2b0a:	90 89       	ldd	r25, Z+16	; 0x10
    2b0c:	20 91 16 23 	lds	r18, 0x2316
    2b10:	30 91 17 23 	lds	r19, 0x2317
    2b14:	40 91 18 23 	lds	r20, 0x2318
    2b18:	50 91 19 23 	lds	r21, 0x2319
    2b1c:	0e 94 cc 38 	call	0x7198	; 0x7198 <__addsf3>
    2b20:	f8 01       	movw	r30, r16
    2b22:	65 87       	std	Z+13, r22	; 0x0d
    2b24:	76 87       	std	Z+14, r23	; 0x0e
    2b26:	87 87       	std	Z+15, r24	; 0x0f
    2b28:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    2b2a:	60 91 ee 22 	lds	r22, 0x22EE
    2b2e:	70 91 ef 22 	lds	r23, 0x22EF
    2b32:	80 91 f0 22 	lds	r24, 0x22F0
    2b36:	90 91 f1 22 	lds	r25, 0x22F1
    2b3a:	20 91 f2 22 	lds	r18, 0x22F2
    2b3e:	30 91 f3 22 	lds	r19, 0x22F3
    2b42:	40 91 f4 22 	lds	r20, 0x22F4
    2b46:	50 91 f5 22 	lds	r21, 0x22F5
    2b4a:	e0 90 f6 22 	lds	r14, 0x22F6
    2b4e:	f0 90 f7 22 	lds	r15, 0x22F7
    2b52:	00 91 f8 22 	lds	r16, 0x22F8
    2b56:	10 91 f9 22 	lds	r17, 0x22F9
    2b5a:	a0 90 0e 23 	lds	r10, 0x230E
    2b5e:	b0 90 0f 23 	lds	r11, 0x230F
    2b62:	c0 90 10 23 	lds	r12, 0x2310
    2b66:	d0 90 11 23 	lds	r13, 0x2311
    2b6a:	80 90 e6 22 	lds	r8, 0x22E6
    2b6e:	90 90 e7 22 	lds	r9, 0x22E7
    2b72:	0e 94 8b 13 	call	0x2716	; 0x2716 <mc_line>
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	mc.move_type = MC_TYPE_LINE;
	while (ma.segment_counter <= ma.segments) {
    2b76:	20 91 e4 22 	lds	r18, 0x22E4
    2b7a:	30 91 e5 22 	lds	r19, 0x22E5
    2b7e:	80 91 e2 22 	lds	r24, 0x22E2
    2b82:	90 91 e3 22 	lds	r25, 0x22E3
    2b86:	82 17       	cp	r24, r18
    2b88:	93 07       	cpc	r25, r19
    2b8a:	0c f0       	brlt	.+2      	; 0x2b8e <mc_arc_continue+0x1d6>
    2b8c:	32 cf       	rjmp	.-412    	; 0x29f2 <mc_arc_continue+0x3a>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    2b8e:	10 92 e1 22 	sts	0x22E1, r1
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    2b96:	c9 01       	movw	r24, r18
    2b98:	1f 91       	pop	r17
    2b9a:	0f 91       	pop	r16
    2b9c:	ff 90       	pop	r15
    2b9e:	ef 90       	pop	r14
    2ba0:	df 90       	pop	r13
    2ba2:	cf 90       	pop	r12
    2ba4:	bf 90       	pop	r11
    2ba6:	af 90       	pop	r10
    2ba8:	9f 90       	pop	r9
    2baa:	8f 90       	pop	r8
    2bac:	08 95       	ret

00002bae <mc_arc>:
 */

int mc_arc(double theta, double angular_travel, double radius, 
		   double linear_travel, int axis_1, int axis_2, int axis_linear, 
		   double feed_rate, int invert_feed_rate)
{
    2bae:	2f 92       	push	r2
    2bb0:	3f 92       	push	r3
    2bb2:	4f 92       	push	r4
    2bb4:	5f 92       	push	r5
    2bb6:	6f 92       	push	r6
    2bb8:	7f 92       	push	r7
    2bba:	8f 92       	push	r8
    2bbc:	9f 92       	push	r9
    2bbe:	af 92       	push	r10
    2bc0:	bf 92       	push	r11
    2bc2:	cf 92       	push	r12
    2bc4:	df 92       	push	r13
    2bc6:	ef 92       	push	r14
    2bc8:	ff 92       	push	r15
    2bca:	0f 93       	push	r16
    2bcc:	1f 93       	push	r17
    2bce:	df 93       	push	r29
    2bd0:	cf 93       	push	r28
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	28 97       	sbiw	r28, 0x08	; 8
    2bd8:	cd bf       	out	0x3d, r28	; 61
    2bda:	de bf       	out	0x3e, r29	; 62
    2bdc:	69 83       	std	Y+1, r22	; 0x01
    2bde:	7a 83       	std	Y+2, r23	; 0x02
    2be0:	8b 83       	std	Y+3, r24	; 0x03
    2be2:	9c 83       	std	Y+4, r25	; 0x04
    2be4:	29 01       	movw	r4, r18
    2be6:	3a 01       	movw	r6, r20
    2be8:	ed 82       	std	Y+5, r14	; 0x05
    2bea:	fe 82       	std	Y+6, r15	; 0x06
    2bec:	0f 83       	std	Y+7, r16	; 0x07
    2bee:	18 87       	std	Y+8, r17	; 0x08
    2bf0:	14 01       	movw	r2, r8
    2bf2:	88 a0       	ldd	r8, Y+32	; 0x20
    2bf4:	99 a0       	ldd	r9, Y+33	; 0x21
	// load the move and arc structs
	mc.move_type = MC_TYPE_LINE;
    2bf6:	10 92 8a 21 	sts	0x218A, r1
	ma.theta = theta;
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	80 93 06 23 	sts	0x2306, r24
    2c02:	90 93 07 23 	sts	0x2307, r25
    2c06:	a0 93 08 23 	sts	0x2308, r26
    2c0a:	b0 93 09 23 	sts	0x2309, r27
	ma.radius = radius;
    2c0e:	e0 92 0a 23 	sts	0x230A, r14
    2c12:	f0 92 0b 23 	sts	0x230B, r15
    2c16:	00 93 0c 23 	sts	0x230C, r16
    2c1a:	10 93 0d 23 	sts	0x230D, r17
	ma.angular_travel = angular_travel;
    2c1e:	20 93 1a 23 	sts	0x231A, r18
    2c22:	30 93 1b 23 	sts	0x231B, r19
    2c26:	40 93 1c 23 	sts	0x231C, r20
    2c2a:	50 93 1d 23 	sts	0x231D, r21
	ma.linear_travel = linear_travel;
    2c2e:	a0 92 1e 23 	sts	0x231E, r10
    2c32:	b0 92 1f 23 	sts	0x231F, r11
    2c36:	c0 92 20 23 	sts	0x2320, r12
    2c3a:	d0 92 21 23 	sts	0x2321, r13
	ma.feed_rate = feed_rate;
    2c3e:	8a a1       	ldd	r24, Y+34	; 0x22
    2c40:	9b a1       	ldd	r25, Y+35	; 0x23
    2c42:	ac a1       	ldd	r26, Y+36	; 0x24
    2c44:	bd a1       	ldd	r27, Y+37	; 0x25
    2c46:	80 93 0e 23 	sts	0x230E, r24
    2c4a:	90 93 0f 23 	sts	0x230F, r25
    2c4e:	a0 93 10 23 	sts	0x2310, r26
    2c52:	b0 93 11 23 	sts	0x2311, r27
	ma.invert_feed_rate = invert_feed_rate;
    2c56:	ae a1       	ldd	r26, Y+38	; 0x26
    2c58:	bf a1       	ldd	r27, Y+39	; 0x27
    2c5a:	a0 93 e6 22 	sts	0x22E6, r26
    2c5e:	b0 93 e7 22 	sts	0x22E7, r27
	ma.axis_1 = axis_1;
    2c62:	20 92 e8 22 	sts	0x22E8, r2
    2c66:	30 92 e9 22 	sts	0x22E9, r3
	ma.axis_2 = axis_2;
    2c6a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c6c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c6e:	e0 93 ea 22 	sts	0x22EA, r30
    2c72:	f0 93 eb 22 	sts	0x22EB, r31
	ma.axis_linear = axis_linear;
    2c76:	80 92 ec 22 	sts	0x22EC, r8
    2c7a:	90 92 ed 22 	sts	0x22ED, r9
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    2c7e:	ca 01       	movw	r24, r20
    2c80:	b9 01       	movw	r22, r18
    2c82:	a8 01       	movw	r20, r16
    2c84:	97 01       	movw	r18, r14
    2c86:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    2c8a:	7b 01       	movw	r14, r22
    2c8c:	8c 01       	movw	r16, r24
    2c8e:	c6 01       	movw	r24, r12
    2c90:	b5 01       	movw	r22, r10
    2c92:	0e 94 da 39 	call	0x73b4	; 0x73b4 <__fixsfsi>
    2c96:	97 ff       	sbrs	r25, 7
    2c98:	07 c0       	rjmp	.+14     	; 0x2ca8 <mc_arc+0xfa>
    2c9a:	90 95       	com	r25
    2c9c:	80 95       	com	r24
    2c9e:	70 95       	com	r23
    2ca0:	61 95       	neg	r22
    2ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca8:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    2cac:	9b 01       	movw	r18, r22
    2cae:	ac 01       	movw	r20, r24
    2cb0:	c8 01       	movw	r24, r16
    2cb2:	b7 01       	movw	r22, r14
    2cb4:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <hypot>
    2cb8:	7b 01       	movw	r14, r22
    2cba:	8c 01       	movw	r16, r24
    2cbc:	60 93 fa 22 	sts	0x22FA, r22
    2cc0:	70 93 fb 22 	sts	0x22FB, r23
    2cc4:	80 93 fc 22 	sts	0x22FC, r24
    2cc8:	90 93 fd 22 	sts	0x22FD, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    2ccc:	2d ec       	ldi	r18, 0xCD	; 205
    2cce:	3c ec       	ldi	r19, 0xCC	; 204
    2cd0:	4c e4       	ldi	r20, 0x4C	; 76
    2cd2:	5d e3       	ldi	r21, 0x3D	; 61
    2cd4:	0e 94 6b 39 	call	0x72d6	; 0x72d6 <__cmpsf2>
    2cd8:	88 23       	and	r24, r24
    2cda:	1c f4       	brge	.+6      	; 0x2ce2 <mc_arc+0x134>
    2cdc:	23 e1       	ldi	r18, 0x13	; 19
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	00 c1       	rjmp	.+512    	; 0x2ee2 <mc_arc+0x334>
		return (TG_ARC_SPECIFICATION_ERROR);
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    2ce2:	c8 01       	movw	r24, r16
    2ce4:	b7 01       	movw	r22, r14
    2ce6:	20 91 75 22 	lds	r18, 0x2275
    2cea:	30 91 76 22 	lds	r19, 0x2276
    2cee:	40 91 77 22 	lds	r20, 0x2277
    2cf2:	50 91 78 22 	lds	r21, 0x2278
    2cf6:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    2cfa:	0e 94 58 39 	call	0x72b0	; 0x72b0 <ceil>
    2cfe:	0e 94 da 39 	call	0x73b4	; 0x73b4 <__fixsfsi>
    2d02:	8b 01       	movw	r16, r22
    2d04:	60 93 e2 22 	sts	0x22E2, r22
    2d08:	70 93 e3 22 	sts	0x22E3, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    2d0c:	2e a1       	ldd	r18, Y+38	; 0x26
    2d0e:	3f a1       	ldd	r19, Y+39	; 0x27
    2d10:	23 2b       	or	r18, r19
    2d12:	b9 f0       	breq	.+46     	; 0x2d42 <mc_arc+0x194>
		ma.feed_rate *= ma.segments; 
    2d14:	b8 01       	movw	r22, r16
    2d16:	88 27       	eor	r24, r24
    2d18:	77 fd       	sbrc	r23, 7
    2d1a:	80 95       	com	r24
    2d1c:	98 2f       	mov	r25, r24
    2d1e:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    2d22:	9b 01       	movw	r18, r22
    2d24:	ac 01       	movw	r20, r24
    2d26:	6a a1       	ldd	r22, Y+34	; 0x22
    2d28:	7b a1       	ldd	r23, Y+35	; 0x23
    2d2a:	8c a1       	ldd	r24, Y+36	; 0x24
    2d2c:	9d a1       	ldd	r25, Y+37	; 0x25
    2d2e:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    2d32:	60 93 0e 23 	sts	0x230E, r22
    2d36:	70 93 0f 23 	sts	0x230F, r23
    2d3a:	80 93 10 23 	sts	0x2310, r24
    2d3e:	90 93 11 23 	sts	0x2311, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    2d42:	b8 01       	movw	r22, r16
    2d44:	88 27       	eor	r24, r24
    2d46:	77 fd       	sbrc	r23, 7
    2d48:	80 95       	com	r24
    2d4a:	98 2f       	mov	r25, r24
    2d4c:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    2d50:	7b 01       	movw	r14, r22
    2d52:	8c 01       	movw	r16, r24
    2d54:	c3 01       	movw	r24, r6
    2d56:	b2 01       	movw	r22, r4
    2d58:	a8 01       	movw	r20, r16
    2d5a:	97 01       	movw	r18, r14
    2d5c:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    2d60:	60 93 12 23 	sts	0x2312, r22
    2d64:	70 93 13 23 	sts	0x2313, r23
    2d68:	80 93 14 23 	sts	0x2314, r24
    2d6c:	90 93 15 23 	sts	0x2315, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    2d70:	c6 01       	movw	r24, r12
    2d72:	b5 01       	movw	r22, r10
    2d74:	a8 01       	movw	r20, r16
    2d76:	97 01       	movw	r18, r14
    2d78:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    2d7c:	60 93 16 23 	sts	0x2316, r22
    2d80:	70 93 17 23 	sts	0x2317, r23
    2d84:	80 93 18 23 	sts	0x2318, r24
    2d88:	90 93 19 23 	sts	0x2319, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    2d8c:	69 81       	ldd	r22, Y+1	; 0x01
    2d8e:	7a 81       	ldd	r23, Y+2	; 0x02
    2d90:	8b 81       	ldd	r24, Y+3	; 0x03
    2d92:	9c 81       	ldd	r25, Y+4	; 0x04
    2d94:	0e 94 90 3c 	call	0x7920	; 0x7920 <sin>
    2d98:	5b 01       	movw	r10, r22
    2d9a:	6c 01       	movw	r12, r24
    2d9c:	81 01       	movw	r16, r2
    2d9e:	00 0f       	add	r16, r16
    2da0:	11 1f       	adc	r17, r17
    2da2:	f8 01       	movw	r30, r16
    2da4:	ee 0f       	add	r30, r30
    2da6:	ff 1f       	adc	r31, r31
    2da8:	e5 57       	subi	r30, 0x75	; 117
    2daa:	fe 4d       	sbci	r31, 0xDE	; 222
    2dac:	60 81       	ld	r22, Z
    2dae:	71 81       	ldd	r23, Z+1	; 0x01
    2db0:	82 81       	ldd	r24, Z+2	; 0x02
    2db2:	93 81       	ldd	r25, Z+3	; 0x03
    2db4:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    2db8:	02 0d       	add	r16, r2
    2dba:	13 1d       	adc	r17, r3
    2dbc:	23 e0       	ldi	r18, 0x03	; 3
    2dbe:	00 0f       	add	r16, r16
    2dc0:	11 1f       	adc	r17, r17
    2dc2:	2a 95       	dec	r18
    2dc4:	e1 f7       	brne	.-8      	; 0x2dbe <mc_arc+0x210>
    2dc6:	0d 58       	subi	r16, 0x8D	; 141
    2dc8:	1d 4d       	sbci	r17, 0xDD	; 221
    2dca:	d8 01       	movw	r26, r16
    2dcc:	91 96       	adiw	r26, 0x21	; 33
    2dce:	2d 91       	ld	r18, X+
    2dd0:	3d 91       	ld	r19, X+
    2dd2:	4d 91       	ld	r20, X+
    2dd4:	5c 91       	ld	r21, X
    2dd6:	94 97       	sbiw	r26, 0x24	; 36
    2dd8:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    2ddc:	7b 01       	movw	r14, r22
    2dde:	8c 01       	movw	r16, r24
    2de0:	c6 01       	movw	r24, r12
    2de2:	b5 01       	movw	r22, r10
    2de4:	2d 81       	ldd	r18, Y+5	; 0x05
    2de6:	3e 81       	ldd	r19, Y+6	; 0x06
    2de8:	4f 81       	ldd	r20, Y+7	; 0x07
    2dea:	58 85       	ldd	r21, Y+8	; 0x08
    2dec:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    2df0:	9b 01       	movw	r18, r22
    2df2:	ac 01       	movw	r20, r24
    2df4:	c8 01       	movw	r24, r16
    2df6:	b7 01       	movw	r22, r14
    2df8:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
    2dfc:	60 93 fe 22 	sts	0x22FE, r22
    2e00:	70 93 ff 22 	sts	0x22FF, r23
    2e04:	80 93 00 23 	sts	0x2300, r24
    2e08:	90 93 01 23 	sts	0x2301, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    2e0c:	69 81       	ldd	r22, Y+1	; 0x01
    2e0e:	7a 81       	ldd	r23, Y+2	; 0x02
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
    2e12:	9c 81       	ldd	r25, Y+4	; 0x04
    2e14:	0e 94 6f 39 	call	0x72de	; 0x72de <cos>
    2e18:	5b 01       	movw	r10, r22
    2e1a:	6c 01       	movw	r12, r24
    2e1c:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2e1e:	1f 8d       	ldd	r17, Y+31	; 0x1f
    2e20:	00 0f       	add	r16, r16
    2e22:	11 1f       	adc	r17, r17
    2e24:	f8 01       	movw	r30, r16
    2e26:	ee 0f       	add	r30, r30
    2e28:	ff 1f       	adc	r31, r31
    2e2a:	e5 57       	subi	r30, 0x75	; 117
    2e2c:	fe 4d       	sbci	r31, 0xDE	; 222
    2e2e:	60 81       	ld	r22, Z
    2e30:	71 81       	ldd	r23, Z+1	; 0x01
    2e32:	82 81       	ldd	r24, Z+2	; 0x02
    2e34:	93 81       	ldd	r25, Z+3	; 0x03
    2e36:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    2e3a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2e3c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2e3e:	0e 0f       	add	r16, r30
    2e40:	1f 1f       	adc	r17, r31
    2e42:	e3 e0       	ldi	r30, 0x03	; 3
    2e44:	00 0f       	add	r16, r16
    2e46:	11 1f       	adc	r17, r17
    2e48:	ea 95       	dec	r30
    2e4a:	e1 f7       	brne	.-8      	; 0x2e44 <mc_arc+0x296>
    2e4c:	0d 58       	subi	r16, 0x8D	; 141
    2e4e:	1d 4d       	sbci	r17, 0xDD	; 221
    2e50:	d8 01       	movw	r26, r16
    2e52:	91 96       	adiw	r26, 0x21	; 33
    2e54:	2d 91       	ld	r18, X+
    2e56:	3d 91       	ld	r19, X+
    2e58:	4d 91       	ld	r20, X+
    2e5a:	5c 91       	ld	r21, X
    2e5c:	94 97       	sbiw	r26, 0x24	; 36
    2e5e:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    2e62:	7b 01       	movw	r14, r22
    2e64:	8c 01       	movw	r16, r24
    2e66:	c6 01       	movw	r24, r12
    2e68:	b5 01       	movw	r22, r10
    2e6a:	2d 81       	ldd	r18, Y+5	; 0x05
    2e6c:	3e 81       	ldd	r19, Y+6	; 0x06
    2e6e:	4f 81       	ldd	r20, Y+7	; 0x07
    2e70:	58 85       	ldd	r21, Y+8	; 0x08
    2e72:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    2e76:	9b 01       	movw	r18, r22
    2e78:	ac 01       	movw	r20, r24
    2e7a:	c8 01       	movw	r24, r16
    2e7c:	b7 01       	movw	r22, r14
    2e7e:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
    2e82:	60 93 02 23 	sts	0x2302, r22
    2e86:	70 93 03 23 	sts	0x2303, r23
    2e8a:	80 93 04 23 	sts	0x2304, r24
    2e8e:	90 93 05 23 	sts	0x2305, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    2e92:	88 0c       	add	r8, r8
    2e94:	99 1c       	adc	r9, r9
    2e96:	88 0c       	add	r8, r8
    2e98:	99 1c       	adc	r9, r9
    2e9a:	f4 01       	movw	r30, r8
    2e9c:	e5 57       	subi	r30, 0x75	; 117
    2e9e:	fe 4d       	sbci	r31, 0xDE	; 222
    2ea0:	60 81       	ld	r22, Z
    2ea2:	71 81       	ldd	r23, Z+1	; 0x01
    2ea4:	82 81       	ldd	r24, Z+2	; 0x02
    2ea6:	93 81       	ldd	r25, Z+3	; 0x03
    2ea8:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    2eac:	20 91 c4 22 	lds	r18, 0x22C4
    2eb0:	30 91 c5 22 	lds	r19, 0x22C5
    2eb4:	40 91 c6 22 	lds	r20, 0x22C6
    2eb8:	50 91 c7 22 	lds	r21, 0x22C7
    2ebc:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    2ec0:	e1 ee       	ldi	r30, 0xE1	; 225
    2ec2:	f2 e2       	ldi	r31, 0x22	; 34
    2ec4:	8e 0e       	add	r8, r30
    2ec6:	9f 1e       	adc	r9, r31
    2ec8:	d4 01       	movw	r26, r8
    2eca:	1d 96       	adiw	r26, 0x0d	; 13
    2ecc:	6d 93       	st	X+, r22
    2ece:	7d 93       	st	X+, r23
    2ed0:	8d 93       	st	X+, r24
    2ed2:	9c 93       	st	X, r25
    2ed4:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	80 93 e1 22 	sts	0x22E1, r24
	return (mc_arc_continue());
    2edc:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <mc_arc_continue>
    2ee0:	9c 01       	movw	r18, r24
}
    2ee2:	c9 01       	movw	r24, r18
    2ee4:	28 96       	adiw	r28, 0x08	; 8
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	de bf       	out	0x3e, r29	; 62
    2eea:	cf 91       	pop	r28
    2eec:	df 91       	pop	r29
    2eee:	1f 91       	pop	r17
    2ef0:	0f 91       	pop	r16
    2ef2:	ff 90       	pop	r15
    2ef4:	ef 90       	pop	r14
    2ef6:	df 90       	pop	r13
    2ef8:	cf 90       	pop	r12
    2efa:	bf 90       	pop	r11
    2efc:	af 90       	pop	r10
    2efe:	9f 90       	pop	r9
    2f00:	8f 90       	pop	r8
    2f02:	7f 90       	pop	r7
    2f04:	6f 90       	pop	r6
    2f06:	5f 90       	pop	r5
    2f08:	4f 90       	pop	r4
    2f0a:	3f 90       	pop	r3
    2f0c:	2f 90       	pop	r2
    2f0e:	08 95       	ret

00002f10 <mc_arc_blocking>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc_blocking(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    2f10:	2f 92       	push	r2
    2f12:	3f 92       	push	r3
    2f14:	4f 92       	push	r4
    2f16:	5f 92       	push	r5
    2f18:	6f 92       	push	r6
    2f1a:	7f 92       	push	r7
    2f1c:	8f 92       	push	r8
    2f1e:	9f 92       	push	r9
    2f20:	af 92       	push	r10
    2f22:	bf 92       	push	r11
    2f24:	cf 92       	push	r12
    2f26:	df 92       	push	r13
    2f28:	ef 92       	push	r14
    2f2a:	ff 92       	push	r15
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	df 93       	push	r29
    2f32:	cf 93       	push	r28
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	28 97       	sbiw	r28, 0x08	; 8
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	de bf       	out	0x3e, r29	; 62
    2f3e:	69 83       	std	Y+1, r22	; 0x01
    2f40:	7a 83       	std	Y+2, r23	; 0x02
    2f42:	8b 83       	std	Y+3, r24	; 0x03
    2f44:	9c 83       	std	Y+4, r25	; 0x04
    2f46:	29 01       	movw	r4, r18
    2f48:	3a 01       	movw	r6, r20
    2f4a:	ed 82       	std	Y+5, r14	; 0x05
    2f4c:	fe 82       	std	Y+6, r15	; 0x06
    2f4e:	0f 83       	std	Y+7, r16	; 0x07
    2f50:	18 87       	std	Y+8, r17	; 0x08
    2f52:	14 01       	movw	r2, r8
    2f54:	88 a0       	ldd	r8, Y+32	; 0x20
    2f56:	99 a0       	ldd	r9, Y+33	; 0x21
	// load the move and arc structs
	mc.move_type = MC_TYPE_LINE;
    2f58:	10 92 8a 21 	sts	0x218A, r1
	ma.theta = theta;
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	80 93 06 23 	sts	0x2306, r24
    2f64:	90 93 07 23 	sts	0x2307, r25
    2f68:	a0 93 08 23 	sts	0x2308, r26
    2f6c:	b0 93 09 23 	sts	0x2309, r27
	ma.radius = radius;
    2f70:	e0 92 0a 23 	sts	0x230A, r14
    2f74:	f0 92 0b 23 	sts	0x230B, r15
    2f78:	00 93 0c 23 	sts	0x230C, r16
    2f7c:	10 93 0d 23 	sts	0x230D, r17
	ma.angular_travel = angular_travel;
    2f80:	20 93 1a 23 	sts	0x231A, r18
    2f84:	30 93 1b 23 	sts	0x231B, r19
    2f88:	40 93 1c 23 	sts	0x231C, r20
    2f8c:	50 93 1d 23 	sts	0x231D, r21
	ma.linear_travel = linear_travel;
    2f90:	a0 92 1e 23 	sts	0x231E, r10
    2f94:	b0 92 1f 23 	sts	0x231F, r11
    2f98:	c0 92 20 23 	sts	0x2320, r12
    2f9c:	d0 92 21 23 	sts	0x2321, r13
	ma.feed_rate = feed_rate;
    2fa0:	8a a1       	ldd	r24, Y+34	; 0x22
    2fa2:	9b a1       	ldd	r25, Y+35	; 0x23
    2fa4:	ac a1       	ldd	r26, Y+36	; 0x24
    2fa6:	bd a1       	ldd	r27, Y+37	; 0x25
    2fa8:	80 93 0e 23 	sts	0x230E, r24
    2fac:	90 93 0f 23 	sts	0x230F, r25
    2fb0:	a0 93 10 23 	sts	0x2310, r26
    2fb4:	b0 93 11 23 	sts	0x2311, r27
	ma.invert_feed_rate = invert_feed_rate;
    2fb8:	ae a1       	ldd	r26, Y+38	; 0x26
    2fba:	bf a1       	ldd	r27, Y+39	; 0x27
    2fbc:	a0 93 e6 22 	sts	0x22E6, r26
    2fc0:	b0 93 e7 22 	sts	0x22E7, r27
	ma.axis_1 = axis_1;
    2fc4:	20 92 e8 22 	sts	0x22E8, r2
    2fc8:	30 92 e9 22 	sts	0x22E9, r3
	ma.axis_2 = axis_2;
    2fcc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2fce:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2fd0:	e0 93 ea 22 	sts	0x22EA, r30
    2fd4:	f0 93 eb 22 	sts	0x22EB, r31
	ma.axis_linear = axis_linear;
    2fd8:	80 92 ec 22 	sts	0x22EC, r8
    2fdc:	90 92 ed 22 	sts	0x22ED, r9
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    2fe0:	ca 01       	movw	r24, r20
    2fe2:	b9 01       	movw	r22, r18
    2fe4:	a8 01       	movw	r20, r16
    2fe6:	97 01       	movw	r18, r14
    2fe8:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    2fec:	7b 01       	movw	r14, r22
    2fee:	8c 01       	movw	r16, r24
    2ff0:	c6 01       	movw	r24, r12
    2ff2:	b5 01       	movw	r22, r10
    2ff4:	0e 94 da 39 	call	0x73b4	; 0x73b4 <__fixsfsi>
    2ff8:	97 ff       	sbrs	r25, 7
    2ffa:	07 c0       	rjmp	.+14     	; 0x300a <mc_arc_blocking+0xfa>
    2ffc:	90 95       	com	r25
    2ffe:	80 95       	com	r24
    3000:	70 95       	com	r23
    3002:	61 95       	neg	r22
    3004:	7f 4f       	sbci	r23, 0xFF	; 255
    3006:	8f 4f       	sbci	r24, 0xFF	; 255
    3008:	9f 4f       	sbci	r25, 0xFF	; 255
    300a:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    300e:	9b 01       	movw	r18, r22
    3010:	ac 01       	movw	r20, r24
    3012:	c8 01       	movw	r24, r16
    3014:	b7 01       	movw	r22, r14
    3016:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <hypot>
    301a:	7b 01       	movw	r14, r22
    301c:	8c 01       	movw	r16, r24
    301e:	60 93 fa 22 	sts	0x22FA, r22
    3022:	70 93 fb 22 	sts	0x22FB, r23
    3026:	80 93 fc 22 	sts	0x22FC, r24
    302a:	90 93 fd 22 	sts	0x22FD, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    302e:	2d ec       	ldi	r18, 0xCD	; 205
    3030:	3c ec       	ldi	r19, 0xCC	; 204
    3032:	4c e4       	ldi	r20, 0x4C	; 76
    3034:	5d e3       	ldi	r21, 0x3D	; 61
    3036:	0e 94 6b 39 	call	0x72d6	; 0x72d6 <__cmpsf2>
    303a:	88 23       	and	r24, r24
    303c:	1c f4       	brge	.+6      	; 0x3044 <mc_arc_blocking+0x134>
    303e:	23 e1       	ldi	r18, 0x13	; 19
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	cc c1       	rjmp	.+920    	; 0x33dc <mc_arc_blocking+0x4cc>
		return (TG_ARC_SPECIFICATION_ERROR);			
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3044:	c8 01       	movw	r24, r16
    3046:	b7 01       	movw	r22, r14
    3048:	20 91 75 22 	lds	r18, 0x2275
    304c:	30 91 76 22 	lds	r19, 0x2276
    3050:	40 91 77 22 	lds	r20, 0x2277
    3054:	50 91 78 22 	lds	r21, 0x2278
    3058:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    305c:	0e 94 58 39 	call	0x72b0	; 0x72b0 <ceil>
    3060:	0e 94 da 39 	call	0x73b4	; 0x73b4 <__fixsfsi>
    3064:	8b 01       	movw	r16, r22
    3066:	60 93 e2 22 	sts	0x22E2, r22
    306a:	70 93 e3 22 	sts	0x22E3, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    306e:	2e a1       	ldd	r18, Y+38	; 0x26
    3070:	3f a1       	ldd	r19, Y+39	; 0x27
    3072:	23 2b       	or	r18, r19
    3074:	b9 f0       	breq	.+46     	; 0x30a4 <mc_arc_blocking+0x194>
		ma.feed_rate *= ma.segments; 
    3076:	b8 01       	movw	r22, r16
    3078:	88 27       	eor	r24, r24
    307a:	77 fd       	sbrc	r23, 7
    307c:	80 95       	com	r24
    307e:	98 2f       	mov	r25, r24
    3080:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    3084:	9b 01       	movw	r18, r22
    3086:	ac 01       	movw	r20, r24
    3088:	6a a1       	ldd	r22, Y+34	; 0x22
    308a:	7b a1       	ldd	r23, Y+35	; 0x23
    308c:	8c a1       	ldd	r24, Y+36	; 0x24
    308e:	9d a1       	ldd	r25, Y+37	; 0x25
    3090:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    3094:	60 93 0e 23 	sts	0x230E, r22
    3098:	70 93 0f 23 	sts	0x230F, r23
    309c:	80 93 10 23 	sts	0x2310, r24
    30a0:	90 93 11 23 	sts	0x2311, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    30a4:	b8 01       	movw	r22, r16
    30a6:	88 27       	eor	r24, r24
    30a8:	77 fd       	sbrc	r23, 7
    30aa:	80 95       	com	r24
    30ac:	98 2f       	mov	r25, r24
    30ae:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    30b2:	7b 01       	movw	r14, r22
    30b4:	8c 01       	movw	r16, r24
    30b6:	c3 01       	movw	r24, r6
    30b8:	b2 01       	movw	r22, r4
    30ba:	a8 01       	movw	r20, r16
    30bc:	97 01       	movw	r18, r14
    30be:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    30c2:	60 93 12 23 	sts	0x2312, r22
    30c6:	70 93 13 23 	sts	0x2313, r23
    30ca:	80 93 14 23 	sts	0x2314, r24
    30ce:	90 93 15 23 	sts	0x2315, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    30d2:	c6 01       	movw	r24, r12
    30d4:	b5 01       	movw	r22, r10
    30d6:	a8 01       	movw	r20, r16
    30d8:	97 01       	movw	r18, r14
    30da:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    30de:	60 93 16 23 	sts	0x2316, r22
    30e2:	70 93 17 23 	sts	0x2317, r23
    30e6:	80 93 18 23 	sts	0x2318, r24
    30ea:	90 93 19 23 	sts	0x2319, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    30ee:	69 81       	ldd	r22, Y+1	; 0x01
    30f0:	7a 81       	ldd	r23, Y+2	; 0x02
    30f2:	8b 81       	ldd	r24, Y+3	; 0x03
    30f4:	9c 81       	ldd	r25, Y+4	; 0x04
    30f6:	0e 94 90 3c 	call	0x7920	; 0x7920 <sin>
    30fa:	5b 01       	movw	r10, r22
    30fc:	6c 01       	movw	r12, r24
    30fe:	81 01       	movw	r16, r2
    3100:	00 0f       	add	r16, r16
    3102:	11 1f       	adc	r17, r17
    3104:	f8 01       	movw	r30, r16
    3106:	ee 0f       	add	r30, r30
    3108:	ff 1f       	adc	r31, r31
    310a:	e5 57       	subi	r30, 0x75	; 117
    310c:	fe 4d       	sbci	r31, 0xDE	; 222
    310e:	60 81       	ld	r22, Z
    3110:	71 81       	ldd	r23, Z+1	; 0x01
    3112:	82 81       	ldd	r24, Z+2	; 0x02
    3114:	93 81       	ldd	r25, Z+3	; 0x03
    3116:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    311a:	02 0d       	add	r16, r2
    311c:	13 1d       	adc	r17, r3
    311e:	53 e0       	ldi	r21, 0x03	; 3
    3120:	00 0f       	add	r16, r16
    3122:	11 1f       	adc	r17, r17
    3124:	5a 95       	dec	r21
    3126:	e1 f7       	brne	.-8      	; 0x3120 <mc_arc_blocking+0x210>
    3128:	0d 58       	subi	r16, 0x8D	; 141
    312a:	1d 4d       	sbci	r17, 0xDD	; 221
    312c:	d8 01       	movw	r26, r16
    312e:	91 96       	adiw	r26, 0x21	; 33
    3130:	2d 91       	ld	r18, X+
    3132:	3d 91       	ld	r19, X+
    3134:	4d 91       	ld	r20, X+
    3136:	5c 91       	ld	r21, X
    3138:	94 97       	sbiw	r26, 0x24	; 36
    313a:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    313e:	7b 01       	movw	r14, r22
    3140:	8c 01       	movw	r16, r24
    3142:	c6 01       	movw	r24, r12
    3144:	b5 01       	movw	r22, r10
    3146:	2d 81       	ldd	r18, Y+5	; 0x05
    3148:	3e 81       	ldd	r19, Y+6	; 0x06
    314a:	4f 81       	ldd	r20, Y+7	; 0x07
    314c:	58 85       	ldd	r21, Y+8	; 0x08
    314e:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    3152:	9b 01       	movw	r18, r22
    3154:	ac 01       	movw	r20, r24
    3156:	c8 01       	movw	r24, r16
    3158:	b7 01       	movw	r22, r14
    315a:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
    315e:	60 93 fe 22 	sts	0x22FE, r22
    3162:	70 93 ff 22 	sts	0x22FF, r23
    3166:	80 93 00 23 	sts	0x2300, r24
    316a:	90 93 01 23 	sts	0x2301, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    316e:	69 81       	ldd	r22, Y+1	; 0x01
    3170:	7a 81       	ldd	r23, Y+2	; 0x02
    3172:	8b 81       	ldd	r24, Y+3	; 0x03
    3174:	9c 81       	ldd	r25, Y+4	; 0x04
    3176:	0e 94 6f 39 	call	0x72de	; 0x72de <cos>
    317a:	5b 01       	movw	r10, r22
    317c:	6c 01       	movw	r12, r24
    317e:	0e 8d       	ldd	r16, Y+30	; 0x1e
    3180:	1f 8d       	ldd	r17, Y+31	; 0x1f
    3182:	00 0f       	add	r16, r16
    3184:	11 1f       	adc	r17, r17
    3186:	f8 01       	movw	r30, r16
    3188:	ee 0f       	add	r30, r30
    318a:	ff 1f       	adc	r31, r31
    318c:	e5 57       	subi	r30, 0x75	; 117
    318e:	fe 4d       	sbci	r31, 0xDE	; 222
    3190:	60 81       	ld	r22, Z
    3192:	71 81       	ldd	r23, Z+1	; 0x01
    3194:	82 81       	ldd	r24, Z+2	; 0x02
    3196:	93 81       	ldd	r25, Z+3	; 0x03
    3198:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    319c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    319e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    31a0:	0e 0f       	add	r16, r30
    31a2:	1f 1f       	adc	r17, r31
    31a4:	23 e0       	ldi	r18, 0x03	; 3
    31a6:	00 0f       	add	r16, r16
    31a8:	11 1f       	adc	r17, r17
    31aa:	2a 95       	dec	r18
    31ac:	e1 f7       	brne	.-8      	; 0x31a6 <mc_arc_blocking+0x296>
    31ae:	0d 58       	subi	r16, 0x8D	; 141
    31b0:	1d 4d       	sbci	r17, 0xDD	; 221
    31b2:	d8 01       	movw	r26, r16
    31b4:	91 96       	adiw	r26, 0x21	; 33
    31b6:	2d 91       	ld	r18, X+
    31b8:	3d 91       	ld	r19, X+
    31ba:	4d 91       	ld	r20, X+
    31bc:	5c 91       	ld	r21, X
    31be:	94 97       	sbiw	r26, 0x24	; 36
    31c0:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    31c4:	7b 01       	movw	r14, r22
    31c6:	8c 01       	movw	r16, r24
    31c8:	c6 01       	movw	r24, r12
    31ca:	b5 01       	movw	r22, r10
    31cc:	2d 81       	ldd	r18, Y+5	; 0x05
    31ce:	3e 81       	ldd	r19, Y+6	; 0x06
    31d0:	4f 81       	ldd	r20, Y+7	; 0x07
    31d2:	58 85       	ldd	r21, Y+8	; 0x08
    31d4:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    31d8:	9b 01       	movw	r18, r22
    31da:	ac 01       	movw	r20, r24
    31dc:	c8 01       	movw	r24, r16
    31de:	b7 01       	movw	r22, r14
    31e0:	0e 94 cb 38 	call	0x7196	; 0x7196 <__subsf3>
    31e4:	60 93 02 23 	sts	0x2302, r22
    31e8:	70 93 03 23 	sts	0x2303, r23
    31ec:	80 93 04 23 	sts	0x2304, r24
    31f0:	90 93 05 23 	sts	0x2305, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    31f4:	88 0c       	add	r8, r8
    31f6:	99 1c       	adc	r9, r9
    31f8:	88 0c       	add	r8, r8
    31fa:	99 1c       	adc	r9, r9
    31fc:	f4 01       	movw	r30, r8
    31fe:	e5 57       	subi	r30, 0x75	; 117
    3200:	fe 4d       	sbci	r31, 0xDE	; 222
    3202:	60 81       	ld	r22, Z
    3204:	71 81       	ldd	r23, Z+1	; 0x01
    3206:	82 81       	ldd	r24, Z+2	; 0x02
    3208:	93 81       	ldd	r25, Z+3	; 0x03
    320a:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    320e:	20 91 c4 22 	lds	r18, 0x22C4
    3212:	30 91 c5 22 	lds	r19, 0x22C5
    3216:	40 91 c6 22 	lds	r20, 0x22C6
    321a:	50 91 c7 22 	lds	r21, 0x22C7
    321e:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    3222:	e1 ee       	ldi	r30, 0xE1	; 225
    3224:	f2 e2       	ldi	r31, 0x22	; 34
    3226:	8e 0e       	add	r8, r30
    3228:	9f 1e       	adc	r9, r31
    322a:	d4 01       	movw	r26, r8
    322c:	1d 96       	adiw	r26, 0x0d	; 13
    322e:	6d 93       	st	X+, r22
    3230:	7d 93       	st	X+, r23
    3232:	8d 93       	st	X+, r24
    3234:	9c 93       	st	X, r25
    3236:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    3238:	10 92 e4 22 	sts	0x22E4, r1
    323c:	10 92 e5 22 	sts	0x22E5, r1
    3240:	bf c0       	rjmp	.+382    	; 0x33c0 <mc_arc_blocking+0x4b0>
		ma.theta += ma.theta_per_segment;
    3242:	60 91 06 23 	lds	r22, 0x2306
    3246:	70 91 07 23 	lds	r23, 0x2307
    324a:	80 91 08 23 	lds	r24, 0x2308
    324e:	90 91 09 23 	lds	r25, 0x2309
    3252:	20 91 12 23 	lds	r18, 0x2312
    3256:	30 91 13 23 	lds	r19, 0x2313
    325a:	40 91 14 23 	lds	r20, 0x2314
    325e:	50 91 15 23 	lds	r21, 0x2315
    3262:	0e 94 cc 38 	call	0x7198	; 0x7198 <__addsf3>
    3266:	7b 01       	movw	r14, r22
    3268:	8c 01       	movw	r16, r24
    326a:	cb 01       	movw	r24, r22
    326c:	d8 01       	movw	r26, r16
    326e:	80 93 06 23 	sts	0x2306, r24
    3272:	90 93 07 23 	sts	0x2307, r25
    3276:	a0 93 08 23 	sts	0x2308, r26
    327a:	b0 93 09 23 	sts	0x2309, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    327e:	b7 01       	movw	r22, r14
    3280:	c8 01       	movw	r24, r16
    3282:	0e 94 90 3c 	call	0x7920	; 0x7920 <sin>
    3286:	80 90 0a 23 	lds	r8, 0x230A
    328a:	90 90 0b 23 	lds	r9, 0x230B
    328e:	a0 90 0c 23 	lds	r10, 0x230C
    3292:	b0 90 0d 23 	lds	r11, 0x230D
    3296:	c0 90 e8 22 	lds	r12, 0x22E8
    329a:	d0 90 e9 22 	lds	r13, 0x22E9
    329e:	cc 0c       	add	r12, r12
    32a0:	dd 1c       	adc	r13, r13
    32a2:	cc 0c       	add	r12, r12
    32a4:	dd 1c       	adc	r13, r13
    32a6:	e1 ee       	ldi	r30, 0xE1	; 225
    32a8:	f2 e2       	ldi	r31, 0x22	; 34
    32aa:	ce 0e       	add	r12, r30
    32ac:	df 1e       	adc	r13, r31
    32ae:	a5 01       	movw	r20, r10
    32b0:	94 01       	movw	r18, r8
    32b2:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    32b6:	9b 01       	movw	r18, r22
    32b8:	ac 01       	movw	r20, r24
    32ba:	60 91 fe 22 	lds	r22, 0x22FE
    32be:	70 91 ff 22 	lds	r23, 0x22FF
    32c2:	80 91 00 23 	lds	r24, 0x2300
    32c6:	90 91 01 23 	lds	r25, 0x2301
    32ca:	0e 94 cc 38 	call	0x7198	; 0x7198 <__addsf3>
    32ce:	d6 01       	movw	r26, r12
    32d0:	1d 96       	adiw	r26, 0x0d	; 13
    32d2:	6d 93       	st	X+, r22
    32d4:	7d 93       	st	X+, r23
    32d6:	8d 93       	st	X+, r24
    32d8:	9c 93       	st	X, r25
    32da:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    32dc:	b7 01       	movw	r22, r14
    32de:	c8 01       	movw	r24, r16
    32e0:	0e 94 6f 39 	call	0x72de	; 0x72de <cos>
    32e4:	00 91 ea 22 	lds	r16, 0x22EA
    32e8:	10 91 eb 22 	lds	r17, 0x22EB
    32ec:	00 0f       	add	r16, r16
    32ee:	11 1f       	adc	r17, r17
    32f0:	00 0f       	add	r16, r16
    32f2:	11 1f       	adc	r17, r17
    32f4:	0f 51       	subi	r16, 0x1F	; 31
    32f6:	1d 4d       	sbci	r17, 0xDD	; 221
    32f8:	a5 01       	movw	r20, r10
    32fa:	94 01       	movw	r18, r8
    32fc:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    3300:	9b 01       	movw	r18, r22
    3302:	ac 01       	movw	r20, r24
    3304:	60 91 02 23 	lds	r22, 0x2302
    3308:	70 91 03 23 	lds	r23, 0x2303
    330c:	80 91 04 23 	lds	r24, 0x2304
    3310:	90 91 05 23 	lds	r25, 0x2305
    3314:	0e 94 cc 38 	call	0x7198	; 0x7198 <__addsf3>
    3318:	f8 01       	movw	r30, r16
    331a:	65 87       	std	Z+13, r22	; 0x0d
    331c:	76 87       	std	Z+14, r23	; 0x0e
    331e:	87 87       	std	Z+15, r24	; 0x0f
    3320:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3322:	00 91 ec 22 	lds	r16, 0x22EC
    3326:	10 91 ed 22 	lds	r17, 0x22ED
    332a:	00 0f       	add	r16, r16
    332c:	11 1f       	adc	r17, r17
    332e:	00 0f       	add	r16, r16
    3330:	11 1f       	adc	r17, r17
    3332:	0f 51       	subi	r16, 0x1F	; 31
    3334:	1d 4d       	sbci	r17, 0xDD	; 221
    3336:	d8 01       	movw	r26, r16
    3338:	1d 96       	adiw	r26, 0x0d	; 13
    333a:	6d 91       	ld	r22, X+
    333c:	7d 91       	ld	r23, X+
    333e:	8d 91       	ld	r24, X+
    3340:	9c 91       	ld	r25, X
    3342:	50 97       	sbiw	r26, 0x10	; 16
    3344:	20 91 16 23 	lds	r18, 0x2316
    3348:	30 91 17 23 	lds	r19, 0x2317
    334c:	40 91 18 23 	lds	r20, 0x2318
    3350:	50 91 19 23 	lds	r21, 0x2319
    3354:	0e 94 cc 38 	call	0x7198	; 0x7198 <__addsf3>
    3358:	f8 01       	movw	r30, r16
    335a:	65 87       	std	Z+13, r22	; 0x0d
    335c:	76 87       	std	Z+14, r23	; 0x0e
    335e:	87 87       	std	Z+15, r24	; 0x0f
    3360:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    3362:	60 91 ee 22 	lds	r22, 0x22EE
    3366:	70 91 ef 22 	lds	r23, 0x22EF
    336a:	80 91 f0 22 	lds	r24, 0x22F0
    336e:	90 91 f1 22 	lds	r25, 0x22F1
    3372:	20 91 f2 22 	lds	r18, 0x22F2
    3376:	30 91 f3 22 	lds	r19, 0x22F3
    337a:	40 91 f4 22 	lds	r20, 0x22F4
    337e:	50 91 f5 22 	lds	r21, 0x22F5
    3382:	e0 90 f6 22 	lds	r14, 0x22F6
    3386:	f0 90 f7 22 	lds	r15, 0x22F7
    338a:	00 91 f8 22 	lds	r16, 0x22F8
    338e:	10 91 f9 22 	lds	r17, 0x22F9
    3392:	a0 90 0e 23 	lds	r10, 0x230E
    3396:	b0 90 0f 23 	lds	r11, 0x230F
    339a:	c0 90 10 23 	lds	r12, 0x2310
    339e:	d0 90 11 23 	lds	r13, 0x2311
    33a2:	80 90 e6 22 	lds	r8, 0x22E6
    33a6:	90 90 e7 22 	lds	r9, 0x22E7
    33aa:	0e 94 8b 13 	call	0x2716	; 0x2716 <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    33ae:	80 91 e4 22 	lds	r24, 0x22E4
    33b2:	90 91 e5 22 	lds	r25, 0x22E5
    33b6:	01 96       	adiw	r24, 0x01	; 1
    33b8:	80 93 e4 22 	sts	0x22E4, r24
    33bc:	90 93 e5 22 	sts	0x22E5, r25
    33c0:	20 91 e4 22 	lds	r18, 0x22E4
    33c4:	30 91 e5 22 	lds	r19, 0x22E5
    33c8:	80 91 e2 22 	lds	r24, 0x22E2
    33cc:	90 91 e3 22 	lds	r25, 0x22E3
    33d0:	82 17       	cp	r24, r18
    33d2:	93 07       	cpc	r25, r19
    33d4:	0c f0       	brlt	.+2      	; 0x33d8 <mc_arc_blocking+0x4c8>
    33d6:	35 cf       	rjmp	.-406    	; 0x3242 <mc_arc_blocking+0x332>
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    33dc:	c9 01       	movw	r24, r18
    33de:	28 96       	adiw	r28, 0x08	; 8
    33e0:	cd bf       	out	0x3d, r28	; 61
    33e2:	de bf       	out	0x3e, r29	; 62
    33e4:	cf 91       	pop	r28
    33e6:	df 91       	pop	r29
    33e8:	1f 91       	pop	r17
    33ea:	0f 91       	pop	r16
    33ec:	ff 90       	pop	r15
    33ee:	ef 90       	pop	r14
    33f0:	df 90       	pop	r13
    33f2:	cf 90       	pop	r12
    33f4:	bf 90       	pop	r11
    33f6:	af 90       	pop	r10
    33f8:	9f 90       	pop	r9
    33fa:	8f 90       	pop	r8
    33fc:	7f 90       	pop	r7
    33fe:	6f 90       	pop	r6
    3400:	5f 90       	pop	r5
    3402:	4f 90       	pop	r4
    3404:	3f 90       	pop	r3
    3406:	2f 90       	pop	r2
    3408:	08 95       	ret

0000340a <mc_line_blocking>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line_blocking(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    340a:	2f 92       	push	r2
    340c:	3f 92       	push	r3
    340e:	4f 92       	push	r4
    3410:	5f 92       	push	r5
    3412:	6f 92       	push	r6
    3414:	7f 92       	push	r7
    3416:	8f 92       	push	r8
    3418:	9f 92       	push	r9
    341a:	af 92       	push	r10
    341c:	bf 92       	push	r11
    341e:	cf 92       	push	r12
    3420:	df 92       	push	r13
    3422:	ef 92       	push	r14
    3424:	ff 92       	push	r15
    3426:	0f 93       	push	r16
    3428:	1f 93       	push	r17
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	cd b7       	in	r28, 0x3d	; 61
    3430:	de b7       	in	r29, 0x3e	; 62
    3432:	6a 97       	sbiw	r28, 0x1a	; 26
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	de bf       	out	0x3e, r29	; 62
    3438:	19 01       	movw	r2, r18
    343a:	2a 01       	movw	r4, r20
    343c:	ad 8a       	std	Y+21, r10	; 0x15
    343e:	be 8a       	std	Y+22, r11	; 0x16
    3440:	cf 8a       	std	Y+23, r12	; 0x17
    3442:	d8 8e       	std	Y+24, r13	; 0x18
    3444:	89 8e       	std	Y+25, r8	; 0x19
    3446:	9a 8e       	std	Y+26, r9	; 0x1a
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    3448:	20 91 94 22 	lds	r18, 0x2294
    344c:	30 91 95 22 	lds	r19, 0x2295
    3450:	40 91 96 22 	lds	r20, 0x2296
    3454:	50 91 97 22 	lds	r21, 0x2297
    3458:	29 8b       	std	Y+17, r18	; 0x11
    345a:	3a 8b       	std	Y+18, r19	; 0x12
    345c:	4b 8b       	std	Y+19, r20	; 0x13
    345e:	5c 8b       	std	Y+20, r21	; 0x14
    3460:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    3464:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <lround>
    3468:	3b 01       	movw	r6, r22
    346a:	4c 01       	movw	r8, r24
    346c:	60 92 97 21 	sts	0x2197, r6
    3470:	70 92 98 21 	sts	0x2198, r7
    3474:	80 92 99 21 	sts	0x2199, r8
    3478:	90 92 9a 21 	sts	0x219A, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    347c:	80 91 ac 22 	lds	r24, 0x22AC
    3480:	90 91 ad 22 	lds	r25, 0x22AD
    3484:	a0 91 ae 22 	lds	r26, 0x22AE
    3488:	b0 91 af 22 	lds	r27, 0x22AF
    348c:	8d 87       	std	Y+13, r24	; 0x0d
    348e:	9e 87       	std	Y+14, r25	; 0x0e
    3490:	af 87       	std	Y+15, r26	; 0x0f
    3492:	b8 8b       	std	Y+16, r27	; 0x10
    3494:	c2 01       	movw	r24, r4
    3496:	b1 01       	movw	r22, r2
    3498:	2d 85       	ldd	r18, Y+13	; 0x0d
    349a:	3e 85       	ldd	r19, Y+14	; 0x0e
    349c:	4f 85       	ldd	r20, Y+15	; 0x0f
    349e:	58 89       	ldd	r21, Y+16	; 0x10
    34a0:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    34a4:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <lround>
    34a8:	5b 01       	movw	r10, r22
    34aa:	6c 01       	movw	r12, r24
    34ac:	a0 92 9b 21 	sts	0x219B, r10
    34b0:	b0 92 9c 21 	sts	0x219C, r11
    34b4:	c0 92 9d 21 	sts	0x219D, r12
    34b8:	d0 92 9e 21 	sts	0x219E, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    34bc:	20 91 c4 22 	lds	r18, 0x22C4
    34c0:	30 91 c5 22 	lds	r19, 0x22C5
    34c4:	40 91 c6 22 	lds	r20, 0x22C6
    34c8:	50 91 c7 22 	lds	r21, 0x22C7
    34cc:	29 87       	std	Y+9, r18	; 0x09
    34ce:	3a 87       	std	Y+10, r19	; 0x0a
    34d0:	4b 87       	std	Y+11, r20	; 0x0b
    34d2:	5c 87       	std	Y+12, r21	; 0x0c
    34d4:	c8 01       	movw	r24, r16
    34d6:	b7 01       	movw	r22, r14
    34d8:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    34dc:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <lround>
    34e0:	9b 01       	movw	r18, r22
    34e2:	ac 01       	movw	r20, r24
    34e4:	20 93 9f 21 	sts	0x219F, r18
    34e8:	30 93 a0 21 	sts	0x21A0, r19
    34ec:	40 93 a1 21 	sts	0x21A1, r20
    34f0:	50 93 a2 21 	sts	0x21A2, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    34f4:	80 91 8b 21 	lds	r24, 0x218B
    34f8:	90 91 8c 21 	lds	r25, 0x218C
    34fc:	a0 91 8d 21 	lds	r26, 0x218D
    3500:	b0 91 8e 21 	lds	r27, 0x218E
    3504:	84 01       	movw	r16, r8
    3506:	73 01       	movw	r14, r6
    3508:	e8 1a       	sub	r14, r24
    350a:	f9 0a       	sbc	r15, r25
    350c:	0a 0b       	sbc	r16, r26
    350e:	1b 0b       	sbc	r17, r27
    3510:	ed 82       	std	Y+5, r14	; 0x05
    3512:	fe 82       	std	Y+6, r15	; 0x06
    3514:	0f 83       	std	Y+7, r16	; 0x07
    3516:	18 87       	std	Y+8, r17	; 0x08
    3518:	e0 92 a3 21 	sts	0x21A3, r14
    351c:	f0 92 a4 21 	sts	0x21A4, r15
    3520:	00 93 a5 21 	sts	0x21A5, r16
    3524:	10 93 a6 21 	sts	0x21A6, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    3528:	80 91 8f 21 	lds	r24, 0x218F
    352c:	90 91 90 21 	lds	r25, 0x2190
    3530:	a0 91 91 21 	lds	r26, 0x2191
    3534:	b0 91 92 21 	lds	r27, 0x2192
    3538:	86 01       	movw	r16, r12
    353a:	75 01       	movw	r14, r10
    353c:	e8 1a       	sub	r14, r24
    353e:	f9 0a       	sbc	r15, r25
    3540:	0a 0b       	sbc	r16, r26
    3542:	1b 0b       	sbc	r17, r27
    3544:	e9 82       	std	Y+1, r14	; 0x01
    3546:	fa 82       	std	Y+2, r15	; 0x02
    3548:	0b 83       	std	Y+3, r16	; 0x03
    354a:	1c 83       	std	Y+4, r17	; 0x04
    354c:	e0 92 a7 21 	sts	0x21A7, r14
    3550:	f0 92 a8 21 	sts	0x21A8, r15
    3554:	00 93 a9 21 	sts	0x21A9, r16
    3558:	10 93 aa 21 	sts	0x21AA, r17
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    355c:	80 91 93 21 	lds	r24, 0x2193
    3560:	90 91 94 21 	lds	r25, 0x2194
    3564:	a0 91 95 21 	lds	r26, 0x2195
    3568:	b0 91 96 21 	lds	r27, 0x2196
    356c:	19 01       	movw	r2, r18
    356e:	2a 01       	movw	r4, r20
    3570:	28 1a       	sub	r2, r24
    3572:	39 0a       	sbc	r3, r25
    3574:	4a 0a       	sbc	r4, r26
    3576:	5b 0a       	sbc	r5, r27
    3578:	20 92 ab 21 	sts	0x21AB, r2
    357c:	30 92 ac 21 	sts	0x21AC, r3
    3580:	40 92 ad 21 	sts	0x21AD, r4
    3584:	50 92 ae 21 	sts	0x21AE, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    3588:	d8 01       	movw	r26, r16
    358a:	c7 01       	movw	r24, r14
    358c:	0d 81       	ldd	r16, Y+5	; 0x05
    358e:	1e 81       	ldd	r17, Y+6	; 0x06
    3590:	2f 81       	ldd	r18, Y+7	; 0x07
    3592:	38 85       	ldd	r19, Y+8	; 0x08
    3594:	80 0f       	add	r24, r16
    3596:	91 1f       	adc	r25, r17
    3598:	a2 1f       	adc	r26, r18
    359a:	b3 1f       	adc	r27, r19
    359c:	82 0d       	add	r24, r2
    359e:	93 1d       	adc	r25, r3
    35a0:	a4 1d       	adc	r26, r4
    35a2:	b5 1d       	adc	r27, r5
    35a4:	00 97       	sbiw	r24, 0x00	; 0
    35a6:	a1 05       	cpc	r26, r1
    35a8:	b1 05       	cpc	r27, r1
    35aa:	19 f4       	brne	.+6      	; 0x35b2 <mc_line_blocking+0x1a8>
    35ac:	24 e1       	ldi	r18, 0x14	; 20
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	89 c0       	rjmp	.+274    	; 0x36c4 <mc_line_blocking+0x2ba>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    35b2:	29 8d       	ldd	r18, Y+25	; 0x19
    35b4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    35b6:	23 2b       	or	r18, r19
    35b8:	59 f0       	breq	.+22     	; 0x35d0 <mc_line_blocking+0x1c6>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    35ba:	60 ec       	ldi	r22, 0xC0	; 192
    35bc:	71 ee       	ldi	r23, 0xE1	; 225
    35be:	84 e6       	ldi	r24, 0x64	; 100
    35c0:	9c e4       	ldi	r25, 0x4C	; 76
    35c2:	2d 89       	ldd	r18, Y+21	; 0x15
    35c4:	3e 89       	ldd	r19, Y+22	; 0x16
    35c6:	4f 89       	ldd	r20, Y+23	; 0x17
    35c8:	58 8d       	ldd	r21, Y+24	; 0x18
    35ca:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    35ce:	4e c0       	rjmp	.+156    	; 0x366c <mc_line_blocking+0x262>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    35d0:	6d 81       	ldd	r22, Y+5	; 0x05
    35d2:	7e 81       	ldd	r23, Y+6	; 0x06
    35d4:	8f 81       	ldd	r24, Y+7	; 0x07
    35d6:	98 85       	ldd	r25, Y+8	; 0x08
    35d8:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    35dc:	29 89       	ldd	r18, Y+17	; 0x11
    35de:	3a 89       	ldd	r19, Y+18	; 0x12
    35e0:	4b 89       	ldd	r20, Y+19	; 0x13
    35e2:	5c 89       	ldd	r21, Y+20	; 0x14
    35e4:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    35e8:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <square>
    35ec:	3b 01       	movw	r6, r22
    35ee:	4c 01       	movw	r8, r24
    35f0:	69 81       	ldd	r22, Y+1	; 0x01
    35f2:	7a 81       	ldd	r23, Y+2	; 0x02
    35f4:	8b 81       	ldd	r24, Y+3	; 0x03
    35f6:	9c 81       	ldd	r25, Y+4	; 0x04
    35f8:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    35fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    35fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    3600:	4f 85       	ldd	r20, Y+15	; 0x0f
    3602:	58 89       	ldd	r21, Y+16	; 0x10
    3604:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    3608:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <square>
    360c:	5b 01       	movw	r10, r22
    360e:	6c 01       	movw	r12, r24
    3610:	c2 01       	movw	r24, r4
    3612:	b1 01       	movw	r22, r2
    3614:	0e 94 0d 3a 	call	0x741a	; 0x741a <__floatsisf>
    3618:	29 85       	ldd	r18, Y+9	; 0x09
    361a:	3a 85       	ldd	r19, Y+10	; 0x0a
    361c:	4b 85       	ldd	r20, Y+11	; 0x0b
    361e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3620:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    3624:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <square>
    3628:	7b 01       	movw	r14, r22
    362a:	8c 01       	movw	r16, r24
    362c:	c4 01       	movw	r24, r8
    362e:	b3 01       	movw	r22, r6
    3630:	a6 01       	movw	r20, r12
    3632:	95 01       	movw	r18, r10
    3634:	0e 94 cc 38 	call	0x7198	; 0x7198 <__addsf3>
    3638:	a8 01       	movw	r20, r16
    363a:	97 01       	movw	r18, r14
    363c:	0e 94 cc 38 	call	0x7198	; 0x7198 <__addsf3>
    3640:	0e 94 9a 3c 	call	0x7934	; 0x7934 <sqrt>
    3644:	60 93 b3 21 	sts	0x21B3, r22
    3648:	70 93 b4 21 	sts	0x21B4, r23
    364c:	80 93 b5 21 	sts	0x21B5, r24
    3650:	90 93 b6 21 	sts	0x21B6, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3654:	2d 89       	ldd	r18, Y+21	; 0x15
    3656:	3e 89       	ldd	r19, Y+22	; 0x16
    3658:	4f 89       	ldd	r20, Y+23	; 0x17
    365a:	58 8d       	ldd	r21, Y+24	; 0x18
    365c:	0e 94 72 39 	call	0x72e4	; 0x72e4 <__divsf3>
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	34 e2       	ldi	r19, 0x24	; 36
    3664:	44 e7       	ldi	r20, 0x74	; 116
    3666:	59 e4       	ldi	r21, 0x49	; 73
    3668:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    366c:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <lround>
    3670:	60 93 af 21 	sts	0x21AF, r22
    3674:	70 93 b0 21 	sts	0x21B0, r23
    3678:	80 93 b1 21 	sts	0x21B1, r24
    367c:	90 93 b2 21 	sts	0x21B2, r25
	}
	mc.move_type = MC_TYPE_LINE;
    3680:	10 92 8a 21 	sts	0x218A, r1
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds, mc.move_type); 
    3684:	a0 90 af 21 	lds	r10, 0x21AF
    3688:	b0 90 b0 21 	lds	r11, 0x21B0
    368c:	c0 90 b1 21 	lds	r12, 0x21B1
    3690:	d0 90 b2 21 	lds	r13, 0x21B2
    3694:	6d 81       	ldd	r22, Y+5	; 0x05
    3696:	7e 81       	ldd	r23, Y+6	; 0x06
    3698:	8f 81       	ldd	r24, Y+7	; 0x07
    369a:	98 85       	ldd	r25, Y+8	; 0x08
    369c:	29 81       	ldd	r18, Y+1	; 0x01
    369e:	3a 81       	ldd	r19, Y+2	; 0x02
    36a0:	4b 81       	ldd	r20, Y+3	; 0x03
    36a2:	5c 81       	ldd	r21, Y+4	; 0x04
    36a4:	82 01       	movw	r16, r4
    36a6:	71 01       	movw	r14, r2
    36a8:	88 24       	eor	r8, r8
    36aa:	0e 94 4e 24 	call	0x489c	; 0x489c <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    36ae:	eb e8       	ldi	r30, 0x8B	; 139
    36b0:	f1 e2       	ldi	r31, 0x21	; 33
    36b2:	df 01       	movw	r26, r30
    36b4:	1c 96       	adiw	r26, 0x0c	; 12
    36b6:	8c e0       	ldi	r24, 0x0C	; 12
    36b8:	0d 90       	ld	r0, X+
    36ba:	01 92       	st	Z+, r0
    36bc:	81 50       	subi	r24, 0x01	; 1
    36be:	e1 f7       	brne	.-8      	; 0x36b8 <mc_line_blocking+0x2ae>
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    36c4:	c9 01       	movw	r24, r18
    36c6:	6a 96       	adiw	r28, 0x1a	; 26
    36c8:	cd bf       	out	0x3d, r28	; 61
    36ca:	de bf       	out	0x3e, r29	; 62
    36cc:	cf 91       	pop	r28
    36ce:	df 91       	pop	r29
    36d0:	1f 91       	pop	r17
    36d2:	0f 91       	pop	r16
    36d4:	ff 90       	pop	r15
    36d6:	ef 90       	pop	r14
    36d8:	df 90       	pop	r13
    36da:	cf 90       	pop	r12
    36dc:	bf 90       	pop	r11
    36de:	af 90       	pop	r10
    36e0:	9f 90       	pop	r9
    36e2:	8f 90       	pop	r8
    36e4:	7f 90       	pop	r7
    36e6:	6f 90       	pop	r6
    36e8:	5f 90       	pop	r5
    36ea:	4f 90       	pop	r4
    36ec:	3f 90       	pop	r3
    36ee:	2f 90       	pop	r2
    36f0:	08 95       	ret

000036f2 <mc_motion_stop>:
 * mc_motion_stop() - stop current motion immediately
 */

int mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    36f2:	10 92 89 21 	sts	0x2189, r1
	ma.arc_state = MC_STATE_OFF;
    36f6:	10 92 e1 22 	sts	0x22E1, r1
	mv_flush();						// empty and reset the move queue
    36fa:	0e 94 43 24 	call	0x4886	; 0x4886 <mv_flush>
	st_stop();						// stop the steppers
    36fe:	0e 94 1b 1c 	call	0x3836	; 0x3836 <st_stop>
    3702:	f7 cf       	rjmp	.-18     	; 0x36f2 <mc_motion_stop>

00003704 <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    3704:	e0 e6       	ldi	r30, 0x60	; 96
    3706:	f6 e0       	ldi	r31, 0x06	; 6
    3708:	80 e4       	ldi	r24, 0x40	; 64
    370a:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    370c:	80 e8       	ldi	r24, 0x80	; 128
    370e:	81 83       	std	Z+1, r24	; 0x01
}
    3710:	08 95       	ret

00003712 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    3712:	97 fd       	sbrc	r25, 7
    3714:	05 c0       	rjmp	.+10     	; 0x3720 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    3716:	80 e8       	ldi	r24, 0x80	; 128
    3718:	e0 e6       	ldi	r30, 0x60	; 96
    371a:	f6 e0       	ldi	r31, 0x06	; 6
    371c:	85 83       	std	Z+5, r24	; 0x05
    371e:	04 c0       	rjmp	.+8      	; 0x3728 <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    3720:	80 e8       	ldi	r24, 0x80	; 128
    3722:	e0 e6       	ldi	r30, 0x60	; 96
    3724:	f6 e0       	ldi	r31, 0x06	; 6
    3726:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    3728:	80 e4       	ldi	r24, 0x40	; 64
    372a:	e0 e6       	ldi	r30, 0x60	; 96
    372c:	f6 e0       	ldi	r31, 0x06	; 6
    372e:	85 83       	std	Z+5, r24	; 0x05
}
    3730:	08 95       	ret

00003732 <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    3732:	80 e4       	ldi	r24, 0x40	; 64
    3734:	e0 e6       	ldi	r30, 0x60	; 96
    3736:	f6 e0       	ldi	r31, 0x06	; 6
    3738:	86 83       	std	Z+6, r24	; 0x06
}
    373a:	08 95       	ret

0000373c <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    373c:	cf 93       	push	r28
    373e:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    3740:	10 92 30 22 	sts	0x2230, r1
	ax.mutex = FALSE;
    3744:	10 92 2e 22 	sts	0x222E, r1
	ax.stopped = FALSE;
    3748:	10 92 2f 22 	sts	0x222F, r1

	ax.a[X].port = &X_MOTOR_PORT;					// bind PORTs to structs
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	96 e0       	ldi	r25, 0x06	; 6
    3750:	80 93 3f 22 	sts	0x223F, r24
    3754:	90 93 40 22 	sts	0x2240, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    3758:	80 ea       	ldi	r24, 0xA0	; 160
    375a:	96 e0       	ldi	r25, 0x06	; 6
    375c:	80 93 4f 22 	sts	0x224F, r24
    3760:	90 93 50 22 	sts	0x2250, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    3764:	80 e8       	ldi	r24, 0x80	; 128
    3766:	96 e0       	ldi	r25, 0x06	; 6
    3768:	80 93 5f 22 	sts	0x225F, r24
    376c:	90 93 60 22 	sts	0x2260, r25
	ax.a[A].port = &A_MOTOR_PORT;
    3770:	80 e6       	ldi	r24, 0x60	; 96
    3772:	96 e0       	ldi	r25, 0x06	; 6
    3774:	80 93 6f 22 	sts	0x226F, r24
    3778:	90 93 70 22 	sts	0x2270, r25

	ax.a[X].timer = &X_TIMER;						// bind TIMERs to structs
    377c:	80 e0       	ldi	r24, 0x00	; 0
    377e:	98 e0       	ldi	r25, 0x08	; 8
    3780:	80 93 41 22 	sts	0x2241, r24
    3784:	90 93 42 22 	sts	0x2242, r25
	ax.a[Y].timer = &Y_TIMER;
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	99 e0       	ldi	r25, 0x09	; 9
    378c:	80 93 51 22 	sts	0x2251, r24
    3790:	90 93 52 22 	sts	0x2252, r25
	ax.a[Z].timer = &Z_TIMER;
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	9a e0       	ldi	r25, 0x0A	; 10
    3798:	80 93 61 22 	sts	0x2261, r24
    379c:	90 93 62 22 	sts	0x2262, r25
	ax.a[A].timer = &A_TIMER;
    37a0:	80 e0       	ldi	r24, 0x00	; 0
    37a2:	9b e0       	ldi	r25, 0x0B	; 11
    37a4:	80 93 71 22 	sts	0x2271, r24
    37a8:	90 93 72 22 	sts	0x2272, r25
    37ac:	c3 e8       	ldi	r28, 0x83	; 131
    37ae:	d2 e2       	ldi	r29, 0x22	; 34
    37b0:	ad e3       	ldi	r26, 0x3D	; 61
    37b2:	b2 e2       	ldi	r27, 0x22	; 34

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    37b4:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    37b6:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    37b8:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    37ba:	88 81       	ld	r24, Y
    37bc:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    37be:	12 96       	adiw	r26, 0x02	; 2
    37c0:	ed 91       	ld	r30, X+
    37c2:	fc 91       	ld	r31, X
    37c4:	13 97       	sbiw	r26, 0x03	; 3
    37c6:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    37c8:	12 96       	adiw	r26, 0x02	; 2
    37ca:	ed 91       	ld	r30, X+
    37cc:	fc 91       	ld	r31, X
    37ce:	13 97       	sbiw	r26, 0x03	; 3
    37d0:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
    37d2:	12 96       	adiw	r26, 0x02	; 2
    37d4:	ed 91       	ld	r30, X+
    37d6:	fc 91       	ld	r31, X
    37d8:	13 97       	sbiw	r26, 0x03	; 3
    37da:	84 81       	ldd	r24, Z+4	; 0x04
    37dc:	88 61       	ori	r24, 0x18	; 24
    37de:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    37e0:	12 96       	adiw	r26, 0x02	; 2
    37e2:	ed 91       	ld	r30, X+
    37e4:	fc 91       	ld	r31, X
    37e6:	13 97       	sbiw	r26, 0x03	; 3
    37e8:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    37ea:	14 96       	adiw	r26, 0x04	; 4
    37ec:	ed 91       	ld	r30, X+
    37ee:	fc 91       	ld	r31, X
    37f0:	15 97       	sbiw	r26, 0x05	; 5
    37f2:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    37f4:	14 96       	adiw	r26, 0x04	; 4
    37f6:	ed 91       	ld	r30, X+
    37f8:	fc 91       	ld	r31, X
    37fa:	15 97       	sbiw	r26, 0x05	; 5
    37fc:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    37fe:	14 96       	adiw	r26, 0x04	; 4
    3800:	ed 91       	ld	r30, X+
    3802:	fc 91       	ld	r31, X
    3804:	15 97       	sbiw	r26, 0x05	; 5
    3806:	96 83       	std	Z+6, r25	; 0x06
    3808:	68 96       	adiw	r28, 0x18	; 24
    380a:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X].timer = &X_TIMER;						// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    380c:	82 e2       	ldi	r24, 0x22	; 34
    380e:	c3 3e       	cpi	r28, 0xE3	; 227
    3810:	d8 07       	cpc	r29, r24
    3812:	99 f6       	brne	.-90     	; 0x37ba <st_init+0x7e>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    3814:	df 91       	pop	r29
    3816:	cf 91       	pop	r28
    3818:	08 95       	ret

0000381a <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    381a:	e8 2f       	mov	r30, r24
    381c:	f0 e0       	ldi	r31, 0x00	; 0
    381e:	84 e0       	ldi	r24, 0x04	; 4
    3820:	ee 0f       	add	r30, r30
    3822:	ff 1f       	adc	r31, r31
    3824:	8a 95       	dec	r24
    3826:	e1 f7       	brne	.-8      	; 0x3820 <st_set_polarity+0x6>
    3828:	e2 5d       	subi	r30, 0xD2	; 210
    382a:	fd 4d       	sbci	r31, 0xDD	; 221
    382c:	67 87       	std	Z+15, r22	; 0x0f
}
    382e:	08 95       	ret

00003830 <st_start>:
 * st_stop() - stop steppers
 */

void st_start()
{
	ax.stopped = FALSE;
    3830:	10 92 2f 22 	sts	0x222F, r1
}
    3834:	08 95       	ret

00003836 <st_stop>:

void st_stop()
{
	ax.stopped = TRUE;
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	80 93 2f 22 	sts	0x222F, r24
}
    383c:	08 95       	ret

0000383e <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X].step_counter = 0x00001000;
    383e:	23 e3       	ldi	r18, 0x33	; 51
    3840:	32 e2       	ldi	r19, 0x22	; 34
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	90 e1       	ldi	r25, 0x10	; 16
    3846:	a0 e0       	ldi	r26, 0x00	; 0
    3848:	b0 e0       	ldi	r27, 0x00	; 0
    384a:	80 93 33 22 	sts	0x2233, r24
    384e:	90 93 34 22 	sts	0x2234, r25
    3852:	a0 93 35 22 	sts	0x2235, r26
    3856:	b0 93 36 22 	sts	0x2236, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    385a:	e0 91 41 22 	lds	r30, 0x2241
    385e:	f0 91 42 22 	lds	r31, 0x2242
    3862:	80 e0       	ldi	r24, 0x00	; 0
    3864:	90 e1       	ldi	r25, 0x10	; 16
    3866:	86 a3       	std	Z+38, r24	; 0x26
    3868:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    386a:	41 e0       	ldi	r20, 0x01	; 1
    386c:	40 83       	st	Z, r20

	ax.a[Y].step_counter = 0x00000800;
    386e:	80 e0       	ldi	r24, 0x00	; 0
    3870:	98 e0       	ldi	r25, 0x08	; 8
    3872:	a0 e0       	ldi	r26, 0x00	; 0
    3874:	b0 e0       	ldi	r27, 0x00	; 0
    3876:	80 93 43 22 	sts	0x2243, r24
    387a:	90 93 44 22 	sts	0x2244, r25
    387e:	a0 93 45 22 	sts	0x2245, r26
    3882:	b0 93 46 22 	sts	0x2246, r27
	ax.a[Y].timer->PER = 0x2000;
    3886:	e0 91 51 22 	lds	r30, 0x2251
    388a:	f0 91 52 22 	lds	r31, 0x2252
    388e:	80 e0       	ldi	r24, 0x00	; 0
    3890:	90 e2       	ldi	r25, 0x20	; 32
    3892:	86 a3       	std	Z+38, r24	; 0x26
    3894:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    3896:	40 83       	st	Z, r20

	ax.a[Z].step_counter = 0x00000600;
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	96 e0       	ldi	r25, 0x06	; 6
    389c:	a0 e0       	ldi	r26, 0x00	; 0
    389e:	b0 e0       	ldi	r27, 0x00	; 0
    38a0:	80 93 53 22 	sts	0x2253, r24
    38a4:	90 93 54 22 	sts	0x2254, r25
    38a8:	a0 93 55 22 	sts	0x2255, r26
    38ac:	b0 93 56 22 	sts	0x2256, r27
	ax.a[Z].timer->PER = 0x3000;
    38b0:	e0 91 61 22 	lds	r30, 0x2261
    38b4:	f0 91 62 22 	lds	r31, 0x2262
    38b8:	80 e0       	ldi	r24, 0x00	; 0
    38ba:	90 e3       	ldi	r25, 0x30	; 48
    38bc:	86 a3       	std	Z+38, r24	; 0x26
    38be:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    38c0:	40 83       	st	Z, r20

	ax.a[A].step_counter = 0x00000400;
    38c2:	80 e0       	ldi	r24, 0x00	; 0
    38c4:	94 e0       	ldi	r25, 0x04	; 4
    38c6:	a0 e0       	ldi	r26, 0x00	; 0
    38c8:	b0 e0       	ldi	r27, 0x00	; 0
    38ca:	80 93 63 22 	sts	0x2263, r24
    38ce:	90 93 64 22 	sts	0x2264, r25
    38d2:	a0 93 65 22 	sts	0x2265, r26
    38d6:	b0 93 66 22 	sts	0x2266, r27
	ax.a[A].timer->PER = 0x4000;
    38da:	d9 01       	movw	r26, r18
    38dc:	de 96       	adiw	r26, 0x3e	; 62
    38de:	ed 91       	ld	r30, X+
    38e0:	fc 91       	ld	r31, X
    38e2:	df 97       	sbiw	r26, 0x3f	; 63
    38e4:	80 e0       	ldi	r24, 0x00	; 0
    38e6:	90 e4       	ldi	r25, 0x40	; 64
    38e8:	86 a3       	std	Z+38, r24	; 0x26
    38ea:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    38ec:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    38ee:	23 50       	subi	r18, 0x03	; 3
    38f0:	30 40       	sbci	r19, 0x00	; 0
    38f2:	f9 01       	movw	r30, r18
    38f4:	80 81       	ld	r24, Z
    38f6:	8f 60       	ori	r24, 0x0F	; 15
    38f8:	80 83       	st	Z, r24
}
    38fa:	08 95       	ret

000038fc <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    38fc:	cf 92       	push	r12
    38fe:	df 92       	push	r13
    3900:	ef 92       	push	r14
    3902:	ff 92       	push	r15
    3904:	0f 93       	push	r16
    3906:	1f 93       	push	r17
    3908:	cf 93       	push	r28
    390a:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.mutex) { 			// prevents ISR from clobbering non-ISR invocation
    390c:	80 91 2e 22 	lds	r24, 0x222E
    3910:	88 23       	and	r24, r24
    3912:	09 f0       	breq	.+2      	; 0x3916 <st_execute_move+0x1a>
    3914:	32 c1       	rjmp	.+612    	; 0x3b7a <st_execute_move+0x27e>
		return;
	}
	ax.mutex = TRUE;
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	80 93 2e 22 	sts	0x222E, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    391c:	80 91 30 22 	lds	r24, 0x2230
    3920:	88 23       	and	r24, r24
    3922:	09 f0       	breq	.+2      	; 0x3926 <st_execute_move+0x2a>
    3924:	28 c1       	rjmp	.+592    	; 0x3b76 <st_execute_move+0x27a>
		ax.mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    3926:	0e 94 00 24 	call	0x4800	; 0x4800 <mv_dequeue_move_buffer>
    392a:	80 93 31 22 	sts	0x2231, r24
    392e:	90 93 32 22 	sts	0x2232, r25
    3932:	89 2b       	or	r24, r25
    3934:	09 f4       	brne	.+2      	; 0x3938 <st_execute_move+0x3c>
    3936:	1f c1       	rjmp	.+574    	; 0x3b76 <st_execute_move+0x27a>
		ax.mutex = FALSE;
		return;
    3938:	63 e3       	ldi	r22, 0x33	; 51
    393a:	72 e2       	ldi	r23, 0x22	; 34
    393c:	00 e0       	ldi	r16, 0x00	; 0
    393e:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    3940:	94 e0       	ldi	r25, 0x04	; 4
    3942:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    3944:	82 e0       	ldi	r24, 0x02	; 2
    3946:	d8 2e       	mov	r13, r24
		ax.mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.mutex = FALSE;
		return;
    3948:	f0 2e       	mov	r15, r16
    394a:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    394c:	db 01       	movw	r26, r22
    394e:	1e 96       	adiw	r26, 0x0e	; 14
    3950:	ed 91       	ld	r30, X+
    3952:	fc 91       	ld	r31, X
    3954:	1f 97       	sbiw	r26, 0x0f	; 15
    3956:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    3958:	c0 91 31 22 	lds	r28, 0x2231
    395c:	d0 91 32 22 	lds	r29, 0x2232
    3960:	c8 01       	movw	r24, r16
    3962:	fc 01       	movw	r30, r24
    3964:	b3 e0       	ldi	r27, 0x03	; 3
    3966:	ee 0f       	add	r30, r30
    3968:	ff 1f       	adc	r31, r31
    396a:	ba 95       	dec	r27
    396c:	e1 f7       	brne	.-8      	; 0x3966 <st_execute_move+0x6a>
    396e:	88 0f       	add	r24, r24
    3970:	99 1f       	adc	r25, r25
    3972:	e8 0f       	add	r30, r24
    3974:	f9 1f       	adc	r31, r25
    3976:	ec 0f       	add	r30, r28
    3978:	fd 1f       	adc	r31, r29
    397a:	80 81       	ld	r24, Z
    397c:	91 81       	ldd	r25, Z+1	; 0x01
    397e:	a2 81       	ldd	r26, Z+2	; 0x02
    3980:	b3 81       	ldd	r27, Z+3	; 0x03
    3982:	00 97       	sbiw	r24, 0x00	; 0
    3984:	a1 05       	cpc	r26, r1
    3986:	b1 05       	cpc	r27, r1
    3988:	09 f4       	brne	.+2      	; 0x398c <st_execute_move+0x90>
    398a:	a6 c0       	rjmp	.+332    	; 0x3ad8 <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    398c:	c8 01       	movw	r24, r16
    398e:	9c 01       	movw	r18, r24
    3990:	f3 e0       	ldi	r31, 0x03	; 3
    3992:	22 0f       	add	r18, r18
    3994:	33 1f       	adc	r19, r19
    3996:	fa 95       	dec	r31
    3998:	e1 f7       	brne	.-8      	; 0x3992 <st_execute_move+0x96>
    399a:	88 0f       	add	r24, r24
    399c:	99 1f       	adc	r25, r25
    399e:	28 0f       	add	r18, r24
    39a0:	39 1f       	adc	r19, r25
    39a2:	c2 0f       	add	r28, r18
    39a4:	d3 1f       	adc	r29, r19
    39a6:	89 85       	ldd	r24, Y+9	; 0x09
    39a8:	fb 01       	movw	r30, r22
    39aa:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    39ac:	e0 91 31 22 	lds	r30, 0x2231
    39b0:	f0 91 32 22 	lds	r31, 0x2232
    39b4:	c8 01       	movw	r24, r16
    39b6:	9c 01       	movw	r18, r24
    39b8:	53 e0       	ldi	r21, 0x03	; 3
    39ba:	22 0f       	add	r18, r18
    39bc:	33 1f       	adc	r19, r19
    39be:	5a 95       	dec	r21
    39c0:	e1 f7       	brne	.-8      	; 0x39ba <st_execute_move+0xbe>
    39c2:	88 0f       	add	r24, r24
    39c4:	99 1f       	adc	r25, r25
    39c6:	28 0f       	add	r18, r24
    39c8:	39 1f       	adc	r19, r25
    39ca:	e2 0f       	add	r30, r18
    39cc:	f3 1f       	adc	r31, r19
    39ce:	90 85       	ldd	r25, Z+8	; 0x08
    39d0:	db 01       	movw	r26, r22
    39d2:	1a 96       	adiw	r26, 0x0a	; 10
    39d4:	8c 91       	ld	r24, X
    39d6:	1a 97       	sbiw	r26, 0x0a	; 10
    39d8:	1c 96       	adiw	r26, 0x0c	; 12
    39da:	ed 91       	ld	r30, X+
    39dc:	fc 91       	ld	r31, X
    39de:	1d 97       	sbiw	r26, 0x0d	; 13
    39e0:	98 17       	cp	r25, r24
    39e2:	11 f0       	breq	.+4      	; 0x39e8 <st_execute_move+0xec>
    39e4:	d5 82       	std	Z+5, r13	; 0x05
    39e6:	01 c0       	rjmp	.+2      	; 0x39ea <st_execute_move+0xee>
    39e8:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    39ea:	40 91 31 22 	lds	r20, 0x2231
    39ee:	50 91 32 22 	lds	r21, 0x2232
    39f2:	8f 2d       	mov	r24, r15
    39f4:	9e 2d       	mov	r25, r14
    39f6:	fc 01       	movw	r30, r24
    39f8:	33 e0       	ldi	r19, 0x03	; 3
    39fa:	ee 0f       	add	r30, r30
    39fc:	ff 1f       	adc	r31, r31
    39fe:	3a 95       	dec	r19
    3a00:	e1 f7       	brne	.-8      	; 0x39fa <st_execute_move+0xfe>
    3a02:	88 0f       	add	r24, r24
    3a04:	99 1f       	adc	r25, r25
    3a06:	e8 0f       	add	r30, r24
    3a08:	f9 1f       	adc	r31, r25
    3a0a:	e4 0f       	add	r30, r20
    3a0c:	f5 1f       	adc	r31, r21
    3a0e:	80 81       	ld	r24, Z
    3a10:	91 81       	ldd	r25, Z+1	; 0x01
    3a12:	a2 81       	ldd	r26, Z+2	; 0x02
    3a14:	b3 81       	ldd	r27, Z+3	; 0x03
    3a16:	fb 01       	movw	r30, r22
    3a18:	80 83       	st	Z, r24
    3a1a:	91 83       	std	Z+1, r25	; 0x01
    3a1c:	a2 83       	std	Z+2, r26	; 0x02
    3a1e:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    3a20:	8f 2d       	mov	r24, r15
    3a22:	9e 2d       	mov	r25, r14
    3a24:	fc 01       	movw	r30, r24
    3a26:	b3 e0       	ldi	r27, 0x03	; 3
    3a28:	ee 0f       	add	r30, r30
    3a2a:	ff 1f       	adc	r31, r31
    3a2c:	ba 95       	dec	r27
    3a2e:	e1 f7       	brne	.-8      	; 0x3a28 <st_execute_move+0x12c>
    3a30:	88 0f       	add	r24, r24
    3a32:	99 1f       	adc	r25, r25
    3a34:	e8 0f       	add	r30, r24
    3a36:	f9 1f       	adc	r31, r25
    3a38:	e4 0f       	add	r30, r20
    3a3a:	f5 1f       	adc	r31, r21
    3a3c:	86 81       	ldd	r24, Z+6	; 0x06
    3a3e:	97 81       	ldd	r25, Z+7	; 0x07
    3a40:	db 01       	movw	r26, r22
    3a42:	16 96       	adiw	r26, 0x06	; 6
    3a44:	8d 93       	st	X+, r24
    3a46:	9c 93       	st	X, r25
    3a48:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    3a4a:	8f 2d       	mov	r24, r15
    3a4c:	9e 2d       	mov	r25, r14
    3a4e:	fc 01       	movw	r30, r24
    3a50:	33 e0       	ldi	r19, 0x03	; 3
    3a52:	ee 0f       	add	r30, r30
    3a54:	ff 1f       	adc	r31, r31
    3a56:	3a 95       	dec	r19
    3a58:	e1 f7       	brne	.-8      	; 0x3a52 <st_execute_move+0x156>
    3a5a:	88 0f       	add	r24, r24
    3a5c:	99 1f       	adc	r25, r25
    3a5e:	e8 0f       	add	r30, r24
    3a60:	f9 1f       	adc	r31, r25
    3a62:	e4 0f       	add	r30, r20
    3a64:	f5 1f       	adc	r31, r21
    3a66:	86 81       	ldd	r24, Z+6	; 0x06
    3a68:	97 81       	ldd	r25, Z+7	; 0x07
    3a6a:	18 96       	adiw	r26, 0x08	; 8
    3a6c:	8d 93       	st	X+, r24
    3a6e:	9c 93       	st	X, r25
    3a70:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    3a72:	8f 2d       	mov	r24, r15
    3a74:	9e 2d       	mov	r25, r14
    3a76:	fc 01       	movw	r30, r24
    3a78:	33 e0       	ldi	r19, 0x03	; 3
    3a7a:	ee 0f       	add	r30, r30
    3a7c:	ff 1f       	adc	r31, r31
    3a7e:	3a 95       	dec	r19
    3a80:	e1 f7       	brne	.-8      	; 0x3a7a <st_execute_move+0x17e>
    3a82:	88 0f       	add	r24, r24
    3a84:	99 1f       	adc	r25, r25
    3a86:	e8 0f       	add	r30, r24
    3a88:	f9 1f       	adc	r31, r25
    3a8a:	e4 0f       	add	r30, r20
    3a8c:	f5 1f       	adc	r31, r21
    3a8e:	84 81       	ldd	r24, Z+4	; 0x04
    3a90:	95 81       	ldd	r25, Z+5	; 0x05
    3a92:	14 96       	adiw	r26, 0x04	; 4
    3a94:	8d 93       	st	X+, r24
    3a96:	9c 93       	st	X, r25
    3a98:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    3a9a:	1e 96       	adiw	r26, 0x0e	; 14
    3a9c:	ed 91       	ld	r30, X+
    3a9e:	fc 91       	ld	r31, X
    3aa0:	1f 97       	sbiw	r26, 0x0f	; 15
    3aa2:	8f 2d       	mov	r24, r15
    3aa4:	9e 2d       	mov	r25, r14
    3aa6:	9c 01       	movw	r18, r24
    3aa8:	b3 e0       	ldi	r27, 0x03	; 3
    3aaa:	22 0f       	add	r18, r18
    3aac:	33 1f       	adc	r19, r19
    3aae:	ba 95       	dec	r27
    3ab0:	e1 f7       	brne	.-8      	; 0x3aaa <st_execute_move+0x1ae>
    3ab2:	88 0f       	add	r24, r24
    3ab4:	99 1f       	adc	r25, r25
    3ab6:	28 0f       	add	r18, r24
    3ab8:	39 1f       	adc	r19, r25
    3aba:	42 0f       	add	r20, r18
    3abc:	53 1f       	adc	r21, r19
    3abe:	da 01       	movw	r26, r20
    3ac0:	14 96       	adiw	r26, 0x04	; 4
    3ac2:	8d 91       	ld	r24, X+
    3ac4:	9c 91       	ld	r25, X
    3ac6:	15 97       	sbiw	r26, 0x05	; 5
    3ac8:	86 a3       	std	Z+38, r24	; 0x26
    3aca:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    3acc:	db 01       	movw	r26, r22
    3ace:	1c 96       	adiw	r26, 0x0c	; 12
    3ad0:	ed 91       	ld	r30, X+
    3ad2:	fc 91       	ld	r31, X
    3ad4:	1d 97       	sbiw	r26, 0x0d	; 13
    3ad6:	c6 82       	std	Z+6, r12	; 0x06
    3ad8:	0f 5f       	subi	r16, 0xFF	; 255
    3ada:	1f 4f       	sbci	r17, 0xFF	; 255
    3adc:	60 5f       	subi	r22, 0xF0	; 240
    3ade:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    3ae0:	03 30       	cpi	r16, 0x03	; 3
    3ae2:	11 05       	cpc	r17, r1
    3ae4:	09 f0       	breq	.+2      	; 0x3ae8 <st_execute_move+0x1ec>
    3ae6:	30 cf       	rjmp	.-416    	; 0x3948 <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    3ae8:	10 92 30 22 	sts	0x2230, r1
	if (ax.a[X].step_counter) { 
    3aec:	80 91 33 22 	lds	r24, 0x2233
    3af0:	90 91 34 22 	lds	r25, 0x2234
    3af4:	a0 91 35 22 	lds	r26, 0x2235
    3af8:	b0 91 36 22 	lds	r27, 0x2236
    3afc:	00 97       	sbiw	r24, 0x00	; 0
    3afe:	a1 05       	cpc	r26, r1
    3b00:	b1 05       	cpc	r27, r1
    3b02:	59 f0       	breq	.+22     	; 0x3b1a <st_execute_move+0x21e>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    3b04:	e0 91 41 22 	lds	r30, 0x2241
    3b08:	f0 91 42 22 	lds	r31, 0x2242
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    3b10:	80 91 30 22 	lds	r24, 0x2230
    3b14:	88 60       	ori	r24, 0x08	; 8
    3b16:	80 93 30 22 	sts	0x2230, r24
	}
	if (ax.a[Y].step_counter) {
    3b1a:	80 91 43 22 	lds	r24, 0x2243
    3b1e:	90 91 44 22 	lds	r25, 0x2244
    3b22:	a0 91 45 22 	lds	r26, 0x2245
    3b26:	b0 91 46 22 	lds	r27, 0x2246
    3b2a:	00 97       	sbiw	r24, 0x00	; 0
    3b2c:	a1 05       	cpc	r26, r1
    3b2e:	b1 05       	cpc	r27, r1
    3b30:	59 f0       	breq	.+22     	; 0x3b48 <st_execute_move+0x24c>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    3b32:	e0 91 51 22 	lds	r30, 0x2251
    3b36:	f0 91 52 22 	lds	r31, 0x2252
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    3b3e:	80 91 30 22 	lds	r24, 0x2230
    3b42:	84 60       	ori	r24, 0x04	; 4
    3b44:	80 93 30 22 	sts	0x2230, r24
	}
	if (ax.a[Z].step_counter) {
    3b48:	80 91 53 22 	lds	r24, 0x2253
    3b4c:	90 91 54 22 	lds	r25, 0x2254
    3b50:	a0 91 55 22 	lds	r26, 0x2255
    3b54:	b0 91 56 22 	lds	r27, 0x2256
    3b58:	00 97       	sbiw	r24, 0x00	; 0
    3b5a:	a1 05       	cpc	r26, r1
    3b5c:	b1 05       	cpc	r27, r1
    3b5e:	59 f0       	breq	.+22     	; 0x3b76 <st_execute_move+0x27a>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    3b60:	e0 91 61 22 	lds	r30, 0x2261
    3b64:	f0 91 62 22 	lds	r31, 0x2262
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    3b6c:	80 91 30 22 	lds	r24, 0x2230
    3b70:	82 60       	ori	r24, 0x02	; 2
    3b72:	80 93 30 22 	sts	0x2230, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.mutex = FALSE;
    3b76:	10 92 2e 22 	sts	0x222E, r1
}
    3b7a:	df 91       	pop	r29
    3b7c:	cf 91       	pop	r28
    3b7e:	1f 91       	pop	r17
    3b80:	0f 91       	pop	r16
    3b82:	ff 90       	pop	r15
    3b84:	ef 90       	pop	r14
    3b86:	df 90       	pop	r13
    3b88:	cf 90       	pop	r12
    3b8a:	08 95       	ret

00003b8c <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.mutex = FALSE;
    3b8c:	10 92 2e 22 	sts	0x222E, r1
	st_execute_move();		// recursively empty the move queue
    3b90:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <st_execute_move>
	return;
}
    3b94:	08 95       	ret

00003b96 <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    3b96:	1f 92       	push	r1
    3b98:	0f 92       	push	r0
    3b9a:	0f b6       	in	r0, 0x3f	; 63
    3b9c:	0f 92       	push	r0
    3b9e:	0b b6       	in	r0, 0x3b	; 59
    3ba0:	0f 92       	push	r0
    3ba2:	11 24       	eor	r1, r1
    3ba4:	2f 93       	push	r18
    3ba6:	3f 93       	push	r19
    3ba8:	4f 93       	push	r20
    3baa:	5f 93       	push	r21
    3bac:	6f 93       	push	r22
    3bae:	7f 93       	push	r23
    3bb0:	8f 93       	push	r24
    3bb2:	9f 93       	push	r25
    3bb4:	af 93       	push	r26
    3bb6:	bf 93       	push	r27
    3bb8:	ef 93       	push	r30
    3bba:	ff 93       	push	r31
	if (ax.stopped) {
    3bbc:	80 91 2f 22 	lds	r24, 0x222F
    3bc0:	88 23       	and	r24, r24
    3bc2:	09 f0       	breq	.+2      	; 0x3bc6 <__vector_108+0x30>
    3bc4:	3f c0       	rjmp	.+126    	; 0x3c44 <__vector_108+0xae>
		return;
	}
	if (--ax.a[A].postscale_counter != 0) {
    3bc6:	80 91 6b 22 	lds	r24, 0x226B
    3bca:	90 91 6c 22 	lds	r25, 0x226C
    3bce:	01 97       	sbiw	r24, 0x01	; 1
    3bd0:	80 93 6b 22 	sts	0x226B, r24
    3bd4:	90 93 6c 22 	sts	0x226C, r25
    3bd8:	89 2b       	or	r24, r25
    3bda:	a1 f5       	brne	.+104    	; 0x3c44 <__vector_108+0xae>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    3bdc:	e0 e6       	ldi	r30, 0x60	; 96
    3bde:	f6 e0       	ldi	r31, 0x06	; 6
    3be0:	81 e0       	ldi	r24, 0x01	; 1
    3be2:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    3be4:	80 91 63 22 	lds	r24, 0x2263
    3be8:	90 91 64 22 	lds	r25, 0x2264
    3bec:	a0 91 65 22 	lds	r26, 0x2265
    3bf0:	b0 91 66 22 	lds	r27, 0x2266
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	a1 09       	sbc	r26, r1
    3bf8:	b1 09       	sbc	r27, r1
    3bfa:	80 93 63 22 	sts	0x2263, r24
    3bfe:	90 93 64 22 	sts	0x2264, r25
    3c02:	a0 93 65 22 	sts	0x2265, r26
    3c06:	b0 93 66 22 	sts	0x2266, r27
    3c0a:	00 97       	sbiw	r24, 0x00	; 0
    3c0c:	a1 05       	cpc	r26, r1
    3c0e:	b1 05       	cpc	r27, r1
    3c10:	69 f4       	brne	.+26     	; 0x3c2c <__vector_108+0x96>
		A_TIMER.CTRLA = TC_CLK_OFF;
    3c12:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    3c16:	84 e0       	ldi	r24, 0x04	; 4
    3c18:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    3c1a:	80 91 30 22 	lds	r24, 0x2230
    3c1e:	8e 7f       	andi	r24, 0xFE	; 254
    3c20:	80 93 30 22 	sts	0x2230, r24
		if (ax.active_axes == 0) {
    3c24:	88 23       	and	r24, r24
    3c26:	11 f4       	brne	.+4      	; 0x3c2c <__vector_108+0x96>
			st_execute_move();
    3c28:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    3c2c:	80 91 69 22 	lds	r24, 0x2269
    3c30:	90 91 6a 22 	lds	r25, 0x226A
    3c34:	80 93 6b 22 	sts	0x226B, r24
    3c38:	90 93 6c 22 	sts	0x226C, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	e0 e6       	ldi	r30, 0x60	; 96
    3c40:	f6 e0       	ldi	r31, 0x06	; 6
    3c42:	86 83       	std	Z+6, r24	; 0x06
}
    3c44:	ff 91       	pop	r31
    3c46:	ef 91       	pop	r30
    3c48:	bf 91       	pop	r27
    3c4a:	af 91       	pop	r26
    3c4c:	9f 91       	pop	r25
    3c4e:	8f 91       	pop	r24
    3c50:	7f 91       	pop	r23
    3c52:	6f 91       	pop	r22
    3c54:	5f 91       	pop	r21
    3c56:	4f 91       	pop	r20
    3c58:	3f 91       	pop	r19
    3c5a:	2f 91       	pop	r18
    3c5c:	0f 90       	pop	r0
    3c5e:	0b be       	out	0x3b, r0	; 59
    3c60:	0f 90       	pop	r0
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	0f 90       	pop	r0
    3c66:	1f 90       	pop	r1
    3c68:	18 95       	reti

00003c6a <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    3c6a:	1f 92       	push	r1
    3c6c:	0f 92       	push	r0
    3c6e:	0f b6       	in	r0, 0x3f	; 63
    3c70:	0f 92       	push	r0
    3c72:	0b b6       	in	r0, 0x3b	; 59
    3c74:	0f 92       	push	r0
    3c76:	11 24       	eor	r1, r1
    3c78:	2f 93       	push	r18
    3c7a:	3f 93       	push	r19
    3c7c:	4f 93       	push	r20
    3c7e:	5f 93       	push	r21
    3c80:	6f 93       	push	r22
    3c82:	7f 93       	push	r23
    3c84:	8f 93       	push	r24
    3c86:	9f 93       	push	r25
    3c88:	af 93       	push	r26
    3c8a:	bf 93       	push	r27
    3c8c:	ef 93       	push	r30
    3c8e:	ff 93       	push	r31
	if (ax.stopped) {
    3c90:	80 91 2f 22 	lds	r24, 0x222F
    3c94:	88 23       	and	r24, r24
    3c96:	09 f0       	breq	.+2      	; 0x3c9a <__vector_47+0x30>
    3c98:	3f c0       	rjmp	.+126    	; 0x3d18 <__vector_47+0xae>
		return;
	}
	if (--ax.a[Z].postscale_counter != 0) {
    3c9a:	80 91 5b 22 	lds	r24, 0x225B
    3c9e:	90 91 5c 22 	lds	r25, 0x225C
    3ca2:	01 97       	sbiw	r24, 0x01	; 1
    3ca4:	80 93 5b 22 	sts	0x225B, r24
    3ca8:	90 93 5c 22 	sts	0x225C, r25
    3cac:	89 2b       	or	r24, r25
    3cae:	a1 f5       	brne	.+104    	; 0x3d18 <__vector_47+0xae>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    3cb0:	e0 e8       	ldi	r30, 0x80	; 128
    3cb2:	f6 e0       	ldi	r31, 0x06	; 6
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    3cb8:	80 91 53 22 	lds	r24, 0x2253
    3cbc:	90 91 54 22 	lds	r25, 0x2254
    3cc0:	a0 91 55 22 	lds	r26, 0x2255
    3cc4:	b0 91 56 22 	lds	r27, 0x2256
    3cc8:	01 97       	sbiw	r24, 0x01	; 1
    3cca:	a1 09       	sbc	r26, r1
    3ccc:	b1 09       	sbc	r27, r1
    3cce:	80 93 53 22 	sts	0x2253, r24
    3cd2:	90 93 54 22 	sts	0x2254, r25
    3cd6:	a0 93 55 22 	sts	0x2255, r26
    3cda:	b0 93 56 22 	sts	0x2256, r27
    3cde:	00 97       	sbiw	r24, 0x00	; 0
    3ce0:	a1 05       	cpc	r26, r1
    3ce2:	b1 05       	cpc	r27, r1
    3ce4:	69 f4       	brne	.+26     	; 0x3d00 <__vector_47+0x96>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    3ce6:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    3cea:	84 e0       	ldi	r24, 0x04	; 4
    3cec:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    3cee:	80 91 30 22 	lds	r24, 0x2230
    3cf2:	8d 7f       	andi	r24, 0xFD	; 253
    3cf4:	80 93 30 22 	sts	0x2230, r24
		if (ax.active_axes == 0) {
    3cf8:	88 23       	and	r24, r24
    3cfa:	11 f4       	brne	.+4      	; 0x3d00 <__vector_47+0x96>
			st_execute_move();
    3cfc:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    3d00:	80 91 59 22 	lds	r24, 0x2259
    3d04:	90 91 5a 22 	lds	r25, 0x225A
    3d08:	80 93 5b 22 	sts	0x225B, r24
    3d0c:	90 93 5c 22 	sts	0x225C, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	e0 e8       	ldi	r30, 0x80	; 128
    3d14:	f6 e0       	ldi	r31, 0x06	; 6
    3d16:	86 83       	std	Z+6, r24	; 0x06
}
    3d18:	ff 91       	pop	r31
    3d1a:	ef 91       	pop	r30
    3d1c:	bf 91       	pop	r27
    3d1e:	af 91       	pop	r26
    3d20:	9f 91       	pop	r25
    3d22:	8f 91       	pop	r24
    3d24:	7f 91       	pop	r23
    3d26:	6f 91       	pop	r22
    3d28:	5f 91       	pop	r21
    3d2a:	4f 91       	pop	r20
    3d2c:	3f 91       	pop	r19
    3d2e:	2f 91       	pop	r18
    3d30:	0f 90       	pop	r0
    3d32:	0b be       	out	0x3b, r0	; 59
    3d34:	0f 90       	pop	r0
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	0f 90       	pop	r0
    3d3a:	1f 90       	pop	r1
    3d3c:	18 95       	reti

00003d3e <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    3d3e:	1f 92       	push	r1
    3d40:	0f 92       	push	r0
    3d42:	0f b6       	in	r0, 0x3f	; 63
    3d44:	0f 92       	push	r0
    3d46:	0b b6       	in	r0, 0x3b	; 59
    3d48:	0f 92       	push	r0
    3d4a:	11 24       	eor	r1, r1
    3d4c:	2f 93       	push	r18
    3d4e:	3f 93       	push	r19
    3d50:	4f 93       	push	r20
    3d52:	5f 93       	push	r21
    3d54:	6f 93       	push	r22
    3d56:	7f 93       	push	r23
    3d58:	8f 93       	push	r24
    3d5a:	9f 93       	push	r25
    3d5c:	af 93       	push	r26
    3d5e:	bf 93       	push	r27
    3d60:	ef 93       	push	r30
    3d62:	ff 93       	push	r31
	if (ax.stopped) {
    3d64:	80 91 2f 22 	lds	r24, 0x222F
    3d68:	88 23       	and	r24, r24
    3d6a:	09 f0       	breq	.+2      	; 0x3d6e <__vector_77+0x30>
    3d6c:	3f c0       	rjmp	.+126    	; 0x3dec <__vector_77+0xae>
		return;
	}
	if (--ax.a[Y].postscale_counter != 0) {
    3d6e:	80 91 4b 22 	lds	r24, 0x224B
    3d72:	90 91 4c 22 	lds	r25, 0x224C
    3d76:	01 97       	sbiw	r24, 0x01	; 1
    3d78:	80 93 4b 22 	sts	0x224B, r24
    3d7c:	90 93 4c 22 	sts	0x224C, r25
    3d80:	89 2b       	or	r24, r25
    3d82:	a1 f5       	brne	.+104    	; 0x3dec <__vector_77+0xae>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    3d84:	e0 ea       	ldi	r30, 0xA0	; 160
    3d86:	f6 e0       	ldi	r31, 0x06	; 6
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    3d8c:	80 91 43 22 	lds	r24, 0x2243
    3d90:	90 91 44 22 	lds	r25, 0x2244
    3d94:	a0 91 45 22 	lds	r26, 0x2245
    3d98:	b0 91 46 22 	lds	r27, 0x2246
    3d9c:	01 97       	sbiw	r24, 0x01	; 1
    3d9e:	a1 09       	sbc	r26, r1
    3da0:	b1 09       	sbc	r27, r1
    3da2:	80 93 43 22 	sts	0x2243, r24
    3da6:	90 93 44 22 	sts	0x2244, r25
    3daa:	a0 93 45 22 	sts	0x2245, r26
    3dae:	b0 93 46 22 	sts	0x2246, r27
    3db2:	00 97       	sbiw	r24, 0x00	; 0
    3db4:	a1 05       	cpc	r26, r1
    3db6:	b1 05       	cpc	r27, r1
    3db8:	69 f4       	brne	.+26     	; 0x3dd4 <__vector_77+0x96>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    3dba:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    3dbe:	84 e0       	ldi	r24, 0x04	; 4
    3dc0:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    3dc2:	80 91 30 22 	lds	r24, 0x2230
    3dc6:	8b 7f       	andi	r24, 0xFB	; 251
    3dc8:	80 93 30 22 	sts	0x2230, r24
		if (ax.active_axes == 0) {
    3dcc:	88 23       	and	r24, r24
    3dce:	11 f4       	brne	.+4      	; 0x3dd4 <__vector_77+0x96>
			st_execute_move();
    3dd0:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    3dd4:	80 91 49 22 	lds	r24, 0x2249
    3dd8:	90 91 4a 22 	lds	r25, 0x224A
    3ddc:	80 93 4b 22 	sts	0x224B, r24
    3de0:	90 93 4c 22 	sts	0x224C, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	e0 ea       	ldi	r30, 0xA0	; 160
    3de8:	f6 e0       	ldi	r31, 0x06	; 6
    3dea:	86 83       	std	Z+6, r24	; 0x06
}
    3dec:	ff 91       	pop	r31
    3dee:	ef 91       	pop	r30
    3df0:	bf 91       	pop	r27
    3df2:	af 91       	pop	r26
    3df4:	9f 91       	pop	r25
    3df6:	8f 91       	pop	r24
    3df8:	7f 91       	pop	r23
    3dfa:	6f 91       	pop	r22
    3dfc:	5f 91       	pop	r21
    3dfe:	4f 91       	pop	r20
    3e00:	3f 91       	pop	r19
    3e02:	2f 91       	pop	r18
    3e04:	0f 90       	pop	r0
    3e06:	0b be       	out	0x3b, r0	; 59
    3e08:	0f 90       	pop	r0
    3e0a:	0f be       	out	0x3f, r0	; 63
    3e0c:	0f 90       	pop	r0
    3e0e:	1f 90       	pop	r1
    3e10:	18 95       	reti

00003e12 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    3e12:	1f 92       	push	r1
    3e14:	0f 92       	push	r0
    3e16:	0f b6       	in	r0, 0x3f	; 63
    3e18:	0f 92       	push	r0
    3e1a:	0b b6       	in	r0, 0x3b	; 59
    3e1c:	0f 92       	push	r0
    3e1e:	11 24       	eor	r1, r1
    3e20:	2f 93       	push	r18
    3e22:	3f 93       	push	r19
    3e24:	4f 93       	push	r20
    3e26:	5f 93       	push	r21
    3e28:	6f 93       	push	r22
    3e2a:	7f 93       	push	r23
    3e2c:	8f 93       	push	r24
    3e2e:	9f 93       	push	r25
    3e30:	af 93       	push	r26
    3e32:	bf 93       	push	r27
    3e34:	ef 93       	push	r30
    3e36:	ff 93       	push	r31
	if (ax.stopped) {
    3e38:	80 91 2f 22 	lds	r24, 0x222F
    3e3c:	88 23       	and	r24, r24
    3e3e:	09 f0       	breq	.+2      	; 0x3e42 <__vector_14+0x30>
    3e40:	45 c0       	rjmp	.+138    	; 0x3ecc <__vector_14+0xba>
		return;
	}
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    3e42:	80 91 3b 22 	lds	r24, 0x223B
    3e46:	90 91 3c 22 	lds	r25, 0x223C
    3e4a:	01 97       	sbiw	r24, 0x01	; 1
    3e4c:	80 93 3b 22 	sts	0x223B, r24
    3e50:	90 93 3c 22 	sts	0x223C, r25
    3e54:	89 2b       	or	r24, r25
    3e56:	d1 f5       	brne	.+116    	; 0x3ecc <__vector_14+0xba>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    3e58:	80 91 3e 22 	lds	r24, 0x223E
    3e5c:	88 23       	and	r24, r24
    3e5e:	21 f4       	brne	.+8      	; 0x3e68 <__vector_14+0x56>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    3e60:	81 e0       	ldi	r24, 0x01	; 1
    3e62:	e0 e0       	ldi	r30, 0x00	; 0
    3e64:	f6 e0       	ldi	r31, 0x06	; 6
    3e66:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    3e68:	80 91 33 22 	lds	r24, 0x2233
    3e6c:	90 91 34 22 	lds	r25, 0x2234
    3e70:	a0 91 35 22 	lds	r26, 0x2235
    3e74:	b0 91 36 22 	lds	r27, 0x2236
    3e78:	01 97       	sbiw	r24, 0x01	; 1
    3e7a:	a1 09       	sbc	r26, r1
    3e7c:	b1 09       	sbc	r27, r1
    3e7e:	80 93 33 22 	sts	0x2233, r24
    3e82:	90 93 34 22 	sts	0x2234, r25
    3e86:	a0 93 35 22 	sts	0x2235, r26
    3e8a:	b0 93 36 22 	sts	0x2236, r27
    3e8e:	00 97       	sbiw	r24, 0x00	; 0
    3e90:	a1 05       	cpc	r26, r1
    3e92:	b1 05       	cpc	r27, r1
    3e94:	79 f4       	brne	.+30     	; 0x3eb4 <__vector_14+0xa2>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    3e96:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    3e9a:	84 e0       	ldi	r24, 0x04	; 4
    3e9c:	e0 e0       	ldi	r30, 0x00	; 0
    3e9e:	f6 e0       	ldi	r31, 0x06	; 6
    3ea0:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    3ea2:	80 91 30 22 	lds	r24, 0x2230
    3ea6:	87 7f       	andi	r24, 0xF7	; 247
    3ea8:	80 93 30 22 	sts	0x2230, r24
		if (ax.active_axes == 0) {				// if all axes are done
    3eac:	88 23       	and	r24, r24
    3eae:	11 f4       	brne	.+4      	; 0x3eb4 <__vector_14+0xa2>
			st_execute_move();					// ...run the next move
    3eb0:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    3eb4:	80 91 39 22 	lds	r24, 0x2239
    3eb8:	90 91 3a 22 	lds	r25, 0x223A
    3ebc:	80 93 3b 22 	sts	0x223B, r24
    3ec0:	90 93 3c 22 	sts	0x223C, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	e0 e0       	ldi	r30, 0x00	; 0
    3ec8:	f6 e0       	ldi	r31, 0x06	; 6
    3eca:	86 83       	std	Z+6, r24	; 0x06
}
    3ecc:	ff 91       	pop	r31
    3ece:	ef 91       	pop	r30
    3ed0:	bf 91       	pop	r27
    3ed2:	af 91       	pop	r26
    3ed4:	9f 91       	pop	r25
    3ed6:	8f 91       	pop	r24
    3ed8:	7f 91       	pop	r23
    3eda:	6f 91       	pop	r22
    3edc:	5f 91       	pop	r21
    3ede:	4f 91       	pop	r20
    3ee0:	3f 91       	pop	r19
    3ee2:	2f 91       	pop	r18
    3ee4:	0f 90       	pop	r0
    3ee6:	0b be       	out	0x3b, r0	; 59
    3ee8:	0f 90       	pop	r0
    3eea:	0f be       	out	0x3f, r0	; 63
    3eec:	0f 90       	pop	r0
    3eee:	1f 90       	pop	r1
    3ef0:	18 95       	reti

00003ef2 <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    3ef2:	e0 ea       	ldi	r30, 0xA0	; 160
    3ef4:	f0 e0       	ldi	r31, 0x00	; 0
    3ef6:	82 81       	ldd	r24, Z+2	; 0x02
    3ef8:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    3efa:	98 ed       	ldi	r25, 0xD8	; 216
    3efc:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    3efe:	82 83       	std	Z+2, r24	; 0x02
}
    3f00:	08 95       	ret

00003f02 <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    3f02:	e0 ea       	ldi	r30, 0xA0	; 160
    3f04:	f0 e0       	ldi	r31, 0x00	; 0
    3f06:	82 81       	ldd	r24, Z+2	; 0x02
    3f08:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    3f0a:	98 ed       	ldi	r25, 0xD8	; 216
    3f0c:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    3f0e:	82 83       	std	Z+2, r24	; 0x02
}
    3f10:	08 95       	ret

00003f12 <xio_setflags>:
 * xio_setflags()
 */

int xio_setflags(const uint8_t dev, const uint16_t control)
{
	struct xioDEVICE *d = &ds[dev];
    3f12:	97 e1       	ldi	r25, 0x17	; 23
    3f14:	89 9f       	mul	r24, r25
    3f16:	f0 01       	movw	r30, r0
    3f18:	11 24       	eor	r1, r1
    3f1a:	e5 52       	subi	r30, 0x25	; 37
    3f1c:	fb 4d       	sbci	r31, 0xDB	; 219

	if (control & XIO_RD) {
    3f1e:	64 ff       	sbrs	r22, 4
    3f20:	05 c0       	rjmp	.+10     	; 0x3f2c <xio_setflags+0x1a>
		d->flags |= XIO_FLAG_RD_bm;
    3f22:	80 81       	ld	r24, Z
    3f24:	91 81       	ldd	r25, Z+1	; 0x01
    3f26:	81 60       	ori	r24, 0x01	; 1
    3f28:	80 83       	st	Z, r24
    3f2a:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_WR) {
    3f2c:	65 ff       	sbrs	r22, 5
    3f2e:	05 c0       	rjmp	.+10     	; 0x3f3a <xio_setflags+0x28>
		d->flags |= XIO_FLAG_WR_bm;
    3f30:	80 81       	ld	r24, Z
    3f32:	91 81       	ldd	r25, Z+1	; 0x01
    3f34:	82 60       	ori	r24, 0x02	; 2
    3f36:	80 83       	st	Z, r24
    3f38:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_BLOCK) {
    3f3a:	66 ff       	sbrs	r22, 6
    3f3c:	05 c0       	rjmp	.+10     	; 0x3f48 <xio_setflags+0x36>
		d->flags |= XIO_FLAG_BLOCK_bm;
    3f3e:	80 81       	ld	r24, Z
    3f40:	91 81       	ldd	r25, Z+1	; 0x01
    3f42:	84 60       	ori	r24, 0x04	; 4
    3f44:	80 83       	st	Z, r24
    3f46:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOBLOCK) {
    3f48:	67 ff       	sbrs	r22, 7
    3f4a:	05 c0       	rjmp	.+10     	; 0x3f56 <xio_setflags+0x44>
		d->flags &= ~XIO_FLAG_BLOCK_bm;
    3f4c:	80 81       	ld	r24, Z
    3f4e:	91 81       	ldd	r25, Z+1	; 0x01
    3f50:	8b 7f       	andi	r24, 0xFB	; 251
    3f52:	80 83       	st	Z, r24
    3f54:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_ECHO) {
    3f56:	70 ff       	sbrs	r23, 0
    3f58:	05 c0       	rjmp	.+10     	; 0x3f64 <xio_setflags+0x52>
		d->flags |= XIO_FLAG_ECHO_bm;
    3f5a:	80 81       	ld	r24, Z
    3f5c:	91 81       	ldd	r25, Z+1	; 0x01
    3f5e:	80 61       	ori	r24, 0x10	; 16
    3f60:	80 83       	st	Z, r24
    3f62:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOECHO) {
    3f64:	71 ff       	sbrs	r23, 1
    3f66:	05 c0       	rjmp	.+10     	; 0x3f72 <xio_setflags+0x60>
		d->flags &= ~XIO_FLAG_ECHO_bm;
    3f68:	80 81       	ld	r24, Z
    3f6a:	91 81       	ldd	r25, Z+1	; 0x01
    3f6c:	8f 7e       	andi	r24, 0xEF	; 239
    3f6e:	80 83       	st	Z, r24
    3f70:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_CRLF) {
    3f72:	72 ff       	sbrs	r23, 2
    3f74:	05 c0       	rjmp	.+10     	; 0x3f80 <xio_setflags+0x6e>
		d->flags |= XIO_FLAG_CRLF_bm;
    3f76:	80 81       	ld	r24, Z
    3f78:	91 81       	ldd	r25, Z+1	; 0x01
    3f7a:	80 62       	ori	r24, 0x20	; 32
    3f7c:	80 83       	st	Z, r24
    3f7e:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOCRLF) {
    3f80:	73 ff       	sbrs	r23, 3
    3f82:	05 c0       	rjmp	.+10     	; 0x3f8e <xio_setflags+0x7c>
		d->flags &= ~XIO_FLAG_CRLF_bm;
    3f84:	80 81       	ld	r24, Z
    3f86:	91 81       	ldd	r25, Z+1	; 0x01
    3f88:	8f 7d       	andi	r24, 0xDF	; 223
    3f8a:	80 83       	st	Z, r24
    3f8c:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_LINEMODE) {
    3f8e:	74 ff       	sbrs	r23, 4
    3f90:	05 c0       	rjmp	.+10     	; 0x3f9c <xio_setflags+0x8a>
		d->flags |= XIO_FLAG_LINEMODE_bm;
    3f92:	80 81       	ld	r24, Z
    3f94:	91 81       	ldd	r25, Z+1	; 0x01
    3f96:	80 64       	ori	r24, 0x40	; 64
    3f98:	80 83       	st	Z, r24
    3f9a:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOLINEMODE) {
    3f9c:	75 ff       	sbrs	r23, 5
    3f9e:	05 c0       	rjmp	.+10     	; 0x3faa <xio_setflags+0x98>
		d->flags &= ~XIO_FLAG_LINEMODE_bm;
    3fa0:	80 81       	ld	r24, Z
    3fa2:	91 81       	ldd	r25, Z+1	; 0x01
    3fa4:	8f 7b       	andi	r24, 0xBF	; 191
    3fa6:	80 83       	st	Z, r24
    3fa8:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_SEMICOLONS) {
    3faa:	76 ff       	sbrs	r23, 6
    3fac:	05 c0       	rjmp	.+10     	; 0x3fb8 <xio_setflags+0xa6>
		d->flags |= XIO_FLAG_SEMICOLONS_bm;
    3fae:	80 81       	ld	r24, Z
    3fb0:	91 81       	ldd	r25, Z+1	; 0x01
    3fb2:	80 68       	ori	r24, 0x80	; 128
    3fb4:	80 83       	st	Z, r24
    3fb6:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOSEMICOLONS) {
    3fb8:	77 ff       	sbrs	r23, 7
    3fba:	05 c0       	rjmp	.+10     	; 0x3fc6 <xio_setflags+0xb4>
		d->flags &= ~XIO_FLAG_SEMICOLONS_bm;
    3fbc:	80 81       	ld	r24, Z
    3fbe:	91 81       	ldd	r25, Z+1	; 0x01
    3fc0:	8f 77       	andi	r24, 0x7F	; 127
    3fc2:	80 83       	st	Z, r24
    3fc4:	91 83       	std	Z+1, r25	; 0x01
	}
	return (XIO_OK);
}
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	08 95       	ret

00003fcc <xio_set_stdin>:
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	27 e1       	ldi	r18, 0x17	; 23
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	82 9f       	mul	r24, r18
    3fd4:	f0 01       	movw	r30, r0
    3fd6:	83 9f       	mul	r24, r19
    3fd8:	f0 0d       	add	r31, r0
    3fda:	92 9f       	mul	r25, r18
    3fdc:	f0 0d       	add	r31, r0
    3fde:	11 24       	eor	r1, r1
    3fe0:	e5 52       	subi	r30, 0x25	; 37
    3fe2:	fb 4d       	sbci	r31, 0xDB	; 219
    3fe4:	83 89       	ldd	r24, Z+19	; 0x13
    3fe6:	94 89       	ldd	r25, Z+20	; 0x14
    3fe8:	80 93 71 26 	sts	0x2671, r24
    3fec:	90 93 72 26 	sts	0x2672, r25
}
    3ff0:	08 95       	ret

00003ff2 <xio_set_stdout>:

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	27 e1       	ldi	r18, 0x17	; 23
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	82 9f       	mul	r24, r18
    3ffa:	f0 01       	movw	r30, r0
    3ffc:	83 9f       	mul	r24, r19
    3ffe:	f0 0d       	add	r31, r0
    4000:	92 9f       	mul	r25, r18
    4002:	f0 0d       	add	r31, r0
    4004:	11 24       	eor	r1, r1
    4006:	e5 52       	subi	r30, 0x25	; 37
    4008:	fb 4d       	sbci	r31, 0xDB	; 219
    400a:	83 89       	ldd	r24, Z+19	; 0x13
    400c:	94 89       	ldd	r25, Z+20	; 0x14
    400e:	80 93 73 26 	sts	0x2673, r24
    4012:	90 93 74 26 	sts	0x2674, r25
}
    4016:	08 95       	ret

00004018 <xio_set_stderr>:

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	27 e1       	ldi	r18, 0x17	; 23
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	82 9f       	mul	r24, r18
    4020:	f0 01       	movw	r30, r0
    4022:	83 9f       	mul	r24, r19
    4024:	f0 0d       	add	r31, r0
    4026:	92 9f       	mul	r25, r18
    4028:	f0 0d       	add	r31, r0
    402a:	11 24       	eor	r1, r1
    402c:	e5 52       	subi	r30, 0x25	; 37
    402e:	fb 4d       	sbci	r31, 0xDB	; 219
    4030:	83 89       	ldd	r24, Z+19	; 0x13
    4032:	94 89       	ldd	r25, Z+20	; 0x14
    4034:	80 93 75 26 	sts	0x2675, r24
    4038:	90 93 76 26 	sts	0x2676, r25
}
    403c:	08 95       	ret

0000403e <xio_putc>:
/*
 * xio_putc() - common entry point for putc
 */

int xio_putc(const uint8_t dev, const char c)
{
    403e:	46 2f       	mov	r20, r22
	if (dev < XIO_DEV_COUNT) {
    4040:	88 30       	cpi	r24, 0x08	; 8
    4042:	18 f0       	brcs	.+6      	; 0x404a <xio_putc+0xc>
    4044:	27 e0       	ldi	r18, 0x07	; 7
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	15 c0       	rjmp	.+42     	; 0x4074 <xio_putc+0x36>
		return ds[dev].x_putc(c, ds[dev].fdev);
    404a:	28 2f       	mov	r18, r24
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	87 e1       	ldi	r24, 0x17	; 23
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	28 9f       	mul	r18, r24
    4054:	f0 01       	movw	r30, r0
    4056:	29 9f       	mul	r18, r25
    4058:	f0 0d       	add	r31, r0
    405a:	38 9f       	mul	r19, r24
    405c:	f0 0d       	add	r31, r0
    405e:	11 24       	eor	r1, r1
    4060:	e5 52       	subi	r30, 0x25	; 37
    4062:	fb 4d       	sbci	r31, 0xDB	; 219
    4064:	63 89       	ldd	r22, Z+19	; 0x13
    4066:	74 89       	ldd	r23, Z+20	; 0x14
    4068:	03 84       	ldd	r0, Z+11	; 0x0b
    406a:	f4 85       	ldd	r31, Z+12	; 0x0c
    406c:	e0 2d       	mov	r30, r0
    406e:	84 2f       	mov	r24, r20
    4070:	19 95       	eicall
    4072:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}
}
    4074:	c9 01       	movw	r24, r18
    4076:	08 95       	ret

00004078 <xio_getc>:
 * xio_getc() - common entry point for getc
 */

int xio_getc(const uint8_t dev)
{
	if (dev < XIO_DEV_COUNT) {
    4078:	88 30       	cpi	r24, 0x08	; 8
    407a:	18 f0       	brcs	.+6      	; 0x4082 <xio_getc+0xa>
    407c:	27 e0       	ldi	r18, 0x07	; 7
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	14 c0       	rjmp	.+40     	; 0x40aa <xio_getc+0x32>
		return ds[dev].x_getc(ds[dev].fdev);
    4082:	28 2f       	mov	r18, r24
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	87 e1       	ldi	r24, 0x17	; 23
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	28 9f       	mul	r18, r24
    408c:	f0 01       	movw	r30, r0
    408e:	29 9f       	mul	r18, r25
    4090:	f0 0d       	add	r31, r0
    4092:	38 9f       	mul	r19, r24
    4094:	f0 0d       	add	r31, r0
    4096:	11 24       	eor	r1, r1
    4098:	e5 52       	subi	r30, 0x25	; 37
    409a:	fb 4d       	sbci	r31, 0xDB	; 219
    409c:	25 85       	ldd	r18, Z+13	; 0x0d
    409e:	36 85       	ldd	r19, Z+14	; 0x0e
    40a0:	83 89       	ldd	r24, Z+19	; 0x13
    40a2:	94 89       	ldd	r25, Z+20	; 0x14
    40a4:	f9 01       	movw	r30, r18
    40a6:	19 95       	eicall
    40a8:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}		
}
    40aa:	c9 01       	movw	r24, r18
    40ac:	08 95       	ret

000040ae <xio_readln>:
 *	size	size of text buffer in 1 offset form: e.g. use 80 instead of 79
 */

int xio_readln(const uint8_t dev, char *buf, const uint8_t size)
{
	if (dev < XIO_DEV_COUNT) {
    40ae:	88 30       	cpi	r24, 0x08	; 8
    40b0:	18 f0       	brcs	.+6      	; 0x40b8 <xio_readln+0xa>
    40b2:	27 e0       	ldi	r18, 0x07	; 7
    40b4:	30 e0       	ldi	r19, 0x00	; 0
    40b6:	14 c0       	rjmp	.+40     	; 0x40e0 <xio_readln+0x32>
		return ds[dev].x_readln(buf, size);
    40b8:	28 2f       	mov	r18, r24
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	87 e1       	ldi	r24, 0x17	; 23
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	28 9f       	mul	r18, r24
    40c2:	f0 01       	movw	r30, r0
    40c4:	29 9f       	mul	r18, r25
    40c6:	f0 0d       	add	r31, r0
    40c8:	38 9f       	mul	r19, r24
    40ca:	f0 0d       	add	r31, r0
    40cc:	11 24       	eor	r1, r1
    40ce:	e5 52       	subi	r30, 0x25	; 37
    40d0:	fb 4d       	sbci	r31, 0xDB	; 219
    40d2:	07 84       	ldd	r0, Z+15	; 0x0f
    40d4:	f0 89       	ldd	r31, Z+16	; 0x10
    40d6:	e0 2d       	mov	r30, r0
    40d8:	cb 01       	movw	r24, r22
    40da:	64 2f       	mov	r22, r20
    40dc:	19 95       	eicall
    40de:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}		
}
    40e0:	c9 01       	movw	r24, r18
    40e2:	08 95       	ret

000040e4 <xio_init_dev>:
	int (*x_setflags)(const uint16_t control),// set device control flags
	int (*x_putc)(char, struct __file *),		// write char (stdio compatible)
	int (*x_getc)(struct __file *),			// read char (stdio compatible)
	int (*x_readln)(char *buf, uint8_t size)	// specialized line reader
	) 
{
    40e4:	df 92       	push	r13
    40e6:	ef 92       	push	r14
    40e8:	ff 92       	push	r15
    40ea:	0f 93       	push	r16
    40ec:	1f 93       	push	r17
    40ee:	cf 93       	push	r28
    40f0:	df 93       	push	r29
	// clear device struct
	memset (&ds[dev], 0, sizeof(struct xioDEVICE));	
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	e7 e1       	ldi	r30, 0x17	; 23
    40f6:	f0 e0       	ldi	r31, 0x00	; 0
    40f8:	8e 9f       	mul	r24, r30
    40fa:	d0 01       	movw	r26, r0
    40fc:	8f 9f       	mul	r24, r31
    40fe:	b0 0d       	add	r27, r0
    4100:	9e 9f       	mul	r25, r30
    4102:	b0 0d       	add	r27, r0
    4104:	11 24       	eor	r1, r1
    4106:	a5 52       	subi	r26, 0x25	; 37
    4108:	bb 4d       	sbci	r27, 0xDB	; 219
    410a:	0f 2e       	mov	r0, r31
    410c:	f7 e1       	ldi	r31, 0x17	; 23
    410e:	df 2e       	mov	r13, r31
    4110:	f0 2d       	mov	r31, r0
    4112:	ed 01       	movw	r28, r26
    4114:	19 92       	st	Y+, r1
    4116:	da 94       	dec	r13
    4118:	e9 f7       	brne	.-6      	; 0x4114 <xio_init_dev+0x30>

	// bind functions
	ds[dev].x_open = x_open;	
    411a:	17 96       	adiw	r26, 0x07	; 7
    411c:	6d 93       	st	X+, r22
    411e:	7c 93       	st	X, r23
    4120:	18 97       	sbiw	r26, 0x08	; 8
	ds[dev].x_setflags = x_setflags;
    4122:	19 96       	adiw	r26, 0x09	; 9
    4124:	4d 93       	st	X+, r20
    4126:	5c 93       	st	X, r21
    4128:	1a 97       	sbiw	r26, 0x0a	; 10
	ds[dev].x_putc = x_putc;
    412a:	1b 96       	adiw	r26, 0x0b	; 11
    412c:	2d 93       	st	X+, r18
    412e:	3c 93       	st	X, r19
    4130:	1c 97       	sbiw	r26, 0x0c	; 12
	ds[dev].x_getc = x_getc;
    4132:	1d 96       	adiw	r26, 0x0d	; 13
    4134:	0d 93       	st	X+, r16
    4136:	1c 93       	st	X, r17
    4138:	1e 97       	sbiw	r26, 0x0e	; 14
	ds[dev].x_readln = x_readln;
    413a:	1f 96       	adiw	r26, 0x0f	; 15
    413c:	ed 92       	st	X+, r14
    413e:	fc 92       	st	X, r15
    4140:	50 97       	sbiw	r26, 0x10	; 16

	// bind and setup stdio struct
	ds[dev].fdev = &ss[dev];					
    4142:	88 0f       	add	r24, r24
    4144:	99 1f       	adc	r25, r25
    4146:	fc 01       	movw	r30, r24
    4148:	43 e0       	ldi	r20, 0x03	; 3
    414a:	ee 0f       	add	r30, r30
    414c:	ff 1f       	adc	r31, r31
    414e:	4a 95       	dec	r20
    4150:	e1 f7       	brne	.-8      	; 0x414a <xio_init_dev+0x66>
    4152:	e8 1b       	sub	r30, r24
    4154:	f9 0b       	sbc	r31, r25
    4156:	ed 56       	subi	r30, 0x6D	; 109
    4158:	fa 4d       	sbci	r31, 0xDA	; 218
    415a:	53 96       	adiw	r26, 0x13	; 19
    415c:	ed 93       	st	X+, r30
    415e:	fc 93       	st	X, r31
    4160:	54 97       	sbiw	r26, 0x14	; 20
	fdev_setup_stream(ds[dev].fdev, x_putc, x_getc, _FDEV_SETUP_RW);
    4162:	20 87       	std	Z+8, r18	; 0x08
    4164:	31 87       	std	Z+9, r19	; 0x09
    4166:	02 87       	std	Z+10, r16	; 0x0a
    4168:	13 87       	std	Z+11, r17	; 0x0b
    416a:	83 e0       	ldi	r24, 0x03	; 3
    416c:	83 83       	std	Z+3, r24	; 0x03
    416e:	14 86       	std	Z+12, r1	; 0x0c
    4170:	15 86       	std	Z+13, r1	; 0x0d
}
    4172:	df 91       	pop	r29
    4174:	cf 91       	pop	r28
    4176:	1f 91       	pop	r17
    4178:	0f 91       	pop	r16
    417a:	ff 90       	pop	r15
    417c:	ef 90       	pop	r14
    417e:	df 90       	pop	r13
    4180:	08 95       	ret

00004182 <xio_init>:
 */

void xio_init(void)
{	
	// call device inits
	xio_init_rs485();
    4182:	0e 94 75 2c 	call	0x58ea	; 0x58ea <xio_init_rs485>
	xio_init_usb();
    4186:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <xio_init_usb>
	xio_init_pgm();
    418a:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <xio_init_pgm>
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    418e:	80 91 08 26 	lds	r24, 0x2608
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	27 e1       	ldi	r18, 0x17	; 23
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	82 9f       	mul	r24, r18
    419a:	f0 01       	movw	r30, r0
    419c:	83 9f       	mul	r24, r19
    419e:	f0 0d       	add	r31, r0
    41a0:	92 9f       	mul	r25, r18
    41a2:	f0 0d       	add	r31, r0
    41a4:	11 24       	eor	r1, r1
    41a6:	e5 52       	subi	r30, 0x25	; 37
    41a8:	fb 4d       	sbci	r31, 0xDB	; 219
    41aa:	83 89       	ldd	r24, Z+19	; 0x13
    41ac:	94 89       	ldd	r25, Z+20	; 0x14
    41ae:	80 93 71 26 	sts	0x2671, r24
    41b2:	90 93 72 26 	sts	0x2672, r25
}

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    41b6:	80 93 73 26 	sts	0x2673, r24
    41ba:	90 93 74 26 	sts	0x2674, r25
}

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    41be:	80 93 75 26 	sts	0x2675, r24
    41c2:	90 93 76 26 	sts	0x2676, r25
#ifdef __SLAVE_MODE
	xio_set_stderr(XIO_DEV_USB);		// +++ debug
#endif

	// tell the world we are ready!
	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    41c6:	0f 92       	push	r0
    41c8:	0f 92       	push	r0
    41ca:	8f e8       	ldi	r24, 0x8F	; 143
    41cc:	96 e0       	ldi	r25, 0x06	; 6
    41ce:	ed b7       	in	r30, 0x3d	; 61
    41d0:	fe b7       	in	r31, 0x3e	; 62
    41d2:	81 83       	std	Z+1, r24	; 0x01
    41d4:	92 83       	std	Z+2, r25	; 0x02
    41d6:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
    41da:	0f 90       	pop	r0
    41dc:	0f 90       	pop	r0
}
    41de:	08 95       	ret

000041e0 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    41e0:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    41e2:	e0 ec       	ldi	r30, 0xC0	; 192
    41e4:	f1 e0       	ldi	r31, 0x01	; 1
    41e6:	80 91 cf 01 	lds	r24, 0x01CF
    41ea:	87 fd       	sbrc	r24, 7
    41ec:	fa cf       	rjmp	.-12     	; 0x41e2 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    41ee:	26 2f       	mov	r18, r22
    41f0:	30 e0       	ldi	r19, 0x00	; 0
    41f2:	2f 71       	andi	r18, 0x1F	; 31
    41f4:	30 70       	andi	r19, 0x00	; 0
    41f6:	89 2f       	mov	r24, r25
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	45 e0       	ldi	r20, 0x05	; 5
    41fc:	88 0f       	add	r24, r24
    41fe:	99 1f       	adc	r25, r25
    4200:	4a 95       	dec	r20
    4202:	e1 f7       	brne	.-8      	; 0x41fc <EEPROM_ReadByte+0x1c>
    4204:	28 2b       	or	r18, r24
    4206:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    4208:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    420c:	83 2f       	mov	r24, r19
    420e:	8f 71       	andi	r24, 0x1F	; 31
    4210:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    4212:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    4214:	86 e0       	ldi	r24, 0x06	; 6
    4216:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    4218:	ef 93       	push	r30
    421a:	ff 93       	push	r31
    421c:	0f 93       	push	r16
    421e:	2f 93       	push	r18
    4220:	eb ec       	ldi	r30, 0xCB	; 203
    4222:	f1 e0       	ldi	r31, 0x01	; 1
    4224:	08 ed       	ldi	r16, 0xD8	; 216
    4226:	21 e0       	ldi	r18, 0x01	; 1
    4228:	04 bf       	out	0x34, r16	; 52
    422a:	20 83       	st	Z, r18
    422c:	2f 91       	pop	r18
    422e:	0f 91       	pop	r16
    4230:	ff 91       	pop	r31
    4232:	ef 91       	pop	r30

	return NVM.DATA0;
    4234:	80 91 c4 01 	lds	r24, 0x01C4
}
    4238:	08 95       	ret

0000423a <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    423a:	68 2f       	mov	r22, r24
    423c:	6f 71       	andi	r22, 0x1F	; 31
    423e:	55 e0       	ldi	r21, 0x05	; 5
    4240:	96 95       	lsr	r25
    4242:	87 95       	ror	r24
    4244:	5a 95       	dec	r21
    4246:	e1 f7       	brne	.-8      	; 0x4240 <eeprom_get_char+0x6>
    4248:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <EEPROM_ReadByte>
}
    424c:	08 95       	ret

0000424e <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    424e:	8f 92       	push	r8
    4250:	9f 92       	push	r9
    4252:	af 92       	push	r10
    4254:	bf 92       	push	r11
    4256:	cf 92       	push	r12
    4258:	df 92       	push	r13
    425a:	ff 92       	push	r15
    425c:	0f 93       	push	r16
    425e:	1f 93       	push	r17
    4260:	cf 93       	push	r28
    4262:	df 93       	push	r29
    4264:	4c 01       	movw	r8, r24
    4266:	5b 01       	movw	r10, r22
    4268:	6a 01       	movw	r12, r20
    426a:	8b 01       	movw	r16, r22
    426c:	ea 01       	movw	r28, r20
    426e:	ff 24       	eor	r15, r15
    4270:	18 c0       	rjmp	.+48     	; 0x42a2 <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    4272:	c8 01       	movw	r24, r16
    4274:	0e 94 1d 21 	call	0x423a	; 0x423a <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    4278:	ff 20       	and	r15, r15
    427a:	19 f0       	breq	.+6      	; 0x4282 <memcpy_from_eeprom_with_checksum+0x34>
    427c:	21 e0       	ldi	r18, 0x01	; 1
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	08 c0       	rjmp	.+16     	; 0x4292 <memcpy_from_eeprom_with_checksum+0x44>
    4282:	2f 2d       	mov	r18, r15
    4284:	33 27       	eor	r19, r19
    4286:	27 fd       	sbrc	r18, 7
    4288:	30 95       	com	r19
    428a:	22 27       	eor	r18, r18
    428c:	33 0f       	add	r19, r19
    428e:	22 1f       	adc	r18, r18
    4290:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    4292:	0f 5f       	subi	r16, 0xFF	; 255
    4294:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    4296:	f8 2e       	mov	r15, r24
    4298:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    429a:	f4 01       	movw	r30, r8
    429c:	81 93       	st	Z+, r24
    429e:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    42a0:	21 97       	sbiw	r28, 0x01	; 1
    42a2:	20 97       	sbiw	r28, 0x00	; 0
    42a4:	31 f7       	brne	.-52     	; 0x4272 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    42a6:	c6 01       	movw	r24, r12
    42a8:	8a 0d       	add	r24, r10
    42aa:	9b 1d       	adc	r25, r11
    42ac:	0e 94 1d 21 	call	0x423a	; 0x423a <eeprom_get_char>
    42b0:	20 e0       	ldi	r18, 0x00	; 0
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	f8 16       	cp	r15, r24
    42b6:	11 f4       	brne	.+4      	; 0x42bc <memcpy_from_eeprom_with_checksum+0x6e>
    42b8:	21 e0       	ldi	r18, 0x01	; 1
    42ba:	30 e0       	ldi	r19, 0x00	; 0
}
    42bc:	c9 01       	movw	r24, r18
    42be:	df 91       	pop	r29
    42c0:	cf 91       	pop	r28
    42c2:	1f 91       	pop	r17
    42c4:	0f 91       	pop	r16
    42c6:	ff 90       	pop	r15
    42c8:	df 90       	pop	r13
    42ca:	cf 90       	pop	r12
    42cc:	bf 90       	pop	r11
    42ce:	af 90       	pop	r10
    42d0:	9f 90       	pop	r9
    42d2:	8f 90       	pop	r8
    42d4:	08 95       	ret

000042d6 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    42d6:	80 91 cf 01 	lds	r24, 0x01CF
    42da:	87 fd       	sbrc	r24, 7
    42dc:	fc cf       	rjmp	.-8      	; 0x42d6 <EEPROM_WaitForNVM>
}
    42de:	08 95       	ret

000042e0 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    42e0:	80 91 cf 01 	lds	r24, 0x01CF
    42e4:	87 fd       	sbrc	r24, 7
    42e6:	fc cf       	rjmp	.-8      	; 0x42e0 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    42e8:	80 91 cf 01 	lds	r24, 0x01CF
    42ec:	81 ff       	sbrs	r24, 1
    42ee:	12 c0       	rjmp	.+36     	; 0x4314 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    42f0:	86 e3       	ldi	r24, 0x36	; 54
    42f2:	e0 ec       	ldi	r30, 0xC0	; 192
    42f4:	f1 e0       	ldi	r31, 0x01	; 1
    42f6:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    42f8:	ef 93       	push	r30
    42fa:	ff 93       	push	r31
    42fc:	0f 93       	push	r16
    42fe:	2f 93       	push	r18
    4300:	eb ec       	ldi	r30, 0xCB	; 203
    4302:	f1 e0       	ldi	r31, 0x01	; 1
    4304:	08 ed       	ldi	r16, 0xD8	; 216
    4306:	21 e0       	ldi	r18, 0x01	; 1
    4308:	04 bf       	out	0x34, r16	; 52
    430a:	20 83       	st	Z, r18
    430c:	2f 91       	pop	r18
    430e:	0f 91       	pop	r16
    4310:	ff 91       	pop	r31
    4312:	ef 91       	pop	r30
    4314:	08 95       	ret

00004316 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    4316:	df 92       	push	r13
    4318:	ef 92       	push	r14
    431a:	ff 92       	push	r15
    431c:	0f 93       	push	r16
    431e:	1f 93       	push	r17
    4320:	e8 2e       	mov	r14, r24
    4322:	06 2f       	mov	r16, r22
    4324:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    4326:	0e 94 70 21 	call	0x42e0	; 0x42e0 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    432a:	e0 ec       	ldi	r30, 0xC0	; 192
    432c:	f1 e0       	ldi	r31, 0x01	; 1
    432e:	83 e3       	ldi	r24, 0x33	; 51
    4330:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    4332:	10 e0       	ldi	r17, 0x00	; 0
    4334:	0f 71       	andi	r16, 0x1F	; 31
    4336:	10 70       	andi	r17, 0x00	; 0
    4338:	ff 24       	eor	r15, r15
    433a:	75 e0       	ldi	r23, 0x05	; 5
    433c:	ee 0c       	add	r14, r14
    433e:	ff 1c       	adc	r15, r15
    4340:	7a 95       	dec	r23
    4342:	e1 f7       	brne	.-8      	; 0x433c <EEPROM_WriteByte+0x26>
    4344:	0e 29       	or	r16, r14
    4346:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    4348:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    434a:	81 2f       	mov	r24, r17
    434c:	8f 71       	andi	r24, 0x1F	; 31
    434e:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    4350:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    4352:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    4354:	85 e3       	ldi	r24, 0x35	; 53
    4356:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    4358:	ef 93       	push	r30
    435a:	ff 93       	push	r31
    435c:	0f 93       	push	r16
    435e:	2f 93       	push	r18
    4360:	eb ec       	ldi	r30, 0xCB	; 203
    4362:	f1 e0       	ldi	r31, 0x01	; 1
    4364:	08 ed       	ldi	r16, 0xD8	; 216
    4366:	21 e0       	ldi	r18, 0x01	; 1
    4368:	04 bf       	out	0x34, r16	; 52
    436a:	20 83       	st	Z, r18
    436c:	2f 91       	pop	r18
    436e:	0f 91       	pop	r16
    4370:	ff 91       	pop	r31
    4372:	ef 91       	pop	r30
}
    4374:	1f 91       	pop	r17
    4376:	0f 91       	pop	r16
    4378:	ff 90       	pop	r15
    437a:	ef 90       	pop	r14
    437c:	df 90       	pop	r13
    437e:	08 95       	ret

00004380 <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    4380:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    4382:	68 2f       	mov	r22, r24
    4384:	6f 71       	andi	r22, 0x1F	; 31
    4386:	e5 e0       	ldi	r30, 0x05	; 5
    4388:	96 95       	lsr	r25
    438a:	87 95       	ror	r24
    438c:	ea 95       	dec	r30
    438e:	e1 f7       	brne	.-8      	; 0x4388 <eeprom_put_char+0x8>
    4390:	0e 94 8b 21 	call	0x4316	; 0x4316 <EEPROM_WriteByte>
}
    4394:	08 95       	ret

00004396 <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    4396:	8f 92       	push	r8
    4398:	9f 92       	push	r9
    439a:	af 92       	push	r10
    439c:	bf 92       	push	r11
    439e:	cf 92       	push	r12
    43a0:	df 92       	push	r13
    43a2:	ef 92       	push	r14
    43a4:	ff 92       	push	r15
    43a6:	0f 93       	push	r16
    43a8:	df 93       	push	r29
    43aa:	cf 93       	push	r28
    43ac:	0f 92       	push	r0
    43ae:	0f 92       	push	r0
    43b0:	cd b7       	in	r28, 0x3d	; 61
    43b2:	de b7       	in	r29, 0x3e	; 62
    43b4:	5c 01       	movw	r10, r24
    43b6:	6b 01       	movw	r12, r22
    43b8:	7a 01       	movw	r14, r20
    43ba:	4a 01       	movw	r8, r20
    43bc:	00 e0       	ldi	r16, 0x00	; 0
    43be:	1e c0       	rjmp	.+60     	; 0x43fc <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    43c0:	00 23       	and	r16, r16
    43c2:	19 f0       	breq	.+6      	; 0x43ca <memcpy_to_eeprom_with_checksum+0x34>
    43c4:	21 e0       	ldi	r18, 0x01	; 1
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	08 c0       	rjmp	.+16     	; 0x43da <memcpy_to_eeprom_with_checksum+0x44>
    43ca:	20 2f       	mov	r18, r16
    43cc:	33 27       	eor	r19, r19
    43ce:	27 fd       	sbrc	r18, 7
    43d0:	30 95       	com	r19
    43d2:	22 27       	eor	r18, r18
    43d4:	33 0f       	add	r19, r19
    43d6:	22 1f       	adc	r18, r18
    43d8:	33 27       	eor	r19, r19
    checksum += *source;
    43da:	f6 01       	movw	r30, r12
    43dc:	61 91       	ld	r22, Z+
    43de:	6f 01       	movw	r12, r30
    43e0:	06 2f       	mov	r16, r22
    43e2:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    43e4:	9c 01       	movw	r18, r24
    43e6:	2f 5f       	subi	r18, 0xFF	; 255
    43e8:	3f 4f       	sbci	r19, 0xFF	; 255
    43ea:	29 83       	std	Y+1, r18	; 0x01
    43ec:	3a 83       	std	Y+2, r19	; 0x02
    43ee:	0e 94 c0 21 	call	0x4380	; 0x4380 <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    43f2:	08 94       	sec
    43f4:	81 08       	sbc	r8, r1
    43f6:	91 08       	sbc	r9, r1
    43f8:	89 81       	ldd	r24, Y+1	; 0x01
    43fa:	9a 81       	ldd	r25, Y+2	; 0x02
    43fc:	81 14       	cp	r8, r1
    43fe:	91 04       	cpc	r9, r1
    4400:	f9 f6       	brne	.-66     	; 0x43c0 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    4402:	c7 01       	movw	r24, r14
    4404:	8a 0d       	add	r24, r10
    4406:	9b 1d       	adc	r25, r11
    4408:	60 2f       	mov	r22, r16
    440a:	0e 94 c0 21 	call	0x4380	; 0x4380 <eeprom_put_char>
}
    440e:	0f 90       	pop	r0
    4410:	0f 90       	pop	r0
    4412:	cf 91       	pop	r28
    4414:	df 91       	pop	r29
    4416:	0f 91       	pop	r16
    4418:	ff 90       	pop	r15
    441a:	ef 90       	pop	r14
    441c:	df 90       	pop	r13
    441e:	cf 90       	pop	r12
    4420:	bf 90       	pop	r11
    4422:	af 90       	pop	r10
    4424:	9f 90       	pop	r9
    4426:	8f 90       	pop	r8
    4428:	08 95       	ret

0000442a <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    442a:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    442c:	e0 ec       	ldi	r30, 0xC0	; 192
    442e:	f1 e0       	ldi	r31, 0x01	; 1
    4430:	80 91 cf 01 	lds	r24, 0x01CF
    4434:	87 fd       	sbrc	r24, 7
    4436:	fa cf       	rjmp	.-12     	; 0x442c <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    4438:	83 e3       	ldi	r24, 0x33	; 51
    443a:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    443c:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    4440:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    4442:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    4444:	64 83       	std	Z+4, r22	; 0x04
}
    4446:	08 95       	ret

00004448 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    4448:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    444a:	e0 ec       	ldi	r30, 0xC0	; 192
    444c:	f1 e0       	ldi	r31, 0x01	; 1
    444e:	80 91 cf 01 	lds	r24, 0x01CF
    4452:	87 fd       	sbrc	r24, 7
    4454:	fa cf       	rjmp	.-12     	; 0x444a <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    4456:	83 e3       	ldi	r24, 0x33	; 51
    4458:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    445a:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    445c:	12 82       	std	Z+2, r1	; 0x02
    445e:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    4460:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    4464:	8d 91       	ld	r24, X+
    4466:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    4468:	9f 5f       	subi	r25, 0xFF	; 255
    446a:	90 32       	cpi	r25, 0x20	; 32
    446c:	c9 f7       	brne	.-14     	; 0x4460 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    446e:	08 95       	ret

00004470 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    4470:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    4472:	e0 ec       	ldi	r30, 0xC0	; 192
    4474:	f1 e0       	ldi	r31, 0x01	; 1
    4476:	80 91 cf 01 	lds	r24, 0x01CF
    447a:	87 fd       	sbrc	r24, 7
    447c:	fa cf       	rjmp	.-12     	; 0x4472 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    447e:	89 2f       	mov	r24, r25
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	a5 e0       	ldi	r26, 0x05	; 5
    4484:	88 0f       	add	r24, r24
    4486:	99 1f       	adc	r25, r25
    4488:	aa 95       	dec	r26
    448a:	e1 f7       	brne	.-8      	; 0x4484 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    448c:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    4490:	89 2f       	mov	r24, r25
    4492:	8f 71       	andi	r24, 0x1F	; 31
    4494:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    4496:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    4498:	85 e3       	ldi	r24, 0x35	; 53
    449a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    449c:	ef 93       	push	r30
    449e:	ff 93       	push	r31
    44a0:	0f 93       	push	r16
    44a2:	2f 93       	push	r18
    44a4:	eb ec       	ldi	r30, 0xCB	; 203
    44a6:	f1 e0       	ldi	r31, 0x01	; 1
    44a8:	08 ed       	ldi	r16, 0xD8	; 216
    44aa:	21 e0       	ldi	r18, 0x01	; 1
    44ac:	04 bf       	out	0x34, r16	; 52
    44ae:	20 83       	st	Z, r18
    44b0:	2f 91       	pop	r18
    44b2:	0f 91       	pop	r16
    44b4:	ff 91       	pop	r31
    44b6:	ef 91       	pop	r30
}
    44b8:	08 95       	ret

000044ba <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    44ba:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    44bc:	e0 ec       	ldi	r30, 0xC0	; 192
    44be:	f1 e0       	ldi	r31, 0x01	; 1
    44c0:	80 91 cf 01 	lds	r24, 0x01CF
    44c4:	87 fd       	sbrc	r24, 7
    44c6:	fa cf       	rjmp	.-12     	; 0x44bc <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    44c8:	89 2f       	mov	r24, r25
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	b5 e0       	ldi	r27, 0x05	; 5
    44ce:	88 0f       	add	r24, r24
    44d0:	99 1f       	adc	r25, r25
    44d2:	ba 95       	dec	r27
    44d4:	e1 f7       	brne	.-8      	; 0x44ce <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    44d6:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    44da:	89 2f       	mov	r24, r25
    44dc:	8f 71       	andi	r24, 0x1F	; 31
    44de:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    44e0:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    44e2:	82 e3       	ldi	r24, 0x32	; 50
    44e4:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    44e6:	ef 93       	push	r30
    44e8:	ff 93       	push	r31
    44ea:	0f 93       	push	r16
    44ec:	2f 93       	push	r18
    44ee:	eb ec       	ldi	r30, 0xCB	; 203
    44f0:	f1 e0       	ldi	r31, 0x01	; 1
    44f2:	08 ed       	ldi	r16, 0xD8	; 216
    44f4:	21 e0       	ldi	r18, 0x01	; 1
    44f6:	04 bf       	out	0x34, r16	; 52
    44f8:	20 83       	st	Z, r18
    44fa:	2f 91       	pop	r18
    44fc:	0f 91       	pop	r16
    44fe:	ff 91       	pop	r31
    4500:	ef 91       	pop	r30
}
    4502:	08 95       	ret

00004504 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    4504:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    4506:	e0 ec       	ldi	r30, 0xC0	; 192
    4508:	f1 e0       	ldi	r31, 0x01	; 1
    450a:	80 91 cf 01 	lds	r24, 0x01CF
    450e:	87 fd       	sbrc	r24, 7
    4510:	fa cf       	rjmp	.-12     	; 0x4506 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    4512:	89 2f       	mov	r24, r25
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	25 e0       	ldi	r18, 0x05	; 5
    4518:	88 0f       	add	r24, r24
    451a:	99 1f       	adc	r25, r25
    451c:	2a 95       	dec	r18
    451e:	e1 f7       	brne	.-8      	; 0x4518 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    4520:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    4524:	89 2f       	mov	r24, r25
    4526:	8f 71       	andi	r24, 0x1F	; 31
    4528:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    452a:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    452c:	84 e3       	ldi	r24, 0x34	; 52
    452e:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    4530:	ef 93       	push	r30
    4532:	ff 93       	push	r31
    4534:	0f 93       	push	r16
    4536:	2f 93       	push	r18
    4538:	eb ec       	ldi	r30, 0xCB	; 203
    453a:	f1 e0       	ldi	r31, 0x01	; 1
    453c:	08 ed       	ldi	r16, 0xD8	; 216
    453e:	21 e0       	ldi	r18, 0x01	; 1
    4540:	04 bf       	out	0x34, r16	; 52
    4542:	20 83       	st	Z, r18
    4544:	2f 91       	pop	r18
    4546:	0f 91       	pop	r16
    4548:	ff 91       	pop	r31
    454a:	ef 91       	pop	r30
}
    454c:	08 95       	ret

0000454e <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    454e:	80 91 cf 01 	lds	r24, 0x01CF
    4552:	87 fd       	sbrc	r24, 7
    4554:	fc cf       	rjmp	.-8      	; 0x454e <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    4556:	80 e3       	ldi	r24, 0x30	; 48
    4558:	e0 ec       	ldi	r30, 0xC0	; 192
    455a:	f1 e0       	ldi	r31, 0x01	; 1
    455c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    455e:	ef 93       	push	r30
    4560:	ff 93       	push	r31
    4562:	0f 93       	push	r16
    4564:	2f 93       	push	r18
    4566:	eb ec       	ldi	r30, 0xCB	; 203
    4568:	f1 e0       	ldi	r31, 0x01	; 1
    456a:	08 ed       	ldi	r16, 0xD8	; 216
    456c:	21 e0       	ldi	r18, 0x01	; 1
    456e:	04 bf       	out	0x34, r16	; 52
    4570:	20 83       	st	Z, r18
    4572:	2f 91       	pop	r18
    4574:	0f 91       	pop	r16
    4576:	ff 91       	pop	r31
    4578:	ef 91       	pop	r30
}
    457a:	08 95       	ret

0000457c <tg_reset_source>:
 * tg_reset_source()  Reset source to default input device
 */

void tg_reset_source()
{
	_tg_set_source(tg.default_src);
    457c:	80 91 08 26 	lds	r24, 0x2608
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    4580:	80 93 07 26 	sts	0x2607, r24
	if (tg.src == XIO_DEV_PGM) {
    4584:	83 30       	cpi	r24, 0x03	; 3
    4586:	21 f4       	brne	.+8      	; 0x4590 <tg_reset_source+0x14>
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    4588:	80 91 04 26 	lds	r24, 0x2604
    458c:	8e 7f       	andi	r24, 0xFE	; 254
    458e:	03 c0       	rjmp	.+6      	; 0x4596 <tg_reset_source+0x1a>
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    4590:	80 91 04 26 	lds	r24, 0x2604
    4594:	81 60       	ori	r24, 0x01	; 1
    4596:	80 93 04 26 	sts	0x2604, r24
    459a:	08 95       	ret

0000459c <tg_print_status>:
	tgStatusMsg20
};

void tg_print_status(const uint8_t status_code, const char *textbuf)
{
	switch (status_code) {		// don't send messages for these status codes
    459c:	84 30       	cpi	r24, 0x04	; 4
    459e:	28 f4       	brcc	.+10     	; 0x45aa <tg_print_status+0xe>
    45a0:	82 30       	cpi	r24, 0x02	; 2
    45a2:	28 f5       	brcc	.+74     	; 0x45ee <tg_print_status+0x52>
    45a4:	88 23       	and	r24, r24
    45a6:	19 f1       	breq	.+70     	; 0x45ee <tg_print_status+0x52>
    45a8:	02 c0       	rjmp	.+4      	; 0x45ae <tg_print_status+0x12>
    45aa:	8b 30       	cpi	r24, 0x0B	; 11
    45ac:	01 f1       	breq	.+64     	; 0x45ee <tg_print_status+0x52>
		case TG_OK: return;
		case TG_EAGAIN: return;
		case TG_NOOP: return;
		case TG_QUIT: return;
	}
	printf_P(PSTR("%S: %s\n"),(PGM_P)pgm_read_word(&tgStatusStrings[status_code]), textbuf);
    45ae:	e8 2f       	mov	r30, r24
    45b0:	f0 e0       	ldi	r31, 0x00	; 0
    45b2:	ee 0f       	add	r30, r30
    45b4:	ff 1f       	adc	r31, r31
    45b6:	e6 5c       	subi	r30, 0xC6	; 198
    45b8:	f7 4f       	sbci	r31, 0xF7	; 247
    45ba:	25 91       	lpm	r18, Z+
    45bc:	34 91       	lpm	r19, Z+
    45be:	00 d0       	rcall	.+0      	; 0x45c0 <tg_print_status+0x24>
    45c0:	00 d0       	rcall	.+0      	; 0x45c2 <tg_print_status+0x26>
    45c2:	ed b7       	in	r30, 0x3d	; 61
    45c4:	fe b7       	in	r31, 0x3e	; 62
    45c6:	31 96       	adiw	r30, 0x01	; 1
    45c8:	84 e6       	ldi	r24, 0x64	; 100
    45ca:	98 e0       	ldi	r25, 0x08	; 8
    45cc:	ad b7       	in	r26, 0x3d	; 61
    45ce:	be b7       	in	r27, 0x3e	; 62
    45d0:	11 96       	adiw	r26, 0x01	; 1
    45d2:	8d 93       	st	X+, r24
    45d4:	9c 93       	st	X, r25
    45d6:	12 97       	sbiw	r26, 0x02	; 2
    45d8:	22 83       	std	Z+2, r18	; 0x02
    45da:	33 83       	std	Z+3, r19	; 0x03
    45dc:	64 83       	std	Z+4, r22	; 0x04
    45de:	75 83       	std	Z+5, r23	; 0x05
    45e0:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
    45e4:	8d b7       	in	r24, 0x3d	; 61
    45e6:	9e b7       	in	r25, 0x3e	; 62
    45e8:	06 96       	adiw	r24, 0x06	; 6
    45ea:	8d bf       	out	0x3d, r24	; 61
    45ec:	9e bf       	out	0x3e, r25	; 62
    45ee:	08 95       	ret

000045f0 <_tg_prompt>:
	tgModeStringDirect
};

void _tg_prompt()
{
	if (tg.state == TG_READY_UNPROMPTED) {
    45f0:	80 91 03 26 	lds	r24, 0x2603
    45f4:	88 23       	and	r24, r24
    45f6:	09 f5       	brne	.+66     	; 0x463a <_tg_prompt+0x4a>
		if (tg.flags && TG_FLAG_PROMPTS_bm) {
    45f8:	80 91 04 26 	lds	r24, 0x2604
    45fc:	88 23       	and	r24, r24
    45fe:	d1 f0       	breq	.+52     	; 0x4634 <_tg_prompt+0x44>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    4600:	80 91 06 26 	lds	r24, 0x2606
    4604:	e8 2f       	mov	r30, r24
    4606:	f0 e0       	ldi	r31, 0x00	; 0
    4608:	ee 0f       	add	r30, r30
    460a:	ff 1f       	adc	r31, r31
    460c:	e3 51       	subi	r30, 0x13	; 19
    460e:	f9 4f       	sbci	r31, 0xF9	; 249
    4610:	25 91       	lpm	r18, Z+
    4612:	34 91       	lpm	r19, Z+
    4614:	00 d0       	rcall	.+0      	; 0x4616 <_tg_prompt+0x26>
    4616:	0f 92       	push	r0
    4618:	81 e8       	ldi	r24, 0x81	; 129
    461a:	98 e0       	ldi	r25, 0x08	; 8
    461c:	ed b7       	in	r30, 0x3d	; 61
    461e:	fe b7       	in	r31, 0x3e	; 62
    4620:	81 83       	std	Z+1, r24	; 0x01
    4622:	92 83       	std	Z+2, r25	; 0x02
    4624:	23 83       	std	Z+3, r18	; 0x03
    4626:	34 83       	std	Z+4, r19	; 0x04
    4628:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
    462c:	0f 90       	pop	r0
    462e:	0f 90       	pop	r0
    4630:	0f 90       	pop	r0
    4632:	0f 90       	pop	r0
		}
		tg.state = TG_READY_PROMPTED;
    4634:	81 e0       	ldi	r24, 0x01	; 1
    4636:	80 93 03 26 	sts	0x2603, r24
    463a:	08 95       	ret

0000463c <tg_init>:
 */

void tg_init() 
{
	// set input source
	tg.default_src = DEFAULT_SOURCE; 		// set in tinyg.h
    463c:	81 e0       	ldi	r24, 0x01	; 1
    463e:	80 93 08 26 	sts	0x2608, r24
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    4642:	e8 e0       	ldi	r30, 0x08	; 8
    4644:	f6 e2       	ldi	r31, 0x26	; 38
    4646:	80 93 07 26 	sts	0x2607, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    464a:	34 97       	sbiw	r30, 0x04	; 4
    464c:	80 81       	ld	r24, Z
    464e:	81 60       	ori	r24, 0x01	; 1
    4650:	80 83       	st	Z, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    4652:	10 92 06 26 	sts	0x2606, r1
{
	// set input source
	tg.default_src = DEFAULT_SOURCE; 		// set in tinyg.h
	_tg_set_source(tg.default_src);			// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
	tg.state = TG_READY_UNPROMPTED;
    4656:	10 92 03 26 	sts	0x2603, r1
	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    465a:	00 d0       	rcall	.+0      	; 0x465c <tg_init+0x20>
    465c:	0f 92       	push	r0
    465e:	89 e9       	ldi	r24, 0x99	; 153
    4660:	98 e0       	ldi	r25, 0x08	; 8
    4662:	ed b7       	in	r30, 0x3d	; 61
    4664:	fe b7       	in	r31, 0x3e	; 62
    4666:	81 83       	std	Z+1, r24	; 0x01
    4668:	92 83       	std	Z+2, r25	; 0x02
    466a:	8f e8       	ldi	r24, 0x8F	; 143
    466c:	98 e0       	ldi	r25, 0x08	; 8
    466e:	83 83       	std	Z+3, r24	; 0x03
    4670:	94 83       	std	Z+4, r25	; 0x04
    4672:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
	_tg_prompt();
    4676:	0f 90       	pop	r0
    4678:	0f 90       	pop	r0
    467a:	0f 90       	pop	r0
    467c:	0f 90       	pop	r0
    467e:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <_tg_prompt>
}
    4682:	08 95       	ret

00004684 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    4684:	cf 93       	push	r28
    4686:	df 93       	push	r29
    4688:	ec 01       	movw	r28, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    468a:	80 91 06 26 	lds	r24, 0x2606
    468e:	88 23       	and	r24, r24
    4690:	09 f0       	breq	.+2      	; 0x4694 <tg_parser+0x10>
    4692:	3f c0       	rjmp	.+126    	; 0x4712 <tg_parser+0x8e>
		switch (toupper(buf[0])) {
    4694:	88 81       	ld	r24, Y
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	0e 94 eb 3f 	call	0x7fd6	; 0x7fd6 <toupper>
    469c:	86 34       	cpi	r24, 0x46	; 70
    469e:	91 05       	cpc	r25, r1
    46a0:	41 f1       	breq	.+80     	; 0x46f2 <tg_parser+0x6e>
    46a2:	87 34       	cpi	r24, 0x47	; 71
    46a4:	91 05       	cpc	r25, r1
    46a6:	84 f4       	brge	.+32     	; 0x46c8 <tg_parser+0x44>
    46a8:	83 34       	cpi	r24, 0x43	; 67
    46aa:	91 05       	cpc	r25, r1
    46ac:	e1 f0       	breq	.+56     	; 0x46e6 <tg_parser+0x62>
    46ae:	84 34       	cpi	r24, 0x44	; 68
    46b0:	91 05       	cpc	r25, r1
    46b2:	34 f4       	brge	.+12     	; 0x46c0 <tg_parser+0x3c>
    46b4:	88 32       	cpi	r24, 0x28	; 40
    46b6:	91 05       	cpc	r25, r1
    46b8:	a1 f0       	breq	.+40     	; 0x46e2 <tg_parser+0x5e>
    46ba:	cf 97       	sbiw	r24, 0x3f	; 63
    46bc:	41 f5       	brne	.+80     	; 0x470e <tg_parser+0x8a>
    46be:	13 c0       	rjmp	.+38     	; 0x46e6 <tg_parser+0x62>
    46c0:	84 34       	cpi	r24, 0x44	; 68
    46c2:	91 05       	cpc	r25, r1
    46c4:	21 f5       	brne	.+72     	; 0x470e <tg_parser+0x8a>
    46c6:	13 c0       	rjmp	.+38     	; 0x46ee <tg_parser+0x6a>
    46c8:	8f 34       	cpi	r24, 0x4F	; 79
    46ca:	91 05       	cpc	r25, r1
    46cc:	3c f4       	brge	.+14     	; 0x46dc <tg_parser+0x58>
    46ce:	8d 34       	cpi	r24, 0x4D	; 77
    46d0:	91 05       	cpc	r25, r1
    46d2:	3c f4       	brge	.+14     	; 0x46e2 <tg_parser+0x5e>
    46d4:	87 34       	cpi	r24, 0x47	; 71
    46d6:	91 05       	cpc	r25, r1
    46d8:	d1 f4       	brne	.+52     	; 0x470e <tg_parser+0x8a>
    46da:	03 c0       	rjmp	.+6      	; 0x46e2 <tg_parser+0x5e>
    46dc:	8c 35       	cpi	r24, 0x5C	; 92
    46de:	91 05       	cpc	r25, r1
    46e0:	b1 f4       	brne	.+44     	; 0x470e <tg_parser+0x8a>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    46e2:	82 e0       	ldi	r24, 0x02	; 2
    46e4:	01 c0       	rjmp	.+2      	; 0x46e8 <tg_parser+0x64>
int tg_parser(char * buf)
{
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
		switch (toupper(buf[0])) {
			case 'G': case 'M': case 'N': case '(': case '\\': _tg_set_mode(TG_GCODE_MODE); break;
    46e6:	81 e0       	ldi	r24, 0x01	; 1
    46e8:	80 93 06 26 	sts	0x2606, r24
    46ec:	12 c0       	rjmp	.+36     	; 0x4712 <tg_parser+0x8e>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    46ee:	83 e0       	ldi	r24, 0x03	; 3
    46f0:	fb cf       	rjmp	.-10     	; 0x46e8 <tg_parser+0x64>
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    46f2:	83 e0       	ldi	r24, 0x03	; 3
    46f4:	80 93 07 26 	sts	0x2607, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    46f8:	80 91 04 26 	lds	r24, 0x2604
    46fc:	8e 7f       	andi	r24, 0xFE	; 254
    46fe:	80 93 04 26 	sts	0x2604, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    4702:	82 e0       	ldi	r24, 0x02	; 2
    4704:	80 93 06 26 	sts	0x2606, r24
    4708:	20 e0       	ldi	r18, 0x00	; 0
    470a:	30 e0       	ldi	r19, 0x00	; 0
    470c:	1d c0       	rjmp	.+58     	; 0x4748 <tg_parser+0xc4>
	if (tg.mode == TG_CONTROL_MODE) {
		switch (toupper(buf[0])) {
			case 'G': case 'M': case 'N': case '(': case '\\': _tg_set_mode(TG_GCODE_MODE); break;
			case 'C': case '?': _tg_set_mode(TG_CONFIG_MODE); break;
			case 'D': _tg_set_mode(TG_DIRECT_DRIVE_MODE); break;
			case 'F': return (_tg_test_file());
    470e:	10 92 06 26 	sts	0x2606, r1
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    4712:	10 92 05 26 	sts	0x2605, r1
	switch (tg.mode) {
    4716:	80 91 06 26 	lds	r24, 0x2606
    471a:	82 30       	cpi	r24, 0x02	; 2
    471c:	41 f0       	breq	.+16     	; 0x472e <tg_parser+0xaa>
    471e:	83 30       	cpi	r24, 0x03	; 3
    4720:	51 f0       	breq	.+20     	; 0x4736 <tg_parser+0xb2>
    4722:	81 30       	cpi	r24, 0x01	; 1
    4724:	69 f4       	brne	.+26     	; 0x4740 <tg_parser+0xbc>
		case TG_CONFIG_MODE: tg.status = cfg_parse(buf); break;
    4726:	ce 01       	movw	r24, r28
    4728:	0e 94 2a 10 	call	0x2054	; 0x2054 <cfg_parse>
    472c:	07 c0       	rjmp	.+14     	; 0x473c <tg_parser+0xb8>
		case TG_GCODE_MODE: tg.status = gc_gcode_parser(buf); break;
    472e:	ce 01       	movw	r24, r28
    4730:	0e 94 af 0c 	call	0x195e	; 0x195e <gc_gcode_parser>
    4734:	03 c0       	rjmp	.+6      	; 0x473c <tg_parser+0xb8>
		case TG_DIRECT_DRIVE_MODE: tg.status = dd_parser(buf); break;
    4736:	ce 01       	movw	r24, r28
    4738:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <dd_parser>
    473c:	80 93 05 26 	sts	0x2605, r24
	}
	return (tg.status);
    4740:	80 91 05 26 	lds	r24, 0x2605
    4744:	28 2f       	mov	r18, r24
    4746:	30 e0       	ldi	r19, 0x00	; 0
}
    4748:	c9 01       	movw	r24, r18
    474a:	df 91       	pop	r29
    474c:	cf 91       	pop	r28
    474e:	08 95       	ret

00004750 <tg_read_next_line>:
 */

int tg_read_next_line()
{
	// read input line or return if not a completed line
	if ((tg.status = xio_readln(tg.src, tg.buf, sizeof(tg.buf))) == TG_OK) {
    4750:	80 91 07 26 	lds	r24, 0x2607
    4754:	6a e0       	ldi	r22, 0x0A	; 10
    4756:	76 e2       	ldi	r23, 0x26	; 38
    4758:	40 e5       	ldi	r20, 0x50	; 80
    475a:	0e 94 57 20 	call	0x40ae	; 0x40ae <xio_readln>
    475e:	80 93 05 26 	sts	0x2605, r24
    4762:	88 23       	and	r24, r24
    4764:	31 f4       	brne	.+12     	; 0x4772 <tg_read_next_line+0x22>
		tg.status = tg_parser(tg.buf);				// dispatch to parser
    4766:	8a e0       	ldi	r24, 0x0A	; 10
    4768:	96 e2       	ldi	r25, 0x26	; 38
    476a:	0e 94 42 23 	call	0x4684	; 0x4684 <tg_parser>
    476e:	80 93 05 26 	sts	0x2605, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    4772:	80 91 05 26 	lds	r24, 0x2605
    4776:	84 30       	cpi	r24, 0x04	; 4
    4778:	18 f4       	brcc	.+6      	; 0x4780 <tg_read_next_line+0x30>
    477a:	82 30       	cpi	r24, 0x02	; 2
    477c:	c0 f4       	brcc	.+48     	; 0x47ae <tg_read_next_line+0x5e>
    477e:	15 c0       	rjmp	.+42     	; 0x47aa <tg_read_next_line+0x5a>
    4780:	85 30       	cpi	r24, 0x05	; 5
    4782:	29 f0       	breq	.+10     	; 0x478e <tg_read_next_line+0x3e>
    4784:	8b 30       	cpi	r24, 0x0B	; 11
    4786:	89 f4       	brne	.+34     	; 0x47aa <tg_read_next_line+0x5a>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    4788:	10 92 06 26 	sts	0x2606, r1
    478c:	0e c0       	rjmp	.+28     	; 0x47aa <tg_read_next_line+0x5a>
			_tg_set_mode(TG_CONTROL_MODE);
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
    478e:	0f 92       	push	r0
    4790:	0f 92       	push	r0
    4792:	8c e6       	ldi	r24, 0x6C	; 108
    4794:	98 e0       	ldi	r25, 0x08	; 8
    4796:	ed b7       	in	r30, 0x3d	; 61
    4798:	fe b7       	in	r31, 0x3e	; 62
    479a:	81 83       	std	Z+1, r24	; 0x01
    479c:	92 83       	std	Z+2, r25	; 0x02
    479e:	0e 94 98 40 	call	0x8130	; 0x8130 <printf_P>
			tg_reset_source();						// reset to default src
    47a2:	0f 90       	pop	r0
    47a4:	0f 90       	pop	r0
    47a6:	0e 94 be 22 	call	0x457c	; 0x457c <tg_reset_source>
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_READY_UNPROMPTED;			// traps various error returns
    47aa:	10 92 03 26 	sts	0x2603, r1
		}
	}
	return (tg.status);
}
    47ae:	80 91 05 26 	lds	r24, 0x2605
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	08 95       	ret

000047b6 <tg_controller>:
	case (TG_EAGAIN): { return; } \
	case (TG_OK): { tg.state = TG_READY_UNPROMPTED; _tg_prompt(); return; } }

void tg_controller()
{
	st_execute_move();					// always start with this
    47b6:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <st_execute_move>
	DISPATCH(mc_line_continue());
    47ba:	0e 94 a4 12 	call	0x2548	; 0x2548 <mc_line_continue>
    47be:	00 97       	sbiw	r24, 0x00	; 0
    47c0:	89 f0       	breq	.+34     	; 0x47e4 <tg_controller+0x2e>
    47c2:	02 97       	sbiw	r24, 0x02	; 2
    47c4:	09 f4       	brne	.+2      	; 0x47c8 <tg_controller+0x12>
    47c6:	08 95       	ret
	DISPATCH(mc_arc_continue());
    47c8:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <mc_arc_continue>
    47cc:	00 97       	sbiw	r24, 0x00	; 0
    47ce:	51 f0       	breq	.+20     	; 0x47e4 <tg_controller+0x2e>
    47d0:	02 97       	sbiw	r24, 0x02	; 2
    47d2:	09 f4       	brne	.+2      	; 0x47d6 <tg_controller+0x20>
    47d4:	08 95       	ret
	DISPATCH(tg_read_next_line());
    47d6:	0e 94 a8 23 	call	0x4750	; 0x4750 <tg_read_next_line>
    47da:	00 97       	sbiw	r24, 0x00	; 0
    47dc:	19 f0       	breq	.+6      	; 0x47e4 <tg_controller+0x2e>
    47de:	02 97       	sbiw	r24, 0x02	; 2
    47e0:	19 f4       	brne	.+6      	; 0x47e8 <tg_controller+0x32>
    47e2:	08 95       	ret
    47e4:	10 92 03 26 	sts	0x2603, r1
	_tg_prompt();						// always end with this
    47e8:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <_tg_prompt>
    47ec:	08 95       	ret

000047ee <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    47ee:	08 95       	ret

000047f0 <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    47f0:	80 e0       	ldi	r24, 0x00	; 0
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	08 95       	ret

000047f6 <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    47f6:	10 92 cf 21 	sts	0x21CF, r1
	mv.move_buffer_tail = 0;
    47fa:	10 92 d0 21 	sts	0x21D0, r1
}
    47fe:	08 95       	ret

00004800 <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    4800:	90 91 cf 21 	lds	r25, 0x21CF
    4804:	80 91 d0 21 	lds	r24, 0x21D0
    4808:	98 17       	cp	r25, r24
    480a:	19 f4       	brne	.+6      	; 0x4812 <mv_dequeue_move_buffer+0x12>
    480c:	20 e0       	ldi	r18, 0x00	; 0
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	17 c0       	rjmp	.+46     	; 0x4840 <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    4812:	90 91 d0 21 	lds	r25, 0x21D0
    4816:	8e e1       	ldi	r24, 0x1E	; 30
    4818:	98 9f       	mul	r25, r24
    481a:	90 01       	movw	r18, r0
    481c:	11 24       	eor	r1, r1
    481e:	2d 52       	subi	r18, 0x2D	; 45
    4820:	3e 4d       	sbci	r19, 0xDE	; 222
    4822:	20 93 d1 21 	sts	0x21D1, r18
    4826:	30 93 d2 21 	sts	0x21D2, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    482a:	80 91 d0 21 	lds	r24, 0x21D0
    482e:	8f 5f       	subi	r24, 0xFF	; 255
    4830:	80 93 d0 21 	sts	0x21D0, r24
    4834:	80 91 d0 21 	lds	r24, 0x21D0
    4838:	83 30       	cpi	r24, 0x03	; 3
    483a:	10 f0       	brcs	.+4      	; 0x4840 <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    483c:	10 92 d0 21 	sts	0x21D0, r1
	}
	return (mv.p); 
}
    4840:	c9 01       	movw	r24, r18
    4842:	08 95       	ret

00004844 <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    4844:	90 91 cf 21 	lds	r25, 0x21CF
    4848:	9f 5f       	subi	r25, 0xFF	; 255
    484a:	93 30       	cpi	r25, 0x03	; 3
    484c:	08 f0       	brcs	.+2      	; 0x4850 <mv_test_move_buffer_full+0xc>
    484e:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    4850:	80 91 d0 21 	lds	r24, 0x21D0
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	89 17       	cp	r24, r25
    4858:	09 f4       	brne	.+2      	; 0x485c <mv_test_move_buffer_full+0x18>
    485a:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    485c:	82 2f       	mov	r24, r18
    485e:	08 95       	ret

00004860 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    4860:	0b c0       	rjmp	.+22     	; 0x4878 <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    4862:	80 91 48 00 	lds	r24, 0x0048
    4866:	81 60       	ori	r24, 0x01	; 1
    4868:	80 93 48 00 	sts	0x0048, r24
    486c:	88 95       	sleep
    486e:	80 91 48 00 	lds	r24, 0x0048
    4872:	8e 7f       	andi	r24, 0xFE	; 254
    4874:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    4878:	90 91 d0 21 	lds	r25, 0x21D0
    487c:	80 91 cf 21 	lds	r24, 0x21CF
    4880:	98 17       	cp	r25, r24
    4882:	79 f7       	brne	.-34     	; 0x4862 <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    4884:	08 95       	ret

00004886 <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    4886:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    4888:	80 91 cf 21 	lds	r24, 0x21CF
    488c:	80 93 d0 21 	sts	0x21D0, r24
	mv.p = NULL;
    4890:	10 92 d1 21 	sts	0x21D1, r1
    4894:	10 92 d2 21 	sts	0x21D2, r1
	sei();
    4898:	78 94       	sei
}
    489a:	08 95       	ret

0000489c <mv_queue_move_buffer>:
 *	defines the period. 
 */

uint8_t mv_queue_move_buffer(int32_t steps_x, int32_t steps_y, int32_t steps_z, 
							 uint32_t microseconds, uint8_t move_type)
{
    489c:	2f 92       	push	r2
    489e:	3f 92       	push	r3
    48a0:	4f 92       	push	r4
    48a2:	5f 92       	push	r5
    48a4:	6f 92       	push	r6
    48a6:	7f 92       	push	r7
    48a8:	8f 92       	push	r8
    48aa:	9f 92       	push	r9
    48ac:	af 92       	push	r10
    48ae:	bf 92       	push	r11
    48b0:	cf 92       	push	r12
    48b2:	df 92       	push	r13
    48b4:	ef 92       	push	r14
    48b6:	ff 92       	push	r15
    48b8:	0f 93       	push	r16
    48ba:	1f 93       	push	r17
    48bc:	df 93       	push	r29
    48be:	cf 93       	push	r28
    48c0:	cd b7       	in	r28, 0x3d	; 61
    48c2:	de b7       	in	r29, 0x3e	; 62
    48c4:	2b 97       	sbiw	r28, 0x0b	; 11
    48c6:	cd bf       	out	0x3d, r28	; 61
    48c8:	de bf       	out	0x3e, r29	; 62
    48ca:	1b 01       	movw	r2, r22
    48cc:	2c 01       	movw	r4, r24
    48ce:	2a 83       	std	Y+2, r18	; 0x02
    48d0:	3b 83       	std	Y+3, r19	; 0x03
    48d2:	4c 83       	std	Y+4, r20	; 0x04
    48d4:	5d 83       	std	Y+5, r21	; 0x05
    48d6:	ee 82       	std	Y+6, r14	; 0x06
    48d8:	ff 82       	std	Y+7, r15	; 0x07
    48da:	08 87       	std	Y+8, r16	; 0x08
    48dc:	19 87       	std	Y+9, r17	; 0x09
	uint8_t next_buffer_head;
	uint8_t i;

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    48de:	80 91 cf 21 	lds	r24, 0x21CF
    48e2:	8f 5f       	subi	r24, 0xFF	; 255
    48e4:	89 83       	std	Y+1, r24	; 0x01
    48e6:	83 30       	cpi	r24, 0x03	; 3
    48e8:	08 f0       	brcs	.+2      	; 0x48ec <mv_queue_move_buffer+0x50>
    48ea:	19 82       	std	Y+1, r1	; 0x01
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    48ec:	80 91 d0 21 	lds	r24, 0x21D0
    48f0:	99 81       	ldd	r25, Y+1	; 0x01
    48f2:	89 17       	cp	r24, r25
    48f4:	11 f4       	brne	.+4      	; 0x48fa <mv_queue_move_buffer+0x5e>
    48f6:	8a e0       	ldi	r24, 0x0A	; 10
    48f8:	1e c2       	rjmp	.+1084   	; 0x4d36 <mv_queue_move_buffer+0x49a>
		return (TG_BUFFER_FULL_NON_FATAL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    48fa:	e0 91 cf 21 	lds	r30, 0x21CF
    48fe:	8e e1       	ldi	r24, 0x1E	; 30
    4900:	e8 9f       	mul	r30, r24
    4902:	f0 01       	movw	r30, r0
    4904:	11 24       	eor	r1, r1
    4906:	ed 52       	subi	r30, 0x2D	; 45
    4908:	fe 4d       	sbci	r31, 0xDE	; 222
    490a:	e0 93 d1 21 	sts	0x21D1, r30
    490e:	f0 93 d2 21 	sts	0x21D2, r31
	memset(mv.p, 0, sizeof(struct mvMove));
    4912:	df 01       	movw	r26, r30
    4914:	1d 92       	st	X+, r1
    4916:	8a 95       	dec	r24
    4918:	e9 f7       	brne	.-6      	; 0x4914 <mv_queue_move_buffer+0x78>
	mv.p->a[X].steps = steps_x;
    491a:	60 90 d1 21 	lds	r6, 0x21D1
    491e:	70 90 d2 21 	lds	r7, 0x21D2
    4922:	f3 01       	movw	r30, r6
    4924:	20 82       	st	Z, r2
    4926:	31 82       	std	Z+1, r3	; 0x01
    4928:	42 82       	std	Z+2, r4	; 0x02
    492a:	53 82       	std	Z+3, r5	; 0x03
	mv.p->a[Y].steps = steps_y;
    492c:	8a 81       	ldd	r24, Y+2	; 0x02
    492e:	9b 81       	ldd	r25, Y+3	; 0x03
    4930:	ac 81       	ldd	r26, Y+4	; 0x04
    4932:	bd 81       	ldd	r27, Y+5	; 0x05
    4934:	82 87       	std	Z+10, r24	; 0x0a
    4936:	93 87       	std	Z+11, r25	; 0x0b
    4938:	a4 87       	std	Z+12, r26	; 0x0c
    493a:	b5 87       	std	Z+13, r27	; 0x0d
	mv.p->a[Z].steps = steps_z;
    493c:	8e 81       	ldd	r24, Y+6	; 0x06
    493e:	9f 81       	ldd	r25, Y+7	; 0x07
    4940:	a8 85       	ldd	r26, Y+8	; 0x08
    4942:	b9 85       	ldd	r27, Y+9	; 0x09
    4944:	84 8b       	std	Z+20, r24	; 0x14
    4946:	95 8b       	std	Z+21, r25	; 0x15
    4948:	a6 8b       	std	Z+22, r26	; 0x16
    494a:	b7 8b       	std	Z+23, r27	; 0x17
	mv.microseconds = (uint64_t)microseconds;			// cast to larger base
    494c:	a0 92 c7 21 	sts	0x21C7, r10
    4950:	b0 92 c8 21 	sts	0x21C8, r11
    4954:	c0 92 c9 21 	sts	0x21C9, r12
    4958:	d0 92 ca 21 	sts	0x21CA, r13
    495c:	10 92 cb 21 	sts	0x21CB, r1
    4960:	10 92 cc 21 	sts	0x21CC, r1
    4964:	10 92 cd 21 	sts	0x21CD, r1
    4968:	10 92 ce 21 	sts	0x21CE, r1
	mv.ticks = mv.microseconds * TICKS_PER_MICROSECOND;
    496c:	95 01       	movw	r18, r10
    496e:	a6 01       	movw	r20, r12
    4970:	60 e0       	ldi	r22, 0x00	; 0
    4972:	70 e0       	ldi	r23, 0x00	; 0
    4974:	80 e0       	ldi	r24, 0x00	; 0
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	05 e0       	ldi	r16, 0x05	; 5
    497a:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__ashldi3>
    497e:	fc 01       	movw	r30, r24
    4980:	97 eb       	ldi	r25, 0xB7	; 183
    4982:	89 2e       	mov	r8, r25
    4984:	91 e2       	ldi	r25, 0x21	; 33
    4986:	99 2e       	mov	r9, r25
    4988:	20 93 b7 21 	sts	0x21B7, r18
    498c:	d4 01       	movw	r26, r8
    498e:	11 96       	adiw	r26, 0x01	; 1
    4990:	3c 93       	st	X, r19
    4992:	11 97       	sbiw	r26, 0x01	; 1
    4994:	12 96       	adiw	r26, 0x02	; 2
    4996:	4c 93       	st	X, r20
    4998:	12 97       	sbiw	r26, 0x02	; 2
    499a:	13 96       	adiw	r26, 0x03	; 3
    499c:	5c 93       	st	X, r21
    499e:	13 97       	sbiw	r26, 0x03	; 3
    49a0:	14 96       	adiw	r26, 0x04	; 4
    49a2:	6c 93       	st	X, r22
    49a4:	14 97       	sbiw	r26, 0x04	; 4
    49a6:	15 96       	adiw	r26, 0x05	; 5
    49a8:	7c 93       	st	X, r23
    49aa:	15 97       	sbiw	r26, 0x05	; 5
    49ac:	16 96       	adiw	r26, 0x06	; 6
    49ae:	ec 93       	st	X, r30
    49b0:	16 97       	sbiw	r26, 0x06	; 6
    49b2:	17 96       	adiw	r26, 0x07	; 7
    49b4:	fc 93       	st	X, r31

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    49b6:	21 14       	cp	r2, r1
    49b8:	31 04       	cpc	r3, r1
    49ba:	41 04       	cpc	r4, r1
    49bc:	51 04       	cpc	r5, r1
    49be:	09 f0       	breq	.+2      	; 0x49c2 <mv_queue_move_buffer+0x126>
    49c0:	73 c0       	rjmp	.+230    	; 0x4aa8 <mv_queue_move_buffer+0x20c>
    49c2:	8a 81       	ldd	r24, Y+2	; 0x02
    49c4:	9b 81       	ldd	r25, Y+3	; 0x03
    49c6:	ac 81       	ldd	r26, Y+4	; 0x04
    49c8:	bd 81       	ldd	r27, Y+5	; 0x05
    49ca:	00 97       	sbiw	r24, 0x00	; 0
    49cc:	a1 05       	cpc	r26, r1
    49ce:	b1 05       	cpc	r27, r1
    49d0:	09 f0       	breq	.+2      	; 0x49d4 <mv_queue_move_buffer+0x138>
    49d2:	6a c0       	rjmp	.+212    	; 0x4aa8 <mv_queue_move_buffer+0x20c>
    49d4:	8e 81       	ldd	r24, Y+6	; 0x06
    49d6:	9f 81       	ldd	r25, Y+7	; 0x07
    49d8:	a8 85       	ldd	r26, Y+8	; 0x08
    49da:	b9 85       	ldd	r27, Y+9	; 0x09
    49dc:	00 97       	sbiw	r24, 0x00	; 0
    49de:	a1 05       	cpc	r26, r1
    49e0:	b1 05       	cpc	r27, r1
    49e2:	09 f0       	breq	.+2      	; 0x49e6 <mv_queue_move_buffer+0x14a>
    49e4:	61 c0       	rjmp	.+194    	; 0x4aa8 <mv_queue_move_buffer+0x20c>
		mv.p->a[X].steps = (((mv.ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    49e6:	81 e0       	ldi	r24, 0x01	; 1
    49e8:	e8 2e       	mov	r14, r24
    49ea:	f1 2c       	mov	r15, r1
    49ec:	01 2d       	mov	r16, r1
    49ee:	11 2d       	mov	r17, r1
    49f0:	d3 01       	movw	r26, r6
    49f2:	ed 92       	st	X+, r14
    49f4:	fd 92       	st	X+, r15
    49f6:	0d 93       	st	X+, r16
    49f8:	1c 93       	st	X, r17
    49fa:	13 97       	sbiw	r26, 0x03	; 3
		mv.p->a[X].postscale = 1;
    49fc:	81 e0       	ldi	r24, 0x01	; 1
    49fe:	90 e0       	ldi	r25, 0x00	; 0
    4a00:	16 96       	adiw	r26, 0x06	; 6
    4a02:	8d 93       	st	X+, r24
    4a04:	9c 93       	st	X, r25
    4a06:	17 97       	sbiw	r26, 0x07	; 7
		mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[X].steps); // expensive!
    4a08:	cf 01       	movw	r24, r30
    4a0a:	aa 24       	eor	r10, r10
    4a0c:	a3 94       	inc	r10
    4a0e:	bb 24       	eor	r11, r11
    4a10:	cc 24       	eor	r12, r12
    4a12:	dd 24       	eor	r13, r13
    4a14:	ee 24       	eor	r14, r14
    4a16:	ff 24       	eor	r15, r15
    4a18:	00 e0       	ldi	r16, 0x00	; 0
    4a1a:	10 e0       	ldi	r17, 0x00	; 0
    4a1c:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <__udivdi3>
    4a20:	f4 01       	movw	r30, r8
    4a22:	38 96       	adiw	r30, 0x08	; 8
    4a24:	20 93 bf 21 	sts	0x21BF, r18
    4a28:	31 83       	std	Z+1, r19	; 0x01
    4a2a:	42 83       	std	Z+2, r20	; 0x02
    4a2c:	53 83       	std	Z+3, r21	; 0x03
    4a2e:	64 83       	std	Z+4, r22	; 0x04
    4a30:	75 83       	std	Z+5, r23	; 0x05
    4a32:	86 83       	std	Z+6, r24	; 0x06
    4a34:	97 83       	std	Z+7, r25	; 0x07
		while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    4a36:	7f 01       	movw	r14, r30
    4a38:	19 c0       	rjmp	.+50     	; 0x4a6c <mv_queue_move_buffer+0x1d0>
			mv.ticks_per_step >>= 1;
    4a3a:	8e 2f       	mov	r24, r30
    4a3c:	01 e0       	ldi	r16, 0x01	; 1
    4a3e:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <__lshrdi3>
    4a42:	20 93 bf 21 	sts	0x21BF, r18
    4a46:	f7 01       	movw	r30, r14
    4a48:	31 83       	std	Z+1, r19	; 0x01
    4a4a:	42 83       	std	Z+2, r20	; 0x02
    4a4c:	53 83       	std	Z+3, r21	; 0x03
    4a4e:	64 83       	std	Z+4, r22	; 0x04
    4a50:	75 83       	std	Z+5, r23	; 0x05
    4a52:	86 83       	std	Z+6, r24	; 0x06
    4a54:	97 83       	std	Z+7, r25	; 0x07
			mv.p->a[X].postscale <<= 1;
    4a56:	d3 01       	movw	r26, r6
    4a58:	16 96       	adiw	r26, 0x06	; 6
    4a5a:	8d 91       	ld	r24, X+
    4a5c:	9c 91       	ld	r25, X
    4a5e:	17 97       	sbiw	r26, 0x07	; 7
    4a60:	88 0f       	add	r24, r24
    4a62:	99 1f       	adc	r25, r25
    4a64:	16 96       	adiw	r26, 0x06	; 6
    4a66:	8d 93       	st	X+, r24
    4a68:	9c 93       	st	X, r25
    4a6a:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((mv.ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[X].steps); // expensive!
		while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    4a6c:	20 91 bf 21 	lds	r18, 0x21BF
    4a70:	30 91 c0 21 	lds	r19, 0x21C0
    4a74:	40 91 c1 21 	lds	r20, 0x21C1
    4a78:	50 91 c2 21 	lds	r21, 0x21C2
    4a7c:	60 91 c3 21 	lds	r22, 0x21C3
    4a80:	70 91 c4 21 	lds	r23, 0x21C4
    4a84:	e0 91 c5 21 	lds	r30, 0x21C5
    4a88:	90 91 c6 21 	lds	r25, 0x21C6
    4a8c:	84 2f       	mov	r24, r20
    4a8e:	85 2b       	or	r24, r21
    4a90:	86 2b       	or	r24, r22
    4a92:	87 2b       	or	r24, r23
    4a94:	8e 2b       	or	r24, r30
    4a96:	89 2b       	or	r24, r25
    4a98:	81 f6       	brne	.-96     	; 0x4a3a <mv_queue_move_buffer+0x19e>
			mv.ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
    4a9a:	c9 01       	movw	r24, r18
    4a9c:	f3 01       	movw	r30, r6
    4a9e:	84 83       	std	Z+4, r24	; 0x04
    4aa0:	95 83       	std	Z+5, r25	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    4aa2:	81 e0       	ldi	r24, 0x01	; 1
    4aa4:	81 87       	std	Z+9, r24	; 0x09
    4aa6:	41 c1       	rjmp	.+642    	; 0x4d2a <mv_queue_move_buffer+0x48e>
	mv.p->a[Z].steps = steps_z;
	mv.microseconds = (uint64_t)microseconds;			// cast to larger base
	mv.ticks = mv.microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    4aa8:	44 24       	eor	r4, r4
    4aaa:	55 24       	eor	r5, r5
				mv.p->a[i].steps = labs(mv.p->a[i].steps);

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
    4aac:	1f eb       	ldi	r17, 0xBF	; 191
    4aae:	21 2e       	mov	r2, r17
    4ab0:	11 e2       	ldi	r17, 0x21	; 33
    4ab2:	31 2e       	mov	r3, r17
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    4ab4:	40 91 d1 21 	lds	r20, 0x21D1
    4ab8:	50 91 d2 21 	lds	r21, 0x21D2
    4abc:	4a 86       	std	Y+10, r4	; 0x0a
    4abe:	5b 86       	std	Y+11, r5	; 0x0b
    4ac0:	c2 01       	movw	r24, r4
    4ac2:	f2 01       	movw	r30, r4
    4ac4:	b3 e0       	ldi	r27, 0x03	; 3
    4ac6:	ee 0f       	add	r30, r30
    4ac8:	ff 1f       	adc	r31, r31
    4aca:	ba 95       	dec	r27
    4acc:	e1 f7       	brne	.-8      	; 0x4ac6 <mv_queue_move_buffer+0x22a>
    4ace:	88 0f       	add	r24, r24
    4ad0:	99 1f       	adc	r25, r25
    4ad2:	e8 0f       	add	r30, r24
    4ad4:	f9 1f       	adc	r31, r25
    4ad6:	e4 0f       	add	r30, r20
    4ad8:	f5 1f       	adc	r31, r21
    4ada:	80 81       	ld	r24, Z
    4adc:	91 81       	ldd	r25, Z+1	; 0x01
    4ade:	a2 81       	ldd	r26, Z+2	; 0x02
    4ae0:	b3 81       	ldd	r27, Z+3	; 0x03
    4ae2:	00 97       	sbiw	r24, 0x00	; 0
    4ae4:	a1 05       	cpc	r26, r1
    4ae6:	b1 05       	cpc	r27, r1
    4ae8:	09 f4       	brne	.+2      	; 0x4aec <mv_queue_move_buffer+0x250>
    4aea:	17 c1       	rjmp	.+558    	; 0x4d1a <mv_queue_move_buffer+0x47e>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    4aec:	b7 ff       	sbrs	r27, 7
    4aee:	12 c0       	rjmp	.+36     	; 0x4b14 <mv_queue_move_buffer+0x278>
    4af0:	c2 01       	movw	r24, r4
    4af2:	92 01       	movw	r18, r4
    4af4:	f3 e0       	ldi	r31, 0x03	; 3
    4af6:	22 0f       	add	r18, r18
    4af8:	33 1f       	adc	r19, r19
    4afa:	fa 95       	dec	r31
    4afc:	e1 f7       	brne	.-8      	; 0x4af6 <mv_queue_move_buffer+0x25a>
    4afe:	88 0f       	add	r24, r24
    4b00:	99 1f       	adc	r25, r25
    4b02:	28 0f       	add	r18, r24
    4b04:	39 1f       	adc	r19, r25
    4b06:	42 0f       	add	r20, r18
    4b08:	53 1f       	adc	r21, r19
    4b0a:	81 e0       	ldi	r24, 0x01	; 1
    4b0c:	da 01       	movw	r26, r20
    4b0e:	18 96       	adiw	r26, 0x08	; 8
    4b10:	8c 93       	st	X, r24
    4b12:	0f c0       	rjmp	.+30     	; 0x4b32 <mv_queue_move_buffer+0x296>
    4b14:	c2 01       	movw	r24, r4
    4b16:	92 01       	movw	r18, r4
    4b18:	73 e0       	ldi	r23, 0x03	; 3
    4b1a:	22 0f       	add	r18, r18
    4b1c:	33 1f       	adc	r19, r19
    4b1e:	7a 95       	dec	r23
    4b20:	e1 f7       	brne	.-8      	; 0x4b1a <mv_queue_move_buffer+0x27e>
    4b22:	88 0f       	add	r24, r24
    4b24:	99 1f       	adc	r25, r25
    4b26:	28 0f       	add	r18, r24
    4b28:	39 1f       	adc	r19, r25
    4b2a:	42 0f       	add	r20, r18
    4b2c:	53 1f       	adc	r21, r19
    4b2e:	fa 01       	movw	r30, r20
    4b30:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    4b32:	e0 91 d1 21 	lds	r30, 0x21D1
    4b36:	f0 91 d2 21 	lds	r31, 0x21D2
    4b3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b3e:	ac 01       	movw	r20, r24
    4b40:	03 e0       	ldi	r16, 0x03	; 3
    4b42:	44 0f       	add	r20, r20
    4b44:	55 1f       	adc	r21, r21
    4b46:	0a 95       	dec	r16
    4b48:	e1 f7       	brne	.-8      	; 0x4b42 <mv_queue_move_buffer+0x2a6>
    4b4a:	88 0f       	add	r24, r24
    4b4c:	99 1f       	adc	r25, r25
    4b4e:	48 0f       	add	r20, r24
    4b50:	59 1f       	adc	r21, r25
    4b52:	4e 0f       	add	r20, r30
    4b54:	5f 1f       	adc	r21, r31
    4b56:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b58:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b5a:	9c 01       	movw	r18, r24
    4b5c:	b3 e0       	ldi	r27, 0x03	; 3
    4b5e:	22 0f       	add	r18, r18
    4b60:	33 1f       	adc	r19, r19
    4b62:	ba 95       	dec	r27
    4b64:	e1 f7       	brne	.-8      	; 0x4b5e <mv_queue_move_buffer+0x2c2>
    4b66:	88 0f       	add	r24, r24
    4b68:	99 1f       	adc	r25, r25
    4b6a:	28 0f       	add	r18, r24
    4b6c:	39 1f       	adc	r19, r25
    4b6e:	e2 0f       	add	r30, r18
    4b70:	f3 1f       	adc	r31, r19
    4b72:	80 81       	ld	r24, Z
    4b74:	91 81       	ldd	r25, Z+1	; 0x01
    4b76:	a2 81       	ldd	r26, Z+2	; 0x02
    4b78:	b3 81       	ldd	r27, Z+3	; 0x03
    4b7a:	b7 ff       	sbrs	r27, 7
    4b7c:	07 c0       	rjmp	.+14     	; 0x4b8c <mv_queue_move_buffer+0x2f0>
    4b7e:	b0 95       	com	r27
    4b80:	a0 95       	com	r26
    4b82:	90 95       	com	r25
    4b84:	81 95       	neg	r24
    4b86:	9f 4f       	sbci	r25, 0xFF	; 255
    4b88:	af 4f       	sbci	r26, 0xFF	; 255
    4b8a:	bf 4f       	sbci	r27, 0xFF	; 255
    4b8c:	fa 01       	movw	r30, r20
    4b8e:	80 83       	st	Z, r24
    4b90:	91 83       	std	Z+1, r25	; 0x01
    4b92:	a2 83       	std	Z+2, r26	; 0x02
    4b94:	b3 83       	std	Z+3, r27	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    4b96:	a0 91 d1 21 	lds	r26, 0x21D1
    4b9a:	b0 91 d2 21 	lds	r27, 0x21D2
    4b9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ba0:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ba2:	fc 01       	movw	r30, r24
    4ba4:	73 e0       	ldi	r23, 0x03	; 3
    4ba6:	ee 0f       	add	r30, r30
    4ba8:	ff 1f       	adc	r31, r31
    4baa:	7a 95       	dec	r23
    4bac:	e1 f7       	brne	.-8      	; 0x4ba6 <mv_queue_move_buffer+0x30a>
    4bae:	88 0f       	add	r24, r24
    4bb0:	99 1f       	adc	r25, r25
    4bb2:	e8 0f       	add	r30, r24
    4bb4:	f9 1f       	adc	r31, r25
    4bb6:	ea 0f       	add	r30, r26
    4bb8:	fb 1f       	adc	r31, r27
    4bba:	81 e0       	ldi	r24, 0x01	; 1
    4bbc:	90 e0       	ldi	r25, 0x00	; 0
    4bbe:	86 83       	std	Z+6, r24	; 0x06
    4bc0:	97 83       	std	Z+7, r25	; 0x07
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
    4bc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    4bc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    4bc6:	9c 01       	movw	r18, r24
    4bc8:	53 e0       	ldi	r21, 0x03	; 3
    4bca:	22 0f       	add	r18, r18
    4bcc:	33 1f       	adc	r19, r19
    4bce:	5a 95       	dec	r21
    4bd0:	e1 f7       	brne	.-8      	; 0x4bca <mv_queue_move_buffer+0x32e>
    4bd2:	88 0f       	add	r24, r24
    4bd4:	99 1f       	adc	r25, r25
    4bd6:	28 0f       	add	r18, r24
    4bd8:	39 1f       	adc	r19, r25
    4bda:	a2 0f       	add	r26, r18
    4bdc:	b3 1f       	adc	r27, r19
    4bde:	ed 90       	ld	r14, X+
    4be0:	fd 90       	ld	r15, X+
    4be2:	0d 91       	ld	r16, X+
    4be4:	1c 91       	ld	r17, X
    4be6:	37 01       	movw	r6, r14
    4be8:	48 01       	movw	r8, r16
    4bea:	99 0c       	add	r9, r9
    4bec:	66 08       	sbc	r6, r6
    4bee:	76 2c       	mov	r7, r6
    4bf0:	43 01       	movw	r8, r6
    4bf2:	20 91 b7 21 	lds	r18, 0x21B7
    4bf6:	30 91 b8 21 	lds	r19, 0x21B8
    4bfa:	40 91 b9 21 	lds	r20, 0x21B9
    4bfe:	50 91 ba 21 	lds	r21, 0x21BA
    4c02:	60 91 bb 21 	lds	r22, 0x21BB
    4c06:	70 91 bc 21 	lds	r23, 0x21BC
    4c0a:	80 91 bd 21 	lds	r24, 0x21BD
    4c0e:	90 91 be 21 	lds	r25, 0x21BE
    4c12:	57 01       	movw	r10, r14
    4c14:	68 01       	movw	r12, r16
    4c16:	e6 2c       	mov	r14, r6
    4c18:	f6 2c       	mov	r15, r6
    4c1a:	06 2d       	mov	r16, r6
    4c1c:	16 2d       	mov	r17, r6
    4c1e:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <__udivdi3>
    4c22:	20 93 bf 21 	sts	0x21BF, r18
    4c26:	d1 01       	movw	r26, r2
    4c28:	11 96       	adiw	r26, 0x01	; 1
    4c2a:	3c 93       	st	X, r19
    4c2c:	11 97       	sbiw	r26, 0x01	; 1
    4c2e:	12 96       	adiw	r26, 0x02	; 2
    4c30:	4c 93       	st	X, r20
    4c32:	12 97       	sbiw	r26, 0x02	; 2
    4c34:	13 96       	adiw	r26, 0x03	; 3
    4c36:	5c 93       	st	X, r21
    4c38:	13 97       	sbiw	r26, 0x03	; 3
    4c3a:	14 96       	adiw	r26, 0x04	; 4
    4c3c:	6c 93       	st	X, r22
    4c3e:	14 97       	sbiw	r26, 0x04	; 4
    4c40:	15 96       	adiw	r26, 0x05	; 5
    4c42:	7c 93       	st	X, r23
    4c44:	15 97       	sbiw	r26, 0x05	; 5
    4c46:	16 96       	adiw	r26, 0x06	; 6
    4c48:	8c 93       	st	X, r24
    4c4a:	16 97       	sbiw	r26, 0x06	; 6
    4c4c:	17 96       	adiw	r26, 0x07	; 7
    4c4e:	9c 93       	st	X, r25
    4c50:	37 c0       	rjmp	.+110    	; 0x4cc0 <mv_queue_move_buffer+0x424>
				while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
					mv.ticks_per_step >>= 1;
    4c52:	9d 01       	movw	r18, r26
    4c54:	8e 2f       	mov	r24, r30
    4c56:	01 e0       	ldi	r16, 0x01	; 1
    4c58:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <__lshrdi3>
    4c5c:	20 93 bf 21 	sts	0x21BF, r18
    4c60:	f1 01       	movw	r30, r2
    4c62:	31 83       	std	Z+1, r19	; 0x01
    4c64:	42 83       	std	Z+2, r20	; 0x02
    4c66:	53 83       	std	Z+3, r21	; 0x03
    4c68:	64 83       	std	Z+4, r22	; 0x04
    4c6a:	75 83       	std	Z+5, r23	; 0x05
    4c6c:	86 83       	std	Z+6, r24	; 0x06
    4c6e:	97 83       	std	Z+7, r25	; 0x07
					mv.p->a[i].postscale <<= 1;
    4c70:	a0 91 d1 21 	lds	r26, 0x21D1
    4c74:	b0 91 d2 21 	lds	r27, 0x21D2
    4c78:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c7c:	fc 01       	movw	r30, r24
    4c7e:	23 e0       	ldi	r18, 0x03	; 3
    4c80:	ee 0f       	add	r30, r30
    4c82:	ff 1f       	adc	r31, r31
    4c84:	2a 95       	dec	r18
    4c86:	e1 f7       	brne	.-8      	; 0x4c80 <mv_queue_move_buffer+0x3e4>
    4c88:	88 0f       	add	r24, r24
    4c8a:	99 1f       	adc	r25, r25
    4c8c:	e8 0f       	add	r30, r24
    4c8e:	f9 1f       	adc	r31, r25
    4c90:	ea 0f       	add	r30, r26
    4c92:	fb 1f       	adc	r31, r27
    4c94:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c96:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c98:	9c 01       	movw	r18, r24
    4c9a:	13 e0       	ldi	r17, 0x03	; 3
    4c9c:	22 0f       	add	r18, r18
    4c9e:	33 1f       	adc	r19, r19
    4ca0:	1a 95       	dec	r17
    4ca2:	e1 f7       	brne	.-8      	; 0x4c9c <mv_queue_move_buffer+0x400>
    4ca4:	88 0f       	add	r24, r24
    4ca6:	99 1f       	adc	r25, r25
    4ca8:	28 0f       	add	r18, r24
    4caa:	39 1f       	adc	r19, r25
    4cac:	a2 0f       	add	r26, r18
    4cae:	b3 1f       	adc	r27, r19
    4cb0:	16 96       	adiw	r26, 0x06	; 6
    4cb2:	8d 91       	ld	r24, X+
    4cb4:	9c 91       	ld	r25, X
    4cb6:	17 97       	sbiw	r26, 0x07	; 7
    4cb8:	88 0f       	add	r24, r24
    4cba:	99 1f       	adc	r25, r25
    4cbc:	86 83       	std	Z+6, r24	; 0x06
    4cbe:	97 83       	std	Z+7, r25	; 0x07

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
				while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    4cc0:	a0 91 bf 21 	lds	r26, 0x21BF
    4cc4:	b0 91 c0 21 	lds	r27, 0x21C0
    4cc8:	40 91 c1 21 	lds	r20, 0x21C1
    4ccc:	50 91 c2 21 	lds	r21, 0x21C2
    4cd0:	60 91 c3 21 	lds	r22, 0x21C3
    4cd4:	70 91 c4 21 	lds	r23, 0x21C4
    4cd8:	e0 91 c5 21 	lds	r30, 0x21C5
    4cdc:	90 91 c6 21 	lds	r25, 0x21C6
    4ce0:	84 2f       	mov	r24, r20
    4ce2:	85 2b       	or	r24, r21
    4ce4:	86 2b       	or	r24, r22
    4ce6:	87 2b       	or	r24, r23
    4ce8:	8e 2b       	or	r24, r30
    4cea:	89 2b       	or	r24, r25
    4cec:	09 f0       	breq	.+2      	; 0x4cf0 <mv_queue_move_buffer+0x454>
    4cee:	b1 cf       	rjmp	.-158    	; 0x4c52 <mv_queue_move_buffer+0x3b6>
					mv.ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
    4cf0:	e0 91 d1 21 	lds	r30, 0x21D1
    4cf4:	f0 91 d2 21 	lds	r31, 0x21D2
    4cf8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cfc:	9c 01       	movw	r18, r24
    4cfe:	53 e0       	ldi	r21, 0x03	; 3
    4d00:	22 0f       	add	r18, r18
    4d02:	33 1f       	adc	r19, r19
    4d04:	5a 95       	dec	r21
    4d06:	e1 f7       	brne	.-8      	; 0x4d00 <mv_queue_move_buffer+0x464>
    4d08:	88 0f       	add	r24, r24
    4d0a:	99 1f       	adc	r25, r25
    4d0c:	28 0f       	add	r18, r24
    4d0e:	39 1f       	adc	r19, r25
    4d10:	e2 0f       	add	r30, r18
    4d12:	f3 1f       	adc	r31, r19
    4d14:	cd 01       	movw	r24, r26
    4d16:	84 83       	std	Z+4, r24	; 0x04
    4d18:	95 83       	std	Z+5, r25	; 0x05
    4d1a:	08 94       	sec
    4d1c:	41 1c       	adc	r4, r1
    4d1e:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    4d20:	f3 e0       	ldi	r31, 0x03	; 3
    4d22:	4f 16       	cp	r4, r31
    4d24:	51 04       	cpc	r5, r1
    4d26:	09 f0       	breq	.+2      	; 0x4d2a <mv_queue_move_buffer+0x48e>
    4d28:	c5 ce       	rjmp	.-630    	; 0x4ab4 <mv_queue_move_buffer+0x218>
				}
				mv.p->a[i].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    4d2a:	89 81       	ldd	r24, Y+1	; 0x01
    4d2c:	80 93 cf 21 	sts	0x21CF, r24
	st_execute_move();
    4d30:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <st_execute_move>
    4d34:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    4d36:	2b 96       	adiw	r28, 0x0b	; 11
    4d38:	cd bf       	out	0x3d, r28	; 61
    4d3a:	de bf       	out	0x3e, r29	; 62
    4d3c:	cf 91       	pop	r28
    4d3e:	df 91       	pop	r29
    4d40:	1f 91       	pop	r17
    4d42:	0f 91       	pop	r16
    4d44:	ff 90       	pop	r15
    4d46:	ef 90       	pop	r14
    4d48:	df 90       	pop	r13
    4d4a:	cf 90       	pop	r12
    4d4c:	bf 90       	pop	r11
    4d4e:	af 90       	pop	r10
    4d50:	9f 90       	pop	r9
    4d52:	8f 90       	pop	r8
    4d54:	7f 90       	pop	r7
    4d56:	6f 90       	pop	r6
    4d58:	5f 90       	pop	r5
    4d5a:	4f 90       	pop	r4
    4d5c:	3f 90       	pop	r3
    4d5e:	2f 90       	pop	r2
    4d60:	08 95       	ret

00004d62 <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    4d62:	af e3       	ldi	r26, 0x3F	; 63
    4d64:	b2 e2       	ldi	r27, 0x22	; 34
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    4d66:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    4d68:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    4d6a:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    4d6c:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    4d6e:	ed 91       	ld	r30, X+
    4d70:	fc 91       	ld	r31, X
    4d72:	11 97       	sbiw	r26, 0x01	; 1
    4d74:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    4d76:	ed 91       	ld	r30, X+
    4d78:	fc 91       	ld	r31, X
    4d7a:	11 97       	sbiw	r26, 0x01	; 1
    4d7c:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    4d7e:	ed 91       	ld	r30, X+
    4d80:	fc 91       	ld	r31, X
    4d82:	11 97       	sbiw	r26, 0x01	; 1
    4d84:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    4d86:	ed 91       	ld	r30, X+
    4d88:	fc 91       	ld	r31, X
    4d8a:	11 97       	sbiw	r26, 0x01	; 1
    4d8c:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    4d8e:	ed 91       	ld	r30, X+
    4d90:	fc 91       	ld	r31, X
    4d92:	11 97       	sbiw	r26, 0x01	; 1
    4d94:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    4d96:	ed 91       	ld	r30, X+
    4d98:	fc 91       	ld	r31, X
    4d9a:	11 97       	sbiw	r26, 0x01	; 1
    4d9c:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    4d9e:	ed 91       	ld	r30, X+
    4da0:	fc 91       	ld	r31, X
    4da2:	11 97       	sbiw	r26, 0x01	; 1
    4da4:	31 87       	std	Z+9, r19	; 0x09
    4da6:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    4da8:	42 e2       	ldi	r20, 0x22	; 34
    4daa:	af 37       	cpi	r26, 0x7F	; 127
    4dac:	b4 07       	cpc	r27, r20
    4dae:	f9 f6       	brne	.-66     	; 0x4d6e <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    4db0:	08 95       	ret

00004db2 <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    4db2:	1f 92       	push	r1
    4db4:	0f 92       	push	r0
    4db6:	0f b6       	in	r0, 0x3f	; 63
    4db8:	0f 92       	push	r0
    4dba:	11 24       	eor	r1, r1
    4dbc:	0f 90       	pop	r0
    4dbe:	0f be       	out	0x3f, r0	; 63
    4dc0:	0f 90       	pop	r0
    4dc2:	1f 90       	pop	r1
    4dc4:	18 95       	reti

00004dc6 <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    4dc6:	1f 92       	push	r1
    4dc8:	0f 92       	push	r0
    4dca:	0f b6       	in	r0, 0x3f	; 63
    4dcc:	0f 92       	push	r0
    4dce:	11 24       	eor	r1, r1
    4dd0:	0f 90       	pop	r0
    4dd2:	0f be       	out	0x3f, r0	; 63
    4dd4:	0f 90       	pop	r0
    4dd6:	1f 90       	pop	r1
    4dd8:	18 95       	reti

00004dda <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    4dda:	1f 92       	push	r1
    4ddc:	0f 92       	push	r0
    4dde:	0f b6       	in	r0, 0x3f	; 63
    4de0:	0f 92       	push	r0
    4de2:	11 24       	eor	r1, r1
    4de4:	0f 90       	pop	r0
    4de6:	0f be       	out	0x3f, r0	; 63
    4de8:	0f 90       	pop	r0
    4dea:	1f 90       	pop	r1
    4dec:	18 95       	reti

00004dee <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    4dee:	1f 92       	push	r1
    4df0:	0f 92       	push	r0
    4df2:	0f b6       	in	r0, 0x3f	; 63
    4df4:	0f 92       	push	r0
    4df6:	11 24       	eor	r1, r1
    4df8:	0f 90       	pop	r0
    4dfa:	0f be       	out	0x3f, r0	; 63
    4dfc:	0f 90       	pop	r0
    4dfe:	1f 90       	pop	r1
    4e00:	18 95       	reti

00004e02 <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    4e02:	1f 92       	push	r1
    4e04:	0f 92       	push	r0
    4e06:	0f b6       	in	r0, 0x3f	; 63
    4e08:	0f 92       	push	r0
    4e0a:	11 24       	eor	r1, r1
    4e0c:	0f 90       	pop	r0
    4e0e:	0f be       	out	0x3f, r0	; 63
    4e10:	0f 90       	pop	r0
    4e12:	1f 90       	pop	r1
    4e14:	18 95       	reti

00004e16 <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    4e16:	1f 92       	push	r1
    4e18:	0f 92       	push	r0
    4e1a:	0f b6       	in	r0, 0x3f	; 63
    4e1c:	0f 92       	push	r0
    4e1e:	11 24       	eor	r1, r1
    4e20:	0f 90       	pop	r0
    4e22:	0f be       	out	0x3f, r0	; 63
    4e24:	0f 90       	pop	r0
    4e26:	1f 90       	pop	r1
    4e28:	18 95       	reti

00004e2a <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    4e2a:	1f 92       	push	r1
    4e2c:	0f 92       	push	r0
    4e2e:	0f b6       	in	r0, 0x3f	; 63
    4e30:	0f 92       	push	r0
    4e32:	11 24       	eor	r1, r1
    4e34:	0f 90       	pop	r0
    4e36:	0f be       	out	0x3f, r0	; 63
    4e38:	0f 90       	pop	r0
    4e3a:	1f 90       	pop	r1
    4e3c:	18 95       	reti

00004e3e <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    4e3e:	1f 92       	push	r1
    4e40:	0f 92       	push	r0
    4e42:	0f b6       	in	r0, 0x3f	; 63
    4e44:	0f 92       	push	r0
    4e46:	11 24       	eor	r1, r1
    4e48:	0f 90       	pop	r0
    4e4a:	0f be       	out	0x3f, r0	; 63
    4e4c:	0f 90       	pop	r0
    4e4e:	1f 90       	pop	r1
    4e50:	18 95       	reti

00004e52 <tg_terminate>:

void tg_terminate()
{
//	tg_kill();
	return;
}
    4e52:	08 95       	ret

00004e54 <tg_pause>:

void tg_pause()
{
	return;
}
    4e54:	08 95       	ret

00004e56 <tg_resume>:

void tg_resume()
{
	return;
}
    4e56:	08 95       	ret

00004e58 <signal_etx>:
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx()				// ^c
{
	tg_reset_source();			// return control to standard device
    4e58:	0e 94 be 22 	call	0x457c	; 0x457c <tg_reset_source>
	mc_motion_stop();			// stop computing and generating motions
    4e5c:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <mc_motion_stop>
	return;
}
    4e60:	08 95       	ret

00004e62 <xio_set_baud_usart>:
	dx->port->OUTCLR = outclr;
	dx->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
    4e62:	cf 93       	push	r28
    4e64:	df 93       	push	r29
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    4e66:	90 e0       	ldi	r25, 0x00	; 0
    4e68:	27 e1       	ldi	r18, 0x17	; 23
    4e6a:	30 e0       	ldi	r19, 0x00	; 0
    4e6c:	82 9f       	mul	r24, r18
    4e6e:	d0 01       	movw	r26, r0
    4e70:	83 9f       	mul	r24, r19
    4e72:	b0 0d       	add	r27, r0
    4e74:	92 9f       	mul	r25, r18
    4e76:	b0 0d       	add	r27, r0
    4e78:	11 24       	eor	r1, r1
    4e7a:	a5 52       	subi	r26, 0x25	; 37
    4e7c:	bb 4d       	sbci	r27, 0xDB	; 219
    4e7e:	51 96       	adiw	r26, 0x11	; 17
    4e80:	ed 91       	ld	r30, X+
    4e82:	fc 91       	ld	r31, X
    4e84:	52 97       	sbiw	r26, 0x12	; 18
    4e86:	87 81       	ldd	r24, Z+7	; 0x07
    4e88:	90 85       	ldd	r25, Z+8	; 0x08
    4e8a:	26 2f       	mov	r18, r22
    4e8c:	30 e0       	ldi	r19, 0x00	; 0
    4e8e:	f9 01       	movw	r30, r18
    4e90:	e3 55       	subi	r30, 0x53	; 83
    4e92:	f7 4f       	sbci	r31, 0xF7	; 247
    4e94:	e4 91       	lpm	r30, Z+
    4e96:	ec 01       	movw	r28, r24
    4e98:	ee 83       	std	Y+6, r30	; 0x06
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    4e9a:	51 96       	adiw	r26, 0x11	; 17
    4e9c:	ed 91       	ld	r30, X+
    4e9e:	fc 91       	ld	r31, X
    4ea0:	52 97       	sbiw	r26, 0x12	; 18
    4ea2:	a7 81       	ldd	r26, Z+7	; 0x07
    4ea4:	b0 85       	ldd	r27, Z+8	; 0x08
    4ea6:	28 54       	subi	r18, 0x48	; 72
    4ea8:	37 4f       	sbci	r19, 0xF7	; 247
    4eaa:	f9 01       	movw	r30, r18
    4eac:	64 91       	lpm	r22, Z+
    4eae:	17 96       	adiw	r26, 0x07	; 7
    4eb0:	6c 93       	st	X, r22
}
    4eb2:	df 91       	pop	r29
    4eb4:	cf 91       	pop	r28
    4eb6:	08 95       	ret

00004eb8 <xio_putc_usart>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_usart(const uint8_t dev, const char c, FILE *stream)
{
    4eb8:	cf 93       	push	r28
    4eba:	df 93       	push	r29
    4ebc:	78 2f       	mov	r23, r24
    4ebe:	da 01       	movw	r26, r20
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
    4ec0:	87 e1       	ldi	r24, 0x17	; 23
    4ec2:	78 9f       	mul	r23, r24
    4ec4:	a0 01       	movw	r20, r0
    4ec6:	11 24       	eor	r1, r1
    4ec8:	45 52       	subi	r20, 0x25	; 37
    4eca:	5b 4d       	sbci	r21, 0xDB	; 219
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    4ecc:	27 2f       	mov	r18, r23
    4ece:	30 e0       	ldi	r19, 0x00	; 0
    4ed0:	87 e1       	ldi	r24, 0x17	; 23
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	28 9f       	mul	r18, r24
    4ed6:	f0 01       	movw	r30, r0
    4ed8:	29 9f       	mul	r18, r25
    4eda:	f0 0d       	add	r31, r0
    4edc:	38 9f       	mul	r19, r24
    4ede:	f0 0d       	add	r31, r0
    4ee0:	11 24       	eor	r1, r1
    4ee2:	e5 52       	subi	r30, 0x25	; 37
    4ee4:	fb 4d       	sbci	r31, 0xDB	; 219
    4ee6:	c1 89       	ldd	r28, Z+17	; 0x11
    4ee8:	d2 89       	ldd	r29, Z+18	; 0x12

	if ((dx->next_tx_buf_head = (dx->tx_buf_head)-1) == 0) { // adv. head & wrap
    4eea:	8d 81       	ldd	r24, Y+5	; 0x05
    4eec:	81 50       	subi	r24, 0x01	; 1
    4eee:	8e 83       	std	Y+6, r24	; 0x06
    4ef0:	88 23       	and	r24, r24
    4ef2:	11 f4       	brne	.+4      	; 0x4ef8 <xio_putc_usart+0x40>
		dx->next_tx_buf_head = TX_BUFFER_SIZE-1;	 // -1 avoids the off-by-one
    4ef4:	8f e3       	ldi	r24, 0x3F	; 63
    4ef6:	8e 83       	std	Y+6, r24	; 0x06
	}
	while(dx->next_tx_buf_head == dx->tx_buf_tail) { // buf full. sleep or ret
    4ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    4efa:	16 c0       	rjmp	.+44     	; 0x4f28 <xio_putc_usart+0x70>
		if (BLOCKING(d->flags)) {
    4efc:	fa 01       	movw	r30, r20
    4efe:	80 81       	ld	r24, Z
    4f00:	82 ff       	sbrs	r24, 2
    4f02:	0c c0       	rjmp	.+24     	; 0x4f1c <xio_putc_usart+0x64>
			sleep_mode();
    4f04:	80 91 48 00 	lds	r24, 0x0048
    4f08:	81 60       	ori	r24, 0x01	; 1
    4f0a:	80 93 48 00 	sts	0x0048, r24
    4f0e:	88 95       	sleep
    4f10:	80 91 48 00 	lds	r24, 0x0048
    4f14:	8e 7f       	andi	r24, 0xFE	; 254
    4f16:	80 93 48 00 	sts	0x0048, r24
    4f1a:	06 c0       	rjmp	.+12     	; 0x4f28 <xio_putc_usart+0x70>
		} else {
			d->sig = XIO_SIG_EAGAIN;
    4f1c:	81 e0       	ldi	r24, 0x01	; 1
    4f1e:	ea 01       	movw	r28, r20
    4f20:	8b 83       	std	Y+3, r24	; 0x03
    4f22:	2f ef       	ldi	r18, 0xFF	; 255
    4f24:	3f ef       	ldi	r19, 0xFF	; 255
    4f26:	56 c0       	rjmp	.+172    	; 0x4fd4 <xio_putc_usart+0x11c>
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer

	if ((dx->next_tx_buf_head = (dx->tx_buf_head)-1) == 0) { // adv. head & wrap
		dx->next_tx_buf_head = TX_BUFFER_SIZE-1;	 // -1 avoids the off-by-one
	}
	while(dx->next_tx_buf_head == dx->tx_buf_tail) { // buf full. sleep or ret
    4f28:	8c 81       	ldd	r24, Y+4	; 0x04
    4f2a:	98 17       	cp	r25, r24
    4f2c:	39 f3       	breq	.-50     	; 0x4efc <xio_putc_usart+0x44>
			d->sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	dx->tx_buf_head = dx->next_tx_buf_head;			// accept next buffer head
    4f2e:	9d 83       	std	Y+5, r25	; 0x05
	dx->tx_buf[dx->tx_buf_head] = c;				// ...write char to buffer
    4f30:	8d 81       	ldd	r24, Y+5	; 0x05
    4f32:	fe 01       	movw	r30, r28
    4f34:	e8 0f       	add	r30, r24
    4f36:	f1 1d       	adc	r31, r1
    4f38:	e5 5b       	subi	r30, 0xB5	; 181
    4f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3c:	60 83       	st	Z, r22

	if (CRLF(d->flags) && (c == '\n')) {			// detect LF & add CR
    4f3e:	fa 01       	movw	r30, r20
    4f40:	20 81       	ld	r18, Z
    4f42:	31 81       	ldd	r19, Z+1	; 0x01
    4f44:	25 ff       	sbrs	r18, 5
    4f46:	0a c0       	rjmp	.+20     	; 0x4f5c <xio_putc_usart+0xa4>
    4f48:	6a 30       	cpi	r22, 0x0A	; 10
    4f4a:	41 f4       	brne	.+16     	; 0x4f5c <xio_putc_usart+0xa4>
		return d->x_putc('\r', stream);				// recurse
    4f4c:	03 84       	ldd	r0, Z+11	; 0x0b
    4f4e:	f4 85       	ldd	r31, Z+12	; 0x0c
    4f50:	e0 2d       	mov	r30, r0
    4f52:	8d e0       	ldi	r24, 0x0D	; 13
    4f54:	bd 01       	movw	r22, r26
    4f56:	19 95       	eicall
    4f58:	9c 01       	movw	r18, r24
    4f5a:	3c c0       	rjmp	.+120    	; 0x4fd4 <xio_putc_usart+0x11c>
	}

	// dequeue the buffer if DATA register is ready
	if (dx->usart->STATUS & 0x20) {
    4f5c:	ef 81       	ldd	r30, Y+7	; 0x07
    4f5e:	f8 85       	ldd	r31, Y+8	; 0x08
    4f60:	81 81       	ldd	r24, Z+1	; 0x01
    4f62:	85 ff       	sbrs	r24, 5
    4f64:	26 c0       	rjmp	.+76     	; 0x4fb2 <xio_putc_usart+0xfa>
		if (dx->tx_buf_head == dx->tx_buf_tail) {// buf might be empty if IRQ got it
    4f66:	9d 81       	ldd	r25, Y+5	; 0x05
    4f68:	8c 81       	ldd	r24, Y+4	; 0x04
    4f6a:	98 17       	cp	r25, r24
    4f6c:	89 f1       	breq	.+98     	; 0x4fd0 <xio_putc_usart+0x118>
			return (XIO_OK);
		}
		d->flags |= XIO_FLAG_TX_MUTEX_bm;			// mutual exclusion from ISR
    4f6e:	38 60       	ori	r19, 0x08	; 8
    4f70:	fa 01       	movw	r30, r20
    4f72:	20 83       	st	Z, r18
    4f74:	31 83       	std	Z+1, r19	; 0x01
		if (--(dx->tx_buf_tail) == 0) {				// advance tail & wrap if needed
    4f76:	8c 81       	ldd	r24, Y+4	; 0x04
    4f78:	81 50       	subi	r24, 0x01	; 1
    4f7a:	8c 83       	std	Y+4, r24	; 0x04
    4f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    4f7e:	88 23       	and	r24, r24
    4f80:	11 f4       	brne	.+4      	; 0x4f86 <xio_putc_usart+0xce>
			dx->tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoid off-by-one err (OBOE)
    4f82:	8f e3       	ldi	r24, 0x3F	; 63
    4f84:	8c 83       	std	Y+4, r24	; 0x04
		}
		if (dev == XIO_DEV_RS485) {					// ++++ HACK ++++
    4f86:	77 23       	and	r23, r23
    4f88:	21 f4       	brne	.+8      	; 0x4f92 <xio_putc_usart+0xda>
			dx->port->OUTSET = (RS485_DE_bm | RS485_RE_bm);	// enable DE, disable RE
    4f8a:	e9 85       	ldd	r30, Y+9	; 0x09
    4f8c:	fa 85       	ldd	r31, Y+10	; 0x0a
    4f8e:	80 e3       	ldi	r24, 0x30	; 48
    4f90:	85 83       	std	Z+5, r24	; 0x05
		}
		dx->usart->DATA = dx->tx_buf[dx->tx_buf_tail];// write to TX DATA reg
    4f92:	af 81       	ldd	r26, Y+7	; 0x07
    4f94:	b8 85       	ldd	r27, Y+8	; 0x08
    4f96:	8c 81       	ldd	r24, Y+4	; 0x04
    4f98:	fe 01       	movw	r30, r28
    4f9a:	e8 0f       	add	r30, r24
    4f9c:	f1 1d       	adc	r31, r1
    4f9e:	e5 5b       	subi	r30, 0xB5	; 181
    4fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa2:	80 81       	ld	r24, Z
    4fa4:	8c 93       	st	X, r24
		d->flags &= ~XIO_FLAG_TX_MUTEX_bm;			// release mutual exclusion lock
    4fa6:	fa 01       	movw	r30, r20
    4fa8:	80 81       	ld	r24, Z
    4faa:	91 81       	ldd	r25, Z+1	; 0x01
    4fac:	97 7f       	andi	r25, 0xF7	; 247
    4fae:	80 83       	st	Z, r24
    4fb0:	91 83       	std	Z+1, r25	; 0x01
    4fb2:	ef 81       	ldd	r30, Y+7	; 0x07
    4fb4:	f8 85       	ldd	r31, Y+8	; 0x08
	}
	// enable interrupts regardless
	if (dev == XIO_DEV_RS485) {						// ++++ HACK ++++
    4fb6:	77 23       	and	r23, r23
    4fb8:	11 f4       	brne	.+4      	; 0x4fbe <xio_putc_usart+0x106>
		dx->usart->CTRLA = CTRLA_RXON_TXON_TXCON;	// doesn't work if you just |= it
    4fba:	85 e2       	ldi	r24, 0x25	; 37
    4fbc:	01 c0       	rjmp	.+2      	; 0x4fc0 <xio_putc_usart+0x108>
	} else {
		dx->usart->CTRLA = CTRLA_RXON_TXON;			// doesn't work if you just |= it
    4fbe:	81 e2       	ldi	r24, 0x21	; 33
    4fc0:	83 83       	std	Z+3, r24	; 0x03
	}
	PMIC_EnableLowLevel(); 							// enable USART TX interrupts
    4fc2:	80 91 a2 00 	lds	r24, 0x00A2
    4fc6:	81 60       	ori	r24, 0x01	; 1
    4fc8:	e0 ea       	ldi	r30, 0xA0	; 160
    4fca:	f0 e0       	ldi	r31, 0x00	; 0
    4fcc:	82 83       	std	Z+2, r24	; 0x02
	sei();											// enable global interrupts
    4fce:	78 94       	sei
    4fd0:	20 e0       	ldi	r18, 0x00	; 0
    4fd2:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_OK);
}
    4fd4:	c9 01       	movw	r24, r18
    4fd6:	df 91       	pop	r29
    4fd8:	cf 91       	pop	r28
    4fda:	08 95       	ret

00004fdc <xio_getc_usart>:
 *		  character helper routines. See them for behaviors
 */

int xio_getc_usart(const uint8_t dev, FILE *stream)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
    4fdc:	97 e1       	ldi	r25, 0x17	; 23
    4fde:	89 9f       	mul	r24, r25
    4fe0:	d0 01       	movw	r26, r0
    4fe2:	11 24       	eor	r1, r1
    4fe4:	a5 52       	subi	r26, 0x25	; 37
    4fe6:	bb 4d       	sbci	r27, 0xDB	; 219
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    4fe8:	48 2f       	mov	r20, r24
    4fea:	50 e0       	ldi	r21, 0x00	; 0
    4fec:	27 e1       	ldi	r18, 0x17	; 23
    4fee:	30 e0       	ldi	r19, 0x00	; 0
    4ff0:	42 9f       	mul	r20, r18
    4ff2:	f0 01       	movw	r30, r0
    4ff4:	43 9f       	mul	r20, r19
    4ff6:	f0 0d       	add	r31, r0
    4ff8:	52 9f       	mul	r21, r18
    4ffa:	f0 0d       	add	r31, r0
    4ffc:	11 24       	eor	r1, r1
    4ffe:	e5 52       	subi	r30, 0x25	; 37
    5000:	fb 4d       	sbci	r31, 0xDB	; 219
    5002:	01 88       	ldd	r0, Z+17	; 0x11
    5004:	f2 89       	ldd	r31, Z+18	; 0x12
    5006:	e0 2d       	mov	r30, r0

	gdev = dev;										// set dev number global var
    5008:	80 93 2d 22 	sts	0x222D, r24
    500c:	15 c0       	rjmp	.+42     	; 0x5038 <xio_getc_usart+0x5c>

	while (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(d->flags)) {
    500e:	8c 91       	ld	r24, X
    5010:	82 ff       	sbrs	r24, 2
    5012:	0c c0       	rjmp	.+24     	; 0x502c <xio_getc_usart+0x50>
			sleep_mode();
    5014:	80 91 48 00 	lds	r24, 0x0048
    5018:	81 60       	ori	r24, 0x01	; 1
    501a:	80 93 48 00 	sts	0x0048, r24
    501e:	88 95       	sleep
    5020:	80 91 48 00 	lds	r24, 0x0048
    5024:	8e 7f       	andi	r24, 0xFE	; 254
    5026:	80 93 48 00 	sts	0x0048, r24
    502a:	06 c0       	rjmp	.+12     	; 0x5038 <xio_getc_usart+0x5c>
		} else {
			d->sig = XIO_SIG_EAGAIN;
    502c:	81 e0       	ldi	r24, 0x01	; 1
    502e:	13 96       	adiw	r26, 0x03	; 3
    5030:	8c 93       	st	X, r24
    5032:	2f ef       	ldi	r18, 0xFF	; 255
    5034:	3f ef       	ldi	r19, 0xFF	; 255
    5036:	1e c0       	rjmp	.+60     	; 0x5074 <xio_getc_usart+0x98>
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer

	gdev = dev;										// set dev number global var

	while (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
    5038:	93 81       	ldd	r25, Z+3	; 0x03
    503a:	82 81       	ldd	r24, Z+2	; 0x02
    503c:	98 17       	cp	r25, r24
    503e:	39 f3       	breq	.-50     	; 0x500e <xio_getc_usart+0x32>
		} else {
			d->sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(dx->rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
    5040:	82 81       	ldd	r24, Z+2	; 0x02
    5042:	81 50       	subi	r24, 0x01	; 1
    5044:	82 83       	std	Z+2, r24	; 0x02
    5046:	82 81       	ldd	r24, Z+2	; 0x02
    5048:	88 23       	and	r24, r24
    504a:	11 f4       	brne	.+4      	; 0x5050 <xio_getc_usart+0x74>
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    504c:	8f e3       	ldi	r24, 0x3F	; 63
    504e:	82 83       	std	Z+2, r24	; 0x02
	}
	d->c = (dx->rx_buf[dx->rx_buf_tail] & 0x007F);// get char from RX buf & mask MSB
    5050:	82 81       	ldd	r24, Z+2	; 0x02
    5052:	e8 0f       	add	r30, r24
    5054:	f1 1d       	adc	r31, r1
    5056:	83 85       	ldd	r24, Z+11	; 0x0b
    5058:	8f 77       	andi	r24, 0x7F	; 127
    505a:	14 96       	adiw	r26, 0x04	; 4
    505c:	8c 93       	st	X, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[d->c])))());
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	88 0f       	add	r24, r24
    5062:	99 1f       	adc	r25, r25
    5064:	8d 53       	subi	r24, 0x3D	; 61
    5066:	96 4f       	sbci	r25, 0xF6	; 246
    5068:	fc 01       	movw	r30, r24
    506a:	25 91       	lpm	r18, Z+
    506c:	34 91       	lpm	r19, Z+
    506e:	f9 01       	movw	r30, r18
    5070:	19 95       	eicall
    5072:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    5074:	c9 01       	movw	r24, r18
    5076:	08 95       	ret

00005078 <_getc_char>:

// xio_getc_usart helper routines

static int _getc_char(void)
{
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    5078:	80 91 2d 22 	lds	r24, 0x222D
    507c:	90 e0       	ldi	r25, 0x00	; 0
    507e:	27 e1       	ldi	r18, 0x17	; 23
    5080:	30 e0       	ldi	r19, 0x00	; 0
    5082:	82 9f       	mul	r24, r18
    5084:	d0 01       	movw	r26, r0
    5086:	83 9f       	mul	r24, r19
    5088:	b0 0d       	add	r27, r0
    508a:	92 9f       	mul	r25, r18
    508c:	b0 0d       	add	r27, r0
    508e:	11 24       	eor	r1, r1
    5090:	a5 52       	subi	r26, 0x25	; 37
    5092:	bb 4d       	sbci	r27, 0xDB	; 219
    5094:	8c 91       	ld	r24, X
    5096:	84 ff       	sbrs	r24, 4
    5098:	0b c0       	rjmp	.+22     	; 0x50b0 <_getc_char+0x38>
    509a:	60 91 73 26 	lds	r22, 0x2673
    509e:	70 91 74 26 	lds	r23, 0x2674
    50a2:	1b 96       	adiw	r26, 0x0b	; 11
    50a4:	ed 91       	ld	r30, X+
    50a6:	fc 91       	ld	r31, X
    50a8:	1c 97       	sbiw	r26, 0x0c	; 12
    50aa:	14 96       	adiw	r26, 0x04	; 4
    50ac:	8c 91       	ld	r24, X
    50ae:	19 95       	eicall
    50b0:	80 91 2d 22 	lds	r24, 0x222D
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	27 e1       	ldi	r18, 0x17	; 23
    50b8:	30 e0       	ldi	r19, 0x00	; 0
    50ba:	82 9f       	mul	r24, r18
    50bc:	f0 01       	movw	r30, r0
    50be:	83 9f       	mul	r24, r19
    50c0:	f0 0d       	add	r31, r0
    50c2:	92 9f       	mul	r25, r18
    50c4:	f0 0d       	add	r31, r0
    50c6:	11 24       	eor	r1, r1
    50c8:	e5 52       	subi	r30, 0x25	; 37
    50ca:	fb 4d       	sbci	r31, 0xDB	; 219
	return(ds[gdev].c);
}
    50cc:	84 81       	ldd	r24, Z+4	; 0x04
    50ce:	90 e0       	ldi	r25, 0x00	; 0
    50d0:	08 95       	ret

000050d2 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(ds[gdev].flags)) ds[gdev].c = '\n';
    50d2:	80 91 2d 22 	lds	r24, 0x222D
    50d6:	28 2f       	mov	r18, r24
    50d8:	30 e0       	ldi	r19, 0x00	; 0
    50da:	87 e1       	ldi	r24, 0x17	; 23
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	28 9f       	mul	r18, r24
    50e0:	f0 01       	movw	r30, r0
    50e2:	29 9f       	mul	r18, r25
    50e4:	f0 0d       	add	r31, r0
    50e6:	38 9f       	mul	r19, r24
    50e8:	f0 0d       	add	r31, r0
    50ea:	11 24       	eor	r1, r1
    50ec:	e5 52       	subi	r30, 0x25	; 37
    50ee:	fb 4d       	sbci	r31, 0xDB	; 219
    50f0:	80 81       	ld	r24, Z
    50f2:	86 ff       	sbrs	r24, 6
    50f4:	02 c0       	rjmp	.+4      	; 0x50fa <_getc_NEWLINE+0x28>
    50f6:	8a e0       	ldi	r24, 0x0A	; 10
    50f8:	84 83       	std	Z+4, r24	; 0x04
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    50fa:	87 e1       	ldi	r24, 0x17	; 23
    50fc:	90 e0       	ldi	r25, 0x00	; 0
    50fe:	28 9f       	mul	r18, r24
    5100:	d0 01       	movw	r26, r0
    5102:	29 9f       	mul	r18, r25
    5104:	b0 0d       	add	r27, r0
    5106:	38 9f       	mul	r19, r24
    5108:	b0 0d       	add	r27, r0
    510a:	11 24       	eor	r1, r1
    510c:	a5 52       	subi	r26, 0x25	; 37
    510e:	bb 4d       	sbci	r27, 0xDB	; 219
    5110:	8c 91       	ld	r24, X
    5112:	84 ff       	sbrs	r24, 4
    5114:	0b c0       	rjmp	.+22     	; 0x512c <_getc_NEWLINE+0x5a>
    5116:	60 91 73 26 	lds	r22, 0x2673
    511a:	70 91 74 26 	lds	r23, 0x2674
    511e:	1b 96       	adiw	r26, 0x0b	; 11
    5120:	ed 91       	ld	r30, X+
    5122:	fc 91       	ld	r31, X
    5124:	1c 97       	sbiw	r26, 0x0c	; 12
    5126:	14 96       	adiw	r26, 0x04	; 4
    5128:	8c 91       	ld	r24, X
    512a:	19 95       	eicall
    512c:	80 91 2d 22 	lds	r24, 0x222D
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	27 e1       	ldi	r18, 0x17	; 23
    5134:	30 e0       	ldi	r19, 0x00	; 0
    5136:	82 9f       	mul	r24, r18
    5138:	f0 01       	movw	r30, r0
    513a:	83 9f       	mul	r24, r19
    513c:	f0 0d       	add	r31, r0
    513e:	92 9f       	mul	r25, r18
    5140:	f0 0d       	add	r31, r0
    5142:	11 24       	eor	r1, r1
    5144:	e5 52       	subi	r30, 0x25	; 37
    5146:	fb 4d       	sbci	r31, 0xDB	; 219
	return(ds[gdev].c);
}
    5148:	84 81       	ldd	r24, Z+4	; 0x04
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	08 95       	ret

0000514e <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(ds[gdev].flags)) {
    514e:	80 91 2d 22 	lds	r24, 0x222D
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	27 e1       	ldi	r18, 0x17	; 23
    5156:	30 e0       	ldi	r19, 0x00	; 0
    5158:	82 9f       	mul	r24, r18
    515a:	f0 01       	movw	r30, r0
    515c:	83 9f       	mul	r24, r19
    515e:	f0 0d       	add	r31, r0
    5160:	92 9f       	mul	r25, r18
    5162:	f0 0d       	add	r31, r0
    5164:	11 24       	eor	r1, r1
    5166:	e5 52       	subi	r30, 0x25	; 37
    5168:	fb 4d       	sbci	r31, 0xDB	; 219
    516a:	80 81       	ld	r24, Z
    516c:	87 ff       	sbrs	r24, 7
    516e:	03 c0       	rjmp	.+6      	; 0x5176 <_getc_SEMICOLON+0x28>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    5170:	0e 94 69 28 	call	0x50d2	; 0x50d2 <_getc_NEWLINE>
    5174:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    5176:	0e 94 3c 28 	call	0x5078	; 0x5078 <_getc_char>
}
    517a:	08 95       	ret

0000517c <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	ds[gdev].sig = XIO_SIG_DELETE;
    517c:	80 91 2d 22 	lds	r24, 0x222D
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	27 e1       	ldi	r18, 0x17	; 23
    5184:	30 e0       	ldi	r19, 0x00	; 0
    5186:	82 9f       	mul	r24, r18
    5188:	f0 01       	movw	r30, r0
    518a:	83 9f       	mul	r24, r19
    518c:	f0 0d       	add	r31, r0
    518e:	92 9f       	mul	r25, r18
    5190:	f0 0d       	add	r31, r0
    5192:	11 24       	eor	r1, r1
    5194:	e5 52       	subi	r30, 0x25	; 37
    5196:	fb 4d       	sbci	r31, 0xDB	; 219
    5198:	89 e0       	ldi	r24, 0x09	; 9
    519a:	83 83       	std	Z+3, r24	; 0x03
	return(_FDEV_ERR);
}
    519c:	8f ef       	ldi	r24, 0xFF	; 255
    519e:	9f ef       	ldi	r25, 0xFF	; 255
    51a0:	08 95       	ret

000051a2 <xio_readln_usart>:
 *
 *	Note: LINEMODE flag in device struct is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_usart(const uint8_t dev, char *buf, const uint8_t size)
{
    51a2:	ff 92       	push	r15
    51a4:	0f 93       	push	r16
    51a6:	1f 93       	push	r17
    51a8:	cf 93       	push	r28
    51aa:	df 93       	push	r29
    51ac:	28 2f       	mov	r18, r24
	struct xioDEVICE *d = &ds[dev];				// init device struct pointer
    51ae:	87 e1       	ldi	r24, 0x17	; 23
    51b0:	28 9f       	mul	r18, r24
    51b2:	e0 01       	movw	r28, r0
    51b4:	11 24       	eor	r1, r1
    51b6:	c5 52       	subi	r28, 0x25	; 37
    51b8:	db 4d       	sbci	r29, 0xDB	; 219
	
	gdev = dev;									// set the global device number
    51ba:	20 93 2d 22 	sts	0x222D, r18

	if (!IN_LINE(d->flags)) {					// first time thru initializations
    51be:	88 81       	ld	r24, Y
    51c0:	99 81       	ldd	r25, Y+1	; 0x01
    51c2:	96 fd       	sbrc	r25, 6
    51c4:	09 c0       	rjmp	.+18     	; 0x51d8 <xio_readln_usart+0x36>
		d->len = 0;								// zero buffer
    51c6:	1d 82       	std	Y+5, r1	; 0x05
		d->status = 0;
    51c8:	1a 82       	std	Y+2, r1	; 0x02
		d->size = size;
    51ca:	4e 83       	std	Y+6, r20	; 0x06
		d->buf = buf;
    51cc:	6d 8b       	std	Y+21, r22	; 0x15
    51ce:	7e 8b       	std	Y+22, r23	; 0x16
		d->sig = XIO_SIG_OK;					// reset signal register
    51d0:	1b 82       	std	Y+3, r1	; 0x03
		d->flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    51d2:	90 64       	ori	r25, 0x40	; 64
    51d4:	88 83       	st	Y, r24
    51d6:	99 83       	std	Y+1, r25	; 0x01
 */

static int _xio_readc_usart(const uint8_t dev, const char *buf)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    51d8:	30 e0       	ldi	r19, 0x00	; 0
    51da:	87 e1       	ldi	r24, 0x17	; 23
    51dc:	90 e0       	ldi	r25, 0x00	; 0
    51de:	28 9f       	mul	r18, r24
    51e0:	80 01       	movw	r16, r0
    51e2:	29 9f       	mul	r18, r25
    51e4:	10 0d       	add	r17, r0
    51e6:	38 9f       	mul	r19, r24
    51e8:	10 0d       	add	r17, r0
    51ea:	11 24       	eor	r1, r1
    51ec:	04 51       	subi	r16, 0x14	; 20
    51ee:	1b 4d       	sbci	r17, 0xDB	; 219

	if (dx->rx_buf_head == dx->rx_buf_tail) {		// RX ISR buffer empty
		return(XIO_BUFFER_EMPTY);
	}
	if (--(dx->rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    51f0:	4f e3       	ldi	r20, 0x3F	; 63
    51f2:	f4 2e       	mov	r15, r20
 */

static int _xio_readc_usart(const uint8_t dev, const char *buf)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    51f4:	d8 01       	movw	r26, r16
    51f6:	ed 91       	ld	r30, X+
    51f8:	fc 91       	ld	r31, X

	if (dx->rx_buf_head == dx->rx_buf_tail) {		// RX ISR buffer empty
    51fa:	93 81       	ldd	r25, Z+3	; 0x03
    51fc:	82 81       	ldd	r24, Z+2	; 0x02
    51fe:	98 17       	cp	r25, r24
    5200:	19 f4       	brne	.+6      	; 0x5208 <xio_readln_usart+0x66>
    5202:	88 e0       	ldi	r24, 0x08	; 8
    5204:	90 e0       	ldi	r25, 0x00	; 0
    5206:	17 c0       	rjmp	.+46     	; 0x5236 <xio_readln_usart+0x94>
		return(XIO_BUFFER_EMPTY);
	}
	if (--(dx->rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
    5208:	82 81       	ldd	r24, Z+2	; 0x02
    520a:	81 50       	subi	r24, 0x01	; 1
    520c:	82 83       	std	Z+2, r24	; 0x02
    520e:	82 81       	ldd	r24, Z+2	; 0x02
    5210:	88 23       	and	r24, r24
    5212:	09 f4       	brne	.+2      	; 0x5216 <xio_readln_usart+0x74>
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    5214:	f2 82       	std	Z+2, r15	; 0x02
	}
	d->c = (dx->rx_buf[dx->rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    5216:	82 81       	ldd	r24, Z+2	; 0x02
    5218:	e8 0f       	add	r30, r24
    521a:	f1 1d       	adc	r31, r1
    521c:	83 85       	ldd	r24, Z+11	; 0x0b
    521e:	8f 77       	andi	r24, 0x7F	; 127
    5220:	8c 83       	std	Y+4, r24	; 0x04
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[d->c])))()); // dispatch char
    5222:	90 e0       	ldi	r25, 0x00	; 0
    5224:	88 0f       	add	r24, r24
    5226:	99 1f       	adc	r25, r25
    5228:	8d 53       	subi	r24, 0x3D	; 61
    522a:	97 4f       	sbci	r25, 0xF7	; 247
    522c:	fc 01       	movw	r30, r24
    522e:	25 91       	lpm	r18, Z+
    5230:	34 91       	lpm	r19, Z+
    5232:	f9 01       	movw	r30, r18
    5234:	19 95       	eicall
		d->buf = buf;
		d->sig = XIO_SIG_OK;					// reset signal register
		d->flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
	}
	while (TRUE) { 
		switch (d->status = _xio_readc_usart(dev, d->buf)) {
    5236:	8a 83       	std	Y+2, r24	; 0x02
    5238:	88 30       	cpi	r24, 0x08	; 8
    523a:	41 f0       	breq	.+16     	; 0x524c <xio_readln_usart+0xaa>
    523c:	8a 30       	cpi	r24, 0x0A	; 10
    523e:	19 f0       	breq	.+6      	; 0x5246 <xio_readln_usart+0xa4>
    5240:	84 30       	cpi	r24, 0x04	; 4
    5242:	c1 f6       	brne	.-80     	; 0x51f4 <xio_readln_usart+0x52>
    5244:	06 c0       	rjmp	.+12     	; 0x5252 <xio_readln_usart+0xb0>
    5246:	2a e0       	ldi	r18, 0x0A	; 10
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	05 c0       	rjmp	.+10     	; 0x5256 <xio_readln_usart+0xb4>
    524c:	22 e0       	ldi	r18, 0x02	; 2
    524e:	30 e0       	ldi	r19, 0x00	; 0
    5250:	02 c0       	rjmp	.+4      	; 0x5256 <xio_readln_usart+0xb4>
    5252:	20 e0       	ldi	r18, 0x00	; 0
    5254:	30 e0       	ldi	r19, 0x00	; 0
			case (XIO_EAGAIN): break;							// loop
		}
		// +++ put a size check here of buffers can overrun.
	}
	return (XIO_OK);
}
    5256:	c9 01       	movw	r24, r18
    5258:	df 91       	pop	r29
    525a:	cf 91       	pop	r28
    525c:	1f 91       	pop	r17
    525e:	0f 91       	pop	r16
    5260:	ff 90       	pop	r15
    5262:	08 95       	ret

00005264 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (ds[gdev].len > ds[gdev].size) {			// trap buffer overflow
    5264:	80 91 2d 22 	lds	r24, 0x222D
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	27 e1       	ldi	r18, 0x17	; 23
    526c:	30 e0       	ldi	r19, 0x00	; 0
    526e:	82 9f       	mul	r24, r18
    5270:	d0 01       	movw	r26, r0
    5272:	83 9f       	mul	r24, r19
    5274:	b0 0d       	add	r27, r0
    5276:	92 9f       	mul	r25, r18
    5278:	b0 0d       	add	r27, r0
    527a:	11 24       	eor	r1, r1
    527c:	a5 52       	subi	r26, 0x25	; 37
    527e:	bb 4d       	sbci	r27, 0xDB	; 219
    5280:	15 96       	adiw	r26, 0x05	; 5
    5282:	9c 91       	ld	r25, X
    5284:	15 97       	sbiw	r26, 0x05	; 5
    5286:	16 96       	adiw	r26, 0x06	; 6
    5288:	2c 91       	ld	r18, X
    528a:	16 97       	sbiw	r26, 0x06	; 6
    528c:	29 17       	cp	r18, r25
    528e:	70 f4       	brcc	.+28     	; 0x52ac <_readln_char+0x48>
		ds[gdev].sig = XIO_SIG_EOL;
    5290:	82 e0       	ldi	r24, 0x02	; 2
    5292:	13 96       	adiw	r26, 0x03	; 3
    5294:	8c 93       	st	X, r24
    5296:	13 97       	sbiw	r26, 0x03	; 3
		ds[gdev].buf[ds[gdev].size] = NUL;		// size is zero based
    5298:	55 96       	adiw	r26, 0x15	; 21
    529a:	ed 91       	ld	r30, X+
    529c:	fc 91       	ld	r31, X
    529e:	56 97       	sbiw	r26, 0x16	; 22
    52a0:	e2 0f       	add	r30, r18
    52a2:	f1 1d       	adc	r31, r1
    52a4:	10 82       	st	Z, r1
    52a6:	2a e0       	ldi	r18, 0x0A	; 10
    52a8:	30 e0       	ldi	r19, 0x00	; 0
    52aa:	1e c0       	rjmp	.+60     	; 0x52e8 <_readln_char+0x84>
		return (XIO_BUFFER_FULL_NON_FATAL);
	}
	ds[gdev].buf[ds[gdev].len++] = ds[gdev].c;
    52ac:	55 96       	adiw	r26, 0x15	; 21
    52ae:	ed 91       	ld	r30, X+
    52b0:	fc 91       	ld	r31, X
    52b2:	56 97       	sbiw	r26, 0x16	; 22
    52b4:	e9 0f       	add	r30, r25
    52b6:	f1 1d       	adc	r31, r1
    52b8:	14 96       	adiw	r26, 0x04	; 4
    52ba:	8c 91       	ld	r24, X
    52bc:	14 97       	sbiw	r26, 0x04	; 4
    52be:	80 83       	st	Z, r24
    52c0:	9f 5f       	subi	r25, 0xFF	; 255
    52c2:	15 96       	adiw	r26, 0x05	; 5
    52c4:	9c 93       	st	X, r25
    52c6:	15 97       	sbiw	r26, 0x05	; 5
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);// conditional echo
    52c8:	8c 91       	ld	r24, X
    52ca:	84 ff       	sbrs	r24, 4
    52cc:	0b c0       	rjmp	.+22     	; 0x52e4 <_readln_char+0x80>
    52ce:	60 91 73 26 	lds	r22, 0x2673
    52d2:	70 91 74 26 	lds	r23, 0x2674
    52d6:	1b 96       	adiw	r26, 0x0b	; 11
    52d8:	ed 91       	ld	r30, X+
    52da:	fc 91       	ld	r31, X
    52dc:	1c 97       	sbiw	r26, 0x0c	; 12
    52de:	14 96       	adiw	r26, 0x04	; 4
    52e0:	8c 91       	ld	r24, X
    52e2:	19 95       	eicall
    52e4:	22 e0       	ldi	r18, 0x02	; 2
    52e6:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_EAGAIN);						// line is still in process
}
    52e8:	c9 01       	movw	r24, r18
    52ea:	08 95       	ret

000052ec <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	ds[gdev].sig = XIO_SIG_EOL;
    52ec:	80 91 2d 22 	lds	r24, 0x222D
    52f0:	90 e0       	ldi	r25, 0x00	; 0
    52f2:	27 e1       	ldi	r18, 0x17	; 23
    52f4:	30 e0       	ldi	r19, 0x00	; 0
    52f6:	82 9f       	mul	r24, r18
    52f8:	d0 01       	movw	r26, r0
    52fa:	83 9f       	mul	r24, r19
    52fc:	b0 0d       	add	r27, r0
    52fe:	92 9f       	mul	r25, r18
    5300:	b0 0d       	add	r27, r0
    5302:	11 24       	eor	r1, r1
    5304:	a5 52       	subi	r26, 0x25	; 37
    5306:	bb 4d       	sbci	r27, 0xDB	; 219
    5308:	82 e0       	ldi	r24, 0x02	; 2
    530a:	13 96       	adiw	r26, 0x03	; 3
    530c:	8c 93       	st	X, r24
    530e:	13 97       	sbiw	r26, 0x03	; 3
	ds[gdev].buf[ds[gdev].len] = NUL;
    5310:	15 96       	adiw	r26, 0x05	; 5
    5312:	8c 91       	ld	r24, X
    5314:	15 97       	sbiw	r26, 0x05	; 5
    5316:	55 96       	adiw	r26, 0x15	; 21
    5318:	ed 91       	ld	r30, X+
    531a:	fc 91       	ld	r31, X
    531c:	56 97       	sbiw	r26, 0x16	; 22
    531e:	e8 0f       	add	r30, r24
    5320:	f1 1d       	adc	r31, r1
    5322:	10 82       	st	Z, r1
	ds[gdev].flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    5324:	2d 91       	ld	r18, X+
    5326:	3c 91       	ld	r19, X
    5328:	11 97       	sbiw	r26, 0x01	; 1
    532a:	c9 01       	movw	r24, r18
    532c:	9f 7b       	andi	r25, 0xBF	; 191
    532e:	8d 93       	st	X+, r24
    5330:	9c 93       	st	X, r25
    5332:	11 97       	sbiw	r26, 0x01	; 1
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc('\n',stdout);// echo a newline
    5334:	24 ff       	sbrs	r18, 4
    5336:	0a c0       	rjmp	.+20     	; 0x534c <_readln_NEWLINE+0x60>
    5338:	60 91 73 26 	lds	r22, 0x2673
    533c:	70 91 74 26 	lds	r23, 0x2674
    5340:	1b 96       	adiw	r26, 0x0b	; 11
    5342:	ed 91       	ld	r30, X+
    5344:	fc 91       	ld	r31, X
    5346:	1c 97       	sbiw	r26, 0x0c	; 12
    5348:	8a e0       	ldi	r24, 0x0A	; 10
    534a:	19 95       	eicall
	return (XIO_EOL);							// return for end-of-line
}
    534c:	84 e0       	ldi	r24, 0x04	; 4
    534e:	90 e0       	ldi	r25, 0x00	; 0
    5350:	08 95       	ret

00005352 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newln
{
	if (SEMICOLONS(ds[gdev].flags)) {
    5352:	80 91 2d 22 	lds	r24, 0x222D
    5356:	90 e0       	ldi	r25, 0x00	; 0
    5358:	27 e1       	ldi	r18, 0x17	; 23
    535a:	30 e0       	ldi	r19, 0x00	; 0
    535c:	82 9f       	mul	r24, r18
    535e:	f0 01       	movw	r30, r0
    5360:	83 9f       	mul	r24, r19
    5362:	f0 0d       	add	r31, r0
    5364:	92 9f       	mul	r25, r18
    5366:	f0 0d       	add	r31, r0
    5368:	11 24       	eor	r1, r1
    536a:	e5 52       	subi	r30, 0x25	; 37
    536c:	fb 4d       	sbci	r31, 0xDB	; 219
    536e:	80 81       	ld	r24, Z
    5370:	87 ff       	sbrs	r24, 7
    5372:	03 c0       	rjmp	.+6      	; 0x537a <_readln_SEMICOLON+0x28>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    5374:	0e 94 76 29 	call	0x52ec	; 0x52ec <_readln_NEWLINE>
    5378:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    537a:	0e 94 32 29 	call	0x5264	; 0x5264 <_readln_char>
	}
}
    537e:	08 95       	ret

00005380 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--ds[gdev].len >= 0) {
    5380:	80 91 2d 22 	lds	r24, 0x222D
    5384:	90 e0       	ldi	r25, 0x00	; 0
    5386:	27 e1       	ldi	r18, 0x17	; 23
    5388:	30 e0       	ldi	r19, 0x00	; 0
    538a:	82 9f       	mul	r24, r18
    538c:	d0 01       	movw	r26, r0
    538e:	83 9f       	mul	r24, r19
    5390:	b0 0d       	add	r27, r0
    5392:	92 9f       	mul	r25, r18
    5394:	b0 0d       	add	r27, r0
    5396:	11 24       	eor	r1, r1
    5398:	a5 52       	subi	r26, 0x25	; 37
    539a:	bb 4d       	sbci	r27, 0xDB	; 219
    539c:	15 96       	adiw	r26, 0x05	; 5
    539e:	8c 91       	ld	r24, X
    53a0:	15 97       	sbiw	r26, 0x05	; 5
    53a2:	81 50       	subi	r24, 0x01	; 1
    53a4:	15 96       	adiw	r26, 0x05	; 5
    53a6:	8c 93       	st	X, r24
    53a8:	15 97       	sbiw	r26, 0x05	; 5
		if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    53aa:	8c 91       	ld	r24, X
    53ac:	84 ff       	sbrs	r24, 4
    53ae:	0b c0       	rjmp	.+22     	; 0x53c6 <_readln_DELETE+0x46>
    53b0:	60 91 73 26 	lds	r22, 0x2673
    53b4:	70 91 74 26 	lds	r23, 0x2674
    53b8:	1b 96       	adiw	r26, 0x0b	; 11
    53ba:	ed 91       	ld	r30, X+
    53bc:	fc 91       	ld	r31, X
    53be:	1c 97       	sbiw	r26, 0x0c	; 12
    53c0:	14 96       	adiw	r26, 0x04	; 4
    53c2:	8c 91       	ld	r24, X
    53c4:	19 95       	eicall
	} else {
		ds[gdev].len = 0;
	}
	return (XIO_EAGAIN);						// line is still in process
}
    53c6:	82 e0       	ldi	r24, 0x02	; 2
    53c8:	90 e0       	ldi	r25, 0x00	; 0
    53ca:	08 95       	ret

000053cc <xio_queue_RX_char_usart>:
 */

void xio_queue_RX_char_usart(const uint8_t dev, const char c)
{
	struct xioDEVICE *d = &ds[dev];				// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));// init USART pointer
    53cc:	90 e0       	ldi	r25, 0x00	; 0
    53ce:	27 e1       	ldi	r18, 0x17	; 23
    53d0:	30 e0       	ldi	r19, 0x00	; 0
    53d2:	82 9f       	mul	r24, r18
    53d4:	f0 01       	movw	r30, r0
    53d6:	83 9f       	mul	r24, r19
    53d8:	f0 0d       	add	r31, r0
    53da:	92 9f       	mul	r25, r18
    53dc:	f0 0d       	add	r31, r0
    53de:	11 24       	eor	r1, r1
    53e0:	e5 52       	subi	r30, 0x25	; 37
    53e2:	fb 4d       	sbci	r31, 0xDB	; 219
    53e4:	81 89       	ldd	r24, Z+17	; 0x11
    53e6:	92 89       	ldd	r25, Z+18	; 0x12

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    53e8:	63 30       	cpi	r22, 0x03	; 3
    53ea:	29 f4       	brne	.+10     	; 0x53f6 <xio_queue_RX_char_usart+0x2a>
		d->sig = XIO_SIG_KILL;					// set signal value
    53ec:	84 e0       	ldi	r24, 0x04	; 4
    53ee:	83 83       	std	Z+3, r24	; 0x03
		signal_etx();							// call app-specific sig handler
    53f0:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <signal_etx>
    53f4:	08 95       	ret
 */

void xio_queue_RX_char_usart(const uint8_t dev, const char c)
{
	struct xioDEVICE *d = &ds[dev];				// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));// init USART pointer
    53f6:	fc 01       	movw	r30, r24
		signal_etx();							// call app-specific sig handler
		return;
	}

	// normal path
	if ((--dx->rx_buf_head) == 0) { 			// wrap condition
    53f8:	83 81       	ldd	r24, Z+3	; 0x03
    53fa:	81 50       	subi	r24, 0x01	; 1
    53fc:	83 83       	std	Z+3, r24	; 0x03
    53fe:	83 81       	ldd	r24, Z+3	; 0x03
    5400:	88 23       	and	r24, r24
    5402:	11 f4       	brne	.+4      	; 0x5408 <xio_queue_RX_char_usart+0x3c>
		dx->rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    5404:	8f e3       	ldi	r24, 0x3F	; 63
    5406:	83 83       	std	Z+3, r24	; 0x03
	}
	if (dx->rx_buf_head != dx->rx_buf_tail) {	// write char unless buffer full
    5408:	93 81       	ldd	r25, Z+3	; 0x03
    540a:	82 81       	ldd	r24, Z+2	; 0x02
    540c:	98 17       	cp	r25, r24
    540e:	29 f0       	breq	.+10     	; 0x541a <xio_queue_RX_char_usart+0x4e>
		dx->rx_buf[dx->rx_buf_head] = c;		// FAKE INPUT DATA
    5410:	83 81       	ldd	r24, Z+3	; 0x03
    5412:	e8 0f       	add	r30, r24
    5414:	f1 1d       	adc	r31, r1
    5416:	63 87       	std	Z+11, r22	; 0x0b
    5418:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++dx->rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    541a:	83 81       	ldd	r24, Z+3	; 0x03
    541c:	8f 5f       	subi	r24, 0xFF	; 255
    541e:	83 83       	std	Z+3, r24	; 0x03
    5420:	83 81       	ldd	r24, Z+3	; 0x03
    5422:	80 34       	cpi	r24, 0x40	; 64
    5424:	10 f0       	brcs	.+4      	; 0x542a <xio_queue_RX_char_usart+0x5e>
		dx->rx_buf_head = 1;
    5426:	81 e0       	ldi	r24, 0x01	; 1
    5428:	83 83       	std	Z+3, r24	; 0x03
    542a:	08 95       	ret

0000542c <xio_queue_RX_string_usart>:
/*
 * xio_queue_RX_string_usart() - fake ISR to put a string in the RX buffer
 */

void xio_queue_RX_string_usart(const uint8_t dev, const char *buf)
{
    542c:	0f 93       	push	r16
    542e:	1f 93       	push	r17
    5430:	cf 93       	push	r28
    5432:	df 93       	push	r29
    5434:	08 2f       	mov	r16, r24
    5436:	eb 01       	movw	r28, r22
    5438:	10 e0       	ldi	r17, 0x00	; 0
    543a:	03 c0       	rjmp	.+6      	; 0x5442 <xio_queue_RX_string_usart+0x16>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_queue_RX_char_usart(dev, c);
    543c:	80 2f       	mov	r24, r16
    543e:	0e 94 e6 29 	call	0x53cc	; 0x53cc <xio_queue_RX_char_usart>
void xio_queue_RX_string_usart(const uint8_t dev, const char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    5442:	fe 01       	movw	r30, r28
    5444:	e1 0f       	add	r30, r17
    5446:	f1 1d       	adc	r31, r1
    5448:	60 81       	ld	r22, Z
    544a:	1f 5f       	subi	r17, 0xFF	; 255
    544c:	66 23       	and	r22, r22
    544e:	b1 f7       	brne	.-20     	; 0x543c <xio_queue_RX_string_usart+0x10>
		xio_queue_RX_char_usart(dev, c);
	}
}
    5450:	df 91       	pop	r29
    5452:	cf 91       	pop	r28
    5454:	1f 91       	pop	r17
    5456:	0f 91       	pop	r16
    5458:	08 95       	ret

0000545a <xio_init_usart>:
					const struct PORT_struct *port_addr,
					const uint8_t dirclr, 
					const uint8_t dirset, 
					const uint8_t outclr, 
					const uint8_t outset) 
{
    545a:	8f 92       	push	r8
    545c:	9f 92       	push	r9
    545e:	af 92       	push	r10
    5460:	bf 92       	push	r11
    5462:	cf 92       	push	r12
    5464:	df 92       	push	r13
    5466:	ef 92       	push	r14
    5468:	ff 92       	push	r15
    546a:	0f 93       	push	r16
    546c:	1f 93       	push	r17
    546e:	df 93       	push	r29
    5470:	cf 93       	push	r28
    5472:	cd b7       	in	r28, 0x3d	; 61
    5474:	de b7       	in	r29, 0x3e	; 62
    5476:	b8 2e       	mov	r11, r24
    5478:	f4 2e       	mov	r15, r20
    547a:	9c 2c       	mov	r9, r12
	// do all the bindings first (and in this order)
	struct xioDEVICE *d = &ds[dev];					// setup device struct pointer
	d->x = &us[offset];								// bind USART struct to device
    547c:	8b e8       	ldi	r24, 0x8B	; 139
    547e:	68 9f       	mul	r22, r24
    5480:	60 01       	movw	r12, r0
    5482:	11 24       	eor	r1, r1
    5484:	82 e2       	ldi	r24, 0x22	; 34
    5486:	93 e2       	ldi	r25, 0x23	; 35
    5488:	c8 0e       	add	r12, r24
    548a:	d9 1e       	adc	r13, r25
    548c:	6b 2d       	mov	r22, r11
    548e:	70 e0       	ldi	r23, 0x00	; 0
    5490:	87 e1       	ldi	r24, 0x17	; 23
    5492:	90 e0       	ldi	r25, 0x00	; 0
    5494:	68 9f       	mul	r22, r24
    5496:	f0 01       	movw	r30, r0
    5498:	69 9f       	mul	r22, r25
    549a:	f0 0d       	add	r31, r0
    549c:	78 9f       	mul	r23, r24
    549e:	f0 0d       	add	r31, r0
    54a0:	11 24       	eor	r1, r1
    54a2:	e5 52       	subi	r30, 0x25	; 37
    54a4:	fb 4d       	sbci	r31, 0xDB	; 219
    54a6:	c1 8a       	std	Z+17, r12	; 0x11
    54a8:	d2 8a       	std	Z+18, r13	; 0x12
	struct xioUSART *dx = (struct xioUSART *)d->x;	// setup USART struct pointer
	dx->usart = (struct USART_struct *)usart_addr;	// bind USART 
    54aa:	d6 01       	movw	r26, r12
    54ac:	17 96       	adiw	r26, 0x07	; 7
    54ae:	2d 93       	st	X+, r18
    54b0:	3c 93       	st	X, r19
    54b2:	18 97       	sbiw	r26, 0x08	; 8
	dx->port = (struct PORT_struct *)port_addr;		// bind PORT
    54b4:	19 96       	adiw	r26, 0x09	; 9
    54b6:	0d 93       	st	X+, r16
    54b8:	1c 93       	st	X, r17
    54ba:	1a 97       	sbiw	r26, 0x0a	; 10

	// set flags
	xio_setflags(dev, control);		// generic setflags - doesn't validate flags
    54bc:	8b 2d       	mov	r24, r11
    54be:	64 2f       	mov	r22, r20
    54c0:	75 2f       	mov	r23, r21
    54c2:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <xio_setflags>

	// setup internal RX/TX buffers
	dx->rx_buf_head = 1;			// can't use location 0 in circular buffer
    54c6:	81 e0       	ldi	r24, 0x01	; 1
    54c8:	f6 01       	movw	r30, r12
    54ca:	83 83       	std	Z+3, r24	; 0x03
	dx->rx_buf_tail = 1;
    54cc:	82 83       	std	Z+2, r24	; 0x02
	dx->tx_buf_head = 1;
    54ce:	85 83       	std	Z+5, r24	; 0x05
	dx->tx_buf_tail = 1;
    54d0:	84 83       	std	Z+4, r24	; 0x04

	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    54d2:	4f 2d       	mov	r20, r15
    54d4:	4f 70       	andi	r20, 0x0F	; 15
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
    54d6:	09 f4       	brne	.+2      	; 0x54da <xio_init_usart+0x80>
    54d8:	45 e0       	ldi	r20, 0x05	; 5
	dx->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    54da:	2b 2d       	mov	r18, r11
    54dc:	30 e0       	ldi	r19, 0x00	; 0
    54de:	87 e1       	ldi	r24, 0x17	; 23
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	28 9f       	mul	r18, r24
    54e4:	d0 01       	movw	r26, r0
    54e6:	29 9f       	mul	r18, r25
    54e8:	b0 0d       	add	r27, r0
    54ea:	38 9f       	mul	r19, r24
    54ec:	b0 0d       	add	r27, r0
    54ee:	11 24       	eor	r1, r1
    54f0:	a5 52       	subi	r26, 0x25	; 37
    54f2:	bb 4d       	sbci	r27, 0xDB	; 219
    54f4:	51 96       	adiw	r26, 0x11	; 17
    54f6:	ed 91       	ld	r30, X+
    54f8:	fc 91       	ld	r31, X
    54fa:	52 97       	sbiw	r26, 0x12	; 18
    54fc:	87 81       	ldd	r24, Z+7	; 0x07
    54fe:	90 85       	ldd	r25, Z+8	; 0x08
    5500:	24 2f       	mov	r18, r20
    5502:	30 e0       	ldi	r19, 0x00	; 0
    5504:	f9 01       	movw	r30, r18
    5506:	e3 55       	subi	r30, 0x53	; 83
    5508:	f7 4f       	sbci	r31, 0xF7	; 247
    550a:	44 91       	lpm	r20, Z+
    550c:	fc 01       	movw	r30, r24
    550e:	46 83       	std	Z+6, r20	; 0x06
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    5510:	51 96       	adiw	r26, 0x11	; 17
    5512:	ed 91       	ld	r30, X+
    5514:	fc 91       	ld	r31, X
    5516:	52 97       	sbiw	r26, 0x12	; 18
    5518:	a7 81       	ldd	r26, Z+7	; 0x07
    551a:	b0 85       	ldd	r27, Z+8	; 0x08
    551c:	28 54       	subi	r18, 0x48	; 72
    551e:	37 4f       	sbci	r19, 0xF7	; 247
    5520:	f9 01       	movw	r30, r18
    5522:	f4 90       	lpm	r15, Z+
    5524:	17 96       	adiw	r26, 0x07	; 7
    5526:	fc 92       	st	X, r15
	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
	xio_set_baud_usart(dev, baud);					// usart must be bound first

	dx->usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx
    5528:	d6 01       	movw	r26, r12
    552a:	17 96       	adiw	r26, 0x07	; 7
    552c:	ed 91       	ld	r30, X+
    552e:	fc 91       	ld	r31, X
    5530:	18 97       	sbiw	r26, 0x08	; 8
    5532:	88 e1       	ldi	r24, 0x18	; 24
    5534:	84 83       	std	Z+4, r24	; 0x04
	dx->usart->CTRLA = CTRLA_RXON_TXON;			   // enable tx and rx IRQs
    5536:	17 96       	adiw	r26, 0x07	; 7
    5538:	ed 91       	ld	r30, X+
    553a:	fc 91       	ld	r31, X
    553c:	18 97       	sbiw	r26, 0x08	; 8
    553e:	81 e2       	ldi	r24, 0x21	; 33
    5540:	83 83       	std	Z+3, r24	; 0x03

	dx->port->DIRCLR = dirclr;
    5542:	19 96       	adiw	r26, 0x09	; 9
    5544:	ed 91       	ld	r30, X+
    5546:	fc 91       	ld	r31, X
    5548:	1a 97       	sbiw	r26, 0x0a	; 10
    554a:	e2 82       	std	Z+2, r14	; 0x02
	dx->port->DIRSET = dirset;
    554c:	19 96       	adiw	r26, 0x09	; 9
    554e:	ed 91       	ld	r30, X+
    5550:	fc 91       	ld	r31, X
    5552:	1a 97       	sbiw	r26, 0x0a	; 10
    5554:	91 82       	std	Z+1, r9	; 0x01
	dx->port->OUTCLR = outclr;
    5556:	19 96       	adiw	r26, 0x09	; 9
    5558:	ed 91       	ld	r30, X+
    555a:	fc 91       	ld	r31, X
    555c:	1a 97       	sbiw	r26, 0x0a	; 10
    555e:	a6 82       	std	Z+6, r10	; 0x06
	dx->port->OUTSET = outset;
    5560:	19 96       	adiw	r26, 0x09	; 9
    5562:	ed 91       	ld	r30, X+
    5564:	fc 91       	ld	r31, X
    5566:	1a 97       	sbiw	r26, 0x0a	; 10
    5568:	85 82       	std	Z+5, r8	; 0x05
}
    556a:	cf 91       	pop	r28
    556c:	df 91       	pop	r29
    556e:	1f 91       	pop	r17
    5570:	0f 91       	pop	r16
    5572:	ff 90       	pop	r15
    5574:	ef 90       	pop	r14
    5576:	df 90       	pop	r13
    5578:	cf 90       	pop	r12
    557a:	bf 90       	pop	r11
    557c:	af 90       	pop	r10
    557e:	9f 90       	pop	r9
    5580:	8f 90       	pop	r8
    5582:	08 95       	ret

00005584 <xio_open_usb>:

#define USB ds[XIO_DEV_USB]			// device struct accessoor
#define USBu us[XIO_DEV_USB_OFFSET]	// usart extended struct accessor

/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
    5584:	80 91 05 25 	lds	r24, 0x2505
    5588:	90 91 06 25 	lds	r25, 0x2506
    558c:	08 95       	ret

0000558e <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)	//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    558e:	1f 92       	push	r1
    5590:	0f 92       	push	r0
    5592:	0f b6       	in	r0, 0x3f	; 63
    5594:	0f 92       	push	r0
    5596:	0b b6       	in	r0, 0x3b	; 59
    5598:	0f 92       	push	r0
    559a:	11 24       	eor	r1, r1
    559c:	8f 93       	push	r24
    559e:	9f 93       	push	r25
    55a0:	af 93       	push	r26
    55a2:	bf 93       	push	r27
    55a4:	ef 93       	push	r30
    55a6:	ff 93       	push	r31
	if (USBu.tx_buf_head == USBu.tx_buf_tail) {	// buffer empty - disable ints
    55a8:	90 91 b2 23 	lds	r25, 0x23B2
    55ac:	80 91 b1 23 	lds	r24, 0x23B1
    55b0:	98 17       	cp	r25, r24
    55b2:	39 f4       	brne	.+14     	; 0x55c2 <__vector_26+0x34>
		USBu.usart->CTRLA = CTRLA_RXON_TXOFF;	// won't work if you just &= it
    55b4:	e0 91 b4 23 	lds	r30, 0x23B4
    55b8:	f0 91 b5 23 	lds	r31, 0x23B5
    55bc:	80 e2       	ldi	r24, 0x20	; 32
    55be:	83 83       	std	Z+3, r24	; 0x03
    55c0:	1d c0       	rjmp	.+58     	; 0x55fc <__vector_26+0x6e>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(USB.flags)) {
    55c2:	80 91 f2 24 	lds	r24, 0x24F2
    55c6:	90 91 f3 24 	lds	r25, 0x24F3
    55ca:	93 fd       	sbrc	r25, 3
    55cc:	17 c0       	rjmp	.+46     	; 0x55fc <__vector_26+0x6e>
		if (--(USBu.tx_buf_tail) == 0) {		// advance tail and wrap 
    55ce:	80 91 b1 23 	lds	r24, 0x23B1
    55d2:	81 50       	subi	r24, 0x01	; 1
    55d4:	80 93 b1 23 	sts	0x23B1, r24
    55d8:	80 91 b1 23 	lds	r24, 0x23B1
    55dc:	88 23       	and	r24, r24
    55de:	19 f4       	brne	.+6      	; 0x55e6 <__vector_26+0x58>
			USBu.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one err (OBOE)
    55e0:	8f e3       	ldi	r24, 0x3F	; 63
    55e2:	80 93 b1 23 	sts	0x23B1, r24
		}
		USBu.usart->DATA = USBu.tx_buf[USBu.tx_buf_tail]; // write to TX DATA reg
    55e6:	e0 91 b4 23 	lds	r30, 0x23B4
    55ea:	f0 91 b5 23 	lds	r31, 0x23B5
    55ee:	a0 91 b1 23 	lds	r26, 0x23B1
    55f2:	b0 e0       	ldi	r27, 0x00	; 0
    55f4:	a8 50       	subi	r26, 0x08	; 8
    55f6:	bc 4d       	sbci	r27, 0xDC	; 220
    55f8:	8c 91       	ld	r24, X
    55fa:	80 83       	st	Z, r24
	}
}
    55fc:	ff 91       	pop	r31
    55fe:	ef 91       	pop	r30
    5600:	bf 91       	pop	r27
    5602:	af 91       	pop	r26
    5604:	9f 91       	pop	r25
    5606:	8f 91       	pop	r24
    5608:	0f 90       	pop	r0
    560a:	0b be       	out	0x3b, r0	; 59
    560c:	0f 90       	pop	r0
    560e:	0f be       	out	0x3f, r0	; 63
    5610:	0f 90       	pop	r0
    5612:	1f 90       	pop	r1
    5614:	18 95       	reti

00005616 <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    5616:	1f 92       	push	r1
    5618:	0f 92       	push	r0
    561a:	0f b6       	in	r0, 0x3f	; 63
    561c:	0f 92       	push	r0
    561e:	0b b6       	in	r0, 0x3b	; 59
    5620:	0f 92       	push	r0
    5622:	11 24       	eor	r1, r1
    5624:	2f 93       	push	r18
    5626:	3f 93       	push	r19
    5628:	4f 93       	push	r20
    562a:	5f 93       	push	r21
    562c:	6f 93       	push	r22
    562e:	7f 93       	push	r23
    5630:	8f 93       	push	r24
    5632:	9f 93       	push	r25
    5634:	af 93       	push	r26
    5636:	bf 93       	push	r27
    5638:	ef 93       	push	r30
    563a:	ff 93       	push	r31
	uint8_t c = USBu.usart->DATA;				// can only read DATA once
    563c:	e0 91 b4 23 	lds	r30, 0x23B4
    5640:	f0 91 b5 23 	lds	r31, 0x23B5
    5644:	20 81       	ld	r18, Z

	// trap signals - do not insert character into RX queue
	if (c == ETX) {								// trap ^c signal
    5646:	23 30       	cpi	r18, 0x03	; 3
    5648:	31 f4       	brne	.+12     	; 0x5656 <__vector_25+0x40>
		USB.sig = XIO_SIG_KILL;					// set signal value
    564a:	84 e0       	ldi	r24, 0x04	; 4
    564c:	80 93 f5 24 	sts	0x24F5, r24
		signal_etx();							// call app-specific signal handler
    5650:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <signal_etx>
    5654:	25 c0       	rjmp	.+74     	; 0x56a0 <__vector_25+0x8a>
		return;
	}

	// normal character path
	if ((--USBu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    5656:	80 91 b0 23 	lds	r24, 0x23B0
    565a:	81 50       	subi	r24, 0x01	; 1
    565c:	80 93 b0 23 	sts	0x23B0, r24
    5660:	80 91 b0 23 	lds	r24, 0x23B0
    5664:	88 23       	and	r24, r24
    5666:	19 f4       	brne	.+6      	; 0x566e <__vector_25+0x58>
		USBu.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    5668:	8f e3       	ldi	r24, 0x3F	; 63
    566a:	80 93 b0 23 	sts	0x23B0, r24
	}
	if (USBu.rx_buf_head != USBu.rx_buf_tail) {	// write char unless buffer full
    566e:	90 91 b0 23 	lds	r25, 0x23B0
    5672:	80 91 af 23 	lds	r24, 0x23AF
    5676:	98 17       	cp	r25, r24
    5678:	39 f0       	breq	.+14     	; 0x5688 <__vector_25+0x72>
		USBu.rx_buf[USBu.rx_buf_head] = c;
    567a:	e0 91 b0 23 	lds	r30, 0x23B0
    567e:	f0 e0       	ldi	r31, 0x00	; 0
    5680:	e8 54       	subi	r30, 0x48	; 72
    5682:	fc 4d       	sbci	r31, 0xDC	; 220
    5684:	20 83       	st	Z, r18
    5686:	0c c0       	rjmp	.+24     	; 0x56a0 <__vector_25+0x8a>
		return;
	}
	// buffer-full handling
	if ((++USBu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    5688:	80 91 b0 23 	lds	r24, 0x23B0
    568c:	8f 5f       	subi	r24, 0xFF	; 255
    568e:	80 93 b0 23 	sts	0x23B0, r24
    5692:	80 91 b0 23 	lds	r24, 0x23B0
    5696:	80 34       	cpi	r24, 0x40	; 64
    5698:	18 f0       	brcs	.+6      	; 0x56a0 <__vector_25+0x8a>
		USBu.rx_buf_head = 1;
    569a:	81 e0       	ldi	r24, 0x01	; 1
    569c:	80 93 b0 23 	sts	0x23B0, r24
	}
	// activate flow control here or before it gets to this level
}
    56a0:	ff 91       	pop	r31
    56a2:	ef 91       	pop	r30
    56a4:	bf 91       	pop	r27
    56a6:	af 91       	pop	r26
    56a8:	9f 91       	pop	r25
    56aa:	8f 91       	pop	r24
    56ac:	7f 91       	pop	r23
    56ae:	6f 91       	pop	r22
    56b0:	5f 91       	pop	r21
    56b2:	4f 91       	pop	r20
    56b4:	3f 91       	pop	r19
    56b6:	2f 91       	pop	r18
    56b8:	0f 90       	pop	r0
    56ba:	0b be       	out	0x3b, r0	; 59
    56bc:	0f 90       	pop	r0
    56be:	0f be       	out	0x3f, r0	; 63
    56c0:	0f 90       	pop	r0
    56c2:	1f 90       	pop	r1
    56c4:	18 95       	reti

000056c6 <xio_init_usb>:
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
void xio_queue_RX_string_usb(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_USB, buf);}

void xio_init_usb()	// USB inits
{
    56c6:	8f 92       	push	r8
    56c8:	af 92       	push	r10
    56ca:	cf 92       	push	r12
    56cc:	ef 92       	push	r14
    56ce:	ff 92       	push	r15
    56d0:	0f 93       	push	r16
    56d2:	1f 93       	push	r17
	xio_init_dev(XIO_DEV_USB, xio_open_usb, xio_setflags_usb, xio_putc_usb, xio_getc_usb, xio_readln_usb);
    56d4:	81 e0       	ldi	r24, 0x01	; 1
    56d6:	62 ec       	ldi	r22, 0xC2	; 194
    56d8:	7a e2       	ldi	r23, 0x2A	; 42
    56da:	4f ea       	ldi	r20, 0xAF	; 175
    56dc:	5b e2       	ldi	r21, 0x2B	; 43
    56de:	28 ea       	ldi	r18, 0xA8	; 168
    56e0:	3b e2       	ldi	r19, 0x2B	; 43
    56e2:	03 ea       	ldi	r16, 0xA3	; 163
    56e4:	1b e2       	ldi	r17, 0x2B	; 43
    56e6:	fc e9       	ldi	r31, 0x9C	; 156
    56e8:	ef 2e       	mov	r14, r31
    56ea:	fb e2       	ldi	r31, 0x2B	; 43
    56ec:	ff 2e       	mov	r15, r31
    56ee:	0e 94 72 20 	call	0x40e4	; 0x40e4 <xio_init_dev>
	xio_init_usart(XIO_DEV_USB, XIO_DEV_USB_OFFSET, USB_INIT_bm, &USB_USART, &USB_PORT, USB_DIRCLR_bm, USB_DIRSET_bm, USB_OUTCLR_bm, USB_OUTSET_bm);
    56f2:	81 e0       	ldi	r24, 0x01	; 1
    56f4:	61 e0       	ldi	r22, 0x01	; 1
    56f6:	45 e7       	ldi	r20, 0x75	; 117
    56f8:	55 e5       	ldi	r21, 0x55	; 85
    56fa:	20 ea       	ldi	r18, 0xA0	; 160
    56fc:	38 e0       	ldi	r19, 0x08	; 8
    56fe:	00 e4       	ldi	r16, 0x40	; 64
    5700:	16 e0       	ldi	r17, 0x06	; 6
    5702:	e5 e0       	ldi	r30, 0x05	; 5
    5704:	ee 2e       	mov	r14, r30
    5706:	7a e0       	ldi	r23, 0x0A	; 10
    5708:	c7 2e       	mov	r12, r23
    570a:	aa 24       	eor	r10, r10
    570c:	9a e0       	ldi	r25, 0x0A	; 10
    570e:	89 2e       	mov	r8, r25
    5710:	0e 94 2d 2a 	call	0x545a	; 0x545a <xio_init_usart>
}
    5714:	1f 91       	pop	r17
    5716:	0f 91       	pop	r16
    5718:	ff 90       	pop	r15
    571a:	ef 90       	pop	r14
    571c:	cf 90       	pop	r12
    571e:	af 90       	pop	r10
    5720:	8f 90       	pop	r8
    5722:	08 95       	ret

00005724 <xio_queue_RX_string_usb>:
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
void xio_queue_RX_string_usb(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_USB, buf);}
    5724:	bc 01       	movw	r22, r24
    5726:	81 e0       	ldi	r24, 0x01	; 1
    5728:	0e 94 16 2a 	call	0x542c	; 0x542c <xio_queue_RX_string_usart>
    572c:	08 95       	ret

0000572e <xio_queue_RX_char_usb>:
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
    572e:	68 2f       	mov	r22, r24
    5730:	81 e0       	ldi	r24, 0x01	; 1
    5732:	0e 94 e6 29 	call	0x53cc	; 0x53cc <xio_queue_RX_char_usart>
    5736:	08 95       	ret

00005738 <xio_readln_usb>:
/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
    5738:	9c 01       	movw	r18, r24
    573a:	46 2f       	mov	r20, r22
    573c:	81 e0       	ldi	r24, 0x01	; 1
    573e:	b9 01       	movw	r22, r18
    5740:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <xio_readln_usart>
    5744:	08 95       	ret

00005746 <xio_getc_usb>:

/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
    5746:	bc 01       	movw	r22, r24
    5748:	81 e0       	ldi	r24, 0x01	; 1
    574a:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <xio_getc_usart>
    574e:	08 95       	ret

00005750 <xio_putc_usb>:
#define USBu us[XIO_DEV_USB_OFFSET]	// usart extended struct accessor

/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
    5750:	98 2f       	mov	r25, r24
    5752:	ab 01       	movw	r20, r22
    5754:	81 e0       	ldi	r24, 0x01	; 1
    5756:	69 2f       	mov	r22, r25
    5758:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <xio_putc_usart>
    575c:	08 95       	ret

0000575e <xio_setflags_usb>:
#define USB ds[XIO_DEV_USB]			// device struct accessoor
#define USBu us[XIO_DEV_USB_OFFSET]	// usart extended struct accessor

/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
    575e:	bc 01       	movw	r22, r24
    5760:	81 e0       	ldi	r24, 0x01	; 1
    5762:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <xio_setflags>
    5766:	08 95       	ret

00005768 <xio_open_rs485>:

#define RS ds[XIO_DEV_RS485]			// device struct accessoor
#define RSu us[XIO_DEV_RS485_OFFSET]	// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
    5768:	80 91 ee 24 	lds	r24, 0x24EE
    576c:	90 91 ef 24 	lds	r25, 0x24EF
    5770:	08 95       	ret

00005772 <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC1 data register empty
{
    5772:	1f 92       	push	r1
    5774:	0f 92       	push	r0
    5776:	0f b6       	in	r0, 0x3f	; 63
    5778:	0f 92       	push	r0
    577a:	0b b6       	in	r0, 0x3b	; 59
    577c:	0f 92       	push	r0
    577e:	11 24       	eor	r1, r1
    5780:	8f 93       	push	r24
    5782:	9f 93       	push	r25
    5784:	af 93       	push	r26
    5786:	bf 93       	push	r27
    5788:	ef 93       	push	r30
    578a:	ff 93       	push	r31
	if (RSu.tx_buf_head == RSu.tx_buf_tail) {	// buffer empty - disable ints (Note)
    578c:	90 91 27 23 	lds	r25, 0x2327
    5790:	80 91 26 23 	lds	r24, 0x2326
    5794:	98 17       	cp	r25, r24
    5796:	39 f4       	brne	.+14     	; 0x57a6 <__vector_29+0x34>
		RSu.usart->CTRLA = CTRLA_RXON_TXOFF_TXCON;	// doesn't work if you just &= it
    5798:	e0 91 29 23 	lds	r30, 0x2329
    579c:	f0 91 2a 23 	lds	r31, 0x232A
    57a0:	84 e2       	ldi	r24, 0x24	; 36
    57a2:	83 83       	std	Z+3, r24	; 0x03
    57a4:	23 c0       	rjmp	.+70     	; 0x57ec <__vector_29+0x7a>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(RS.flags)) {
    57a6:	80 91 db 24 	lds	r24, 0x24DB
    57aa:	90 91 dc 24 	lds	r25, 0x24DC
    57ae:	93 fd       	sbrc	r25, 3
    57b0:	1d c0       	rjmp	.+58     	; 0x57ec <__vector_29+0x7a>
		if (--(RSu.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    57b2:	80 91 26 23 	lds	r24, 0x2326
    57b6:	81 50       	subi	r24, 0x01	; 1
    57b8:	80 93 26 23 	sts	0x2326, r24
    57bc:	80 91 26 23 	lds	r24, 0x2326
    57c0:	88 23       	and	r24, r24
    57c2:	19 f4       	brne	.+6      	; 0x57ca <__vector_29+0x58>
			RSu.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    57c4:	8f e3       	ldi	r24, 0x3F	; 63
    57c6:	80 93 26 23 	sts	0x2326, r24
		}
		RSu.port->OUTSET = (RS485_DE_bm | RS485_RE_bm);	// enable DE (TX, active hi)
    57ca:	e0 91 2b 23 	lds	r30, 0x232B
    57ce:	f0 91 2c 23 	lds	r31, 0x232C
    57d2:	80 e3       	ldi	r24, 0x30	; 48
    57d4:	85 83       	std	Z+5, r24	; 0x05
														// disable RE (RX, active lo)
		RSu.usart->DATA = RSu.tx_buf[RSu.tx_buf_tail];	// write char to TX DATA reg
    57d6:	a0 91 29 23 	lds	r26, 0x2329
    57da:	b0 91 2a 23 	lds	r27, 0x232A
    57de:	e0 91 26 23 	lds	r30, 0x2326
    57e2:	f0 e0       	ldi	r31, 0x00	; 0
    57e4:	e3 59       	subi	r30, 0x93	; 147
    57e6:	fc 4d       	sbci	r31, 0xDC	; 220
    57e8:	80 81       	ld	r24, Z
    57ea:	8c 93       	st	X, r24
	}
}
    57ec:	ff 91       	pop	r31
    57ee:	ef 91       	pop	r30
    57f0:	bf 91       	pop	r27
    57f2:	af 91       	pop	r26
    57f4:	9f 91       	pop	r25
    57f6:	8f 91       	pop	r24
    57f8:	0f 90       	pop	r0
    57fa:	0b be       	out	0x3b, r0	; 59
    57fc:	0f 90       	pop	r0
    57fe:	0f be       	out	0x3f, r0	; 63
    5800:	0f 90       	pop	r0
    5802:	1f 90       	pop	r1
    5804:	18 95       	reti

00005806 <__vector_30>:

/* Note: Finding a buffer empty condition on the first byte of a string is common 
 * as the TX byte is often written by the task itself */

ISR(RS485_TXC_ISR_vect)		// ISR(USARTC1_TXC_vect) // USARTC1 transmission complete
{
    5806:	1f 92       	push	r1
    5808:	0f 92       	push	r0
    580a:	0f b6       	in	r0, 0x3f	; 63
    580c:	0f 92       	push	r0
    580e:	0b b6       	in	r0, 0x3b	; 59
    5810:	0f 92       	push	r0
    5812:	11 24       	eor	r1, r1
    5814:	8f 93       	push	r24
    5816:	ef 93       	push	r30
    5818:	ff 93       	push	r31
//	_delay_us(10);
	RSu.port->OUTCLR = (RS485_DE_bm | RS485_RE_bm);	// disable DE (TX), enable RE (RX)
    581a:	e0 91 2b 23 	lds	r30, 0x232B
    581e:	f0 91 2c 23 	lds	r31, 0x232C
    5822:	80 e3       	ldi	r24, 0x30	; 48
    5824:	86 83       	std	Z+6, r24	; 0x06
}
    5826:	ff 91       	pop	r31
    5828:	ef 91       	pop	r30
    582a:	8f 91       	pop	r24
    582c:	0f 90       	pop	r0
    582e:	0b be       	out	0x3b, r0	; 59
    5830:	0f 90       	pop	r0
    5832:	0f be       	out	0x3f, r0	; 63
    5834:	0f 90       	pop	r0
    5836:	1f 90       	pop	r1
    5838:	18 95       	reti

0000583a <__vector_28>:
/* 
 * RS485_RX_ISR - RS485 receiver interrupt (RX)
 */

ISR(RS485_RX_ISR_vect)	//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    583a:	1f 92       	push	r1
    583c:	0f 92       	push	r0
    583e:	0f b6       	in	r0, 0x3f	; 63
    5840:	0f 92       	push	r0
    5842:	0b b6       	in	r0, 0x3b	; 59
    5844:	0f 92       	push	r0
    5846:	11 24       	eor	r1, r1
    5848:	2f 93       	push	r18
    584a:	3f 93       	push	r19
    584c:	4f 93       	push	r20
    584e:	5f 93       	push	r21
    5850:	6f 93       	push	r22
    5852:	7f 93       	push	r23
    5854:	8f 93       	push	r24
    5856:	9f 93       	push	r25
    5858:	af 93       	push	r26
    585a:	bf 93       	push	r27
    585c:	ef 93       	push	r30
    585e:	ff 93       	push	r31
	uint8_t c = RSu.usart->DATA;				// can only read DATA once
    5860:	e0 91 29 23 	lds	r30, 0x2329
    5864:	f0 91 2a 23 	lds	r31, 0x232A
    5868:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    586a:	23 30       	cpi	r18, 0x03	; 3
    586c:	31 f4       	brne	.+12     	; 0x587a <__vector_28+0x40>
		RS.sig = XIO_SIG_KILL;					// set signal value
    586e:	84 e0       	ldi	r24, 0x04	; 4
    5870:	80 93 de 24 	sts	0x24DE, r24
		signal_etx();							// call app-specific signal handler
    5874:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <signal_etx>
    5878:	25 c0       	rjmp	.+74     	; 0x58c4 <__vector_28+0x8a>
		return;
	}

	// normal path
	if ((--RSu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    587a:	80 91 25 23 	lds	r24, 0x2325
    587e:	81 50       	subi	r24, 0x01	; 1
    5880:	80 93 25 23 	sts	0x2325, r24
    5884:	80 91 25 23 	lds	r24, 0x2325
    5888:	88 23       	and	r24, r24
    588a:	19 f4       	brne	.+6      	; 0x5892 <__vector_28+0x58>
		RSu.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    588c:	8f e3       	ldi	r24, 0x3F	; 63
    588e:	80 93 25 23 	sts	0x2325, r24
	}
	if (RSu.rx_buf_head != RSu.rx_buf_tail) {	// write char unless buffer full
    5892:	90 91 25 23 	lds	r25, 0x2325
    5896:	80 91 24 23 	lds	r24, 0x2324
    589a:	98 17       	cp	r25, r24
    589c:	39 f0       	breq	.+14     	; 0x58ac <__vector_28+0x72>
		RSu.rx_buf[RSu.rx_buf_head] = c;		// (= USARTC1.DATA;)
    589e:	e0 91 25 23 	lds	r30, 0x2325
    58a2:	f0 e0       	ldi	r31, 0x00	; 0
    58a4:	ee 5d       	subi	r30, 0xDE	; 222
    58a6:	fc 4d       	sbci	r31, 0xDC	; 220
    58a8:	23 87       	std	Z+11, r18	; 0x0b
    58aa:	0c c0       	rjmp	.+24     	; 0x58c4 <__vector_28+0x8a>
		return;
	}
	// buffer-full handling
	if ((++RSu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    58ac:	80 91 25 23 	lds	r24, 0x2325
    58b0:	8f 5f       	subi	r24, 0xFF	; 255
    58b2:	80 93 25 23 	sts	0x2325, r24
    58b6:	80 91 25 23 	lds	r24, 0x2325
    58ba:	80 34       	cpi	r24, 0x40	; 64
    58bc:	18 f0       	brcs	.+6      	; 0x58c4 <__vector_28+0x8a>
		RSu.rx_buf_head = 1;
    58be:	81 e0       	ldi	r24, 0x01	; 1
    58c0:	80 93 25 23 	sts	0x2325, r24
	}
	// activate flow control here or before it gets to this level
}
    58c4:	ff 91       	pop	r31
    58c6:	ef 91       	pop	r30
    58c8:	bf 91       	pop	r27
    58ca:	af 91       	pop	r26
    58cc:	9f 91       	pop	r25
    58ce:	8f 91       	pop	r24
    58d0:	7f 91       	pop	r23
    58d2:	6f 91       	pop	r22
    58d4:	5f 91       	pop	r21
    58d6:	4f 91       	pop	r20
    58d8:	3f 91       	pop	r19
    58da:	2f 91       	pop	r18
    58dc:	0f 90       	pop	r0
    58de:	0b be       	out	0x3b, r0	; 59
    58e0:	0f 90       	pop	r0
    58e2:	0f be       	out	0x3f, r0	; 63
    58e4:	0f 90       	pop	r0
    58e6:	1f 90       	pop	r1
    58e8:	18 95       	reti

000058ea <xio_init_rs485>:
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
void xio_queue_RX_string_rs485(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_RS485, buf);}

void xio_init_rs485()	// RS485 init
{
    58ea:	8f 92       	push	r8
    58ec:	af 92       	push	r10
    58ee:	cf 92       	push	r12
    58f0:	ef 92       	push	r14
    58f2:	ff 92       	push	r15
    58f4:	0f 93       	push	r16
    58f6:	1f 93       	push	r17
	xio_init_dev(XIO_DEV_RS485, xio_open_rs485, xio_setflags_rs485, xio_putc_rs485, xio_getc_rs485, xio_readln_rs485);
    58f8:	80 e0       	ldi	r24, 0x00	; 0
    58fa:	64 eb       	ldi	r22, 0xB4	; 180
    58fc:	7b e2       	ldi	r23, 0x2B	; 43
    58fe:	42 ec       	ldi	r20, 0xC2	; 194
    5900:	5c e2       	ldi	r21, 0x2C	; 44
    5902:	2b eb       	ldi	r18, 0xBB	; 187
    5904:	3c e2       	ldi	r19, 0x2C	; 44
    5906:	06 eb       	ldi	r16, 0xB6	; 182
    5908:	1c e2       	ldi	r17, 0x2C	; 44
    590a:	af ea       	ldi	r26, 0xAF	; 175
    590c:	ea 2e       	mov	r14, r26
    590e:	ac e2       	ldi	r26, 0x2C	; 44
    5910:	fa 2e       	mov	r15, r26
    5912:	0e 94 72 20 	call	0x40e4	; 0x40e4 <xio_init_dev>
	xio_init_usart(XIO_DEV_RS485, XIO_DEV_RS485_OFFSET, RS485_INIT_bm, &RS485_USART, &RS485_PORT, RS485_DIRCLR_bm, RS485_DIRSET_bm, RS485_OUTCLR_bm, RS485_OUTSET_bm);
    5916:	80 e0       	ldi	r24, 0x00	; 0
    5918:	60 e0       	ldi	r22, 0x00	; 0
    591a:	45 e7       	ldi	r20, 0x75	; 117
    591c:	50 e1       	ldi	r21, 0x10	; 16
    591e:	20 eb       	ldi	r18, 0xB0	; 176
    5920:	38 e0       	ldi	r19, 0x08	; 8
    5922:	00 e4       	ldi	r16, 0x40	; 64
    5924:	16 e0       	ldi	r17, 0x06	; 6
    5926:	f0 e4       	ldi	r31, 0x40	; 64
    5928:	ef 2e       	mov	r14, r31
    592a:	e0 eb       	ldi	r30, 0xB0	; 176
    592c:	ce 2e       	mov	r12, r30
    592e:	70 e3       	ldi	r23, 0x30	; 48
    5930:	a7 2e       	mov	r10, r23
    5932:	90 e8       	ldi	r25, 0x80	; 128
    5934:	89 2e       	mov	r8, r25
    5936:	0e 94 2d 2a 	call	0x545a	; 0x545a <xio_init_usart>
}
    593a:	1f 91       	pop	r17
    593c:	0f 91       	pop	r16
    593e:	ff 90       	pop	r15
    5940:	ef 90       	pop	r14
    5942:	cf 90       	pop	r12
    5944:	af 90       	pop	r10
    5946:	8f 90       	pop	r8
    5948:	08 95       	ret

0000594a <xio_queue_RX_string_rs485>:
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
void xio_queue_RX_string_rs485(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_RS485, buf);}
    594a:	bc 01       	movw	r22, r24
    594c:	80 e0       	ldi	r24, 0x00	; 0
    594e:	0e 94 16 2a 	call	0x542c	; 0x542c <xio_queue_RX_string_usart>
    5952:	08 95       	ret

00005954 <xio_queue_RX_char_rs485>:
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
    5954:	68 2f       	mov	r22, r24
    5956:	80 e0       	ldi	r24, 0x00	; 0
    5958:	0e 94 e6 29 	call	0x53cc	; 0x53cc <xio_queue_RX_char_usart>
    595c:	08 95       	ret

0000595e <xio_readln_rs485>:
/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
    595e:	9c 01       	movw	r18, r24
    5960:	46 2f       	mov	r20, r22
    5962:	80 e0       	ldi	r24, 0x00	; 0
    5964:	b9 01       	movw	r22, r18
    5966:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <xio_readln_usart>
    596a:	08 95       	ret

0000596c <xio_getc_rs485>:

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
    596c:	bc 01       	movw	r22, r24
    596e:	80 e0       	ldi	r24, 0x00	; 0
    5970:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <xio_getc_usart>
    5974:	08 95       	ret

00005976 <xio_putc_rs485>:
#define RSu us[XIO_DEV_RS485_OFFSET]	// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
    5976:	98 2f       	mov	r25, r24
    5978:	ab 01       	movw	r20, r22
    597a:	80 e0       	ldi	r24, 0x00	; 0
    597c:	69 2f       	mov	r22, r25
    597e:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <xio_putc_usart>
    5982:	08 95       	ret

00005984 <xio_setflags_rs485>:
#define RS ds[XIO_DEV_RS485]			// device struct accessoor
#define RSu us[XIO_DEV_RS485_OFFSET]	// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
    5984:	bc 01       	movw	r22, r24
    5986:	80 e0       	ldi	r24, 0x00	; 0
    5988:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <xio_setflags>
    598c:	08 95       	ret

0000598e <xio_open_pgm>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

struct __file * xio_open_pgm(const prog_char *addr)
{
	PGM.flags &= XIO_FLAG_RESET_gm;			// reset flag signaling bits
    598e:	20 91 20 25 	lds	r18, 0x2520
    5992:	30 91 21 25 	lds	r19, 0x2521
    5996:	3f 70       	andi	r19, 0x0F	; 15
    5998:	20 93 20 25 	sts	0x2520, r18
    599c:	30 93 21 25 	sts	0x2521, r19
	PGM.sig = 0;							// reset signal
    59a0:	10 92 23 25 	sts	0x2523, r1
	PGMf.pgmbase_P = (PROGMEM char *)addr;	// might want to range check this
    59a4:	80 93 c9 24 	sts	0x24C9, r24
    59a8:	90 93 ca 24 	sts	0x24CA, r25
	PGMf.len = 0;							// initialize buffer pointer
    59ac:	10 92 c5 24 	sts	0x24C5, r1
    59b0:	10 92 c6 24 	sts	0x24C6, r1
    59b4:	10 92 c7 24 	sts	0x24C7, r1
    59b8:	10 92 c8 24 	sts	0x24C8, r1
	return(PGM.fdev);							// return pointer to the fdev stream
}
    59bc:	80 91 33 25 	lds	r24, 0x2533
    59c0:	90 91 34 25 	lds	r25, 0x2534
    59c4:	08 95       	ret

000059c6 <xio_putc_pgm>:
 */

int xio_putc_pgm(const char c, struct __file *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    59c6:	8f ef       	ldi	r24, 0xFF	; 255
    59c8:	9f ef       	ldi	r25, 0xFF	; 255
    59ca:	08 95       	ret

000059cc <xio_readln_pgm>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_pgm(char *buf, const uint8_t size)
{
    59cc:	9c 01       	movw	r18, r24
	if (!(PGMf.pgmbase_P)) {					// return error if no file is open
    59ce:	80 91 c9 24 	lds	r24, 0x24C9
    59d2:	90 91 ca 24 	lds	r25, 0x24CA
    59d6:	89 2b       	or	r24, r25
    59d8:	19 f4       	brne	.+6      	; 0x59e0 <xio_readln_pgm+0x14>
    59da:	26 e0       	ldi	r18, 0x06	; 6
    59dc:	30 e0       	ldi	r19, 0x00	; 0
    59de:	1b c0       	rjmp	.+54     	; 0x5a16 <xio_readln_pgm+0x4a>
		return (XIO_FILE_NOT_OPEN);
	}
	PGM.sig = XIO_SIG_OK;						// initialize signal
    59e0:	10 92 23 25 	sts	0x2523, r1
	if (fgets(buf, size, PGM.fdev) == NULL) {
    59e4:	40 91 33 25 	lds	r20, 0x2533
    59e8:	50 91 34 25 	lds	r21, 0x2534
    59ec:	c9 01       	movw	r24, r18
    59ee:	70 e0       	ldi	r23, 0x00	; 0
    59f0:	0e 94 39 40 	call	0x8072	; 0x8072 <fgets>
    59f4:	89 2b       	or	r24, r25
    59f6:	19 f0       	breq	.+6      	; 0x59fe <xio_readln_pgm+0x32>
    59f8:	20 e0       	ldi	r18, 0x00	; 0
    59fa:	30 e0       	ldi	r19, 0x00	; 0
    59fc:	0c c0       	rjmp	.+24     	; 0x5a16 <xio_readln_pgm+0x4a>
		PGMf.pgmbase_P = NULL;
    59fe:	10 92 c9 24 	sts	0x24C9, r1
    5a02:	10 92 ca 24 	sts	0x24CA, r1
		clearerr(PGM.fdev);
    5a06:	80 91 33 25 	lds	r24, 0x2533
    5a0a:	90 91 34 25 	lds	r25, 0x2534
    5a0e:	0e 94 34 40 	call	0x8068	; 0x8068 <clearerr>
    5a12:	25 e0       	ldi	r18, 0x05	; 5
    5a14:	30 e0       	ldi	r19, 0x00	; 0
		return (XIO_EOF);
	}
	return (XIO_OK);
}
    5a16:	c9 01       	movw	r24, r18
    5a18:	08 95       	ret

00005a1a <xio_getc_pgm>:
 */

int xio_getc_pgm(struct __file *stream)
{

	if (PGM.flags & XIO_FLAG_EOF_bm) {
    5a1a:	20 91 20 25 	lds	r18, 0x2520
    5a1e:	30 91 21 25 	lds	r19, 0x2521
    5a22:	35 ff       	sbrs	r19, 5
    5a24:	06 c0       	rjmp	.+12     	; 0x5a32 <xio_getc_pgm+0x18>
		PGM.sig = XIO_SIG_EOF;
    5a26:	83 e0       	ldi	r24, 0x03	; 3
    5a28:	80 93 23 25 	sts	0x2523, r24
    5a2c:	2e ef       	ldi	r18, 0xFE	; 254
    5a2e:	3f ef       	ldi	r19, 0xFF	; 255
    5a30:	48 c0       	rjmp	.+144    	; 0x5ac2 <xio_getc_pgm+0xa8>
		return (_FDEV_EOF);
	}
	if ((PGM.c = pgm_read_byte(&PGMf.pgmbase_P[PGMf.len])) == NUL) {
    5a32:	80 91 c5 24 	lds	r24, 0x24C5
    5a36:	90 91 c6 24 	lds	r25, 0x24C6
    5a3a:	a0 91 c7 24 	lds	r26, 0x24C7
    5a3e:	b0 91 c8 24 	lds	r27, 0x24C8
    5a42:	e0 91 c9 24 	lds	r30, 0x24C9
    5a46:	f0 91 ca 24 	lds	r31, 0x24CA
    5a4a:	e8 0f       	add	r30, r24
    5a4c:	f9 1f       	adc	r31, r25
    5a4e:	e4 91       	lpm	r30, Z+
    5a50:	e0 93 24 25 	sts	0x2524, r30
    5a54:	ee 23       	and	r30, r30
    5a56:	29 f4       	brne	.+10     	; 0x5a62 <xio_getc_pgm+0x48>
		PGM.flags |= XIO_FLAG_EOF_bm;
    5a58:	30 62       	ori	r19, 0x20	; 32
    5a5a:	20 93 20 25 	sts	0x2520, r18
    5a5e:	30 93 21 25 	sts	0x2521, r19
	}
	++PGMf.len;
    5a62:	01 96       	adiw	r24, 0x01	; 1
    5a64:	a1 1d       	adc	r26, r1
    5a66:	b1 1d       	adc	r27, r1
    5a68:	80 93 c5 24 	sts	0x24C5, r24
    5a6c:	90 93 c6 24 	sts	0x24C6, r25
    5a70:	a0 93 c7 24 	sts	0x24C7, r26
    5a74:	b0 93 c8 24 	sts	0x24C8, r27
	if (!LINEMODE(PGM.flags)) {			// processing is simple if not LINEMODE
    5a78:	90 91 20 25 	lds	r25, 0x2520
    5a7c:	96 fd       	sbrc	r25, 6
    5a7e:	03 c0       	rjmp	.+6      	; 0x5a86 <xio_getc_pgm+0x6c>
		if (ECHO(PGM.flags)) {
    5a80:	94 ff       	sbrs	r25, 4
    5a82:	1b c0       	rjmp	.+54     	; 0x5aba <xio_getc_pgm+0xa0>
    5a84:	11 c0       	rjmp	.+34     	; 0x5aa8 <xio_getc_pgm+0x8e>
			putchar(PGM.c);
		}
		return (PGM.c);
	}
	// now do the LINEMODE stuff
	if (PGM.c == NUL) {					// perform newline substitutions
    5a86:	80 91 24 25 	lds	r24, 0x2524
    5a8a:	88 23       	and	r24, r24
    5a8c:	31 f0       	breq	.+12     	; 0x5a9a <xio_getc_pgm+0x80>
		PGM.c = '\n';
	} else if (PGM.c == '\r') {
    5a8e:	8d 30       	cpi	r24, 0x0D	; 13
    5a90:	21 f0       	breq	.+8      	; 0x5a9a <xio_getc_pgm+0x80>
		PGM.c = '\n';
	} else if ((SEMICOLONS(PGM.flags)) && (PGM.c == ';')) {
    5a92:	97 ff       	sbrs	r25, 7
    5a94:	05 c0       	rjmp	.+10     	; 0x5aa0 <xio_getc_pgm+0x86>
    5a96:	8b 33       	cpi	r24, 0x3B	; 59
    5a98:	19 f4       	brne	.+6      	; 0x5aa0 <xio_getc_pgm+0x86>
		PGM.c = '\n';
    5a9a:	8a e0       	ldi	r24, 0x0A	; 10
    5a9c:	80 93 24 25 	sts	0x2524, r24
	}
	if (ECHO(PGM.flags)) {
    5aa0:	80 91 20 25 	lds	r24, 0x2520
    5aa4:	84 ff       	sbrs	r24, 4
    5aa6:	09 c0       	rjmp	.+18     	; 0x5aba <xio_getc_pgm+0xa0>
		putchar(PGM.c);
    5aa8:	60 91 73 26 	lds	r22, 0x2673
    5aac:	70 91 74 26 	lds	r23, 0x2674
    5ab0:	80 91 24 25 	lds	r24, 0x2524
    5ab4:	90 e0       	ldi	r25, 0x00	; 0
    5ab6:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
	}
	return (PGM.c);
    5aba:	80 91 24 25 	lds	r24, 0x2524
    5abe:	28 2f       	mov	r18, r24
    5ac0:	30 e0       	ldi	r19, 0x00	; 0
}
    5ac2:	c9 01       	movw	r24, r18
    5ac4:	08 95       	ret

00005ac6 <xio_setflags_pgm>:
/*
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
    5ac6:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_PGM, control);
    5ac8:	83 e0       	ldi	r24, 0x03	; 3
    5aca:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <xio_setflags>
	return (XIO_OK);									// for now it's always OK
}
    5ace:	80 e0       	ldi	r24, 0x00	; 0
    5ad0:	90 e0       	ldi	r25, 0x00	; 0
    5ad2:	08 95       	ret

00005ad4 <xio_init_file>:
 *	xio_init_file() - generic init for file devices
 */
void xio_init_file(const uint8_t dev, const uint8_t offset, const uint16_t control)
{
	// bind file struct to extended device parameters
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
    5ad4:	90 e0       	ldi	r25, 0x00	; 0
    5ad6:	27 e1       	ldi	r18, 0x17	; 23
    5ad8:	30 e0       	ldi	r19, 0x00	; 0
    5ada:	82 9f       	mul	r24, r18
    5adc:	f0 01       	movw	r30, r0
    5ade:	83 9f       	mul	r24, r19
    5ae0:	f0 0d       	add	r31, r0
    5ae2:	92 9f       	mul	r25, r18
    5ae4:	f0 0d       	add	r31, r0
    5ae6:	11 24       	eor	r1, r1
    5ae8:	e5 52       	subi	r30, 0x25	; 37
    5aea:	fb 4d       	sbci	r31, 0xDB	; 219
    5aec:	70 e0       	ldi	r23, 0x00	; 0
    5aee:	83 e0       	ldi	r24, 0x03	; 3
    5af0:	66 0f       	add	r22, r22
    5af2:	77 1f       	adc	r23, r23
    5af4:	8a 95       	dec	r24
    5af6:	e1 f7       	brne	.-8      	; 0x5af0 <xio_init_file+0x1c>
    5af8:	6d 53       	subi	r22, 0x3D	; 61
    5afa:	7b 4d       	sbci	r23, 0xDB	; 219
    5afc:	61 8b       	std	Z+17, r22	; 0x11
    5afe:	72 8b       	std	Z+18, r23	; 0x12
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
	xio_setflags(XIO_DEV_PGM, control);
    5b00:	83 e0       	ldi	r24, 0x03	; 3
    5b02:	ba 01       	movw	r22, r20
    5b04:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <xio_setflags>
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
	// might be useful to sanity check the control bits before calling set flags
	//	- RD and BLOCK are mandatory
	// 	- WR and NOBLOCK are restricted
	xio_setflags_pgm(control);
}
    5b08:	08 95       	ret

00005b0a <xio_init_pgm>:

/* 
 *	xio_init_pgm() - initialize and set controls for program memory device 
 */
void xio_init_pgm()
{
    5b0a:	ef 92       	push	r14
    5b0c:	ff 92       	push	r15
    5b0e:	0f 93       	push	r16
    5b10:	1f 93       	push	r17
	// Program memory file device setup
	xio_init_dev(XIO_DEV_PGM, xio_open_pgm, xio_setflags_pgm, xio_putc_pgm, xio_getc_pgm, xio_readln_pgm);
    5b12:	83 e0       	ldi	r24, 0x03	; 3
    5b14:	67 ec       	ldi	r22, 0xC7	; 199
    5b16:	7c e2       	ldi	r23, 0x2C	; 44
    5b18:	43 e6       	ldi	r20, 0x63	; 99
    5b1a:	5d e2       	ldi	r21, 0x2D	; 45
    5b1c:	23 ee       	ldi	r18, 0xE3	; 227
    5b1e:	3c e2       	ldi	r19, 0x2C	; 44
    5b20:	0d e0       	ldi	r16, 0x0D	; 13
    5b22:	1d e2       	ldi	r17, 0x2D	; 45
    5b24:	96 ee       	ldi	r25, 0xE6	; 230
    5b26:	e9 2e       	mov	r14, r25
    5b28:	9c e2       	ldi	r25, 0x2C	; 44
    5b2a:	f9 2e       	mov	r15, r25
    5b2c:	0e 94 72 20 	call	0x40e4	; 0x40e4 <xio_init_dev>
 *	xio_init_file() - generic init for file devices
 */
void xio_init_file(const uint8_t dev, const uint8_t offset, const uint16_t control)
{
	// bind file struct to extended device parameters
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
    5b30:	83 ec       	ldi	r24, 0xC3	; 195
    5b32:	94 e2       	ldi	r25, 0x24	; 36
    5b34:	80 93 31 25 	sts	0x2531, r24
    5b38:	90 93 32 25 	sts	0x2532, r25
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
	xio_setflags(XIO_DEV_PGM, control);
    5b3c:	83 e0       	ldi	r24, 0x03	; 3
    5b3e:	60 e5       	ldi	r22, 0x50	; 80
    5b40:	75 e1       	ldi	r23, 0x15	; 21
    5b42:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <xio_setflags>
void xio_init_pgm()
{
	// Program memory file device setup
	xio_init_dev(XIO_DEV_PGM, xio_open_pgm, xio_setflags_pgm, xio_putc_pgm, xio_getc_pgm, xio_readln_pgm);
	xio_init_file(XIO_DEV_PGM, XIO_DEV_PGM_OFFSET, PGM_INIT_bm);
}
    5b46:	1f 91       	pop	r17
    5b48:	0f 91       	pop	r16
    5b4a:	ff 90       	pop	r15
    5b4c:	ef 90       	pop	r14
    5b4e:	08 95       	ret

00005b50 <net_init>:
 */

void net_init() 
{
	
}
    5b50:	08 95       	ret

00005b52 <tg_receiver>:
 * tg_receiver()
 */

void tg_receiver()
{
	tg_controller();	// this node executes gcode blocks received via RS485
    5b52:	0e 94 db 23 	call	0x47b6	; 0x47b6 <tg_controller>
		if (c != CR) {
			en_toggle(1);
		}
	}
*/
}
    5b56:	08 95       	ret

00005b58 <tg_repeater>:
		_delay_ms(50);
	}
*/	
	char c;

	en_write(4);
    5b58:	84 e0       	ldi	r24, 0x04	; 4
    5b5a:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <en_write>
	while (TRUE) {
		c = xio_getc(XIO_DEV_USB);		// blocking read
    5b5e:	81 e0       	ldi	r24, 0x01	; 1
    5b60:	0e 94 3c 20 	call	0x4078	; 0x4078 <xio_getc>
    5b64:	68 2f       	mov	r22, r24
		xio_putc(XIO_DEV_RS485, c);		// transfer to RS485 port
    5b66:	80 e0       	ldi	r24, 0x00	; 0
    5b68:	0e 94 1f 20 	call	0x403e	; 0x403e <xio_putc>
		en_toggle(1);
    5b6c:	81 e0       	ldi	r24, 0x01	; 1
    5b6e:	0e 94 34 12 	call	0x2468	; 0x2468 <en_toggle>
    5b72:	f5 cf       	rjmp	.-22     	; 0x5b5e <tg_repeater+0x6>

00005b74 <__lshrdi3>:
    5b74:	ef 92       	push	r14
    5b76:	ff 92       	push	r15
    5b78:	0f 93       	push	r16
    5b7a:	df 93       	push	r29
    5b7c:	cf 93       	push	r28
    5b7e:	cd b7       	in	r28, 0x3d	; 61
    5b80:	de b7       	in	r29, 0x3e	; 62
    5b82:	60 97       	sbiw	r28, 0x10	; 16
    5b84:	cd bf       	out	0x3d, r28	; 61
    5b86:	de bf       	out	0x3e, r29	; 62
    5b88:	a8 2f       	mov	r26, r24
    5b8a:	00 23       	and	r16, r16
    5b8c:	09 f4       	brne	.+2      	; 0x5b90 <__lshrdi3+0x1c>
    5b8e:	61 c0       	rjmp	.+194    	; 0x5c52 <__lshrdi3+0xde>
    5b90:	7e 01       	movw	r14, r28
    5b92:	08 94       	sec
    5b94:	e1 1c       	adc	r14, r1
    5b96:	f1 1c       	adc	r15, r1
    5b98:	88 e0       	ldi	r24, 0x08	; 8
    5b9a:	f7 01       	movw	r30, r14
    5b9c:	11 92       	st	Z+, r1
    5b9e:	8a 95       	dec	r24
    5ba0:	e9 f7       	brne	.-6      	; 0x5b9c <__lshrdi3+0x28>
    5ba2:	29 83       	std	Y+1, r18	; 0x01
    5ba4:	3a 83       	std	Y+2, r19	; 0x02
    5ba6:	4b 83       	std	Y+3, r20	; 0x03
    5ba8:	5c 83       	std	Y+4, r21	; 0x04
    5baa:	6d 83       	std	Y+5, r22	; 0x05
    5bac:	7e 83       	std	Y+6, r23	; 0x06
    5bae:	af 83       	std	Y+7, r26	; 0x07
    5bb0:	98 87       	std	Y+8, r25	; 0x08
    5bb2:	80 e2       	ldi	r24, 0x20	; 32
    5bb4:	80 1b       	sub	r24, r16
    5bb6:	e8 2f       	mov	r30, r24
    5bb8:	ff 27       	eor	r31, r31
    5bba:	e7 fd       	sbrc	r30, 7
    5bbc:	f0 95       	com	r31
    5bbe:	4d 81       	ldd	r20, Y+5	; 0x05
    5bc0:	5e 81       	ldd	r21, Y+6	; 0x06
    5bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    5bc4:	78 85       	ldd	r23, Y+8	; 0x08
    5bc6:	18 16       	cp	r1, r24
    5bc8:	84 f0       	brlt	.+32     	; 0x5bea <__lshrdi3+0x76>
    5bca:	1d 86       	std	Y+13, r1	; 0x0d
    5bcc:	1e 86       	std	Y+14, r1	; 0x0e
    5bce:	1f 86       	std	Y+15, r1	; 0x0f
    5bd0:	18 8a       	std	Y+16, r1	; 0x10
    5bd2:	88 27       	eor	r24, r24
    5bd4:	99 27       	eor	r25, r25
    5bd6:	8e 1b       	sub	r24, r30
    5bd8:	9f 0b       	sbc	r25, r31
    5bda:	04 c0       	rjmp	.+8      	; 0x5be4 <__lshrdi3+0x70>
    5bdc:	76 95       	lsr	r23
    5bde:	67 95       	ror	r22
    5be0:	57 95       	ror	r21
    5be2:	47 95       	ror	r20
    5be4:	8a 95       	dec	r24
    5be6:	d2 f7       	brpl	.-12     	; 0x5bdc <__lshrdi3+0x68>
    5be8:	28 c0       	rjmp	.+80     	; 0x5c3a <__lshrdi3+0xc6>
    5bea:	20 2f       	mov	r18, r16
    5bec:	33 27       	eor	r19, r19
    5bee:	27 fd       	sbrc	r18, 7
    5bf0:	30 95       	com	r19
    5bf2:	db 01       	movw	r26, r22
    5bf4:	ca 01       	movw	r24, r20
    5bf6:	02 2e       	mov	r0, r18
    5bf8:	04 c0       	rjmp	.+8      	; 0x5c02 <__lshrdi3+0x8e>
    5bfa:	b6 95       	lsr	r27
    5bfc:	a7 95       	ror	r26
    5bfe:	97 95       	ror	r25
    5c00:	87 95       	ror	r24
    5c02:	0a 94       	dec	r0
    5c04:	d2 f7       	brpl	.-12     	; 0x5bfa <__lshrdi3+0x86>
    5c06:	8d 87       	std	Y+13, r24	; 0x0d
    5c08:	9e 87       	std	Y+14, r25	; 0x0e
    5c0a:	af 87       	std	Y+15, r26	; 0x0f
    5c0c:	b8 8b       	std	Y+16, r27	; 0x10
    5c0e:	04 c0       	rjmp	.+8      	; 0x5c18 <__lshrdi3+0xa4>
    5c10:	44 0f       	add	r20, r20
    5c12:	55 1f       	adc	r21, r21
    5c14:	66 1f       	adc	r22, r22
    5c16:	77 1f       	adc	r23, r23
    5c18:	ea 95       	dec	r30
    5c1a:	d2 f7       	brpl	.-12     	; 0x5c10 <__lshrdi3+0x9c>
    5c1c:	89 81       	ldd	r24, Y+1	; 0x01
    5c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c20:	ab 81       	ldd	r26, Y+3	; 0x03
    5c22:	bc 81       	ldd	r27, Y+4	; 0x04
    5c24:	04 c0       	rjmp	.+8      	; 0x5c2e <__lshrdi3+0xba>
    5c26:	b6 95       	lsr	r27
    5c28:	a7 95       	ror	r26
    5c2a:	97 95       	ror	r25
    5c2c:	87 95       	ror	r24
    5c2e:	2a 95       	dec	r18
    5c30:	d2 f7       	brpl	.-12     	; 0x5c26 <__lshrdi3+0xb2>
    5c32:	48 2b       	or	r20, r24
    5c34:	59 2b       	or	r21, r25
    5c36:	6a 2b       	or	r22, r26
    5c38:	7b 2b       	or	r23, r27
    5c3a:	49 87       	std	Y+9, r20	; 0x09
    5c3c:	5a 87       	std	Y+10, r21	; 0x0a
    5c3e:	6b 87       	std	Y+11, r22	; 0x0b
    5c40:	7c 87       	std	Y+12, r23	; 0x0c
    5c42:	29 85       	ldd	r18, Y+9	; 0x09
    5c44:	3a 85       	ldd	r19, Y+10	; 0x0a
    5c46:	4b 85       	ldd	r20, Y+11	; 0x0b
    5c48:	5c 85       	ldd	r21, Y+12	; 0x0c
    5c4a:	6d 85       	ldd	r22, Y+13	; 0x0d
    5c4c:	7e 85       	ldd	r23, Y+14	; 0x0e
    5c4e:	af 85       	ldd	r26, Y+15	; 0x0f
    5c50:	98 89       	ldd	r25, Y+16	; 0x10
    5c52:	8a 2f       	mov	r24, r26
    5c54:	60 96       	adiw	r28, 0x10	; 16
    5c56:	cd bf       	out	0x3d, r28	; 61
    5c58:	de bf       	out	0x3e, r29	; 62
    5c5a:	cf 91       	pop	r28
    5c5c:	df 91       	pop	r29
    5c5e:	0f 91       	pop	r16
    5c60:	ff 90       	pop	r15
    5c62:	ef 90       	pop	r14
    5c64:	08 95       	ret

00005c66 <__ashldi3>:
    5c66:	ef 92       	push	r14
    5c68:	ff 92       	push	r15
    5c6a:	0f 93       	push	r16
    5c6c:	df 93       	push	r29
    5c6e:	cf 93       	push	r28
    5c70:	cd b7       	in	r28, 0x3d	; 61
    5c72:	de b7       	in	r29, 0x3e	; 62
    5c74:	60 97       	sbiw	r28, 0x10	; 16
    5c76:	cd bf       	out	0x3d, r28	; 61
    5c78:	de bf       	out	0x3e, r29	; 62
    5c7a:	a8 2f       	mov	r26, r24
    5c7c:	00 23       	and	r16, r16
    5c7e:	09 f4       	brne	.+2      	; 0x5c82 <__ashldi3+0x1c>
    5c80:	61 c0       	rjmp	.+194    	; 0x5d44 <__ashldi3+0xde>
    5c82:	7e 01       	movw	r14, r28
    5c84:	08 94       	sec
    5c86:	e1 1c       	adc	r14, r1
    5c88:	f1 1c       	adc	r15, r1
    5c8a:	88 e0       	ldi	r24, 0x08	; 8
    5c8c:	f7 01       	movw	r30, r14
    5c8e:	11 92       	st	Z+, r1
    5c90:	8a 95       	dec	r24
    5c92:	e9 f7       	brne	.-6      	; 0x5c8e <__ashldi3+0x28>
    5c94:	29 83       	std	Y+1, r18	; 0x01
    5c96:	3a 83       	std	Y+2, r19	; 0x02
    5c98:	4b 83       	std	Y+3, r20	; 0x03
    5c9a:	5c 83       	std	Y+4, r21	; 0x04
    5c9c:	6d 83       	std	Y+5, r22	; 0x05
    5c9e:	7e 83       	std	Y+6, r23	; 0x06
    5ca0:	af 83       	std	Y+7, r26	; 0x07
    5ca2:	98 87       	std	Y+8, r25	; 0x08
    5ca4:	80 e2       	ldi	r24, 0x20	; 32
    5ca6:	80 1b       	sub	r24, r16
    5ca8:	e8 2f       	mov	r30, r24
    5caa:	ff 27       	eor	r31, r31
    5cac:	e7 fd       	sbrc	r30, 7
    5cae:	f0 95       	com	r31
    5cb0:	49 81       	ldd	r20, Y+1	; 0x01
    5cb2:	5a 81       	ldd	r21, Y+2	; 0x02
    5cb4:	6b 81       	ldd	r22, Y+3	; 0x03
    5cb6:	7c 81       	ldd	r23, Y+4	; 0x04
    5cb8:	18 16       	cp	r1, r24
    5cba:	84 f0       	brlt	.+32     	; 0x5cdc <__ashldi3+0x76>
    5cbc:	19 86       	std	Y+9, r1	; 0x09
    5cbe:	1a 86       	std	Y+10, r1	; 0x0a
    5cc0:	1b 86       	std	Y+11, r1	; 0x0b
    5cc2:	1c 86       	std	Y+12, r1	; 0x0c
    5cc4:	88 27       	eor	r24, r24
    5cc6:	99 27       	eor	r25, r25
    5cc8:	8e 1b       	sub	r24, r30
    5cca:	9f 0b       	sbc	r25, r31
    5ccc:	04 c0       	rjmp	.+8      	; 0x5cd6 <__ashldi3+0x70>
    5cce:	44 0f       	add	r20, r20
    5cd0:	55 1f       	adc	r21, r21
    5cd2:	66 1f       	adc	r22, r22
    5cd4:	77 1f       	adc	r23, r23
    5cd6:	8a 95       	dec	r24
    5cd8:	d2 f7       	brpl	.-12     	; 0x5cce <__ashldi3+0x68>
    5cda:	28 c0       	rjmp	.+80     	; 0x5d2c <__ashldi3+0xc6>
    5cdc:	20 2f       	mov	r18, r16
    5cde:	33 27       	eor	r19, r19
    5ce0:	27 fd       	sbrc	r18, 7
    5ce2:	30 95       	com	r19
    5ce4:	db 01       	movw	r26, r22
    5ce6:	ca 01       	movw	r24, r20
    5ce8:	02 2e       	mov	r0, r18
    5cea:	04 c0       	rjmp	.+8      	; 0x5cf4 <__ashldi3+0x8e>
    5cec:	88 0f       	add	r24, r24
    5cee:	99 1f       	adc	r25, r25
    5cf0:	aa 1f       	adc	r26, r26
    5cf2:	bb 1f       	adc	r27, r27
    5cf4:	0a 94       	dec	r0
    5cf6:	d2 f7       	brpl	.-12     	; 0x5cec <__ashldi3+0x86>
    5cf8:	89 87       	std	Y+9, r24	; 0x09
    5cfa:	9a 87       	std	Y+10, r25	; 0x0a
    5cfc:	ab 87       	std	Y+11, r26	; 0x0b
    5cfe:	bc 87       	std	Y+12, r27	; 0x0c
    5d00:	04 c0       	rjmp	.+8      	; 0x5d0a <__ashldi3+0xa4>
    5d02:	76 95       	lsr	r23
    5d04:	67 95       	ror	r22
    5d06:	57 95       	ror	r21
    5d08:	47 95       	ror	r20
    5d0a:	ea 95       	dec	r30
    5d0c:	d2 f7       	brpl	.-12     	; 0x5d02 <__ashldi3+0x9c>
    5d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    5d10:	9e 81       	ldd	r25, Y+6	; 0x06
    5d12:	af 81       	ldd	r26, Y+7	; 0x07
    5d14:	b8 85       	ldd	r27, Y+8	; 0x08
    5d16:	04 c0       	rjmp	.+8      	; 0x5d20 <__ashldi3+0xba>
    5d18:	88 0f       	add	r24, r24
    5d1a:	99 1f       	adc	r25, r25
    5d1c:	aa 1f       	adc	r26, r26
    5d1e:	bb 1f       	adc	r27, r27
    5d20:	2a 95       	dec	r18
    5d22:	d2 f7       	brpl	.-12     	; 0x5d18 <__ashldi3+0xb2>
    5d24:	48 2b       	or	r20, r24
    5d26:	59 2b       	or	r21, r25
    5d28:	6a 2b       	or	r22, r26
    5d2a:	7b 2b       	or	r23, r27
    5d2c:	4d 87       	std	Y+13, r20	; 0x0d
    5d2e:	5e 87       	std	Y+14, r21	; 0x0e
    5d30:	6f 87       	std	Y+15, r22	; 0x0f
    5d32:	78 8b       	std	Y+16, r23	; 0x10
    5d34:	29 85       	ldd	r18, Y+9	; 0x09
    5d36:	3a 85       	ldd	r19, Y+10	; 0x0a
    5d38:	4b 85       	ldd	r20, Y+11	; 0x0b
    5d3a:	5c 85       	ldd	r21, Y+12	; 0x0c
    5d3c:	6d 85       	ldd	r22, Y+13	; 0x0d
    5d3e:	7e 85       	ldd	r23, Y+14	; 0x0e
    5d40:	af 85       	ldd	r26, Y+15	; 0x0f
    5d42:	98 89       	ldd	r25, Y+16	; 0x10
    5d44:	8a 2f       	mov	r24, r26
    5d46:	60 96       	adiw	r28, 0x10	; 16
    5d48:	cd bf       	out	0x3d, r28	; 61
    5d4a:	de bf       	out	0x3e, r29	; 62
    5d4c:	cf 91       	pop	r28
    5d4e:	df 91       	pop	r29
    5d50:	0f 91       	pop	r16
    5d52:	ff 90       	pop	r15
    5d54:	ef 90       	pop	r14
    5d56:	08 95       	ret

00005d58 <__udivdi3>:
    5d58:	ae e5       	ldi	r26, 0x5E	; 94
    5d5a:	b0 e0       	ldi	r27, 0x00	; 0
    5d5c:	e2 eb       	ldi	r30, 0xB2	; 178
    5d5e:	fe e2       	ldi	r31, 0x2E	; 46
    5d60:	0c 94 3f 3d 	jmp	0x7a7e	; 0x7a7e <__prologue_saves__>
    5d64:	a8 e0       	ldi	r26, 0x08	; 8
    5d66:	4e 01       	movw	r8, r28
    5d68:	08 94       	sec
    5d6a:	81 1c       	adc	r8, r1
    5d6c:	91 1c       	adc	r9, r1
    5d6e:	f4 01       	movw	r30, r8
    5d70:	6a 2e       	mov	r6, r26
    5d72:	11 92       	st	Z+, r1
    5d74:	6a 94       	dec	r6
    5d76:	e9 f7       	brne	.-6      	; 0x5d72 <__udivdi3+0x1a>
    5d78:	29 83       	std	Y+1, r18	; 0x01
    5d7a:	3a 83       	std	Y+2, r19	; 0x02
    5d7c:	4b 83       	std	Y+3, r20	; 0x03
    5d7e:	5c 83       	std	Y+4, r21	; 0x04
    5d80:	6d 83       	std	Y+5, r22	; 0x05
    5d82:	7e 83       	std	Y+6, r23	; 0x06
    5d84:	8f 83       	std	Y+7, r24	; 0x07
    5d86:	98 87       	std	Y+8, r25	; 0x08
    5d88:	ce 01       	movw	r24, r28
    5d8a:	09 96       	adiw	r24, 0x09	; 9
    5d8c:	fc 01       	movw	r30, r24
    5d8e:	11 92       	st	Z+, r1
    5d90:	aa 95       	dec	r26
    5d92:	e9 f7       	brne	.-6      	; 0x5d8e <__udivdi3+0x36>
    5d94:	a9 86       	std	Y+9, r10	; 0x09
    5d96:	ba 86       	std	Y+10, r11	; 0x0a
    5d98:	cb 86       	std	Y+11, r12	; 0x0b
    5d9a:	dc 86       	std	Y+12, r13	; 0x0c
    5d9c:	ed 86       	std	Y+13, r14	; 0x0d
    5d9e:	fe 86       	std	Y+14, r15	; 0x0e
    5da0:	0f 87       	std	Y+15, r16	; 0x0f
    5da2:	18 8b       	std	Y+16, r17	; 0x10
    5da4:	29 84       	ldd	r2, Y+9	; 0x09
    5da6:	3a 84       	ldd	r3, Y+10	; 0x0a
    5da8:	4b 84       	ldd	r4, Y+11	; 0x0b
    5daa:	5c 84       	ldd	r5, Y+12	; 0x0c
    5dac:	ed 84       	ldd	r14, Y+13	; 0x0d
    5dae:	fe 84       	ldd	r15, Y+14	; 0x0e
    5db0:	0f 85       	ldd	r16, Y+15	; 0x0f
    5db2:	18 89       	ldd	r17, Y+16	; 0x10
    5db4:	69 80       	ldd	r6, Y+1	; 0x01
    5db6:	7a 80       	ldd	r7, Y+2	; 0x02
    5db8:	8b 80       	ldd	r8, Y+3	; 0x03
    5dba:	9c 80       	ldd	r9, Y+4	; 0x04
    5dbc:	6d a6       	std	Y+45, r6	; 0x2d
    5dbe:	7e a6       	std	Y+46, r7	; 0x2e
    5dc0:	8f a6       	std	Y+47, r8	; 0x2f
    5dc2:	98 aa       	std	Y+48, r9	; 0x30
    5dc4:	6d 80       	ldd	r6, Y+5	; 0x05
    5dc6:	7e 80       	ldd	r7, Y+6	; 0x06
    5dc8:	8f 80       	ldd	r8, Y+7	; 0x07
    5dca:	98 84       	ldd	r9, Y+8	; 0x08
    5dcc:	e1 14       	cp	r14, r1
    5dce:	f1 04       	cpc	r15, r1
    5dd0:	01 05       	cpc	r16, r1
    5dd2:	11 05       	cpc	r17, r1
    5dd4:	09 f0       	breq	.+2      	; 0x5dd8 <__udivdi3+0x80>
    5dd6:	b3 c3       	rjmp	.+1894   	; 0x653e <__stack+0x53f>
    5dd8:	62 14       	cp	r6, r2
    5dda:	73 04       	cpc	r7, r3
    5ddc:	84 04       	cpc	r8, r4
    5dde:	95 04       	cpc	r9, r5
    5de0:	08 f0       	brcs	.+2      	; 0x5de4 <__udivdi3+0x8c>
    5de2:	3d c1       	rjmp	.+634    	; 0x605e <__stack+0x5f>
    5de4:	00 e0       	ldi	r16, 0x00	; 0
    5de6:	20 16       	cp	r2, r16
    5de8:	00 e0       	ldi	r16, 0x00	; 0
    5dea:	30 06       	cpc	r3, r16
    5dec:	01 e0       	ldi	r16, 0x01	; 1
    5dee:	40 06       	cpc	r4, r16
    5df0:	00 e0       	ldi	r16, 0x00	; 0
    5df2:	50 06       	cpc	r5, r16
    5df4:	88 f4       	brcc	.+34     	; 0x5e18 <__udivdi3+0xc0>
    5df6:	1f ef       	ldi	r17, 0xFF	; 255
    5df8:	21 16       	cp	r2, r17
    5dfa:	31 04       	cpc	r3, r1
    5dfc:	41 04       	cpc	r4, r1
    5dfe:	51 04       	cpc	r5, r1
    5e00:	39 f0       	breq	.+14     	; 0x5e10 <__udivdi3+0xb8>
    5e02:	30 f0       	brcs	.+12     	; 0x5e10 <__udivdi3+0xb8>
    5e04:	48 e0       	ldi	r20, 0x08	; 8
    5e06:	e4 2e       	mov	r14, r20
    5e08:	f1 2c       	mov	r15, r1
    5e0a:	01 2d       	mov	r16, r1
    5e0c:	11 2d       	mov	r17, r1
    5e0e:	18 c0       	rjmp	.+48     	; 0x5e40 <__udivdi3+0xe8>
    5e10:	ee 24       	eor	r14, r14
    5e12:	ff 24       	eor	r15, r15
    5e14:	87 01       	movw	r16, r14
    5e16:	14 c0       	rjmp	.+40     	; 0x5e40 <__udivdi3+0xe8>
    5e18:	20 e0       	ldi	r18, 0x00	; 0
    5e1a:	22 16       	cp	r2, r18
    5e1c:	20 e0       	ldi	r18, 0x00	; 0
    5e1e:	32 06       	cpc	r3, r18
    5e20:	20 e0       	ldi	r18, 0x00	; 0
    5e22:	42 06       	cpc	r4, r18
    5e24:	21 e0       	ldi	r18, 0x01	; 1
    5e26:	52 06       	cpc	r5, r18
    5e28:	30 f0       	brcs	.+12     	; 0x5e36 <__udivdi3+0xde>
    5e2a:	38 e1       	ldi	r19, 0x18	; 24
    5e2c:	e3 2e       	mov	r14, r19
    5e2e:	f1 2c       	mov	r15, r1
    5e30:	01 2d       	mov	r16, r1
    5e32:	11 2d       	mov	r17, r1
    5e34:	05 c0       	rjmp	.+10     	; 0x5e40 <__udivdi3+0xe8>
    5e36:	20 e1       	ldi	r18, 0x10	; 16
    5e38:	e2 2e       	mov	r14, r18
    5e3a:	f1 2c       	mov	r15, r1
    5e3c:	01 2d       	mov	r16, r1
    5e3e:	11 2d       	mov	r17, r1
    5e40:	d2 01       	movw	r26, r4
    5e42:	c1 01       	movw	r24, r2
    5e44:	0e 2c       	mov	r0, r14
    5e46:	04 c0       	rjmp	.+8      	; 0x5e50 <__udivdi3+0xf8>
    5e48:	b6 95       	lsr	r27
    5e4a:	a7 95       	ror	r26
    5e4c:	97 95       	ror	r25
    5e4e:	87 95       	ror	r24
    5e50:	0a 94       	dec	r0
    5e52:	d2 f7       	brpl	.-12     	; 0x5e48 <__udivdi3+0xf0>
    5e54:	8f 5c       	subi	r24, 0xCF	; 207
    5e56:	9f 4d       	sbci	r25, 0xDF	; 223
    5e58:	dc 01       	movw	r26, r24
    5e5a:	2c 91       	ld	r18, X
    5e5c:	80 e2       	ldi	r24, 0x20	; 32
    5e5e:	90 e0       	ldi	r25, 0x00	; 0
    5e60:	a0 e0       	ldi	r26, 0x00	; 0
    5e62:	b0 e0       	ldi	r27, 0x00	; 0
    5e64:	8e 19       	sub	r24, r14
    5e66:	9f 09       	sbc	r25, r15
    5e68:	a0 0b       	sbc	r26, r16
    5e6a:	b1 0b       	sbc	r27, r17
    5e6c:	7c 01       	movw	r14, r24
    5e6e:	8d 01       	movw	r16, r26
    5e70:	e2 1a       	sub	r14, r18
    5e72:	f1 08       	sbc	r15, r1
    5e74:	01 09       	sbc	r16, r1
    5e76:	11 09       	sbc	r17, r1
    5e78:	e1 14       	cp	r14, r1
    5e7a:	f1 04       	cpc	r15, r1
    5e7c:	01 05       	cpc	r16, r1
    5e7e:	11 05       	cpc	r17, r1
    5e80:	a1 f1       	breq	.+104    	; 0x5eea <__udivdi3+0x192>
    5e82:	0e 2c       	mov	r0, r14
    5e84:	04 c0       	rjmp	.+8      	; 0x5e8e <__udivdi3+0x136>
    5e86:	22 0c       	add	r2, r2
    5e88:	33 1c       	adc	r3, r3
    5e8a:	44 1c       	adc	r4, r4
    5e8c:	55 1c       	adc	r5, r5
    5e8e:	0a 94       	dec	r0
    5e90:	d2 f7       	brpl	.-12     	; 0x5e86 <__udivdi3+0x12e>
    5e92:	a4 01       	movw	r20, r8
    5e94:	93 01       	movw	r18, r6
    5e96:	0e 2c       	mov	r0, r14
    5e98:	04 c0       	rjmp	.+8      	; 0x5ea2 <__udivdi3+0x14a>
    5e9a:	22 0f       	add	r18, r18
    5e9c:	33 1f       	adc	r19, r19
    5e9e:	44 1f       	adc	r20, r20
    5ea0:	55 1f       	adc	r21, r21
    5ea2:	0a 94       	dec	r0
    5ea4:	d2 f7       	brpl	.-12     	; 0x5e9a <__udivdi3+0x142>
    5ea6:	80 e2       	ldi	r24, 0x20	; 32
    5ea8:	90 e0       	ldi	r25, 0x00	; 0
    5eaa:	8e 19       	sub	r24, r14
    5eac:	9f 09       	sbc	r25, r15
    5eae:	6d a4       	ldd	r6, Y+45	; 0x2d
    5eb0:	7e a4       	ldd	r7, Y+46	; 0x2e
    5eb2:	8f a4       	ldd	r8, Y+47	; 0x2f
    5eb4:	98 a8       	ldd	r9, Y+48	; 0x30
    5eb6:	04 c0       	rjmp	.+8      	; 0x5ec0 <__udivdi3+0x168>
    5eb8:	96 94       	lsr	r9
    5eba:	87 94       	ror	r8
    5ebc:	77 94       	ror	r7
    5ebe:	67 94       	ror	r6
    5ec0:	8a 95       	dec	r24
    5ec2:	d2 f7       	brpl	.-12     	; 0x5eb8 <__udivdi3+0x160>
    5ec4:	62 2a       	or	r6, r18
    5ec6:	73 2a       	or	r7, r19
    5ec8:	84 2a       	or	r8, r20
    5eca:	95 2a       	or	r9, r21
    5ecc:	ad a4       	ldd	r10, Y+45	; 0x2d
    5ece:	be a4       	ldd	r11, Y+46	; 0x2e
    5ed0:	cf a4       	ldd	r12, Y+47	; 0x2f
    5ed2:	d8 a8       	ldd	r13, Y+48	; 0x30
    5ed4:	04 c0       	rjmp	.+8      	; 0x5ede <__udivdi3+0x186>
    5ed6:	aa 0c       	add	r10, r10
    5ed8:	bb 1c       	adc	r11, r11
    5eda:	cc 1c       	adc	r12, r12
    5edc:	dd 1c       	adc	r13, r13
    5ede:	ea 94       	dec	r14
    5ee0:	d2 f7       	brpl	.-12     	; 0x5ed6 <__udivdi3+0x17e>
    5ee2:	ad a6       	std	Y+45, r10	; 0x2d
    5ee4:	be a6       	std	Y+46, r11	; 0x2e
    5ee6:	cf a6       	std	Y+47, r12	; 0x2f
    5ee8:	d8 aa       	std	Y+48, r13	; 0x30
    5eea:	62 01       	movw	r12, r4
    5eec:	ee 24       	eor	r14, r14
    5eee:	ff 24       	eor	r15, r15
    5ef0:	cd aa       	std	Y+53, r12	; 0x35
    5ef2:	de aa       	std	Y+54, r13	; 0x36
    5ef4:	ef aa       	std	Y+55, r14	; 0x37
    5ef6:	f8 ae       	std	Y+56, r15	; 0x38
    5ef8:	92 01       	movw	r18, r4
    5efa:	81 01       	movw	r16, r2
    5efc:	20 70       	andi	r18, 0x00	; 0
    5efe:	30 70       	andi	r19, 0x00	; 0
    5f00:	09 af       	std	Y+57, r16	; 0x39
    5f02:	1a af       	std	Y+58, r17	; 0x3a
    5f04:	2b af       	std	Y+59, r18	; 0x3b
    5f06:	3c af       	std	Y+60, r19	; 0x3c
    5f08:	c4 01       	movw	r24, r8
    5f0a:	b3 01       	movw	r22, r6
    5f0c:	a7 01       	movw	r20, r14
    5f0e:	96 01       	movw	r18, r12
    5f10:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    5f14:	7b 01       	movw	r14, r22
    5f16:	8c 01       	movw	r16, r24
    5f18:	c4 01       	movw	r24, r8
    5f1a:	b3 01       	movw	r22, r6
    5f1c:	2d a9       	ldd	r18, Y+53	; 0x35
    5f1e:	3e a9       	ldd	r19, Y+54	; 0x36
    5f20:	4f a9       	ldd	r20, Y+55	; 0x37
    5f22:	58 ad       	ldd	r21, Y+56	; 0x38
    5f24:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    5f28:	c9 01       	movw	r24, r18
    5f2a:	da 01       	movw	r26, r20
    5f2c:	3c 01       	movw	r6, r24
    5f2e:	4d 01       	movw	r8, r26
    5f30:	c4 01       	movw	r24, r8
    5f32:	b3 01       	movw	r22, r6
    5f34:	29 ad       	ldd	r18, Y+57	; 0x39
    5f36:	3a ad       	ldd	r19, Y+58	; 0x3a
    5f38:	4b ad       	ldd	r20, Y+59	; 0x3b
    5f3a:	5c ad       	ldd	r21, Y+60	; 0x3c
    5f3c:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <__mulsi3>
    5f40:	9b 01       	movw	r18, r22
    5f42:	ac 01       	movw	r20, r24
    5f44:	87 01       	movw	r16, r14
    5f46:	ff 24       	eor	r15, r15
    5f48:	ee 24       	eor	r14, r14
    5f4a:	ad a4       	ldd	r10, Y+45	; 0x2d
    5f4c:	be a4       	ldd	r11, Y+46	; 0x2e
    5f4e:	cf a4       	ldd	r12, Y+47	; 0x2f
    5f50:	d8 a8       	ldd	r13, Y+48	; 0x30
    5f52:	c6 01       	movw	r24, r12
    5f54:	aa 27       	eor	r26, r26
    5f56:	bb 27       	eor	r27, r27
    5f58:	57 01       	movw	r10, r14
    5f5a:	68 01       	movw	r12, r16
    5f5c:	a8 2a       	or	r10, r24
    5f5e:	b9 2a       	or	r11, r25
    5f60:	ca 2a       	or	r12, r26
    5f62:	db 2a       	or	r13, r27
    5f64:	a2 16       	cp	r10, r18
    5f66:	b3 06       	cpc	r11, r19
    5f68:	c4 06       	cpc	r12, r20
    5f6a:	d5 06       	cpc	r13, r21
    5f6c:	e0 f4       	brcc	.+56     	; 0x5fa6 <__udivdi3+0x24e>
    5f6e:	08 94       	sec
    5f70:	61 08       	sbc	r6, r1
    5f72:	71 08       	sbc	r7, r1
    5f74:	81 08       	sbc	r8, r1
    5f76:	91 08       	sbc	r9, r1
    5f78:	a2 0c       	add	r10, r2
    5f7a:	b3 1c       	adc	r11, r3
    5f7c:	c4 1c       	adc	r12, r4
    5f7e:	d5 1c       	adc	r13, r5
    5f80:	a2 14       	cp	r10, r2
    5f82:	b3 04       	cpc	r11, r3
    5f84:	c4 04       	cpc	r12, r4
    5f86:	d5 04       	cpc	r13, r5
    5f88:	70 f0       	brcs	.+28     	; 0x5fa6 <__udivdi3+0x24e>
    5f8a:	a2 16       	cp	r10, r18
    5f8c:	b3 06       	cpc	r11, r19
    5f8e:	c4 06       	cpc	r12, r20
    5f90:	d5 06       	cpc	r13, r21
    5f92:	48 f4       	brcc	.+18     	; 0x5fa6 <__udivdi3+0x24e>
    5f94:	08 94       	sec
    5f96:	61 08       	sbc	r6, r1
    5f98:	71 08       	sbc	r7, r1
    5f9a:	81 08       	sbc	r8, r1
    5f9c:	91 08       	sbc	r9, r1
    5f9e:	a2 0c       	add	r10, r2
    5fa0:	b3 1c       	adc	r11, r3
    5fa2:	c4 1c       	adc	r12, r4
    5fa4:	d5 1c       	adc	r13, r5
    5fa6:	a2 1a       	sub	r10, r18
    5fa8:	b3 0a       	sbc	r11, r19
    5faa:	c4 0a       	sbc	r12, r20
    5fac:	d5 0a       	sbc	r13, r21
    5fae:	c6 01       	movw	r24, r12
    5fb0:	b5 01       	movw	r22, r10
    5fb2:	2d a9       	ldd	r18, Y+53	; 0x35
    5fb4:	3e a9       	ldd	r19, Y+54	; 0x36
    5fb6:	4f a9       	ldd	r20, Y+55	; 0x37
    5fb8:	58 ad       	ldd	r21, Y+56	; 0x38
    5fba:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    5fbe:	7b 01       	movw	r14, r22
    5fc0:	8c 01       	movw	r16, r24
    5fc2:	c6 01       	movw	r24, r12
    5fc4:	b5 01       	movw	r22, r10
    5fc6:	2d a9       	ldd	r18, Y+53	; 0x35
    5fc8:	3e a9       	ldd	r19, Y+54	; 0x36
    5fca:	4f a9       	ldd	r20, Y+55	; 0x37
    5fcc:	58 ad       	ldd	r21, Y+56	; 0x38
    5fce:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    5fd2:	c9 01       	movw	r24, r18
    5fd4:	da 01       	movw	r26, r20
    5fd6:	5c 01       	movw	r10, r24
    5fd8:	6d 01       	movw	r12, r26
    5fda:	c6 01       	movw	r24, r12
    5fdc:	b5 01       	movw	r22, r10
    5fde:	29 ad       	ldd	r18, Y+57	; 0x39
    5fe0:	3a ad       	ldd	r19, Y+58	; 0x3a
    5fe2:	4b ad       	ldd	r20, Y+59	; 0x3b
    5fe4:	5c ad       	ldd	r21, Y+60	; 0x3c
    5fe6:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <__mulsi3>
    5fea:	9b 01       	movw	r18, r22
    5fec:	ac 01       	movw	r20, r24
    5fee:	87 01       	movw	r16, r14
    5ff0:	ff 24       	eor	r15, r15
    5ff2:	ee 24       	eor	r14, r14
    5ff4:	8d a5       	ldd	r24, Y+45	; 0x2d
    5ff6:	9e a5       	ldd	r25, Y+46	; 0x2e
    5ff8:	af a5       	ldd	r26, Y+47	; 0x2f
    5ffa:	b8 a9       	ldd	r27, Y+48	; 0x30
    5ffc:	a0 70       	andi	r26, 0x00	; 0
    5ffe:	b0 70       	andi	r27, 0x00	; 0
    6000:	e8 2a       	or	r14, r24
    6002:	f9 2a       	or	r15, r25
    6004:	0a 2b       	or	r16, r26
    6006:	1b 2b       	or	r17, r27
    6008:	e2 16       	cp	r14, r18
    600a:	f3 06       	cpc	r15, r19
    600c:	04 07       	cpc	r16, r20
    600e:	15 07       	cpc	r17, r21
    6010:	c0 f4       	brcc	.+48     	; 0x6042 <__stack+0x43>
    6012:	08 94       	sec
    6014:	a1 08       	sbc	r10, r1
    6016:	b1 08       	sbc	r11, r1
    6018:	c1 08       	sbc	r12, r1
    601a:	d1 08       	sbc	r13, r1
    601c:	e2 0c       	add	r14, r2
    601e:	f3 1c       	adc	r15, r3
    6020:	04 1d       	adc	r16, r4
    6022:	15 1d       	adc	r17, r5
    6024:	e2 14       	cp	r14, r2
    6026:	f3 04       	cpc	r15, r3
    6028:	04 05       	cpc	r16, r4
    602a:	15 05       	cpc	r17, r5
    602c:	50 f0       	brcs	.+20     	; 0x6042 <__stack+0x43>
    602e:	e2 16       	cp	r14, r18
    6030:	f3 06       	cpc	r15, r19
    6032:	04 07       	cpc	r16, r20
    6034:	15 07       	cpc	r17, r21
    6036:	28 f4       	brcc	.+10     	; 0x6042 <__stack+0x43>
    6038:	08 94       	sec
    603a:	a1 08       	sbc	r10, r1
    603c:	b1 08       	sbc	r11, r1
    603e:	c1 08       	sbc	r12, r1
    6040:	d1 08       	sbc	r13, r1
    6042:	d3 01       	movw	r26, r6
    6044:	99 27       	eor	r25, r25
    6046:	88 27       	eor	r24, r24
    6048:	86 01       	movw	r16, r12
    604a:	75 01       	movw	r14, r10
    604c:	e8 2a       	or	r14, r24
    604e:	f9 2a       	or	r15, r25
    6050:	0a 2b       	or	r16, r26
    6052:	1b 2b       	or	r17, r27
    6054:	e9 aa       	std	Y+49, r14	; 0x31
    6056:	fa aa       	std	Y+50, r15	; 0x32
    6058:	0b ab       	std	Y+51, r16	; 0x33
    605a:	1c ab       	std	Y+52, r17	; 0x34
    605c:	cf c4       	rjmp	.+2462   	; 0x69fc <__stack+0x9fd>
    605e:	21 14       	cp	r2, r1
    6060:	31 04       	cpc	r3, r1
    6062:	41 04       	cpc	r4, r1
    6064:	51 04       	cpc	r5, r1
    6066:	71 f4       	brne	.+28     	; 0x6084 <__stack+0x85>
    6068:	61 e0       	ldi	r22, 0x01	; 1
    606a:	70 e0       	ldi	r23, 0x00	; 0
    606c:	80 e0       	ldi	r24, 0x00	; 0
    606e:	90 e0       	ldi	r25, 0x00	; 0
    6070:	20 e0       	ldi	r18, 0x00	; 0
    6072:	30 e0       	ldi	r19, 0x00	; 0
    6074:	40 e0       	ldi	r20, 0x00	; 0
    6076:	50 e0       	ldi	r21, 0x00	; 0
    6078:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    607c:	c9 01       	movw	r24, r18
    607e:	da 01       	movw	r26, r20
    6080:	1c 01       	movw	r2, r24
    6082:	2d 01       	movw	r4, r26
    6084:	00 e0       	ldi	r16, 0x00	; 0
    6086:	20 16       	cp	r2, r16
    6088:	00 e0       	ldi	r16, 0x00	; 0
    608a:	30 06       	cpc	r3, r16
    608c:	01 e0       	ldi	r16, 0x01	; 1
    608e:	40 06       	cpc	r4, r16
    6090:	00 e0       	ldi	r16, 0x00	; 0
    6092:	50 06       	cpc	r5, r16
    6094:	88 f4       	brcc	.+34     	; 0x60b8 <__stack+0xb9>
    6096:	1f ef       	ldi	r17, 0xFF	; 255
    6098:	21 16       	cp	r2, r17
    609a:	31 04       	cpc	r3, r1
    609c:	41 04       	cpc	r4, r1
    609e:	51 04       	cpc	r5, r1
    60a0:	31 f0       	breq	.+12     	; 0x60ae <__stack+0xaf>
    60a2:	28 f0       	brcs	.+10     	; 0x60ae <__stack+0xaf>
    60a4:	48 e0       	ldi	r20, 0x08	; 8
    60a6:	50 e0       	ldi	r21, 0x00	; 0
    60a8:	60 e0       	ldi	r22, 0x00	; 0
    60aa:	70 e0       	ldi	r23, 0x00	; 0
    60ac:	17 c0       	rjmp	.+46     	; 0x60dc <__stack+0xdd>
    60ae:	40 e0       	ldi	r20, 0x00	; 0
    60b0:	50 e0       	ldi	r21, 0x00	; 0
    60b2:	60 e0       	ldi	r22, 0x00	; 0
    60b4:	70 e0       	ldi	r23, 0x00	; 0
    60b6:	12 c0       	rjmp	.+36     	; 0x60dc <__stack+0xdd>
    60b8:	20 e0       	ldi	r18, 0x00	; 0
    60ba:	22 16       	cp	r2, r18
    60bc:	20 e0       	ldi	r18, 0x00	; 0
    60be:	32 06       	cpc	r3, r18
    60c0:	20 e0       	ldi	r18, 0x00	; 0
    60c2:	42 06       	cpc	r4, r18
    60c4:	21 e0       	ldi	r18, 0x01	; 1
    60c6:	52 06       	cpc	r5, r18
    60c8:	28 f0       	brcs	.+10     	; 0x60d4 <__stack+0xd5>
    60ca:	48 e1       	ldi	r20, 0x18	; 24
    60cc:	50 e0       	ldi	r21, 0x00	; 0
    60ce:	60 e0       	ldi	r22, 0x00	; 0
    60d0:	70 e0       	ldi	r23, 0x00	; 0
    60d2:	04 c0       	rjmp	.+8      	; 0x60dc <__stack+0xdd>
    60d4:	40 e1       	ldi	r20, 0x10	; 16
    60d6:	50 e0       	ldi	r21, 0x00	; 0
    60d8:	60 e0       	ldi	r22, 0x00	; 0
    60da:	70 e0       	ldi	r23, 0x00	; 0
    60dc:	d2 01       	movw	r26, r4
    60de:	c1 01       	movw	r24, r2
    60e0:	04 2e       	mov	r0, r20
    60e2:	04 c0       	rjmp	.+8      	; 0x60ec <__stack+0xed>
    60e4:	b6 95       	lsr	r27
    60e6:	a7 95       	ror	r26
    60e8:	97 95       	ror	r25
    60ea:	87 95       	ror	r24
    60ec:	0a 94       	dec	r0
    60ee:	d2 f7       	brpl	.-12     	; 0x60e4 <__stack+0xe5>
    60f0:	8f 5c       	subi	r24, 0xCF	; 207
    60f2:	9f 4d       	sbci	r25, 0xDF	; 223
    60f4:	dc 01       	movw	r26, r24
    60f6:	2c 91       	ld	r18, X
    60f8:	e0 e2       	ldi	r30, 0x20	; 32
    60fa:	ee 2e       	mov	r14, r30
    60fc:	f1 2c       	mov	r15, r1
    60fe:	01 2d       	mov	r16, r1
    6100:	11 2d       	mov	r17, r1
    6102:	d8 01       	movw	r26, r16
    6104:	c7 01       	movw	r24, r14
    6106:	84 1b       	sub	r24, r20
    6108:	95 0b       	sbc	r25, r21
    610a:	a6 0b       	sbc	r26, r22
    610c:	b7 0b       	sbc	r27, r23
    610e:	82 1b       	sub	r24, r18
    6110:	91 09       	sbc	r25, r1
    6112:	a1 09       	sbc	r26, r1
    6114:	b1 09       	sbc	r27, r1
    6116:	00 97       	sbiw	r24, 0x00	; 0
    6118:	a1 05       	cpc	r26, r1
    611a:	b1 05       	cpc	r27, r1
    611c:	61 f4       	brne	.+24     	; 0x6136 <__stack+0x137>
    611e:	64 01       	movw	r12, r8
    6120:	53 01       	movw	r10, r6
    6122:	a2 18       	sub	r10, r2
    6124:	b3 08       	sbc	r11, r3
    6126:	c4 08       	sbc	r12, r4
    6128:	d5 08       	sbc	r13, r5
    612a:	31 e0       	ldi	r19, 0x01	; 1
    612c:	63 2e       	mov	r6, r19
    612e:	71 2c       	mov	r7, r1
    6130:	81 2c       	mov	r8, r1
    6132:	91 2c       	mov	r9, r1
    6134:	1e c1       	rjmp	.+572    	; 0x6372 <__stack+0x373>
    6136:	6f 96       	adiw	r28, 0x1f	; 31
    6138:	8f af       	std	Y+63, r24	; 0x3f
    613a:	6f 97       	sbiw	r28, 0x1f	; 31
    613c:	08 2e       	mov	r0, r24
    613e:	04 c0       	rjmp	.+8      	; 0x6148 <__stack+0x149>
    6140:	22 0c       	add	r2, r2
    6142:	33 1c       	adc	r3, r3
    6144:	44 1c       	adc	r4, r4
    6146:	55 1c       	adc	r5, r5
    6148:	0a 94       	dec	r0
    614a:	d2 f7       	brpl	.-12     	; 0x6140 <__stack+0x141>
    614c:	ee 2d       	mov	r30, r14
    614e:	e8 1b       	sub	r30, r24
    6150:	64 01       	movw	r12, r8
    6152:	53 01       	movw	r10, r6
    6154:	0e 2e       	mov	r0, r30
    6156:	04 c0       	rjmp	.+8      	; 0x6160 <__stack+0x161>
    6158:	d6 94       	lsr	r13
    615a:	c7 94       	ror	r12
    615c:	b7 94       	ror	r11
    615e:	a7 94       	ror	r10
    6160:	0a 94       	dec	r0
    6162:	d2 f7       	brpl	.-12     	; 0x6158 <__stack+0x159>
    6164:	a4 01       	movw	r20, r8
    6166:	93 01       	movw	r18, r6
    6168:	6f 96       	adiw	r28, 0x1f	; 31
    616a:	0f ac       	ldd	r0, Y+63	; 0x3f
    616c:	6f 97       	sbiw	r28, 0x1f	; 31
    616e:	04 c0       	rjmp	.+8      	; 0x6178 <__stack+0x179>
    6170:	22 0f       	add	r18, r18
    6172:	33 1f       	adc	r19, r19
    6174:	44 1f       	adc	r20, r20
    6176:	55 1f       	adc	r21, r21
    6178:	0a 94       	dec	r0
    617a:	d2 f7       	brpl	.-12     	; 0x6170 <__stack+0x171>
    617c:	6d a4       	ldd	r6, Y+45	; 0x2d
    617e:	7e a4       	ldd	r7, Y+46	; 0x2e
    6180:	8f a4       	ldd	r8, Y+47	; 0x2f
    6182:	98 a8       	ldd	r9, Y+48	; 0x30
    6184:	0e 2e       	mov	r0, r30
    6186:	04 c0       	rjmp	.+8      	; 0x6190 <__stack+0x191>
    6188:	96 94       	lsr	r9
    618a:	87 94       	ror	r8
    618c:	77 94       	ror	r7
    618e:	67 94       	ror	r6
    6190:	0a 94       	dec	r0
    6192:	d2 f7       	brpl	.-12     	; 0x6188 <__stack+0x189>
    6194:	84 01       	movw	r16, r8
    6196:	73 01       	movw	r14, r6
    6198:	e2 2a       	or	r14, r18
    619a:	f3 2a       	or	r15, r19
    619c:	04 2b       	or	r16, r20
    619e:	15 2b       	or	r17, r21
    61a0:	e9 a6       	std	Y+41, r14	; 0x29
    61a2:	fa a6       	std	Y+42, r15	; 0x2a
    61a4:	0b a7       	std	Y+43, r16	; 0x2b
    61a6:	1c a7       	std	Y+44, r17	; 0x2c
    61a8:	32 01       	movw	r6, r4
    61aa:	88 24       	eor	r8, r8
    61ac:	99 24       	eor	r9, r9
    61ae:	92 01       	movw	r18, r4
    61b0:	81 01       	movw	r16, r2
    61b2:	20 70       	andi	r18, 0x00	; 0
    61b4:	30 70       	andi	r19, 0x00	; 0
    61b6:	21 96       	adiw	r28, 0x01	; 1
    61b8:	0c af       	std	Y+60, r16	; 0x3c
    61ba:	1d af       	std	Y+61, r17	; 0x3d
    61bc:	2e af       	std	Y+62, r18	; 0x3e
    61be:	3f af       	std	Y+63, r19	; 0x3f
    61c0:	21 97       	sbiw	r28, 0x01	; 1
    61c2:	c6 01       	movw	r24, r12
    61c4:	b5 01       	movw	r22, r10
    61c6:	a4 01       	movw	r20, r8
    61c8:	93 01       	movw	r18, r6
    61ca:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    61ce:	7b 01       	movw	r14, r22
    61d0:	8c 01       	movw	r16, r24
    61d2:	c6 01       	movw	r24, r12
    61d4:	b5 01       	movw	r22, r10
    61d6:	a4 01       	movw	r20, r8
    61d8:	93 01       	movw	r18, r6
    61da:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    61de:	c9 01       	movw	r24, r18
    61e0:	da 01       	movw	r26, r20
    61e2:	25 96       	adiw	r28, 0x05	; 5
    61e4:	8c af       	std	Y+60, r24	; 0x3c
    61e6:	9d af       	std	Y+61, r25	; 0x3d
    61e8:	ae af       	std	Y+62, r26	; 0x3e
    61ea:	bf af       	std	Y+63, r27	; 0x3f
    61ec:	25 97       	sbiw	r28, 0x05	; 5
    61ee:	bc 01       	movw	r22, r24
    61f0:	cd 01       	movw	r24, r26
    61f2:	21 96       	adiw	r28, 0x01	; 1
    61f4:	2c ad       	ldd	r18, Y+60	; 0x3c
    61f6:	3d ad       	ldd	r19, Y+61	; 0x3d
    61f8:	4e ad       	ldd	r20, Y+62	; 0x3e
    61fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    61fc:	21 97       	sbiw	r28, 0x01	; 1
    61fe:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <__mulsi3>
    6202:	9b 01       	movw	r18, r22
    6204:	ac 01       	movw	r20, r24
    6206:	87 01       	movw	r16, r14
    6208:	ff 24       	eor	r15, r15
    620a:	ee 24       	eor	r14, r14
    620c:	a9 a4       	ldd	r10, Y+41	; 0x29
    620e:	ba a4       	ldd	r11, Y+42	; 0x2a
    6210:	cb a4       	ldd	r12, Y+43	; 0x2b
    6212:	dc a4       	ldd	r13, Y+44	; 0x2c
    6214:	c6 01       	movw	r24, r12
    6216:	aa 27       	eor	r26, r26
    6218:	bb 27       	eor	r27, r27
    621a:	5c 01       	movw	r10, r24
    621c:	6d 01       	movw	r12, r26
    621e:	ae 28       	or	r10, r14
    6220:	bf 28       	or	r11, r15
    6222:	c0 2a       	or	r12, r16
    6224:	d1 2a       	or	r13, r17
    6226:	a2 16       	cp	r10, r18
    6228:	b3 06       	cpc	r11, r19
    622a:	c4 06       	cpc	r12, r20
    622c:	d5 06       	cpc	r13, r21
    622e:	60 f5       	brcc	.+88     	; 0x6288 <__stack+0x289>
    6230:	25 96       	adiw	r28, 0x05	; 5
    6232:	6c ad       	ldd	r22, Y+60	; 0x3c
    6234:	7d ad       	ldd	r23, Y+61	; 0x3d
    6236:	8e ad       	ldd	r24, Y+62	; 0x3e
    6238:	9f ad       	ldd	r25, Y+63	; 0x3f
    623a:	25 97       	sbiw	r28, 0x05	; 5
    623c:	61 50       	subi	r22, 0x01	; 1
    623e:	70 40       	sbci	r23, 0x00	; 0
    6240:	80 40       	sbci	r24, 0x00	; 0
    6242:	90 40       	sbci	r25, 0x00	; 0
    6244:	25 96       	adiw	r28, 0x05	; 5
    6246:	6c af       	std	Y+60, r22	; 0x3c
    6248:	7d af       	std	Y+61, r23	; 0x3d
    624a:	8e af       	std	Y+62, r24	; 0x3e
    624c:	9f af       	std	Y+63, r25	; 0x3f
    624e:	25 97       	sbiw	r28, 0x05	; 5
    6250:	a2 0c       	add	r10, r2
    6252:	b3 1c       	adc	r11, r3
    6254:	c4 1c       	adc	r12, r4
    6256:	d5 1c       	adc	r13, r5
    6258:	a2 14       	cp	r10, r2
    625a:	b3 04       	cpc	r11, r3
    625c:	c4 04       	cpc	r12, r4
    625e:	d5 04       	cpc	r13, r5
    6260:	98 f0       	brcs	.+38     	; 0x6288 <__stack+0x289>
    6262:	a2 16       	cp	r10, r18
    6264:	b3 06       	cpc	r11, r19
    6266:	c4 06       	cpc	r12, r20
    6268:	d5 06       	cpc	r13, r21
    626a:	70 f4       	brcc	.+28     	; 0x6288 <__stack+0x289>
    626c:	61 50       	subi	r22, 0x01	; 1
    626e:	70 40       	sbci	r23, 0x00	; 0
    6270:	80 40       	sbci	r24, 0x00	; 0
    6272:	90 40       	sbci	r25, 0x00	; 0
    6274:	25 96       	adiw	r28, 0x05	; 5
    6276:	6c af       	std	Y+60, r22	; 0x3c
    6278:	7d af       	std	Y+61, r23	; 0x3d
    627a:	8e af       	std	Y+62, r24	; 0x3e
    627c:	9f af       	std	Y+63, r25	; 0x3f
    627e:	25 97       	sbiw	r28, 0x05	; 5
    6280:	a2 0c       	add	r10, r2
    6282:	b3 1c       	adc	r11, r3
    6284:	c4 1c       	adc	r12, r4
    6286:	d5 1c       	adc	r13, r5
    6288:	a2 1a       	sub	r10, r18
    628a:	b3 0a       	sbc	r11, r19
    628c:	c4 0a       	sbc	r12, r20
    628e:	d5 0a       	sbc	r13, r21
    6290:	c6 01       	movw	r24, r12
    6292:	b5 01       	movw	r22, r10
    6294:	a4 01       	movw	r20, r8
    6296:	93 01       	movw	r18, r6
    6298:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    629c:	7b 01       	movw	r14, r22
    629e:	8c 01       	movw	r16, r24
    62a0:	c6 01       	movw	r24, r12
    62a2:	b5 01       	movw	r22, r10
    62a4:	a4 01       	movw	r20, r8
    62a6:	93 01       	movw	r18, r6
    62a8:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    62ac:	c9 01       	movw	r24, r18
    62ae:	da 01       	movw	r26, r20
    62b0:	3c 01       	movw	r6, r24
    62b2:	4d 01       	movw	r8, r26
    62b4:	c4 01       	movw	r24, r8
    62b6:	b3 01       	movw	r22, r6
    62b8:	21 96       	adiw	r28, 0x01	; 1
    62ba:	2c ad       	ldd	r18, Y+60	; 0x3c
    62bc:	3d ad       	ldd	r19, Y+61	; 0x3d
    62be:	4e ad       	ldd	r20, Y+62	; 0x3e
    62c0:	5f ad       	ldd	r21, Y+63	; 0x3f
    62c2:	21 97       	sbiw	r28, 0x01	; 1
    62c4:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <__mulsi3>
    62c8:	9b 01       	movw	r18, r22
    62ca:	ac 01       	movw	r20, r24
    62cc:	87 01       	movw	r16, r14
    62ce:	ff 24       	eor	r15, r15
    62d0:	ee 24       	eor	r14, r14
    62d2:	89 a5       	ldd	r24, Y+41	; 0x29
    62d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    62d6:	ab a5       	ldd	r26, Y+43	; 0x2b
    62d8:	bc a5       	ldd	r27, Y+44	; 0x2c
    62da:	a0 70       	andi	r26, 0x00	; 0
    62dc:	b0 70       	andi	r27, 0x00	; 0
    62de:	57 01       	movw	r10, r14
    62e0:	68 01       	movw	r12, r16
    62e2:	a8 2a       	or	r10, r24
    62e4:	b9 2a       	or	r11, r25
    62e6:	ca 2a       	or	r12, r26
    62e8:	db 2a       	or	r13, r27
    62ea:	a2 16       	cp	r10, r18
    62ec:	b3 06       	cpc	r11, r19
    62ee:	c4 06       	cpc	r12, r20
    62f0:	d5 06       	cpc	r13, r21
    62f2:	e0 f4       	brcc	.+56     	; 0x632c <__stack+0x32d>
    62f4:	08 94       	sec
    62f6:	61 08       	sbc	r6, r1
    62f8:	71 08       	sbc	r7, r1
    62fa:	81 08       	sbc	r8, r1
    62fc:	91 08       	sbc	r9, r1
    62fe:	a2 0c       	add	r10, r2
    6300:	b3 1c       	adc	r11, r3
    6302:	c4 1c       	adc	r12, r4
    6304:	d5 1c       	adc	r13, r5
    6306:	a2 14       	cp	r10, r2
    6308:	b3 04       	cpc	r11, r3
    630a:	c4 04       	cpc	r12, r4
    630c:	d5 04       	cpc	r13, r5
    630e:	70 f0       	brcs	.+28     	; 0x632c <__stack+0x32d>
    6310:	a2 16       	cp	r10, r18
    6312:	b3 06       	cpc	r11, r19
    6314:	c4 06       	cpc	r12, r20
    6316:	d5 06       	cpc	r13, r21
    6318:	48 f4       	brcc	.+18     	; 0x632c <__stack+0x32d>
    631a:	08 94       	sec
    631c:	61 08       	sbc	r6, r1
    631e:	71 08       	sbc	r7, r1
    6320:	81 08       	sbc	r8, r1
    6322:	91 08       	sbc	r9, r1
    6324:	a2 0c       	add	r10, r2
    6326:	b3 1c       	adc	r11, r3
    6328:	c4 1c       	adc	r12, r4
    632a:	d5 1c       	adc	r13, r5
    632c:	8d a5       	ldd	r24, Y+45	; 0x2d
    632e:	9e a5       	ldd	r25, Y+46	; 0x2e
    6330:	af a5       	ldd	r26, Y+47	; 0x2f
    6332:	b8 a9       	ldd	r27, Y+48	; 0x30
    6334:	6f 96       	adiw	r28, 0x1f	; 31
    6336:	0f ac       	ldd	r0, Y+63	; 0x3f
    6338:	6f 97       	sbiw	r28, 0x1f	; 31
    633a:	04 c0       	rjmp	.+8      	; 0x6344 <__stack+0x345>
    633c:	88 0f       	add	r24, r24
    633e:	99 1f       	adc	r25, r25
    6340:	aa 1f       	adc	r26, r26
    6342:	bb 1f       	adc	r27, r27
    6344:	0a 94       	dec	r0
    6346:	d2 f7       	brpl	.-12     	; 0x633c <__stack+0x33d>
    6348:	8d a7       	std	Y+45, r24	; 0x2d
    634a:	9e a7       	std	Y+46, r25	; 0x2e
    634c:	af a7       	std	Y+47, r26	; 0x2f
    634e:	b8 ab       	std	Y+48, r27	; 0x30
    6350:	a2 1a       	sub	r10, r18
    6352:	b3 0a       	sbc	r11, r19
    6354:	c4 0a       	sbc	r12, r20
    6356:	d5 0a       	sbc	r13, r21
    6358:	25 96       	adiw	r28, 0x05	; 5
    635a:	ec ac       	ldd	r14, Y+60	; 0x3c
    635c:	fd ac       	ldd	r15, Y+61	; 0x3d
    635e:	0e ad       	ldd	r16, Y+62	; 0x3e
    6360:	1f ad       	ldd	r17, Y+63	; 0x3f
    6362:	25 97       	sbiw	r28, 0x05	; 5
    6364:	d7 01       	movw	r26, r14
    6366:	99 27       	eor	r25, r25
    6368:	88 27       	eor	r24, r24
    636a:	68 2a       	or	r6, r24
    636c:	79 2a       	or	r7, r25
    636e:	8a 2a       	or	r8, r26
    6370:	9b 2a       	or	r9, r27
    6372:	82 01       	movw	r16, r4
    6374:	22 27       	eor	r18, r18
    6376:	33 27       	eor	r19, r19
    6378:	29 96       	adiw	r28, 0x09	; 9
    637a:	0c af       	std	Y+60, r16	; 0x3c
    637c:	1d af       	std	Y+61, r17	; 0x3d
    637e:	2e af       	std	Y+62, r18	; 0x3e
    6380:	3f af       	std	Y+63, r19	; 0x3f
    6382:	29 97       	sbiw	r28, 0x09	; 9
    6384:	a2 01       	movw	r20, r4
    6386:	91 01       	movw	r18, r2
    6388:	40 70       	andi	r20, 0x00	; 0
    638a:	50 70       	andi	r21, 0x00	; 0
    638c:	2d 96       	adiw	r28, 0x0d	; 13
    638e:	2c af       	std	Y+60, r18	; 0x3c
    6390:	3d af       	std	Y+61, r19	; 0x3d
    6392:	4e af       	std	Y+62, r20	; 0x3e
    6394:	5f af       	std	Y+63, r21	; 0x3f
    6396:	2d 97       	sbiw	r28, 0x0d	; 13
    6398:	c6 01       	movw	r24, r12
    639a:	b5 01       	movw	r22, r10
    639c:	29 96       	adiw	r28, 0x09	; 9
    639e:	2c ad       	ldd	r18, Y+60	; 0x3c
    63a0:	3d ad       	ldd	r19, Y+61	; 0x3d
    63a2:	4e ad       	ldd	r20, Y+62	; 0x3e
    63a4:	5f ad       	ldd	r21, Y+63	; 0x3f
    63a6:	29 97       	sbiw	r28, 0x09	; 9
    63a8:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    63ac:	7b 01       	movw	r14, r22
    63ae:	8c 01       	movw	r16, r24
    63b0:	c6 01       	movw	r24, r12
    63b2:	b5 01       	movw	r22, r10
    63b4:	29 96       	adiw	r28, 0x09	; 9
    63b6:	2c ad       	ldd	r18, Y+60	; 0x3c
    63b8:	3d ad       	ldd	r19, Y+61	; 0x3d
    63ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    63bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    63be:	29 97       	sbiw	r28, 0x09	; 9
    63c0:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    63c4:	c9 01       	movw	r24, r18
    63c6:	da 01       	movw	r26, r20
    63c8:	61 96       	adiw	r28, 0x11	; 17
    63ca:	8c af       	std	Y+60, r24	; 0x3c
    63cc:	9d af       	std	Y+61, r25	; 0x3d
    63ce:	ae af       	std	Y+62, r26	; 0x3e
    63d0:	bf af       	std	Y+63, r27	; 0x3f
    63d2:	61 97       	sbiw	r28, 0x11	; 17
    63d4:	bc 01       	movw	r22, r24
    63d6:	cd 01       	movw	r24, r26
    63d8:	2d 96       	adiw	r28, 0x0d	; 13
    63da:	2c ad       	ldd	r18, Y+60	; 0x3c
    63dc:	3d ad       	ldd	r19, Y+61	; 0x3d
    63de:	4e ad       	ldd	r20, Y+62	; 0x3e
    63e0:	5f ad       	ldd	r21, Y+63	; 0x3f
    63e2:	2d 97       	sbiw	r28, 0x0d	; 13
    63e4:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <__mulsi3>
    63e8:	9b 01       	movw	r18, r22
    63ea:	ac 01       	movw	r20, r24
    63ec:	87 01       	movw	r16, r14
    63ee:	ff 24       	eor	r15, r15
    63f0:	ee 24       	eor	r14, r14
    63f2:	ad a4       	ldd	r10, Y+45	; 0x2d
    63f4:	be a4       	ldd	r11, Y+46	; 0x2e
    63f6:	cf a4       	ldd	r12, Y+47	; 0x2f
    63f8:	d8 a8       	ldd	r13, Y+48	; 0x30
    63fa:	c6 01       	movw	r24, r12
    63fc:	aa 27       	eor	r26, r26
    63fe:	bb 27       	eor	r27, r27
    6400:	57 01       	movw	r10, r14
    6402:	68 01       	movw	r12, r16
    6404:	a8 2a       	or	r10, r24
    6406:	b9 2a       	or	r11, r25
    6408:	ca 2a       	or	r12, r26
    640a:	db 2a       	or	r13, r27
    640c:	a2 16       	cp	r10, r18
    640e:	b3 06       	cpc	r11, r19
    6410:	c4 06       	cpc	r12, r20
    6412:	d5 06       	cpc	r13, r21
    6414:	60 f5       	brcc	.+88     	; 0x646e <__stack+0x46f>
    6416:	61 96       	adiw	r28, 0x11	; 17
    6418:	6c ad       	ldd	r22, Y+60	; 0x3c
    641a:	7d ad       	ldd	r23, Y+61	; 0x3d
    641c:	8e ad       	ldd	r24, Y+62	; 0x3e
    641e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6420:	61 97       	sbiw	r28, 0x11	; 17
    6422:	61 50       	subi	r22, 0x01	; 1
    6424:	70 40       	sbci	r23, 0x00	; 0
    6426:	80 40       	sbci	r24, 0x00	; 0
    6428:	90 40       	sbci	r25, 0x00	; 0
    642a:	61 96       	adiw	r28, 0x11	; 17
    642c:	6c af       	std	Y+60, r22	; 0x3c
    642e:	7d af       	std	Y+61, r23	; 0x3d
    6430:	8e af       	std	Y+62, r24	; 0x3e
    6432:	9f af       	std	Y+63, r25	; 0x3f
    6434:	61 97       	sbiw	r28, 0x11	; 17
    6436:	a2 0c       	add	r10, r2
    6438:	b3 1c       	adc	r11, r3
    643a:	c4 1c       	adc	r12, r4
    643c:	d5 1c       	adc	r13, r5
    643e:	a2 14       	cp	r10, r2
    6440:	b3 04       	cpc	r11, r3
    6442:	c4 04       	cpc	r12, r4
    6444:	d5 04       	cpc	r13, r5
    6446:	98 f0       	brcs	.+38     	; 0x646e <__stack+0x46f>
    6448:	a2 16       	cp	r10, r18
    644a:	b3 06       	cpc	r11, r19
    644c:	c4 06       	cpc	r12, r20
    644e:	d5 06       	cpc	r13, r21
    6450:	70 f4       	brcc	.+28     	; 0x646e <__stack+0x46f>
    6452:	61 50       	subi	r22, 0x01	; 1
    6454:	70 40       	sbci	r23, 0x00	; 0
    6456:	80 40       	sbci	r24, 0x00	; 0
    6458:	90 40       	sbci	r25, 0x00	; 0
    645a:	61 96       	adiw	r28, 0x11	; 17
    645c:	6c af       	std	Y+60, r22	; 0x3c
    645e:	7d af       	std	Y+61, r23	; 0x3d
    6460:	8e af       	std	Y+62, r24	; 0x3e
    6462:	9f af       	std	Y+63, r25	; 0x3f
    6464:	61 97       	sbiw	r28, 0x11	; 17
    6466:	a2 0c       	add	r10, r2
    6468:	b3 1c       	adc	r11, r3
    646a:	c4 1c       	adc	r12, r4
    646c:	d5 1c       	adc	r13, r5
    646e:	a2 1a       	sub	r10, r18
    6470:	b3 0a       	sbc	r11, r19
    6472:	c4 0a       	sbc	r12, r20
    6474:	d5 0a       	sbc	r13, r21
    6476:	c6 01       	movw	r24, r12
    6478:	b5 01       	movw	r22, r10
    647a:	29 96       	adiw	r28, 0x09	; 9
    647c:	2c ad       	ldd	r18, Y+60	; 0x3c
    647e:	3d ad       	ldd	r19, Y+61	; 0x3d
    6480:	4e ad       	ldd	r20, Y+62	; 0x3e
    6482:	5f ad       	ldd	r21, Y+63	; 0x3f
    6484:	29 97       	sbiw	r28, 0x09	; 9
    6486:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    648a:	7b 01       	movw	r14, r22
    648c:	8c 01       	movw	r16, r24
    648e:	c6 01       	movw	r24, r12
    6490:	b5 01       	movw	r22, r10
    6492:	29 96       	adiw	r28, 0x09	; 9
    6494:	2c ad       	ldd	r18, Y+60	; 0x3c
    6496:	3d ad       	ldd	r19, Y+61	; 0x3d
    6498:	4e ad       	ldd	r20, Y+62	; 0x3e
    649a:	5f ad       	ldd	r21, Y+63	; 0x3f
    649c:	29 97       	sbiw	r28, 0x09	; 9
    649e:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    64a2:	c9 01       	movw	r24, r18
    64a4:	da 01       	movw	r26, r20
    64a6:	5c 01       	movw	r10, r24
    64a8:	6d 01       	movw	r12, r26
    64aa:	c6 01       	movw	r24, r12
    64ac:	b5 01       	movw	r22, r10
    64ae:	2d 96       	adiw	r28, 0x0d	; 13
    64b0:	2c ad       	ldd	r18, Y+60	; 0x3c
    64b2:	3d ad       	ldd	r19, Y+61	; 0x3d
    64b4:	4e ad       	ldd	r20, Y+62	; 0x3e
    64b6:	5f ad       	ldd	r21, Y+63	; 0x3f
    64b8:	2d 97       	sbiw	r28, 0x0d	; 13
    64ba:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <__mulsi3>
    64be:	9b 01       	movw	r18, r22
    64c0:	ac 01       	movw	r20, r24
    64c2:	87 01       	movw	r16, r14
    64c4:	ff 24       	eor	r15, r15
    64c6:	ee 24       	eor	r14, r14
    64c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    64ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    64cc:	af a5       	ldd	r26, Y+47	; 0x2f
    64ce:	b8 a9       	ldd	r27, Y+48	; 0x30
    64d0:	a0 70       	andi	r26, 0x00	; 0
    64d2:	b0 70       	andi	r27, 0x00	; 0
    64d4:	e8 2a       	or	r14, r24
    64d6:	f9 2a       	or	r15, r25
    64d8:	0a 2b       	or	r16, r26
    64da:	1b 2b       	or	r17, r27
    64dc:	e2 16       	cp	r14, r18
    64de:	f3 06       	cpc	r15, r19
    64e0:	04 07       	cpc	r16, r20
    64e2:	15 07       	cpc	r17, r21
    64e4:	c0 f4       	brcc	.+48     	; 0x6516 <__stack+0x517>
    64e6:	08 94       	sec
    64e8:	a1 08       	sbc	r10, r1
    64ea:	b1 08       	sbc	r11, r1
    64ec:	c1 08       	sbc	r12, r1
    64ee:	d1 08       	sbc	r13, r1
    64f0:	e2 0c       	add	r14, r2
    64f2:	f3 1c       	adc	r15, r3
    64f4:	04 1d       	adc	r16, r4
    64f6:	15 1d       	adc	r17, r5
    64f8:	e2 14       	cp	r14, r2
    64fa:	f3 04       	cpc	r15, r3
    64fc:	04 05       	cpc	r16, r4
    64fe:	15 05       	cpc	r17, r5
    6500:	50 f0       	brcs	.+20     	; 0x6516 <__stack+0x517>
    6502:	e2 16       	cp	r14, r18
    6504:	f3 06       	cpc	r15, r19
    6506:	04 07       	cpc	r16, r20
    6508:	15 07       	cpc	r17, r21
    650a:	28 f4       	brcc	.+10     	; 0x6516 <__stack+0x517>
    650c:	08 94       	sec
    650e:	a1 08       	sbc	r10, r1
    6510:	b1 08       	sbc	r11, r1
    6512:	c1 08       	sbc	r12, r1
    6514:	d1 08       	sbc	r13, r1
    6516:	61 96       	adiw	r28, 0x11	; 17
    6518:	ec ac       	ldd	r14, Y+60	; 0x3c
    651a:	fd ac       	ldd	r15, Y+61	; 0x3d
    651c:	0e ad       	ldd	r16, Y+62	; 0x3e
    651e:	1f ad       	ldd	r17, Y+63	; 0x3f
    6520:	61 97       	sbiw	r28, 0x11	; 17
    6522:	d7 01       	movw	r26, r14
    6524:	99 27       	eor	r25, r25
    6526:	88 27       	eor	r24, r24
    6528:	96 01       	movw	r18, r12
    652a:	85 01       	movw	r16, r10
    652c:	08 2b       	or	r16, r24
    652e:	19 2b       	or	r17, r25
    6530:	2a 2b       	or	r18, r26
    6532:	3b 2b       	or	r19, r27
    6534:	09 ab       	std	Y+49, r16	; 0x31
    6536:	1a ab       	std	Y+50, r17	; 0x32
    6538:	2b ab       	std	Y+51, r18	; 0x33
    653a:	3c ab       	std	Y+52, r19	; 0x34
    653c:	62 c2       	rjmp	.+1220   	; 0x6a02 <__stack+0xa03>
    653e:	6e 14       	cp	r6, r14
    6540:	7f 04       	cpc	r7, r15
    6542:	80 06       	cpc	r8, r16
    6544:	91 06       	cpc	r9, r17
    6546:	08 f4       	brcc	.+2      	; 0x654a <__stack+0x54b>
    6548:	51 c2       	rjmp	.+1186   	; 0x69ec <__stack+0x9ed>
    654a:	20 e0       	ldi	r18, 0x00	; 0
    654c:	e2 16       	cp	r14, r18
    654e:	20 e0       	ldi	r18, 0x00	; 0
    6550:	f2 06       	cpc	r15, r18
    6552:	21 e0       	ldi	r18, 0x01	; 1
    6554:	02 07       	cpc	r16, r18
    6556:	20 e0       	ldi	r18, 0x00	; 0
    6558:	12 07       	cpc	r17, r18
    655a:	88 f4       	brcc	.+34     	; 0x657e <__stack+0x57f>
    655c:	3f ef       	ldi	r19, 0xFF	; 255
    655e:	e3 16       	cp	r14, r19
    6560:	f1 04       	cpc	r15, r1
    6562:	01 05       	cpc	r16, r1
    6564:	11 05       	cpc	r17, r1
    6566:	31 f0       	breq	.+12     	; 0x6574 <__stack+0x575>
    6568:	28 f0       	brcs	.+10     	; 0x6574 <__stack+0x575>
    656a:	48 e0       	ldi	r20, 0x08	; 8
    656c:	50 e0       	ldi	r21, 0x00	; 0
    656e:	60 e0       	ldi	r22, 0x00	; 0
    6570:	70 e0       	ldi	r23, 0x00	; 0
    6572:	17 c0       	rjmp	.+46     	; 0x65a2 <__stack+0x5a3>
    6574:	40 e0       	ldi	r20, 0x00	; 0
    6576:	50 e0       	ldi	r21, 0x00	; 0
    6578:	60 e0       	ldi	r22, 0x00	; 0
    657a:	70 e0       	ldi	r23, 0x00	; 0
    657c:	12 c0       	rjmp	.+36     	; 0x65a2 <__stack+0x5a3>
    657e:	40 e0       	ldi	r20, 0x00	; 0
    6580:	e4 16       	cp	r14, r20
    6582:	40 e0       	ldi	r20, 0x00	; 0
    6584:	f4 06       	cpc	r15, r20
    6586:	40 e0       	ldi	r20, 0x00	; 0
    6588:	04 07       	cpc	r16, r20
    658a:	41 e0       	ldi	r20, 0x01	; 1
    658c:	14 07       	cpc	r17, r20
    658e:	28 f0       	brcs	.+10     	; 0x659a <__stack+0x59b>
    6590:	48 e1       	ldi	r20, 0x18	; 24
    6592:	50 e0       	ldi	r21, 0x00	; 0
    6594:	60 e0       	ldi	r22, 0x00	; 0
    6596:	70 e0       	ldi	r23, 0x00	; 0
    6598:	04 c0       	rjmp	.+8      	; 0x65a2 <__stack+0x5a3>
    659a:	40 e1       	ldi	r20, 0x10	; 16
    659c:	50 e0       	ldi	r21, 0x00	; 0
    659e:	60 e0       	ldi	r22, 0x00	; 0
    65a0:	70 e0       	ldi	r23, 0x00	; 0
    65a2:	d8 01       	movw	r26, r16
    65a4:	c7 01       	movw	r24, r14
    65a6:	04 2e       	mov	r0, r20
    65a8:	04 c0       	rjmp	.+8      	; 0x65b2 <__stack+0x5b3>
    65aa:	b6 95       	lsr	r27
    65ac:	a7 95       	ror	r26
    65ae:	97 95       	ror	r25
    65b0:	87 95       	ror	r24
    65b2:	0a 94       	dec	r0
    65b4:	d2 f7       	brpl	.-12     	; 0x65aa <__stack+0x5ab>
    65b6:	8f 5c       	subi	r24, 0xCF	; 207
    65b8:	9f 4d       	sbci	r25, 0xDF	; 223
    65ba:	dc 01       	movw	r26, r24
    65bc:	2c 91       	ld	r18, X
    65be:	30 e2       	ldi	r19, 0x20	; 32
    65c0:	a3 2e       	mov	r10, r19
    65c2:	b1 2c       	mov	r11, r1
    65c4:	c1 2c       	mov	r12, r1
    65c6:	d1 2c       	mov	r13, r1
    65c8:	d6 01       	movw	r26, r12
    65ca:	c5 01       	movw	r24, r10
    65cc:	84 1b       	sub	r24, r20
    65ce:	95 0b       	sbc	r25, r21
    65d0:	a6 0b       	sbc	r26, r22
    65d2:	b7 0b       	sbc	r27, r23
    65d4:	82 1b       	sub	r24, r18
    65d6:	91 09       	sbc	r25, r1
    65d8:	a1 09       	sbc	r26, r1
    65da:	b1 09       	sbc	r27, r1
    65dc:	00 97       	sbiw	r24, 0x00	; 0
    65de:	a1 05       	cpc	r26, r1
    65e0:	b1 05       	cpc	r27, r1
    65e2:	89 f4       	brne	.+34     	; 0x6606 <__stack+0x607>
    65e4:	e6 14       	cp	r14, r6
    65e6:	f7 04       	cpc	r15, r7
    65e8:	08 05       	cpc	r16, r8
    65ea:	19 05       	cpc	r17, r9
    65ec:	08 f4       	brcc	.+2      	; 0x65f0 <__stack+0x5f1>
    65ee:	f2 c1       	rjmp	.+996    	; 0x69d4 <__stack+0x9d5>
    65f0:	6d a4       	ldd	r6, Y+45	; 0x2d
    65f2:	7e a4       	ldd	r7, Y+46	; 0x2e
    65f4:	8f a4       	ldd	r8, Y+47	; 0x2f
    65f6:	98 a8       	ldd	r9, Y+48	; 0x30
    65f8:	62 14       	cp	r6, r2
    65fa:	73 04       	cpc	r7, r3
    65fc:	84 04       	cpc	r8, r4
    65fe:	95 04       	cpc	r9, r5
    6600:	08 f0       	brcs	.+2      	; 0x6604 <__stack+0x605>
    6602:	e8 c1       	rjmp	.+976    	; 0x69d4 <__stack+0x9d5>
    6604:	f3 c1       	rjmp	.+998    	; 0x69ec <__stack+0x9ed>
    6606:	6e 96       	adiw	r28, 0x1e	; 30
    6608:	8f af       	std	Y+63, r24	; 0x3f
    660a:	6e 97       	sbiw	r28, 0x1e	; 30
    660c:	08 2e       	mov	r0, r24
    660e:	04 c0       	rjmp	.+8      	; 0x6618 <__stack+0x619>
    6610:	ee 0c       	add	r14, r14
    6612:	ff 1c       	adc	r15, r15
    6614:	00 1f       	adc	r16, r16
    6616:	11 1f       	adc	r17, r17
    6618:	0a 94       	dec	r0
    661a:	d2 f7       	brpl	.-12     	; 0x6610 <__stack+0x611>
    661c:	6a 2d       	mov	r22, r10
    661e:	68 1b       	sub	r22, r24
    6620:	d2 01       	movw	r26, r4
    6622:	c1 01       	movw	r24, r2
    6624:	06 2e       	mov	r0, r22
    6626:	04 c0       	rjmp	.+8      	; 0x6630 <__stack+0x631>
    6628:	b6 95       	lsr	r27
    662a:	a7 95       	ror	r26
    662c:	97 95       	ror	r25
    662e:	87 95       	ror	r24
    6630:	0a 94       	dec	r0
    6632:	d2 f7       	brpl	.-12     	; 0x6628 <__stack+0x629>
    6634:	5c 01       	movw	r10, r24
    6636:	6d 01       	movw	r12, r26
    6638:	ae 28       	or	r10, r14
    663a:	bf 28       	or	r11, r15
    663c:	c0 2a       	or	r12, r16
    663e:	d1 2a       	or	r13, r17
    6640:	ad a2       	std	Y+37, r10	; 0x25
    6642:	be a2       	std	Y+38, r11	; 0x26
    6644:	cf a2       	std	Y+39, r12	; 0x27
    6646:	d8 a6       	std	Y+40, r13	; 0x28
    6648:	72 01       	movw	r14, r4
    664a:	61 01       	movw	r12, r2
    664c:	6e 96       	adiw	r28, 0x1e	; 30
    664e:	0f ac       	ldd	r0, Y+63	; 0x3f
    6650:	6e 97       	sbiw	r28, 0x1e	; 30
    6652:	04 c0       	rjmp	.+8      	; 0x665c <__stack+0x65d>
    6654:	cc 0c       	add	r12, r12
    6656:	dd 1c       	adc	r13, r13
    6658:	ee 1c       	adc	r14, r14
    665a:	ff 1c       	adc	r15, r15
    665c:	0a 94       	dec	r0
    665e:	d2 f7       	brpl	.-12     	; 0x6654 <__stack+0x655>
    6660:	c9 a2       	std	Y+33, r12	; 0x21
    6662:	da a2       	std	Y+34, r13	; 0x22
    6664:	eb a2       	std	Y+35, r14	; 0x23
    6666:	fc a2       	std	Y+36, r15	; 0x24
    6668:	64 01       	movw	r12, r8
    666a:	53 01       	movw	r10, r6
    666c:	06 2e       	mov	r0, r22
    666e:	04 c0       	rjmp	.+8      	; 0x6678 <__stack+0x679>
    6670:	d6 94       	lsr	r13
    6672:	c7 94       	ror	r12
    6674:	b7 94       	ror	r11
    6676:	a7 94       	ror	r10
    6678:	0a 94       	dec	r0
    667a:	d2 f7       	brpl	.-12     	; 0x6670 <__stack+0x671>
    667c:	d4 01       	movw	r26, r8
    667e:	c3 01       	movw	r24, r6
    6680:	6e 96       	adiw	r28, 0x1e	; 30
    6682:	0f ac       	ldd	r0, Y+63	; 0x3f
    6684:	6e 97       	sbiw	r28, 0x1e	; 30
    6686:	04 c0       	rjmp	.+8      	; 0x6690 <__stack+0x691>
    6688:	88 0f       	add	r24, r24
    668a:	99 1f       	adc	r25, r25
    668c:	aa 1f       	adc	r26, r26
    668e:	bb 1f       	adc	r27, r27
    6690:	0a 94       	dec	r0
    6692:	d2 f7       	brpl	.-12     	; 0x6688 <__stack+0x689>
    6694:	ed a4       	ldd	r14, Y+45	; 0x2d
    6696:	fe a4       	ldd	r15, Y+46	; 0x2e
    6698:	0f a5       	ldd	r16, Y+47	; 0x2f
    669a:	18 a9       	ldd	r17, Y+48	; 0x30
    669c:	04 c0       	rjmp	.+8      	; 0x66a6 <__stack+0x6a7>
    669e:	16 95       	lsr	r17
    66a0:	07 95       	ror	r16
    66a2:	f7 94       	ror	r15
    66a4:	e7 94       	ror	r14
    66a6:	6a 95       	dec	r22
    66a8:	d2 f7       	brpl	.-12     	; 0x669e <__stack+0x69f>
    66aa:	37 01       	movw	r6, r14
    66ac:	48 01       	movw	r8, r16
    66ae:	68 2a       	or	r6, r24
    66b0:	79 2a       	or	r7, r25
    66b2:	8a 2a       	or	r8, r26
    66b4:	9b 2a       	or	r9, r27
    66b6:	6d 8e       	std	Y+29, r6	; 0x1d
    66b8:	7e 8e       	std	Y+30, r7	; 0x1e
    66ba:	8f 8e       	std	Y+31, r8	; 0x1f
    66bc:	98 a2       	std	Y+32, r9	; 0x20
    66be:	ed a0       	ldd	r14, Y+37	; 0x25
    66c0:	fe a0       	ldd	r15, Y+38	; 0x26
    66c2:	0f a1       	ldd	r16, Y+39	; 0x27
    66c4:	18 a5       	ldd	r17, Y+40	; 0x28
    66c6:	38 01       	movw	r6, r16
    66c8:	88 24       	eor	r8, r8
    66ca:	99 24       	eor	r9, r9
    66cc:	98 01       	movw	r18, r16
    66ce:	87 01       	movw	r16, r14
    66d0:	20 70       	andi	r18, 0x00	; 0
    66d2:	30 70       	andi	r19, 0x00	; 0
    66d4:	65 96       	adiw	r28, 0x15	; 21
    66d6:	0c af       	std	Y+60, r16	; 0x3c
    66d8:	1d af       	std	Y+61, r17	; 0x3d
    66da:	2e af       	std	Y+62, r18	; 0x3e
    66dc:	3f af       	std	Y+63, r19	; 0x3f
    66de:	65 97       	sbiw	r28, 0x15	; 21
    66e0:	c6 01       	movw	r24, r12
    66e2:	b5 01       	movw	r22, r10
    66e4:	a4 01       	movw	r20, r8
    66e6:	93 01       	movw	r18, r6
    66e8:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    66ec:	7b 01       	movw	r14, r22
    66ee:	8c 01       	movw	r16, r24
    66f0:	c6 01       	movw	r24, r12
    66f2:	b5 01       	movw	r22, r10
    66f4:	a4 01       	movw	r20, r8
    66f6:	93 01       	movw	r18, r6
    66f8:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    66fc:	c9 01       	movw	r24, r18
    66fe:	da 01       	movw	r26, r20
    6700:	1c 01       	movw	r2, r24
    6702:	2d 01       	movw	r4, r26
    6704:	c2 01       	movw	r24, r4
    6706:	b1 01       	movw	r22, r2
    6708:	65 96       	adiw	r28, 0x15	; 21
    670a:	2c ad       	ldd	r18, Y+60	; 0x3c
    670c:	3d ad       	ldd	r19, Y+61	; 0x3d
    670e:	4e ad       	ldd	r20, Y+62	; 0x3e
    6710:	5f ad       	ldd	r21, Y+63	; 0x3f
    6712:	65 97       	sbiw	r28, 0x15	; 21
    6714:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <__mulsi3>
    6718:	9b 01       	movw	r18, r22
    671a:	ac 01       	movw	r20, r24
    671c:	87 01       	movw	r16, r14
    671e:	ff 24       	eor	r15, r15
    6720:	ee 24       	eor	r14, r14
    6722:	ad 8c       	ldd	r10, Y+29	; 0x1d
    6724:	be 8c       	ldd	r11, Y+30	; 0x1e
    6726:	cf 8c       	ldd	r12, Y+31	; 0x1f
    6728:	d8 a0       	ldd	r13, Y+32	; 0x20
    672a:	c6 01       	movw	r24, r12
    672c:	aa 27       	eor	r26, r26
    672e:	bb 27       	eor	r27, r27
    6730:	57 01       	movw	r10, r14
    6732:	68 01       	movw	r12, r16
    6734:	a8 2a       	or	r10, r24
    6736:	b9 2a       	or	r11, r25
    6738:	ca 2a       	or	r12, r26
    673a:	db 2a       	or	r13, r27
    673c:	a2 16       	cp	r10, r18
    673e:	b3 06       	cpc	r11, r19
    6740:	c4 06       	cpc	r12, r20
    6742:	d5 06       	cpc	r13, r21
    6744:	00 f5       	brcc	.+64     	; 0x6786 <__stack+0x787>
    6746:	08 94       	sec
    6748:	21 08       	sbc	r2, r1
    674a:	31 08       	sbc	r3, r1
    674c:	41 08       	sbc	r4, r1
    674e:	51 08       	sbc	r5, r1
    6750:	ed a0       	ldd	r14, Y+37	; 0x25
    6752:	fe a0       	ldd	r15, Y+38	; 0x26
    6754:	0f a1       	ldd	r16, Y+39	; 0x27
    6756:	18 a5       	ldd	r17, Y+40	; 0x28
    6758:	ae 0c       	add	r10, r14
    675a:	bf 1c       	adc	r11, r15
    675c:	c0 1e       	adc	r12, r16
    675e:	d1 1e       	adc	r13, r17
    6760:	ae 14       	cp	r10, r14
    6762:	bf 04       	cpc	r11, r15
    6764:	c0 06       	cpc	r12, r16
    6766:	d1 06       	cpc	r13, r17
    6768:	70 f0       	brcs	.+28     	; 0x6786 <__stack+0x787>
    676a:	a2 16       	cp	r10, r18
    676c:	b3 06       	cpc	r11, r19
    676e:	c4 06       	cpc	r12, r20
    6770:	d5 06       	cpc	r13, r21
    6772:	48 f4       	brcc	.+18     	; 0x6786 <__stack+0x787>
    6774:	08 94       	sec
    6776:	21 08       	sbc	r2, r1
    6778:	31 08       	sbc	r3, r1
    677a:	41 08       	sbc	r4, r1
    677c:	51 08       	sbc	r5, r1
    677e:	ae 0c       	add	r10, r14
    6780:	bf 1c       	adc	r11, r15
    6782:	c0 1e       	adc	r12, r16
    6784:	d1 1e       	adc	r13, r17
    6786:	a2 1a       	sub	r10, r18
    6788:	b3 0a       	sbc	r11, r19
    678a:	c4 0a       	sbc	r12, r20
    678c:	d5 0a       	sbc	r13, r21
    678e:	c6 01       	movw	r24, r12
    6790:	b5 01       	movw	r22, r10
    6792:	a4 01       	movw	r20, r8
    6794:	93 01       	movw	r18, r6
    6796:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    679a:	7b 01       	movw	r14, r22
    679c:	8c 01       	movw	r16, r24
    679e:	c6 01       	movw	r24, r12
    67a0:	b5 01       	movw	r22, r10
    67a2:	a4 01       	movw	r20, r8
    67a4:	93 01       	movw	r18, r6
    67a6:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <__udivmodsi4>
    67aa:	c9 01       	movw	r24, r18
    67ac:	da 01       	movw	r26, r20
    67ae:	3c 01       	movw	r6, r24
    67b0:	4d 01       	movw	r8, r26
    67b2:	c4 01       	movw	r24, r8
    67b4:	b3 01       	movw	r22, r6
    67b6:	65 96       	adiw	r28, 0x15	; 21
    67b8:	2c ad       	ldd	r18, Y+60	; 0x3c
    67ba:	3d ad       	ldd	r19, Y+61	; 0x3d
    67bc:	4e ad       	ldd	r20, Y+62	; 0x3e
    67be:	5f ad       	ldd	r21, Y+63	; 0x3f
    67c0:	65 97       	sbiw	r28, 0x15	; 21
    67c2:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <__mulsi3>
    67c6:	9b 01       	movw	r18, r22
    67c8:	ac 01       	movw	r20, r24
    67ca:	87 01       	movw	r16, r14
    67cc:	ff 24       	eor	r15, r15
    67ce:	ee 24       	eor	r14, r14
    67d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    67d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    67d4:	af 8d       	ldd	r26, Y+31	; 0x1f
    67d6:	b8 a1       	ldd	r27, Y+32	; 0x20
    67d8:	a0 70       	andi	r26, 0x00	; 0
    67da:	b0 70       	andi	r27, 0x00	; 0
    67dc:	57 01       	movw	r10, r14
    67de:	68 01       	movw	r12, r16
    67e0:	a8 2a       	or	r10, r24
    67e2:	b9 2a       	or	r11, r25
    67e4:	ca 2a       	or	r12, r26
    67e6:	db 2a       	or	r13, r27
    67e8:	a2 16       	cp	r10, r18
    67ea:	b3 06       	cpc	r11, r19
    67ec:	c4 06       	cpc	r12, r20
    67ee:	d5 06       	cpc	r13, r21
    67f0:	00 f5       	brcc	.+64     	; 0x6832 <__stack+0x833>
    67f2:	08 94       	sec
    67f4:	61 08       	sbc	r6, r1
    67f6:	71 08       	sbc	r7, r1
    67f8:	81 08       	sbc	r8, r1
    67fa:	91 08       	sbc	r9, r1
    67fc:	6d a1       	ldd	r22, Y+37	; 0x25
    67fe:	7e a1       	ldd	r23, Y+38	; 0x26
    6800:	8f a1       	ldd	r24, Y+39	; 0x27
    6802:	98 a5       	ldd	r25, Y+40	; 0x28
    6804:	a6 0e       	add	r10, r22
    6806:	b7 1e       	adc	r11, r23
    6808:	c8 1e       	adc	r12, r24
    680a:	d9 1e       	adc	r13, r25
    680c:	a6 16       	cp	r10, r22
    680e:	b7 06       	cpc	r11, r23
    6810:	c8 06       	cpc	r12, r24
    6812:	d9 06       	cpc	r13, r25
    6814:	70 f0       	brcs	.+28     	; 0x6832 <__stack+0x833>
    6816:	a2 16       	cp	r10, r18
    6818:	b3 06       	cpc	r11, r19
    681a:	c4 06       	cpc	r12, r20
    681c:	d5 06       	cpc	r13, r21
    681e:	48 f4       	brcc	.+18     	; 0x6832 <__stack+0x833>
    6820:	08 94       	sec
    6822:	61 08       	sbc	r6, r1
    6824:	71 08       	sbc	r7, r1
    6826:	81 08       	sbc	r8, r1
    6828:	91 08       	sbc	r9, r1
    682a:	a6 0e       	add	r10, r22
    682c:	b7 1e       	adc	r11, r23
    682e:	c8 1e       	adc	r12, r24
    6830:	d9 1e       	adc	r13, r25
    6832:	d6 01       	movw	r26, r12
    6834:	c5 01       	movw	r24, r10
    6836:	82 1b       	sub	r24, r18
    6838:	93 0b       	sbc	r25, r19
    683a:	a4 0b       	sbc	r26, r20
    683c:	b5 0b       	sbc	r27, r21
    683e:	89 8f       	std	Y+25, r24	; 0x19
    6840:	9a 8f       	std	Y+26, r25	; 0x1a
    6842:	ab 8f       	std	Y+27, r26	; 0x1b
    6844:	bc 8f       	std	Y+28, r27	; 0x1c
    6846:	d1 01       	movw	r26, r2
    6848:	99 27       	eor	r25, r25
    684a:	88 27       	eor	r24, r24
    684c:	64 01       	movw	r12, r8
    684e:	53 01       	movw	r10, r6
    6850:	a8 2a       	or	r10, r24
    6852:	b9 2a       	or	r11, r25
    6854:	ca 2a       	or	r12, r26
    6856:	db 2a       	or	r13, r27
    6858:	a9 aa       	std	Y+49, r10	; 0x31
    685a:	ba aa       	std	Y+50, r11	; 0x32
    685c:	cb aa       	std	Y+51, r12	; 0x33
    685e:	dc aa       	std	Y+52, r13	; 0x34
    6860:	86 01       	movw	r16, r12
    6862:	75 01       	movw	r14, r10
    6864:	2f ef       	ldi	r18, 0xFF	; 255
    6866:	3f ef       	ldi	r19, 0xFF	; 255
    6868:	40 e0       	ldi	r20, 0x00	; 0
    686a:	50 e0       	ldi	r21, 0x00	; 0
    686c:	e2 22       	and	r14, r18
    686e:	f3 22       	and	r15, r19
    6870:	04 23       	and	r16, r20
    6872:	15 23       	and	r17, r21
    6874:	a6 01       	movw	r20, r12
    6876:	66 27       	eor	r22, r22
    6878:	77 27       	eor	r23, r23
    687a:	6d 96       	adiw	r28, 0x1d	; 29
    687c:	4c af       	std	Y+60, r20	; 0x3c
    687e:	5d af       	std	Y+61, r21	; 0x3d
    6880:	6e af       	std	Y+62, r22	; 0x3e
    6882:	7f af       	std	Y+63, r23	; 0x3f
    6884:	6d 97       	sbiw	r28, 0x1d	; 29
    6886:	a9 a0       	ldd	r10, Y+33	; 0x21
    6888:	ba a0       	ldd	r11, Y+34	; 0x22
    688a:	cb a0       	ldd	r12, Y+35	; 0x23
    688c:	dc a0       	ldd	r13, Y+36	; 0x24
    688e:	6f ef       	ldi	r22, 0xFF	; 255
    6890:	7f ef       	ldi	r23, 0xFF	; 255
    6892:	80 e0       	ldi	r24, 0x00	; 0
    6894:	90 e0       	ldi	r25, 0x00	; 0
    6896:	a6 22       	and	r10, r22
    6898:	b7 22       	and	r11, r23
    689a:	c8 22       	and	r12, r24
    689c:	d9 22       	and	r13, r25
    689e:	89 a1       	ldd	r24, Y+33	; 0x21
    68a0:	9a a1       	ldd	r25, Y+34	; 0x22
    68a2:	ab a1       	ldd	r26, Y+35	; 0x23
    68a4:	bc a1       	ldd	r27, Y+36	; 0x24
    68a6:	1d 01       	movw	r2, r26
    68a8:	44 24       	eor	r4, r4
    68aa:	55 24       	eor	r5, r5
    68ac:	c8 01       	movw	r24, r16
    68ae:	b7 01       	movw	r22, r14
    68b0:	a6 01       	movw	r20, r12
    68b2:	95 01       	movw	r18, r10
    68b4:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <__mulsi3>
    68b8:	69 96       	adiw	r28, 0x19	; 25
    68ba:	6c af       	std	Y+60, r22	; 0x3c
    68bc:	7d af       	std	Y+61, r23	; 0x3d
    68be:	8e af       	std	Y+62, r24	; 0x3e
    68c0:	9f af       	std	Y+63, r25	; 0x3f
    68c2:	69 97       	sbiw	r28, 0x19	; 25
    68c4:	c8 01       	movw	r24, r16
    68c6:	b7 01       	movw	r22, r14
    68c8:	a2 01       	movw	r20, r4
    68ca:	91 01       	movw	r18, r2
    68cc:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <__mulsi3>
    68d0:	3b 01       	movw	r6, r22
    68d2:	4c 01       	movw	r8, r24
    68d4:	6d 96       	adiw	r28, 0x1d	; 29
    68d6:	6c ad       	ldd	r22, Y+60	; 0x3c
    68d8:	7d ad       	ldd	r23, Y+61	; 0x3d
    68da:	8e ad       	ldd	r24, Y+62	; 0x3e
    68dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    68de:	6d 97       	sbiw	r28, 0x1d	; 29
    68e0:	a6 01       	movw	r20, r12
    68e2:	95 01       	movw	r18, r10
    68e4:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <__mulsi3>
    68e8:	7b 01       	movw	r14, r22
    68ea:	8c 01       	movw	r16, r24
    68ec:	6d 96       	adiw	r28, 0x1d	; 29
    68ee:	6c ad       	ldd	r22, Y+60	; 0x3c
    68f0:	7d ad       	ldd	r23, Y+61	; 0x3d
    68f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    68f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    68f6:	6d 97       	sbiw	r28, 0x1d	; 29
    68f8:	a2 01       	movw	r20, r4
    68fa:	91 01       	movw	r18, r2
    68fc:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <__mulsi3>
    6900:	5b 01       	movw	r10, r22
    6902:	6c 01       	movw	r12, r24
    6904:	a8 01       	movw	r20, r16
    6906:	97 01       	movw	r18, r14
    6908:	26 0d       	add	r18, r6
    690a:	37 1d       	adc	r19, r7
    690c:	48 1d       	adc	r20, r8
    690e:	59 1d       	adc	r21, r9
    6910:	69 96       	adiw	r28, 0x19	; 25
    6912:	6c ac       	ldd	r6, Y+60	; 0x3c
    6914:	7d ac       	ldd	r7, Y+61	; 0x3d
    6916:	8e ac       	ldd	r8, Y+62	; 0x3e
    6918:	9f ac       	ldd	r9, Y+63	; 0x3f
    691a:	69 97       	sbiw	r28, 0x19	; 25
    691c:	c4 01       	movw	r24, r8
    691e:	aa 27       	eor	r26, r26
    6920:	bb 27       	eor	r27, r27
    6922:	28 0f       	add	r18, r24
    6924:	39 1f       	adc	r19, r25
    6926:	4a 1f       	adc	r20, r26
    6928:	5b 1f       	adc	r21, r27
    692a:	2e 15       	cp	r18, r14
    692c:	3f 05       	cpc	r19, r15
    692e:	40 07       	cpc	r20, r16
    6930:	51 07       	cpc	r21, r17
    6932:	48 f4       	brcc	.+18     	; 0x6946 <__stack+0x947>
    6934:	e1 2c       	mov	r14, r1
    6936:	f1 2c       	mov	r15, r1
    6938:	61 e0       	ldi	r22, 0x01	; 1
    693a:	06 2f       	mov	r16, r22
    693c:	11 2d       	mov	r17, r1
    693e:	ae 0c       	add	r10, r14
    6940:	bf 1c       	adc	r11, r15
    6942:	c0 1e       	adc	r12, r16
    6944:	d1 1e       	adc	r13, r17
    6946:	ca 01       	movw	r24, r20
    6948:	aa 27       	eor	r26, r26
    694a:	bb 27       	eor	r27, r27
    694c:	bc 01       	movw	r22, r24
    694e:	cd 01       	movw	r24, r26
    6950:	6a 0d       	add	r22, r10
    6952:	7b 1d       	adc	r23, r11
    6954:	8c 1d       	adc	r24, r12
    6956:	9d 1d       	adc	r25, r13
    6958:	69 8c       	ldd	r6, Y+25	; 0x19
    695a:	7a 8c       	ldd	r7, Y+26	; 0x1a
    695c:	8b 8c       	ldd	r8, Y+27	; 0x1b
    695e:	9c 8c       	ldd	r9, Y+28	; 0x1c
    6960:	66 16       	cp	r6, r22
    6962:	77 06       	cpc	r7, r23
    6964:	88 06       	cpc	r8, r24
    6966:	99 06       	cpc	r9, r25
    6968:	40 f1       	brcs	.+80     	; 0x69ba <__stack+0x9bb>
    696a:	66 15       	cp	r22, r6
    696c:	77 05       	cpc	r23, r7
    696e:	88 05       	cpc	r24, r8
    6970:	99 05       	cpc	r25, r9
    6972:	09 f0       	breq	.+2      	; 0x6976 <__stack+0x977>
    6974:	43 c0       	rjmp	.+134    	; 0x69fc <__stack+0x9fd>
    6976:	d9 01       	movw	r26, r18
    6978:	99 27       	eor	r25, r25
    697a:	88 27       	eor	r24, r24
    697c:	69 96       	adiw	r28, 0x19	; 25
    697e:	2c ad       	ldd	r18, Y+60	; 0x3c
    6980:	3d ad       	ldd	r19, Y+61	; 0x3d
    6982:	4e ad       	ldd	r20, Y+62	; 0x3e
    6984:	5f ad       	ldd	r21, Y+63	; 0x3f
    6986:	69 97       	sbiw	r28, 0x19	; 25
    6988:	40 70       	andi	r20, 0x00	; 0
    698a:	50 70       	andi	r21, 0x00	; 0
    698c:	82 0f       	add	r24, r18
    698e:	93 1f       	adc	r25, r19
    6990:	a4 1f       	adc	r26, r20
    6992:	b5 1f       	adc	r27, r21
    6994:	2d a5       	ldd	r18, Y+45	; 0x2d
    6996:	3e a5       	ldd	r19, Y+46	; 0x2e
    6998:	4f a5       	ldd	r20, Y+47	; 0x2f
    699a:	58 a9       	ldd	r21, Y+48	; 0x30
    699c:	6e 96       	adiw	r28, 0x1e	; 30
    699e:	0f ac       	ldd	r0, Y+63	; 0x3f
    69a0:	6e 97       	sbiw	r28, 0x1e	; 30
    69a2:	04 c0       	rjmp	.+8      	; 0x69ac <__stack+0x9ad>
    69a4:	22 0f       	add	r18, r18
    69a6:	33 1f       	adc	r19, r19
    69a8:	44 1f       	adc	r20, r20
    69aa:	55 1f       	adc	r21, r21
    69ac:	0a 94       	dec	r0
    69ae:	d2 f7       	brpl	.-12     	; 0x69a4 <__stack+0x9a5>
    69b0:	28 17       	cp	r18, r24
    69b2:	39 07       	cpc	r19, r25
    69b4:	4a 07       	cpc	r20, r26
    69b6:	5b 07       	cpc	r21, r27
    69b8:	08 f5       	brcc	.+66     	; 0x69fc <__stack+0x9fd>
    69ba:	09 a9       	ldd	r16, Y+49	; 0x31
    69bc:	1a a9       	ldd	r17, Y+50	; 0x32
    69be:	2b a9       	ldd	r18, Y+51	; 0x33
    69c0:	3c a9       	ldd	r19, Y+52	; 0x34
    69c2:	01 50       	subi	r16, 0x01	; 1
    69c4:	10 40       	sbci	r17, 0x00	; 0
    69c6:	20 40       	sbci	r18, 0x00	; 0
    69c8:	30 40       	sbci	r19, 0x00	; 0
    69ca:	09 ab       	std	Y+49, r16	; 0x31
    69cc:	1a ab       	std	Y+50, r17	; 0x32
    69ce:	2b ab       	std	Y+51, r18	; 0x33
    69d0:	3c ab       	std	Y+52, r19	; 0x34
    69d2:	14 c0       	rjmp	.+40     	; 0x69fc <__stack+0x9fd>
    69d4:	66 24       	eor	r6, r6
    69d6:	77 24       	eor	r7, r7
    69d8:	43 01       	movw	r8, r6
    69da:	21 e0       	ldi	r18, 0x01	; 1
    69dc:	30 e0       	ldi	r19, 0x00	; 0
    69de:	40 e0       	ldi	r20, 0x00	; 0
    69e0:	50 e0       	ldi	r21, 0x00	; 0
    69e2:	29 ab       	std	Y+49, r18	; 0x31
    69e4:	3a ab       	std	Y+50, r19	; 0x32
    69e6:	4b ab       	std	Y+51, r20	; 0x33
    69e8:	5c ab       	std	Y+52, r21	; 0x34
    69ea:	0b c0       	rjmp	.+22     	; 0x6a02 <__stack+0xa03>
    69ec:	66 24       	eor	r6, r6
    69ee:	77 24       	eor	r7, r7
    69f0:	43 01       	movw	r8, r6
    69f2:	19 aa       	std	Y+49, r1	; 0x31
    69f4:	1a aa       	std	Y+50, r1	; 0x32
    69f6:	1b aa       	std	Y+51, r1	; 0x33
    69f8:	1c aa       	std	Y+52, r1	; 0x34
    69fa:	03 c0       	rjmp	.+6      	; 0x6a02 <__stack+0xa03>
    69fc:	66 24       	eor	r6, r6
    69fe:	77 24       	eor	r7, r7
    6a00:	43 01       	movw	r8, r6
    6a02:	fe 01       	movw	r30, r28
    6a04:	71 96       	adiw	r30, 0x11	; 17
    6a06:	88 e0       	ldi	r24, 0x08	; 8
    6a08:	df 01       	movw	r26, r30
    6a0a:	1d 92       	st	X+, r1
    6a0c:	8a 95       	dec	r24
    6a0e:	e9 f7       	brne	.-6      	; 0x6a0a <__stack+0xa0b>
    6a10:	a9 a8       	ldd	r10, Y+49	; 0x31
    6a12:	ba a8       	ldd	r11, Y+50	; 0x32
    6a14:	cb a8       	ldd	r12, Y+51	; 0x33
    6a16:	dc a8       	ldd	r13, Y+52	; 0x34
    6a18:	a9 8a       	std	Y+17, r10	; 0x11
    6a1a:	ba 8a       	std	Y+18, r11	; 0x12
    6a1c:	cb 8a       	std	Y+19, r12	; 0x13
    6a1e:	dc 8a       	std	Y+20, r13	; 0x14
    6a20:	6d 8a       	std	Y+21, r6	; 0x15
    6a22:	7e 8a       	std	Y+22, r7	; 0x16
    6a24:	8f 8a       	std	Y+23, r8	; 0x17
    6a26:	98 8e       	std	Y+24, r9	; 0x18
    6a28:	29 a9       	ldd	r18, Y+49	; 0x31
    6a2a:	3a 89       	ldd	r19, Y+18	; 0x12
    6a2c:	4b 89       	ldd	r20, Y+19	; 0x13
    6a2e:	5c 89       	ldd	r21, Y+20	; 0x14
    6a30:	66 2d       	mov	r22, r6
    6a32:	7e 89       	ldd	r23, Y+22	; 0x16
    6a34:	8f 89       	ldd	r24, Y+23	; 0x17
    6a36:	98 8d       	ldd	r25, Y+24	; 0x18
    6a38:	c2 5a       	subi	r28, 0xA2	; 162
    6a3a:	df 4f       	sbci	r29, 0xFF	; 255
    6a3c:	e2 e1       	ldi	r30, 0x12	; 18
    6a3e:	0c 94 5b 3d 	jmp	0x7ab6	; 0x7ab6 <__epilogue_restores__>

00006a42 <vfprintf>:
    6a42:	2f 92       	push	r2
    6a44:	3f 92       	push	r3
    6a46:	4f 92       	push	r4
    6a48:	5f 92       	push	r5
    6a4a:	6f 92       	push	r6
    6a4c:	7f 92       	push	r7
    6a4e:	8f 92       	push	r8
    6a50:	9f 92       	push	r9
    6a52:	af 92       	push	r10
    6a54:	bf 92       	push	r11
    6a56:	cf 92       	push	r12
    6a58:	df 92       	push	r13
    6a5a:	ef 92       	push	r14
    6a5c:	ff 92       	push	r15
    6a5e:	0f 93       	push	r16
    6a60:	1f 93       	push	r17
    6a62:	df 93       	push	r29
    6a64:	cf 93       	push	r28
    6a66:	cd b7       	in	r28, 0x3d	; 61
    6a68:	de b7       	in	r29, 0x3e	; 62
    6a6a:	61 97       	sbiw	r28, 0x11	; 17
    6a6c:	cd bf       	out	0x3d, r28	; 61
    6a6e:	de bf       	out	0x3e, r29	; 62
    6a70:	3c 01       	movw	r6, r24
    6a72:	6e 87       	std	Y+14, r22	; 0x0e
    6a74:	7f 87       	std	Y+15, r23	; 0x0f
    6a76:	6a 01       	movw	r12, r20
    6a78:	fc 01       	movw	r30, r24
    6a7a:	16 82       	std	Z+6, r1	; 0x06
    6a7c:	17 82       	std	Z+7, r1	; 0x07
    6a7e:	83 81       	ldd	r24, Z+3	; 0x03
    6a80:	81 fd       	sbrc	r24, 1
    6a82:	03 c0       	rjmp	.+6      	; 0x6a8a <vfprintf+0x48>
    6a84:	6f ef       	ldi	r22, 0xFF	; 255
    6a86:	7f ef       	ldi	r23, 0xFF	; 255
    6a88:	6f c3       	rjmp	.+1758   	; 0x7168 <vfprintf+0x726>
    6a8a:	9e 01       	movw	r18, r28
    6a8c:	2f 5f       	subi	r18, 0xFF	; 255
    6a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    6a90:	28 8b       	std	Y+16, r18	; 0x10
    6a92:	39 8b       	std	Y+17, r19	; 0x11
    6a94:	f3 01       	movw	r30, r6
    6a96:	23 81       	ldd	r18, Z+3	; 0x03
    6a98:	ee 85       	ldd	r30, Y+14	; 0x0e
    6a9a:	ff 85       	ldd	r31, Y+15	; 0x0f
    6a9c:	23 fd       	sbrc	r18, 3
    6a9e:	85 91       	lpm	r24, Z+
    6aa0:	23 ff       	sbrs	r18, 3
    6aa2:	81 91       	ld	r24, Z+
    6aa4:	ee 87       	std	Y+14, r30	; 0x0e
    6aa6:	ff 87       	std	Y+15, r31	; 0x0f
    6aa8:	88 23       	and	r24, r24
    6aaa:	09 f4       	brne	.+2      	; 0x6aae <vfprintf+0x6c>
    6aac:	5a c3       	rjmp	.+1716   	; 0x7162 <vfprintf+0x720>
    6aae:	85 32       	cpi	r24, 0x25	; 37
    6ab0:	51 f4       	brne	.+20     	; 0x6ac6 <vfprintf+0x84>
    6ab2:	ee 85       	ldd	r30, Y+14	; 0x0e
    6ab4:	ff 85       	ldd	r31, Y+15	; 0x0f
    6ab6:	23 fd       	sbrc	r18, 3
    6ab8:	85 91       	lpm	r24, Z+
    6aba:	23 ff       	sbrs	r18, 3
    6abc:	81 91       	ld	r24, Z+
    6abe:	ee 87       	std	Y+14, r30	; 0x0e
    6ac0:	ff 87       	std	Y+15, r31	; 0x0f
    6ac2:	85 32       	cpi	r24, 0x25	; 37
    6ac4:	29 f4       	brne	.+10     	; 0x6ad0 <vfprintf+0x8e>
    6ac6:	90 e0       	ldi	r25, 0x00	; 0
    6ac8:	b3 01       	movw	r22, r6
    6aca:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6ace:	e2 cf       	rjmp	.-60     	; 0x6a94 <vfprintf+0x52>
    6ad0:	98 2f       	mov	r25, r24
    6ad2:	10 e0       	ldi	r17, 0x00	; 0
    6ad4:	88 24       	eor	r8, r8
    6ad6:	99 24       	eor	r9, r9
    6ad8:	10 32       	cpi	r17, 0x20	; 32
    6ada:	b0 f4       	brcc	.+44     	; 0x6b08 <vfprintf+0xc6>
    6adc:	9b 32       	cpi	r25, 0x2B	; 43
    6ade:	69 f0       	breq	.+26     	; 0x6afa <vfprintf+0xb8>
    6ae0:	9c 32       	cpi	r25, 0x2C	; 44
    6ae2:	28 f4       	brcc	.+10     	; 0x6aee <vfprintf+0xac>
    6ae4:	90 32       	cpi	r25, 0x20	; 32
    6ae6:	51 f0       	breq	.+20     	; 0x6afc <vfprintf+0xba>
    6ae8:	93 32       	cpi	r25, 0x23	; 35
    6aea:	71 f4       	brne	.+28     	; 0x6b08 <vfprintf+0xc6>
    6aec:	0b c0       	rjmp	.+22     	; 0x6b04 <vfprintf+0xc2>
    6aee:	9d 32       	cpi	r25, 0x2D	; 45
    6af0:	39 f0       	breq	.+14     	; 0x6b00 <vfprintf+0xbe>
    6af2:	90 33       	cpi	r25, 0x30	; 48
    6af4:	49 f4       	brne	.+18     	; 0x6b08 <vfprintf+0xc6>
    6af6:	11 60       	ori	r17, 0x01	; 1
    6af8:	28 c0       	rjmp	.+80     	; 0x6b4a <vfprintf+0x108>
    6afa:	12 60       	ori	r17, 0x02	; 2
    6afc:	14 60       	ori	r17, 0x04	; 4
    6afe:	25 c0       	rjmp	.+74     	; 0x6b4a <vfprintf+0x108>
    6b00:	18 60       	ori	r17, 0x08	; 8
    6b02:	23 c0       	rjmp	.+70     	; 0x6b4a <vfprintf+0x108>
    6b04:	10 61       	ori	r17, 0x10	; 16
    6b06:	21 c0       	rjmp	.+66     	; 0x6b4a <vfprintf+0x108>
    6b08:	17 fd       	sbrc	r17, 7
    6b0a:	2a c0       	rjmp	.+84     	; 0x6b60 <vfprintf+0x11e>
    6b0c:	89 2f       	mov	r24, r25
    6b0e:	80 53       	subi	r24, 0x30	; 48
    6b10:	8a 30       	cpi	r24, 0x0A	; 10
    6b12:	78 f4       	brcc	.+30     	; 0x6b32 <vfprintf+0xf0>
    6b14:	16 ff       	sbrs	r17, 6
    6b16:	06 c0       	rjmp	.+12     	; 0x6b24 <vfprintf+0xe2>
    6b18:	fa e0       	ldi	r31, 0x0A	; 10
    6b1a:	9f 9e       	mul	r9, r31
    6b1c:	90 2c       	mov	r9, r0
    6b1e:	11 24       	eor	r1, r1
    6b20:	98 0e       	add	r9, r24
    6b22:	13 c0       	rjmp	.+38     	; 0x6b4a <vfprintf+0x108>
    6b24:	3a e0       	ldi	r19, 0x0A	; 10
    6b26:	83 9e       	mul	r8, r19
    6b28:	80 2c       	mov	r8, r0
    6b2a:	11 24       	eor	r1, r1
    6b2c:	88 0e       	add	r8, r24
    6b2e:	10 62       	ori	r17, 0x20	; 32
    6b30:	0c c0       	rjmp	.+24     	; 0x6b4a <vfprintf+0x108>
    6b32:	9e 32       	cpi	r25, 0x2E	; 46
    6b34:	21 f4       	brne	.+8      	; 0x6b3e <vfprintf+0xfc>
    6b36:	16 fd       	sbrc	r17, 6
    6b38:	14 c3       	rjmp	.+1576   	; 0x7162 <vfprintf+0x720>
    6b3a:	10 64       	ori	r17, 0x40	; 64
    6b3c:	06 c0       	rjmp	.+12     	; 0x6b4a <vfprintf+0x108>
    6b3e:	9c 36       	cpi	r25, 0x6C	; 108
    6b40:	11 f4       	brne	.+4      	; 0x6b46 <vfprintf+0x104>
    6b42:	10 68       	ori	r17, 0x80	; 128
    6b44:	02 c0       	rjmp	.+4      	; 0x6b4a <vfprintf+0x108>
    6b46:	98 36       	cpi	r25, 0x68	; 104
    6b48:	59 f4       	brne	.+22     	; 0x6b60 <vfprintf+0x11e>
    6b4a:	ee 85       	ldd	r30, Y+14	; 0x0e
    6b4c:	ff 85       	ldd	r31, Y+15	; 0x0f
    6b4e:	23 fd       	sbrc	r18, 3
    6b50:	95 91       	lpm	r25, Z+
    6b52:	23 ff       	sbrs	r18, 3
    6b54:	91 91       	ld	r25, Z+
    6b56:	ee 87       	std	Y+14, r30	; 0x0e
    6b58:	ff 87       	std	Y+15, r31	; 0x0f
    6b5a:	99 23       	and	r25, r25
    6b5c:	09 f0       	breq	.+2      	; 0x6b60 <vfprintf+0x11e>
    6b5e:	bc cf       	rjmp	.-136    	; 0x6ad8 <vfprintf+0x96>
    6b60:	89 2f       	mov	r24, r25
    6b62:	85 54       	subi	r24, 0x45	; 69
    6b64:	83 30       	cpi	r24, 0x03	; 3
    6b66:	20 f4       	brcc	.+8      	; 0x6b70 <vfprintf+0x12e>
    6b68:	81 2f       	mov	r24, r17
    6b6a:	80 61       	ori	r24, 0x10	; 16
    6b6c:	90 5e       	subi	r25, 0xE0	; 224
    6b6e:	07 c0       	rjmp	.+14     	; 0x6b7e <vfprintf+0x13c>
    6b70:	89 2f       	mov	r24, r25
    6b72:	85 56       	subi	r24, 0x65	; 101
    6b74:	83 30       	cpi	r24, 0x03	; 3
    6b76:	08 f0       	brcs	.+2      	; 0x6b7a <vfprintf+0x138>
    6b78:	9f c1       	rjmp	.+830    	; 0x6eb8 <vfprintf+0x476>
    6b7a:	81 2f       	mov	r24, r17
    6b7c:	8f 7e       	andi	r24, 0xEF	; 239
    6b7e:	86 fd       	sbrc	r24, 6
    6b80:	02 c0       	rjmp	.+4      	; 0x6b86 <vfprintf+0x144>
    6b82:	76 e0       	ldi	r23, 0x06	; 6
    6b84:	97 2e       	mov	r9, r23
    6b86:	6f e3       	ldi	r22, 0x3F	; 63
    6b88:	f6 2e       	mov	r15, r22
    6b8a:	f8 22       	and	r15, r24
    6b8c:	95 36       	cpi	r25, 0x65	; 101
    6b8e:	19 f4       	brne	.+6      	; 0x6b96 <vfprintf+0x154>
    6b90:	f0 e4       	ldi	r31, 0x40	; 64
    6b92:	ff 2a       	or	r15, r31
    6b94:	07 c0       	rjmp	.+14     	; 0x6ba4 <vfprintf+0x162>
    6b96:	96 36       	cpi	r25, 0x66	; 102
    6b98:	19 f4       	brne	.+6      	; 0x6ba0 <vfprintf+0x15e>
    6b9a:	20 e8       	ldi	r18, 0x80	; 128
    6b9c:	f2 2a       	or	r15, r18
    6b9e:	02 c0       	rjmp	.+4      	; 0x6ba4 <vfprintf+0x162>
    6ba0:	91 10       	cpse	r9, r1
    6ba2:	9a 94       	dec	r9
    6ba4:	f7 fe       	sbrs	r15, 7
    6ba6:	0a c0       	rjmp	.+20     	; 0x6bbc <vfprintf+0x17a>
    6ba8:	3b e3       	ldi	r19, 0x3B	; 59
    6baa:	39 15       	cp	r19, r9
    6bac:	18 f4       	brcc	.+6      	; 0x6bb4 <vfprintf+0x172>
    6bae:	5c e3       	ldi	r21, 0x3C	; 60
    6bb0:	b5 2e       	mov	r11, r21
    6bb2:	02 c0       	rjmp	.+4      	; 0x6bb8 <vfprintf+0x176>
    6bb4:	b9 2c       	mov	r11, r9
    6bb6:	b3 94       	inc	r11
    6bb8:	27 e0       	ldi	r18, 0x07	; 7
    6bba:	09 c0       	rjmp	.+18     	; 0x6bce <vfprintf+0x18c>
    6bbc:	47 e0       	ldi	r20, 0x07	; 7
    6bbe:	49 15       	cp	r20, r9
    6bc0:	20 f4       	brcc	.+8      	; 0x6bca <vfprintf+0x188>
    6bc2:	bb 24       	eor	r11, r11
    6bc4:	47 e0       	ldi	r20, 0x07	; 7
    6bc6:	94 2e       	mov	r9, r20
    6bc8:	f7 cf       	rjmp	.-18     	; 0x6bb8 <vfprintf+0x176>
    6bca:	29 2d       	mov	r18, r9
    6bcc:	bb 24       	eor	r11, r11
    6bce:	c6 01       	movw	r24, r12
    6bd0:	04 96       	adiw	r24, 0x04	; 4
    6bd2:	8c 87       	std	Y+12, r24	; 0x0c
    6bd4:	9d 87       	std	Y+13, r25	; 0x0d
    6bd6:	f6 01       	movw	r30, r12
    6bd8:	60 81       	ld	r22, Z
    6bda:	71 81       	ldd	r23, Z+1	; 0x01
    6bdc:	82 81       	ldd	r24, Z+2	; 0x02
    6bde:	93 81       	ldd	r25, Z+3	; 0x03
    6be0:	ae 01       	movw	r20, r28
    6be2:	4f 5f       	subi	r20, 0xFF	; 255
    6be4:	5f 4f       	sbci	r21, 0xFF	; 255
    6be6:	0b 2d       	mov	r16, r11
    6be8:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <__ftoa_engine>
    6bec:	6c 01       	movw	r12, r24
    6bee:	09 81       	ldd	r16, Y+1	; 0x01
    6bf0:	20 2e       	mov	r2, r16
    6bf2:	33 24       	eor	r3, r3
    6bf4:	00 ff       	sbrs	r16, 0
    6bf6:	04 c0       	rjmp	.+8      	; 0x6c00 <vfprintf+0x1be>
    6bf8:	03 fd       	sbrc	r16, 3
    6bfa:	02 c0       	rjmp	.+4      	; 0x6c00 <vfprintf+0x1be>
    6bfc:	1d e2       	ldi	r17, 0x2D	; 45
    6bfe:	09 c0       	rjmp	.+18     	; 0x6c12 <vfprintf+0x1d0>
    6c00:	f1 fe       	sbrs	r15, 1
    6c02:	02 c0       	rjmp	.+4      	; 0x6c08 <vfprintf+0x1c6>
    6c04:	1b e2       	ldi	r17, 0x2B	; 43
    6c06:	05 c0       	rjmp	.+10     	; 0x6c12 <vfprintf+0x1d0>
    6c08:	f2 fc       	sbrc	r15, 2
    6c0a:	02 c0       	rjmp	.+4      	; 0x6c10 <vfprintf+0x1ce>
    6c0c:	10 e0       	ldi	r17, 0x00	; 0
    6c0e:	01 c0       	rjmp	.+2      	; 0x6c12 <vfprintf+0x1d0>
    6c10:	10 e2       	ldi	r17, 0x20	; 32
    6c12:	c1 01       	movw	r24, r2
    6c14:	8c 70       	andi	r24, 0x0C	; 12
    6c16:	90 70       	andi	r25, 0x00	; 0
    6c18:	89 2b       	or	r24, r25
    6c1a:	b9 f1       	breq	.+110    	; 0x6c8a <vfprintf+0x248>
    6c1c:	11 23       	and	r17, r17
    6c1e:	11 f4       	brne	.+4      	; 0x6c24 <vfprintf+0x1e2>
    6c20:	83 e0       	ldi	r24, 0x03	; 3
    6c22:	01 c0       	rjmp	.+2      	; 0x6c26 <vfprintf+0x1e4>
    6c24:	84 e0       	ldi	r24, 0x04	; 4
    6c26:	88 15       	cp	r24, r8
    6c28:	10 f0       	brcs	.+4      	; 0x6c2e <vfprintf+0x1ec>
    6c2a:	88 24       	eor	r8, r8
    6c2c:	0a c0       	rjmp	.+20     	; 0x6c42 <vfprintf+0x200>
    6c2e:	88 1a       	sub	r8, r24
    6c30:	f3 fc       	sbrc	r15, 3
    6c32:	07 c0       	rjmp	.+14     	; 0x6c42 <vfprintf+0x200>
    6c34:	80 e2       	ldi	r24, 0x20	; 32
    6c36:	90 e0       	ldi	r25, 0x00	; 0
    6c38:	b3 01       	movw	r22, r6
    6c3a:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6c3e:	8a 94       	dec	r8
    6c40:	c9 f7       	brne	.-14     	; 0x6c34 <vfprintf+0x1f2>
    6c42:	11 23       	and	r17, r17
    6c44:	29 f0       	breq	.+10     	; 0x6c50 <vfprintf+0x20e>
    6c46:	81 2f       	mov	r24, r17
    6c48:	90 e0       	ldi	r25, 0x00	; 0
    6c4a:	b3 01       	movw	r22, r6
    6c4c:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6c50:	23 fe       	sbrs	r2, 3
    6c52:	03 c0       	rjmp	.+6      	; 0x6c5a <vfprintf+0x218>
    6c54:	03 e3       	ldi	r16, 0x33	; 51
    6c56:	12 e0       	ldi	r17, 0x02	; 2
    6c58:	0e c0       	rjmp	.+28     	; 0x6c76 <vfprintf+0x234>
    6c5a:	07 e3       	ldi	r16, 0x37	; 55
    6c5c:	12 e0       	ldi	r17, 0x02	; 2
    6c5e:	0b c0       	rjmp	.+22     	; 0x6c76 <vfprintf+0x234>
    6c60:	e1 14       	cp	r14, r1
    6c62:	f1 04       	cpc	r15, r1
    6c64:	09 f0       	breq	.+2      	; 0x6c68 <vfprintf+0x226>
    6c66:	80 52       	subi	r24, 0x20	; 32
    6c68:	90 e0       	ldi	r25, 0x00	; 0
    6c6a:	b3 01       	movw	r22, r6
    6c6c:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6c70:	0f 5f       	subi	r16, 0xFF	; 255
    6c72:	1f 4f       	sbci	r17, 0xFF	; 255
    6c74:	05 c0       	rjmp	.+10     	; 0x6c80 <vfprintf+0x23e>
    6c76:	ef 2c       	mov	r14, r15
    6c78:	ff 24       	eor	r15, r15
    6c7a:	f0 e1       	ldi	r31, 0x10	; 16
    6c7c:	ef 22       	and	r14, r31
    6c7e:	ff 24       	eor	r15, r15
    6c80:	f8 01       	movw	r30, r16
    6c82:	84 91       	lpm	r24, Z+
    6c84:	88 23       	and	r24, r24
    6c86:	61 f7       	brne	.-40     	; 0x6c60 <vfprintf+0x21e>
    6c88:	14 c1       	rjmp	.+552    	; 0x6eb2 <vfprintf+0x470>
    6c8a:	f7 fe       	sbrs	r15, 7
    6c8c:	12 c0       	rjmp	.+36     	; 0x6cb2 <vfprintf+0x270>
    6c8e:	bc 0c       	add	r11, r12
    6c90:	24 fe       	sbrs	r2, 4
    6c92:	04 c0       	rjmp	.+8      	; 0x6c9c <vfprintf+0x25a>
    6c94:	8a 81       	ldd	r24, Y+2	; 0x02
    6c96:	81 33       	cpi	r24, 0x31	; 49
    6c98:	09 f4       	brne	.+2      	; 0x6c9c <vfprintf+0x25a>
    6c9a:	ba 94       	dec	r11
    6c9c:	1b 14       	cp	r1, r11
    6c9e:	1c f0       	brlt	.+6      	; 0x6ca6 <vfprintf+0x264>
    6ca0:	bb 24       	eor	r11, r11
    6ca2:	b3 94       	inc	r11
    6ca4:	2d c0       	rjmp	.+90     	; 0x6d00 <vfprintf+0x2be>
    6ca6:	f8 e0       	ldi	r31, 0x08	; 8
    6ca8:	fb 15       	cp	r31, r11
    6caa:	50 f5       	brcc	.+84     	; 0x6d00 <vfprintf+0x2be>
    6cac:	38 e0       	ldi	r19, 0x08	; 8
    6cae:	b3 2e       	mov	r11, r19
    6cb0:	27 c0       	rjmp	.+78     	; 0x6d00 <vfprintf+0x2be>
    6cb2:	f6 fc       	sbrc	r15, 6
    6cb4:	25 c0       	rjmp	.+74     	; 0x6d00 <vfprintf+0x2be>
    6cb6:	89 2d       	mov	r24, r9
    6cb8:	90 e0       	ldi	r25, 0x00	; 0
    6cba:	8c 15       	cp	r24, r12
    6cbc:	9d 05       	cpc	r25, r13
    6cbe:	4c f0       	brlt	.+18     	; 0x6cd2 <vfprintf+0x290>
    6cc0:	2c ef       	ldi	r18, 0xFC	; 252
    6cc2:	c2 16       	cp	r12, r18
    6cc4:	2f ef       	ldi	r18, 0xFF	; 255
    6cc6:	d2 06       	cpc	r13, r18
    6cc8:	24 f0       	brlt	.+8      	; 0x6cd2 <vfprintf+0x290>
    6cca:	30 e8       	ldi	r19, 0x80	; 128
    6ccc:	f3 2a       	or	r15, r19
    6cce:	01 c0       	rjmp	.+2      	; 0x6cd2 <vfprintf+0x290>
    6cd0:	9a 94       	dec	r9
    6cd2:	99 20       	and	r9, r9
    6cd4:	49 f0       	breq	.+18     	; 0x6ce8 <vfprintf+0x2a6>
    6cd6:	e2 e0       	ldi	r30, 0x02	; 2
    6cd8:	f0 e0       	ldi	r31, 0x00	; 0
    6cda:	ec 0f       	add	r30, r28
    6cdc:	fd 1f       	adc	r31, r29
    6cde:	e9 0d       	add	r30, r9
    6ce0:	f1 1d       	adc	r31, r1
    6ce2:	80 81       	ld	r24, Z
    6ce4:	80 33       	cpi	r24, 0x30	; 48
    6ce6:	a1 f3       	breq	.-24     	; 0x6cd0 <vfprintf+0x28e>
    6ce8:	f7 fe       	sbrs	r15, 7
    6cea:	0a c0       	rjmp	.+20     	; 0x6d00 <vfprintf+0x2be>
    6cec:	b9 2c       	mov	r11, r9
    6cee:	b3 94       	inc	r11
    6cf0:	89 2d       	mov	r24, r9
    6cf2:	90 e0       	ldi	r25, 0x00	; 0
    6cf4:	c8 16       	cp	r12, r24
    6cf6:	d9 06       	cpc	r13, r25
    6cf8:	14 f0       	brlt	.+4      	; 0x6cfe <vfprintf+0x2bc>
    6cfa:	99 24       	eor	r9, r9
    6cfc:	01 c0       	rjmp	.+2      	; 0x6d00 <vfprintf+0x2be>
    6cfe:	9c 18       	sub	r9, r12
    6d00:	f7 fc       	sbrc	r15, 7
    6d02:	03 c0       	rjmp	.+6      	; 0x6d0a <vfprintf+0x2c8>
    6d04:	25 e0       	ldi	r18, 0x05	; 5
    6d06:	30 e0       	ldi	r19, 0x00	; 0
    6d08:	09 c0       	rjmp	.+18     	; 0x6d1c <vfprintf+0x2da>
    6d0a:	1c 14       	cp	r1, r12
    6d0c:	1d 04       	cpc	r1, r13
    6d0e:	1c f0       	brlt	.+6      	; 0x6d16 <vfprintf+0x2d4>
    6d10:	21 e0       	ldi	r18, 0x01	; 1
    6d12:	30 e0       	ldi	r19, 0x00	; 0
    6d14:	03 c0       	rjmp	.+6      	; 0x6d1c <vfprintf+0x2da>
    6d16:	96 01       	movw	r18, r12
    6d18:	2f 5f       	subi	r18, 0xFF	; 255
    6d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    6d1c:	11 23       	and	r17, r17
    6d1e:	11 f0       	breq	.+4      	; 0x6d24 <vfprintf+0x2e2>
    6d20:	2f 5f       	subi	r18, 0xFF	; 255
    6d22:	3f 4f       	sbci	r19, 0xFF	; 255
    6d24:	99 20       	and	r9, r9
    6d26:	29 f0       	breq	.+10     	; 0x6d32 <vfprintf+0x2f0>
    6d28:	89 2d       	mov	r24, r9
    6d2a:	90 e0       	ldi	r25, 0x00	; 0
    6d2c:	01 96       	adiw	r24, 0x01	; 1
    6d2e:	28 0f       	add	r18, r24
    6d30:	39 1f       	adc	r19, r25
    6d32:	88 2d       	mov	r24, r8
    6d34:	90 e0       	ldi	r25, 0x00	; 0
    6d36:	28 17       	cp	r18, r24
    6d38:	39 07       	cpc	r19, r25
    6d3a:	14 f0       	brlt	.+4      	; 0x6d40 <vfprintf+0x2fe>
    6d3c:	88 24       	eor	r8, r8
    6d3e:	01 c0       	rjmp	.+2      	; 0x6d42 <vfprintf+0x300>
    6d40:	82 1a       	sub	r8, r18
    6d42:	4f 2c       	mov	r4, r15
    6d44:	55 24       	eor	r5, r5
    6d46:	c2 01       	movw	r24, r4
    6d48:	89 70       	andi	r24, 0x09	; 9
    6d4a:	90 70       	andi	r25, 0x00	; 0
    6d4c:	89 2b       	or	r24, r25
    6d4e:	39 f0       	breq	.+14     	; 0x6d5e <vfprintf+0x31c>
    6d50:	08 c0       	rjmp	.+16     	; 0x6d62 <vfprintf+0x320>
    6d52:	80 e2       	ldi	r24, 0x20	; 32
    6d54:	90 e0       	ldi	r25, 0x00	; 0
    6d56:	b3 01       	movw	r22, r6
    6d58:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6d5c:	8a 94       	dec	r8
    6d5e:	88 20       	and	r8, r8
    6d60:	c1 f7       	brne	.-16     	; 0x6d52 <vfprintf+0x310>
    6d62:	11 23       	and	r17, r17
    6d64:	29 f0       	breq	.+10     	; 0x6d70 <vfprintf+0x32e>
    6d66:	81 2f       	mov	r24, r17
    6d68:	90 e0       	ldi	r25, 0x00	; 0
    6d6a:	b3 01       	movw	r22, r6
    6d6c:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6d70:	43 fe       	sbrs	r4, 3
    6d72:	07 c0       	rjmp	.+14     	; 0x6d82 <vfprintf+0x340>
    6d74:	08 c0       	rjmp	.+16     	; 0x6d86 <vfprintf+0x344>
    6d76:	80 e3       	ldi	r24, 0x30	; 48
    6d78:	90 e0       	ldi	r25, 0x00	; 0
    6d7a:	b3 01       	movw	r22, r6
    6d7c:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6d80:	8a 94       	dec	r8
    6d82:	88 20       	and	r8, r8
    6d84:	c1 f7       	brne	.-16     	; 0x6d76 <vfprintf+0x334>
    6d86:	f7 fe       	sbrs	r15, 7
    6d88:	46 c0       	rjmp	.+140    	; 0x6e16 <vfprintf+0x3d4>
    6d8a:	86 01       	movw	r16, r12
    6d8c:	d7 fe       	sbrs	r13, 7
    6d8e:	02 c0       	rjmp	.+4      	; 0x6d94 <vfprintf+0x352>
    6d90:	00 e0       	ldi	r16, 0x00	; 0
    6d92:	10 e0       	ldi	r17, 0x00	; 0
    6d94:	76 01       	movw	r14, r12
    6d96:	08 94       	sec
    6d98:	e1 1c       	adc	r14, r1
    6d9a:	f1 1c       	adc	r15, r1
    6d9c:	e0 1a       	sub	r14, r16
    6d9e:	f1 0a       	sbc	r15, r17
    6da0:	41 e0       	ldi	r20, 0x01	; 1
    6da2:	50 e0       	ldi	r21, 0x00	; 0
    6da4:	4c 0f       	add	r20, r28
    6da6:	5d 1f       	adc	r21, r29
    6da8:	e4 0e       	add	r14, r20
    6daa:	f5 1e       	adc	r15, r21
    6dac:	26 01       	movw	r4, r12
    6dae:	4b 18       	sub	r4, r11
    6db0:	51 08       	sbc	r5, r1
    6db2:	89 2d       	mov	r24, r9
    6db4:	90 e0       	ldi	r25, 0x00	; 0
    6db6:	aa 24       	eor	r10, r10
    6db8:	bb 24       	eor	r11, r11
    6dba:	a8 1a       	sub	r10, r24
    6dbc:	b9 0a       	sbc	r11, r25
    6dbe:	5f ef       	ldi	r21, 0xFF	; 255
    6dc0:	0f 3f       	cpi	r16, 0xFF	; 255
    6dc2:	15 07       	cpc	r17, r21
    6dc4:	29 f4       	brne	.+10     	; 0x6dd0 <vfprintf+0x38e>
    6dc6:	8e e2       	ldi	r24, 0x2E	; 46
    6dc8:	90 e0       	ldi	r25, 0x00	; 0
    6dca:	b3 01       	movw	r22, r6
    6dcc:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6dd0:	c0 16       	cp	r12, r16
    6dd2:	d1 06       	cpc	r13, r17
    6dd4:	34 f0       	brlt	.+12     	; 0x6de2 <vfprintf+0x3a0>
    6dd6:	40 16       	cp	r4, r16
    6dd8:	51 06       	cpc	r5, r17
    6dda:	1c f4       	brge	.+6      	; 0x6de2 <vfprintf+0x3a0>
    6ddc:	f7 01       	movw	r30, r14
    6dde:	80 81       	ld	r24, Z
    6de0:	01 c0       	rjmp	.+2      	; 0x6de4 <vfprintf+0x3a2>
    6de2:	80 e3       	ldi	r24, 0x30	; 48
    6de4:	01 50       	subi	r16, 0x01	; 1
    6de6:	10 40       	sbci	r17, 0x00	; 0
    6de8:	08 94       	sec
    6dea:	e1 1c       	adc	r14, r1
    6dec:	f1 1c       	adc	r15, r1
    6dee:	0a 15       	cp	r16, r10
    6df0:	1b 05       	cpc	r17, r11
    6df2:	2c f0       	brlt	.+10     	; 0x6dfe <vfprintf+0x3bc>
    6df4:	90 e0       	ldi	r25, 0x00	; 0
    6df6:	b3 01       	movw	r22, r6
    6df8:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6dfc:	e0 cf       	rjmp	.-64     	; 0x6dbe <vfprintf+0x37c>
    6dfe:	0c 15       	cp	r16, r12
    6e00:	1d 05       	cpc	r17, r13
    6e02:	39 f4       	brne	.+14     	; 0x6e12 <vfprintf+0x3d0>
    6e04:	9a 81       	ldd	r25, Y+2	; 0x02
    6e06:	96 33       	cpi	r25, 0x36	; 54
    6e08:	18 f4       	brcc	.+6      	; 0x6e10 <vfprintf+0x3ce>
    6e0a:	95 33       	cpi	r25, 0x35	; 53
    6e0c:	11 f4       	brne	.+4      	; 0x6e12 <vfprintf+0x3d0>
    6e0e:	24 fe       	sbrs	r2, 4
    6e10:	81 e3       	ldi	r24, 0x31	; 49
    6e12:	90 e0       	ldi	r25, 0x00	; 0
    6e14:	4b c0       	rjmp	.+150    	; 0x6eac <vfprintf+0x46a>
    6e16:	8a 81       	ldd	r24, Y+2	; 0x02
    6e18:	81 33       	cpi	r24, 0x31	; 49
    6e1a:	09 f0       	breq	.+2      	; 0x6e1e <vfprintf+0x3dc>
    6e1c:	0f 7e       	andi	r16, 0xEF	; 239
    6e1e:	90 e0       	ldi	r25, 0x00	; 0
    6e20:	b3 01       	movw	r22, r6
    6e22:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6e26:	99 20       	and	r9, r9
    6e28:	a1 f0       	breq	.+40     	; 0x6e52 <vfprintf+0x410>
    6e2a:	8e e2       	ldi	r24, 0x2E	; 46
    6e2c:	90 e0       	ldi	r25, 0x00	; 0
    6e2e:	b3 01       	movw	r22, r6
    6e30:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6e34:	12 e0       	ldi	r17, 0x02	; 2
    6e36:	e1 e0       	ldi	r30, 0x01	; 1
    6e38:	f0 e0       	ldi	r31, 0x00	; 0
    6e3a:	ec 0f       	add	r30, r28
    6e3c:	fd 1f       	adc	r31, r29
    6e3e:	e1 0f       	add	r30, r17
    6e40:	f1 1d       	adc	r31, r1
    6e42:	1f 5f       	subi	r17, 0xFF	; 255
    6e44:	80 81       	ld	r24, Z
    6e46:	90 e0       	ldi	r25, 0x00	; 0
    6e48:	b3 01       	movw	r22, r6
    6e4a:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6e4e:	9a 94       	dec	r9
    6e50:	91 f7       	brne	.-28     	; 0x6e36 <vfprintf+0x3f4>
    6e52:	44 fc       	sbrc	r4, 4
    6e54:	03 c0       	rjmp	.+6      	; 0x6e5c <vfprintf+0x41a>
    6e56:	85 e6       	ldi	r24, 0x65	; 101
    6e58:	90 e0       	ldi	r25, 0x00	; 0
    6e5a:	02 c0       	rjmp	.+4      	; 0x6e60 <vfprintf+0x41e>
    6e5c:	85 e4       	ldi	r24, 0x45	; 69
    6e5e:	90 e0       	ldi	r25, 0x00	; 0
    6e60:	b3 01       	movw	r22, r6
    6e62:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6e66:	d7 fc       	sbrc	r13, 7
    6e68:	05 c0       	rjmp	.+10     	; 0x6e74 <vfprintf+0x432>
    6e6a:	c1 14       	cp	r12, r1
    6e6c:	d1 04       	cpc	r13, r1
    6e6e:	41 f4       	brne	.+16     	; 0x6e80 <vfprintf+0x43e>
    6e70:	04 ff       	sbrs	r16, 4
    6e72:	06 c0       	rjmp	.+12     	; 0x6e80 <vfprintf+0x43e>
    6e74:	d0 94       	com	r13
    6e76:	c1 94       	neg	r12
    6e78:	d1 08       	sbc	r13, r1
    6e7a:	d3 94       	inc	r13
    6e7c:	8d e2       	ldi	r24, 0x2D	; 45
    6e7e:	01 c0       	rjmp	.+2      	; 0x6e82 <vfprintf+0x440>
    6e80:	8b e2       	ldi	r24, 0x2B	; 43
    6e82:	90 e0       	ldi	r25, 0x00	; 0
    6e84:	b3 01       	movw	r22, r6
    6e86:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6e8a:	80 e3       	ldi	r24, 0x30	; 48
    6e8c:	05 c0       	rjmp	.+10     	; 0x6e98 <vfprintf+0x456>
    6e8e:	8f 5f       	subi	r24, 0xFF	; 255
    6e90:	26 ef       	ldi	r18, 0xF6	; 246
    6e92:	3f ef       	ldi	r19, 0xFF	; 255
    6e94:	c2 0e       	add	r12, r18
    6e96:	d3 1e       	adc	r13, r19
    6e98:	3a e0       	ldi	r19, 0x0A	; 10
    6e9a:	c3 16       	cp	r12, r19
    6e9c:	d1 04       	cpc	r13, r1
    6e9e:	bc f7       	brge	.-18     	; 0x6e8e <vfprintf+0x44c>
    6ea0:	90 e0       	ldi	r25, 0x00	; 0
    6ea2:	b3 01       	movw	r22, r6
    6ea4:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6ea8:	c6 01       	movw	r24, r12
    6eaa:	c0 96       	adiw	r24, 0x30	; 48
    6eac:	b3 01       	movw	r22, r6
    6eae:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6eb2:	cc 84       	ldd	r12, Y+12	; 0x0c
    6eb4:	dd 84       	ldd	r13, Y+13	; 0x0d
    6eb6:	52 c1       	rjmp	.+676    	; 0x715c <vfprintf+0x71a>
    6eb8:	93 36       	cpi	r25, 0x63	; 99
    6eba:	31 f0       	breq	.+12     	; 0x6ec8 <vfprintf+0x486>
    6ebc:	93 37       	cpi	r25, 0x73	; 115
    6ebe:	99 f0       	breq	.+38     	; 0x6ee6 <vfprintf+0x4a4>
    6ec0:	93 35       	cpi	r25, 0x53	; 83
    6ec2:	09 f0       	breq	.+2      	; 0x6ec6 <vfprintf+0x484>
    6ec4:	59 c0       	rjmp	.+178    	; 0x6f78 <vfprintf+0x536>
    6ec6:	23 c0       	rjmp	.+70     	; 0x6f0e <vfprintf+0x4cc>
    6ec8:	f6 01       	movw	r30, r12
    6eca:	80 81       	ld	r24, Z
    6ecc:	89 83       	std	Y+1, r24	; 0x01
    6ece:	5e 01       	movw	r10, r28
    6ed0:	08 94       	sec
    6ed2:	a1 1c       	adc	r10, r1
    6ed4:	b1 1c       	adc	r11, r1
    6ed6:	22 e0       	ldi	r18, 0x02	; 2
    6ed8:	30 e0       	ldi	r19, 0x00	; 0
    6eda:	c2 0e       	add	r12, r18
    6edc:	d3 1e       	adc	r13, r19
    6ede:	21 e0       	ldi	r18, 0x01	; 1
    6ee0:	e2 2e       	mov	r14, r18
    6ee2:	f1 2c       	mov	r15, r1
    6ee4:	12 c0       	rjmp	.+36     	; 0x6f0a <vfprintf+0x4c8>
    6ee6:	f6 01       	movw	r30, r12
    6ee8:	a0 80       	ld	r10, Z
    6eea:	b1 80       	ldd	r11, Z+1	; 0x01
    6eec:	16 fd       	sbrc	r17, 6
    6eee:	03 c0       	rjmp	.+6      	; 0x6ef6 <vfprintf+0x4b4>
    6ef0:	6f ef       	ldi	r22, 0xFF	; 255
    6ef2:	7f ef       	ldi	r23, 0xFF	; 255
    6ef4:	02 c0       	rjmp	.+4      	; 0x6efa <vfprintf+0x4b8>
    6ef6:	69 2d       	mov	r22, r9
    6ef8:	70 e0       	ldi	r23, 0x00	; 0
    6efa:	22 e0       	ldi	r18, 0x02	; 2
    6efc:	30 e0       	ldi	r19, 0x00	; 0
    6efe:	c2 0e       	add	r12, r18
    6f00:	d3 1e       	adc	r13, r19
    6f02:	c5 01       	movw	r24, r10
    6f04:	0e 94 21 40 	call	0x8042	; 0x8042 <strnlen>
    6f08:	7c 01       	movw	r14, r24
    6f0a:	1f 77       	andi	r17, 0x7F	; 127
    6f0c:	13 c0       	rjmp	.+38     	; 0x6f34 <vfprintf+0x4f2>
    6f0e:	f6 01       	movw	r30, r12
    6f10:	a0 80       	ld	r10, Z
    6f12:	b1 80       	ldd	r11, Z+1	; 0x01
    6f14:	16 fd       	sbrc	r17, 6
    6f16:	03 c0       	rjmp	.+6      	; 0x6f1e <vfprintf+0x4dc>
    6f18:	6f ef       	ldi	r22, 0xFF	; 255
    6f1a:	7f ef       	ldi	r23, 0xFF	; 255
    6f1c:	02 c0       	rjmp	.+4      	; 0x6f22 <vfprintf+0x4e0>
    6f1e:	69 2d       	mov	r22, r9
    6f20:	70 e0       	ldi	r23, 0x00	; 0
    6f22:	22 e0       	ldi	r18, 0x02	; 2
    6f24:	30 e0       	ldi	r19, 0x00	; 0
    6f26:	c2 0e       	add	r12, r18
    6f28:	d3 1e       	adc	r13, r19
    6f2a:	c5 01       	movw	r24, r10
    6f2c:	0e 94 0b 40 	call	0x8016	; 0x8016 <strnlen_P>
    6f30:	7c 01       	movw	r14, r24
    6f32:	10 68       	ori	r17, 0x80	; 128
    6f34:	13 ff       	sbrs	r17, 3
    6f36:	07 c0       	rjmp	.+14     	; 0x6f46 <vfprintf+0x504>
    6f38:	1b c0       	rjmp	.+54     	; 0x6f70 <vfprintf+0x52e>
    6f3a:	80 e2       	ldi	r24, 0x20	; 32
    6f3c:	90 e0       	ldi	r25, 0x00	; 0
    6f3e:	b3 01       	movw	r22, r6
    6f40:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6f44:	8a 94       	dec	r8
    6f46:	88 2d       	mov	r24, r8
    6f48:	90 e0       	ldi	r25, 0x00	; 0
    6f4a:	e8 16       	cp	r14, r24
    6f4c:	f9 06       	cpc	r15, r25
    6f4e:	a8 f3       	brcs	.-22     	; 0x6f3a <vfprintf+0x4f8>
    6f50:	0f c0       	rjmp	.+30     	; 0x6f70 <vfprintf+0x52e>
    6f52:	f5 01       	movw	r30, r10
    6f54:	17 fd       	sbrc	r17, 7
    6f56:	85 91       	lpm	r24, Z+
    6f58:	17 ff       	sbrs	r17, 7
    6f5a:	81 91       	ld	r24, Z+
    6f5c:	5f 01       	movw	r10, r30
    6f5e:	90 e0       	ldi	r25, 0x00	; 0
    6f60:	b3 01       	movw	r22, r6
    6f62:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    6f66:	81 10       	cpse	r8, r1
    6f68:	8a 94       	dec	r8
    6f6a:	08 94       	sec
    6f6c:	e1 08       	sbc	r14, r1
    6f6e:	f1 08       	sbc	r15, r1
    6f70:	e1 14       	cp	r14, r1
    6f72:	f1 04       	cpc	r15, r1
    6f74:	71 f7       	brne	.-36     	; 0x6f52 <vfprintf+0x510>
    6f76:	f2 c0       	rjmp	.+484    	; 0x715c <vfprintf+0x71a>
    6f78:	94 36       	cpi	r25, 0x64	; 100
    6f7a:	11 f0       	breq	.+4      	; 0x6f80 <vfprintf+0x53e>
    6f7c:	99 36       	cpi	r25, 0x69	; 105
    6f7e:	89 f5       	brne	.+98     	; 0x6fe2 <vfprintf+0x5a0>
    6f80:	17 ff       	sbrs	r17, 7
    6f82:	08 c0       	rjmp	.+16     	; 0x6f94 <vfprintf+0x552>
    6f84:	f6 01       	movw	r30, r12
    6f86:	20 81       	ld	r18, Z
    6f88:	31 81       	ldd	r19, Z+1	; 0x01
    6f8a:	42 81       	ldd	r20, Z+2	; 0x02
    6f8c:	53 81       	ldd	r21, Z+3	; 0x03
    6f8e:	84 e0       	ldi	r24, 0x04	; 4
    6f90:	90 e0       	ldi	r25, 0x00	; 0
    6f92:	0a c0       	rjmp	.+20     	; 0x6fa8 <vfprintf+0x566>
    6f94:	f6 01       	movw	r30, r12
    6f96:	80 81       	ld	r24, Z
    6f98:	91 81       	ldd	r25, Z+1	; 0x01
    6f9a:	9c 01       	movw	r18, r24
    6f9c:	44 27       	eor	r20, r20
    6f9e:	37 fd       	sbrc	r19, 7
    6fa0:	40 95       	com	r20
    6fa2:	54 2f       	mov	r21, r20
    6fa4:	82 e0       	ldi	r24, 0x02	; 2
    6fa6:	90 e0       	ldi	r25, 0x00	; 0
    6fa8:	c8 0e       	add	r12, r24
    6faa:	d9 1e       	adc	r13, r25
    6fac:	9f e6       	ldi	r25, 0x6F	; 111
    6fae:	f9 2e       	mov	r15, r25
    6fb0:	f1 22       	and	r15, r17
    6fb2:	57 ff       	sbrs	r21, 7
    6fb4:	09 c0       	rjmp	.+18     	; 0x6fc8 <vfprintf+0x586>
    6fb6:	50 95       	com	r21
    6fb8:	40 95       	com	r20
    6fba:	30 95       	com	r19
    6fbc:	21 95       	neg	r18
    6fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    6fc0:	4f 4f       	sbci	r20, 0xFF	; 255
    6fc2:	5f 4f       	sbci	r21, 0xFF	; 255
    6fc4:	90 e8       	ldi	r25, 0x80	; 128
    6fc6:	f9 2a       	or	r15, r25
    6fc8:	ca 01       	movw	r24, r20
    6fca:	b9 01       	movw	r22, r18
    6fcc:	ae 01       	movw	r20, r28
    6fce:	4f 5f       	subi	r20, 0xFF	; 255
    6fd0:	5f 4f       	sbci	r21, 0xFF	; 255
    6fd2:	2a e0       	ldi	r18, 0x0A	; 10
    6fd4:	30 e0       	ldi	r19, 0x00	; 0
    6fd6:	0e 94 bb 40 	call	0x8176	; 0x8176 <__ultoa_invert>
    6fda:	e8 2e       	mov	r14, r24
    6fdc:	e8 89       	ldd	r30, Y+16	; 0x10
    6fde:	ee 1a       	sub	r14, r30
    6fe0:	41 c0       	rjmp	.+130    	; 0x7064 <vfprintf+0x622>
    6fe2:	95 37       	cpi	r25, 0x75	; 117
    6fe4:	21 f4       	brne	.+8      	; 0x6fee <vfprintf+0x5ac>
    6fe6:	1f 7e       	andi	r17, 0xEF	; 239
    6fe8:	2a e0       	ldi	r18, 0x0A	; 10
    6fea:	30 e0       	ldi	r19, 0x00	; 0
    6fec:	1c c0       	rjmp	.+56     	; 0x7026 <vfprintf+0x5e4>
    6fee:	19 7f       	andi	r17, 0xF9	; 249
    6ff0:	9f 36       	cpi	r25, 0x6F	; 111
    6ff2:	61 f0       	breq	.+24     	; 0x700c <vfprintf+0x5ca>
    6ff4:	90 37       	cpi	r25, 0x70	; 112
    6ff6:	20 f4       	brcc	.+8      	; 0x7000 <vfprintf+0x5be>
    6ff8:	98 35       	cpi	r25, 0x58	; 88
    6ffa:	09 f0       	breq	.+2      	; 0x6ffe <vfprintf+0x5bc>
    6ffc:	b2 c0       	rjmp	.+356    	; 0x7162 <vfprintf+0x720>
    6ffe:	0f c0       	rjmp	.+30     	; 0x701e <vfprintf+0x5dc>
    7000:	90 37       	cpi	r25, 0x70	; 112
    7002:	39 f0       	breq	.+14     	; 0x7012 <vfprintf+0x5d0>
    7004:	98 37       	cpi	r25, 0x78	; 120
    7006:	09 f0       	breq	.+2      	; 0x700a <vfprintf+0x5c8>
    7008:	ac c0       	rjmp	.+344    	; 0x7162 <vfprintf+0x720>
    700a:	04 c0       	rjmp	.+8      	; 0x7014 <vfprintf+0x5d2>
    700c:	28 e0       	ldi	r18, 0x08	; 8
    700e:	30 e0       	ldi	r19, 0x00	; 0
    7010:	0a c0       	rjmp	.+20     	; 0x7026 <vfprintf+0x5e4>
    7012:	10 61       	ori	r17, 0x10	; 16
    7014:	14 fd       	sbrc	r17, 4
    7016:	14 60       	ori	r17, 0x04	; 4
    7018:	20 e1       	ldi	r18, 0x10	; 16
    701a:	30 e0       	ldi	r19, 0x00	; 0
    701c:	04 c0       	rjmp	.+8      	; 0x7026 <vfprintf+0x5e4>
    701e:	14 fd       	sbrc	r17, 4
    7020:	16 60       	ori	r17, 0x06	; 6
    7022:	20 e1       	ldi	r18, 0x10	; 16
    7024:	32 e0       	ldi	r19, 0x02	; 2
    7026:	17 ff       	sbrs	r17, 7
    7028:	08 c0       	rjmp	.+16     	; 0x703a <vfprintf+0x5f8>
    702a:	f6 01       	movw	r30, r12
    702c:	60 81       	ld	r22, Z
    702e:	71 81       	ldd	r23, Z+1	; 0x01
    7030:	82 81       	ldd	r24, Z+2	; 0x02
    7032:	93 81       	ldd	r25, Z+3	; 0x03
    7034:	44 e0       	ldi	r20, 0x04	; 4
    7036:	50 e0       	ldi	r21, 0x00	; 0
    7038:	08 c0       	rjmp	.+16     	; 0x704a <vfprintf+0x608>
    703a:	f6 01       	movw	r30, r12
    703c:	80 81       	ld	r24, Z
    703e:	91 81       	ldd	r25, Z+1	; 0x01
    7040:	bc 01       	movw	r22, r24
    7042:	80 e0       	ldi	r24, 0x00	; 0
    7044:	90 e0       	ldi	r25, 0x00	; 0
    7046:	42 e0       	ldi	r20, 0x02	; 2
    7048:	50 e0       	ldi	r21, 0x00	; 0
    704a:	c4 0e       	add	r12, r20
    704c:	d5 1e       	adc	r13, r21
    704e:	ae 01       	movw	r20, r28
    7050:	4f 5f       	subi	r20, 0xFF	; 255
    7052:	5f 4f       	sbci	r21, 0xFF	; 255
    7054:	0e 94 bb 40 	call	0x8176	; 0x8176 <__ultoa_invert>
    7058:	e8 2e       	mov	r14, r24
    705a:	58 89       	ldd	r21, Y+16	; 0x10
    705c:	e5 1a       	sub	r14, r21
    705e:	8f e7       	ldi	r24, 0x7F	; 127
    7060:	f8 2e       	mov	r15, r24
    7062:	f1 22       	and	r15, r17
    7064:	f6 fe       	sbrs	r15, 6
    7066:	0b c0       	rjmp	.+22     	; 0x707e <vfprintf+0x63c>
    7068:	8e ef       	ldi	r24, 0xFE	; 254
    706a:	f8 22       	and	r15, r24
    706c:	e9 14       	cp	r14, r9
    706e:	38 f4       	brcc	.+14     	; 0x707e <vfprintf+0x63c>
    7070:	f4 fe       	sbrs	r15, 4
    7072:	07 c0       	rjmp	.+14     	; 0x7082 <vfprintf+0x640>
    7074:	f2 fc       	sbrc	r15, 2
    7076:	05 c0       	rjmp	.+10     	; 0x7082 <vfprintf+0x640>
    7078:	9f ee       	ldi	r25, 0xEF	; 239
    707a:	f9 22       	and	r15, r25
    707c:	02 c0       	rjmp	.+4      	; 0x7082 <vfprintf+0x640>
    707e:	1e 2d       	mov	r17, r14
    7080:	01 c0       	rjmp	.+2      	; 0x7084 <vfprintf+0x642>
    7082:	19 2d       	mov	r17, r9
    7084:	f4 fe       	sbrs	r15, 4
    7086:	0d c0       	rjmp	.+26     	; 0x70a2 <vfprintf+0x660>
    7088:	fe 01       	movw	r30, r28
    708a:	ee 0d       	add	r30, r14
    708c:	f1 1d       	adc	r31, r1
    708e:	80 81       	ld	r24, Z
    7090:	80 33       	cpi	r24, 0x30	; 48
    7092:	19 f4       	brne	.+6      	; 0x709a <vfprintf+0x658>
    7094:	e9 ee       	ldi	r30, 0xE9	; 233
    7096:	fe 22       	and	r15, r30
    7098:	08 c0       	rjmp	.+16     	; 0x70aa <vfprintf+0x668>
    709a:	1f 5f       	subi	r17, 0xFF	; 255
    709c:	f2 fe       	sbrs	r15, 2
    709e:	05 c0       	rjmp	.+10     	; 0x70aa <vfprintf+0x668>
    70a0:	03 c0       	rjmp	.+6      	; 0x70a8 <vfprintf+0x666>
    70a2:	8f 2d       	mov	r24, r15
    70a4:	86 78       	andi	r24, 0x86	; 134
    70a6:	09 f0       	breq	.+2      	; 0x70aa <vfprintf+0x668>
    70a8:	1f 5f       	subi	r17, 0xFF	; 255
    70aa:	0f 2d       	mov	r16, r15
    70ac:	f3 fc       	sbrc	r15, 3
    70ae:	14 c0       	rjmp	.+40     	; 0x70d8 <vfprintf+0x696>
    70b0:	f0 fe       	sbrs	r15, 0
    70b2:	0f c0       	rjmp	.+30     	; 0x70d2 <vfprintf+0x690>
    70b4:	18 15       	cp	r17, r8
    70b6:	10 f0       	brcs	.+4      	; 0x70bc <vfprintf+0x67a>
    70b8:	9e 2c       	mov	r9, r14
    70ba:	0b c0       	rjmp	.+22     	; 0x70d2 <vfprintf+0x690>
    70bc:	9e 2c       	mov	r9, r14
    70be:	98 0c       	add	r9, r8
    70c0:	91 1a       	sub	r9, r17
    70c2:	18 2d       	mov	r17, r8
    70c4:	06 c0       	rjmp	.+12     	; 0x70d2 <vfprintf+0x690>
    70c6:	80 e2       	ldi	r24, 0x20	; 32
    70c8:	90 e0       	ldi	r25, 0x00	; 0
    70ca:	b3 01       	movw	r22, r6
    70cc:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    70d0:	1f 5f       	subi	r17, 0xFF	; 255
    70d2:	18 15       	cp	r17, r8
    70d4:	c0 f3       	brcs	.-16     	; 0x70c6 <vfprintf+0x684>
    70d6:	04 c0       	rjmp	.+8      	; 0x70e0 <vfprintf+0x69e>
    70d8:	18 15       	cp	r17, r8
    70da:	10 f4       	brcc	.+4      	; 0x70e0 <vfprintf+0x69e>
    70dc:	81 1a       	sub	r8, r17
    70de:	01 c0       	rjmp	.+2      	; 0x70e2 <vfprintf+0x6a0>
    70e0:	88 24       	eor	r8, r8
    70e2:	04 ff       	sbrs	r16, 4
    70e4:	0f c0       	rjmp	.+30     	; 0x7104 <vfprintf+0x6c2>
    70e6:	80 e3       	ldi	r24, 0x30	; 48
    70e8:	90 e0       	ldi	r25, 0x00	; 0
    70ea:	b3 01       	movw	r22, r6
    70ec:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    70f0:	02 ff       	sbrs	r16, 2
    70f2:	1d c0       	rjmp	.+58     	; 0x712e <vfprintf+0x6ec>
    70f4:	01 fd       	sbrc	r16, 1
    70f6:	03 c0       	rjmp	.+6      	; 0x70fe <vfprintf+0x6bc>
    70f8:	88 e7       	ldi	r24, 0x78	; 120
    70fa:	90 e0       	ldi	r25, 0x00	; 0
    70fc:	0e c0       	rjmp	.+28     	; 0x711a <vfprintf+0x6d8>
    70fe:	88 e5       	ldi	r24, 0x58	; 88
    7100:	90 e0       	ldi	r25, 0x00	; 0
    7102:	0b c0       	rjmp	.+22     	; 0x711a <vfprintf+0x6d8>
    7104:	80 2f       	mov	r24, r16
    7106:	86 78       	andi	r24, 0x86	; 134
    7108:	91 f0       	breq	.+36     	; 0x712e <vfprintf+0x6ec>
    710a:	01 ff       	sbrs	r16, 1
    710c:	02 c0       	rjmp	.+4      	; 0x7112 <vfprintf+0x6d0>
    710e:	8b e2       	ldi	r24, 0x2B	; 43
    7110:	01 c0       	rjmp	.+2      	; 0x7114 <vfprintf+0x6d2>
    7112:	80 e2       	ldi	r24, 0x20	; 32
    7114:	f7 fc       	sbrc	r15, 7
    7116:	8d e2       	ldi	r24, 0x2D	; 45
    7118:	90 e0       	ldi	r25, 0x00	; 0
    711a:	b3 01       	movw	r22, r6
    711c:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    7120:	06 c0       	rjmp	.+12     	; 0x712e <vfprintf+0x6ec>
    7122:	80 e3       	ldi	r24, 0x30	; 48
    7124:	90 e0       	ldi	r25, 0x00	; 0
    7126:	b3 01       	movw	r22, r6
    7128:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    712c:	9a 94       	dec	r9
    712e:	e9 14       	cp	r14, r9
    7130:	c0 f3       	brcs	.-16     	; 0x7122 <vfprintf+0x6e0>
    7132:	ea 94       	dec	r14
    7134:	e1 e0       	ldi	r30, 0x01	; 1
    7136:	f0 e0       	ldi	r31, 0x00	; 0
    7138:	ec 0f       	add	r30, r28
    713a:	fd 1f       	adc	r31, r29
    713c:	ee 0d       	add	r30, r14
    713e:	f1 1d       	adc	r31, r1
    7140:	80 81       	ld	r24, Z
    7142:	90 e0       	ldi	r25, 0x00	; 0
    7144:	b3 01       	movw	r22, r6
    7146:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    714a:	ee 20       	and	r14, r14
    714c:	91 f7       	brne	.-28     	; 0x7132 <vfprintf+0x6f0>
    714e:	06 c0       	rjmp	.+12     	; 0x715c <vfprintf+0x71a>
    7150:	80 e2       	ldi	r24, 0x20	; 32
    7152:	90 e0       	ldi	r25, 0x00	; 0
    7154:	b3 01       	movw	r22, r6
    7156:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <fputc>
    715a:	8a 94       	dec	r8
    715c:	88 20       	and	r8, r8
    715e:	c1 f7       	brne	.-16     	; 0x7150 <vfprintf+0x70e>
    7160:	99 cc       	rjmp	.-1742   	; 0x6a94 <vfprintf+0x52>
    7162:	f3 01       	movw	r30, r6
    7164:	66 81       	ldd	r22, Z+6	; 0x06
    7166:	77 81       	ldd	r23, Z+7	; 0x07
    7168:	cb 01       	movw	r24, r22
    716a:	61 96       	adiw	r28, 0x11	; 17
    716c:	cd bf       	out	0x3d, r28	; 61
    716e:	de bf       	out	0x3e, r29	; 62
    7170:	cf 91       	pop	r28
    7172:	df 91       	pop	r29
    7174:	1f 91       	pop	r17
    7176:	0f 91       	pop	r16
    7178:	ff 90       	pop	r15
    717a:	ef 90       	pop	r14
    717c:	df 90       	pop	r13
    717e:	cf 90       	pop	r12
    7180:	bf 90       	pop	r11
    7182:	af 90       	pop	r10
    7184:	9f 90       	pop	r9
    7186:	8f 90       	pop	r8
    7188:	7f 90       	pop	r7
    718a:	6f 90       	pop	r6
    718c:	5f 90       	pop	r5
    718e:	4f 90       	pop	r4
    7190:	3f 90       	pop	r3
    7192:	2f 90       	pop	r2
    7194:	08 95       	ret

00007196 <__subsf3>:
    7196:	50 58       	subi	r21, 0x80	; 128

00007198 <__addsf3>:
    7198:	bb 27       	eor	r27, r27
    719a:	aa 27       	eor	r26, r26
    719c:	0e d0       	rcall	.+28     	; 0x71ba <__addsf3x>
    719e:	29 c2       	rjmp	.+1106   	; 0x75f2 <__fp_round>
    71a0:	f2 d1       	rcall	.+996    	; 0x7586 <__fp_pscA>
    71a2:	30 f0       	brcs	.+12     	; 0x71b0 <__addsf3+0x18>
    71a4:	f7 d1       	rcall	.+1006   	; 0x7594 <__fp_pscB>
    71a6:	20 f0       	brcs	.+8      	; 0x71b0 <__addsf3+0x18>
    71a8:	31 f4       	brne	.+12     	; 0x71b6 <__addsf3+0x1e>
    71aa:	9f 3f       	cpi	r25, 0xFF	; 255
    71ac:	11 f4       	brne	.+4      	; 0x71b2 <__addsf3+0x1a>
    71ae:	1e f4       	brtc	.+6      	; 0x71b6 <__addsf3+0x1e>
    71b0:	c2 c1       	rjmp	.+900    	; 0x7536 <__fp_nan>
    71b2:	0e f4       	brtc	.+2      	; 0x71b6 <__addsf3+0x1e>
    71b4:	e0 95       	com	r30
    71b6:	e7 fb       	bst	r30, 7
    71b8:	8f c1       	rjmp	.+798    	; 0x74d8 <__fp_inf>

000071ba <__addsf3x>:
    71ba:	e9 2f       	mov	r30, r25
    71bc:	3c d2       	rcall	.+1144   	; 0x7636 <__fp_split3>
    71be:	80 f3       	brcs	.-32     	; 0x71a0 <__addsf3+0x8>
    71c0:	ba 17       	cp	r27, r26
    71c2:	62 07       	cpc	r22, r18
    71c4:	73 07       	cpc	r23, r19
    71c6:	84 07       	cpc	r24, r20
    71c8:	95 07       	cpc	r25, r21
    71ca:	18 f0       	brcs	.+6      	; 0x71d2 <__addsf3x+0x18>
    71cc:	71 f4       	brne	.+28     	; 0x71ea <__addsf3x+0x30>
    71ce:	9e f5       	brtc	.+102    	; 0x7236 <__addsf3x+0x7c>
    71d0:	6b c2       	rjmp	.+1238   	; 0x76a8 <__fp_zero>
    71d2:	0e f4       	brtc	.+2      	; 0x71d6 <__addsf3x+0x1c>
    71d4:	e0 95       	com	r30
    71d6:	0b 2e       	mov	r0, r27
    71d8:	ba 2f       	mov	r27, r26
    71da:	a0 2d       	mov	r26, r0
    71dc:	0b 01       	movw	r0, r22
    71de:	b9 01       	movw	r22, r18
    71e0:	90 01       	movw	r18, r0
    71e2:	0c 01       	movw	r0, r24
    71e4:	ca 01       	movw	r24, r20
    71e6:	a0 01       	movw	r20, r0
    71e8:	11 24       	eor	r1, r1
    71ea:	ff 27       	eor	r31, r31
    71ec:	59 1b       	sub	r21, r25
    71ee:	99 f0       	breq	.+38     	; 0x7216 <__addsf3x+0x5c>
    71f0:	59 3f       	cpi	r21, 0xF9	; 249
    71f2:	50 f4       	brcc	.+20     	; 0x7208 <__addsf3x+0x4e>
    71f4:	50 3e       	cpi	r21, 0xE0	; 224
    71f6:	68 f1       	brcs	.+90     	; 0x7252 <__addsf3x+0x98>
    71f8:	1a 16       	cp	r1, r26
    71fa:	f0 40       	sbci	r31, 0x00	; 0
    71fc:	a2 2f       	mov	r26, r18
    71fe:	23 2f       	mov	r18, r19
    7200:	34 2f       	mov	r19, r20
    7202:	44 27       	eor	r20, r20
    7204:	58 5f       	subi	r21, 0xF8	; 248
    7206:	f3 cf       	rjmp	.-26     	; 0x71ee <__addsf3x+0x34>
    7208:	46 95       	lsr	r20
    720a:	37 95       	ror	r19
    720c:	27 95       	ror	r18
    720e:	a7 95       	ror	r26
    7210:	f0 40       	sbci	r31, 0x00	; 0
    7212:	53 95       	inc	r21
    7214:	c9 f7       	brne	.-14     	; 0x7208 <__addsf3x+0x4e>
    7216:	7e f4       	brtc	.+30     	; 0x7236 <__addsf3x+0x7c>
    7218:	1f 16       	cp	r1, r31
    721a:	ba 0b       	sbc	r27, r26
    721c:	62 0b       	sbc	r22, r18
    721e:	73 0b       	sbc	r23, r19
    7220:	84 0b       	sbc	r24, r20
    7222:	ba f0       	brmi	.+46     	; 0x7252 <__addsf3x+0x98>
    7224:	91 50       	subi	r25, 0x01	; 1
    7226:	a1 f0       	breq	.+40     	; 0x7250 <__addsf3x+0x96>
    7228:	ff 0f       	add	r31, r31
    722a:	bb 1f       	adc	r27, r27
    722c:	66 1f       	adc	r22, r22
    722e:	77 1f       	adc	r23, r23
    7230:	88 1f       	adc	r24, r24
    7232:	c2 f7       	brpl	.-16     	; 0x7224 <__addsf3x+0x6a>
    7234:	0e c0       	rjmp	.+28     	; 0x7252 <__addsf3x+0x98>
    7236:	ba 0f       	add	r27, r26
    7238:	62 1f       	adc	r22, r18
    723a:	73 1f       	adc	r23, r19
    723c:	84 1f       	adc	r24, r20
    723e:	48 f4       	brcc	.+18     	; 0x7252 <__addsf3x+0x98>
    7240:	87 95       	ror	r24
    7242:	77 95       	ror	r23
    7244:	67 95       	ror	r22
    7246:	b7 95       	ror	r27
    7248:	f7 95       	ror	r31
    724a:	9e 3f       	cpi	r25, 0xFE	; 254
    724c:	08 f0       	brcs	.+2      	; 0x7250 <__addsf3x+0x96>
    724e:	b3 cf       	rjmp	.-154    	; 0x71b6 <__addsf3+0x1e>
    7250:	93 95       	inc	r25
    7252:	88 0f       	add	r24, r24
    7254:	08 f0       	brcs	.+2      	; 0x7258 <__addsf3x+0x9e>
    7256:	99 27       	eor	r25, r25
    7258:	ee 0f       	add	r30, r30
    725a:	97 95       	ror	r25
    725c:	87 95       	ror	r24
    725e:	08 95       	ret

00007260 <atan>:
    7260:	df 93       	push	r29
    7262:	dd 27       	eor	r29, r29
    7264:	b9 2f       	mov	r27, r25
    7266:	bf 77       	andi	r27, 0x7F	; 127
    7268:	40 e8       	ldi	r20, 0x80	; 128
    726a:	5f e3       	ldi	r21, 0x3F	; 63
    726c:	16 16       	cp	r1, r22
    726e:	17 06       	cpc	r1, r23
    7270:	48 07       	cpc	r20, r24
    7272:	5b 07       	cpc	r21, r27
    7274:	10 f4       	brcc	.+4      	; 0x727a <atan+0x1a>
    7276:	d9 2f       	mov	r29, r25
    7278:	83 d2       	rcall	.+1286   	; 0x7780 <inverse>
    727a:	9f 93       	push	r25
    727c:	8f 93       	push	r24
    727e:	7f 93       	push	r23
    7280:	6f 93       	push	r22
    7282:	96 d3       	rcall	.+1836   	; 0x79b0 <square>
    7284:	e8 ee       	ldi	r30, 0xE8	; 232
    7286:	f1 e0       	ldi	r31, 0x01	; 1
    7288:	59 d1       	rcall	.+690    	; 0x753c <__fp_powser>
    728a:	b3 d1       	rcall	.+870    	; 0x75f2 <__fp_round>
    728c:	2f 91       	pop	r18
    728e:	3f 91       	pop	r19
    7290:	4f 91       	pop	r20
    7292:	5f 91       	pop	r21
    7294:	ee d2       	rcall	.+1500   	; 0x7872 <__mulsf3x>
    7296:	dd 23       	and	r29, r29
    7298:	49 f0       	breq	.+18     	; 0x72ac <atan+0x4c>
    729a:	90 58       	subi	r25, 0x80	; 128
    729c:	a2 ea       	ldi	r26, 0xA2	; 162
    729e:	2a ed       	ldi	r18, 0xDA	; 218
    72a0:	3f e0       	ldi	r19, 0x0F	; 15
    72a2:	49 ec       	ldi	r20, 0xC9	; 201
    72a4:	5f e3       	ldi	r21, 0x3F	; 63
    72a6:	d0 78       	andi	r29, 0x80	; 128
    72a8:	5d 27       	eor	r21, r29
    72aa:	87 df       	rcall	.-242    	; 0x71ba <__addsf3x>
    72ac:	df 91       	pop	r29
    72ae:	a1 c1       	rjmp	.+834    	; 0x75f2 <__fp_round>

000072b0 <ceil>:
    72b0:	e4 d1       	rcall	.+968    	; 0x767a <__fp_trunc>
    72b2:	80 f0       	brcs	.+32     	; 0x72d4 <ceil+0x24>
    72b4:	9f 37       	cpi	r25, 0x7F	; 127
    72b6:	40 f4       	brcc	.+16     	; 0x72c8 <ceil+0x18>
    72b8:	91 11       	cpse	r25, r1
    72ba:	0e f4       	brtc	.+2      	; 0x72be <ceil+0xe>
    72bc:	f6 c1       	rjmp	.+1004   	; 0x76aa <__fp_szero>
    72be:	60 e0       	ldi	r22, 0x00	; 0
    72c0:	70 e0       	ldi	r23, 0x00	; 0
    72c2:	80 e8       	ldi	r24, 0x80	; 128
    72c4:	9f e3       	ldi	r25, 0x3F	; 63
    72c6:	08 95       	ret
    72c8:	26 f0       	brts	.+8      	; 0x72d2 <ceil+0x22>
    72ca:	1b 16       	cp	r1, r27
    72cc:	61 1d       	adc	r22, r1
    72ce:	71 1d       	adc	r23, r1
    72d0:	81 1d       	adc	r24, r1
    72d2:	08 c1       	rjmp	.+528    	; 0x74e4 <__fp_mintl>
    72d4:	22 c1       	rjmp	.+580    	; 0x751a <__fp_mpack>

000072d6 <__cmpsf2>:
    72d6:	dc d0       	rcall	.+440    	; 0x7490 <__fp_cmp>
    72d8:	08 f4       	brcc	.+2      	; 0x72dc <__cmpsf2+0x6>
    72da:	81 e0       	ldi	r24, 0x01	; 1
    72dc:	08 95       	ret

000072de <cos>:
    72de:	62 d1       	rcall	.+708    	; 0x75a4 <__fp_rempio2>
    72e0:	e3 95       	inc	r30
    72e2:	98 c1       	rjmp	.+816    	; 0x7614 <__fp_sinus>

000072e4 <__divsf3>:
    72e4:	0c d0       	rcall	.+24     	; 0x72fe <__divsf3x>
    72e6:	85 c1       	rjmp	.+778    	; 0x75f2 <__fp_round>
    72e8:	55 d1       	rcall	.+682    	; 0x7594 <__fp_pscB>
    72ea:	40 f0       	brcs	.+16     	; 0x72fc <__divsf3+0x18>
    72ec:	4c d1       	rcall	.+664    	; 0x7586 <__fp_pscA>
    72ee:	30 f0       	brcs	.+12     	; 0x72fc <__divsf3+0x18>
    72f0:	21 f4       	brne	.+8      	; 0x72fa <__divsf3+0x16>
    72f2:	5f 3f       	cpi	r21, 0xFF	; 255
    72f4:	19 f0       	breq	.+6      	; 0x72fc <__divsf3+0x18>
    72f6:	f0 c0       	rjmp	.+480    	; 0x74d8 <__fp_inf>
    72f8:	51 11       	cpse	r21, r1
    72fa:	d7 c1       	rjmp	.+942    	; 0x76aa <__fp_szero>
    72fc:	1c c1       	rjmp	.+568    	; 0x7536 <__fp_nan>

000072fe <__divsf3x>:
    72fe:	9b d1       	rcall	.+822    	; 0x7636 <__fp_split3>
    7300:	98 f3       	brcs	.-26     	; 0x72e8 <__divsf3+0x4>

00007302 <__divsf3_pse>:
    7302:	99 23       	and	r25, r25
    7304:	c9 f3       	breq	.-14     	; 0x72f8 <__divsf3+0x14>
    7306:	55 23       	and	r21, r21
    7308:	b1 f3       	breq	.-20     	; 0x72f6 <__divsf3+0x12>
    730a:	95 1b       	sub	r25, r21
    730c:	55 0b       	sbc	r21, r21
    730e:	bb 27       	eor	r27, r27
    7310:	aa 27       	eor	r26, r26
    7312:	62 17       	cp	r22, r18
    7314:	73 07       	cpc	r23, r19
    7316:	84 07       	cpc	r24, r20
    7318:	38 f0       	brcs	.+14     	; 0x7328 <__divsf3_pse+0x26>
    731a:	9f 5f       	subi	r25, 0xFF	; 255
    731c:	5f 4f       	sbci	r21, 0xFF	; 255
    731e:	22 0f       	add	r18, r18
    7320:	33 1f       	adc	r19, r19
    7322:	44 1f       	adc	r20, r20
    7324:	aa 1f       	adc	r26, r26
    7326:	a9 f3       	breq	.-22     	; 0x7312 <__divsf3_pse+0x10>
    7328:	33 d0       	rcall	.+102    	; 0x7390 <__divsf3_pse+0x8e>
    732a:	0e 2e       	mov	r0, r30
    732c:	3a f0       	brmi	.+14     	; 0x733c <__divsf3_pse+0x3a>
    732e:	e0 e8       	ldi	r30, 0x80	; 128
    7330:	30 d0       	rcall	.+96     	; 0x7392 <__divsf3_pse+0x90>
    7332:	91 50       	subi	r25, 0x01	; 1
    7334:	50 40       	sbci	r21, 0x00	; 0
    7336:	e6 95       	lsr	r30
    7338:	00 1c       	adc	r0, r0
    733a:	ca f7       	brpl	.-14     	; 0x732e <__divsf3_pse+0x2c>
    733c:	29 d0       	rcall	.+82     	; 0x7390 <__divsf3_pse+0x8e>
    733e:	fe 2f       	mov	r31, r30
    7340:	27 d0       	rcall	.+78     	; 0x7390 <__divsf3_pse+0x8e>
    7342:	66 0f       	add	r22, r22
    7344:	77 1f       	adc	r23, r23
    7346:	88 1f       	adc	r24, r24
    7348:	bb 1f       	adc	r27, r27
    734a:	26 17       	cp	r18, r22
    734c:	37 07       	cpc	r19, r23
    734e:	48 07       	cpc	r20, r24
    7350:	ab 07       	cpc	r26, r27
    7352:	b0 e8       	ldi	r27, 0x80	; 128
    7354:	09 f0       	breq	.+2      	; 0x7358 <__divsf3_pse+0x56>
    7356:	bb 0b       	sbc	r27, r27
    7358:	80 2d       	mov	r24, r0
    735a:	bf 01       	movw	r22, r30
    735c:	ff 27       	eor	r31, r31
    735e:	93 58       	subi	r25, 0x83	; 131
    7360:	5f 4f       	sbci	r21, 0xFF	; 255
    7362:	2a f0       	brmi	.+10     	; 0x736e <__divsf3_pse+0x6c>
    7364:	9e 3f       	cpi	r25, 0xFE	; 254
    7366:	51 05       	cpc	r21, r1
    7368:	68 f0       	brcs	.+26     	; 0x7384 <__divsf3_pse+0x82>
    736a:	b6 c0       	rjmp	.+364    	; 0x74d8 <__fp_inf>
    736c:	9e c1       	rjmp	.+828    	; 0x76aa <__fp_szero>
    736e:	5f 3f       	cpi	r21, 0xFF	; 255
    7370:	ec f3       	brlt	.-6      	; 0x736c <__divsf3_pse+0x6a>
    7372:	98 3e       	cpi	r25, 0xE8	; 232
    7374:	dc f3       	brlt	.-10     	; 0x736c <__divsf3_pse+0x6a>
    7376:	86 95       	lsr	r24
    7378:	77 95       	ror	r23
    737a:	67 95       	ror	r22
    737c:	b7 95       	ror	r27
    737e:	f7 95       	ror	r31
    7380:	9f 5f       	subi	r25, 0xFF	; 255
    7382:	c9 f7       	brne	.-14     	; 0x7376 <__divsf3_pse+0x74>
    7384:	88 0f       	add	r24, r24
    7386:	91 1d       	adc	r25, r1
    7388:	96 95       	lsr	r25
    738a:	87 95       	ror	r24
    738c:	97 f9       	bld	r25, 7
    738e:	08 95       	ret
    7390:	e1 e0       	ldi	r30, 0x01	; 1
    7392:	66 0f       	add	r22, r22
    7394:	77 1f       	adc	r23, r23
    7396:	88 1f       	adc	r24, r24
    7398:	bb 1f       	adc	r27, r27
    739a:	62 17       	cp	r22, r18
    739c:	73 07       	cpc	r23, r19
    739e:	84 07       	cpc	r24, r20
    73a0:	ba 07       	cpc	r27, r26
    73a2:	20 f0       	brcs	.+8      	; 0x73ac <__divsf3_pse+0xaa>
    73a4:	62 1b       	sub	r22, r18
    73a6:	73 0b       	sbc	r23, r19
    73a8:	84 0b       	sbc	r24, r20
    73aa:	ba 0b       	sbc	r27, r26
    73ac:	ee 1f       	adc	r30, r30
    73ae:	88 f7       	brcc	.-30     	; 0x7392 <__divsf3_pse+0x90>
    73b0:	e0 95       	com	r30
    73b2:	08 95       	ret

000073b4 <__fixsfsi>:
    73b4:	04 d0       	rcall	.+8      	; 0x73be <__fixunssfsi>
    73b6:	68 94       	set
    73b8:	b1 11       	cpse	r27, r1
    73ba:	77 c1       	rjmp	.+750    	; 0x76aa <__fp_szero>
    73bc:	08 95       	ret

000073be <__fixunssfsi>:
    73be:	43 d1       	rcall	.+646    	; 0x7646 <__fp_splitA>
    73c0:	88 f0       	brcs	.+34     	; 0x73e4 <__fixunssfsi+0x26>
    73c2:	9f 57       	subi	r25, 0x7F	; 127
    73c4:	90 f0       	brcs	.+36     	; 0x73ea <__fixunssfsi+0x2c>
    73c6:	b9 2f       	mov	r27, r25
    73c8:	99 27       	eor	r25, r25
    73ca:	b7 51       	subi	r27, 0x17	; 23
    73cc:	a0 f0       	brcs	.+40     	; 0x73f6 <__fixunssfsi+0x38>
    73ce:	d1 f0       	breq	.+52     	; 0x7404 <__fixunssfsi+0x46>
    73d0:	66 0f       	add	r22, r22
    73d2:	77 1f       	adc	r23, r23
    73d4:	88 1f       	adc	r24, r24
    73d6:	99 1f       	adc	r25, r25
    73d8:	1a f0       	brmi	.+6      	; 0x73e0 <__fixunssfsi+0x22>
    73da:	ba 95       	dec	r27
    73dc:	c9 f7       	brne	.-14     	; 0x73d0 <__fixunssfsi+0x12>
    73de:	12 c0       	rjmp	.+36     	; 0x7404 <__fixunssfsi+0x46>
    73e0:	b1 30       	cpi	r27, 0x01	; 1
    73e2:	81 f0       	breq	.+32     	; 0x7404 <__fixunssfsi+0x46>
    73e4:	61 d1       	rcall	.+706    	; 0x76a8 <__fp_zero>
    73e6:	b1 e0       	ldi	r27, 0x01	; 1
    73e8:	08 95       	ret
    73ea:	5e c1       	rjmp	.+700    	; 0x76a8 <__fp_zero>
    73ec:	67 2f       	mov	r22, r23
    73ee:	78 2f       	mov	r23, r24
    73f0:	88 27       	eor	r24, r24
    73f2:	b8 5f       	subi	r27, 0xF8	; 248
    73f4:	39 f0       	breq	.+14     	; 0x7404 <__fixunssfsi+0x46>
    73f6:	b9 3f       	cpi	r27, 0xF9	; 249
    73f8:	cc f3       	brlt	.-14     	; 0x73ec <__fixunssfsi+0x2e>
    73fa:	86 95       	lsr	r24
    73fc:	77 95       	ror	r23
    73fe:	67 95       	ror	r22
    7400:	b3 95       	inc	r27
    7402:	d9 f7       	brne	.-10     	; 0x73fa <__fixunssfsi+0x3c>
    7404:	3e f4       	brtc	.+14     	; 0x7414 <__fixunssfsi+0x56>
    7406:	90 95       	com	r25
    7408:	80 95       	com	r24
    740a:	70 95       	com	r23
    740c:	61 95       	neg	r22
    740e:	7f 4f       	sbci	r23, 0xFF	; 255
    7410:	8f 4f       	sbci	r24, 0xFF	; 255
    7412:	9f 4f       	sbci	r25, 0xFF	; 255
    7414:	08 95       	ret

00007416 <__floatunsisf>:
    7416:	e8 94       	clt
    7418:	09 c0       	rjmp	.+18     	; 0x742c <__floatsisf+0x12>

0000741a <__floatsisf>:
    741a:	97 fb       	bst	r25, 7
    741c:	3e f4       	brtc	.+14     	; 0x742c <__floatsisf+0x12>
    741e:	90 95       	com	r25
    7420:	80 95       	com	r24
    7422:	70 95       	com	r23
    7424:	61 95       	neg	r22
    7426:	7f 4f       	sbci	r23, 0xFF	; 255
    7428:	8f 4f       	sbci	r24, 0xFF	; 255
    742a:	9f 4f       	sbci	r25, 0xFF	; 255
    742c:	99 23       	and	r25, r25
    742e:	a9 f0       	breq	.+42     	; 0x745a <__floatsisf+0x40>
    7430:	f9 2f       	mov	r31, r25
    7432:	96 e9       	ldi	r25, 0x96	; 150
    7434:	bb 27       	eor	r27, r27
    7436:	93 95       	inc	r25
    7438:	f6 95       	lsr	r31
    743a:	87 95       	ror	r24
    743c:	77 95       	ror	r23
    743e:	67 95       	ror	r22
    7440:	b7 95       	ror	r27
    7442:	f1 11       	cpse	r31, r1
    7444:	f8 cf       	rjmp	.-16     	; 0x7436 <__floatsisf+0x1c>
    7446:	fa f4       	brpl	.+62     	; 0x7486 <__floatsisf+0x6c>
    7448:	bb 0f       	add	r27, r27
    744a:	11 f4       	brne	.+4      	; 0x7450 <__floatsisf+0x36>
    744c:	60 ff       	sbrs	r22, 0
    744e:	1b c0       	rjmp	.+54     	; 0x7486 <__floatsisf+0x6c>
    7450:	6f 5f       	subi	r22, 0xFF	; 255
    7452:	7f 4f       	sbci	r23, 0xFF	; 255
    7454:	8f 4f       	sbci	r24, 0xFF	; 255
    7456:	9f 4f       	sbci	r25, 0xFF	; 255
    7458:	16 c0       	rjmp	.+44     	; 0x7486 <__floatsisf+0x6c>
    745a:	88 23       	and	r24, r24
    745c:	11 f0       	breq	.+4      	; 0x7462 <__floatsisf+0x48>
    745e:	96 e9       	ldi	r25, 0x96	; 150
    7460:	11 c0       	rjmp	.+34     	; 0x7484 <__floatsisf+0x6a>
    7462:	77 23       	and	r23, r23
    7464:	21 f0       	breq	.+8      	; 0x746e <__floatsisf+0x54>
    7466:	9e e8       	ldi	r25, 0x8E	; 142
    7468:	87 2f       	mov	r24, r23
    746a:	76 2f       	mov	r23, r22
    746c:	05 c0       	rjmp	.+10     	; 0x7478 <__floatsisf+0x5e>
    746e:	66 23       	and	r22, r22
    7470:	71 f0       	breq	.+28     	; 0x748e <__floatsisf+0x74>
    7472:	96 e8       	ldi	r25, 0x86	; 134
    7474:	86 2f       	mov	r24, r22
    7476:	70 e0       	ldi	r23, 0x00	; 0
    7478:	60 e0       	ldi	r22, 0x00	; 0
    747a:	2a f0       	brmi	.+10     	; 0x7486 <__floatsisf+0x6c>
    747c:	9a 95       	dec	r25
    747e:	66 0f       	add	r22, r22
    7480:	77 1f       	adc	r23, r23
    7482:	88 1f       	adc	r24, r24
    7484:	da f7       	brpl	.-10     	; 0x747c <__floatsisf+0x62>
    7486:	88 0f       	add	r24, r24
    7488:	96 95       	lsr	r25
    748a:	87 95       	ror	r24
    748c:	97 f9       	bld	r25, 7
    748e:	08 95       	ret

00007490 <__fp_cmp>:
    7490:	99 0f       	add	r25, r25
    7492:	00 08       	sbc	r0, r0
    7494:	55 0f       	add	r21, r21
    7496:	aa 0b       	sbc	r26, r26
    7498:	e0 e8       	ldi	r30, 0x80	; 128
    749a:	fe ef       	ldi	r31, 0xFE	; 254
    749c:	16 16       	cp	r1, r22
    749e:	17 06       	cpc	r1, r23
    74a0:	e8 07       	cpc	r30, r24
    74a2:	f9 07       	cpc	r31, r25
    74a4:	c0 f0       	brcs	.+48     	; 0x74d6 <__fp_cmp+0x46>
    74a6:	12 16       	cp	r1, r18
    74a8:	13 06       	cpc	r1, r19
    74aa:	e4 07       	cpc	r30, r20
    74ac:	f5 07       	cpc	r31, r21
    74ae:	98 f0       	brcs	.+38     	; 0x74d6 <__fp_cmp+0x46>
    74b0:	62 1b       	sub	r22, r18
    74b2:	73 0b       	sbc	r23, r19
    74b4:	84 0b       	sbc	r24, r20
    74b6:	95 0b       	sbc	r25, r21
    74b8:	39 f4       	brne	.+14     	; 0x74c8 <__fp_cmp+0x38>
    74ba:	0a 26       	eor	r0, r26
    74bc:	61 f0       	breq	.+24     	; 0x74d6 <__fp_cmp+0x46>
    74be:	23 2b       	or	r18, r19
    74c0:	24 2b       	or	r18, r20
    74c2:	25 2b       	or	r18, r21
    74c4:	21 f4       	brne	.+8      	; 0x74ce <__fp_cmp+0x3e>
    74c6:	08 95       	ret
    74c8:	0a 26       	eor	r0, r26
    74ca:	09 f4       	brne	.+2      	; 0x74ce <__fp_cmp+0x3e>
    74cc:	a1 40       	sbci	r26, 0x01	; 1
    74ce:	a6 95       	lsr	r26
    74d0:	8f ef       	ldi	r24, 0xFF	; 255
    74d2:	81 1d       	adc	r24, r1
    74d4:	81 1d       	adc	r24, r1
    74d6:	08 95       	ret

000074d8 <__fp_inf>:
    74d8:	97 f9       	bld	r25, 7
    74da:	9f 67       	ori	r25, 0x7F	; 127
    74dc:	80 e8       	ldi	r24, 0x80	; 128
    74de:	70 e0       	ldi	r23, 0x00	; 0
    74e0:	60 e0       	ldi	r22, 0x00	; 0
    74e2:	08 95       	ret

000074e4 <__fp_mintl>:
    74e4:	88 23       	and	r24, r24
    74e6:	71 f4       	brne	.+28     	; 0x7504 <__fp_mintl+0x20>
    74e8:	77 23       	and	r23, r23
    74ea:	21 f0       	breq	.+8      	; 0x74f4 <__fp_mintl+0x10>
    74ec:	98 50       	subi	r25, 0x08	; 8
    74ee:	87 2b       	or	r24, r23
    74f0:	76 2f       	mov	r23, r22
    74f2:	07 c0       	rjmp	.+14     	; 0x7502 <__fp_mintl+0x1e>
    74f4:	66 23       	and	r22, r22
    74f6:	11 f4       	brne	.+4      	; 0x74fc <__fp_mintl+0x18>
    74f8:	99 27       	eor	r25, r25
    74fa:	0d c0       	rjmp	.+26     	; 0x7516 <__fp_mintl+0x32>
    74fc:	90 51       	subi	r25, 0x10	; 16
    74fe:	86 2b       	or	r24, r22
    7500:	70 e0       	ldi	r23, 0x00	; 0
    7502:	60 e0       	ldi	r22, 0x00	; 0
    7504:	2a f0       	brmi	.+10     	; 0x7510 <__fp_mintl+0x2c>
    7506:	9a 95       	dec	r25
    7508:	66 0f       	add	r22, r22
    750a:	77 1f       	adc	r23, r23
    750c:	88 1f       	adc	r24, r24
    750e:	da f7       	brpl	.-10     	; 0x7506 <__fp_mintl+0x22>
    7510:	88 0f       	add	r24, r24
    7512:	96 95       	lsr	r25
    7514:	87 95       	ror	r24
    7516:	97 f9       	bld	r25, 7
    7518:	08 95       	ret

0000751a <__fp_mpack>:
    751a:	9f 3f       	cpi	r25, 0xFF	; 255
    751c:	31 f0       	breq	.+12     	; 0x752a <__fp_mpack_finite+0xc>

0000751e <__fp_mpack_finite>:
    751e:	91 50       	subi	r25, 0x01	; 1
    7520:	20 f4       	brcc	.+8      	; 0x752a <__fp_mpack_finite+0xc>
    7522:	87 95       	ror	r24
    7524:	77 95       	ror	r23
    7526:	67 95       	ror	r22
    7528:	b7 95       	ror	r27
    752a:	88 0f       	add	r24, r24
    752c:	91 1d       	adc	r25, r1
    752e:	96 95       	lsr	r25
    7530:	87 95       	ror	r24
    7532:	97 f9       	bld	r25, 7
    7534:	08 95       	ret

00007536 <__fp_nan>:
    7536:	9f ef       	ldi	r25, 0xFF	; 255
    7538:	80 ec       	ldi	r24, 0xC0	; 192
    753a:	08 95       	ret

0000753c <__fp_powser>:
    753c:	df 93       	push	r29
    753e:	cf 93       	push	r28
    7540:	1f 93       	push	r17
    7542:	0f 93       	push	r16
    7544:	ff 92       	push	r15
    7546:	ef 92       	push	r14
    7548:	df 92       	push	r13
    754a:	7b 01       	movw	r14, r22
    754c:	8c 01       	movw	r16, r24
    754e:	68 94       	set
    7550:	05 c0       	rjmp	.+10     	; 0x755c <__fp_powser+0x20>
    7552:	da 2e       	mov	r13, r26
    7554:	ef 01       	movw	r28, r30
    7556:	8d d1       	rcall	.+794    	; 0x7872 <__mulsf3x>
    7558:	fe 01       	movw	r30, r28
    755a:	e8 94       	clt
    755c:	a5 91       	lpm	r26, Z+
    755e:	25 91       	lpm	r18, Z+
    7560:	35 91       	lpm	r19, Z+
    7562:	45 91       	lpm	r20, Z+
    7564:	55 91       	lpm	r21, Z+
    7566:	ae f3       	brts	.-22     	; 0x7552 <__fp_powser+0x16>
    7568:	ef 01       	movw	r28, r30
    756a:	27 de       	rcall	.-946    	; 0x71ba <__addsf3x>
    756c:	fe 01       	movw	r30, r28
    756e:	97 01       	movw	r18, r14
    7570:	a8 01       	movw	r20, r16
    7572:	da 94       	dec	r13
    7574:	79 f7       	brne	.-34     	; 0x7554 <__fp_powser+0x18>
    7576:	df 90       	pop	r13
    7578:	ef 90       	pop	r14
    757a:	ff 90       	pop	r15
    757c:	0f 91       	pop	r16
    757e:	1f 91       	pop	r17
    7580:	cf 91       	pop	r28
    7582:	df 91       	pop	r29
    7584:	08 95       	ret

00007586 <__fp_pscA>:
    7586:	00 24       	eor	r0, r0
    7588:	0a 94       	dec	r0
    758a:	16 16       	cp	r1, r22
    758c:	17 06       	cpc	r1, r23
    758e:	18 06       	cpc	r1, r24
    7590:	09 06       	cpc	r0, r25
    7592:	08 95       	ret

00007594 <__fp_pscB>:
    7594:	00 24       	eor	r0, r0
    7596:	0a 94       	dec	r0
    7598:	12 16       	cp	r1, r18
    759a:	13 06       	cpc	r1, r19
    759c:	14 06       	cpc	r1, r20
    759e:	05 06       	cpc	r0, r21
    75a0:	08 95       	ret
    75a2:	c9 cf       	rjmp	.-110    	; 0x7536 <__fp_nan>

000075a4 <__fp_rempio2>:
    75a4:	50 d0       	rcall	.+160    	; 0x7646 <__fp_splitA>
    75a6:	e8 f3       	brcs	.-6      	; 0x75a2 <__fp_pscB+0xe>
    75a8:	e8 94       	clt
    75aa:	e0 e0       	ldi	r30, 0x00	; 0
    75ac:	bb 27       	eor	r27, r27
    75ae:	9f 57       	subi	r25, 0x7F	; 127
    75b0:	f0 f0       	brcs	.+60     	; 0x75ee <__fp_rempio2+0x4a>
    75b2:	2a ed       	ldi	r18, 0xDA	; 218
    75b4:	3f e0       	ldi	r19, 0x0F	; 15
    75b6:	49 ec       	ldi	r20, 0xC9	; 201
    75b8:	06 c0       	rjmp	.+12     	; 0x75c6 <__fp_rempio2+0x22>
    75ba:	ee 0f       	add	r30, r30
    75bc:	bb 0f       	add	r27, r27
    75be:	66 1f       	adc	r22, r22
    75c0:	77 1f       	adc	r23, r23
    75c2:	88 1f       	adc	r24, r24
    75c4:	28 f0       	brcs	.+10     	; 0x75d0 <__fp_rempio2+0x2c>
    75c6:	b2 3a       	cpi	r27, 0xA2	; 162
    75c8:	62 07       	cpc	r22, r18
    75ca:	73 07       	cpc	r23, r19
    75cc:	84 07       	cpc	r24, r20
    75ce:	28 f0       	brcs	.+10     	; 0x75da <__fp_rempio2+0x36>
    75d0:	b2 5a       	subi	r27, 0xA2	; 162
    75d2:	62 0b       	sbc	r22, r18
    75d4:	73 0b       	sbc	r23, r19
    75d6:	84 0b       	sbc	r24, r20
    75d8:	e3 95       	inc	r30
    75da:	9a 95       	dec	r25
    75dc:	72 f7       	brpl	.-36     	; 0x75ba <__fp_rempio2+0x16>
    75de:	80 38       	cpi	r24, 0x80	; 128
    75e0:	30 f4       	brcc	.+12     	; 0x75ee <__fp_rempio2+0x4a>
    75e2:	9a 95       	dec	r25
    75e4:	bb 0f       	add	r27, r27
    75e6:	66 1f       	adc	r22, r22
    75e8:	77 1f       	adc	r23, r23
    75ea:	88 1f       	adc	r24, r24
    75ec:	d2 f7       	brpl	.-12     	; 0x75e2 <__fp_rempio2+0x3e>
    75ee:	90 48       	sbci	r25, 0x80	; 128
    75f0:	96 cf       	rjmp	.-212    	; 0x751e <__fp_mpack_finite>

000075f2 <__fp_round>:
    75f2:	09 2e       	mov	r0, r25
    75f4:	03 94       	inc	r0
    75f6:	00 0c       	add	r0, r0
    75f8:	11 f4       	brne	.+4      	; 0x75fe <__fp_round+0xc>
    75fa:	88 23       	and	r24, r24
    75fc:	52 f0       	brmi	.+20     	; 0x7612 <__fp_round+0x20>
    75fe:	bb 0f       	add	r27, r27
    7600:	40 f4       	brcc	.+16     	; 0x7612 <__fp_round+0x20>
    7602:	bf 2b       	or	r27, r31
    7604:	11 f4       	brne	.+4      	; 0x760a <__fp_round+0x18>
    7606:	60 ff       	sbrs	r22, 0
    7608:	04 c0       	rjmp	.+8      	; 0x7612 <__fp_round+0x20>
    760a:	6f 5f       	subi	r22, 0xFF	; 255
    760c:	7f 4f       	sbci	r23, 0xFF	; 255
    760e:	8f 4f       	sbci	r24, 0xFF	; 255
    7610:	9f 4f       	sbci	r25, 0xFF	; 255
    7612:	08 95       	ret

00007614 <__fp_sinus>:
    7614:	ef 93       	push	r30
    7616:	e0 ff       	sbrs	r30, 0
    7618:	06 c0       	rjmp	.+12     	; 0x7626 <__fp_sinus+0x12>
    761a:	a2 ea       	ldi	r26, 0xA2	; 162
    761c:	2a ed       	ldi	r18, 0xDA	; 218
    761e:	3f e0       	ldi	r19, 0x0F	; 15
    7620:	49 ec       	ldi	r20, 0xC9	; 201
    7622:	5f eb       	ldi	r21, 0xBF	; 191
    7624:	ca dd       	rcall	.-1132   	; 0x71ba <__addsf3x>
    7626:	e5 df       	rcall	.-54     	; 0x75f2 <__fp_round>
    7628:	0f 90       	pop	r0
    762a:	03 94       	inc	r0
    762c:	01 fc       	sbrc	r0, 1
    762e:	90 58       	subi	r25, 0x80	; 128
    7630:	e5 e1       	ldi	r30, 0x15	; 21
    7632:	f2 e0       	ldi	r31, 0x02	; 2
    7634:	d2 c1       	rjmp	.+932    	; 0x79da <__fp_powsodd>

00007636 <__fp_split3>:
    7636:	57 fd       	sbrc	r21, 7
    7638:	90 58       	subi	r25, 0x80	; 128
    763a:	44 0f       	add	r20, r20
    763c:	55 1f       	adc	r21, r21
    763e:	59 f0       	breq	.+22     	; 0x7656 <__fp_splitA+0x10>
    7640:	5f 3f       	cpi	r21, 0xFF	; 255
    7642:	71 f0       	breq	.+28     	; 0x7660 <__fp_splitA+0x1a>
    7644:	47 95       	ror	r20

00007646 <__fp_splitA>:
    7646:	88 0f       	add	r24, r24
    7648:	97 fb       	bst	r25, 7
    764a:	99 1f       	adc	r25, r25
    764c:	61 f0       	breq	.+24     	; 0x7666 <__fp_splitA+0x20>
    764e:	9f 3f       	cpi	r25, 0xFF	; 255
    7650:	79 f0       	breq	.+30     	; 0x7670 <__fp_splitA+0x2a>
    7652:	87 95       	ror	r24
    7654:	08 95       	ret
    7656:	12 16       	cp	r1, r18
    7658:	13 06       	cpc	r1, r19
    765a:	14 06       	cpc	r1, r20
    765c:	55 1f       	adc	r21, r21
    765e:	f2 cf       	rjmp	.-28     	; 0x7644 <__fp_split3+0xe>
    7660:	46 95       	lsr	r20
    7662:	f1 df       	rcall	.-30     	; 0x7646 <__fp_splitA>
    7664:	08 c0       	rjmp	.+16     	; 0x7676 <__fp_splitA+0x30>
    7666:	16 16       	cp	r1, r22
    7668:	17 06       	cpc	r1, r23
    766a:	18 06       	cpc	r1, r24
    766c:	99 1f       	adc	r25, r25
    766e:	f1 cf       	rjmp	.-30     	; 0x7652 <__fp_splitA+0xc>
    7670:	86 95       	lsr	r24
    7672:	71 05       	cpc	r23, r1
    7674:	61 05       	cpc	r22, r1
    7676:	08 94       	sec
    7678:	08 95       	ret

0000767a <__fp_trunc>:
    767a:	e5 df       	rcall	.-54     	; 0x7646 <__fp_splitA>
    767c:	a0 f0       	brcs	.+40     	; 0x76a6 <__fp_trunc+0x2c>
    767e:	be e7       	ldi	r27, 0x7E	; 126
    7680:	b9 17       	cp	r27, r25
    7682:	88 f4       	brcc	.+34     	; 0x76a6 <__fp_trunc+0x2c>
    7684:	bb 27       	eor	r27, r27
    7686:	9f 38       	cpi	r25, 0x8F	; 143
    7688:	60 f4       	brcc	.+24     	; 0x76a2 <__fp_trunc+0x28>
    768a:	16 16       	cp	r1, r22
    768c:	b1 1d       	adc	r27, r1
    768e:	67 2f       	mov	r22, r23
    7690:	78 2f       	mov	r23, r24
    7692:	88 27       	eor	r24, r24
    7694:	98 5f       	subi	r25, 0xF8	; 248
    7696:	f7 cf       	rjmp	.-18     	; 0x7686 <__fp_trunc+0xc>
    7698:	86 95       	lsr	r24
    769a:	77 95       	ror	r23
    769c:	67 95       	ror	r22
    769e:	b1 1d       	adc	r27, r1
    76a0:	93 95       	inc	r25
    76a2:	96 39       	cpi	r25, 0x96	; 150
    76a4:	c8 f3       	brcs	.-14     	; 0x7698 <__fp_trunc+0x1e>
    76a6:	08 95       	ret

000076a8 <__fp_zero>:
    76a8:	e8 94       	clt

000076aa <__fp_szero>:
    76aa:	bb 27       	eor	r27, r27
    76ac:	66 27       	eor	r22, r22
    76ae:	77 27       	eor	r23, r23
    76b0:	cb 01       	movw	r24, r22
    76b2:	97 f9       	bld	r25, 7
    76b4:	08 95       	ret

000076b6 <__gesf2>:
    76b6:	ec de       	rcall	.-552    	; 0x7490 <__fp_cmp>
    76b8:	08 f4       	brcc	.+2      	; 0x76bc <__gesf2+0x6>
    76ba:	8f ef       	ldi	r24, 0xFF	; 255
    76bc:	08 95       	ret
    76be:	63 df       	rcall	.-314    	; 0x7586 <__fp_pscA>
    76c0:	19 f0       	breq	.+6      	; 0x76c8 <__gesf2+0x12>
    76c2:	68 df       	rcall	.-304    	; 0x7594 <__fp_pscB>
    76c4:	09 f0       	breq	.+2      	; 0x76c8 <__gesf2+0x12>
    76c6:	37 cf       	rjmp	.-402    	; 0x7536 <__fp_nan>
    76c8:	07 cf       	rjmp	.-498    	; 0x74d8 <__fp_inf>
    76ca:	b9 01       	movw	r22, r18
    76cc:	ca 01       	movw	r24, r20
    76ce:	25 cf       	rjmp	.-438    	; 0x751a <__fp_mpack>

000076d0 <hypot>:
    76d0:	9f 77       	andi	r25, 0x7F	; 127
    76d2:	5f 77       	andi	r21, 0x7F	; 127
    76d4:	b0 df       	rcall	.-160    	; 0x7636 <__fp_split3>
    76d6:	98 f3       	brcs	.-26     	; 0x76be <__gesf2+0x8>
    76d8:	99 23       	and	r25, r25
    76da:	b9 f3       	breq	.-18     	; 0x76ca <__gesf2+0x14>
    76dc:	55 23       	and	r21, r21
    76de:	b9 f3       	breq	.-18     	; 0x76ce <__gesf2+0x18>
    76e0:	ff 27       	eor	r31, r31
    76e2:	95 17       	cp	r25, r21
    76e4:	58 f4       	brcc	.+22     	; 0x76fc <hypot+0x2c>
    76e6:	e5 2f       	mov	r30, r21
    76e8:	e9 1b       	sub	r30, r25
    76ea:	ed 30       	cpi	r30, 0x0D	; 13
    76ec:	70 f7       	brcc	.-36     	; 0x76ca <__gesf2+0x14>
    76ee:	5e 3b       	cpi	r21, 0xBE	; 190
    76f0:	10 f0       	brcs	.+4      	; 0x76f6 <hypot+0x26>
    76f2:	f1 e4       	ldi	r31, 0x41	; 65
    76f4:	1c c0       	rjmp	.+56     	; 0x772e <hypot+0x5e>
    76f6:	90 34       	cpi	r25, 0x40	; 64
    76f8:	e0 f4       	brcc	.+56     	; 0x7732 <hypot+0x62>
    76fa:	0a c0       	rjmp	.+20     	; 0x7710 <hypot+0x40>
    76fc:	e9 2f       	mov	r30, r25
    76fe:	e5 1b       	sub	r30, r21
    7700:	ed 30       	cpi	r30, 0x0D	; 13
    7702:	28 f7       	brcc	.-54     	; 0x76ce <__gesf2+0x18>
    7704:	9e 3b       	cpi	r25, 0xBE	; 190
    7706:	10 f0       	brcs	.+4      	; 0x770c <hypot+0x3c>
    7708:	f1 e4       	ldi	r31, 0x41	; 65
    770a:	11 c0       	rjmp	.+34     	; 0x772e <hypot+0x5e>
    770c:	50 34       	cpi	r21, 0x40	; 64
    770e:	88 f4       	brcc	.+34     	; 0x7732 <hypot+0x62>
    7710:	f9 ea       	ldi	r31, 0xA9	; 169
    7712:	88 23       	and	r24, r24
    7714:	2a f0       	brmi	.+10     	; 0x7720 <hypot+0x50>
    7716:	9a 95       	dec	r25
    7718:	66 0f       	add	r22, r22
    771a:	77 1f       	adc	r23, r23
    771c:	88 1f       	adc	r24, r24
    771e:	da f7       	brpl	.-10     	; 0x7716 <hypot+0x46>
    7720:	44 23       	and	r20, r20
    7722:	2a f0       	brmi	.+10     	; 0x772e <hypot+0x5e>
    7724:	5a 95       	dec	r21
    7726:	22 0f       	add	r18, r18
    7728:	33 1f       	adc	r19, r19
    772a:	44 1f       	adc	r20, r20
    772c:	da f7       	brpl	.-10     	; 0x7724 <hypot+0x54>
    772e:	9f 1b       	sub	r25, r31
    7730:	5f 1b       	sub	r21, r31
    7732:	ff 93       	push	r31
    7734:	1f 93       	push	r17
    7736:	0f 93       	push	r16
    7738:	ff 92       	push	r15
    773a:	ef 92       	push	r14
    773c:	79 01       	movw	r14, r18
    773e:	8a 01       	movw	r16, r20
    7740:	bb 27       	eor	r27, r27
    7742:	ab 2f       	mov	r26, r27
    7744:	9b 01       	movw	r18, r22
    7746:	ac 01       	movw	r20, r24
    7748:	96 d0       	rcall	.+300    	; 0x7876 <__mulsf3_pse>
    774a:	97 01       	movw	r18, r14
    774c:	a8 01       	movw	r20, r16
    774e:	bf 93       	push	r27
    7750:	7b 01       	movw	r14, r22
    7752:	8c 01       	movw	r16, r24
    7754:	aa 27       	eor	r26, r26
    7756:	ba 2f       	mov	r27, r26
    7758:	b9 01       	movw	r22, r18
    775a:	ca 01       	movw	r24, r20
    775c:	8c d0       	rcall	.+280    	; 0x7876 <__mulsf3_pse>
    775e:	af 91       	pop	r26
    7760:	97 01       	movw	r18, r14
    7762:	a8 01       	movw	r20, r16
    7764:	ef 90       	pop	r14
    7766:	ff 90       	pop	r15
    7768:	0f 91       	pop	r16
    776a:	1f 91       	pop	r17
    776c:	26 dd       	rcall	.-1460   	; 0x71ba <__addsf3x>
    776e:	41 df       	rcall	.-382    	; 0x75f2 <__fp_round>
    7770:	e1 d0       	rcall	.+450    	; 0x7934 <sqrt>
    7772:	4f 91       	pop	r20
    7774:	40 ff       	sbrs	r20, 0
    7776:	08 95       	ret
    7778:	55 27       	eor	r21, r21
    777a:	47 fd       	sbrc	r20, 7
    777c:	50 95       	com	r21
    777e:	09 c0       	rjmp	.+18     	; 0x7792 <ldexp>

00007780 <inverse>:
    7780:	9b 01       	movw	r18, r22
    7782:	ac 01       	movw	r20, r24
    7784:	60 e0       	ldi	r22, 0x00	; 0
    7786:	70 e0       	ldi	r23, 0x00	; 0
    7788:	80 e8       	ldi	r24, 0x80	; 128
    778a:	9f e3       	ldi	r25, 0x3F	; 63
    778c:	ab cd       	rjmp	.-1194   	; 0x72e4 <__divsf3>
    778e:	a4 ce       	rjmp	.-696    	; 0x74d8 <__fp_inf>
    7790:	c4 ce       	rjmp	.-632    	; 0x751a <__fp_mpack>

00007792 <ldexp>:
    7792:	59 df       	rcall	.-334    	; 0x7646 <__fp_splitA>
    7794:	e8 f3       	brcs	.-6      	; 0x7790 <inverse+0x10>
    7796:	99 23       	and	r25, r25
    7798:	d9 f3       	breq	.-10     	; 0x7790 <inverse+0x10>
    779a:	94 0f       	add	r25, r20
    779c:	51 1d       	adc	r21, r1
    779e:	bb f3       	brvs	.-18     	; 0x778e <inverse+0xe>
    77a0:	91 50       	subi	r25, 0x01	; 1
    77a2:	50 40       	sbci	r21, 0x00	; 0
    77a4:	94 f0       	brlt	.+36     	; 0x77ca <ldexp+0x38>
    77a6:	59 f0       	breq	.+22     	; 0x77be <ldexp+0x2c>
    77a8:	88 23       	and	r24, r24
    77aa:	32 f0       	brmi	.+12     	; 0x77b8 <ldexp+0x26>
    77ac:	66 0f       	add	r22, r22
    77ae:	77 1f       	adc	r23, r23
    77b0:	88 1f       	adc	r24, r24
    77b2:	91 50       	subi	r25, 0x01	; 1
    77b4:	50 40       	sbci	r21, 0x00	; 0
    77b6:	c1 f7       	brne	.-16     	; 0x77a8 <ldexp+0x16>
    77b8:	9e 3f       	cpi	r25, 0xFE	; 254
    77ba:	51 05       	cpc	r21, r1
    77bc:	44 f7       	brge	.-48     	; 0x778e <inverse+0xe>
    77be:	88 0f       	add	r24, r24
    77c0:	91 1d       	adc	r25, r1
    77c2:	96 95       	lsr	r25
    77c4:	87 95       	ror	r24
    77c6:	97 f9       	bld	r25, 7
    77c8:	08 95       	ret
    77ca:	5f 3f       	cpi	r21, 0xFF	; 255
    77cc:	ac f0       	brlt	.+42     	; 0x77f8 <ldexp+0x66>
    77ce:	98 3e       	cpi	r25, 0xE8	; 232
    77d0:	9c f0       	brlt	.+38     	; 0x77f8 <ldexp+0x66>
    77d2:	bb 27       	eor	r27, r27
    77d4:	86 95       	lsr	r24
    77d6:	77 95       	ror	r23
    77d8:	67 95       	ror	r22
    77da:	b7 95       	ror	r27
    77dc:	08 f4       	brcc	.+2      	; 0x77e0 <ldexp+0x4e>
    77de:	b1 60       	ori	r27, 0x01	; 1
    77e0:	93 95       	inc	r25
    77e2:	c1 f7       	brne	.-16     	; 0x77d4 <ldexp+0x42>
    77e4:	bb 0f       	add	r27, r27
    77e6:	58 f7       	brcc	.-42     	; 0x77be <ldexp+0x2c>
    77e8:	11 f4       	brne	.+4      	; 0x77ee <ldexp+0x5c>
    77ea:	60 ff       	sbrs	r22, 0
    77ec:	e8 cf       	rjmp	.-48     	; 0x77be <ldexp+0x2c>
    77ee:	6f 5f       	subi	r22, 0xFF	; 255
    77f0:	7f 4f       	sbci	r23, 0xFF	; 255
    77f2:	8f 4f       	sbci	r24, 0xFF	; 255
    77f4:	9f 4f       	sbci	r25, 0xFF	; 255
    77f6:	e3 cf       	rjmp	.-58     	; 0x77be <ldexp+0x2c>
    77f8:	58 cf       	rjmp	.-336    	; 0x76aa <__fp_szero>

000077fa <lround>:
    77fa:	25 df       	rcall	.-438    	; 0x7646 <__fp_splitA>
    77fc:	58 f1       	brcs	.+86     	; 0x7854 <lround+0x5a>
    77fe:	9e 57       	subi	r25, 0x7E	; 126
    7800:	58 f1       	brcs	.+86     	; 0x7858 <lround+0x5e>
    7802:	98 51       	subi	r25, 0x18	; 24
    7804:	a0 f0       	brcs	.+40     	; 0x782e <lround+0x34>
    7806:	e9 f0       	breq	.+58     	; 0x7842 <lround+0x48>
    7808:	98 30       	cpi	r25, 0x08	; 8
    780a:	20 f5       	brcc	.+72     	; 0x7854 <lround+0x5a>
    780c:	09 2e       	mov	r0, r25
    780e:	99 27       	eor	r25, r25
    7810:	66 0f       	add	r22, r22
    7812:	77 1f       	adc	r23, r23
    7814:	88 1f       	adc	r24, r24
    7816:	99 1f       	adc	r25, r25
    7818:	0a 94       	dec	r0
    781a:	d1 f7       	brne	.-12     	; 0x7810 <lround+0x16>
    781c:	12 c0       	rjmp	.+36     	; 0x7842 <lround+0x48>
    781e:	06 2e       	mov	r0, r22
    7820:	67 2f       	mov	r22, r23
    7822:	78 2f       	mov	r23, r24
    7824:	88 27       	eor	r24, r24
    7826:	98 5f       	subi	r25, 0xF8	; 248
    7828:	11 f4       	brne	.+4      	; 0x782e <lround+0x34>
    782a:	00 0c       	add	r0, r0
    782c:	07 c0       	rjmp	.+14     	; 0x783c <lround+0x42>
    782e:	99 3f       	cpi	r25, 0xF9	; 249
    7830:	b4 f3       	brlt	.-20     	; 0x781e <lround+0x24>
    7832:	86 95       	lsr	r24
    7834:	77 95       	ror	r23
    7836:	67 95       	ror	r22
    7838:	93 95       	inc	r25
    783a:	d9 f7       	brne	.-10     	; 0x7832 <lround+0x38>
    783c:	61 1d       	adc	r22, r1
    783e:	71 1d       	adc	r23, r1
    7840:	81 1d       	adc	r24, r1
    7842:	3e f4       	brtc	.+14     	; 0x7852 <lround+0x58>
    7844:	90 95       	com	r25
    7846:	80 95       	com	r24
    7848:	70 95       	com	r23
    784a:	61 95       	neg	r22
    784c:	7f 4f       	sbci	r23, 0xFF	; 255
    784e:	8f 4f       	sbci	r24, 0xFF	; 255
    7850:	9f 4f       	sbci	r25, 0xFF	; 255
    7852:	08 95       	ret
    7854:	68 94       	set
    7856:	29 cf       	rjmp	.-430    	; 0x76aa <__fp_szero>
    7858:	27 cf       	rjmp	.-434    	; 0x76a8 <__fp_zero>

0000785a <__mulsf3>:
    785a:	0b d0       	rcall	.+22     	; 0x7872 <__mulsf3x>
    785c:	ca ce       	rjmp	.-620    	; 0x75f2 <__fp_round>
    785e:	93 de       	rcall	.-730    	; 0x7586 <__fp_pscA>
    7860:	28 f0       	brcs	.+10     	; 0x786c <__mulsf3+0x12>
    7862:	98 de       	rcall	.-720    	; 0x7594 <__fp_pscB>
    7864:	18 f0       	brcs	.+6      	; 0x786c <__mulsf3+0x12>
    7866:	95 23       	and	r25, r21
    7868:	09 f0       	breq	.+2      	; 0x786c <__mulsf3+0x12>
    786a:	36 ce       	rjmp	.-916    	; 0x74d8 <__fp_inf>
    786c:	64 ce       	rjmp	.-824    	; 0x7536 <__fp_nan>
    786e:	11 24       	eor	r1, r1
    7870:	1c cf       	rjmp	.-456    	; 0x76aa <__fp_szero>

00007872 <__mulsf3x>:
    7872:	e1 de       	rcall	.-574    	; 0x7636 <__fp_split3>
    7874:	a0 f3       	brcs	.-24     	; 0x785e <__mulsf3+0x4>

00007876 <__mulsf3_pse>:
    7876:	95 9f       	mul	r25, r21
    7878:	d1 f3       	breq	.-12     	; 0x786e <__mulsf3+0x14>
    787a:	95 0f       	add	r25, r21
    787c:	50 e0       	ldi	r21, 0x00	; 0
    787e:	55 1f       	adc	r21, r21
    7880:	62 9f       	mul	r22, r18
    7882:	f0 01       	movw	r30, r0
    7884:	72 9f       	mul	r23, r18
    7886:	bb 27       	eor	r27, r27
    7888:	f0 0d       	add	r31, r0
    788a:	b1 1d       	adc	r27, r1
    788c:	63 9f       	mul	r22, r19
    788e:	aa 27       	eor	r26, r26
    7890:	f0 0d       	add	r31, r0
    7892:	b1 1d       	adc	r27, r1
    7894:	aa 1f       	adc	r26, r26
    7896:	64 9f       	mul	r22, r20
    7898:	66 27       	eor	r22, r22
    789a:	b0 0d       	add	r27, r0
    789c:	a1 1d       	adc	r26, r1
    789e:	66 1f       	adc	r22, r22
    78a0:	82 9f       	mul	r24, r18
    78a2:	22 27       	eor	r18, r18
    78a4:	b0 0d       	add	r27, r0
    78a6:	a1 1d       	adc	r26, r1
    78a8:	62 1f       	adc	r22, r18
    78aa:	73 9f       	mul	r23, r19
    78ac:	b0 0d       	add	r27, r0
    78ae:	a1 1d       	adc	r26, r1
    78b0:	62 1f       	adc	r22, r18
    78b2:	83 9f       	mul	r24, r19
    78b4:	a0 0d       	add	r26, r0
    78b6:	61 1d       	adc	r22, r1
    78b8:	22 1f       	adc	r18, r18
    78ba:	74 9f       	mul	r23, r20
    78bc:	33 27       	eor	r19, r19
    78be:	a0 0d       	add	r26, r0
    78c0:	61 1d       	adc	r22, r1
    78c2:	23 1f       	adc	r18, r19
    78c4:	84 9f       	mul	r24, r20
    78c6:	60 0d       	add	r22, r0
    78c8:	21 1d       	adc	r18, r1
    78ca:	82 2f       	mov	r24, r18
    78cc:	76 2f       	mov	r23, r22
    78ce:	6a 2f       	mov	r22, r26
    78d0:	11 24       	eor	r1, r1
    78d2:	9f 57       	subi	r25, 0x7F	; 127
    78d4:	50 40       	sbci	r21, 0x00	; 0
    78d6:	8a f0       	brmi	.+34     	; 0x78fa <__mulsf3_pse+0x84>
    78d8:	e1 f0       	breq	.+56     	; 0x7912 <__mulsf3_pse+0x9c>
    78da:	88 23       	and	r24, r24
    78dc:	4a f0       	brmi	.+18     	; 0x78f0 <__mulsf3_pse+0x7a>
    78de:	ee 0f       	add	r30, r30
    78e0:	ff 1f       	adc	r31, r31
    78e2:	bb 1f       	adc	r27, r27
    78e4:	66 1f       	adc	r22, r22
    78e6:	77 1f       	adc	r23, r23
    78e8:	88 1f       	adc	r24, r24
    78ea:	91 50       	subi	r25, 0x01	; 1
    78ec:	50 40       	sbci	r21, 0x00	; 0
    78ee:	a9 f7       	brne	.-22     	; 0x78da <__mulsf3_pse+0x64>
    78f0:	9e 3f       	cpi	r25, 0xFE	; 254
    78f2:	51 05       	cpc	r21, r1
    78f4:	70 f0       	brcs	.+28     	; 0x7912 <__mulsf3_pse+0x9c>
    78f6:	f0 cd       	rjmp	.-1056   	; 0x74d8 <__fp_inf>
    78f8:	d8 ce       	rjmp	.-592    	; 0x76aa <__fp_szero>
    78fa:	5f 3f       	cpi	r21, 0xFF	; 255
    78fc:	ec f3       	brlt	.-6      	; 0x78f8 <__mulsf3_pse+0x82>
    78fe:	98 3e       	cpi	r25, 0xE8	; 232
    7900:	dc f3       	brlt	.-10     	; 0x78f8 <__mulsf3_pse+0x82>
    7902:	86 95       	lsr	r24
    7904:	77 95       	ror	r23
    7906:	67 95       	ror	r22
    7908:	b7 95       	ror	r27
    790a:	f7 95       	ror	r31
    790c:	e7 95       	ror	r30
    790e:	9f 5f       	subi	r25, 0xFF	; 255
    7910:	c1 f7       	brne	.-16     	; 0x7902 <__mulsf3_pse+0x8c>
    7912:	fe 2b       	or	r31, r30
    7914:	88 0f       	add	r24, r24
    7916:	91 1d       	adc	r25, r1
    7918:	96 95       	lsr	r25
    791a:	87 95       	ror	r24
    791c:	97 f9       	bld	r25, 7
    791e:	08 95       	ret

00007920 <sin>:
    7920:	9f 93       	push	r25
    7922:	40 de       	rcall	.-896    	; 0x75a4 <__fp_rempio2>
    7924:	0f 90       	pop	r0
    7926:	07 fc       	sbrc	r0, 7
    7928:	ee 5f       	subi	r30, 0xFE	; 254
    792a:	74 ce       	rjmp	.-792    	; 0x7614 <__fp_sinus>
    792c:	11 f4       	brne	.+4      	; 0x7932 <sin+0x12>
    792e:	0e f4       	brtc	.+2      	; 0x7932 <sin+0x12>
    7930:	02 ce       	rjmp	.-1020   	; 0x7536 <__fp_nan>
    7932:	f3 cd       	rjmp	.-1050   	; 0x751a <__fp_mpack>

00007934 <sqrt>:
    7934:	88 de       	rcall	.-752    	; 0x7646 <__fp_splitA>
    7936:	d0 f3       	brcs	.-12     	; 0x792c <sin+0xc>
    7938:	99 23       	and	r25, r25
    793a:	d9 f3       	breq	.-10     	; 0x7932 <sin+0x12>
    793c:	ce f3       	brts	.-14     	; 0x7930 <sin+0x10>
    793e:	9f 57       	subi	r25, 0x7F	; 127
    7940:	55 0b       	sbc	r21, r21
    7942:	87 ff       	sbrs	r24, 7
    7944:	43 d0       	rcall	.+134    	; 0x79cc <__fp_norm2>
    7946:	00 24       	eor	r0, r0
    7948:	a0 e6       	ldi	r26, 0x60	; 96
    794a:	40 ea       	ldi	r20, 0xA0	; 160
    794c:	90 01       	movw	r18, r0
    794e:	80 58       	subi	r24, 0x80	; 128
    7950:	56 95       	lsr	r21
    7952:	97 95       	ror	r25
    7954:	28 f4       	brcc	.+10     	; 0x7960 <sqrt+0x2c>
    7956:	80 5c       	subi	r24, 0xC0	; 192
    7958:	66 0f       	add	r22, r22
    795a:	77 1f       	adc	r23, r23
    795c:	88 1f       	adc	r24, r24
    795e:	20 f0       	brcs	.+8      	; 0x7968 <sqrt+0x34>
    7960:	26 17       	cp	r18, r22
    7962:	37 07       	cpc	r19, r23
    7964:	48 07       	cpc	r20, r24
    7966:	30 f4       	brcc	.+12     	; 0x7974 <sqrt+0x40>
    7968:	62 1b       	sub	r22, r18
    796a:	73 0b       	sbc	r23, r19
    796c:	84 0b       	sbc	r24, r20
    796e:	20 29       	or	r18, r0
    7970:	31 29       	or	r19, r1
    7972:	4a 2b       	or	r20, r26
    7974:	a6 95       	lsr	r26
    7976:	17 94       	ror	r1
    7978:	07 94       	ror	r0
    797a:	20 25       	eor	r18, r0
    797c:	31 25       	eor	r19, r1
    797e:	4a 27       	eor	r20, r26
    7980:	58 f7       	brcc	.-42     	; 0x7958 <sqrt+0x24>
    7982:	66 0f       	add	r22, r22
    7984:	77 1f       	adc	r23, r23
    7986:	88 1f       	adc	r24, r24
    7988:	20 f0       	brcs	.+8      	; 0x7992 <sqrt+0x5e>
    798a:	26 17       	cp	r18, r22
    798c:	37 07       	cpc	r19, r23
    798e:	48 07       	cpc	r20, r24
    7990:	30 f4       	brcc	.+12     	; 0x799e <sqrt+0x6a>
    7992:	62 0b       	sbc	r22, r18
    7994:	73 0b       	sbc	r23, r19
    7996:	84 0b       	sbc	r24, r20
    7998:	20 0d       	add	r18, r0
    799a:	31 1d       	adc	r19, r1
    799c:	41 1d       	adc	r20, r1
    799e:	a0 95       	com	r26
    79a0:	81 f7       	brne	.-32     	; 0x7982 <sqrt+0x4e>
    79a2:	b9 01       	movw	r22, r18
    79a4:	84 2f       	mov	r24, r20
    79a6:	91 58       	subi	r25, 0x81	; 129
    79a8:	88 0f       	add	r24, r24
    79aa:	96 95       	lsr	r25
    79ac:	87 95       	ror	r24
    79ae:	08 95       	ret

000079b0 <square>:
    79b0:	9b 01       	movw	r18, r22
    79b2:	ac 01       	movw	r20, r24
    79b4:	52 cf       	rjmp	.-348    	; 0x785a <__mulsf3>

000079b6 <trunc>:
    79b6:	61 de       	rcall	.-830    	; 0x767a <__fp_trunc>
    79b8:	20 f0       	brcs	.+8      	; 0x79c2 <trunc+0xc>
    79ba:	9f 37       	cpi	r25, 0x7F	; 127
    79bc:	08 f4       	brcc	.+2      	; 0x79c0 <trunc+0xa>
    79be:	75 ce       	rjmp	.-790    	; 0x76aa <__fp_szero>
    79c0:	91 cd       	rjmp	.-1246   	; 0x74e4 <__fp_mintl>
    79c2:	ab cd       	rjmp	.-1194   	; 0x751a <__fp_mpack>

000079c4 <__unordsf2>:
    79c4:	65 dd       	rcall	.-1334   	; 0x7490 <__fp_cmp>
    79c6:	88 0b       	sbc	r24, r24
    79c8:	99 0b       	sbc	r25, r25
    79ca:	08 95       	ret

000079cc <__fp_norm2>:
    79cc:	91 50       	subi	r25, 0x01	; 1
    79ce:	50 40       	sbci	r21, 0x00	; 0
    79d0:	66 0f       	add	r22, r22
    79d2:	77 1f       	adc	r23, r23
    79d4:	88 1f       	adc	r24, r24
    79d6:	d2 f7       	brpl	.-12     	; 0x79cc <__fp_norm2>
    79d8:	08 95       	ret

000079da <__fp_powsodd>:
    79da:	9f 93       	push	r25
    79dc:	8f 93       	push	r24
    79de:	7f 93       	push	r23
    79e0:	6f 93       	push	r22
    79e2:	ff 93       	push	r31
    79e4:	ef 93       	push	r30
    79e6:	9b 01       	movw	r18, r22
    79e8:	ac 01       	movw	r20, r24
    79ea:	37 df       	rcall	.-402    	; 0x785a <__mulsf3>
    79ec:	ef 91       	pop	r30
    79ee:	ff 91       	pop	r31
    79f0:	a5 dd       	rcall	.-1206   	; 0x753c <__fp_powser>
    79f2:	2f 91       	pop	r18
    79f4:	3f 91       	pop	r19
    79f6:	4f 91       	pop	r20
    79f8:	5f 91       	pop	r21
    79fa:	2f cf       	rjmp	.-418    	; 0x785a <__mulsf3>

000079fc <__mulsi3>:
    79fc:	62 9f       	mul	r22, r18
    79fe:	d0 01       	movw	r26, r0
    7a00:	73 9f       	mul	r23, r19
    7a02:	f0 01       	movw	r30, r0
    7a04:	82 9f       	mul	r24, r18
    7a06:	e0 0d       	add	r30, r0
    7a08:	f1 1d       	adc	r31, r1
    7a0a:	64 9f       	mul	r22, r20
    7a0c:	e0 0d       	add	r30, r0
    7a0e:	f1 1d       	adc	r31, r1
    7a10:	92 9f       	mul	r25, r18
    7a12:	f0 0d       	add	r31, r0
    7a14:	83 9f       	mul	r24, r19
    7a16:	f0 0d       	add	r31, r0
    7a18:	74 9f       	mul	r23, r20
    7a1a:	f0 0d       	add	r31, r0
    7a1c:	65 9f       	mul	r22, r21
    7a1e:	f0 0d       	add	r31, r0
    7a20:	99 27       	eor	r25, r25
    7a22:	72 9f       	mul	r23, r18
    7a24:	b0 0d       	add	r27, r0
    7a26:	e1 1d       	adc	r30, r1
    7a28:	f9 1f       	adc	r31, r25
    7a2a:	63 9f       	mul	r22, r19
    7a2c:	b0 0d       	add	r27, r0
    7a2e:	e1 1d       	adc	r30, r1
    7a30:	f9 1f       	adc	r31, r25
    7a32:	bd 01       	movw	r22, r26
    7a34:	cf 01       	movw	r24, r30
    7a36:	11 24       	eor	r1, r1
    7a38:	08 95       	ret

00007a3a <__udivmodsi4>:
    7a3a:	a1 e2       	ldi	r26, 0x21	; 33
    7a3c:	1a 2e       	mov	r1, r26
    7a3e:	aa 1b       	sub	r26, r26
    7a40:	bb 1b       	sub	r27, r27
    7a42:	fd 01       	movw	r30, r26
    7a44:	0d c0       	rjmp	.+26     	; 0x7a60 <__udivmodsi4_ep>

00007a46 <__udivmodsi4_loop>:
    7a46:	aa 1f       	adc	r26, r26
    7a48:	bb 1f       	adc	r27, r27
    7a4a:	ee 1f       	adc	r30, r30
    7a4c:	ff 1f       	adc	r31, r31
    7a4e:	a2 17       	cp	r26, r18
    7a50:	b3 07       	cpc	r27, r19
    7a52:	e4 07       	cpc	r30, r20
    7a54:	f5 07       	cpc	r31, r21
    7a56:	20 f0       	brcs	.+8      	; 0x7a60 <__udivmodsi4_ep>
    7a58:	a2 1b       	sub	r26, r18
    7a5a:	b3 0b       	sbc	r27, r19
    7a5c:	e4 0b       	sbc	r30, r20
    7a5e:	f5 0b       	sbc	r31, r21

00007a60 <__udivmodsi4_ep>:
    7a60:	66 1f       	adc	r22, r22
    7a62:	77 1f       	adc	r23, r23
    7a64:	88 1f       	adc	r24, r24
    7a66:	99 1f       	adc	r25, r25
    7a68:	1a 94       	dec	r1
    7a6a:	69 f7       	brne	.-38     	; 0x7a46 <__udivmodsi4_loop>
    7a6c:	60 95       	com	r22
    7a6e:	70 95       	com	r23
    7a70:	80 95       	com	r24
    7a72:	90 95       	com	r25
    7a74:	9b 01       	movw	r18, r22
    7a76:	ac 01       	movw	r20, r24
    7a78:	bd 01       	movw	r22, r26
    7a7a:	cf 01       	movw	r24, r30
    7a7c:	08 95       	ret

00007a7e <__prologue_saves__>:
    7a7e:	2f 92       	push	r2
    7a80:	3f 92       	push	r3
    7a82:	4f 92       	push	r4
    7a84:	5f 92       	push	r5
    7a86:	6f 92       	push	r6
    7a88:	7f 92       	push	r7
    7a8a:	8f 92       	push	r8
    7a8c:	9f 92       	push	r9
    7a8e:	af 92       	push	r10
    7a90:	bf 92       	push	r11
    7a92:	cf 92       	push	r12
    7a94:	df 92       	push	r13
    7a96:	ef 92       	push	r14
    7a98:	ff 92       	push	r15
    7a9a:	0f 93       	push	r16
    7a9c:	1f 93       	push	r17
    7a9e:	cf 93       	push	r28
    7aa0:	df 93       	push	r29
    7aa2:	cd b7       	in	r28, 0x3d	; 61
    7aa4:	de b7       	in	r29, 0x3e	; 62
    7aa6:	ca 1b       	sub	r28, r26
    7aa8:	db 0b       	sbc	r29, r27
    7aaa:	0f b6       	in	r0, 0x3f	; 63
    7aac:	f8 94       	cli
    7aae:	de bf       	out	0x3e, r29	; 62
    7ab0:	0f be       	out	0x3f, r0	; 63
    7ab2:	cd bf       	out	0x3d, r28	; 61
    7ab4:	19 94       	eijmp

00007ab6 <__epilogue_restores__>:
    7ab6:	2a 88       	ldd	r2, Y+18	; 0x12
    7ab8:	39 88       	ldd	r3, Y+17	; 0x11
    7aba:	48 88       	ldd	r4, Y+16	; 0x10
    7abc:	5f 84       	ldd	r5, Y+15	; 0x0f
    7abe:	6e 84       	ldd	r6, Y+14	; 0x0e
    7ac0:	7d 84       	ldd	r7, Y+13	; 0x0d
    7ac2:	8c 84       	ldd	r8, Y+12	; 0x0c
    7ac4:	9b 84       	ldd	r9, Y+11	; 0x0b
    7ac6:	aa 84       	ldd	r10, Y+10	; 0x0a
    7ac8:	b9 84       	ldd	r11, Y+9	; 0x09
    7aca:	c8 84       	ldd	r12, Y+8	; 0x08
    7acc:	df 80       	ldd	r13, Y+7	; 0x07
    7ace:	ee 80       	ldd	r14, Y+6	; 0x06
    7ad0:	fd 80       	ldd	r15, Y+5	; 0x05
    7ad2:	0c 81       	ldd	r16, Y+4	; 0x04
    7ad4:	1b 81       	ldd	r17, Y+3	; 0x03
    7ad6:	aa 81       	ldd	r26, Y+2	; 0x02
    7ad8:	b9 81       	ldd	r27, Y+1	; 0x01
    7ada:	ce 0f       	add	r28, r30
    7adc:	d1 1d       	adc	r29, r1
    7ade:	0f b6       	in	r0, 0x3f	; 63
    7ae0:	f8 94       	cli
    7ae2:	de bf       	out	0x3e, r29	; 62
    7ae4:	0f be       	out	0x3f, r0	; 63
    7ae6:	cd bf       	out	0x3d, r28	; 61
    7ae8:	ed 01       	movw	r28, r26
    7aea:	08 95       	ret

00007aec <strtod>:
    7aec:	8f 92       	push	r8
    7aee:	9f 92       	push	r9
    7af0:	af 92       	push	r10
    7af2:	bf 92       	push	r11
    7af4:	cf 92       	push	r12
    7af6:	df 92       	push	r13
    7af8:	ef 92       	push	r14
    7afa:	ff 92       	push	r15
    7afc:	0f 93       	push	r16
    7afe:	1f 93       	push	r17
    7b00:	cf 93       	push	r28
    7b02:	df 93       	push	r29
    7b04:	ec 01       	movw	r28, r24
    7b06:	5b 01       	movw	r10, r22
    7b08:	61 15       	cp	r22, r1
    7b0a:	71 05       	cpc	r23, r1
    7b0c:	19 f0       	breq	.+6      	; 0x7b14 <strtod+0x28>
    7b0e:	fb 01       	movw	r30, r22
    7b10:	80 83       	st	Z, r24
    7b12:	91 83       	std	Z+1, r25	; 0x01
    7b14:	f9 90       	ld	r15, Y+
    7b16:	8f 2d       	mov	r24, r15
    7b18:	90 e0       	ldi	r25, 0x00	; 0
    7b1a:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <isspace>
    7b1e:	89 2b       	or	r24, r25
    7b20:	c9 f7       	brne	.-14     	; 0x7b14 <strtod+0x28>
    7b22:	fd e2       	ldi	r31, 0x2D	; 45
    7b24:	ff 16       	cp	r15, r31
    7b26:	21 f4       	brne	.+8      	; 0x7b30 <strtod+0x44>
    7b28:	f9 90       	ld	r15, Y+
    7b2a:	ee 24       	eor	r14, r14
    7b2c:	e3 94       	inc	r14
    7b2e:	05 c0       	rjmp	.+10     	; 0x7b3a <strtod+0x4e>
    7b30:	2b e2       	ldi	r18, 0x2B	; 43
    7b32:	f2 16       	cp	r15, r18
    7b34:	09 f4       	brne	.+2      	; 0x7b38 <strtod+0x4c>
    7b36:	f9 90       	ld	r15, Y+
    7b38:	ee 24       	eor	r14, r14
    7b3a:	8e 01       	movw	r16, r28
    7b3c:	01 50       	subi	r16, 0x01	; 1
    7b3e:	10 40       	sbci	r17, 0x00	; 0
    7b40:	c8 01       	movw	r24, r16
    7b42:	63 ec       	ldi	r22, 0xC3	; 195
    7b44:	7a e0       	ldi	r23, 0x0A	; 10
    7b46:	43 e0       	ldi	r20, 0x03	; 3
    7b48:	50 e0       	ldi	r21, 0x00	; 0
    7b4a:	0e 94 f3 3f 	call	0x7fe6	; 0x7fe6 <strncasecmp_P>
    7b4e:	89 2b       	or	r24, r25
    7b50:	01 f5       	brne	.+64     	; 0x7b92 <strtod+0xa6>
    7b52:	8e 01       	movw	r16, r28
    7b54:	0e 5f       	subi	r16, 0xFE	; 254
    7b56:	1f 4f       	sbci	r17, 0xFF	; 255
    7b58:	c8 01       	movw	r24, r16
    7b5a:	66 ec       	ldi	r22, 0xC6	; 198
    7b5c:	7a e0       	ldi	r23, 0x0A	; 10
    7b5e:	45 e0       	ldi	r20, 0x05	; 5
    7b60:	50 e0       	ldi	r21, 0x00	; 0
    7b62:	0e 94 f3 3f 	call	0x7fe6	; 0x7fe6 <strncasecmp_P>
    7b66:	89 2b       	or	r24, r25
    7b68:	19 f4       	brne	.+6      	; 0x7b70 <strtod+0x84>
    7b6a:	8e 01       	movw	r16, r28
    7b6c:	09 5f       	subi	r16, 0xF9	; 249
    7b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    7b70:	a1 14       	cp	r10, r1
    7b72:	b1 04       	cpc	r11, r1
    7b74:	19 f0       	breq	.+6      	; 0x7b7c <strtod+0x90>
    7b76:	f5 01       	movw	r30, r10
    7b78:	00 83       	st	Z, r16
    7b7a:	11 83       	std	Z+1, r17	; 0x01
    7b7c:	e0 fc       	sbrc	r14, 0
    7b7e:	04 c0       	rjmp	.+8      	; 0x7b88 <strtod+0x9c>
    7b80:	70 e0       	ldi	r23, 0x00	; 0
    7b82:	90 e0       	ldi	r25, 0x00	; 0
    7b84:	80 e8       	ldi	r24, 0x80	; 128
    7b86:	14 c0       	rjmp	.+40     	; 0x7bb0 <strtod+0xc4>
    7b88:	70 e0       	ldi	r23, 0x00	; 0
    7b8a:	90 e0       	ldi	r25, 0x00	; 0
    7b8c:	80 e8       	ldi	r24, 0x80	; 128
    7b8e:	6f ef       	ldi	r22, 0xFF	; 255
    7b90:	08 c1       	rjmp	.+528    	; 0x7da2 <strtod+0x2b6>
    7b92:	c8 01       	movw	r24, r16
    7b94:	6b ec       	ldi	r22, 0xCB	; 203
    7b96:	7a e0       	ldi	r23, 0x0A	; 10
    7b98:	43 e0       	ldi	r20, 0x03	; 3
    7b9a:	50 e0       	ldi	r21, 0x00	; 0
    7b9c:	0e 94 f3 3f 	call	0x7fe6	; 0x7fe6 <strncasecmp_P>
    7ba0:	89 2b       	or	r24, r25
    7ba2:	69 f4       	brne	.+26     	; 0x7bbe <strtod+0xd2>
    7ba4:	a1 14       	cp	r10, r1
    7ba6:	b1 04       	cpc	r11, r1
    7ba8:	29 f4       	brne	.+10     	; 0x7bb4 <strtod+0xc8>
    7baa:	70 e0       	ldi	r23, 0x00	; 0
    7bac:	90 e0       	ldi	r25, 0x00	; 0
    7bae:	80 ec       	ldi	r24, 0xC0	; 192
    7bb0:	6f e7       	ldi	r22, 0x7F	; 127
    7bb2:	f7 c0       	rjmp	.+494    	; 0x7da2 <strtod+0x2b6>
    7bb4:	22 96       	adiw	r28, 0x02	; 2
    7bb6:	f5 01       	movw	r30, r10
    7bb8:	c0 83       	st	Z, r28
    7bba:	d1 83       	std	Z+1, r29	; 0x01
    7bbc:	f6 cf       	rjmp	.-20     	; 0x7baa <strtod+0xbe>
    7bbe:	88 24       	eor	r8, r8
    7bc0:	99 24       	eor	r9, r9
    7bc2:	40 e0       	ldi	r20, 0x00	; 0
    7bc4:	50 e0       	ldi	r21, 0x00	; 0
    7bc6:	60 e0       	ldi	r22, 0x00	; 0
    7bc8:	70 e0       	ldi	r23, 0x00	; 0
    7bca:	ef 2d       	mov	r30, r15
    7bcc:	e0 53       	subi	r30, 0x30	; 48
    7bce:	ea 30       	cpi	r30, 0x0A	; 10
    7bd0:	a0 f5       	brcc	.+104    	; 0x7c3a <strtod+0x14e>
    7bd2:	f2 e0       	ldi	r31, 0x02	; 2
    7bd4:	ef 2a       	or	r14, r31
    7bd6:	8e 2d       	mov	r24, r14
    7bd8:	90 e0       	ldi	r25, 0x00	; 0
    7bda:	9c 01       	movw	r18, r24
    7bdc:	28 70       	andi	r18, 0x08	; 8
    7bde:	30 70       	andi	r19, 0x00	; 0
    7be0:	e2 fe       	sbrs	r14, 2
    7be2:	06 c0       	rjmp	.+12     	; 0x7bf0 <strtod+0x104>
    7be4:	23 2b       	or	r18, r19
    7be6:	79 f5       	brne	.+94     	; 0x7c46 <strtod+0x15a>
    7be8:	08 94       	sec
    7bea:	81 1c       	adc	r8, r1
    7bec:	91 1c       	adc	r9, r1
    7bee:	2b c0       	rjmp	.+86     	; 0x7c46 <strtod+0x15a>
    7bf0:	23 2b       	or	r18, r19
    7bf2:	19 f0       	breq	.+6      	; 0x7bfa <strtod+0x10e>
    7bf4:	08 94       	sec
    7bf6:	81 08       	sbc	r8, r1
    7bf8:	91 08       	sbc	r9, r1
    7bfa:	db 01       	movw	r26, r22
    7bfc:	ca 01       	movw	r24, r20
    7bfe:	12 e0       	ldi	r17, 0x02	; 2
    7c00:	88 0f       	add	r24, r24
    7c02:	99 1f       	adc	r25, r25
    7c04:	aa 1f       	adc	r26, r26
    7c06:	bb 1f       	adc	r27, r27
    7c08:	1a 95       	dec	r17
    7c0a:	d1 f7       	brne	.-12     	; 0x7c00 <strtod+0x114>
    7c0c:	48 0f       	add	r20, r24
    7c0e:	59 1f       	adc	r21, r25
    7c10:	6a 1f       	adc	r22, r26
    7c12:	7b 1f       	adc	r23, r27
    7c14:	44 0f       	add	r20, r20
    7c16:	55 1f       	adc	r21, r21
    7c18:	66 1f       	adc	r22, r22
    7c1a:	77 1f       	adc	r23, r23
    7c1c:	4e 0f       	add	r20, r30
    7c1e:	51 1d       	adc	r21, r1
    7c20:	61 1d       	adc	r22, r1
    7c22:	71 1d       	adc	r23, r1
    7c24:	48 39       	cpi	r20, 0x98	; 152
    7c26:	29 e9       	ldi	r18, 0x99	; 153
    7c28:	52 07       	cpc	r21, r18
    7c2a:	29 e9       	ldi	r18, 0x99	; 153
    7c2c:	62 07       	cpc	r22, r18
    7c2e:	29 e1       	ldi	r18, 0x19	; 25
    7c30:	72 07       	cpc	r23, r18
    7c32:	48 f0       	brcs	.+18     	; 0x7c46 <strtod+0x15a>
    7c34:	84 e0       	ldi	r24, 0x04	; 4
    7c36:	e8 2a       	or	r14, r24
    7c38:	06 c0       	rjmp	.+12     	; 0x7c46 <strtod+0x15a>
    7c3a:	ee 3f       	cpi	r30, 0xFE	; 254
    7c3c:	31 f4       	brne	.+12     	; 0x7c4a <strtod+0x15e>
    7c3e:	e3 fc       	sbrc	r14, 3
    7c40:	39 c0       	rjmp	.+114    	; 0x7cb4 <strtod+0x1c8>
    7c42:	98 e0       	ldi	r25, 0x08	; 8
    7c44:	e9 2a       	or	r14, r25
    7c46:	f9 90       	ld	r15, Y+
    7c48:	c0 cf       	rjmp	.-128    	; 0x7bca <strtod+0xde>
    7c4a:	e5 33       	cpi	r30, 0x35	; 53
    7c4c:	11 f0       	breq	.+4      	; 0x7c52 <strtod+0x166>
    7c4e:	e5 31       	cpi	r30, 0x15	; 21
    7c50:	89 f5       	brne	.+98     	; 0x7cb4 <strtod+0x1c8>
    7c52:	29 91       	ld	r18, Y+
    7c54:	2d 32       	cpi	r18, 0x2D	; 45
    7c56:	19 f4       	brne	.+6      	; 0x7c5e <strtod+0x172>
    7c58:	e0 e1       	ldi	r30, 0x10	; 16
    7c5a:	ee 2a       	or	r14, r30
    7c5c:	05 c0       	rjmp	.+10     	; 0x7c68 <strtod+0x17c>
    7c5e:	2b 32       	cpi	r18, 0x2B	; 43
    7c60:	19 f0       	breq	.+6      	; 0x7c68 <strtod+0x17c>
    7c62:	81 e0       	ldi	r24, 0x01	; 1
    7c64:	90 e0       	ldi	r25, 0x00	; 0
    7c66:	03 c0       	rjmp	.+6      	; 0x7c6e <strtod+0x182>
    7c68:	29 91       	ld	r18, Y+
    7c6a:	82 e0       	ldi	r24, 0x02	; 2
    7c6c:	90 e0       	ldi	r25, 0x00	; 0
    7c6e:	e2 2f       	mov	r30, r18
    7c70:	e0 53       	subi	r30, 0x30	; 48
    7c72:	ea 30       	cpi	r30, 0x0A	; 10
    7c74:	18 f0       	brcs	.+6      	; 0x7c7c <strtod+0x190>
    7c76:	c8 1b       	sub	r28, r24
    7c78:	d9 0b       	sbc	r29, r25
    7c7a:	1c c0       	rjmp	.+56     	; 0x7cb4 <strtod+0x1c8>
    7c7c:	20 e0       	ldi	r18, 0x00	; 0
    7c7e:	30 e0       	ldi	r19, 0x00	; 0
    7c80:	fc e0       	ldi	r31, 0x0C	; 12
    7c82:	20 38       	cpi	r18, 0x80	; 128
    7c84:	3f 07       	cpc	r19, r31
    7c86:	5c f4       	brge	.+22     	; 0x7c9e <strtod+0x1b2>
    7c88:	c9 01       	movw	r24, r18
    7c8a:	88 0f       	add	r24, r24
    7c8c:	99 1f       	adc	r25, r25
    7c8e:	88 0f       	add	r24, r24
    7c90:	99 1f       	adc	r25, r25
    7c92:	28 0f       	add	r18, r24
    7c94:	39 1f       	adc	r19, r25
    7c96:	22 0f       	add	r18, r18
    7c98:	33 1f       	adc	r19, r19
    7c9a:	2e 0f       	add	r18, r30
    7c9c:	31 1d       	adc	r19, r1
    7c9e:	e9 91       	ld	r30, Y+
    7ca0:	e0 53       	subi	r30, 0x30	; 48
    7ca2:	ea 30       	cpi	r30, 0x0A	; 10
    7ca4:	68 f3       	brcs	.-38     	; 0x7c80 <strtod+0x194>
    7ca6:	e4 fe       	sbrs	r14, 4
    7ca8:	03 c0       	rjmp	.+6      	; 0x7cb0 <strtod+0x1c4>
    7caa:	30 95       	com	r19
    7cac:	21 95       	neg	r18
    7cae:	3f 4f       	sbci	r19, 0xFF	; 255
    7cb0:	82 0e       	add	r8, r18
    7cb2:	93 1e       	adc	r9, r19
    7cb4:	ce 2c       	mov	r12, r14
    7cb6:	dd 24       	eor	r13, r13
    7cb8:	e1 fe       	sbrs	r14, 1
    7cba:	07 c0       	rjmp	.+14     	; 0x7cca <strtod+0x1de>
    7cbc:	a1 14       	cp	r10, r1
    7cbe:	b1 04       	cpc	r11, r1
    7cc0:	21 f0       	breq	.+8      	; 0x7cca <strtod+0x1de>
    7cc2:	21 97       	sbiw	r28, 0x01	; 1
    7cc4:	f5 01       	movw	r30, r10
    7cc6:	c0 83       	st	Z, r28
    7cc8:	d1 83       	std	Z+1, r29	; 0x01
    7cca:	cb 01       	movw	r24, r22
    7ccc:	ba 01       	movw	r22, r20
    7cce:	0e 94 0b 3a 	call	0x7416	; 0x7416 <__floatunsisf>
    7cd2:	7b 01       	movw	r14, r22
    7cd4:	8c 01       	movw	r16, r24
    7cd6:	f3 e0       	ldi	r31, 0x03	; 3
    7cd8:	cf 22       	and	r12, r31
    7cda:	dd 24       	eor	r13, r13
    7cdc:	23 e0       	ldi	r18, 0x03	; 3
    7cde:	c2 16       	cp	r12, r18
    7ce0:	d1 04       	cpc	r13, r1
    7ce2:	21 f4       	brne	.+8      	; 0x7cec <strtod+0x200>
    7ce4:	17 fb       	bst	r17, 7
    7ce6:	10 95       	com	r17
    7ce8:	17 f9       	bld	r17, 7
    7cea:	10 95       	com	r17
    7cec:	57 01       	movw	r10, r14
    7cee:	68 01       	movw	r12, r16
    7cf0:	c8 01       	movw	r24, r16
    7cf2:	b7 01       	movw	r22, r14
    7cf4:	20 e0       	ldi	r18, 0x00	; 0
    7cf6:	30 e0       	ldi	r19, 0x00	; 0
    7cf8:	40 e0       	ldi	r20, 0x00	; 0
    7cfa:	50 e0       	ldi	r21, 0x00	; 0
    7cfc:	0e 94 6b 39 	call	0x72d6	; 0x72d6 <__cmpsf2>
    7d00:	88 23       	and	r24, r24
    7d02:	09 f4       	brne	.+2      	; 0x7d06 <strtod+0x21a>
    7d04:	4a c0       	rjmp	.+148    	; 0x7d9a <strtod+0x2ae>
    7d06:	97 fe       	sbrs	r9, 7
    7d08:	0d c0       	rjmp	.+26     	; 0x7d24 <strtod+0x238>
    7d0a:	22 ee       	ldi	r18, 0xE2	; 226
    7d0c:	e2 2e       	mov	r14, r18
    7d0e:	2a e0       	ldi	r18, 0x0A	; 10
    7d10:	f2 2e       	mov	r15, r18
    7d12:	90 94       	com	r9
    7d14:	81 94       	neg	r8
    7d16:	91 08       	sbc	r9, r1
    7d18:	93 94       	inc	r9
    7d1a:	c0 e2       	ldi	r28, 0x20	; 32
    7d1c:	d0 e0       	ldi	r29, 0x00	; 0
    7d1e:	00 e0       	ldi	r16, 0x00	; 0
    7d20:	10 e0       	ldi	r17, 0x00	; 0
    7d22:	12 c0       	rjmp	.+36     	; 0x7d48 <strtod+0x25c>
    7d24:	9a ef       	ldi	r25, 0xFA	; 250
    7d26:	e9 2e       	mov	r14, r25
    7d28:	9a e0       	ldi	r25, 0x0A	; 10
    7d2a:	f9 2e       	mov	r15, r25
    7d2c:	f6 cf       	rjmp	.-20     	; 0x7d1a <strtod+0x22e>
    7d2e:	f7 01       	movw	r30, r14
    7d30:	25 91       	lpm	r18, Z+
    7d32:	35 91       	lpm	r19, Z+
    7d34:	45 91       	lpm	r20, Z+
    7d36:	54 91       	lpm	r21, Z+
    7d38:	c6 01       	movw	r24, r12
    7d3a:	b5 01       	movw	r22, r10
    7d3c:	0e 94 2d 3c 	call	0x785a	; 0x785a <__mulsf3>
    7d40:	5b 01       	movw	r10, r22
    7d42:	6c 01       	movw	r12, r24
    7d44:	8c 1a       	sub	r8, r28
    7d46:	9d 0a       	sbc	r9, r29
    7d48:	8c 16       	cp	r8, r28
    7d4a:	9d 06       	cpc	r9, r29
    7d4c:	84 f7       	brge	.-32     	; 0x7d2e <strtod+0x242>
    7d4e:	d5 95       	asr	r29
    7d50:	c7 95       	ror	r28
    7d52:	0f 5f       	subi	r16, 0xFF	; 255
    7d54:	1f 4f       	sbci	r17, 0xFF	; 255
    7d56:	06 30       	cpi	r16, 0x06	; 6
    7d58:	11 05       	cpc	r17, r1
    7d5a:	29 f0       	breq	.+10     	; 0x7d66 <strtod+0x27a>
    7d5c:	8c ef       	ldi	r24, 0xFC	; 252
    7d5e:	9f ef       	ldi	r25, 0xFF	; 255
    7d60:	e8 0e       	add	r14, r24
    7d62:	f9 1e       	adc	r15, r25
    7d64:	f1 cf       	rjmp	.-30     	; 0x7d48 <strtod+0x25c>
    7d66:	c5 01       	movw	r24, r10
    7d68:	d6 01       	movw	r26, r12
    7d6a:	7c 01       	movw	r14, r24
    7d6c:	8d 01       	movw	r16, r26
    7d6e:	8c 2d       	mov	r24, r12
    7d70:	88 0f       	add	r24, r24
    7d72:	8d 2d       	mov	r24, r13
    7d74:	88 1f       	adc	r24, r24
    7d76:	8f 3f       	cpi	r24, 0xFF	; 255
    7d78:	51 f0       	breq	.+20     	; 0x7d8e <strtod+0x2a2>
    7d7a:	c6 01       	movw	r24, r12
    7d7c:	b5 01       	movw	r22, r10
    7d7e:	20 e0       	ldi	r18, 0x00	; 0
    7d80:	30 e0       	ldi	r19, 0x00	; 0
    7d82:	40 e0       	ldi	r20, 0x00	; 0
    7d84:	50 e0       	ldi	r21, 0x00	; 0
    7d86:	0e 94 6b 39 	call	0x72d6	; 0x72d6 <__cmpsf2>
    7d8a:	88 23       	and	r24, r24
    7d8c:	31 f4       	brne	.+12     	; 0x7d9a <strtod+0x2ae>
    7d8e:	82 e2       	ldi	r24, 0x22	; 34
    7d90:	90 e0       	ldi	r25, 0x00	; 0
    7d92:	80 93 77 26 	sts	0x2677, r24
    7d96:	90 93 78 26 	sts	0x2678, r25
    7d9a:	7e 2d       	mov	r23, r14
    7d9c:	9f 2d       	mov	r25, r15
    7d9e:	80 2f       	mov	r24, r16
    7da0:	61 2f       	mov	r22, r17
    7da2:	27 2f       	mov	r18, r23
    7da4:	39 2f       	mov	r19, r25
    7da6:	48 2f       	mov	r20, r24
    7da8:	56 2f       	mov	r21, r22
    7daa:	b9 01       	movw	r22, r18
    7dac:	ca 01       	movw	r24, r20
    7dae:	df 91       	pop	r29
    7db0:	cf 91       	pop	r28
    7db2:	1f 91       	pop	r17
    7db4:	0f 91       	pop	r16
    7db6:	ff 90       	pop	r15
    7db8:	ef 90       	pop	r14
    7dba:	df 90       	pop	r13
    7dbc:	cf 90       	pop	r12
    7dbe:	bf 90       	pop	r11
    7dc0:	af 90       	pop	r10
    7dc2:	9f 90       	pop	r9
    7dc4:	8f 90       	pop	r8
    7dc6:	08 95       	ret

00007dc8 <atoi>:
    7dc8:	fc 01       	movw	r30, r24
    7dca:	88 27       	eor	r24, r24
    7dcc:	99 27       	eor	r25, r25
    7dce:	e8 94       	clt
    7dd0:	21 91       	ld	r18, Z+
    7dd2:	20 32       	cpi	r18, 0x20	; 32
    7dd4:	e9 f3       	breq	.-6      	; 0x7dd0 <atoi+0x8>
    7dd6:	29 30       	cpi	r18, 0x09	; 9
    7dd8:	10 f0       	brcs	.+4      	; 0x7dde <atoi+0x16>
    7dda:	2e 30       	cpi	r18, 0x0E	; 14
    7ddc:	c8 f3       	brcs	.-14     	; 0x7dd0 <atoi+0x8>
    7dde:	2b 32       	cpi	r18, 0x2B	; 43
    7de0:	41 f0       	breq	.+16     	; 0x7df2 <atoi+0x2a>
    7de2:	2d 32       	cpi	r18, 0x2D	; 45
    7de4:	39 f4       	brne	.+14     	; 0x7df4 <atoi+0x2c>
    7de6:	68 94       	set
    7de8:	04 c0       	rjmp	.+8      	; 0x7df2 <atoi+0x2a>
    7dea:	0e 94 2c 40 	call	0x8058	; 0x8058 <__mulhi_const_10>
    7dee:	82 0f       	add	r24, r18
    7df0:	91 1d       	adc	r25, r1
    7df2:	21 91       	ld	r18, Z+
    7df4:	20 53       	subi	r18, 0x30	; 48
    7df6:	2a 30       	cpi	r18, 0x0A	; 10
    7df8:	c0 f3       	brcs	.-16     	; 0x7dea <atoi+0x22>
    7dfa:	1e f4       	brtc	.+6      	; 0x7e02 <atoi+0x3a>
    7dfc:	90 95       	com	r25
    7dfe:	81 95       	neg	r24
    7e00:	9f 4f       	sbci	r25, 0xFF	; 255
    7e02:	08 95       	ret

00007e04 <__ftoa_engine>:
    7e04:	28 30       	cpi	r18, 0x08	; 8
    7e06:	08 f0       	brcs	.+2      	; 0x7e0a <__ftoa_engine+0x6>
    7e08:	27 e0       	ldi	r18, 0x07	; 7
    7e0a:	33 27       	eor	r19, r19
    7e0c:	da 01       	movw	r26, r20
    7e0e:	99 0f       	add	r25, r25
    7e10:	31 1d       	adc	r19, r1
    7e12:	87 fd       	sbrc	r24, 7
    7e14:	91 60       	ori	r25, 0x01	; 1
    7e16:	00 96       	adiw	r24, 0x00	; 0
    7e18:	61 05       	cpc	r22, r1
    7e1a:	71 05       	cpc	r23, r1
    7e1c:	39 f4       	brne	.+14     	; 0x7e2c <__ftoa_engine+0x28>
    7e1e:	32 60       	ori	r19, 0x02	; 2
    7e20:	2e 5f       	subi	r18, 0xFE	; 254
    7e22:	3d 93       	st	X+, r19
    7e24:	30 e3       	ldi	r19, 0x30	; 48
    7e26:	2a 95       	dec	r18
    7e28:	e1 f7       	brne	.-8      	; 0x7e22 <__ftoa_engine+0x1e>
    7e2a:	08 95       	ret
    7e2c:	9f 3f       	cpi	r25, 0xFF	; 255
    7e2e:	30 f0       	brcs	.+12     	; 0x7e3c <__ftoa_engine+0x38>
    7e30:	80 38       	cpi	r24, 0x80	; 128
    7e32:	71 05       	cpc	r23, r1
    7e34:	61 05       	cpc	r22, r1
    7e36:	09 f0       	breq	.+2      	; 0x7e3a <__ftoa_engine+0x36>
    7e38:	3c 5f       	subi	r19, 0xFC	; 252
    7e3a:	3c 5f       	subi	r19, 0xFC	; 252
    7e3c:	3d 93       	st	X+, r19
    7e3e:	91 30       	cpi	r25, 0x01	; 1
    7e40:	08 f0       	brcs	.+2      	; 0x7e44 <__ftoa_engine+0x40>
    7e42:	80 68       	ori	r24, 0x80	; 128
    7e44:	91 1d       	adc	r25, r1
    7e46:	df 93       	push	r29
    7e48:	cf 93       	push	r28
    7e4a:	1f 93       	push	r17
    7e4c:	0f 93       	push	r16
    7e4e:	ff 92       	push	r15
    7e50:	ef 92       	push	r14
    7e52:	19 2f       	mov	r17, r25
    7e54:	98 7f       	andi	r25, 0xF8	; 248
    7e56:	96 95       	lsr	r25
    7e58:	e9 2f       	mov	r30, r25
    7e5a:	96 95       	lsr	r25
    7e5c:	96 95       	lsr	r25
    7e5e:	e9 0f       	add	r30, r25
    7e60:	ff 27       	eor	r31, r31
    7e62:	e8 5a       	subi	r30, 0xA8	; 168
    7e64:	f4 4f       	sbci	r31, 0xF4	; 244
    7e66:	99 27       	eor	r25, r25
    7e68:	33 27       	eor	r19, r19
    7e6a:	ee 24       	eor	r14, r14
    7e6c:	ff 24       	eor	r15, r15
    7e6e:	a7 01       	movw	r20, r14
    7e70:	e7 01       	movw	r28, r14
    7e72:	05 90       	lpm	r0, Z+
    7e74:	08 94       	sec
    7e76:	07 94       	ror	r0
    7e78:	28 f4       	brcc	.+10     	; 0x7e84 <__ftoa_engine+0x80>
    7e7a:	36 0f       	add	r19, r22
    7e7c:	e7 1e       	adc	r14, r23
    7e7e:	f8 1e       	adc	r15, r24
    7e80:	49 1f       	adc	r20, r25
    7e82:	51 1d       	adc	r21, r1
    7e84:	66 0f       	add	r22, r22
    7e86:	77 1f       	adc	r23, r23
    7e88:	88 1f       	adc	r24, r24
    7e8a:	99 1f       	adc	r25, r25
    7e8c:	06 94       	lsr	r0
    7e8e:	a1 f7       	brne	.-24     	; 0x7e78 <__ftoa_engine+0x74>
    7e90:	05 90       	lpm	r0, Z+
    7e92:	07 94       	ror	r0
    7e94:	28 f4       	brcc	.+10     	; 0x7ea0 <__ftoa_engine+0x9c>
    7e96:	e7 0e       	add	r14, r23
    7e98:	f8 1e       	adc	r15, r24
    7e9a:	49 1f       	adc	r20, r25
    7e9c:	56 1f       	adc	r21, r22
    7e9e:	c1 1d       	adc	r28, r1
    7ea0:	77 0f       	add	r23, r23
    7ea2:	88 1f       	adc	r24, r24
    7ea4:	99 1f       	adc	r25, r25
    7ea6:	66 1f       	adc	r22, r22
    7ea8:	06 94       	lsr	r0
    7eaa:	a1 f7       	brne	.-24     	; 0x7e94 <__ftoa_engine+0x90>
    7eac:	05 90       	lpm	r0, Z+
    7eae:	07 94       	ror	r0
    7eb0:	28 f4       	brcc	.+10     	; 0x7ebc <__ftoa_engine+0xb8>
    7eb2:	f8 0e       	add	r15, r24
    7eb4:	49 1f       	adc	r20, r25
    7eb6:	56 1f       	adc	r21, r22
    7eb8:	c7 1f       	adc	r28, r23
    7eba:	d1 1d       	adc	r29, r1
    7ebc:	88 0f       	add	r24, r24
    7ebe:	99 1f       	adc	r25, r25
    7ec0:	66 1f       	adc	r22, r22
    7ec2:	77 1f       	adc	r23, r23
    7ec4:	06 94       	lsr	r0
    7ec6:	a1 f7       	brne	.-24     	; 0x7eb0 <__ftoa_engine+0xac>
    7ec8:	05 90       	lpm	r0, Z+
    7eca:	07 94       	ror	r0
    7ecc:	20 f4       	brcc	.+8      	; 0x7ed6 <__ftoa_engine+0xd2>
    7ece:	49 0f       	add	r20, r25
    7ed0:	56 1f       	adc	r21, r22
    7ed2:	c7 1f       	adc	r28, r23
    7ed4:	d8 1f       	adc	r29, r24
    7ed6:	99 0f       	add	r25, r25
    7ed8:	66 1f       	adc	r22, r22
    7eda:	77 1f       	adc	r23, r23
    7edc:	88 1f       	adc	r24, r24
    7ede:	06 94       	lsr	r0
    7ee0:	a9 f7       	brne	.-22     	; 0x7ecc <__ftoa_engine+0xc8>
    7ee2:	84 91       	lpm	r24, Z+
    7ee4:	10 95       	com	r17
    7ee6:	17 70       	andi	r17, 0x07	; 7
    7ee8:	41 f0       	breq	.+16     	; 0x7efa <__ftoa_engine+0xf6>
    7eea:	d6 95       	lsr	r29
    7eec:	c7 95       	ror	r28
    7eee:	57 95       	ror	r21
    7ef0:	47 95       	ror	r20
    7ef2:	f7 94       	ror	r15
    7ef4:	e7 94       	ror	r14
    7ef6:	1a 95       	dec	r17
    7ef8:	c1 f7       	brne	.-16     	; 0x7eea <__ftoa_engine+0xe6>
    7efa:	ee ef       	ldi	r30, 0xFE	; 254
    7efc:	fa e0       	ldi	r31, 0x0A	; 10
    7efe:	68 94       	set
    7f00:	15 90       	lpm	r1, Z+
    7f02:	15 91       	lpm	r17, Z+
    7f04:	35 91       	lpm	r19, Z+
    7f06:	65 91       	lpm	r22, Z+
    7f08:	95 91       	lpm	r25, Z+
    7f0a:	05 90       	lpm	r0, Z+
    7f0c:	7f e2       	ldi	r23, 0x2F	; 47
    7f0e:	73 95       	inc	r23
    7f10:	e1 18       	sub	r14, r1
    7f12:	f1 0a       	sbc	r15, r17
    7f14:	43 0b       	sbc	r20, r19
    7f16:	56 0b       	sbc	r21, r22
    7f18:	c9 0b       	sbc	r28, r25
    7f1a:	d0 09       	sbc	r29, r0
    7f1c:	c0 f7       	brcc	.-16     	; 0x7f0e <__ftoa_engine+0x10a>
    7f1e:	e1 0c       	add	r14, r1
    7f20:	f1 1e       	adc	r15, r17
    7f22:	43 1f       	adc	r20, r19
    7f24:	56 1f       	adc	r21, r22
    7f26:	c9 1f       	adc	r28, r25
    7f28:	d0 1d       	adc	r29, r0
    7f2a:	7e f4       	brtc	.+30     	; 0x7f4a <__ftoa_engine+0x146>
    7f2c:	70 33       	cpi	r23, 0x30	; 48
    7f2e:	11 f4       	brne	.+4      	; 0x7f34 <__ftoa_engine+0x130>
    7f30:	8a 95       	dec	r24
    7f32:	e6 cf       	rjmp	.-52     	; 0x7f00 <__ftoa_engine+0xfc>
    7f34:	e8 94       	clt
    7f36:	01 50       	subi	r16, 0x01	; 1
    7f38:	30 f0       	brcs	.+12     	; 0x7f46 <__ftoa_engine+0x142>
    7f3a:	08 0f       	add	r16, r24
    7f3c:	0a f4       	brpl	.+2      	; 0x7f40 <__ftoa_engine+0x13c>
    7f3e:	00 27       	eor	r16, r16
    7f40:	02 17       	cp	r16, r18
    7f42:	08 f4       	brcc	.+2      	; 0x7f46 <__ftoa_engine+0x142>
    7f44:	20 2f       	mov	r18, r16
    7f46:	23 95       	inc	r18
    7f48:	02 2f       	mov	r16, r18
    7f4a:	7a 33       	cpi	r23, 0x3A	; 58
    7f4c:	28 f0       	brcs	.+10     	; 0x7f58 <__ftoa_engine+0x154>
    7f4e:	79 e3       	ldi	r23, 0x39	; 57
    7f50:	7d 93       	st	X+, r23
    7f52:	2a 95       	dec	r18
    7f54:	e9 f7       	brne	.-6      	; 0x7f50 <__ftoa_engine+0x14c>
    7f56:	10 c0       	rjmp	.+32     	; 0x7f78 <__ftoa_engine+0x174>
    7f58:	7d 93       	st	X+, r23
    7f5a:	2a 95       	dec	r18
    7f5c:	89 f6       	brne	.-94     	; 0x7f00 <__ftoa_engine+0xfc>
    7f5e:	06 94       	lsr	r0
    7f60:	97 95       	ror	r25
    7f62:	67 95       	ror	r22
    7f64:	37 95       	ror	r19
    7f66:	17 95       	ror	r17
    7f68:	17 94       	ror	r1
    7f6a:	e1 18       	sub	r14, r1
    7f6c:	f1 0a       	sbc	r15, r17
    7f6e:	43 0b       	sbc	r20, r19
    7f70:	56 0b       	sbc	r21, r22
    7f72:	c9 0b       	sbc	r28, r25
    7f74:	d0 09       	sbc	r29, r0
    7f76:	98 f0       	brcs	.+38     	; 0x7f9e <__ftoa_engine+0x19a>
    7f78:	23 95       	inc	r18
    7f7a:	7e 91       	ld	r23, -X
    7f7c:	73 95       	inc	r23
    7f7e:	7a 33       	cpi	r23, 0x3A	; 58
    7f80:	08 f0       	brcs	.+2      	; 0x7f84 <__ftoa_engine+0x180>
    7f82:	70 e3       	ldi	r23, 0x30	; 48
    7f84:	7c 93       	st	X, r23
    7f86:	20 13       	cpse	r18, r16
    7f88:	b8 f7       	brcc	.-18     	; 0x7f78 <__ftoa_engine+0x174>
    7f8a:	7e 91       	ld	r23, -X
    7f8c:	70 61       	ori	r23, 0x10	; 16
    7f8e:	7d 93       	st	X+, r23
    7f90:	30 f0       	brcs	.+12     	; 0x7f9e <__ftoa_engine+0x19a>
    7f92:	83 95       	inc	r24
    7f94:	71 e3       	ldi	r23, 0x31	; 49
    7f96:	7d 93       	st	X+, r23
    7f98:	70 e3       	ldi	r23, 0x30	; 48
    7f9a:	2a 95       	dec	r18
    7f9c:	e1 f7       	brne	.-8      	; 0x7f96 <__ftoa_engine+0x192>
    7f9e:	11 24       	eor	r1, r1
    7fa0:	ef 90       	pop	r14
    7fa2:	ff 90       	pop	r15
    7fa4:	0f 91       	pop	r16
    7fa6:	1f 91       	pop	r17
    7fa8:	cf 91       	pop	r28
    7faa:	df 91       	pop	r29
    7fac:	99 27       	eor	r25, r25
    7fae:	87 fd       	sbrc	r24, 7
    7fb0:	90 95       	com	r25
    7fb2:	08 95       	ret

00007fb4 <isupper>:
    7fb4:	85 fd       	sbrc	r24, 5
    7fb6:	3d c1       	rjmp	.+634    	; 0x8232 <__ctype_isfalse>

00007fb8 <isalpha>:
    7fb8:	80 62       	ori	r24, 0x20	; 32

00007fba <islower>:
    7fba:	91 11       	cpse	r25, r1
    7fbc:	3a c1       	rjmp	.+628    	; 0x8232 <__ctype_isfalse>
    7fbe:	81 56       	subi	r24, 0x61	; 97
    7fc0:	8a 51       	subi	r24, 0x1A	; 26
    7fc2:	e0 f7       	brcc	.-8      	; 0x7fbc <islower+0x2>
    7fc4:	08 95       	ret

00007fc6 <isspace>:
    7fc6:	91 11       	cpse	r25, r1
    7fc8:	34 c1       	rjmp	.+616    	; 0x8232 <__ctype_isfalse>
    7fca:	80 32       	cpi	r24, 0x20	; 32
    7fcc:	19 f0       	breq	.+6      	; 0x7fd4 <isspace+0xe>
    7fce:	89 50       	subi	r24, 0x09	; 9
    7fd0:	85 50       	subi	r24, 0x05	; 5
    7fd2:	d0 f7       	brcc	.-12     	; 0x7fc8 <isspace+0x2>
    7fd4:	08 95       	ret

00007fd6 <toupper>:
    7fd6:	91 11       	cpse	r25, r1
    7fd8:	08 95       	ret
    7fda:	81 56       	subi	r24, 0x61	; 97
    7fdc:	8a 51       	subi	r24, 0x1A	; 26
    7fde:	08 f4       	brcc	.+2      	; 0x7fe2 <toupper+0xc>
    7fe0:	80 52       	subi	r24, 0x20	; 32
    7fe2:	85 58       	subi	r24, 0x85	; 133
    7fe4:	08 95       	ret

00007fe6 <strncasecmp_P>:
    7fe6:	fb 01       	movw	r30, r22
    7fe8:	dc 01       	movw	r26, r24
    7fea:	41 50       	subi	r20, 0x01	; 1
    7fec:	50 40       	sbci	r21, 0x00	; 0
    7fee:	88 f0       	brcs	.+34     	; 0x8012 <strncasecmp_P+0x2c>
    7ff0:	8d 91       	ld	r24, X+
    7ff2:	81 34       	cpi	r24, 0x41	; 65
    7ff4:	1c f0       	brlt	.+6      	; 0x7ffc <strncasecmp_P+0x16>
    7ff6:	8b 35       	cpi	r24, 0x5B	; 91
    7ff8:	0c f4       	brge	.+2      	; 0x7ffc <strncasecmp_P+0x16>
    7ffa:	80 5e       	subi	r24, 0xE0	; 224
    7ffc:	65 91       	lpm	r22, Z+
    7ffe:	61 34       	cpi	r22, 0x41	; 65
    8000:	1c f0       	brlt	.+6      	; 0x8008 <strncasecmp_P+0x22>
    8002:	6b 35       	cpi	r22, 0x5B	; 91
    8004:	0c f4       	brge	.+2      	; 0x8008 <strncasecmp_P+0x22>
    8006:	60 5e       	subi	r22, 0xE0	; 224
    8008:	86 1b       	sub	r24, r22
    800a:	61 11       	cpse	r22, r1
    800c:	71 f3       	breq	.-36     	; 0x7fea <strncasecmp_P+0x4>
    800e:	99 0b       	sbc	r25, r25
    8010:	08 95       	ret
    8012:	88 1b       	sub	r24, r24
    8014:	fc cf       	rjmp	.-8      	; 0x800e <strncasecmp_P+0x28>

00008016 <strnlen_P>:
    8016:	fc 01       	movw	r30, r24
    8018:	05 90       	lpm	r0, Z+
    801a:	61 50       	subi	r22, 0x01	; 1
    801c:	70 40       	sbci	r23, 0x00	; 0
    801e:	01 10       	cpse	r0, r1
    8020:	d8 f7       	brcc	.-10     	; 0x8018 <strnlen_P+0x2>
    8022:	80 95       	com	r24
    8024:	90 95       	com	r25
    8026:	8e 0f       	add	r24, r30
    8028:	9f 1f       	adc	r25, r31
    802a:	08 95       	ret

0000802c <strchr>:
    802c:	fc 01       	movw	r30, r24
    802e:	81 91       	ld	r24, Z+
    8030:	86 17       	cp	r24, r22
    8032:	21 f0       	breq	.+8      	; 0x803c <strchr+0x10>
    8034:	88 23       	and	r24, r24
    8036:	d9 f7       	brne	.-10     	; 0x802e <strchr+0x2>
    8038:	99 27       	eor	r25, r25
    803a:	08 95       	ret
    803c:	31 97       	sbiw	r30, 0x01	; 1
    803e:	cf 01       	movw	r24, r30
    8040:	08 95       	ret

00008042 <strnlen>:
    8042:	fc 01       	movw	r30, r24
    8044:	61 50       	subi	r22, 0x01	; 1
    8046:	70 40       	sbci	r23, 0x00	; 0
    8048:	01 90       	ld	r0, Z+
    804a:	01 10       	cpse	r0, r1
    804c:	d8 f7       	brcc	.-10     	; 0x8044 <strnlen+0x2>
    804e:	80 95       	com	r24
    8050:	90 95       	com	r25
    8052:	8e 0f       	add	r24, r30
    8054:	9f 1f       	adc	r25, r31
    8056:	08 95       	ret

00008058 <__mulhi_const_10>:
    8058:	7a e0       	ldi	r23, 0x0A	; 10
    805a:	97 9f       	mul	r25, r23
    805c:	90 2d       	mov	r25, r0
    805e:	87 9f       	mul	r24, r23
    8060:	80 2d       	mov	r24, r0
    8062:	91 0d       	add	r25, r1
    8064:	11 24       	eor	r1, r1
    8066:	08 95       	ret

00008068 <clearerr>:
    8068:	fc 01       	movw	r30, r24
    806a:	83 81       	ldd	r24, Z+3	; 0x03
    806c:	8f 7c       	andi	r24, 0xCF	; 207
    806e:	83 83       	std	Z+3, r24	; 0x03
    8070:	08 95       	ret

00008072 <fgets>:
    8072:	cf 92       	push	r12
    8074:	df 92       	push	r13
    8076:	ef 92       	push	r14
    8078:	ff 92       	push	r15
    807a:	0f 93       	push	r16
    807c:	1f 93       	push	r17
    807e:	cf 93       	push	r28
    8080:	df 93       	push	r29
    8082:	7c 01       	movw	r14, r24
    8084:	6a 01       	movw	r12, r20
    8086:	fa 01       	movw	r30, r20
    8088:	83 81       	ldd	r24, Z+3	; 0x03
    808a:	80 ff       	sbrs	r24, 0
    808c:	19 c0       	rjmp	.+50     	; 0x80c0 <fgets+0x4e>
    808e:	16 16       	cp	r1, r22
    8090:	17 06       	cpc	r1, r23
    8092:	b4 f4       	brge	.+44     	; 0x80c0 <fgets+0x4e>
    8094:	eb 01       	movw	r28, r22
    8096:	21 97       	sbiw	r28, 0x01	; 1
    8098:	87 01       	movw	r16, r14
    809a:	0d c0       	rjmp	.+26     	; 0x80b6 <fgets+0x44>
    809c:	c6 01       	movw	r24, r12
    809e:	0e 94 1c 41 	call	0x8238	; 0x8238 <fgetc>
    80a2:	ff ef       	ldi	r31, 0xFF	; 255
    80a4:	8f 3f       	cpi	r24, 0xFF	; 255
    80a6:	9f 07       	cpc	r25, r31
    80a8:	59 f0       	breq	.+22     	; 0x80c0 <fgets+0x4e>
    80aa:	f8 01       	movw	r30, r16
    80ac:	81 93       	st	Z+, r24
    80ae:	8f 01       	movw	r16, r30
    80b0:	0a 97       	sbiw	r24, 0x0a	; 10
    80b2:	19 f0       	breq	.+6      	; 0x80ba <fgets+0x48>
    80b4:	21 97       	sbiw	r28, 0x01	; 1
    80b6:	20 97       	sbiw	r28, 0x00	; 0
    80b8:	89 f7       	brne	.-30     	; 0x809c <fgets+0x2a>
    80ba:	f8 01       	movw	r30, r16
    80bc:	10 82       	st	Z, r1
    80be:	02 c0       	rjmp	.+4      	; 0x80c4 <fgets+0x52>
    80c0:	ee 24       	eor	r14, r14
    80c2:	ff 24       	eor	r15, r15
    80c4:	c7 01       	movw	r24, r14
    80c6:	df 91       	pop	r29
    80c8:	cf 91       	pop	r28
    80ca:	1f 91       	pop	r17
    80cc:	0f 91       	pop	r16
    80ce:	ff 90       	pop	r15
    80d0:	ef 90       	pop	r14
    80d2:	df 90       	pop	r13
    80d4:	cf 90       	pop	r12
    80d6:	08 95       	ret

000080d8 <fputc>:
    80d8:	0f 93       	push	r16
    80da:	1f 93       	push	r17
    80dc:	cf 93       	push	r28
    80de:	df 93       	push	r29
    80e0:	8c 01       	movw	r16, r24
    80e2:	eb 01       	movw	r28, r22
    80e4:	8b 81       	ldd	r24, Y+3	; 0x03
    80e6:	81 ff       	sbrs	r24, 1
    80e8:	1b c0       	rjmp	.+54     	; 0x8120 <fputc+0x48>
    80ea:	82 ff       	sbrs	r24, 2
    80ec:	0d c0       	rjmp	.+26     	; 0x8108 <fputc+0x30>
    80ee:	2e 81       	ldd	r18, Y+6	; 0x06
    80f0:	3f 81       	ldd	r19, Y+7	; 0x07
    80f2:	8c 81       	ldd	r24, Y+4	; 0x04
    80f4:	9d 81       	ldd	r25, Y+5	; 0x05
    80f6:	28 17       	cp	r18, r24
    80f8:	39 07       	cpc	r19, r25
    80fa:	64 f4       	brge	.+24     	; 0x8114 <fputc+0x3c>
    80fc:	e8 81       	ld	r30, Y
    80fe:	f9 81       	ldd	r31, Y+1	; 0x01
    8100:	01 93       	st	Z+, r16
    8102:	e8 83       	st	Y, r30
    8104:	f9 83       	std	Y+1, r31	; 0x01
    8106:	06 c0       	rjmp	.+12     	; 0x8114 <fputc+0x3c>
    8108:	e8 85       	ldd	r30, Y+8	; 0x08
    810a:	f9 85       	ldd	r31, Y+9	; 0x09
    810c:	80 2f       	mov	r24, r16
    810e:	19 95       	eicall
    8110:	89 2b       	or	r24, r25
    8112:	31 f4       	brne	.+12     	; 0x8120 <fputc+0x48>
    8114:	8e 81       	ldd	r24, Y+6	; 0x06
    8116:	9f 81       	ldd	r25, Y+7	; 0x07
    8118:	01 96       	adiw	r24, 0x01	; 1
    811a:	8e 83       	std	Y+6, r24	; 0x06
    811c:	9f 83       	std	Y+7, r25	; 0x07
    811e:	02 c0       	rjmp	.+4      	; 0x8124 <fputc+0x4c>
    8120:	0f ef       	ldi	r16, 0xFF	; 255
    8122:	1f ef       	ldi	r17, 0xFF	; 255
    8124:	c8 01       	movw	r24, r16
    8126:	df 91       	pop	r29
    8128:	cf 91       	pop	r28
    812a:	1f 91       	pop	r17
    812c:	0f 91       	pop	r16
    812e:	08 95       	ret

00008130 <printf_P>:
    8130:	df 93       	push	r29
    8132:	cf 93       	push	r28
    8134:	cd b7       	in	r28, 0x3d	; 61
    8136:	de b7       	in	r29, 0x3e	; 62
    8138:	fe 01       	movw	r30, r28
    813a:	36 96       	adiw	r30, 0x06	; 6
    813c:	61 91       	ld	r22, Z+
    813e:	71 91       	ld	r23, Z+
    8140:	a0 91 73 26 	lds	r26, 0x2673
    8144:	b0 91 74 26 	lds	r27, 0x2674
    8148:	13 96       	adiw	r26, 0x03	; 3
    814a:	8c 91       	ld	r24, X
    814c:	13 97       	sbiw	r26, 0x03	; 3
    814e:	88 60       	ori	r24, 0x08	; 8
    8150:	13 96       	adiw	r26, 0x03	; 3
    8152:	8c 93       	st	X, r24
    8154:	80 91 73 26 	lds	r24, 0x2673
    8158:	90 91 74 26 	lds	r25, 0x2674
    815c:	af 01       	movw	r20, r30
    815e:	0e 94 21 35 	call	0x6a42	; 0x6a42 <vfprintf>
    8162:	e0 91 73 26 	lds	r30, 0x2673
    8166:	f0 91 74 26 	lds	r31, 0x2674
    816a:	23 81       	ldd	r18, Z+3	; 0x03
    816c:	27 7f       	andi	r18, 0xF7	; 247
    816e:	23 83       	std	Z+3, r18	; 0x03
    8170:	cf 91       	pop	r28
    8172:	df 91       	pop	r29
    8174:	08 95       	ret

00008176 <__ultoa_invert>:
    8176:	fa 01       	movw	r30, r20
    8178:	aa 27       	eor	r26, r26
    817a:	28 30       	cpi	r18, 0x08	; 8
    817c:	51 f1       	breq	.+84     	; 0x81d2 <__ultoa_invert+0x5c>
    817e:	20 31       	cpi	r18, 0x10	; 16
    8180:	81 f1       	breq	.+96     	; 0x81e2 <__ultoa_invert+0x6c>
    8182:	e8 94       	clt
    8184:	6f 93       	push	r22
    8186:	6e 7f       	andi	r22, 0xFE	; 254
    8188:	6e 5f       	subi	r22, 0xFE	; 254
    818a:	7f 4f       	sbci	r23, 0xFF	; 255
    818c:	8f 4f       	sbci	r24, 0xFF	; 255
    818e:	9f 4f       	sbci	r25, 0xFF	; 255
    8190:	af 4f       	sbci	r26, 0xFF	; 255
    8192:	b1 e0       	ldi	r27, 0x01	; 1
    8194:	3e d0       	rcall	.+124    	; 0x8212 <__ultoa_invert+0x9c>
    8196:	b4 e0       	ldi	r27, 0x04	; 4
    8198:	3c d0       	rcall	.+120    	; 0x8212 <__ultoa_invert+0x9c>
    819a:	67 0f       	add	r22, r23
    819c:	78 1f       	adc	r23, r24
    819e:	89 1f       	adc	r24, r25
    81a0:	9a 1f       	adc	r25, r26
    81a2:	a1 1d       	adc	r26, r1
    81a4:	68 0f       	add	r22, r24
    81a6:	79 1f       	adc	r23, r25
    81a8:	8a 1f       	adc	r24, r26
    81aa:	91 1d       	adc	r25, r1
    81ac:	a1 1d       	adc	r26, r1
    81ae:	6a 0f       	add	r22, r26
    81b0:	71 1d       	adc	r23, r1
    81b2:	81 1d       	adc	r24, r1
    81b4:	91 1d       	adc	r25, r1
    81b6:	a1 1d       	adc	r26, r1
    81b8:	20 d0       	rcall	.+64     	; 0x81fa <__ultoa_invert+0x84>
    81ba:	09 f4       	brne	.+2      	; 0x81be <__ultoa_invert+0x48>
    81bc:	68 94       	set
    81be:	3f 91       	pop	r19
    81c0:	2a e0       	ldi	r18, 0x0A	; 10
    81c2:	26 9f       	mul	r18, r22
    81c4:	11 24       	eor	r1, r1
    81c6:	30 19       	sub	r19, r0
    81c8:	30 5d       	subi	r19, 0xD0	; 208
    81ca:	31 93       	st	Z+, r19
    81cc:	de f6       	brtc	.-74     	; 0x8184 <__ultoa_invert+0xe>
    81ce:	cf 01       	movw	r24, r30
    81d0:	08 95       	ret
    81d2:	46 2f       	mov	r20, r22
    81d4:	47 70       	andi	r20, 0x07	; 7
    81d6:	40 5d       	subi	r20, 0xD0	; 208
    81d8:	41 93       	st	Z+, r20
    81da:	b3 e0       	ldi	r27, 0x03	; 3
    81dc:	0f d0       	rcall	.+30     	; 0x81fc <__ultoa_invert+0x86>
    81de:	c9 f7       	brne	.-14     	; 0x81d2 <__ultoa_invert+0x5c>
    81e0:	f6 cf       	rjmp	.-20     	; 0x81ce <__ultoa_invert+0x58>
    81e2:	46 2f       	mov	r20, r22
    81e4:	4f 70       	andi	r20, 0x0F	; 15
    81e6:	40 5d       	subi	r20, 0xD0	; 208
    81e8:	4a 33       	cpi	r20, 0x3A	; 58
    81ea:	18 f0       	brcs	.+6      	; 0x81f2 <__ultoa_invert+0x7c>
    81ec:	49 5d       	subi	r20, 0xD9	; 217
    81ee:	31 fd       	sbrc	r19, 1
    81f0:	40 52       	subi	r20, 0x20	; 32
    81f2:	41 93       	st	Z+, r20
    81f4:	02 d0       	rcall	.+4      	; 0x81fa <__ultoa_invert+0x84>
    81f6:	a9 f7       	brne	.-22     	; 0x81e2 <__ultoa_invert+0x6c>
    81f8:	ea cf       	rjmp	.-44     	; 0x81ce <__ultoa_invert+0x58>
    81fa:	b4 e0       	ldi	r27, 0x04	; 4
    81fc:	a6 95       	lsr	r26
    81fe:	97 95       	ror	r25
    8200:	87 95       	ror	r24
    8202:	77 95       	ror	r23
    8204:	67 95       	ror	r22
    8206:	ba 95       	dec	r27
    8208:	c9 f7       	brne	.-14     	; 0x81fc <__ultoa_invert+0x86>
    820a:	00 97       	sbiw	r24, 0x00	; 0
    820c:	61 05       	cpc	r22, r1
    820e:	71 05       	cpc	r23, r1
    8210:	08 95       	ret
    8212:	9b 01       	movw	r18, r22
    8214:	ac 01       	movw	r20, r24
    8216:	0a 2e       	mov	r0, r26
    8218:	06 94       	lsr	r0
    821a:	57 95       	ror	r21
    821c:	47 95       	ror	r20
    821e:	37 95       	ror	r19
    8220:	27 95       	ror	r18
    8222:	ba 95       	dec	r27
    8224:	c9 f7       	brne	.-14     	; 0x8218 <__ultoa_invert+0xa2>
    8226:	62 0f       	add	r22, r18
    8228:	73 1f       	adc	r23, r19
    822a:	84 1f       	adc	r24, r20
    822c:	95 1f       	adc	r25, r21
    822e:	a0 1d       	adc	r26, r0
    8230:	08 95       	ret

00008232 <__ctype_isfalse>:
    8232:	99 27       	eor	r25, r25
    8234:	88 27       	eor	r24, r24

00008236 <__ctype_istrue>:
    8236:	08 95       	ret

00008238 <fgetc>:
    8238:	cf 93       	push	r28
    823a:	df 93       	push	r29
    823c:	ec 01       	movw	r28, r24
    823e:	4b 81       	ldd	r20, Y+3	; 0x03
    8240:	40 ff       	sbrs	r20, 0
    8242:	1a c0       	rjmp	.+52     	; 0x8278 <fgetc+0x40>
    8244:	46 ff       	sbrs	r20, 6
    8246:	0a c0       	rjmp	.+20     	; 0x825c <fgetc+0x24>
    8248:	4f 7b       	andi	r20, 0xBF	; 191
    824a:	4b 83       	std	Y+3, r20	; 0x03
    824c:	8e 81       	ldd	r24, Y+6	; 0x06
    824e:	9f 81       	ldd	r25, Y+7	; 0x07
    8250:	01 96       	adiw	r24, 0x01	; 1
    8252:	8e 83       	std	Y+6, r24	; 0x06
    8254:	9f 83       	std	Y+7, r25	; 0x07
    8256:	8a 81       	ldd	r24, Y+2	; 0x02
    8258:	28 2f       	mov	r18, r24
    825a:	2b c0       	rjmp	.+86     	; 0x82b2 <fgetc+0x7a>
    825c:	42 ff       	sbrs	r20, 2
    825e:	13 c0       	rjmp	.+38     	; 0x8286 <fgetc+0x4e>
    8260:	e8 81       	ld	r30, Y
    8262:	f9 81       	ldd	r31, Y+1	; 0x01
    8264:	80 81       	ld	r24, Z
    8266:	28 2f       	mov	r18, r24
    8268:	33 27       	eor	r19, r19
    826a:	27 fd       	sbrc	r18, 7
    826c:	30 95       	com	r19
    826e:	21 15       	cp	r18, r1
    8270:	31 05       	cpc	r19, r1
    8272:	29 f4       	brne	.+10     	; 0x827e <fgetc+0x46>
    8274:	40 62       	ori	r20, 0x20	; 32
    8276:	4b 83       	std	Y+3, r20	; 0x03
    8278:	2f ef       	ldi	r18, 0xFF	; 255
    827a:	3f ef       	ldi	r19, 0xFF	; 255
    827c:	1b c0       	rjmp	.+54     	; 0x82b4 <fgetc+0x7c>
    827e:	31 96       	adiw	r30, 0x01	; 1
    8280:	e8 83       	st	Y, r30
    8282:	f9 83       	std	Y+1, r31	; 0x01
    8284:	11 c0       	rjmp	.+34     	; 0x82a8 <fgetc+0x70>
    8286:	ea 85       	ldd	r30, Y+10	; 0x0a
    8288:	fb 85       	ldd	r31, Y+11	; 0x0b
    828a:	ce 01       	movw	r24, r28
    828c:	19 95       	eicall
    828e:	9c 01       	movw	r18, r24
    8290:	97 ff       	sbrs	r25, 7
    8292:	0a c0       	rjmp	.+20     	; 0x82a8 <fgetc+0x70>
    8294:	9b 81       	ldd	r25, Y+3	; 0x03
    8296:	2f 5f       	subi	r18, 0xFF	; 255
    8298:	3f 4f       	sbci	r19, 0xFF	; 255
    829a:	11 f0       	breq	.+4      	; 0x82a0 <fgetc+0x68>
    829c:	80 e2       	ldi	r24, 0x20	; 32
    829e:	01 c0       	rjmp	.+2      	; 0x82a2 <fgetc+0x6a>
    82a0:	80 e1       	ldi	r24, 0x10	; 16
    82a2:	89 2b       	or	r24, r25
    82a4:	8b 83       	std	Y+3, r24	; 0x03
    82a6:	e8 cf       	rjmp	.-48     	; 0x8278 <fgetc+0x40>
    82a8:	8e 81       	ldd	r24, Y+6	; 0x06
    82aa:	9f 81       	ldd	r25, Y+7	; 0x07
    82ac:	01 96       	adiw	r24, 0x01	; 1
    82ae:	8e 83       	std	Y+6, r24	; 0x06
    82b0:	9f 83       	std	Y+7, r25	; 0x07
    82b2:	30 e0       	ldi	r19, 0x00	; 0
    82b4:	c9 01       	movw	r24, r18
    82b6:	df 91       	pop	r29
    82b8:	cf 91       	pop	r28
    82ba:	08 95       	ret

000082bc <_exit>:
    82bc:	f8 94       	cli

000082be <__stop_program>:
    82be:	ff cf       	rjmp	.-2      	; 0x82be <__stop_program>
