
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009894  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00802000  00009894  00009928  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000441  0080212e  0080212e  00009a56  2**0
                  ALLOC
  3 .debug_aranges 00000340  00000000  00000000  00009a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e16  00000000  00000000  00009d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000cfc2  00000000  00000000  0000abac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002c4e  00000000  00000000  00017b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000052b8  00000000  00000000  0001a7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c00  00000000  00000000  0001fa74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000256c  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003b21  00000000  00000000  00022be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00026701  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <__ctors_end>
       4:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
       8:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
       c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      10:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      14:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      18:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      1c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      20:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      24:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      28:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      2c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      30:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      34:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      38:	0c 94 ab 27 	jmp	0x4f56	; 0x4f56 <__vector_14>
      3c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      40:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      44:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      48:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      4c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      50:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      54:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      58:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      5c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      60:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      64:	0c 94 04 2a 	jmp	0x5408	; 0x5408 <__vector_25>
      68:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__vector_26>
      6c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      70:	0c 94 fe 36 	jmp	0x6dfc	; 0x6dfc <__vector_28>
      74:	0c 94 7c 37 	jmp	0x6ef8	; 0x6ef8 <__vector_29>
      78:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      7c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      80:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      84:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      88:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      8c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      90:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      94:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      98:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      9c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      a0:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      a4:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      a8:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      ac:	0c 94 da 34 	jmp	0x69b4	; 0x69b4 <__vector_43>
      b0:	0c 94 b2 34 	jmp	0x6964	; 0x6964 <__vector_44>
      b4:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      b8:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      bc:	0c 94 e1 26 	jmp	0x4dc2	; 0x4dc2 <__vector_47>
      c0:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      c4:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      c8:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      cc:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      d0:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      d4:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      d8:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      dc:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      e0:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      e4:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      e8:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      ec:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      f0:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      f4:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      f8:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
      fc:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     100:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <__vector_64>
     104:	0c 94 62 34 	jmp	0x68c4	; 0x68c4 <__vector_65>
     108:	0c 94 7a 35 	jmp	0x6af4	; 0x6af4 <__vector_66>
     10c:	0c 94 52 35 	jmp	0x6aa4	; 0x6aa4 <__vector_67>
     110:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     114:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     118:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     11c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     120:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     124:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     128:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     12c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     130:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     134:	0c 94 46 27 	jmp	0x4e8c	; 0x4e8c <__vector_77>
     138:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     13c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     140:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     144:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     148:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     14c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     150:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     154:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     158:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     15c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     160:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     164:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     168:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     16c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     170:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     174:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     178:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     17c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     180:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     184:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     188:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     18c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     190:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     194:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     198:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     19c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     1a0:	0c 94 2a 35 	jmp	0x6a54	; 0x6a54 <__vector_104>
     1a4:	0c 94 02 35 	jmp	0x6a04	; 0x6a04 <__vector_105>
     1a8:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     1ac:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     1b0:	0c 94 7c 26 	jmp	0x4cf8	; 0x4cf8 <__vector_108>
     1b4:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     1b8:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     1bc:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     1c0:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     1c4:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     1c8:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     1cc:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     1d0:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     1d4:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     1d8:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     1dc:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     1e0:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     1e4:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <configs_P>:
     24b:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25b:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26b:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27b:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28b:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29b:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2ab:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bb:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2db:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2eb:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2fb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30b:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31b:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32b:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33b:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34b:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35b:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36b:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37b:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38b:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000399 <__c.3831>:
     399:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     3a9:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000003b4 <__c.3828>:
     3b4:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     3c4:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

000003ce <__c.3825>:
     3ce:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     3de:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000003e8 <__c.3822>:
     3e8:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     3f8:	74 3a 20 25 73 0a 00                                t: %s..

000003ff <__c.3819>:
     3ff:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     40f:	4d 6f 64 65 0a 00                                   Mode..

00000415 <__c.3816>:
     415:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     425:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

00000432 <__c.3748>:
     432:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     442:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     452:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     462:	29 0a 0a 00                                         )...

00000466 <__c.3746>:
     466:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     476:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     486:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000496 <__c.3744>:
     496:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     4a6:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4b6:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004c7 <__c.3742>:
     4c7:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     4d7:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4e7:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004f8 <__c.3740>:
     4f8:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     508:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     518:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     528:	6c 0a 00                                            l..

0000052b <__c.3738>:
     52b:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     53b:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     54b:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     55b:	6e 0a 00                                            n..

0000055e <__c.3736>:
     55e:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     56e:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     57e:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     58e:	74 65 70 73 29 0a 00                                teps)..

00000595 <__c.3734>:
     595:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     5a5:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     5b5:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     5c5:	70 0a 00                                            p..

000005c8 <__c.3732>:
     5c8:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     5d8:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     5e8:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     5f8:	73 74 65 70 73 29 0a 00                             steps)..

00000600 <__c.3730>:
     600:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     610:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     620:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     630:	73 74 65 70 73 29 0a 00                             steps)..

00000638 <__c.3725>:
     638:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     648:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

00000656 <__c.3711>:
     656:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     666:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     676:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000681 <__c.3709>:
     681:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     691:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     6a1:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000006ab <__c.3707>:
     6ab:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     6bb:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     6cb:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000006d5 <__c.3705>:
     6d5:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     6e5:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     6f5:	73 20 2d 2d 2d 0a 00                                s ---..

000006fc <__c.3703>:
     6fc:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     70c:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     71c:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000724 <bsel>:
     724:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

0000072f <bscale>:
     72f:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

0000073a <__c.3528>:
     73a:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     74a:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     75a:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000766 <readlnFuncs>:
     766:	44 2c 19 2c 19 2c 8b 2c 19 2c 19 2c 19 2c 19 2c     D,.,.,.,.,.,.,.,
     776:	77 2c 19 2c 44 2c 19 2c 19 2c 44 2c a6 2c af 2c     w,.,D,.,.,D,.,.,
     786:	19 2c 9d 2c 19 2c 94 2c 19 2c 19 2c 19 2c 19 2c     .,.,.,.,.,.,.,.,
     796:	8b 2c 19 2c 19 2c 8b 2c 19 2c 19 2c 19 2c 19 2c     .,.,.,.,.,.,.,.,
     7a6:	19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c     .,.,.,.,.,.,.,.,
     7b6:	19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c     .,.,.,.,.,.,.,.,
     7c6:	19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c     .,.,.,.,.,.,.,.,
     7d6:	19 2c 19 2c 19 2c 6d 2c 19 2c 19 2c 19 2c 19 2c     .,.,.,m,.,.,.,.,
     7e6:	19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c     .,.,.,.,.,.,.,.,
     7f6:	19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c     .,.,.,.,.,.,.,.,
     806:	19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c     .,.,.,.,.,.,.,.,
     816:	19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c     .,.,.,.,.,.,.,.,
     826:	19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c     .,.,.,.,.,.,.,.,
     836:	19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c     .,.,.,.,.,.,.,.,
     846:	19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c     .,.,.,.,.,.,.,.,
     856:	19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 19 2c 77 2c     .,.,.,.,.,.,.,w,

00000866 <getcFuncs>:
     866:	98 2b 88 2b 88 2b bd 2b 88 2b 88 2b 88 2b 88 2b     .+.+.+.+.+.+.+.+
     876:	b7 2b 88 2b 98 2b 88 2b 88 2b 98 2b cf 2b d5 2b     .+.+.+.+.+.+.+.+
     886:	88 2b c9 2b 88 2b c3 2b 88 2b 88 2b 88 2b 88 2b     .+.+.+.+.+.+.+.+
     896:	bd 2b 88 2b 88 2b bd 2b 88 2b 88 2b 88 2b 88 2b     .+.+.+.+.+.+.+.+
     8a6:	88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b     .+.+.+.+.+.+.+.+
     8b6:	88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b     .+.+.+.+.+.+.+.+
     8c6:	88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b     .+.+.+.+.+.+.+.+
     8d6:	88 2b 88 2b 88 2b ad 2b 88 2b 88 2b 88 2b 88 2b     .+.+.+.+.+.+.+.+
     8e6:	88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b     .+.+.+.+.+.+.+.+
     8f6:	88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b     .+.+.+.+.+.+.+.+
     906:	88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b     .+.+.+.+.+.+.+.+
     916:	88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b     .+.+.+.+.+.+.+.+
     926:	88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b     .+.+.+.+.+.+.+.+
     936:	88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b     .+.+.+.+.+.+.+.+
     946:	88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b     .+.+.+.+.+.+.+.+
     956:	88 2b 88 2b 88 2b 88 2b 88 2b 88 2b 88 2b b7 2b     .+.+.+.+.+.+.+.+

00000966 <square_test1>:
     966:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     976:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     986:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     996:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     9a6:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     9b6:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     9c6:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000009d4 <square_test2>:
     9d4:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     9e4:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     9f4:	78 30 20 79 30 00                                   x0 y0.

000009fa <square_test10>:
     9fa:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     a0a:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     a1a:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000a26 <circle_test10>:
     a26:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     a36:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     a46:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     a56:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     a66:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     a76:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     a86:	30 00                                               0.

00000a88 <square_circle_test10>:
     a88:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     a98:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     aa8:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     ab8:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     ac8:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     ad8:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     ae8:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     af8:	31 30 20 79 30 00                                   10 y0.

00000afe <square_circle_test100>:
     afe:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     b0e:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     b1e:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     b2e:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     b3e:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     b4e:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     b5e:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     b6e:	35 30 20 6a 30 00                                   50 j0.

00000b74 <spiral_test5>:
     b74:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     b84:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     b94:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     ba4:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     bb4:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     bc4:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     bd4:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     be4:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

00000bee <spiral_test50a>:
     bee:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     bfe:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

00000c0e <dwell_test1>:
     c0e:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     c1e:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     c2e:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     c3e:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     c4e:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     c5e:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     c6e:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     c7e:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     c8e:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     c9e:	20 78 30 00                                          x0.

00000ca2 <dwell_test2>:
     ca2:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     cb2:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     cc2:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     cd2:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     ce2:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     cf2:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     d02:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     d12:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     d22:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000d2c <dwell_testMax>:
     d2c:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000d36 <g0_test1>:
     d36:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     d46:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000d56 <g0_test2>:
     d56:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     d66:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     d76:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     d86:	79 30 20 7a 30 00                                   y0 z0.

00000d8c <g0_test3>:
     d8c:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     d9c:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     dac:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000dba <radius_arc_test1>:
     dba:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     dca:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     dda:	72 35 30 0a 00                                      r50..

00000ddf <radius_arc_test2>:
     ddf:	67 32 0a 00                                         g2..

00000de3 <zoetrope>:
     de3:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     df3:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     e03:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     e13:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     e23:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     e33:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     e43:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     e53:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     e63:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     e73:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     e83:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     e93:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     ea3:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     eb3:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     ec3:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     ed3:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     ee3:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     ef3:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     f03:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     f13:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     f23:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     f33:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     f43:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     f53:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     f63:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     f73:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     f83:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     f93:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     fa3:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     fb3:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     fc3:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     fd3:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     fe3:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     ff3:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
    1003:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
    1013:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
    1023:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
    1033:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
    1043:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
    1053:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
    1063:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
    1073:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
    1083:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
    1093:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
    10a3:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
    10b3:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
    10c3:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
    10d3:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
    10e3:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
    10f3:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
    1103:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
    1113:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
    1123:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
    1133:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
    1143:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
    1153:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
    1163:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
    1173:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
    1183:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
    1193:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
    11a3:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
    11b3:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
    11c3:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
    11d3:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
    11e3:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
    11f3:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
    1203:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
    1213:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    1223:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    1233:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    1243:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    1253:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    1263:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    1273:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    1283:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    1293:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    12a3:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    12b3:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    12c3:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    12d3:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    12e3:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    12f3:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    1303:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    1313:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    1323:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    1333:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    1343:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    1353:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    1363:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    1373:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    1383:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    1393:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    13a3:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    13b3:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    13c3:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    13d3:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    13e3:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    13f3:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    1403:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    1413:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    1423:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    1433:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    1443:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    1453:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    1463:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    1473:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    1483:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    1493:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    14a3:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    14b3:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    14c3:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    14d3:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    14e3:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    14f3:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    1503:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    1513:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    1523:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    1533:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    1543:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    1553:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    1563:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    1573:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    1583:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    1593:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    15a3:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    15b3:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    15c3:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    15d3:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    15e3:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    15f3:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    1603:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    1613:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    1623:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    1633:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    1643:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    1653:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    1663:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    1673:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    1683:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    1693:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    16a3:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    16b3:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    16c3:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    16d3:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    16e3:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    16f3:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    1703:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    1713:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    1723:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    1733:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    1743:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    1753:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    1763:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    1773:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    1783:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    1793:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

0000179e <contraptor_circle>:
    179e:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    17ae:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    17be:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    17ce:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    17de:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    17ee:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    17fe:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    180e:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    181e:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    182e:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    183e:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    184e:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    185e:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    186e:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    187e:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    188e:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    189e:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    18ae:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    18be:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    18ce:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    18de:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    18ee:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    18fe:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    190e:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    191e:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    192e:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    193e:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    194e:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    195e:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    196e:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    197e:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    198e:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    199e:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    19ae:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    19be:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    19ce:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    19de:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    19ee:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    19fe:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    1a0e:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    1a1e:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1a2e:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1a3e:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    1a4e:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    1a5e:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    1a6e:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    1a7e:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    1a8e:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    1a9e:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1aae:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    1abe:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    1ace:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    1ade:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    1aee:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    1afe:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    1b0e:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1b1e:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1b2e:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1b3e:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1b4e:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1b5e:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1b6e:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001b7e <tgModeStringControl>:
    1b7e:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001b8b <tgModeStringConfig>:
    1b8b:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001b97 <tgModeStringGCode>:
    1b97:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

00001ba3 <tgModeStringDirect>:
    1ba3:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

00001bb0 <tgModeStrings>:
    1bb0:	7e 1b 8b 1b 97 1b a3 1b                             ~.......

00001bb8 <__c.3968>:
    1bb8:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1bc8:	69 6c 65 0a 00                                      ile..

00001bcd <__c.4000>:
    1bcd:	0d 0a 45 6e 64 20 6f 66 20 66 69 6c 65 20 65 6e     ..End of file en
    1bdd:	63 6f 75 6e 74 65 72 65 64 0d 0a 00                 countered...

00001be9 <__c.3946>:
    1be9:	54 69 6e 79 47 20 5b 25 53 5d 3e 20 00              TinyG [%S]> .

00001bf6 <__c.3941>:
    1bf6:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001c04 <__c.3873>:
    1c04:	62 75 69 6c 64 20 32 30 32 00                       build 202.

00001c0e <__c.3871>:
    1c0e:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1c1e:	25 53 0a 00                                         %S..

00001c22 <readlnFuncs>:
    1c22:	3e 39 13 39 13 39 85 39 13 39 13 39 13 39 13 39     >9.9.9.9.9.9.9.9
    1c32:	71 39 13 39 3e 39 13 39 13 39 3e 39 a0 39 a9 39     q9.9>9.9.9>9.9.9
    1c42:	13 39 97 39 13 39 8e 39 13 39 13 39 13 39 13 39     .9.9.9.9.9.9.9.9
    1c52:	85 39 13 39 13 39 85 39 13 39 13 39 13 39 13 39     .9.9.9.9.9.9.9.9
    1c62:	13 39 13 39 13 39 13 39 13 39 13 39 13 39 13 39     .9.9.9.9.9.9.9.9
    1c72:	13 39 13 39 13 39 13 39 13 39 13 39 13 39 13 39     .9.9.9.9.9.9.9.9
    1c82:	13 39 13 39 13 39 13 39 13 39 13 39 13 39 13 39     .9.9.9.9.9.9.9.9
    1c92:	13 39 13 39 13 39 67 39 13 39 13 39 13 39 13 39     .9.9.9g9.9.9.9.9
    1ca2:	13 39 13 39 13 39 13 39 13 39 13 39 13 39 13 39     .9.9.9.9.9.9.9.9
    1cb2:	13 39 13 39 13 39 13 39 13 39 13 39 13 39 13 39     .9.9.9.9.9.9.9.9
    1cc2:	13 39 13 39 13 39 13 39 13 39 13 39 13 39 13 39     .9.9.9.9.9.9.9.9
    1cd2:	13 39 13 39 13 39 13 39 13 39 13 39 13 39 13 39     .9.9.9.9.9.9.9.9
    1ce2:	13 39 13 39 13 39 13 39 13 39 13 39 13 39 13 39     .9.9.9.9.9.9.9.9
    1cf2:	13 39 13 39 13 39 13 39 13 39 13 39 13 39 13 39     .9.9.9.9.9.9.9.9
    1d02:	13 39 13 39 13 39 13 39 13 39 13 39 13 39 13 39     .9.9.9.9.9.9.9.9
    1d12:	13 39 13 39 13 39 13 39 13 39 13 39 13 39 71 39     .9.9.9.9.9.9.9q9

00001d22 <getcFuncs>:
    1d22:	92 38 82 38 82 38 b7 38 82 38 82 38 82 38 82 38     .8.8.8.8.8.8.8.8
    1d32:	b1 38 82 38 92 38 82 38 82 38 92 38 c9 38 cf 38     .8.8.8.8.8.8.8.8
    1d42:	82 38 c3 38 82 38 bd 38 82 38 82 38 82 38 82 38     .8.8.8.8.8.8.8.8
    1d52:	b7 38 82 38 82 38 b7 38 82 38 82 38 82 38 82 38     .8.8.8.8.8.8.8.8
    1d62:	82 38 82 38 82 38 82 38 82 38 82 38 82 38 82 38     .8.8.8.8.8.8.8.8
    1d72:	82 38 82 38 82 38 82 38 82 38 82 38 82 38 82 38     .8.8.8.8.8.8.8.8
    1d82:	82 38 82 38 82 38 82 38 82 38 82 38 82 38 82 38     .8.8.8.8.8.8.8.8
    1d92:	82 38 82 38 82 38 a7 38 82 38 82 38 82 38 82 38     .8.8.8.8.8.8.8.8
    1da2:	82 38 82 38 82 38 82 38 82 38 82 38 82 38 82 38     .8.8.8.8.8.8.8.8
    1db2:	82 38 82 38 82 38 82 38 82 38 82 38 82 38 82 38     .8.8.8.8.8.8.8.8
    1dc2:	82 38 82 38 82 38 82 38 82 38 82 38 82 38 82 38     .8.8.8.8.8.8.8.8
    1dd2:	82 38 82 38 82 38 82 38 82 38 82 38 82 38 82 38     .8.8.8.8.8.8.8.8
    1de2:	82 38 82 38 82 38 82 38 82 38 82 38 82 38 82 38     .8.8.8.8.8.8.8.8
    1df2:	82 38 82 38 82 38 82 38 82 38 82 38 82 38 82 38     .8.8.8.8.8.8.8.8
    1e02:	82 38 82 38 82 38 82 38 82 38 82 38 82 38 82 38     .8.8.8.8.8.8.8.8
    1e12:	82 38 82 38 82 38 82 38 82 38 82 38 82 38 b1 38     .8.8.8.8.8.8.8.8

00001e22 <pstr_inf>:
    1e22:	49 4e 46                                            INF

00001e25 <pstr_inity>:
    1e25:	49 4e 49 54 59                                      INITY

00001e2a <pstr_nan>:
    1e2a:	4e 41 4e                                            NAN

00001e2d <pwr_m10>:
    1e2d:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1e3d:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001e45 <pwr_p10>:
    1e45:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1e55:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1e65:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1e75:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1e85:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1e95:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1ea5:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1eb5:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1ec5:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1ed5:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1ee5:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1ef5:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1f05:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1f15:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1f25:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1f35:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1f45:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1f55:	3d 27 00                                            ='.

00001f58 <__ctors_end>:
    1f58:	11 24       	eor	r1, r1
    1f5a:	1f be       	out	0x3f, r1	; 63
    1f5c:	cf ef       	ldi	r28, 0xFF	; 255
    1f5e:	df e5       	ldi	r29, 0x5F	; 95
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	00 e0       	ldi	r16, 0x00	; 0
    1f66:	0c bf       	out	0x3c, r16	; 60

00001f68 <__do_copy_data>:
    1f68:	11 e2       	ldi	r17, 0x21	; 33
    1f6a:	a0 e0       	ldi	r26, 0x00	; 0
    1f6c:	b0 e2       	ldi	r27, 0x20	; 32
    1f6e:	e4 e9       	ldi	r30, 0x94	; 148
    1f70:	f8 e9       	ldi	r31, 0x98	; 152
    1f72:	00 e0       	ldi	r16, 0x00	; 0
    1f74:	0b bf       	out	0x3b, r16	; 59
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <__do_copy_data+0x14>
    1f78:	07 90       	elpm	r0, Z+
    1f7a:	0d 92       	st	X+, r0
    1f7c:	ae 32       	cpi	r26, 0x2E	; 46
    1f7e:	b1 07       	cpc	r27, r17
    1f80:	d9 f7       	brne	.-10     	; 0x1f78 <__do_copy_data+0x10>

00001f82 <__do_clear_bss>:
    1f82:	15 e2       	ldi	r17, 0x25	; 37
    1f84:	ae e2       	ldi	r26, 0x2E	; 46
    1f86:	b1 e2       	ldi	r27, 0x21	; 33
    1f88:	01 c0       	rjmp	.+2      	; 0x1f8c <.do_clear_bss_start>

00001f8a <.do_clear_bss_loop>:
    1f8a:	1d 92       	st	X+, r1

00001f8c <.do_clear_bss_start>:
    1f8c:	af 36       	cpi	r26, 0x6F	; 111
    1f8e:	b1 07       	cpc	r27, r17
    1f90:	e1 f7       	brne	.-8      	; 0x1f8a <.do_clear_bss_loop>
    1f92:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <main>
    1f96:	0c 94 48 4c 	jmp	0x9890	; 0x9890 <_exit>

00001f9a <__bad_interrupt>:
    1f9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001f9e <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1f9e:	f8 94       	cli
	xmega_init();				// xmega setup
    1fa0:	0e 94 c9 1b 	call	0x3792	; 0x3792 <xmega_init>
	xio_init();					// xmega io subsystem
    1fa4:	0e 94 7e 28 	call	0x50fc	; 0x50fc <xio_init>

	cfg_init();					// get config record from eeprom
    1fa8:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <cfg_init>
	st_init(); 					// stepper subsystem
    1fac:	0e 94 38 24 	call	0x4870	; 0x4870 <st_init>
	ls_init();					// limit switches
    1fb0:	0e 94 3a 34 	call	0x6874	; 0x6874 <ls_init>
	mv_init();					// move buffers
    1fb4:	0e 94 16 32 	call	0x642c	; 0x642c <mv_init>
	mc_init();					// motion control subsystem
    1fb8:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <mc_init>
	spindle_init();				// spindle controller
    1fbc:	0e 94 1c 24 	call	0x4838	; 0x4838 <spindle_init>
	en_init();					// encoders
    1fc0:	0e 94 67 1b 	call	0x36ce	; 0x36ce <en_init>
	gc_init();					// gcode-parser
    1fc4:	0e 94 22 10 	call	0x2044	; 0x2044 <gc_init>
	dd_init();					// direct drive commands
    1fc8:	0e 94 12 32 	call	0x6424	; 0x6424 <dd_init>
	tg_init();					// tinyg parsers
    1fcc:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1fd0:	0e 94 1e 28 	call	0x503c	; 0x503c <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1fd4:	e0 ea       	ldi	r30, 0xA0	; 160
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 91 a2 00 	lds	r24, 0x00A2
    1fdc:	81 60       	ori	r24, 0x01	; 1
    1fde:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1fe0:	80 91 a2 00 	lds	r24, 0x00A2
    1fe4:	82 60       	ori	r24, 0x02	; 2
    1fe6:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1fe8:	80 91 a2 00 	lds	r24, 0x00A2
    1fec:	84 60       	ori	r24, 0x04	; 4
    1fee:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1ff0:	78 94       	sei

	// Debug help:
	// Pre-load the USB RX (input) buffer with some test strings
	// Be mindful of the 16 char limit on the RX (circular) buffer.
	xio_usb_queue_RX_string("f\n");
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e2       	ldi	r25, 0x20	; 32
    1ff6:	0e 94 6f 2a 	call	0x54de	; 0x54de <xio_usb_queue_RX_string>
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");

	for(;;){
		tg_controller();
    1ffa:	0e 94 ad 31 	call	0x635a	; 0x635a <tg_controller>
    1ffe:	fd cf       	rjmp	.-6      	; 0x1ffa <main+0x5c>

00002000 <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    2000:	80 93 7b 21 	sts	0x217B, r24
	gc.plane_axis_1 = axis_1;
    2004:	60 93 7c 21 	sts	0x217C, r22
	gc.plane_axis_2 = axis_2;
    2008:	40 93 7d 21 	sts	0x217D, r20
}
    200c:	08 95       	ret

0000200e <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    200e:	ef 92       	push	r14
    2010:	ff 92       	push	r15
    2012:	0f 93       	push	r16
    2014:	1f 93       	push	r17
    2016:	7b 01       	movw	r14, r22
    2018:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    201a:	80 91 3b 21 	lds	r24, 0x213B
    201e:	88 23       	and	r24, r24
    2020:	51 f0       	breq	.+20     	; 0x2036 <to_millimeters+0x28>
    2022:	c8 01       	movw	r24, r16
    2024:	b7 01       	movw	r22, r14
    2026:	25 e8       	ldi	r18, 0x85	; 133
    2028:	32 e4       	ldi	r19, 0x42	; 66
    202a:	41 e2       	ldi	r20, 0x21	; 33
    202c:	5d e3       	ldi	r21, 0x3D	; 61
    202e:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    2032:	7b 01       	movw	r14, r22
    2034:	8c 01       	movw	r16, r24
}
    2036:	b7 01       	movw	r22, r14
    2038:	c8 01       	movw	r24, r16
    203a:	1f 91       	pop	r17
    203c:	0f 91       	pop	r16
    203e:	ff 90       	pop	r15
    2040:	ef 90       	pop	r14
    2042:	08 95       	ret

00002044 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    2044:	86 e5       	ldi	r24, 0x56	; 86
    2046:	ee e2       	ldi	r30, 0x2E	; 46
    2048:	f1 e2       	ldi	r31, 0x21	; 33
    204a:	df 01       	movw	r26, r30
    204c:	1d 92       	st	X+, r1
    204e:	8a 95       	dec	r24
    2050:	e9 f7       	brne	.-6      	; 0x204c <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a0 e0       	ldi	r26, 0x00	; 0
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	80 93 3f 21 	sts	0x213F, r24
    205e:	90 93 40 21 	sts	0x2140, r25
    2062:	a0 93 41 21 	sts	0x2141, r26
    2066:	b0 93 42 21 	sts	0x2142, r27
	gc.radius = 0;							// radius value
    206a:	80 93 43 21 	sts	0x2143, r24
    206e:	90 93 44 21 	sts	0x2144, r25
    2072:	a0 93 45 21 	sts	0x2145, r26
    2076:	b0 93 46 21 	sts	0x2146, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    207a:	80 91 a5 24 	lds	r24, 0x24A5
    207e:	90 91 a6 24 	lds	r25, 0x24A6
    2082:	a0 91 a7 24 	lds	r26, 0x24A7
    2086:	b0 91 a8 24 	lds	r27, 0x24A8
    208a:	80 93 47 21 	sts	0x2147, r24
    208e:	90 93 48 21 	sts	0x2148, r25
    2092:	a0 93 49 21 	sts	0x2149, r26
    2096:	b0 93 4a 21 	sts	0x214A, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    209a:	80 91 a9 24 	lds	r24, 0x24A9
    209e:	90 91 aa 24 	lds	r25, 0x24AA
    20a2:	a0 91 ab 24 	lds	r26, 0x24AB
    20a6:	b0 91 ac 24 	lds	r27, 0x24AC
    20aa:	80 93 4b 21 	sts	0x214B, r24
    20ae:	90 93 4c 21 	sts	0x214C, r25
    20b2:	a0 93 4d 21 	sts	0x214D, r26
    20b6:	b0 93 4e 21 	sts	0x214E, r27

	gc.absolute_mode = TRUE;
    20ba:	21 e0       	ldi	r18, 0x01	; 1
    20bc:	20 93 3c 21 	sts	0x213C, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	a0 e8       	ldi	r26, 0x80	; 128
    20c6:	bf eb       	ldi	r27, 0xBF	; 191
    20c8:	80 93 53 21 	sts	0x2153, r24
    20cc:	90 93 54 21 	sts	0x2154, r25
    20d0:	a0 93 55 21 	sts	0x2155, r26
    20d4:	b0 93 56 21 	sts	0x2156, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    20d8:	10 92 3d 21 	sts	0x213D, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    20dc:	10 92 82 21 	sts	0x2182, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    20e0:	10 92 83 21 	sts	0x2183, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    20e4:	10 92 7b 21 	sts	0x217B, r1
	gc.plane_axis_1 = axis_1;
    20e8:	20 93 7c 21 	sts	0x217C, r18
	gc.plane_axis_2 = axis_2;
    20ec:	82 e0       	ldi	r24, 0x02	; 2
    20ee:	80 93 7d 21 	sts	0x217D, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X, Y, Z);
}
    20f2:	08 95       	ret

000020f4 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    20f4:	4f 92       	push	r4
    20f6:	5f 92       	push	r5
    20f8:	6f 92       	push	r6
    20fa:	7f 92       	push	r7
    20fc:	8f 92       	push	r8
    20fe:	9f 92       	push	r9
    2100:	af 92       	push	r10
    2102:	bf 92       	push	r11
    2104:	cf 92       	push	r12
    2106:	df 92       	push	r13
    2108:	ef 92       	push	r14
    210a:	ff 92       	push	r15
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	0f 92       	push	r0
    2116:	0f 92       	push	r0
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	3b 01       	movw	r6, r22
    211e:	2a 01       	movw	r4, r20
    2120:	49 01       	movw	r8, r18
    2122:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    2124:	d8 01       	movw	r26, r16
    2126:	ed 91       	ld	r30, X+
    2128:	fc 91       	ld	r31, X
    212a:	e2 0f       	add	r30, r18
    212c:	f3 1f       	adc	r31, r19
    212e:	e0 81       	ld	r30, Z
    2130:	ee 23       	and	r30, r30
    2132:	41 f0       	breq	.+16     	; 0x2144 <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    2134:	dc 01       	movw	r26, r24
    2136:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    2138:	e1 54       	subi	r30, 0x41	; 65
    213a:	ea 31       	cpi	r30, 0x1A	; 26
    213c:	30 f0       	brcs	.+12     	; 0x214a <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    213e:	88 e0       	ldi	r24, 0x08	; 8
    2140:	80 93 2e 21 	sts	0x212E, r24
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	35 c0       	rjmp	.+106    	; 0x21b4 <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    214a:	f8 01       	movw	r30, r16
    214c:	80 81       	ld	r24, Z
    214e:	91 81       	ldd	r25, Z+1	; 0x01
    2150:	01 96       	adiw	r24, 0x01	; 1
    2152:	80 83       	st	Z, r24
    2154:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    2156:	89 01       	movw	r16, r18
    2158:	08 0f       	add	r16, r24
    215a:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    215c:	c8 01       	movw	r24, r16
    215e:	be 01       	movw	r22, r28
    2160:	6f 5f       	subi	r22, 0xFF	; 255
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	0e 94 7c 48 	call	0x90f8	; 0x90f8 <strtod>
    2168:	6b 01       	movw	r12, r22
    216a:	7c 01       	movw	r14, r24
    216c:	d3 01       	movw	r26, r6
    216e:	6d 93       	st	X+, r22
    2170:	7d 93       	st	X+, r23
    2172:	8d 93       	st	X+, r24
    2174:	9c 93       	st	X, r25
    2176:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	9a 81       	ldd	r25, Y+2	; 0x02
    217c:	80 17       	cp	r24, r16
    217e:	91 07       	cpc	r25, r17
    2180:	11 f4       	brne	.+4      	; 0x2186 <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    2182:	8c e0       	ldi	r24, 0x0C	; 12
    2184:	dd cf       	rjmp	.-70     	; 0x2140 <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    2186:	88 19       	sub	r24, r8
    2188:	99 09       	sbc	r25, r9
    218a:	f5 01       	movw	r30, r10
    218c:	80 83       	st	Z, r24
    218e:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    2190:	c7 01       	movw	r24, r14
    2192:	b6 01       	movw	r22, r12
    2194:	0e 94 e1 47 	call	0x8fc2	; 0x8fc2 <trunc>
    2198:	9b 01       	movw	r18, r22
    219a:	ac 01       	movw	r20, r24
    219c:	c7 01       	movw	r24, r14
    219e:	b6 01       	movw	r22, r12
    21a0:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    21a4:	d2 01       	movw	r26, r4
    21a6:	6d 93       	st	X+, r22
    21a8:	7d 93       	st	X+, r23
    21aa:	8d 93       	st	X+, r24
    21ac:	9c 93       	st	X, r25
    21ae:	13 97       	sbiw	r26, 0x03	; 3
    21b0:	21 e0       	ldi	r18, 0x01	; 1
    21b2:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    21b4:	c9 01       	movw	r24, r18
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	ff 90       	pop	r15
    21c4:	ef 90       	pop	r14
    21c6:	df 90       	pop	r13
    21c8:	cf 90       	pop	r12
    21ca:	bf 90       	pop	r11
    21cc:	af 90       	pop	r10
    21ce:	9f 90       	pop	r9
    21d0:	8f 90       	pop	r8
    21d2:	7f 90       	pop	r7
    21d4:	6f 90       	pop	r6
    21d6:	5f 90       	pop	r5
    21d8:	4f 90       	pop	r4
    21da:	08 95       	ret

000021dc <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    21dc:	af 92       	push	r10
    21de:	bf 92       	push	r11
    21e0:	cf 92       	push	r12
    21e2:	df 92       	push	r13
    21e4:	ef 92       	push	r14
    21e6:	ff 92       	push	r15
    21e8:	0f 93       	push	r16
    21ea:	1f 93       	push	r17
    21ec:	79 01       	movw	r14, r18
    21ee:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    21f0:	5f 77       	andi	r21, 0x7F	; 127
    21f2:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    21f6:	0e 94 36 44 	call	0x886c	; 0x886c <atan>
    21fa:	5b 01       	movw	r10, r22
    21fc:	6c 01       	movw	r12, r24

	if (y>0) {
    21fe:	c8 01       	movw	r24, r16
    2200:	b7 01       	movw	r22, r14
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	0e 94 61 46 	call	0x8cc2	; 0x8cc2 <__gesf2>
    220e:	18 16       	cp	r1, r24
    2210:	cc f0       	brlt	.+50     	; 0x2244 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    2212:	c6 01       	movw	r24, r12
    2214:	b5 01       	movw	r22, r10
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	0e 94 61 46 	call	0x8cc2	; 0x8cc2 <__gesf2>
    2222:	18 16       	cp	r1, r24
    2224:	2c f4       	brge	.+10     	; 0x2230 <theta+0x54>
	    {
			return(M_PI-theta);
    2226:	6b ed       	ldi	r22, 0xDB	; 219
    2228:	7f e0       	ldi	r23, 0x0F	; 15
    222a:	89 e4       	ldi	r24, 0x49	; 73
    222c:	90 e4       	ldi	r25, 0x40	; 64
    222e:	04 c0       	rjmp	.+8      	; 0x2238 <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    2230:	6b ed       	ldi	r22, 0xDB	; 219
    2232:	7f e0       	ldi	r23, 0x0F	; 15
    2234:	89 e4       	ldi	r24, 0x49	; 73
    2236:	90 ec       	ldi	r25, 0xC0	; 192
    2238:	a6 01       	movw	r20, r12
    223a:	95 01       	movw	r18, r10
    223c:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    2240:	5b 01       	movw	r10, r22
    2242:	6c 01       	movw	r12, r24
		}
	}
}
    2244:	b5 01       	movw	r22, r10
    2246:	c6 01       	movw	r24, r12
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	ff 90       	pop	r15
    224e:	ef 90       	pop	r14
    2250:	df 90       	pop	r13
    2252:	cf 90       	pop	r12
    2254:	bf 90       	pop	r11
    2256:	af 90       	pop	r10
    2258:	08 95       	ret

0000225a <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    225a:	2f 92       	push	r2
    225c:	3f 92       	push	r3
    225e:	4f 92       	push	r4
    2260:	5f 92       	push	r5
    2262:	6f 92       	push	r6
    2264:	7f 92       	push	r7
    2266:	8f 92       	push	r8
    2268:	9f 92       	push	r9
    226a:	af 92       	push	r10
    226c:	bf 92       	push	r11
    226e:	cf 92       	push	r12
    2270:	df 92       	push	r13
    2272:	ef 92       	push	r14
    2274:	ff 92       	push	r15
    2276:	0f 93       	push	r16
    2278:	1f 93       	push	r17
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	68 97       	sbiw	r28, 0x18	; 24
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    228a:	19 82       	std	Y+1, r1	; 0x01
    228c:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    228e:	e3 e6       	ldi	r30, 0x63	; 99
    2290:	f1 e2       	ldi	r31, 0x21	; 33
    2292:	8c e0       	ldi	r24, 0x0C	; 12
    2294:	df 01       	movw	r26, r30
    2296:	28 2f       	mov	r18, r24
    2298:	1d 92       	st	X+, r1
    229a:	2a 95       	dec	r18
    229c:	e9 f7       	brne	.-6      	; 0x2298 <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    229e:	3c 96       	adiw	r30, 0x0c	; 12
    22a0:	df 01       	movw	r26, r30
    22a2:	1d 92       	st	X+, r1
    22a4:	8a 95       	dec	r24
    22a6:	e9 f7       	brne	.-6      	; 0x22a2 <gc_execute_block+0x48>

	gc.status = TG_OK;
    22a8:	10 92 2e 21 	sts	0x212E, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    22ac:	10 92 3e 21 	sts	0x213E, r1
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set
    22b0:	10 92 83 21 	sts	0x2183, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    22b4:	5e 01       	movw	r10, r28
    22b6:	08 94       	sec
    22b8:	a1 1c       	adc	r10, r1
    22ba:	b1 1c       	adc	r11, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    22bc:	ff 24       	eor	r15, r15
    22be:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    22c0:	ba e0       	ldi	r27, 0x0A	; 10
    22c2:	cb 2e       	mov	r12, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    22c4:	a2 e0       	ldi	r26, 0x02	; 2
    22c6:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    22c8:	77 24       	eor	r7, r7
    22ca:	7a 94       	dec	r7

					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    22cc:	f3 e0       	ldi	r31, 0x03	; 3
    22ce:	df 2e       	mov	r13, r31

					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    22d0:	e4 e0       	ldi	r30, 0x04	; 4
    22d2:	6e 2e       	mov	r6, r30
    22d4:	0a c1       	rjmp	.+532    	; 0x24ea <gc_execute_block+0x290>
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    22d6:	80 91 2f 21 	lds	r24, 0x212F
    22da:	8d 34       	cpi	r24, 0x4D	; 77
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <gc_execute_block+0x86>
    22de:	be c0       	rjmp	.+380    	; 0x245c <gc_execute_block+0x202>
    22e0:	84 35       	cpi	r24, 0x54	; 84
    22e2:	09 f4       	brne	.+2      	; 0x22e6 <gc_execute_block+0x8c>
    22e4:	f0 c0       	rjmp	.+480    	; 0x24c6 <gc_execute_block+0x26c>
    22e6:	87 34       	cpi	r24, 0x47	; 71
    22e8:	09 f0       	breq	.+2      	; 0x22ec <gc_execute_block+0x92>
    22ea:	fb c0       	rjmp	.+502    	; 0x24e2 <gc_execute_block+0x288>
			case 'G':
				switch((int)gc.value) {
    22ec:	60 91 30 21 	lds	r22, 0x2130
    22f0:	70 91 31 21 	lds	r23, 0x2131
    22f4:	80 91 32 21 	lds	r24, 0x2132
    22f8:	90 91 33 21 	lds	r25, 0x2133
    22fc:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <__fixsfsi>
    2300:	65 31       	cpi	r22, 0x15	; 21
    2302:	71 05       	cpc	r23, r1
    2304:	09 f4       	brne	.+2      	; 0x2308 <gc_execute_block+0xae>
    2306:	8f c0       	rjmp	.+286    	; 0x2426 <gc_execute_block+0x1cc>
    2308:	66 31       	cpi	r22, 0x16	; 22
    230a:	71 05       	cpc	r23, r1
    230c:	84 f5       	brge	.+96     	; 0x236e <gc_execute_block+0x114>
    230e:	64 30       	cpi	r22, 0x04	; 4
    2310:	71 05       	cpc	r23, r1
    2312:	09 f4       	brne	.+2      	; 0x2316 <gc_execute_block+0xbc>
    2314:	6d c0       	rjmp	.+218    	; 0x23f0 <gc_execute_block+0x196>
    2316:	65 30       	cpi	r22, 0x05	; 5
    2318:	71 05       	cpc	r23, r1
    231a:	a4 f4       	brge	.+40     	; 0x2344 <gc_execute_block+0xea>
    231c:	61 30       	cpi	r22, 0x01	; 1
    231e:	71 05       	cpc	r23, r1
    2320:	09 f4       	brne	.+2      	; 0x2324 <gc_execute_block+0xca>
    2322:	57 c0       	rjmp	.+174    	; 0x23d2 <gc_execute_block+0x178>
    2324:	62 30       	cpi	r22, 0x02	; 2
    2326:	71 05       	cpc	r23, r1
    2328:	24 f4       	brge	.+8      	; 0x2332 <gc_execute_block+0xd8>
    232a:	67 2b       	or	r22, r23
    232c:	09 f4       	brne	.+2      	; 0x2330 <gc_execute_block+0xd6>
    232e:	4c c0       	rjmp	.+152    	; 0x23c8 <gc_execute_block+0x16e>
    2330:	c7 c0       	rjmp	.+398    	; 0x24c0 <gc_execute_block+0x266>
    2332:	62 30       	cpi	r22, 0x02	; 2
    2334:	71 05       	cpc	r23, r1
    2336:	09 f4       	brne	.+2      	; 0x233a <gc_execute_block+0xe0>
    2338:	51 c0       	rjmp	.+162    	; 0x23dc <gc_execute_block+0x182>
    233a:	63 30       	cpi	r22, 0x03	; 3
    233c:	71 05       	cpc	r23, r1
    233e:	09 f0       	breq	.+2      	; 0x2342 <gc_execute_block+0xe8>
    2340:	bf c0       	rjmp	.+382    	; 0x24c0 <gc_execute_block+0x266>
    2342:	51 c0       	rjmp	.+162    	; 0x23e6 <gc_execute_block+0x18c>
    2344:	62 31       	cpi	r22, 0x12	; 18
    2346:	71 05       	cpc	r23, r1
    2348:	09 f4       	brne	.+2      	; 0x234c <gc_execute_block+0xf2>
    234a:	5c c0       	rjmp	.+184    	; 0x2404 <gc_execute_block+0x1aa>
    234c:	63 31       	cpi	r22, 0x13	; 19
    234e:	71 05       	cpc	r23, r1
    2350:	2c f4       	brge	.+10     	; 0x235c <gc_execute_block+0x102>
    2352:	61 31       	cpi	r22, 0x11	; 17
    2354:	71 05       	cpc	r23, r1
    2356:	09 f0       	breq	.+2      	; 0x235a <gc_execute_block+0x100>
    2358:	b3 c0       	rjmp	.+358    	; 0x24c0 <gc_execute_block+0x266>
    235a:	4d c0       	rjmp	.+154    	; 0x23f6 <gc_execute_block+0x19c>
    235c:	63 31       	cpi	r22, 0x13	; 19
    235e:	71 05       	cpc	r23, r1
    2360:	09 f4       	brne	.+2      	; 0x2364 <gc_execute_block+0x10a>
    2362:	57 c0       	rjmp	.+174    	; 0x2412 <gc_execute_block+0x1b8>
    2364:	64 31       	cpi	r22, 0x14	; 20
    2366:	71 05       	cpc	r23, r1
    2368:	09 f0       	breq	.+2      	; 0x236c <gc_execute_block+0x112>
    236a:	aa c0       	rjmp	.+340    	; 0x24c0 <gc_execute_block+0x266>
    236c:	59 c0       	rjmp	.+178    	; 0x2420 <gc_execute_block+0x1c6>
    236e:	6a 35       	cpi	r22, 0x5A	; 90
    2370:	71 05       	cpc	r23, r1
    2372:	09 f4       	brne	.+2      	; 0x2376 <gc_execute_block+0x11c>
    2374:	64 c0       	rjmp	.+200    	; 0x243e <gc_execute_block+0x1e4>
    2376:	6b 35       	cpi	r22, 0x5B	; 91
    2378:	71 05       	cpc	r23, r1
    237a:	ac f4       	brge	.+42     	; 0x23a6 <gc_execute_block+0x14c>
    237c:	6e 31       	cpi	r22, 0x1E	; 30
    237e:	71 05       	cpc	r23, r1
    2380:	09 f4       	brne	.+2      	; 0x2384 <gc_execute_block+0x12a>
    2382:	54 c0       	rjmp	.+168    	; 0x242c <gc_execute_block+0x1d2>
    2384:	6f 31       	cpi	r22, 0x1F	; 31
    2386:	71 05       	cpc	r23, r1
    2388:	2c f4       	brge	.+10     	; 0x2394 <gc_execute_block+0x13a>
    238a:	6c 31       	cpi	r22, 0x1C	; 28
    238c:	71 05       	cpc	r23, r1
    238e:	09 f0       	breq	.+2      	; 0x2392 <gc_execute_block+0x138>
    2390:	97 c0       	rjmp	.+302    	; 0x24c0 <gc_execute_block+0x266>
    2392:	4c c0       	rjmp	.+152    	; 0x242c <gc_execute_block+0x1d2>
    2394:	65 33       	cpi	r22, 0x35	; 53
    2396:	71 05       	cpc	r23, r1
    2398:	09 f4       	brne	.+2      	; 0x239c <gc_execute_block+0x142>
    239a:	4b c0       	rjmp	.+150    	; 0x2432 <gc_execute_block+0x1d8>
    239c:	60 35       	cpi	r22, 0x50	; 80
    239e:	71 05       	cpc	r23, r1
    23a0:	09 f0       	breq	.+2      	; 0x23a4 <gc_execute_block+0x14a>
    23a2:	8e c0       	rjmp	.+284    	; 0x24c0 <gc_execute_block+0x266>
    23a4:	49 c0       	rjmp	.+146    	; 0x2438 <gc_execute_block+0x1de>
    23a6:	6c 35       	cpi	r22, 0x5C	; 92
    23a8:	71 05       	cpc	r23, r1
    23aa:	09 f4       	brne	.+2      	; 0x23ae <gc_execute_block+0x154>
    23ac:	4e c0       	rjmp	.+156    	; 0x244a <gc_execute_block+0x1f0>
    23ae:	6c 35       	cpi	r22, 0x5C	; 92
    23b0:	71 05       	cpc	r23, r1
    23b2:	0c f4       	brge	.+2      	; 0x23b6 <gc_execute_block+0x15c>
    23b4:	47 c0       	rjmp	.+142    	; 0x2444 <gc_execute_block+0x1ea>
    23b6:	6d 35       	cpi	r22, 0x5D	; 93
    23b8:	71 05       	cpc	r23, r1
    23ba:	09 f4       	brne	.+2      	; 0x23be <gc_execute_block+0x164>
    23bc:	49 c0       	rjmp	.+146    	; 0x2450 <gc_execute_block+0x1f6>
    23be:	6e 35       	cpi	r22, 0x5E	; 94
    23c0:	71 05       	cpc	r23, r1
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <gc_execute_block+0x16c>
    23c4:	7d c0       	rjmp	.+250    	; 0x24c0 <gc_execute_block+0x266>
    23c6:	47 c0       	rjmp	.+142    	; 0x2456 <gc_execute_block+0x1fc>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    23c8:	f0 92 83 21 	sts	0x2183, r15
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    23cc:	10 92 39 21 	sts	0x2139, r1
    23d0:	88 c0       	rjmp	.+272    	; 0x24e2 <gc_execute_block+0x288>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    23d2:	f0 92 83 21 	sts	0x2183, r15
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    23d6:	f0 92 39 21 	sts	0x2139, r15
    23da:	83 c0       	rjmp	.+262    	; 0x24e2 <gc_execute_block+0x288>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    23dc:	f0 92 83 21 	sts	0x2183, r15
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    23e0:	e0 92 39 21 	sts	0x2139, r14
    23e4:	7e c0       	rjmp	.+252    	; 0x24e2 <gc_execute_block+0x288>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    23e6:	f0 92 83 21 	sts	0x2183, r15
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    23ea:	d0 92 39 21 	sts	0x2139, r13
    23ee:	79 c0       	rjmp	.+242    	; 0x24e2 <gc_execute_block+0x288>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    23f0:	e0 92 83 21 	sts	0x2183, r14
    23f4:	76 c0       	rjmp	.+236    	; 0x24e2 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23f6:	10 92 7b 21 	sts	0x217B, r1
	gc.plane_axis_1 = axis_1;
    23fa:	f0 92 7c 21 	sts	0x217C, r15
	gc.plane_axis_2 = axis_2;
    23fe:	e0 92 7d 21 	sts	0x217D, r14
    2402:	6f c0       	rjmp	.+222    	; 0x24e2 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    2404:	10 92 7b 21 	sts	0x217B, r1
	gc.plane_axis_1 = axis_1;
    2408:	e0 92 7c 21 	sts	0x217C, r14
	gc.plane_axis_2 = axis_2;
    240c:	f0 92 7d 21 	sts	0x217D, r15
    2410:	68 c0       	rjmp	.+208    	; 0x24e2 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    2412:	f0 92 7b 21 	sts	0x217B, r15
	gc.plane_axis_1 = axis_1;
    2416:	e0 92 7c 21 	sts	0x217C, r14
	gc.plane_axis_2 = axis_2;
    241a:	10 92 7d 21 	sts	0x217D, r1
    241e:	61 c0       	rjmp	.+194    	; 0x24e2 <gc_execute_block+0x288>

					case 17: { select_plane(X, Y, Z); break; }
					case 18: { select_plane(X, Z, Y); break; }
					case 19: { select_plane(Y, Z, X); break; }

					case 20: { gc.inches_mode = TRUE; break; }
    2420:	f0 92 3b 21 	sts	0x213B, r15
    2424:	5e c0       	rjmp	.+188    	; 0x24e2 <gc_execute_block+0x288>
					case 21: { gc.inches_mode = FALSE; break; }
    2426:	10 92 3b 21 	sts	0x213B, r1
    242a:	5b c0       	rjmp	.+182    	; 0x24e2 <gc_execute_block+0x288>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    242c:	d0 92 83 21 	sts	0x2183, r13
    2430:	58 c0       	rjmp	.+176    	; 0x24e2 <gc_execute_block+0x288>

					case 53: { gc.absolute_override = TRUE; break; }
    2432:	f0 92 82 21 	sts	0x2182, r15
    2436:	55 c0       	rjmp	.+170    	; 0x24e2 <gc_execute_block+0x288>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2438:	60 92 39 21 	sts	0x2139, r6
    243c:	52 c0       	rjmp	.+164    	; 0x24e2 <gc_execute_block+0x288>
					case 90: { gc.absolute_mode = TRUE; break; }
    243e:	f0 92 3c 21 	sts	0x213C, r15
    2442:	4f c0       	rjmp	.+158    	; 0x24e2 <gc_execute_block+0x288>
					case 91: { gc.absolute_mode = FALSE; break; }
    2444:	10 92 3c 21 	sts	0x213C, r1
    2448:	4c c0       	rjmp	.+152    	; 0x24e2 <gc_execute_block+0x288>
					case 92: { gc.set_origin_mode = TRUE; break; }
    244a:	f0 92 3e 21 	sts	0x213E, r15
    244e:	49 c0       	rjmp	.+146    	; 0x24e2 <gc_execute_block+0x288>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    2450:	f0 92 3a 21 	sts	0x213A, r15
    2454:	46 c0       	rjmp	.+140    	; 0x24e2 <gc_execute_block+0x288>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2456:	10 92 3a 21 	sts	0x213A, r1
    245a:	43 c0       	rjmp	.+134    	; 0x24e2 <gc_execute_block+0x288>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    245c:	60 91 30 21 	lds	r22, 0x2130
    2460:	70 91 31 21 	lds	r23, 0x2131
    2464:	80 91 32 21 	lds	r24, 0x2132
    2468:	90 91 33 21 	lds	r25, 0x2133
    246c:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <__fixsfsi>
    2470:	63 30       	cpi	r22, 0x03	; 3
    2472:	71 05       	cpc	r23, r1
    2474:	e1 f0       	breq	.+56     	; 0x24ae <gc_execute_block+0x254>
    2476:	64 30       	cpi	r22, 0x04	; 4
    2478:	71 05       	cpc	r23, r1
    247a:	34 f4       	brge	.+12     	; 0x2488 <gc_execute_block+0x22e>
    247c:	77 fd       	sbrc	r23, 7
    247e:	20 c0       	rjmp	.+64     	; 0x24c0 <gc_execute_block+0x266>
    2480:	62 30       	cpi	r22, 0x02	; 2
    2482:	71 05       	cpc	r23, r1
    2484:	74 f0       	brlt	.+28     	; 0x24a2 <gc_execute_block+0x248>
    2486:	10 c0       	rjmp	.+32     	; 0x24a8 <gc_execute_block+0x24e>
    2488:	65 30       	cpi	r22, 0x05	; 5
    248a:	71 05       	cpc	r23, r1
    248c:	b1 f0       	breq	.+44     	; 0x24ba <gc_execute_block+0x260>
    248e:	65 30       	cpi	r22, 0x05	; 5
    2490:	71 05       	cpc	r23, r1
    2492:	84 f0       	brlt	.+32     	; 0x24b4 <gc_execute_block+0x25a>
    2494:	6e 31       	cpi	r22, 0x1E	; 30
    2496:	71 05       	cpc	r23, r1
    2498:	39 f0       	breq	.+14     	; 0x24a8 <gc_execute_block+0x24e>
    249a:	6c 33       	cpi	r22, 0x3C	; 60
    249c:	71 05       	cpc	r23, r1
    249e:	81 f4       	brne	.+32     	; 0x24c0 <gc_execute_block+0x266>
    24a0:	03 c0       	rjmp	.+6      	; 0x24a8 <gc_execute_block+0x24e>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    24a2:	f0 92 38 21 	sts	0x2138, r15
    24a6:	1d c0       	rjmp	.+58     	; 0x24e2 <gc_execute_block+0x288>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    24a8:	e0 92 38 21 	sts	0x2138, r14
    24ac:	1a c0       	rjmp	.+52     	; 0x24e2 <gc_execute_block+0x288>
					case 3: gc.spindle_direction = 1; break;
    24ae:	f0 92 7f 21 	sts	0x217F, r15
    24b2:	17 c0       	rjmp	.+46     	; 0x24e2 <gc_execute_block+0x288>
					case 4: gc.spindle_direction = -1; break;
    24b4:	70 92 7f 21 	sts	0x217F, r7
    24b8:	14 c0       	rjmp	.+40     	; 0x24e2 <gc_execute_block+0x288>
					case 5: gc.spindle_direction = 0; break;
    24ba:	10 92 7f 21 	sts	0x217F, r1
    24be:	11 c0       	rjmp	.+34     	; 0x24e2 <gc_execute_block+0x288>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    24c0:	c0 92 2e 21 	sts	0x212E, r12
    24c4:	0e c0       	rjmp	.+28     	; 0x24e2 <gc_execute_block+0x288>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    24c6:	60 91 30 21 	lds	r22, 0x2130
    24ca:	70 91 31 21 	lds	r23, 0x2131
    24ce:	80 91 32 21 	lds	r24, 0x2132
    24d2:	90 91 33 21 	lds	r25, 0x2133
    24d6:	0e 94 e1 47 	call	0x8fc2	; 0x8fc2 <trunc>
    24da:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__fixunssfsi>
    24de:	60 93 7e 21 	sts	0x217E, r22
		}
		if(gc.status) {
    24e2:	80 91 2e 21 	lds	r24, 0x212E
    24e6:	88 23       	and	r24, r24
    24e8:	69 f4       	brne	.+26     	; 0x2504 <gc_execute_block+0x2aa>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    24ea:	8f e2       	ldi	r24, 0x2F	; 47
    24ec:	91 e2       	ldi	r25, 0x21	; 33
    24ee:	60 e3       	ldi	r22, 0x30	; 48
    24f0:	71 e2       	ldi	r23, 0x21	; 33
    24f2:	44 e3       	ldi	r20, 0x34	; 52
    24f4:	51 e2       	ldi	r21, 0x21	; 33
    24f6:	94 01       	movw	r18, r8
    24f8:	85 01       	movw	r16, r10
    24fa:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_gc_next_statement>
    24fe:	89 2b       	or	r24, r25
    2500:	09 f0       	breq	.+2      	; 0x2504 <gc_execute_block+0x2aa>
    2502:	e9 ce       	rjmp	.-558    	; 0x22d6 <gc_execute_block+0x7c>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    2504:	80 91 2e 21 	lds	r24, 0x212E
    2508:	88 23       	and	r24, r24
    250a:	09 f0       	breq	.+2      	; 0x250e <gc_execute_block+0x2b4>
    250c:	96 c3       	rjmp	.+1836   	; 0x2c3a <gc_execute_block+0x9e0>
		return(gc.status); 
	}

	i = 0;
    250e:	19 82       	std	Y+1, r1	; 0x01
    2510:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    2512:	ef e6       	ldi	r30, 0x6F	; 111
    2514:	f1 e2       	ldi	r31, 0x21	; 33
    2516:	8c e0       	ldi	r24, 0x0C	; 12
    2518:	df 01       	movw	r26, r30
    251a:	1d 92       	st	X+, r1
    251c:	8a 95       	dec	r24
    251e:	e9 f7       	brne	.-6      	; 0x251a <gc_execute_block+0x2c0>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    2520:	df 01       	movw	r26, r30
    2522:	1c 97       	sbiw	r26, 0x0c	; 12
    2524:	78 97       	sbiw	r30, 0x18	; 24
    2526:	8c e0       	ldi	r24, 0x0C	; 12
    2528:	01 90       	ld	r0, Z+
    252a:	0d 92       	st	X+, r0
    252c:	81 50       	subi	r24, 0x01	; 1
    252e:	e1 f7       	brne	.-8      	; 0x2528 <gc_execute_block+0x2ce>
    2530:	c6 c0       	rjmp	.+396    	; 0x26be <gc_execute_block+0x464>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2532:	c0 90 30 21 	lds	r12, 0x2130
    2536:	d0 90 31 21 	lds	r13, 0x2131
    253a:	e0 90 32 21 	lds	r14, 0x2132
    253e:	f0 90 33 21 	lds	r15, 0x2133
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    2542:	80 91 3b 21 	lds	r24, 0x213B
    2546:	88 23       	and	r24, r24
    2548:	19 f4       	brne	.+6      	; 0x2550 <gc_execute_block+0x2f6>
    254a:	a7 01       	movw	r20, r14
    254c:	96 01       	movw	r18, r12
    254e:	0a c0       	rjmp	.+20     	; 0x2564 <gc_execute_block+0x30a>
    2550:	c7 01       	movw	r24, r14
    2552:	b6 01       	movw	r22, r12
    2554:	25 e8       	ldi	r18, 0x85	; 133
    2556:	32 e4       	ldi	r19, 0x42	; 66
    2558:	41 e2       	ldi	r20, 0x21	; 33
    255a:	5d e3       	ldi	r21, 0x3D	; 61
    255c:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    2560:	9b 01       	movw	r18, r22
    2562:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2564:	20 93 4f 21 	sts	0x214F, r18
    2568:	30 93 50 21 	sts	0x2150, r19
    256c:	40 93 51 21 	sts	0x2151, r20
    2570:	50 93 52 21 	sts	0x2152, r21
		switch(gc.letter) {
    2574:	00 91 2f 21 	lds	r16, 0x212F
    2578:	00 35       	cpi	r16, 0x50	; 80
    257a:	09 f4       	brne	.+2      	; 0x257e <gc_execute_block+0x324>
    257c:	47 c0       	rjmp	.+142    	; 0x260c <gc_execute_block+0x3b2>
    257e:	01 35       	cpi	r16, 0x51	; 81
    2580:	58 f4       	brcc	.+22     	; 0x2598 <gc_execute_block+0x33e>
    2582:	06 34       	cpi	r16, 0x46	; 70
    2584:	c1 f0       	breq	.+48     	; 0x25b6 <gc_execute_block+0x35c>
    2586:	06 34       	cpi	r16, 0x46	; 70
    2588:	08 f4       	brcc	.+2      	; 0x258c <gc_execute_block+0x332>
    258a:	9f c0       	rjmp	.+318    	; 0x26ca <gc_execute_block+0x470>
    258c:	80 2f       	mov	r24, r16
    258e:	89 54       	subi	r24, 0x49	; 73
    2590:	83 30       	cpi	r24, 0x03	; 3
    2592:	08 f0       	brcs	.+2      	; 0x2596 <gc_execute_block+0x33c>
    2594:	9a c0       	rjmp	.+308    	; 0x26ca <gc_execute_block+0x470>
    2596:	2d c0       	rjmp	.+90     	; 0x25f2 <gc_execute_block+0x398>
    2598:	03 35       	cpi	r16, 0x53	; 83
    259a:	09 f4       	brne	.+2      	; 0x259e <gc_execute_block+0x344>
    259c:	4b c0       	rjmp	.+150    	; 0x2634 <gc_execute_block+0x3da>
    259e:	04 35       	cpi	r16, 0x54	; 84
    25a0:	20 f4       	brcc	.+8      	; 0x25aa <gc_execute_block+0x350>
    25a2:	02 35       	cpi	r16, 0x52	; 82
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <gc_execute_block+0x34e>
    25a6:	91 c0       	rjmp	.+290    	; 0x26ca <gc_execute_block+0x470>
    25a8:	3a c0       	rjmp	.+116    	; 0x261e <gc_execute_block+0x3c4>
    25aa:	80 2f       	mov	r24, r16
    25ac:	88 55       	subi	r24, 0x58	; 88
    25ae:	83 30       	cpi	r24, 0x03	; 3
    25b0:	08 f0       	brcs	.+2      	; 0x25b4 <gc_execute_block+0x35a>
    25b2:	8b c0       	rjmp	.+278    	; 0x26ca <gc_execute_block+0x470>
    25b4:	48 c0       	rjmp	.+144    	; 0x2646 <gc_execute_block+0x3ec>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    25b6:	80 91 3a 21 	lds	r24, 0x213A
    25ba:	88 23       	and	r24, r24
    25bc:	49 f0       	breq	.+18     	; 0x25d0 <gc_execute_block+0x376>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    25be:	20 93 53 21 	sts	0x2153, r18
    25c2:	30 93 54 21 	sts	0x2154, r19
    25c6:	40 93 55 21 	sts	0x2155, r20
    25ca:	50 93 56 21 	sts	0x2156, r21
    25ce:	7d c0       	rjmp	.+250    	; 0x26ca <gc_execute_block+0x470>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    25d0:	ca 01       	movw	r24, r20
    25d2:	b9 01       	movw	r22, r18
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e7       	ldi	r20, 0x70	; 112
    25da:	52 e4       	ldi	r21, 0x42	; 66
    25dc:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    25e0:	60 93 47 21 	sts	0x2147, r22
    25e4:	70 93 48 21 	sts	0x2148, r23
    25e8:	80 93 49 21 	sts	0x2149, r24
    25ec:	90 93 4a 21 	sts	0x214A, r25
    25f0:	6c c0       	rjmp	.+216    	; 0x26ca <gc_execute_block+0x470>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    25f2:	e0 2f       	mov	r30, r16
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	ee 0f       	add	r30, r30
    25f8:	ff 1f       	adc	r31, r31
    25fa:	ee 0f       	add	r30, r30
    25fc:	ff 1f       	adc	r31, r31
    25fe:	e5 5b       	subi	r30, 0xB5	; 181
    2600:	ff 4d       	sbci	r31, 0xDF	; 223
    2602:	20 83       	st	Z, r18
    2604:	31 83       	std	Z+1, r19	; 0x01
    2606:	42 83       	std	Z+2, r20	; 0x02
    2608:	53 83       	std	Z+3, r21	; 0x03
    260a:	5f c0       	rjmp	.+190    	; 0x26ca <gc_execute_block+0x470>
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
    260c:	c0 92 3f 21 	sts	0x213F, r12
    2610:	d0 92 40 21 	sts	0x2140, r13
    2614:	e0 92 41 21 	sts	0x2141, r14
    2618:	f0 92 42 21 	sts	0x2142, r15
    261c:	56 c0       	rjmp	.+172    	; 0x26ca <gc_execute_block+0x470>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    261e:	20 93 43 21 	sts	0x2143, r18
    2622:	30 93 44 21 	sts	0x2144, r19
    2626:	40 93 45 21 	sts	0x2145, r20
    262a:	50 93 46 21 	sts	0x2146, r21
    262e:	70 92 3d 21 	sts	0x213D, r7
    2632:	4b c0       	rjmp	.+150    	; 0x26ca <gc_execute_block+0x470>
			case 'S': gc.spindle_speed = gc.value; break;
    2634:	c7 01       	movw	r24, r14
    2636:	b6 01       	movw	r22, r12
    2638:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <__fixsfsi>
    263c:	60 93 80 21 	sts	0x2180, r22
    2640:	70 93 81 21 	sts	0x2181, r23
    2644:	42 c0       	rjmp	.+132    	; 0x26ca <gc_execute_block+0x470>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2646:	80 91 3e 21 	lds	r24, 0x213E
    264a:	88 23       	and	r24, r24
    264c:	69 f0       	breq	.+26     	; 0x2668 <gc_execute_block+0x40e>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    264e:	e0 2f       	mov	r30, r16
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	ee 0f       	add	r30, r30
    2654:	ff 1f       	adc	r31, r31
    2656:	ee 0f       	add	r30, r30
    2658:	ff 1f       	adc	r31, r31
    265a:	e2 53       	subi	r30, 0x32	; 50
    265c:	f0 4e       	sbci	r31, 0xE0	; 224
    265e:	21 a7       	std	Z+41, r18	; 0x29
    2660:	32 a7       	std	Z+42, r19	; 0x2a
    2662:	43 a7       	std	Z+43, r20	; 0x2b
    2664:	54 a7       	std	Z+44, r21	; 0x2c
    2666:	31 c0       	rjmp	.+98     	; 0x26ca <gc_execute_block+0x470>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2668:	80 91 3c 21 	lds	r24, 0x213C
    266c:	88 23       	and	r24, r24
    266e:	21 f4       	brne	.+8      	; 0x2678 <gc_execute_block+0x41e>
    2670:	80 91 82 21 	lds	r24, 0x2182
    2674:	88 23       	and	r24, r24
    2676:	69 f0       	breq	.+26     	; 0x2692 <gc_execute_block+0x438>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    2678:	e0 2f       	mov	r30, r16
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	ee 0f       	add	r30, r30
    267e:	ff 1f       	adc	r31, r31
    2680:	ee 0f       	add	r30, r30
    2682:	ff 1f       	adc	r31, r31
    2684:	e2 53       	subi	r30, 0x32	; 50
    2686:	f0 4e       	sbci	r31, 0xE0	; 224
    2688:	25 ab       	std	Z+53, r18	; 0x35
    268a:	36 ab       	std	Z+54, r19	; 0x36
    268c:	47 ab       	std	Z+55, r20	; 0x37
    268e:	50 af       	std	Z+56, r21	; 0x38
    2690:	1c c0       	rjmp	.+56     	; 0x26ca <gc_execute_block+0x470>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    2692:	10 e0       	ldi	r17, 0x00	; 0
    2694:	00 0f       	add	r16, r16
    2696:	11 1f       	adc	r17, r17
    2698:	00 0f       	add	r16, r16
    269a:	11 1f       	adc	r17, r17
    269c:	02 53       	subi	r16, 0x32	; 50
    269e:	10 4e       	sbci	r17, 0xE0	; 224
    26a0:	f8 01       	movw	r30, r16
    26a2:	65 a9       	ldd	r22, Z+53	; 0x35
    26a4:	76 a9       	ldd	r23, Z+54	; 0x36
    26a6:	87 a9       	ldd	r24, Z+55	; 0x37
    26a8:	90 ad       	ldd	r25, Z+56	; 0x38
    26aa:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__addsf3>
    26ae:	d8 01       	movw	r26, r16
    26b0:	d5 96       	adiw	r26, 0x35	; 53
    26b2:	6d 93       	st	X+, r22
    26b4:	7d 93       	st	X+, r23
    26b6:	8d 93       	st	X+, r24
    26b8:	9c 93       	st	X, r25
    26ba:	d8 97       	sbiw	r26, 0x38	; 56
    26bc:	06 c0       	rjmp	.+12     	; 0x26ca <gc_execute_block+0x470>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    26be:	5e 01       	movw	r10, r28
    26c0:	08 94       	sec
    26c2:	a1 1c       	adc	r10, r1
    26c4:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    26c6:	77 24       	eor	r7, r7
    26c8:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    26ca:	8f e2       	ldi	r24, 0x2F	; 47
    26cc:	91 e2       	ldi	r25, 0x21	; 33
    26ce:	60 e3       	ldi	r22, 0x30	; 48
    26d0:	71 e2       	ldi	r23, 0x21	; 33
    26d2:	44 e3       	ldi	r20, 0x34	; 52
    26d4:	51 e2       	ldi	r21, 0x21	; 33
    26d6:	94 01       	movw	r18, r8
    26d8:	85 01       	movw	r16, r10
    26da:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_gc_next_statement>
    26de:	89 2b       	or	r24, r25
    26e0:	09 f0       	breq	.+2      	; 0x26e4 <gc_execute_block+0x48a>
    26e2:	27 cf       	rjmp	.-434    	; 0x2532 <gc_execute_block+0x2d8>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    26e4:	80 91 2e 21 	lds	r24, 0x212E
    26e8:	88 23       	and	r24, r24
    26ea:	09 f0       	breq	.+2      	; 0x26ee <gc_execute_block+0x494>
    26ec:	a6 c2       	rjmp	.+1356   	; 0x2c3a <gc_execute_block+0x9e0>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    26ee:	80 91 7f 21 	lds	r24, 0x217F
    26f2:	88 23       	and	r24, r24
    26f4:	71 f0       	breq	.+28     	; 0x2712 <gc_execute_block+0x4b8>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    26f6:	40 91 80 21 	lds	r20, 0x2180
    26fa:	50 91 81 21 	lds	r21, 0x2181
    26fe:	66 27       	eor	r22, r22
    2700:	57 fd       	sbrc	r21, 7
    2702:	60 95       	com	r22
    2704:	76 2f       	mov	r23, r22
    2706:	99 27       	eor	r25, r25
    2708:	87 fd       	sbrc	r24, 7
    270a:	90 95       	com	r25
    270c:	0e 94 23 24 	call	0x4846	; 0x4846 <spindle_run>
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <gc_execute_block+0x4bc>
	} else {
		spindle_stop();
    2712:	0e 94 33 24 	call	0x4866	; 0x4866 <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    2716:	80 91 83 21 	lds	r24, 0x2183
    271a:	82 30       	cpi	r24, 0x02	; 2
    271c:	49 f0       	breq	.+18     	; 0x2730 <gc_execute_block+0x4d6>
    271e:	83 30       	cpi	r24, 0x03	; 3
    2720:	21 f0       	breq	.+8      	; 0x272a <gc_execute_block+0x4d0>
    2722:	81 30       	cpi	r24, 0x01	; 1
    2724:	09 f0       	breq	.+2      	; 0x2728 <gc_execute_block+0x4ce>
    2726:	7a c2       	rjmp	.+1268   	; 0x2c1c <gc_execute_block+0x9c2>
    2728:	0e c0       	rjmp	.+28     	; 0x2746 <gc_execute_block+0x4ec>
		case NEXT_ACTION_DEFAULT: break;		// nothing to do here
    	case NEXT_ACTION_GO_HOME: mc_go_home(); break;
    272a:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <mc_go_home>
    272e:	76 c2       	rjmp	.+1260   	; 0x2c1c <gc_execute_block+0x9c2>
		case NEXT_ACTION_DWELL: mc_dwell(gc.dwell_time); break;
    2730:	60 91 3f 21 	lds	r22, 0x213F
    2734:	70 91 40 21 	lds	r23, 0x2140
    2738:	80 91 41 21 	lds	r24, 0x2141
    273c:	90 91 42 21 	lds	r25, 0x2142
    2740:	0e 94 43 1c 	call	0x3886	; 0x3886 <mc_dwell>
    2744:	6b c2       	rjmp	.+1238   	; 0x2c1c <gc_execute_block+0x9c2>
		case NEXT_ACTION_MOTION: 
			switch (gc.motion_mode) {
    2746:	b0 91 39 21 	lds	r27, 0x2139
    274a:	b8 8f       	std	Y+24, r27	; 0x18
    274c:	b2 30       	cpi	r27, 0x02	; 2
    274e:	20 f0       	brcs	.+8      	; 0x2758 <gc_execute_block+0x4fe>
    2750:	b4 30       	cpi	r27, 0x04	; 4
    2752:	08 f0       	brcs	.+2      	; 0x2756 <gc_execute_block+0x4fc>
    2754:	63 c2       	rjmp	.+1222   	; 0x2c1c <gc_execute_block+0x9c2>
    2756:	31 c0       	rjmp	.+98     	; 0x27ba <gc_execute_block+0x560>
				case MOTION_MODE_CANCEL: break;
				case MOTION_MODE_RAPID_LINEAR:
				case MOTION_MODE_LINEAR:
					gc.status = mc_line_nonblock(gc.target[X], gc.target[Y], gc.target[Z], 
    2758:	60 91 63 21 	lds	r22, 0x2163
    275c:	70 91 64 21 	lds	r23, 0x2164
    2760:	80 91 65 21 	lds	r24, 0x2165
    2764:	90 91 66 21 	lds	r25, 0x2166
    2768:	20 91 67 21 	lds	r18, 0x2167
    276c:	30 91 68 21 	lds	r19, 0x2168
    2770:	40 91 69 21 	lds	r20, 0x2169
    2774:	50 91 6a 21 	lds	r21, 0x216A
    2778:	e0 90 6b 21 	lds	r14, 0x216B
    277c:	f0 90 6c 21 	lds	r15, 0x216C
    2780:	00 91 6d 21 	lds	r16, 0x216D
    2784:	10 91 6e 21 	lds	r17, 0x216E
    2788:	80 90 3a 21 	lds	r8, 0x213A
    278c:	88 20       	and	r8, r8
    278e:	49 f0       	breq	.+18     	; 0x27a2 <gc_execute_block+0x548>
    2790:	a0 90 53 21 	lds	r10, 0x2153
    2794:	b0 90 54 21 	lds	r11, 0x2154
    2798:	c0 90 55 21 	lds	r12, 0x2155
    279c:	d0 90 56 21 	lds	r13, 0x2156
    27a0:	08 c0       	rjmp	.+16     	; 0x27b2 <gc_execute_block+0x558>
    27a2:	a0 90 47 21 	lds	r10, 0x2147
    27a6:	b0 90 48 21 	lds	r11, 0x2148
    27aa:	c0 90 49 21 	lds	r12, 0x2149
    27ae:	d0 90 4a 21 	lds	r13, 0x214A
    27b2:	99 24       	eor	r9, r9
    27b4:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <mc_line_nonblock>
    27b8:	6b c1       	rjmp	.+726    	; 0x2a90 <gc_execute_block+0x836>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    27ba:	80 91 3d 21 	lds	r24, 0x213D
    27be:	88 23       	and	r24, r24
    27c0:	09 f4       	brne	.+2      	; 0x27c4 <gc_execute_block+0x56a>
    27c2:	e8 c0       	rjmp	.+464    	; 0x2994 <gc_execute_block+0x73a>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    27c4:	e0 91 7b 21 	lds	r30, 0x217B
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	ee 0f       	add	r30, r30
    27cc:	ff 1f       	adc	r31, r31
    27ce:	ee 0f       	add	r30, r30
    27d0:	ff 1f       	adc	r31, r31
    27d2:	e2 5d       	subi	r30, 0xD2	; 210
    27d4:	fe 4d       	sbci	r31, 0xDE	; 222
    27d6:	65 a9       	ldd	r22, Z+53	; 0x35
    27d8:	76 a9       	ldd	r23, Z+54	; 0x36
    27da:	87 a9       	ldd	r24, Z+55	; 0x37
    27dc:	90 ad       	ldd	r25, Z+56	; 0x38
    27de:	21 a5       	ldd	r18, Z+41	; 0x29
    27e0:	32 a5       	ldd	r19, Z+42	; 0x2a
    27e2:	43 a5       	ldd	r20, Z+43	; 0x2b
    27e4:	54 a5       	ldd	r21, Z+44	; 0x2c
    27e6:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    27ea:	6f 83       	std	Y+7, r22	; 0x07
    27ec:	78 87       	std	Y+8, r23	; 0x08
    27ee:	89 87       	std	Y+9, r24	; 0x09
    27f0:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    27f2:	e0 91 7c 21 	lds	r30, 0x217C
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	ee 0f       	add	r30, r30
    27fe:	ff 1f       	adc	r31, r31
    2800:	e2 5d       	subi	r30, 0xD2	; 210
    2802:	fe 4d       	sbci	r31, 0xDE	; 222
    2804:	65 a9       	ldd	r22, Z+53	; 0x35
    2806:	76 a9       	ldd	r23, Z+54	; 0x36
    2808:	87 a9       	ldd	r24, Z+55	; 0x37
    280a:	90 ad       	ldd	r25, Z+56	; 0x38
    280c:	21 a5       	ldd	r18, Z+41	; 0x29
    280e:	32 a5       	ldd	r19, Z+42	; 0x2a
    2810:	43 a5       	ldd	r20, Z+43	; 0x2b
    2812:	54 a5       	ldd	r21, Z+44	; 0x2c
    2814:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    2818:	1b 01       	movw	r2, r22
    281a:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    281c:	10 92 6f 21 	sts	0x216F, r1
    2820:	10 92 70 21 	sts	0x2170, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    2824:	60 90 43 21 	lds	r6, 0x2143
    2828:	70 90 44 21 	lds	r7, 0x2144
    282c:	80 90 45 21 	lds	r8, 0x2145
    2830:	90 90 46 21 	lds	r9, 0x2146
    2834:	c4 01       	movw	r24, r8
    2836:	b3 01       	movw	r22, r6
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e8       	ldi	r20, 0x80	; 128
    283e:	50 e4       	ldi	r21, 0x40	; 64
    2840:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    2844:	a4 01       	movw	r20, r8
    2846:	93 01       	movw	r18, r6
    2848:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    284c:	5b 01       	movw	r10, r22
    284e:	6c 01       	movw	r12, r24
    2850:	6f 81       	ldd	r22, Y+7	; 0x07
    2852:	78 85       	ldd	r23, Y+8	; 0x08
    2854:	89 85       	ldd	r24, Y+9	; 0x09
    2856:	9a 85       	ldd	r25, Y+10	; 0x0a
    2858:	9b 01       	movw	r18, r22
    285a:	ac 01       	movw	r20, r24
    285c:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    2860:	7b 01       	movw	r14, r22
    2862:	8c 01       	movw	r16, r24
    2864:	c2 01       	movw	r24, r4
    2866:	b1 01       	movw	r22, r2
    2868:	a2 01       	movw	r20, r4
    286a:	91 01       	movw	r18, r2
    286c:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    2870:	9b 01       	movw	r18, r22
    2872:	ac 01       	movw	r20, r24
    2874:	c8 01       	movw	r24, r16
    2876:	b7 01       	movw	r22, r14
    2878:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    287c:	9b 01       	movw	r18, r22
    287e:	ac 01       	movw	r20, r24
    2880:	c6 01       	movw	r24, r12
    2882:	b5 01       	movw	r22, r10
    2884:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    2888:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <sqrt>
    288c:	7b 01       	movw	r14, r22
    288e:	8c 01       	movw	r16, r24
    2890:	6f 81       	ldd	r22, Y+7	; 0x07
    2892:	78 85       	ldd	r23, Y+8	; 0x08
    2894:	89 85       	ldd	r24, Y+9	; 0x09
    2896:	9a 85       	ldd	r25, Y+10	; 0x0a
    2898:	a2 01       	movw	r20, r4
    289a:	91 01       	movw	r18, r2
    289c:	0e 94 6e 46 	call	0x8cdc	; 0x8cdc <hypot>
    28a0:	9b 01       	movw	r18, r22
    28a2:	ac 01       	movw	r20, r24
    28a4:	17 fb       	bst	r17, 7
    28a6:	10 95       	com	r17
    28a8:	17 f9       	bld	r17, 7
    28aa:	10 95       	com	r17
    28ac:	c8 01       	movw	r24, r16
    28ae:	b7 01       	movw	r22, r14
    28b0:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    28b4:	7b 01       	movw	r14, r22
    28b6:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    28b8:	a8 01       	movw	r20, r16
    28ba:	97 01       	movw	r18, r14
    28bc:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <__unordsf2>
    28c0:	88 23       	and	r24, r24
    28c2:	11 f0       	breq	.+4      	; 0x28c8 <gc_execute_block+0x66e>
		FAIL(TG_FLOATING_POINT_ERROR); 
    28c4:	8d e0       	ldi	r24, 0x0D	; 13
    28c6:	e4 c0       	rjmp	.+456    	; 0x2a90 <gc_execute_block+0x836>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    28c8:	e8 8d       	ldd	r30, Y+24	; 0x18
    28ca:	e3 30       	cpi	r30, 0x03	; 3
    28cc:	21 f4       	brne	.+8      	; 0x28d6 <gc_execute_block+0x67c>
		h_x2_div_d = -h_x2_div_d;
    28ce:	17 fb       	bst	r17, 7
    28d0:	10 95       	com	r17
    28d2:	17 f9       	bld	r17, 7
    28d4:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    28d6:	c4 01       	movw	r24, r8
    28d8:	b3 01       	movw	r22, r6
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e0       	ldi	r20, 0x00	; 0
    28e0:	50 e0       	ldi	r21, 0x00	; 0
    28e2:	0e 94 71 44 	call	0x88e2	; 0x88e2 <__cmpsf2>
    28e6:	88 23       	and	r24, r24
    28e8:	24 f4       	brge	.+8      	; 0x28f2 <gc_execute_block+0x698>
		h_x2_div_d = -h_x2_div_d; 
    28ea:	17 fb       	bst	r17, 7
    28ec:	10 95       	com	r17
    28ee:	17 f9       	bld	r17, 7
    28f0:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    28f2:	80 91 7b 21 	lds	r24, 0x217B
    28f6:	c8 2e       	mov	r12, r24
    28f8:	dd 24       	eor	r13, r13
    28fa:	cc 0c       	add	r12, r12
    28fc:	dd 1c       	adc	r13, r13
    28fe:	cc 0c       	add	r12, r12
    2900:	dd 1c       	adc	r13, r13
    2902:	2f e6       	ldi	r18, 0x6F	; 111
    2904:	31 e2       	ldi	r19, 0x21	; 33
    2906:	c2 0e       	add	r12, r18
    2908:	d3 1e       	adc	r13, r19
    290a:	c2 01       	movw	r24, r4
    290c:	b1 01       	movw	r22, r2
    290e:	a8 01       	movw	r20, r16
    2910:	97 01       	movw	r18, r14
    2912:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    2916:	9b 01       	movw	r18, r22
    2918:	ac 01       	movw	r20, r24
    291a:	6f 81       	ldd	r22, Y+7	; 0x07
    291c:	78 85       	ldd	r23, Y+8	; 0x08
    291e:	89 85       	ldd	r24, Y+9	; 0x09
    2920:	9a 85       	ldd	r25, Y+10	; 0x0a
    2922:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e0       	ldi	r20, 0x00	; 0
    292c:	5f e3       	ldi	r21, 0x3F	; 63
    292e:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    2932:	d6 01       	movw	r26, r12
    2934:	6d 93       	st	X+, r22
    2936:	7d 93       	st	X+, r23
    2938:	8d 93       	st	X+, r24
    293a:	9c 93       	st	X, r25
    293c:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    293e:	80 91 7c 21 	lds	r24, 0x217C
    2942:	c8 2e       	mov	r12, r24
    2944:	dd 24       	eor	r13, r13
    2946:	cc 0c       	add	r12, r12
    2948:	dd 1c       	adc	r13, r13
    294a:	cc 0c       	add	r12, r12
    294c:	dd 1c       	adc	r13, r13
    294e:	ef e6       	ldi	r30, 0x6F	; 111
    2950:	f1 e2       	ldi	r31, 0x21	; 33
    2952:	ce 0e       	add	r12, r30
    2954:	df 1e       	adc	r13, r31
    2956:	6f 81       	ldd	r22, Y+7	; 0x07
    2958:	78 85       	ldd	r23, Y+8	; 0x08
    295a:	89 85       	ldd	r24, Y+9	; 0x09
    295c:	9a 85       	ldd	r25, Y+10	; 0x0a
    295e:	a8 01       	movw	r20, r16
    2960:	97 01       	movw	r18, r14
    2962:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    2966:	9b 01       	movw	r18, r22
    2968:	ac 01       	movw	r20, r24
    296a:	c2 01       	movw	r24, r4
    296c:	b1 01       	movw	r22, r2
    296e:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__addsf3>
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e0       	ldi	r20, 0x00	; 0
    2978:	5f e3       	ldi	r21, 0x3F	; 63
    297a:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    297e:	d6 01       	movw	r26, r12
    2980:	6d 93       	st	X+, r22
    2982:	7d 93       	st	X+, r23
    2984:	8d 93       	st	X+, r24
    2986:	9c 93       	st	X, r25
    2988:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    298a:	80 91 2e 21 	lds	r24, 0x212E
    298e:	88 23       	and	r24, r24
    2990:	09 f0       	breq	.+2      	; 0x2994 <gc_execute_block+0x73a>
    2992:	44 c1       	rjmp	.+648    	; 0x2c1c <gc_execute_block+0x9c2>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    2994:	e0 91 7b 21 	lds	r30, 0x217B
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	ee 0f       	add	r30, r30
    299c:	ff 1f       	adc	r31, r31
    299e:	ee 0f       	add	r30, r30
    29a0:	ff 1f       	adc	r31, r31
    29a2:	e1 59       	subi	r30, 0x91	; 145
    29a4:	fe 4d       	sbci	r31, 0xDE	; 222
    29a6:	60 81       	ld	r22, Z
    29a8:	71 81       	ldd	r23, Z+1	; 0x01
    29aa:	82 81       	ldd	r24, Z+2	; 0x02
    29ac:	93 81       	ldd	r25, Z+3	; 0x03
    29ae:	90 58       	subi	r25, 0x80	; 128
    29b0:	e0 91 7c 21 	lds	r30, 0x217C
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	ee 0f       	add	r30, r30
    29b8:	ff 1f       	adc	r31, r31
    29ba:	ee 0f       	add	r30, r30
    29bc:	ff 1f       	adc	r31, r31
    29be:	e1 59       	subi	r30, 0x91	; 145
    29c0:	fe 4d       	sbci	r31, 0xDE	; 222
    29c2:	20 81       	ld	r18, Z
    29c4:	31 81       	ldd	r19, Z+1	; 0x01
    29c6:	42 81       	ldd	r20, Z+2	; 0x02
    29c8:	53 81       	ldd	r21, Z+3	; 0x03
    29ca:	50 58       	subi	r21, 0x80	; 128
    29cc:	0e 94 ee 10 	call	0x21dc	; 0x21dc <theta>
    29d0:	6f 87       	std	Y+15, r22	; 0x0f
    29d2:	78 8b       	std	Y+16, r23	; 0x10
    29d4:	89 8b       	std	Y+17, r24	; 0x11
    29d6:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    29d8:	9b 01       	movw	r18, r22
    29da:	ac 01       	movw	r20, r24
    29dc:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <__unordsf2>
    29e0:	88 23       	and	r24, r24
    29e2:	09 f0       	breq	.+2      	; 0x29e6 <gc_execute_block+0x78c>
    29e4:	54 c0       	rjmp	.+168    	; 0x2a8e <gc_execute_block+0x834>
		FAIL(TG_ARC_ERROR); 
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    29e6:	e0 91 7b 21 	lds	r30, 0x217B
    29ea:	0e 2f       	mov	r16, r30
    29ec:	10 e0       	ldi	r17, 0x00	; 0
    29ee:	e0 91 7c 21 	lds	r30, 0x217C
    29f2:	ce 2e       	mov	r12, r30
    29f4:	dd 24       	eor	r13, r13
    29f6:	00 0f       	add	r16, r16
    29f8:	11 1f       	adc	r17, r17
    29fa:	00 0f       	add	r16, r16
    29fc:	11 1f       	adc	r17, r17
    29fe:	02 5d       	subi	r16, 0xD2	; 210
    2a00:	1e 4d       	sbci	r17, 0xDE	; 222
    2a02:	f8 01       	movw	r30, r16
    2a04:	ef 5b       	subi	r30, 0xBF	; 191
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	d8 01       	movw	r26, r16
    2a0a:	d5 96       	adiw	r26, 0x35	; 53
    2a0c:	6d 91       	ld	r22, X+
    2a0e:	7d 91       	ld	r23, X+
    2a10:	8d 91       	ld	r24, X+
    2a12:	9c 91       	ld	r25, X
    2a14:	d8 97       	sbiw	r26, 0x38	; 56
    2a16:	20 81       	ld	r18, Z
    2a18:	31 81       	ldd	r19, Z+1	; 0x01
    2a1a:	42 81       	ldd	r20, Z+2	; 0x02
    2a1c:	53 81       	ldd	r21, Z+3	; 0x03
    2a1e:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    2a22:	f8 01       	movw	r30, r16
    2a24:	21 a5       	ldd	r18, Z+41	; 0x29
    2a26:	32 a5       	ldd	r19, Z+42	; 0x2a
    2a28:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a2a:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a2c:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    2a30:	7b 01       	movw	r14, r22
    2a32:	8c 01       	movw	r16, r24
    2a34:	cc 0c       	add	r12, r12
    2a36:	dd 1c       	adc	r13, r13
    2a38:	cc 0c       	add	r12, r12
    2a3a:	dd 1c       	adc	r13, r13
    2a3c:	2e e2       	ldi	r18, 0x2E	; 46
    2a3e:	31 e2       	ldi	r19, 0x21	; 33
    2a40:	c2 0e       	add	r12, r18
    2a42:	d3 1e       	adc	r13, r19
    2a44:	f6 01       	movw	r30, r12
    2a46:	ef 5b       	subi	r30, 0xBF	; 191
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	d6 01       	movw	r26, r12
    2a4c:	d5 96       	adiw	r26, 0x35	; 53
    2a4e:	6d 91       	ld	r22, X+
    2a50:	7d 91       	ld	r23, X+
    2a52:	8d 91       	ld	r24, X+
    2a54:	9c 91       	ld	r25, X
    2a56:	d8 97       	sbiw	r26, 0x38	; 56
    2a58:	20 81       	ld	r18, Z
    2a5a:	31 81       	ldd	r19, Z+1	; 0x01
    2a5c:	42 81       	ldd	r20, Z+2	; 0x02
    2a5e:	53 81       	ldd	r21, Z+3	; 0x03
    2a60:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    2a64:	f6 01       	movw	r30, r12
    2a66:	21 a5       	ldd	r18, Z+41	; 0x29
    2a68:	32 a5       	ldd	r19, Z+42	; 0x2a
    2a6a:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a6c:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a6e:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    2a72:	9b 01       	movw	r18, r22
    2a74:	ac 01       	movw	r20, r24
    2a76:	c8 01       	movw	r24, r16
    2a78:	b7 01       	movw	r22, r14
    2a7a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <theta>
    2a7e:	7b 01       	movw	r14, r22
    2a80:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    2a82:	a8 01       	movw	r20, r16
    2a84:	97 01       	movw	r18, r14
    2a86:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <__unordsf2>
    2a8a:	88 23       	and	r24, r24
    2a8c:	21 f0       	breq	.+8      	; 0x2a96 <gc_execute_block+0x83c>
		FAIL(TG_ARC_ERROR); 
    2a8e:	8f e0       	ldi	r24, 0x0F	; 15
    2a90:	80 93 2e 21 	sts	0x212E, r24
    2a94:	c3 c0       	rjmp	.+390    	; 0x2c1c <gc_execute_block+0x9c2>
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    2a96:	c8 01       	movw	r24, r16
    2a98:	b7 01       	movw	r22, r14
    2a9a:	2f 85       	ldd	r18, Y+15	; 0x0f
    2a9c:	38 89       	ldd	r19, Y+16	; 0x10
    2a9e:	49 89       	ldd	r20, Y+17	; 0x11
    2aa0:	5a 89       	ldd	r21, Y+18	; 0x12
    2aa2:	0e 94 71 44 	call	0x88e2	; 0x88e2 <__cmpsf2>
    2aa6:	88 23       	and	r24, r24
    2aa8:	54 f4       	brge	.+20     	; 0x2abe <gc_execute_block+0x864>
		theta_end += 2*M_PI;
    2aaa:	c8 01       	movw	r24, r16
    2aac:	b7 01       	movw	r22, r14
    2aae:	2b ed       	ldi	r18, 0xDB	; 219
    2ab0:	3f e0       	ldi	r19, 0x0F	; 15
    2ab2:	49 ec       	ldi	r20, 0xC9	; 201
    2ab4:	50 e4       	ldi	r21, 0x40	; 64
    2ab6:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__addsf3>
    2aba:	7b 01       	movw	r14, r22
    2abc:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    2abe:	c8 01       	movw	r24, r16
    2ac0:	b7 01       	movw	r22, r14
    2ac2:	2f 85       	ldd	r18, Y+15	; 0x0f
    2ac4:	38 89       	ldd	r19, Y+16	; 0x10
    2ac6:	49 89       	ldd	r20, Y+17	; 0x11
    2ac8:	5a 89       	ldd	r21, Y+18	; 0x12
    2aca:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    2ace:	6b 87       	std	Y+11, r22	; 0x0b
    2ad0:	7c 87       	std	Y+12, r23	; 0x0c
    2ad2:	8d 87       	std	Y+13, r24	; 0x0d
    2ad4:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2ad6:	80 91 39 21 	lds	r24, 0x2139
    2ada:	83 30       	cpi	r24, 0x03	; 3
    2adc:	71 f4       	brne	.+28     	; 0x2afa <gc_execute_block+0x8a0>
		angular_travel = angular_travel - 2*M_PI;
    2ade:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae6:	2b ed       	ldi	r18, 0xDB	; 219
    2ae8:	3f e0       	ldi	r19, 0x0F	; 15
    2aea:	49 ec       	ldi	r20, 0xC9	; 201
    2aec:	50 e4       	ldi	r21, 0x40	; 64
    2aee:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    2af2:	6b 87       	std	Y+11, r22	; 0x0b
    2af4:	7c 87       	std	Y+12, r23	; 0x0c
    2af6:	8d 87       	std	Y+13, r24	; 0x0d
    2af8:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2afa:	80 91 7b 21 	lds	r24, 0x217B
    2afe:	28 2f       	mov	r18, r24
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	2d 83       	std	Y+5, r18	; 0x05
    2b04:	3e 83       	std	Y+6, r19	; 0x06
    2b06:	f9 01       	movw	r30, r18
    2b08:	ee 0f       	add	r30, r30
    2b0a:	ff 1f       	adc	r31, r31
    2b0c:	ee 0f       	add	r30, r30
    2b0e:	ff 1f       	adc	r31, r31
    2b10:	e1 59       	subi	r30, 0x91	; 145
    2b12:	fe 4d       	sbci	r31, 0xDE	; 222
    2b14:	e0 80       	ld	r14, Z
    2b16:	f1 80       	ldd	r15, Z+1	; 0x01
    2b18:	02 81       	ldd	r16, Z+2	; 0x02
    2b1a:	13 81       	ldd	r17, Z+3	; 0x03
    2b1c:	80 91 7c 21 	lds	r24, 0x217C
    2b20:	a8 2f       	mov	r26, r24
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	ab 83       	std	Y+3, r26	; 0x03
    2b26:	bc 83       	std	Y+4, r27	; 0x04
    2b28:	fd 01       	movw	r30, r26
    2b2a:	ee 0f       	add	r30, r30
    2b2c:	ff 1f       	adc	r31, r31
    2b2e:	ee 0f       	add	r30, r30
    2b30:	ff 1f       	adc	r31, r31
    2b32:	e1 59       	subi	r30, 0x91	; 145
    2b34:	fe 4d       	sbci	r31, 0xDE	; 222
    2b36:	20 81       	ld	r18, Z
    2b38:	31 81       	ldd	r19, Z+1	; 0x01
    2b3a:	42 81       	ldd	r20, Z+2	; 0x02
    2b3c:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2b3e:	80 91 7d 21 	lds	r24, 0x217D
    2b42:	28 2e       	mov	r2, r24
    2b44:	33 24       	eor	r3, r3
    2b46:	f1 01       	movw	r30, r2
    2b48:	ee 0f       	add	r30, r30
    2b4a:	ff 1f       	adc	r31, r31
    2b4c:	ee 0f       	add	r30, r30
    2b4e:	ff 1f       	adc	r31, r31
    2b50:	e2 5d       	subi	r30, 0xD2	; 210
    2b52:	fe 4d       	sbci	r31, 0xDE	; 222
    2b54:	85 a9       	ldd	r24, Z+53	; 0x35
    2b56:	96 a9       	ldd	r25, Z+54	; 0x36
    2b58:	a7 a9       	ldd	r26, Z+55	; 0x37
    2b5a:	b0 ad       	ldd	r27, Z+56	; 0x38
    2b5c:	8c 8b       	std	Y+20, r24	; 0x14
    2b5e:	9d 8b       	std	Y+21, r25	; 0x15
    2b60:	ae 8b       	std	Y+22, r26	; 0x16
    2b62:	bf 8b       	std	Y+23, r27	; 0x17
    2b64:	a1 a4       	ldd	r10, Z+41	; 0x29
    2b66:	b2 a4       	ldd	r11, Z+42	; 0x2a
    2b68:	c3 a4       	ldd	r12, Z+43	; 0x2b
    2b6a:	d4 a4       	ldd	r13, Z+44	; 0x2c

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    2b6c:	90 91 3a 21 	lds	r25, 0x213A
    2b70:	9b 8b       	std	Y+19, r25	; 0x13
    2b72:	99 23       	and	r25, r25
    2b74:	49 f0       	breq	.+18     	; 0x2b88 <gc_execute_block+0x92e>
    2b76:	40 90 53 21 	lds	r4, 0x2153
    2b7a:	50 90 54 21 	lds	r5, 0x2154
    2b7e:	60 90 55 21 	lds	r6, 0x2155
    2b82:	70 90 56 21 	lds	r7, 0x2156
    2b86:	08 c0       	rjmp	.+16     	; 0x2b98 <gc_execute_block+0x93e>
    2b88:	40 90 47 21 	lds	r4, 0x2147
    2b8c:	50 90 48 21 	lds	r5, 0x2148
    2b90:	60 90 49 21 	lds	r6, 0x2149
    2b94:	70 90 4a 21 	lds	r7, 0x214A
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2b98:	c8 01       	movw	r24, r16
    2b9a:	b7 01       	movw	r22, r14
    2b9c:	0e 94 6e 46 	call	0x8cdc	; 0x8cdc <hypot>
    2ba0:	7b 01       	movw	r14, r22
    2ba2:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    2ba4:	ad b7       	in	r26, 0x3d	; 61
    2ba6:	be b7       	in	r27, 0x3e	; 62
    2ba8:	1a 97       	sbiw	r26, 0x0a	; 10
    2baa:	ad bf       	out	0x3d, r26	; 61
    2bac:	be bf       	out	0x3e, r27	; 62
    2bae:	8d b6       	in	r8, 0x3d	; 61
    2bb0:	9e b6       	in	r9, 0x3e	; 62
    2bb2:	08 94       	sec
    2bb4:	81 1c       	adc	r8, r1
    2bb6:	91 1c       	adc	r9, r1
    2bb8:	6c 89       	ldd	r22, Y+20	; 0x14
    2bba:	7d 89       	ldd	r23, Y+21	; 0x15
    2bbc:	8e 89       	ldd	r24, Y+22	; 0x16
    2bbe:	9f 89       	ldd	r25, Y+23	; 0x17
    2bc0:	a6 01       	movw	r20, r12
    2bc2:	95 01       	movw	r18, r10
    2bc4:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    2bc8:	5b 01       	movw	r10, r22
    2bca:	6c 01       	movw	r12, r24
    2bcc:	2b 81       	ldd	r18, Y+3	; 0x03
    2bce:	3c 81       	ldd	r19, Y+4	; 0x04
    2bd0:	f4 01       	movw	r30, r8
    2bd2:	20 83       	st	Z, r18
    2bd4:	31 83       	std	Z+1, r19	; 0x01
    2bd6:	22 82       	std	Z+2, r2	; 0x02
    2bd8:	33 82       	std	Z+3, r3	; 0x03
    2bda:	d4 01       	movw	r26, r8
    2bdc:	14 96       	adiw	r26, 0x04	; 4
    2bde:	4d 92       	st	X+, r4
    2be0:	5d 92       	st	X+, r5
    2be2:	6d 92       	st	X+, r6
    2be4:	7c 92       	st	X, r7
    2be6:	17 97       	sbiw	r26, 0x07	; 7
    2be8:	eb 89       	ldd	r30, Y+19	; 0x13
    2bea:	18 96       	adiw	r26, 0x08	; 8
    2bec:	ec 93       	st	X, r30
    2bee:	18 97       	sbiw	r26, 0x08	; 8
    2bf0:	19 96       	adiw	r26, 0x09	; 9
    2bf2:	1c 92       	st	X, r1
    2bf4:	6f 85       	ldd	r22, Y+15	; 0x0f
    2bf6:	78 89       	ldd	r23, Y+16	; 0x10
    2bf8:	89 89       	ldd	r24, Y+17	; 0x11
    2bfa:	9a 89       	ldd	r25, Y+18	; 0x12
    2bfc:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bfe:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c00:	4d 85       	ldd	r20, Y+13	; 0x0d
    2c02:	5e 85       	ldd	r21, Y+14	; 0x0e
    2c04:	8d 80       	ldd	r8, Y+5	; 0x05
    2c06:	9e 80       	ldd	r9, Y+6	; 0x06
    2c08:	0e 94 02 20 	call	0x4004	; 0x4004 <mc_arc_nonblock>
    2c0c:	80 93 2e 21 	sts	0x212E, r24
    2c10:	2d b7       	in	r18, 0x3d	; 61
    2c12:	3e b7       	in	r19, 0x3e	; 62
    2c14:	26 5f       	subi	r18, 0xF6	; 246
    2c16:	3f 4f       	sbci	r19, 0xFF	; 255
    2c18:	2d bf       	out	0x3d, r18	; 61
    2c1a:	3e bf       	out	0x3e, r19	; 62
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_CONTINUE)) {
    2c1c:	80 91 2e 21 	lds	r24, 0x212E
    2c20:	88 23       	and	r24, r24
    2c22:	11 f0       	breq	.+4      	; 0x2c28 <gc_execute_block+0x9ce>
    2c24:	82 30       	cpi	r24, 0x02	; 2
    2c26:	49 f4       	brne	.+18     	; 0x2c3a <gc_execute_block+0x9e0>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2c28:	e7 e5       	ldi	r30, 0x57	; 87
    2c2a:	f1 e2       	ldi	r31, 0x21	; 33
    2c2c:	df 01       	movw	r26, r30
    2c2e:	1c 96       	adiw	r26, 0x0c	; 12
    2c30:	9c e0       	ldi	r25, 0x0C	; 12
    2c32:	0d 90       	ld	r0, X+
    2c34:	01 92       	st	Z+, r0
    2c36:	91 50       	subi	r25, 0x01	; 1
    2c38:	e1 f7       	brne	.-8      	; 0x2c32 <gc_execute_block+0x9d8>
	};
	return(gc.status);
}
    2c3a:	68 96       	adiw	r28, 0x18	; 24
    2c3c:	cd bf       	out	0x3d, r28	; 61
    2c3e:	de bf       	out	0x3e, r29	; 62
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	1f 91       	pop	r17
    2c46:	0f 91       	pop	r16
    2c48:	ff 90       	pop	r15
    2c4a:	ef 90       	pop	r14
    2c4c:	df 90       	pop	r13
    2c4e:	cf 90       	pop	r12
    2c50:	bf 90       	pop	r11
    2c52:	af 90       	pop	r10
    2c54:	9f 90       	pop	r9
    2c56:	8f 90       	pop	r8
    2c58:	7f 90       	pop	r7
    2c5a:	6f 90       	pop	r6
    2c5c:	5f 90       	pop	r5
    2c5e:	4f 90       	pop	r4
    2c60:	3f 90       	pop	r3
    2c62:	2f 90       	pop	r2
    2c64:	08 95       	ret

00002c66 <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	ec 01       	movw	r28, r24
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	10 c0       	rjmp	.+32     	; 0x2c92 <gc_gcode_parser+0x2c>
	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    2c72:	e1 32       	cpi	r30, 0x21	; 33
    2c74:	70 f0       	brcs	.+28     	; 0x2c92 <gc_gcode_parser+0x2c>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    2c76:	8e 2f       	mov	r24, r30
    2c78:	81 56       	subi	r24, 0x61	; 97
    2c7a:	a9 2f       	mov	r26, r25
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	9f 5f       	subi	r25, 0xFF	; 255
    2c80:	8a 31       	cpi	r24, 0x1A	; 26
    2c82:	20 f4       	brcc	.+8      	; 0x2c8c <gc_gcode_parser+0x26>
			block[j++] = c-'a'+'A';
    2c84:	ac 0f       	add	r26, r28
    2c86:	bd 1f       	adc	r27, r29
    2c88:	e0 52       	subi	r30, 0x20	; 32
    2c8a:	02 c0       	rjmp	.+4      	; 0x2c90 <gc_gcode_parser+0x2a>
		} else {
			block[j++] = c;
    2c8c:	ac 0f       	add	r26, r28
    2c8e:	bd 1f       	adc	r27, r29
    2c90:	ec 93       	st	X, r30

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
    2c92:	fe 01       	movw	r30, r28
    2c94:	e2 0f       	add	r30, r18
    2c96:	f1 1d       	adc	r31, r1
    2c98:	e0 81       	ld	r30, Z
    2c9a:	2f 5f       	subi	r18, 0xFF	; 255
    2c9c:	ee 23       	and	r30, r30
    2c9e:	49 f7       	brne	.-46     	; 0x2c72 <gc_gcode_parser+0xc>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	e9 0f       	add	r30, r25
    2ca4:	f1 1d       	adc	r31, r1
    2ca6:	10 82       	st	Z, r1
{
	_gc_normalize_gcode_block(block);
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    2ca8:	88 81       	ld	r24, Y
    2caa:	88 32       	cpi	r24, 0x28	; 40
    2cac:	61 f0       	breq	.+24     	; 0x2cc6 <gc_gcode_parser+0x60>
		return(TG_OK);
	}
	if (block[0] == 'Q') { 					// quit
    2cae:	81 35       	cpi	r24, 0x51	; 81
    2cb0:	11 f4       	brne	.+4      	; 0x2cb6 <gc_gcode_parser+0x50>
    2cb2:	83 e0       	ldi	r24, 0x03	; 3
    2cb4:	09 c0       	rjmp	.+18     	; 0x2cc8 <gc_gcode_parser+0x62>
		return(TG_QUIT);
	} 
	if (block[0] == '/') { 					// ignore block delete
    2cb6:	8f 32       	cpi	r24, 0x2F	; 47
    2cb8:	31 f0       	breq	.+12     	; 0x2cc6 <gc_gcode_parser+0x60>
		return(TG_OK);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2cba:	ce 01       	movw	r24, r28
    2cbc:	0e 94 2d 11 	call	0x225a	; 0x225a <gc_execute_block>
    2cc0:	80 93 2e 21 	sts	0x212E, r24
    2cc4:	01 c0       	rjmp	.+2      	; 0x2cc8 <gc_gcode_parser+0x62>
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
}
    2cc8:	df 91       	pop	r29
    2cca:	cf 91       	pop	r28
    2ccc:	08 95       	ret

00002cce <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2cce:	cf 92       	push	r12
    2cd0:	df 92       	push	r13
    2cd2:	ef 92       	push	r14
    2cd4:	ff 92       	push	r15
    2cd6:	0f 93       	push	r16
    2cd8:	1f 93       	push	r17
    2cda:	cf 93       	push	r28
    2cdc:	df 93       	push	r29
    2cde:	cd ea       	ldi	r28, 0xAD	; 173
    2ce0:	d4 e2       	ldi	r29, 0x24	; 36
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2ce2:	68 81       	ld	r22, Y
    2ce4:	70 e0       	ldi	r23, 0x00	; 0
    2ce6:	88 27       	eor	r24, r24
    2ce8:	77 fd       	sbrc	r23, 7
    2cea:	80 95       	com	r24
    2cec:	98 2f       	mov	r25, r24
    2cee:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    2cf2:	9b 01       	movw	r18, r22
    2cf4:	ac 01       	movw	r20, r24
    2cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf8:	78 85       	ldd	r23, Y+8	; 0x08
    2cfa:	89 85       	ldd	r24, Y+9	; 0x09
    2cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfe:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    2d02:	9b 01       	movw	r18, r22
    2d04:	ac 01       	movw	r20, r24
    2d06:	60 e0       	ldi	r22, 0x00	; 0
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	84 eb       	ldi	r24, 0xB4	; 180
    2d0c:	93 e4       	ldi	r25, 0x43	; 67
    2d0e:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    2d12:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d14:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d16:	4d 85       	ldd	r20, Y+13	; 0x0d
    2d18:	5e 85       	ldd	r21, Y+14	; 0x0e
    2d1a:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    2d1e:	6b 8b       	std	Y+19, r22	; 0x13
    2d20:	7c 8b       	std	Y+20, r23	; 0x14
    2d22:	8d 8b       	std	Y+21, r24	; 0x15
    2d24:	9e 8b       	std	Y+22, r25	; 0x16
    2d26:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    2d28:	85 e2       	ldi	r24, 0x25	; 37
    2d2a:	cd 30       	cpi	r28, 0x0D	; 13
    2d2c:	d8 07       	cpc	r29, r24
    2d2e:	c9 f6       	brne	.-78     	; 0x2ce2 <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    2d30:	00 91 ad 24 	lds	r16, 0x24AD
    2d34:	10 e0       	ldi	r17, 0x00	; 0
    2d36:	b8 01       	movw	r22, r16
    2d38:	88 27       	eor	r24, r24
    2d3a:	77 fd       	sbrc	r23, 7
    2d3c:	80 95       	com	r24
    2d3e:	98 2f       	mov	r25, r24
    2d40:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    2d44:	9b 01       	movw	r18, r22
    2d46:	ac 01       	movw	r20, r24
    2d48:	60 91 b4 24 	lds	r22, 0x24B4
    2d4c:	70 91 b5 24 	lds	r23, 0x24B5
    2d50:	80 91 b6 24 	lds	r24, 0x24B6
    2d54:	90 91 b7 24 	lds	r25, 0x24B7
    2d58:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    2d5c:	9b 01       	movw	r18, r22
    2d5e:	ac 01       	movw	r20, r24
    2d60:	60 e0       	ldi	r22, 0x00	; 0
    2d62:	70 e0       	ldi	r23, 0x00	; 0
    2d64:	84 eb       	ldi	r24, 0xB4	; 180
    2d66:	93 e4       	ldi	r25, 0x43	; 67
    2d68:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    2d6c:	6b 01       	movw	r12, r22
    2d6e:	7c 01       	movw	r14, r24
    2d70:	80 91 b2 24 	lds	r24, 0x24B2
    2d74:	90 91 b3 24 	lds	r25, 0x24B3
    2d78:	08 9f       	mul	r16, r24
    2d7a:	b0 01       	movw	r22, r0
    2d7c:	09 9f       	mul	r16, r25
    2d7e:	70 0d       	add	r23, r0
    2d80:	18 9f       	mul	r17, r24
    2d82:	70 0d       	add	r23, r0
    2d84:	11 24       	eor	r1, r1
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__floatunsisf>
    2d8e:	a7 01       	movw	r20, r14
    2d90:	96 01       	movw	r18, r12
    2d92:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    2d96:	60 93 a5 24 	sts	0x24A5, r22
    2d9a:	70 93 a6 24 	sts	0x24A6, r23
    2d9e:	80 93 a7 24 	sts	0x24A7, r24
    2da2:	90 93 a8 24 	sts	0x24A8, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    2da6:	80 91 b0 24 	lds	r24, 0x24B0
    2daa:	90 91 b1 24 	lds	r25, 0x24B1
    2dae:	08 9f       	mul	r16, r24
    2db0:	b0 01       	movw	r22, r0
    2db2:	09 9f       	mul	r16, r25
    2db4:	70 0d       	add	r23, r0
    2db6:	18 9f       	mul	r17, r24
    2db8:	70 0d       	add	r23, r0
    2dba:	11 24       	eor	r1, r1
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__floatunsisf>
    2dc4:	a7 01       	movw	r20, r14
    2dc6:	96 01       	movw	r18, r12
    2dc8:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    2dcc:	60 93 a9 24 	sts	0x24A9, r22
    2dd0:	70 93 aa 24 	sts	0x24AA, r23
    2dd4:	80 93 ab 24 	sts	0x24AB, r24
    2dd8:	90 93 ac 24 	sts	0x24AC, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    2ddc:	df 91       	pop	r29
    2dde:	cf 91       	pop	r28
    2de0:	1f 91       	pop	r17
    2de2:	0f 91       	pop	r16
    2de4:	ff 90       	pop	r15
    2de6:	ef 90       	pop	r14
    2de8:	df 90       	pop	r13
    2dea:	cf 90       	pop	r12
    2dec:	08 95       	ret

00002dee <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    2dee:	ef e9       	ldi	r30, 0x9F	; 159
    2df0:	f4 e2       	ldi	r31, 0x24	; 36
    2df2:	84 e6       	ldi	r24, 0x64	; 100
    2df4:	80 93 9f 24 	sts	0x249F, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2df8:	8a e0       	ldi	r24, 0x0A	; 10
    2dfa:	97 ed       	ldi	r25, 0xD7	; 215
    2dfc:	a3 e2       	ldi	r26, 0x23	; 35
    2dfe:	bc e3       	ldi	r27, 0x3C	; 60
    2e00:	80 93 a1 24 	sts	0x24A1, r24
    2e04:	90 93 a2 24 	sts	0x24A2, r25
    2e08:	a0 93 a3 24 	sts	0x24A3, r26
    2e0c:	b0 93 a4 24 	sts	0x24A4, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2e10:	8c ed       	ldi	r24, 0xDC	; 220
    2e12:	95 e0       	ldi	r25, 0x05	; 5
    2e14:	80 93 b0 24 	sts	0x24B0, r24
    2e18:	90 93 b1 24 	sts	0x24B1, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2e1c:	80 93 c8 24 	sts	0x24C8, r24
    2e20:	90 93 c9 24 	sts	0x24C9, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2e24:	80 93 e0 24 	sts	0x24E0, r24
    2e28:	90 93 e1 24 	sts	0x24E1, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2e2c:	80 93 f8 24 	sts	0x24F8, r24
    2e30:	90 93 f9 24 	sts	0x24F9, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2e34:	80 93 b2 24 	sts	0x24B2, r24
    2e38:	90 93 b3 24 	sts	0x24B3, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2e3c:	80 93 ca 24 	sts	0x24CA, r24
    2e40:	90 93 cb 24 	sts	0x24CB, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2e44:	80 93 e2 24 	sts	0x24E2, r24
    2e48:	90 93 e3 24 	sts	0x24E3, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2e4c:	80 93 fa 24 	sts	0x24FA, r24
    2e50:	90 93 fb 24 	sts	0x24FB, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2e54:	86 e6       	ldi	r24, 0x66	; 102
    2e56:	96 e6       	ldi	r25, 0x66	; 102
    2e58:	a6 ee       	ldi	r26, 0xE6	; 230
    2e5a:	bf e3       	ldi	r27, 0x3F	; 63
    2e5c:	80 93 b4 24 	sts	0x24B4, r24
    2e60:	90 93 b5 24 	sts	0x24B5, r25
    2e64:	a0 93 b6 24 	sts	0x24B6, r26
    2e68:	b0 93 b7 24 	sts	0x24B7, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2e6c:	80 93 cc 24 	sts	0x24CC, r24
    2e70:	90 93 cd 24 	sts	0x24CD, r25
    2e74:	a0 93 ce 24 	sts	0x24CE, r26
    2e78:	b0 93 cf 24 	sts	0x24CF, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2e7c:	80 93 e4 24 	sts	0x24E4, r24
    2e80:	90 93 e5 24 	sts	0x24E5, r25
    2e84:	a0 93 e6 24 	sts	0x24E6, r26
    2e88:	b0 93 e7 24 	sts	0x24E7, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2e8c:	80 93 fc 24 	sts	0x24FC, r24
    2e90:	90 93 fd 24 	sts	0x24FD, r25
    2e94:	a0 93 fe 24 	sts	0x24FE, r26
    2e98:	b0 93 ff 24 	sts	0x24FF, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    2e9c:	8c e5       	ldi	r24, 0x5C	; 92
    2e9e:	9f e8       	ldi	r25, 0x8F	; 143
    2ea0:	a2 ea       	ldi	r26, 0xA2	; 162
    2ea2:	bf e3       	ldi	r27, 0x3F	; 63
    2ea4:	80 93 b8 24 	sts	0x24B8, r24
    2ea8:	90 93 b9 24 	sts	0x24B9, r25
    2eac:	a0 93 ba 24 	sts	0x24BA, r26
    2eb0:	b0 93 bb 24 	sts	0x24BB, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    2eb4:	80 93 d0 24 	sts	0x24D0, r24
    2eb8:	90 93 d1 24 	sts	0x24D1, r25
    2ebc:	a0 93 d2 24 	sts	0x24D2, r26
    2ec0:	b0 93 d3 24 	sts	0x24D3, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    2ec4:	80 93 e8 24 	sts	0x24E8, r24
    2ec8:	90 93 e9 24 	sts	0x24E9, r25
    2ecc:	a0 93 ea 24 	sts	0x24EA, r26
    2ed0:	b0 93 eb 24 	sts	0x24EB, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    2ed4:	80 93 00 25 	sts	0x2500, r24
    2ed8:	90 93 01 25 	sts	0x2501, r25
    2edc:	a0 93 02 25 	sts	0x2502, r26
    2ee0:	b0 93 03 25 	sts	0x2503, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	a8 ec       	ldi	r26, 0xC8	; 200
    2eea:	b3 e4       	ldi	r27, 0x43	; 67
    2eec:	80 93 bc 24 	sts	0x24BC, r24
    2ef0:	90 93 bd 24 	sts	0x24BD, r25
    2ef4:	a0 93 be 24 	sts	0x24BE, r26
    2ef8:	b0 93 bf 24 	sts	0x24BF, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    2efc:	80 93 d4 24 	sts	0x24D4, r24
    2f00:	90 93 d5 24 	sts	0x24D5, r25
    2f04:	a0 93 d6 24 	sts	0x24D6, r26
    2f08:	b0 93 d7 24 	sts	0x24D7, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	a6 e9       	ldi	r26, 0x96	; 150
    2f12:	b3 e4       	ldi	r27, 0x43	; 67
    2f14:	80 93 ec 24 	sts	0x24EC, r24
    2f18:	90 93 ed 24 	sts	0x24ED, r25
    2f1c:	a0 93 ee 24 	sts	0x24EE, r26
    2f20:	b0 93 ef 24 	sts	0x24EF, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	a0 e8       	ldi	r26, 0x80	; 128
    2f2a:	bf eb       	ldi	r27, 0xBF	; 191
    2f2c:	80 93 04 25 	sts	0x2504, r24
    2f30:	90 93 05 25 	sts	0x2505, r25
    2f34:	a0 93 06 25 	sts	0x2506, r26
    2f38:	b0 93 07 25 	sts	0x2507, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    2f3c:	88 e0       	ldi	r24, 0x08	; 8
    2f3e:	80 93 ad 24 	sts	0x24AD, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    2f42:	80 93 c5 24 	sts	0x24C5, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    2f46:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A].microstep = A_MICROSTEPS;
    2f48:	80 93 f5 24 	sts	0x24F5, r24

	cfg.a[X].polarity = X_POLARITY;
    2f4c:	10 92 af 24 	sts	0x24AF, r1
	cfg.a[Y].polarity = Y_POLARITY;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	80 93 c7 24 	sts	0x24C7, r24
	cfg.a[Z].polarity = Z_POLARITY;
    2f56:	10 92 df 24 	sts	0x24DF, r1
	cfg.a[A].polarity = A_POLARITY;
    2f5a:	10 92 f7 24 	sts	0x24F7, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    2f5e:	80 93 c4 24 	sts	0x24C4, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    2f62:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    2f64:	80 93 f4 24 	sts	0x24F4, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    2f68:	10 92 0c 25 	sts	0x250C, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    2f6c:	80 93 ae 24 	sts	0x24AE, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    2f70:	80 93 c6 24 	sts	0x24C6, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    2f74:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    2f76:	80 93 f6 24 	sts	0x24F6, r24

	_cfg_computed();		// generate computed values from the above
    2f7a:	0e 94 67 16 	call	0x2cce	; 0x2cce <_cfg_computed>
}
    2f7e:	08 95       	ret

00002f80 <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2f80:	0e 94 f7 16 	call	0x2dee	; 0x2dee <cfg_reset>
}
    2f84:	08 95       	ret

00002f86 <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2f86:	87 30       	cpi	r24, 0x07	; 7
    2f88:	31 f1       	breq	.+76     	; 0x2fd6 <_cfg_print_status+0x50>
    2f8a:	88 30       	cpi	r24, 0x08	; 8
    2f8c:	30 f4       	brcc	.+12     	; 0x2f9a <_cfg_print_status+0x14>
    2f8e:	82 30       	cpi	r24, 0x02	; 2
    2f90:	59 f0       	breq	.+22     	; 0x2fa8 <_cfg_print_status+0x22>
    2f92:	83 30       	cpi	r24, 0x03	; 3
    2f94:	09 f0       	breq	.+2      	; 0x2f98 <_cfg_print_status+0x12>
    2f96:	45 c0       	rjmp	.+138    	; 0x3022 <_cfg_print_status+0x9c>
    2f98:	0c c0       	rjmp	.+24     	; 0x2fb2 <_cfg_print_status+0x2c>
    2f9a:	8d 30       	cpi	r24, 0x0D	; 13
    2f9c:	09 f1       	breq	.+66     	; 0x2fe0 <_cfg_print_status+0x5a>
    2f9e:	8f 30       	cpi	r24, 0x0F	; 15
    2fa0:	81 f1       	breq	.+96     	; 0x3002 <_cfg_print_status+0x7c>
    2fa2:	8c 30       	cpi	r24, 0x0C	; 12
    2fa4:	f1 f5       	brne	.+124    	; 0x3022 <_cfg_print_status+0x9c>
    2fa6:	12 c0       	rjmp	.+36     	; 0x2fcc <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_CONTINUE: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2fa8:	00 d0       	rcall	.+0      	; 0x2faa <_cfg_print_status+0x24>
    2faa:	0f 92       	push	r0
    2fac:	85 e1       	ldi	r24, 0x15	; 21
    2fae:	94 e0       	ldi	r25, 0x04	; 4
    2fb0:	1b c0       	rjmp	.+54     	; 0x2fe8 <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2fb2:	0f 92       	push	r0
    2fb4:	0f 92       	push	r0
    2fb6:	8f ef       	ldi	r24, 0xFF	; 255
    2fb8:	93 e0       	ldi	r25, 0x03	; 3
    2fba:	ed b7       	in	r30, 0x3d	; 61
    2fbc:	fe b7       	in	r31, 0x3e	; 62
    2fbe:	81 83       	std	Z+1, r24	; 0x01
    2fc0:	92 83       	std	Z+2, r25	; 0x02
    2fc2:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <_cfg_print_status+0x48>
    2fce:	0f 92       	push	r0
    2fd0:	88 ee       	ldi	r24, 0xE8	; 232
    2fd2:	93 e0       	ldi	r25, 0x03	; 3
    2fd4:	09 c0       	rjmp	.+18     	; 0x2fe8 <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <_cfg_print_status+0x52>
    2fd8:	0f 92       	push	r0
    2fda:	8e ec       	ldi	r24, 0xCE	; 206
    2fdc:	93 e0       	ldi	r25, 0x03	; 3
    2fde:	04 c0       	rjmp	.+8      	; 0x2fe8 <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2fe0:	00 d0       	rcall	.+0      	; 0x2fe2 <_cfg_print_status+0x5c>
    2fe2:	0f 92       	push	r0
    2fe4:	84 eb       	ldi	r24, 0xB4	; 180
    2fe6:	93 e0       	ldi	r25, 0x03	; 3
    2fe8:	ed b7       	in	r30, 0x3d	; 61
    2fea:	fe b7       	in	r31, 0x3e	; 62
    2fec:	81 83       	std	Z+1, r24	; 0x01
    2fee:	92 83       	std	Z+2, r25	; 0x02
    2ff0:	63 83       	std	Z+3, r22	; 0x03
    2ff2:	74 83       	std	Z+4, r23	; 0x04
    2ff4:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
    2ff8:	0f 90       	pop	r0
    2ffa:	0f 90       	pop	r0
    2ffc:	0f 90       	pop	r0
    2ffe:	0f 90       	pop	r0
    3000:	08 95       	ret
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    3002:	00 d0       	rcall	.+0      	; 0x3004 <_cfg_print_status+0x7e>
    3004:	0f 92       	push	r0
    3006:	89 e9       	ldi	r24, 0x99	; 153
    3008:	93 e0       	ldi	r25, 0x03	; 3
    300a:	ed b7       	in	r30, 0x3d	; 61
    300c:	fe b7       	in	r31, 0x3e	; 62
    300e:	81 83       	std	Z+1, r24	; 0x01
    3010:	92 83       	std	Z+2, r25	; 0x02
    3012:	63 83       	std	Z+3, r22	; 0x03
    3014:	74 83       	std	Z+4, r23	; 0x04
    3016:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	08 95       	ret

00003024 <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    3024:	ef 92       	push	r14
    3026:	ff 92       	push	r15
    3028:	0f 93       	push	r16
    302a:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    302c:	e8 2e       	mov	r14, r24
    302e:	ff 24       	eor	r15, r15
    3030:	87 01       	movw	r16, r14
    3032:	00 0f       	add	r16, r16
    3034:	11 1f       	adc	r17, r17
    3036:	f8 01       	movw	r30, r16
    3038:	ed 5b       	subi	r30, 0xBD	; 189
    303a:	fd 4f       	sbci	r31, 0xFD	; 253
    303c:	25 91       	lpm	r18, Z+
    303e:	34 91       	lpm	r19, Z+
    3040:	00 d0       	rcall	.+0      	; 0x3042 <_cfg_dump_axis+0x1e>
    3042:	0f 92       	push	r0
    3044:	88 e3       	ldi	r24, 0x38	; 56
    3046:	96 e0       	ldi	r25, 0x06	; 6
    3048:	ad b7       	in	r26, 0x3d	; 61
    304a:	be b7       	in	r27, 0x3e	; 62
    304c:	11 96       	adiw	r26, 0x01	; 1
    304e:	8d 93       	st	X+, r24
    3050:	9c 93       	st	X, r25
    3052:	12 97       	sbiw	r26, 0x02	; 2
    3054:	13 96       	adiw	r26, 0x03	; 3
    3056:	2d 93       	st	X+, r18
    3058:	3c 93       	st	X, r19
    305a:	14 97       	sbiw	r26, 0x04	; 4
    305c:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	96 e0       	ldi	r25, 0x06	; 6
    3064:	ed b7       	in	r30, 0x3d	; 61
    3066:	fe b7       	in	r31, 0x3e	; 62
    3068:	81 83       	std	Z+1, r24	; 0x01
    306a:	92 83       	std	Z+2, r25	; 0x02
    306c:	0e 0d       	add	r16, r14
    306e:	1f 1d       	adc	r17, r15
    3070:	83 e0       	ldi	r24, 0x03	; 3
    3072:	00 0f       	add	r16, r16
    3074:	11 1f       	adc	r17, r17
    3076:	8a 95       	dec	r24
    3078:	e1 f7       	brne	.-8      	; 0x3072 <_cfg_dump_axis+0x4e>
    307a:	01 56       	subi	r16, 0x61	; 97
    307c:	1b 4d       	sbci	r17, 0xDB	; 219
    307e:	d8 01       	movw	r26, r16
    3080:	51 96       	adiw	r26, 0x11	; 17
    3082:	8d 91       	ld	r24, X+
    3084:	9c 91       	ld	r25, X
    3086:	52 97       	sbiw	r26, 0x12	; 18
    3088:	83 83       	std	Z+3, r24	; 0x03
    308a:	94 83       	std	Z+4, r25	; 0x04
    308c:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    3090:	88 ec       	ldi	r24, 0xC8	; 200
    3092:	95 e0       	ldi	r25, 0x05	; 5
    3094:	ed b7       	in	r30, 0x3d	; 61
    3096:	fe b7       	in	r31, 0x3e	; 62
    3098:	81 83       	std	Z+1, r24	; 0x01
    309a:	92 83       	std	Z+2, r25	; 0x02
    309c:	d8 01       	movw	r26, r16
    309e:	53 96       	adiw	r26, 0x13	; 19
    30a0:	8d 91       	ld	r24, X+
    30a2:	9c 91       	ld	r25, X
    30a4:	54 97       	sbiw	r26, 0x14	; 20
    30a6:	83 83       	std	Z+3, r24	; 0x03
    30a8:	94 83       	std	Z+4, r25	; 0x04
    30aa:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    30ae:	ed b7       	in	r30, 0x3d	; 61
    30b0:	fe b7       	in	r31, 0x3e	; 62
    30b2:	31 96       	adiw	r30, 0x01	; 1
    30b4:	85 e9       	ldi	r24, 0x95	; 149
    30b6:	95 e0       	ldi	r25, 0x05	; 5
    30b8:	ad b7       	in	r26, 0x3d	; 61
    30ba:	be b7       	in	r27, 0x3e	; 62
    30bc:	11 96       	adiw	r26, 0x01	; 1
    30be:	8d 93       	st	X+, r24
    30c0:	9c 93       	st	X, r25
    30c2:	12 97       	sbiw	r26, 0x02	; 2
    30c4:	d8 01       	movw	r26, r16
    30c6:	1e 96       	adiw	r26, 0x0e	; 14
    30c8:	8c 91       	ld	r24, X
    30ca:	82 83       	std	Z+2, r24	; 0x02
    30cc:	13 82       	std	Z+3, r1	; 0x03
    30ce:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    30d2:	0f 92       	push	r0
    30d4:	0f 92       	push	r0
    30d6:	8e e5       	ldi	r24, 0x5E	; 94
    30d8:	95 e0       	ldi	r25, 0x05	; 5
    30da:	ed b7       	in	r30, 0x3d	; 61
    30dc:	fe b7       	in	r31, 0x3e	; 62
    30de:	81 83       	std	Z+1, r24	; 0x01
    30e0:	92 83       	std	Z+2, r25	; 0x02
    30e2:	f8 01       	movw	r30, r16
    30e4:	85 89       	ldd	r24, Z+21	; 0x15
    30e6:	96 89       	ldd	r25, Z+22	; 0x16
    30e8:	a7 89       	ldd	r26, Z+23	; 0x17
    30ea:	b0 8d       	ldd	r27, Z+24	; 0x18
    30ec:	ed b7       	in	r30, 0x3d	; 61
    30ee:	fe b7       	in	r31, 0x3e	; 62
    30f0:	83 83       	std	Z+3, r24	; 0x03
    30f2:	94 83       	std	Z+4, r25	; 0x04
    30f4:	a5 83       	std	Z+5, r26	; 0x05
    30f6:	b6 83       	std	Z+6, r27	; 0x06
    30f8:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    30fc:	8b e2       	ldi	r24, 0x2B	; 43
    30fe:	95 e0       	ldi	r25, 0x05	; 5
    3100:	ad b7       	in	r26, 0x3d	; 61
    3102:	be b7       	in	r27, 0x3e	; 62
    3104:	11 96       	adiw	r26, 0x01	; 1
    3106:	8d 93       	st	X+, r24
    3108:	9c 93       	st	X, r25
    310a:	12 97       	sbiw	r26, 0x02	; 2
    310c:	f8 01       	movw	r30, r16
    310e:	81 8d       	ldd	r24, Z+25	; 0x19
    3110:	92 8d       	ldd	r25, Z+26	; 0x1a
    3112:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3114:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3116:	ed b7       	in	r30, 0x3d	; 61
    3118:	fe b7       	in	r31, 0x3e	; 62
    311a:	83 83       	std	Z+3, r24	; 0x03
    311c:	94 83       	std	Z+4, r25	; 0x04
    311e:	a5 83       	std	Z+5, r26	; 0x05
    3120:	b6 83       	std	Z+6, r27	; 0x06
    3122:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    3126:	88 ef       	ldi	r24, 0xF8	; 248
    3128:	94 e0       	ldi	r25, 0x04	; 4
    312a:	ad b7       	in	r26, 0x3d	; 61
    312c:	be b7       	in	r27, 0x3e	; 62
    312e:	11 96       	adiw	r26, 0x01	; 1
    3130:	8d 93       	st	X+, r24
    3132:	9c 93       	st	X, r25
    3134:	12 97       	sbiw	r26, 0x02	; 2
    3136:	f8 01       	movw	r30, r16
    3138:	85 8d       	ldd	r24, Z+29	; 0x1d
    313a:	96 8d       	ldd	r25, Z+30	; 0x1e
    313c:	a7 8d       	ldd	r26, Z+31	; 0x1f
    313e:	b0 a1       	ldd	r27, Z+32	; 0x20
    3140:	ed b7       	in	r30, 0x3d	; 61
    3142:	fe b7       	in	r31, 0x3e	; 62
    3144:	83 83       	std	Z+3, r24	; 0x03
    3146:	94 83       	std	Z+4, r25	; 0x04
    3148:	a5 83       	std	Z+5, r26	; 0x05
    314a:	b6 83       	std	Z+6, r27	; 0x06
    314c:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	ed b7       	in	r30, 0x3d	; 61
    3156:	fe b7       	in	r31, 0x3e	; 62
    3158:	31 96       	adiw	r30, 0x01	; 1
    315a:	87 ec       	ldi	r24, 0xC7	; 199
    315c:	94 e0       	ldi	r25, 0x04	; 4
    315e:	ad b7       	in	r26, 0x3d	; 61
    3160:	be b7       	in	r27, 0x3e	; 62
    3162:	11 96       	adiw	r26, 0x01	; 1
    3164:	8d 93       	st	X+, r24
    3166:	9c 93       	st	X, r25
    3168:	12 97       	sbiw	r26, 0x02	; 2
    316a:	d8 01       	movw	r26, r16
    316c:	95 96       	adiw	r26, 0x25	; 37
    316e:	8c 91       	ld	r24, X
    3170:	82 83       	std	Z+2, r24	; 0x02
    3172:	13 82       	std	Z+3, r1	; 0x03
    3174:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    3178:	ed b7       	in	r30, 0x3d	; 61
    317a:	fe b7       	in	r31, 0x3e	; 62
    317c:	31 96       	adiw	r30, 0x01	; 1
    317e:	86 e9       	ldi	r24, 0x96	; 150
    3180:	94 e0       	ldi	r25, 0x04	; 4
    3182:	ad b7       	in	r26, 0x3d	; 61
    3184:	be b7       	in	r27, 0x3e	; 62
    3186:	11 96       	adiw	r26, 0x01	; 1
    3188:	8d 93       	st	X+, r24
    318a:	9c 93       	st	X, r25
    318c:	12 97       	sbiw	r26, 0x02	; 2
    318e:	d8 01       	movw	r26, r16
    3190:	1f 96       	adiw	r26, 0x0f	; 15
    3192:	8c 91       	ld	r24, X
    3194:	82 83       	std	Z+2, r24	; 0x02
    3196:	13 82       	std	Z+3, r1	; 0x03
    3198:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    319c:	ed b7       	in	r30, 0x3d	; 61
    319e:	fe b7       	in	r31, 0x3e	; 62
    31a0:	31 96       	adiw	r30, 0x01	; 1
    31a2:	86 e6       	ldi	r24, 0x66	; 102
    31a4:	94 e0       	ldi	r25, 0x04	; 4
    31a6:	ad b7       	in	r26, 0x3d	; 61
    31a8:	be b7       	in	r27, 0x3e	; 62
    31aa:	11 96       	adiw	r26, 0x01	; 1
    31ac:	8d 93       	st	X+, r24
    31ae:	9c 93       	st	X, r25
    31b0:	12 97       	sbiw	r26, 0x02	; 2
    31b2:	d8 01       	movw	r26, r16
    31b4:	50 96       	adiw	r26, 0x10	; 16
    31b6:	8c 91       	ld	r24, X
    31b8:	82 83       	std	Z+2, r24	; 0x02
    31ba:	13 82       	std	Z+3, r1	; 0x03
    31bc:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    31c0:	0f 92       	push	r0
    31c2:	0f 92       	push	r0
    31c4:	82 e3       	ldi	r24, 0x32	; 50
    31c6:	94 e0       	ldi	r25, 0x04	; 4
    31c8:	ed b7       	in	r30, 0x3d	; 61
    31ca:	fe b7       	in	r31, 0x3e	; 62
    31cc:	81 83       	std	Z+1, r24	; 0x01
    31ce:	92 83       	std	Z+2, r25	; 0x02
    31d0:	f8 01       	movw	r30, r16
    31d2:	81 a1       	ldd	r24, Z+33	; 0x21
    31d4:	92 a1       	ldd	r25, Z+34	; 0x22
    31d6:	a3 a1       	ldd	r26, Z+35	; 0x23
    31d8:	b4 a1       	ldd	r27, Z+36	; 0x24
    31da:	ed b7       	in	r30, 0x3d	; 61
    31dc:	fe b7       	in	r31, 0x3e	; 62
    31de:	83 83       	std	Z+3, r24	; 0x03
    31e0:	94 83       	std	Z+4, r25	; 0x04
    31e2:	a5 83       	std	Z+5, r26	; 0x05
    31e4:	b6 83       	std	Z+6, r27	; 0x06
    31e6:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
    31ea:	8d b7       	in	r24, 0x3d	; 61
    31ec:	9e b7       	in	r25, 0x3e	; 62
    31ee:	06 96       	adiw	r24, 0x06	; 6
    31f0:	8d bf       	out	0x3d, r24	; 61
    31f2:	9e bf       	out	0x3e, r25	; 62
}
    31f4:	1f 91       	pop	r17
    31f6:	0f 91       	pop	r16
    31f8:	ff 90       	pop	r15
    31fa:	ef 90       	pop	r14
    31fc:	08 95       	ret

000031fe <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    31fe:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    3200:	00 d0       	rcall	.+0      	; 0x3202 <cfg_dump+0x4>
    3202:	0f 92       	push	r0
    3204:	ed b7       	in	r30, 0x3d	; 61
    3206:	fe b7       	in	r31, 0x3e	; 62
    3208:	31 96       	adiw	r30, 0x01	; 1
    320a:	8c ef       	ldi	r24, 0xFC	; 252
    320c:	96 e0       	ldi	r25, 0x06	; 6
    320e:	ad b7       	in	r26, 0x3d	; 61
    3210:	be b7       	in	r27, 0x3e	; 62
    3212:	11 96       	adiw	r26, 0x01	; 1
    3214:	8d 93       	st	X+, r24
    3216:	9c 93       	st	X, r25
    3218:	12 97       	sbiw	r26, 0x02	; 2
    321a:	80 91 9f 24 	lds	r24, 0x249F
    321e:	82 83       	std	Z+2, r24	; 0x02
    3220:	13 82       	std	Z+3, r1	; 0x03
    3222:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	85 ed       	ldi	r24, 0xD5	; 213
    322c:	96 e0       	ldi	r25, 0x06	; 6
    322e:	ed b7       	in	r30, 0x3d	; 61
    3230:	fe b7       	in	r31, 0x3e	; 62
    3232:	81 83       	std	Z+1, r24	; 0x01
    3234:	92 83       	std	Z+2, r25	; 0x02
    3236:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    323a:	00 d0       	rcall	.+0      	; 0x323c <cfg_dump+0x3e>
    323c:	0f 92       	push	r0
    323e:	8b ea       	ldi	r24, 0xAB	; 171
    3240:	96 e0       	ldi	r25, 0x06	; 6
    3242:	ad b7       	in	r26, 0x3d	; 61
    3244:	be b7       	in	r27, 0x3e	; 62
    3246:	11 96       	adiw	r26, 0x01	; 1
    3248:	8d 93       	st	X+, r24
    324a:	9c 93       	st	X, r25
    324c:	12 97       	sbiw	r26, 0x02	; 2
    324e:	80 91 a1 24 	lds	r24, 0x24A1
    3252:	90 91 a2 24 	lds	r25, 0x24A2
    3256:	a0 91 a3 24 	lds	r26, 0x24A3
    325a:	b0 91 a4 24 	lds	r27, 0x24A4
    325e:	ed b7       	in	r30, 0x3d	; 61
    3260:	fe b7       	in	r31, 0x3e	; 62
    3262:	83 83       	std	Z+3, r24	; 0x03
    3264:	94 83       	std	Z+4, r25	; 0x04
    3266:	a5 83       	std	Z+5, r26	; 0x05
    3268:	b6 83       	std	Z+6, r27	; 0x06
    326a:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    326e:	81 e8       	ldi	r24, 0x81	; 129
    3270:	96 e0       	ldi	r25, 0x06	; 6
    3272:	ad b7       	in	r26, 0x3d	; 61
    3274:	be b7       	in	r27, 0x3e	; 62
    3276:	11 96       	adiw	r26, 0x01	; 1
    3278:	8d 93       	st	X+, r24
    327a:	9c 93       	st	X, r25
    327c:	12 97       	sbiw	r26, 0x02	; 2
    327e:	80 91 a9 24 	lds	r24, 0x24A9
    3282:	90 91 aa 24 	lds	r25, 0x24AA
    3286:	a0 91 ab 24 	lds	r26, 0x24AB
    328a:	b0 91 ac 24 	lds	r27, 0x24AC
    328e:	ed b7       	in	r30, 0x3d	; 61
    3290:	fe b7       	in	r31, 0x3e	; 62
    3292:	83 83       	std	Z+3, r24	; 0x03
    3294:	94 83       	std	Z+4, r25	; 0x04
    3296:	a5 83       	std	Z+5, r26	; 0x05
    3298:	b6 83       	std	Z+6, r27	; 0x06
    329a:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    329e:	86 e5       	ldi	r24, 0x56	; 86
    32a0:	96 e0       	ldi	r25, 0x06	; 6
    32a2:	ad b7       	in	r26, 0x3d	; 61
    32a4:	be b7       	in	r27, 0x3e	; 62
    32a6:	11 96       	adiw	r26, 0x01	; 1
    32a8:	8d 93       	st	X+, r24
    32aa:	9c 93       	st	X, r25
    32ac:	12 97       	sbiw	r26, 0x02	; 2
    32ae:	80 91 a5 24 	lds	r24, 0x24A5
    32b2:	90 91 a6 24 	lds	r25, 0x24A6
    32b6:	a0 91 a7 24 	lds	r26, 0x24A7
    32ba:	b0 91 a8 24 	lds	r27, 0x24A8
    32be:	ed b7       	in	r30, 0x3d	; 61
    32c0:	fe b7       	in	r31, 0x3e	; 62
    32c2:	83 83       	std	Z+3, r24	; 0x03
    32c4:	94 83       	std	Z+4, r25	; 0x04
    32c6:	a5 83       	std	Z+5, r26	; 0x05
    32c8:	b6 83       	std	Z+6, r27	; 0x06
    32ca:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
    32ce:	10 e0       	ldi	r17, 0x00	; 0
    32d0:	8d b7       	in	r24, 0x3d	; 61
    32d2:	9e b7       	in	r25, 0x3e	; 62
    32d4:	06 96       	adiw	r24, 0x06	; 6
    32d6:	8d bf       	out	0x3d, r24	; 61
    32d8:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
		_cfg_dump_axis(axis);
    32da:	81 2f       	mov	r24, r17
    32dc:	0e 94 12 18 	call	0x3024	; 0x3024 <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    32e0:	1f 5f       	subi	r17, 0xFF	; 255
    32e2:	14 30       	cpi	r17, 0x04	; 4
    32e4:	d1 f7       	brne	.-12     	; 0x32da <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    32e6:	1f 91       	pop	r17
    32e8:	08 95       	ret

000032ea <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	6f e9       	ldi	r22, 0x9F	; 159
    32f0:	74 e2       	ldi	r23, 0x24	; 36
    32f2:	4e e6       	ldi	r20, 0x6E	; 110
    32f4:	50 e0       	ldi	r21, 0x00	; 0
    32f6:	0e 94 93 2d 	call	0x5b26	; 0x5b26 <memcpy_to_eeprom_with_checksum>
}
    32fa:	08 95       	ret

000032fc <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    3304:	84 36       	cpi	r24, 0x64	; 100
    3306:	19 f0       	breq	.+6      	; 0x330e <cfg_read+0x12>
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	0d c0       	rjmp	.+26     	; 0x3328 <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    330e:	8f e9       	ldi	r24, 0x9F	; 159
    3310:	94 e2       	ldi	r25, 0x24	; 36
    3312:	60 e0       	ldi	r22, 0x00	; 0
    3314:	70 e0       	ldi	r23, 0x00	; 0
    3316:	4e e6       	ldi	r20, 0x6E	; 110
    3318:	50 e0       	ldi	r21, 0x00	; 0
    331a:	0e 94 ef 2c 	call	0x59de	; 0x59de <memcpy_from_eeprom_with_checksum>
    331e:	00 97       	sbiw	r24, 0x00	; 0
    3320:	11 f0       	breq	.+4      	; 0x3326 <cfg_read+0x2a>
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    3328:	c9 01       	movw	r24, r18
    332a:	08 95       	ret

0000332c <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    332c:	cf 92       	push	r12
    332e:	df 92       	push	r13
    3330:	ef 92       	push	r14
    3332:	ff 92       	push	r15
    3334:	1f 93       	push	r17
    3336:	df 93       	push	r29
    3338:	cf 93       	push	r28
    333a:	0f 92       	push	r0
    333c:	0f 92       	push	r0
    333e:	cd b7       	in	r28, 0x3d	; 61
    3340:	de b7       	in	r29, 0x3e	; 62
    3342:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    3344:	19 82       	std	Y+1, r1	; 0x01
    3346:	1a 82       	std	Y+2, r1	; 0x02
    3348:	cc 24       	eor	r12, r12
    334a:	dd 24       	eor	r13, r13
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	2b c0       	rjmp	.+86     	; 0x33a8 <cfg_parse+0x7c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    3352:	9d 33       	cpi	r25, 0x3D	; 61
    3354:	49 f4       	brne	.+18     	; 0x3368 <cfg_parse+0x3c>
			text[j++] = 0;						// terminate tag at separator
    3356:	f7 01       	movw	r30, r14
    3358:	e2 0f       	add	r30, r18
    335a:	f1 1d       	adc	r31, r1
    335c:	10 82       	st	Z, r1
    335e:	2f 5f       	subi	r18, 0xFF	; 255
			val = &text[j];						// new string starts at value
    3360:	67 01       	movw	r12, r14
    3362:	c2 0e       	add	r12, r18
    3364:	d1 1c       	adc	r13, r1
    3366:	20 c0       	rjmp	.+64     	; 0x33a8 <cfg_parse+0x7c>
		} else if ( (c == '-') || 				// pass special characters
    3368:	9d 32       	cpi	r25, 0x2D	; 45
    336a:	c9 f0       	breq	.+50     	; 0x339e <cfg_parse+0x72>
    336c:	9b 32       	cpi	r25, 0x2B	; 43
    336e:	b9 f0       	breq	.+46     	; 0x339e <cfg_parse+0x72>
    3370:	9e 32       	cpi	r25, 0x2E	; 46
    3372:	a9 f0       	breq	.+42     	; 0x339e <cfg_parse+0x72>
    3374:	9f 33       	cpi	r25, 0x3F	; 63
    3376:	99 f0       	breq	.+38     	; 0x339e <cfg_parse+0x72>
    3378:	98 32       	cpi	r25, 0x28	; 40
    337a:	89 f0       	breq	.+34     	; 0x339e <cfg_parse+0x72>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    337c:	89 2f       	mov	r24, r25
    337e:	81 56       	subi	r24, 0x61	; 97
    3380:	8a 31       	cpi	r24, 0x1A	; 26
    3382:	28 f4       	brcc	.+10     	; 0x338e <cfg_parse+0x62>
			text[j++] = c-'a'+'A';
    3384:	f7 01       	movw	r30, r14
    3386:	e2 0f       	add	r30, r18
    3388:	f1 1d       	adc	r31, r1
    338a:	90 52       	subi	r25, 0x20	; 32
    338c:	0b c0       	rjmp	.+22     	; 0x33a4 <cfg_parse+0x78>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    338e:	89 2f       	mov	r24, r25
    3390:	81 54       	subi	r24, 0x41	; 65
    3392:	8a 31       	cpi	r24, 0x1A	; 26
    3394:	20 f0       	brcs	.+8      	; 0x339e <cfg_parse+0x72>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
    3396:	89 2f       	mov	r24, r25
    3398:	80 53       	subi	r24, 0x30	; 48
    339a:	8a 30       	cpi	r24, 0x0A	; 10
    339c:	28 f4       	brcc	.+10     	; 0x33a8 <cfg_parse+0x7c>
			text[j++] = c;
    339e:	f7 01       	movw	r30, r14
    33a0:	e2 0f       	add	r30, r18
    33a2:	f1 1d       	adc	r31, r1
    33a4:	90 83       	st	Z, r25
    33a6:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    33a8:	f7 01       	movw	r30, r14
    33aa:	e3 0f       	add	r30, r19
    33ac:	f1 1d       	adc	r31, r1
    33ae:	90 81       	ld	r25, Z
    33b0:	3f 5f       	subi	r19, 0xFF	; 255
    33b2:	99 23       	and	r25, r25
    33b4:	71 f6       	brne	.-100    	; 0x3352 <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    33b6:	f7 01       	movw	r30, r14
    33b8:	e2 0f       	add	r30, r18
    33ba:	f1 1d       	adc	r31, r1
    33bc:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    33be:	2f 5f       	subi	r18, 0xFF	; 255
    33c0:	c7 01       	movw	r24, r14
    33c2:	82 0f       	add	r24, r18
    33c4:	91 1d       	adc	r25, r1
    33c6:	89 83       	std	Y+1, r24	; 0x01
    33c8:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    33ca:	10 92 a0 24 	sts	0x24A0, r1
	switch (text[0]) {
    33ce:	f7 01       	movw	r30, r14
    33d0:	80 81       	ld	r24, Z
    33d2:	81 35       	cpi	r24, 0x51	; 81
    33d4:	d1 f0       	breq	.+52     	; 0x340a <cfg_parse+0xde>
    33d6:	82 35       	cpi	r24, 0x52	; 82
    33d8:	60 f4       	brcc	.+24     	; 0x33f2 <cfg_parse+0xc6>
    33da:	81 34       	cpi	r24, 0x41	; 65
    33dc:	59 f1       	breq	.+86     	; 0x3434 <cfg_parse+0x108>
    33de:	82 34       	cpi	r24, 0x42	; 66
    33e0:	28 f4       	brcc	.+10     	; 0x33ec <cfg_parse+0xc0>
    33e2:	88 32       	cpi	r24, 0x28	; 40
    33e4:	11 f1       	breq	.+68     	; 0x342a <cfg_parse+0xfe>
    33e6:	8f 33       	cpi	r24, 0x3F	; 63
    33e8:	39 f5       	brne	.+78     	; 0x3438 <cfg_parse+0x10c>
    33ea:	0c c0       	rjmp	.+24     	; 0x3404 <cfg_parse+0xd8>
    33ec:	8d 34       	cpi	r24, 0x4D	; 77
    33ee:	21 f5       	brne	.+72     	; 0x3438 <cfg_parse+0x10c>
    33f0:	0e c0       	rjmp	.+28     	; 0x340e <cfg_parse+0xe2>
    33f2:	89 35       	cpi	r24, 0x59	; 89
    33f4:	29 f0       	breq	.+10     	; 0x3400 <cfg_parse+0xd4>
    33f6:	8a 35       	cpi	r24, 0x5A	; 90
    33f8:	d9 f0       	breq	.+54     	; 0x3430 <cfg_parse+0x104>
    33fa:	88 35       	cpi	r24, 0x58	; 88
    33fc:	e9 f4       	brne	.+58     	; 0x3438 <cfg_parse+0x10c>
    33fe:	1f c0       	rjmp	.+62     	; 0x343e <cfg_parse+0x112>
    3400:	11 e0       	ldi	r17, 0x01	; 1
    3402:	1e c0       	rjmp	.+60     	; 0x3440 <cfg_parse+0x114>
		case '?': cfg_dump(); status (TG_OK); break;
    3404:	0e 94 ff 18 	call	0x31fe	; 0x31fe <cfg_dump>
    3408:	10 c0       	rjmp	.+32     	; 0x342a <cfg_parse+0xfe>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    340a:	83 e0       	ldi	r24, 0x03	; 3
    340c:	16 c0       	rjmp	.+44     	; 0x343a <cfg_parse+0x10e>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    340e:	c6 01       	movw	r24, r12
    3410:	be 01       	movw	r22, r28
    3412:	6f 5f       	subi	r22, 0xFF	; 255
    3414:	7f 4f       	sbci	r23, 0xFF	; 255
    3416:	0e 94 7c 48 	call	0x90f8	; 0x90f8 <strtod>
    341a:	60 93 a1 24 	sts	0x24A1, r22
    341e:	70 93 a2 24 	sts	0x24A2, r23
    3422:	80 93 a3 24 	sts	0x24A3, r24
    3426:	90 93 a4 24 	sts	0x24A4, r25
				  status(TG_OK); 
    342a:	10 92 a0 24 	sts	0x24A0, r1
    342e:	07 c0       	rjmp	.+14     	; 0x343e <cfg_parse+0x112>
				  break;
    3430:	12 e0       	ldi	r17, 0x02	; 2
    3432:	06 c0       	rjmp	.+12     	; 0x3440 <cfg_parse+0x114>

		case 'X': axis = X; break;
		case 'Y': axis = Y; break;
		case 'Z': axis = Z; break;
    3434:	13 e0       	ldi	r17, 0x03	; 3
    3436:	04 c0       	rjmp	.+8      	; 0x3440 <cfg_parse+0x114>
		case 'A': axis = A; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    3438:	87 e0       	ldi	r24, 0x07	; 7
    343a:	80 93 a0 24 	sts	0x24A0, r24
    343e:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    3440:	80 91 a0 24 	lds	r24, 0x24A0
    3444:	88 23       	and	r24, r24
    3446:	09 f0       	breq	.+2      	; 0x344a <cfg_parse+0x11e>
    3448:	ee c0       	rjmp	.+476    	; 0x3626 <cfg_parse+0x2fa>
		status(TG_OK);							// pre-emptive setting
    344a:	10 92 a0 24 	sts	0x24A0, r1
		switch (text[1]) {
    344e:	f7 01       	movw	r30, r14
    3450:	81 81       	ldd	r24, Z+1	; 0x01
    3452:	8c 34       	cpi	r24, 0x4C	; 76
    3454:	09 f4       	brne	.+2      	; 0x3458 <cfg_parse+0x12c>
    3456:	b8 c0       	rjmp	.+368    	; 0x35c8 <cfg_parse+0x29c>
    3458:	8d 34       	cpi	r24, 0x4D	; 77
    345a:	30 f4       	brcc	.+12     	; 0x3468 <cfg_parse+0x13c>
    345c:	84 34       	cpi	r24, 0x44	; 68
    345e:	a9 f1       	breq	.+106    	; 0x34ca <cfg_parse+0x19e>
    3460:	86 34       	cpi	r24, 0x46	; 70
    3462:	09 f0       	breq	.+2      	; 0x3466 <cfg_parse+0x13a>
    3464:	dd c0       	rjmp	.+442    	; 0x3620 <cfg_parse+0x2f4>
    3466:	1d c0       	rjmp	.+58     	; 0x34a2 <cfg_parse+0x176>
    3468:	80 35       	cpi	r24, 0x50	; 80
    346a:	09 f4       	brne	.+2      	; 0x346e <cfg_parse+0x142>
    346c:	47 c0       	rjmp	.+142    	; 0x34fc <cfg_parse+0x1d0>
    346e:	83 35       	cpi	r24, 0x53	; 83
    3470:	21 f0       	breq	.+8      	; 0x347a <cfg_parse+0x14e>
    3472:	8d 34       	cpi	r24, 0x4D	; 77
    3474:	09 f0       	breq	.+2      	; 0x3478 <cfg_parse+0x14c>
    3476:	d4 c0       	rjmp	.+424    	; 0x3620 <cfg_parse+0x2f4>
    3478:	58 c0       	rjmp	.+176    	; 0x352a <cfg_parse+0x1fe>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    347a:	c6 01       	movw	r24, r12
    347c:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <atoi>
    3480:	21 2f       	mov	r18, r17
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	f9 01       	movw	r30, r18
    3486:	ee 0f       	add	r30, r30
    3488:	ff 1f       	adc	r31, r31
    348a:	e2 0f       	add	r30, r18
    348c:	f3 1f       	adc	r31, r19
    348e:	53 e0       	ldi	r21, 0x03	; 3
    3490:	ee 0f       	add	r30, r30
    3492:	ff 1f       	adc	r31, r31
    3494:	5a 95       	dec	r21
    3496:	e1 f7       	brne	.-8      	; 0x3490 <cfg_parse+0x164>
    3498:	e1 56       	subi	r30, 0x61	; 97
    349a:	fb 4d       	sbci	r31, 0xDB	; 219
    349c:	81 8b       	std	Z+17, r24	; 0x11
    349e:	92 8b       	std	Z+18, r25	; 0x12
    34a0:	c2 c0       	rjmp	.+388    	; 0x3626 <cfg_parse+0x2fa>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    34a2:	c6 01       	movw	r24, r12
    34a4:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <atoi>
    34a8:	21 2f       	mov	r18, r17
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	f9 01       	movw	r30, r18
    34ae:	ee 0f       	add	r30, r30
    34b0:	ff 1f       	adc	r31, r31
    34b2:	e2 0f       	add	r30, r18
    34b4:	f3 1f       	adc	r31, r19
    34b6:	23 e0       	ldi	r18, 0x03	; 3
    34b8:	ee 0f       	add	r30, r30
    34ba:	ff 1f       	adc	r31, r31
    34bc:	2a 95       	dec	r18
    34be:	e1 f7       	brne	.-8      	; 0x34b8 <cfg_parse+0x18c>
    34c0:	e1 56       	subi	r30, 0x61	; 97
    34c2:	fb 4d       	sbci	r31, 0xDB	; 219
    34c4:	83 8b       	std	Z+19, r24	; 0x13
    34c6:	94 8b       	std	Z+20, r25	; 0x14
    34c8:	ae c0       	rjmp	.+348    	; 0x3626 <cfg_parse+0x2fa>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    34ca:	c6 01       	movw	r24, r12
    34cc:	be 01       	movw	r22, r28
    34ce:	6f 5f       	subi	r22, 0xFF	; 255
    34d0:	7f 4f       	sbci	r23, 0xFF	; 255
    34d2:	0e 94 7c 48 	call	0x90f8	; 0x90f8 <strtod>
    34d6:	21 2f       	mov	r18, r17
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	f9 01       	movw	r30, r18
    34dc:	ee 0f       	add	r30, r30
    34de:	ff 1f       	adc	r31, r31
    34e0:	e2 0f       	add	r30, r18
    34e2:	f3 1f       	adc	r31, r19
    34e4:	b3 e0       	ldi	r27, 0x03	; 3
    34e6:	ee 0f       	add	r30, r30
    34e8:	ff 1f       	adc	r31, r31
    34ea:	ba 95       	dec	r27
    34ec:	e1 f7       	brne	.-8      	; 0x34e6 <cfg_parse+0x1ba>
    34ee:	e1 56       	subi	r30, 0x61	; 97
    34f0:	fb 4d       	sbci	r31, 0xDB	; 219
    34f2:	65 8b       	std	Z+21, r22	; 0x15
    34f4:	76 8b       	std	Z+22, r23	; 0x16
    34f6:	87 8b       	std	Z+23, r24	; 0x17
    34f8:	90 8f       	std	Z+24, r25	; 0x18
    34fa:	95 c0       	rjmp	.+298    	; 0x3626 <cfg_parse+0x2fa>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    34fc:	c6 01       	movw	r24, r12
    34fe:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <atoi>
    3502:	68 2f       	mov	r22, r24
    3504:	81 2f       	mov	r24, r17
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	fc 01       	movw	r30, r24
    350a:	ee 0f       	add	r30, r30
    350c:	ff 1f       	adc	r31, r31
    350e:	e8 0f       	add	r30, r24
    3510:	f9 1f       	adc	r31, r25
    3512:	73 e0       	ldi	r23, 0x03	; 3
    3514:	ee 0f       	add	r30, r30
    3516:	ff 1f       	adc	r31, r31
    3518:	7a 95       	dec	r23
    351a:	e1 f7       	brne	.-8      	; 0x3514 <cfg_parse+0x1e8>
    351c:	e1 56       	subi	r30, 0x61	; 97
    351e:	fb 4d       	sbci	r31, 0xDB	; 219
    3520:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    3522:	81 2f       	mov	r24, r17
    3524:	0e 94 a5 24 	call	0x494a	; 0x494a <st_set_polarity>
    3528:	7e c0       	rjmp	.+252    	; 0x3626 <cfg_parse+0x2fa>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    352a:	f7 01       	movw	r30, r14
    352c:	82 81       	ldd	r24, Z+2	; 0x02
    352e:	89 34       	cpi	r24, 0x49	; 73
    3530:	99 f4       	brne	.+38     	; 0x3558 <cfg_parse+0x22c>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    3532:	c6 01       	movw	r24, r12
    3534:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <atoi>
    3538:	21 2f       	mov	r18, r17
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	f9 01       	movw	r30, r18
    353e:	ee 0f       	add	r30, r30
    3540:	ff 1f       	adc	r31, r31
    3542:	e2 0f       	add	r30, r18
    3544:	f3 1f       	adc	r31, r19
    3546:	53 e0       	ldi	r21, 0x03	; 3
    3548:	ee 0f       	add	r30, r30
    354a:	ff 1f       	adc	r31, r31
    354c:	5a 95       	dec	r21
    354e:	e1 f7       	brne	.-8      	; 0x3548 <cfg_parse+0x21c>
    3550:	e1 56       	subi	r30, 0x61	; 97
    3552:	fb 4d       	sbci	r31, 0xDB	; 219
    3554:	86 87       	std	Z+14, r24	; 0x0e
    3556:	67 c0       	rjmp	.+206    	; 0x3626 <cfg_parse+0x2fa>
				} else if (text[3] == 'R') {
    3558:	f7 01       	movw	r30, r14
    355a:	83 81       	ldd	r24, Z+3	; 0x03
    355c:	82 35       	cpi	r24, 0x52	; 82
    355e:	c9 f4       	brne	.+50     	; 0x3592 <cfg_parse+0x266>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    3560:	c6 01       	movw	r24, r12
    3562:	be 01       	movw	r22, r28
    3564:	6f 5f       	subi	r22, 0xFF	; 255
    3566:	7f 4f       	sbci	r23, 0xFF	; 255
    3568:	0e 94 7c 48 	call	0x90f8	; 0x90f8 <strtod>
    356c:	21 2f       	mov	r18, r17
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	f9 01       	movw	r30, r18
    3572:	ee 0f       	add	r30, r30
    3574:	ff 1f       	adc	r31, r31
    3576:	e2 0f       	add	r30, r18
    3578:	f3 1f       	adc	r31, r19
    357a:	13 e0       	ldi	r17, 0x03	; 3
    357c:	ee 0f       	add	r30, r30
    357e:	ff 1f       	adc	r31, r31
    3580:	1a 95       	dec	r17
    3582:	e1 f7       	brne	.-8      	; 0x357c <cfg_parse+0x250>
    3584:	e1 56       	subi	r30, 0x61	; 97
    3586:	fb 4d       	sbci	r31, 0xDB	; 219
    3588:	61 8f       	std	Z+25, r22	; 0x19
    358a:	72 8f       	std	Z+26, r23	; 0x1a
    358c:	83 8f       	std	Z+27, r24	; 0x1b
    358e:	94 8f       	std	Z+28, r25	; 0x1c
    3590:	4a c0       	rjmp	.+148    	; 0x3626 <cfg_parse+0x2fa>
				} else if (text[3] == 'T') {
    3592:	84 35       	cpi	r24, 0x54	; 84
    3594:	c9 f4       	brne	.+50     	; 0x35c8 <cfg_parse+0x29c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    3596:	c6 01       	movw	r24, r12
    3598:	be 01       	movw	r22, r28
    359a:	6f 5f       	subi	r22, 0xFF	; 255
    359c:	7f 4f       	sbci	r23, 0xFF	; 255
    359e:	0e 94 7c 48 	call	0x90f8	; 0x90f8 <strtod>
    35a2:	21 2f       	mov	r18, r17
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	f9 01       	movw	r30, r18
    35a8:	ee 0f       	add	r30, r30
    35aa:	ff 1f       	adc	r31, r31
    35ac:	e2 0f       	add	r30, r18
    35ae:	f3 1f       	adc	r31, r19
    35b0:	a3 e0       	ldi	r26, 0x03	; 3
    35b2:	ee 0f       	add	r30, r30
    35b4:	ff 1f       	adc	r31, r31
    35b6:	aa 95       	dec	r26
    35b8:	e1 f7       	brne	.-8      	; 0x35b2 <cfg_parse+0x286>
    35ba:	e1 56       	subi	r30, 0x61	; 97
    35bc:	fb 4d       	sbci	r31, 0xDB	; 219
    35be:	65 8f       	std	Z+29, r22	; 0x1d
    35c0:	76 8f       	std	Z+30, r23	; 0x1e
    35c2:	87 8f       	std	Z+31, r24	; 0x1f
    35c4:	90 a3       	std	Z+32, r25	; 0x20
    35c6:	2f c0       	rjmp	.+94     	; 0x3626 <cfg_parse+0x2fa>
				}
			case 'L': 
				if (text[2] == 'O') {
    35c8:	f7 01       	movw	r30, r14
    35ca:	82 81       	ldd	r24, Z+2	; 0x02
    35cc:	8f 34       	cpi	r24, 0x4F	; 79
    35ce:	99 f4       	brne	.+38     	; 0x35f6 <cfg_parse+0x2ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    35d0:	c6 01       	movw	r24, r12
    35d2:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <atoi>
    35d6:	21 2f       	mov	r18, r17
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	f9 01       	movw	r30, r18
    35dc:	ee 0f       	add	r30, r30
    35de:	ff 1f       	adc	r31, r31
    35e0:	e2 0f       	add	r30, r18
    35e2:	f3 1f       	adc	r31, r19
    35e4:	53 e0       	ldi	r21, 0x03	; 3
    35e6:	ee 0f       	add	r30, r30
    35e8:	ff 1f       	adc	r31, r31
    35ea:	5a 95       	dec	r21
    35ec:	e1 f7       	brne	.-8      	; 0x35e6 <cfg_parse+0x2ba>
    35ee:	e1 56       	subi	r30, 0x61	; 97
    35f0:	fb 4d       	sbci	r31, 0xDB	; 219
    35f2:	87 87       	std	Z+15, r24	; 0x0f
    35f4:	18 c0       	rjmp	.+48     	; 0x3626 <cfg_parse+0x2fa>
				} else if (text[2] == 'I') {
    35f6:	89 34       	cpi	r24, 0x49	; 73
    35f8:	99 f4       	brne	.+38     	; 0x3620 <cfg_parse+0x2f4>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    35fa:	c6 01       	movw	r24, r12
    35fc:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <atoi>
    3600:	21 2f       	mov	r18, r17
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	f9 01       	movw	r30, r18
    3606:	ee 0f       	add	r30, r30
    3608:	ff 1f       	adc	r31, r31
    360a:	e2 0f       	add	r30, r18
    360c:	f3 1f       	adc	r31, r19
    360e:	23 e0       	ldi	r18, 0x03	; 3
    3610:	ee 0f       	add	r30, r30
    3612:	ff 1f       	adc	r31, r31
    3614:	2a 95       	dec	r18
    3616:	e1 f7       	brne	.-8      	; 0x3610 <cfg_parse+0x2e4>
    3618:	e1 56       	subi	r30, 0x61	; 97
    361a:	fb 4d       	sbci	r31, 0xDB	; 219
    361c:	85 a3       	std	Z+37, r24	; 0x25
    361e:	03 c0       	rjmp	.+6      	; 0x3626 <cfg_parse+0x2fa>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    3620:	87 e0       	ldi	r24, 0x07	; 7
    3622:	80 93 a0 24 	sts	0x24A0, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    3626:	80 91 a0 24 	lds	r24, 0x24A0
    362a:	b7 01       	movw	r22, r14
    362c:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    3630:	80 91 a0 24 	lds	r24, 0x24A0
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	cf 91       	pop	r28
    363c:	df 91       	pop	r29
    363e:	1f 91       	pop	r17
    3640:	ff 90       	pop	r15
    3642:	ef 90       	pop	r14
    3644:	df 90       	pop	r13
    3646:	cf 90       	pop	r12
    3648:	08 95       	ret

0000364a <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    364a:	ef 92       	push	r14
    364c:	ff 92       	push	r15
    364e:	0f 93       	push	r16
    3650:	1f 93       	push	r17
    3652:	df 93       	push	r29
    3654:	cf 93       	push	r28
    3656:	cd b7       	in	r28, 0x3d	; 61
    3658:	de b7       	in	r29, 0x3e	; 62
    365a:	a8 97       	sbiw	r28, 0x28	; 40
    365c:	cd bf       	out	0x3d, r28	; 61
    365e:	de bf       	out	0x3e, r29	; 62
    3660:	0b e4       	ldi	r16, 0x4B	; 75
    3662:	12 e0       	ldi	r17, 0x02	; 2
    3664:	a0 e0       	ldi	r26, 0x00	; 0
    3666:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    3668:	7e 01       	movw	r14, r28
    366a:	08 94       	sec
    366c:	e1 1c       	adc	r14, r1
    366e:	f1 1c       	adc	r15, r1
    3670:	02 c0       	rjmp	.+4      	; 0x3676 <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3672:	0f 5f       	subi	r16, 0xFF	; 255
    3674:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    3676:	f8 01       	movw	r30, r16
    3678:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    367a:	88 23       	and	r24, r24
    367c:	89 f4       	brne	.+34     	; 0x36a0 <cfg_test+0x56>
			text[j] = 0;
    367e:	ce 01       	movw	r24, r28
    3680:	01 96       	adiw	r24, 0x01	; 1
    3682:	a8 0f       	add	r26, r24
    3684:	b9 1f       	adc	r27, r25
    3686:	1c 92       	st	X, r1
			cfg_parse(text);
    3688:	0e 94 96 19 	call	0x332c	; 0x332c <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    368c:	a8 96       	adiw	r28, 0x28	; 40
    368e:	cd bf       	out	0x3d, r28	; 61
    3690:	de bf       	out	0x3e, r29	; 62
    3692:	cf 91       	pop	r28
    3694:	df 91       	pop	r29
    3696:	1f 91       	pop	r17
    3698:	0f 91       	pop	r16
    369a:	ff 90       	pop	r15
    369c:	ef 90       	pop	r14
    369e:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    36a0:	8d 30       	cpi	r24, 0x0D	; 13
    36a2:	21 f0       	breq	.+8      	; 0x36ac <cfg_test+0x62>
    36a4:	8a 30       	cpi	r24, 0x0A	; 10
    36a6:	11 f0       	breq	.+4      	; 0x36ac <cfg_test+0x62>
    36a8:	8b 33       	cpi	r24, 0x3B	; 59
    36aa:	49 f4       	brne	.+18     	; 0x36be <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    36ac:	ae 0d       	add	r26, r14
    36ae:	bf 1d       	adc	r27, r15
    36b0:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    36b2:	c7 01       	movw	r24, r14
    36b4:	0e 94 96 19 	call	0x332c	; 0x332c <cfg_parse>
    36b8:	a0 e0       	ldi	r26, 0x00	; 0
    36ba:	b0 e0       	ldi	r27, 0x00	; 0
    36bc:	da cf       	rjmp	.-76     	; 0x3672 <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    36be:	81 32       	cpi	r24, 0x21	; 33
    36c0:	c0 f2       	brcs	.-80     	; 0x3672 <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    36c2:	f7 01       	movw	r30, r14
    36c4:	ea 0f       	add	r30, r26
    36c6:	fb 1f       	adc	r31, r27
    36c8:	80 83       	st	Z, r24
    36ca:	11 96       	adiw	r26, 0x01	; 1
    36cc:	d2 cf       	rjmp	.-92     	; 0x3672 <cfg_test+0x28>

000036ce <en_init>:


void en_init(void) 
{
	return;
}
    36ce:	08 95       	ret

000036d0 <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
    36d0:	88 23       	and	r24, r24
    36d2:	b1 f0       	breq	.+44     	; 0x3700 <en_write+0x30>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    36d4:	e0 91 9b 24 	lds	r30, 0x249B
    36d8:	f0 91 9c 24 	lds	r31, 0x249C
    36dc:	80 e2       	ldi	r24, 0x20	; 32
    36de:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    36e0:	e0 91 8b 24 	lds	r30, 0x248B
    36e4:	f0 91 8c 24 	lds	r31, 0x248C
    36e8:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    36ea:	e0 91 7b 24 	lds	r30, 0x247B
    36ee:	f0 91 7c 24 	lds	r31, 0x247C
    36f2:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    36f4:	e0 91 6b 24 	lds	r30, 0x246B
    36f8:	f0 91 6c 24 	lds	r31, 0x246C
    36fc:	85 83       	std	Z+5, r24	; 0x05
    36fe:	08 95       	ret
void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    3700:	e0 91 9b 24 	lds	r30, 0x249B
    3704:	f0 91 9c 24 	lds	r31, 0x249C
    3708:	80 e2       	ldi	r24, 0x20	; 32
    370a:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    370c:	e0 91 8b 24 	lds	r30, 0x248B
    3710:	f0 91 8c 24 	lds	r31, 0x248C
    3714:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    3716:	e0 91 7b 24 	lds	r30, 0x247B
    371a:	f0 91 7c 24 	lds	r31, 0x247C
    371e:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    3720:	e0 91 6b 24 	lds	r30, 0x246B
    3724:	f0 91 6c 24 	lds	r31, 0x246C
    3728:	86 83       	std	Z+6, r24	; 0x06
    372a:	08 95       	ret

0000372c <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    372c:	0f 93       	push	r16
    372e:	df 93       	push	r29
    3730:	cf 93       	push	r28
    3732:	0f 92       	push	r0
    3734:	cd b7       	in	r28, 0x3d	; 61
    3736:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    3738:	8b ec       	ldi	r24, 0xCB	; 203
    373a:	e0 e5       	ldi	r30, 0x50	; 80
    373c:	f0 e0       	ldi	r31, 0x00	; 0
    373e:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    3740:	88 e0       	ldi	r24, 0x08	; 8
    3742:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    3746:	80 91 51 00 	lds	r24, 0x0051
    374a:	83 ff       	sbrs	r24, 3
    374c:	fc cf       	rjmp	.-8      	; 0x3746 <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    374e:	82 ec       	ldi	r24, 0xC2	; 194
    3750:	e0 e5       	ldi	r30, 0x50	; 80
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    3756:	88 e1       	ldi	r24, 0x18	; 24
    3758:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    375c:	80 91 51 00 	lds	r24, 0x0051
    3760:	84 ff       	sbrs	r24, 4
    3762:	fc cf       	rjmp	.-8      	; 0x375c <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3764:	8f b7       	in	r24, 0x3f	; 63
    3766:	89 83       	std	Y+1, r24	; 0x01
    3768:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    376a:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    376c:	24 e0       	ldi	r18, 0x04	; 4
    376e:	80 e4       	ldi	r24, 0x40	; 64
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	fc 01       	movw	r30, r24
    3774:	08 ed       	ldi	r16, 0xD8	; 216
    3776:	04 bf       	out	0x34, r16	; 52
    3778:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    377a:	89 81       	ldd	r24, Y+1	; 0x01
    377c:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    377e:	80 91 50 00 	lds	r24, 0x0050
    3782:	8e 7f       	andi	r24, 0xFE	; 254
    3784:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    3788:	0f 90       	pop	r0
    378a:	cf 91       	pop	r28
    378c:	df 91       	pop	r29
    378e:	0f 91       	pop	r16
    3790:	08 95       	ret

00003792 <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    3792:	0e 94 96 1b 	call	0x372c	; 0x372c <xmega_init_clocks>
}
    3796:	08 95       	ret

00003798 <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3798:	0f 93       	push	r16
    379a:	df 93       	push	r29
    379c:	cf 93       	push	r28
    379e:	0f 92       	push	r0
    37a0:	cd b7       	in	r28, 0x3d	; 61
    37a2:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    37a4:	2f b7       	in	r18, 0x3f	; 63
    37a6:	29 83       	std	Y+1, r18	; 0x01
    37a8:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    37aa:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    37ac:	fc 01       	movw	r30, r24
    37ae:	08 ed       	ldi	r16, 0xD8	; 216
    37b0:	04 bf       	out	0x34, r16	; 52
    37b2:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    37b4:	89 81       	ldd	r24, Y+1	; 0x01
    37b6:	8f bf       	out	0x3f, r24	; 63
#endif
}
    37b8:	0f 90       	pop	r0
    37ba:	cf 91       	pop	r28
    37bc:	df 91       	pop	r29
    37be:	0f 91       	pop	r16
    37c0:	08 95       	ret

000037c2 <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

void mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    37c2:	10 92 84 21 	sts	0x2184, r1
	ma.arc_state = MC_STATE_OFF;
    37c6:	10 92 0f 25 	sts	0x250F, r1
}
    37ca:	08 95       	ret

000037cc <mc_go_home>:
 */

void mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    37cc:	8c e0       	ldi	r24, 0x0C	; 12
    37ce:	e5 e8       	ldi	r30, 0x85	; 133
    37d0:	f1 e2       	ldi	r31, 0x21	; 33
    37d2:	df 01       	movw	r26, r30
    37d4:	1d 92       	st	X+, r1
    37d6:	8a 95       	dec	r24
    37d8:	e9 f7       	brne	.-6      	; 0x37d4 <mc_go_home+0x8>
}
    37da:	08 95       	ret

000037dc <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    37dc:	8c e0       	ldi	r24, 0x0C	; 12
    37de:	e5 e8       	ldi	r30, 0x85	; 133
    37e0:	f1 e2       	ldi	r31, 0x21	; 33
    37e2:	df 01       	movw	r26, r30
    37e4:	1d 92       	st	X+, r1
    37e6:	8a 95       	dec	r24
    37e8:	e9 f7       	brne	.-6      	; 0x37e4 <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    37ea:	10 92 84 21 	sts	0x2184, r1
	ma.arc_state = MC_STATE_OFF;
    37ee:	10 92 0f 25 	sts	0x250F, r1
}
    37f2:	08 95       	ret

000037f4 <mc_line_continuation>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continuation() 
{
    37f4:	af 92       	push	r10
    37f6:	bf 92       	push	r11
    37f8:	cf 92       	push	r12
    37fa:	df 92       	push	r13
    37fc:	ef 92       	push	r14
    37fe:	ff 92       	push	r15
    3800:	0f 93       	push	r16
    3802:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    3804:	80 91 84 21 	lds	r24, 0x2184
    3808:	88 23       	and	r24, r24
    380a:	19 f4       	brne	.+6      	; 0x3812 <mc_line_continuation+0x1e>
    380c:	21 e0       	ldi	r18, 0x01	; 1
    380e:	30 e0       	ldi	r19, 0x00	; 0
    3810:	30 c0       	rjmp	.+96     	; 0x3872 <mc_line_continuation+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    3812:	82 e0       	ldi	r24, 0x02	; 2
    3814:	80 93 84 21 	sts	0x2184, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    3818:	0e 94 3d 32 	call	0x647a	; 0x647a <mv_test_move_buffer_full>
    381c:	88 23       	and	r24, r24
    381e:	19 f0       	breq	.+6      	; 0x3826 <mc_line_continuation+0x32>
    3820:	22 e0       	ldi	r18, 0x02	; 2
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	26 c0       	rjmp	.+76     	; 0x3872 <mc_line_continuation+0x7e>
		return (TG_CONTINUE);
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    3826:	60 91 9d 21 	lds	r22, 0x219D
    382a:	70 91 9e 21 	lds	r23, 0x219E
    382e:	80 91 9f 21 	lds	r24, 0x219F
    3832:	90 91 a0 21 	lds	r25, 0x21A0
    3836:	20 91 a1 21 	lds	r18, 0x21A1
    383a:	30 91 a2 21 	lds	r19, 0x21A2
    383e:	40 91 a3 21 	lds	r20, 0x21A3
    3842:	50 91 a4 21 	lds	r21, 0x21A4
    3846:	e0 90 a5 21 	lds	r14, 0x21A5
    384a:	f0 90 a6 21 	lds	r15, 0x21A6
    384e:	00 91 a7 21 	lds	r16, 0x21A7
    3852:	10 91 a8 21 	lds	r17, 0x21A8
    3856:	a0 90 a9 21 	lds	r10, 0x21A9
    385a:	b0 90 aa 21 	lds	r11, 0x21AA
    385e:	c0 90 ab 21 	lds	r12, 0x21AB
    3862:	d0 90 ac 21 	lds	r13, 0x21AC
    3866:	0e 94 69 32 	call	0x64d2	; 0x64d2 <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    386a:	10 92 84 21 	sts	0x2184, r1
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3872:	c9 01       	movw	r24, r18
    3874:	1f 91       	pop	r17
    3876:	0f 91       	pop	r16
    3878:	ff 90       	pop	r15
    387a:	ef 90       	pop	r14
    387c:	df 90       	pop	r13
    387e:	cf 90       	pop	r12
    3880:	bf 90       	pop	r11
    3882:	af 90       	pop	r10
    3884:	08 95       	ret

00003886 <mc_dwell>:
 * Dwells are queued as linbes so the line continuation is used for non-blocking.
 */

int mc_dwell(double seconds) 
{
	mc.steps[X] = 0;
    3886:	10 92 9d 21 	sts	0x219D, r1
    388a:	10 92 9e 21 	sts	0x219E, r1
    388e:	10 92 9f 21 	sts	0x219F, r1
    3892:	10 92 a0 21 	sts	0x21A0, r1
	mc.steps[Y] = 0;
    3896:	10 92 a1 21 	sts	0x21A1, r1
    389a:	10 92 a2 21 	sts	0x21A2, r1
    389e:	10 92 a3 21 	sts	0x21A3, r1
    38a2:	10 92 a4 21 	sts	0x21A4, r1
	mc.steps[Z] = 0;
    38a6:	10 92 a5 21 	sts	0x21A5, r1
    38aa:	10 92 a6 21 	sts	0x21A6, r1
    38ae:	10 92 a7 21 	sts	0x21A7, r1
    38b2:	10 92 a8 21 	sts	0x21A8, r1
	mc.microseconds = trunc(seconds*1000000);
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	34 e2       	ldi	r19, 0x24	; 36
    38ba:	44 e7       	ldi	r20, 0x74	; 116
    38bc:	59 e4       	ldi	r21, 0x49	; 73
    38be:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    38c2:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__fixunssfsi>
    38c6:	60 93 a9 21 	sts	0x21A9, r22
    38ca:	70 93 aa 21 	sts	0x21AA, r23
    38ce:	80 93 ab 21 	sts	0x21AB, r24
    38d2:	90 93 ac 21 	sts	0x21AC, r25
	mc.line_state = MC_STATE_NEW;
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	80 93 84 21 	sts	0x2184, r24
	return (mc_line_continuation());
    38dc:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <mc_line_continuation>
}
    38e0:	08 95       	ret

000038e2 <mc_line_nonblock>:
/* 
 * mc_line_nonblock() - mc_line with non-blocking behavior
 */

int mc_line_nonblock(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    38e2:	2f 92       	push	r2
    38e4:	3f 92       	push	r3
    38e6:	4f 92       	push	r4
    38e8:	5f 92       	push	r5
    38ea:	6f 92       	push	r6
    38ec:	7f 92       	push	r7
    38ee:	8f 92       	push	r8
    38f0:	9f 92       	push	r9
    38f2:	af 92       	push	r10
    38f4:	bf 92       	push	r11
    38f6:	cf 92       	push	r12
    38f8:	df 92       	push	r13
    38fa:	ef 92       	push	r14
    38fc:	ff 92       	push	r15
    38fe:	0f 93       	push	r16
    3900:	1f 93       	push	r17
    3902:	df 93       	push	r29
    3904:	cf 93       	push	r28
    3906:	cd b7       	in	r28, 0x3d	; 61
    3908:	de b7       	in	r29, 0x3e	; 62
    390a:	64 97       	sbiw	r28, 0x14	; 20
    390c:	cd bf       	out	0x3d, r28	; 61
    390e:	de bf       	out	0x3e, r29	; 62
    3910:	2d 87       	std	Y+13, r18	; 0x0d
    3912:	3e 87       	std	Y+14, r19	; 0x0e
    3914:	4f 87       	std	Y+15, r20	; 0x0f
    3916:	58 8b       	std	Y+16, r21	; 0x10
    3918:	a9 8a       	std	Y+17, r10	; 0x11
    391a:	ba 8a       	std	Y+18, r11	; 0x12
    391c:	cb 8a       	std	Y+19, r12	; 0x13
    391e:	dc 8a       	std	Y+20, r13	; 0x14
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    3920:	20 91 c0 24 	lds	r18, 0x24C0
    3924:	30 91 c1 24 	lds	r19, 0x24C1
    3928:	40 91 c2 24 	lds	r20, 0x24C2
    392c:	50 91 c3 24 	lds	r21, 0x24C3
    3930:	29 87       	std	Y+9, r18	; 0x09
    3932:	3a 87       	std	Y+10, r19	; 0x0a
    3934:	4b 87       	std	Y+11, r20	; 0x0b
    3936:	5c 87       	std	Y+12, r21	; 0x0c
    3938:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    393c:	0e 94 03 47 	call	0x8e06	; 0x8e06 <lround>
    3940:	2b 01       	movw	r4, r22
    3942:	3c 01       	movw	r6, r24
    3944:	40 92 91 21 	sts	0x2191, r4
    3948:	50 92 92 21 	sts	0x2192, r5
    394c:	60 92 93 21 	sts	0x2193, r6
    3950:	70 92 94 21 	sts	0x2194, r7
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    3954:	80 91 d8 24 	lds	r24, 0x24D8
    3958:	90 91 d9 24 	lds	r25, 0x24D9
    395c:	a0 91 da 24 	lds	r26, 0x24DA
    3960:	b0 91 db 24 	lds	r27, 0x24DB
    3964:	8d 83       	std	Y+5, r24	; 0x05
    3966:	9e 83       	std	Y+6, r25	; 0x06
    3968:	af 83       	std	Y+7, r26	; 0x07
    396a:	b8 87       	std	Y+8, r27	; 0x08
    396c:	6d 85       	ldd	r22, Y+13	; 0x0d
    396e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3970:	8f 85       	ldd	r24, Y+15	; 0x0f
    3972:	98 89       	ldd	r25, Y+16	; 0x10
    3974:	2d 81       	ldd	r18, Y+5	; 0x05
    3976:	3e 81       	ldd	r19, Y+6	; 0x06
    3978:	4f 81       	ldd	r20, Y+7	; 0x07
    397a:	58 85       	ldd	r21, Y+8	; 0x08
    397c:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    3980:	0e 94 03 47 	call	0x8e06	; 0x8e06 <lround>
    3984:	5b 01       	movw	r10, r22
    3986:	6c 01       	movw	r12, r24
    3988:	a0 92 95 21 	sts	0x2195, r10
    398c:	b0 92 96 21 	sts	0x2196, r11
    3990:	c0 92 97 21 	sts	0x2197, r12
    3994:	d0 92 98 21 	sts	0x2198, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    3998:	20 91 f0 24 	lds	r18, 0x24F0
    399c:	30 91 f1 24 	lds	r19, 0x24F1
    39a0:	40 91 f2 24 	lds	r20, 0x24F2
    39a4:	50 91 f3 24 	lds	r21, 0x24F3
    39a8:	29 83       	std	Y+1, r18	; 0x01
    39aa:	3a 83       	std	Y+2, r19	; 0x02
    39ac:	4b 83       	std	Y+3, r20	; 0x03
    39ae:	5c 83       	std	Y+4, r21	; 0x04
    39b0:	c8 01       	movw	r24, r16
    39b2:	b7 01       	movw	r22, r14
    39b4:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    39b8:	0e 94 03 47 	call	0x8e06	; 0x8e06 <lround>
    39bc:	9b 01       	movw	r18, r22
    39be:	ac 01       	movw	r20, r24
    39c0:	20 93 99 21 	sts	0x2199, r18
    39c4:	30 93 9a 21 	sts	0x219A, r19
    39c8:	40 93 9b 21 	sts	0x219B, r20
    39cc:	50 93 9c 21 	sts	0x219C, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    39d0:	80 91 85 21 	lds	r24, 0x2185
    39d4:	90 91 86 21 	lds	r25, 0x2186
    39d8:	a0 91 87 21 	lds	r26, 0x2187
    39dc:	b0 91 88 21 	lds	r27, 0x2188
    39e0:	83 01       	movw	r16, r6
    39e2:	72 01       	movw	r14, r4
    39e4:	e8 1a       	sub	r14, r24
    39e6:	f9 0a       	sbc	r15, r25
    39e8:	0a 0b       	sbc	r16, r26
    39ea:	1b 0b       	sbc	r17, r27
    39ec:	e0 92 9d 21 	sts	0x219D, r14
    39f0:	f0 92 9e 21 	sts	0x219E, r15
    39f4:	00 93 9f 21 	sts	0x219F, r16
    39f8:	10 93 a0 21 	sts	0x21A0, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    39fc:	80 91 89 21 	lds	r24, 0x2189
    3a00:	90 91 8a 21 	lds	r25, 0x218A
    3a04:	a0 91 8b 21 	lds	r26, 0x218B
    3a08:	b0 91 8c 21 	lds	r27, 0x218C
    3a0c:	a8 1a       	sub	r10, r24
    3a0e:	b9 0a       	sbc	r11, r25
    3a10:	ca 0a       	sbc	r12, r26
    3a12:	db 0a       	sbc	r13, r27
    3a14:	a0 92 a1 21 	sts	0x21A1, r10
    3a18:	b0 92 a2 21 	sts	0x21A2, r11
    3a1c:	c0 92 a3 21 	sts	0x21A3, r12
    3a20:	d0 92 a4 21 	sts	0x21A4, r13
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    3a24:	80 91 8d 21 	lds	r24, 0x218D
    3a28:	90 91 8e 21 	lds	r25, 0x218E
    3a2c:	a0 91 8f 21 	lds	r26, 0x218F
    3a30:	b0 91 90 21 	lds	r27, 0x2190
    3a34:	19 01       	movw	r2, r18
    3a36:	2a 01       	movw	r4, r20
    3a38:	28 1a       	sub	r2, r24
    3a3a:	39 0a       	sbc	r3, r25
    3a3c:	4a 0a       	sbc	r4, r26
    3a3e:	5b 0a       	sbc	r5, r27
    3a40:	20 92 a5 21 	sts	0x21A5, r2
    3a44:	30 92 a6 21 	sts	0x21A6, r3
    3a48:	40 92 a7 21 	sts	0x21A7, r4
    3a4c:	50 92 a8 21 	sts	0x21A8, r5

	if (invert_feed_rate) {
    3a50:	89 28       	or	r8, r9
    3a52:	59 f0       	breq	.+22     	; 0x3a6a <mc_line_nonblock+0x188>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3a54:	60 ec       	ldi	r22, 0xC0	; 192
    3a56:	71 ee       	ldi	r23, 0xE1	; 225
    3a58:	84 e6       	ldi	r24, 0x64	; 100
    3a5a:	9c e4       	ldi	r25, 0x4C	; 76
    3a5c:	29 89       	ldd	r18, Y+17	; 0x11
    3a5e:	3a 89       	ldd	r19, Y+18	; 0x12
    3a60:	4b 89       	ldd	r20, Y+19	; 0x13
    3a62:	5c 89       	ldd	r21, Y+20	; 0x14
    3a64:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    3a68:	4a c0       	rjmp	.+148    	; 0x3afe <mc_line_nonblock+0x21c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    3a6a:	c8 01       	movw	r24, r16
    3a6c:	b7 01       	movw	r22, r14
    3a6e:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    3a72:	29 85       	ldd	r18, Y+9	; 0x09
    3a74:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a76:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a78:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a7a:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    3a7e:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <square>
    3a82:	3b 01       	movw	r6, r22
    3a84:	4c 01       	movw	r8, r24
    3a86:	c6 01       	movw	r24, r12
    3a88:	b5 01       	movw	r22, r10
    3a8a:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    3a8e:	2d 81       	ldd	r18, Y+5	; 0x05
    3a90:	3e 81       	ldd	r19, Y+6	; 0x06
    3a92:	4f 81       	ldd	r20, Y+7	; 0x07
    3a94:	58 85       	ldd	r21, Y+8	; 0x08
    3a96:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    3a9a:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <square>
    3a9e:	5b 01       	movw	r10, r22
    3aa0:	6c 01       	movw	r12, r24
    3aa2:	c2 01       	movw	r24, r4
    3aa4:	b1 01       	movw	r22, r2
    3aa6:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    3aaa:	29 81       	ldd	r18, Y+1	; 0x01
    3aac:	3a 81       	ldd	r19, Y+2	; 0x02
    3aae:	4b 81       	ldd	r20, Y+3	; 0x03
    3ab0:	5c 81       	ldd	r21, Y+4	; 0x04
    3ab2:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    3ab6:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <square>
    3aba:	7b 01       	movw	r14, r22
    3abc:	8c 01       	movw	r16, r24
    3abe:	c4 01       	movw	r24, r8
    3ac0:	b3 01       	movw	r22, r6
    3ac2:	a6 01       	movw	r20, r12
    3ac4:	95 01       	movw	r18, r10
    3ac6:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__addsf3>
    3aca:	a8 01       	movw	r20, r16
    3acc:	97 01       	movw	r18, r14
    3ace:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__addsf3>
    3ad2:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <sqrt>
    3ad6:	60 93 ad 21 	sts	0x21AD, r22
    3ada:	70 93 ae 21 	sts	0x21AE, r23
    3ade:	80 93 af 21 	sts	0x21AF, r24
    3ae2:	90 93 b0 21 	sts	0x21B0, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3ae6:	29 89       	ldd	r18, Y+17	; 0x11
    3ae8:	3a 89       	ldd	r19, Y+18	; 0x12
    3aea:	4b 89       	ldd	r20, Y+19	; 0x13
    3aec:	5c 89       	ldd	r21, Y+20	; 0x14
    3aee:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	34 e2       	ldi	r19, 0x24	; 36
    3af6:	44 e7       	ldi	r20, 0x74	; 116
    3af8:	59 e4       	ldi	r21, 0x49	; 73
    3afa:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    3afe:	0e 94 03 47 	call	0x8e06	; 0x8e06 <lround>
    3b02:	60 93 a9 21 	sts	0x21A9, r22
    3b06:	70 93 aa 21 	sts	0x21AA, r23
    3b0a:	80 93 ab 21 	sts	0x21AB, r24
    3b0e:	90 93 ac 21 	sts	0x21AC, r25
	}
	mc.line_state = MC_STATE_NEW;
    3b12:	81 e0       	ldi	r24, 0x01	; 1
    3b14:	80 93 84 21 	sts	0x2184, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3b18:	e5 e8       	ldi	r30, 0x85	; 133
    3b1a:	f1 e2       	ldi	r31, 0x21	; 33
    3b1c:	df 01       	movw	r26, r30
    3b1e:	1c 96       	adiw	r26, 0x0c	; 12
    3b20:	8c e0       	ldi	r24, 0x0C	; 12
    3b22:	0d 90       	ld	r0, X+
    3b24:	01 92       	st	Z+, r0
    3b26:	81 50       	subi	r24, 0x01	; 1
    3b28:	e1 f7       	brne	.-8      	; 0x3b22 <mc_line_nonblock+0x240>
	return (mc_line_continuation());
    3b2a:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <mc_line_continuation>
}
    3b2e:	64 96       	adiw	r28, 0x14	; 20
    3b30:	cd bf       	out	0x3d, r28	; 61
    3b32:	de bf       	out	0x3e, r29	; 62
    3b34:	cf 91       	pop	r28
    3b36:	df 91       	pop	r29
    3b38:	1f 91       	pop	r17
    3b3a:	0f 91       	pop	r16
    3b3c:	ff 90       	pop	r15
    3b3e:	ef 90       	pop	r14
    3b40:	df 90       	pop	r13
    3b42:	cf 90       	pop	r12
    3b44:	bf 90       	pop	r11
    3b46:	af 90       	pop	r10
    3b48:	9f 90       	pop	r9
    3b4a:	8f 90       	pop	r8
    3b4c:	7f 90       	pop	r7
    3b4e:	6f 90       	pop	r6
    3b50:	5f 90       	pop	r5
    3b52:	4f 90       	pop	r4
    3b54:	3f 90       	pop	r3
    3b56:	2f 90       	pop	r2
    3b58:	08 95       	ret

00003b5a <mc_line>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    3b5a:	2f 92       	push	r2
    3b5c:	3f 92       	push	r3
    3b5e:	4f 92       	push	r4
    3b60:	5f 92       	push	r5
    3b62:	6f 92       	push	r6
    3b64:	7f 92       	push	r7
    3b66:	8f 92       	push	r8
    3b68:	9f 92       	push	r9
    3b6a:	af 92       	push	r10
    3b6c:	bf 92       	push	r11
    3b6e:	cf 92       	push	r12
    3b70:	df 92       	push	r13
    3b72:	ef 92       	push	r14
    3b74:	ff 92       	push	r15
    3b76:	0f 93       	push	r16
    3b78:	1f 93       	push	r17
    3b7a:	df 93       	push	r29
    3b7c:	cf 93       	push	r28
    3b7e:	cd b7       	in	r28, 0x3d	; 61
    3b80:	de b7       	in	r29, 0x3e	; 62
    3b82:	6c 97       	sbiw	r28, 0x1c	; 28
    3b84:	cd bf       	out	0x3d, r28	; 61
    3b86:	de bf       	out	0x3e, r29	; 62
    3b88:	2d 8b       	std	Y+21, r18	; 0x15
    3b8a:	3e 8b       	std	Y+22, r19	; 0x16
    3b8c:	4f 8b       	std	Y+23, r20	; 0x17
    3b8e:	58 8f       	std	Y+24, r21	; 0x18
    3b90:	a9 8e       	std	Y+25, r10	; 0x19
    3b92:	ba 8e       	std	Y+26, r11	; 0x1a
    3b94:	cb 8e       	std	Y+27, r12	; 0x1b
    3b96:	dc 8e       	std	Y+28, r13	; 0x1c
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    3b98:	20 91 c0 24 	lds	r18, 0x24C0
    3b9c:	30 91 c1 24 	lds	r19, 0x24C1
    3ba0:	40 91 c2 24 	lds	r20, 0x24C2
    3ba4:	50 91 c3 24 	lds	r21, 0x24C3
    3ba8:	29 8b       	std	Y+17, r18	; 0x11
    3baa:	3a 8b       	std	Y+18, r19	; 0x12
    3bac:	4b 8b       	std	Y+19, r20	; 0x13
    3bae:	5c 8b       	std	Y+20, r21	; 0x14
    3bb0:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    3bb4:	0e 94 03 47 	call	0x8e06	; 0x8e06 <lround>
    3bb8:	2b 01       	movw	r4, r22
    3bba:	3c 01       	movw	r6, r24
    3bbc:	40 92 91 21 	sts	0x2191, r4
    3bc0:	50 92 92 21 	sts	0x2192, r5
    3bc4:	60 92 93 21 	sts	0x2193, r6
    3bc8:	70 92 94 21 	sts	0x2194, r7
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    3bcc:	80 91 d8 24 	lds	r24, 0x24D8
    3bd0:	90 91 d9 24 	lds	r25, 0x24D9
    3bd4:	a0 91 da 24 	lds	r26, 0x24DA
    3bd8:	b0 91 db 24 	lds	r27, 0x24DB
    3bdc:	8d 87       	std	Y+13, r24	; 0x0d
    3bde:	9e 87       	std	Y+14, r25	; 0x0e
    3be0:	af 87       	std	Y+15, r26	; 0x0f
    3be2:	b8 8b       	std	Y+16, r27	; 0x10
    3be4:	6d 89       	ldd	r22, Y+21	; 0x15
    3be6:	7e 89       	ldd	r23, Y+22	; 0x16
    3be8:	8f 89       	ldd	r24, Y+23	; 0x17
    3bea:	98 8d       	ldd	r25, Y+24	; 0x18
    3bec:	2d 85       	ldd	r18, Y+13	; 0x0d
    3bee:	3e 85       	ldd	r19, Y+14	; 0x0e
    3bf0:	4f 85       	ldd	r20, Y+15	; 0x0f
    3bf2:	58 89       	ldd	r21, Y+16	; 0x10
    3bf4:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    3bf8:	0e 94 03 47 	call	0x8e06	; 0x8e06 <lround>
    3bfc:	5b 01       	movw	r10, r22
    3bfe:	6c 01       	movw	r12, r24
    3c00:	a0 92 95 21 	sts	0x2195, r10
    3c04:	b0 92 96 21 	sts	0x2196, r11
    3c08:	c0 92 97 21 	sts	0x2197, r12
    3c0c:	d0 92 98 21 	sts	0x2198, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    3c10:	20 91 f0 24 	lds	r18, 0x24F0
    3c14:	30 91 f1 24 	lds	r19, 0x24F1
    3c18:	40 91 f2 24 	lds	r20, 0x24F2
    3c1c:	50 91 f3 24 	lds	r21, 0x24F3
    3c20:	29 87       	std	Y+9, r18	; 0x09
    3c22:	3a 87       	std	Y+10, r19	; 0x0a
    3c24:	4b 87       	std	Y+11, r20	; 0x0b
    3c26:	5c 87       	std	Y+12, r21	; 0x0c
    3c28:	c8 01       	movw	r24, r16
    3c2a:	b7 01       	movw	r22, r14
    3c2c:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    3c30:	0e 94 03 47 	call	0x8e06	; 0x8e06 <lround>
    3c34:	9b 01       	movw	r18, r22
    3c36:	ac 01       	movw	r20, r24
    3c38:	20 93 99 21 	sts	0x2199, r18
    3c3c:	30 93 9a 21 	sts	0x219A, r19
    3c40:	40 93 9b 21 	sts	0x219B, r20
    3c44:	50 93 9c 21 	sts	0x219C, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    3c48:	80 91 85 21 	lds	r24, 0x2185
    3c4c:	90 91 86 21 	lds	r25, 0x2186
    3c50:	a0 91 87 21 	lds	r26, 0x2187
    3c54:	b0 91 88 21 	lds	r27, 0x2188
    3c58:	83 01       	movw	r16, r6
    3c5a:	72 01       	movw	r14, r4
    3c5c:	e8 1a       	sub	r14, r24
    3c5e:	f9 0a       	sbc	r15, r25
    3c60:	0a 0b       	sbc	r16, r26
    3c62:	1b 0b       	sbc	r17, r27
    3c64:	ed 82       	std	Y+5, r14	; 0x05
    3c66:	fe 82       	std	Y+6, r15	; 0x06
    3c68:	0f 83       	std	Y+7, r16	; 0x07
    3c6a:	18 87       	std	Y+8, r17	; 0x08
    3c6c:	e0 92 9d 21 	sts	0x219D, r14
    3c70:	f0 92 9e 21 	sts	0x219E, r15
    3c74:	00 93 9f 21 	sts	0x219F, r16
    3c78:	10 93 a0 21 	sts	0x21A0, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    3c7c:	80 91 89 21 	lds	r24, 0x2189
    3c80:	90 91 8a 21 	lds	r25, 0x218A
    3c84:	a0 91 8b 21 	lds	r26, 0x218B
    3c88:	b0 91 8c 21 	lds	r27, 0x218C
    3c8c:	86 01       	movw	r16, r12
    3c8e:	75 01       	movw	r14, r10
    3c90:	e8 1a       	sub	r14, r24
    3c92:	f9 0a       	sbc	r15, r25
    3c94:	0a 0b       	sbc	r16, r26
    3c96:	1b 0b       	sbc	r17, r27
    3c98:	e9 82       	std	Y+1, r14	; 0x01
    3c9a:	fa 82       	std	Y+2, r15	; 0x02
    3c9c:	0b 83       	std	Y+3, r16	; 0x03
    3c9e:	1c 83       	std	Y+4, r17	; 0x04
    3ca0:	e0 92 a1 21 	sts	0x21A1, r14
    3ca4:	f0 92 a2 21 	sts	0x21A2, r15
    3ca8:	00 93 a3 21 	sts	0x21A3, r16
    3cac:	10 93 a4 21 	sts	0x21A4, r17
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    3cb0:	80 91 8d 21 	lds	r24, 0x218D
    3cb4:	90 91 8e 21 	lds	r25, 0x218E
    3cb8:	a0 91 8f 21 	lds	r26, 0x218F
    3cbc:	b0 91 90 21 	lds	r27, 0x2190
    3cc0:	19 01       	movw	r2, r18
    3cc2:	2a 01       	movw	r4, r20
    3cc4:	28 1a       	sub	r2, r24
    3cc6:	39 0a       	sbc	r3, r25
    3cc8:	4a 0a       	sbc	r4, r26
    3cca:	5b 0a       	sbc	r5, r27
    3ccc:	20 92 a5 21 	sts	0x21A5, r2
    3cd0:	30 92 a6 21 	sts	0x21A6, r3
    3cd4:	40 92 a7 21 	sts	0x21A7, r4
    3cd8:	50 92 a8 21 	sts	0x21A8, r5

	if (invert_feed_rate) {
    3cdc:	89 28       	or	r8, r9
    3cde:	59 f0       	breq	.+22     	; 0x3cf6 <mc_line+0x19c>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3ce0:	60 ec       	ldi	r22, 0xC0	; 192
    3ce2:	71 ee       	ldi	r23, 0xE1	; 225
    3ce4:	84 e6       	ldi	r24, 0x64	; 100
    3ce6:	9c e4       	ldi	r25, 0x4C	; 76
    3ce8:	29 8d       	ldd	r18, Y+25	; 0x19
    3cea:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3cec:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3cee:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3cf0:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    3cf4:	4e c0       	rjmp	.+156    	; 0x3d92 <mc_line+0x238>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    3cf6:	6d 81       	ldd	r22, Y+5	; 0x05
    3cf8:	7e 81       	ldd	r23, Y+6	; 0x06
    3cfa:	8f 81       	ldd	r24, Y+7	; 0x07
    3cfc:	98 85       	ldd	r25, Y+8	; 0x08
    3cfe:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    3d02:	29 89       	ldd	r18, Y+17	; 0x11
    3d04:	3a 89       	ldd	r19, Y+18	; 0x12
    3d06:	4b 89       	ldd	r20, Y+19	; 0x13
    3d08:	5c 89       	ldd	r21, Y+20	; 0x14
    3d0a:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    3d0e:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <square>
    3d12:	3b 01       	movw	r6, r22
    3d14:	4c 01       	movw	r8, r24
    3d16:	69 81       	ldd	r22, Y+1	; 0x01
    3d18:	7a 81       	ldd	r23, Y+2	; 0x02
    3d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d1e:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    3d22:	2d 85       	ldd	r18, Y+13	; 0x0d
    3d24:	3e 85       	ldd	r19, Y+14	; 0x0e
    3d26:	4f 85       	ldd	r20, Y+15	; 0x0f
    3d28:	58 89       	ldd	r21, Y+16	; 0x10
    3d2a:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    3d2e:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <square>
    3d32:	5b 01       	movw	r10, r22
    3d34:	6c 01       	movw	r12, r24
    3d36:	c2 01       	movw	r24, r4
    3d38:	b1 01       	movw	r22, r2
    3d3a:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    3d3e:	29 85       	ldd	r18, Y+9	; 0x09
    3d40:	3a 85       	ldd	r19, Y+10	; 0x0a
    3d42:	4b 85       	ldd	r20, Y+11	; 0x0b
    3d44:	5c 85       	ldd	r21, Y+12	; 0x0c
    3d46:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    3d4a:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <square>
    3d4e:	7b 01       	movw	r14, r22
    3d50:	8c 01       	movw	r16, r24
    3d52:	c4 01       	movw	r24, r8
    3d54:	b3 01       	movw	r22, r6
    3d56:	a6 01       	movw	r20, r12
    3d58:	95 01       	movw	r18, r10
    3d5a:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__addsf3>
    3d5e:	a8 01       	movw	r20, r16
    3d60:	97 01       	movw	r18, r14
    3d62:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__addsf3>
    3d66:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <sqrt>
    3d6a:	60 93 ad 21 	sts	0x21AD, r22
    3d6e:	70 93 ae 21 	sts	0x21AE, r23
    3d72:	80 93 af 21 	sts	0x21AF, r24
    3d76:	90 93 b0 21 	sts	0x21B0, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3d7a:	29 8d       	ldd	r18, Y+25	; 0x19
    3d7c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3d7e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3d80:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3d82:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    3d86:	20 e0       	ldi	r18, 0x00	; 0
    3d88:	34 e2       	ldi	r19, 0x24	; 36
    3d8a:	44 e7       	ldi	r20, 0x74	; 116
    3d8c:	59 e4       	ldi	r21, 0x49	; 73
    3d8e:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    3d92:	0e 94 03 47 	call	0x8e06	; 0x8e06 <lround>
    3d96:	60 93 a9 21 	sts	0x21A9, r22
    3d9a:	70 93 aa 21 	sts	0x21AA, r23
    3d9e:	80 93 ab 21 	sts	0x21AB, r24
    3da2:	90 93 ac 21 	sts	0x21AC, r25
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    3da6:	a0 90 a9 21 	lds	r10, 0x21A9
    3daa:	b0 90 aa 21 	lds	r11, 0x21AA
    3dae:	c0 90 ab 21 	lds	r12, 0x21AB
    3db2:	d0 90 ac 21 	lds	r13, 0x21AC
    3db6:	6d 81       	ldd	r22, Y+5	; 0x05
    3db8:	7e 81       	ldd	r23, Y+6	; 0x06
    3dba:	8f 81       	ldd	r24, Y+7	; 0x07
    3dbc:	98 85       	ldd	r25, Y+8	; 0x08
    3dbe:	29 81       	ldd	r18, Y+1	; 0x01
    3dc0:	3a 81       	ldd	r19, Y+2	; 0x02
    3dc2:	4b 81       	ldd	r20, Y+3	; 0x03
    3dc4:	5c 81       	ldd	r21, Y+4	; 0x04
    3dc6:	82 01       	movw	r16, r4
    3dc8:	71 01       	movw	r14, r2
    3dca:	0e 94 69 32 	call	0x64d2	; 0x64d2 <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3dce:	e5 e8       	ldi	r30, 0x85	; 133
    3dd0:	f1 e2       	ldi	r31, 0x21	; 33
    3dd2:	df 01       	movw	r26, r30
    3dd4:	1c 96       	adiw	r26, 0x0c	; 12
    3dd6:	8c e0       	ldi	r24, 0x0C	; 12
    3dd8:	0d 90       	ld	r0, X+
    3dda:	01 92       	st	Z+, r0
    3ddc:	81 50       	subi	r24, 0x01	; 1
    3dde:	e1 f7       	brne	.-8      	; 0x3dd8 <mc_line+0x27e>
	return (TG_OK);
}
    3de0:	80 e0       	ldi	r24, 0x00	; 0
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	6c 96       	adiw	r28, 0x1c	; 28
    3de6:	cd bf       	out	0x3d, r28	; 61
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	cf 91       	pop	r28
    3dec:	df 91       	pop	r29
    3dee:	1f 91       	pop	r17
    3df0:	0f 91       	pop	r16
    3df2:	ff 90       	pop	r15
    3df4:	ef 90       	pop	r14
    3df6:	df 90       	pop	r13
    3df8:	cf 90       	pop	r12
    3dfa:	bf 90       	pop	r11
    3dfc:	af 90       	pop	r10
    3dfe:	9f 90       	pop	r9
    3e00:	8f 90       	pop	r8
    3e02:	7f 90       	pop	r7
    3e04:	6f 90       	pop	r6
    3e06:	5f 90       	pop	r5
    3e08:	4f 90       	pop	r4
    3e0a:	3f 90       	pop	r3
    3e0c:	2f 90       	pop	r2
    3e0e:	08 95       	ret

00003e10 <mc_arc_continuation>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continuation() 
{
    3e10:	8f 92       	push	r8
    3e12:	9f 92       	push	r9
    3e14:	af 92       	push	r10
    3e16:	bf 92       	push	r11
    3e18:	cf 92       	push	r12
    3e1a:	df 92       	push	r13
    3e1c:	ef 92       	push	r14
    3e1e:	ff 92       	push	r15
    3e20:	0f 93       	push	r16
    3e22:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3e24:	80 91 0f 25 	lds	r24, 0x250F
    3e28:	88 23       	and	r24, r24
    3e2a:	19 f4       	brne	.+6      	; 0x3e32 <mc_arc_continuation+0x22>
    3e2c:	21 e0       	ldi	r18, 0x01	; 1
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	dd c0       	rjmp	.+442    	; 0x3fec <mc_arc_continuation+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3e32:	81 30       	cpi	r24, 0x01	; 1
    3e34:	09 f0       	breq	.+2      	; 0x3e38 <mc_arc_continuation+0x28>
    3e36:	ca c0       	rjmp	.+404    	; 0x3fcc <mc_arc_continuation+0x1bc>
		ma.segment_counter=0;
    3e38:	10 92 12 25 	sts	0x2512, r1
    3e3c:	10 92 13 25 	sts	0x2513, r1
		ma.arc_state = MC_STATE_RUNNING;
    3e40:	82 e0       	ldi	r24, 0x02	; 2
    3e42:	80 93 0f 25 	sts	0x250F, r24
    3e46:	c2 c0       	rjmp	.+388    	; 0x3fcc <mc_arc_continuation+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3e48:	0e 94 3d 32 	call	0x647a	; 0x647a <mv_test_move_buffer_full>
    3e4c:	88 23       	and	r24, r24
    3e4e:	19 f0       	breq	.+6      	; 0x3e56 <mc_arc_continuation+0x46>
    3e50:	22 e0       	ldi	r18, 0x02	; 2
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	cb c0       	rjmp	.+406    	; 0x3fec <mc_arc_continuation+0x1dc>
			return (TG_CONTINUE);
		}
		ma.segment_counter++;
    3e56:	80 91 12 25 	lds	r24, 0x2512
    3e5a:	90 91 13 25 	lds	r25, 0x2513
    3e5e:	01 96       	adiw	r24, 0x01	; 1
    3e60:	80 93 12 25 	sts	0x2512, r24
    3e64:	90 93 13 25 	sts	0x2513, r25
		ma.theta += ma.theta_per_segment;
    3e68:	60 91 34 25 	lds	r22, 0x2534
    3e6c:	70 91 35 25 	lds	r23, 0x2535
    3e70:	80 91 36 25 	lds	r24, 0x2536
    3e74:	90 91 37 25 	lds	r25, 0x2537
    3e78:	20 91 40 25 	lds	r18, 0x2540
    3e7c:	30 91 41 25 	lds	r19, 0x2541
    3e80:	40 91 42 25 	lds	r20, 0x2542
    3e84:	50 91 43 25 	lds	r21, 0x2543
    3e88:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__addsf3>
    3e8c:	7b 01       	movw	r14, r22
    3e8e:	8c 01       	movw	r16, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	d8 01       	movw	r26, r16
    3e94:	80 93 34 25 	sts	0x2534, r24
    3e98:	90 93 35 25 	sts	0x2535, r25
    3e9c:	a0 93 36 25 	sts	0x2536, r26
    3ea0:	b0 93 37 25 	sts	0x2537, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3ea4:	b7 01       	movw	r22, r14
    3ea6:	c8 01       	movw	r24, r16
    3ea8:	0e 94 96 47 	call	0x8f2c	; 0x8f2c <sin>
    3eac:	80 90 38 25 	lds	r8, 0x2538
    3eb0:	90 90 39 25 	lds	r9, 0x2539
    3eb4:	a0 90 3a 25 	lds	r10, 0x253A
    3eb8:	b0 90 3b 25 	lds	r11, 0x253B
    3ebc:	c0 90 16 25 	lds	r12, 0x2516
    3ec0:	d0 90 17 25 	lds	r13, 0x2517
    3ec4:	cc 0c       	add	r12, r12
    3ec6:	dd 1c       	adc	r13, r13
    3ec8:	cc 0c       	add	r12, r12
    3eca:	dd 1c       	adc	r13, r13
    3ecc:	2f e0       	ldi	r18, 0x0F	; 15
    3ece:	35 e2       	ldi	r19, 0x25	; 37
    3ed0:	c2 0e       	add	r12, r18
    3ed2:	d3 1e       	adc	r13, r19
    3ed4:	a5 01       	movw	r20, r10
    3ed6:	94 01       	movw	r18, r8
    3ed8:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    3edc:	9b 01       	movw	r18, r22
    3ede:	ac 01       	movw	r20, r24
    3ee0:	60 91 2c 25 	lds	r22, 0x252C
    3ee4:	70 91 2d 25 	lds	r23, 0x252D
    3ee8:	80 91 2e 25 	lds	r24, 0x252E
    3eec:	90 91 2f 25 	lds	r25, 0x252F
    3ef0:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__addsf3>
    3ef4:	f6 01       	movw	r30, r12
    3ef6:	65 87       	std	Z+13, r22	; 0x0d
    3ef8:	76 87       	std	Z+14, r23	; 0x0e
    3efa:	87 87       	std	Z+15, r24	; 0x0f
    3efc:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3efe:	b7 01       	movw	r22, r14
    3f00:	c8 01       	movw	r24, r16
    3f02:	0e 94 75 44 	call	0x88ea	; 0x88ea <cos>
    3f06:	00 91 18 25 	lds	r16, 0x2518
    3f0a:	10 91 19 25 	lds	r17, 0x2519
    3f0e:	00 0f       	add	r16, r16
    3f10:	11 1f       	adc	r17, r17
    3f12:	00 0f       	add	r16, r16
    3f14:	11 1f       	adc	r17, r17
    3f16:	01 5f       	subi	r16, 0xF1	; 241
    3f18:	1a 4d       	sbci	r17, 0xDA	; 218
    3f1a:	a5 01       	movw	r20, r10
    3f1c:	94 01       	movw	r18, r8
    3f1e:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    3f22:	9b 01       	movw	r18, r22
    3f24:	ac 01       	movw	r20, r24
    3f26:	60 91 30 25 	lds	r22, 0x2530
    3f2a:	70 91 31 25 	lds	r23, 0x2531
    3f2e:	80 91 32 25 	lds	r24, 0x2532
    3f32:	90 91 33 25 	lds	r25, 0x2533
    3f36:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__addsf3>
    3f3a:	f8 01       	movw	r30, r16
    3f3c:	65 87       	std	Z+13, r22	; 0x0d
    3f3e:	76 87       	std	Z+14, r23	; 0x0e
    3f40:	87 87       	std	Z+15, r24	; 0x0f
    3f42:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3f44:	00 91 1a 25 	lds	r16, 0x251A
    3f48:	10 91 1b 25 	lds	r17, 0x251B
    3f4c:	00 0f       	add	r16, r16
    3f4e:	11 1f       	adc	r17, r17
    3f50:	00 0f       	add	r16, r16
    3f52:	11 1f       	adc	r17, r17
    3f54:	01 5f       	subi	r16, 0xF1	; 241
    3f56:	1a 4d       	sbci	r17, 0xDA	; 218
    3f58:	f8 01       	movw	r30, r16
    3f5a:	65 85       	ldd	r22, Z+13	; 0x0d
    3f5c:	76 85       	ldd	r23, Z+14	; 0x0e
    3f5e:	87 85       	ldd	r24, Z+15	; 0x0f
    3f60:	90 89       	ldd	r25, Z+16	; 0x10
    3f62:	20 91 44 25 	lds	r18, 0x2544
    3f66:	30 91 45 25 	lds	r19, 0x2545
    3f6a:	40 91 46 25 	lds	r20, 0x2546
    3f6e:	50 91 47 25 	lds	r21, 0x2547
    3f72:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__addsf3>
    3f76:	f8 01       	movw	r30, r16
    3f78:	65 87       	std	Z+13, r22	; 0x0d
    3f7a:	76 87       	std	Z+14, r23	; 0x0e
    3f7c:	87 87       	std	Z+15, r24	; 0x0f
    3f7e:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    3f80:	60 91 1c 25 	lds	r22, 0x251C
    3f84:	70 91 1d 25 	lds	r23, 0x251D
    3f88:	80 91 1e 25 	lds	r24, 0x251E
    3f8c:	90 91 1f 25 	lds	r25, 0x251F
    3f90:	20 91 20 25 	lds	r18, 0x2520
    3f94:	30 91 21 25 	lds	r19, 0x2521
    3f98:	40 91 22 25 	lds	r20, 0x2522
    3f9c:	50 91 23 25 	lds	r21, 0x2523
    3fa0:	e0 90 24 25 	lds	r14, 0x2524
    3fa4:	f0 90 25 25 	lds	r15, 0x2525
    3fa8:	00 91 26 25 	lds	r16, 0x2526
    3fac:	10 91 27 25 	lds	r17, 0x2527
    3fb0:	a0 90 3c 25 	lds	r10, 0x253C
    3fb4:	b0 90 3d 25 	lds	r11, 0x253D
    3fb8:	c0 90 3e 25 	lds	r12, 0x253E
    3fbc:	d0 90 3f 25 	lds	r13, 0x253F
    3fc0:	80 90 14 25 	lds	r8, 0x2514
    3fc4:	90 90 15 25 	lds	r9, 0x2515
    3fc8:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3fcc:	20 91 12 25 	lds	r18, 0x2512
    3fd0:	30 91 13 25 	lds	r19, 0x2513
    3fd4:	80 91 10 25 	lds	r24, 0x2510
    3fd8:	90 91 11 25 	lds	r25, 0x2511
    3fdc:	82 17       	cp	r24, r18
    3fde:	93 07       	cpc	r25, r19
    3fe0:	0c f0       	brlt	.+2      	; 0x3fe4 <mc_arc_continuation+0x1d4>
    3fe2:	32 cf       	rjmp	.-412    	; 0x3e48 <mc_arc_continuation+0x38>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3fe4:	10 92 0f 25 	sts	0x250F, r1
    3fe8:	20 e0       	ldi	r18, 0x00	; 0
    3fea:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3fec:	c9 01       	movw	r24, r18
    3fee:	1f 91       	pop	r17
    3ff0:	0f 91       	pop	r16
    3ff2:	ff 90       	pop	r15
    3ff4:	ef 90       	pop	r14
    3ff6:	df 90       	pop	r13
    3ff8:	cf 90       	pop	r12
    3ffa:	bf 90       	pop	r11
    3ffc:	af 90       	pop	r10
    3ffe:	9f 90       	pop	r9
    4000:	8f 90       	pop	r8
    4002:	08 95       	ret

00004004 <mc_arc_nonblock>:

int mc_arc_nonblock(double theta, double angular_travel, 
					double radius, double linear_travel, 
					int axis_1, int axis_2, int axis_linear, 
					double feed_rate, int invert_feed_rate)
{
    4004:	2f 92       	push	r2
    4006:	3f 92       	push	r3
    4008:	4f 92       	push	r4
    400a:	5f 92       	push	r5
    400c:	6f 92       	push	r6
    400e:	7f 92       	push	r7
    4010:	8f 92       	push	r8
    4012:	9f 92       	push	r9
    4014:	af 92       	push	r10
    4016:	bf 92       	push	r11
    4018:	cf 92       	push	r12
    401a:	df 92       	push	r13
    401c:	ef 92       	push	r14
    401e:	ff 92       	push	r15
    4020:	0f 93       	push	r16
    4022:	1f 93       	push	r17
    4024:	df 93       	push	r29
    4026:	cf 93       	push	r28
    4028:	cd b7       	in	r28, 0x3d	; 61
    402a:	de b7       	in	r29, 0x3e	; 62
    402c:	28 97       	sbiw	r28, 0x08	; 8
    402e:	cd bf       	out	0x3d, r28	; 61
    4030:	de bf       	out	0x3e, r29	; 62
    4032:	69 83       	std	Y+1, r22	; 0x01
    4034:	7a 83       	std	Y+2, r23	; 0x02
    4036:	8b 83       	std	Y+3, r24	; 0x03
    4038:	9c 83       	std	Y+4, r25	; 0x04
    403a:	29 01       	movw	r4, r18
    403c:	3a 01       	movw	r6, r20
    403e:	ed 82       	std	Y+5, r14	; 0x05
    4040:	fe 82       	std	Y+6, r15	; 0x06
    4042:	0f 83       	std	Y+7, r16	; 0x07
    4044:	18 87       	std	Y+8, r17	; 0x08
    4046:	2e 8c       	ldd	r2, Y+30	; 0x1e
    4048:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    404a:	60 93 34 25 	sts	0x2534, r22
    404e:	70 93 35 25 	sts	0x2535, r23
    4052:	80 93 36 25 	sts	0x2536, r24
    4056:	90 93 37 25 	sts	0x2537, r25
	ma.radius = radius;
    405a:	e0 92 38 25 	sts	0x2538, r14
    405e:	f0 92 39 25 	sts	0x2539, r15
    4062:	00 93 3a 25 	sts	0x253A, r16
    4066:	10 93 3b 25 	sts	0x253B, r17
	ma.angular_travel = angular_travel;
    406a:	20 93 48 25 	sts	0x2548, r18
    406e:	30 93 49 25 	sts	0x2549, r19
    4072:	40 93 4a 25 	sts	0x254A, r20
    4076:	50 93 4b 25 	sts	0x254B, r21
	ma.linear_travel = linear_travel;
    407a:	a0 92 4c 25 	sts	0x254C, r10
    407e:	b0 92 4d 25 	sts	0x254D, r11
    4082:	c0 92 4e 25 	sts	0x254E, r12
    4086:	d0 92 4f 25 	sts	0x254F, r13
	ma.feed_rate = feed_rate;
    408a:	8a a1       	ldd	r24, Y+34	; 0x22
    408c:	9b a1       	ldd	r25, Y+35	; 0x23
    408e:	ac a1       	ldd	r26, Y+36	; 0x24
    4090:	bd a1       	ldd	r27, Y+37	; 0x25
    4092:	80 93 3c 25 	sts	0x253C, r24
    4096:	90 93 3d 25 	sts	0x253D, r25
    409a:	a0 93 3e 25 	sts	0x253E, r26
    409e:	b0 93 3f 25 	sts	0x253F, r27
	ma.invert_feed_rate = invert_feed_rate;
    40a2:	ae a1       	ldd	r26, Y+38	; 0x26
    40a4:	bf a1       	ldd	r27, Y+39	; 0x27
    40a6:	a0 93 14 25 	sts	0x2514, r26
    40aa:	b0 93 15 25 	sts	0x2515, r27
	ma.axis_1 = axis_1;
    40ae:	80 92 16 25 	sts	0x2516, r8
    40b2:	90 92 17 25 	sts	0x2517, r9
	ma.axis_2 = axis_2;
    40b6:	20 92 18 25 	sts	0x2518, r2
    40ba:	30 92 19 25 	sts	0x2519, r3
	ma.axis_linear = axis_linear;
    40be:	e8 a1       	ldd	r30, Y+32	; 0x20
    40c0:	f9 a1       	ldd	r31, Y+33	; 0x21
    40c2:	e0 93 1a 25 	sts	0x251A, r30
    40c6:	f0 93 1b 25 	sts	0x251B, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    40ca:	ca 01       	movw	r24, r20
    40cc:	b9 01       	movw	r22, r18
    40ce:	a8 01       	movw	r20, r16
    40d0:	97 01       	movw	r18, r14
    40d2:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    40d6:	7b 01       	movw	r14, r22
    40d8:	8c 01       	movw	r16, r24
    40da:	c6 01       	movw	r24, r12
    40dc:	b5 01       	movw	r22, r10
    40de:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <__fixsfsi>
    40e2:	97 ff       	sbrs	r25, 7
    40e4:	07 c0       	rjmp	.+14     	; 0x40f4 <mc_arc_nonblock+0xf0>
    40e6:	90 95       	com	r25
    40e8:	80 95       	com	r24
    40ea:	70 95       	com	r23
    40ec:	61 95       	neg	r22
    40ee:	7f 4f       	sbci	r23, 0xFF	; 255
    40f0:	8f 4f       	sbci	r24, 0xFF	; 255
    40f2:	9f 4f       	sbci	r25, 0xFF	; 255
    40f4:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    40f8:	9b 01       	movw	r18, r22
    40fa:	ac 01       	movw	r20, r24
    40fc:	c8 01       	movw	r24, r16
    40fe:	b7 01       	movw	r22, r14
    4100:	0e 94 6e 46 	call	0x8cdc	; 0x8cdc <hypot>
    4104:	7b 01       	movw	r14, r22
    4106:	8c 01       	movw	r16, r24
    4108:	60 93 28 25 	sts	0x2528, r22
    410c:	70 93 29 25 	sts	0x2529, r23
    4110:	80 93 2a 25 	sts	0x252A, r24
    4114:	90 93 2b 25 	sts	0x252B, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    4118:	2a e0       	ldi	r18, 0x0A	; 10
    411a:	37 ed       	ldi	r19, 0xD7	; 215
    411c:	43 e2       	ldi	r20, 0x23	; 35
    411e:	5c e3       	ldi	r21, 0x3C	; 60
    4120:	0e 94 71 44 	call	0x88e2	; 0x88e2 <__cmpsf2>
    4124:	88 23       	and	r24, r24
    4126:	1c f4       	brge	.+6      	; 0x412e <mc_arc_nonblock+0x12a>
    4128:	2f e0       	ldi	r18, 0x0F	; 15
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	fb c0       	rjmp	.+502    	; 0x4324 <mc_arc_nonblock+0x320>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    412e:	c8 01       	movw	r24, r16
    4130:	b7 01       	movw	r22, r14
    4132:	20 91 a1 24 	lds	r18, 0x24A1
    4136:	30 91 a2 24 	lds	r19, 0x24A2
    413a:	40 91 a3 24 	lds	r20, 0x24A3
    413e:	50 91 a4 24 	lds	r21, 0x24A4
    4142:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    4146:	0e 94 5e 44 	call	0x88bc	; 0x88bc <ceil>
    414a:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <__fixsfsi>
    414e:	8b 01       	movw	r16, r22
    4150:	60 93 10 25 	sts	0x2510, r22
    4154:	70 93 11 25 	sts	0x2511, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    4158:	8e a1       	ldd	r24, Y+38	; 0x26
    415a:	9f a1       	ldd	r25, Y+39	; 0x27
    415c:	89 2b       	or	r24, r25
    415e:	b9 f0       	breq	.+46     	; 0x418e <mc_arc_nonblock+0x18a>
		ma.feed_rate *= ma.segments; 
    4160:	b8 01       	movw	r22, r16
    4162:	88 27       	eor	r24, r24
    4164:	77 fd       	sbrc	r23, 7
    4166:	80 95       	com	r24
    4168:	98 2f       	mov	r25, r24
    416a:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    416e:	9b 01       	movw	r18, r22
    4170:	ac 01       	movw	r20, r24
    4172:	6a a1       	ldd	r22, Y+34	; 0x22
    4174:	7b a1       	ldd	r23, Y+35	; 0x23
    4176:	8c a1       	ldd	r24, Y+36	; 0x24
    4178:	9d a1       	ldd	r25, Y+37	; 0x25
    417a:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    417e:	60 93 3c 25 	sts	0x253C, r22
    4182:	70 93 3d 25 	sts	0x253D, r23
    4186:	80 93 3e 25 	sts	0x253E, r24
    418a:	90 93 3f 25 	sts	0x253F, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    418e:	b8 01       	movw	r22, r16
    4190:	88 27       	eor	r24, r24
    4192:	77 fd       	sbrc	r23, 7
    4194:	80 95       	com	r24
    4196:	98 2f       	mov	r25, r24
    4198:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    419c:	7b 01       	movw	r14, r22
    419e:	8c 01       	movw	r16, r24
    41a0:	c3 01       	movw	r24, r6
    41a2:	b2 01       	movw	r22, r4
    41a4:	a8 01       	movw	r20, r16
    41a6:	97 01       	movw	r18, r14
    41a8:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    41ac:	60 93 40 25 	sts	0x2540, r22
    41b0:	70 93 41 25 	sts	0x2541, r23
    41b4:	80 93 42 25 	sts	0x2542, r24
    41b8:	90 93 43 25 	sts	0x2543, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    41bc:	c6 01       	movw	r24, r12
    41be:	b5 01       	movw	r22, r10
    41c0:	a8 01       	movw	r20, r16
    41c2:	97 01       	movw	r18, r14
    41c4:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    41c8:	60 93 44 25 	sts	0x2544, r22
    41cc:	70 93 45 25 	sts	0x2545, r23
    41d0:	80 93 46 25 	sts	0x2546, r24
    41d4:	90 93 47 25 	sts	0x2547, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    41d8:	69 81       	ldd	r22, Y+1	; 0x01
    41da:	7a 81       	ldd	r23, Y+2	; 0x02
    41dc:	8b 81       	ldd	r24, Y+3	; 0x03
    41de:	9c 81       	ldd	r25, Y+4	; 0x04
    41e0:	0e 94 96 47 	call	0x8f2c	; 0x8f2c <sin>
    41e4:	5b 01       	movw	r10, r22
    41e6:	6c 01       	movw	r12, r24
    41e8:	f4 01       	movw	r30, r8
    41ea:	ee 0f       	add	r30, r30
    41ec:	ff 1f       	adc	r31, r31
    41ee:	ee 0f       	add	r30, r30
    41f0:	ff 1f       	adc	r31, r31
    41f2:	ec 57       	subi	r30, 0x7C	; 124
    41f4:	fe 4d       	sbci	r31, 0xDE	; 222
    41f6:	61 81       	ldd	r22, Z+1	; 0x01
    41f8:	72 81       	ldd	r23, Z+2	; 0x02
    41fa:	83 81       	ldd	r24, Z+3	; 0x03
    41fc:	94 81       	ldd	r25, Z+4	; 0x04
    41fe:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    4202:	f4 01       	movw	r30, r8
    4204:	ee 0f       	add	r30, r30
    4206:	ff 1f       	adc	r31, r31
    4208:	e8 0d       	add	r30, r8
    420a:	f9 1d       	adc	r31, r9
    420c:	13 e0       	ldi	r17, 0x03	; 3
    420e:	ee 0f       	add	r30, r30
    4210:	ff 1f       	adc	r31, r31
    4212:	1a 95       	dec	r17
    4214:	e1 f7       	brne	.-8      	; 0x420e <mc_arc_nonblock+0x20a>
    4216:	e1 56       	subi	r30, 0x61	; 97
    4218:	fb 4d       	sbci	r31, 0xDB	; 219
    421a:	21 a1       	ldd	r18, Z+33	; 0x21
    421c:	32 a1       	ldd	r19, Z+34	; 0x22
    421e:	43 a1       	ldd	r20, Z+35	; 0x23
    4220:	54 a1       	ldd	r21, Z+36	; 0x24
    4222:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    4226:	7b 01       	movw	r14, r22
    4228:	8c 01       	movw	r16, r24
    422a:	c6 01       	movw	r24, r12
    422c:	b5 01       	movw	r22, r10
    422e:	2d 81       	ldd	r18, Y+5	; 0x05
    4230:	3e 81       	ldd	r19, Y+6	; 0x06
    4232:	4f 81       	ldd	r20, Y+7	; 0x07
    4234:	58 85       	ldd	r21, Y+8	; 0x08
    4236:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    423a:	9b 01       	movw	r18, r22
    423c:	ac 01       	movw	r20, r24
    423e:	c8 01       	movw	r24, r16
    4240:	b7 01       	movw	r22, r14
    4242:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    4246:	60 93 2c 25 	sts	0x252C, r22
    424a:	70 93 2d 25 	sts	0x252D, r23
    424e:	80 93 2e 25 	sts	0x252E, r24
    4252:	90 93 2f 25 	sts	0x252F, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    4256:	69 81       	ldd	r22, Y+1	; 0x01
    4258:	7a 81       	ldd	r23, Y+2	; 0x02
    425a:	8b 81       	ldd	r24, Y+3	; 0x03
    425c:	9c 81       	ldd	r25, Y+4	; 0x04
    425e:	0e 94 75 44 	call	0x88ea	; 0x88ea <cos>
    4262:	5b 01       	movw	r10, r22
    4264:	6c 01       	movw	r12, r24
    4266:	f1 01       	movw	r30, r2
    4268:	ee 0f       	add	r30, r30
    426a:	ff 1f       	adc	r31, r31
    426c:	ee 0f       	add	r30, r30
    426e:	ff 1f       	adc	r31, r31
    4270:	ec 57       	subi	r30, 0x7C	; 124
    4272:	fe 4d       	sbci	r31, 0xDE	; 222
    4274:	61 81       	ldd	r22, Z+1	; 0x01
    4276:	72 81       	ldd	r23, Z+2	; 0x02
    4278:	83 81       	ldd	r24, Z+3	; 0x03
    427a:	94 81       	ldd	r25, Z+4	; 0x04
    427c:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    4280:	f1 01       	movw	r30, r2
    4282:	ee 0f       	add	r30, r30
    4284:	ff 1f       	adc	r31, r31
    4286:	e2 0d       	add	r30, r2
    4288:	f3 1d       	adc	r31, r3
    428a:	53 e0       	ldi	r21, 0x03	; 3
    428c:	ee 0f       	add	r30, r30
    428e:	ff 1f       	adc	r31, r31
    4290:	5a 95       	dec	r21
    4292:	e1 f7       	brne	.-8      	; 0x428c <mc_arc_nonblock+0x288>
    4294:	e1 56       	subi	r30, 0x61	; 97
    4296:	fb 4d       	sbci	r31, 0xDB	; 219
    4298:	21 a1       	ldd	r18, Z+33	; 0x21
    429a:	32 a1       	ldd	r19, Z+34	; 0x22
    429c:	43 a1       	ldd	r20, Z+35	; 0x23
    429e:	54 a1       	ldd	r21, Z+36	; 0x24
    42a0:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    42a4:	7b 01       	movw	r14, r22
    42a6:	8c 01       	movw	r16, r24
    42a8:	c6 01       	movw	r24, r12
    42aa:	b5 01       	movw	r22, r10
    42ac:	2d 81       	ldd	r18, Y+5	; 0x05
    42ae:	3e 81       	ldd	r19, Y+6	; 0x06
    42b0:	4f 81       	ldd	r20, Y+7	; 0x07
    42b2:	58 85       	ldd	r21, Y+8	; 0x08
    42b4:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    42b8:	9b 01       	movw	r18, r22
    42ba:	ac 01       	movw	r20, r24
    42bc:	c8 01       	movw	r24, r16
    42be:	b7 01       	movw	r22, r14
    42c0:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    42c4:	60 93 30 25 	sts	0x2530, r22
    42c8:	70 93 31 25 	sts	0x2531, r23
    42cc:	80 93 32 25 	sts	0x2532, r24
    42d0:	90 93 33 25 	sts	0x2533, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    42d4:	e8 a1       	ldd	r30, Y+32	; 0x20
    42d6:	f9 a1       	ldd	r31, Y+33	; 0x21
    42d8:	ee 0f       	add	r30, r30
    42da:	ff 1f       	adc	r31, r31
    42dc:	ee 0f       	add	r30, r30
    42de:	ff 1f       	adc	r31, r31
    42e0:	8f 01       	movw	r16, r30
    42e2:	01 5f       	subi	r16, 0xF1	; 241
    42e4:	1a 4d       	sbci	r17, 0xDA	; 218
    42e6:	ec 57       	subi	r30, 0x7C	; 124
    42e8:	fe 4d       	sbci	r31, 0xDE	; 222
    42ea:	61 81       	ldd	r22, Z+1	; 0x01
    42ec:	72 81       	ldd	r23, Z+2	; 0x02
    42ee:	83 81       	ldd	r24, Z+3	; 0x03
    42f0:	94 81       	ldd	r25, Z+4	; 0x04
    42f2:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    42f6:	20 91 f0 24 	lds	r18, 0x24F0
    42fa:	30 91 f1 24 	lds	r19, 0x24F1
    42fe:	40 91 f2 24 	lds	r20, 0x24F2
    4302:	50 91 f3 24 	lds	r21, 0x24F3
    4306:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    430a:	d8 01       	movw	r26, r16
    430c:	1d 96       	adiw	r26, 0x0d	; 13
    430e:	6d 93       	st	X+, r22
    4310:	7d 93       	st	X+, r23
    4312:	8d 93       	st	X+, r24
    4314:	9c 93       	st	X, r25
    4316:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	80 93 0f 25 	sts	0x250F, r24
	return (mc_arc_continuation());
    431e:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <mc_arc_continuation>
    4322:	9c 01       	movw	r18, r24
}
    4324:	c9 01       	movw	r24, r18
    4326:	28 96       	adiw	r28, 0x08	; 8
    4328:	cd bf       	out	0x3d, r28	; 61
    432a:	de bf       	out	0x3e, r29	; 62
    432c:	cf 91       	pop	r28
    432e:	df 91       	pop	r29
    4330:	1f 91       	pop	r17
    4332:	0f 91       	pop	r16
    4334:	ff 90       	pop	r15
    4336:	ef 90       	pop	r14
    4338:	df 90       	pop	r13
    433a:	cf 90       	pop	r12
    433c:	bf 90       	pop	r11
    433e:	af 90       	pop	r10
    4340:	9f 90       	pop	r9
    4342:	8f 90       	pop	r8
    4344:	7f 90       	pop	r7
    4346:	6f 90       	pop	r6
    4348:	5f 90       	pop	r5
    434a:	4f 90       	pop	r4
    434c:	3f 90       	pop	r3
    434e:	2f 90       	pop	r2
    4350:	08 95       	ret

00004352 <mc_arc>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    4352:	2f 92       	push	r2
    4354:	3f 92       	push	r3
    4356:	4f 92       	push	r4
    4358:	5f 92       	push	r5
    435a:	6f 92       	push	r6
    435c:	7f 92       	push	r7
    435e:	8f 92       	push	r8
    4360:	9f 92       	push	r9
    4362:	af 92       	push	r10
    4364:	bf 92       	push	r11
    4366:	cf 92       	push	r12
    4368:	df 92       	push	r13
    436a:	ef 92       	push	r14
    436c:	ff 92       	push	r15
    436e:	0f 93       	push	r16
    4370:	1f 93       	push	r17
    4372:	df 93       	push	r29
    4374:	cf 93       	push	r28
    4376:	cd b7       	in	r28, 0x3d	; 61
    4378:	de b7       	in	r29, 0x3e	; 62
    437a:	28 97       	sbiw	r28, 0x08	; 8
    437c:	cd bf       	out	0x3d, r28	; 61
    437e:	de bf       	out	0x3e, r29	; 62
    4380:	69 83       	std	Y+1, r22	; 0x01
    4382:	7a 83       	std	Y+2, r23	; 0x02
    4384:	8b 83       	std	Y+3, r24	; 0x03
    4386:	9c 83       	std	Y+4, r25	; 0x04
    4388:	29 01       	movw	r4, r18
    438a:	3a 01       	movw	r6, r20
    438c:	ed 82       	std	Y+5, r14	; 0x05
    438e:	fe 82       	std	Y+6, r15	; 0x06
    4390:	0f 83       	std	Y+7, r16	; 0x07
    4392:	18 87       	std	Y+8, r17	; 0x08
    4394:	2e 8c       	ldd	r2, Y+30	; 0x1e
    4396:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    4398:	60 93 34 25 	sts	0x2534, r22
    439c:	70 93 35 25 	sts	0x2535, r23
    43a0:	80 93 36 25 	sts	0x2536, r24
    43a4:	90 93 37 25 	sts	0x2537, r25
	ma.radius = radius;
    43a8:	e0 92 38 25 	sts	0x2538, r14
    43ac:	f0 92 39 25 	sts	0x2539, r15
    43b0:	00 93 3a 25 	sts	0x253A, r16
    43b4:	10 93 3b 25 	sts	0x253B, r17
	ma.angular_travel = angular_travel;
    43b8:	20 93 48 25 	sts	0x2548, r18
    43bc:	30 93 49 25 	sts	0x2549, r19
    43c0:	40 93 4a 25 	sts	0x254A, r20
    43c4:	50 93 4b 25 	sts	0x254B, r21
	ma.linear_travel = linear_travel;
    43c8:	a0 92 4c 25 	sts	0x254C, r10
    43cc:	b0 92 4d 25 	sts	0x254D, r11
    43d0:	c0 92 4e 25 	sts	0x254E, r12
    43d4:	d0 92 4f 25 	sts	0x254F, r13
	ma.feed_rate = feed_rate;
    43d8:	8a a1       	ldd	r24, Y+34	; 0x22
    43da:	9b a1       	ldd	r25, Y+35	; 0x23
    43dc:	ac a1       	ldd	r26, Y+36	; 0x24
    43de:	bd a1       	ldd	r27, Y+37	; 0x25
    43e0:	80 93 3c 25 	sts	0x253C, r24
    43e4:	90 93 3d 25 	sts	0x253D, r25
    43e8:	a0 93 3e 25 	sts	0x253E, r26
    43ec:	b0 93 3f 25 	sts	0x253F, r27
	ma.invert_feed_rate = invert_feed_rate;
    43f0:	ae a1       	ldd	r26, Y+38	; 0x26
    43f2:	bf a1       	ldd	r27, Y+39	; 0x27
    43f4:	a0 93 14 25 	sts	0x2514, r26
    43f8:	b0 93 15 25 	sts	0x2515, r27
	ma.axis_1 = axis_1;
    43fc:	80 92 16 25 	sts	0x2516, r8
    4400:	90 92 17 25 	sts	0x2517, r9
	ma.axis_2 = axis_2;
    4404:	20 92 18 25 	sts	0x2518, r2
    4408:	30 92 19 25 	sts	0x2519, r3
	ma.axis_linear = axis_linear;
    440c:	e8 a1       	ldd	r30, Y+32	; 0x20
    440e:	f9 a1       	ldd	r31, Y+33	; 0x21
    4410:	e0 93 1a 25 	sts	0x251A, r30
    4414:	f0 93 1b 25 	sts	0x251B, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    4418:	ca 01       	movw	r24, r20
    441a:	b9 01       	movw	r22, r18
    441c:	a8 01       	movw	r20, r16
    441e:	97 01       	movw	r18, r14
    4420:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    4424:	7b 01       	movw	r14, r22
    4426:	8c 01       	movw	r16, r24
    4428:	c6 01       	movw	r24, r12
    442a:	b5 01       	movw	r22, r10
    442c:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <__fixsfsi>
    4430:	97 ff       	sbrs	r25, 7
    4432:	07 c0       	rjmp	.+14     	; 0x4442 <mc_arc+0xf0>
    4434:	90 95       	com	r25
    4436:	80 95       	com	r24
    4438:	70 95       	com	r23
    443a:	61 95       	neg	r22
    443c:	7f 4f       	sbci	r23, 0xFF	; 255
    443e:	8f 4f       	sbci	r24, 0xFF	; 255
    4440:	9f 4f       	sbci	r25, 0xFF	; 255
    4442:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    4446:	9b 01       	movw	r18, r22
    4448:	ac 01       	movw	r20, r24
    444a:	c8 01       	movw	r24, r16
    444c:	b7 01       	movw	r22, r14
    444e:	0e 94 6e 46 	call	0x8cdc	; 0x8cdc <hypot>
    4452:	7b 01       	movw	r14, r22
    4454:	8c 01       	movw	r16, r24
    4456:	60 93 28 25 	sts	0x2528, r22
    445a:	70 93 29 25 	sts	0x2529, r23
    445e:	80 93 2a 25 	sts	0x252A, r24
    4462:	90 93 2b 25 	sts	0x252B, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    4466:	2a e0       	ldi	r18, 0x0A	; 10
    4468:	37 ed       	ldi	r19, 0xD7	; 215
    446a:	43 e2       	ldi	r20, 0x23	; 35
    446c:	5c e3       	ldi	r21, 0x3C	; 60
    446e:	0e 94 71 44 	call	0x88e2	; 0x88e2 <__cmpsf2>
    4472:	88 23       	and	r24, r24
    4474:	1c f4       	brge	.+6      	; 0x447c <mc_arc+0x12a>
    4476:	2f e0       	ldi	r18, 0x0F	; 15
    4478:	30 e0       	ldi	r19, 0x00	; 0
    447a:	c7 c1       	rjmp	.+910    	; 0x480a <mc_arc+0x4b8>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    447c:	c8 01       	movw	r24, r16
    447e:	b7 01       	movw	r22, r14
    4480:	20 91 a1 24 	lds	r18, 0x24A1
    4484:	30 91 a2 24 	lds	r19, 0x24A2
    4488:	40 91 a3 24 	lds	r20, 0x24A3
    448c:	50 91 a4 24 	lds	r21, 0x24A4
    4490:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    4494:	0e 94 5e 44 	call	0x88bc	; 0x88bc <ceil>
    4498:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <__fixsfsi>
    449c:	8b 01       	movw	r16, r22
    449e:	60 93 10 25 	sts	0x2510, r22
    44a2:	70 93 11 25 	sts	0x2511, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    44a6:	2e a1       	ldd	r18, Y+38	; 0x26
    44a8:	3f a1       	ldd	r19, Y+39	; 0x27
    44aa:	23 2b       	or	r18, r19
    44ac:	b9 f0       	breq	.+46     	; 0x44dc <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    44ae:	b8 01       	movw	r22, r16
    44b0:	88 27       	eor	r24, r24
    44b2:	77 fd       	sbrc	r23, 7
    44b4:	80 95       	com	r24
    44b6:	98 2f       	mov	r25, r24
    44b8:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    44bc:	9b 01       	movw	r18, r22
    44be:	ac 01       	movw	r20, r24
    44c0:	6a a1       	ldd	r22, Y+34	; 0x22
    44c2:	7b a1       	ldd	r23, Y+35	; 0x23
    44c4:	8c a1       	ldd	r24, Y+36	; 0x24
    44c6:	9d a1       	ldd	r25, Y+37	; 0x25
    44c8:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    44cc:	60 93 3c 25 	sts	0x253C, r22
    44d0:	70 93 3d 25 	sts	0x253D, r23
    44d4:	80 93 3e 25 	sts	0x253E, r24
    44d8:	90 93 3f 25 	sts	0x253F, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    44dc:	b8 01       	movw	r22, r16
    44de:	88 27       	eor	r24, r24
    44e0:	77 fd       	sbrc	r23, 7
    44e2:	80 95       	com	r24
    44e4:	98 2f       	mov	r25, r24
    44e6:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    44ea:	7b 01       	movw	r14, r22
    44ec:	8c 01       	movw	r16, r24
    44ee:	c3 01       	movw	r24, r6
    44f0:	b2 01       	movw	r22, r4
    44f2:	a8 01       	movw	r20, r16
    44f4:	97 01       	movw	r18, r14
    44f6:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    44fa:	60 93 40 25 	sts	0x2540, r22
    44fe:	70 93 41 25 	sts	0x2541, r23
    4502:	80 93 42 25 	sts	0x2542, r24
    4506:	90 93 43 25 	sts	0x2543, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    450a:	c6 01       	movw	r24, r12
    450c:	b5 01       	movw	r22, r10
    450e:	a8 01       	movw	r20, r16
    4510:	97 01       	movw	r18, r14
    4512:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    4516:	60 93 44 25 	sts	0x2544, r22
    451a:	70 93 45 25 	sts	0x2545, r23
    451e:	80 93 46 25 	sts	0x2546, r24
    4522:	90 93 47 25 	sts	0x2547, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    4526:	69 81       	ldd	r22, Y+1	; 0x01
    4528:	7a 81       	ldd	r23, Y+2	; 0x02
    452a:	8b 81       	ldd	r24, Y+3	; 0x03
    452c:	9c 81       	ldd	r25, Y+4	; 0x04
    452e:	0e 94 96 47 	call	0x8f2c	; 0x8f2c <sin>
    4532:	5b 01       	movw	r10, r22
    4534:	6c 01       	movw	r12, r24
    4536:	f4 01       	movw	r30, r8
    4538:	ee 0f       	add	r30, r30
    453a:	ff 1f       	adc	r31, r31
    453c:	ee 0f       	add	r30, r30
    453e:	ff 1f       	adc	r31, r31
    4540:	ec 57       	subi	r30, 0x7C	; 124
    4542:	fe 4d       	sbci	r31, 0xDE	; 222
    4544:	61 81       	ldd	r22, Z+1	; 0x01
    4546:	72 81       	ldd	r23, Z+2	; 0x02
    4548:	83 81       	ldd	r24, Z+3	; 0x03
    454a:	94 81       	ldd	r25, Z+4	; 0x04
    454c:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    4550:	f4 01       	movw	r30, r8
    4552:	ee 0f       	add	r30, r30
    4554:	ff 1f       	adc	r31, r31
    4556:	e8 0d       	add	r30, r8
    4558:	f9 1d       	adc	r31, r9
    455a:	13 e0       	ldi	r17, 0x03	; 3
    455c:	ee 0f       	add	r30, r30
    455e:	ff 1f       	adc	r31, r31
    4560:	1a 95       	dec	r17
    4562:	e1 f7       	brne	.-8      	; 0x455c <mc_arc+0x20a>
    4564:	e1 56       	subi	r30, 0x61	; 97
    4566:	fb 4d       	sbci	r31, 0xDB	; 219
    4568:	21 a1       	ldd	r18, Z+33	; 0x21
    456a:	32 a1       	ldd	r19, Z+34	; 0x22
    456c:	43 a1       	ldd	r20, Z+35	; 0x23
    456e:	54 a1       	ldd	r21, Z+36	; 0x24
    4570:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    4574:	7b 01       	movw	r14, r22
    4576:	8c 01       	movw	r16, r24
    4578:	c6 01       	movw	r24, r12
    457a:	b5 01       	movw	r22, r10
    457c:	2d 81       	ldd	r18, Y+5	; 0x05
    457e:	3e 81       	ldd	r19, Y+6	; 0x06
    4580:	4f 81       	ldd	r20, Y+7	; 0x07
    4582:	58 85       	ldd	r21, Y+8	; 0x08
    4584:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    4588:	9b 01       	movw	r18, r22
    458a:	ac 01       	movw	r20, r24
    458c:	c8 01       	movw	r24, r16
    458e:	b7 01       	movw	r22, r14
    4590:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    4594:	60 93 2c 25 	sts	0x252C, r22
    4598:	70 93 2d 25 	sts	0x252D, r23
    459c:	80 93 2e 25 	sts	0x252E, r24
    45a0:	90 93 2f 25 	sts	0x252F, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    45a4:	69 81       	ldd	r22, Y+1	; 0x01
    45a6:	7a 81       	ldd	r23, Y+2	; 0x02
    45a8:	8b 81       	ldd	r24, Y+3	; 0x03
    45aa:	9c 81       	ldd	r25, Y+4	; 0x04
    45ac:	0e 94 75 44 	call	0x88ea	; 0x88ea <cos>
    45b0:	5b 01       	movw	r10, r22
    45b2:	6c 01       	movw	r12, r24
    45b4:	f1 01       	movw	r30, r2
    45b6:	ee 0f       	add	r30, r30
    45b8:	ff 1f       	adc	r31, r31
    45ba:	ee 0f       	add	r30, r30
    45bc:	ff 1f       	adc	r31, r31
    45be:	ec 57       	subi	r30, 0x7C	; 124
    45c0:	fe 4d       	sbci	r31, 0xDE	; 222
    45c2:	61 81       	ldd	r22, Z+1	; 0x01
    45c4:	72 81       	ldd	r23, Z+2	; 0x02
    45c6:	83 81       	ldd	r24, Z+3	; 0x03
    45c8:	94 81       	ldd	r25, Z+4	; 0x04
    45ca:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    45ce:	f1 01       	movw	r30, r2
    45d0:	ee 0f       	add	r30, r30
    45d2:	ff 1f       	adc	r31, r31
    45d4:	e2 0d       	add	r30, r2
    45d6:	f3 1d       	adc	r31, r3
    45d8:	53 e0       	ldi	r21, 0x03	; 3
    45da:	ee 0f       	add	r30, r30
    45dc:	ff 1f       	adc	r31, r31
    45de:	5a 95       	dec	r21
    45e0:	e1 f7       	brne	.-8      	; 0x45da <mc_arc+0x288>
    45e2:	e1 56       	subi	r30, 0x61	; 97
    45e4:	fb 4d       	sbci	r31, 0xDB	; 219
    45e6:	21 a1       	ldd	r18, Z+33	; 0x21
    45e8:	32 a1       	ldd	r19, Z+34	; 0x22
    45ea:	43 a1       	ldd	r20, Z+35	; 0x23
    45ec:	54 a1       	ldd	r21, Z+36	; 0x24
    45ee:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    45f2:	7b 01       	movw	r14, r22
    45f4:	8c 01       	movw	r16, r24
    45f6:	c6 01       	movw	r24, r12
    45f8:	b5 01       	movw	r22, r10
    45fa:	2d 81       	ldd	r18, Y+5	; 0x05
    45fc:	3e 81       	ldd	r19, Y+6	; 0x06
    45fe:	4f 81       	ldd	r20, Y+7	; 0x07
    4600:	58 85       	ldd	r21, Y+8	; 0x08
    4602:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    4606:	9b 01       	movw	r18, r22
    4608:	ac 01       	movw	r20, r24
    460a:	c8 01       	movw	r24, r16
    460c:	b7 01       	movw	r22, r14
    460e:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <__subsf3>
    4612:	60 93 30 25 	sts	0x2530, r22
    4616:	70 93 31 25 	sts	0x2531, r23
    461a:	80 93 32 25 	sts	0x2532, r24
    461e:	90 93 33 25 	sts	0x2533, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    4622:	e8 a1       	ldd	r30, Y+32	; 0x20
    4624:	f9 a1       	ldd	r31, Y+33	; 0x21
    4626:	ee 0f       	add	r30, r30
    4628:	ff 1f       	adc	r31, r31
    462a:	ee 0f       	add	r30, r30
    462c:	ff 1f       	adc	r31, r31
    462e:	8f 01       	movw	r16, r30
    4630:	01 5f       	subi	r16, 0xF1	; 241
    4632:	1a 4d       	sbci	r17, 0xDA	; 218
    4634:	ec 57       	subi	r30, 0x7C	; 124
    4636:	fe 4d       	sbci	r31, 0xDE	; 222
    4638:	61 81       	ldd	r22, Z+1	; 0x01
    463a:	72 81       	ldd	r23, Z+2	; 0x02
    463c:	83 81       	ldd	r24, Z+3	; 0x03
    463e:	94 81       	ldd	r25, Z+4	; 0x04
    4640:	0e 94 13 45 	call	0x8a26	; 0x8a26 <__floatsisf>
    4644:	20 91 f0 24 	lds	r18, 0x24F0
    4648:	30 91 f1 24 	lds	r19, 0x24F1
    464c:	40 91 f2 24 	lds	r20, 0x24F2
    4650:	50 91 f3 24 	lds	r21, 0x24F3
    4654:	0e 94 78 44 	call	0x88f0	; 0x88f0 <__divsf3>
    4658:	d8 01       	movw	r26, r16
    465a:	1d 96       	adiw	r26, 0x0d	; 13
    465c:	6d 93       	st	X+, r22
    465e:	7d 93       	st	X+, r23
    4660:	8d 93       	st	X+, r24
    4662:	9c 93       	st	X, r25
    4664:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    4666:	10 92 12 25 	sts	0x2512, r1
    466a:	10 92 13 25 	sts	0x2513, r1
    466e:	bf c0       	rjmp	.+382    	; 0x47ee <mc_arc+0x49c>
		ma.theta += ma.theta_per_segment;
    4670:	60 91 34 25 	lds	r22, 0x2534
    4674:	70 91 35 25 	lds	r23, 0x2535
    4678:	80 91 36 25 	lds	r24, 0x2536
    467c:	90 91 37 25 	lds	r25, 0x2537
    4680:	20 91 40 25 	lds	r18, 0x2540
    4684:	30 91 41 25 	lds	r19, 0x2541
    4688:	40 91 42 25 	lds	r20, 0x2542
    468c:	50 91 43 25 	lds	r21, 0x2543
    4690:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__addsf3>
    4694:	7b 01       	movw	r14, r22
    4696:	8c 01       	movw	r16, r24
    4698:	cb 01       	movw	r24, r22
    469a:	d8 01       	movw	r26, r16
    469c:	80 93 34 25 	sts	0x2534, r24
    46a0:	90 93 35 25 	sts	0x2535, r25
    46a4:	a0 93 36 25 	sts	0x2536, r26
    46a8:	b0 93 37 25 	sts	0x2537, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    46ac:	b7 01       	movw	r22, r14
    46ae:	c8 01       	movw	r24, r16
    46b0:	0e 94 96 47 	call	0x8f2c	; 0x8f2c <sin>
    46b4:	80 90 38 25 	lds	r8, 0x2538
    46b8:	90 90 39 25 	lds	r9, 0x2539
    46bc:	a0 90 3a 25 	lds	r10, 0x253A
    46c0:	b0 90 3b 25 	lds	r11, 0x253B
    46c4:	c0 90 16 25 	lds	r12, 0x2516
    46c8:	d0 90 17 25 	lds	r13, 0x2517
    46cc:	cc 0c       	add	r12, r12
    46ce:	dd 1c       	adc	r13, r13
    46d0:	cc 0c       	add	r12, r12
    46d2:	dd 1c       	adc	r13, r13
    46d4:	ef e0       	ldi	r30, 0x0F	; 15
    46d6:	f5 e2       	ldi	r31, 0x25	; 37
    46d8:	ce 0e       	add	r12, r30
    46da:	df 1e       	adc	r13, r31
    46dc:	a5 01       	movw	r20, r10
    46de:	94 01       	movw	r18, r8
    46e0:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    46e4:	9b 01       	movw	r18, r22
    46e6:	ac 01       	movw	r20, r24
    46e8:	60 91 2c 25 	lds	r22, 0x252C
    46ec:	70 91 2d 25 	lds	r23, 0x252D
    46f0:	80 91 2e 25 	lds	r24, 0x252E
    46f4:	90 91 2f 25 	lds	r25, 0x252F
    46f8:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__addsf3>
    46fc:	d6 01       	movw	r26, r12
    46fe:	1d 96       	adiw	r26, 0x0d	; 13
    4700:	6d 93       	st	X+, r22
    4702:	7d 93       	st	X+, r23
    4704:	8d 93       	st	X+, r24
    4706:	9c 93       	st	X, r25
    4708:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    470a:	b7 01       	movw	r22, r14
    470c:	c8 01       	movw	r24, r16
    470e:	0e 94 75 44 	call	0x88ea	; 0x88ea <cos>
    4712:	00 91 18 25 	lds	r16, 0x2518
    4716:	10 91 19 25 	lds	r17, 0x2519
    471a:	00 0f       	add	r16, r16
    471c:	11 1f       	adc	r17, r17
    471e:	00 0f       	add	r16, r16
    4720:	11 1f       	adc	r17, r17
    4722:	01 5f       	subi	r16, 0xF1	; 241
    4724:	1a 4d       	sbci	r17, 0xDA	; 218
    4726:	a5 01       	movw	r20, r10
    4728:	94 01       	movw	r18, r8
    472a:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    472e:	9b 01       	movw	r18, r22
    4730:	ac 01       	movw	r20, r24
    4732:	60 91 30 25 	lds	r22, 0x2530
    4736:	70 91 31 25 	lds	r23, 0x2531
    473a:	80 91 32 25 	lds	r24, 0x2532
    473e:	90 91 33 25 	lds	r25, 0x2533
    4742:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__addsf3>
    4746:	f8 01       	movw	r30, r16
    4748:	65 87       	std	Z+13, r22	; 0x0d
    474a:	76 87       	std	Z+14, r23	; 0x0e
    474c:	87 87       	std	Z+15, r24	; 0x0f
    474e:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    4750:	00 91 1a 25 	lds	r16, 0x251A
    4754:	10 91 1b 25 	lds	r17, 0x251B
    4758:	00 0f       	add	r16, r16
    475a:	11 1f       	adc	r17, r17
    475c:	00 0f       	add	r16, r16
    475e:	11 1f       	adc	r17, r17
    4760:	01 5f       	subi	r16, 0xF1	; 241
    4762:	1a 4d       	sbci	r17, 0xDA	; 218
    4764:	d8 01       	movw	r26, r16
    4766:	1d 96       	adiw	r26, 0x0d	; 13
    4768:	6d 91       	ld	r22, X+
    476a:	7d 91       	ld	r23, X+
    476c:	8d 91       	ld	r24, X+
    476e:	9c 91       	ld	r25, X
    4770:	50 97       	sbiw	r26, 0x10	; 16
    4772:	20 91 44 25 	lds	r18, 0x2544
    4776:	30 91 45 25 	lds	r19, 0x2545
    477a:	40 91 46 25 	lds	r20, 0x2546
    477e:	50 91 47 25 	lds	r21, 0x2547
    4782:	0e 94 d2 43 	call	0x87a4	; 0x87a4 <__addsf3>
    4786:	f8 01       	movw	r30, r16
    4788:	65 87       	std	Z+13, r22	; 0x0d
    478a:	76 87       	std	Z+14, r23	; 0x0e
    478c:	87 87       	std	Z+15, r24	; 0x0f
    478e:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    4790:	60 91 1c 25 	lds	r22, 0x251C
    4794:	70 91 1d 25 	lds	r23, 0x251D
    4798:	80 91 1e 25 	lds	r24, 0x251E
    479c:	90 91 1f 25 	lds	r25, 0x251F
    47a0:	20 91 20 25 	lds	r18, 0x2520
    47a4:	30 91 21 25 	lds	r19, 0x2521
    47a8:	40 91 22 25 	lds	r20, 0x2522
    47ac:	50 91 23 25 	lds	r21, 0x2523
    47b0:	e0 90 24 25 	lds	r14, 0x2524
    47b4:	f0 90 25 25 	lds	r15, 0x2525
    47b8:	00 91 26 25 	lds	r16, 0x2526
    47bc:	10 91 27 25 	lds	r17, 0x2527
    47c0:	a0 90 3c 25 	lds	r10, 0x253C
    47c4:	b0 90 3d 25 	lds	r11, 0x253D
    47c8:	c0 90 3e 25 	lds	r12, 0x253E
    47cc:	d0 90 3f 25 	lds	r13, 0x253F
    47d0:	80 90 14 25 	lds	r8, 0x2514
    47d4:	90 90 15 25 	lds	r9, 0x2515
    47d8:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    47dc:	80 91 12 25 	lds	r24, 0x2512
    47e0:	90 91 13 25 	lds	r25, 0x2513
    47e4:	01 96       	adiw	r24, 0x01	; 1
    47e6:	80 93 12 25 	sts	0x2512, r24
    47ea:	90 93 13 25 	sts	0x2513, r25
    47ee:	20 91 12 25 	lds	r18, 0x2512
    47f2:	30 91 13 25 	lds	r19, 0x2513
    47f6:	80 91 10 25 	lds	r24, 0x2510
    47fa:	90 91 11 25 	lds	r25, 0x2511
    47fe:	82 17       	cp	r24, r18
    4800:	93 07       	cpc	r25, r19
    4802:	0c f0       	brlt	.+2      	; 0x4806 <mc_arc+0x4b4>
    4804:	35 cf       	rjmp	.-406    	; 0x4670 <mc_arc+0x31e>
    4806:	20 e0       	ldi	r18, 0x00	; 0
    4808:	30 e0       	ldi	r19, 0x00	; 0
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    480a:	c9 01       	movw	r24, r18
    480c:	28 96       	adiw	r28, 0x08	; 8
    480e:	cd bf       	out	0x3d, r28	; 61
    4810:	de bf       	out	0x3e, r29	; 62
    4812:	cf 91       	pop	r28
    4814:	df 91       	pop	r29
    4816:	1f 91       	pop	r17
    4818:	0f 91       	pop	r16
    481a:	ff 90       	pop	r15
    481c:	ef 90       	pop	r14
    481e:	df 90       	pop	r13
    4820:	cf 90       	pop	r12
    4822:	bf 90       	pop	r11
    4824:	af 90       	pop	r10
    4826:	9f 90       	pop	r9
    4828:	8f 90       	pop	r8
    482a:	7f 90       	pop	r7
    482c:	6f 90       	pop	r6
    482e:	5f 90       	pop	r5
    4830:	4f 90       	pop	r4
    4832:	3f 90       	pop	r3
    4834:	2f 90       	pop	r2
    4836:	08 95       	ret

00004838 <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    4838:	e0 e6       	ldi	r30, 0x60	; 96
    483a:	f6 e0       	ldi	r31, 0x06	; 6
    483c:	80 e4       	ldi	r24, 0x40	; 64
    483e:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    4840:	80 e8       	ldi	r24, 0x80	; 128
    4842:	81 83       	std	Z+1, r24	; 0x01
}
    4844:	08 95       	ret

00004846 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    4846:	97 fd       	sbrc	r25, 7
    4848:	05 c0       	rjmp	.+10     	; 0x4854 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    484a:	80 e8       	ldi	r24, 0x80	; 128
    484c:	e0 e6       	ldi	r30, 0x60	; 96
    484e:	f6 e0       	ldi	r31, 0x06	; 6
    4850:	85 83       	std	Z+5, r24	; 0x05
    4852:	04 c0       	rjmp	.+8      	; 0x485c <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    4854:	80 e8       	ldi	r24, 0x80	; 128
    4856:	e0 e6       	ldi	r30, 0x60	; 96
    4858:	f6 e0       	ldi	r31, 0x06	; 6
    485a:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    485c:	80 e4       	ldi	r24, 0x40	; 64
    485e:	e0 e6       	ldi	r30, 0x60	; 96
    4860:	f6 e0       	ldi	r31, 0x06	; 6
    4862:	85 83       	std	Z+5, r24	; 0x05
}
    4864:	08 95       	ret

00004866 <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    4866:	80 e4       	ldi	r24, 0x40	; 64
    4868:	e0 e6       	ldi	r30, 0x60	; 96
    486a:	f6 e0       	ldi	r31, 0x06	; 6
    486c:	86 83       	std	Z+6, r24	; 0x06
}
    486e:	08 95       	ret

00004870 <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    4870:	cf 93       	push	r28
    4872:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    4874:	10 92 5c 24 	sts	0x245C, r1
	ax.exec_mutex = FALSE;
    4878:	10 92 5b 24 	sts	0x245B, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    487c:	80 e0       	ldi	r24, 0x00	; 0
    487e:	96 e0       	ldi	r25, 0x06	; 6
    4880:	80 93 6b 24 	sts	0x246B, r24
    4884:	90 93 6c 24 	sts	0x246C, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    4888:	80 ea       	ldi	r24, 0xA0	; 160
    488a:	96 e0       	ldi	r25, 0x06	; 6
    488c:	80 93 7b 24 	sts	0x247B, r24
    4890:	90 93 7c 24 	sts	0x247C, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    4894:	80 e8       	ldi	r24, 0x80	; 128
    4896:	96 e0       	ldi	r25, 0x06	; 6
    4898:	80 93 8b 24 	sts	0x248B, r24
    489c:	90 93 8c 24 	sts	0x248C, r25
	ax.a[A].port = &A_MOTOR_PORT;
    48a0:	80 e6       	ldi	r24, 0x60	; 96
    48a2:	96 e0       	ldi	r25, 0x06	; 6
    48a4:	80 93 9b 24 	sts	0x249B, r24
    48a8:	90 93 9c 24 	sts	0x249C, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	98 e0       	ldi	r25, 0x08	; 8
    48b0:	80 93 6d 24 	sts	0x246D, r24
    48b4:	90 93 6e 24 	sts	0x246E, r25
	ax.a[Y].timer = &Y_TIMER;
    48b8:	80 e0       	ldi	r24, 0x00	; 0
    48ba:	99 e0       	ldi	r25, 0x09	; 9
    48bc:	80 93 7d 24 	sts	0x247D, r24
    48c0:	90 93 7e 24 	sts	0x247E, r25
	ax.a[Z].timer = &Z_TIMER;
    48c4:	80 e0       	ldi	r24, 0x00	; 0
    48c6:	9a e0       	ldi	r25, 0x0A	; 10
    48c8:	80 93 8d 24 	sts	0x248D, r24
    48cc:	90 93 8e 24 	sts	0x248E, r25
	ax.a[A].timer = &A_TIMER;
    48d0:	80 e0       	ldi	r24, 0x00	; 0
    48d2:	9b e0       	ldi	r25, 0x0B	; 11
    48d4:	80 93 9d 24 	sts	0x249D, r24
    48d8:	90 93 9e 24 	sts	0x249E, r25
    48dc:	cf ea       	ldi	r28, 0xAF	; 175
    48de:	d4 e2       	ldi	r29, 0x24	; 36
    48e0:	a9 e6       	ldi	r26, 0x69	; 105
    48e2:	b4 e2       	ldi	r27, 0x24	; 36

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    48e4:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    48e6:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    48e8:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    48ea:	88 81       	ld	r24, Y
    48ec:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    48ee:	12 96       	adiw	r26, 0x02	; 2
    48f0:	ed 91       	ld	r30, X+
    48f2:	fc 91       	ld	r31, X
    48f4:	13 97       	sbiw	r26, 0x03	; 3
    48f6:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    48f8:	12 96       	adiw	r26, 0x02	; 2
    48fa:	ed 91       	ld	r30, X+
    48fc:	fc 91       	ld	r31, X
    48fe:	13 97       	sbiw	r26, 0x03	; 3
    4900:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
    4902:	12 96       	adiw	r26, 0x02	; 2
    4904:	ed 91       	ld	r30, X+
    4906:	fc 91       	ld	r31, X
    4908:	13 97       	sbiw	r26, 0x03	; 3
    490a:	84 81       	ldd	r24, Z+4	; 0x04
    490c:	88 61       	ori	r24, 0x18	; 24
    490e:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4910:	12 96       	adiw	r26, 0x02	; 2
    4912:	ed 91       	ld	r30, X+
    4914:	fc 91       	ld	r31, X
    4916:	13 97       	sbiw	r26, 0x03	; 3
    4918:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    491a:	14 96       	adiw	r26, 0x04	; 4
    491c:	ed 91       	ld	r30, X+
    491e:	fc 91       	ld	r31, X
    4920:	15 97       	sbiw	r26, 0x05	; 5
    4922:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    4924:	14 96       	adiw	r26, 0x04	; 4
    4926:	ed 91       	ld	r30, X+
    4928:	fc 91       	ld	r31, X
    492a:	15 97       	sbiw	r26, 0x05	; 5
    492c:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    492e:	14 96       	adiw	r26, 0x04	; 4
    4930:	ed 91       	ld	r30, X+
    4932:	fc 91       	ld	r31, X
    4934:	15 97       	sbiw	r26, 0x05	; 5
    4936:	96 83       	std	Z+6, r25	; 0x06
    4938:	68 96       	adiw	r28, 0x18	; 24
    493a:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    493c:	85 e2       	ldi	r24, 0x25	; 37
    493e:	cf 30       	cpi	r28, 0x0F	; 15
    4940:	d8 07       	cpc	r29, r24
    4942:	99 f6       	brne	.-90     	; 0x48ea <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    4944:	df 91       	pop	r29
    4946:	cf 91       	pop	r28
    4948:	08 95       	ret

0000494a <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    494a:	e8 2f       	mov	r30, r24
    494c:	f0 e0       	ldi	r31, 0x00	; 0
    494e:	84 e0       	ldi	r24, 0x04	; 4
    4950:	ee 0f       	add	r30, r30
    4952:	ff 1f       	adc	r31, r31
    4954:	8a 95       	dec	r24
    4956:	e1 f7       	brne	.-8      	; 0x4950 <st_set_polarity+0x6>
    4958:	e5 5a       	subi	r30, 0xA5	; 165
    495a:	fb 4d       	sbci	r31, 0xDB	; 219
    495c:	66 87       	std	Z+14, r22	; 0x0e
}
    495e:	08 95       	ret

00004960 <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X].step_counter = 0x00001000;
    4960:	2f e5       	ldi	r18, 0x5F	; 95
    4962:	34 e2       	ldi	r19, 0x24	; 36
    4964:	80 e0       	ldi	r24, 0x00	; 0
    4966:	90 e1       	ldi	r25, 0x10	; 16
    4968:	a0 e0       	ldi	r26, 0x00	; 0
    496a:	b0 e0       	ldi	r27, 0x00	; 0
    496c:	80 93 5f 24 	sts	0x245F, r24
    4970:	90 93 60 24 	sts	0x2460, r25
    4974:	a0 93 61 24 	sts	0x2461, r26
    4978:	b0 93 62 24 	sts	0x2462, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    497c:	e0 91 6d 24 	lds	r30, 0x246D
    4980:	f0 91 6e 24 	lds	r31, 0x246E
    4984:	80 e0       	ldi	r24, 0x00	; 0
    4986:	90 e1       	ldi	r25, 0x10	; 16
    4988:	86 a3       	std	Z+38, r24	; 0x26
    498a:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    498c:	41 e0       	ldi	r20, 0x01	; 1
    498e:	40 83       	st	Z, r20

	ax.a[Y].step_counter = 0x00000800;
    4990:	80 e0       	ldi	r24, 0x00	; 0
    4992:	98 e0       	ldi	r25, 0x08	; 8
    4994:	a0 e0       	ldi	r26, 0x00	; 0
    4996:	b0 e0       	ldi	r27, 0x00	; 0
    4998:	80 93 6f 24 	sts	0x246F, r24
    499c:	90 93 70 24 	sts	0x2470, r25
    49a0:	a0 93 71 24 	sts	0x2471, r26
    49a4:	b0 93 72 24 	sts	0x2472, r27
	ax.a[Y].timer->PER = 0x2000;
    49a8:	e0 91 7d 24 	lds	r30, 0x247D
    49ac:	f0 91 7e 24 	lds	r31, 0x247E
    49b0:	80 e0       	ldi	r24, 0x00	; 0
    49b2:	90 e2       	ldi	r25, 0x20	; 32
    49b4:	86 a3       	std	Z+38, r24	; 0x26
    49b6:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    49b8:	40 83       	st	Z, r20

	ax.a[Z].step_counter = 0x00000600;
    49ba:	80 e0       	ldi	r24, 0x00	; 0
    49bc:	96 e0       	ldi	r25, 0x06	; 6
    49be:	a0 e0       	ldi	r26, 0x00	; 0
    49c0:	b0 e0       	ldi	r27, 0x00	; 0
    49c2:	80 93 7f 24 	sts	0x247F, r24
    49c6:	90 93 80 24 	sts	0x2480, r25
    49ca:	a0 93 81 24 	sts	0x2481, r26
    49ce:	b0 93 82 24 	sts	0x2482, r27
	ax.a[Z].timer->PER = 0x3000;
    49d2:	e0 91 8d 24 	lds	r30, 0x248D
    49d6:	f0 91 8e 24 	lds	r31, 0x248E
    49da:	80 e0       	ldi	r24, 0x00	; 0
    49dc:	90 e3       	ldi	r25, 0x30	; 48
    49de:	86 a3       	std	Z+38, r24	; 0x26
    49e0:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    49e2:	40 83       	st	Z, r20

	ax.a[A].step_counter = 0x00000400;
    49e4:	80 e0       	ldi	r24, 0x00	; 0
    49e6:	94 e0       	ldi	r25, 0x04	; 4
    49e8:	a0 e0       	ldi	r26, 0x00	; 0
    49ea:	b0 e0       	ldi	r27, 0x00	; 0
    49ec:	80 93 8f 24 	sts	0x248F, r24
    49f0:	90 93 90 24 	sts	0x2490, r25
    49f4:	a0 93 91 24 	sts	0x2491, r26
    49f8:	b0 93 92 24 	sts	0x2492, r27
	ax.a[A].timer->PER = 0x4000;
    49fc:	d9 01       	movw	r26, r18
    49fe:	de 96       	adiw	r26, 0x3e	; 62
    4a00:	ed 91       	ld	r30, X+
    4a02:	fc 91       	ld	r31, X
    4a04:	df 97       	sbiw	r26, 0x3f	; 63
    4a06:	80 e0       	ldi	r24, 0x00	; 0
    4a08:	90 e4       	ldi	r25, 0x40	; 64
    4a0a:	86 a3       	std	Z+38, r24	; 0x26
    4a0c:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    4a0e:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    4a10:	23 50       	subi	r18, 0x03	; 3
    4a12:	30 40       	sbci	r19, 0x00	; 0
    4a14:	f9 01       	movw	r30, r18
    4a16:	80 81       	ld	r24, Z
    4a18:	8f 60       	ori	r24, 0x0F	; 15
    4a1a:	80 83       	st	Z, r24
}
    4a1c:	08 95       	ret

00004a1e <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    4a1e:	f8 94       	cli
	mv_flush();									// flush the move buffer
    4a20:	0e 94 5e 32 	call	0x64bc	; 0x64bc <mv_flush>
	sei();
    4a24:	78 94       	sei
}
    4a26:	08 95       	ret

00004a28 <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    4a28:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    4a2a:	e0 91 6d 24 	lds	r30, 0x246D
    4a2e:	f0 91 6e 24 	lds	r31, 0x246E
    4a32:	10 82       	st	Z, r1
    4a34:	e0 91 7d 24 	lds	r30, 0x247D
    4a38:	f0 91 7e 24 	lds	r31, 0x247E
    4a3c:	10 82       	st	Z, r1
    4a3e:	e0 91 8d 24 	lds	r30, 0x248D
    4a42:	f0 91 8e 24 	lds	r31, 0x248E
    4a46:	10 82       	st	Z, r1
    4a48:	e0 91 9d 24 	lds	r30, 0x249D
    4a4c:	f0 91 9e 24 	lds	r31, 0x249E
    4a50:	10 82       	st	Z, r1
	}	
	mv_flush();									// flush the move buffer
    4a52:	0e 94 5e 32 	call	0x64bc	; 0x64bc <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4a56:	10 92 5c 24 	sts	0x245C, r1
	sei();
    4a5a:	78 94       	sei
}
    4a5c:	08 95       	ret

00004a5e <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    4a5e:	cf 92       	push	r12
    4a60:	df 92       	push	r13
    4a62:	ef 92       	push	r14
    4a64:	ff 92       	push	r15
    4a66:	0f 93       	push	r16
    4a68:	1f 93       	push	r17
    4a6a:	cf 93       	push	r28
    4a6c:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    4a6e:	80 91 5b 24 	lds	r24, 0x245B
    4a72:	88 23       	and	r24, r24
    4a74:	09 f0       	breq	.+2      	; 0x4a78 <st_execute_move+0x1a>
    4a76:	32 c1       	rjmp	.+612    	; 0x4cdc <st_execute_move+0x27e>
		return;
	}
	ax.exec_mutex = TRUE;
    4a78:	81 e0       	ldi	r24, 0x01	; 1
    4a7a:	80 93 5b 24 	sts	0x245B, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    4a7e:	80 91 5c 24 	lds	r24, 0x245C
    4a82:	88 23       	and	r24, r24
    4a84:	09 f0       	breq	.+2      	; 0x4a88 <st_execute_move+0x2a>
    4a86:	28 c1       	rjmp	.+592    	; 0x4cd8 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    4a88:	0e 94 1b 32 	call	0x6436	; 0x6436 <mv_dequeue_move_buffer>
    4a8c:	80 93 5d 24 	sts	0x245D, r24
    4a90:	90 93 5e 24 	sts	0x245E, r25
    4a94:	89 2b       	or	r24, r25
    4a96:	09 f4       	brne	.+2      	; 0x4a9a <st_execute_move+0x3c>
    4a98:	1f c1       	rjmp	.+574    	; 0x4cd8 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;
		return;
    4a9a:	6f e5       	ldi	r22, 0x5F	; 95
    4a9c:	74 e2       	ldi	r23, 0x24	; 36
    4a9e:	00 e0       	ldi	r16, 0x00	; 0
    4aa0:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4aa2:	94 e0       	ldi	r25, 0x04	; 4
    4aa4:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4aa6:	82 e0       	ldi	r24, 0x02	; 2
    4aa8:	d8 2e       	mov	r13, r24
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.exec_mutex = FALSE;
		return;
    4aaa:	f0 2e       	mov	r15, r16
    4aac:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    4aae:	db 01       	movw	r26, r22
    4ab0:	1e 96       	adiw	r26, 0x0e	; 14
    4ab2:	ed 91       	ld	r30, X+
    4ab4:	fc 91       	ld	r31, X
    4ab6:	1f 97       	sbiw	r26, 0x0f	; 15
    4ab8:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    4aba:	c0 91 5d 24 	lds	r28, 0x245D
    4abe:	d0 91 5e 24 	lds	r29, 0x245E
    4ac2:	c8 01       	movw	r24, r16
    4ac4:	fc 01       	movw	r30, r24
    4ac6:	b3 e0       	ldi	r27, 0x03	; 3
    4ac8:	ee 0f       	add	r30, r30
    4aca:	ff 1f       	adc	r31, r31
    4acc:	ba 95       	dec	r27
    4ace:	e1 f7       	brne	.-8      	; 0x4ac8 <st_execute_move+0x6a>
    4ad0:	88 0f       	add	r24, r24
    4ad2:	99 1f       	adc	r25, r25
    4ad4:	e8 0f       	add	r30, r24
    4ad6:	f9 1f       	adc	r31, r25
    4ad8:	ec 0f       	add	r30, r28
    4ada:	fd 1f       	adc	r31, r29
    4adc:	80 81       	ld	r24, Z
    4ade:	91 81       	ldd	r25, Z+1	; 0x01
    4ae0:	a2 81       	ldd	r26, Z+2	; 0x02
    4ae2:	b3 81       	ldd	r27, Z+3	; 0x03
    4ae4:	00 97       	sbiw	r24, 0x00	; 0
    4ae6:	a1 05       	cpc	r26, r1
    4ae8:	b1 05       	cpc	r27, r1
    4aea:	09 f4       	brne	.+2      	; 0x4aee <st_execute_move+0x90>
    4aec:	a6 c0       	rjmp	.+332    	; 0x4c3a <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    4aee:	c8 01       	movw	r24, r16
    4af0:	9c 01       	movw	r18, r24
    4af2:	f3 e0       	ldi	r31, 0x03	; 3
    4af4:	22 0f       	add	r18, r18
    4af6:	33 1f       	adc	r19, r19
    4af8:	fa 95       	dec	r31
    4afa:	e1 f7       	brne	.-8      	; 0x4af4 <st_execute_move+0x96>
    4afc:	88 0f       	add	r24, r24
    4afe:	99 1f       	adc	r25, r25
    4b00:	28 0f       	add	r18, r24
    4b02:	39 1f       	adc	r19, r25
    4b04:	c2 0f       	add	r28, r18
    4b06:	d3 1f       	adc	r29, r19
    4b08:	89 85       	ldd	r24, Y+9	; 0x09
    4b0a:	fb 01       	movw	r30, r22
    4b0c:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4b0e:	e0 91 5d 24 	lds	r30, 0x245D
    4b12:	f0 91 5e 24 	lds	r31, 0x245E
    4b16:	c8 01       	movw	r24, r16
    4b18:	9c 01       	movw	r18, r24
    4b1a:	53 e0       	ldi	r21, 0x03	; 3
    4b1c:	22 0f       	add	r18, r18
    4b1e:	33 1f       	adc	r19, r19
    4b20:	5a 95       	dec	r21
    4b22:	e1 f7       	brne	.-8      	; 0x4b1c <st_execute_move+0xbe>
    4b24:	88 0f       	add	r24, r24
    4b26:	99 1f       	adc	r25, r25
    4b28:	28 0f       	add	r18, r24
    4b2a:	39 1f       	adc	r19, r25
    4b2c:	e2 0f       	add	r30, r18
    4b2e:	f3 1f       	adc	r31, r19
    4b30:	90 85       	ldd	r25, Z+8	; 0x08
    4b32:	db 01       	movw	r26, r22
    4b34:	1a 96       	adiw	r26, 0x0a	; 10
    4b36:	8c 91       	ld	r24, X
    4b38:	1a 97       	sbiw	r26, 0x0a	; 10
    4b3a:	1c 96       	adiw	r26, 0x0c	; 12
    4b3c:	ed 91       	ld	r30, X+
    4b3e:	fc 91       	ld	r31, X
    4b40:	1d 97       	sbiw	r26, 0x0d	; 13
    4b42:	98 17       	cp	r25, r24
    4b44:	11 f0       	breq	.+4      	; 0x4b4a <st_execute_move+0xec>
    4b46:	d5 82       	std	Z+5, r13	; 0x05
    4b48:	01 c0       	rjmp	.+2      	; 0x4b4c <st_execute_move+0xee>
    4b4a:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    4b4c:	40 91 5d 24 	lds	r20, 0x245D
    4b50:	50 91 5e 24 	lds	r21, 0x245E
    4b54:	8f 2d       	mov	r24, r15
    4b56:	9e 2d       	mov	r25, r14
    4b58:	fc 01       	movw	r30, r24
    4b5a:	33 e0       	ldi	r19, 0x03	; 3
    4b5c:	ee 0f       	add	r30, r30
    4b5e:	ff 1f       	adc	r31, r31
    4b60:	3a 95       	dec	r19
    4b62:	e1 f7       	brne	.-8      	; 0x4b5c <st_execute_move+0xfe>
    4b64:	88 0f       	add	r24, r24
    4b66:	99 1f       	adc	r25, r25
    4b68:	e8 0f       	add	r30, r24
    4b6a:	f9 1f       	adc	r31, r25
    4b6c:	e4 0f       	add	r30, r20
    4b6e:	f5 1f       	adc	r31, r21
    4b70:	80 81       	ld	r24, Z
    4b72:	91 81       	ldd	r25, Z+1	; 0x01
    4b74:	a2 81       	ldd	r26, Z+2	; 0x02
    4b76:	b3 81       	ldd	r27, Z+3	; 0x03
    4b78:	fb 01       	movw	r30, r22
    4b7a:	80 83       	st	Z, r24
    4b7c:	91 83       	std	Z+1, r25	; 0x01
    4b7e:	a2 83       	std	Z+2, r26	; 0x02
    4b80:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    4b82:	8f 2d       	mov	r24, r15
    4b84:	9e 2d       	mov	r25, r14
    4b86:	fc 01       	movw	r30, r24
    4b88:	b3 e0       	ldi	r27, 0x03	; 3
    4b8a:	ee 0f       	add	r30, r30
    4b8c:	ff 1f       	adc	r31, r31
    4b8e:	ba 95       	dec	r27
    4b90:	e1 f7       	brne	.-8      	; 0x4b8a <st_execute_move+0x12c>
    4b92:	88 0f       	add	r24, r24
    4b94:	99 1f       	adc	r25, r25
    4b96:	e8 0f       	add	r30, r24
    4b98:	f9 1f       	adc	r31, r25
    4b9a:	e4 0f       	add	r30, r20
    4b9c:	f5 1f       	adc	r31, r21
    4b9e:	86 81       	ldd	r24, Z+6	; 0x06
    4ba0:	97 81       	ldd	r25, Z+7	; 0x07
    4ba2:	db 01       	movw	r26, r22
    4ba4:	16 96       	adiw	r26, 0x06	; 6
    4ba6:	8d 93       	st	X+, r24
    4ba8:	9c 93       	st	X, r25
    4baa:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    4bac:	8f 2d       	mov	r24, r15
    4bae:	9e 2d       	mov	r25, r14
    4bb0:	fc 01       	movw	r30, r24
    4bb2:	33 e0       	ldi	r19, 0x03	; 3
    4bb4:	ee 0f       	add	r30, r30
    4bb6:	ff 1f       	adc	r31, r31
    4bb8:	3a 95       	dec	r19
    4bba:	e1 f7       	brne	.-8      	; 0x4bb4 <st_execute_move+0x156>
    4bbc:	88 0f       	add	r24, r24
    4bbe:	99 1f       	adc	r25, r25
    4bc0:	e8 0f       	add	r30, r24
    4bc2:	f9 1f       	adc	r31, r25
    4bc4:	e4 0f       	add	r30, r20
    4bc6:	f5 1f       	adc	r31, r21
    4bc8:	86 81       	ldd	r24, Z+6	; 0x06
    4bca:	97 81       	ldd	r25, Z+7	; 0x07
    4bcc:	18 96       	adiw	r26, 0x08	; 8
    4bce:	8d 93       	st	X+, r24
    4bd0:	9c 93       	st	X, r25
    4bd2:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    4bd4:	8f 2d       	mov	r24, r15
    4bd6:	9e 2d       	mov	r25, r14
    4bd8:	fc 01       	movw	r30, r24
    4bda:	33 e0       	ldi	r19, 0x03	; 3
    4bdc:	ee 0f       	add	r30, r30
    4bde:	ff 1f       	adc	r31, r31
    4be0:	3a 95       	dec	r19
    4be2:	e1 f7       	brne	.-8      	; 0x4bdc <st_execute_move+0x17e>
    4be4:	88 0f       	add	r24, r24
    4be6:	99 1f       	adc	r25, r25
    4be8:	e8 0f       	add	r30, r24
    4bea:	f9 1f       	adc	r31, r25
    4bec:	e4 0f       	add	r30, r20
    4bee:	f5 1f       	adc	r31, r21
    4bf0:	84 81       	ldd	r24, Z+4	; 0x04
    4bf2:	95 81       	ldd	r25, Z+5	; 0x05
    4bf4:	14 96       	adiw	r26, 0x04	; 4
    4bf6:	8d 93       	st	X+, r24
    4bf8:	9c 93       	st	X, r25
    4bfa:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    4bfc:	1e 96       	adiw	r26, 0x0e	; 14
    4bfe:	ed 91       	ld	r30, X+
    4c00:	fc 91       	ld	r31, X
    4c02:	1f 97       	sbiw	r26, 0x0f	; 15
    4c04:	8f 2d       	mov	r24, r15
    4c06:	9e 2d       	mov	r25, r14
    4c08:	9c 01       	movw	r18, r24
    4c0a:	b3 e0       	ldi	r27, 0x03	; 3
    4c0c:	22 0f       	add	r18, r18
    4c0e:	33 1f       	adc	r19, r19
    4c10:	ba 95       	dec	r27
    4c12:	e1 f7       	brne	.-8      	; 0x4c0c <st_execute_move+0x1ae>
    4c14:	88 0f       	add	r24, r24
    4c16:	99 1f       	adc	r25, r25
    4c18:	28 0f       	add	r18, r24
    4c1a:	39 1f       	adc	r19, r25
    4c1c:	42 0f       	add	r20, r18
    4c1e:	53 1f       	adc	r21, r19
    4c20:	da 01       	movw	r26, r20
    4c22:	14 96       	adiw	r26, 0x04	; 4
    4c24:	8d 91       	ld	r24, X+
    4c26:	9c 91       	ld	r25, X
    4c28:	15 97       	sbiw	r26, 0x05	; 5
    4c2a:	86 a3       	std	Z+38, r24	; 0x26
    4c2c:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4c2e:	db 01       	movw	r26, r22
    4c30:	1c 96       	adiw	r26, 0x0c	; 12
    4c32:	ed 91       	ld	r30, X+
    4c34:	fc 91       	ld	r31, X
    4c36:	1d 97       	sbiw	r26, 0x0d	; 13
    4c38:	c6 82       	std	Z+6, r12	; 0x06
    4c3a:	0f 5f       	subi	r16, 0xFF	; 255
    4c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c3e:	60 5f       	subi	r22, 0xF0	; 240
    4c40:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    4c42:	03 30       	cpi	r16, 0x03	; 3
    4c44:	11 05       	cpc	r17, r1
    4c46:	09 f0       	breq	.+2      	; 0x4c4a <st_execute_move+0x1ec>
    4c48:	30 cf       	rjmp	.-416    	; 0x4aaa <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4c4a:	10 92 5c 24 	sts	0x245C, r1
	if (ax.a[X].step_counter) { 
    4c4e:	80 91 5f 24 	lds	r24, 0x245F
    4c52:	90 91 60 24 	lds	r25, 0x2460
    4c56:	a0 91 61 24 	lds	r26, 0x2461
    4c5a:	b0 91 62 24 	lds	r27, 0x2462
    4c5e:	00 97       	sbiw	r24, 0x00	; 0
    4c60:	a1 05       	cpc	r26, r1
    4c62:	b1 05       	cpc	r27, r1
    4c64:	59 f0       	breq	.+22     	; 0x4c7c <st_execute_move+0x21e>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    4c66:	e0 91 6d 24 	lds	r30, 0x246D
    4c6a:	f0 91 6e 24 	lds	r31, 0x246E
    4c6e:	81 e0       	ldi	r24, 0x01	; 1
    4c70:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4c72:	80 91 5c 24 	lds	r24, 0x245C
    4c76:	88 60       	ori	r24, 0x08	; 8
    4c78:	80 93 5c 24 	sts	0x245C, r24
	}
	if (ax.a[Y].step_counter) {
    4c7c:	80 91 6f 24 	lds	r24, 0x246F
    4c80:	90 91 70 24 	lds	r25, 0x2470
    4c84:	a0 91 71 24 	lds	r26, 0x2471
    4c88:	b0 91 72 24 	lds	r27, 0x2472
    4c8c:	00 97       	sbiw	r24, 0x00	; 0
    4c8e:	a1 05       	cpc	r26, r1
    4c90:	b1 05       	cpc	r27, r1
    4c92:	59 f0       	breq	.+22     	; 0x4caa <st_execute_move+0x24c>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4c94:	e0 91 7d 24 	lds	r30, 0x247D
    4c98:	f0 91 7e 24 	lds	r31, 0x247E
    4c9c:	81 e0       	ldi	r24, 0x01	; 1
    4c9e:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4ca0:	80 91 5c 24 	lds	r24, 0x245C
    4ca4:	84 60       	ori	r24, 0x04	; 4
    4ca6:	80 93 5c 24 	sts	0x245C, r24
	}
	if (ax.a[Z].step_counter) {
    4caa:	80 91 7f 24 	lds	r24, 0x247F
    4cae:	90 91 80 24 	lds	r25, 0x2480
    4cb2:	a0 91 81 24 	lds	r26, 0x2481
    4cb6:	b0 91 82 24 	lds	r27, 0x2482
    4cba:	00 97       	sbiw	r24, 0x00	; 0
    4cbc:	a1 05       	cpc	r26, r1
    4cbe:	b1 05       	cpc	r27, r1
    4cc0:	59 f0       	breq	.+22     	; 0x4cd8 <st_execute_move+0x27a>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4cc2:	e0 91 8d 24 	lds	r30, 0x248D
    4cc6:	f0 91 8e 24 	lds	r31, 0x248E
    4cca:	81 e0       	ldi	r24, 0x01	; 1
    4ccc:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4cce:	80 91 5c 24 	lds	r24, 0x245C
    4cd2:	82 60       	ori	r24, 0x02	; 2
    4cd4:	80 93 5c 24 	sts	0x245C, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4cd8:	10 92 5b 24 	sts	0x245B, r1
}
    4cdc:	df 91       	pop	r29
    4cde:	cf 91       	pop	r28
    4ce0:	1f 91       	pop	r17
    4ce2:	0f 91       	pop	r16
    4ce4:	ff 90       	pop	r15
    4ce6:	ef 90       	pop	r14
    4ce8:	df 90       	pop	r13
    4cea:	cf 90       	pop	r12
    4cec:	08 95       	ret

00004cee <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4cee:	10 92 5b 24 	sts	0x245B, r1
	st_execute_move();		// recursively empty the move queue
    4cf2:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <st_execute_move>
	return;
}
    4cf6:	08 95       	ret

00004cf8 <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4cf8:	1f 92       	push	r1
    4cfa:	0f 92       	push	r0
    4cfc:	0f b6       	in	r0, 0x3f	; 63
    4cfe:	0f 92       	push	r0
    4d00:	0b b6       	in	r0, 0x3b	; 59
    4d02:	0f 92       	push	r0
    4d04:	11 24       	eor	r1, r1
    4d06:	2f 93       	push	r18
    4d08:	3f 93       	push	r19
    4d0a:	4f 93       	push	r20
    4d0c:	5f 93       	push	r21
    4d0e:	6f 93       	push	r22
    4d10:	7f 93       	push	r23
    4d12:	8f 93       	push	r24
    4d14:	9f 93       	push	r25
    4d16:	af 93       	push	r26
    4d18:	bf 93       	push	r27
    4d1a:	ef 93       	push	r30
    4d1c:	ff 93       	push	r31
	if (--ax.a[A].postscale_counter != 0) {
    4d1e:	80 91 97 24 	lds	r24, 0x2497
    4d22:	90 91 98 24 	lds	r25, 0x2498
    4d26:	01 97       	sbiw	r24, 0x01	; 1
    4d28:	80 93 97 24 	sts	0x2497, r24
    4d2c:	90 93 98 24 	sts	0x2498, r25
    4d30:	89 2b       	or	r24, r25
    4d32:	a1 f5       	brne	.+104    	; 0x4d9c <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4d34:	e0 e6       	ldi	r30, 0x60	; 96
    4d36:	f6 e0       	ldi	r31, 0x06	; 6
    4d38:	81 e0       	ldi	r24, 0x01	; 1
    4d3a:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    4d3c:	80 91 8f 24 	lds	r24, 0x248F
    4d40:	90 91 90 24 	lds	r25, 0x2490
    4d44:	a0 91 91 24 	lds	r26, 0x2491
    4d48:	b0 91 92 24 	lds	r27, 0x2492
    4d4c:	01 97       	sbiw	r24, 0x01	; 1
    4d4e:	a1 09       	sbc	r26, r1
    4d50:	b1 09       	sbc	r27, r1
    4d52:	80 93 8f 24 	sts	0x248F, r24
    4d56:	90 93 90 24 	sts	0x2490, r25
    4d5a:	a0 93 91 24 	sts	0x2491, r26
    4d5e:	b0 93 92 24 	sts	0x2492, r27
    4d62:	00 97       	sbiw	r24, 0x00	; 0
    4d64:	a1 05       	cpc	r26, r1
    4d66:	b1 05       	cpc	r27, r1
    4d68:	69 f4       	brne	.+26     	; 0x4d84 <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4d6a:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4d6e:	84 e0       	ldi	r24, 0x04	; 4
    4d70:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4d72:	80 91 5c 24 	lds	r24, 0x245C
    4d76:	8e 7f       	andi	r24, 0xFE	; 254
    4d78:	80 93 5c 24 	sts	0x245C, r24
		if (ax.active_axes == 0) {
    4d7c:	88 23       	and	r24, r24
    4d7e:	11 f4       	brne	.+4      	; 0x4d84 <__vector_108+0x8c>
			st_execute_move();
    4d80:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    4d84:	80 91 95 24 	lds	r24, 0x2495
    4d88:	90 91 96 24 	lds	r25, 0x2496
    4d8c:	80 93 97 24 	sts	0x2497, r24
    4d90:	90 93 98 24 	sts	0x2498, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4d94:	81 e0       	ldi	r24, 0x01	; 1
    4d96:	e0 e6       	ldi	r30, 0x60	; 96
    4d98:	f6 e0       	ldi	r31, 0x06	; 6
    4d9a:	86 83       	std	Z+6, r24	; 0x06
}
    4d9c:	ff 91       	pop	r31
    4d9e:	ef 91       	pop	r30
    4da0:	bf 91       	pop	r27
    4da2:	af 91       	pop	r26
    4da4:	9f 91       	pop	r25
    4da6:	8f 91       	pop	r24
    4da8:	7f 91       	pop	r23
    4daa:	6f 91       	pop	r22
    4dac:	5f 91       	pop	r21
    4dae:	4f 91       	pop	r20
    4db0:	3f 91       	pop	r19
    4db2:	2f 91       	pop	r18
    4db4:	0f 90       	pop	r0
    4db6:	0b be       	out	0x3b, r0	; 59
    4db8:	0f 90       	pop	r0
    4dba:	0f be       	out	0x3f, r0	; 63
    4dbc:	0f 90       	pop	r0
    4dbe:	1f 90       	pop	r1
    4dc0:	18 95       	reti

00004dc2 <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4dc2:	1f 92       	push	r1
    4dc4:	0f 92       	push	r0
    4dc6:	0f b6       	in	r0, 0x3f	; 63
    4dc8:	0f 92       	push	r0
    4dca:	0b b6       	in	r0, 0x3b	; 59
    4dcc:	0f 92       	push	r0
    4dce:	11 24       	eor	r1, r1
    4dd0:	2f 93       	push	r18
    4dd2:	3f 93       	push	r19
    4dd4:	4f 93       	push	r20
    4dd6:	5f 93       	push	r21
    4dd8:	6f 93       	push	r22
    4dda:	7f 93       	push	r23
    4ddc:	8f 93       	push	r24
    4dde:	9f 93       	push	r25
    4de0:	af 93       	push	r26
    4de2:	bf 93       	push	r27
    4de4:	ef 93       	push	r30
    4de6:	ff 93       	push	r31
	if (--ax.a[Z].postscale_counter != 0) {
    4de8:	80 91 87 24 	lds	r24, 0x2487
    4dec:	90 91 88 24 	lds	r25, 0x2488
    4df0:	01 97       	sbiw	r24, 0x01	; 1
    4df2:	80 93 87 24 	sts	0x2487, r24
    4df6:	90 93 88 24 	sts	0x2488, r25
    4dfa:	89 2b       	or	r24, r25
    4dfc:	a1 f5       	brne	.+104    	; 0x4e66 <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4dfe:	e0 e8       	ldi	r30, 0x80	; 128
    4e00:	f6 e0       	ldi	r31, 0x06	; 6
    4e02:	81 e0       	ldi	r24, 0x01	; 1
    4e04:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    4e06:	80 91 7f 24 	lds	r24, 0x247F
    4e0a:	90 91 80 24 	lds	r25, 0x2480
    4e0e:	a0 91 81 24 	lds	r26, 0x2481
    4e12:	b0 91 82 24 	lds	r27, 0x2482
    4e16:	01 97       	sbiw	r24, 0x01	; 1
    4e18:	a1 09       	sbc	r26, r1
    4e1a:	b1 09       	sbc	r27, r1
    4e1c:	80 93 7f 24 	sts	0x247F, r24
    4e20:	90 93 80 24 	sts	0x2480, r25
    4e24:	a0 93 81 24 	sts	0x2481, r26
    4e28:	b0 93 82 24 	sts	0x2482, r27
    4e2c:	00 97       	sbiw	r24, 0x00	; 0
    4e2e:	a1 05       	cpc	r26, r1
    4e30:	b1 05       	cpc	r27, r1
    4e32:	69 f4       	brne	.+26     	; 0x4e4e <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4e34:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4e38:	84 e0       	ldi	r24, 0x04	; 4
    4e3a:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4e3c:	80 91 5c 24 	lds	r24, 0x245C
    4e40:	8d 7f       	andi	r24, 0xFD	; 253
    4e42:	80 93 5c 24 	sts	0x245C, r24
		if (ax.active_axes == 0) {
    4e46:	88 23       	and	r24, r24
    4e48:	11 f4       	brne	.+4      	; 0x4e4e <__vector_47+0x8c>
			st_execute_move();
    4e4a:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    4e4e:	80 91 85 24 	lds	r24, 0x2485
    4e52:	90 91 86 24 	lds	r25, 0x2486
    4e56:	80 93 87 24 	sts	0x2487, r24
    4e5a:	90 93 88 24 	sts	0x2488, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4e5e:	81 e0       	ldi	r24, 0x01	; 1
    4e60:	e0 e8       	ldi	r30, 0x80	; 128
    4e62:	f6 e0       	ldi	r31, 0x06	; 6
    4e64:	86 83       	std	Z+6, r24	; 0x06
}
    4e66:	ff 91       	pop	r31
    4e68:	ef 91       	pop	r30
    4e6a:	bf 91       	pop	r27
    4e6c:	af 91       	pop	r26
    4e6e:	9f 91       	pop	r25
    4e70:	8f 91       	pop	r24
    4e72:	7f 91       	pop	r23
    4e74:	6f 91       	pop	r22
    4e76:	5f 91       	pop	r21
    4e78:	4f 91       	pop	r20
    4e7a:	3f 91       	pop	r19
    4e7c:	2f 91       	pop	r18
    4e7e:	0f 90       	pop	r0
    4e80:	0b be       	out	0x3b, r0	; 59
    4e82:	0f 90       	pop	r0
    4e84:	0f be       	out	0x3f, r0	; 63
    4e86:	0f 90       	pop	r0
    4e88:	1f 90       	pop	r1
    4e8a:	18 95       	reti

00004e8c <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4e8c:	1f 92       	push	r1
    4e8e:	0f 92       	push	r0
    4e90:	0f b6       	in	r0, 0x3f	; 63
    4e92:	0f 92       	push	r0
    4e94:	0b b6       	in	r0, 0x3b	; 59
    4e96:	0f 92       	push	r0
    4e98:	11 24       	eor	r1, r1
    4e9a:	2f 93       	push	r18
    4e9c:	3f 93       	push	r19
    4e9e:	4f 93       	push	r20
    4ea0:	5f 93       	push	r21
    4ea2:	6f 93       	push	r22
    4ea4:	7f 93       	push	r23
    4ea6:	8f 93       	push	r24
    4ea8:	9f 93       	push	r25
    4eaa:	af 93       	push	r26
    4eac:	bf 93       	push	r27
    4eae:	ef 93       	push	r30
    4eb0:	ff 93       	push	r31
	if (--ax.a[Y].postscale_counter != 0) {
    4eb2:	80 91 77 24 	lds	r24, 0x2477
    4eb6:	90 91 78 24 	lds	r25, 0x2478
    4eba:	01 97       	sbiw	r24, 0x01	; 1
    4ebc:	80 93 77 24 	sts	0x2477, r24
    4ec0:	90 93 78 24 	sts	0x2478, r25
    4ec4:	89 2b       	or	r24, r25
    4ec6:	a1 f5       	brne	.+104    	; 0x4f30 <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4ec8:	e0 ea       	ldi	r30, 0xA0	; 160
    4eca:	f6 e0       	ldi	r31, 0x06	; 6
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    4ed0:	80 91 6f 24 	lds	r24, 0x246F
    4ed4:	90 91 70 24 	lds	r25, 0x2470
    4ed8:	a0 91 71 24 	lds	r26, 0x2471
    4edc:	b0 91 72 24 	lds	r27, 0x2472
    4ee0:	01 97       	sbiw	r24, 0x01	; 1
    4ee2:	a1 09       	sbc	r26, r1
    4ee4:	b1 09       	sbc	r27, r1
    4ee6:	80 93 6f 24 	sts	0x246F, r24
    4eea:	90 93 70 24 	sts	0x2470, r25
    4eee:	a0 93 71 24 	sts	0x2471, r26
    4ef2:	b0 93 72 24 	sts	0x2472, r27
    4ef6:	00 97       	sbiw	r24, 0x00	; 0
    4ef8:	a1 05       	cpc	r26, r1
    4efa:	b1 05       	cpc	r27, r1
    4efc:	69 f4       	brne	.+26     	; 0x4f18 <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4efe:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4f02:	84 e0       	ldi	r24, 0x04	; 4
    4f04:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4f06:	80 91 5c 24 	lds	r24, 0x245C
    4f0a:	8b 7f       	andi	r24, 0xFB	; 251
    4f0c:	80 93 5c 24 	sts	0x245C, r24
		if (ax.active_axes == 0) {
    4f10:	88 23       	and	r24, r24
    4f12:	11 f4       	brne	.+4      	; 0x4f18 <__vector_77+0x8c>
			st_execute_move();
    4f14:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    4f18:	80 91 75 24 	lds	r24, 0x2475
    4f1c:	90 91 76 24 	lds	r25, 0x2476
    4f20:	80 93 77 24 	sts	0x2477, r24
    4f24:	90 93 78 24 	sts	0x2478, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4f28:	81 e0       	ldi	r24, 0x01	; 1
    4f2a:	e0 ea       	ldi	r30, 0xA0	; 160
    4f2c:	f6 e0       	ldi	r31, 0x06	; 6
    4f2e:	86 83       	std	Z+6, r24	; 0x06
}
    4f30:	ff 91       	pop	r31
    4f32:	ef 91       	pop	r30
    4f34:	bf 91       	pop	r27
    4f36:	af 91       	pop	r26
    4f38:	9f 91       	pop	r25
    4f3a:	8f 91       	pop	r24
    4f3c:	7f 91       	pop	r23
    4f3e:	6f 91       	pop	r22
    4f40:	5f 91       	pop	r21
    4f42:	4f 91       	pop	r20
    4f44:	3f 91       	pop	r19
    4f46:	2f 91       	pop	r18
    4f48:	0f 90       	pop	r0
    4f4a:	0b be       	out	0x3b, r0	; 59
    4f4c:	0f 90       	pop	r0
    4f4e:	0f be       	out	0x3f, r0	; 63
    4f50:	0f 90       	pop	r0
    4f52:	1f 90       	pop	r1
    4f54:	18 95       	reti

00004f56 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4f56:	1f 92       	push	r1
    4f58:	0f 92       	push	r0
    4f5a:	0f b6       	in	r0, 0x3f	; 63
    4f5c:	0f 92       	push	r0
    4f5e:	0b b6       	in	r0, 0x3b	; 59
    4f60:	0f 92       	push	r0
    4f62:	11 24       	eor	r1, r1
    4f64:	2f 93       	push	r18
    4f66:	3f 93       	push	r19
    4f68:	4f 93       	push	r20
    4f6a:	5f 93       	push	r21
    4f6c:	6f 93       	push	r22
    4f6e:	7f 93       	push	r23
    4f70:	8f 93       	push	r24
    4f72:	9f 93       	push	r25
    4f74:	af 93       	push	r26
    4f76:	bf 93       	push	r27
    4f78:	ef 93       	push	r30
    4f7a:	ff 93       	push	r31
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    4f7c:	80 91 67 24 	lds	r24, 0x2467
    4f80:	90 91 68 24 	lds	r25, 0x2468
    4f84:	01 97       	sbiw	r24, 0x01	; 1
    4f86:	80 93 67 24 	sts	0x2467, r24
    4f8a:	90 93 68 24 	sts	0x2468, r25
    4f8e:	89 2b       	or	r24, r25
    4f90:	d1 f5       	brne	.+116    	; 0x5006 <__vector_14+0xb0>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    4f92:	80 91 6a 24 	lds	r24, 0x246A
    4f96:	88 23       	and	r24, r24
    4f98:	21 f4       	brne	.+8      	; 0x4fa2 <__vector_14+0x4c>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    4f9a:	81 e0       	ldi	r24, 0x01	; 1
    4f9c:	e0 e0       	ldi	r30, 0x00	; 0
    4f9e:	f6 e0       	ldi	r31, 0x06	; 6
    4fa0:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    4fa2:	80 91 5f 24 	lds	r24, 0x245F
    4fa6:	90 91 60 24 	lds	r25, 0x2460
    4faa:	a0 91 61 24 	lds	r26, 0x2461
    4fae:	b0 91 62 24 	lds	r27, 0x2462
    4fb2:	01 97       	sbiw	r24, 0x01	; 1
    4fb4:	a1 09       	sbc	r26, r1
    4fb6:	b1 09       	sbc	r27, r1
    4fb8:	80 93 5f 24 	sts	0x245F, r24
    4fbc:	90 93 60 24 	sts	0x2460, r25
    4fc0:	a0 93 61 24 	sts	0x2461, r26
    4fc4:	b0 93 62 24 	sts	0x2462, r27
    4fc8:	00 97       	sbiw	r24, 0x00	; 0
    4fca:	a1 05       	cpc	r26, r1
    4fcc:	b1 05       	cpc	r27, r1
    4fce:	79 f4       	brne	.+30     	; 0x4fee <__vector_14+0x98>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    4fd0:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4fd4:	84 e0       	ldi	r24, 0x04	; 4
    4fd6:	e0 e0       	ldi	r30, 0x00	; 0
    4fd8:	f6 e0       	ldi	r31, 0x06	; 6
    4fda:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    4fdc:	80 91 5c 24 	lds	r24, 0x245C
    4fe0:	87 7f       	andi	r24, 0xF7	; 247
    4fe2:	80 93 5c 24 	sts	0x245C, r24
		if (ax.active_axes == 0) {				// if all axes are done
    4fe6:	88 23       	and	r24, r24
    4fe8:	11 f4       	brne	.+4      	; 0x4fee <__vector_14+0x98>
			st_execute_move();					// ...run the next move
    4fea:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    4fee:	80 91 65 24 	lds	r24, 0x2465
    4ff2:	90 91 66 24 	lds	r25, 0x2466
    4ff6:	80 93 67 24 	sts	0x2467, r24
    4ffa:	90 93 68 24 	sts	0x2468, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    4ffe:	81 e0       	ldi	r24, 0x01	; 1
    5000:	e0 e0       	ldi	r30, 0x00	; 0
    5002:	f6 e0       	ldi	r31, 0x06	; 6
    5004:	86 83       	std	Z+6, r24	; 0x06
}
    5006:	ff 91       	pop	r31
    5008:	ef 91       	pop	r30
    500a:	bf 91       	pop	r27
    500c:	af 91       	pop	r26
    500e:	9f 91       	pop	r25
    5010:	8f 91       	pop	r24
    5012:	7f 91       	pop	r23
    5014:	6f 91       	pop	r22
    5016:	5f 91       	pop	r21
    5018:	4f 91       	pop	r20
    501a:	3f 91       	pop	r19
    501c:	2f 91       	pop	r18
    501e:	0f 90       	pop	r0
    5020:	0b be       	out	0x3b, r0	; 59
    5022:	0f 90       	pop	r0
    5024:	0f be       	out	0x3f, r0	; 63
    5026:	0f 90       	pop	r0
    5028:	1f 90       	pop	r1
    502a:	18 95       	reti

0000502c <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    502c:	e0 ea       	ldi	r30, 0xA0	; 160
    502e:	f0 e0       	ldi	r31, 0x00	; 0
    5030:	82 81       	ldd	r24, Z+2	; 0x02
    5032:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    5034:	98 ed       	ldi	r25, 0xD8	; 216
    5036:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    5038:	82 83       	std	Z+2, r24	; 0x02
}
    503a:	08 95       	ret

0000503c <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    503c:	e0 ea       	ldi	r30, 0xA0	; 160
    503e:	f0 e0       	ldi	r31, 0x00	; 0
    5040:	82 81       	ldd	r24, Z+2	; 0x02
    5042:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    5044:	98 ed       	ldi	r25, 0xD8	; 216
    5046:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    5048:	82 83       	std	Z+2, r24	; 0x02
}
    504a:	08 95       	ret

0000504c <xio_null_signal>:
 */

int xio_null_signal(uint8_t sig)
{
	return (TG_NOOP);
}
    504c:	81 e0       	ldi	r24, 0x01	; 1
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	08 95       	ret

00005052 <xio_null_line>:
 */

int xio_null_line(char * buf)
{
	return (TG_OK);
}
    5052:	80 e0       	ldi	r24, 0x00	; 0
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	08 95       	ret

00005058 <xio_fget_ln>:
 *	dev		XIO device enumeration
 */

int xio_fget_ln(uint8_t dev, char *buf, uint8_t len)
{
	switch (dev) {
    5058:	81 30       	cpi	r24, 0x01	; 1
    505a:	61 f0       	breq	.+24     	; 0x5074 <xio_fget_ln+0x1c>
    505c:	81 30       	cpi	r24, 0x01	; 1
    505e:	38 f0       	brcs	.+14     	; 0x506e <xio_fget_ln+0x16>
    5060:	82 30       	cpi	r24, 0x02	; 2
    5062:	69 f0       	breq	.+26     	; 0x507e <xio_fget_ln+0x26>
    5064:	84 30       	cpi	r24, 0x04	; 4
    5066:	81 f0       	breq	.+32     	; 0x5088 <xio_fget_ln+0x30>
    5068:	20 e1       	ldi	r18, 0x10	; 16
    506a:	30 e0       	ldi	r19, 0x00	; 0
    506c:	12 c0       	rjmp	.+36     	; 0x5092 <xio_fget_ln+0x3a>
    506e:	20 e0       	ldi	r18, 0x00	; 0
    5070:	30 e0       	ldi	r19, 0x00	; 0
    5072:	0f c0       	rjmp	.+30     	; 0x5092 <xio_fget_ln+0x3a>
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): return (xio_usb_readln(buf, len));
    5074:	cb 01       	movw	r24, r22
    5076:	64 2f       	mov	r22, r20
    5078:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <xio_usb_readln>
    507c:	09 c0       	rjmp	.+18     	; 0x5090 <xio_fget_ln+0x38>
		case (XIO_DEV_RS485): return (xio_rs485_readln(buf, len));
    507e:	cb 01       	movw	r24, r22
    5080:	64 2f       	mov	r22, r20
    5082:	0e 94 d5 38 	call	0x71aa	; 0x71aa <xio_rs485_readln>
    5086:	04 c0       	rjmp	.+8      	; 0x5090 <xio_fget_ln+0x38>
//		case (XIO_DEV_AUX): return (xio_aux_readln(buf, len));
		case (XIO_DEV_PGM): return (xio_pgm_readln(buf, len));
    5088:	cb 01       	movw	r24, r22
    508a:	64 2f       	mov	r22, r20
    508c:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <xio_pgm_readln>
    5090:	9c 01       	movw	r18, r24
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    5092:	c9 01       	movw	r24, r18
    5094:	08 95       	ret

00005096 <xio_control>:
 * xio_control() - common entry point for device control functions
 */

int8_t xio_control(uint8_t dev, const uint16_t control, const int16_t arg)
{
	switch (dev) {
    5096:	81 30       	cpi	r24, 0x01	; 1
    5098:	51 f0       	breq	.+20     	; 0x50ae <xio_control+0x18>
    509a:	81 30       	cpi	r24, 0x01	; 1
    509c:	30 f0       	brcs	.+12     	; 0x50aa <xio_control+0x14>
    509e:	82 30       	cpi	r24, 0x02	; 2
    50a0:	59 f0       	breq	.+22     	; 0x50b8 <xio_control+0x22>
    50a2:	84 30       	cpi	r24, 0x04	; 4
    50a4:	71 f0       	breq	.+28     	; 0x50c2 <xio_control+0x2c>
    50a6:	80 e1       	ldi	r24, 0x10	; 16
    50a8:	08 95       	ret
    50aa:	80 e0       	ldi	r24, 0x00	; 0
    50ac:	08 95       	ret
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): return (xio_usb_control(control, arg));
    50ae:	cb 01       	movw	r24, r22
    50b0:	ba 01       	movw	r22, r20
    50b2:	0e 94 6f 29 	call	0x52de	; 0x52de <xio_usb_control>
    50b6:	08 95       	ret
		case (XIO_DEV_RS485): return (xio_rs485_control(control, arg));
    50b8:	cb 01       	movw	r24, r22
    50ba:	ba 01       	movw	r22, r20
    50bc:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <xio_rs485_control>
    50c0:	08 95       	ret
//		case (XIO_DEV_AUX): return (xio_aux_control(control, arg));
		case (XIO_DEV_PGM): return (xio_pgm_control(control, arg));
    50c2:	cb 01       	movw	r24, r22
    50c4:	ba 01       	movw	r22, r20
    50c6:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <xio_pgm_control>
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    50ca:	08 95       	ret

000050cc <xio_dev_init>:
 * xio_dev_init() - common entry point for device init functions
 */

int8_t xio_dev_init(uint8_t dev, const int16_t arg)
{
	switch (dev) {
    50cc:	81 30       	cpi	r24, 0x01	; 1
    50ce:	41 f0       	breq	.+16     	; 0x50e0 <xio_dev_init+0x14>
    50d0:	81 30       	cpi	r24, 0x01	; 1
    50d2:	68 f0       	brcs	.+26     	; 0x50ee <xio_dev_init+0x22>
    50d4:	82 30       	cpi	r24, 0x02	; 2
    50d6:	41 f0       	breq	.+16     	; 0x50e8 <xio_dev_init+0x1c>
    50d8:	84 30       	cpi	r24, 0x04	; 4
    50da:	59 f0       	breq	.+22     	; 0x50f2 <xio_dev_init+0x26>
    50dc:	80 e1       	ldi	r24, 0x10	; 16
    50de:	08 95       	ret
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): xio_usb_init(arg); return (TG_OK);
    50e0:	cb 01       	movw	r24, r22
    50e2:	0e 94 a9 28 	call	0x5152	; 0x5152 <xio_usb_init>
    50e6:	03 c0       	rjmp	.+6      	; 0x50ee <xio_dev_init+0x22>
		case (XIO_DEV_RS485): xio_rs485_init(arg); return (TG_OK);
    50e8:	cb 01       	movw	r24, r22
    50ea:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <xio_rs485_init>
    50ee:	80 e0       	ldi	r24, 0x00	; 0
    50f0:	08 95       	ret
//		case (XIO_DEV_AUX): xio_aux_init(arg); return (TG_OK);
		case (XIO_DEV_PGM): xio_pgm_init(arg); return (TG_OK);
    50f2:	cb 01       	movw	r24, r22
    50f4:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <xio_pgm_init>
    50f8:	80 e0       	ldi	r24, 0x00	; 0
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    50fa:	08 95       	ret

000050fc <xio_init>:
 */

void xio_init(void)
{	
	// USB port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_SEMICOLONS | XIO_BAUD_115200);
    50fc:	85 e0       	ldi	r24, 0x05	; 5
    50fe:	90 e5       	ldi	r25, 0x50	; 80
    5100:	0e 94 a9 28 	call	0x5152	; 0x5152 <xio_usb_init>

	// RS485 port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_BAUD_115200);
    5104:	85 e0       	ldi	r24, 0x05	; 5
    5106:	90 e1       	ldi	r25, 0x10	; 16
    5108:	0e 94 a9 28 	call	0x5152	; 0x5152 <xio_usb_init>

	// PGM file defaults are:	XIO_RD | XIO_BLOCK
//	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE | XIO_SEMICOLONS);
	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE);
    510c:	80 e0       	ldi	r24, 0x00	; 0
    510e:	95 e1       	ldi	r25, 0x15	; 21
    5110:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <xio_pgm_init>
//	xio_pgm_init(XIO_LINEMODE);

	stddev = &dev_usb;				// stddev is a convenience
    5114:	83 e0       	ldi	r24, 0x03	; 3
    5116:	90 e2       	ldi	r25, 0x20	; 32
    5118:	80 93 0d 25 	sts	0x250D, r24
    511c:	90 93 0e 25 	sts	0x250E, r25
	stdin = &dev_usb;				// define the console device
    5120:	80 93 67 25 	sts	0x2567, r24
    5124:	90 93 68 25 	sts	0x2568, r25
	stdout = &dev_usb;				// ...
    5128:	80 93 69 25 	sts	0x2569, r24
    512c:	90 93 6a 25 	sts	0x256A, r25
	stderr = &dev_usb;				// ...
    5130:	80 93 6b 25 	sts	0x256B, r24
    5134:	90 93 6c 25 	sts	0x256C, r25

	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    5138:	0f 92       	push	r0
    513a:	0f 92       	push	r0
    513c:	8a e3       	ldi	r24, 0x3A	; 58
    513e:	97 e0       	ldi	r25, 0x07	; 7
    5140:	ed b7       	in	r30, 0x3d	; 61
    5142:	fe b7       	in	r31, 0x3e	; 62
    5144:	81 83       	std	Z+1, r24	; 0x01
    5146:	92 83       	std	Z+2, r25	; 0x02
    5148:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
    514c:	0f 90       	pop	r0
    514e:	0f 90       	pop	r0
}
    5150:	08 95       	ret

00005152 <xio_usb_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_usb_init(const uint16_t control)
{
    5152:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    5154:	e8 2f       	mov	r30, r24
    5156:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	f.flags = XIO_FLAG_USB_DEFS_gm;		// set flags to defaults & initial state
    5158:	87 e3       	ldi	r24, 0x37	; 55
    515a:	90 e0       	ldi	r25, 0x00	; 0
    515c:	80 93 b1 21 	sts	0x21B1, r24
    5160:	90 93 b2 21 	sts	0x21B2, r25
		f.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		f.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    5164:	26 ff       	sbrs	r18, 6
    5166:	06 c0       	rjmp	.+12     	; 0x5174 <xio_usb_init+0x22>
		f.flags |= XIO_FLAG_BLOCK_bm;
    5168:	87 e3       	ldi	r24, 0x37	; 55
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	80 93 b1 21 	sts	0x21B1, r24
    5170:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOBLOCK) {
    5174:	27 ff       	sbrs	r18, 7
    5176:	06 c0       	rjmp	.+12     	; 0x5184 <xio_usb_init+0x32>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    5178:	83 e3       	ldi	r24, 0x33	; 51
    517a:	90 e0       	ldi	r25, 0x00	; 0
    517c:	80 93 b1 21 	sts	0x21B1, r24
    5180:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_ECHO) {
    5184:	30 ff       	sbrs	r19, 0
    5186:	09 c0       	rjmp	.+18     	; 0x519a <xio_usb_init+0x48>
		f.flags |= XIO_FLAG_ECHO_bm;
    5188:	80 91 b1 21 	lds	r24, 0x21B1
    518c:	90 91 b2 21 	lds	r25, 0x21B2
    5190:	80 61       	ori	r24, 0x10	; 16
    5192:	80 93 b1 21 	sts	0x21B1, r24
    5196:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOECHO) {
    519a:	31 ff       	sbrs	r19, 1
    519c:	09 c0       	rjmp	.+18     	; 0x51b0 <xio_usb_init+0x5e>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    519e:	80 91 b1 21 	lds	r24, 0x21B1
    51a2:	90 91 b2 21 	lds	r25, 0x21B2
    51a6:	8f 7e       	andi	r24, 0xEF	; 239
    51a8:	80 93 b1 21 	sts	0x21B1, r24
    51ac:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_CRLF) {
    51b0:	32 ff       	sbrs	r19, 2
    51b2:	09 c0       	rjmp	.+18     	; 0x51c6 <xio_usb_init+0x74>
		f.flags |= XIO_FLAG_CRLF_bm;
    51b4:	80 91 b1 21 	lds	r24, 0x21B1
    51b8:	90 91 b2 21 	lds	r25, 0x21B2
    51bc:	80 62       	ori	r24, 0x20	; 32
    51be:	80 93 b1 21 	sts	0x21B1, r24
    51c2:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOCRLF) {
    51c6:	33 ff       	sbrs	r19, 3
    51c8:	09 c0       	rjmp	.+18     	; 0x51dc <xio_usb_init+0x8a>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    51ca:	80 91 b1 21 	lds	r24, 0x21B1
    51ce:	90 91 b2 21 	lds	r25, 0x21B2
    51d2:	8f 7d       	andi	r24, 0xDF	; 223
    51d4:	80 93 b1 21 	sts	0x21B1, r24
    51d8:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_LINEMODE) {
    51dc:	34 ff       	sbrs	r19, 4
    51de:	09 c0       	rjmp	.+18     	; 0x51f2 <xio_usb_init+0xa0>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    51e0:	80 91 b1 21 	lds	r24, 0x21B1
    51e4:	90 91 b2 21 	lds	r25, 0x21B2
    51e8:	80 64       	ori	r24, 0x40	; 64
    51ea:	80 93 b1 21 	sts	0x21B1, r24
    51ee:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOLINEMODE) {
    51f2:	35 ff       	sbrs	r19, 5
    51f4:	09 c0       	rjmp	.+18     	; 0x5208 <xio_usb_init+0xb6>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    51f6:	80 91 b1 21 	lds	r24, 0x21B1
    51fa:	90 91 b2 21 	lds	r25, 0x21B2
    51fe:	8f 7b       	andi	r24, 0xBF	; 191
    5200:	80 93 b1 21 	sts	0x21B1, r24
    5204:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_SEMICOLONS) {
    5208:	36 ff       	sbrs	r19, 6
    520a:	09 c0       	rjmp	.+18     	; 0x521e <xio_usb_init+0xcc>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    520c:	80 91 b1 21 	lds	r24, 0x21B1
    5210:	90 91 b2 21 	lds	r25, 0x21B2
    5214:	80 68       	ori	r24, 0x80	; 128
    5216:	80 93 b1 21 	sts	0x21B1, r24
    521a:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    521e:	37 ff       	sbrs	r19, 7
    5220:	09 c0       	rjmp	.+18     	; 0x5234 <xio_usb_init+0xe2>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5222:	80 91 b1 21 	lds	r24, 0x21B1
    5226:	90 91 b2 21 	lds	r25, 0x21B2
    522a:	8f 77       	andi	r24, 0x7F	; 127
    522c:	80 93 b1 21 	sts	0x21B1, r24
    5230:	90 93 b2 21 	sts	0x21B2, r25
	}

	// character signals and error returns
	f.sig = 0;
    5234:	10 92 b3 21 	sts	0x21B3, r1
	dev_usb.udata = &(f.sig);				// bind sig register to FILE struct
    5238:	83 eb       	ldi	r24, 0xB3	; 179
    523a:	91 e2       	ldi	r25, 0x21	; 33
    523c:	80 93 0f 20 	sts	0x200F, r24
    5240:	90 93 10 20 	sts	0x2010, r25

	// setup internal RX/TX buffers
	f.rx_buf_head = 1;						// can't use location 0
    5244:	81 e0       	ldi	r24, 0x01	; 1
    5246:	80 93 be 21 	sts	0x21BE, r24
	f.rx_buf_tail = 1;
    524a:	80 93 bd 21 	sts	0x21BD, r24
	f.tx_buf_head = 1;
    524e:	80 93 c0 21 	sts	0x21C0, r24
	f.tx_buf_tail = 1;
    5252:	80 93 bf 21 	sts	0x21BF, r24
	f.len = sizeof(f.buf);					// offset to zero
    5256:	82 e0       	ldi	r24, 0x02	; 2
    5258:	80 93 b6 21 	sts	0x21B6, r24

	// bindings
	f.sig_func = &xio_null_signal;			// bind null signal handler
    525c:	86 e2       	ldi	r24, 0x26	; 38
    525e:	98 e2       	ldi	r25, 0x28	; 40
    5260:	80 93 b9 21 	sts	0x21B9, r24
    5264:	90 93 ba 21 	sts	0x21BA, r25
	f.line_func = &xio_null_line;			// bind null line handler
    5268:	89 e2       	ldi	r24, 0x29	; 41
    526a:	98 e2       	ldi	r25, 0x28	; 40
    526c:	80 93 bb 21 	sts	0x21BB, r24
    5270:	90 93 bc 21 	sts	0x21BC, r25

	f.usart = &USB_USART;					// bind USART structure
    5274:	80 ea       	ldi	r24, 0xA0	; 160
    5276:	98 e0       	ldi	r25, 0x08	; 8
    5278:	80 93 e6 21 	sts	0x21E6, r24
    527c:	90 93 e7 21 	sts	0x21E7, r25
	f.port = &USB_PORT;						// bind PORT structure
    5280:	80 e4       	ldi	r24, 0x40	; 64
    5282:	96 e0       	ldi	r25, 0x06	; 6
    5284:	80 93 e8 21 	sts	0x21E8, r24
    5288:	90 93 e9 21 	sts	0x21E9, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    528c:	ee 23       	and	r30, r30
    528e:	09 f4       	brne	.+2      	; 0x5292 <xio_usb_init+0x140>
    5290:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    5292:	8e 2f       	mov	r24, r30
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	fc 01       	movw	r30, r24
    5298:	ec 5d       	subi	r30, 0xDC	; 220
    529a:	f8 4f       	sbci	r31, 0xF8	; 248
    529c:	e4 91       	lpm	r30, Z+
    529e:	a0 ea       	ldi	r26, 0xA0	; 160
    52a0:	b8 e0       	ldi	r27, 0x08	; 8
    52a2:	16 96       	adiw	r26, 0x06	; 6
    52a4:	ec 93       	st	X, r30
    52a6:	16 97       	sbiw	r26, 0x06	; 6
	f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    52a8:	81 5d       	subi	r24, 0xD1	; 209
    52aa:	98 4f       	sbci	r25, 0xF8	; 248
    52ac:	fc 01       	movw	r30, r24
    52ae:	84 91       	lpm	r24, Z+
    52b0:	17 96       	adiw	r26, 0x07	; 7
    52b2:	8c 93       	st	X, r24
    52b4:	17 97       	sbiw	r26, 0x07	; 7
	f.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm; // enable tx and rx on USART
    52b6:	88 e1       	ldi	r24, 0x18	; 24
    52b8:	14 96       	adiw	r26, 0x04	; 4
    52ba:	8c 93       	st	X, r24
    52bc:	14 97       	sbiw	r26, 0x04	; 4
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    52be:	81 e2       	ldi	r24, 0x21	; 33
    52c0:	13 96       	adiw	r26, 0x03	; 3
    52c2:	8c 93       	st	X, r24

	f.port->DIRCLR = USB_RX_bm;	 			// clr RX pin as input
    52c4:	e0 e4       	ldi	r30, 0x40	; 64
    52c6:	f6 e0       	ldi	r31, 0x06	; 6
    52c8:	84 e0       	ldi	r24, 0x04	; 4
    52ca:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_TX_bm; 			// set TX pin as output
    52cc:	88 e0       	ldi	r24, 0x08	; 8
    52ce:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_TX_bm;				// set TX HI as initial state
    52d0:	85 83       	std	Z+5, r24	; 0x05
	f.port->DIRCLR = USB_CTS_bm; 			// set CTS pin as input
    52d2:	81 e0       	ldi	r24, 0x01	; 1
    52d4:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_RTS_bm; 			// set RTS pin as output
    52d6:	82 e0       	ldi	r24, 0x02	; 2
    52d8:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
    52da:	85 83       	std	Z+5, r24	; 0x05
//	f.port->OUTCLR = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
}
    52dc:	08 95       	ret

000052de <xio_usb_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_usb_control(const uint16_t control, const int16_t arg)
{
    52de:	ac 01       	movw	r20, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    52e0:	84 ff       	sbrs	r24, 4
    52e2:	05 c0       	rjmp	.+10     	; 0x52ee <xio_usb_control+0x10>
		f.sig_func = (fptr_int_uint8)arg;
    52e4:	60 93 b9 21 	sts	0x21B9, r22
    52e8:	70 93 ba 21 	sts	0x21BA, r23
    52ec:	8b c0       	rjmp	.+278    	; 0x5404 <xio_usb_control+0x126>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    52ee:	85 ff       	sbrs	r24, 5
    52f0:	05 c0       	rjmp	.+10     	; 0x52fc <xio_usb_control+0x1e>
		f.line_func = (fptr_int_char_p)arg;
    52f2:	60 93 bb 21 	sts	0x21BB, r22
    52f6:	70 93 bc 21 	sts	0x21BC, r23
    52fa:	84 c0       	rjmp	.+264    	; 0x5404 <xio_usb_control+0x126>
		return (0);
	}
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    52fc:	8f 70       	andi	r24, 0x0F	; 15
    52fe:	90 70       	andi	r25, 0x00	; 0
    5300:	00 97       	sbiw	r24, 0x00	; 0
    5302:	91 f0       	breq	.+36     	; 0x5328 <xio_usb_control+0x4a>
		f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    5304:	a0 91 e6 21 	lds	r26, 0x21E6
    5308:	b0 91 e7 21 	lds	r27, 0x21E7
    530c:	9c 01       	movw	r18, r24
    530e:	2c 5d       	subi	r18, 0xDC	; 220
    5310:	38 4f       	sbci	r19, 0xF8	; 248
    5312:	f9 01       	movw	r30, r18
    5314:	24 91       	lpm	r18, Z+
    5316:	16 96       	adiw	r26, 0x06	; 6
    5318:	2c 93       	st	X, r18
    531a:	16 97       	sbiw	r26, 0x06	; 6
		f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    531c:	81 5d       	subi	r24, 0xD1	; 209
    531e:	98 4f       	sbci	r25, 0xF8	; 248
    5320:	fc 01       	movw	r30, r24
    5322:	84 91       	lpm	r24, Z+
    5324:	17 96       	adiw	r26, 0x07	; 7
    5326:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    5328:	46 ff       	sbrs	r20, 6
    532a:	09 c0       	rjmp	.+18     	; 0x533e <xio_usb_control+0x60>
		f.flags |= XIO_FLAG_BLOCK_bm;
    532c:	80 91 b1 21 	lds	r24, 0x21B1
    5330:	90 91 b2 21 	lds	r25, 0x21B2
    5334:	84 60       	ori	r24, 0x04	; 4
    5336:	80 93 b1 21 	sts	0x21B1, r24
    533a:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOBLOCK) {
    533e:	47 ff       	sbrs	r20, 7
    5340:	09 c0       	rjmp	.+18     	; 0x5354 <xio_usb_control+0x76>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    5342:	80 91 b1 21 	lds	r24, 0x21B1
    5346:	90 91 b2 21 	lds	r25, 0x21B2
    534a:	8b 7f       	andi	r24, 0xFB	; 251
    534c:	80 93 b1 21 	sts	0x21B1, r24
    5350:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_ECHO) {
    5354:	50 ff       	sbrs	r21, 0
    5356:	09 c0       	rjmp	.+18     	; 0x536a <xio_usb_control+0x8c>
		f.flags |= XIO_FLAG_ECHO_bm;
    5358:	80 91 b1 21 	lds	r24, 0x21B1
    535c:	90 91 b2 21 	lds	r25, 0x21B2
    5360:	80 61       	ori	r24, 0x10	; 16
    5362:	80 93 b1 21 	sts	0x21B1, r24
    5366:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOECHO) {
    536a:	51 ff       	sbrs	r21, 1
    536c:	09 c0       	rjmp	.+18     	; 0x5380 <xio_usb_control+0xa2>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    536e:	80 91 b1 21 	lds	r24, 0x21B1
    5372:	90 91 b2 21 	lds	r25, 0x21B2
    5376:	8f 7e       	andi	r24, 0xEF	; 239
    5378:	80 93 b1 21 	sts	0x21B1, r24
    537c:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_CRLF) {
    5380:	52 ff       	sbrs	r21, 2
    5382:	09 c0       	rjmp	.+18     	; 0x5396 <xio_usb_control+0xb8>
		f.flags |= XIO_FLAG_CRLF_bm;
    5384:	80 91 b1 21 	lds	r24, 0x21B1
    5388:	90 91 b2 21 	lds	r25, 0x21B2
    538c:	80 62       	ori	r24, 0x20	; 32
    538e:	80 93 b1 21 	sts	0x21B1, r24
    5392:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOCRLF) {
    5396:	53 ff       	sbrs	r21, 3
    5398:	09 c0       	rjmp	.+18     	; 0x53ac <xio_usb_control+0xce>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    539a:	80 91 b1 21 	lds	r24, 0x21B1
    539e:	90 91 b2 21 	lds	r25, 0x21B2
    53a2:	8f 7d       	andi	r24, 0xDF	; 223
    53a4:	80 93 b1 21 	sts	0x21B1, r24
    53a8:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_LINEMODE) {
    53ac:	54 ff       	sbrs	r21, 4
    53ae:	09 c0       	rjmp	.+18     	; 0x53c2 <xio_usb_control+0xe4>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    53b0:	80 91 b1 21 	lds	r24, 0x21B1
    53b4:	90 91 b2 21 	lds	r25, 0x21B2
    53b8:	80 64       	ori	r24, 0x40	; 64
    53ba:	80 93 b1 21 	sts	0x21B1, r24
    53be:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOLINEMODE) {
    53c2:	55 ff       	sbrs	r21, 5
    53c4:	09 c0       	rjmp	.+18     	; 0x53d8 <xio_usb_control+0xfa>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    53c6:	80 91 b1 21 	lds	r24, 0x21B1
    53ca:	90 91 b2 21 	lds	r25, 0x21B2
    53ce:	8f 7b       	andi	r24, 0xBF	; 191
    53d0:	80 93 b1 21 	sts	0x21B1, r24
    53d4:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_SEMICOLONS) {
    53d8:	56 ff       	sbrs	r21, 6
    53da:	09 c0       	rjmp	.+18     	; 0x53ee <xio_usb_control+0x110>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    53dc:	80 91 b1 21 	lds	r24, 0x21B1
    53e0:	90 91 b2 21 	lds	r25, 0x21B2
    53e4:	80 68       	ori	r24, 0x80	; 128
    53e6:	80 93 b1 21 	sts	0x21B1, r24
    53ea:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    53ee:	57 ff       	sbrs	r21, 7
    53f0:	09 c0       	rjmp	.+18     	; 0x5404 <xio_usb_control+0x126>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    53f2:	80 91 b1 21 	lds	r24, 0x21B1
    53f6:	90 91 b2 21 	lds	r25, 0x21B2
    53fa:	8f 77       	andi	r24, 0x7F	; 127
    53fc:	80 93 b1 21 	sts	0x21B1, r24
    5400:	90 93 b2 21 	sts	0x21B2, r25
	}
	return (0);
}
    5404:	80 e0       	ldi	r24, 0x00	; 0
    5406:	08 95       	ret

00005408 <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(USB_RX_ISR_vect)		//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    5408:	1f 92       	push	r1
    540a:	0f 92       	push	r0
    540c:	0f b6       	in	r0, 0x3f	; 63
    540e:	0f 92       	push	r0
    5410:	0b b6       	in	r0, 0x3b	; 59
    5412:	0f 92       	push	r0
    5414:	11 24       	eor	r1, r1
    5416:	8f 93       	push	r24
    5418:	9f 93       	push	r25
    541a:	af 93       	push	r26
    541c:	bf 93       	push	r27
    541e:	ef 93       	push	r30
    5420:	ff 93       	push	r31
	// normal path
	if ((--f.rx_buf_head) == 0) { 				// advance buffer head with wrap
    5422:	80 91 be 21 	lds	r24, 0x21BE
    5426:	81 50       	subi	r24, 0x01	; 1
    5428:	80 93 be 21 	sts	0x21BE, r24
    542c:	80 91 be 21 	lds	r24, 0x21BE
    5430:	88 23       	and	r24, r24
    5432:	19 f4       	brne	.+6      	; 0x543a <__vector_25+0x32>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    5434:	81 e1       	ldi	r24, 0x11	; 17
    5436:	80 93 be 21 	sts	0x21BE, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    543a:	90 91 be 21 	lds	r25, 0x21BE
    543e:	80 91 bd 21 	lds	r24, 0x21BD
    5442:	98 17       	cp	r25, r24
    5444:	61 f0       	breq	.+24     	; 0x545e <__vector_25+0x56>
		f.rx_buf[f.rx_buf_head] = f.usart->DATA;// (= USARTC0.DATA;)
    5446:	e0 91 be 21 	lds	r30, 0x21BE
    544a:	f0 e0       	ldi	r31, 0x00	; 0
    544c:	a0 91 e6 21 	lds	r26, 0x21E6
    5450:	b0 91 e7 21 	lds	r27, 0x21E7
    5454:	8c 91       	ld	r24, X
    5456:	ef 54       	subi	r30, 0x4F	; 79
    5458:	fe 4d       	sbci	r31, 0xDE	; 222
    545a:	81 8b       	std	Z+17, r24	; 0x11
    545c:	0c c0       	rjmp	.+24     	; 0x5476 <__vector_25+0x6e>
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    545e:	80 91 be 21 	lds	r24, 0x21BE
    5462:	8f 5f       	subi	r24, 0xFF	; 255
    5464:	80 93 be 21 	sts	0x21BE, r24
    5468:	80 91 be 21 	lds	r24, 0x21BE
    546c:	82 31       	cpi	r24, 0x12	; 18
    546e:	18 f0       	brcs	.+6      	; 0x5476 <__vector_25+0x6e>
		f.rx_buf_head = 1;
    5470:	81 e0       	ldi	r24, 0x01	; 1
    5472:	80 93 be 21 	sts	0x21BE, r24
	}
	// activate flow control here or before it gets to this level
}
    5476:	ff 91       	pop	r31
    5478:	ef 91       	pop	r30
    547a:	bf 91       	pop	r27
    547c:	af 91       	pop	r26
    547e:	9f 91       	pop	r25
    5480:	8f 91       	pop	r24
    5482:	0f 90       	pop	r0
    5484:	0b be       	out	0x3b, r0	; 59
    5486:	0f 90       	pop	r0
    5488:	0f be       	out	0x3f, r0	; 63
    548a:	0f 90       	pop	r0
    548c:	1f 90       	pop	r1
    548e:	18 95       	reti

00005490 <xio_usb_queue_RX_char>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_usb_queue_RX_char(const char c)
{
    5490:	28 2f       	mov	r18, r24
	// normal path
	if ((--f.rx_buf_head) == 0) { 				// wrap condition
    5492:	80 91 be 21 	lds	r24, 0x21BE
    5496:	81 50       	subi	r24, 0x01	; 1
    5498:	80 93 be 21 	sts	0x21BE, r24
    549c:	80 91 be 21 	lds	r24, 0x21BE
    54a0:	88 23       	and	r24, r24
    54a2:	19 f4       	brne	.+6      	; 0x54aa <xio_usb_queue_RX_char+0x1a>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    54a4:	81 e1       	ldi	r24, 0x11	; 17
    54a6:	80 93 be 21 	sts	0x21BE, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    54aa:	90 91 be 21 	lds	r25, 0x21BE
    54ae:	80 91 bd 21 	lds	r24, 0x21BD
    54b2:	98 17       	cp	r25, r24
    54b4:	39 f0       	breq	.+14     	; 0x54c4 <xio_usb_queue_RX_char+0x34>
		f.rx_buf[f.rx_buf_head] = c;			// FAKE INPUT DATA
    54b6:	e0 91 be 21 	lds	r30, 0x21BE
    54ba:	f0 e0       	ldi	r31, 0x00	; 0
    54bc:	ef 54       	subi	r30, 0x4F	; 79
    54be:	fe 4d       	sbci	r31, 0xDE	; 222
    54c0:	21 8b       	std	Z+17, r18	; 0x11
    54c2:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    54c4:	80 91 be 21 	lds	r24, 0x21BE
    54c8:	8f 5f       	subi	r24, 0xFF	; 255
    54ca:	80 93 be 21 	sts	0x21BE, r24
    54ce:	80 91 be 21 	lds	r24, 0x21BE
    54d2:	82 31       	cpi	r24, 0x12	; 18
    54d4:	18 f0       	brcs	.+6      	; 0x54dc <xio_usb_queue_RX_char+0x4c>
		f.rx_buf_head = 1;
    54d6:	81 e0       	ldi	r24, 0x01	; 1
    54d8:	80 93 be 21 	sts	0x21BE, r24
    54dc:	08 95       	ret

000054de <xio_usb_queue_RX_string>:
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_usb_queue_RX_string(char *buf)
{
    54de:	1f 93       	push	r17
    54e0:	cf 93       	push	r28
    54e2:	df 93       	push	r29
    54e4:	ec 01       	movw	r28, r24
    54e6:	10 e0       	ldi	r17, 0x00	; 0
    54e8:	02 c0       	rjmp	.+4      	; 0x54ee <xio_usb_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    54ea:	0e 94 48 2a 	call	0x5490	; 0x5490 <xio_usb_queue_RX_char>
void xio_usb_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    54ee:	fe 01       	movw	r30, r28
    54f0:	e1 0f       	add	r30, r17
    54f2:	f1 1d       	adc	r31, r1
    54f4:	80 81       	ld	r24, Z
    54f6:	1f 5f       	subi	r17, 0xFF	; 255
    54f8:	88 23       	and	r24, r24
    54fa:	b9 f7       	brne	.-18     	; 0x54ea <xio_usb_queue_RX_string+0xc>
		xio_usb_queue_RX_char(c);
	}
}
    54fc:	df 91       	pop	r29
    54fe:	cf 91       	pop	r28
    5500:	1f 91       	pop	r17
    5502:	08 95       	ret

00005504 <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)		//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    5504:	1f 92       	push	r1
    5506:	0f 92       	push	r0
    5508:	0f b6       	in	r0, 0x3f	; 63
    550a:	0f 92       	push	r0
    550c:	0b b6       	in	r0, 0x3b	; 59
    550e:	0f 92       	push	r0
    5510:	11 24       	eor	r1, r1
    5512:	8f 93       	push	r24
    5514:	9f 93       	push	r25
    5516:	af 93       	push	r26
    5518:	bf 93       	push	r27
    551a:	ef 93       	push	r30
    551c:	ff 93       	push	r31
	if (f.tx_buf_head == f.tx_buf_tail) {			// buffer empty - disable ints
    551e:	90 91 c0 21 	lds	r25, 0x21C0
    5522:	80 91 bf 21 	lds	r24, 0x21BF
    5526:	98 17       	cp	r25, r24
    5528:	39 f4       	brne	.+14     	; 0x5538 <__vector_26+0x34>
		f.usart->CTRLA = USARTC0_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    552a:	e0 91 e6 21 	lds	r30, 0x21E6
    552e:	f0 91 e7 21 	lds	r31, 0x21E7
    5532:	80 e2       	ldi	r24, 0x20	; 32
    5534:	83 83       	std	Z+3, r24	; 0x03
    5536:	1e c0       	rjmp	.+60     	; 0x5574 <__vector_26+0x70>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(f.flags)) {
    5538:	80 91 b1 21 	lds	r24, 0x21B1
    553c:	90 91 b2 21 	lds	r25, 0x21B2
    5540:	93 fd       	sbrc	r25, 3
    5542:	18 c0       	rjmp	.+48     	; 0x5574 <__vector_26+0x70>
		if (--(f.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    5544:	80 91 bf 21 	lds	r24, 0x21BF
    5548:	81 50       	subi	r24, 0x01	; 1
    554a:	80 93 bf 21 	sts	0x21BF, r24
    554e:	80 91 bf 21 	lds	r24, 0x21BF
    5552:	88 23       	and	r24, r24
    5554:	19 f4       	brne	.+6      	; 0x555c <__vector_26+0x58>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5556:	81 e1       	ldi	r24, 0x11	; 17
    5558:	80 93 bf 21 	sts	0x21BF, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];	// write char to TX DATA register
    555c:	e0 91 e6 21 	lds	r30, 0x21E6
    5560:	f0 91 e7 21 	lds	r31, 0x21E7
    5564:	a0 91 bf 21 	lds	r26, 0x21BF
    5568:	b0 e0       	ldi	r27, 0x00	; 0
    556a:	af 54       	subi	r26, 0x4F	; 79
    556c:	be 4d       	sbci	r27, 0xDE	; 222
    556e:	93 96       	adiw	r26, 0x23	; 35
    5570:	8c 91       	ld	r24, X
    5572:	80 83       	st	Z, r24
	}
}
    5574:	ff 91       	pop	r31
    5576:	ef 91       	pop	r30
    5578:	bf 91       	pop	r27
    557a:	af 91       	pop	r26
    557c:	9f 91       	pop	r25
    557e:	8f 91       	pop	r24
    5580:	0f 90       	pop	r0
    5582:	0b be       	out	0x3b, r0	; 59
    5584:	0f 90       	pop	r0
    5586:	0f be       	out	0x3f, r0	; 63
    5588:	0f 90       	pop	r0
    558a:	1f 90       	pop	r1
    558c:	18 95       	reti

0000558e <xio_usb_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
    558e:	48 2f       	mov	r20, r24
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    5590:	20 91 b1 21 	lds	r18, 0x21B1
    5594:	30 91 b2 21 	lds	r19, 0x21B2
    5598:	d9 01       	movw	r26, r18
    559a:	a4 70       	andi	r26, 0x04	; 4
    559c:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    559e:	b9 01       	movw	r22, r18
    55a0:	60 72       	andi	r22, 0x20	; 32
    55a2:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
    55a4:	90 91 c0 21 	lds	r25, 0x21C0
    55a8:	91 50       	subi	r25, 0x01	; 1
    55aa:	c1 f4       	brne	.+48     	; 0x55dc <xio_usb_putc+0x4e>
    55ac:	91 e1       	ldi	r25, 0x11	; 17
    55ae:	16 c0       	rjmp	.+44     	; 0x55dc <xio_usb_putc+0x4e>
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    55b0:	10 97       	sbiw	r26, 0x00	; 0
    55b2:	61 f0       	breq	.+24     	; 0x55cc <xio_usb_putc+0x3e>
			sleep_mode();
    55b4:	80 91 48 00 	lds	r24, 0x0048
    55b8:	81 60       	ori	r24, 0x01	; 1
    55ba:	80 93 48 00 	sts	0x0048, r24
    55be:	88 95       	sleep
    55c0:	80 91 48 00 	lds	r24, 0x0048
    55c4:	8e 7f       	andi	r24, 0xFE	; 254
    55c6:	80 93 48 00 	sts	0x0048, r24
    55ca:	08 c0       	rjmp	.+16     	; 0x55dc <xio_usb_putc+0x4e>
    55cc:	90 93 c1 21 	sts	0x21C1, r25
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    55d0:	83 e0       	ldi	r24, 0x03	; 3
    55d2:	80 93 b3 21 	sts	0x21B3, r24
    55d6:	2f ef       	ldi	r18, 0xFF	; 255
    55d8:	3f ef       	ldi	r19, 0xFF	; 255
    55da:	54 c0       	rjmp	.+168    	; 0x5684 <xio_usb_putc+0xf6>
int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
    55dc:	80 91 bf 21 	lds	r24, 0x21BF
    55e0:	98 17       	cp	r25, r24
    55e2:	31 f3       	breq	.-52     	; 0x55b0 <xio_usb_putc+0x22>
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
    55e4:	90 93 c0 21 	sts	0x21C0, r25
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer
    55e8:	e0 91 c0 21 	lds	r30, 0x21C0
    55ec:	f0 e0       	ldi	r31, 0x00	; 0
    55ee:	ef 54       	subi	r30, 0x4F	; 79
    55f0:	fe 4d       	sbci	r31, 0xDE	; 222
    55f2:	43 a3       	std	Z+35, r20	; 0x23

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    55f4:	61 15       	cp	r22, r1
    55f6:	71 05       	cpc	r23, r1
    55f8:	21 f0       	breq	.+8      	; 0x5602 <xio_usb_putc+0x74>
    55fa:	4a 30       	cpi	r20, 0x0A	; 10
    55fc:	11 f4       	brne	.+4      	; 0x5602 <xio_usb_putc+0x74>
    55fe:	4d e0       	ldi	r20, 0x0D	; 13
    5600:	d1 cf       	rjmp	.-94     	; 0x55a4 <xio_usb_putc+0x16>
    5602:	90 93 c1 21 	sts	0x21C1, r25
		return xio_usb_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (f.usart->STATUS & 0x20) {
    5606:	a0 91 e6 21 	lds	r26, 0x21E6
    560a:	b0 91 e7 21 	lds	r27, 0x21E7
    560e:	11 96       	adiw	r26, 0x01	; 1
    5610:	8c 91       	ld	r24, X
    5612:	11 97       	sbiw	r26, 0x01	; 1
    5614:	85 ff       	sbrs	r24, 5
    5616:	27 c0       	rjmp	.+78     	; 0x5666 <xio_usb_putc+0xd8>
		if (f.tx_buf_head == f.tx_buf_tail) {	// buf might be empty if IRQ got it
    5618:	90 91 c0 21 	lds	r25, 0x21C0
    561c:	80 91 bf 21 	lds	r24, 0x21BF
    5620:	98 17       	cp	r25, r24
    5622:	71 f1       	breq	.+92     	; 0x5680 <xio_usb_putc+0xf2>
			return (0);
		}
		f.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    5624:	38 60       	ori	r19, 0x08	; 8
    5626:	20 93 b1 21 	sts	0x21B1, r18
    562a:	30 93 b2 21 	sts	0x21B2, r19
		if (--(f.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    562e:	80 91 bf 21 	lds	r24, 0x21BF
    5632:	81 50       	subi	r24, 0x01	; 1
    5634:	80 93 bf 21 	sts	0x21BF, r24
    5638:	80 91 bf 21 	lds	r24, 0x21BF
    563c:	88 23       	and	r24, r24
    563e:	19 f4       	brne	.+6      	; 0x5646 <xio_usb_putc+0xb8>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    5640:	81 e1       	ldi	r24, 0x11	; 17
    5642:	80 93 bf 21 	sts	0x21BF, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];// write char to TX DATA register
    5646:	e0 91 bf 21 	lds	r30, 0x21BF
    564a:	f0 e0       	ldi	r31, 0x00	; 0
    564c:	ef 54       	subi	r30, 0x4F	; 79
    564e:	fe 4d       	sbci	r31, 0xDE	; 222
    5650:	83 a1       	ldd	r24, Z+35	; 0x23
    5652:	8c 93       	st	X, r24
		f.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    5654:	80 91 b1 21 	lds	r24, 0x21B1
    5658:	90 91 b2 21 	lds	r25, 0x21B2
    565c:	97 7f       	andi	r25, 0xF7	; 247
    565e:	80 93 b1 21 	sts	0x21B1, r24
    5662:	90 93 b2 21 	sts	0x21B2, r25
	}
	// enable interrupts regardless
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    5666:	e0 91 e6 21 	lds	r30, 0x21E6
    566a:	f0 91 e7 21 	lds	r31, 0x21E7
    566e:	81 e2       	ldi	r24, 0x21	; 33
    5670:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    5672:	80 91 a2 00 	lds	r24, 0x00A2
    5676:	81 60       	ori	r24, 0x01	; 1
    5678:	e0 ea       	ldi	r30, 0xA0	; 160
    567a:	f0 e0       	ldi	r31, 0x00	; 0
    567c:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    567e:	78 94       	sei
    5680:	20 e0       	ldi	r18, 0x00	; 0
    5682:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    5684:	c9 01       	movw	r24, r18
    5686:	08 95       	ret

00005688 <xio_usb_getc>:
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(f.flags)) {
    5688:	20 91 b1 21 	lds	r18, 0x21B1
    568c:	30 91 b2 21 	lds	r19, 0x21B2
    5690:	24 70       	andi	r18, 0x04	; 4
    5692:	30 70       	andi	r19, 0x00	; 0
    5694:	15 c0       	rjmp	.+42     	; 0x56c0 <xio_usb_getc+0x38>
    5696:	21 15       	cp	r18, r1
    5698:	31 05       	cpc	r19, r1
    569a:	61 f0       	breq	.+24     	; 0x56b4 <xio_usb_getc+0x2c>
			sleep_mode();
    569c:	80 91 48 00 	lds	r24, 0x0048
    56a0:	81 60       	ori	r24, 0x01	; 1
    56a2:	80 93 48 00 	sts	0x0048, r24
    56a6:	88 95       	sleep
    56a8:	80 91 48 00 	lds	r24, 0x0048
    56ac:	8e 7f       	andi	r24, 0xFE	; 254
    56ae:	80 93 48 00 	sts	0x0048, r24
    56b2:	06 c0       	rjmp	.+12     	; 0x56c0 <xio_usb_getc+0x38>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    56b4:	83 e0       	ldi	r24, 0x03	; 3
    56b6:	80 93 b3 21 	sts	0x21B3, r24
    56ba:	2f ef       	ldi	r18, 0xFF	; 255
    56bc:	3f ef       	ldi	r19, 0xFF	; 255
    56be:	26 c0       	rjmp	.+76     	; 0x570c <xio_usb_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
    56c0:	90 91 be 21 	lds	r25, 0x21BE
    56c4:	80 91 bd 21 	lds	r24, 0x21BD
    56c8:	98 17       	cp	r25, r24
    56ca:	29 f3       	breq	.-54     	; 0x5696 <xio_usb_getc+0xe>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    56cc:	80 91 bd 21 	lds	r24, 0x21BD
    56d0:	81 50       	subi	r24, 0x01	; 1
    56d2:	80 93 bd 21 	sts	0x21BD, r24
    56d6:	80 91 bd 21 	lds	r24, 0x21BD
    56da:	88 23       	and	r24, r24
    56dc:	19 f4       	brne	.+6      	; 0x56e4 <xio_usb_getc+0x5c>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    56de:	81 e1       	ldi	r24, 0x11	; 17
    56e0:	80 93 bd 21 	sts	0x21BD, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    56e4:	e0 91 bd 21 	lds	r30, 0x21BD
    56e8:	f0 e0       	ldi	r31, 0x00	; 0
    56ea:	ef 54       	subi	r30, 0x4F	; 79
    56ec:	fe 4d       	sbci	r31, 0xDE	; 222
    56ee:	81 89       	ldd	r24, Z+17	; 0x11
    56f0:	8f 77       	andi	r24, 0x7F	; 127
    56f2:	80 93 b4 21 	sts	0x21B4, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[f.c])))());
    56f6:	90 e0       	ldi	r25, 0x00	; 0
    56f8:	88 0f       	add	r24, r24
    56fa:	99 1f       	adc	r25, r25
    56fc:	8a 59       	subi	r24, 0x9A	; 154
    56fe:	97 4f       	sbci	r25, 0xF7	; 247
    5700:	fc 01       	movw	r30, r24
    5702:	25 91       	lpm	r18, Z+
    5704:	34 91       	lpm	r19, Z+
    5706:	f9 01       	movw	r30, r18
    5708:	19 95       	eicall
    570a:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    570c:	c9 01       	movw	r24, r18
    570e:	08 95       	ret

00005710 <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    5710:	80 91 b1 21 	lds	r24, 0x21B1
    5714:	84 ff       	sbrs	r24, 4
    5716:	08 c0       	rjmp	.+16     	; 0x5728 <_getc_char+0x18>
    5718:	60 91 69 25 	lds	r22, 0x2569
    571c:	70 91 6a 25 	lds	r23, 0x256A
    5720:	80 91 b4 21 	lds	r24, 0x21B4
    5724:	0e 94 c7 2a 	call	0x558e	; 0x558e <xio_usb_putc>
	return(f.c);
}
    5728:	80 91 b4 21 	lds	r24, 0x21B4
    572c:	90 e0       	ldi	r25, 0x00	; 0
    572e:	08 95       	ret

00005730 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(f.flags)) f.c = '\n';
    5730:	90 91 b1 21 	lds	r25, 0x21B1
    5734:	96 ff       	sbrs	r25, 6
    5736:	03 c0       	rjmp	.+6      	; 0x573e <_getc_NEWLINE+0xe>
    5738:	8a e0       	ldi	r24, 0x0A	; 10
    573a:	80 93 b4 21 	sts	0x21B4, r24
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    573e:	94 ff       	sbrs	r25, 4
    5740:	08 c0       	rjmp	.+16     	; 0x5752 <_getc_NEWLINE+0x22>
    5742:	60 91 69 25 	lds	r22, 0x2569
    5746:	70 91 6a 25 	lds	r23, 0x256A
    574a:	80 91 b4 21 	lds	r24, 0x21B4
    574e:	0e 94 c7 2a 	call	0x558e	; 0x558e <xio_usb_putc>
	return(f.c);
}
    5752:	80 91 b4 21 	lds	r24, 0x21B4
    5756:	90 e0       	ldi	r25, 0x00	; 0
    5758:	08 95       	ret

0000575a <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(f.flags)) {
    575a:	80 91 b1 21 	lds	r24, 0x21B1
    575e:	87 ff       	sbrs	r24, 7
    5760:	03 c0       	rjmp	.+6      	; 0x5768 <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    5762:	0e 94 98 2b 	call	0x5730	; 0x5730 <_getc_NEWLINE>
    5766:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    5768:	0e 94 88 2b 	call	0x5710	; 0x5710 <_getc_char>
}
    576c:	08 95       	ret

0000576e <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	f.sig = XIO_SIG_DELETE;
    576e:	8a e0       	ldi	r24, 0x0A	; 10
    5770:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
}
    5774:	8f ef       	ldi	r24, 0xFF	; 255
    5776:	9f ef       	ldi	r25, 0xFF	; 255
    5778:	08 95       	ret

0000577a <_getc_KILL>:

static int _getc_KILL(void)
{
	f.sig = XIO_SIG_KILL;
    577a:	84 e0       	ldi	r24, 0x04	; 4
    577c:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
}
    5780:	8f ef       	ldi	r24, 0xFF	; 255
    5782:	9f ef       	ldi	r25, 0xFF	; 255
    5784:	08 95       	ret

00005786 <_getc_PAUSE>:

static int _getc_PAUSE(void)
{
	f.sig = XIO_SIG_PAUSE;
    5786:	86 e0       	ldi	r24, 0x06	; 6
    5788:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
}
    578c:	8f ef       	ldi	r24, 0xFF	; 255
    578e:	9f ef       	ldi	r25, 0xFF	; 255
    5790:	08 95       	ret

00005792 <_getc_RESUME>:

static int _getc_RESUME(void)
{
	f.sig = XIO_SIG_RESUME;
    5792:	87 e0       	ldi	r24, 0x07	; 7
    5794:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
}
    5798:	8f ef       	ldi	r24, 0xFF	; 255
    579a:	9f ef       	ldi	r25, 0xFF	; 255
    579c:	08 95       	ret

0000579e <_getc_SHIFTOUT>:

static int _getc_SHIFTOUT(void)
{
	f.sig = XIO_SIG_SHIFTOUT;
    579e:	88 e0       	ldi	r24, 0x08	; 8
    57a0:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
}
    57a4:	8f ef       	ldi	r24, 0xFF	; 255
    57a6:	9f ef       	ldi	r25, 0xFF	; 255
    57a8:	08 95       	ret

000057aa <_getc_SHIFTIN>:

static int _getc_SHIFTIN(void)
{
	f.sig = XIO_SIG_SHIFTIN;
    57aa:	89 e0       	ldi	r24, 0x09	; 9
    57ac:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
}
    57b0:	8f ef       	ldi	r24, 0xFF	; 255
    57b2:	9f ef       	ldi	r25, 0xFF	; 255
    57b4:	08 95       	ret

000057b6 <xio_usb_readln>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_usb_readln(char *buf, uint8_t len)
{
	if (!IN_LINE(f.flags)) {					// first time thru initializations
    57b6:	20 91 b1 21 	lds	r18, 0x21B1
    57ba:	30 91 b2 21 	lds	r19, 0x21B2
    57be:	36 fd       	sbrc	r19, 6
    57c0:	0d c0       	rjmp	.+26     	; 0x57dc <xio_usb_readln+0x26>
		f.i = 0;								// zero buffer
    57c2:	10 92 b5 21 	sts	0x21B5, r1
		f.len = len;							// save arg into struct 
    57c6:	60 93 b6 21 	sts	0x21B6, r22
		f.buf = buf;							// save arg into struct 
    57ca:	80 93 b7 21 	sts	0x21B7, r24
    57ce:	90 93 b8 21 	sts	0x21B8, r25
//		f.sig = XIO_SIG_OK;						// no signal action
		f.flags |= XIO_FLAG_IN_LINE_bm;			// yes, we are busy getting a line
    57d2:	30 64       	ori	r19, 0x40	; 64
    57d4:	20 93 b1 21 	sts	0x21B1, r18
    57d8:	30 93 b2 21 	sts	0x21B2, r19
	}
	if (f.rx_buf_head == f.rx_buf_tail) {		// RX ISR buffer empty
    57dc:	90 91 be 21 	lds	r25, 0x21BE
    57e0:	80 91 bd 21 	lds	r24, 0x21BD
    57e4:	98 17       	cp	r25, r24
    57e6:	19 f4       	brne	.+6      	; 0x57ee <xio_usb_readln+0x38>
    57e8:	22 e0       	ldi	r18, 0x02	; 2
    57ea:	30 e0       	ldi	r19, 0x00	; 0
    57ec:	20 c0       	rjmp	.+64     	; 0x582e <xio_usb_readln+0x78>
//		f.sig = XIO_SIG_WOULDBLOCK;
		return(TG_CONTINUE);
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    57ee:	80 91 bd 21 	lds	r24, 0x21BD
    57f2:	81 50       	subi	r24, 0x01	; 1
    57f4:	80 93 bd 21 	sts	0x21BD, r24
    57f8:	80 91 bd 21 	lds	r24, 0x21BD
    57fc:	88 23       	and	r24, r24
    57fe:	19 f4       	brne	.+6      	; 0x5806 <xio_usb_readln+0x50>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5800:	81 e1       	ldi	r24, 0x11	; 17
    5802:	80 93 bd 21 	sts	0x21BD, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    5806:	e0 91 bd 21 	lds	r30, 0x21BD
    580a:	f0 e0       	ldi	r31, 0x00	; 0
    580c:	ef 54       	subi	r30, 0x4F	; 79
    580e:	fe 4d       	sbci	r31, 0xDE	; 222
    5810:	81 89       	ldd	r24, Z+17	; 0x11
    5812:	8f 77       	andi	r24, 0x7F	; 127
    5814:	80 93 b4 21 	sts	0x21B4, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[f.c])))()); // dispatch on character
    5818:	90 e0       	ldi	r25, 0x00	; 0
    581a:	88 0f       	add	r24, r24
    581c:	99 1f       	adc	r25, r25
    581e:	8a 59       	subi	r24, 0x9A	; 154
    5820:	98 4f       	sbci	r25, 0xF8	; 248
    5822:	fc 01       	movw	r30, r24
    5824:	25 91       	lpm	r18, Z+
    5826:	34 91       	lpm	r19, Z+
    5828:	f9 01       	movw	r30, r18
    582a:	19 95       	eicall
    582c:	9c 01       	movw	r18, r24
}
    582e:	c9 01       	movw	r24, r18
    5830:	08 95       	ret

00005832 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (f.i > f.len) {							// trap buffer overflow
    5832:	90 91 b5 21 	lds	r25, 0x21B5
    5836:	20 91 b6 21 	lds	r18, 0x21B6
    583a:	e0 91 b7 21 	lds	r30, 0x21B7
    583e:	f0 91 b8 21 	lds	r31, 0x21B8
    5842:	29 17       	cp	r18, r25
    5844:	48 f4       	brcc	.+18     	; 0x5858 <_readln_char+0x26>
		f.sig = XIO_SIG_EOL;
    5846:	81 e0       	ldi	r24, 0x01	; 1
    5848:	80 93 b3 21 	sts	0x21B3, r24
		f.buf[f.len] = NUL;						// f.len is zero based
    584c:	e2 0f       	add	r30, r18
    584e:	f1 1d       	adc	r31, r1
    5850:	10 82       	st	Z, r1
    5852:	26 e0       	ldi	r18, 0x06	; 6
    5854:	30 e0       	ldi	r19, 0x00	; 0
    5856:	16 c0       	rjmp	.+44     	; 0x5884 <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	f.buf[f.i++] = f.c;
    5858:	e9 0f       	add	r30, r25
    585a:	f1 1d       	adc	r31, r1
    585c:	80 91 b4 21 	lds	r24, 0x21B4
    5860:	80 83       	st	Z, r24
    5862:	9f 5f       	subi	r25, 0xFF	; 255
    5864:	90 93 b5 21 	sts	0x21B5, r25
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);// conditional echo
    5868:	80 91 b1 21 	lds	r24, 0x21B1
    586c:	84 ff       	sbrs	r24, 4
    586e:	08 c0       	rjmp	.+16     	; 0x5880 <_readln_char+0x4e>
    5870:	60 91 69 25 	lds	r22, 0x2569
    5874:	70 91 6a 25 	lds	r23, 0x256A
    5878:	80 91 b4 21 	lds	r24, 0x21B4
    587c:	0e 94 c7 2a 	call	0x558e	; 0x558e <xio_usb_putc>
    5880:	22 e0       	ldi	r18, 0x02	; 2
    5882:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_CONTINUE);						// line is still in process
}
    5884:	c9 01       	movw	r24, r18
    5886:	08 95       	ret

00005888 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	f.sig = XIO_SIG_EOL;
    5888:	81 e0       	ldi	r24, 0x01	; 1
    588a:	80 93 b3 21 	sts	0x21B3, r24
	f.buf[f.i] = NUL;
    588e:	80 91 b5 21 	lds	r24, 0x21B5
    5892:	e0 91 b7 21 	lds	r30, 0x21B7
    5896:	f0 91 b8 21 	lds	r31, 0x21B8
    589a:	e8 0f       	add	r30, r24
    589c:	f1 1d       	adc	r31, r1
    589e:	10 82       	st	Z, r1
	f.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    58a0:	20 91 b1 21 	lds	r18, 0x21B1
    58a4:	30 91 b2 21 	lds	r19, 0x21B2
    58a8:	c9 01       	movw	r24, r18
    58aa:	9f 7b       	andi	r25, 0xBF	; 191
    58ac:	80 93 b1 21 	sts	0x21B1, r24
    58b0:	90 93 b2 21 	sts	0x21B2, r25
	if (ECHO(f.flags)) xio_usb_putc('\n',stdout);// echo a newline
    58b4:	24 ff       	sbrs	r18, 4
    58b6:	07 c0       	rjmp	.+14     	; 0x58c6 <_readln_NEWLINE+0x3e>
    58b8:	60 91 69 25 	lds	r22, 0x2569
    58bc:	70 91 6a 25 	lds	r23, 0x256A
    58c0:	8a e0       	ldi	r24, 0x0A	; 10
    58c2:	0e 94 c7 2a 	call	0x558e	; 0x558e <xio_usb_putc>
	return ((int)f.line_func(f.buf));			// call line handler function
    58c6:	e0 91 bb 21 	lds	r30, 0x21BB
    58ca:	f0 91 bc 21 	lds	r31, 0x21BC
    58ce:	80 91 b7 21 	lds	r24, 0x21B7
    58d2:	90 91 b8 21 	lds	r25, 0x21B8
    58d6:	19 95       	eicall
}
    58d8:	08 95       	ret

000058da <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(f.flags)) {
    58da:	80 91 b1 21 	lds	r24, 0x21B1
    58de:	87 ff       	sbrs	r24, 7
    58e0:	03 c0       	rjmp	.+6      	; 0x58e8 <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    58e2:	0e 94 44 2c 	call	0x5888	; 0x5888 <_readln_NEWLINE>
    58e6:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    58e8:	0e 94 19 2c 	call	0x5832	; 0x5832 <_readln_char>
	}
}
    58ec:	08 95       	ret

000058ee <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--f.i >= 0) {
    58ee:	80 91 b5 21 	lds	r24, 0x21B5
    58f2:	81 50       	subi	r24, 0x01	; 1
    58f4:	80 93 b5 21 	sts	0x21B5, r24
		if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    58f8:	80 91 b1 21 	lds	r24, 0x21B1
    58fc:	84 ff       	sbrs	r24, 4
    58fe:	08 c0       	rjmp	.+16     	; 0x5910 <_readln_DELETE+0x22>
    5900:	60 91 69 25 	lds	r22, 0x2569
    5904:	70 91 6a 25 	lds	r23, 0x256A
    5908:	80 91 b4 21 	lds	r24, 0x21B4
    590c:	0e 94 c7 2a 	call	0x558e	; 0x558e <xio_usb_putc>
	} else {
		f.i = 0;
	}
	return (TG_CONTINUE);						// line is still in process
}
    5910:	82 e0       	ldi	r24, 0x02	; 2
    5912:	90 e0       	ldi	r25, 0x00	; 0
    5914:	08 95       	ret

00005916 <_readln_KILL>:

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    5916:	84 e0       	ldi	r24, 0x04	; 4
    5918:	80 93 b3 21 	sts	0x21B3, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    591c:	e0 91 b9 21 	lds	r30, 0x21B9
    5920:	f0 91 ba 21 	lds	r31, 0x21BA
    5924:	19 95       	eicall
}

static int _readln_KILL(void)
{
	return _readln_SIG(XIO_SIG_KILL);
}
    5926:	08 95       	ret

00005928 <_readln_PAUSE>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    5928:	86 e0       	ldi	r24, 0x06	; 6
    592a:	80 93 b3 21 	sts	0x21B3, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    592e:	e0 91 b9 21 	lds	r30, 0x21B9
    5932:	f0 91 ba 21 	lds	r31, 0x21BA
    5936:	19 95       	eicall
}

static int _readln_PAUSE(void)
{
	return _readln_SIG(XIO_SIG_PAUSE);
}
    5938:	08 95       	ret

0000593a <_readln_RESUME>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    593a:	87 e0       	ldi	r24, 0x07	; 7
    593c:	80 93 b3 21 	sts	0x21B3, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    5940:	e0 91 b9 21 	lds	r30, 0x21B9
    5944:	f0 91 ba 21 	lds	r31, 0x21BA
    5948:	19 95       	eicall
}

static int _readln_RESUME(void)
{
	return _readln_SIG(XIO_SIG_RESUME);
}
    594a:	08 95       	ret

0000594c <_readln_SHIFTOUT>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    594c:	88 e0       	ldi	r24, 0x08	; 8
    594e:	80 93 b3 21 	sts	0x21B3, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    5952:	e0 91 b9 21 	lds	r30, 0x21B9
    5956:	f0 91 ba 21 	lds	r31, 0x21BA
    595a:	19 95       	eicall
}

static int _readln_SHIFTOUT(void)
{
	return _readln_SIG(XIO_SIG_SHIFTOUT);
}
    595c:	08 95       	ret

0000595e <_readln_SHIFTIN>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    595e:	89 e0       	ldi	r24, 0x09	; 9
    5960:	80 93 b3 21 	sts	0x21B3, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    5964:	e0 91 b9 21 	lds	r30, 0x21B9
    5968:	f0 91 ba 21 	lds	r31, 0x21BA
    596c:	19 95       	eicall
}

static int _readln_SHIFTIN(void)
{
	return _readln_SIG(XIO_SIG_SHIFTIN);
}
    596e:	08 95       	ret

00005970 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    5970:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5972:	e0 ec       	ldi	r30, 0xC0	; 192
    5974:	f1 e0       	ldi	r31, 0x01	; 1
    5976:	80 91 cf 01 	lds	r24, 0x01CF
    597a:	87 fd       	sbrc	r24, 7
    597c:	fa cf       	rjmp	.-12     	; 0x5972 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    597e:	26 2f       	mov	r18, r22
    5980:	30 e0       	ldi	r19, 0x00	; 0
    5982:	2f 71       	andi	r18, 0x1F	; 31
    5984:	30 70       	andi	r19, 0x00	; 0
    5986:	89 2f       	mov	r24, r25
    5988:	90 e0       	ldi	r25, 0x00	; 0
    598a:	45 e0       	ldi	r20, 0x05	; 5
    598c:	88 0f       	add	r24, r24
    598e:	99 1f       	adc	r25, r25
    5990:	4a 95       	dec	r20
    5992:	e1 f7       	brne	.-8      	; 0x598c <EEPROM_ReadByte+0x1c>
    5994:	28 2b       	or	r18, r24
    5996:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    5998:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    599c:	83 2f       	mov	r24, r19
    599e:	8f 71       	andi	r24, 0x1F	; 31
    59a0:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    59a2:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    59a4:	86 e0       	ldi	r24, 0x06	; 6
    59a6:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    59a8:	ef 93       	push	r30
    59aa:	ff 93       	push	r31
    59ac:	0f 93       	push	r16
    59ae:	2f 93       	push	r18
    59b0:	eb ec       	ldi	r30, 0xCB	; 203
    59b2:	f1 e0       	ldi	r31, 0x01	; 1
    59b4:	08 ed       	ldi	r16, 0xD8	; 216
    59b6:	21 e0       	ldi	r18, 0x01	; 1
    59b8:	04 bf       	out	0x34, r16	; 52
    59ba:	20 83       	st	Z, r18
    59bc:	2f 91       	pop	r18
    59be:	0f 91       	pop	r16
    59c0:	ff 91       	pop	r31
    59c2:	ef 91       	pop	r30

	return NVM.DATA0;
    59c4:	80 91 c4 01 	lds	r24, 0x01C4
}
    59c8:	08 95       	ret

000059ca <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    59ca:	68 2f       	mov	r22, r24
    59cc:	6f 71       	andi	r22, 0x1F	; 31
    59ce:	55 e0       	ldi	r21, 0x05	; 5
    59d0:	96 95       	lsr	r25
    59d2:	87 95       	ror	r24
    59d4:	5a 95       	dec	r21
    59d6:	e1 f7       	brne	.-8      	; 0x59d0 <eeprom_get_char+0x6>
    59d8:	0e 94 b8 2c 	call	0x5970	; 0x5970 <EEPROM_ReadByte>
}
    59dc:	08 95       	ret

000059de <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    59de:	8f 92       	push	r8
    59e0:	9f 92       	push	r9
    59e2:	af 92       	push	r10
    59e4:	bf 92       	push	r11
    59e6:	cf 92       	push	r12
    59e8:	df 92       	push	r13
    59ea:	ff 92       	push	r15
    59ec:	0f 93       	push	r16
    59ee:	1f 93       	push	r17
    59f0:	cf 93       	push	r28
    59f2:	df 93       	push	r29
    59f4:	4c 01       	movw	r8, r24
    59f6:	5b 01       	movw	r10, r22
    59f8:	6a 01       	movw	r12, r20
    59fa:	8b 01       	movw	r16, r22
    59fc:	ea 01       	movw	r28, r20
    59fe:	ff 24       	eor	r15, r15
    5a00:	18 c0       	rjmp	.+48     	; 0x5a32 <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5a02:	c8 01       	movw	r24, r16
    5a04:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    5a08:	ff 20       	and	r15, r15
    5a0a:	19 f0       	breq	.+6      	; 0x5a12 <memcpy_from_eeprom_with_checksum+0x34>
    5a0c:	21 e0       	ldi	r18, 0x01	; 1
    5a0e:	30 e0       	ldi	r19, 0x00	; 0
    5a10:	08 c0       	rjmp	.+16     	; 0x5a22 <memcpy_from_eeprom_with_checksum+0x44>
    5a12:	2f 2d       	mov	r18, r15
    5a14:	33 27       	eor	r19, r19
    5a16:	27 fd       	sbrc	r18, 7
    5a18:	30 95       	com	r19
    5a1a:	22 27       	eor	r18, r18
    5a1c:	33 0f       	add	r19, r19
    5a1e:	22 1f       	adc	r18, r18
    5a20:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5a22:	0f 5f       	subi	r16, 0xFF	; 255
    5a24:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    5a26:	f8 2e       	mov	r15, r24
    5a28:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    5a2a:	f4 01       	movw	r30, r8
    5a2c:	81 93       	st	Z+, r24
    5a2e:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    5a30:	21 97       	sbiw	r28, 0x01	; 1
    5a32:	20 97       	sbiw	r28, 0x00	; 0
    5a34:	31 f7       	brne	.-52     	; 0x5a02 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    5a36:	c6 01       	movw	r24, r12
    5a38:	8a 0d       	add	r24, r10
    5a3a:	9b 1d       	adc	r25, r11
    5a3c:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <eeprom_get_char>
    5a40:	20 e0       	ldi	r18, 0x00	; 0
    5a42:	30 e0       	ldi	r19, 0x00	; 0
    5a44:	f8 16       	cp	r15, r24
    5a46:	11 f4       	brne	.+4      	; 0x5a4c <memcpy_from_eeprom_with_checksum+0x6e>
    5a48:	21 e0       	ldi	r18, 0x01	; 1
    5a4a:	30 e0       	ldi	r19, 0x00	; 0
}
    5a4c:	c9 01       	movw	r24, r18
    5a4e:	df 91       	pop	r29
    5a50:	cf 91       	pop	r28
    5a52:	1f 91       	pop	r17
    5a54:	0f 91       	pop	r16
    5a56:	ff 90       	pop	r15
    5a58:	df 90       	pop	r13
    5a5a:	cf 90       	pop	r12
    5a5c:	bf 90       	pop	r11
    5a5e:	af 90       	pop	r10
    5a60:	9f 90       	pop	r9
    5a62:	8f 90       	pop	r8
    5a64:	08 95       	ret

00005a66 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a66:	80 91 cf 01 	lds	r24, 0x01CF
    5a6a:	87 fd       	sbrc	r24, 7
    5a6c:	fc cf       	rjmp	.-8      	; 0x5a66 <EEPROM_WaitForNVM>
}
    5a6e:	08 95       	ret

00005a70 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a70:	80 91 cf 01 	lds	r24, 0x01CF
    5a74:	87 fd       	sbrc	r24, 7
    5a76:	fc cf       	rjmp	.-8      	; 0x5a70 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    5a78:	80 91 cf 01 	lds	r24, 0x01CF
    5a7c:	81 ff       	sbrs	r24, 1
    5a7e:	12 c0       	rjmp	.+36     	; 0x5aa4 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    5a80:	86 e3       	ldi	r24, 0x36	; 54
    5a82:	e0 ec       	ldi	r30, 0xC0	; 192
    5a84:	f1 e0       	ldi	r31, 0x01	; 1
    5a86:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    5a88:	ef 93       	push	r30
    5a8a:	ff 93       	push	r31
    5a8c:	0f 93       	push	r16
    5a8e:	2f 93       	push	r18
    5a90:	eb ec       	ldi	r30, 0xCB	; 203
    5a92:	f1 e0       	ldi	r31, 0x01	; 1
    5a94:	08 ed       	ldi	r16, 0xD8	; 216
    5a96:	21 e0       	ldi	r18, 0x01	; 1
    5a98:	04 bf       	out	0x34, r16	; 52
    5a9a:	20 83       	st	Z, r18
    5a9c:	2f 91       	pop	r18
    5a9e:	0f 91       	pop	r16
    5aa0:	ff 91       	pop	r31
    5aa2:	ef 91       	pop	r30
    5aa4:	08 95       	ret

00005aa6 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    5aa6:	df 92       	push	r13
    5aa8:	ef 92       	push	r14
    5aaa:	ff 92       	push	r15
    5aac:	0f 93       	push	r16
    5aae:	1f 93       	push	r17
    5ab0:	e8 2e       	mov	r14, r24
    5ab2:	06 2f       	mov	r16, r22
    5ab4:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    5ab6:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5aba:	e0 ec       	ldi	r30, 0xC0	; 192
    5abc:	f1 e0       	ldi	r31, 0x01	; 1
    5abe:	83 e3       	ldi	r24, 0x33	; 51
    5ac0:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    5ac2:	10 e0       	ldi	r17, 0x00	; 0
    5ac4:	0f 71       	andi	r16, 0x1F	; 31
    5ac6:	10 70       	andi	r17, 0x00	; 0
    5ac8:	ff 24       	eor	r15, r15
    5aca:	75 e0       	ldi	r23, 0x05	; 5
    5acc:	ee 0c       	add	r14, r14
    5ace:	ff 1c       	adc	r15, r15
    5ad0:	7a 95       	dec	r23
    5ad2:	e1 f7       	brne	.-8      	; 0x5acc <EEPROM_WriteByte+0x26>
    5ad4:	0e 29       	or	r16, r14
    5ad6:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    5ad8:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5ada:	81 2f       	mov	r24, r17
    5adc:	8f 71       	andi	r24, 0x1F	; 31
    5ade:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5ae0:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5ae2:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5ae4:	85 e3       	ldi	r24, 0x35	; 53
    5ae6:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5ae8:	ef 93       	push	r30
    5aea:	ff 93       	push	r31
    5aec:	0f 93       	push	r16
    5aee:	2f 93       	push	r18
    5af0:	eb ec       	ldi	r30, 0xCB	; 203
    5af2:	f1 e0       	ldi	r31, 0x01	; 1
    5af4:	08 ed       	ldi	r16, 0xD8	; 216
    5af6:	21 e0       	ldi	r18, 0x01	; 1
    5af8:	04 bf       	out	0x34, r16	; 52
    5afa:	20 83       	st	Z, r18
    5afc:	2f 91       	pop	r18
    5afe:	0f 91       	pop	r16
    5b00:	ff 91       	pop	r31
    5b02:	ef 91       	pop	r30
}
    5b04:	1f 91       	pop	r17
    5b06:	0f 91       	pop	r16
    5b08:	ff 90       	pop	r15
    5b0a:	ef 90       	pop	r14
    5b0c:	df 90       	pop	r13
    5b0e:	08 95       	ret

00005b10 <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    5b10:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    5b12:	68 2f       	mov	r22, r24
    5b14:	6f 71       	andi	r22, 0x1F	; 31
    5b16:	e5 e0       	ldi	r30, 0x05	; 5
    5b18:	96 95       	lsr	r25
    5b1a:	87 95       	ror	r24
    5b1c:	ea 95       	dec	r30
    5b1e:	e1 f7       	brne	.-8      	; 0x5b18 <eeprom_put_char+0x8>
    5b20:	0e 94 53 2d 	call	0x5aa6	; 0x5aa6 <EEPROM_WriteByte>
}
    5b24:	08 95       	ret

00005b26 <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    5b26:	8f 92       	push	r8
    5b28:	9f 92       	push	r9
    5b2a:	af 92       	push	r10
    5b2c:	bf 92       	push	r11
    5b2e:	cf 92       	push	r12
    5b30:	df 92       	push	r13
    5b32:	ef 92       	push	r14
    5b34:	ff 92       	push	r15
    5b36:	0f 93       	push	r16
    5b38:	df 93       	push	r29
    5b3a:	cf 93       	push	r28
    5b3c:	0f 92       	push	r0
    5b3e:	0f 92       	push	r0
    5b40:	cd b7       	in	r28, 0x3d	; 61
    5b42:	de b7       	in	r29, 0x3e	; 62
    5b44:	5c 01       	movw	r10, r24
    5b46:	6b 01       	movw	r12, r22
    5b48:	7a 01       	movw	r14, r20
    5b4a:	4a 01       	movw	r8, r20
    5b4c:	00 e0       	ldi	r16, 0x00	; 0
    5b4e:	1e c0       	rjmp	.+60     	; 0x5b8c <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    5b50:	00 23       	and	r16, r16
    5b52:	19 f0       	breq	.+6      	; 0x5b5a <memcpy_to_eeprom_with_checksum+0x34>
    5b54:	21 e0       	ldi	r18, 0x01	; 1
    5b56:	30 e0       	ldi	r19, 0x00	; 0
    5b58:	08 c0       	rjmp	.+16     	; 0x5b6a <memcpy_to_eeprom_with_checksum+0x44>
    5b5a:	20 2f       	mov	r18, r16
    5b5c:	33 27       	eor	r19, r19
    5b5e:	27 fd       	sbrc	r18, 7
    5b60:	30 95       	com	r19
    5b62:	22 27       	eor	r18, r18
    5b64:	33 0f       	add	r19, r19
    5b66:	22 1f       	adc	r18, r18
    5b68:	33 27       	eor	r19, r19
    checksum += *source;
    5b6a:	f6 01       	movw	r30, r12
    5b6c:	61 91       	ld	r22, Z+
    5b6e:	6f 01       	movw	r12, r30
    5b70:	06 2f       	mov	r16, r22
    5b72:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    5b74:	9c 01       	movw	r18, r24
    5b76:	2f 5f       	subi	r18, 0xFF	; 255
    5b78:	3f 4f       	sbci	r19, 0xFF	; 255
    5b7a:	29 83       	std	Y+1, r18	; 0x01
    5b7c:	3a 83       	std	Y+2, r19	; 0x02
    5b7e:	0e 94 88 2d 	call	0x5b10	; 0x5b10 <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    5b82:	08 94       	sec
    5b84:	81 08       	sbc	r8, r1
    5b86:	91 08       	sbc	r9, r1
    5b88:	89 81       	ldd	r24, Y+1	; 0x01
    5b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    5b8c:	81 14       	cp	r8, r1
    5b8e:	91 04       	cpc	r9, r1
    5b90:	f9 f6       	brne	.-66     	; 0x5b50 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    5b92:	c7 01       	movw	r24, r14
    5b94:	8a 0d       	add	r24, r10
    5b96:	9b 1d       	adc	r25, r11
    5b98:	60 2f       	mov	r22, r16
    5b9a:	0e 94 88 2d 	call	0x5b10	; 0x5b10 <eeprom_put_char>
}
    5b9e:	0f 90       	pop	r0
    5ba0:	0f 90       	pop	r0
    5ba2:	cf 91       	pop	r28
    5ba4:	df 91       	pop	r29
    5ba6:	0f 91       	pop	r16
    5ba8:	ff 90       	pop	r15
    5baa:	ef 90       	pop	r14
    5bac:	df 90       	pop	r13
    5bae:	cf 90       	pop	r12
    5bb0:	bf 90       	pop	r11
    5bb2:	af 90       	pop	r10
    5bb4:	9f 90       	pop	r9
    5bb6:	8f 90       	pop	r8
    5bb8:	08 95       	ret

00005bba <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    5bba:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5bbc:	e0 ec       	ldi	r30, 0xC0	; 192
    5bbe:	f1 e0       	ldi	r31, 0x01	; 1
    5bc0:	80 91 cf 01 	lds	r24, 0x01CF
    5bc4:	87 fd       	sbrc	r24, 7
    5bc6:	fa cf       	rjmp	.-12     	; 0x5bbc <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5bc8:	83 e3       	ldi	r24, 0x33	; 51
    5bca:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    5bcc:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    5bd0:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5bd2:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5bd4:	64 83       	std	Z+4, r22	; 0x04
}
    5bd6:	08 95       	ret

00005bd8 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    5bd8:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5bda:	e0 ec       	ldi	r30, 0xC0	; 192
    5bdc:	f1 e0       	ldi	r31, 0x01	; 1
    5bde:	80 91 cf 01 	lds	r24, 0x01CF
    5be2:	87 fd       	sbrc	r24, 7
    5be4:	fa cf       	rjmp	.-12     	; 0x5bda <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5be6:	83 e3       	ldi	r24, 0x33	; 51
    5be8:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    5bea:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5bec:	12 82       	std	Z+2, r1	; 0x02
    5bee:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    5bf0:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    5bf4:	8d 91       	ld	r24, X+
    5bf6:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    5bf8:	9f 5f       	subi	r25, 0xFF	; 255
    5bfa:	90 32       	cpi	r25, 0x20	; 32
    5bfc:	c9 f7       	brne	.-14     	; 0x5bf0 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    5bfe:	08 95       	ret

00005c00 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    5c00:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5c02:	e0 ec       	ldi	r30, 0xC0	; 192
    5c04:	f1 e0       	ldi	r31, 0x01	; 1
    5c06:	80 91 cf 01 	lds	r24, 0x01CF
    5c0a:	87 fd       	sbrc	r24, 7
    5c0c:	fa cf       	rjmp	.-12     	; 0x5c02 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5c0e:	89 2f       	mov	r24, r25
    5c10:	90 e0       	ldi	r25, 0x00	; 0
    5c12:	a5 e0       	ldi	r26, 0x05	; 5
    5c14:	88 0f       	add	r24, r24
    5c16:	99 1f       	adc	r25, r25
    5c18:	aa 95       	dec	r26
    5c1a:	e1 f7       	brne	.-8      	; 0x5c14 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5c1c:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5c20:	89 2f       	mov	r24, r25
    5c22:	8f 71       	andi	r24, 0x1F	; 31
    5c24:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5c26:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5c28:	85 e3       	ldi	r24, 0x35	; 53
    5c2a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5c2c:	ef 93       	push	r30
    5c2e:	ff 93       	push	r31
    5c30:	0f 93       	push	r16
    5c32:	2f 93       	push	r18
    5c34:	eb ec       	ldi	r30, 0xCB	; 203
    5c36:	f1 e0       	ldi	r31, 0x01	; 1
    5c38:	08 ed       	ldi	r16, 0xD8	; 216
    5c3a:	21 e0       	ldi	r18, 0x01	; 1
    5c3c:	04 bf       	out	0x34, r16	; 52
    5c3e:	20 83       	st	Z, r18
    5c40:	2f 91       	pop	r18
    5c42:	0f 91       	pop	r16
    5c44:	ff 91       	pop	r31
    5c46:	ef 91       	pop	r30
}
    5c48:	08 95       	ret

00005c4a <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    5c4a:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5c4c:	e0 ec       	ldi	r30, 0xC0	; 192
    5c4e:	f1 e0       	ldi	r31, 0x01	; 1
    5c50:	80 91 cf 01 	lds	r24, 0x01CF
    5c54:	87 fd       	sbrc	r24, 7
    5c56:	fa cf       	rjmp	.-12     	; 0x5c4c <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5c58:	89 2f       	mov	r24, r25
    5c5a:	90 e0       	ldi	r25, 0x00	; 0
    5c5c:	b5 e0       	ldi	r27, 0x05	; 5
    5c5e:	88 0f       	add	r24, r24
    5c60:	99 1f       	adc	r25, r25
    5c62:	ba 95       	dec	r27
    5c64:	e1 f7       	brne	.-8      	; 0x5c5e <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5c66:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5c6a:	89 2f       	mov	r24, r25
    5c6c:	8f 71       	andi	r24, 0x1F	; 31
    5c6e:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5c70:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    5c72:	82 e3       	ldi	r24, 0x32	; 50
    5c74:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5c76:	ef 93       	push	r30
    5c78:	ff 93       	push	r31
    5c7a:	0f 93       	push	r16
    5c7c:	2f 93       	push	r18
    5c7e:	eb ec       	ldi	r30, 0xCB	; 203
    5c80:	f1 e0       	ldi	r31, 0x01	; 1
    5c82:	08 ed       	ldi	r16, 0xD8	; 216
    5c84:	21 e0       	ldi	r18, 0x01	; 1
    5c86:	04 bf       	out	0x34, r16	; 52
    5c88:	20 83       	st	Z, r18
    5c8a:	2f 91       	pop	r18
    5c8c:	0f 91       	pop	r16
    5c8e:	ff 91       	pop	r31
    5c90:	ef 91       	pop	r30
}
    5c92:	08 95       	ret

00005c94 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    5c94:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5c96:	e0 ec       	ldi	r30, 0xC0	; 192
    5c98:	f1 e0       	ldi	r31, 0x01	; 1
    5c9a:	80 91 cf 01 	lds	r24, 0x01CF
    5c9e:	87 fd       	sbrc	r24, 7
    5ca0:	fa cf       	rjmp	.-12     	; 0x5c96 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5ca2:	89 2f       	mov	r24, r25
    5ca4:	90 e0       	ldi	r25, 0x00	; 0
    5ca6:	25 e0       	ldi	r18, 0x05	; 5
    5ca8:	88 0f       	add	r24, r24
    5caa:	99 1f       	adc	r25, r25
    5cac:	2a 95       	dec	r18
    5cae:	e1 f7       	brne	.-8      	; 0x5ca8 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5cb0:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5cb4:	89 2f       	mov	r24, r25
    5cb6:	8f 71       	andi	r24, 0x1F	; 31
    5cb8:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5cba:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    5cbc:	84 e3       	ldi	r24, 0x34	; 52
    5cbe:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5cc0:	ef 93       	push	r30
    5cc2:	ff 93       	push	r31
    5cc4:	0f 93       	push	r16
    5cc6:	2f 93       	push	r18
    5cc8:	eb ec       	ldi	r30, 0xCB	; 203
    5cca:	f1 e0       	ldi	r31, 0x01	; 1
    5ccc:	08 ed       	ldi	r16, 0xD8	; 216
    5cce:	21 e0       	ldi	r18, 0x01	; 1
    5cd0:	04 bf       	out	0x34, r16	; 52
    5cd2:	20 83       	st	Z, r18
    5cd4:	2f 91       	pop	r18
    5cd6:	0f 91       	pop	r16
    5cd8:	ff 91       	pop	r31
    5cda:	ef 91       	pop	r30
}
    5cdc:	08 95       	ret

00005cde <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5cde:	80 91 cf 01 	lds	r24, 0x01CF
    5ce2:	87 fd       	sbrc	r24, 7
    5ce4:	fc cf       	rjmp	.-8      	; 0x5cde <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    5ce6:	80 e3       	ldi	r24, 0x30	; 48
    5ce8:	e0 ec       	ldi	r30, 0xC0	; 192
    5cea:	f1 e0       	ldi	r31, 0x01	; 1
    5cec:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5cee:	ef 93       	push	r30
    5cf0:	ff 93       	push	r31
    5cf2:	0f 93       	push	r16
    5cf4:	2f 93       	push	r18
    5cf6:	eb ec       	ldi	r30, 0xCB	; 203
    5cf8:	f1 e0       	ldi	r31, 0x01	; 1
    5cfa:	08 ed       	ldi	r16, 0xD8	; 216
    5cfc:	21 e0       	ldi	r18, 0x01	; 1
    5cfe:	04 bf       	out	0x34, r16	; 52
    5d00:	20 83       	st	Z, r18
    5d02:	2f 91       	pop	r18
    5d04:	0f 91       	pop	r16
    5d06:	ff 91       	pop	r31
    5d08:	ef 91       	pop	r30
}
    5d0a:	08 95       	ret

00005d0c <xio_pgm_init>:
 *
 *  Control parameters are defaulted and may be set using xio_pgm_control()
 */

void xio_pgm_init(const uint16_t control)
{
    5d0c:	9c 01       	movw	r18, r24
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;	// set flags to defaults & initial state
    5d0e:	85 e0       	ldi	r24, 0x05	; 5
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	80 93 ea 21 	sts	0x21EA, r24
    5d16:	90 93 eb 21 	sts	0x21EB, r25
	if (control & XIO_WR) {				// this is actually an error. Ignore for now.
    5d1a:	25 ff       	sbrs	r18, 5
    5d1c:	06 c0       	rjmp	.+12     	; 0x5d2a <xio_pgm_init+0x1e>
		fpgm.flags |= XIO_FLAG_WR_bm;
    5d1e:	87 e0       	ldi	r24, 0x07	; 7
    5d20:	90 e0       	ldi	r25, 0x00	; 0
    5d22:	80 93 ea 21 	sts	0x21EA, r24
    5d26:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOBLOCK) {		// this is also technically a config error.
    5d2a:	27 ff       	sbrs	r18, 7
    5d2c:	09 c0       	rjmp	.+18     	; 0x5d40 <xio_pgm_init+0x34>
		fpgm.flags &= ~XIO_FLAG_BLOCK_bm;
    5d2e:	80 91 ea 21 	lds	r24, 0x21EA
    5d32:	90 91 eb 21 	lds	r25, 0x21EB
    5d36:	8b 7f       	andi	r24, 0xFB	; 251
    5d38:	80 93 ea 21 	sts	0x21EA, r24
    5d3c:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_ECHO) {
    5d40:	30 ff       	sbrs	r19, 0
    5d42:	09 c0       	rjmp	.+18     	; 0x5d56 <xio_pgm_init+0x4a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5d44:	80 91 ea 21 	lds	r24, 0x21EA
    5d48:	90 91 eb 21 	lds	r25, 0x21EB
    5d4c:	80 61       	ori	r24, 0x10	; 16
    5d4e:	80 93 ea 21 	sts	0x21EA, r24
    5d52:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOECHO) {
    5d56:	31 ff       	sbrs	r19, 1
    5d58:	09 c0       	rjmp	.+18     	; 0x5d6c <xio_pgm_init+0x60>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5d5a:	80 91 ea 21 	lds	r24, 0x21EA
    5d5e:	90 91 eb 21 	lds	r25, 0x21EB
    5d62:	8f 7e       	andi	r24, 0xEF	; 239
    5d64:	80 93 ea 21 	sts	0x21EA, r24
    5d68:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_CRLF) {
    5d6c:	32 ff       	sbrs	r19, 2
    5d6e:	09 c0       	rjmp	.+18     	; 0x5d82 <xio_pgm_init+0x76>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5d70:	80 91 ea 21 	lds	r24, 0x21EA
    5d74:	90 91 eb 21 	lds	r25, 0x21EB
    5d78:	80 62       	ori	r24, 0x20	; 32
    5d7a:	80 93 ea 21 	sts	0x21EA, r24
    5d7e:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOCRLF) {
    5d82:	33 ff       	sbrs	r19, 3
    5d84:	09 c0       	rjmp	.+18     	; 0x5d98 <xio_pgm_init+0x8c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5d86:	80 91 ea 21 	lds	r24, 0x21EA
    5d8a:	90 91 eb 21 	lds	r25, 0x21EB
    5d8e:	8f 7d       	andi	r24, 0xDF	; 223
    5d90:	80 93 ea 21 	sts	0x21EA, r24
    5d94:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_LINEMODE) {
    5d98:	34 ff       	sbrs	r19, 4
    5d9a:	09 c0       	rjmp	.+18     	; 0x5dae <xio_pgm_init+0xa2>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5d9c:	80 91 ea 21 	lds	r24, 0x21EA
    5da0:	90 91 eb 21 	lds	r25, 0x21EB
    5da4:	80 64       	ori	r24, 0x40	; 64
    5da6:	80 93 ea 21 	sts	0x21EA, r24
    5daa:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOLINEMODE) {
    5dae:	35 ff       	sbrs	r19, 5
    5db0:	09 c0       	rjmp	.+18     	; 0x5dc4 <xio_pgm_init+0xb8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5db2:	80 91 ea 21 	lds	r24, 0x21EA
    5db6:	90 91 eb 21 	lds	r25, 0x21EB
    5dba:	8f 7b       	andi	r24, 0xBF	; 191
    5dbc:	80 93 ea 21 	sts	0x21EA, r24
    5dc0:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_SEMICOLONS) {
    5dc4:	36 ff       	sbrs	r19, 6
    5dc6:	09 c0       	rjmp	.+18     	; 0x5dda <xio_pgm_init+0xce>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5dc8:	80 91 ea 21 	lds	r24, 0x21EA
    5dcc:	90 91 eb 21 	lds	r25, 0x21EB
    5dd0:	80 68       	ori	r24, 0x80	; 128
    5dd2:	80 93 ea 21 	sts	0x21EA, r24
    5dd6:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5dda:	37 ff       	sbrs	r19, 7
    5ddc:	09 c0       	rjmp	.+18     	; 0x5df0 <xio_pgm_init+0xe4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5dde:	80 91 ea 21 	lds	r24, 0x21EA
    5de2:	90 91 eb 21 	lds	r25, 0x21EB
    5de6:	8f 77       	andi	r24, 0x7F	; 127
    5de8:	80 93 ea 21 	sts	0x21EA, r24
    5dec:	90 93 eb 21 	sts	0x21EB, r25
	}

	fpgm.idx = 0;
    5df0:	10 92 f8 21 	sts	0x21F8, r1
    5df4:	10 92 f9 21 	sts	0x21F9, r1
	fpgm.sig = 0;
    5df8:	10 92 ec 21 	sts	0x21EC, r1
	dev_pgm.udata = &(fpgm.sig); 	// bind signals register to pgm FILE struct
    5dfc:	8c ee       	ldi	r24, 0xEC	; 236
    5dfe:	91 e2       	ldi	r25, 0x21	; 33
    5e00:	80 93 1d 20 	sts	0x201D, r24
    5e04:	90 93 1e 20 	sts	0x201E, r25
	fpgm.len = sizeof(fpgm.buf);
    5e08:	82 e0       	ldi	r24, 0x02	; 2
    5e0a:	80 93 ef 21 	sts	0x21EF, r24

	fpgm.sig_func = &xio_null_signal;			// bind null signal handler
    5e0e:	86 e2       	ldi	r24, 0x26	; 38
    5e10:	98 e2       	ldi	r25, 0x28	; 40
    5e12:	80 93 f0 21 	sts	0x21F0, r24
    5e16:	90 93 f1 21 	sts	0x21F1, r25
	fpgm.line_func = &xio_null_line;			// bind null line handler
    5e1a:	89 e2       	ldi	r24, 0x29	; 41
    5e1c:	98 e2       	ldi	r25, 0x28	; 40
    5e1e:	80 93 f2 21 	sts	0x21F2, r24
    5e22:	90 93 f3 21 	sts	0x21F3, r25
}
    5e26:	08 95       	ret

00005e28 <xio_pgm_open>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

FILE * xio_pgm_open(const prog_char *addr)
{
	fpgm.flags &= XIO_FLAG_RESET_gm;			// reset the signaling bits
    5e28:	20 91 ea 21 	lds	r18, 0x21EA
    5e2c:	30 91 eb 21 	lds	r19, 0x21EB
    5e30:	3f 70       	andi	r19, 0x0F	; 15
    5e32:	20 93 ea 21 	sts	0x21EA, r18
    5e36:	30 93 eb 21 	sts	0x21EB, r19
	fpgm.pgmbase_P = (PROGMEM char *)addr;		// might want to range check this
    5e3a:	80 93 f6 21 	sts	0x21F6, r24
    5e3e:	90 93 f7 21 	sts	0x21F7, r25
	fpgm.idx = 0;
    5e42:	10 92 f8 21 	sts	0x21F8, r1
    5e46:	10 92 f9 21 	sts	0x21F9, r1
	return(&dev_pgm);
}
    5e4a:	81 e1       	ldi	r24, 0x11	; 17
    5e4c:	90 e2       	ldi	r25, 0x20	; 32
    5e4e:	08 95       	ret

00005e50 <xio_pgm_control>:
 *	XIO_SEMICOLONS <null>		Treat semicolons as line breaks
 *	XIO_NOSEMICOLONS <null>	Y	Don't treat semicolons as line breaks
 */

int8_t xio_pgm_control(const uint16_t control, const int16_t arg)
{
    5e50:	9c 01       	movw	r18, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    5e52:	84 ff       	sbrs	r24, 4
    5e54:	05 c0       	rjmp	.+10     	; 0x5e60 <xio_pgm_control+0x10>
		fpgm.sig_func = (fptr_int_uint8)arg;
    5e56:	60 93 f0 21 	sts	0x21F0, r22
    5e5a:	70 93 f1 21 	sts	0x21F1, r23
    5e5e:	62 c0       	rjmp	.+196    	; 0x5f24 <xio_pgm_control+0xd4>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    5e60:	85 ff       	sbrs	r24, 5
    5e62:	05 c0       	rjmp	.+10     	; 0x5e6e <xio_pgm_control+0x1e>
		fpgm.line_func = (fptr_int_char_p)arg;
    5e64:	60 93 f2 21 	sts	0x21F2, r22
    5e68:	70 93 f3 21 	sts	0x21F3, r23
    5e6c:	5b c0       	rjmp	.+182    	; 0x5f24 <xio_pgm_control+0xd4>
		return (0);
	}
	// transfer control flags to internal flag bits
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;		// set flags to defaults & initial state
    5e6e:	85 e0       	ldi	r24, 0x05	; 5
    5e70:	90 e0       	ldi	r25, 0x00	; 0
    5e72:	80 93 ea 21 	sts	0x21EA, r24
    5e76:	90 93 eb 21 	sts	0x21EB, r25
	if (control & XIO_ECHO) {
    5e7a:	30 ff       	sbrs	r19, 0
    5e7c:	06 c0       	rjmp	.+12     	; 0x5e8a <xio_pgm_control+0x3a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5e7e:	85 e1       	ldi	r24, 0x15	; 21
    5e80:	90 e0       	ldi	r25, 0x00	; 0
    5e82:	80 93 ea 21 	sts	0x21EA, r24
    5e86:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOECHO) {
    5e8a:	31 ff       	sbrs	r19, 1
    5e8c:	09 c0       	rjmp	.+18     	; 0x5ea0 <xio_pgm_control+0x50>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5e8e:	80 91 ea 21 	lds	r24, 0x21EA
    5e92:	90 91 eb 21 	lds	r25, 0x21EB
    5e96:	8f 7e       	andi	r24, 0xEF	; 239
    5e98:	80 93 ea 21 	sts	0x21EA, r24
    5e9c:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_CRLF) {
    5ea0:	32 ff       	sbrs	r19, 2
    5ea2:	09 c0       	rjmp	.+18     	; 0x5eb6 <xio_pgm_control+0x66>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5ea4:	80 91 ea 21 	lds	r24, 0x21EA
    5ea8:	90 91 eb 21 	lds	r25, 0x21EB
    5eac:	80 62       	ori	r24, 0x20	; 32
    5eae:	80 93 ea 21 	sts	0x21EA, r24
    5eb2:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOCRLF) {
    5eb6:	33 ff       	sbrs	r19, 3
    5eb8:	09 c0       	rjmp	.+18     	; 0x5ecc <xio_pgm_control+0x7c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5eba:	80 91 ea 21 	lds	r24, 0x21EA
    5ebe:	90 91 eb 21 	lds	r25, 0x21EB
    5ec2:	8f 7d       	andi	r24, 0xDF	; 223
    5ec4:	80 93 ea 21 	sts	0x21EA, r24
    5ec8:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_LINEMODE) {
    5ecc:	34 ff       	sbrs	r19, 4
    5ece:	09 c0       	rjmp	.+18     	; 0x5ee2 <xio_pgm_control+0x92>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5ed0:	80 91 ea 21 	lds	r24, 0x21EA
    5ed4:	90 91 eb 21 	lds	r25, 0x21EB
    5ed8:	80 64       	ori	r24, 0x40	; 64
    5eda:	80 93 ea 21 	sts	0x21EA, r24
    5ede:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOLINEMODE) {
    5ee2:	35 ff       	sbrs	r19, 5
    5ee4:	09 c0       	rjmp	.+18     	; 0x5ef8 <xio_pgm_control+0xa8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5ee6:	80 91 ea 21 	lds	r24, 0x21EA
    5eea:	90 91 eb 21 	lds	r25, 0x21EB
    5eee:	8f 7b       	andi	r24, 0xBF	; 191
    5ef0:	80 93 ea 21 	sts	0x21EA, r24
    5ef4:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_SEMICOLONS) {
    5ef8:	36 ff       	sbrs	r19, 6
    5efa:	09 c0       	rjmp	.+18     	; 0x5f0e <xio_pgm_control+0xbe>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5efc:	80 91 ea 21 	lds	r24, 0x21EA
    5f00:	90 91 eb 21 	lds	r25, 0x21EB
    5f04:	80 68       	ori	r24, 0x80	; 128
    5f06:	80 93 ea 21 	sts	0x21EA, r24
    5f0a:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5f0e:	37 ff       	sbrs	r19, 7
    5f10:	09 c0       	rjmp	.+18     	; 0x5f24 <xio_pgm_control+0xd4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5f12:	80 91 ea 21 	lds	r24, 0x21EA
    5f16:	90 91 eb 21 	lds	r25, 0x21EB
    5f1a:	8f 77       	andi	r24, 0x7F	; 127
    5f1c:	80 93 ea 21 	sts	0x21EA, r24
    5f20:	90 93 eb 21 	sts	0x21EB, r25
	}
	return (0);
}
    5f24:	80 e0       	ldi	r24, 0x00	; 0
    5f26:	08 95       	ret

00005f28 <xio_pgm_putc>:
 */

int xio_pgm_putc(const char c, FILE *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    5f28:	8f ef       	ldi	r24, 0xFF	; 255
    5f2a:	9f ef       	ldi	r25, 0xFF	; 255
    5f2c:	08 95       	ret

00005f2e <xio_pgm_readln>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_pgm_readln(char *buf, uint8_t len)
{
    5f2e:	9c 01       	movw	r18, r24
	if (!(fpgm.pgmbase_P)) {					// return OK if no file is open
    5f30:	80 91 f6 21 	lds	r24, 0x21F6
    5f34:	90 91 f7 21 	lds	r25, 0x21F7
    5f38:	89 2b       	or	r24, r25
    5f3a:	a9 f0       	breq	.+42     	; 0x5f66 <xio_pgm_readln+0x38>
		return (TG_OK);					 
	}
	fpgm.sig = XIO_SIG_OK;						// initialize signal
    5f3c:	10 92 ec 21 	sts	0x21EC, r1
	if (fgets(buf, len, &dev_pgm) == NULL) {
    5f40:	c9 01       	movw	r24, r18
    5f42:	70 e0       	ldi	r23, 0x00	; 0
    5f44:	41 e1       	ldi	r20, 0x11	; 17
    5f46:	50 e2       	ldi	r21, 0x20	; 32
    5f48:	0e 94 23 4b 	call	0x9646	; 0x9646 <fgets>
    5f4c:	89 2b       	or	r24, r25
    5f4e:	59 f4       	brne	.+22     	; 0x5f66 <xio_pgm_readln+0x38>
		fpgm.pgmbase_P = NULL;
    5f50:	10 92 f6 21 	sts	0x21F6, r1
    5f54:	10 92 f7 21 	sts	0x21F7, r1
		clearerr(&dev_pgm);
    5f58:	81 e1       	ldi	r24, 0x11	; 17
    5f5a:	90 e2       	ldi	r25, 0x20	; 32
    5f5c:	0e 94 1e 4b 	call	0x963c	; 0x963c <clearerr>
    5f60:	24 e0       	ldi	r18, 0x04	; 4
    5f62:	30 e0       	ldi	r19, 0x00	; 0
    5f64:	02 c0       	rjmp	.+4      	; 0x5f6a <xio_pgm_readln+0x3c>
		return (TG_EOF);
    5f66:	20 e0       	ldi	r18, 0x00	; 0
    5f68:	30 e0       	ldi	r19, 0x00	; 0
//	return (fpgm.status);

	// return directly without dispatch through line function callback
//	fpgm.status = ((int)fpgm.line_func(buf));	// call line handler function
	return (TG_OK);
}
    5f6a:	c9 01       	movw	r24, r18
    5f6c:	08 95       	ret

00005f6e <xio_pgm_getc>:
 *		- Note: putc should expand newlines to <cr><lf>
 */

int xio_pgm_getc(FILE *stream)
{
	if (fpgm.flags & XIO_FLAG_EOF_bm) {
    5f6e:	40 91 ea 21 	lds	r20, 0x21EA
    5f72:	50 91 eb 21 	lds	r21, 0x21EB
    5f76:	55 ff       	sbrs	r21, 5
    5f78:	06 c0       	rjmp	.+12     	; 0x5f86 <xio_pgm_getc+0x18>
		fpgm.sig = XIO_SIG_EOF;
    5f7a:	82 e0       	ldi	r24, 0x02	; 2
    5f7c:	80 93 ec 21 	sts	0x21EC, r24
    5f80:	2e ef       	ldi	r18, 0xFE	; 254
    5f82:	3f ef       	ldi	r19, 0xFF	; 255
    5f84:	3f c0       	rjmp	.+126    	; 0x6004 <__stack+0x5>
		return (_FDEV_EOF);
	}
	if ((fpgm.c = pgm_read_byte(&fpgm.pgmbase_P[fpgm.idx])) == NUL) {
    5f86:	20 91 f8 21 	lds	r18, 0x21F8
    5f8a:	30 91 f9 21 	lds	r19, 0x21F9
    5f8e:	e0 91 f6 21 	lds	r30, 0x21F6
    5f92:	f0 91 f7 21 	lds	r31, 0x21F7
    5f96:	e2 0f       	add	r30, r18
    5f98:	f3 1f       	adc	r31, r19
    5f9a:	84 91       	lpm	r24, Z+
    5f9c:	80 93 ed 21 	sts	0x21ED, r24
    5fa0:	88 23       	and	r24, r24
    5fa2:	29 f4       	brne	.+10     	; 0x5fae <xio_pgm_getc+0x40>
		fpgm.flags |= XIO_FLAG_EOF_bm;
    5fa4:	50 62       	ori	r21, 0x20	; 32
    5fa6:	40 93 ea 21 	sts	0x21EA, r20
    5faa:	50 93 eb 21 	sts	0x21EB, r21
	}
	++fpgm.idx;
    5fae:	2f 5f       	subi	r18, 0xFF	; 255
    5fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    5fb2:	20 93 f8 21 	sts	0x21F8, r18
    5fb6:	30 93 f9 21 	sts	0x21F9, r19
	if (!LINEMODE(fpgm.flags)) {		// processing is simple if not LINEMODE
    5fba:	90 91 ea 21 	lds	r25, 0x21EA
    5fbe:	96 fd       	sbrc	r25, 6
    5fc0:	07 c0       	rjmp	.+14     	; 0x5fd0 <xio_pgm_getc+0x62>
		if (ECHO(fpgm.flags)) {
    5fc2:	94 ff       	sbrs	r25, 4
    5fc4:	1b c0       	rjmp	.+54     	; 0x5ffc <xio_pgm_getc+0x8e>
			putchar(fpgm.c);
    5fc6:	60 91 69 25 	lds	r22, 0x2569
    5fca:	70 91 6a 25 	lds	r23, 0x256A
    5fce:	13 c0       	rjmp	.+38     	; 0x5ff6 <xio_pgm_getc+0x88>
		}
		return (fpgm.c);
	}
	// now do the LINEMODE stuff
	if (fpgm.c == NUL) {				// perform newline substitutions
    5fd0:	88 23       	and	r24, r24
    5fd2:	31 f0       	breq	.+12     	; 0x5fe0 <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if (fpgm.c == '\r') {
    5fd4:	8d 30       	cpi	r24, 0x0D	; 13
    5fd6:	21 f0       	breq	.+8      	; 0x5fe0 <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if ((SEMICOLONS(fpgm.flags)) && (fpgm.c == ';')) {
    5fd8:	97 ff       	sbrs	r25, 7
    5fda:	05 c0       	rjmp	.+10     	; 0x5fe6 <xio_pgm_getc+0x78>
    5fdc:	8b 33       	cpi	r24, 0x3B	; 59
    5fde:	19 f4       	brne	.+6      	; 0x5fe6 <xio_pgm_getc+0x78>
		fpgm.c = '\n';
    5fe0:	8a e0       	ldi	r24, 0x0A	; 10
    5fe2:	80 93 ed 21 	sts	0x21ED, r24
	}
	if (ECHO(fpgm.flags)) {
    5fe6:	94 ff       	sbrs	r25, 4
    5fe8:	09 c0       	rjmp	.+18     	; 0x5ffc <xio_pgm_getc+0x8e>
		putchar(fpgm.c);
    5fea:	60 91 69 25 	lds	r22, 0x2569
    5fee:	70 91 6a 25 	lds	r23, 0x256A
    5ff2:	80 91 ed 21 	lds	r24, 0x21ED
    5ff6:	90 e0       	ldi	r25, 0x00	; 0
    5ff8:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
	}
	return (fpgm.c);
    5ffc:	80 91 ed 21 	lds	r24, 0x21ED
    6000:	28 2f       	mov	r18, r24
    6002:	30 e0       	ldi	r19, 0x00	; 0
}
    6004:	c9 01       	movw	r24, r18
    6006:	08 95       	ret

00006008 <_tg_set_source>:
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.source = d;									// d = XIO device #. See xio.h
    6008:	80 93 fe 21 	sts	0x21FE, r24
	tg.prompts = TRUE;
    600c:	61 e0       	ldi	r22, 0x01	; 1
    600e:	60 93 00 22 	sts	0x2200, r22

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    6012:	42 e0       	ldi	r20, 0x02	; 2
    6014:	40 93 56 22 	sts	0x2256, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    6018:	21 e6       	ldi	r18, 0x61	; 97
    601a:	30 e3       	ldi	r19, 0x30	; 48
    601c:	20 93 58 22 	sts	0x2258, r18
    6020:	30 93 59 22 	sts	0x2259, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    6024:	90 e5       	ldi	r25, 0x50	; 80
    6026:	90 93 57 22 	sts	0x2257, r25
	tg.source = d;									// d = XIO device #. See xio.h
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    602a:	40 93 aa 22 	sts	0x22AA, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    602e:	20 93 ac 22 	sts	0x22AC, r18
    6032:	30 93 ad 22 	sts	0x22AD, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    6036:	90 93 ab 22 	sts	0x22AB, r25
	tg.source = d;									// d = XIO device #. See xio.h
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    603a:	40 93 fe 22 	sts	0x22FE, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    603e:	20 93 00 23 	sts	0x2300, r18
    6042:	30 93 01 23 	sts	0x2301, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    6046:	90 93 ff 22 	sts	0x22FF, r25
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
		tg.dev[i].poll_func = &_tg_poll_signal;
    604a:	20 93 54 23 	sts	0x2354, r18
    604e:	30 93 55 23 	sts	0x2355, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    6052:	90 93 53 23 	sts	0x2353, r25
	}
	tg.dev[XIO_DEV_PGM].state = TG_SRC_INACTIVE;	// program memory is an exception
    6056:	10 92 52 23 	sts	0x2352, r1

	// make selected device active
	tg.dev[d].state = TG_SRC_ACTIVE;	
    605a:	48 2f       	mov	r20, r24
    605c:	50 e0       	ldi	r21, 0x00	; 0
    605e:	24 e5       	ldi	r18, 0x54	; 84
    6060:	30 e0       	ldi	r19, 0x00	; 0
    6062:	42 9f       	mul	r20, r18
    6064:	f0 01       	movw	r30, r0
    6066:	43 9f       	mul	r20, r19
    6068:	f0 0d       	add	r31, r0
    606a:	52 9f       	mul	r21, r18
    606c:	f0 0d       	add	r31, r0
    606e:	11 24       	eor	r1, r1
    6070:	e5 50       	subi	r30, 0x05	; 5
    6072:	fe 4d       	sbci	r31, 0xDE	; 222
    6074:	67 83       	std	Z+7, r22	; 0x07
	tg.dev[d].poll_func = &_tg_poll_active;
    6076:	2a e2       	ldi	r18, 0x2A	; 42
    6078:	30 e0       	ldi	r19, 0x00	; 0
    607a:	42 9f       	mul	r20, r18
    607c:	f0 01       	movw	r30, r0
    607e:	43 9f       	mul	r20, r19
    6080:	f0 0d       	add	r31, r0
    6082:	52 9f       	mul	r21, r18
    6084:	f0 0d       	add	r31, r0
    6086:	11 24       	eor	r1, r1
    6088:	ee 0f       	add	r30, r30
    608a:	ff 1f       	adc	r31, r31
    608c:	e3 50       	subi	r30, 0x03	; 3
    608e:	fe 4d       	sbci	r31, 0xDE	; 222
    6090:	2b e3       	ldi	r18, 0x3B	; 59
    6092:	31 e3       	ldi	r19, 0x31	; 49
    6094:	27 83       	std	Z+7, r18	; 0x07
    6096:	30 87       	std	Z+8, r19	; 0x08
	if (d == XIO_DEV_PGM) {
    6098:	84 30       	cpi	r24, 0x04	; 4
    609a:	11 f4       	brne	.+4      	; 0x60a0 <_tg_set_source+0x98>
		tg.prompts = FALSE;							// no prompts for file input
    609c:	10 92 00 22 	sts	0x2200, r1
    60a0:	08 95       	ret

000060a2 <tg_pause>:
}

void tg_pause()
{
	return;
}
    60a2:	08 95       	ret

000060a4 <tg_resume>:

void tg_resume()
{
	return;
}
    60a4:	08 95       	ret

000060a6 <tg_kill>:
	return (0);
}

void tg_kill()
{
	_tg_set_source(tg.source_default);	// return control to standard device
    60a6:	80 91 ff 21 	lds	r24, 0x21FF
    60aa:	0e 94 04 30 	call	0x6008	; 0x6008 <_tg_set_source>
	mc_motion_stop();					// stop computing and generating motions
    60ae:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    60b2:	0e 94 5e 32 	call	0x64bc	; 0x64bc <mv_flush>
	st_stop_steppers();					// stop the steppers
    60b6:	0e 94 14 25 	call	0x4a28	; 0x4a28 <st_stop_steppers>
	return;
}
    60ba:	08 95       	ret

000060bc <tg_terminate>:

void tg_terminate()
{
	tg_kill();
    60bc:	0e 94 53 30 	call	0x60a6	; 0x60a6 <tg_kill>
	return;
}
    60c0:	08 95       	ret

000060c2 <_tg_poll_signal>:
 *	If a signal is received it's dispatched from the low-level line reader
 *	Any line that's read is ignored (tossed)
 */

static void _tg_poll_signal(uint8_t d)
{
    60c2:	48 2f       	mov	r20, r24
	if (tg.dev[d].state != TG_SRC_SIGNAL) {			// sanity check
    60c4:	28 2f       	mov	r18, r24
    60c6:	30 e0       	ldi	r19, 0x00	; 0
    60c8:	84 e5       	ldi	r24, 0x54	; 84
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	28 9f       	mul	r18, r24
    60ce:	f0 01       	movw	r30, r0
    60d0:	29 9f       	mul	r18, r25
    60d2:	f0 0d       	add	r31, r0
    60d4:	38 9f       	mul	r19, r24
    60d6:	f0 0d       	add	r31, r0
    60d8:	11 24       	eor	r1, r1
    60da:	e5 50       	subi	r30, 0x05	; 5
    60dc:	fe 4d       	sbci	r31, 0xDE	; 222
    60de:	87 81       	ldd	r24, Z+7	; 0x07
    60e0:	82 30       	cpi	r24, 0x02	; 2
    60e2:	a9 f4       	brne	.+42     	; 0x610e <_tg_poll_signal+0x4c>
		return;
	}
	tg.status = xio_fget_ln(d, tg.dev[d].buf, tg.dev[d].len);
    60e4:	85 e1       	ldi	r24, 0x15	; 21
    60e6:	90 e0       	ldi	r25, 0x00	; 0
    60e8:	28 9f       	mul	r18, r24
    60ea:	b0 01       	movw	r22, r0
    60ec:	29 9f       	mul	r18, r25
    60ee:	70 0d       	add	r23, r0
    60f0:	38 9f       	mul	r19, r24
    60f2:	70 0d       	add	r23, r0
    60f4:	11 24       	eor	r1, r1
    60f6:	66 0f       	add	r22, r22
    60f8:	77 1f       	adc	r23, r23
    60fa:	66 0f       	add	r22, r22
    60fc:	77 1f       	adc	r23, r23
    60fe:	6a 5f       	subi	r22, 0xFA	; 250
    6100:	7d 4d       	sbci	r23, 0xDD	; 221
    6102:	84 2f       	mov	r24, r20
    6104:	40 85       	ldd	r20, Z+8	; 0x08
    6106:	0e 94 2c 28 	call	0x5058	; 0x5058 <xio_fget_ln>
    610a:	80 93 fc 21 	sts	0x21FC, r24
    610e:	08 95       	ret

00006110 <_tg_prompt>:
	tgModeStringDirect
};

void _tg_prompt()
{
	if ((tg.prompts) && (tg.state == TG_STATE_READY_UNPROMPTED)) {
    6110:	80 91 00 22 	lds	r24, 0x2200
    6114:	88 23       	and	r24, r24
    6116:	09 f1       	breq	.+66     	; 0x615a <_tg_prompt+0x4a>
    6118:	80 91 fb 21 	lds	r24, 0x21FB
    611c:	88 23       	and	r24, r24
    611e:	e9 f4       	brne	.+58     	; 0x615a <_tg_prompt+0x4a>
		printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    6120:	80 91 fd 21 	lds	r24, 0x21FD
    6124:	e8 2f       	mov	r30, r24
    6126:	f0 e0       	ldi	r31, 0x00	; 0
    6128:	ee 0f       	add	r30, r30
    612a:	ff 1f       	adc	r31, r31
    612c:	e0 55       	subi	r30, 0x50	; 80
    612e:	f4 4e       	sbci	r31, 0xE4	; 228
    6130:	25 91       	lpm	r18, Z+
    6132:	34 91       	lpm	r19, Z+
    6134:	00 d0       	rcall	.+0      	; 0x6136 <_tg_prompt+0x26>
    6136:	0f 92       	push	r0
    6138:	86 ef       	ldi	r24, 0xF6	; 246
    613a:	9b e1       	ldi	r25, 0x1B	; 27
    613c:	ed b7       	in	r30, 0x3d	; 61
    613e:	fe b7       	in	r31, 0x3e	; 62
    6140:	81 83       	std	Z+1, r24	; 0x01
    6142:	92 83       	std	Z+2, r25	; 0x02
    6144:	23 83       	std	Z+3, r18	; 0x03
    6146:	34 83       	std	Z+4, r19	; 0x04
    6148:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
		tg.state = TG_STATE_READY_PROMPTED;
    614c:	81 e0       	ldi	r24, 0x01	; 1
    614e:	80 93 fb 21 	sts	0x21FB, r24
    6152:	0f 90       	pop	r0
    6154:	0f 90       	pop	r0
    6156:	0f 90       	pop	r0
    6158:	0f 90       	pop	r0
	}
	// bastardized prompts for file sources (no asterisk returned)
	if ((!tg.prompts) && (tg.state == TG_STATE_READY_UNPROMPTED)) {
    615a:	80 91 00 22 	lds	r24, 0x2200
    615e:	88 23       	and	r24, r24
    6160:	f1 f4       	brne	.+60     	; 0x619e <_tg_prompt+0x8e>
    6162:	80 91 fb 21 	lds	r24, 0x21FB
    6166:	88 23       	and	r24, r24
    6168:	d1 f4       	brne	.+52     	; 0x619e <_tg_prompt+0x8e>
		printf_P(PSTR("TinyG [%S]> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    616a:	80 91 fd 21 	lds	r24, 0x21FD
    616e:	e8 2f       	mov	r30, r24
    6170:	f0 e0       	ldi	r31, 0x00	; 0
    6172:	ee 0f       	add	r30, r30
    6174:	ff 1f       	adc	r31, r31
    6176:	e0 55       	subi	r30, 0x50	; 80
    6178:	f4 4e       	sbci	r31, 0xE4	; 228
    617a:	25 91       	lpm	r18, Z+
    617c:	34 91       	lpm	r19, Z+
    617e:	00 d0       	rcall	.+0      	; 0x6180 <_tg_prompt+0x70>
    6180:	0f 92       	push	r0
    6182:	89 ee       	ldi	r24, 0xE9	; 233
    6184:	9b e1       	ldi	r25, 0x1B	; 27
    6186:	ed b7       	in	r30, 0x3d	; 61
    6188:	fe b7       	in	r31, 0x3e	; 62
    618a:	81 83       	std	Z+1, r24	; 0x01
    618c:	92 83       	std	Z+2, r25	; 0x02
    618e:	23 83       	std	Z+3, r18	; 0x03
    6190:	34 83       	std	Z+4, r19	; 0x04
    6192:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
    6196:	0f 90       	pop	r0
    6198:	0f 90       	pop	r0
    619a:	0f 90       	pop	r0
    619c:	0f 90       	pop	r0
    619e:	08 95       	ret

000061a0 <tg_signal>:
 * tg_signal() - default signal handler to bind to the line readers
 */

int tg_signal(uint8_t sig)
{
	switch (sig) {
    61a0:	84 30       	cpi	r24, 0x04	; 4
    61a2:	99 f0       	breq	.+38     	; 0x61ca <tg_signal+0x2a>
    61a4:	85 30       	cpi	r24, 0x05	; 5
    61a6:	89 f0       	breq	.+34     	; 0x61ca <tg_signal+0x2a>
    61a8:	82 30       	cpi	r24, 0x02	; 2
    61aa:	89 f4       	brne	.+34     	; 0x61ce <tg_signal+0x2e>
		case XIO_SIG_OK: break;
 		case XIO_SIG_EOL: break;

		case XIO_SIG_EOF:
			printf_P(PSTR("\r\nEnd of file encountered\r\n"));
    61ac:	0f 92       	push	r0
    61ae:	0f 92       	push	r0
    61b0:	8d ec       	ldi	r24, 0xCD	; 205
    61b2:	9b e1       	ldi	r25, 0x1B	; 27
    61b4:	ed b7       	in	r30, 0x3d	; 61
    61b6:	fe b7       	in	r31, 0x3e	; 62
    61b8:	81 83       	std	Z+1, r24	; 0x01
    61ba:	92 83       	std	Z+2, r25	; 0x02
    61bc:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
			_tg_prompt();
    61c0:	0f 90       	pop	r0
    61c2:	0f 90       	pop	r0
    61c4:	0e 94 88 30 	call	0x6110	; 0x6110 <_tg_prompt>
    61c8:	02 c0       	rjmp	.+4      	; 0x61ce <tg_signal+0x2e>
	return;
}

void tg_terminate()
{
	tg_kill();
    61ca:	0e 94 53 30 	call	0x60a6	; 0x60a6 <tg_kill>
		case XIO_SIG_SHIFTOUT: break;
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
}
    61ce:	80 e0       	ldi	r24, 0x00	; 0
    61d0:	90 e0       	ldi	r25, 0x00	; 0
    61d2:	08 95       	ret

000061d4 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    61d4:	fc 01       	movw	r30, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    61d6:	80 91 fd 21 	lds	r24, 0x21FD
    61da:	88 23       	and	r24, r24
    61dc:	79 f5       	brne	.+94     	; 0x623c <tg_parser+0x68>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    61de:	90 81       	ld	r25, Z
    61e0:	89 2f       	mov	r24, r25
    61e2:	81 56       	subi	r24, 0x61	; 97
    61e4:	8a 31       	cpi	r24, 0x1A	; 26
    61e6:	10 f4       	brcc	.+4      	; 0x61ec <tg_parser+0x18>
			buf[0] = buf[0]-'a'+'A';
    61e8:	90 52       	subi	r25, 0x20	; 32
    61ea:	90 83       	st	Z, r25
		}
		switch (buf[0]) {
    61ec:	80 81       	ld	r24, Z
    61ee:	86 34       	cpi	r24, 0x46	; 70
    61f0:	b1 f0       	breq	.+44     	; 0x621e <tg_parser+0x4a>
    61f2:	87 34       	cpi	r24, 0x47	; 71
    61f4:	38 f4       	brcc	.+14     	; 0x6204 <tg_parser+0x30>
    61f6:	83 34       	cpi	r24, 0x43	; 67
    61f8:	61 f0       	breq	.+24     	; 0x6212 <tg_parser+0x3e>
    61fa:	84 34       	cpi	r24, 0x44	; 68
    61fc:	71 f0       	breq	.+28     	; 0x621a <tg_parser+0x46>
    61fe:	8f 33       	cpi	r24, 0x3F	; 63
    6200:	d9 f4       	brne	.+54     	; 0x6238 <tg_parser+0x64>
    6202:	07 c0       	rjmp	.+14     	; 0x6212 <tg_parser+0x3e>
    6204:	87 34       	cpi	r24, 0x47	; 71
    6206:	19 f0       	breq	.+6      	; 0x620e <tg_parser+0x3a>
    6208:	8d 54       	subi	r24, 0x4D	; 77
    620a:	82 30       	cpi	r24, 0x02	; 2
    620c:	a8 f4       	brcc	.+42     	; 0x6238 <tg_parser+0x64>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    620e:	82 e0       	ldi	r24, 0x02	; 2
    6210:	01 c0       	rjmp	.+2      	; 0x6214 <tg_parser+0x40>
	if (tg.mode == TG_CONTROL_MODE) {
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
			buf[0] = buf[0]-'a'+'A';
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    6212:	81 e0       	ldi	r24, 0x01	; 1
    6214:	80 93 fd 21 	sts	0x21FD, r24
    6218:	11 c0       	rjmp	.+34     	; 0x623c <tg_parser+0x68>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    621a:	83 e0       	ldi	r24, 0x03	; 3
    621c:	fb cf       	rjmp	.-10     	; 0x6214 <tg_parser+0x40>
//	xio_pgm_open(PGMFILE(&circle_test10));
//	xio_pgm_open(PGMFILE(&square_circle_test10));
//	xio_pgm_open(PGMFILE(&square_circle_test100));
//	xio_pgm_open(PGMFILE(&spiral_test50a));
//	xio_pgm_open(PGMFILE(&spiral_test5));
	xio_pgm_open(PGMFILE(&dwell_test2));
    621e:	82 ea       	ldi	r24, 0xA2	; 162
    6220:	9c e0       	ldi	r25, 0x0C	; 12
    6222:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <xio_pgm_open>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    6226:	82 e0       	ldi	r24, 0x02	; 2
    6228:	80 93 fd 21 	sts	0x21FD, r24
//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
//	xio_pgm_open(PGMFILE(&zoetrope));

	// set mode and source for file mode
	_tg_set_mode(TG_GCODE_MODE);
	_tg_set_source(XIO_DEV_PGM);
    622c:	84 e0       	ldi	r24, 0x04	; 4
    622e:	0e 94 04 30 	call	0x6008	; 0x6008 <_tg_set_source>
    6232:	20 e0       	ldi	r18, 0x00	; 0
    6234:	30 e0       	ldi	r19, 0x00	; 0
    6236:	1d c0       	rjmp	.+58     	; 0x6272 <tg_parser+0x9e>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    6238:	10 92 fd 21 	sts	0x21FD, r1
			case 'F': return (_tg_test_file());
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    623c:	10 92 fc 21 	sts	0x21FC, r1
	switch (tg.mode) {
    6240:	80 91 fd 21 	lds	r24, 0x21FD
    6244:	82 30       	cpi	r24, 0x02	; 2
    6246:	41 f0       	breq	.+16     	; 0x6258 <tg_parser+0x84>
    6248:	83 30       	cpi	r24, 0x03	; 3
    624a:	51 f0       	breq	.+20     	; 0x6260 <tg_parser+0x8c>
    624c:	81 30       	cpi	r24, 0x01	; 1
    624e:	69 f4       	brne	.+26     	; 0x626a <tg_parser+0x96>
//		case TG_CONTROL_MODE: 
//			break;

		case TG_CONFIG_MODE:
			tg.status = cfg_parse(buf);
    6250:	cf 01       	movw	r24, r30
    6252:	0e 94 96 19 	call	0x332c	; 0x332c <cfg_parse>
    6256:	07 c0       	rjmp	.+14     	; 0x6266 <tg_parser+0x92>
			break;

		case TG_GCODE_MODE: 
			tg.status = gc_gcode_parser(buf);
    6258:	cf 01       	movw	r24, r30
    625a:	0e 94 33 16 	call	0x2c66	; 0x2c66 <gc_gcode_parser>
    625e:	03 c0       	rjmp	.+6      	; 0x6266 <tg_parser+0x92>
			break;

		case TG_DIRECT_DRIVE_MODE:
			tg.status = dd_parser(buf);
    6260:	cf 01       	movw	r24, r30
    6262:	0e 94 13 32 	call	0x6426	; 0x6426 <dd_parser>
    6266:	80 93 fc 21 	sts	0x21FC, r24
			break;
	}
	return (tg.status);
    626a:	80 91 fc 21 	lds	r24, 0x21FC
    626e:	28 2f       	mov	r18, r24
    6270:	30 e0       	ldi	r19, 0x00	; 0
}
    6272:	c9 01       	movw	r24, r18
    6274:	08 95       	ret

00006276 <_tg_poll_active>:
/* 
 * _tg_poll_active() - Perform a non-blocking line read from active input device
 */

static void _tg_poll_active(uint8_t d)
{
    6276:	cf 93       	push	r28
    6278:	df 93       	push	r29
    627a:	48 2f       	mov	r20, r24
	if (tg.dev[d].state != TG_SRC_ACTIVE) {			// sanity check
    627c:	28 2f       	mov	r18, r24
    627e:	30 e0       	ldi	r19, 0x00	; 0
    6280:	84 e5       	ldi	r24, 0x54	; 84
    6282:	90 e0       	ldi	r25, 0x00	; 0
    6284:	28 9f       	mul	r18, r24
    6286:	f0 01       	movw	r30, r0
    6288:	29 9f       	mul	r18, r25
    628a:	f0 0d       	add	r31, r0
    628c:	38 9f       	mul	r19, r24
    628e:	f0 0d       	add	r31, r0
    6290:	11 24       	eor	r1, r1
    6292:	e5 50       	subi	r30, 0x05	; 5
    6294:	fe 4d       	sbci	r31, 0xDE	; 222
    6296:	97 81       	ldd	r25, Z+7	; 0x07
    6298:	91 30       	cpi	r25, 0x01	; 1
    629a:	09 f0       	breq	.+2      	; 0x629e <_tg_poll_active+0x28>
    629c:	5b c0       	rjmp	.+182    	; 0x6354 <_tg_poll_active+0xde>
		return;
	}

	// special handling for file sources
	if (tg.source == XIO_DEV_PGM) {
    629e:	80 91 fe 21 	lds	r24, 0x21FE
    62a2:	84 30       	cpi	r24, 0x04	; 4
    62a4:	39 f4       	brne	.+14     	; 0x62b4 <_tg_poll_active+0x3e>
		if (tg.state == TG_STATE_READY_UNPROMPTED) {
    62a6:	80 91 fb 21 	lds	r24, 0x21FB
    62aa:	88 23       	and	r24, r24
    62ac:	09 f0       	breq	.+2      	; 0x62b0 <_tg_poll_active+0x3a>
    62ae:	52 c0       	rjmp	.+164    	; 0x6354 <_tg_poll_active+0xde>
			tg.state = TG_STATE_READY_PROMPTED; 	// issue "virtual prompt"
    62b0:	90 93 fb 21 	sts	0x21FB, r25
			return;									// not ready for next line
		}
	}

	// read input line or return if not a completed line
	if ((tg.status = xio_fget_ln(d, tg.dev[d].buf, tg.dev[d].len)) == TG_OK) {
    62b4:	85 e1       	ldi	r24, 0x15	; 21
    62b6:	90 e0       	ldi	r25, 0x00	; 0
    62b8:	28 9f       	mul	r18, r24
    62ba:	e0 01       	movw	r28, r0
    62bc:	29 9f       	mul	r18, r25
    62be:	d0 0d       	add	r29, r0
    62c0:	38 9f       	mul	r19, r24
    62c2:	d0 0d       	add	r29, r0
    62c4:	11 24       	eor	r1, r1
    62c6:	cc 0f       	add	r28, r28
    62c8:	dd 1f       	adc	r29, r29
    62ca:	cc 0f       	add	r28, r28
    62cc:	dd 1f       	adc	r29, r29
    62ce:	ca 5f       	subi	r28, 0xFA	; 250
    62d0:	dd 4d       	sbci	r29, 0xDD	; 221
    62d2:	84 e5       	ldi	r24, 0x54	; 84
    62d4:	90 e0       	ldi	r25, 0x00	; 0
    62d6:	28 9f       	mul	r18, r24
    62d8:	f0 01       	movw	r30, r0
    62da:	29 9f       	mul	r18, r25
    62dc:	f0 0d       	add	r31, r0
    62de:	38 9f       	mul	r19, r24
    62e0:	f0 0d       	add	r31, r0
    62e2:	11 24       	eor	r1, r1
    62e4:	e5 50       	subi	r30, 0x05	; 5
    62e6:	fe 4d       	sbci	r31, 0xDE	; 222
    62e8:	84 2f       	mov	r24, r20
    62ea:	be 01       	movw	r22, r28
    62ec:	40 85       	ldd	r20, Z+8	; 0x08
    62ee:	0e 94 2c 28 	call	0x5058	; 0x5058 <xio_fget_ln>
    62f2:	80 93 fc 21 	sts	0x21FC, r24
    62f6:	88 23       	and	r24, r24
    62f8:	29 f4       	brne	.+10     	; 0x6304 <_tg_poll_active+0x8e>
		tg.status = tg_parser(tg.dev[d].buf);	// dispatch to parser
    62fa:	ce 01       	movw	r24, r28
    62fc:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <tg_parser>
    6300:	80 93 fc 21 	sts	0x21FC, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_STATE_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    6304:	80 91 fc 21 	lds	r24, 0x21FC
    6308:	82 30       	cpi	r24, 0x02	; 2
    630a:	61 f0       	breq	.+24     	; 0x6324 <_tg_poll_active+0xae>
    630c:	83 30       	cpi	r24, 0x03	; 3
    630e:	28 f4       	brcc	.+10     	; 0x631a <_tg_poll_active+0xa4>
    6310:	88 23       	and	r24, r24
    6312:	f1 f0       	breq	.+60     	; 0x6350 <_tg_poll_active+0xda>
    6314:	81 30       	cpi	r24, 0x01	; 1
    6316:	e1 f4       	brne	.+56     	; 0x6350 <_tg_poll_active+0xda>
    6318:	1d c0       	rjmp	.+58     	; 0x6354 <_tg_poll_active+0xde>
    631a:	83 30       	cpi	r24, 0x03	; 3
    631c:	31 f0       	breq	.+12     	; 0x632a <_tg_poll_active+0xb4>
    631e:	84 30       	cpi	r24, 0x04	; 4
    6320:	b9 f4       	brne	.+46     	; 0x6350 <_tg_poll_active+0xda>
    6322:	06 c0       	rjmp	.+12     	; 0x6330 <_tg_poll_active+0xba>
		case TG_NOOP: {
			break;
		}

		case TG_CONTINUE: { 						// returned without a new line
			tg.state = TG_STATE_READING_COMMAND; 
    6324:	80 93 fb 21 	sts	0x21FB, r24
    6328:	15 c0       	rjmp	.+42     	; 0x6354 <_tg_poll_active+0xde>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    632a:	10 92 fd 21 	sts	0x21FD, r1
    632e:	10 c0       	rjmp	.+32     	; 0x6350 <_tg_poll_active+0xda>
			tg.state = TG_STATE_READY_UNPROMPTED;
			break;
		}
					  	
		case TG_EOF: {								// file devices only
			printf_P(PSTR("End of command file\n"));
    6330:	0f 92       	push	r0
    6332:	0f 92       	push	r0
    6334:	88 eb       	ldi	r24, 0xB8	; 184
    6336:	9b e1       	ldi	r25, 0x1B	; 27
    6338:	ed b7       	in	r30, 0x3d	; 61
    633a:	fe b7       	in	r31, 0x3e	; 62
    633c:	81 83       	std	Z+1, r24	; 0x01
    633e:	92 83       	std	Z+2, r25	; 0x02
    6340:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
			_tg_set_source(tg.source_default);		// reset to default src
    6344:	0f 90       	pop	r0
    6346:	0f 90       	pop	r0
    6348:	80 91 ff 21 	lds	r24, 0x21FF
    634c:	0e 94 04 30 	call	0x6008	; 0x6008 <_tg_set_source>
			tg.state = TG_STATE_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_STATE_READY_UNPROMPTED;	// traps various error returns
    6350:	10 92 fb 21 	sts	0x21FB, r1
		}
	}
}
    6354:	df 91       	pop	r29
    6356:	cf 91       	pop	r28
    6358:	08 95       	ret

0000635a <tg_controller>:
 *	more to the point - a hack. If the flow of control gets much more complicated 
 *	it will make sense to replace this section with an event driven dispatcher.
 */

void tg_controller()
{
    635a:	cf 93       	push	r28
    635c:	df 93       	push	r29
//	uint8_t i = 1;

	_tg_prompt();		// Send a prompt - but only if controller is ready for input
    635e:	0e 94 88 30 	call	0x6110	; 0x6110 <_tg_prompt>


	if ((tg.status = mc_line_continuation()) == TG_OK) { // Run the line generator 
    6362:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <mc_line_continuation>
    6366:	80 93 fc 21 	sts	0x21FC, r24
    636a:	88 23       	and	r24, r24
    636c:	31 f0       	breq	.+12     	; 0x637a <tg_controller+0x20>
		tg.state = TG_STATE_READY_UNPROMPTED;
		return;
	}

	if ((tg.status = mc_arc_continuation()) == TG_OK) {	 // Run the arc generator 
    636e:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <mc_arc_continuation>
    6372:	80 93 fc 21 	sts	0x21FC, r24
    6376:	88 23       	and	r24, r24
    6378:	19 f4       	brne	.+6      	; 0x6380 <tg_controller+0x26>
		tg.state = TG_STATE_READY_UNPROMPTED;
    637a:	10 92 fb 21 	sts	0x21FB, r1
    637e:	21 c0       	rjmp	.+66     	; 0x63c2 <tg_controller+0x68>
		return;
	}

	for (tg.i=1; tg.i < XIO_DEV_MAX; tg.i++) {	// Scan all input devices 
    6380:	81 e0       	ldi	r24, 0x01	; 1
    6382:	80 93 01 22 	sts	0x2201, r24
		tg.dev[tg.i].poll_func(tg.i);			//   ...(except /dev/null)
    6386:	ca e2       	ldi	r28, 0x2A	; 42
    6388:	d0 e0       	ldi	r29, 0x00	; 0
    638a:	17 c0       	rjmp	.+46     	; 0x63ba <tg_controller+0x60>
    638c:	82 2f       	mov	r24, r18
    638e:	90 e0       	ldi	r25, 0x00	; 0
    6390:	8c 9f       	mul	r24, r28
    6392:	f0 01       	movw	r30, r0
    6394:	8d 9f       	mul	r24, r29
    6396:	f0 0d       	add	r31, r0
    6398:	9c 9f       	mul	r25, r28
    639a:	f0 0d       	add	r31, r0
    639c:	11 24       	eor	r1, r1
    639e:	ee 0f       	add	r30, r30
    63a0:	ff 1f       	adc	r31, r31
    63a2:	e3 50       	subi	r30, 0x03	; 3
    63a4:	fe 4d       	sbci	r31, 0xDE	; 222
    63a6:	07 80       	ldd	r0, Z+7	; 0x07
    63a8:	f0 85       	ldd	r31, Z+8	; 0x08
    63aa:	e0 2d       	mov	r30, r0
    63ac:	82 2f       	mov	r24, r18
    63ae:	19 95       	eicall
	if ((tg.status = mc_arc_continuation()) == TG_OK) {	 // Run the arc generator 
		tg.state = TG_STATE_READY_UNPROMPTED;
		return;
	}

	for (tg.i=1; tg.i < XIO_DEV_MAX; tg.i++) {	// Scan all input devices 
    63b0:	80 91 01 22 	lds	r24, 0x2201
    63b4:	8f 5f       	subi	r24, 0xFF	; 255
    63b6:	80 93 01 22 	sts	0x2201, r24
    63ba:	20 91 01 22 	lds	r18, 0x2201
    63be:	25 30       	cpi	r18, 0x05	; 5
    63c0:	28 f3       	brcs	.-54     	; 0x638c <tg_controller+0x32>
		tg.dev[tg.i].poll_func(tg.i);			//   ...(except /dev/null)
	}
}
    63c2:	df 91       	pop	r29
    63c4:	cf 91       	pop	r28
    63c6:	08 95       	ret

000063c8 <tg_init>:
/*
 * tg_init()
 */

void tg_init() 
{
    63c8:	0f 93       	push	r16
    63ca:	1f 93       	push	r17
	xio_control(XIO_DEV_USB, XIO_SIG_FUNC, (int)&tg_signal); // bind sig handler
    63cc:	00 ed       	ldi	r16, 0xD0	; 208
    63ce:	10 e3       	ldi	r17, 0x30	; 48
    63d0:	81 e0       	ldi	r24, 0x01	; 1
    63d2:	60 e1       	ldi	r22, 0x10	; 16
    63d4:	70 e0       	ldi	r23, 0x00	; 0
    63d6:	a8 01       	movw	r20, r16
    63d8:	0e 94 4b 28 	call	0x5096	; 0x5096 <xio_control>
	xio_control(XIO_DEV_RS485, XIO_SIG_FUNC, (int)&tg_signal);
    63dc:	82 e0       	ldi	r24, 0x02	; 2
    63de:	60 e1       	ldi	r22, 0x10	; 16
    63e0:	70 e0       	ldi	r23, 0x00	; 0
    63e2:	a8 01       	movw	r20, r16
    63e4:	0e 94 4b 28 	call	0x5096	; 0x5096 <xio_control>
//	xio_control(XIO_DEV_AUX, XIO_SIG_FUNC, (int)&tg_signal);

	tg.source_default = XIO_DEV_USB; 
    63e8:	81 e0       	ldi	r24, 0x01	; 1
    63ea:	80 93 ff 21 	sts	0x21FF, r24
	tg.state = TG_STATE_READY_UNPROMPTED;
    63ee:	10 92 fb 21 	sts	0x21FB, r1
	_tg_set_source(tg.source_default);		// set initial active source
    63f2:	0e 94 04 30 	call	0x6008	; 0x6008 <_tg_set_source>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    63f6:	10 92 fd 21 	sts	0x21FD, r1
	tg.source_default = XIO_DEV_USB; 
	tg.state = TG_STATE_READY_UNPROMPTED;
	_tg_set_source(tg.source_default);		// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode

	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    63fa:	00 d0       	rcall	.+0      	; 0x63fc <tg_init+0x34>
    63fc:	0f 92       	push	r0
    63fe:	8e e0       	ldi	r24, 0x0E	; 14
    6400:	9c e1       	ldi	r25, 0x1C	; 28
    6402:	ed b7       	in	r30, 0x3d	; 61
    6404:	fe b7       	in	r31, 0x3e	; 62
    6406:	81 83       	std	Z+1, r24	; 0x01
    6408:	92 83       	std	Z+2, r25	; 0x02
    640a:	84 e0       	ldi	r24, 0x04	; 4
    640c:	9c e1       	ldi	r25, 0x1C	; 28
    640e:	83 83       	std	Z+3, r24	; 0x03
    6410:	94 83       	std	Z+4, r25	; 0x04
    6412:	0e 94 82 4b 	call	0x9704	; 0x9704 <printf_P>
    6416:	0f 90       	pop	r0
    6418:	0f 90       	pop	r0
    641a:	0f 90       	pop	r0
    641c:	0f 90       	pop	r0
}
    641e:	1f 91       	pop	r17
    6420:	0f 91       	pop	r16
    6422:	08 95       	ret

00006424 <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    6424:	08 95       	ret

00006426 <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    6426:	80 e0       	ldi	r24, 0x00	; 0
    6428:	90 e0       	ldi	r25, 0x00	; 0
    642a:	08 95       	ret

0000642c <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    642c:	10 92 a6 23 	sts	0x23A6, r1
	mv.move_buffer_tail = 0;
    6430:	10 92 a7 23 	sts	0x23A7, r1
}
    6434:	08 95       	ret

00006436 <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    6436:	90 91 a6 23 	lds	r25, 0x23A6
    643a:	80 91 a7 23 	lds	r24, 0x23A7
    643e:	98 17       	cp	r25, r24
    6440:	19 f4       	brne	.+6      	; 0x6448 <mv_dequeue_move_buffer+0x12>
    6442:	20 e0       	ldi	r18, 0x00	; 0
    6444:	30 e0       	ldi	r19, 0x00	; 0
    6446:	17 c0       	rjmp	.+46     	; 0x6476 <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    6448:	90 91 a7 23 	lds	r25, 0x23A7
    644c:	8e e1       	ldi	r24, 0x1E	; 30
    644e:	98 9f       	mul	r25, r24
    6450:	90 01       	movw	r18, r0
    6452:	11 24       	eor	r1, r1
    6454:	26 55       	subi	r18, 0x56	; 86
    6456:	3c 4d       	sbci	r19, 0xDC	; 220
    6458:	20 93 a8 23 	sts	0x23A8, r18
    645c:	30 93 a9 23 	sts	0x23A9, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    6460:	80 91 a7 23 	lds	r24, 0x23A7
    6464:	8f 5f       	subi	r24, 0xFF	; 255
    6466:	80 93 a7 23 	sts	0x23A7, r24
    646a:	80 91 a7 23 	lds	r24, 0x23A7
    646e:	84 30       	cpi	r24, 0x04	; 4
    6470:	10 f0       	brcs	.+4      	; 0x6476 <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    6472:	10 92 a7 23 	sts	0x23A7, r1
	}
	return (mv.p); 
}
    6476:	c9 01       	movw	r24, r18
    6478:	08 95       	ret

0000647a <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    647a:	90 91 a6 23 	lds	r25, 0x23A6
    647e:	9f 5f       	subi	r25, 0xFF	; 255
    6480:	94 30       	cpi	r25, 0x04	; 4
    6482:	08 f0       	brcs	.+2      	; 0x6486 <mv_test_move_buffer_full+0xc>
    6484:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    6486:	80 91 a7 23 	lds	r24, 0x23A7
    648a:	20 e0       	ldi	r18, 0x00	; 0
    648c:	89 17       	cp	r24, r25
    648e:	09 f4       	brne	.+2      	; 0x6492 <mv_test_move_buffer_full+0x18>
    6490:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    6492:	82 2f       	mov	r24, r18
    6494:	08 95       	ret

00006496 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    6496:	0b c0       	rjmp	.+22     	; 0x64ae <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    6498:	80 91 48 00 	lds	r24, 0x0048
    649c:	81 60       	ori	r24, 0x01	; 1
    649e:	80 93 48 00 	sts	0x0048, r24
    64a2:	88 95       	sleep
    64a4:	80 91 48 00 	lds	r24, 0x0048
    64a8:	8e 7f       	andi	r24, 0xFE	; 254
    64aa:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    64ae:	90 91 a7 23 	lds	r25, 0x23A7
    64b2:	80 91 a6 23 	lds	r24, 0x23A6
    64b6:	98 17       	cp	r25, r24
    64b8:	79 f7       	brne	.-34     	; 0x6498 <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    64ba:	08 95       	ret

000064bc <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    64bc:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    64be:	80 91 a6 23 	lds	r24, 0x23A6
    64c2:	80 93 a7 23 	sts	0x23A7, r24
	mv.p = NULL;
    64c6:	10 92 a8 23 	sts	0x23A8, r1
    64ca:	10 92 a9 23 	sts	0x23A9, r1
	sei();
    64ce:	78 94       	sei
}
    64d0:	08 95       	ret

000064d2 <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    64d2:	2f 92       	push	r2
    64d4:	3f 92       	push	r3
    64d6:	4f 92       	push	r4
    64d8:	5f 92       	push	r5
    64da:	6f 92       	push	r6
    64dc:	7f 92       	push	r7
    64de:	8f 92       	push	r8
    64e0:	9f 92       	push	r9
    64e2:	af 92       	push	r10
    64e4:	bf 92       	push	r11
    64e6:	cf 92       	push	r12
    64e8:	df 92       	push	r13
    64ea:	ef 92       	push	r14
    64ec:	ff 92       	push	r15
    64ee:	0f 93       	push	r16
    64f0:	1f 93       	push	r17
    64f2:	df 93       	push	r29
    64f4:	cf 93       	push	r28
    64f6:	cd b7       	in	r28, 0x3d	; 61
    64f8:	de b7       	in	r29, 0x3e	; 62
    64fa:	2b 97       	sbiw	r28, 0x0b	; 11
    64fc:	cd bf       	out	0x3d, r28	; 61
    64fe:	de bf       	out	0x3e, r29	; 62
    6500:	3b 01       	movw	r6, r22
    6502:	4c 01       	movw	r8, r24
    6504:	19 01       	movw	r2, r18
    6506:	2a 01       	movw	r4, r20
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    6508:	20 91 a6 23 	lds	r18, 0x23A6
    650c:	2f 5f       	subi	r18, 0xFF	; 255
    650e:	29 87       	std	Y+9, r18	; 0x09
    6510:	24 30       	cpi	r18, 0x04	; 4
    6512:	08 f0       	brcs	.+2      	; 0x6516 <mv_queue_move_buffer+0x44>
    6514:	19 86       	std	Y+9, r1	; 0x09
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    6516:	80 91 a7 23 	lds	r24, 0x23A7
    651a:	39 85       	ldd	r19, Y+9	; 0x09
    651c:	83 17       	cp	r24, r19
    651e:	11 f4       	brne	.+4      	; 0x6524 <mv_queue_move_buffer+0x52>
    6520:	86 e0       	ldi	r24, 0x06	; 6
    6522:	92 c1       	rjmp	.+804    	; 0x6848 <mv_queue_move_buffer+0x376>
		return (TG_BUFFER_FULL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    6524:	e0 91 a6 23 	lds	r30, 0x23A6
    6528:	8e e1       	ldi	r24, 0x1E	; 30
    652a:	e8 9f       	mul	r30, r24
    652c:	f0 01       	movw	r30, r0
    652e:	11 24       	eor	r1, r1
    6530:	e6 55       	subi	r30, 0x56	; 86
    6532:	fc 4d       	sbci	r31, 0xDC	; 220
    6534:	e0 93 a8 23 	sts	0x23A8, r30
    6538:	f0 93 a9 23 	sts	0x23A9, r31
	memset(mv.p, 0, sizeof(struct mvMove));
    653c:	df 01       	movw	r26, r30
    653e:	1d 92       	st	X+, r1
    6540:	8a 95       	dec	r24
    6542:	e9 f7       	brne	.-6      	; 0x653e <mv_queue_move_buffer+0x6c>
	mv.p->a[X].steps = steps_x;
    6544:	e0 91 a8 23 	lds	r30, 0x23A8
    6548:	f0 91 a9 23 	lds	r31, 0x23A9
    654c:	ea 87       	std	Y+10, r30	; 0x0a
    654e:	fb 87       	std	Y+11, r31	; 0x0b
    6550:	60 82       	st	Z, r6
    6552:	71 82       	std	Z+1, r7	; 0x01
    6554:	82 82       	std	Z+2, r8	; 0x02
    6556:	93 82       	std	Z+3, r9	; 0x03
	mv.p->a[Y].steps = steps_y;
    6558:	22 86       	std	Z+10, r2	; 0x0a
    655a:	33 86       	std	Z+11, r3	; 0x0b
    655c:	44 86       	std	Z+12, r4	; 0x0c
    655e:	55 86       	std	Z+13, r5	; 0x0d
	mv.p->a[Z].steps = steps_z;
    6560:	e4 8a       	std	Z+20, r14	; 0x14
    6562:	f5 8a       	std	Z+21, r15	; 0x15
    6564:	06 8b       	std	Z+22, r16	; 0x16
    6566:	17 8b       	std	Z+23, r17	; 0x17
	ticks = microseconds * TICKS_PER_MICROSECOND;
    6568:	a5 e0       	ldi	r26, 0x05	; 5
    656a:	aa 0c       	add	r10, r10
    656c:	bb 1c       	adc	r11, r11
    656e:	cc 1c       	adc	r12, r12
    6570:	dd 1c       	adc	r13, r13
    6572:	aa 95       	dec	r26
    6574:	d1 f7       	brne	.-12     	; 0x656a <mv_queue_move_buffer+0x98>
    6576:	a6 01       	movw	r20, r12
    6578:	95 01       	movw	r18, r10
    657a:	60 e0       	ldi	r22, 0x00	; 0
    657c:	70 e0       	ldi	r23, 0x00	; 0
    657e:	80 e0       	ldi	r24, 0x00	; 0
    6580:	90 e0       	ldi	r25, 0x00	; 0
    6582:	a9 82       	std	Y+1, r10	; 0x01
    6584:	3a 83       	std	Y+2, r19	; 0x02
    6586:	4b 83       	std	Y+3, r20	; 0x03
    6588:	5c 83       	std	Y+4, r21	; 0x04
    658a:	6d 83       	std	Y+5, r22	; 0x05
    658c:	7e 83       	std	Y+6, r23	; 0x06
    658e:	8f 83       	std	Y+7, r24	; 0x07
    6590:	98 87       	std	Y+8, r25	; 0x08

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    6592:	61 14       	cp	r6, r1
    6594:	71 04       	cpc	r7, r1
    6596:	81 04       	cpc	r8, r1
    6598:	91 04       	cpc	r9, r1
    659a:	09 f0       	breq	.+2      	; 0x659e <mv_queue_move_buffer+0xcc>
    659c:	4b c0       	rjmp	.+150    	; 0x6634 <mv_queue_move_buffer+0x162>
    659e:	21 14       	cp	r2, r1
    65a0:	31 04       	cpc	r3, r1
    65a2:	41 04       	cpc	r4, r1
    65a4:	51 04       	cpc	r5, r1
    65a6:	09 f0       	breq	.+2      	; 0x65aa <mv_queue_move_buffer+0xd8>
    65a8:	45 c0       	rjmp	.+138    	; 0x6634 <mv_queue_move_buffer+0x162>
    65aa:	e1 14       	cp	r14, r1
    65ac:	f1 04       	cpc	r15, r1
    65ae:	01 05       	cpc	r16, r1
    65b0:	11 05       	cpc	r17, r1
    65b2:	09 f0       	breq	.+2      	; 0x65b6 <mv_queue_move_buffer+0xe4>
    65b4:	3f c0       	rjmp	.+126    	; 0x6634 <mv_queue_move_buffer+0x162>
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    65b6:	81 e0       	ldi	r24, 0x01	; 1
    65b8:	90 e0       	ldi	r25, 0x00	; 0
    65ba:	a0 e0       	ldi	r26, 0x00	; 0
    65bc:	b0 e0       	ldi	r27, 0x00	; 0
    65be:	80 83       	st	Z, r24
    65c0:	91 83       	std	Z+1, r25	; 0x01
    65c2:	a2 83       	std	Z+2, r26	; 0x02
    65c4:	b3 83       	std	Z+3, r27	; 0x03
		mv.p->a[X].postscale = 1;
    65c6:	81 e0       	ldi	r24, 0x01	; 1
    65c8:	90 e0       	ldi	r25, 0x00	; 0
    65ca:	86 83       	std	Z+6, r24	; 0x06
    65cc:	97 83       	std	Z+7, r25	; 0x07
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
    65ce:	60 e0       	ldi	r22, 0x00	; 0
    65d0:	70 e0       	ldi	r23, 0x00	; 0
    65d2:	80 e0       	ldi	r24, 0x00	; 0
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	aa 24       	eor	r10, r10
    65d8:	a3 94       	inc	r10
    65da:	bb 24       	eor	r11, r11
    65dc:	cc 24       	eor	r12, r12
    65de:	dd 24       	eor	r13, r13
    65e0:	ee 24       	eor	r14, r14
    65e2:	ff 24       	eor	r15, r15
    65e4:	00 e0       	ldi	r16, 0x00	; 0
    65e6:	10 e0       	ldi	r17, 0x00	; 0
    65e8:	0e 94 b2 39 	call	0x7364	; 0x7364 <__udivdi3>
    65ec:	c9 01       	movw	r24, r18
    65ee:	da 01       	movw	r26, r20
    65f0:	9c 01       	movw	r18, r24
    65f2:	ad 01       	movw	r20, r26
    65f4:	10 c0       	rjmp	.+32     	; 0x6616 <mv_queue_move_buffer+0x144>
		while (ticks_per_step & 0xFFFF0000) {
			ticks_per_step >>= 1;
    65f6:	56 95       	lsr	r21
    65f8:	47 95       	ror	r20
    65fa:	37 95       	ror	r19
    65fc:	27 95       	ror	r18
			mv.p->a[X].postscale <<= 1;
    65fe:	aa 85       	ldd	r26, Y+10	; 0x0a
    6600:	bb 85       	ldd	r27, Y+11	; 0x0b
    6602:	16 96       	adiw	r26, 0x06	; 6
    6604:	8d 91       	ld	r24, X+
    6606:	9c 91       	ld	r25, X
    6608:	17 97       	sbiw	r26, 0x07	; 7
    660a:	88 0f       	add	r24, r24
    660c:	99 1f       	adc	r25, r25
    660e:	16 96       	adiw	r26, 0x06	; 6
    6610:	8d 93       	st	X+, r24
    6612:	9c 93       	st	X, r25
    6614:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
		while (ticks_per_step & 0xFFFF0000) {
    6616:	da 01       	movw	r26, r20
    6618:	c9 01       	movw	r24, r18
    661a:	80 70       	andi	r24, 0x00	; 0
    661c:	90 70       	andi	r25, 0x00	; 0
    661e:	00 97       	sbiw	r24, 0x00	; 0
    6620:	a1 05       	cpc	r26, r1
    6622:	b1 05       	cpc	r27, r1
    6624:	41 f7       	brne	.-48     	; 0x65f6 <mv_queue_move_buffer+0x124>
			ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    6626:	ea 85       	ldd	r30, Y+10	; 0x0a
    6628:	fb 85       	ldd	r31, Y+11	; 0x0b
    662a:	24 83       	std	Z+4, r18	; 0x04
    662c:	35 83       	std	Z+5, r19	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    662e:	81 e0       	ldi	r24, 0x01	; 1
    6630:	81 87       	std	Z+9, r24	; 0x09
    6632:	04 c1       	rjmp	.+520    	; 0x683c <mv_queue_move_buffer+0x36a>
	mv.p->a[Y].steps = steps_y;
	mv.p->a[Z].steps = steps_z;
	ticks = microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    6634:	44 24       	eor	r4, r4
    6636:	55 24       	eor	r5, r5
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    6638:	40 91 a8 23 	lds	r20, 0x23A8
    663c:	50 91 a9 23 	lds	r21, 0x23A9
    6640:	34 2c       	mov	r3, r4
    6642:	25 2c       	mov	r2, r5
    6644:	c2 01       	movw	r24, r4
    6646:	fc 01       	movw	r30, r24
    6648:	73 e0       	ldi	r23, 0x03	; 3
    664a:	ee 0f       	add	r30, r30
    664c:	ff 1f       	adc	r31, r31
    664e:	7a 95       	dec	r23
    6650:	e1 f7       	brne	.-8      	; 0x664a <mv_queue_move_buffer+0x178>
    6652:	88 0f       	add	r24, r24
    6654:	99 1f       	adc	r25, r25
    6656:	e8 0f       	add	r30, r24
    6658:	f9 1f       	adc	r31, r25
    665a:	e4 0f       	add	r30, r20
    665c:	f5 1f       	adc	r31, r21
    665e:	80 81       	ld	r24, Z
    6660:	91 81       	ldd	r25, Z+1	; 0x01
    6662:	a2 81       	ldd	r26, Z+2	; 0x02
    6664:	b3 81       	ldd	r27, Z+3	; 0x03
    6666:	00 97       	sbiw	r24, 0x00	; 0
    6668:	a1 05       	cpc	r26, r1
    666a:	b1 05       	cpc	r27, r1
    666c:	09 f4       	brne	.+2      	; 0x6670 <mv_queue_move_buffer+0x19e>
    666e:	de c0       	rjmp	.+444    	; 0x682c <mv_queue_move_buffer+0x35a>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    6670:	b7 ff       	sbrs	r27, 7
    6672:	10 c0       	rjmp	.+32     	; 0x6694 <mv_queue_move_buffer+0x1c2>
    6674:	c2 01       	movw	r24, r4
    6676:	fc 01       	movw	r30, r24
    6678:	33 e0       	ldi	r19, 0x03	; 3
    667a:	ee 0f       	add	r30, r30
    667c:	ff 1f       	adc	r31, r31
    667e:	3a 95       	dec	r19
    6680:	e1 f7       	brne	.-8      	; 0x667a <mv_queue_move_buffer+0x1a8>
    6682:	88 0f       	add	r24, r24
    6684:	99 1f       	adc	r25, r25
    6686:	e8 0f       	add	r30, r24
    6688:	f9 1f       	adc	r31, r25
    668a:	e4 0f       	add	r30, r20
    668c:	f5 1f       	adc	r31, r21
    668e:	21 e0       	ldi	r18, 0x01	; 1
    6690:	20 87       	std	Z+8, r18	; 0x08
    6692:	0e c0       	rjmp	.+28     	; 0x66b0 <mv_queue_move_buffer+0x1de>
    6694:	c2 01       	movw	r24, r4
    6696:	fc 01       	movw	r30, r24
    6698:	03 e0       	ldi	r16, 0x03	; 3
    669a:	ee 0f       	add	r30, r30
    669c:	ff 1f       	adc	r31, r31
    669e:	0a 95       	dec	r16
    66a0:	e1 f7       	brne	.-8      	; 0x669a <mv_queue_move_buffer+0x1c8>
    66a2:	88 0f       	add	r24, r24
    66a4:	99 1f       	adc	r25, r25
    66a6:	e8 0f       	add	r30, r24
    66a8:	f9 1f       	adc	r31, r25
    66aa:	e4 0f       	add	r30, r20
    66ac:	f5 1f       	adc	r31, r21
    66ae:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    66b0:	83 2d       	mov	r24, r3
    66b2:	92 2d       	mov	r25, r2
    66b4:	fc 01       	movw	r30, r24
    66b6:	b3 e0       	ldi	r27, 0x03	; 3
    66b8:	ee 0f       	add	r30, r30
    66ba:	ff 1f       	adc	r31, r31
    66bc:	ba 95       	dec	r27
    66be:	e1 f7       	brne	.-8      	; 0x66b8 <mv_queue_move_buffer+0x1e6>
    66c0:	88 0f       	add	r24, r24
    66c2:	99 1f       	adc	r25, r25
    66c4:	e8 0f       	add	r30, r24
    66c6:	f9 1f       	adc	r31, r25
    66c8:	e4 0f       	add	r30, r20
    66ca:	f5 1f       	adc	r31, r21
    66cc:	83 2d       	mov	r24, r3
    66ce:	92 2d       	mov	r25, r2
    66d0:	9c 01       	movw	r18, r24
    66d2:	73 e0       	ldi	r23, 0x03	; 3
    66d4:	22 0f       	add	r18, r18
    66d6:	33 1f       	adc	r19, r19
    66d8:	7a 95       	dec	r23
    66da:	e1 f7       	brne	.-8      	; 0x66d4 <mv_queue_move_buffer+0x202>
    66dc:	88 0f       	add	r24, r24
    66de:	99 1f       	adc	r25, r25
    66e0:	28 0f       	add	r18, r24
    66e2:	39 1f       	adc	r19, r25
    66e4:	42 0f       	add	r20, r18
    66e6:	53 1f       	adc	r21, r19
    66e8:	da 01       	movw	r26, r20
    66ea:	2d 91       	ld	r18, X+
    66ec:	3d 91       	ld	r19, X+
    66ee:	4d 91       	ld	r20, X+
    66f0:	5c 91       	ld	r21, X
    66f2:	57 ff       	sbrs	r21, 7
    66f4:	07 c0       	rjmp	.+14     	; 0x6704 <mv_queue_move_buffer+0x232>
    66f6:	50 95       	com	r21
    66f8:	40 95       	com	r20
    66fa:	30 95       	com	r19
    66fc:	21 95       	neg	r18
    66fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6700:	4f 4f       	sbci	r20, 0xFF	; 255
    6702:	5f 4f       	sbci	r21, 0xFF	; 255
    6704:	20 83       	st	Z, r18
    6706:	31 83       	std	Z+1, r19	; 0x01
    6708:	42 83       	std	Z+2, r20	; 0x02
    670a:	53 83       	std	Z+3, r21	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    670c:	e0 91 a8 23 	lds	r30, 0x23A8
    6710:	f0 91 a9 23 	lds	r31, 0x23A9
    6714:	ea 87       	std	Y+10, r30	; 0x0a
    6716:	fb 87       	std	Y+11, r31	; 0x0b
    6718:	83 2d       	mov	r24, r3
    671a:	92 2d       	mov	r25, r2
    671c:	fc 01       	movw	r30, r24
    671e:	03 e0       	ldi	r16, 0x03	; 3
    6720:	ee 0f       	add	r30, r30
    6722:	ff 1f       	adc	r31, r31
    6724:	0a 95       	dec	r16
    6726:	e1 f7       	brne	.-8      	; 0x6720 <mv_queue_move_buffer+0x24e>
    6728:	88 0f       	add	r24, r24
    672a:	99 1f       	adc	r25, r25
    672c:	e8 0f       	add	r30, r24
    672e:	f9 1f       	adc	r31, r25
    6730:	2a 85       	ldd	r18, Y+10	; 0x0a
    6732:	3b 85       	ldd	r19, Y+11	; 0x0b
    6734:	e2 0f       	add	r30, r18
    6736:	f3 1f       	adc	r31, r19
    6738:	41 e0       	ldi	r20, 0x01	; 1
    673a:	50 e0       	ldi	r21, 0x00	; 0
    673c:	46 83       	std	Z+6, r20	; 0x06
    673e:	57 83       	std	Z+7, r21	; 0x07
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    6740:	83 2d       	mov	r24, r3
    6742:	92 2d       	mov	r25, r2
    6744:	fc 01       	movw	r30, r24
    6746:	b3 e0       	ldi	r27, 0x03	; 3
    6748:	ee 0f       	add	r30, r30
    674a:	ff 1f       	adc	r31, r31
    674c:	ba 95       	dec	r27
    674e:	e1 f7       	brne	.-8      	; 0x6748 <mv_queue_move_buffer+0x276>
    6750:	88 0f       	add	r24, r24
    6752:	99 1f       	adc	r25, r25
    6754:	e8 0f       	add	r30, r24
    6756:	f9 1f       	adc	r31, r25
    6758:	e2 0f       	add	r30, r18
    675a:	f3 1f       	adc	r31, r19
    675c:	e0 80       	ld	r14, Z
    675e:	f1 80       	ldd	r15, Z+1	; 0x01
    6760:	02 81       	ldd	r16, Z+2	; 0x02
    6762:	13 81       	ldd	r17, Z+3	; 0x03
    6764:	37 01       	movw	r6, r14
    6766:	48 01       	movw	r8, r16
    6768:	99 0c       	add	r9, r9
    676a:	66 08       	sbc	r6, r6
    676c:	76 2c       	mov	r7, r6
    676e:	43 01       	movw	r8, r6
    6770:	29 81       	ldd	r18, Y+1	; 0x01
    6772:	3a 81       	ldd	r19, Y+2	; 0x02
    6774:	4b 81       	ldd	r20, Y+3	; 0x03
    6776:	5c 81       	ldd	r21, Y+4	; 0x04
    6778:	6d 81       	ldd	r22, Y+5	; 0x05
    677a:	7e 81       	ldd	r23, Y+6	; 0x06
    677c:	8f 81       	ldd	r24, Y+7	; 0x07
    677e:	98 85       	ldd	r25, Y+8	; 0x08
    6780:	57 01       	movw	r10, r14
    6782:	68 01       	movw	r12, r16
    6784:	e6 2c       	mov	r14, r6
    6786:	f6 2c       	mov	r15, r6
    6788:	06 2d       	mov	r16, r6
    678a:	16 2d       	mov	r17, r6
    678c:	0e 94 b2 39 	call	0x7364	; 0x7364 <__udivdi3>
    6790:	c9 01       	movw	r24, r18
    6792:	da 01       	movw	r26, r20
    6794:	ac 01       	movw	r20, r24
    6796:	bd 01       	movw	r22, r26
    6798:	2c c0       	rjmp	.+88     	; 0x67f2 <mv_queue_move_buffer+0x320>
				while (ticks_per_step & 0xFFFF0000) {
					ticks_per_step >>= 1;
    679a:	76 95       	lsr	r23
    679c:	67 95       	ror	r22
    679e:	57 95       	ror	r21
    67a0:	47 95       	ror	r20
					mv.p->a[i].postscale <<= 1;
    67a2:	83 2d       	mov	r24, r3
    67a4:	92 2d       	mov	r25, r2
    67a6:	dc 01       	movw	r26, r24
    67a8:	33 e0       	ldi	r19, 0x03	; 3
    67aa:	aa 0f       	add	r26, r26
    67ac:	bb 1f       	adc	r27, r27
    67ae:	3a 95       	dec	r19
    67b0:	e1 f7       	brne	.-8      	; 0x67aa <mv_queue_move_buffer+0x2d8>
    67b2:	88 0f       	add	r24, r24
    67b4:	99 1f       	adc	r25, r25
    67b6:	a8 0f       	add	r26, r24
    67b8:	b9 1f       	adc	r27, r25
    67ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    67bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    67be:	a8 0f       	add	r26, r24
    67c0:	b9 1f       	adc	r27, r25
    67c2:	83 2d       	mov	r24, r3
    67c4:	92 2d       	mov	r25, r2
    67c6:	fc 01       	movw	r30, r24
    67c8:	03 e0       	ldi	r16, 0x03	; 3
    67ca:	ee 0f       	add	r30, r30
    67cc:	ff 1f       	adc	r31, r31
    67ce:	0a 95       	dec	r16
    67d0:	e1 f7       	brne	.-8      	; 0x67ca <mv_queue_move_buffer+0x2f8>
    67d2:	88 0f       	add	r24, r24
    67d4:	99 1f       	adc	r25, r25
    67d6:	e8 0f       	add	r30, r24
    67d8:	f9 1f       	adc	r31, r25
    67da:	2a 85       	ldd	r18, Y+10	; 0x0a
    67dc:	3b 85       	ldd	r19, Y+11	; 0x0b
    67de:	e2 0f       	add	r30, r18
    67e0:	f3 1f       	adc	r31, r19
    67e2:	86 81       	ldd	r24, Z+6	; 0x06
    67e4:	97 81       	ldd	r25, Z+7	; 0x07
    67e6:	88 0f       	add	r24, r24
    67e8:	99 1f       	adc	r25, r25
    67ea:	16 96       	adiw	r26, 0x06	; 6
    67ec:	8d 93       	st	X+, r24
    67ee:	9c 93       	st	X, r25
    67f0:	17 97       	sbiw	r26, 0x07	; 7

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
				while (ticks_per_step & 0xFFFF0000) {
    67f2:	db 01       	movw	r26, r22
    67f4:	ca 01       	movw	r24, r20
    67f6:	80 70       	andi	r24, 0x00	; 0
    67f8:	90 70       	andi	r25, 0x00	; 0
    67fa:	00 97       	sbiw	r24, 0x00	; 0
    67fc:	a1 05       	cpc	r26, r1
    67fe:	b1 05       	cpc	r27, r1
    6800:	61 f6       	brne	.-104    	; 0x679a <mv_queue_move_buffer+0x2c8>
					ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    6802:	83 2d       	mov	r24, r3
    6804:	92 2d       	mov	r25, r2
    6806:	9c 01       	movw	r18, r24
    6808:	73 e0       	ldi	r23, 0x03	; 3
    680a:	22 0f       	add	r18, r18
    680c:	33 1f       	adc	r19, r19
    680e:	7a 95       	dec	r23
    6810:	e1 f7       	brne	.-8      	; 0x680a <mv_queue_move_buffer+0x338>
    6812:	88 0f       	add	r24, r24
    6814:	99 1f       	adc	r25, r25
    6816:	28 0f       	add	r18, r24
    6818:	39 1f       	adc	r19, r25
    681a:	8a 85       	ldd	r24, Y+10	; 0x0a
    681c:	9b 85       	ldd	r25, Y+11	; 0x0b
    681e:	82 0f       	add	r24, r18
    6820:	93 1f       	adc	r25, r19
    6822:	dc 01       	movw	r26, r24
    6824:	14 96       	adiw	r26, 0x04	; 4
    6826:	4d 93       	st	X+, r20
    6828:	5c 93       	st	X, r21
    682a:	15 97       	sbiw	r26, 0x05	; 5
    682c:	08 94       	sec
    682e:	41 1c       	adc	r4, r1
    6830:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    6832:	b3 e0       	ldi	r27, 0x03	; 3
    6834:	4b 16       	cp	r4, r27
    6836:	51 04       	cpc	r5, r1
    6838:	09 f0       	breq	.+2      	; 0x683c <mv_queue_move_buffer+0x36a>
    683a:	fe ce       	rjmp	.-516    	; 0x6638 <mv_queue_move_buffer+0x166>
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    683c:	e9 85       	ldd	r30, Y+9	; 0x09
    683e:	e0 93 a6 23 	sts	0x23A6, r30
	st_execute_move();
    6842:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <st_execute_move>
    6846:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    6848:	2b 96       	adiw	r28, 0x0b	; 11
    684a:	cd bf       	out	0x3d, r28	; 61
    684c:	de bf       	out	0x3e, r29	; 62
    684e:	cf 91       	pop	r28
    6850:	df 91       	pop	r29
    6852:	1f 91       	pop	r17
    6854:	0f 91       	pop	r16
    6856:	ff 90       	pop	r15
    6858:	ef 90       	pop	r14
    685a:	df 90       	pop	r13
    685c:	cf 90       	pop	r12
    685e:	bf 90       	pop	r11
    6860:	af 90       	pop	r10
    6862:	9f 90       	pop	r9
    6864:	8f 90       	pop	r8
    6866:	7f 90       	pop	r7
    6868:	6f 90       	pop	r6
    686a:	5f 90       	pop	r5
    686c:	4f 90       	pop	r4
    686e:	3f 90       	pop	r3
    6870:	2f 90       	pop	r2
    6872:	08 95       	ret

00006874 <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    6874:	ab e6       	ldi	r26, 0x6B	; 107
    6876:	b4 e2       	ldi	r27, 0x24	; 36
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    6878:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    687a:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    687c:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    687e:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    6880:	ed 91       	ld	r30, X+
    6882:	fc 91       	ld	r31, X
    6884:	11 97       	sbiw	r26, 0x01	; 1
    6886:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    6888:	ed 91       	ld	r30, X+
    688a:	fc 91       	ld	r31, X
    688c:	11 97       	sbiw	r26, 0x01	; 1
    688e:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    6890:	ed 91       	ld	r30, X+
    6892:	fc 91       	ld	r31, X
    6894:	11 97       	sbiw	r26, 0x01	; 1
    6896:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    6898:	ed 91       	ld	r30, X+
    689a:	fc 91       	ld	r31, X
    689c:	11 97       	sbiw	r26, 0x01	; 1
    689e:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    68a0:	ed 91       	ld	r30, X+
    68a2:	fc 91       	ld	r31, X
    68a4:	11 97       	sbiw	r26, 0x01	; 1
    68a6:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    68a8:	ed 91       	ld	r30, X+
    68aa:	fc 91       	ld	r31, X
    68ac:	11 97       	sbiw	r26, 0x01	; 1
    68ae:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    68b0:	ed 91       	ld	r30, X+
    68b2:	fc 91       	ld	r31, X
    68b4:	11 97       	sbiw	r26, 0x01	; 1
    68b6:	31 87       	std	Z+9, r19	; 0x09
    68b8:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    68ba:	44 e2       	ldi	r20, 0x24	; 36
    68bc:	ab 3a       	cpi	r26, 0xAB	; 171
    68be:	b4 07       	cpc	r27, r20
    68c0:	f9 f6       	brne	.-66     	; 0x6880 <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    68c2:	08 95       	ret

000068c4 <__vector_65>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    68c4:	1f 92       	push	r1
    68c6:	0f 92       	push	r0
    68c8:	0f b6       	in	r0, 0x3f	; 63
    68ca:	0f 92       	push	r0
    68cc:	0b b6       	in	r0, 0x3b	; 59
    68ce:	0f 92       	push	r0
    68d0:	11 24       	eor	r1, r1
    68d2:	2f 93       	push	r18
    68d4:	3f 93       	push	r19
    68d6:	4f 93       	push	r20
    68d8:	5f 93       	push	r21
    68da:	6f 93       	push	r22
    68dc:	7f 93       	push	r23
    68de:	8f 93       	push	r24
    68e0:	9f 93       	push	r25
    68e2:	af 93       	push	r26
    68e4:	bf 93       	push	r27
    68e6:	ef 93       	push	r30
    68e8:	ff 93       	push	r31

void _ls_handler() {
	tg_kill();
    68ea:	0e 94 53 30 	call	0x60a6	; 0x60a6 <tg_kill>
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    68ee:	ff 91       	pop	r31
    68f0:	ef 91       	pop	r30
    68f2:	bf 91       	pop	r27
    68f4:	af 91       	pop	r26
    68f6:	9f 91       	pop	r25
    68f8:	8f 91       	pop	r24
    68fa:	7f 91       	pop	r23
    68fc:	6f 91       	pop	r22
    68fe:	5f 91       	pop	r21
    6900:	4f 91       	pop	r20
    6902:	3f 91       	pop	r19
    6904:	2f 91       	pop	r18
    6906:	0f 90       	pop	r0
    6908:	0b be       	out	0x3b, r0	; 59
    690a:	0f 90       	pop	r0
    690c:	0f be       	out	0x3f, r0	; 63
    690e:	0f 90       	pop	r0
    6910:	1f 90       	pop	r1
    6912:	18 95       	reti

00006914 <__vector_64>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    6914:	1f 92       	push	r1
    6916:	0f 92       	push	r0
    6918:	0f b6       	in	r0, 0x3f	; 63
    691a:	0f 92       	push	r0
    691c:	0b b6       	in	r0, 0x3b	; 59
    691e:	0f 92       	push	r0
    6920:	11 24       	eor	r1, r1
    6922:	2f 93       	push	r18
    6924:	3f 93       	push	r19
    6926:	4f 93       	push	r20
    6928:	5f 93       	push	r21
    692a:	6f 93       	push	r22
    692c:	7f 93       	push	r23
    692e:	8f 93       	push	r24
    6930:	9f 93       	push	r25
    6932:	af 93       	push	r26
    6934:	bf 93       	push	r27
    6936:	ef 93       	push	r30
    6938:	ff 93       	push	r31
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    693a:	0e 94 53 30 	call	0x60a6	; 0x60a6 <tg_kill>
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    693e:	ff 91       	pop	r31
    6940:	ef 91       	pop	r30
    6942:	bf 91       	pop	r27
    6944:	af 91       	pop	r26
    6946:	9f 91       	pop	r25
    6948:	8f 91       	pop	r24
    694a:	7f 91       	pop	r23
    694c:	6f 91       	pop	r22
    694e:	5f 91       	pop	r21
    6950:	4f 91       	pop	r20
    6952:	3f 91       	pop	r19
    6954:	2f 91       	pop	r18
    6956:	0f 90       	pop	r0
    6958:	0b be       	out	0x3b, r0	; 59
    695a:	0f 90       	pop	r0
    695c:	0f be       	out	0x3f, r0	; 63
    695e:	0f 90       	pop	r0
    6960:	1f 90       	pop	r1
    6962:	18 95       	reti

00006964 <__vector_44>:
ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    6964:	1f 92       	push	r1
    6966:	0f 92       	push	r0
    6968:	0f b6       	in	r0, 0x3f	; 63
    696a:	0f 92       	push	r0
    696c:	0b b6       	in	r0, 0x3b	; 59
    696e:	0f 92       	push	r0
    6970:	11 24       	eor	r1, r1
    6972:	2f 93       	push	r18
    6974:	3f 93       	push	r19
    6976:	4f 93       	push	r20
    6978:	5f 93       	push	r21
    697a:	6f 93       	push	r22
    697c:	7f 93       	push	r23
    697e:	8f 93       	push	r24
    6980:	9f 93       	push	r25
    6982:	af 93       	push	r26
    6984:	bf 93       	push	r27
    6986:	ef 93       	push	r30
    6988:	ff 93       	push	r31
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    698a:	0e 94 53 30 	call	0x60a6	; 0x60a6 <tg_kill>
ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    698e:	ff 91       	pop	r31
    6990:	ef 91       	pop	r30
    6992:	bf 91       	pop	r27
    6994:	af 91       	pop	r26
    6996:	9f 91       	pop	r25
    6998:	8f 91       	pop	r24
    699a:	7f 91       	pop	r23
    699c:	6f 91       	pop	r22
    699e:	5f 91       	pop	r21
    69a0:	4f 91       	pop	r20
    69a2:	3f 91       	pop	r19
    69a4:	2f 91       	pop	r18
    69a6:	0f 90       	pop	r0
    69a8:	0b be       	out	0x3b, r0	; 59
    69aa:	0f 90       	pop	r0
    69ac:	0f be       	out	0x3f, r0	; 63
    69ae:	0f 90       	pop	r0
    69b0:	1f 90       	pop	r1
    69b2:	18 95       	reti

000069b4 <__vector_43>:

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    69b4:	1f 92       	push	r1
    69b6:	0f 92       	push	r0
    69b8:	0f b6       	in	r0, 0x3f	; 63
    69ba:	0f 92       	push	r0
    69bc:	0b b6       	in	r0, 0x3b	; 59
    69be:	0f 92       	push	r0
    69c0:	11 24       	eor	r1, r1
    69c2:	2f 93       	push	r18
    69c4:	3f 93       	push	r19
    69c6:	4f 93       	push	r20
    69c8:	5f 93       	push	r21
    69ca:	6f 93       	push	r22
    69cc:	7f 93       	push	r23
    69ce:	8f 93       	push	r24
    69d0:	9f 93       	push	r25
    69d2:	af 93       	push	r26
    69d4:	bf 93       	push	r27
    69d6:	ef 93       	push	r30
    69d8:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    69da:	0e 94 53 30 	call	0x60a6	; 0x60a6 <tg_kill>

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    69de:	ff 91       	pop	r31
    69e0:	ef 91       	pop	r30
    69e2:	bf 91       	pop	r27
    69e4:	af 91       	pop	r26
    69e6:	9f 91       	pop	r25
    69e8:	8f 91       	pop	r24
    69ea:	7f 91       	pop	r23
    69ec:	6f 91       	pop	r22
    69ee:	5f 91       	pop	r21
    69f0:	4f 91       	pop	r20
    69f2:	3f 91       	pop	r19
    69f4:	2f 91       	pop	r18
    69f6:	0f 90       	pop	r0
    69f8:	0b be       	out	0x3b, r0	; 59
    69fa:	0f 90       	pop	r0
    69fc:	0f be       	out	0x3f, r0	; 63
    69fe:	0f 90       	pop	r0
    6a00:	1f 90       	pop	r1
    6a02:	18 95       	reti

00006a04 <__vector_105>:
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    6a04:	1f 92       	push	r1
    6a06:	0f 92       	push	r0
    6a08:	0f b6       	in	r0, 0x3f	; 63
    6a0a:	0f 92       	push	r0
    6a0c:	0b b6       	in	r0, 0x3b	; 59
    6a0e:	0f 92       	push	r0
    6a10:	11 24       	eor	r1, r1
    6a12:	2f 93       	push	r18
    6a14:	3f 93       	push	r19
    6a16:	4f 93       	push	r20
    6a18:	5f 93       	push	r21
    6a1a:	6f 93       	push	r22
    6a1c:	7f 93       	push	r23
    6a1e:	8f 93       	push	r24
    6a20:	9f 93       	push	r25
    6a22:	af 93       	push	r26
    6a24:	bf 93       	push	r27
    6a26:	ef 93       	push	r30
    6a28:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    6a2a:	0e 94 53 30 	call	0x60a6	; 0x60a6 <tg_kill>
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    6a2e:	ff 91       	pop	r31
    6a30:	ef 91       	pop	r30
    6a32:	bf 91       	pop	r27
    6a34:	af 91       	pop	r26
    6a36:	9f 91       	pop	r25
    6a38:	8f 91       	pop	r24
    6a3a:	7f 91       	pop	r23
    6a3c:	6f 91       	pop	r22
    6a3e:	5f 91       	pop	r21
    6a40:	4f 91       	pop	r20
    6a42:	3f 91       	pop	r19
    6a44:	2f 91       	pop	r18
    6a46:	0f 90       	pop	r0
    6a48:	0b be       	out	0x3b, r0	; 59
    6a4a:	0f 90       	pop	r0
    6a4c:	0f be       	out	0x3f, r0	; 63
    6a4e:	0f 90       	pop	r0
    6a50:	1f 90       	pop	r1
    6a52:	18 95       	reti

00006a54 <__vector_104>:
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    6a54:	1f 92       	push	r1
    6a56:	0f 92       	push	r0
    6a58:	0f b6       	in	r0, 0x3f	; 63
    6a5a:	0f 92       	push	r0
    6a5c:	0b b6       	in	r0, 0x3b	; 59
    6a5e:	0f 92       	push	r0
    6a60:	11 24       	eor	r1, r1
    6a62:	2f 93       	push	r18
    6a64:	3f 93       	push	r19
    6a66:	4f 93       	push	r20
    6a68:	5f 93       	push	r21
    6a6a:	6f 93       	push	r22
    6a6c:	7f 93       	push	r23
    6a6e:	8f 93       	push	r24
    6a70:	9f 93       	push	r25
    6a72:	af 93       	push	r26
    6a74:	bf 93       	push	r27
    6a76:	ef 93       	push	r30
    6a78:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    6a7a:	0e 94 53 30 	call	0x60a6	; 0x60a6 <tg_kill>
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    6a7e:	ff 91       	pop	r31
    6a80:	ef 91       	pop	r30
    6a82:	bf 91       	pop	r27
    6a84:	af 91       	pop	r26
    6a86:	9f 91       	pop	r25
    6a88:	8f 91       	pop	r24
    6a8a:	7f 91       	pop	r23
    6a8c:	6f 91       	pop	r22
    6a8e:	5f 91       	pop	r21
    6a90:	4f 91       	pop	r20
    6a92:	3f 91       	pop	r19
    6a94:	2f 91       	pop	r18
    6a96:	0f 90       	pop	r0
    6a98:	0b be       	out	0x3b, r0	; 59
    6a9a:	0f 90       	pop	r0
    6a9c:	0f be       	out	0x3f, r0	; 63
    6a9e:	0f 90       	pop	r0
    6aa0:	1f 90       	pop	r1
    6aa2:	18 95       	reti

00006aa4 <__vector_67>:
/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    6aa4:	1f 92       	push	r1
    6aa6:	0f 92       	push	r0
    6aa8:	0f b6       	in	r0, 0x3f	; 63
    6aaa:	0f 92       	push	r0
    6aac:	0b b6       	in	r0, 0x3b	; 59
    6aae:	0f 92       	push	r0
    6ab0:	11 24       	eor	r1, r1
    6ab2:	2f 93       	push	r18
    6ab4:	3f 93       	push	r19
    6ab6:	4f 93       	push	r20
    6ab8:	5f 93       	push	r21
    6aba:	6f 93       	push	r22
    6abc:	7f 93       	push	r23
    6abe:	8f 93       	push	r24
    6ac0:	9f 93       	push	r25
    6ac2:	af 93       	push	r26
    6ac4:	bf 93       	push	r27
    6ac6:	ef 93       	push	r30
    6ac8:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    6aca:	0e 94 53 30 	call	0x60a6	; 0x60a6 <tg_kill>
/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    6ace:	ff 91       	pop	r31
    6ad0:	ef 91       	pop	r30
    6ad2:	bf 91       	pop	r27
    6ad4:	af 91       	pop	r26
    6ad6:	9f 91       	pop	r25
    6ad8:	8f 91       	pop	r24
    6ada:	7f 91       	pop	r23
    6adc:	6f 91       	pop	r22
    6ade:	5f 91       	pop	r21
    6ae0:	4f 91       	pop	r20
    6ae2:	3f 91       	pop	r19
    6ae4:	2f 91       	pop	r18
    6ae6:	0f 90       	pop	r0
    6ae8:	0b be       	out	0x3b, r0	; 59
    6aea:	0f 90       	pop	r0
    6aec:	0f be       	out	0x3f, r0	; 63
    6aee:	0f 90       	pop	r0
    6af0:	1f 90       	pop	r1
    6af2:	18 95       	reti

00006af4 <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    6af4:	1f 92       	push	r1
    6af6:	0f 92       	push	r0
    6af8:	0f b6       	in	r0, 0x3f	; 63
    6afa:	0f 92       	push	r0
    6afc:	0b b6       	in	r0, 0x3b	; 59
    6afe:	0f 92       	push	r0
    6b00:	11 24       	eor	r1, r1
    6b02:	2f 93       	push	r18
    6b04:	3f 93       	push	r19
    6b06:	4f 93       	push	r20
    6b08:	5f 93       	push	r21
    6b0a:	6f 93       	push	r22
    6b0c:	7f 93       	push	r23
    6b0e:	8f 93       	push	r24
    6b10:	9f 93       	push	r25
    6b12:	af 93       	push	r26
    6b14:	bf 93       	push	r27
    6b16:	ef 93       	push	r30
    6b18:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    6b1a:	0e 94 53 30 	call	0x60a6	; 0x60a6 <tg_kill>

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    6b1e:	ff 91       	pop	r31
    6b20:	ef 91       	pop	r30
    6b22:	bf 91       	pop	r27
    6b24:	af 91       	pop	r26
    6b26:	9f 91       	pop	r25
    6b28:	8f 91       	pop	r24
    6b2a:	7f 91       	pop	r23
    6b2c:	6f 91       	pop	r22
    6b2e:	5f 91       	pop	r21
    6b30:	4f 91       	pop	r20
    6b32:	3f 91       	pop	r19
    6b34:	2f 91       	pop	r18
    6b36:	0f 90       	pop	r0
    6b38:	0b be       	out	0x3b, r0	; 59
    6b3a:	0f 90       	pop	r0
    6b3c:	0f be       	out	0x3f, r0	; 63
    6b3e:	0f 90       	pop	r0
    6b40:	1f 90       	pop	r1
    6b42:	18 95       	reti

00006b44 <xio_rs485_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_rs485_init(const uint16_t control)
{
    6b44:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    6b46:	e8 2f       	mov	r30, r24
    6b48:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	fr.flags = XIO_FLAG_RS485_DEFS_gm;		// set flags to defaults & initial state
    6b4a:	87 e3       	ldi	r24, 0x37	; 55
    6b4c:	90 e0       	ldi	r25, 0x00	; 0
    6b4e:	80 93 22 24 	sts	0x2422, r24
    6b52:	90 93 23 24 	sts	0x2423, r25
		fr.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		fr.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    6b56:	26 ff       	sbrs	r18, 6
    6b58:	06 c0       	rjmp	.+12     	; 0x6b66 <xio_rs485_init+0x22>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    6b5a:	87 e3       	ldi	r24, 0x37	; 55
    6b5c:	90 e0       	ldi	r25, 0x00	; 0
    6b5e:	80 93 22 24 	sts	0x2422, r24
    6b62:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOBLOCK) {
    6b66:	27 ff       	sbrs	r18, 7
    6b68:	06 c0       	rjmp	.+12     	; 0x6b76 <xio_rs485_init+0x32>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    6b6a:	83 e3       	ldi	r24, 0x33	; 51
    6b6c:	90 e0       	ldi	r25, 0x00	; 0
    6b6e:	80 93 22 24 	sts	0x2422, r24
    6b72:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_ECHO) {
    6b76:	30 ff       	sbrs	r19, 0
    6b78:	09 c0       	rjmp	.+18     	; 0x6b8c <xio_rs485_init+0x48>
		fr.flags |= XIO_FLAG_ECHO_bm;
    6b7a:	80 91 22 24 	lds	r24, 0x2422
    6b7e:	90 91 23 24 	lds	r25, 0x2423
    6b82:	80 61       	ori	r24, 0x10	; 16
    6b84:	80 93 22 24 	sts	0x2422, r24
    6b88:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOECHO) {
    6b8c:	31 ff       	sbrs	r19, 1
    6b8e:	09 c0       	rjmp	.+18     	; 0x6ba2 <xio_rs485_init+0x5e>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    6b90:	80 91 22 24 	lds	r24, 0x2422
    6b94:	90 91 23 24 	lds	r25, 0x2423
    6b98:	8f 7e       	andi	r24, 0xEF	; 239
    6b9a:	80 93 22 24 	sts	0x2422, r24
    6b9e:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_CRLF) {
    6ba2:	32 ff       	sbrs	r19, 2
    6ba4:	09 c0       	rjmp	.+18     	; 0x6bb8 <xio_rs485_init+0x74>
		fr.flags |= XIO_FLAG_CRLF_bm;
    6ba6:	80 91 22 24 	lds	r24, 0x2422
    6baa:	90 91 23 24 	lds	r25, 0x2423
    6bae:	80 62       	ori	r24, 0x20	; 32
    6bb0:	80 93 22 24 	sts	0x2422, r24
    6bb4:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOCRLF) {
    6bb8:	33 ff       	sbrs	r19, 3
    6bba:	09 c0       	rjmp	.+18     	; 0x6bce <xio_rs485_init+0x8a>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    6bbc:	80 91 22 24 	lds	r24, 0x2422
    6bc0:	90 91 23 24 	lds	r25, 0x2423
    6bc4:	8f 7d       	andi	r24, 0xDF	; 223
    6bc6:	80 93 22 24 	sts	0x2422, r24
    6bca:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_LINEMODE) {
    6bce:	34 ff       	sbrs	r19, 4
    6bd0:	09 c0       	rjmp	.+18     	; 0x6be4 <xio_rs485_init+0xa0>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    6bd2:	80 91 22 24 	lds	r24, 0x2422
    6bd6:	90 91 23 24 	lds	r25, 0x2423
    6bda:	80 64       	ori	r24, 0x40	; 64
    6bdc:	80 93 22 24 	sts	0x2422, r24
    6be0:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOLINEMODE) {
    6be4:	35 ff       	sbrs	r19, 5
    6be6:	09 c0       	rjmp	.+18     	; 0x6bfa <xio_rs485_init+0xb6>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    6be8:	80 91 22 24 	lds	r24, 0x2422
    6bec:	90 91 23 24 	lds	r25, 0x2423
    6bf0:	8f 7b       	andi	r24, 0xBF	; 191
    6bf2:	80 93 22 24 	sts	0x2422, r24
    6bf6:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_SEMICOLONS) {
    6bfa:	36 ff       	sbrs	r19, 6
    6bfc:	09 c0       	rjmp	.+18     	; 0x6c10 <xio_rs485_init+0xcc>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    6bfe:	80 91 22 24 	lds	r24, 0x2422
    6c02:	90 91 23 24 	lds	r25, 0x2423
    6c06:	80 68       	ori	r24, 0x80	; 128
    6c08:	80 93 22 24 	sts	0x2422, r24
    6c0c:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    6c10:	37 ff       	sbrs	r19, 7
    6c12:	09 c0       	rjmp	.+18     	; 0x6c26 <xio_rs485_init+0xe2>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    6c14:	80 91 22 24 	lds	r24, 0x2422
    6c18:	90 91 23 24 	lds	r25, 0x2423
    6c1c:	8f 77       	andi	r24, 0x7F	; 127
    6c1e:	80 93 22 24 	sts	0x2422, r24
    6c22:	90 93 23 24 	sts	0x2423, r25
	}

	// character signals and error returns
	fr.sig = 0;
    6c26:	10 92 24 24 	sts	0x2424, r1
	dev_rs485.udata = &(fr.sig);				// bind sig register to FILE struct
    6c2a:	84 e2       	ldi	r24, 0x24	; 36
    6c2c:	94 e2       	ldi	r25, 0x24	; 36
    6c2e:	80 93 2b 20 	sts	0x202B, r24
    6c32:	90 93 2c 20 	sts	0x202C, r25

	// setup internal RX/TX buffers
	fr.rx_buf_head = 1;						// can't use location 0
    6c36:	81 e0       	ldi	r24, 0x01	; 1
    6c38:	80 93 2f 24 	sts	0x242F, r24
	fr.rx_buf_tail = 1;
    6c3c:	80 93 2e 24 	sts	0x242E, r24
	fr.tx_buf_head = 1;
    6c40:	80 93 31 24 	sts	0x2431, r24
	fr.tx_buf_tail = 1;
    6c44:	80 93 30 24 	sts	0x2430, r24
	fr.len = sizeof(fr.buf);					// offset to zero
    6c48:	82 e0       	ldi	r24, 0x02	; 2
    6c4a:	80 93 27 24 	sts	0x2427, r24

	// bindings
	fr.sig_func = &xio_null_signal;			// bind null signal handler
    6c4e:	86 e2       	ldi	r24, 0x26	; 38
    6c50:	98 e2       	ldi	r25, 0x28	; 40
    6c52:	80 93 2a 24 	sts	0x242A, r24
    6c56:	90 93 2b 24 	sts	0x242B, r25
	fr.line_func = &xio_null_line;			// bind null line handler
    6c5a:	89 e2       	ldi	r24, 0x29	; 41
    6c5c:	98 e2       	ldi	r25, 0x28	; 40
    6c5e:	80 93 2c 24 	sts	0x242C, r24
    6c62:	90 93 2d 24 	sts	0x242D, r25

	fr.usart = &RS485_USART;				// bind USART structure
    6c66:	80 eb       	ldi	r24, 0xB0	; 176
    6c68:	98 e0       	ldi	r25, 0x08	; 8
    6c6a:	80 93 57 24 	sts	0x2457, r24
    6c6e:	90 93 58 24 	sts	0x2458, r25
	fr.port = &RS485_PORT;					// bind PORT structure
    6c72:	80 e4       	ldi	r24, 0x40	; 64
    6c74:	96 e0       	ldi	r25, 0x06	; 6
    6c76:	80 93 59 24 	sts	0x2459, r24
    6c7a:	90 93 5a 24 	sts	0x245A, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    6c7e:	ee 23       	and	r30, r30
    6c80:	09 f4       	brne	.+2      	; 0x6c84 <xio_rs485_init+0x140>
    6c82:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    6c84:	8e 2f       	mov	r24, r30
    6c86:	90 e0       	ldi	r25, 0x00	; 0
    6c88:	fc 01       	movw	r30, r24
    6c8a:	ec 5d       	subi	r30, 0xDC	; 220
    6c8c:	f8 4f       	sbci	r31, 0xF8	; 248
    6c8e:	e4 91       	lpm	r30, Z+
    6c90:	a0 eb       	ldi	r26, 0xB0	; 176
    6c92:	b8 e0       	ldi	r27, 0x08	; 8
    6c94:	16 96       	adiw	r26, 0x06	; 6
    6c96:	ec 93       	st	X, r30
    6c98:	16 97       	sbiw	r26, 0x06	; 6
	fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    6c9a:	81 5d       	subi	r24, 0xD1	; 209
    6c9c:	98 4f       	sbci	r25, 0xF8	; 248
    6c9e:	fc 01       	movw	r30, r24
    6ca0:	84 91       	lpm	r24, Z+
    6ca2:	17 96       	adiw	r26, 0x07	; 7
    6ca4:	8c 93       	st	X, r24
    6ca6:	17 97       	sbiw	r26, 0x07	; 7
	fr.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx on USART
    6ca8:	88 e1       	ldi	r24, 0x18	; 24
    6caa:	14 96       	adiw	r26, 0x04	; 4
    6cac:	8c 93       	st	X, r24
    6cae:	14 97       	sbiw	r26, 0x04	; 4
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    6cb0:	81 e2       	ldi	r24, 0x21	; 33
    6cb2:	13 96       	adiw	r26, 0x03	; 3
    6cb4:	8c 93       	st	X, r24

	fr.port->DIRCLR = RS485_RX_bm;	// clr RX pin as input
    6cb6:	e0 e4       	ldi	r30, 0x40	; 64
    6cb8:	f6 e0       	ldi	r31, 0x06	; 6
    6cba:	80 e4       	ldi	r24, 0x40	; 64
    6cbc:	82 83       	std	Z+2, r24	; 0x02
	fr.port->DIRSET = RS485_TX_bm; 	// set TX pin as output
    6cbe:	80 e8       	ldi	r24, 0x80	; 128
    6cc0:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTSET = RS485_TX_bm;	// set TX HI as initial state
    6cc2:	85 83       	std	Z+5, r24	; 0x05
	fr.port->DIRSET = RS485_DE_bm; 	// Data Enable (TX) to output (TX enabled hi)
    6cc4:	90 e2       	ldi	r25, 0x20	; 32
    6cc6:	91 83       	std	Z+1, r25	; 0x01
	fr.port->DIRSET = RS485_RE_bm; 	// Recv Enable (RX) to output (RX enabled lo)
    6cc8:	80 e1       	ldi	r24, 0x10	; 16
    6cca:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTCLR = RS485_DE_bm;	// DE lo initially (TX disabled)
    6ccc:	96 83       	std	Z+6, r25	; 0x06
	fr.port->OUTCLR = RS485_RE_bm; 	// RE lo initially (RX enabled)
    6cce:	86 83       	std	Z+6, r24	; 0x06
}
    6cd0:	08 95       	ret

00006cd2 <xio_rs485_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_rs485_control(const uint16_t control, const int16_t arg)
{
    6cd2:	ac 01       	movw	r20, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    6cd4:	84 ff       	sbrs	r24, 4
    6cd6:	05 c0       	rjmp	.+10     	; 0x6ce2 <xio_rs485_control+0x10>
		fr.sig_func = (fptr_int_uint8)arg;
    6cd8:	60 93 2a 24 	sts	0x242A, r22
    6cdc:	70 93 2b 24 	sts	0x242B, r23
    6ce0:	8b c0       	rjmp	.+278    	; 0x6df8 <xio_rs485_control+0x126>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    6ce2:	85 ff       	sbrs	r24, 5
    6ce4:	05 c0       	rjmp	.+10     	; 0x6cf0 <xio_rs485_control+0x1e>
		fr.line_func = (fptr_int_char_p)arg;
    6ce6:	60 93 2c 24 	sts	0x242C, r22
    6cea:	70 93 2d 24 	sts	0x242D, r23
    6cee:	84 c0       	rjmp	.+264    	; 0x6df8 <xio_rs485_control+0x126>
		return (0);
	}
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    6cf0:	8f 70       	andi	r24, 0x0F	; 15
    6cf2:	90 70       	andi	r25, 0x00	; 0
    6cf4:	00 97       	sbiw	r24, 0x00	; 0
    6cf6:	91 f0       	breq	.+36     	; 0x6d1c <xio_rs485_control+0x4a>
		fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    6cf8:	a0 91 57 24 	lds	r26, 0x2457
    6cfc:	b0 91 58 24 	lds	r27, 0x2458
    6d00:	9c 01       	movw	r18, r24
    6d02:	2c 5d       	subi	r18, 0xDC	; 220
    6d04:	38 4f       	sbci	r19, 0xF8	; 248
    6d06:	f9 01       	movw	r30, r18
    6d08:	24 91       	lpm	r18, Z+
    6d0a:	16 96       	adiw	r26, 0x06	; 6
    6d0c:	2c 93       	st	X, r18
    6d0e:	16 97       	sbiw	r26, 0x06	; 6
		fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    6d10:	81 5d       	subi	r24, 0xD1	; 209
    6d12:	98 4f       	sbci	r25, 0xF8	; 248
    6d14:	fc 01       	movw	r30, r24
    6d16:	84 91       	lpm	r24, Z+
    6d18:	17 96       	adiw	r26, 0x07	; 7
    6d1a:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    6d1c:	46 ff       	sbrs	r20, 6
    6d1e:	09 c0       	rjmp	.+18     	; 0x6d32 <xio_rs485_control+0x60>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    6d20:	80 91 22 24 	lds	r24, 0x2422
    6d24:	90 91 23 24 	lds	r25, 0x2423
    6d28:	84 60       	ori	r24, 0x04	; 4
    6d2a:	80 93 22 24 	sts	0x2422, r24
    6d2e:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOBLOCK) {
    6d32:	47 ff       	sbrs	r20, 7
    6d34:	09 c0       	rjmp	.+18     	; 0x6d48 <xio_rs485_control+0x76>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    6d36:	80 91 22 24 	lds	r24, 0x2422
    6d3a:	90 91 23 24 	lds	r25, 0x2423
    6d3e:	8b 7f       	andi	r24, 0xFB	; 251
    6d40:	80 93 22 24 	sts	0x2422, r24
    6d44:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_ECHO) {
    6d48:	50 ff       	sbrs	r21, 0
    6d4a:	09 c0       	rjmp	.+18     	; 0x6d5e <xio_rs485_control+0x8c>
		fr.flags |= XIO_FLAG_ECHO_bm;
    6d4c:	80 91 22 24 	lds	r24, 0x2422
    6d50:	90 91 23 24 	lds	r25, 0x2423
    6d54:	80 61       	ori	r24, 0x10	; 16
    6d56:	80 93 22 24 	sts	0x2422, r24
    6d5a:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOECHO) {
    6d5e:	51 ff       	sbrs	r21, 1
    6d60:	09 c0       	rjmp	.+18     	; 0x6d74 <xio_rs485_control+0xa2>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    6d62:	80 91 22 24 	lds	r24, 0x2422
    6d66:	90 91 23 24 	lds	r25, 0x2423
    6d6a:	8f 7e       	andi	r24, 0xEF	; 239
    6d6c:	80 93 22 24 	sts	0x2422, r24
    6d70:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_CRLF) {
    6d74:	52 ff       	sbrs	r21, 2
    6d76:	09 c0       	rjmp	.+18     	; 0x6d8a <xio_rs485_control+0xb8>
		fr.flags |= XIO_FLAG_CRLF_bm;
    6d78:	80 91 22 24 	lds	r24, 0x2422
    6d7c:	90 91 23 24 	lds	r25, 0x2423
    6d80:	80 62       	ori	r24, 0x20	; 32
    6d82:	80 93 22 24 	sts	0x2422, r24
    6d86:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOCRLF) {
    6d8a:	53 ff       	sbrs	r21, 3
    6d8c:	09 c0       	rjmp	.+18     	; 0x6da0 <xio_rs485_control+0xce>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    6d8e:	80 91 22 24 	lds	r24, 0x2422
    6d92:	90 91 23 24 	lds	r25, 0x2423
    6d96:	8f 7d       	andi	r24, 0xDF	; 223
    6d98:	80 93 22 24 	sts	0x2422, r24
    6d9c:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_LINEMODE) {
    6da0:	54 ff       	sbrs	r21, 4
    6da2:	09 c0       	rjmp	.+18     	; 0x6db6 <xio_rs485_control+0xe4>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    6da4:	80 91 22 24 	lds	r24, 0x2422
    6da8:	90 91 23 24 	lds	r25, 0x2423
    6dac:	80 64       	ori	r24, 0x40	; 64
    6dae:	80 93 22 24 	sts	0x2422, r24
    6db2:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOLINEMODE) {
    6db6:	55 ff       	sbrs	r21, 5
    6db8:	09 c0       	rjmp	.+18     	; 0x6dcc <xio_rs485_control+0xfa>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    6dba:	80 91 22 24 	lds	r24, 0x2422
    6dbe:	90 91 23 24 	lds	r25, 0x2423
    6dc2:	8f 7b       	andi	r24, 0xBF	; 191
    6dc4:	80 93 22 24 	sts	0x2422, r24
    6dc8:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_SEMICOLONS) {
    6dcc:	56 ff       	sbrs	r21, 6
    6dce:	09 c0       	rjmp	.+18     	; 0x6de2 <xio_rs485_control+0x110>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    6dd0:	80 91 22 24 	lds	r24, 0x2422
    6dd4:	90 91 23 24 	lds	r25, 0x2423
    6dd8:	80 68       	ori	r24, 0x80	; 128
    6dda:	80 93 22 24 	sts	0x2422, r24
    6dde:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    6de2:	57 ff       	sbrs	r21, 7
    6de4:	09 c0       	rjmp	.+18     	; 0x6df8 <xio_rs485_control+0x126>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    6de6:	80 91 22 24 	lds	r24, 0x2422
    6dea:	90 91 23 24 	lds	r25, 0x2423
    6dee:	8f 77       	andi	r24, 0x7F	; 127
    6df0:	80 93 22 24 	sts	0x2422, r24
    6df4:	90 93 23 24 	sts	0x2423, r25
	}
	return (0);
}
    6df8:	80 e0       	ldi	r24, 0x00	; 0
    6dfa:	08 95       	ret

00006dfc <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)		//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    6dfc:	1f 92       	push	r1
    6dfe:	0f 92       	push	r0
    6e00:	0f b6       	in	r0, 0x3f	; 63
    6e02:	0f 92       	push	r0
    6e04:	0b b6       	in	r0, 0x3b	; 59
    6e06:	0f 92       	push	r0
    6e08:	11 24       	eor	r1, r1
    6e0a:	8f 93       	push	r24
    6e0c:	9f 93       	push	r25
    6e0e:	af 93       	push	r26
    6e10:	bf 93       	push	r27
    6e12:	ef 93       	push	r30
    6e14:	ff 93       	push	r31
	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// advance buffer head with wrap
    6e16:	80 91 2f 24 	lds	r24, 0x242F
    6e1a:	81 50       	subi	r24, 0x01	; 1
    6e1c:	80 93 2f 24 	sts	0x242F, r24
    6e20:	80 91 2f 24 	lds	r24, 0x242F
    6e24:	88 23       	and	r24, r24
    6e26:	19 f4       	brne	.+6      	; 0x6e2e <__vector_28+0x32>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6e28:	81 e1       	ldi	r24, 0x11	; 17
    6e2a:	80 93 2f 24 	sts	0x242F, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    6e2e:	90 91 2f 24 	lds	r25, 0x242F
    6e32:	80 91 2e 24 	lds	r24, 0x242E
    6e36:	98 17       	cp	r25, r24
    6e38:	61 f0       	breq	.+24     	; 0x6e52 <__vector_28+0x56>
		fr.rx_buf[fr.rx_buf_head] = fr.usart->DATA;// (= USARTC0.DATA;)
    6e3a:	e0 91 2f 24 	lds	r30, 0x242F
    6e3e:	f0 e0       	ldi	r31, 0x00	; 0
    6e40:	a0 91 57 24 	lds	r26, 0x2457
    6e44:	b0 91 58 24 	lds	r27, 0x2458
    6e48:	8c 91       	ld	r24, X
    6e4a:	ee 5d       	subi	r30, 0xDE	; 222
    6e4c:	fb 4d       	sbci	r31, 0xDB	; 219
    6e4e:	81 8b       	std	Z+17, r24	; 0x11
    6e50:	0c c0       	rjmp	.+24     	; 0x6e6a <__vector_28+0x6e>
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6e52:	80 91 2f 24 	lds	r24, 0x242F
    6e56:	8f 5f       	subi	r24, 0xFF	; 255
    6e58:	80 93 2f 24 	sts	0x242F, r24
    6e5c:	80 91 2f 24 	lds	r24, 0x242F
    6e60:	82 31       	cpi	r24, 0x12	; 18
    6e62:	18 f0       	brcs	.+6      	; 0x6e6a <__vector_28+0x6e>
		fr.rx_buf_head = 1;
    6e64:	81 e0       	ldi	r24, 0x01	; 1
    6e66:	80 93 2f 24 	sts	0x242F, r24
	}
	// activate flow control here or before it gets to this level
}
    6e6a:	ff 91       	pop	r31
    6e6c:	ef 91       	pop	r30
    6e6e:	bf 91       	pop	r27
    6e70:	af 91       	pop	r26
    6e72:	9f 91       	pop	r25
    6e74:	8f 91       	pop	r24
    6e76:	0f 90       	pop	r0
    6e78:	0b be       	out	0x3b, r0	; 59
    6e7a:	0f 90       	pop	r0
    6e7c:	0f be       	out	0x3f, r0	; 63
    6e7e:	0f 90       	pop	r0
    6e80:	1f 90       	pop	r1
    6e82:	18 95       	reti

00006e84 <xio_rs485_queue_RX_char>:
/*
 * xio_rs485_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_rs485_queue_RX_char(const char c)
{
    6e84:	28 2f       	mov	r18, r24
	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// wrap condition
    6e86:	80 91 2f 24 	lds	r24, 0x242F
    6e8a:	81 50       	subi	r24, 0x01	; 1
    6e8c:	80 93 2f 24 	sts	0x242F, r24
    6e90:	80 91 2f 24 	lds	r24, 0x242F
    6e94:	88 23       	and	r24, r24
    6e96:	19 f4       	brne	.+6      	; 0x6e9e <xio_rs485_queue_RX_char+0x1a>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6e98:	81 e1       	ldi	r24, 0x11	; 17
    6e9a:	80 93 2f 24 	sts	0x242F, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    6e9e:	90 91 2f 24 	lds	r25, 0x242F
    6ea2:	80 91 2e 24 	lds	r24, 0x242E
    6ea6:	98 17       	cp	r25, r24
    6ea8:	39 f0       	breq	.+14     	; 0x6eb8 <xio_rs485_queue_RX_char+0x34>
		fr.rx_buf[fr.rx_buf_head] = c;			// FAKE INPUT DATA
    6eaa:	e0 91 2f 24 	lds	r30, 0x242F
    6eae:	f0 e0       	ldi	r31, 0x00	; 0
    6eb0:	ee 5d       	subi	r30, 0xDE	; 222
    6eb2:	fb 4d       	sbci	r31, 0xDB	; 219
    6eb4:	21 8b       	std	Z+17, r18	; 0x11
    6eb6:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6eb8:	80 91 2f 24 	lds	r24, 0x242F
    6ebc:	8f 5f       	subi	r24, 0xFF	; 255
    6ebe:	80 93 2f 24 	sts	0x242F, r24
    6ec2:	80 91 2f 24 	lds	r24, 0x242F
    6ec6:	82 31       	cpi	r24, 0x12	; 18
    6ec8:	18 f0       	brcs	.+6      	; 0x6ed0 <xio_rs485_queue_RX_char+0x4c>
		fr.rx_buf_head = 1;
    6eca:	81 e0       	ldi	r24, 0x01	; 1
    6ecc:	80 93 2f 24 	sts	0x242F, r24
    6ed0:	08 95       	ret

00006ed2 <xio_rs485_queue_RX_string>:
/*
 * xio_rs485_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_rs485_queue_RX_string(char *buf)
{
    6ed2:	1f 93       	push	r17
    6ed4:	cf 93       	push	r28
    6ed6:	df 93       	push	r29
    6ed8:	ec 01       	movw	r28, r24
    6eda:	10 e0       	ldi	r17, 0x00	; 0
    6edc:	02 c0       	rjmp	.+4      	; 0x6ee2 <xio_rs485_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_rs485_queue_RX_char(c);
    6ede:	0e 94 42 37 	call	0x6e84	; 0x6e84 <xio_rs485_queue_RX_char>
void xio_rs485_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    6ee2:	fe 01       	movw	r30, r28
    6ee4:	e1 0f       	add	r30, r17
    6ee6:	f1 1d       	adc	r31, r1
    6ee8:	80 81       	ld	r24, Z
    6eea:	1f 5f       	subi	r17, 0xFF	; 255
    6eec:	88 23       	and	r24, r24
    6eee:	b9 f7       	brne	.-18     	; 0x6ede <xio_rs485_queue_RX_string+0xc>
		xio_rs485_queue_RX_char(c);
	}
}
    6ef0:	df 91       	pop	r29
    6ef2:	cf 91       	pop	r28
    6ef4:	1f 91       	pop	r17
    6ef6:	08 95       	ret

00006ef8 <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC0 data register empty
{
    6ef8:	1f 92       	push	r1
    6efa:	0f 92       	push	r0
    6efc:	0f b6       	in	r0, 0x3f	; 63
    6efe:	0f 92       	push	r0
    6f00:	0b b6       	in	r0, 0x3b	; 59
    6f02:	0f 92       	push	r0
    6f04:	11 24       	eor	r1, r1
    6f06:	8f 93       	push	r24
    6f08:	9f 93       	push	r25
    6f0a:	af 93       	push	r26
    6f0c:	bf 93       	push	r27
    6f0e:	ef 93       	push	r30
    6f10:	ff 93       	push	r31
	if (fr.tx_buf_head == fr.tx_buf_tail) {			// buffer empty - disable ints
    6f12:	90 91 31 24 	lds	r25, 0x2431
    6f16:	80 91 30 24 	lds	r24, 0x2430
    6f1a:	98 17       	cp	r25, r24
    6f1c:	39 f4       	brne	.+14     	; 0x6f2c <__vector_29+0x34>
		fr.usart->CTRLA = USART_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    6f1e:	e0 91 57 24 	lds	r30, 0x2457
    6f22:	f0 91 58 24 	lds	r31, 0x2458
    6f26:	80 e2       	ldi	r24, 0x20	; 32
    6f28:	83 83       	std	Z+3, r24	; 0x03
    6f2a:	1e c0       	rjmp	.+60     	; 0x6f68 <__vector_29+0x70>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(fr.flags)) {
    6f2c:	80 91 22 24 	lds	r24, 0x2422
    6f30:	90 91 23 24 	lds	r25, 0x2423
    6f34:	93 fd       	sbrc	r25, 3
    6f36:	18 c0       	rjmp	.+48     	; 0x6f68 <__vector_29+0x70>
		if (--(fr.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    6f38:	80 91 30 24 	lds	r24, 0x2430
    6f3c:	81 50       	subi	r24, 0x01	; 1
    6f3e:	80 93 30 24 	sts	0x2430, r24
    6f42:	80 91 30 24 	lds	r24, 0x2430
    6f46:	88 23       	and	r24, r24
    6f48:	19 f4       	brne	.+6      	; 0x6f50 <__vector_29+0x58>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6f4a:	81 e1       	ldi	r24, 0x11	; 17
    6f4c:	80 93 30 24 	sts	0x2430, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];	// write char to TX DATA register
    6f50:	e0 91 57 24 	lds	r30, 0x2457
    6f54:	f0 91 58 24 	lds	r31, 0x2458
    6f58:	a0 91 30 24 	lds	r26, 0x2430
    6f5c:	b0 e0       	ldi	r27, 0x00	; 0
    6f5e:	ae 5d       	subi	r26, 0xDE	; 222
    6f60:	bb 4d       	sbci	r27, 0xDB	; 219
    6f62:	93 96       	adiw	r26, 0x23	; 35
    6f64:	8c 91       	ld	r24, X
    6f66:	80 83       	st	Z, r24
	}
}
    6f68:	ff 91       	pop	r31
    6f6a:	ef 91       	pop	r30
    6f6c:	bf 91       	pop	r27
    6f6e:	af 91       	pop	r26
    6f70:	9f 91       	pop	r25
    6f72:	8f 91       	pop	r24
    6f74:	0f 90       	pop	r0
    6f76:	0b be       	out	0x3b, r0	; 59
    6f78:	0f 90       	pop	r0
    6f7a:	0f be       	out	0x3f, r0	; 63
    6f7c:	0f 90       	pop	r0
    6f7e:	1f 90       	pop	r1
    6f80:	18 95       	reti

00006f82 <xio_rs485_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_rs485_putc(const char c, FILE *stream)
{
    6f82:	48 2f       	mov	r20, r24
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(fr.flags)) {
    6f84:	20 91 22 24 	lds	r18, 0x2422
    6f88:	30 91 23 24 	lds	r19, 0x2423
    6f8c:	d9 01       	movw	r26, r18
    6f8e:	a4 70       	andi	r26, 0x04	; 4
    6f90:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	fr.tx_buf_head = fr.next_tx_buf_head;			// accept the next buffer head value
	fr.tx_buf[fr.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(fr.flags) && (c == '\n')) {			// detect LF and add a CR
    6f92:	b9 01       	movw	r22, r18
    6f94:	60 72       	andi	r22, 0x20	; 32
    6f96:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_rs485_putc(const char c, FILE *stream)
{
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
    6f98:	90 91 31 24 	lds	r25, 0x2431
    6f9c:	91 50       	subi	r25, 0x01	; 1
    6f9e:	c1 f4       	brne	.+48     	; 0x6fd0 <xio_rs485_putc+0x4e>
    6fa0:	91 e1       	ldi	r25, 0x11	; 17
    6fa2:	16 c0       	rjmp	.+44     	; 0x6fd0 <xio_rs485_putc+0x4e>
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(fr.flags)) {
    6fa4:	10 97       	sbiw	r26, 0x00	; 0
    6fa6:	61 f0       	breq	.+24     	; 0x6fc0 <xio_rs485_putc+0x3e>
			sleep_mode();
    6fa8:	80 91 48 00 	lds	r24, 0x0048
    6fac:	81 60       	ori	r24, 0x01	; 1
    6fae:	80 93 48 00 	sts	0x0048, r24
    6fb2:	88 95       	sleep
    6fb4:	80 91 48 00 	lds	r24, 0x0048
    6fb8:	8e 7f       	andi	r24, 0xFE	; 254
    6fba:	80 93 48 00 	sts	0x0048, r24
    6fbe:	08 c0       	rjmp	.+16     	; 0x6fd0 <xio_rs485_putc+0x4e>
    6fc0:	90 93 32 24 	sts	0x2432, r25
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
    6fc4:	83 e0       	ldi	r24, 0x03	; 3
    6fc6:	80 93 24 24 	sts	0x2424, r24
    6fca:	2f ef       	ldi	r18, 0xFF	; 255
    6fcc:	3f ef       	ldi	r19, 0xFF	; 255
    6fce:	54 c0       	rjmp	.+168    	; 0x7078 <xio_rs485_putc+0xf6>
int xio_rs485_putc(const char c, FILE *stream)
{
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
    6fd0:	80 91 30 24 	lds	r24, 0x2430
    6fd4:	98 17       	cp	r25, r24
    6fd6:	31 f3       	breq	.-52     	; 0x6fa4 <xio_rs485_putc+0x22>
			fr.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	fr.tx_buf_head = fr.next_tx_buf_head;			// accept the next buffer head value
    6fd8:	90 93 31 24 	sts	0x2431, r25
	fr.tx_buf[fr.tx_buf_head] = c;				// ...and write char to buffer
    6fdc:	e0 91 31 24 	lds	r30, 0x2431
    6fe0:	f0 e0       	ldi	r31, 0x00	; 0
    6fe2:	ee 5d       	subi	r30, 0xDE	; 222
    6fe4:	fb 4d       	sbci	r31, 0xDB	; 219
    6fe6:	43 a3       	std	Z+35, r20	; 0x23

	if (CRLF(fr.flags) && (c == '\n')) {			// detect LF and add a CR
    6fe8:	61 15       	cp	r22, r1
    6fea:	71 05       	cpc	r23, r1
    6fec:	21 f0       	breq	.+8      	; 0x6ff6 <xio_rs485_putc+0x74>
    6fee:	4a 30       	cpi	r20, 0x0A	; 10
    6ff0:	11 f4       	brne	.+4      	; 0x6ff6 <xio_rs485_putc+0x74>
    6ff2:	4d e0       	ldi	r20, 0x0D	; 13
    6ff4:	d1 cf       	rjmp	.-94     	; 0x6f98 <xio_rs485_putc+0x16>
    6ff6:	90 93 32 24 	sts	0x2432, r25
		return xio_rs485_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (fr.usart->STATUS & 0x20) {
    6ffa:	a0 91 57 24 	lds	r26, 0x2457
    6ffe:	b0 91 58 24 	lds	r27, 0x2458
    7002:	11 96       	adiw	r26, 0x01	; 1
    7004:	8c 91       	ld	r24, X
    7006:	11 97       	sbiw	r26, 0x01	; 1
    7008:	85 ff       	sbrs	r24, 5
    700a:	27 c0       	rjmp	.+78     	; 0x705a <xio_rs485_putc+0xd8>
		if (fr.tx_buf_head == fr.tx_buf_tail) {	// buf might be empty if IRQ got it
    700c:	90 91 31 24 	lds	r25, 0x2431
    7010:	80 91 30 24 	lds	r24, 0x2430
    7014:	98 17       	cp	r25, r24
    7016:	71 f1       	breq	.+92     	; 0x7074 <xio_rs485_putc+0xf2>
			return (0);
		}
		fr.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    7018:	38 60       	ori	r19, 0x08	; 8
    701a:	20 93 22 24 	sts	0x2422, r18
    701e:	30 93 23 24 	sts	0x2423, r19
		if (--(fr.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    7022:	80 91 30 24 	lds	r24, 0x2430
    7026:	81 50       	subi	r24, 0x01	; 1
    7028:	80 93 30 24 	sts	0x2430, r24
    702c:	80 91 30 24 	lds	r24, 0x2430
    7030:	88 23       	and	r24, r24
    7032:	19 f4       	brne	.+6      	; 0x703a <xio_rs485_putc+0xb8>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    7034:	81 e1       	ldi	r24, 0x11	; 17
    7036:	80 93 30 24 	sts	0x2430, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];// write char to TX DATA register
    703a:	e0 91 30 24 	lds	r30, 0x2430
    703e:	f0 e0       	ldi	r31, 0x00	; 0
    7040:	ee 5d       	subi	r30, 0xDE	; 222
    7042:	fb 4d       	sbci	r31, 0xDB	; 219
    7044:	83 a1       	ldd	r24, Z+35	; 0x23
    7046:	8c 93       	st	X, r24
		fr.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    7048:	80 91 22 24 	lds	r24, 0x2422
    704c:	90 91 23 24 	lds	r25, 0x2423
    7050:	97 7f       	andi	r25, 0xF7	; 247
    7052:	80 93 22 24 	sts	0x2422, r24
    7056:	90 93 23 24 	sts	0x2423, r25
	}
	// enable interrupts regardless
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    705a:	e0 91 57 24 	lds	r30, 0x2457
    705e:	f0 91 58 24 	lds	r31, 0x2458
    7062:	81 e2       	ldi	r24, 0x21	; 33
    7064:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    7066:	80 91 a2 00 	lds	r24, 0x00A2
    706a:	81 60       	ori	r24, 0x01	; 1
    706c:	e0 ea       	ldi	r30, 0xA0	; 160
    706e:	f0 e0       	ldi	r31, 0x00	; 0
    7070:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    7072:	78 94       	sei
    7074:	20 e0       	ldi	r18, 0x00	; 0
    7076:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    7078:	c9 01       	movw	r24, r18
    707a:	08 95       	ret

0000707c <xio_rs485_getc>:
 */

int xio_rs485_getc(FILE *stream)
{
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(fr.flags)) {
    707c:	20 91 22 24 	lds	r18, 0x2422
    7080:	30 91 23 24 	lds	r19, 0x2423
    7084:	24 70       	andi	r18, 0x04	; 4
    7086:	30 70       	andi	r19, 0x00	; 0
    7088:	15 c0       	rjmp	.+42     	; 0x70b4 <xio_rs485_getc+0x38>
    708a:	21 15       	cp	r18, r1
    708c:	31 05       	cpc	r19, r1
    708e:	61 f0       	breq	.+24     	; 0x70a8 <xio_rs485_getc+0x2c>
			sleep_mode();
    7090:	80 91 48 00 	lds	r24, 0x0048
    7094:	81 60       	ori	r24, 0x01	; 1
    7096:	80 93 48 00 	sts	0x0048, r24
    709a:	88 95       	sleep
    709c:	80 91 48 00 	lds	r24, 0x0048
    70a0:	8e 7f       	andi	r24, 0xFE	; 254
    70a2:	80 93 48 00 	sts	0x0048, r24
    70a6:	06 c0       	rjmp	.+12     	; 0x70b4 <xio_rs485_getc+0x38>
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
    70a8:	83 e0       	ldi	r24, 0x03	; 3
    70aa:	80 93 24 24 	sts	0x2424, r24
    70ae:	2f ef       	ldi	r18, 0xFF	; 255
    70b0:	3f ef       	ldi	r19, 0xFF	; 255
    70b2:	26 c0       	rjmp	.+76     	; 0x7100 <xio_rs485_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_rs485_getc(FILE *stream)
{
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
    70b4:	90 91 2f 24 	lds	r25, 0x242F
    70b8:	80 91 2e 24 	lds	r24, 0x242E
    70bc:	98 17       	cp	r25, r24
    70be:	29 f3       	breq	.-54     	; 0x708a <xio_rs485_getc+0xe>
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    70c0:	80 91 2e 24 	lds	r24, 0x242E
    70c4:	81 50       	subi	r24, 0x01	; 1
    70c6:	80 93 2e 24 	sts	0x242E, r24
    70ca:	80 91 2e 24 	lds	r24, 0x242E
    70ce:	88 23       	and	r24, r24
    70d0:	19 f4       	brne	.+6      	; 0x70d8 <xio_rs485_getc+0x5c>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    70d2:	81 e1       	ldi	r24, 0x11	; 17
    70d4:	80 93 2e 24 	sts	0x242E, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    70d8:	e0 91 2e 24 	lds	r30, 0x242E
    70dc:	f0 e0       	ldi	r31, 0x00	; 0
    70de:	ee 5d       	subi	r30, 0xDE	; 222
    70e0:	fb 4d       	sbci	r31, 0xDB	; 219
    70e2:	81 89       	ldd	r24, Z+17	; 0x11
    70e4:	8f 77       	andi	r24, 0x7F	; 127
    70e6:	80 93 25 24 	sts	0x2425, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[fr.c])))());
    70ea:	90 e0       	ldi	r25, 0x00	; 0
    70ec:	88 0f       	add	r24, r24
    70ee:	99 1f       	adc	r25, r25
    70f0:	8e 5d       	subi	r24, 0xDE	; 222
    70f2:	92 4e       	sbci	r25, 0xE2	; 226
    70f4:	fc 01       	movw	r30, r24
    70f6:	25 91       	lpm	r18, Z+
    70f8:	34 91       	lpm	r19, Z+
    70fa:	f9 01       	movw	r30, r18
    70fc:	19 95       	eicall
    70fe:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    7100:	c9 01       	movw	r24, r18
    7102:	08 95       	ret

00007104 <_getc_char>:

/* xio_rs485_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    7104:	80 91 22 24 	lds	r24, 0x2422
    7108:	84 ff       	sbrs	r24, 4
    710a:	08 c0       	rjmp	.+16     	; 0x711c <_getc_char+0x18>
    710c:	60 91 69 25 	lds	r22, 0x2569
    7110:	70 91 6a 25 	lds	r23, 0x256A
    7114:	80 91 25 24 	lds	r24, 0x2425
    7118:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <xio_rs485_putc>
	return(fr.c);
}
    711c:	80 91 25 24 	lds	r24, 0x2425
    7120:	90 e0       	ldi	r25, 0x00	; 0
    7122:	08 95       	ret

00007124 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(fr.flags)) fr.c = '\n';
    7124:	90 91 22 24 	lds	r25, 0x2422
    7128:	96 ff       	sbrs	r25, 6
    712a:	03 c0       	rjmp	.+6      	; 0x7132 <_getc_NEWLINE+0xe>
    712c:	8a e0       	ldi	r24, 0x0A	; 10
    712e:	80 93 25 24 	sts	0x2425, r24
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    7132:	94 ff       	sbrs	r25, 4
    7134:	08 c0       	rjmp	.+16     	; 0x7146 <_getc_NEWLINE+0x22>
    7136:	60 91 69 25 	lds	r22, 0x2569
    713a:	70 91 6a 25 	lds	r23, 0x256A
    713e:	80 91 25 24 	lds	r24, 0x2425
    7142:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <xio_rs485_putc>
	return(fr.c);
}
    7146:	80 91 25 24 	lds	r24, 0x2425
    714a:	90 e0       	ldi	r25, 0x00	; 0
    714c:	08 95       	ret

0000714e <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(fr.flags)) {
    714e:	80 91 22 24 	lds	r24, 0x2422
    7152:	87 ff       	sbrs	r24, 7
    7154:	03 c0       	rjmp	.+6      	; 0x715c <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    7156:	0e 94 92 38 	call	0x7124	; 0x7124 <_getc_NEWLINE>
    715a:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    715c:	0e 94 82 38 	call	0x7104	; 0x7104 <_getc_char>
}
    7160:	08 95       	ret

00007162 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	fr.sig = XIO_SIG_DELETE;
    7162:	8a e0       	ldi	r24, 0x0A	; 10
    7164:	80 93 24 24 	sts	0x2424, r24
	return(_FDEV_ERR);
}
    7168:	8f ef       	ldi	r24, 0xFF	; 255
    716a:	9f ef       	ldi	r25, 0xFF	; 255
    716c:	08 95       	ret

0000716e <_getc_KILL>:

static int _getc_KILL(void)
{
	fr.sig = XIO_SIG_KILL;
    716e:	84 e0       	ldi	r24, 0x04	; 4
    7170:	80 93 24 24 	sts	0x2424, r24
	return(_FDEV_ERR);
}
    7174:	8f ef       	ldi	r24, 0xFF	; 255
    7176:	9f ef       	ldi	r25, 0xFF	; 255
    7178:	08 95       	ret

0000717a <_getc_PAUSE>:

static int _getc_PAUSE(void)
{
	fr.sig = XIO_SIG_PAUSE;
    717a:	86 e0       	ldi	r24, 0x06	; 6
    717c:	80 93 24 24 	sts	0x2424, r24
	return(_FDEV_ERR);
}
    7180:	8f ef       	ldi	r24, 0xFF	; 255
    7182:	9f ef       	ldi	r25, 0xFF	; 255
    7184:	08 95       	ret

00007186 <_getc_RESUME>:

static int _getc_RESUME(void)
{
	fr.sig = XIO_SIG_RESUME;
    7186:	87 e0       	ldi	r24, 0x07	; 7
    7188:	80 93 24 24 	sts	0x2424, r24
	return(_FDEV_ERR);
}
    718c:	8f ef       	ldi	r24, 0xFF	; 255
    718e:	9f ef       	ldi	r25, 0xFF	; 255
    7190:	08 95       	ret

00007192 <_getc_SHIFTOUT>:

static int _getc_SHIFTOUT(void)
{
	fr.sig = XIO_SIG_SHIFTOUT;
    7192:	88 e0       	ldi	r24, 0x08	; 8
    7194:	80 93 24 24 	sts	0x2424, r24
	return(_FDEV_ERR);
}
    7198:	8f ef       	ldi	r24, 0xFF	; 255
    719a:	9f ef       	ldi	r25, 0xFF	; 255
    719c:	08 95       	ret

0000719e <_getc_SHIFTIN>:

static int _getc_SHIFTIN(void)
{
	fr.sig = XIO_SIG_SHIFTIN;
    719e:	89 e0       	ldi	r24, 0x09	; 9
    71a0:	80 93 24 24 	sts	0x2424, r24
	return(_FDEV_ERR);
}
    71a4:	8f ef       	ldi	r24, 0xFF	; 255
    71a6:	9f ef       	ldi	r25, 0xFF	; 255
    71a8:	08 95       	ret

000071aa <xio_rs485_readln>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_rs485_readln(char *buf, uint8_t len)
{
	if (!IN_LINE(fr.flags)) {					// first time thru initializations
    71aa:	20 91 22 24 	lds	r18, 0x2422
    71ae:	30 91 23 24 	lds	r19, 0x2423
    71b2:	36 fd       	sbrc	r19, 6
    71b4:	0d c0       	rjmp	.+26     	; 0x71d0 <xio_rs485_readln+0x26>
		fr.i = 0;								// zero buffer
    71b6:	10 92 26 24 	sts	0x2426, r1
		fr.len = len;							// save arg into struct 
    71ba:	60 93 27 24 	sts	0x2427, r22
		fr.buf = buf;							// save arg into struct 
    71be:	80 93 28 24 	sts	0x2428, r24
    71c2:	90 93 29 24 	sts	0x2429, r25
//		fr.sig = XIO_SIG_OK;					// no signal action
		fr.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    71c6:	30 64       	ori	r19, 0x40	; 64
    71c8:	20 93 22 24 	sts	0x2422, r18
    71cc:	30 93 23 24 	sts	0x2423, r19
	}
	if (fr.rx_buf_head == fr.rx_buf_tail) {		// RX ISR buffer empty
    71d0:	90 91 2f 24 	lds	r25, 0x242F
    71d4:	80 91 2e 24 	lds	r24, 0x242E
    71d8:	98 17       	cp	r25, r24
    71da:	19 f4       	brne	.+6      	; 0x71e2 <xio_rs485_readln+0x38>
    71dc:	22 e0       	ldi	r18, 0x02	; 2
    71de:	30 e0       	ldi	r19, 0x00	; 0
    71e0:	20 c0       	rjmp	.+64     	; 0x7222 <xio_rs485_readln+0x78>
//		fr.sig = XIO_SIG_WOULDBLOCK;
		return(TG_CONTINUE);
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    71e2:	80 91 2e 24 	lds	r24, 0x242E
    71e6:	81 50       	subi	r24, 0x01	; 1
    71e8:	80 93 2e 24 	sts	0x242E, r24
    71ec:	80 91 2e 24 	lds	r24, 0x242E
    71f0:	88 23       	and	r24, r24
    71f2:	19 f4       	brne	.+6      	; 0x71fa <xio_rs485_readln+0x50>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    71f4:	81 e1       	ldi	r24, 0x11	; 17
    71f6:	80 93 2e 24 	sts	0x242E, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    71fa:	e0 91 2e 24 	lds	r30, 0x242E
    71fe:	f0 e0       	ldi	r31, 0x00	; 0
    7200:	ee 5d       	subi	r30, 0xDE	; 222
    7202:	fb 4d       	sbci	r31, 0xDB	; 219
    7204:	81 89       	ldd	r24, Z+17	; 0x11
    7206:	8f 77       	andi	r24, 0x7F	; 127
    7208:	80 93 25 24 	sts	0x2425, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[fr.c])))()); // dispatch on character
    720c:	90 e0       	ldi	r25, 0x00	; 0
    720e:	88 0f       	add	r24, r24
    7210:	99 1f       	adc	r25, r25
    7212:	8e 5d       	subi	r24, 0xDE	; 222
    7214:	93 4e       	sbci	r25, 0xE3	; 227
    7216:	fc 01       	movw	r30, r24
    7218:	25 91       	lpm	r18, Z+
    721a:	34 91       	lpm	r19, Z+
    721c:	f9 01       	movw	r30, r18
    721e:	19 95       	eicall
    7220:	9c 01       	movw	r18, r24
}
    7222:	c9 01       	movw	r24, r18
    7224:	08 95       	ret

00007226 <_readln_char>:

/* xio_rs485_readln helper routines */

static int _readln_char(void)
{
	if (fr.i > fr.len) {						// trap buffer overflow
    7226:	90 91 26 24 	lds	r25, 0x2426
    722a:	20 91 27 24 	lds	r18, 0x2427
    722e:	e0 91 28 24 	lds	r30, 0x2428
    7232:	f0 91 29 24 	lds	r31, 0x2429
    7236:	29 17       	cp	r18, r25
    7238:	48 f4       	brcc	.+18     	; 0x724c <_readln_char+0x26>
		fr.sig = XIO_SIG_EOL;
    723a:	81 e0       	ldi	r24, 0x01	; 1
    723c:	80 93 24 24 	sts	0x2424, r24
		fr.buf[fr.len] = NUL;					// fr.len is zero based
    7240:	e2 0f       	add	r30, r18
    7242:	f1 1d       	adc	r31, r1
    7244:	10 82       	st	Z, r1
    7246:	26 e0       	ldi	r18, 0x06	; 6
    7248:	30 e0       	ldi	r19, 0x00	; 0
    724a:	16 c0       	rjmp	.+44     	; 0x7278 <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	fr.buf[fr.i++] = fr.c;
    724c:	e9 0f       	add	r30, r25
    724e:	f1 1d       	adc	r31, r1
    7250:	80 91 25 24 	lds	r24, 0x2425
    7254:	80 83       	st	Z, r24
    7256:	9f 5f       	subi	r25, 0xFF	; 255
    7258:	90 93 26 24 	sts	0x2426, r25
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);// conditional echo
    725c:	80 91 22 24 	lds	r24, 0x2422
    7260:	84 ff       	sbrs	r24, 4
    7262:	08 c0       	rjmp	.+16     	; 0x7274 <_readln_char+0x4e>
    7264:	60 91 69 25 	lds	r22, 0x2569
    7268:	70 91 6a 25 	lds	r23, 0x256A
    726c:	80 91 25 24 	lds	r24, 0x2425
    7270:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <xio_rs485_putc>
    7274:	22 e0       	ldi	r18, 0x02	; 2
    7276:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_CONTINUE);						// line is still in process
}
    7278:	c9 01       	movw	r24, r18
    727a:	08 95       	ret

0000727c <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	fr.sig = XIO_SIG_EOL;
    727c:	81 e0       	ldi	r24, 0x01	; 1
    727e:	80 93 24 24 	sts	0x2424, r24
	fr.buf[fr.i] = NUL;
    7282:	80 91 26 24 	lds	r24, 0x2426
    7286:	e0 91 28 24 	lds	r30, 0x2428
    728a:	f0 91 29 24 	lds	r31, 0x2429
    728e:	e8 0f       	add	r30, r24
    7290:	f1 1d       	adc	r31, r1
    7292:	10 82       	st	Z, r1
	fr.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    7294:	20 91 22 24 	lds	r18, 0x2422
    7298:	30 91 23 24 	lds	r19, 0x2423
    729c:	c9 01       	movw	r24, r18
    729e:	9f 7b       	andi	r25, 0xBF	; 191
    72a0:	80 93 22 24 	sts	0x2422, r24
    72a4:	90 93 23 24 	sts	0x2423, r25
	if (ECHO(fr.flags)) xio_rs485_putc('\n',stdout);// echo a newline
    72a8:	24 ff       	sbrs	r18, 4
    72aa:	07 c0       	rjmp	.+14     	; 0x72ba <_readln_NEWLINE+0x3e>
    72ac:	60 91 69 25 	lds	r22, 0x2569
    72b0:	70 91 6a 25 	lds	r23, 0x256A
    72b4:	8a e0       	ldi	r24, 0x0A	; 10
    72b6:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <xio_rs485_putc>
	return ((int)fr.line_func(fr.buf));			// call line handler function
    72ba:	e0 91 2c 24 	lds	r30, 0x242C
    72be:	f0 91 2d 24 	lds	r31, 0x242D
    72c2:	80 91 28 24 	lds	r24, 0x2428
    72c6:	90 91 29 24 	lds	r25, 0x2429
    72ca:	19 95       	eicall
}
    72cc:	08 95       	ret

000072ce <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(fr.flags)) {
    72ce:	80 91 22 24 	lds	r24, 0x2422
    72d2:	87 ff       	sbrs	r24, 7
    72d4:	03 c0       	rjmp	.+6      	; 0x72dc <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    72d6:	0e 94 3e 39 	call	0x727c	; 0x727c <_readln_NEWLINE>
    72da:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    72dc:	0e 94 13 39 	call	0x7226	; 0x7226 <_readln_char>
	}
}
    72e0:	08 95       	ret

000072e2 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--fr.i >= 0) {
    72e2:	80 91 26 24 	lds	r24, 0x2426
    72e6:	81 50       	subi	r24, 0x01	; 1
    72e8:	80 93 26 24 	sts	0x2426, r24
		if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    72ec:	80 91 22 24 	lds	r24, 0x2422
    72f0:	84 ff       	sbrs	r24, 4
    72f2:	08 c0       	rjmp	.+16     	; 0x7304 <_readln_DELETE+0x22>
    72f4:	60 91 69 25 	lds	r22, 0x2569
    72f8:	70 91 6a 25 	lds	r23, 0x256A
    72fc:	80 91 25 24 	lds	r24, 0x2425
    7300:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <xio_rs485_putc>
	} else {
		fr.i = 0;
	}
	return (TG_CONTINUE);						// line is still in process
}
    7304:	82 e0       	ldi	r24, 0x02	; 2
    7306:	90 e0       	ldi	r25, 0x00	; 0
    7308:	08 95       	ret

0000730a <_readln_KILL>:

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    730a:	84 e0       	ldi	r24, 0x04	; 4
    730c:	80 93 24 24 	sts	0x2424, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    7310:	e0 91 2a 24 	lds	r30, 0x242A
    7314:	f0 91 2b 24 	lds	r31, 0x242B
    7318:	19 95       	eicall
}

static int _readln_KILL(void)
{
	return _readln_SIG(XIO_SIG_KILL);
}
    731a:	08 95       	ret

0000731c <_readln_PAUSE>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    731c:	86 e0       	ldi	r24, 0x06	; 6
    731e:	80 93 24 24 	sts	0x2424, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    7322:	e0 91 2a 24 	lds	r30, 0x242A
    7326:	f0 91 2b 24 	lds	r31, 0x242B
    732a:	19 95       	eicall
}

static int _readln_PAUSE(void)
{
	return _readln_SIG(XIO_SIG_PAUSE);
}
    732c:	08 95       	ret

0000732e <_readln_RESUME>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    732e:	87 e0       	ldi	r24, 0x07	; 7
    7330:	80 93 24 24 	sts	0x2424, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    7334:	e0 91 2a 24 	lds	r30, 0x242A
    7338:	f0 91 2b 24 	lds	r31, 0x242B
    733c:	19 95       	eicall
}

static int _readln_RESUME(void)
{
	return _readln_SIG(XIO_SIG_RESUME);
}
    733e:	08 95       	ret

00007340 <_readln_SHIFTOUT>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    7340:	88 e0       	ldi	r24, 0x08	; 8
    7342:	80 93 24 24 	sts	0x2424, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    7346:	e0 91 2a 24 	lds	r30, 0x242A
    734a:	f0 91 2b 24 	lds	r31, 0x242B
    734e:	19 95       	eicall
}

static int _readln_SHIFTOUT(void)
{
	return _readln_SIG(XIO_SIG_SHIFTOUT);
}
    7350:	08 95       	ret

00007352 <_readln_SHIFTIN>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    7352:	89 e0       	ldi	r24, 0x09	; 9
    7354:	80 93 24 24 	sts	0x2424, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    7358:	e0 91 2a 24 	lds	r30, 0x242A
    735c:	f0 91 2b 24 	lds	r31, 0x242B
    7360:	19 95       	eicall
}

static int _readln_SHIFTIN(void)
{
	return _readln_SIG(XIO_SIG_SHIFTIN);
}
    7362:	08 95       	ret

00007364 <__udivdi3>:
    7364:	ae e5       	ldi	r26, 0x5E	; 94
    7366:	b0 e0       	ldi	r27, 0x00	; 0
    7368:	e8 eb       	ldi	r30, 0xB8	; 184
    736a:	f9 e3       	ldi	r31, 0x39	; 57
    736c:	0c 94 45 48 	jmp	0x908a	; 0x908a <__prologue_saves__>
    7370:	a8 e0       	ldi	r26, 0x08	; 8
    7372:	4e 01       	movw	r8, r28
    7374:	08 94       	sec
    7376:	81 1c       	adc	r8, r1
    7378:	91 1c       	adc	r9, r1
    737a:	f4 01       	movw	r30, r8
    737c:	6a 2e       	mov	r6, r26
    737e:	11 92       	st	Z+, r1
    7380:	6a 94       	dec	r6
    7382:	e9 f7       	brne	.-6      	; 0x737e <__udivdi3+0x1a>
    7384:	29 83       	std	Y+1, r18	; 0x01
    7386:	3a 83       	std	Y+2, r19	; 0x02
    7388:	4b 83       	std	Y+3, r20	; 0x03
    738a:	5c 83       	std	Y+4, r21	; 0x04
    738c:	6d 83       	std	Y+5, r22	; 0x05
    738e:	7e 83       	std	Y+6, r23	; 0x06
    7390:	8f 83       	std	Y+7, r24	; 0x07
    7392:	98 87       	std	Y+8, r25	; 0x08
    7394:	ce 01       	movw	r24, r28
    7396:	09 96       	adiw	r24, 0x09	; 9
    7398:	fc 01       	movw	r30, r24
    739a:	11 92       	st	Z+, r1
    739c:	aa 95       	dec	r26
    739e:	e9 f7       	brne	.-6      	; 0x739a <__udivdi3+0x36>
    73a0:	a9 86       	std	Y+9, r10	; 0x09
    73a2:	ba 86       	std	Y+10, r11	; 0x0a
    73a4:	cb 86       	std	Y+11, r12	; 0x0b
    73a6:	dc 86       	std	Y+12, r13	; 0x0c
    73a8:	ed 86       	std	Y+13, r14	; 0x0d
    73aa:	fe 86       	std	Y+14, r15	; 0x0e
    73ac:	0f 87       	std	Y+15, r16	; 0x0f
    73ae:	18 8b       	std	Y+16, r17	; 0x10
    73b0:	29 84       	ldd	r2, Y+9	; 0x09
    73b2:	3a 84       	ldd	r3, Y+10	; 0x0a
    73b4:	4b 84       	ldd	r4, Y+11	; 0x0b
    73b6:	5c 84       	ldd	r5, Y+12	; 0x0c
    73b8:	ed 84       	ldd	r14, Y+13	; 0x0d
    73ba:	fe 84       	ldd	r15, Y+14	; 0x0e
    73bc:	0f 85       	ldd	r16, Y+15	; 0x0f
    73be:	18 89       	ldd	r17, Y+16	; 0x10
    73c0:	69 80       	ldd	r6, Y+1	; 0x01
    73c2:	7a 80       	ldd	r7, Y+2	; 0x02
    73c4:	8b 80       	ldd	r8, Y+3	; 0x03
    73c6:	9c 80       	ldd	r9, Y+4	; 0x04
    73c8:	6d a6       	std	Y+45, r6	; 0x2d
    73ca:	7e a6       	std	Y+46, r7	; 0x2e
    73cc:	8f a6       	std	Y+47, r8	; 0x2f
    73ce:	98 aa       	std	Y+48, r9	; 0x30
    73d0:	6d 80       	ldd	r6, Y+5	; 0x05
    73d2:	7e 80       	ldd	r7, Y+6	; 0x06
    73d4:	8f 80       	ldd	r8, Y+7	; 0x07
    73d6:	98 84       	ldd	r9, Y+8	; 0x08
    73d8:	e1 14       	cp	r14, r1
    73da:	f1 04       	cpc	r15, r1
    73dc:	01 05       	cpc	r16, r1
    73de:	11 05       	cpc	r17, r1
    73e0:	09 f0       	breq	.+2      	; 0x73e4 <__udivdi3+0x80>
    73e2:	b3 c3       	rjmp	.+1894   	; 0x7b4a <__udivdi3+0x7e6>
    73e4:	62 14       	cp	r6, r2
    73e6:	73 04       	cpc	r7, r3
    73e8:	84 04       	cpc	r8, r4
    73ea:	95 04       	cpc	r9, r5
    73ec:	08 f0       	brcs	.+2      	; 0x73f0 <__udivdi3+0x8c>
    73ee:	3d c1       	rjmp	.+634    	; 0x766a <__udivdi3+0x306>
    73f0:	00 e0       	ldi	r16, 0x00	; 0
    73f2:	20 16       	cp	r2, r16
    73f4:	00 e0       	ldi	r16, 0x00	; 0
    73f6:	30 06       	cpc	r3, r16
    73f8:	01 e0       	ldi	r16, 0x01	; 1
    73fa:	40 06       	cpc	r4, r16
    73fc:	00 e0       	ldi	r16, 0x00	; 0
    73fe:	50 06       	cpc	r5, r16
    7400:	88 f4       	brcc	.+34     	; 0x7424 <__udivdi3+0xc0>
    7402:	1f ef       	ldi	r17, 0xFF	; 255
    7404:	21 16       	cp	r2, r17
    7406:	31 04       	cpc	r3, r1
    7408:	41 04       	cpc	r4, r1
    740a:	51 04       	cpc	r5, r1
    740c:	39 f0       	breq	.+14     	; 0x741c <__udivdi3+0xb8>
    740e:	30 f0       	brcs	.+12     	; 0x741c <__udivdi3+0xb8>
    7410:	48 e0       	ldi	r20, 0x08	; 8
    7412:	e4 2e       	mov	r14, r20
    7414:	f1 2c       	mov	r15, r1
    7416:	01 2d       	mov	r16, r1
    7418:	11 2d       	mov	r17, r1
    741a:	18 c0       	rjmp	.+48     	; 0x744c <__udivdi3+0xe8>
    741c:	ee 24       	eor	r14, r14
    741e:	ff 24       	eor	r15, r15
    7420:	87 01       	movw	r16, r14
    7422:	14 c0       	rjmp	.+40     	; 0x744c <__udivdi3+0xe8>
    7424:	20 e0       	ldi	r18, 0x00	; 0
    7426:	22 16       	cp	r2, r18
    7428:	20 e0       	ldi	r18, 0x00	; 0
    742a:	32 06       	cpc	r3, r18
    742c:	20 e0       	ldi	r18, 0x00	; 0
    742e:	42 06       	cpc	r4, r18
    7430:	21 e0       	ldi	r18, 0x01	; 1
    7432:	52 06       	cpc	r5, r18
    7434:	30 f0       	brcs	.+12     	; 0x7442 <__udivdi3+0xde>
    7436:	38 e1       	ldi	r19, 0x18	; 24
    7438:	e3 2e       	mov	r14, r19
    743a:	f1 2c       	mov	r15, r1
    743c:	01 2d       	mov	r16, r1
    743e:	11 2d       	mov	r17, r1
    7440:	05 c0       	rjmp	.+10     	; 0x744c <__udivdi3+0xe8>
    7442:	20 e1       	ldi	r18, 0x10	; 16
    7444:	e2 2e       	mov	r14, r18
    7446:	f1 2c       	mov	r15, r1
    7448:	01 2d       	mov	r16, r1
    744a:	11 2d       	mov	r17, r1
    744c:	d2 01       	movw	r26, r4
    744e:	c1 01       	movw	r24, r2
    7450:	0e 2c       	mov	r0, r14
    7452:	04 c0       	rjmp	.+8      	; 0x745c <__udivdi3+0xf8>
    7454:	b6 95       	lsr	r27
    7456:	a7 95       	ror	r26
    7458:	97 95       	ror	r25
    745a:	87 95       	ror	r24
    745c:	0a 94       	dec	r0
    745e:	d2 f7       	brpl	.-12     	; 0x7454 <__udivdi3+0xf0>
    7460:	83 5d       	subi	r24, 0xD3	; 211
    7462:	9f 4d       	sbci	r25, 0xDF	; 223
    7464:	dc 01       	movw	r26, r24
    7466:	2c 91       	ld	r18, X
    7468:	80 e2       	ldi	r24, 0x20	; 32
    746a:	90 e0       	ldi	r25, 0x00	; 0
    746c:	a0 e0       	ldi	r26, 0x00	; 0
    746e:	b0 e0       	ldi	r27, 0x00	; 0
    7470:	8e 19       	sub	r24, r14
    7472:	9f 09       	sbc	r25, r15
    7474:	a0 0b       	sbc	r26, r16
    7476:	b1 0b       	sbc	r27, r17
    7478:	7c 01       	movw	r14, r24
    747a:	8d 01       	movw	r16, r26
    747c:	e2 1a       	sub	r14, r18
    747e:	f1 08       	sbc	r15, r1
    7480:	01 09       	sbc	r16, r1
    7482:	11 09       	sbc	r17, r1
    7484:	e1 14       	cp	r14, r1
    7486:	f1 04       	cpc	r15, r1
    7488:	01 05       	cpc	r16, r1
    748a:	11 05       	cpc	r17, r1
    748c:	a1 f1       	breq	.+104    	; 0x74f6 <__udivdi3+0x192>
    748e:	0e 2c       	mov	r0, r14
    7490:	04 c0       	rjmp	.+8      	; 0x749a <__udivdi3+0x136>
    7492:	22 0c       	add	r2, r2
    7494:	33 1c       	adc	r3, r3
    7496:	44 1c       	adc	r4, r4
    7498:	55 1c       	adc	r5, r5
    749a:	0a 94       	dec	r0
    749c:	d2 f7       	brpl	.-12     	; 0x7492 <__udivdi3+0x12e>
    749e:	a4 01       	movw	r20, r8
    74a0:	93 01       	movw	r18, r6
    74a2:	0e 2c       	mov	r0, r14
    74a4:	04 c0       	rjmp	.+8      	; 0x74ae <__udivdi3+0x14a>
    74a6:	22 0f       	add	r18, r18
    74a8:	33 1f       	adc	r19, r19
    74aa:	44 1f       	adc	r20, r20
    74ac:	55 1f       	adc	r21, r21
    74ae:	0a 94       	dec	r0
    74b0:	d2 f7       	brpl	.-12     	; 0x74a6 <__udivdi3+0x142>
    74b2:	80 e2       	ldi	r24, 0x20	; 32
    74b4:	90 e0       	ldi	r25, 0x00	; 0
    74b6:	8e 19       	sub	r24, r14
    74b8:	9f 09       	sbc	r25, r15
    74ba:	6d a4       	ldd	r6, Y+45	; 0x2d
    74bc:	7e a4       	ldd	r7, Y+46	; 0x2e
    74be:	8f a4       	ldd	r8, Y+47	; 0x2f
    74c0:	98 a8       	ldd	r9, Y+48	; 0x30
    74c2:	04 c0       	rjmp	.+8      	; 0x74cc <__udivdi3+0x168>
    74c4:	96 94       	lsr	r9
    74c6:	87 94       	ror	r8
    74c8:	77 94       	ror	r7
    74ca:	67 94       	ror	r6
    74cc:	8a 95       	dec	r24
    74ce:	d2 f7       	brpl	.-12     	; 0x74c4 <__udivdi3+0x160>
    74d0:	62 2a       	or	r6, r18
    74d2:	73 2a       	or	r7, r19
    74d4:	84 2a       	or	r8, r20
    74d6:	95 2a       	or	r9, r21
    74d8:	ad a4       	ldd	r10, Y+45	; 0x2d
    74da:	be a4       	ldd	r11, Y+46	; 0x2e
    74dc:	cf a4       	ldd	r12, Y+47	; 0x2f
    74de:	d8 a8       	ldd	r13, Y+48	; 0x30
    74e0:	04 c0       	rjmp	.+8      	; 0x74ea <__udivdi3+0x186>
    74e2:	aa 0c       	add	r10, r10
    74e4:	bb 1c       	adc	r11, r11
    74e6:	cc 1c       	adc	r12, r12
    74e8:	dd 1c       	adc	r13, r13
    74ea:	ea 94       	dec	r14
    74ec:	d2 f7       	brpl	.-12     	; 0x74e2 <__udivdi3+0x17e>
    74ee:	ad a6       	std	Y+45, r10	; 0x2d
    74f0:	be a6       	std	Y+46, r11	; 0x2e
    74f2:	cf a6       	std	Y+47, r12	; 0x2f
    74f4:	d8 aa       	std	Y+48, r13	; 0x30
    74f6:	62 01       	movw	r12, r4
    74f8:	ee 24       	eor	r14, r14
    74fa:	ff 24       	eor	r15, r15
    74fc:	cd aa       	std	Y+53, r12	; 0x35
    74fe:	de aa       	std	Y+54, r13	; 0x36
    7500:	ef aa       	std	Y+55, r14	; 0x37
    7502:	f8 ae       	std	Y+56, r15	; 0x38
    7504:	92 01       	movw	r18, r4
    7506:	81 01       	movw	r16, r2
    7508:	20 70       	andi	r18, 0x00	; 0
    750a:	30 70       	andi	r19, 0x00	; 0
    750c:	09 af       	std	Y+57, r16	; 0x39
    750e:	1a af       	std	Y+58, r17	; 0x3a
    7510:	2b af       	std	Y+59, r18	; 0x3b
    7512:	3c af       	std	Y+60, r19	; 0x3c
    7514:	c4 01       	movw	r24, r8
    7516:	b3 01       	movw	r22, r6
    7518:	a7 01       	movw	r20, r14
    751a:	96 01       	movw	r18, r12
    751c:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    7520:	7b 01       	movw	r14, r22
    7522:	8c 01       	movw	r16, r24
    7524:	c4 01       	movw	r24, r8
    7526:	b3 01       	movw	r22, r6
    7528:	2d a9       	ldd	r18, Y+53	; 0x35
    752a:	3e a9       	ldd	r19, Y+54	; 0x36
    752c:	4f a9       	ldd	r20, Y+55	; 0x37
    752e:	58 ad       	ldd	r21, Y+56	; 0x38
    7530:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    7534:	c9 01       	movw	r24, r18
    7536:	da 01       	movw	r26, r20
    7538:	3c 01       	movw	r6, r24
    753a:	4d 01       	movw	r8, r26
    753c:	c4 01       	movw	r24, r8
    753e:	b3 01       	movw	r22, r6
    7540:	29 ad       	ldd	r18, Y+57	; 0x39
    7542:	3a ad       	ldd	r19, Y+58	; 0x3a
    7544:	4b ad       	ldd	r20, Y+59	; 0x3b
    7546:	5c ad       	ldd	r21, Y+60	; 0x3c
    7548:	0e 94 04 48 	call	0x9008	; 0x9008 <__mulsi3>
    754c:	9b 01       	movw	r18, r22
    754e:	ac 01       	movw	r20, r24
    7550:	87 01       	movw	r16, r14
    7552:	ff 24       	eor	r15, r15
    7554:	ee 24       	eor	r14, r14
    7556:	ad a4       	ldd	r10, Y+45	; 0x2d
    7558:	be a4       	ldd	r11, Y+46	; 0x2e
    755a:	cf a4       	ldd	r12, Y+47	; 0x2f
    755c:	d8 a8       	ldd	r13, Y+48	; 0x30
    755e:	c6 01       	movw	r24, r12
    7560:	aa 27       	eor	r26, r26
    7562:	bb 27       	eor	r27, r27
    7564:	57 01       	movw	r10, r14
    7566:	68 01       	movw	r12, r16
    7568:	a8 2a       	or	r10, r24
    756a:	b9 2a       	or	r11, r25
    756c:	ca 2a       	or	r12, r26
    756e:	db 2a       	or	r13, r27
    7570:	a2 16       	cp	r10, r18
    7572:	b3 06       	cpc	r11, r19
    7574:	c4 06       	cpc	r12, r20
    7576:	d5 06       	cpc	r13, r21
    7578:	e0 f4       	brcc	.+56     	; 0x75b2 <__udivdi3+0x24e>
    757a:	08 94       	sec
    757c:	61 08       	sbc	r6, r1
    757e:	71 08       	sbc	r7, r1
    7580:	81 08       	sbc	r8, r1
    7582:	91 08       	sbc	r9, r1
    7584:	a2 0c       	add	r10, r2
    7586:	b3 1c       	adc	r11, r3
    7588:	c4 1c       	adc	r12, r4
    758a:	d5 1c       	adc	r13, r5
    758c:	a2 14       	cp	r10, r2
    758e:	b3 04       	cpc	r11, r3
    7590:	c4 04       	cpc	r12, r4
    7592:	d5 04       	cpc	r13, r5
    7594:	70 f0       	brcs	.+28     	; 0x75b2 <__udivdi3+0x24e>
    7596:	a2 16       	cp	r10, r18
    7598:	b3 06       	cpc	r11, r19
    759a:	c4 06       	cpc	r12, r20
    759c:	d5 06       	cpc	r13, r21
    759e:	48 f4       	brcc	.+18     	; 0x75b2 <__udivdi3+0x24e>
    75a0:	08 94       	sec
    75a2:	61 08       	sbc	r6, r1
    75a4:	71 08       	sbc	r7, r1
    75a6:	81 08       	sbc	r8, r1
    75a8:	91 08       	sbc	r9, r1
    75aa:	a2 0c       	add	r10, r2
    75ac:	b3 1c       	adc	r11, r3
    75ae:	c4 1c       	adc	r12, r4
    75b0:	d5 1c       	adc	r13, r5
    75b2:	a2 1a       	sub	r10, r18
    75b4:	b3 0a       	sbc	r11, r19
    75b6:	c4 0a       	sbc	r12, r20
    75b8:	d5 0a       	sbc	r13, r21
    75ba:	c6 01       	movw	r24, r12
    75bc:	b5 01       	movw	r22, r10
    75be:	2d a9       	ldd	r18, Y+53	; 0x35
    75c0:	3e a9       	ldd	r19, Y+54	; 0x36
    75c2:	4f a9       	ldd	r20, Y+55	; 0x37
    75c4:	58 ad       	ldd	r21, Y+56	; 0x38
    75c6:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    75ca:	7b 01       	movw	r14, r22
    75cc:	8c 01       	movw	r16, r24
    75ce:	c6 01       	movw	r24, r12
    75d0:	b5 01       	movw	r22, r10
    75d2:	2d a9       	ldd	r18, Y+53	; 0x35
    75d4:	3e a9       	ldd	r19, Y+54	; 0x36
    75d6:	4f a9       	ldd	r20, Y+55	; 0x37
    75d8:	58 ad       	ldd	r21, Y+56	; 0x38
    75da:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    75de:	c9 01       	movw	r24, r18
    75e0:	da 01       	movw	r26, r20
    75e2:	5c 01       	movw	r10, r24
    75e4:	6d 01       	movw	r12, r26
    75e6:	c6 01       	movw	r24, r12
    75e8:	b5 01       	movw	r22, r10
    75ea:	29 ad       	ldd	r18, Y+57	; 0x39
    75ec:	3a ad       	ldd	r19, Y+58	; 0x3a
    75ee:	4b ad       	ldd	r20, Y+59	; 0x3b
    75f0:	5c ad       	ldd	r21, Y+60	; 0x3c
    75f2:	0e 94 04 48 	call	0x9008	; 0x9008 <__mulsi3>
    75f6:	9b 01       	movw	r18, r22
    75f8:	ac 01       	movw	r20, r24
    75fa:	87 01       	movw	r16, r14
    75fc:	ff 24       	eor	r15, r15
    75fe:	ee 24       	eor	r14, r14
    7600:	8d a5       	ldd	r24, Y+45	; 0x2d
    7602:	9e a5       	ldd	r25, Y+46	; 0x2e
    7604:	af a5       	ldd	r26, Y+47	; 0x2f
    7606:	b8 a9       	ldd	r27, Y+48	; 0x30
    7608:	a0 70       	andi	r26, 0x00	; 0
    760a:	b0 70       	andi	r27, 0x00	; 0
    760c:	e8 2a       	or	r14, r24
    760e:	f9 2a       	or	r15, r25
    7610:	0a 2b       	or	r16, r26
    7612:	1b 2b       	or	r17, r27
    7614:	e2 16       	cp	r14, r18
    7616:	f3 06       	cpc	r15, r19
    7618:	04 07       	cpc	r16, r20
    761a:	15 07       	cpc	r17, r21
    761c:	c0 f4       	brcc	.+48     	; 0x764e <__udivdi3+0x2ea>
    761e:	08 94       	sec
    7620:	a1 08       	sbc	r10, r1
    7622:	b1 08       	sbc	r11, r1
    7624:	c1 08       	sbc	r12, r1
    7626:	d1 08       	sbc	r13, r1
    7628:	e2 0c       	add	r14, r2
    762a:	f3 1c       	adc	r15, r3
    762c:	04 1d       	adc	r16, r4
    762e:	15 1d       	adc	r17, r5
    7630:	e2 14       	cp	r14, r2
    7632:	f3 04       	cpc	r15, r3
    7634:	04 05       	cpc	r16, r4
    7636:	15 05       	cpc	r17, r5
    7638:	50 f0       	brcs	.+20     	; 0x764e <__udivdi3+0x2ea>
    763a:	e2 16       	cp	r14, r18
    763c:	f3 06       	cpc	r15, r19
    763e:	04 07       	cpc	r16, r20
    7640:	15 07       	cpc	r17, r21
    7642:	28 f4       	brcc	.+10     	; 0x764e <__udivdi3+0x2ea>
    7644:	08 94       	sec
    7646:	a1 08       	sbc	r10, r1
    7648:	b1 08       	sbc	r11, r1
    764a:	c1 08       	sbc	r12, r1
    764c:	d1 08       	sbc	r13, r1
    764e:	d3 01       	movw	r26, r6
    7650:	99 27       	eor	r25, r25
    7652:	88 27       	eor	r24, r24
    7654:	86 01       	movw	r16, r12
    7656:	75 01       	movw	r14, r10
    7658:	e8 2a       	or	r14, r24
    765a:	f9 2a       	or	r15, r25
    765c:	0a 2b       	or	r16, r26
    765e:	1b 2b       	or	r17, r27
    7660:	e9 aa       	std	Y+49, r14	; 0x31
    7662:	fa aa       	std	Y+50, r15	; 0x32
    7664:	0b ab       	std	Y+51, r16	; 0x33
    7666:	1c ab       	std	Y+52, r17	; 0x34
    7668:	cf c4       	rjmp	.+2462   	; 0x8008 <__udivdi3+0xca4>
    766a:	21 14       	cp	r2, r1
    766c:	31 04       	cpc	r3, r1
    766e:	41 04       	cpc	r4, r1
    7670:	51 04       	cpc	r5, r1
    7672:	71 f4       	brne	.+28     	; 0x7690 <__udivdi3+0x32c>
    7674:	61 e0       	ldi	r22, 0x01	; 1
    7676:	70 e0       	ldi	r23, 0x00	; 0
    7678:	80 e0       	ldi	r24, 0x00	; 0
    767a:	90 e0       	ldi	r25, 0x00	; 0
    767c:	20 e0       	ldi	r18, 0x00	; 0
    767e:	30 e0       	ldi	r19, 0x00	; 0
    7680:	40 e0       	ldi	r20, 0x00	; 0
    7682:	50 e0       	ldi	r21, 0x00	; 0
    7684:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    7688:	c9 01       	movw	r24, r18
    768a:	da 01       	movw	r26, r20
    768c:	1c 01       	movw	r2, r24
    768e:	2d 01       	movw	r4, r26
    7690:	00 e0       	ldi	r16, 0x00	; 0
    7692:	20 16       	cp	r2, r16
    7694:	00 e0       	ldi	r16, 0x00	; 0
    7696:	30 06       	cpc	r3, r16
    7698:	01 e0       	ldi	r16, 0x01	; 1
    769a:	40 06       	cpc	r4, r16
    769c:	00 e0       	ldi	r16, 0x00	; 0
    769e:	50 06       	cpc	r5, r16
    76a0:	88 f4       	brcc	.+34     	; 0x76c4 <__udivdi3+0x360>
    76a2:	1f ef       	ldi	r17, 0xFF	; 255
    76a4:	21 16       	cp	r2, r17
    76a6:	31 04       	cpc	r3, r1
    76a8:	41 04       	cpc	r4, r1
    76aa:	51 04       	cpc	r5, r1
    76ac:	31 f0       	breq	.+12     	; 0x76ba <__udivdi3+0x356>
    76ae:	28 f0       	brcs	.+10     	; 0x76ba <__udivdi3+0x356>
    76b0:	48 e0       	ldi	r20, 0x08	; 8
    76b2:	50 e0       	ldi	r21, 0x00	; 0
    76b4:	60 e0       	ldi	r22, 0x00	; 0
    76b6:	70 e0       	ldi	r23, 0x00	; 0
    76b8:	17 c0       	rjmp	.+46     	; 0x76e8 <__udivdi3+0x384>
    76ba:	40 e0       	ldi	r20, 0x00	; 0
    76bc:	50 e0       	ldi	r21, 0x00	; 0
    76be:	60 e0       	ldi	r22, 0x00	; 0
    76c0:	70 e0       	ldi	r23, 0x00	; 0
    76c2:	12 c0       	rjmp	.+36     	; 0x76e8 <__udivdi3+0x384>
    76c4:	20 e0       	ldi	r18, 0x00	; 0
    76c6:	22 16       	cp	r2, r18
    76c8:	20 e0       	ldi	r18, 0x00	; 0
    76ca:	32 06       	cpc	r3, r18
    76cc:	20 e0       	ldi	r18, 0x00	; 0
    76ce:	42 06       	cpc	r4, r18
    76d0:	21 e0       	ldi	r18, 0x01	; 1
    76d2:	52 06       	cpc	r5, r18
    76d4:	28 f0       	brcs	.+10     	; 0x76e0 <__udivdi3+0x37c>
    76d6:	48 e1       	ldi	r20, 0x18	; 24
    76d8:	50 e0       	ldi	r21, 0x00	; 0
    76da:	60 e0       	ldi	r22, 0x00	; 0
    76dc:	70 e0       	ldi	r23, 0x00	; 0
    76de:	04 c0       	rjmp	.+8      	; 0x76e8 <__udivdi3+0x384>
    76e0:	40 e1       	ldi	r20, 0x10	; 16
    76e2:	50 e0       	ldi	r21, 0x00	; 0
    76e4:	60 e0       	ldi	r22, 0x00	; 0
    76e6:	70 e0       	ldi	r23, 0x00	; 0
    76e8:	d2 01       	movw	r26, r4
    76ea:	c1 01       	movw	r24, r2
    76ec:	04 2e       	mov	r0, r20
    76ee:	04 c0       	rjmp	.+8      	; 0x76f8 <__udivdi3+0x394>
    76f0:	b6 95       	lsr	r27
    76f2:	a7 95       	ror	r26
    76f4:	97 95       	ror	r25
    76f6:	87 95       	ror	r24
    76f8:	0a 94       	dec	r0
    76fa:	d2 f7       	brpl	.-12     	; 0x76f0 <__udivdi3+0x38c>
    76fc:	83 5d       	subi	r24, 0xD3	; 211
    76fe:	9f 4d       	sbci	r25, 0xDF	; 223
    7700:	dc 01       	movw	r26, r24
    7702:	2c 91       	ld	r18, X
    7704:	e0 e2       	ldi	r30, 0x20	; 32
    7706:	ee 2e       	mov	r14, r30
    7708:	f1 2c       	mov	r15, r1
    770a:	01 2d       	mov	r16, r1
    770c:	11 2d       	mov	r17, r1
    770e:	d8 01       	movw	r26, r16
    7710:	c7 01       	movw	r24, r14
    7712:	84 1b       	sub	r24, r20
    7714:	95 0b       	sbc	r25, r21
    7716:	a6 0b       	sbc	r26, r22
    7718:	b7 0b       	sbc	r27, r23
    771a:	82 1b       	sub	r24, r18
    771c:	91 09       	sbc	r25, r1
    771e:	a1 09       	sbc	r26, r1
    7720:	b1 09       	sbc	r27, r1
    7722:	00 97       	sbiw	r24, 0x00	; 0
    7724:	a1 05       	cpc	r26, r1
    7726:	b1 05       	cpc	r27, r1
    7728:	61 f4       	brne	.+24     	; 0x7742 <__udivdi3+0x3de>
    772a:	64 01       	movw	r12, r8
    772c:	53 01       	movw	r10, r6
    772e:	a2 18       	sub	r10, r2
    7730:	b3 08       	sbc	r11, r3
    7732:	c4 08       	sbc	r12, r4
    7734:	d5 08       	sbc	r13, r5
    7736:	31 e0       	ldi	r19, 0x01	; 1
    7738:	63 2e       	mov	r6, r19
    773a:	71 2c       	mov	r7, r1
    773c:	81 2c       	mov	r8, r1
    773e:	91 2c       	mov	r9, r1
    7740:	1e c1       	rjmp	.+572    	; 0x797e <__udivdi3+0x61a>
    7742:	6f 96       	adiw	r28, 0x1f	; 31
    7744:	8f af       	std	Y+63, r24	; 0x3f
    7746:	6f 97       	sbiw	r28, 0x1f	; 31
    7748:	08 2e       	mov	r0, r24
    774a:	04 c0       	rjmp	.+8      	; 0x7754 <__udivdi3+0x3f0>
    774c:	22 0c       	add	r2, r2
    774e:	33 1c       	adc	r3, r3
    7750:	44 1c       	adc	r4, r4
    7752:	55 1c       	adc	r5, r5
    7754:	0a 94       	dec	r0
    7756:	d2 f7       	brpl	.-12     	; 0x774c <__udivdi3+0x3e8>
    7758:	ee 2d       	mov	r30, r14
    775a:	e8 1b       	sub	r30, r24
    775c:	64 01       	movw	r12, r8
    775e:	53 01       	movw	r10, r6
    7760:	0e 2e       	mov	r0, r30
    7762:	04 c0       	rjmp	.+8      	; 0x776c <__udivdi3+0x408>
    7764:	d6 94       	lsr	r13
    7766:	c7 94       	ror	r12
    7768:	b7 94       	ror	r11
    776a:	a7 94       	ror	r10
    776c:	0a 94       	dec	r0
    776e:	d2 f7       	brpl	.-12     	; 0x7764 <__udivdi3+0x400>
    7770:	a4 01       	movw	r20, r8
    7772:	93 01       	movw	r18, r6
    7774:	6f 96       	adiw	r28, 0x1f	; 31
    7776:	0f ac       	ldd	r0, Y+63	; 0x3f
    7778:	6f 97       	sbiw	r28, 0x1f	; 31
    777a:	04 c0       	rjmp	.+8      	; 0x7784 <__udivdi3+0x420>
    777c:	22 0f       	add	r18, r18
    777e:	33 1f       	adc	r19, r19
    7780:	44 1f       	adc	r20, r20
    7782:	55 1f       	adc	r21, r21
    7784:	0a 94       	dec	r0
    7786:	d2 f7       	brpl	.-12     	; 0x777c <__udivdi3+0x418>
    7788:	6d a4       	ldd	r6, Y+45	; 0x2d
    778a:	7e a4       	ldd	r7, Y+46	; 0x2e
    778c:	8f a4       	ldd	r8, Y+47	; 0x2f
    778e:	98 a8       	ldd	r9, Y+48	; 0x30
    7790:	0e 2e       	mov	r0, r30
    7792:	04 c0       	rjmp	.+8      	; 0x779c <__udivdi3+0x438>
    7794:	96 94       	lsr	r9
    7796:	87 94       	ror	r8
    7798:	77 94       	ror	r7
    779a:	67 94       	ror	r6
    779c:	0a 94       	dec	r0
    779e:	d2 f7       	brpl	.-12     	; 0x7794 <__udivdi3+0x430>
    77a0:	84 01       	movw	r16, r8
    77a2:	73 01       	movw	r14, r6
    77a4:	e2 2a       	or	r14, r18
    77a6:	f3 2a       	or	r15, r19
    77a8:	04 2b       	or	r16, r20
    77aa:	15 2b       	or	r17, r21
    77ac:	e9 a6       	std	Y+41, r14	; 0x29
    77ae:	fa a6       	std	Y+42, r15	; 0x2a
    77b0:	0b a7       	std	Y+43, r16	; 0x2b
    77b2:	1c a7       	std	Y+44, r17	; 0x2c
    77b4:	32 01       	movw	r6, r4
    77b6:	88 24       	eor	r8, r8
    77b8:	99 24       	eor	r9, r9
    77ba:	92 01       	movw	r18, r4
    77bc:	81 01       	movw	r16, r2
    77be:	20 70       	andi	r18, 0x00	; 0
    77c0:	30 70       	andi	r19, 0x00	; 0
    77c2:	21 96       	adiw	r28, 0x01	; 1
    77c4:	0c af       	std	Y+60, r16	; 0x3c
    77c6:	1d af       	std	Y+61, r17	; 0x3d
    77c8:	2e af       	std	Y+62, r18	; 0x3e
    77ca:	3f af       	std	Y+63, r19	; 0x3f
    77cc:	21 97       	sbiw	r28, 0x01	; 1
    77ce:	c6 01       	movw	r24, r12
    77d0:	b5 01       	movw	r22, r10
    77d2:	a4 01       	movw	r20, r8
    77d4:	93 01       	movw	r18, r6
    77d6:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    77da:	7b 01       	movw	r14, r22
    77dc:	8c 01       	movw	r16, r24
    77de:	c6 01       	movw	r24, r12
    77e0:	b5 01       	movw	r22, r10
    77e2:	a4 01       	movw	r20, r8
    77e4:	93 01       	movw	r18, r6
    77e6:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    77ea:	c9 01       	movw	r24, r18
    77ec:	da 01       	movw	r26, r20
    77ee:	25 96       	adiw	r28, 0x05	; 5
    77f0:	8c af       	std	Y+60, r24	; 0x3c
    77f2:	9d af       	std	Y+61, r25	; 0x3d
    77f4:	ae af       	std	Y+62, r26	; 0x3e
    77f6:	bf af       	std	Y+63, r27	; 0x3f
    77f8:	25 97       	sbiw	r28, 0x05	; 5
    77fa:	bc 01       	movw	r22, r24
    77fc:	cd 01       	movw	r24, r26
    77fe:	21 96       	adiw	r28, 0x01	; 1
    7800:	2c ad       	ldd	r18, Y+60	; 0x3c
    7802:	3d ad       	ldd	r19, Y+61	; 0x3d
    7804:	4e ad       	ldd	r20, Y+62	; 0x3e
    7806:	5f ad       	ldd	r21, Y+63	; 0x3f
    7808:	21 97       	sbiw	r28, 0x01	; 1
    780a:	0e 94 04 48 	call	0x9008	; 0x9008 <__mulsi3>
    780e:	9b 01       	movw	r18, r22
    7810:	ac 01       	movw	r20, r24
    7812:	87 01       	movw	r16, r14
    7814:	ff 24       	eor	r15, r15
    7816:	ee 24       	eor	r14, r14
    7818:	a9 a4       	ldd	r10, Y+41	; 0x29
    781a:	ba a4       	ldd	r11, Y+42	; 0x2a
    781c:	cb a4       	ldd	r12, Y+43	; 0x2b
    781e:	dc a4       	ldd	r13, Y+44	; 0x2c
    7820:	c6 01       	movw	r24, r12
    7822:	aa 27       	eor	r26, r26
    7824:	bb 27       	eor	r27, r27
    7826:	5c 01       	movw	r10, r24
    7828:	6d 01       	movw	r12, r26
    782a:	ae 28       	or	r10, r14
    782c:	bf 28       	or	r11, r15
    782e:	c0 2a       	or	r12, r16
    7830:	d1 2a       	or	r13, r17
    7832:	a2 16       	cp	r10, r18
    7834:	b3 06       	cpc	r11, r19
    7836:	c4 06       	cpc	r12, r20
    7838:	d5 06       	cpc	r13, r21
    783a:	60 f5       	brcc	.+88     	; 0x7894 <__udivdi3+0x530>
    783c:	25 96       	adiw	r28, 0x05	; 5
    783e:	6c ad       	ldd	r22, Y+60	; 0x3c
    7840:	7d ad       	ldd	r23, Y+61	; 0x3d
    7842:	8e ad       	ldd	r24, Y+62	; 0x3e
    7844:	9f ad       	ldd	r25, Y+63	; 0x3f
    7846:	25 97       	sbiw	r28, 0x05	; 5
    7848:	61 50       	subi	r22, 0x01	; 1
    784a:	70 40       	sbci	r23, 0x00	; 0
    784c:	80 40       	sbci	r24, 0x00	; 0
    784e:	90 40       	sbci	r25, 0x00	; 0
    7850:	25 96       	adiw	r28, 0x05	; 5
    7852:	6c af       	std	Y+60, r22	; 0x3c
    7854:	7d af       	std	Y+61, r23	; 0x3d
    7856:	8e af       	std	Y+62, r24	; 0x3e
    7858:	9f af       	std	Y+63, r25	; 0x3f
    785a:	25 97       	sbiw	r28, 0x05	; 5
    785c:	a2 0c       	add	r10, r2
    785e:	b3 1c       	adc	r11, r3
    7860:	c4 1c       	adc	r12, r4
    7862:	d5 1c       	adc	r13, r5
    7864:	a2 14       	cp	r10, r2
    7866:	b3 04       	cpc	r11, r3
    7868:	c4 04       	cpc	r12, r4
    786a:	d5 04       	cpc	r13, r5
    786c:	98 f0       	brcs	.+38     	; 0x7894 <__udivdi3+0x530>
    786e:	a2 16       	cp	r10, r18
    7870:	b3 06       	cpc	r11, r19
    7872:	c4 06       	cpc	r12, r20
    7874:	d5 06       	cpc	r13, r21
    7876:	70 f4       	brcc	.+28     	; 0x7894 <__udivdi3+0x530>
    7878:	61 50       	subi	r22, 0x01	; 1
    787a:	70 40       	sbci	r23, 0x00	; 0
    787c:	80 40       	sbci	r24, 0x00	; 0
    787e:	90 40       	sbci	r25, 0x00	; 0
    7880:	25 96       	adiw	r28, 0x05	; 5
    7882:	6c af       	std	Y+60, r22	; 0x3c
    7884:	7d af       	std	Y+61, r23	; 0x3d
    7886:	8e af       	std	Y+62, r24	; 0x3e
    7888:	9f af       	std	Y+63, r25	; 0x3f
    788a:	25 97       	sbiw	r28, 0x05	; 5
    788c:	a2 0c       	add	r10, r2
    788e:	b3 1c       	adc	r11, r3
    7890:	c4 1c       	adc	r12, r4
    7892:	d5 1c       	adc	r13, r5
    7894:	a2 1a       	sub	r10, r18
    7896:	b3 0a       	sbc	r11, r19
    7898:	c4 0a       	sbc	r12, r20
    789a:	d5 0a       	sbc	r13, r21
    789c:	c6 01       	movw	r24, r12
    789e:	b5 01       	movw	r22, r10
    78a0:	a4 01       	movw	r20, r8
    78a2:	93 01       	movw	r18, r6
    78a4:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    78a8:	7b 01       	movw	r14, r22
    78aa:	8c 01       	movw	r16, r24
    78ac:	c6 01       	movw	r24, r12
    78ae:	b5 01       	movw	r22, r10
    78b0:	a4 01       	movw	r20, r8
    78b2:	93 01       	movw	r18, r6
    78b4:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    78b8:	c9 01       	movw	r24, r18
    78ba:	da 01       	movw	r26, r20
    78bc:	3c 01       	movw	r6, r24
    78be:	4d 01       	movw	r8, r26
    78c0:	c4 01       	movw	r24, r8
    78c2:	b3 01       	movw	r22, r6
    78c4:	21 96       	adiw	r28, 0x01	; 1
    78c6:	2c ad       	ldd	r18, Y+60	; 0x3c
    78c8:	3d ad       	ldd	r19, Y+61	; 0x3d
    78ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    78cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    78ce:	21 97       	sbiw	r28, 0x01	; 1
    78d0:	0e 94 04 48 	call	0x9008	; 0x9008 <__mulsi3>
    78d4:	9b 01       	movw	r18, r22
    78d6:	ac 01       	movw	r20, r24
    78d8:	87 01       	movw	r16, r14
    78da:	ff 24       	eor	r15, r15
    78dc:	ee 24       	eor	r14, r14
    78de:	89 a5       	ldd	r24, Y+41	; 0x29
    78e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    78e2:	ab a5       	ldd	r26, Y+43	; 0x2b
    78e4:	bc a5       	ldd	r27, Y+44	; 0x2c
    78e6:	a0 70       	andi	r26, 0x00	; 0
    78e8:	b0 70       	andi	r27, 0x00	; 0
    78ea:	57 01       	movw	r10, r14
    78ec:	68 01       	movw	r12, r16
    78ee:	a8 2a       	or	r10, r24
    78f0:	b9 2a       	or	r11, r25
    78f2:	ca 2a       	or	r12, r26
    78f4:	db 2a       	or	r13, r27
    78f6:	a2 16       	cp	r10, r18
    78f8:	b3 06       	cpc	r11, r19
    78fa:	c4 06       	cpc	r12, r20
    78fc:	d5 06       	cpc	r13, r21
    78fe:	e0 f4       	brcc	.+56     	; 0x7938 <__udivdi3+0x5d4>
    7900:	08 94       	sec
    7902:	61 08       	sbc	r6, r1
    7904:	71 08       	sbc	r7, r1
    7906:	81 08       	sbc	r8, r1
    7908:	91 08       	sbc	r9, r1
    790a:	a2 0c       	add	r10, r2
    790c:	b3 1c       	adc	r11, r3
    790e:	c4 1c       	adc	r12, r4
    7910:	d5 1c       	adc	r13, r5
    7912:	a2 14       	cp	r10, r2
    7914:	b3 04       	cpc	r11, r3
    7916:	c4 04       	cpc	r12, r4
    7918:	d5 04       	cpc	r13, r5
    791a:	70 f0       	brcs	.+28     	; 0x7938 <__udivdi3+0x5d4>
    791c:	a2 16       	cp	r10, r18
    791e:	b3 06       	cpc	r11, r19
    7920:	c4 06       	cpc	r12, r20
    7922:	d5 06       	cpc	r13, r21
    7924:	48 f4       	brcc	.+18     	; 0x7938 <__udivdi3+0x5d4>
    7926:	08 94       	sec
    7928:	61 08       	sbc	r6, r1
    792a:	71 08       	sbc	r7, r1
    792c:	81 08       	sbc	r8, r1
    792e:	91 08       	sbc	r9, r1
    7930:	a2 0c       	add	r10, r2
    7932:	b3 1c       	adc	r11, r3
    7934:	c4 1c       	adc	r12, r4
    7936:	d5 1c       	adc	r13, r5
    7938:	8d a5       	ldd	r24, Y+45	; 0x2d
    793a:	9e a5       	ldd	r25, Y+46	; 0x2e
    793c:	af a5       	ldd	r26, Y+47	; 0x2f
    793e:	b8 a9       	ldd	r27, Y+48	; 0x30
    7940:	6f 96       	adiw	r28, 0x1f	; 31
    7942:	0f ac       	ldd	r0, Y+63	; 0x3f
    7944:	6f 97       	sbiw	r28, 0x1f	; 31
    7946:	04 c0       	rjmp	.+8      	; 0x7950 <__udivdi3+0x5ec>
    7948:	88 0f       	add	r24, r24
    794a:	99 1f       	adc	r25, r25
    794c:	aa 1f       	adc	r26, r26
    794e:	bb 1f       	adc	r27, r27
    7950:	0a 94       	dec	r0
    7952:	d2 f7       	brpl	.-12     	; 0x7948 <__udivdi3+0x5e4>
    7954:	8d a7       	std	Y+45, r24	; 0x2d
    7956:	9e a7       	std	Y+46, r25	; 0x2e
    7958:	af a7       	std	Y+47, r26	; 0x2f
    795a:	b8 ab       	std	Y+48, r27	; 0x30
    795c:	a2 1a       	sub	r10, r18
    795e:	b3 0a       	sbc	r11, r19
    7960:	c4 0a       	sbc	r12, r20
    7962:	d5 0a       	sbc	r13, r21
    7964:	25 96       	adiw	r28, 0x05	; 5
    7966:	ec ac       	ldd	r14, Y+60	; 0x3c
    7968:	fd ac       	ldd	r15, Y+61	; 0x3d
    796a:	0e ad       	ldd	r16, Y+62	; 0x3e
    796c:	1f ad       	ldd	r17, Y+63	; 0x3f
    796e:	25 97       	sbiw	r28, 0x05	; 5
    7970:	d7 01       	movw	r26, r14
    7972:	99 27       	eor	r25, r25
    7974:	88 27       	eor	r24, r24
    7976:	68 2a       	or	r6, r24
    7978:	79 2a       	or	r7, r25
    797a:	8a 2a       	or	r8, r26
    797c:	9b 2a       	or	r9, r27
    797e:	82 01       	movw	r16, r4
    7980:	22 27       	eor	r18, r18
    7982:	33 27       	eor	r19, r19
    7984:	29 96       	adiw	r28, 0x09	; 9
    7986:	0c af       	std	Y+60, r16	; 0x3c
    7988:	1d af       	std	Y+61, r17	; 0x3d
    798a:	2e af       	std	Y+62, r18	; 0x3e
    798c:	3f af       	std	Y+63, r19	; 0x3f
    798e:	29 97       	sbiw	r28, 0x09	; 9
    7990:	a2 01       	movw	r20, r4
    7992:	91 01       	movw	r18, r2
    7994:	40 70       	andi	r20, 0x00	; 0
    7996:	50 70       	andi	r21, 0x00	; 0
    7998:	2d 96       	adiw	r28, 0x0d	; 13
    799a:	2c af       	std	Y+60, r18	; 0x3c
    799c:	3d af       	std	Y+61, r19	; 0x3d
    799e:	4e af       	std	Y+62, r20	; 0x3e
    79a0:	5f af       	std	Y+63, r21	; 0x3f
    79a2:	2d 97       	sbiw	r28, 0x0d	; 13
    79a4:	c6 01       	movw	r24, r12
    79a6:	b5 01       	movw	r22, r10
    79a8:	29 96       	adiw	r28, 0x09	; 9
    79aa:	2c ad       	ldd	r18, Y+60	; 0x3c
    79ac:	3d ad       	ldd	r19, Y+61	; 0x3d
    79ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    79b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    79b2:	29 97       	sbiw	r28, 0x09	; 9
    79b4:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    79b8:	7b 01       	movw	r14, r22
    79ba:	8c 01       	movw	r16, r24
    79bc:	c6 01       	movw	r24, r12
    79be:	b5 01       	movw	r22, r10
    79c0:	29 96       	adiw	r28, 0x09	; 9
    79c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    79c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    79c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    79c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    79ca:	29 97       	sbiw	r28, 0x09	; 9
    79cc:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    79d0:	c9 01       	movw	r24, r18
    79d2:	da 01       	movw	r26, r20
    79d4:	61 96       	adiw	r28, 0x11	; 17
    79d6:	8c af       	std	Y+60, r24	; 0x3c
    79d8:	9d af       	std	Y+61, r25	; 0x3d
    79da:	ae af       	std	Y+62, r26	; 0x3e
    79dc:	bf af       	std	Y+63, r27	; 0x3f
    79de:	61 97       	sbiw	r28, 0x11	; 17
    79e0:	bc 01       	movw	r22, r24
    79e2:	cd 01       	movw	r24, r26
    79e4:	2d 96       	adiw	r28, 0x0d	; 13
    79e6:	2c ad       	ldd	r18, Y+60	; 0x3c
    79e8:	3d ad       	ldd	r19, Y+61	; 0x3d
    79ea:	4e ad       	ldd	r20, Y+62	; 0x3e
    79ec:	5f ad       	ldd	r21, Y+63	; 0x3f
    79ee:	2d 97       	sbiw	r28, 0x0d	; 13
    79f0:	0e 94 04 48 	call	0x9008	; 0x9008 <__mulsi3>
    79f4:	9b 01       	movw	r18, r22
    79f6:	ac 01       	movw	r20, r24
    79f8:	87 01       	movw	r16, r14
    79fa:	ff 24       	eor	r15, r15
    79fc:	ee 24       	eor	r14, r14
    79fe:	ad a4       	ldd	r10, Y+45	; 0x2d
    7a00:	be a4       	ldd	r11, Y+46	; 0x2e
    7a02:	cf a4       	ldd	r12, Y+47	; 0x2f
    7a04:	d8 a8       	ldd	r13, Y+48	; 0x30
    7a06:	c6 01       	movw	r24, r12
    7a08:	aa 27       	eor	r26, r26
    7a0a:	bb 27       	eor	r27, r27
    7a0c:	57 01       	movw	r10, r14
    7a0e:	68 01       	movw	r12, r16
    7a10:	a8 2a       	or	r10, r24
    7a12:	b9 2a       	or	r11, r25
    7a14:	ca 2a       	or	r12, r26
    7a16:	db 2a       	or	r13, r27
    7a18:	a2 16       	cp	r10, r18
    7a1a:	b3 06       	cpc	r11, r19
    7a1c:	c4 06       	cpc	r12, r20
    7a1e:	d5 06       	cpc	r13, r21
    7a20:	60 f5       	brcc	.+88     	; 0x7a7a <__udivdi3+0x716>
    7a22:	61 96       	adiw	r28, 0x11	; 17
    7a24:	6c ad       	ldd	r22, Y+60	; 0x3c
    7a26:	7d ad       	ldd	r23, Y+61	; 0x3d
    7a28:	8e ad       	ldd	r24, Y+62	; 0x3e
    7a2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    7a2c:	61 97       	sbiw	r28, 0x11	; 17
    7a2e:	61 50       	subi	r22, 0x01	; 1
    7a30:	70 40       	sbci	r23, 0x00	; 0
    7a32:	80 40       	sbci	r24, 0x00	; 0
    7a34:	90 40       	sbci	r25, 0x00	; 0
    7a36:	61 96       	adiw	r28, 0x11	; 17
    7a38:	6c af       	std	Y+60, r22	; 0x3c
    7a3a:	7d af       	std	Y+61, r23	; 0x3d
    7a3c:	8e af       	std	Y+62, r24	; 0x3e
    7a3e:	9f af       	std	Y+63, r25	; 0x3f
    7a40:	61 97       	sbiw	r28, 0x11	; 17
    7a42:	a2 0c       	add	r10, r2
    7a44:	b3 1c       	adc	r11, r3
    7a46:	c4 1c       	adc	r12, r4
    7a48:	d5 1c       	adc	r13, r5
    7a4a:	a2 14       	cp	r10, r2
    7a4c:	b3 04       	cpc	r11, r3
    7a4e:	c4 04       	cpc	r12, r4
    7a50:	d5 04       	cpc	r13, r5
    7a52:	98 f0       	brcs	.+38     	; 0x7a7a <__udivdi3+0x716>
    7a54:	a2 16       	cp	r10, r18
    7a56:	b3 06       	cpc	r11, r19
    7a58:	c4 06       	cpc	r12, r20
    7a5a:	d5 06       	cpc	r13, r21
    7a5c:	70 f4       	brcc	.+28     	; 0x7a7a <__udivdi3+0x716>
    7a5e:	61 50       	subi	r22, 0x01	; 1
    7a60:	70 40       	sbci	r23, 0x00	; 0
    7a62:	80 40       	sbci	r24, 0x00	; 0
    7a64:	90 40       	sbci	r25, 0x00	; 0
    7a66:	61 96       	adiw	r28, 0x11	; 17
    7a68:	6c af       	std	Y+60, r22	; 0x3c
    7a6a:	7d af       	std	Y+61, r23	; 0x3d
    7a6c:	8e af       	std	Y+62, r24	; 0x3e
    7a6e:	9f af       	std	Y+63, r25	; 0x3f
    7a70:	61 97       	sbiw	r28, 0x11	; 17
    7a72:	a2 0c       	add	r10, r2
    7a74:	b3 1c       	adc	r11, r3
    7a76:	c4 1c       	adc	r12, r4
    7a78:	d5 1c       	adc	r13, r5
    7a7a:	a2 1a       	sub	r10, r18
    7a7c:	b3 0a       	sbc	r11, r19
    7a7e:	c4 0a       	sbc	r12, r20
    7a80:	d5 0a       	sbc	r13, r21
    7a82:	c6 01       	movw	r24, r12
    7a84:	b5 01       	movw	r22, r10
    7a86:	29 96       	adiw	r28, 0x09	; 9
    7a88:	2c ad       	ldd	r18, Y+60	; 0x3c
    7a8a:	3d ad       	ldd	r19, Y+61	; 0x3d
    7a8c:	4e ad       	ldd	r20, Y+62	; 0x3e
    7a8e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7a90:	29 97       	sbiw	r28, 0x09	; 9
    7a92:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    7a96:	7b 01       	movw	r14, r22
    7a98:	8c 01       	movw	r16, r24
    7a9a:	c6 01       	movw	r24, r12
    7a9c:	b5 01       	movw	r22, r10
    7a9e:	29 96       	adiw	r28, 0x09	; 9
    7aa0:	2c ad       	ldd	r18, Y+60	; 0x3c
    7aa2:	3d ad       	ldd	r19, Y+61	; 0x3d
    7aa4:	4e ad       	ldd	r20, Y+62	; 0x3e
    7aa6:	5f ad       	ldd	r21, Y+63	; 0x3f
    7aa8:	29 97       	sbiw	r28, 0x09	; 9
    7aaa:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    7aae:	c9 01       	movw	r24, r18
    7ab0:	da 01       	movw	r26, r20
    7ab2:	5c 01       	movw	r10, r24
    7ab4:	6d 01       	movw	r12, r26
    7ab6:	c6 01       	movw	r24, r12
    7ab8:	b5 01       	movw	r22, r10
    7aba:	2d 96       	adiw	r28, 0x0d	; 13
    7abc:	2c ad       	ldd	r18, Y+60	; 0x3c
    7abe:	3d ad       	ldd	r19, Y+61	; 0x3d
    7ac0:	4e ad       	ldd	r20, Y+62	; 0x3e
    7ac2:	5f ad       	ldd	r21, Y+63	; 0x3f
    7ac4:	2d 97       	sbiw	r28, 0x0d	; 13
    7ac6:	0e 94 04 48 	call	0x9008	; 0x9008 <__mulsi3>
    7aca:	9b 01       	movw	r18, r22
    7acc:	ac 01       	movw	r20, r24
    7ace:	87 01       	movw	r16, r14
    7ad0:	ff 24       	eor	r15, r15
    7ad2:	ee 24       	eor	r14, r14
    7ad4:	8d a5       	ldd	r24, Y+45	; 0x2d
    7ad6:	9e a5       	ldd	r25, Y+46	; 0x2e
    7ad8:	af a5       	ldd	r26, Y+47	; 0x2f
    7ada:	b8 a9       	ldd	r27, Y+48	; 0x30
    7adc:	a0 70       	andi	r26, 0x00	; 0
    7ade:	b0 70       	andi	r27, 0x00	; 0
    7ae0:	e8 2a       	or	r14, r24
    7ae2:	f9 2a       	or	r15, r25
    7ae4:	0a 2b       	or	r16, r26
    7ae6:	1b 2b       	or	r17, r27
    7ae8:	e2 16       	cp	r14, r18
    7aea:	f3 06       	cpc	r15, r19
    7aec:	04 07       	cpc	r16, r20
    7aee:	15 07       	cpc	r17, r21
    7af0:	c0 f4       	brcc	.+48     	; 0x7b22 <__udivdi3+0x7be>
    7af2:	08 94       	sec
    7af4:	a1 08       	sbc	r10, r1
    7af6:	b1 08       	sbc	r11, r1
    7af8:	c1 08       	sbc	r12, r1
    7afa:	d1 08       	sbc	r13, r1
    7afc:	e2 0c       	add	r14, r2
    7afe:	f3 1c       	adc	r15, r3
    7b00:	04 1d       	adc	r16, r4
    7b02:	15 1d       	adc	r17, r5
    7b04:	e2 14       	cp	r14, r2
    7b06:	f3 04       	cpc	r15, r3
    7b08:	04 05       	cpc	r16, r4
    7b0a:	15 05       	cpc	r17, r5
    7b0c:	50 f0       	brcs	.+20     	; 0x7b22 <__udivdi3+0x7be>
    7b0e:	e2 16       	cp	r14, r18
    7b10:	f3 06       	cpc	r15, r19
    7b12:	04 07       	cpc	r16, r20
    7b14:	15 07       	cpc	r17, r21
    7b16:	28 f4       	brcc	.+10     	; 0x7b22 <__udivdi3+0x7be>
    7b18:	08 94       	sec
    7b1a:	a1 08       	sbc	r10, r1
    7b1c:	b1 08       	sbc	r11, r1
    7b1e:	c1 08       	sbc	r12, r1
    7b20:	d1 08       	sbc	r13, r1
    7b22:	61 96       	adiw	r28, 0x11	; 17
    7b24:	ec ac       	ldd	r14, Y+60	; 0x3c
    7b26:	fd ac       	ldd	r15, Y+61	; 0x3d
    7b28:	0e ad       	ldd	r16, Y+62	; 0x3e
    7b2a:	1f ad       	ldd	r17, Y+63	; 0x3f
    7b2c:	61 97       	sbiw	r28, 0x11	; 17
    7b2e:	d7 01       	movw	r26, r14
    7b30:	99 27       	eor	r25, r25
    7b32:	88 27       	eor	r24, r24
    7b34:	96 01       	movw	r18, r12
    7b36:	85 01       	movw	r16, r10
    7b38:	08 2b       	or	r16, r24
    7b3a:	19 2b       	or	r17, r25
    7b3c:	2a 2b       	or	r18, r26
    7b3e:	3b 2b       	or	r19, r27
    7b40:	09 ab       	std	Y+49, r16	; 0x31
    7b42:	1a ab       	std	Y+50, r17	; 0x32
    7b44:	2b ab       	std	Y+51, r18	; 0x33
    7b46:	3c ab       	std	Y+52, r19	; 0x34
    7b48:	62 c2       	rjmp	.+1220   	; 0x800e <__udivdi3+0xcaa>
    7b4a:	6e 14       	cp	r6, r14
    7b4c:	7f 04       	cpc	r7, r15
    7b4e:	80 06       	cpc	r8, r16
    7b50:	91 06       	cpc	r9, r17
    7b52:	08 f4       	brcc	.+2      	; 0x7b56 <__udivdi3+0x7f2>
    7b54:	51 c2       	rjmp	.+1186   	; 0x7ff8 <__udivdi3+0xc94>
    7b56:	20 e0       	ldi	r18, 0x00	; 0
    7b58:	e2 16       	cp	r14, r18
    7b5a:	20 e0       	ldi	r18, 0x00	; 0
    7b5c:	f2 06       	cpc	r15, r18
    7b5e:	21 e0       	ldi	r18, 0x01	; 1
    7b60:	02 07       	cpc	r16, r18
    7b62:	20 e0       	ldi	r18, 0x00	; 0
    7b64:	12 07       	cpc	r17, r18
    7b66:	88 f4       	brcc	.+34     	; 0x7b8a <__udivdi3+0x826>
    7b68:	3f ef       	ldi	r19, 0xFF	; 255
    7b6a:	e3 16       	cp	r14, r19
    7b6c:	f1 04       	cpc	r15, r1
    7b6e:	01 05       	cpc	r16, r1
    7b70:	11 05       	cpc	r17, r1
    7b72:	31 f0       	breq	.+12     	; 0x7b80 <__udivdi3+0x81c>
    7b74:	28 f0       	brcs	.+10     	; 0x7b80 <__udivdi3+0x81c>
    7b76:	48 e0       	ldi	r20, 0x08	; 8
    7b78:	50 e0       	ldi	r21, 0x00	; 0
    7b7a:	60 e0       	ldi	r22, 0x00	; 0
    7b7c:	70 e0       	ldi	r23, 0x00	; 0
    7b7e:	17 c0       	rjmp	.+46     	; 0x7bae <__udivdi3+0x84a>
    7b80:	40 e0       	ldi	r20, 0x00	; 0
    7b82:	50 e0       	ldi	r21, 0x00	; 0
    7b84:	60 e0       	ldi	r22, 0x00	; 0
    7b86:	70 e0       	ldi	r23, 0x00	; 0
    7b88:	12 c0       	rjmp	.+36     	; 0x7bae <__udivdi3+0x84a>
    7b8a:	40 e0       	ldi	r20, 0x00	; 0
    7b8c:	e4 16       	cp	r14, r20
    7b8e:	40 e0       	ldi	r20, 0x00	; 0
    7b90:	f4 06       	cpc	r15, r20
    7b92:	40 e0       	ldi	r20, 0x00	; 0
    7b94:	04 07       	cpc	r16, r20
    7b96:	41 e0       	ldi	r20, 0x01	; 1
    7b98:	14 07       	cpc	r17, r20
    7b9a:	28 f0       	brcs	.+10     	; 0x7ba6 <__udivdi3+0x842>
    7b9c:	48 e1       	ldi	r20, 0x18	; 24
    7b9e:	50 e0       	ldi	r21, 0x00	; 0
    7ba0:	60 e0       	ldi	r22, 0x00	; 0
    7ba2:	70 e0       	ldi	r23, 0x00	; 0
    7ba4:	04 c0       	rjmp	.+8      	; 0x7bae <__udivdi3+0x84a>
    7ba6:	40 e1       	ldi	r20, 0x10	; 16
    7ba8:	50 e0       	ldi	r21, 0x00	; 0
    7baa:	60 e0       	ldi	r22, 0x00	; 0
    7bac:	70 e0       	ldi	r23, 0x00	; 0
    7bae:	d8 01       	movw	r26, r16
    7bb0:	c7 01       	movw	r24, r14
    7bb2:	04 2e       	mov	r0, r20
    7bb4:	04 c0       	rjmp	.+8      	; 0x7bbe <__udivdi3+0x85a>
    7bb6:	b6 95       	lsr	r27
    7bb8:	a7 95       	ror	r26
    7bba:	97 95       	ror	r25
    7bbc:	87 95       	ror	r24
    7bbe:	0a 94       	dec	r0
    7bc0:	d2 f7       	brpl	.-12     	; 0x7bb6 <__udivdi3+0x852>
    7bc2:	83 5d       	subi	r24, 0xD3	; 211
    7bc4:	9f 4d       	sbci	r25, 0xDF	; 223
    7bc6:	dc 01       	movw	r26, r24
    7bc8:	2c 91       	ld	r18, X
    7bca:	30 e2       	ldi	r19, 0x20	; 32
    7bcc:	a3 2e       	mov	r10, r19
    7bce:	b1 2c       	mov	r11, r1
    7bd0:	c1 2c       	mov	r12, r1
    7bd2:	d1 2c       	mov	r13, r1
    7bd4:	d6 01       	movw	r26, r12
    7bd6:	c5 01       	movw	r24, r10
    7bd8:	84 1b       	sub	r24, r20
    7bda:	95 0b       	sbc	r25, r21
    7bdc:	a6 0b       	sbc	r26, r22
    7bde:	b7 0b       	sbc	r27, r23
    7be0:	82 1b       	sub	r24, r18
    7be2:	91 09       	sbc	r25, r1
    7be4:	a1 09       	sbc	r26, r1
    7be6:	b1 09       	sbc	r27, r1
    7be8:	00 97       	sbiw	r24, 0x00	; 0
    7bea:	a1 05       	cpc	r26, r1
    7bec:	b1 05       	cpc	r27, r1
    7bee:	89 f4       	brne	.+34     	; 0x7c12 <__udivdi3+0x8ae>
    7bf0:	e6 14       	cp	r14, r6
    7bf2:	f7 04       	cpc	r15, r7
    7bf4:	08 05       	cpc	r16, r8
    7bf6:	19 05       	cpc	r17, r9
    7bf8:	08 f4       	brcc	.+2      	; 0x7bfc <__udivdi3+0x898>
    7bfa:	f2 c1       	rjmp	.+996    	; 0x7fe0 <__udivdi3+0xc7c>
    7bfc:	6d a4       	ldd	r6, Y+45	; 0x2d
    7bfe:	7e a4       	ldd	r7, Y+46	; 0x2e
    7c00:	8f a4       	ldd	r8, Y+47	; 0x2f
    7c02:	98 a8       	ldd	r9, Y+48	; 0x30
    7c04:	62 14       	cp	r6, r2
    7c06:	73 04       	cpc	r7, r3
    7c08:	84 04       	cpc	r8, r4
    7c0a:	95 04       	cpc	r9, r5
    7c0c:	08 f0       	brcs	.+2      	; 0x7c10 <__udivdi3+0x8ac>
    7c0e:	e8 c1       	rjmp	.+976    	; 0x7fe0 <__udivdi3+0xc7c>
    7c10:	f3 c1       	rjmp	.+998    	; 0x7ff8 <__udivdi3+0xc94>
    7c12:	6e 96       	adiw	r28, 0x1e	; 30
    7c14:	8f af       	std	Y+63, r24	; 0x3f
    7c16:	6e 97       	sbiw	r28, 0x1e	; 30
    7c18:	08 2e       	mov	r0, r24
    7c1a:	04 c0       	rjmp	.+8      	; 0x7c24 <__udivdi3+0x8c0>
    7c1c:	ee 0c       	add	r14, r14
    7c1e:	ff 1c       	adc	r15, r15
    7c20:	00 1f       	adc	r16, r16
    7c22:	11 1f       	adc	r17, r17
    7c24:	0a 94       	dec	r0
    7c26:	d2 f7       	brpl	.-12     	; 0x7c1c <__udivdi3+0x8b8>
    7c28:	6a 2d       	mov	r22, r10
    7c2a:	68 1b       	sub	r22, r24
    7c2c:	d2 01       	movw	r26, r4
    7c2e:	c1 01       	movw	r24, r2
    7c30:	06 2e       	mov	r0, r22
    7c32:	04 c0       	rjmp	.+8      	; 0x7c3c <__udivdi3+0x8d8>
    7c34:	b6 95       	lsr	r27
    7c36:	a7 95       	ror	r26
    7c38:	97 95       	ror	r25
    7c3a:	87 95       	ror	r24
    7c3c:	0a 94       	dec	r0
    7c3e:	d2 f7       	brpl	.-12     	; 0x7c34 <__udivdi3+0x8d0>
    7c40:	5c 01       	movw	r10, r24
    7c42:	6d 01       	movw	r12, r26
    7c44:	ae 28       	or	r10, r14
    7c46:	bf 28       	or	r11, r15
    7c48:	c0 2a       	or	r12, r16
    7c4a:	d1 2a       	or	r13, r17
    7c4c:	ad a2       	std	Y+37, r10	; 0x25
    7c4e:	be a2       	std	Y+38, r11	; 0x26
    7c50:	cf a2       	std	Y+39, r12	; 0x27
    7c52:	d8 a6       	std	Y+40, r13	; 0x28
    7c54:	72 01       	movw	r14, r4
    7c56:	61 01       	movw	r12, r2
    7c58:	6e 96       	adiw	r28, 0x1e	; 30
    7c5a:	0f ac       	ldd	r0, Y+63	; 0x3f
    7c5c:	6e 97       	sbiw	r28, 0x1e	; 30
    7c5e:	04 c0       	rjmp	.+8      	; 0x7c68 <__udivdi3+0x904>
    7c60:	cc 0c       	add	r12, r12
    7c62:	dd 1c       	adc	r13, r13
    7c64:	ee 1c       	adc	r14, r14
    7c66:	ff 1c       	adc	r15, r15
    7c68:	0a 94       	dec	r0
    7c6a:	d2 f7       	brpl	.-12     	; 0x7c60 <__udivdi3+0x8fc>
    7c6c:	c9 a2       	std	Y+33, r12	; 0x21
    7c6e:	da a2       	std	Y+34, r13	; 0x22
    7c70:	eb a2       	std	Y+35, r14	; 0x23
    7c72:	fc a2       	std	Y+36, r15	; 0x24
    7c74:	64 01       	movw	r12, r8
    7c76:	53 01       	movw	r10, r6
    7c78:	06 2e       	mov	r0, r22
    7c7a:	04 c0       	rjmp	.+8      	; 0x7c84 <__udivdi3+0x920>
    7c7c:	d6 94       	lsr	r13
    7c7e:	c7 94       	ror	r12
    7c80:	b7 94       	ror	r11
    7c82:	a7 94       	ror	r10
    7c84:	0a 94       	dec	r0
    7c86:	d2 f7       	brpl	.-12     	; 0x7c7c <__udivdi3+0x918>
    7c88:	d4 01       	movw	r26, r8
    7c8a:	c3 01       	movw	r24, r6
    7c8c:	6e 96       	adiw	r28, 0x1e	; 30
    7c8e:	0f ac       	ldd	r0, Y+63	; 0x3f
    7c90:	6e 97       	sbiw	r28, 0x1e	; 30
    7c92:	04 c0       	rjmp	.+8      	; 0x7c9c <__udivdi3+0x938>
    7c94:	88 0f       	add	r24, r24
    7c96:	99 1f       	adc	r25, r25
    7c98:	aa 1f       	adc	r26, r26
    7c9a:	bb 1f       	adc	r27, r27
    7c9c:	0a 94       	dec	r0
    7c9e:	d2 f7       	brpl	.-12     	; 0x7c94 <__udivdi3+0x930>
    7ca0:	ed a4       	ldd	r14, Y+45	; 0x2d
    7ca2:	fe a4       	ldd	r15, Y+46	; 0x2e
    7ca4:	0f a5       	ldd	r16, Y+47	; 0x2f
    7ca6:	18 a9       	ldd	r17, Y+48	; 0x30
    7ca8:	04 c0       	rjmp	.+8      	; 0x7cb2 <__udivdi3+0x94e>
    7caa:	16 95       	lsr	r17
    7cac:	07 95       	ror	r16
    7cae:	f7 94       	ror	r15
    7cb0:	e7 94       	ror	r14
    7cb2:	6a 95       	dec	r22
    7cb4:	d2 f7       	brpl	.-12     	; 0x7caa <__udivdi3+0x946>
    7cb6:	37 01       	movw	r6, r14
    7cb8:	48 01       	movw	r8, r16
    7cba:	68 2a       	or	r6, r24
    7cbc:	79 2a       	or	r7, r25
    7cbe:	8a 2a       	or	r8, r26
    7cc0:	9b 2a       	or	r9, r27
    7cc2:	6d 8e       	std	Y+29, r6	; 0x1d
    7cc4:	7e 8e       	std	Y+30, r7	; 0x1e
    7cc6:	8f 8e       	std	Y+31, r8	; 0x1f
    7cc8:	98 a2       	std	Y+32, r9	; 0x20
    7cca:	ed a0       	ldd	r14, Y+37	; 0x25
    7ccc:	fe a0       	ldd	r15, Y+38	; 0x26
    7cce:	0f a1       	ldd	r16, Y+39	; 0x27
    7cd0:	18 a5       	ldd	r17, Y+40	; 0x28
    7cd2:	38 01       	movw	r6, r16
    7cd4:	88 24       	eor	r8, r8
    7cd6:	99 24       	eor	r9, r9
    7cd8:	98 01       	movw	r18, r16
    7cda:	87 01       	movw	r16, r14
    7cdc:	20 70       	andi	r18, 0x00	; 0
    7cde:	30 70       	andi	r19, 0x00	; 0
    7ce0:	65 96       	adiw	r28, 0x15	; 21
    7ce2:	0c af       	std	Y+60, r16	; 0x3c
    7ce4:	1d af       	std	Y+61, r17	; 0x3d
    7ce6:	2e af       	std	Y+62, r18	; 0x3e
    7ce8:	3f af       	std	Y+63, r19	; 0x3f
    7cea:	65 97       	sbiw	r28, 0x15	; 21
    7cec:	c6 01       	movw	r24, r12
    7cee:	b5 01       	movw	r22, r10
    7cf0:	a4 01       	movw	r20, r8
    7cf2:	93 01       	movw	r18, r6
    7cf4:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    7cf8:	7b 01       	movw	r14, r22
    7cfa:	8c 01       	movw	r16, r24
    7cfc:	c6 01       	movw	r24, r12
    7cfe:	b5 01       	movw	r22, r10
    7d00:	a4 01       	movw	r20, r8
    7d02:	93 01       	movw	r18, r6
    7d04:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    7d08:	c9 01       	movw	r24, r18
    7d0a:	da 01       	movw	r26, r20
    7d0c:	1c 01       	movw	r2, r24
    7d0e:	2d 01       	movw	r4, r26
    7d10:	c2 01       	movw	r24, r4
    7d12:	b1 01       	movw	r22, r2
    7d14:	65 96       	adiw	r28, 0x15	; 21
    7d16:	2c ad       	ldd	r18, Y+60	; 0x3c
    7d18:	3d ad       	ldd	r19, Y+61	; 0x3d
    7d1a:	4e ad       	ldd	r20, Y+62	; 0x3e
    7d1c:	5f ad       	ldd	r21, Y+63	; 0x3f
    7d1e:	65 97       	sbiw	r28, 0x15	; 21
    7d20:	0e 94 04 48 	call	0x9008	; 0x9008 <__mulsi3>
    7d24:	9b 01       	movw	r18, r22
    7d26:	ac 01       	movw	r20, r24
    7d28:	87 01       	movw	r16, r14
    7d2a:	ff 24       	eor	r15, r15
    7d2c:	ee 24       	eor	r14, r14
    7d2e:	ad 8c       	ldd	r10, Y+29	; 0x1d
    7d30:	be 8c       	ldd	r11, Y+30	; 0x1e
    7d32:	cf 8c       	ldd	r12, Y+31	; 0x1f
    7d34:	d8 a0       	ldd	r13, Y+32	; 0x20
    7d36:	c6 01       	movw	r24, r12
    7d38:	aa 27       	eor	r26, r26
    7d3a:	bb 27       	eor	r27, r27
    7d3c:	57 01       	movw	r10, r14
    7d3e:	68 01       	movw	r12, r16
    7d40:	a8 2a       	or	r10, r24
    7d42:	b9 2a       	or	r11, r25
    7d44:	ca 2a       	or	r12, r26
    7d46:	db 2a       	or	r13, r27
    7d48:	a2 16       	cp	r10, r18
    7d4a:	b3 06       	cpc	r11, r19
    7d4c:	c4 06       	cpc	r12, r20
    7d4e:	d5 06       	cpc	r13, r21
    7d50:	00 f5       	brcc	.+64     	; 0x7d92 <__udivdi3+0xa2e>
    7d52:	08 94       	sec
    7d54:	21 08       	sbc	r2, r1
    7d56:	31 08       	sbc	r3, r1
    7d58:	41 08       	sbc	r4, r1
    7d5a:	51 08       	sbc	r5, r1
    7d5c:	ed a0       	ldd	r14, Y+37	; 0x25
    7d5e:	fe a0       	ldd	r15, Y+38	; 0x26
    7d60:	0f a1       	ldd	r16, Y+39	; 0x27
    7d62:	18 a5       	ldd	r17, Y+40	; 0x28
    7d64:	ae 0c       	add	r10, r14
    7d66:	bf 1c       	adc	r11, r15
    7d68:	c0 1e       	adc	r12, r16
    7d6a:	d1 1e       	adc	r13, r17
    7d6c:	ae 14       	cp	r10, r14
    7d6e:	bf 04       	cpc	r11, r15
    7d70:	c0 06       	cpc	r12, r16
    7d72:	d1 06       	cpc	r13, r17
    7d74:	70 f0       	brcs	.+28     	; 0x7d92 <__udivdi3+0xa2e>
    7d76:	a2 16       	cp	r10, r18
    7d78:	b3 06       	cpc	r11, r19
    7d7a:	c4 06       	cpc	r12, r20
    7d7c:	d5 06       	cpc	r13, r21
    7d7e:	48 f4       	brcc	.+18     	; 0x7d92 <__udivdi3+0xa2e>
    7d80:	08 94       	sec
    7d82:	21 08       	sbc	r2, r1
    7d84:	31 08       	sbc	r3, r1
    7d86:	41 08       	sbc	r4, r1
    7d88:	51 08       	sbc	r5, r1
    7d8a:	ae 0c       	add	r10, r14
    7d8c:	bf 1c       	adc	r11, r15
    7d8e:	c0 1e       	adc	r12, r16
    7d90:	d1 1e       	adc	r13, r17
    7d92:	a2 1a       	sub	r10, r18
    7d94:	b3 0a       	sbc	r11, r19
    7d96:	c4 0a       	sbc	r12, r20
    7d98:	d5 0a       	sbc	r13, r21
    7d9a:	c6 01       	movw	r24, r12
    7d9c:	b5 01       	movw	r22, r10
    7d9e:	a4 01       	movw	r20, r8
    7da0:	93 01       	movw	r18, r6
    7da2:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    7da6:	7b 01       	movw	r14, r22
    7da8:	8c 01       	movw	r16, r24
    7daa:	c6 01       	movw	r24, r12
    7dac:	b5 01       	movw	r22, r10
    7dae:	a4 01       	movw	r20, r8
    7db0:	93 01       	movw	r18, r6
    7db2:	0e 94 23 48 	call	0x9046	; 0x9046 <__udivmodsi4>
    7db6:	c9 01       	movw	r24, r18
    7db8:	da 01       	movw	r26, r20
    7dba:	3c 01       	movw	r6, r24
    7dbc:	4d 01       	movw	r8, r26
    7dbe:	c4 01       	movw	r24, r8
    7dc0:	b3 01       	movw	r22, r6
    7dc2:	65 96       	adiw	r28, 0x15	; 21
    7dc4:	2c ad       	ldd	r18, Y+60	; 0x3c
    7dc6:	3d ad       	ldd	r19, Y+61	; 0x3d
    7dc8:	4e ad       	ldd	r20, Y+62	; 0x3e
    7dca:	5f ad       	ldd	r21, Y+63	; 0x3f
    7dcc:	65 97       	sbiw	r28, 0x15	; 21
    7dce:	0e 94 04 48 	call	0x9008	; 0x9008 <__mulsi3>
    7dd2:	9b 01       	movw	r18, r22
    7dd4:	ac 01       	movw	r20, r24
    7dd6:	87 01       	movw	r16, r14
    7dd8:	ff 24       	eor	r15, r15
    7dda:	ee 24       	eor	r14, r14
    7ddc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7dde:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7de0:	af 8d       	ldd	r26, Y+31	; 0x1f
    7de2:	b8 a1       	ldd	r27, Y+32	; 0x20
    7de4:	a0 70       	andi	r26, 0x00	; 0
    7de6:	b0 70       	andi	r27, 0x00	; 0
    7de8:	57 01       	movw	r10, r14
    7dea:	68 01       	movw	r12, r16
    7dec:	a8 2a       	or	r10, r24
    7dee:	b9 2a       	or	r11, r25
    7df0:	ca 2a       	or	r12, r26
    7df2:	db 2a       	or	r13, r27
    7df4:	a2 16       	cp	r10, r18
    7df6:	b3 06       	cpc	r11, r19
    7df8:	c4 06       	cpc	r12, r20
    7dfa:	d5 06       	cpc	r13, r21
    7dfc:	00 f5       	brcc	.+64     	; 0x7e3e <__udivdi3+0xada>
    7dfe:	08 94       	sec
    7e00:	61 08       	sbc	r6, r1
    7e02:	71 08       	sbc	r7, r1
    7e04:	81 08       	sbc	r8, r1
    7e06:	91 08       	sbc	r9, r1
    7e08:	6d a1       	ldd	r22, Y+37	; 0x25
    7e0a:	7e a1       	ldd	r23, Y+38	; 0x26
    7e0c:	8f a1       	ldd	r24, Y+39	; 0x27
    7e0e:	98 a5       	ldd	r25, Y+40	; 0x28
    7e10:	a6 0e       	add	r10, r22
    7e12:	b7 1e       	adc	r11, r23
    7e14:	c8 1e       	adc	r12, r24
    7e16:	d9 1e       	adc	r13, r25
    7e18:	a6 16       	cp	r10, r22
    7e1a:	b7 06       	cpc	r11, r23
    7e1c:	c8 06       	cpc	r12, r24
    7e1e:	d9 06       	cpc	r13, r25
    7e20:	70 f0       	brcs	.+28     	; 0x7e3e <__udivdi3+0xada>
    7e22:	a2 16       	cp	r10, r18
    7e24:	b3 06       	cpc	r11, r19
    7e26:	c4 06       	cpc	r12, r20
    7e28:	d5 06       	cpc	r13, r21
    7e2a:	48 f4       	brcc	.+18     	; 0x7e3e <__udivdi3+0xada>
    7e2c:	08 94       	sec
    7e2e:	61 08       	sbc	r6, r1
    7e30:	71 08       	sbc	r7, r1
    7e32:	81 08       	sbc	r8, r1
    7e34:	91 08       	sbc	r9, r1
    7e36:	a6 0e       	add	r10, r22
    7e38:	b7 1e       	adc	r11, r23
    7e3a:	c8 1e       	adc	r12, r24
    7e3c:	d9 1e       	adc	r13, r25
    7e3e:	d6 01       	movw	r26, r12
    7e40:	c5 01       	movw	r24, r10
    7e42:	82 1b       	sub	r24, r18
    7e44:	93 0b       	sbc	r25, r19
    7e46:	a4 0b       	sbc	r26, r20
    7e48:	b5 0b       	sbc	r27, r21
    7e4a:	89 8f       	std	Y+25, r24	; 0x19
    7e4c:	9a 8f       	std	Y+26, r25	; 0x1a
    7e4e:	ab 8f       	std	Y+27, r26	; 0x1b
    7e50:	bc 8f       	std	Y+28, r27	; 0x1c
    7e52:	d1 01       	movw	r26, r2
    7e54:	99 27       	eor	r25, r25
    7e56:	88 27       	eor	r24, r24
    7e58:	64 01       	movw	r12, r8
    7e5a:	53 01       	movw	r10, r6
    7e5c:	a8 2a       	or	r10, r24
    7e5e:	b9 2a       	or	r11, r25
    7e60:	ca 2a       	or	r12, r26
    7e62:	db 2a       	or	r13, r27
    7e64:	a9 aa       	std	Y+49, r10	; 0x31
    7e66:	ba aa       	std	Y+50, r11	; 0x32
    7e68:	cb aa       	std	Y+51, r12	; 0x33
    7e6a:	dc aa       	std	Y+52, r13	; 0x34
    7e6c:	86 01       	movw	r16, r12
    7e6e:	75 01       	movw	r14, r10
    7e70:	2f ef       	ldi	r18, 0xFF	; 255
    7e72:	3f ef       	ldi	r19, 0xFF	; 255
    7e74:	40 e0       	ldi	r20, 0x00	; 0
    7e76:	50 e0       	ldi	r21, 0x00	; 0
    7e78:	e2 22       	and	r14, r18
    7e7a:	f3 22       	and	r15, r19
    7e7c:	04 23       	and	r16, r20
    7e7e:	15 23       	and	r17, r21
    7e80:	a6 01       	movw	r20, r12
    7e82:	66 27       	eor	r22, r22
    7e84:	77 27       	eor	r23, r23
    7e86:	6d 96       	adiw	r28, 0x1d	; 29
    7e88:	4c af       	std	Y+60, r20	; 0x3c
    7e8a:	5d af       	std	Y+61, r21	; 0x3d
    7e8c:	6e af       	std	Y+62, r22	; 0x3e
    7e8e:	7f af       	std	Y+63, r23	; 0x3f
    7e90:	6d 97       	sbiw	r28, 0x1d	; 29
    7e92:	a9 a0       	ldd	r10, Y+33	; 0x21
    7e94:	ba a0       	ldd	r11, Y+34	; 0x22
    7e96:	cb a0       	ldd	r12, Y+35	; 0x23
    7e98:	dc a0       	ldd	r13, Y+36	; 0x24
    7e9a:	6f ef       	ldi	r22, 0xFF	; 255
    7e9c:	7f ef       	ldi	r23, 0xFF	; 255
    7e9e:	80 e0       	ldi	r24, 0x00	; 0
    7ea0:	90 e0       	ldi	r25, 0x00	; 0
    7ea2:	a6 22       	and	r10, r22
    7ea4:	b7 22       	and	r11, r23
    7ea6:	c8 22       	and	r12, r24
    7ea8:	d9 22       	and	r13, r25
    7eaa:	89 a1       	ldd	r24, Y+33	; 0x21
    7eac:	9a a1       	ldd	r25, Y+34	; 0x22
    7eae:	ab a1       	ldd	r26, Y+35	; 0x23
    7eb0:	bc a1       	ldd	r27, Y+36	; 0x24
    7eb2:	1d 01       	movw	r2, r26
    7eb4:	44 24       	eor	r4, r4
    7eb6:	55 24       	eor	r5, r5
    7eb8:	c8 01       	movw	r24, r16
    7eba:	b7 01       	movw	r22, r14
    7ebc:	a6 01       	movw	r20, r12
    7ebe:	95 01       	movw	r18, r10
    7ec0:	0e 94 04 48 	call	0x9008	; 0x9008 <__mulsi3>
    7ec4:	69 96       	adiw	r28, 0x19	; 25
    7ec6:	6c af       	std	Y+60, r22	; 0x3c
    7ec8:	7d af       	std	Y+61, r23	; 0x3d
    7eca:	8e af       	std	Y+62, r24	; 0x3e
    7ecc:	9f af       	std	Y+63, r25	; 0x3f
    7ece:	69 97       	sbiw	r28, 0x19	; 25
    7ed0:	c8 01       	movw	r24, r16
    7ed2:	b7 01       	movw	r22, r14
    7ed4:	a2 01       	movw	r20, r4
    7ed6:	91 01       	movw	r18, r2
    7ed8:	0e 94 04 48 	call	0x9008	; 0x9008 <__mulsi3>
    7edc:	3b 01       	movw	r6, r22
    7ede:	4c 01       	movw	r8, r24
    7ee0:	6d 96       	adiw	r28, 0x1d	; 29
    7ee2:	6c ad       	ldd	r22, Y+60	; 0x3c
    7ee4:	7d ad       	ldd	r23, Y+61	; 0x3d
    7ee6:	8e ad       	ldd	r24, Y+62	; 0x3e
    7ee8:	9f ad       	ldd	r25, Y+63	; 0x3f
    7eea:	6d 97       	sbiw	r28, 0x1d	; 29
    7eec:	a6 01       	movw	r20, r12
    7eee:	95 01       	movw	r18, r10
    7ef0:	0e 94 04 48 	call	0x9008	; 0x9008 <__mulsi3>
    7ef4:	7b 01       	movw	r14, r22
    7ef6:	8c 01       	movw	r16, r24
    7ef8:	6d 96       	adiw	r28, 0x1d	; 29
    7efa:	6c ad       	ldd	r22, Y+60	; 0x3c
    7efc:	7d ad       	ldd	r23, Y+61	; 0x3d
    7efe:	8e ad       	ldd	r24, Y+62	; 0x3e
    7f00:	9f ad       	ldd	r25, Y+63	; 0x3f
    7f02:	6d 97       	sbiw	r28, 0x1d	; 29
    7f04:	a2 01       	movw	r20, r4
    7f06:	91 01       	movw	r18, r2
    7f08:	0e 94 04 48 	call	0x9008	; 0x9008 <__mulsi3>
    7f0c:	5b 01       	movw	r10, r22
    7f0e:	6c 01       	movw	r12, r24
    7f10:	a8 01       	movw	r20, r16
    7f12:	97 01       	movw	r18, r14
    7f14:	26 0d       	add	r18, r6
    7f16:	37 1d       	adc	r19, r7
    7f18:	48 1d       	adc	r20, r8
    7f1a:	59 1d       	adc	r21, r9
    7f1c:	69 96       	adiw	r28, 0x19	; 25
    7f1e:	6c ac       	ldd	r6, Y+60	; 0x3c
    7f20:	7d ac       	ldd	r7, Y+61	; 0x3d
    7f22:	8e ac       	ldd	r8, Y+62	; 0x3e
    7f24:	9f ac       	ldd	r9, Y+63	; 0x3f
    7f26:	69 97       	sbiw	r28, 0x19	; 25
    7f28:	c4 01       	movw	r24, r8
    7f2a:	aa 27       	eor	r26, r26
    7f2c:	bb 27       	eor	r27, r27
    7f2e:	28 0f       	add	r18, r24
    7f30:	39 1f       	adc	r19, r25
    7f32:	4a 1f       	adc	r20, r26
    7f34:	5b 1f       	adc	r21, r27
    7f36:	2e 15       	cp	r18, r14
    7f38:	3f 05       	cpc	r19, r15
    7f3a:	40 07       	cpc	r20, r16
    7f3c:	51 07       	cpc	r21, r17
    7f3e:	48 f4       	brcc	.+18     	; 0x7f52 <__udivdi3+0xbee>
    7f40:	e1 2c       	mov	r14, r1
    7f42:	f1 2c       	mov	r15, r1
    7f44:	61 e0       	ldi	r22, 0x01	; 1
    7f46:	06 2f       	mov	r16, r22
    7f48:	11 2d       	mov	r17, r1
    7f4a:	ae 0c       	add	r10, r14
    7f4c:	bf 1c       	adc	r11, r15
    7f4e:	c0 1e       	adc	r12, r16
    7f50:	d1 1e       	adc	r13, r17
    7f52:	ca 01       	movw	r24, r20
    7f54:	aa 27       	eor	r26, r26
    7f56:	bb 27       	eor	r27, r27
    7f58:	bc 01       	movw	r22, r24
    7f5a:	cd 01       	movw	r24, r26
    7f5c:	6a 0d       	add	r22, r10
    7f5e:	7b 1d       	adc	r23, r11
    7f60:	8c 1d       	adc	r24, r12
    7f62:	9d 1d       	adc	r25, r13
    7f64:	69 8c       	ldd	r6, Y+25	; 0x19
    7f66:	7a 8c       	ldd	r7, Y+26	; 0x1a
    7f68:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7f6a:	9c 8c       	ldd	r9, Y+28	; 0x1c
    7f6c:	66 16       	cp	r6, r22
    7f6e:	77 06       	cpc	r7, r23
    7f70:	88 06       	cpc	r8, r24
    7f72:	99 06       	cpc	r9, r25
    7f74:	40 f1       	brcs	.+80     	; 0x7fc6 <__udivdi3+0xc62>
    7f76:	66 15       	cp	r22, r6
    7f78:	77 05       	cpc	r23, r7
    7f7a:	88 05       	cpc	r24, r8
    7f7c:	99 05       	cpc	r25, r9
    7f7e:	09 f0       	breq	.+2      	; 0x7f82 <__udivdi3+0xc1e>
    7f80:	43 c0       	rjmp	.+134    	; 0x8008 <__udivdi3+0xca4>
    7f82:	d9 01       	movw	r26, r18
    7f84:	99 27       	eor	r25, r25
    7f86:	88 27       	eor	r24, r24
    7f88:	69 96       	adiw	r28, 0x19	; 25
    7f8a:	2c ad       	ldd	r18, Y+60	; 0x3c
    7f8c:	3d ad       	ldd	r19, Y+61	; 0x3d
    7f8e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7f90:	5f ad       	ldd	r21, Y+63	; 0x3f
    7f92:	69 97       	sbiw	r28, 0x19	; 25
    7f94:	40 70       	andi	r20, 0x00	; 0
    7f96:	50 70       	andi	r21, 0x00	; 0
    7f98:	82 0f       	add	r24, r18
    7f9a:	93 1f       	adc	r25, r19
    7f9c:	a4 1f       	adc	r26, r20
    7f9e:	b5 1f       	adc	r27, r21
    7fa0:	2d a5       	ldd	r18, Y+45	; 0x2d
    7fa2:	3e a5       	ldd	r19, Y+46	; 0x2e
    7fa4:	4f a5       	ldd	r20, Y+47	; 0x2f
    7fa6:	58 a9       	ldd	r21, Y+48	; 0x30
    7fa8:	6e 96       	adiw	r28, 0x1e	; 30
    7faa:	0f ac       	ldd	r0, Y+63	; 0x3f
    7fac:	6e 97       	sbiw	r28, 0x1e	; 30
    7fae:	04 c0       	rjmp	.+8      	; 0x7fb8 <__udivdi3+0xc54>
    7fb0:	22 0f       	add	r18, r18
    7fb2:	33 1f       	adc	r19, r19
    7fb4:	44 1f       	adc	r20, r20
    7fb6:	55 1f       	adc	r21, r21
    7fb8:	0a 94       	dec	r0
    7fba:	d2 f7       	brpl	.-12     	; 0x7fb0 <__udivdi3+0xc4c>
    7fbc:	28 17       	cp	r18, r24
    7fbe:	39 07       	cpc	r19, r25
    7fc0:	4a 07       	cpc	r20, r26
    7fc2:	5b 07       	cpc	r21, r27
    7fc4:	08 f5       	brcc	.+66     	; 0x8008 <__udivdi3+0xca4>
    7fc6:	09 a9       	ldd	r16, Y+49	; 0x31
    7fc8:	1a a9       	ldd	r17, Y+50	; 0x32
    7fca:	2b a9       	ldd	r18, Y+51	; 0x33
    7fcc:	3c a9       	ldd	r19, Y+52	; 0x34
    7fce:	01 50       	subi	r16, 0x01	; 1
    7fd0:	10 40       	sbci	r17, 0x00	; 0
    7fd2:	20 40       	sbci	r18, 0x00	; 0
    7fd4:	30 40       	sbci	r19, 0x00	; 0
    7fd6:	09 ab       	std	Y+49, r16	; 0x31
    7fd8:	1a ab       	std	Y+50, r17	; 0x32
    7fda:	2b ab       	std	Y+51, r18	; 0x33
    7fdc:	3c ab       	std	Y+52, r19	; 0x34
    7fde:	14 c0       	rjmp	.+40     	; 0x8008 <__udivdi3+0xca4>
    7fe0:	66 24       	eor	r6, r6
    7fe2:	77 24       	eor	r7, r7
    7fe4:	43 01       	movw	r8, r6
    7fe6:	21 e0       	ldi	r18, 0x01	; 1
    7fe8:	30 e0       	ldi	r19, 0x00	; 0
    7fea:	40 e0       	ldi	r20, 0x00	; 0
    7fec:	50 e0       	ldi	r21, 0x00	; 0
    7fee:	29 ab       	std	Y+49, r18	; 0x31
    7ff0:	3a ab       	std	Y+50, r19	; 0x32
    7ff2:	4b ab       	std	Y+51, r20	; 0x33
    7ff4:	5c ab       	std	Y+52, r21	; 0x34
    7ff6:	0b c0       	rjmp	.+22     	; 0x800e <__udivdi3+0xcaa>
    7ff8:	66 24       	eor	r6, r6
    7ffa:	77 24       	eor	r7, r7
    7ffc:	43 01       	movw	r8, r6
    7ffe:	19 aa       	std	Y+49, r1	; 0x31
    8000:	1a aa       	std	Y+50, r1	; 0x32
    8002:	1b aa       	std	Y+51, r1	; 0x33
    8004:	1c aa       	std	Y+52, r1	; 0x34
    8006:	03 c0       	rjmp	.+6      	; 0x800e <__udivdi3+0xcaa>
    8008:	66 24       	eor	r6, r6
    800a:	77 24       	eor	r7, r7
    800c:	43 01       	movw	r8, r6
    800e:	fe 01       	movw	r30, r28
    8010:	71 96       	adiw	r30, 0x11	; 17
    8012:	88 e0       	ldi	r24, 0x08	; 8
    8014:	df 01       	movw	r26, r30
    8016:	1d 92       	st	X+, r1
    8018:	8a 95       	dec	r24
    801a:	e9 f7       	brne	.-6      	; 0x8016 <__udivdi3+0xcb2>
    801c:	a9 a8       	ldd	r10, Y+49	; 0x31
    801e:	ba a8       	ldd	r11, Y+50	; 0x32
    8020:	cb a8       	ldd	r12, Y+51	; 0x33
    8022:	dc a8       	ldd	r13, Y+52	; 0x34
    8024:	a9 8a       	std	Y+17, r10	; 0x11
    8026:	ba 8a       	std	Y+18, r11	; 0x12
    8028:	cb 8a       	std	Y+19, r12	; 0x13
    802a:	dc 8a       	std	Y+20, r13	; 0x14
    802c:	6d 8a       	std	Y+21, r6	; 0x15
    802e:	7e 8a       	std	Y+22, r7	; 0x16
    8030:	8f 8a       	std	Y+23, r8	; 0x17
    8032:	98 8e       	std	Y+24, r9	; 0x18
    8034:	29 a9       	ldd	r18, Y+49	; 0x31
    8036:	3a 89       	ldd	r19, Y+18	; 0x12
    8038:	4b 89       	ldd	r20, Y+19	; 0x13
    803a:	5c 89       	ldd	r21, Y+20	; 0x14
    803c:	66 2d       	mov	r22, r6
    803e:	7e 89       	ldd	r23, Y+22	; 0x16
    8040:	8f 89       	ldd	r24, Y+23	; 0x17
    8042:	98 8d       	ldd	r25, Y+24	; 0x18
    8044:	c2 5a       	subi	r28, 0xA2	; 162
    8046:	df 4f       	sbci	r29, 0xFF	; 255
    8048:	e2 e1       	ldi	r30, 0x12	; 18
    804a:	0c 94 61 48 	jmp	0x90c2	; 0x90c2 <__epilogue_restores__>

0000804e <vfprintf>:
    804e:	2f 92       	push	r2
    8050:	3f 92       	push	r3
    8052:	4f 92       	push	r4
    8054:	5f 92       	push	r5
    8056:	6f 92       	push	r6
    8058:	7f 92       	push	r7
    805a:	8f 92       	push	r8
    805c:	9f 92       	push	r9
    805e:	af 92       	push	r10
    8060:	bf 92       	push	r11
    8062:	cf 92       	push	r12
    8064:	df 92       	push	r13
    8066:	ef 92       	push	r14
    8068:	ff 92       	push	r15
    806a:	0f 93       	push	r16
    806c:	1f 93       	push	r17
    806e:	df 93       	push	r29
    8070:	cf 93       	push	r28
    8072:	cd b7       	in	r28, 0x3d	; 61
    8074:	de b7       	in	r29, 0x3e	; 62
    8076:	61 97       	sbiw	r28, 0x11	; 17
    8078:	cd bf       	out	0x3d, r28	; 61
    807a:	de bf       	out	0x3e, r29	; 62
    807c:	3c 01       	movw	r6, r24
    807e:	6e 87       	std	Y+14, r22	; 0x0e
    8080:	7f 87       	std	Y+15, r23	; 0x0f
    8082:	6a 01       	movw	r12, r20
    8084:	fc 01       	movw	r30, r24
    8086:	16 82       	std	Z+6, r1	; 0x06
    8088:	17 82       	std	Z+7, r1	; 0x07
    808a:	83 81       	ldd	r24, Z+3	; 0x03
    808c:	81 fd       	sbrc	r24, 1
    808e:	03 c0       	rjmp	.+6      	; 0x8096 <vfprintf+0x48>
    8090:	6f ef       	ldi	r22, 0xFF	; 255
    8092:	7f ef       	ldi	r23, 0xFF	; 255
    8094:	6f c3       	rjmp	.+1758   	; 0x8774 <vfprintf+0x726>
    8096:	9e 01       	movw	r18, r28
    8098:	2f 5f       	subi	r18, 0xFF	; 255
    809a:	3f 4f       	sbci	r19, 0xFF	; 255
    809c:	28 8b       	std	Y+16, r18	; 0x10
    809e:	39 8b       	std	Y+17, r19	; 0x11
    80a0:	f3 01       	movw	r30, r6
    80a2:	23 81       	ldd	r18, Z+3	; 0x03
    80a4:	ee 85       	ldd	r30, Y+14	; 0x0e
    80a6:	ff 85       	ldd	r31, Y+15	; 0x0f
    80a8:	23 fd       	sbrc	r18, 3
    80aa:	85 91       	lpm	r24, Z+
    80ac:	23 ff       	sbrs	r18, 3
    80ae:	81 91       	ld	r24, Z+
    80b0:	ee 87       	std	Y+14, r30	; 0x0e
    80b2:	ff 87       	std	Y+15, r31	; 0x0f
    80b4:	88 23       	and	r24, r24
    80b6:	09 f4       	brne	.+2      	; 0x80ba <vfprintf+0x6c>
    80b8:	5a c3       	rjmp	.+1716   	; 0x876e <vfprintf+0x720>
    80ba:	85 32       	cpi	r24, 0x25	; 37
    80bc:	51 f4       	brne	.+20     	; 0x80d2 <vfprintf+0x84>
    80be:	ee 85       	ldd	r30, Y+14	; 0x0e
    80c0:	ff 85       	ldd	r31, Y+15	; 0x0f
    80c2:	23 fd       	sbrc	r18, 3
    80c4:	85 91       	lpm	r24, Z+
    80c6:	23 ff       	sbrs	r18, 3
    80c8:	81 91       	ld	r24, Z+
    80ca:	ee 87       	std	Y+14, r30	; 0x0e
    80cc:	ff 87       	std	Y+15, r31	; 0x0f
    80ce:	85 32       	cpi	r24, 0x25	; 37
    80d0:	29 f4       	brne	.+10     	; 0x80dc <vfprintf+0x8e>
    80d2:	90 e0       	ldi	r25, 0x00	; 0
    80d4:	b3 01       	movw	r22, r6
    80d6:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    80da:	e2 cf       	rjmp	.-60     	; 0x80a0 <vfprintf+0x52>
    80dc:	98 2f       	mov	r25, r24
    80de:	10 e0       	ldi	r17, 0x00	; 0
    80e0:	88 24       	eor	r8, r8
    80e2:	99 24       	eor	r9, r9
    80e4:	10 32       	cpi	r17, 0x20	; 32
    80e6:	b0 f4       	brcc	.+44     	; 0x8114 <vfprintf+0xc6>
    80e8:	9b 32       	cpi	r25, 0x2B	; 43
    80ea:	69 f0       	breq	.+26     	; 0x8106 <vfprintf+0xb8>
    80ec:	9c 32       	cpi	r25, 0x2C	; 44
    80ee:	28 f4       	brcc	.+10     	; 0x80fa <vfprintf+0xac>
    80f0:	90 32       	cpi	r25, 0x20	; 32
    80f2:	51 f0       	breq	.+20     	; 0x8108 <vfprintf+0xba>
    80f4:	93 32       	cpi	r25, 0x23	; 35
    80f6:	71 f4       	brne	.+28     	; 0x8114 <vfprintf+0xc6>
    80f8:	0b c0       	rjmp	.+22     	; 0x8110 <vfprintf+0xc2>
    80fa:	9d 32       	cpi	r25, 0x2D	; 45
    80fc:	39 f0       	breq	.+14     	; 0x810c <vfprintf+0xbe>
    80fe:	90 33       	cpi	r25, 0x30	; 48
    8100:	49 f4       	brne	.+18     	; 0x8114 <vfprintf+0xc6>
    8102:	11 60       	ori	r17, 0x01	; 1
    8104:	28 c0       	rjmp	.+80     	; 0x8156 <vfprintf+0x108>
    8106:	12 60       	ori	r17, 0x02	; 2
    8108:	14 60       	ori	r17, 0x04	; 4
    810a:	25 c0       	rjmp	.+74     	; 0x8156 <vfprintf+0x108>
    810c:	18 60       	ori	r17, 0x08	; 8
    810e:	23 c0       	rjmp	.+70     	; 0x8156 <vfprintf+0x108>
    8110:	10 61       	ori	r17, 0x10	; 16
    8112:	21 c0       	rjmp	.+66     	; 0x8156 <vfprintf+0x108>
    8114:	17 fd       	sbrc	r17, 7
    8116:	2a c0       	rjmp	.+84     	; 0x816c <vfprintf+0x11e>
    8118:	89 2f       	mov	r24, r25
    811a:	80 53       	subi	r24, 0x30	; 48
    811c:	8a 30       	cpi	r24, 0x0A	; 10
    811e:	78 f4       	brcc	.+30     	; 0x813e <vfprintf+0xf0>
    8120:	16 ff       	sbrs	r17, 6
    8122:	06 c0       	rjmp	.+12     	; 0x8130 <vfprintf+0xe2>
    8124:	fa e0       	ldi	r31, 0x0A	; 10
    8126:	9f 9e       	mul	r9, r31
    8128:	90 2c       	mov	r9, r0
    812a:	11 24       	eor	r1, r1
    812c:	98 0e       	add	r9, r24
    812e:	13 c0       	rjmp	.+38     	; 0x8156 <vfprintf+0x108>
    8130:	3a e0       	ldi	r19, 0x0A	; 10
    8132:	83 9e       	mul	r8, r19
    8134:	80 2c       	mov	r8, r0
    8136:	11 24       	eor	r1, r1
    8138:	88 0e       	add	r8, r24
    813a:	10 62       	ori	r17, 0x20	; 32
    813c:	0c c0       	rjmp	.+24     	; 0x8156 <vfprintf+0x108>
    813e:	9e 32       	cpi	r25, 0x2E	; 46
    8140:	21 f4       	brne	.+8      	; 0x814a <vfprintf+0xfc>
    8142:	16 fd       	sbrc	r17, 6
    8144:	14 c3       	rjmp	.+1576   	; 0x876e <vfprintf+0x720>
    8146:	10 64       	ori	r17, 0x40	; 64
    8148:	06 c0       	rjmp	.+12     	; 0x8156 <vfprintf+0x108>
    814a:	9c 36       	cpi	r25, 0x6C	; 108
    814c:	11 f4       	brne	.+4      	; 0x8152 <vfprintf+0x104>
    814e:	10 68       	ori	r17, 0x80	; 128
    8150:	02 c0       	rjmp	.+4      	; 0x8156 <vfprintf+0x108>
    8152:	98 36       	cpi	r25, 0x68	; 104
    8154:	59 f4       	brne	.+22     	; 0x816c <vfprintf+0x11e>
    8156:	ee 85       	ldd	r30, Y+14	; 0x0e
    8158:	ff 85       	ldd	r31, Y+15	; 0x0f
    815a:	23 fd       	sbrc	r18, 3
    815c:	95 91       	lpm	r25, Z+
    815e:	23 ff       	sbrs	r18, 3
    8160:	91 91       	ld	r25, Z+
    8162:	ee 87       	std	Y+14, r30	; 0x0e
    8164:	ff 87       	std	Y+15, r31	; 0x0f
    8166:	99 23       	and	r25, r25
    8168:	09 f0       	breq	.+2      	; 0x816c <vfprintf+0x11e>
    816a:	bc cf       	rjmp	.-136    	; 0x80e4 <vfprintf+0x96>
    816c:	89 2f       	mov	r24, r25
    816e:	85 54       	subi	r24, 0x45	; 69
    8170:	83 30       	cpi	r24, 0x03	; 3
    8172:	20 f4       	brcc	.+8      	; 0x817c <vfprintf+0x12e>
    8174:	81 2f       	mov	r24, r17
    8176:	80 61       	ori	r24, 0x10	; 16
    8178:	90 5e       	subi	r25, 0xE0	; 224
    817a:	07 c0       	rjmp	.+14     	; 0x818a <vfprintf+0x13c>
    817c:	89 2f       	mov	r24, r25
    817e:	85 56       	subi	r24, 0x65	; 101
    8180:	83 30       	cpi	r24, 0x03	; 3
    8182:	08 f0       	brcs	.+2      	; 0x8186 <vfprintf+0x138>
    8184:	9f c1       	rjmp	.+830    	; 0x84c4 <vfprintf+0x476>
    8186:	81 2f       	mov	r24, r17
    8188:	8f 7e       	andi	r24, 0xEF	; 239
    818a:	86 fd       	sbrc	r24, 6
    818c:	02 c0       	rjmp	.+4      	; 0x8192 <vfprintf+0x144>
    818e:	76 e0       	ldi	r23, 0x06	; 6
    8190:	97 2e       	mov	r9, r23
    8192:	6f e3       	ldi	r22, 0x3F	; 63
    8194:	f6 2e       	mov	r15, r22
    8196:	f8 22       	and	r15, r24
    8198:	95 36       	cpi	r25, 0x65	; 101
    819a:	19 f4       	brne	.+6      	; 0x81a2 <vfprintf+0x154>
    819c:	f0 e4       	ldi	r31, 0x40	; 64
    819e:	ff 2a       	or	r15, r31
    81a0:	07 c0       	rjmp	.+14     	; 0x81b0 <vfprintf+0x162>
    81a2:	96 36       	cpi	r25, 0x66	; 102
    81a4:	19 f4       	brne	.+6      	; 0x81ac <vfprintf+0x15e>
    81a6:	20 e8       	ldi	r18, 0x80	; 128
    81a8:	f2 2a       	or	r15, r18
    81aa:	02 c0       	rjmp	.+4      	; 0x81b0 <vfprintf+0x162>
    81ac:	91 10       	cpse	r9, r1
    81ae:	9a 94       	dec	r9
    81b0:	f7 fe       	sbrs	r15, 7
    81b2:	0a c0       	rjmp	.+20     	; 0x81c8 <vfprintf+0x17a>
    81b4:	3b e3       	ldi	r19, 0x3B	; 59
    81b6:	39 15       	cp	r19, r9
    81b8:	18 f4       	brcc	.+6      	; 0x81c0 <vfprintf+0x172>
    81ba:	5c e3       	ldi	r21, 0x3C	; 60
    81bc:	b5 2e       	mov	r11, r21
    81be:	02 c0       	rjmp	.+4      	; 0x81c4 <vfprintf+0x176>
    81c0:	b9 2c       	mov	r11, r9
    81c2:	b3 94       	inc	r11
    81c4:	27 e0       	ldi	r18, 0x07	; 7
    81c6:	09 c0       	rjmp	.+18     	; 0x81da <vfprintf+0x18c>
    81c8:	47 e0       	ldi	r20, 0x07	; 7
    81ca:	49 15       	cp	r20, r9
    81cc:	20 f4       	brcc	.+8      	; 0x81d6 <vfprintf+0x188>
    81ce:	bb 24       	eor	r11, r11
    81d0:	47 e0       	ldi	r20, 0x07	; 7
    81d2:	94 2e       	mov	r9, r20
    81d4:	f7 cf       	rjmp	.-18     	; 0x81c4 <vfprintf+0x176>
    81d6:	29 2d       	mov	r18, r9
    81d8:	bb 24       	eor	r11, r11
    81da:	c6 01       	movw	r24, r12
    81dc:	04 96       	adiw	r24, 0x04	; 4
    81de:	8c 87       	std	Y+12, r24	; 0x0c
    81e0:	9d 87       	std	Y+13, r25	; 0x0d
    81e2:	f6 01       	movw	r30, r12
    81e4:	60 81       	ld	r22, Z
    81e6:	71 81       	ldd	r23, Z+1	; 0x01
    81e8:	82 81       	ldd	r24, Z+2	; 0x02
    81ea:	93 81       	ldd	r25, Z+3	; 0x03
    81ec:	ae 01       	movw	r20, r28
    81ee:	4f 5f       	subi	r20, 0xFF	; 255
    81f0:	5f 4f       	sbci	r21, 0xFF	; 255
    81f2:	0b 2d       	mov	r16, r11
    81f4:	0e 94 08 4a 	call	0x9410	; 0x9410 <__ftoa_engine>
    81f8:	6c 01       	movw	r12, r24
    81fa:	09 81       	ldd	r16, Y+1	; 0x01
    81fc:	20 2e       	mov	r2, r16
    81fe:	33 24       	eor	r3, r3
    8200:	00 ff       	sbrs	r16, 0
    8202:	04 c0       	rjmp	.+8      	; 0x820c <vfprintf+0x1be>
    8204:	03 fd       	sbrc	r16, 3
    8206:	02 c0       	rjmp	.+4      	; 0x820c <vfprintf+0x1be>
    8208:	1d e2       	ldi	r17, 0x2D	; 45
    820a:	09 c0       	rjmp	.+18     	; 0x821e <vfprintf+0x1d0>
    820c:	f1 fe       	sbrs	r15, 1
    820e:	02 c0       	rjmp	.+4      	; 0x8214 <vfprintf+0x1c6>
    8210:	1b e2       	ldi	r17, 0x2B	; 43
    8212:	05 c0       	rjmp	.+10     	; 0x821e <vfprintf+0x1d0>
    8214:	f2 fc       	sbrc	r15, 2
    8216:	02 c0       	rjmp	.+4      	; 0x821c <vfprintf+0x1ce>
    8218:	10 e0       	ldi	r17, 0x00	; 0
    821a:	01 c0       	rjmp	.+2      	; 0x821e <vfprintf+0x1d0>
    821c:	10 e2       	ldi	r17, 0x20	; 32
    821e:	c1 01       	movw	r24, r2
    8220:	8c 70       	andi	r24, 0x0C	; 12
    8222:	90 70       	andi	r25, 0x00	; 0
    8224:	89 2b       	or	r24, r25
    8226:	b9 f1       	breq	.+110    	; 0x8296 <vfprintf+0x248>
    8228:	11 23       	and	r17, r17
    822a:	11 f4       	brne	.+4      	; 0x8230 <vfprintf+0x1e2>
    822c:	83 e0       	ldi	r24, 0x03	; 3
    822e:	01 c0       	rjmp	.+2      	; 0x8232 <vfprintf+0x1e4>
    8230:	84 e0       	ldi	r24, 0x04	; 4
    8232:	88 15       	cp	r24, r8
    8234:	10 f0       	brcs	.+4      	; 0x823a <vfprintf+0x1ec>
    8236:	88 24       	eor	r8, r8
    8238:	0a c0       	rjmp	.+20     	; 0x824e <vfprintf+0x200>
    823a:	88 1a       	sub	r8, r24
    823c:	f3 fc       	sbrc	r15, 3
    823e:	07 c0       	rjmp	.+14     	; 0x824e <vfprintf+0x200>
    8240:	80 e2       	ldi	r24, 0x20	; 32
    8242:	90 e0       	ldi	r25, 0x00	; 0
    8244:	b3 01       	movw	r22, r6
    8246:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    824a:	8a 94       	dec	r8
    824c:	c9 f7       	brne	.-14     	; 0x8240 <vfprintf+0x1f2>
    824e:	11 23       	and	r17, r17
    8250:	29 f0       	breq	.+10     	; 0x825c <vfprintf+0x20e>
    8252:	81 2f       	mov	r24, r17
    8254:	90 e0       	ldi	r25, 0x00	; 0
    8256:	b3 01       	movw	r22, r6
    8258:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    825c:	23 fe       	sbrs	r2, 3
    825e:	03 c0       	rjmp	.+6      	; 0x8266 <vfprintf+0x218>
    8260:	03 e3       	ldi	r16, 0x33	; 51
    8262:	12 e0       	ldi	r17, 0x02	; 2
    8264:	0e c0       	rjmp	.+28     	; 0x8282 <vfprintf+0x234>
    8266:	07 e3       	ldi	r16, 0x37	; 55
    8268:	12 e0       	ldi	r17, 0x02	; 2
    826a:	0b c0       	rjmp	.+22     	; 0x8282 <vfprintf+0x234>
    826c:	e1 14       	cp	r14, r1
    826e:	f1 04       	cpc	r15, r1
    8270:	09 f0       	breq	.+2      	; 0x8274 <vfprintf+0x226>
    8272:	80 52       	subi	r24, 0x20	; 32
    8274:	90 e0       	ldi	r25, 0x00	; 0
    8276:	b3 01       	movw	r22, r6
    8278:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    827c:	0f 5f       	subi	r16, 0xFF	; 255
    827e:	1f 4f       	sbci	r17, 0xFF	; 255
    8280:	05 c0       	rjmp	.+10     	; 0x828c <vfprintf+0x23e>
    8282:	ef 2c       	mov	r14, r15
    8284:	ff 24       	eor	r15, r15
    8286:	f0 e1       	ldi	r31, 0x10	; 16
    8288:	ef 22       	and	r14, r31
    828a:	ff 24       	eor	r15, r15
    828c:	f8 01       	movw	r30, r16
    828e:	84 91       	lpm	r24, Z+
    8290:	88 23       	and	r24, r24
    8292:	61 f7       	brne	.-40     	; 0x826c <vfprintf+0x21e>
    8294:	14 c1       	rjmp	.+552    	; 0x84be <vfprintf+0x470>
    8296:	f7 fe       	sbrs	r15, 7
    8298:	12 c0       	rjmp	.+36     	; 0x82be <vfprintf+0x270>
    829a:	bc 0c       	add	r11, r12
    829c:	24 fe       	sbrs	r2, 4
    829e:	04 c0       	rjmp	.+8      	; 0x82a8 <vfprintf+0x25a>
    82a0:	8a 81       	ldd	r24, Y+2	; 0x02
    82a2:	81 33       	cpi	r24, 0x31	; 49
    82a4:	09 f4       	brne	.+2      	; 0x82a8 <vfprintf+0x25a>
    82a6:	ba 94       	dec	r11
    82a8:	1b 14       	cp	r1, r11
    82aa:	1c f0       	brlt	.+6      	; 0x82b2 <vfprintf+0x264>
    82ac:	bb 24       	eor	r11, r11
    82ae:	b3 94       	inc	r11
    82b0:	2d c0       	rjmp	.+90     	; 0x830c <vfprintf+0x2be>
    82b2:	f8 e0       	ldi	r31, 0x08	; 8
    82b4:	fb 15       	cp	r31, r11
    82b6:	50 f5       	brcc	.+84     	; 0x830c <vfprintf+0x2be>
    82b8:	38 e0       	ldi	r19, 0x08	; 8
    82ba:	b3 2e       	mov	r11, r19
    82bc:	27 c0       	rjmp	.+78     	; 0x830c <vfprintf+0x2be>
    82be:	f6 fc       	sbrc	r15, 6
    82c0:	25 c0       	rjmp	.+74     	; 0x830c <vfprintf+0x2be>
    82c2:	89 2d       	mov	r24, r9
    82c4:	90 e0       	ldi	r25, 0x00	; 0
    82c6:	8c 15       	cp	r24, r12
    82c8:	9d 05       	cpc	r25, r13
    82ca:	4c f0       	brlt	.+18     	; 0x82de <vfprintf+0x290>
    82cc:	2c ef       	ldi	r18, 0xFC	; 252
    82ce:	c2 16       	cp	r12, r18
    82d0:	2f ef       	ldi	r18, 0xFF	; 255
    82d2:	d2 06       	cpc	r13, r18
    82d4:	24 f0       	brlt	.+8      	; 0x82de <vfprintf+0x290>
    82d6:	30 e8       	ldi	r19, 0x80	; 128
    82d8:	f3 2a       	or	r15, r19
    82da:	01 c0       	rjmp	.+2      	; 0x82de <vfprintf+0x290>
    82dc:	9a 94       	dec	r9
    82de:	99 20       	and	r9, r9
    82e0:	49 f0       	breq	.+18     	; 0x82f4 <vfprintf+0x2a6>
    82e2:	e2 e0       	ldi	r30, 0x02	; 2
    82e4:	f0 e0       	ldi	r31, 0x00	; 0
    82e6:	ec 0f       	add	r30, r28
    82e8:	fd 1f       	adc	r31, r29
    82ea:	e9 0d       	add	r30, r9
    82ec:	f1 1d       	adc	r31, r1
    82ee:	80 81       	ld	r24, Z
    82f0:	80 33       	cpi	r24, 0x30	; 48
    82f2:	a1 f3       	breq	.-24     	; 0x82dc <vfprintf+0x28e>
    82f4:	f7 fe       	sbrs	r15, 7
    82f6:	0a c0       	rjmp	.+20     	; 0x830c <vfprintf+0x2be>
    82f8:	b9 2c       	mov	r11, r9
    82fa:	b3 94       	inc	r11
    82fc:	89 2d       	mov	r24, r9
    82fe:	90 e0       	ldi	r25, 0x00	; 0
    8300:	c8 16       	cp	r12, r24
    8302:	d9 06       	cpc	r13, r25
    8304:	14 f0       	brlt	.+4      	; 0x830a <vfprintf+0x2bc>
    8306:	99 24       	eor	r9, r9
    8308:	01 c0       	rjmp	.+2      	; 0x830c <vfprintf+0x2be>
    830a:	9c 18       	sub	r9, r12
    830c:	f7 fc       	sbrc	r15, 7
    830e:	03 c0       	rjmp	.+6      	; 0x8316 <vfprintf+0x2c8>
    8310:	25 e0       	ldi	r18, 0x05	; 5
    8312:	30 e0       	ldi	r19, 0x00	; 0
    8314:	09 c0       	rjmp	.+18     	; 0x8328 <vfprintf+0x2da>
    8316:	1c 14       	cp	r1, r12
    8318:	1d 04       	cpc	r1, r13
    831a:	1c f0       	brlt	.+6      	; 0x8322 <vfprintf+0x2d4>
    831c:	21 e0       	ldi	r18, 0x01	; 1
    831e:	30 e0       	ldi	r19, 0x00	; 0
    8320:	03 c0       	rjmp	.+6      	; 0x8328 <vfprintf+0x2da>
    8322:	96 01       	movw	r18, r12
    8324:	2f 5f       	subi	r18, 0xFF	; 255
    8326:	3f 4f       	sbci	r19, 0xFF	; 255
    8328:	11 23       	and	r17, r17
    832a:	11 f0       	breq	.+4      	; 0x8330 <vfprintf+0x2e2>
    832c:	2f 5f       	subi	r18, 0xFF	; 255
    832e:	3f 4f       	sbci	r19, 0xFF	; 255
    8330:	99 20       	and	r9, r9
    8332:	29 f0       	breq	.+10     	; 0x833e <vfprintf+0x2f0>
    8334:	89 2d       	mov	r24, r9
    8336:	90 e0       	ldi	r25, 0x00	; 0
    8338:	01 96       	adiw	r24, 0x01	; 1
    833a:	28 0f       	add	r18, r24
    833c:	39 1f       	adc	r19, r25
    833e:	88 2d       	mov	r24, r8
    8340:	90 e0       	ldi	r25, 0x00	; 0
    8342:	28 17       	cp	r18, r24
    8344:	39 07       	cpc	r19, r25
    8346:	14 f0       	brlt	.+4      	; 0x834c <vfprintf+0x2fe>
    8348:	88 24       	eor	r8, r8
    834a:	01 c0       	rjmp	.+2      	; 0x834e <vfprintf+0x300>
    834c:	82 1a       	sub	r8, r18
    834e:	4f 2c       	mov	r4, r15
    8350:	55 24       	eor	r5, r5
    8352:	c2 01       	movw	r24, r4
    8354:	89 70       	andi	r24, 0x09	; 9
    8356:	90 70       	andi	r25, 0x00	; 0
    8358:	89 2b       	or	r24, r25
    835a:	39 f0       	breq	.+14     	; 0x836a <vfprintf+0x31c>
    835c:	08 c0       	rjmp	.+16     	; 0x836e <vfprintf+0x320>
    835e:	80 e2       	ldi	r24, 0x20	; 32
    8360:	90 e0       	ldi	r25, 0x00	; 0
    8362:	b3 01       	movw	r22, r6
    8364:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    8368:	8a 94       	dec	r8
    836a:	88 20       	and	r8, r8
    836c:	c1 f7       	brne	.-16     	; 0x835e <vfprintf+0x310>
    836e:	11 23       	and	r17, r17
    8370:	29 f0       	breq	.+10     	; 0x837c <vfprintf+0x32e>
    8372:	81 2f       	mov	r24, r17
    8374:	90 e0       	ldi	r25, 0x00	; 0
    8376:	b3 01       	movw	r22, r6
    8378:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    837c:	43 fe       	sbrs	r4, 3
    837e:	07 c0       	rjmp	.+14     	; 0x838e <vfprintf+0x340>
    8380:	08 c0       	rjmp	.+16     	; 0x8392 <vfprintf+0x344>
    8382:	80 e3       	ldi	r24, 0x30	; 48
    8384:	90 e0       	ldi	r25, 0x00	; 0
    8386:	b3 01       	movw	r22, r6
    8388:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    838c:	8a 94       	dec	r8
    838e:	88 20       	and	r8, r8
    8390:	c1 f7       	brne	.-16     	; 0x8382 <vfprintf+0x334>
    8392:	f7 fe       	sbrs	r15, 7
    8394:	46 c0       	rjmp	.+140    	; 0x8422 <vfprintf+0x3d4>
    8396:	86 01       	movw	r16, r12
    8398:	d7 fe       	sbrs	r13, 7
    839a:	02 c0       	rjmp	.+4      	; 0x83a0 <vfprintf+0x352>
    839c:	00 e0       	ldi	r16, 0x00	; 0
    839e:	10 e0       	ldi	r17, 0x00	; 0
    83a0:	76 01       	movw	r14, r12
    83a2:	08 94       	sec
    83a4:	e1 1c       	adc	r14, r1
    83a6:	f1 1c       	adc	r15, r1
    83a8:	e0 1a       	sub	r14, r16
    83aa:	f1 0a       	sbc	r15, r17
    83ac:	41 e0       	ldi	r20, 0x01	; 1
    83ae:	50 e0       	ldi	r21, 0x00	; 0
    83b0:	4c 0f       	add	r20, r28
    83b2:	5d 1f       	adc	r21, r29
    83b4:	e4 0e       	add	r14, r20
    83b6:	f5 1e       	adc	r15, r21
    83b8:	26 01       	movw	r4, r12
    83ba:	4b 18       	sub	r4, r11
    83bc:	51 08       	sbc	r5, r1
    83be:	89 2d       	mov	r24, r9
    83c0:	90 e0       	ldi	r25, 0x00	; 0
    83c2:	aa 24       	eor	r10, r10
    83c4:	bb 24       	eor	r11, r11
    83c6:	a8 1a       	sub	r10, r24
    83c8:	b9 0a       	sbc	r11, r25
    83ca:	5f ef       	ldi	r21, 0xFF	; 255
    83cc:	0f 3f       	cpi	r16, 0xFF	; 255
    83ce:	15 07       	cpc	r17, r21
    83d0:	29 f4       	brne	.+10     	; 0x83dc <vfprintf+0x38e>
    83d2:	8e e2       	ldi	r24, 0x2E	; 46
    83d4:	90 e0       	ldi	r25, 0x00	; 0
    83d6:	b3 01       	movw	r22, r6
    83d8:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    83dc:	c0 16       	cp	r12, r16
    83de:	d1 06       	cpc	r13, r17
    83e0:	34 f0       	brlt	.+12     	; 0x83ee <vfprintf+0x3a0>
    83e2:	40 16       	cp	r4, r16
    83e4:	51 06       	cpc	r5, r17
    83e6:	1c f4       	brge	.+6      	; 0x83ee <vfprintf+0x3a0>
    83e8:	f7 01       	movw	r30, r14
    83ea:	80 81       	ld	r24, Z
    83ec:	01 c0       	rjmp	.+2      	; 0x83f0 <vfprintf+0x3a2>
    83ee:	80 e3       	ldi	r24, 0x30	; 48
    83f0:	01 50       	subi	r16, 0x01	; 1
    83f2:	10 40       	sbci	r17, 0x00	; 0
    83f4:	08 94       	sec
    83f6:	e1 1c       	adc	r14, r1
    83f8:	f1 1c       	adc	r15, r1
    83fa:	0a 15       	cp	r16, r10
    83fc:	1b 05       	cpc	r17, r11
    83fe:	2c f0       	brlt	.+10     	; 0x840a <vfprintf+0x3bc>
    8400:	90 e0       	ldi	r25, 0x00	; 0
    8402:	b3 01       	movw	r22, r6
    8404:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    8408:	e0 cf       	rjmp	.-64     	; 0x83ca <vfprintf+0x37c>
    840a:	0c 15       	cp	r16, r12
    840c:	1d 05       	cpc	r17, r13
    840e:	39 f4       	brne	.+14     	; 0x841e <vfprintf+0x3d0>
    8410:	9a 81       	ldd	r25, Y+2	; 0x02
    8412:	96 33       	cpi	r25, 0x36	; 54
    8414:	18 f4       	brcc	.+6      	; 0x841c <vfprintf+0x3ce>
    8416:	95 33       	cpi	r25, 0x35	; 53
    8418:	11 f4       	brne	.+4      	; 0x841e <vfprintf+0x3d0>
    841a:	24 fe       	sbrs	r2, 4
    841c:	81 e3       	ldi	r24, 0x31	; 49
    841e:	90 e0       	ldi	r25, 0x00	; 0
    8420:	4b c0       	rjmp	.+150    	; 0x84b8 <vfprintf+0x46a>
    8422:	8a 81       	ldd	r24, Y+2	; 0x02
    8424:	81 33       	cpi	r24, 0x31	; 49
    8426:	09 f0       	breq	.+2      	; 0x842a <vfprintf+0x3dc>
    8428:	0f 7e       	andi	r16, 0xEF	; 239
    842a:	90 e0       	ldi	r25, 0x00	; 0
    842c:	b3 01       	movw	r22, r6
    842e:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    8432:	99 20       	and	r9, r9
    8434:	a1 f0       	breq	.+40     	; 0x845e <vfprintf+0x410>
    8436:	8e e2       	ldi	r24, 0x2E	; 46
    8438:	90 e0       	ldi	r25, 0x00	; 0
    843a:	b3 01       	movw	r22, r6
    843c:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    8440:	12 e0       	ldi	r17, 0x02	; 2
    8442:	e1 e0       	ldi	r30, 0x01	; 1
    8444:	f0 e0       	ldi	r31, 0x00	; 0
    8446:	ec 0f       	add	r30, r28
    8448:	fd 1f       	adc	r31, r29
    844a:	e1 0f       	add	r30, r17
    844c:	f1 1d       	adc	r31, r1
    844e:	1f 5f       	subi	r17, 0xFF	; 255
    8450:	80 81       	ld	r24, Z
    8452:	90 e0       	ldi	r25, 0x00	; 0
    8454:	b3 01       	movw	r22, r6
    8456:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    845a:	9a 94       	dec	r9
    845c:	91 f7       	brne	.-28     	; 0x8442 <vfprintf+0x3f4>
    845e:	44 fc       	sbrc	r4, 4
    8460:	03 c0       	rjmp	.+6      	; 0x8468 <vfprintf+0x41a>
    8462:	85 e6       	ldi	r24, 0x65	; 101
    8464:	90 e0       	ldi	r25, 0x00	; 0
    8466:	02 c0       	rjmp	.+4      	; 0x846c <vfprintf+0x41e>
    8468:	85 e4       	ldi	r24, 0x45	; 69
    846a:	90 e0       	ldi	r25, 0x00	; 0
    846c:	b3 01       	movw	r22, r6
    846e:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    8472:	d7 fc       	sbrc	r13, 7
    8474:	05 c0       	rjmp	.+10     	; 0x8480 <vfprintf+0x432>
    8476:	c1 14       	cp	r12, r1
    8478:	d1 04       	cpc	r13, r1
    847a:	41 f4       	brne	.+16     	; 0x848c <vfprintf+0x43e>
    847c:	04 ff       	sbrs	r16, 4
    847e:	06 c0       	rjmp	.+12     	; 0x848c <vfprintf+0x43e>
    8480:	d0 94       	com	r13
    8482:	c1 94       	neg	r12
    8484:	d1 08       	sbc	r13, r1
    8486:	d3 94       	inc	r13
    8488:	8d e2       	ldi	r24, 0x2D	; 45
    848a:	01 c0       	rjmp	.+2      	; 0x848e <vfprintf+0x440>
    848c:	8b e2       	ldi	r24, 0x2B	; 43
    848e:	90 e0       	ldi	r25, 0x00	; 0
    8490:	b3 01       	movw	r22, r6
    8492:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    8496:	80 e3       	ldi	r24, 0x30	; 48
    8498:	05 c0       	rjmp	.+10     	; 0x84a4 <vfprintf+0x456>
    849a:	8f 5f       	subi	r24, 0xFF	; 255
    849c:	26 ef       	ldi	r18, 0xF6	; 246
    849e:	3f ef       	ldi	r19, 0xFF	; 255
    84a0:	c2 0e       	add	r12, r18
    84a2:	d3 1e       	adc	r13, r19
    84a4:	3a e0       	ldi	r19, 0x0A	; 10
    84a6:	c3 16       	cp	r12, r19
    84a8:	d1 04       	cpc	r13, r1
    84aa:	bc f7       	brge	.-18     	; 0x849a <vfprintf+0x44c>
    84ac:	90 e0       	ldi	r25, 0x00	; 0
    84ae:	b3 01       	movw	r22, r6
    84b0:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    84b4:	c6 01       	movw	r24, r12
    84b6:	c0 96       	adiw	r24, 0x30	; 48
    84b8:	b3 01       	movw	r22, r6
    84ba:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    84be:	cc 84       	ldd	r12, Y+12	; 0x0c
    84c0:	dd 84       	ldd	r13, Y+13	; 0x0d
    84c2:	52 c1       	rjmp	.+676    	; 0x8768 <vfprintf+0x71a>
    84c4:	93 36       	cpi	r25, 0x63	; 99
    84c6:	31 f0       	breq	.+12     	; 0x84d4 <vfprintf+0x486>
    84c8:	93 37       	cpi	r25, 0x73	; 115
    84ca:	99 f0       	breq	.+38     	; 0x84f2 <vfprintf+0x4a4>
    84cc:	93 35       	cpi	r25, 0x53	; 83
    84ce:	09 f0       	breq	.+2      	; 0x84d2 <vfprintf+0x484>
    84d0:	59 c0       	rjmp	.+178    	; 0x8584 <vfprintf+0x536>
    84d2:	23 c0       	rjmp	.+70     	; 0x851a <vfprintf+0x4cc>
    84d4:	f6 01       	movw	r30, r12
    84d6:	80 81       	ld	r24, Z
    84d8:	89 83       	std	Y+1, r24	; 0x01
    84da:	5e 01       	movw	r10, r28
    84dc:	08 94       	sec
    84de:	a1 1c       	adc	r10, r1
    84e0:	b1 1c       	adc	r11, r1
    84e2:	22 e0       	ldi	r18, 0x02	; 2
    84e4:	30 e0       	ldi	r19, 0x00	; 0
    84e6:	c2 0e       	add	r12, r18
    84e8:	d3 1e       	adc	r13, r19
    84ea:	21 e0       	ldi	r18, 0x01	; 1
    84ec:	e2 2e       	mov	r14, r18
    84ee:	f1 2c       	mov	r15, r1
    84f0:	12 c0       	rjmp	.+36     	; 0x8516 <vfprintf+0x4c8>
    84f2:	f6 01       	movw	r30, r12
    84f4:	a0 80       	ld	r10, Z
    84f6:	b1 80       	ldd	r11, Z+1	; 0x01
    84f8:	16 fd       	sbrc	r17, 6
    84fa:	03 c0       	rjmp	.+6      	; 0x8502 <vfprintf+0x4b4>
    84fc:	6f ef       	ldi	r22, 0xFF	; 255
    84fe:	7f ef       	ldi	r23, 0xFF	; 255
    8500:	02 c0       	rjmp	.+4      	; 0x8506 <vfprintf+0x4b8>
    8502:	69 2d       	mov	r22, r9
    8504:	70 e0       	ldi	r23, 0x00	; 0
    8506:	22 e0       	ldi	r18, 0x02	; 2
    8508:	30 e0       	ldi	r19, 0x00	; 0
    850a:	c2 0e       	add	r12, r18
    850c:	d3 1e       	adc	r13, r19
    850e:	c5 01       	movw	r24, r10
    8510:	0e 94 0b 4b 	call	0x9616	; 0x9616 <strnlen>
    8514:	7c 01       	movw	r14, r24
    8516:	1f 77       	andi	r17, 0x7F	; 127
    8518:	13 c0       	rjmp	.+38     	; 0x8540 <vfprintf+0x4f2>
    851a:	f6 01       	movw	r30, r12
    851c:	a0 80       	ld	r10, Z
    851e:	b1 80       	ldd	r11, Z+1	; 0x01
    8520:	16 fd       	sbrc	r17, 6
    8522:	03 c0       	rjmp	.+6      	; 0x852a <vfprintf+0x4dc>
    8524:	6f ef       	ldi	r22, 0xFF	; 255
    8526:	7f ef       	ldi	r23, 0xFF	; 255
    8528:	02 c0       	rjmp	.+4      	; 0x852e <vfprintf+0x4e0>
    852a:	69 2d       	mov	r22, r9
    852c:	70 e0       	ldi	r23, 0x00	; 0
    852e:	22 e0       	ldi	r18, 0x02	; 2
    8530:	30 e0       	ldi	r19, 0x00	; 0
    8532:	c2 0e       	add	r12, r18
    8534:	d3 1e       	adc	r13, r19
    8536:	c5 01       	movw	r24, r10
    8538:	0e 94 00 4b 	call	0x9600	; 0x9600 <strnlen_P>
    853c:	7c 01       	movw	r14, r24
    853e:	10 68       	ori	r17, 0x80	; 128
    8540:	13 ff       	sbrs	r17, 3
    8542:	07 c0       	rjmp	.+14     	; 0x8552 <vfprintf+0x504>
    8544:	1b c0       	rjmp	.+54     	; 0x857c <vfprintf+0x52e>
    8546:	80 e2       	ldi	r24, 0x20	; 32
    8548:	90 e0       	ldi	r25, 0x00	; 0
    854a:	b3 01       	movw	r22, r6
    854c:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    8550:	8a 94       	dec	r8
    8552:	88 2d       	mov	r24, r8
    8554:	90 e0       	ldi	r25, 0x00	; 0
    8556:	e8 16       	cp	r14, r24
    8558:	f9 06       	cpc	r15, r25
    855a:	a8 f3       	brcs	.-22     	; 0x8546 <vfprintf+0x4f8>
    855c:	0f c0       	rjmp	.+30     	; 0x857c <vfprintf+0x52e>
    855e:	f5 01       	movw	r30, r10
    8560:	17 fd       	sbrc	r17, 7
    8562:	85 91       	lpm	r24, Z+
    8564:	17 ff       	sbrs	r17, 7
    8566:	81 91       	ld	r24, Z+
    8568:	5f 01       	movw	r10, r30
    856a:	90 e0       	ldi	r25, 0x00	; 0
    856c:	b3 01       	movw	r22, r6
    856e:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    8572:	81 10       	cpse	r8, r1
    8574:	8a 94       	dec	r8
    8576:	08 94       	sec
    8578:	e1 08       	sbc	r14, r1
    857a:	f1 08       	sbc	r15, r1
    857c:	e1 14       	cp	r14, r1
    857e:	f1 04       	cpc	r15, r1
    8580:	71 f7       	brne	.-36     	; 0x855e <vfprintf+0x510>
    8582:	f2 c0       	rjmp	.+484    	; 0x8768 <vfprintf+0x71a>
    8584:	94 36       	cpi	r25, 0x64	; 100
    8586:	11 f0       	breq	.+4      	; 0x858c <vfprintf+0x53e>
    8588:	99 36       	cpi	r25, 0x69	; 105
    858a:	89 f5       	brne	.+98     	; 0x85ee <vfprintf+0x5a0>
    858c:	17 ff       	sbrs	r17, 7
    858e:	08 c0       	rjmp	.+16     	; 0x85a0 <vfprintf+0x552>
    8590:	f6 01       	movw	r30, r12
    8592:	20 81       	ld	r18, Z
    8594:	31 81       	ldd	r19, Z+1	; 0x01
    8596:	42 81       	ldd	r20, Z+2	; 0x02
    8598:	53 81       	ldd	r21, Z+3	; 0x03
    859a:	84 e0       	ldi	r24, 0x04	; 4
    859c:	90 e0       	ldi	r25, 0x00	; 0
    859e:	0a c0       	rjmp	.+20     	; 0x85b4 <vfprintf+0x566>
    85a0:	f6 01       	movw	r30, r12
    85a2:	80 81       	ld	r24, Z
    85a4:	91 81       	ldd	r25, Z+1	; 0x01
    85a6:	9c 01       	movw	r18, r24
    85a8:	44 27       	eor	r20, r20
    85aa:	37 fd       	sbrc	r19, 7
    85ac:	40 95       	com	r20
    85ae:	54 2f       	mov	r21, r20
    85b0:	82 e0       	ldi	r24, 0x02	; 2
    85b2:	90 e0       	ldi	r25, 0x00	; 0
    85b4:	c8 0e       	add	r12, r24
    85b6:	d9 1e       	adc	r13, r25
    85b8:	9f e6       	ldi	r25, 0x6F	; 111
    85ba:	f9 2e       	mov	r15, r25
    85bc:	f1 22       	and	r15, r17
    85be:	57 ff       	sbrs	r21, 7
    85c0:	09 c0       	rjmp	.+18     	; 0x85d4 <vfprintf+0x586>
    85c2:	50 95       	com	r21
    85c4:	40 95       	com	r20
    85c6:	30 95       	com	r19
    85c8:	21 95       	neg	r18
    85ca:	3f 4f       	sbci	r19, 0xFF	; 255
    85cc:	4f 4f       	sbci	r20, 0xFF	; 255
    85ce:	5f 4f       	sbci	r21, 0xFF	; 255
    85d0:	90 e8       	ldi	r25, 0x80	; 128
    85d2:	f9 2a       	or	r15, r25
    85d4:	ca 01       	movw	r24, r20
    85d6:	b9 01       	movw	r22, r18
    85d8:	ae 01       	movw	r20, r28
    85da:	4f 5f       	subi	r20, 0xFF	; 255
    85dc:	5f 4f       	sbci	r21, 0xFF	; 255
    85de:	2a e0       	ldi	r18, 0x0A	; 10
    85e0:	30 e0       	ldi	r19, 0x00	; 0
    85e2:	0e 94 a5 4b 	call	0x974a	; 0x974a <__ultoa_invert>
    85e6:	e8 2e       	mov	r14, r24
    85e8:	e8 89       	ldd	r30, Y+16	; 0x10
    85ea:	ee 1a       	sub	r14, r30
    85ec:	41 c0       	rjmp	.+130    	; 0x8670 <vfprintf+0x622>
    85ee:	95 37       	cpi	r25, 0x75	; 117
    85f0:	21 f4       	brne	.+8      	; 0x85fa <vfprintf+0x5ac>
    85f2:	1f 7e       	andi	r17, 0xEF	; 239
    85f4:	2a e0       	ldi	r18, 0x0A	; 10
    85f6:	30 e0       	ldi	r19, 0x00	; 0
    85f8:	1c c0       	rjmp	.+56     	; 0x8632 <vfprintf+0x5e4>
    85fa:	19 7f       	andi	r17, 0xF9	; 249
    85fc:	9f 36       	cpi	r25, 0x6F	; 111
    85fe:	61 f0       	breq	.+24     	; 0x8618 <vfprintf+0x5ca>
    8600:	90 37       	cpi	r25, 0x70	; 112
    8602:	20 f4       	brcc	.+8      	; 0x860c <vfprintf+0x5be>
    8604:	98 35       	cpi	r25, 0x58	; 88
    8606:	09 f0       	breq	.+2      	; 0x860a <vfprintf+0x5bc>
    8608:	b2 c0       	rjmp	.+356    	; 0x876e <vfprintf+0x720>
    860a:	0f c0       	rjmp	.+30     	; 0x862a <vfprintf+0x5dc>
    860c:	90 37       	cpi	r25, 0x70	; 112
    860e:	39 f0       	breq	.+14     	; 0x861e <vfprintf+0x5d0>
    8610:	98 37       	cpi	r25, 0x78	; 120
    8612:	09 f0       	breq	.+2      	; 0x8616 <vfprintf+0x5c8>
    8614:	ac c0       	rjmp	.+344    	; 0x876e <vfprintf+0x720>
    8616:	04 c0       	rjmp	.+8      	; 0x8620 <vfprintf+0x5d2>
    8618:	28 e0       	ldi	r18, 0x08	; 8
    861a:	30 e0       	ldi	r19, 0x00	; 0
    861c:	0a c0       	rjmp	.+20     	; 0x8632 <vfprintf+0x5e4>
    861e:	10 61       	ori	r17, 0x10	; 16
    8620:	14 fd       	sbrc	r17, 4
    8622:	14 60       	ori	r17, 0x04	; 4
    8624:	20 e1       	ldi	r18, 0x10	; 16
    8626:	30 e0       	ldi	r19, 0x00	; 0
    8628:	04 c0       	rjmp	.+8      	; 0x8632 <vfprintf+0x5e4>
    862a:	14 fd       	sbrc	r17, 4
    862c:	16 60       	ori	r17, 0x06	; 6
    862e:	20 e1       	ldi	r18, 0x10	; 16
    8630:	32 e0       	ldi	r19, 0x02	; 2
    8632:	17 ff       	sbrs	r17, 7
    8634:	08 c0       	rjmp	.+16     	; 0x8646 <vfprintf+0x5f8>
    8636:	f6 01       	movw	r30, r12
    8638:	60 81       	ld	r22, Z
    863a:	71 81       	ldd	r23, Z+1	; 0x01
    863c:	82 81       	ldd	r24, Z+2	; 0x02
    863e:	93 81       	ldd	r25, Z+3	; 0x03
    8640:	44 e0       	ldi	r20, 0x04	; 4
    8642:	50 e0       	ldi	r21, 0x00	; 0
    8644:	08 c0       	rjmp	.+16     	; 0x8656 <vfprintf+0x608>
    8646:	f6 01       	movw	r30, r12
    8648:	80 81       	ld	r24, Z
    864a:	91 81       	ldd	r25, Z+1	; 0x01
    864c:	bc 01       	movw	r22, r24
    864e:	80 e0       	ldi	r24, 0x00	; 0
    8650:	90 e0       	ldi	r25, 0x00	; 0
    8652:	42 e0       	ldi	r20, 0x02	; 2
    8654:	50 e0       	ldi	r21, 0x00	; 0
    8656:	c4 0e       	add	r12, r20
    8658:	d5 1e       	adc	r13, r21
    865a:	ae 01       	movw	r20, r28
    865c:	4f 5f       	subi	r20, 0xFF	; 255
    865e:	5f 4f       	sbci	r21, 0xFF	; 255
    8660:	0e 94 a5 4b 	call	0x974a	; 0x974a <__ultoa_invert>
    8664:	e8 2e       	mov	r14, r24
    8666:	58 89       	ldd	r21, Y+16	; 0x10
    8668:	e5 1a       	sub	r14, r21
    866a:	8f e7       	ldi	r24, 0x7F	; 127
    866c:	f8 2e       	mov	r15, r24
    866e:	f1 22       	and	r15, r17
    8670:	f6 fe       	sbrs	r15, 6
    8672:	0b c0       	rjmp	.+22     	; 0x868a <vfprintf+0x63c>
    8674:	8e ef       	ldi	r24, 0xFE	; 254
    8676:	f8 22       	and	r15, r24
    8678:	e9 14       	cp	r14, r9
    867a:	38 f4       	brcc	.+14     	; 0x868a <vfprintf+0x63c>
    867c:	f4 fe       	sbrs	r15, 4
    867e:	07 c0       	rjmp	.+14     	; 0x868e <vfprintf+0x640>
    8680:	f2 fc       	sbrc	r15, 2
    8682:	05 c0       	rjmp	.+10     	; 0x868e <vfprintf+0x640>
    8684:	9f ee       	ldi	r25, 0xEF	; 239
    8686:	f9 22       	and	r15, r25
    8688:	02 c0       	rjmp	.+4      	; 0x868e <vfprintf+0x640>
    868a:	1e 2d       	mov	r17, r14
    868c:	01 c0       	rjmp	.+2      	; 0x8690 <vfprintf+0x642>
    868e:	19 2d       	mov	r17, r9
    8690:	f4 fe       	sbrs	r15, 4
    8692:	0d c0       	rjmp	.+26     	; 0x86ae <vfprintf+0x660>
    8694:	fe 01       	movw	r30, r28
    8696:	ee 0d       	add	r30, r14
    8698:	f1 1d       	adc	r31, r1
    869a:	80 81       	ld	r24, Z
    869c:	80 33       	cpi	r24, 0x30	; 48
    869e:	19 f4       	brne	.+6      	; 0x86a6 <vfprintf+0x658>
    86a0:	e9 ee       	ldi	r30, 0xE9	; 233
    86a2:	fe 22       	and	r15, r30
    86a4:	08 c0       	rjmp	.+16     	; 0x86b6 <vfprintf+0x668>
    86a6:	1f 5f       	subi	r17, 0xFF	; 255
    86a8:	f2 fe       	sbrs	r15, 2
    86aa:	05 c0       	rjmp	.+10     	; 0x86b6 <vfprintf+0x668>
    86ac:	03 c0       	rjmp	.+6      	; 0x86b4 <vfprintf+0x666>
    86ae:	8f 2d       	mov	r24, r15
    86b0:	86 78       	andi	r24, 0x86	; 134
    86b2:	09 f0       	breq	.+2      	; 0x86b6 <vfprintf+0x668>
    86b4:	1f 5f       	subi	r17, 0xFF	; 255
    86b6:	0f 2d       	mov	r16, r15
    86b8:	f3 fc       	sbrc	r15, 3
    86ba:	14 c0       	rjmp	.+40     	; 0x86e4 <vfprintf+0x696>
    86bc:	f0 fe       	sbrs	r15, 0
    86be:	0f c0       	rjmp	.+30     	; 0x86de <vfprintf+0x690>
    86c0:	18 15       	cp	r17, r8
    86c2:	10 f0       	brcs	.+4      	; 0x86c8 <vfprintf+0x67a>
    86c4:	9e 2c       	mov	r9, r14
    86c6:	0b c0       	rjmp	.+22     	; 0x86de <vfprintf+0x690>
    86c8:	9e 2c       	mov	r9, r14
    86ca:	98 0c       	add	r9, r8
    86cc:	91 1a       	sub	r9, r17
    86ce:	18 2d       	mov	r17, r8
    86d0:	06 c0       	rjmp	.+12     	; 0x86de <vfprintf+0x690>
    86d2:	80 e2       	ldi	r24, 0x20	; 32
    86d4:	90 e0       	ldi	r25, 0x00	; 0
    86d6:	b3 01       	movw	r22, r6
    86d8:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    86dc:	1f 5f       	subi	r17, 0xFF	; 255
    86de:	18 15       	cp	r17, r8
    86e0:	c0 f3       	brcs	.-16     	; 0x86d2 <vfprintf+0x684>
    86e2:	04 c0       	rjmp	.+8      	; 0x86ec <vfprintf+0x69e>
    86e4:	18 15       	cp	r17, r8
    86e6:	10 f4       	brcc	.+4      	; 0x86ec <vfprintf+0x69e>
    86e8:	81 1a       	sub	r8, r17
    86ea:	01 c0       	rjmp	.+2      	; 0x86ee <vfprintf+0x6a0>
    86ec:	88 24       	eor	r8, r8
    86ee:	04 ff       	sbrs	r16, 4
    86f0:	0f c0       	rjmp	.+30     	; 0x8710 <vfprintf+0x6c2>
    86f2:	80 e3       	ldi	r24, 0x30	; 48
    86f4:	90 e0       	ldi	r25, 0x00	; 0
    86f6:	b3 01       	movw	r22, r6
    86f8:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    86fc:	02 ff       	sbrs	r16, 2
    86fe:	1d c0       	rjmp	.+58     	; 0x873a <vfprintf+0x6ec>
    8700:	01 fd       	sbrc	r16, 1
    8702:	03 c0       	rjmp	.+6      	; 0x870a <vfprintf+0x6bc>
    8704:	88 e7       	ldi	r24, 0x78	; 120
    8706:	90 e0       	ldi	r25, 0x00	; 0
    8708:	0e c0       	rjmp	.+28     	; 0x8726 <vfprintf+0x6d8>
    870a:	88 e5       	ldi	r24, 0x58	; 88
    870c:	90 e0       	ldi	r25, 0x00	; 0
    870e:	0b c0       	rjmp	.+22     	; 0x8726 <vfprintf+0x6d8>
    8710:	80 2f       	mov	r24, r16
    8712:	86 78       	andi	r24, 0x86	; 134
    8714:	91 f0       	breq	.+36     	; 0x873a <vfprintf+0x6ec>
    8716:	01 ff       	sbrs	r16, 1
    8718:	02 c0       	rjmp	.+4      	; 0x871e <vfprintf+0x6d0>
    871a:	8b e2       	ldi	r24, 0x2B	; 43
    871c:	01 c0       	rjmp	.+2      	; 0x8720 <vfprintf+0x6d2>
    871e:	80 e2       	ldi	r24, 0x20	; 32
    8720:	f7 fc       	sbrc	r15, 7
    8722:	8d e2       	ldi	r24, 0x2D	; 45
    8724:	90 e0       	ldi	r25, 0x00	; 0
    8726:	b3 01       	movw	r22, r6
    8728:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    872c:	06 c0       	rjmp	.+12     	; 0x873a <vfprintf+0x6ec>
    872e:	80 e3       	ldi	r24, 0x30	; 48
    8730:	90 e0       	ldi	r25, 0x00	; 0
    8732:	b3 01       	movw	r22, r6
    8734:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    8738:	9a 94       	dec	r9
    873a:	e9 14       	cp	r14, r9
    873c:	c0 f3       	brcs	.-16     	; 0x872e <vfprintf+0x6e0>
    873e:	ea 94       	dec	r14
    8740:	e1 e0       	ldi	r30, 0x01	; 1
    8742:	f0 e0       	ldi	r31, 0x00	; 0
    8744:	ec 0f       	add	r30, r28
    8746:	fd 1f       	adc	r31, r29
    8748:	ee 0d       	add	r30, r14
    874a:	f1 1d       	adc	r31, r1
    874c:	80 81       	ld	r24, Z
    874e:	90 e0       	ldi	r25, 0x00	; 0
    8750:	b3 01       	movw	r22, r6
    8752:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    8756:	ee 20       	and	r14, r14
    8758:	91 f7       	brne	.-28     	; 0x873e <vfprintf+0x6f0>
    875a:	06 c0       	rjmp	.+12     	; 0x8768 <vfprintf+0x71a>
    875c:	80 e2       	ldi	r24, 0x20	; 32
    875e:	90 e0       	ldi	r25, 0x00	; 0
    8760:	b3 01       	movw	r22, r6
    8762:	0e 94 56 4b 	call	0x96ac	; 0x96ac <fputc>
    8766:	8a 94       	dec	r8
    8768:	88 20       	and	r8, r8
    876a:	c1 f7       	brne	.-16     	; 0x875c <vfprintf+0x70e>
    876c:	99 cc       	rjmp	.-1742   	; 0x80a0 <vfprintf+0x52>
    876e:	f3 01       	movw	r30, r6
    8770:	66 81       	ldd	r22, Z+6	; 0x06
    8772:	77 81       	ldd	r23, Z+7	; 0x07
    8774:	cb 01       	movw	r24, r22
    8776:	61 96       	adiw	r28, 0x11	; 17
    8778:	cd bf       	out	0x3d, r28	; 61
    877a:	de bf       	out	0x3e, r29	; 62
    877c:	cf 91       	pop	r28
    877e:	df 91       	pop	r29
    8780:	1f 91       	pop	r17
    8782:	0f 91       	pop	r16
    8784:	ff 90       	pop	r15
    8786:	ef 90       	pop	r14
    8788:	df 90       	pop	r13
    878a:	cf 90       	pop	r12
    878c:	bf 90       	pop	r11
    878e:	af 90       	pop	r10
    8790:	9f 90       	pop	r9
    8792:	8f 90       	pop	r8
    8794:	7f 90       	pop	r7
    8796:	6f 90       	pop	r6
    8798:	5f 90       	pop	r5
    879a:	4f 90       	pop	r4
    879c:	3f 90       	pop	r3
    879e:	2f 90       	pop	r2
    87a0:	08 95       	ret

000087a2 <__subsf3>:
    87a2:	50 58       	subi	r21, 0x80	; 128

000087a4 <__addsf3>:
    87a4:	bb 27       	eor	r27, r27
    87a6:	aa 27       	eor	r26, r26
    87a8:	0e d0       	rcall	.+28     	; 0x87c6 <__addsf3x>
    87aa:	29 c2       	rjmp	.+1106   	; 0x8bfe <__fp_round>
    87ac:	f2 d1       	rcall	.+996    	; 0x8b92 <__fp_pscA>
    87ae:	30 f0       	brcs	.+12     	; 0x87bc <__addsf3+0x18>
    87b0:	f7 d1       	rcall	.+1006   	; 0x8ba0 <__fp_pscB>
    87b2:	20 f0       	brcs	.+8      	; 0x87bc <__addsf3+0x18>
    87b4:	31 f4       	brne	.+12     	; 0x87c2 <__addsf3+0x1e>
    87b6:	9f 3f       	cpi	r25, 0xFF	; 255
    87b8:	11 f4       	brne	.+4      	; 0x87be <__addsf3+0x1a>
    87ba:	1e f4       	brtc	.+6      	; 0x87c2 <__addsf3+0x1e>
    87bc:	c2 c1       	rjmp	.+900    	; 0x8b42 <__fp_nan>
    87be:	0e f4       	brtc	.+2      	; 0x87c2 <__addsf3+0x1e>
    87c0:	e0 95       	com	r30
    87c2:	e7 fb       	bst	r30, 7
    87c4:	8f c1       	rjmp	.+798    	; 0x8ae4 <__fp_inf>

000087c6 <__addsf3x>:
    87c6:	e9 2f       	mov	r30, r25
    87c8:	3c d2       	rcall	.+1144   	; 0x8c42 <__fp_split3>
    87ca:	80 f3       	brcs	.-32     	; 0x87ac <__addsf3+0x8>
    87cc:	ba 17       	cp	r27, r26
    87ce:	62 07       	cpc	r22, r18
    87d0:	73 07       	cpc	r23, r19
    87d2:	84 07       	cpc	r24, r20
    87d4:	95 07       	cpc	r25, r21
    87d6:	18 f0       	brcs	.+6      	; 0x87de <__addsf3x+0x18>
    87d8:	71 f4       	brne	.+28     	; 0x87f6 <__addsf3x+0x30>
    87da:	9e f5       	brtc	.+102    	; 0x8842 <__addsf3x+0x7c>
    87dc:	6b c2       	rjmp	.+1238   	; 0x8cb4 <__fp_zero>
    87de:	0e f4       	brtc	.+2      	; 0x87e2 <__addsf3x+0x1c>
    87e0:	e0 95       	com	r30
    87e2:	0b 2e       	mov	r0, r27
    87e4:	ba 2f       	mov	r27, r26
    87e6:	a0 2d       	mov	r26, r0
    87e8:	0b 01       	movw	r0, r22
    87ea:	b9 01       	movw	r22, r18
    87ec:	90 01       	movw	r18, r0
    87ee:	0c 01       	movw	r0, r24
    87f0:	ca 01       	movw	r24, r20
    87f2:	a0 01       	movw	r20, r0
    87f4:	11 24       	eor	r1, r1
    87f6:	ff 27       	eor	r31, r31
    87f8:	59 1b       	sub	r21, r25
    87fa:	99 f0       	breq	.+38     	; 0x8822 <__addsf3x+0x5c>
    87fc:	59 3f       	cpi	r21, 0xF9	; 249
    87fe:	50 f4       	brcc	.+20     	; 0x8814 <__addsf3x+0x4e>
    8800:	50 3e       	cpi	r21, 0xE0	; 224
    8802:	68 f1       	brcs	.+90     	; 0x885e <__addsf3x+0x98>
    8804:	1a 16       	cp	r1, r26
    8806:	f0 40       	sbci	r31, 0x00	; 0
    8808:	a2 2f       	mov	r26, r18
    880a:	23 2f       	mov	r18, r19
    880c:	34 2f       	mov	r19, r20
    880e:	44 27       	eor	r20, r20
    8810:	58 5f       	subi	r21, 0xF8	; 248
    8812:	f3 cf       	rjmp	.-26     	; 0x87fa <__addsf3x+0x34>
    8814:	46 95       	lsr	r20
    8816:	37 95       	ror	r19
    8818:	27 95       	ror	r18
    881a:	a7 95       	ror	r26
    881c:	f0 40       	sbci	r31, 0x00	; 0
    881e:	53 95       	inc	r21
    8820:	c9 f7       	brne	.-14     	; 0x8814 <__addsf3x+0x4e>
    8822:	7e f4       	brtc	.+30     	; 0x8842 <__addsf3x+0x7c>
    8824:	1f 16       	cp	r1, r31
    8826:	ba 0b       	sbc	r27, r26
    8828:	62 0b       	sbc	r22, r18
    882a:	73 0b       	sbc	r23, r19
    882c:	84 0b       	sbc	r24, r20
    882e:	ba f0       	brmi	.+46     	; 0x885e <__addsf3x+0x98>
    8830:	91 50       	subi	r25, 0x01	; 1
    8832:	a1 f0       	breq	.+40     	; 0x885c <__addsf3x+0x96>
    8834:	ff 0f       	add	r31, r31
    8836:	bb 1f       	adc	r27, r27
    8838:	66 1f       	adc	r22, r22
    883a:	77 1f       	adc	r23, r23
    883c:	88 1f       	adc	r24, r24
    883e:	c2 f7       	brpl	.-16     	; 0x8830 <__addsf3x+0x6a>
    8840:	0e c0       	rjmp	.+28     	; 0x885e <__addsf3x+0x98>
    8842:	ba 0f       	add	r27, r26
    8844:	62 1f       	adc	r22, r18
    8846:	73 1f       	adc	r23, r19
    8848:	84 1f       	adc	r24, r20
    884a:	48 f4       	brcc	.+18     	; 0x885e <__addsf3x+0x98>
    884c:	87 95       	ror	r24
    884e:	77 95       	ror	r23
    8850:	67 95       	ror	r22
    8852:	b7 95       	ror	r27
    8854:	f7 95       	ror	r31
    8856:	9e 3f       	cpi	r25, 0xFE	; 254
    8858:	08 f0       	brcs	.+2      	; 0x885c <__addsf3x+0x96>
    885a:	b3 cf       	rjmp	.-154    	; 0x87c2 <__addsf3+0x1e>
    885c:	93 95       	inc	r25
    885e:	88 0f       	add	r24, r24
    8860:	08 f0       	brcs	.+2      	; 0x8864 <__addsf3x+0x9e>
    8862:	99 27       	eor	r25, r25
    8864:	ee 0f       	add	r30, r30
    8866:	97 95       	ror	r25
    8868:	87 95       	ror	r24
    886a:	08 95       	ret

0000886c <atan>:
    886c:	df 93       	push	r29
    886e:	dd 27       	eor	r29, r29
    8870:	b9 2f       	mov	r27, r25
    8872:	bf 77       	andi	r27, 0x7F	; 127
    8874:	40 e8       	ldi	r20, 0x80	; 128
    8876:	5f e3       	ldi	r21, 0x3F	; 63
    8878:	16 16       	cp	r1, r22
    887a:	17 06       	cpc	r1, r23
    887c:	48 07       	cpc	r20, r24
    887e:	5b 07       	cpc	r21, r27
    8880:	10 f4       	brcc	.+4      	; 0x8886 <atan+0x1a>
    8882:	d9 2f       	mov	r29, r25
    8884:	83 d2       	rcall	.+1286   	; 0x8d8c <inverse>
    8886:	9f 93       	push	r25
    8888:	8f 93       	push	r24
    888a:	7f 93       	push	r23
    888c:	6f 93       	push	r22
    888e:	96 d3       	rcall	.+1836   	; 0x8fbc <square>
    8890:	e8 ee       	ldi	r30, 0xE8	; 232
    8892:	f1 e0       	ldi	r31, 0x01	; 1
    8894:	59 d1       	rcall	.+690    	; 0x8b48 <__fp_powser>
    8896:	b3 d1       	rcall	.+870    	; 0x8bfe <__fp_round>
    8898:	2f 91       	pop	r18
    889a:	3f 91       	pop	r19
    889c:	4f 91       	pop	r20
    889e:	5f 91       	pop	r21
    88a0:	ee d2       	rcall	.+1500   	; 0x8e7e <__mulsf3x>
    88a2:	dd 23       	and	r29, r29
    88a4:	49 f0       	breq	.+18     	; 0x88b8 <atan+0x4c>
    88a6:	90 58       	subi	r25, 0x80	; 128
    88a8:	a2 ea       	ldi	r26, 0xA2	; 162
    88aa:	2a ed       	ldi	r18, 0xDA	; 218
    88ac:	3f e0       	ldi	r19, 0x0F	; 15
    88ae:	49 ec       	ldi	r20, 0xC9	; 201
    88b0:	5f e3       	ldi	r21, 0x3F	; 63
    88b2:	d0 78       	andi	r29, 0x80	; 128
    88b4:	5d 27       	eor	r21, r29
    88b6:	87 df       	rcall	.-242    	; 0x87c6 <__addsf3x>
    88b8:	df 91       	pop	r29
    88ba:	a1 c1       	rjmp	.+834    	; 0x8bfe <__fp_round>

000088bc <ceil>:
    88bc:	e4 d1       	rcall	.+968    	; 0x8c86 <__fp_trunc>
    88be:	80 f0       	brcs	.+32     	; 0x88e0 <ceil+0x24>
    88c0:	9f 37       	cpi	r25, 0x7F	; 127
    88c2:	40 f4       	brcc	.+16     	; 0x88d4 <ceil+0x18>
    88c4:	91 11       	cpse	r25, r1
    88c6:	0e f4       	brtc	.+2      	; 0x88ca <ceil+0xe>
    88c8:	f6 c1       	rjmp	.+1004   	; 0x8cb6 <__fp_szero>
    88ca:	60 e0       	ldi	r22, 0x00	; 0
    88cc:	70 e0       	ldi	r23, 0x00	; 0
    88ce:	80 e8       	ldi	r24, 0x80	; 128
    88d0:	9f e3       	ldi	r25, 0x3F	; 63
    88d2:	08 95       	ret
    88d4:	26 f0       	brts	.+8      	; 0x88de <ceil+0x22>
    88d6:	1b 16       	cp	r1, r27
    88d8:	61 1d       	adc	r22, r1
    88da:	71 1d       	adc	r23, r1
    88dc:	81 1d       	adc	r24, r1
    88de:	08 c1       	rjmp	.+528    	; 0x8af0 <__fp_mintl>
    88e0:	22 c1       	rjmp	.+580    	; 0x8b26 <__fp_mpack>

000088e2 <__cmpsf2>:
    88e2:	dc d0       	rcall	.+440    	; 0x8a9c <__fp_cmp>
    88e4:	08 f4       	brcc	.+2      	; 0x88e8 <__cmpsf2+0x6>
    88e6:	81 e0       	ldi	r24, 0x01	; 1
    88e8:	08 95       	ret

000088ea <cos>:
    88ea:	62 d1       	rcall	.+708    	; 0x8bb0 <__fp_rempio2>
    88ec:	e3 95       	inc	r30
    88ee:	98 c1       	rjmp	.+816    	; 0x8c20 <__fp_sinus>

000088f0 <__divsf3>:
    88f0:	0c d0       	rcall	.+24     	; 0x890a <__divsf3x>
    88f2:	85 c1       	rjmp	.+778    	; 0x8bfe <__fp_round>
    88f4:	55 d1       	rcall	.+682    	; 0x8ba0 <__fp_pscB>
    88f6:	40 f0       	brcs	.+16     	; 0x8908 <__divsf3+0x18>
    88f8:	4c d1       	rcall	.+664    	; 0x8b92 <__fp_pscA>
    88fa:	30 f0       	brcs	.+12     	; 0x8908 <__divsf3+0x18>
    88fc:	21 f4       	brne	.+8      	; 0x8906 <__divsf3+0x16>
    88fe:	5f 3f       	cpi	r21, 0xFF	; 255
    8900:	19 f0       	breq	.+6      	; 0x8908 <__divsf3+0x18>
    8902:	f0 c0       	rjmp	.+480    	; 0x8ae4 <__fp_inf>
    8904:	51 11       	cpse	r21, r1
    8906:	d7 c1       	rjmp	.+942    	; 0x8cb6 <__fp_szero>
    8908:	1c c1       	rjmp	.+568    	; 0x8b42 <__fp_nan>

0000890a <__divsf3x>:
    890a:	9b d1       	rcall	.+822    	; 0x8c42 <__fp_split3>
    890c:	98 f3       	brcs	.-26     	; 0x88f4 <__divsf3+0x4>

0000890e <__divsf3_pse>:
    890e:	99 23       	and	r25, r25
    8910:	c9 f3       	breq	.-14     	; 0x8904 <__divsf3+0x14>
    8912:	55 23       	and	r21, r21
    8914:	b1 f3       	breq	.-20     	; 0x8902 <__divsf3+0x12>
    8916:	95 1b       	sub	r25, r21
    8918:	55 0b       	sbc	r21, r21
    891a:	bb 27       	eor	r27, r27
    891c:	aa 27       	eor	r26, r26
    891e:	62 17       	cp	r22, r18
    8920:	73 07       	cpc	r23, r19
    8922:	84 07       	cpc	r24, r20
    8924:	38 f0       	brcs	.+14     	; 0x8934 <__divsf3_pse+0x26>
    8926:	9f 5f       	subi	r25, 0xFF	; 255
    8928:	5f 4f       	sbci	r21, 0xFF	; 255
    892a:	22 0f       	add	r18, r18
    892c:	33 1f       	adc	r19, r19
    892e:	44 1f       	adc	r20, r20
    8930:	aa 1f       	adc	r26, r26
    8932:	a9 f3       	breq	.-22     	; 0x891e <__divsf3_pse+0x10>
    8934:	33 d0       	rcall	.+102    	; 0x899c <__divsf3_pse+0x8e>
    8936:	0e 2e       	mov	r0, r30
    8938:	3a f0       	brmi	.+14     	; 0x8948 <__divsf3_pse+0x3a>
    893a:	e0 e8       	ldi	r30, 0x80	; 128
    893c:	30 d0       	rcall	.+96     	; 0x899e <__divsf3_pse+0x90>
    893e:	91 50       	subi	r25, 0x01	; 1
    8940:	50 40       	sbci	r21, 0x00	; 0
    8942:	e6 95       	lsr	r30
    8944:	00 1c       	adc	r0, r0
    8946:	ca f7       	brpl	.-14     	; 0x893a <__divsf3_pse+0x2c>
    8948:	29 d0       	rcall	.+82     	; 0x899c <__divsf3_pse+0x8e>
    894a:	fe 2f       	mov	r31, r30
    894c:	27 d0       	rcall	.+78     	; 0x899c <__divsf3_pse+0x8e>
    894e:	66 0f       	add	r22, r22
    8950:	77 1f       	adc	r23, r23
    8952:	88 1f       	adc	r24, r24
    8954:	bb 1f       	adc	r27, r27
    8956:	26 17       	cp	r18, r22
    8958:	37 07       	cpc	r19, r23
    895a:	48 07       	cpc	r20, r24
    895c:	ab 07       	cpc	r26, r27
    895e:	b0 e8       	ldi	r27, 0x80	; 128
    8960:	09 f0       	breq	.+2      	; 0x8964 <__divsf3_pse+0x56>
    8962:	bb 0b       	sbc	r27, r27
    8964:	80 2d       	mov	r24, r0
    8966:	bf 01       	movw	r22, r30
    8968:	ff 27       	eor	r31, r31
    896a:	93 58       	subi	r25, 0x83	; 131
    896c:	5f 4f       	sbci	r21, 0xFF	; 255
    896e:	2a f0       	brmi	.+10     	; 0x897a <__divsf3_pse+0x6c>
    8970:	9e 3f       	cpi	r25, 0xFE	; 254
    8972:	51 05       	cpc	r21, r1
    8974:	68 f0       	brcs	.+26     	; 0x8990 <__divsf3_pse+0x82>
    8976:	b6 c0       	rjmp	.+364    	; 0x8ae4 <__fp_inf>
    8978:	9e c1       	rjmp	.+828    	; 0x8cb6 <__fp_szero>
    897a:	5f 3f       	cpi	r21, 0xFF	; 255
    897c:	ec f3       	brlt	.-6      	; 0x8978 <__divsf3_pse+0x6a>
    897e:	98 3e       	cpi	r25, 0xE8	; 232
    8980:	dc f3       	brlt	.-10     	; 0x8978 <__divsf3_pse+0x6a>
    8982:	86 95       	lsr	r24
    8984:	77 95       	ror	r23
    8986:	67 95       	ror	r22
    8988:	b7 95       	ror	r27
    898a:	f7 95       	ror	r31
    898c:	9f 5f       	subi	r25, 0xFF	; 255
    898e:	c9 f7       	brne	.-14     	; 0x8982 <__divsf3_pse+0x74>
    8990:	88 0f       	add	r24, r24
    8992:	91 1d       	adc	r25, r1
    8994:	96 95       	lsr	r25
    8996:	87 95       	ror	r24
    8998:	97 f9       	bld	r25, 7
    899a:	08 95       	ret
    899c:	e1 e0       	ldi	r30, 0x01	; 1
    899e:	66 0f       	add	r22, r22
    89a0:	77 1f       	adc	r23, r23
    89a2:	88 1f       	adc	r24, r24
    89a4:	bb 1f       	adc	r27, r27
    89a6:	62 17       	cp	r22, r18
    89a8:	73 07       	cpc	r23, r19
    89aa:	84 07       	cpc	r24, r20
    89ac:	ba 07       	cpc	r27, r26
    89ae:	20 f0       	brcs	.+8      	; 0x89b8 <__divsf3_pse+0xaa>
    89b0:	62 1b       	sub	r22, r18
    89b2:	73 0b       	sbc	r23, r19
    89b4:	84 0b       	sbc	r24, r20
    89b6:	ba 0b       	sbc	r27, r26
    89b8:	ee 1f       	adc	r30, r30
    89ba:	88 f7       	brcc	.-30     	; 0x899e <__divsf3_pse+0x90>
    89bc:	e0 95       	com	r30
    89be:	08 95       	ret

000089c0 <__fixsfsi>:
    89c0:	04 d0       	rcall	.+8      	; 0x89ca <__fixunssfsi>
    89c2:	68 94       	set
    89c4:	b1 11       	cpse	r27, r1
    89c6:	77 c1       	rjmp	.+750    	; 0x8cb6 <__fp_szero>
    89c8:	08 95       	ret

000089ca <__fixunssfsi>:
    89ca:	43 d1       	rcall	.+646    	; 0x8c52 <__fp_splitA>
    89cc:	88 f0       	brcs	.+34     	; 0x89f0 <__fixunssfsi+0x26>
    89ce:	9f 57       	subi	r25, 0x7F	; 127
    89d0:	90 f0       	brcs	.+36     	; 0x89f6 <__fixunssfsi+0x2c>
    89d2:	b9 2f       	mov	r27, r25
    89d4:	99 27       	eor	r25, r25
    89d6:	b7 51       	subi	r27, 0x17	; 23
    89d8:	a0 f0       	brcs	.+40     	; 0x8a02 <__fixunssfsi+0x38>
    89da:	d1 f0       	breq	.+52     	; 0x8a10 <__fixunssfsi+0x46>
    89dc:	66 0f       	add	r22, r22
    89de:	77 1f       	adc	r23, r23
    89e0:	88 1f       	adc	r24, r24
    89e2:	99 1f       	adc	r25, r25
    89e4:	1a f0       	brmi	.+6      	; 0x89ec <__fixunssfsi+0x22>
    89e6:	ba 95       	dec	r27
    89e8:	c9 f7       	brne	.-14     	; 0x89dc <__fixunssfsi+0x12>
    89ea:	12 c0       	rjmp	.+36     	; 0x8a10 <__fixunssfsi+0x46>
    89ec:	b1 30       	cpi	r27, 0x01	; 1
    89ee:	81 f0       	breq	.+32     	; 0x8a10 <__fixunssfsi+0x46>
    89f0:	61 d1       	rcall	.+706    	; 0x8cb4 <__fp_zero>
    89f2:	b1 e0       	ldi	r27, 0x01	; 1
    89f4:	08 95       	ret
    89f6:	5e c1       	rjmp	.+700    	; 0x8cb4 <__fp_zero>
    89f8:	67 2f       	mov	r22, r23
    89fa:	78 2f       	mov	r23, r24
    89fc:	88 27       	eor	r24, r24
    89fe:	b8 5f       	subi	r27, 0xF8	; 248
    8a00:	39 f0       	breq	.+14     	; 0x8a10 <__fixunssfsi+0x46>
    8a02:	b9 3f       	cpi	r27, 0xF9	; 249
    8a04:	cc f3       	brlt	.-14     	; 0x89f8 <__fixunssfsi+0x2e>
    8a06:	86 95       	lsr	r24
    8a08:	77 95       	ror	r23
    8a0a:	67 95       	ror	r22
    8a0c:	b3 95       	inc	r27
    8a0e:	d9 f7       	brne	.-10     	; 0x8a06 <__fixunssfsi+0x3c>
    8a10:	3e f4       	brtc	.+14     	; 0x8a20 <__fixunssfsi+0x56>
    8a12:	90 95       	com	r25
    8a14:	80 95       	com	r24
    8a16:	70 95       	com	r23
    8a18:	61 95       	neg	r22
    8a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    8a1c:	8f 4f       	sbci	r24, 0xFF	; 255
    8a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    8a20:	08 95       	ret

00008a22 <__floatunsisf>:
    8a22:	e8 94       	clt
    8a24:	09 c0       	rjmp	.+18     	; 0x8a38 <__floatsisf+0x12>

00008a26 <__floatsisf>:
    8a26:	97 fb       	bst	r25, 7
    8a28:	3e f4       	brtc	.+14     	; 0x8a38 <__floatsisf+0x12>
    8a2a:	90 95       	com	r25
    8a2c:	80 95       	com	r24
    8a2e:	70 95       	com	r23
    8a30:	61 95       	neg	r22
    8a32:	7f 4f       	sbci	r23, 0xFF	; 255
    8a34:	8f 4f       	sbci	r24, 0xFF	; 255
    8a36:	9f 4f       	sbci	r25, 0xFF	; 255
    8a38:	99 23       	and	r25, r25
    8a3a:	a9 f0       	breq	.+42     	; 0x8a66 <__floatsisf+0x40>
    8a3c:	f9 2f       	mov	r31, r25
    8a3e:	96 e9       	ldi	r25, 0x96	; 150
    8a40:	bb 27       	eor	r27, r27
    8a42:	93 95       	inc	r25
    8a44:	f6 95       	lsr	r31
    8a46:	87 95       	ror	r24
    8a48:	77 95       	ror	r23
    8a4a:	67 95       	ror	r22
    8a4c:	b7 95       	ror	r27
    8a4e:	f1 11       	cpse	r31, r1
    8a50:	f8 cf       	rjmp	.-16     	; 0x8a42 <__floatsisf+0x1c>
    8a52:	fa f4       	brpl	.+62     	; 0x8a92 <__floatsisf+0x6c>
    8a54:	bb 0f       	add	r27, r27
    8a56:	11 f4       	brne	.+4      	; 0x8a5c <__floatsisf+0x36>
    8a58:	60 ff       	sbrs	r22, 0
    8a5a:	1b c0       	rjmp	.+54     	; 0x8a92 <__floatsisf+0x6c>
    8a5c:	6f 5f       	subi	r22, 0xFF	; 255
    8a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    8a60:	8f 4f       	sbci	r24, 0xFF	; 255
    8a62:	9f 4f       	sbci	r25, 0xFF	; 255
    8a64:	16 c0       	rjmp	.+44     	; 0x8a92 <__floatsisf+0x6c>
    8a66:	88 23       	and	r24, r24
    8a68:	11 f0       	breq	.+4      	; 0x8a6e <__floatsisf+0x48>
    8a6a:	96 e9       	ldi	r25, 0x96	; 150
    8a6c:	11 c0       	rjmp	.+34     	; 0x8a90 <__floatsisf+0x6a>
    8a6e:	77 23       	and	r23, r23
    8a70:	21 f0       	breq	.+8      	; 0x8a7a <__floatsisf+0x54>
    8a72:	9e e8       	ldi	r25, 0x8E	; 142
    8a74:	87 2f       	mov	r24, r23
    8a76:	76 2f       	mov	r23, r22
    8a78:	05 c0       	rjmp	.+10     	; 0x8a84 <__floatsisf+0x5e>
    8a7a:	66 23       	and	r22, r22
    8a7c:	71 f0       	breq	.+28     	; 0x8a9a <__floatsisf+0x74>
    8a7e:	96 e8       	ldi	r25, 0x86	; 134
    8a80:	86 2f       	mov	r24, r22
    8a82:	70 e0       	ldi	r23, 0x00	; 0
    8a84:	60 e0       	ldi	r22, 0x00	; 0
    8a86:	2a f0       	brmi	.+10     	; 0x8a92 <__floatsisf+0x6c>
    8a88:	9a 95       	dec	r25
    8a8a:	66 0f       	add	r22, r22
    8a8c:	77 1f       	adc	r23, r23
    8a8e:	88 1f       	adc	r24, r24
    8a90:	da f7       	brpl	.-10     	; 0x8a88 <__floatsisf+0x62>
    8a92:	88 0f       	add	r24, r24
    8a94:	96 95       	lsr	r25
    8a96:	87 95       	ror	r24
    8a98:	97 f9       	bld	r25, 7
    8a9a:	08 95       	ret

00008a9c <__fp_cmp>:
    8a9c:	99 0f       	add	r25, r25
    8a9e:	00 08       	sbc	r0, r0
    8aa0:	55 0f       	add	r21, r21
    8aa2:	aa 0b       	sbc	r26, r26
    8aa4:	e0 e8       	ldi	r30, 0x80	; 128
    8aa6:	fe ef       	ldi	r31, 0xFE	; 254
    8aa8:	16 16       	cp	r1, r22
    8aaa:	17 06       	cpc	r1, r23
    8aac:	e8 07       	cpc	r30, r24
    8aae:	f9 07       	cpc	r31, r25
    8ab0:	c0 f0       	brcs	.+48     	; 0x8ae2 <__fp_cmp+0x46>
    8ab2:	12 16       	cp	r1, r18
    8ab4:	13 06       	cpc	r1, r19
    8ab6:	e4 07       	cpc	r30, r20
    8ab8:	f5 07       	cpc	r31, r21
    8aba:	98 f0       	brcs	.+38     	; 0x8ae2 <__fp_cmp+0x46>
    8abc:	62 1b       	sub	r22, r18
    8abe:	73 0b       	sbc	r23, r19
    8ac0:	84 0b       	sbc	r24, r20
    8ac2:	95 0b       	sbc	r25, r21
    8ac4:	39 f4       	brne	.+14     	; 0x8ad4 <__fp_cmp+0x38>
    8ac6:	0a 26       	eor	r0, r26
    8ac8:	61 f0       	breq	.+24     	; 0x8ae2 <__fp_cmp+0x46>
    8aca:	23 2b       	or	r18, r19
    8acc:	24 2b       	or	r18, r20
    8ace:	25 2b       	or	r18, r21
    8ad0:	21 f4       	brne	.+8      	; 0x8ada <__fp_cmp+0x3e>
    8ad2:	08 95       	ret
    8ad4:	0a 26       	eor	r0, r26
    8ad6:	09 f4       	brne	.+2      	; 0x8ada <__fp_cmp+0x3e>
    8ad8:	a1 40       	sbci	r26, 0x01	; 1
    8ada:	a6 95       	lsr	r26
    8adc:	8f ef       	ldi	r24, 0xFF	; 255
    8ade:	81 1d       	adc	r24, r1
    8ae0:	81 1d       	adc	r24, r1
    8ae2:	08 95       	ret

00008ae4 <__fp_inf>:
    8ae4:	97 f9       	bld	r25, 7
    8ae6:	9f 67       	ori	r25, 0x7F	; 127
    8ae8:	80 e8       	ldi	r24, 0x80	; 128
    8aea:	70 e0       	ldi	r23, 0x00	; 0
    8aec:	60 e0       	ldi	r22, 0x00	; 0
    8aee:	08 95       	ret

00008af0 <__fp_mintl>:
    8af0:	88 23       	and	r24, r24
    8af2:	71 f4       	brne	.+28     	; 0x8b10 <__fp_mintl+0x20>
    8af4:	77 23       	and	r23, r23
    8af6:	21 f0       	breq	.+8      	; 0x8b00 <__fp_mintl+0x10>
    8af8:	98 50       	subi	r25, 0x08	; 8
    8afa:	87 2b       	or	r24, r23
    8afc:	76 2f       	mov	r23, r22
    8afe:	07 c0       	rjmp	.+14     	; 0x8b0e <__fp_mintl+0x1e>
    8b00:	66 23       	and	r22, r22
    8b02:	11 f4       	brne	.+4      	; 0x8b08 <__fp_mintl+0x18>
    8b04:	99 27       	eor	r25, r25
    8b06:	0d c0       	rjmp	.+26     	; 0x8b22 <__fp_mintl+0x32>
    8b08:	90 51       	subi	r25, 0x10	; 16
    8b0a:	86 2b       	or	r24, r22
    8b0c:	70 e0       	ldi	r23, 0x00	; 0
    8b0e:	60 e0       	ldi	r22, 0x00	; 0
    8b10:	2a f0       	brmi	.+10     	; 0x8b1c <__fp_mintl+0x2c>
    8b12:	9a 95       	dec	r25
    8b14:	66 0f       	add	r22, r22
    8b16:	77 1f       	adc	r23, r23
    8b18:	88 1f       	adc	r24, r24
    8b1a:	da f7       	brpl	.-10     	; 0x8b12 <__fp_mintl+0x22>
    8b1c:	88 0f       	add	r24, r24
    8b1e:	96 95       	lsr	r25
    8b20:	87 95       	ror	r24
    8b22:	97 f9       	bld	r25, 7
    8b24:	08 95       	ret

00008b26 <__fp_mpack>:
    8b26:	9f 3f       	cpi	r25, 0xFF	; 255
    8b28:	31 f0       	breq	.+12     	; 0x8b36 <__fp_mpack_finite+0xc>

00008b2a <__fp_mpack_finite>:
    8b2a:	91 50       	subi	r25, 0x01	; 1
    8b2c:	20 f4       	brcc	.+8      	; 0x8b36 <__fp_mpack_finite+0xc>
    8b2e:	87 95       	ror	r24
    8b30:	77 95       	ror	r23
    8b32:	67 95       	ror	r22
    8b34:	b7 95       	ror	r27
    8b36:	88 0f       	add	r24, r24
    8b38:	91 1d       	adc	r25, r1
    8b3a:	96 95       	lsr	r25
    8b3c:	87 95       	ror	r24
    8b3e:	97 f9       	bld	r25, 7
    8b40:	08 95       	ret

00008b42 <__fp_nan>:
    8b42:	9f ef       	ldi	r25, 0xFF	; 255
    8b44:	80 ec       	ldi	r24, 0xC0	; 192
    8b46:	08 95       	ret

00008b48 <__fp_powser>:
    8b48:	df 93       	push	r29
    8b4a:	cf 93       	push	r28
    8b4c:	1f 93       	push	r17
    8b4e:	0f 93       	push	r16
    8b50:	ff 92       	push	r15
    8b52:	ef 92       	push	r14
    8b54:	df 92       	push	r13
    8b56:	7b 01       	movw	r14, r22
    8b58:	8c 01       	movw	r16, r24
    8b5a:	68 94       	set
    8b5c:	05 c0       	rjmp	.+10     	; 0x8b68 <__fp_powser+0x20>
    8b5e:	da 2e       	mov	r13, r26
    8b60:	ef 01       	movw	r28, r30
    8b62:	8d d1       	rcall	.+794    	; 0x8e7e <__mulsf3x>
    8b64:	fe 01       	movw	r30, r28
    8b66:	e8 94       	clt
    8b68:	a5 91       	lpm	r26, Z+
    8b6a:	25 91       	lpm	r18, Z+
    8b6c:	35 91       	lpm	r19, Z+
    8b6e:	45 91       	lpm	r20, Z+
    8b70:	55 91       	lpm	r21, Z+
    8b72:	ae f3       	brts	.-22     	; 0x8b5e <__fp_powser+0x16>
    8b74:	ef 01       	movw	r28, r30
    8b76:	27 de       	rcall	.-946    	; 0x87c6 <__addsf3x>
    8b78:	fe 01       	movw	r30, r28
    8b7a:	97 01       	movw	r18, r14
    8b7c:	a8 01       	movw	r20, r16
    8b7e:	da 94       	dec	r13
    8b80:	79 f7       	brne	.-34     	; 0x8b60 <__fp_powser+0x18>
    8b82:	df 90       	pop	r13
    8b84:	ef 90       	pop	r14
    8b86:	ff 90       	pop	r15
    8b88:	0f 91       	pop	r16
    8b8a:	1f 91       	pop	r17
    8b8c:	cf 91       	pop	r28
    8b8e:	df 91       	pop	r29
    8b90:	08 95       	ret

00008b92 <__fp_pscA>:
    8b92:	00 24       	eor	r0, r0
    8b94:	0a 94       	dec	r0
    8b96:	16 16       	cp	r1, r22
    8b98:	17 06       	cpc	r1, r23
    8b9a:	18 06       	cpc	r1, r24
    8b9c:	09 06       	cpc	r0, r25
    8b9e:	08 95       	ret

00008ba0 <__fp_pscB>:
    8ba0:	00 24       	eor	r0, r0
    8ba2:	0a 94       	dec	r0
    8ba4:	12 16       	cp	r1, r18
    8ba6:	13 06       	cpc	r1, r19
    8ba8:	14 06       	cpc	r1, r20
    8baa:	05 06       	cpc	r0, r21
    8bac:	08 95       	ret
    8bae:	c9 cf       	rjmp	.-110    	; 0x8b42 <__fp_nan>

00008bb0 <__fp_rempio2>:
    8bb0:	50 d0       	rcall	.+160    	; 0x8c52 <__fp_splitA>
    8bb2:	e8 f3       	brcs	.-6      	; 0x8bae <__fp_pscB+0xe>
    8bb4:	e8 94       	clt
    8bb6:	e0 e0       	ldi	r30, 0x00	; 0
    8bb8:	bb 27       	eor	r27, r27
    8bba:	9f 57       	subi	r25, 0x7F	; 127
    8bbc:	f0 f0       	brcs	.+60     	; 0x8bfa <__fp_rempio2+0x4a>
    8bbe:	2a ed       	ldi	r18, 0xDA	; 218
    8bc0:	3f e0       	ldi	r19, 0x0F	; 15
    8bc2:	49 ec       	ldi	r20, 0xC9	; 201
    8bc4:	06 c0       	rjmp	.+12     	; 0x8bd2 <__fp_rempio2+0x22>
    8bc6:	ee 0f       	add	r30, r30
    8bc8:	bb 0f       	add	r27, r27
    8bca:	66 1f       	adc	r22, r22
    8bcc:	77 1f       	adc	r23, r23
    8bce:	88 1f       	adc	r24, r24
    8bd0:	28 f0       	brcs	.+10     	; 0x8bdc <__fp_rempio2+0x2c>
    8bd2:	b2 3a       	cpi	r27, 0xA2	; 162
    8bd4:	62 07       	cpc	r22, r18
    8bd6:	73 07       	cpc	r23, r19
    8bd8:	84 07       	cpc	r24, r20
    8bda:	28 f0       	brcs	.+10     	; 0x8be6 <__fp_rempio2+0x36>
    8bdc:	b2 5a       	subi	r27, 0xA2	; 162
    8bde:	62 0b       	sbc	r22, r18
    8be0:	73 0b       	sbc	r23, r19
    8be2:	84 0b       	sbc	r24, r20
    8be4:	e3 95       	inc	r30
    8be6:	9a 95       	dec	r25
    8be8:	72 f7       	brpl	.-36     	; 0x8bc6 <__fp_rempio2+0x16>
    8bea:	80 38       	cpi	r24, 0x80	; 128
    8bec:	30 f4       	brcc	.+12     	; 0x8bfa <__fp_rempio2+0x4a>
    8bee:	9a 95       	dec	r25
    8bf0:	bb 0f       	add	r27, r27
    8bf2:	66 1f       	adc	r22, r22
    8bf4:	77 1f       	adc	r23, r23
    8bf6:	88 1f       	adc	r24, r24
    8bf8:	d2 f7       	brpl	.-12     	; 0x8bee <__fp_rempio2+0x3e>
    8bfa:	90 48       	sbci	r25, 0x80	; 128
    8bfc:	96 cf       	rjmp	.-212    	; 0x8b2a <__fp_mpack_finite>

00008bfe <__fp_round>:
    8bfe:	09 2e       	mov	r0, r25
    8c00:	03 94       	inc	r0
    8c02:	00 0c       	add	r0, r0
    8c04:	11 f4       	brne	.+4      	; 0x8c0a <__fp_round+0xc>
    8c06:	88 23       	and	r24, r24
    8c08:	52 f0       	brmi	.+20     	; 0x8c1e <__fp_round+0x20>
    8c0a:	bb 0f       	add	r27, r27
    8c0c:	40 f4       	brcc	.+16     	; 0x8c1e <__fp_round+0x20>
    8c0e:	bf 2b       	or	r27, r31
    8c10:	11 f4       	brne	.+4      	; 0x8c16 <__fp_round+0x18>
    8c12:	60 ff       	sbrs	r22, 0
    8c14:	04 c0       	rjmp	.+8      	; 0x8c1e <__fp_round+0x20>
    8c16:	6f 5f       	subi	r22, 0xFF	; 255
    8c18:	7f 4f       	sbci	r23, 0xFF	; 255
    8c1a:	8f 4f       	sbci	r24, 0xFF	; 255
    8c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    8c1e:	08 95       	ret

00008c20 <__fp_sinus>:
    8c20:	ef 93       	push	r30
    8c22:	e0 ff       	sbrs	r30, 0
    8c24:	06 c0       	rjmp	.+12     	; 0x8c32 <__fp_sinus+0x12>
    8c26:	a2 ea       	ldi	r26, 0xA2	; 162
    8c28:	2a ed       	ldi	r18, 0xDA	; 218
    8c2a:	3f e0       	ldi	r19, 0x0F	; 15
    8c2c:	49 ec       	ldi	r20, 0xC9	; 201
    8c2e:	5f eb       	ldi	r21, 0xBF	; 191
    8c30:	ca dd       	rcall	.-1132   	; 0x87c6 <__addsf3x>
    8c32:	e5 df       	rcall	.-54     	; 0x8bfe <__fp_round>
    8c34:	0f 90       	pop	r0
    8c36:	03 94       	inc	r0
    8c38:	01 fc       	sbrc	r0, 1
    8c3a:	90 58       	subi	r25, 0x80	; 128
    8c3c:	e5 e1       	ldi	r30, 0x15	; 21
    8c3e:	f2 e0       	ldi	r31, 0x02	; 2
    8c40:	d2 c1       	rjmp	.+932    	; 0x8fe6 <__fp_powsodd>

00008c42 <__fp_split3>:
    8c42:	57 fd       	sbrc	r21, 7
    8c44:	90 58       	subi	r25, 0x80	; 128
    8c46:	44 0f       	add	r20, r20
    8c48:	55 1f       	adc	r21, r21
    8c4a:	59 f0       	breq	.+22     	; 0x8c62 <__fp_splitA+0x10>
    8c4c:	5f 3f       	cpi	r21, 0xFF	; 255
    8c4e:	71 f0       	breq	.+28     	; 0x8c6c <__fp_splitA+0x1a>
    8c50:	47 95       	ror	r20

00008c52 <__fp_splitA>:
    8c52:	88 0f       	add	r24, r24
    8c54:	97 fb       	bst	r25, 7
    8c56:	99 1f       	adc	r25, r25
    8c58:	61 f0       	breq	.+24     	; 0x8c72 <__fp_splitA+0x20>
    8c5a:	9f 3f       	cpi	r25, 0xFF	; 255
    8c5c:	79 f0       	breq	.+30     	; 0x8c7c <__fp_splitA+0x2a>
    8c5e:	87 95       	ror	r24
    8c60:	08 95       	ret
    8c62:	12 16       	cp	r1, r18
    8c64:	13 06       	cpc	r1, r19
    8c66:	14 06       	cpc	r1, r20
    8c68:	55 1f       	adc	r21, r21
    8c6a:	f2 cf       	rjmp	.-28     	; 0x8c50 <__fp_split3+0xe>
    8c6c:	46 95       	lsr	r20
    8c6e:	f1 df       	rcall	.-30     	; 0x8c52 <__fp_splitA>
    8c70:	08 c0       	rjmp	.+16     	; 0x8c82 <__fp_splitA+0x30>
    8c72:	16 16       	cp	r1, r22
    8c74:	17 06       	cpc	r1, r23
    8c76:	18 06       	cpc	r1, r24
    8c78:	99 1f       	adc	r25, r25
    8c7a:	f1 cf       	rjmp	.-30     	; 0x8c5e <__fp_splitA+0xc>
    8c7c:	86 95       	lsr	r24
    8c7e:	71 05       	cpc	r23, r1
    8c80:	61 05       	cpc	r22, r1
    8c82:	08 94       	sec
    8c84:	08 95       	ret

00008c86 <__fp_trunc>:
    8c86:	e5 df       	rcall	.-54     	; 0x8c52 <__fp_splitA>
    8c88:	a0 f0       	brcs	.+40     	; 0x8cb2 <__fp_trunc+0x2c>
    8c8a:	be e7       	ldi	r27, 0x7E	; 126
    8c8c:	b9 17       	cp	r27, r25
    8c8e:	88 f4       	brcc	.+34     	; 0x8cb2 <__fp_trunc+0x2c>
    8c90:	bb 27       	eor	r27, r27
    8c92:	9f 38       	cpi	r25, 0x8F	; 143
    8c94:	60 f4       	brcc	.+24     	; 0x8cae <__fp_trunc+0x28>
    8c96:	16 16       	cp	r1, r22
    8c98:	b1 1d       	adc	r27, r1
    8c9a:	67 2f       	mov	r22, r23
    8c9c:	78 2f       	mov	r23, r24
    8c9e:	88 27       	eor	r24, r24
    8ca0:	98 5f       	subi	r25, 0xF8	; 248
    8ca2:	f7 cf       	rjmp	.-18     	; 0x8c92 <__fp_trunc+0xc>
    8ca4:	86 95       	lsr	r24
    8ca6:	77 95       	ror	r23
    8ca8:	67 95       	ror	r22
    8caa:	b1 1d       	adc	r27, r1
    8cac:	93 95       	inc	r25
    8cae:	96 39       	cpi	r25, 0x96	; 150
    8cb0:	c8 f3       	brcs	.-14     	; 0x8ca4 <__fp_trunc+0x1e>
    8cb2:	08 95       	ret

00008cb4 <__fp_zero>:
    8cb4:	e8 94       	clt

00008cb6 <__fp_szero>:
    8cb6:	bb 27       	eor	r27, r27
    8cb8:	66 27       	eor	r22, r22
    8cba:	77 27       	eor	r23, r23
    8cbc:	cb 01       	movw	r24, r22
    8cbe:	97 f9       	bld	r25, 7
    8cc0:	08 95       	ret

00008cc2 <__gesf2>:
    8cc2:	ec de       	rcall	.-552    	; 0x8a9c <__fp_cmp>
    8cc4:	08 f4       	brcc	.+2      	; 0x8cc8 <__gesf2+0x6>
    8cc6:	8f ef       	ldi	r24, 0xFF	; 255
    8cc8:	08 95       	ret
    8cca:	63 df       	rcall	.-314    	; 0x8b92 <__fp_pscA>
    8ccc:	19 f0       	breq	.+6      	; 0x8cd4 <__gesf2+0x12>
    8cce:	68 df       	rcall	.-304    	; 0x8ba0 <__fp_pscB>
    8cd0:	09 f0       	breq	.+2      	; 0x8cd4 <__gesf2+0x12>
    8cd2:	37 cf       	rjmp	.-402    	; 0x8b42 <__fp_nan>
    8cd4:	07 cf       	rjmp	.-498    	; 0x8ae4 <__fp_inf>
    8cd6:	b9 01       	movw	r22, r18
    8cd8:	ca 01       	movw	r24, r20
    8cda:	25 cf       	rjmp	.-438    	; 0x8b26 <__fp_mpack>

00008cdc <hypot>:
    8cdc:	9f 77       	andi	r25, 0x7F	; 127
    8cde:	5f 77       	andi	r21, 0x7F	; 127
    8ce0:	b0 df       	rcall	.-160    	; 0x8c42 <__fp_split3>
    8ce2:	98 f3       	brcs	.-26     	; 0x8cca <__gesf2+0x8>
    8ce4:	99 23       	and	r25, r25
    8ce6:	b9 f3       	breq	.-18     	; 0x8cd6 <__gesf2+0x14>
    8ce8:	55 23       	and	r21, r21
    8cea:	b9 f3       	breq	.-18     	; 0x8cda <__gesf2+0x18>
    8cec:	ff 27       	eor	r31, r31
    8cee:	95 17       	cp	r25, r21
    8cf0:	58 f4       	brcc	.+22     	; 0x8d08 <hypot+0x2c>
    8cf2:	e5 2f       	mov	r30, r21
    8cf4:	e9 1b       	sub	r30, r25
    8cf6:	ed 30       	cpi	r30, 0x0D	; 13
    8cf8:	70 f7       	brcc	.-36     	; 0x8cd6 <__gesf2+0x14>
    8cfa:	5e 3b       	cpi	r21, 0xBE	; 190
    8cfc:	10 f0       	brcs	.+4      	; 0x8d02 <hypot+0x26>
    8cfe:	f1 e4       	ldi	r31, 0x41	; 65
    8d00:	1c c0       	rjmp	.+56     	; 0x8d3a <hypot+0x5e>
    8d02:	90 34       	cpi	r25, 0x40	; 64
    8d04:	e0 f4       	brcc	.+56     	; 0x8d3e <hypot+0x62>
    8d06:	0a c0       	rjmp	.+20     	; 0x8d1c <hypot+0x40>
    8d08:	e9 2f       	mov	r30, r25
    8d0a:	e5 1b       	sub	r30, r21
    8d0c:	ed 30       	cpi	r30, 0x0D	; 13
    8d0e:	28 f7       	brcc	.-54     	; 0x8cda <__gesf2+0x18>
    8d10:	9e 3b       	cpi	r25, 0xBE	; 190
    8d12:	10 f0       	brcs	.+4      	; 0x8d18 <hypot+0x3c>
    8d14:	f1 e4       	ldi	r31, 0x41	; 65
    8d16:	11 c0       	rjmp	.+34     	; 0x8d3a <hypot+0x5e>
    8d18:	50 34       	cpi	r21, 0x40	; 64
    8d1a:	88 f4       	brcc	.+34     	; 0x8d3e <hypot+0x62>
    8d1c:	f9 ea       	ldi	r31, 0xA9	; 169
    8d1e:	88 23       	and	r24, r24
    8d20:	2a f0       	brmi	.+10     	; 0x8d2c <hypot+0x50>
    8d22:	9a 95       	dec	r25
    8d24:	66 0f       	add	r22, r22
    8d26:	77 1f       	adc	r23, r23
    8d28:	88 1f       	adc	r24, r24
    8d2a:	da f7       	brpl	.-10     	; 0x8d22 <hypot+0x46>
    8d2c:	44 23       	and	r20, r20
    8d2e:	2a f0       	brmi	.+10     	; 0x8d3a <hypot+0x5e>
    8d30:	5a 95       	dec	r21
    8d32:	22 0f       	add	r18, r18
    8d34:	33 1f       	adc	r19, r19
    8d36:	44 1f       	adc	r20, r20
    8d38:	da f7       	brpl	.-10     	; 0x8d30 <hypot+0x54>
    8d3a:	9f 1b       	sub	r25, r31
    8d3c:	5f 1b       	sub	r21, r31
    8d3e:	ff 93       	push	r31
    8d40:	1f 93       	push	r17
    8d42:	0f 93       	push	r16
    8d44:	ff 92       	push	r15
    8d46:	ef 92       	push	r14
    8d48:	79 01       	movw	r14, r18
    8d4a:	8a 01       	movw	r16, r20
    8d4c:	bb 27       	eor	r27, r27
    8d4e:	ab 2f       	mov	r26, r27
    8d50:	9b 01       	movw	r18, r22
    8d52:	ac 01       	movw	r20, r24
    8d54:	96 d0       	rcall	.+300    	; 0x8e82 <__mulsf3_pse>
    8d56:	97 01       	movw	r18, r14
    8d58:	a8 01       	movw	r20, r16
    8d5a:	bf 93       	push	r27
    8d5c:	7b 01       	movw	r14, r22
    8d5e:	8c 01       	movw	r16, r24
    8d60:	aa 27       	eor	r26, r26
    8d62:	ba 2f       	mov	r27, r26
    8d64:	b9 01       	movw	r22, r18
    8d66:	ca 01       	movw	r24, r20
    8d68:	8c d0       	rcall	.+280    	; 0x8e82 <__mulsf3_pse>
    8d6a:	af 91       	pop	r26
    8d6c:	97 01       	movw	r18, r14
    8d6e:	a8 01       	movw	r20, r16
    8d70:	ef 90       	pop	r14
    8d72:	ff 90       	pop	r15
    8d74:	0f 91       	pop	r16
    8d76:	1f 91       	pop	r17
    8d78:	26 dd       	rcall	.-1460   	; 0x87c6 <__addsf3x>
    8d7a:	41 df       	rcall	.-382    	; 0x8bfe <__fp_round>
    8d7c:	e1 d0       	rcall	.+450    	; 0x8f40 <sqrt>
    8d7e:	4f 91       	pop	r20
    8d80:	40 ff       	sbrs	r20, 0
    8d82:	08 95       	ret
    8d84:	55 27       	eor	r21, r21
    8d86:	47 fd       	sbrc	r20, 7
    8d88:	50 95       	com	r21
    8d8a:	09 c0       	rjmp	.+18     	; 0x8d9e <ldexp>

00008d8c <inverse>:
    8d8c:	9b 01       	movw	r18, r22
    8d8e:	ac 01       	movw	r20, r24
    8d90:	60 e0       	ldi	r22, 0x00	; 0
    8d92:	70 e0       	ldi	r23, 0x00	; 0
    8d94:	80 e8       	ldi	r24, 0x80	; 128
    8d96:	9f e3       	ldi	r25, 0x3F	; 63
    8d98:	ab cd       	rjmp	.-1194   	; 0x88f0 <__divsf3>
    8d9a:	a4 ce       	rjmp	.-696    	; 0x8ae4 <__fp_inf>
    8d9c:	c4 ce       	rjmp	.-632    	; 0x8b26 <__fp_mpack>

00008d9e <ldexp>:
    8d9e:	59 df       	rcall	.-334    	; 0x8c52 <__fp_splitA>
    8da0:	e8 f3       	brcs	.-6      	; 0x8d9c <inverse+0x10>
    8da2:	99 23       	and	r25, r25
    8da4:	d9 f3       	breq	.-10     	; 0x8d9c <inverse+0x10>
    8da6:	94 0f       	add	r25, r20
    8da8:	51 1d       	adc	r21, r1
    8daa:	bb f3       	brvs	.-18     	; 0x8d9a <inverse+0xe>
    8dac:	91 50       	subi	r25, 0x01	; 1
    8dae:	50 40       	sbci	r21, 0x00	; 0
    8db0:	94 f0       	brlt	.+36     	; 0x8dd6 <ldexp+0x38>
    8db2:	59 f0       	breq	.+22     	; 0x8dca <ldexp+0x2c>
    8db4:	88 23       	and	r24, r24
    8db6:	32 f0       	brmi	.+12     	; 0x8dc4 <ldexp+0x26>
    8db8:	66 0f       	add	r22, r22
    8dba:	77 1f       	adc	r23, r23
    8dbc:	88 1f       	adc	r24, r24
    8dbe:	91 50       	subi	r25, 0x01	; 1
    8dc0:	50 40       	sbci	r21, 0x00	; 0
    8dc2:	c1 f7       	brne	.-16     	; 0x8db4 <ldexp+0x16>
    8dc4:	9e 3f       	cpi	r25, 0xFE	; 254
    8dc6:	51 05       	cpc	r21, r1
    8dc8:	44 f7       	brge	.-48     	; 0x8d9a <inverse+0xe>
    8dca:	88 0f       	add	r24, r24
    8dcc:	91 1d       	adc	r25, r1
    8dce:	96 95       	lsr	r25
    8dd0:	87 95       	ror	r24
    8dd2:	97 f9       	bld	r25, 7
    8dd4:	08 95       	ret
    8dd6:	5f 3f       	cpi	r21, 0xFF	; 255
    8dd8:	ac f0       	brlt	.+42     	; 0x8e04 <ldexp+0x66>
    8dda:	98 3e       	cpi	r25, 0xE8	; 232
    8ddc:	9c f0       	brlt	.+38     	; 0x8e04 <ldexp+0x66>
    8dde:	bb 27       	eor	r27, r27
    8de0:	86 95       	lsr	r24
    8de2:	77 95       	ror	r23
    8de4:	67 95       	ror	r22
    8de6:	b7 95       	ror	r27
    8de8:	08 f4       	brcc	.+2      	; 0x8dec <ldexp+0x4e>
    8dea:	b1 60       	ori	r27, 0x01	; 1
    8dec:	93 95       	inc	r25
    8dee:	c1 f7       	brne	.-16     	; 0x8de0 <ldexp+0x42>
    8df0:	bb 0f       	add	r27, r27
    8df2:	58 f7       	brcc	.-42     	; 0x8dca <ldexp+0x2c>
    8df4:	11 f4       	brne	.+4      	; 0x8dfa <ldexp+0x5c>
    8df6:	60 ff       	sbrs	r22, 0
    8df8:	e8 cf       	rjmp	.-48     	; 0x8dca <ldexp+0x2c>
    8dfa:	6f 5f       	subi	r22, 0xFF	; 255
    8dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    8dfe:	8f 4f       	sbci	r24, 0xFF	; 255
    8e00:	9f 4f       	sbci	r25, 0xFF	; 255
    8e02:	e3 cf       	rjmp	.-58     	; 0x8dca <ldexp+0x2c>
    8e04:	58 cf       	rjmp	.-336    	; 0x8cb6 <__fp_szero>

00008e06 <lround>:
    8e06:	25 df       	rcall	.-438    	; 0x8c52 <__fp_splitA>
    8e08:	58 f1       	brcs	.+86     	; 0x8e60 <lround+0x5a>
    8e0a:	9e 57       	subi	r25, 0x7E	; 126
    8e0c:	58 f1       	brcs	.+86     	; 0x8e64 <lround+0x5e>
    8e0e:	98 51       	subi	r25, 0x18	; 24
    8e10:	a0 f0       	brcs	.+40     	; 0x8e3a <lround+0x34>
    8e12:	e9 f0       	breq	.+58     	; 0x8e4e <lround+0x48>
    8e14:	98 30       	cpi	r25, 0x08	; 8
    8e16:	20 f5       	brcc	.+72     	; 0x8e60 <lround+0x5a>
    8e18:	09 2e       	mov	r0, r25
    8e1a:	99 27       	eor	r25, r25
    8e1c:	66 0f       	add	r22, r22
    8e1e:	77 1f       	adc	r23, r23
    8e20:	88 1f       	adc	r24, r24
    8e22:	99 1f       	adc	r25, r25
    8e24:	0a 94       	dec	r0
    8e26:	d1 f7       	brne	.-12     	; 0x8e1c <lround+0x16>
    8e28:	12 c0       	rjmp	.+36     	; 0x8e4e <lround+0x48>
    8e2a:	06 2e       	mov	r0, r22
    8e2c:	67 2f       	mov	r22, r23
    8e2e:	78 2f       	mov	r23, r24
    8e30:	88 27       	eor	r24, r24
    8e32:	98 5f       	subi	r25, 0xF8	; 248
    8e34:	11 f4       	brne	.+4      	; 0x8e3a <lround+0x34>
    8e36:	00 0c       	add	r0, r0
    8e38:	07 c0       	rjmp	.+14     	; 0x8e48 <lround+0x42>
    8e3a:	99 3f       	cpi	r25, 0xF9	; 249
    8e3c:	b4 f3       	brlt	.-20     	; 0x8e2a <lround+0x24>
    8e3e:	86 95       	lsr	r24
    8e40:	77 95       	ror	r23
    8e42:	67 95       	ror	r22
    8e44:	93 95       	inc	r25
    8e46:	d9 f7       	brne	.-10     	; 0x8e3e <lround+0x38>
    8e48:	61 1d       	adc	r22, r1
    8e4a:	71 1d       	adc	r23, r1
    8e4c:	81 1d       	adc	r24, r1
    8e4e:	3e f4       	brtc	.+14     	; 0x8e5e <lround+0x58>
    8e50:	90 95       	com	r25
    8e52:	80 95       	com	r24
    8e54:	70 95       	com	r23
    8e56:	61 95       	neg	r22
    8e58:	7f 4f       	sbci	r23, 0xFF	; 255
    8e5a:	8f 4f       	sbci	r24, 0xFF	; 255
    8e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    8e5e:	08 95       	ret
    8e60:	68 94       	set
    8e62:	29 cf       	rjmp	.-430    	; 0x8cb6 <__fp_szero>
    8e64:	27 cf       	rjmp	.-434    	; 0x8cb4 <__fp_zero>

00008e66 <__mulsf3>:
    8e66:	0b d0       	rcall	.+22     	; 0x8e7e <__mulsf3x>
    8e68:	ca ce       	rjmp	.-620    	; 0x8bfe <__fp_round>
    8e6a:	93 de       	rcall	.-730    	; 0x8b92 <__fp_pscA>
    8e6c:	28 f0       	brcs	.+10     	; 0x8e78 <__mulsf3+0x12>
    8e6e:	98 de       	rcall	.-720    	; 0x8ba0 <__fp_pscB>
    8e70:	18 f0       	brcs	.+6      	; 0x8e78 <__mulsf3+0x12>
    8e72:	95 23       	and	r25, r21
    8e74:	09 f0       	breq	.+2      	; 0x8e78 <__mulsf3+0x12>
    8e76:	36 ce       	rjmp	.-916    	; 0x8ae4 <__fp_inf>
    8e78:	64 ce       	rjmp	.-824    	; 0x8b42 <__fp_nan>
    8e7a:	11 24       	eor	r1, r1
    8e7c:	1c cf       	rjmp	.-456    	; 0x8cb6 <__fp_szero>

00008e7e <__mulsf3x>:
    8e7e:	e1 de       	rcall	.-574    	; 0x8c42 <__fp_split3>
    8e80:	a0 f3       	brcs	.-24     	; 0x8e6a <__mulsf3+0x4>

00008e82 <__mulsf3_pse>:
    8e82:	95 9f       	mul	r25, r21
    8e84:	d1 f3       	breq	.-12     	; 0x8e7a <__mulsf3+0x14>
    8e86:	95 0f       	add	r25, r21
    8e88:	50 e0       	ldi	r21, 0x00	; 0
    8e8a:	55 1f       	adc	r21, r21
    8e8c:	62 9f       	mul	r22, r18
    8e8e:	f0 01       	movw	r30, r0
    8e90:	72 9f       	mul	r23, r18
    8e92:	bb 27       	eor	r27, r27
    8e94:	f0 0d       	add	r31, r0
    8e96:	b1 1d       	adc	r27, r1
    8e98:	63 9f       	mul	r22, r19
    8e9a:	aa 27       	eor	r26, r26
    8e9c:	f0 0d       	add	r31, r0
    8e9e:	b1 1d       	adc	r27, r1
    8ea0:	aa 1f       	adc	r26, r26
    8ea2:	64 9f       	mul	r22, r20
    8ea4:	66 27       	eor	r22, r22
    8ea6:	b0 0d       	add	r27, r0
    8ea8:	a1 1d       	adc	r26, r1
    8eaa:	66 1f       	adc	r22, r22
    8eac:	82 9f       	mul	r24, r18
    8eae:	22 27       	eor	r18, r18
    8eb0:	b0 0d       	add	r27, r0
    8eb2:	a1 1d       	adc	r26, r1
    8eb4:	62 1f       	adc	r22, r18
    8eb6:	73 9f       	mul	r23, r19
    8eb8:	b0 0d       	add	r27, r0
    8eba:	a1 1d       	adc	r26, r1
    8ebc:	62 1f       	adc	r22, r18
    8ebe:	83 9f       	mul	r24, r19
    8ec0:	a0 0d       	add	r26, r0
    8ec2:	61 1d       	adc	r22, r1
    8ec4:	22 1f       	adc	r18, r18
    8ec6:	74 9f       	mul	r23, r20
    8ec8:	33 27       	eor	r19, r19
    8eca:	a0 0d       	add	r26, r0
    8ecc:	61 1d       	adc	r22, r1
    8ece:	23 1f       	adc	r18, r19
    8ed0:	84 9f       	mul	r24, r20
    8ed2:	60 0d       	add	r22, r0
    8ed4:	21 1d       	adc	r18, r1
    8ed6:	82 2f       	mov	r24, r18
    8ed8:	76 2f       	mov	r23, r22
    8eda:	6a 2f       	mov	r22, r26
    8edc:	11 24       	eor	r1, r1
    8ede:	9f 57       	subi	r25, 0x7F	; 127
    8ee0:	50 40       	sbci	r21, 0x00	; 0
    8ee2:	8a f0       	brmi	.+34     	; 0x8f06 <__mulsf3_pse+0x84>
    8ee4:	e1 f0       	breq	.+56     	; 0x8f1e <__mulsf3_pse+0x9c>
    8ee6:	88 23       	and	r24, r24
    8ee8:	4a f0       	brmi	.+18     	; 0x8efc <__mulsf3_pse+0x7a>
    8eea:	ee 0f       	add	r30, r30
    8eec:	ff 1f       	adc	r31, r31
    8eee:	bb 1f       	adc	r27, r27
    8ef0:	66 1f       	adc	r22, r22
    8ef2:	77 1f       	adc	r23, r23
    8ef4:	88 1f       	adc	r24, r24
    8ef6:	91 50       	subi	r25, 0x01	; 1
    8ef8:	50 40       	sbci	r21, 0x00	; 0
    8efa:	a9 f7       	brne	.-22     	; 0x8ee6 <__mulsf3_pse+0x64>
    8efc:	9e 3f       	cpi	r25, 0xFE	; 254
    8efe:	51 05       	cpc	r21, r1
    8f00:	70 f0       	brcs	.+28     	; 0x8f1e <__mulsf3_pse+0x9c>
    8f02:	f0 cd       	rjmp	.-1056   	; 0x8ae4 <__fp_inf>
    8f04:	d8 ce       	rjmp	.-592    	; 0x8cb6 <__fp_szero>
    8f06:	5f 3f       	cpi	r21, 0xFF	; 255
    8f08:	ec f3       	brlt	.-6      	; 0x8f04 <__mulsf3_pse+0x82>
    8f0a:	98 3e       	cpi	r25, 0xE8	; 232
    8f0c:	dc f3       	brlt	.-10     	; 0x8f04 <__mulsf3_pse+0x82>
    8f0e:	86 95       	lsr	r24
    8f10:	77 95       	ror	r23
    8f12:	67 95       	ror	r22
    8f14:	b7 95       	ror	r27
    8f16:	f7 95       	ror	r31
    8f18:	e7 95       	ror	r30
    8f1a:	9f 5f       	subi	r25, 0xFF	; 255
    8f1c:	c1 f7       	brne	.-16     	; 0x8f0e <__mulsf3_pse+0x8c>
    8f1e:	fe 2b       	or	r31, r30
    8f20:	88 0f       	add	r24, r24
    8f22:	91 1d       	adc	r25, r1
    8f24:	96 95       	lsr	r25
    8f26:	87 95       	ror	r24
    8f28:	97 f9       	bld	r25, 7
    8f2a:	08 95       	ret

00008f2c <sin>:
    8f2c:	9f 93       	push	r25
    8f2e:	40 de       	rcall	.-896    	; 0x8bb0 <__fp_rempio2>
    8f30:	0f 90       	pop	r0
    8f32:	07 fc       	sbrc	r0, 7
    8f34:	ee 5f       	subi	r30, 0xFE	; 254
    8f36:	74 ce       	rjmp	.-792    	; 0x8c20 <__fp_sinus>
    8f38:	11 f4       	brne	.+4      	; 0x8f3e <sin+0x12>
    8f3a:	0e f4       	brtc	.+2      	; 0x8f3e <sin+0x12>
    8f3c:	02 ce       	rjmp	.-1020   	; 0x8b42 <__fp_nan>
    8f3e:	f3 cd       	rjmp	.-1050   	; 0x8b26 <__fp_mpack>

00008f40 <sqrt>:
    8f40:	88 de       	rcall	.-752    	; 0x8c52 <__fp_splitA>
    8f42:	d0 f3       	brcs	.-12     	; 0x8f38 <sin+0xc>
    8f44:	99 23       	and	r25, r25
    8f46:	d9 f3       	breq	.-10     	; 0x8f3e <sin+0x12>
    8f48:	ce f3       	brts	.-14     	; 0x8f3c <sin+0x10>
    8f4a:	9f 57       	subi	r25, 0x7F	; 127
    8f4c:	55 0b       	sbc	r21, r21
    8f4e:	87 ff       	sbrs	r24, 7
    8f50:	43 d0       	rcall	.+134    	; 0x8fd8 <__fp_norm2>
    8f52:	00 24       	eor	r0, r0
    8f54:	a0 e6       	ldi	r26, 0x60	; 96
    8f56:	40 ea       	ldi	r20, 0xA0	; 160
    8f58:	90 01       	movw	r18, r0
    8f5a:	80 58       	subi	r24, 0x80	; 128
    8f5c:	56 95       	lsr	r21
    8f5e:	97 95       	ror	r25
    8f60:	28 f4       	brcc	.+10     	; 0x8f6c <sqrt+0x2c>
    8f62:	80 5c       	subi	r24, 0xC0	; 192
    8f64:	66 0f       	add	r22, r22
    8f66:	77 1f       	adc	r23, r23
    8f68:	88 1f       	adc	r24, r24
    8f6a:	20 f0       	brcs	.+8      	; 0x8f74 <sqrt+0x34>
    8f6c:	26 17       	cp	r18, r22
    8f6e:	37 07       	cpc	r19, r23
    8f70:	48 07       	cpc	r20, r24
    8f72:	30 f4       	brcc	.+12     	; 0x8f80 <sqrt+0x40>
    8f74:	62 1b       	sub	r22, r18
    8f76:	73 0b       	sbc	r23, r19
    8f78:	84 0b       	sbc	r24, r20
    8f7a:	20 29       	or	r18, r0
    8f7c:	31 29       	or	r19, r1
    8f7e:	4a 2b       	or	r20, r26
    8f80:	a6 95       	lsr	r26
    8f82:	17 94       	ror	r1
    8f84:	07 94       	ror	r0
    8f86:	20 25       	eor	r18, r0
    8f88:	31 25       	eor	r19, r1
    8f8a:	4a 27       	eor	r20, r26
    8f8c:	58 f7       	brcc	.-42     	; 0x8f64 <sqrt+0x24>
    8f8e:	66 0f       	add	r22, r22
    8f90:	77 1f       	adc	r23, r23
    8f92:	88 1f       	adc	r24, r24
    8f94:	20 f0       	brcs	.+8      	; 0x8f9e <sqrt+0x5e>
    8f96:	26 17       	cp	r18, r22
    8f98:	37 07       	cpc	r19, r23
    8f9a:	48 07       	cpc	r20, r24
    8f9c:	30 f4       	brcc	.+12     	; 0x8faa <sqrt+0x6a>
    8f9e:	62 0b       	sbc	r22, r18
    8fa0:	73 0b       	sbc	r23, r19
    8fa2:	84 0b       	sbc	r24, r20
    8fa4:	20 0d       	add	r18, r0
    8fa6:	31 1d       	adc	r19, r1
    8fa8:	41 1d       	adc	r20, r1
    8faa:	a0 95       	com	r26
    8fac:	81 f7       	brne	.-32     	; 0x8f8e <sqrt+0x4e>
    8fae:	b9 01       	movw	r22, r18
    8fb0:	84 2f       	mov	r24, r20
    8fb2:	91 58       	subi	r25, 0x81	; 129
    8fb4:	88 0f       	add	r24, r24
    8fb6:	96 95       	lsr	r25
    8fb8:	87 95       	ror	r24
    8fba:	08 95       	ret

00008fbc <square>:
    8fbc:	9b 01       	movw	r18, r22
    8fbe:	ac 01       	movw	r20, r24
    8fc0:	52 cf       	rjmp	.-348    	; 0x8e66 <__mulsf3>

00008fc2 <trunc>:
    8fc2:	61 de       	rcall	.-830    	; 0x8c86 <__fp_trunc>
    8fc4:	20 f0       	brcs	.+8      	; 0x8fce <trunc+0xc>
    8fc6:	9f 37       	cpi	r25, 0x7F	; 127
    8fc8:	08 f4       	brcc	.+2      	; 0x8fcc <trunc+0xa>
    8fca:	75 ce       	rjmp	.-790    	; 0x8cb6 <__fp_szero>
    8fcc:	91 cd       	rjmp	.-1246   	; 0x8af0 <__fp_mintl>
    8fce:	ab cd       	rjmp	.-1194   	; 0x8b26 <__fp_mpack>

00008fd0 <__unordsf2>:
    8fd0:	65 dd       	rcall	.-1334   	; 0x8a9c <__fp_cmp>
    8fd2:	88 0b       	sbc	r24, r24
    8fd4:	99 0b       	sbc	r25, r25
    8fd6:	08 95       	ret

00008fd8 <__fp_norm2>:
    8fd8:	91 50       	subi	r25, 0x01	; 1
    8fda:	50 40       	sbci	r21, 0x00	; 0
    8fdc:	66 0f       	add	r22, r22
    8fde:	77 1f       	adc	r23, r23
    8fe0:	88 1f       	adc	r24, r24
    8fe2:	d2 f7       	brpl	.-12     	; 0x8fd8 <__fp_norm2>
    8fe4:	08 95       	ret

00008fe6 <__fp_powsodd>:
    8fe6:	9f 93       	push	r25
    8fe8:	8f 93       	push	r24
    8fea:	7f 93       	push	r23
    8fec:	6f 93       	push	r22
    8fee:	ff 93       	push	r31
    8ff0:	ef 93       	push	r30
    8ff2:	9b 01       	movw	r18, r22
    8ff4:	ac 01       	movw	r20, r24
    8ff6:	37 df       	rcall	.-402    	; 0x8e66 <__mulsf3>
    8ff8:	ef 91       	pop	r30
    8ffa:	ff 91       	pop	r31
    8ffc:	a5 dd       	rcall	.-1206   	; 0x8b48 <__fp_powser>
    8ffe:	2f 91       	pop	r18
    9000:	3f 91       	pop	r19
    9002:	4f 91       	pop	r20
    9004:	5f 91       	pop	r21
    9006:	2f cf       	rjmp	.-418    	; 0x8e66 <__mulsf3>

00009008 <__mulsi3>:
    9008:	62 9f       	mul	r22, r18
    900a:	d0 01       	movw	r26, r0
    900c:	73 9f       	mul	r23, r19
    900e:	f0 01       	movw	r30, r0
    9010:	82 9f       	mul	r24, r18
    9012:	e0 0d       	add	r30, r0
    9014:	f1 1d       	adc	r31, r1
    9016:	64 9f       	mul	r22, r20
    9018:	e0 0d       	add	r30, r0
    901a:	f1 1d       	adc	r31, r1
    901c:	92 9f       	mul	r25, r18
    901e:	f0 0d       	add	r31, r0
    9020:	83 9f       	mul	r24, r19
    9022:	f0 0d       	add	r31, r0
    9024:	74 9f       	mul	r23, r20
    9026:	f0 0d       	add	r31, r0
    9028:	65 9f       	mul	r22, r21
    902a:	f0 0d       	add	r31, r0
    902c:	99 27       	eor	r25, r25
    902e:	72 9f       	mul	r23, r18
    9030:	b0 0d       	add	r27, r0
    9032:	e1 1d       	adc	r30, r1
    9034:	f9 1f       	adc	r31, r25
    9036:	63 9f       	mul	r22, r19
    9038:	b0 0d       	add	r27, r0
    903a:	e1 1d       	adc	r30, r1
    903c:	f9 1f       	adc	r31, r25
    903e:	bd 01       	movw	r22, r26
    9040:	cf 01       	movw	r24, r30
    9042:	11 24       	eor	r1, r1
    9044:	08 95       	ret

00009046 <__udivmodsi4>:
    9046:	a1 e2       	ldi	r26, 0x21	; 33
    9048:	1a 2e       	mov	r1, r26
    904a:	aa 1b       	sub	r26, r26
    904c:	bb 1b       	sub	r27, r27
    904e:	fd 01       	movw	r30, r26
    9050:	0d c0       	rjmp	.+26     	; 0x906c <__udivmodsi4_ep>

00009052 <__udivmodsi4_loop>:
    9052:	aa 1f       	adc	r26, r26
    9054:	bb 1f       	adc	r27, r27
    9056:	ee 1f       	adc	r30, r30
    9058:	ff 1f       	adc	r31, r31
    905a:	a2 17       	cp	r26, r18
    905c:	b3 07       	cpc	r27, r19
    905e:	e4 07       	cpc	r30, r20
    9060:	f5 07       	cpc	r31, r21
    9062:	20 f0       	brcs	.+8      	; 0x906c <__udivmodsi4_ep>
    9064:	a2 1b       	sub	r26, r18
    9066:	b3 0b       	sbc	r27, r19
    9068:	e4 0b       	sbc	r30, r20
    906a:	f5 0b       	sbc	r31, r21

0000906c <__udivmodsi4_ep>:
    906c:	66 1f       	adc	r22, r22
    906e:	77 1f       	adc	r23, r23
    9070:	88 1f       	adc	r24, r24
    9072:	99 1f       	adc	r25, r25
    9074:	1a 94       	dec	r1
    9076:	69 f7       	brne	.-38     	; 0x9052 <__udivmodsi4_loop>
    9078:	60 95       	com	r22
    907a:	70 95       	com	r23
    907c:	80 95       	com	r24
    907e:	90 95       	com	r25
    9080:	9b 01       	movw	r18, r22
    9082:	ac 01       	movw	r20, r24
    9084:	bd 01       	movw	r22, r26
    9086:	cf 01       	movw	r24, r30
    9088:	08 95       	ret

0000908a <__prologue_saves__>:
    908a:	2f 92       	push	r2
    908c:	3f 92       	push	r3
    908e:	4f 92       	push	r4
    9090:	5f 92       	push	r5
    9092:	6f 92       	push	r6
    9094:	7f 92       	push	r7
    9096:	8f 92       	push	r8
    9098:	9f 92       	push	r9
    909a:	af 92       	push	r10
    909c:	bf 92       	push	r11
    909e:	cf 92       	push	r12
    90a0:	df 92       	push	r13
    90a2:	ef 92       	push	r14
    90a4:	ff 92       	push	r15
    90a6:	0f 93       	push	r16
    90a8:	1f 93       	push	r17
    90aa:	cf 93       	push	r28
    90ac:	df 93       	push	r29
    90ae:	cd b7       	in	r28, 0x3d	; 61
    90b0:	de b7       	in	r29, 0x3e	; 62
    90b2:	ca 1b       	sub	r28, r26
    90b4:	db 0b       	sbc	r29, r27
    90b6:	0f b6       	in	r0, 0x3f	; 63
    90b8:	f8 94       	cli
    90ba:	de bf       	out	0x3e, r29	; 62
    90bc:	0f be       	out	0x3f, r0	; 63
    90be:	cd bf       	out	0x3d, r28	; 61
    90c0:	19 94       	eijmp

000090c2 <__epilogue_restores__>:
    90c2:	2a 88       	ldd	r2, Y+18	; 0x12
    90c4:	39 88       	ldd	r3, Y+17	; 0x11
    90c6:	48 88       	ldd	r4, Y+16	; 0x10
    90c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    90ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    90cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    90ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    90d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    90d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    90d4:	b9 84       	ldd	r11, Y+9	; 0x09
    90d6:	c8 84       	ldd	r12, Y+8	; 0x08
    90d8:	df 80       	ldd	r13, Y+7	; 0x07
    90da:	ee 80       	ldd	r14, Y+6	; 0x06
    90dc:	fd 80       	ldd	r15, Y+5	; 0x05
    90de:	0c 81       	ldd	r16, Y+4	; 0x04
    90e0:	1b 81       	ldd	r17, Y+3	; 0x03
    90e2:	aa 81       	ldd	r26, Y+2	; 0x02
    90e4:	b9 81       	ldd	r27, Y+1	; 0x01
    90e6:	ce 0f       	add	r28, r30
    90e8:	d1 1d       	adc	r29, r1
    90ea:	0f b6       	in	r0, 0x3f	; 63
    90ec:	f8 94       	cli
    90ee:	de bf       	out	0x3e, r29	; 62
    90f0:	0f be       	out	0x3f, r0	; 63
    90f2:	cd bf       	out	0x3d, r28	; 61
    90f4:	ed 01       	movw	r28, r26
    90f6:	08 95       	ret

000090f8 <strtod>:
    90f8:	8f 92       	push	r8
    90fa:	9f 92       	push	r9
    90fc:	af 92       	push	r10
    90fe:	bf 92       	push	r11
    9100:	cf 92       	push	r12
    9102:	df 92       	push	r13
    9104:	ef 92       	push	r14
    9106:	ff 92       	push	r15
    9108:	0f 93       	push	r16
    910a:	1f 93       	push	r17
    910c:	cf 93       	push	r28
    910e:	df 93       	push	r29
    9110:	ec 01       	movw	r28, r24
    9112:	5b 01       	movw	r10, r22
    9114:	61 15       	cp	r22, r1
    9116:	71 05       	cpc	r23, r1
    9118:	19 f0       	breq	.+6      	; 0x9120 <strtod+0x28>
    911a:	fb 01       	movw	r30, r22
    911c:	80 83       	st	Z, r24
    911e:	91 83       	std	Z+1, r25	; 0x01
    9120:	f9 90       	ld	r15, Y+
    9122:	8f 2d       	mov	r24, r15
    9124:	90 e0       	ldi	r25, 0x00	; 0
    9126:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <isspace>
    912a:	89 2b       	or	r24, r25
    912c:	c9 f7       	brne	.-14     	; 0x9120 <strtod+0x28>
    912e:	fd e2       	ldi	r31, 0x2D	; 45
    9130:	ff 16       	cp	r15, r31
    9132:	21 f4       	brne	.+8      	; 0x913c <strtod+0x44>
    9134:	f9 90       	ld	r15, Y+
    9136:	ee 24       	eor	r14, r14
    9138:	e3 94       	inc	r14
    913a:	05 c0       	rjmp	.+10     	; 0x9146 <strtod+0x4e>
    913c:	2b e2       	ldi	r18, 0x2B	; 43
    913e:	f2 16       	cp	r15, r18
    9140:	09 f4       	brne	.+2      	; 0x9144 <strtod+0x4c>
    9142:	f9 90       	ld	r15, Y+
    9144:	ee 24       	eor	r14, r14
    9146:	8e 01       	movw	r16, r28
    9148:	01 50       	subi	r16, 0x01	; 1
    914a:	10 40       	sbci	r17, 0x00	; 0
    914c:	c8 01       	movw	r24, r16
    914e:	62 e2       	ldi	r22, 0x22	; 34
    9150:	7e e1       	ldi	r23, 0x1E	; 30
    9152:	43 e0       	ldi	r20, 0x03	; 3
    9154:	50 e0       	ldi	r21, 0x00	; 0
    9156:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <strncasecmp_P>
    915a:	89 2b       	or	r24, r25
    915c:	01 f5       	brne	.+64     	; 0x919e <strtod+0xa6>
    915e:	8e 01       	movw	r16, r28
    9160:	0e 5f       	subi	r16, 0xFE	; 254
    9162:	1f 4f       	sbci	r17, 0xFF	; 255
    9164:	c8 01       	movw	r24, r16
    9166:	65 e2       	ldi	r22, 0x25	; 37
    9168:	7e e1       	ldi	r23, 0x1E	; 30
    916a:	45 e0       	ldi	r20, 0x05	; 5
    916c:	50 e0       	ldi	r21, 0x00	; 0
    916e:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <strncasecmp_P>
    9172:	89 2b       	or	r24, r25
    9174:	19 f4       	brne	.+6      	; 0x917c <strtod+0x84>
    9176:	8e 01       	movw	r16, r28
    9178:	09 5f       	subi	r16, 0xF9	; 249
    917a:	1f 4f       	sbci	r17, 0xFF	; 255
    917c:	a1 14       	cp	r10, r1
    917e:	b1 04       	cpc	r11, r1
    9180:	19 f0       	breq	.+6      	; 0x9188 <strtod+0x90>
    9182:	f5 01       	movw	r30, r10
    9184:	00 83       	st	Z, r16
    9186:	11 83       	std	Z+1, r17	; 0x01
    9188:	e0 fc       	sbrc	r14, 0
    918a:	04 c0       	rjmp	.+8      	; 0x9194 <strtod+0x9c>
    918c:	70 e0       	ldi	r23, 0x00	; 0
    918e:	90 e0       	ldi	r25, 0x00	; 0
    9190:	80 e8       	ldi	r24, 0x80	; 128
    9192:	14 c0       	rjmp	.+40     	; 0x91bc <strtod+0xc4>
    9194:	70 e0       	ldi	r23, 0x00	; 0
    9196:	90 e0       	ldi	r25, 0x00	; 0
    9198:	80 e8       	ldi	r24, 0x80	; 128
    919a:	6f ef       	ldi	r22, 0xFF	; 255
    919c:	08 c1       	rjmp	.+528    	; 0x93ae <strtod+0x2b6>
    919e:	c8 01       	movw	r24, r16
    91a0:	6a e2       	ldi	r22, 0x2A	; 42
    91a2:	7e e1       	ldi	r23, 0x1E	; 30
    91a4:	43 e0       	ldi	r20, 0x03	; 3
    91a6:	50 e0       	ldi	r21, 0x00	; 0
    91a8:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <strncasecmp_P>
    91ac:	89 2b       	or	r24, r25
    91ae:	69 f4       	brne	.+26     	; 0x91ca <strtod+0xd2>
    91b0:	a1 14       	cp	r10, r1
    91b2:	b1 04       	cpc	r11, r1
    91b4:	29 f4       	brne	.+10     	; 0x91c0 <strtod+0xc8>
    91b6:	70 e0       	ldi	r23, 0x00	; 0
    91b8:	90 e0       	ldi	r25, 0x00	; 0
    91ba:	80 ec       	ldi	r24, 0xC0	; 192
    91bc:	6f e7       	ldi	r22, 0x7F	; 127
    91be:	f7 c0       	rjmp	.+494    	; 0x93ae <strtod+0x2b6>
    91c0:	22 96       	adiw	r28, 0x02	; 2
    91c2:	f5 01       	movw	r30, r10
    91c4:	c0 83       	st	Z, r28
    91c6:	d1 83       	std	Z+1, r29	; 0x01
    91c8:	f6 cf       	rjmp	.-20     	; 0x91b6 <strtod+0xbe>
    91ca:	88 24       	eor	r8, r8
    91cc:	99 24       	eor	r9, r9
    91ce:	40 e0       	ldi	r20, 0x00	; 0
    91d0:	50 e0       	ldi	r21, 0x00	; 0
    91d2:	60 e0       	ldi	r22, 0x00	; 0
    91d4:	70 e0       	ldi	r23, 0x00	; 0
    91d6:	ef 2d       	mov	r30, r15
    91d8:	e0 53       	subi	r30, 0x30	; 48
    91da:	ea 30       	cpi	r30, 0x0A	; 10
    91dc:	a0 f5       	brcc	.+104    	; 0x9246 <strtod+0x14e>
    91de:	f2 e0       	ldi	r31, 0x02	; 2
    91e0:	ef 2a       	or	r14, r31
    91e2:	8e 2d       	mov	r24, r14
    91e4:	90 e0       	ldi	r25, 0x00	; 0
    91e6:	9c 01       	movw	r18, r24
    91e8:	28 70       	andi	r18, 0x08	; 8
    91ea:	30 70       	andi	r19, 0x00	; 0
    91ec:	e2 fe       	sbrs	r14, 2
    91ee:	06 c0       	rjmp	.+12     	; 0x91fc <strtod+0x104>
    91f0:	23 2b       	or	r18, r19
    91f2:	79 f5       	brne	.+94     	; 0x9252 <strtod+0x15a>
    91f4:	08 94       	sec
    91f6:	81 1c       	adc	r8, r1
    91f8:	91 1c       	adc	r9, r1
    91fa:	2b c0       	rjmp	.+86     	; 0x9252 <strtod+0x15a>
    91fc:	23 2b       	or	r18, r19
    91fe:	19 f0       	breq	.+6      	; 0x9206 <strtod+0x10e>
    9200:	08 94       	sec
    9202:	81 08       	sbc	r8, r1
    9204:	91 08       	sbc	r9, r1
    9206:	db 01       	movw	r26, r22
    9208:	ca 01       	movw	r24, r20
    920a:	12 e0       	ldi	r17, 0x02	; 2
    920c:	88 0f       	add	r24, r24
    920e:	99 1f       	adc	r25, r25
    9210:	aa 1f       	adc	r26, r26
    9212:	bb 1f       	adc	r27, r27
    9214:	1a 95       	dec	r17
    9216:	d1 f7       	brne	.-12     	; 0x920c <strtod+0x114>
    9218:	48 0f       	add	r20, r24
    921a:	59 1f       	adc	r21, r25
    921c:	6a 1f       	adc	r22, r26
    921e:	7b 1f       	adc	r23, r27
    9220:	44 0f       	add	r20, r20
    9222:	55 1f       	adc	r21, r21
    9224:	66 1f       	adc	r22, r22
    9226:	77 1f       	adc	r23, r23
    9228:	4e 0f       	add	r20, r30
    922a:	51 1d       	adc	r21, r1
    922c:	61 1d       	adc	r22, r1
    922e:	71 1d       	adc	r23, r1
    9230:	48 39       	cpi	r20, 0x98	; 152
    9232:	29 e9       	ldi	r18, 0x99	; 153
    9234:	52 07       	cpc	r21, r18
    9236:	29 e9       	ldi	r18, 0x99	; 153
    9238:	62 07       	cpc	r22, r18
    923a:	29 e1       	ldi	r18, 0x19	; 25
    923c:	72 07       	cpc	r23, r18
    923e:	48 f0       	brcs	.+18     	; 0x9252 <strtod+0x15a>
    9240:	84 e0       	ldi	r24, 0x04	; 4
    9242:	e8 2a       	or	r14, r24
    9244:	06 c0       	rjmp	.+12     	; 0x9252 <strtod+0x15a>
    9246:	ee 3f       	cpi	r30, 0xFE	; 254
    9248:	31 f4       	brne	.+12     	; 0x9256 <strtod+0x15e>
    924a:	e3 fc       	sbrc	r14, 3
    924c:	39 c0       	rjmp	.+114    	; 0x92c0 <strtod+0x1c8>
    924e:	98 e0       	ldi	r25, 0x08	; 8
    9250:	e9 2a       	or	r14, r25
    9252:	f9 90       	ld	r15, Y+
    9254:	c0 cf       	rjmp	.-128    	; 0x91d6 <strtod+0xde>
    9256:	e5 33       	cpi	r30, 0x35	; 53
    9258:	11 f0       	breq	.+4      	; 0x925e <strtod+0x166>
    925a:	e5 31       	cpi	r30, 0x15	; 21
    925c:	89 f5       	brne	.+98     	; 0x92c0 <strtod+0x1c8>
    925e:	29 91       	ld	r18, Y+
    9260:	2d 32       	cpi	r18, 0x2D	; 45
    9262:	19 f4       	brne	.+6      	; 0x926a <strtod+0x172>
    9264:	e0 e1       	ldi	r30, 0x10	; 16
    9266:	ee 2a       	or	r14, r30
    9268:	05 c0       	rjmp	.+10     	; 0x9274 <strtod+0x17c>
    926a:	2b 32       	cpi	r18, 0x2B	; 43
    926c:	19 f0       	breq	.+6      	; 0x9274 <strtod+0x17c>
    926e:	81 e0       	ldi	r24, 0x01	; 1
    9270:	90 e0       	ldi	r25, 0x00	; 0
    9272:	03 c0       	rjmp	.+6      	; 0x927a <strtod+0x182>
    9274:	29 91       	ld	r18, Y+
    9276:	82 e0       	ldi	r24, 0x02	; 2
    9278:	90 e0       	ldi	r25, 0x00	; 0
    927a:	e2 2f       	mov	r30, r18
    927c:	e0 53       	subi	r30, 0x30	; 48
    927e:	ea 30       	cpi	r30, 0x0A	; 10
    9280:	18 f0       	brcs	.+6      	; 0x9288 <strtod+0x190>
    9282:	c8 1b       	sub	r28, r24
    9284:	d9 0b       	sbc	r29, r25
    9286:	1c c0       	rjmp	.+56     	; 0x92c0 <strtod+0x1c8>
    9288:	20 e0       	ldi	r18, 0x00	; 0
    928a:	30 e0       	ldi	r19, 0x00	; 0
    928c:	fc e0       	ldi	r31, 0x0C	; 12
    928e:	20 38       	cpi	r18, 0x80	; 128
    9290:	3f 07       	cpc	r19, r31
    9292:	5c f4       	brge	.+22     	; 0x92aa <strtod+0x1b2>
    9294:	c9 01       	movw	r24, r18
    9296:	88 0f       	add	r24, r24
    9298:	99 1f       	adc	r25, r25
    929a:	88 0f       	add	r24, r24
    929c:	99 1f       	adc	r25, r25
    929e:	28 0f       	add	r18, r24
    92a0:	39 1f       	adc	r19, r25
    92a2:	22 0f       	add	r18, r18
    92a4:	33 1f       	adc	r19, r19
    92a6:	2e 0f       	add	r18, r30
    92a8:	31 1d       	adc	r19, r1
    92aa:	e9 91       	ld	r30, Y+
    92ac:	e0 53       	subi	r30, 0x30	; 48
    92ae:	ea 30       	cpi	r30, 0x0A	; 10
    92b0:	68 f3       	brcs	.-38     	; 0x928c <strtod+0x194>
    92b2:	e4 fe       	sbrs	r14, 4
    92b4:	03 c0       	rjmp	.+6      	; 0x92bc <strtod+0x1c4>
    92b6:	30 95       	com	r19
    92b8:	21 95       	neg	r18
    92ba:	3f 4f       	sbci	r19, 0xFF	; 255
    92bc:	82 0e       	add	r8, r18
    92be:	93 1e       	adc	r9, r19
    92c0:	ce 2c       	mov	r12, r14
    92c2:	dd 24       	eor	r13, r13
    92c4:	e1 fe       	sbrs	r14, 1
    92c6:	07 c0       	rjmp	.+14     	; 0x92d6 <strtod+0x1de>
    92c8:	a1 14       	cp	r10, r1
    92ca:	b1 04       	cpc	r11, r1
    92cc:	21 f0       	breq	.+8      	; 0x92d6 <strtod+0x1de>
    92ce:	21 97       	sbiw	r28, 0x01	; 1
    92d0:	f5 01       	movw	r30, r10
    92d2:	c0 83       	st	Z, r28
    92d4:	d1 83       	std	Z+1, r29	; 0x01
    92d6:	cb 01       	movw	r24, r22
    92d8:	ba 01       	movw	r22, r20
    92da:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__floatunsisf>
    92de:	7b 01       	movw	r14, r22
    92e0:	8c 01       	movw	r16, r24
    92e2:	f3 e0       	ldi	r31, 0x03	; 3
    92e4:	cf 22       	and	r12, r31
    92e6:	dd 24       	eor	r13, r13
    92e8:	23 e0       	ldi	r18, 0x03	; 3
    92ea:	c2 16       	cp	r12, r18
    92ec:	d1 04       	cpc	r13, r1
    92ee:	21 f4       	brne	.+8      	; 0x92f8 <strtod+0x200>
    92f0:	17 fb       	bst	r17, 7
    92f2:	10 95       	com	r17
    92f4:	17 f9       	bld	r17, 7
    92f6:	10 95       	com	r17
    92f8:	57 01       	movw	r10, r14
    92fa:	68 01       	movw	r12, r16
    92fc:	c8 01       	movw	r24, r16
    92fe:	b7 01       	movw	r22, r14
    9300:	20 e0       	ldi	r18, 0x00	; 0
    9302:	30 e0       	ldi	r19, 0x00	; 0
    9304:	40 e0       	ldi	r20, 0x00	; 0
    9306:	50 e0       	ldi	r21, 0x00	; 0
    9308:	0e 94 71 44 	call	0x88e2	; 0x88e2 <__cmpsf2>
    930c:	88 23       	and	r24, r24
    930e:	09 f4       	brne	.+2      	; 0x9312 <strtod+0x21a>
    9310:	4a c0       	rjmp	.+148    	; 0x93a6 <strtod+0x2ae>
    9312:	97 fe       	sbrs	r9, 7
    9314:	0d c0       	rjmp	.+26     	; 0x9330 <strtod+0x238>
    9316:	21 e4       	ldi	r18, 0x41	; 65
    9318:	e2 2e       	mov	r14, r18
    931a:	2e e1       	ldi	r18, 0x1E	; 30
    931c:	f2 2e       	mov	r15, r18
    931e:	90 94       	com	r9
    9320:	81 94       	neg	r8
    9322:	91 08       	sbc	r9, r1
    9324:	93 94       	inc	r9
    9326:	c0 e2       	ldi	r28, 0x20	; 32
    9328:	d0 e0       	ldi	r29, 0x00	; 0
    932a:	00 e0       	ldi	r16, 0x00	; 0
    932c:	10 e0       	ldi	r17, 0x00	; 0
    932e:	12 c0       	rjmp	.+36     	; 0x9354 <strtod+0x25c>
    9330:	99 e5       	ldi	r25, 0x59	; 89
    9332:	e9 2e       	mov	r14, r25
    9334:	9e e1       	ldi	r25, 0x1E	; 30
    9336:	f9 2e       	mov	r15, r25
    9338:	f6 cf       	rjmp	.-20     	; 0x9326 <strtod+0x22e>
    933a:	f7 01       	movw	r30, r14
    933c:	25 91       	lpm	r18, Z+
    933e:	35 91       	lpm	r19, Z+
    9340:	45 91       	lpm	r20, Z+
    9342:	54 91       	lpm	r21, Z+
    9344:	c6 01       	movw	r24, r12
    9346:	b5 01       	movw	r22, r10
    9348:	0e 94 33 47 	call	0x8e66	; 0x8e66 <__mulsf3>
    934c:	5b 01       	movw	r10, r22
    934e:	6c 01       	movw	r12, r24
    9350:	8c 1a       	sub	r8, r28
    9352:	9d 0a       	sbc	r9, r29
    9354:	8c 16       	cp	r8, r28
    9356:	9d 06       	cpc	r9, r29
    9358:	84 f7       	brge	.-32     	; 0x933a <strtod+0x242>
    935a:	d5 95       	asr	r29
    935c:	c7 95       	ror	r28
    935e:	0f 5f       	subi	r16, 0xFF	; 255
    9360:	1f 4f       	sbci	r17, 0xFF	; 255
    9362:	06 30       	cpi	r16, 0x06	; 6
    9364:	11 05       	cpc	r17, r1
    9366:	29 f0       	breq	.+10     	; 0x9372 <strtod+0x27a>
    9368:	8c ef       	ldi	r24, 0xFC	; 252
    936a:	9f ef       	ldi	r25, 0xFF	; 255
    936c:	e8 0e       	add	r14, r24
    936e:	f9 1e       	adc	r15, r25
    9370:	f1 cf       	rjmp	.-30     	; 0x9354 <strtod+0x25c>
    9372:	c5 01       	movw	r24, r10
    9374:	d6 01       	movw	r26, r12
    9376:	7c 01       	movw	r14, r24
    9378:	8d 01       	movw	r16, r26
    937a:	8c 2d       	mov	r24, r12
    937c:	88 0f       	add	r24, r24
    937e:	8d 2d       	mov	r24, r13
    9380:	88 1f       	adc	r24, r24
    9382:	8f 3f       	cpi	r24, 0xFF	; 255
    9384:	51 f0       	breq	.+20     	; 0x939a <strtod+0x2a2>
    9386:	c6 01       	movw	r24, r12
    9388:	b5 01       	movw	r22, r10
    938a:	20 e0       	ldi	r18, 0x00	; 0
    938c:	30 e0       	ldi	r19, 0x00	; 0
    938e:	40 e0       	ldi	r20, 0x00	; 0
    9390:	50 e0       	ldi	r21, 0x00	; 0
    9392:	0e 94 71 44 	call	0x88e2	; 0x88e2 <__cmpsf2>
    9396:	88 23       	and	r24, r24
    9398:	31 f4       	brne	.+12     	; 0x93a6 <strtod+0x2ae>
    939a:	82 e2       	ldi	r24, 0x22	; 34
    939c:	90 e0       	ldi	r25, 0x00	; 0
    939e:	80 93 6d 25 	sts	0x256D, r24
    93a2:	90 93 6e 25 	sts	0x256E, r25
    93a6:	7e 2d       	mov	r23, r14
    93a8:	9f 2d       	mov	r25, r15
    93aa:	80 2f       	mov	r24, r16
    93ac:	61 2f       	mov	r22, r17
    93ae:	27 2f       	mov	r18, r23
    93b0:	39 2f       	mov	r19, r25
    93b2:	48 2f       	mov	r20, r24
    93b4:	56 2f       	mov	r21, r22
    93b6:	b9 01       	movw	r22, r18
    93b8:	ca 01       	movw	r24, r20
    93ba:	df 91       	pop	r29
    93bc:	cf 91       	pop	r28
    93be:	1f 91       	pop	r17
    93c0:	0f 91       	pop	r16
    93c2:	ff 90       	pop	r15
    93c4:	ef 90       	pop	r14
    93c6:	df 90       	pop	r13
    93c8:	cf 90       	pop	r12
    93ca:	bf 90       	pop	r11
    93cc:	af 90       	pop	r10
    93ce:	9f 90       	pop	r9
    93d0:	8f 90       	pop	r8
    93d2:	08 95       	ret

000093d4 <atoi>:
    93d4:	fc 01       	movw	r30, r24
    93d6:	88 27       	eor	r24, r24
    93d8:	99 27       	eor	r25, r25
    93da:	e8 94       	clt
    93dc:	21 91       	ld	r18, Z+
    93de:	20 32       	cpi	r18, 0x20	; 32
    93e0:	e9 f3       	breq	.-6      	; 0x93dc <atoi+0x8>
    93e2:	29 30       	cpi	r18, 0x09	; 9
    93e4:	10 f0       	brcs	.+4      	; 0x93ea <atoi+0x16>
    93e6:	2e 30       	cpi	r18, 0x0E	; 14
    93e8:	c8 f3       	brcs	.-14     	; 0x93dc <atoi+0x8>
    93ea:	2b 32       	cpi	r18, 0x2B	; 43
    93ec:	41 f0       	breq	.+16     	; 0x93fe <atoi+0x2a>
    93ee:	2d 32       	cpi	r18, 0x2D	; 45
    93f0:	39 f4       	brne	.+14     	; 0x9400 <atoi+0x2c>
    93f2:	68 94       	set
    93f4:	04 c0       	rjmp	.+8      	; 0x93fe <atoi+0x2a>
    93f6:	0e 94 16 4b 	call	0x962c	; 0x962c <__mulhi_const_10>
    93fa:	82 0f       	add	r24, r18
    93fc:	91 1d       	adc	r25, r1
    93fe:	21 91       	ld	r18, Z+
    9400:	20 53       	subi	r18, 0x30	; 48
    9402:	2a 30       	cpi	r18, 0x0A	; 10
    9404:	c0 f3       	brcs	.-16     	; 0x93f6 <atoi+0x22>
    9406:	1e f4       	brtc	.+6      	; 0x940e <atoi+0x3a>
    9408:	90 95       	com	r25
    940a:	81 95       	neg	r24
    940c:	9f 4f       	sbci	r25, 0xFF	; 255
    940e:	08 95       	ret

00009410 <__ftoa_engine>:
    9410:	28 30       	cpi	r18, 0x08	; 8
    9412:	08 f0       	brcs	.+2      	; 0x9416 <__ftoa_engine+0x6>
    9414:	27 e0       	ldi	r18, 0x07	; 7
    9416:	33 27       	eor	r19, r19
    9418:	da 01       	movw	r26, r20
    941a:	99 0f       	add	r25, r25
    941c:	31 1d       	adc	r19, r1
    941e:	87 fd       	sbrc	r24, 7
    9420:	91 60       	ori	r25, 0x01	; 1
    9422:	00 96       	adiw	r24, 0x00	; 0
    9424:	61 05       	cpc	r22, r1
    9426:	71 05       	cpc	r23, r1
    9428:	39 f4       	brne	.+14     	; 0x9438 <__ftoa_engine+0x28>
    942a:	32 60       	ori	r19, 0x02	; 2
    942c:	2e 5f       	subi	r18, 0xFE	; 254
    942e:	3d 93       	st	X+, r19
    9430:	30 e3       	ldi	r19, 0x30	; 48
    9432:	2a 95       	dec	r18
    9434:	e1 f7       	brne	.-8      	; 0x942e <__ftoa_engine+0x1e>
    9436:	08 95       	ret
    9438:	9f 3f       	cpi	r25, 0xFF	; 255
    943a:	30 f0       	brcs	.+12     	; 0x9448 <__ftoa_engine+0x38>
    943c:	80 38       	cpi	r24, 0x80	; 128
    943e:	71 05       	cpc	r23, r1
    9440:	61 05       	cpc	r22, r1
    9442:	09 f0       	breq	.+2      	; 0x9446 <__ftoa_engine+0x36>
    9444:	3c 5f       	subi	r19, 0xFC	; 252
    9446:	3c 5f       	subi	r19, 0xFC	; 252
    9448:	3d 93       	st	X+, r19
    944a:	91 30       	cpi	r25, 0x01	; 1
    944c:	08 f0       	brcs	.+2      	; 0x9450 <__ftoa_engine+0x40>
    944e:	80 68       	ori	r24, 0x80	; 128
    9450:	91 1d       	adc	r25, r1
    9452:	df 93       	push	r29
    9454:	cf 93       	push	r28
    9456:	1f 93       	push	r17
    9458:	0f 93       	push	r16
    945a:	ff 92       	push	r15
    945c:	ef 92       	push	r14
    945e:	19 2f       	mov	r17, r25
    9460:	98 7f       	andi	r25, 0xF8	; 248
    9462:	96 95       	lsr	r25
    9464:	e9 2f       	mov	r30, r25
    9466:	96 95       	lsr	r25
    9468:	96 95       	lsr	r25
    946a:	e9 0f       	add	r30, r25
    946c:	ff 27       	eor	r31, r31
    946e:	e9 54       	subi	r30, 0x49	; 73
    9470:	f1 4e       	sbci	r31, 0xE1	; 225
    9472:	99 27       	eor	r25, r25
    9474:	33 27       	eor	r19, r19
    9476:	ee 24       	eor	r14, r14
    9478:	ff 24       	eor	r15, r15
    947a:	a7 01       	movw	r20, r14
    947c:	e7 01       	movw	r28, r14
    947e:	05 90       	lpm	r0, Z+
    9480:	08 94       	sec
    9482:	07 94       	ror	r0
    9484:	28 f4       	brcc	.+10     	; 0x9490 <__ftoa_engine+0x80>
    9486:	36 0f       	add	r19, r22
    9488:	e7 1e       	adc	r14, r23
    948a:	f8 1e       	adc	r15, r24
    948c:	49 1f       	adc	r20, r25
    948e:	51 1d       	adc	r21, r1
    9490:	66 0f       	add	r22, r22
    9492:	77 1f       	adc	r23, r23
    9494:	88 1f       	adc	r24, r24
    9496:	99 1f       	adc	r25, r25
    9498:	06 94       	lsr	r0
    949a:	a1 f7       	brne	.-24     	; 0x9484 <__ftoa_engine+0x74>
    949c:	05 90       	lpm	r0, Z+
    949e:	07 94       	ror	r0
    94a0:	28 f4       	brcc	.+10     	; 0x94ac <__ftoa_engine+0x9c>
    94a2:	e7 0e       	add	r14, r23
    94a4:	f8 1e       	adc	r15, r24
    94a6:	49 1f       	adc	r20, r25
    94a8:	56 1f       	adc	r21, r22
    94aa:	c1 1d       	adc	r28, r1
    94ac:	77 0f       	add	r23, r23
    94ae:	88 1f       	adc	r24, r24
    94b0:	99 1f       	adc	r25, r25
    94b2:	66 1f       	adc	r22, r22
    94b4:	06 94       	lsr	r0
    94b6:	a1 f7       	brne	.-24     	; 0x94a0 <__ftoa_engine+0x90>
    94b8:	05 90       	lpm	r0, Z+
    94ba:	07 94       	ror	r0
    94bc:	28 f4       	brcc	.+10     	; 0x94c8 <__ftoa_engine+0xb8>
    94be:	f8 0e       	add	r15, r24
    94c0:	49 1f       	adc	r20, r25
    94c2:	56 1f       	adc	r21, r22
    94c4:	c7 1f       	adc	r28, r23
    94c6:	d1 1d       	adc	r29, r1
    94c8:	88 0f       	add	r24, r24
    94ca:	99 1f       	adc	r25, r25
    94cc:	66 1f       	adc	r22, r22
    94ce:	77 1f       	adc	r23, r23
    94d0:	06 94       	lsr	r0
    94d2:	a1 f7       	brne	.-24     	; 0x94bc <__ftoa_engine+0xac>
    94d4:	05 90       	lpm	r0, Z+
    94d6:	07 94       	ror	r0
    94d8:	20 f4       	brcc	.+8      	; 0x94e2 <__ftoa_engine+0xd2>
    94da:	49 0f       	add	r20, r25
    94dc:	56 1f       	adc	r21, r22
    94de:	c7 1f       	adc	r28, r23
    94e0:	d8 1f       	adc	r29, r24
    94e2:	99 0f       	add	r25, r25
    94e4:	66 1f       	adc	r22, r22
    94e6:	77 1f       	adc	r23, r23
    94e8:	88 1f       	adc	r24, r24
    94ea:	06 94       	lsr	r0
    94ec:	a9 f7       	brne	.-22     	; 0x94d8 <__ftoa_engine+0xc8>
    94ee:	84 91       	lpm	r24, Z+
    94f0:	10 95       	com	r17
    94f2:	17 70       	andi	r17, 0x07	; 7
    94f4:	41 f0       	breq	.+16     	; 0x9506 <__ftoa_engine+0xf6>
    94f6:	d6 95       	lsr	r29
    94f8:	c7 95       	ror	r28
    94fa:	57 95       	ror	r21
    94fc:	47 95       	ror	r20
    94fe:	f7 94       	ror	r15
    9500:	e7 94       	ror	r14
    9502:	1a 95       	dec	r17
    9504:	c1 f7       	brne	.-16     	; 0x94f6 <__ftoa_engine+0xe6>
    9506:	ed e5       	ldi	r30, 0x5D	; 93
    9508:	fe e1       	ldi	r31, 0x1E	; 30
    950a:	68 94       	set
    950c:	15 90       	lpm	r1, Z+
    950e:	15 91       	lpm	r17, Z+
    9510:	35 91       	lpm	r19, Z+
    9512:	65 91       	lpm	r22, Z+
    9514:	95 91       	lpm	r25, Z+
    9516:	05 90       	lpm	r0, Z+
    9518:	7f e2       	ldi	r23, 0x2F	; 47
    951a:	73 95       	inc	r23
    951c:	e1 18       	sub	r14, r1
    951e:	f1 0a       	sbc	r15, r17
    9520:	43 0b       	sbc	r20, r19
    9522:	56 0b       	sbc	r21, r22
    9524:	c9 0b       	sbc	r28, r25
    9526:	d0 09       	sbc	r29, r0
    9528:	c0 f7       	brcc	.-16     	; 0x951a <__ftoa_engine+0x10a>
    952a:	e1 0c       	add	r14, r1
    952c:	f1 1e       	adc	r15, r17
    952e:	43 1f       	adc	r20, r19
    9530:	56 1f       	adc	r21, r22
    9532:	c9 1f       	adc	r28, r25
    9534:	d0 1d       	adc	r29, r0
    9536:	7e f4       	brtc	.+30     	; 0x9556 <__ftoa_engine+0x146>
    9538:	70 33       	cpi	r23, 0x30	; 48
    953a:	11 f4       	brne	.+4      	; 0x9540 <__ftoa_engine+0x130>
    953c:	8a 95       	dec	r24
    953e:	e6 cf       	rjmp	.-52     	; 0x950c <__ftoa_engine+0xfc>
    9540:	e8 94       	clt
    9542:	01 50       	subi	r16, 0x01	; 1
    9544:	30 f0       	brcs	.+12     	; 0x9552 <__ftoa_engine+0x142>
    9546:	08 0f       	add	r16, r24
    9548:	0a f4       	brpl	.+2      	; 0x954c <__ftoa_engine+0x13c>
    954a:	00 27       	eor	r16, r16
    954c:	02 17       	cp	r16, r18
    954e:	08 f4       	brcc	.+2      	; 0x9552 <__ftoa_engine+0x142>
    9550:	20 2f       	mov	r18, r16
    9552:	23 95       	inc	r18
    9554:	02 2f       	mov	r16, r18
    9556:	7a 33       	cpi	r23, 0x3A	; 58
    9558:	28 f0       	brcs	.+10     	; 0x9564 <__ftoa_engine+0x154>
    955a:	79 e3       	ldi	r23, 0x39	; 57
    955c:	7d 93       	st	X+, r23
    955e:	2a 95       	dec	r18
    9560:	e9 f7       	brne	.-6      	; 0x955c <__ftoa_engine+0x14c>
    9562:	10 c0       	rjmp	.+32     	; 0x9584 <__ftoa_engine+0x174>
    9564:	7d 93       	st	X+, r23
    9566:	2a 95       	dec	r18
    9568:	89 f6       	brne	.-94     	; 0x950c <__ftoa_engine+0xfc>
    956a:	06 94       	lsr	r0
    956c:	97 95       	ror	r25
    956e:	67 95       	ror	r22
    9570:	37 95       	ror	r19
    9572:	17 95       	ror	r17
    9574:	17 94       	ror	r1
    9576:	e1 18       	sub	r14, r1
    9578:	f1 0a       	sbc	r15, r17
    957a:	43 0b       	sbc	r20, r19
    957c:	56 0b       	sbc	r21, r22
    957e:	c9 0b       	sbc	r28, r25
    9580:	d0 09       	sbc	r29, r0
    9582:	98 f0       	brcs	.+38     	; 0x95aa <__ftoa_engine+0x19a>
    9584:	23 95       	inc	r18
    9586:	7e 91       	ld	r23, -X
    9588:	73 95       	inc	r23
    958a:	7a 33       	cpi	r23, 0x3A	; 58
    958c:	08 f0       	brcs	.+2      	; 0x9590 <__ftoa_engine+0x180>
    958e:	70 e3       	ldi	r23, 0x30	; 48
    9590:	7c 93       	st	X, r23
    9592:	20 13       	cpse	r18, r16
    9594:	b8 f7       	brcc	.-18     	; 0x9584 <__ftoa_engine+0x174>
    9596:	7e 91       	ld	r23, -X
    9598:	70 61       	ori	r23, 0x10	; 16
    959a:	7d 93       	st	X+, r23
    959c:	30 f0       	brcs	.+12     	; 0x95aa <__ftoa_engine+0x19a>
    959e:	83 95       	inc	r24
    95a0:	71 e3       	ldi	r23, 0x31	; 49
    95a2:	7d 93       	st	X+, r23
    95a4:	70 e3       	ldi	r23, 0x30	; 48
    95a6:	2a 95       	dec	r18
    95a8:	e1 f7       	brne	.-8      	; 0x95a2 <__ftoa_engine+0x192>
    95aa:	11 24       	eor	r1, r1
    95ac:	ef 90       	pop	r14
    95ae:	ff 90       	pop	r15
    95b0:	0f 91       	pop	r16
    95b2:	1f 91       	pop	r17
    95b4:	cf 91       	pop	r28
    95b6:	df 91       	pop	r29
    95b8:	99 27       	eor	r25, r25
    95ba:	87 fd       	sbrc	r24, 7
    95bc:	90 95       	com	r25
    95be:	08 95       	ret

000095c0 <isspace>:
    95c0:	91 11       	cpse	r25, r1
    95c2:	21 c1       	rjmp	.+578    	; 0x9806 <__ctype_isfalse>
    95c4:	80 32       	cpi	r24, 0x20	; 32
    95c6:	19 f0       	breq	.+6      	; 0x95ce <isspace+0xe>
    95c8:	89 50       	subi	r24, 0x09	; 9
    95ca:	85 50       	subi	r24, 0x05	; 5
    95cc:	d0 f7       	brcc	.-12     	; 0x95c2 <isspace+0x2>
    95ce:	08 95       	ret

000095d0 <strncasecmp_P>:
    95d0:	fb 01       	movw	r30, r22
    95d2:	dc 01       	movw	r26, r24
    95d4:	41 50       	subi	r20, 0x01	; 1
    95d6:	50 40       	sbci	r21, 0x00	; 0
    95d8:	88 f0       	brcs	.+34     	; 0x95fc <strncasecmp_P+0x2c>
    95da:	8d 91       	ld	r24, X+
    95dc:	81 34       	cpi	r24, 0x41	; 65
    95de:	1c f0       	brlt	.+6      	; 0x95e6 <strncasecmp_P+0x16>
    95e0:	8b 35       	cpi	r24, 0x5B	; 91
    95e2:	0c f4       	brge	.+2      	; 0x95e6 <strncasecmp_P+0x16>
    95e4:	80 5e       	subi	r24, 0xE0	; 224
    95e6:	65 91       	lpm	r22, Z+
    95e8:	61 34       	cpi	r22, 0x41	; 65
    95ea:	1c f0       	brlt	.+6      	; 0x95f2 <strncasecmp_P+0x22>
    95ec:	6b 35       	cpi	r22, 0x5B	; 91
    95ee:	0c f4       	brge	.+2      	; 0x95f2 <strncasecmp_P+0x22>
    95f0:	60 5e       	subi	r22, 0xE0	; 224
    95f2:	86 1b       	sub	r24, r22
    95f4:	61 11       	cpse	r22, r1
    95f6:	71 f3       	breq	.-36     	; 0x95d4 <strncasecmp_P+0x4>
    95f8:	99 0b       	sbc	r25, r25
    95fa:	08 95       	ret
    95fc:	88 1b       	sub	r24, r24
    95fe:	fc cf       	rjmp	.-8      	; 0x95f8 <strncasecmp_P+0x28>

00009600 <strnlen_P>:
    9600:	fc 01       	movw	r30, r24
    9602:	05 90       	lpm	r0, Z+
    9604:	61 50       	subi	r22, 0x01	; 1
    9606:	70 40       	sbci	r23, 0x00	; 0
    9608:	01 10       	cpse	r0, r1
    960a:	d8 f7       	brcc	.-10     	; 0x9602 <strnlen_P+0x2>
    960c:	80 95       	com	r24
    960e:	90 95       	com	r25
    9610:	8e 0f       	add	r24, r30
    9612:	9f 1f       	adc	r25, r31
    9614:	08 95       	ret

00009616 <strnlen>:
    9616:	fc 01       	movw	r30, r24
    9618:	61 50       	subi	r22, 0x01	; 1
    961a:	70 40       	sbci	r23, 0x00	; 0
    961c:	01 90       	ld	r0, Z+
    961e:	01 10       	cpse	r0, r1
    9620:	d8 f7       	brcc	.-10     	; 0x9618 <strnlen+0x2>
    9622:	80 95       	com	r24
    9624:	90 95       	com	r25
    9626:	8e 0f       	add	r24, r30
    9628:	9f 1f       	adc	r25, r31
    962a:	08 95       	ret

0000962c <__mulhi_const_10>:
    962c:	7a e0       	ldi	r23, 0x0A	; 10
    962e:	97 9f       	mul	r25, r23
    9630:	90 2d       	mov	r25, r0
    9632:	87 9f       	mul	r24, r23
    9634:	80 2d       	mov	r24, r0
    9636:	91 0d       	add	r25, r1
    9638:	11 24       	eor	r1, r1
    963a:	08 95       	ret

0000963c <clearerr>:
    963c:	fc 01       	movw	r30, r24
    963e:	83 81       	ldd	r24, Z+3	; 0x03
    9640:	8f 7c       	andi	r24, 0xCF	; 207
    9642:	83 83       	std	Z+3, r24	; 0x03
    9644:	08 95       	ret

00009646 <fgets>:
    9646:	cf 92       	push	r12
    9648:	df 92       	push	r13
    964a:	ef 92       	push	r14
    964c:	ff 92       	push	r15
    964e:	0f 93       	push	r16
    9650:	1f 93       	push	r17
    9652:	cf 93       	push	r28
    9654:	df 93       	push	r29
    9656:	7c 01       	movw	r14, r24
    9658:	6a 01       	movw	r12, r20
    965a:	fa 01       	movw	r30, r20
    965c:	83 81       	ldd	r24, Z+3	; 0x03
    965e:	80 ff       	sbrs	r24, 0
    9660:	19 c0       	rjmp	.+50     	; 0x9694 <fgets+0x4e>
    9662:	16 16       	cp	r1, r22
    9664:	17 06       	cpc	r1, r23
    9666:	b4 f4       	brge	.+44     	; 0x9694 <fgets+0x4e>
    9668:	eb 01       	movw	r28, r22
    966a:	21 97       	sbiw	r28, 0x01	; 1
    966c:	87 01       	movw	r16, r14
    966e:	0d c0       	rjmp	.+26     	; 0x968a <fgets+0x44>
    9670:	c6 01       	movw	r24, r12
    9672:	0e 94 06 4c 	call	0x980c	; 0x980c <fgetc>
    9676:	ff ef       	ldi	r31, 0xFF	; 255
    9678:	8f 3f       	cpi	r24, 0xFF	; 255
    967a:	9f 07       	cpc	r25, r31
    967c:	59 f0       	breq	.+22     	; 0x9694 <fgets+0x4e>
    967e:	f8 01       	movw	r30, r16
    9680:	81 93       	st	Z+, r24
    9682:	8f 01       	movw	r16, r30
    9684:	0a 97       	sbiw	r24, 0x0a	; 10
    9686:	19 f0       	breq	.+6      	; 0x968e <fgets+0x48>
    9688:	21 97       	sbiw	r28, 0x01	; 1
    968a:	20 97       	sbiw	r28, 0x00	; 0
    968c:	89 f7       	brne	.-30     	; 0x9670 <fgets+0x2a>
    968e:	f8 01       	movw	r30, r16
    9690:	10 82       	st	Z, r1
    9692:	02 c0       	rjmp	.+4      	; 0x9698 <fgets+0x52>
    9694:	ee 24       	eor	r14, r14
    9696:	ff 24       	eor	r15, r15
    9698:	c7 01       	movw	r24, r14
    969a:	df 91       	pop	r29
    969c:	cf 91       	pop	r28
    969e:	1f 91       	pop	r17
    96a0:	0f 91       	pop	r16
    96a2:	ff 90       	pop	r15
    96a4:	ef 90       	pop	r14
    96a6:	df 90       	pop	r13
    96a8:	cf 90       	pop	r12
    96aa:	08 95       	ret

000096ac <fputc>:
    96ac:	0f 93       	push	r16
    96ae:	1f 93       	push	r17
    96b0:	cf 93       	push	r28
    96b2:	df 93       	push	r29
    96b4:	8c 01       	movw	r16, r24
    96b6:	eb 01       	movw	r28, r22
    96b8:	8b 81       	ldd	r24, Y+3	; 0x03
    96ba:	81 ff       	sbrs	r24, 1
    96bc:	1b c0       	rjmp	.+54     	; 0x96f4 <fputc+0x48>
    96be:	82 ff       	sbrs	r24, 2
    96c0:	0d c0       	rjmp	.+26     	; 0x96dc <fputc+0x30>
    96c2:	2e 81       	ldd	r18, Y+6	; 0x06
    96c4:	3f 81       	ldd	r19, Y+7	; 0x07
    96c6:	8c 81       	ldd	r24, Y+4	; 0x04
    96c8:	9d 81       	ldd	r25, Y+5	; 0x05
    96ca:	28 17       	cp	r18, r24
    96cc:	39 07       	cpc	r19, r25
    96ce:	64 f4       	brge	.+24     	; 0x96e8 <fputc+0x3c>
    96d0:	e8 81       	ld	r30, Y
    96d2:	f9 81       	ldd	r31, Y+1	; 0x01
    96d4:	01 93       	st	Z+, r16
    96d6:	e8 83       	st	Y, r30
    96d8:	f9 83       	std	Y+1, r31	; 0x01
    96da:	06 c0       	rjmp	.+12     	; 0x96e8 <fputc+0x3c>
    96dc:	e8 85       	ldd	r30, Y+8	; 0x08
    96de:	f9 85       	ldd	r31, Y+9	; 0x09
    96e0:	80 2f       	mov	r24, r16
    96e2:	19 95       	eicall
    96e4:	89 2b       	or	r24, r25
    96e6:	31 f4       	brne	.+12     	; 0x96f4 <fputc+0x48>
    96e8:	8e 81       	ldd	r24, Y+6	; 0x06
    96ea:	9f 81       	ldd	r25, Y+7	; 0x07
    96ec:	01 96       	adiw	r24, 0x01	; 1
    96ee:	8e 83       	std	Y+6, r24	; 0x06
    96f0:	9f 83       	std	Y+7, r25	; 0x07
    96f2:	02 c0       	rjmp	.+4      	; 0x96f8 <fputc+0x4c>
    96f4:	0f ef       	ldi	r16, 0xFF	; 255
    96f6:	1f ef       	ldi	r17, 0xFF	; 255
    96f8:	c8 01       	movw	r24, r16
    96fa:	df 91       	pop	r29
    96fc:	cf 91       	pop	r28
    96fe:	1f 91       	pop	r17
    9700:	0f 91       	pop	r16
    9702:	08 95       	ret

00009704 <printf_P>:
    9704:	df 93       	push	r29
    9706:	cf 93       	push	r28
    9708:	cd b7       	in	r28, 0x3d	; 61
    970a:	de b7       	in	r29, 0x3e	; 62
    970c:	fe 01       	movw	r30, r28
    970e:	36 96       	adiw	r30, 0x06	; 6
    9710:	61 91       	ld	r22, Z+
    9712:	71 91       	ld	r23, Z+
    9714:	a0 91 69 25 	lds	r26, 0x2569
    9718:	b0 91 6a 25 	lds	r27, 0x256A
    971c:	13 96       	adiw	r26, 0x03	; 3
    971e:	8c 91       	ld	r24, X
    9720:	13 97       	sbiw	r26, 0x03	; 3
    9722:	88 60       	ori	r24, 0x08	; 8
    9724:	13 96       	adiw	r26, 0x03	; 3
    9726:	8c 93       	st	X, r24
    9728:	80 91 69 25 	lds	r24, 0x2569
    972c:	90 91 6a 25 	lds	r25, 0x256A
    9730:	af 01       	movw	r20, r30
    9732:	0e 94 27 40 	call	0x804e	; 0x804e <vfprintf>
    9736:	e0 91 69 25 	lds	r30, 0x2569
    973a:	f0 91 6a 25 	lds	r31, 0x256A
    973e:	23 81       	ldd	r18, Z+3	; 0x03
    9740:	27 7f       	andi	r18, 0xF7	; 247
    9742:	23 83       	std	Z+3, r18	; 0x03
    9744:	cf 91       	pop	r28
    9746:	df 91       	pop	r29
    9748:	08 95       	ret

0000974a <__ultoa_invert>:
    974a:	fa 01       	movw	r30, r20
    974c:	aa 27       	eor	r26, r26
    974e:	28 30       	cpi	r18, 0x08	; 8
    9750:	51 f1       	breq	.+84     	; 0x97a6 <__ultoa_invert+0x5c>
    9752:	20 31       	cpi	r18, 0x10	; 16
    9754:	81 f1       	breq	.+96     	; 0x97b6 <__ultoa_invert+0x6c>
    9756:	e8 94       	clt
    9758:	6f 93       	push	r22
    975a:	6e 7f       	andi	r22, 0xFE	; 254
    975c:	6e 5f       	subi	r22, 0xFE	; 254
    975e:	7f 4f       	sbci	r23, 0xFF	; 255
    9760:	8f 4f       	sbci	r24, 0xFF	; 255
    9762:	9f 4f       	sbci	r25, 0xFF	; 255
    9764:	af 4f       	sbci	r26, 0xFF	; 255
    9766:	b1 e0       	ldi	r27, 0x01	; 1
    9768:	3e d0       	rcall	.+124    	; 0x97e6 <__ultoa_invert+0x9c>
    976a:	b4 e0       	ldi	r27, 0x04	; 4
    976c:	3c d0       	rcall	.+120    	; 0x97e6 <__ultoa_invert+0x9c>
    976e:	67 0f       	add	r22, r23
    9770:	78 1f       	adc	r23, r24
    9772:	89 1f       	adc	r24, r25
    9774:	9a 1f       	adc	r25, r26
    9776:	a1 1d       	adc	r26, r1
    9778:	68 0f       	add	r22, r24
    977a:	79 1f       	adc	r23, r25
    977c:	8a 1f       	adc	r24, r26
    977e:	91 1d       	adc	r25, r1
    9780:	a1 1d       	adc	r26, r1
    9782:	6a 0f       	add	r22, r26
    9784:	71 1d       	adc	r23, r1
    9786:	81 1d       	adc	r24, r1
    9788:	91 1d       	adc	r25, r1
    978a:	a1 1d       	adc	r26, r1
    978c:	20 d0       	rcall	.+64     	; 0x97ce <__ultoa_invert+0x84>
    978e:	09 f4       	brne	.+2      	; 0x9792 <__ultoa_invert+0x48>
    9790:	68 94       	set
    9792:	3f 91       	pop	r19
    9794:	2a e0       	ldi	r18, 0x0A	; 10
    9796:	26 9f       	mul	r18, r22
    9798:	11 24       	eor	r1, r1
    979a:	30 19       	sub	r19, r0
    979c:	30 5d       	subi	r19, 0xD0	; 208
    979e:	31 93       	st	Z+, r19
    97a0:	de f6       	brtc	.-74     	; 0x9758 <__ultoa_invert+0xe>
    97a2:	cf 01       	movw	r24, r30
    97a4:	08 95       	ret
    97a6:	46 2f       	mov	r20, r22
    97a8:	47 70       	andi	r20, 0x07	; 7
    97aa:	40 5d       	subi	r20, 0xD0	; 208
    97ac:	41 93       	st	Z+, r20
    97ae:	b3 e0       	ldi	r27, 0x03	; 3
    97b0:	0f d0       	rcall	.+30     	; 0x97d0 <__ultoa_invert+0x86>
    97b2:	c9 f7       	brne	.-14     	; 0x97a6 <__ultoa_invert+0x5c>
    97b4:	f6 cf       	rjmp	.-20     	; 0x97a2 <__ultoa_invert+0x58>
    97b6:	46 2f       	mov	r20, r22
    97b8:	4f 70       	andi	r20, 0x0F	; 15
    97ba:	40 5d       	subi	r20, 0xD0	; 208
    97bc:	4a 33       	cpi	r20, 0x3A	; 58
    97be:	18 f0       	brcs	.+6      	; 0x97c6 <__ultoa_invert+0x7c>
    97c0:	49 5d       	subi	r20, 0xD9	; 217
    97c2:	31 fd       	sbrc	r19, 1
    97c4:	40 52       	subi	r20, 0x20	; 32
    97c6:	41 93       	st	Z+, r20
    97c8:	02 d0       	rcall	.+4      	; 0x97ce <__ultoa_invert+0x84>
    97ca:	a9 f7       	brne	.-22     	; 0x97b6 <__ultoa_invert+0x6c>
    97cc:	ea cf       	rjmp	.-44     	; 0x97a2 <__ultoa_invert+0x58>
    97ce:	b4 e0       	ldi	r27, 0x04	; 4
    97d0:	a6 95       	lsr	r26
    97d2:	97 95       	ror	r25
    97d4:	87 95       	ror	r24
    97d6:	77 95       	ror	r23
    97d8:	67 95       	ror	r22
    97da:	ba 95       	dec	r27
    97dc:	c9 f7       	brne	.-14     	; 0x97d0 <__ultoa_invert+0x86>
    97de:	00 97       	sbiw	r24, 0x00	; 0
    97e0:	61 05       	cpc	r22, r1
    97e2:	71 05       	cpc	r23, r1
    97e4:	08 95       	ret
    97e6:	9b 01       	movw	r18, r22
    97e8:	ac 01       	movw	r20, r24
    97ea:	0a 2e       	mov	r0, r26
    97ec:	06 94       	lsr	r0
    97ee:	57 95       	ror	r21
    97f0:	47 95       	ror	r20
    97f2:	37 95       	ror	r19
    97f4:	27 95       	ror	r18
    97f6:	ba 95       	dec	r27
    97f8:	c9 f7       	brne	.-14     	; 0x97ec <__ultoa_invert+0xa2>
    97fa:	62 0f       	add	r22, r18
    97fc:	73 1f       	adc	r23, r19
    97fe:	84 1f       	adc	r24, r20
    9800:	95 1f       	adc	r25, r21
    9802:	a0 1d       	adc	r26, r0
    9804:	08 95       	ret

00009806 <__ctype_isfalse>:
    9806:	99 27       	eor	r25, r25
    9808:	88 27       	eor	r24, r24

0000980a <__ctype_istrue>:
    980a:	08 95       	ret

0000980c <fgetc>:
    980c:	cf 93       	push	r28
    980e:	df 93       	push	r29
    9810:	ec 01       	movw	r28, r24
    9812:	4b 81       	ldd	r20, Y+3	; 0x03
    9814:	40 ff       	sbrs	r20, 0
    9816:	1a c0       	rjmp	.+52     	; 0x984c <fgetc+0x40>
    9818:	46 ff       	sbrs	r20, 6
    981a:	0a c0       	rjmp	.+20     	; 0x9830 <fgetc+0x24>
    981c:	4f 7b       	andi	r20, 0xBF	; 191
    981e:	4b 83       	std	Y+3, r20	; 0x03
    9820:	8e 81       	ldd	r24, Y+6	; 0x06
    9822:	9f 81       	ldd	r25, Y+7	; 0x07
    9824:	01 96       	adiw	r24, 0x01	; 1
    9826:	8e 83       	std	Y+6, r24	; 0x06
    9828:	9f 83       	std	Y+7, r25	; 0x07
    982a:	8a 81       	ldd	r24, Y+2	; 0x02
    982c:	28 2f       	mov	r18, r24
    982e:	2b c0       	rjmp	.+86     	; 0x9886 <fgetc+0x7a>
    9830:	42 ff       	sbrs	r20, 2
    9832:	13 c0       	rjmp	.+38     	; 0x985a <fgetc+0x4e>
    9834:	e8 81       	ld	r30, Y
    9836:	f9 81       	ldd	r31, Y+1	; 0x01
    9838:	80 81       	ld	r24, Z
    983a:	28 2f       	mov	r18, r24
    983c:	33 27       	eor	r19, r19
    983e:	27 fd       	sbrc	r18, 7
    9840:	30 95       	com	r19
    9842:	21 15       	cp	r18, r1
    9844:	31 05       	cpc	r19, r1
    9846:	29 f4       	brne	.+10     	; 0x9852 <fgetc+0x46>
    9848:	40 62       	ori	r20, 0x20	; 32
    984a:	4b 83       	std	Y+3, r20	; 0x03
    984c:	2f ef       	ldi	r18, 0xFF	; 255
    984e:	3f ef       	ldi	r19, 0xFF	; 255
    9850:	1b c0       	rjmp	.+54     	; 0x9888 <fgetc+0x7c>
    9852:	31 96       	adiw	r30, 0x01	; 1
    9854:	e8 83       	st	Y, r30
    9856:	f9 83       	std	Y+1, r31	; 0x01
    9858:	11 c0       	rjmp	.+34     	; 0x987c <fgetc+0x70>
    985a:	ea 85       	ldd	r30, Y+10	; 0x0a
    985c:	fb 85       	ldd	r31, Y+11	; 0x0b
    985e:	ce 01       	movw	r24, r28
    9860:	19 95       	eicall
    9862:	9c 01       	movw	r18, r24
    9864:	97 ff       	sbrs	r25, 7
    9866:	0a c0       	rjmp	.+20     	; 0x987c <fgetc+0x70>
    9868:	9b 81       	ldd	r25, Y+3	; 0x03
    986a:	2f 5f       	subi	r18, 0xFF	; 255
    986c:	3f 4f       	sbci	r19, 0xFF	; 255
    986e:	11 f0       	breq	.+4      	; 0x9874 <fgetc+0x68>
    9870:	80 e2       	ldi	r24, 0x20	; 32
    9872:	01 c0       	rjmp	.+2      	; 0x9876 <fgetc+0x6a>
    9874:	80 e1       	ldi	r24, 0x10	; 16
    9876:	89 2b       	or	r24, r25
    9878:	8b 83       	std	Y+3, r24	; 0x03
    987a:	e8 cf       	rjmp	.-48     	; 0x984c <fgetc+0x40>
    987c:	8e 81       	ldd	r24, Y+6	; 0x06
    987e:	9f 81       	ldd	r25, Y+7	; 0x07
    9880:	01 96       	adiw	r24, 0x01	; 1
    9882:	8e 83       	std	Y+6, r24	; 0x06
    9884:	9f 83       	std	Y+7, r25	; 0x07
    9886:	30 e0       	ldi	r19, 0x00	; 0
    9888:	c9 01       	movw	r24, r18
    988a:	df 91       	pop	r29
    988c:	cf 91       	pop	r28
    988e:	08 95       	ret

00009890 <_exit>:
    9890:	f8 94       	cli

00009892 <__stop_program>:
    9892:	ff cf       	rjmp	.-2      	; 0x9892 <__stop_program>
