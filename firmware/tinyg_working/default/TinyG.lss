
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000093b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00802000  000093b4  00009448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000404  0080211c  0080211c  00009564  2**0
                  ALLOC
  3 .debug_aranges 000003e0  00000000  00000000  00009564  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000010e1  00000000  00000000  00009944  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000e6f2  00000000  00000000  0000aa25  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000030e6  00000000  00000000  00019117  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004f38  00000000  00000000  0001c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b40  00000000  00000000  00021138  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000265e  00000000  00000000  00021c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003e09  00000000  00000000  000242d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  000280df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__ctors_end>
       4:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
       8:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
       c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      10:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      14:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      18:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      1c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      20:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      24:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      28:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      2c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      30:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      34:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      38:	0c 94 d3 27 	jmp	0x4fa6	; 0x4fa6 <__vector_14>
      3c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      40:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      44:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      48:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      4c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      50:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      54:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      58:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      5c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      60:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      64:	0c 94 d5 33 	jmp	0x67aa	; 0x67aa <__vector_25>
      68:	0c 94 91 33 	jmp	0x6722	; 0x6722 <__vector_26>
      6c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      70:	0c 94 e7 34 	jmp	0x69ce	; 0x69ce <__vector_28>
      74:	0c 94 83 34 	jmp	0x6906	; 0x6906 <__vector_29>
      78:	0c 94 cd 34 	jmp	0x699a	; 0x699a <__vector_30>
      7c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      80:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      84:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      88:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      8c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      90:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      94:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      98:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      9c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      a0:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      a4:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      a8:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      ac:	0c 94 ce 2f 	jmp	0x5f9c	; 0x5f9c <__vector_43>
      b0:	0c 94 d8 2f 	jmp	0x5fb0	; 0x5fb0 <__vector_44>
      b4:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      b8:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      bc:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__vector_47>
      c0:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      c4:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      c8:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      cc:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      d0:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      d4:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      d8:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      dc:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      e0:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      e4:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      e8:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      ec:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      f0:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      f4:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      f8:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
      fc:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     100:	0c 94 e2 2f 	jmp	0x5fc4	; 0x5fc4 <__vector_64>
     104:	0c 94 ec 2f 	jmp	0x5fd8	; 0x5fd8 <__vector_65>
     108:	0c 94 a6 2f 	jmp	0x5f4c	; 0x5f4c <__vector_66>
     10c:	0c 94 b0 2f 	jmp	0x5f60	; 0x5f60 <__vector_67>
     110:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     114:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     118:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     11c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     120:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     124:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     128:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     12c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     130:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     134:	0c 94 6e 27 	jmp	0x4edc	; 0x4edc <__vector_77>
     138:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     13c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     140:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     144:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     148:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     14c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     150:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     154:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     158:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     15c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     160:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     164:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     168:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     16c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     170:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     174:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     178:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     17c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     180:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     184:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     188:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     18c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     190:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     194:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     198:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     19c:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     1a0:	0c 94 ba 2f 	jmp	0x5f74	; 0x5f74 <__vector_104>
     1a4:	0c 94 c4 2f 	jmp	0x5f88	; 0x5f88 <__vector_105>
     1a8:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     1ac:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     1b0:	0c 94 a4 26 	jmp	0x4d48	; 0x4d48 <__vector_108>
     1b4:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     1b8:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     1bc:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     1c0:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     1c4:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     1c8:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     1cc:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     1d0:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     1d4:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     1d8:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     1dc:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     1e0:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     1e4:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <__c.3932>:
     23b:	25 73 0a 00                                         %s..

0000023f <cfgMsgXaxis>:
     23f:	58 00                                               X.

00000241 <cfgMsgYaxis>:
     241:	59 00                                               Y.

00000243 <cfgMsgZaxis>:
     243:	5a 00                                               Z.

00000245 <cfgMsgAaxis>:
     245:	41 00                                               A.

00000247 <cfgMsgs>:
     247:	3f 02 41 02 43 02 45 02                             ?.A.C.E.

0000024f <configs_P>:
     24f:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25f:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26f:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27f:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28f:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29f:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2af:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bf:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cf:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2df:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2ef:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2ff:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30f:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31f:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32f:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33f:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34f:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35f:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36f:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37f:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38f:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

0000039d <__c.3840>:
     39d:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     3ad:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000003b8 <__c.3837>:
     3b8:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     3c8:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

000003d2 <__c.3834>:
     3d2:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     3e2:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000003ec <__c.3831>:
     3ec:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     3fc:	74 3a 20 25 73 0a 00                                t: %s..

00000403 <__c.3828>:
     403:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     413:	4d 6f 64 65 0a 00                                   Mode..

00000419 <__c.3825>:
     419:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     429:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

00000436 <__c.3757>:
     436:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     446:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     456:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     466:	29 0a 0a 00                                         )...

0000046a <__c.3755>:
     46a:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     47a:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     48a:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

0000049a <__c.3753>:
     49a:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     4aa:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4ba:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004cb <__c.3751>:
     4cb:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     4db:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4eb:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004fc <__c.3749>:
     4fc:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     50c:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     51c:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     52c:	6c 0a 00                                            l..

0000052f <__c.3747>:
     52f:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     53f:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     54f:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     55f:	6e 0a 00                                            n..

00000562 <__c.3745>:
     562:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     572:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     582:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     592:	74 65 70 73 29 0a 00                                teps)..

00000599 <__c.3743>:
     599:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     5a9:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     5b9:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     5c9:	70 0a 00                                            p..

000005cc <__c.3741>:
     5cc:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     5dc:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     5ec:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     5fc:	73 74 65 70 73 29 0a 00                             steps)..

00000604 <__c.3739>:
     604:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     614:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     624:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     634:	73 74 65 70 73 29 0a 00                             steps)..

0000063c <__c.3734>:
     63c:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     64c:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

0000065a <__c.3720>:
     65a:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     66a:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     67a:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000685 <__c.3718>:
     685:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     695:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     6a5:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000006af <__c.3716>:
     6af:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     6bf:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     6cf:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000006d9 <__c.3714>:
     6d9:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     6e9:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     6f9:	73 20 2d 2d 2d 0a 00                                s ---..

00000700 <__c.3712>:
     700:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     710:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     720:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000728 <__c.3686>:
     728:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     738:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     748:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000754 <square_test1>:
     754:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     764:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     774:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     784:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     794:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     7a4:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     7b4:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000007c2 <square_test2>:
     7c2:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     7d2:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     7e2:	78 30 20 79 30 00                                   x0 y0.

000007e8 <square_test10>:
     7e8:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     7f8:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     808:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000814 <circle_test10>:
     814:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     824:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     834:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     844:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     854:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     864:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     874:	30 00                                               0.

00000876 <square_circle_test10>:
     876:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     886:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     896:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     8a6:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     8b6:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     8c6:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     8d6:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     8e6:	31 30 20 79 30 00                                   10 y0.

000008ec <square_circle_test100>:
     8ec:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     8fc:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     90c:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     91c:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     92c:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     93c:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     94c:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     95c:	35 30 20 6a 30 00                                   50 j0.

00000962 <spiral_test5>:
     962:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     972:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     982:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     992:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     9a2:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     9b2:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     9c2:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     9d2:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

000009dc <spiral_test50a>:
     9dc:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     9ec:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

000009fc <dwell_test1>:
     9fc:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     a0c:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     a1c:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     a2c:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     a3c:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     a4c:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     a5c:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     a6c:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     a7c:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     a8c:	20 78 30 00                                          x0.

00000a90 <dwell_test2>:
     a90:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     aa0:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     ab0:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     ac0:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     ad0:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     ae0:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     af0:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     b00:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     b10:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000b1a <dwell_testMax>:
     b1a:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000b24 <g0_test1>:
     b24:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     b34:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000b44 <g0_test2>:
     b44:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     b54:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     b64:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     b74:	79 30 20 7a 30 00                                   y0 z0.

00000b7a <g0_test3>:
     b7a:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     b8a:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     b9a:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000ba8 <radius_arc_test1>:
     ba8:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     bb8:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     bc8:	72 35 30 0a 00                                      r50..

00000bcd <radius_arc_test2>:
     bcd:	67 32 0a 00                                         g2..

00000bd1 <zoetrope>:
     bd1:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     be1:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     bf1:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     c01:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     c11:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     c21:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     c31:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     c41:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     c51:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     c61:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     c71:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     c81:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     c91:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     ca1:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     cb1:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     cc1:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     cd1:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     ce1:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     cf1:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     d01:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     d11:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     d21:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     d31:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     d41:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     d51:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     d61:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     d71:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     d81:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     d91:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     da1:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     db1:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     dc1:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     dd1:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     de1:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     df1:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     e01:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
     e11:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
     e21:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
     e31:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
     e41:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
     e51:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
     e61:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
     e71:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
     e81:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
     e91:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
     ea1:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
     eb1:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
     ec1:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
     ed1:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
     ee1:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
     ef1:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
     f01:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
     f11:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
     f21:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
     f31:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
     f41:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
     f51:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
     f61:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
     f71:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
     f81:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
     f91:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
     fa1:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
     fb1:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
     fc1:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
     fd1:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
     fe1:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
     ff1:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
    1001:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    1011:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    1021:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    1031:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    1041:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    1051:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    1061:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    1071:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    1081:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    1091:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    10a1:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    10b1:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    10c1:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    10d1:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    10e1:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    10f1:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    1101:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    1111:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    1121:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    1131:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    1141:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    1151:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    1161:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    1171:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    1181:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    1191:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    11a1:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    11b1:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    11c1:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    11d1:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    11e1:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    11f1:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    1201:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    1211:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    1221:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    1231:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    1241:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    1251:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    1261:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    1271:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    1281:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    1291:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    12a1:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    12b1:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    12c1:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    12d1:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    12e1:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    12f1:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    1301:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    1311:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    1321:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    1331:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    1341:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    1351:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    1361:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    1371:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    1381:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    1391:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    13a1:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    13b1:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    13c1:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    13d1:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    13e1:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    13f1:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    1401:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    1411:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    1421:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    1431:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    1441:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    1451:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    1461:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    1471:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    1481:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    1491:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    14a1:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    14b1:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    14c1:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    14d1:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    14e1:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    14f1:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    1501:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    1511:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    1521:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    1531:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    1541:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    1551:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    1561:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    1571:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    1581:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

0000158c <contraptor_circle>:
    158c:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    159c:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    15ac:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    15bc:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    15cc:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    15dc:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    15ec:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    15fc:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    160c:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    161c:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    162c:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    163c:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    164c:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    165c:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    166c:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    167c:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    168c:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    169c:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    16ac:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    16bc:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    16cc:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    16dc:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    16ec:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    16fc:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    170c:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    171c:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    172c:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    173c:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    174c:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    175c:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    176c:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    177c:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    178c:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    179c:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    17ac:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    17bc:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    17cc:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    17dc:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    17ec:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    17fc:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    180c:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    181c:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    182c:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    183c:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    184c:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    185c:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    186c:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    187c:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    188c:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    189c:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    18ac:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    18bc:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    18cc:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    18dc:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    18ec:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    18fc:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    190c:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    191c:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    192c:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    193c:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    194c:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    195c:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

0000196c <tgModeStringControl>:
    196c:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001979 <tgModeStringConfig>:
    1979:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001985 <tgModeStringGCode>:
    1985:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

00001991 <tgModeStringDirect>:
    1991:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

0000199e <tgModeStrings>:
    199e:	6c 19 79 19 85 19 91 19                             l.y.....

000019a6 <tgStatusMsg00>:
    19a6:	4f 4b 00                                            OK.

000019a9 <tgStatusMsg01>:
    19a9:	45 52 52 4f 52 00                                   ERROR.

000019af <tgStatusMsg02>:
    19af:	45 41 47 41 49 4e 00                                EAGAIN.

000019b6 <tgStatusMsg03>:
    19b6:	4e 4f 4f 50 00                                      NOOP.

000019bb <tgStatusMsg04>:
    19bb:	45 6e 64 20 6f 66 20 6c 69 6e 65 00                 End of line.

000019c7 <tgStatusMsg05>:
    19c7:	45 6e 64 20 6f 66 20 66 69 6c 65 00                 End of file.

000019d3 <tgStatusMsg06>:
    19d3:	46 69 6c 65 20 6e 6f 74 20 6f 70 65 6e 00           File not open.

000019e1 <tgStatusMsg07>:
    19e1:	4e 6f 20 73 75 63 68 20 64 65 76 69 63 65 00        No such device.

000019f0 <tgStatusMsg08>:
    19f0:	42 75 66 66 65 72 20 65 6d 70 74 79 00              Buffer empty.

000019fd <tgStatusMsg09>:
    19fd:	42 75 66 66 65 72 20 66 75 6c 6c 20 2d 20 66 61     Buffer full - fa
    1a0d:	74 61 6c 00                                         tal.

00001a11 <tgStatusMsg10>:
    1a11:	42 75 66 66 65 72 20 66 75 6c 6c 20 2d 20 6e 6f     Buffer full - no
    1a21:	6e 2d 66 61 74 61 6c 00                             n-fatal.

00001a29 <tgStatusMsg11>:
    1a29:	51 55 49 54 00                                      QUIT.

00001a2e <tgStatusMsg12>:
    1a2e:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 63 6f 6d     Unrecognized com
    1a3e:	6d 61 6e 64 00                                      mand.

00001a43 <tgStatusMsg13>:
    1a43:	45 78 70 65 63 74 65 64 20 63 6f 6d 6d 61 6e 64     Expected command
    1a53:	20 6c 65 74 74 65 72 00                              letter.

00001a5b <tgStatusMsg14>:
    1a5b:	55 6e 73 75 70 70 6f 72 74 65 64 20 73 74 61 74     Unsupported stat
    1a6b:	65 6d 65 6e 74 00                                   ement.

00001a71 <tgStatusMsg15>:
    1a71:	50 61 72 61 6d 65 74 65 72 20 6f 76 65 72 20 72     Parameter over r
    1a81:	61 6e 67 65 00                                      ange.

00001a86 <tgStatusMsg16>:
    1a86:	42 61 64 20 6e 75 6d 62 65 72 20 66 6f 72 6d 61     Bad number forma
    1a96:	74 00                                               t.

00001a98 <tgStatusMsg17>:
    1a98:	46 6c 6f 61 74 69 6e 67 20 70 6f 69 6e 74 20 65     Floating point e
    1aa8:	72 72 6f 72 00                                      rror.

00001aad <tgStatusMsg18>:
    1aad:	4d 6f 74 69 6f 6e 20 63 6f 6e 74 72 6f 6c 20 65     Motion control e
    1abd:	72 72 6f 72 00                                      rror.

00001ac2 <tgStatusMsg19>:
    1ac2:	41 72 63 20 73 70 65 63 69 66 69 63 61 74 69 6f     Arc specificatio
    1ad2:	6e 20 65 72 72 6f 72 00                             n error.

00001ada <tgStatusMsg20>:
    1ada:	5a 65 72 6f 20 6c 65 6e 67 74 68 20 6c 69 6e 65     Zero length line
	...

00001aeb <tgStatusStrings>:
    1aeb:	a6 19 a9 19 af 19 b6 19 bb 19 c7 19 d3 19 e1 19     ................
    1afb:	f0 19 fd 19 11 1a 29 1a 2e 1a 43 1a 5b 1a 71 1a     ......)...C.[.q.
    1b0b:	86 1a 98 1a ad 1a c2 1a da 1a                       ..........

00001b15 <__c.4077>:
    1b15:	25 53 2d 2d 3e 20 25 73 0a 00                       %S--> %s..

00001b1f <__c.3972>:
    1b1f:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1b2f:	69 6c 65 0a 00                                      ile..

00001b34 <__c.4035>:
    1b34:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001b42 <__c.3948>:
    1b42:	62 75 69 6c 64 20 32 30 37 00                       build 207.

00001b4c <__c.3946>:
    1b4c:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1b5c:	25 53 0a 00                                         %S..

00001b60 <bsel>:
    1b60:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

00001b6b <bscale>:
    1b6b:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

00001b76 <readlnFuncs>:
    1b76:	40 32 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31     @2.1.1.1.1.1.1.1
    1b86:	8a 32 fc 31 40 32 fc 31 fc 31 40 32 fc 31 fc 31     .2.1@2.1.1@2.1.1
    1b96:	fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31     .1.1.1.1.1.1.1.1
    1ba6:	fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31     .1.1.1.1.1.1.1.1
    1bb6:	fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31     .1.1.1.1.1.1.1.1
    1bc6:	fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31     .1.1.1.1.1.1.1.1
    1bd6:	fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31     .1.1.1.1.1.1.1.1
    1be6:	fc 31 fc 31 fc 31 73 32 fc 31 fc 31 fc 31 fc 31     .1.1.1s2.1.1.1.1
    1bf6:	fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31     .1.1.1.1.1.1.1.1
    1c06:	fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31     .1.1.1.1.1.1.1.1
    1c16:	fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31     .1.1.1.1.1.1.1.1
    1c26:	fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31     .1.1.1.1.1.1.1.1
    1c36:	fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31     .1.1.1.1.1.1.1.1
    1c46:	fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31     .1.1.1.1.1.1.1.1
    1c56:	fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31     .1.1.1.1.1.1.1.1
    1c66:	fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 fc 31 8a 32     .1.1.1.1.1.1.1.2

00001c76 <getcFuncs>:
    1c76:	33 31 06 31 06 31 06 31 06 31 06 31 06 31 06 31     31.1.1.1.1.1.1.1
    1c86:	88 31 06 31 33 31 06 31 06 31 33 31 06 31 06 31     .1.131.1.131.1.1
    1c96:	06 31 06 31 06 31 06 31 06 31 06 31 06 31 06 31     .1.1.1.1.1.1.1.1
    1ca6:	06 31 06 31 06 31 06 31 06 31 06 31 06 31 06 31     .1.1.1.1.1.1.1.1
    1cb6:	06 31 06 31 06 31 06 31 06 31 06 31 06 31 06 31     .1.1.1.1.1.1.1.1
    1cc6:	06 31 06 31 06 31 06 31 06 31 06 31 06 31 06 31     .1.1.1.1.1.1.1.1
    1cd6:	06 31 06 31 06 31 06 31 06 31 06 31 06 31 06 31     .1.1.1.1.1.1.1.1
    1ce6:	06 31 06 31 06 31 71 31 06 31 06 31 06 31 06 31     .1.1.1q1.1.1.1.1
    1cf6:	06 31 06 31 06 31 06 31 06 31 06 31 06 31 06 31     .1.1.1.1.1.1.1.1
    1d06:	06 31 06 31 06 31 06 31 06 31 06 31 06 31 06 31     .1.1.1.1.1.1.1.1
    1d16:	06 31 06 31 06 31 06 31 06 31 06 31 06 31 06 31     .1.1.1.1.1.1.1.1
    1d26:	06 31 06 31 06 31 06 31 06 31 06 31 06 31 06 31     .1.1.1.1.1.1.1.1
    1d36:	06 31 06 31 06 31 06 31 06 31 06 31 06 31 06 31     .1.1.1.1.1.1.1.1
    1d46:	06 31 06 31 06 31 06 31 06 31 06 31 06 31 06 31     .1.1.1.1.1.1.1.1
    1d56:	06 31 06 31 06 31 06 31 06 31 06 31 06 31 06 31     .1.1.1.1.1.1.1.1
    1d66:	06 31 06 31 06 31 06 31 06 31 06 31 06 31 88 31     .1.1.1.1.1.1.1.1

00001d76 <pstr_inf>:
    1d76:	49 4e 46                                            INF

00001d79 <pstr_inity>:
    1d79:	49 4e 49 54 59                                      INITY

00001d7e <pstr_nan>:
    1d7e:	4e 41 4e                                            NAN

00001d81 <pwr_m10>:
    1d81:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1d91:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001d99 <pwr_p10>:
    1d99:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1da9:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1db9:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1dc9:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1dd9:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1de9:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1df9:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1e09:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1e19:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1e29:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1e39:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1e49:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1e59:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1e69:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1e79:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1e89:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1e99:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1ea9:	3d 27 00                                            ='.

00001eac <__ctors_end>:
    1eac:	11 24       	eor	r1, r1
    1eae:	1f be       	out	0x3f, r1	; 63
    1eb0:	cf ef       	ldi	r28, 0xFF	; 255
    1eb2:	df e5       	ldi	r29, 0x5F	; 95
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	cd bf       	out	0x3d, r28	; 61
    1eb8:	00 e0       	ldi	r16, 0x00	; 0
    1eba:	0c bf       	out	0x3c, r16	; 60

00001ebc <__do_copy_data>:
    1ebc:	11 e2       	ldi	r17, 0x21	; 33
    1ebe:	a0 e0       	ldi	r26, 0x00	; 0
    1ec0:	b0 e2       	ldi	r27, 0x20	; 32
    1ec2:	e4 eb       	ldi	r30, 0xB4	; 180
    1ec4:	f3 e9       	ldi	r31, 0x93	; 147
    1ec6:	00 e0       	ldi	r16, 0x00	; 0
    1ec8:	0b bf       	out	0x3b, r16	; 59
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <__do_copy_data+0x14>
    1ecc:	07 90       	elpm	r0, Z+
    1ece:	0d 92       	st	X+, r0
    1ed0:	ac 31       	cpi	r26, 0x1C	; 28
    1ed2:	b1 07       	cpc	r27, r17
    1ed4:	d9 f7       	brne	.-10     	; 0x1ecc <__do_copy_data+0x10>

00001ed6 <__do_clear_bss>:
    1ed6:	15 e2       	ldi	r17, 0x25	; 37
    1ed8:	ac e1       	ldi	r26, 0x1C	; 28
    1eda:	b1 e2       	ldi	r27, 0x21	; 33
    1edc:	01 c0       	rjmp	.+2      	; 0x1ee0 <.do_clear_bss_start>

00001ede <.do_clear_bss_loop>:
    1ede:	1d 92       	st	X+, r1

00001ee0 <.do_clear_bss_start>:
    1ee0:	a0 32       	cpi	r26, 0x20	; 32
    1ee2:	b1 07       	cpc	r27, r17
    1ee4:	e1 f7       	brne	.-8      	; 0x1ede <.do_clear_bss_loop>
    1ee6:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <main>
    1eea:	0c 94 d8 49 	jmp	0x93b0	; 0x93b0 <_exit>

00001eee <__bad_interrupt>:
    1eee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001ef2 <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1ef2:	f8 94       	cli
	xmega_init();				// xmega setup
    1ef4:	0e 94 b8 1b 	call	0x3770	; 0x3770 <xmega_init>
	xio_init();					// xmega io subsystem
    1ef8:	0e 94 86 29 	call	0x530c	; 0x530c <xio_init>

	cfg_init();					// get config record from eeprom
    1efc:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <cfg_init>
	st_init(); 					// stepper subsystem
    1f00:	0e 94 60 24 	call	0x48c0	; 0x48c0 <st_init>
	ls_init();					// limit switches
    1f04:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <ls_init>
	mv_init();					// move buffers
    1f08:	0e 94 c6 2c 	call	0x598c	; 0x598c <mv_init>
	mc_init();					// motion control subsystem
    1f0c:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <mc_init>
	spindle_init();				// spindle controller
    1f10:	0e 94 44 24 	call	0x4888	; 0x4888 <spindle_init>
	en_init();					// encoders
    1f14:	0e 94 56 1b 	call	0x36ac	; 0x36ac <en_init>
	gc_init();					// gcode-parser
    1f18:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <gc_init>
	dd_init();					// direct drive commands
    1f1c:	0e 94 c2 2c 	call	0x5984	; 0x5984 <dd_init>
	tg_init();					// tinyg parsers
    1f20:	0e 94 cc 2b 	call	0x5798	; 0x5798 <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1f24:	0e 94 46 28 	call	0x508c	; 0x508c <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1f28:	e0 ea       	ldi	r30, 0xA0	; 160
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 91 a2 00 	lds	r24, 0x00A2
    1f30:	81 60       	ori	r24, 0x01	; 1
    1f32:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1f34:	80 91 a2 00 	lds	r24, 0x00A2
    1f38:	82 60       	ori	r24, 0x02	; 2
    1f3a:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1f3c:	80 91 a2 00 	lds	r24, 0x00A2
    1f40:	84 60       	ori	r24, 0x04	; 4
    1f42:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1f44:	78 94       	sei
	xio_queue_RX_string_usb("g0 20\n");
	xio_queue_RX_string_usb("g0 y-50\n");
	xio_queue_RX_string_usb("g0 y100\n");
*/
//	xio_queue_RX_string_usb("(MSGtest message in comment)\n");
	xio_queue_RX_string_usb("g0 x-10 (MSGtest message)\n");
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e2       	ldi	r25, 0x20	; 32
    1f4a:	0e 94 5c 34 	call	0x68b8	; 0x68b8 <xio_queue_RX_string_usb>
	for(;;){
		tg_repeater();		// this node receives on USB and repeats to RS485
	}
#else
	for(;;){
		tg_controller();	// this node executes gcode blocks received via RS485
    1f4e:	0e 94 58 2c 	call	0x58b0	; 0x58b0 <tg_controller>
    1f52:	fd cf       	rjmp	.-6      	; 0x1f4e <main+0x5c>

00001f54 <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1f54:	80 93 2f 21 	sts	0x212F, r24
	gc.plane_axis_1 = axis_1;
    1f58:	60 93 30 21 	sts	0x2130, r22
	gc.plane_axis_2 = axis_2;
    1f5c:	40 93 31 21 	sts	0x2131, r20
}
    1f60:	08 95       	ret

00001f62 <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1f62:	ef 92       	push	r14
    1f64:	ff 92       	push	r15
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	7b 01       	movw	r14, r22
    1f6c:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1f6e:	80 91 2a 21 	lds	r24, 0x212A
    1f72:	88 23       	and	r24, r24
    1f74:	51 f0       	breq	.+20     	; 0x1f8a <to_millimeters+0x28>
    1f76:	c8 01       	movw	r24, r16
    1f78:	b7 01       	movw	r22, r14
    1f7a:	25 e8       	ldi	r18, 0x85	; 133
    1f7c:	32 e4       	ldi	r19, 0x42	; 66
    1f7e:	41 e2       	ldi	r20, 0x21	; 33
    1f80:	5d e3       	ldi	r21, 0x3D	; 61
    1f82:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    1f86:	7b 01       	movw	r14, r22
    1f88:	8c 01       	movw	r16, r24
}
    1f8a:	b7 01       	movw	r22, r14
    1f8c:	c8 01       	movw	r24, r16
    1f8e:	1f 91       	pop	r17
    1f90:	0f 91       	pop	r16
    1f92:	ff 90       	pop	r15
    1f94:	ef 90       	pop	r14
    1f96:	08 95       	ret

00001f98 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    1f98:	88 e5       	ldi	r24, 0x58	; 88
    1f9a:	ec e1       	ldi	r30, 0x1C	; 28
    1f9c:	f1 e2       	ldi	r31, 0x21	; 33
    1f9e:	df 01       	movw	r26, r30
    1fa0:	1d 92       	st	X+, r1
    1fa2:	8a 95       	dec	r24
    1fa4:	e9 f7       	brne	.-6      	; 0x1fa0 <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	a0 e0       	ldi	r26, 0x00	; 0
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	80 93 32 21 	sts	0x2132, r24
    1fb2:	90 93 33 21 	sts	0x2133, r25
    1fb6:	a0 93 34 21 	sts	0x2134, r26
    1fba:	b0 93 35 21 	sts	0x2135, r27
	gc.radius = 0;							// radius value
    1fbe:	80 93 36 21 	sts	0x2136, r24
    1fc2:	90 93 37 21 	sts	0x2137, r25
    1fc6:	a0 93 38 21 	sts	0x2138, r26
    1fca:	b0 93 39 21 	sts	0x2139, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    1fce:	80 91 91 22 	lds	r24, 0x2291
    1fd2:	90 91 92 22 	lds	r25, 0x2292
    1fd6:	a0 91 93 22 	lds	r26, 0x2293
    1fda:	b0 91 94 22 	lds	r27, 0x2294
    1fde:	80 93 3a 21 	sts	0x213A, r24
    1fe2:	90 93 3b 21 	sts	0x213B, r25
    1fe6:	a0 93 3c 21 	sts	0x213C, r26
    1fea:	b0 93 3d 21 	sts	0x213D, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    1fee:	80 91 95 22 	lds	r24, 0x2295
    1ff2:	90 91 96 22 	lds	r25, 0x2296
    1ff6:	a0 91 97 22 	lds	r26, 0x2297
    1ffa:	b0 91 98 22 	lds	r27, 0x2298
    1ffe:	80 93 3e 21 	sts	0x213E, r24
    2002:	90 93 3f 21 	sts	0x213F, r25
    2006:	a0 93 40 21 	sts	0x2140, r26
    200a:	b0 93 41 21 	sts	0x2141, r27

	gc.absolute_mode = TRUE;
    200e:	21 e0       	ldi	r18, 0x01	; 1
    2010:	20 93 2b 21 	sts	0x212B, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	a0 e8       	ldi	r26, 0x80	; 128
    201a:	bf eb       	ldi	r27, 0xBF	; 191
    201c:	80 93 46 21 	sts	0x2146, r24
    2020:	90 93 47 21 	sts	0x2147, r25
    2024:	a0 93 48 21 	sts	0x2148, r26
    2028:	b0 93 49 21 	sts	0x2149, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    202c:	10 92 2c 21 	sts	0x212C, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    2030:	10 92 2e 21 	sts	0x212E, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    2034:	10 92 26 21 	sts	0x2126, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    2038:	10 92 2f 21 	sts	0x212F, r1
	gc.plane_axis_1 = axis_1;
    203c:	20 93 30 21 	sts	0x2130, r18
	gc.plane_axis_2 = axis_2;
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	80 93 31 21 	sts	0x2131, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X, Y, Z);
}
    2046:	08 95       	ret

00002048 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    2048:	4f 92       	push	r4
    204a:	5f 92       	push	r5
    204c:	6f 92       	push	r6
    204e:	7f 92       	push	r7
    2050:	8f 92       	push	r8
    2052:	9f 92       	push	r9
    2054:	af 92       	push	r10
    2056:	bf 92       	push	r11
    2058:	cf 92       	push	r12
    205a:	df 92       	push	r13
    205c:	ef 92       	push	r14
    205e:	ff 92       	push	r15
    2060:	0f 93       	push	r16
    2062:	1f 93       	push	r17
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	0f 92       	push	r0
    206a:	0f 92       	push	r0
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	3b 01       	movw	r6, r22
    2072:	2a 01       	movw	r4, r20
    2074:	49 01       	movw	r8, r18
    2076:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    2078:	d8 01       	movw	r26, r16
    207a:	ed 91       	ld	r30, X+
    207c:	fc 91       	ld	r31, X
    207e:	e2 0f       	add	r30, r18
    2080:	f3 1f       	adc	r31, r19
    2082:	e0 81       	ld	r30, Z
    2084:	ee 23       	and	r30, r30
    2086:	41 f0       	breq	.+16     	; 0x2098 <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    2088:	dc 01       	movw	r26, r24
    208a:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    208c:	e1 54       	subi	r30, 0x41	; 65
    208e:	ea 31       	cpi	r30, 0x1A	; 26
    2090:	30 f0       	brcs	.+12     	; 0x209e <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    2092:	8d e0       	ldi	r24, 0x0D	; 13
    2094:	80 93 1c 21 	sts	0x211C, r24
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	35 c0       	rjmp	.+106    	; 0x2108 <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    209e:	f8 01       	movw	r30, r16
    20a0:	80 81       	ld	r24, Z
    20a2:	91 81       	ldd	r25, Z+1	; 0x01
    20a4:	01 96       	adiw	r24, 0x01	; 1
    20a6:	80 83       	st	Z, r24
    20a8:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    20aa:	89 01       	movw	r16, r18
    20ac:	08 0f       	add	r16, r24
    20ae:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    20b0:	c8 01       	movw	r24, r16
    20b2:	be 01       	movw	r22, r28
    20b4:	6f 5f       	subi	r22, 0xFF	; 255
    20b6:	7f 4f       	sbci	r23, 0xFF	; 255
    20b8:	0e 94 04 46 	call	0x8c08	; 0x8c08 <strtod>
    20bc:	6b 01       	movw	r12, r22
    20be:	7c 01       	movw	r14, r24
    20c0:	d3 01       	movw	r26, r6
    20c2:	6d 93       	st	X+, r22
    20c4:	7d 93       	st	X+, r23
    20c6:	8d 93       	st	X+, r24
    20c8:	9c 93       	st	X, r25
    20ca:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	9a 81       	ldd	r25, Y+2	; 0x02
    20d0:	80 17       	cp	r24, r16
    20d2:	91 07       	cpc	r25, r17
    20d4:	11 f4       	brne	.+4      	; 0x20da <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    20d6:	80 e1       	ldi	r24, 0x10	; 16
    20d8:	dd cf       	rjmp	.-70     	; 0x2094 <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    20da:	88 19       	sub	r24, r8
    20dc:	99 09       	sbc	r25, r9
    20de:	f5 01       	movw	r30, r10
    20e0:	80 83       	st	Z, r24
    20e2:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    20e4:	c7 01       	movw	r24, r14
    20e6:	b6 01       	movw	r22, r12
    20e8:	0e 94 69 45 	call	0x8ad2	; 0x8ad2 <trunc>
    20ec:	9b 01       	movw	r18, r22
    20ee:	ac 01       	movw	r20, r24
    20f0:	c7 01       	movw	r24, r14
    20f2:	b6 01       	movw	r22, r12
    20f4:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    20f8:	d2 01       	movw	r26, r4
    20fa:	6d 93       	st	X+, r22
    20fc:	7d 93       	st	X+, r23
    20fe:	8d 93       	st	X+, r24
    2100:	9c 93       	st	X, r25
    2102:	13 97       	sbiw	r26, 0x03	; 3
    2104:	21 e0       	ldi	r18, 0x01	; 1
    2106:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    2108:	c9 01       	movw	r24, r18
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	1f 91       	pop	r17
    2114:	0f 91       	pop	r16
    2116:	ff 90       	pop	r15
    2118:	ef 90       	pop	r14
    211a:	df 90       	pop	r13
    211c:	cf 90       	pop	r12
    211e:	bf 90       	pop	r11
    2120:	af 90       	pop	r10
    2122:	9f 90       	pop	r9
    2124:	8f 90       	pop	r8
    2126:	7f 90       	pop	r7
    2128:	6f 90       	pop	r6
    212a:	5f 90       	pop	r5
    212c:	4f 90       	pop	r4
    212e:	08 95       	ret

00002130 <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    2130:	af 92       	push	r10
    2132:	bf 92       	push	r11
    2134:	cf 92       	push	r12
    2136:	df 92       	push	r13
    2138:	ef 92       	push	r14
    213a:	ff 92       	push	r15
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	79 01       	movw	r14, r18
    2142:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    2144:	5f 77       	andi	r21, 0x7F	; 127
    2146:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    214a:	0e 94 be 41 	call	0x837c	; 0x837c <atan>
    214e:	5b 01       	movw	r10, r22
    2150:	6c 01       	movw	r12, r24

	if (y>0) {
    2152:	c8 01       	movw	r24, r16
    2154:	b7 01       	movw	r22, r14
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	50 e0       	ldi	r21, 0x00	; 0
    215e:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__gesf2>
    2162:	18 16       	cp	r1, r24
    2164:	cc f0       	brlt	.+50     	; 0x2198 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    2166:	c6 01       	movw	r24, r12
    2168:	b5 01       	movw	r22, r10
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__gesf2>
    2176:	18 16       	cp	r1, r24
    2178:	2c f4       	brge	.+10     	; 0x2184 <theta+0x54>
	    {
			return(M_PI-theta);
    217a:	6b ed       	ldi	r22, 0xDB	; 219
    217c:	7f e0       	ldi	r23, 0x0F	; 15
    217e:	89 e4       	ldi	r24, 0x49	; 73
    2180:	90 e4       	ldi	r25, 0x40	; 64
    2182:	04 c0       	rjmp	.+8      	; 0x218c <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    2184:	6b ed       	ldi	r22, 0xDB	; 219
    2186:	7f e0       	ldi	r23, 0x0F	; 15
    2188:	89 e4       	ldi	r24, 0x49	; 73
    218a:	90 ec       	ldi	r25, 0xC0	; 192
    218c:	a6 01       	movw	r20, r12
    218e:	95 01       	movw	r18, r10
    2190:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    2194:	5b 01       	movw	r10, r22
    2196:	6c 01       	movw	r12, r24
		}
	}
}
    2198:	b5 01       	movw	r22, r10
    219a:	c6 01       	movw	r24, r12
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	ff 90       	pop	r15
    21a2:	ef 90       	pop	r14
    21a4:	df 90       	pop	r13
    21a6:	cf 90       	pop	r12
    21a8:	bf 90       	pop	r11
    21aa:	af 90       	pop	r10
    21ac:	08 95       	ret

000021ae <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    21ae:	2f 92       	push	r2
    21b0:	3f 92       	push	r3
    21b2:	4f 92       	push	r4
    21b4:	5f 92       	push	r5
    21b6:	6f 92       	push	r6
    21b8:	7f 92       	push	r7
    21ba:	8f 92       	push	r8
    21bc:	9f 92       	push	r9
    21be:	af 92       	push	r10
    21c0:	bf 92       	push	r11
    21c2:	cf 92       	push	r12
    21c4:	df 92       	push	r13
    21c6:	ef 92       	push	r14
    21c8:	ff 92       	push	r15
    21ca:	0f 93       	push	r16
    21cc:	1f 93       	push	r17
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	68 97       	sbiw	r28, 0x18	; 24
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    21de:	19 82       	std	Y+1, r1	; 0x01
    21e0:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    21e2:	e6 e5       	ldi	r30, 0x56	; 86
    21e4:	f1 e2       	ldi	r31, 0x21	; 33
    21e6:	8c e0       	ldi	r24, 0x0C	; 12
    21e8:	df 01       	movw	r26, r30
    21ea:	28 2f       	mov	r18, r24
    21ec:	1d 92       	st	X+, r1
    21ee:	2a 95       	dec	r18
    21f0:	e9 f7       	brne	.-6      	; 0x21ec <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    21f2:	3c 96       	adiw	r30, 0x0c	; 12
    21f4:	df 01       	movw	r26, r30
    21f6:	1d 92       	st	X+, r1
    21f8:	8a 95       	dec	r24
    21fa:	e9 f7       	brne	.-6      	; 0x21f6 <gc_execute_block+0x48>

	gc.status = TG_OK;
    21fc:	10 92 1c 21 	sts	0x211C, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    2200:	10 92 2d 21 	sts	0x212D, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2204:	5e 01       	movw	r10, r28
    2206:	08 94       	sec
    2208:	a1 1c       	adc	r10, r1
    220a:	b1 1c       	adc	r11, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    220c:	ff 24       	eor	r15, r15
    220e:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    2210:	be e0       	ldi	r27, 0x0E	; 14
    2212:	cb 2e       	mov	r12, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2214:	a2 e0       	ldi	r26, 0x02	; 2
    2216:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    2218:	77 24       	eor	r7, r7
    221a:	7a 94       	dec	r7

					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    221c:	f3 e0       	ldi	r31, 0x03	; 3
    221e:	df 2e       	mov	r13, r31

					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2220:	e4 e0       	ldi	r30, 0x04	; 4
    2222:	6e 2e       	mov	r6, r30
    2224:	0a c1       	rjmp	.+532    	; 0x243a <gc_execute_block+0x28c>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    2226:	80 91 1d 21 	lds	r24, 0x211D
    222a:	8d 34       	cpi	r24, 0x4D	; 77
    222c:	09 f4       	brne	.+2      	; 0x2230 <gc_execute_block+0x82>
    222e:	be c0       	rjmp	.+380    	; 0x23ac <gc_execute_block+0x1fe>
    2230:	84 35       	cpi	r24, 0x54	; 84
    2232:	09 f4       	brne	.+2      	; 0x2236 <gc_execute_block+0x88>
    2234:	f0 c0       	rjmp	.+480    	; 0x2416 <gc_execute_block+0x268>
    2236:	87 34       	cpi	r24, 0x47	; 71
    2238:	09 f0       	breq	.+2      	; 0x223c <gc_execute_block+0x8e>
    223a:	fb c0       	rjmp	.+502    	; 0x2432 <gc_execute_block+0x284>
			case 'G':
				switch((int)gc.value) {
    223c:	60 91 1e 21 	lds	r22, 0x211E
    2240:	70 91 1f 21 	lds	r23, 0x211F
    2244:	80 91 20 21 	lds	r24, 0x2120
    2248:	90 91 21 21 	lds	r25, 0x2121
    224c:	0e 94 68 42 	call	0x84d0	; 0x84d0 <__fixsfsi>
    2250:	65 31       	cpi	r22, 0x15	; 21
    2252:	71 05       	cpc	r23, r1
    2254:	09 f4       	brne	.+2      	; 0x2258 <gc_execute_block+0xaa>
    2256:	8f c0       	rjmp	.+286    	; 0x2376 <gc_execute_block+0x1c8>
    2258:	66 31       	cpi	r22, 0x16	; 22
    225a:	71 05       	cpc	r23, r1
    225c:	84 f5       	brge	.+96     	; 0x22be <gc_execute_block+0x110>
    225e:	64 30       	cpi	r22, 0x04	; 4
    2260:	71 05       	cpc	r23, r1
    2262:	09 f4       	brne	.+2      	; 0x2266 <gc_execute_block+0xb8>
    2264:	6d c0       	rjmp	.+218    	; 0x2340 <gc_execute_block+0x192>
    2266:	65 30       	cpi	r22, 0x05	; 5
    2268:	71 05       	cpc	r23, r1
    226a:	a4 f4       	brge	.+40     	; 0x2294 <gc_execute_block+0xe6>
    226c:	61 30       	cpi	r22, 0x01	; 1
    226e:	71 05       	cpc	r23, r1
    2270:	09 f4       	brne	.+2      	; 0x2274 <gc_execute_block+0xc6>
    2272:	57 c0       	rjmp	.+174    	; 0x2322 <gc_execute_block+0x174>
    2274:	62 30       	cpi	r22, 0x02	; 2
    2276:	71 05       	cpc	r23, r1
    2278:	24 f4       	brge	.+8      	; 0x2282 <gc_execute_block+0xd4>
    227a:	67 2b       	or	r22, r23
    227c:	09 f4       	brne	.+2      	; 0x2280 <gc_execute_block+0xd2>
    227e:	4c c0       	rjmp	.+152    	; 0x2318 <gc_execute_block+0x16a>
    2280:	c7 c0       	rjmp	.+398    	; 0x2410 <gc_execute_block+0x262>
    2282:	62 30       	cpi	r22, 0x02	; 2
    2284:	71 05       	cpc	r23, r1
    2286:	09 f4       	brne	.+2      	; 0x228a <gc_execute_block+0xdc>
    2288:	51 c0       	rjmp	.+162    	; 0x232c <gc_execute_block+0x17e>
    228a:	63 30       	cpi	r22, 0x03	; 3
    228c:	71 05       	cpc	r23, r1
    228e:	09 f0       	breq	.+2      	; 0x2292 <gc_execute_block+0xe4>
    2290:	bf c0       	rjmp	.+382    	; 0x2410 <gc_execute_block+0x262>
    2292:	51 c0       	rjmp	.+162    	; 0x2336 <gc_execute_block+0x188>
    2294:	62 31       	cpi	r22, 0x12	; 18
    2296:	71 05       	cpc	r23, r1
    2298:	09 f4       	brne	.+2      	; 0x229c <gc_execute_block+0xee>
    229a:	5c c0       	rjmp	.+184    	; 0x2354 <gc_execute_block+0x1a6>
    229c:	63 31       	cpi	r22, 0x13	; 19
    229e:	71 05       	cpc	r23, r1
    22a0:	2c f4       	brge	.+10     	; 0x22ac <gc_execute_block+0xfe>
    22a2:	61 31       	cpi	r22, 0x11	; 17
    22a4:	71 05       	cpc	r23, r1
    22a6:	09 f0       	breq	.+2      	; 0x22aa <gc_execute_block+0xfc>
    22a8:	b3 c0       	rjmp	.+358    	; 0x2410 <gc_execute_block+0x262>
    22aa:	4d c0       	rjmp	.+154    	; 0x2346 <gc_execute_block+0x198>
    22ac:	63 31       	cpi	r22, 0x13	; 19
    22ae:	71 05       	cpc	r23, r1
    22b0:	09 f4       	brne	.+2      	; 0x22b4 <gc_execute_block+0x106>
    22b2:	57 c0       	rjmp	.+174    	; 0x2362 <gc_execute_block+0x1b4>
    22b4:	64 31       	cpi	r22, 0x14	; 20
    22b6:	71 05       	cpc	r23, r1
    22b8:	09 f0       	breq	.+2      	; 0x22bc <gc_execute_block+0x10e>
    22ba:	aa c0       	rjmp	.+340    	; 0x2410 <gc_execute_block+0x262>
    22bc:	59 c0       	rjmp	.+178    	; 0x2370 <gc_execute_block+0x1c2>
    22be:	6a 35       	cpi	r22, 0x5A	; 90
    22c0:	71 05       	cpc	r23, r1
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <gc_execute_block+0x118>
    22c4:	64 c0       	rjmp	.+200    	; 0x238e <gc_execute_block+0x1e0>
    22c6:	6b 35       	cpi	r22, 0x5B	; 91
    22c8:	71 05       	cpc	r23, r1
    22ca:	ac f4       	brge	.+42     	; 0x22f6 <gc_execute_block+0x148>
    22cc:	6e 31       	cpi	r22, 0x1E	; 30
    22ce:	71 05       	cpc	r23, r1
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <gc_execute_block+0x126>
    22d2:	54 c0       	rjmp	.+168    	; 0x237c <gc_execute_block+0x1ce>
    22d4:	6f 31       	cpi	r22, 0x1F	; 31
    22d6:	71 05       	cpc	r23, r1
    22d8:	2c f4       	brge	.+10     	; 0x22e4 <gc_execute_block+0x136>
    22da:	6c 31       	cpi	r22, 0x1C	; 28
    22dc:	71 05       	cpc	r23, r1
    22de:	09 f0       	breq	.+2      	; 0x22e2 <gc_execute_block+0x134>
    22e0:	97 c0       	rjmp	.+302    	; 0x2410 <gc_execute_block+0x262>
    22e2:	4c c0       	rjmp	.+152    	; 0x237c <gc_execute_block+0x1ce>
    22e4:	65 33       	cpi	r22, 0x35	; 53
    22e6:	71 05       	cpc	r23, r1
    22e8:	09 f4       	brne	.+2      	; 0x22ec <gc_execute_block+0x13e>
    22ea:	4b c0       	rjmp	.+150    	; 0x2382 <gc_execute_block+0x1d4>
    22ec:	60 35       	cpi	r22, 0x50	; 80
    22ee:	71 05       	cpc	r23, r1
    22f0:	09 f0       	breq	.+2      	; 0x22f4 <gc_execute_block+0x146>
    22f2:	8e c0       	rjmp	.+284    	; 0x2410 <gc_execute_block+0x262>
    22f4:	49 c0       	rjmp	.+146    	; 0x2388 <gc_execute_block+0x1da>
    22f6:	6c 35       	cpi	r22, 0x5C	; 92
    22f8:	71 05       	cpc	r23, r1
    22fa:	09 f4       	brne	.+2      	; 0x22fe <gc_execute_block+0x150>
    22fc:	4e c0       	rjmp	.+156    	; 0x239a <gc_execute_block+0x1ec>
    22fe:	6c 35       	cpi	r22, 0x5C	; 92
    2300:	71 05       	cpc	r23, r1
    2302:	0c f4       	brge	.+2      	; 0x2306 <gc_execute_block+0x158>
    2304:	47 c0       	rjmp	.+142    	; 0x2394 <gc_execute_block+0x1e6>
    2306:	6d 35       	cpi	r22, 0x5D	; 93
    2308:	71 05       	cpc	r23, r1
    230a:	09 f4       	brne	.+2      	; 0x230e <gc_execute_block+0x160>
    230c:	49 c0       	rjmp	.+146    	; 0x23a0 <gc_execute_block+0x1f2>
    230e:	6e 35       	cpi	r22, 0x5E	; 94
    2310:	71 05       	cpc	r23, r1
    2312:	09 f0       	breq	.+2      	; 0x2316 <gc_execute_block+0x168>
    2314:	7d c0       	rjmp	.+250    	; 0x2410 <gc_execute_block+0x262>
    2316:	47 c0       	rjmp	.+142    	; 0x23a6 <gc_execute_block+0x1f8>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    2318:	f0 92 26 21 	sts	0x2126, r15
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    231c:	10 92 28 21 	sts	0x2128, r1
    2320:	88 c0       	rjmp	.+272    	; 0x2432 <gc_execute_block+0x284>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    2322:	f0 92 26 21 	sts	0x2126, r15
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    2326:	f0 92 28 21 	sts	0x2128, r15
    232a:	83 c0       	rjmp	.+262    	; 0x2432 <gc_execute_block+0x284>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    232c:	f0 92 26 21 	sts	0x2126, r15
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    2330:	e0 92 28 21 	sts	0x2128, r14
    2334:	7e c0       	rjmp	.+252    	; 0x2432 <gc_execute_block+0x284>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    2336:	f0 92 26 21 	sts	0x2126, r15
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    233a:	d0 92 28 21 	sts	0x2128, r13
    233e:	79 c0       	rjmp	.+242    	; 0x2432 <gc_execute_block+0x284>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    2340:	e0 92 26 21 	sts	0x2126, r14
    2344:	76 c0       	rjmp	.+236    	; 0x2432 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    2346:	10 92 2f 21 	sts	0x212F, r1
	gc.plane_axis_1 = axis_1;
    234a:	f0 92 30 21 	sts	0x2130, r15
	gc.plane_axis_2 = axis_2;
    234e:	e0 92 31 21 	sts	0x2131, r14
    2352:	6f c0       	rjmp	.+222    	; 0x2432 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    2354:	10 92 2f 21 	sts	0x212F, r1
	gc.plane_axis_1 = axis_1;
    2358:	e0 92 30 21 	sts	0x2130, r14
	gc.plane_axis_2 = axis_2;
    235c:	f0 92 31 21 	sts	0x2131, r15
    2360:	68 c0       	rjmp	.+208    	; 0x2432 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    2362:	f0 92 2f 21 	sts	0x212F, r15
	gc.plane_axis_1 = axis_1;
    2366:	e0 92 30 21 	sts	0x2130, r14
	gc.plane_axis_2 = axis_2;
    236a:	10 92 31 21 	sts	0x2131, r1
    236e:	61 c0       	rjmp	.+194    	; 0x2432 <gc_execute_block+0x284>

					case 17: { select_plane(X, Y, Z); break; }
					case 18: { select_plane(X, Z, Y); break; }
					case 19: { select_plane(Y, Z, X); break; }

					case 20: { gc.inches_mode = TRUE; break; }
    2370:	f0 92 2a 21 	sts	0x212A, r15
    2374:	5e c0       	rjmp	.+188    	; 0x2432 <gc_execute_block+0x284>
					case 21: { gc.inches_mode = FALSE; break; }
    2376:	10 92 2a 21 	sts	0x212A, r1
    237a:	5b c0       	rjmp	.+182    	; 0x2432 <gc_execute_block+0x284>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    237c:	d0 92 26 21 	sts	0x2126, r13
    2380:	58 c0       	rjmp	.+176    	; 0x2432 <gc_execute_block+0x284>

					case 53: { gc.absolute_override = TRUE; break; }
    2382:	f0 92 2e 21 	sts	0x212E, r15
    2386:	55 c0       	rjmp	.+170    	; 0x2432 <gc_execute_block+0x284>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2388:	60 92 28 21 	sts	0x2128, r6
    238c:	52 c0       	rjmp	.+164    	; 0x2432 <gc_execute_block+0x284>
					case 90: { gc.absolute_mode = TRUE; break; }
    238e:	f0 92 2b 21 	sts	0x212B, r15
    2392:	4f c0       	rjmp	.+158    	; 0x2432 <gc_execute_block+0x284>
					case 91: { gc.absolute_mode = FALSE; break; }
    2394:	10 92 2b 21 	sts	0x212B, r1
    2398:	4c c0       	rjmp	.+152    	; 0x2432 <gc_execute_block+0x284>
					case 92: { gc.set_origin_mode = TRUE; break; }
    239a:	f0 92 2d 21 	sts	0x212D, r15
    239e:	49 c0       	rjmp	.+146    	; 0x2432 <gc_execute_block+0x284>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    23a0:	f0 92 29 21 	sts	0x2129, r15
    23a4:	46 c0       	rjmp	.+140    	; 0x2432 <gc_execute_block+0x284>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    23a6:	10 92 29 21 	sts	0x2129, r1
    23aa:	43 c0       	rjmp	.+134    	; 0x2432 <gc_execute_block+0x284>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    23ac:	60 91 1e 21 	lds	r22, 0x211E
    23b0:	70 91 1f 21 	lds	r23, 0x211F
    23b4:	80 91 20 21 	lds	r24, 0x2120
    23b8:	90 91 21 21 	lds	r25, 0x2121
    23bc:	0e 94 68 42 	call	0x84d0	; 0x84d0 <__fixsfsi>
    23c0:	63 30       	cpi	r22, 0x03	; 3
    23c2:	71 05       	cpc	r23, r1
    23c4:	e1 f0       	breq	.+56     	; 0x23fe <gc_execute_block+0x250>
    23c6:	64 30       	cpi	r22, 0x04	; 4
    23c8:	71 05       	cpc	r23, r1
    23ca:	34 f4       	brge	.+12     	; 0x23d8 <gc_execute_block+0x22a>
    23cc:	77 fd       	sbrc	r23, 7
    23ce:	20 c0       	rjmp	.+64     	; 0x2410 <gc_execute_block+0x262>
    23d0:	62 30       	cpi	r22, 0x02	; 2
    23d2:	71 05       	cpc	r23, r1
    23d4:	74 f0       	brlt	.+28     	; 0x23f2 <gc_execute_block+0x244>
    23d6:	10 c0       	rjmp	.+32     	; 0x23f8 <gc_execute_block+0x24a>
    23d8:	65 30       	cpi	r22, 0x05	; 5
    23da:	71 05       	cpc	r23, r1
    23dc:	b1 f0       	breq	.+44     	; 0x240a <gc_execute_block+0x25c>
    23de:	65 30       	cpi	r22, 0x05	; 5
    23e0:	71 05       	cpc	r23, r1
    23e2:	84 f0       	brlt	.+32     	; 0x2404 <gc_execute_block+0x256>
    23e4:	6e 31       	cpi	r22, 0x1E	; 30
    23e6:	71 05       	cpc	r23, r1
    23e8:	39 f0       	breq	.+14     	; 0x23f8 <gc_execute_block+0x24a>
    23ea:	6c 33       	cpi	r22, 0x3C	; 60
    23ec:	71 05       	cpc	r23, r1
    23ee:	81 f4       	brne	.+32     	; 0x2410 <gc_execute_block+0x262>
    23f0:	03 c0       	rjmp	.+6      	; 0x23f8 <gc_execute_block+0x24a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    23f2:	f0 92 27 21 	sts	0x2127, r15
    23f6:	1d c0       	rjmp	.+58     	; 0x2432 <gc_execute_block+0x284>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    23f8:	e0 92 27 21 	sts	0x2127, r14
    23fc:	1a c0       	rjmp	.+52     	; 0x2432 <gc_execute_block+0x284>
					case 3: gc.spindle_direction = 1; break;
    23fe:	f0 92 6f 21 	sts	0x216F, r15
    2402:	17 c0       	rjmp	.+46     	; 0x2432 <gc_execute_block+0x284>
					case 4: gc.spindle_direction = -1; break;
    2404:	70 92 6f 21 	sts	0x216F, r7
    2408:	14 c0       	rjmp	.+40     	; 0x2432 <gc_execute_block+0x284>
					case 5: gc.spindle_direction = 0; break;
    240a:	10 92 6f 21 	sts	0x216F, r1
    240e:	11 c0       	rjmp	.+34     	; 0x2432 <gc_execute_block+0x284>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    2410:	c0 92 1c 21 	sts	0x211C, r12
    2414:	0e c0       	rjmp	.+28     	; 0x2432 <gc_execute_block+0x284>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    2416:	60 91 1e 21 	lds	r22, 0x211E
    241a:	70 91 1f 21 	lds	r23, 0x211F
    241e:	80 91 20 21 	lds	r24, 0x2120
    2422:	90 91 21 21 	lds	r25, 0x2121
    2426:	0e 94 69 45 	call	0x8ad2	; 0x8ad2 <trunc>
    242a:	0e 94 6d 42 	call	0x84da	; 0x84da <__fixunssfsi>
    242e:	60 93 6e 21 	sts	0x216E, r22
		}
		if(gc.status) {
    2432:	80 91 1c 21 	lds	r24, 0x211C
    2436:	88 23       	and	r24, r24
    2438:	69 f4       	brne	.+26     	; 0x2454 <gc_execute_block+0x2a6>

	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    243a:	8d e1       	ldi	r24, 0x1D	; 29
    243c:	91 e2       	ldi	r25, 0x21	; 33
    243e:	6e e1       	ldi	r22, 0x1E	; 30
    2440:	71 e2       	ldi	r23, 0x21	; 33
    2442:	42 e2       	ldi	r20, 0x22	; 34
    2444:	51 e2       	ldi	r21, 0x21	; 33
    2446:	94 01       	movw	r18, r8
    2448:	85 01       	movw	r16, r10
    244a:	0e 94 24 10 	call	0x2048	; 0x2048 <_gc_next_statement>
    244e:	89 2b       	or	r24, r25
    2450:	09 f0       	breq	.+2      	; 0x2454 <gc_execute_block+0x2a6>
    2452:	e9 ce       	rjmp	.-558    	; 0x2226 <gc_execute_block+0x78>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    2454:	80 91 1c 21 	lds	r24, 0x211C
    2458:	88 23       	and	r24, r24
    245a:	09 f0       	breq	.+2      	; 0x245e <gc_execute_block+0x2b0>
    245c:	99 c3       	rjmp	.+1842   	; 0x2b90 <gc_execute_block+0x9e2>
		return(gc.status); 
	}

	i = 0;
    245e:	19 82       	std	Y+1, r1	; 0x01
    2460:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    2462:	e2 e6       	ldi	r30, 0x62	; 98
    2464:	f1 e2       	ldi	r31, 0x21	; 33
    2466:	8c e0       	ldi	r24, 0x0C	; 12
    2468:	df 01       	movw	r26, r30
    246a:	1d 92       	st	X+, r1
    246c:	8a 95       	dec	r24
    246e:	e9 f7       	brne	.-6      	; 0x246a <gc_execute_block+0x2bc>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    2470:	df 01       	movw	r26, r30
    2472:	1c 97       	sbiw	r26, 0x0c	; 12
    2474:	78 97       	sbiw	r30, 0x18	; 24
    2476:	8c e0       	ldi	r24, 0x0C	; 12
    2478:	01 90       	ld	r0, Z+
    247a:	0d 92       	st	X+, r0
    247c:	81 50       	subi	r24, 0x01	; 1
    247e:	e1 f7       	brne	.-8      	; 0x2478 <gc_execute_block+0x2ca>
    2480:	c6 c0       	rjmp	.+396    	; 0x260e <gc_execute_block+0x460>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2482:	c0 90 1e 21 	lds	r12, 0x211E
    2486:	d0 90 1f 21 	lds	r13, 0x211F
    248a:	e0 90 20 21 	lds	r14, 0x2120
    248e:	f0 90 21 21 	lds	r15, 0x2121
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    2492:	80 91 2a 21 	lds	r24, 0x212A
    2496:	88 23       	and	r24, r24
    2498:	19 f4       	brne	.+6      	; 0x24a0 <gc_execute_block+0x2f2>
    249a:	a7 01       	movw	r20, r14
    249c:	96 01       	movw	r18, r12
    249e:	0a c0       	rjmp	.+20     	; 0x24b4 <gc_execute_block+0x306>
    24a0:	c7 01       	movw	r24, r14
    24a2:	b6 01       	movw	r22, r12
    24a4:	25 e8       	ldi	r18, 0x85	; 133
    24a6:	32 e4       	ldi	r19, 0x42	; 66
    24a8:	41 e2       	ldi	r20, 0x21	; 33
    24aa:	5d e3       	ldi	r21, 0x3D	; 61
    24ac:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    24b0:	9b 01       	movw	r18, r22
    24b2:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    24b4:	20 93 42 21 	sts	0x2142, r18
    24b8:	30 93 43 21 	sts	0x2143, r19
    24bc:	40 93 44 21 	sts	0x2144, r20
    24c0:	50 93 45 21 	sts	0x2145, r21
		switch(gc.letter) {
    24c4:	00 91 1d 21 	lds	r16, 0x211D
    24c8:	00 35       	cpi	r16, 0x50	; 80
    24ca:	09 f4       	brne	.+2      	; 0x24ce <gc_execute_block+0x320>
    24cc:	47 c0       	rjmp	.+142    	; 0x255c <gc_execute_block+0x3ae>
    24ce:	01 35       	cpi	r16, 0x51	; 81
    24d0:	58 f4       	brcc	.+22     	; 0x24e8 <gc_execute_block+0x33a>
    24d2:	06 34       	cpi	r16, 0x46	; 70
    24d4:	c1 f0       	breq	.+48     	; 0x2506 <gc_execute_block+0x358>
    24d6:	06 34       	cpi	r16, 0x46	; 70
    24d8:	08 f4       	brcc	.+2      	; 0x24dc <gc_execute_block+0x32e>
    24da:	9f c0       	rjmp	.+318    	; 0x261a <gc_execute_block+0x46c>
    24dc:	80 2f       	mov	r24, r16
    24de:	89 54       	subi	r24, 0x49	; 73
    24e0:	83 30       	cpi	r24, 0x03	; 3
    24e2:	08 f0       	brcs	.+2      	; 0x24e6 <gc_execute_block+0x338>
    24e4:	9a c0       	rjmp	.+308    	; 0x261a <gc_execute_block+0x46c>
    24e6:	2d c0       	rjmp	.+90     	; 0x2542 <gc_execute_block+0x394>
    24e8:	03 35       	cpi	r16, 0x53	; 83
    24ea:	09 f4       	brne	.+2      	; 0x24ee <gc_execute_block+0x340>
    24ec:	4b c0       	rjmp	.+150    	; 0x2584 <gc_execute_block+0x3d6>
    24ee:	04 35       	cpi	r16, 0x54	; 84
    24f0:	20 f4       	brcc	.+8      	; 0x24fa <gc_execute_block+0x34c>
    24f2:	02 35       	cpi	r16, 0x52	; 82
    24f4:	09 f0       	breq	.+2      	; 0x24f8 <gc_execute_block+0x34a>
    24f6:	91 c0       	rjmp	.+290    	; 0x261a <gc_execute_block+0x46c>
    24f8:	3a c0       	rjmp	.+116    	; 0x256e <gc_execute_block+0x3c0>
    24fa:	80 2f       	mov	r24, r16
    24fc:	88 55       	subi	r24, 0x58	; 88
    24fe:	83 30       	cpi	r24, 0x03	; 3
    2500:	08 f0       	brcs	.+2      	; 0x2504 <gc_execute_block+0x356>
    2502:	8b c0       	rjmp	.+278    	; 0x261a <gc_execute_block+0x46c>
    2504:	48 c0       	rjmp	.+144    	; 0x2596 <gc_execute_block+0x3e8>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    2506:	80 91 29 21 	lds	r24, 0x2129
    250a:	88 23       	and	r24, r24
    250c:	49 f0       	breq	.+18     	; 0x2520 <gc_execute_block+0x372>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    250e:	20 93 46 21 	sts	0x2146, r18
    2512:	30 93 47 21 	sts	0x2147, r19
    2516:	40 93 48 21 	sts	0x2148, r20
    251a:	50 93 49 21 	sts	0x2149, r21
    251e:	7d c0       	rjmp	.+250    	; 0x261a <gc_execute_block+0x46c>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    2520:	ca 01       	movw	r24, r20
    2522:	b9 01       	movw	r22, r18
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e7       	ldi	r20, 0x70	; 112
    252a:	52 e4       	ldi	r21, 0x42	; 66
    252c:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    2530:	60 93 3a 21 	sts	0x213A, r22
    2534:	70 93 3b 21 	sts	0x213B, r23
    2538:	80 93 3c 21 	sts	0x213C, r24
    253c:	90 93 3d 21 	sts	0x213D, r25
    2540:	6c c0       	rjmp	.+216    	; 0x261a <gc_execute_block+0x46c>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    2542:	e0 2f       	mov	r30, r16
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	ee 0f       	add	r30, r30
    2548:	ff 1f       	adc	r31, r31
    254a:	ee 0f       	add	r30, r30
    254c:	ff 1f       	adc	r31, r31
    254e:	e2 5c       	subi	r30, 0xC2	; 194
    2550:	ff 4d       	sbci	r31, 0xDF	; 223
    2552:	20 83       	st	Z, r18
    2554:	31 83       	std	Z+1, r19	; 0x01
    2556:	42 83       	std	Z+2, r20	; 0x02
    2558:	53 83       	std	Z+3, r21	; 0x03
    255a:	5f c0       	rjmp	.+190    	; 0x261a <gc_execute_block+0x46c>
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
    255c:	c0 92 32 21 	sts	0x2132, r12
    2560:	d0 92 33 21 	sts	0x2133, r13
    2564:	e0 92 34 21 	sts	0x2134, r14
    2568:	f0 92 35 21 	sts	0x2135, r15
    256c:	56 c0       	rjmp	.+172    	; 0x261a <gc_execute_block+0x46c>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    256e:	20 93 36 21 	sts	0x2136, r18
    2572:	30 93 37 21 	sts	0x2137, r19
    2576:	40 93 38 21 	sts	0x2138, r20
    257a:	50 93 39 21 	sts	0x2139, r21
    257e:	70 92 2c 21 	sts	0x212C, r7
    2582:	4b c0       	rjmp	.+150    	; 0x261a <gc_execute_block+0x46c>
			case 'S': gc.spindle_speed = gc.value; break;
    2584:	c7 01       	movw	r24, r14
    2586:	b6 01       	movw	r22, r12
    2588:	0e 94 68 42 	call	0x84d0	; 0x84d0 <__fixsfsi>
    258c:	60 93 70 21 	sts	0x2170, r22
    2590:	70 93 71 21 	sts	0x2171, r23
    2594:	42 c0       	rjmp	.+132    	; 0x261a <gc_execute_block+0x46c>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2596:	80 91 2d 21 	lds	r24, 0x212D
    259a:	88 23       	and	r24, r24
    259c:	69 f0       	breq	.+26     	; 0x25b8 <gc_execute_block+0x40a>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    259e:	e0 2f       	mov	r30, r16
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	ee 0f       	add	r30, r30
    25a4:	ff 1f       	adc	r31, r31
    25a6:	ee 0f       	add	r30, r30
    25a8:	ff 1f       	adc	r31, r31
    25aa:	e4 54       	subi	r30, 0x44	; 68
    25ac:	f0 4e       	sbci	r31, 0xE0	; 224
    25ae:	26 a7       	std	Z+46, r18	; 0x2e
    25b0:	37 a7       	std	Z+47, r19	; 0x2f
    25b2:	40 ab       	std	Z+48, r20	; 0x30
    25b4:	51 ab       	std	Z+49, r21	; 0x31
    25b6:	31 c0       	rjmp	.+98     	; 0x261a <gc_execute_block+0x46c>
				} else if (gc.absolute_mode || gc.absolute_override) {
    25b8:	80 91 2b 21 	lds	r24, 0x212B
    25bc:	88 23       	and	r24, r24
    25be:	21 f4       	brne	.+8      	; 0x25c8 <gc_execute_block+0x41a>
    25c0:	80 91 2e 21 	lds	r24, 0x212E
    25c4:	88 23       	and	r24, r24
    25c6:	69 f0       	breq	.+26     	; 0x25e2 <gc_execute_block+0x434>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    25c8:	e0 2f       	mov	r30, r16
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	ee 0f       	add	r30, r30
    25ce:	ff 1f       	adc	r31, r31
    25d0:	ee 0f       	add	r30, r30
    25d2:	ff 1f       	adc	r31, r31
    25d4:	e4 54       	subi	r30, 0x44	; 68
    25d6:	f0 4e       	sbci	r31, 0xE0	; 224
    25d8:	22 af       	std	Z+58, r18	; 0x3a
    25da:	33 af       	std	Z+59, r19	; 0x3b
    25dc:	44 af       	std	Z+60, r20	; 0x3c
    25de:	55 af       	std	Z+61, r21	; 0x3d
    25e0:	1c c0       	rjmp	.+56     	; 0x261a <gc_execute_block+0x46c>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    25e2:	10 e0       	ldi	r17, 0x00	; 0
    25e4:	00 0f       	add	r16, r16
    25e6:	11 1f       	adc	r17, r17
    25e8:	00 0f       	add	r16, r16
    25ea:	11 1f       	adc	r17, r17
    25ec:	04 54       	subi	r16, 0x44	; 68
    25ee:	10 4e       	sbci	r17, 0xE0	; 224
    25f0:	f8 01       	movw	r30, r16
    25f2:	62 ad       	ldd	r22, Z+58	; 0x3a
    25f4:	73 ad       	ldd	r23, Z+59	; 0x3b
    25f6:	84 ad       	ldd	r24, Z+60	; 0x3c
    25f8:	95 ad       	ldd	r25, Z+61	; 0x3d
    25fa:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <__addsf3>
    25fe:	d8 01       	movw	r26, r16
    2600:	da 96       	adiw	r26, 0x3a	; 58
    2602:	6d 93       	st	X+, r22
    2604:	7d 93       	st	X+, r23
    2606:	8d 93       	st	X+, r24
    2608:	9c 93       	st	X, r25
    260a:	dd 97       	sbiw	r26, 0x3d	; 61
    260c:	06 c0       	rjmp	.+12     	; 0x261a <gc_execute_block+0x46c>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    260e:	5e 01       	movw	r10, r28
    2610:	08 94       	sec
    2612:	a1 1c       	adc	r10, r1
    2614:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    2616:	77 24       	eor	r7, r7
    2618:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    261a:	8d e1       	ldi	r24, 0x1D	; 29
    261c:	91 e2       	ldi	r25, 0x21	; 33
    261e:	6e e1       	ldi	r22, 0x1E	; 30
    2620:	71 e2       	ldi	r23, 0x21	; 33
    2622:	42 e2       	ldi	r20, 0x22	; 34
    2624:	51 e2       	ldi	r21, 0x21	; 33
    2626:	94 01       	movw	r18, r8
    2628:	85 01       	movw	r16, r10
    262a:	0e 94 24 10 	call	0x2048	; 0x2048 <_gc_next_statement>
    262e:	89 2b       	or	r24, r25
    2630:	09 f0       	breq	.+2      	; 0x2634 <gc_execute_block+0x486>
    2632:	27 cf       	rjmp	.-434    	; 0x2482 <gc_execute_block+0x2d4>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    2634:	80 91 1c 21 	lds	r24, 0x211C
    2638:	88 23       	and	r24, r24
    263a:	09 f0       	breq	.+2      	; 0x263e <gc_execute_block+0x490>
    263c:	a9 c2       	rjmp	.+1362   	; 0x2b90 <gc_execute_block+0x9e2>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    263e:	80 91 6f 21 	lds	r24, 0x216F
    2642:	88 23       	and	r24, r24
    2644:	71 f0       	breq	.+28     	; 0x2662 <gc_execute_block+0x4b4>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    2646:	40 91 70 21 	lds	r20, 0x2170
    264a:	50 91 71 21 	lds	r21, 0x2171
    264e:	66 27       	eor	r22, r22
    2650:	57 fd       	sbrc	r21, 7
    2652:	60 95       	com	r22
    2654:	76 2f       	mov	r23, r22
    2656:	99 27       	eor	r25, r25
    2658:	87 fd       	sbrc	r24, 7
    265a:	90 95       	com	r25
    265c:	0e 94 4b 24 	call	0x4896	; 0x4896 <spindle_run>
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <gc_execute_block+0x4b8>
	} else {
		spindle_stop();
    2662:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    2666:	80 91 26 21 	lds	r24, 0x2126
    266a:	82 30       	cpi	r24, 0x02	; 2
    266c:	49 f0       	breq	.+18     	; 0x2680 <gc_execute_block+0x4d2>
    266e:	83 30       	cpi	r24, 0x03	; 3
    2670:	21 f0       	breq	.+8      	; 0x267a <gc_execute_block+0x4cc>
    2672:	81 30       	cpi	r24, 0x01	; 1
    2674:	09 f0       	breq	.+2      	; 0x2678 <gc_execute_block+0x4ca>
    2676:	7d c2       	rjmp	.+1274   	; 0x2b72 <gc_execute_block+0x9c4>
    2678:	0e c0       	rjmp	.+28     	; 0x2696 <gc_execute_block+0x4e8>
		case NEXT_ACTION_DEFAULT: {				// nothing to do here
			break;
		}

		case NEXT_ACTION_GO_HOME: { 
			gc.status = mc_go_home(); 
    267a:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <mc_go_home>
    267e:	77 c2       	rjmp	.+1262   	; 0x2b6e <gc_execute_block+0x9c0>
			break;
		}

		case NEXT_ACTION_DWELL: {
			gc.status = mc_dwell(gc.dwell_time); 
    2680:	60 91 32 21 	lds	r22, 0x2132
    2684:	70 91 33 21 	lds	r23, 0x2133
    2688:	80 91 34 21 	lds	r24, 0x2134
    268c:	90 91 35 21 	lds	r25, 0x2135
    2690:	0e 94 36 1c 	call	0x386c	; 0x386c <mc_dwell>
    2694:	6c c2       	rjmp	.+1240   	; 0x2b6e <gc_execute_block+0x9c0>
			break;
		}

		case NEXT_ACTION_MOTION: {
			switch (gc.motion_mode) {
    2696:	b0 91 28 21 	lds	r27, 0x2128
    269a:	b8 8f       	std	Y+24, r27	; 0x18
    269c:	b2 30       	cpi	r27, 0x02	; 2
    269e:	20 f0       	brcs	.+8      	; 0x26a8 <gc_execute_block+0x4fa>
    26a0:	b4 30       	cpi	r27, 0x04	; 4
    26a2:	08 f0       	brcs	.+2      	; 0x26a6 <gc_execute_block+0x4f8>
    26a4:	66 c2       	rjmp	.+1228   	; 0x2b72 <gc_execute_block+0x9c4>
    26a6:	31 c0       	rjmp	.+98     	; 0x270a <gc_execute_block+0x55c>
				case MOTION_MODE_CANCEL: {
					break;
				}

				case MOTION_MODE_RAPID_LINEAR: case MOTION_MODE_LINEAR: {
					gc.status = mc_line(gc.target[X], gc.target[Y], gc.target[Z],
    26a8:	60 91 56 21 	lds	r22, 0x2156
    26ac:	70 91 57 21 	lds	r23, 0x2157
    26b0:	80 91 58 21 	lds	r24, 0x2158
    26b4:	90 91 59 21 	lds	r25, 0x2159
    26b8:	20 91 5a 21 	lds	r18, 0x215A
    26bc:	30 91 5b 21 	lds	r19, 0x215B
    26c0:	40 91 5c 21 	lds	r20, 0x215C
    26c4:	50 91 5d 21 	lds	r21, 0x215D
    26c8:	e0 90 5e 21 	lds	r14, 0x215E
    26cc:	f0 90 5f 21 	lds	r15, 0x215F
    26d0:	00 91 60 21 	lds	r16, 0x2160
    26d4:	10 91 61 21 	lds	r17, 0x2161
    26d8:	80 90 29 21 	lds	r8, 0x2129
    26dc:	88 20       	and	r8, r8
    26de:	49 f0       	breq	.+18     	; 0x26f2 <gc_execute_block+0x544>
    26e0:	a0 90 46 21 	lds	r10, 0x2146
    26e4:	b0 90 47 21 	lds	r11, 0x2147
    26e8:	c0 90 48 21 	lds	r12, 0x2148
    26ec:	d0 90 49 21 	lds	r13, 0x2149
    26f0:	08 c0       	rjmp	.+16     	; 0x2702 <gc_execute_block+0x554>
    26f2:	a0 90 3a 21 	lds	r10, 0x213A
    26f6:	b0 90 3b 21 	lds	r11, 0x213B
    26fa:	c0 90 3c 21 	lds	r12, 0x213C
    26fe:	d0 90 3d 21 	lds	r13, 0x213D
    2702:	99 24       	eor	r9, r9
    2704:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <mc_line>
    2708:	32 c2       	rjmp	.+1124   	; 0x2b6e <gc_execute_block+0x9c0>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    270a:	80 91 2c 21 	lds	r24, 0x212C
    270e:	88 23       	and	r24, r24
    2710:	09 f4       	brne	.+2      	; 0x2714 <gc_execute_block+0x566>
    2712:	ec c0       	rjmp	.+472    	; 0x28ec <gc_execute_block+0x73e>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    2714:	e0 91 2f 21 	lds	r30, 0x212F
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	ee 0f       	add	r30, r30
    271c:	ff 1f       	adc	r31, r31
    271e:	ee 0f       	add	r30, r30
    2720:	ff 1f       	adc	r31, r31
    2722:	e4 5e       	subi	r30, 0xE4	; 228
    2724:	fe 4d       	sbci	r31, 0xDE	; 222
    2726:	62 ad       	ldd	r22, Z+58	; 0x3a
    2728:	73 ad       	ldd	r23, Z+59	; 0x3b
    272a:	84 ad       	ldd	r24, Z+60	; 0x3c
    272c:	95 ad       	ldd	r25, Z+61	; 0x3d
    272e:	26 a5       	ldd	r18, Z+46	; 0x2e
    2730:	37 a5       	ldd	r19, Z+47	; 0x2f
    2732:	40 a9       	ldd	r20, Z+48	; 0x30
    2734:	51 a9       	ldd	r21, Z+49	; 0x31
    2736:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    273a:	6f 83       	std	Y+7, r22	; 0x07
    273c:	78 87       	std	Y+8, r23	; 0x08
    273e:	89 87       	std	Y+9, r24	; 0x09
    2740:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    2742:	e0 91 30 21 	lds	r30, 0x2130
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	ee 0f       	add	r30, r30
    274a:	ff 1f       	adc	r31, r31
    274c:	ee 0f       	add	r30, r30
    274e:	ff 1f       	adc	r31, r31
    2750:	e4 5e       	subi	r30, 0xE4	; 228
    2752:	fe 4d       	sbci	r31, 0xDE	; 222
    2754:	62 ad       	ldd	r22, Z+58	; 0x3a
    2756:	73 ad       	ldd	r23, Z+59	; 0x3b
    2758:	84 ad       	ldd	r24, Z+60	; 0x3c
    275a:	95 ad       	ldd	r25, Z+61	; 0x3d
    275c:	26 a5       	ldd	r18, Z+46	; 0x2e
    275e:	37 a5       	ldd	r19, Z+47	; 0x2f
    2760:	40 a9       	ldd	r20, Z+48	; 0x30
    2762:	51 a9       	ldd	r21, Z+49	; 0x31
    2764:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    2768:	1b 01       	movw	r2, r22
    276a:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    276c:	10 92 62 21 	sts	0x2162, r1
    2770:	10 92 63 21 	sts	0x2163, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    2774:	60 90 36 21 	lds	r6, 0x2136
    2778:	70 90 37 21 	lds	r7, 0x2137
    277c:	80 90 38 21 	lds	r8, 0x2138
    2780:	90 90 39 21 	lds	r9, 0x2139
    2784:	c4 01       	movw	r24, r8
    2786:	b3 01       	movw	r22, r6
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e8       	ldi	r20, 0x80	; 128
    278e:	50 e4       	ldi	r21, 0x40	; 64
    2790:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    2794:	a4 01       	movw	r20, r8
    2796:	93 01       	movw	r18, r6
    2798:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    279c:	5b 01       	movw	r10, r22
    279e:	6c 01       	movw	r12, r24
    27a0:	6f 81       	ldd	r22, Y+7	; 0x07
    27a2:	78 85       	ldd	r23, Y+8	; 0x08
    27a4:	89 85       	ldd	r24, Y+9	; 0x09
    27a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a8:	9b 01       	movw	r18, r22
    27aa:	ac 01       	movw	r20, r24
    27ac:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    27b0:	7b 01       	movw	r14, r22
    27b2:	8c 01       	movw	r16, r24
    27b4:	c2 01       	movw	r24, r4
    27b6:	b1 01       	movw	r22, r2
    27b8:	a2 01       	movw	r20, r4
    27ba:	91 01       	movw	r18, r2
    27bc:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    27c0:	9b 01       	movw	r18, r22
    27c2:	ac 01       	movw	r20, r24
    27c4:	c8 01       	movw	r24, r16
    27c6:	b7 01       	movw	r22, r14
    27c8:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    27cc:	9b 01       	movw	r18, r22
    27ce:	ac 01       	movw	r20, r24
    27d0:	c6 01       	movw	r24, r12
    27d2:	b5 01       	movw	r22, r10
    27d4:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    27d8:	0e 94 28 45 	call	0x8a50	; 0x8a50 <sqrt>
    27dc:	7b 01       	movw	r14, r22
    27de:	8c 01       	movw	r16, r24
    27e0:	6f 81       	ldd	r22, Y+7	; 0x07
    27e2:	78 85       	ldd	r23, Y+8	; 0x08
    27e4:	89 85       	ldd	r24, Y+9	; 0x09
    27e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e8:	a2 01       	movw	r20, r4
    27ea:	91 01       	movw	r18, r2
    27ec:	0e 94 f6 43 	call	0x87ec	; 0x87ec <hypot>
    27f0:	9b 01       	movw	r18, r22
    27f2:	ac 01       	movw	r20, r24
    27f4:	17 fb       	bst	r17, 7
    27f6:	10 95       	com	r17
    27f8:	17 f9       	bld	r17, 7
    27fa:	10 95       	com	r17
    27fc:	c8 01       	movw	r24, r16
    27fe:	b7 01       	movw	r22, r14
    2800:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    2804:	7b 01       	movw	r14, r22
    2806:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    2808:	a8 01       	movw	r20, r16
    280a:	97 01       	movw	r18, r14
    280c:	0e 94 70 45 	call	0x8ae0	; 0x8ae0 <__unordsf2>
    2810:	88 23       	and	r24, r24
    2812:	21 f0       	breq	.+8      	; 0x281c <gc_execute_block+0x66e>
		FAIL(TG_FLOATING_POINT_ERROR); 
    2814:	81 e1       	ldi	r24, 0x11	; 17
    2816:	80 93 1c 21 	sts	0x211C, r24
    281a:	65 c0       	rjmp	.+202    	; 0x28e6 <gc_execute_block+0x738>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    281c:	e8 8d       	ldd	r30, Y+24	; 0x18
    281e:	e3 30       	cpi	r30, 0x03	; 3
    2820:	21 f4       	brne	.+8      	; 0x282a <gc_execute_block+0x67c>
		h_x2_div_d = -h_x2_div_d;
    2822:	17 fb       	bst	r17, 7
    2824:	10 95       	com	r17
    2826:	17 f9       	bld	r17, 7
    2828:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    282a:	c4 01       	movw	r24, r8
    282c:	b3 01       	movw	r22, r6
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e0       	ldi	r20, 0x00	; 0
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <__cmpsf2>
    283a:	88 23       	and	r24, r24
    283c:	24 f4       	brge	.+8      	; 0x2846 <gc_execute_block+0x698>
		h_x2_div_d = -h_x2_div_d; 
    283e:	17 fb       	bst	r17, 7
    2840:	10 95       	com	r17
    2842:	17 f9       	bld	r17, 7
    2844:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    2846:	80 91 2f 21 	lds	r24, 0x212F
    284a:	c8 2e       	mov	r12, r24
    284c:	dd 24       	eor	r13, r13
    284e:	cc 0c       	add	r12, r12
    2850:	dd 1c       	adc	r13, r13
    2852:	cc 0c       	add	r12, r12
    2854:	dd 1c       	adc	r13, r13
    2856:	22 e6       	ldi	r18, 0x62	; 98
    2858:	31 e2       	ldi	r19, 0x21	; 33
    285a:	c2 0e       	add	r12, r18
    285c:	d3 1e       	adc	r13, r19
    285e:	c2 01       	movw	r24, r4
    2860:	b1 01       	movw	r22, r2
    2862:	a8 01       	movw	r20, r16
    2864:	97 01       	movw	r18, r14
    2866:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    286a:	9b 01       	movw	r18, r22
    286c:	ac 01       	movw	r20, r24
    286e:	6f 81       	ldd	r22, Y+7	; 0x07
    2870:	78 85       	ldd	r23, Y+8	; 0x08
    2872:	89 85       	ldd	r24, Y+9	; 0x09
    2874:	9a 85       	ldd	r25, Y+10	; 0x0a
    2876:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	40 e0       	ldi	r20, 0x00	; 0
    2880:	5f e3       	ldi	r21, 0x3F	; 63
    2882:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    2886:	d6 01       	movw	r26, r12
    2888:	6d 93       	st	X+, r22
    288a:	7d 93       	st	X+, r23
    288c:	8d 93       	st	X+, r24
    288e:	9c 93       	st	X, r25
    2890:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    2892:	80 91 30 21 	lds	r24, 0x2130
    2896:	c8 2e       	mov	r12, r24
    2898:	dd 24       	eor	r13, r13
    289a:	cc 0c       	add	r12, r12
    289c:	dd 1c       	adc	r13, r13
    289e:	cc 0c       	add	r12, r12
    28a0:	dd 1c       	adc	r13, r13
    28a2:	e2 e6       	ldi	r30, 0x62	; 98
    28a4:	f1 e2       	ldi	r31, 0x21	; 33
    28a6:	ce 0e       	add	r12, r30
    28a8:	df 1e       	adc	r13, r31
    28aa:	6f 81       	ldd	r22, Y+7	; 0x07
    28ac:	78 85       	ldd	r23, Y+8	; 0x08
    28ae:	89 85       	ldd	r24, Y+9	; 0x09
    28b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b2:	a8 01       	movw	r20, r16
    28b4:	97 01       	movw	r18, r14
    28b6:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    28ba:	9b 01       	movw	r18, r22
    28bc:	ac 01       	movw	r20, r24
    28be:	c2 01       	movw	r24, r4
    28c0:	b1 01       	movw	r22, r2
    28c2:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <__addsf3>
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	5f e3       	ldi	r21, 0x3F	; 63
    28ce:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    28d2:	d6 01       	movw	r26, r12
    28d4:	6d 93       	st	X+, r22
    28d6:	7d 93       	st	X+, r23
    28d8:	8d 93       	st	X+, r24
    28da:	9c 93       	st	X, r25
    28dc:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    28de:	80 91 1c 21 	lds	r24, 0x211C
    28e2:	88 23       	and	r24, r24
    28e4:	19 f0       	breq	.+6      	; 0x28ec <gc_execute_block+0x73e>
			return (gc.status);
    28e6:	80 91 1c 21 	lds	r24, 0x211C
    28ea:	41 c1       	rjmp	.+642    	; 0x2b6e <gc_execute_block+0x9c0>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    28ec:	e0 91 2f 21 	lds	r30, 0x212F
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	ee 0f       	add	r30, r30
    28f4:	ff 1f       	adc	r31, r31
    28f6:	ee 0f       	add	r30, r30
    28f8:	ff 1f       	adc	r31, r31
    28fa:	ee 59       	subi	r30, 0x9E	; 158
    28fc:	fe 4d       	sbci	r31, 0xDE	; 222
    28fe:	60 81       	ld	r22, Z
    2900:	71 81       	ldd	r23, Z+1	; 0x01
    2902:	82 81       	ldd	r24, Z+2	; 0x02
    2904:	93 81       	ldd	r25, Z+3	; 0x03
    2906:	90 58       	subi	r25, 0x80	; 128
    2908:	e0 91 30 21 	lds	r30, 0x2130
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	ee 0f       	add	r30, r30
    2910:	ff 1f       	adc	r31, r31
    2912:	ee 0f       	add	r30, r30
    2914:	ff 1f       	adc	r31, r31
    2916:	ee 59       	subi	r30, 0x9E	; 158
    2918:	fe 4d       	sbci	r31, 0xDE	; 222
    291a:	20 81       	ld	r18, Z
    291c:	31 81       	ldd	r19, Z+1	; 0x01
    291e:	42 81       	ldd	r20, Z+2	; 0x02
    2920:	53 81       	ldd	r21, Z+3	; 0x03
    2922:	50 58       	subi	r21, 0x80	; 128
    2924:	0e 94 98 10 	call	0x2130	; 0x2130 <theta>
    2928:	6f 87       	std	Y+15, r22	; 0x0f
    292a:	78 8b       	std	Y+16, r23	; 0x10
    292c:	89 8b       	std	Y+17, r24	; 0x11
    292e:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    2930:	9b 01       	movw	r18, r22
    2932:	ac 01       	movw	r20, r24
    2934:	0e 94 70 45 	call	0x8ae0	; 0x8ae0 <__unordsf2>
    2938:	88 23       	and	r24, r24
    293a:	09 f0       	breq	.+2      	; 0x293e <gc_execute_block+0x790>
    293c:	54 c0       	rjmp	.+168    	; 0x29e6 <gc_execute_block+0x838>
		FAIL(TG_ARC_SPECIFICATION_ERROR); 
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    293e:	e0 91 2f 21 	lds	r30, 0x212F
    2942:	0e 2f       	mov	r16, r30
    2944:	10 e0       	ldi	r17, 0x00	; 0
    2946:	e0 91 30 21 	lds	r30, 0x2130
    294a:	ce 2e       	mov	r12, r30
    294c:	dd 24       	eor	r13, r13
    294e:	00 0f       	add	r16, r16
    2950:	11 1f       	adc	r17, r17
    2952:	00 0f       	add	r16, r16
    2954:	11 1f       	adc	r17, r17
    2956:	04 5e       	subi	r16, 0xE4	; 228
    2958:	1e 4d       	sbci	r17, 0xDE	; 222
    295a:	f8 01       	movw	r30, r16
    295c:	ea 5b       	subi	r30, 0xBA	; 186
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	d8 01       	movw	r26, r16
    2962:	da 96       	adiw	r26, 0x3a	; 58
    2964:	6d 91       	ld	r22, X+
    2966:	7d 91       	ld	r23, X+
    2968:	8d 91       	ld	r24, X+
    296a:	9c 91       	ld	r25, X
    296c:	dd 97       	sbiw	r26, 0x3d	; 61
    296e:	20 81       	ld	r18, Z
    2970:	31 81       	ldd	r19, Z+1	; 0x01
    2972:	42 81       	ldd	r20, Z+2	; 0x02
    2974:	53 81       	ldd	r21, Z+3	; 0x03
    2976:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    297a:	f8 01       	movw	r30, r16
    297c:	26 a5       	ldd	r18, Z+46	; 0x2e
    297e:	37 a5       	ldd	r19, Z+47	; 0x2f
    2980:	40 a9       	ldd	r20, Z+48	; 0x30
    2982:	51 a9       	ldd	r21, Z+49	; 0x31
    2984:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    2988:	7b 01       	movw	r14, r22
    298a:	8c 01       	movw	r16, r24
    298c:	cc 0c       	add	r12, r12
    298e:	dd 1c       	adc	r13, r13
    2990:	cc 0c       	add	r12, r12
    2992:	dd 1c       	adc	r13, r13
    2994:	2c e1       	ldi	r18, 0x1C	; 28
    2996:	31 e2       	ldi	r19, 0x21	; 33
    2998:	c2 0e       	add	r12, r18
    299a:	d3 1e       	adc	r13, r19
    299c:	f6 01       	movw	r30, r12
    299e:	ea 5b       	subi	r30, 0xBA	; 186
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	d6 01       	movw	r26, r12
    29a4:	da 96       	adiw	r26, 0x3a	; 58
    29a6:	6d 91       	ld	r22, X+
    29a8:	7d 91       	ld	r23, X+
    29aa:	8d 91       	ld	r24, X+
    29ac:	9c 91       	ld	r25, X
    29ae:	dd 97       	sbiw	r26, 0x3d	; 61
    29b0:	20 81       	ld	r18, Z
    29b2:	31 81       	ldd	r19, Z+1	; 0x01
    29b4:	42 81       	ldd	r20, Z+2	; 0x02
    29b6:	53 81       	ldd	r21, Z+3	; 0x03
    29b8:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    29bc:	f6 01       	movw	r30, r12
    29be:	26 a5       	ldd	r18, Z+46	; 0x2e
    29c0:	37 a5       	ldd	r19, Z+47	; 0x2f
    29c2:	40 a9       	ldd	r20, Z+48	; 0x30
    29c4:	51 a9       	ldd	r21, Z+49	; 0x31
    29c6:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    29ca:	9b 01       	movw	r18, r22
    29cc:	ac 01       	movw	r20, r24
    29ce:	c8 01       	movw	r24, r16
    29d0:	b7 01       	movw	r22, r14
    29d2:	0e 94 98 10 	call	0x2130	; 0x2130 <theta>
    29d6:	7b 01       	movw	r14, r22
    29d8:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    29da:	a8 01       	movw	r20, r16
    29dc:	97 01       	movw	r18, r14
    29de:	0e 94 70 45 	call	0x8ae0	; 0x8ae0 <__unordsf2>
    29e2:	88 23       	and	r24, r24
    29e4:	19 f0       	breq	.+6      	; 0x29ec <gc_execute_block+0x83e>
		FAIL(TG_ARC_SPECIFICATION_ERROR); 
    29e6:	83 e1       	ldi	r24, 0x13	; 19
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	c1 c0       	rjmp	.+386    	; 0x2b6e <gc_execute_block+0x9c0>
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    29ec:	c8 01       	movw	r24, r16
    29ee:	b7 01       	movw	r22, r14
    29f0:	2f 85       	ldd	r18, Y+15	; 0x0f
    29f2:	38 89       	ldd	r19, Y+16	; 0x10
    29f4:	49 89       	ldd	r20, Y+17	; 0x11
    29f6:	5a 89       	ldd	r21, Y+18	; 0x12
    29f8:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <__cmpsf2>
    29fc:	88 23       	and	r24, r24
    29fe:	54 f4       	brge	.+20     	; 0x2a14 <gc_execute_block+0x866>
		theta_end += 2*M_PI;
    2a00:	c8 01       	movw	r24, r16
    2a02:	b7 01       	movw	r22, r14
    2a04:	2b ed       	ldi	r18, 0xDB	; 219
    2a06:	3f e0       	ldi	r19, 0x0F	; 15
    2a08:	49 ec       	ldi	r20, 0xC9	; 201
    2a0a:	50 e4       	ldi	r21, 0x40	; 64
    2a0c:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <__addsf3>
    2a10:	7b 01       	movw	r14, r22
    2a12:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    2a14:	c8 01       	movw	r24, r16
    2a16:	b7 01       	movw	r22, r14
    2a18:	2f 85       	ldd	r18, Y+15	; 0x0f
    2a1a:	38 89       	ldd	r19, Y+16	; 0x10
    2a1c:	49 89       	ldd	r20, Y+17	; 0x11
    2a1e:	5a 89       	ldd	r21, Y+18	; 0x12
    2a20:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    2a24:	6b 87       	std	Y+11, r22	; 0x0b
    2a26:	7c 87       	std	Y+12, r23	; 0x0c
    2a28:	8d 87       	std	Y+13, r24	; 0x0d
    2a2a:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2a2c:	80 91 28 21 	lds	r24, 0x2128
    2a30:	83 30       	cpi	r24, 0x03	; 3
    2a32:	71 f4       	brne	.+28     	; 0x2a50 <gc_execute_block+0x8a2>
		angular_travel = angular_travel - 2*M_PI;
    2a34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a3c:	2b ed       	ldi	r18, 0xDB	; 219
    2a3e:	3f e0       	ldi	r19, 0x0F	; 15
    2a40:	49 ec       	ldi	r20, 0xC9	; 201
    2a42:	50 e4       	ldi	r21, 0x40	; 64
    2a44:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    2a48:	6b 87       	std	Y+11, r22	; 0x0b
    2a4a:	7c 87       	std	Y+12, r23	; 0x0c
    2a4c:	8d 87       	std	Y+13, r24	; 0x0d
    2a4e:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2a50:	80 91 2f 21 	lds	r24, 0x212F
    2a54:	28 2f       	mov	r18, r24
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	2d 83       	std	Y+5, r18	; 0x05
    2a5a:	3e 83       	std	Y+6, r19	; 0x06
    2a5c:	f9 01       	movw	r30, r18
    2a5e:	ee 0f       	add	r30, r30
    2a60:	ff 1f       	adc	r31, r31
    2a62:	ee 0f       	add	r30, r30
    2a64:	ff 1f       	adc	r31, r31
    2a66:	ee 59       	subi	r30, 0x9E	; 158
    2a68:	fe 4d       	sbci	r31, 0xDE	; 222
    2a6a:	e0 80       	ld	r14, Z
    2a6c:	f1 80       	ldd	r15, Z+1	; 0x01
    2a6e:	02 81       	ldd	r16, Z+2	; 0x02
    2a70:	13 81       	ldd	r17, Z+3	; 0x03
    2a72:	80 91 30 21 	lds	r24, 0x2130
    2a76:	a8 2f       	mov	r26, r24
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	ab 83       	std	Y+3, r26	; 0x03
    2a7c:	bc 83       	std	Y+4, r27	; 0x04
    2a7e:	fd 01       	movw	r30, r26
    2a80:	ee 0f       	add	r30, r30
    2a82:	ff 1f       	adc	r31, r31
    2a84:	ee 0f       	add	r30, r30
    2a86:	ff 1f       	adc	r31, r31
    2a88:	ee 59       	subi	r30, 0x9E	; 158
    2a8a:	fe 4d       	sbci	r31, 0xDE	; 222
    2a8c:	20 81       	ld	r18, Z
    2a8e:	31 81       	ldd	r19, Z+1	; 0x01
    2a90:	42 81       	ldd	r20, Z+2	; 0x02
    2a92:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2a94:	80 91 31 21 	lds	r24, 0x2131
    2a98:	28 2e       	mov	r2, r24
    2a9a:	33 24       	eor	r3, r3
    2a9c:	f1 01       	movw	r30, r2
    2a9e:	ee 0f       	add	r30, r30
    2aa0:	ff 1f       	adc	r31, r31
    2aa2:	ee 0f       	add	r30, r30
    2aa4:	ff 1f       	adc	r31, r31
    2aa6:	e4 5e       	subi	r30, 0xE4	; 228
    2aa8:	fe 4d       	sbci	r31, 0xDE	; 222
    2aaa:	82 ad       	ldd	r24, Z+58	; 0x3a
    2aac:	93 ad       	ldd	r25, Z+59	; 0x3b
    2aae:	a4 ad       	ldd	r26, Z+60	; 0x3c
    2ab0:	b5 ad       	ldd	r27, Z+61	; 0x3d
    2ab2:	8c 8b       	std	Y+20, r24	; 0x14
    2ab4:	9d 8b       	std	Y+21, r25	; 0x15
    2ab6:	ae 8b       	std	Y+22, r26	; 0x16
    2ab8:	bf 8b       	std	Y+23, r27	; 0x17
    2aba:	a6 a4       	ldd	r10, Z+46	; 0x2e
    2abc:	b7 a4       	ldd	r11, Z+47	; 0x2f
    2abe:	c0 a8       	ldd	r12, Z+48	; 0x30
    2ac0:	d1 a8       	ldd	r13, Z+49	; 0x31

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2ac2:	90 91 29 21 	lds	r25, 0x2129
    2ac6:	9b 8b       	std	Y+19, r25	; 0x13
    2ac8:	99 23       	and	r25, r25
    2aca:	49 f0       	breq	.+18     	; 0x2ade <gc_execute_block+0x930>
    2acc:	40 90 46 21 	lds	r4, 0x2146
    2ad0:	50 90 47 21 	lds	r5, 0x2147
    2ad4:	60 90 48 21 	lds	r6, 0x2148
    2ad8:	70 90 49 21 	lds	r7, 0x2149
    2adc:	08 c0       	rjmp	.+16     	; 0x2aee <gc_execute_block+0x940>
    2ade:	40 90 3a 21 	lds	r4, 0x213A
    2ae2:	50 90 3b 21 	lds	r5, 0x213B
    2ae6:	60 90 3c 21 	lds	r6, 0x213C
    2aea:	70 90 3d 21 	lds	r7, 0x213D
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2aee:	c8 01       	movw	r24, r16
    2af0:	b7 01       	movw	r22, r14
    2af2:	0e 94 f6 43 	call	0x87ec	; 0x87ec <hypot>
    2af6:	7b 01       	movw	r14, r22
    2af8:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2afa:	ad b7       	in	r26, 0x3d	; 61
    2afc:	be b7       	in	r27, 0x3e	; 62
    2afe:	1a 97       	sbiw	r26, 0x0a	; 10
    2b00:	ad bf       	out	0x3d, r26	; 61
    2b02:	be bf       	out	0x3e, r27	; 62
    2b04:	8d b6       	in	r8, 0x3d	; 61
    2b06:	9e b6       	in	r9, 0x3e	; 62
    2b08:	08 94       	sec
    2b0a:	81 1c       	adc	r8, r1
    2b0c:	91 1c       	adc	r9, r1
    2b0e:	6c 89       	ldd	r22, Y+20	; 0x14
    2b10:	7d 89       	ldd	r23, Y+21	; 0x15
    2b12:	8e 89       	ldd	r24, Y+22	; 0x16
    2b14:	9f 89       	ldd	r25, Y+23	; 0x17
    2b16:	a6 01       	movw	r20, r12
    2b18:	95 01       	movw	r18, r10
    2b1a:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    2b1e:	5b 01       	movw	r10, r22
    2b20:	6c 01       	movw	r12, r24
    2b22:	2b 81       	ldd	r18, Y+3	; 0x03
    2b24:	3c 81       	ldd	r19, Y+4	; 0x04
    2b26:	f4 01       	movw	r30, r8
    2b28:	20 83       	st	Z, r18
    2b2a:	31 83       	std	Z+1, r19	; 0x01
    2b2c:	22 82       	std	Z+2, r2	; 0x02
    2b2e:	33 82       	std	Z+3, r3	; 0x03
    2b30:	d4 01       	movw	r26, r8
    2b32:	14 96       	adiw	r26, 0x04	; 4
    2b34:	4d 92       	st	X+, r4
    2b36:	5d 92       	st	X+, r5
    2b38:	6d 92       	st	X+, r6
    2b3a:	7c 92       	st	X, r7
    2b3c:	17 97       	sbiw	r26, 0x07	; 7
    2b3e:	eb 89       	ldd	r30, Y+19	; 0x13
    2b40:	18 96       	adiw	r26, 0x08	; 8
    2b42:	ec 93       	st	X, r30
    2b44:	18 97       	sbiw	r26, 0x08	; 8
    2b46:	19 96       	adiw	r26, 0x09	; 9
    2b48:	1c 92       	st	X, r1
    2b4a:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b4c:	78 89       	ldd	r23, Y+16	; 0x10
    2b4e:	89 89       	ldd	r24, Y+17	; 0x11
    2b50:	9a 89       	ldd	r25, Y+18	; 0x12
    2b52:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b54:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b56:	4d 85       	ldd	r20, Y+13	; 0x0d
    2b58:	5e 85       	ldd	r21, Y+14	; 0x0e
    2b5a:	8d 80       	ldd	r8, Y+5	; 0x05
    2b5c:	9e 80       	ldd	r9, Y+6	; 0x06
    2b5e:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <mc_arc>
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//					   (gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//						gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    2b62:	2d b7       	in	r18, 0x3d	; 61
    2b64:	3e b7       	in	r19, 0x3e	; 62
    2b66:	26 5f       	subi	r18, 0xF6	; 246
    2b68:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6a:	2d bf       	out	0x3d, r18	; 61
    2b6c:	3e bf       	out	0x3e, r19	; 62
										gc.inverse_feed_rate_mode); 
					break;
				}

				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: {
					gc.status = _gc_compute_arc(); 
    2b6e:	80 93 1c 21 	sts	0x211C, r24
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    2b72:	80 91 1c 21 	lds	r24, 0x211C
    2b76:	88 23       	and	r24, r24
    2b78:	11 f0       	breq	.+4      	; 0x2b7e <gc_execute_block+0x9d0>
    2b7a:	82 30       	cpi	r24, 0x02	; 2
    2b7c:	49 f4       	brne	.+18     	; 0x2b90 <gc_execute_block+0x9e2>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2b7e:	ea e4       	ldi	r30, 0x4A	; 74
    2b80:	f1 e2       	ldi	r31, 0x21	; 33
    2b82:	df 01       	movw	r26, r30
    2b84:	1c 96       	adiw	r26, 0x0c	; 12
    2b86:	9c e0       	ldi	r25, 0x0C	; 12
    2b88:	0d 90       	ld	r0, X+
    2b8a:	01 92       	st	Z+, r0
    2b8c:	91 50       	subi	r25, 0x01	; 1
    2b8e:	e1 f7       	brne	.-8      	; 0x2b88 <gc_execute_block+0x9da>
	};
	return(gc.status);
}
    2b90:	68 96       	adiw	r28, 0x18	; 24
    2b92:	cd bf       	out	0x3d, r28	; 61
    2b94:	de bf       	out	0x3e, r29	; 62
    2b96:	cf 91       	pop	r28
    2b98:	df 91       	pop	r29
    2b9a:	1f 91       	pop	r17
    2b9c:	0f 91       	pop	r16
    2b9e:	ff 90       	pop	r15
    2ba0:	ef 90       	pop	r14
    2ba2:	df 90       	pop	r13
    2ba4:	cf 90       	pop	r12
    2ba6:	bf 90       	pop	r11
    2ba8:	af 90       	pop	r10
    2baa:	9f 90       	pop	r9
    2bac:	8f 90       	pop	r8
    2bae:	7f 90       	pop	r7
    2bb0:	6f 90       	pop	r6
    2bb2:	5f 90       	pop	r5
    2bb4:	4f 90       	pop	r4
    2bb6:	3f 90       	pop	r3
    2bb8:	2f 90       	pop	r2
    2bba:	08 95       	ret

00002bbc <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2bbc:	ef 92       	push	r14
    2bbe:	ff 92       	push	r15
    2bc0:	0f 93       	push	r16
    2bc2:	1f 93       	push	r17
    2bc4:	cf 93       	push	r28
    2bc6:	df 93       	push	r29
    2bc8:	8c 01       	movw	r16, r24
	char *comment=0;	// comment pointer - first char past opening paren
	uint8_t i=0; 		// index for incoming characters
	uint8_t j=0;		// index for normalized characters

	// discard deleted block
	if (block[0] == '/') {
    2bca:	fc 01       	movw	r30, r24
    2bcc:	80 81       	ld	r24, Z
    2bce:	8f 32       	cpi	r24, 0x2F	; 47
    2bd0:	19 f0       	breq	.+6      	; 0x2bd8 <gc_gcode_parser+0x1c>
    2bd2:	ee 24       	eor	r14, r14
    2bd4:	ff 24       	eor	r15, r15
    2bd6:	17 c0       	rjmp	.+46     	; 0x2c06 <gc_gcode_parser+0x4a>
		block[0] = 0;
    2bd8:	f8 01       	movw	r30, r16
    2bda:	10 82       	st	Z, r1
    2bdc:	51 c0       	rjmp	.+162    	; 0x2c80 <gc_gcode_parser+0xc4>
		return;
	} 
	// normalize the comamnd block & mark the comment(if any)
	while ((c = toupper(block[i++])) != 0) {// NUL character
    2bde:	f3 94       	inc	r15
		if (c <= ' ') continue;				// toss WS & ctrl codes
    2be0:	81 32       	cpi	r24, 0x21	; 33
    2be2:	88 f0       	brcs	.+34     	; 0x2c06 <gc_gcode_parser+0x4a>
    2be4:	ee 2d       	mov	r30, r14
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
		if (c == '(') {						// detect & handle comment
    2be8:	88 32       	cpi	r24, 0x28	; 40
    2bea:	49 f4       	brne	.+18     	; 0x2bfe <gc_gcode_parser+0x42>
			block[j] = 0;
    2bec:	e0 0f       	add	r30, r16
    2bee:	f1 1f       	adc	r31, r17
    2bf0:	10 82       	st	Z, r1
			comment = &block[i]; 
    2bf2:	e8 01       	movw	r28, r16
    2bf4:	cf 0d       	add	r28, r15
    2bf6:	d1 1d       	adc	r29, r1
			break;
		}
		block[j++] = c;
	}
	if (comment) {
    2bf8:	20 97       	sbiw	r28, 0x00	; 0
    2bfa:	79 f4       	brne	.+30     	; 0x2c1a <gc_gcode_parser+0x5e>
    2bfc:	41 c0       	rjmp	.+130    	; 0x2c80 <gc_gcode_parser+0xc4>
		if (c == '(') {						// detect & handle comment
			block[j] = 0;
			comment = &block[i]; 
			break;
		}
		block[j++] = c;
    2bfe:	e0 0f       	add	r30, r16
    2c00:	f1 1f       	adc	r31, r17
    2c02:	80 83       	st	Z, r24
    2c04:	e3 94       	inc	r14
	if (block[0] == '/') {
		block[0] = 0;
		return;
	} 
	// normalize the comamnd block & mark the comment(if any)
	while ((c = toupper(block[i++])) != 0) {// NUL character
    2c06:	f8 01       	movw	r30, r16
    2c08:	ef 0d       	add	r30, r15
    2c0a:	f1 1d       	adc	r31, r1
    2c0c:	80 81       	ld	r24, Z
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	0e 94 70 48 	call	0x90e0	; 0x90e0 <toupper>
    2c14:	88 23       	and	r24, r24
    2c16:	19 f7       	brne	.-58     	; 0x2bde <gc_gcode_parser+0x22>
    2c18:	33 c0       	rjmp	.+102    	; 0x2c80 <gc_gcode_parser+0xc4>
			break;
		}
		block[j++] = c;
	}
	if (comment) {
		if ((toupper(comment[0]) == 'M') && 
    2c1a:	88 81       	ld	r24, Y
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	0e 94 70 48 	call	0x90e0	; 0x90e0 <toupper>
    2c22:	8d 34       	cpi	r24, 0x4D	; 77
    2c24:	91 05       	cpc	r25, r1
    2c26:	61 f5       	brne	.+88     	; 0x2c80 <gc_gcode_parser+0xc4>
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	0e 94 70 48 	call	0x90e0	; 0x90e0 <toupper>
    2c30:	83 35       	cpi	r24, 0x53	; 83
    2c32:	91 05       	cpc	r25, r1
    2c34:	29 f5       	brne	.+74     	; 0x2c80 <gc_gcode_parser+0xc4>
    2c36:	8a 81       	ldd	r24, Y+2	; 0x02
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	0e 94 70 48 	call	0x90e0	; 0x90e0 <toupper>
    2c3e:	87 34       	cpi	r24, 0x47	; 71
    2c40:	91 05       	cpc	r25, r1
    2c42:	f1 f4       	brne	.+60     	; 0x2c80 <gc_gcode_parser+0xc4>
    2c44:	04 c0       	rjmp	.+8      	; 0x2c4e <gc_gcode_parser+0x92>
			(toupper(comment[1]) == 'S') &&
			(toupper(comment[2]) == 'G')) {
			i=0;
			while ((c = comment[i++]) != 0) {	// remove trailing paren
				if (c == ')') {
    2c46:	99 32       	cpi	r25, 0x29	; 41
    2c48:	19 f4       	brne	.+6      	; 0x2c50 <gc_gcode_parser+0x94>
					comment[--i] = 0;
    2c4a:	10 82       	st	Z, r1
    2c4c:	08 c0       	rjmp	.+16     	; 0x2c5e <gc_gcode_parser+0xa2>
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
	if (comment) {
		if ((toupper(comment[0]) == 'M') && 
			(toupper(comment[1]) == 'S') &&
			(toupper(comment[2]) == 'G')) {
			i=0;
			while ((c = comment[i++]) != 0) {	// remove trailing paren
    2c50:	fe 01       	movw	r30, r28
    2c52:	e8 0f       	add	r30, r24
    2c54:	f1 1d       	adc	r31, r1
    2c56:	90 81       	ld	r25, Z
    2c58:	8f 5f       	subi	r24, 0xFF	; 255
    2c5a:	99 23       	and	r25, r25
    2c5c:	a1 f7       	brne	.-24     	; 0x2c46 <gc_gcode_parser+0x8a>
				if (c == ')') {
					comment[--i] = 0;
					break;
				}
			}
			printf_P(PSTR("%s\n"), (comment+3));
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <gc_gcode_parser+0xa4>
    2c60:	0f 92       	push	r0
    2c62:	8b e3       	ldi	r24, 0x3B	; 59
    2c64:	92 e0       	ldi	r25, 0x02	; 2
    2c66:	ed b7       	in	r30, 0x3d	; 61
    2c68:	fe b7       	in	r31, 0x3e	; 62
    2c6a:	81 83       	std	Z+1, r24	; 0x01
    2c6c:	92 83       	std	Z+2, r25	; 0x02
    2c6e:	23 96       	adiw	r28, 0x03	; 3
    2c70:	c3 83       	std	Z+3, r28	; 0x03
    2c72:	d4 83       	std	Z+4, r29	; 0x04
    2c74:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	0f 90       	pop	r0
 */

uint8_t gc_gcode_parser(char *block)
{
	_gc_normalize_gcode_block(block);
	if (block[0] == 0) { 					// ignore comments (stripped)
    2c80:	f8 01       	movw	r30, r16
    2c82:	80 81       	ld	r24, Z
    2c84:	88 23       	and	r24, r24
    2c86:	71 f0       	breq	.+28     	; 0x2ca4 <gc_gcode_parser+0xe8>
		return(TG_OK);
	}
	if (block[0] == 'Q') {					// quit gcode mode
    2c88:	81 35       	cpi	r24, 0x51	; 81
    2c8a:	11 f4       	brne	.+4      	; 0x2c90 <gc_gcode_parser+0xd4>
    2c8c:	8b e0       	ldi	r24, 0x0B	; 11
    2c8e:	0a c0       	rjmp	.+20     	; 0x2ca4 <gc_gcode_parser+0xe8>
		return(TG_QUIT);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2c90:	c8 01       	movw	r24, r16
    2c92:	0e 94 d7 10 	call	0x21ae	; 0x21ae <gc_execute_block>
    2c96:	80 93 1c 21 	sts	0x211C, r24
	tg_print_status(gc.status, block);
    2c9a:	b8 01       	movw	r22, r16
    2c9c:	0e 94 a2 2b 	call	0x5744	; 0x5744 <tg_print_status>
	return (gc.status);
    2ca0:	80 91 1c 21 	lds	r24, 0x211C
}
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	1f 91       	pop	r17
    2caa:	0f 91       	pop	r16
    2cac:	ff 90       	pop	r15
    2cae:	ef 90       	pop	r14
    2cb0:	08 95       	ret

00002cb2 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2cb2:	cf 92       	push	r12
    2cb4:	df 92       	push	r13
    2cb6:	ef 92       	push	r14
    2cb8:	ff 92       	push	r15
    2cba:	0f 93       	push	r16
    2cbc:	1f 93       	push	r17
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29
    2cc2:	c9 e9       	ldi	r28, 0x99	; 153
    2cc4:	d2 e2       	ldi	r29, 0x22	; 34
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2cc6:	68 81       	ld	r22, Y
    2cc8:	70 e0       	ldi	r23, 0x00	; 0
    2cca:	88 27       	eor	r24, r24
    2ccc:	77 fd       	sbrc	r23, 7
    2cce:	80 95       	com	r24
    2cd0:	98 2f       	mov	r25, r24
    2cd2:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    2cd6:	9b 01       	movw	r18, r22
    2cd8:	ac 01       	movw	r20, r24
    2cda:	6f 81       	ldd	r22, Y+7	; 0x07
    2cdc:	78 85       	ldd	r23, Y+8	; 0x08
    2cde:	89 85       	ldd	r24, Y+9	; 0x09
    2ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce2:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    2ce6:	9b 01       	movw	r18, r22
    2ce8:	ac 01       	movw	r20, r24
    2cea:	60 e0       	ldi	r22, 0x00	; 0
    2cec:	70 e0       	ldi	r23, 0x00	; 0
    2cee:	84 eb       	ldi	r24, 0xB4	; 180
    2cf0:	93 e4       	ldi	r25, 0x43	; 67
    2cf2:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    2cf6:	2b 85       	ldd	r18, Y+11	; 0x0b
    2cf8:	3c 85       	ldd	r19, Y+12	; 0x0c
    2cfa:	4d 85       	ldd	r20, Y+13	; 0x0d
    2cfc:	5e 85       	ldd	r21, Y+14	; 0x0e
    2cfe:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    2d02:	6b 8b       	std	Y+19, r22	; 0x13
    2d04:	7c 8b       	std	Y+20, r23	; 0x14
    2d06:	8d 8b       	std	Y+21, r24	; 0x15
    2d08:	9e 8b       	std	Y+22, r25	; 0x16
    2d0a:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    2d0c:	82 e2       	ldi	r24, 0x22	; 34
    2d0e:	c9 3f       	cpi	r28, 0xF9	; 249
    2d10:	d8 07       	cpc	r29, r24
    2d12:	c9 f6       	brne	.-78     	; 0x2cc6 <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    2d14:	00 91 99 22 	lds	r16, 0x2299
    2d18:	10 e0       	ldi	r17, 0x00	; 0
    2d1a:	b8 01       	movw	r22, r16
    2d1c:	88 27       	eor	r24, r24
    2d1e:	77 fd       	sbrc	r23, 7
    2d20:	80 95       	com	r24
    2d22:	98 2f       	mov	r25, r24
    2d24:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    2d28:	9b 01       	movw	r18, r22
    2d2a:	ac 01       	movw	r20, r24
    2d2c:	60 91 a0 22 	lds	r22, 0x22A0
    2d30:	70 91 a1 22 	lds	r23, 0x22A1
    2d34:	80 91 a2 22 	lds	r24, 0x22A2
    2d38:	90 91 a3 22 	lds	r25, 0x22A3
    2d3c:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    2d40:	9b 01       	movw	r18, r22
    2d42:	ac 01       	movw	r20, r24
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	70 e0       	ldi	r23, 0x00	; 0
    2d48:	84 eb       	ldi	r24, 0xB4	; 180
    2d4a:	93 e4       	ldi	r25, 0x43	; 67
    2d4c:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    2d50:	6b 01       	movw	r12, r22
    2d52:	7c 01       	movw	r14, r24
    2d54:	80 91 9e 22 	lds	r24, 0x229E
    2d58:	90 91 9f 22 	lds	r25, 0x229F
    2d5c:	08 9f       	mul	r16, r24
    2d5e:	b0 01       	movw	r22, r0
    2d60:	09 9f       	mul	r16, r25
    2d62:	70 0d       	add	r23, r0
    2d64:	18 9f       	mul	r17, r24
    2d66:	70 0d       	add	r23, r0
    2d68:	11 24       	eor	r1, r1
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	0e 94 99 42 	call	0x8532	; 0x8532 <__floatunsisf>
    2d72:	a7 01       	movw	r20, r14
    2d74:	96 01       	movw	r18, r12
    2d76:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    2d7a:	60 93 91 22 	sts	0x2291, r22
    2d7e:	70 93 92 22 	sts	0x2292, r23
    2d82:	80 93 93 22 	sts	0x2293, r24
    2d86:	90 93 94 22 	sts	0x2294, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    2d8a:	80 91 9c 22 	lds	r24, 0x229C
    2d8e:	90 91 9d 22 	lds	r25, 0x229D
    2d92:	08 9f       	mul	r16, r24
    2d94:	b0 01       	movw	r22, r0
    2d96:	09 9f       	mul	r16, r25
    2d98:	70 0d       	add	r23, r0
    2d9a:	18 9f       	mul	r17, r24
    2d9c:	70 0d       	add	r23, r0
    2d9e:	11 24       	eor	r1, r1
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	0e 94 99 42 	call	0x8532	; 0x8532 <__floatunsisf>
    2da8:	a7 01       	movw	r20, r14
    2daa:	96 01       	movw	r18, r12
    2dac:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    2db0:	60 93 95 22 	sts	0x2295, r22
    2db4:	70 93 96 22 	sts	0x2296, r23
    2db8:	80 93 97 22 	sts	0x2297, r24
    2dbc:	90 93 98 22 	sts	0x2298, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    2dc0:	df 91       	pop	r29
    2dc2:	cf 91       	pop	r28
    2dc4:	1f 91       	pop	r17
    2dc6:	0f 91       	pop	r16
    2dc8:	ff 90       	pop	r15
    2dca:	ef 90       	pop	r14
    2dcc:	df 90       	pop	r13
    2dce:	cf 90       	pop	r12
    2dd0:	08 95       	ret

00002dd2 <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    2dd2:	eb e8       	ldi	r30, 0x8B	; 139
    2dd4:	f2 e2       	ldi	r31, 0x22	; 34
    2dd6:	84 e6       	ldi	r24, 0x64	; 100
    2dd8:	80 93 8b 22 	sts	0x228B, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2ddc:	8d ec       	ldi	r24, 0xCD	; 205
    2dde:	9c ec       	ldi	r25, 0xCC	; 204
    2de0:	ac e4       	ldi	r26, 0x4C	; 76
    2de2:	bd e3       	ldi	r27, 0x3D	; 61
    2de4:	80 93 8d 22 	sts	0x228D, r24
    2de8:	90 93 8e 22 	sts	0x228E, r25
    2dec:	a0 93 8f 22 	sts	0x228F, r26
    2df0:	b0 93 90 22 	sts	0x2290, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2df4:	8c ed       	ldi	r24, 0xDC	; 220
    2df6:	95 e0       	ldi	r25, 0x05	; 5
    2df8:	80 93 9c 22 	sts	0x229C, r24
    2dfc:	90 93 9d 22 	sts	0x229D, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2e00:	80 93 b4 22 	sts	0x22B4, r24
    2e04:	90 93 b5 22 	sts	0x22B5, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2e08:	80 93 cc 22 	sts	0x22CC, r24
    2e0c:	90 93 cd 22 	sts	0x22CD, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2e10:	80 93 e4 22 	sts	0x22E4, r24
    2e14:	90 93 e5 22 	sts	0x22E5, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2e18:	80 93 9e 22 	sts	0x229E, r24
    2e1c:	90 93 9f 22 	sts	0x229F, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2e20:	80 93 b6 22 	sts	0x22B6, r24
    2e24:	90 93 b7 22 	sts	0x22B7, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2e28:	80 93 ce 22 	sts	0x22CE, r24
    2e2c:	90 93 cf 22 	sts	0x22CF, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2e30:	80 93 e6 22 	sts	0x22E6, r24
    2e34:	90 93 e7 22 	sts	0x22E7, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2e38:	86 e6       	ldi	r24, 0x66	; 102
    2e3a:	96 e6       	ldi	r25, 0x66	; 102
    2e3c:	a6 ee       	ldi	r26, 0xE6	; 230
    2e3e:	bf e3       	ldi	r27, 0x3F	; 63
    2e40:	80 93 a0 22 	sts	0x22A0, r24
    2e44:	90 93 a1 22 	sts	0x22A1, r25
    2e48:	a0 93 a2 22 	sts	0x22A2, r26
    2e4c:	b0 93 a3 22 	sts	0x22A3, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2e50:	80 93 b8 22 	sts	0x22B8, r24
    2e54:	90 93 b9 22 	sts	0x22B9, r25
    2e58:	a0 93 ba 22 	sts	0x22BA, r26
    2e5c:	b0 93 bb 22 	sts	0x22BB, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2e60:	80 93 d0 22 	sts	0x22D0, r24
    2e64:	90 93 d1 22 	sts	0x22D1, r25
    2e68:	a0 93 d2 22 	sts	0x22D2, r26
    2e6c:	b0 93 d3 22 	sts	0x22D3, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2e70:	80 93 e8 22 	sts	0x22E8, r24
    2e74:	90 93 e9 22 	sts	0x22E9, r25
    2e78:	a0 93 ea 22 	sts	0x22EA, r26
    2e7c:	b0 93 eb 22 	sts	0x22EB, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    2e80:	8c e5       	ldi	r24, 0x5C	; 92
    2e82:	9f e8       	ldi	r25, 0x8F	; 143
    2e84:	a2 ea       	ldi	r26, 0xA2	; 162
    2e86:	bf e3       	ldi	r27, 0x3F	; 63
    2e88:	80 93 a4 22 	sts	0x22A4, r24
    2e8c:	90 93 a5 22 	sts	0x22A5, r25
    2e90:	a0 93 a6 22 	sts	0x22A6, r26
    2e94:	b0 93 a7 22 	sts	0x22A7, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    2e98:	80 93 bc 22 	sts	0x22BC, r24
    2e9c:	90 93 bd 22 	sts	0x22BD, r25
    2ea0:	a0 93 be 22 	sts	0x22BE, r26
    2ea4:	b0 93 bf 22 	sts	0x22BF, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    2ea8:	80 93 d4 22 	sts	0x22D4, r24
    2eac:	90 93 d5 22 	sts	0x22D5, r25
    2eb0:	a0 93 d6 22 	sts	0x22D6, r26
    2eb4:	b0 93 d7 22 	sts	0x22D7, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    2eb8:	80 93 ec 22 	sts	0x22EC, r24
    2ebc:	90 93 ed 22 	sts	0x22ED, r25
    2ec0:	a0 93 ee 22 	sts	0x22EE, r26
    2ec4:	b0 93 ef 22 	sts	0x22EF, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	a8 ec       	ldi	r26, 0xC8	; 200
    2ece:	b3 e4       	ldi	r27, 0x43	; 67
    2ed0:	80 93 a8 22 	sts	0x22A8, r24
    2ed4:	90 93 a9 22 	sts	0x22A9, r25
    2ed8:	a0 93 aa 22 	sts	0x22AA, r26
    2edc:	b0 93 ab 22 	sts	0x22AB, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    2ee0:	80 93 c0 22 	sts	0x22C0, r24
    2ee4:	90 93 c1 22 	sts	0x22C1, r25
    2ee8:	a0 93 c2 22 	sts	0x22C2, r26
    2eec:	b0 93 c3 22 	sts	0x22C3, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	a6 e9       	ldi	r26, 0x96	; 150
    2ef6:	b3 e4       	ldi	r27, 0x43	; 67
    2ef8:	80 93 d8 22 	sts	0x22D8, r24
    2efc:	90 93 d9 22 	sts	0x22D9, r25
    2f00:	a0 93 da 22 	sts	0x22DA, r26
    2f04:	b0 93 db 22 	sts	0x22DB, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	a0 e8       	ldi	r26, 0x80	; 128
    2f0e:	bf eb       	ldi	r27, 0xBF	; 191
    2f10:	80 93 f0 22 	sts	0x22F0, r24
    2f14:	90 93 f1 22 	sts	0x22F1, r25
    2f18:	a0 93 f2 22 	sts	0x22F2, r26
    2f1c:	b0 93 f3 22 	sts	0x22F3, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    2f20:	88 e0       	ldi	r24, 0x08	; 8
    2f22:	80 93 99 22 	sts	0x2299, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    2f26:	80 93 b1 22 	sts	0x22B1, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    2f2a:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A].microstep = A_MICROSTEPS;
    2f2c:	80 93 e1 22 	sts	0x22E1, r24

	cfg.a[X].polarity = X_POLARITY;
    2f30:	10 92 9b 22 	sts	0x229B, r1
	cfg.a[Y].polarity = Y_POLARITY;
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	80 93 b3 22 	sts	0x22B3, r24
	cfg.a[Z].polarity = Z_POLARITY;
    2f3a:	10 92 cb 22 	sts	0x22CB, r1
	cfg.a[A].polarity = A_POLARITY;
    2f3e:	10 92 e3 22 	sts	0x22E3, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    2f42:	80 93 b0 22 	sts	0x22B0, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    2f46:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    2f48:	80 93 e0 22 	sts	0x22E0, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    2f4c:	10 92 f8 22 	sts	0x22F8, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    2f50:	80 93 9a 22 	sts	0x229A, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    2f54:	80 93 b2 22 	sts	0x22B2, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    2f58:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    2f5a:	80 93 e2 22 	sts	0x22E2, r24

	_cfg_computed();		// generate computed values from the above
    2f5e:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_cfg_computed>
}
    2f62:	08 95       	ret

00002f64 <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2f64:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <cfg_reset>
}
    2f68:	08 95       	ret

00002f6a <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2f6a:	8c 30       	cpi	r24, 0x0C	; 12
    2f6c:	31 f1       	breq	.+76     	; 0x2fba <_cfg_print_status+0x50>
    2f6e:	8d 30       	cpi	r24, 0x0D	; 13
    2f70:	30 f4       	brcc	.+12     	; 0x2f7e <_cfg_print_status+0x14>
    2f72:	82 30       	cpi	r24, 0x02	; 2
    2f74:	59 f0       	breq	.+22     	; 0x2f8c <_cfg_print_status+0x22>
    2f76:	8b 30       	cpi	r24, 0x0B	; 11
    2f78:	09 f0       	breq	.+2      	; 0x2f7c <_cfg_print_status+0x12>
    2f7a:	45 c0       	rjmp	.+138    	; 0x3006 <_cfg_print_status+0x9c>
    2f7c:	0c c0       	rjmp	.+24     	; 0x2f96 <_cfg_print_status+0x2c>
    2f7e:	81 31       	cpi	r24, 0x11	; 17
    2f80:	09 f1       	breq	.+66     	; 0x2fc4 <_cfg_print_status+0x5a>
    2f82:	83 31       	cpi	r24, 0x13	; 19
    2f84:	81 f1       	breq	.+96     	; 0x2fe6 <_cfg_print_status+0x7c>
    2f86:	80 31       	cpi	r24, 0x10	; 16
    2f88:	f1 f5       	brne	.+124    	; 0x3006 <_cfg_print_status+0x9c>
    2f8a:	12 c0       	rjmp	.+36     	; 0x2fb0 <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_EAGAIN: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2f8c:	00 d0       	rcall	.+0      	; 0x2f8e <_cfg_print_status+0x24>
    2f8e:	0f 92       	push	r0
    2f90:	89 e1       	ldi	r24, 0x19	; 25
    2f92:	94 e0       	ldi	r25, 0x04	; 4
    2f94:	1b c0       	rjmp	.+54     	; 0x2fcc <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2f96:	0f 92       	push	r0
    2f98:	0f 92       	push	r0
    2f9a:	83 e0       	ldi	r24, 0x03	; 3
    2f9c:	94 e0       	ldi	r25, 0x04	; 4
    2f9e:	ed b7       	in	r30, 0x3d	; 61
    2fa0:	fe b7       	in	r31, 0x3e	; 62
    2fa2:	81 83       	std	Z+1, r24	; 0x01
    2fa4:	92 83       	std	Z+2, r25	; 0x02
    2fa6:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2fb0:	00 d0       	rcall	.+0      	; 0x2fb2 <_cfg_print_status+0x48>
    2fb2:	0f 92       	push	r0
    2fb4:	8c ee       	ldi	r24, 0xEC	; 236
    2fb6:	93 e0       	ldi	r25, 0x03	; 3
    2fb8:	09 c0       	rjmp	.+18     	; 0x2fcc <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2fba:	00 d0       	rcall	.+0      	; 0x2fbc <_cfg_print_status+0x52>
    2fbc:	0f 92       	push	r0
    2fbe:	82 ed       	ldi	r24, 0xD2	; 210
    2fc0:	93 e0       	ldi	r25, 0x03	; 3
    2fc2:	04 c0       	rjmp	.+8      	; 0x2fcc <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2fc4:	00 d0       	rcall	.+0      	; 0x2fc6 <_cfg_print_status+0x5c>
    2fc6:	0f 92       	push	r0
    2fc8:	88 eb       	ldi	r24, 0xB8	; 184
    2fca:	93 e0       	ldi	r25, 0x03	; 3
    2fcc:	ed b7       	in	r30, 0x3d	; 61
    2fce:	fe b7       	in	r31, 0x3e	; 62
    2fd0:	81 83       	std	Z+1, r24	; 0x01
    2fd2:	92 83       	std	Z+2, r25	; 0x02
    2fd4:	63 83       	std	Z+3, r22	; 0x03
    2fd6:	74 83       	std	Z+4, r23	; 0x04
    2fd8:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	08 95       	ret
			break;

		case TG_ARC_SPECIFICATION_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2fe6:	00 d0       	rcall	.+0      	; 0x2fe8 <_cfg_print_status+0x7e>
    2fe8:	0f 92       	push	r0
    2fea:	8d e9       	ldi	r24, 0x9D	; 157
    2fec:	93 e0       	ldi	r25, 0x03	; 3
    2fee:	ed b7       	in	r30, 0x3d	; 61
    2ff0:	fe b7       	in	r31, 0x3e	; 62
    2ff2:	81 83       	std	Z+1, r24	; 0x01
    2ff4:	92 83       	std	Z+2, r25	; 0x02
    2ff6:	63 83       	std	Z+3, r22	; 0x03
    2ff8:	74 83       	std	Z+4, r23	; 0x04
    2ffa:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	08 95       	ret

00003008 <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    3008:	ef 92       	push	r14
    300a:	ff 92       	push	r15
    300c:	0f 93       	push	r16
    300e:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    3010:	e8 2e       	mov	r14, r24
    3012:	ff 24       	eor	r15, r15
    3014:	87 01       	movw	r16, r14
    3016:	00 0f       	add	r16, r16
    3018:	11 1f       	adc	r17, r17
    301a:	f8 01       	movw	r30, r16
    301c:	e9 5b       	subi	r30, 0xB9	; 185
    301e:	fd 4f       	sbci	r31, 0xFD	; 253
    3020:	25 91       	lpm	r18, Z+
    3022:	34 91       	lpm	r19, Z+
    3024:	00 d0       	rcall	.+0      	; 0x3026 <_cfg_dump_axis+0x1e>
    3026:	0f 92       	push	r0
    3028:	8c e3       	ldi	r24, 0x3C	; 60
    302a:	96 e0       	ldi	r25, 0x06	; 6
    302c:	ad b7       	in	r26, 0x3d	; 61
    302e:	be b7       	in	r27, 0x3e	; 62
    3030:	11 96       	adiw	r26, 0x01	; 1
    3032:	8d 93       	st	X+, r24
    3034:	9c 93       	st	X, r25
    3036:	12 97       	sbiw	r26, 0x02	; 2
    3038:	13 96       	adiw	r26, 0x03	; 3
    303a:	2d 93       	st	X+, r18
    303c:	3c 93       	st	X, r19
    303e:	14 97       	sbiw	r26, 0x04	; 4
    3040:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    3044:	84 e0       	ldi	r24, 0x04	; 4
    3046:	96 e0       	ldi	r25, 0x06	; 6
    3048:	ed b7       	in	r30, 0x3d	; 61
    304a:	fe b7       	in	r31, 0x3e	; 62
    304c:	81 83       	std	Z+1, r24	; 0x01
    304e:	92 83       	std	Z+2, r25	; 0x02
    3050:	0e 0d       	add	r16, r14
    3052:	1f 1d       	adc	r17, r15
    3054:	83 e0       	ldi	r24, 0x03	; 3
    3056:	00 0f       	add	r16, r16
    3058:	11 1f       	adc	r17, r17
    305a:	8a 95       	dec	r24
    305c:	e1 f7       	brne	.-8      	; 0x3056 <_cfg_dump_axis+0x4e>
    305e:	05 57       	subi	r16, 0x75	; 117
    3060:	1d 4d       	sbci	r17, 0xDD	; 221
    3062:	d8 01       	movw	r26, r16
    3064:	51 96       	adiw	r26, 0x11	; 17
    3066:	8d 91       	ld	r24, X+
    3068:	9c 91       	ld	r25, X
    306a:	52 97       	sbiw	r26, 0x12	; 18
    306c:	83 83       	std	Z+3, r24	; 0x03
    306e:	94 83       	std	Z+4, r25	; 0x04
    3070:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    3074:	8c ec       	ldi	r24, 0xCC	; 204
    3076:	95 e0       	ldi	r25, 0x05	; 5
    3078:	ed b7       	in	r30, 0x3d	; 61
    307a:	fe b7       	in	r31, 0x3e	; 62
    307c:	81 83       	std	Z+1, r24	; 0x01
    307e:	92 83       	std	Z+2, r25	; 0x02
    3080:	d8 01       	movw	r26, r16
    3082:	53 96       	adiw	r26, 0x13	; 19
    3084:	8d 91       	ld	r24, X+
    3086:	9c 91       	ld	r25, X
    3088:	54 97       	sbiw	r26, 0x14	; 20
    308a:	83 83       	std	Z+3, r24	; 0x03
    308c:	94 83       	std	Z+4, r25	; 0x04
    308e:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    3092:	ed b7       	in	r30, 0x3d	; 61
    3094:	fe b7       	in	r31, 0x3e	; 62
    3096:	31 96       	adiw	r30, 0x01	; 1
    3098:	89 e9       	ldi	r24, 0x99	; 153
    309a:	95 e0       	ldi	r25, 0x05	; 5
    309c:	ad b7       	in	r26, 0x3d	; 61
    309e:	be b7       	in	r27, 0x3e	; 62
    30a0:	11 96       	adiw	r26, 0x01	; 1
    30a2:	8d 93       	st	X+, r24
    30a4:	9c 93       	st	X, r25
    30a6:	12 97       	sbiw	r26, 0x02	; 2
    30a8:	d8 01       	movw	r26, r16
    30aa:	1e 96       	adiw	r26, 0x0e	; 14
    30ac:	8c 91       	ld	r24, X
    30ae:	82 83       	std	Z+2, r24	; 0x02
    30b0:	13 82       	std	Z+3, r1	; 0x03
    30b2:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    30b6:	0f 92       	push	r0
    30b8:	0f 92       	push	r0
    30ba:	82 e6       	ldi	r24, 0x62	; 98
    30bc:	95 e0       	ldi	r25, 0x05	; 5
    30be:	ed b7       	in	r30, 0x3d	; 61
    30c0:	fe b7       	in	r31, 0x3e	; 62
    30c2:	81 83       	std	Z+1, r24	; 0x01
    30c4:	92 83       	std	Z+2, r25	; 0x02
    30c6:	f8 01       	movw	r30, r16
    30c8:	85 89       	ldd	r24, Z+21	; 0x15
    30ca:	96 89       	ldd	r25, Z+22	; 0x16
    30cc:	a7 89       	ldd	r26, Z+23	; 0x17
    30ce:	b0 8d       	ldd	r27, Z+24	; 0x18
    30d0:	ed b7       	in	r30, 0x3d	; 61
    30d2:	fe b7       	in	r31, 0x3e	; 62
    30d4:	83 83       	std	Z+3, r24	; 0x03
    30d6:	94 83       	std	Z+4, r25	; 0x04
    30d8:	a5 83       	std	Z+5, r26	; 0x05
    30da:	b6 83       	std	Z+6, r27	; 0x06
    30dc:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    30e0:	8f e2       	ldi	r24, 0x2F	; 47
    30e2:	95 e0       	ldi	r25, 0x05	; 5
    30e4:	ad b7       	in	r26, 0x3d	; 61
    30e6:	be b7       	in	r27, 0x3e	; 62
    30e8:	11 96       	adiw	r26, 0x01	; 1
    30ea:	8d 93       	st	X+, r24
    30ec:	9c 93       	st	X, r25
    30ee:	12 97       	sbiw	r26, 0x02	; 2
    30f0:	f8 01       	movw	r30, r16
    30f2:	81 8d       	ldd	r24, Z+25	; 0x19
    30f4:	92 8d       	ldd	r25, Z+26	; 0x1a
    30f6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    30f8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    30fa:	ed b7       	in	r30, 0x3d	; 61
    30fc:	fe b7       	in	r31, 0x3e	; 62
    30fe:	83 83       	std	Z+3, r24	; 0x03
    3100:	94 83       	std	Z+4, r25	; 0x04
    3102:	a5 83       	std	Z+5, r26	; 0x05
    3104:	b6 83       	std	Z+6, r27	; 0x06
    3106:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    310a:	8c ef       	ldi	r24, 0xFC	; 252
    310c:	94 e0       	ldi	r25, 0x04	; 4
    310e:	ad b7       	in	r26, 0x3d	; 61
    3110:	be b7       	in	r27, 0x3e	; 62
    3112:	11 96       	adiw	r26, 0x01	; 1
    3114:	8d 93       	st	X+, r24
    3116:	9c 93       	st	X, r25
    3118:	12 97       	sbiw	r26, 0x02	; 2
    311a:	f8 01       	movw	r30, r16
    311c:	85 8d       	ldd	r24, Z+29	; 0x1d
    311e:	96 8d       	ldd	r25, Z+30	; 0x1e
    3120:	a7 8d       	ldd	r26, Z+31	; 0x1f
    3122:	b0 a1       	ldd	r27, Z+32	; 0x20
    3124:	ed b7       	in	r30, 0x3d	; 61
    3126:	fe b7       	in	r31, 0x3e	; 62
    3128:	83 83       	std	Z+3, r24	; 0x03
    312a:	94 83       	std	Z+4, r25	; 0x04
    312c:	a5 83       	std	Z+5, r26	; 0x05
    312e:	b6 83       	std	Z+6, r27	; 0x06
    3130:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    3134:	0f 90       	pop	r0
    3136:	0f 90       	pop	r0
    3138:	ed b7       	in	r30, 0x3d	; 61
    313a:	fe b7       	in	r31, 0x3e	; 62
    313c:	31 96       	adiw	r30, 0x01	; 1
    313e:	8b ec       	ldi	r24, 0xCB	; 203
    3140:	94 e0       	ldi	r25, 0x04	; 4
    3142:	ad b7       	in	r26, 0x3d	; 61
    3144:	be b7       	in	r27, 0x3e	; 62
    3146:	11 96       	adiw	r26, 0x01	; 1
    3148:	8d 93       	st	X+, r24
    314a:	9c 93       	st	X, r25
    314c:	12 97       	sbiw	r26, 0x02	; 2
    314e:	d8 01       	movw	r26, r16
    3150:	95 96       	adiw	r26, 0x25	; 37
    3152:	8c 91       	ld	r24, X
    3154:	82 83       	std	Z+2, r24	; 0x02
    3156:	13 82       	std	Z+3, r1	; 0x03
    3158:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    315c:	ed b7       	in	r30, 0x3d	; 61
    315e:	fe b7       	in	r31, 0x3e	; 62
    3160:	31 96       	adiw	r30, 0x01	; 1
    3162:	8a e9       	ldi	r24, 0x9A	; 154
    3164:	94 e0       	ldi	r25, 0x04	; 4
    3166:	ad b7       	in	r26, 0x3d	; 61
    3168:	be b7       	in	r27, 0x3e	; 62
    316a:	11 96       	adiw	r26, 0x01	; 1
    316c:	8d 93       	st	X+, r24
    316e:	9c 93       	st	X, r25
    3170:	12 97       	sbiw	r26, 0x02	; 2
    3172:	d8 01       	movw	r26, r16
    3174:	1f 96       	adiw	r26, 0x0f	; 15
    3176:	8c 91       	ld	r24, X
    3178:	82 83       	std	Z+2, r24	; 0x02
    317a:	13 82       	std	Z+3, r1	; 0x03
    317c:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    3180:	ed b7       	in	r30, 0x3d	; 61
    3182:	fe b7       	in	r31, 0x3e	; 62
    3184:	31 96       	adiw	r30, 0x01	; 1
    3186:	8a e6       	ldi	r24, 0x6A	; 106
    3188:	94 e0       	ldi	r25, 0x04	; 4
    318a:	ad b7       	in	r26, 0x3d	; 61
    318c:	be b7       	in	r27, 0x3e	; 62
    318e:	11 96       	adiw	r26, 0x01	; 1
    3190:	8d 93       	st	X+, r24
    3192:	9c 93       	st	X, r25
    3194:	12 97       	sbiw	r26, 0x02	; 2
    3196:	d8 01       	movw	r26, r16
    3198:	50 96       	adiw	r26, 0x10	; 16
    319a:	8c 91       	ld	r24, X
    319c:	82 83       	std	Z+2, r24	; 0x02
    319e:	13 82       	std	Z+3, r1	; 0x03
    31a0:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    31a4:	0f 92       	push	r0
    31a6:	0f 92       	push	r0
    31a8:	86 e3       	ldi	r24, 0x36	; 54
    31aa:	94 e0       	ldi	r25, 0x04	; 4
    31ac:	ed b7       	in	r30, 0x3d	; 61
    31ae:	fe b7       	in	r31, 0x3e	; 62
    31b0:	81 83       	std	Z+1, r24	; 0x01
    31b2:	92 83       	std	Z+2, r25	; 0x02
    31b4:	f8 01       	movw	r30, r16
    31b6:	81 a1       	ldd	r24, Z+33	; 0x21
    31b8:	92 a1       	ldd	r25, Z+34	; 0x22
    31ba:	a3 a1       	ldd	r26, Z+35	; 0x23
    31bc:	b4 a1       	ldd	r27, Z+36	; 0x24
    31be:	ed b7       	in	r30, 0x3d	; 61
    31c0:	fe b7       	in	r31, 0x3e	; 62
    31c2:	83 83       	std	Z+3, r24	; 0x03
    31c4:	94 83       	std	Z+4, r25	; 0x04
    31c6:	a5 83       	std	Z+5, r26	; 0x05
    31c8:	b6 83       	std	Z+6, r27	; 0x06
    31ca:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
    31ce:	8d b7       	in	r24, 0x3d	; 61
    31d0:	9e b7       	in	r25, 0x3e	; 62
    31d2:	06 96       	adiw	r24, 0x06	; 6
    31d4:	8d bf       	out	0x3d, r24	; 61
    31d6:	9e bf       	out	0x3e, r25	; 62
}
    31d8:	1f 91       	pop	r17
    31da:	0f 91       	pop	r16
    31dc:	ff 90       	pop	r15
    31de:	ef 90       	pop	r14
    31e0:	08 95       	ret

000031e2 <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    31e2:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    31e4:	00 d0       	rcall	.+0      	; 0x31e6 <cfg_dump+0x4>
    31e6:	0f 92       	push	r0
    31e8:	ed b7       	in	r30, 0x3d	; 61
    31ea:	fe b7       	in	r31, 0x3e	; 62
    31ec:	31 96       	adiw	r30, 0x01	; 1
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	97 e0       	ldi	r25, 0x07	; 7
    31f2:	ad b7       	in	r26, 0x3d	; 61
    31f4:	be b7       	in	r27, 0x3e	; 62
    31f6:	11 96       	adiw	r26, 0x01	; 1
    31f8:	8d 93       	st	X+, r24
    31fa:	9c 93       	st	X, r25
    31fc:	12 97       	sbiw	r26, 0x02	; 2
    31fe:	80 91 8b 22 	lds	r24, 0x228B
    3202:	82 83       	std	Z+2, r24	; 0x02
    3204:	13 82       	std	Z+3, r1	; 0x03
    3206:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    320a:	0f 90       	pop	r0
    320c:	0f 90       	pop	r0
    320e:	89 ed       	ldi	r24, 0xD9	; 217
    3210:	96 e0       	ldi	r25, 0x06	; 6
    3212:	ed b7       	in	r30, 0x3d	; 61
    3214:	fe b7       	in	r31, 0x3e	; 62
    3216:	81 83       	std	Z+1, r24	; 0x01
    3218:	92 83       	std	Z+2, r25	; 0x02
    321a:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    321e:	00 d0       	rcall	.+0      	; 0x3220 <cfg_dump+0x3e>
    3220:	0f 92       	push	r0
    3222:	8f ea       	ldi	r24, 0xAF	; 175
    3224:	96 e0       	ldi	r25, 0x06	; 6
    3226:	ad b7       	in	r26, 0x3d	; 61
    3228:	be b7       	in	r27, 0x3e	; 62
    322a:	11 96       	adiw	r26, 0x01	; 1
    322c:	8d 93       	st	X+, r24
    322e:	9c 93       	st	X, r25
    3230:	12 97       	sbiw	r26, 0x02	; 2
    3232:	80 91 8d 22 	lds	r24, 0x228D
    3236:	90 91 8e 22 	lds	r25, 0x228E
    323a:	a0 91 8f 22 	lds	r26, 0x228F
    323e:	b0 91 90 22 	lds	r27, 0x2290
    3242:	ed b7       	in	r30, 0x3d	; 61
    3244:	fe b7       	in	r31, 0x3e	; 62
    3246:	83 83       	std	Z+3, r24	; 0x03
    3248:	94 83       	std	Z+4, r25	; 0x04
    324a:	a5 83       	std	Z+5, r26	; 0x05
    324c:	b6 83       	std	Z+6, r27	; 0x06
    324e:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    3252:	85 e8       	ldi	r24, 0x85	; 133
    3254:	96 e0       	ldi	r25, 0x06	; 6
    3256:	ad b7       	in	r26, 0x3d	; 61
    3258:	be b7       	in	r27, 0x3e	; 62
    325a:	11 96       	adiw	r26, 0x01	; 1
    325c:	8d 93       	st	X+, r24
    325e:	9c 93       	st	X, r25
    3260:	12 97       	sbiw	r26, 0x02	; 2
    3262:	80 91 95 22 	lds	r24, 0x2295
    3266:	90 91 96 22 	lds	r25, 0x2296
    326a:	a0 91 97 22 	lds	r26, 0x2297
    326e:	b0 91 98 22 	lds	r27, 0x2298
    3272:	ed b7       	in	r30, 0x3d	; 61
    3274:	fe b7       	in	r31, 0x3e	; 62
    3276:	83 83       	std	Z+3, r24	; 0x03
    3278:	94 83       	std	Z+4, r25	; 0x04
    327a:	a5 83       	std	Z+5, r26	; 0x05
    327c:	b6 83       	std	Z+6, r27	; 0x06
    327e:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    3282:	8a e5       	ldi	r24, 0x5A	; 90
    3284:	96 e0       	ldi	r25, 0x06	; 6
    3286:	ad b7       	in	r26, 0x3d	; 61
    3288:	be b7       	in	r27, 0x3e	; 62
    328a:	11 96       	adiw	r26, 0x01	; 1
    328c:	8d 93       	st	X+, r24
    328e:	9c 93       	st	X, r25
    3290:	12 97       	sbiw	r26, 0x02	; 2
    3292:	80 91 91 22 	lds	r24, 0x2291
    3296:	90 91 92 22 	lds	r25, 0x2292
    329a:	a0 91 93 22 	lds	r26, 0x2293
    329e:	b0 91 94 22 	lds	r27, 0x2294
    32a2:	ed b7       	in	r30, 0x3d	; 61
    32a4:	fe b7       	in	r31, 0x3e	; 62
    32a6:	83 83       	std	Z+3, r24	; 0x03
    32a8:	94 83       	std	Z+4, r25	; 0x04
    32aa:	a5 83       	std	Z+5, r26	; 0x05
    32ac:	b6 83       	std	Z+6, r27	; 0x06
    32ae:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
    32b2:	10 e0       	ldi	r17, 0x00	; 0
    32b4:	8d b7       	in	r24, 0x3d	; 61
    32b6:	9e b7       	in	r25, 0x3e	; 62
    32b8:	06 96       	adiw	r24, 0x06	; 6
    32ba:	8d bf       	out	0x3d, r24	; 61
    32bc:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
		_cfg_dump_axis(axis);
    32be:	81 2f       	mov	r24, r17
    32c0:	0e 94 04 18 	call	0x3008	; 0x3008 <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    32c4:	1f 5f       	subi	r17, 0xFF	; 255
    32c6:	14 30       	cpi	r17, 0x04	; 4
    32c8:	d1 f7       	brne	.-12     	; 0x32be <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    32ca:	1f 91       	pop	r17
    32cc:	08 95       	ret

000032ce <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	6b e8       	ldi	r22, 0x8B	; 139
    32d4:	72 e2       	ldi	r23, 0x22	; 34
    32d6:	4e e6       	ldi	r20, 0x6E	; 110
    32d8:	50 e0       	ldi	r21, 0x00	; 0
    32da:	0e 94 9f 2a 	call	0x553e	; 0x553e <memcpy_to_eeprom_with_checksum>
}
    32de:	08 95       	ret

000032e0 <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    32e8:	84 36       	cpi	r24, 0x64	; 100
    32ea:	19 f0       	breq	.+6      	; 0x32f2 <cfg_read+0x12>
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	0d c0       	rjmp	.+26     	; 0x330c <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    32f2:	8b e8       	ldi	r24, 0x8B	; 139
    32f4:	92 e2       	ldi	r25, 0x22	; 34
    32f6:	60 e0       	ldi	r22, 0x00	; 0
    32f8:	70 e0       	ldi	r23, 0x00	; 0
    32fa:	4e e6       	ldi	r20, 0x6E	; 110
    32fc:	50 e0       	ldi	r21, 0x00	; 0
    32fe:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <memcpy_from_eeprom_with_checksum>
    3302:	00 97       	sbiw	r24, 0x00	; 0
    3304:	11 f0       	breq	.+4      	; 0x330a <cfg_read+0x2a>
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    330c:	c9 01       	movw	r24, r18
    330e:	08 95       	ret

00003310 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    3310:	cf 92       	push	r12
    3312:	df 92       	push	r13
    3314:	ef 92       	push	r14
    3316:	ff 92       	push	r15
    3318:	0f 93       	push	r16
    331a:	1f 93       	push	r17
    331c:	df 93       	push	r29
    331e:	cf 93       	push	r28
    3320:	0f 92       	push	r0
    3322:	0f 92       	push	r0
    3324:	cd b7       	in	r28, 0x3d	; 61
    3326:	de b7       	in	r29, 0x3e	; 62
    3328:	6c 01       	movw	r12, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    332a:	19 82       	std	Y+1, r1	; 0x01
    332c:	1a 82       	std	Y+2, r1	; 0x02
    332e:	ee 24       	eor	r14, r14
    3330:	ff 24       	eor	r15, r15
    3332:	00 e0       	ldi	r16, 0x00	; 0
    3334:	10 e0       	ldi	r17, 0x00	; 0
    3336:	22 c0       	rjmp	.+68     	; 0x337c <cfg_parse+0x6c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = toupper(text[i++])) != 0) {
		if (c == '=') {							// handle separator
    3338:	9d 33       	cpi	r25, 0x3D	; 61
    333a:	49 f4       	brne	.+18     	; 0x334e <cfg_parse+0x3e>
			text[j++] = 0;						// terminate tag at separator
    333c:	f6 01       	movw	r30, r12
    333e:	e1 0f       	add	r30, r17
    3340:	f1 1d       	adc	r31, r1
    3342:	10 82       	st	Z, r1
    3344:	1f 5f       	subi	r17, 0xFF	; 255
			val = &text[j];						// new string starts at value
    3346:	76 01       	movw	r14, r12
    3348:	e1 0e       	add	r14, r17
    334a:	f1 1c       	adc	r15, r1
    334c:	17 c0       	rjmp	.+46     	; 0x337c <cfg_parse+0x6c>
		} else if ( (c == '-') || 				// capture special characters
    334e:	9d 32       	cpi	r25, 0x2D	; 45
    3350:	81 f0       	breq	.+32     	; 0x3372 <cfg_parse+0x62>
    3352:	9b 32       	cpi	r25, 0x2B	; 43
    3354:	71 f0       	breq	.+28     	; 0x3372 <cfg_parse+0x62>
    3356:	9e 32       	cpi	r25, 0x2E	; 46
    3358:	61 f0       	breq	.+24     	; 0x3372 <cfg_parse+0x62>
    335a:	9f 33       	cpi	r25, 0x3F	; 63
    335c:	51 f0       	breq	.+20     	; 0x3372 <cfg_parse+0x62>
    335e:	98 32       	cpi	r25, 0x28	; 40
    3360:	41 f0       	breq	.+16     	; 0x3372 <cfg_parse+0x62>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'A' && c <= 'Z') {		// capture letters
    3362:	89 2f       	mov	r24, r25
    3364:	81 54       	subi	r24, 0x41	; 65
    3366:	8a 31       	cpi	r24, 0x1A	; 26
    3368:	20 f0       	brcs	.+8      	; 0x3372 <cfg_parse+0x62>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// capture numbers
    336a:	89 2f       	mov	r24, r25
    336c:	80 53       	subi	r24, 0x30	; 48
    336e:	8a 30       	cpi	r24, 0x0A	; 10
    3370:	28 f4       	brcc	.+10     	; 0x337c <cfg_parse+0x6c>
			text[j++] = c;
    3372:	f6 01       	movw	r30, r12
    3374:	e1 0f       	add	r30, r17
    3376:	f1 1d       	adc	r31, r1
    3378:	90 83       	st	Z, r25
    337a:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = toupper(text[i++])) != 0) {
    337c:	f6 01       	movw	r30, r12
    337e:	e0 0f       	add	r30, r16
    3380:	f1 1d       	adc	r31, r1
    3382:	0f 5f       	subi	r16, 0xFF	; 255
    3384:	80 81       	ld	r24, Z
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	0e 94 70 48 	call	0x90e0	; 0x90e0 <toupper>
    338c:	98 2f       	mov	r25, r24
    338e:	88 23       	and	r24, r24
    3390:	99 f6       	brne	.-90     	; 0x3338 <cfg_parse+0x28>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// capture numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// nul terminate line
    3392:	f6 01       	movw	r30, r12
    3394:	e1 0f       	add	r30, r17
    3396:	f1 1d       	adc	r31, r1
    3398:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    339a:	1f 5f       	subi	r17, 0xFF	; 255
    339c:	c6 01       	movw	r24, r12
    339e:	81 0f       	add	r24, r17
    33a0:	91 1d       	adc	r25, r1
    33a2:	89 83       	std	Y+1, r24	; 0x01
    33a4:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    33a6:	10 92 8c 22 	sts	0x228C, r1
	switch (text[0]) {
    33aa:	f6 01       	movw	r30, r12
    33ac:	80 81       	ld	r24, Z
    33ae:	81 35       	cpi	r24, 0x51	; 81
    33b0:	d1 f0       	breq	.+52     	; 0x33e6 <cfg_parse+0xd6>
    33b2:	82 35       	cpi	r24, 0x52	; 82
    33b4:	60 f4       	brcc	.+24     	; 0x33ce <cfg_parse+0xbe>
    33b6:	81 34       	cpi	r24, 0x41	; 65
    33b8:	59 f1       	breq	.+86     	; 0x3410 <cfg_parse+0x100>
    33ba:	82 34       	cpi	r24, 0x42	; 66
    33bc:	28 f4       	brcc	.+10     	; 0x33c8 <cfg_parse+0xb8>
    33be:	88 32       	cpi	r24, 0x28	; 40
    33c0:	11 f1       	breq	.+68     	; 0x3406 <cfg_parse+0xf6>
    33c2:	8f 33       	cpi	r24, 0x3F	; 63
    33c4:	39 f5       	brne	.+78     	; 0x3414 <cfg_parse+0x104>
    33c6:	0c c0       	rjmp	.+24     	; 0x33e0 <cfg_parse+0xd0>
    33c8:	8d 34       	cpi	r24, 0x4D	; 77
    33ca:	21 f5       	brne	.+72     	; 0x3414 <cfg_parse+0x104>
    33cc:	0e c0       	rjmp	.+28     	; 0x33ea <cfg_parse+0xda>
    33ce:	89 35       	cpi	r24, 0x59	; 89
    33d0:	29 f0       	breq	.+10     	; 0x33dc <cfg_parse+0xcc>
    33d2:	8a 35       	cpi	r24, 0x5A	; 90
    33d4:	d9 f0       	breq	.+54     	; 0x340c <cfg_parse+0xfc>
    33d6:	88 35       	cpi	r24, 0x58	; 88
    33d8:	e9 f4       	brne	.+58     	; 0x3414 <cfg_parse+0x104>
    33da:	1f c0       	rjmp	.+62     	; 0x341a <cfg_parse+0x10a>
    33dc:	11 e0       	ldi	r17, 0x01	; 1
    33de:	1e c0       	rjmp	.+60     	; 0x341c <cfg_parse+0x10c>
		case '?': cfg_dump(); status (TG_OK); break;
    33e0:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <cfg_dump>
    33e4:	10 c0       	rjmp	.+32     	; 0x3406 <cfg_parse+0xf6>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    33e6:	8b e0       	ldi	r24, 0x0B	; 11
    33e8:	16 c0       	rjmp	.+44     	; 0x3416 <cfg_parse+0x106>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    33ea:	c7 01       	movw	r24, r14
    33ec:	be 01       	movw	r22, r28
    33ee:	6f 5f       	subi	r22, 0xFF	; 255
    33f0:	7f 4f       	sbci	r23, 0xFF	; 255
    33f2:	0e 94 04 46 	call	0x8c08	; 0x8c08 <strtod>
    33f6:	60 93 8d 22 	sts	0x228D, r22
    33fa:	70 93 8e 22 	sts	0x228E, r23
    33fe:	80 93 8f 22 	sts	0x228F, r24
    3402:	90 93 90 22 	sts	0x2290, r25
				  status(TG_OK); 
    3406:	10 92 8c 22 	sts	0x228C, r1
    340a:	07 c0       	rjmp	.+14     	; 0x341a <cfg_parse+0x10a>
				  break;
    340c:	12 e0       	ldi	r17, 0x02	; 2
    340e:	06 c0       	rjmp	.+12     	; 0x341c <cfg_parse+0x10c>

		case 'X': axis = X; break;
		case 'Y': axis = Y; break;
		case 'Z': axis = Z; break;
    3410:	13 e0       	ldi	r17, 0x03	; 3
    3412:	04 c0       	rjmp	.+8      	; 0x341c <cfg_parse+0x10c>
		case 'A': axis = A; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    3414:	8c e0       	ldi	r24, 0x0C	; 12
    3416:	80 93 8c 22 	sts	0x228C, r24
    341a:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    341c:	80 91 8c 22 	lds	r24, 0x228C
    3420:	88 23       	and	r24, r24
    3422:	09 f0       	breq	.+2      	; 0x3426 <cfg_parse+0x116>
    3424:	ee c0       	rjmp	.+476    	; 0x3602 <cfg_parse+0x2f2>
		status(TG_OK);							// pre-emptive setting
    3426:	10 92 8c 22 	sts	0x228C, r1
		switch (text[1]) {
    342a:	f6 01       	movw	r30, r12
    342c:	81 81       	ldd	r24, Z+1	; 0x01
    342e:	8c 34       	cpi	r24, 0x4C	; 76
    3430:	09 f4       	brne	.+2      	; 0x3434 <cfg_parse+0x124>
    3432:	b8 c0       	rjmp	.+368    	; 0x35a4 <cfg_parse+0x294>
    3434:	8d 34       	cpi	r24, 0x4D	; 77
    3436:	30 f4       	brcc	.+12     	; 0x3444 <cfg_parse+0x134>
    3438:	84 34       	cpi	r24, 0x44	; 68
    343a:	a9 f1       	breq	.+106    	; 0x34a6 <cfg_parse+0x196>
    343c:	86 34       	cpi	r24, 0x46	; 70
    343e:	09 f0       	breq	.+2      	; 0x3442 <cfg_parse+0x132>
    3440:	dd c0       	rjmp	.+442    	; 0x35fc <cfg_parse+0x2ec>
    3442:	1d c0       	rjmp	.+58     	; 0x347e <cfg_parse+0x16e>
    3444:	80 35       	cpi	r24, 0x50	; 80
    3446:	09 f4       	brne	.+2      	; 0x344a <cfg_parse+0x13a>
    3448:	47 c0       	rjmp	.+142    	; 0x34d8 <cfg_parse+0x1c8>
    344a:	83 35       	cpi	r24, 0x53	; 83
    344c:	21 f0       	breq	.+8      	; 0x3456 <cfg_parse+0x146>
    344e:	8d 34       	cpi	r24, 0x4D	; 77
    3450:	09 f0       	breq	.+2      	; 0x3454 <cfg_parse+0x144>
    3452:	d4 c0       	rjmp	.+424    	; 0x35fc <cfg_parse+0x2ec>
    3454:	58 c0       	rjmp	.+176    	; 0x3506 <cfg_parse+0x1f6>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    3456:	c7 01       	movw	r24, r14
    3458:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <atoi>
    345c:	21 2f       	mov	r18, r17
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	f9 01       	movw	r30, r18
    3462:	ee 0f       	add	r30, r30
    3464:	ff 1f       	adc	r31, r31
    3466:	e2 0f       	add	r30, r18
    3468:	f3 1f       	adc	r31, r19
    346a:	23 e0       	ldi	r18, 0x03	; 3
    346c:	ee 0f       	add	r30, r30
    346e:	ff 1f       	adc	r31, r31
    3470:	2a 95       	dec	r18
    3472:	e1 f7       	brne	.-8      	; 0x346c <cfg_parse+0x15c>
    3474:	e5 57       	subi	r30, 0x75	; 117
    3476:	fd 4d       	sbci	r31, 0xDD	; 221
    3478:	81 8b       	std	Z+17, r24	; 0x11
    347a:	92 8b       	std	Z+18, r25	; 0x12
    347c:	c2 c0       	rjmp	.+388    	; 0x3602 <cfg_parse+0x2f2>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    347e:	c7 01       	movw	r24, r14
    3480:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <atoi>
    3484:	21 2f       	mov	r18, r17
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	f9 01       	movw	r30, r18
    348a:	ee 0f       	add	r30, r30
    348c:	ff 1f       	adc	r31, r31
    348e:	e2 0f       	add	r30, r18
    3490:	f3 1f       	adc	r31, r19
    3492:	13 e0       	ldi	r17, 0x03	; 3
    3494:	ee 0f       	add	r30, r30
    3496:	ff 1f       	adc	r31, r31
    3498:	1a 95       	dec	r17
    349a:	e1 f7       	brne	.-8      	; 0x3494 <cfg_parse+0x184>
    349c:	e5 57       	subi	r30, 0x75	; 117
    349e:	fd 4d       	sbci	r31, 0xDD	; 221
    34a0:	83 8b       	std	Z+19, r24	; 0x13
    34a2:	94 8b       	std	Z+20, r25	; 0x14
    34a4:	ae c0       	rjmp	.+348    	; 0x3602 <cfg_parse+0x2f2>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    34a6:	c7 01       	movw	r24, r14
    34a8:	be 01       	movw	r22, r28
    34aa:	6f 5f       	subi	r22, 0xFF	; 255
    34ac:	7f 4f       	sbci	r23, 0xFF	; 255
    34ae:	0e 94 04 46 	call	0x8c08	; 0x8c08 <strtod>
    34b2:	21 2f       	mov	r18, r17
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	f9 01       	movw	r30, r18
    34b8:	ee 0f       	add	r30, r30
    34ba:	ff 1f       	adc	r31, r31
    34bc:	e2 0f       	add	r30, r18
    34be:	f3 1f       	adc	r31, r19
    34c0:	a3 e0       	ldi	r26, 0x03	; 3
    34c2:	ee 0f       	add	r30, r30
    34c4:	ff 1f       	adc	r31, r31
    34c6:	aa 95       	dec	r26
    34c8:	e1 f7       	brne	.-8      	; 0x34c2 <cfg_parse+0x1b2>
    34ca:	e5 57       	subi	r30, 0x75	; 117
    34cc:	fd 4d       	sbci	r31, 0xDD	; 221
    34ce:	65 8b       	std	Z+21, r22	; 0x15
    34d0:	76 8b       	std	Z+22, r23	; 0x16
    34d2:	87 8b       	std	Z+23, r24	; 0x17
    34d4:	90 8f       	std	Z+24, r25	; 0x18
    34d6:	95 c0       	rjmp	.+298    	; 0x3602 <cfg_parse+0x2f2>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    34d8:	c7 01       	movw	r24, r14
    34da:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <atoi>
    34de:	68 2f       	mov	r22, r24
    34e0:	81 2f       	mov	r24, r17
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	fc 01       	movw	r30, r24
    34e6:	ee 0f       	add	r30, r30
    34e8:	ff 1f       	adc	r31, r31
    34ea:	e8 0f       	add	r30, r24
    34ec:	f9 1f       	adc	r31, r25
    34ee:	53 e0       	ldi	r21, 0x03	; 3
    34f0:	ee 0f       	add	r30, r30
    34f2:	ff 1f       	adc	r31, r31
    34f4:	5a 95       	dec	r21
    34f6:	e1 f7       	brne	.-8      	; 0x34f0 <cfg_parse+0x1e0>
    34f8:	e5 57       	subi	r30, 0x75	; 117
    34fa:	fd 4d       	sbci	r31, 0xDD	; 221
    34fc:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    34fe:	81 2f       	mov	r24, r17
    3500:	0e 94 cd 24 	call	0x499a	; 0x499a <st_set_polarity>
    3504:	7e c0       	rjmp	.+252    	; 0x3602 <cfg_parse+0x2f2>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    3506:	f6 01       	movw	r30, r12
    3508:	82 81       	ldd	r24, Z+2	; 0x02
    350a:	89 34       	cpi	r24, 0x49	; 73
    350c:	99 f4       	brne	.+38     	; 0x3534 <cfg_parse+0x224>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    350e:	c7 01       	movw	r24, r14
    3510:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <atoi>
    3514:	21 2f       	mov	r18, r17
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	f9 01       	movw	r30, r18
    351a:	ee 0f       	add	r30, r30
    351c:	ff 1f       	adc	r31, r31
    351e:	e2 0f       	add	r30, r18
    3520:	f3 1f       	adc	r31, r19
    3522:	93 e0       	ldi	r25, 0x03	; 3
    3524:	ee 0f       	add	r30, r30
    3526:	ff 1f       	adc	r31, r31
    3528:	9a 95       	dec	r25
    352a:	e1 f7       	brne	.-8      	; 0x3524 <cfg_parse+0x214>
    352c:	e5 57       	subi	r30, 0x75	; 117
    352e:	fd 4d       	sbci	r31, 0xDD	; 221
    3530:	86 87       	std	Z+14, r24	; 0x0e
    3532:	67 c0       	rjmp	.+206    	; 0x3602 <cfg_parse+0x2f2>
				} else if (text[3] == 'R') {
    3534:	f6 01       	movw	r30, r12
    3536:	83 81       	ldd	r24, Z+3	; 0x03
    3538:	82 35       	cpi	r24, 0x52	; 82
    353a:	c9 f4       	brne	.+50     	; 0x356e <cfg_parse+0x25e>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    353c:	c7 01       	movw	r24, r14
    353e:	be 01       	movw	r22, r28
    3540:	6f 5f       	subi	r22, 0xFF	; 255
    3542:	7f 4f       	sbci	r23, 0xFF	; 255
    3544:	0e 94 04 46 	call	0x8c08	; 0x8c08 <strtod>
    3548:	21 2f       	mov	r18, r17
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	f9 01       	movw	r30, r18
    354e:	ee 0f       	add	r30, r30
    3550:	ff 1f       	adc	r31, r31
    3552:	e2 0f       	add	r30, r18
    3554:	f3 1f       	adc	r31, r19
    3556:	13 e0       	ldi	r17, 0x03	; 3
    3558:	ee 0f       	add	r30, r30
    355a:	ff 1f       	adc	r31, r31
    355c:	1a 95       	dec	r17
    355e:	e1 f7       	brne	.-8      	; 0x3558 <cfg_parse+0x248>
    3560:	e5 57       	subi	r30, 0x75	; 117
    3562:	fd 4d       	sbci	r31, 0xDD	; 221
    3564:	61 8f       	std	Z+25, r22	; 0x19
    3566:	72 8f       	std	Z+26, r23	; 0x1a
    3568:	83 8f       	std	Z+27, r24	; 0x1b
    356a:	94 8f       	std	Z+28, r25	; 0x1c
    356c:	4a c0       	rjmp	.+148    	; 0x3602 <cfg_parse+0x2f2>
				} else if (text[3] == 'T') {
    356e:	84 35       	cpi	r24, 0x54	; 84
    3570:	c9 f4       	brne	.+50     	; 0x35a4 <cfg_parse+0x294>
					CFG(axis).mm_travel = strtod(val, &end); break;
    3572:	c7 01       	movw	r24, r14
    3574:	be 01       	movw	r22, r28
    3576:	6f 5f       	subi	r22, 0xFF	; 255
    3578:	7f 4f       	sbci	r23, 0xFF	; 255
    357a:	0e 94 04 46 	call	0x8c08	; 0x8c08 <strtod>
    357e:	21 2f       	mov	r18, r17
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	f9 01       	movw	r30, r18
    3584:	ee 0f       	add	r30, r30
    3586:	ff 1f       	adc	r31, r31
    3588:	e2 0f       	add	r30, r18
    358a:	f3 1f       	adc	r31, r19
    358c:	a3 e0       	ldi	r26, 0x03	; 3
    358e:	ee 0f       	add	r30, r30
    3590:	ff 1f       	adc	r31, r31
    3592:	aa 95       	dec	r26
    3594:	e1 f7       	brne	.-8      	; 0x358e <cfg_parse+0x27e>
    3596:	e5 57       	subi	r30, 0x75	; 117
    3598:	fd 4d       	sbci	r31, 0xDD	; 221
    359a:	65 8f       	std	Z+29, r22	; 0x1d
    359c:	76 8f       	std	Z+30, r23	; 0x1e
    359e:	87 8f       	std	Z+31, r24	; 0x1f
    35a0:	90 a3       	std	Z+32, r25	; 0x20
    35a2:	2f c0       	rjmp	.+94     	; 0x3602 <cfg_parse+0x2f2>
				}
			case 'L': 
				if (text[2] == 'O') {
    35a4:	f6 01       	movw	r30, r12
    35a6:	82 81       	ldd	r24, Z+2	; 0x02
    35a8:	8f 34       	cpi	r24, 0x4F	; 79
    35aa:	99 f4       	brne	.+38     	; 0x35d2 <cfg_parse+0x2c2>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    35ac:	c7 01       	movw	r24, r14
    35ae:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <atoi>
    35b2:	21 2f       	mov	r18, r17
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	f9 01       	movw	r30, r18
    35b8:	ee 0f       	add	r30, r30
    35ba:	ff 1f       	adc	r31, r31
    35bc:	e2 0f       	add	r30, r18
    35be:	f3 1f       	adc	r31, r19
    35c0:	53 e0       	ldi	r21, 0x03	; 3
    35c2:	ee 0f       	add	r30, r30
    35c4:	ff 1f       	adc	r31, r31
    35c6:	5a 95       	dec	r21
    35c8:	e1 f7       	brne	.-8      	; 0x35c2 <cfg_parse+0x2b2>
    35ca:	e5 57       	subi	r30, 0x75	; 117
    35cc:	fd 4d       	sbci	r31, 0xDD	; 221
    35ce:	87 87       	std	Z+15, r24	; 0x0f
    35d0:	18 c0       	rjmp	.+48     	; 0x3602 <cfg_parse+0x2f2>
				} else if (text[2] == 'I') {
    35d2:	89 34       	cpi	r24, 0x49	; 73
    35d4:	99 f4       	brne	.+38     	; 0x35fc <cfg_parse+0x2ec>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    35d6:	c7 01       	movw	r24, r14
    35d8:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <atoi>
    35dc:	21 2f       	mov	r18, r17
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	f9 01       	movw	r30, r18
    35e2:	ee 0f       	add	r30, r30
    35e4:	ff 1f       	adc	r31, r31
    35e6:	e2 0f       	add	r30, r18
    35e8:	f3 1f       	adc	r31, r19
    35ea:	23 e0       	ldi	r18, 0x03	; 3
    35ec:	ee 0f       	add	r30, r30
    35ee:	ff 1f       	adc	r31, r31
    35f0:	2a 95       	dec	r18
    35f2:	e1 f7       	brne	.-8      	; 0x35ec <cfg_parse+0x2dc>
    35f4:	e5 57       	subi	r30, 0x75	; 117
    35f6:	fd 4d       	sbci	r31, 0xDD	; 221
    35f8:	85 a3       	std	Z+37, r24	; 0x25
    35fa:	03 c0       	rjmp	.+6      	; 0x3602 <cfg_parse+0x2f2>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    35fc:	8c e0       	ldi	r24, 0x0C	; 12
    35fe:	80 93 8c 22 	sts	0x228C, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    3602:	80 91 8c 22 	lds	r24, 0x228C
    3606:	b6 01       	movw	r22, r12
    3608:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    360c:	80 91 8c 22 	lds	r24, 0x228C
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	0f 90       	pop	r0
    3614:	0f 90       	pop	r0
    3616:	cf 91       	pop	r28
    3618:	df 91       	pop	r29
    361a:	1f 91       	pop	r17
    361c:	0f 91       	pop	r16
    361e:	ff 90       	pop	r15
    3620:	ef 90       	pop	r14
    3622:	df 90       	pop	r13
    3624:	cf 90       	pop	r12
    3626:	08 95       	ret

00003628 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3628:	ef 92       	push	r14
    362a:	ff 92       	push	r15
    362c:	0f 93       	push	r16
    362e:	1f 93       	push	r17
    3630:	df 93       	push	r29
    3632:	cf 93       	push	r28
    3634:	cd b7       	in	r28, 0x3d	; 61
    3636:	de b7       	in	r29, 0x3e	; 62
    3638:	a8 97       	sbiw	r28, 0x28	; 40
    363a:	cd bf       	out	0x3d, r28	; 61
    363c:	de bf       	out	0x3e, r29	; 62
    363e:	0f e4       	ldi	r16, 0x4F	; 79
    3640:	12 e0       	ldi	r17, 0x02	; 2
    3642:	a0 e0       	ldi	r26, 0x00	; 0
    3644:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    3646:	7e 01       	movw	r14, r28
    3648:	08 94       	sec
    364a:	e1 1c       	adc	r14, r1
    364c:	f1 1c       	adc	r15, r1
    364e:	02 c0       	rjmp	.+4      	; 0x3654 <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3650:	0f 5f       	subi	r16, 0xFF	; 255
    3652:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    3654:	f8 01       	movw	r30, r16
    3656:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    3658:	88 23       	and	r24, r24
    365a:	89 f4       	brne	.+34     	; 0x367e <cfg_test+0x56>
			text[j] = 0;
    365c:	ce 01       	movw	r24, r28
    365e:	01 96       	adiw	r24, 0x01	; 1
    3660:	a8 0f       	add	r26, r24
    3662:	b9 1f       	adc	r27, r25
    3664:	1c 92       	st	X, r1
			cfg_parse(text);
    3666:	0e 94 88 19 	call	0x3310	; 0x3310 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    366a:	a8 96       	adiw	r28, 0x28	; 40
    366c:	cd bf       	out	0x3d, r28	; 61
    366e:	de bf       	out	0x3e, r29	; 62
    3670:	cf 91       	pop	r28
    3672:	df 91       	pop	r29
    3674:	1f 91       	pop	r17
    3676:	0f 91       	pop	r16
    3678:	ff 90       	pop	r15
    367a:	ef 90       	pop	r14
    367c:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    367e:	8d 30       	cpi	r24, 0x0D	; 13
    3680:	21 f0       	breq	.+8      	; 0x368a <cfg_test+0x62>
    3682:	8a 30       	cpi	r24, 0x0A	; 10
    3684:	11 f0       	breq	.+4      	; 0x368a <cfg_test+0x62>
    3686:	8b 33       	cpi	r24, 0x3B	; 59
    3688:	49 f4       	brne	.+18     	; 0x369c <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    368a:	ae 0d       	add	r26, r14
    368c:	bf 1d       	adc	r27, r15
    368e:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    3690:	c7 01       	movw	r24, r14
    3692:	0e 94 88 19 	call	0x3310	; 0x3310 <cfg_parse>
    3696:	a0 e0       	ldi	r26, 0x00	; 0
    3698:	b0 e0       	ldi	r27, 0x00	; 0
    369a:	da cf       	rjmp	.-76     	; 0x3650 <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    369c:	81 32       	cpi	r24, 0x21	; 33
    369e:	c0 f2       	brcs	.-80     	; 0x3650 <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    36a0:	f7 01       	movw	r30, r14
    36a2:	ea 0f       	add	r30, r26
    36a4:	fb 1f       	adc	r31, r27
    36a6:	80 83       	st	Z, r24
    36a8:	11 96       	adiw	r26, 0x01	; 1
    36aa:	d2 cf       	rjmp	.-92     	; 0x3650 <cfg_test+0x28>

000036ac <en_init>:


void en_init(void) 
{
	return;
}
    36ac:	08 95       	ret

000036ae <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
    36ae:	88 23       	and	r24, r24
    36b0:	b1 f0       	breq	.+44     	; 0x36de <en_write+0x30>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    36b2:	e0 91 87 22 	lds	r30, 0x2287
    36b6:	f0 91 88 22 	lds	r31, 0x2288
    36ba:	80 e2       	ldi	r24, 0x20	; 32
    36bc:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    36be:	e0 91 77 22 	lds	r30, 0x2277
    36c2:	f0 91 78 22 	lds	r31, 0x2278
    36c6:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    36c8:	e0 91 67 22 	lds	r30, 0x2267
    36cc:	f0 91 68 22 	lds	r31, 0x2268
    36d0:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    36d2:	e0 91 57 22 	lds	r30, 0x2257
    36d6:	f0 91 58 22 	lds	r31, 0x2258
    36da:	85 83       	std	Z+5, r24	; 0x05
    36dc:	08 95       	ret
void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36de:	e0 91 87 22 	lds	r30, 0x2287
    36e2:	f0 91 88 22 	lds	r31, 0x2288
    36e6:	80 e2       	ldi	r24, 0x20	; 32
    36e8:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36ea:	e0 91 77 22 	lds	r30, 0x2277
    36ee:	f0 91 78 22 	lds	r31, 0x2278
    36f2:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36f4:	e0 91 67 22 	lds	r30, 0x2267
    36f8:	f0 91 68 22 	lds	r31, 0x2268
    36fc:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36fe:	e0 91 57 22 	lds	r30, 0x2257
    3702:	f0 91 58 22 	lds	r31, 0x2258
    3706:	86 83       	std	Z+6, r24	; 0x06
    3708:	08 95       	ret

0000370a <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    370a:	0f 93       	push	r16
    370c:	df 93       	push	r29
    370e:	cf 93       	push	r28
    3710:	0f 92       	push	r0
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    3716:	8b ec       	ldi	r24, 0xCB	; 203
    3718:	e0 e5       	ldi	r30, 0x50	; 80
    371a:	f0 e0       	ldi	r31, 0x00	; 0
    371c:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    371e:	88 e0       	ldi	r24, 0x08	; 8
    3720:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    3724:	80 91 51 00 	lds	r24, 0x0051
    3728:	83 ff       	sbrs	r24, 3
    372a:	fc cf       	rjmp	.-8      	; 0x3724 <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    372c:	82 ec       	ldi	r24, 0xC2	; 194
    372e:	e0 e5       	ldi	r30, 0x50	; 80
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    3734:	88 e1       	ldi	r24, 0x18	; 24
    3736:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    373a:	80 91 51 00 	lds	r24, 0x0051
    373e:	84 ff       	sbrs	r24, 4
    3740:	fc cf       	rjmp	.-8      	; 0x373a <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3742:	8f b7       	in	r24, 0x3f	; 63
    3744:	89 83       	std	Y+1, r24	; 0x01
    3746:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3748:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    374a:	24 e0       	ldi	r18, 0x04	; 4
    374c:	80 e4       	ldi	r24, 0x40	; 64
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	fc 01       	movw	r30, r24
    3752:	08 ed       	ldi	r16, 0xD8	; 216
    3754:	04 bf       	out	0x34, r16	; 52
    3756:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3758:	89 81       	ldd	r24, Y+1	; 0x01
    375a:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    375c:	80 91 50 00 	lds	r24, 0x0050
    3760:	8e 7f       	andi	r24, 0xFE	; 254
    3762:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    3766:	0f 90       	pop	r0
    3768:	cf 91       	pop	r28
    376a:	df 91       	pop	r29
    376c:	0f 91       	pop	r16
    376e:	08 95       	ret

00003770 <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    3770:	0e 94 85 1b 	call	0x370a	; 0x370a <xmega_init_clocks>
}
    3774:	08 95       	ret

00003776 <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3776:	0f 93       	push	r16
    3778:	df 93       	push	r29
    377a:	cf 93       	push	r28
    377c:	0f 92       	push	r0
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3782:	2f b7       	in	r18, 0x3f	; 63
    3784:	29 83       	std	Y+1, r18	; 0x01
    3786:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3788:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    378a:	fc 01       	movw	r30, r24
    378c:	08 ed       	ldi	r16, 0xD8	; 216
    378e:	04 bf       	out	0x34, r16	; 52
    3790:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	8f bf       	out	0x3f, r24	; 63
#endif
}
    3796:	0f 90       	pop	r0
    3798:	cf 91       	pop	r28
    379a:	df 91       	pop	r29
    379c:	0f 91       	pop	r16
    379e:	08 95       	ret

000037a0 <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

int mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    37a0:	10 92 74 21 	sts	0x2174, r1
	ma.arc_state = MC_STATE_OFF;
    37a4:	10 92 f9 22 	sts	0x22F9, r1
	return (TG_OK);
}
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	08 95       	ret

000037ae <mc_go_home>:
 */

int mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    37ae:	8c e0       	ldi	r24, 0x0C	; 12
    37b0:	e5 e7       	ldi	r30, 0x75	; 117
    37b2:	f1 e2       	ldi	r31, 0x21	; 33
    37b4:	df 01       	movw	r26, r30
    37b6:	1d 92       	st	X+, r1
    37b8:	8a 95       	dec	r24
    37ba:	e9 f7       	brne	.-6      	; 0x37b6 <mc_go_home+0x8>
	return (TG_OK);
}
    37bc:	80 e0       	ldi	r24, 0x00	; 0
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	08 95       	ret

000037c2 <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    37c2:	8c e0       	ldi	r24, 0x0C	; 12
    37c4:	e5 e7       	ldi	r30, 0x75	; 117
    37c6:	f1 e2       	ldi	r31, 0x21	; 33
    37c8:	df 01       	movw	r26, r30
    37ca:	1d 92       	st	X+, r1
    37cc:	8a 95       	dec	r24
    37ce:	e9 f7       	brne	.-6      	; 0x37ca <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    37d0:	10 92 74 21 	sts	0x2174, r1
	ma.arc_state = MC_STATE_OFF;
    37d4:	10 92 f9 22 	sts	0x22F9, r1
}
    37d8:	08 95       	ret

000037da <mc_line_continue>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continue() 
{
    37da:	af 92       	push	r10
    37dc:	bf 92       	push	r11
    37de:	cf 92       	push	r12
    37e0:	df 92       	push	r13
    37e2:	ef 92       	push	r14
    37e4:	ff 92       	push	r15
    37e6:	0f 93       	push	r16
    37e8:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    37ea:	80 91 74 21 	lds	r24, 0x2174
    37ee:	88 23       	and	r24, r24
    37f0:	19 f4       	brne	.+6      	; 0x37f8 <mc_line_continue+0x1e>
    37f2:	23 e0       	ldi	r18, 0x03	; 3
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	30 c0       	rjmp	.+96     	; 0x3858 <mc_line_continue+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    37f8:	82 e0       	ldi	r24, 0x02	; 2
    37fa:	80 93 74 21 	sts	0x2174, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    37fe:	0e 94 ed 2c 	call	0x59da	; 0x59da <mv_test_move_buffer_full>
    3802:	88 23       	and	r24, r24
    3804:	19 f0       	breq	.+6      	; 0x380c <mc_line_continue+0x32>
    3806:	22 e0       	ldi	r18, 0x02	; 2
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	26 c0       	rjmp	.+76     	; 0x3858 <mc_line_continue+0x7e>
		return (TG_EAGAIN);
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    380c:	60 91 8d 21 	lds	r22, 0x218D
    3810:	70 91 8e 21 	lds	r23, 0x218E
    3814:	80 91 8f 21 	lds	r24, 0x218F
    3818:	90 91 90 21 	lds	r25, 0x2190
    381c:	20 91 91 21 	lds	r18, 0x2191
    3820:	30 91 92 21 	lds	r19, 0x2192
    3824:	40 91 93 21 	lds	r20, 0x2193
    3828:	50 91 94 21 	lds	r21, 0x2194
    382c:	e0 90 95 21 	lds	r14, 0x2195
    3830:	f0 90 96 21 	lds	r15, 0x2196
    3834:	00 91 97 21 	lds	r16, 0x2197
    3838:	10 91 98 21 	lds	r17, 0x2198
    383c:	a0 90 99 21 	lds	r10, 0x2199
    3840:	b0 90 9a 21 	lds	r11, 0x219A
    3844:	c0 90 9b 21 	lds	r12, 0x219B
    3848:	d0 90 9c 21 	lds	r13, 0x219C
    384c:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    3850:	10 92 74 21 	sts	0x2174, r1
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3858:	c9 01       	movw	r24, r18
    385a:	1f 91       	pop	r17
    385c:	0f 91       	pop	r16
    385e:	ff 90       	pop	r15
    3860:	ef 90       	pop	r14
    3862:	df 90       	pop	r13
    3864:	cf 90       	pop	r12
    3866:	bf 90       	pop	r11
    3868:	af 90       	pop	r10
    386a:	08 95       	ret

0000386c <mc_dwell>:
 * NOTE: It's not necessary to set the target as this is set correctly in the Gcode. 
 */

int mc_dwell(double seconds) 
{
	mc.steps[X] = 0;
    386c:	10 92 8d 21 	sts	0x218D, r1
    3870:	10 92 8e 21 	sts	0x218E, r1
    3874:	10 92 8f 21 	sts	0x218F, r1
    3878:	10 92 90 21 	sts	0x2190, r1
	mc.steps[Y] = 0;
    387c:	10 92 91 21 	sts	0x2191, r1
    3880:	10 92 92 21 	sts	0x2192, r1
    3884:	10 92 93 21 	sts	0x2193, r1
    3888:	10 92 94 21 	sts	0x2194, r1
	mc.steps[Z] = 0;
    388c:	10 92 95 21 	sts	0x2195, r1
    3890:	10 92 96 21 	sts	0x2196, r1
    3894:	10 92 97 21 	sts	0x2197, r1
    3898:	10 92 98 21 	sts	0x2198, r1
	mc.mm_of_travel = 0;	// not actually used, but makes debug make more sense
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	40 e0       	ldi	r20, 0x00	; 0
    38a2:	50 e0       	ldi	r21, 0x00	; 0
    38a4:	20 93 9d 21 	sts	0x219D, r18
    38a8:	30 93 9e 21 	sts	0x219E, r19
    38ac:	40 93 9f 21 	sts	0x219F, r20
    38b0:	50 93 a0 21 	sts	0x21A0, r21
	mc.microseconds = trunc(seconds*1000000);
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	34 e2       	ldi	r19, 0x24	; 36
    38b8:	44 e7       	ldi	r20, 0x74	; 116
    38ba:	59 e4       	ldi	r21, 0x49	; 73
    38bc:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    38c0:	0e 94 6d 42 	call	0x84da	; 0x84da <__fixunssfsi>
    38c4:	60 93 99 21 	sts	0x2199, r22
    38c8:	70 93 9a 21 	sts	0x219A, r23
    38cc:	80 93 9b 21 	sts	0x219B, r24
    38d0:	90 93 9c 21 	sts	0x219C, r25
	mc.line_state = MC_STATE_NEW;
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	80 93 74 21 	sts	0x2174, r24
	return (mc_line_continue());
    38da:	0e 94 ed 1b 	call	0x37da	; 0x37da <mc_line_continue>
}
    38de:	08 95       	ret

000038e0 <mc_line>:
 * Zero length lines that are actually dwells come in thru mc_dwell().
 * The mv_queue doesn't check line length and queues anything.
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    38e0:	2f 92       	push	r2
    38e2:	3f 92       	push	r3
    38e4:	4f 92       	push	r4
    38e6:	5f 92       	push	r5
    38e8:	6f 92       	push	r6
    38ea:	7f 92       	push	r7
    38ec:	8f 92       	push	r8
    38ee:	9f 92       	push	r9
    38f0:	af 92       	push	r10
    38f2:	bf 92       	push	r11
    38f4:	cf 92       	push	r12
    38f6:	df 92       	push	r13
    38f8:	ef 92       	push	r14
    38fa:	ff 92       	push	r15
    38fc:	0f 93       	push	r16
    38fe:	1f 93       	push	r17
    3900:	df 93       	push	r29
    3902:	cf 93       	push	r28
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62
    3908:	62 97       	sbiw	r28, 0x12	; 18
    390a:	cd bf       	out	0x3d, r28	; 61
    390c:	de bf       	out	0x3e, r29	; 62
    390e:	19 01       	movw	r2, r18
    3910:	2a 01       	movw	r4, r20
    3912:	ad 86       	std	Y+13, r10	; 0x0d
    3914:	be 86       	std	Y+14, r11	; 0x0e
    3916:	cf 86       	std	Y+15, r12	; 0x0f
    3918:	d8 8a       	std	Y+16, r13	; 0x10
    391a:	89 8a       	std	Y+17, r8	; 0x11
    391c:	9a 8a       	std	Y+18, r9	; 0x12
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    391e:	20 91 ac 22 	lds	r18, 0x22AC
    3922:	30 91 ad 22 	lds	r19, 0x22AD
    3926:	40 91 ae 22 	lds	r20, 0x22AE
    392a:	50 91 af 22 	lds	r21, 0x22AF
    392e:	29 87       	std	Y+9, r18	; 0x09
    3930:	3a 87       	std	Y+10, r19	; 0x0a
    3932:	4b 87       	std	Y+11, r20	; 0x0b
    3934:	5c 87       	std	Y+12, r21	; 0x0c
    3936:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    393a:	0e 94 8b 44 	call	0x8916	; 0x8916 <lround>
    393e:	3b 01       	movw	r6, r22
    3940:	4c 01       	movw	r8, r24
    3942:	60 92 81 21 	sts	0x2181, r6
    3946:	70 92 82 21 	sts	0x2182, r7
    394a:	80 92 83 21 	sts	0x2183, r8
    394e:	90 92 84 21 	sts	0x2184, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    3952:	80 91 c4 22 	lds	r24, 0x22C4
    3956:	90 91 c5 22 	lds	r25, 0x22C5
    395a:	a0 91 c6 22 	lds	r26, 0x22C6
    395e:	b0 91 c7 22 	lds	r27, 0x22C7
    3962:	8d 83       	std	Y+5, r24	; 0x05
    3964:	9e 83       	std	Y+6, r25	; 0x06
    3966:	af 83       	std	Y+7, r26	; 0x07
    3968:	b8 87       	std	Y+8, r27	; 0x08
    396a:	c2 01       	movw	r24, r4
    396c:	b1 01       	movw	r22, r2
    396e:	2d 81       	ldd	r18, Y+5	; 0x05
    3970:	3e 81       	ldd	r19, Y+6	; 0x06
    3972:	4f 81       	ldd	r20, Y+7	; 0x07
    3974:	58 85       	ldd	r21, Y+8	; 0x08
    3976:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    397a:	0e 94 8b 44 	call	0x8916	; 0x8916 <lround>
    397e:	5b 01       	movw	r10, r22
    3980:	6c 01       	movw	r12, r24
    3982:	a0 92 85 21 	sts	0x2185, r10
    3986:	b0 92 86 21 	sts	0x2186, r11
    398a:	c0 92 87 21 	sts	0x2187, r12
    398e:	d0 92 88 21 	sts	0x2188, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    3992:	20 91 dc 22 	lds	r18, 0x22DC
    3996:	30 91 dd 22 	lds	r19, 0x22DD
    399a:	40 91 de 22 	lds	r20, 0x22DE
    399e:	50 91 df 22 	lds	r21, 0x22DF
    39a2:	29 83       	std	Y+1, r18	; 0x01
    39a4:	3a 83       	std	Y+2, r19	; 0x02
    39a6:	4b 83       	std	Y+3, r20	; 0x03
    39a8:	5c 83       	std	Y+4, r21	; 0x04
    39aa:	c8 01       	movw	r24, r16
    39ac:	b7 01       	movw	r22, r14
    39ae:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    39b2:	0e 94 8b 44 	call	0x8916	; 0x8916 <lround>
    39b6:	9b 01       	movw	r18, r22
    39b8:	ac 01       	movw	r20, r24
    39ba:	20 93 89 21 	sts	0x2189, r18
    39be:	30 93 8a 21 	sts	0x218A, r19
    39c2:	40 93 8b 21 	sts	0x218B, r20
    39c6:	50 93 8c 21 	sts	0x218C, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    39ca:	80 91 75 21 	lds	r24, 0x2175
    39ce:	90 91 76 21 	lds	r25, 0x2176
    39d2:	a0 91 77 21 	lds	r26, 0x2177
    39d6:	b0 91 78 21 	lds	r27, 0x2178
    39da:	84 01       	movw	r16, r8
    39dc:	73 01       	movw	r14, r6
    39de:	e8 1a       	sub	r14, r24
    39e0:	f9 0a       	sbc	r15, r25
    39e2:	0a 0b       	sbc	r16, r26
    39e4:	1b 0b       	sbc	r17, r27
    39e6:	e0 92 8d 21 	sts	0x218D, r14
    39ea:	f0 92 8e 21 	sts	0x218E, r15
    39ee:	00 93 8f 21 	sts	0x218F, r16
    39f2:	10 93 90 21 	sts	0x2190, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    39f6:	80 91 79 21 	lds	r24, 0x2179
    39fa:	90 91 7a 21 	lds	r25, 0x217A
    39fe:	a0 91 7b 21 	lds	r26, 0x217B
    3a02:	b0 91 7c 21 	lds	r27, 0x217C
    3a06:	a8 1a       	sub	r10, r24
    3a08:	b9 0a       	sbc	r11, r25
    3a0a:	ca 0a       	sbc	r12, r26
    3a0c:	db 0a       	sbc	r13, r27
    3a0e:	a0 92 91 21 	sts	0x2191, r10
    3a12:	b0 92 92 21 	sts	0x2192, r11
    3a16:	c0 92 93 21 	sts	0x2193, r12
    3a1a:	d0 92 94 21 	sts	0x2194, r13
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    3a1e:	80 91 7d 21 	lds	r24, 0x217D
    3a22:	90 91 7e 21 	lds	r25, 0x217E
    3a26:	a0 91 7f 21 	lds	r26, 0x217F
    3a2a:	b0 91 80 21 	lds	r27, 0x2180
    3a2e:	19 01       	movw	r2, r18
    3a30:	2a 01       	movw	r4, r20
    3a32:	28 1a       	sub	r2, r24
    3a34:	39 0a       	sbc	r3, r25
    3a36:	4a 0a       	sbc	r4, r26
    3a38:	5b 0a       	sbc	r5, r27
    3a3a:	20 92 95 21 	sts	0x2195, r2
    3a3e:	30 92 96 21 	sts	0x2196, r3
    3a42:	40 92 97 21 	sts	0x2197, r4
    3a46:	50 92 98 21 	sts	0x2198, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    3a4a:	d6 01       	movw	r26, r12
    3a4c:	c5 01       	movw	r24, r10
    3a4e:	8e 0d       	add	r24, r14
    3a50:	9f 1d       	adc	r25, r15
    3a52:	a0 1f       	adc	r26, r16
    3a54:	b1 1f       	adc	r27, r17
    3a56:	82 0d       	add	r24, r2
    3a58:	93 1d       	adc	r25, r3
    3a5a:	a4 1d       	adc	r26, r4
    3a5c:	b5 1d       	adc	r27, r5
    3a5e:	00 97       	sbiw	r24, 0x00	; 0
    3a60:	a1 05       	cpc	r26, r1
    3a62:	b1 05       	cpc	r27, r1
    3a64:	19 f4       	brne	.+6      	; 0x3a6c <mc_line+0x18c>
    3a66:	24 e1       	ldi	r18, 0x14	; 20
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	72 c0       	rjmp	.+228    	; 0x3b50 <mc_line+0x270>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    3a6c:	49 89       	ldd	r20, Y+17	; 0x11
    3a6e:	5a 89       	ldd	r21, Y+18	; 0x12
    3a70:	45 2b       	or	r20, r21
    3a72:	59 f0       	breq	.+22     	; 0x3a8a <mc_line+0x1aa>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3a74:	60 ec       	ldi	r22, 0xC0	; 192
    3a76:	71 ee       	ldi	r23, 0xE1	; 225
    3a78:	84 e6       	ldi	r24, 0x64	; 100
    3a7a:	9c e4       	ldi	r25, 0x4C	; 76
    3a7c:	2d 85       	ldd	r18, Y+13	; 0x0d
    3a7e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a80:	4f 85       	ldd	r20, Y+15	; 0x0f
    3a82:	58 89       	ldd	r21, Y+16	; 0x10
    3a84:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    3a88:	4a c0       	rjmp	.+148    	; 0x3b1e <mc_line+0x23e>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    3a8a:	c8 01       	movw	r24, r16
    3a8c:	b7 01       	movw	r22, r14
    3a8e:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    3a92:	29 85       	ldd	r18, Y+9	; 0x09
    3a94:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a96:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a98:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a9a:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    3a9e:	0e 94 66 45 	call	0x8acc	; 0x8acc <square>
    3aa2:	3b 01       	movw	r6, r22
    3aa4:	4c 01       	movw	r8, r24
    3aa6:	c6 01       	movw	r24, r12
    3aa8:	b5 01       	movw	r22, r10
    3aaa:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    3aae:	2d 81       	ldd	r18, Y+5	; 0x05
    3ab0:	3e 81       	ldd	r19, Y+6	; 0x06
    3ab2:	4f 81       	ldd	r20, Y+7	; 0x07
    3ab4:	58 85       	ldd	r21, Y+8	; 0x08
    3ab6:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    3aba:	0e 94 66 45 	call	0x8acc	; 0x8acc <square>
    3abe:	5b 01       	movw	r10, r22
    3ac0:	6c 01       	movw	r12, r24
    3ac2:	c2 01       	movw	r24, r4
    3ac4:	b1 01       	movw	r22, r2
    3ac6:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    3aca:	29 81       	ldd	r18, Y+1	; 0x01
    3acc:	3a 81       	ldd	r19, Y+2	; 0x02
    3ace:	4b 81       	ldd	r20, Y+3	; 0x03
    3ad0:	5c 81       	ldd	r21, Y+4	; 0x04
    3ad2:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    3ad6:	0e 94 66 45 	call	0x8acc	; 0x8acc <square>
    3ada:	7b 01       	movw	r14, r22
    3adc:	8c 01       	movw	r16, r24
    3ade:	c4 01       	movw	r24, r8
    3ae0:	b3 01       	movw	r22, r6
    3ae2:	a6 01       	movw	r20, r12
    3ae4:	95 01       	movw	r18, r10
    3ae6:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <__addsf3>
    3aea:	a8 01       	movw	r20, r16
    3aec:	97 01       	movw	r18, r14
    3aee:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <__addsf3>
    3af2:	0e 94 28 45 	call	0x8a50	; 0x8a50 <sqrt>
    3af6:	60 93 9d 21 	sts	0x219D, r22
    3afa:	70 93 9e 21 	sts	0x219E, r23
    3afe:	80 93 9f 21 	sts	0x219F, r24
    3b02:	90 93 a0 21 	sts	0x21A0, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3b06:	2d 85       	ldd	r18, Y+13	; 0x0d
    3b08:	3e 85       	ldd	r19, Y+14	; 0x0e
    3b0a:	4f 85       	ldd	r20, Y+15	; 0x0f
    3b0c:	58 89       	ldd	r21, Y+16	; 0x10
    3b0e:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	34 e2       	ldi	r19, 0x24	; 36
    3b16:	44 e7       	ldi	r20, 0x74	; 116
    3b18:	59 e4       	ldi	r21, 0x49	; 73
    3b1a:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    3b1e:	0e 94 8b 44 	call	0x8916	; 0x8916 <lround>
    3b22:	60 93 99 21 	sts	0x2199, r22
    3b26:	70 93 9a 21 	sts	0x219A, r23
    3b2a:	80 93 9b 21 	sts	0x219B, r24
    3b2e:	90 93 9c 21 	sts	0x219C, r25
	}
	mc.line_state = MC_STATE_NEW;
    3b32:	81 e0       	ldi	r24, 0x01	; 1
    3b34:	80 93 74 21 	sts	0x2174, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3b38:	e5 e7       	ldi	r30, 0x75	; 117
    3b3a:	f1 e2       	ldi	r31, 0x21	; 33
    3b3c:	df 01       	movw	r26, r30
    3b3e:	1c 96       	adiw	r26, 0x0c	; 12
    3b40:	8c e0       	ldi	r24, 0x0C	; 12
    3b42:	0d 90       	ld	r0, X+
    3b44:	01 92       	st	Z+, r0
    3b46:	81 50       	subi	r24, 0x01	; 1
    3b48:	e1 f7       	brne	.-8      	; 0x3b42 <mc_line+0x262>
	return (mc_line_continue());
    3b4a:	0e 94 ed 1b 	call	0x37da	; 0x37da <mc_line_continue>
    3b4e:	9c 01       	movw	r18, r24
}
    3b50:	c9 01       	movw	r24, r18
    3b52:	62 96       	adiw	r28, 0x12	; 18
    3b54:	cd bf       	out	0x3d, r28	; 61
    3b56:	de bf       	out	0x3e, r29	; 62
    3b58:	cf 91       	pop	r28
    3b5a:	df 91       	pop	r29
    3b5c:	1f 91       	pop	r17
    3b5e:	0f 91       	pop	r16
    3b60:	ff 90       	pop	r15
    3b62:	ef 90       	pop	r14
    3b64:	df 90       	pop	r13
    3b66:	cf 90       	pop	r12
    3b68:	bf 90       	pop	r11
    3b6a:	af 90       	pop	r10
    3b6c:	9f 90       	pop	r9
    3b6e:	8f 90       	pop	r8
    3b70:	7f 90       	pop	r7
    3b72:	6f 90       	pop	r6
    3b74:	5f 90       	pop	r5
    3b76:	4f 90       	pop	r4
    3b78:	3f 90       	pop	r3
    3b7a:	2f 90       	pop	r2
    3b7c:	08 95       	ret

00003b7e <mc_arc_continue>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continue() 
{
    3b7e:	8f 92       	push	r8
    3b80:	9f 92       	push	r9
    3b82:	af 92       	push	r10
    3b84:	bf 92       	push	r11
    3b86:	cf 92       	push	r12
    3b88:	df 92       	push	r13
    3b8a:	ef 92       	push	r14
    3b8c:	ff 92       	push	r15
    3b8e:	0f 93       	push	r16
    3b90:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3b92:	80 91 f9 22 	lds	r24, 0x22F9
    3b96:	88 23       	and	r24, r24
    3b98:	19 f4       	brne	.+6      	; 0x3ba0 <mc_arc_continue+0x22>
    3b9a:	23 e0       	ldi	r18, 0x03	; 3
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	dd c0       	rjmp	.+442    	; 0x3d5a <mc_arc_continue+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3ba0:	81 30       	cpi	r24, 0x01	; 1
    3ba2:	09 f0       	breq	.+2      	; 0x3ba6 <mc_arc_continue+0x28>
    3ba4:	ca c0       	rjmp	.+404    	; 0x3d3a <mc_arc_continue+0x1bc>
		ma.segment_counter=0;
    3ba6:	10 92 fc 22 	sts	0x22FC, r1
    3baa:	10 92 fd 22 	sts	0x22FD, r1
		ma.arc_state = MC_STATE_RUNNING;
    3bae:	82 e0       	ldi	r24, 0x02	; 2
    3bb0:	80 93 f9 22 	sts	0x22F9, r24
    3bb4:	c2 c0       	rjmp	.+388    	; 0x3d3a <mc_arc_continue+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3bb6:	0e 94 ed 2c 	call	0x59da	; 0x59da <mv_test_move_buffer_full>
    3bba:	88 23       	and	r24, r24
    3bbc:	19 f0       	breq	.+6      	; 0x3bc4 <mc_arc_continue+0x46>
    3bbe:	22 e0       	ldi	r18, 0x02	; 2
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	cb c0       	rjmp	.+406    	; 0x3d5a <mc_arc_continue+0x1dc>
			return (TG_EAGAIN);
		}
		ma.segment_counter++;
    3bc4:	80 91 fc 22 	lds	r24, 0x22FC
    3bc8:	90 91 fd 22 	lds	r25, 0x22FD
    3bcc:	01 96       	adiw	r24, 0x01	; 1
    3bce:	80 93 fc 22 	sts	0x22FC, r24
    3bd2:	90 93 fd 22 	sts	0x22FD, r25
		ma.theta += ma.theta_per_segment;
    3bd6:	60 91 1e 23 	lds	r22, 0x231E
    3bda:	70 91 1f 23 	lds	r23, 0x231F
    3bde:	80 91 20 23 	lds	r24, 0x2320
    3be2:	90 91 21 23 	lds	r25, 0x2321
    3be6:	20 91 2a 23 	lds	r18, 0x232A
    3bea:	30 91 2b 23 	lds	r19, 0x232B
    3bee:	40 91 2c 23 	lds	r20, 0x232C
    3bf2:	50 91 2d 23 	lds	r21, 0x232D
    3bf6:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <__addsf3>
    3bfa:	7b 01       	movw	r14, r22
    3bfc:	8c 01       	movw	r16, r24
    3bfe:	cb 01       	movw	r24, r22
    3c00:	d8 01       	movw	r26, r16
    3c02:	80 93 1e 23 	sts	0x231E, r24
    3c06:	90 93 1f 23 	sts	0x231F, r25
    3c0a:	a0 93 20 23 	sts	0x2320, r26
    3c0e:	b0 93 21 23 	sts	0x2321, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3c12:	b7 01       	movw	r22, r14
    3c14:	c8 01       	movw	r24, r16
    3c16:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <sin>
    3c1a:	80 90 22 23 	lds	r8, 0x2322
    3c1e:	90 90 23 23 	lds	r9, 0x2323
    3c22:	a0 90 24 23 	lds	r10, 0x2324
    3c26:	b0 90 25 23 	lds	r11, 0x2325
    3c2a:	c0 90 00 23 	lds	r12, 0x2300
    3c2e:	d0 90 01 23 	lds	r13, 0x2301
    3c32:	cc 0c       	add	r12, r12
    3c34:	dd 1c       	adc	r13, r13
    3c36:	cc 0c       	add	r12, r12
    3c38:	dd 1c       	adc	r13, r13
    3c3a:	29 ef       	ldi	r18, 0xF9	; 249
    3c3c:	32 e2       	ldi	r19, 0x22	; 34
    3c3e:	c2 0e       	add	r12, r18
    3c40:	d3 1e       	adc	r13, r19
    3c42:	a5 01       	movw	r20, r10
    3c44:	94 01       	movw	r18, r8
    3c46:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    3c4a:	9b 01       	movw	r18, r22
    3c4c:	ac 01       	movw	r20, r24
    3c4e:	60 91 16 23 	lds	r22, 0x2316
    3c52:	70 91 17 23 	lds	r23, 0x2317
    3c56:	80 91 18 23 	lds	r24, 0x2318
    3c5a:	90 91 19 23 	lds	r25, 0x2319
    3c5e:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <__addsf3>
    3c62:	f6 01       	movw	r30, r12
    3c64:	65 87       	std	Z+13, r22	; 0x0d
    3c66:	76 87       	std	Z+14, r23	; 0x0e
    3c68:	87 87       	std	Z+15, r24	; 0x0f
    3c6a:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3c6c:	b7 01       	movw	r22, r14
    3c6e:	c8 01       	movw	r24, r16
    3c70:	0e 94 fd 41 	call	0x83fa	; 0x83fa <cos>
    3c74:	00 91 02 23 	lds	r16, 0x2302
    3c78:	10 91 03 23 	lds	r17, 0x2303
    3c7c:	00 0f       	add	r16, r16
    3c7e:	11 1f       	adc	r17, r17
    3c80:	00 0f       	add	r16, r16
    3c82:	11 1f       	adc	r17, r17
    3c84:	07 50       	subi	r16, 0x07	; 7
    3c86:	1d 4d       	sbci	r17, 0xDD	; 221
    3c88:	a5 01       	movw	r20, r10
    3c8a:	94 01       	movw	r18, r8
    3c8c:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    3c90:	9b 01       	movw	r18, r22
    3c92:	ac 01       	movw	r20, r24
    3c94:	60 91 1a 23 	lds	r22, 0x231A
    3c98:	70 91 1b 23 	lds	r23, 0x231B
    3c9c:	80 91 1c 23 	lds	r24, 0x231C
    3ca0:	90 91 1d 23 	lds	r25, 0x231D
    3ca4:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <__addsf3>
    3ca8:	f8 01       	movw	r30, r16
    3caa:	65 87       	std	Z+13, r22	; 0x0d
    3cac:	76 87       	std	Z+14, r23	; 0x0e
    3cae:	87 87       	std	Z+15, r24	; 0x0f
    3cb0:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3cb2:	00 91 04 23 	lds	r16, 0x2304
    3cb6:	10 91 05 23 	lds	r17, 0x2305
    3cba:	00 0f       	add	r16, r16
    3cbc:	11 1f       	adc	r17, r17
    3cbe:	00 0f       	add	r16, r16
    3cc0:	11 1f       	adc	r17, r17
    3cc2:	07 50       	subi	r16, 0x07	; 7
    3cc4:	1d 4d       	sbci	r17, 0xDD	; 221
    3cc6:	f8 01       	movw	r30, r16
    3cc8:	65 85       	ldd	r22, Z+13	; 0x0d
    3cca:	76 85       	ldd	r23, Z+14	; 0x0e
    3ccc:	87 85       	ldd	r24, Z+15	; 0x0f
    3cce:	90 89       	ldd	r25, Z+16	; 0x10
    3cd0:	20 91 2e 23 	lds	r18, 0x232E
    3cd4:	30 91 2f 23 	lds	r19, 0x232F
    3cd8:	40 91 30 23 	lds	r20, 0x2330
    3cdc:	50 91 31 23 	lds	r21, 0x2331
    3ce0:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <__addsf3>
    3ce4:	f8 01       	movw	r30, r16
    3ce6:	65 87       	std	Z+13, r22	; 0x0d
    3ce8:	76 87       	std	Z+14, r23	; 0x0e
    3cea:	87 87       	std	Z+15, r24	; 0x0f
    3cec:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    3cee:	60 91 06 23 	lds	r22, 0x2306
    3cf2:	70 91 07 23 	lds	r23, 0x2307
    3cf6:	80 91 08 23 	lds	r24, 0x2308
    3cfa:	90 91 09 23 	lds	r25, 0x2309
    3cfe:	20 91 0a 23 	lds	r18, 0x230A
    3d02:	30 91 0b 23 	lds	r19, 0x230B
    3d06:	40 91 0c 23 	lds	r20, 0x230C
    3d0a:	50 91 0d 23 	lds	r21, 0x230D
    3d0e:	e0 90 0e 23 	lds	r14, 0x230E
    3d12:	f0 90 0f 23 	lds	r15, 0x230F
    3d16:	00 91 10 23 	lds	r16, 0x2310
    3d1a:	10 91 11 23 	lds	r17, 0x2311
    3d1e:	a0 90 26 23 	lds	r10, 0x2326
    3d22:	b0 90 27 23 	lds	r11, 0x2327
    3d26:	c0 90 28 23 	lds	r12, 0x2328
    3d2a:	d0 90 29 23 	lds	r13, 0x2329
    3d2e:	80 90 fe 22 	lds	r8, 0x22FE
    3d32:	90 90 ff 22 	lds	r9, 0x22FF
    3d36:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3d3a:	20 91 fc 22 	lds	r18, 0x22FC
    3d3e:	30 91 fd 22 	lds	r19, 0x22FD
    3d42:	80 91 fa 22 	lds	r24, 0x22FA
    3d46:	90 91 fb 22 	lds	r25, 0x22FB
    3d4a:	82 17       	cp	r24, r18
    3d4c:	93 07       	cpc	r25, r19
    3d4e:	0c f0       	brlt	.+2      	; 0x3d52 <mc_arc_continue+0x1d4>
    3d50:	32 cf       	rjmp	.-412    	; 0x3bb6 <mc_arc_continue+0x38>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3d52:	10 92 f9 22 	sts	0x22F9, r1
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3d5a:	c9 01       	movw	r24, r18
    3d5c:	1f 91       	pop	r17
    3d5e:	0f 91       	pop	r16
    3d60:	ff 90       	pop	r15
    3d62:	ef 90       	pop	r14
    3d64:	df 90       	pop	r13
    3d66:	cf 90       	pop	r12
    3d68:	bf 90       	pop	r11
    3d6a:	af 90       	pop	r10
    3d6c:	9f 90       	pop	r9
    3d6e:	8f 90       	pop	r8
    3d70:	08 95       	ret

00003d72 <mc_arc>:
 */

int mc_arc(double theta, double angular_travel, double radius, 
		   double linear_travel, int axis_1, int axis_2, int axis_linear, 
		   double feed_rate, int invert_feed_rate)
{
    3d72:	2f 92       	push	r2
    3d74:	3f 92       	push	r3
    3d76:	4f 92       	push	r4
    3d78:	5f 92       	push	r5
    3d7a:	6f 92       	push	r6
    3d7c:	7f 92       	push	r7
    3d7e:	8f 92       	push	r8
    3d80:	9f 92       	push	r9
    3d82:	af 92       	push	r10
    3d84:	bf 92       	push	r11
    3d86:	cf 92       	push	r12
    3d88:	df 92       	push	r13
    3d8a:	ef 92       	push	r14
    3d8c:	ff 92       	push	r15
    3d8e:	0f 93       	push	r16
    3d90:	1f 93       	push	r17
    3d92:	df 93       	push	r29
    3d94:	cf 93       	push	r28
    3d96:	cd b7       	in	r28, 0x3d	; 61
    3d98:	de b7       	in	r29, 0x3e	; 62
    3d9a:	28 97       	sbiw	r28, 0x08	; 8
    3d9c:	cd bf       	out	0x3d, r28	; 61
    3d9e:	de bf       	out	0x3e, r29	; 62
    3da0:	69 83       	std	Y+1, r22	; 0x01
    3da2:	7a 83       	std	Y+2, r23	; 0x02
    3da4:	8b 83       	std	Y+3, r24	; 0x03
    3da6:	9c 83       	std	Y+4, r25	; 0x04
    3da8:	29 01       	movw	r4, r18
    3daa:	3a 01       	movw	r6, r20
    3dac:	ed 82       	std	Y+5, r14	; 0x05
    3dae:	fe 82       	std	Y+6, r15	; 0x06
    3db0:	0f 83       	std	Y+7, r16	; 0x07
    3db2:	18 87       	std	Y+8, r17	; 0x08
    3db4:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3db6:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3db8:	60 93 1e 23 	sts	0x231E, r22
    3dbc:	70 93 1f 23 	sts	0x231F, r23
    3dc0:	80 93 20 23 	sts	0x2320, r24
    3dc4:	90 93 21 23 	sts	0x2321, r25
	ma.radius = radius;
    3dc8:	e0 92 22 23 	sts	0x2322, r14
    3dcc:	f0 92 23 23 	sts	0x2323, r15
    3dd0:	00 93 24 23 	sts	0x2324, r16
    3dd4:	10 93 25 23 	sts	0x2325, r17
	ma.angular_travel = angular_travel;
    3dd8:	20 93 32 23 	sts	0x2332, r18
    3ddc:	30 93 33 23 	sts	0x2333, r19
    3de0:	40 93 34 23 	sts	0x2334, r20
    3de4:	50 93 35 23 	sts	0x2335, r21
	ma.linear_travel = linear_travel;
    3de8:	a0 92 36 23 	sts	0x2336, r10
    3dec:	b0 92 37 23 	sts	0x2337, r11
    3df0:	c0 92 38 23 	sts	0x2338, r12
    3df4:	d0 92 39 23 	sts	0x2339, r13
	ma.feed_rate = feed_rate;
    3df8:	8a a1       	ldd	r24, Y+34	; 0x22
    3dfa:	9b a1       	ldd	r25, Y+35	; 0x23
    3dfc:	ac a1       	ldd	r26, Y+36	; 0x24
    3dfe:	bd a1       	ldd	r27, Y+37	; 0x25
    3e00:	80 93 26 23 	sts	0x2326, r24
    3e04:	90 93 27 23 	sts	0x2327, r25
    3e08:	a0 93 28 23 	sts	0x2328, r26
    3e0c:	b0 93 29 23 	sts	0x2329, r27
	ma.invert_feed_rate = invert_feed_rate;
    3e10:	ae a1       	ldd	r26, Y+38	; 0x26
    3e12:	bf a1       	ldd	r27, Y+39	; 0x27
    3e14:	a0 93 fe 22 	sts	0x22FE, r26
    3e18:	b0 93 ff 22 	sts	0x22FF, r27
	ma.axis_1 = axis_1;
    3e1c:	80 92 00 23 	sts	0x2300, r8
    3e20:	90 92 01 23 	sts	0x2301, r9
	ma.axis_2 = axis_2;
    3e24:	20 92 02 23 	sts	0x2302, r2
    3e28:	30 92 03 23 	sts	0x2303, r3
	ma.axis_linear = axis_linear;
    3e2c:	e8 a1       	ldd	r30, Y+32	; 0x20
    3e2e:	f9 a1       	ldd	r31, Y+33	; 0x21
    3e30:	e0 93 04 23 	sts	0x2304, r30
    3e34:	f0 93 05 23 	sts	0x2305, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3e38:	ca 01       	movw	r24, r20
    3e3a:	b9 01       	movw	r22, r18
    3e3c:	a8 01       	movw	r20, r16
    3e3e:	97 01       	movw	r18, r14
    3e40:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    3e44:	7b 01       	movw	r14, r22
    3e46:	8c 01       	movw	r16, r24
    3e48:	c6 01       	movw	r24, r12
    3e4a:	b5 01       	movw	r22, r10
    3e4c:	0e 94 68 42 	call	0x84d0	; 0x84d0 <__fixsfsi>
    3e50:	97 ff       	sbrs	r25, 7
    3e52:	07 c0       	rjmp	.+14     	; 0x3e62 <mc_arc+0xf0>
    3e54:	90 95       	com	r25
    3e56:	80 95       	com	r24
    3e58:	70 95       	com	r23
    3e5a:	61 95       	neg	r22
    3e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    3e60:	9f 4f       	sbci	r25, 0xFF	; 255
    3e62:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    3e66:	9b 01       	movw	r18, r22
    3e68:	ac 01       	movw	r20, r24
    3e6a:	c8 01       	movw	r24, r16
    3e6c:	b7 01       	movw	r22, r14
    3e6e:	0e 94 f6 43 	call	0x87ec	; 0x87ec <hypot>
    3e72:	7b 01       	movw	r14, r22
    3e74:	8c 01       	movw	r16, r24
    3e76:	60 93 12 23 	sts	0x2312, r22
    3e7a:	70 93 13 23 	sts	0x2313, r23
    3e7e:	80 93 14 23 	sts	0x2314, r24
    3e82:	90 93 15 23 	sts	0x2315, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3e86:	2d ec       	ldi	r18, 0xCD	; 205
    3e88:	3c ec       	ldi	r19, 0xCC	; 204
    3e8a:	4c e4       	ldi	r20, 0x4C	; 76
    3e8c:	5d e3       	ldi	r21, 0x3D	; 61
    3e8e:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <__cmpsf2>
    3e92:	88 23       	and	r24, r24
    3e94:	1c f4       	brge	.+6      	; 0x3e9c <mc_arc+0x12a>
    3e96:	23 e1       	ldi	r18, 0x13	; 19
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	fb c0       	rjmp	.+502    	; 0x4092 <mc_arc+0x320>
		return (TG_ARC_SPECIFICATION_ERROR);
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3e9c:	c8 01       	movw	r24, r16
    3e9e:	b7 01       	movw	r22, r14
    3ea0:	20 91 8d 22 	lds	r18, 0x228D
    3ea4:	30 91 8e 22 	lds	r19, 0x228E
    3ea8:	40 91 8f 22 	lds	r20, 0x228F
    3eac:	50 91 90 22 	lds	r21, 0x2290
    3eb0:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    3eb4:	0e 94 e6 41 	call	0x83cc	; 0x83cc <ceil>
    3eb8:	0e 94 68 42 	call	0x84d0	; 0x84d0 <__fixsfsi>
    3ebc:	8b 01       	movw	r16, r22
    3ebe:	60 93 fa 22 	sts	0x22FA, r22
    3ec2:	70 93 fb 22 	sts	0x22FB, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    3ec6:	8e a1       	ldd	r24, Y+38	; 0x26
    3ec8:	9f a1       	ldd	r25, Y+39	; 0x27
    3eca:	89 2b       	or	r24, r25
    3ecc:	b9 f0       	breq	.+46     	; 0x3efc <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    3ece:	b8 01       	movw	r22, r16
    3ed0:	88 27       	eor	r24, r24
    3ed2:	77 fd       	sbrc	r23, 7
    3ed4:	80 95       	com	r24
    3ed6:	98 2f       	mov	r25, r24
    3ed8:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    3edc:	9b 01       	movw	r18, r22
    3ede:	ac 01       	movw	r20, r24
    3ee0:	6a a1       	ldd	r22, Y+34	; 0x22
    3ee2:	7b a1       	ldd	r23, Y+35	; 0x23
    3ee4:	8c a1       	ldd	r24, Y+36	; 0x24
    3ee6:	9d a1       	ldd	r25, Y+37	; 0x25
    3ee8:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    3eec:	60 93 26 23 	sts	0x2326, r22
    3ef0:	70 93 27 23 	sts	0x2327, r23
    3ef4:	80 93 28 23 	sts	0x2328, r24
    3ef8:	90 93 29 23 	sts	0x2329, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    3efc:	b8 01       	movw	r22, r16
    3efe:	88 27       	eor	r24, r24
    3f00:	77 fd       	sbrc	r23, 7
    3f02:	80 95       	com	r24
    3f04:	98 2f       	mov	r25, r24
    3f06:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    3f0a:	7b 01       	movw	r14, r22
    3f0c:	8c 01       	movw	r16, r24
    3f0e:	c3 01       	movw	r24, r6
    3f10:	b2 01       	movw	r22, r4
    3f12:	a8 01       	movw	r20, r16
    3f14:	97 01       	movw	r18, r14
    3f16:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    3f1a:	60 93 2a 23 	sts	0x232A, r22
    3f1e:	70 93 2b 23 	sts	0x232B, r23
    3f22:	80 93 2c 23 	sts	0x232C, r24
    3f26:	90 93 2d 23 	sts	0x232D, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    3f2a:	c6 01       	movw	r24, r12
    3f2c:	b5 01       	movw	r22, r10
    3f2e:	a8 01       	movw	r20, r16
    3f30:	97 01       	movw	r18, r14
    3f32:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    3f36:	60 93 2e 23 	sts	0x232E, r22
    3f3a:	70 93 2f 23 	sts	0x232F, r23
    3f3e:	80 93 30 23 	sts	0x2330, r24
    3f42:	90 93 31 23 	sts	0x2331, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    3f46:	69 81       	ldd	r22, Y+1	; 0x01
    3f48:	7a 81       	ldd	r23, Y+2	; 0x02
    3f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f4e:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <sin>
    3f52:	5b 01       	movw	r10, r22
    3f54:	6c 01       	movw	r12, r24
    3f56:	f4 01       	movw	r30, r8
    3f58:	ee 0f       	add	r30, r30
    3f5a:	ff 1f       	adc	r31, r31
    3f5c:	ee 0f       	add	r30, r30
    3f5e:	ff 1f       	adc	r31, r31
    3f60:	ec 58       	subi	r30, 0x8C	; 140
    3f62:	fe 4d       	sbci	r31, 0xDE	; 222
    3f64:	61 81       	ldd	r22, Z+1	; 0x01
    3f66:	72 81       	ldd	r23, Z+2	; 0x02
    3f68:	83 81       	ldd	r24, Z+3	; 0x03
    3f6a:	94 81       	ldd	r25, Z+4	; 0x04
    3f6c:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    3f70:	f4 01       	movw	r30, r8
    3f72:	ee 0f       	add	r30, r30
    3f74:	ff 1f       	adc	r31, r31
    3f76:	e8 0d       	add	r30, r8
    3f78:	f9 1d       	adc	r31, r9
    3f7a:	13 e0       	ldi	r17, 0x03	; 3
    3f7c:	ee 0f       	add	r30, r30
    3f7e:	ff 1f       	adc	r31, r31
    3f80:	1a 95       	dec	r17
    3f82:	e1 f7       	brne	.-8      	; 0x3f7c <mc_arc+0x20a>
    3f84:	e5 57       	subi	r30, 0x75	; 117
    3f86:	fd 4d       	sbci	r31, 0xDD	; 221
    3f88:	21 a1       	ldd	r18, Z+33	; 0x21
    3f8a:	32 a1       	ldd	r19, Z+34	; 0x22
    3f8c:	43 a1       	ldd	r20, Z+35	; 0x23
    3f8e:	54 a1       	ldd	r21, Z+36	; 0x24
    3f90:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    3f94:	7b 01       	movw	r14, r22
    3f96:	8c 01       	movw	r16, r24
    3f98:	c6 01       	movw	r24, r12
    3f9a:	b5 01       	movw	r22, r10
    3f9c:	2d 81       	ldd	r18, Y+5	; 0x05
    3f9e:	3e 81       	ldd	r19, Y+6	; 0x06
    3fa0:	4f 81       	ldd	r20, Y+7	; 0x07
    3fa2:	58 85       	ldd	r21, Y+8	; 0x08
    3fa4:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    3fa8:	9b 01       	movw	r18, r22
    3faa:	ac 01       	movw	r20, r24
    3fac:	c8 01       	movw	r24, r16
    3fae:	b7 01       	movw	r22, r14
    3fb0:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    3fb4:	60 93 16 23 	sts	0x2316, r22
    3fb8:	70 93 17 23 	sts	0x2317, r23
    3fbc:	80 93 18 23 	sts	0x2318, r24
    3fc0:	90 93 19 23 	sts	0x2319, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    3fc4:	69 81       	ldd	r22, Y+1	; 0x01
    3fc6:	7a 81       	ldd	r23, Y+2	; 0x02
    3fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    3fca:	9c 81       	ldd	r25, Y+4	; 0x04
    3fcc:	0e 94 fd 41 	call	0x83fa	; 0x83fa <cos>
    3fd0:	5b 01       	movw	r10, r22
    3fd2:	6c 01       	movw	r12, r24
    3fd4:	f1 01       	movw	r30, r2
    3fd6:	ee 0f       	add	r30, r30
    3fd8:	ff 1f       	adc	r31, r31
    3fda:	ee 0f       	add	r30, r30
    3fdc:	ff 1f       	adc	r31, r31
    3fde:	ec 58       	subi	r30, 0x8C	; 140
    3fe0:	fe 4d       	sbci	r31, 0xDE	; 222
    3fe2:	61 81       	ldd	r22, Z+1	; 0x01
    3fe4:	72 81       	ldd	r23, Z+2	; 0x02
    3fe6:	83 81       	ldd	r24, Z+3	; 0x03
    3fe8:	94 81       	ldd	r25, Z+4	; 0x04
    3fea:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    3fee:	f1 01       	movw	r30, r2
    3ff0:	ee 0f       	add	r30, r30
    3ff2:	ff 1f       	adc	r31, r31
    3ff4:	e2 0d       	add	r30, r2
    3ff6:	f3 1d       	adc	r31, r3
    3ff8:	53 e0       	ldi	r21, 0x03	; 3
    3ffa:	ee 0f       	add	r30, r30
    3ffc:	ff 1f       	adc	r31, r31
    3ffe:	5a 95       	dec	r21
    4000:	e1 f7       	brne	.-8      	; 0x3ffa <mc_arc+0x288>
    4002:	e5 57       	subi	r30, 0x75	; 117
    4004:	fd 4d       	sbci	r31, 0xDD	; 221
    4006:	21 a1       	ldd	r18, Z+33	; 0x21
    4008:	32 a1       	ldd	r19, Z+34	; 0x22
    400a:	43 a1       	ldd	r20, Z+35	; 0x23
    400c:	54 a1       	ldd	r21, Z+36	; 0x24
    400e:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    4012:	7b 01       	movw	r14, r22
    4014:	8c 01       	movw	r16, r24
    4016:	c6 01       	movw	r24, r12
    4018:	b5 01       	movw	r22, r10
    401a:	2d 81       	ldd	r18, Y+5	; 0x05
    401c:	3e 81       	ldd	r19, Y+6	; 0x06
    401e:	4f 81       	ldd	r20, Y+7	; 0x07
    4020:	58 85       	ldd	r21, Y+8	; 0x08
    4022:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    4026:	9b 01       	movw	r18, r22
    4028:	ac 01       	movw	r20, r24
    402a:	c8 01       	movw	r24, r16
    402c:	b7 01       	movw	r22, r14
    402e:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    4032:	60 93 1a 23 	sts	0x231A, r22
    4036:	70 93 1b 23 	sts	0x231B, r23
    403a:	80 93 1c 23 	sts	0x231C, r24
    403e:	90 93 1d 23 	sts	0x231D, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    4042:	e8 a1       	ldd	r30, Y+32	; 0x20
    4044:	f9 a1       	ldd	r31, Y+33	; 0x21
    4046:	ee 0f       	add	r30, r30
    4048:	ff 1f       	adc	r31, r31
    404a:	ee 0f       	add	r30, r30
    404c:	ff 1f       	adc	r31, r31
    404e:	8f 01       	movw	r16, r30
    4050:	07 50       	subi	r16, 0x07	; 7
    4052:	1d 4d       	sbci	r17, 0xDD	; 221
    4054:	ec 58       	subi	r30, 0x8C	; 140
    4056:	fe 4d       	sbci	r31, 0xDE	; 222
    4058:	61 81       	ldd	r22, Z+1	; 0x01
    405a:	72 81       	ldd	r23, Z+2	; 0x02
    405c:	83 81       	ldd	r24, Z+3	; 0x03
    405e:	94 81       	ldd	r25, Z+4	; 0x04
    4060:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    4064:	20 91 dc 22 	lds	r18, 0x22DC
    4068:	30 91 dd 22 	lds	r19, 0x22DD
    406c:	40 91 de 22 	lds	r20, 0x22DE
    4070:	50 91 df 22 	lds	r21, 0x22DF
    4074:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    4078:	d8 01       	movw	r26, r16
    407a:	1d 96       	adiw	r26, 0x0d	; 13
    407c:	6d 93       	st	X+, r22
    407e:	7d 93       	st	X+, r23
    4080:	8d 93       	st	X+, r24
    4082:	9c 93       	st	X, r25
    4084:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	80 93 f9 22 	sts	0x22F9, r24
	return (mc_arc_continue());
    408c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <mc_arc_continue>
    4090:	9c 01       	movw	r18, r24
}
    4092:	c9 01       	movw	r24, r18
    4094:	28 96       	adiw	r28, 0x08	; 8
    4096:	cd bf       	out	0x3d, r28	; 61
    4098:	de bf       	out	0x3e, r29	; 62
    409a:	cf 91       	pop	r28
    409c:	df 91       	pop	r29
    409e:	1f 91       	pop	r17
    40a0:	0f 91       	pop	r16
    40a2:	ff 90       	pop	r15
    40a4:	ef 90       	pop	r14
    40a6:	df 90       	pop	r13
    40a8:	cf 90       	pop	r12
    40aa:	bf 90       	pop	r11
    40ac:	af 90       	pop	r10
    40ae:	9f 90       	pop	r9
    40b0:	8f 90       	pop	r8
    40b2:	7f 90       	pop	r7
    40b4:	6f 90       	pop	r6
    40b6:	5f 90       	pop	r5
    40b8:	4f 90       	pop	r4
    40ba:	3f 90       	pop	r3
    40bc:	2f 90       	pop	r2
    40be:	08 95       	ret

000040c0 <mc_arc_blocking>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc_blocking(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    40c0:	2f 92       	push	r2
    40c2:	3f 92       	push	r3
    40c4:	4f 92       	push	r4
    40c6:	5f 92       	push	r5
    40c8:	6f 92       	push	r6
    40ca:	7f 92       	push	r7
    40cc:	8f 92       	push	r8
    40ce:	9f 92       	push	r9
    40d0:	af 92       	push	r10
    40d2:	bf 92       	push	r11
    40d4:	cf 92       	push	r12
    40d6:	df 92       	push	r13
    40d8:	ef 92       	push	r14
    40da:	ff 92       	push	r15
    40dc:	0f 93       	push	r16
    40de:	1f 93       	push	r17
    40e0:	df 93       	push	r29
    40e2:	cf 93       	push	r28
    40e4:	cd b7       	in	r28, 0x3d	; 61
    40e6:	de b7       	in	r29, 0x3e	; 62
    40e8:	28 97       	sbiw	r28, 0x08	; 8
    40ea:	cd bf       	out	0x3d, r28	; 61
    40ec:	de bf       	out	0x3e, r29	; 62
    40ee:	69 83       	std	Y+1, r22	; 0x01
    40f0:	7a 83       	std	Y+2, r23	; 0x02
    40f2:	8b 83       	std	Y+3, r24	; 0x03
    40f4:	9c 83       	std	Y+4, r25	; 0x04
    40f6:	29 01       	movw	r4, r18
    40f8:	3a 01       	movw	r6, r20
    40fa:	ed 82       	std	Y+5, r14	; 0x05
    40fc:	fe 82       	std	Y+6, r15	; 0x06
    40fe:	0f 83       	std	Y+7, r16	; 0x07
    4100:	18 87       	std	Y+8, r17	; 0x08
    4102:	2e 8c       	ldd	r2, Y+30	; 0x1e
    4104:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    4106:	60 93 1e 23 	sts	0x231E, r22
    410a:	70 93 1f 23 	sts	0x231F, r23
    410e:	80 93 20 23 	sts	0x2320, r24
    4112:	90 93 21 23 	sts	0x2321, r25
	ma.radius = radius;
    4116:	e0 92 22 23 	sts	0x2322, r14
    411a:	f0 92 23 23 	sts	0x2323, r15
    411e:	00 93 24 23 	sts	0x2324, r16
    4122:	10 93 25 23 	sts	0x2325, r17
	ma.angular_travel = angular_travel;
    4126:	20 93 32 23 	sts	0x2332, r18
    412a:	30 93 33 23 	sts	0x2333, r19
    412e:	40 93 34 23 	sts	0x2334, r20
    4132:	50 93 35 23 	sts	0x2335, r21
	ma.linear_travel = linear_travel;
    4136:	a0 92 36 23 	sts	0x2336, r10
    413a:	b0 92 37 23 	sts	0x2337, r11
    413e:	c0 92 38 23 	sts	0x2338, r12
    4142:	d0 92 39 23 	sts	0x2339, r13
	ma.feed_rate = feed_rate;
    4146:	8a a1       	ldd	r24, Y+34	; 0x22
    4148:	9b a1       	ldd	r25, Y+35	; 0x23
    414a:	ac a1       	ldd	r26, Y+36	; 0x24
    414c:	bd a1       	ldd	r27, Y+37	; 0x25
    414e:	80 93 26 23 	sts	0x2326, r24
    4152:	90 93 27 23 	sts	0x2327, r25
    4156:	a0 93 28 23 	sts	0x2328, r26
    415a:	b0 93 29 23 	sts	0x2329, r27
	ma.invert_feed_rate = invert_feed_rate;
    415e:	ae a1       	ldd	r26, Y+38	; 0x26
    4160:	bf a1       	ldd	r27, Y+39	; 0x27
    4162:	a0 93 fe 22 	sts	0x22FE, r26
    4166:	b0 93 ff 22 	sts	0x22FF, r27
	ma.axis_1 = axis_1;
    416a:	80 92 00 23 	sts	0x2300, r8
    416e:	90 92 01 23 	sts	0x2301, r9
	ma.axis_2 = axis_2;
    4172:	20 92 02 23 	sts	0x2302, r2
    4176:	30 92 03 23 	sts	0x2303, r3
	ma.axis_linear = axis_linear;
    417a:	e8 a1       	ldd	r30, Y+32	; 0x20
    417c:	f9 a1       	ldd	r31, Y+33	; 0x21
    417e:	e0 93 04 23 	sts	0x2304, r30
    4182:	f0 93 05 23 	sts	0x2305, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    4186:	ca 01       	movw	r24, r20
    4188:	b9 01       	movw	r22, r18
    418a:	a8 01       	movw	r20, r16
    418c:	97 01       	movw	r18, r14
    418e:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    4192:	7b 01       	movw	r14, r22
    4194:	8c 01       	movw	r16, r24
    4196:	c6 01       	movw	r24, r12
    4198:	b5 01       	movw	r22, r10
    419a:	0e 94 68 42 	call	0x84d0	; 0x84d0 <__fixsfsi>
    419e:	97 ff       	sbrs	r25, 7
    41a0:	07 c0       	rjmp	.+14     	; 0x41b0 <mc_arc_blocking+0xf0>
    41a2:	90 95       	com	r25
    41a4:	80 95       	com	r24
    41a6:	70 95       	com	r23
    41a8:	61 95       	neg	r22
    41aa:	7f 4f       	sbci	r23, 0xFF	; 255
    41ac:	8f 4f       	sbci	r24, 0xFF	; 255
    41ae:	9f 4f       	sbci	r25, 0xFF	; 255
    41b0:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    41b4:	9b 01       	movw	r18, r22
    41b6:	ac 01       	movw	r20, r24
    41b8:	c8 01       	movw	r24, r16
    41ba:	b7 01       	movw	r22, r14
    41bc:	0e 94 f6 43 	call	0x87ec	; 0x87ec <hypot>
    41c0:	7b 01       	movw	r14, r22
    41c2:	8c 01       	movw	r16, r24
    41c4:	60 93 12 23 	sts	0x2312, r22
    41c8:	70 93 13 23 	sts	0x2313, r23
    41cc:	80 93 14 23 	sts	0x2314, r24
    41d0:	90 93 15 23 	sts	0x2315, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    41d4:	2d ec       	ldi	r18, 0xCD	; 205
    41d6:	3c ec       	ldi	r19, 0xCC	; 204
    41d8:	4c e4       	ldi	r20, 0x4C	; 76
    41da:	5d e3       	ldi	r21, 0x3D	; 61
    41dc:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <__cmpsf2>
    41e0:	88 23       	and	r24, r24
    41e2:	1c f4       	brge	.+6      	; 0x41ea <mc_arc_blocking+0x12a>
    41e4:	23 e1       	ldi	r18, 0x13	; 19
    41e6:	30 e0       	ldi	r19, 0x00	; 0
    41e8:	c7 c1       	rjmp	.+910    	; 0x4578 <mc_arc_blocking+0x4b8>
		return (TG_ARC_SPECIFICATION_ERROR);			
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    41ea:	c8 01       	movw	r24, r16
    41ec:	b7 01       	movw	r22, r14
    41ee:	20 91 8d 22 	lds	r18, 0x228D
    41f2:	30 91 8e 22 	lds	r19, 0x228E
    41f6:	40 91 8f 22 	lds	r20, 0x228F
    41fa:	50 91 90 22 	lds	r21, 0x2290
    41fe:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    4202:	0e 94 e6 41 	call	0x83cc	; 0x83cc <ceil>
    4206:	0e 94 68 42 	call	0x84d0	; 0x84d0 <__fixsfsi>
    420a:	8b 01       	movw	r16, r22
    420c:	60 93 fa 22 	sts	0x22FA, r22
    4210:	70 93 fb 22 	sts	0x22FB, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    4214:	2e a1       	ldd	r18, Y+38	; 0x26
    4216:	3f a1       	ldd	r19, Y+39	; 0x27
    4218:	23 2b       	or	r18, r19
    421a:	b9 f0       	breq	.+46     	; 0x424a <mc_arc_blocking+0x18a>
		ma.feed_rate *= ma.segments; 
    421c:	b8 01       	movw	r22, r16
    421e:	88 27       	eor	r24, r24
    4220:	77 fd       	sbrc	r23, 7
    4222:	80 95       	com	r24
    4224:	98 2f       	mov	r25, r24
    4226:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    422a:	9b 01       	movw	r18, r22
    422c:	ac 01       	movw	r20, r24
    422e:	6a a1       	ldd	r22, Y+34	; 0x22
    4230:	7b a1       	ldd	r23, Y+35	; 0x23
    4232:	8c a1       	ldd	r24, Y+36	; 0x24
    4234:	9d a1       	ldd	r25, Y+37	; 0x25
    4236:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    423a:	60 93 26 23 	sts	0x2326, r22
    423e:	70 93 27 23 	sts	0x2327, r23
    4242:	80 93 28 23 	sts	0x2328, r24
    4246:	90 93 29 23 	sts	0x2329, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    424a:	b8 01       	movw	r22, r16
    424c:	88 27       	eor	r24, r24
    424e:	77 fd       	sbrc	r23, 7
    4250:	80 95       	com	r24
    4252:	98 2f       	mov	r25, r24
    4254:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    4258:	7b 01       	movw	r14, r22
    425a:	8c 01       	movw	r16, r24
    425c:	c3 01       	movw	r24, r6
    425e:	b2 01       	movw	r22, r4
    4260:	a8 01       	movw	r20, r16
    4262:	97 01       	movw	r18, r14
    4264:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    4268:	60 93 2a 23 	sts	0x232A, r22
    426c:	70 93 2b 23 	sts	0x232B, r23
    4270:	80 93 2c 23 	sts	0x232C, r24
    4274:	90 93 2d 23 	sts	0x232D, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    4278:	c6 01       	movw	r24, r12
    427a:	b5 01       	movw	r22, r10
    427c:	a8 01       	movw	r20, r16
    427e:	97 01       	movw	r18, r14
    4280:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    4284:	60 93 2e 23 	sts	0x232E, r22
    4288:	70 93 2f 23 	sts	0x232F, r23
    428c:	80 93 30 23 	sts	0x2330, r24
    4290:	90 93 31 23 	sts	0x2331, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    4294:	69 81       	ldd	r22, Y+1	; 0x01
    4296:	7a 81       	ldd	r23, Y+2	; 0x02
    4298:	8b 81       	ldd	r24, Y+3	; 0x03
    429a:	9c 81       	ldd	r25, Y+4	; 0x04
    429c:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <sin>
    42a0:	5b 01       	movw	r10, r22
    42a2:	6c 01       	movw	r12, r24
    42a4:	f4 01       	movw	r30, r8
    42a6:	ee 0f       	add	r30, r30
    42a8:	ff 1f       	adc	r31, r31
    42aa:	ee 0f       	add	r30, r30
    42ac:	ff 1f       	adc	r31, r31
    42ae:	ec 58       	subi	r30, 0x8C	; 140
    42b0:	fe 4d       	sbci	r31, 0xDE	; 222
    42b2:	61 81       	ldd	r22, Z+1	; 0x01
    42b4:	72 81       	ldd	r23, Z+2	; 0x02
    42b6:	83 81       	ldd	r24, Z+3	; 0x03
    42b8:	94 81       	ldd	r25, Z+4	; 0x04
    42ba:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    42be:	f4 01       	movw	r30, r8
    42c0:	ee 0f       	add	r30, r30
    42c2:	ff 1f       	adc	r31, r31
    42c4:	e8 0d       	add	r30, r8
    42c6:	f9 1d       	adc	r31, r9
    42c8:	13 e0       	ldi	r17, 0x03	; 3
    42ca:	ee 0f       	add	r30, r30
    42cc:	ff 1f       	adc	r31, r31
    42ce:	1a 95       	dec	r17
    42d0:	e1 f7       	brne	.-8      	; 0x42ca <mc_arc_blocking+0x20a>
    42d2:	e5 57       	subi	r30, 0x75	; 117
    42d4:	fd 4d       	sbci	r31, 0xDD	; 221
    42d6:	21 a1       	ldd	r18, Z+33	; 0x21
    42d8:	32 a1       	ldd	r19, Z+34	; 0x22
    42da:	43 a1       	ldd	r20, Z+35	; 0x23
    42dc:	54 a1       	ldd	r21, Z+36	; 0x24
    42de:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    42e2:	7b 01       	movw	r14, r22
    42e4:	8c 01       	movw	r16, r24
    42e6:	c6 01       	movw	r24, r12
    42e8:	b5 01       	movw	r22, r10
    42ea:	2d 81       	ldd	r18, Y+5	; 0x05
    42ec:	3e 81       	ldd	r19, Y+6	; 0x06
    42ee:	4f 81       	ldd	r20, Y+7	; 0x07
    42f0:	58 85       	ldd	r21, Y+8	; 0x08
    42f2:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    42f6:	9b 01       	movw	r18, r22
    42f8:	ac 01       	movw	r20, r24
    42fa:	c8 01       	movw	r24, r16
    42fc:	b7 01       	movw	r22, r14
    42fe:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    4302:	60 93 16 23 	sts	0x2316, r22
    4306:	70 93 17 23 	sts	0x2317, r23
    430a:	80 93 18 23 	sts	0x2318, r24
    430e:	90 93 19 23 	sts	0x2319, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    4312:	69 81       	ldd	r22, Y+1	; 0x01
    4314:	7a 81       	ldd	r23, Y+2	; 0x02
    4316:	8b 81       	ldd	r24, Y+3	; 0x03
    4318:	9c 81       	ldd	r25, Y+4	; 0x04
    431a:	0e 94 fd 41 	call	0x83fa	; 0x83fa <cos>
    431e:	5b 01       	movw	r10, r22
    4320:	6c 01       	movw	r12, r24
    4322:	f1 01       	movw	r30, r2
    4324:	ee 0f       	add	r30, r30
    4326:	ff 1f       	adc	r31, r31
    4328:	ee 0f       	add	r30, r30
    432a:	ff 1f       	adc	r31, r31
    432c:	ec 58       	subi	r30, 0x8C	; 140
    432e:	fe 4d       	sbci	r31, 0xDE	; 222
    4330:	61 81       	ldd	r22, Z+1	; 0x01
    4332:	72 81       	ldd	r23, Z+2	; 0x02
    4334:	83 81       	ldd	r24, Z+3	; 0x03
    4336:	94 81       	ldd	r25, Z+4	; 0x04
    4338:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    433c:	f1 01       	movw	r30, r2
    433e:	ee 0f       	add	r30, r30
    4340:	ff 1f       	adc	r31, r31
    4342:	e2 0d       	add	r30, r2
    4344:	f3 1d       	adc	r31, r3
    4346:	53 e0       	ldi	r21, 0x03	; 3
    4348:	ee 0f       	add	r30, r30
    434a:	ff 1f       	adc	r31, r31
    434c:	5a 95       	dec	r21
    434e:	e1 f7       	brne	.-8      	; 0x4348 <mc_arc_blocking+0x288>
    4350:	e5 57       	subi	r30, 0x75	; 117
    4352:	fd 4d       	sbci	r31, 0xDD	; 221
    4354:	21 a1       	ldd	r18, Z+33	; 0x21
    4356:	32 a1       	ldd	r19, Z+34	; 0x22
    4358:	43 a1       	ldd	r20, Z+35	; 0x23
    435a:	54 a1       	ldd	r21, Z+36	; 0x24
    435c:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    4360:	7b 01       	movw	r14, r22
    4362:	8c 01       	movw	r16, r24
    4364:	c6 01       	movw	r24, r12
    4366:	b5 01       	movw	r22, r10
    4368:	2d 81       	ldd	r18, Y+5	; 0x05
    436a:	3e 81       	ldd	r19, Y+6	; 0x06
    436c:	4f 81       	ldd	r20, Y+7	; 0x07
    436e:	58 85       	ldd	r21, Y+8	; 0x08
    4370:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    4374:	9b 01       	movw	r18, r22
    4376:	ac 01       	movw	r20, r24
    4378:	c8 01       	movw	r24, r16
    437a:	b7 01       	movw	r22, r14
    437c:	0e 94 59 41 	call	0x82b2	; 0x82b2 <__subsf3>
    4380:	60 93 1a 23 	sts	0x231A, r22
    4384:	70 93 1b 23 	sts	0x231B, r23
    4388:	80 93 1c 23 	sts	0x231C, r24
    438c:	90 93 1d 23 	sts	0x231D, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    4390:	e8 a1       	ldd	r30, Y+32	; 0x20
    4392:	f9 a1       	ldd	r31, Y+33	; 0x21
    4394:	ee 0f       	add	r30, r30
    4396:	ff 1f       	adc	r31, r31
    4398:	ee 0f       	add	r30, r30
    439a:	ff 1f       	adc	r31, r31
    439c:	8f 01       	movw	r16, r30
    439e:	07 50       	subi	r16, 0x07	; 7
    43a0:	1d 4d       	sbci	r17, 0xDD	; 221
    43a2:	ec 58       	subi	r30, 0x8C	; 140
    43a4:	fe 4d       	sbci	r31, 0xDE	; 222
    43a6:	61 81       	ldd	r22, Z+1	; 0x01
    43a8:	72 81       	ldd	r23, Z+2	; 0x02
    43aa:	83 81       	ldd	r24, Z+3	; 0x03
    43ac:	94 81       	ldd	r25, Z+4	; 0x04
    43ae:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    43b2:	20 91 dc 22 	lds	r18, 0x22DC
    43b6:	30 91 dd 22 	lds	r19, 0x22DD
    43ba:	40 91 de 22 	lds	r20, 0x22DE
    43be:	50 91 df 22 	lds	r21, 0x22DF
    43c2:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    43c6:	d8 01       	movw	r26, r16
    43c8:	1d 96       	adiw	r26, 0x0d	; 13
    43ca:	6d 93       	st	X+, r22
    43cc:	7d 93       	st	X+, r23
    43ce:	8d 93       	st	X+, r24
    43d0:	9c 93       	st	X, r25
    43d2:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    43d4:	10 92 fc 22 	sts	0x22FC, r1
    43d8:	10 92 fd 22 	sts	0x22FD, r1
    43dc:	bf c0       	rjmp	.+382    	; 0x455c <mc_arc_blocking+0x49c>
		ma.theta += ma.theta_per_segment;
    43de:	60 91 1e 23 	lds	r22, 0x231E
    43e2:	70 91 1f 23 	lds	r23, 0x231F
    43e6:	80 91 20 23 	lds	r24, 0x2320
    43ea:	90 91 21 23 	lds	r25, 0x2321
    43ee:	20 91 2a 23 	lds	r18, 0x232A
    43f2:	30 91 2b 23 	lds	r19, 0x232B
    43f6:	40 91 2c 23 	lds	r20, 0x232C
    43fa:	50 91 2d 23 	lds	r21, 0x232D
    43fe:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <__addsf3>
    4402:	7b 01       	movw	r14, r22
    4404:	8c 01       	movw	r16, r24
    4406:	cb 01       	movw	r24, r22
    4408:	d8 01       	movw	r26, r16
    440a:	80 93 1e 23 	sts	0x231E, r24
    440e:	90 93 1f 23 	sts	0x231F, r25
    4412:	a0 93 20 23 	sts	0x2320, r26
    4416:	b0 93 21 23 	sts	0x2321, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    441a:	b7 01       	movw	r22, r14
    441c:	c8 01       	movw	r24, r16
    441e:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <sin>
    4422:	80 90 22 23 	lds	r8, 0x2322
    4426:	90 90 23 23 	lds	r9, 0x2323
    442a:	a0 90 24 23 	lds	r10, 0x2324
    442e:	b0 90 25 23 	lds	r11, 0x2325
    4432:	c0 90 00 23 	lds	r12, 0x2300
    4436:	d0 90 01 23 	lds	r13, 0x2301
    443a:	cc 0c       	add	r12, r12
    443c:	dd 1c       	adc	r13, r13
    443e:	cc 0c       	add	r12, r12
    4440:	dd 1c       	adc	r13, r13
    4442:	e9 ef       	ldi	r30, 0xF9	; 249
    4444:	f2 e2       	ldi	r31, 0x22	; 34
    4446:	ce 0e       	add	r12, r30
    4448:	df 1e       	adc	r13, r31
    444a:	a5 01       	movw	r20, r10
    444c:	94 01       	movw	r18, r8
    444e:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    4452:	9b 01       	movw	r18, r22
    4454:	ac 01       	movw	r20, r24
    4456:	60 91 16 23 	lds	r22, 0x2316
    445a:	70 91 17 23 	lds	r23, 0x2317
    445e:	80 91 18 23 	lds	r24, 0x2318
    4462:	90 91 19 23 	lds	r25, 0x2319
    4466:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <__addsf3>
    446a:	d6 01       	movw	r26, r12
    446c:	1d 96       	adiw	r26, 0x0d	; 13
    446e:	6d 93       	st	X+, r22
    4470:	7d 93       	st	X+, r23
    4472:	8d 93       	st	X+, r24
    4474:	9c 93       	st	X, r25
    4476:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    4478:	b7 01       	movw	r22, r14
    447a:	c8 01       	movw	r24, r16
    447c:	0e 94 fd 41 	call	0x83fa	; 0x83fa <cos>
    4480:	00 91 02 23 	lds	r16, 0x2302
    4484:	10 91 03 23 	lds	r17, 0x2303
    4488:	00 0f       	add	r16, r16
    448a:	11 1f       	adc	r17, r17
    448c:	00 0f       	add	r16, r16
    448e:	11 1f       	adc	r17, r17
    4490:	07 50       	subi	r16, 0x07	; 7
    4492:	1d 4d       	sbci	r17, 0xDD	; 221
    4494:	a5 01       	movw	r20, r10
    4496:	94 01       	movw	r18, r8
    4498:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    449c:	9b 01       	movw	r18, r22
    449e:	ac 01       	movw	r20, r24
    44a0:	60 91 1a 23 	lds	r22, 0x231A
    44a4:	70 91 1b 23 	lds	r23, 0x231B
    44a8:	80 91 1c 23 	lds	r24, 0x231C
    44ac:	90 91 1d 23 	lds	r25, 0x231D
    44b0:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <__addsf3>
    44b4:	f8 01       	movw	r30, r16
    44b6:	65 87       	std	Z+13, r22	; 0x0d
    44b8:	76 87       	std	Z+14, r23	; 0x0e
    44ba:	87 87       	std	Z+15, r24	; 0x0f
    44bc:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    44be:	00 91 04 23 	lds	r16, 0x2304
    44c2:	10 91 05 23 	lds	r17, 0x2305
    44c6:	00 0f       	add	r16, r16
    44c8:	11 1f       	adc	r17, r17
    44ca:	00 0f       	add	r16, r16
    44cc:	11 1f       	adc	r17, r17
    44ce:	07 50       	subi	r16, 0x07	; 7
    44d0:	1d 4d       	sbci	r17, 0xDD	; 221
    44d2:	d8 01       	movw	r26, r16
    44d4:	1d 96       	adiw	r26, 0x0d	; 13
    44d6:	6d 91       	ld	r22, X+
    44d8:	7d 91       	ld	r23, X+
    44da:	8d 91       	ld	r24, X+
    44dc:	9c 91       	ld	r25, X
    44de:	50 97       	sbiw	r26, 0x10	; 16
    44e0:	20 91 2e 23 	lds	r18, 0x232E
    44e4:	30 91 2f 23 	lds	r19, 0x232F
    44e8:	40 91 30 23 	lds	r20, 0x2330
    44ec:	50 91 31 23 	lds	r21, 0x2331
    44f0:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <__addsf3>
    44f4:	f8 01       	movw	r30, r16
    44f6:	65 87       	std	Z+13, r22	; 0x0d
    44f8:	76 87       	std	Z+14, r23	; 0x0e
    44fa:	87 87       	std	Z+15, r24	; 0x0f
    44fc:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    44fe:	60 91 06 23 	lds	r22, 0x2306
    4502:	70 91 07 23 	lds	r23, 0x2307
    4506:	80 91 08 23 	lds	r24, 0x2308
    450a:	90 91 09 23 	lds	r25, 0x2309
    450e:	20 91 0a 23 	lds	r18, 0x230A
    4512:	30 91 0b 23 	lds	r19, 0x230B
    4516:	40 91 0c 23 	lds	r20, 0x230C
    451a:	50 91 0d 23 	lds	r21, 0x230D
    451e:	e0 90 0e 23 	lds	r14, 0x230E
    4522:	f0 90 0f 23 	lds	r15, 0x230F
    4526:	00 91 10 23 	lds	r16, 0x2310
    452a:	10 91 11 23 	lds	r17, 0x2311
    452e:	a0 90 26 23 	lds	r10, 0x2326
    4532:	b0 90 27 23 	lds	r11, 0x2327
    4536:	c0 90 28 23 	lds	r12, 0x2328
    453a:	d0 90 29 23 	lds	r13, 0x2329
    453e:	80 90 fe 22 	lds	r8, 0x22FE
    4542:	90 90 ff 22 	lds	r9, 0x22FF
    4546:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    454a:	80 91 fc 22 	lds	r24, 0x22FC
    454e:	90 91 fd 22 	lds	r25, 0x22FD
    4552:	01 96       	adiw	r24, 0x01	; 1
    4554:	80 93 fc 22 	sts	0x22FC, r24
    4558:	90 93 fd 22 	sts	0x22FD, r25
    455c:	20 91 fc 22 	lds	r18, 0x22FC
    4560:	30 91 fd 22 	lds	r19, 0x22FD
    4564:	80 91 fa 22 	lds	r24, 0x22FA
    4568:	90 91 fb 22 	lds	r25, 0x22FB
    456c:	82 17       	cp	r24, r18
    456e:	93 07       	cpc	r25, r19
    4570:	0c f0       	brlt	.+2      	; 0x4574 <mc_arc_blocking+0x4b4>
    4572:	35 cf       	rjmp	.-406    	; 0x43de <mc_arc_blocking+0x31e>
    4574:	20 e0       	ldi	r18, 0x00	; 0
    4576:	30 e0       	ldi	r19, 0x00	; 0
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    4578:	c9 01       	movw	r24, r18
    457a:	28 96       	adiw	r28, 0x08	; 8
    457c:	cd bf       	out	0x3d, r28	; 61
    457e:	de bf       	out	0x3e, r29	; 62
    4580:	cf 91       	pop	r28
    4582:	df 91       	pop	r29
    4584:	1f 91       	pop	r17
    4586:	0f 91       	pop	r16
    4588:	ff 90       	pop	r15
    458a:	ef 90       	pop	r14
    458c:	df 90       	pop	r13
    458e:	cf 90       	pop	r12
    4590:	bf 90       	pop	r11
    4592:	af 90       	pop	r10
    4594:	9f 90       	pop	r9
    4596:	8f 90       	pop	r8
    4598:	7f 90       	pop	r7
    459a:	6f 90       	pop	r6
    459c:	5f 90       	pop	r5
    459e:	4f 90       	pop	r4
    45a0:	3f 90       	pop	r3
    45a2:	2f 90       	pop	r2
    45a4:	08 95       	ret

000045a6 <mc_line_blocking>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line_blocking(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    45a6:	2f 92       	push	r2
    45a8:	3f 92       	push	r3
    45aa:	4f 92       	push	r4
    45ac:	5f 92       	push	r5
    45ae:	6f 92       	push	r6
    45b0:	7f 92       	push	r7
    45b2:	8f 92       	push	r8
    45b4:	9f 92       	push	r9
    45b6:	af 92       	push	r10
    45b8:	bf 92       	push	r11
    45ba:	cf 92       	push	r12
    45bc:	df 92       	push	r13
    45be:	ef 92       	push	r14
    45c0:	ff 92       	push	r15
    45c2:	0f 93       	push	r16
    45c4:	1f 93       	push	r17
    45c6:	df 93       	push	r29
    45c8:	cf 93       	push	r28
    45ca:	cd b7       	in	r28, 0x3d	; 61
    45cc:	de b7       	in	r29, 0x3e	; 62
    45ce:	6a 97       	sbiw	r28, 0x1a	; 26
    45d0:	cd bf       	out	0x3d, r28	; 61
    45d2:	de bf       	out	0x3e, r29	; 62
    45d4:	19 01       	movw	r2, r18
    45d6:	2a 01       	movw	r4, r20
    45d8:	ad 8a       	std	Y+21, r10	; 0x15
    45da:	be 8a       	std	Y+22, r11	; 0x16
    45dc:	cf 8a       	std	Y+23, r12	; 0x17
    45de:	d8 8e       	std	Y+24, r13	; 0x18
    45e0:	89 8e       	std	Y+25, r8	; 0x19
    45e2:	9a 8e       	std	Y+26, r9	; 0x1a
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    45e4:	20 91 ac 22 	lds	r18, 0x22AC
    45e8:	30 91 ad 22 	lds	r19, 0x22AD
    45ec:	40 91 ae 22 	lds	r20, 0x22AE
    45f0:	50 91 af 22 	lds	r21, 0x22AF
    45f4:	29 8b       	std	Y+17, r18	; 0x11
    45f6:	3a 8b       	std	Y+18, r19	; 0x12
    45f8:	4b 8b       	std	Y+19, r20	; 0x13
    45fa:	5c 8b       	std	Y+20, r21	; 0x14
    45fc:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    4600:	0e 94 8b 44 	call	0x8916	; 0x8916 <lround>
    4604:	3b 01       	movw	r6, r22
    4606:	4c 01       	movw	r8, r24
    4608:	60 92 81 21 	sts	0x2181, r6
    460c:	70 92 82 21 	sts	0x2182, r7
    4610:	80 92 83 21 	sts	0x2183, r8
    4614:	90 92 84 21 	sts	0x2184, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    4618:	80 91 c4 22 	lds	r24, 0x22C4
    461c:	90 91 c5 22 	lds	r25, 0x22C5
    4620:	a0 91 c6 22 	lds	r26, 0x22C6
    4624:	b0 91 c7 22 	lds	r27, 0x22C7
    4628:	8d 87       	std	Y+13, r24	; 0x0d
    462a:	9e 87       	std	Y+14, r25	; 0x0e
    462c:	af 87       	std	Y+15, r26	; 0x0f
    462e:	b8 8b       	std	Y+16, r27	; 0x10
    4630:	c2 01       	movw	r24, r4
    4632:	b1 01       	movw	r22, r2
    4634:	2d 85       	ldd	r18, Y+13	; 0x0d
    4636:	3e 85       	ldd	r19, Y+14	; 0x0e
    4638:	4f 85       	ldd	r20, Y+15	; 0x0f
    463a:	58 89       	ldd	r21, Y+16	; 0x10
    463c:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    4640:	0e 94 8b 44 	call	0x8916	; 0x8916 <lround>
    4644:	5b 01       	movw	r10, r22
    4646:	6c 01       	movw	r12, r24
    4648:	a0 92 85 21 	sts	0x2185, r10
    464c:	b0 92 86 21 	sts	0x2186, r11
    4650:	c0 92 87 21 	sts	0x2187, r12
    4654:	d0 92 88 21 	sts	0x2188, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    4658:	20 91 dc 22 	lds	r18, 0x22DC
    465c:	30 91 dd 22 	lds	r19, 0x22DD
    4660:	40 91 de 22 	lds	r20, 0x22DE
    4664:	50 91 df 22 	lds	r21, 0x22DF
    4668:	29 87       	std	Y+9, r18	; 0x09
    466a:	3a 87       	std	Y+10, r19	; 0x0a
    466c:	4b 87       	std	Y+11, r20	; 0x0b
    466e:	5c 87       	std	Y+12, r21	; 0x0c
    4670:	c8 01       	movw	r24, r16
    4672:	b7 01       	movw	r22, r14
    4674:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    4678:	0e 94 8b 44 	call	0x8916	; 0x8916 <lround>
    467c:	9b 01       	movw	r18, r22
    467e:	ac 01       	movw	r20, r24
    4680:	20 93 89 21 	sts	0x2189, r18
    4684:	30 93 8a 21 	sts	0x218A, r19
    4688:	40 93 8b 21 	sts	0x218B, r20
    468c:	50 93 8c 21 	sts	0x218C, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    4690:	80 91 75 21 	lds	r24, 0x2175
    4694:	90 91 76 21 	lds	r25, 0x2176
    4698:	a0 91 77 21 	lds	r26, 0x2177
    469c:	b0 91 78 21 	lds	r27, 0x2178
    46a0:	84 01       	movw	r16, r8
    46a2:	73 01       	movw	r14, r6
    46a4:	e8 1a       	sub	r14, r24
    46a6:	f9 0a       	sbc	r15, r25
    46a8:	0a 0b       	sbc	r16, r26
    46aa:	1b 0b       	sbc	r17, r27
    46ac:	ed 82       	std	Y+5, r14	; 0x05
    46ae:	fe 82       	std	Y+6, r15	; 0x06
    46b0:	0f 83       	std	Y+7, r16	; 0x07
    46b2:	18 87       	std	Y+8, r17	; 0x08
    46b4:	e0 92 8d 21 	sts	0x218D, r14
    46b8:	f0 92 8e 21 	sts	0x218E, r15
    46bc:	00 93 8f 21 	sts	0x218F, r16
    46c0:	10 93 90 21 	sts	0x2190, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    46c4:	80 91 79 21 	lds	r24, 0x2179
    46c8:	90 91 7a 21 	lds	r25, 0x217A
    46cc:	a0 91 7b 21 	lds	r26, 0x217B
    46d0:	b0 91 7c 21 	lds	r27, 0x217C
    46d4:	86 01       	movw	r16, r12
    46d6:	75 01       	movw	r14, r10
    46d8:	e8 1a       	sub	r14, r24
    46da:	f9 0a       	sbc	r15, r25
    46dc:	0a 0b       	sbc	r16, r26
    46de:	1b 0b       	sbc	r17, r27
    46e0:	e9 82       	std	Y+1, r14	; 0x01
    46e2:	fa 82       	std	Y+2, r15	; 0x02
    46e4:	0b 83       	std	Y+3, r16	; 0x03
    46e6:	1c 83       	std	Y+4, r17	; 0x04
    46e8:	e0 92 91 21 	sts	0x2191, r14
    46ec:	f0 92 92 21 	sts	0x2192, r15
    46f0:	00 93 93 21 	sts	0x2193, r16
    46f4:	10 93 94 21 	sts	0x2194, r17
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    46f8:	80 91 7d 21 	lds	r24, 0x217D
    46fc:	90 91 7e 21 	lds	r25, 0x217E
    4700:	a0 91 7f 21 	lds	r26, 0x217F
    4704:	b0 91 80 21 	lds	r27, 0x2180
    4708:	19 01       	movw	r2, r18
    470a:	2a 01       	movw	r4, r20
    470c:	28 1a       	sub	r2, r24
    470e:	39 0a       	sbc	r3, r25
    4710:	4a 0a       	sbc	r4, r26
    4712:	5b 0a       	sbc	r5, r27
    4714:	20 92 95 21 	sts	0x2195, r2
    4718:	30 92 96 21 	sts	0x2196, r3
    471c:	40 92 97 21 	sts	0x2197, r4
    4720:	50 92 98 21 	sts	0x2198, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    4724:	d8 01       	movw	r26, r16
    4726:	c7 01       	movw	r24, r14
    4728:	0d 81       	ldd	r16, Y+5	; 0x05
    472a:	1e 81       	ldd	r17, Y+6	; 0x06
    472c:	2f 81       	ldd	r18, Y+7	; 0x07
    472e:	38 85       	ldd	r19, Y+8	; 0x08
    4730:	80 0f       	add	r24, r16
    4732:	91 1f       	adc	r25, r17
    4734:	a2 1f       	adc	r26, r18
    4736:	b3 1f       	adc	r27, r19
    4738:	82 0d       	add	r24, r2
    473a:	93 1d       	adc	r25, r3
    473c:	a4 1d       	adc	r26, r4
    473e:	b5 1d       	adc	r27, r5
    4740:	00 97       	sbiw	r24, 0x00	; 0
    4742:	a1 05       	cpc	r26, r1
    4744:	b1 05       	cpc	r27, r1
    4746:	19 f4       	brne	.+6      	; 0x474e <mc_line_blocking+0x1a8>
    4748:	24 e1       	ldi	r18, 0x14	; 20
    474a:	30 e0       	ldi	r19, 0x00	; 0
    474c:	86 c0       	rjmp	.+268    	; 0x485a <mc_line_blocking+0x2b4>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    474e:	29 8d       	ldd	r18, Y+25	; 0x19
    4750:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4752:	23 2b       	or	r18, r19
    4754:	59 f0       	breq	.+22     	; 0x476c <mc_line_blocking+0x1c6>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    4756:	60 ec       	ldi	r22, 0xC0	; 192
    4758:	71 ee       	ldi	r23, 0xE1	; 225
    475a:	84 e6       	ldi	r24, 0x64	; 100
    475c:	9c e4       	ldi	r25, 0x4C	; 76
    475e:	2d 89       	ldd	r18, Y+21	; 0x15
    4760:	3e 89       	ldd	r19, Y+22	; 0x16
    4762:	4f 89       	ldd	r20, Y+23	; 0x17
    4764:	58 8d       	ldd	r21, Y+24	; 0x18
    4766:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    476a:	4e c0       	rjmp	.+156    	; 0x4808 <mc_line_blocking+0x262>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    476c:	6d 81       	ldd	r22, Y+5	; 0x05
    476e:	7e 81       	ldd	r23, Y+6	; 0x06
    4770:	8f 81       	ldd	r24, Y+7	; 0x07
    4772:	98 85       	ldd	r25, Y+8	; 0x08
    4774:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    4778:	29 89       	ldd	r18, Y+17	; 0x11
    477a:	3a 89       	ldd	r19, Y+18	; 0x12
    477c:	4b 89       	ldd	r20, Y+19	; 0x13
    477e:	5c 89       	ldd	r21, Y+20	; 0x14
    4780:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    4784:	0e 94 66 45 	call	0x8acc	; 0x8acc <square>
    4788:	3b 01       	movw	r6, r22
    478a:	4c 01       	movw	r8, r24
    478c:	69 81       	ldd	r22, Y+1	; 0x01
    478e:	7a 81       	ldd	r23, Y+2	; 0x02
    4790:	8b 81       	ldd	r24, Y+3	; 0x03
    4792:	9c 81       	ldd	r25, Y+4	; 0x04
    4794:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    4798:	2d 85       	ldd	r18, Y+13	; 0x0d
    479a:	3e 85       	ldd	r19, Y+14	; 0x0e
    479c:	4f 85       	ldd	r20, Y+15	; 0x0f
    479e:	58 89       	ldd	r21, Y+16	; 0x10
    47a0:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    47a4:	0e 94 66 45 	call	0x8acc	; 0x8acc <square>
    47a8:	5b 01       	movw	r10, r22
    47aa:	6c 01       	movw	r12, r24
    47ac:	c2 01       	movw	r24, r4
    47ae:	b1 01       	movw	r22, r2
    47b0:	0e 94 9b 42 	call	0x8536	; 0x8536 <__floatsisf>
    47b4:	29 85       	ldd	r18, Y+9	; 0x09
    47b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    47b8:	4b 85       	ldd	r20, Y+11	; 0x0b
    47ba:	5c 85       	ldd	r21, Y+12	; 0x0c
    47bc:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    47c0:	0e 94 66 45 	call	0x8acc	; 0x8acc <square>
    47c4:	7b 01       	movw	r14, r22
    47c6:	8c 01       	movw	r16, r24
    47c8:	c4 01       	movw	r24, r8
    47ca:	b3 01       	movw	r22, r6
    47cc:	a6 01       	movw	r20, r12
    47ce:	95 01       	movw	r18, r10
    47d0:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <__addsf3>
    47d4:	a8 01       	movw	r20, r16
    47d6:	97 01       	movw	r18, r14
    47d8:	0e 94 5a 41 	call	0x82b4	; 0x82b4 <__addsf3>
    47dc:	0e 94 28 45 	call	0x8a50	; 0x8a50 <sqrt>
    47e0:	60 93 9d 21 	sts	0x219D, r22
    47e4:	70 93 9e 21 	sts	0x219E, r23
    47e8:	80 93 9f 21 	sts	0x219F, r24
    47ec:	90 93 a0 21 	sts	0x21A0, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    47f0:	2d 89       	ldd	r18, Y+21	; 0x15
    47f2:	3e 89       	ldd	r19, Y+22	; 0x16
    47f4:	4f 89       	ldd	r20, Y+23	; 0x17
    47f6:	58 8d       	ldd	r21, Y+24	; 0x18
    47f8:	0e 94 00 42 	call	0x8400	; 0x8400 <__divsf3>
    47fc:	20 e0       	ldi	r18, 0x00	; 0
    47fe:	34 e2       	ldi	r19, 0x24	; 36
    4800:	44 e7       	ldi	r20, 0x74	; 116
    4802:	59 e4       	ldi	r21, 0x49	; 73
    4804:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    4808:	0e 94 8b 44 	call	0x8916	; 0x8916 <lround>
    480c:	60 93 99 21 	sts	0x2199, r22
    4810:	70 93 9a 21 	sts	0x219A, r23
    4814:	80 93 9b 21 	sts	0x219B, r24
    4818:	90 93 9c 21 	sts	0x219C, r25
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    481c:	a0 90 99 21 	lds	r10, 0x2199
    4820:	b0 90 9a 21 	lds	r11, 0x219A
    4824:	c0 90 9b 21 	lds	r12, 0x219B
    4828:	d0 90 9c 21 	lds	r13, 0x219C
    482c:	6d 81       	ldd	r22, Y+5	; 0x05
    482e:	7e 81       	ldd	r23, Y+6	; 0x06
    4830:	8f 81       	ldd	r24, Y+7	; 0x07
    4832:	98 85       	ldd	r25, Y+8	; 0x08
    4834:	29 81       	ldd	r18, Y+1	; 0x01
    4836:	3a 81       	ldd	r19, Y+2	; 0x02
    4838:	4b 81       	ldd	r20, Y+3	; 0x03
    483a:	5c 81       	ldd	r21, Y+4	; 0x04
    483c:	82 01       	movw	r16, r4
    483e:	71 01       	movw	r14, r2
    4840:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    4844:	e5 e7       	ldi	r30, 0x75	; 117
    4846:	f1 e2       	ldi	r31, 0x21	; 33
    4848:	df 01       	movw	r26, r30
    484a:	1c 96       	adiw	r26, 0x0c	; 12
    484c:	8c e0       	ldi	r24, 0x0C	; 12
    484e:	0d 90       	ld	r0, X+
    4850:	01 92       	st	Z+, r0
    4852:	81 50       	subi	r24, 0x01	; 1
    4854:	e1 f7       	brne	.-8      	; 0x484e <mc_line_blocking+0x2a8>
    4856:	20 e0       	ldi	r18, 0x00	; 0
    4858:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    485a:	c9 01       	movw	r24, r18
    485c:	6a 96       	adiw	r28, 0x1a	; 26
    485e:	cd bf       	out	0x3d, r28	; 61
    4860:	de bf       	out	0x3e, r29	; 62
    4862:	cf 91       	pop	r28
    4864:	df 91       	pop	r29
    4866:	1f 91       	pop	r17
    4868:	0f 91       	pop	r16
    486a:	ff 90       	pop	r15
    486c:	ef 90       	pop	r14
    486e:	df 90       	pop	r13
    4870:	cf 90       	pop	r12
    4872:	bf 90       	pop	r11
    4874:	af 90       	pop	r10
    4876:	9f 90       	pop	r9
    4878:	8f 90       	pop	r8
    487a:	7f 90       	pop	r7
    487c:	6f 90       	pop	r6
    487e:	5f 90       	pop	r5
    4880:	4f 90       	pop	r4
    4882:	3f 90       	pop	r3
    4884:	2f 90       	pop	r2
    4886:	08 95       	ret

00004888 <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    4888:	e0 e6       	ldi	r30, 0x60	; 96
    488a:	f6 e0       	ldi	r31, 0x06	; 6
    488c:	80 e4       	ldi	r24, 0x40	; 64
    488e:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    4890:	80 e8       	ldi	r24, 0x80	; 128
    4892:	81 83       	std	Z+1, r24	; 0x01
}
    4894:	08 95       	ret

00004896 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    4896:	97 fd       	sbrc	r25, 7
    4898:	05 c0       	rjmp	.+10     	; 0x48a4 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    489a:	80 e8       	ldi	r24, 0x80	; 128
    489c:	e0 e6       	ldi	r30, 0x60	; 96
    489e:	f6 e0       	ldi	r31, 0x06	; 6
    48a0:	85 83       	std	Z+5, r24	; 0x05
    48a2:	04 c0       	rjmp	.+8      	; 0x48ac <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    48a4:	80 e8       	ldi	r24, 0x80	; 128
    48a6:	e0 e6       	ldi	r30, 0x60	; 96
    48a8:	f6 e0       	ldi	r31, 0x06	; 6
    48aa:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    48ac:	80 e4       	ldi	r24, 0x40	; 64
    48ae:	e0 e6       	ldi	r30, 0x60	; 96
    48b0:	f6 e0       	ldi	r31, 0x06	; 6
    48b2:	85 83       	std	Z+5, r24	; 0x05
}
    48b4:	08 95       	ret

000048b6 <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    48b6:	80 e4       	ldi	r24, 0x40	; 64
    48b8:	e0 e6       	ldi	r30, 0x60	; 96
    48ba:	f6 e0       	ldi	r31, 0x06	; 6
    48bc:	86 83       	std	Z+6, r24	; 0x06
}
    48be:	08 95       	ret

000048c0 <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    48c0:	cf 93       	push	r28
    48c2:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    48c4:	10 92 48 22 	sts	0x2248, r1
	ax.exec_mutex = FALSE;
    48c8:	10 92 47 22 	sts	0x2247, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    48cc:	80 e0       	ldi	r24, 0x00	; 0
    48ce:	96 e0       	ldi	r25, 0x06	; 6
    48d0:	80 93 57 22 	sts	0x2257, r24
    48d4:	90 93 58 22 	sts	0x2258, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    48d8:	80 ea       	ldi	r24, 0xA0	; 160
    48da:	96 e0       	ldi	r25, 0x06	; 6
    48dc:	80 93 67 22 	sts	0x2267, r24
    48e0:	90 93 68 22 	sts	0x2268, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    48e4:	80 e8       	ldi	r24, 0x80	; 128
    48e6:	96 e0       	ldi	r25, 0x06	; 6
    48e8:	80 93 77 22 	sts	0x2277, r24
    48ec:	90 93 78 22 	sts	0x2278, r25
	ax.a[A].port = &A_MOTOR_PORT;
    48f0:	80 e6       	ldi	r24, 0x60	; 96
    48f2:	96 e0       	ldi	r25, 0x06	; 6
    48f4:	80 93 87 22 	sts	0x2287, r24
    48f8:	90 93 88 22 	sts	0x2288, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    48fc:	80 e0       	ldi	r24, 0x00	; 0
    48fe:	98 e0       	ldi	r25, 0x08	; 8
    4900:	80 93 59 22 	sts	0x2259, r24
    4904:	90 93 5a 22 	sts	0x225A, r25
	ax.a[Y].timer = &Y_TIMER;
    4908:	80 e0       	ldi	r24, 0x00	; 0
    490a:	99 e0       	ldi	r25, 0x09	; 9
    490c:	80 93 69 22 	sts	0x2269, r24
    4910:	90 93 6a 22 	sts	0x226A, r25
	ax.a[Z].timer = &Z_TIMER;
    4914:	80 e0       	ldi	r24, 0x00	; 0
    4916:	9a e0       	ldi	r25, 0x0A	; 10
    4918:	80 93 79 22 	sts	0x2279, r24
    491c:	90 93 7a 22 	sts	0x227A, r25
	ax.a[A].timer = &A_TIMER;
    4920:	80 e0       	ldi	r24, 0x00	; 0
    4922:	9b e0       	ldi	r25, 0x0B	; 11
    4924:	80 93 89 22 	sts	0x2289, r24
    4928:	90 93 8a 22 	sts	0x228A, r25
    492c:	cb e9       	ldi	r28, 0x9B	; 155
    492e:	d2 e2       	ldi	r29, 0x22	; 34
    4930:	a5 e5       	ldi	r26, 0x55	; 85
    4932:	b2 e2       	ldi	r27, 0x22	; 34

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    4934:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4936:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    4938:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    493a:	88 81       	ld	r24, Y
    493c:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    493e:	12 96       	adiw	r26, 0x02	; 2
    4940:	ed 91       	ld	r30, X+
    4942:	fc 91       	ld	r31, X
    4944:	13 97       	sbiw	r26, 0x03	; 3
    4946:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    4948:	12 96       	adiw	r26, 0x02	; 2
    494a:	ed 91       	ld	r30, X+
    494c:	fc 91       	ld	r31, X
    494e:	13 97       	sbiw	r26, 0x03	; 3
    4950:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
    4952:	12 96       	adiw	r26, 0x02	; 2
    4954:	ed 91       	ld	r30, X+
    4956:	fc 91       	ld	r31, X
    4958:	13 97       	sbiw	r26, 0x03	; 3
    495a:	84 81       	ldd	r24, Z+4	; 0x04
    495c:	88 61       	ori	r24, 0x18	; 24
    495e:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4960:	12 96       	adiw	r26, 0x02	; 2
    4962:	ed 91       	ld	r30, X+
    4964:	fc 91       	ld	r31, X
    4966:	13 97       	sbiw	r26, 0x03	; 3
    4968:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    496a:	14 96       	adiw	r26, 0x04	; 4
    496c:	ed 91       	ld	r30, X+
    496e:	fc 91       	ld	r31, X
    4970:	15 97       	sbiw	r26, 0x05	; 5
    4972:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    4974:	14 96       	adiw	r26, 0x04	; 4
    4976:	ed 91       	ld	r30, X+
    4978:	fc 91       	ld	r31, X
    497a:	15 97       	sbiw	r26, 0x05	; 5
    497c:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    497e:	14 96       	adiw	r26, 0x04	; 4
    4980:	ed 91       	ld	r30, X+
    4982:	fc 91       	ld	r31, X
    4984:	15 97       	sbiw	r26, 0x05	; 5
    4986:	96 83       	std	Z+6, r25	; 0x06
    4988:	68 96       	adiw	r28, 0x18	; 24
    498a:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    498c:	82 e2       	ldi	r24, 0x22	; 34
    498e:	cb 3f       	cpi	r28, 0xFB	; 251
    4990:	d8 07       	cpc	r29, r24
    4992:	99 f6       	brne	.-90     	; 0x493a <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    4994:	df 91       	pop	r29
    4996:	cf 91       	pop	r28
    4998:	08 95       	ret

0000499a <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    499a:	e8 2f       	mov	r30, r24
    499c:	f0 e0       	ldi	r31, 0x00	; 0
    499e:	84 e0       	ldi	r24, 0x04	; 4
    49a0:	ee 0f       	add	r30, r30
    49a2:	ff 1f       	adc	r31, r31
    49a4:	8a 95       	dec	r24
    49a6:	e1 f7       	brne	.-8      	; 0x49a0 <st_set_polarity+0x6>
    49a8:	e9 5b       	subi	r30, 0xB9	; 185
    49aa:	fd 4d       	sbci	r31, 0xDD	; 221
    49ac:	66 87       	std	Z+14, r22	; 0x0e
}
    49ae:	08 95       	ret

000049b0 <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X].step_counter = 0x00001000;
    49b0:	2b e4       	ldi	r18, 0x4B	; 75
    49b2:	32 e2       	ldi	r19, 0x22	; 34
    49b4:	80 e0       	ldi	r24, 0x00	; 0
    49b6:	90 e1       	ldi	r25, 0x10	; 16
    49b8:	a0 e0       	ldi	r26, 0x00	; 0
    49ba:	b0 e0       	ldi	r27, 0x00	; 0
    49bc:	80 93 4b 22 	sts	0x224B, r24
    49c0:	90 93 4c 22 	sts	0x224C, r25
    49c4:	a0 93 4d 22 	sts	0x224D, r26
    49c8:	b0 93 4e 22 	sts	0x224E, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    49cc:	e0 91 59 22 	lds	r30, 0x2259
    49d0:	f0 91 5a 22 	lds	r31, 0x225A
    49d4:	80 e0       	ldi	r24, 0x00	; 0
    49d6:	90 e1       	ldi	r25, 0x10	; 16
    49d8:	86 a3       	std	Z+38, r24	; 0x26
    49da:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    49dc:	41 e0       	ldi	r20, 0x01	; 1
    49de:	40 83       	st	Z, r20

	ax.a[Y].step_counter = 0x00000800;
    49e0:	80 e0       	ldi	r24, 0x00	; 0
    49e2:	98 e0       	ldi	r25, 0x08	; 8
    49e4:	a0 e0       	ldi	r26, 0x00	; 0
    49e6:	b0 e0       	ldi	r27, 0x00	; 0
    49e8:	80 93 5b 22 	sts	0x225B, r24
    49ec:	90 93 5c 22 	sts	0x225C, r25
    49f0:	a0 93 5d 22 	sts	0x225D, r26
    49f4:	b0 93 5e 22 	sts	0x225E, r27
	ax.a[Y].timer->PER = 0x2000;
    49f8:	e0 91 69 22 	lds	r30, 0x2269
    49fc:	f0 91 6a 22 	lds	r31, 0x226A
    4a00:	80 e0       	ldi	r24, 0x00	; 0
    4a02:	90 e2       	ldi	r25, 0x20	; 32
    4a04:	86 a3       	std	Z+38, r24	; 0x26
    4a06:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4a08:	40 83       	st	Z, r20

	ax.a[Z].step_counter = 0x00000600;
    4a0a:	80 e0       	ldi	r24, 0x00	; 0
    4a0c:	96 e0       	ldi	r25, 0x06	; 6
    4a0e:	a0 e0       	ldi	r26, 0x00	; 0
    4a10:	b0 e0       	ldi	r27, 0x00	; 0
    4a12:	80 93 6b 22 	sts	0x226B, r24
    4a16:	90 93 6c 22 	sts	0x226C, r25
    4a1a:	a0 93 6d 22 	sts	0x226D, r26
    4a1e:	b0 93 6e 22 	sts	0x226E, r27
	ax.a[Z].timer->PER = 0x3000;
    4a22:	e0 91 79 22 	lds	r30, 0x2279
    4a26:	f0 91 7a 22 	lds	r31, 0x227A
    4a2a:	80 e0       	ldi	r24, 0x00	; 0
    4a2c:	90 e3       	ldi	r25, 0x30	; 48
    4a2e:	86 a3       	std	Z+38, r24	; 0x26
    4a30:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4a32:	40 83       	st	Z, r20

	ax.a[A].step_counter = 0x00000400;
    4a34:	80 e0       	ldi	r24, 0x00	; 0
    4a36:	94 e0       	ldi	r25, 0x04	; 4
    4a38:	a0 e0       	ldi	r26, 0x00	; 0
    4a3a:	b0 e0       	ldi	r27, 0x00	; 0
    4a3c:	80 93 7b 22 	sts	0x227B, r24
    4a40:	90 93 7c 22 	sts	0x227C, r25
    4a44:	a0 93 7d 22 	sts	0x227D, r26
    4a48:	b0 93 7e 22 	sts	0x227E, r27
	ax.a[A].timer->PER = 0x4000;
    4a4c:	d9 01       	movw	r26, r18
    4a4e:	de 96       	adiw	r26, 0x3e	; 62
    4a50:	ed 91       	ld	r30, X+
    4a52:	fc 91       	ld	r31, X
    4a54:	df 97       	sbiw	r26, 0x3f	; 63
    4a56:	80 e0       	ldi	r24, 0x00	; 0
    4a58:	90 e4       	ldi	r25, 0x40	; 64
    4a5a:	86 a3       	std	Z+38, r24	; 0x26
    4a5c:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    4a5e:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    4a60:	23 50       	subi	r18, 0x03	; 3
    4a62:	30 40       	sbci	r19, 0x00	; 0
    4a64:	f9 01       	movw	r30, r18
    4a66:	80 81       	ld	r24, Z
    4a68:	8f 60       	ori	r24, 0x0F	; 15
    4a6a:	80 83       	st	Z, r24
}
    4a6c:	08 95       	ret

00004a6e <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    4a6e:	f8 94       	cli
	mv_flush();									// flush the move buffer
    4a70:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <mv_flush>
	sei();
    4a74:	78 94       	sei
}
    4a76:	08 95       	ret

00004a78 <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    4a78:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    4a7a:	e0 91 59 22 	lds	r30, 0x2259
    4a7e:	f0 91 5a 22 	lds	r31, 0x225A
    4a82:	10 82       	st	Z, r1
    4a84:	e0 91 69 22 	lds	r30, 0x2269
    4a88:	f0 91 6a 22 	lds	r31, 0x226A
    4a8c:	10 82       	st	Z, r1
    4a8e:	e0 91 79 22 	lds	r30, 0x2279
    4a92:	f0 91 7a 22 	lds	r31, 0x227A
    4a96:	10 82       	st	Z, r1
    4a98:	e0 91 89 22 	lds	r30, 0x2289
    4a9c:	f0 91 8a 22 	lds	r31, 0x228A
    4aa0:	10 82       	st	Z, r1
	}	
	mv_flush();									// flush the move buffer
    4aa2:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4aa6:	10 92 48 22 	sts	0x2248, r1
	sei();
    4aaa:	78 94       	sei
}
    4aac:	08 95       	ret

00004aae <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    4aae:	cf 92       	push	r12
    4ab0:	df 92       	push	r13
    4ab2:	ef 92       	push	r14
    4ab4:	ff 92       	push	r15
    4ab6:	0f 93       	push	r16
    4ab8:	1f 93       	push	r17
    4aba:	cf 93       	push	r28
    4abc:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    4abe:	80 91 47 22 	lds	r24, 0x2247
    4ac2:	88 23       	and	r24, r24
    4ac4:	09 f0       	breq	.+2      	; 0x4ac8 <st_execute_move+0x1a>
    4ac6:	32 c1       	rjmp	.+612    	; 0x4d2c <st_execute_move+0x27e>
		return;
	}
	ax.exec_mutex = TRUE;
    4ac8:	81 e0       	ldi	r24, 0x01	; 1
    4aca:	80 93 47 22 	sts	0x2247, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    4ace:	80 91 48 22 	lds	r24, 0x2248
    4ad2:	88 23       	and	r24, r24
    4ad4:	09 f0       	breq	.+2      	; 0x4ad8 <st_execute_move+0x2a>
    4ad6:	28 c1       	rjmp	.+592    	; 0x4d28 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    4ad8:	0e 94 cb 2c 	call	0x5996	; 0x5996 <mv_dequeue_move_buffer>
    4adc:	80 93 49 22 	sts	0x2249, r24
    4ae0:	90 93 4a 22 	sts	0x224A, r25
    4ae4:	89 2b       	or	r24, r25
    4ae6:	09 f4       	brne	.+2      	; 0x4aea <st_execute_move+0x3c>
    4ae8:	1f c1       	rjmp	.+574    	; 0x4d28 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;
		return;
    4aea:	6b e4       	ldi	r22, 0x4B	; 75
    4aec:	72 e2       	ldi	r23, 0x22	; 34
    4aee:	00 e0       	ldi	r16, 0x00	; 0
    4af0:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4af2:	94 e0       	ldi	r25, 0x04	; 4
    4af4:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4af6:	82 e0       	ldi	r24, 0x02	; 2
    4af8:	d8 2e       	mov	r13, r24
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.exec_mutex = FALSE;
		return;
    4afa:	f0 2e       	mov	r15, r16
    4afc:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    4afe:	db 01       	movw	r26, r22
    4b00:	1e 96       	adiw	r26, 0x0e	; 14
    4b02:	ed 91       	ld	r30, X+
    4b04:	fc 91       	ld	r31, X
    4b06:	1f 97       	sbiw	r26, 0x0f	; 15
    4b08:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    4b0a:	c0 91 49 22 	lds	r28, 0x2249
    4b0e:	d0 91 4a 22 	lds	r29, 0x224A
    4b12:	c8 01       	movw	r24, r16
    4b14:	fc 01       	movw	r30, r24
    4b16:	b3 e0       	ldi	r27, 0x03	; 3
    4b18:	ee 0f       	add	r30, r30
    4b1a:	ff 1f       	adc	r31, r31
    4b1c:	ba 95       	dec	r27
    4b1e:	e1 f7       	brne	.-8      	; 0x4b18 <st_execute_move+0x6a>
    4b20:	88 0f       	add	r24, r24
    4b22:	99 1f       	adc	r25, r25
    4b24:	e8 0f       	add	r30, r24
    4b26:	f9 1f       	adc	r31, r25
    4b28:	ec 0f       	add	r30, r28
    4b2a:	fd 1f       	adc	r31, r29
    4b2c:	80 81       	ld	r24, Z
    4b2e:	91 81       	ldd	r25, Z+1	; 0x01
    4b30:	a2 81       	ldd	r26, Z+2	; 0x02
    4b32:	b3 81       	ldd	r27, Z+3	; 0x03
    4b34:	00 97       	sbiw	r24, 0x00	; 0
    4b36:	a1 05       	cpc	r26, r1
    4b38:	b1 05       	cpc	r27, r1
    4b3a:	09 f4       	brne	.+2      	; 0x4b3e <st_execute_move+0x90>
    4b3c:	a6 c0       	rjmp	.+332    	; 0x4c8a <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    4b3e:	c8 01       	movw	r24, r16
    4b40:	9c 01       	movw	r18, r24
    4b42:	f3 e0       	ldi	r31, 0x03	; 3
    4b44:	22 0f       	add	r18, r18
    4b46:	33 1f       	adc	r19, r19
    4b48:	fa 95       	dec	r31
    4b4a:	e1 f7       	brne	.-8      	; 0x4b44 <st_execute_move+0x96>
    4b4c:	88 0f       	add	r24, r24
    4b4e:	99 1f       	adc	r25, r25
    4b50:	28 0f       	add	r18, r24
    4b52:	39 1f       	adc	r19, r25
    4b54:	c2 0f       	add	r28, r18
    4b56:	d3 1f       	adc	r29, r19
    4b58:	89 85       	ldd	r24, Y+9	; 0x09
    4b5a:	fb 01       	movw	r30, r22
    4b5c:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4b5e:	e0 91 49 22 	lds	r30, 0x2249
    4b62:	f0 91 4a 22 	lds	r31, 0x224A
    4b66:	c8 01       	movw	r24, r16
    4b68:	9c 01       	movw	r18, r24
    4b6a:	53 e0       	ldi	r21, 0x03	; 3
    4b6c:	22 0f       	add	r18, r18
    4b6e:	33 1f       	adc	r19, r19
    4b70:	5a 95       	dec	r21
    4b72:	e1 f7       	brne	.-8      	; 0x4b6c <st_execute_move+0xbe>
    4b74:	88 0f       	add	r24, r24
    4b76:	99 1f       	adc	r25, r25
    4b78:	28 0f       	add	r18, r24
    4b7a:	39 1f       	adc	r19, r25
    4b7c:	e2 0f       	add	r30, r18
    4b7e:	f3 1f       	adc	r31, r19
    4b80:	90 85       	ldd	r25, Z+8	; 0x08
    4b82:	db 01       	movw	r26, r22
    4b84:	1a 96       	adiw	r26, 0x0a	; 10
    4b86:	8c 91       	ld	r24, X
    4b88:	1a 97       	sbiw	r26, 0x0a	; 10
    4b8a:	1c 96       	adiw	r26, 0x0c	; 12
    4b8c:	ed 91       	ld	r30, X+
    4b8e:	fc 91       	ld	r31, X
    4b90:	1d 97       	sbiw	r26, 0x0d	; 13
    4b92:	98 17       	cp	r25, r24
    4b94:	11 f0       	breq	.+4      	; 0x4b9a <st_execute_move+0xec>
    4b96:	d5 82       	std	Z+5, r13	; 0x05
    4b98:	01 c0       	rjmp	.+2      	; 0x4b9c <st_execute_move+0xee>
    4b9a:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    4b9c:	40 91 49 22 	lds	r20, 0x2249
    4ba0:	50 91 4a 22 	lds	r21, 0x224A
    4ba4:	8f 2d       	mov	r24, r15
    4ba6:	9e 2d       	mov	r25, r14
    4ba8:	fc 01       	movw	r30, r24
    4baa:	33 e0       	ldi	r19, 0x03	; 3
    4bac:	ee 0f       	add	r30, r30
    4bae:	ff 1f       	adc	r31, r31
    4bb0:	3a 95       	dec	r19
    4bb2:	e1 f7       	brne	.-8      	; 0x4bac <st_execute_move+0xfe>
    4bb4:	88 0f       	add	r24, r24
    4bb6:	99 1f       	adc	r25, r25
    4bb8:	e8 0f       	add	r30, r24
    4bba:	f9 1f       	adc	r31, r25
    4bbc:	e4 0f       	add	r30, r20
    4bbe:	f5 1f       	adc	r31, r21
    4bc0:	80 81       	ld	r24, Z
    4bc2:	91 81       	ldd	r25, Z+1	; 0x01
    4bc4:	a2 81       	ldd	r26, Z+2	; 0x02
    4bc6:	b3 81       	ldd	r27, Z+3	; 0x03
    4bc8:	fb 01       	movw	r30, r22
    4bca:	80 83       	st	Z, r24
    4bcc:	91 83       	std	Z+1, r25	; 0x01
    4bce:	a2 83       	std	Z+2, r26	; 0x02
    4bd0:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    4bd2:	8f 2d       	mov	r24, r15
    4bd4:	9e 2d       	mov	r25, r14
    4bd6:	fc 01       	movw	r30, r24
    4bd8:	b3 e0       	ldi	r27, 0x03	; 3
    4bda:	ee 0f       	add	r30, r30
    4bdc:	ff 1f       	adc	r31, r31
    4bde:	ba 95       	dec	r27
    4be0:	e1 f7       	brne	.-8      	; 0x4bda <st_execute_move+0x12c>
    4be2:	88 0f       	add	r24, r24
    4be4:	99 1f       	adc	r25, r25
    4be6:	e8 0f       	add	r30, r24
    4be8:	f9 1f       	adc	r31, r25
    4bea:	e4 0f       	add	r30, r20
    4bec:	f5 1f       	adc	r31, r21
    4bee:	86 81       	ldd	r24, Z+6	; 0x06
    4bf0:	97 81       	ldd	r25, Z+7	; 0x07
    4bf2:	db 01       	movw	r26, r22
    4bf4:	16 96       	adiw	r26, 0x06	; 6
    4bf6:	8d 93       	st	X+, r24
    4bf8:	9c 93       	st	X, r25
    4bfa:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    4bfc:	8f 2d       	mov	r24, r15
    4bfe:	9e 2d       	mov	r25, r14
    4c00:	fc 01       	movw	r30, r24
    4c02:	33 e0       	ldi	r19, 0x03	; 3
    4c04:	ee 0f       	add	r30, r30
    4c06:	ff 1f       	adc	r31, r31
    4c08:	3a 95       	dec	r19
    4c0a:	e1 f7       	brne	.-8      	; 0x4c04 <st_execute_move+0x156>
    4c0c:	88 0f       	add	r24, r24
    4c0e:	99 1f       	adc	r25, r25
    4c10:	e8 0f       	add	r30, r24
    4c12:	f9 1f       	adc	r31, r25
    4c14:	e4 0f       	add	r30, r20
    4c16:	f5 1f       	adc	r31, r21
    4c18:	86 81       	ldd	r24, Z+6	; 0x06
    4c1a:	97 81       	ldd	r25, Z+7	; 0x07
    4c1c:	18 96       	adiw	r26, 0x08	; 8
    4c1e:	8d 93       	st	X+, r24
    4c20:	9c 93       	st	X, r25
    4c22:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    4c24:	8f 2d       	mov	r24, r15
    4c26:	9e 2d       	mov	r25, r14
    4c28:	fc 01       	movw	r30, r24
    4c2a:	33 e0       	ldi	r19, 0x03	; 3
    4c2c:	ee 0f       	add	r30, r30
    4c2e:	ff 1f       	adc	r31, r31
    4c30:	3a 95       	dec	r19
    4c32:	e1 f7       	brne	.-8      	; 0x4c2c <st_execute_move+0x17e>
    4c34:	88 0f       	add	r24, r24
    4c36:	99 1f       	adc	r25, r25
    4c38:	e8 0f       	add	r30, r24
    4c3a:	f9 1f       	adc	r31, r25
    4c3c:	e4 0f       	add	r30, r20
    4c3e:	f5 1f       	adc	r31, r21
    4c40:	84 81       	ldd	r24, Z+4	; 0x04
    4c42:	95 81       	ldd	r25, Z+5	; 0x05
    4c44:	14 96       	adiw	r26, 0x04	; 4
    4c46:	8d 93       	st	X+, r24
    4c48:	9c 93       	st	X, r25
    4c4a:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    4c4c:	1e 96       	adiw	r26, 0x0e	; 14
    4c4e:	ed 91       	ld	r30, X+
    4c50:	fc 91       	ld	r31, X
    4c52:	1f 97       	sbiw	r26, 0x0f	; 15
    4c54:	8f 2d       	mov	r24, r15
    4c56:	9e 2d       	mov	r25, r14
    4c58:	9c 01       	movw	r18, r24
    4c5a:	b3 e0       	ldi	r27, 0x03	; 3
    4c5c:	22 0f       	add	r18, r18
    4c5e:	33 1f       	adc	r19, r19
    4c60:	ba 95       	dec	r27
    4c62:	e1 f7       	brne	.-8      	; 0x4c5c <st_execute_move+0x1ae>
    4c64:	88 0f       	add	r24, r24
    4c66:	99 1f       	adc	r25, r25
    4c68:	28 0f       	add	r18, r24
    4c6a:	39 1f       	adc	r19, r25
    4c6c:	42 0f       	add	r20, r18
    4c6e:	53 1f       	adc	r21, r19
    4c70:	da 01       	movw	r26, r20
    4c72:	14 96       	adiw	r26, 0x04	; 4
    4c74:	8d 91       	ld	r24, X+
    4c76:	9c 91       	ld	r25, X
    4c78:	15 97       	sbiw	r26, 0x05	; 5
    4c7a:	86 a3       	std	Z+38, r24	; 0x26
    4c7c:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4c7e:	db 01       	movw	r26, r22
    4c80:	1c 96       	adiw	r26, 0x0c	; 12
    4c82:	ed 91       	ld	r30, X+
    4c84:	fc 91       	ld	r31, X
    4c86:	1d 97       	sbiw	r26, 0x0d	; 13
    4c88:	c6 82       	std	Z+6, r12	; 0x06
    4c8a:	0f 5f       	subi	r16, 0xFF	; 255
    4c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c8e:	60 5f       	subi	r22, 0xF0	; 240
    4c90:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    4c92:	03 30       	cpi	r16, 0x03	; 3
    4c94:	11 05       	cpc	r17, r1
    4c96:	09 f0       	breq	.+2      	; 0x4c9a <st_execute_move+0x1ec>
    4c98:	30 cf       	rjmp	.-416    	; 0x4afa <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4c9a:	10 92 48 22 	sts	0x2248, r1
	if (ax.a[X].step_counter) { 
    4c9e:	80 91 4b 22 	lds	r24, 0x224B
    4ca2:	90 91 4c 22 	lds	r25, 0x224C
    4ca6:	a0 91 4d 22 	lds	r26, 0x224D
    4caa:	b0 91 4e 22 	lds	r27, 0x224E
    4cae:	00 97       	sbiw	r24, 0x00	; 0
    4cb0:	a1 05       	cpc	r26, r1
    4cb2:	b1 05       	cpc	r27, r1
    4cb4:	59 f0       	breq	.+22     	; 0x4ccc <st_execute_move+0x21e>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    4cb6:	e0 91 59 22 	lds	r30, 0x2259
    4cba:	f0 91 5a 22 	lds	r31, 0x225A
    4cbe:	81 e0       	ldi	r24, 0x01	; 1
    4cc0:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4cc2:	80 91 48 22 	lds	r24, 0x2248
    4cc6:	88 60       	ori	r24, 0x08	; 8
    4cc8:	80 93 48 22 	sts	0x2248, r24
	}
	if (ax.a[Y].step_counter) {
    4ccc:	80 91 5b 22 	lds	r24, 0x225B
    4cd0:	90 91 5c 22 	lds	r25, 0x225C
    4cd4:	a0 91 5d 22 	lds	r26, 0x225D
    4cd8:	b0 91 5e 22 	lds	r27, 0x225E
    4cdc:	00 97       	sbiw	r24, 0x00	; 0
    4cde:	a1 05       	cpc	r26, r1
    4ce0:	b1 05       	cpc	r27, r1
    4ce2:	59 f0       	breq	.+22     	; 0x4cfa <st_execute_move+0x24c>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4ce4:	e0 91 69 22 	lds	r30, 0x2269
    4ce8:	f0 91 6a 22 	lds	r31, 0x226A
    4cec:	81 e0       	ldi	r24, 0x01	; 1
    4cee:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4cf0:	80 91 48 22 	lds	r24, 0x2248
    4cf4:	84 60       	ori	r24, 0x04	; 4
    4cf6:	80 93 48 22 	sts	0x2248, r24
	}
	if (ax.a[Z].step_counter) {
    4cfa:	80 91 6b 22 	lds	r24, 0x226B
    4cfe:	90 91 6c 22 	lds	r25, 0x226C
    4d02:	a0 91 6d 22 	lds	r26, 0x226D
    4d06:	b0 91 6e 22 	lds	r27, 0x226E
    4d0a:	00 97       	sbiw	r24, 0x00	; 0
    4d0c:	a1 05       	cpc	r26, r1
    4d0e:	b1 05       	cpc	r27, r1
    4d10:	59 f0       	breq	.+22     	; 0x4d28 <st_execute_move+0x27a>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4d12:	e0 91 79 22 	lds	r30, 0x2279
    4d16:	f0 91 7a 22 	lds	r31, 0x227A
    4d1a:	81 e0       	ldi	r24, 0x01	; 1
    4d1c:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4d1e:	80 91 48 22 	lds	r24, 0x2248
    4d22:	82 60       	ori	r24, 0x02	; 2
    4d24:	80 93 48 22 	sts	0x2248, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4d28:	10 92 47 22 	sts	0x2247, r1
}
    4d2c:	df 91       	pop	r29
    4d2e:	cf 91       	pop	r28
    4d30:	1f 91       	pop	r17
    4d32:	0f 91       	pop	r16
    4d34:	ff 90       	pop	r15
    4d36:	ef 90       	pop	r14
    4d38:	df 90       	pop	r13
    4d3a:	cf 90       	pop	r12
    4d3c:	08 95       	ret

00004d3e <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4d3e:	10 92 47 22 	sts	0x2247, r1
	st_execute_move();		// recursively empty the move queue
    4d42:	0e 94 57 25 	call	0x4aae	; 0x4aae <st_execute_move>
	return;
}
    4d46:	08 95       	ret

00004d48 <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4d48:	1f 92       	push	r1
    4d4a:	0f 92       	push	r0
    4d4c:	0f b6       	in	r0, 0x3f	; 63
    4d4e:	0f 92       	push	r0
    4d50:	0b b6       	in	r0, 0x3b	; 59
    4d52:	0f 92       	push	r0
    4d54:	11 24       	eor	r1, r1
    4d56:	2f 93       	push	r18
    4d58:	3f 93       	push	r19
    4d5a:	4f 93       	push	r20
    4d5c:	5f 93       	push	r21
    4d5e:	6f 93       	push	r22
    4d60:	7f 93       	push	r23
    4d62:	8f 93       	push	r24
    4d64:	9f 93       	push	r25
    4d66:	af 93       	push	r26
    4d68:	bf 93       	push	r27
    4d6a:	ef 93       	push	r30
    4d6c:	ff 93       	push	r31
	if (--ax.a[A].postscale_counter != 0) {
    4d6e:	80 91 83 22 	lds	r24, 0x2283
    4d72:	90 91 84 22 	lds	r25, 0x2284
    4d76:	01 97       	sbiw	r24, 0x01	; 1
    4d78:	80 93 83 22 	sts	0x2283, r24
    4d7c:	90 93 84 22 	sts	0x2284, r25
    4d80:	89 2b       	or	r24, r25
    4d82:	a1 f5       	brne	.+104    	; 0x4dec <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4d84:	e0 e6       	ldi	r30, 0x60	; 96
    4d86:	f6 e0       	ldi	r31, 0x06	; 6
    4d88:	81 e0       	ldi	r24, 0x01	; 1
    4d8a:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    4d8c:	80 91 7b 22 	lds	r24, 0x227B
    4d90:	90 91 7c 22 	lds	r25, 0x227C
    4d94:	a0 91 7d 22 	lds	r26, 0x227D
    4d98:	b0 91 7e 22 	lds	r27, 0x227E
    4d9c:	01 97       	sbiw	r24, 0x01	; 1
    4d9e:	a1 09       	sbc	r26, r1
    4da0:	b1 09       	sbc	r27, r1
    4da2:	80 93 7b 22 	sts	0x227B, r24
    4da6:	90 93 7c 22 	sts	0x227C, r25
    4daa:	a0 93 7d 22 	sts	0x227D, r26
    4dae:	b0 93 7e 22 	sts	0x227E, r27
    4db2:	00 97       	sbiw	r24, 0x00	; 0
    4db4:	a1 05       	cpc	r26, r1
    4db6:	b1 05       	cpc	r27, r1
    4db8:	69 f4       	brne	.+26     	; 0x4dd4 <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4dba:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4dbe:	84 e0       	ldi	r24, 0x04	; 4
    4dc0:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4dc2:	80 91 48 22 	lds	r24, 0x2248
    4dc6:	8e 7f       	andi	r24, 0xFE	; 254
    4dc8:	80 93 48 22 	sts	0x2248, r24
		if (ax.active_axes == 0) {
    4dcc:	88 23       	and	r24, r24
    4dce:	11 f4       	brne	.+4      	; 0x4dd4 <__vector_108+0x8c>
			st_execute_move();
    4dd0:	0e 94 57 25 	call	0x4aae	; 0x4aae <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    4dd4:	80 91 81 22 	lds	r24, 0x2281
    4dd8:	90 91 82 22 	lds	r25, 0x2282
    4ddc:	80 93 83 22 	sts	0x2283, r24
    4de0:	90 93 84 22 	sts	0x2284, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4de4:	81 e0       	ldi	r24, 0x01	; 1
    4de6:	e0 e6       	ldi	r30, 0x60	; 96
    4de8:	f6 e0       	ldi	r31, 0x06	; 6
    4dea:	86 83       	std	Z+6, r24	; 0x06
}
    4dec:	ff 91       	pop	r31
    4dee:	ef 91       	pop	r30
    4df0:	bf 91       	pop	r27
    4df2:	af 91       	pop	r26
    4df4:	9f 91       	pop	r25
    4df6:	8f 91       	pop	r24
    4df8:	7f 91       	pop	r23
    4dfa:	6f 91       	pop	r22
    4dfc:	5f 91       	pop	r21
    4dfe:	4f 91       	pop	r20
    4e00:	3f 91       	pop	r19
    4e02:	2f 91       	pop	r18
    4e04:	0f 90       	pop	r0
    4e06:	0b be       	out	0x3b, r0	; 59
    4e08:	0f 90       	pop	r0
    4e0a:	0f be       	out	0x3f, r0	; 63
    4e0c:	0f 90       	pop	r0
    4e0e:	1f 90       	pop	r1
    4e10:	18 95       	reti

00004e12 <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4e12:	1f 92       	push	r1
    4e14:	0f 92       	push	r0
    4e16:	0f b6       	in	r0, 0x3f	; 63
    4e18:	0f 92       	push	r0
    4e1a:	0b b6       	in	r0, 0x3b	; 59
    4e1c:	0f 92       	push	r0
    4e1e:	11 24       	eor	r1, r1
    4e20:	2f 93       	push	r18
    4e22:	3f 93       	push	r19
    4e24:	4f 93       	push	r20
    4e26:	5f 93       	push	r21
    4e28:	6f 93       	push	r22
    4e2a:	7f 93       	push	r23
    4e2c:	8f 93       	push	r24
    4e2e:	9f 93       	push	r25
    4e30:	af 93       	push	r26
    4e32:	bf 93       	push	r27
    4e34:	ef 93       	push	r30
    4e36:	ff 93       	push	r31
	if (--ax.a[Z].postscale_counter != 0) {
    4e38:	80 91 73 22 	lds	r24, 0x2273
    4e3c:	90 91 74 22 	lds	r25, 0x2274
    4e40:	01 97       	sbiw	r24, 0x01	; 1
    4e42:	80 93 73 22 	sts	0x2273, r24
    4e46:	90 93 74 22 	sts	0x2274, r25
    4e4a:	89 2b       	or	r24, r25
    4e4c:	a1 f5       	brne	.+104    	; 0x4eb6 <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4e4e:	e0 e8       	ldi	r30, 0x80	; 128
    4e50:	f6 e0       	ldi	r31, 0x06	; 6
    4e52:	81 e0       	ldi	r24, 0x01	; 1
    4e54:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    4e56:	80 91 6b 22 	lds	r24, 0x226B
    4e5a:	90 91 6c 22 	lds	r25, 0x226C
    4e5e:	a0 91 6d 22 	lds	r26, 0x226D
    4e62:	b0 91 6e 22 	lds	r27, 0x226E
    4e66:	01 97       	sbiw	r24, 0x01	; 1
    4e68:	a1 09       	sbc	r26, r1
    4e6a:	b1 09       	sbc	r27, r1
    4e6c:	80 93 6b 22 	sts	0x226B, r24
    4e70:	90 93 6c 22 	sts	0x226C, r25
    4e74:	a0 93 6d 22 	sts	0x226D, r26
    4e78:	b0 93 6e 22 	sts	0x226E, r27
    4e7c:	00 97       	sbiw	r24, 0x00	; 0
    4e7e:	a1 05       	cpc	r26, r1
    4e80:	b1 05       	cpc	r27, r1
    4e82:	69 f4       	brne	.+26     	; 0x4e9e <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4e84:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4e88:	84 e0       	ldi	r24, 0x04	; 4
    4e8a:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4e8c:	80 91 48 22 	lds	r24, 0x2248
    4e90:	8d 7f       	andi	r24, 0xFD	; 253
    4e92:	80 93 48 22 	sts	0x2248, r24
		if (ax.active_axes == 0) {
    4e96:	88 23       	and	r24, r24
    4e98:	11 f4       	brne	.+4      	; 0x4e9e <__vector_47+0x8c>
			st_execute_move();
    4e9a:	0e 94 57 25 	call	0x4aae	; 0x4aae <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    4e9e:	80 91 71 22 	lds	r24, 0x2271
    4ea2:	90 91 72 22 	lds	r25, 0x2272
    4ea6:	80 93 73 22 	sts	0x2273, r24
    4eaa:	90 93 74 22 	sts	0x2274, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4eae:	81 e0       	ldi	r24, 0x01	; 1
    4eb0:	e0 e8       	ldi	r30, 0x80	; 128
    4eb2:	f6 e0       	ldi	r31, 0x06	; 6
    4eb4:	86 83       	std	Z+6, r24	; 0x06
}
    4eb6:	ff 91       	pop	r31
    4eb8:	ef 91       	pop	r30
    4eba:	bf 91       	pop	r27
    4ebc:	af 91       	pop	r26
    4ebe:	9f 91       	pop	r25
    4ec0:	8f 91       	pop	r24
    4ec2:	7f 91       	pop	r23
    4ec4:	6f 91       	pop	r22
    4ec6:	5f 91       	pop	r21
    4ec8:	4f 91       	pop	r20
    4eca:	3f 91       	pop	r19
    4ecc:	2f 91       	pop	r18
    4ece:	0f 90       	pop	r0
    4ed0:	0b be       	out	0x3b, r0	; 59
    4ed2:	0f 90       	pop	r0
    4ed4:	0f be       	out	0x3f, r0	; 63
    4ed6:	0f 90       	pop	r0
    4ed8:	1f 90       	pop	r1
    4eda:	18 95       	reti

00004edc <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4edc:	1f 92       	push	r1
    4ede:	0f 92       	push	r0
    4ee0:	0f b6       	in	r0, 0x3f	; 63
    4ee2:	0f 92       	push	r0
    4ee4:	0b b6       	in	r0, 0x3b	; 59
    4ee6:	0f 92       	push	r0
    4ee8:	11 24       	eor	r1, r1
    4eea:	2f 93       	push	r18
    4eec:	3f 93       	push	r19
    4eee:	4f 93       	push	r20
    4ef0:	5f 93       	push	r21
    4ef2:	6f 93       	push	r22
    4ef4:	7f 93       	push	r23
    4ef6:	8f 93       	push	r24
    4ef8:	9f 93       	push	r25
    4efa:	af 93       	push	r26
    4efc:	bf 93       	push	r27
    4efe:	ef 93       	push	r30
    4f00:	ff 93       	push	r31
	if (--ax.a[Y].postscale_counter != 0) {
    4f02:	80 91 63 22 	lds	r24, 0x2263
    4f06:	90 91 64 22 	lds	r25, 0x2264
    4f0a:	01 97       	sbiw	r24, 0x01	; 1
    4f0c:	80 93 63 22 	sts	0x2263, r24
    4f10:	90 93 64 22 	sts	0x2264, r25
    4f14:	89 2b       	or	r24, r25
    4f16:	a1 f5       	brne	.+104    	; 0x4f80 <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4f18:	e0 ea       	ldi	r30, 0xA0	; 160
    4f1a:	f6 e0       	ldi	r31, 0x06	; 6
    4f1c:	81 e0       	ldi	r24, 0x01	; 1
    4f1e:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    4f20:	80 91 5b 22 	lds	r24, 0x225B
    4f24:	90 91 5c 22 	lds	r25, 0x225C
    4f28:	a0 91 5d 22 	lds	r26, 0x225D
    4f2c:	b0 91 5e 22 	lds	r27, 0x225E
    4f30:	01 97       	sbiw	r24, 0x01	; 1
    4f32:	a1 09       	sbc	r26, r1
    4f34:	b1 09       	sbc	r27, r1
    4f36:	80 93 5b 22 	sts	0x225B, r24
    4f3a:	90 93 5c 22 	sts	0x225C, r25
    4f3e:	a0 93 5d 22 	sts	0x225D, r26
    4f42:	b0 93 5e 22 	sts	0x225E, r27
    4f46:	00 97       	sbiw	r24, 0x00	; 0
    4f48:	a1 05       	cpc	r26, r1
    4f4a:	b1 05       	cpc	r27, r1
    4f4c:	69 f4       	brne	.+26     	; 0x4f68 <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4f4e:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4f52:	84 e0       	ldi	r24, 0x04	; 4
    4f54:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4f56:	80 91 48 22 	lds	r24, 0x2248
    4f5a:	8b 7f       	andi	r24, 0xFB	; 251
    4f5c:	80 93 48 22 	sts	0x2248, r24
		if (ax.active_axes == 0) {
    4f60:	88 23       	and	r24, r24
    4f62:	11 f4       	brne	.+4      	; 0x4f68 <__vector_77+0x8c>
			st_execute_move();
    4f64:	0e 94 57 25 	call	0x4aae	; 0x4aae <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    4f68:	80 91 61 22 	lds	r24, 0x2261
    4f6c:	90 91 62 22 	lds	r25, 0x2262
    4f70:	80 93 63 22 	sts	0x2263, r24
    4f74:	90 93 64 22 	sts	0x2264, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4f78:	81 e0       	ldi	r24, 0x01	; 1
    4f7a:	e0 ea       	ldi	r30, 0xA0	; 160
    4f7c:	f6 e0       	ldi	r31, 0x06	; 6
    4f7e:	86 83       	std	Z+6, r24	; 0x06
}
    4f80:	ff 91       	pop	r31
    4f82:	ef 91       	pop	r30
    4f84:	bf 91       	pop	r27
    4f86:	af 91       	pop	r26
    4f88:	9f 91       	pop	r25
    4f8a:	8f 91       	pop	r24
    4f8c:	7f 91       	pop	r23
    4f8e:	6f 91       	pop	r22
    4f90:	5f 91       	pop	r21
    4f92:	4f 91       	pop	r20
    4f94:	3f 91       	pop	r19
    4f96:	2f 91       	pop	r18
    4f98:	0f 90       	pop	r0
    4f9a:	0b be       	out	0x3b, r0	; 59
    4f9c:	0f 90       	pop	r0
    4f9e:	0f be       	out	0x3f, r0	; 63
    4fa0:	0f 90       	pop	r0
    4fa2:	1f 90       	pop	r1
    4fa4:	18 95       	reti

00004fa6 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4fa6:	1f 92       	push	r1
    4fa8:	0f 92       	push	r0
    4faa:	0f b6       	in	r0, 0x3f	; 63
    4fac:	0f 92       	push	r0
    4fae:	0b b6       	in	r0, 0x3b	; 59
    4fb0:	0f 92       	push	r0
    4fb2:	11 24       	eor	r1, r1
    4fb4:	2f 93       	push	r18
    4fb6:	3f 93       	push	r19
    4fb8:	4f 93       	push	r20
    4fba:	5f 93       	push	r21
    4fbc:	6f 93       	push	r22
    4fbe:	7f 93       	push	r23
    4fc0:	8f 93       	push	r24
    4fc2:	9f 93       	push	r25
    4fc4:	af 93       	push	r26
    4fc6:	bf 93       	push	r27
    4fc8:	ef 93       	push	r30
    4fca:	ff 93       	push	r31
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    4fcc:	80 91 53 22 	lds	r24, 0x2253
    4fd0:	90 91 54 22 	lds	r25, 0x2254
    4fd4:	01 97       	sbiw	r24, 0x01	; 1
    4fd6:	80 93 53 22 	sts	0x2253, r24
    4fda:	90 93 54 22 	sts	0x2254, r25
    4fde:	89 2b       	or	r24, r25
    4fe0:	d1 f5       	brne	.+116    	; 0x5056 <__vector_14+0xb0>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    4fe2:	80 91 56 22 	lds	r24, 0x2256
    4fe6:	88 23       	and	r24, r24
    4fe8:	21 f4       	brne	.+8      	; 0x4ff2 <__vector_14+0x4c>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    4fea:	81 e0       	ldi	r24, 0x01	; 1
    4fec:	e0 e0       	ldi	r30, 0x00	; 0
    4fee:	f6 e0       	ldi	r31, 0x06	; 6
    4ff0:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    4ff2:	80 91 4b 22 	lds	r24, 0x224B
    4ff6:	90 91 4c 22 	lds	r25, 0x224C
    4ffa:	a0 91 4d 22 	lds	r26, 0x224D
    4ffe:	b0 91 4e 22 	lds	r27, 0x224E
    5002:	01 97       	sbiw	r24, 0x01	; 1
    5004:	a1 09       	sbc	r26, r1
    5006:	b1 09       	sbc	r27, r1
    5008:	80 93 4b 22 	sts	0x224B, r24
    500c:	90 93 4c 22 	sts	0x224C, r25
    5010:	a0 93 4d 22 	sts	0x224D, r26
    5014:	b0 93 4e 22 	sts	0x224E, r27
    5018:	00 97       	sbiw	r24, 0x00	; 0
    501a:	a1 05       	cpc	r26, r1
    501c:	b1 05       	cpc	r27, r1
    501e:	79 f4       	brne	.+30     	; 0x503e <__vector_14+0x98>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    5020:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    5024:	84 e0       	ldi	r24, 0x04	; 4
    5026:	e0 e0       	ldi	r30, 0x00	; 0
    5028:	f6 e0       	ldi	r31, 0x06	; 6
    502a:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    502c:	80 91 48 22 	lds	r24, 0x2248
    5030:	87 7f       	andi	r24, 0xF7	; 247
    5032:	80 93 48 22 	sts	0x2248, r24
		if (ax.active_axes == 0) {				// if all axes are done
    5036:	88 23       	and	r24, r24
    5038:	11 f4       	brne	.+4      	; 0x503e <__vector_14+0x98>
			st_execute_move();					// ...run the next move
    503a:	0e 94 57 25 	call	0x4aae	; 0x4aae <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    503e:	80 91 51 22 	lds	r24, 0x2251
    5042:	90 91 52 22 	lds	r25, 0x2252
    5046:	80 93 53 22 	sts	0x2253, r24
    504a:	90 93 54 22 	sts	0x2254, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    504e:	81 e0       	ldi	r24, 0x01	; 1
    5050:	e0 e0       	ldi	r30, 0x00	; 0
    5052:	f6 e0       	ldi	r31, 0x06	; 6
    5054:	86 83       	std	Z+6, r24	; 0x06
}
    5056:	ff 91       	pop	r31
    5058:	ef 91       	pop	r30
    505a:	bf 91       	pop	r27
    505c:	af 91       	pop	r26
    505e:	9f 91       	pop	r25
    5060:	8f 91       	pop	r24
    5062:	7f 91       	pop	r23
    5064:	6f 91       	pop	r22
    5066:	5f 91       	pop	r21
    5068:	4f 91       	pop	r20
    506a:	3f 91       	pop	r19
    506c:	2f 91       	pop	r18
    506e:	0f 90       	pop	r0
    5070:	0b be       	out	0x3b, r0	; 59
    5072:	0f 90       	pop	r0
    5074:	0f be       	out	0x3f, r0	; 63
    5076:	0f 90       	pop	r0
    5078:	1f 90       	pop	r1
    507a:	18 95       	reti

0000507c <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    507c:	e0 ea       	ldi	r30, 0xA0	; 160
    507e:	f0 e0       	ldi	r31, 0x00	; 0
    5080:	82 81       	ldd	r24, Z+2	; 0x02
    5082:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    5084:	98 ed       	ldi	r25, 0xD8	; 216
    5086:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    5088:	82 83       	std	Z+2, r24	; 0x02
}
    508a:	08 95       	ret

0000508c <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    508c:	e0 ea       	ldi	r30, 0xA0	; 160
    508e:	f0 e0       	ldi	r31, 0x00	; 0
    5090:	82 81       	ldd	r24, Z+2	; 0x02
    5092:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    5094:	98 ed       	ldi	r25, 0xD8	; 216
    5096:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    5098:	82 83       	std	Z+2, r24	; 0x02
}
    509a:	08 95       	ret

0000509c <xio_setflags>:
 * xio_setflags()
 */

int xio_setflags(const uint8_t dev, const uint16_t control)
{
	struct xioDEVICE *d = &ds[dev];
    509c:	97 e1       	ldi	r25, 0x17	; 23
    509e:	89 9f       	mul	r24, r25
    50a0:	f0 01       	movw	r30, r0
    50a2:	11 24       	eor	r1, r1
    50a4:	e7 52       	subi	r30, 0x27	; 39
    50a6:	fc 4d       	sbci	r31, 0xDC	; 220

	if (control & XIO_RD) {
    50a8:	64 ff       	sbrs	r22, 4
    50aa:	05 c0       	rjmp	.+10     	; 0x50b6 <xio_setflags+0x1a>
		d->flags |= XIO_FLAG_RD_bm;
    50ac:	80 81       	ld	r24, Z
    50ae:	91 81       	ldd	r25, Z+1	; 0x01
    50b0:	81 60       	ori	r24, 0x01	; 1
    50b2:	80 83       	st	Z, r24
    50b4:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_WR) {
    50b6:	65 ff       	sbrs	r22, 5
    50b8:	05 c0       	rjmp	.+10     	; 0x50c4 <xio_setflags+0x28>
		d->flags |= XIO_FLAG_WR_bm;
    50ba:	80 81       	ld	r24, Z
    50bc:	91 81       	ldd	r25, Z+1	; 0x01
    50be:	82 60       	ori	r24, 0x02	; 2
    50c0:	80 83       	st	Z, r24
    50c2:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_BLOCK) {
    50c4:	66 ff       	sbrs	r22, 6
    50c6:	05 c0       	rjmp	.+10     	; 0x50d2 <xio_setflags+0x36>
		d->flags |= XIO_FLAG_BLOCK_bm;
    50c8:	80 81       	ld	r24, Z
    50ca:	91 81       	ldd	r25, Z+1	; 0x01
    50cc:	84 60       	ori	r24, 0x04	; 4
    50ce:	80 83       	st	Z, r24
    50d0:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOBLOCK) {
    50d2:	67 ff       	sbrs	r22, 7
    50d4:	05 c0       	rjmp	.+10     	; 0x50e0 <xio_setflags+0x44>
		d->flags &= ~XIO_FLAG_BLOCK_bm;
    50d6:	80 81       	ld	r24, Z
    50d8:	91 81       	ldd	r25, Z+1	; 0x01
    50da:	8b 7f       	andi	r24, 0xFB	; 251
    50dc:	80 83       	st	Z, r24
    50de:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_ECHO) {
    50e0:	70 ff       	sbrs	r23, 0
    50e2:	05 c0       	rjmp	.+10     	; 0x50ee <xio_setflags+0x52>
		d->flags |= XIO_FLAG_ECHO_bm;
    50e4:	80 81       	ld	r24, Z
    50e6:	91 81       	ldd	r25, Z+1	; 0x01
    50e8:	80 61       	ori	r24, 0x10	; 16
    50ea:	80 83       	st	Z, r24
    50ec:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOECHO) {
    50ee:	71 ff       	sbrs	r23, 1
    50f0:	05 c0       	rjmp	.+10     	; 0x50fc <xio_setflags+0x60>
		d->flags &= ~XIO_FLAG_ECHO_bm;
    50f2:	80 81       	ld	r24, Z
    50f4:	91 81       	ldd	r25, Z+1	; 0x01
    50f6:	8f 7e       	andi	r24, 0xEF	; 239
    50f8:	80 83       	st	Z, r24
    50fa:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_CRLF) {
    50fc:	72 ff       	sbrs	r23, 2
    50fe:	05 c0       	rjmp	.+10     	; 0x510a <xio_setflags+0x6e>
		d->flags |= XIO_FLAG_CRLF_bm;
    5100:	80 81       	ld	r24, Z
    5102:	91 81       	ldd	r25, Z+1	; 0x01
    5104:	80 62       	ori	r24, 0x20	; 32
    5106:	80 83       	st	Z, r24
    5108:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOCRLF) {
    510a:	73 ff       	sbrs	r23, 3
    510c:	05 c0       	rjmp	.+10     	; 0x5118 <xio_setflags+0x7c>
		d->flags &= ~XIO_FLAG_CRLF_bm;
    510e:	80 81       	ld	r24, Z
    5110:	91 81       	ldd	r25, Z+1	; 0x01
    5112:	8f 7d       	andi	r24, 0xDF	; 223
    5114:	80 83       	st	Z, r24
    5116:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_LINEMODE) {
    5118:	74 ff       	sbrs	r23, 4
    511a:	05 c0       	rjmp	.+10     	; 0x5126 <xio_setflags+0x8a>
		d->flags |= XIO_FLAG_LINEMODE_bm;
    511c:	80 81       	ld	r24, Z
    511e:	91 81       	ldd	r25, Z+1	; 0x01
    5120:	80 64       	ori	r24, 0x40	; 64
    5122:	80 83       	st	Z, r24
    5124:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOLINEMODE) {
    5126:	75 ff       	sbrs	r23, 5
    5128:	05 c0       	rjmp	.+10     	; 0x5134 <xio_setflags+0x98>
		d->flags &= ~XIO_FLAG_LINEMODE_bm;
    512a:	80 81       	ld	r24, Z
    512c:	91 81       	ldd	r25, Z+1	; 0x01
    512e:	8f 7b       	andi	r24, 0xBF	; 191
    5130:	80 83       	st	Z, r24
    5132:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_SEMICOLONS) {
    5134:	76 ff       	sbrs	r23, 6
    5136:	05 c0       	rjmp	.+10     	; 0x5142 <xio_setflags+0xa6>
		d->flags |= XIO_FLAG_SEMICOLONS_bm;
    5138:	80 81       	ld	r24, Z
    513a:	91 81       	ldd	r25, Z+1	; 0x01
    513c:	80 68       	ori	r24, 0x80	; 128
    513e:	80 83       	st	Z, r24
    5140:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOSEMICOLONS) {
    5142:	77 ff       	sbrs	r23, 7
    5144:	05 c0       	rjmp	.+10     	; 0x5150 <xio_setflags+0xb4>
		d->flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5146:	80 81       	ld	r24, Z
    5148:	91 81       	ldd	r25, Z+1	; 0x01
    514a:	8f 77       	andi	r24, 0x7F	; 127
    514c:	80 83       	st	Z, r24
    514e:	91 83       	std	Z+1, r25	; 0x01
	}
	return (XIO_OK);
}
    5150:	80 e0       	ldi	r24, 0x00	; 0
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	08 95       	ret

00005156 <xio_set_stdin>:
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	27 e1       	ldi	r18, 0x17	; 23
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	82 9f       	mul	r24, r18
    515e:	f0 01       	movw	r30, r0
    5160:	83 9f       	mul	r24, r19
    5162:	f0 0d       	add	r31, r0
    5164:	92 9f       	mul	r25, r18
    5166:	f0 0d       	add	r31, r0
    5168:	11 24       	eor	r1, r1
    516a:	e7 52       	subi	r30, 0x27	; 39
    516c:	fc 4d       	sbci	r31, 0xDC	; 220
    516e:	83 89       	ldd	r24, Z+19	; 0x13
    5170:	94 89       	ldd	r25, Z+20	; 0x14
    5172:	80 93 18 25 	sts	0x2518, r24
    5176:	90 93 19 25 	sts	0x2519, r25
}
    517a:	08 95       	ret

0000517c <xio_set_stdout>:

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    517c:	90 e0       	ldi	r25, 0x00	; 0
    517e:	27 e1       	ldi	r18, 0x17	; 23
    5180:	30 e0       	ldi	r19, 0x00	; 0
    5182:	82 9f       	mul	r24, r18
    5184:	f0 01       	movw	r30, r0
    5186:	83 9f       	mul	r24, r19
    5188:	f0 0d       	add	r31, r0
    518a:	92 9f       	mul	r25, r18
    518c:	f0 0d       	add	r31, r0
    518e:	11 24       	eor	r1, r1
    5190:	e7 52       	subi	r30, 0x27	; 39
    5192:	fc 4d       	sbci	r31, 0xDC	; 220
    5194:	83 89       	ldd	r24, Z+19	; 0x13
    5196:	94 89       	ldd	r25, Z+20	; 0x14
    5198:	80 93 1a 25 	sts	0x251A, r24
    519c:	90 93 1b 25 	sts	0x251B, r25
}
    51a0:	08 95       	ret

000051a2 <xio_set_stderr>:

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	27 e1       	ldi	r18, 0x17	; 23
    51a6:	30 e0       	ldi	r19, 0x00	; 0
    51a8:	82 9f       	mul	r24, r18
    51aa:	f0 01       	movw	r30, r0
    51ac:	83 9f       	mul	r24, r19
    51ae:	f0 0d       	add	r31, r0
    51b0:	92 9f       	mul	r25, r18
    51b2:	f0 0d       	add	r31, r0
    51b4:	11 24       	eor	r1, r1
    51b6:	e7 52       	subi	r30, 0x27	; 39
    51b8:	fc 4d       	sbci	r31, 0xDC	; 220
    51ba:	83 89       	ldd	r24, Z+19	; 0x13
    51bc:	94 89       	ldd	r25, Z+20	; 0x14
    51be:	80 93 1c 25 	sts	0x251C, r24
    51c2:	90 93 1d 25 	sts	0x251D, r25
}
    51c6:	08 95       	ret

000051c8 <xio_putc>:
/*
 * xio_putc() - common entry point for putc
 */

int xio_putc(const uint8_t dev, const char c)
{
    51c8:	46 2f       	mov	r20, r22
	if (dev < XIO_DEV_COUNT) {
    51ca:	88 30       	cpi	r24, 0x08	; 8
    51cc:	18 f0       	brcs	.+6      	; 0x51d4 <xio_putc+0xc>
    51ce:	27 e0       	ldi	r18, 0x07	; 7
    51d0:	30 e0       	ldi	r19, 0x00	; 0
    51d2:	15 c0       	rjmp	.+42     	; 0x51fe <xio_putc+0x36>
		return ds[dev].dev_putc(c, ds[dev].fdev);
    51d4:	28 2f       	mov	r18, r24
    51d6:	30 e0       	ldi	r19, 0x00	; 0
    51d8:	87 e1       	ldi	r24, 0x17	; 23
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	28 9f       	mul	r18, r24
    51de:	f0 01       	movw	r30, r0
    51e0:	29 9f       	mul	r18, r25
    51e2:	f0 0d       	add	r31, r0
    51e4:	38 9f       	mul	r19, r24
    51e6:	f0 0d       	add	r31, r0
    51e8:	11 24       	eor	r1, r1
    51ea:	e7 52       	subi	r30, 0x27	; 39
    51ec:	fc 4d       	sbci	r31, 0xDC	; 220
    51ee:	63 89       	ldd	r22, Z+19	; 0x13
    51f0:	74 89       	ldd	r23, Z+20	; 0x14
    51f2:	03 84       	ldd	r0, Z+11	; 0x0b
    51f4:	f4 85       	ldd	r31, Z+12	; 0x0c
    51f6:	e0 2d       	mov	r30, r0
    51f8:	84 2f       	mov	r24, r20
    51fa:	19 95       	eicall
    51fc:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}
}
    51fe:	c9 01       	movw	r24, r18
    5200:	08 95       	ret

00005202 <xio_getc>:
 * xio_getc() - common entry point for getc
 */

int xio_getc(const uint8_t dev)
{
	if (dev < XIO_DEV_COUNT) {
    5202:	88 30       	cpi	r24, 0x08	; 8
    5204:	18 f0       	brcs	.+6      	; 0x520c <xio_getc+0xa>
    5206:	27 e0       	ldi	r18, 0x07	; 7
    5208:	30 e0       	ldi	r19, 0x00	; 0
    520a:	14 c0       	rjmp	.+40     	; 0x5234 <xio_getc+0x32>
		return ds[dev].dev_getc(ds[dev].fdev);
    520c:	28 2f       	mov	r18, r24
    520e:	30 e0       	ldi	r19, 0x00	; 0
    5210:	87 e1       	ldi	r24, 0x17	; 23
    5212:	90 e0       	ldi	r25, 0x00	; 0
    5214:	28 9f       	mul	r18, r24
    5216:	f0 01       	movw	r30, r0
    5218:	29 9f       	mul	r18, r25
    521a:	f0 0d       	add	r31, r0
    521c:	38 9f       	mul	r19, r24
    521e:	f0 0d       	add	r31, r0
    5220:	11 24       	eor	r1, r1
    5222:	e7 52       	subi	r30, 0x27	; 39
    5224:	fc 4d       	sbci	r31, 0xDC	; 220
    5226:	25 85       	ldd	r18, Z+13	; 0x0d
    5228:	36 85       	ldd	r19, Z+14	; 0x0e
    522a:	83 89       	ldd	r24, Z+19	; 0x13
    522c:	94 89       	ldd	r25, Z+20	; 0x14
    522e:	f9 01       	movw	r30, r18
    5230:	19 95       	eicall
    5232:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}		
}
    5234:	c9 01       	movw	r24, r18
    5236:	08 95       	ret

00005238 <xio_readln>:
 *	size	size of text buffer in 1 offset form: e.g. use 80 instead of 79
 */

int xio_readln(const uint8_t dev, char *buf, const uint8_t size)
{
	if (dev < XIO_DEV_COUNT) {
    5238:	88 30       	cpi	r24, 0x08	; 8
    523a:	18 f0       	brcs	.+6      	; 0x5242 <xio_readln+0xa>
    523c:	27 e0       	ldi	r18, 0x07	; 7
    523e:	30 e0       	ldi	r19, 0x00	; 0
    5240:	14 c0       	rjmp	.+40     	; 0x526a <xio_readln+0x32>
		return ds[dev].dev_readln(buf, size);
    5242:	28 2f       	mov	r18, r24
    5244:	30 e0       	ldi	r19, 0x00	; 0
    5246:	87 e1       	ldi	r24, 0x17	; 23
    5248:	90 e0       	ldi	r25, 0x00	; 0
    524a:	28 9f       	mul	r18, r24
    524c:	f0 01       	movw	r30, r0
    524e:	29 9f       	mul	r18, r25
    5250:	f0 0d       	add	r31, r0
    5252:	38 9f       	mul	r19, r24
    5254:	f0 0d       	add	r31, r0
    5256:	11 24       	eor	r1, r1
    5258:	e7 52       	subi	r30, 0x27	; 39
    525a:	fc 4d       	sbci	r31, 0xDC	; 220
    525c:	07 84       	ldd	r0, Z+15	; 0x0f
    525e:	f0 89       	ldd	r31, Z+16	; 0x10
    5260:	e0 2d       	mov	r30, r0
    5262:	cb 01       	movw	r24, r22
    5264:	64 2f       	mov	r22, r20
    5266:	19 95       	eicall
    5268:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}		
}
    526a:	c9 01       	movw	r24, r18
    526c:	08 95       	ret

0000526e <xio_init_dev>:
	int (*dev_setflags)(const uint16_t control),// set device control flags
	int (*dev_putc)(char, struct __file *),		// write char (stdio compatible)
	int (*dev_getc)(struct __file *),			// read char (stdio compatible)
	int (*dev_readln)(char *buf, uint8_t size)	// specialized line reader
	) 
{
    526e:	df 92       	push	r13
    5270:	ef 92       	push	r14
    5272:	ff 92       	push	r15
    5274:	0f 93       	push	r16
    5276:	1f 93       	push	r17
    5278:	cf 93       	push	r28
    527a:	df 93       	push	r29
	// clear device struct
	memset (&ds[dev], 0, sizeof(struct xioDEVICE));	
    527c:	90 e0       	ldi	r25, 0x00	; 0
    527e:	e7 e1       	ldi	r30, 0x17	; 23
    5280:	f0 e0       	ldi	r31, 0x00	; 0
    5282:	8e 9f       	mul	r24, r30
    5284:	d0 01       	movw	r26, r0
    5286:	8f 9f       	mul	r24, r31
    5288:	b0 0d       	add	r27, r0
    528a:	9e 9f       	mul	r25, r30
    528c:	b0 0d       	add	r27, r0
    528e:	11 24       	eor	r1, r1
    5290:	a7 52       	subi	r26, 0x27	; 39
    5292:	bc 4d       	sbci	r27, 0xDC	; 220
    5294:	0f 2e       	mov	r0, r31
    5296:	f7 e1       	ldi	r31, 0x17	; 23
    5298:	df 2e       	mov	r13, r31
    529a:	f0 2d       	mov	r31, r0
    529c:	ed 01       	movw	r28, r26
    529e:	19 92       	st	Y+, r1
    52a0:	da 94       	dec	r13
    52a2:	e9 f7       	brne	.-6      	; 0x529e <xio_init_dev+0x30>

	// bind functions
	ds[dev].dev_open = dev_open;						
    52a4:	17 96       	adiw	r26, 0x07	; 7
    52a6:	6d 93       	st	X+, r22
    52a8:	7c 93       	st	X, r23
    52aa:	18 97       	sbiw	r26, 0x08	; 8
	ds[dev].dev_setflags = dev_setflags;
    52ac:	19 96       	adiw	r26, 0x09	; 9
    52ae:	4d 93       	st	X+, r20
    52b0:	5c 93       	st	X, r21
    52b2:	1a 97       	sbiw	r26, 0x0a	; 10
	ds[dev].dev_putc = dev_putc;
    52b4:	1b 96       	adiw	r26, 0x0b	; 11
    52b6:	2d 93       	st	X+, r18
    52b8:	3c 93       	st	X, r19
    52ba:	1c 97       	sbiw	r26, 0x0c	; 12
	ds[dev].dev_getc = dev_getc;
    52bc:	1d 96       	adiw	r26, 0x0d	; 13
    52be:	0d 93       	st	X+, r16
    52c0:	1c 93       	st	X, r17
    52c2:	1e 97       	sbiw	r26, 0x0e	; 14
	ds[dev].dev_readln = dev_readln;
    52c4:	1f 96       	adiw	r26, 0x0f	; 15
    52c6:	ed 92       	st	X+, r14
    52c8:	fc 92       	st	X, r15
    52ca:	50 97       	sbiw	r26, 0x10	; 16

	// bind and setup stdio struct
	ds[dev].fdev = &ss[dev];					
    52cc:	88 0f       	add	r24, r24
    52ce:	99 1f       	adc	r25, r25
    52d0:	fc 01       	movw	r30, r24
    52d2:	43 e0       	ldi	r20, 0x03	; 3
    52d4:	ee 0f       	add	r30, r30
    52d6:	ff 1f       	adc	r31, r31
    52d8:	4a 95       	dec	r20
    52da:	e1 f7       	brne	.-8      	; 0x52d4 <xio_init_dev+0x66>
    52dc:	e8 1b       	sub	r30, r24
    52de:	f9 0b       	sbc	r31, r25
    52e0:	ef 56       	subi	r30, 0x6F	; 111
    52e2:	fb 4d       	sbci	r31, 0xDB	; 219
    52e4:	53 96       	adiw	r26, 0x13	; 19
    52e6:	ed 93       	st	X+, r30
    52e8:	fc 93       	st	X, r31
    52ea:	54 97       	sbiw	r26, 0x14	; 20
	fdev_setup_stream(ds[dev].fdev, dev_putc, dev_getc, _FDEV_SETUP_RW);
    52ec:	20 87       	std	Z+8, r18	; 0x08
    52ee:	31 87       	std	Z+9, r19	; 0x09
    52f0:	02 87       	std	Z+10, r16	; 0x0a
    52f2:	13 87       	std	Z+11, r17	; 0x0b
    52f4:	83 e0       	ldi	r24, 0x03	; 3
    52f6:	83 83       	std	Z+3, r24	; 0x03
    52f8:	14 86       	std	Z+12, r1	; 0x0c
    52fa:	15 86       	std	Z+13, r1	; 0x0d
}
    52fc:	df 91       	pop	r29
    52fe:	cf 91       	pop	r28
    5300:	1f 91       	pop	r17
    5302:	0f 91       	pop	r16
    5304:	ff 90       	pop	r15
    5306:	ef 90       	pop	r14
    5308:	df 90       	pop	r13
    530a:	08 95       	ret

0000530c <xio_init>:
/*
 *	xio_init() - initialize all active XIO devices
 */

void xio_init(void)
{	
    530c:	ef 92       	push	r14
    530e:	ff 92       	push	r15
    5310:	0f 93       	push	r16
    5312:	1f 93       	push	r17
	xio_init_rs485();
    5314:	0e 94 3f 35 	call	0x6a7e	; 0x6a7e <xio_init_rs485>
	xio_init_usb();
    5318:	0e 94 2d 34 	call	0x685a	; 0x685a <xio_init_usb>

	// Program memory file device setup
	xio_init_dev(XIO_DEV_PGM, xio_open_pgm, xio_setflags_pgm, xio_putc_pgm, xio_getc_pgm, xio_readln_pgm);
    531c:	83 e0       	ldi	r24, 0x03	; 3
    531e:	61 e9       	ldi	r22, 0x91	; 145
    5320:	75 e3       	ldi	r23, 0x35	; 53
    5322:	4f e1       	ldi	r20, 0x1F	; 31
    5324:	56 e3       	ldi	r21, 0x36	; 54
    5326:	29 ea       	ldi	r18, 0xA9	; 169
    5328:	35 e3       	ldi	r19, 0x35	; 53
    532a:	03 ed       	ldi	r16, 0xD3	; 211
    532c:	15 e3       	ldi	r17, 0x35	; 53
    532e:	9c ea       	ldi	r25, 0xAC	; 172
    5330:	e9 2e       	mov	r14, r25
    5332:	95 e3       	ldi	r25, 0x35	; 53
    5334:	f9 2e       	mov	r15, r25
    5336:	0e 94 37 29 	call	0x526e	; 0x526e <xio_init_dev>
	xio_init_pgm(XIO_DEV_PGM, XIO_DEV_PGM_OFFSET, PGM_INIT_bm);
    533a:	83 e0       	ldi	r24, 0x03	; 3
    533c:	60 e0       	ldi	r22, 0x00	; 0
    533e:	40 e5       	ldi	r20, 0x50	; 80
    5340:	55 e1       	ldi	r21, 0x15	; 21
    5342:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <xio_init_pgm>
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    5346:	80 91 03 24 	lds	r24, 0x2403
    534a:	90 91 04 24 	lds	r25, 0x2404
    534e:	80 93 18 25 	sts	0x2518, r24
    5352:	90 93 19 25 	sts	0x2519, r25
}

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    5356:	80 93 1a 25 	sts	0x251A, r24
    535a:	90 93 1b 25 	sts	0x251B, r25
}

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    535e:	80 93 1c 25 	sts	0x251C, r24
    5362:	90 93 1d 25 	sts	0x251D, r25
	xio_set_stdin(XIO_DEV_USB);
	xio_set_stdout(XIO_DEV_USB);
	xio_set_stderr(XIO_DEV_USB);

	// tell the world we are ready!
	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    5366:	0f 92       	push	r0
    5368:	0f 92       	push	r0
    536a:	88 e2       	ldi	r24, 0x28	; 40
    536c:	97 e0       	ldi	r25, 0x07	; 7
    536e:	ed b7       	in	r30, 0x3d	; 61
    5370:	fe b7       	in	r31, 0x3e	; 62
    5372:	81 83       	std	Z+1, r24	; 0x01
    5374:	92 83       	std	Z+2, r25	; 0x02
    5376:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
    537a:	0f 90       	pop	r0
    537c:	0f 90       	pop	r0
}
    537e:	1f 91       	pop	r17
    5380:	0f 91       	pop	r16
    5382:	ff 90       	pop	r15
    5384:	ef 90       	pop	r14
    5386:	08 95       	ret

00005388 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    5388:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    538a:	e0 ec       	ldi	r30, 0xC0	; 192
    538c:	f1 e0       	ldi	r31, 0x01	; 1
    538e:	80 91 cf 01 	lds	r24, 0x01CF
    5392:	87 fd       	sbrc	r24, 7
    5394:	fa cf       	rjmp	.-12     	; 0x538a <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    5396:	26 2f       	mov	r18, r22
    5398:	30 e0       	ldi	r19, 0x00	; 0
    539a:	2f 71       	andi	r18, 0x1F	; 31
    539c:	30 70       	andi	r19, 0x00	; 0
    539e:	89 2f       	mov	r24, r25
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	45 e0       	ldi	r20, 0x05	; 5
    53a4:	88 0f       	add	r24, r24
    53a6:	99 1f       	adc	r25, r25
    53a8:	4a 95       	dec	r20
    53aa:	e1 f7       	brne	.-8      	; 0x53a4 <EEPROM_ReadByte+0x1c>
    53ac:	28 2b       	or	r18, r24
    53ae:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    53b0:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    53b4:	83 2f       	mov	r24, r19
    53b6:	8f 71       	andi	r24, 0x1F	; 31
    53b8:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    53ba:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    53bc:	86 e0       	ldi	r24, 0x06	; 6
    53be:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    53c0:	ef 93       	push	r30
    53c2:	ff 93       	push	r31
    53c4:	0f 93       	push	r16
    53c6:	2f 93       	push	r18
    53c8:	eb ec       	ldi	r30, 0xCB	; 203
    53ca:	f1 e0       	ldi	r31, 0x01	; 1
    53cc:	08 ed       	ldi	r16, 0xD8	; 216
    53ce:	21 e0       	ldi	r18, 0x01	; 1
    53d0:	04 bf       	out	0x34, r16	; 52
    53d2:	20 83       	st	Z, r18
    53d4:	2f 91       	pop	r18
    53d6:	0f 91       	pop	r16
    53d8:	ff 91       	pop	r31
    53da:	ef 91       	pop	r30

	return NVM.DATA0;
    53dc:	80 91 c4 01 	lds	r24, 0x01C4
}
    53e0:	08 95       	ret

000053e2 <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    53e2:	68 2f       	mov	r22, r24
    53e4:	6f 71       	andi	r22, 0x1F	; 31
    53e6:	55 e0       	ldi	r21, 0x05	; 5
    53e8:	96 95       	lsr	r25
    53ea:	87 95       	ror	r24
    53ec:	5a 95       	dec	r21
    53ee:	e1 f7       	brne	.-8      	; 0x53e8 <eeprom_get_char+0x6>
    53f0:	0e 94 c4 29 	call	0x5388	; 0x5388 <EEPROM_ReadByte>
}
    53f4:	08 95       	ret

000053f6 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    53f6:	8f 92       	push	r8
    53f8:	9f 92       	push	r9
    53fa:	af 92       	push	r10
    53fc:	bf 92       	push	r11
    53fe:	cf 92       	push	r12
    5400:	df 92       	push	r13
    5402:	ff 92       	push	r15
    5404:	0f 93       	push	r16
    5406:	1f 93       	push	r17
    5408:	cf 93       	push	r28
    540a:	df 93       	push	r29
    540c:	4c 01       	movw	r8, r24
    540e:	5b 01       	movw	r10, r22
    5410:	6a 01       	movw	r12, r20
    5412:	8b 01       	movw	r16, r22
    5414:	ea 01       	movw	r28, r20
    5416:	ff 24       	eor	r15, r15
    5418:	18 c0       	rjmp	.+48     	; 0x544a <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    541a:	c8 01       	movw	r24, r16
    541c:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    5420:	ff 20       	and	r15, r15
    5422:	19 f0       	breq	.+6      	; 0x542a <memcpy_from_eeprom_with_checksum+0x34>
    5424:	21 e0       	ldi	r18, 0x01	; 1
    5426:	30 e0       	ldi	r19, 0x00	; 0
    5428:	08 c0       	rjmp	.+16     	; 0x543a <memcpy_from_eeprom_with_checksum+0x44>
    542a:	2f 2d       	mov	r18, r15
    542c:	33 27       	eor	r19, r19
    542e:	27 fd       	sbrc	r18, 7
    5430:	30 95       	com	r19
    5432:	22 27       	eor	r18, r18
    5434:	33 0f       	add	r19, r19
    5436:	22 1f       	adc	r18, r18
    5438:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    543a:	0f 5f       	subi	r16, 0xFF	; 255
    543c:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    543e:	f8 2e       	mov	r15, r24
    5440:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    5442:	f4 01       	movw	r30, r8
    5444:	81 93       	st	Z+, r24
    5446:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    5448:	21 97       	sbiw	r28, 0x01	; 1
    544a:	20 97       	sbiw	r28, 0x00	; 0
    544c:	31 f7       	brne	.-52     	; 0x541a <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    544e:	c6 01       	movw	r24, r12
    5450:	8a 0d       	add	r24, r10
    5452:	9b 1d       	adc	r25, r11
    5454:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <eeprom_get_char>
    5458:	20 e0       	ldi	r18, 0x00	; 0
    545a:	30 e0       	ldi	r19, 0x00	; 0
    545c:	f8 16       	cp	r15, r24
    545e:	11 f4       	brne	.+4      	; 0x5464 <memcpy_from_eeprom_with_checksum+0x6e>
    5460:	21 e0       	ldi	r18, 0x01	; 1
    5462:	30 e0       	ldi	r19, 0x00	; 0
}
    5464:	c9 01       	movw	r24, r18
    5466:	df 91       	pop	r29
    5468:	cf 91       	pop	r28
    546a:	1f 91       	pop	r17
    546c:	0f 91       	pop	r16
    546e:	ff 90       	pop	r15
    5470:	df 90       	pop	r13
    5472:	cf 90       	pop	r12
    5474:	bf 90       	pop	r11
    5476:	af 90       	pop	r10
    5478:	9f 90       	pop	r9
    547a:	8f 90       	pop	r8
    547c:	08 95       	ret

0000547e <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    547e:	80 91 cf 01 	lds	r24, 0x01CF
    5482:	87 fd       	sbrc	r24, 7
    5484:	fc cf       	rjmp	.-8      	; 0x547e <EEPROM_WaitForNVM>
}
    5486:	08 95       	ret

00005488 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5488:	80 91 cf 01 	lds	r24, 0x01CF
    548c:	87 fd       	sbrc	r24, 7
    548e:	fc cf       	rjmp	.-8      	; 0x5488 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    5490:	80 91 cf 01 	lds	r24, 0x01CF
    5494:	81 ff       	sbrs	r24, 1
    5496:	12 c0       	rjmp	.+36     	; 0x54bc <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    5498:	86 e3       	ldi	r24, 0x36	; 54
    549a:	e0 ec       	ldi	r30, 0xC0	; 192
    549c:	f1 e0       	ldi	r31, 0x01	; 1
    549e:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    54a0:	ef 93       	push	r30
    54a2:	ff 93       	push	r31
    54a4:	0f 93       	push	r16
    54a6:	2f 93       	push	r18
    54a8:	eb ec       	ldi	r30, 0xCB	; 203
    54aa:	f1 e0       	ldi	r31, 0x01	; 1
    54ac:	08 ed       	ldi	r16, 0xD8	; 216
    54ae:	21 e0       	ldi	r18, 0x01	; 1
    54b0:	04 bf       	out	0x34, r16	; 52
    54b2:	20 83       	st	Z, r18
    54b4:	2f 91       	pop	r18
    54b6:	0f 91       	pop	r16
    54b8:	ff 91       	pop	r31
    54ba:	ef 91       	pop	r30
    54bc:	08 95       	ret

000054be <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    54be:	df 92       	push	r13
    54c0:	ef 92       	push	r14
    54c2:	ff 92       	push	r15
    54c4:	0f 93       	push	r16
    54c6:	1f 93       	push	r17
    54c8:	e8 2e       	mov	r14, r24
    54ca:	06 2f       	mov	r16, r22
    54cc:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    54ce:	0e 94 44 2a 	call	0x5488	; 0x5488 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    54d2:	e0 ec       	ldi	r30, 0xC0	; 192
    54d4:	f1 e0       	ldi	r31, 0x01	; 1
    54d6:	83 e3       	ldi	r24, 0x33	; 51
    54d8:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    54da:	10 e0       	ldi	r17, 0x00	; 0
    54dc:	0f 71       	andi	r16, 0x1F	; 31
    54de:	10 70       	andi	r17, 0x00	; 0
    54e0:	ff 24       	eor	r15, r15
    54e2:	75 e0       	ldi	r23, 0x05	; 5
    54e4:	ee 0c       	add	r14, r14
    54e6:	ff 1c       	adc	r15, r15
    54e8:	7a 95       	dec	r23
    54ea:	e1 f7       	brne	.-8      	; 0x54e4 <EEPROM_WriteByte+0x26>
    54ec:	0e 29       	or	r16, r14
    54ee:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    54f0:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    54f2:	81 2f       	mov	r24, r17
    54f4:	8f 71       	andi	r24, 0x1F	; 31
    54f6:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    54f8:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    54fa:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    54fc:	85 e3       	ldi	r24, 0x35	; 53
    54fe:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5500:	ef 93       	push	r30
    5502:	ff 93       	push	r31
    5504:	0f 93       	push	r16
    5506:	2f 93       	push	r18
    5508:	eb ec       	ldi	r30, 0xCB	; 203
    550a:	f1 e0       	ldi	r31, 0x01	; 1
    550c:	08 ed       	ldi	r16, 0xD8	; 216
    550e:	21 e0       	ldi	r18, 0x01	; 1
    5510:	04 bf       	out	0x34, r16	; 52
    5512:	20 83       	st	Z, r18
    5514:	2f 91       	pop	r18
    5516:	0f 91       	pop	r16
    5518:	ff 91       	pop	r31
    551a:	ef 91       	pop	r30
}
    551c:	1f 91       	pop	r17
    551e:	0f 91       	pop	r16
    5520:	ff 90       	pop	r15
    5522:	ef 90       	pop	r14
    5524:	df 90       	pop	r13
    5526:	08 95       	ret

00005528 <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    5528:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    552a:	68 2f       	mov	r22, r24
    552c:	6f 71       	andi	r22, 0x1F	; 31
    552e:	e5 e0       	ldi	r30, 0x05	; 5
    5530:	96 95       	lsr	r25
    5532:	87 95       	ror	r24
    5534:	ea 95       	dec	r30
    5536:	e1 f7       	brne	.-8      	; 0x5530 <eeprom_put_char+0x8>
    5538:	0e 94 5f 2a 	call	0x54be	; 0x54be <EEPROM_WriteByte>
}
    553c:	08 95       	ret

0000553e <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    553e:	8f 92       	push	r8
    5540:	9f 92       	push	r9
    5542:	af 92       	push	r10
    5544:	bf 92       	push	r11
    5546:	cf 92       	push	r12
    5548:	df 92       	push	r13
    554a:	ef 92       	push	r14
    554c:	ff 92       	push	r15
    554e:	0f 93       	push	r16
    5550:	df 93       	push	r29
    5552:	cf 93       	push	r28
    5554:	0f 92       	push	r0
    5556:	0f 92       	push	r0
    5558:	cd b7       	in	r28, 0x3d	; 61
    555a:	de b7       	in	r29, 0x3e	; 62
    555c:	5c 01       	movw	r10, r24
    555e:	6b 01       	movw	r12, r22
    5560:	7a 01       	movw	r14, r20
    5562:	4a 01       	movw	r8, r20
    5564:	00 e0       	ldi	r16, 0x00	; 0
    5566:	1e c0       	rjmp	.+60     	; 0x55a4 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    5568:	00 23       	and	r16, r16
    556a:	19 f0       	breq	.+6      	; 0x5572 <memcpy_to_eeprom_with_checksum+0x34>
    556c:	21 e0       	ldi	r18, 0x01	; 1
    556e:	30 e0       	ldi	r19, 0x00	; 0
    5570:	08 c0       	rjmp	.+16     	; 0x5582 <memcpy_to_eeprom_with_checksum+0x44>
    5572:	20 2f       	mov	r18, r16
    5574:	33 27       	eor	r19, r19
    5576:	27 fd       	sbrc	r18, 7
    5578:	30 95       	com	r19
    557a:	22 27       	eor	r18, r18
    557c:	33 0f       	add	r19, r19
    557e:	22 1f       	adc	r18, r18
    5580:	33 27       	eor	r19, r19
    checksum += *source;
    5582:	f6 01       	movw	r30, r12
    5584:	61 91       	ld	r22, Z+
    5586:	6f 01       	movw	r12, r30
    5588:	06 2f       	mov	r16, r22
    558a:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    558c:	9c 01       	movw	r18, r24
    558e:	2f 5f       	subi	r18, 0xFF	; 255
    5590:	3f 4f       	sbci	r19, 0xFF	; 255
    5592:	29 83       	std	Y+1, r18	; 0x01
    5594:	3a 83       	std	Y+2, r19	; 0x02
    5596:	0e 94 94 2a 	call	0x5528	; 0x5528 <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    559a:	08 94       	sec
    559c:	81 08       	sbc	r8, r1
    559e:	91 08       	sbc	r9, r1
    55a0:	89 81       	ldd	r24, Y+1	; 0x01
    55a2:	9a 81       	ldd	r25, Y+2	; 0x02
    55a4:	81 14       	cp	r8, r1
    55a6:	91 04       	cpc	r9, r1
    55a8:	f9 f6       	brne	.-66     	; 0x5568 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    55aa:	c7 01       	movw	r24, r14
    55ac:	8a 0d       	add	r24, r10
    55ae:	9b 1d       	adc	r25, r11
    55b0:	60 2f       	mov	r22, r16
    55b2:	0e 94 94 2a 	call	0x5528	; 0x5528 <eeprom_put_char>
}
    55b6:	0f 90       	pop	r0
    55b8:	0f 90       	pop	r0
    55ba:	cf 91       	pop	r28
    55bc:	df 91       	pop	r29
    55be:	0f 91       	pop	r16
    55c0:	ff 90       	pop	r15
    55c2:	ef 90       	pop	r14
    55c4:	df 90       	pop	r13
    55c6:	cf 90       	pop	r12
    55c8:	bf 90       	pop	r11
    55ca:	af 90       	pop	r10
    55cc:	9f 90       	pop	r9
    55ce:	8f 90       	pop	r8
    55d0:	08 95       	ret

000055d2 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    55d2:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55d4:	e0 ec       	ldi	r30, 0xC0	; 192
    55d6:	f1 e0       	ldi	r31, 0x01	; 1
    55d8:	80 91 cf 01 	lds	r24, 0x01CF
    55dc:	87 fd       	sbrc	r24, 7
    55de:	fa cf       	rjmp	.-12     	; 0x55d4 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    55e0:	83 e3       	ldi	r24, 0x33	; 51
    55e2:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    55e4:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    55e8:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    55ea:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    55ec:	64 83       	std	Z+4, r22	; 0x04
}
    55ee:	08 95       	ret

000055f0 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    55f0:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55f2:	e0 ec       	ldi	r30, 0xC0	; 192
    55f4:	f1 e0       	ldi	r31, 0x01	; 1
    55f6:	80 91 cf 01 	lds	r24, 0x01CF
    55fa:	87 fd       	sbrc	r24, 7
    55fc:	fa cf       	rjmp	.-12     	; 0x55f2 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    55fe:	83 e3       	ldi	r24, 0x33	; 51
    5600:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    5602:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5604:	12 82       	std	Z+2, r1	; 0x02
    5606:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    5608:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    560c:	8d 91       	ld	r24, X+
    560e:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    5610:	9f 5f       	subi	r25, 0xFF	; 255
    5612:	90 32       	cpi	r25, 0x20	; 32
    5614:	c9 f7       	brne	.-14     	; 0x5608 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    5616:	08 95       	ret

00005618 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    5618:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    561a:	e0 ec       	ldi	r30, 0xC0	; 192
    561c:	f1 e0       	ldi	r31, 0x01	; 1
    561e:	80 91 cf 01 	lds	r24, 0x01CF
    5622:	87 fd       	sbrc	r24, 7
    5624:	fa cf       	rjmp	.-12     	; 0x561a <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5626:	89 2f       	mov	r24, r25
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	a5 e0       	ldi	r26, 0x05	; 5
    562c:	88 0f       	add	r24, r24
    562e:	99 1f       	adc	r25, r25
    5630:	aa 95       	dec	r26
    5632:	e1 f7       	brne	.-8      	; 0x562c <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5634:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5638:	89 2f       	mov	r24, r25
    563a:	8f 71       	andi	r24, 0x1F	; 31
    563c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    563e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5640:	85 e3       	ldi	r24, 0x35	; 53
    5642:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5644:	ef 93       	push	r30
    5646:	ff 93       	push	r31
    5648:	0f 93       	push	r16
    564a:	2f 93       	push	r18
    564c:	eb ec       	ldi	r30, 0xCB	; 203
    564e:	f1 e0       	ldi	r31, 0x01	; 1
    5650:	08 ed       	ldi	r16, 0xD8	; 216
    5652:	21 e0       	ldi	r18, 0x01	; 1
    5654:	04 bf       	out	0x34, r16	; 52
    5656:	20 83       	st	Z, r18
    5658:	2f 91       	pop	r18
    565a:	0f 91       	pop	r16
    565c:	ff 91       	pop	r31
    565e:	ef 91       	pop	r30
}
    5660:	08 95       	ret

00005662 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    5662:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5664:	e0 ec       	ldi	r30, 0xC0	; 192
    5666:	f1 e0       	ldi	r31, 0x01	; 1
    5668:	80 91 cf 01 	lds	r24, 0x01CF
    566c:	87 fd       	sbrc	r24, 7
    566e:	fa cf       	rjmp	.-12     	; 0x5664 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5670:	89 2f       	mov	r24, r25
    5672:	90 e0       	ldi	r25, 0x00	; 0
    5674:	b5 e0       	ldi	r27, 0x05	; 5
    5676:	88 0f       	add	r24, r24
    5678:	99 1f       	adc	r25, r25
    567a:	ba 95       	dec	r27
    567c:	e1 f7       	brne	.-8      	; 0x5676 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    567e:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5682:	89 2f       	mov	r24, r25
    5684:	8f 71       	andi	r24, 0x1F	; 31
    5686:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5688:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    568a:	82 e3       	ldi	r24, 0x32	; 50
    568c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    568e:	ef 93       	push	r30
    5690:	ff 93       	push	r31
    5692:	0f 93       	push	r16
    5694:	2f 93       	push	r18
    5696:	eb ec       	ldi	r30, 0xCB	; 203
    5698:	f1 e0       	ldi	r31, 0x01	; 1
    569a:	08 ed       	ldi	r16, 0xD8	; 216
    569c:	21 e0       	ldi	r18, 0x01	; 1
    569e:	04 bf       	out	0x34, r16	; 52
    56a0:	20 83       	st	Z, r18
    56a2:	2f 91       	pop	r18
    56a4:	0f 91       	pop	r16
    56a6:	ff 91       	pop	r31
    56a8:	ef 91       	pop	r30
}
    56aa:	08 95       	ret

000056ac <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    56ac:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    56ae:	e0 ec       	ldi	r30, 0xC0	; 192
    56b0:	f1 e0       	ldi	r31, 0x01	; 1
    56b2:	80 91 cf 01 	lds	r24, 0x01CF
    56b6:	87 fd       	sbrc	r24, 7
    56b8:	fa cf       	rjmp	.-12     	; 0x56ae <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    56ba:	89 2f       	mov	r24, r25
    56bc:	90 e0       	ldi	r25, 0x00	; 0
    56be:	25 e0       	ldi	r18, 0x05	; 5
    56c0:	88 0f       	add	r24, r24
    56c2:	99 1f       	adc	r25, r25
    56c4:	2a 95       	dec	r18
    56c6:	e1 f7       	brne	.-8      	; 0x56c0 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    56c8:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    56cc:	89 2f       	mov	r24, r25
    56ce:	8f 71       	andi	r24, 0x1F	; 31
    56d0:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    56d2:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    56d4:	84 e3       	ldi	r24, 0x34	; 52
    56d6:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    56d8:	ef 93       	push	r30
    56da:	ff 93       	push	r31
    56dc:	0f 93       	push	r16
    56de:	2f 93       	push	r18
    56e0:	eb ec       	ldi	r30, 0xCB	; 203
    56e2:	f1 e0       	ldi	r31, 0x01	; 1
    56e4:	08 ed       	ldi	r16, 0xD8	; 216
    56e6:	21 e0       	ldi	r18, 0x01	; 1
    56e8:	04 bf       	out	0x34, r16	; 52
    56ea:	20 83       	st	Z, r18
    56ec:	2f 91       	pop	r18
    56ee:	0f 91       	pop	r16
    56f0:	ff 91       	pop	r31
    56f2:	ef 91       	pop	r30
}
    56f4:	08 95       	ret

000056f6 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    56f6:	80 91 cf 01 	lds	r24, 0x01CF
    56fa:	87 fd       	sbrc	r24, 7
    56fc:	fc cf       	rjmp	.-8      	; 0x56f6 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    56fe:	80 e3       	ldi	r24, 0x30	; 48
    5700:	e0 ec       	ldi	r30, 0xC0	; 192
    5702:	f1 e0       	ldi	r31, 0x01	; 1
    5704:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5706:	ef 93       	push	r30
    5708:	ff 93       	push	r31
    570a:	0f 93       	push	r16
    570c:	2f 93       	push	r18
    570e:	eb ec       	ldi	r30, 0xCB	; 203
    5710:	f1 e0       	ldi	r31, 0x01	; 1
    5712:	08 ed       	ldi	r16, 0xD8	; 216
    5714:	21 e0       	ldi	r18, 0x01	; 1
    5716:	04 bf       	out	0x34, r16	; 52
    5718:	20 83       	st	Z, r18
    571a:	2f 91       	pop	r18
    571c:	0f 91       	pop	r16
    571e:	ff 91       	pop	r31
    5720:	ef 91       	pop	r30
}
    5722:	08 95       	ret

00005724 <tg_reset_source>:
 * tg_reset_source()  Reset source to default input device
 */

void tg_reset_source()
{
	_tg_set_source(tg.default_src);
    5724:	80 91 a6 21 	lds	r24, 0x21A6
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    5728:	80 93 a5 21 	sts	0x21A5, r24
	if (tg.src == XIO_DEV_PGM) {
    572c:	83 30       	cpi	r24, 0x03	; 3
    572e:	21 f4       	brne	.+8      	; 0x5738 <tg_reset_source+0x14>
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    5730:	80 91 a2 21 	lds	r24, 0x21A2
    5734:	8e 7f       	andi	r24, 0xFE	; 254
    5736:	03 c0       	rjmp	.+6      	; 0x573e <tg_reset_source+0x1a>
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    5738:	80 91 a2 21 	lds	r24, 0x21A2
    573c:	81 60       	ori	r24, 0x01	; 1
    573e:	80 93 a2 21 	sts	0x21A2, r24
    5742:	08 95       	ret

00005744 <tg_print_status>:
	tgStatusMsg20
};

void tg_print_status(const uint8_t status_code, const char *textbuf)
{
	switch (status_code) {		// don't send messages for these status codes
    5744:	84 30       	cpi	r24, 0x04	; 4
    5746:	28 f4       	brcc	.+10     	; 0x5752 <tg_print_status+0xe>
    5748:	82 30       	cpi	r24, 0x02	; 2
    574a:	28 f5       	brcc	.+74     	; 0x5796 <tg_print_status+0x52>
    574c:	88 23       	and	r24, r24
    574e:	19 f1       	breq	.+70     	; 0x5796 <tg_print_status+0x52>
    5750:	02 c0       	rjmp	.+4      	; 0x5756 <tg_print_status+0x12>
    5752:	8b 30       	cpi	r24, 0x0B	; 11
    5754:	01 f1       	breq	.+64     	; 0x5796 <tg_print_status+0x52>
		case TG_OK: return;
		case TG_EAGAIN: return;
		case TG_NOOP: return;
		case TG_QUIT: return;
	}
	printf_P(PSTR("%S--> %s\n"),(PGM_P)pgm_read_word(&tgStatusStrings[status_code]), textbuf);
    5756:	e8 2f       	mov	r30, r24
    5758:	f0 e0       	ldi	r31, 0x00	; 0
    575a:	ee 0f       	add	r30, r30
    575c:	ff 1f       	adc	r31, r31
    575e:	e5 51       	subi	r30, 0x15	; 21
    5760:	f5 4e       	sbci	r31, 0xE5	; 229
    5762:	25 91       	lpm	r18, Z+
    5764:	34 91       	lpm	r19, Z+
    5766:	00 d0       	rcall	.+0      	; 0x5768 <tg_print_status+0x24>
    5768:	00 d0       	rcall	.+0      	; 0x576a <tg_print_status+0x26>
    576a:	ed b7       	in	r30, 0x3d	; 61
    576c:	fe b7       	in	r31, 0x3e	; 62
    576e:	31 96       	adiw	r30, 0x01	; 1
    5770:	85 e1       	ldi	r24, 0x15	; 21
    5772:	9b e1       	ldi	r25, 0x1B	; 27
    5774:	ad b7       	in	r26, 0x3d	; 61
    5776:	be b7       	in	r27, 0x3e	; 62
    5778:	11 96       	adiw	r26, 0x01	; 1
    577a:	8d 93       	st	X+, r24
    577c:	9c 93       	st	X, r25
    577e:	12 97       	sbiw	r26, 0x02	; 2
    5780:	22 83       	std	Z+2, r18	; 0x02
    5782:	33 83       	std	Z+3, r19	; 0x03
    5784:	64 83       	std	Z+4, r22	; 0x04
    5786:	75 83       	std	Z+5, r23	; 0x05
    5788:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
    578c:	8d b7       	in	r24, 0x3d	; 61
    578e:	9e b7       	in	r25, 0x3e	; 62
    5790:	06 96       	adiw	r24, 0x06	; 6
    5792:	8d bf       	out	0x3d, r24	; 61
    5794:	9e bf       	out	0x3e, r25	; 62
    5796:	08 95       	ret

00005798 <tg_init>:
 */

void tg_init() 
{
	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
    5798:	81 e0       	ldi	r24, 0x01	; 1
    579a:	80 93 a6 21 	sts	0x21A6, r24
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    579e:	e6 ea       	ldi	r30, 0xA6	; 166
    57a0:	f1 e2       	ldi	r31, 0x21	; 33
    57a2:	80 93 a5 21 	sts	0x21A5, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    57a6:	34 97       	sbiw	r30, 0x04	; 4
    57a8:	80 81       	ld	r24, Z
    57aa:	81 60       	ori	r24, 0x01	; 1
    57ac:	80 83       	st	Z, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    57ae:	10 92 a4 21 	sts	0x21A4, r1
{
	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
	_tg_set_source(tg.default_src);			// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
	tg.state = TG_READY_UNPROMPTED;
    57b2:	10 92 a1 21 	sts	0x21A1, r1

	// version string
	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    57b6:	00 d0       	rcall	.+0      	; 0x57b8 <tg_init+0x20>
    57b8:	0f 92       	push	r0
    57ba:	8c e4       	ldi	r24, 0x4C	; 76
    57bc:	9b e1       	ldi	r25, 0x1B	; 27
    57be:	ed b7       	in	r30, 0x3d	; 61
    57c0:	fe b7       	in	r31, 0x3e	; 62
    57c2:	81 83       	std	Z+1, r24	; 0x01
    57c4:	92 83       	std	Z+2, r25	; 0x02
    57c6:	82 e4       	ldi	r24, 0x42	; 66
    57c8:	9b e1       	ldi	r25, 0x1B	; 27
    57ca:	83 83       	std	Z+3, r24	; 0x03
    57cc:	94 83       	std	Z+4, r25	; 0x04
    57ce:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
    57d2:	0f 90       	pop	r0
    57d4:	0f 90       	pop	r0
    57d6:	0f 90       	pop	r0
    57d8:	0f 90       	pop	r0
}
    57da:	08 95       	ret

000057dc <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    57dc:	cf 93       	push	r28
    57de:	df 93       	push	r29
    57e0:	ec 01       	movw	r28, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    57e2:	80 91 a4 21 	lds	r24, 0x21A4
    57e6:	88 23       	and	r24, r24
    57e8:	09 f0       	breq	.+2      	; 0x57ec <tg_parser+0x10>
    57ea:	43 c0       	rjmp	.+134    	; 0x5872 <tg_parser+0x96>
		switch (toupper(buf[0])) {
    57ec:	88 81       	ld	r24, Y
    57ee:	90 e0       	ldi	r25, 0x00	; 0
    57f0:	0e 94 70 48 	call	0x90e0	; 0x90e0 <toupper>
    57f4:	86 34       	cpi	r24, 0x46	; 70
    57f6:	91 05       	cpc	r25, r1
    57f8:	41 f1       	breq	.+80     	; 0x584a <tg_parser+0x6e>
    57fa:	87 34       	cpi	r24, 0x47	; 71
    57fc:	91 05       	cpc	r25, r1
    57fe:	84 f4       	brge	.+32     	; 0x5820 <tg_parser+0x44>
    5800:	83 34       	cpi	r24, 0x43	; 67
    5802:	91 05       	cpc	r25, r1
    5804:	e1 f0       	breq	.+56     	; 0x583e <tg_parser+0x62>
    5806:	84 34       	cpi	r24, 0x44	; 68
    5808:	91 05       	cpc	r25, r1
    580a:	34 f4       	brge	.+12     	; 0x5818 <tg_parser+0x3c>
    580c:	88 32       	cpi	r24, 0x28	; 40
    580e:	91 05       	cpc	r25, r1
    5810:	a1 f0       	breq	.+40     	; 0x583a <tg_parser+0x5e>
    5812:	cf 97       	sbiw	r24, 0x3f	; 63
    5814:	61 f5       	brne	.+88     	; 0x586e <tg_parser+0x92>
    5816:	13 c0       	rjmp	.+38     	; 0x583e <tg_parser+0x62>
    5818:	84 34       	cpi	r24, 0x44	; 68
    581a:	91 05       	cpc	r25, r1
    581c:	41 f5       	brne	.+80     	; 0x586e <tg_parser+0x92>
    581e:	13 c0       	rjmp	.+38     	; 0x5846 <tg_parser+0x6a>
    5820:	8f 34       	cpi	r24, 0x4F	; 79
    5822:	91 05       	cpc	r25, r1
    5824:	3c f4       	brge	.+14     	; 0x5834 <tg_parser+0x58>
    5826:	8d 34       	cpi	r24, 0x4D	; 77
    5828:	91 05       	cpc	r25, r1
    582a:	3c f4       	brge	.+14     	; 0x583a <tg_parser+0x5e>
    582c:	87 34       	cpi	r24, 0x47	; 71
    582e:	91 05       	cpc	r25, r1
    5830:	f1 f4       	brne	.+60     	; 0x586e <tg_parser+0x92>
    5832:	03 c0       	rjmp	.+6      	; 0x583a <tg_parser+0x5e>
    5834:	8c 35       	cpi	r24, 0x5C	; 92
    5836:	91 05       	cpc	r25, r1
    5838:	d1 f4       	brne	.+52     	; 0x586e <tg_parser+0x92>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    583a:	82 e0       	ldi	r24, 0x02	; 2
    583c:	01 c0       	rjmp	.+2      	; 0x5840 <tg_parser+0x64>
int tg_parser(char * buf)
{
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
		switch (toupper(buf[0])) {
			case 'G': case 'M': case 'N': case '(': case '\\': _tg_set_mode(TG_GCODE_MODE); break;
    583e:	81 e0       	ldi	r24, 0x01	; 1
    5840:	80 93 a4 21 	sts	0x21A4, r24
    5844:	16 c0       	rjmp	.+44     	; 0x5872 <tg_parser+0x96>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5846:	83 e0       	ldi	r24, 0x03	; 3
    5848:	fb cf       	rjmp	.-10     	; 0x5840 <tg_parser+0x64>
//	xio_open_pgm(PGMFILE(&square_circle_test100));
//	xio_open_pgm(PGMFILE(&spiral_test50a));
//	xio_open_pgm(PGMFILE(&spiral_test5));
//	xio_open_pgm(PGMFILE(&dwell_test2));

	xio_open_pgm(PGMFILE(&contraptor_circle)); 	// contraptor circle test
    584a:	8c e8       	ldi	r24, 0x8C	; 140
    584c:	95 e1       	ldi	r25, 0x15	; 21
    584e:	0e 94 91 35 	call	0x6b22	; 0x6b22 <xio_open_pgm>
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    5852:	83 e0       	ldi	r24, 0x03	; 3
    5854:	80 93 a5 21 	sts	0x21A5, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    5858:	80 91 a2 21 	lds	r24, 0x21A2
    585c:	8e 7f       	andi	r24, 0xFE	; 254
    585e:	80 93 a2 21 	sts	0x21A2, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5862:	82 e0       	ldi	r24, 0x02	; 2
    5864:	80 93 a4 21 	sts	0x21A4, r24
    5868:	20 e0       	ldi	r18, 0x00	; 0
    586a:	30 e0       	ldi	r19, 0x00	; 0
    586c:	1d c0       	rjmp	.+58     	; 0x58a8 <tg_parser+0xcc>
	if (tg.mode == TG_CONTROL_MODE) {
		switch (toupper(buf[0])) {
			case 'G': case 'M': case 'N': case '(': case '\\': _tg_set_mode(TG_GCODE_MODE); break;
			case 'C': case '?': _tg_set_mode(TG_CONFIG_MODE); break;
			case 'D': _tg_set_mode(TG_DIRECT_DRIVE_MODE); break;
			case 'F': return (_tg_test_file());
    586e:	10 92 a4 21 	sts	0x21A4, r1
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    5872:	10 92 a3 21 	sts	0x21A3, r1
	switch (tg.mode) {
    5876:	80 91 a4 21 	lds	r24, 0x21A4
    587a:	82 30       	cpi	r24, 0x02	; 2
    587c:	41 f0       	breq	.+16     	; 0x588e <tg_parser+0xb2>
    587e:	83 30       	cpi	r24, 0x03	; 3
    5880:	51 f0       	breq	.+20     	; 0x5896 <tg_parser+0xba>
    5882:	81 30       	cpi	r24, 0x01	; 1
    5884:	69 f4       	brne	.+26     	; 0x58a0 <tg_parser+0xc4>
		case TG_CONFIG_MODE: tg.status = cfg_parse(buf); break;
    5886:	ce 01       	movw	r24, r28
    5888:	0e 94 88 19 	call	0x3310	; 0x3310 <cfg_parse>
    588c:	07 c0       	rjmp	.+14     	; 0x589c <tg_parser+0xc0>
		case TG_GCODE_MODE: tg.status = gc_gcode_parser(buf); break;
    588e:	ce 01       	movw	r24, r28
    5890:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <gc_gcode_parser>
    5894:	03 c0       	rjmp	.+6      	; 0x589c <tg_parser+0xc0>
		case TG_DIRECT_DRIVE_MODE: tg.status = dd_parser(buf); break;
    5896:	ce 01       	movw	r24, r28
    5898:	0e 94 c3 2c 	call	0x5986	; 0x5986 <dd_parser>
    589c:	80 93 a3 21 	sts	0x21A3, r24
	}
	return (tg.status);
    58a0:	80 91 a3 21 	lds	r24, 0x21A3
    58a4:	28 2f       	mov	r18, r24
    58a6:	30 e0       	ldi	r19, 0x00	; 0
}
    58a8:	c9 01       	movw	r24, r18
    58aa:	df 91       	pop	r29
    58ac:	cf 91       	pop	r28
    58ae:	08 95       	ret

000058b0 <tg_controller>:
 */

void tg_controller()
{
	// top priority tasks
	st_execute_move();
    58b0:	0e 94 57 25 	call	0x4aae	; 0x4aae <st_execute_move>

	// medium priority tasks
	switch (mc_line_continue()) {
    58b4:	0e 94 ed 1b 	call	0x37da	; 0x37da <mc_line_continue>
    58b8:	00 97       	sbiw	r24, 0x00	; 0
    58ba:	51 f0       	breq	.+20     	; 0x58d0 <tg_controller+0x20>
    58bc:	02 97       	sbiw	r24, 0x02	; 2
    58be:	09 f4       	brne	.+2      	; 0x58c2 <tg_controller+0x12>
    58c0:	08 95       	ret
		case (TG_EAGAIN): return;
		case (TG_OK): tg.state = TG_READY_UNPROMPTED; return;
	}

	switch (mc_arc_continue()) {
    58c2:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <mc_arc_continue>
    58c6:	00 97       	sbiw	r24, 0x00	; 0
    58c8:	19 f0       	breq	.+6      	; 0x58d0 <tg_controller+0x20>
    58ca:	02 97       	sbiw	r24, 0x02	; 2
    58cc:	21 f4       	brne	.+8      	; 0x58d6 <tg_controller+0x26>
    58ce:	08 95       	ret
		case (TG_EAGAIN): return;
		case (TG_OK): tg.state = TG_READY_UNPROMPTED; return;
    58d0:	10 92 a1 21 	sts	0x21A1, r1
    58d4:	08 95       	ret
 */

static int _tg_read_next_line()
{
	// read input line or return if not a completed line
	if ((tg.status = xio_readln(tg.src, tg.buf, sizeof(tg.buf))) == TG_OK) {
    58d6:	80 91 a5 21 	lds	r24, 0x21A5
    58da:	68 ea       	ldi	r22, 0xA8	; 168
    58dc:	71 e2       	ldi	r23, 0x21	; 33
    58de:	48 e2       	ldi	r20, 0x28	; 40
    58e0:	0e 94 1c 29 	call	0x5238	; 0x5238 <xio_readln>
    58e4:	80 93 a3 21 	sts	0x21A3, r24
    58e8:	88 23       	and	r24, r24
    58ea:	31 f4       	brne	.+12     	; 0x58f8 <tg_controller+0x48>
		tg.status = tg_parser(tg.buf);				// dispatch to parser
    58ec:	88 ea       	ldi	r24, 0xA8	; 168
    58ee:	91 e2       	ldi	r25, 0x21	; 33
    58f0:	0e 94 ee 2b 	call	0x57dc	; 0x57dc <tg_parser>
    58f4:	80 93 a3 21 	sts	0x21A3, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    58f8:	80 91 a3 21 	lds	r24, 0x21A3
    58fc:	84 30       	cpi	r24, 0x04	; 4
    58fe:	18 f4       	brcc	.+6      	; 0x5906 <tg_controller+0x56>
    5900:	82 30       	cpi	r24, 0x02	; 2
    5902:	c0 f4       	brcc	.+48     	; 0x5934 <tg_controller+0x84>
    5904:	15 c0       	rjmp	.+42     	; 0x5930 <tg_controller+0x80>
    5906:	85 30       	cpi	r24, 0x05	; 5
    5908:	29 f0       	breq	.+10     	; 0x5914 <tg_controller+0x64>
    590a:	8b 30       	cpi	r24, 0x0B	; 11
    590c:	89 f4       	brne	.+34     	; 0x5930 <tg_controller+0x80>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    590e:	10 92 a4 21 	sts	0x21A4, r1
    5912:	0e c0       	rjmp	.+28     	; 0x5930 <tg_controller+0x80>
			_tg_set_mode(TG_CONTROL_MODE);
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
    5914:	0f 92       	push	r0
    5916:	0f 92       	push	r0
    5918:	8f e1       	ldi	r24, 0x1F	; 31
    591a:	9b e1       	ldi	r25, 0x1B	; 27
    591c:	ed b7       	in	r30, 0x3d	; 61
    591e:	fe b7       	in	r31, 0x3e	; 62
    5920:	81 83       	std	Z+1, r24	; 0x01
    5922:	92 83       	std	Z+2, r25	; 0x02
    5924:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
			tg_reset_source();						// reset to default src
    5928:	0f 90       	pop	r0
    592a:	0f 90       	pop	r0
    592c:	0e 94 92 2b 	call	0x5724	; 0x5724 <tg_reset_source>
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_READY_UNPROMPTED;			// traps various error returns
    5930:	10 92 a1 21 	sts	0x21A1, r1
		case (TG_EAGAIN): return;
		case (TG_OK): tg.state = TG_READY_UNPROMPTED; return;
	}

	// low priority tasks
	if ((tg.status = _tg_read_next_line()) == TG_EAGAIN) {	// input line
    5934:	10 92 a3 21 	sts	0x21A3, r1
	tgModeStringDirect
};

void _tg_prompt()
{
	if (tg.state == TG_READY_UNPROMPTED) {
    5938:	80 91 a1 21 	lds	r24, 0x21A1
    593c:	88 23       	and	r24, r24
    593e:	09 f5       	brne	.+66     	; 0x5982 <tg_controller+0xd2>
		if (tg.flags && TG_FLAG_PROMPTS_bm) {
    5940:	80 91 a2 21 	lds	r24, 0x21A2
    5944:	88 23       	and	r24, r24
    5946:	d1 f0       	breq	.+52     	; 0x597c <tg_controller+0xcc>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5948:	80 91 a4 21 	lds	r24, 0x21A4
    594c:	e8 2f       	mov	r30, r24
    594e:	f0 e0       	ldi	r31, 0x00	; 0
    5950:	ee 0f       	add	r30, r30
    5952:	ff 1f       	adc	r31, r31
    5954:	e2 56       	subi	r30, 0x62	; 98
    5956:	f6 4e       	sbci	r31, 0xE6	; 230
    5958:	25 91       	lpm	r18, Z+
    595a:	34 91       	lpm	r19, Z+
    595c:	00 d0       	rcall	.+0      	; 0x595e <tg_controller+0xae>
    595e:	0f 92       	push	r0
    5960:	84 e3       	ldi	r24, 0x34	; 52
    5962:	9b e1       	ldi	r25, 0x1B	; 27
    5964:	ed b7       	in	r30, 0x3d	; 61
    5966:	fe b7       	in	r31, 0x3e	; 62
    5968:	81 83       	std	Z+1, r24	; 0x01
    596a:	92 83       	std	Z+2, r25	; 0x02
    596c:	23 83       	std	Z+3, r18	; 0x03
    596e:	34 83       	std	Z+4, r19	; 0x04
    5970:	0e 94 12 49 	call	0x9224	; 0x9224 <printf_P>
    5974:	0f 90       	pop	r0
    5976:	0f 90       	pop	r0
    5978:	0f 90       	pop	r0
    597a:	0f 90       	pop	r0
		}
		tg.state = TG_READY_PROMPTED;
    597c:	81 e0       	ldi	r24, 0x01	; 1
    597e:	80 93 a1 21 	sts	0x21A1, r24
    5982:	08 95       	ret

00005984 <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    5984:	08 95       	ret

00005986 <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    5986:	80 e0       	ldi	r24, 0x00	; 0
    5988:	90 e0       	ldi	r25, 0x00	; 0
    598a:	08 95       	ret

0000598c <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    598c:	10 92 e8 21 	sts	0x21E8, r1
	mv.move_buffer_tail = 0;
    5990:	10 92 e9 21 	sts	0x21E9, r1
}
    5994:	08 95       	ret

00005996 <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    5996:	90 91 e8 21 	lds	r25, 0x21E8
    599a:	80 91 e9 21 	lds	r24, 0x21E9
    599e:	98 17       	cp	r25, r24
    59a0:	19 f4       	brne	.+6      	; 0x59a8 <mv_dequeue_move_buffer+0x12>
    59a2:	20 e0       	ldi	r18, 0x00	; 0
    59a4:	30 e0       	ldi	r19, 0x00	; 0
    59a6:	17 c0       	rjmp	.+46     	; 0x59d6 <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    59a8:	90 91 e9 21 	lds	r25, 0x21E9
    59ac:	8e e1       	ldi	r24, 0x1E	; 30
    59ae:	98 9f       	mul	r25, r24
    59b0:	90 01       	movw	r18, r0
    59b2:	11 24       	eor	r1, r1
    59b4:	24 51       	subi	r18, 0x14	; 20
    59b6:	3e 4d       	sbci	r19, 0xDE	; 222
    59b8:	20 93 ea 21 	sts	0x21EA, r18
    59bc:	30 93 eb 21 	sts	0x21EB, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    59c0:	80 91 e9 21 	lds	r24, 0x21E9
    59c4:	8f 5f       	subi	r24, 0xFF	; 255
    59c6:	80 93 e9 21 	sts	0x21E9, r24
    59ca:	80 91 e9 21 	lds	r24, 0x21E9
    59ce:	83 30       	cpi	r24, 0x03	; 3
    59d0:	10 f0       	brcs	.+4      	; 0x59d6 <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    59d2:	10 92 e9 21 	sts	0x21E9, r1
	}
	return (mv.p); 
}
    59d6:	c9 01       	movw	r24, r18
    59d8:	08 95       	ret

000059da <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    59da:	90 91 e8 21 	lds	r25, 0x21E8
    59de:	9f 5f       	subi	r25, 0xFF	; 255
    59e0:	93 30       	cpi	r25, 0x03	; 3
    59e2:	08 f0       	brcs	.+2      	; 0x59e6 <mv_test_move_buffer_full+0xc>
    59e4:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    59e6:	80 91 e9 21 	lds	r24, 0x21E9
    59ea:	20 e0       	ldi	r18, 0x00	; 0
    59ec:	89 17       	cp	r24, r25
    59ee:	09 f4       	brne	.+2      	; 0x59f2 <mv_test_move_buffer_full+0x18>
    59f0:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    59f2:	82 2f       	mov	r24, r18
    59f4:	08 95       	ret

000059f6 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    59f6:	0b c0       	rjmp	.+22     	; 0x5a0e <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    59f8:	80 91 48 00 	lds	r24, 0x0048
    59fc:	81 60       	ori	r24, 0x01	; 1
    59fe:	80 93 48 00 	sts	0x0048, r24
    5a02:	88 95       	sleep
    5a04:	80 91 48 00 	lds	r24, 0x0048
    5a08:	8e 7f       	andi	r24, 0xFE	; 254
    5a0a:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    5a0e:	90 91 e9 21 	lds	r25, 0x21E9
    5a12:	80 91 e8 21 	lds	r24, 0x21E8
    5a16:	98 17       	cp	r25, r24
    5a18:	79 f7       	brne	.-34     	; 0x59f8 <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    5a1a:	08 95       	ret

00005a1c <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    5a1c:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    5a1e:	80 91 e8 21 	lds	r24, 0x21E8
    5a22:	80 93 e9 21 	sts	0x21E9, r24
	mv.p = NULL;
    5a26:	10 92 ea 21 	sts	0x21EA, r1
    5a2a:	10 92 eb 21 	sts	0x21EB, r1
	sei();
    5a2e:	78 94       	sei
}
    5a30:	08 95       	ret

00005a32 <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    5a32:	2f 92       	push	r2
    5a34:	3f 92       	push	r3
    5a36:	4f 92       	push	r4
    5a38:	5f 92       	push	r5
    5a3a:	6f 92       	push	r6
    5a3c:	7f 92       	push	r7
    5a3e:	8f 92       	push	r8
    5a40:	9f 92       	push	r9
    5a42:	af 92       	push	r10
    5a44:	bf 92       	push	r11
    5a46:	cf 92       	push	r12
    5a48:	df 92       	push	r13
    5a4a:	ef 92       	push	r14
    5a4c:	ff 92       	push	r15
    5a4e:	0f 93       	push	r16
    5a50:	1f 93       	push	r17
    5a52:	df 93       	push	r29
    5a54:	cf 93       	push	r28
    5a56:	cd b7       	in	r28, 0x3d	; 61
    5a58:	de b7       	in	r29, 0x3e	; 62
    5a5a:	2b 97       	sbiw	r28, 0x0b	; 11
    5a5c:	cd bf       	out	0x3d, r28	; 61
    5a5e:	de bf       	out	0x3e, r29	; 62
    5a60:	1b 01       	movw	r2, r22
    5a62:	2c 01       	movw	r4, r24
    5a64:	2a 83       	std	Y+2, r18	; 0x02
    5a66:	3b 83       	std	Y+3, r19	; 0x03
    5a68:	4c 83       	std	Y+4, r20	; 0x04
    5a6a:	5d 83       	std	Y+5, r21	; 0x05
    5a6c:	ee 82       	std	Y+6, r14	; 0x06
    5a6e:	ff 82       	std	Y+7, r15	; 0x07
    5a70:	08 87       	std	Y+8, r16	; 0x08
    5a72:	19 87       	std	Y+9, r17	; 0x09
	uint8_t next_buffer_head;
	uint8_t i;

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    5a74:	80 91 e8 21 	lds	r24, 0x21E8
    5a78:	8f 5f       	subi	r24, 0xFF	; 255
    5a7a:	89 83       	std	Y+1, r24	; 0x01
    5a7c:	83 30       	cpi	r24, 0x03	; 3
    5a7e:	08 f0       	brcs	.+2      	; 0x5a82 <mv_queue_move_buffer+0x50>
    5a80:	19 82       	std	Y+1, r1	; 0x01
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    5a82:	80 91 e9 21 	lds	r24, 0x21E9
    5a86:	99 81       	ldd	r25, Y+1	; 0x01
    5a88:	89 17       	cp	r24, r25
    5a8a:	11 f4       	brne	.+4      	; 0x5a90 <mv_queue_move_buffer+0x5e>
    5a8c:	8a e0       	ldi	r24, 0x0A	; 10
    5a8e:	20 c2       	rjmp	.+1088   	; 0x5ed0 <mv_queue_move_buffer+0x49e>
		return (TG_BUFFER_FULL_NON_FATAL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    5a90:	e0 91 e8 21 	lds	r30, 0x21E8
    5a94:	8e e1       	ldi	r24, 0x1E	; 30
    5a96:	e8 9f       	mul	r30, r24
    5a98:	f0 01       	movw	r30, r0
    5a9a:	11 24       	eor	r1, r1
    5a9c:	e4 51       	subi	r30, 0x14	; 20
    5a9e:	fe 4d       	sbci	r31, 0xDE	; 222
    5aa0:	e0 93 ea 21 	sts	0x21EA, r30
    5aa4:	f0 93 eb 21 	sts	0x21EB, r31
	memset(mv.p, 0, sizeof(struct mvMove));
    5aa8:	df 01       	movw	r26, r30
    5aaa:	1d 92       	st	X+, r1
    5aac:	8a 95       	dec	r24
    5aae:	e9 f7       	brne	.-6      	; 0x5aaa <mv_queue_move_buffer+0x78>
	mv.p->a[X].steps = steps_x;
    5ab0:	80 90 ea 21 	lds	r8, 0x21EA
    5ab4:	90 90 eb 21 	lds	r9, 0x21EB
    5ab8:	f4 01       	movw	r30, r8
    5aba:	20 82       	st	Z, r2
    5abc:	31 82       	std	Z+1, r3	; 0x01
    5abe:	42 82       	std	Z+2, r4	; 0x02
    5ac0:	53 82       	std	Z+3, r5	; 0x03
	mv.p->a[Y].steps = steps_y;
    5ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    5ac6:	ac 81       	ldd	r26, Y+4	; 0x04
    5ac8:	bd 81       	ldd	r27, Y+5	; 0x05
    5aca:	82 87       	std	Z+10, r24	; 0x0a
    5acc:	93 87       	std	Z+11, r25	; 0x0b
    5ace:	a4 87       	std	Z+12, r26	; 0x0c
    5ad0:	b5 87       	std	Z+13, r27	; 0x0d
	mv.p->a[Z].steps = steps_z;
    5ad2:	8e 81       	ldd	r24, Y+6	; 0x06
    5ad4:	9f 81       	ldd	r25, Y+7	; 0x07
    5ad6:	a8 85       	ldd	r26, Y+8	; 0x08
    5ad8:	b9 85       	ldd	r27, Y+9	; 0x09
    5ada:	84 8b       	std	Z+20, r24	; 0x14
    5adc:	95 8b       	std	Z+21, r25	; 0x15
    5ade:	a6 8b       	std	Z+22, r26	; 0x16
    5ae0:	b7 8b       	std	Z+23, r27	; 0x17
	mv.microseconds = (uint64_t)microseconds;			// cast to larger base
    5ae2:	a0 92 e0 21 	sts	0x21E0, r10
    5ae6:	b0 92 e1 21 	sts	0x21E1, r11
    5aea:	c0 92 e2 21 	sts	0x21E2, r12
    5aee:	d0 92 e3 21 	sts	0x21E3, r13
    5af2:	10 92 e4 21 	sts	0x21E4, r1
    5af6:	10 92 e5 21 	sts	0x21E5, r1
    5afa:	10 92 e6 21 	sts	0x21E6, r1
    5afe:	10 92 e7 21 	sts	0x21E7, r1
	mv.ticks = mv.microseconds * TICKS_PER_MICROSECOND;
    5b02:	95 01       	movw	r18, r10
    5b04:	a6 01       	movw	r20, r12
    5b06:	60 e0       	ldi	r22, 0x00	; 0
    5b08:	70 e0       	ldi	r23, 0x00	; 0
    5b0a:	80 e0       	ldi	r24, 0x00	; 0
    5b0c:	90 e0       	ldi	r25, 0x00	; 0
    5b0e:	05 e0       	ldi	r16, 0x05	; 5
    5b10:	0e 94 c1 36 	call	0x6d82	; 0x6d82 <__ashldi3>
    5b14:	fc 01       	movw	r30, r24
    5b16:	90 ed       	ldi	r25, 0xD0	; 208
    5b18:	69 2e       	mov	r6, r25
    5b1a:	91 e2       	ldi	r25, 0x21	; 33
    5b1c:	79 2e       	mov	r7, r25
    5b1e:	20 93 d0 21 	sts	0x21D0, r18
    5b22:	d3 01       	movw	r26, r6
    5b24:	11 96       	adiw	r26, 0x01	; 1
    5b26:	3c 93       	st	X, r19
    5b28:	11 97       	sbiw	r26, 0x01	; 1
    5b2a:	12 96       	adiw	r26, 0x02	; 2
    5b2c:	4c 93       	st	X, r20
    5b2e:	12 97       	sbiw	r26, 0x02	; 2
    5b30:	13 96       	adiw	r26, 0x03	; 3
    5b32:	5c 93       	st	X, r21
    5b34:	13 97       	sbiw	r26, 0x03	; 3
    5b36:	14 96       	adiw	r26, 0x04	; 4
    5b38:	6c 93       	st	X, r22
    5b3a:	14 97       	sbiw	r26, 0x04	; 4
    5b3c:	15 96       	adiw	r26, 0x05	; 5
    5b3e:	7c 93       	st	X, r23
    5b40:	15 97       	sbiw	r26, 0x05	; 5
    5b42:	16 96       	adiw	r26, 0x06	; 6
    5b44:	ec 93       	st	X, r30
    5b46:	16 97       	sbiw	r26, 0x06	; 6
    5b48:	17 96       	adiw	r26, 0x07	; 7
    5b4a:	fc 93       	st	X, r31

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    5b4c:	21 14       	cp	r2, r1
    5b4e:	31 04       	cpc	r3, r1
    5b50:	41 04       	cpc	r4, r1
    5b52:	51 04       	cpc	r5, r1
    5b54:	09 f0       	breq	.+2      	; 0x5b58 <mv_queue_move_buffer+0x126>
    5b56:	73 c0       	rjmp	.+230    	; 0x5c3e <mv_queue_move_buffer+0x20c>
    5b58:	8a 81       	ldd	r24, Y+2	; 0x02
    5b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    5b5c:	ac 81       	ldd	r26, Y+4	; 0x04
    5b5e:	bd 81       	ldd	r27, Y+5	; 0x05
    5b60:	00 97       	sbiw	r24, 0x00	; 0
    5b62:	a1 05       	cpc	r26, r1
    5b64:	b1 05       	cpc	r27, r1
    5b66:	09 f0       	breq	.+2      	; 0x5b6a <mv_queue_move_buffer+0x138>
    5b68:	6a c0       	rjmp	.+212    	; 0x5c3e <mv_queue_move_buffer+0x20c>
    5b6a:	8e 81       	ldd	r24, Y+6	; 0x06
    5b6c:	9f 81       	ldd	r25, Y+7	; 0x07
    5b6e:	a8 85       	ldd	r26, Y+8	; 0x08
    5b70:	b9 85       	ldd	r27, Y+9	; 0x09
    5b72:	00 97       	sbiw	r24, 0x00	; 0
    5b74:	a1 05       	cpc	r26, r1
    5b76:	b1 05       	cpc	r27, r1
    5b78:	09 f0       	breq	.+2      	; 0x5b7c <mv_queue_move_buffer+0x14a>
    5b7a:	61 c0       	rjmp	.+194    	; 0x5c3e <mv_queue_move_buffer+0x20c>
		mv.p->a[X].steps = (((mv.ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    5b7c:	81 e0       	ldi	r24, 0x01	; 1
    5b7e:	e8 2e       	mov	r14, r24
    5b80:	f1 2c       	mov	r15, r1
    5b82:	01 2d       	mov	r16, r1
    5b84:	11 2d       	mov	r17, r1
    5b86:	d4 01       	movw	r26, r8
    5b88:	ed 92       	st	X+, r14
    5b8a:	fd 92       	st	X+, r15
    5b8c:	0d 93       	st	X+, r16
    5b8e:	1c 93       	st	X, r17
    5b90:	13 97       	sbiw	r26, 0x03	; 3
		mv.p->a[X].postscale = 1;
    5b92:	81 e0       	ldi	r24, 0x01	; 1
    5b94:	90 e0       	ldi	r25, 0x00	; 0
    5b96:	16 96       	adiw	r26, 0x06	; 6
    5b98:	8d 93       	st	X+, r24
    5b9a:	9c 93       	st	X, r25
    5b9c:	17 97       	sbiw	r26, 0x07	; 7
		mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[X].steps); // expensive!
    5b9e:	cf 01       	movw	r24, r30
    5ba0:	aa 24       	eor	r10, r10
    5ba2:	a3 94       	inc	r10
    5ba4:	bb 24       	eor	r11, r11
    5ba6:	cc 24       	eor	r12, r12
    5ba8:	dd 24       	eor	r13, r13
    5baa:	ee 24       	eor	r14, r14
    5bac:	ff 24       	eor	r15, r15
    5bae:	00 e0       	ldi	r16, 0x00	; 0
    5bb0:	10 e0       	ldi	r17, 0x00	; 0
    5bb2:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <__udivdi3>
    5bb6:	f3 01       	movw	r30, r6
    5bb8:	38 96       	adiw	r30, 0x08	; 8
    5bba:	20 93 d8 21 	sts	0x21D8, r18
    5bbe:	31 83       	std	Z+1, r19	; 0x01
    5bc0:	42 83       	std	Z+2, r20	; 0x02
    5bc2:	53 83       	std	Z+3, r21	; 0x03
    5bc4:	64 83       	std	Z+4, r22	; 0x04
    5bc6:	75 83       	std	Z+5, r23	; 0x05
    5bc8:	86 83       	std	Z+6, r24	; 0x06
    5bca:	97 83       	std	Z+7, r25	; 0x07
		while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5bcc:	7f 01       	movw	r14, r30
    5bce:	19 c0       	rjmp	.+50     	; 0x5c02 <mv_queue_move_buffer+0x1d0>
			mv.ticks_per_step >>= 1;
    5bd0:	8e 2f       	mov	r24, r30
    5bd2:	01 e0       	ldi	r16, 0x01	; 1
    5bd4:	0e 94 48 36 	call	0x6c90	; 0x6c90 <__lshrdi3>
    5bd8:	20 93 d8 21 	sts	0x21D8, r18
    5bdc:	f7 01       	movw	r30, r14
    5bde:	31 83       	std	Z+1, r19	; 0x01
    5be0:	42 83       	std	Z+2, r20	; 0x02
    5be2:	53 83       	std	Z+3, r21	; 0x03
    5be4:	64 83       	std	Z+4, r22	; 0x04
    5be6:	75 83       	std	Z+5, r23	; 0x05
    5be8:	86 83       	std	Z+6, r24	; 0x06
    5bea:	97 83       	std	Z+7, r25	; 0x07
			mv.p->a[X].postscale <<= 1;
    5bec:	d4 01       	movw	r26, r8
    5bee:	16 96       	adiw	r26, 0x06	; 6
    5bf0:	8d 91       	ld	r24, X+
    5bf2:	9c 91       	ld	r25, X
    5bf4:	17 97       	sbiw	r26, 0x07	; 7
    5bf6:	88 0f       	add	r24, r24
    5bf8:	99 1f       	adc	r25, r25
    5bfa:	16 96       	adiw	r26, 0x06	; 6
    5bfc:	8d 93       	st	X+, r24
    5bfe:	9c 93       	st	X, r25
    5c00:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((mv.ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[X].steps); // expensive!
		while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5c02:	20 91 d8 21 	lds	r18, 0x21D8
    5c06:	30 91 d9 21 	lds	r19, 0x21D9
    5c0a:	40 91 da 21 	lds	r20, 0x21DA
    5c0e:	50 91 db 21 	lds	r21, 0x21DB
    5c12:	60 91 dc 21 	lds	r22, 0x21DC
    5c16:	70 91 dd 21 	lds	r23, 0x21DD
    5c1a:	e0 91 de 21 	lds	r30, 0x21DE
    5c1e:	90 91 df 21 	lds	r25, 0x21DF
    5c22:	84 2f       	mov	r24, r20
    5c24:	85 2b       	or	r24, r21
    5c26:	86 2b       	or	r24, r22
    5c28:	87 2b       	or	r24, r23
    5c2a:	8e 2b       	or	r24, r30
    5c2c:	89 2b       	or	r24, r25
    5c2e:	81 f6       	brne	.-96     	; 0x5bd0 <mv_queue_move_buffer+0x19e>
			mv.ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
    5c30:	c9 01       	movw	r24, r18
    5c32:	f4 01       	movw	r30, r8
    5c34:	84 83       	std	Z+4, r24	; 0x04
    5c36:	95 83       	std	Z+5, r25	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    5c38:	81 e0       	ldi	r24, 0x01	; 1
    5c3a:	81 87       	std	Z+9, r24	; 0x09
    5c3c:	43 c1       	rjmp	.+646    	; 0x5ec4 <mv_queue_move_buffer+0x492>
	mv.p->a[Z].steps = steps_z;
	mv.microseconds = (uint64_t)microseconds;			// cast to larger base
	mv.ticks = mv.microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    5c3e:	44 24       	eor	r4, r4
    5c40:	55 24       	eor	r5, r5
				mv.p->a[i].steps = labs(mv.p->a[i].steps);

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
    5c42:	18 ed       	ldi	r17, 0xD8	; 216
    5c44:	21 2e       	mov	r2, r17
    5c46:	11 e2       	ldi	r17, 0x21	; 33
    5c48:	31 2e       	mov	r3, r17
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    5c4a:	40 91 ea 21 	lds	r20, 0x21EA
    5c4e:	50 91 eb 21 	lds	r21, 0x21EB
    5c52:	4a 86       	std	Y+10, r4	; 0x0a
    5c54:	5b 86       	std	Y+11, r5	; 0x0b
    5c56:	c2 01       	movw	r24, r4
    5c58:	f2 01       	movw	r30, r4
    5c5a:	b3 e0       	ldi	r27, 0x03	; 3
    5c5c:	ee 0f       	add	r30, r30
    5c5e:	ff 1f       	adc	r31, r31
    5c60:	ba 95       	dec	r27
    5c62:	e1 f7       	brne	.-8      	; 0x5c5c <mv_queue_move_buffer+0x22a>
    5c64:	88 0f       	add	r24, r24
    5c66:	99 1f       	adc	r25, r25
    5c68:	e8 0f       	add	r30, r24
    5c6a:	f9 1f       	adc	r31, r25
    5c6c:	e4 0f       	add	r30, r20
    5c6e:	f5 1f       	adc	r31, r21
    5c70:	80 81       	ld	r24, Z
    5c72:	91 81       	ldd	r25, Z+1	; 0x01
    5c74:	a2 81       	ldd	r26, Z+2	; 0x02
    5c76:	b3 81       	ldd	r27, Z+3	; 0x03
    5c78:	00 97       	sbiw	r24, 0x00	; 0
    5c7a:	a1 05       	cpc	r26, r1
    5c7c:	b1 05       	cpc	r27, r1
    5c7e:	09 f4       	brne	.+2      	; 0x5c82 <mv_queue_move_buffer+0x250>
    5c80:	19 c1       	rjmp	.+562    	; 0x5eb4 <mv_queue_move_buffer+0x482>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    5c82:	b7 ff       	sbrs	r27, 7
    5c84:	12 c0       	rjmp	.+36     	; 0x5caa <mv_queue_move_buffer+0x278>
    5c86:	c2 01       	movw	r24, r4
    5c88:	92 01       	movw	r18, r4
    5c8a:	f3 e0       	ldi	r31, 0x03	; 3
    5c8c:	22 0f       	add	r18, r18
    5c8e:	33 1f       	adc	r19, r19
    5c90:	fa 95       	dec	r31
    5c92:	e1 f7       	brne	.-8      	; 0x5c8c <mv_queue_move_buffer+0x25a>
    5c94:	88 0f       	add	r24, r24
    5c96:	99 1f       	adc	r25, r25
    5c98:	28 0f       	add	r18, r24
    5c9a:	39 1f       	adc	r19, r25
    5c9c:	42 0f       	add	r20, r18
    5c9e:	53 1f       	adc	r21, r19
    5ca0:	81 e0       	ldi	r24, 0x01	; 1
    5ca2:	da 01       	movw	r26, r20
    5ca4:	18 96       	adiw	r26, 0x08	; 8
    5ca6:	8c 93       	st	X, r24
    5ca8:	0f c0       	rjmp	.+30     	; 0x5cc8 <mv_queue_move_buffer+0x296>
    5caa:	c2 01       	movw	r24, r4
    5cac:	92 01       	movw	r18, r4
    5cae:	73 e0       	ldi	r23, 0x03	; 3
    5cb0:	22 0f       	add	r18, r18
    5cb2:	33 1f       	adc	r19, r19
    5cb4:	7a 95       	dec	r23
    5cb6:	e1 f7       	brne	.-8      	; 0x5cb0 <mv_queue_move_buffer+0x27e>
    5cb8:	88 0f       	add	r24, r24
    5cba:	99 1f       	adc	r25, r25
    5cbc:	28 0f       	add	r18, r24
    5cbe:	39 1f       	adc	r19, r25
    5cc0:	42 0f       	add	r20, r18
    5cc2:	53 1f       	adc	r21, r19
    5cc4:	fa 01       	movw	r30, r20
    5cc6:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    5cc8:	e0 91 ea 21 	lds	r30, 0x21EA
    5ccc:	f0 91 eb 21 	lds	r31, 0x21EB
    5cd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    5cd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    5cd4:	ac 01       	movw	r20, r24
    5cd6:	03 e0       	ldi	r16, 0x03	; 3
    5cd8:	44 0f       	add	r20, r20
    5cda:	55 1f       	adc	r21, r21
    5cdc:	0a 95       	dec	r16
    5cde:	e1 f7       	brne	.-8      	; 0x5cd8 <mv_queue_move_buffer+0x2a6>
    5ce0:	88 0f       	add	r24, r24
    5ce2:	99 1f       	adc	r25, r25
    5ce4:	48 0f       	add	r20, r24
    5ce6:	59 1f       	adc	r21, r25
    5ce8:	4e 0f       	add	r20, r30
    5cea:	5f 1f       	adc	r21, r31
    5cec:	8a 85       	ldd	r24, Y+10	; 0x0a
    5cee:	9b 85       	ldd	r25, Y+11	; 0x0b
    5cf0:	9c 01       	movw	r18, r24
    5cf2:	b3 e0       	ldi	r27, 0x03	; 3
    5cf4:	22 0f       	add	r18, r18
    5cf6:	33 1f       	adc	r19, r19
    5cf8:	ba 95       	dec	r27
    5cfa:	e1 f7       	brne	.-8      	; 0x5cf4 <mv_queue_move_buffer+0x2c2>
    5cfc:	88 0f       	add	r24, r24
    5cfe:	99 1f       	adc	r25, r25
    5d00:	28 0f       	add	r18, r24
    5d02:	39 1f       	adc	r19, r25
    5d04:	e2 0f       	add	r30, r18
    5d06:	f3 1f       	adc	r31, r19
    5d08:	80 81       	ld	r24, Z
    5d0a:	91 81       	ldd	r25, Z+1	; 0x01
    5d0c:	a2 81       	ldd	r26, Z+2	; 0x02
    5d0e:	b3 81       	ldd	r27, Z+3	; 0x03
    5d10:	b7 ff       	sbrs	r27, 7
    5d12:	07 c0       	rjmp	.+14     	; 0x5d22 <mv_queue_move_buffer+0x2f0>
    5d14:	b0 95       	com	r27
    5d16:	a0 95       	com	r26
    5d18:	90 95       	com	r25
    5d1a:	81 95       	neg	r24
    5d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d1e:	af 4f       	sbci	r26, 0xFF	; 255
    5d20:	bf 4f       	sbci	r27, 0xFF	; 255
    5d22:	fa 01       	movw	r30, r20
    5d24:	80 83       	st	Z, r24
    5d26:	91 83       	std	Z+1, r25	; 0x01
    5d28:	a2 83       	std	Z+2, r26	; 0x02
    5d2a:	b3 83       	std	Z+3, r27	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    5d2c:	a0 91 ea 21 	lds	r26, 0x21EA
    5d30:	b0 91 eb 21 	lds	r27, 0x21EB
    5d34:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d36:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d38:	fc 01       	movw	r30, r24
    5d3a:	73 e0       	ldi	r23, 0x03	; 3
    5d3c:	ee 0f       	add	r30, r30
    5d3e:	ff 1f       	adc	r31, r31
    5d40:	7a 95       	dec	r23
    5d42:	e1 f7       	brne	.-8      	; 0x5d3c <mv_queue_move_buffer+0x30a>
    5d44:	88 0f       	add	r24, r24
    5d46:	99 1f       	adc	r25, r25
    5d48:	e8 0f       	add	r30, r24
    5d4a:	f9 1f       	adc	r31, r25
    5d4c:	ea 0f       	add	r30, r26
    5d4e:	fb 1f       	adc	r31, r27
    5d50:	81 e0       	ldi	r24, 0x01	; 1
    5d52:	90 e0       	ldi	r25, 0x00	; 0
    5d54:	86 83       	std	Z+6, r24	; 0x06
    5d56:	97 83       	std	Z+7, r25	; 0x07
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
    5d58:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d5c:	9c 01       	movw	r18, r24
    5d5e:	53 e0       	ldi	r21, 0x03	; 3
    5d60:	22 0f       	add	r18, r18
    5d62:	33 1f       	adc	r19, r19
    5d64:	5a 95       	dec	r21
    5d66:	e1 f7       	brne	.-8      	; 0x5d60 <mv_queue_move_buffer+0x32e>
    5d68:	88 0f       	add	r24, r24
    5d6a:	99 1f       	adc	r25, r25
    5d6c:	28 0f       	add	r18, r24
    5d6e:	39 1f       	adc	r19, r25
    5d70:	a2 0f       	add	r26, r18
    5d72:	b3 1f       	adc	r27, r19
    5d74:	ed 90       	ld	r14, X+
    5d76:	fd 90       	ld	r15, X+
    5d78:	0d 91       	ld	r16, X+
    5d7a:	1c 91       	ld	r17, X
    5d7c:	37 01       	movw	r6, r14
    5d7e:	48 01       	movw	r8, r16
    5d80:	99 0c       	add	r9, r9
    5d82:	66 08       	sbc	r6, r6
    5d84:	76 2c       	mov	r7, r6
    5d86:	43 01       	movw	r8, r6
    5d88:	20 91 d0 21 	lds	r18, 0x21D0
    5d8c:	30 91 d1 21 	lds	r19, 0x21D1
    5d90:	40 91 d2 21 	lds	r20, 0x21D2
    5d94:	50 91 d3 21 	lds	r21, 0x21D3
    5d98:	60 91 d4 21 	lds	r22, 0x21D4
    5d9c:	70 91 d5 21 	lds	r23, 0x21D5
    5da0:	80 91 d6 21 	lds	r24, 0x21D6
    5da4:	90 91 d7 21 	lds	r25, 0x21D7
    5da8:	57 01       	movw	r10, r14
    5daa:	68 01       	movw	r12, r16
    5dac:	e6 2c       	mov	r14, r6
    5dae:	f6 2c       	mov	r15, r6
    5db0:	06 2d       	mov	r16, r6
    5db2:	16 2d       	mov	r17, r6
    5db4:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <__udivdi3>
    5db8:	20 93 d8 21 	sts	0x21D8, r18
    5dbc:	d1 01       	movw	r26, r2
    5dbe:	11 96       	adiw	r26, 0x01	; 1
    5dc0:	3c 93       	st	X, r19
    5dc2:	11 97       	sbiw	r26, 0x01	; 1
    5dc4:	12 96       	adiw	r26, 0x02	; 2
    5dc6:	4c 93       	st	X, r20
    5dc8:	12 97       	sbiw	r26, 0x02	; 2
    5dca:	13 96       	adiw	r26, 0x03	; 3
    5dcc:	5c 93       	st	X, r21
    5dce:	13 97       	sbiw	r26, 0x03	; 3
    5dd0:	14 96       	adiw	r26, 0x04	; 4
    5dd2:	6c 93       	st	X, r22
    5dd4:	14 97       	sbiw	r26, 0x04	; 4
    5dd6:	15 96       	adiw	r26, 0x05	; 5
    5dd8:	7c 93       	st	X, r23
    5dda:	15 97       	sbiw	r26, 0x05	; 5
    5ddc:	16 96       	adiw	r26, 0x06	; 6
    5dde:	8c 93       	st	X, r24
    5de0:	16 97       	sbiw	r26, 0x06	; 6
    5de2:	17 96       	adiw	r26, 0x07	; 7
    5de4:	9c 93       	st	X, r25
    5de6:	38 c0       	rjmp	.+112    	; 0x5e58 <mv_queue_move_buffer+0x426>
				while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
					mv.ticks_per_step >>= 1;
    5de8:	9d 01       	movw	r18, r26
    5dea:	8e 2f       	mov	r24, r30
    5dec:	01 e0       	ldi	r16, 0x01	; 1
    5dee:	0e 94 48 36 	call	0x6c90	; 0x6c90 <__lshrdi3>
    5df2:	20 93 d8 21 	sts	0x21D8, r18
    5df6:	f1 01       	movw	r30, r2
    5df8:	31 83       	std	Z+1, r19	; 0x01
    5dfa:	42 83       	std	Z+2, r20	; 0x02
    5dfc:	53 83       	std	Z+3, r21	; 0x03
    5dfe:	64 83       	std	Z+4, r22	; 0x04
    5e00:	75 83       	std	Z+5, r23	; 0x05
    5e02:	86 83       	std	Z+6, r24	; 0x06
    5e04:	97 83       	std	Z+7, r25	; 0x07
					mv.p->a[i].postscale <<= 1;
    5e06:	40 91 ea 21 	lds	r20, 0x21EA
    5e0a:	50 91 eb 21 	lds	r21, 0x21EB
    5e0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e10:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e12:	fc 01       	movw	r30, r24
    5e14:	23 e0       	ldi	r18, 0x03	; 3
    5e16:	ee 0f       	add	r30, r30
    5e18:	ff 1f       	adc	r31, r31
    5e1a:	2a 95       	dec	r18
    5e1c:	e1 f7       	brne	.-8      	; 0x5e16 <mv_queue_move_buffer+0x3e4>
    5e1e:	88 0f       	add	r24, r24
    5e20:	99 1f       	adc	r25, r25
    5e22:	e8 0f       	add	r30, r24
    5e24:	f9 1f       	adc	r31, r25
    5e26:	e4 0f       	add	r30, r20
    5e28:	f5 1f       	adc	r31, r21
    5e2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e2e:	9c 01       	movw	r18, r24
    5e30:	13 e0       	ldi	r17, 0x03	; 3
    5e32:	22 0f       	add	r18, r18
    5e34:	33 1f       	adc	r19, r19
    5e36:	1a 95       	dec	r17
    5e38:	e1 f7       	brne	.-8      	; 0x5e32 <mv_queue_move_buffer+0x400>
    5e3a:	88 0f       	add	r24, r24
    5e3c:	99 1f       	adc	r25, r25
    5e3e:	28 0f       	add	r18, r24
    5e40:	39 1f       	adc	r19, r25
    5e42:	42 0f       	add	r20, r18
    5e44:	53 1f       	adc	r21, r19
    5e46:	da 01       	movw	r26, r20
    5e48:	16 96       	adiw	r26, 0x06	; 6
    5e4a:	8d 91       	ld	r24, X+
    5e4c:	9c 91       	ld	r25, X
    5e4e:	17 97       	sbiw	r26, 0x07	; 7
    5e50:	88 0f       	add	r24, r24
    5e52:	99 1f       	adc	r25, r25
    5e54:	86 83       	std	Z+6, r24	; 0x06
    5e56:	97 83       	std	Z+7, r25	; 0x07

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
				while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5e58:	a0 91 d8 21 	lds	r26, 0x21D8
    5e5c:	b0 91 d9 21 	lds	r27, 0x21D9
    5e60:	40 91 da 21 	lds	r20, 0x21DA
    5e64:	50 91 db 21 	lds	r21, 0x21DB
    5e68:	60 91 dc 21 	lds	r22, 0x21DC
    5e6c:	70 91 dd 21 	lds	r23, 0x21DD
    5e70:	e0 91 de 21 	lds	r30, 0x21DE
    5e74:	90 91 df 21 	lds	r25, 0x21DF
    5e78:	84 2f       	mov	r24, r20
    5e7a:	85 2b       	or	r24, r21
    5e7c:	86 2b       	or	r24, r22
    5e7e:	87 2b       	or	r24, r23
    5e80:	8e 2b       	or	r24, r30
    5e82:	89 2b       	or	r24, r25
    5e84:	09 f0       	breq	.+2      	; 0x5e88 <mv_queue_move_buffer+0x456>
    5e86:	b0 cf       	rjmp	.-160    	; 0x5de8 <mv_queue_move_buffer+0x3b6>
					mv.ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
    5e88:	40 91 ea 21 	lds	r20, 0x21EA
    5e8c:	50 91 eb 21 	lds	r21, 0x21EB
    5e90:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e92:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e94:	9c 01       	movw	r18, r24
    5e96:	73 e0       	ldi	r23, 0x03	; 3
    5e98:	22 0f       	add	r18, r18
    5e9a:	33 1f       	adc	r19, r19
    5e9c:	7a 95       	dec	r23
    5e9e:	e1 f7       	brne	.-8      	; 0x5e98 <mv_queue_move_buffer+0x466>
    5ea0:	88 0f       	add	r24, r24
    5ea2:	99 1f       	adc	r25, r25
    5ea4:	28 0f       	add	r18, r24
    5ea6:	39 1f       	adc	r19, r25
    5ea8:	42 0f       	add	r20, r18
    5eaa:	53 1f       	adc	r21, r19
    5eac:	cd 01       	movw	r24, r26
    5eae:	fa 01       	movw	r30, r20
    5eb0:	84 83       	std	Z+4, r24	; 0x04
    5eb2:	95 83       	std	Z+5, r25	; 0x05
    5eb4:	08 94       	sec
    5eb6:	41 1c       	adc	r4, r1
    5eb8:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    5eba:	f3 e0       	ldi	r31, 0x03	; 3
    5ebc:	4f 16       	cp	r4, r31
    5ebe:	51 04       	cpc	r5, r1
    5ec0:	09 f0       	breq	.+2      	; 0x5ec4 <mv_queue_move_buffer+0x492>
    5ec2:	c3 ce       	rjmp	.-634    	; 0x5c4a <mv_queue_move_buffer+0x218>
				}
				mv.p->a[i].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    5ec4:	89 81       	ldd	r24, Y+1	; 0x01
    5ec6:	80 93 e8 21 	sts	0x21E8, r24
	st_execute_move();
    5eca:	0e 94 57 25 	call	0x4aae	; 0x4aae <st_execute_move>
    5ece:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    5ed0:	2b 96       	adiw	r28, 0x0b	; 11
    5ed2:	cd bf       	out	0x3d, r28	; 61
    5ed4:	de bf       	out	0x3e, r29	; 62
    5ed6:	cf 91       	pop	r28
    5ed8:	df 91       	pop	r29
    5eda:	1f 91       	pop	r17
    5edc:	0f 91       	pop	r16
    5ede:	ff 90       	pop	r15
    5ee0:	ef 90       	pop	r14
    5ee2:	df 90       	pop	r13
    5ee4:	cf 90       	pop	r12
    5ee6:	bf 90       	pop	r11
    5ee8:	af 90       	pop	r10
    5eea:	9f 90       	pop	r9
    5eec:	8f 90       	pop	r8
    5eee:	7f 90       	pop	r7
    5ef0:	6f 90       	pop	r6
    5ef2:	5f 90       	pop	r5
    5ef4:	4f 90       	pop	r4
    5ef6:	3f 90       	pop	r3
    5ef8:	2f 90       	pop	r2
    5efa:	08 95       	ret

00005efc <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    5efc:	a7 e5       	ldi	r26, 0x57	; 87
    5efe:	b2 e2       	ldi	r27, 0x22	; 34
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5f00:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5f02:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5f04:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5f06:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5f08:	ed 91       	ld	r30, X+
    5f0a:	fc 91       	ld	r31, X
    5f0c:	11 97       	sbiw	r26, 0x01	; 1
    5f0e:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5f10:	ed 91       	ld	r30, X+
    5f12:	fc 91       	ld	r31, X
    5f14:	11 97       	sbiw	r26, 0x01	; 1
    5f16:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5f18:	ed 91       	ld	r30, X+
    5f1a:	fc 91       	ld	r31, X
    5f1c:	11 97       	sbiw	r26, 0x01	; 1
    5f1e:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    5f20:	ed 91       	ld	r30, X+
    5f22:	fc 91       	ld	r31, X
    5f24:	11 97       	sbiw	r26, 0x01	; 1
    5f26:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    5f28:	ed 91       	ld	r30, X+
    5f2a:	fc 91       	ld	r31, X
    5f2c:	11 97       	sbiw	r26, 0x01	; 1
    5f2e:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    5f30:	ed 91       	ld	r30, X+
    5f32:	fc 91       	ld	r31, X
    5f34:	11 97       	sbiw	r26, 0x01	; 1
    5f36:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5f38:	ed 91       	ld	r30, X+
    5f3a:	fc 91       	ld	r31, X
    5f3c:	11 97       	sbiw	r26, 0x01	; 1
    5f3e:	31 87       	std	Z+9, r19	; 0x09
    5f40:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    5f42:	42 e2       	ldi	r20, 0x22	; 34
    5f44:	a7 39       	cpi	r26, 0x97	; 151
    5f46:	b4 07       	cpc	r27, r20
    5f48:	f9 f6       	brne	.-66     	; 0x5f08 <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    5f4a:	08 95       	ret

00005f4c <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    5f4c:	1f 92       	push	r1
    5f4e:	0f 92       	push	r0
    5f50:	0f b6       	in	r0, 0x3f	; 63
    5f52:	0f 92       	push	r0
    5f54:	11 24       	eor	r1, r1
    5f56:	0f 90       	pop	r0
    5f58:	0f be       	out	0x3f, r0	; 63
    5f5a:	0f 90       	pop	r0
    5f5c:	1f 90       	pop	r1
    5f5e:	18 95       	reti

00005f60 <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    5f60:	1f 92       	push	r1
    5f62:	0f 92       	push	r0
    5f64:	0f b6       	in	r0, 0x3f	; 63
    5f66:	0f 92       	push	r0
    5f68:	11 24       	eor	r1, r1
    5f6a:	0f 90       	pop	r0
    5f6c:	0f be       	out	0x3f, r0	; 63
    5f6e:	0f 90       	pop	r0
    5f70:	1f 90       	pop	r1
    5f72:	18 95       	reti

00005f74 <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    5f74:	1f 92       	push	r1
    5f76:	0f 92       	push	r0
    5f78:	0f b6       	in	r0, 0x3f	; 63
    5f7a:	0f 92       	push	r0
    5f7c:	11 24       	eor	r1, r1
    5f7e:	0f 90       	pop	r0
    5f80:	0f be       	out	0x3f, r0	; 63
    5f82:	0f 90       	pop	r0
    5f84:	1f 90       	pop	r1
    5f86:	18 95       	reti

00005f88 <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    5f88:	1f 92       	push	r1
    5f8a:	0f 92       	push	r0
    5f8c:	0f b6       	in	r0, 0x3f	; 63
    5f8e:	0f 92       	push	r0
    5f90:	11 24       	eor	r1, r1
    5f92:	0f 90       	pop	r0
    5f94:	0f be       	out	0x3f, r0	; 63
    5f96:	0f 90       	pop	r0
    5f98:	1f 90       	pop	r1
    5f9a:	18 95       	reti

00005f9c <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    5f9c:	1f 92       	push	r1
    5f9e:	0f 92       	push	r0
    5fa0:	0f b6       	in	r0, 0x3f	; 63
    5fa2:	0f 92       	push	r0
    5fa4:	11 24       	eor	r1, r1
    5fa6:	0f 90       	pop	r0
    5fa8:	0f be       	out	0x3f, r0	; 63
    5faa:	0f 90       	pop	r0
    5fac:	1f 90       	pop	r1
    5fae:	18 95       	reti

00005fb0 <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    5fb0:	1f 92       	push	r1
    5fb2:	0f 92       	push	r0
    5fb4:	0f b6       	in	r0, 0x3f	; 63
    5fb6:	0f 92       	push	r0
    5fb8:	11 24       	eor	r1, r1
    5fba:	0f 90       	pop	r0
    5fbc:	0f be       	out	0x3f, r0	; 63
    5fbe:	0f 90       	pop	r0
    5fc0:	1f 90       	pop	r1
    5fc2:	18 95       	reti

00005fc4 <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    5fc4:	1f 92       	push	r1
    5fc6:	0f 92       	push	r0
    5fc8:	0f b6       	in	r0, 0x3f	; 63
    5fca:	0f 92       	push	r0
    5fcc:	11 24       	eor	r1, r1
    5fce:	0f 90       	pop	r0
    5fd0:	0f be       	out	0x3f, r0	; 63
    5fd2:	0f 90       	pop	r0
    5fd4:	1f 90       	pop	r1
    5fd6:	18 95       	reti

00005fd8 <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    5fd8:	1f 92       	push	r1
    5fda:	0f 92       	push	r0
    5fdc:	0f b6       	in	r0, 0x3f	; 63
    5fde:	0f 92       	push	r0
    5fe0:	11 24       	eor	r1, r1
    5fe2:	0f 90       	pop	r0
    5fe4:	0f be       	out	0x3f, r0	; 63
    5fe6:	0f 90       	pop	r0
    5fe8:	1f 90       	pop	r1
    5fea:	18 95       	reti

00005fec <signal_etx>:
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx() {			// ^c
{
	tg_reset_source();					// return control to standard device
    5fec:	0e 94 92 2b 	call	0x5724	; 0x5724 <tg_reset_source>
	mc_motion_stop();					// stop computing and generating motions
    5ff0:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    5ff4:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <mv_flush>
	st_stop_steppers();					// stop the steppers
    5ff8:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <st_stop_steppers>
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
*/
}
    5ffc:	08 95       	ret

00005ffe <xio_set_baud_usart>:
	dx->port->OUTCLR = outclr;
	dx->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
    5ffe:	cf 93       	push	r28
    6000:	df 93       	push	r29
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    6002:	90 e0       	ldi	r25, 0x00	; 0
    6004:	27 e1       	ldi	r18, 0x17	; 23
    6006:	30 e0       	ldi	r19, 0x00	; 0
    6008:	82 9f       	mul	r24, r18
    600a:	d0 01       	movw	r26, r0
    600c:	83 9f       	mul	r24, r19
    600e:	b0 0d       	add	r27, r0
    6010:	92 9f       	mul	r25, r18
    6012:	b0 0d       	add	r27, r0
    6014:	11 24       	eor	r1, r1
    6016:	a7 52       	subi	r26, 0x27	; 39
    6018:	bc 4d       	sbci	r27, 0xDC	; 220
    601a:	51 96       	adiw	r26, 0x11	; 17
    601c:	ed 91       	ld	r30, X+
    601e:	fc 91       	ld	r31, X
    6020:	52 97       	sbiw	r26, 0x12	; 18
    6022:	87 81       	ldd	r24, Z+7	; 0x07
    6024:	90 85       	ldd	r25, Z+8	; 0x08
    6026:	26 2f       	mov	r18, r22
    6028:	30 e0       	ldi	r19, 0x00	; 0
    602a:	f9 01       	movw	r30, r18
    602c:	e0 5a       	subi	r30, 0xA0	; 160
    602e:	f4 4e       	sbci	r31, 0xE4	; 228
    6030:	e4 91       	lpm	r30, Z+
    6032:	ec 01       	movw	r28, r24
    6034:	ee 83       	std	Y+6, r30	; 0x06
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    6036:	51 96       	adiw	r26, 0x11	; 17
    6038:	ed 91       	ld	r30, X+
    603a:	fc 91       	ld	r31, X
    603c:	52 97       	sbiw	r26, 0x12	; 18
    603e:	a7 81       	ldd	r26, Z+7	; 0x07
    6040:	b0 85       	ldd	r27, Z+8	; 0x08
    6042:	25 59       	subi	r18, 0x95	; 149
    6044:	34 4e       	sbci	r19, 0xE4	; 228
    6046:	f9 01       	movw	r30, r18
    6048:	64 91       	lpm	r22, Z+
    604a:	17 96       	adiw	r26, 0x07	; 7
    604c:	6c 93       	st	X, r22
}
    604e:	df 91       	pop	r29
    6050:	cf 91       	pop	r28
    6052:	08 95       	ret

00006054 <xio_putc_usart>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_usart(const uint8_t dev, const char c, FILE *stream)
{
    6054:	cf 93       	push	r28
    6056:	df 93       	push	r29
    6058:	78 2f       	mov	r23, r24
    605a:	da 01       	movw	r26, r20
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
    605c:	87 e1       	ldi	r24, 0x17	; 23
    605e:	78 9f       	mul	r23, r24
    6060:	a0 01       	movw	r20, r0
    6062:	11 24       	eor	r1, r1
    6064:	47 52       	subi	r20, 0x27	; 39
    6066:	5c 4d       	sbci	r21, 0xDC	; 220
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6068:	27 2f       	mov	r18, r23
    606a:	30 e0       	ldi	r19, 0x00	; 0
    606c:	87 e1       	ldi	r24, 0x17	; 23
    606e:	90 e0       	ldi	r25, 0x00	; 0
    6070:	28 9f       	mul	r18, r24
    6072:	f0 01       	movw	r30, r0
    6074:	29 9f       	mul	r18, r25
    6076:	f0 0d       	add	r31, r0
    6078:	38 9f       	mul	r19, r24
    607a:	f0 0d       	add	r31, r0
    607c:	11 24       	eor	r1, r1
    607e:	e7 52       	subi	r30, 0x27	; 39
    6080:	fc 4d       	sbci	r31, 0xDC	; 220
    6082:	c1 89       	ldd	r28, Z+17	; 0x11
    6084:	d2 89       	ldd	r29, Z+18	; 0x12

	if ((dx->next_tx_buf_head = (dx->tx_buf_head)-1) == 0) { // adv. head & wrap
    6086:	8d 81       	ldd	r24, Y+5	; 0x05
    6088:	81 50       	subi	r24, 0x01	; 1
    608a:	8e 83       	std	Y+6, r24	; 0x06
    608c:	88 23       	and	r24, r24
    608e:	11 f4       	brne	.+4      	; 0x6094 <xio_putc_usart+0x40>
		dx->next_tx_buf_head = TX_BUFFER_SIZE-1;	 // -1 avoids the off-by-one
    6090:	81 e1       	ldi	r24, 0x11	; 17
    6092:	8e 83       	std	Y+6, r24	; 0x06
	}
	while(dx->next_tx_buf_head == dx->tx_buf_tail) { // buf full. sleep or ret
    6094:	9e 81       	ldd	r25, Y+6	; 0x06
    6096:	16 c0       	rjmp	.+44     	; 0x60c4 <xio_putc_usart+0x70>
		if (BLOCKING(d->flags)) {
    6098:	fa 01       	movw	r30, r20
    609a:	80 81       	ld	r24, Z
    609c:	82 ff       	sbrs	r24, 2
    609e:	0c c0       	rjmp	.+24     	; 0x60b8 <xio_putc_usart+0x64>
			sleep_mode();
    60a0:	80 91 48 00 	lds	r24, 0x0048
    60a4:	81 60       	ori	r24, 0x01	; 1
    60a6:	80 93 48 00 	sts	0x0048, r24
    60aa:	88 95       	sleep
    60ac:	80 91 48 00 	lds	r24, 0x0048
    60b0:	8e 7f       	andi	r24, 0xFE	; 254
    60b2:	80 93 48 00 	sts	0x0048, r24
    60b6:	06 c0       	rjmp	.+12     	; 0x60c4 <xio_putc_usart+0x70>
		} else {
			d->sig = XIO_SIG_EAGAIN;
    60b8:	81 e0       	ldi	r24, 0x01	; 1
    60ba:	ea 01       	movw	r28, r20
    60bc:	8b 83       	std	Y+3, r24	; 0x03
    60be:	2f ef       	ldi	r18, 0xFF	; 255
    60c0:	3f ef       	ldi	r19, 0xFF	; 255
    60c2:	52 c0       	rjmp	.+164    	; 0x6168 <xio_putc_usart+0x114>
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer

	if ((dx->next_tx_buf_head = (dx->tx_buf_head)-1) == 0) { // adv. head & wrap
		dx->next_tx_buf_head = TX_BUFFER_SIZE-1;	 // -1 avoids the off-by-one
	}
	while(dx->next_tx_buf_head == dx->tx_buf_tail) { // buf full. sleep or ret
    60c4:	8c 81       	ldd	r24, Y+4	; 0x04
    60c6:	98 17       	cp	r25, r24
    60c8:	39 f3       	breq	.-50     	; 0x6098 <xio_putc_usart+0x44>
			d->sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	dx->tx_buf_head = dx->next_tx_buf_head;			// accept next buffer head
    60ca:	9d 83       	std	Y+5, r25	; 0x05
	dx->tx_buf[dx->tx_buf_head] = c;				// ...write char to buffer
    60cc:	8d 81       	ldd	r24, Y+5	; 0x05
    60ce:	fe 01       	movw	r30, r28
    60d0:	e8 0f       	add	r30, r24
    60d2:	f1 1d       	adc	r31, r1
    60d4:	65 8f       	std	Z+29, r22	; 0x1d

	if (CRLF(d->flags) && (c == '\n')) {			// detect LF & add CR
    60d6:	fa 01       	movw	r30, r20
    60d8:	20 81       	ld	r18, Z
    60da:	31 81       	ldd	r19, Z+1	; 0x01
    60dc:	25 ff       	sbrs	r18, 5
    60de:	0a c0       	rjmp	.+20     	; 0x60f4 <xio_putc_usart+0xa0>
    60e0:	6a 30       	cpi	r22, 0x0A	; 10
    60e2:	41 f4       	brne	.+16     	; 0x60f4 <xio_putc_usart+0xa0>
		return d->dev_putc('\r', stream);			// recurse
    60e4:	03 84       	ldd	r0, Z+11	; 0x0b
    60e6:	f4 85       	ldd	r31, Z+12	; 0x0c
    60e8:	e0 2d       	mov	r30, r0
    60ea:	8d e0       	ldi	r24, 0x0D	; 13
    60ec:	bd 01       	movw	r22, r26
    60ee:	19 95       	eicall
    60f0:	9c 01       	movw	r18, r24
    60f2:	3a c0       	rjmp	.+116    	; 0x6168 <xio_putc_usart+0x114>
	}

	// dequeue the buffer if DATA register is ready
	if (dx->usart->STATUS & 0x20) {
    60f4:	ef 81       	ldd	r30, Y+7	; 0x07
    60f6:	f8 85       	ldd	r31, Y+8	; 0x08
    60f8:	81 81       	ldd	r24, Z+1	; 0x01
    60fa:	85 ff       	sbrs	r24, 5
    60fc:	24 c0       	rjmp	.+72     	; 0x6146 <xio_putc_usart+0xf2>
		if (dx->tx_buf_head == dx->tx_buf_tail) {// buf might be empty if IRQ got it
    60fe:	9d 81       	ldd	r25, Y+5	; 0x05
    6100:	8c 81       	ldd	r24, Y+4	; 0x04
    6102:	98 17       	cp	r25, r24
    6104:	79 f1       	breq	.+94     	; 0x6164 <xio_putc_usart+0x110>
			return (XIO_OK);
		}
		d->flags |= XIO_FLAG_TX_MUTEX_bm;			// mutual exclusion from ISR
    6106:	38 60       	ori	r19, 0x08	; 8
    6108:	fa 01       	movw	r30, r20
    610a:	20 83       	st	Z, r18
    610c:	31 83       	std	Z+1, r19	; 0x01
		if (--(dx->tx_buf_tail) == 0) {				// advance tail & wrap if needed
    610e:	8c 81       	ldd	r24, Y+4	; 0x04
    6110:	81 50       	subi	r24, 0x01	; 1
    6112:	8c 83       	std	Y+4, r24	; 0x04
    6114:	8c 81       	ldd	r24, Y+4	; 0x04
    6116:	88 23       	and	r24, r24
    6118:	11 f4       	brne	.+4      	; 0x611e <xio_putc_usart+0xca>
			dx->tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoid off-by-one err (OBOE)
    611a:	81 e1       	ldi	r24, 0x11	; 17
    611c:	8c 83       	std	Y+4, r24	; 0x04
		}
		if (dev == XIO_DEV_RS485) {						// HACK
    611e:	77 23       	and	r23, r23
    6120:	21 f4       	brne	.+8      	; 0x612a <xio_putc_usart+0xd6>
			dx->port->OUTSET = (RS485_DE_bm | RS485_RE_bm);	// enable DE, disable RE
    6122:	e9 85       	ldd	r30, Y+9	; 0x09
    6124:	fa 85       	ldd	r31, Y+10	; 0x0a
    6126:	80 e3       	ldi	r24, 0x30	; 48
    6128:	85 83       	std	Z+5, r24	; 0x05
		}
		dx->usart->DATA = dx->tx_buf[dx->tx_buf_tail];// write to TX DATA reg
    612a:	af 81       	ldd	r26, Y+7	; 0x07
    612c:	b8 85       	ldd	r27, Y+8	; 0x08
    612e:	8c 81       	ldd	r24, Y+4	; 0x04
    6130:	fe 01       	movw	r30, r28
    6132:	e8 0f       	add	r30, r24
    6134:	f1 1d       	adc	r31, r1
    6136:	85 8d       	ldd	r24, Z+29	; 0x1d
    6138:	8c 93       	st	X, r24
		d->flags &= ~XIO_FLAG_TX_MUTEX_bm;			// release mutual exclusion lock
    613a:	fa 01       	movw	r30, r20
    613c:	80 81       	ld	r24, Z
    613e:	91 81       	ldd	r25, Z+1	; 0x01
    6140:	97 7f       	andi	r25, 0xF7	; 247
    6142:	80 83       	st	Z, r24
    6144:	91 83       	std	Z+1, r25	; 0x01
    6146:	ef 81       	ldd	r30, Y+7	; 0x07
    6148:	f8 85       	ldd	r31, Y+8	; 0x08
	}
	// enable interrupts regardless
	if (dev == XIO_DEV_RS485) {						// HACK
    614a:	77 23       	and	r23, r23
    614c:	11 f4       	brne	.+4      	; 0x6152 <xio_putc_usart+0xfe>
		dx->usart->CTRLA = CTRLA_RXON_TXON_TXCON;	// doesn't work if you just |= it
    614e:	85 e2       	ldi	r24, 0x25	; 37
    6150:	01 c0       	rjmp	.+2      	; 0x6154 <xio_putc_usart+0x100>
	} else {
		dx->usart->CTRLA = CTRLA_RXON_TXON;			// doesn't work if you just |= it
    6152:	81 e2       	ldi	r24, 0x21	; 33
    6154:	83 83       	std	Z+3, r24	; 0x03
	}
	PMIC_EnableLowLevel(); 							// enable USART TX interrupts
    6156:	80 91 a2 00 	lds	r24, 0x00A2
    615a:	81 60       	ori	r24, 0x01	; 1
    615c:	e0 ea       	ldi	r30, 0xA0	; 160
    615e:	f0 e0       	ldi	r31, 0x00	; 0
    6160:	82 83       	std	Z+2, r24	; 0x02
	sei();											// enable global interrupts
    6162:	78 94       	sei
    6164:	20 e0       	ldi	r18, 0x00	; 0
    6166:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_OK);
}
    6168:	c9 01       	movw	r24, r18
    616a:	df 91       	pop	r29
    616c:	cf 91       	pop	r28
    616e:	08 95       	ret

00006170 <xio_getc_usart>:
 *		  character helper routines. See them for behaviors
 */

int xio_getc_usart(const uint8_t dev, FILE *stream)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
    6170:	97 e1       	ldi	r25, 0x17	; 23
    6172:	89 9f       	mul	r24, r25
    6174:	d0 01       	movw	r26, r0
    6176:	11 24       	eor	r1, r1
    6178:	a7 52       	subi	r26, 0x27	; 39
    617a:	bc 4d       	sbci	r27, 0xDC	; 220
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    617c:	48 2f       	mov	r20, r24
    617e:	50 e0       	ldi	r21, 0x00	; 0
    6180:	27 e1       	ldi	r18, 0x17	; 23
    6182:	30 e0       	ldi	r19, 0x00	; 0
    6184:	42 9f       	mul	r20, r18
    6186:	f0 01       	movw	r30, r0
    6188:	43 9f       	mul	r20, r19
    618a:	f0 0d       	add	r31, r0
    618c:	52 9f       	mul	r21, r18
    618e:	f0 0d       	add	r31, r0
    6190:	11 24       	eor	r1, r1
    6192:	e7 52       	subi	r30, 0x27	; 39
    6194:	fc 4d       	sbci	r31, 0xDC	; 220
    6196:	01 88       	ldd	r0, Z+17	; 0x11
    6198:	f2 89       	ldd	r31, Z+18	; 0x12
    619a:	e0 2d       	mov	r30, r0

	gdev = dev;										// set dev number global var
    619c:	80 93 46 22 	sts	0x2246, r24
    61a0:	15 c0       	rjmp	.+42     	; 0x61cc <xio_getc_usart+0x5c>

	while (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(d->flags)) {
    61a2:	8c 91       	ld	r24, X
    61a4:	82 ff       	sbrs	r24, 2
    61a6:	0c c0       	rjmp	.+24     	; 0x61c0 <xio_getc_usart+0x50>
			sleep_mode();
    61a8:	80 91 48 00 	lds	r24, 0x0048
    61ac:	81 60       	ori	r24, 0x01	; 1
    61ae:	80 93 48 00 	sts	0x0048, r24
    61b2:	88 95       	sleep
    61b4:	80 91 48 00 	lds	r24, 0x0048
    61b8:	8e 7f       	andi	r24, 0xFE	; 254
    61ba:	80 93 48 00 	sts	0x0048, r24
    61be:	06 c0       	rjmp	.+12     	; 0x61cc <xio_getc_usart+0x5c>
		} else {
			d->sig = XIO_SIG_EAGAIN;
    61c0:	81 e0       	ldi	r24, 0x01	; 1
    61c2:	13 96       	adiw	r26, 0x03	; 3
    61c4:	8c 93       	st	X, r24
    61c6:	2f ef       	ldi	r18, 0xFF	; 255
    61c8:	3f ef       	ldi	r19, 0xFF	; 255
    61ca:	1e c0       	rjmp	.+60     	; 0x6208 <xio_getc_usart+0x98>
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer

	gdev = dev;										// set dev number global var

	while (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
    61cc:	93 81       	ldd	r25, Z+3	; 0x03
    61ce:	82 81       	ldd	r24, Z+2	; 0x02
    61d0:	98 17       	cp	r25, r24
    61d2:	39 f3       	breq	.-50     	; 0x61a2 <xio_getc_usart+0x32>
		} else {
			d->sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(dx->rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
    61d4:	82 81       	ldd	r24, Z+2	; 0x02
    61d6:	81 50       	subi	r24, 0x01	; 1
    61d8:	82 83       	std	Z+2, r24	; 0x02
    61da:	82 81       	ldd	r24, Z+2	; 0x02
    61dc:	88 23       	and	r24, r24
    61de:	11 f4       	brne	.+4      	; 0x61e4 <xio_getc_usart+0x74>
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    61e0:	81 e1       	ldi	r24, 0x11	; 17
    61e2:	82 83       	std	Z+2, r24	; 0x02
	}
	d->c = (dx->rx_buf[dx->rx_buf_tail] & 0x007F);// get char from RX buf & mask MSB
    61e4:	82 81       	ldd	r24, Z+2	; 0x02
    61e6:	e8 0f       	add	r30, r24
    61e8:	f1 1d       	adc	r31, r1
    61ea:	83 85       	ldd	r24, Z+11	; 0x0b
    61ec:	8f 77       	andi	r24, 0x7F	; 127
    61ee:	14 96       	adiw	r26, 0x04	; 4
    61f0:	8c 93       	st	X, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[d->c])))());
    61f2:	90 e0       	ldi	r25, 0x00	; 0
    61f4:	88 0f       	add	r24, r24
    61f6:	99 1f       	adc	r25, r25
    61f8:	8a 58       	subi	r24, 0x8A	; 138
    61fa:	93 4e       	sbci	r25, 0xE3	; 227
    61fc:	fc 01       	movw	r30, r24
    61fe:	25 91       	lpm	r18, Z+
    6200:	34 91       	lpm	r19, Z+
    6202:	f9 01       	movw	r30, r18
    6204:	19 95       	eicall
    6206:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    6208:	c9 01       	movw	r24, r18
    620a:	08 95       	ret

0000620c <_getc_char>:

// xio_getc_usart helper routines

static int _getc_char(void)
{
	if (ECHO(ds[gdev].flags)) ds[gdev].dev_putc(ds[gdev].c, stdout);
    620c:	80 91 46 22 	lds	r24, 0x2246
    6210:	90 e0       	ldi	r25, 0x00	; 0
    6212:	27 e1       	ldi	r18, 0x17	; 23
    6214:	30 e0       	ldi	r19, 0x00	; 0
    6216:	82 9f       	mul	r24, r18
    6218:	d0 01       	movw	r26, r0
    621a:	83 9f       	mul	r24, r19
    621c:	b0 0d       	add	r27, r0
    621e:	92 9f       	mul	r25, r18
    6220:	b0 0d       	add	r27, r0
    6222:	11 24       	eor	r1, r1
    6224:	a7 52       	subi	r26, 0x27	; 39
    6226:	bc 4d       	sbci	r27, 0xDC	; 220
    6228:	8c 91       	ld	r24, X
    622a:	84 ff       	sbrs	r24, 4
    622c:	0b c0       	rjmp	.+22     	; 0x6244 <_getc_char+0x38>
    622e:	60 91 1a 25 	lds	r22, 0x251A
    6232:	70 91 1b 25 	lds	r23, 0x251B
    6236:	1b 96       	adiw	r26, 0x0b	; 11
    6238:	ed 91       	ld	r30, X+
    623a:	fc 91       	ld	r31, X
    623c:	1c 97       	sbiw	r26, 0x0c	; 12
    623e:	14 96       	adiw	r26, 0x04	; 4
    6240:	8c 91       	ld	r24, X
    6242:	19 95       	eicall
    6244:	80 91 46 22 	lds	r24, 0x2246
    6248:	90 e0       	ldi	r25, 0x00	; 0
    624a:	27 e1       	ldi	r18, 0x17	; 23
    624c:	30 e0       	ldi	r19, 0x00	; 0
    624e:	82 9f       	mul	r24, r18
    6250:	f0 01       	movw	r30, r0
    6252:	83 9f       	mul	r24, r19
    6254:	f0 0d       	add	r31, r0
    6256:	92 9f       	mul	r25, r18
    6258:	f0 0d       	add	r31, r0
    625a:	11 24       	eor	r1, r1
    625c:	e7 52       	subi	r30, 0x27	; 39
    625e:	fc 4d       	sbci	r31, 0xDC	; 220
	return(ds[gdev].c);
}
    6260:	84 81       	ldd	r24, Z+4	; 0x04
    6262:	90 e0       	ldi	r25, 0x00	; 0
    6264:	08 95       	ret

00006266 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(ds[gdev].flags)) ds[gdev].c = '\n';
    6266:	80 91 46 22 	lds	r24, 0x2246
    626a:	28 2f       	mov	r18, r24
    626c:	30 e0       	ldi	r19, 0x00	; 0
    626e:	87 e1       	ldi	r24, 0x17	; 23
    6270:	90 e0       	ldi	r25, 0x00	; 0
    6272:	28 9f       	mul	r18, r24
    6274:	f0 01       	movw	r30, r0
    6276:	29 9f       	mul	r18, r25
    6278:	f0 0d       	add	r31, r0
    627a:	38 9f       	mul	r19, r24
    627c:	f0 0d       	add	r31, r0
    627e:	11 24       	eor	r1, r1
    6280:	e7 52       	subi	r30, 0x27	; 39
    6282:	fc 4d       	sbci	r31, 0xDC	; 220
    6284:	80 81       	ld	r24, Z
    6286:	86 ff       	sbrs	r24, 6
    6288:	02 c0       	rjmp	.+4      	; 0x628e <_getc_NEWLINE+0x28>
    628a:	8a e0       	ldi	r24, 0x0A	; 10
    628c:	84 83       	std	Z+4, r24	; 0x04
	if (ECHO(ds[gdev].flags)) ds[gdev].dev_putc(ds[gdev].c, stdout);
    628e:	87 e1       	ldi	r24, 0x17	; 23
    6290:	90 e0       	ldi	r25, 0x00	; 0
    6292:	28 9f       	mul	r18, r24
    6294:	d0 01       	movw	r26, r0
    6296:	29 9f       	mul	r18, r25
    6298:	b0 0d       	add	r27, r0
    629a:	38 9f       	mul	r19, r24
    629c:	b0 0d       	add	r27, r0
    629e:	11 24       	eor	r1, r1
    62a0:	a7 52       	subi	r26, 0x27	; 39
    62a2:	bc 4d       	sbci	r27, 0xDC	; 220
    62a4:	8c 91       	ld	r24, X
    62a6:	84 ff       	sbrs	r24, 4
    62a8:	0b c0       	rjmp	.+22     	; 0x62c0 <_getc_NEWLINE+0x5a>
    62aa:	60 91 1a 25 	lds	r22, 0x251A
    62ae:	70 91 1b 25 	lds	r23, 0x251B
    62b2:	1b 96       	adiw	r26, 0x0b	; 11
    62b4:	ed 91       	ld	r30, X+
    62b6:	fc 91       	ld	r31, X
    62b8:	1c 97       	sbiw	r26, 0x0c	; 12
    62ba:	14 96       	adiw	r26, 0x04	; 4
    62bc:	8c 91       	ld	r24, X
    62be:	19 95       	eicall
    62c0:	80 91 46 22 	lds	r24, 0x2246
    62c4:	90 e0       	ldi	r25, 0x00	; 0
    62c6:	27 e1       	ldi	r18, 0x17	; 23
    62c8:	30 e0       	ldi	r19, 0x00	; 0
    62ca:	82 9f       	mul	r24, r18
    62cc:	f0 01       	movw	r30, r0
    62ce:	83 9f       	mul	r24, r19
    62d0:	f0 0d       	add	r31, r0
    62d2:	92 9f       	mul	r25, r18
    62d4:	f0 0d       	add	r31, r0
    62d6:	11 24       	eor	r1, r1
    62d8:	e7 52       	subi	r30, 0x27	; 39
    62da:	fc 4d       	sbci	r31, 0xDC	; 220
	return(ds[gdev].c);
}
    62dc:	84 81       	ldd	r24, Z+4	; 0x04
    62de:	90 e0       	ldi	r25, 0x00	; 0
    62e0:	08 95       	ret

000062e2 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(ds[gdev].flags)) {
    62e2:	80 91 46 22 	lds	r24, 0x2246
    62e6:	90 e0       	ldi	r25, 0x00	; 0
    62e8:	27 e1       	ldi	r18, 0x17	; 23
    62ea:	30 e0       	ldi	r19, 0x00	; 0
    62ec:	82 9f       	mul	r24, r18
    62ee:	f0 01       	movw	r30, r0
    62f0:	83 9f       	mul	r24, r19
    62f2:	f0 0d       	add	r31, r0
    62f4:	92 9f       	mul	r25, r18
    62f6:	f0 0d       	add	r31, r0
    62f8:	11 24       	eor	r1, r1
    62fa:	e7 52       	subi	r30, 0x27	; 39
    62fc:	fc 4d       	sbci	r31, 0xDC	; 220
    62fe:	80 81       	ld	r24, Z
    6300:	87 ff       	sbrs	r24, 7
    6302:	03 c0       	rjmp	.+6      	; 0x630a <_getc_SEMICOLON+0x28>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    6304:	0e 94 33 31 	call	0x6266	; 0x6266 <_getc_NEWLINE>
    6308:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    630a:	0e 94 06 31 	call	0x620c	; 0x620c <_getc_char>
}
    630e:	08 95       	ret

00006310 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	ds[gdev].sig = XIO_SIG_DELETE;
    6310:	80 91 46 22 	lds	r24, 0x2246
    6314:	90 e0       	ldi	r25, 0x00	; 0
    6316:	27 e1       	ldi	r18, 0x17	; 23
    6318:	30 e0       	ldi	r19, 0x00	; 0
    631a:	82 9f       	mul	r24, r18
    631c:	f0 01       	movw	r30, r0
    631e:	83 9f       	mul	r24, r19
    6320:	f0 0d       	add	r31, r0
    6322:	92 9f       	mul	r25, r18
    6324:	f0 0d       	add	r31, r0
    6326:	11 24       	eor	r1, r1
    6328:	e7 52       	subi	r30, 0x27	; 39
    632a:	fc 4d       	sbci	r31, 0xDC	; 220
    632c:	89 e0       	ldi	r24, 0x09	; 9
    632e:	83 83       	std	Z+3, r24	; 0x03
	return(_FDEV_ERR);
}
    6330:	8f ef       	ldi	r24, 0xFF	; 255
    6332:	9f ef       	ldi	r25, 0xFF	; 255
    6334:	08 95       	ret

00006336 <xio_readln_usart>:
 *
 *	Note: LINEMODE flag in device struct is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_usart(const uint8_t dev, char *buf, const uint8_t size)
{
    6336:	ff 92       	push	r15
    6338:	0f 93       	push	r16
    633a:	1f 93       	push	r17
    633c:	cf 93       	push	r28
    633e:	df 93       	push	r29
    6340:	28 2f       	mov	r18, r24
	struct xioDEVICE *d = &ds[dev];						// init device struct pointer
    6342:	87 e1       	ldi	r24, 0x17	; 23
    6344:	28 9f       	mul	r18, r24
    6346:	e0 01       	movw	r28, r0
    6348:	11 24       	eor	r1, r1
    634a:	c7 52       	subi	r28, 0x27	; 39
    634c:	dc 4d       	sbci	r29, 0xDC	; 220
	
	gdev = dev;									// set the global device number
    634e:	20 93 46 22 	sts	0x2246, r18

	if (!IN_LINE(d->flags)) {					// first time thru initializations
    6352:	88 81       	ld	r24, Y
    6354:	99 81       	ldd	r25, Y+1	; 0x01
    6356:	96 fd       	sbrc	r25, 6
    6358:	09 c0       	rjmp	.+18     	; 0x636c <xio_readln_usart+0x36>
		d->len = 0;							// zero buffer
    635a:	1d 82       	std	Y+5, r1	; 0x05
		d->status = 0;
    635c:	1a 82       	std	Y+2, r1	; 0x02
		d->size = size;
    635e:	4e 83       	std	Y+6, r20	; 0x06
		d->buf = buf;
    6360:	6d 8b       	std	Y+21, r22	; 0x15
    6362:	7e 8b       	std	Y+22, r23	; 0x16
		d->sig = XIO_SIG_OK;					// reset signal register
    6364:	1b 82       	std	Y+3, r1	; 0x03
		d->flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    6366:	90 64       	ori	r25, 0x40	; 64
    6368:	88 83       	st	Y, r24
    636a:	99 83       	std	Y+1, r25	; 0x01
 */

static int _xio_readc_usart(const uint8_t dev, const char *buf)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    636c:	30 e0       	ldi	r19, 0x00	; 0
    636e:	87 e1       	ldi	r24, 0x17	; 23
    6370:	90 e0       	ldi	r25, 0x00	; 0
    6372:	28 9f       	mul	r18, r24
    6374:	80 01       	movw	r16, r0
    6376:	29 9f       	mul	r18, r25
    6378:	10 0d       	add	r17, r0
    637a:	38 9f       	mul	r19, r24
    637c:	10 0d       	add	r17, r0
    637e:	11 24       	eor	r1, r1
    6380:	06 51       	subi	r16, 0x16	; 22
    6382:	1c 4d       	sbci	r17, 0xDC	; 220

	if (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
		return(XIO_BUFFER_EMPTY);
	}
	if (--(dx->rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6384:	41 e1       	ldi	r20, 0x11	; 17
    6386:	f4 2e       	mov	r15, r20
 */

static int _xio_readc_usart(const uint8_t dev, const char *buf)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6388:	d8 01       	movw	r26, r16
    638a:	ed 91       	ld	r30, X+
    638c:	fc 91       	ld	r31, X

	if (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
    638e:	93 81       	ldd	r25, Z+3	; 0x03
    6390:	82 81       	ldd	r24, Z+2	; 0x02
    6392:	98 17       	cp	r25, r24
    6394:	19 f4       	brne	.+6      	; 0x639c <xio_readln_usart+0x66>
    6396:	88 e0       	ldi	r24, 0x08	; 8
    6398:	90 e0       	ldi	r25, 0x00	; 0
    639a:	17 c0       	rjmp	.+46     	; 0x63ca <xio_readln_usart+0x94>
		return(XIO_BUFFER_EMPTY);
	}
	if (--(dx->rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
    639c:	82 81       	ldd	r24, Z+2	; 0x02
    639e:	81 50       	subi	r24, 0x01	; 1
    63a0:	82 83       	std	Z+2, r24	; 0x02
    63a2:	82 81       	ldd	r24, Z+2	; 0x02
    63a4:	88 23       	and	r24, r24
    63a6:	09 f4       	brne	.+2      	; 0x63aa <xio_readln_usart+0x74>
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    63a8:	f2 82       	std	Z+2, r15	; 0x02
	}
	d->c = (dx->rx_buf[dx->rx_buf_tail] & 0x007F); // get char from RX Q & mask MSB
    63aa:	82 81       	ldd	r24, Z+2	; 0x02
    63ac:	e8 0f       	add	r30, r24
    63ae:	f1 1d       	adc	r31, r1
    63b0:	83 85       	ldd	r24, Z+11	; 0x0b
    63b2:	8f 77       	andi	r24, 0x7F	; 127
    63b4:	8c 83       	std	Y+4, r24	; 0x04
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[d->c])))()); // dispatch char
    63b6:	90 e0       	ldi	r25, 0x00	; 0
    63b8:	88 0f       	add	r24, r24
    63ba:	99 1f       	adc	r25, r25
    63bc:	8a 58       	subi	r24, 0x8A	; 138
    63be:	94 4e       	sbci	r25, 0xE4	; 228
    63c0:	fc 01       	movw	r30, r24
    63c2:	25 91       	lpm	r18, Z+
    63c4:	34 91       	lpm	r19, Z+
    63c6:	f9 01       	movw	r30, r18
    63c8:	19 95       	eicall
		d->buf = buf;
		d->sig = XIO_SIG_OK;					// reset signal register
		d->flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
	}
	while (TRUE) { 
		switch (d->status = _xio_readc_usart(dev, d->buf)) {
    63ca:	8a 83       	std	Y+2, r24	; 0x02
    63cc:	88 30       	cpi	r24, 0x08	; 8
    63ce:	41 f0       	breq	.+16     	; 0x63e0 <xio_readln_usart+0xaa>
    63d0:	8a 30       	cpi	r24, 0x0A	; 10
    63d2:	19 f0       	breq	.+6      	; 0x63da <xio_readln_usart+0xa4>
    63d4:	84 30       	cpi	r24, 0x04	; 4
    63d6:	c1 f6       	brne	.-80     	; 0x6388 <xio_readln_usart+0x52>
    63d8:	06 c0       	rjmp	.+12     	; 0x63e6 <xio_readln_usart+0xb0>
    63da:	2a e0       	ldi	r18, 0x0A	; 10
    63dc:	30 e0       	ldi	r19, 0x00	; 0
    63de:	05 c0       	rjmp	.+10     	; 0x63ea <xio_readln_usart+0xb4>
    63e0:	22 e0       	ldi	r18, 0x02	; 2
    63e2:	30 e0       	ldi	r19, 0x00	; 0
    63e4:	02 c0       	rjmp	.+4      	; 0x63ea <xio_readln_usart+0xb4>
    63e6:	20 e0       	ldi	r18, 0x00	; 0
    63e8:	30 e0       	ldi	r19, 0x00	; 0
			case (XIO_EOL): return (XIO_OK); break;				// got completed line
			case (XIO_EAGAIN): break;							// loop
		}
		// +++ put a size check here of buffers can overrun.
	}
}
    63ea:	c9 01       	movw	r24, r18
    63ec:	df 91       	pop	r29
    63ee:	cf 91       	pop	r28
    63f0:	1f 91       	pop	r17
    63f2:	0f 91       	pop	r16
    63f4:	ff 90       	pop	r15
    63f6:	08 95       	ret

000063f8 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (ds[gdev].len > ds[gdev].size) {			// trap buffer overflow
    63f8:	80 91 46 22 	lds	r24, 0x2246
    63fc:	90 e0       	ldi	r25, 0x00	; 0
    63fe:	27 e1       	ldi	r18, 0x17	; 23
    6400:	30 e0       	ldi	r19, 0x00	; 0
    6402:	82 9f       	mul	r24, r18
    6404:	d0 01       	movw	r26, r0
    6406:	83 9f       	mul	r24, r19
    6408:	b0 0d       	add	r27, r0
    640a:	92 9f       	mul	r25, r18
    640c:	b0 0d       	add	r27, r0
    640e:	11 24       	eor	r1, r1
    6410:	a7 52       	subi	r26, 0x27	; 39
    6412:	bc 4d       	sbci	r27, 0xDC	; 220
    6414:	15 96       	adiw	r26, 0x05	; 5
    6416:	9c 91       	ld	r25, X
    6418:	15 97       	sbiw	r26, 0x05	; 5
    641a:	16 96       	adiw	r26, 0x06	; 6
    641c:	2c 91       	ld	r18, X
    641e:	16 97       	sbiw	r26, 0x06	; 6
    6420:	29 17       	cp	r18, r25
    6422:	70 f4       	brcc	.+28     	; 0x6440 <_readln_char+0x48>
		ds[gdev].sig = XIO_SIG_EOL;
    6424:	82 e0       	ldi	r24, 0x02	; 2
    6426:	13 96       	adiw	r26, 0x03	; 3
    6428:	8c 93       	st	X, r24
    642a:	13 97       	sbiw	r26, 0x03	; 3
		ds[gdev].buf[ds[gdev].size] = NUL;		// size is zero based
    642c:	55 96       	adiw	r26, 0x15	; 21
    642e:	ed 91       	ld	r30, X+
    6430:	fc 91       	ld	r31, X
    6432:	56 97       	sbiw	r26, 0x16	; 22
    6434:	e2 0f       	add	r30, r18
    6436:	f1 1d       	adc	r31, r1
    6438:	10 82       	st	Z, r1
    643a:	2a e0       	ldi	r18, 0x0A	; 10
    643c:	30 e0       	ldi	r19, 0x00	; 0
    643e:	1e c0       	rjmp	.+60     	; 0x647c <_readln_char+0x84>
		return (XIO_BUFFER_FULL_NON_FATAL);
	}
	ds[gdev].buf[ds[gdev].len++] = ds[gdev].c;
    6440:	55 96       	adiw	r26, 0x15	; 21
    6442:	ed 91       	ld	r30, X+
    6444:	fc 91       	ld	r31, X
    6446:	56 97       	sbiw	r26, 0x16	; 22
    6448:	e9 0f       	add	r30, r25
    644a:	f1 1d       	adc	r31, r1
    644c:	14 96       	adiw	r26, 0x04	; 4
    644e:	8c 91       	ld	r24, X
    6450:	14 97       	sbiw	r26, 0x04	; 4
    6452:	80 83       	st	Z, r24
    6454:	9f 5f       	subi	r25, 0xFF	; 255
    6456:	15 96       	adiw	r26, 0x05	; 5
    6458:	9c 93       	st	X, r25
    645a:	15 97       	sbiw	r26, 0x05	; 5
	if (ECHO(ds[gdev].flags)) ds[gdev].dev_putc(ds[gdev].c, stdout);// conditional echo
    645c:	8c 91       	ld	r24, X
    645e:	84 ff       	sbrs	r24, 4
    6460:	0b c0       	rjmp	.+22     	; 0x6478 <_readln_char+0x80>
    6462:	60 91 1a 25 	lds	r22, 0x251A
    6466:	70 91 1b 25 	lds	r23, 0x251B
    646a:	1b 96       	adiw	r26, 0x0b	; 11
    646c:	ed 91       	ld	r30, X+
    646e:	fc 91       	ld	r31, X
    6470:	1c 97       	sbiw	r26, 0x0c	; 12
    6472:	14 96       	adiw	r26, 0x04	; 4
    6474:	8c 91       	ld	r24, X
    6476:	19 95       	eicall
    6478:	22 e0       	ldi	r18, 0x02	; 2
    647a:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_EAGAIN);						// line is still in process
}
    647c:	c9 01       	movw	r24, r18
    647e:	08 95       	ret

00006480 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	ds[gdev].sig = XIO_SIG_EOL;
    6480:	80 91 46 22 	lds	r24, 0x2246
    6484:	90 e0       	ldi	r25, 0x00	; 0
    6486:	27 e1       	ldi	r18, 0x17	; 23
    6488:	30 e0       	ldi	r19, 0x00	; 0
    648a:	82 9f       	mul	r24, r18
    648c:	d0 01       	movw	r26, r0
    648e:	83 9f       	mul	r24, r19
    6490:	b0 0d       	add	r27, r0
    6492:	92 9f       	mul	r25, r18
    6494:	b0 0d       	add	r27, r0
    6496:	11 24       	eor	r1, r1
    6498:	a7 52       	subi	r26, 0x27	; 39
    649a:	bc 4d       	sbci	r27, 0xDC	; 220
    649c:	82 e0       	ldi	r24, 0x02	; 2
    649e:	13 96       	adiw	r26, 0x03	; 3
    64a0:	8c 93       	st	X, r24
    64a2:	13 97       	sbiw	r26, 0x03	; 3
	ds[gdev].buf[ds[gdev].len] = NUL;
    64a4:	15 96       	adiw	r26, 0x05	; 5
    64a6:	8c 91       	ld	r24, X
    64a8:	15 97       	sbiw	r26, 0x05	; 5
    64aa:	55 96       	adiw	r26, 0x15	; 21
    64ac:	ed 91       	ld	r30, X+
    64ae:	fc 91       	ld	r31, X
    64b0:	56 97       	sbiw	r26, 0x16	; 22
    64b2:	e8 0f       	add	r30, r24
    64b4:	f1 1d       	adc	r31, r1
    64b6:	10 82       	st	Z, r1
	ds[gdev].flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    64b8:	2d 91       	ld	r18, X+
    64ba:	3c 91       	ld	r19, X
    64bc:	11 97       	sbiw	r26, 0x01	; 1
    64be:	c9 01       	movw	r24, r18
    64c0:	9f 7b       	andi	r25, 0xBF	; 191
    64c2:	8d 93       	st	X+, r24
    64c4:	9c 93       	st	X, r25
    64c6:	11 97       	sbiw	r26, 0x01	; 1
	if (ECHO(ds[gdev].flags)) ds[gdev].dev_putc('\n',stdout);// echo a newline
    64c8:	24 ff       	sbrs	r18, 4
    64ca:	0a c0       	rjmp	.+20     	; 0x64e0 <_readln_NEWLINE+0x60>
    64cc:	60 91 1a 25 	lds	r22, 0x251A
    64d0:	70 91 1b 25 	lds	r23, 0x251B
    64d4:	1b 96       	adiw	r26, 0x0b	; 11
    64d6:	ed 91       	ld	r30, X+
    64d8:	fc 91       	ld	r31, X
    64da:	1c 97       	sbiw	r26, 0x0c	; 12
    64dc:	8a e0       	ldi	r24, 0x0A	; 10
    64de:	19 95       	eicall
	return (XIO_EOL);							// return for end-of-line
}
    64e0:	84 e0       	ldi	r24, 0x04	; 4
    64e2:	90 e0       	ldi	r25, 0x00	; 0
    64e4:	08 95       	ret

000064e6 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newln
{
	if (SEMICOLONS(ds[gdev].flags)) {
    64e6:	80 91 46 22 	lds	r24, 0x2246
    64ea:	90 e0       	ldi	r25, 0x00	; 0
    64ec:	27 e1       	ldi	r18, 0x17	; 23
    64ee:	30 e0       	ldi	r19, 0x00	; 0
    64f0:	82 9f       	mul	r24, r18
    64f2:	f0 01       	movw	r30, r0
    64f4:	83 9f       	mul	r24, r19
    64f6:	f0 0d       	add	r31, r0
    64f8:	92 9f       	mul	r25, r18
    64fa:	f0 0d       	add	r31, r0
    64fc:	11 24       	eor	r1, r1
    64fe:	e7 52       	subi	r30, 0x27	; 39
    6500:	fc 4d       	sbci	r31, 0xDC	; 220
    6502:	80 81       	ld	r24, Z
    6504:	87 ff       	sbrs	r24, 7
    6506:	03 c0       	rjmp	.+6      	; 0x650e <_readln_SEMICOLON+0x28>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    6508:	0e 94 40 32 	call	0x6480	; 0x6480 <_readln_NEWLINE>
    650c:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    650e:	0e 94 fc 31 	call	0x63f8	; 0x63f8 <_readln_char>
	}
}
    6512:	08 95       	ret

00006514 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--ds[gdev].len >= 0) {
    6514:	80 91 46 22 	lds	r24, 0x2246
    6518:	90 e0       	ldi	r25, 0x00	; 0
    651a:	27 e1       	ldi	r18, 0x17	; 23
    651c:	30 e0       	ldi	r19, 0x00	; 0
    651e:	82 9f       	mul	r24, r18
    6520:	d0 01       	movw	r26, r0
    6522:	83 9f       	mul	r24, r19
    6524:	b0 0d       	add	r27, r0
    6526:	92 9f       	mul	r25, r18
    6528:	b0 0d       	add	r27, r0
    652a:	11 24       	eor	r1, r1
    652c:	a7 52       	subi	r26, 0x27	; 39
    652e:	bc 4d       	sbci	r27, 0xDC	; 220
    6530:	15 96       	adiw	r26, 0x05	; 5
    6532:	8c 91       	ld	r24, X
    6534:	15 97       	sbiw	r26, 0x05	; 5
    6536:	81 50       	subi	r24, 0x01	; 1
    6538:	15 96       	adiw	r26, 0x05	; 5
    653a:	8c 93       	st	X, r24
    653c:	15 97       	sbiw	r26, 0x05	; 5
		if (ECHO(ds[gdev].flags)) ds[gdev].dev_putc(ds[gdev].c, stdout);
    653e:	8c 91       	ld	r24, X
    6540:	84 ff       	sbrs	r24, 4
    6542:	0b c0       	rjmp	.+22     	; 0x655a <_readln_DELETE+0x46>
    6544:	60 91 1a 25 	lds	r22, 0x251A
    6548:	70 91 1b 25 	lds	r23, 0x251B
    654c:	1b 96       	adiw	r26, 0x0b	; 11
    654e:	ed 91       	ld	r30, X+
    6550:	fc 91       	ld	r31, X
    6552:	1c 97       	sbiw	r26, 0x0c	; 12
    6554:	14 96       	adiw	r26, 0x04	; 4
    6556:	8c 91       	ld	r24, X
    6558:	19 95       	eicall
	} else {
		ds[gdev].len = 0;
	}
	return (XIO_EAGAIN);						// line is still in process
}
    655a:	82 e0       	ldi	r24, 0x02	; 2
    655c:	90 e0       	ldi	r25, 0x00	; 0
    655e:	08 95       	ret

00006560 <xio_queue_RX_char_usart>:
 */

void xio_queue_RX_char_usart(const uint8_t dev, const char c)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6560:	90 e0       	ldi	r25, 0x00	; 0
    6562:	27 e1       	ldi	r18, 0x17	; 23
    6564:	30 e0       	ldi	r19, 0x00	; 0
    6566:	82 9f       	mul	r24, r18
    6568:	f0 01       	movw	r30, r0
    656a:	83 9f       	mul	r24, r19
    656c:	f0 0d       	add	r31, r0
    656e:	92 9f       	mul	r25, r18
    6570:	f0 0d       	add	r31, r0
    6572:	11 24       	eor	r1, r1
    6574:	e7 52       	subi	r30, 0x27	; 39
    6576:	fc 4d       	sbci	r31, 0xDC	; 220
    6578:	81 89       	ldd	r24, Z+17	; 0x11
    657a:	92 89       	ldd	r25, Z+18	; 0x12

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    657c:	63 30       	cpi	r22, 0x03	; 3
    657e:	29 f4       	brne	.+10     	; 0x658a <xio_queue_RX_char_usart+0x2a>
		d->sig = XIO_SIG_KILL;					// set signal value
    6580:	84 e0       	ldi	r24, 0x04	; 4
    6582:	83 83       	std	Z+3, r24	; 0x03
		signal_etx();							// call app-specific signal handler
    6584:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <signal_etx>
    6588:	08 95       	ret
 */

void xio_queue_RX_char_usart(const uint8_t dev, const char c)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    658a:	fc 01       	movw	r30, r24
		signal_etx();							// call app-specific signal handler
		return;
	}

	// normal path
	if ((--dx->rx_buf_head) == 0) { 			// wrap condition
    658c:	83 81       	ldd	r24, Z+3	; 0x03
    658e:	81 50       	subi	r24, 0x01	; 1
    6590:	83 83       	std	Z+3, r24	; 0x03
    6592:	83 81       	ldd	r24, Z+3	; 0x03
    6594:	88 23       	and	r24, r24
    6596:	11 f4       	brne	.+4      	; 0x659c <xio_queue_RX_char_usart+0x3c>
		dx->rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    6598:	81 e1       	ldi	r24, 0x11	; 17
    659a:	83 83       	std	Z+3, r24	; 0x03
	}
	if (dx->rx_buf_head != dx->rx_buf_tail) {// write char unless buffer full
    659c:	93 81       	ldd	r25, Z+3	; 0x03
    659e:	82 81       	ldd	r24, Z+2	; 0x02
    65a0:	98 17       	cp	r25, r24
    65a2:	29 f0       	breq	.+10     	; 0x65ae <xio_queue_RX_char_usart+0x4e>
		dx->rx_buf[dx->rx_buf_head] = c;	// FAKE INPUT DATA
    65a4:	83 81       	ldd	r24, Z+3	; 0x03
    65a6:	e8 0f       	add	r30, r24
    65a8:	f1 1d       	adc	r31, r1
    65aa:	63 87       	std	Z+11, r22	; 0x0b
    65ac:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++dx->rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    65ae:	83 81       	ldd	r24, Z+3	; 0x03
    65b0:	8f 5f       	subi	r24, 0xFF	; 255
    65b2:	83 83       	std	Z+3, r24	; 0x03
    65b4:	83 81       	ldd	r24, Z+3	; 0x03
    65b6:	82 31       	cpi	r24, 0x12	; 18
    65b8:	10 f0       	brcs	.+4      	; 0x65be <xio_queue_RX_char_usart+0x5e>
		dx->rx_buf_head = 1;
    65ba:	81 e0       	ldi	r24, 0x01	; 1
    65bc:	83 83       	std	Z+3, r24	; 0x03
    65be:	08 95       	ret

000065c0 <xio_queue_RX_string_usart>:
/*
 * xio_queue_RX_string_usart() - fake ISR to put a string in the RX buffer
 */

void xio_queue_RX_string_usart(const uint8_t dev, const char *buf)
{
    65c0:	0f 93       	push	r16
    65c2:	1f 93       	push	r17
    65c4:	cf 93       	push	r28
    65c6:	df 93       	push	r29
    65c8:	08 2f       	mov	r16, r24
    65ca:	eb 01       	movw	r28, r22
    65cc:	10 e0       	ldi	r17, 0x00	; 0
    65ce:	03 c0       	rjmp	.+6      	; 0x65d6 <xio_queue_RX_string_usart+0x16>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_queue_RX_char_usart(dev, c);
    65d0:	80 2f       	mov	r24, r16
    65d2:	0e 94 b0 32 	call	0x6560	; 0x6560 <xio_queue_RX_char_usart>
void xio_queue_RX_string_usart(const uint8_t dev, const char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    65d6:	fe 01       	movw	r30, r28
    65d8:	e1 0f       	add	r30, r17
    65da:	f1 1d       	adc	r31, r1
    65dc:	60 81       	ld	r22, Z
    65de:	1f 5f       	subi	r17, 0xFF	; 255
    65e0:	66 23       	and	r22, r22
    65e2:	b1 f7       	brne	.-20     	; 0x65d0 <xio_queue_RX_string_usart+0x10>
		xio_queue_RX_char_usart(dev, c);
	}
}
    65e4:	df 91       	pop	r29
    65e6:	cf 91       	pop	r28
    65e8:	1f 91       	pop	r17
    65ea:	0f 91       	pop	r16
    65ec:	08 95       	ret

000065ee <xio_init_usart>:
					const struct PORT_struct *port_addr,
					const uint8_t dirclr, 
					const uint8_t dirset, 
					const uint8_t outclr, 
					const uint8_t outset) 
{
    65ee:	8f 92       	push	r8
    65f0:	9f 92       	push	r9
    65f2:	af 92       	push	r10
    65f4:	bf 92       	push	r11
    65f6:	cf 92       	push	r12
    65f8:	df 92       	push	r13
    65fa:	ef 92       	push	r14
    65fc:	ff 92       	push	r15
    65fe:	0f 93       	push	r16
    6600:	1f 93       	push	r17
    6602:	df 93       	push	r29
    6604:	cf 93       	push	r28
    6606:	cd b7       	in	r28, 0x3d	; 61
    6608:	de b7       	in	r29, 0x3e	; 62
    660a:	b8 2e       	mov	r11, r24
    660c:	f4 2e       	mov	r15, r20
    660e:	9c 2c       	mov	r9, r12
	// do all the bindings first (and in this order)
	struct xioDEVICE *d = &ds[dev];					// setup device struct pointer
	d->x = &us[offset];								// bind USART struct to device
    6610:	8f e2       	ldi	r24, 0x2F	; 47
    6612:	68 9f       	mul	r22, r24
    6614:	60 01       	movw	r12, r0
    6616:	11 24       	eor	r1, r1
    6618:	8a e3       	ldi	r24, 0x3A	; 58
    661a:	93 e2       	ldi	r25, 0x23	; 35
    661c:	c8 0e       	add	r12, r24
    661e:	d9 1e       	adc	r13, r25
    6620:	6b 2d       	mov	r22, r11
    6622:	70 e0       	ldi	r23, 0x00	; 0
    6624:	87 e1       	ldi	r24, 0x17	; 23
    6626:	90 e0       	ldi	r25, 0x00	; 0
    6628:	68 9f       	mul	r22, r24
    662a:	f0 01       	movw	r30, r0
    662c:	69 9f       	mul	r22, r25
    662e:	f0 0d       	add	r31, r0
    6630:	78 9f       	mul	r23, r24
    6632:	f0 0d       	add	r31, r0
    6634:	11 24       	eor	r1, r1
    6636:	e7 52       	subi	r30, 0x27	; 39
    6638:	fc 4d       	sbci	r31, 0xDC	; 220
    663a:	c1 8a       	std	Z+17, r12	; 0x11
    663c:	d2 8a       	std	Z+18, r13	; 0x12
	struct xioUSART *dx = (struct xioUSART *)d->x;	// setup USART struct pointer
	dx->usart = (struct USART_struct *)usart_addr;	// bind USART 
    663e:	d6 01       	movw	r26, r12
    6640:	17 96       	adiw	r26, 0x07	; 7
    6642:	2d 93       	st	X+, r18
    6644:	3c 93       	st	X, r19
    6646:	18 97       	sbiw	r26, 0x08	; 8
	dx->port = (struct PORT_struct *)port_addr;		// bind PORT
    6648:	19 96       	adiw	r26, 0x09	; 9
    664a:	0d 93       	st	X+, r16
    664c:	1c 93       	st	X, r17
    664e:	1a 97       	sbiw	r26, 0x0a	; 10

	// set flags
	xio_setflags(dev, control);		// generic setflags - doesn't validate flags
    6650:	8b 2d       	mov	r24, r11
    6652:	64 2f       	mov	r22, r20
    6654:	75 2f       	mov	r23, r21
    6656:	0e 94 4e 28 	call	0x509c	; 0x509c <xio_setflags>

	// setup internal RX/TX buffers
	dx->rx_buf_head = 1;			// can't use location 0 in circular buffer
    665a:	81 e0       	ldi	r24, 0x01	; 1
    665c:	f6 01       	movw	r30, r12
    665e:	83 83       	std	Z+3, r24	; 0x03
	dx->rx_buf_tail = 1;
    6660:	82 83       	std	Z+2, r24	; 0x02
	dx->tx_buf_head = 1;
    6662:	85 83       	std	Z+5, r24	; 0x05
	dx->tx_buf_tail = 1;
    6664:	84 83       	std	Z+4, r24	; 0x04

	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    6666:	4f 2d       	mov	r20, r15
    6668:	4f 70       	andi	r20, 0x0F	; 15
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
    666a:	09 f4       	brne	.+2      	; 0x666e <xio_init_usart+0x80>
    666c:	45 e0       	ldi	r20, 0x05	; 5
	dx->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    666e:	2b 2d       	mov	r18, r11
    6670:	30 e0       	ldi	r19, 0x00	; 0
    6672:	87 e1       	ldi	r24, 0x17	; 23
    6674:	90 e0       	ldi	r25, 0x00	; 0
    6676:	28 9f       	mul	r18, r24
    6678:	d0 01       	movw	r26, r0
    667a:	29 9f       	mul	r18, r25
    667c:	b0 0d       	add	r27, r0
    667e:	38 9f       	mul	r19, r24
    6680:	b0 0d       	add	r27, r0
    6682:	11 24       	eor	r1, r1
    6684:	a7 52       	subi	r26, 0x27	; 39
    6686:	bc 4d       	sbci	r27, 0xDC	; 220
    6688:	51 96       	adiw	r26, 0x11	; 17
    668a:	ed 91       	ld	r30, X+
    668c:	fc 91       	ld	r31, X
    668e:	52 97       	sbiw	r26, 0x12	; 18
    6690:	87 81       	ldd	r24, Z+7	; 0x07
    6692:	90 85       	ldd	r25, Z+8	; 0x08
    6694:	24 2f       	mov	r18, r20
    6696:	30 e0       	ldi	r19, 0x00	; 0
    6698:	f9 01       	movw	r30, r18
    669a:	e0 5a       	subi	r30, 0xA0	; 160
    669c:	f4 4e       	sbci	r31, 0xE4	; 228
    669e:	44 91       	lpm	r20, Z+
    66a0:	fc 01       	movw	r30, r24
    66a2:	46 83       	std	Z+6, r20	; 0x06
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    66a4:	51 96       	adiw	r26, 0x11	; 17
    66a6:	ed 91       	ld	r30, X+
    66a8:	fc 91       	ld	r31, X
    66aa:	52 97       	sbiw	r26, 0x12	; 18
    66ac:	a7 81       	ldd	r26, Z+7	; 0x07
    66ae:	b0 85       	ldd	r27, Z+8	; 0x08
    66b0:	25 59       	subi	r18, 0x95	; 149
    66b2:	34 4e       	sbci	r19, 0xE4	; 228
    66b4:	f9 01       	movw	r30, r18
    66b6:	f4 90       	lpm	r15, Z+
    66b8:	17 96       	adiw	r26, 0x07	; 7
    66ba:	fc 92       	st	X, r15
	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
	xio_set_baud_usart(dev, baud);					// usart must be bound first

	dx->usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx
    66bc:	d6 01       	movw	r26, r12
    66be:	17 96       	adiw	r26, 0x07	; 7
    66c0:	ed 91       	ld	r30, X+
    66c2:	fc 91       	ld	r31, X
    66c4:	18 97       	sbiw	r26, 0x08	; 8
    66c6:	88 e1       	ldi	r24, 0x18	; 24
    66c8:	84 83       	std	Z+4, r24	; 0x04
	dx->usart->CTRLA = CTRLA_RXON_TXON;			   // enable tx and rx IRQs
    66ca:	17 96       	adiw	r26, 0x07	; 7
    66cc:	ed 91       	ld	r30, X+
    66ce:	fc 91       	ld	r31, X
    66d0:	18 97       	sbiw	r26, 0x08	; 8
    66d2:	81 e2       	ldi	r24, 0x21	; 33
    66d4:	83 83       	std	Z+3, r24	; 0x03

	dx->port->DIRCLR = dirclr;
    66d6:	19 96       	adiw	r26, 0x09	; 9
    66d8:	ed 91       	ld	r30, X+
    66da:	fc 91       	ld	r31, X
    66dc:	1a 97       	sbiw	r26, 0x0a	; 10
    66de:	e2 82       	std	Z+2, r14	; 0x02
	dx->port->DIRSET = dirset;
    66e0:	19 96       	adiw	r26, 0x09	; 9
    66e2:	ed 91       	ld	r30, X+
    66e4:	fc 91       	ld	r31, X
    66e6:	1a 97       	sbiw	r26, 0x0a	; 10
    66e8:	91 82       	std	Z+1, r9	; 0x01
	dx->port->OUTCLR = outclr;
    66ea:	19 96       	adiw	r26, 0x09	; 9
    66ec:	ed 91       	ld	r30, X+
    66ee:	fc 91       	ld	r31, X
    66f0:	1a 97       	sbiw	r26, 0x0a	; 10
    66f2:	a6 82       	std	Z+6, r10	; 0x06
	dx->port->OUTSET = outset;
    66f4:	19 96       	adiw	r26, 0x09	; 9
    66f6:	ed 91       	ld	r30, X+
    66f8:	fc 91       	ld	r31, X
    66fa:	1a 97       	sbiw	r26, 0x0a	; 10
    66fc:	85 82       	std	Z+5, r8	; 0x05
}
    66fe:	cf 91       	pop	r28
    6700:	df 91       	pop	r29
    6702:	1f 91       	pop	r17
    6704:	0f 91       	pop	r16
    6706:	ff 90       	pop	r15
    6708:	ef 90       	pop	r14
    670a:	df 90       	pop	r13
    670c:	cf 90       	pop	r12
    670e:	bf 90       	pop	r11
    6710:	af 90       	pop	r10
    6712:	9f 90       	pop	r9
    6714:	8f 90       	pop	r8
    6716:	08 95       	ret

00006718 <xio_open_usb>:
#define USB ds[XIO_DEV_USB]						// device struct accessoor
#define USBu us[XIO_DEV_USB_OFFSET]				// usart extended struct accessor


/* USB Device specific entry points to USART routines */
struct __file * xio_open_usb() {return(USB.fdev);}
    6718:	80 91 03 24 	lds	r24, 0x2403
    671c:	90 91 04 24 	lds	r25, 0x2404
    6720:	08 95       	ret

00006722 <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)	//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    6722:	1f 92       	push	r1
    6724:	0f 92       	push	r0
    6726:	0f b6       	in	r0, 0x3f	; 63
    6728:	0f 92       	push	r0
    672a:	0b b6       	in	r0, 0x3b	; 59
    672c:	0f 92       	push	r0
    672e:	11 24       	eor	r1, r1
    6730:	8f 93       	push	r24
    6732:	9f 93       	push	r25
    6734:	af 93       	push	r26
    6736:	bf 93       	push	r27
    6738:	ef 93       	push	r30
    673a:	ff 93       	push	r31
	if (USBu.tx_buf_head == USBu.tx_buf_tail) {	// buffer empty - disable ints
    673c:	90 91 6e 23 	lds	r25, 0x236E
    6740:	80 91 6d 23 	lds	r24, 0x236D
    6744:	98 17       	cp	r25, r24
    6746:	39 f4       	brne	.+14     	; 0x6756 <__vector_26+0x34>
		USBu.usart->CTRLA = CTRLA_RXON_TXOFF;	// won't work if you just &= it
    6748:	e0 91 70 23 	lds	r30, 0x2370
    674c:	f0 91 71 23 	lds	r31, 0x2371
    6750:	80 e2       	ldi	r24, 0x20	; 32
    6752:	83 83       	std	Z+3, r24	; 0x03
    6754:	1d c0       	rjmp	.+58     	; 0x6790 <__vector_26+0x6e>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(USB.flags)) {
    6756:	80 91 f0 23 	lds	r24, 0x23F0
    675a:	90 91 f1 23 	lds	r25, 0x23F1
    675e:	93 fd       	sbrc	r25, 3
    6760:	17 c0       	rjmp	.+46     	; 0x6790 <__vector_26+0x6e>
		if (--(USBu.tx_buf_tail) == 0) {		// advance tail and wrap 
    6762:	80 91 6d 23 	lds	r24, 0x236D
    6766:	81 50       	subi	r24, 0x01	; 1
    6768:	80 93 6d 23 	sts	0x236D, r24
    676c:	80 91 6d 23 	lds	r24, 0x236D
    6770:	88 23       	and	r24, r24
    6772:	19 f4       	brne	.+6      	; 0x677a <__vector_26+0x58>
			USBu.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one err (OBOE)
    6774:	81 e1       	ldi	r24, 0x11	; 17
    6776:	80 93 6d 23 	sts	0x236D, r24
		}
		USBu.usart->DATA = USBu.tx_buf[USBu.tx_buf_tail]; // write to TX DATA reg
    677a:	e0 91 70 23 	lds	r30, 0x2370
    677e:	f0 91 71 23 	lds	r31, 0x2371
    6782:	a0 91 6d 23 	lds	r26, 0x236D
    6786:	b0 e0       	ldi	r27, 0x00	; 0
    6788:	aa 57       	subi	r26, 0x7A	; 122
    678a:	bc 4d       	sbci	r27, 0xDC	; 220
    678c:	8c 91       	ld	r24, X
    678e:	80 83       	st	Z, r24
	}
}
    6790:	ff 91       	pop	r31
    6792:	ef 91       	pop	r30
    6794:	bf 91       	pop	r27
    6796:	af 91       	pop	r26
    6798:	9f 91       	pop	r25
    679a:	8f 91       	pop	r24
    679c:	0f 90       	pop	r0
    679e:	0b be       	out	0x3b, r0	; 59
    67a0:	0f 90       	pop	r0
    67a2:	0f be       	out	0x3f, r0	; 63
    67a4:	0f 90       	pop	r0
    67a6:	1f 90       	pop	r1
    67a8:	18 95       	reti

000067aa <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    67aa:	1f 92       	push	r1
    67ac:	0f 92       	push	r0
    67ae:	0f b6       	in	r0, 0x3f	; 63
    67b0:	0f 92       	push	r0
    67b2:	0b b6       	in	r0, 0x3b	; 59
    67b4:	0f 92       	push	r0
    67b6:	11 24       	eor	r1, r1
    67b8:	2f 93       	push	r18
    67ba:	3f 93       	push	r19
    67bc:	4f 93       	push	r20
    67be:	5f 93       	push	r21
    67c0:	6f 93       	push	r22
    67c2:	7f 93       	push	r23
    67c4:	8f 93       	push	r24
    67c6:	9f 93       	push	r25
    67c8:	af 93       	push	r26
    67ca:	bf 93       	push	r27
    67cc:	ef 93       	push	r30
    67ce:	ff 93       	push	r31
	uint8_t c = USBu.usart->DATA;				// can only read DATA once
    67d0:	e0 91 70 23 	lds	r30, 0x2370
    67d4:	f0 91 71 23 	lds	r31, 0x2371
    67d8:	20 81       	ld	r18, Z

	// trap signals - do not insert character into RX queue
	if (c == ETX) {								// trap ^c signal
    67da:	23 30       	cpi	r18, 0x03	; 3
    67dc:	31 f4       	brne	.+12     	; 0x67ea <__vector_25+0x40>
		USB.sig = XIO_SIG_KILL;					// set signal value
    67de:	84 e0       	ldi	r24, 0x04	; 4
    67e0:	80 93 f3 23 	sts	0x23F3, r24
		signal_etx();							// call app-specific signal handler
    67e4:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <signal_etx>
    67e8:	25 c0       	rjmp	.+74     	; 0x6834 <__vector_25+0x8a>
		return;
	}

	// normal character path
	if ((--USBu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    67ea:	80 91 6c 23 	lds	r24, 0x236C
    67ee:	81 50       	subi	r24, 0x01	; 1
    67f0:	80 93 6c 23 	sts	0x236C, r24
    67f4:	80 91 6c 23 	lds	r24, 0x236C
    67f8:	88 23       	and	r24, r24
    67fa:	19 f4       	brne	.+6      	; 0x6802 <__vector_25+0x58>
		USBu.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    67fc:	81 e1       	ldi	r24, 0x11	; 17
    67fe:	80 93 6c 23 	sts	0x236C, r24
	}
	if (USBu.rx_buf_head != USBu.rx_buf_tail) {	// write char unless buffer full
    6802:	90 91 6c 23 	lds	r25, 0x236C
    6806:	80 91 6b 23 	lds	r24, 0x236B
    680a:	98 17       	cp	r25, r24
    680c:	39 f0       	breq	.+14     	; 0x681c <__vector_25+0x72>
		USBu.rx_buf[USBu.rx_buf_head] = c;
    680e:	e0 91 6c 23 	lds	r30, 0x236C
    6812:	f0 e0       	ldi	r31, 0x00	; 0
    6814:	e6 5c       	subi	r30, 0xC6	; 198
    6816:	fc 4d       	sbci	r31, 0xDC	; 220
    6818:	22 af       	std	Z+58, r18	; 0x3a
    681a:	0c c0       	rjmp	.+24     	; 0x6834 <__vector_25+0x8a>
		return;
	}
	// buffer-full handling
	if ((++USBu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    681c:	80 91 6c 23 	lds	r24, 0x236C
    6820:	8f 5f       	subi	r24, 0xFF	; 255
    6822:	80 93 6c 23 	sts	0x236C, r24
    6826:	80 91 6c 23 	lds	r24, 0x236C
    682a:	82 31       	cpi	r24, 0x12	; 18
    682c:	18 f0       	brcs	.+6      	; 0x6834 <__vector_25+0x8a>
		USBu.rx_buf_head = 1;
    682e:	81 e0       	ldi	r24, 0x01	; 1
    6830:	80 93 6c 23 	sts	0x236C, r24
	}
	// activate flow control here or before it gets to this level
}
    6834:	ff 91       	pop	r31
    6836:	ef 91       	pop	r30
    6838:	bf 91       	pop	r27
    683a:	af 91       	pop	r26
    683c:	9f 91       	pop	r25
    683e:	8f 91       	pop	r24
    6840:	7f 91       	pop	r23
    6842:	6f 91       	pop	r22
    6844:	5f 91       	pop	r21
    6846:	4f 91       	pop	r20
    6848:	3f 91       	pop	r19
    684a:	2f 91       	pop	r18
    684c:	0f 90       	pop	r0
    684e:	0b be       	out	0x3b, r0	; 59
    6850:	0f 90       	pop	r0
    6852:	0f be       	out	0x3f, r0	; 63
    6854:	0f 90       	pop	r0
    6856:	1f 90       	pop	r1
    6858:	18 95       	reti

0000685a <xio_init_usb>:
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
void xio_queue_RX_string_usb(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_USB, buf);}
void xio_init_usb()	// USB inits
{
    685a:	8f 92       	push	r8
    685c:	af 92       	push	r10
    685e:	cf 92       	push	r12
    6860:	ef 92       	push	r14
    6862:	ff 92       	push	r15
    6864:	0f 93       	push	r16
    6866:	1f 93       	push	r17
	xio_init_dev(XIO_DEV_USB, xio_open_usb, xio_setflags_usb, xio_putc_usb, xio_getc_usb, xio_readln_usb);
    6868:	81 e0       	ldi	r24, 0x01	; 1
    686a:	6c e8       	ldi	r22, 0x8C	; 140
    686c:	73 e3       	ldi	r23, 0x33	; 51
    686e:	49 e7       	ldi	r20, 0x79	; 121
    6870:	54 e3       	ldi	r21, 0x34	; 52
    6872:	22 e7       	ldi	r18, 0x72	; 114
    6874:	34 e3       	ldi	r19, 0x34	; 52
    6876:	0d e6       	ldi	r16, 0x6D	; 109
    6878:	14 e3       	ldi	r17, 0x34	; 52
    687a:	f6 e6       	ldi	r31, 0x66	; 102
    687c:	ef 2e       	mov	r14, r31
    687e:	f4 e3       	ldi	r31, 0x34	; 52
    6880:	ff 2e       	mov	r15, r31
    6882:	0e 94 37 29 	call	0x526e	; 0x526e <xio_init_dev>
	xio_init_usart(XIO_DEV_USB, XIO_DEV_USB_OFFSET, USB_INIT_bm, &USB_USART, &USB_PORT, USB_DIRCLR_bm, USB_DIRSET_bm, USB_OUTCLR_bm, USB_OUTSET_bm);
    6886:	81 e0       	ldi	r24, 0x01	; 1
    6888:	61 e0       	ldi	r22, 0x01	; 1
    688a:	45 e7       	ldi	r20, 0x75	; 117
    688c:	55 e5       	ldi	r21, 0x55	; 85
    688e:	20 ea       	ldi	r18, 0xA0	; 160
    6890:	38 e0       	ldi	r19, 0x08	; 8
    6892:	00 e4       	ldi	r16, 0x40	; 64
    6894:	16 e0       	ldi	r17, 0x06	; 6
    6896:	e5 e0       	ldi	r30, 0x05	; 5
    6898:	ee 2e       	mov	r14, r30
    689a:	7a e0       	ldi	r23, 0x0A	; 10
    689c:	c7 2e       	mov	r12, r23
    689e:	aa 24       	eor	r10, r10
    68a0:	9a e0       	ldi	r25, 0x0A	; 10
    68a2:	89 2e       	mov	r8, r25
    68a4:	0e 94 f7 32 	call	0x65ee	; 0x65ee <xio_init_usart>
}
    68a8:	1f 91       	pop	r17
    68aa:	0f 91       	pop	r16
    68ac:	ff 90       	pop	r15
    68ae:	ef 90       	pop	r14
    68b0:	cf 90       	pop	r12
    68b2:	af 90       	pop	r10
    68b4:	8f 90       	pop	r8
    68b6:	08 95       	ret

000068b8 <xio_queue_RX_string_usb>:
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
void xio_queue_RX_string_usb(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_USB, buf);}
    68b8:	bc 01       	movw	r22, r24
    68ba:	81 e0       	ldi	r24, 0x01	; 1
    68bc:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <xio_queue_RX_string_usart>
    68c0:	08 95       	ret

000068c2 <xio_queue_RX_char_usb>:
struct __file * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
    68c2:	68 2f       	mov	r22, r24
    68c4:	81 e0       	ldi	r24, 0x01	; 1
    68c6:	0e 94 b0 32 	call	0x6560	; 0x6560 <xio_queue_RX_char_usart>
    68ca:	08 95       	ret

000068cc <xio_readln_usb>:
/* USB Device specific entry points to USART routines */
struct __file * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
    68cc:	9c 01       	movw	r18, r24
    68ce:	46 2f       	mov	r20, r22
    68d0:	81 e0       	ldi	r24, 0x01	; 1
    68d2:	b9 01       	movw	r22, r18
    68d4:	0e 94 9b 31 	call	0x6336	; 0x6336 <xio_readln_usart>
    68d8:	08 95       	ret

000068da <xio_getc_usb>:

/* USB Device specific entry points to USART routines */
struct __file * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
    68da:	bc 01       	movw	r22, r24
    68dc:	81 e0       	ldi	r24, 0x01	; 1
    68de:	0e 94 b8 30 	call	0x6170	; 0x6170 <xio_getc_usart>
    68e2:	08 95       	ret

000068e4 <xio_putc_usb>:


/* USB Device specific entry points to USART routines */
struct __file * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
    68e4:	98 2f       	mov	r25, r24
    68e6:	ab 01       	movw	r20, r22
    68e8:	81 e0       	ldi	r24, 0x01	; 1
    68ea:	69 2f       	mov	r22, r25
    68ec:	0e 94 2a 30 	call	0x6054	; 0x6054 <xio_putc_usart>
    68f0:	08 95       	ret

000068f2 <xio_setflags_usb>:
#define USBu us[XIO_DEV_USB_OFFSET]				// usart extended struct accessor


/* USB Device specific entry points to USART routines */
struct __file * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
    68f2:	bc 01       	movw	r22, r24
    68f4:	81 e0       	ldi	r24, 0x01	; 1
    68f6:	0e 94 4e 28 	call	0x509c	; 0x509c <xio_setflags>
    68fa:	08 95       	ret

000068fc <xio_open_rs485>:
extern struct xioUSART us[XIO_DEV_USART_COUNT];	// ref USART extended IO structs
#define RS ds[XIO_DEV_RS485]					// device struct accessoor
#define RSu us[XIO_DEV_RS485]					// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
    68fc:	80 91 ec 23 	lds	r24, 0x23EC
    6900:	90 91 ed 23 	lds	r25, 0x23ED
    6904:	08 95       	ret

00006906 <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC1 data register empty
{
    6906:	1f 92       	push	r1
    6908:	0f 92       	push	r0
    690a:	0f b6       	in	r0, 0x3f	; 63
    690c:	0f 92       	push	r0
    690e:	0b b6       	in	r0, 0x3b	; 59
    6910:	0f 92       	push	r0
    6912:	11 24       	eor	r1, r1
    6914:	8f 93       	push	r24
    6916:	9f 93       	push	r25
    6918:	af 93       	push	r26
    691a:	bf 93       	push	r27
    691c:	ef 93       	push	r30
    691e:	ff 93       	push	r31
	if (RSu.tx_buf_head == RSu.tx_buf_tail) {	// buffer empty - disable ints (Note)
    6920:	90 91 3f 23 	lds	r25, 0x233F
    6924:	80 91 3e 23 	lds	r24, 0x233E
    6928:	98 17       	cp	r25, r24
    692a:	39 f4       	brne	.+14     	; 0x693a <__vector_29+0x34>
		RSu.usart->CTRLA = CTRLA_RXON_TXOFF_TXCON;	// doesn't work if you just &= it
    692c:	e0 91 41 23 	lds	r30, 0x2341
    6930:	f0 91 42 23 	lds	r31, 0x2342
    6934:	84 e2       	ldi	r24, 0x24	; 36
    6936:	83 83       	std	Z+3, r24	; 0x03
    6938:	23 c0       	rjmp	.+70     	; 0x6980 <__vector_29+0x7a>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(RS.flags)) {
    693a:	80 91 d9 23 	lds	r24, 0x23D9
    693e:	90 91 da 23 	lds	r25, 0x23DA
    6942:	93 fd       	sbrc	r25, 3
    6944:	1d c0       	rjmp	.+58     	; 0x6980 <__vector_29+0x7a>
		if (--(RSu.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    6946:	80 91 3e 23 	lds	r24, 0x233E
    694a:	81 50       	subi	r24, 0x01	; 1
    694c:	80 93 3e 23 	sts	0x233E, r24
    6950:	80 91 3e 23 	lds	r24, 0x233E
    6954:	88 23       	and	r24, r24
    6956:	19 f4       	brne	.+6      	; 0x695e <__vector_29+0x58>
			RSu.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6958:	81 e1       	ldi	r24, 0x11	; 17
    695a:	80 93 3e 23 	sts	0x233E, r24
		}
		RSu.port->OUTSET = (RS485_DE_bm | RS485_RE_bm);	// enable DE (active hi)
    695e:	e0 91 43 23 	lds	r30, 0x2343
    6962:	f0 91 44 23 	lds	r31, 0x2344
    6966:	80 e3       	ldi	r24, 0x30	; 48
    6968:	85 83       	std	Z+5, r24	; 0x05
														// disable RE (active lo)
		RSu.usart->DATA = RSu.tx_buf[RSu.tx_buf_tail];	// write char to TX DATA reg
    696a:	a0 91 41 23 	lds	r26, 0x2341
    696e:	b0 91 42 23 	lds	r27, 0x2342
    6972:	e0 91 3e 23 	lds	r30, 0x233E
    6976:	f0 e0       	ldi	r31, 0x00	; 0
    6978:	e6 5c       	subi	r30, 0xC6	; 198
    697a:	fc 4d       	sbci	r31, 0xDC	; 220
    697c:	85 8d       	ldd	r24, Z+29	; 0x1d
    697e:	8c 93       	st	X, r24
	}
}
    6980:	ff 91       	pop	r31
    6982:	ef 91       	pop	r30
    6984:	bf 91       	pop	r27
    6986:	af 91       	pop	r26
    6988:	9f 91       	pop	r25
    698a:	8f 91       	pop	r24
    698c:	0f 90       	pop	r0
    698e:	0b be       	out	0x3b, r0	; 59
    6990:	0f 90       	pop	r0
    6992:	0f be       	out	0x3f, r0	; 63
    6994:	0f 90       	pop	r0
    6996:	1f 90       	pop	r1
    6998:	18 95       	reti

0000699a <__vector_30>:

/* Note: Finding a buffer empty condition on the first byte of a string is common 
 * as the TX byte is often written by the task itself */

ISR(RS485_TXC_ISR_vect)		// ISR(USARTC1_TXC_vect) // USARTC1 transmission complete
{
    699a:	1f 92       	push	r1
    699c:	0f 92       	push	r0
    699e:	0f b6       	in	r0, 0x3f	; 63
    69a0:	0f 92       	push	r0
    69a2:	0b b6       	in	r0, 0x3b	; 59
    69a4:	0f 92       	push	r0
    69a6:	11 24       	eor	r1, r1
    69a8:	8f 93       	push	r24
    69aa:	ef 93       	push	r30
    69ac:	ff 93       	push	r31
		RSu.port->OUTCLR = (RS485_DE_bm | RS485_RE_bm);	// disable DE (active hi)
    69ae:	e0 91 43 23 	lds	r30, 0x2343
    69b2:	f0 91 44 23 	lds	r31, 0x2344
    69b6:	80 e3       	ldi	r24, 0x30	; 48
    69b8:	86 83       	std	Z+6, r24	; 0x06
														// enable RE (active lo)
}
    69ba:	ff 91       	pop	r31
    69bc:	ef 91       	pop	r30
    69be:	8f 91       	pop	r24
    69c0:	0f 90       	pop	r0
    69c2:	0b be       	out	0x3b, r0	; 59
    69c4:	0f 90       	pop	r0
    69c6:	0f be       	out	0x3f, r0	; 63
    69c8:	0f 90       	pop	r0
    69ca:	1f 90       	pop	r1
    69cc:	18 95       	reti

000069ce <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)	//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    69ce:	1f 92       	push	r1
    69d0:	0f 92       	push	r0
    69d2:	0f b6       	in	r0, 0x3f	; 63
    69d4:	0f 92       	push	r0
    69d6:	0b b6       	in	r0, 0x3b	; 59
    69d8:	0f 92       	push	r0
    69da:	11 24       	eor	r1, r1
    69dc:	2f 93       	push	r18
    69de:	3f 93       	push	r19
    69e0:	4f 93       	push	r20
    69e2:	5f 93       	push	r21
    69e4:	6f 93       	push	r22
    69e6:	7f 93       	push	r23
    69e8:	8f 93       	push	r24
    69ea:	9f 93       	push	r25
    69ec:	af 93       	push	r26
    69ee:	bf 93       	push	r27
    69f0:	ef 93       	push	r30
    69f2:	ff 93       	push	r31
	uint8_t c = RSu.usart->DATA;				// can only read DATA once
    69f4:	e0 91 41 23 	lds	r30, 0x2341
    69f8:	f0 91 42 23 	lds	r31, 0x2342
    69fc:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    69fe:	23 30       	cpi	r18, 0x03	; 3
    6a00:	31 f4       	brne	.+12     	; 0x6a0e <__vector_28+0x40>
		RS.sig = XIO_SIG_KILL;					// set signal value
    6a02:	84 e0       	ldi	r24, 0x04	; 4
    6a04:	80 93 dc 23 	sts	0x23DC, r24
		signal_etx();							// call app-specific signal handler
    6a08:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <signal_etx>
    6a0c:	25 c0       	rjmp	.+74     	; 0x6a58 <__vector_28+0x8a>
		return;
	}

	// normal path
	if ((--RSu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    6a0e:	80 91 3d 23 	lds	r24, 0x233D
    6a12:	81 50       	subi	r24, 0x01	; 1
    6a14:	80 93 3d 23 	sts	0x233D, r24
    6a18:	80 91 3d 23 	lds	r24, 0x233D
    6a1c:	88 23       	and	r24, r24
    6a1e:	19 f4       	brne	.+6      	; 0x6a26 <__vector_28+0x58>
		RSu.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6a20:	81 e1       	ldi	r24, 0x11	; 17
    6a22:	80 93 3d 23 	sts	0x233D, r24
	}
	if (RSu.rx_buf_head != RSu.rx_buf_tail) {	// write char unless buffer full
    6a26:	90 91 3d 23 	lds	r25, 0x233D
    6a2a:	80 91 3c 23 	lds	r24, 0x233C
    6a2e:	98 17       	cp	r25, r24
    6a30:	39 f0       	breq	.+14     	; 0x6a40 <__vector_28+0x72>
		RSu.rx_buf[RSu.rx_buf_head] = c;		// (= USARTC0.DATA;)
    6a32:	e0 91 3d 23 	lds	r30, 0x233D
    6a36:	f0 e0       	ldi	r31, 0x00	; 0
    6a38:	e6 5c       	subi	r30, 0xC6	; 198
    6a3a:	fc 4d       	sbci	r31, 0xDC	; 220
    6a3c:	23 87       	std	Z+11, r18	; 0x0b
    6a3e:	0c c0       	rjmp	.+24     	; 0x6a58 <__vector_28+0x8a>
		return;
	}
	// buffer-full handling
	if ((++RSu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6a40:	80 91 3d 23 	lds	r24, 0x233D
    6a44:	8f 5f       	subi	r24, 0xFF	; 255
    6a46:	80 93 3d 23 	sts	0x233D, r24
    6a4a:	80 91 3d 23 	lds	r24, 0x233D
    6a4e:	82 31       	cpi	r24, 0x12	; 18
    6a50:	18 f0       	brcs	.+6      	; 0x6a58 <__vector_28+0x8a>
		RSu.rx_buf_head = 1;
    6a52:	81 e0       	ldi	r24, 0x01	; 1
    6a54:	80 93 3d 23 	sts	0x233D, r24
	}
	// activate flow control here or before it gets to this level
}
    6a58:	ff 91       	pop	r31
    6a5a:	ef 91       	pop	r30
    6a5c:	bf 91       	pop	r27
    6a5e:	af 91       	pop	r26
    6a60:	9f 91       	pop	r25
    6a62:	8f 91       	pop	r24
    6a64:	7f 91       	pop	r23
    6a66:	6f 91       	pop	r22
    6a68:	5f 91       	pop	r21
    6a6a:	4f 91       	pop	r20
    6a6c:	3f 91       	pop	r19
    6a6e:	2f 91       	pop	r18
    6a70:	0f 90       	pop	r0
    6a72:	0b be       	out	0x3b, r0	; 59
    6a74:	0f 90       	pop	r0
    6a76:	0f be       	out	0x3f, r0	; 63
    6a78:	0f 90       	pop	r0
    6a7a:	1f 90       	pop	r1
    6a7c:	18 95       	reti

00006a7e <xio_init_rs485>:
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
void xio_queue_RX_string_rs485(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_RS485, buf);}
void xio_init_rs485()	// RS485 init
{
    6a7e:	8f 92       	push	r8
    6a80:	af 92       	push	r10
    6a82:	cf 92       	push	r12
    6a84:	ef 92       	push	r14
    6a86:	ff 92       	push	r15
    6a88:	0f 93       	push	r16
    6a8a:	1f 93       	push	r17
	xio_init_dev(XIO_DEV_RS485, xio_open_rs485, xio_setflags_rs485, xio_putc_rs485, xio_getc_rs485, xio_readln_rs485);
    6a8c:	80 e0       	ldi	r24, 0x00	; 0
    6a8e:	6e e7       	ldi	r22, 0x7E	; 126
    6a90:	74 e3       	ldi	r23, 0x34	; 52
    6a92:	4c e8       	ldi	r20, 0x8C	; 140
    6a94:	55 e3       	ldi	r21, 0x35	; 53
    6a96:	25 e8       	ldi	r18, 0x85	; 133
    6a98:	35 e3       	ldi	r19, 0x35	; 53
    6a9a:	00 e8       	ldi	r16, 0x80	; 128
    6a9c:	15 e3       	ldi	r17, 0x35	; 53
    6a9e:	a9 e7       	ldi	r26, 0x79	; 121
    6aa0:	ea 2e       	mov	r14, r26
    6aa2:	a5 e3       	ldi	r26, 0x35	; 53
    6aa4:	fa 2e       	mov	r15, r26
    6aa6:	0e 94 37 29 	call	0x526e	; 0x526e <xio_init_dev>
	xio_init_usart(XIO_DEV_RS485, XIO_DEV_RS485_OFFSET, RS485_INIT_bm, &RS485_USART, &RS485_PORT, RS485_DIRCLR_bm, RS485_DIRSET_bm, RS485_OUTCLR_bm, RS485_OUTSET_bm);
    6aaa:	80 e0       	ldi	r24, 0x00	; 0
    6aac:	60 e0       	ldi	r22, 0x00	; 0
    6aae:	45 e7       	ldi	r20, 0x75	; 117
    6ab0:	55 e1       	ldi	r21, 0x15	; 21
    6ab2:	20 eb       	ldi	r18, 0xB0	; 176
    6ab4:	38 e0       	ldi	r19, 0x08	; 8
    6ab6:	00 e4       	ldi	r16, 0x40	; 64
    6ab8:	16 e0       	ldi	r17, 0x06	; 6
    6aba:	f0 e4       	ldi	r31, 0x40	; 64
    6abc:	ef 2e       	mov	r14, r31
    6abe:	e0 eb       	ldi	r30, 0xB0	; 176
    6ac0:	ce 2e       	mov	r12, r30
    6ac2:	70 e3       	ldi	r23, 0x30	; 48
    6ac4:	a7 2e       	mov	r10, r23
    6ac6:	90 e8       	ldi	r25, 0x80	; 128
    6ac8:	89 2e       	mov	r8, r25
    6aca:	0e 94 f7 32 	call	0x65ee	; 0x65ee <xio_init_usart>
}
    6ace:	1f 91       	pop	r17
    6ad0:	0f 91       	pop	r16
    6ad2:	ff 90       	pop	r15
    6ad4:	ef 90       	pop	r14
    6ad6:	cf 90       	pop	r12
    6ad8:	af 90       	pop	r10
    6ada:	8f 90       	pop	r8
    6adc:	08 95       	ret

00006ade <xio_queue_RX_string_rs485>:
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
void xio_queue_RX_string_rs485(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_RS485, buf);}
    6ade:	bc 01       	movw	r22, r24
    6ae0:	80 e0       	ldi	r24, 0x00	; 0
    6ae2:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <xio_queue_RX_string_usart>
    6ae6:	08 95       	ret

00006ae8 <xio_queue_RX_char_rs485>:
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
    6ae8:	68 2f       	mov	r22, r24
    6aea:	80 e0       	ldi	r24, 0x00	; 0
    6aec:	0e 94 b0 32 	call	0x6560	; 0x6560 <xio_queue_RX_char_usart>
    6af0:	08 95       	ret

00006af2 <xio_readln_rs485>:
/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
    6af2:	9c 01       	movw	r18, r24
    6af4:	46 2f       	mov	r20, r22
    6af6:	80 e0       	ldi	r24, 0x00	; 0
    6af8:	b9 01       	movw	r22, r18
    6afa:	0e 94 9b 31 	call	0x6336	; 0x6336 <xio_readln_usart>
    6afe:	08 95       	ret

00006b00 <xio_getc_rs485>:

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
    6b00:	bc 01       	movw	r22, r24
    6b02:	80 e0       	ldi	r24, 0x00	; 0
    6b04:	0e 94 b8 30 	call	0x6170	; 0x6170 <xio_getc_usart>
    6b08:	08 95       	ret

00006b0a <xio_putc_rs485>:
#define RSu us[XIO_DEV_RS485]					// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
    6b0a:	98 2f       	mov	r25, r24
    6b0c:	ab 01       	movw	r20, r22
    6b0e:	80 e0       	ldi	r24, 0x00	; 0
    6b10:	69 2f       	mov	r22, r25
    6b12:	0e 94 2a 30 	call	0x6054	; 0x6054 <xio_putc_usart>
    6b16:	08 95       	ret

00006b18 <xio_setflags_rs485>:
#define RS ds[XIO_DEV_RS485]					// device struct accessoor
#define RSu us[XIO_DEV_RS485]					// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
    6b18:	bc 01       	movw	r22, r24
    6b1a:	80 e0       	ldi	r24, 0x00	; 0
    6b1c:	0e 94 4e 28 	call	0x509c	; 0x509c <xio_setflags>
    6b20:	08 95       	ret

00006b22 <xio_open_pgm>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

struct __file * xio_open_pgm(const prog_char *addr)
{
	PGM.flags &= XIO_FLAG_RESET_gm;			// reset flag signaling bits
    6b22:	20 91 1e 24 	lds	r18, 0x241E
    6b26:	30 91 1f 24 	lds	r19, 0x241F
    6b2a:	3f 70       	andi	r19, 0x0F	; 15
    6b2c:	20 93 1e 24 	sts	0x241E, r18
    6b30:	30 93 1f 24 	sts	0x241F, r19
	PGM.sig = 0;							// reset signal
    6b34:	10 92 21 24 	sts	0x2421, r1
	PGMf.pgmbase_P = (PROGMEM char *)addr;	// might want to range check this
    6b38:	80 93 cb 23 	sts	0x23CB, r24
    6b3c:	90 93 cc 23 	sts	0x23CC, r25
	PGMf.len = 0;							// initialize buffer pointer
    6b40:	10 92 c9 23 	sts	0x23C9, r1
    6b44:	10 92 ca 23 	sts	0x23CA, r1
	return(PGM.fdev);							// return pointer to the fdev stream
}
    6b48:	80 91 31 24 	lds	r24, 0x2431
    6b4c:	90 91 32 24 	lds	r25, 0x2432
    6b50:	08 95       	ret

00006b52 <xio_putc_pgm>:
 */

int xio_putc_pgm(const char c, struct __file *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    6b52:	8f ef       	ldi	r24, 0xFF	; 255
    6b54:	9f ef       	ldi	r25, 0xFF	; 255
    6b56:	08 95       	ret

00006b58 <xio_readln_pgm>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_pgm(char *buf, const uint8_t size)
{
    6b58:	9c 01       	movw	r18, r24
	if (!(PGMf.pgmbase_P)) {					// return error if no file is open
    6b5a:	80 91 cb 23 	lds	r24, 0x23CB
    6b5e:	90 91 cc 23 	lds	r25, 0x23CC
    6b62:	89 2b       	or	r24, r25
    6b64:	19 f4       	brne	.+6      	; 0x6b6c <xio_readln_pgm+0x14>
    6b66:	26 e0       	ldi	r18, 0x06	; 6
    6b68:	30 e0       	ldi	r19, 0x00	; 0
    6b6a:	1b c0       	rjmp	.+54     	; 0x6ba2 <xio_readln_pgm+0x4a>
		return (XIO_FILE_NOT_OPEN);
	}
	PGM.sig = XIO_SIG_OK;						// initialize signal
    6b6c:	10 92 21 24 	sts	0x2421, r1
	if (fgets(buf, size, PGM.fdev) == NULL) {
    6b70:	40 91 31 24 	lds	r20, 0x2431
    6b74:	50 91 32 24 	lds	r21, 0x2432
    6b78:	c9 01       	movw	r24, r18
    6b7a:	70 e0       	ldi	r23, 0x00	; 0
    6b7c:	0e 94 b3 48 	call	0x9166	; 0x9166 <fgets>
    6b80:	89 2b       	or	r24, r25
    6b82:	19 f0       	breq	.+6      	; 0x6b8a <xio_readln_pgm+0x32>
    6b84:	20 e0       	ldi	r18, 0x00	; 0
    6b86:	30 e0       	ldi	r19, 0x00	; 0
    6b88:	0c c0       	rjmp	.+24     	; 0x6ba2 <xio_readln_pgm+0x4a>
		PGMf.pgmbase_P = NULL;
    6b8a:	10 92 cb 23 	sts	0x23CB, r1
    6b8e:	10 92 cc 23 	sts	0x23CC, r1
		clearerr(PGM.fdev);
    6b92:	80 91 31 24 	lds	r24, 0x2431
    6b96:	90 91 32 24 	lds	r25, 0x2432
    6b9a:	0e 94 ae 48 	call	0x915c	; 0x915c <clearerr>
    6b9e:	25 e0       	ldi	r18, 0x05	; 5
    6ba0:	30 e0       	ldi	r19, 0x00	; 0
		return (XIO_EOF);
	}
	return (XIO_OK);
}
    6ba2:	c9 01       	movw	r24, r18
    6ba4:	08 95       	ret

00006ba6 <xio_getc_pgm>:
 */

int xio_getc_pgm(struct __file *stream)
{

	if (PGM.flags & XIO_FLAG_EOF_bm) {
    6ba6:	20 91 1e 24 	lds	r18, 0x241E
    6baa:	30 91 1f 24 	lds	r19, 0x241F
    6bae:	35 ff       	sbrs	r19, 5
    6bb0:	06 c0       	rjmp	.+12     	; 0x6bbe <xio_getc_pgm+0x18>
		PGM.sig = XIO_SIG_EOF;
    6bb2:	83 e0       	ldi	r24, 0x03	; 3
    6bb4:	80 93 21 24 	sts	0x2421, r24
    6bb8:	2e ef       	ldi	r18, 0xFE	; 254
    6bba:	3f ef       	ldi	r19, 0xFF	; 255
    6bbc:	3e c0       	rjmp	.+124    	; 0x6c3a <xio_getc_pgm+0x94>
		return (_FDEV_EOF);
	}
	if ((PGM.c = pgm_read_byte(&PGMf.pgmbase_P[PGMf.len])) == NUL) {
    6bbe:	80 91 c9 23 	lds	r24, 0x23C9
    6bc2:	90 91 ca 23 	lds	r25, 0x23CA
    6bc6:	e0 91 cb 23 	lds	r30, 0x23CB
    6bca:	f0 91 cc 23 	lds	r31, 0x23CC
    6bce:	e8 0f       	add	r30, r24
    6bd0:	f9 1f       	adc	r31, r25
    6bd2:	e4 91       	lpm	r30, Z+
    6bd4:	e0 93 22 24 	sts	0x2422, r30
    6bd8:	ee 23       	and	r30, r30
    6bda:	29 f4       	brne	.+10     	; 0x6be6 <xio_getc_pgm+0x40>
		PGM.flags |= XIO_FLAG_EOF_bm;
    6bdc:	30 62       	ori	r19, 0x20	; 32
    6bde:	20 93 1e 24 	sts	0x241E, r18
    6be2:	30 93 1f 24 	sts	0x241F, r19
	}
	++PGMf.len;
    6be6:	01 96       	adiw	r24, 0x01	; 1
    6be8:	80 93 c9 23 	sts	0x23C9, r24
    6bec:	90 93 ca 23 	sts	0x23CA, r25
	if (!LINEMODE(PGM.flags)) {			// processing is simple if not LINEMODE
    6bf0:	90 91 1e 24 	lds	r25, 0x241E
    6bf4:	96 fd       	sbrc	r25, 6
    6bf6:	03 c0       	rjmp	.+6      	; 0x6bfe <xio_getc_pgm+0x58>
		if (ECHO(PGM.flags)) {
    6bf8:	94 ff       	sbrs	r25, 4
    6bfa:	1b c0       	rjmp	.+54     	; 0x6c32 <xio_getc_pgm+0x8c>
    6bfc:	11 c0       	rjmp	.+34     	; 0x6c20 <xio_getc_pgm+0x7a>
			putchar(PGM.c);
		}
		return (PGM.c);
	}
	// now do the LINEMODE stuff
	if (PGM.c == NUL) {					// perform newline substitutions
    6bfe:	80 91 22 24 	lds	r24, 0x2422
    6c02:	88 23       	and	r24, r24
    6c04:	31 f0       	breq	.+12     	; 0x6c12 <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if (PGM.c == '\r') {
    6c06:	8d 30       	cpi	r24, 0x0D	; 13
    6c08:	21 f0       	breq	.+8      	; 0x6c12 <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if ((SEMICOLONS(PGM.flags)) && (PGM.c == ';')) {
    6c0a:	97 ff       	sbrs	r25, 7
    6c0c:	05 c0       	rjmp	.+10     	; 0x6c18 <xio_getc_pgm+0x72>
    6c0e:	8b 33       	cpi	r24, 0x3B	; 59
    6c10:	19 f4       	brne	.+6      	; 0x6c18 <xio_getc_pgm+0x72>
		PGM.c = '\n';
    6c12:	8a e0       	ldi	r24, 0x0A	; 10
    6c14:	80 93 22 24 	sts	0x2422, r24
	}
	if (ECHO(PGM.flags)) {
    6c18:	80 91 1e 24 	lds	r24, 0x241E
    6c1c:	84 ff       	sbrs	r24, 4
    6c1e:	09 c0       	rjmp	.+18     	; 0x6c32 <xio_getc_pgm+0x8c>
		putchar(PGM.c);
    6c20:	60 91 1a 25 	lds	r22, 0x251A
    6c24:	70 91 1b 25 	lds	r23, 0x251B
    6c28:	80 91 22 24 	lds	r24, 0x2422
    6c2c:	90 e0       	ldi	r25, 0x00	; 0
    6c2e:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
	}
	return (PGM.c);
    6c32:	80 91 22 24 	lds	r24, 0x2422
    6c36:	28 2f       	mov	r18, r24
    6c38:	30 e0       	ldi	r19, 0x00	; 0
}
    6c3a:	c9 01       	movw	r24, r18
    6c3c:	08 95       	ret

00006c3e <xio_setflags_pgm>:
/*
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
    6c3e:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_PGM, control);
    6c40:	83 e0       	ldi	r24, 0x03	; 3
    6c42:	0e 94 4e 28 	call	0x509c	; 0x509c <xio_setflags>
	return (XIO_OK);									// for now it's always OK
}
    6c46:	80 e0       	ldi	r24, 0x00	; 0
    6c48:	90 e0       	ldi	r25, 0x00	; 0
    6c4a:	08 95       	ret

00006c4c <xio_init_pgm>:
 */

void xio_init_pgm(const uint8_t dev, const uint8_t offset, const uint16_t control)
{
	// bind file struct to extended device parameters
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
    6c4c:	90 e0       	ldi	r25, 0x00	; 0
    6c4e:	27 e1       	ldi	r18, 0x17	; 23
    6c50:	30 e0       	ldi	r19, 0x00	; 0
    6c52:	82 9f       	mul	r24, r18
    6c54:	f0 01       	movw	r30, r0
    6c56:	83 9f       	mul	r24, r19
    6c58:	f0 0d       	add	r31, r0
    6c5a:	92 9f       	mul	r25, r18
    6c5c:	f0 0d       	add	r31, r0
    6c5e:	11 24       	eor	r1, r1
    6c60:	e7 52       	subi	r30, 0x27	; 39
    6c62:	fc 4d       	sbci	r31, 0xDC	; 220
    6c64:	86 e0       	ldi	r24, 0x06	; 6
    6c66:	68 9f       	mul	r22, r24
    6c68:	b0 01       	movw	r22, r0
    6c6a:	11 24       	eor	r1, r1
    6c6c:	69 53       	subi	r22, 0x39	; 57
    6c6e:	7c 4d       	sbci	r23, 0xDC	; 220
    6c70:	61 8b       	std	Z+17, r22	; 0x11
    6c72:	72 8b       	std	Z+18, r23	; 0x12
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
	xio_setflags(XIO_DEV_PGM, control);
    6c74:	83 e0       	ldi	r24, 0x03	; 3
    6c76:	ba 01       	movw	r22, r20
    6c78:	0e 94 4e 28 	call	0x509c	; 0x509c <xio_setflags>
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
	// might be useful to sanity check the control bits before calling set flags
	//	- RD and BLOCK are mandatory
	// 	- WR and NOBLOCK are restricted
	xio_setflags_pgm(control);
}
    6c7c:	08 95       	ret

00006c7e <net_init>:
 */

void net_init() 
{
	
}
    6c7e:	08 95       	ret

00006c80 <tg_repeater>:
void tg_repeater()
{
	char c;

	while (TRUE) {
		c = xio_getc(XIO_DEV_USB);		// blocking read
    6c80:	81 e0       	ldi	r24, 0x01	; 1
    6c82:	0e 94 01 29 	call	0x5202	; 0x5202 <xio_getc>
    6c86:	68 2f       	mov	r22, r24
		xio_putc(XIO_DEV_RS485, c);		// transfer to RS485 port
    6c88:	80 e0       	ldi	r24, 0x00	; 0
    6c8a:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <xio_putc>
    6c8e:	f8 cf       	rjmp	.-16     	; 0x6c80 <tg_repeater>

00006c90 <__lshrdi3>:
    6c90:	ef 92       	push	r14
    6c92:	ff 92       	push	r15
    6c94:	0f 93       	push	r16
    6c96:	df 93       	push	r29
    6c98:	cf 93       	push	r28
    6c9a:	cd b7       	in	r28, 0x3d	; 61
    6c9c:	de b7       	in	r29, 0x3e	; 62
    6c9e:	60 97       	sbiw	r28, 0x10	; 16
    6ca0:	cd bf       	out	0x3d, r28	; 61
    6ca2:	de bf       	out	0x3e, r29	; 62
    6ca4:	a8 2f       	mov	r26, r24
    6ca6:	00 23       	and	r16, r16
    6ca8:	09 f4       	brne	.+2      	; 0x6cac <__lshrdi3+0x1c>
    6caa:	61 c0       	rjmp	.+194    	; 0x6d6e <__lshrdi3+0xde>
    6cac:	7e 01       	movw	r14, r28
    6cae:	08 94       	sec
    6cb0:	e1 1c       	adc	r14, r1
    6cb2:	f1 1c       	adc	r15, r1
    6cb4:	88 e0       	ldi	r24, 0x08	; 8
    6cb6:	f7 01       	movw	r30, r14
    6cb8:	11 92       	st	Z+, r1
    6cba:	8a 95       	dec	r24
    6cbc:	e9 f7       	brne	.-6      	; 0x6cb8 <__lshrdi3+0x28>
    6cbe:	29 83       	std	Y+1, r18	; 0x01
    6cc0:	3a 83       	std	Y+2, r19	; 0x02
    6cc2:	4b 83       	std	Y+3, r20	; 0x03
    6cc4:	5c 83       	std	Y+4, r21	; 0x04
    6cc6:	6d 83       	std	Y+5, r22	; 0x05
    6cc8:	7e 83       	std	Y+6, r23	; 0x06
    6cca:	af 83       	std	Y+7, r26	; 0x07
    6ccc:	98 87       	std	Y+8, r25	; 0x08
    6cce:	80 e2       	ldi	r24, 0x20	; 32
    6cd0:	80 1b       	sub	r24, r16
    6cd2:	e8 2f       	mov	r30, r24
    6cd4:	ff 27       	eor	r31, r31
    6cd6:	e7 fd       	sbrc	r30, 7
    6cd8:	f0 95       	com	r31
    6cda:	4d 81       	ldd	r20, Y+5	; 0x05
    6cdc:	5e 81       	ldd	r21, Y+6	; 0x06
    6cde:	6f 81       	ldd	r22, Y+7	; 0x07
    6ce0:	78 85       	ldd	r23, Y+8	; 0x08
    6ce2:	18 16       	cp	r1, r24
    6ce4:	84 f0       	brlt	.+32     	; 0x6d06 <__lshrdi3+0x76>
    6ce6:	1d 86       	std	Y+13, r1	; 0x0d
    6ce8:	1e 86       	std	Y+14, r1	; 0x0e
    6cea:	1f 86       	std	Y+15, r1	; 0x0f
    6cec:	18 8a       	std	Y+16, r1	; 0x10
    6cee:	88 27       	eor	r24, r24
    6cf0:	99 27       	eor	r25, r25
    6cf2:	8e 1b       	sub	r24, r30
    6cf4:	9f 0b       	sbc	r25, r31
    6cf6:	04 c0       	rjmp	.+8      	; 0x6d00 <__lshrdi3+0x70>
    6cf8:	76 95       	lsr	r23
    6cfa:	67 95       	ror	r22
    6cfc:	57 95       	ror	r21
    6cfe:	47 95       	ror	r20
    6d00:	8a 95       	dec	r24
    6d02:	d2 f7       	brpl	.-12     	; 0x6cf8 <__lshrdi3+0x68>
    6d04:	28 c0       	rjmp	.+80     	; 0x6d56 <__lshrdi3+0xc6>
    6d06:	20 2f       	mov	r18, r16
    6d08:	33 27       	eor	r19, r19
    6d0a:	27 fd       	sbrc	r18, 7
    6d0c:	30 95       	com	r19
    6d0e:	db 01       	movw	r26, r22
    6d10:	ca 01       	movw	r24, r20
    6d12:	02 2e       	mov	r0, r18
    6d14:	04 c0       	rjmp	.+8      	; 0x6d1e <__lshrdi3+0x8e>
    6d16:	b6 95       	lsr	r27
    6d18:	a7 95       	ror	r26
    6d1a:	97 95       	ror	r25
    6d1c:	87 95       	ror	r24
    6d1e:	0a 94       	dec	r0
    6d20:	d2 f7       	brpl	.-12     	; 0x6d16 <__lshrdi3+0x86>
    6d22:	8d 87       	std	Y+13, r24	; 0x0d
    6d24:	9e 87       	std	Y+14, r25	; 0x0e
    6d26:	af 87       	std	Y+15, r26	; 0x0f
    6d28:	b8 8b       	std	Y+16, r27	; 0x10
    6d2a:	04 c0       	rjmp	.+8      	; 0x6d34 <__lshrdi3+0xa4>
    6d2c:	44 0f       	add	r20, r20
    6d2e:	55 1f       	adc	r21, r21
    6d30:	66 1f       	adc	r22, r22
    6d32:	77 1f       	adc	r23, r23
    6d34:	ea 95       	dec	r30
    6d36:	d2 f7       	brpl	.-12     	; 0x6d2c <__lshrdi3+0x9c>
    6d38:	89 81       	ldd	r24, Y+1	; 0x01
    6d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    6d3c:	ab 81       	ldd	r26, Y+3	; 0x03
    6d3e:	bc 81       	ldd	r27, Y+4	; 0x04
    6d40:	04 c0       	rjmp	.+8      	; 0x6d4a <__lshrdi3+0xba>
    6d42:	b6 95       	lsr	r27
    6d44:	a7 95       	ror	r26
    6d46:	97 95       	ror	r25
    6d48:	87 95       	ror	r24
    6d4a:	2a 95       	dec	r18
    6d4c:	d2 f7       	brpl	.-12     	; 0x6d42 <__lshrdi3+0xb2>
    6d4e:	48 2b       	or	r20, r24
    6d50:	59 2b       	or	r21, r25
    6d52:	6a 2b       	or	r22, r26
    6d54:	7b 2b       	or	r23, r27
    6d56:	49 87       	std	Y+9, r20	; 0x09
    6d58:	5a 87       	std	Y+10, r21	; 0x0a
    6d5a:	6b 87       	std	Y+11, r22	; 0x0b
    6d5c:	7c 87       	std	Y+12, r23	; 0x0c
    6d5e:	29 85       	ldd	r18, Y+9	; 0x09
    6d60:	3a 85       	ldd	r19, Y+10	; 0x0a
    6d62:	4b 85       	ldd	r20, Y+11	; 0x0b
    6d64:	5c 85       	ldd	r21, Y+12	; 0x0c
    6d66:	6d 85       	ldd	r22, Y+13	; 0x0d
    6d68:	7e 85       	ldd	r23, Y+14	; 0x0e
    6d6a:	af 85       	ldd	r26, Y+15	; 0x0f
    6d6c:	98 89       	ldd	r25, Y+16	; 0x10
    6d6e:	8a 2f       	mov	r24, r26
    6d70:	60 96       	adiw	r28, 0x10	; 16
    6d72:	cd bf       	out	0x3d, r28	; 61
    6d74:	de bf       	out	0x3e, r29	; 62
    6d76:	cf 91       	pop	r28
    6d78:	df 91       	pop	r29
    6d7a:	0f 91       	pop	r16
    6d7c:	ff 90       	pop	r15
    6d7e:	ef 90       	pop	r14
    6d80:	08 95       	ret

00006d82 <__ashldi3>:
    6d82:	ef 92       	push	r14
    6d84:	ff 92       	push	r15
    6d86:	0f 93       	push	r16
    6d88:	df 93       	push	r29
    6d8a:	cf 93       	push	r28
    6d8c:	cd b7       	in	r28, 0x3d	; 61
    6d8e:	de b7       	in	r29, 0x3e	; 62
    6d90:	60 97       	sbiw	r28, 0x10	; 16
    6d92:	cd bf       	out	0x3d, r28	; 61
    6d94:	de bf       	out	0x3e, r29	; 62
    6d96:	a8 2f       	mov	r26, r24
    6d98:	00 23       	and	r16, r16
    6d9a:	09 f4       	brne	.+2      	; 0x6d9e <__ashldi3+0x1c>
    6d9c:	61 c0       	rjmp	.+194    	; 0x6e60 <__ashldi3+0xde>
    6d9e:	7e 01       	movw	r14, r28
    6da0:	08 94       	sec
    6da2:	e1 1c       	adc	r14, r1
    6da4:	f1 1c       	adc	r15, r1
    6da6:	88 e0       	ldi	r24, 0x08	; 8
    6da8:	f7 01       	movw	r30, r14
    6daa:	11 92       	st	Z+, r1
    6dac:	8a 95       	dec	r24
    6dae:	e9 f7       	brne	.-6      	; 0x6daa <__ashldi3+0x28>
    6db0:	29 83       	std	Y+1, r18	; 0x01
    6db2:	3a 83       	std	Y+2, r19	; 0x02
    6db4:	4b 83       	std	Y+3, r20	; 0x03
    6db6:	5c 83       	std	Y+4, r21	; 0x04
    6db8:	6d 83       	std	Y+5, r22	; 0x05
    6dba:	7e 83       	std	Y+6, r23	; 0x06
    6dbc:	af 83       	std	Y+7, r26	; 0x07
    6dbe:	98 87       	std	Y+8, r25	; 0x08
    6dc0:	80 e2       	ldi	r24, 0x20	; 32
    6dc2:	80 1b       	sub	r24, r16
    6dc4:	e8 2f       	mov	r30, r24
    6dc6:	ff 27       	eor	r31, r31
    6dc8:	e7 fd       	sbrc	r30, 7
    6dca:	f0 95       	com	r31
    6dcc:	49 81       	ldd	r20, Y+1	; 0x01
    6dce:	5a 81       	ldd	r21, Y+2	; 0x02
    6dd0:	6b 81       	ldd	r22, Y+3	; 0x03
    6dd2:	7c 81       	ldd	r23, Y+4	; 0x04
    6dd4:	18 16       	cp	r1, r24
    6dd6:	84 f0       	brlt	.+32     	; 0x6df8 <__ashldi3+0x76>
    6dd8:	19 86       	std	Y+9, r1	; 0x09
    6dda:	1a 86       	std	Y+10, r1	; 0x0a
    6ddc:	1b 86       	std	Y+11, r1	; 0x0b
    6dde:	1c 86       	std	Y+12, r1	; 0x0c
    6de0:	88 27       	eor	r24, r24
    6de2:	99 27       	eor	r25, r25
    6de4:	8e 1b       	sub	r24, r30
    6de6:	9f 0b       	sbc	r25, r31
    6de8:	04 c0       	rjmp	.+8      	; 0x6df2 <__ashldi3+0x70>
    6dea:	44 0f       	add	r20, r20
    6dec:	55 1f       	adc	r21, r21
    6dee:	66 1f       	adc	r22, r22
    6df0:	77 1f       	adc	r23, r23
    6df2:	8a 95       	dec	r24
    6df4:	d2 f7       	brpl	.-12     	; 0x6dea <__ashldi3+0x68>
    6df6:	28 c0       	rjmp	.+80     	; 0x6e48 <__ashldi3+0xc6>
    6df8:	20 2f       	mov	r18, r16
    6dfa:	33 27       	eor	r19, r19
    6dfc:	27 fd       	sbrc	r18, 7
    6dfe:	30 95       	com	r19
    6e00:	db 01       	movw	r26, r22
    6e02:	ca 01       	movw	r24, r20
    6e04:	02 2e       	mov	r0, r18
    6e06:	04 c0       	rjmp	.+8      	; 0x6e10 <__ashldi3+0x8e>
    6e08:	88 0f       	add	r24, r24
    6e0a:	99 1f       	adc	r25, r25
    6e0c:	aa 1f       	adc	r26, r26
    6e0e:	bb 1f       	adc	r27, r27
    6e10:	0a 94       	dec	r0
    6e12:	d2 f7       	brpl	.-12     	; 0x6e08 <__ashldi3+0x86>
    6e14:	89 87       	std	Y+9, r24	; 0x09
    6e16:	9a 87       	std	Y+10, r25	; 0x0a
    6e18:	ab 87       	std	Y+11, r26	; 0x0b
    6e1a:	bc 87       	std	Y+12, r27	; 0x0c
    6e1c:	04 c0       	rjmp	.+8      	; 0x6e26 <__ashldi3+0xa4>
    6e1e:	76 95       	lsr	r23
    6e20:	67 95       	ror	r22
    6e22:	57 95       	ror	r21
    6e24:	47 95       	ror	r20
    6e26:	ea 95       	dec	r30
    6e28:	d2 f7       	brpl	.-12     	; 0x6e1e <__ashldi3+0x9c>
    6e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    6e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    6e2e:	af 81       	ldd	r26, Y+7	; 0x07
    6e30:	b8 85       	ldd	r27, Y+8	; 0x08
    6e32:	04 c0       	rjmp	.+8      	; 0x6e3c <__ashldi3+0xba>
    6e34:	88 0f       	add	r24, r24
    6e36:	99 1f       	adc	r25, r25
    6e38:	aa 1f       	adc	r26, r26
    6e3a:	bb 1f       	adc	r27, r27
    6e3c:	2a 95       	dec	r18
    6e3e:	d2 f7       	brpl	.-12     	; 0x6e34 <__ashldi3+0xb2>
    6e40:	48 2b       	or	r20, r24
    6e42:	59 2b       	or	r21, r25
    6e44:	6a 2b       	or	r22, r26
    6e46:	7b 2b       	or	r23, r27
    6e48:	4d 87       	std	Y+13, r20	; 0x0d
    6e4a:	5e 87       	std	Y+14, r21	; 0x0e
    6e4c:	6f 87       	std	Y+15, r22	; 0x0f
    6e4e:	78 8b       	std	Y+16, r23	; 0x10
    6e50:	29 85       	ldd	r18, Y+9	; 0x09
    6e52:	3a 85       	ldd	r19, Y+10	; 0x0a
    6e54:	4b 85       	ldd	r20, Y+11	; 0x0b
    6e56:	5c 85       	ldd	r21, Y+12	; 0x0c
    6e58:	6d 85       	ldd	r22, Y+13	; 0x0d
    6e5a:	7e 85       	ldd	r23, Y+14	; 0x0e
    6e5c:	af 85       	ldd	r26, Y+15	; 0x0f
    6e5e:	98 89       	ldd	r25, Y+16	; 0x10
    6e60:	8a 2f       	mov	r24, r26
    6e62:	60 96       	adiw	r28, 0x10	; 16
    6e64:	cd bf       	out	0x3d, r28	; 61
    6e66:	de bf       	out	0x3e, r29	; 62
    6e68:	cf 91       	pop	r28
    6e6a:	df 91       	pop	r29
    6e6c:	0f 91       	pop	r16
    6e6e:	ff 90       	pop	r15
    6e70:	ef 90       	pop	r14
    6e72:	08 95       	ret

00006e74 <__udivdi3>:
    6e74:	ae e5       	ldi	r26, 0x5E	; 94
    6e76:	b0 e0       	ldi	r27, 0x00	; 0
    6e78:	e0 e4       	ldi	r30, 0x40	; 64
    6e7a:	f7 e3       	ldi	r31, 0x37	; 55
    6e7c:	0c 94 cd 45 	jmp	0x8b9a	; 0x8b9a <__prologue_saves__>
    6e80:	a8 e0       	ldi	r26, 0x08	; 8
    6e82:	4e 01       	movw	r8, r28
    6e84:	08 94       	sec
    6e86:	81 1c       	adc	r8, r1
    6e88:	91 1c       	adc	r9, r1
    6e8a:	f4 01       	movw	r30, r8
    6e8c:	6a 2e       	mov	r6, r26
    6e8e:	11 92       	st	Z+, r1
    6e90:	6a 94       	dec	r6
    6e92:	e9 f7       	brne	.-6      	; 0x6e8e <__udivdi3+0x1a>
    6e94:	29 83       	std	Y+1, r18	; 0x01
    6e96:	3a 83       	std	Y+2, r19	; 0x02
    6e98:	4b 83       	std	Y+3, r20	; 0x03
    6e9a:	5c 83       	std	Y+4, r21	; 0x04
    6e9c:	6d 83       	std	Y+5, r22	; 0x05
    6e9e:	7e 83       	std	Y+6, r23	; 0x06
    6ea0:	8f 83       	std	Y+7, r24	; 0x07
    6ea2:	98 87       	std	Y+8, r25	; 0x08
    6ea4:	ce 01       	movw	r24, r28
    6ea6:	09 96       	adiw	r24, 0x09	; 9
    6ea8:	fc 01       	movw	r30, r24
    6eaa:	11 92       	st	Z+, r1
    6eac:	aa 95       	dec	r26
    6eae:	e9 f7       	brne	.-6      	; 0x6eaa <__udivdi3+0x36>
    6eb0:	a9 86       	std	Y+9, r10	; 0x09
    6eb2:	ba 86       	std	Y+10, r11	; 0x0a
    6eb4:	cb 86       	std	Y+11, r12	; 0x0b
    6eb6:	dc 86       	std	Y+12, r13	; 0x0c
    6eb8:	ed 86       	std	Y+13, r14	; 0x0d
    6eba:	fe 86       	std	Y+14, r15	; 0x0e
    6ebc:	0f 87       	std	Y+15, r16	; 0x0f
    6ebe:	18 8b       	std	Y+16, r17	; 0x10
    6ec0:	29 84       	ldd	r2, Y+9	; 0x09
    6ec2:	3a 84       	ldd	r3, Y+10	; 0x0a
    6ec4:	4b 84       	ldd	r4, Y+11	; 0x0b
    6ec6:	5c 84       	ldd	r5, Y+12	; 0x0c
    6ec8:	ed 84       	ldd	r14, Y+13	; 0x0d
    6eca:	fe 84       	ldd	r15, Y+14	; 0x0e
    6ecc:	0f 85       	ldd	r16, Y+15	; 0x0f
    6ece:	18 89       	ldd	r17, Y+16	; 0x10
    6ed0:	69 80       	ldd	r6, Y+1	; 0x01
    6ed2:	7a 80       	ldd	r7, Y+2	; 0x02
    6ed4:	8b 80       	ldd	r8, Y+3	; 0x03
    6ed6:	9c 80       	ldd	r9, Y+4	; 0x04
    6ed8:	6d a6       	std	Y+45, r6	; 0x2d
    6eda:	7e a6       	std	Y+46, r7	; 0x2e
    6edc:	8f a6       	std	Y+47, r8	; 0x2f
    6ede:	98 aa       	std	Y+48, r9	; 0x30
    6ee0:	6d 80       	ldd	r6, Y+5	; 0x05
    6ee2:	7e 80       	ldd	r7, Y+6	; 0x06
    6ee4:	8f 80       	ldd	r8, Y+7	; 0x07
    6ee6:	98 84       	ldd	r9, Y+8	; 0x08
    6ee8:	e1 14       	cp	r14, r1
    6eea:	f1 04       	cpc	r15, r1
    6eec:	01 05       	cpc	r16, r1
    6eee:	11 05       	cpc	r17, r1
    6ef0:	09 f0       	breq	.+2      	; 0x6ef4 <__udivdi3+0x80>
    6ef2:	b3 c3       	rjmp	.+1894   	; 0x765a <__udivdi3+0x7e6>
    6ef4:	62 14       	cp	r6, r2
    6ef6:	73 04       	cpc	r7, r3
    6ef8:	84 04       	cpc	r8, r4
    6efa:	95 04       	cpc	r9, r5
    6efc:	08 f0       	brcs	.+2      	; 0x6f00 <__udivdi3+0x8c>
    6efe:	3d c1       	rjmp	.+634    	; 0x717a <__udivdi3+0x306>
    6f00:	00 e0       	ldi	r16, 0x00	; 0
    6f02:	20 16       	cp	r2, r16
    6f04:	00 e0       	ldi	r16, 0x00	; 0
    6f06:	30 06       	cpc	r3, r16
    6f08:	01 e0       	ldi	r16, 0x01	; 1
    6f0a:	40 06       	cpc	r4, r16
    6f0c:	00 e0       	ldi	r16, 0x00	; 0
    6f0e:	50 06       	cpc	r5, r16
    6f10:	88 f4       	brcc	.+34     	; 0x6f34 <__udivdi3+0xc0>
    6f12:	1f ef       	ldi	r17, 0xFF	; 255
    6f14:	21 16       	cp	r2, r17
    6f16:	31 04       	cpc	r3, r1
    6f18:	41 04       	cpc	r4, r1
    6f1a:	51 04       	cpc	r5, r1
    6f1c:	39 f0       	breq	.+14     	; 0x6f2c <__udivdi3+0xb8>
    6f1e:	30 f0       	brcs	.+12     	; 0x6f2c <__udivdi3+0xb8>
    6f20:	48 e0       	ldi	r20, 0x08	; 8
    6f22:	e4 2e       	mov	r14, r20
    6f24:	f1 2c       	mov	r15, r1
    6f26:	01 2d       	mov	r16, r1
    6f28:	11 2d       	mov	r17, r1
    6f2a:	18 c0       	rjmp	.+48     	; 0x6f5c <__udivdi3+0xe8>
    6f2c:	ee 24       	eor	r14, r14
    6f2e:	ff 24       	eor	r15, r15
    6f30:	87 01       	movw	r16, r14
    6f32:	14 c0       	rjmp	.+40     	; 0x6f5c <__udivdi3+0xe8>
    6f34:	20 e0       	ldi	r18, 0x00	; 0
    6f36:	22 16       	cp	r2, r18
    6f38:	20 e0       	ldi	r18, 0x00	; 0
    6f3a:	32 06       	cpc	r3, r18
    6f3c:	20 e0       	ldi	r18, 0x00	; 0
    6f3e:	42 06       	cpc	r4, r18
    6f40:	21 e0       	ldi	r18, 0x01	; 1
    6f42:	52 06       	cpc	r5, r18
    6f44:	30 f0       	brcs	.+12     	; 0x6f52 <__udivdi3+0xde>
    6f46:	38 e1       	ldi	r19, 0x18	; 24
    6f48:	e3 2e       	mov	r14, r19
    6f4a:	f1 2c       	mov	r15, r1
    6f4c:	01 2d       	mov	r16, r1
    6f4e:	11 2d       	mov	r17, r1
    6f50:	05 c0       	rjmp	.+10     	; 0x6f5c <__udivdi3+0xe8>
    6f52:	20 e1       	ldi	r18, 0x10	; 16
    6f54:	e2 2e       	mov	r14, r18
    6f56:	f1 2c       	mov	r15, r1
    6f58:	01 2d       	mov	r16, r1
    6f5a:	11 2d       	mov	r17, r1
    6f5c:	d2 01       	movw	r26, r4
    6f5e:	c1 01       	movw	r24, r2
    6f60:	0e 2c       	mov	r0, r14
    6f62:	04 c0       	rjmp	.+8      	; 0x6f6c <__udivdi3+0xf8>
    6f64:	b6 95       	lsr	r27
    6f66:	a7 95       	ror	r26
    6f68:	97 95       	ror	r25
    6f6a:	87 95       	ror	r24
    6f6c:	0a 94       	dec	r0
    6f6e:	d2 f7       	brpl	.-12     	; 0x6f64 <__udivdi3+0xf0>
    6f70:	85 5e       	subi	r24, 0xE5	; 229
    6f72:	9f 4d       	sbci	r25, 0xDF	; 223
    6f74:	dc 01       	movw	r26, r24
    6f76:	2c 91       	ld	r18, X
    6f78:	80 e2       	ldi	r24, 0x20	; 32
    6f7a:	90 e0       	ldi	r25, 0x00	; 0
    6f7c:	a0 e0       	ldi	r26, 0x00	; 0
    6f7e:	b0 e0       	ldi	r27, 0x00	; 0
    6f80:	8e 19       	sub	r24, r14
    6f82:	9f 09       	sbc	r25, r15
    6f84:	a0 0b       	sbc	r26, r16
    6f86:	b1 0b       	sbc	r27, r17
    6f88:	7c 01       	movw	r14, r24
    6f8a:	8d 01       	movw	r16, r26
    6f8c:	e2 1a       	sub	r14, r18
    6f8e:	f1 08       	sbc	r15, r1
    6f90:	01 09       	sbc	r16, r1
    6f92:	11 09       	sbc	r17, r1
    6f94:	e1 14       	cp	r14, r1
    6f96:	f1 04       	cpc	r15, r1
    6f98:	01 05       	cpc	r16, r1
    6f9a:	11 05       	cpc	r17, r1
    6f9c:	a1 f1       	breq	.+104    	; 0x7006 <__udivdi3+0x192>
    6f9e:	0e 2c       	mov	r0, r14
    6fa0:	04 c0       	rjmp	.+8      	; 0x6faa <__udivdi3+0x136>
    6fa2:	22 0c       	add	r2, r2
    6fa4:	33 1c       	adc	r3, r3
    6fa6:	44 1c       	adc	r4, r4
    6fa8:	55 1c       	adc	r5, r5
    6faa:	0a 94       	dec	r0
    6fac:	d2 f7       	brpl	.-12     	; 0x6fa2 <__udivdi3+0x12e>
    6fae:	a4 01       	movw	r20, r8
    6fb0:	93 01       	movw	r18, r6
    6fb2:	0e 2c       	mov	r0, r14
    6fb4:	04 c0       	rjmp	.+8      	; 0x6fbe <__udivdi3+0x14a>
    6fb6:	22 0f       	add	r18, r18
    6fb8:	33 1f       	adc	r19, r19
    6fba:	44 1f       	adc	r20, r20
    6fbc:	55 1f       	adc	r21, r21
    6fbe:	0a 94       	dec	r0
    6fc0:	d2 f7       	brpl	.-12     	; 0x6fb6 <__udivdi3+0x142>
    6fc2:	80 e2       	ldi	r24, 0x20	; 32
    6fc4:	90 e0       	ldi	r25, 0x00	; 0
    6fc6:	8e 19       	sub	r24, r14
    6fc8:	9f 09       	sbc	r25, r15
    6fca:	6d a4       	ldd	r6, Y+45	; 0x2d
    6fcc:	7e a4       	ldd	r7, Y+46	; 0x2e
    6fce:	8f a4       	ldd	r8, Y+47	; 0x2f
    6fd0:	98 a8       	ldd	r9, Y+48	; 0x30
    6fd2:	04 c0       	rjmp	.+8      	; 0x6fdc <__udivdi3+0x168>
    6fd4:	96 94       	lsr	r9
    6fd6:	87 94       	ror	r8
    6fd8:	77 94       	ror	r7
    6fda:	67 94       	ror	r6
    6fdc:	8a 95       	dec	r24
    6fde:	d2 f7       	brpl	.-12     	; 0x6fd4 <__udivdi3+0x160>
    6fe0:	62 2a       	or	r6, r18
    6fe2:	73 2a       	or	r7, r19
    6fe4:	84 2a       	or	r8, r20
    6fe6:	95 2a       	or	r9, r21
    6fe8:	ad a4       	ldd	r10, Y+45	; 0x2d
    6fea:	be a4       	ldd	r11, Y+46	; 0x2e
    6fec:	cf a4       	ldd	r12, Y+47	; 0x2f
    6fee:	d8 a8       	ldd	r13, Y+48	; 0x30
    6ff0:	04 c0       	rjmp	.+8      	; 0x6ffa <__udivdi3+0x186>
    6ff2:	aa 0c       	add	r10, r10
    6ff4:	bb 1c       	adc	r11, r11
    6ff6:	cc 1c       	adc	r12, r12
    6ff8:	dd 1c       	adc	r13, r13
    6ffa:	ea 94       	dec	r14
    6ffc:	d2 f7       	brpl	.-12     	; 0x6ff2 <__udivdi3+0x17e>
    6ffe:	ad a6       	std	Y+45, r10	; 0x2d
    7000:	be a6       	std	Y+46, r11	; 0x2e
    7002:	cf a6       	std	Y+47, r12	; 0x2f
    7004:	d8 aa       	std	Y+48, r13	; 0x30
    7006:	62 01       	movw	r12, r4
    7008:	ee 24       	eor	r14, r14
    700a:	ff 24       	eor	r15, r15
    700c:	cd aa       	std	Y+53, r12	; 0x35
    700e:	de aa       	std	Y+54, r13	; 0x36
    7010:	ef aa       	std	Y+55, r14	; 0x37
    7012:	f8 ae       	std	Y+56, r15	; 0x38
    7014:	92 01       	movw	r18, r4
    7016:	81 01       	movw	r16, r2
    7018:	20 70       	andi	r18, 0x00	; 0
    701a:	30 70       	andi	r19, 0x00	; 0
    701c:	09 af       	std	Y+57, r16	; 0x39
    701e:	1a af       	std	Y+58, r17	; 0x3a
    7020:	2b af       	std	Y+59, r18	; 0x3b
    7022:	3c af       	std	Y+60, r19	; 0x3c
    7024:	c4 01       	movw	r24, r8
    7026:	b3 01       	movw	r22, r6
    7028:	a7 01       	movw	r20, r14
    702a:	96 01       	movw	r18, r12
    702c:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    7030:	7b 01       	movw	r14, r22
    7032:	8c 01       	movw	r16, r24
    7034:	c4 01       	movw	r24, r8
    7036:	b3 01       	movw	r22, r6
    7038:	2d a9       	ldd	r18, Y+53	; 0x35
    703a:	3e a9       	ldd	r19, Y+54	; 0x36
    703c:	4f a9       	ldd	r20, Y+55	; 0x37
    703e:	58 ad       	ldd	r21, Y+56	; 0x38
    7040:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    7044:	c9 01       	movw	r24, r18
    7046:	da 01       	movw	r26, r20
    7048:	3c 01       	movw	r6, r24
    704a:	4d 01       	movw	r8, r26
    704c:	c4 01       	movw	r24, r8
    704e:	b3 01       	movw	r22, r6
    7050:	29 ad       	ldd	r18, Y+57	; 0x39
    7052:	3a ad       	ldd	r19, Y+58	; 0x3a
    7054:	4b ad       	ldd	r20, Y+59	; 0x3b
    7056:	5c ad       	ldd	r21, Y+60	; 0x3c
    7058:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <__mulsi3>
    705c:	9b 01       	movw	r18, r22
    705e:	ac 01       	movw	r20, r24
    7060:	87 01       	movw	r16, r14
    7062:	ff 24       	eor	r15, r15
    7064:	ee 24       	eor	r14, r14
    7066:	ad a4       	ldd	r10, Y+45	; 0x2d
    7068:	be a4       	ldd	r11, Y+46	; 0x2e
    706a:	cf a4       	ldd	r12, Y+47	; 0x2f
    706c:	d8 a8       	ldd	r13, Y+48	; 0x30
    706e:	c6 01       	movw	r24, r12
    7070:	aa 27       	eor	r26, r26
    7072:	bb 27       	eor	r27, r27
    7074:	57 01       	movw	r10, r14
    7076:	68 01       	movw	r12, r16
    7078:	a8 2a       	or	r10, r24
    707a:	b9 2a       	or	r11, r25
    707c:	ca 2a       	or	r12, r26
    707e:	db 2a       	or	r13, r27
    7080:	a2 16       	cp	r10, r18
    7082:	b3 06       	cpc	r11, r19
    7084:	c4 06       	cpc	r12, r20
    7086:	d5 06       	cpc	r13, r21
    7088:	e0 f4       	brcc	.+56     	; 0x70c2 <__udivdi3+0x24e>
    708a:	08 94       	sec
    708c:	61 08       	sbc	r6, r1
    708e:	71 08       	sbc	r7, r1
    7090:	81 08       	sbc	r8, r1
    7092:	91 08       	sbc	r9, r1
    7094:	a2 0c       	add	r10, r2
    7096:	b3 1c       	adc	r11, r3
    7098:	c4 1c       	adc	r12, r4
    709a:	d5 1c       	adc	r13, r5
    709c:	a2 14       	cp	r10, r2
    709e:	b3 04       	cpc	r11, r3
    70a0:	c4 04       	cpc	r12, r4
    70a2:	d5 04       	cpc	r13, r5
    70a4:	70 f0       	brcs	.+28     	; 0x70c2 <__udivdi3+0x24e>
    70a6:	a2 16       	cp	r10, r18
    70a8:	b3 06       	cpc	r11, r19
    70aa:	c4 06       	cpc	r12, r20
    70ac:	d5 06       	cpc	r13, r21
    70ae:	48 f4       	brcc	.+18     	; 0x70c2 <__udivdi3+0x24e>
    70b0:	08 94       	sec
    70b2:	61 08       	sbc	r6, r1
    70b4:	71 08       	sbc	r7, r1
    70b6:	81 08       	sbc	r8, r1
    70b8:	91 08       	sbc	r9, r1
    70ba:	a2 0c       	add	r10, r2
    70bc:	b3 1c       	adc	r11, r3
    70be:	c4 1c       	adc	r12, r4
    70c0:	d5 1c       	adc	r13, r5
    70c2:	a2 1a       	sub	r10, r18
    70c4:	b3 0a       	sbc	r11, r19
    70c6:	c4 0a       	sbc	r12, r20
    70c8:	d5 0a       	sbc	r13, r21
    70ca:	c6 01       	movw	r24, r12
    70cc:	b5 01       	movw	r22, r10
    70ce:	2d a9       	ldd	r18, Y+53	; 0x35
    70d0:	3e a9       	ldd	r19, Y+54	; 0x36
    70d2:	4f a9       	ldd	r20, Y+55	; 0x37
    70d4:	58 ad       	ldd	r21, Y+56	; 0x38
    70d6:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    70da:	7b 01       	movw	r14, r22
    70dc:	8c 01       	movw	r16, r24
    70de:	c6 01       	movw	r24, r12
    70e0:	b5 01       	movw	r22, r10
    70e2:	2d a9       	ldd	r18, Y+53	; 0x35
    70e4:	3e a9       	ldd	r19, Y+54	; 0x36
    70e6:	4f a9       	ldd	r20, Y+55	; 0x37
    70e8:	58 ad       	ldd	r21, Y+56	; 0x38
    70ea:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    70ee:	c9 01       	movw	r24, r18
    70f0:	da 01       	movw	r26, r20
    70f2:	5c 01       	movw	r10, r24
    70f4:	6d 01       	movw	r12, r26
    70f6:	c6 01       	movw	r24, r12
    70f8:	b5 01       	movw	r22, r10
    70fa:	29 ad       	ldd	r18, Y+57	; 0x39
    70fc:	3a ad       	ldd	r19, Y+58	; 0x3a
    70fe:	4b ad       	ldd	r20, Y+59	; 0x3b
    7100:	5c ad       	ldd	r21, Y+60	; 0x3c
    7102:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <__mulsi3>
    7106:	9b 01       	movw	r18, r22
    7108:	ac 01       	movw	r20, r24
    710a:	87 01       	movw	r16, r14
    710c:	ff 24       	eor	r15, r15
    710e:	ee 24       	eor	r14, r14
    7110:	8d a5       	ldd	r24, Y+45	; 0x2d
    7112:	9e a5       	ldd	r25, Y+46	; 0x2e
    7114:	af a5       	ldd	r26, Y+47	; 0x2f
    7116:	b8 a9       	ldd	r27, Y+48	; 0x30
    7118:	a0 70       	andi	r26, 0x00	; 0
    711a:	b0 70       	andi	r27, 0x00	; 0
    711c:	e8 2a       	or	r14, r24
    711e:	f9 2a       	or	r15, r25
    7120:	0a 2b       	or	r16, r26
    7122:	1b 2b       	or	r17, r27
    7124:	e2 16       	cp	r14, r18
    7126:	f3 06       	cpc	r15, r19
    7128:	04 07       	cpc	r16, r20
    712a:	15 07       	cpc	r17, r21
    712c:	c0 f4       	brcc	.+48     	; 0x715e <__udivdi3+0x2ea>
    712e:	08 94       	sec
    7130:	a1 08       	sbc	r10, r1
    7132:	b1 08       	sbc	r11, r1
    7134:	c1 08       	sbc	r12, r1
    7136:	d1 08       	sbc	r13, r1
    7138:	e2 0c       	add	r14, r2
    713a:	f3 1c       	adc	r15, r3
    713c:	04 1d       	adc	r16, r4
    713e:	15 1d       	adc	r17, r5
    7140:	e2 14       	cp	r14, r2
    7142:	f3 04       	cpc	r15, r3
    7144:	04 05       	cpc	r16, r4
    7146:	15 05       	cpc	r17, r5
    7148:	50 f0       	brcs	.+20     	; 0x715e <__udivdi3+0x2ea>
    714a:	e2 16       	cp	r14, r18
    714c:	f3 06       	cpc	r15, r19
    714e:	04 07       	cpc	r16, r20
    7150:	15 07       	cpc	r17, r21
    7152:	28 f4       	brcc	.+10     	; 0x715e <__udivdi3+0x2ea>
    7154:	08 94       	sec
    7156:	a1 08       	sbc	r10, r1
    7158:	b1 08       	sbc	r11, r1
    715a:	c1 08       	sbc	r12, r1
    715c:	d1 08       	sbc	r13, r1
    715e:	d3 01       	movw	r26, r6
    7160:	99 27       	eor	r25, r25
    7162:	88 27       	eor	r24, r24
    7164:	86 01       	movw	r16, r12
    7166:	75 01       	movw	r14, r10
    7168:	e8 2a       	or	r14, r24
    716a:	f9 2a       	or	r15, r25
    716c:	0a 2b       	or	r16, r26
    716e:	1b 2b       	or	r17, r27
    7170:	e9 aa       	std	Y+49, r14	; 0x31
    7172:	fa aa       	std	Y+50, r15	; 0x32
    7174:	0b ab       	std	Y+51, r16	; 0x33
    7176:	1c ab       	std	Y+52, r17	; 0x34
    7178:	cf c4       	rjmp	.+2462   	; 0x7b18 <__udivdi3+0xca4>
    717a:	21 14       	cp	r2, r1
    717c:	31 04       	cpc	r3, r1
    717e:	41 04       	cpc	r4, r1
    7180:	51 04       	cpc	r5, r1
    7182:	71 f4       	brne	.+28     	; 0x71a0 <__udivdi3+0x32c>
    7184:	61 e0       	ldi	r22, 0x01	; 1
    7186:	70 e0       	ldi	r23, 0x00	; 0
    7188:	80 e0       	ldi	r24, 0x00	; 0
    718a:	90 e0       	ldi	r25, 0x00	; 0
    718c:	20 e0       	ldi	r18, 0x00	; 0
    718e:	30 e0       	ldi	r19, 0x00	; 0
    7190:	40 e0       	ldi	r20, 0x00	; 0
    7192:	50 e0       	ldi	r21, 0x00	; 0
    7194:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    7198:	c9 01       	movw	r24, r18
    719a:	da 01       	movw	r26, r20
    719c:	1c 01       	movw	r2, r24
    719e:	2d 01       	movw	r4, r26
    71a0:	00 e0       	ldi	r16, 0x00	; 0
    71a2:	20 16       	cp	r2, r16
    71a4:	00 e0       	ldi	r16, 0x00	; 0
    71a6:	30 06       	cpc	r3, r16
    71a8:	01 e0       	ldi	r16, 0x01	; 1
    71aa:	40 06       	cpc	r4, r16
    71ac:	00 e0       	ldi	r16, 0x00	; 0
    71ae:	50 06       	cpc	r5, r16
    71b0:	88 f4       	brcc	.+34     	; 0x71d4 <__udivdi3+0x360>
    71b2:	1f ef       	ldi	r17, 0xFF	; 255
    71b4:	21 16       	cp	r2, r17
    71b6:	31 04       	cpc	r3, r1
    71b8:	41 04       	cpc	r4, r1
    71ba:	51 04       	cpc	r5, r1
    71bc:	31 f0       	breq	.+12     	; 0x71ca <__udivdi3+0x356>
    71be:	28 f0       	brcs	.+10     	; 0x71ca <__udivdi3+0x356>
    71c0:	48 e0       	ldi	r20, 0x08	; 8
    71c2:	50 e0       	ldi	r21, 0x00	; 0
    71c4:	60 e0       	ldi	r22, 0x00	; 0
    71c6:	70 e0       	ldi	r23, 0x00	; 0
    71c8:	17 c0       	rjmp	.+46     	; 0x71f8 <__udivdi3+0x384>
    71ca:	40 e0       	ldi	r20, 0x00	; 0
    71cc:	50 e0       	ldi	r21, 0x00	; 0
    71ce:	60 e0       	ldi	r22, 0x00	; 0
    71d0:	70 e0       	ldi	r23, 0x00	; 0
    71d2:	12 c0       	rjmp	.+36     	; 0x71f8 <__udivdi3+0x384>
    71d4:	20 e0       	ldi	r18, 0x00	; 0
    71d6:	22 16       	cp	r2, r18
    71d8:	20 e0       	ldi	r18, 0x00	; 0
    71da:	32 06       	cpc	r3, r18
    71dc:	20 e0       	ldi	r18, 0x00	; 0
    71de:	42 06       	cpc	r4, r18
    71e0:	21 e0       	ldi	r18, 0x01	; 1
    71e2:	52 06       	cpc	r5, r18
    71e4:	28 f0       	brcs	.+10     	; 0x71f0 <__udivdi3+0x37c>
    71e6:	48 e1       	ldi	r20, 0x18	; 24
    71e8:	50 e0       	ldi	r21, 0x00	; 0
    71ea:	60 e0       	ldi	r22, 0x00	; 0
    71ec:	70 e0       	ldi	r23, 0x00	; 0
    71ee:	04 c0       	rjmp	.+8      	; 0x71f8 <__udivdi3+0x384>
    71f0:	40 e1       	ldi	r20, 0x10	; 16
    71f2:	50 e0       	ldi	r21, 0x00	; 0
    71f4:	60 e0       	ldi	r22, 0x00	; 0
    71f6:	70 e0       	ldi	r23, 0x00	; 0
    71f8:	d2 01       	movw	r26, r4
    71fa:	c1 01       	movw	r24, r2
    71fc:	04 2e       	mov	r0, r20
    71fe:	04 c0       	rjmp	.+8      	; 0x7208 <__udivdi3+0x394>
    7200:	b6 95       	lsr	r27
    7202:	a7 95       	ror	r26
    7204:	97 95       	ror	r25
    7206:	87 95       	ror	r24
    7208:	0a 94       	dec	r0
    720a:	d2 f7       	brpl	.-12     	; 0x7200 <__udivdi3+0x38c>
    720c:	85 5e       	subi	r24, 0xE5	; 229
    720e:	9f 4d       	sbci	r25, 0xDF	; 223
    7210:	dc 01       	movw	r26, r24
    7212:	2c 91       	ld	r18, X
    7214:	e0 e2       	ldi	r30, 0x20	; 32
    7216:	ee 2e       	mov	r14, r30
    7218:	f1 2c       	mov	r15, r1
    721a:	01 2d       	mov	r16, r1
    721c:	11 2d       	mov	r17, r1
    721e:	d8 01       	movw	r26, r16
    7220:	c7 01       	movw	r24, r14
    7222:	84 1b       	sub	r24, r20
    7224:	95 0b       	sbc	r25, r21
    7226:	a6 0b       	sbc	r26, r22
    7228:	b7 0b       	sbc	r27, r23
    722a:	82 1b       	sub	r24, r18
    722c:	91 09       	sbc	r25, r1
    722e:	a1 09       	sbc	r26, r1
    7230:	b1 09       	sbc	r27, r1
    7232:	00 97       	sbiw	r24, 0x00	; 0
    7234:	a1 05       	cpc	r26, r1
    7236:	b1 05       	cpc	r27, r1
    7238:	61 f4       	brne	.+24     	; 0x7252 <__udivdi3+0x3de>
    723a:	64 01       	movw	r12, r8
    723c:	53 01       	movw	r10, r6
    723e:	a2 18       	sub	r10, r2
    7240:	b3 08       	sbc	r11, r3
    7242:	c4 08       	sbc	r12, r4
    7244:	d5 08       	sbc	r13, r5
    7246:	31 e0       	ldi	r19, 0x01	; 1
    7248:	63 2e       	mov	r6, r19
    724a:	71 2c       	mov	r7, r1
    724c:	81 2c       	mov	r8, r1
    724e:	91 2c       	mov	r9, r1
    7250:	1e c1       	rjmp	.+572    	; 0x748e <__udivdi3+0x61a>
    7252:	6f 96       	adiw	r28, 0x1f	; 31
    7254:	8f af       	std	Y+63, r24	; 0x3f
    7256:	6f 97       	sbiw	r28, 0x1f	; 31
    7258:	08 2e       	mov	r0, r24
    725a:	04 c0       	rjmp	.+8      	; 0x7264 <__udivdi3+0x3f0>
    725c:	22 0c       	add	r2, r2
    725e:	33 1c       	adc	r3, r3
    7260:	44 1c       	adc	r4, r4
    7262:	55 1c       	adc	r5, r5
    7264:	0a 94       	dec	r0
    7266:	d2 f7       	brpl	.-12     	; 0x725c <__udivdi3+0x3e8>
    7268:	ee 2d       	mov	r30, r14
    726a:	e8 1b       	sub	r30, r24
    726c:	64 01       	movw	r12, r8
    726e:	53 01       	movw	r10, r6
    7270:	0e 2e       	mov	r0, r30
    7272:	04 c0       	rjmp	.+8      	; 0x727c <__udivdi3+0x408>
    7274:	d6 94       	lsr	r13
    7276:	c7 94       	ror	r12
    7278:	b7 94       	ror	r11
    727a:	a7 94       	ror	r10
    727c:	0a 94       	dec	r0
    727e:	d2 f7       	brpl	.-12     	; 0x7274 <__udivdi3+0x400>
    7280:	a4 01       	movw	r20, r8
    7282:	93 01       	movw	r18, r6
    7284:	6f 96       	adiw	r28, 0x1f	; 31
    7286:	0f ac       	ldd	r0, Y+63	; 0x3f
    7288:	6f 97       	sbiw	r28, 0x1f	; 31
    728a:	04 c0       	rjmp	.+8      	; 0x7294 <__udivdi3+0x420>
    728c:	22 0f       	add	r18, r18
    728e:	33 1f       	adc	r19, r19
    7290:	44 1f       	adc	r20, r20
    7292:	55 1f       	adc	r21, r21
    7294:	0a 94       	dec	r0
    7296:	d2 f7       	brpl	.-12     	; 0x728c <__udivdi3+0x418>
    7298:	6d a4       	ldd	r6, Y+45	; 0x2d
    729a:	7e a4       	ldd	r7, Y+46	; 0x2e
    729c:	8f a4       	ldd	r8, Y+47	; 0x2f
    729e:	98 a8       	ldd	r9, Y+48	; 0x30
    72a0:	0e 2e       	mov	r0, r30
    72a2:	04 c0       	rjmp	.+8      	; 0x72ac <__udivdi3+0x438>
    72a4:	96 94       	lsr	r9
    72a6:	87 94       	ror	r8
    72a8:	77 94       	ror	r7
    72aa:	67 94       	ror	r6
    72ac:	0a 94       	dec	r0
    72ae:	d2 f7       	brpl	.-12     	; 0x72a4 <__udivdi3+0x430>
    72b0:	84 01       	movw	r16, r8
    72b2:	73 01       	movw	r14, r6
    72b4:	e2 2a       	or	r14, r18
    72b6:	f3 2a       	or	r15, r19
    72b8:	04 2b       	or	r16, r20
    72ba:	15 2b       	or	r17, r21
    72bc:	e9 a6       	std	Y+41, r14	; 0x29
    72be:	fa a6       	std	Y+42, r15	; 0x2a
    72c0:	0b a7       	std	Y+43, r16	; 0x2b
    72c2:	1c a7       	std	Y+44, r17	; 0x2c
    72c4:	32 01       	movw	r6, r4
    72c6:	88 24       	eor	r8, r8
    72c8:	99 24       	eor	r9, r9
    72ca:	92 01       	movw	r18, r4
    72cc:	81 01       	movw	r16, r2
    72ce:	20 70       	andi	r18, 0x00	; 0
    72d0:	30 70       	andi	r19, 0x00	; 0
    72d2:	21 96       	adiw	r28, 0x01	; 1
    72d4:	0c af       	std	Y+60, r16	; 0x3c
    72d6:	1d af       	std	Y+61, r17	; 0x3d
    72d8:	2e af       	std	Y+62, r18	; 0x3e
    72da:	3f af       	std	Y+63, r19	; 0x3f
    72dc:	21 97       	sbiw	r28, 0x01	; 1
    72de:	c6 01       	movw	r24, r12
    72e0:	b5 01       	movw	r22, r10
    72e2:	a4 01       	movw	r20, r8
    72e4:	93 01       	movw	r18, r6
    72e6:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    72ea:	7b 01       	movw	r14, r22
    72ec:	8c 01       	movw	r16, r24
    72ee:	c6 01       	movw	r24, r12
    72f0:	b5 01       	movw	r22, r10
    72f2:	a4 01       	movw	r20, r8
    72f4:	93 01       	movw	r18, r6
    72f6:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    72fa:	c9 01       	movw	r24, r18
    72fc:	da 01       	movw	r26, r20
    72fe:	25 96       	adiw	r28, 0x05	; 5
    7300:	8c af       	std	Y+60, r24	; 0x3c
    7302:	9d af       	std	Y+61, r25	; 0x3d
    7304:	ae af       	std	Y+62, r26	; 0x3e
    7306:	bf af       	std	Y+63, r27	; 0x3f
    7308:	25 97       	sbiw	r28, 0x05	; 5
    730a:	bc 01       	movw	r22, r24
    730c:	cd 01       	movw	r24, r26
    730e:	21 96       	adiw	r28, 0x01	; 1
    7310:	2c ad       	ldd	r18, Y+60	; 0x3c
    7312:	3d ad       	ldd	r19, Y+61	; 0x3d
    7314:	4e ad       	ldd	r20, Y+62	; 0x3e
    7316:	5f ad       	ldd	r21, Y+63	; 0x3f
    7318:	21 97       	sbiw	r28, 0x01	; 1
    731a:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <__mulsi3>
    731e:	9b 01       	movw	r18, r22
    7320:	ac 01       	movw	r20, r24
    7322:	87 01       	movw	r16, r14
    7324:	ff 24       	eor	r15, r15
    7326:	ee 24       	eor	r14, r14
    7328:	a9 a4       	ldd	r10, Y+41	; 0x29
    732a:	ba a4       	ldd	r11, Y+42	; 0x2a
    732c:	cb a4       	ldd	r12, Y+43	; 0x2b
    732e:	dc a4       	ldd	r13, Y+44	; 0x2c
    7330:	c6 01       	movw	r24, r12
    7332:	aa 27       	eor	r26, r26
    7334:	bb 27       	eor	r27, r27
    7336:	5c 01       	movw	r10, r24
    7338:	6d 01       	movw	r12, r26
    733a:	ae 28       	or	r10, r14
    733c:	bf 28       	or	r11, r15
    733e:	c0 2a       	or	r12, r16
    7340:	d1 2a       	or	r13, r17
    7342:	a2 16       	cp	r10, r18
    7344:	b3 06       	cpc	r11, r19
    7346:	c4 06       	cpc	r12, r20
    7348:	d5 06       	cpc	r13, r21
    734a:	60 f5       	brcc	.+88     	; 0x73a4 <__udivdi3+0x530>
    734c:	25 96       	adiw	r28, 0x05	; 5
    734e:	6c ad       	ldd	r22, Y+60	; 0x3c
    7350:	7d ad       	ldd	r23, Y+61	; 0x3d
    7352:	8e ad       	ldd	r24, Y+62	; 0x3e
    7354:	9f ad       	ldd	r25, Y+63	; 0x3f
    7356:	25 97       	sbiw	r28, 0x05	; 5
    7358:	61 50       	subi	r22, 0x01	; 1
    735a:	70 40       	sbci	r23, 0x00	; 0
    735c:	80 40       	sbci	r24, 0x00	; 0
    735e:	90 40       	sbci	r25, 0x00	; 0
    7360:	25 96       	adiw	r28, 0x05	; 5
    7362:	6c af       	std	Y+60, r22	; 0x3c
    7364:	7d af       	std	Y+61, r23	; 0x3d
    7366:	8e af       	std	Y+62, r24	; 0x3e
    7368:	9f af       	std	Y+63, r25	; 0x3f
    736a:	25 97       	sbiw	r28, 0x05	; 5
    736c:	a2 0c       	add	r10, r2
    736e:	b3 1c       	adc	r11, r3
    7370:	c4 1c       	adc	r12, r4
    7372:	d5 1c       	adc	r13, r5
    7374:	a2 14       	cp	r10, r2
    7376:	b3 04       	cpc	r11, r3
    7378:	c4 04       	cpc	r12, r4
    737a:	d5 04       	cpc	r13, r5
    737c:	98 f0       	brcs	.+38     	; 0x73a4 <__udivdi3+0x530>
    737e:	a2 16       	cp	r10, r18
    7380:	b3 06       	cpc	r11, r19
    7382:	c4 06       	cpc	r12, r20
    7384:	d5 06       	cpc	r13, r21
    7386:	70 f4       	brcc	.+28     	; 0x73a4 <__udivdi3+0x530>
    7388:	61 50       	subi	r22, 0x01	; 1
    738a:	70 40       	sbci	r23, 0x00	; 0
    738c:	80 40       	sbci	r24, 0x00	; 0
    738e:	90 40       	sbci	r25, 0x00	; 0
    7390:	25 96       	adiw	r28, 0x05	; 5
    7392:	6c af       	std	Y+60, r22	; 0x3c
    7394:	7d af       	std	Y+61, r23	; 0x3d
    7396:	8e af       	std	Y+62, r24	; 0x3e
    7398:	9f af       	std	Y+63, r25	; 0x3f
    739a:	25 97       	sbiw	r28, 0x05	; 5
    739c:	a2 0c       	add	r10, r2
    739e:	b3 1c       	adc	r11, r3
    73a0:	c4 1c       	adc	r12, r4
    73a2:	d5 1c       	adc	r13, r5
    73a4:	a2 1a       	sub	r10, r18
    73a6:	b3 0a       	sbc	r11, r19
    73a8:	c4 0a       	sbc	r12, r20
    73aa:	d5 0a       	sbc	r13, r21
    73ac:	c6 01       	movw	r24, r12
    73ae:	b5 01       	movw	r22, r10
    73b0:	a4 01       	movw	r20, r8
    73b2:	93 01       	movw	r18, r6
    73b4:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    73b8:	7b 01       	movw	r14, r22
    73ba:	8c 01       	movw	r16, r24
    73bc:	c6 01       	movw	r24, r12
    73be:	b5 01       	movw	r22, r10
    73c0:	a4 01       	movw	r20, r8
    73c2:	93 01       	movw	r18, r6
    73c4:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    73c8:	c9 01       	movw	r24, r18
    73ca:	da 01       	movw	r26, r20
    73cc:	3c 01       	movw	r6, r24
    73ce:	4d 01       	movw	r8, r26
    73d0:	c4 01       	movw	r24, r8
    73d2:	b3 01       	movw	r22, r6
    73d4:	21 96       	adiw	r28, 0x01	; 1
    73d6:	2c ad       	ldd	r18, Y+60	; 0x3c
    73d8:	3d ad       	ldd	r19, Y+61	; 0x3d
    73da:	4e ad       	ldd	r20, Y+62	; 0x3e
    73dc:	5f ad       	ldd	r21, Y+63	; 0x3f
    73de:	21 97       	sbiw	r28, 0x01	; 1
    73e0:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <__mulsi3>
    73e4:	9b 01       	movw	r18, r22
    73e6:	ac 01       	movw	r20, r24
    73e8:	87 01       	movw	r16, r14
    73ea:	ff 24       	eor	r15, r15
    73ec:	ee 24       	eor	r14, r14
    73ee:	89 a5       	ldd	r24, Y+41	; 0x29
    73f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    73f2:	ab a5       	ldd	r26, Y+43	; 0x2b
    73f4:	bc a5       	ldd	r27, Y+44	; 0x2c
    73f6:	a0 70       	andi	r26, 0x00	; 0
    73f8:	b0 70       	andi	r27, 0x00	; 0
    73fa:	57 01       	movw	r10, r14
    73fc:	68 01       	movw	r12, r16
    73fe:	a8 2a       	or	r10, r24
    7400:	b9 2a       	or	r11, r25
    7402:	ca 2a       	or	r12, r26
    7404:	db 2a       	or	r13, r27
    7406:	a2 16       	cp	r10, r18
    7408:	b3 06       	cpc	r11, r19
    740a:	c4 06       	cpc	r12, r20
    740c:	d5 06       	cpc	r13, r21
    740e:	e0 f4       	brcc	.+56     	; 0x7448 <__udivdi3+0x5d4>
    7410:	08 94       	sec
    7412:	61 08       	sbc	r6, r1
    7414:	71 08       	sbc	r7, r1
    7416:	81 08       	sbc	r8, r1
    7418:	91 08       	sbc	r9, r1
    741a:	a2 0c       	add	r10, r2
    741c:	b3 1c       	adc	r11, r3
    741e:	c4 1c       	adc	r12, r4
    7420:	d5 1c       	adc	r13, r5
    7422:	a2 14       	cp	r10, r2
    7424:	b3 04       	cpc	r11, r3
    7426:	c4 04       	cpc	r12, r4
    7428:	d5 04       	cpc	r13, r5
    742a:	70 f0       	brcs	.+28     	; 0x7448 <__udivdi3+0x5d4>
    742c:	a2 16       	cp	r10, r18
    742e:	b3 06       	cpc	r11, r19
    7430:	c4 06       	cpc	r12, r20
    7432:	d5 06       	cpc	r13, r21
    7434:	48 f4       	brcc	.+18     	; 0x7448 <__udivdi3+0x5d4>
    7436:	08 94       	sec
    7438:	61 08       	sbc	r6, r1
    743a:	71 08       	sbc	r7, r1
    743c:	81 08       	sbc	r8, r1
    743e:	91 08       	sbc	r9, r1
    7440:	a2 0c       	add	r10, r2
    7442:	b3 1c       	adc	r11, r3
    7444:	c4 1c       	adc	r12, r4
    7446:	d5 1c       	adc	r13, r5
    7448:	8d a5       	ldd	r24, Y+45	; 0x2d
    744a:	9e a5       	ldd	r25, Y+46	; 0x2e
    744c:	af a5       	ldd	r26, Y+47	; 0x2f
    744e:	b8 a9       	ldd	r27, Y+48	; 0x30
    7450:	6f 96       	adiw	r28, 0x1f	; 31
    7452:	0f ac       	ldd	r0, Y+63	; 0x3f
    7454:	6f 97       	sbiw	r28, 0x1f	; 31
    7456:	04 c0       	rjmp	.+8      	; 0x7460 <__udivdi3+0x5ec>
    7458:	88 0f       	add	r24, r24
    745a:	99 1f       	adc	r25, r25
    745c:	aa 1f       	adc	r26, r26
    745e:	bb 1f       	adc	r27, r27
    7460:	0a 94       	dec	r0
    7462:	d2 f7       	brpl	.-12     	; 0x7458 <__udivdi3+0x5e4>
    7464:	8d a7       	std	Y+45, r24	; 0x2d
    7466:	9e a7       	std	Y+46, r25	; 0x2e
    7468:	af a7       	std	Y+47, r26	; 0x2f
    746a:	b8 ab       	std	Y+48, r27	; 0x30
    746c:	a2 1a       	sub	r10, r18
    746e:	b3 0a       	sbc	r11, r19
    7470:	c4 0a       	sbc	r12, r20
    7472:	d5 0a       	sbc	r13, r21
    7474:	25 96       	adiw	r28, 0x05	; 5
    7476:	ec ac       	ldd	r14, Y+60	; 0x3c
    7478:	fd ac       	ldd	r15, Y+61	; 0x3d
    747a:	0e ad       	ldd	r16, Y+62	; 0x3e
    747c:	1f ad       	ldd	r17, Y+63	; 0x3f
    747e:	25 97       	sbiw	r28, 0x05	; 5
    7480:	d7 01       	movw	r26, r14
    7482:	99 27       	eor	r25, r25
    7484:	88 27       	eor	r24, r24
    7486:	68 2a       	or	r6, r24
    7488:	79 2a       	or	r7, r25
    748a:	8a 2a       	or	r8, r26
    748c:	9b 2a       	or	r9, r27
    748e:	82 01       	movw	r16, r4
    7490:	22 27       	eor	r18, r18
    7492:	33 27       	eor	r19, r19
    7494:	29 96       	adiw	r28, 0x09	; 9
    7496:	0c af       	std	Y+60, r16	; 0x3c
    7498:	1d af       	std	Y+61, r17	; 0x3d
    749a:	2e af       	std	Y+62, r18	; 0x3e
    749c:	3f af       	std	Y+63, r19	; 0x3f
    749e:	29 97       	sbiw	r28, 0x09	; 9
    74a0:	a2 01       	movw	r20, r4
    74a2:	91 01       	movw	r18, r2
    74a4:	40 70       	andi	r20, 0x00	; 0
    74a6:	50 70       	andi	r21, 0x00	; 0
    74a8:	2d 96       	adiw	r28, 0x0d	; 13
    74aa:	2c af       	std	Y+60, r18	; 0x3c
    74ac:	3d af       	std	Y+61, r19	; 0x3d
    74ae:	4e af       	std	Y+62, r20	; 0x3e
    74b0:	5f af       	std	Y+63, r21	; 0x3f
    74b2:	2d 97       	sbiw	r28, 0x0d	; 13
    74b4:	c6 01       	movw	r24, r12
    74b6:	b5 01       	movw	r22, r10
    74b8:	29 96       	adiw	r28, 0x09	; 9
    74ba:	2c ad       	ldd	r18, Y+60	; 0x3c
    74bc:	3d ad       	ldd	r19, Y+61	; 0x3d
    74be:	4e ad       	ldd	r20, Y+62	; 0x3e
    74c0:	5f ad       	ldd	r21, Y+63	; 0x3f
    74c2:	29 97       	sbiw	r28, 0x09	; 9
    74c4:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    74c8:	7b 01       	movw	r14, r22
    74ca:	8c 01       	movw	r16, r24
    74cc:	c6 01       	movw	r24, r12
    74ce:	b5 01       	movw	r22, r10
    74d0:	29 96       	adiw	r28, 0x09	; 9
    74d2:	2c ad       	ldd	r18, Y+60	; 0x3c
    74d4:	3d ad       	ldd	r19, Y+61	; 0x3d
    74d6:	4e ad       	ldd	r20, Y+62	; 0x3e
    74d8:	5f ad       	ldd	r21, Y+63	; 0x3f
    74da:	29 97       	sbiw	r28, 0x09	; 9
    74dc:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    74e0:	c9 01       	movw	r24, r18
    74e2:	da 01       	movw	r26, r20
    74e4:	61 96       	adiw	r28, 0x11	; 17
    74e6:	8c af       	std	Y+60, r24	; 0x3c
    74e8:	9d af       	std	Y+61, r25	; 0x3d
    74ea:	ae af       	std	Y+62, r26	; 0x3e
    74ec:	bf af       	std	Y+63, r27	; 0x3f
    74ee:	61 97       	sbiw	r28, 0x11	; 17
    74f0:	bc 01       	movw	r22, r24
    74f2:	cd 01       	movw	r24, r26
    74f4:	2d 96       	adiw	r28, 0x0d	; 13
    74f6:	2c ad       	ldd	r18, Y+60	; 0x3c
    74f8:	3d ad       	ldd	r19, Y+61	; 0x3d
    74fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    74fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    74fe:	2d 97       	sbiw	r28, 0x0d	; 13
    7500:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <__mulsi3>
    7504:	9b 01       	movw	r18, r22
    7506:	ac 01       	movw	r20, r24
    7508:	87 01       	movw	r16, r14
    750a:	ff 24       	eor	r15, r15
    750c:	ee 24       	eor	r14, r14
    750e:	ad a4       	ldd	r10, Y+45	; 0x2d
    7510:	be a4       	ldd	r11, Y+46	; 0x2e
    7512:	cf a4       	ldd	r12, Y+47	; 0x2f
    7514:	d8 a8       	ldd	r13, Y+48	; 0x30
    7516:	c6 01       	movw	r24, r12
    7518:	aa 27       	eor	r26, r26
    751a:	bb 27       	eor	r27, r27
    751c:	57 01       	movw	r10, r14
    751e:	68 01       	movw	r12, r16
    7520:	a8 2a       	or	r10, r24
    7522:	b9 2a       	or	r11, r25
    7524:	ca 2a       	or	r12, r26
    7526:	db 2a       	or	r13, r27
    7528:	a2 16       	cp	r10, r18
    752a:	b3 06       	cpc	r11, r19
    752c:	c4 06       	cpc	r12, r20
    752e:	d5 06       	cpc	r13, r21
    7530:	60 f5       	brcc	.+88     	; 0x758a <__udivdi3+0x716>
    7532:	61 96       	adiw	r28, 0x11	; 17
    7534:	6c ad       	ldd	r22, Y+60	; 0x3c
    7536:	7d ad       	ldd	r23, Y+61	; 0x3d
    7538:	8e ad       	ldd	r24, Y+62	; 0x3e
    753a:	9f ad       	ldd	r25, Y+63	; 0x3f
    753c:	61 97       	sbiw	r28, 0x11	; 17
    753e:	61 50       	subi	r22, 0x01	; 1
    7540:	70 40       	sbci	r23, 0x00	; 0
    7542:	80 40       	sbci	r24, 0x00	; 0
    7544:	90 40       	sbci	r25, 0x00	; 0
    7546:	61 96       	adiw	r28, 0x11	; 17
    7548:	6c af       	std	Y+60, r22	; 0x3c
    754a:	7d af       	std	Y+61, r23	; 0x3d
    754c:	8e af       	std	Y+62, r24	; 0x3e
    754e:	9f af       	std	Y+63, r25	; 0x3f
    7550:	61 97       	sbiw	r28, 0x11	; 17
    7552:	a2 0c       	add	r10, r2
    7554:	b3 1c       	adc	r11, r3
    7556:	c4 1c       	adc	r12, r4
    7558:	d5 1c       	adc	r13, r5
    755a:	a2 14       	cp	r10, r2
    755c:	b3 04       	cpc	r11, r3
    755e:	c4 04       	cpc	r12, r4
    7560:	d5 04       	cpc	r13, r5
    7562:	98 f0       	brcs	.+38     	; 0x758a <__udivdi3+0x716>
    7564:	a2 16       	cp	r10, r18
    7566:	b3 06       	cpc	r11, r19
    7568:	c4 06       	cpc	r12, r20
    756a:	d5 06       	cpc	r13, r21
    756c:	70 f4       	brcc	.+28     	; 0x758a <__udivdi3+0x716>
    756e:	61 50       	subi	r22, 0x01	; 1
    7570:	70 40       	sbci	r23, 0x00	; 0
    7572:	80 40       	sbci	r24, 0x00	; 0
    7574:	90 40       	sbci	r25, 0x00	; 0
    7576:	61 96       	adiw	r28, 0x11	; 17
    7578:	6c af       	std	Y+60, r22	; 0x3c
    757a:	7d af       	std	Y+61, r23	; 0x3d
    757c:	8e af       	std	Y+62, r24	; 0x3e
    757e:	9f af       	std	Y+63, r25	; 0x3f
    7580:	61 97       	sbiw	r28, 0x11	; 17
    7582:	a2 0c       	add	r10, r2
    7584:	b3 1c       	adc	r11, r3
    7586:	c4 1c       	adc	r12, r4
    7588:	d5 1c       	adc	r13, r5
    758a:	a2 1a       	sub	r10, r18
    758c:	b3 0a       	sbc	r11, r19
    758e:	c4 0a       	sbc	r12, r20
    7590:	d5 0a       	sbc	r13, r21
    7592:	c6 01       	movw	r24, r12
    7594:	b5 01       	movw	r22, r10
    7596:	29 96       	adiw	r28, 0x09	; 9
    7598:	2c ad       	ldd	r18, Y+60	; 0x3c
    759a:	3d ad       	ldd	r19, Y+61	; 0x3d
    759c:	4e ad       	ldd	r20, Y+62	; 0x3e
    759e:	5f ad       	ldd	r21, Y+63	; 0x3f
    75a0:	29 97       	sbiw	r28, 0x09	; 9
    75a2:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    75a6:	7b 01       	movw	r14, r22
    75a8:	8c 01       	movw	r16, r24
    75aa:	c6 01       	movw	r24, r12
    75ac:	b5 01       	movw	r22, r10
    75ae:	29 96       	adiw	r28, 0x09	; 9
    75b0:	2c ad       	ldd	r18, Y+60	; 0x3c
    75b2:	3d ad       	ldd	r19, Y+61	; 0x3d
    75b4:	4e ad       	ldd	r20, Y+62	; 0x3e
    75b6:	5f ad       	ldd	r21, Y+63	; 0x3f
    75b8:	29 97       	sbiw	r28, 0x09	; 9
    75ba:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    75be:	c9 01       	movw	r24, r18
    75c0:	da 01       	movw	r26, r20
    75c2:	5c 01       	movw	r10, r24
    75c4:	6d 01       	movw	r12, r26
    75c6:	c6 01       	movw	r24, r12
    75c8:	b5 01       	movw	r22, r10
    75ca:	2d 96       	adiw	r28, 0x0d	; 13
    75cc:	2c ad       	ldd	r18, Y+60	; 0x3c
    75ce:	3d ad       	ldd	r19, Y+61	; 0x3d
    75d0:	4e ad       	ldd	r20, Y+62	; 0x3e
    75d2:	5f ad       	ldd	r21, Y+63	; 0x3f
    75d4:	2d 97       	sbiw	r28, 0x0d	; 13
    75d6:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <__mulsi3>
    75da:	9b 01       	movw	r18, r22
    75dc:	ac 01       	movw	r20, r24
    75de:	87 01       	movw	r16, r14
    75e0:	ff 24       	eor	r15, r15
    75e2:	ee 24       	eor	r14, r14
    75e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    75e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    75e8:	af a5       	ldd	r26, Y+47	; 0x2f
    75ea:	b8 a9       	ldd	r27, Y+48	; 0x30
    75ec:	a0 70       	andi	r26, 0x00	; 0
    75ee:	b0 70       	andi	r27, 0x00	; 0
    75f0:	e8 2a       	or	r14, r24
    75f2:	f9 2a       	or	r15, r25
    75f4:	0a 2b       	or	r16, r26
    75f6:	1b 2b       	or	r17, r27
    75f8:	e2 16       	cp	r14, r18
    75fa:	f3 06       	cpc	r15, r19
    75fc:	04 07       	cpc	r16, r20
    75fe:	15 07       	cpc	r17, r21
    7600:	c0 f4       	brcc	.+48     	; 0x7632 <__udivdi3+0x7be>
    7602:	08 94       	sec
    7604:	a1 08       	sbc	r10, r1
    7606:	b1 08       	sbc	r11, r1
    7608:	c1 08       	sbc	r12, r1
    760a:	d1 08       	sbc	r13, r1
    760c:	e2 0c       	add	r14, r2
    760e:	f3 1c       	adc	r15, r3
    7610:	04 1d       	adc	r16, r4
    7612:	15 1d       	adc	r17, r5
    7614:	e2 14       	cp	r14, r2
    7616:	f3 04       	cpc	r15, r3
    7618:	04 05       	cpc	r16, r4
    761a:	15 05       	cpc	r17, r5
    761c:	50 f0       	brcs	.+20     	; 0x7632 <__udivdi3+0x7be>
    761e:	e2 16       	cp	r14, r18
    7620:	f3 06       	cpc	r15, r19
    7622:	04 07       	cpc	r16, r20
    7624:	15 07       	cpc	r17, r21
    7626:	28 f4       	brcc	.+10     	; 0x7632 <__udivdi3+0x7be>
    7628:	08 94       	sec
    762a:	a1 08       	sbc	r10, r1
    762c:	b1 08       	sbc	r11, r1
    762e:	c1 08       	sbc	r12, r1
    7630:	d1 08       	sbc	r13, r1
    7632:	61 96       	adiw	r28, 0x11	; 17
    7634:	ec ac       	ldd	r14, Y+60	; 0x3c
    7636:	fd ac       	ldd	r15, Y+61	; 0x3d
    7638:	0e ad       	ldd	r16, Y+62	; 0x3e
    763a:	1f ad       	ldd	r17, Y+63	; 0x3f
    763c:	61 97       	sbiw	r28, 0x11	; 17
    763e:	d7 01       	movw	r26, r14
    7640:	99 27       	eor	r25, r25
    7642:	88 27       	eor	r24, r24
    7644:	96 01       	movw	r18, r12
    7646:	85 01       	movw	r16, r10
    7648:	08 2b       	or	r16, r24
    764a:	19 2b       	or	r17, r25
    764c:	2a 2b       	or	r18, r26
    764e:	3b 2b       	or	r19, r27
    7650:	09 ab       	std	Y+49, r16	; 0x31
    7652:	1a ab       	std	Y+50, r17	; 0x32
    7654:	2b ab       	std	Y+51, r18	; 0x33
    7656:	3c ab       	std	Y+52, r19	; 0x34
    7658:	62 c2       	rjmp	.+1220   	; 0x7b1e <__udivdi3+0xcaa>
    765a:	6e 14       	cp	r6, r14
    765c:	7f 04       	cpc	r7, r15
    765e:	80 06       	cpc	r8, r16
    7660:	91 06       	cpc	r9, r17
    7662:	08 f4       	brcc	.+2      	; 0x7666 <__udivdi3+0x7f2>
    7664:	51 c2       	rjmp	.+1186   	; 0x7b08 <__udivdi3+0xc94>
    7666:	20 e0       	ldi	r18, 0x00	; 0
    7668:	e2 16       	cp	r14, r18
    766a:	20 e0       	ldi	r18, 0x00	; 0
    766c:	f2 06       	cpc	r15, r18
    766e:	21 e0       	ldi	r18, 0x01	; 1
    7670:	02 07       	cpc	r16, r18
    7672:	20 e0       	ldi	r18, 0x00	; 0
    7674:	12 07       	cpc	r17, r18
    7676:	88 f4       	brcc	.+34     	; 0x769a <__udivdi3+0x826>
    7678:	3f ef       	ldi	r19, 0xFF	; 255
    767a:	e3 16       	cp	r14, r19
    767c:	f1 04       	cpc	r15, r1
    767e:	01 05       	cpc	r16, r1
    7680:	11 05       	cpc	r17, r1
    7682:	31 f0       	breq	.+12     	; 0x7690 <__udivdi3+0x81c>
    7684:	28 f0       	brcs	.+10     	; 0x7690 <__udivdi3+0x81c>
    7686:	48 e0       	ldi	r20, 0x08	; 8
    7688:	50 e0       	ldi	r21, 0x00	; 0
    768a:	60 e0       	ldi	r22, 0x00	; 0
    768c:	70 e0       	ldi	r23, 0x00	; 0
    768e:	17 c0       	rjmp	.+46     	; 0x76be <__udivdi3+0x84a>
    7690:	40 e0       	ldi	r20, 0x00	; 0
    7692:	50 e0       	ldi	r21, 0x00	; 0
    7694:	60 e0       	ldi	r22, 0x00	; 0
    7696:	70 e0       	ldi	r23, 0x00	; 0
    7698:	12 c0       	rjmp	.+36     	; 0x76be <__udivdi3+0x84a>
    769a:	40 e0       	ldi	r20, 0x00	; 0
    769c:	e4 16       	cp	r14, r20
    769e:	40 e0       	ldi	r20, 0x00	; 0
    76a0:	f4 06       	cpc	r15, r20
    76a2:	40 e0       	ldi	r20, 0x00	; 0
    76a4:	04 07       	cpc	r16, r20
    76a6:	41 e0       	ldi	r20, 0x01	; 1
    76a8:	14 07       	cpc	r17, r20
    76aa:	28 f0       	brcs	.+10     	; 0x76b6 <__udivdi3+0x842>
    76ac:	48 e1       	ldi	r20, 0x18	; 24
    76ae:	50 e0       	ldi	r21, 0x00	; 0
    76b0:	60 e0       	ldi	r22, 0x00	; 0
    76b2:	70 e0       	ldi	r23, 0x00	; 0
    76b4:	04 c0       	rjmp	.+8      	; 0x76be <__udivdi3+0x84a>
    76b6:	40 e1       	ldi	r20, 0x10	; 16
    76b8:	50 e0       	ldi	r21, 0x00	; 0
    76ba:	60 e0       	ldi	r22, 0x00	; 0
    76bc:	70 e0       	ldi	r23, 0x00	; 0
    76be:	d8 01       	movw	r26, r16
    76c0:	c7 01       	movw	r24, r14
    76c2:	04 2e       	mov	r0, r20
    76c4:	04 c0       	rjmp	.+8      	; 0x76ce <__udivdi3+0x85a>
    76c6:	b6 95       	lsr	r27
    76c8:	a7 95       	ror	r26
    76ca:	97 95       	ror	r25
    76cc:	87 95       	ror	r24
    76ce:	0a 94       	dec	r0
    76d0:	d2 f7       	brpl	.-12     	; 0x76c6 <__udivdi3+0x852>
    76d2:	85 5e       	subi	r24, 0xE5	; 229
    76d4:	9f 4d       	sbci	r25, 0xDF	; 223
    76d6:	dc 01       	movw	r26, r24
    76d8:	2c 91       	ld	r18, X
    76da:	30 e2       	ldi	r19, 0x20	; 32
    76dc:	a3 2e       	mov	r10, r19
    76de:	b1 2c       	mov	r11, r1
    76e0:	c1 2c       	mov	r12, r1
    76e2:	d1 2c       	mov	r13, r1
    76e4:	d6 01       	movw	r26, r12
    76e6:	c5 01       	movw	r24, r10
    76e8:	84 1b       	sub	r24, r20
    76ea:	95 0b       	sbc	r25, r21
    76ec:	a6 0b       	sbc	r26, r22
    76ee:	b7 0b       	sbc	r27, r23
    76f0:	82 1b       	sub	r24, r18
    76f2:	91 09       	sbc	r25, r1
    76f4:	a1 09       	sbc	r26, r1
    76f6:	b1 09       	sbc	r27, r1
    76f8:	00 97       	sbiw	r24, 0x00	; 0
    76fa:	a1 05       	cpc	r26, r1
    76fc:	b1 05       	cpc	r27, r1
    76fe:	89 f4       	brne	.+34     	; 0x7722 <__udivdi3+0x8ae>
    7700:	e6 14       	cp	r14, r6
    7702:	f7 04       	cpc	r15, r7
    7704:	08 05       	cpc	r16, r8
    7706:	19 05       	cpc	r17, r9
    7708:	08 f4       	brcc	.+2      	; 0x770c <__udivdi3+0x898>
    770a:	f2 c1       	rjmp	.+996    	; 0x7af0 <__udivdi3+0xc7c>
    770c:	6d a4       	ldd	r6, Y+45	; 0x2d
    770e:	7e a4       	ldd	r7, Y+46	; 0x2e
    7710:	8f a4       	ldd	r8, Y+47	; 0x2f
    7712:	98 a8       	ldd	r9, Y+48	; 0x30
    7714:	62 14       	cp	r6, r2
    7716:	73 04       	cpc	r7, r3
    7718:	84 04       	cpc	r8, r4
    771a:	95 04       	cpc	r9, r5
    771c:	08 f0       	brcs	.+2      	; 0x7720 <__udivdi3+0x8ac>
    771e:	e8 c1       	rjmp	.+976    	; 0x7af0 <__udivdi3+0xc7c>
    7720:	f3 c1       	rjmp	.+998    	; 0x7b08 <__udivdi3+0xc94>
    7722:	6e 96       	adiw	r28, 0x1e	; 30
    7724:	8f af       	std	Y+63, r24	; 0x3f
    7726:	6e 97       	sbiw	r28, 0x1e	; 30
    7728:	08 2e       	mov	r0, r24
    772a:	04 c0       	rjmp	.+8      	; 0x7734 <__udivdi3+0x8c0>
    772c:	ee 0c       	add	r14, r14
    772e:	ff 1c       	adc	r15, r15
    7730:	00 1f       	adc	r16, r16
    7732:	11 1f       	adc	r17, r17
    7734:	0a 94       	dec	r0
    7736:	d2 f7       	brpl	.-12     	; 0x772c <__udivdi3+0x8b8>
    7738:	6a 2d       	mov	r22, r10
    773a:	68 1b       	sub	r22, r24
    773c:	d2 01       	movw	r26, r4
    773e:	c1 01       	movw	r24, r2
    7740:	06 2e       	mov	r0, r22
    7742:	04 c0       	rjmp	.+8      	; 0x774c <__udivdi3+0x8d8>
    7744:	b6 95       	lsr	r27
    7746:	a7 95       	ror	r26
    7748:	97 95       	ror	r25
    774a:	87 95       	ror	r24
    774c:	0a 94       	dec	r0
    774e:	d2 f7       	brpl	.-12     	; 0x7744 <__udivdi3+0x8d0>
    7750:	5c 01       	movw	r10, r24
    7752:	6d 01       	movw	r12, r26
    7754:	ae 28       	or	r10, r14
    7756:	bf 28       	or	r11, r15
    7758:	c0 2a       	or	r12, r16
    775a:	d1 2a       	or	r13, r17
    775c:	ad a2       	std	Y+37, r10	; 0x25
    775e:	be a2       	std	Y+38, r11	; 0x26
    7760:	cf a2       	std	Y+39, r12	; 0x27
    7762:	d8 a6       	std	Y+40, r13	; 0x28
    7764:	72 01       	movw	r14, r4
    7766:	61 01       	movw	r12, r2
    7768:	6e 96       	adiw	r28, 0x1e	; 30
    776a:	0f ac       	ldd	r0, Y+63	; 0x3f
    776c:	6e 97       	sbiw	r28, 0x1e	; 30
    776e:	04 c0       	rjmp	.+8      	; 0x7778 <__udivdi3+0x904>
    7770:	cc 0c       	add	r12, r12
    7772:	dd 1c       	adc	r13, r13
    7774:	ee 1c       	adc	r14, r14
    7776:	ff 1c       	adc	r15, r15
    7778:	0a 94       	dec	r0
    777a:	d2 f7       	brpl	.-12     	; 0x7770 <__udivdi3+0x8fc>
    777c:	c9 a2       	std	Y+33, r12	; 0x21
    777e:	da a2       	std	Y+34, r13	; 0x22
    7780:	eb a2       	std	Y+35, r14	; 0x23
    7782:	fc a2       	std	Y+36, r15	; 0x24
    7784:	64 01       	movw	r12, r8
    7786:	53 01       	movw	r10, r6
    7788:	06 2e       	mov	r0, r22
    778a:	04 c0       	rjmp	.+8      	; 0x7794 <__udivdi3+0x920>
    778c:	d6 94       	lsr	r13
    778e:	c7 94       	ror	r12
    7790:	b7 94       	ror	r11
    7792:	a7 94       	ror	r10
    7794:	0a 94       	dec	r0
    7796:	d2 f7       	brpl	.-12     	; 0x778c <__udivdi3+0x918>
    7798:	d4 01       	movw	r26, r8
    779a:	c3 01       	movw	r24, r6
    779c:	6e 96       	adiw	r28, 0x1e	; 30
    779e:	0f ac       	ldd	r0, Y+63	; 0x3f
    77a0:	6e 97       	sbiw	r28, 0x1e	; 30
    77a2:	04 c0       	rjmp	.+8      	; 0x77ac <__udivdi3+0x938>
    77a4:	88 0f       	add	r24, r24
    77a6:	99 1f       	adc	r25, r25
    77a8:	aa 1f       	adc	r26, r26
    77aa:	bb 1f       	adc	r27, r27
    77ac:	0a 94       	dec	r0
    77ae:	d2 f7       	brpl	.-12     	; 0x77a4 <__udivdi3+0x930>
    77b0:	ed a4       	ldd	r14, Y+45	; 0x2d
    77b2:	fe a4       	ldd	r15, Y+46	; 0x2e
    77b4:	0f a5       	ldd	r16, Y+47	; 0x2f
    77b6:	18 a9       	ldd	r17, Y+48	; 0x30
    77b8:	04 c0       	rjmp	.+8      	; 0x77c2 <__udivdi3+0x94e>
    77ba:	16 95       	lsr	r17
    77bc:	07 95       	ror	r16
    77be:	f7 94       	ror	r15
    77c0:	e7 94       	ror	r14
    77c2:	6a 95       	dec	r22
    77c4:	d2 f7       	brpl	.-12     	; 0x77ba <__udivdi3+0x946>
    77c6:	37 01       	movw	r6, r14
    77c8:	48 01       	movw	r8, r16
    77ca:	68 2a       	or	r6, r24
    77cc:	79 2a       	or	r7, r25
    77ce:	8a 2a       	or	r8, r26
    77d0:	9b 2a       	or	r9, r27
    77d2:	6d 8e       	std	Y+29, r6	; 0x1d
    77d4:	7e 8e       	std	Y+30, r7	; 0x1e
    77d6:	8f 8e       	std	Y+31, r8	; 0x1f
    77d8:	98 a2       	std	Y+32, r9	; 0x20
    77da:	ed a0       	ldd	r14, Y+37	; 0x25
    77dc:	fe a0       	ldd	r15, Y+38	; 0x26
    77de:	0f a1       	ldd	r16, Y+39	; 0x27
    77e0:	18 a5       	ldd	r17, Y+40	; 0x28
    77e2:	38 01       	movw	r6, r16
    77e4:	88 24       	eor	r8, r8
    77e6:	99 24       	eor	r9, r9
    77e8:	98 01       	movw	r18, r16
    77ea:	87 01       	movw	r16, r14
    77ec:	20 70       	andi	r18, 0x00	; 0
    77ee:	30 70       	andi	r19, 0x00	; 0
    77f0:	65 96       	adiw	r28, 0x15	; 21
    77f2:	0c af       	std	Y+60, r16	; 0x3c
    77f4:	1d af       	std	Y+61, r17	; 0x3d
    77f6:	2e af       	std	Y+62, r18	; 0x3e
    77f8:	3f af       	std	Y+63, r19	; 0x3f
    77fa:	65 97       	sbiw	r28, 0x15	; 21
    77fc:	c6 01       	movw	r24, r12
    77fe:	b5 01       	movw	r22, r10
    7800:	a4 01       	movw	r20, r8
    7802:	93 01       	movw	r18, r6
    7804:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    7808:	7b 01       	movw	r14, r22
    780a:	8c 01       	movw	r16, r24
    780c:	c6 01       	movw	r24, r12
    780e:	b5 01       	movw	r22, r10
    7810:	a4 01       	movw	r20, r8
    7812:	93 01       	movw	r18, r6
    7814:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    7818:	c9 01       	movw	r24, r18
    781a:	da 01       	movw	r26, r20
    781c:	1c 01       	movw	r2, r24
    781e:	2d 01       	movw	r4, r26
    7820:	c2 01       	movw	r24, r4
    7822:	b1 01       	movw	r22, r2
    7824:	65 96       	adiw	r28, 0x15	; 21
    7826:	2c ad       	ldd	r18, Y+60	; 0x3c
    7828:	3d ad       	ldd	r19, Y+61	; 0x3d
    782a:	4e ad       	ldd	r20, Y+62	; 0x3e
    782c:	5f ad       	ldd	r21, Y+63	; 0x3f
    782e:	65 97       	sbiw	r28, 0x15	; 21
    7830:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <__mulsi3>
    7834:	9b 01       	movw	r18, r22
    7836:	ac 01       	movw	r20, r24
    7838:	87 01       	movw	r16, r14
    783a:	ff 24       	eor	r15, r15
    783c:	ee 24       	eor	r14, r14
    783e:	ad 8c       	ldd	r10, Y+29	; 0x1d
    7840:	be 8c       	ldd	r11, Y+30	; 0x1e
    7842:	cf 8c       	ldd	r12, Y+31	; 0x1f
    7844:	d8 a0       	ldd	r13, Y+32	; 0x20
    7846:	c6 01       	movw	r24, r12
    7848:	aa 27       	eor	r26, r26
    784a:	bb 27       	eor	r27, r27
    784c:	57 01       	movw	r10, r14
    784e:	68 01       	movw	r12, r16
    7850:	a8 2a       	or	r10, r24
    7852:	b9 2a       	or	r11, r25
    7854:	ca 2a       	or	r12, r26
    7856:	db 2a       	or	r13, r27
    7858:	a2 16       	cp	r10, r18
    785a:	b3 06       	cpc	r11, r19
    785c:	c4 06       	cpc	r12, r20
    785e:	d5 06       	cpc	r13, r21
    7860:	00 f5       	brcc	.+64     	; 0x78a2 <__udivdi3+0xa2e>
    7862:	08 94       	sec
    7864:	21 08       	sbc	r2, r1
    7866:	31 08       	sbc	r3, r1
    7868:	41 08       	sbc	r4, r1
    786a:	51 08       	sbc	r5, r1
    786c:	ed a0       	ldd	r14, Y+37	; 0x25
    786e:	fe a0       	ldd	r15, Y+38	; 0x26
    7870:	0f a1       	ldd	r16, Y+39	; 0x27
    7872:	18 a5       	ldd	r17, Y+40	; 0x28
    7874:	ae 0c       	add	r10, r14
    7876:	bf 1c       	adc	r11, r15
    7878:	c0 1e       	adc	r12, r16
    787a:	d1 1e       	adc	r13, r17
    787c:	ae 14       	cp	r10, r14
    787e:	bf 04       	cpc	r11, r15
    7880:	c0 06       	cpc	r12, r16
    7882:	d1 06       	cpc	r13, r17
    7884:	70 f0       	brcs	.+28     	; 0x78a2 <__udivdi3+0xa2e>
    7886:	a2 16       	cp	r10, r18
    7888:	b3 06       	cpc	r11, r19
    788a:	c4 06       	cpc	r12, r20
    788c:	d5 06       	cpc	r13, r21
    788e:	48 f4       	brcc	.+18     	; 0x78a2 <__udivdi3+0xa2e>
    7890:	08 94       	sec
    7892:	21 08       	sbc	r2, r1
    7894:	31 08       	sbc	r3, r1
    7896:	41 08       	sbc	r4, r1
    7898:	51 08       	sbc	r5, r1
    789a:	ae 0c       	add	r10, r14
    789c:	bf 1c       	adc	r11, r15
    789e:	c0 1e       	adc	r12, r16
    78a0:	d1 1e       	adc	r13, r17
    78a2:	a2 1a       	sub	r10, r18
    78a4:	b3 0a       	sbc	r11, r19
    78a6:	c4 0a       	sbc	r12, r20
    78a8:	d5 0a       	sbc	r13, r21
    78aa:	c6 01       	movw	r24, r12
    78ac:	b5 01       	movw	r22, r10
    78ae:	a4 01       	movw	r20, r8
    78b0:	93 01       	movw	r18, r6
    78b2:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    78b6:	7b 01       	movw	r14, r22
    78b8:	8c 01       	movw	r16, r24
    78ba:	c6 01       	movw	r24, r12
    78bc:	b5 01       	movw	r22, r10
    78be:	a4 01       	movw	r20, r8
    78c0:	93 01       	movw	r18, r6
    78c2:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <__udivmodsi4>
    78c6:	c9 01       	movw	r24, r18
    78c8:	da 01       	movw	r26, r20
    78ca:	3c 01       	movw	r6, r24
    78cc:	4d 01       	movw	r8, r26
    78ce:	c4 01       	movw	r24, r8
    78d0:	b3 01       	movw	r22, r6
    78d2:	65 96       	adiw	r28, 0x15	; 21
    78d4:	2c ad       	ldd	r18, Y+60	; 0x3c
    78d6:	3d ad       	ldd	r19, Y+61	; 0x3d
    78d8:	4e ad       	ldd	r20, Y+62	; 0x3e
    78da:	5f ad       	ldd	r21, Y+63	; 0x3f
    78dc:	65 97       	sbiw	r28, 0x15	; 21
    78de:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <__mulsi3>
    78e2:	9b 01       	movw	r18, r22
    78e4:	ac 01       	movw	r20, r24
    78e6:	87 01       	movw	r16, r14
    78e8:	ff 24       	eor	r15, r15
    78ea:	ee 24       	eor	r14, r14
    78ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    78ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    78f0:	af 8d       	ldd	r26, Y+31	; 0x1f
    78f2:	b8 a1       	ldd	r27, Y+32	; 0x20
    78f4:	a0 70       	andi	r26, 0x00	; 0
    78f6:	b0 70       	andi	r27, 0x00	; 0
    78f8:	57 01       	movw	r10, r14
    78fa:	68 01       	movw	r12, r16
    78fc:	a8 2a       	or	r10, r24
    78fe:	b9 2a       	or	r11, r25
    7900:	ca 2a       	or	r12, r26
    7902:	db 2a       	or	r13, r27
    7904:	a2 16       	cp	r10, r18
    7906:	b3 06       	cpc	r11, r19
    7908:	c4 06       	cpc	r12, r20
    790a:	d5 06       	cpc	r13, r21
    790c:	00 f5       	brcc	.+64     	; 0x794e <__udivdi3+0xada>
    790e:	08 94       	sec
    7910:	61 08       	sbc	r6, r1
    7912:	71 08       	sbc	r7, r1
    7914:	81 08       	sbc	r8, r1
    7916:	91 08       	sbc	r9, r1
    7918:	6d a1       	ldd	r22, Y+37	; 0x25
    791a:	7e a1       	ldd	r23, Y+38	; 0x26
    791c:	8f a1       	ldd	r24, Y+39	; 0x27
    791e:	98 a5       	ldd	r25, Y+40	; 0x28
    7920:	a6 0e       	add	r10, r22
    7922:	b7 1e       	adc	r11, r23
    7924:	c8 1e       	adc	r12, r24
    7926:	d9 1e       	adc	r13, r25
    7928:	a6 16       	cp	r10, r22
    792a:	b7 06       	cpc	r11, r23
    792c:	c8 06       	cpc	r12, r24
    792e:	d9 06       	cpc	r13, r25
    7930:	70 f0       	brcs	.+28     	; 0x794e <__udivdi3+0xada>
    7932:	a2 16       	cp	r10, r18
    7934:	b3 06       	cpc	r11, r19
    7936:	c4 06       	cpc	r12, r20
    7938:	d5 06       	cpc	r13, r21
    793a:	48 f4       	brcc	.+18     	; 0x794e <__udivdi3+0xada>
    793c:	08 94       	sec
    793e:	61 08       	sbc	r6, r1
    7940:	71 08       	sbc	r7, r1
    7942:	81 08       	sbc	r8, r1
    7944:	91 08       	sbc	r9, r1
    7946:	a6 0e       	add	r10, r22
    7948:	b7 1e       	adc	r11, r23
    794a:	c8 1e       	adc	r12, r24
    794c:	d9 1e       	adc	r13, r25
    794e:	d6 01       	movw	r26, r12
    7950:	c5 01       	movw	r24, r10
    7952:	82 1b       	sub	r24, r18
    7954:	93 0b       	sbc	r25, r19
    7956:	a4 0b       	sbc	r26, r20
    7958:	b5 0b       	sbc	r27, r21
    795a:	89 8f       	std	Y+25, r24	; 0x19
    795c:	9a 8f       	std	Y+26, r25	; 0x1a
    795e:	ab 8f       	std	Y+27, r26	; 0x1b
    7960:	bc 8f       	std	Y+28, r27	; 0x1c
    7962:	d1 01       	movw	r26, r2
    7964:	99 27       	eor	r25, r25
    7966:	88 27       	eor	r24, r24
    7968:	64 01       	movw	r12, r8
    796a:	53 01       	movw	r10, r6
    796c:	a8 2a       	or	r10, r24
    796e:	b9 2a       	or	r11, r25
    7970:	ca 2a       	or	r12, r26
    7972:	db 2a       	or	r13, r27
    7974:	a9 aa       	std	Y+49, r10	; 0x31
    7976:	ba aa       	std	Y+50, r11	; 0x32
    7978:	cb aa       	std	Y+51, r12	; 0x33
    797a:	dc aa       	std	Y+52, r13	; 0x34
    797c:	86 01       	movw	r16, r12
    797e:	75 01       	movw	r14, r10
    7980:	2f ef       	ldi	r18, 0xFF	; 255
    7982:	3f ef       	ldi	r19, 0xFF	; 255
    7984:	40 e0       	ldi	r20, 0x00	; 0
    7986:	50 e0       	ldi	r21, 0x00	; 0
    7988:	e2 22       	and	r14, r18
    798a:	f3 22       	and	r15, r19
    798c:	04 23       	and	r16, r20
    798e:	15 23       	and	r17, r21
    7990:	a6 01       	movw	r20, r12
    7992:	66 27       	eor	r22, r22
    7994:	77 27       	eor	r23, r23
    7996:	6d 96       	adiw	r28, 0x1d	; 29
    7998:	4c af       	std	Y+60, r20	; 0x3c
    799a:	5d af       	std	Y+61, r21	; 0x3d
    799c:	6e af       	std	Y+62, r22	; 0x3e
    799e:	7f af       	std	Y+63, r23	; 0x3f
    79a0:	6d 97       	sbiw	r28, 0x1d	; 29
    79a2:	a9 a0       	ldd	r10, Y+33	; 0x21
    79a4:	ba a0       	ldd	r11, Y+34	; 0x22
    79a6:	cb a0       	ldd	r12, Y+35	; 0x23
    79a8:	dc a0       	ldd	r13, Y+36	; 0x24
    79aa:	6f ef       	ldi	r22, 0xFF	; 255
    79ac:	7f ef       	ldi	r23, 0xFF	; 255
    79ae:	80 e0       	ldi	r24, 0x00	; 0
    79b0:	90 e0       	ldi	r25, 0x00	; 0
    79b2:	a6 22       	and	r10, r22
    79b4:	b7 22       	and	r11, r23
    79b6:	c8 22       	and	r12, r24
    79b8:	d9 22       	and	r13, r25
    79ba:	89 a1       	ldd	r24, Y+33	; 0x21
    79bc:	9a a1       	ldd	r25, Y+34	; 0x22
    79be:	ab a1       	ldd	r26, Y+35	; 0x23
    79c0:	bc a1       	ldd	r27, Y+36	; 0x24
    79c2:	1d 01       	movw	r2, r26
    79c4:	44 24       	eor	r4, r4
    79c6:	55 24       	eor	r5, r5
    79c8:	c8 01       	movw	r24, r16
    79ca:	b7 01       	movw	r22, r14
    79cc:	a6 01       	movw	r20, r12
    79ce:	95 01       	movw	r18, r10
    79d0:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <__mulsi3>
    79d4:	69 96       	adiw	r28, 0x19	; 25
    79d6:	6c af       	std	Y+60, r22	; 0x3c
    79d8:	7d af       	std	Y+61, r23	; 0x3d
    79da:	8e af       	std	Y+62, r24	; 0x3e
    79dc:	9f af       	std	Y+63, r25	; 0x3f
    79de:	69 97       	sbiw	r28, 0x19	; 25
    79e0:	c8 01       	movw	r24, r16
    79e2:	b7 01       	movw	r22, r14
    79e4:	a2 01       	movw	r20, r4
    79e6:	91 01       	movw	r18, r2
    79e8:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <__mulsi3>
    79ec:	3b 01       	movw	r6, r22
    79ee:	4c 01       	movw	r8, r24
    79f0:	6d 96       	adiw	r28, 0x1d	; 29
    79f2:	6c ad       	ldd	r22, Y+60	; 0x3c
    79f4:	7d ad       	ldd	r23, Y+61	; 0x3d
    79f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    79f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    79fa:	6d 97       	sbiw	r28, 0x1d	; 29
    79fc:	a6 01       	movw	r20, r12
    79fe:	95 01       	movw	r18, r10
    7a00:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <__mulsi3>
    7a04:	7b 01       	movw	r14, r22
    7a06:	8c 01       	movw	r16, r24
    7a08:	6d 96       	adiw	r28, 0x1d	; 29
    7a0a:	6c ad       	ldd	r22, Y+60	; 0x3c
    7a0c:	7d ad       	ldd	r23, Y+61	; 0x3d
    7a0e:	8e ad       	ldd	r24, Y+62	; 0x3e
    7a10:	9f ad       	ldd	r25, Y+63	; 0x3f
    7a12:	6d 97       	sbiw	r28, 0x1d	; 29
    7a14:	a2 01       	movw	r20, r4
    7a16:	91 01       	movw	r18, r2
    7a18:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <__mulsi3>
    7a1c:	5b 01       	movw	r10, r22
    7a1e:	6c 01       	movw	r12, r24
    7a20:	a8 01       	movw	r20, r16
    7a22:	97 01       	movw	r18, r14
    7a24:	26 0d       	add	r18, r6
    7a26:	37 1d       	adc	r19, r7
    7a28:	48 1d       	adc	r20, r8
    7a2a:	59 1d       	adc	r21, r9
    7a2c:	69 96       	adiw	r28, 0x19	; 25
    7a2e:	6c ac       	ldd	r6, Y+60	; 0x3c
    7a30:	7d ac       	ldd	r7, Y+61	; 0x3d
    7a32:	8e ac       	ldd	r8, Y+62	; 0x3e
    7a34:	9f ac       	ldd	r9, Y+63	; 0x3f
    7a36:	69 97       	sbiw	r28, 0x19	; 25
    7a38:	c4 01       	movw	r24, r8
    7a3a:	aa 27       	eor	r26, r26
    7a3c:	bb 27       	eor	r27, r27
    7a3e:	28 0f       	add	r18, r24
    7a40:	39 1f       	adc	r19, r25
    7a42:	4a 1f       	adc	r20, r26
    7a44:	5b 1f       	adc	r21, r27
    7a46:	2e 15       	cp	r18, r14
    7a48:	3f 05       	cpc	r19, r15
    7a4a:	40 07       	cpc	r20, r16
    7a4c:	51 07       	cpc	r21, r17
    7a4e:	48 f4       	brcc	.+18     	; 0x7a62 <__udivdi3+0xbee>
    7a50:	e1 2c       	mov	r14, r1
    7a52:	f1 2c       	mov	r15, r1
    7a54:	61 e0       	ldi	r22, 0x01	; 1
    7a56:	06 2f       	mov	r16, r22
    7a58:	11 2d       	mov	r17, r1
    7a5a:	ae 0c       	add	r10, r14
    7a5c:	bf 1c       	adc	r11, r15
    7a5e:	c0 1e       	adc	r12, r16
    7a60:	d1 1e       	adc	r13, r17
    7a62:	ca 01       	movw	r24, r20
    7a64:	aa 27       	eor	r26, r26
    7a66:	bb 27       	eor	r27, r27
    7a68:	bc 01       	movw	r22, r24
    7a6a:	cd 01       	movw	r24, r26
    7a6c:	6a 0d       	add	r22, r10
    7a6e:	7b 1d       	adc	r23, r11
    7a70:	8c 1d       	adc	r24, r12
    7a72:	9d 1d       	adc	r25, r13
    7a74:	69 8c       	ldd	r6, Y+25	; 0x19
    7a76:	7a 8c       	ldd	r7, Y+26	; 0x1a
    7a78:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7a7a:	9c 8c       	ldd	r9, Y+28	; 0x1c
    7a7c:	66 16       	cp	r6, r22
    7a7e:	77 06       	cpc	r7, r23
    7a80:	88 06       	cpc	r8, r24
    7a82:	99 06       	cpc	r9, r25
    7a84:	40 f1       	brcs	.+80     	; 0x7ad6 <__udivdi3+0xc62>
    7a86:	66 15       	cp	r22, r6
    7a88:	77 05       	cpc	r23, r7
    7a8a:	88 05       	cpc	r24, r8
    7a8c:	99 05       	cpc	r25, r9
    7a8e:	09 f0       	breq	.+2      	; 0x7a92 <__udivdi3+0xc1e>
    7a90:	43 c0       	rjmp	.+134    	; 0x7b18 <__udivdi3+0xca4>
    7a92:	d9 01       	movw	r26, r18
    7a94:	99 27       	eor	r25, r25
    7a96:	88 27       	eor	r24, r24
    7a98:	69 96       	adiw	r28, 0x19	; 25
    7a9a:	2c ad       	ldd	r18, Y+60	; 0x3c
    7a9c:	3d ad       	ldd	r19, Y+61	; 0x3d
    7a9e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7aa0:	5f ad       	ldd	r21, Y+63	; 0x3f
    7aa2:	69 97       	sbiw	r28, 0x19	; 25
    7aa4:	40 70       	andi	r20, 0x00	; 0
    7aa6:	50 70       	andi	r21, 0x00	; 0
    7aa8:	82 0f       	add	r24, r18
    7aaa:	93 1f       	adc	r25, r19
    7aac:	a4 1f       	adc	r26, r20
    7aae:	b5 1f       	adc	r27, r21
    7ab0:	2d a5       	ldd	r18, Y+45	; 0x2d
    7ab2:	3e a5       	ldd	r19, Y+46	; 0x2e
    7ab4:	4f a5       	ldd	r20, Y+47	; 0x2f
    7ab6:	58 a9       	ldd	r21, Y+48	; 0x30
    7ab8:	6e 96       	adiw	r28, 0x1e	; 30
    7aba:	0f ac       	ldd	r0, Y+63	; 0x3f
    7abc:	6e 97       	sbiw	r28, 0x1e	; 30
    7abe:	04 c0       	rjmp	.+8      	; 0x7ac8 <__udivdi3+0xc54>
    7ac0:	22 0f       	add	r18, r18
    7ac2:	33 1f       	adc	r19, r19
    7ac4:	44 1f       	adc	r20, r20
    7ac6:	55 1f       	adc	r21, r21
    7ac8:	0a 94       	dec	r0
    7aca:	d2 f7       	brpl	.-12     	; 0x7ac0 <__udivdi3+0xc4c>
    7acc:	28 17       	cp	r18, r24
    7ace:	39 07       	cpc	r19, r25
    7ad0:	4a 07       	cpc	r20, r26
    7ad2:	5b 07       	cpc	r21, r27
    7ad4:	08 f5       	brcc	.+66     	; 0x7b18 <__udivdi3+0xca4>
    7ad6:	09 a9       	ldd	r16, Y+49	; 0x31
    7ad8:	1a a9       	ldd	r17, Y+50	; 0x32
    7ada:	2b a9       	ldd	r18, Y+51	; 0x33
    7adc:	3c a9       	ldd	r19, Y+52	; 0x34
    7ade:	01 50       	subi	r16, 0x01	; 1
    7ae0:	10 40       	sbci	r17, 0x00	; 0
    7ae2:	20 40       	sbci	r18, 0x00	; 0
    7ae4:	30 40       	sbci	r19, 0x00	; 0
    7ae6:	09 ab       	std	Y+49, r16	; 0x31
    7ae8:	1a ab       	std	Y+50, r17	; 0x32
    7aea:	2b ab       	std	Y+51, r18	; 0x33
    7aec:	3c ab       	std	Y+52, r19	; 0x34
    7aee:	14 c0       	rjmp	.+40     	; 0x7b18 <__udivdi3+0xca4>
    7af0:	66 24       	eor	r6, r6
    7af2:	77 24       	eor	r7, r7
    7af4:	43 01       	movw	r8, r6
    7af6:	21 e0       	ldi	r18, 0x01	; 1
    7af8:	30 e0       	ldi	r19, 0x00	; 0
    7afa:	40 e0       	ldi	r20, 0x00	; 0
    7afc:	50 e0       	ldi	r21, 0x00	; 0
    7afe:	29 ab       	std	Y+49, r18	; 0x31
    7b00:	3a ab       	std	Y+50, r19	; 0x32
    7b02:	4b ab       	std	Y+51, r20	; 0x33
    7b04:	5c ab       	std	Y+52, r21	; 0x34
    7b06:	0b c0       	rjmp	.+22     	; 0x7b1e <__udivdi3+0xcaa>
    7b08:	66 24       	eor	r6, r6
    7b0a:	77 24       	eor	r7, r7
    7b0c:	43 01       	movw	r8, r6
    7b0e:	19 aa       	std	Y+49, r1	; 0x31
    7b10:	1a aa       	std	Y+50, r1	; 0x32
    7b12:	1b aa       	std	Y+51, r1	; 0x33
    7b14:	1c aa       	std	Y+52, r1	; 0x34
    7b16:	03 c0       	rjmp	.+6      	; 0x7b1e <__udivdi3+0xcaa>
    7b18:	66 24       	eor	r6, r6
    7b1a:	77 24       	eor	r7, r7
    7b1c:	43 01       	movw	r8, r6
    7b1e:	fe 01       	movw	r30, r28
    7b20:	71 96       	adiw	r30, 0x11	; 17
    7b22:	88 e0       	ldi	r24, 0x08	; 8
    7b24:	df 01       	movw	r26, r30
    7b26:	1d 92       	st	X+, r1
    7b28:	8a 95       	dec	r24
    7b2a:	e9 f7       	brne	.-6      	; 0x7b26 <__udivdi3+0xcb2>
    7b2c:	a9 a8       	ldd	r10, Y+49	; 0x31
    7b2e:	ba a8       	ldd	r11, Y+50	; 0x32
    7b30:	cb a8       	ldd	r12, Y+51	; 0x33
    7b32:	dc a8       	ldd	r13, Y+52	; 0x34
    7b34:	a9 8a       	std	Y+17, r10	; 0x11
    7b36:	ba 8a       	std	Y+18, r11	; 0x12
    7b38:	cb 8a       	std	Y+19, r12	; 0x13
    7b3a:	dc 8a       	std	Y+20, r13	; 0x14
    7b3c:	6d 8a       	std	Y+21, r6	; 0x15
    7b3e:	7e 8a       	std	Y+22, r7	; 0x16
    7b40:	8f 8a       	std	Y+23, r8	; 0x17
    7b42:	98 8e       	std	Y+24, r9	; 0x18
    7b44:	29 a9       	ldd	r18, Y+49	; 0x31
    7b46:	3a 89       	ldd	r19, Y+18	; 0x12
    7b48:	4b 89       	ldd	r20, Y+19	; 0x13
    7b4a:	5c 89       	ldd	r21, Y+20	; 0x14
    7b4c:	66 2d       	mov	r22, r6
    7b4e:	7e 89       	ldd	r23, Y+22	; 0x16
    7b50:	8f 89       	ldd	r24, Y+23	; 0x17
    7b52:	98 8d       	ldd	r25, Y+24	; 0x18
    7b54:	c2 5a       	subi	r28, 0xA2	; 162
    7b56:	df 4f       	sbci	r29, 0xFF	; 255
    7b58:	e2 e1       	ldi	r30, 0x12	; 18
    7b5a:	0c 94 e9 45 	jmp	0x8bd2	; 0x8bd2 <__epilogue_restores__>

00007b5e <vfprintf>:
    7b5e:	2f 92       	push	r2
    7b60:	3f 92       	push	r3
    7b62:	4f 92       	push	r4
    7b64:	5f 92       	push	r5
    7b66:	6f 92       	push	r6
    7b68:	7f 92       	push	r7
    7b6a:	8f 92       	push	r8
    7b6c:	9f 92       	push	r9
    7b6e:	af 92       	push	r10
    7b70:	bf 92       	push	r11
    7b72:	cf 92       	push	r12
    7b74:	df 92       	push	r13
    7b76:	ef 92       	push	r14
    7b78:	ff 92       	push	r15
    7b7a:	0f 93       	push	r16
    7b7c:	1f 93       	push	r17
    7b7e:	df 93       	push	r29
    7b80:	cf 93       	push	r28
    7b82:	cd b7       	in	r28, 0x3d	; 61
    7b84:	de b7       	in	r29, 0x3e	; 62
    7b86:	61 97       	sbiw	r28, 0x11	; 17
    7b88:	cd bf       	out	0x3d, r28	; 61
    7b8a:	de bf       	out	0x3e, r29	; 62
    7b8c:	3c 01       	movw	r6, r24
    7b8e:	6e 87       	std	Y+14, r22	; 0x0e
    7b90:	7f 87       	std	Y+15, r23	; 0x0f
    7b92:	6a 01       	movw	r12, r20
    7b94:	fc 01       	movw	r30, r24
    7b96:	16 82       	std	Z+6, r1	; 0x06
    7b98:	17 82       	std	Z+7, r1	; 0x07
    7b9a:	83 81       	ldd	r24, Z+3	; 0x03
    7b9c:	81 fd       	sbrc	r24, 1
    7b9e:	03 c0       	rjmp	.+6      	; 0x7ba6 <vfprintf+0x48>
    7ba0:	6f ef       	ldi	r22, 0xFF	; 255
    7ba2:	7f ef       	ldi	r23, 0xFF	; 255
    7ba4:	6f c3       	rjmp	.+1758   	; 0x8284 <vfprintf+0x726>
    7ba6:	9e 01       	movw	r18, r28
    7ba8:	2f 5f       	subi	r18, 0xFF	; 255
    7baa:	3f 4f       	sbci	r19, 0xFF	; 255
    7bac:	28 8b       	std	Y+16, r18	; 0x10
    7bae:	39 8b       	std	Y+17, r19	; 0x11
    7bb0:	f3 01       	movw	r30, r6
    7bb2:	23 81       	ldd	r18, Z+3	; 0x03
    7bb4:	ee 85       	ldd	r30, Y+14	; 0x0e
    7bb6:	ff 85       	ldd	r31, Y+15	; 0x0f
    7bb8:	23 fd       	sbrc	r18, 3
    7bba:	85 91       	lpm	r24, Z+
    7bbc:	23 ff       	sbrs	r18, 3
    7bbe:	81 91       	ld	r24, Z+
    7bc0:	ee 87       	std	Y+14, r30	; 0x0e
    7bc2:	ff 87       	std	Y+15, r31	; 0x0f
    7bc4:	88 23       	and	r24, r24
    7bc6:	09 f4       	brne	.+2      	; 0x7bca <vfprintf+0x6c>
    7bc8:	5a c3       	rjmp	.+1716   	; 0x827e <vfprintf+0x720>
    7bca:	85 32       	cpi	r24, 0x25	; 37
    7bcc:	51 f4       	brne	.+20     	; 0x7be2 <vfprintf+0x84>
    7bce:	ee 85       	ldd	r30, Y+14	; 0x0e
    7bd0:	ff 85       	ldd	r31, Y+15	; 0x0f
    7bd2:	23 fd       	sbrc	r18, 3
    7bd4:	85 91       	lpm	r24, Z+
    7bd6:	23 ff       	sbrs	r18, 3
    7bd8:	81 91       	ld	r24, Z+
    7bda:	ee 87       	std	Y+14, r30	; 0x0e
    7bdc:	ff 87       	std	Y+15, r31	; 0x0f
    7bde:	85 32       	cpi	r24, 0x25	; 37
    7be0:	29 f4       	brne	.+10     	; 0x7bec <vfprintf+0x8e>
    7be2:	90 e0       	ldi	r25, 0x00	; 0
    7be4:	b3 01       	movw	r22, r6
    7be6:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    7bea:	e2 cf       	rjmp	.-60     	; 0x7bb0 <vfprintf+0x52>
    7bec:	98 2f       	mov	r25, r24
    7bee:	10 e0       	ldi	r17, 0x00	; 0
    7bf0:	88 24       	eor	r8, r8
    7bf2:	99 24       	eor	r9, r9
    7bf4:	10 32       	cpi	r17, 0x20	; 32
    7bf6:	b0 f4       	brcc	.+44     	; 0x7c24 <vfprintf+0xc6>
    7bf8:	9b 32       	cpi	r25, 0x2B	; 43
    7bfa:	69 f0       	breq	.+26     	; 0x7c16 <vfprintf+0xb8>
    7bfc:	9c 32       	cpi	r25, 0x2C	; 44
    7bfe:	28 f4       	brcc	.+10     	; 0x7c0a <vfprintf+0xac>
    7c00:	90 32       	cpi	r25, 0x20	; 32
    7c02:	51 f0       	breq	.+20     	; 0x7c18 <vfprintf+0xba>
    7c04:	93 32       	cpi	r25, 0x23	; 35
    7c06:	71 f4       	brne	.+28     	; 0x7c24 <vfprintf+0xc6>
    7c08:	0b c0       	rjmp	.+22     	; 0x7c20 <vfprintf+0xc2>
    7c0a:	9d 32       	cpi	r25, 0x2D	; 45
    7c0c:	39 f0       	breq	.+14     	; 0x7c1c <vfprintf+0xbe>
    7c0e:	90 33       	cpi	r25, 0x30	; 48
    7c10:	49 f4       	brne	.+18     	; 0x7c24 <vfprintf+0xc6>
    7c12:	11 60       	ori	r17, 0x01	; 1
    7c14:	28 c0       	rjmp	.+80     	; 0x7c66 <vfprintf+0x108>
    7c16:	12 60       	ori	r17, 0x02	; 2
    7c18:	14 60       	ori	r17, 0x04	; 4
    7c1a:	25 c0       	rjmp	.+74     	; 0x7c66 <vfprintf+0x108>
    7c1c:	18 60       	ori	r17, 0x08	; 8
    7c1e:	23 c0       	rjmp	.+70     	; 0x7c66 <vfprintf+0x108>
    7c20:	10 61       	ori	r17, 0x10	; 16
    7c22:	21 c0       	rjmp	.+66     	; 0x7c66 <vfprintf+0x108>
    7c24:	17 fd       	sbrc	r17, 7
    7c26:	2a c0       	rjmp	.+84     	; 0x7c7c <vfprintf+0x11e>
    7c28:	89 2f       	mov	r24, r25
    7c2a:	80 53       	subi	r24, 0x30	; 48
    7c2c:	8a 30       	cpi	r24, 0x0A	; 10
    7c2e:	78 f4       	brcc	.+30     	; 0x7c4e <vfprintf+0xf0>
    7c30:	16 ff       	sbrs	r17, 6
    7c32:	06 c0       	rjmp	.+12     	; 0x7c40 <vfprintf+0xe2>
    7c34:	fa e0       	ldi	r31, 0x0A	; 10
    7c36:	9f 9e       	mul	r9, r31
    7c38:	90 2c       	mov	r9, r0
    7c3a:	11 24       	eor	r1, r1
    7c3c:	98 0e       	add	r9, r24
    7c3e:	13 c0       	rjmp	.+38     	; 0x7c66 <vfprintf+0x108>
    7c40:	3a e0       	ldi	r19, 0x0A	; 10
    7c42:	83 9e       	mul	r8, r19
    7c44:	80 2c       	mov	r8, r0
    7c46:	11 24       	eor	r1, r1
    7c48:	88 0e       	add	r8, r24
    7c4a:	10 62       	ori	r17, 0x20	; 32
    7c4c:	0c c0       	rjmp	.+24     	; 0x7c66 <vfprintf+0x108>
    7c4e:	9e 32       	cpi	r25, 0x2E	; 46
    7c50:	21 f4       	brne	.+8      	; 0x7c5a <vfprintf+0xfc>
    7c52:	16 fd       	sbrc	r17, 6
    7c54:	14 c3       	rjmp	.+1576   	; 0x827e <vfprintf+0x720>
    7c56:	10 64       	ori	r17, 0x40	; 64
    7c58:	06 c0       	rjmp	.+12     	; 0x7c66 <vfprintf+0x108>
    7c5a:	9c 36       	cpi	r25, 0x6C	; 108
    7c5c:	11 f4       	brne	.+4      	; 0x7c62 <vfprintf+0x104>
    7c5e:	10 68       	ori	r17, 0x80	; 128
    7c60:	02 c0       	rjmp	.+4      	; 0x7c66 <vfprintf+0x108>
    7c62:	98 36       	cpi	r25, 0x68	; 104
    7c64:	59 f4       	brne	.+22     	; 0x7c7c <vfprintf+0x11e>
    7c66:	ee 85       	ldd	r30, Y+14	; 0x0e
    7c68:	ff 85       	ldd	r31, Y+15	; 0x0f
    7c6a:	23 fd       	sbrc	r18, 3
    7c6c:	95 91       	lpm	r25, Z+
    7c6e:	23 ff       	sbrs	r18, 3
    7c70:	91 91       	ld	r25, Z+
    7c72:	ee 87       	std	Y+14, r30	; 0x0e
    7c74:	ff 87       	std	Y+15, r31	; 0x0f
    7c76:	99 23       	and	r25, r25
    7c78:	09 f0       	breq	.+2      	; 0x7c7c <vfprintf+0x11e>
    7c7a:	bc cf       	rjmp	.-136    	; 0x7bf4 <vfprintf+0x96>
    7c7c:	89 2f       	mov	r24, r25
    7c7e:	85 54       	subi	r24, 0x45	; 69
    7c80:	83 30       	cpi	r24, 0x03	; 3
    7c82:	20 f4       	brcc	.+8      	; 0x7c8c <vfprintf+0x12e>
    7c84:	81 2f       	mov	r24, r17
    7c86:	80 61       	ori	r24, 0x10	; 16
    7c88:	90 5e       	subi	r25, 0xE0	; 224
    7c8a:	07 c0       	rjmp	.+14     	; 0x7c9a <vfprintf+0x13c>
    7c8c:	89 2f       	mov	r24, r25
    7c8e:	85 56       	subi	r24, 0x65	; 101
    7c90:	83 30       	cpi	r24, 0x03	; 3
    7c92:	08 f0       	brcs	.+2      	; 0x7c96 <vfprintf+0x138>
    7c94:	9f c1       	rjmp	.+830    	; 0x7fd4 <vfprintf+0x476>
    7c96:	81 2f       	mov	r24, r17
    7c98:	8f 7e       	andi	r24, 0xEF	; 239
    7c9a:	86 fd       	sbrc	r24, 6
    7c9c:	02 c0       	rjmp	.+4      	; 0x7ca2 <vfprintf+0x144>
    7c9e:	76 e0       	ldi	r23, 0x06	; 6
    7ca0:	97 2e       	mov	r9, r23
    7ca2:	6f e3       	ldi	r22, 0x3F	; 63
    7ca4:	f6 2e       	mov	r15, r22
    7ca6:	f8 22       	and	r15, r24
    7ca8:	95 36       	cpi	r25, 0x65	; 101
    7caa:	19 f4       	brne	.+6      	; 0x7cb2 <vfprintf+0x154>
    7cac:	f0 e4       	ldi	r31, 0x40	; 64
    7cae:	ff 2a       	or	r15, r31
    7cb0:	07 c0       	rjmp	.+14     	; 0x7cc0 <vfprintf+0x162>
    7cb2:	96 36       	cpi	r25, 0x66	; 102
    7cb4:	19 f4       	brne	.+6      	; 0x7cbc <vfprintf+0x15e>
    7cb6:	20 e8       	ldi	r18, 0x80	; 128
    7cb8:	f2 2a       	or	r15, r18
    7cba:	02 c0       	rjmp	.+4      	; 0x7cc0 <vfprintf+0x162>
    7cbc:	91 10       	cpse	r9, r1
    7cbe:	9a 94       	dec	r9
    7cc0:	f7 fe       	sbrs	r15, 7
    7cc2:	0a c0       	rjmp	.+20     	; 0x7cd8 <vfprintf+0x17a>
    7cc4:	3b e3       	ldi	r19, 0x3B	; 59
    7cc6:	39 15       	cp	r19, r9
    7cc8:	18 f4       	brcc	.+6      	; 0x7cd0 <vfprintf+0x172>
    7cca:	5c e3       	ldi	r21, 0x3C	; 60
    7ccc:	b5 2e       	mov	r11, r21
    7cce:	02 c0       	rjmp	.+4      	; 0x7cd4 <vfprintf+0x176>
    7cd0:	b9 2c       	mov	r11, r9
    7cd2:	b3 94       	inc	r11
    7cd4:	27 e0       	ldi	r18, 0x07	; 7
    7cd6:	09 c0       	rjmp	.+18     	; 0x7cea <vfprintf+0x18c>
    7cd8:	47 e0       	ldi	r20, 0x07	; 7
    7cda:	49 15       	cp	r20, r9
    7cdc:	20 f4       	brcc	.+8      	; 0x7ce6 <vfprintf+0x188>
    7cde:	bb 24       	eor	r11, r11
    7ce0:	47 e0       	ldi	r20, 0x07	; 7
    7ce2:	94 2e       	mov	r9, r20
    7ce4:	f7 cf       	rjmp	.-18     	; 0x7cd4 <vfprintf+0x176>
    7ce6:	29 2d       	mov	r18, r9
    7ce8:	bb 24       	eor	r11, r11
    7cea:	c6 01       	movw	r24, r12
    7cec:	04 96       	adiw	r24, 0x04	; 4
    7cee:	8c 87       	std	Y+12, r24	; 0x0c
    7cf0:	9d 87       	std	Y+13, r25	; 0x0d
    7cf2:	f6 01       	movw	r30, r12
    7cf4:	60 81       	ld	r22, Z
    7cf6:	71 81       	ldd	r23, Z+1	; 0x01
    7cf8:	82 81       	ldd	r24, Z+2	; 0x02
    7cfa:	93 81       	ldd	r25, Z+3	; 0x03
    7cfc:	ae 01       	movw	r20, r28
    7cfe:	4f 5f       	subi	r20, 0xFF	; 255
    7d00:	5f 4f       	sbci	r21, 0xFF	; 255
    7d02:	0b 2d       	mov	r16, r11
    7d04:	0e 94 90 47 	call	0x8f20	; 0x8f20 <__ftoa_engine>
    7d08:	6c 01       	movw	r12, r24
    7d0a:	09 81       	ldd	r16, Y+1	; 0x01
    7d0c:	20 2e       	mov	r2, r16
    7d0e:	33 24       	eor	r3, r3
    7d10:	00 ff       	sbrs	r16, 0
    7d12:	04 c0       	rjmp	.+8      	; 0x7d1c <vfprintf+0x1be>
    7d14:	03 fd       	sbrc	r16, 3
    7d16:	02 c0       	rjmp	.+4      	; 0x7d1c <vfprintf+0x1be>
    7d18:	1d e2       	ldi	r17, 0x2D	; 45
    7d1a:	09 c0       	rjmp	.+18     	; 0x7d2e <vfprintf+0x1d0>
    7d1c:	f1 fe       	sbrs	r15, 1
    7d1e:	02 c0       	rjmp	.+4      	; 0x7d24 <vfprintf+0x1c6>
    7d20:	1b e2       	ldi	r17, 0x2B	; 43
    7d22:	05 c0       	rjmp	.+10     	; 0x7d2e <vfprintf+0x1d0>
    7d24:	f2 fc       	sbrc	r15, 2
    7d26:	02 c0       	rjmp	.+4      	; 0x7d2c <vfprintf+0x1ce>
    7d28:	10 e0       	ldi	r17, 0x00	; 0
    7d2a:	01 c0       	rjmp	.+2      	; 0x7d2e <vfprintf+0x1d0>
    7d2c:	10 e2       	ldi	r17, 0x20	; 32
    7d2e:	c1 01       	movw	r24, r2
    7d30:	8c 70       	andi	r24, 0x0C	; 12
    7d32:	90 70       	andi	r25, 0x00	; 0
    7d34:	89 2b       	or	r24, r25
    7d36:	b9 f1       	breq	.+110    	; 0x7da6 <vfprintf+0x248>
    7d38:	11 23       	and	r17, r17
    7d3a:	11 f4       	brne	.+4      	; 0x7d40 <vfprintf+0x1e2>
    7d3c:	83 e0       	ldi	r24, 0x03	; 3
    7d3e:	01 c0       	rjmp	.+2      	; 0x7d42 <vfprintf+0x1e4>
    7d40:	84 e0       	ldi	r24, 0x04	; 4
    7d42:	88 15       	cp	r24, r8
    7d44:	10 f0       	brcs	.+4      	; 0x7d4a <vfprintf+0x1ec>
    7d46:	88 24       	eor	r8, r8
    7d48:	0a c0       	rjmp	.+20     	; 0x7d5e <vfprintf+0x200>
    7d4a:	88 1a       	sub	r8, r24
    7d4c:	f3 fc       	sbrc	r15, 3
    7d4e:	07 c0       	rjmp	.+14     	; 0x7d5e <vfprintf+0x200>
    7d50:	80 e2       	ldi	r24, 0x20	; 32
    7d52:	90 e0       	ldi	r25, 0x00	; 0
    7d54:	b3 01       	movw	r22, r6
    7d56:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    7d5a:	8a 94       	dec	r8
    7d5c:	c9 f7       	brne	.-14     	; 0x7d50 <vfprintf+0x1f2>
    7d5e:	11 23       	and	r17, r17
    7d60:	29 f0       	breq	.+10     	; 0x7d6c <vfprintf+0x20e>
    7d62:	81 2f       	mov	r24, r17
    7d64:	90 e0       	ldi	r25, 0x00	; 0
    7d66:	b3 01       	movw	r22, r6
    7d68:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    7d6c:	23 fe       	sbrs	r2, 3
    7d6e:	03 c0       	rjmp	.+6      	; 0x7d76 <vfprintf+0x218>
    7d70:	03 e3       	ldi	r16, 0x33	; 51
    7d72:	12 e0       	ldi	r17, 0x02	; 2
    7d74:	0e c0       	rjmp	.+28     	; 0x7d92 <vfprintf+0x234>
    7d76:	07 e3       	ldi	r16, 0x37	; 55
    7d78:	12 e0       	ldi	r17, 0x02	; 2
    7d7a:	0b c0       	rjmp	.+22     	; 0x7d92 <vfprintf+0x234>
    7d7c:	e1 14       	cp	r14, r1
    7d7e:	f1 04       	cpc	r15, r1
    7d80:	09 f0       	breq	.+2      	; 0x7d84 <vfprintf+0x226>
    7d82:	80 52       	subi	r24, 0x20	; 32
    7d84:	90 e0       	ldi	r25, 0x00	; 0
    7d86:	b3 01       	movw	r22, r6
    7d88:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    7d8c:	0f 5f       	subi	r16, 0xFF	; 255
    7d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    7d90:	05 c0       	rjmp	.+10     	; 0x7d9c <vfprintf+0x23e>
    7d92:	ef 2c       	mov	r14, r15
    7d94:	ff 24       	eor	r15, r15
    7d96:	f0 e1       	ldi	r31, 0x10	; 16
    7d98:	ef 22       	and	r14, r31
    7d9a:	ff 24       	eor	r15, r15
    7d9c:	f8 01       	movw	r30, r16
    7d9e:	84 91       	lpm	r24, Z+
    7da0:	88 23       	and	r24, r24
    7da2:	61 f7       	brne	.-40     	; 0x7d7c <vfprintf+0x21e>
    7da4:	14 c1       	rjmp	.+552    	; 0x7fce <vfprintf+0x470>
    7da6:	f7 fe       	sbrs	r15, 7
    7da8:	12 c0       	rjmp	.+36     	; 0x7dce <vfprintf+0x270>
    7daa:	bc 0c       	add	r11, r12
    7dac:	24 fe       	sbrs	r2, 4
    7dae:	04 c0       	rjmp	.+8      	; 0x7db8 <vfprintf+0x25a>
    7db0:	8a 81       	ldd	r24, Y+2	; 0x02
    7db2:	81 33       	cpi	r24, 0x31	; 49
    7db4:	09 f4       	brne	.+2      	; 0x7db8 <vfprintf+0x25a>
    7db6:	ba 94       	dec	r11
    7db8:	1b 14       	cp	r1, r11
    7dba:	1c f0       	brlt	.+6      	; 0x7dc2 <vfprintf+0x264>
    7dbc:	bb 24       	eor	r11, r11
    7dbe:	b3 94       	inc	r11
    7dc0:	2d c0       	rjmp	.+90     	; 0x7e1c <vfprintf+0x2be>
    7dc2:	f8 e0       	ldi	r31, 0x08	; 8
    7dc4:	fb 15       	cp	r31, r11
    7dc6:	50 f5       	brcc	.+84     	; 0x7e1c <vfprintf+0x2be>
    7dc8:	38 e0       	ldi	r19, 0x08	; 8
    7dca:	b3 2e       	mov	r11, r19
    7dcc:	27 c0       	rjmp	.+78     	; 0x7e1c <vfprintf+0x2be>
    7dce:	f6 fc       	sbrc	r15, 6
    7dd0:	25 c0       	rjmp	.+74     	; 0x7e1c <vfprintf+0x2be>
    7dd2:	89 2d       	mov	r24, r9
    7dd4:	90 e0       	ldi	r25, 0x00	; 0
    7dd6:	8c 15       	cp	r24, r12
    7dd8:	9d 05       	cpc	r25, r13
    7dda:	4c f0       	brlt	.+18     	; 0x7dee <vfprintf+0x290>
    7ddc:	2c ef       	ldi	r18, 0xFC	; 252
    7dde:	c2 16       	cp	r12, r18
    7de0:	2f ef       	ldi	r18, 0xFF	; 255
    7de2:	d2 06       	cpc	r13, r18
    7de4:	24 f0       	brlt	.+8      	; 0x7dee <vfprintf+0x290>
    7de6:	30 e8       	ldi	r19, 0x80	; 128
    7de8:	f3 2a       	or	r15, r19
    7dea:	01 c0       	rjmp	.+2      	; 0x7dee <vfprintf+0x290>
    7dec:	9a 94       	dec	r9
    7dee:	99 20       	and	r9, r9
    7df0:	49 f0       	breq	.+18     	; 0x7e04 <vfprintf+0x2a6>
    7df2:	e2 e0       	ldi	r30, 0x02	; 2
    7df4:	f0 e0       	ldi	r31, 0x00	; 0
    7df6:	ec 0f       	add	r30, r28
    7df8:	fd 1f       	adc	r31, r29
    7dfa:	e9 0d       	add	r30, r9
    7dfc:	f1 1d       	adc	r31, r1
    7dfe:	80 81       	ld	r24, Z
    7e00:	80 33       	cpi	r24, 0x30	; 48
    7e02:	a1 f3       	breq	.-24     	; 0x7dec <vfprintf+0x28e>
    7e04:	f7 fe       	sbrs	r15, 7
    7e06:	0a c0       	rjmp	.+20     	; 0x7e1c <vfprintf+0x2be>
    7e08:	b9 2c       	mov	r11, r9
    7e0a:	b3 94       	inc	r11
    7e0c:	89 2d       	mov	r24, r9
    7e0e:	90 e0       	ldi	r25, 0x00	; 0
    7e10:	c8 16       	cp	r12, r24
    7e12:	d9 06       	cpc	r13, r25
    7e14:	14 f0       	brlt	.+4      	; 0x7e1a <vfprintf+0x2bc>
    7e16:	99 24       	eor	r9, r9
    7e18:	01 c0       	rjmp	.+2      	; 0x7e1c <vfprintf+0x2be>
    7e1a:	9c 18       	sub	r9, r12
    7e1c:	f7 fc       	sbrc	r15, 7
    7e1e:	03 c0       	rjmp	.+6      	; 0x7e26 <vfprintf+0x2c8>
    7e20:	25 e0       	ldi	r18, 0x05	; 5
    7e22:	30 e0       	ldi	r19, 0x00	; 0
    7e24:	09 c0       	rjmp	.+18     	; 0x7e38 <vfprintf+0x2da>
    7e26:	1c 14       	cp	r1, r12
    7e28:	1d 04       	cpc	r1, r13
    7e2a:	1c f0       	brlt	.+6      	; 0x7e32 <vfprintf+0x2d4>
    7e2c:	21 e0       	ldi	r18, 0x01	; 1
    7e2e:	30 e0       	ldi	r19, 0x00	; 0
    7e30:	03 c0       	rjmp	.+6      	; 0x7e38 <vfprintf+0x2da>
    7e32:	96 01       	movw	r18, r12
    7e34:	2f 5f       	subi	r18, 0xFF	; 255
    7e36:	3f 4f       	sbci	r19, 0xFF	; 255
    7e38:	11 23       	and	r17, r17
    7e3a:	11 f0       	breq	.+4      	; 0x7e40 <vfprintf+0x2e2>
    7e3c:	2f 5f       	subi	r18, 0xFF	; 255
    7e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    7e40:	99 20       	and	r9, r9
    7e42:	29 f0       	breq	.+10     	; 0x7e4e <vfprintf+0x2f0>
    7e44:	89 2d       	mov	r24, r9
    7e46:	90 e0       	ldi	r25, 0x00	; 0
    7e48:	01 96       	adiw	r24, 0x01	; 1
    7e4a:	28 0f       	add	r18, r24
    7e4c:	39 1f       	adc	r19, r25
    7e4e:	88 2d       	mov	r24, r8
    7e50:	90 e0       	ldi	r25, 0x00	; 0
    7e52:	28 17       	cp	r18, r24
    7e54:	39 07       	cpc	r19, r25
    7e56:	14 f0       	brlt	.+4      	; 0x7e5c <vfprintf+0x2fe>
    7e58:	88 24       	eor	r8, r8
    7e5a:	01 c0       	rjmp	.+2      	; 0x7e5e <vfprintf+0x300>
    7e5c:	82 1a       	sub	r8, r18
    7e5e:	4f 2c       	mov	r4, r15
    7e60:	55 24       	eor	r5, r5
    7e62:	c2 01       	movw	r24, r4
    7e64:	89 70       	andi	r24, 0x09	; 9
    7e66:	90 70       	andi	r25, 0x00	; 0
    7e68:	89 2b       	or	r24, r25
    7e6a:	39 f0       	breq	.+14     	; 0x7e7a <vfprintf+0x31c>
    7e6c:	08 c0       	rjmp	.+16     	; 0x7e7e <vfprintf+0x320>
    7e6e:	80 e2       	ldi	r24, 0x20	; 32
    7e70:	90 e0       	ldi	r25, 0x00	; 0
    7e72:	b3 01       	movw	r22, r6
    7e74:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    7e78:	8a 94       	dec	r8
    7e7a:	88 20       	and	r8, r8
    7e7c:	c1 f7       	brne	.-16     	; 0x7e6e <vfprintf+0x310>
    7e7e:	11 23       	and	r17, r17
    7e80:	29 f0       	breq	.+10     	; 0x7e8c <vfprintf+0x32e>
    7e82:	81 2f       	mov	r24, r17
    7e84:	90 e0       	ldi	r25, 0x00	; 0
    7e86:	b3 01       	movw	r22, r6
    7e88:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    7e8c:	43 fe       	sbrs	r4, 3
    7e8e:	07 c0       	rjmp	.+14     	; 0x7e9e <vfprintf+0x340>
    7e90:	08 c0       	rjmp	.+16     	; 0x7ea2 <vfprintf+0x344>
    7e92:	80 e3       	ldi	r24, 0x30	; 48
    7e94:	90 e0       	ldi	r25, 0x00	; 0
    7e96:	b3 01       	movw	r22, r6
    7e98:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    7e9c:	8a 94       	dec	r8
    7e9e:	88 20       	and	r8, r8
    7ea0:	c1 f7       	brne	.-16     	; 0x7e92 <vfprintf+0x334>
    7ea2:	f7 fe       	sbrs	r15, 7
    7ea4:	46 c0       	rjmp	.+140    	; 0x7f32 <vfprintf+0x3d4>
    7ea6:	86 01       	movw	r16, r12
    7ea8:	d7 fe       	sbrs	r13, 7
    7eaa:	02 c0       	rjmp	.+4      	; 0x7eb0 <vfprintf+0x352>
    7eac:	00 e0       	ldi	r16, 0x00	; 0
    7eae:	10 e0       	ldi	r17, 0x00	; 0
    7eb0:	76 01       	movw	r14, r12
    7eb2:	08 94       	sec
    7eb4:	e1 1c       	adc	r14, r1
    7eb6:	f1 1c       	adc	r15, r1
    7eb8:	e0 1a       	sub	r14, r16
    7eba:	f1 0a       	sbc	r15, r17
    7ebc:	41 e0       	ldi	r20, 0x01	; 1
    7ebe:	50 e0       	ldi	r21, 0x00	; 0
    7ec0:	4c 0f       	add	r20, r28
    7ec2:	5d 1f       	adc	r21, r29
    7ec4:	e4 0e       	add	r14, r20
    7ec6:	f5 1e       	adc	r15, r21
    7ec8:	26 01       	movw	r4, r12
    7eca:	4b 18       	sub	r4, r11
    7ecc:	51 08       	sbc	r5, r1
    7ece:	89 2d       	mov	r24, r9
    7ed0:	90 e0       	ldi	r25, 0x00	; 0
    7ed2:	aa 24       	eor	r10, r10
    7ed4:	bb 24       	eor	r11, r11
    7ed6:	a8 1a       	sub	r10, r24
    7ed8:	b9 0a       	sbc	r11, r25
    7eda:	5f ef       	ldi	r21, 0xFF	; 255
    7edc:	0f 3f       	cpi	r16, 0xFF	; 255
    7ede:	15 07       	cpc	r17, r21
    7ee0:	29 f4       	brne	.+10     	; 0x7eec <vfprintf+0x38e>
    7ee2:	8e e2       	ldi	r24, 0x2E	; 46
    7ee4:	90 e0       	ldi	r25, 0x00	; 0
    7ee6:	b3 01       	movw	r22, r6
    7ee8:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    7eec:	c0 16       	cp	r12, r16
    7eee:	d1 06       	cpc	r13, r17
    7ef0:	34 f0       	brlt	.+12     	; 0x7efe <vfprintf+0x3a0>
    7ef2:	40 16       	cp	r4, r16
    7ef4:	51 06       	cpc	r5, r17
    7ef6:	1c f4       	brge	.+6      	; 0x7efe <vfprintf+0x3a0>
    7ef8:	f7 01       	movw	r30, r14
    7efa:	80 81       	ld	r24, Z
    7efc:	01 c0       	rjmp	.+2      	; 0x7f00 <vfprintf+0x3a2>
    7efe:	80 e3       	ldi	r24, 0x30	; 48
    7f00:	01 50       	subi	r16, 0x01	; 1
    7f02:	10 40       	sbci	r17, 0x00	; 0
    7f04:	08 94       	sec
    7f06:	e1 1c       	adc	r14, r1
    7f08:	f1 1c       	adc	r15, r1
    7f0a:	0a 15       	cp	r16, r10
    7f0c:	1b 05       	cpc	r17, r11
    7f0e:	2c f0       	brlt	.+10     	; 0x7f1a <vfprintf+0x3bc>
    7f10:	90 e0       	ldi	r25, 0x00	; 0
    7f12:	b3 01       	movw	r22, r6
    7f14:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    7f18:	e0 cf       	rjmp	.-64     	; 0x7eda <vfprintf+0x37c>
    7f1a:	0c 15       	cp	r16, r12
    7f1c:	1d 05       	cpc	r17, r13
    7f1e:	39 f4       	brne	.+14     	; 0x7f2e <vfprintf+0x3d0>
    7f20:	9a 81       	ldd	r25, Y+2	; 0x02
    7f22:	96 33       	cpi	r25, 0x36	; 54
    7f24:	18 f4       	brcc	.+6      	; 0x7f2c <vfprintf+0x3ce>
    7f26:	95 33       	cpi	r25, 0x35	; 53
    7f28:	11 f4       	brne	.+4      	; 0x7f2e <vfprintf+0x3d0>
    7f2a:	24 fe       	sbrs	r2, 4
    7f2c:	81 e3       	ldi	r24, 0x31	; 49
    7f2e:	90 e0       	ldi	r25, 0x00	; 0
    7f30:	4b c0       	rjmp	.+150    	; 0x7fc8 <vfprintf+0x46a>
    7f32:	8a 81       	ldd	r24, Y+2	; 0x02
    7f34:	81 33       	cpi	r24, 0x31	; 49
    7f36:	09 f0       	breq	.+2      	; 0x7f3a <vfprintf+0x3dc>
    7f38:	0f 7e       	andi	r16, 0xEF	; 239
    7f3a:	90 e0       	ldi	r25, 0x00	; 0
    7f3c:	b3 01       	movw	r22, r6
    7f3e:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    7f42:	99 20       	and	r9, r9
    7f44:	a1 f0       	breq	.+40     	; 0x7f6e <vfprintf+0x410>
    7f46:	8e e2       	ldi	r24, 0x2E	; 46
    7f48:	90 e0       	ldi	r25, 0x00	; 0
    7f4a:	b3 01       	movw	r22, r6
    7f4c:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    7f50:	12 e0       	ldi	r17, 0x02	; 2
    7f52:	e1 e0       	ldi	r30, 0x01	; 1
    7f54:	f0 e0       	ldi	r31, 0x00	; 0
    7f56:	ec 0f       	add	r30, r28
    7f58:	fd 1f       	adc	r31, r29
    7f5a:	e1 0f       	add	r30, r17
    7f5c:	f1 1d       	adc	r31, r1
    7f5e:	1f 5f       	subi	r17, 0xFF	; 255
    7f60:	80 81       	ld	r24, Z
    7f62:	90 e0       	ldi	r25, 0x00	; 0
    7f64:	b3 01       	movw	r22, r6
    7f66:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    7f6a:	9a 94       	dec	r9
    7f6c:	91 f7       	brne	.-28     	; 0x7f52 <vfprintf+0x3f4>
    7f6e:	44 fc       	sbrc	r4, 4
    7f70:	03 c0       	rjmp	.+6      	; 0x7f78 <vfprintf+0x41a>
    7f72:	85 e6       	ldi	r24, 0x65	; 101
    7f74:	90 e0       	ldi	r25, 0x00	; 0
    7f76:	02 c0       	rjmp	.+4      	; 0x7f7c <vfprintf+0x41e>
    7f78:	85 e4       	ldi	r24, 0x45	; 69
    7f7a:	90 e0       	ldi	r25, 0x00	; 0
    7f7c:	b3 01       	movw	r22, r6
    7f7e:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    7f82:	d7 fc       	sbrc	r13, 7
    7f84:	05 c0       	rjmp	.+10     	; 0x7f90 <vfprintf+0x432>
    7f86:	c1 14       	cp	r12, r1
    7f88:	d1 04       	cpc	r13, r1
    7f8a:	41 f4       	brne	.+16     	; 0x7f9c <vfprintf+0x43e>
    7f8c:	04 ff       	sbrs	r16, 4
    7f8e:	06 c0       	rjmp	.+12     	; 0x7f9c <vfprintf+0x43e>
    7f90:	d0 94       	com	r13
    7f92:	c1 94       	neg	r12
    7f94:	d1 08       	sbc	r13, r1
    7f96:	d3 94       	inc	r13
    7f98:	8d e2       	ldi	r24, 0x2D	; 45
    7f9a:	01 c0       	rjmp	.+2      	; 0x7f9e <vfprintf+0x440>
    7f9c:	8b e2       	ldi	r24, 0x2B	; 43
    7f9e:	90 e0       	ldi	r25, 0x00	; 0
    7fa0:	b3 01       	movw	r22, r6
    7fa2:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    7fa6:	80 e3       	ldi	r24, 0x30	; 48
    7fa8:	05 c0       	rjmp	.+10     	; 0x7fb4 <vfprintf+0x456>
    7faa:	8f 5f       	subi	r24, 0xFF	; 255
    7fac:	26 ef       	ldi	r18, 0xF6	; 246
    7fae:	3f ef       	ldi	r19, 0xFF	; 255
    7fb0:	c2 0e       	add	r12, r18
    7fb2:	d3 1e       	adc	r13, r19
    7fb4:	3a e0       	ldi	r19, 0x0A	; 10
    7fb6:	c3 16       	cp	r12, r19
    7fb8:	d1 04       	cpc	r13, r1
    7fba:	bc f7       	brge	.-18     	; 0x7faa <vfprintf+0x44c>
    7fbc:	90 e0       	ldi	r25, 0x00	; 0
    7fbe:	b3 01       	movw	r22, r6
    7fc0:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    7fc4:	c6 01       	movw	r24, r12
    7fc6:	c0 96       	adiw	r24, 0x30	; 48
    7fc8:	b3 01       	movw	r22, r6
    7fca:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    7fce:	cc 84       	ldd	r12, Y+12	; 0x0c
    7fd0:	dd 84       	ldd	r13, Y+13	; 0x0d
    7fd2:	52 c1       	rjmp	.+676    	; 0x8278 <vfprintf+0x71a>
    7fd4:	93 36       	cpi	r25, 0x63	; 99
    7fd6:	31 f0       	breq	.+12     	; 0x7fe4 <vfprintf+0x486>
    7fd8:	93 37       	cpi	r25, 0x73	; 115
    7fda:	99 f0       	breq	.+38     	; 0x8002 <vfprintf+0x4a4>
    7fdc:	93 35       	cpi	r25, 0x53	; 83
    7fde:	09 f0       	breq	.+2      	; 0x7fe2 <vfprintf+0x484>
    7fe0:	59 c0       	rjmp	.+178    	; 0x8094 <vfprintf+0x536>
    7fe2:	23 c0       	rjmp	.+70     	; 0x802a <vfprintf+0x4cc>
    7fe4:	f6 01       	movw	r30, r12
    7fe6:	80 81       	ld	r24, Z
    7fe8:	89 83       	std	Y+1, r24	; 0x01
    7fea:	5e 01       	movw	r10, r28
    7fec:	08 94       	sec
    7fee:	a1 1c       	adc	r10, r1
    7ff0:	b1 1c       	adc	r11, r1
    7ff2:	22 e0       	ldi	r18, 0x02	; 2
    7ff4:	30 e0       	ldi	r19, 0x00	; 0
    7ff6:	c2 0e       	add	r12, r18
    7ff8:	d3 1e       	adc	r13, r19
    7ffa:	21 e0       	ldi	r18, 0x01	; 1
    7ffc:	e2 2e       	mov	r14, r18
    7ffe:	f1 2c       	mov	r15, r1
    8000:	12 c0       	rjmp	.+36     	; 0x8026 <vfprintf+0x4c8>
    8002:	f6 01       	movw	r30, r12
    8004:	a0 80       	ld	r10, Z
    8006:	b1 80       	ldd	r11, Z+1	; 0x01
    8008:	16 fd       	sbrc	r17, 6
    800a:	03 c0       	rjmp	.+6      	; 0x8012 <vfprintf+0x4b4>
    800c:	6f ef       	ldi	r22, 0xFF	; 255
    800e:	7f ef       	ldi	r23, 0xFF	; 255
    8010:	02 c0       	rjmp	.+4      	; 0x8016 <vfprintf+0x4b8>
    8012:	69 2d       	mov	r22, r9
    8014:	70 e0       	ldi	r23, 0x00	; 0
    8016:	22 e0       	ldi	r18, 0x02	; 2
    8018:	30 e0       	ldi	r19, 0x00	; 0
    801a:	c2 0e       	add	r12, r18
    801c:	d3 1e       	adc	r13, r19
    801e:	c5 01       	movw	r24, r10
    8020:	0e 94 9b 48 	call	0x9136	; 0x9136 <strnlen>
    8024:	7c 01       	movw	r14, r24
    8026:	1f 77       	andi	r17, 0x7F	; 127
    8028:	13 c0       	rjmp	.+38     	; 0x8050 <vfprintf+0x4f2>
    802a:	f6 01       	movw	r30, r12
    802c:	a0 80       	ld	r10, Z
    802e:	b1 80       	ldd	r11, Z+1	; 0x01
    8030:	16 fd       	sbrc	r17, 6
    8032:	03 c0       	rjmp	.+6      	; 0x803a <vfprintf+0x4dc>
    8034:	6f ef       	ldi	r22, 0xFF	; 255
    8036:	7f ef       	ldi	r23, 0xFF	; 255
    8038:	02 c0       	rjmp	.+4      	; 0x803e <vfprintf+0x4e0>
    803a:	69 2d       	mov	r22, r9
    803c:	70 e0       	ldi	r23, 0x00	; 0
    803e:	22 e0       	ldi	r18, 0x02	; 2
    8040:	30 e0       	ldi	r19, 0x00	; 0
    8042:	c2 0e       	add	r12, r18
    8044:	d3 1e       	adc	r13, r19
    8046:	c5 01       	movw	r24, r10
    8048:	0e 94 90 48 	call	0x9120	; 0x9120 <strnlen_P>
    804c:	7c 01       	movw	r14, r24
    804e:	10 68       	ori	r17, 0x80	; 128
    8050:	13 ff       	sbrs	r17, 3
    8052:	07 c0       	rjmp	.+14     	; 0x8062 <vfprintf+0x504>
    8054:	1b c0       	rjmp	.+54     	; 0x808c <vfprintf+0x52e>
    8056:	80 e2       	ldi	r24, 0x20	; 32
    8058:	90 e0       	ldi	r25, 0x00	; 0
    805a:	b3 01       	movw	r22, r6
    805c:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    8060:	8a 94       	dec	r8
    8062:	88 2d       	mov	r24, r8
    8064:	90 e0       	ldi	r25, 0x00	; 0
    8066:	e8 16       	cp	r14, r24
    8068:	f9 06       	cpc	r15, r25
    806a:	a8 f3       	brcs	.-22     	; 0x8056 <vfprintf+0x4f8>
    806c:	0f c0       	rjmp	.+30     	; 0x808c <vfprintf+0x52e>
    806e:	f5 01       	movw	r30, r10
    8070:	17 fd       	sbrc	r17, 7
    8072:	85 91       	lpm	r24, Z+
    8074:	17 ff       	sbrs	r17, 7
    8076:	81 91       	ld	r24, Z+
    8078:	5f 01       	movw	r10, r30
    807a:	90 e0       	ldi	r25, 0x00	; 0
    807c:	b3 01       	movw	r22, r6
    807e:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    8082:	81 10       	cpse	r8, r1
    8084:	8a 94       	dec	r8
    8086:	08 94       	sec
    8088:	e1 08       	sbc	r14, r1
    808a:	f1 08       	sbc	r15, r1
    808c:	e1 14       	cp	r14, r1
    808e:	f1 04       	cpc	r15, r1
    8090:	71 f7       	brne	.-36     	; 0x806e <vfprintf+0x510>
    8092:	f2 c0       	rjmp	.+484    	; 0x8278 <vfprintf+0x71a>
    8094:	94 36       	cpi	r25, 0x64	; 100
    8096:	11 f0       	breq	.+4      	; 0x809c <vfprintf+0x53e>
    8098:	99 36       	cpi	r25, 0x69	; 105
    809a:	89 f5       	brne	.+98     	; 0x80fe <vfprintf+0x5a0>
    809c:	17 ff       	sbrs	r17, 7
    809e:	08 c0       	rjmp	.+16     	; 0x80b0 <vfprintf+0x552>
    80a0:	f6 01       	movw	r30, r12
    80a2:	20 81       	ld	r18, Z
    80a4:	31 81       	ldd	r19, Z+1	; 0x01
    80a6:	42 81       	ldd	r20, Z+2	; 0x02
    80a8:	53 81       	ldd	r21, Z+3	; 0x03
    80aa:	84 e0       	ldi	r24, 0x04	; 4
    80ac:	90 e0       	ldi	r25, 0x00	; 0
    80ae:	0a c0       	rjmp	.+20     	; 0x80c4 <vfprintf+0x566>
    80b0:	f6 01       	movw	r30, r12
    80b2:	80 81       	ld	r24, Z
    80b4:	91 81       	ldd	r25, Z+1	; 0x01
    80b6:	9c 01       	movw	r18, r24
    80b8:	44 27       	eor	r20, r20
    80ba:	37 fd       	sbrc	r19, 7
    80bc:	40 95       	com	r20
    80be:	54 2f       	mov	r21, r20
    80c0:	82 e0       	ldi	r24, 0x02	; 2
    80c2:	90 e0       	ldi	r25, 0x00	; 0
    80c4:	c8 0e       	add	r12, r24
    80c6:	d9 1e       	adc	r13, r25
    80c8:	9f e6       	ldi	r25, 0x6F	; 111
    80ca:	f9 2e       	mov	r15, r25
    80cc:	f1 22       	and	r15, r17
    80ce:	57 ff       	sbrs	r21, 7
    80d0:	09 c0       	rjmp	.+18     	; 0x80e4 <vfprintf+0x586>
    80d2:	50 95       	com	r21
    80d4:	40 95       	com	r20
    80d6:	30 95       	com	r19
    80d8:	21 95       	neg	r18
    80da:	3f 4f       	sbci	r19, 0xFF	; 255
    80dc:	4f 4f       	sbci	r20, 0xFF	; 255
    80de:	5f 4f       	sbci	r21, 0xFF	; 255
    80e0:	90 e8       	ldi	r25, 0x80	; 128
    80e2:	f9 2a       	or	r15, r25
    80e4:	ca 01       	movw	r24, r20
    80e6:	b9 01       	movw	r22, r18
    80e8:	ae 01       	movw	r20, r28
    80ea:	4f 5f       	subi	r20, 0xFF	; 255
    80ec:	5f 4f       	sbci	r21, 0xFF	; 255
    80ee:	2a e0       	ldi	r18, 0x0A	; 10
    80f0:	30 e0       	ldi	r19, 0x00	; 0
    80f2:	0e 94 35 49 	call	0x926a	; 0x926a <__ultoa_invert>
    80f6:	e8 2e       	mov	r14, r24
    80f8:	e8 89       	ldd	r30, Y+16	; 0x10
    80fa:	ee 1a       	sub	r14, r30
    80fc:	41 c0       	rjmp	.+130    	; 0x8180 <vfprintf+0x622>
    80fe:	95 37       	cpi	r25, 0x75	; 117
    8100:	21 f4       	brne	.+8      	; 0x810a <vfprintf+0x5ac>
    8102:	1f 7e       	andi	r17, 0xEF	; 239
    8104:	2a e0       	ldi	r18, 0x0A	; 10
    8106:	30 e0       	ldi	r19, 0x00	; 0
    8108:	1c c0       	rjmp	.+56     	; 0x8142 <vfprintf+0x5e4>
    810a:	19 7f       	andi	r17, 0xF9	; 249
    810c:	9f 36       	cpi	r25, 0x6F	; 111
    810e:	61 f0       	breq	.+24     	; 0x8128 <vfprintf+0x5ca>
    8110:	90 37       	cpi	r25, 0x70	; 112
    8112:	20 f4       	brcc	.+8      	; 0x811c <vfprintf+0x5be>
    8114:	98 35       	cpi	r25, 0x58	; 88
    8116:	09 f0       	breq	.+2      	; 0x811a <vfprintf+0x5bc>
    8118:	b2 c0       	rjmp	.+356    	; 0x827e <vfprintf+0x720>
    811a:	0f c0       	rjmp	.+30     	; 0x813a <vfprintf+0x5dc>
    811c:	90 37       	cpi	r25, 0x70	; 112
    811e:	39 f0       	breq	.+14     	; 0x812e <vfprintf+0x5d0>
    8120:	98 37       	cpi	r25, 0x78	; 120
    8122:	09 f0       	breq	.+2      	; 0x8126 <vfprintf+0x5c8>
    8124:	ac c0       	rjmp	.+344    	; 0x827e <vfprintf+0x720>
    8126:	04 c0       	rjmp	.+8      	; 0x8130 <vfprintf+0x5d2>
    8128:	28 e0       	ldi	r18, 0x08	; 8
    812a:	30 e0       	ldi	r19, 0x00	; 0
    812c:	0a c0       	rjmp	.+20     	; 0x8142 <vfprintf+0x5e4>
    812e:	10 61       	ori	r17, 0x10	; 16
    8130:	14 fd       	sbrc	r17, 4
    8132:	14 60       	ori	r17, 0x04	; 4
    8134:	20 e1       	ldi	r18, 0x10	; 16
    8136:	30 e0       	ldi	r19, 0x00	; 0
    8138:	04 c0       	rjmp	.+8      	; 0x8142 <vfprintf+0x5e4>
    813a:	14 fd       	sbrc	r17, 4
    813c:	16 60       	ori	r17, 0x06	; 6
    813e:	20 e1       	ldi	r18, 0x10	; 16
    8140:	32 e0       	ldi	r19, 0x02	; 2
    8142:	17 ff       	sbrs	r17, 7
    8144:	08 c0       	rjmp	.+16     	; 0x8156 <vfprintf+0x5f8>
    8146:	f6 01       	movw	r30, r12
    8148:	60 81       	ld	r22, Z
    814a:	71 81       	ldd	r23, Z+1	; 0x01
    814c:	82 81       	ldd	r24, Z+2	; 0x02
    814e:	93 81       	ldd	r25, Z+3	; 0x03
    8150:	44 e0       	ldi	r20, 0x04	; 4
    8152:	50 e0       	ldi	r21, 0x00	; 0
    8154:	08 c0       	rjmp	.+16     	; 0x8166 <vfprintf+0x608>
    8156:	f6 01       	movw	r30, r12
    8158:	80 81       	ld	r24, Z
    815a:	91 81       	ldd	r25, Z+1	; 0x01
    815c:	bc 01       	movw	r22, r24
    815e:	80 e0       	ldi	r24, 0x00	; 0
    8160:	90 e0       	ldi	r25, 0x00	; 0
    8162:	42 e0       	ldi	r20, 0x02	; 2
    8164:	50 e0       	ldi	r21, 0x00	; 0
    8166:	c4 0e       	add	r12, r20
    8168:	d5 1e       	adc	r13, r21
    816a:	ae 01       	movw	r20, r28
    816c:	4f 5f       	subi	r20, 0xFF	; 255
    816e:	5f 4f       	sbci	r21, 0xFF	; 255
    8170:	0e 94 35 49 	call	0x926a	; 0x926a <__ultoa_invert>
    8174:	e8 2e       	mov	r14, r24
    8176:	58 89       	ldd	r21, Y+16	; 0x10
    8178:	e5 1a       	sub	r14, r21
    817a:	8f e7       	ldi	r24, 0x7F	; 127
    817c:	f8 2e       	mov	r15, r24
    817e:	f1 22       	and	r15, r17
    8180:	f6 fe       	sbrs	r15, 6
    8182:	0b c0       	rjmp	.+22     	; 0x819a <vfprintf+0x63c>
    8184:	8e ef       	ldi	r24, 0xFE	; 254
    8186:	f8 22       	and	r15, r24
    8188:	e9 14       	cp	r14, r9
    818a:	38 f4       	brcc	.+14     	; 0x819a <vfprintf+0x63c>
    818c:	f4 fe       	sbrs	r15, 4
    818e:	07 c0       	rjmp	.+14     	; 0x819e <vfprintf+0x640>
    8190:	f2 fc       	sbrc	r15, 2
    8192:	05 c0       	rjmp	.+10     	; 0x819e <vfprintf+0x640>
    8194:	9f ee       	ldi	r25, 0xEF	; 239
    8196:	f9 22       	and	r15, r25
    8198:	02 c0       	rjmp	.+4      	; 0x819e <vfprintf+0x640>
    819a:	1e 2d       	mov	r17, r14
    819c:	01 c0       	rjmp	.+2      	; 0x81a0 <vfprintf+0x642>
    819e:	19 2d       	mov	r17, r9
    81a0:	f4 fe       	sbrs	r15, 4
    81a2:	0d c0       	rjmp	.+26     	; 0x81be <vfprintf+0x660>
    81a4:	fe 01       	movw	r30, r28
    81a6:	ee 0d       	add	r30, r14
    81a8:	f1 1d       	adc	r31, r1
    81aa:	80 81       	ld	r24, Z
    81ac:	80 33       	cpi	r24, 0x30	; 48
    81ae:	19 f4       	brne	.+6      	; 0x81b6 <vfprintf+0x658>
    81b0:	e9 ee       	ldi	r30, 0xE9	; 233
    81b2:	fe 22       	and	r15, r30
    81b4:	08 c0       	rjmp	.+16     	; 0x81c6 <vfprintf+0x668>
    81b6:	1f 5f       	subi	r17, 0xFF	; 255
    81b8:	f2 fe       	sbrs	r15, 2
    81ba:	05 c0       	rjmp	.+10     	; 0x81c6 <vfprintf+0x668>
    81bc:	03 c0       	rjmp	.+6      	; 0x81c4 <vfprintf+0x666>
    81be:	8f 2d       	mov	r24, r15
    81c0:	86 78       	andi	r24, 0x86	; 134
    81c2:	09 f0       	breq	.+2      	; 0x81c6 <vfprintf+0x668>
    81c4:	1f 5f       	subi	r17, 0xFF	; 255
    81c6:	0f 2d       	mov	r16, r15
    81c8:	f3 fc       	sbrc	r15, 3
    81ca:	14 c0       	rjmp	.+40     	; 0x81f4 <vfprintf+0x696>
    81cc:	f0 fe       	sbrs	r15, 0
    81ce:	0f c0       	rjmp	.+30     	; 0x81ee <vfprintf+0x690>
    81d0:	18 15       	cp	r17, r8
    81d2:	10 f0       	brcs	.+4      	; 0x81d8 <vfprintf+0x67a>
    81d4:	9e 2c       	mov	r9, r14
    81d6:	0b c0       	rjmp	.+22     	; 0x81ee <vfprintf+0x690>
    81d8:	9e 2c       	mov	r9, r14
    81da:	98 0c       	add	r9, r8
    81dc:	91 1a       	sub	r9, r17
    81de:	18 2d       	mov	r17, r8
    81e0:	06 c0       	rjmp	.+12     	; 0x81ee <vfprintf+0x690>
    81e2:	80 e2       	ldi	r24, 0x20	; 32
    81e4:	90 e0       	ldi	r25, 0x00	; 0
    81e6:	b3 01       	movw	r22, r6
    81e8:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    81ec:	1f 5f       	subi	r17, 0xFF	; 255
    81ee:	18 15       	cp	r17, r8
    81f0:	c0 f3       	brcs	.-16     	; 0x81e2 <vfprintf+0x684>
    81f2:	04 c0       	rjmp	.+8      	; 0x81fc <vfprintf+0x69e>
    81f4:	18 15       	cp	r17, r8
    81f6:	10 f4       	brcc	.+4      	; 0x81fc <vfprintf+0x69e>
    81f8:	81 1a       	sub	r8, r17
    81fa:	01 c0       	rjmp	.+2      	; 0x81fe <vfprintf+0x6a0>
    81fc:	88 24       	eor	r8, r8
    81fe:	04 ff       	sbrs	r16, 4
    8200:	0f c0       	rjmp	.+30     	; 0x8220 <vfprintf+0x6c2>
    8202:	80 e3       	ldi	r24, 0x30	; 48
    8204:	90 e0       	ldi	r25, 0x00	; 0
    8206:	b3 01       	movw	r22, r6
    8208:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    820c:	02 ff       	sbrs	r16, 2
    820e:	1d c0       	rjmp	.+58     	; 0x824a <vfprintf+0x6ec>
    8210:	01 fd       	sbrc	r16, 1
    8212:	03 c0       	rjmp	.+6      	; 0x821a <vfprintf+0x6bc>
    8214:	88 e7       	ldi	r24, 0x78	; 120
    8216:	90 e0       	ldi	r25, 0x00	; 0
    8218:	0e c0       	rjmp	.+28     	; 0x8236 <vfprintf+0x6d8>
    821a:	88 e5       	ldi	r24, 0x58	; 88
    821c:	90 e0       	ldi	r25, 0x00	; 0
    821e:	0b c0       	rjmp	.+22     	; 0x8236 <vfprintf+0x6d8>
    8220:	80 2f       	mov	r24, r16
    8222:	86 78       	andi	r24, 0x86	; 134
    8224:	91 f0       	breq	.+36     	; 0x824a <vfprintf+0x6ec>
    8226:	01 ff       	sbrs	r16, 1
    8228:	02 c0       	rjmp	.+4      	; 0x822e <vfprintf+0x6d0>
    822a:	8b e2       	ldi	r24, 0x2B	; 43
    822c:	01 c0       	rjmp	.+2      	; 0x8230 <vfprintf+0x6d2>
    822e:	80 e2       	ldi	r24, 0x20	; 32
    8230:	f7 fc       	sbrc	r15, 7
    8232:	8d e2       	ldi	r24, 0x2D	; 45
    8234:	90 e0       	ldi	r25, 0x00	; 0
    8236:	b3 01       	movw	r22, r6
    8238:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    823c:	06 c0       	rjmp	.+12     	; 0x824a <vfprintf+0x6ec>
    823e:	80 e3       	ldi	r24, 0x30	; 48
    8240:	90 e0       	ldi	r25, 0x00	; 0
    8242:	b3 01       	movw	r22, r6
    8244:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    8248:	9a 94       	dec	r9
    824a:	e9 14       	cp	r14, r9
    824c:	c0 f3       	brcs	.-16     	; 0x823e <vfprintf+0x6e0>
    824e:	ea 94       	dec	r14
    8250:	e1 e0       	ldi	r30, 0x01	; 1
    8252:	f0 e0       	ldi	r31, 0x00	; 0
    8254:	ec 0f       	add	r30, r28
    8256:	fd 1f       	adc	r31, r29
    8258:	ee 0d       	add	r30, r14
    825a:	f1 1d       	adc	r31, r1
    825c:	80 81       	ld	r24, Z
    825e:	90 e0       	ldi	r25, 0x00	; 0
    8260:	b3 01       	movw	r22, r6
    8262:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    8266:	ee 20       	and	r14, r14
    8268:	91 f7       	brne	.-28     	; 0x824e <vfprintf+0x6f0>
    826a:	06 c0       	rjmp	.+12     	; 0x8278 <vfprintf+0x71a>
    826c:	80 e2       	ldi	r24, 0x20	; 32
    826e:	90 e0       	ldi	r25, 0x00	; 0
    8270:	b3 01       	movw	r22, r6
    8272:	0e 94 e6 48 	call	0x91cc	; 0x91cc <fputc>
    8276:	8a 94       	dec	r8
    8278:	88 20       	and	r8, r8
    827a:	c1 f7       	brne	.-16     	; 0x826c <vfprintf+0x70e>
    827c:	99 cc       	rjmp	.-1742   	; 0x7bb0 <vfprintf+0x52>
    827e:	f3 01       	movw	r30, r6
    8280:	66 81       	ldd	r22, Z+6	; 0x06
    8282:	77 81       	ldd	r23, Z+7	; 0x07
    8284:	cb 01       	movw	r24, r22
    8286:	61 96       	adiw	r28, 0x11	; 17
    8288:	cd bf       	out	0x3d, r28	; 61
    828a:	de bf       	out	0x3e, r29	; 62
    828c:	cf 91       	pop	r28
    828e:	df 91       	pop	r29
    8290:	1f 91       	pop	r17
    8292:	0f 91       	pop	r16
    8294:	ff 90       	pop	r15
    8296:	ef 90       	pop	r14
    8298:	df 90       	pop	r13
    829a:	cf 90       	pop	r12
    829c:	bf 90       	pop	r11
    829e:	af 90       	pop	r10
    82a0:	9f 90       	pop	r9
    82a2:	8f 90       	pop	r8
    82a4:	7f 90       	pop	r7
    82a6:	6f 90       	pop	r6
    82a8:	5f 90       	pop	r5
    82aa:	4f 90       	pop	r4
    82ac:	3f 90       	pop	r3
    82ae:	2f 90       	pop	r2
    82b0:	08 95       	ret

000082b2 <__subsf3>:
    82b2:	50 58       	subi	r21, 0x80	; 128

000082b4 <__addsf3>:
    82b4:	bb 27       	eor	r27, r27
    82b6:	aa 27       	eor	r26, r26
    82b8:	0e d0       	rcall	.+28     	; 0x82d6 <__addsf3x>
    82ba:	29 c2       	rjmp	.+1106   	; 0x870e <__fp_round>
    82bc:	f2 d1       	rcall	.+996    	; 0x86a2 <__fp_pscA>
    82be:	30 f0       	brcs	.+12     	; 0x82cc <__addsf3+0x18>
    82c0:	f7 d1       	rcall	.+1006   	; 0x86b0 <__fp_pscB>
    82c2:	20 f0       	brcs	.+8      	; 0x82cc <__addsf3+0x18>
    82c4:	31 f4       	brne	.+12     	; 0x82d2 <__addsf3+0x1e>
    82c6:	9f 3f       	cpi	r25, 0xFF	; 255
    82c8:	11 f4       	brne	.+4      	; 0x82ce <__addsf3+0x1a>
    82ca:	1e f4       	brtc	.+6      	; 0x82d2 <__addsf3+0x1e>
    82cc:	c2 c1       	rjmp	.+900    	; 0x8652 <__fp_nan>
    82ce:	0e f4       	brtc	.+2      	; 0x82d2 <__addsf3+0x1e>
    82d0:	e0 95       	com	r30
    82d2:	e7 fb       	bst	r30, 7
    82d4:	8f c1       	rjmp	.+798    	; 0x85f4 <__fp_inf>

000082d6 <__addsf3x>:
    82d6:	e9 2f       	mov	r30, r25
    82d8:	3c d2       	rcall	.+1144   	; 0x8752 <__fp_split3>
    82da:	80 f3       	brcs	.-32     	; 0x82bc <__addsf3+0x8>
    82dc:	ba 17       	cp	r27, r26
    82de:	62 07       	cpc	r22, r18
    82e0:	73 07       	cpc	r23, r19
    82e2:	84 07       	cpc	r24, r20
    82e4:	95 07       	cpc	r25, r21
    82e6:	18 f0       	brcs	.+6      	; 0x82ee <__addsf3x+0x18>
    82e8:	71 f4       	brne	.+28     	; 0x8306 <__addsf3x+0x30>
    82ea:	9e f5       	brtc	.+102    	; 0x8352 <__addsf3x+0x7c>
    82ec:	6b c2       	rjmp	.+1238   	; 0x87c4 <__fp_zero>
    82ee:	0e f4       	brtc	.+2      	; 0x82f2 <__addsf3x+0x1c>
    82f0:	e0 95       	com	r30
    82f2:	0b 2e       	mov	r0, r27
    82f4:	ba 2f       	mov	r27, r26
    82f6:	a0 2d       	mov	r26, r0
    82f8:	0b 01       	movw	r0, r22
    82fa:	b9 01       	movw	r22, r18
    82fc:	90 01       	movw	r18, r0
    82fe:	0c 01       	movw	r0, r24
    8300:	ca 01       	movw	r24, r20
    8302:	a0 01       	movw	r20, r0
    8304:	11 24       	eor	r1, r1
    8306:	ff 27       	eor	r31, r31
    8308:	59 1b       	sub	r21, r25
    830a:	99 f0       	breq	.+38     	; 0x8332 <__addsf3x+0x5c>
    830c:	59 3f       	cpi	r21, 0xF9	; 249
    830e:	50 f4       	brcc	.+20     	; 0x8324 <__addsf3x+0x4e>
    8310:	50 3e       	cpi	r21, 0xE0	; 224
    8312:	68 f1       	brcs	.+90     	; 0x836e <__addsf3x+0x98>
    8314:	1a 16       	cp	r1, r26
    8316:	f0 40       	sbci	r31, 0x00	; 0
    8318:	a2 2f       	mov	r26, r18
    831a:	23 2f       	mov	r18, r19
    831c:	34 2f       	mov	r19, r20
    831e:	44 27       	eor	r20, r20
    8320:	58 5f       	subi	r21, 0xF8	; 248
    8322:	f3 cf       	rjmp	.-26     	; 0x830a <__addsf3x+0x34>
    8324:	46 95       	lsr	r20
    8326:	37 95       	ror	r19
    8328:	27 95       	ror	r18
    832a:	a7 95       	ror	r26
    832c:	f0 40       	sbci	r31, 0x00	; 0
    832e:	53 95       	inc	r21
    8330:	c9 f7       	brne	.-14     	; 0x8324 <__addsf3x+0x4e>
    8332:	7e f4       	brtc	.+30     	; 0x8352 <__addsf3x+0x7c>
    8334:	1f 16       	cp	r1, r31
    8336:	ba 0b       	sbc	r27, r26
    8338:	62 0b       	sbc	r22, r18
    833a:	73 0b       	sbc	r23, r19
    833c:	84 0b       	sbc	r24, r20
    833e:	ba f0       	brmi	.+46     	; 0x836e <__addsf3x+0x98>
    8340:	91 50       	subi	r25, 0x01	; 1
    8342:	a1 f0       	breq	.+40     	; 0x836c <__addsf3x+0x96>
    8344:	ff 0f       	add	r31, r31
    8346:	bb 1f       	adc	r27, r27
    8348:	66 1f       	adc	r22, r22
    834a:	77 1f       	adc	r23, r23
    834c:	88 1f       	adc	r24, r24
    834e:	c2 f7       	brpl	.-16     	; 0x8340 <__addsf3x+0x6a>
    8350:	0e c0       	rjmp	.+28     	; 0x836e <__addsf3x+0x98>
    8352:	ba 0f       	add	r27, r26
    8354:	62 1f       	adc	r22, r18
    8356:	73 1f       	adc	r23, r19
    8358:	84 1f       	adc	r24, r20
    835a:	48 f4       	brcc	.+18     	; 0x836e <__addsf3x+0x98>
    835c:	87 95       	ror	r24
    835e:	77 95       	ror	r23
    8360:	67 95       	ror	r22
    8362:	b7 95       	ror	r27
    8364:	f7 95       	ror	r31
    8366:	9e 3f       	cpi	r25, 0xFE	; 254
    8368:	08 f0       	brcs	.+2      	; 0x836c <__addsf3x+0x96>
    836a:	b3 cf       	rjmp	.-154    	; 0x82d2 <__addsf3+0x1e>
    836c:	93 95       	inc	r25
    836e:	88 0f       	add	r24, r24
    8370:	08 f0       	brcs	.+2      	; 0x8374 <__addsf3x+0x9e>
    8372:	99 27       	eor	r25, r25
    8374:	ee 0f       	add	r30, r30
    8376:	97 95       	ror	r25
    8378:	87 95       	ror	r24
    837a:	08 95       	ret

0000837c <atan>:
    837c:	df 93       	push	r29
    837e:	dd 27       	eor	r29, r29
    8380:	b9 2f       	mov	r27, r25
    8382:	bf 77       	andi	r27, 0x7F	; 127
    8384:	40 e8       	ldi	r20, 0x80	; 128
    8386:	5f e3       	ldi	r21, 0x3F	; 63
    8388:	16 16       	cp	r1, r22
    838a:	17 06       	cpc	r1, r23
    838c:	48 07       	cpc	r20, r24
    838e:	5b 07       	cpc	r21, r27
    8390:	10 f4       	brcc	.+4      	; 0x8396 <atan+0x1a>
    8392:	d9 2f       	mov	r29, r25
    8394:	83 d2       	rcall	.+1286   	; 0x889c <inverse>
    8396:	9f 93       	push	r25
    8398:	8f 93       	push	r24
    839a:	7f 93       	push	r23
    839c:	6f 93       	push	r22
    839e:	96 d3       	rcall	.+1836   	; 0x8acc <square>
    83a0:	e8 ee       	ldi	r30, 0xE8	; 232
    83a2:	f1 e0       	ldi	r31, 0x01	; 1
    83a4:	59 d1       	rcall	.+690    	; 0x8658 <__fp_powser>
    83a6:	b3 d1       	rcall	.+870    	; 0x870e <__fp_round>
    83a8:	2f 91       	pop	r18
    83aa:	3f 91       	pop	r19
    83ac:	4f 91       	pop	r20
    83ae:	5f 91       	pop	r21
    83b0:	ee d2       	rcall	.+1500   	; 0x898e <__mulsf3x>
    83b2:	dd 23       	and	r29, r29
    83b4:	49 f0       	breq	.+18     	; 0x83c8 <atan+0x4c>
    83b6:	90 58       	subi	r25, 0x80	; 128
    83b8:	a2 ea       	ldi	r26, 0xA2	; 162
    83ba:	2a ed       	ldi	r18, 0xDA	; 218
    83bc:	3f e0       	ldi	r19, 0x0F	; 15
    83be:	49 ec       	ldi	r20, 0xC9	; 201
    83c0:	5f e3       	ldi	r21, 0x3F	; 63
    83c2:	d0 78       	andi	r29, 0x80	; 128
    83c4:	5d 27       	eor	r21, r29
    83c6:	87 df       	rcall	.-242    	; 0x82d6 <__addsf3x>
    83c8:	df 91       	pop	r29
    83ca:	a1 c1       	rjmp	.+834    	; 0x870e <__fp_round>

000083cc <ceil>:
    83cc:	e4 d1       	rcall	.+968    	; 0x8796 <__fp_trunc>
    83ce:	80 f0       	brcs	.+32     	; 0x83f0 <ceil+0x24>
    83d0:	9f 37       	cpi	r25, 0x7F	; 127
    83d2:	40 f4       	brcc	.+16     	; 0x83e4 <ceil+0x18>
    83d4:	91 11       	cpse	r25, r1
    83d6:	0e f4       	brtc	.+2      	; 0x83da <ceil+0xe>
    83d8:	f6 c1       	rjmp	.+1004   	; 0x87c6 <__fp_szero>
    83da:	60 e0       	ldi	r22, 0x00	; 0
    83dc:	70 e0       	ldi	r23, 0x00	; 0
    83de:	80 e8       	ldi	r24, 0x80	; 128
    83e0:	9f e3       	ldi	r25, 0x3F	; 63
    83e2:	08 95       	ret
    83e4:	26 f0       	brts	.+8      	; 0x83ee <ceil+0x22>
    83e6:	1b 16       	cp	r1, r27
    83e8:	61 1d       	adc	r22, r1
    83ea:	71 1d       	adc	r23, r1
    83ec:	81 1d       	adc	r24, r1
    83ee:	08 c1       	rjmp	.+528    	; 0x8600 <__fp_mintl>
    83f0:	22 c1       	rjmp	.+580    	; 0x8636 <__fp_mpack>

000083f2 <__cmpsf2>:
    83f2:	dc d0       	rcall	.+440    	; 0x85ac <__fp_cmp>
    83f4:	08 f4       	brcc	.+2      	; 0x83f8 <__cmpsf2+0x6>
    83f6:	81 e0       	ldi	r24, 0x01	; 1
    83f8:	08 95       	ret

000083fa <cos>:
    83fa:	62 d1       	rcall	.+708    	; 0x86c0 <__fp_rempio2>
    83fc:	e3 95       	inc	r30
    83fe:	98 c1       	rjmp	.+816    	; 0x8730 <__fp_sinus>

00008400 <__divsf3>:
    8400:	0c d0       	rcall	.+24     	; 0x841a <__divsf3x>
    8402:	85 c1       	rjmp	.+778    	; 0x870e <__fp_round>
    8404:	55 d1       	rcall	.+682    	; 0x86b0 <__fp_pscB>
    8406:	40 f0       	brcs	.+16     	; 0x8418 <__divsf3+0x18>
    8408:	4c d1       	rcall	.+664    	; 0x86a2 <__fp_pscA>
    840a:	30 f0       	brcs	.+12     	; 0x8418 <__divsf3+0x18>
    840c:	21 f4       	brne	.+8      	; 0x8416 <__divsf3+0x16>
    840e:	5f 3f       	cpi	r21, 0xFF	; 255
    8410:	19 f0       	breq	.+6      	; 0x8418 <__divsf3+0x18>
    8412:	f0 c0       	rjmp	.+480    	; 0x85f4 <__fp_inf>
    8414:	51 11       	cpse	r21, r1
    8416:	d7 c1       	rjmp	.+942    	; 0x87c6 <__fp_szero>
    8418:	1c c1       	rjmp	.+568    	; 0x8652 <__fp_nan>

0000841a <__divsf3x>:
    841a:	9b d1       	rcall	.+822    	; 0x8752 <__fp_split3>
    841c:	98 f3       	brcs	.-26     	; 0x8404 <__divsf3+0x4>

0000841e <__divsf3_pse>:
    841e:	99 23       	and	r25, r25
    8420:	c9 f3       	breq	.-14     	; 0x8414 <__divsf3+0x14>
    8422:	55 23       	and	r21, r21
    8424:	b1 f3       	breq	.-20     	; 0x8412 <__divsf3+0x12>
    8426:	95 1b       	sub	r25, r21
    8428:	55 0b       	sbc	r21, r21
    842a:	bb 27       	eor	r27, r27
    842c:	aa 27       	eor	r26, r26
    842e:	62 17       	cp	r22, r18
    8430:	73 07       	cpc	r23, r19
    8432:	84 07       	cpc	r24, r20
    8434:	38 f0       	brcs	.+14     	; 0x8444 <__divsf3_pse+0x26>
    8436:	9f 5f       	subi	r25, 0xFF	; 255
    8438:	5f 4f       	sbci	r21, 0xFF	; 255
    843a:	22 0f       	add	r18, r18
    843c:	33 1f       	adc	r19, r19
    843e:	44 1f       	adc	r20, r20
    8440:	aa 1f       	adc	r26, r26
    8442:	a9 f3       	breq	.-22     	; 0x842e <__divsf3_pse+0x10>
    8444:	33 d0       	rcall	.+102    	; 0x84ac <__divsf3_pse+0x8e>
    8446:	0e 2e       	mov	r0, r30
    8448:	3a f0       	brmi	.+14     	; 0x8458 <__divsf3_pse+0x3a>
    844a:	e0 e8       	ldi	r30, 0x80	; 128
    844c:	30 d0       	rcall	.+96     	; 0x84ae <__divsf3_pse+0x90>
    844e:	91 50       	subi	r25, 0x01	; 1
    8450:	50 40       	sbci	r21, 0x00	; 0
    8452:	e6 95       	lsr	r30
    8454:	00 1c       	adc	r0, r0
    8456:	ca f7       	brpl	.-14     	; 0x844a <__divsf3_pse+0x2c>
    8458:	29 d0       	rcall	.+82     	; 0x84ac <__divsf3_pse+0x8e>
    845a:	fe 2f       	mov	r31, r30
    845c:	27 d0       	rcall	.+78     	; 0x84ac <__divsf3_pse+0x8e>
    845e:	66 0f       	add	r22, r22
    8460:	77 1f       	adc	r23, r23
    8462:	88 1f       	adc	r24, r24
    8464:	bb 1f       	adc	r27, r27
    8466:	26 17       	cp	r18, r22
    8468:	37 07       	cpc	r19, r23
    846a:	48 07       	cpc	r20, r24
    846c:	ab 07       	cpc	r26, r27
    846e:	b0 e8       	ldi	r27, 0x80	; 128
    8470:	09 f0       	breq	.+2      	; 0x8474 <__divsf3_pse+0x56>
    8472:	bb 0b       	sbc	r27, r27
    8474:	80 2d       	mov	r24, r0
    8476:	bf 01       	movw	r22, r30
    8478:	ff 27       	eor	r31, r31
    847a:	93 58       	subi	r25, 0x83	; 131
    847c:	5f 4f       	sbci	r21, 0xFF	; 255
    847e:	2a f0       	brmi	.+10     	; 0x848a <__divsf3_pse+0x6c>
    8480:	9e 3f       	cpi	r25, 0xFE	; 254
    8482:	51 05       	cpc	r21, r1
    8484:	68 f0       	brcs	.+26     	; 0x84a0 <__divsf3_pse+0x82>
    8486:	b6 c0       	rjmp	.+364    	; 0x85f4 <__fp_inf>
    8488:	9e c1       	rjmp	.+828    	; 0x87c6 <__fp_szero>
    848a:	5f 3f       	cpi	r21, 0xFF	; 255
    848c:	ec f3       	brlt	.-6      	; 0x8488 <__divsf3_pse+0x6a>
    848e:	98 3e       	cpi	r25, 0xE8	; 232
    8490:	dc f3       	brlt	.-10     	; 0x8488 <__divsf3_pse+0x6a>
    8492:	86 95       	lsr	r24
    8494:	77 95       	ror	r23
    8496:	67 95       	ror	r22
    8498:	b7 95       	ror	r27
    849a:	f7 95       	ror	r31
    849c:	9f 5f       	subi	r25, 0xFF	; 255
    849e:	c9 f7       	brne	.-14     	; 0x8492 <__divsf3_pse+0x74>
    84a0:	88 0f       	add	r24, r24
    84a2:	91 1d       	adc	r25, r1
    84a4:	96 95       	lsr	r25
    84a6:	87 95       	ror	r24
    84a8:	97 f9       	bld	r25, 7
    84aa:	08 95       	ret
    84ac:	e1 e0       	ldi	r30, 0x01	; 1
    84ae:	66 0f       	add	r22, r22
    84b0:	77 1f       	adc	r23, r23
    84b2:	88 1f       	adc	r24, r24
    84b4:	bb 1f       	adc	r27, r27
    84b6:	62 17       	cp	r22, r18
    84b8:	73 07       	cpc	r23, r19
    84ba:	84 07       	cpc	r24, r20
    84bc:	ba 07       	cpc	r27, r26
    84be:	20 f0       	brcs	.+8      	; 0x84c8 <__divsf3_pse+0xaa>
    84c0:	62 1b       	sub	r22, r18
    84c2:	73 0b       	sbc	r23, r19
    84c4:	84 0b       	sbc	r24, r20
    84c6:	ba 0b       	sbc	r27, r26
    84c8:	ee 1f       	adc	r30, r30
    84ca:	88 f7       	brcc	.-30     	; 0x84ae <__divsf3_pse+0x90>
    84cc:	e0 95       	com	r30
    84ce:	08 95       	ret

000084d0 <__fixsfsi>:
    84d0:	04 d0       	rcall	.+8      	; 0x84da <__fixunssfsi>
    84d2:	68 94       	set
    84d4:	b1 11       	cpse	r27, r1
    84d6:	77 c1       	rjmp	.+750    	; 0x87c6 <__fp_szero>
    84d8:	08 95       	ret

000084da <__fixunssfsi>:
    84da:	43 d1       	rcall	.+646    	; 0x8762 <__fp_splitA>
    84dc:	88 f0       	brcs	.+34     	; 0x8500 <__fixunssfsi+0x26>
    84de:	9f 57       	subi	r25, 0x7F	; 127
    84e0:	90 f0       	brcs	.+36     	; 0x8506 <__fixunssfsi+0x2c>
    84e2:	b9 2f       	mov	r27, r25
    84e4:	99 27       	eor	r25, r25
    84e6:	b7 51       	subi	r27, 0x17	; 23
    84e8:	a0 f0       	brcs	.+40     	; 0x8512 <__fixunssfsi+0x38>
    84ea:	d1 f0       	breq	.+52     	; 0x8520 <__fixunssfsi+0x46>
    84ec:	66 0f       	add	r22, r22
    84ee:	77 1f       	adc	r23, r23
    84f0:	88 1f       	adc	r24, r24
    84f2:	99 1f       	adc	r25, r25
    84f4:	1a f0       	brmi	.+6      	; 0x84fc <__fixunssfsi+0x22>
    84f6:	ba 95       	dec	r27
    84f8:	c9 f7       	brne	.-14     	; 0x84ec <__fixunssfsi+0x12>
    84fa:	12 c0       	rjmp	.+36     	; 0x8520 <__fixunssfsi+0x46>
    84fc:	b1 30       	cpi	r27, 0x01	; 1
    84fe:	81 f0       	breq	.+32     	; 0x8520 <__fixunssfsi+0x46>
    8500:	61 d1       	rcall	.+706    	; 0x87c4 <__fp_zero>
    8502:	b1 e0       	ldi	r27, 0x01	; 1
    8504:	08 95       	ret
    8506:	5e c1       	rjmp	.+700    	; 0x87c4 <__fp_zero>
    8508:	67 2f       	mov	r22, r23
    850a:	78 2f       	mov	r23, r24
    850c:	88 27       	eor	r24, r24
    850e:	b8 5f       	subi	r27, 0xF8	; 248
    8510:	39 f0       	breq	.+14     	; 0x8520 <__fixunssfsi+0x46>
    8512:	b9 3f       	cpi	r27, 0xF9	; 249
    8514:	cc f3       	brlt	.-14     	; 0x8508 <__fixunssfsi+0x2e>
    8516:	86 95       	lsr	r24
    8518:	77 95       	ror	r23
    851a:	67 95       	ror	r22
    851c:	b3 95       	inc	r27
    851e:	d9 f7       	brne	.-10     	; 0x8516 <__fixunssfsi+0x3c>
    8520:	3e f4       	brtc	.+14     	; 0x8530 <__fixunssfsi+0x56>
    8522:	90 95       	com	r25
    8524:	80 95       	com	r24
    8526:	70 95       	com	r23
    8528:	61 95       	neg	r22
    852a:	7f 4f       	sbci	r23, 0xFF	; 255
    852c:	8f 4f       	sbci	r24, 0xFF	; 255
    852e:	9f 4f       	sbci	r25, 0xFF	; 255
    8530:	08 95       	ret

00008532 <__floatunsisf>:
    8532:	e8 94       	clt
    8534:	09 c0       	rjmp	.+18     	; 0x8548 <__floatsisf+0x12>

00008536 <__floatsisf>:
    8536:	97 fb       	bst	r25, 7
    8538:	3e f4       	brtc	.+14     	; 0x8548 <__floatsisf+0x12>
    853a:	90 95       	com	r25
    853c:	80 95       	com	r24
    853e:	70 95       	com	r23
    8540:	61 95       	neg	r22
    8542:	7f 4f       	sbci	r23, 0xFF	; 255
    8544:	8f 4f       	sbci	r24, 0xFF	; 255
    8546:	9f 4f       	sbci	r25, 0xFF	; 255
    8548:	99 23       	and	r25, r25
    854a:	a9 f0       	breq	.+42     	; 0x8576 <__floatsisf+0x40>
    854c:	f9 2f       	mov	r31, r25
    854e:	96 e9       	ldi	r25, 0x96	; 150
    8550:	bb 27       	eor	r27, r27
    8552:	93 95       	inc	r25
    8554:	f6 95       	lsr	r31
    8556:	87 95       	ror	r24
    8558:	77 95       	ror	r23
    855a:	67 95       	ror	r22
    855c:	b7 95       	ror	r27
    855e:	f1 11       	cpse	r31, r1
    8560:	f8 cf       	rjmp	.-16     	; 0x8552 <__floatsisf+0x1c>
    8562:	fa f4       	brpl	.+62     	; 0x85a2 <__floatsisf+0x6c>
    8564:	bb 0f       	add	r27, r27
    8566:	11 f4       	brne	.+4      	; 0x856c <__floatsisf+0x36>
    8568:	60 ff       	sbrs	r22, 0
    856a:	1b c0       	rjmp	.+54     	; 0x85a2 <__floatsisf+0x6c>
    856c:	6f 5f       	subi	r22, 0xFF	; 255
    856e:	7f 4f       	sbci	r23, 0xFF	; 255
    8570:	8f 4f       	sbci	r24, 0xFF	; 255
    8572:	9f 4f       	sbci	r25, 0xFF	; 255
    8574:	16 c0       	rjmp	.+44     	; 0x85a2 <__floatsisf+0x6c>
    8576:	88 23       	and	r24, r24
    8578:	11 f0       	breq	.+4      	; 0x857e <__floatsisf+0x48>
    857a:	96 e9       	ldi	r25, 0x96	; 150
    857c:	11 c0       	rjmp	.+34     	; 0x85a0 <__floatsisf+0x6a>
    857e:	77 23       	and	r23, r23
    8580:	21 f0       	breq	.+8      	; 0x858a <__floatsisf+0x54>
    8582:	9e e8       	ldi	r25, 0x8E	; 142
    8584:	87 2f       	mov	r24, r23
    8586:	76 2f       	mov	r23, r22
    8588:	05 c0       	rjmp	.+10     	; 0x8594 <__floatsisf+0x5e>
    858a:	66 23       	and	r22, r22
    858c:	71 f0       	breq	.+28     	; 0x85aa <__floatsisf+0x74>
    858e:	96 e8       	ldi	r25, 0x86	; 134
    8590:	86 2f       	mov	r24, r22
    8592:	70 e0       	ldi	r23, 0x00	; 0
    8594:	60 e0       	ldi	r22, 0x00	; 0
    8596:	2a f0       	brmi	.+10     	; 0x85a2 <__floatsisf+0x6c>
    8598:	9a 95       	dec	r25
    859a:	66 0f       	add	r22, r22
    859c:	77 1f       	adc	r23, r23
    859e:	88 1f       	adc	r24, r24
    85a0:	da f7       	brpl	.-10     	; 0x8598 <__floatsisf+0x62>
    85a2:	88 0f       	add	r24, r24
    85a4:	96 95       	lsr	r25
    85a6:	87 95       	ror	r24
    85a8:	97 f9       	bld	r25, 7
    85aa:	08 95       	ret

000085ac <__fp_cmp>:
    85ac:	99 0f       	add	r25, r25
    85ae:	00 08       	sbc	r0, r0
    85b0:	55 0f       	add	r21, r21
    85b2:	aa 0b       	sbc	r26, r26
    85b4:	e0 e8       	ldi	r30, 0x80	; 128
    85b6:	fe ef       	ldi	r31, 0xFE	; 254
    85b8:	16 16       	cp	r1, r22
    85ba:	17 06       	cpc	r1, r23
    85bc:	e8 07       	cpc	r30, r24
    85be:	f9 07       	cpc	r31, r25
    85c0:	c0 f0       	brcs	.+48     	; 0x85f2 <__fp_cmp+0x46>
    85c2:	12 16       	cp	r1, r18
    85c4:	13 06       	cpc	r1, r19
    85c6:	e4 07       	cpc	r30, r20
    85c8:	f5 07       	cpc	r31, r21
    85ca:	98 f0       	brcs	.+38     	; 0x85f2 <__fp_cmp+0x46>
    85cc:	62 1b       	sub	r22, r18
    85ce:	73 0b       	sbc	r23, r19
    85d0:	84 0b       	sbc	r24, r20
    85d2:	95 0b       	sbc	r25, r21
    85d4:	39 f4       	brne	.+14     	; 0x85e4 <__fp_cmp+0x38>
    85d6:	0a 26       	eor	r0, r26
    85d8:	61 f0       	breq	.+24     	; 0x85f2 <__fp_cmp+0x46>
    85da:	23 2b       	or	r18, r19
    85dc:	24 2b       	or	r18, r20
    85de:	25 2b       	or	r18, r21
    85e0:	21 f4       	brne	.+8      	; 0x85ea <__fp_cmp+0x3e>
    85e2:	08 95       	ret
    85e4:	0a 26       	eor	r0, r26
    85e6:	09 f4       	brne	.+2      	; 0x85ea <__fp_cmp+0x3e>
    85e8:	a1 40       	sbci	r26, 0x01	; 1
    85ea:	a6 95       	lsr	r26
    85ec:	8f ef       	ldi	r24, 0xFF	; 255
    85ee:	81 1d       	adc	r24, r1
    85f0:	81 1d       	adc	r24, r1
    85f2:	08 95       	ret

000085f4 <__fp_inf>:
    85f4:	97 f9       	bld	r25, 7
    85f6:	9f 67       	ori	r25, 0x7F	; 127
    85f8:	80 e8       	ldi	r24, 0x80	; 128
    85fa:	70 e0       	ldi	r23, 0x00	; 0
    85fc:	60 e0       	ldi	r22, 0x00	; 0
    85fe:	08 95       	ret

00008600 <__fp_mintl>:
    8600:	88 23       	and	r24, r24
    8602:	71 f4       	brne	.+28     	; 0x8620 <__fp_mintl+0x20>
    8604:	77 23       	and	r23, r23
    8606:	21 f0       	breq	.+8      	; 0x8610 <__fp_mintl+0x10>
    8608:	98 50       	subi	r25, 0x08	; 8
    860a:	87 2b       	or	r24, r23
    860c:	76 2f       	mov	r23, r22
    860e:	07 c0       	rjmp	.+14     	; 0x861e <__fp_mintl+0x1e>
    8610:	66 23       	and	r22, r22
    8612:	11 f4       	brne	.+4      	; 0x8618 <__fp_mintl+0x18>
    8614:	99 27       	eor	r25, r25
    8616:	0d c0       	rjmp	.+26     	; 0x8632 <__fp_mintl+0x32>
    8618:	90 51       	subi	r25, 0x10	; 16
    861a:	86 2b       	or	r24, r22
    861c:	70 e0       	ldi	r23, 0x00	; 0
    861e:	60 e0       	ldi	r22, 0x00	; 0
    8620:	2a f0       	brmi	.+10     	; 0x862c <__fp_mintl+0x2c>
    8622:	9a 95       	dec	r25
    8624:	66 0f       	add	r22, r22
    8626:	77 1f       	adc	r23, r23
    8628:	88 1f       	adc	r24, r24
    862a:	da f7       	brpl	.-10     	; 0x8622 <__fp_mintl+0x22>
    862c:	88 0f       	add	r24, r24
    862e:	96 95       	lsr	r25
    8630:	87 95       	ror	r24
    8632:	97 f9       	bld	r25, 7
    8634:	08 95       	ret

00008636 <__fp_mpack>:
    8636:	9f 3f       	cpi	r25, 0xFF	; 255
    8638:	31 f0       	breq	.+12     	; 0x8646 <__fp_mpack_finite+0xc>

0000863a <__fp_mpack_finite>:
    863a:	91 50       	subi	r25, 0x01	; 1
    863c:	20 f4       	brcc	.+8      	; 0x8646 <__fp_mpack_finite+0xc>
    863e:	87 95       	ror	r24
    8640:	77 95       	ror	r23
    8642:	67 95       	ror	r22
    8644:	b7 95       	ror	r27
    8646:	88 0f       	add	r24, r24
    8648:	91 1d       	adc	r25, r1
    864a:	96 95       	lsr	r25
    864c:	87 95       	ror	r24
    864e:	97 f9       	bld	r25, 7
    8650:	08 95       	ret

00008652 <__fp_nan>:
    8652:	9f ef       	ldi	r25, 0xFF	; 255
    8654:	80 ec       	ldi	r24, 0xC0	; 192
    8656:	08 95       	ret

00008658 <__fp_powser>:
    8658:	df 93       	push	r29
    865a:	cf 93       	push	r28
    865c:	1f 93       	push	r17
    865e:	0f 93       	push	r16
    8660:	ff 92       	push	r15
    8662:	ef 92       	push	r14
    8664:	df 92       	push	r13
    8666:	7b 01       	movw	r14, r22
    8668:	8c 01       	movw	r16, r24
    866a:	68 94       	set
    866c:	05 c0       	rjmp	.+10     	; 0x8678 <__fp_powser+0x20>
    866e:	da 2e       	mov	r13, r26
    8670:	ef 01       	movw	r28, r30
    8672:	8d d1       	rcall	.+794    	; 0x898e <__mulsf3x>
    8674:	fe 01       	movw	r30, r28
    8676:	e8 94       	clt
    8678:	a5 91       	lpm	r26, Z+
    867a:	25 91       	lpm	r18, Z+
    867c:	35 91       	lpm	r19, Z+
    867e:	45 91       	lpm	r20, Z+
    8680:	55 91       	lpm	r21, Z+
    8682:	ae f3       	brts	.-22     	; 0x866e <__fp_powser+0x16>
    8684:	ef 01       	movw	r28, r30
    8686:	27 de       	rcall	.-946    	; 0x82d6 <__addsf3x>
    8688:	fe 01       	movw	r30, r28
    868a:	97 01       	movw	r18, r14
    868c:	a8 01       	movw	r20, r16
    868e:	da 94       	dec	r13
    8690:	79 f7       	brne	.-34     	; 0x8670 <__fp_powser+0x18>
    8692:	df 90       	pop	r13
    8694:	ef 90       	pop	r14
    8696:	ff 90       	pop	r15
    8698:	0f 91       	pop	r16
    869a:	1f 91       	pop	r17
    869c:	cf 91       	pop	r28
    869e:	df 91       	pop	r29
    86a0:	08 95       	ret

000086a2 <__fp_pscA>:
    86a2:	00 24       	eor	r0, r0
    86a4:	0a 94       	dec	r0
    86a6:	16 16       	cp	r1, r22
    86a8:	17 06       	cpc	r1, r23
    86aa:	18 06       	cpc	r1, r24
    86ac:	09 06       	cpc	r0, r25
    86ae:	08 95       	ret

000086b0 <__fp_pscB>:
    86b0:	00 24       	eor	r0, r0
    86b2:	0a 94       	dec	r0
    86b4:	12 16       	cp	r1, r18
    86b6:	13 06       	cpc	r1, r19
    86b8:	14 06       	cpc	r1, r20
    86ba:	05 06       	cpc	r0, r21
    86bc:	08 95       	ret
    86be:	c9 cf       	rjmp	.-110    	; 0x8652 <__fp_nan>

000086c0 <__fp_rempio2>:
    86c0:	50 d0       	rcall	.+160    	; 0x8762 <__fp_splitA>
    86c2:	e8 f3       	brcs	.-6      	; 0x86be <__fp_pscB+0xe>
    86c4:	e8 94       	clt
    86c6:	e0 e0       	ldi	r30, 0x00	; 0
    86c8:	bb 27       	eor	r27, r27
    86ca:	9f 57       	subi	r25, 0x7F	; 127
    86cc:	f0 f0       	brcs	.+60     	; 0x870a <__fp_rempio2+0x4a>
    86ce:	2a ed       	ldi	r18, 0xDA	; 218
    86d0:	3f e0       	ldi	r19, 0x0F	; 15
    86d2:	49 ec       	ldi	r20, 0xC9	; 201
    86d4:	06 c0       	rjmp	.+12     	; 0x86e2 <__fp_rempio2+0x22>
    86d6:	ee 0f       	add	r30, r30
    86d8:	bb 0f       	add	r27, r27
    86da:	66 1f       	adc	r22, r22
    86dc:	77 1f       	adc	r23, r23
    86de:	88 1f       	adc	r24, r24
    86e0:	28 f0       	brcs	.+10     	; 0x86ec <__fp_rempio2+0x2c>
    86e2:	b2 3a       	cpi	r27, 0xA2	; 162
    86e4:	62 07       	cpc	r22, r18
    86e6:	73 07       	cpc	r23, r19
    86e8:	84 07       	cpc	r24, r20
    86ea:	28 f0       	brcs	.+10     	; 0x86f6 <__fp_rempio2+0x36>
    86ec:	b2 5a       	subi	r27, 0xA2	; 162
    86ee:	62 0b       	sbc	r22, r18
    86f0:	73 0b       	sbc	r23, r19
    86f2:	84 0b       	sbc	r24, r20
    86f4:	e3 95       	inc	r30
    86f6:	9a 95       	dec	r25
    86f8:	72 f7       	brpl	.-36     	; 0x86d6 <__fp_rempio2+0x16>
    86fa:	80 38       	cpi	r24, 0x80	; 128
    86fc:	30 f4       	brcc	.+12     	; 0x870a <__fp_rempio2+0x4a>
    86fe:	9a 95       	dec	r25
    8700:	bb 0f       	add	r27, r27
    8702:	66 1f       	adc	r22, r22
    8704:	77 1f       	adc	r23, r23
    8706:	88 1f       	adc	r24, r24
    8708:	d2 f7       	brpl	.-12     	; 0x86fe <__fp_rempio2+0x3e>
    870a:	90 48       	sbci	r25, 0x80	; 128
    870c:	96 cf       	rjmp	.-212    	; 0x863a <__fp_mpack_finite>

0000870e <__fp_round>:
    870e:	09 2e       	mov	r0, r25
    8710:	03 94       	inc	r0
    8712:	00 0c       	add	r0, r0
    8714:	11 f4       	brne	.+4      	; 0x871a <__fp_round+0xc>
    8716:	88 23       	and	r24, r24
    8718:	52 f0       	brmi	.+20     	; 0x872e <__fp_round+0x20>
    871a:	bb 0f       	add	r27, r27
    871c:	40 f4       	brcc	.+16     	; 0x872e <__fp_round+0x20>
    871e:	bf 2b       	or	r27, r31
    8720:	11 f4       	brne	.+4      	; 0x8726 <__fp_round+0x18>
    8722:	60 ff       	sbrs	r22, 0
    8724:	04 c0       	rjmp	.+8      	; 0x872e <__fp_round+0x20>
    8726:	6f 5f       	subi	r22, 0xFF	; 255
    8728:	7f 4f       	sbci	r23, 0xFF	; 255
    872a:	8f 4f       	sbci	r24, 0xFF	; 255
    872c:	9f 4f       	sbci	r25, 0xFF	; 255
    872e:	08 95       	ret

00008730 <__fp_sinus>:
    8730:	ef 93       	push	r30
    8732:	e0 ff       	sbrs	r30, 0
    8734:	06 c0       	rjmp	.+12     	; 0x8742 <__fp_sinus+0x12>
    8736:	a2 ea       	ldi	r26, 0xA2	; 162
    8738:	2a ed       	ldi	r18, 0xDA	; 218
    873a:	3f e0       	ldi	r19, 0x0F	; 15
    873c:	49 ec       	ldi	r20, 0xC9	; 201
    873e:	5f eb       	ldi	r21, 0xBF	; 191
    8740:	ca dd       	rcall	.-1132   	; 0x82d6 <__addsf3x>
    8742:	e5 df       	rcall	.-54     	; 0x870e <__fp_round>
    8744:	0f 90       	pop	r0
    8746:	03 94       	inc	r0
    8748:	01 fc       	sbrc	r0, 1
    874a:	90 58       	subi	r25, 0x80	; 128
    874c:	e5 e1       	ldi	r30, 0x15	; 21
    874e:	f2 e0       	ldi	r31, 0x02	; 2
    8750:	d2 c1       	rjmp	.+932    	; 0x8af6 <__fp_powsodd>

00008752 <__fp_split3>:
    8752:	57 fd       	sbrc	r21, 7
    8754:	90 58       	subi	r25, 0x80	; 128
    8756:	44 0f       	add	r20, r20
    8758:	55 1f       	adc	r21, r21
    875a:	59 f0       	breq	.+22     	; 0x8772 <__fp_splitA+0x10>
    875c:	5f 3f       	cpi	r21, 0xFF	; 255
    875e:	71 f0       	breq	.+28     	; 0x877c <__fp_splitA+0x1a>
    8760:	47 95       	ror	r20

00008762 <__fp_splitA>:
    8762:	88 0f       	add	r24, r24
    8764:	97 fb       	bst	r25, 7
    8766:	99 1f       	adc	r25, r25
    8768:	61 f0       	breq	.+24     	; 0x8782 <__fp_splitA+0x20>
    876a:	9f 3f       	cpi	r25, 0xFF	; 255
    876c:	79 f0       	breq	.+30     	; 0x878c <__fp_splitA+0x2a>
    876e:	87 95       	ror	r24
    8770:	08 95       	ret
    8772:	12 16       	cp	r1, r18
    8774:	13 06       	cpc	r1, r19
    8776:	14 06       	cpc	r1, r20
    8778:	55 1f       	adc	r21, r21
    877a:	f2 cf       	rjmp	.-28     	; 0x8760 <__fp_split3+0xe>
    877c:	46 95       	lsr	r20
    877e:	f1 df       	rcall	.-30     	; 0x8762 <__fp_splitA>
    8780:	08 c0       	rjmp	.+16     	; 0x8792 <__fp_splitA+0x30>
    8782:	16 16       	cp	r1, r22
    8784:	17 06       	cpc	r1, r23
    8786:	18 06       	cpc	r1, r24
    8788:	99 1f       	adc	r25, r25
    878a:	f1 cf       	rjmp	.-30     	; 0x876e <__fp_splitA+0xc>
    878c:	86 95       	lsr	r24
    878e:	71 05       	cpc	r23, r1
    8790:	61 05       	cpc	r22, r1
    8792:	08 94       	sec
    8794:	08 95       	ret

00008796 <__fp_trunc>:
    8796:	e5 df       	rcall	.-54     	; 0x8762 <__fp_splitA>
    8798:	a0 f0       	brcs	.+40     	; 0x87c2 <__fp_trunc+0x2c>
    879a:	be e7       	ldi	r27, 0x7E	; 126
    879c:	b9 17       	cp	r27, r25
    879e:	88 f4       	brcc	.+34     	; 0x87c2 <__fp_trunc+0x2c>
    87a0:	bb 27       	eor	r27, r27
    87a2:	9f 38       	cpi	r25, 0x8F	; 143
    87a4:	60 f4       	brcc	.+24     	; 0x87be <__fp_trunc+0x28>
    87a6:	16 16       	cp	r1, r22
    87a8:	b1 1d       	adc	r27, r1
    87aa:	67 2f       	mov	r22, r23
    87ac:	78 2f       	mov	r23, r24
    87ae:	88 27       	eor	r24, r24
    87b0:	98 5f       	subi	r25, 0xF8	; 248
    87b2:	f7 cf       	rjmp	.-18     	; 0x87a2 <__fp_trunc+0xc>
    87b4:	86 95       	lsr	r24
    87b6:	77 95       	ror	r23
    87b8:	67 95       	ror	r22
    87ba:	b1 1d       	adc	r27, r1
    87bc:	93 95       	inc	r25
    87be:	96 39       	cpi	r25, 0x96	; 150
    87c0:	c8 f3       	brcs	.-14     	; 0x87b4 <__fp_trunc+0x1e>
    87c2:	08 95       	ret

000087c4 <__fp_zero>:
    87c4:	e8 94       	clt

000087c6 <__fp_szero>:
    87c6:	bb 27       	eor	r27, r27
    87c8:	66 27       	eor	r22, r22
    87ca:	77 27       	eor	r23, r23
    87cc:	cb 01       	movw	r24, r22
    87ce:	97 f9       	bld	r25, 7
    87d0:	08 95       	ret

000087d2 <__gesf2>:
    87d2:	ec de       	rcall	.-552    	; 0x85ac <__fp_cmp>
    87d4:	08 f4       	brcc	.+2      	; 0x87d8 <__gesf2+0x6>
    87d6:	8f ef       	ldi	r24, 0xFF	; 255
    87d8:	08 95       	ret
    87da:	63 df       	rcall	.-314    	; 0x86a2 <__fp_pscA>
    87dc:	19 f0       	breq	.+6      	; 0x87e4 <__gesf2+0x12>
    87de:	68 df       	rcall	.-304    	; 0x86b0 <__fp_pscB>
    87e0:	09 f0       	breq	.+2      	; 0x87e4 <__gesf2+0x12>
    87e2:	37 cf       	rjmp	.-402    	; 0x8652 <__fp_nan>
    87e4:	07 cf       	rjmp	.-498    	; 0x85f4 <__fp_inf>
    87e6:	b9 01       	movw	r22, r18
    87e8:	ca 01       	movw	r24, r20
    87ea:	25 cf       	rjmp	.-438    	; 0x8636 <__fp_mpack>

000087ec <hypot>:
    87ec:	9f 77       	andi	r25, 0x7F	; 127
    87ee:	5f 77       	andi	r21, 0x7F	; 127
    87f0:	b0 df       	rcall	.-160    	; 0x8752 <__fp_split3>
    87f2:	98 f3       	brcs	.-26     	; 0x87da <__gesf2+0x8>
    87f4:	99 23       	and	r25, r25
    87f6:	b9 f3       	breq	.-18     	; 0x87e6 <__gesf2+0x14>
    87f8:	55 23       	and	r21, r21
    87fa:	b9 f3       	breq	.-18     	; 0x87ea <__gesf2+0x18>
    87fc:	ff 27       	eor	r31, r31
    87fe:	95 17       	cp	r25, r21
    8800:	58 f4       	brcc	.+22     	; 0x8818 <hypot+0x2c>
    8802:	e5 2f       	mov	r30, r21
    8804:	e9 1b       	sub	r30, r25
    8806:	ed 30       	cpi	r30, 0x0D	; 13
    8808:	70 f7       	brcc	.-36     	; 0x87e6 <__gesf2+0x14>
    880a:	5e 3b       	cpi	r21, 0xBE	; 190
    880c:	10 f0       	brcs	.+4      	; 0x8812 <hypot+0x26>
    880e:	f1 e4       	ldi	r31, 0x41	; 65
    8810:	1c c0       	rjmp	.+56     	; 0x884a <hypot+0x5e>
    8812:	90 34       	cpi	r25, 0x40	; 64
    8814:	e0 f4       	brcc	.+56     	; 0x884e <hypot+0x62>
    8816:	0a c0       	rjmp	.+20     	; 0x882c <hypot+0x40>
    8818:	e9 2f       	mov	r30, r25
    881a:	e5 1b       	sub	r30, r21
    881c:	ed 30       	cpi	r30, 0x0D	; 13
    881e:	28 f7       	brcc	.-54     	; 0x87ea <__gesf2+0x18>
    8820:	9e 3b       	cpi	r25, 0xBE	; 190
    8822:	10 f0       	brcs	.+4      	; 0x8828 <hypot+0x3c>
    8824:	f1 e4       	ldi	r31, 0x41	; 65
    8826:	11 c0       	rjmp	.+34     	; 0x884a <hypot+0x5e>
    8828:	50 34       	cpi	r21, 0x40	; 64
    882a:	88 f4       	brcc	.+34     	; 0x884e <hypot+0x62>
    882c:	f9 ea       	ldi	r31, 0xA9	; 169
    882e:	88 23       	and	r24, r24
    8830:	2a f0       	brmi	.+10     	; 0x883c <hypot+0x50>
    8832:	9a 95       	dec	r25
    8834:	66 0f       	add	r22, r22
    8836:	77 1f       	adc	r23, r23
    8838:	88 1f       	adc	r24, r24
    883a:	da f7       	brpl	.-10     	; 0x8832 <hypot+0x46>
    883c:	44 23       	and	r20, r20
    883e:	2a f0       	brmi	.+10     	; 0x884a <hypot+0x5e>
    8840:	5a 95       	dec	r21
    8842:	22 0f       	add	r18, r18
    8844:	33 1f       	adc	r19, r19
    8846:	44 1f       	adc	r20, r20
    8848:	da f7       	brpl	.-10     	; 0x8840 <hypot+0x54>
    884a:	9f 1b       	sub	r25, r31
    884c:	5f 1b       	sub	r21, r31
    884e:	ff 93       	push	r31
    8850:	1f 93       	push	r17
    8852:	0f 93       	push	r16
    8854:	ff 92       	push	r15
    8856:	ef 92       	push	r14
    8858:	79 01       	movw	r14, r18
    885a:	8a 01       	movw	r16, r20
    885c:	bb 27       	eor	r27, r27
    885e:	ab 2f       	mov	r26, r27
    8860:	9b 01       	movw	r18, r22
    8862:	ac 01       	movw	r20, r24
    8864:	96 d0       	rcall	.+300    	; 0x8992 <__mulsf3_pse>
    8866:	97 01       	movw	r18, r14
    8868:	a8 01       	movw	r20, r16
    886a:	bf 93       	push	r27
    886c:	7b 01       	movw	r14, r22
    886e:	8c 01       	movw	r16, r24
    8870:	aa 27       	eor	r26, r26
    8872:	ba 2f       	mov	r27, r26
    8874:	b9 01       	movw	r22, r18
    8876:	ca 01       	movw	r24, r20
    8878:	8c d0       	rcall	.+280    	; 0x8992 <__mulsf3_pse>
    887a:	af 91       	pop	r26
    887c:	97 01       	movw	r18, r14
    887e:	a8 01       	movw	r20, r16
    8880:	ef 90       	pop	r14
    8882:	ff 90       	pop	r15
    8884:	0f 91       	pop	r16
    8886:	1f 91       	pop	r17
    8888:	26 dd       	rcall	.-1460   	; 0x82d6 <__addsf3x>
    888a:	41 df       	rcall	.-382    	; 0x870e <__fp_round>
    888c:	e1 d0       	rcall	.+450    	; 0x8a50 <sqrt>
    888e:	4f 91       	pop	r20
    8890:	40 ff       	sbrs	r20, 0
    8892:	08 95       	ret
    8894:	55 27       	eor	r21, r21
    8896:	47 fd       	sbrc	r20, 7
    8898:	50 95       	com	r21
    889a:	09 c0       	rjmp	.+18     	; 0x88ae <ldexp>

0000889c <inverse>:
    889c:	9b 01       	movw	r18, r22
    889e:	ac 01       	movw	r20, r24
    88a0:	60 e0       	ldi	r22, 0x00	; 0
    88a2:	70 e0       	ldi	r23, 0x00	; 0
    88a4:	80 e8       	ldi	r24, 0x80	; 128
    88a6:	9f e3       	ldi	r25, 0x3F	; 63
    88a8:	ab cd       	rjmp	.-1194   	; 0x8400 <__divsf3>
    88aa:	a4 ce       	rjmp	.-696    	; 0x85f4 <__fp_inf>
    88ac:	c4 ce       	rjmp	.-632    	; 0x8636 <__fp_mpack>

000088ae <ldexp>:
    88ae:	59 df       	rcall	.-334    	; 0x8762 <__fp_splitA>
    88b0:	e8 f3       	brcs	.-6      	; 0x88ac <inverse+0x10>
    88b2:	99 23       	and	r25, r25
    88b4:	d9 f3       	breq	.-10     	; 0x88ac <inverse+0x10>
    88b6:	94 0f       	add	r25, r20
    88b8:	51 1d       	adc	r21, r1
    88ba:	bb f3       	brvs	.-18     	; 0x88aa <inverse+0xe>
    88bc:	91 50       	subi	r25, 0x01	; 1
    88be:	50 40       	sbci	r21, 0x00	; 0
    88c0:	94 f0       	brlt	.+36     	; 0x88e6 <ldexp+0x38>
    88c2:	59 f0       	breq	.+22     	; 0x88da <ldexp+0x2c>
    88c4:	88 23       	and	r24, r24
    88c6:	32 f0       	brmi	.+12     	; 0x88d4 <ldexp+0x26>
    88c8:	66 0f       	add	r22, r22
    88ca:	77 1f       	adc	r23, r23
    88cc:	88 1f       	adc	r24, r24
    88ce:	91 50       	subi	r25, 0x01	; 1
    88d0:	50 40       	sbci	r21, 0x00	; 0
    88d2:	c1 f7       	brne	.-16     	; 0x88c4 <ldexp+0x16>
    88d4:	9e 3f       	cpi	r25, 0xFE	; 254
    88d6:	51 05       	cpc	r21, r1
    88d8:	44 f7       	brge	.-48     	; 0x88aa <inverse+0xe>
    88da:	88 0f       	add	r24, r24
    88dc:	91 1d       	adc	r25, r1
    88de:	96 95       	lsr	r25
    88e0:	87 95       	ror	r24
    88e2:	97 f9       	bld	r25, 7
    88e4:	08 95       	ret
    88e6:	5f 3f       	cpi	r21, 0xFF	; 255
    88e8:	ac f0       	brlt	.+42     	; 0x8914 <ldexp+0x66>
    88ea:	98 3e       	cpi	r25, 0xE8	; 232
    88ec:	9c f0       	brlt	.+38     	; 0x8914 <ldexp+0x66>
    88ee:	bb 27       	eor	r27, r27
    88f0:	86 95       	lsr	r24
    88f2:	77 95       	ror	r23
    88f4:	67 95       	ror	r22
    88f6:	b7 95       	ror	r27
    88f8:	08 f4       	brcc	.+2      	; 0x88fc <ldexp+0x4e>
    88fa:	b1 60       	ori	r27, 0x01	; 1
    88fc:	93 95       	inc	r25
    88fe:	c1 f7       	brne	.-16     	; 0x88f0 <ldexp+0x42>
    8900:	bb 0f       	add	r27, r27
    8902:	58 f7       	brcc	.-42     	; 0x88da <ldexp+0x2c>
    8904:	11 f4       	brne	.+4      	; 0x890a <ldexp+0x5c>
    8906:	60 ff       	sbrs	r22, 0
    8908:	e8 cf       	rjmp	.-48     	; 0x88da <ldexp+0x2c>
    890a:	6f 5f       	subi	r22, 0xFF	; 255
    890c:	7f 4f       	sbci	r23, 0xFF	; 255
    890e:	8f 4f       	sbci	r24, 0xFF	; 255
    8910:	9f 4f       	sbci	r25, 0xFF	; 255
    8912:	e3 cf       	rjmp	.-58     	; 0x88da <ldexp+0x2c>
    8914:	58 cf       	rjmp	.-336    	; 0x87c6 <__fp_szero>

00008916 <lround>:
    8916:	25 df       	rcall	.-438    	; 0x8762 <__fp_splitA>
    8918:	58 f1       	brcs	.+86     	; 0x8970 <lround+0x5a>
    891a:	9e 57       	subi	r25, 0x7E	; 126
    891c:	58 f1       	brcs	.+86     	; 0x8974 <lround+0x5e>
    891e:	98 51       	subi	r25, 0x18	; 24
    8920:	a0 f0       	brcs	.+40     	; 0x894a <lround+0x34>
    8922:	e9 f0       	breq	.+58     	; 0x895e <lround+0x48>
    8924:	98 30       	cpi	r25, 0x08	; 8
    8926:	20 f5       	brcc	.+72     	; 0x8970 <lround+0x5a>
    8928:	09 2e       	mov	r0, r25
    892a:	99 27       	eor	r25, r25
    892c:	66 0f       	add	r22, r22
    892e:	77 1f       	adc	r23, r23
    8930:	88 1f       	adc	r24, r24
    8932:	99 1f       	adc	r25, r25
    8934:	0a 94       	dec	r0
    8936:	d1 f7       	brne	.-12     	; 0x892c <lround+0x16>
    8938:	12 c0       	rjmp	.+36     	; 0x895e <lround+0x48>
    893a:	06 2e       	mov	r0, r22
    893c:	67 2f       	mov	r22, r23
    893e:	78 2f       	mov	r23, r24
    8940:	88 27       	eor	r24, r24
    8942:	98 5f       	subi	r25, 0xF8	; 248
    8944:	11 f4       	brne	.+4      	; 0x894a <lround+0x34>
    8946:	00 0c       	add	r0, r0
    8948:	07 c0       	rjmp	.+14     	; 0x8958 <lround+0x42>
    894a:	99 3f       	cpi	r25, 0xF9	; 249
    894c:	b4 f3       	brlt	.-20     	; 0x893a <lround+0x24>
    894e:	86 95       	lsr	r24
    8950:	77 95       	ror	r23
    8952:	67 95       	ror	r22
    8954:	93 95       	inc	r25
    8956:	d9 f7       	brne	.-10     	; 0x894e <lround+0x38>
    8958:	61 1d       	adc	r22, r1
    895a:	71 1d       	adc	r23, r1
    895c:	81 1d       	adc	r24, r1
    895e:	3e f4       	brtc	.+14     	; 0x896e <lround+0x58>
    8960:	90 95       	com	r25
    8962:	80 95       	com	r24
    8964:	70 95       	com	r23
    8966:	61 95       	neg	r22
    8968:	7f 4f       	sbci	r23, 0xFF	; 255
    896a:	8f 4f       	sbci	r24, 0xFF	; 255
    896c:	9f 4f       	sbci	r25, 0xFF	; 255
    896e:	08 95       	ret
    8970:	68 94       	set
    8972:	29 cf       	rjmp	.-430    	; 0x87c6 <__fp_szero>
    8974:	27 cf       	rjmp	.-434    	; 0x87c4 <__fp_zero>

00008976 <__mulsf3>:
    8976:	0b d0       	rcall	.+22     	; 0x898e <__mulsf3x>
    8978:	ca ce       	rjmp	.-620    	; 0x870e <__fp_round>
    897a:	93 de       	rcall	.-730    	; 0x86a2 <__fp_pscA>
    897c:	28 f0       	brcs	.+10     	; 0x8988 <__mulsf3+0x12>
    897e:	98 de       	rcall	.-720    	; 0x86b0 <__fp_pscB>
    8980:	18 f0       	brcs	.+6      	; 0x8988 <__mulsf3+0x12>
    8982:	95 23       	and	r25, r21
    8984:	09 f0       	breq	.+2      	; 0x8988 <__mulsf3+0x12>
    8986:	36 ce       	rjmp	.-916    	; 0x85f4 <__fp_inf>
    8988:	64 ce       	rjmp	.-824    	; 0x8652 <__fp_nan>
    898a:	11 24       	eor	r1, r1
    898c:	1c cf       	rjmp	.-456    	; 0x87c6 <__fp_szero>

0000898e <__mulsf3x>:
    898e:	e1 de       	rcall	.-574    	; 0x8752 <__fp_split3>
    8990:	a0 f3       	brcs	.-24     	; 0x897a <__mulsf3+0x4>

00008992 <__mulsf3_pse>:
    8992:	95 9f       	mul	r25, r21
    8994:	d1 f3       	breq	.-12     	; 0x898a <__mulsf3+0x14>
    8996:	95 0f       	add	r25, r21
    8998:	50 e0       	ldi	r21, 0x00	; 0
    899a:	55 1f       	adc	r21, r21
    899c:	62 9f       	mul	r22, r18
    899e:	f0 01       	movw	r30, r0
    89a0:	72 9f       	mul	r23, r18
    89a2:	bb 27       	eor	r27, r27
    89a4:	f0 0d       	add	r31, r0
    89a6:	b1 1d       	adc	r27, r1
    89a8:	63 9f       	mul	r22, r19
    89aa:	aa 27       	eor	r26, r26
    89ac:	f0 0d       	add	r31, r0
    89ae:	b1 1d       	adc	r27, r1
    89b0:	aa 1f       	adc	r26, r26
    89b2:	64 9f       	mul	r22, r20
    89b4:	66 27       	eor	r22, r22
    89b6:	b0 0d       	add	r27, r0
    89b8:	a1 1d       	adc	r26, r1
    89ba:	66 1f       	adc	r22, r22
    89bc:	82 9f       	mul	r24, r18
    89be:	22 27       	eor	r18, r18
    89c0:	b0 0d       	add	r27, r0
    89c2:	a1 1d       	adc	r26, r1
    89c4:	62 1f       	adc	r22, r18
    89c6:	73 9f       	mul	r23, r19
    89c8:	b0 0d       	add	r27, r0
    89ca:	a1 1d       	adc	r26, r1
    89cc:	62 1f       	adc	r22, r18
    89ce:	83 9f       	mul	r24, r19
    89d0:	a0 0d       	add	r26, r0
    89d2:	61 1d       	adc	r22, r1
    89d4:	22 1f       	adc	r18, r18
    89d6:	74 9f       	mul	r23, r20
    89d8:	33 27       	eor	r19, r19
    89da:	a0 0d       	add	r26, r0
    89dc:	61 1d       	adc	r22, r1
    89de:	23 1f       	adc	r18, r19
    89e0:	84 9f       	mul	r24, r20
    89e2:	60 0d       	add	r22, r0
    89e4:	21 1d       	adc	r18, r1
    89e6:	82 2f       	mov	r24, r18
    89e8:	76 2f       	mov	r23, r22
    89ea:	6a 2f       	mov	r22, r26
    89ec:	11 24       	eor	r1, r1
    89ee:	9f 57       	subi	r25, 0x7F	; 127
    89f0:	50 40       	sbci	r21, 0x00	; 0
    89f2:	8a f0       	brmi	.+34     	; 0x8a16 <__mulsf3_pse+0x84>
    89f4:	e1 f0       	breq	.+56     	; 0x8a2e <__mulsf3_pse+0x9c>
    89f6:	88 23       	and	r24, r24
    89f8:	4a f0       	brmi	.+18     	; 0x8a0c <__mulsf3_pse+0x7a>
    89fa:	ee 0f       	add	r30, r30
    89fc:	ff 1f       	adc	r31, r31
    89fe:	bb 1f       	adc	r27, r27
    8a00:	66 1f       	adc	r22, r22
    8a02:	77 1f       	adc	r23, r23
    8a04:	88 1f       	adc	r24, r24
    8a06:	91 50       	subi	r25, 0x01	; 1
    8a08:	50 40       	sbci	r21, 0x00	; 0
    8a0a:	a9 f7       	brne	.-22     	; 0x89f6 <__mulsf3_pse+0x64>
    8a0c:	9e 3f       	cpi	r25, 0xFE	; 254
    8a0e:	51 05       	cpc	r21, r1
    8a10:	70 f0       	brcs	.+28     	; 0x8a2e <__mulsf3_pse+0x9c>
    8a12:	f0 cd       	rjmp	.-1056   	; 0x85f4 <__fp_inf>
    8a14:	d8 ce       	rjmp	.-592    	; 0x87c6 <__fp_szero>
    8a16:	5f 3f       	cpi	r21, 0xFF	; 255
    8a18:	ec f3       	brlt	.-6      	; 0x8a14 <__mulsf3_pse+0x82>
    8a1a:	98 3e       	cpi	r25, 0xE8	; 232
    8a1c:	dc f3       	brlt	.-10     	; 0x8a14 <__mulsf3_pse+0x82>
    8a1e:	86 95       	lsr	r24
    8a20:	77 95       	ror	r23
    8a22:	67 95       	ror	r22
    8a24:	b7 95       	ror	r27
    8a26:	f7 95       	ror	r31
    8a28:	e7 95       	ror	r30
    8a2a:	9f 5f       	subi	r25, 0xFF	; 255
    8a2c:	c1 f7       	brne	.-16     	; 0x8a1e <__mulsf3_pse+0x8c>
    8a2e:	fe 2b       	or	r31, r30
    8a30:	88 0f       	add	r24, r24
    8a32:	91 1d       	adc	r25, r1
    8a34:	96 95       	lsr	r25
    8a36:	87 95       	ror	r24
    8a38:	97 f9       	bld	r25, 7
    8a3a:	08 95       	ret

00008a3c <sin>:
    8a3c:	9f 93       	push	r25
    8a3e:	40 de       	rcall	.-896    	; 0x86c0 <__fp_rempio2>
    8a40:	0f 90       	pop	r0
    8a42:	07 fc       	sbrc	r0, 7
    8a44:	ee 5f       	subi	r30, 0xFE	; 254
    8a46:	74 ce       	rjmp	.-792    	; 0x8730 <__fp_sinus>
    8a48:	11 f4       	brne	.+4      	; 0x8a4e <sin+0x12>
    8a4a:	0e f4       	brtc	.+2      	; 0x8a4e <sin+0x12>
    8a4c:	02 ce       	rjmp	.-1020   	; 0x8652 <__fp_nan>
    8a4e:	f3 cd       	rjmp	.-1050   	; 0x8636 <__fp_mpack>

00008a50 <sqrt>:
    8a50:	88 de       	rcall	.-752    	; 0x8762 <__fp_splitA>
    8a52:	d0 f3       	brcs	.-12     	; 0x8a48 <sin+0xc>
    8a54:	99 23       	and	r25, r25
    8a56:	d9 f3       	breq	.-10     	; 0x8a4e <sin+0x12>
    8a58:	ce f3       	brts	.-14     	; 0x8a4c <sin+0x10>
    8a5a:	9f 57       	subi	r25, 0x7F	; 127
    8a5c:	55 0b       	sbc	r21, r21
    8a5e:	87 ff       	sbrs	r24, 7
    8a60:	43 d0       	rcall	.+134    	; 0x8ae8 <__fp_norm2>
    8a62:	00 24       	eor	r0, r0
    8a64:	a0 e6       	ldi	r26, 0x60	; 96
    8a66:	40 ea       	ldi	r20, 0xA0	; 160
    8a68:	90 01       	movw	r18, r0
    8a6a:	80 58       	subi	r24, 0x80	; 128
    8a6c:	56 95       	lsr	r21
    8a6e:	97 95       	ror	r25
    8a70:	28 f4       	brcc	.+10     	; 0x8a7c <sqrt+0x2c>
    8a72:	80 5c       	subi	r24, 0xC0	; 192
    8a74:	66 0f       	add	r22, r22
    8a76:	77 1f       	adc	r23, r23
    8a78:	88 1f       	adc	r24, r24
    8a7a:	20 f0       	brcs	.+8      	; 0x8a84 <sqrt+0x34>
    8a7c:	26 17       	cp	r18, r22
    8a7e:	37 07       	cpc	r19, r23
    8a80:	48 07       	cpc	r20, r24
    8a82:	30 f4       	brcc	.+12     	; 0x8a90 <sqrt+0x40>
    8a84:	62 1b       	sub	r22, r18
    8a86:	73 0b       	sbc	r23, r19
    8a88:	84 0b       	sbc	r24, r20
    8a8a:	20 29       	or	r18, r0
    8a8c:	31 29       	or	r19, r1
    8a8e:	4a 2b       	or	r20, r26
    8a90:	a6 95       	lsr	r26
    8a92:	17 94       	ror	r1
    8a94:	07 94       	ror	r0
    8a96:	20 25       	eor	r18, r0
    8a98:	31 25       	eor	r19, r1
    8a9a:	4a 27       	eor	r20, r26
    8a9c:	58 f7       	brcc	.-42     	; 0x8a74 <sqrt+0x24>
    8a9e:	66 0f       	add	r22, r22
    8aa0:	77 1f       	adc	r23, r23
    8aa2:	88 1f       	adc	r24, r24
    8aa4:	20 f0       	brcs	.+8      	; 0x8aae <sqrt+0x5e>
    8aa6:	26 17       	cp	r18, r22
    8aa8:	37 07       	cpc	r19, r23
    8aaa:	48 07       	cpc	r20, r24
    8aac:	30 f4       	brcc	.+12     	; 0x8aba <sqrt+0x6a>
    8aae:	62 0b       	sbc	r22, r18
    8ab0:	73 0b       	sbc	r23, r19
    8ab2:	84 0b       	sbc	r24, r20
    8ab4:	20 0d       	add	r18, r0
    8ab6:	31 1d       	adc	r19, r1
    8ab8:	41 1d       	adc	r20, r1
    8aba:	a0 95       	com	r26
    8abc:	81 f7       	brne	.-32     	; 0x8a9e <sqrt+0x4e>
    8abe:	b9 01       	movw	r22, r18
    8ac0:	84 2f       	mov	r24, r20
    8ac2:	91 58       	subi	r25, 0x81	; 129
    8ac4:	88 0f       	add	r24, r24
    8ac6:	96 95       	lsr	r25
    8ac8:	87 95       	ror	r24
    8aca:	08 95       	ret

00008acc <square>:
    8acc:	9b 01       	movw	r18, r22
    8ace:	ac 01       	movw	r20, r24
    8ad0:	52 cf       	rjmp	.-348    	; 0x8976 <__mulsf3>

00008ad2 <trunc>:
    8ad2:	61 de       	rcall	.-830    	; 0x8796 <__fp_trunc>
    8ad4:	20 f0       	brcs	.+8      	; 0x8ade <trunc+0xc>
    8ad6:	9f 37       	cpi	r25, 0x7F	; 127
    8ad8:	08 f4       	brcc	.+2      	; 0x8adc <trunc+0xa>
    8ada:	75 ce       	rjmp	.-790    	; 0x87c6 <__fp_szero>
    8adc:	91 cd       	rjmp	.-1246   	; 0x8600 <__fp_mintl>
    8ade:	ab cd       	rjmp	.-1194   	; 0x8636 <__fp_mpack>

00008ae0 <__unordsf2>:
    8ae0:	65 dd       	rcall	.-1334   	; 0x85ac <__fp_cmp>
    8ae2:	88 0b       	sbc	r24, r24
    8ae4:	99 0b       	sbc	r25, r25
    8ae6:	08 95       	ret

00008ae8 <__fp_norm2>:
    8ae8:	91 50       	subi	r25, 0x01	; 1
    8aea:	50 40       	sbci	r21, 0x00	; 0
    8aec:	66 0f       	add	r22, r22
    8aee:	77 1f       	adc	r23, r23
    8af0:	88 1f       	adc	r24, r24
    8af2:	d2 f7       	brpl	.-12     	; 0x8ae8 <__fp_norm2>
    8af4:	08 95       	ret

00008af6 <__fp_powsodd>:
    8af6:	9f 93       	push	r25
    8af8:	8f 93       	push	r24
    8afa:	7f 93       	push	r23
    8afc:	6f 93       	push	r22
    8afe:	ff 93       	push	r31
    8b00:	ef 93       	push	r30
    8b02:	9b 01       	movw	r18, r22
    8b04:	ac 01       	movw	r20, r24
    8b06:	37 df       	rcall	.-402    	; 0x8976 <__mulsf3>
    8b08:	ef 91       	pop	r30
    8b0a:	ff 91       	pop	r31
    8b0c:	a5 dd       	rcall	.-1206   	; 0x8658 <__fp_powser>
    8b0e:	2f 91       	pop	r18
    8b10:	3f 91       	pop	r19
    8b12:	4f 91       	pop	r20
    8b14:	5f 91       	pop	r21
    8b16:	2f cf       	rjmp	.-418    	; 0x8976 <__mulsf3>

00008b18 <__mulsi3>:
    8b18:	62 9f       	mul	r22, r18
    8b1a:	d0 01       	movw	r26, r0
    8b1c:	73 9f       	mul	r23, r19
    8b1e:	f0 01       	movw	r30, r0
    8b20:	82 9f       	mul	r24, r18
    8b22:	e0 0d       	add	r30, r0
    8b24:	f1 1d       	adc	r31, r1
    8b26:	64 9f       	mul	r22, r20
    8b28:	e0 0d       	add	r30, r0
    8b2a:	f1 1d       	adc	r31, r1
    8b2c:	92 9f       	mul	r25, r18
    8b2e:	f0 0d       	add	r31, r0
    8b30:	83 9f       	mul	r24, r19
    8b32:	f0 0d       	add	r31, r0
    8b34:	74 9f       	mul	r23, r20
    8b36:	f0 0d       	add	r31, r0
    8b38:	65 9f       	mul	r22, r21
    8b3a:	f0 0d       	add	r31, r0
    8b3c:	99 27       	eor	r25, r25
    8b3e:	72 9f       	mul	r23, r18
    8b40:	b0 0d       	add	r27, r0
    8b42:	e1 1d       	adc	r30, r1
    8b44:	f9 1f       	adc	r31, r25
    8b46:	63 9f       	mul	r22, r19
    8b48:	b0 0d       	add	r27, r0
    8b4a:	e1 1d       	adc	r30, r1
    8b4c:	f9 1f       	adc	r31, r25
    8b4e:	bd 01       	movw	r22, r26
    8b50:	cf 01       	movw	r24, r30
    8b52:	11 24       	eor	r1, r1
    8b54:	08 95       	ret

00008b56 <__udivmodsi4>:
    8b56:	a1 e2       	ldi	r26, 0x21	; 33
    8b58:	1a 2e       	mov	r1, r26
    8b5a:	aa 1b       	sub	r26, r26
    8b5c:	bb 1b       	sub	r27, r27
    8b5e:	fd 01       	movw	r30, r26
    8b60:	0d c0       	rjmp	.+26     	; 0x8b7c <__udivmodsi4_ep>

00008b62 <__udivmodsi4_loop>:
    8b62:	aa 1f       	adc	r26, r26
    8b64:	bb 1f       	adc	r27, r27
    8b66:	ee 1f       	adc	r30, r30
    8b68:	ff 1f       	adc	r31, r31
    8b6a:	a2 17       	cp	r26, r18
    8b6c:	b3 07       	cpc	r27, r19
    8b6e:	e4 07       	cpc	r30, r20
    8b70:	f5 07       	cpc	r31, r21
    8b72:	20 f0       	brcs	.+8      	; 0x8b7c <__udivmodsi4_ep>
    8b74:	a2 1b       	sub	r26, r18
    8b76:	b3 0b       	sbc	r27, r19
    8b78:	e4 0b       	sbc	r30, r20
    8b7a:	f5 0b       	sbc	r31, r21

00008b7c <__udivmodsi4_ep>:
    8b7c:	66 1f       	adc	r22, r22
    8b7e:	77 1f       	adc	r23, r23
    8b80:	88 1f       	adc	r24, r24
    8b82:	99 1f       	adc	r25, r25
    8b84:	1a 94       	dec	r1
    8b86:	69 f7       	brne	.-38     	; 0x8b62 <__udivmodsi4_loop>
    8b88:	60 95       	com	r22
    8b8a:	70 95       	com	r23
    8b8c:	80 95       	com	r24
    8b8e:	90 95       	com	r25
    8b90:	9b 01       	movw	r18, r22
    8b92:	ac 01       	movw	r20, r24
    8b94:	bd 01       	movw	r22, r26
    8b96:	cf 01       	movw	r24, r30
    8b98:	08 95       	ret

00008b9a <__prologue_saves__>:
    8b9a:	2f 92       	push	r2
    8b9c:	3f 92       	push	r3
    8b9e:	4f 92       	push	r4
    8ba0:	5f 92       	push	r5
    8ba2:	6f 92       	push	r6
    8ba4:	7f 92       	push	r7
    8ba6:	8f 92       	push	r8
    8ba8:	9f 92       	push	r9
    8baa:	af 92       	push	r10
    8bac:	bf 92       	push	r11
    8bae:	cf 92       	push	r12
    8bb0:	df 92       	push	r13
    8bb2:	ef 92       	push	r14
    8bb4:	ff 92       	push	r15
    8bb6:	0f 93       	push	r16
    8bb8:	1f 93       	push	r17
    8bba:	cf 93       	push	r28
    8bbc:	df 93       	push	r29
    8bbe:	cd b7       	in	r28, 0x3d	; 61
    8bc0:	de b7       	in	r29, 0x3e	; 62
    8bc2:	ca 1b       	sub	r28, r26
    8bc4:	db 0b       	sbc	r29, r27
    8bc6:	0f b6       	in	r0, 0x3f	; 63
    8bc8:	f8 94       	cli
    8bca:	de bf       	out	0x3e, r29	; 62
    8bcc:	0f be       	out	0x3f, r0	; 63
    8bce:	cd bf       	out	0x3d, r28	; 61
    8bd0:	19 94       	eijmp

00008bd2 <__epilogue_restores__>:
    8bd2:	2a 88       	ldd	r2, Y+18	; 0x12
    8bd4:	39 88       	ldd	r3, Y+17	; 0x11
    8bd6:	48 88       	ldd	r4, Y+16	; 0x10
    8bd8:	5f 84       	ldd	r5, Y+15	; 0x0f
    8bda:	6e 84       	ldd	r6, Y+14	; 0x0e
    8bdc:	7d 84       	ldd	r7, Y+13	; 0x0d
    8bde:	8c 84       	ldd	r8, Y+12	; 0x0c
    8be0:	9b 84       	ldd	r9, Y+11	; 0x0b
    8be2:	aa 84       	ldd	r10, Y+10	; 0x0a
    8be4:	b9 84       	ldd	r11, Y+9	; 0x09
    8be6:	c8 84       	ldd	r12, Y+8	; 0x08
    8be8:	df 80       	ldd	r13, Y+7	; 0x07
    8bea:	ee 80       	ldd	r14, Y+6	; 0x06
    8bec:	fd 80       	ldd	r15, Y+5	; 0x05
    8bee:	0c 81       	ldd	r16, Y+4	; 0x04
    8bf0:	1b 81       	ldd	r17, Y+3	; 0x03
    8bf2:	aa 81       	ldd	r26, Y+2	; 0x02
    8bf4:	b9 81       	ldd	r27, Y+1	; 0x01
    8bf6:	ce 0f       	add	r28, r30
    8bf8:	d1 1d       	adc	r29, r1
    8bfa:	0f b6       	in	r0, 0x3f	; 63
    8bfc:	f8 94       	cli
    8bfe:	de bf       	out	0x3e, r29	; 62
    8c00:	0f be       	out	0x3f, r0	; 63
    8c02:	cd bf       	out	0x3d, r28	; 61
    8c04:	ed 01       	movw	r28, r26
    8c06:	08 95       	ret

00008c08 <strtod>:
    8c08:	8f 92       	push	r8
    8c0a:	9f 92       	push	r9
    8c0c:	af 92       	push	r10
    8c0e:	bf 92       	push	r11
    8c10:	cf 92       	push	r12
    8c12:	df 92       	push	r13
    8c14:	ef 92       	push	r14
    8c16:	ff 92       	push	r15
    8c18:	0f 93       	push	r16
    8c1a:	1f 93       	push	r17
    8c1c:	cf 93       	push	r28
    8c1e:	df 93       	push	r29
    8c20:	ec 01       	movw	r28, r24
    8c22:	5b 01       	movw	r10, r22
    8c24:	61 15       	cp	r22, r1
    8c26:	71 05       	cpc	r23, r1
    8c28:	19 f0       	breq	.+6      	; 0x8c30 <strtod+0x28>
    8c2a:	fb 01       	movw	r30, r22
    8c2c:	80 83       	st	Z, r24
    8c2e:	91 83       	std	Z+1, r25	; 0x01
    8c30:	f9 90       	ld	r15, Y+
    8c32:	8f 2d       	mov	r24, r15
    8c34:	90 e0       	ldi	r25, 0x00	; 0
    8c36:	0e 94 68 48 	call	0x90d0	; 0x90d0 <isspace>
    8c3a:	89 2b       	or	r24, r25
    8c3c:	c9 f7       	brne	.-14     	; 0x8c30 <strtod+0x28>
    8c3e:	fd e2       	ldi	r31, 0x2D	; 45
    8c40:	ff 16       	cp	r15, r31
    8c42:	21 f4       	brne	.+8      	; 0x8c4c <strtod+0x44>
    8c44:	f9 90       	ld	r15, Y+
    8c46:	ee 24       	eor	r14, r14
    8c48:	e3 94       	inc	r14
    8c4a:	05 c0       	rjmp	.+10     	; 0x8c56 <strtod+0x4e>
    8c4c:	2b e2       	ldi	r18, 0x2B	; 43
    8c4e:	f2 16       	cp	r15, r18
    8c50:	09 f4       	brne	.+2      	; 0x8c54 <strtod+0x4c>
    8c52:	f9 90       	ld	r15, Y+
    8c54:	ee 24       	eor	r14, r14
    8c56:	8e 01       	movw	r16, r28
    8c58:	01 50       	subi	r16, 0x01	; 1
    8c5a:	10 40       	sbci	r17, 0x00	; 0
    8c5c:	c8 01       	movw	r24, r16
    8c5e:	66 e7       	ldi	r22, 0x76	; 118
    8c60:	7d e1       	ldi	r23, 0x1D	; 29
    8c62:	43 e0       	ldi	r20, 0x03	; 3
    8c64:	50 e0       	ldi	r21, 0x00	; 0
    8c66:	0e 94 78 48 	call	0x90f0	; 0x90f0 <strncasecmp_P>
    8c6a:	89 2b       	or	r24, r25
    8c6c:	01 f5       	brne	.+64     	; 0x8cae <strtod+0xa6>
    8c6e:	8e 01       	movw	r16, r28
    8c70:	0e 5f       	subi	r16, 0xFE	; 254
    8c72:	1f 4f       	sbci	r17, 0xFF	; 255
    8c74:	c8 01       	movw	r24, r16
    8c76:	69 e7       	ldi	r22, 0x79	; 121
    8c78:	7d e1       	ldi	r23, 0x1D	; 29
    8c7a:	45 e0       	ldi	r20, 0x05	; 5
    8c7c:	50 e0       	ldi	r21, 0x00	; 0
    8c7e:	0e 94 78 48 	call	0x90f0	; 0x90f0 <strncasecmp_P>
    8c82:	89 2b       	or	r24, r25
    8c84:	19 f4       	brne	.+6      	; 0x8c8c <strtod+0x84>
    8c86:	8e 01       	movw	r16, r28
    8c88:	09 5f       	subi	r16, 0xF9	; 249
    8c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    8c8c:	a1 14       	cp	r10, r1
    8c8e:	b1 04       	cpc	r11, r1
    8c90:	19 f0       	breq	.+6      	; 0x8c98 <strtod+0x90>
    8c92:	f5 01       	movw	r30, r10
    8c94:	00 83       	st	Z, r16
    8c96:	11 83       	std	Z+1, r17	; 0x01
    8c98:	e0 fc       	sbrc	r14, 0
    8c9a:	04 c0       	rjmp	.+8      	; 0x8ca4 <strtod+0x9c>
    8c9c:	70 e0       	ldi	r23, 0x00	; 0
    8c9e:	90 e0       	ldi	r25, 0x00	; 0
    8ca0:	80 e8       	ldi	r24, 0x80	; 128
    8ca2:	14 c0       	rjmp	.+40     	; 0x8ccc <strtod+0xc4>
    8ca4:	70 e0       	ldi	r23, 0x00	; 0
    8ca6:	90 e0       	ldi	r25, 0x00	; 0
    8ca8:	80 e8       	ldi	r24, 0x80	; 128
    8caa:	6f ef       	ldi	r22, 0xFF	; 255
    8cac:	08 c1       	rjmp	.+528    	; 0x8ebe <strtod+0x2b6>
    8cae:	c8 01       	movw	r24, r16
    8cb0:	6e e7       	ldi	r22, 0x7E	; 126
    8cb2:	7d e1       	ldi	r23, 0x1D	; 29
    8cb4:	43 e0       	ldi	r20, 0x03	; 3
    8cb6:	50 e0       	ldi	r21, 0x00	; 0
    8cb8:	0e 94 78 48 	call	0x90f0	; 0x90f0 <strncasecmp_P>
    8cbc:	89 2b       	or	r24, r25
    8cbe:	69 f4       	brne	.+26     	; 0x8cda <strtod+0xd2>
    8cc0:	a1 14       	cp	r10, r1
    8cc2:	b1 04       	cpc	r11, r1
    8cc4:	29 f4       	brne	.+10     	; 0x8cd0 <strtod+0xc8>
    8cc6:	70 e0       	ldi	r23, 0x00	; 0
    8cc8:	90 e0       	ldi	r25, 0x00	; 0
    8cca:	80 ec       	ldi	r24, 0xC0	; 192
    8ccc:	6f e7       	ldi	r22, 0x7F	; 127
    8cce:	f7 c0       	rjmp	.+494    	; 0x8ebe <strtod+0x2b6>
    8cd0:	22 96       	adiw	r28, 0x02	; 2
    8cd2:	f5 01       	movw	r30, r10
    8cd4:	c0 83       	st	Z, r28
    8cd6:	d1 83       	std	Z+1, r29	; 0x01
    8cd8:	f6 cf       	rjmp	.-20     	; 0x8cc6 <strtod+0xbe>
    8cda:	88 24       	eor	r8, r8
    8cdc:	99 24       	eor	r9, r9
    8cde:	40 e0       	ldi	r20, 0x00	; 0
    8ce0:	50 e0       	ldi	r21, 0x00	; 0
    8ce2:	60 e0       	ldi	r22, 0x00	; 0
    8ce4:	70 e0       	ldi	r23, 0x00	; 0
    8ce6:	ef 2d       	mov	r30, r15
    8ce8:	e0 53       	subi	r30, 0x30	; 48
    8cea:	ea 30       	cpi	r30, 0x0A	; 10
    8cec:	a0 f5       	brcc	.+104    	; 0x8d56 <strtod+0x14e>
    8cee:	f2 e0       	ldi	r31, 0x02	; 2
    8cf0:	ef 2a       	or	r14, r31
    8cf2:	8e 2d       	mov	r24, r14
    8cf4:	90 e0       	ldi	r25, 0x00	; 0
    8cf6:	9c 01       	movw	r18, r24
    8cf8:	28 70       	andi	r18, 0x08	; 8
    8cfa:	30 70       	andi	r19, 0x00	; 0
    8cfc:	e2 fe       	sbrs	r14, 2
    8cfe:	06 c0       	rjmp	.+12     	; 0x8d0c <strtod+0x104>
    8d00:	23 2b       	or	r18, r19
    8d02:	79 f5       	brne	.+94     	; 0x8d62 <strtod+0x15a>
    8d04:	08 94       	sec
    8d06:	81 1c       	adc	r8, r1
    8d08:	91 1c       	adc	r9, r1
    8d0a:	2b c0       	rjmp	.+86     	; 0x8d62 <strtod+0x15a>
    8d0c:	23 2b       	or	r18, r19
    8d0e:	19 f0       	breq	.+6      	; 0x8d16 <strtod+0x10e>
    8d10:	08 94       	sec
    8d12:	81 08       	sbc	r8, r1
    8d14:	91 08       	sbc	r9, r1
    8d16:	db 01       	movw	r26, r22
    8d18:	ca 01       	movw	r24, r20
    8d1a:	12 e0       	ldi	r17, 0x02	; 2
    8d1c:	88 0f       	add	r24, r24
    8d1e:	99 1f       	adc	r25, r25
    8d20:	aa 1f       	adc	r26, r26
    8d22:	bb 1f       	adc	r27, r27
    8d24:	1a 95       	dec	r17
    8d26:	d1 f7       	brne	.-12     	; 0x8d1c <strtod+0x114>
    8d28:	48 0f       	add	r20, r24
    8d2a:	59 1f       	adc	r21, r25
    8d2c:	6a 1f       	adc	r22, r26
    8d2e:	7b 1f       	adc	r23, r27
    8d30:	44 0f       	add	r20, r20
    8d32:	55 1f       	adc	r21, r21
    8d34:	66 1f       	adc	r22, r22
    8d36:	77 1f       	adc	r23, r23
    8d38:	4e 0f       	add	r20, r30
    8d3a:	51 1d       	adc	r21, r1
    8d3c:	61 1d       	adc	r22, r1
    8d3e:	71 1d       	adc	r23, r1
    8d40:	48 39       	cpi	r20, 0x98	; 152
    8d42:	29 e9       	ldi	r18, 0x99	; 153
    8d44:	52 07       	cpc	r21, r18
    8d46:	29 e9       	ldi	r18, 0x99	; 153
    8d48:	62 07       	cpc	r22, r18
    8d4a:	29 e1       	ldi	r18, 0x19	; 25
    8d4c:	72 07       	cpc	r23, r18
    8d4e:	48 f0       	brcs	.+18     	; 0x8d62 <strtod+0x15a>
    8d50:	84 e0       	ldi	r24, 0x04	; 4
    8d52:	e8 2a       	or	r14, r24
    8d54:	06 c0       	rjmp	.+12     	; 0x8d62 <strtod+0x15a>
    8d56:	ee 3f       	cpi	r30, 0xFE	; 254
    8d58:	31 f4       	brne	.+12     	; 0x8d66 <strtod+0x15e>
    8d5a:	e3 fc       	sbrc	r14, 3
    8d5c:	39 c0       	rjmp	.+114    	; 0x8dd0 <strtod+0x1c8>
    8d5e:	98 e0       	ldi	r25, 0x08	; 8
    8d60:	e9 2a       	or	r14, r25
    8d62:	f9 90       	ld	r15, Y+
    8d64:	c0 cf       	rjmp	.-128    	; 0x8ce6 <strtod+0xde>
    8d66:	e5 33       	cpi	r30, 0x35	; 53
    8d68:	11 f0       	breq	.+4      	; 0x8d6e <strtod+0x166>
    8d6a:	e5 31       	cpi	r30, 0x15	; 21
    8d6c:	89 f5       	brne	.+98     	; 0x8dd0 <strtod+0x1c8>
    8d6e:	29 91       	ld	r18, Y+
    8d70:	2d 32       	cpi	r18, 0x2D	; 45
    8d72:	19 f4       	brne	.+6      	; 0x8d7a <strtod+0x172>
    8d74:	e0 e1       	ldi	r30, 0x10	; 16
    8d76:	ee 2a       	or	r14, r30
    8d78:	05 c0       	rjmp	.+10     	; 0x8d84 <strtod+0x17c>
    8d7a:	2b 32       	cpi	r18, 0x2B	; 43
    8d7c:	19 f0       	breq	.+6      	; 0x8d84 <strtod+0x17c>
    8d7e:	81 e0       	ldi	r24, 0x01	; 1
    8d80:	90 e0       	ldi	r25, 0x00	; 0
    8d82:	03 c0       	rjmp	.+6      	; 0x8d8a <strtod+0x182>
    8d84:	29 91       	ld	r18, Y+
    8d86:	82 e0       	ldi	r24, 0x02	; 2
    8d88:	90 e0       	ldi	r25, 0x00	; 0
    8d8a:	e2 2f       	mov	r30, r18
    8d8c:	e0 53       	subi	r30, 0x30	; 48
    8d8e:	ea 30       	cpi	r30, 0x0A	; 10
    8d90:	18 f0       	brcs	.+6      	; 0x8d98 <strtod+0x190>
    8d92:	c8 1b       	sub	r28, r24
    8d94:	d9 0b       	sbc	r29, r25
    8d96:	1c c0       	rjmp	.+56     	; 0x8dd0 <strtod+0x1c8>
    8d98:	20 e0       	ldi	r18, 0x00	; 0
    8d9a:	30 e0       	ldi	r19, 0x00	; 0
    8d9c:	fc e0       	ldi	r31, 0x0C	; 12
    8d9e:	20 38       	cpi	r18, 0x80	; 128
    8da0:	3f 07       	cpc	r19, r31
    8da2:	5c f4       	brge	.+22     	; 0x8dba <strtod+0x1b2>
    8da4:	c9 01       	movw	r24, r18
    8da6:	88 0f       	add	r24, r24
    8da8:	99 1f       	adc	r25, r25
    8daa:	88 0f       	add	r24, r24
    8dac:	99 1f       	adc	r25, r25
    8dae:	28 0f       	add	r18, r24
    8db0:	39 1f       	adc	r19, r25
    8db2:	22 0f       	add	r18, r18
    8db4:	33 1f       	adc	r19, r19
    8db6:	2e 0f       	add	r18, r30
    8db8:	31 1d       	adc	r19, r1
    8dba:	e9 91       	ld	r30, Y+
    8dbc:	e0 53       	subi	r30, 0x30	; 48
    8dbe:	ea 30       	cpi	r30, 0x0A	; 10
    8dc0:	68 f3       	brcs	.-38     	; 0x8d9c <strtod+0x194>
    8dc2:	e4 fe       	sbrs	r14, 4
    8dc4:	03 c0       	rjmp	.+6      	; 0x8dcc <strtod+0x1c4>
    8dc6:	30 95       	com	r19
    8dc8:	21 95       	neg	r18
    8dca:	3f 4f       	sbci	r19, 0xFF	; 255
    8dcc:	82 0e       	add	r8, r18
    8dce:	93 1e       	adc	r9, r19
    8dd0:	ce 2c       	mov	r12, r14
    8dd2:	dd 24       	eor	r13, r13
    8dd4:	e1 fe       	sbrs	r14, 1
    8dd6:	07 c0       	rjmp	.+14     	; 0x8de6 <strtod+0x1de>
    8dd8:	a1 14       	cp	r10, r1
    8dda:	b1 04       	cpc	r11, r1
    8ddc:	21 f0       	breq	.+8      	; 0x8de6 <strtod+0x1de>
    8dde:	21 97       	sbiw	r28, 0x01	; 1
    8de0:	f5 01       	movw	r30, r10
    8de2:	c0 83       	st	Z, r28
    8de4:	d1 83       	std	Z+1, r29	; 0x01
    8de6:	cb 01       	movw	r24, r22
    8de8:	ba 01       	movw	r22, r20
    8dea:	0e 94 99 42 	call	0x8532	; 0x8532 <__floatunsisf>
    8dee:	7b 01       	movw	r14, r22
    8df0:	8c 01       	movw	r16, r24
    8df2:	f3 e0       	ldi	r31, 0x03	; 3
    8df4:	cf 22       	and	r12, r31
    8df6:	dd 24       	eor	r13, r13
    8df8:	23 e0       	ldi	r18, 0x03	; 3
    8dfa:	c2 16       	cp	r12, r18
    8dfc:	d1 04       	cpc	r13, r1
    8dfe:	21 f4       	brne	.+8      	; 0x8e08 <strtod+0x200>
    8e00:	17 fb       	bst	r17, 7
    8e02:	10 95       	com	r17
    8e04:	17 f9       	bld	r17, 7
    8e06:	10 95       	com	r17
    8e08:	57 01       	movw	r10, r14
    8e0a:	68 01       	movw	r12, r16
    8e0c:	c8 01       	movw	r24, r16
    8e0e:	b7 01       	movw	r22, r14
    8e10:	20 e0       	ldi	r18, 0x00	; 0
    8e12:	30 e0       	ldi	r19, 0x00	; 0
    8e14:	40 e0       	ldi	r20, 0x00	; 0
    8e16:	50 e0       	ldi	r21, 0x00	; 0
    8e18:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <__cmpsf2>
    8e1c:	88 23       	and	r24, r24
    8e1e:	09 f4       	brne	.+2      	; 0x8e22 <strtod+0x21a>
    8e20:	4a c0       	rjmp	.+148    	; 0x8eb6 <strtod+0x2ae>
    8e22:	97 fe       	sbrs	r9, 7
    8e24:	0d c0       	rjmp	.+26     	; 0x8e40 <strtod+0x238>
    8e26:	25 e9       	ldi	r18, 0x95	; 149
    8e28:	e2 2e       	mov	r14, r18
    8e2a:	2d e1       	ldi	r18, 0x1D	; 29
    8e2c:	f2 2e       	mov	r15, r18
    8e2e:	90 94       	com	r9
    8e30:	81 94       	neg	r8
    8e32:	91 08       	sbc	r9, r1
    8e34:	93 94       	inc	r9
    8e36:	c0 e2       	ldi	r28, 0x20	; 32
    8e38:	d0 e0       	ldi	r29, 0x00	; 0
    8e3a:	00 e0       	ldi	r16, 0x00	; 0
    8e3c:	10 e0       	ldi	r17, 0x00	; 0
    8e3e:	12 c0       	rjmp	.+36     	; 0x8e64 <strtod+0x25c>
    8e40:	9d ea       	ldi	r25, 0xAD	; 173
    8e42:	e9 2e       	mov	r14, r25
    8e44:	9d e1       	ldi	r25, 0x1D	; 29
    8e46:	f9 2e       	mov	r15, r25
    8e48:	f6 cf       	rjmp	.-20     	; 0x8e36 <strtod+0x22e>
    8e4a:	f7 01       	movw	r30, r14
    8e4c:	25 91       	lpm	r18, Z+
    8e4e:	35 91       	lpm	r19, Z+
    8e50:	45 91       	lpm	r20, Z+
    8e52:	54 91       	lpm	r21, Z+
    8e54:	c6 01       	movw	r24, r12
    8e56:	b5 01       	movw	r22, r10
    8e58:	0e 94 bb 44 	call	0x8976	; 0x8976 <__mulsf3>
    8e5c:	5b 01       	movw	r10, r22
    8e5e:	6c 01       	movw	r12, r24
    8e60:	8c 1a       	sub	r8, r28
    8e62:	9d 0a       	sbc	r9, r29
    8e64:	8c 16       	cp	r8, r28
    8e66:	9d 06       	cpc	r9, r29
    8e68:	84 f7       	brge	.-32     	; 0x8e4a <strtod+0x242>
    8e6a:	d5 95       	asr	r29
    8e6c:	c7 95       	ror	r28
    8e6e:	0f 5f       	subi	r16, 0xFF	; 255
    8e70:	1f 4f       	sbci	r17, 0xFF	; 255
    8e72:	06 30       	cpi	r16, 0x06	; 6
    8e74:	11 05       	cpc	r17, r1
    8e76:	29 f0       	breq	.+10     	; 0x8e82 <strtod+0x27a>
    8e78:	8c ef       	ldi	r24, 0xFC	; 252
    8e7a:	9f ef       	ldi	r25, 0xFF	; 255
    8e7c:	e8 0e       	add	r14, r24
    8e7e:	f9 1e       	adc	r15, r25
    8e80:	f1 cf       	rjmp	.-30     	; 0x8e64 <strtod+0x25c>
    8e82:	c5 01       	movw	r24, r10
    8e84:	d6 01       	movw	r26, r12
    8e86:	7c 01       	movw	r14, r24
    8e88:	8d 01       	movw	r16, r26
    8e8a:	8c 2d       	mov	r24, r12
    8e8c:	88 0f       	add	r24, r24
    8e8e:	8d 2d       	mov	r24, r13
    8e90:	88 1f       	adc	r24, r24
    8e92:	8f 3f       	cpi	r24, 0xFF	; 255
    8e94:	51 f0       	breq	.+20     	; 0x8eaa <strtod+0x2a2>
    8e96:	c6 01       	movw	r24, r12
    8e98:	b5 01       	movw	r22, r10
    8e9a:	20 e0       	ldi	r18, 0x00	; 0
    8e9c:	30 e0       	ldi	r19, 0x00	; 0
    8e9e:	40 e0       	ldi	r20, 0x00	; 0
    8ea0:	50 e0       	ldi	r21, 0x00	; 0
    8ea2:	0e 94 f9 41 	call	0x83f2	; 0x83f2 <__cmpsf2>
    8ea6:	88 23       	and	r24, r24
    8ea8:	31 f4       	brne	.+12     	; 0x8eb6 <strtod+0x2ae>
    8eaa:	82 e2       	ldi	r24, 0x22	; 34
    8eac:	90 e0       	ldi	r25, 0x00	; 0
    8eae:	80 93 1e 25 	sts	0x251E, r24
    8eb2:	90 93 1f 25 	sts	0x251F, r25
    8eb6:	7e 2d       	mov	r23, r14
    8eb8:	9f 2d       	mov	r25, r15
    8eba:	80 2f       	mov	r24, r16
    8ebc:	61 2f       	mov	r22, r17
    8ebe:	27 2f       	mov	r18, r23
    8ec0:	39 2f       	mov	r19, r25
    8ec2:	48 2f       	mov	r20, r24
    8ec4:	56 2f       	mov	r21, r22
    8ec6:	b9 01       	movw	r22, r18
    8ec8:	ca 01       	movw	r24, r20
    8eca:	df 91       	pop	r29
    8ecc:	cf 91       	pop	r28
    8ece:	1f 91       	pop	r17
    8ed0:	0f 91       	pop	r16
    8ed2:	ff 90       	pop	r15
    8ed4:	ef 90       	pop	r14
    8ed6:	df 90       	pop	r13
    8ed8:	cf 90       	pop	r12
    8eda:	bf 90       	pop	r11
    8edc:	af 90       	pop	r10
    8ede:	9f 90       	pop	r9
    8ee0:	8f 90       	pop	r8
    8ee2:	08 95       	ret

00008ee4 <atoi>:
    8ee4:	fc 01       	movw	r30, r24
    8ee6:	88 27       	eor	r24, r24
    8ee8:	99 27       	eor	r25, r25
    8eea:	e8 94       	clt
    8eec:	21 91       	ld	r18, Z+
    8eee:	20 32       	cpi	r18, 0x20	; 32
    8ef0:	e9 f3       	breq	.-6      	; 0x8eec <atoi+0x8>
    8ef2:	29 30       	cpi	r18, 0x09	; 9
    8ef4:	10 f0       	brcs	.+4      	; 0x8efa <atoi+0x16>
    8ef6:	2e 30       	cpi	r18, 0x0E	; 14
    8ef8:	c8 f3       	brcs	.-14     	; 0x8eec <atoi+0x8>
    8efa:	2b 32       	cpi	r18, 0x2B	; 43
    8efc:	41 f0       	breq	.+16     	; 0x8f0e <atoi+0x2a>
    8efe:	2d 32       	cpi	r18, 0x2D	; 45
    8f00:	39 f4       	brne	.+14     	; 0x8f10 <atoi+0x2c>
    8f02:	68 94       	set
    8f04:	04 c0       	rjmp	.+8      	; 0x8f0e <atoi+0x2a>
    8f06:	0e 94 a6 48 	call	0x914c	; 0x914c <__mulhi_const_10>
    8f0a:	82 0f       	add	r24, r18
    8f0c:	91 1d       	adc	r25, r1
    8f0e:	21 91       	ld	r18, Z+
    8f10:	20 53       	subi	r18, 0x30	; 48
    8f12:	2a 30       	cpi	r18, 0x0A	; 10
    8f14:	c0 f3       	brcs	.-16     	; 0x8f06 <atoi+0x22>
    8f16:	1e f4       	brtc	.+6      	; 0x8f1e <atoi+0x3a>
    8f18:	90 95       	com	r25
    8f1a:	81 95       	neg	r24
    8f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    8f1e:	08 95       	ret

00008f20 <__ftoa_engine>:
    8f20:	28 30       	cpi	r18, 0x08	; 8
    8f22:	08 f0       	brcs	.+2      	; 0x8f26 <__ftoa_engine+0x6>
    8f24:	27 e0       	ldi	r18, 0x07	; 7
    8f26:	33 27       	eor	r19, r19
    8f28:	da 01       	movw	r26, r20
    8f2a:	99 0f       	add	r25, r25
    8f2c:	31 1d       	adc	r19, r1
    8f2e:	87 fd       	sbrc	r24, 7
    8f30:	91 60       	ori	r25, 0x01	; 1
    8f32:	00 96       	adiw	r24, 0x00	; 0
    8f34:	61 05       	cpc	r22, r1
    8f36:	71 05       	cpc	r23, r1
    8f38:	39 f4       	brne	.+14     	; 0x8f48 <__ftoa_engine+0x28>
    8f3a:	32 60       	ori	r19, 0x02	; 2
    8f3c:	2e 5f       	subi	r18, 0xFE	; 254
    8f3e:	3d 93       	st	X+, r19
    8f40:	30 e3       	ldi	r19, 0x30	; 48
    8f42:	2a 95       	dec	r18
    8f44:	e1 f7       	brne	.-8      	; 0x8f3e <__ftoa_engine+0x1e>
    8f46:	08 95       	ret
    8f48:	9f 3f       	cpi	r25, 0xFF	; 255
    8f4a:	30 f0       	brcs	.+12     	; 0x8f58 <__ftoa_engine+0x38>
    8f4c:	80 38       	cpi	r24, 0x80	; 128
    8f4e:	71 05       	cpc	r23, r1
    8f50:	61 05       	cpc	r22, r1
    8f52:	09 f0       	breq	.+2      	; 0x8f56 <__ftoa_engine+0x36>
    8f54:	3c 5f       	subi	r19, 0xFC	; 252
    8f56:	3c 5f       	subi	r19, 0xFC	; 252
    8f58:	3d 93       	st	X+, r19
    8f5a:	91 30       	cpi	r25, 0x01	; 1
    8f5c:	08 f0       	brcs	.+2      	; 0x8f60 <__ftoa_engine+0x40>
    8f5e:	80 68       	ori	r24, 0x80	; 128
    8f60:	91 1d       	adc	r25, r1
    8f62:	df 93       	push	r29
    8f64:	cf 93       	push	r28
    8f66:	1f 93       	push	r17
    8f68:	0f 93       	push	r16
    8f6a:	ff 92       	push	r15
    8f6c:	ef 92       	push	r14
    8f6e:	19 2f       	mov	r17, r25
    8f70:	98 7f       	andi	r25, 0xF8	; 248
    8f72:	96 95       	lsr	r25
    8f74:	e9 2f       	mov	r30, r25
    8f76:	96 95       	lsr	r25
    8f78:	96 95       	lsr	r25
    8f7a:	e9 0f       	add	r30, r25
    8f7c:	ff 27       	eor	r31, r31
    8f7e:	e5 5f       	subi	r30, 0xF5	; 245
    8f80:	f1 4e       	sbci	r31, 0xE1	; 225
    8f82:	99 27       	eor	r25, r25
    8f84:	33 27       	eor	r19, r19
    8f86:	ee 24       	eor	r14, r14
    8f88:	ff 24       	eor	r15, r15
    8f8a:	a7 01       	movw	r20, r14
    8f8c:	e7 01       	movw	r28, r14
    8f8e:	05 90       	lpm	r0, Z+
    8f90:	08 94       	sec
    8f92:	07 94       	ror	r0
    8f94:	28 f4       	brcc	.+10     	; 0x8fa0 <__ftoa_engine+0x80>
    8f96:	36 0f       	add	r19, r22
    8f98:	e7 1e       	adc	r14, r23
    8f9a:	f8 1e       	adc	r15, r24
    8f9c:	49 1f       	adc	r20, r25
    8f9e:	51 1d       	adc	r21, r1
    8fa0:	66 0f       	add	r22, r22
    8fa2:	77 1f       	adc	r23, r23
    8fa4:	88 1f       	adc	r24, r24
    8fa6:	99 1f       	adc	r25, r25
    8fa8:	06 94       	lsr	r0
    8faa:	a1 f7       	brne	.-24     	; 0x8f94 <__ftoa_engine+0x74>
    8fac:	05 90       	lpm	r0, Z+
    8fae:	07 94       	ror	r0
    8fb0:	28 f4       	brcc	.+10     	; 0x8fbc <__ftoa_engine+0x9c>
    8fb2:	e7 0e       	add	r14, r23
    8fb4:	f8 1e       	adc	r15, r24
    8fb6:	49 1f       	adc	r20, r25
    8fb8:	56 1f       	adc	r21, r22
    8fba:	c1 1d       	adc	r28, r1
    8fbc:	77 0f       	add	r23, r23
    8fbe:	88 1f       	adc	r24, r24
    8fc0:	99 1f       	adc	r25, r25
    8fc2:	66 1f       	adc	r22, r22
    8fc4:	06 94       	lsr	r0
    8fc6:	a1 f7       	brne	.-24     	; 0x8fb0 <__ftoa_engine+0x90>
    8fc8:	05 90       	lpm	r0, Z+
    8fca:	07 94       	ror	r0
    8fcc:	28 f4       	brcc	.+10     	; 0x8fd8 <__ftoa_engine+0xb8>
    8fce:	f8 0e       	add	r15, r24
    8fd0:	49 1f       	adc	r20, r25
    8fd2:	56 1f       	adc	r21, r22
    8fd4:	c7 1f       	adc	r28, r23
    8fd6:	d1 1d       	adc	r29, r1
    8fd8:	88 0f       	add	r24, r24
    8fda:	99 1f       	adc	r25, r25
    8fdc:	66 1f       	adc	r22, r22
    8fde:	77 1f       	adc	r23, r23
    8fe0:	06 94       	lsr	r0
    8fe2:	a1 f7       	brne	.-24     	; 0x8fcc <__ftoa_engine+0xac>
    8fe4:	05 90       	lpm	r0, Z+
    8fe6:	07 94       	ror	r0
    8fe8:	20 f4       	brcc	.+8      	; 0x8ff2 <__ftoa_engine+0xd2>
    8fea:	49 0f       	add	r20, r25
    8fec:	56 1f       	adc	r21, r22
    8fee:	c7 1f       	adc	r28, r23
    8ff0:	d8 1f       	adc	r29, r24
    8ff2:	99 0f       	add	r25, r25
    8ff4:	66 1f       	adc	r22, r22
    8ff6:	77 1f       	adc	r23, r23
    8ff8:	88 1f       	adc	r24, r24
    8ffa:	06 94       	lsr	r0
    8ffc:	a9 f7       	brne	.-22     	; 0x8fe8 <__ftoa_engine+0xc8>
    8ffe:	84 91       	lpm	r24, Z+
    9000:	10 95       	com	r17
    9002:	17 70       	andi	r17, 0x07	; 7
    9004:	41 f0       	breq	.+16     	; 0x9016 <__ftoa_engine+0xf6>
    9006:	d6 95       	lsr	r29
    9008:	c7 95       	ror	r28
    900a:	57 95       	ror	r21
    900c:	47 95       	ror	r20
    900e:	f7 94       	ror	r15
    9010:	e7 94       	ror	r14
    9012:	1a 95       	dec	r17
    9014:	c1 f7       	brne	.-16     	; 0x9006 <__ftoa_engine+0xe6>
    9016:	e1 eb       	ldi	r30, 0xB1	; 177
    9018:	fd e1       	ldi	r31, 0x1D	; 29
    901a:	68 94       	set
    901c:	15 90       	lpm	r1, Z+
    901e:	15 91       	lpm	r17, Z+
    9020:	35 91       	lpm	r19, Z+
    9022:	65 91       	lpm	r22, Z+
    9024:	95 91       	lpm	r25, Z+
    9026:	05 90       	lpm	r0, Z+
    9028:	7f e2       	ldi	r23, 0x2F	; 47
    902a:	73 95       	inc	r23
    902c:	e1 18       	sub	r14, r1
    902e:	f1 0a       	sbc	r15, r17
    9030:	43 0b       	sbc	r20, r19
    9032:	56 0b       	sbc	r21, r22
    9034:	c9 0b       	sbc	r28, r25
    9036:	d0 09       	sbc	r29, r0
    9038:	c0 f7       	brcc	.-16     	; 0x902a <__ftoa_engine+0x10a>
    903a:	e1 0c       	add	r14, r1
    903c:	f1 1e       	adc	r15, r17
    903e:	43 1f       	adc	r20, r19
    9040:	56 1f       	adc	r21, r22
    9042:	c9 1f       	adc	r28, r25
    9044:	d0 1d       	adc	r29, r0
    9046:	7e f4       	brtc	.+30     	; 0x9066 <__ftoa_engine+0x146>
    9048:	70 33       	cpi	r23, 0x30	; 48
    904a:	11 f4       	brne	.+4      	; 0x9050 <__ftoa_engine+0x130>
    904c:	8a 95       	dec	r24
    904e:	e6 cf       	rjmp	.-52     	; 0x901c <__ftoa_engine+0xfc>
    9050:	e8 94       	clt
    9052:	01 50       	subi	r16, 0x01	; 1
    9054:	30 f0       	brcs	.+12     	; 0x9062 <__ftoa_engine+0x142>
    9056:	08 0f       	add	r16, r24
    9058:	0a f4       	brpl	.+2      	; 0x905c <__ftoa_engine+0x13c>
    905a:	00 27       	eor	r16, r16
    905c:	02 17       	cp	r16, r18
    905e:	08 f4       	brcc	.+2      	; 0x9062 <__ftoa_engine+0x142>
    9060:	20 2f       	mov	r18, r16
    9062:	23 95       	inc	r18
    9064:	02 2f       	mov	r16, r18
    9066:	7a 33       	cpi	r23, 0x3A	; 58
    9068:	28 f0       	brcs	.+10     	; 0x9074 <__ftoa_engine+0x154>
    906a:	79 e3       	ldi	r23, 0x39	; 57
    906c:	7d 93       	st	X+, r23
    906e:	2a 95       	dec	r18
    9070:	e9 f7       	brne	.-6      	; 0x906c <__ftoa_engine+0x14c>
    9072:	10 c0       	rjmp	.+32     	; 0x9094 <__ftoa_engine+0x174>
    9074:	7d 93       	st	X+, r23
    9076:	2a 95       	dec	r18
    9078:	89 f6       	brne	.-94     	; 0x901c <__ftoa_engine+0xfc>
    907a:	06 94       	lsr	r0
    907c:	97 95       	ror	r25
    907e:	67 95       	ror	r22
    9080:	37 95       	ror	r19
    9082:	17 95       	ror	r17
    9084:	17 94       	ror	r1
    9086:	e1 18       	sub	r14, r1
    9088:	f1 0a       	sbc	r15, r17
    908a:	43 0b       	sbc	r20, r19
    908c:	56 0b       	sbc	r21, r22
    908e:	c9 0b       	sbc	r28, r25
    9090:	d0 09       	sbc	r29, r0
    9092:	98 f0       	brcs	.+38     	; 0x90ba <__ftoa_engine+0x19a>
    9094:	23 95       	inc	r18
    9096:	7e 91       	ld	r23, -X
    9098:	73 95       	inc	r23
    909a:	7a 33       	cpi	r23, 0x3A	; 58
    909c:	08 f0       	brcs	.+2      	; 0x90a0 <__ftoa_engine+0x180>
    909e:	70 e3       	ldi	r23, 0x30	; 48
    90a0:	7c 93       	st	X, r23
    90a2:	20 13       	cpse	r18, r16
    90a4:	b8 f7       	brcc	.-18     	; 0x9094 <__ftoa_engine+0x174>
    90a6:	7e 91       	ld	r23, -X
    90a8:	70 61       	ori	r23, 0x10	; 16
    90aa:	7d 93       	st	X+, r23
    90ac:	30 f0       	brcs	.+12     	; 0x90ba <__ftoa_engine+0x19a>
    90ae:	83 95       	inc	r24
    90b0:	71 e3       	ldi	r23, 0x31	; 49
    90b2:	7d 93       	st	X+, r23
    90b4:	70 e3       	ldi	r23, 0x30	; 48
    90b6:	2a 95       	dec	r18
    90b8:	e1 f7       	brne	.-8      	; 0x90b2 <__ftoa_engine+0x192>
    90ba:	11 24       	eor	r1, r1
    90bc:	ef 90       	pop	r14
    90be:	ff 90       	pop	r15
    90c0:	0f 91       	pop	r16
    90c2:	1f 91       	pop	r17
    90c4:	cf 91       	pop	r28
    90c6:	df 91       	pop	r29
    90c8:	99 27       	eor	r25, r25
    90ca:	87 fd       	sbrc	r24, 7
    90cc:	90 95       	com	r25
    90ce:	08 95       	ret

000090d0 <isspace>:
    90d0:	91 11       	cpse	r25, r1
    90d2:	29 c1       	rjmp	.+594    	; 0x9326 <__ctype_isfalse>
    90d4:	80 32       	cpi	r24, 0x20	; 32
    90d6:	19 f0       	breq	.+6      	; 0x90de <isspace+0xe>
    90d8:	89 50       	subi	r24, 0x09	; 9
    90da:	85 50       	subi	r24, 0x05	; 5
    90dc:	d0 f7       	brcc	.-12     	; 0x90d2 <isspace+0x2>
    90de:	08 95       	ret

000090e0 <toupper>:
    90e0:	91 11       	cpse	r25, r1
    90e2:	08 95       	ret
    90e4:	81 56       	subi	r24, 0x61	; 97
    90e6:	8a 51       	subi	r24, 0x1A	; 26
    90e8:	08 f4       	brcc	.+2      	; 0x90ec <toupper+0xc>
    90ea:	80 52       	subi	r24, 0x20	; 32
    90ec:	85 58       	subi	r24, 0x85	; 133
    90ee:	08 95       	ret

000090f0 <strncasecmp_P>:
    90f0:	fb 01       	movw	r30, r22
    90f2:	dc 01       	movw	r26, r24
    90f4:	41 50       	subi	r20, 0x01	; 1
    90f6:	50 40       	sbci	r21, 0x00	; 0
    90f8:	88 f0       	brcs	.+34     	; 0x911c <strncasecmp_P+0x2c>
    90fa:	8d 91       	ld	r24, X+
    90fc:	81 34       	cpi	r24, 0x41	; 65
    90fe:	1c f0       	brlt	.+6      	; 0x9106 <strncasecmp_P+0x16>
    9100:	8b 35       	cpi	r24, 0x5B	; 91
    9102:	0c f4       	brge	.+2      	; 0x9106 <strncasecmp_P+0x16>
    9104:	80 5e       	subi	r24, 0xE0	; 224
    9106:	65 91       	lpm	r22, Z+
    9108:	61 34       	cpi	r22, 0x41	; 65
    910a:	1c f0       	brlt	.+6      	; 0x9112 <strncasecmp_P+0x22>
    910c:	6b 35       	cpi	r22, 0x5B	; 91
    910e:	0c f4       	brge	.+2      	; 0x9112 <strncasecmp_P+0x22>
    9110:	60 5e       	subi	r22, 0xE0	; 224
    9112:	86 1b       	sub	r24, r22
    9114:	61 11       	cpse	r22, r1
    9116:	71 f3       	breq	.-36     	; 0x90f4 <strncasecmp_P+0x4>
    9118:	99 0b       	sbc	r25, r25
    911a:	08 95       	ret
    911c:	88 1b       	sub	r24, r24
    911e:	fc cf       	rjmp	.-8      	; 0x9118 <strncasecmp_P+0x28>

00009120 <strnlen_P>:
    9120:	fc 01       	movw	r30, r24
    9122:	05 90       	lpm	r0, Z+
    9124:	61 50       	subi	r22, 0x01	; 1
    9126:	70 40       	sbci	r23, 0x00	; 0
    9128:	01 10       	cpse	r0, r1
    912a:	d8 f7       	brcc	.-10     	; 0x9122 <strnlen_P+0x2>
    912c:	80 95       	com	r24
    912e:	90 95       	com	r25
    9130:	8e 0f       	add	r24, r30
    9132:	9f 1f       	adc	r25, r31
    9134:	08 95       	ret

00009136 <strnlen>:
    9136:	fc 01       	movw	r30, r24
    9138:	61 50       	subi	r22, 0x01	; 1
    913a:	70 40       	sbci	r23, 0x00	; 0
    913c:	01 90       	ld	r0, Z+
    913e:	01 10       	cpse	r0, r1
    9140:	d8 f7       	brcc	.-10     	; 0x9138 <strnlen+0x2>
    9142:	80 95       	com	r24
    9144:	90 95       	com	r25
    9146:	8e 0f       	add	r24, r30
    9148:	9f 1f       	adc	r25, r31
    914a:	08 95       	ret

0000914c <__mulhi_const_10>:
    914c:	7a e0       	ldi	r23, 0x0A	; 10
    914e:	97 9f       	mul	r25, r23
    9150:	90 2d       	mov	r25, r0
    9152:	87 9f       	mul	r24, r23
    9154:	80 2d       	mov	r24, r0
    9156:	91 0d       	add	r25, r1
    9158:	11 24       	eor	r1, r1
    915a:	08 95       	ret

0000915c <clearerr>:
    915c:	fc 01       	movw	r30, r24
    915e:	83 81       	ldd	r24, Z+3	; 0x03
    9160:	8f 7c       	andi	r24, 0xCF	; 207
    9162:	83 83       	std	Z+3, r24	; 0x03
    9164:	08 95       	ret

00009166 <fgets>:
    9166:	cf 92       	push	r12
    9168:	df 92       	push	r13
    916a:	ef 92       	push	r14
    916c:	ff 92       	push	r15
    916e:	0f 93       	push	r16
    9170:	1f 93       	push	r17
    9172:	cf 93       	push	r28
    9174:	df 93       	push	r29
    9176:	7c 01       	movw	r14, r24
    9178:	6a 01       	movw	r12, r20
    917a:	fa 01       	movw	r30, r20
    917c:	83 81       	ldd	r24, Z+3	; 0x03
    917e:	80 ff       	sbrs	r24, 0
    9180:	19 c0       	rjmp	.+50     	; 0x91b4 <fgets+0x4e>
    9182:	16 16       	cp	r1, r22
    9184:	17 06       	cpc	r1, r23
    9186:	b4 f4       	brge	.+44     	; 0x91b4 <fgets+0x4e>
    9188:	eb 01       	movw	r28, r22
    918a:	21 97       	sbiw	r28, 0x01	; 1
    918c:	87 01       	movw	r16, r14
    918e:	0d c0       	rjmp	.+26     	; 0x91aa <fgets+0x44>
    9190:	c6 01       	movw	r24, r12
    9192:	0e 94 96 49 	call	0x932c	; 0x932c <fgetc>
    9196:	ff ef       	ldi	r31, 0xFF	; 255
    9198:	8f 3f       	cpi	r24, 0xFF	; 255
    919a:	9f 07       	cpc	r25, r31
    919c:	59 f0       	breq	.+22     	; 0x91b4 <fgets+0x4e>
    919e:	f8 01       	movw	r30, r16
    91a0:	81 93       	st	Z+, r24
    91a2:	8f 01       	movw	r16, r30
    91a4:	0a 97       	sbiw	r24, 0x0a	; 10
    91a6:	19 f0       	breq	.+6      	; 0x91ae <fgets+0x48>
    91a8:	21 97       	sbiw	r28, 0x01	; 1
    91aa:	20 97       	sbiw	r28, 0x00	; 0
    91ac:	89 f7       	brne	.-30     	; 0x9190 <fgets+0x2a>
    91ae:	f8 01       	movw	r30, r16
    91b0:	10 82       	st	Z, r1
    91b2:	02 c0       	rjmp	.+4      	; 0x91b8 <fgets+0x52>
    91b4:	ee 24       	eor	r14, r14
    91b6:	ff 24       	eor	r15, r15
    91b8:	c7 01       	movw	r24, r14
    91ba:	df 91       	pop	r29
    91bc:	cf 91       	pop	r28
    91be:	1f 91       	pop	r17
    91c0:	0f 91       	pop	r16
    91c2:	ff 90       	pop	r15
    91c4:	ef 90       	pop	r14
    91c6:	df 90       	pop	r13
    91c8:	cf 90       	pop	r12
    91ca:	08 95       	ret

000091cc <fputc>:
    91cc:	0f 93       	push	r16
    91ce:	1f 93       	push	r17
    91d0:	cf 93       	push	r28
    91d2:	df 93       	push	r29
    91d4:	8c 01       	movw	r16, r24
    91d6:	eb 01       	movw	r28, r22
    91d8:	8b 81       	ldd	r24, Y+3	; 0x03
    91da:	81 ff       	sbrs	r24, 1
    91dc:	1b c0       	rjmp	.+54     	; 0x9214 <fputc+0x48>
    91de:	82 ff       	sbrs	r24, 2
    91e0:	0d c0       	rjmp	.+26     	; 0x91fc <fputc+0x30>
    91e2:	2e 81       	ldd	r18, Y+6	; 0x06
    91e4:	3f 81       	ldd	r19, Y+7	; 0x07
    91e6:	8c 81       	ldd	r24, Y+4	; 0x04
    91e8:	9d 81       	ldd	r25, Y+5	; 0x05
    91ea:	28 17       	cp	r18, r24
    91ec:	39 07       	cpc	r19, r25
    91ee:	64 f4       	brge	.+24     	; 0x9208 <fputc+0x3c>
    91f0:	e8 81       	ld	r30, Y
    91f2:	f9 81       	ldd	r31, Y+1	; 0x01
    91f4:	01 93       	st	Z+, r16
    91f6:	e8 83       	st	Y, r30
    91f8:	f9 83       	std	Y+1, r31	; 0x01
    91fa:	06 c0       	rjmp	.+12     	; 0x9208 <fputc+0x3c>
    91fc:	e8 85       	ldd	r30, Y+8	; 0x08
    91fe:	f9 85       	ldd	r31, Y+9	; 0x09
    9200:	80 2f       	mov	r24, r16
    9202:	19 95       	eicall
    9204:	89 2b       	or	r24, r25
    9206:	31 f4       	brne	.+12     	; 0x9214 <fputc+0x48>
    9208:	8e 81       	ldd	r24, Y+6	; 0x06
    920a:	9f 81       	ldd	r25, Y+7	; 0x07
    920c:	01 96       	adiw	r24, 0x01	; 1
    920e:	8e 83       	std	Y+6, r24	; 0x06
    9210:	9f 83       	std	Y+7, r25	; 0x07
    9212:	02 c0       	rjmp	.+4      	; 0x9218 <fputc+0x4c>
    9214:	0f ef       	ldi	r16, 0xFF	; 255
    9216:	1f ef       	ldi	r17, 0xFF	; 255
    9218:	c8 01       	movw	r24, r16
    921a:	df 91       	pop	r29
    921c:	cf 91       	pop	r28
    921e:	1f 91       	pop	r17
    9220:	0f 91       	pop	r16
    9222:	08 95       	ret

00009224 <printf_P>:
    9224:	df 93       	push	r29
    9226:	cf 93       	push	r28
    9228:	cd b7       	in	r28, 0x3d	; 61
    922a:	de b7       	in	r29, 0x3e	; 62
    922c:	fe 01       	movw	r30, r28
    922e:	36 96       	adiw	r30, 0x06	; 6
    9230:	61 91       	ld	r22, Z+
    9232:	71 91       	ld	r23, Z+
    9234:	a0 91 1a 25 	lds	r26, 0x251A
    9238:	b0 91 1b 25 	lds	r27, 0x251B
    923c:	13 96       	adiw	r26, 0x03	; 3
    923e:	8c 91       	ld	r24, X
    9240:	13 97       	sbiw	r26, 0x03	; 3
    9242:	88 60       	ori	r24, 0x08	; 8
    9244:	13 96       	adiw	r26, 0x03	; 3
    9246:	8c 93       	st	X, r24
    9248:	80 91 1a 25 	lds	r24, 0x251A
    924c:	90 91 1b 25 	lds	r25, 0x251B
    9250:	af 01       	movw	r20, r30
    9252:	0e 94 af 3d 	call	0x7b5e	; 0x7b5e <vfprintf>
    9256:	e0 91 1a 25 	lds	r30, 0x251A
    925a:	f0 91 1b 25 	lds	r31, 0x251B
    925e:	23 81       	ldd	r18, Z+3	; 0x03
    9260:	27 7f       	andi	r18, 0xF7	; 247
    9262:	23 83       	std	Z+3, r18	; 0x03
    9264:	cf 91       	pop	r28
    9266:	df 91       	pop	r29
    9268:	08 95       	ret

0000926a <__ultoa_invert>:
    926a:	fa 01       	movw	r30, r20
    926c:	aa 27       	eor	r26, r26
    926e:	28 30       	cpi	r18, 0x08	; 8
    9270:	51 f1       	breq	.+84     	; 0x92c6 <__ultoa_invert+0x5c>
    9272:	20 31       	cpi	r18, 0x10	; 16
    9274:	81 f1       	breq	.+96     	; 0x92d6 <__ultoa_invert+0x6c>
    9276:	e8 94       	clt
    9278:	6f 93       	push	r22
    927a:	6e 7f       	andi	r22, 0xFE	; 254
    927c:	6e 5f       	subi	r22, 0xFE	; 254
    927e:	7f 4f       	sbci	r23, 0xFF	; 255
    9280:	8f 4f       	sbci	r24, 0xFF	; 255
    9282:	9f 4f       	sbci	r25, 0xFF	; 255
    9284:	af 4f       	sbci	r26, 0xFF	; 255
    9286:	b1 e0       	ldi	r27, 0x01	; 1
    9288:	3e d0       	rcall	.+124    	; 0x9306 <__ultoa_invert+0x9c>
    928a:	b4 e0       	ldi	r27, 0x04	; 4
    928c:	3c d0       	rcall	.+120    	; 0x9306 <__ultoa_invert+0x9c>
    928e:	67 0f       	add	r22, r23
    9290:	78 1f       	adc	r23, r24
    9292:	89 1f       	adc	r24, r25
    9294:	9a 1f       	adc	r25, r26
    9296:	a1 1d       	adc	r26, r1
    9298:	68 0f       	add	r22, r24
    929a:	79 1f       	adc	r23, r25
    929c:	8a 1f       	adc	r24, r26
    929e:	91 1d       	adc	r25, r1
    92a0:	a1 1d       	adc	r26, r1
    92a2:	6a 0f       	add	r22, r26
    92a4:	71 1d       	adc	r23, r1
    92a6:	81 1d       	adc	r24, r1
    92a8:	91 1d       	adc	r25, r1
    92aa:	a1 1d       	adc	r26, r1
    92ac:	20 d0       	rcall	.+64     	; 0x92ee <__ultoa_invert+0x84>
    92ae:	09 f4       	brne	.+2      	; 0x92b2 <__ultoa_invert+0x48>
    92b0:	68 94       	set
    92b2:	3f 91       	pop	r19
    92b4:	2a e0       	ldi	r18, 0x0A	; 10
    92b6:	26 9f       	mul	r18, r22
    92b8:	11 24       	eor	r1, r1
    92ba:	30 19       	sub	r19, r0
    92bc:	30 5d       	subi	r19, 0xD0	; 208
    92be:	31 93       	st	Z+, r19
    92c0:	de f6       	brtc	.-74     	; 0x9278 <__ultoa_invert+0xe>
    92c2:	cf 01       	movw	r24, r30
    92c4:	08 95       	ret
    92c6:	46 2f       	mov	r20, r22
    92c8:	47 70       	andi	r20, 0x07	; 7
    92ca:	40 5d       	subi	r20, 0xD0	; 208
    92cc:	41 93       	st	Z+, r20
    92ce:	b3 e0       	ldi	r27, 0x03	; 3
    92d0:	0f d0       	rcall	.+30     	; 0x92f0 <__ultoa_invert+0x86>
    92d2:	c9 f7       	brne	.-14     	; 0x92c6 <__ultoa_invert+0x5c>
    92d4:	f6 cf       	rjmp	.-20     	; 0x92c2 <__ultoa_invert+0x58>
    92d6:	46 2f       	mov	r20, r22
    92d8:	4f 70       	andi	r20, 0x0F	; 15
    92da:	40 5d       	subi	r20, 0xD0	; 208
    92dc:	4a 33       	cpi	r20, 0x3A	; 58
    92de:	18 f0       	brcs	.+6      	; 0x92e6 <__ultoa_invert+0x7c>
    92e0:	49 5d       	subi	r20, 0xD9	; 217
    92e2:	31 fd       	sbrc	r19, 1
    92e4:	40 52       	subi	r20, 0x20	; 32
    92e6:	41 93       	st	Z+, r20
    92e8:	02 d0       	rcall	.+4      	; 0x92ee <__ultoa_invert+0x84>
    92ea:	a9 f7       	brne	.-22     	; 0x92d6 <__ultoa_invert+0x6c>
    92ec:	ea cf       	rjmp	.-44     	; 0x92c2 <__ultoa_invert+0x58>
    92ee:	b4 e0       	ldi	r27, 0x04	; 4
    92f0:	a6 95       	lsr	r26
    92f2:	97 95       	ror	r25
    92f4:	87 95       	ror	r24
    92f6:	77 95       	ror	r23
    92f8:	67 95       	ror	r22
    92fa:	ba 95       	dec	r27
    92fc:	c9 f7       	brne	.-14     	; 0x92f0 <__ultoa_invert+0x86>
    92fe:	00 97       	sbiw	r24, 0x00	; 0
    9300:	61 05       	cpc	r22, r1
    9302:	71 05       	cpc	r23, r1
    9304:	08 95       	ret
    9306:	9b 01       	movw	r18, r22
    9308:	ac 01       	movw	r20, r24
    930a:	0a 2e       	mov	r0, r26
    930c:	06 94       	lsr	r0
    930e:	57 95       	ror	r21
    9310:	47 95       	ror	r20
    9312:	37 95       	ror	r19
    9314:	27 95       	ror	r18
    9316:	ba 95       	dec	r27
    9318:	c9 f7       	brne	.-14     	; 0x930c <__ultoa_invert+0xa2>
    931a:	62 0f       	add	r22, r18
    931c:	73 1f       	adc	r23, r19
    931e:	84 1f       	adc	r24, r20
    9320:	95 1f       	adc	r25, r21
    9322:	a0 1d       	adc	r26, r0
    9324:	08 95       	ret

00009326 <__ctype_isfalse>:
    9326:	99 27       	eor	r25, r25
    9328:	88 27       	eor	r24, r24

0000932a <__ctype_istrue>:
    932a:	08 95       	ret

0000932c <fgetc>:
    932c:	cf 93       	push	r28
    932e:	df 93       	push	r29
    9330:	ec 01       	movw	r28, r24
    9332:	4b 81       	ldd	r20, Y+3	; 0x03
    9334:	40 ff       	sbrs	r20, 0
    9336:	1a c0       	rjmp	.+52     	; 0x936c <fgetc+0x40>
    9338:	46 ff       	sbrs	r20, 6
    933a:	0a c0       	rjmp	.+20     	; 0x9350 <fgetc+0x24>
    933c:	4f 7b       	andi	r20, 0xBF	; 191
    933e:	4b 83       	std	Y+3, r20	; 0x03
    9340:	8e 81       	ldd	r24, Y+6	; 0x06
    9342:	9f 81       	ldd	r25, Y+7	; 0x07
    9344:	01 96       	adiw	r24, 0x01	; 1
    9346:	8e 83       	std	Y+6, r24	; 0x06
    9348:	9f 83       	std	Y+7, r25	; 0x07
    934a:	8a 81       	ldd	r24, Y+2	; 0x02
    934c:	28 2f       	mov	r18, r24
    934e:	2b c0       	rjmp	.+86     	; 0x93a6 <fgetc+0x7a>
    9350:	42 ff       	sbrs	r20, 2
    9352:	13 c0       	rjmp	.+38     	; 0x937a <fgetc+0x4e>
    9354:	e8 81       	ld	r30, Y
    9356:	f9 81       	ldd	r31, Y+1	; 0x01
    9358:	80 81       	ld	r24, Z
    935a:	28 2f       	mov	r18, r24
    935c:	33 27       	eor	r19, r19
    935e:	27 fd       	sbrc	r18, 7
    9360:	30 95       	com	r19
    9362:	21 15       	cp	r18, r1
    9364:	31 05       	cpc	r19, r1
    9366:	29 f4       	brne	.+10     	; 0x9372 <fgetc+0x46>
    9368:	40 62       	ori	r20, 0x20	; 32
    936a:	4b 83       	std	Y+3, r20	; 0x03
    936c:	2f ef       	ldi	r18, 0xFF	; 255
    936e:	3f ef       	ldi	r19, 0xFF	; 255
    9370:	1b c0       	rjmp	.+54     	; 0x93a8 <fgetc+0x7c>
    9372:	31 96       	adiw	r30, 0x01	; 1
    9374:	e8 83       	st	Y, r30
    9376:	f9 83       	std	Y+1, r31	; 0x01
    9378:	11 c0       	rjmp	.+34     	; 0x939c <fgetc+0x70>
    937a:	ea 85       	ldd	r30, Y+10	; 0x0a
    937c:	fb 85       	ldd	r31, Y+11	; 0x0b
    937e:	ce 01       	movw	r24, r28
    9380:	19 95       	eicall
    9382:	9c 01       	movw	r18, r24
    9384:	97 ff       	sbrs	r25, 7
    9386:	0a c0       	rjmp	.+20     	; 0x939c <fgetc+0x70>
    9388:	9b 81       	ldd	r25, Y+3	; 0x03
    938a:	2f 5f       	subi	r18, 0xFF	; 255
    938c:	3f 4f       	sbci	r19, 0xFF	; 255
    938e:	11 f0       	breq	.+4      	; 0x9394 <fgetc+0x68>
    9390:	80 e2       	ldi	r24, 0x20	; 32
    9392:	01 c0       	rjmp	.+2      	; 0x9396 <fgetc+0x6a>
    9394:	80 e1       	ldi	r24, 0x10	; 16
    9396:	89 2b       	or	r24, r25
    9398:	8b 83       	std	Y+3, r24	; 0x03
    939a:	e8 cf       	rjmp	.-48     	; 0x936c <fgetc+0x40>
    939c:	8e 81       	ldd	r24, Y+6	; 0x06
    939e:	9f 81       	ldd	r25, Y+7	; 0x07
    93a0:	01 96       	adiw	r24, 0x01	; 1
    93a2:	8e 83       	std	Y+6, r24	; 0x06
    93a4:	9f 83       	std	Y+7, r25	; 0x07
    93a6:	30 e0       	ldi	r19, 0x00	; 0
    93a8:	c9 01       	movw	r24, r18
    93aa:	df 91       	pop	r29
    93ac:	cf 91       	pop	r28
    93ae:	08 95       	ret

000093b0 <_exit>:
    93b0:	f8 94       	cli

000093b2 <__stop_program>:
    93b2:	ff cf       	rjmp	.-2      	; 0x93b2 <__stop_program>
