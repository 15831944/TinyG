
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000951e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00802000  0000951e  000095b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000431  0080212a  0080212a  000096dc  2**0
                  ALLOC
  3 .debug_aranges 00000340  00000000  00000000  000096dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000de4  00000000  00000000  00009a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000cf14  00000000  00000000  0000a800  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002caa  00000000  00000000  00017714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000052bc  00000000  00000000  0001a3be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c00  00000000  00000000  0001f67c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002479  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003b26  00000000  00000000  000226f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  0002621b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__ctors_end>
       4:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
       8:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
       c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      10:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      14:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      18:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      1c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      20:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      24:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      28:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      2c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      30:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      34:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      38:	0c 94 a7 26 	jmp	0x4d4e	; 0x4d4e <__vector_14>
      3c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      40:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      44:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      48:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      4c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      50:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      54:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      58:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      5c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      60:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      64:	0c 94 fa 28 	jmp	0x51f4	; 0x51f4 <__vector_25>
      68:	0c 94 78 29 	jmp	0x52f0	; 0x52f0 <__vector_26>
      6c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      70:	0c 94 43 35 	jmp	0x6a86	; 0x6a86 <__vector_28>
      74:	0c 94 c1 35 	jmp	0x6b82	; 0x6b82 <__vector_29>
      78:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      7c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      80:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      84:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      88:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      8c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      90:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      94:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      98:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      9c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      a0:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      a4:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      a8:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      ac:	0c 94 1f 33 	jmp	0x663e	; 0x663e <__vector_43>
      b0:	0c 94 f7 32 	jmp	0x65ee	; 0x65ee <__vector_44>
      b4:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      b8:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      bc:	0c 94 dd 25 	jmp	0x4bba	; 0x4bba <__vector_47>
      c0:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      c4:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      c8:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      cc:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      d0:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      d4:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      d8:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      dc:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      e0:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      e4:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      e8:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      ec:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      f0:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      f4:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      f8:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
      fc:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     100:	0c 94 cf 32 	jmp	0x659e	; 0x659e <__vector_64>
     104:	0c 94 a7 32 	jmp	0x654e	; 0x654e <__vector_65>
     108:	0c 94 bf 33 	jmp	0x677e	; 0x677e <__vector_66>
     10c:	0c 94 97 33 	jmp	0x672e	; 0x672e <__vector_67>
     110:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     114:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     118:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     11c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     120:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     124:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     128:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     12c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     130:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     134:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__vector_77>
     138:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     13c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     140:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     144:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     148:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     14c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     150:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     154:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     158:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     15c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     160:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     164:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     168:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     16c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     170:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     174:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     178:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     17c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     180:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     184:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     188:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     18c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     190:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     194:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     198:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     19c:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     1a0:	0c 94 6f 33 	jmp	0x66de	; 0x66de <__vector_104>
     1a4:	0c 94 47 33 	jmp	0x668e	; 0x668e <__vector_105>
     1a8:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     1ac:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     1b0:	0c 94 78 25 	jmp	0x4af0	; 0x4af0 <__vector_108>
     1b4:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     1b8:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     1bc:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     1c0:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     1c4:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     1c8:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     1cc:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     1d0:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     1d4:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     1d8:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     1dc:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     1e0:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     1e4:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <configs_P>:
     24b:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25b:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26b:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27b:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28b:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29b:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2ab:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bb:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2db:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2eb:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2fb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30b:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31b:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32b:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33b:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34b:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35b:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36b:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37b:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38b:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000399 <__c.3831>:
     399:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     3a9:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000003b4 <__c.3828>:
     3b4:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     3c4:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

000003ce <__c.3825>:
     3ce:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     3de:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000003e8 <__c.3822>:
     3e8:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     3f8:	74 3a 20 25 73 0a 00                                t: %s..

000003ff <__c.3819>:
     3ff:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     40f:	4d 6f 64 65 0a 00                                   Mode..

00000415 <__c.3816>:
     415:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     425:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

00000432 <__c.3748>:
     432:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     442:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     452:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     462:	29 0a 0a 00                                         )...

00000466 <__c.3746>:
     466:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     476:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     486:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000496 <__c.3744>:
     496:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     4a6:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4b6:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004c7 <__c.3742>:
     4c7:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     4d7:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4e7:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004f8 <__c.3740>:
     4f8:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     508:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     518:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     528:	6c 0a 00                                            l..

0000052b <__c.3738>:
     52b:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     53b:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     54b:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     55b:	6e 0a 00                                            n..

0000055e <__c.3736>:
     55e:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     56e:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     57e:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     58e:	74 65 70 73 29 0a 00                                teps)..

00000595 <__c.3734>:
     595:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     5a5:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     5b5:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     5c5:	70 0a 00                                            p..

000005c8 <__c.3732>:
     5c8:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     5d8:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     5e8:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     5f8:	73 74 65 70 73 29 0a 00                             steps)..

00000600 <__c.3730>:
     600:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     610:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     620:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     630:	73 74 65 70 73 29 0a 00                             steps)..

00000638 <__c.3725>:
     638:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     648:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

00000656 <__c.3711>:
     656:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     666:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     676:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000681 <__c.3709>:
     681:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     691:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     6a1:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000006ab <__c.3707>:
     6ab:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     6bb:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     6cb:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000006d5 <__c.3705>:
     6d5:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     6e5:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     6f5:	73 20 2d 2d 2d 0a 00                                s ---..

000006fc <__c.3703>:
     6fc:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     70c:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     71c:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000724 <bsel>:
     724:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

0000072f <bscale>:
     72f:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

0000073a <__c.3529>:
     73a:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     74a:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     75a:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000766 <readlnFuncs>:
     766:	3a 2b 0f 2b 0f 2b 81 2b 0f 2b 0f 2b 0f 2b 0f 2b     :+.+.+.+.+.+.+.+
     776:	6d 2b 0f 2b 3a 2b 0f 2b 0f 2b 3a 2b 9c 2b a5 2b     m+.+:+.+.+:+.+.+
     786:	0f 2b 93 2b 0f 2b 8a 2b 0f 2b 0f 2b 0f 2b 0f 2b     .+.+.+.+.+.+.+.+
     796:	81 2b 0f 2b 0f 2b 81 2b 0f 2b 0f 2b 0f 2b 0f 2b     .+.+.+.+.+.+.+.+
     7a6:	0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b     .+.+.+.+.+.+.+.+
     7b6:	0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b     .+.+.+.+.+.+.+.+
     7c6:	0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b     .+.+.+.+.+.+.+.+
     7d6:	0f 2b 0f 2b 0f 2b 63 2b 0f 2b 0f 2b 0f 2b 0f 2b     .+.+.+c+.+.+.+.+
     7e6:	0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b     .+.+.+.+.+.+.+.+
     7f6:	0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b     .+.+.+.+.+.+.+.+
     806:	0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b     .+.+.+.+.+.+.+.+
     816:	0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b     .+.+.+.+.+.+.+.+
     826:	0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b     .+.+.+.+.+.+.+.+
     836:	0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b     .+.+.+.+.+.+.+.+
     846:	0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b     .+.+.+.+.+.+.+.+
     856:	0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 0f 2b 6d 2b     .+.+.+.+.+.+.+m+

00000866 <getcFuncs>:
     866:	8e 2a 7e 2a 7e 2a b3 2a 7e 2a 7e 2a 7e 2a 7e 2a     .*~*~*.*~*~*~*~*
     876:	ad 2a 7e 2a 8e 2a 7e 2a 7e 2a 8e 2a c5 2a cb 2a     .*~*.*~*~*.*.*.*
     886:	7e 2a bf 2a 7e 2a b9 2a 7e 2a 7e 2a 7e 2a 7e 2a     ~*.*~*.*~*~*~*~*
     896:	b3 2a 7e 2a 7e 2a b3 2a 7e 2a 7e 2a 7e 2a 7e 2a     .*~*~*.*~*~*~*~*
     8a6:	7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a     ~*~*~*~*~*~*~*~*
     8b6:	7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a     ~*~*~*~*~*~*~*~*
     8c6:	7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a     ~*~*~*~*~*~*~*~*
     8d6:	7e 2a 7e 2a 7e 2a a3 2a 7e 2a 7e 2a 7e 2a 7e 2a     ~*~*~*.*~*~*~*~*
     8e6:	7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a     ~*~*~*~*~*~*~*~*
     8f6:	7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a     ~*~*~*~*~*~*~*~*
     906:	7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a     ~*~*~*~*~*~*~*~*
     916:	7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a     ~*~*~*~*~*~*~*~*
     926:	7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a     ~*~*~*~*~*~*~*~*
     936:	7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a     ~*~*~*~*~*~*~*~*
     946:	7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a     ~*~*~*~*~*~*~*~*
     956:	7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a 7e 2a ad 2a     ~*~*~*~*~*~*~*.*

00000966 <square_test1>:
     966:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     976:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     986:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     996:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     9a6:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     9b6:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     9c6:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000009d4 <square_test2>:
     9d4:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     9e4:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     9f4:	78 30 20 79 30 00                                   x0 y0.

000009fa <square_test10>:
     9fa:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     a0a:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     a1a:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000a26 <circle_test10>:
     a26:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     a36:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     a46:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     a56:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     a66:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     a76:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     a86:	30 00                                               0.

00000a88 <square_circle_test10>:
     a88:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     a98:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     aa8:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     ab8:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     ac8:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     ad8:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     ae8:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     af8:	31 30 20 79 30 00                                   10 y0.

00000afe <square_circle_test100>:
     afe:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     b0e:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     b1e:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     b2e:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     b3e:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     b4e:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     b5e:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     b6e:	35 30 20 6a 30 00                                   50 j0.

00000b74 <spiral_test5>:
     b74:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     b84:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     b94:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     ba4:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     bb4:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     bc4:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     bd4:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     be4:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

00000bee <spiral_test50a>:
     bee:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     bfe:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

00000c0e <g0_test1>:
     c0e:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     c1e:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000c2e <g0_test2>:
     c2e:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     c3e:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     c4e:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     c5e:	79 30 20 7a 30 00                                   y0 z0.

00000c64 <g0_test3>:
     c64:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     c74:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     c84:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000c92 <radius_arc_test1>:
     c92:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     ca2:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     cb2:	72 35 30 0a 00                                      r50..

00000cb7 <radius_arc_test2>:
     cb7:	67 32 0a 00                                         g2..

00000cbb <zoetrope>:
     cbb:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     ccb:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     cdb:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     ceb:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     cfb:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     d0b:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     d1b:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     d2b:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     d3b:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     d4b:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     d5b:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     d6b:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     d7b:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     d8b:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     d9b:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     dab:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     dbb:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     dcb:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     ddb:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     deb:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     dfb:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     e0b:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     e1b:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     e2b:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     e3b:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     e4b:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     e5b:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     e6b:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     e7b:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     e8b:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     e9b:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     eab:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     ebb:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     ecb:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     edb:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     eeb:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
     efb:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
     f0b:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
     f1b:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
     f2b:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
     f3b:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
     f4b:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
     f5b:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
     f6b:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
     f7b:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
     f8b:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
     f9b:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
     fab:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
     fbb:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
     fcb:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
     fdb:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
     feb:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
     ffb:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
    100b:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
    101b:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
    102b:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
    103b:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
    104b:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
    105b:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
    106b:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
    107b:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
    108b:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
    109b:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
    10ab:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
    10bb:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
    10cb:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
    10db:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
    10eb:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    10fb:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    110b:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    111b:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    112b:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    113b:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    114b:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    115b:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    116b:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    117b:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    118b:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    119b:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    11ab:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    11bb:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    11cb:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    11db:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    11eb:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    11fb:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    120b:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    121b:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    122b:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    123b:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    124b:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    125b:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    126b:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    127b:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    128b:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    129b:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    12ab:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    12bb:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    12cb:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    12db:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    12eb:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    12fb:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    130b:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    131b:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    132b:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    133b:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    134b:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    135b:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    136b:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    137b:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    138b:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    139b:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    13ab:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    13bb:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    13cb:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    13db:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    13eb:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    13fb:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    140b:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    141b:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    142b:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    143b:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    144b:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    145b:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    146b:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    147b:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    148b:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    149b:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    14ab:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    14bb:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    14cb:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    14db:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    14eb:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    14fb:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    150b:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    151b:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    152b:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    153b:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    154b:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    155b:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    156b:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    157b:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    158b:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    159b:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    15ab:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    15bb:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    15cb:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    15db:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    15eb:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    15fb:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    160b:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    161b:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    162b:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    163b:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    164b:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    165b:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    166b:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

00001676 <contraptor_circle>:
    1676:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    1686:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    1696:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    16a6:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    16b6:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    16c6:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    16d6:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    16e6:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    16f6:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    1706:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    1716:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    1726:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    1736:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    1746:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    1756:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    1766:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    1776:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    1786:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    1796:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    17a6:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    17b6:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    17c6:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    17d6:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    17e6:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    17f6:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    1806:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    1816:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    1826:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    1836:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    1846:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    1856:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    1866:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    1876:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    1886:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    1896:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    18a6:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    18b6:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    18c6:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    18d6:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    18e6:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    18f6:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1906:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1916:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    1926:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    1936:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    1946:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    1956:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    1966:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    1976:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1986:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    1996:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    19a6:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    19b6:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    19c6:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    19d6:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    19e6:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    19f6:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1a06:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1a16:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1a26:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1a36:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1a46:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001a56 <tgModeStringControl>:
    1a56:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001a63 <tgModeStringConfig>:
    1a63:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001a6f <tgModeStringGCode>:
    1a6f:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

00001a7b <tgModeStringDirect>:
    1a7b:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

00001a88 <tgModeStrings>:
    1a88:	56 1a 63 1a 6f 1a 7b 1a                             V.c.o.{.

00001a90 <__c.3942>:
    1a90:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1aa0:	69 6c 65 0a 00                                      ile..

00001aa5 <__c.3974>:
    1aa5:	0d 0a 45 6e 64 20 6f 66 20 66 69 6c 65 20 65 6e     ..End of file en
    1ab5:	63 6f 75 6e 74 65 72 65 64 0d 0a 00                 countered...

00001ac1 <__c.3920>:
    1ac1:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001acf <__c.3915>:
    1acf:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001add <__c.3847>:
    1add:	62 75 69 6c 64 20 32 30 32 00                       build 202.

00001ae7 <__c.3845>:
    1ae7:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1af7:	25 53 0a 00                                         %S..

00001afb <readlnFuncs>:
    1afb:	83 37 58 37 58 37 ca 37 58 37 58 37 58 37 58 37     .7X7X7.7X7X7X7X7
    1b0b:	b6 37 58 37 83 37 58 37 58 37 83 37 e5 37 ee 37     .7X7.7X7X7.7.7.7
    1b1b:	58 37 dc 37 58 37 d3 37 58 37 58 37 58 37 58 37     X7.7X7.7X7X7X7X7
    1b2b:	ca 37 58 37 58 37 ca 37 58 37 58 37 58 37 58 37     .7X7X7.7X7X7X7X7
    1b3b:	58 37 58 37 58 37 58 37 58 37 58 37 58 37 58 37     X7X7X7X7X7X7X7X7
    1b4b:	58 37 58 37 58 37 58 37 58 37 58 37 58 37 58 37     X7X7X7X7X7X7X7X7
    1b5b:	58 37 58 37 58 37 58 37 58 37 58 37 58 37 58 37     X7X7X7X7X7X7X7X7
    1b6b:	58 37 58 37 58 37 ac 37 58 37 58 37 58 37 58 37     X7X7X7.7X7X7X7X7
    1b7b:	58 37 58 37 58 37 58 37 58 37 58 37 58 37 58 37     X7X7X7X7X7X7X7X7
    1b8b:	58 37 58 37 58 37 58 37 58 37 58 37 58 37 58 37     X7X7X7X7X7X7X7X7
    1b9b:	58 37 58 37 58 37 58 37 58 37 58 37 58 37 58 37     X7X7X7X7X7X7X7X7
    1bab:	58 37 58 37 58 37 58 37 58 37 58 37 58 37 58 37     X7X7X7X7X7X7X7X7
    1bbb:	58 37 58 37 58 37 58 37 58 37 58 37 58 37 58 37     X7X7X7X7X7X7X7X7
    1bcb:	58 37 58 37 58 37 58 37 58 37 58 37 58 37 58 37     X7X7X7X7X7X7X7X7
    1bdb:	58 37 58 37 58 37 58 37 58 37 58 37 58 37 58 37     X7X7X7X7X7X7X7X7
    1beb:	58 37 58 37 58 37 58 37 58 37 58 37 58 37 b6 37     X7X7X7X7X7X7X7.7

00001bfb <getcFuncs>:
    1bfb:	d7 36 c7 36 c7 36 fc 36 c7 36 c7 36 c7 36 c7 36     .6.6.6.6.6.6.6.6
    1c0b:	f6 36 c7 36 d7 36 c7 36 c7 36 d7 36 0e 37 14 37     .6.6.6.6.6.6.7.7
    1c1b:	c7 36 08 37 c7 36 02 37 c7 36 c7 36 c7 36 c7 36     .6.7.6.7.6.6.6.6
    1c2b:	fc 36 c7 36 c7 36 fc 36 c7 36 c7 36 c7 36 c7 36     .6.6.6.6.6.6.6.6
    1c3b:	c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36     .6.6.6.6.6.6.6.6
    1c4b:	c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36     .6.6.6.6.6.6.6.6
    1c5b:	c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36     .6.6.6.6.6.6.6.6
    1c6b:	c7 36 c7 36 c7 36 ec 36 c7 36 c7 36 c7 36 c7 36     .6.6.6.6.6.6.6.6
    1c7b:	c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36     .6.6.6.6.6.6.6.6
    1c8b:	c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36     .6.6.6.6.6.6.6.6
    1c9b:	c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36     .6.6.6.6.6.6.6.6
    1cab:	c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36     .6.6.6.6.6.6.6.6
    1cbb:	c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36     .6.6.6.6.6.6.6.6
    1ccb:	c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36     .6.6.6.6.6.6.6.6
    1cdb:	c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36     .6.6.6.6.6.6.6.6
    1ceb:	c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 c7 36 f6 36     .6.6.6.6.6.6.6.6

00001cfb <pstr_inf>:
    1cfb:	49 4e 46                                            INF

00001cfe <pstr_inity>:
    1cfe:	49 4e 49 54 59                                      INITY

00001d03 <pstr_nan>:
    1d03:	4e 41 4e                                            NAN

00001d06 <pwr_m10>:
    1d06:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1d16:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001d1e <pwr_p10>:
    1d1e:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1d2e:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1d3e:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1d4e:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1d5e:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1d6e:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1d7e:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1d8e:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1d9e:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1dae:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1dbe:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1dce:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1dde:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1dee:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1dfe:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1e0e:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1e1e:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1e2e:	3d 27                                               ='

00001e30 <__ctors_end>:
    1e30:	11 24       	eor	r1, r1
    1e32:	1f be       	out	0x3f, r1	; 63
    1e34:	cf ef       	ldi	r28, 0xFF	; 255
    1e36:	df e5       	ldi	r29, 0x5F	; 95
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	00 e0       	ldi	r16, 0x00	; 0
    1e3e:	0c bf       	out	0x3c, r16	; 60

00001e40 <__do_copy_data>:
    1e40:	11 e2       	ldi	r17, 0x21	; 33
    1e42:	a0 e0       	ldi	r26, 0x00	; 0
    1e44:	b0 e2       	ldi	r27, 0x20	; 32
    1e46:	ee e1       	ldi	r30, 0x1E	; 30
    1e48:	f5 e9       	ldi	r31, 0x95	; 149
    1e4a:	00 e0       	ldi	r16, 0x00	; 0
    1e4c:	0b bf       	out	0x3b, r16	; 59
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <__do_copy_data+0x14>
    1e50:	07 90       	elpm	r0, Z+
    1e52:	0d 92       	st	X+, r0
    1e54:	aa 32       	cpi	r26, 0x2A	; 42
    1e56:	b1 07       	cpc	r27, r17
    1e58:	d9 f7       	brne	.-10     	; 0x1e50 <__do_copy_data+0x10>

00001e5a <__do_clear_bss>:
    1e5a:	15 e2       	ldi	r17, 0x25	; 37
    1e5c:	aa e2       	ldi	r26, 0x2A	; 42
    1e5e:	b1 e2       	ldi	r27, 0x21	; 33
    1e60:	01 c0       	rjmp	.+2      	; 0x1e64 <.do_clear_bss_start>

00001e62 <.do_clear_bss_loop>:
    1e62:	1d 92       	st	X+, r1

00001e64 <.do_clear_bss_start>:
    1e64:	ab 35       	cpi	r26, 0x5B	; 91
    1e66:	b1 07       	cpc	r27, r17
    1e68:	e1 f7       	brne	.-8      	; 0x1e62 <.do_clear_bss_loop>
    1e6a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <main>
    1e6e:	0c 94 8d 4a 	jmp	0x951a	; 0x951a <_exit>

00001e72 <__bad_interrupt>:
    1e72:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001e76 <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1e76:	f8 94       	cli
	xmega_init();				// xmega setup
    1e78:	0e 94 2e 1b 	call	0x365c	; 0x365c <xmega_init>
	xio_init();					// xmega io subsystem
    1e7c:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <xio_init>

	cfg_init();					// get config record from eeprom
    1e80:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <cfg_init>
	st_init(); 					// stepper subsystem
    1e84:	0e 94 be 23 	call	0x477c	; 0x477c <st_init>
	ls_init();					// limit switches
    1e88:	0e 94 7f 32 	call	0x64fe	; 0x64fe <ls_init>
	mv_init();					// move buffers
    1e8c:	0e 94 0c 31 	call	0x6218	; 0x6218 <mv_init>
	mc_init();					// motion control subsystem
    1e90:	0e 94 a2 1b 	call	0x3744	; 0x3744 <mc_init>
	spindle_init();				// spindle controller
    1e94:	0e 94 a2 23 	call	0x4744	; 0x4744 <spindle_init>
	en_init();					// encoders
    1e98:	0e 94 cc 1a 	call	0x3598	; 0x3598 <en_init>
	gc_init();					// gcode-parser
    1e9c:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <gc_init>
	dd_init();					// direct drive commands
    1ea0:	0e 94 08 31 	call	0x6210	; 0x6210 <dd_init>
	tg_init();					// tinyg parsers
    1ea4:	0e 94 da 30 	call	0x61b4	; 0x61b4 <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1ea8:	0e 94 14 27 	call	0x4e28	; 0x4e28 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1eac:	e0 ea       	ldi	r30, 0xA0	; 160
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 91 a2 00 	lds	r24, 0x00A2
    1eb4:	81 60       	ori	r24, 0x01	; 1
    1eb6:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1eb8:	80 91 a2 00 	lds	r24, 0x00A2
    1ebc:	82 60       	ori	r24, 0x02	; 2
    1ebe:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1ec0:	80 91 a2 00 	lds	r24, 0x00A2
    1ec4:	84 60       	ori	r24, 0x04	; 4
    1ec6:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1ec8:	78 94       	sei
//	xio_usb_queue_RX_string("f\n");
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");

	for(;;){
		tg_controller();
    1eca:	0e 94 a3 30 	call	0x6146	; 0x6146 <tg_controller>
    1ece:	fd cf       	rjmp	.-6      	; 0x1eca <main+0x54>

00001ed0 <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1ed0:	80 93 77 21 	sts	0x2177, r24
	gc.plane_axis_1 = axis_1;
    1ed4:	60 93 78 21 	sts	0x2178, r22
	gc.plane_axis_2 = axis_2;
    1ed8:	40 93 79 21 	sts	0x2179, r20
}
    1edc:	08 95       	ret

00001ede <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1ede:	ef 92       	push	r14
    1ee0:	ff 92       	push	r15
    1ee2:	0f 93       	push	r16
    1ee4:	1f 93       	push	r17
    1ee6:	7b 01       	movw	r14, r22
    1ee8:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1eea:	80 91 37 21 	lds	r24, 0x2137
    1eee:	88 23       	and	r24, r24
    1ef0:	51 f0       	breq	.+20     	; 0x1f06 <to_millimeters+0x28>
    1ef2:	c8 01       	movw	r24, r16
    1ef4:	b7 01       	movw	r22, r14
    1ef6:	25 e8       	ldi	r18, 0x85	; 133
    1ef8:	32 e4       	ldi	r19, 0x42	; 66
    1efa:	41 e2       	ldi	r20, 0x21	; 33
    1efc:	5d e3       	ldi	r21, 0x3D	; 61
    1efe:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    1f02:	7b 01       	movw	r14, r22
    1f04:	8c 01       	movw	r16, r24
}
    1f06:	b7 01       	movw	r22, r14
    1f08:	c8 01       	movw	r24, r16
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	ff 90       	pop	r15
    1f10:	ef 90       	pop	r14
    1f12:	08 95       	ret

00001f14 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    1f14:	86 e5       	ldi	r24, 0x56	; 86
    1f16:	ea e2       	ldi	r30, 0x2A	; 42
    1f18:	f1 e2       	ldi	r31, 0x21	; 33
    1f1a:	df 01       	movw	r26, r30
    1f1c:	1d 92       	st	X+, r1
    1f1e:	8a 95       	dec	r24
    1f20:	e9 f7       	brne	.-6      	; 0x1f1c <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	a0 e0       	ldi	r26, 0x00	; 0
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	80 93 3b 21 	sts	0x213B, r24
    1f2e:	90 93 3c 21 	sts	0x213C, r25
    1f32:	a0 93 3d 21 	sts	0x213D, r26
    1f36:	b0 93 3e 21 	sts	0x213E, r27
	gc.radius = 0;							// radius value
    1f3a:	80 93 3f 21 	sts	0x213F, r24
    1f3e:	90 93 40 21 	sts	0x2140, r25
    1f42:	a0 93 41 21 	sts	0x2141, r26
    1f46:	b0 93 42 21 	sts	0x2142, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    1f4a:	80 91 91 24 	lds	r24, 0x2491
    1f4e:	90 91 92 24 	lds	r25, 0x2492
    1f52:	a0 91 93 24 	lds	r26, 0x2493
    1f56:	b0 91 94 24 	lds	r27, 0x2494
    1f5a:	80 93 43 21 	sts	0x2143, r24
    1f5e:	90 93 44 21 	sts	0x2144, r25
    1f62:	a0 93 45 21 	sts	0x2145, r26
    1f66:	b0 93 46 21 	sts	0x2146, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    1f6a:	80 91 95 24 	lds	r24, 0x2495
    1f6e:	90 91 96 24 	lds	r25, 0x2496
    1f72:	a0 91 97 24 	lds	r26, 0x2497
    1f76:	b0 91 98 24 	lds	r27, 0x2498
    1f7a:	80 93 47 21 	sts	0x2147, r24
    1f7e:	90 93 48 21 	sts	0x2148, r25
    1f82:	a0 93 49 21 	sts	0x2149, r26
    1f86:	b0 93 4a 21 	sts	0x214A, r27

	gc.absolute_mode = TRUE;
    1f8a:	21 e0       	ldi	r18, 0x01	; 1
    1f8c:	20 93 38 21 	sts	0x2138, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	a0 e8       	ldi	r26, 0x80	; 128
    1f96:	bf eb       	ldi	r27, 0xBF	; 191
    1f98:	80 93 4f 21 	sts	0x214F, r24
    1f9c:	90 93 50 21 	sts	0x2150, r25
    1fa0:	a0 93 51 21 	sts	0x2151, r26
    1fa4:	b0 93 52 21 	sts	0x2152, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    1fa8:	10 92 39 21 	sts	0x2139, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    1fac:	10 92 7e 21 	sts	0x217E, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    1fb0:	10 92 7f 21 	sts	0x217F, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1fb4:	10 92 77 21 	sts	0x2177, r1
	gc.plane_axis_1 = axis_1;
    1fb8:	20 93 78 21 	sts	0x2178, r18
	gc.plane_axis_2 = axis_2;
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	80 93 79 21 	sts	0x2179, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X_AXIS, Y_AXIS, Z_AXIS);
}
    1fc2:	08 95       	ret

00001fc4 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    1fc4:	4f 92       	push	r4
    1fc6:	5f 92       	push	r5
    1fc8:	6f 92       	push	r6
    1fca:	7f 92       	push	r7
    1fcc:	8f 92       	push	r8
    1fce:	9f 92       	push	r9
    1fd0:	af 92       	push	r10
    1fd2:	bf 92       	push	r11
    1fd4:	cf 92       	push	r12
    1fd6:	df 92       	push	r13
    1fd8:	ef 92       	push	r14
    1fda:	ff 92       	push	r15
    1fdc:	0f 93       	push	r16
    1fde:	1f 93       	push	r17
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	0f 92       	push	r0
    1fe6:	0f 92       	push	r0
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	3b 01       	movw	r6, r22
    1fee:	2a 01       	movw	r4, r20
    1ff0:	49 01       	movw	r8, r18
    1ff2:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    1ff4:	d8 01       	movw	r26, r16
    1ff6:	ed 91       	ld	r30, X+
    1ff8:	fc 91       	ld	r31, X
    1ffa:	e2 0f       	add	r30, r18
    1ffc:	f3 1f       	adc	r31, r19
    1ffe:	e0 81       	ld	r30, Z
    2000:	ee 23       	and	r30, r30
    2002:	41 f0       	breq	.+16     	; 0x2014 <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    2004:	dc 01       	movw	r26, r24
    2006:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    2008:	e1 54       	subi	r30, 0x41	; 65
    200a:	ea 31       	cpi	r30, 0x1A	; 26
    200c:	30 f0       	brcs	.+12     	; 0x201a <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    200e:	88 e0       	ldi	r24, 0x08	; 8
    2010:	80 93 2a 21 	sts	0x212A, r24
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	35 c0       	rjmp	.+106    	; 0x2084 <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    201a:	f8 01       	movw	r30, r16
    201c:	80 81       	ld	r24, Z
    201e:	91 81       	ldd	r25, Z+1	; 0x01
    2020:	01 96       	adiw	r24, 0x01	; 1
    2022:	80 83       	st	Z, r24
    2024:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    2026:	89 01       	movw	r16, r18
    2028:	08 0f       	add	r16, r24
    202a:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    202c:	c8 01       	movw	r24, r16
    202e:	be 01       	movw	r22, r28
    2030:	6f 5f       	subi	r22, 0xFF	; 255
    2032:	7f 4f       	sbci	r23, 0xFF	; 255
    2034:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <strtod>
    2038:	6b 01       	movw	r12, r22
    203a:	7c 01       	movw	r14, r24
    203c:	d3 01       	movw	r26, r6
    203e:	6d 93       	st	X+, r22
    2040:	7d 93       	st	X+, r23
    2042:	8d 93       	st	X+, r24
    2044:	9c 93       	st	X, r25
    2046:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	9a 81       	ldd	r25, Y+2	; 0x02
    204c:	80 17       	cp	r24, r16
    204e:	91 07       	cpc	r25, r17
    2050:	11 f4       	brne	.+4      	; 0x2056 <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    2052:	8c e0       	ldi	r24, 0x0C	; 12
    2054:	dd cf       	rjmp	.-70     	; 0x2010 <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    2056:	88 19       	sub	r24, r8
    2058:	99 09       	sbc	r25, r9
    205a:	f5 01       	movw	r30, r10
    205c:	80 83       	st	Z, r24
    205e:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    2060:	c7 01       	movw	r24, r14
    2062:	b6 01       	movw	r22, r12
    2064:	0e 94 26 46 	call	0x8c4c	; 0x8c4c <trunc>
    2068:	9b 01       	movw	r18, r22
    206a:	ac 01       	movw	r20, r24
    206c:	c7 01       	movw	r24, r14
    206e:	b6 01       	movw	r22, r12
    2070:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    2074:	d2 01       	movw	r26, r4
    2076:	6d 93       	st	X+, r22
    2078:	7d 93       	st	X+, r23
    207a:	8d 93       	st	X+, r24
    207c:	9c 93       	st	X, r25
    207e:	13 97       	sbiw	r26, 0x03	; 3
    2080:	21 e0       	ldi	r18, 0x01	; 1
    2082:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    2084:	c9 01       	movw	r24, r18
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	1f 91       	pop	r17
    2090:	0f 91       	pop	r16
    2092:	ff 90       	pop	r15
    2094:	ef 90       	pop	r14
    2096:	df 90       	pop	r13
    2098:	cf 90       	pop	r12
    209a:	bf 90       	pop	r11
    209c:	af 90       	pop	r10
    209e:	9f 90       	pop	r9
    20a0:	8f 90       	pop	r8
    20a2:	7f 90       	pop	r7
    20a4:	6f 90       	pop	r6
    20a6:	5f 90       	pop	r5
    20a8:	4f 90       	pop	r4
    20aa:	08 95       	ret

000020ac <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    20ac:	af 92       	push	r10
    20ae:	bf 92       	push	r11
    20b0:	cf 92       	push	r12
    20b2:	df 92       	push	r13
    20b4:	ef 92       	push	r14
    20b6:	ff 92       	push	r15
    20b8:	0f 93       	push	r16
    20ba:	1f 93       	push	r17
    20bc:	79 01       	movw	r14, r18
    20be:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    20c0:	5f 77       	andi	r21, 0x7F	; 127
    20c2:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    20c6:	0e 94 7b 42 	call	0x84f6	; 0x84f6 <atan>
    20ca:	5b 01       	movw	r10, r22
    20cc:	6c 01       	movw	r12, r24

	if (y>0) {
    20ce:	c8 01       	movw	r24, r16
    20d0:	b7 01       	movw	r22, r14
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e0       	ldi	r20, 0x00	; 0
    20d8:	50 e0       	ldi	r21, 0x00	; 0
    20da:	0e 94 a6 44 	call	0x894c	; 0x894c <__gesf2>
    20de:	18 16       	cp	r1, r24
    20e0:	cc f0       	brlt	.+50     	; 0x2114 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    20e2:	c6 01       	movw	r24, r12
    20e4:	b5 01       	movw	r22, r10
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e0       	ldi	r20, 0x00	; 0
    20ec:	50 e0       	ldi	r21, 0x00	; 0
    20ee:	0e 94 a6 44 	call	0x894c	; 0x894c <__gesf2>
    20f2:	18 16       	cp	r1, r24
    20f4:	2c f4       	brge	.+10     	; 0x2100 <theta+0x54>
	    {
			return(M_PI-theta);
    20f6:	6b ed       	ldi	r22, 0xDB	; 219
    20f8:	7f e0       	ldi	r23, 0x0F	; 15
    20fa:	89 e4       	ldi	r24, 0x49	; 73
    20fc:	90 e4       	ldi	r25, 0x40	; 64
    20fe:	04 c0       	rjmp	.+8      	; 0x2108 <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    2100:	6b ed       	ldi	r22, 0xDB	; 219
    2102:	7f e0       	ldi	r23, 0x0F	; 15
    2104:	89 e4       	ldi	r24, 0x49	; 73
    2106:	90 ec       	ldi	r25, 0xC0	; 192
    2108:	a6 01       	movw	r20, r12
    210a:	95 01       	movw	r18, r10
    210c:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    2110:	5b 01       	movw	r10, r22
    2112:	6c 01       	movw	r12, r24
		}
	}
}
    2114:	b5 01       	movw	r22, r10
    2116:	c6 01       	movw	r24, r12
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	ff 90       	pop	r15
    211e:	ef 90       	pop	r14
    2120:	df 90       	pop	r13
    2122:	cf 90       	pop	r12
    2124:	bf 90       	pop	r11
    2126:	af 90       	pop	r10
    2128:	08 95       	ret

0000212a <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    212a:	2f 92       	push	r2
    212c:	3f 92       	push	r3
    212e:	4f 92       	push	r4
    2130:	5f 92       	push	r5
    2132:	6f 92       	push	r6
    2134:	7f 92       	push	r7
    2136:	8f 92       	push	r8
    2138:	9f 92       	push	r9
    213a:	af 92       	push	r10
    213c:	bf 92       	push	r11
    213e:	cf 92       	push	r12
    2140:	df 92       	push	r13
    2142:	ef 92       	push	r14
    2144:	ff 92       	push	r15
    2146:	0f 93       	push	r16
    2148:	1f 93       	push	r17
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	68 97       	sbiw	r28, 0x18	; 24
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    215a:	19 82       	std	Y+1, r1	; 0x01
    215c:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    215e:	ef e5       	ldi	r30, 0x5F	; 95
    2160:	f1 e2       	ldi	r31, 0x21	; 33
    2162:	8c e0       	ldi	r24, 0x0C	; 12
    2164:	df 01       	movw	r26, r30
    2166:	28 2f       	mov	r18, r24
    2168:	1d 92       	st	X+, r1
    216a:	2a 95       	dec	r18
    216c:	e9 f7       	brne	.-6      	; 0x2168 <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    216e:	3c 96       	adiw	r30, 0x0c	; 12
    2170:	df 01       	movw	r26, r30
    2172:	1d 92       	st	X+, r1
    2174:	8a 95       	dec	r24
    2176:	e9 f7       	brne	.-6      	; 0x2172 <gc_execute_block+0x48>

	gc.status = TG_OK;
    2178:	10 92 2a 21 	sts	0x212A, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    217c:	10 92 3a 21 	sts	0x213A, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2180:	6e 01       	movw	r12, r28
    2182:	08 94       	sec
    2184:	c1 1c       	adc	r12, r1
    2186:	d1 1c       	adc	r13, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    2188:	ff 24       	eor	r15, r15
    218a:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    218c:	ba e0       	ldi	r27, 0x0A	; 10
    218e:	bb 2e       	mov	r11, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2190:	a2 e0       	ldi	r26, 0x02	; 2
    2192:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    2194:	77 24       	eor	r7, r7
    2196:	7a 94       	dec	r7
					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }
					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2198:	f4 e0       	ldi	r31, 0x04	; 4
    219a:	6f 2e       	mov	r6, r31
			case 'G':
				switch((int)gc.value) {
					case 0:  { gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
					case 1:  { gc.motion_mode = MOTION_MODE_LINEAR; break; }
					case 2:  { gc.motion_mode = MOTION_MODE_CW_ARC; break; }
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    219c:	e3 e0       	ldi	r30, 0x03	; 3
    219e:	ae 2e       	mov	r10, r30
    21a0:	02 c1       	rjmp	.+516    	; 0x23a6 <gc_execute_block+0x27c>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    21a2:	80 91 2b 21 	lds	r24, 0x212B
    21a6:	8d 34       	cpi	r24, 0x4D	; 77
    21a8:	09 f4       	brne	.+2      	; 0x21ac <gc_execute_block+0x82>
    21aa:	b6 c0       	rjmp	.+364    	; 0x2318 <gc_execute_block+0x1ee>
    21ac:	84 35       	cpi	r24, 0x54	; 84
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <gc_execute_block+0x88>
    21b0:	e8 c0       	rjmp	.+464    	; 0x2382 <gc_execute_block+0x258>
    21b2:	87 34       	cpi	r24, 0x47	; 71
    21b4:	09 f0       	breq	.+2      	; 0x21b8 <gc_execute_block+0x8e>
    21b6:	f3 c0       	rjmp	.+486    	; 0x239e <gc_execute_block+0x274>
			case 'G':
				switch((int)gc.value) {
    21b8:	60 91 2c 21 	lds	r22, 0x212C
    21bc:	70 91 2d 21 	lds	r23, 0x212D
    21c0:	80 91 2e 21 	lds	r24, 0x212E
    21c4:	90 91 2f 21 	lds	r25, 0x212F
    21c8:	0e 94 25 43 	call	0x864a	; 0x864a <__fixsfsi>
    21cc:	65 31       	cpi	r22, 0x15	; 21
    21ce:	71 05       	cpc	r23, r1
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <gc_execute_block+0xaa>
    21d2:	87 c0       	rjmp	.+270    	; 0x22e2 <gc_execute_block+0x1b8>
    21d4:	66 31       	cpi	r22, 0x16	; 22
    21d6:	71 05       	cpc	r23, r1
    21d8:	84 f5       	brge	.+96     	; 0x223a <gc_execute_block+0x110>
    21da:	64 30       	cpi	r22, 0x04	; 4
    21dc:	71 05       	cpc	r23, r1
    21de:	09 f4       	brne	.+2      	; 0x21e2 <gc_execute_block+0xb8>
    21e0:	65 c0       	rjmp	.+202    	; 0x22ac <gc_execute_block+0x182>
    21e2:	65 30       	cpi	r22, 0x05	; 5
    21e4:	71 05       	cpc	r23, r1
    21e6:	a4 f4       	brge	.+40     	; 0x2210 <gc_execute_block+0xe6>
    21e8:	61 30       	cpi	r22, 0x01	; 1
    21ea:	71 05       	cpc	r23, r1
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <gc_execute_block+0xc6>
    21ee:	55 c0       	rjmp	.+170    	; 0x229a <gc_execute_block+0x170>
    21f0:	62 30       	cpi	r22, 0x02	; 2
    21f2:	71 05       	cpc	r23, r1
    21f4:	24 f4       	brge	.+8      	; 0x21fe <gc_execute_block+0xd4>
    21f6:	67 2b       	or	r22, r23
    21f8:	09 f4       	brne	.+2      	; 0x21fc <gc_execute_block+0xd2>
    21fa:	4c c0       	rjmp	.+152    	; 0x2294 <gc_execute_block+0x16a>
    21fc:	bf c0       	rjmp	.+382    	; 0x237c <gc_execute_block+0x252>
    21fe:	62 30       	cpi	r22, 0x02	; 2
    2200:	71 05       	cpc	r23, r1
    2202:	09 f4       	brne	.+2      	; 0x2206 <gc_execute_block+0xdc>
    2204:	4d c0       	rjmp	.+154    	; 0x22a0 <gc_execute_block+0x176>
    2206:	63 30       	cpi	r22, 0x03	; 3
    2208:	71 05       	cpc	r23, r1
    220a:	09 f0       	breq	.+2      	; 0x220e <gc_execute_block+0xe4>
    220c:	b7 c0       	rjmp	.+366    	; 0x237c <gc_execute_block+0x252>
    220e:	4b c0       	rjmp	.+150    	; 0x22a6 <gc_execute_block+0x17c>
    2210:	62 31       	cpi	r22, 0x12	; 18
    2212:	71 05       	cpc	r23, r1
    2214:	09 f4       	brne	.+2      	; 0x2218 <gc_execute_block+0xee>
    2216:	54 c0       	rjmp	.+168    	; 0x22c0 <gc_execute_block+0x196>
    2218:	63 31       	cpi	r22, 0x13	; 19
    221a:	71 05       	cpc	r23, r1
    221c:	2c f4       	brge	.+10     	; 0x2228 <gc_execute_block+0xfe>
    221e:	61 31       	cpi	r22, 0x11	; 17
    2220:	71 05       	cpc	r23, r1
    2222:	09 f0       	breq	.+2      	; 0x2226 <gc_execute_block+0xfc>
    2224:	ab c0       	rjmp	.+342    	; 0x237c <gc_execute_block+0x252>
    2226:	45 c0       	rjmp	.+138    	; 0x22b2 <gc_execute_block+0x188>
    2228:	63 31       	cpi	r22, 0x13	; 19
    222a:	71 05       	cpc	r23, r1
    222c:	09 f4       	brne	.+2      	; 0x2230 <gc_execute_block+0x106>
    222e:	4f c0       	rjmp	.+158    	; 0x22ce <gc_execute_block+0x1a4>
    2230:	64 31       	cpi	r22, 0x14	; 20
    2232:	71 05       	cpc	r23, r1
    2234:	09 f0       	breq	.+2      	; 0x2238 <gc_execute_block+0x10e>
    2236:	a2 c0       	rjmp	.+324    	; 0x237c <gc_execute_block+0x252>
    2238:	51 c0       	rjmp	.+162    	; 0x22dc <gc_execute_block+0x1b2>
    223a:	6a 35       	cpi	r22, 0x5A	; 90
    223c:	71 05       	cpc	r23, r1
    223e:	09 f4       	brne	.+2      	; 0x2242 <gc_execute_block+0x118>
    2240:	5c c0       	rjmp	.+184    	; 0x22fa <gc_execute_block+0x1d0>
    2242:	6b 35       	cpi	r22, 0x5B	; 91
    2244:	71 05       	cpc	r23, r1
    2246:	ac f4       	brge	.+42     	; 0x2272 <gc_execute_block+0x148>
    2248:	6e 31       	cpi	r22, 0x1E	; 30
    224a:	71 05       	cpc	r23, r1
    224c:	09 f4       	brne	.+2      	; 0x2250 <gc_execute_block+0x126>
    224e:	4c c0       	rjmp	.+152    	; 0x22e8 <gc_execute_block+0x1be>
    2250:	6f 31       	cpi	r22, 0x1F	; 31
    2252:	71 05       	cpc	r23, r1
    2254:	2c f4       	brge	.+10     	; 0x2260 <gc_execute_block+0x136>
    2256:	6c 31       	cpi	r22, 0x1C	; 28
    2258:	71 05       	cpc	r23, r1
    225a:	09 f0       	breq	.+2      	; 0x225e <gc_execute_block+0x134>
    225c:	8f c0       	rjmp	.+286    	; 0x237c <gc_execute_block+0x252>
    225e:	44 c0       	rjmp	.+136    	; 0x22e8 <gc_execute_block+0x1be>
    2260:	65 33       	cpi	r22, 0x35	; 53
    2262:	71 05       	cpc	r23, r1
    2264:	09 f4       	brne	.+2      	; 0x2268 <gc_execute_block+0x13e>
    2266:	43 c0       	rjmp	.+134    	; 0x22ee <gc_execute_block+0x1c4>
    2268:	60 35       	cpi	r22, 0x50	; 80
    226a:	71 05       	cpc	r23, r1
    226c:	09 f0       	breq	.+2      	; 0x2270 <gc_execute_block+0x146>
    226e:	86 c0       	rjmp	.+268    	; 0x237c <gc_execute_block+0x252>
    2270:	41 c0       	rjmp	.+130    	; 0x22f4 <gc_execute_block+0x1ca>
    2272:	6c 35       	cpi	r22, 0x5C	; 92
    2274:	71 05       	cpc	r23, r1
    2276:	09 f4       	brne	.+2      	; 0x227a <gc_execute_block+0x150>
    2278:	46 c0       	rjmp	.+140    	; 0x2306 <gc_execute_block+0x1dc>
    227a:	6c 35       	cpi	r22, 0x5C	; 92
    227c:	71 05       	cpc	r23, r1
    227e:	0c f4       	brge	.+2      	; 0x2282 <gc_execute_block+0x158>
    2280:	3f c0       	rjmp	.+126    	; 0x2300 <gc_execute_block+0x1d6>
    2282:	6d 35       	cpi	r22, 0x5D	; 93
    2284:	71 05       	cpc	r23, r1
    2286:	09 f4       	brne	.+2      	; 0x228a <gc_execute_block+0x160>
    2288:	41 c0       	rjmp	.+130    	; 0x230c <gc_execute_block+0x1e2>
    228a:	6e 35       	cpi	r22, 0x5E	; 94
    228c:	71 05       	cpc	r23, r1
    228e:	09 f0       	breq	.+2      	; 0x2292 <gc_execute_block+0x168>
    2290:	75 c0       	rjmp	.+234    	; 0x237c <gc_execute_block+0x252>
    2292:	3f c0       	rjmp	.+126    	; 0x2312 <gc_execute_block+0x1e8>
					case 0:  { gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    2294:	10 92 35 21 	sts	0x2135, r1
    2298:	82 c0       	rjmp	.+260    	; 0x239e <gc_execute_block+0x274>
					case 1:  { gc.motion_mode = MOTION_MODE_LINEAR; break; }
    229a:	f0 92 35 21 	sts	0x2135, r15
    229e:	7f c0       	rjmp	.+254    	; 0x239e <gc_execute_block+0x274>
					case 2:  { gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    22a0:	e0 92 35 21 	sts	0x2135, r14
    22a4:	7c c0       	rjmp	.+248    	; 0x239e <gc_execute_block+0x274>
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    22a6:	a0 92 35 21 	sts	0x2135, r10
    22aa:	79 c0       	rjmp	.+242    	; 0x239e <gc_execute_block+0x274>
					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    22ac:	f0 92 7f 21 	sts	0x217F, r15
    22b0:	76 c0       	rjmp	.+236    	; 0x239e <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22b2:	10 92 77 21 	sts	0x2177, r1
	gc.plane_axis_1 = axis_1;
    22b6:	f0 92 78 21 	sts	0x2178, r15
	gc.plane_axis_2 = axis_2;
    22ba:	e0 92 79 21 	sts	0x2179, r14
    22be:	6f c0       	rjmp	.+222    	; 0x239e <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22c0:	10 92 77 21 	sts	0x2177, r1
	gc.plane_axis_1 = axis_1;
    22c4:	e0 92 78 21 	sts	0x2178, r14
	gc.plane_axis_2 = axis_2;
    22c8:	f0 92 79 21 	sts	0x2179, r15
    22cc:	68 c0       	rjmp	.+208    	; 0x239e <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22ce:	f0 92 77 21 	sts	0x2177, r15
	gc.plane_axis_1 = axis_1;
    22d2:	e0 92 78 21 	sts	0x2178, r14
	gc.plane_axis_2 = axis_2;
    22d6:	10 92 79 21 	sts	0x2179, r1
    22da:	61 c0       	rjmp	.+194    	; 0x239e <gc_execute_block+0x274>
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
					case 17: { select_plane(X_AXIS, Y_AXIS, Z_AXIS); break; }
					case 18: { select_plane(X_AXIS, Z_AXIS, Y_AXIS); break; }
					case 19: { select_plane(Y_AXIS, Z_AXIS, X_AXIS); break; }
					case 20: { gc.inches_mode = TRUE; break; }
    22dc:	f0 92 37 21 	sts	0x2137, r15
    22e0:	5e c0       	rjmp	.+188    	; 0x239e <gc_execute_block+0x274>
					case 21: { gc.inches_mode = FALSE; break; }
    22e2:	10 92 37 21 	sts	0x2137, r1
    22e6:	5b c0       	rjmp	.+182    	; 0x239e <gc_execute_block+0x274>
					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    22e8:	e0 92 7f 21 	sts	0x217F, r14
    22ec:	58 c0       	rjmp	.+176    	; 0x239e <gc_execute_block+0x274>
					case 53: { gc.absolute_override = TRUE; break; }
    22ee:	f0 92 7e 21 	sts	0x217E, r15
    22f2:	55 c0       	rjmp	.+170    	; 0x239e <gc_execute_block+0x274>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    22f4:	60 92 35 21 	sts	0x2135, r6
    22f8:	52 c0       	rjmp	.+164    	; 0x239e <gc_execute_block+0x274>
					case 90: { gc.absolute_mode = TRUE; break; }
    22fa:	f0 92 38 21 	sts	0x2138, r15
    22fe:	4f c0       	rjmp	.+158    	; 0x239e <gc_execute_block+0x274>
					case 91: { gc.absolute_mode = FALSE; break; }
    2300:	10 92 38 21 	sts	0x2138, r1
    2304:	4c c0       	rjmp	.+152    	; 0x239e <gc_execute_block+0x274>
					case 92: { gc.set_origin_mode = TRUE; break; }
    2306:	f0 92 3a 21 	sts	0x213A, r15
    230a:	49 c0       	rjmp	.+146    	; 0x239e <gc_execute_block+0x274>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    230c:	f0 92 36 21 	sts	0x2136, r15
    2310:	46 c0       	rjmp	.+140    	; 0x239e <gc_execute_block+0x274>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2312:	10 92 36 21 	sts	0x2136, r1
    2316:	43 c0       	rjmp	.+134    	; 0x239e <gc_execute_block+0x274>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    2318:	60 91 2c 21 	lds	r22, 0x212C
    231c:	70 91 2d 21 	lds	r23, 0x212D
    2320:	80 91 2e 21 	lds	r24, 0x212E
    2324:	90 91 2f 21 	lds	r25, 0x212F
    2328:	0e 94 25 43 	call	0x864a	; 0x864a <__fixsfsi>
    232c:	63 30       	cpi	r22, 0x03	; 3
    232e:	71 05       	cpc	r23, r1
    2330:	e1 f0       	breq	.+56     	; 0x236a <gc_execute_block+0x240>
    2332:	64 30       	cpi	r22, 0x04	; 4
    2334:	71 05       	cpc	r23, r1
    2336:	34 f4       	brge	.+12     	; 0x2344 <gc_execute_block+0x21a>
    2338:	77 fd       	sbrc	r23, 7
    233a:	20 c0       	rjmp	.+64     	; 0x237c <gc_execute_block+0x252>
    233c:	62 30       	cpi	r22, 0x02	; 2
    233e:	71 05       	cpc	r23, r1
    2340:	74 f0       	brlt	.+28     	; 0x235e <gc_execute_block+0x234>
    2342:	10 c0       	rjmp	.+32     	; 0x2364 <gc_execute_block+0x23a>
    2344:	65 30       	cpi	r22, 0x05	; 5
    2346:	71 05       	cpc	r23, r1
    2348:	b1 f0       	breq	.+44     	; 0x2376 <gc_execute_block+0x24c>
    234a:	65 30       	cpi	r22, 0x05	; 5
    234c:	71 05       	cpc	r23, r1
    234e:	84 f0       	brlt	.+32     	; 0x2370 <gc_execute_block+0x246>
    2350:	6e 31       	cpi	r22, 0x1E	; 30
    2352:	71 05       	cpc	r23, r1
    2354:	39 f0       	breq	.+14     	; 0x2364 <gc_execute_block+0x23a>
    2356:	6c 33       	cpi	r22, 0x3C	; 60
    2358:	71 05       	cpc	r23, r1
    235a:	81 f4       	brne	.+32     	; 0x237c <gc_execute_block+0x252>
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <gc_execute_block+0x23a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    235e:	f0 92 34 21 	sts	0x2134, r15
    2362:	1d c0       	rjmp	.+58     	; 0x239e <gc_execute_block+0x274>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2364:	e0 92 34 21 	sts	0x2134, r14
    2368:	1a c0       	rjmp	.+52     	; 0x239e <gc_execute_block+0x274>
					case 3: gc.spindle_direction = 1; break;
    236a:	f0 92 7b 21 	sts	0x217B, r15
    236e:	17 c0       	rjmp	.+46     	; 0x239e <gc_execute_block+0x274>
					case 4: gc.spindle_direction = -1; break;
    2370:	70 92 7b 21 	sts	0x217B, r7
    2374:	14 c0       	rjmp	.+40     	; 0x239e <gc_execute_block+0x274>
					case 5: gc.spindle_direction = 0; break;
    2376:	10 92 7b 21 	sts	0x217B, r1
    237a:	11 c0       	rjmp	.+34     	; 0x239e <gc_execute_block+0x274>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    237c:	b0 92 2a 21 	sts	0x212A, r11
    2380:	0e c0       	rjmp	.+28     	; 0x239e <gc_execute_block+0x274>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    2382:	60 91 2c 21 	lds	r22, 0x212C
    2386:	70 91 2d 21 	lds	r23, 0x212D
    238a:	80 91 2e 21 	lds	r24, 0x212E
    238e:	90 91 2f 21 	lds	r25, 0x212F
    2392:	0e 94 26 46 	call	0x8c4c	; 0x8c4c <trunc>
    2396:	0e 94 2a 43 	call	0x8654	; 0x8654 <__fixunssfsi>
    239a:	60 93 7a 21 	sts	0x217A, r22
		}
		if(gc.status) {
    239e:	80 91 2a 21 	lds	r24, 0x212A
    23a2:	88 23       	and	r24, r24
    23a4:	69 f4       	brne	.+26     	; 0x23c0 <gc_execute_block+0x296>

	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    23a6:	8b e2       	ldi	r24, 0x2B	; 43
    23a8:	91 e2       	ldi	r25, 0x21	; 33
    23aa:	6c e2       	ldi	r22, 0x2C	; 44
    23ac:	71 e2       	ldi	r23, 0x21	; 33
    23ae:	40 e3       	ldi	r20, 0x30	; 48
    23b0:	51 e2       	ldi	r21, 0x21	; 33
    23b2:	94 01       	movw	r18, r8
    23b4:	86 01       	movw	r16, r12
    23b6:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <_gc_next_statement>
    23ba:	89 2b       	or	r24, r25
    23bc:	09 f0       	breq	.+2      	; 0x23c0 <gc_execute_block+0x296>
    23be:	f1 ce       	rjmp	.-542    	; 0x21a2 <gc_execute_block+0x78>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    23c0:	80 91 2a 21 	lds	r24, 0x212A
    23c4:	88 23       	and	r24, r24
    23c6:	09 f0       	breq	.+2      	; 0x23ca <gc_execute_block+0x2a0>
    23c8:	9d c3       	rjmp	.+1850   	; 0x2b04 <gc_execute_block+0x9da>
		return(gc.status); 
	}

	i = 0;
    23ca:	19 82       	std	Y+1, r1	; 0x01
    23cc:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    23ce:	eb e6       	ldi	r30, 0x6B	; 107
    23d0:	f1 e2       	ldi	r31, 0x21	; 33
    23d2:	8c e0       	ldi	r24, 0x0C	; 12
    23d4:	df 01       	movw	r26, r30
    23d6:	1d 92       	st	X+, r1
    23d8:	8a 95       	dec	r24
    23da:	e9 f7       	brne	.-6      	; 0x23d6 <gc_execute_block+0x2ac>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    23dc:	df 01       	movw	r26, r30
    23de:	1c 97       	sbiw	r26, 0x0c	; 12
    23e0:	78 97       	sbiw	r30, 0x18	; 24
    23e2:	8c e0       	ldi	r24, 0x0C	; 12
    23e4:	01 90       	ld	r0, Z+
    23e6:	0d 92       	st	X+, r0
    23e8:	81 50       	subi	r24, 0x01	; 1
    23ea:	e1 f7       	brne	.-8      	; 0x23e4 <gc_execute_block+0x2ba>
    23ec:	c6 c0       	rjmp	.+396    	; 0x257a <gc_execute_block+0x450>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    23ee:	c0 90 2c 21 	lds	r12, 0x212C
    23f2:	d0 90 2d 21 	lds	r13, 0x212D
    23f6:	e0 90 2e 21 	lds	r14, 0x212E
    23fa:	f0 90 2f 21 	lds	r15, 0x212F
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    23fe:	80 91 37 21 	lds	r24, 0x2137
    2402:	88 23       	and	r24, r24
    2404:	19 f4       	brne	.+6      	; 0x240c <gc_execute_block+0x2e2>
    2406:	a7 01       	movw	r20, r14
    2408:	96 01       	movw	r18, r12
    240a:	0a c0       	rjmp	.+20     	; 0x2420 <gc_execute_block+0x2f6>
    240c:	c7 01       	movw	r24, r14
    240e:	b6 01       	movw	r22, r12
    2410:	25 e8       	ldi	r18, 0x85	; 133
    2412:	32 e4       	ldi	r19, 0x42	; 66
    2414:	41 e2       	ldi	r20, 0x21	; 33
    2416:	5d e3       	ldi	r21, 0x3D	; 61
    2418:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    241c:	9b 01       	movw	r18, r22
    241e:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2420:	20 93 4b 21 	sts	0x214B, r18
    2424:	30 93 4c 21 	sts	0x214C, r19
    2428:	40 93 4d 21 	sts	0x214D, r20
    242c:	50 93 4e 21 	sts	0x214E, r21
		switch(gc.letter) {
    2430:	00 91 2b 21 	lds	r16, 0x212B
    2434:	00 35       	cpi	r16, 0x50	; 80
    2436:	09 f4       	brne	.+2      	; 0x243a <gc_execute_block+0x310>
    2438:	47 c0       	rjmp	.+142    	; 0x24c8 <gc_execute_block+0x39e>
    243a:	01 35       	cpi	r16, 0x51	; 81
    243c:	58 f4       	brcc	.+22     	; 0x2454 <gc_execute_block+0x32a>
    243e:	06 34       	cpi	r16, 0x46	; 70
    2440:	c1 f0       	breq	.+48     	; 0x2472 <gc_execute_block+0x348>
    2442:	06 34       	cpi	r16, 0x46	; 70
    2444:	08 f4       	brcc	.+2      	; 0x2448 <gc_execute_block+0x31e>
    2446:	9f c0       	rjmp	.+318    	; 0x2586 <gc_execute_block+0x45c>
    2448:	80 2f       	mov	r24, r16
    244a:	89 54       	subi	r24, 0x49	; 73
    244c:	83 30       	cpi	r24, 0x03	; 3
    244e:	08 f0       	brcs	.+2      	; 0x2452 <gc_execute_block+0x328>
    2450:	9a c0       	rjmp	.+308    	; 0x2586 <gc_execute_block+0x45c>
    2452:	2d c0       	rjmp	.+90     	; 0x24ae <gc_execute_block+0x384>
    2454:	03 35       	cpi	r16, 0x53	; 83
    2456:	09 f4       	brne	.+2      	; 0x245a <gc_execute_block+0x330>
    2458:	4b c0       	rjmp	.+150    	; 0x24f0 <gc_execute_block+0x3c6>
    245a:	04 35       	cpi	r16, 0x54	; 84
    245c:	20 f4       	brcc	.+8      	; 0x2466 <gc_execute_block+0x33c>
    245e:	02 35       	cpi	r16, 0x52	; 82
    2460:	09 f0       	breq	.+2      	; 0x2464 <gc_execute_block+0x33a>
    2462:	91 c0       	rjmp	.+290    	; 0x2586 <gc_execute_block+0x45c>
    2464:	3a c0       	rjmp	.+116    	; 0x24da <gc_execute_block+0x3b0>
    2466:	80 2f       	mov	r24, r16
    2468:	88 55       	subi	r24, 0x58	; 88
    246a:	83 30       	cpi	r24, 0x03	; 3
    246c:	08 f0       	brcs	.+2      	; 0x2470 <gc_execute_block+0x346>
    246e:	8b c0       	rjmp	.+278    	; 0x2586 <gc_execute_block+0x45c>
    2470:	48 c0       	rjmp	.+144    	; 0x2502 <gc_execute_block+0x3d8>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    2472:	80 91 36 21 	lds	r24, 0x2136
    2476:	88 23       	and	r24, r24
    2478:	49 f0       	breq	.+18     	; 0x248c <gc_execute_block+0x362>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    247a:	20 93 4f 21 	sts	0x214F, r18
    247e:	30 93 50 21 	sts	0x2150, r19
    2482:	40 93 51 21 	sts	0x2151, r20
    2486:	50 93 52 21 	sts	0x2152, r21
    248a:	7d c0       	rjmp	.+250    	; 0x2586 <gc_execute_block+0x45c>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    248c:	ca 01       	movw	r24, r20
    248e:	b9 01       	movw	r22, r18
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e7       	ldi	r20, 0x70	; 112
    2496:	52 e4       	ldi	r21, 0x42	; 66
    2498:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    249c:	60 93 43 21 	sts	0x2143, r22
    24a0:	70 93 44 21 	sts	0x2144, r23
    24a4:	80 93 45 21 	sts	0x2145, r24
    24a8:	90 93 46 21 	sts	0x2146, r25
    24ac:	6c c0       	rjmp	.+216    	; 0x2586 <gc_execute_block+0x45c>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    24ae:	e0 2f       	mov	r30, r16
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	ee 0f       	add	r30, r30
    24b4:	ff 1f       	adc	r31, r31
    24b6:	ee 0f       	add	r30, r30
    24b8:	ff 1f       	adc	r31, r31
    24ba:	e9 5b       	subi	r30, 0xB9	; 185
    24bc:	ff 4d       	sbci	r31, 0xDF	; 223
    24be:	20 83       	st	Z, r18
    24c0:	31 83       	std	Z+1, r19	; 0x01
    24c2:	42 83       	std	Z+2, r20	; 0x02
    24c4:	53 83       	std	Z+3, r21	; 0x03
    24c6:	5f c0       	rjmp	.+190    	; 0x2586 <gc_execute_block+0x45c>
			case 'P': gc.dwell_time = gc.value; break;
    24c8:	c0 92 3b 21 	sts	0x213B, r12
    24cc:	d0 92 3c 21 	sts	0x213C, r13
    24d0:	e0 92 3d 21 	sts	0x213D, r14
    24d4:	f0 92 3e 21 	sts	0x213E, r15
    24d8:	56 c0       	rjmp	.+172    	; 0x2586 <gc_execute_block+0x45c>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    24da:	20 93 3f 21 	sts	0x213F, r18
    24de:	30 93 40 21 	sts	0x2140, r19
    24e2:	40 93 41 21 	sts	0x2141, r20
    24e6:	50 93 42 21 	sts	0x2142, r21
    24ea:	70 92 39 21 	sts	0x2139, r7
    24ee:	4b c0       	rjmp	.+150    	; 0x2586 <gc_execute_block+0x45c>
			case 'S': gc.spindle_speed = gc.value; break;
    24f0:	c7 01       	movw	r24, r14
    24f2:	b6 01       	movw	r22, r12
    24f4:	0e 94 25 43 	call	0x864a	; 0x864a <__fixsfsi>
    24f8:	60 93 7c 21 	sts	0x217C, r22
    24fc:	70 93 7d 21 	sts	0x217D, r23
    2500:	42 c0       	rjmp	.+132    	; 0x2586 <gc_execute_block+0x45c>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2502:	80 91 3a 21 	lds	r24, 0x213A
    2506:	88 23       	and	r24, r24
    2508:	69 f0       	breq	.+26     	; 0x2524 <gc_execute_block+0x3fa>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    250a:	e0 2f       	mov	r30, r16
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	ee 0f       	add	r30, r30
    2510:	ff 1f       	adc	r31, r31
    2512:	ee 0f       	add	r30, r30
    2514:	ff 1f       	adc	r31, r31
    2516:	e6 53       	subi	r30, 0x36	; 54
    2518:	f0 4e       	sbci	r31, 0xE0	; 224
    251a:	21 a7       	std	Z+41, r18	; 0x29
    251c:	32 a7       	std	Z+42, r19	; 0x2a
    251e:	43 a7       	std	Z+43, r20	; 0x2b
    2520:	54 a7       	std	Z+44, r21	; 0x2c
    2522:	31 c0       	rjmp	.+98     	; 0x2586 <gc_execute_block+0x45c>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2524:	80 91 38 21 	lds	r24, 0x2138
    2528:	88 23       	and	r24, r24
    252a:	21 f4       	brne	.+8      	; 0x2534 <gc_execute_block+0x40a>
    252c:	80 91 7e 21 	lds	r24, 0x217E
    2530:	88 23       	and	r24, r24
    2532:	69 f0       	breq	.+26     	; 0x254e <gc_execute_block+0x424>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    2534:	e0 2f       	mov	r30, r16
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	ee 0f       	add	r30, r30
    253a:	ff 1f       	adc	r31, r31
    253c:	ee 0f       	add	r30, r30
    253e:	ff 1f       	adc	r31, r31
    2540:	e6 53       	subi	r30, 0x36	; 54
    2542:	f0 4e       	sbci	r31, 0xE0	; 224
    2544:	25 ab       	std	Z+53, r18	; 0x35
    2546:	36 ab       	std	Z+54, r19	; 0x36
    2548:	47 ab       	std	Z+55, r20	; 0x37
    254a:	50 af       	std	Z+56, r21	; 0x38
    254c:	1c c0       	rjmp	.+56     	; 0x2586 <gc_execute_block+0x45c>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    254e:	10 e0       	ldi	r17, 0x00	; 0
    2550:	00 0f       	add	r16, r16
    2552:	11 1f       	adc	r17, r17
    2554:	00 0f       	add	r16, r16
    2556:	11 1f       	adc	r17, r17
    2558:	06 53       	subi	r16, 0x36	; 54
    255a:	10 4e       	sbci	r17, 0xE0	; 224
    255c:	f8 01       	movw	r30, r16
    255e:	65 a9       	ldd	r22, Z+53	; 0x35
    2560:	76 a9       	ldd	r23, Z+54	; 0x36
    2562:	87 a9       	ldd	r24, Z+55	; 0x37
    2564:	90 ad       	ldd	r25, Z+56	; 0x38
    2566:	0e 94 17 42 	call	0x842e	; 0x842e <__addsf3>
    256a:	d8 01       	movw	r26, r16
    256c:	d5 96       	adiw	r26, 0x35	; 53
    256e:	6d 93       	st	X+, r22
    2570:	7d 93       	st	X+, r23
    2572:	8d 93       	st	X+, r24
    2574:	9c 93       	st	X, r25
    2576:	d8 97       	sbiw	r26, 0x38	; 56
    2578:	06 c0       	rjmp	.+12     	; 0x2586 <gc_execute_block+0x45c>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    257a:	5e 01       	movw	r10, r28
    257c:	08 94       	sec
    257e:	a1 1c       	adc	r10, r1
    2580:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    2582:	77 24       	eor	r7, r7
    2584:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2586:	8b e2       	ldi	r24, 0x2B	; 43
    2588:	91 e2       	ldi	r25, 0x21	; 33
    258a:	6c e2       	ldi	r22, 0x2C	; 44
    258c:	71 e2       	ldi	r23, 0x21	; 33
    258e:	40 e3       	ldi	r20, 0x30	; 48
    2590:	51 e2       	ldi	r21, 0x21	; 33
    2592:	94 01       	movw	r18, r8
    2594:	85 01       	movw	r16, r10
    2596:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <_gc_next_statement>
    259a:	89 2b       	or	r24, r25
    259c:	09 f0       	breq	.+2      	; 0x25a0 <gc_execute_block+0x476>
    259e:	27 cf       	rjmp	.-434    	; 0x23ee <gc_execute_block+0x2c4>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    25a0:	80 91 2a 21 	lds	r24, 0x212A
    25a4:	88 23       	and	r24, r24
    25a6:	09 f0       	breq	.+2      	; 0x25aa <gc_execute_block+0x480>
    25a8:	ad c2       	rjmp	.+1370   	; 0x2b04 <gc_execute_block+0x9da>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    25aa:	80 91 7b 21 	lds	r24, 0x217B
    25ae:	88 23       	and	r24, r24
    25b0:	71 f0       	breq	.+28     	; 0x25ce <gc_execute_block+0x4a4>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    25b2:	40 91 7c 21 	lds	r20, 0x217C
    25b6:	50 91 7d 21 	lds	r21, 0x217D
    25ba:	66 27       	eor	r22, r22
    25bc:	57 fd       	sbrc	r21, 7
    25be:	60 95       	com	r22
    25c0:	76 2f       	mov	r23, r22
    25c2:	99 27       	eor	r25, r25
    25c4:	87 fd       	sbrc	r24, 7
    25c6:	90 95       	com	r25
    25c8:	0e 94 a9 23 	call	0x4752	; 0x4752 <spindle_run>
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <gc_execute_block+0x4a8>
	} else {
		spindle_stop();
    25ce:	0e 94 b9 23 	call	0x4772	; 0x4772 <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    25d2:	80 91 7f 21 	lds	r24, 0x217F
    25d6:	81 30       	cpi	r24, 0x01	; 1
    25d8:	41 f0       	breq	.+16     	; 0x25ea <gc_execute_block+0x4c0>
    25da:	81 30       	cpi	r24, 0x01	; 1
    25dc:	c8 f0       	brcs	.+50     	; 0x2610 <gc_execute_block+0x4e6>
    25de:	82 30       	cpi	r24, 0x02	; 2
    25e0:	09 f0       	breq	.+2      	; 0x25e4 <gc_execute_block+0x4ba>
    25e2:	81 c2       	rjmp	.+1282   	; 0x2ae6 <gc_execute_block+0x9bc>
    	case NEXT_ACTION_GO_HOME: mc_go_home(); break;
    25e4:	0e 94 9a 1b 	call	0x3734	; 0x3734 <mc_go_home>
    25e8:	7e c2       	rjmp	.+1276   	; 0x2ae6 <gc_execute_block+0x9bc>
		case NEXT_ACTION_DWELL: mc_dwell(trunc(gc.dwell_time*1000)); break;
    25ea:	60 91 3b 21 	lds	r22, 0x213B
    25ee:	70 91 3c 21 	lds	r23, 0x213C
    25f2:	80 91 3d 21 	lds	r24, 0x213D
    25f6:	90 91 3e 21 	lds	r25, 0x213E
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	4a e7       	ldi	r20, 0x7A	; 122
    2600:	54 e4       	ldi	r21, 0x44	; 68
    2602:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    2606:	0e 94 2a 43 	call	0x8654	; 0x8654 <__fixunssfsi>
    260a:	0e 94 4b 1b 	call	0x3696	; 0x3696 <mc_dwell>
    260e:	6b c2       	rjmp	.+1238   	; 0x2ae6 <gc_execute_block+0x9bc>
		case NEXT_ACTION_DEFAULT: 
 		switch (gc.motion_mode) {
    2610:	b0 91 35 21 	lds	r27, 0x2135
    2614:	b8 8f       	std	Y+24, r27	; 0x18
    2616:	b2 30       	cpi	r27, 0x02	; 2
    2618:	20 f0       	brcs	.+8      	; 0x2622 <gc_execute_block+0x4f8>
    261a:	b4 30       	cpi	r27, 0x04	; 4
    261c:	08 f0       	brcs	.+2      	; 0x2620 <gc_execute_block+0x4f6>
    261e:	63 c2       	rjmp	.+1222   	; 0x2ae6 <gc_execute_block+0x9bc>
    2620:	31 c0       	rjmp	.+98     	; 0x2684 <gc_execute_block+0x55a>
			case MOTION_MODE_CANCEL: break;
			case MOTION_MODE_RAPID_LINEAR:
			case MOTION_MODE_LINEAR:
				gc.status = mc_line_nonblock(gc.target[X_AXIS], 
    2622:	60 91 5f 21 	lds	r22, 0x215F
    2626:	70 91 60 21 	lds	r23, 0x2160
    262a:	80 91 61 21 	lds	r24, 0x2161
    262e:	90 91 62 21 	lds	r25, 0x2162
    2632:	20 91 63 21 	lds	r18, 0x2163
    2636:	30 91 64 21 	lds	r19, 0x2164
    263a:	40 91 65 21 	lds	r20, 0x2165
    263e:	50 91 66 21 	lds	r21, 0x2166
    2642:	e0 90 67 21 	lds	r14, 0x2167
    2646:	f0 90 68 21 	lds	r15, 0x2168
    264a:	00 91 69 21 	lds	r16, 0x2169
    264e:	10 91 6a 21 	lds	r17, 0x216A
    2652:	80 90 36 21 	lds	r8, 0x2136
    2656:	88 20       	and	r8, r8
    2658:	49 f0       	breq	.+18     	; 0x266c <gc_execute_block+0x542>
    265a:	a0 90 4f 21 	lds	r10, 0x214F
    265e:	b0 90 50 21 	lds	r11, 0x2150
    2662:	c0 90 51 21 	lds	r12, 0x2151
    2666:	d0 90 52 21 	lds	r13, 0x2152
    266a:	08 c0       	rjmp	.+16     	; 0x267c <gc_execute_block+0x552>
    266c:	a0 90 43 21 	lds	r10, 0x2143
    2670:	b0 90 44 21 	lds	r11, 0x2144
    2674:	c0 90 45 21 	lds	r12, 0x2145
    2678:	d0 90 46 21 	lds	r13, 0x2146
    267c:	99 24       	eor	r9, r9
    267e:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <mc_line_nonblock>
    2682:	16 c1       	rjmp	.+556    	; 0x28b0 <gc_execute_block+0x786>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    2684:	80 91 39 21 	lds	r24, 0x2139
    2688:	88 23       	and	r24, r24
    268a:	09 f4       	brne	.+2      	; 0x268e <gc_execute_block+0x564>
    268c:	e8 c0       	rjmp	.+464    	; 0x285e <gc_execute_block+0x734>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    268e:	e0 91 77 21 	lds	r30, 0x2177
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	ee 0f       	add	r30, r30
    2696:	ff 1f       	adc	r31, r31
    2698:	ee 0f       	add	r30, r30
    269a:	ff 1f       	adc	r31, r31
    269c:	e6 5d       	subi	r30, 0xD6	; 214
    269e:	fe 4d       	sbci	r31, 0xDE	; 222
    26a0:	65 a9       	ldd	r22, Z+53	; 0x35
    26a2:	76 a9       	ldd	r23, Z+54	; 0x36
    26a4:	87 a9       	ldd	r24, Z+55	; 0x37
    26a6:	90 ad       	ldd	r25, Z+56	; 0x38
    26a8:	21 a5       	ldd	r18, Z+41	; 0x29
    26aa:	32 a5       	ldd	r19, Z+42	; 0x2a
    26ac:	43 a5       	ldd	r20, Z+43	; 0x2b
    26ae:	54 a5       	ldd	r21, Z+44	; 0x2c
    26b0:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    26b4:	6f 83       	std	Y+7, r22	; 0x07
    26b6:	78 87       	std	Y+8, r23	; 0x08
    26b8:	89 87       	std	Y+9, r24	; 0x09
    26ba:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    26bc:	e0 91 78 21 	lds	r30, 0x2178
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	ee 0f       	add	r30, r30
    26c4:	ff 1f       	adc	r31, r31
    26c6:	ee 0f       	add	r30, r30
    26c8:	ff 1f       	adc	r31, r31
    26ca:	e6 5d       	subi	r30, 0xD6	; 214
    26cc:	fe 4d       	sbci	r31, 0xDE	; 222
    26ce:	65 a9       	ldd	r22, Z+53	; 0x35
    26d0:	76 a9       	ldd	r23, Z+54	; 0x36
    26d2:	87 a9       	ldd	r24, Z+55	; 0x37
    26d4:	90 ad       	ldd	r25, Z+56	; 0x38
    26d6:	21 a5       	ldd	r18, Z+41	; 0x29
    26d8:	32 a5       	ldd	r19, Z+42	; 0x2a
    26da:	43 a5       	ldd	r20, Z+43	; 0x2b
    26dc:	54 a5       	ldd	r21, Z+44	; 0x2c
    26de:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    26e2:	1b 01       	movw	r2, r22
    26e4:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    26e6:	10 92 6b 21 	sts	0x216B, r1
    26ea:	10 92 6c 21 	sts	0x216C, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    26ee:	60 90 3f 21 	lds	r6, 0x213F
    26f2:	70 90 40 21 	lds	r7, 0x2140
    26f6:	80 90 41 21 	lds	r8, 0x2141
    26fa:	90 90 42 21 	lds	r9, 0x2142
    26fe:	c4 01       	movw	r24, r8
    2700:	b3 01       	movw	r22, r6
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e8       	ldi	r20, 0x80	; 128
    2708:	50 e4       	ldi	r21, 0x40	; 64
    270a:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    270e:	a4 01       	movw	r20, r8
    2710:	93 01       	movw	r18, r6
    2712:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    2716:	5b 01       	movw	r10, r22
    2718:	6c 01       	movw	r12, r24
    271a:	6f 81       	ldd	r22, Y+7	; 0x07
    271c:	78 85       	ldd	r23, Y+8	; 0x08
    271e:	89 85       	ldd	r24, Y+9	; 0x09
    2720:	9a 85       	ldd	r25, Y+10	; 0x0a
    2722:	9b 01       	movw	r18, r22
    2724:	ac 01       	movw	r20, r24
    2726:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    272a:	7b 01       	movw	r14, r22
    272c:	8c 01       	movw	r16, r24
    272e:	c2 01       	movw	r24, r4
    2730:	b1 01       	movw	r22, r2
    2732:	a2 01       	movw	r20, r4
    2734:	91 01       	movw	r18, r2
    2736:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    273a:	9b 01       	movw	r18, r22
    273c:	ac 01       	movw	r20, r24
    273e:	c8 01       	movw	r24, r16
    2740:	b7 01       	movw	r22, r14
    2742:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    2746:	9b 01       	movw	r18, r22
    2748:	ac 01       	movw	r20, r24
    274a:	c6 01       	movw	r24, r12
    274c:	b5 01       	movw	r22, r10
    274e:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    2752:	0e 94 e5 45 	call	0x8bca	; 0x8bca <sqrt>
    2756:	7b 01       	movw	r14, r22
    2758:	8c 01       	movw	r16, r24
    275a:	6f 81       	ldd	r22, Y+7	; 0x07
    275c:	78 85       	ldd	r23, Y+8	; 0x08
    275e:	89 85       	ldd	r24, Y+9	; 0x09
    2760:	9a 85       	ldd	r25, Y+10	; 0x0a
    2762:	a2 01       	movw	r20, r4
    2764:	91 01       	movw	r18, r2
    2766:	0e 94 b3 44 	call	0x8966	; 0x8966 <hypot>
    276a:	9b 01       	movw	r18, r22
    276c:	ac 01       	movw	r20, r24
    276e:	17 fb       	bst	r17, 7
    2770:	10 95       	com	r17
    2772:	17 f9       	bld	r17, 7
    2774:	10 95       	com	r17
    2776:	c8 01       	movw	r24, r16
    2778:	b7 01       	movw	r22, r14
    277a:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    277e:	7b 01       	movw	r14, r22
    2780:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    2782:	a8 01       	movw	r20, r16
    2784:	97 01       	movw	r18, r14
    2786:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__unordsf2>
    278a:	88 23       	and	r24, r24
    278c:	11 f0       	breq	.+4      	; 0x2792 <gc_execute_block+0x668>
		FAIL(TG_FLOATING_POINT_ERROR); 
    278e:	8d e0       	ldi	r24, 0x0D	; 13
    2790:	8f c0       	rjmp	.+286    	; 0x28b0 <gc_execute_block+0x786>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2792:	e8 8d       	ldd	r30, Y+24	; 0x18
    2794:	e3 30       	cpi	r30, 0x03	; 3
    2796:	21 f4       	brne	.+8      	; 0x27a0 <gc_execute_block+0x676>
		h_x2_div_d = -h_x2_div_d;
    2798:	17 fb       	bst	r17, 7
    279a:	10 95       	com	r17
    279c:	17 f9       	bld	r17, 7
    279e:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    27a0:	c4 01       	movw	r24, r8
    27a2:	b3 01       	movw	r22, r6
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e0       	ldi	r20, 0x00	; 0
    27aa:	50 e0       	ldi	r21, 0x00	; 0
    27ac:	0e 94 b6 42 	call	0x856c	; 0x856c <__cmpsf2>
    27b0:	88 23       	and	r24, r24
    27b2:	24 f4       	brge	.+8      	; 0x27bc <gc_execute_block+0x692>
		h_x2_div_d = -h_x2_div_d; 
    27b4:	17 fb       	bst	r17, 7
    27b6:	10 95       	com	r17
    27b8:	17 f9       	bld	r17, 7
    27ba:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    27bc:	80 91 77 21 	lds	r24, 0x2177
    27c0:	c8 2e       	mov	r12, r24
    27c2:	dd 24       	eor	r13, r13
    27c4:	cc 0c       	add	r12, r12
    27c6:	dd 1c       	adc	r13, r13
    27c8:	cc 0c       	add	r12, r12
    27ca:	dd 1c       	adc	r13, r13
    27cc:	2b e6       	ldi	r18, 0x6B	; 107
    27ce:	31 e2       	ldi	r19, 0x21	; 33
    27d0:	c2 0e       	add	r12, r18
    27d2:	d3 1e       	adc	r13, r19
    27d4:	c2 01       	movw	r24, r4
    27d6:	b1 01       	movw	r22, r2
    27d8:	a8 01       	movw	r20, r16
    27da:	97 01       	movw	r18, r14
    27dc:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    27e0:	9b 01       	movw	r18, r22
    27e2:	ac 01       	movw	r20, r24
    27e4:	6f 81       	ldd	r22, Y+7	; 0x07
    27e6:	78 85       	ldd	r23, Y+8	; 0x08
    27e8:	89 85       	ldd	r24, Y+9	; 0x09
    27ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ec:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e0       	ldi	r20, 0x00	; 0
    27f6:	5f e3       	ldi	r21, 0x3F	; 63
    27f8:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    27fc:	d6 01       	movw	r26, r12
    27fe:	6d 93       	st	X+, r22
    2800:	7d 93       	st	X+, r23
    2802:	8d 93       	st	X+, r24
    2804:	9c 93       	st	X, r25
    2806:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    2808:	80 91 78 21 	lds	r24, 0x2178
    280c:	c8 2e       	mov	r12, r24
    280e:	dd 24       	eor	r13, r13
    2810:	cc 0c       	add	r12, r12
    2812:	dd 1c       	adc	r13, r13
    2814:	cc 0c       	add	r12, r12
    2816:	dd 1c       	adc	r13, r13
    2818:	eb e6       	ldi	r30, 0x6B	; 107
    281a:	f1 e2       	ldi	r31, 0x21	; 33
    281c:	ce 0e       	add	r12, r30
    281e:	df 1e       	adc	r13, r31
    2820:	6f 81       	ldd	r22, Y+7	; 0x07
    2822:	78 85       	ldd	r23, Y+8	; 0x08
    2824:	89 85       	ldd	r24, Y+9	; 0x09
    2826:	9a 85       	ldd	r25, Y+10	; 0x0a
    2828:	a8 01       	movw	r20, r16
    282a:	97 01       	movw	r18, r14
    282c:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    2830:	9b 01       	movw	r18, r22
    2832:	ac 01       	movw	r20, r24
    2834:	c2 01       	movw	r24, r4
    2836:	b1 01       	movw	r22, r2
    2838:	0e 94 17 42 	call	0x842e	; 0x842e <__addsf3>
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e0       	ldi	r20, 0x00	; 0
    2842:	5f e3       	ldi	r21, 0x3F	; 63
    2844:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    2848:	d6 01       	movw	r26, r12
    284a:	6d 93       	st	X+, r22
    284c:	7d 93       	st	X+, r23
    284e:	8d 93       	st	X+, r24
    2850:	9c 93       	st	X, r25
    2852:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    2854:	80 91 2a 21 	lds	r24, 0x212A
    2858:	88 23       	and	r24, r24
    285a:	09 f0       	breq	.+2      	; 0x285e <gc_execute_block+0x734>
    285c:	44 c1       	rjmp	.+648    	; 0x2ae6 <gc_execute_block+0x9bc>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    285e:	e0 91 77 21 	lds	r30, 0x2177
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	ee 0f       	add	r30, r30
    2866:	ff 1f       	adc	r31, r31
    2868:	ee 0f       	add	r30, r30
    286a:	ff 1f       	adc	r31, r31
    286c:	e5 59       	subi	r30, 0x95	; 149
    286e:	fe 4d       	sbci	r31, 0xDE	; 222
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	90 58       	subi	r25, 0x80	; 128
    287a:	e0 91 78 21 	lds	r30, 0x2178
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	ee 0f       	add	r30, r30
    2882:	ff 1f       	adc	r31, r31
    2884:	ee 0f       	add	r30, r30
    2886:	ff 1f       	adc	r31, r31
    2888:	e5 59       	subi	r30, 0x95	; 149
    288a:	fe 4d       	sbci	r31, 0xDE	; 222
    288c:	20 81       	ld	r18, Z
    288e:	31 81       	ldd	r19, Z+1	; 0x01
    2890:	42 81       	ldd	r20, Z+2	; 0x02
    2892:	53 81       	ldd	r21, Z+3	; 0x03
    2894:	50 58       	subi	r21, 0x80	; 128
    2896:	0e 94 56 10 	call	0x20ac	; 0x20ac <theta>
    289a:	6f 87       	std	Y+15, r22	; 0x0f
    289c:	78 8b       	std	Y+16, r23	; 0x10
    289e:	89 8b       	std	Y+17, r24	; 0x11
    28a0:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    28a2:	9b 01       	movw	r18, r22
    28a4:	ac 01       	movw	r20, r24
    28a6:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__unordsf2>
    28aa:	88 23       	and	r24, r24
    28ac:	21 f0       	breq	.+8      	; 0x28b6 <gc_execute_block+0x78c>
		FAIL(TG_ARC_ERROR); 
    28ae:	8f e0       	ldi	r24, 0x0F	; 15
    28b0:	80 93 2a 21 	sts	0x212A, r24
    28b4:	18 c1       	rjmp	.+560    	; 0x2ae6 <gc_execute_block+0x9bc>
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    28b6:	e0 91 77 21 	lds	r30, 0x2177
    28ba:	0e 2f       	mov	r16, r30
    28bc:	10 e0       	ldi	r17, 0x00	; 0
    28be:	e0 91 78 21 	lds	r30, 0x2178
    28c2:	ce 2e       	mov	r12, r30
    28c4:	dd 24       	eor	r13, r13
    28c6:	00 0f       	add	r16, r16
    28c8:	11 1f       	adc	r17, r17
    28ca:	00 0f       	add	r16, r16
    28cc:	11 1f       	adc	r17, r17
    28ce:	06 5d       	subi	r16, 0xD6	; 214
    28d0:	1e 4d       	sbci	r17, 0xDE	; 222
    28d2:	f8 01       	movw	r30, r16
    28d4:	ef 5b       	subi	r30, 0xBF	; 191
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	d8 01       	movw	r26, r16
    28da:	d5 96       	adiw	r26, 0x35	; 53
    28dc:	6d 91       	ld	r22, X+
    28de:	7d 91       	ld	r23, X+
    28e0:	8d 91       	ld	r24, X+
    28e2:	9c 91       	ld	r25, X
    28e4:	d8 97       	sbiw	r26, 0x38	; 56
    28e6:	20 81       	ld	r18, Z
    28e8:	31 81       	ldd	r19, Z+1	; 0x01
    28ea:	42 81       	ldd	r20, Z+2	; 0x02
    28ec:	53 81       	ldd	r21, Z+3	; 0x03
    28ee:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    28f2:	f8 01       	movw	r30, r16
    28f4:	21 a5       	ldd	r18, Z+41	; 0x29
    28f6:	32 a5       	ldd	r19, Z+42	; 0x2a
    28f8:	43 a5       	ldd	r20, Z+43	; 0x2b
    28fa:	54 a5       	ldd	r21, Z+44	; 0x2c
    28fc:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    2900:	7b 01       	movw	r14, r22
    2902:	8c 01       	movw	r16, r24
    2904:	cc 0c       	add	r12, r12
    2906:	dd 1c       	adc	r13, r13
    2908:	cc 0c       	add	r12, r12
    290a:	dd 1c       	adc	r13, r13
    290c:	2a e2       	ldi	r18, 0x2A	; 42
    290e:	31 e2       	ldi	r19, 0x21	; 33
    2910:	c2 0e       	add	r12, r18
    2912:	d3 1e       	adc	r13, r19
    2914:	f6 01       	movw	r30, r12
    2916:	ef 5b       	subi	r30, 0xBF	; 191
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	d6 01       	movw	r26, r12
    291c:	d5 96       	adiw	r26, 0x35	; 53
    291e:	6d 91       	ld	r22, X+
    2920:	7d 91       	ld	r23, X+
    2922:	8d 91       	ld	r24, X+
    2924:	9c 91       	ld	r25, X
    2926:	d8 97       	sbiw	r26, 0x38	; 56
    2928:	20 81       	ld	r18, Z
    292a:	31 81       	ldd	r19, Z+1	; 0x01
    292c:	42 81       	ldd	r20, Z+2	; 0x02
    292e:	53 81       	ldd	r21, Z+3	; 0x03
    2930:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    2934:	f6 01       	movw	r30, r12
    2936:	21 a5       	ldd	r18, Z+41	; 0x29
    2938:	32 a5       	ldd	r19, Z+42	; 0x2a
    293a:	43 a5       	ldd	r20, Z+43	; 0x2b
    293c:	54 a5       	ldd	r21, Z+44	; 0x2c
    293e:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    2942:	9b 01       	movw	r18, r22
    2944:	ac 01       	movw	r20, r24
    2946:	c8 01       	movw	r24, r16
    2948:	b7 01       	movw	r22, r14
    294a:	0e 94 56 10 	call	0x20ac	; 0x20ac <theta>
    294e:	7b 01       	movw	r14, r22
    2950:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    2952:	a8 01       	movw	r20, r16
    2954:	97 01       	movw	r18, r14
    2956:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__unordsf2>
    295a:	88 23       	and	r24, r24
    295c:	09 f0       	breq	.+2      	; 0x2960 <gc_execute_block+0x836>
    295e:	a7 cf       	rjmp	.-178    	; 0x28ae <gc_execute_block+0x784>
		FAIL(TG_ARC_ERROR); 
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    2960:	c8 01       	movw	r24, r16
    2962:	b7 01       	movw	r22, r14
    2964:	2f 85       	ldd	r18, Y+15	; 0x0f
    2966:	38 89       	ldd	r19, Y+16	; 0x10
    2968:	49 89       	ldd	r20, Y+17	; 0x11
    296a:	5a 89       	ldd	r21, Y+18	; 0x12
    296c:	0e 94 b6 42 	call	0x856c	; 0x856c <__cmpsf2>
    2970:	88 23       	and	r24, r24
    2972:	54 f4       	brge	.+20     	; 0x2988 <gc_execute_block+0x85e>
		theta_end += 2*M_PI;
    2974:	c8 01       	movw	r24, r16
    2976:	b7 01       	movw	r22, r14
    2978:	2b ed       	ldi	r18, 0xDB	; 219
    297a:	3f e0       	ldi	r19, 0x0F	; 15
    297c:	49 ec       	ldi	r20, 0xC9	; 201
    297e:	50 e4       	ldi	r21, 0x40	; 64
    2980:	0e 94 17 42 	call	0x842e	; 0x842e <__addsf3>
    2984:	7b 01       	movw	r14, r22
    2986:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    2988:	c8 01       	movw	r24, r16
    298a:	b7 01       	movw	r22, r14
    298c:	2f 85       	ldd	r18, Y+15	; 0x0f
    298e:	38 89       	ldd	r19, Y+16	; 0x10
    2990:	49 89       	ldd	r20, Y+17	; 0x11
    2992:	5a 89       	ldd	r21, Y+18	; 0x12
    2994:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    2998:	6b 87       	std	Y+11, r22	; 0x0b
    299a:	7c 87       	std	Y+12, r23	; 0x0c
    299c:	8d 87       	std	Y+13, r24	; 0x0d
    299e:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    29a0:	80 91 35 21 	lds	r24, 0x2135
    29a4:	83 30       	cpi	r24, 0x03	; 3
    29a6:	71 f4       	brne	.+28     	; 0x29c4 <gc_execute_block+0x89a>
		angular_travel = angular_travel - 2*M_PI;
    29a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b0:	2b ed       	ldi	r18, 0xDB	; 219
    29b2:	3f e0       	ldi	r19, 0x0F	; 15
    29b4:	49 ec       	ldi	r20, 0xC9	; 201
    29b6:	50 e4       	ldi	r21, 0x40	; 64
    29b8:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    29bc:	6b 87       	std	Y+11, r22	; 0x0b
    29be:	7c 87       	std	Y+12, r23	; 0x0c
    29c0:	8d 87       	std	Y+13, r24	; 0x0d
    29c2:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    29c4:	80 91 77 21 	lds	r24, 0x2177
    29c8:	28 2f       	mov	r18, r24
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	2d 83       	std	Y+5, r18	; 0x05
    29ce:	3e 83       	std	Y+6, r19	; 0x06
    29d0:	f9 01       	movw	r30, r18
    29d2:	ee 0f       	add	r30, r30
    29d4:	ff 1f       	adc	r31, r31
    29d6:	ee 0f       	add	r30, r30
    29d8:	ff 1f       	adc	r31, r31
    29da:	e5 59       	subi	r30, 0x95	; 149
    29dc:	fe 4d       	sbci	r31, 0xDE	; 222
    29de:	e0 80       	ld	r14, Z
    29e0:	f1 80       	ldd	r15, Z+1	; 0x01
    29e2:	02 81       	ldd	r16, Z+2	; 0x02
    29e4:	13 81       	ldd	r17, Z+3	; 0x03
    29e6:	80 91 78 21 	lds	r24, 0x2178
    29ea:	a8 2f       	mov	r26, r24
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	ab 83       	std	Y+3, r26	; 0x03
    29f0:	bc 83       	std	Y+4, r27	; 0x04
    29f2:	fd 01       	movw	r30, r26
    29f4:	ee 0f       	add	r30, r30
    29f6:	ff 1f       	adc	r31, r31
    29f8:	ee 0f       	add	r30, r30
    29fa:	ff 1f       	adc	r31, r31
    29fc:	e5 59       	subi	r30, 0x95	; 149
    29fe:	fe 4d       	sbci	r31, 0xDE	; 222
    2a00:	20 81       	ld	r18, Z
    2a02:	31 81       	ldd	r19, Z+1	; 0x01
    2a04:	42 81       	ldd	r20, Z+2	; 0x02
    2a06:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2a08:	80 91 79 21 	lds	r24, 0x2179
    2a0c:	28 2e       	mov	r2, r24
    2a0e:	33 24       	eor	r3, r3
    2a10:	f1 01       	movw	r30, r2
    2a12:	ee 0f       	add	r30, r30
    2a14:	ff 1f       	adc	r31, r31
    2a16:	ee 0f       	add	r30, r30
    2a18:	ff 1f       	adc	r31, r31
    2a1a:	e6 5d       	subi	r30, 0xD6	; 214
    2a1c:	fe 4d       	sbci	r31, 0xDE	; 222
    2a1e:	85 a9       	ldd	r24, Z+53	; 0x35
    2a20:	96 a9       	ldd	r25, Z+54	; 0x36
    2a22:	a7 a9       	ldd	r26, Z+55	; 0x37
    2a24:	b0 ad       	ldd	r27, Z+56	; 0x38
    2a26:	8c 8b       	std	Y+20, r24	; 0x14
    2a28:	9d 8b       	std	Y+21, r25	; 0x15
    2a2a:	ae 8b       	std	Y+22, r26	; 0x16
    2a2c:	bf 8b       	std	Y+23, r27	; 0x17
    2a2e:	a1 a4       	ldd	r10, Z+41	; 0x29
    2a30:	b2 a4       	ldd	r11, Z+42	; 0x2a
    2a32:	c3 a4       	ldd	r12, Z+43	; 0x2b
    2a34:	d4 a4       	ldd	r13, Z+44	; 0x2c

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    2a36:	90 91 36 21 	lds	r25, 0x2136
    2a3a:	9b 8b       	std	Y+19, r25	; 0x13
    2a3c:	99 23       	and	r25, r25
    2a3e:	49 f0       	breq	.+18     	; 0x2a52 <gc_execute_block+0x928>
    2a40:	40 90 4f 21 	lds	r4, 0x214F
    2a44:	50 90 50 21 	lds	r5, 0x2150
    2a48:	60 90 51 21 	lds	r6, 0x2151
    2a4c:	70 90 52 21 	lds	r7, 0x2152
    2a50:	08 c0       	rjmp	.+16     	; 0x2a62 <gc_execute_block+0x938>
    2a52:	40 90 43 21 	lds	r4, 0x2143
    2a56:	50 90 44 21 	lds	r5, 0x2144
    2a5a:	60 90 45 21 	lds	r6, 0x2145
    2a5e:	70 90 46 21 	lds	r7, 0x2146
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2a62:	c8 01       	movw	r24, r16
    2a64:	b7 01       	movw	r22, r14
    2a66:	0e 94 b3 44 	call	0x8966	; 0x8966 <hypot>
    2a6a:	7b 01       	movw	r14, r22
    2a6c:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    2a6e:	ad b7       	in	r26, 0x3d	; 61
    2a70:	be b7       	in	r27, 0x3e	; 62
    2a72:	1a 97       	sbiw	r26, 0x0a	; 10
    2a74:	ad bf       	out	0x3d, r26	; 61
    2a76:	be bf       	out	0x3e, r27	; 62
    2a78:	8d b6       	in	r8, 0x3d	; 61
    2a7a:	9e b6       	in	r9, 0x3e	; 62
    2a7c:	08 94       	sec
    2a7e:	81 1c       	adc	r8, r1
    2a80:	91 1c       	adc	r9, r1
    2a82:	6c 89       	ldd	r22, Y+20	; 0x14
    2a84:	7d 89       	ldd	r23, Y+21	; 0x15
    2a86:	8e 89       	ldd	r24, Y+22	; 0x16
    2a88:	9f 89       	ldd	r25, Y+23	; 0x17
    2a8a:	a6 01       	movw	r20, r12
    2a8c:	95 01       	movw	r18, r10
    2a8e:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    2a92:	5b 01       	movw	r10, r22
    2a94:	6c 01       	movw	r12, r24
    2a96:	2b 81       	ldd	r18, Y+3	; 0x03
    2a98:	3c 81       	ldd	r19, Y+4	; 0x04
    2a9a:	f4 01       	movw	r30, r8
    2a9c:	20 83       	st	Z, r18
    2a9e:	31 83       	std	Z+1, r19	; 0x01
    2aa0:	22 82       	std	Z+2, r2	; 0x02
    2aa2:	33 82       	std	Z+3, r3	; 0x03
    2aa4:	d4 01       	movw	r26, r8
    2aa6:	14 96       	adiw	r26, 0x04	; 4
    2aa8:	4d 92       	st	X+, r4
    2aaa:	5d 92       	st	X+, r5
    2aac:	6d 92       	st	X+, r6
    2aae:	7c 92       	st	X, r7
    2ab0:	17 97       	sbiw	r26, 0x07	; 7
    2ab2:	eb 89       	ldd	r30, Y+19	; 0x13
    2ab4:	18 96       	adiw	r26, 0x08	; 8
    2ab6:	ec 93       	st	X, r30
    2ab8:	18 97       	sbiw	r26, 0x08	; 8
    2aba:	19 96       	adiw	r26, 0x09	; 9
    2abc:	1c 92       	st	X, r1
    2abe:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ac0:	78 89       	ldd	r23, Y+16	; 0x10
    2ac2:	89 89       	ldd	r24, Y+17	; 0x11
    2ac4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ac6:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ac8:	3c 85       	ldd	r19, Y+12	; 0x0c
    2aca:	4d 85       	ldd	r20, Y+13	; 0x0d
    2acc:	5e 85       	ldd	r21, Y+14	; 0x0e
    2ace:	8d 80       	ldd	r8, Y+5	; 0x05
    2ad0:	9e 80       	ldd	r9, Y+6	; 0x06
    2ad2:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <mc_arc_nonblock>
    2ad6:	80 93 2a 21 	sts	0x212A, r24
    2ada:	2d b7       	in	r18, 0x3d	; 61
    2adc:	3e b7       	in	r19, 0x3e	; 62
    2ade:	26 5f       	subi	r18, 0xF6	; 246
    2ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae2:	2d bf       	out	0x3d, r18	; 61
    2ae4:	3e bf       	out	0x3e, r19	; 62
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_CONTINUE)) {
    2ae6:	80 91 2a 21 	lds	r24, 0x212A
    2aea:	88 23       	and	r24, r24
    2aec:	11 f0       	breq	.+4      	; 0x2af2 <gc_execute_block+0x9c8>
    2aee:	82 30       	cpi	r24, 0x02	; 2
    2af0:	49 f4       	brne	.+18     	; 0x2b04 <gc_execute_block+0x9da>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2af2:	e3 e5       	ldi	r30, 0x53	; 83
    2af4:	f1 e2       	ldi	r31, 0x21	; 33
    2af6:	df 01       	movw	r26, r30
    2af8:	1c 96       	adiw	r26, 0x0c	; 12
    2afa:	9c e0       	ldi	r25, 0x0C	; 12
    2afc:	0d 90       	ld	r0, X+
    2afe:	01 92       	st	Z+, r0
    2b00:	91 50       	subi	r25, 0x01	; 1
    2b02:	e1 f7       	brne	.-8      	; 0x2afc <gc_execute_block+0x9d2>
	};
	return(gc.status);
}
    2b04:	68 96       	adiw	r28, 0x18	; 24
    2b06:	cd bf       	out	0x3d, r28	; 61
    2b08:	de bf       	out	0x3e, r29	; 62
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	ff 90       	pop	r15
    2b14:	ef 90       	pop	r14
    2b16:	df 90       	pop	r13
    2b18:	cf 90       	pop	r12
    2b1a:	bf 90       	pop	r11
    2b1c:	af 90       	pop	r10
    2b1e:	9f 90       	pop	r9
    2b20:	8f 90       	pop	r8
    2b22:	7f 90       	pop	r7
    2b24:	6f 90       	pop	r6
    2b26:	5f 90       	pop	r5
    2b28:	4f 90       	pop	r4
    2b2a:	3f 90       	pop	r3
    2b2c:	2f 90       	pop	r2
    2b2e:	08 95       	ret

00002b30 <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2b30:	cf 93       	push	r28
    2b32:	df 93       	push	r29
    2b34:	ec 01       	movw	r28, r24
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	10 c0       	rjmp	.+32     	; 0x2b5c <gc_gcode_parser+0x2c>
	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    2b3c:	e1 32       	cpi	r30, 0x21	; 33
    2b3e:	70 f0       	brcs	.+28     	; 0x2b5c <gc_gcode_parser+0x2c>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    2b40:	8e 2f       	mov	r24, r30
    2b42:	81 56       	subi	r24, 0x61	; 97
    2b44:	a9 2f       	mov	r26, r25
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	9f 5f       	subi	r25, 0xFF	; 255
    2b4a:	8a 31       	cpi	r24, 0x1A	; 26
    2b4c:	20 f4       	brcc	.+8      	; 0x2b56 <gc_gcode_parser+0x26>
			block[j++] = c-'a'+'A';
    2b4e:	ac 0f       	add	r26, r28
    2b50:	bd 1f       	adc	r27, r29
    2b52:	e0 52       	subi	r30, 0x20	; 32
    2b54:	02 c0       	rjmp	.+4      	; 0x2b5a <gc_gcode_parser+0x2a>
		} else {
			block[j++] = c;
    2b56:	ac 0f       	add	r26, r28
    2b58:	bd 1f       	adc	r27, r29
    2b5a:	ec 93       	st	X, r30

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e2 0f       	add	r30, r18
    2b60:	f1 1d       	adc	r31, r1
    2b62:	e0 81       	ld	r30, Z
    2b64:	2f 5f       	subi	r18, 0xFF	; 255
    2b66:	ee 23       	and	r30, r30
    2b68:	49 f7       	brne	.-46     	; 0x2b3c <gc_gcode_parser+0xc>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e9 0f       	add	r30, r25
    2b6e:	f1 1d       	adc	r31, r1
    2b70:	10 82       	st	Z, r1
{
	_gc_normalize_gcode_block(block);
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    2b72:	88 81       	ld	r24, Y
    2b74:	88 32       	cpi	r24, 0x28	; 40
    2b76:	61 f0       	breq	.+24     	; 0x2b90 <gc_gcode_parser+0x60>
		return(TG_OK);
	}
	if (block[0] == 'Q') { 					// quit
    2b78:	81 35       	cpi	r24, 0x51	; 81
    2b7a:	11 f4       	brne	.+4      	; 0x2b80 <gc_gcode_parser+0x50>
    2b7c:	83 e0       	ldi	r24, 0x03	; 3
    2b7e:	09 c0       	rjmp	.+18     	; 0x2b92 <gc_gcode_parser+0x62>
		return(TG_QUIT);
	} 
	if (block[0] == '/') { 					// ignore block delete
    2b80:	8f 32       	cpi	r24, 0x2F	; 47
    2b82:	31 f0       	breq	.+12     	; 0x2b90 <gc_gcode_parser+0x60>
		return(TG_OK);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2b84:	ce 01       	movw	r24, r28
    2b86:	0e 94 95 10 	call	0x212a	; 0x212a <gc_execute_block>
    2b8a:	80 93 2a 21 	sts	0x212A, r24
    2b8e:	01 c0       	rjmp	.+2      	; 0x2b92 <gc_gcode_parser+0x62>
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    2b90:	80 e0       	ldi	r24, 0x00	; 0
}
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	08 95       	ret

00002b98 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2b98:	cf 92       	push	r12
    2b9a:	df 92       	push	r13
    2b9c:	ef 92       	push	r14
    2b9e:	ff 92       	push	r15
    2ba0:	0f 93       	push	r16
    2ba2:	1f 93       	push	r17
    2ba4:	cf 93       	push	r28
    2ba6:	df 93       	push	r29
    2ba8:	c9 e9       	ldi	r28, 0x99	; 153
    2baa:	d4 e2       	ldi	r29, 0x24	; 36
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (int i = X_AXIS; i <= A_AXIS; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2bac:	68 81       	ld	r22, Y
    2bae:	70 e0       	ldi	r23, 0x00	; 0
    2bb0:	88 27       	eor	r24, r24
    2bb2:	77 fd       	sbrc	r23, 7
    2bb4:	80 95       	com	r24
    2bb6:	98 2f       	mov	r25, r24
    2bb8:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    2bbc:	9b 01       	movw	r18, r22
    2bbe:	ac 01       	movw	r20, r24
    2bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc2:	78 85       	ldd	r23, Y+8	; 0x08
    2bc4:	89 85       	ldd	r24, Y+9	; 0x09
    2bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc8:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    2bcc:	9b 01       	movw	r18, r22
    2bce:	ac 01       	movw	r20, r24
    2bd0:	60 e0       	ldi	r22, 0x00	; 0
    2bd2:	70 e0       	ldi	r23, 0x00	; 0
    2bd4:	84 eb       	ldi	r24, 0xB4	; 180
    2bd6:	93 e4       	ldi	r25, 0x43	; 67
    2bd8:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    2bdc:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bde:	3c 85       	ldd	r19, Y+12	; 0x0c
    2be0:	4d 85       	ldd	r20, Y+13	; 0x0d
    2be2:	5e 85       	ldd	r21, Y+14	; 0x0e
    2be4:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    2be8:	6b 8b       	std	Y+19, r22	; 0x13
    2bea:	7c 8b       	std	Y+20, r23	; 0x14
    2bec:	8d 8b       	std	Y+21, r24	; 0x15
    2bee:	9e 8b       	std	Y+22, r25	; 0x16
    2bf0:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (int i = X_AXIS; i <= A_AXIS; i++) {
    2bf2:	84 e2       	ldi	r24, 0x24	; 36
    2bf4:	c9 3f       	cpi	r28, 0xF9	; 249
    2bf6:	d8 07       	cpc	r29, r24
    2bf8:	c9 f6       	brne	.-78     	; 0x2bac <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X_AXIS].feed_steps_sec * 
    2bfa:	00 91 99 24 	lds	r16, 0x2499
    2bfe:	10 e0       	ldi	r17, 0x00	; 0
    2c00:	b8 01       	movw	r22, r16
    2c02:	88 27       	eor	r24, r24
    2c04:	77 fd       	sbrc	r23, 7
    2c06:	80 95       	com	r24
    2c08:	98 2f       	mov	r25, r24
    2c0a:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    2c0e:	9b 01       	movw	r18, r22
    2c10:	ac 01       	movw	r20, r24
    2c12:	60 91 a0 24 	lds	r22, 0x24A0
    2c16:	70 91 a1 24 	lds	r23, 0x24A1
    2c1a:	80 91 a2 24 	lds	r24, 0x24A2
    2c1e:	90 91 a3 24 	lds	r25, 0x24A3
    2c22:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    2c26:	9b 01       	movw	r18, r22
    2c28:	ac 01       	movw	r20, r24
    2c2a:	60 e0       	ldi	r22, 0x00	; 0
    2c2c:	70 e0       	ldi	r23, 0x00	; 0
    2c2e:	84 eb       	ldi	r24, 0xB4	; 180
    2c30:	93 e4       	ldi	r25, 0x43	; 67
    2c32:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    2c36:	6b 01       	movw	r12, r22
    2c38:	7c 01       	movw	r14, r24
    2c3a:	80 91 9e 24 	lds	r24, 0x249E
    2c3e:	90 91 9f 24 	lds	r25, 0x249F
    2c42:	08 9f       	mul	r16, r24
    2c44:	b0 01       	movw	r22, r0
    2c46:	09 9f       	mul	r16, r25
    2c48:	70 0d       	add	r23, r0
    2c4a:	18 9f       	mul	r17, r24
    2c4c:	70 0d       	add	r23, r0
    2c4e:	11 24       	eor	r1, r1
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	0e 94 56 43 	call	0x86ac	; 0x86ac <__floatunsisf>
    2c58:	a7 01       	movw	r20, r14
    2c5a:	96 01       	movw	r18, r12
    2c5c:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    2c60:	60 93 91 24 	sts	0x2491, r22
    2c64:	70 93 92 24 	sts	0x2492, r23
    2c68:	80 93 93 24 	sts	0x2493, r24
    2c6c:	90 93 94 24 	sts	0x2494, r25
							  cfg.a[X_AXIS].microstep) / 
							 (360/(cfg.a[X_AXIS].degree_per_step / 
							 	   cfg.a[X_AXIS].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X_AXIS].seek_steps_sec * 
    2c70:	80 91 9c 24 	lds	r24, 0x249C
    2c74:	90 91 9d 24 	lds	r25, 0x249D
    2c78:	08 9f       	mul	r16, r24
    2c7a:	b0 01       	movw	r22, r0
    2c7c:	09 9f       	mul	r16, r25
    2c7e:	70 0d       	add	r23, r0
    2c80:	18 9f       	mul	r17, r24
    2c82:	70 0d       	add	r23, r0
    2c84:	11 24       	eor	r1, r1
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	0e 94 56 43 	call	0x86ac	; 0x86ac <__floatunsisf>
    2c8e:	a7 01       	movw	r20, r14
    2c90:	96 01       	movw	r18, r12
    2c92:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    2c96:	60 93 95 24 	sts	0x2495, r22
    2c9a:	70 93 96 24 	sts	0x2496, r23
    2c9e:	80 93 97 24 	sts	0x2497, r24
    2ca2:	90 93 98 24 	sts	0x2498, r25
							  cfg.a[X_AXIS].microstep) / 
							 (360/(cfg.a[X_AXIS].degree_per_step / 
							 	   cfg.a[X_AXIS].microstep));
}
    2ca6:	df 91       	pop	r29
    2ca8:	cf 91       	pop	r28
    2caa:	1f 91       	pop	r17
    2cac:	0f 91       	pop	r16
    2cae:	ff 90       	pop	r15
    2cb0:	ef 90       	pop	r14
    2cb2:	df 90       	pop	r13
    2cb4:	cf 90       	pop	r12
    2cb6:	08 95       	ret

00002cb8 <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    2cb8:	eb e8       	ldi	r30, 0x8B	; 139
    2cba:	f4 e2       	ldi	r31, 0x24	; 36
    2cbc:	84 e6       	ldi	r24, 0x64	; 100
    2cbe:	80 93 8b 24 	sts	0x248B, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2cc2:	8a e0       	ldi	r24, 0x0A	; 10
    2cc4:	97 ed       	ldi	r25, 0xD7	; 215
    2cc6:	a3 e2       	ldi	r26, 0x23	; 35
    2cc8:	bc e3       	ldi	r27, 0x3C	; 60
    2cca:	80 93 8d 24 	sts	0x248D, r24
    2cce:	90 93 8e 24 	sts	0x248E, r25
    2cd2:	a0 93 8f 24 	sts	0x248F, r26
    2cd6:	b0 93 90 24 	sts	0x2490, r27

	cfg.a[X_AXIS].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2cda:	8c ed       	ldi	r24, 0xDC	; 220
    2cdc:	95 e0       	ldi	r25, 0x05	; 5
    2cde:	80 93 9c 24 	sts	0x249C, r24
    2ce2:	90 93 9d 24 	sts	0x249D, r25
	cfg.a[Y_AXIS].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2ce6:	80 93 b4 24 	sts	0x24B4, r24
    2cea:	90 93 b5 24 	sts	0x24B5, r25
	cfg.a[Z_AXIS].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2cee:	80 93 cc 24 	sts	0x24CC, r24
    2cf2:	90 93 cd 24 	sts	0x24CD, r25
	cfg.a[A_AXIS].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2cf6:	80 93 e4 24 	sts	0x24E4, r24
    2cfa:	90 93 e5 24 	sts	0x24E5, r25

	cfg.a[X_AXIS].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2cfe:	80 93 9e 24 	sts	0x249E, r24
    2d02:	90 93 9f 24 	sts	0x249F, r25
	cfg.a[Y_AXIS].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2d06:	80 93 b6 24 	sts	0x24B6, r24
    2d0a:	90 93 b7 24 	sts	0x24B7, r25
	cfg.a[Z_AXIS].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2d0e:	80 93 ce 24 	sts	0x24CE, r24
    2d12:	90 93 cf 24 	sts	0x24CF, r25
	cfg.a[A_AXIS].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2d16:	80 93 e6 24 	sts	0x24E6, r24
    2d1a:	90 93 e7 24 	sts	0x24E7, r25

	cfg.a[X_AXIS].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2d1e:	86 e6       	ldi	r24, 0x66	; 102
    2d20:	96 e6       	ldi	r25, 0x66	; 102
    2d22:	a6 ee       	ldi	r26, 0xE6	; 230
    2d24:	bf e3       	ldi	r27, 0x3F	; 63
    2d26:	80 93 a0 24 	sts	0x24A0, r24
    2d2a:	90 93 a1 24 	sts	0x24A1, r25
    2d2e:	a0 93 a2 24 	sts	0x24A2, r26
    2d32:	b0 93 a3 24 	sts	0x24A3, r27
	cfg.a[Y_AXIS].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2d36:	80 93 b8 24 	sts	0x24B8, r24
    2d3a:	90 93 b9 24 	sts	0x24B9, r25
    2d3e:	a0 93 ba 24 	sts	0x24BA, r26
    2d42:	b0 93 bb 24 	sts	0x24BB, r27
	cfg.a[Z_AXIS].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2d46:	80 93 d0 24 	sts	0x24D0, r24
    2d4a:	90 93 d1 24 	sts	0x24D1, r25
    2d4e:	a0 93 d2 24 	sts	0x24D2, r26
    2d52:	b0 93 d3 24 	sts	0x24D3, r27
	cfg.a[A_AXIS].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2d56:	80 93 e8 24 	sts	0x24E8, r24
    2d5a:	90 93 e9 24 	sts	0x24E9, r25
    2d5e:	a0 93 ea 24 	sts	0x24EA, r26
    2d62:	b0 93 eb 24 	sts	0x24EB, r27

	cfg.a[X_AXIS].mm_per_rev = X_MM_PER_REVOLUTION;
    2d66:	8c e5       	ldi	r24, 0x5C	; 92
    2d68:	9f e8       	ldi	r25, 0x8F	; 143
    2d6a:	a2 ea       	ldi	r26, 0xA2	; 162
    2d6c:	bf e3       	ldi	r27, 0x3F	; 63
    2d6e:	80 93 a4 24 	sts	0x24A4, r24
    2d72:	90 93 a5 24 	sts	0x24A5, r25
    2d76:	a0 93 a6 24 	sts	0x24A6, r26
    2d7a:	b0 93 a7 24 	sts	0x24A7, r27
	cfg.a[Y_AXIS].mm_per_rev = Y_MM_PER_REVOLUTION;
    2d7e:	80 93 bc 24 	sts	0x24BC, r24
    2d82:	90 93 bd 24 	sts	0x24BD, r25
    2d86:	a0 93 be 24 	sts	0x24BE, r26
    2d8a:	b0 93 bf 24 	sts	0x24BF, r27
	cfg.a[Z_AXIS].mm_per_rev = Z_MM_PER_REVOLUTION;
    2d8e:	80 93 d4 24 	sts	0x24D4, r24
    2d92:	90 93 d5 24 	sts	0x24D5, r25
    2d96:	a0 93 d6 24 	sts	0x24D6, r26
    2d9a:	b0 93 d7 24 	sts	0x24D7, r27
	cfg.a[A_AXIS].mm_per_rev = A_MM_PER_REVOLUTION;
    2d9e:	80 93 ec 24 	sts	0x24EC, r24
    2da2:	90 93 ed 24 	sts	0x24ED, r25
    2da6:	a0 93 ee 24 	sts	0x24EE, r26
    2daa:	b0 93 ef 24 	sts	0x24EF, r27
	
	cfg.a[X_AXIS].mm_travel = X_MM_TRAVEL;
    2dae:	80 e0       	ldi	r24, 0x00	; 0
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	a8 ec       	ldi	r26, 0xC8	; 200
    2db4:	b3 e4       	ldi	r27, 0x43	; 67
    2db6:	80 93 a8 24 	sts	0x24A8, r24
    2dba:	90 93 a9 24 	sts	0x24A9, r25
    2dbe:	a0 93 aa 24 	sts	0x24AA, r26
    2dc2:	b0 93 ab 24 	sts	0x24AB, r27
	cfg.a[Y_AXIS].mm_travel = Y_MM_TRAVEL;
    2dc6:	80 93 c0 24 	sts	0x24C0, r24
    2dca:	90 93 c1 24 	sts	0x24C1, r25
    2dce:	a0 93 c2 24 	sts	0x24C2, r26
    2dd2:	b0 93 c3 24 	sts	0x24C3, r27
	cfg.a[Z_AXIS].mm_travel = Z_MM_TRAVEL;
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	a6 e9       	ldi	r26, 0x96	; 150
    2ddc:	b3 e4       	ldi	r27, 0x43	; 67
    2dde:	80 93 d8 24 	sts	0x24D8, r24
    2de2:	90 93 d9 24 	sts	0x24D9, r25
    2de6:	a0 93 da 24 	sts	0x24DA, r26
    2dea:	b0 93 db 24 	sts	0x24DB, r27
	cfg.a[A_AXIS].mm_travel = A_MM_TRAVEL;
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	a0 e8       	ldi	r26, 0x80	; 128
    2df4:	bf eb       	ldi	r27, 0xBF	; 191
    2df6:	80 93 f0 24 	sts	0x24F0, r24
    2dfa:	90 93 f1 24 	sts	0x24F1, r25
    2dfe:	a0 93 f2 24 	sts	0x24F2, r26
    2e02:	b0 93 f3 24 	sts	0x24F3, r27
	
	cfg.a[X_AXIS].microstep = X_MICROSTEPS;
    2e06:	88 e0       	ldi	r24, 0x08	; 8
    2e08:	80 93 99 24 	sts	0x2499, r24
	cfg.a[Y_AXIS].microstep = Y_MICROSTEPS;
    2e0c:	80 93 b1 24 	sts	0x24B1, r24
	cfg.a[Z_AXIS].microstep = Z_MICROSTEPS;
    2e10:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A_AXIS].microstep = A_MICROSTEPS;
    2e12:	80 93 e1 24 	sts	0x24E1, r24

	cfg.a[X_AXIS].polarity = X_POLARITY;
    2e16:	10 92 9b 24 	sts	0x249B, r1
	cfg.a[Y_AXIS].polarity = Y_POLARITY;
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	80 93 b3 24 	sts	0x24B3, r24
	cfg.a[Z_AXIS].polarity = Z_POLARITY;
    2e20:	10 92 cb 24 	sts	0x24CB, r1
	cfg.a[A_AXIS].polarity = A_POLARITY;
    2e24:	10 92 e3 24 	sts	0x24E3, r1

	cfg.a[X_AXIS].limit_enable = X_LIMIT_ENABLE;
    2e28:	80 93 b0 24 	sts	0x24B0, r24
	cfg.a[Y_AXIS].limit_enable = Y_LIMIT_ENABLE;
    2e2c:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z_AXIS].limit_enable = Z_LIMIT_ENABLE;
    2e2e:	80 93 e0 24 	sts	0x24E0, r24
	cfg.a[A_AXIS].limit_enable = A_LIMIT_ENABLE;
    2e32:	10 92 f8 24 	sts	0x24F8, r1

	cfg.a[X_AXIS].low_pwr_idle = X_LOW_POWER_IDLE;
    2e36:	80 93 9a 24 	sts	0x249A, r24
	cfg.a[Y_AXIS].low_pwr_idle = Y_LOW_POWER_IDLE;
    2e3a:	80 93 b2 24 	sts	0x24B2, r24
	cfg.a[Z_AXIS].low_pwr_idle = Z_LOW_POWER_IDLE;
    2e3e:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A_AXIS].low_pwr_idle = A_LOW_POWER_IDLE;
    2e40:	80 93 e2 24 	sts	0x24E2, r24

	_cfg_computed();		// generate computed values from the above
    2e44:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <_cfg_computed>
}
    2e48:	08 95       	ret

00002e4a <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2e4a:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <cfg_reset>
}
    2e4e:	08 95       	ret

00002e50 <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2e50:	87 30       	cpi	r24, 0x07	; 7
    2e52:	31 f1       	breq	.+76     	; 0x2ea0 <_cfg_print_status+0x50>
    2e54:	88 30       	cpi	r24, 0x08	; 8
    2e56:	30 f4       	brcc	.+12     	; 0x2e64 <_cfg_print_status+0x14>
    2e58:	82 30       	cpi	r24, 0x02	; 2
    2e5a:	59 f0       	breq	.+22     	; 0x2e72 <_cfg_print_status+0x22>
    2e5c:	83 30       	cpi	r24, 0x03	; 3
    2e5e:	09 f0       	breq	.+2      	; 0x2e62 <_cfg_print_status+0x12>
    2e60:	45 c0       	rjmp	.+138    	; 0x2eec <_cfg_print_status+0x9c>
    2e62:	0c c0       	rjmp	.+24     	; 0x2e7c <_cfg_print_status+0x2c>
    2e64:	8d 30       	cpi	r24, 0x0D	; 13
    2e66:	09 f1       	breq	.+66     	; 0x2eaa <_cfg_print_status+0x5a>
    2e68:	8f 30       	cpi	r24, 0x0F	; 15
    2e6a:	81 f1       	breq	.+96     	; 0x2ecc <_cfg_print_status+0x7c>
    2e6c:	8c 30       	cpi	r24, 0x0C	; 12
    2e6e:	f1 f5       	brne	.+124    	; 0x2eec <_cfg_print_status+0x9c>
    2e70:	12 c0       	rjmp	.+36     	; 0x2e96 <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_CONTINUE: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2e72:	00 d0       	rcall	.+0      	; 0x2e74 <_cfg_print_status+0x24>
    2e74:	0f 92       	push	r0
    2e76:	85 e1       	ldi	r24, 0x15	; 21
    2e78:	94 e0       	ldi	r25, 0x04	; 4
    2e7a:	1b c0       	rjmp	.+54     	; 0x2eb2 <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2e7c:	0f 92       	push	r0
    2e7e:	0f 92       	push	r0
    2e80:	8f ef       	ldi	r24, 0xFF	; 255
    2e82:	93 e0       	ldi	r25, 0x03	; 3
    2e84:	ed b7       	in	r30, 0x3d	; 61
    2e86:	fe b7       	in	r31, 0x3e	; 62
    2e88:	81 83       	std	Z+1, r24	; 0x01
    2e8a:	92 83       	std	Z+2, r25	; 0x02
    2e8c:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2e96:	00 d0       	rcall	.+0      	; 0x2e98 <_cfg_print_status+0x48>
    2e98:	0f 92       	push	r0
    2e9a:	88 ee       	ldi	r24, 0xE8	; 232
    2e9c:	93 e0       	ldi	r25, 0x03	; 3
    2e9e:	09 c0       	rjmp	.+18     	; 0x2eb2 <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2ea0:	00 d0       	rcall	.+0      	; 0x2ea2 <_cfg_print_status+0x52>
    2ea2:	0f 92       	push	r0
    2ea4:	8e ec       	ldi	r24, 0xCE	; 206
    2ea6:	93 e0       	ldi	r25, 0x03	; 3
    2ea8:	04 c0       	rjmp	.+8      	; 0x2eb2 <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2eaa:	00 d0       	rcall	.+0      	; 0x2eac <_cfg_print_status+0x5c>
    2eac:	0f 92       	push	r0
    2eae:	84 eb       	ldi	r24, 0xB4	; 180
    2eb0:	93 e0       	ldi	r25, 0x03	; 3
    2eb2:	ed b7       	in	r30, 0x3d	; 61
    2eb4:	fe b7       	in	r31, 0x3e	; 62
    2eb6:	81 83       	std	Z+1, r24	; 0x01
    2eb8:	92 83       	std	Z+2, r25	; 0x02
    2eba:	63 83       	std	Z+3, r22	; 0x03
    2ebc:	74 83       	std	Z+4, r23	; 0x04
    2ebe:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	08 95       	ret
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2ecc:	00 d0       	rcall	.+0      	; 0x2ece <_cfg_print_status+0x7e>
    2ece:	0f 92       	push	r0
    2ed0:	89 e9       	ldi	r24, 0x99	; 153
    2ed2:	93 e0       	ldi	r25, 0x03	; 3
    2ed4:	ed b7       	in	r30, 0x3d	; 61
    2ed6:	fe b7       	in	r31, 0x3e	; 62
    2ed8:	81 83       	std	Z+1, r24	; 0x01
    2eda:	92 83       	std	Z+2, r25	; 0x02
    2edc:	63 83       	std	Z+3, r22	; 0x03
    2ede:	74 83       	std	Z+4, r23	; 0x04
    2ee0:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	08 95       	ret

00002eee <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    2eee:	ef 92       	push	r14
    2ef0:	ff 92       	push	r15
    2ef2:	0f 93       	push	r16
    2ef4:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    2ef6:	e8 2e       	mov	r14, r24
    2ef8:	ff 24       	eor	r15, r15
    2efa:	87 01       	movw	r16, r14
    2efc:	00 0f       	add	r16, r16
    2efe:	11 1f       	adc	r17, r17
    2f00:	f8 01       	movw	r30, r16
    2f02:	ed 5b       	subi	r30, 0xBD	; 189
    2f04:	fd 4f       	sbci	r31, 0xFD	; 253
    2f06:	25 91       	lpm	r18, Z+
    2f08:	34 91       	lpm	r19, Z+
    2f0a:	00 d0       	rcall	.+0      	; 0x2f0c <_cfg_dump_axis+0x1e>
    2f0c:	0f 92       	push	r0
    2f0e:	88 e3       	ldi	r24, 0x38	; 56
    2f10:	96 e0       	ldi	r25, 0x06	; 6
    2f12:	ad b7       	in	r26, 0x3d	; 61
    2f14:	be b7       	in	r27, 0x3e	; 62
    2f16:	11 96       	adiw	r26, 0x01	; 1
    2f18:	8d 93       	st	X+, r24
    2f1a:	9c 93       	st	X, r25
    2f1c:	12 97       	sbiw	r26, 0x02	; 2
    2f1e:	13 96       	adiw	r26, 0x03	; 3
    2f20:	2d 93       	st	X+, r18
    2f22:	3c 93       	st	X, r19
    2f24:	14 97       	sbiw	r26, 0x04	; 4
    2f26:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	96 e0       	ldi	r25, 0x06	; 6
    2f2e:	ed b7       	in	r30, 0x3d	; 61
    2f30:	fe b7       	in	r31, 0x3e	; 62
    2f32:	81 83       	std	Z+1, r24	; 0x01
    2f34:	92 83       	std	Z+2, r25	; 0x02
    2f36:	0e 0d       	add	r16, r14
    2f38:	1f 1d       	adc	r17, r15
    2f3a:	83 e0       	ldi	r24, 0x03	; 3
    2f3c:	00 0f       	add	r16, r16
    2f3e:	11 1f       	adc	r17, r17
    2f40:	8a 95       	dec	r24
    2f42:	e1 f7       	brne	.-8      	; 0x2f3c <_cfg_dump_axis+0x4e>
    2f44:	05 57       	subi	r16, 0x75	; 117
    2f46:	1b 4d       	sbci	r17, 0xDB	; 219
    2f48:	d8 01       	movw	r26, r16
    2f4a:	51 96       	adiw	r26, 0x11	; 17
    2f4c:	8d 91       	ld	r24, X+
    2f4e:	9c 91       	ld	r25, X
    2f50:	52 97       	sbiw	r26, 0x12	; 18
    2f52:	83 83       	std	Z+3, r24	; 0x03
    2f54:	94 83       	std	Z+4, r25	; 0x04
    2f56:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    2f5a:	88 ec       	ldi	r24, 0xC8	; 200
    2f5c:	95 e0       	ldi	r25, 0x05	; 5
    2f5e:	ed b7       	in	r30, 0x3d	; 61
    2f60:	fe b7       	in	r31, 0x3e	; 62
    2f62:	81 83       	std	Z+1, r24	; 0x01
    2f64:	92 83       	std	Z+2, r25	; 0x02
    2f66:	d8 01       	movw	r26, r16
    2f68:	53 96       	adiw	r26, 0x13	; 19
    2f6a:	8d 91       	ld	r24, X+
    2f6c:	9c 91       	ld	r25, X
    2f6e:	54 97       	sbiw	r26, 0x14	; 20
    2f70:	83 83       	std	Z+3, r24	; 0x03
    2f72:	94 83       	std	Z+4, r25	; 0x04
    2f74:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    2f78:	ed b7       	in	r30, 0x3d	; 61
    2f7a:	fe b7       	in	r31, 0x3e	; 62
    2f7c:	31 96       	adiw	r30, 0x01	; 1
    2f7e:	85 e9       	ldi	r24, 0x95	; 149
    2f80:	95 e0       	ldi	r25, 0x05	; 5
    2f82:	ad b7       	in	r26, 0x3d	; 61
    2f84:	be b7       	in	r27, 0x3e	; 62
    2f86:	11 96       	adiw	r26, 0x01	; 1
    2f88:	8d 93       	st	X+, r24
    2f8a:	9c 93       	st	X, r25
    2f8c:	12 97       	sbiw	r26, 0x02	; 2
    2f8e:	d8 01       	movw	r26, r16
    2f90:	1e 96       	adiw	r26, 0x0e	; 14
    2f92:	8c 91       	ld	r24, X
    2f94:	82 83       	std	Z+2, r24	; 0x02
    2f96:	13 82       	std	Z+3, r1	; 0x03
    2f98:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    2f9c:	0f 92       	push	r0
    2f9e:	0f 92       	push	r0
    2fa0:	8e e5       	ldi	r24, 0x5E	; 94
    2fa2:	95 e0       	ldi	r25, 0x05	; 5
    2fa4:	ed b7       	in	r30, 0x3d	; 61
    2fa6:	fe b7       	in	r31, 0x3e	; 62
    2fa8:	81 83       	std	Z+1, r24	; 0x01
    2faa:	92 83       	std	Z+2, r25	; 0x02
    2fac:	f8 01       	movw	r30, r16
    2fae:	85 89       	ldd	r24, Z+21	; 0x15
    2fb0:	96 89       	ldd	r25, Z+22	; 0x16
    2fb2:	a7 89       	ldd	r26, Z+23	; 0x17
    2fb4:	b0 8d       	ldd	r27, Z+24	; 0x18
    2fb6:	ed b7       	in	r30, 0x3d	; 61
    2fb8:	fe b7       	in	r31, 0x3e	; 62
    2fba:	83 83       	std	Z+3, r24	; 0x03
    2fbc:	94 83       	std	Z+4, r25	; 0x04
    2fbe:	a5 83       	std	Z+5, r26	; 0x05
    2fc0:	b6 83       	std	Z+6, r27	; 0x06
    2fc2:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    2fc6:	8b e2       	ldi	r24, 0x2B	; 43
    2fc8:	95 e0       	ldi	r25, 0x05	; 5
    2fca:	ad b7       	in	r26, 0x3d	; 61
    2fcc:	be b7       	in	r27, 0x3e	; 62
    2fce:	11 96       	adiw	r26, 0x01	; 1
    2fd0:	8d 93       	st	X+, r24
    2fd2:	9c 93       	st	X, r25
    2fd4:	12 97       	sbiw	r26, 0x02	; 2
    2fd6:	f8 01       	movw	r30, r16
    2fd8:	81 8d       	ldd	r24, Z+25	; 0x19
    2fda:	92 8d       	ldd	r25, Z+26	; 0x1a
    2fdc:	a3 8d       	ldd	r26, Z+27	; 0x1b
    2fde:	b4 8d       	ldd	r27, Z+28	; 0x1c
    2fe0:	ed b7       	in	r30, 0x3d	; 61
    2fe2:	fe b7       	in	r31, 0x3e	; 62
    2fe4:	83 83       	std	Z+3, r24	; 0x03
    2fe6:	94 83       	std	Z+4, r25	; 0x04
    2fe8:	a5 83       	std	Z+5, r26	; 0x05
    2fea:	b6 83       	std	Z+6, r27	; 0x06
    2fec:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    2ff0:	88 ef       	ldi	r24, 0xF8	; 248
    2ff2:	94 e0       	ldi	r25, 0x04	; 4
    2ff4:	ad b7       	in	r26, 0x3d	; 61
    2ff6:	be b7       	in	r27, 0x3e	; 62
    2ff8:	11 96       	adiw	r26, 0x01	; 1
    2ffa:	8d 93       	st	X+, r24
    2ffc:	9c 93       	st	X, r25
    2ffe:	12 97       	sbiw	r26, 0x02	; 2
    3000:	f8 01       	movw	r30, r16
    3002:	85 8d       	ldd	r24, Z+29	; 0x1d
    3004:	96 8d       	ldd	r25, Z+30	; 0x1e
    3006:	a7 8d       	ldd	r26, Z+31	; 0x1f
    3008:	b0 a1       	ldd	r27, Z+32	; 0x20
    300a:	ed b7       	in	r30, 0x3d	; 61
    300c:	fe b7       	in	r31, 0x3e	; 62
    300e:	83 83       	std	Z+3, r24	; 0x03
    3010:	94 83       	std	Z+4, r25	; 0x04
    3012:	a5 83       	std	Z+5, r26	; 0x05
    3014:	b6 83       	std	Z+6, r27	; 0x06
    3016:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	ed b7       	in	r30, 0x3d	; 61
    3020:	fe b7       	in	r31, 0x3e	; 62
    3022:	31 96       	adiw	r30, 0x01	; 1
    3024:	87 ec       	ldi	r24, 0xC7	; 199
    3026:	94 e0       	ldi	r25, 0x04	; 4
    3028:	ad b7       	in	r26, 0x3d	; 61
    302a:	be b7       	in	r27, 0x3e	; 62
    302c:	11 96       	adiw	r26, 0x01	; 1
    302e:	8d 93       	st	X+, r24
    3030:	9c 93       	st	X, r25
    3032:	12 97       	sbiw	r26, 0x02	; 2
    3034:	d8 01       	movw	r26, r16
    3036:	95 96       	adiw	r26, 0x25	; 37
    3038:	8c 91       	ld	r24, X
    303a:	82 83       	std	Z+2, r24	; 0x02
    303c:	13 82       	std	Z+3, r1	; 0x03
    303e:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    3042:	ed b7       	in	r30, 0x3d	; 61
    3044:	fe b7       	in	r31, 0x3e	; 62
    3046:	31 96       	adiw	r30, 0x01	; 1
    3048:	86 e9       	ldi	r24, 0x96	; 150
    304a:	94 e0       	ldi	r25, 0x04	; 4
    304c:	ad b7       	in	r26, 0x3d	; 61
    304e:	be b7       	in	r27, 0x3e	; 62
    3050:	11 96       	adiw	r26, 0x01	; 1
    3052:	8d 93       	st	X+, r24
    3054:	9c 93       	st	X, r25
    3056:	12 97       	sbiw	r26, 0x02	; 2
    3058:	d8 01       	movw	r26, r16
    305a:	1f 96       	adiw	r26, 0x0f	; 15
    305c:	8c 91       	ld	r24, X
    305e:	82 83       	std	Z+2, r24	; 0x02
    3060:	13 82       	std	Z+3, r1	; 0x03
    3062:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    3066:	ed b7       	in	r30, 0x3d	; 61
    3068:	fe b7       	in	r31, 0x3e	; 62
    306a:	31 96       	adiw	r30, 0x01	; 1
    306c:	86 e6       	ldi	r24, 0x66	; 102
    306e:	94 e0       	ldi	r25, 0x04	; 4
    3070:	ad b7       	in	r26, 0x3d	; 61
    3072:	be b7       	in	r27, 0x3e	; 62
    3074:	11 96       	adiw	r26, 0x01	; 1
    3076:	8d 93       	st	X+, r24
    3078:	9c 93       	st	X, r25
    307a:	12 97       	sbiw	r26, 0x02	; 2
    307c:	d8 01       	movw	r26, r16
    307e:	50 96       	adiw	r26, 0x10	; 16
    3080:	8c 91       	ld	r24, X
    3082:	82 83       	std	Z+2, r24	; 0x02
    3084:	13 82       	std	Z+3, r1	; 0x03
    3086:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    308a:	0f 92       	push	r0
    308c:	0f 92       	push	r0
    308e:	82 e3       	ldi	r24, 0x32	; 50
    3090:	94 e0       	ldi	r25, 0x04	; 4
    3092:	ed b7       	in	r30, 0x3d	; 61
    3094:	fe b7       	in	r31, 0x3e	; 62
    3096:	81 83       	std	Z+1, r24	; 0x01
    3098:	92 83       	std	Z+2, r25	; 0x02
    309a:	f8 01       	movw	r30, r16
    309c:	81 a1       	ldd	r24, Z+33	; 0x21
    309e:	92 a1       	ldd	r25, Z+34	; 0x22
    30a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    30a2:	b4 a1       	ldd	r27, Z+36	; 0x24
    30a4:	ed b7       	in	r30, 0x3d	; 61
    30a6:	fe b7       	in	r31, 0x3e	; 62
    30a8:	83 83       	std	Z+3, r24	; 0x03
    30aa:	94 83       	std	Z+4, r25	; 0x04
    30ac:	a5 83       	std	Z+5, r26	; 0x05
    30ae:	b6 83       	std	Z+6, r27	; 0x06
    30b0:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
    30b4:	8d b7       	in	r24, 0x3d	; 61
    30b6:	9e b7       	in	r25, 0x3e	; 62
    30b8:	06 96       	adiw	r24, 0x06	; 6
    30ba:	8d bf       	out	0x3d, r24	; 61
    30bc:	9e bf       	out	0x3e, r25	; 62
}
    30be:	1f 91       	pop	r17
    30c0:	0f 91       	pop	r16
    30c2:	ff 90       	pop	r15
    30c4:	ef 90       	pop	r14
    30c6:	08 95       	ret

000030c8 <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    30c8:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    30ca:	00 d0       	rcall	.+0      	; 0x30cc <cfg_dump+0x4>
    30cc:	0f 92       	push	r0
    30ce:	ed b7       	in	r30, 0x3d	; 61
    30d0:	fe b7       	in	r31, 0x3e	; 62
    30d2:	31 96       	adiw	r30, 0x01	; 1
    30d4:	8c ef       	ldi	r24, 0xFC	; 252
    30d6:	96 e0       	ldi	r25, 0x06	; 6
    30d8:	ad b7       	in	r26, 0x3d	; 61
    30da:	be b7       	in	r27, 0x3e	; 62
    30dc:	11 96       	adiw	r26, 0x01	; 1
    30de:	8d 93       	st	X+, r24
    30e0:	9c 93       	st	X, r25
    30e2:	12 97       	sbiw	r26, 0x02	; 2
    30e4:	80 91 8b 24 	lds	r24, 0x248B
    30e8:	82 83       	std	Z+2, r24	; 0x02
    30ea:	13 82       	std	Z+3, r1	; 0x03
    30ec:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    30f0:	0f 90       	pop	r0
    30f2:	0f 90       	pop	r0
    30f4:	85 ed       	ldi	r24, 0xD5	; 213
    30f6:	96 e0       	ldi	r25, 0x06	; 6
    30f8:	ed b7       	in	r30, 0x3d	; 61
    30fa:	fe b7       	in	r31, 0x3e	; 62
    30fc:	81 83       	std	Z+1, r24	; 0x01
    30fe:	92 83       	std	Z+2, r25	; 0x02
    3100:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    3104:	00 d0       	rcall	.+0      	; 0x3106 <cfg_dump+0x3e>
    3106:	0f 92       	push	r0
    3108:	8b ea       	ldi	r24, 0xAB	; 171
    310a:	96 e0       	ldi	r25, 0x06	; 6
    310c:	ad b7       	in	r26, 0x3d	; 61
    310e:	be b7       	in	r27, 0x3e	; 62
    3110:	11 96       	adiw	r26, 0x01	; 1
    3112:	8d 93       	st	X+, r24
    3114:	9c 93       	st	X, r25
    3116:	12 97       	sbiw	r26, 0x02	; 2
    3118:	80 91 8d 24 	lds	r24, 0x248D
    311c:	90 91 8e 24 	lds	r25, 0x248E
    3120:	a0 91 8f 24 	lds	r26, 0x248F
    3124:	b0 91 90 24 	lds	r27, 0x2490
    3128:	ed b7       	in	r30, 0x3d	; 61
    312a:	fe b7       	in	r31, 0x3e	; 62
    312c:	83 83       	std	Z+3, r24	; 0x03
    312e:	94 83       	std	Z+4, r25	; 0x04
    3130:	a5 83       	std	Z+5, r26	; 0x05
    3132:	b6 83       	std	Z+6, r27	; 0x06
    3134:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    3138:	81 e8       	ldi	r24, 0x81	; 129
    313a:	96 e0       	ldi	r25, 0x06	; 6
    313c:	ad b7       	in	r26, 0x3d	; 61
    313e:	be b7       	in	r27, 0x3e	; 62
    3140:	11 96       	adiw	r26, 0x01	; 1
    3142:	8d 93       	st	X+, r24
    3144:	9c 93       	st	X, r25
    3146:	12 97       	sbiw	r26, 0x02	; 2
    3148:	80 91 95 24 	lds	r24, 0x2495
    314c:	90 91 96 24 	lds	r25, 0x2496
    3150:	a0 91 97 24 	lds	r26, 0x2497
    3154:	b0 91 98 24 	lds	r27, 0x2498
    3158:	ed b7       	in	r30, 0x3d	; 61
    315a:	fe b7       	in	r31, 0x3e	; 62
    315c:	83 83       	std	Z+3, r24	; 0x03
    315e:	94 83       	std	Z+4, r25	; 0x04
    3160:	a5 83       	std	Z+5, r26	; 0x05
    3162:	b6 83       	std	Z+6, r27	; 0x06
    3164:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    3168:	86 e5       	ldi	r24, 0x56	; 86
    316a:	96 e0       	ldi	r25, 0x06	; 6
    316c:	ad b7       	in	r26, 0x3d	; 61
    316e:	be b7       	in	r27, 0x3e	; 62
    3170:	11 96       	adiw	r26, 0x01	; 1
    3172:	8d 93       	st	X+, r24
    3174:	9c 93       	st	X, r25
    3176:	12 97       	sbiw	r26, 0x02	; 2
    3178:	80 91 91 24 	lds	r24, 0x2491
    317c:	90 91 92 24 	lds	r25, 0x2492
    3180:	a0 91 93 24 	lds	r26, 0x2493
    3184:	b0 91 94 24 	lds	r27, 0x2494
    3188:	ed b7       	in	r30, 0x3d	; 61
    318a:	fe b7       	in	r31, 0x3e	; 62
    318c:	83 83       	std	Z+3, r24	; 0x03
    318e:	94 83       	std	Z+4, r25	; 0x04
    3190:	a5 83       	std	Z+5, r26	; 0x05
    3192:	b6 83       	std	Z+6, r27	; 0x06
    3194:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
    3198:	10 e0       	ldi	r17, 0x00	; 0
    319a:	8d b7       	in	r24, 0x3d	; 61
    319c:	9e b7       	in	r25, 0x3e	; 62
    319e:	06 96       	adiw	r24, 0x06	; 6
    31a0:	8d bf       	out	0x3d, r24	; 61
    31a2:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis = 0; axis <= A_AXIS; axis++) {
		_cfg_dump_axis(axis);
    31a4:	81 2f       	mov	r24, r17
    31a6:	0e 94 77 17 	call	0x2eee	; 0x2eee <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis = 0; axis <= A_AXIS; axis++) {
    31aa:	1f 5f       	subi	r17, 0xFF	; 255
    31ac:	14 30       	cpi	r17, 0x04	; 4
    31ae:	d1 f7       	brne	.-12     	; 0x31a4 <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    31b0:	1f 91       	pop	r17
    31b2:	08 95       	ret

000031b4 <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	6b e8       	ldi	r22, 0x8B	; 139
    31ba:	74 e2       	ldi	r23, 0x24	; 36
    31bc:	4e e6       	ldi	r20, 0x6E	; 110
    31be:	50 e0       	ldi	r21, 0x00	; 0
    31c0:	0e 94 89 2c 	call	0x5912	; 0x5912 <memcpy_to_eeprom_with_checksum>
}
    31c4:	08 95       	ret

000031c6 <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    31ce:	84 36       	cpi	r24, 0x64	; 100
    31d0:	19 f0       	breq	.+6      	; 0x31d8 <cfg_read+0x12>
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	0d c0       	rjmp	.+26     	; 0x31f2 <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    31d8:	8b e8       	ldi	r24, 0x8B	; 139
    31da:	94 e2       	ldi	r25, 0x24	; 36
    31dc:	60 e0       	ldi	r22, 0x00	; 0
    31de:	70 e0       	ldi	r23, 0x00	; 0
    31e0:	4e e6       	ldi	r20, 0x6E	; 110
    31e2:	50 e0       	ldi	r21, 0x00	; 0
    31e4:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <memcpy_from_eeprom_with_checksum>
    31e8:	00 97       	sbiw	r24, 0x00	; 0
    31ea:	11 f0       	breq	.+4      	; 0x31f0 <cfg_read+0x2a>
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    31f2:	c9 01       	movw	r24, r18
    31f4:	08 95       	ret

000031f6 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    31f6:	cf 92       	push	r12
    31f8:	df 92       	push	r13
    31fa:	ef 92       	push	r14
    31fc:	ff 92       	push	r15
    31fe:	1f 93       	push	r17
    3200:	df 93       	push	r29
    3202:	cf 93       	push	r28
    3204:	0f 92       	push	r0
    3206:	0f 92       	push	r0
    3208:	cd b7       	in	r28, 0x3d	; 61
    320a:	de b7       	in	r29, 0x3e	; 62
    320c:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    320e:	19 82       	std	Y+1, r1	; 0x01
    3210:	1a 82       	std	Y+2, r1	; 0x02
    3212:	cc 24       	eor	r12, r12
    3214:	dd 24       	eor	r13, r13
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	2b c0       	rjmp	.+86     	; 0x3272 <cfg_parse+0x7c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    321c:	9d 33       	cpi	r25, 0x3D	; 61
    321e:	49 f4       	brne	.+18     	; 0x3232 <cfg_parse+0x3c>
			text[j++] = 0;						// terminate tag at separator
    3220:	f7 01       	movw	r30, r14
    3222:	e2 0f       	add	r30, r18
    3224:	f1 1d       	adc	r31, r1
    3226:	10 82       	st	Z, r1
    3228:	2f 5f       	subi	r18, 0xFF	; 255
			val = &text[j];						// new string starts at value
    322a:	67 01       	movw	r12, r14
    322c:	c2 0e       	add	r12, r18
    322e:	d1 1c       	adc	r13, r1
    3230:	20 c0       	rjmp	.+64     	; 0x3272 <cfg_parse+0x7c>
		} else if ( (c == '-') || 				// pass special characters
    3232:	9d 32       	cpi	r25, 0x2D	; 45
    3234:	c9 f0       	breq	.+50     	; 0x3268 <cfg_parse+0x72>
    3236:	9b 32       	cpi	r25, 0x2B	; 43
    3238:	b9 f0       	breq	.+46     	; 0x3268 <cfg_parse+0x72>
    323a:	9e 32       	cpi	r25, 0x2E	; 46
    323c:	a9 f0       	breq	.+42     	; 0x3268 <cfg_parse+0x72>
    323e:	9f 33       	cpi	r25, 0x3F	; 63
    3240:	99 f0       	breq	.+38     	; 0x3268 <cfg_parse+0x72>
    3242:	98 32       	cpi	r25, 0x28	; 40
    3244:	89 f0       	breq	.+34     	; 0x3268 <cfg_parse+0x72>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    3246:	89 2f       	mov	r24, r25
    3248:	81 56       	subi	r24, 0x61	; 97
    324a:	8a 31       	cpi	r24, 0x1A	; 26
    324c:	28 f4       	brcc	.+10     	; 0x3258 <cfg_parse+0x62>
			text[j++] = c-'a'+'A';
    324e:	f7 01       	movw	r30, r14
    3250:	e2 0f       	add	r30, r18
    3252:	f1 1d       	adc	r31, r1
    3254:	90 52       	subi	r25, 0x20	; 32
    3256:	0b c0       	rjmp	.+22     	; 0x326e <cfg_parse+0x78>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    3258:	89 2f       	mov	r24, r25
    325a:	81 54       	subi	r24, 0x41	; 65
    325c:	8a 31       	cpi	r24, 0x1A	; 26
    325e:	20 f0       	brcs	.+8      	; 0x3268 <cfg_parse+0x72>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
    3260:	89 2f       	mov	r24, r25
    3262:	80 53       	subi	r24, 0x30	; 48
    3264:	8a 30       	cpi	r24, 0x0A	; 10
    3266:	28 f4       	brcc	.+10     	; 0x3272 <cfg_parse+0x7c>
			text[j++] = c;
    3268:	f7 01       	movw	r30, r14
    326a:	e2 0f       	add	r30, r18
    326c:	f1 1d       	adc	r31, r1
    326e:	90 83       	st	Z, r25
    3270:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    3272:	f7 01       	movw	r30, r14
    3274:	e3 0f       	add	r30, r19
    3276:	f1 1d       	adc	r31, r1
    3278:	90 81       	ld	r25, Z
    327a:	3f 5f       	subi	r19, 0xFF	; 255
    327c:	99 23       	and	r25, r25
    327e:	71 f6       	brne	.-100    	; 0x321c <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    3280:	f7 01       	movw	r30, r14
    3282:	e2 0f       	add	r30, r18
    3284:	f1 1d       	adc	r31, r1
    3286:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    3288:	2f 5f       	subi	r18, 0xFF	; 255
    328a:	c7 01       	movw	r24, r14
    328c:	82 0f       	add	r24, r18
    328e:	91 1d       	adc	r25, r1
    3290:	89 83       	std	Y+1, r24	; 0x01
    3292:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    3294:	10 92 8c 24 	sts	0x248C, r1
	switch (text[0]) {
    3298:	f7 01       	movw	r30, r14
    329a:	80 81       	ld	r24, Z
    329c:	81 35       	cpi	r24, 0x51	; 81
    329e:	d1 f0       	breq	.+52     	; 0x32d4 <cfg_parse+0xde>
    32a0:	82 35       	cpi	r24, 0x52	; 82
    32a2:	60 f4       	brcc	.+24     	; 0x32bc <cfg_parse+0xc6>
    32a4:	81 34       	cpi	r24, 0x41	; 65
    32a6:	59 f1       	breq	.+86     	; 0x32fe <cfg_parse+0x108>
    32a8:	82 34       	cpi	r24, 0x42	; 66
    32aa:	28 f4       	brcc	.+10     	; 0x32b6 <cfg_parse+0xc0>
    32ac:	88 32       	cpi	r24, 0x28	; 40
    32ae:	11 f1       	breq	.+68     	; 0x32f4 <cfg_parse+0xfe>
    32b0:	8f 33       	cpi	r24, 0x3F	; 63
    32b2:	39 f5       	brne	.+78     	; 0x3302 <cfg_parse+0x10c>
    32b4:	0c c0       	rjmp	.+24     	; 0x32ce <cfg_parse+0xd8>
    32b6:	8d 34       	cpi	r24, 0x4D	; 77
    32b8:	21 f5       	brne	.+72     	; 0x3302 <cfg_parse+0x10c>
    32ba:	0e c0       	rjmp	.+28     	; 0x32d8 <cfg_parse+0xe2>
    32bc:	89 35       	cpi	r24, 0x59	; 89
    32be:	29 f0       	breq	.+10     	; 0x32ca <cfg_parse+0xd4>
    32c0:	8a 35       	cpi	r24, 0x5A	; 90
    32c2:	d9 f0       	breq	.+54     	; 0x32fa <cfg_parse+0x104>
    32c4:	88 35       	cpi	r24, 0x58	; 88
    32c6:	e9 f4       	brne	.+58     	; 0x3302 <cfg_parse+0x10c>
    32c8:	1f c0       	rjmp	.+62     	; 0x3308 <cfg_parse+0x112>
    32ca:	11 e0       	ldi	r17, 0x01	; 1
    32cc:	1e c0       	rjmp	.+60     	; 0x330a <cfg_parse+0x114>
		case '?': cfg_dump(); status (TG_OK); break;
    32ce:	0e 94 64 18 	call	0x30c8	; 0x30c8 <cfg_dump>
    32d2:	10 c0       	rjmp	.+32     	; 0x32f4 <cfg_parse+0xfe>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    32d4:	83 e0       	ldi	r24, 0x03	; 3
    32d6:	16 c0       	rjmp	.+44     	; 0x3304 <cfg_parse+0x10e>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    32d8:	c6 01       	movw	r24, r12
    32da:	be 01       	movw	r22, r28
    32dc:	6f 5f       	subi	r22, 0xFF	; 255
    32de:	7f 4f       	sbci	r23, 0xFF	; 255
    32e0:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <strtod>
    32e4:	60 93 8d 24 	sts	0x248D, r22
    32e8:	70 93 8e 24 	sts	0x248E, r23
    32ec:	80 93 8f 24 	sts	0x248F, r24
    32f0:	90 93 90 24 	sts	0x2490, r25
				  status(TG_OK); 
    32f4:	10 92 8c 24 	sts	0x248C, r1
    32f8:	07 c0       	rjmp	.+14     	; 0x3308 <cfg_parse+0x112>
				  break;
    32fa:	12 e0       	ldi	r17, 0x02	; 2
    32fc:	06 c0       	rjmp	.+12     	; 0x330a <cfg_parse+0x114>

		case 'X': axis = X_AXIS; break;
		case 'Y': axis = Y_AXIS; break;
		case 'Z': axis = Z_AXIS; break;
    32fe:	13 e0       	ldi	r17, 0x03	; 3
    3300:	04 c0       	rjmp	.+8      	; 0x330a <cfg_parse+0x114>
		case 'A': axis = A_AXIS; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    3302:	87 e0       	ldi	r24, 0x07	; 7
    3304:	80 93 8c 24 	sts	0x248C, r24
    3308:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    330a:	80 91 8c 24 	lds	r24, 0x248C
    330e:	88 23       	and	r24, r24
    3310:	09 f0       	breq	.+2      	; 0x3314 <cfg_parse+0x11e>
    3312:	ee c0       	rjmp	.+476    	; 0x34f0 <cfg_parse+0x2fa>
		status(TG_OK);							// pre-emptive setting
    3314:	10 92 8c 24 	sts	0x248C, r1
		switch (text[1]) {
    3318:	f7 01       	movw	r30, r14
    331a:	81 81       	ldd	r24, Z+1	; 0x01
    331c:	8c 34       	cpi	r24, 0x4C	; 76
    331e:	09 f4       	brne	.+2      	; 0x3322 <cfg_parse+0x12c>
    3320:	b8 c0       	rjmp	.+368    	; 0x3492 <cfg_parse+0x29c>
    3322:	8d 34       	cpi	r24, 0x4D	; 77
    3324:	30 f4       	brcc	.+12     	; 0x3332 <cfg_parse+0x13c>
    3326:	84 34       	cpi	r24, 0x44	; 68
    3328:	a9 f1       	breq	.+106    	; 0x3394 <cfg_parse+0x19e>
    332a:	86 34       	cpi	r24, 0x46	; 70
    332c:	09 f0       	breq	.+2      	; 0x3330 <cfg_parse+0x13a>
    332e:	dd c0       	rjmp	.+442    	; 0x34ea <cfg_parse+0x2f4>
    3330:	1d c0       	rjmp	.+58     	; 0x336c <cfg_parse+0x176>
    3332:	80 35       	cpi	r24, 0x50	; 80
    3334:	09 f4       	brne	.+2      	; 0x3338 <cfg_parse+0x142>
    3336:	47 c0       	rjmp	.+142    	; 0x33c6 <cfg_parse+0x1d0>
    3338:	83 35       	cpi	r24, 0x53	; 83
    333a:	21 f0       	breq	.+8      	; 0x3344 <cfg_parse+0x14e>
    333c:	8d 34       	cpi	r24, 0x4D	; 77
    333e:	09 f0       	breq	.+2      	; 0x3342 <cfg_parse+0x14c>
    3340:	d4 c0       	rjmp	.+424    	; 0x34ea <cfg_parse+0x2f4>
    3342:	58 c0       	rjmp	.+176    	; 0x33f4 <cfg_parse+0x1fe>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    3344:	c6 01       	movw	r24, r12
    3346:	0e 94 2f 48 	call	0x905e	; 0x905e <atoi>
    334a:	21 2f       	mov	r18, r17
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	f9 01       	movw	r30, r18
    3350:	ee 0f       	add	r30, r30
    3352:	ff 1f       	adc	r31, r31
    3354:	e2 0f       	add	r30, r18
    3356:	f3 1f       	adc	r31, r19
    3358:	53 e0       	ldi	r21, 0x03	; 3
    335a:	ee 0f       	add	r30, r30
    335c:	ff 1f       	adc	r31, r31
    335e:	5a 95       	dec	r21
    3360:	e1 f7       	brne	.-8      	; 0x335a <cfg_parse+0x164>
    3362:	e5 57       	subi	r30, 0x75	; 117
    3364:	fb 4d       	sbci	r31, 0xDB	; 219
    3366:	81 8b       	std	Z+17, r24	; 0x11
    3368:	92 8b       	std	Z+18, r25	; 0x12
    336a:	c2 c0       	rjmp	.+388    	; 0x34f0 <cfg_parse+0x2fa>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    336c:	c6 01       	movw	r24, r12
    336e:	0e 94 2f 48 	call	0x905e	; 0x905e <atoi>
    3372:	21 2f       	mov	r18, r17
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	f9 01       	movw	r30, r18
    3378:	ee 0f       	add	r30, r30
    337a:	ff 1f       	adc	r31, r31
    337c:	e2 0f       	add	r30, r18
    337e:	f3 1f       	adc	r31, r19
    3380:	23 e0       	ldi	r18, 0x03	; 3
    3382:	ee 0f       	add	r30, r30
    3384:	ff 1f       	adc	r31, r31
    3386:	2a 95       	dec	r18
    3388:	e1 f7       	brne	.-8      	; 0x3382 <cfg_parse+0x18c>
    338a:	e5 57       	subi	r30, 0x75	; 117
    338c:	fb 4d       	sbci	r31, 0xDB	; 219
    338e:	83 8b       	std	Z+19, r24	; 0x13
    3390:	94 8b       	std	Z+20, r25	; 0x14
    3392:	ae c0       	rjmp	.+348    	; 0x34f0 <cfg_parse+0x2fa>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    3394:	c6 01       	movw	r24, r12
    3396:	be 01       	movw	r22, r28
    3398:	6f 5f       	subi	r22, 0xFF	; 255
    339a:	7f 4f       	sbci	r23, 0xFF	; 255
    339c:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <strtod>
    33a0:	21 2f       	mov	r18, r17
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	f9 01       	movw	r30, r18
    33a6:	ee 0f       	add	r30, r30
    33a8:	ff 1f       	adc	r31, r31
    33aa:	e2 0f       	add	r30, r18
    33ac:	f3 1f       	adc	r31, r19
    33ae:	b3 e0       	ldi	r27, 0x03	; 3
    33b0:	ee 0f       	add	r30, r30
    33b2:	ff 1f       	adc	r31, r31
    33b4:	ba 95       	dec	r27
    33b6:	e1 f7       	brne	.-8      	; 0x33b0 <cfg_parse+0x1ba>
    33b8:	e5 57       	subi	r30, 0x75	; 117
    33ba:	fb 4d       	sbci	r31, 0xDB	; 219
    33bc:	65 8b       	std	Z+21, r22	; 0x15
    33be:	76 8b       	std	Z+22, r23	; 0x16
    33c0:	87 8b       	std	Z+23, r24	; 0x17
    33c2:	90 8f       	std	Z+24, r25	; 0x18
    33c4:	95 c0       	rjmp	.+298    	; 0x34f0 <cfg_parse+0x2fa>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    33c6:	c6 01       	movw	r24, r12
    33c8:	0e 94 2f 48 	call	0x905e	; 0x905e <atoi>
    33cc:	68 2f       	mov	r22, r24
    33ce:	81 2f       	mov	r24, r17
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	fc 01       	movw	r30, r24
    33d4:	ee 0f       	add	r30, r30
    33d6:	ff 1f       	adc	r31, r31
    33d8:	e8 0f       	add	r30, r24
    33da:	f9 1f       	adc	r31, r25
    33dc:	73 e0       	ldi	r23, 0x03	; 3
    33de:	ee 0f       	add	r30, r30
    33e0:	ff 1f       	adc	r31, r31
    33e2:	7a 95       	dec	r23
    33e4:	e1 f7       	brne	.-8      	; 0x33de <cfg_parse+0x1e8>
    33e6:	e5 57       	subi	r30, 0x75	; 117
    33e8:	fb 4d       	sbci	r31, 0xDB	; 219
    33ea:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    33ec:	81 2f       	mov	r24, r17
    33ee:	0e 94 2b 24 	call	0x4856	; 0x4856 <st_set_polarity>
    33f2:	7e c0       	rjmp	.+252    	; 0x34f0 <cfg_parse+0x2fa>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    33f4:	f7 01       	movw	r30, r14
    33f6:	82 81       	ldd	r24, Z+2	; 0x02
    33f8:	89 34       	cpi	r24, 0x49	; 73
    33fa:	99 f4       	brne	.+38     	; 0x3422 <cfg_parse+0x22c>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    33fc:	c6 01       	movw	r24, r12
    33fe:	0e 94 2f 48 	call	0x905e	; 0x905e <atoi>
    3402:	21 2f       	mov	r18, r17
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	f9 01       	movw	r30, r18
    3408:	ee 0f       	add	r30, r30
    340a:	ff 1f       	adc	r31, r31
    340c:	e2 0f       	add	r30, r18
    340e:	f3 1f       	adc	r31, r19
    3410:	53 e0       	ldi	r21, 0x03	; 3
    3412:	ee 0f       	add	r30, r30
    3414:	ff 1f       	adc	r31, r31
    3416:	5a 95       	dec	r21
    3418:	e1 f7       	brne	.-8      	; 0x3412 <cfg_parse+0x21c>
    341a:	e5 57       	subi	r30, 0x75	; 117
    341c:	fb 4d       	sbci	r31, 0xDB	; 219
    341e:	86 87       	std	Z+14, r24	; 0x0e
    3420:	67 c0       	rjmp	.+206    	; 0x34f0 <cfg_parse+0x2fa>
				} else if (text[3] == 'R') {
    3422:	f7 01       	movw	r30, r14
    3424:	83 81       	ldd	r24, Z+3	; 0x03
    3426:	82 35       	cpi	r24, 0x52	; 82
    3428:	c9 f4       	brne	.+50     	; 0x345c <cfg_parse+0x266>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    342a:	c6 01       	movw	r24, r12
    342c:	be 01       	movw	r22, r28
    342e:	6f 5f       	subi	r22, 0xFF	; 255
    3430:	7f 4f       	sbci	r23, 0xFF	; 255
    3432:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <strtod>
    3436:	21 2f       	mov	r18, r17
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	f9 01       	movw	r30, r18
    343c:	ee 0f       	add	r30, r30
    343e:	ff 1f       	adc	r31, r31
    3440:	e2 0f       	add	r30, r18
    3442:	f3 1f       	adc	r31, r19
    3444:	13 e0       	ldi	r17, 0x03	; 3
    3446:	ee 0f       	add	r30, r30
    3448:	ff 1f       	adc	r31, r31
    344a:	1a 95       	dec	r17
    344c:	e1 f7       	brne	.-8      	; 0x3446 <cfg_parse+0x250>
    344e:	e5 57       	subi	r30, 0x75	; 117
    3450:	fb 4d       	sbci	r31, 0xDB	; 219
    3452:	61 8f       	std	Z+25, r22	; 0x19
    3454:	72 8f       	std	Z+26, r23	; 0x1a
    3456:	83 8f       	std	Z+27, r24	; 0x1b
    3458:	94 8f       	std	Z+28, r25	; 0x1c
    345a:	4a c0       	rjmp	.+148    	; 0x34f0 <cfg_parse+0x2fa>
				} else if (text[3] == 'T') {
    345c:	84 35       	cpi	r24, 0x54	; 84
    345e:	c9 f4       	brne	.+50     	; 0x3492 <cfg_parse+0x29c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    3460:	c6 01       	movw	r24, r12
    3462:	be 01       	movw	r22, r28
    3464:	6f 5f       	subi	r22, 0xFF	; 255
    3466:	7f 4f       	sbci	r23, 0xFF	; 255
    3468:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <strtod>
    346c:	21 2f       	mov	r18, r17
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	f9 01       	movw	r30, r18
    3472:	ee 0f       	add	r30, r30
    3474:	ff 1f       	adc	r31, r31
    3476:	e2 0f       	add	r30, r18
    3478:	f3 1f       	adc	r31, r19
    347a:	a3 e0       	ldi	r26, 0x03	; 3
    347c:	ee 0f       	add	r30, r30
    347e:	ff 1f       	adc	r31, r31
    3480:	aa 95       	dec	r26
    3482:	e1 f7       	brne	.-8      	; 0x347c <cfg_parse+0x286>
    3484:	e5 57       	subi	r30, 0x75	; 117
    3486:	fb 4d       	sbci	r31, 0xDB	; 219
    3488:	65 8f       	std	Z+29, r22	; 0x1d
    348a:	76 8f       	std	Z+30, r23	; 0x1e
    348c:	87 8f       	std	Z+31, r24	; 0x1f
    348e:	90 a3       	std	Z+32, r25	; 0x20
    3490:	2f c0       	rjmp	.+94     	; 0x34f0 <cfg_parse+0x2fa>
				}
			case 'L': 
				if (text[2] == 'O') {
    3492:	f7 01       	movw	r30, r14
    3494:	82 81       	ldd	r24, Z+2	; 0x02
    3496:	8f 34       	cpi	r24, 0x4F	; 79
    3498:	99 f4       	brne	.+38     	; 0x34c0 <cfg_parse+0x2ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    349a:	c6 01       	movw	r24, r12
    349c:	0e 94 2f 48 	call	0x905e	; 0x905e <atoi>
    34a0:	21 2f       	mov	r18, r17
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	f9 01       	movw	r30, r18
    34a6:	ee 0f       	add	r30, r30
    34a8:	ff 1f       	adc	r31, r31
    34aa:	e2 0f       	add	r30, r18
    34ac:	f3 1f       	adc	r31, r19
    34ae:	53 e0       	ldi	r21, 0x03	; 3
    34b0:	ee 0f       	add	r30, r30
    34b2:	ff 1f       	adc	r31, r31
    34b4:	5a 95       	dec	r21
    34b6:	e1 f7       	brne	.-8      	; 0x34b0 <cfg_parse+0x2ba>
    34b8:	e5 57       	subi	r30, 0x75	; 117
    34ba:	fb 4d       	sbci	r31, 0xDB	; 219
    34bc:	87 87       	std	Z+15, r24	; 0x0f
    34be:	18 c0       	rjmp	.+48     	; 0x34f0 <cfg_parse+0x2fa>
				} else if (text[2] == 'I') {
    34c0:	89 34       	cpi	r24, 0x49	; 73
    34c2:	99 f4       	brne	.+38     	; 0x34ea <cfg_parse+0x2f4>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    34c4:	c6 01       	movw	r24, r12
    34c6:	0e 94 2f 48 	call	0x905e	; 0x905e <atoi>
    34ca:	21 2f       	mov	r18, r17
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	f9 01       	movw	r30, r18
    34d0:	ee 0f       	add	r30, r30
    34d2:	ff 1f       	adc	r31, r31
    34d4:	e2 0f       	add	r30, r18
    34d6:	f3 1f       	adc	r31, r19
    34d8:	23 e0       	ldi	r18, 0x03	; 3
    34da:	ee 0f       	add	r30, r30
    34dc:	ff 1f       	adc	r31, r31
    34de:	2a 95       	dec	r18
    34e0:	e1 f7       	brne	.-8      	; 0x34da <cfg_parse+0x2e4>
    34e2:	e5 57       	subi	r30, 0x75	; 117
    34e4:	fb 4d       	sbci	r31, 0xDB	; 219
    34e6:	85 a3       	std	Z+37, r24	; 0x25
    34e8:	03 c0       	rjmp	.+6      	; 0x34f0 <cfg_parse+0x2fa>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    34ea:	87 e0       	ldi	r24, 0x07	; 7
    34ec:	80 93 8c 24 	sts	0x248C, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    34f0:	80 91 8c 24 	lds	r24, 0x248C
    34f4:	b7 01       	movw	r22, r14
    34f6:	0e 94 28 17 	call	0x2e50	; 0x2e50 <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    34fa:	80 91 8c 24 	lds	r24, 0x248C
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	0f 90       	pop	r0
    3502:	0f 90       	pop	r0
    3504:	cf 91       	pop	r28
    3506:	df 91       	pop	r29
    3508:	1f 91       	pop	r17
    350a:	ff 90       	pop	r15
    350c:	ef 90       	pop	r14
    350e:	df 90       	pop	r13
    3510:	cf 90       	pop	r12
    3512:	08 95       	ret

00003514 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3514:	ef 92       	push	r14
    3516:	ff 92       	push	r15
    3518:	0f 93       	push	r16
    351a:	1f 93       	push	r17
    351c:	df 93       	push	r29
    351e:	cf 93       	push	r28
    3520:	cd b7       	in	r28, 0x3d	; 61
    3522:	de b7       	in	r29, 0x3e	; 62
    3524:	a8 97       	sbiw	r28, 0x28	; 40
    3526:	cd bf       	out	0x3d, r28	; 61
    3528:	de bf       	out	0x3e, r29	; 62
    352a:	0b e4       	ldi	r16, 0x4B	; 75
    352c:	12 e0       	ldi	r17, 0x02	; 2
    352e:	a0 e0       	ldi	r26, 0x00	; 0
    3530:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    3532:	7e 01       	movw	r14, r28
    3534:	08 94       	sec
    3536:	e1 1c       	adc	r14, r1
    3538:	f1 1c       	adc	r15, r1
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    353c:	0f 5f       	subi	r16, 0xFF	; 255
    353e:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    3540:	f8 01       	movw	r30, r16
    3542:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    3544:	88 23       	and	r24, r24
    3546:	89 f4       	brne	.+34     	; 0x356a <cfg_test+0x56>
			text[j] = 0;
    3548:	ce 01       	movw	r24, r28
    354a:	01 96       	adiw	r24, 0x01	; 1
    354c:	a8 0f       	add	r26, r24
    354e:	b9 1f       	adc	r27, r25
    3550:	1c 92       	st	X, r1
			cfg_parse(text);
    3552:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    3556:	a8 96       	adiw	r28, 0x28	; 40
    3558:	cd bf       	out	0x3d, r28	; 61
    355a:	de bf       	out	0x3e, r29	; 62
    355c:	cf 91       	pop	r28
    355e:	df 91       	pop	r29
    3560:	1f 91       	pop	r17
    3562:	0f 91       	pop	r16
    3564:	ff 90       	pop	r15
    3566:	ef 90       	pop	r14
    3568:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    356a:	8d 30       	cpi	r24, 0x0D	; 13
    356c:	21 f0       	breq	.+8      	; 0x3576 <cfg_test+0x62>
    356e:	8a 30       	cpi	r24, 0x0A	; 10
    3570:	11 f0       	breq	.+4      	; 0x3576 <cfg_test+0x62>
    3572:	8b 33       	cpi	r24, 0x3B	; 59
    3574:	49 f4       	brne	.+18     	; 0x3588 <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    3576:	ae 0d       	add	r26, r14
    3578:	bf 1d       	adc	r27, r15
    357a:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    357c:	c7 01       	movw	r24, r14
    357e:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <cfg_parse>
    3582:	a0 e0       	ldi	r26, 0x00	; 0
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	da cf       	rjmp	.-76     	; 0x353c <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    3588:	81 32       	cpi	r24, 0x21	; 33
    358a:	c0 f2       	brcs	.-80     	; 0x353c <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    358c:	f7 01       	movw	r30, r14
    358e:	ea 0f       	add	r30, r26
    3590:	fb 1f       	adc	r31, r27
    3592:	80 83       	st	Z, r24
    3594:	11 96       	adiw	r26, 0x01	; 1
    3596:	d2 cf       	rjmp	.-92     	; 0x353c <cfg_test+0x28>

00003598 <en_init>:


void en_init(void) 
{
	return;
}
    3598:	08 95       	ret

0000359a <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
    359a:	88 23       	and	r24, r24
    359c:	b1 f0       	breq	.+44     	; 0x35ca <en_write+0x30>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    359e:	e0 91 87 24 	lds	r30, 0x2487
    35a2:	f0 91 88 24 	lds	r31, 0x2488
    35a6:	80 e2       	ldi	r24, 0x20	; 32
    35a8:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    35aa:	e0 91 78 24 	lds	r30, 0x2478
    35ae:	f0 91 79 24 	lds	r31, 0x2479
    35b2:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    35b4:	e0 91 69 24 	lds	r30, 0x2469
    35b8:	f0 91 6a 24 	lds	r31, 0x246A
    35bc:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    35be:	e0 91 5a 24 	lds	r30, 0x245A
    35c2:	f0 91 5b 24 	lds	r31, 0x245B
    35c6:	85 83       	std	Z+5, r24	; 0x05
    35c8:	08 95       	ret
void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    35ca:	e0 91 87 24 	lds	r30, 0x2487
    35ce:	f0 91 88 24 	lds	r31, 0x2488
    35d2:	80 e2       	ldi	r24, 0x20	; 32
    35d4:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    35d6:	e0 91 78 24 	lds	r30, 0x2478
    35da:	f0 91 79 24 	lds	r31, 0x2479
    35de:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    35e0:	e0 91 69 24 	lds	r30, 0x2469
    35e4:	f0 91 6a 24 	lds	r31, 0x246A
    35e8:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    35ea:	e0 91 5a 24 	lds	r30, 0x245A
    35ee:	f0 91 5b 24 	lds	r31, 0x245B
    35f2:	86 83       	std	Z+6, r24	; 0x06
    35f4:	08 95       	ret

000035f6 <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    35f6:	0f 93       	push	r16
    35f8:	df 93       	push	r29
    35fa:	cf 93       	push	r28
    35fc:	0f 92       	push	r0
    35fe:	cd b7       	in	r28, 0x3d	; 61
    3600:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    3602:	8b ec       	ldi	r24, 0xCB	; 203
    3604:	e0 e5       	ldi	r30, 0x50	; 80
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    360a:	88 e0       	ldi	r24, 0x08	; 8
    360c:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    3610:	80 91 51 00 	lds	r24, 0x0051
    3614:	83 ff       	sbrs	r24, 3
    3616:	fc cf       	rjmp	.-8      	; 0x3610 <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    3618:	82 ec       	ldi	r24, 0xC2	; 194
    361a:	e0 e5       	ldi	r30, 0x50	; 80
    361c:	f0 e0       	ldi	r31, 0x00	; 0
    361e:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    3620:	88 e1       	ldi	r24, 0x18	; 24
    3622:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    3626:	80 91 51 00 	lds	r24, 0x0051
    362a:	84 ff       	sbrs	r24, 4
    362c:	fc cf       	rjmp	.-8      	; 0x3626 <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    362e:	8f b7       	in	r24, 0x3f	; 63
    3630:	89 83       	std	Y+1, r24	; 0x01
    3632:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3634:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3636:	24 e0       	ldi	r18, 0x04	; 4
    3638:	80 e4       	ldi	r24, 0x40	; 64
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	fc 01       	movw	r30, r24
    363e:	08 ed       	ldi	r16, 0xD8	; 216
    3640:	04 bf       	out	0x34, r16	; 52
    3642:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    3648:	80 91 50 00 	lds	r24, 0x0050
    364c:	8e 7f       	andi	r24, 0xFE	; 254
    364e:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    3652:	0f 90       	pop	r0
    3654:	cf 91       	pop	r28
    3656:	df 91       	pop	r29
    3658:	0f 91       	pop	r16
    365a:	08 95       	ret

0000365c <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    365c:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <xmega_init_clocks>
}
    3660:	08 95       	ret

00003662 <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3662:	0f 93       	push	r16
    3664:	df 93       	push	r29
    3666:	cf 93       	push	r28
    3668:	0f 92       	push	r0
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    366e:	2f b7       	in	r18, 0x3f	; 63
    3670:	29 83       	std	Y+1, r18	; 0x01
    3672:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3674:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3676:	fc 01       	movw	r30, r24
    3678:	08 ed       	ldi	r16, 0xD8	; 216
    367a:	04 bf       	out	0x34, r16	; 52
    367c:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    367e:	89 81       	ldd	r24, Y+1	; 0x01
    3680:	8f bf       	out	0x3f, r24	; 63
#endif
}
    3682:	0f 90       	pop	r0
    3684:	cf 91       	pop	r28
    3686:	df 91       	pop	r29
    3688:	0f 91       	pop	r16
    368a:	08 95       	ret

0000368c <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

void mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    368c:	10 92 80 21 	sts	0x2180, r1
	ma.arc_state = MC_STATE_OFF;
    3690:	10 92 fb 24 	sts	0x24FB, r1
}
    3694:	08 95       	ret

00003696 <mc_dwell>:
/* 
 * mc_dwell() 
 */

void mc_dwell(uint32_t milliseconds) 
{
    3696:	af 92       	push	r10
    3698:	bf 92       	push	r11
    369a:	cf 92       	push	r12
    369c:	df 92       	push	r13
    369e:	ef 92       	push	r14
    36a0:	ff 92       	push	r15
    36a2:	0f 93       	push	r16
    36a4:	1f 93       	push	r17
//	mv_synchronize();
	_delay_ms(milliseconds);
    36a6:	0e 94 56 43 	call	0x86ac	; 0x86ac <__floatunsisf>
    36aa:	5b 01       	movw	r10, r22
    36ac:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	4a ef       	ldi	r20, 0xFA	; 250
    36b4:	55 e4       	ldi	r21, 0x45	; 69
    36b6:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    36ba:	7b 01       	movw	r14, r22
    36bc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    36be:	20 e0       	ldi	r18, 0x00	; 0
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	40 e8       	ldi	r20, 0x80	; 128
    36c4:	5f e3       	ldi	r21, 0x3F	; 63
    36c6:	0e 94 b6 42 	call	0x856c	; 0x856c <__cmpsf2>
    36ca:	88 23       	and	r24, r24
    36cc:	1c f4       	brge	.+6      	; 0x36d4 <mc_dwell+0x3e>
    36ce:	61 e0       	ldi	r22, 0x01	; 1
    36d0:	70 e0       	ldi	r23, 0x00	; 0
    36d2:	24 c0       	rjmp	.+72     	; 0x371c <mc_dwell+0x86>
		__ticks = 1;
	else if (__tmp > 65535)
    36d4:	c8 01       	movw	r24, r16
    36d6:	b7 01       	movw	r22, r14
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	3f ef       	ldi	r19, 0xFF	; 255
    36dc:	4f e7       	ldi	r20, 0x7F	; 127
    36de:	57 e4       	ldi	r21, 0x47	; 71
    36e0:	0e 94 a6 44 	call	0x894c	; 0x894c <__gesf2>
    36e4:	18 16       	cp	r1, r24
    36e6:	b4 f4       	brge	.+44     	; 0x3714 <mc_dwell+0x7e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36e8:	c6 01       	movw	r24, r12
    36ea:	b5 01       	movw	r22, r10
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	40 e2       	ldi	r20, 0x20	; 32
    36f2:	51 e4       	ldi	r21, 0x41	; 65
    36f4:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    36f8:	0e 94 2a 43 	call	0x8654	; 0x8654 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36fc:	80 e2       	ldi	r24, 0x20	; 32
    36fe:	93 e0       	ldi	r25, 0x03	; 3
    3700:	05 c0       	rjmp	.+10     	; 0x370c <mc_dwell+0x76>
    3702:	fc 01       	movw	r30, r24
    3704:	31 97       	sbiw	r30, 0x01	; 1
    3706:	f1 f7       	brne	.-4      	; 0x3704 <mc_dwell+0x6e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3708:	61 50       	subi	r22, 0x01	; 1
    370a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    370c:	61 15       	cp	r22, r1
    370e:	71 05       	cpc	r23, r1
    3710:	c1 f7       	brne	.-16     	; 0x3702 <mc_dwell+0x6c>
    3712:	07 c0       	rjmp	.+14     	; 0x3722 <mc_dwell+0x8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3714:	c8 01       	movw	r24, r16
    3716:	b7 01       	movw	r22, r14
    3718:	0e 94 2a 43 	call	0x8654	; 0x8654 <__fixunssfsi>
    371c:	cb 01       	movw	r24, r22
    371e:	01 97       	sbiw	r24, 0x01	; 1
    3720:	f1 f7       	brne	.-4      	; 0x371e <mc_dwell+0x88>
}
    3722:	1f 91       	pop	r17
    3724:	0f 91       	pop	r16
    3726:	ff 90       	pop	r15
    3728:	ef 90       	pop	r14
    372a:	df 90       	pop	r13
    372c:	cf 90       	pop	r12
    372e:	bf 90       	pop	r11
    3730:	af 90       	pop	r10
    3732:	08 95       	ret

00003734 <mc_go_home>:
 */

void mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    3734:	8c e0       	ldi	r24, 0x0C	; 12
    3736:	e1 e8       	ldi	r30, 0x81	; 129
    3738:	f1 e2       	ldi	r31, 0x21	; 33
    373a:	df 01       	movw	r26, r30
    373c:	1d 92       	st	X+, r1
    373e:	8a 95       	dec	r24
    3740:	e9 f7       	brne	.-6      	; 0x373c <mc_go_home+0x8>
}
    3742:	08 95       	ret

00003744 <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    3744:	8c e0       	ldi	r24, 0x0C	; 12
    3746:	e1 e8       	ldi	r30, 0x81	; 129
    3748:	f1 e2       	ldi	r31, 0x21	; 33
    374a:	df 01       	movw	r26, r30
    374c:	1d 92       	st	X+, r1
    374e:	8a 95       	dec	r24
    3750:	e9 f7       	brne	.-6      	; 0x374c <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    3752:	10 92 80 21 	sts	0x2180, r1
	ma.arc_state = MC_STATE_OFF;
    3756:	10 92 fb 24 	sts	0x24FB, r1
}
    375a:	08 95       	ret

0000375c <mc_line_continuation>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continuation() 
{
    375c:	af 92       	push	r10
    375e:	bf 92       	push	r11
    3760:	cf 92       	push	r12
    3762:	df 92       	push	r13
    3764:	ef 92       	push	r14
    3766:	ff 92       	push	r15
    3768:	0f 93       	push	r16
    376a:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    376c:	80 91 80 21 	lds	r24, 0x2180
    3770:	88 23       	and	r24, r24
    3772:	19 f4       	brne	.+6      	; 0x377a <mc_line_continuation+0x1e>
    3774:	21 e0       	ldi	r18, 0x01	; 1
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	30 c0       	rjmp	.+96     	; 0x37da <mc_line_continuation+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    377a:	82 e0       	ldi	r24, 0x02	; 2
    377c:	80 93 80 21 	sts	0x2180, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    3780:	0e 94 33 31 	call	0x6266	; 0x6266 <mv_test_move_buffer_full>
    3784:	88 23       	and	r24, r24
    3786:	19 f0       	breq	.+6      	; 0x378e <mc_line_continuation+0x32>
    3788:	22 e0       	ldi	r18, 0x02	; 2
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	26 c0       	rjmp	.+76     	; 0x37da <mc_line_continuation+0x7e>
		return (TG_CONTINUE);
	}
	mv_queue_move_buffer(mc.steps[X_AXIS], mc.steps[Y_AXIS], mc.steps[Z_AXIS], mc.microseconds); 
    378e:	60 91 99 21 	lds	r22, 0x2199
    3792:	70 91 9a 21 	lds	r23, 0x219A
    3796:	80 91 9b 21 	lds	r24, 0x219B
    379a:	90 91 9c 21 	lds	r25, 0x219C
    379e:	20 91 9d 21 	lds	r18, 0x219D
    37a2:	30 91 9e 21 	lds	r19, 0x219E
    37a6:	40 91 9f 21 	lds	r20, 0x219F
    37aa:	50 91 a0 21 	lds	r21, 0x21A0
    37ae:	e0 90 a1 21 	lds	r14, 0x21A1
    37b2:	f0 90 a2 21 	lds	r15, 0x21A2
    37b6:	00 91 a3 21 	lds	r16, 0x21A3
    37ba:	10 91 a4 21 	lds	r17, 0x21A4
    37be:	a0 90 a5 21 	lds	r10, 0x21A5
    37c2:	b0 90 a6 21 	lds	r11, 0x21A6
    37c6:	c0 90 a7 21 	lds	r12, 0x21A7
    37ca:	d0 90 a8 21 	lds	r13, 0x21A8
    37ce:	0e 94 5f 31 	call	0x62be	; 0x62be <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    37d2:	10 92 80 21 	sts	0x2180, r1
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    37da:	c9 01       	movw	r24, r18
    37dc:	1f 91       	pop	r17
    37de:	0f 91       	pop	r16
    37e0:	ff 90       	pop	r15
    37e2:	ef 90       	pop	r14
    37e4:	df 90       	pop	r13
    37e6:	cf 90       	pop	r12
    37e8:	bf 90       	pop	r11
    37ea:	af 90       	pop	r10
    37ec:	08 95       	ret

000037ee <mc_line_nonblock>:
/* 
 * mc_line_nonblock() - mc_line with non-blocking behavior
 */

int mc_line_nonblock(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    37ee:	2f 92       	push	r2
    37f0:	3f 92       	push	r3
    37f2:	4f 92       	push	r4
    37f4:	5f 92       	push	r5
    37f6:	6f 92       	push	r6
    37f8:	7f 92       	push	r7
    37fa:	8f 92       	push	r8
    37fc:	9f 92       	push	r9
    37fe:	af 92       	push	r10
    3800:	bf 92       	push	r11
    3802:	cf 92       	push	r12
    3804:	df 92       	push	r13
    3806:	ef 92       	push	r14
    3808:	ff 92       	push	r15
    380a:	0f 93       	push	r16
    380c:	1f 93       	push	r17
    380e:	df 93       	push	r29
    3810:	cf 93       	push	r28
    3812:	cd b7       	in	r28, 0x3d	; 61
    3814:	de b7       	in	r29, 0x3e	; 62
    3816:	64 97       	sbiw	r28, 0x14	; 20
    3818:	cd bf       	out	0x3d, r28	; 61
    381a:	de bf       	out	0x3e, r29	; 62
    381c:	2d 87       	std	Y+13, r18	; 0x0d
    381e:	3e 87       	std	Y+14, r19	; 0x0e
    3820:	4f 87       	std	Y+15, r20	; 0x0f
    3822:	58 8b       	std	Y+16, r21	; 0x10
    3824:	a9 8a       	std	Y+17, r10	; 0x11
    3826:	ba 8a       	std	Y+18, r11	; 0x12
    3828:	cb 8a       	std	Y+19, r12	; 0x13
    382a:	dc 8a       	std	Y+20, r13	; 0x14
	mc.target[X_AXIS] = lround(x*CFG(X_AXIS).steps_per_mm);
    382c:	20 91 ac 24 	lds	r18, 0x24AC
    3830:	30 91 ad 24 	lds	r19, 0x24AD
    3834:	40 91 ae 24 	lds	r20, 0x24AE
    3838:	50 91 af 24 	lds	r21, 0x24AF
    383c:	29 87       	std	Y+9, r18	; 0x09
    383e:	3a 87       	std	Y+10, r19	; 0x0a
    3840:	4b 87       	std	Y+11, r20	; 0x0b
    3842:	5c 87       	std	Y+12, r21	; 0x0c
    3844:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    3848:	0e 94 48 45 	call	0x8a90	; 0x8a90 <lround>
    384c:	2b 01       	movw	r4, r22
    384e:	3c 01       	movw	r6, r24
    3850:	40 92 8d 21 	sts	0x218D, r4
    3854:	50 92 8e 21 	sts	0x218E, r5
    3858:	60 92 8f 21 	sts	0x218F, r6
    385c:	70 92 90 21 	sts	0x2190, r7
	mc.target[Y_AXIS] = lround(y*CFG(Y_AXIS).steps_per_mm);
    3860:	80 91 c4 24 	lds	r24, 0x24C4
    3864:	90 91 c5 24 	lds	r25, 0x24C5
    3868:	a0 91 c6 24 	lds	r26, 0x24C6
    386c:	b0 91 c7 24 	lds	r27, 0x24C7
    3870:	8d 83       	std	Y+5, r24	; 0x05
    3872:	9e 83       	std	Y+6, r25	; 0x06
    3874:	af 83       	std	Y+7, r26	; 0x07
    3876:	b8 87       	std	Y+8, r27	; 0x08
    3878:	6d 85       	ldd	r22, Y+13	; 0x0d
    387a:	7e 85       	ldd	r23, Y+14	; 0x0e
    387c:	8f 85       	ldd	r24, Y+15	; 0x0f
    387e:	98 89       	ldd	r25, Y+16	; 0x10
    3880:	2d 81       	ldd	r18, Y+5	; 0x05
    3882:	3e 81       	ldd	r19, Y+6	; 0x06
    3884:	4f 81       	ldd	r20, Y+7	; 0x07
    3886:	58 85       	ldd	r21, Y+8	; 0x08
    3888:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    388c:	0e 94 48 45 	call	0x8a90	; 0x8a90 <lround>
    3890:	5b 01       	movw	r10, r22
    3892:	6c 01       	movw	r12, r24
    3894:	a0 92 91 21 	sts	0x2191, r10
    3898:	b0 92 92 21 	sts	0x2192, r11
    389c:	c0 92 93 21 	sts	0x2193, r12
    38a0:	d0 92 94 21 	sts	0x2194, r13
	mc.target[Z_AXIS] = lround(z*CFG(Z_AXIS).steps_per_mm); 
    38a4:	20 91 dc 24 	lds	r18, 0x24DC
    38a8:	30 91 dd 24 	lds	r19, 0x24DD
    38ac:	40 91 de 24 	lds	r20, 0x24DE
    38b0:	50 91 df 24 	lds	r21, 0x24DF
    38b4:	29 83       	std	Y+1, r18	; 0x01
    38b6:	3a 83       	std	Y+2, r19	; 0x02
    38b8:	4b 83       	std	Y+3, r20	; 0x03
    38ba:	5c 83       	std	Y+4, r21	; 0x04
    38bc:	c8 01       	movw	r24, r16
    38be:	b7 01       	movw	r22, r14
    38c0:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    38c4:	0e 94 48 45 	call	0x8a90	; 0x8a90 <lround>
    38c8:	9b 01       	movw	r18, r22
    38ca:	ac 01       	movw	r20, r24
    38cc:	20 93 95 21 	sts	0x2195, r18
    38d0:	30 93 96 21 	sts	0x2196, r19
    38d4:	40 93 97 21 	sts	0x2197, r20
    38d8:	50 93 98 21 	sts	0x2198, r21

	mc.steps[X_AXIS] = mc.target[X_AXIS]-mc.position[X_AXIS];
    38dc:	80 91 81 21 	lds	r24, 0x2181
    38e0:	90 91 82 21 	lds	r25, 0x2182
    38e4:	a0 91 83 21 	lds	r26, 0x2183
    38e8:	b0 91 84 21 	lds	r27, 0x2184
    38ec:	83 01       	movw	r16, r6
    38ee:	72 01       	movw	r14, r4
    38f0:	e8 1a       	sub	r14, r24
    38f2:	f9 0a       	sbc	r15, r25
    38f4:	0a 0b       	sbc	r16, r26
    38f6:	1b 0b       	sbc	r17, r27
    38f8:	e0 92 99 21 	sts	0x2199, r14
    38fc:	f0 92 9a 21 	sts	0x219A, r15
    3900:	00 93 9b 21 	sts	0x219B, r16
    3904:	10 93 9c 21 	sts	0x219C, r17
	mc.steps[Y_AXIS] = mc.target[Y_AXIS]-mc.position[Y_AXIS];
    3908:	80 91 85 21 	lds	r24, 0x2185
    390c:	90 91 86 21 	lds	r25, 0x2186
    3910:	a0 91 87 21 	lds	r26, 0x2187
    3914:	b0 91 88 21 	lds	r27, 0x2188
    3918:	a8 1a       	sub	r10, r24
    391a:	b9 0a       	sbc	r11, r25
    391c:	ca 0a       	sbc	r12, r26
    391e:	db 0a       	sbc	r13, r27
    3920:	a0 92 9d 21 	sts	0x219D, r10
    3924:	b0 92 9e 21 	sts	0x219E, r11
    3928:	c0 92 9f 21 	sts	0x219F, r12
    392c:	d0 92 a0 21 	sts	0x21A0, r13
	mc.steps[Z_AXIS] = mc.target[Z_AXIS]-mc.position[Z_AXIS];
    3930:	80 91 89 21 	lds	r24, 0x2189
    3934:	90 91 8a 21 	lds	r25, 0x218A
    3938:	a0 91 8b 21 	lds	r26, 0x218B
    393c:	b0 91 8c 21 	lds	r27, 0x218C
    3940:	19 01       	movw	r2, r18
    3942:	2a 01       	movw	r4, r20
    3944:	28 1a       	sub	r2, r24
    3946:	39 0a       	sbc	r3, r25
    3948:	4a 0a       	sbc	r4, r26
    394a:	5b 0a       	sbc	r5, r27
    394c:	20 92 a1 21 	sts	0x21A1, r2
    3950:	30 92 a2 21 	sts	0x21A2, r3
    3954:	40 92 a3 21 	sts	0x21A3, r4
    3958:	50 92 a4 21 	sts	0x21A4, r5

	if (invert_feed_rate) {
    395c:	89 28       	or	r8, r9
    395e:	59 f0       	breq	.+22     	; 0x3976 <mc_line_nonblock+0x188>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3960:	60 ec       	ldi	r22, 0xC0	; 192
    3962:	71 ee       	ldi	r23, 0xE1	; 225
    3964:	84 e6       	ldi	r24, 0x64	; 100
    3966:	9c e4       	ldi	r25, 0x4C	; 76
    3968:	29 89       	ldd	r18, Y+17	; 0x11
    396a:	3a 89       	ldd	r19, Y+18	; 0x12
    396c:	4b 89       	ldd	r20, Y+19	; 0x13
    396e:	5c 89       	ldd	r21, Y+20	; 0x14
    3970:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    3974:	4a c0       	rjmp	.+148    	; 0x3a0a <mc_line_nonblock+0x21c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X_AXIS]/CFG(X_AXIS).steps_per_mm) + 
    3976:	c8 01       	movw	r24, r16
    3978:	b7 01       	movw	r22, r14
    397a:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    397e:	29 85       	ldd	r18, Y+9	; 0x09
    3980:	3a 85       	ldd	r19, Y+10	; 0x0a
    3982:	4b 85       	ldd	r20, Y+11	; 0x0b
    3984:	5c 85       	ldd	r21, Y+12	; 0x0c
    3986:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    398a:	0e 94 23 46 	call	0x8c46	; 0x8c46 <square>
    398e:	3b 01       	movw	r6, r22
    3990:	4c 01       	movw	r8, r24
    3992:	c6 01       	movw	r24, r12
    3994:	b5 01       	movw	r22, r10
    3996:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    399a:	2d 81       	ldd	r18, Y+5	; 0x05
    399c:	3e 81       	ldd	r19, Y+6	; 0x06
    399e:	4f 81       	ldd	r20, Y+7	; 0x07
    39a0:	58 85       	ldd	r21, Y+8	; 0x08
    39a2:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    39a6:	0e 94 23 46 	call	0x8c46	; 0x8c46 <square>
    39aa:	5b 01       	movw	r10, r22
    39ac:	6c 01       	movw	r12, r24
    39ae:	c2 01       	movw	r24, r4
    39b0:	b1 01       	movw	r22, r2
    39b2:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    39b6:	29 81       	ldd	r18, Y+1	; 0x01
    39b8:	3a 81       	ldd	r19, Y+2	; 0x02
    39ba:	4b 81       	ldd	r20, Y+3	; 0x03
    39bc:	5c 81       	ldd	r21, Y+4	; 0x04
    39be:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    39c2:	0e 94 23 46 	call	0x8c46	; 0x8c46 <square>
    39c6:	7b 01       	movw	r14, r22
    39c8:	8c 01       	movw	r16, r24
    39ca:	c4 01       	movw	r24, r8
    39cc:	b3 01       	movw	r22, r6
    39ce:	a6 01       	movw	r20, r12
    39d0:	95 01       	movw	r18, r10
    39d2:	0e 94 17 42 	call	0x842e	; 0x842e <__addsf3>
    39d6:	a8 01       	movw	r20, r16
    39d8:	97 01       	movw	r18, r14
    39da:	0e 94 17 42 	call	0x842e	; 0x842e <__addsf3>
    39de:	0e 94 e5 45 	call	0x8bca	; 0x8bca <sqrt>
    39e2:	60 93 a9 21 	sts	0x21A9, r22
    39e6:	70 93 aa 21 	sts	0x21AA, r23
    39ea:	80 93 ab 21 	sts	0x21AB, r24
    39ee:	90 93 ac 21 	sts	0x21AC, r25
							   square(mc.steps[Y_AXIS]/CFG(Y_AXIS).steps_per_mm) + 
							   square(mc.steps[Z_AXIS]/CFG(Z_AXIS).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    39f2:	29 89       	ldd	r18, Y+17	; 0x11
    39f4:	3a 89       	ldd	r19, Y+18	; 0x12
    39f6:	4b 89       	ldd	r20, Y+19	; 0x13
    39f8:	5c 89       	ldd	r21, Y+20	; 0x14
    39fa:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	34 e2       	ldi	r19, 0x24	; 36
    3a02:	44 e7       	ldi	r20, 0x74	; 116
    3a04:	59 e4       	ldi	r21, 0x49	; 73
    3a06:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    3a0a:	0e 94 48 45 	call	0x8a90	; 0x8a90 <lround>
    3a0e:	60 93 a5 21 	sts	0x21A5, r22
    3a12:	70 93 a6 21 	sts	0x21A6, r23
    3a16:	80 93 a7 21 	sts	0x21A7, r24
    3a1a:	90 93 a8 21 	sts	0x21A8, r25
	}
	mc.line_state = MC_STATE_NEW;
    3a1e:	81 e0       	ldi	r24, 0x01	; 1
    3a20:	80 93 80 21 	sts	0x2180, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3a24:	e1 e8       	ldi	r30, 0x81	; 129
    3a26:	f1 e2       	ldi	r31, 0x21	; 33
    3a28:	df 01       	movw	r26, r30
    3a2a:	1c 96       	adiw	r26, 0x0c	; 12
    3a2c:	8c e0       	ldi	r24, 0x0C	; 12
    3a2e:	0d 90       	ld	r0, X+
    3a30:	01 92       	st	Z+, r0
    3a32:	81 50       	subi	r24, 0x01	; 1
    3a34:	e1 f7       	brne	.-8      	; 0x3a2e <mc_line_nonblock+0x240>
	return (mc_line_continuation());
    3a36:	0e 94 ae 1b 	call	0x375c	; 0x375c <mc_line_continuation>
}
    3a3a:	64 96       	adiw	r28, 0x14	; 20
    3a3c:	cd bf       	out	0x3d, r28	; 61
    3a3e:	de bf       	out	0x3e, r29	; 62
    3a40:	cf 91       	pop	r28
    3a42:	df 91       	pop	r29
    3a44:	1f 91       	pop	r17
    3a46:	0f 91       	pop	r16
    3a48:	ff 90       	pop	r15
    3a4a:	ef 90       	pop	r14
    3a4c:	df 90       	pop	r13
    3a4e:	cf 90       	pop	r12
    3a50:	bf 90       	pop	r11
    3a52:	af 90       	pop	r10
    3a54:	9f 90       	pop	r9
    3a56:	8f 90       	pop	r8
    3a58:	7f 90       	pop	r7
    3a5a:	6f 90       	pop	r6
    3a5c:	5f 90       	pop	r5
    3a5e:	4f 90       	pop	r4
    3a60:	3f 90       	pop	r3
    3a62:	2f 90       	pop	r2
    3a64:	08 95       	ret

00003a66 <mc_line>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    3a66:	2f 92       	push	r2
    3a68:	3f 92       	push	r3
    3a6a:	4f 92       	push	r4
    3a6c:	5f 92       	push	r5
    3a6e:	6f 92       	push	r6
    3a70:	7f 92       	push	r7
    3a72:	8f 92       	push	r8
    3a74:	9f 92       	push	r9
    3a76:	af 92       	push	r10
    3a78:	bf 92       	push	r11
    3a7a:	cf 92       	push	r12
    3a7c:	df 92       	push	r13
    3a7e:	ef 92       	push	r14
    3a80:	ff 92       	push	r15
    3a82:	0f 93       	push	r16
    3a84:	1f 93       	push	r17
    3a86:	df 93       	push	r29
    3a88:	cf 93       	push	r28
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
    3a8e:	6c 97       	sbiw	r28, 0x1c	; 28
    3a90:	cd bf       	out	0x3d, r28	; 61
    3a92:	de bf       	out	0x3e, r29	; 62
    3a94:	2d 8b       	std	Y+21, r18	; 0x15
    3a96:	3e 8b       	std	Y+22, r19	; 0x16
    3a98:	4f 8b       	std	Y+23, r20	; 0x17
    3a9a:	58 8f       	std	Y+24, r21	; 0x18
    3a9c:	a9 8e       	std	Y+25, r10	; 0x19
    3a9e:	ba 8e       	std	Y+26, r11	; 0x1a
    3aa0:	cb 8e       	std	Y+27, r12	; 0x1b
    3aa2:	dc 8e       	std	Y+28, r13	; 0x1c
	mc.target[X_AXIS] = lround(x*CFG(X_AXIS).steps_per_mm);
    3aa4:	20 91 ac 24 	lds	r18, 0x24AC
    3aa8:	30 91 ad 24 	lds	r19, 0x24AD
    3aac:	40 91 ae 24 	lds	r20, 0x24AE
    3ab0:	50 91 af 24 	lds	r21, 0x24AF
    3ab4:	29 8b       	std	Y+17, r18	; 0x11
    3ab6:	3a 8b       	std	Y+18, r19	; 0x12
    3ab8:	4b 8b       	std	Y+19, r20	; 0x13
    3aba:	5c 8b       	std	Y+20, r21	; 0x14
    3abc:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    3ac0:	0e 94 48 45 	call	0x8a90	; 0x8a90 <lround>
    3ac4:	2b 01       	movw	r4, r22
    3ac6:	3c 01       	movw	r6, r24
    3ac8:	40 92 8d 21 	sts	0x218D, r4
    3acc:	50 92 8e 21 	sts	0x218E, r5
    3ad0:	60 92 8f 21 	sts	0x218F, r6
    3ad4:	70 92 90 21 	sts	0x2190, r7
	mc.target[Y_AXIS] = lround(y*CFG(Y_AXIS).steps_per_mm);
    3ad8:	80 91 c4 24 	lds	r24, 0x24C4
    3adc:	90 91 c5 24 	lds	r25, 0x24C5
    3ae0:	a0 91 c6 24 	lds	r26, 0x24C6
    3ae4:	b0 91 c7 24 	lds	r27, 0x24C7
    3ae8:	8d 87       	std	Y+13, r24	; 0x0d
    3aea:	9e 87       	std	Y+14, r25	; 0x0e
    3aec:	af 87       	std	Y+15, r26	; 0x0f
    3aee:	b8 8b       	std	Y+16, r27	; 0x10
    3af0:	6d 89       	ldd	r22, Y+21	; 0x15
    3af2:	7e 89       	ldd	r23, Y+22	; 0x16
    3af4:	8f 89       	ldd	r24, Y+23	; 0x17
    3af6:	98 8d       	ldd	r25, Y+24	; 0x18
    3af8:	2d 85       	ldd	r18, Y+13	; 0x0d
    3afa:	3e 85       	ldd	r19, Y+14	; 0x0e
    3afc:	4f 85       	ldd	r20, Y+15	; 0x0f
    3afe:	58 89       	ldd	r21, Y+16	; 0x10
    3b00:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    3b04:	0e 94 48 45 	call	0x8a90	; 0x8a90 <lround>
    3b08:	5b 01       	movw	r10, r22
    3b0a:	6c 01       	movw	r12, r24
    3b0c:	a0 92 91 21 	sts	0x2191, r10
    3b10:	b0 92 92 21 	sts	0x2192, r11
    3b14:	c0 92 93 21 	sts	0x2193, r12
    3b18:	d0 92 94 21 	sts	0x2194, r13
	mc.target[Z_AXIS] = lround(z*CFG(Z_AXIS).steps_per_mm); 
    3b1c:	20 91 dc 24 	lds	r18, 0x24DC
    3b20:	30 91 dd 24 	lds	r19, 0x24DD
    3b24:	40 91 de 24 	lds	r20, 0x24DE
    3b28:	50 91 df 24 	lds	r21, 0x24DF
    3b2c:	29 87       	std	Y+9, r18	; 0x09
    3b2e:	3a 87       	std	Y+10, r19	; 0x0a
    3b30:	4b 87       	std	Y+11, r20	; 0x0b
    3b32:	5c 87       	std	Y+12, r21	; 0x0c
    3b34:	c8 01       	movw	r24, r16
    3b36:	b7 01       	movw	r22, r14
    3b38:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    3b3c:	0e 94 48 45 	call	0x8a90	; 0x8a90 <lround>
    3b40:	9b 01       	movw	r18, r22
    3b42:	ac 01       	movw	r20, r24
    3b44:	20 93 95 21 	sts	0x2195, r18
    3b48:	30 93 96 21 	sts	0x2196, r19
    3b4c:	40 93 97 21 	sts	0x2197, r20
    3b50:	50 93 98 21 	sts	0x2198, r21

	mc.steps[X_AXIS] = mc.target[X_AXIS]-mc.position[X_AXIS];
    3b54:	80 91 81 21 	lds	r24, 0x2181
    3b58:	90 91 82 21 	lds	r25, 0x2182
    3b5c:	a0 91 83 21 	lds	r26, 0x2183
    3b60:	b0 91 84 21 	lds	r27, 0x2184
    3b64:	83 01       	movw	r16, r6
    3b66:	72 01       	movw	r14, r4
    3b68:	e8 1a       	sub	r14, r24
    3b6a:	f9 0a       	sbc	r15, r25
    3b6c:	0a 0b       	sbc	r16, r26
    3b6e:	1b 0b       	sbc	r17, r27
    3b70:	ed 82       	std	Y+5, r14	; 0x05
    3b72:	fe 82       	std	Y+6, r15	; 0x06
    3b74:	0f 83       	std	Y+7, r16	; 0x07
    3b76:	18 87       	std	Y+8, r17	; 0x08
    3b78:	e0 92 99 21 	sts	0x2199, r14
    3b7c:	f0 92 9a 21 	sts	0x219A, r15
    3b80:	00 93 9b 21 	sts	0x219B, r16
    3b84:	10 93 9c 21 	sts	0x219C, r17
	mc.steps[Y_AXIS] = mc.target[Y_AXIS]-mc.position[Y_AXIS];
    3b88:	80 91 85 21 	lds	r24, 0x2185
    3b8c:	90 91 86 21 	lds	r25, 0x2186
    3b90:	a0 91 87 21 	lds	r26, 0x2187
    3b94:	b0 91 88 21 	lds	r27, 0x2188
    3b98:	86 01       	movw	r16, r12
    3b9a:	75 01       	movw	r14, r10
    3b9c:	e8 1a       	sub	r14, r24
    3b9e:	f9 0a       	sbc	r15, r25
    3ba0:	0a 0b       	sbc	r16, r26
    3ba2:	1b 0b       	sbc	r17, r27
    3ba4:	e9 82       	std	Y+1, r14	; 0x01
    3ba6:	fa 82       	std	Y+2, r15	; 0x02
    3ba8:	0b 83       	std	Y+3, r16	; 0x03
    3baa:	1c 83       	std	Y+4, r17	; 0x04
    3bac:	e0 92 9d 21 	sts	0x219D, r14
    3bb0:	f0 92 9e 21 	sts	0x219E, r15
    3bb4:	00 93 9f 21 	sts	0x219F, r16
    3bb8:	10 93 a0 21 	sts	0x21A0, r17
	mc.steps[Z_AXIS] = mc.target[Z_AXIS]-mc.position[Z_AXIS];
    3bbc:	80 91 89 21 	lds	r24, 0x2189
    3bc0:	90 91 8a 21 	lds	r25, 0x218A
    3bc4:	a0 91 8b 21 	lds	r26, 0x218B
    3bc8:	b0 91 8c 21 	lds	r27, 0x218C
    3bcc:	19 01       	movw	r2, r18
    3bce:	2a 01       	movw	r4, r20
    3bd0:	28 1a       	sub	r2, r24
    3bd2:	39 0a       	sbc	r3, r25
    3bd4:	4a 0a       	sbc	r4, r26
    3bd6:	5b 0a       	sbc	r5, r27
    3bd8:	20 92 a1 21 	sts	0x21A1, r2
    3bdc:	30 92 a2 21 	sts	0x21A2, r3
    3be0:	40 92 a3 21 	sts	0x21A3, r4
    3be4:	50 92 a4 21 	sts	0x21A4, r5

	if (invert_feed_rate) {
    3be8:	89 28       	or	r8, r9
    3bea:	59 f0       	breq	.+22     	; 0x3c02 <mc_line+0x19c>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3bec:	60 ec       	ldi	r22, 0xC0	; 192
    3bee:	71 ee       	ldi	r23, 0xE1	; 225
    3bf0:	84 e6       	ldi	r24, 0x64	; 100
    3bf2:	9c e4       	ldi	r25, 0x4C	; 76
    3bf4:	29 8d       	ldd	r18, Y+25	; 0x19
    3bf6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3bf8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3bfa:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3bfc:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    3c00:	4e c0       	rjmp	.+156    	; 0x3c9e <mc_line+0x238>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X_AXIS]/CFG(X_AXIS).steps_per_mm) + 
    3c02:	6d 81       	ldd	r22, Y+5	; 0x05
    3c04:	7e 81       	ldd	r23, Y+6	; 0x06
    3c06:	8f 81       	ldd	r24, Y+7	; 0x07
    3c08:	98 85       	ldd	r25, Y+8	; 0x08
    3c0a:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    3c0e:	29 89       	ldd	r18, Y+17	; 0x11
    3c10:	3a 89       	ldd	r19, Y+18	; 0x12
    3c12:	4b 89       	ldd	r20, Y+19	; 0x13
    3c14:	5c 89       	ldd	r21, Y+20	; 0x14
    3c16:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    3c1a:	0e 94 23 46 	call	0x8c46	; 0x8c46 <square>
    3c1e:	3b 01       	movw	r6, r22
    3c20:	4c 01       	movw	r8, r24
    3c22:	69 81       	ldd	r22, Y+1	; 0x01
    3c24:	7a 81       	ldd	r23, Y+2	; 0x02
    3c26:	8b 81       	ldd	r24, Y+3	; 0x03
    3c28:	9c 81       	ldd	r25, Y+4	; 0x04
    3c2a:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    3c2e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3c30:	3e 85       	ldd	r19, Y+14	; 0x0e
    3c32:	4f 85       	ldd	r20, Y+15	; 0x0f
    3c34:	58 89       	ldd	r21, Y+16	; 0x10
    3c36:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    3c3a:	0e 94 23 46 	call	0x8c46	; 0x8c46 <square>
    3c3e:	5b 01       	movw	r10, r22
    3c40:	6c 01       	movw	r12, r24
    3c42:	c2 01       	movw	r24, r4
    3c44:	b1 01       	movw	r22, r2
    3c46:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    3c4a:	29 85       	ldd	r18, Y+9	; 0x09
    3c4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c4e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3c50:	5c 85       	ldd	r21, Y+12	; 0x0c
    3c52:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    3c56:	0e 94 23 46 	call	0x8c46	; 0x8c46 <square>
    3c5a:	7b 01       	movw	r14, r22
    3c5c:	8c 01       	movw	r16, r24
    3c5e:	c4 01       	movw	r24, r8
    3c60:	b3 01       	movw	r22, r6
    3c62:	a6 01       	movw	r20, r12
    3c64:	95 01       	movw	r18, r10
    3c66:	0e 94 17 42 	call	0x842e	; 0x842e <__addsf3>
    3c6a:	a8 01       	movw	r20, r16
    3c6c:	97 01       	movw	r18, r14
    3c6e:	0e 94 17 42 	call	0x842e	; 0x842e <__addsf3>
    3c72:	0e 94 e5 45 	call	0x8bca	; 0x8bca <sqrt>
    3c76:	60 93 a9 21 	sts	0x21A9, r22
    3c7a:	70 93 aa 21 	sts	0x21AA, r23
    3c7e:	80 93 ab 21 	sts	0x21AB, r24
    3c82:	90 93 ac 21 	sts	0x21AC, r25
							   square(mc.steps[Y_AXIS]/CFG(Y_AXIS).steps_per_mm) + 
							   square(mc.steps[Z_AXIS]/CFG(Z_AXIS).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3c86:	29 8d       	ldd	r18, Y+25	; 0x19
    3c88:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3c8a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3c8c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3c8e:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	34 e2       	ldi	r19, 0x24	; 36
    3c96:	44 e7       	ldi	r20, 0x74	; 116
    3c98:	59 e4       	ldi	r21, 0x49	; 73
    3c9a:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    3c9e:	0e 94 48 45 	call	0x8a90	; 0x8a90 <lround>
    3ca2:	60 93 a5 21 	sts	0x21A5, r22
    3ca6:	70 93 a6 21 	sts	0x21A6, r23
    3caa:	80 93 a7 21 	sts	0x21A7, r24
    3cae:	90 93 a8 21 	sts	0x21A8, r25
	}
    mv_queue_move_buffer(mc.steps[X_AXIS], mc.steps[Y_AXIS], mc.steps[Z_AXIS], mc.microseconds); 
    3cb2:	a0 90 a5 21 	lds	r10, 0x21A5
    3cb6:	b0 90 a6 21 	lds	r11, 0x21A6
    3cba:	c0 90 a7 21 	lds	r12, 0x21A7
    3cbe:	d0 90 a8 21 	lds	r13, 0x21A8
    3cc2:	6d 81       	ldd	r22, Y+5	; 0x05
    3cc4:	7e 81       	ldd	r23, Y+6	; 0x06
    3cc6:	8f 81       	ldd	r24, Y+7	; 0x07
    3cc8:	98 85       	ldd	r25, Y+8	; 0x08
    3cca:	29 81       	ldd	r18, Y+1	; 0x01
    3ccc:	3a 81       	ldd	r19, Y+2	; 0x02
    3cce:	4b 81       	ldd	r20, Y+3	; 0x03
    3cd0:	5c 81       	ldd	r21, Y+4	; 0x04
    3cd2:	82 01       	movw	r16, r4
    3cd4:	71 01       	movw	r14, r2
    3cd6:	0e 94 5f 31 	call	0x62be	; 0x62be <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3cda:	e1 e8       	ldi	r30, 0x81	; 129
    3cdc:	f1 e2       	ldi	r31, 0x21	; 33
    3cde:	df 01       	movw	r26, r30
    3ce0:	1c 96       	adiw	r26, 0x0c	; 12
    3ce2:	8c e0       	ldi	r24, 0x0C	; 12
    3ce4:	0d 90       	ld	r0, X+
    3ce6:	01 92       	st	Z+, r0
    3ce8:	81 50       	subi	r24, 0x01	; 1
    3cea:	e1 f7       	brne	.-8      	; 0x3ce4 <mc_line+0x27e>
	return (TG_OK);
}
    3cec:	80 e0       	ldi	r24, 0x00	; 0
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	6c 96       	adiw	r28, 0x1c	; 28
    3cf2:	cd bf       	out	0x3d, r28	; 61
    3cf4:	de bf       	out	0x3e, r29	; 62
    3cf6:	cf 91       	pop	r28
    3cf8:	df 91       	pop	r29
    3cfa:	1f 91       	pop	r17
    3cfc:	0f 91       	pop	r16
    3cfe:	ff 90       	pop	r15
    3d00:	ef 90       	pop	r14
    3d02:	df 90       	pop	r13
    3d04:	cf 90       	pop	r12
    3d06:	bf 90       	pop	r11
    3d08:	af 90       	pop	r10
    3d0a:	9f 90       	pop	r9
    3d0c:	8f 90       	pop	r8
    3d0e:	7f 90       	pop	r7
    3d10:	6f 90       	pop	r6
    3d12:	5f 90       	pop	r5
    3d14:	4f 90       	pop	r4
    3d16:	3f 90       	pop	r3
    3d18:	2f 90       	pop	r2
    3d1a:	08 95       	ret

00003d1c <mc_arc_continuation>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continuation() 
{
    3d1c:	8f 92       	push	r8
    3d1e:	9f 92       	push	r9
    3d20:	af 92       	push	r10
    3d22:	bf 92       	push	r11
    3d24:	cf 92       	push	r12
    3d26:	df 92       	push	r13
    3d28:	ef 92       	push	r14
    3d2a:	ff 92       	push	r15
    3d2c:	0f 93       	push	r16
    3d2e:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3d30:	80 91 fb 24 	lds	r24, 0x24FB
    3d34:	88 23       	and	r24, r24
    3d36:	19 f4       	brne	.+6      	; 0x3d3e <mc_arc_continuation+0x22>
    3d38:	21 e0       	ldi	r18, 0x01	; 1
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	dd c0       	rjmp	.+442    	; 0x3ef8 <mc_arc_continuation+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3d3e:	81 30       	cpi	r24, 0x01	; 1
    3d40:	09 f0       	breq	.+2      	; 0x3d44 <mc_arc_continuation+0x28>
    3d42:	ca c0       	rjmp	.+404    	; 0x3ed8 <mc_arc_continuation+0x1bc>
		ma.segment_counter=0;
    3d44:	10 92 fe 24 	sts	0x24FE, r1
    3d48:	10 92 ff 24 	sts	0x24FF, r1
		ma.arc_state = MC_STATE_RUNNING;
    3d4c:	82 e0       	ldi	r24, 0x02	; 2
    3d4e:	80 93 fb 24 	sts	0x24FB, r24
    3d52:	c2 c0       	rjmp	.+388    	; 0x3ed8 <mc_arc_continuation+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3d54:	0e 94 33 31 	call	0x6266	; 0x6266 <mv_test_move_buffer_full>
    3d58:	88 23       	and	r24, r24
    3d5a:	19 f0       	breq	.+6      	; 0x3d62 <mc_arc_continuation+0x46>
    3d5c:	22 e0       	ldi	r18, 0x02	; 2
    3d5e:	30 e0       	ldi	r19, 0x00	; 0
    3d60:	cb c0       	rjmp	.+406    	; 0x3ef8 <mc_arc_continuation+0x1dc>
			return (TG_CONTINUE);
		}
		ma.segment_counter++;
    3d62:	80 91 fe 24 	lds	r24, 0x24FE
    3d66:	90 91 ff 24 	lds	r25, 0x24FF
    3d6a:	01 96       	adiw	r24, 0x01	; 1
    3d6c:	80 93 fe 24 	sts	0x24FE, r24
    3d70:	90 93 ff 24 	sts	0x24FF, r25
		ma.theta += ma.theta_per_segment;
    3d74:	60 91 20 25 	lds	r22, 0x2520
    3d78:	70 91 21 25 	lds	r23, 0x2521
    3d7c:	80 91 22 25 	lds	r24, 0x2522
    3d80:	90 91 23 25 	lds	r25, 0x2523
    3d84:	20 91 2c 25 	lds	r18, 0x252C
    3d88:	30 91 2d 25 	lds	r19, 0x252D
    3d8c:	40 91 2e 25 	lds	r20, 0x252E
    3d90:	50 91 2f 25 	lds	r21, 0x252F
    3d94:	0e 94 17 42 	call	0x842e	; 0x842e <__addsf3>
    3d98:	7b 01       	movw	r14, r22
    3d9a:	8c 01       	movw	r16, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	d8 01       	movw	r26, r16
    3da0:	80 93 20 25 	sts	0x2520, r24
    3da4:	90 93 21 25 	sts	0x2521, r25
    3da8:	a0 93 22 25 	sts	0x2522, r26
    3dac:	b0 93 23 25 	sts	0x2523, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3db0:	b7 01       	movw	r22, r14
    3db2:	c8 01       	movw	r24, r16
    3db4:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <sin>
    3db8:	80 90 24 25 	lds	r8, 0x2524
    3dbc:	90 90 25 25 	lds	r9, 0x2525
    3dc0:	a0 90 26 25 	lds	r10, 0x2526
    3dc4:	b0 90 27 25 	lds	r11, 0x2527
    3dc8:	c0 90 02 25 	lds	r12, 0x2502
    3dcc:	d0 90 03 25 	lds	r13, 0x2503
    3dd0:	cc 0c       	add	r12, r12
    3dd2:	dd 1c       	adc	r13, r13
    3dd4:	cc 0c       	add	r12, r12
    3dd6:	dd 1c       	adc	r13, r13
    3dd8:	2b ef       	ldi	r18, 0xFB	; 251
    3dda:	34 e2       	ldi	r19, 0x24	; 36
    3ddc:	c2 0e       	add	r12, r18
    3dde:	d3 1e       	adc	r13, r19
    3de0:	a5 01       	movw	r20, r10
    3de2:	94 01       	movw	r18, r8
    3de4:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    3de8:	9b 01       	movw	r18, r22
    3dea:	ac 01       	movw	r20, r24
    3dec:	60 91 18 25 	lds	r22, 0x2518
    3df0:	70 91 19 25 	lds	r23, 0x2519
    3df4:	80 91 1a 25 	lds	r24, 0x251A
    3df8:	90 91 1b 25 	lds	r25, 0x251B
    3dfc:	0e 94 17 42 	call	0x842e	; 0x842e <__addsf3>
    3e00:	f6 01       	movw	r30, r12
    3e02:	65 87       	std	Z+13, r22	; 0x0d
    3e04:	76 87       	std	Z+14, r23	; 0x0e
    3e06:	87 87       	std	Z+15, r24	; 0x0f
    3e08:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3e0a:	b7 01       	movw	r22, r14
    3e0c:	c8 01       	movw	r24, r16
    3e0e:	0e 94 ba 42 	call	0x8574	; 0x8574 <cos>
    3e12:	00 91 04 25 	lds	r16, 0x2504
    3e16:	10 91 05 25 	lds	r17, 0x2505
    3e1a:	00 0f       	add	r16, r16
    3e1c:	11 1f       	adc	r17, r17
    3e1e:	00 0f       	add	r16, r16
    3e20:	11 1f       	adc	r17, r17
    3e22:	05 50       	subi	r16, 0x05	; 5
    3e24:	1b 4d       	sbci	r17, 0xDB	; 219
    3e26:	a5 01       	movw	r20, r10
    3e28:	94 01       	movw	r18, r8
    3e2a:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    3e2e:	9b 01       	movw	r18, r22
    3e30:	ac 01       	movw	r20, r24
    3e32:	60 91 1c 25 	lds	r22, 0x251C
    3e36:	70 91 1d 25 	lds	r23, 0x251D
    3e3a:	80 91 1e 25 	lds	r24, 0x251E
    3e3e:	90 91 1f 25 	lds	r25, 0x251F
    3e42:	0e 94 17 42 	call	0x842e	; 0x842e <__addsf3>
    3e46:	f8 01       	movw	r30, r16
    3e48:	65 87       	std	Z+13, r22	; 0x0d
    3e4a:	76 87       	std	Z+14, r23	; 0x0e
    3e4c:	87 87       	std	Z+15, r24	; 0x0f
    3e4e:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3e50:	00 91 06 25 	lds	r16, 0x2506
    3e54:	10 91 07 25 	lds	r17, 0x2507
    3e58:	00 0f       	add	r16, r16
    3e5a:	11 1f       	adc	r17, r17
    3e5c:	00 0f       	add	r16, r16
    3e5e:	11 1f       	adc	r17, r17
    3e60:	05 50       	subi	r16, 0x05	; 5
    3e62:	1b 4d       	sbci	r17, 0xDB	; 219
    3e64:	f8 01       	movw	r30, r16
    3e66:	65 85       	ldd	r22, Z+13	; 0x0d
    3e68:	76 85       	ldd	r23, Z+14	; 0x0e
    3e6a:	87 85       	ldd	r24, Z+15	; 0x0f
    3e6c:	90 89       	ldd	r25, Z+16	; 0x10
    3e6e:	20 91 30 25 	lds	r18, 0x2530
    3e72:	30 91 31 25 	lds	r19, 0x2531
    3e76:	40 91 32 25 	lds	r20, 0x2532
    3e7a:	50 91 33 25 	lds	r21, 0x2533
    3e7e:	0e 94 17 42 	call	0x842e	; 0x842e <__addsf3>
    3e82:	f8 01       	movw	r30, r16
    3e84:	65 87       	std	Z+13, r22	; 0x0d
    3e86:	76 87       	std	Z+14, r23	; 0x0e
    3e88:	87 87       	std	Z+15, r24	; 0x0f
    3e8a:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X_AXIS], 
    3e8c:	60 91 08 25 	lds	r22, 0x2508
    3e90:	70 91 09 25 	lds	r23, 0x2509
    3e94:	80 91 0a 25 	lds	r24, 0x250A
    3e98:	90 91 0b 25 	lds	r25, 0x250B
    3e9c:	20 91 0c 25 	lds	r18, 0x250C
    3ea0:	30 91 0d 25 	lds	r19, 0x250D
    3ea4:	40 91 0e 25 	lds	r20, 0x250E
    3ea8:	50 91 0f 25 	lds	r21, 0x250F
    3eac:	e0 90 10 25 	lds	r14, 0x2510
    3eb0:	f0 90 11 25 	lds	r15, 0x2511
    3eb4:	00 91 12 25 	lds	r16, 0x2512
    3eb8:	10 91 13 25 	lds	r17, 0x2513
    3ebc:	a0 90 28 25 	lds	r10, 0x2528
    3ec0:	b0 90 29 25 	lds	r11, 0x2529
    3ec4:	c0 90 2a 25 	lds	r12, 0x252A
    3ec8:	d0 90 2b 25 	lds	r13, 0x252B
    3ecc:	80 90 00 25 	lds	r8, 0x2500
    3ed0:	90 90 01 25 	lds	r9, 0x2501
    3ed4:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3ed8:	20 91 fe 24 	lds	r18, 0x24FE
    3edc:	30 91 ff 24 	lds	r19, 0x24FF
    3ee0:	80 91 fc 24 	lds	r24, 0x24FC
    3ee4:	90 91 fd 24 	lds	r25, 0x24FD
    3ee8:	82 17       	cp	r24, r18
    3eea:	93 07       	cpc	r25, r19
    3eec:	0c f0       	brlt	.+2      	; 0x3ef0 <mc_arc_continuation+0x1d4>
    3eee:	32 cf       	rjmp	.-412    	; 0x3d54 <mc_arc_continuation+0x38>
				ma.dtarget[Y_AXIS], 
				ma.dtarget[Z_AXIS], 
				ma.feed_rate, 
				ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3ef0:	10 92 fb 24 	sts	0x24FB, r1
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3ef8:	c9 01       	movw	r24, r18
    3efa:	1f 91       	pop	r17
    3efc:	0f 91       	pop	r16
    3efe:	ff 90       	pop	r15
    3f00:	ef 90       	pop	r14
    3f02:	df 90       	pop	r13
    3f04:	cf 90       	pop	r12
    3f06:	bf 90       	pop	r11
    3f08:	af 90       	pop	r10
    3f0a:	9f 90       	pop	r9
    3f0c:	8f 90       	pop	r8
    3f0e:	08 95       	ret

00003f10 <mc_arc_nonblock>:

int mc_arc_nonblock(double theta, double angular_travel, 
					double radius, double linear_travel, 
					int axis_1, int axis_2, int axis_linear, 
					double feed_rate, int invert_feed_rate)
{
    3f10:	2f 92       	push	r2
    3f12:	3f 92       	push	r3
    3f14:	4f 92       	push	r4
    3f16:	5f 92       	push	r5
    3f18:	6f 92       	push	r6
    3f1a:	7f 92       	push	r7
    3f1c:	8f 92       	push	r8
    3f1e:	9f 92       	push	r9
    3f20:	af 92       	push	r10
    3f22:	bf 92       	push	r11
    3f24:	cf 92       	push	r12
    3f26:	df 92       	push	r13
    3f28:	ef 92       	push	r14
    3f2a:	ff 92       	push	r15
    3f2c:	0f 93       	push	r16
    3f2e:	1f 93       	push	r17
    3f30:	df 93       	push	r29
    3f32:	cf 93       	push	r28
    3f34:	cd b7       	in	r28, 0x3d	; 61
    3f36:	de b7       	in	r29, 0x3e	; 62
    3f38:	28 97       	sbiw	r28, 0x08	; 8
    3f3a:	cd bf       	out	0x3d, r28	; 61
    3f3c:	de bf       	out	0x3e, r29	; 62
    3f3e:	69 83       	std	Y+1, r22	; 0x01
    3f40:	7a 83       	std	Y+2, r23	; 0x02
    3f42:	8b 83       	std	Y+3, r24	; 0x03
    3f44:	9c 83       	std	Y+4, r25	; 0x04
    3f46:	29 01       	movw	r4, r18
    3f48:	3a 01       	movw	r6, r20
    3f4a:	ed 82       	std	Y+5, r14	; 0x05
    3f4c:	fe 82       	std	Y+6, r15	; 0x06
    3f4e:	0f 83       	std	Y+7, r16	; 0x07
    3f50:	18 87       	std	Y+8, r17	; 0x08
    3f52:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3f54:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3f56:	60 93 20 25 	sts	0x2520, r22
    3f5a:	70 93 21 25 	sts	0x2521, r23
    3f5e:	80 93 22 25 	sts	0x2522, r24
    3f62:	90 93 23 25 	sts	0x2523, r25
	ma.radius = radius;
    3f66:	e0 92 24 25 	sts	0x2524, r14
    3f6a:	f0 92 25 25 	sts	0x2525, r15
    3f6e:	00 93 26 25 	sts	0x2526, r16
    3f72:	10 93 27 25 	sts	0x2527, r17
	ma.angular_travel = angular_travel;
    3f76:	20 93 34 25 	sts	0x2534, r18
    3f7a:	30 93 35 25 	sts	0x2535, r19
    3f7e:	40 93 36 25 	sts	0x2536, r20
    3f82:	50 93 37 25 	sts	0x2537, r21
	ma.linear_travel = linear_travel;
    3f86:	a0 92 38 25 	sts	0x2538, r10
    3f8a:	b0 92 39 25 	sts	0x2539, r11
    3f8e:	c0 92 3a 25 	sts	0x253A, r12
    3f92:	d0 92 3b 25 	sts	0x253B, r13
	ma.feed_rate = feed_rate;
    3f96:	8a a1       	ldd	r24, Y+34	; 0x22
    3f98:	9b a1       	ldd	r25, Y+35	; 0x23
    3f9a:	ac a1       	ldd	r26, Y+36	; 0x24
    3f9c:	bd a1       	ldd	r27, Y+37	; 0x25
    3f9e:	80 93 28 25 	sts	0x2528, r24
    3fa2:	90 93 29 25 	sts	0x2529, r25
    3fa6:	a0 93 2a 25 	sts	0x252A, r26
    3faa:	b0 93 2b 25 	sts	0x252B, r27
	ma.invert_feed_rate = invert_feed_rate;
    3fae:	ae a1       	ldd	r26, Y+38	; 0x26
    3fb0:	bf a1       	ldd	r27, Y+39	; 0x27
    3fb2:	a0 93 00 25 	sts	0x2500, r26
    3fb6:	b0 93 01 25 	sts	0x2501, r27
	ma.axis_1 = axis_1;
    3fba:	80 92 02 25 	sts	0x2502, r8
    3fbe:	90 92 03 25 	sts	0x2503, r9
	ma.axis_2 = axis_2;
    3fc2:	20 92 04 25 	sts	0x2504, r2
    3fc6:	30 92 05 25 	sts	0x2505, r3
	ma.axis_linear = axis_linear;
    3fca:	e8 a1       	ldd	r30, Y+32	; 0x20
    3fcc:	f9 a1       	ldd	r31, Y+33	; 0x21
    3fce:	e0 93 06 25 	sts	0x2506, r30
    3fd2:	f0 93 07 25 	sts	0x2507, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3fd6:	ca 01       	movw	r24, r20
    3fd8:	b9 01       	movw	r22, r18
    3fda:	a8 01       	movw	r20, r16
    3fdc:	97 01       	movw	r18, r14
    3fde:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    3fe2:	7b 01       	movw	r14, r22
    3fe4:	8c 01       	movw	r16, r24
    3fe6:	c6 01       	movw	r24, r12
    3fe8:	b5 01       	movw	r22, r10
    3fea:	0e 94 25 43 	call	0x864a	; 0x864a <__fixsfsi>
    3fee:	97 ff       	sbrs	r25, 7
    3ff0:	07 c0       	rjmp	.+14     	; 0x4000 <mc_arc_nonblock+0xf0>
    3ff2:	90 95       	com	r25
    3ff4:	80 95       	com	r24
    3ff6:	70 95       	com	r23
    3ff8:	61 95       	neg	r22
    3ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    3ffc:	8f 4f       	sbci	r24, 0xFF	; 255
    3ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    4000:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    4004:	9b 01       	movw	r18, r22
    4006:	ac 01       	movw	r20, r24
    4008:	c8 01       	movw	r24, r16
    400a:	b7 01       	movw	r22, r14
    400c:	0e 94 b3 44 	call	0x8966	; 0x8966 <hypot>
    4010:	7b 01       	movw	r14, r22
    4012:	8c 01       	movw	r16, r24
    4014:	60 93 14 25 	sts	0x2514, r22
    4018:	70 93 15 25 	sts	0x2515, r23
    401c:	80 93 16 25 	sts	0x2516, r24
    4020:	90 93 17 25 	sts	0x2517, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    4024:	2a e0       	ldi	r18, 0x0A	; 10
    4026:	37 ed       	ldi	r19, 0xD7	; 215
    4028:	43 e2       	ldi	r20, 0x23	; 35
    402a:	5c e3       	ldi	r21, 0x3C	; 60
    402c:	0e 94 b6 42 	call	0x856c	; 0x856c <__cmpsf2>
    4030:	88 23       	and	r24, r24
    4032:	1c f4       	brge	.+6      	; 0x403a <mc_arc_nonblock+0x12a>
    4034:	2f e0       	ldi	r18, 0x0F	; 15
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	fb c0       	rjmp	.+502    	; 0x4230 <mc_arc_nonblock+0x320>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    403a:	c8 01       	movw	r24, r16
    403c:	b7 01       	movw	r22, r14
    403e:	20 91 8d 24 	lds	r18, 0x248D
    4042:	30 91 8e 24 	lds	r19, 0x248E
    4046:	40 91 8f 24 	lds	r20, 0x248F
    404a:	50 91 90 24 	lds	r21, 0x2490
    404e:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    4052:	0e 94 a3 42 	call	0x8546	; 0x8546 <ceil>
    4056:	0e 94 25 43 	call	0x864a	; 0x864a <__fixsfsi>
    405a:	8b 01       	movw	r16, r22
    405c:	60 93 fc 24 	sts	0x24FC, r22
    4060:	70 93 fd 24 	sts	0x24FD, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    4064:	8e a1       	ldd	r24, Y+38	; 0x26
    4066:	9f a1       	ldd	r25, Y+39	; 0x27
    4068:	89 2b       	or	r24, r25
    406a:	b9 f0       	breq	.+46     	; 0x409a <mc_arc_nonblock+0x18a>
		ma.feed_rate *= ma.segments; 
    406c:	b8 01       	movw	r22, r16
    406e:	88 27       	eor	r24, r24
    4070:	77 fd       	sbrc	r23, 7
    4072:	80 95       	com	r24
    4074:	98 2f       	mov	r25, r24
    4076:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    407a:	9b 01       	movw	r18, r22
    407c:	ac 01       	movw	r20, r24
    407e:	6a a1       	ldd	r22, Y+34	; 0x22
    4080:	7b a1       	ldd	r23, Y+35	; 0x23
    4082:	8c a1       	ldd	r24, Y+36	; 0x24
    4084:	9d a1       	ldd	r25, Y+37	; 0x25
    4086:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    408a:	60 93 28 25 	sts	0x2528, r22
    408e:	70 93 29 25 	sts	0x2529, r23
    4092:	80 93 2a 25 	sts	0x252A, r24
    4096:	90 93 2b 25 	sts	0x252B, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    409a:	b8 01       	movw	r22, r16
    409c:	88 27       	eor	r24, r24
    409e:	77 fd       	sbrc	r23, 7
    40a0:	80 95       	com	r24
    40a2:	98 2f       	mov	r25, r24
    40a4:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    40a8:	7b 01       	movw	r14, r22
    40aa:	8c 01       	movw	r16, r24
    40ac:	c3 01       	movw	r24, r6
    40ae:	b2 01       	movw	r22, r4
    40b0:	a8 01       	movw	r20, r16
    40b2:	97 01       	movw	r18, r14
    40b4:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    40b8:	60 93 2c 25 	sts	0x252C, r22
    40bc:	70 93 2d 25 	sts	0x252D, r23
    40c0:	80 93 2e 25 	sts	0x252E, r24
    40c4:	90 93 2f 25 	sts	0x252F, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    40c8:	c6 01       	movw	r24, r12
    40ca:	b5 01       	movw	r22, r10
    40cc:	a8 01       	movw	r20, r16
    40ce:	97 01       	movw	r18, r14
    40d0:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    40d4:	60 93 30 25 	sts	0x2530, r22
    40d8:	70 93 31 25 	sts	0x2531, r23
    40dc:	80 93 32 25 	sts	0x2532, r24
    40e0:	90 93 33 25 	sts	0x2533, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    40e4:	69 81       	ldd	r22, Y+1	; 0x01
    40e6:	7a 81       	ldd	r23, Y+2	; 0x02
    40e8:	8b 81       	ldd	r24, Y+3	; 0x03
    40ea:	9c 81       	ldd	r25, Y+4	; 0x04
    40ec:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <sin>
    40f0:	5b 01       	movw	r10, r22
    40f2:	6c 01       	movw	r12, r24
    40f4:	f4 01       	movw	r30, r8
    40f6:	ee 0f       	add	r30, r30
    40f8:	ff 1f       	adc	r31, r31
    40fa:	ee 0f       	add	r30, r30
    40fc:	ff 1f       	adc	r31, r31
    40fe:	e0 58       	subi	r30, 0x80	; 128
    4100:	fe 4d       	sbci	r31, 0xDE	; 222
    4102:	61 81       	ldd	r22, Z+1	; 0x01
    4104:	72 81       	ldd	r23, Z+2	; 0x02
    4106:	83 81       	ldd	r24, Z+3	; 0x03
    4108:	94 81       	ldd	r25, Z+4	; 0x04
    410a:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    410e:	f4 01       	movw	r30, r8
    4110:	ee 0f       	add	r30, r30
    4112:	ff 1f       	adc	r31, r31
    4114:	e8 0d       	add	r30, r8
    4116:	f9 1d       	adc	r31, r9
    4118:	13 e0       	ldi	r17, 0x03	; 3
    411a:	ee 0f       	add	r30, r30
    411c:	ff 1f       	adc	r31, r31
    411e:	1a 95       	dec	r17
    4120:	e1 f7       	brne	.-8      	; 0x411a <mc_arc_nonblock+0x20a>
    4122:	e5 57       	subi	r30, 0x75	; 117
    4124:	fb 4d       	sbci	r31, 0xDB	; 219
    4126:	21 a1       	ldd	r18, Z+33	; 0x21
    4128:	32 a1       	ldd	r19, Z+34	; 0x22
    412a:	43 a1       	ldd	r20, Z+35	; 0x23
    412c:	54 a1       	ldd	r21, Z+36	; 0x24
    412e:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    4132:	7b 01       	movw	r14, r22
    4134:	8c 01       	movw	r16, r24
    4136:	c6 01       	movw	r24, r12
    4138:	b5 01       	movw	r22, r10
    413a:	2d 81       	ldd	r18, Y+5	; 0x05
    413c:	3e 81       	ldd	r19, Y+6	; 0x06
    413e:	4f 81       	ldd	r20, Y+7	; 0x07
    4140:	58 85       	ldd	r21, Y+8	; 0x08
    4142:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    4146:	9b 01       	movw	r18, r22
    4148:	ac 01       	movw	r20, r24
    414a:	c8 01       	movw	r24, r16
    414c:	b7 01       	movw	r22, r14
    414e:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    4152:	60 93 18 25 	sts	0x2518, r22
    4156:	70 93 19 25 	sts	0x2519, r23
    415a:	80 93 1a 25 	sts	0x251A, r24
    415e:	90 93 1b 25 	sts	0x251B, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    4162:	69 81       	ldd	r22, Y+1	; 0x01
    4164:	7a 81       	ldd	r23, Y+2	; 0x02
    4166:	8b 81       	ldd	r24, Y+3	; 0x03
    4168:	9c 81       	ldd	r25, Y+4	; 0x04
    416a:	0e 94 ba 42 	call	0x8574	; 0x8574 <cos>
    416e:	5b 01       	movw	r10, r22
    4170:	6c 01       	movw	r12, r24
    4172:	f1 01       	movw	r30, r2
    4174:	ee 0f       	add	r30, r30
    4176:	ff 1f       	adc	r31, r31
    4178:	ee 0f       	add	r30, r30
    417a:	ff 1f       	adc	r31, r31
    417c:	e0 58       	subi	r30, 0x80	; 128
    417e:	fe 4d       	sbci	r31, 0xDE	; 222
    4180:	61 81       	ldd	r22, Z+1	; 0x01
    4182:	72 81       	ldd	r23, Z+2	; 0x02
    4184:	83 81       	ldd	r24, Z+3	; 0x03
    4186:	94 81       	ldd	r25, Z+4	; 0x04
    4188:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    418c:	f1 01       	movw	r30, r2
    418e:	ee 0f       	add	r30, r30
    4190:	ff 1f       	adc	r31, r31
    4192:	e2 0d       	add	r30, r2
    4194:	f3 1d       	adc	r31, r3
    4196:	53 e0       	ldi	r21, 0x03	; 3
    4198:	ee 0f       	add	r30, r30
    419a:	ff 1f       	adc	r31, r31
    419c:	5a 95       	dec	r21
    419e:	e1 f7       	brne	.-8      	; 0x4198 <mc_arc_nonblock+0x288>
    41a0:	e5 57       	subi	r30, 0x75	; 117
    41a2:	fb 4d       	sbci	r31, 0xDB	; 219
    41a4:	21 a1       	ldd	r18, Z+33	; 0x21
    41a6:	32 a1       	ldd	r19, Z+34	; 0x22
    41a8:	43 a1       	ldd	r20, Z+35	; 0x23
    41aa:	54 a1       	ldd	r21, Z+36	; 0x24
    41ac:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    41b0:	7b 01       	movw	r14, r22
    41b2:	8c 01       	movw	r16, r24
    41b4:	c6 01       	movw	r24, r12
    41b6:	b5 01       	movw	r22, r10
    41b8:	2d 81       	ldd	r18, Y+5	; 0x05
    41ba:	3e 81       	ldd	r19, Y+6	; 0x06
    41bc:	4f 81       	ldd	r20, Y+7	; 0x07
    41be:	58 85       	ldd	r21, Y+8	; 0x08
    41c0:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    41c4:	9b 01       	movw	r18, r22
    41c6:	ac 01       	movw	r20, r24
    41c8:	c8 01       	movw	r24, r16
    41ca:	b7 01       	movw	r22, r14
    41cc:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    41d0:	60 93 1c 25 	sts	0x251C, r22
    41d4:	70 93 1d 25 	sts	0x251D, r23
    41d8:	80 93 1e 25 	sts	0x251E, r24
    41dc:	90 93 1f 25 	sts	0x251F, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
    41e0:	e8 a1       	ldd	r30, Y+32	; 0x20
    41e2:	f9 a1       	ldd	r31, Y+33	; 0x21
    41e4:	ee 0f       	add	r30, r30
    41e6:	ff 1f       	adc	r31, r31
    41e8:	ee 0f       	add	r30, r30
    41ea:	ff 1f       	adc	r31, r31
    41ec:	8f 01       	movw	r16, r30
    41ee:	05 50       	subi	r16, 0x05	; 5
    41f0:	1b 4d       	sbci	r17, 0xDB	; 219
    41f2:	e0 58       	subi	r30, 0x80	; 128
    41f4:	fe 4d       	sbci	r31, 0xDE	; 222
    41f6:	61 81       	ldd	r22, Z+1	; 0x01
    41f8:	72 81       	ldd	r23, Z+2	; 0x02
    41fa:	83 81       	ldd	r24, Z+3	; 0x03
    41fc:	94 81       	ldd	r25, Z+4	; 0x04
    41fe:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    4202:	20 91 dc 24 	lds	r18, 0x24DC
    4206:	30 91 dd 24 	lds	r19, 0x24DD
    420a:	40 91 de 24 	lds	r20, 0x24DE
    420e:	50 91 df 24 	lds	r21, 0x24DF
    4212:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    4216:	d8 01       	movw	r26, r16
    4218:	1d 96       	adiw	r26, 0x0d	; 13
    421a:	6d 93       	st	X+, r22
    421c:	7d 93       	st	X+, r23
    421e:	8d 93       	st	X+, r24
    4220:	9c 93       	st	X, r25
    4222:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    4224:	81 e0       	ldi	r24, 0x01	; 1
    4226:	80 93 fb 24 	sts	0x24FB, r24
	return (mc_arc_continuation());
    422a:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <mc_arc_continuation>
    422e:	9c 01       	movw	r18, r24
}
    4230:	c9 01       	movw	r24, r18
    4232:	28 96       	adiw	r28, 0x08	; 8
    4234:	cd bf       	out	0x3d, r28	; 61
    4236:	de bf       	out	0x3e, r29	; 62
    4238:	cf 91       	pop	r28
    423a:	df 91       	pop	r29
    423c:	1f 91       	pop	r17
    423e:	0f 91       	pop	r16
    4240:	ff 90       	pop	r15
    4242:	ef 90       	pop	r14
    4244:	df 90       	pop	r13
    4246:	cf 90       	pop	r12
    4248:	bf 90       	pop	r11
    424a:	af 90       	pop	r10
    424c:	9f 90       	pop	r9
    424e:	8f 90       	pop	r8
    4250:	7f 90       	pop	r7
    4252:	6f 90       	pop	r6
    4254:	5f 90       	pop	r5
    4256:	4f 90       	pop	r4
    4258:	3f 90       	pop	r3
    425a:	2f 90       	pop	r2
    425c:	08 95       	ret

0000425e <mc_arc>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    425e:	2f 92       	push	r2
    4260:	3f 92       	push	r3
    4262:	4f 92       	push	r4
    4264:	5f 92       	push	r5
    4266:	6f 92       	push	r6
    4268:	7f 92       	push	r7
    426a:	8f 92       	push	r8
    426c:	9f 92       	push	r9
    426e:	af 92       	push	r10
    4270:	bf 92       	push	r11
    4272:	cf 92       	push	r12
    4274:	df 92       	push	r13
    4276:	ef 92       	push	r14
    4278:	ff 92       	push	r15
    427a:	0f 93       	push	r16
    427c:	1f 93       	push	r17
    427e:	df 93       	push	r29
    4280:	cf 93       	push	r28
    4282:	cd b7       	in	r28, 0x3d	; 61
    4284:	de b7       	in	r29, 0x3e	; 62
    4286:	28 97       	sbiw	r28, 0x08	; 8
    4288:	cd bf       	out	0x3d, r28	; 61
    428a:	de bf       	out	0x3e, r29	; 62
    428c:	69 83       	std	Y+1, r22	; 0x01
    428e:	7a 83       	std	Y+2, r23	; 0x02
    4290:	8b 83       	std	Y+3, r24	; 0x03
    4292:	9c 83       	std	Y+4, r25	; 0x04
    4294:	29 01       	movw	r4, r18
    4296:	3a 01       	movw	r6, r20
    4298:	ed 82       	std	Y+5, r14	; 0x05
    429a:	fe 82       	std	Y+6, r15	; 0x06
    429c:	0f 83       	std	Y+7, r16	; 0x07
    429e:	18 87       	std	Y+8, r17	; 0x08
    42a0:	2e 8c       	ldd	r2, Y+30	; 0x1e
    42a2:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    42a4:	60 93 20 25 	sts	0x2520, r22
    42a8:	70 93 21 25 	sts	0x2521, r23
    42ac:	80 93 22 25 	sts	0x2522, r24
    42b0:	90 93 23 25 	sts	0x2523, r25
	ma.radius = radius;
    42b4:	e0 92 24 25 	sts	0x2524, r14
    42b8:	f0 92 25 25 	sts	0x2525, r15
    42bc:	00 93 26 25 	sts	0x2526, r16
    42c0:	10 93 27 25 	sts	0x2527, r17
	ma.angular_travel = angular_travel;
    42c4:	20 93 34 25 	sts	0x2534, r18
    42c8:	30 93 35 25 	sts	0x2535, r19
    42cc:	40 93 36 25 	sts	0x2536, r20
    42d0:	50 93 37 25 	sts	0x2537, r21
	ma.linear_travel = linear_travel;
    42d4:	a0 92 38 25 	sts	0x2538, r10
    42d8:	b0 92 39 25 	sts	0x2539, r11
    42dc:	c0 92 3a 25 	sts	0x253A, r12
    42e0:	d0 92 3b 25 	sts	0x253B, r13
	ma.feed_rate = feed_rate;
    42e4:	8a a1       	ldd	r24, Y+34	; 0x22
    42e6:	9b a1       	ldd	r25, Y+35	; 0x23
    42e8:	ac a1       	ldd	r26, Y+36	; 0x24
    42ea:	bd a1       	ldd	r27, Y+37	; 0x25
    42ec:	80 93 28 25 	sts	0x2528, r24
    42f0:	90 93 29 25 	sts	0x2529, r25
    42f4:	a0 93 2a 25 	sts	0x252A, r26
    42f8:	b0 93 2b 25 	sts	0x252B, r27
	ma.invert_feed_rate = invert_feed_rate;
    42fc:	ae a1       	ldd	r26, Y+38	; 0x26
    42fe:	bf a1       	ldd	r27, Y+39	; 0x27
    4300:	a0 93 00 25 	sts	0x2500, r26
    4304:	b0 93 01 25 	sts	0x2501, r27
	ma.axis_1 = axis_1;
    4308:	80 92 02 25 	sts	0x2502, r8
    430c:	90 92 03 25 	sts	0x2503, r9
	ma.axis_2 = axis_2;
    4310:	20 92 04 25 	sts	0x2504, r2
    4314:	30 92 05 25 	sts	0x2505, r3
	ma.axis_linear = axis_linear;
    4318:	e8 a1       	ldd	r30, Y+32	; 0x20
    431a:	f9 a1       	ldd	r31, Y+33	; 0x21
    431c:	e0 93 06 25 	sts	0x2506, r30
    4320:	f0 93 07 25 	sts	0x2507, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    4324:	ca 01       	movw	r24, r20
    4326:	b9 01       	movw	r22, r18
    4328:	a8 01       	movw	r20, r16
    432a:	97 01       	movw	r18, r14
    432c:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    4330:	7b 01       	movw	r14, r22
    4332:	8c 01       	movw	r16, r24
    4334:	c6 01       	movw	r24, r12
    4336:	b5 01       	movw	r22, r10
    4338:	0e 94 25 43 	call	0x864a	; 0x864a <__fixsfsi>
    433c:	97 ff       	sbrs	r25, 7
    433e:	07 c0       	rjmp	.+14     	; 0x434e <mc_arc+0xf0>
    4340:	90 95       	com	r25
    4342:	80 95       	com	r24
    4344:	70 95       	com	r23
    4346:	61 95       	neg	r22
    4348:	7f 4f       	sbci	r23, 0xFF	; 255
    434a:	8f 4f       	sbci	r24, 0xFF	; 255
    434c:	9f 4f       	sbci	r25, 0xFF	; 255
    434e:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    4352:	9b 01       	movw	r18, r22
    4354:	ac 01       	movw	r20, r24
    4356:	c8 01       	movw	r24, r16
    4358:	b7 01       	movw	r22, r14
    435a:	0e 94 b3 44 	call	0x8966	; 0x8966 <hypot>
    435e:	7b 01       	movw	r14, r22
    4360:	8c 01       	movw	r16, r24
    4362:	60 93 14 25 	sts	0x2514, r22
    4366:	70 93 15 25 	sts	0x2515, r23
    436a:	80 93 16 25 	sts	0x2516, r24
    436e:	90 93 17 25 	sts	0x2517, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    4372:	2a e0       	ldi	r18, 0x0A	; 10
    4374:	37 ed       	ldi	r19, 0xD7	; 215
    4376:	43 e2       	ldi	r20, 0x23	; 35
    4378:	5c e3       	ldi	r21, 0x3C	; 60
    437a:	0e 94 b6 42 	call	0x856c	; 0x856c <__cmpsf2>
    437e:	88 23       	and	r24, r24
    4380:	1c f4       	brge	.+6      	; 0x4388 <mc_arc+0x12a>
    4382:	2f e0       	ldi	r18, 0x0F	; 15
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	c7 c1       	rjmp	.+910    	; 0x4716 <mc_arc+0x4b8>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    4388:	c8 01       	movw	r24, r16
    438a:	b7 01       	movw	r22, r14
    438c:	20 91 8d 24 	lds	r18, 0x248D
    4390:	30 91 8e 24 	lds	r19, 0x248E
    4394:	40 91 8f 24 	lds	r20, 0x248F
    4398:	50 91 90 24 	lds	r21, 0x2490
    439c:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    43a0:	0e 94 a3 42 	call	0x8546	; 0x8546 <ceil>
    43a4:	0e 94 25 43 	call	0x864a	; 0x864a <__fixsfsi>
    43a8:	8b 01       	movw	r16, r22
    43aa:	60 93 fc 24 	sts	0x24FC, r22
    43ae:	70 93 fd 24 	sts	0x24FD, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    43b2:	2e a1       	ldd	r18, Y+38	; 0x26
    43b4:	3f a1       	ldd	r19, Y+39	; 0x27
    43b6:	23 2b       	or	r18, r19
    43b8:	b9 f0       	breq	.+46     	; 0x43e8 <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    43ba:	b8 01       	movw	r22, r16
    43bc:	88 27       	eor	r24, r24
    43be:	77 fd       	sbrc	r23, 7
    43c0:	80 95       	com	r24
    43c2:	98 2f       	mov	r25, r24
    43c4:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    43c8:	9b 01       	movw	r18, r22
    43ca:	ac 01       	movw	r20, r24
    43cc:	6a a1       	ldd	r22, Y+34	; 0x22
    43ce:	7b a1       	ldd	r23, Y+35	; 0x23
    43d0:	8c a1       	ldd	r24, Y+36	; 0x24
    43d2:	9d a1       	ldd	r25, Y+37	; 0x25
    43d4:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    43d8:	60 93 28 25 	sts	0x2528, r22
    43dc:	70 93 29 25 	sts	0x2529, r23
    43e0:	80 93 2a 25 	sts	0x252A, r24
    43e4:	90 93 2b 25 	sts	0x252B, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    43e8:	b8 01       	movw	r22, r16
    43ea:	88 27       	eor	r24, r24
    43ec:	77 fd       	sbrc	r23, 7
    43ee:	80 95       	com	r24
    43f0:	98 2f       	mov	r25, r24
    43f2:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    43f6:	7b 01       	movw	r14, r22
    43f8:	8c 01       	movw	r16, r24
    43fa:	c3 01       	movw	r24, r6
    43fc:	b2 01       	movw	r22, r4
    43fe:	a8 01       	movw	r20, r16
    4400:	97 01       	movw	r18, r14
    4402:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    4406:	60 93 2c 25 	sts	0x252C, r22
    440a:	70 93 2d 25 	sts	0x252D, r23
    440e:	80 93 2e 25 	sts	0x252E, r24
    4412:	90 93 2f 25 	sts	0x252F, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    4416:	c6 01       	movw	r24, r12
    4418:	b5 01       	movw	r22, r10
    441a:	a8 01       	movw	r20, r16
    441c:	97 01       	movw	r18, r14
    441e:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    4422:	60 93 30 25 	sts	0x2530, r22
    4426:	70 93 31 25 	sts	0x2531, r23
    442a:	80 93 32 25 	sts	0x2532, r24
    442e:	90 93 33 25 	sts	0x2533, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    4432:	69 81       	ldd	r22, Y+1	; 0x01
    4434:	7a 81       	ldd	r23, Y+2	; 0x02
    4436:	8b 81       	ldd	r24, Y+3	; 0x03
    4438:	9c 81       	ldd	r25, Y+4	; 0x04
    443a:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <sin>
    443e:	5b 01       	movw	r10, r22
    4440:	6c 01       	movw	r12, r24
    4442:	f4 01       	movw	r30, r8
    4444:	ee 0f       	add	r30, r30
    4446:	ff 1f       	adc	r31, r31
    4448:	ee 0f       	add	r30, r30
    444a:	ff 1f       	adc	r31, r31
    444c:	e0 58       	subi	r30, 0x80	; 128
    444e:	fe 4d       	sbci	r31, 0xDE	; 222
    4450:	61 81       	ldd	r22, Z+1	; 0x01
    4452:	72 81       	ldd	r23, Z+2	; 0x02
    4454:	83 81       	ldd	r24, Z+3	; 0x03
    4456:	94 81       	ldd	r25, Z+4	; 0x04
    4458:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    445c:	f4 01       	movw	r30, r8
    445e:	ee 0f       	add	r30, r30
    4460:	ff 1f       	adc	r31, r31
    4462:	e8 0d       	add	r30, r8
    4464:	f9 1d       	adc	r31, r9
    4466:	13 e0       	ldi	r17, 0x03	; 3
    4468:	ee 0f       	add	r30, r30
    446a:	ff 1f       	adc	r31, r31
    446c:	1a 95       	dec	r17
    446e:	e1 f7       	brne	.-8      	; 0x4468 <mc_arc+0x20a>
    4470:	e5 57       	subi	r30, 0x75	; 117
    4472:	fb 4d       	sbci	r31, 0xDB	; 219
    4474:	21 a1       	ldd	r18, Z+33	; 0x21
    4476:	32 a1       	ldd	r19, Z+34	; 0x22
    4478:	43 a1       	ldd	r20, Z+35	; 0x23
    447a:	54 a1       	ldd	r21, Z+36	; 0x24
    447c:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    4480:	7b 01       	movw	r14, r22
    4482:	8c 01       	movw	r16, r24
    4484:	c6 01       	movw	r24, r12
    4486:	b5 01       	movw	r22, r10
    4488:	2d 81       	ldd	r18, Y+5	; 0x05
    448a:	3e 81       	ldd	r19, Y+6	; 0x06
    448c:	4f 81       	ldd	r20, Y+7	; 0x07
    448e:	58 85       	ldd	r21, Y+8	; 0x08
    4490:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    4494:	9b 01       	movw	r18, r22
    4496:	ac 01       	movw	r20, r24
    4498:	c8 01       	movw	r24, r16
    449a:	b7 01       	movw	r22, r14
    449c:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    44a0:	60 93 18 25 	sts	0x2518, r22
    44a4:	70 93 19 25 	sts	0x2519, r23
    44a8:	80 93 1a 25 	sts	0x251A, r24
    44ac:	90 93 1b 25 	sts	0x251B, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    44b0:	69 81       	ldd	r22, Y+1	; 0x01
    44b2:	7a 81       	ldd	r23, Y+2	; 0x02
    44b4:	8b 81       	ldd	r24, Y+3	; 0x03
    44b6:	9c 81       	ldd	r25, Y+4	; 0x04
    44b8:	0e 94 ba 42 	call	0x8574	; 0x8574 <cos>
    44bc:	5b 01       	movw	r10, r22
    44be:	6c 01       	movw	r12, r24
    44c0:	f1 01       	movw	r30, r2
    44c2:	ee 0f       	add	r30, r30
    44c4:	ff 1f       	adc	r31, r31
    44c6:	ee 0f       	add	r30, r30
    44c8:	ff 1f       	adc	r31, r31
    44ca:	e0 58       	subi	r30, 0x80	; 128
    44cc:	fe 4d       	sbci	r31, 0xDE	; 222
    44ce:	61 81       	ldd	r22, Z+1	; 0x01
    44d0:	72 81       	ldd	r23, Z+2	; 0x02
    44d2:	83 81       	ldd	r24, Z+3	; 0x03
    44d4:	94 81       	ldd	r25, Z+4	; 0x04
    44d6:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    44da:	f1 01       	movw	r30, r2
    44dc:	ee 0f       	add	r30, r30
    44de:	ff 1f       	adc	r31, r31
    44e0:	e2 0d       	add	r30, r2
    44e2:	f3 1d       	adc	r31, r3
    44e4:	53 e0       	ldi	r21, 0x03	; 3
    44e6:	ee 0f       	add	r30, r30
    44e8:	ff 1f       	adc	r31, r31
    44ea:	5a 95       	dec	r21
    44ec:	e1 f7       	brne	.-8      	; 0x44e6 <mc_arc+0x288>
    44ee:	e5 57       	subi	r30, 0x75	; 117
    44f0:	fb 4d       	sbci	r31, 0xDB	; 219
    44f2:	21 a1       	ldd	r18, Z+33	; 0x21
    44f4:	32 a1       	ldd	r19, Z+34	; 0x22
    44f6:	43 a1       	ldd	r20, Z+35	; 0x23
    44f8:	54 a1       	ldd	r21, Z+36	; 0x24
    44fa:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    44fe:	7b 01       	movw	r14, r22
    4500:	8c 01       	movw	r16, r24
    4502:	c6 01       	movw	r24, r12
    4504:	b5 01       	movw	r22, r10
    4506:	2d 81       	ldd	r18, Y+5	; 0x05
    4508:	3e 81       	ldd	r19, Y+6	; 0x06
    450a:	4f 81       	ldd	r20, Y+7	; 0x07
    450c:	58 85       	ldd	r21, Y+8	; 0x08
    450e:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    4512:	9b 01       	movw	r18, r22
    4514:	ac 01       	movw	r20, r24
    4516:	c8 01       	movw	r24, r16
    4518:	b7 01       	movw	r22, r14
    451a:	0e 94 16 42 	call	0x842c	; 0x842c <__subsf3>
    451e:	60 93 1c 25 	sts	0x251C, r22
    4522:	70 93 1d 25 	sts	0x251D, r23
    4526:	80 93 1e 25 	sts	0x251E, r24
    452a:	90 93 1f 25 	sts	0x251F, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
    452e:	e8 a1       	ldd	r30, Y+32	; 0x20
    4530:	f9 a1       	ldd	r31, Y+33	; 0x21
    4532:	ee 0f       	add	r30, r30
    4534:	ff 1f       	adc	r31, r31
    4536:	ee 0f       	add	r30, r30
    4538:	ff 1f       	adc	r31, r31
    453a:	8f 01       	movw	r16, r30
    453c:	05 50       	subi	r16, 0x05	; 5
    453e:	1b 4d       	sbci	r17, 0xDB	; 219
    4540:	e0 58       	subi	r30, 0x80	; 128
    4542:	fe 4d       	sbci	r31, 0xDE	; 222
    4544:	61 81       	ldd	r22, Z+1	; 0x01
    4546:	72 81       	ldd	r23, Z+2	; 0x02
    4548:	83 81       	ldd	r24, Z+3	; 0x03
    454a:	94 81       	ldd	r25, Z+4	; 0x04
    454c:	0e 94 58 43 	call	0x86b0	; 0x86b0 <__floatsisf>
    4550:	20 91 dc 24 	lds	r18, 0x24DC
    4554:	30 91 dd 24 	lds	r19, 0x24DD
    4558:	40 91 de 24 	lds	r20, 0x24DE
    455c:	50 91 df 24 	lds	r21, 0x24DF
    4560:	0e 94 bd 42 	call	0x857a	; 0x857a <__divsf3>
    4564:	d8 01       	movw	r26, r16
    4566:	1d 96       	adiw	r26, 0x0d	; 13
    4568:	6d 93       	st	X+, r22
    456a:	7d 93       	st	X+, r23
    456c:	8d 93       	st	X+, r24
    456e:	9c 93       	st	X, r25
    4570:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    4572:	10 92 fe 24 	sts	0x24FE, r1
    4576:	10 92 ff 24 	sts	0x24FF, r1
    457a:	bf c0       	rjmp	.+382    	; 0x46fa <mc_arc+0x49c>
		ma.theta += ma.theta_per_segment;
    457c:	60 91 20 25 	lds	r22, 0x2520
    4580:	70 91 21 25 	lds	r23, 0x2521
    4584:	80 91 22 25 	lds	r24, 0x2522
    4588:	90 91 23 25 	lds	r25, 0x2523
    458c:	20 91 2c 25 	lds	r18, 0x252C
    4590:	30 91 2d 25 	lds	r19, 0x252D
    4594:	40 91 2e 25 	lds	r20, 0x252E
    4598:	50 91 2f 25 	lds	r21, 0x252F
    459c:	0e 94 17 42 	call	0x842e	; 0x842e <__addsf3>
    45a0:	7b 01       	movw	r14, r22
    45a2:	8c 01       	movw	r16, r24
    45a4:	cb 01       	movw	r24, r22
    45a6:	d8 01       	movw	r26, r16
    45a8:	80 93 20 25 	sts	0x2520, r24
    45ac:	90 93 21 25 	sts	0x2521, r25
    45b0:	a0 93 22 25 	sts	0x2522, r26
    45b4:	b0 93 23 25 	sts	0x2523, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    45b8:	b7 01       	movw	r22, r14
    45ba:	c8 01       	movw	r24, r16
    45bc:	0e 94 db 45 	call	0x8bb6	; 0x8bb6 <sin>
    45c0:	80 90 24 25 	lds	r8, 0x2524
    45c4:	90 90 25 25 	lds	r9, 0x2525
    45c8:	a0 90 26 25 	lds	r10, 0x2526
    45cc:	b0 90 27 25 	lds	r11, 0x2527
    45d0:	c0 90 02 25 	lds	r12, 0x2502
    45d4:	d0 90 03 25 	lds	r13, 0x2503
    45d8:	cc 0c       	add	r12, r12
    45da:	dd 1c       	adc	r13, r13
    45dc:	cc 0c       	add	r12, r12
    45de:	dd 1c       	adc	r13, r13
    45e0:	eb ef       	ldi	r30, 0xFB	; 251
    45e2:	f4 e2       	ldi	r31, 0x24	; 36
    45e4:	ce 0e       	add	r12, r30
    45e6:	df 1e       	adc	r13, r31
    45e8:	a5 01       	movw	r20, r10
    45ea:	94 01       	movw	r18, r8
    45ec:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    45f0:	9b 01       	movw	r18, r22
    45f2:	ac 01       	movw	r20, r24
    45f4:	60 91 18 25 	lds	r22, 0x2518
    45f8:	70 91 19 25 	lds	r23, 0x2519
    45fc:	80 91 1a 25 	lds	r24, 0x251A
    4600:	90 91 1b 25 	lds	r25, 0x251B
    4604:	0e 94 17 42 	call	0x842e	; 0x842e <__addsf3>
    4608:	d6 01       	movw	r26, r12
    460a:	1d 96       	adiw	r26, 0x0d	; 13
    460c:	6d 93       	st	X+, r22
    460e:	7d 93       	st	X+, r23
    4610:	8d 93       	st	X+, r24
    4612:	9c 93       	st	X, r25
    4614:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    4616:	b7 01       	movw	r22, r14
    4618:	c8 01       	movw	r24, r16
    461a:	0e 94 ba 42 	call	0x8574	; 0x8574 <cos>
    461e:	00 91 04 25 	lds	r16, 0x2504
    4622:	10 91 05 25 	lds	r17, 0x2505
    4626:	00 0f       	add	r16, r16
    4628:	11 1f       	adc	r17, r17
    462a:	00 0f       	add	r16, r16
    462c:	11 1f       	adc	r17, r17
    462e:	05 50       	subi	r16, 0x05	; 5
    4630:	1b 4d       	sbci	r17, 0xDB	; 219
    4632:	a5 01       	movw	r20, r10
    4634:	94 01       	movw	r18, r8
    4636:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    463a:	9b 01       	movw	r18, r22
    463c:	ac 01       	movw	r20, r24
    463e:	60 91 1c 25 	lds	r22, 0x251C
    4642:	70 91 1d 25 	lds	r23, 0x251D
    4646:	80 91 1e 25 	lds	r24, 0x251E
    464a:	90 91 1f 25 	lds	r25, 0x251F
    464e:	0e 94 17 42 	call	0x842e	; 0x842e <__addsf3>
    4652:	f8 01       	movw	r30, r16
    4654:	65 87       	std	Z+13, r22	; 0x0d
    4656:	76 87       	std	Z+14, r23	; 0x0e
    4658:	87 87       	std	Z+15, r24	; 0x0f
    465a:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    465c:	00 91 06 25 	lds	r16, 0x2506
    4660:	10 91 07 25 	lds	r17, 0x2507
    4664:	00 0f       	add	r16, r16
    4666:	11 1f       	adc	r17, r17
    4668:	00 0f       	add	r16, r16
    466a:	11 1f       	adc	r17, r17
    466c:	05 50       	subi	r16, 0x05	; 5
    466e:	1b 4d       	sbci	r17, 0xDB	; 219
    4670:	d8 01       	movw	r26, r16
    4672:	1d 96       	adiw	r26, 0x0d	; 13
    4674:	6d 91       	ld	r22, X+
    4676:	7d 91       	ld	r23, X+
    4678:	8d 91       	ld	r24, X+
    467a:	9c 91       	ld	r25, X
    467c:	50 97       	sbiw	r26, 0x10	; 16
    467e:	20 91 30 25 	lds	r18, 0x2530
    4682:	30 91 31 25 	lds	r19, 0x2531
    4686:	40 91 32 25 	lds	r20, 0x2532
    468a:	50 91 33 25 	lds	r21, 0x2533
    468e:	0e 94 17 42 	call	0x842e	; 0x842e <__addsf3>
    4692:	f8 01       	movw	r30, r16
    4694:	65 87       	std	Z+13, r22	; 0x0d
    4696:	76 87       	std	Z+14, r23	; 0x0e
    4698:	87 87       	std	Z+15, r24	; 0x0f
    469a:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X_AXIS], 
    469c:	60 91 08 25 	lds	r22, 0x2508
    46a0:	70 91 09 25 	lds	r23, 0x2509
    46a4:	80 91 0a 25 	lds	r24, 0x250A
    46a8:	90 91 0b 25 	lds	r25, 0x250B
    46ac:	20 91 0c 25 	lds	r18, 0x250C
    46b0:	30 91 0d 25 	lds	r19, 0x250D
    46b4:	40 91 0e 25 	lds	r20, 0x250E
    46b8:	50 91 0f 25 	lds	r21, 0x250F
    46bc:	e0 90 10 25 	lds	r14, 0x2510
    46c0:	f0 90 11 25 	lds	r15, 0x2511
    46c4:	00 91 12 25 	lds	r16, 0x2512
    46c8:	10 91 13 25 	lds	r17, 0x2513
    46cc:	a0 90 28 25 	lds	r10, 0x2528
    46d0:	b0 90 29 25 	lds	r11, 0x2529
    46d4:	c0 90 2a 25 	lds	r12, 0x252A
    46d8:	d0 90 2b 25 	lds	r13, 0x252B
    46dc:	80 90 00 25 	lds	r8, 0x2500
    46e0:	90 90 01 25 	lds	r9, 0x2501
    46e4:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    46e8:	80 91 fe 24 	lds	r24, 0x24FE
    46ec:	90 91 ff 24 	lds	r25, 0x24FF
    46f0:	01 96       	adiw	r24, 0x01	; 1
    46f2:	80 93 fe 24 	sts	0x24FE, r24
    46f6:	90 93 ff 24 	sts	0x24FF, r25
    46fa:	20 91 fe 24 	lds	r18, 0x24FE
    46fe:	30 91 ff 24 	lds	r19, 0x24FF
    4702:	80 91 fc 24 	lds	r24, 0x24FC
    4706:	90 91 fd 24 	lds	r25, 0x24FD
    470a:	82 17       	cp	r24, r18
    470c:	93 07       	cpc	r25, r19
    470e:	0c f0       	brlt	.+2      	; 0x4712 <mc_arc+0x4b4>
    4710:	35 cf       	rjmp	.-406    	; 0x457c <mc_arc+0x31e>
    4712:	20 e0       	ldi	r18, 0x00	; 0
    4714:	30 e0       	ldi	r19, 0x00	; 0
				ma.dtarget[Z_AXIS], 
				ma.feed_rate, 
				ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    4716:	c9 01       	movw	r24, r18
    4718:	28 96       	adiw	r28, 0x08	; 8
    471a:	cd bf       	out	0x3d, r28	; 61
    471c:	de bf       	out	0x3e, r29	; 62
    471e:	cf 91       	pop	r28
    4720:	df 91       	pop	r29
    4722:	1f 91       	pop	r17
    4724:	0f 91       	pop	r16
    4726:	ff 90       	pop	r15
    4728:	ef 90       	pop	r14
    472a:	df 90       	pop	r13
    472c:	cf 90       	pop	r12
    472e:	bf 90       	pop	r11
    4730:	af 90       	pop	r10
    4732:	9f 90       	pop	r9
    4734:	8f 90       	pop	r8
    4736:	7f 90       	pop	r7
    4738:	6f 90       	pop	r6
    473a:	5f 90       	pop	r5
    473c:	4f 90       	pop	r4
    473e:	3f 90       	pop	r3
    4740:	2f 90       	pop	r2
    4742:	08 95       	ret

00004744 <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    4744:	e0 e6       	ldi	r30, 0x60	; 96
    4746:	f6 e0       	ldi	r31, 0x06	; 6
    4748:	80 e4       	ldi	r24, 0x40	; 64
    474a:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    474c:	80 e8       	ldi	r24, 0x80	; 128
    474e:	81 83       	std	Z+1, r24	; 0x01
}
    4750:	08 95       	ret

00004752 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    4752:	97 fd       	sbrc	r25, 7
    4754:	05 c0       	rjmp	.+10     	; 0x4760 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    4756:	80 e8       	ldi	r24, 0x80	; 128
    4758:	e0 e6       	ldi	r30, 0x60	; 96
    475a:	f6 e0       	ldi	r31, 0x06	; 6
    475c:	85 83       	std	Z+5, r24	; 0x05
    475e:	04 c0       	rjmp	.+8      	; 0x4768 <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    4760:	80 e8       	ldi	r24, 0x80	; 128
    4762:	e0 e6       	ldi	r30, 0x60	; 96
    4764:	f6 e0       	ldi	r31, 0x06	; 6
    4766:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    4768:	80 e4       	ldi	r24, 0x40	; 64
    476a:	e0 e6       	ldi	r30, 0x60	; 96
    476c:	f6 e0       	ldi	r31, 0x06	; 6
    476e:	85 83       	std	Z+5, r24	; 0x05
}
    4770:	08 95       	ret

00004772 <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    4772:	80 e4       	ldi	r24, 0x40	; 64
    4774:	e0 e6       	ldi	r30, 0x60	; 96
    4776:	f6 e0       	ldi	r31, 0x06	; 6
    4778:	86 83       	std	Z+6, r24	; 0x06
}
    477a:	08 95       	ret

0000477c <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    477c:	cf 93       	push	r28
    477e:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    4780:	10 92 4c 24 	sts	0x244C, r1
	ax.exec_mutex = FALSE;
    4784:	10 92 4b 24 	sts	0x244B, r1

	ax.a[X_AXIS].port = &X_MOTOR_PORT;				// bind PORTs to structs
    4788:	80 e0       	ldi	r24, 0x00	; 0
    478a:	96 e0       	ldi	r25, 0x06	; 6
    478c:	80 93 5a 24 	sts	0x245A, r24
    4790:	90 93 5b 24 	sts	0x245B, r25
	ax.a[Y_AXIS].port = &Y_MOTOR_PORT;
    4794:	80 ea       	ldi	r24, 0xA0	; 160
    4796:	96 e0       	ldi	r25, 0x06	; 6
    4798:	80 93 69 24 	sts	0x2469, r24
    479c:	90 93 6a 24 	sts	0x246A, r25
	ax.a[Z_AXIS].port = &Z_MOTOR_PORT;
    47a0:	80 e8       	ldi	r24, 0x80	; 128
    47a2:	96 e0       	ldi	r25, 0x06	; 6
    47a4:	80 93 78 24 	sts	0x2478, r24
    47a8:	90 93 79 24 	sts	0x2479, r25
	ax.a[A_AXIS].port = &A_MOTOR_PORT;
    47ac:	80 e6       	ldi	r24, 0x60	; 96
    47ae:	96 e0       	ldi	r25, 0x06	; 6
    47b0:	80 93 87 24 	sts	0x2487, r24
    47b4:	90 93 88 24 	sts	0x2488, r25

	ax.a[X_AXIS].timer = &X_TIMER;					// bind TIMERs to structs
    47b8:	80 e0       	ldi	r24, 0x00	; 0
    47ba:	98 e0       	ldi	r25, 0x08	; 8
    47bc:	80 93 5c 24 	sts	0x245C, r24
    47c0:	90 93 5d 24 	sts	0x245D, r25
	ax.a[Y_AXIS].timer = &Y_TIMER;
    47c4:	80 e0       	ldi	r24, 0x00	; 0
    47c6:	99 e0       	ldi	r25, 0x09	; 9
    47c8:	80 93 6b 24 	sts	0x246B, r24
    47cc:	90 93 6c 24 	sts	0x246C, r25
	ax.a[Z_AXIS].timer = &Z_TIMER;
    47d0:	80 e0       	ldi	r24, 0x00	; 0
    47d2:	9a e0       	ldi	r25, 0x0A	; 10
    47d4:	80 93 7a 24 	sts	0x247A, r24
    47d8:	90 93 7b 24 	sts	0x247B, r25
	ax.a[A_AXIS].timer = &A_TIMER;
    47dc:	80 e0       	ldi	r24, 0x00	; 0
    47de:	9b e0       	ldi	r25, 0x0B	; 11
    47e0:	80 93 89 24 	sts	0x2489, r24
    47e4:	90 93 8a 24 	sts	0x248A, r25
    47e8:	cb e9       	ldi	r28, 0x9B	; 155
    47ea:	d4 e2       	ldi	r29, 0x24	; 36
    47ec:	a9 e5       	ldi	r26, 0x59	; 89
    47ee:	b4 e2       	ldi	r27, 0x24	; 36

	for (uint8_t i=0; i <= A_AXIS; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    47f0:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    47f2:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    47f4:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y_AXIS].timer = &Y_TIMER;
	ax.a[Z_AXIS].timer = &Z_TIMER;
	ax.a[A_AXIS].timer = &A_TIMER;

	for (uint8_t i=0; i <= A_AXIS; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    47f6:	88 81       	ld	r24, Y
    47f8:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    47fa:	11 96       	adiw	r26, 0x01	; 1
    47fc:	ed 91       	ld	r30, X+
    47fe:	fc 91       	ld	r31, X
    4800:	12 97       	sbiw	r26, 0x02	; 2
    4802:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    4804:	11 96       	adiw	r26, 0x01	; 1
    4806:	ed 91       	ld	r30, X+
    4808:	fc 91       	ld	r31, X
    480a:	12 97       	sbiw	r26, 0x02	; 2
    480c:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
    480e:	11 96       	adiw	r26, 0x01	; 1
    4810:	ed 91       	ld	r30, X+
    4812:	fc 91       	ld	r31, X
    4814:	12 97       	sbiw	r26, 0x02	; 2
    4816:	84 81       	ldd	r24, Z+4	; 0x04
    4818:	88 61       	ori	r24, 0x18	; 24
    481a:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    481c:	11 96       	adiw	r26, 0x01	; 1
    481e:	ed 91       	ld	r30, X+
    4820:	fc 91       	ld	r31, X
    4822:	12 97       	sbiw	r26, 0x02	; 2
    4824:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    4826:	13 96       	adiw	r26, 0x03	; 3
    4828:	ed 91       	ld	r30, X+
    482a:	fc 91       	ld	r31, X
    482c:	14 97       	sbiw	r26, 0x04	; 4
    482e:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    4830:	13 96       	adiw	r26, 0x03	; 3
    4832:	ed 91       	ld	r30, X+
    4834:	fc 91       	ld	r31, X
    4836:	14 97       	sbiw	r26, 0x04	; 4
    4838:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    483a:	13 96       	adiw	r26, 0x03	; 3
    483c:	ed 91       	ld	r30, X+
    483e:	fc 91       	ld	r31, X
    4840:	14 97       	sbiw	r26, 0x04	; 4
    4842:	96 83       	std	Z+6, r25	; 0x06
    4844:	68 96       	adiw	r28, 0x18	; 24
    4846:	1f 96       	adiw	r26, 0x0f	; 15
	ax.a[X_AXIS].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y_AXIS].timer = &Y_TIMER;
	ax.a[Z_AXIS].timer = &Z_TIMER;
	ax.a[A_AXIS].timer = &A_TIMER;

	for (uint8_t i=0; i <= A_AXIS; i++) {
    4848:	84 e2       	ldi	r24, 0x24	; 36
    484a:	cb 3f       	cpi	r28, 0xFB	; 251
    484c:	d8 07       	cpc	r29, r24
    484e:	99 f6       	brne	.-90     	; 0x47f6 <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    4850:	df 91       	pop	r29
    4852:	cf 91       	pop	r28
    4854:	08 95       	ret

00004856 <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	fc 01       	movw	r30, r24
    485a:	24 e0       	ldi	r18, 0x04	; 4
    485c:	ee 0f       	add	r30, r30
    485e:	ff 1f       	adc	r31, r31
    4860:	2a 95       	dec	r18
    4862:	e1 f7       	brne	.-8      	; 0x485c <st_set_polarity+0x6>
    4864:	e8 1b       	sub	r30, r24
    4866:	f9 0b       	sbc	r31, r25
    4868:	e5 5b       	subi	r30, 0xB5	; 181
    486a:	fb 4d       	sbci	r31, 0xDB	; 219
    486c:	66 87       	std	Z+14, r22	; 0x0e
}
    486e:	08 95       	ret

00004870 <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X_AXIS].step_counter = 0x00001000;
    4870:	80 e0       	ldi	r24, 0x00	; 0
    4872:	90 e1       	ldi	r25, 0x10	; 16
    4874:	a0 e0       	ldi	r26, 0x00	; 0
    4876:	b0 e0       	ldi	r27, 0x00	; 0
    4878:	80 93 4f 24 	sts	0x244F, r24
    487c:	90 93 50 24 	sts	0x2450, r25
    4880:	a0 93 51 24 	sts	0x2451, r26
    4884:	b0 93 52 24 	sts	0x2452, r27
	ax.a[X_AXIS].timer->PER = 0x1000;			// step rate (period)
    4888:	e0 91 5c 24 	lds	r30, 0x245C
    488c:	f0 91 5d 24 	lds	r31, 0x245D
    4890:	80 e0       	ldi	r24, 0x00	; 0
    4892:	90 e1       	ldi	r25, 0x10	; 16
    4894:	86 a3       	std	Z+38, r24	; 0x26
    4896:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X_AXIS].timer->CTRLA = TC_CLK_ON;		// start clock
    4898:	21 e0       	ldi	r18, 0x01	; 1
    489a:	20 83       	st	Z, r18

	ax.a[Y_AXIS].step_counter = 0x00000800;
    489c:	80 e0       	ldi	r24, 0x00	; 0
    489e:	98 e0       	ldi	r25, 0x08	; 8
    48a0:	a0 e0       	ldi	r26, 0x00	; 0
    48a2:	b0 e0       	ldi	r27, 0x00	; 0
    48a4:	80 93 5e 24 	sts	0x245E, r24
    48a8:	90 93 5f 24 	sts	0x245F, r25
    48ac:	a0 93 60 24 	sts	0x2460, r26
    48b0:	b0 93 61 24 	sts	0x2461, r27
	ax.a[Y_AXIS].timer->PER = 0x2000;
    48b4:	e0 91 6b 24 	lds	r30, 0x246B
    48b8:	f0 91 6c 24 	lds	r31, 0x246C
    48bc:	80 e0       	ldi	r24, 0x00	; 0
    48be:	90 e2       	ldi	r25, 0x20	; 32
    48c0:	86 a3       	std	Z+38, r24	; 0x26
    48c2:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y_AXIS].timer->CTRLA = TC_CLK_ON;
    48c4:	20 83       	st	Z, r18

	ax.a[Z_AXIS].step_counter = 0x00000600;
    48c6:	80 e0       	ldi	r24, 0x00	; 0
    48c8:	96 e0       	ldi	r25, 0x06	; 6
    48ca:	a0 e0       	ldi	r26, 0x00	; 0
    48cc:	b0 e0       	ldi	r27, 0x00	; 0
    48ce:	80 93 6d 24 	sts	0x246D, r24
    48d2:	90 93 6e 24 	sts	0x246E, r25
    48d6:	a0 93 6f 24 	sts	0x246F, r26
    48da:	b0 93 70 24 	sts	0x2470, r27
	ax.a[Z_AXIS].timer->PER = 0x3000;
    48de:	e0 91 7a 24 	lds	r30, 0x247A
    48e2:	f0 91 7b 24 	lds	r31, 0x247B
    48e6:	80 e0       	ldi	r24, 0x00	; 0
    48e8:	90 e3       	ldi	r25, 0x30	; 48
    48ea:	86 a3       	std	Z+38, r24	; 0x26
    48ec:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z_AXIS].timer->CTRLA = TC_CLK_ON;
    48ee:	20 83       	st	Z, r18

	ax.a[A_AXIS].step_counter = 0x00000400;
    48f0:	80 e0       	ldi	r24, 0x00	; 0
    48f2:	94 e0       	ldi	r25, 0x04	; 4
    48f4:	a0 e0       	ldi	r26, 0x00	; 0
    48f6:	b0 e0       	ldi	r27, 0x00	; 0
    48f8:	80 93 7c 24 	sts	0x247C, r24
    48fc:	90 93 7d 24 	sts	0x247D, r25
    4900:	a0 93 7e 24 	sts	0x247E, r26
    4904:	b0 93 7f 24 	sts	0x247F, r27
	ax.a[A_AXIS].timer->PER = 0x4000;
    4908:	e0 91 89 24 	lds	r30, 0x2489
    490c:	f0 91 8a 24 	lds	r31, 0x248A
    4910:	80 e0       	ldi	r24, 0x00	; 0
    4912:	90 e4       	ldi	r25, 0x40	; 64
    4914:	86 a3       	std	Z+38, r24	; 0x26
    4916:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A_AXIS].timer->CTRLA = TC_CLK_ON;
    4918:	20 83       	st	Z, r18

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    491a:	ec e4       	ldi	r30, 0x4C	; 76
    491c:	f4 e2       	ldi	r31, 0x24	; 36
    491e:	80 81       	ld	r24, Z
    4920:	8f 60       	ori	r24, 0x0F	; 15
    4922:	80 83       	st	Z, r24
}
    4924:	08 95       	ret

00004926 <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    4926:	f8 94       	cli
	mv_flush();									// flush the move buffer
    4928:	0e 94 54 31 	call	0x62a8	; 0x62a8 <mv_flush>
	sei();
    492c:	78 94       	sei
}
    492e:	08 95       	ret

00004930 <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    4930:	f8 94       	cli
	ax.a[X_AXIS].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    4932:	e0 91 5c 24 	lds	r30, 0x245C
    4936:	f0 91 5d 24 	lds	r31, 0x245D
    493a:	10 82       	st	Z, r1
	ax.a[Y_AXIS].timer->CTRLA = TC_CLK_OFF;
    493c:	e0 91 6b 24 	lds	r30, 0x246B
    4940:	f0 91 6c 24 	lds	r31, 0x246C
    4944:	10 82       	st	Z, r1
	ax.a[Z_AXIS].timer->CTRLA = TC_CLK_OFF;
    4946:	e0 91 7a 24 	lds	r30, 0x247A
    494a:	f0 91 7b 24 	lds	r31, 0x247B
    494e:	10 82       	st	Z, r1
	ax.a[A_AXIS].timer->CTRLA = TC_CLK_OFF;
    4950:	e0 91 89 24 	lds	r30, 0x2489
    4954:	f0 91 8a 24 	lds	r31, 0x248A
    4958:	10 82       	st	Z, r1
	
	mv_flush();									// flush the move buffer
    495a:	0e 94 54 31 	call	0x62a8	; 0x62a8 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    495e:	10 92 4c 24 	sts	0x244C, r1
	sei();
    4962:	78 94       	sei
}
    4964:	08 95       	ret

00004966 <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    4966:	cf 93       	push	r28
    4968:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    496a:	80 91 4b 24 	lds	r24, 0x244B
    496e:	88 23       	and	r24, r24
    4970:	09 f0       	breq	.+2      	; 0x4974 <st_execute_move+0xe>
    4972:	b6 c0       	rjmp	.+364    	; 0x4ae0 <st_execute_move+0x17a>
		return;
	}
	ax.exec_mutex = TRUE;
    4974:	81 e0       	ldi	r24, 0x01	; 1
    4976:	80 93 4b 24 	sts	0x244B, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    497a:	80 91 4c 24 	lds	r24, 0x244C
    497e:	88 23       	and	r24, r24
    4980:	09 f0       	breq	.+2      	; 0x4984 <st_execute_move+0x1e>
    4982:	ac c0       	rjmp	.+344    	; 0x4adc <st_execute_move+0x176>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    4984:	0e 94 11 31 	call	0x6222	; 0x6222 <mv_dequeue_move_buffer>
    4988:	80 93 4d 24 	sts	0x244D, r24
    498c:	90 93 4e 24 	sts	0x244E, r25
    4990:	89 2b       	or	r24, r25
    4992:	09 f4       	brne	.+2      	; 0x4996 <st_execute_move+0x30>
    4994:	a3 c0       	rjmp	.+326    	; 0x4adc <st_execute_move+0x176>
		ax.exec_mutex = FALSE;
		return;
    4996:	cf e4       	ldi	r28, 0x4F	; 79
    4998:	d4 e2       	ldi	r29, 0x24	; 36
    499a:	20 e0       	ldi	r18, 0x00	; 0
    499c:	30 e0       	ldi	r19, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    499e:	54 e0       	ldi	r21, 0x04	; 4
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
			continue;
		}
		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    49a0:	42 e0       	ldi	r20, 0x02	; 2
	_st_fake_move();
	return;
#endif

	for (i = X_AXIS; i <= Z_AXIS; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    49a2:	ed 85       	ldd	r30, Y+13	; 0x0d
    49a4:	fe 85       	ldd	r31, Y+14	; 0x0e
    49a6:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    49a8:	e0 91 4d 24 	lds	r30, 0x244D
    49ac:	f0 91 4e 24 	lds	r31, 0x244E
    49b0:	c9 01       	movw	r24, r18
    49b2:	73 e0       	ldi	r23, 0x03	; 3
    49b4:	88 0f       	add	r24, r24
    49b6:	99 1f       	adc	r25, r25
    49b8:	7a 95       	dec	r23
    49ba:	e1 f7       	brne	.-8      	; 0x49b4 <st_execute_move+0x4e>
    49bc:	82 0f       	add	r24, r18
    49be:	93 1f       	adc	r25, r19
    49c0:	e8 0f       	add	r30, r24
    49c2:	f9 1f       	adc	r31, r25
    49c4:	80 81       	ld	r24, Z
    49c6:	91 81       	ldd	r25, Z+1	; 0x01
    49c8:	a2 81       	ldd	r26, Z+2	; 0x02
    49ca:	b3 81       	ldd	r27, Z+3	; 0x03
    49cc:	00 97       	sbiw	r24, 0x00	; 0
    49ce:	a1 05       	cpc	r26, r1
    49d0:	b1 05       	cpc	r27, r1
    49d2:	b1 f1       	breq	.+108    	; 0x4a40 <st_execute_move+0xda>
			continue;
		}
		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    49d4:	90 85       	ldd	r25, Z+8	; 0x08
    49d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    49d8:	eb 85       	ldd	r30, Y+11	; 0x0b
    49da:	fc 85       	ldd	r31, Y+12	; 0x0c
    49dc:	98 17       	cp	r25, r24
    49de:	11 f0       	breq	.+4      	; 0x49e4 <st_execute_move+0x7e>
    49e0:	45 83       	std	Z+5, r20	; 0x05
    49e2:	01 c0       	rjmp	.+2      	; 0x49e6 <st_execute_move+0x80>
    49e4:	46 83       	std	Z+6, r20	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    49e6:	e0 91 4d 24 	lds	r30, 0x244D
    49ea:	f0 91 4e 24 	lds	r31, 0x244E
    49ee:	c9 01       	movw	r24, r18
    49f0:	63 e0       	ldi	r22, 0x03	; 3
    49f2:	88 0f       	add	r24, r24
    49f4:	99 1f       	adc	r25, r25
    49f6:	6a 95       	dec	r22
    49f8:	e1 f7       	brne	.-8      	; 0x49f2 <st_execute_move+0x8c>
    49fa:	82 0f       	add	r24, r18
    49fc:	93 1f       	adc	r25, r19
    49fe:	e8 0f       	add	r30, r24
    4a00:	f9 1f       	adc	r31, r25
    4a02:	80 81       	ld	r24, Z
    4a04:	91 81       	ldd	r25, Z+1	; 0x01
    4a06:	a2 81       	ldd	r26, Z+2	; 0x02
    4a08:	b3 81       	ldd	r27, Z+3	; 0x03
    4a0a:	88 83       	st	Y, r24
    4a0c:	99 83       	std	Y+1, r25	; 0x01
    4a0e:	aa 83       	std	Y+2, r26	; 0x02
    4a10:	bb 83       	std	Y+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    4a12:	86 81       	ldd	r24, Z+6	; 0x06
    4a14:	97 81       	ldd	r25, Z+7	; 0x07
    4a16:	8e 83       	std	Y+6, r24	; 0x06
    4a18:	9f 83       	std	Y+7, r25	; 0x07
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    4a1a:	86 81       	ldd	r24, Z+6	; 0x06
    4a1c:	97 81       	ldd	r25, Z+7	; 0x07
    4a1e:	88 87       	std	Y+8, r24	; 0x08
    4a20:	99 87       	std	Y+9, r25	; 0x09
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    4a22:	84 81       	ldd	r24, Z+4	; 0x04
    4a24:	95 81       	ldd	r25, Z+5	; 0x05
    4a26:	8c 83       	std	Y+4, r24	; 0x04
    4a28:	9d 83       	std	Y+5, r25	; 0x05
		ax.a[i].timer->PER = ax.p->a[i].period;
    4a2a:	ad 85       	ldd	r26, Y+13	; 0x0d
    4a2c:	be 85       	ldd	r27, Y+14	; 0x0e
    4a2e:	84 81       	ldd	r24, Z+4	; 0x04
    4a30:	95 81       	ldd	r25, Z+5	; 0x05
    4a32:	96 96       	adiw	r26, 0x26	; 38
    4a34:	8d 93       	st	X+, r24
    4a36:	9c 93       	st	X, r25
    4a38:	97 97       	sbiw	r26, 0x27	; 39
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4a3a:	eb 85       	ldd	r30, Y+11	; 0x0b
    4a3c:	fc 85       	ldd	r31, Y+12	; 0x0c
    4a3e:	56 83       	std	Z+6, r21	; 0x06
    4a40:	2f 5f       	subi	r18, 0xFF	; 255
    4a42:	3f 4f       	sbci	r19, 0xFF	; 255
    4a44:	2f 96       	adiw	r28, 0x0f	; 15
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i = X_AXIS; i <= Z_AXIS; i++) {
    4a46:	23 30       	cpi	r18, 0x03	; 3
    4a48:	31 05       	cpc	r19, r1
    4a4a:	09 f0       	breq	.+2      	; 0x4a4e <st_execute_move+0xe8>
    4a4c:	aa cf       	rjmp	.-172    	; 0x49a2 <st_execute_move+0x3c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4a4e:	10 92 4c 24 	sts	0x244C, r1
	if (ax.a[X_AXIS].step_counter) { 
    4a52:	80 91 4f 24 	lds	r24, 0x244F
    4a56:	90 91 50 24 	lds	r25, 0x2450
    4a5a:	a0 91 51 24 	lds	r26, 0x2451
    4a5e:	b0 91 52 24 	lds	r27, 0x2452
    4a62:	00 97       	sbiw	r24, 0x00	; 0
    4a64:	a1 05       	cpc	r26, r1
    4a66:	b1 05       	cpc	r27, r1
    4a68:	59 f0       	breq	.+22     	; 0x4a80 <st_execute_move+0x11a>
		ax.a[X_AXIS].timer->CTRLA = TC_CLK_ON;
    4a6a:	e0 91 5c 24 	lds	r30, 0x245C
    4a6e:	f0 91 5d 24 	lds	r31, 0x245D
    4a72:	81 e0       	ldi	r24, 0x01	; 1
    4a74:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4a76:	80 91 4c 24 	lds	r24, 0x244C
    4a7a:	88 60       	ori	r24, 0x08	; 8
    4a7c:	80 93 4c 24 	sts	0x244C, r24
	}
	if (ax.a[Y_AXIS].step_counter) {
    4a80:	80 91 5e 24 	lds	r24, 0x245E
    4a84:	90 91 5f 24 	lds	r25, 0x245F
    4a88:	a0 91 60 24 	lds	r26, 0x2460
    4a8c:	b0 91 61 24 	lds	r27, 0x2461
    4a90:	00 97       	sbiw	r24, 0x00	; 0
    4a92:	a1 05       	cpc	r26, r1
    4a94:	b1 05       	cpc	r27, r1
    4a96:	59 f0       	breq	.+22     	; 0x4aae <st_execute_move+0x148>
		ax.a[Y_AXIS].timer->CTRLA = TC_CLK_ON;
    4a98:	e0 91 6b 24 	lds	r30, 0x246B
    4a9c:	f0 91 6c 24 	lds	r31, 0x246C
    4aa0:	81 e0       	ldi	r24, 0x01	; 1
    4aa2:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4aa4:	80 91 4c 24 	lds	r24, 0x244C
    4aa8:	84 60       	ori	r24, 0x04	; 4
    4aaa:	80 93 4c 24 	sts	0x244C, r24
	}
	if (ax.a[Z_AXIS].step_counter) {
    4aae:	80 91 6d 24 	lds	r24, 0x246D
    4ab2:	90 91 6e 24 	lds	r25, 0x246E
    4ab6:	a0 91 6f 24 	lds	r26, 0x246F
    4aba:	b0 91 70 24 	lds	r27, 0x2470
    4abe:	00 97       	sbiw	r24, 0x00	; 0
    4ac0:	a1 05       	cpc	r26, r1
    4ac2:	b1 05       	cpc	r27, r1
    4ac4:	59 f0       	breq	.+22     	; 0x4adc <st_execute_move+0x176>
		ax.a[Z_AXIS].timer->CTRLA = TC_CLK_ON;
    4ac6:	e0 91 7a 24 	lds	r30, 0x247A
    4aca:	f0 91 7b 24 	lds	r31, 0x247B
    4ace:	81 e0       	ldi	r24, 0x01	; 1
    4ad0:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4ad2:	80 91 4c 24 	lds	r24, 0x244C
    4ad6:	82 60       	ori	r24, 0x02	; 2
    4ad8:	80 93 4c 24 	sts	0x244C, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4adc:	10 92 4b 24 	sts	0x244B, r1
}
    4ae0:	df 91       	pop	r29
    4ae2:	cf 91       	pop	r28
    4ae4:	08 95       	ret

00004ae6 <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4ae6:	10 92 4b 24 	sts	0x244B, r1
	st_execute_move();		// recursively empty the move queue
    4aea:	0e 94 b3 24 	call	0x4966	; 0x4966 <st_execute_move>
	return;
}
    4aee:	08 95       	ret

00004af0 <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4af0:	1f 92       	push	r1
    4af2:	0f 92       	push	r0
    4af4:	0f b6       	in	r0, 0x3f	; 63
    4af6:	0f 92       	push	r0
    4af8:	0b b6       	in	r0, 0x3b	; 59
    4afa:	0f 92       	push	r0
    4afc:	11 24       	eor	r1, r1
    4afe:	2f 93       	push	r18
    4b00:	3f 93       	push	r19
    4b02:	4f 93       	push	r20
    4b04:	5f 93       	push	r21
    4b06:	6f 93       	push	r22
    4b08:	7f 93       	push	r23
    4b0a:	8f 93       	push	r24
    4b0c:	9f 93       	push	r25
    4b0e:	af 93       	push	r26
    4b10:	bf 93       	push	r27
    4b12:	ef 93       	push	r30
    4b14:	ff 93       	push	r31
	if (--ax.a[A_AXIS].postscale_counter != 0) {
    4b16:	80 91 84 24 	lds	r24, 0x2484
    4b1a:	90 91 85 24 	lds	r25, 0x2485
    4b1e:	01 97       	sbiw	r24, 0x01	; 1
    4b20:	80 93 84 24 	sts	0x2484, r24
    4b24:	90 93 85 24 	sts	0x2485, r25
    4b28:	89 2b       	or	r24, r25
    4b2a:	a1 f5       	brne	.+104    	; 0x4b94 <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4b2c:	e0 e6       	ldi	r30, 0x60	; 96
    4b2e:	f6 e0       	ldi	r31, 0x06	; 6
    4b30:	81 e0       	ldi	r24, 0x01	; 1
    4b32:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A_AXIS].step_counter == 0) {
    4b34:	80 91 7c 24 	lds	r24, 0x247C
    4b38:	90 91 7d 24 	lds	r25, 0x247D
    4b3c:	a0 91 7e 24 	lds	r26, 0x247E
    4b40:	b0 91 7f 24 	lds	r27, 0x247F
    4b44:	01 97       	sbiw	r24, 0x01	; 1
    4b46:	a1 09       	sbc	r26, r1
    4b48:	b1 09       	sbc	r27, r1
    4b4a:	80 93 7c 24 	sts	0x247C, r24
    4b4e:	90 93 7d 24 	sts	0x247D, r25
    4b52:	a0 93 7e 24 	sts	0x247E, r26
    4b56:	b0 93 7f 24 	sts	0x247F, r27
    4b5a:	00 97       	sbiw	r24, 0x00	; 0
    4b5c:	a1 05       	cpc	r26, r1
    4b5e:	b1 05       	cpc	r27, r1
    4b60:	69 f4       	brne	.+26     	; 0x4b7c <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4b62:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4b66:	84 e0       	ldi	r24, 0x04	; 4
    4b68:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4b6a:	80 91 4c 24 	lds	r24, 0x244C
    4b6e:	8e 7f       	andi	r24, 0xFE	; 254
    4b70:	80 93 4c 24 	sts	0x244C, r24
		if (ax.active_axes == 0) {
    4b74:	88 23       	and	r24, r24
    4b76:	11 f4       	brne	.+4      	; 0x4b7c <__vector_108+0x8c>
			st_execute_move();
    4b78:	0e 94 b3 24 	call	0x4966	; 0x4966 <st_execute_move>
		}
	}
	ax.a[A_AXIS].postscale_counter = ax.a[A_AXIS].postscale_value;
    4b7c:	80 91 82 24 	lds	r24, 0x2482
    4b80:	90 91 83 24 	lds	r25, 0x2483
    4b84:	80 93 84 24 	sts	0x2484, r24
    4b88:	90 93 85 24 	sts	0x2485, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4b8c:	81 e0       	ldi	r24, 0x01	; 1
    4b8e:	e0 e6       	ldi	r30, 0x60	; 96
    4b90:	f6 e0       	ldi	r31, 0x06	; 6
    4b92:	86 83       	std	Z+6, r24	; 0x06
}
    4b94:	ff 91       	pop	r31
    4b96:	ef 91       	pop	r30
    4b98:	bf 91       	pop	r27
    4b9a:	af 91       	pop	r26
    4b9c:	9f 91       	pop	r25
    4b9e:	8f 91       	pop	r24
    4ba0:	7f 91       	pop	r23
    4ba2:	6f 91       	pop	r22
    4ba4:	5f 91       	pop	r21
    4ba6:	4f 91       	pop	r20
    4ba8:	3f 91       	pop	r19
    4baa:	2f 91       	pop	r18
    4bac:	0f 90       	pop	r0
    4bae:	0b be       	out	0x3b, r0	; 59
    4bb0:	0f 90       	pop	r0
    4bb2:	0f be       	out	0x3f, r0	; 63
    4bb4:	0f 90       	pop	r0
    4bb6:	1f 90       	pop	r1
    4bb8:	18 95       	reti

00004bba <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4bba:	1f 92       	push	r1
    4bbc:	0f 92       	push	r0
    4bbe:	0f b6       	in	r0, 0x3f	; 63
    4bc0:	0f 92       	push	r0
    4bc2:	0b b6       	in	r0, 0x3b	; 59
    4bc4:	0f 92       	push	r0
    4bc6:	11 24       	eor	r1, r1
    4bc8:	2f 93       	push	r18
    4bca:	3f 93       	push	r19
    4bcc:	4f 93       	push	r20
    4bce:	5f 93       	push	r21
    4bd0:	6f 93       	push	r22
    4bd2:	7f 93       	push	r23
    4bd4:	8f 93       	push	r24
    4bd6:	9f 93       	push	r25
    4bd8:	af 93       	push	r26
    4bda:	bf 93       	push	r27
    4bdc:	ef 93       	push	r30
    4bde:	ff 93       	push	r31
	if (--ax.a[Z_AXIS].postscale_counter != 0) {
    4be0:	80 91 75 24 	lds	r24, 0x2475
    4be4:	90 91 76 24 	lds	r25, 0x2476
    4be8:	01 97       	sbiw	r24, 0x01	; 1
    4bea:	80 93 75 24 	sts	0x2475, r24
    4bee:	90 93 76 24 	sts	0x2476, r25
    4bf2:	89 2b       	or	r24, r25
    4bf4:	a1 f5       	brne	.+104    	; 0x4c5e <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4bf6:	e0 e8       	ldi	r30, 0x80	; 128
    4bf8:	f6 e0       	ldi	r31, 0x06	; 6
    4bfa:	81 e0       	ldi	r24, 0x01	; 1
    4bfc:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z_AXIS].step_counter == 0) {
    4bfe:	80 91 6d 24 	lds	r24, 0x246D
    4c02:	90 91 6e 24 	lds	r25, 0x246E
    4c06:	a0 91 6f 24 	lds	r26, 0x246F
    4c0a:	b0 91 70 24 	lds	r27, 0x2470
    4c0e:	01 97       	sbiw	r24, 0x01	; 1
    4c10:	a1 09       	sbc	r26, r1
    4c12:	b1 09       	sbc	r27, r1
    4c14:	80 93 6d 24 	sts	0x246D, r24
    4c18:	90 93 6e 24 	sts	0x246E, r25
    4c1c:	a0 93 6f 24 	sts	0x246F, r26
    4c20:	b0 93 70 24 	sts	0x2470, r27
    4c24:	00 97       	sbiw	r24, 0x00	; 0
    4c26:	a1 05       	cpc	r26, r1
    4c28:	b1 05       	cpc	r27, r1
    4c2a:	69 f4       	brne	.+26     	; 0x4c46 <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4c2c:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4c30:	84 e0       	ldi	r24, 0x04	; 4
    4c32:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4c34:	80 91 4c 24 	lds	r24, 0x244C
    4c38:	8d 7f       	andi	r24, 0xFD	; 253
    4c3a:	80 93 4c 24 	sts	0x244C, r24
		if (ax.active_axes == 0) {
    4c3e:	88 23       	and	r24, r24
    4c40:	11 f4       	brne	.+4      	; 0x4c46 <__vector_47+0x8c>
			st_execute_move();
    4c42:	0e 94 b3 24 	call	0x4966	; 0x4966 <st_execute_move>
		}
	}
	ax.a[Z_AXIS].postscale_counter = ax.a[Z_AXIS].postscale_value;
    4c46:	80 91 73 24 	lds	r24, 0x2473
    4c4a:	90 91 74 24 	lds	r25, 0x2474
    4c4e:	80 93 75 24 	sts	0x2475, r24
    4c52:	90 93 76 24 	sts	0x2476, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4c56:	81 e0       	ldi	r24, 0x01	; 1
    4c58:	e0 e8       	ldi	r30, 0x80	; 128
    4c5a:	f6 e0       	ldi	r31, 0x06	; 6
    4c5c:	86 83       	std	Z+6, r24	; 0x06
}
    4c5e:	ff 91       	pop	r31
    4c60:	ef 91       	pop	r30
    4c62:	bf 91       	pop	r27
    4c64:	af 91       	pop	r26
    4c66:	9f 91       	pop	r25
    4c68:	8f 91       	pop	r24
    4c6a:	7f 91       	pop	r23
    4c6c:	6f 91       	pop	r22
    4c6e:	5f 91       	pop	r21
    4c70:	4f 91       	pop	r20
    4c72:	3f 91       	pop	r19
    4c74:	2f 91       	pop	r18
    4c76:	0f 90       	pop	r0
    4c78:	0b be       	out	0x3b, r0	; 59
    4c7a:	0f 90       	pop	r0
    4c7c:	0f be       	out	0x3f, r0	; 63
    4c7e:	0f 90       	pop	r0
    4c80:	1f 90       	pop	r1
    4c82:	18 95       	reti

00004c84 <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4c84:	1f 92       	push	r1
    4c86:	0f 92       	push	r0
    4c88:	0f b6       	in	r0, 0x3f	; 63
    4c8a:	0f 92       	push	r0
    4c8c:	0b b6       	in	r0, 0x3b	; 59
    4c8e:	0f 92       	push	r0
    4c90:	11 24       	eor	r1, r1
    4c92:	2f 93       	push	r18
    4c94:	3f 93       	push	r19
    4c96:	4f 93       	push	r20
    4c98:	5f 93       	push	r21
    4c9a:	6f 93       	push	r22
    4c9c:	7f 93       	push	r23
    4c9e:	8f 93       	push	r24
    4ca0:	9f 93       	push	r25
    4ca2:	af 93       	push	r26
    4ca4:	bf 93       	push	r27
    4ca6:	ef 93       	push	r30
    4ca8:	ff 93       	push	r31
	if (--ax.a[Y_AXIS].postscale_counter != 0) {
    4caa:	80 91 66 24 	lds	r24, 0x2466
    4cae:	90 91 67 24 	lds	r25, 0x2467
    4cb2:	01 97       	sbiw	r24, 0x01	; 1
    4cb4:	80 93 66 24 	sts	0x2466, r24
    4cb8:	90 93 67 24 	sts	0x2467, r25
    4cbc:	89 2b       	or	r24, r25
    4cbe:	a1 f5       	brne	.+104    	; 0x4d28 <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4cc0:	e0 ea       	ldi	r30, 0xA0	; 160
    4cc2:	f6 e0       	ldi	r31, 0x06	; 6
    4cc4:	81 e0       	ldi	r24, 0x01	; 1
    4cc6:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y_AXIS].step_counter == 0) {
    4cc8:	80 91 5e 24 	lds	r24, 0x245E
    4ccc:	90 91 5f 24 	lds	r25, 0x245F
    4cd0:	a0 91 60 24 	lds	r26, 0x2460
    4cd4:	b0 91 61 24 	lds	r27, 0x2461
    4cd8:	01 97       	sbiw	r24, 0x01	; 1
    4cda:	a1 09       	sbc	r26, r1
    4cdc:	b1 09       	sbc	r27, r1
    4cde:	80 93 5e 24 	sts	0x245E, r24
    4ce2:	90 93 5f 24 	sts	0x245F, r25
    4ce6:	a0 93 60 24 	sts	0x2460, r26
    4cea:	b0 93 61 24 	sts	0x2461, r27
    4cee:	00 97       	sbiw	r24, 0x00	; 0
    4cf0:	a1 05       	cpc	r26, r1
    4cf2:	b1 05       	cpc	r27, r1
    4cf4:	69 f4       	brne	.+26     	; 0x4d10 <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4cf6:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4cfa:	84 e0       	ldi	r24, 0x04	; 4
    4cfc:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4cfe:	80 91 4c 24 	lds	r24, 0x244C
    4d02:	8b 7f       	andi	r24, 0xFB	; 251
    4d04:	80 93 4c 24 	sts	0x244C, r24
		if (ax.active_axes == 0) {
    4d08:	88 23       	and	r24, r24
    4d0a:	11 f4       	brne	.+4      	; 0x4d10 <__vector_77+0x8c>
			st_execute_move();
    4d0c:	0e 94 b3 24 	call	0x4966	; 0x4966 <st_execute_move>
		}
	}
	ax.a[Y_AXIS].postscale_counter = ax.a[Y_AXIS].postscale_value;
    4d10:	80 91 64 24 	lds	r24, 0x2464
    4d14:	90 91 65 24 	lds	r25, 0x2465
    4d18:	80 93 66 24 	sts	0x2466, r24
    4d1c:	90 93 67 24 	sts	0x2467, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4d20:	81 e0       	ldi	r24, 0x01	; 1
    4d22:	e0 ea       	ldi	r30, 0xA0	; 160
    4d24:	f6 e0       	ldi	r31, 0x06	; 6
    4d26:	86 83       	std	Z+6, r24	; 0x06
}
    4d28:	ff 91       	pop	r31
    4d2a:	ef 91       	pop	r30
    4d2c:	bf 91       	pop	r27
    4d2e:	af 91       	pop	r26
    4d30:	9f 91       	pop	r25
    4d32:	8f 91       	pop	r24
    4d34:	7f 91       	pop	r23
    4d36:	6f 91       	pop	r22
    4d38:	5f 91       	pop	r21
    4d3a:	4f 91       	pop	r20
    4d3c:	3f 91       	pop	r19
    4d3e:	2f 91       	pop	r18
    4d40:	0f 90       	pop	r0
    4d42:	0b be       	out	0x3b, r0	; 59
    4d44:	0f 90       	pop	r0
    4d46:	0f be       	out	0x3f, r0	; 63
    4d48:	0f 90       	pop	r0
    4d4a:	1f 90       	pop	r1
    4d4c:	18 95       	reti

00004d4e <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4d4e:	1f 92       	push	r1
    4d50:	0f 92       	push	r0
    4d52:	0f b6       	in	r0, 0x3f	; 63
    4d54:	0f 92       	push	r0
    4d56:	0b b6       	in	r0, 0x3b	; 59
    4d58:	0f 92       	push	r0
    4d5a:	11 24       	eor	r1, r1
    4d5c:	2f 93       	push	r18
    4d5e:	3f 93       	push	r19
    4d60:	4f 93       	push	r20
    4d62:	5f 93       	push	r21
    4d64:	6f 93       	push	r22
    4d66:	7f 93       	push	r23
    4d68:	8f 93       	push	r24
    4d6a:	9f 93       	push	r25
    4d6c:	af 93       	push	r26
    4d6e:	bf 93       	push	r27
    4d70:	ef 93       	push	r30
    4d72:	ff 93       	push	r31
	if (--ax.a[X_AXIS].postscale_counter != 0) {// get out fast, if you need to
    4d74:	80 91 57 24 	lds	r24, 0x2457
    4d78:	90 91 58 24 	lds	r25, 0x2458
    4d7c:	01 97       	sbiw	r24, 0x01	; 1
    4d7e:	80 93 57 24 	sts	0x2457, r24
    4d82:	90 93 58 24 	sts	0x2458, r25
    4d86:	89 2b       	or	r24, r25
    4d88:	a1 f5       	brne	.+104    	; 0x4df2 <__vector_14+0xa4>
		return;
	}
	X_MOTOR_PORT.OUTSET = STEP_BIT_bm;			// turn X step bit on
    4d8a:	e0 e0       	ldi	r30, 0x00	; 0
    4d8c:	f6 e0       	ldi	r31, 0x06	; 6
    4d8e:	81 e0       	ldi	r24, 0x01	; 1
    4d90:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[X_AXIS].step_counter == 0) {		// end-of-move processing
    4d92:	80 91 4f 24 	lds	r24, 0x244F
    4d96:	90 91 50 24 	lds	r25, 0x2450
    4d9a:	a0 91 51 24 	lds	r26, 0x2451
    4d9e:	b0 91 52 24 	lds	r27, 0x2452
    4da2:	01 97       	sbiw	r24, 0x01	; 1
    4da4:	a1 09       	sbc	r26, r1
    4da6:	b1 09       	sbc	r27, r1
    4da8:	80 93 4f 24 	sts	0x244F, r24
    4dac:	90 93 50 24 	sts	0x2450, r25
    4db0:	a0 93 51 24 	sts	0x2451, r26
    4db4:	b0 93 52 24 	sts	0x2452, r27
    4db8:	00 97       	sbiw	r24, 0x00	; 0
    4dba:	a1 05       	cpc	r26, r1
    4dbc:	b1 05       	cpc	r27, r1
    4dbe:	69 f4       	brne	.+26     	; 0x4dda <__vector_14+0x8c>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    4dc0:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4dc4:	84 e0       	ldi	r24, 0x04	; 4
    4dc6:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    4dc8:	80 91 4c 24 	lds	r24, 0x244C
    4dcc:	87 7f       	andi	r24, 0xF7	; 247
    4dce:	80 93 4c 24 	sts	0x244C, r24
		if (ax.active_axes == 0) {				// if all axes are done
    4dd2:	88 23       	and	r24, r24
    4dd4:	11 f4       	brne	.+4      	; 0x4dda <__vector_14+0x8c>
			st_execute_move();					// ...run the next move
    4dd6:	0e 94 b3 24 	call	0x4966	; 0x4966 <st_execute_move>
		}
	}
	ax.a[X_AXIS].postscale_counter = ax.a[X_AXIS].postscale_value;// reset post-scaler counter
    4dda:	80 91 55 24 	lds	r24, 0x2455
    4dde:	90 91 56 24 	lds	r25, 0x2456
    4de2:	80 93 57 24 	sts	0x2457, r24
    4de6:	90 93 58 24 	sts	0x2458, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    4dea:	81 e0       	ldi	r24, 0x01	; 1
    4dec:	e0 e0       	ldi	r30, 0x00	; 0
    4dee:	f6 e0       	ldi	r31, 0x06	; 6
    4df0:	86 83       	std	Z+6, r24	; 0x06
}
    4df2:	ff 91       	pop	r31
    4df4:	ef 91       	pop	r30
    4df6:	bf 91       	pop	r27
    4df8:	af 91       	pop	r26
    4dfa:	9f 91       	pop	r25
    4dfc:	8f 91       	pop	r24
    4dfe:	7f 91       	pop	r23
    4e00:	6f 91       	pop	r22
    4e02:	5f 91       	pop	r21
    4e04:	4f 91       	pop	r20
    4e06:	3f 91       	pop	r19
    4e08:	2f 91       	pop	r18
    4e0a:	0f 90       	pop	r0
    4e0c:	0b be       	out	0x3b, r0	; 59
    4e0e:	0f 90       	pop	r0
    4e10:	0f be       	out	0x3f, r0	; 63
    4e12:	0f 90       	pop	r0
    4e14:	1f 90       	pop	r1
    4e16:	18 95       	reti

00004e18 <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    4e18:	e0 ea       	ldi	r30, 0xA0	; 160
    4e1a:	f0 e0       	ldi	r31, 0x00	; 0
    4e1c:	82 81       	ldd	r24, Z+2	; 0x02
    4e1e:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    4e20:	98 ed       	ldi	r25, 0xD8	; 216
    4e22:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4e24:	82 83       	std	Z+2, r24	; 0x02
}
    4e26:	08 95       	ret

00004e28 <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    4e28:	e0 ea       	ldi	r30, 0xA0	; 160
    4e2a:	f0 e0       	ldi	r31, 0x00	; 0
    4e2c:	82 81       	ldd	r24, Z+2	; 0x02
    4e2e:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    4e30:	98 ed       	ldi	r25, 0xD8	; 216
    4e32:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4e34:	82 83       	std	Z+2, r24	; 0x02
}
    4e36:	08 95       	ret

00004e38 <xio_null_signal>:
 */

int xio_null_signal(uint8_t sig)
{
	return (TG_NOOP);
}
    4e38:	81 e0       	ldi	r24, 0x01	; 1
    4e3a:	90 e0       	ldi	r25, 0x00	; 0
    4e3c:	08 95       	ret

00004e3e <xio_null_line>:
 */

int xio_null_line(char * buf)
{
	return (TG_OK);
}
    4e3e:	80 e0       	ldi	r24, 0x00	; 0
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	08 95       	ret

00004e44 <xio_fget_ln>:
 *	dev		XIO device enumeration
 */

int xio_fget_ln(uint8_t dev, char *buf, uint8_t len)
{
	switch (dev) {
    4e44:	81 30       	cpi	r24, 0x01	; 1
    4e46:	61 f0       	breq	.+24     	; 0x4e60 <xio_fget_ln+0x1c>
    4e48:	81 30       	cpi	r24, 0x01	; 1
    4e4a:	38 f0       	brcs	.+14     	; 0x4e5a <xio_fget_ln+0x16>
    4e4c:	82 30       	cpi	r24, 0x02	; 2
    4e4e:	69 f0       	breq	.+26     	; 0x4e6a <xio_fget_ln+0x26>
    4e50:	84 30       	cpi	r24, 0x04	; 4
    4e52:	81 f0       	breq	.+32     	; 0x4e74 <xio_fget_ln+0x30>
    4e54:	20 e1       	ldi	r18, 0x10	; 16
    4e56:	30 e0       	ldi	r19, 0x00	; 0
    4e58:	12 c0       	rjmp	.+36     	; 0x4e7e <xio_fget_ln+0x3a>
    4e5a:	20 e0       	ldi	r18, 0x00	; 0
    4e5c:	30 e0       	ldi	r19, 0x00	; 0
    4e5e:	0f c0       	rjmp	.+30     	; 0x4e7e <xio_fget_ln+0x3a>
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): return (xio_usb_readln(buf, len));
    4e60:	cb 01       	movw	r24, r22
    4e62:	64 2f       	mov	r22, r20
    4e64:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <xio_usb_readln>
    4e68:	09 c0       	rjmp	.+18     	; 0x4e7c <xio_fget_ln+0x38>
		case (XIO_DEV_RS485): return (xio_rs485_readln(buf, len));
    4e6a:	cb 01       	movw	r24, r22
    4e6c:	64 2f       	mov	r22, r20
    4e6e:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <xio_rs485_readln>
    4e72:	04 c0       	rjmp	.+8      	; 0x4e7c <xio_fget_ln+0x38>
//		case (XIO_DEV_AUX): return (xio_aux_readln(buf, len));
		case (XIO_DEV_PGM): return (xio_pgm_readln(buf, len));
    4e74:	cb 01       	movw	r24, r22
    4e76:	64 2f       	mov	r22, r20
    4e78:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <xio_pgm_readln>
    4e7c:	9c 01       	movw	r18, r24
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4e7e:	c9 01       	movw	r24, r18
    4e80:	08 95       	ret

00004e82 <xio_control>:
 * xio_control() - common entry point for device control functions
 */

int8_t xio_control(uint8_t dev, const uint16_t control, const int16_t arg)
{
	switch (dev) {
    4e82:	81 30       	cpi	r24, 0x01	; 1
    4e84:	51 f0       	breq	.+20     	; 0x4e9a <xio_control+0x18>
    4e86:	81 30       	cpi	r24, 0x01	; 1
    4e88:	30 f0       	brcs	.+12     	; 0x4e96 <xio_control+0x14>
    4e8a:	82 30       	cpi	r24, 0x02	; 2
    4e8c:	59 f0       	breq	.+22     	; 0x4ea4 <xio_control+0x22>
    4e8e:	84 30       	cpi	r24, 0x04	; 4
    4e90:	71 f0       	breq	.+28     	; 0x4eae <xio_control+0x2c>
    4e92:	80 e1       	ldi	r24, 0x10	; 16
    4e94:	08 95       	ret
    4e96:	80 e0       	ldi	r24, 0x00	; 0
    4e98:	08 95       	ret
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): return (xio_usb_control(control, arg));
    4e9a:	cb 01       	movw	r24, r22
    4e9c:	ba 01       	movw	r22, r20
    4e9e:	0e 94 65 28 	call	0x50ca	; 0x50ca <xio_usb_control>
    4ea2:	08 95       	ret
		case (XIO_DEV_RS485): return (xio_rs485_control(control, arg));
    4ea4:	cb 01       	movw	r24, r22
    4ea6:	ba 01       	movw	r22, r20
    4ea8:	0e 94 ae 34 	call	0x695c	; 0x695c <xio_rs485_control>
    4eac:	08 95       	ret
//		case (XIO_DEV_AUX): return (xio_aux_control(control, arg));
		case (XIO_DEV_PGM): return (xio_pgm_control(control, arg));
    4eae:	cb 01       	movw	r24, r22
    4eb0:	ba 01       	movw	r22, r20
    4eb2:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <xio_pgm_control>
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4eb6:	08 95       	ret

00004eb8 <xio_dev_init>:
 * xio_dev_init() - common entry point for device init functions
 */

int8_t xio_dev_init(uint8_t dev, const int16_t arg)
{
	switch (dev) {
    4eb8:	81 30       	cpi	r24, 0x01	; 1
    4eba:	41 f0       	breq	.+16     	; 0x4ecc <xio_dev_init+0x14>
    4ebc:	81 30       	cpi	r24, 0x01	; 1
    4ebe:	68 f0       	brcs	.+26     	; 0x4eda <xio_dev_init+0x22>
    4ec0:	82 30       	cpi	r24, 0x02	; 2
    4ec2:	41 f0       	breq	.+16     	; 0x4ed4 <xio_dev_init+0x1c>
    4ec4:	84 30       	cpi	r24, 0x04	; 4
    4ec6:	59 f0       	breq	.+22     	; 0x4ede <xio_dev_init+0x26>
    4ec8:	80 e1       	ldi	r24, 0x10	; 16
    4eca:	08 95       	ret
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): xio_usb_init(arg); return (TG_OK);
    4ecc:	cb 01       	movw	r24, r22
    4ece:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <xio_usb_init>
    4ed2:	03 c0       	rjmp	.+6      	; 0x4eda <xio_dev_init+0x22>
		case (XIO_DEV_RS485): xio_rs485_init(arg); return (TG_OK);
    4ed4:	cb 01       	movw	r24, r22
    4ed6:	0e 94 e7 33 	call	0x67ce	; 0x67ce <xio_rs485_init>
    4eda:	80 e0       	ldi	r24, 0x00	; 0
    4edc:	08 95       	ret
//		case (XIO_DEV_AUX): xio_aux_init(arg); return (TG_OK);
		case (XIO_DEV_PGM): xio_pgm_init(arg); return (TG_OK);
    4ede:	cb 01       	movw	r24, r22
    4ee0:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <xio_pgm_init>
    4ee4:	80 e0       	ldi	r24, 0x00	; 0
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4ee6:	08 95       	ret

00004ee8 <xio_init>:
 */

void xio_init(void)
{	
	// USB port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_SEMICOLONS | XIO_BAUD_115200);
    4ee8:	85 e0       	ldi	r24, 0x05	; 5
    4eea:	90 e5       	ldi	r25, 0x50	; 80
    4eec:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <xio_usb_init>

	// RS485 port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_BAUD_115200);
    4ef0:	85 e0       	ldi	r24, 0x05	; 5
    4ef2:	90 e1       	ldi	r25, 0x10	; 16
    4ef4:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <xio_usb_init>

	// PGM file defaults are:	XIO_RD | XIO_BLOCK
//	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE | XIO_SEMICOLONS);
	xio_pgm_init(XIO_LINEMODE);
    4ef8:	80 e0       	ldi	r24, 0x00	; 0
    4efa:	90 e1       	ldi	r25, 0x10	; 16
    4efc:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <xio_pgm_init>

	stddev = &dev_usb;				// stddev is a convenience
    4f00:	80 e0       	ldi	r24, 0x00	; 0
    4f02:	90 e2       	ldi	r25, 0x20	; 32
    4f04:	80 93 f9 24 	sts	0x24F9, r24
    4f08:	90 93 fa 24 	sts	0x24FA, r25
	stdin = &dev_usb;				// define the console device
    4f0c:	80 93 53 25 	sts	0x2553, r24
    4f10:	90 93 54 25 	sts	0x2554, r25
	stdout = &dev_usb;				// ...
    4f14:	80 93 55 25 	sts	0x2555, r24
    4f18:	90 93 56 25 	sts	0x2556, r25
	stderr = &dev_usb;				// ...
    4f1c:	80 93 57 25 	sts	0x2557, r24
    4f20:	90 93 58 25 	sts	0x2558, r25

	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    4f24:	0f 92       	push	r0
    4f26:	0f 92       	push	r0
    4f28:	8a e3       	ldi	r24, 0x3A	; 58
    4f2a:	97 e0       	ldi	r25, 0x07	; 7
    4f2c:	ed b7       	in	r30, 0x3d	; 61
    4f2e:	fe b7       	in	r31, 0x3e	; 62
    4f30:	81 83       	std	Z+1, r24	; 0x01
    4f32:	92 83       	std	Z+2, r25	; 0x02
    4f34:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
    4f38:	0f 90       	pop	r0
    4f3a:	0f 90       	pop	r0
}
    4f3c:	08 95       	ret

00004f3e <xio_usb_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_usb_init(const uint16_t control)
{
    4f3e:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    4f40:	e8 2f       	mov	r30, r24
    4f42:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	f.flags = XIO_FLAG_USB_DEFS_gm;		// set flags to defaults & initial state
    4f44:	87 e3       	ldi	r24, 0x37	; 55
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	80 93 ad 21 	sts	0x21AD, r24
    4f4c:	90 93 ae 21 	sts	0x21AE, r25
		f.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		f.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    4f50:	26 ff       	sbrs	r18, 6
    4f52:	06 c0       	rjmp	.+12     	; 0x4f60 <xio_usb_init+0x22>
		f.flags |= XIO_FLAG_BLOCK_bm;
    4f54:	87 e3       	ldi	r24, 0x37	; 55
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	80 93 ad 21 	sts	0x21AD, r24
    4f5c:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOBLOCK) {
    4f60:	27 ff       	sbrs	r18, 7
    4f62:	06 c0       	rjmp	.+12     	; 0x4f70 <xio_usb_init+0x32>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    4f64:	83 e3       	ldi	r24, 0x33	; 51
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	80 93 ad 21 	sts	0x21AD, r24
    4f6c:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_ECHO) {
    4f70:	30 ff       	sbrs	r19, 0
    4f72:	09 c0       	rjmp	.+18     	; 0x4f86 <xio_usb_init+0x48>
		f.flags |= XIO_FLAG_ECHO_bm;
    4f74:	80 91 ad 21 	lds	r24, 0x21AD
    4f78:	90 91 ae 21 	lds	r25, 0x21AE
    4f7c:	80 61       	ori	r24, 0x10	; 16
    4f7e:	80 93 ad 21 	sts	0x21AD, r24
    4f82:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOECHO) {
    4f86:	31 ff       	sbrs	r19, 1
    4f88:	09 c0       	rjmp	.+18     	; 0x4f9c <xio_usb_init+0x5e>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    4f8a:	80 91 ad 21 	lds	r24, 0x21AD
    4f8e:	90 91 ae 21 	lds	r25, 0x21AE
    4f92:	8f 7e       	andi	r24, 0xEF	; 239
    4f94:	80 93 ad 21 	sts	0x21AD, r24
    4f98:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_CRLF) {
    4f9c:	32 ff       	sbrs	r19, 2
    4f9e:	09 c0       	rjmp	.+18     	; 0x4fb2 <xio_usb_init+0x74>
		f.flags |= XIO_FLAG_CRLF_bm;
    4fa0:	80 91 ad 21 	lds	r24, 0x21AD
    4fa4:	90 91 ae 21 	lds	r25, 0x21AE
    4fa8:	80 62       	ori	r24, 0x20	; 32
    4faa:	80 93 ad 21 	sts	0x21AD, r24
    4fae:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOCRLF) {
    4fb2:	33 ff       	sbrs	r19, 3
    4fb4:	09 c0       	rjmp	.+18     	; 0x4fc8 <xio_usb_init+0x8a>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    4fb6:	80 91 ad 21 	lds	r24, 0x21AD
    4fba:	90 91 ae 21 	lds	r25, 0x21AE
    4fbe:	8f 7d       	andi	r24, 0xDF	; 223
    4fc0:	80 93 ad 21 	sts	0x21AD, r24
    4fc4:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_LINEMODE) {
    4fc8:	34 ff       	sbrs	r19, 4
    4fca:	09 c0       	rjmp	.+18     	; 0x4fde <xio_usb_init+0xa0>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    4fcc:	80 91 ad 21 	lds	r24, 0x21AD
    4fd0:	90 91 ae 21 	lds	r25, 0x21AE
    4fd4:	80 64       	ori	r24, 0x40	; 64
    4fd6:	80 93 ad 21 	sts	0x21AD, r24
    4fda:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOLINEMODE) {
    4fde:	35 ff       	sbrs	r19, 5
    4fe0:	09 c0       	rjmp	.+18     	; 0x4ff4 <xio_usb_init+0xb6>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    4fe2:	80 91 ad 21 	lds	r24, 0x21AD
    4fe6:	90 91 ae 21 	lds	r25, 0x21AE
    4fea:	8f 7b       	andi	r24, 0xBF	; 191
    4fec:	80 93 ad 21 	sts	0x21AD, r24
    4ff0:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_SEMICOLONS) {
    4ff4:	36 ff       	sbrs	r19, 6
    4ff6:	09 c0       	rjmp	.+18     	; 0x500a <xio_usb_init+0xcc>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    4ff8:	80 91 ad 21 	lds	r24, 0x21AD
    4ffc:	90 91 ae 21 	lds	r25, 0x21AE
    5000:	80 68       	ori	r24, 0x80	; 128
    5002:	80 93 ad 21 	sts	0x21AD, r24
    5006:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    500a:	37 ff       	sbrs	r19, 7
    500c:	09 c0       	rjmp	.+18     	; 0x5020 <xio_usb_init+0xe2>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    500e:	80 91 ad 21 	lds	r24, 0x21AD
    5012:	90 91 ae 21 	lds	r25, 0x21AE
    5016:	8f 77       	andi	r24, 0x7F	; 127
    5018:	80 93 ad 21 	sts	0x21AD, r24
    501c:	90 93 ae 21 	sts	0x21AE, r25
	}

	// character signals and error returns
	f.sig = 0;
    5020:	10 92 af 21 	sts	0x21AF, r1
	dev_usb.udata = &(f.sig);				// bind sig register to FILE struct
    5024:	8f ea       	ldi	r24, 0xAF	; 175
    5026:	91 e2       	ldi	r25, 0x21	; 33
    5028:	80 93 0c 20 	sts	0x200C, r24
    502c:	90 93 0d 20 	sts	0x200D, r25

	// setup internal RX/TX buffers
	f.rx_buf_head = 1;						// can't use location 0
    5030:	81 e0       	ldi	r24, 0x01	; 1
    5032:	80 93 ba 21 	sts	0x21BA, r24
	f.rx_buf_tail = 1;
    5036:	80 93 b9 21 	sts	0x21B9, r24
	f.tx_buf_head = 1;
    503a:	80 93 bc 21 	sts	0x21BC, r24
	f.tx_buf_tail = 1;
    503e:	80 93 bb 21 	sts	0x21BB, r24
	f.len = sizeof(f.buf);					// offset to zero
    5042:	82 e0       	ldi	r24, 0x02	; 2
    5044:	80 93 b2 21 	sts	0x21B2, r24

	// bindings
	f.sig_func = &xio_null_signal;			// bind null signal handler
    5048:	8c e1       	ldi	r24, 0x1C	; 28
    504a:	97 e2       	ldi	r25, 0x27	; 39
    504c:	80 93 b5 21 	sts	0x21B5, r24
    5050:	90 93 b6 21 	sts	0x21B6, r25
	f.line_func = &xio_null_line;			// bind null line handler
    5054:	8f e1       	ldi	r24, 0x1F	; 31
    5056:	97 e2       	ldi	r25, 0x27	; 39
    5058:	80 93 b7 21 	sts	0x21B7, r24
    505c:	90 93 b8 21 	sts	0x21B8, r25

	f.usart = &USB_USART;					// bind USART structure
    5060:	80 ea       	ldi	r24, 0xA0	; 160
    5062:	98 e0       	ldi	r25, 0x08	; 8
    5064:	80 93 e2 21 	sts	0x21E2, r24
    5068:	90 93 e3 21 	sts	0x21E3, r25
	f.port = &USB_PORT;						// bind PORT structure
    506c:	80 e4       	ldi	r24, 0x40	; 64
    506e:	96 e0       	ldi	r25, 0x06	; 6
    5070:	80 93 e4 21 	sts	0x21E4, r24
    5074:	90 93 e5 21 	sts	0x21E5, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    5078:	ee 23       	and	r30, r30
    507a:	09 f4       	brne	.+2      	; 0x507e <xio_usb_init+0x140>
    507c:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    507e:	8e 2f       	mov	r24, r30
    5080:	90 e0       	ldi	r25, 0x00	; 0
    5082:	fc 01       	movw	r30, r24
    5084:	ec 5d       	subi	r30, 0xDC	; 220
    5086:	f8 4f       	sbci	r31, 0xF8	; 248
    5088:	e4 91       	lpm	r30, Z+
    508a:	a0 ea       	ldi	r26, 0xA0	; 160
    508c:	b8 e0       	ldi	r27, 0x08	; 8
    508e:	16 96       	adiw	r26, 0x06	; 6
    5090:	ec 93       	st	X, r30
    5092:	16 97       	sbiw	r26, 0x06	; 6
	f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    5094:	81 5d       	subi	r24, 0xD1	; 209
    5096:	98 4f       	sbci	r25, 0xF8	; 248
    5098:	fc 01       	movw	r30, r24
    509a:	84 91       	lpm	r24, Z+
    509c:	17 96       	adiw	r26, 0x07	; 7
    509e:	8c 93       	st	X, r24
    50a0:	17 97       	sbiw	r26, 0x07	; 7
	f.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm; // enable tx and rx on USART
    50a2:	88 e1       	ldi	r24, 0x18	; 24
    50a4:	14 96       	adiw	r26, 0x04	; 4
    50a6:	8c 93       	st	X, r24
    50a8:	14 97       	sbiw	r26, 0x04	; 4
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    50aa:	81 e2       	ldi	r24, 0x21	; 33
    50ac:	13 96       	adiw	r26, 0x03	; 3
    50ae:	8c 93       	st	X, r24

	f.port->DIRCLR = USB_RX_bm;	 			// clr RX pin as input
    50b0:	e0 e4       	ldi	r30, 0x40	; 64
    50b2:	f6 e0       	ldi	r31, 0x06	; 6
    50b4:	84 e0       	ldi	r24, 0x04	; 4
    50b6:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_TX_bm; 			// set TX pin as output
    50b8:	88 e0       	ldi	r24, 0x08	; 8
    50ba:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_TX_bm;				// set TX HI as initial state
    50bc:	85 83       	std	Z+5, r24	; 0x05
	f.port->DIRCLR = USB_CTS_bm; 			// set CTS pin as input
    50be:	81 e0       	ldi	r24, 0x01	; 1
    50c0:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_RTS_bm; 			// set RTS pin as output
    50c2:	82 e0       	ldi	r24, 0x02	; 2
    50c4:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
    50c6:	85 83       	std	Z+5, r24	; 0x05
//	f.port->OUTCLR = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
}
    50c8:	08 95       	ret

000050ca <xio_usb_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_usb_control(const uint16_t control, const int16_t arg)
{
    50ca:	ac 01       	movw	r20, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    50cc:	84 ff       	sbrs	r24, 4
    50ce:	05 c0       	rjmp	.+10     	; 0x50da <xio_usb_control+0x10>
		f.sig_func = (fptr_int_uint8)arg;
    50d0:	60 93 b5 21 	sts	0x21B5, r22
    50d4:	70 93 b6 21 	sts	0x21B6, r23
    50d8:	8b c0       	rjmp	.+278    	; 0x51f0 <xio_usb_control+0x126>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    50da:	85 ff       	sbrs	r24, 5
    50dc:	05 c0       	rjmp	.+10     	; 0x50e8 <xio_usb_control+0x1e>
		f.line_func = (fptr_int_char_p)arg;
    50de:	60 93 b7 21 	sts	0x21B7, r22
    50e2:	70 93 b8 21 	sts	0x21B8, r23
    50e6:	84 c0       	rjmp	.+264    	; 0x51f0 <xio_usb_control+0x126>
		return (0);
	}
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    50e8:	8f 70       	andi	r24, 0x0F	; 15
    50ea:	90 70       	andi	r25, 0x00	; 0
    50ec:	00 97       	sbiw	r24, 0x00	; 0
    50ee:	91 f0       	breq	.+36     	; 0x5114 <xio_usb_control+0x4a>
		f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    50f0:	a0 91 e2 21 	lds	r26, 0x21E2
    50f4:	b0 91 e3 21 	lds	r27, 0x21E3
    50f8:	9c 01       	movw	r18, r24
    50fa:	2c 5d       	subi	r18, 0xDC	; 220
    50fc:	38 4f       	sbci	r19, 0xF8	; 248
    50fe:	f9 01       	movw	r30, r18
    5100:	24 91       	lpm	r18, Z+
    5102:	16 96       	adiw	r26, 0x06	; 6
    5104:	2c 93       	st	X, r18
    5106:	16 97       	sbiw	r26, 0x06	; 6
		f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    5108:	81 5d       	subi	r24, 0xD1	; 209
    510a:	98 4f       	sbci	r25, 0xF8	; 248
    510c:	fc 01       	movw	r30, r24
    510e:	84 91       	lpm	r24, Z+
    5110:	17 96       	adiw	r26, 0x07	; 7
    5112:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    5114:	46 ff       	sbrs	r20, 6
    5116:	09 c0       	rjmp	.+18     	; 0x512a <xio_usb_control+0x60>
		f.flags |= XIO_FLAG_BLOCK_bm;
    5118:	80 91 ad 21 	lds	r24, 0x21AD
    511c:	90 91 ae 21 	lds	r25, 0x21AE
    5120:	84 60       	ori	r24, 0x04	; 4
    5122:	80 93 ad 21 	sts	0x21AD, r24
    5126:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOBLOCK) {
    512a:	47 ff       	sbrs	r20, 7
    512c:	09 c0       	rjmp	.+18     	; 0x5140 <xio_usb_control+0x76>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    512e:	80 91 ad 21 	lds	r24, 0x21AD
    5132:	90 91 ae 21 	lds	r25, 0x21AE
    5136:	8b 7f       	andi	r24, 0xFB	; 251
    5138:	80 93 ad 21 	sts	0x21AD, r24
    513c:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_ECHO) {
    5140:	50 ff       	sbrs	r21, 0
    5142:	09 c0       	rjmp	.+18     	; 0x5156 <xio_usb_control+0x8c>
		f.flags |= XIO_FLAG_ECHO_bm;
    5144:	80 91 ad 21 	lds	r24, 0x21AD
    5148:	90 91 ae 21 	lds	r25, 0x21AE
    514c:	80 61       	ori	r24, 0x10	; 16
    514e:	80 93 ad 21 	sts	0x21AD, r24
    5152:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOECHO) {
    5156:	51 ff       	sbrs	r21, 1
    5158:	09 c0       	rjmp	.+18     	; 0x516c <xio_usb_control+0xa2>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    515a:	80 91 ad 21 	lds	r24, 0x21AD
    515e:	90 91 ae 21 	lds	r25, 0x21AE
    5162:	8f 7e       	andi	r24, 0xEF	; 239
    5164:	80 93 ad 21 	sts	0x21AD, r24
    5168:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_CRLF) {
    516c:	52 ff       	sbrs	r21, 2
    516e:	09 c0       	rjmp	.+18     	; 0x5182 <xio_usb_control+0xb8>
		f.flags |= XIO_FLAG_CRLF_bm;
    5170:	80 91 ad 21 	lds	r24, 0x21AD
    5174:	90 91 ae 21 	lds	r25, 0x21AE
    5178:	80 62       	ori	r24, 0x20	; 32
    517a:	80 93 ad 21 	sts	0x21AD, r24
    517e:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOCRLF) {
    5182:	53 ff       	sbrs	r21, 3
    5184:	09 c0       	rjmp	.+18     	; 0x5198 <xio_usb_control+0xce>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    5186:	80 91 ad 21 	lds	r24, 0x21AD
    518a:	90 91 ae 21 	lds	r25, 0x21AE
    518e:	8f 7d       	andi	r24, 0xDF	; 223
    5190:	80 93 ad 21 	sts	0x21AD, r24
    5194:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_LINEMODE) {
    5198:	54 ff       	sbrs	r21, 4
    519a:	09 c0       	rjmp	.+18     	; 0x51ae <xio_usb_control+0xe4>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    519c:	80 91 ad 21 	lds	r24, 0x21AD
    51a0:	90 91 ae 21 	lds	r25, 0x21AE
    51a4:	80 64       	ori	r24, 0x40	; 64
    51a6:	80 93 ad 21 	sts	0x21AD, r24
    51aa:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOLINEMODE) {
    51ae:	55 ff       	sbrs	r21, 5
    51b0:	09 c0       	rjmp	.+18     	; 0x51c4 <xio_usb_control+0xfa>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    51b2:	80 91 ad 21 	lds	r24, 0x21AD
    51b6:	90 91 ae 21 	lds	r25, 0x21AE
    51ba:	8f 7b       	andi	r24, 0xBF	; 191
    51bc:	80 93 ad 21 	sts	0x21AD, r24
    51c0:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_SEMICOLONS) {
    51c4:	56 ff       	sbrs	r21, 6
    51c6:	09 c0       	rjmp	.+18     	; 0x51da <xio_usb_control+0x110>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    51c8:	80 91 ad 21 	lds	r24, 0x21AD
    51cc:	90 91 ae 21 	lds	r25, 0x21AE
    51d0:	80 68       	ori	r24, 0x80	; 128
    51d2:	80 93 ad 21 	sts	0x21AD, r24
    51d6:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    51da:	57 ff       	sbrs	r21, 7
    51dc:	09 c0       	rjmp	.+18     	; 0x51f0 <xio_usb_control+0x126>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    51de:	80 91 ad 21 	lds	r24, 0x21AD
    51e2:	90 91 ae 21 	lds	r25, 0x21AE
    51e6:	8f 77       	andi	r24, 0x7F	; 127
    51e8:	80 93 ad 21 	sts	0x21AD, r24
    51ec:	90 93 ae 21 	sts	0x21AE, r25
	}
	return (0);
}
    51f0:	80 e0       	ldi	r24, 0x00	; 0
    51f2:	08 95       	ret

000051f4 <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(USB_RX_ISR_vect)		//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    51f4:	1f 92       	push	r1
    51f6:	0f 92       	push	r0
    51f8:	0f b6       	in	r0, 0x3f	; 63
    51fa:	0f 92       	push	r0
    51fc:	0b b6       	in	r0, 0x3b	; 59
    51fe:	0f 92       	push	r0
    5200:	11 24       	eor	r1, r1
    5202:	8f 93       	push	r24
    5204:	9f 93       	push	r25
    5206:	af 93       	push	r26
    5208:	bf 93       	push	r27
    520a:	ef 93       	push	r30
    520c:	ff 93       	push	r31
	// normal path
	if ((--f.rx_buf_head) == 0) { 				// advance buffer head with wrap
    520e:	80 91 ba 21 	lds	r24, 0x21BA
    5212:	81 50       	subi	r24, 0x01	; 1
    5214:	80 93 ba 21 	sts	0x21BA, r24
    5218:	80 91 ba 21 	lds	r24, 0x21BA
    521c:	88 23       	and	r24, r24
    521e:	19 f4       	brne	.+6      	; 0x5226 <__vector_25+0x32>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    5220:	81 e1       	ldi	r24, 0x11	; 17
    5222:	80 93 ba 21 	sts	0x21BA, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    5226:	90 91 ba 21 	lds	r25, 0x21BA
    522a:	80 91 b9 21 	lds	r24, 0x21B9
    522e:	98 17       	cp	r25, r24
    5230:	61 f0       	breq	.+24     	; 0x524a <__vector_25+0x56>
		f.rx_buf[f.rx_buf_head] = f.usart->DATA;// (= USARTC0.DATA;)
    5232:	e0 91 ba 21 	lds	r30, 0x21BA
    5236:	f0 e0       	ldi	r31, 0x00	; 0
    5238:	a0 91 e2 21 	lds	r26, 0x21E2
    523c:	b0 91 e3 21 	lds	r27, 0x21E3
    5240:	8c 91       	ld	r24, X
    5242:	e3 55       	subi	r30, 0x53	; 83
    5244:	fe 4d       	sbci	r31, 0xDE	; 222
    5246:	81 8b       	std	Z+17, r24	; 0x11
    5248:	0c c0       	rjmp	.+24     	; 0x5262 <__vector_25+0x6e>
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    524a:	80 91 ba 21 	lds	r24, 0x21BA
    524e:	8f 5f       	subi	r24, 0xFF	; 255
    5250:	80 93 ba 21 	sts	0x21BA, r24
    5254:	80 91 ba 21 	lds	r24, 0x21BA
    5258:	82 31       	cpi	r24, 0x12	; 18
    525a:	18 f0       	brcs	.+6      	; 0x5262 <__vector_25+0x6e>
		f.rx_buf_head = 1;
    525c:	81 e0       	ldi	r24, 0x01	; 1
    525e:	80 93 ba 21 	sts	0x21BA, r24
	}
	// activate flow control here or before it gets to this level
}
    5262:	ff 91       	pop	r31
    5264:	ef 91       	pop	r30
    5266:	bf 91       	pop	r27
    5268:	af 91       	pop	r26
    526a:	9f 91       	pop	r25
    526c:	8f 91       	pop	r24
    526e:	0f 90       	pop	r0
    5270:	0b be       	out	0x3b, r0	; 59
    5272:	0f 90       	pop	r0
    5274:	0f be       	out	0x3f, r0	; 63
    5276:	0f 90       	pop	r0
    5278:	1f 90       	pop	r1
    527a:	18 95       	reti

0000527c <xio_usb_queue_RX_char>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_usb_queue_RX_char(const char c)
{
    527c:	28 2f       	mov	r18, r24
	// normal path
	if ((--f.rx_buf_head) == 0) { 				// wrap condition
    527e:	80 91 ba 21 	lds	r24, 0x21BA
    5282:	81 50       	subi	r24, 0x01	; 1
    5284:	80 93 ba 21 	sts	0x21BA, r24
    5288:	80 91 ba 21 	lds	r24, 0x21BA
    528c:	88 23       	and	r24, r24
    528e:	19 f4       	brne	.+6      	; 0x5296 <xio_usb_queue_RX_char+0x1a>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    5290:	81 e1       	ldi	r24, 0x11	; 17
    5292:	80 93 ba 21 	sts	0x21BA, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    5296:	90 91 ba 21 	lds	r25, 0x21BA
    529a:	80 91 b9 21 	lds	r24, 0x21B9
    529e:	98 17       	cp	r25, r24
    52a0:	39 f0       	breq	.+14     	; 0x52b0 <xio_usb_queue_RX_char+0x34>
		f.rx_buf[f.rx_buf_head] = c;			// FAKE INPUT DATA
    52a2:	e0 91 ba 21 	lds	r30, 0x21BA
    52a6:	f0 e0       	ldi	r31, 0x00	; 0
    52a8:	e3 55       	subi	r30, 0x53	; 83
    52aa:	fe 4d       	sbci	r31, 0xDE	; 222
    52ac:	21 8b       	std	Z+17, r18	; 0x11
    52ae:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    52b0:	80 91 ba 21 	lds	r24, 0x21BA
    52b4:	8f 5f       	subi	r24, 0xFF	; 255
    52b6:	80 93 ba 21 	sts	0x21BA, r24
    52ba:	80 91 ba 21 	lds	r24, 0x21BA
    52be:	82 31       	cpi	r24, 0x12	; 18
    52c0:	18 f0       	brcs	.+6      	; 0x52c8 <xio_usb_queue_RX_char+0x4c>
		f.rx_buf_head = 1;
    52c2:	81 e0       	ldi	r24, 0x01	; 1
    52c4:	80 93 ba 21 	sts	0x21BA, r24
    52c8:	08 95       	ret

000052ca <xio_usb_queue_RX_string>:
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_usb_queue_RX_string(char *buf)
{
    52ca:	1f 93       	push	r17
    52cc:	cf 93       	push	r28
    52ce:	df 93       	push	r29
    52d0:	ec 01       	movw	r28, r24
    52d2:	10 e0       	ldi	r17, 0x00	; 0
    52d4:	02 c0       	rjmp	.+4      	; 0x52da <xio_usb_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    52d6:	0e 94 3e 29 	call	0x527c	; 0x527c <xio_usb_queue_RX_char>
void xio_usb_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    52da:	fe 01       	movw	r30, r28
    52dc:	e1 0f       	add	r30, r17
    52de:	f1 1d       	adc	r31, r1
    52e0:	80 81       	ld	r24, Z
    52e2:	1f 5f       	subi	r17, 0xFF	; 255
    52e4:	88 23       	and	r24, r24
    52e6:	b9 f7       	brne	.-18     	; 0x52d6 <xio_usb_queue_RX_string+0xc>
		xio_usb_queue_RX_char(c);
	}
}
    52e8:	df 91       	pop	r29
    52ea:	cf 91       	pop	r28
    52ec:	1f 91       	pop	r17
    52ee:	08 95       	ret

000052f0 <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)		//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    52f0:	1f 92       	push	r1
    52f2:	0f 92       	push	r0
    52f4:	0f b6       	in	r0, 0x3f	; 63
    52f6:	0f 92       	push	r0
    52f8:	0b b6       	in	r0, 0x3b	; 59
    52fa:	0f 92       	push	r0
    52fc:	11 24       	eor	r1, r1
    52fe:	8f 93       	push	r24
    5300:	9f 93       	push	r25
    5302:	af 93       	push	r26
    5304:	bf 93       	push	r27
    5306:	ef 93       	push	r30
    5308:	ff 93       	push	r31
	if (f.tx_buf_head == f.tx_buf_tail) {			// buffer empty - disable ints
    530a:	90 91 bc 21 	lds	r25, 0x21BC
    530e:	80 91 bb 21 	lds	r24, 0x21BB
    5312:	98 17       	cp	r25, r24
    5314:	39 f4       	brne	.+14     	; 0x5324 <__vector_26+0x34>
		f.usart->CTRLA = USARTC0_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    5316:	e0 91 e2 21 	lds	r30, 0x21E2
    531a:	f0 91 e3 21 	lds	r31, 0x21E3
    531e:	80 e2       	ldi	r24, 0x20	; 32
    5320:	83 83       	std	Z+3, r24	; 0x03
    5322:	1e c0       	rjmp	.+60     	; 0x5360 <__vector_26+0x70>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(f.flags)) {
    5324:	80 91 ad 21 	lds	r24, 0x21AD
    5328:	90 91 ae 21 	lds	r25, 0x21AE
    532c:	93 fd       	sbrc	r25, 3
    532e:	18 c0       	rjmp	.+48     	; 0x5360 <__vector_26+0x70>
		if (--(f.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    5330:	80 91 bb 21 	lds	r24, 0x21BB
    5334:	81 50       	subi	r24, 0x01	; 1
    5336:	80 93 bb 21 	sts	0x21BB, r24
    533a:	80 91 bb 21 	lds	r24, 0x21BB
    533e:	88 23       	and	r24, r24
    5340:	19 f4       	brne	.+6      	; 0x5348 <__vector_26+0x58>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5342:	81 e1       	ldi	r24, 0x11	; 17
    5344:	80 93 bb 21 	sts	0x21BB, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];	// write char to TX DATA register
    5348:	e0 91 e2 21 	lds	r30, 0x21E2
    534c:	f0 91 e3 21 	lds	r31, 0x21E3
    5350:	a0 91 bb 21 	lds	r26, 0x21BB
    5354:	b0 e0       	ldi	r27, 0x00	; 0
    5356:	a3 55       	subi	r26, 0x53	; 83
    5358:	be 4d       	sbci	r27, 0xDE	; 222
    535a:	93 96       	adiw	r26, 0x23	; 35
    535c:	8c 91       	ld	r24, X
    535e:	80 83       	st	Z, r24
	}
}
    5360:	ff 91       	pop	r31
    5362:	ef 91       	pop	r30
    5364:	bf 91       	pop	r27
    5366:	af 91       	pop	r26
    5368:	9f 91       	pop	r25
    536a:	8f 91       	pop	r24
    536c:	0f 90       	pop	r0
    536e:	0b be       	out	0x3b, r0	; 59
    5370:	0f 90       	pop	r0
    5372:	0f be       	out	0x3f, r0	; 63
    5374:	0f 90       	pop	r0
    5376:	1f 90       	pop	r1
    5378:	18 95       	reti

0000537a <xio_usb_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
    537a:	48 2f       	mov	r20, r24
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    537c:	20 91 ad 21 	lds	r18, 0x21AD
    5380:	30 91 ae 21 	lds	r19, 0x21AE
    5384:	d9 01       	movw	r26, r18
    5386:	a4 70       	andi	r26, 0x04	; 4
    5388:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    538a:	b9 01       	movw	r22, r18
    538c:	60 72       	andi	r22, 0x20	; 32
    538e:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
    5390:	90 91 bc 21 	lds	r25, 0x21BC
    5394:	91 50       	subi	r25, 0x01	; 1
    5396:	c1 f4       	brne	.+48     	; 0x53c8 <xio_usb_putc+0x4e>
    5398:	91 e1       	ldi	r25, 0x11	; 17
    539a:	16 c0       	rjmp	.+44     	; 0x53c8 <xio_usb_putc+0x4e>
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    539c:	10 97       	sbiw	r26, 0x00	; 0
    539e:	61 f0       	breq	.+24     	; 0x53b8 <xio_usb_putc+0x3e>
			sleep_mode();
    53a0:	80 91 48 00 	lds	r24, 0x0048
    53a4:	81 60       	ori	r24, 0x01	; 1
    53a6:	80 93 48 00 	sts	0x0048, r24
    53aa:	88 95       	sleep
    53ac:	80 91 48 00 	lds	r24, 0x0048
    53b0:	8e 7f       	andi	r24, 0xFE	; 254
    53b2:	80 93 48 00 	sts	0x0048, r24
    53b6:	08 c0       	rjmp	.+16     	; 0x53c8 <xio_usb_putc+0x4e>
    53b8:	90 93 bd 21 	sts	0x21BD, r25
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    53bc:	83 e0       	ldi	r24, 0x03	; 3
    53be:	80 93 af 21 	sts	0x21AF, r24
    53c2:	2f ef       	ldi	r18, 0xFF	; 255
    53c4:	3f ef       	ldi	r19, 0xFF	; 255
    53c6:	54 c0       	rjmp	.+168    	; 0x5470 <xio_usb_putc+0xf6>
int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
    53c8:	80 91 bb 21 	lds	r24, 0x21BB
    53cc:	98 17       	cp	r25, r24
    53ce:	31 f3       	breq	.-52     	; 0x539c <xio_usb_putc+0x22>
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
    53d0:	90 93 bc 21 	sts	0x21BC, r25
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer
    53d4:	e0 91 bc 21 	lds	r30, 0x21BC
    53d8:	f0 e0       	ldi	r31, 0x00	; 0
    53da:	e3 55       	subi	r30, 0x53	; 83
    53dc:	fe 4d       	sbci	r31, 0xDE	; 222
    53de:	43 a3       	std	Z+35, r20	; 0x23

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    53e0:	61 15       	cp	r22, r1
    53e2:	71 05       	cpc	r23, r1
    53e4:	21 f0       	breq	.+8      	; 0x53ee <xio_usb_putc+0x74>
    53e6:	4a 30       	cpi	r20, 0x0A	; 10
    53e8:	11 f4       	brne	.+4      	; 0x53ee <xio_usb_putc+0x74>
    53ea:	4d e0       	ldi	r20, 0x0D	; 13
    53ec:	d1 cf       	rjmp	.-94     	; 0x5390 <xio_usb_putc+0x16>
    53ee:	90 93 bd 21 	sts	0x21BD, r25
		return xio_usb_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (f.usart->STATUS & 0x20) {
    53f2:	a0 91 e2 21 	lds	r26, 0x21E2
    53f6:	b0 91 e3 21 	lds	r27, 0x21E3
    53fa:	11 96       	adiw	r26, 0x01	; 1
    53fc:	8c 91       	ld	r24, X
    53fe:	11 97       	sbiw	r26, 0x01	; 1
    5400:	85 ff       	sbrs	r24, 5
    5402:	27 c0       	rjmp	.+78     	; 0x5452 <xio_usb_putc+0xd8>
		if (f.tx_buf_head == f.tx_buf_tail) {	// buf might be empty if IRQ got it
    5404:	90 91 bc 21 	lds	r25, 0x21BC
    5408:	80 91 bb 21 	lds	r24, 0x21BB
    540c:	98 17       	cp	r25, r24
    540e:	71 f1       	breq	.+92     	; 0x546c <xio_usb_putc+0xf2>
			return (0);
		}
		f.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    5410:	38 60       	ori	r19, 0x08	; 8
    5412:	20 93 ad 21 	sts	0x21AD, r18
    5416:	30 93 ae 21 	sts	0x21AE, r19
		if (--(f.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    541a:	80 91 bb 21 	lds	r24, 0x21BB
    541e:	81 50       	subi	r24, 0x01	; 1
    5420:	80 93 bb 21 	sts	0x21BB, r24
    5424:	80 91 bb 21 	lds	r24, 0x21BB
    5428:	88 23       	and	r24, r24
    542a:	19 f4       	brne	.+6      	; 0x5432 <xio_usb_putc+0xb8>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    542c:	81 e1       	ldi	r24, 0x11	; 17
    542e:	80 93 bb 21 	sts	0x21BB, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];// write char to TX DATA register
    5432:	e0 91 bb 21 	lds	r30, 0x21BB
    5436:	f0 e0       	ldi	r31, 0x00	; 0
    5438:	e3 55       	subi	r30, 0x53	; 83
    543a:	fe 4d       	sbci	r31, 0xDE	; 222
    543c:	83 a1       	ldd	r24, Z+35	; 0x23
    543e:	8c 93       	st	X, r24
		f.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    5440:	80 91 ad 21 	lds	r24, 0x21AD
    5444:	90 91 ae 21 	lds	r25, 0x21AE
    5448:	97 7f       	andi	r25, 0xF7	; 247
    544a:	80 93 ad 21 	sts	0x21AD, r24
    544e:	90 93 ae 21 	sts	0x21AE, r25
	}
	// enable interrupts regardless
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    5452:	e0 91 e2 21 	lds	r30, 0x21E2
    5456:	f0 91 e3 21 	lds	r31, 0x21E3
    545a:	81 e2       	ldi	r24, 0x21	; 33
    545c:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    545e:	80 91 a2 00 	lds	r24, 0x00A2
    5462:	81 60       	ori	r24, 0x01	; 1
    5464:	e0 ea       	ldi	r30, 0xA0	; 160
    5466:	f0 e0       	ldi	r31, 0x00	; 0
    5468:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    546a:	78 94       	sei
    546c:	20 e0       	ldi	r18, 0x00	; 0
    546e:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    5470:	c9 01       	movw	r24, r18
    5472:	08 95       	ret

00005474 <xio_usb_getc>:
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(f.flags)) {
    5474:	20 91 ad 21 	lds	r18, 0x21AD
    5478:	30 91 ae 21 	lds	r19, 0x21AE
    547c:	24 70       	andi	r18, 0x04	; 4
    547e:	30 70       	andi	r19, 0x00	; 0
    5480:	15 c0       	rjmp	.+42     	; 0x54ac <xio_usb_getc+0x38>
    5482:	21 15       	cp	r18, r1
    5484:	31 05       	cpc	r19, r1
    5486:	61 f0       	breq	.+24     	; 0x54a0 <xio_usb_getc+0x2c>
			sleep_mode();
    5488:	80 91 48 00 	lds	r24, 0x0048
    548c:	81 60       	ori	r24, 0x01	; 1
    548e:	80 93 48 00 	sts	0x0048, r24
    5492:	88 95       	sleep
    5494:	80 91 48 00 	lds	r24, 0x0048
    5498:	8e 7f       	andi	r24, 0xFE	; 254
    549a:	80 93 48 00 	sts	0x0048, r24
    549e:	06 c0       	rjmp	.+12     	; 0x54ac <xio_usb_getc+0x38>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    54a0:	83 e0       	ldi	r24, 0x03	; 3
    54a2:	80 93 af 21 	sts	0x21AF, r24
    54a6:	2f ef       	ldi	r18, 0xFF	; 255
    54a8:	3f ef       	ldi	r19, 0xFF	; 255
    54aa:	26 c0       	rjmp	.+76     	; 0x54f8 <xio_usb_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
    54ac:	90 91 ba 21 	lds	r25, 0x21BA
    54b0:	80 91 b9 21 	lds	r24, 0x21B9
    54b4:	98 17       	cp	r25, r24
    54b6:	29 f3       	breq	.-54     	; 0x5482 <xio_usb_getc+0xe>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    54b8:	80 91 b9 21 	lds	r24, 0x21B9
    54bc:	81 50       	subi	r24, 0x01	; 1
    54be:	80 93 b9 21 	sts	0x21B9, r24
    54c2:	80 91 b9 21 	lds	r24, 0x21B9
    54c6:	88 23       	and	r24, r24
    54c8:	19 f4       	brne	.+6      	; 0x54d0 <xio_usb_getc+0x5c>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    54ca:	81 e1       	ldi	r24, 0x11	; 17
    54cc:	80 93 b9 21 	sts	0x21B9, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    54d0:	e0 91 b9 21 	lds	r30, 0x21B9
    54d4:	f0 e0       	ldi	r31, 0x00	; 0
    54d6:	e3 55       	subi	r30, 0x53	; 83
    54d8:	fe 4d       	sbci	r31, 0xDE	; 222
    54da:	81 89       	ldd	r24, Z+17	; 0x11
    54dc:	8f 77       	andi	r24, 0x7F	; 127
    54de:	80 93 b0 21 	sts	0x21B0, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[f.c])))());
    54e2:	90 e0       	ldi	r25, 0x00	; 0
    54e4:	88 0f       	add	r24, r24
    54e6:	99 1f       	adc	r25, r25
    54e8:	8a 59       	subi	r24, 0x9A	; 154
    54ea:	97 4f       	sbci	r25, 0xF7	; 247
    54ec:	fc 01       	movw	r30, r24
    54ee:	25 91       	lpm	r18, Z+
    54f0:	34 91       	lpm	r19, Z+
    54f2:	f9 01       	movw	r30, r18
    54f4:	19 95       	eicall
    54f6:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    54f8:	c9 01       	movw	r24, r18
    54fa:	08 95       	ret

000054fc <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    54fc:	80 91 ad 21 	lds	r24, 0x21AD
    5500:	84 ff       	sbrs	r24, 4
    5502:	08 c0       	rjmp	.+16     	; 0x5514 <_getc_char+0x18>
    5504:	60 91 55 25 	lds	r22, 0x2555
    5508:	70 91 56 25 	lds	r23, 0x2556
    550c:	80 91 b0 21 	lds	r24, 0x21B0
    5510:	0e 94 bd 29 	call	0x537a	; 0x537a <xio_usb_putc>
	return(f.c);
}
    5514:	80 91 b0 21 	lds	r24, 0x21B0
    5518:	90 e0       	ldi	r25, 0x00	; 0
    551a:	08 95       	ret

0000551c <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(f.flags)) f.c = '\n';
    551c:	90 91 ad 21 	lds	r25, 0x21AD
    5520:	96 ff       	sbrs	r25, 6
    5522:	03 c0       	rjmp	.+6      	; 0x552a <_getc_NEWLINE+0xe>
    5524:	8a e0       	ldi	r24, 0x0A	; 10
    5526:	80 93 b0 21 	sts	0x21B0, r24
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    552a:	94 ff       	sbrs	r25, 4
    552c:	08 c0       	rjmp	.+16     	; 0x553e <_getc_NEWLINE+0x22>
    552e:	60 91 55 25 	lds	r22, 0x2555
    5532:	70 91 56 25 	lds	r23, 0x2556
    5536:	80 91 b0 21 	lds	r24, 0x21B0
    553a:	0e 94 bd 29 	call	0x537a	; 0x537a <xio_usb_putc>
	return(f.c);
}
    553e:	80 91 b0 21 	lds	r24, 0x21B0
    5542:	90 e0       	ldi	r25, 0x00	; 0
    5544:	08 95       	ret

00005546 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(f.flags)) {
    5546:	80 91 ad 21 	lds	r24, 0x21AD
    554a:	87 ff       	sbrs	r24, 7
    554c:	03 c0       	rjmp	.+6      	; 0x5554 <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    554e:	0e 94 8e 2a 	call	0x551c	; 0x551c <_getc_NEWLINE>
    5552:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    5554:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <_getc_char>
}
    5558:	08 95       	ret

0000555a <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	f.sig = XIO_SIG_DELETE;
    555a:	8a e0       	ldi	r24, 0x0A	; 10
    555c:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    5560:	8f ef       	ldi	r24, 0xFF	; 255
    5562:	9f ef       	ldi	r25, 0xFF	; 255
    5564:	08 95       	ret

00005566 <_getc_KILL>:

static int _getc_KILL(void)
{
	f.sig = XIO_SIG_KILL;
    5566:	84 e0       	ldi	r24, 0x04	; 4
    5568:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    556c:	8f ef       	ldi	r24, 0xFF	; 255
    556e:	9f ef       	ldi	r25, 0xFF	; 255
    5570:	08 95       	ret

00005572 <_getc_PAUSE>:

static int _getc_PAUSE(void)
{
	f.sig = XIO_SIG_PAUSE;
    5572:	86 e0       	ldi	r24, 0x06	; 6
    5574:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    5578:	8f ef       	ldi	r24, 0xFF	; 255
    557a:	9f ef       	ldi	r25, 0xFF	; 255
    557c:	08 95       	ret

0000557e <_getc_RESUME>:

static int _getc_RESUME(void)
{
	f.sig = XIO_SIG_RESUME;
    557e:	87 e0       	ldi	r24, 0x07	; 7
    5580:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    5584:	8f ef       	ldi	r24, 0xFF	; 255
    5586:	9f ef       	ldi	r25, 0xFF	; 255
    5588:	08 95       	ret

0000558a <_getc_SHIFTOUT>:

static int _getc_SHIFTOUT(void)
{
	f.sig = XIO_SIG_SHIFTOUT;
    558a:	88 e0       	ldi	r24, 0x08	; 8
    558c:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    5590:	8f ef       	ldi	r24, 0xFF	; 255
    5592:	9f ef       	ldi	r25, 0xFF	; 255
    5594:	08 95       	ret

00005596 <_getc_SHIFTIN>:

static int _getc_SHIFTIN(void)
{
	f.sig = XIO_SIG_SHIFTIN;
    5596:	89 e0       	ldi	r24, 0x09	; 9
    5598:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    559c:	8f ef       	ldi	r24, 0xFF	; 255
    559e:	9f ef       	ldi	r25, 0xFF	; 255
    55a0:	08 95       	ret

000055a2 <xio_usb_readln>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_usb_readln(char *buf, uint8_t len)
{
	if (!IN_LINE(f.flags)) {					// first time thru initializations
    55a2:	20 91 ad 21 	lds	r18, 0x21AD
    55a6:	30 91 ae 21 	lds	r19, 0x21AE
    55aa:	36 fd       	sbrc	r19, 6
    55ac:	0d c0       	rjmp	.+26     	; 0x55c8 <xio_usb_readln+0x26>
		f.i = 0;								// zero buffer
    55ae:	10 92 b1 21 	sts	0x21B1, r1
		f.len = len;							// save arg into struct 
    55b2:	60 93 b2 21 	sts	0x21B2, r22
		f.buf = buf;							// save arg into struct 
    55b6:	80 93 b3 21 	sts	0x21B3, r24
    55ba:	90 93 b4 21 	sts	0x21B4, r25
//		f.sig = XIO_SIG_OK;						// no signal action
		f.flags |= XIO_FLAG_IN_LINE_bm;			// yes, we are busy getting a line
    55be:	30 64       	ori	r19, 0x40	; 64
    55c0:	20 93 ad 21 	sts	0x21AD, r18
    55c4:	30 93 ae 21 	sts	0x21AE, r19
	}
	if (f.rx_buf_head == f.rx_buf_tail) {		// RX ISR buffer empty
    55c8:	90 91 ba 21 	lds	r25, 0x21BA
    55cc:	80 91 b9 21 	lds	r24, 0x21B9
    55d0:	98 17       	cp	r25, r24
    55d2:	19 f4       	brne	.+6      	; 0x55da <xio_usb_readln+0x38>
    55d4:	22 e0       	ldi	r18, 0x02	; 2
    55d6:	30 e0       	ldi	r19, 0x00	; 0
    55d8:	20 c0       	rjmp	.+64     	; 0x561a <xio_usb_readln+0x78>
//		f.sig = XIO_SIG_WOULDBLOCK;
		return(TG_CONTINUE);
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    55da:	80 91 b9 21 	lds	r24, 0x21B9
    55de:	81 50       	subi	r24, 0x01	; 1
    55e0:	80 93 b9 21 	sts	0x21B9, r24
    55e4:	80 91 b9 21 	lds	r24, 0x21B9
    55e8:	88 23       	and	r24, r24
    55ea:	19 f4       	brne	.+6      	; 0x55f2 <xio_usb_readln+0x50>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    55ec:	81 e1       	ldi	r24, 0x11	; 17
    55ee:	80 93 b9 21 	sts	0x21B9, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    55f2:	e0 91 b9 21 	lds	r30, 0x21B9
    55f6:	f0 e0       	ldi	r31, 0x00	; 0
    55f8:	e3 55       	subi	r30, 0x53	; 83
    55fa:	fe 4d       	sbci	r31, 0xDE	; 222
    55fc:	81 89       	ldd	r24, Z+17	; 0x11
    55fe:	8f 77       	andi	r24, 0x7F	; 127
    5600:	80 93 b0 21 	sts	0x21B0, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[f.c])))()); // dispatch on character
    5604:	90 e0       	ldi	r25, 0x00	; 0
    5606:	88 0f       	add	r24, r24
    5608:	99 1f       	adc	r25, r25
    560a:	8a 59       	subi	r24, 0x9A	; 154
    560c:	98 4f       	sbci	r25, 0xF8	; 248
    560e:	fc 01       	movw	r30, r24
    5610:	25 91       	lpm	r18, Z+
    5612:	34 91       	lpm	r19, Z+
    5614:	f9 01       	movw	r30, r18
    5616:	19 95       	eicall
    5618:	9c 01       	movw	r18, r24
}
    561a:	c9 01       	movw	r24, r18
    561c:	08 95       	ret

0000561e <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (f.i > f.len) {							// trap buffer overflow
    561e:	90 91 b1 21 	lds	r25, 0x21B1
    5622:	20 91 b2 21 	lds	r18, 0x21B2
    5626:	e0 91 b3 21 	lds	r30, 0x21B3
    562a:	f0 91 b4 21 	lds	r31, 0x21B4
    562e:	29 17       	cp	r18, r25
    5630:	48 f4       	brcc	.+18     	; 0x5644 <_readln_char+0x26>
		f.sig = XIO_SIG_EOL;
    5632:	81 e0       	ldi	r24, 0x01	; 1
    5634:	80 93 af 21 	sts	0x21AF, r24
		f.buf[f.len] = NUL;						// f.len is zero based
    5638:	e2 0f       	add	r30, r18
    563a:	f1 1d       	adc	r31, r1
    563c:	10 82       	st	Z, r1
    563e:	26 e0       	ldi	r18, 0x06	; 6
    5640:	30 e0       	ldi	r19, 0x00	; 0
    5642:	16 c0       	rjmp	.+44     	; 0x5670 <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	f.buf[f.i++] = f.c;
    5644:	e9 0f       	add	r30, r25
    5646:	f1 1d       	adc	r31, r1
    5648:	80 91 b0 21 	lds	r24, 0x21B0
    564c:	80 83       	st	Z, r24
    564e:	9f 5f       	subi	r25, 0xFF	; 255
    5650:	90 93 b1 21 	sts	0x21B1, r25
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);// conditional echo
    5654:	80 91 ad 21 	lds	r24, 0x21AD
    5658:	84 ff       	sbrs	r24, 4
    565a:	08 c0       	rjmp	.+16     	; 0x566c <_readln_char+0x4e>
    565c:	60 91 55 25 	lds	r22, 0x2555
    5660:	70 91 56 25 	lds	r23, 0x2556
    5664:	80 91 b0 21 	lds	r24, 0x21B0
    5668:	0e 94 bd 29 	call	0x537a	; 0x537a <xio_usb_putc>
    566c:	22 e0       	ldi	r18, 0x02	; 2
    566e:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_CONTINUE);						// line is still in process
}
    5670:	c9 01       	movw	r24, r18
    5672:	08 95       	ret

00005674 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	f.sig = XIO_SIG_EOL;
    5674:	81 e0       	ldi	r24, 0x01	; 1
    5676:	80 93 af 21 	sts	0x21AF, r24
	f.buf[f.i] = NUL;
    567a:	80 91 b1 21 	lds	r24, 0x21B1
    567e:	e0 91 b3 21 	lds	r30, 0x21B3
    5682:	f0 91 b4 21 	lds	r31, 0x21B4
    5686:	e8 0f       	add	r30, r24
    5688:	f1 1d       	adc	r31, r1
    568a:	10 82       	st	Z, r1
	f.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    568c:	20 91 ad 21 	lds	r18, 0x21AD
    5690:	30 91 ae 21 	lds	r19, 0x21AE
    5694:	c9 01       	movw	r24, r18
    5696:	9f 7b       	andi	r25, 0xBF	; 191
    5698:	80 93 ad 21 	sts	0x21AD, r24
    569c:	90 93 ae 21 	sts	0x21AE, r25
	if (ECHO(f.flags)) xio_usb_putc('\n',stdout);// echo a newline
    56a0:	24 ff       	sbrs	r18, 4
    56a2:	07 c0       	rjmp	.+14     	; 0x56b2 <_readln_NEWLINE+0x3e>
    56a4:	60 91 55 25 	lds	r22, 0x2555
    56a8:	70 91 56 25 	lds	r23, 0x2556
    56ac:	8a e0       	ldi	r24, 0x0A	; 10
    56ae:	0e 94 bd 29 	call	0x537a	; 0x537a <xio_usb_putc>
	return ((int)f.line_func(f.buf));			// call line handler function
    56b2:	e0 91 b7 21 	lds	r30, 0x21B7
    56b6:	f0 91 b8 21 	lds	r31, 0x21B8
    56ba:	80 91 b3 21 	lds	r24, 0x21B3
    56be:	90 91 b4 21 	lds	r25, 0x21B4
    56c2:	19 95       	eicall
}
    56c4:	08 95       	ret

000056c6 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(f.flags)) {
    56c6:	80 91 ad 21 	lds	r24, 0x21AD
    56ca:	87 ff       	sbrs	r24, 7
    56cc:	03 c0       	rjmp	.+6      	; 0x56d4 <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    56ce:	0e 94 3a 2b 	call	0x5674	; 0x5674 <_readln_NEWLINE>
    56d2:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    56d4:	0e 94 0f 2b 	call	0x561e	; 0x561e <_readln_char>
	}
}
    56d8:	08 95       	ret

000056da <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--f.i >= 0) {
    56da:	80 91 b1 21 	lds	r24, 0x21B1
    56de:	81 50       	subi	r24, 0x01	; 1
    56e0:	80 93 b1 21 	sts	0x21B1, r24
		if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    56e4:	80 91 ad 21 	lds	r24, 0x21AD
    56e8:	84 ff       	sbrs	r24, 4
    56ea:	08 c0       	rjmp	.+16     	; 0x56fc <_readln_DELETE+0x22>
    56ec:	60 91 55 25 	lds	r22, 0x2555
    56f0:	70 91 56 25 	lds	r23, 0x2556
    56f4:	80 91 b0 21 	lds	r24, 0x21B0
    56f8:	0e 94 bd 29 	call	0x537a	; 0x537a <xio_usb_putc>
	} else {
		f.i = 0;
	}
	return (TG_CONTINUE);						// line is still in process
}
    56fc:	82 e0       	ldi	r24, 0x02	; 2
    56fe:	90 e0       	ldi	r25, 0x00	; 0
    5700:	08 95       	ret

00005702 <_readln_KILL>:

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    5702:	84 e0       	ldi	r24, 0x04	; 4
    5704:	80 93 af 21 	sts	0x21AF, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    5708:	e0 91 b5 21 	lds	r30, 0x21B5
    570c:	f0 91 b6 21 	lds	r31, 0x21B6
    5710:	19 95       	eicall
}

static int _readln_KILL(void)
{
	return _readln_SIG(XIO_SIG_KILL);
}
    5712:	08 95       	ret

00005714 <_readln_PAUSE>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    5714:	86 e0       	ldi	r24, 0x06	; 6
    5716:	80 93 af 21 	sts	0x21AF, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    571a:	e0 91 b5 21 	lds	r30, 0x21B5
    571e:	f0 91 b6 21 	lds	r31, 0x21B6
    5722:	19 95       	eicall
}

static int _readln_PAUSE(void)
{
	return _readln_SIG(XIO_SIG_PAUSE);
}
    5724:	08 95       	ret

00005726 <_readln_RESUME>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    5726:	87 e0       	ldi	r24, 0x07	; 7
    5728:	80 93 af 21 	sts	0x21AF, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    572c:	e0 91 b5 21 	lds	r30, 0x21B5
    5730:	f0 91 b6 21 	lds	r31, 0x21B6
    5734:	19 95       	eicall
}

static int _readln_RESUME(void)
{
	return _readln_SIG(XIO_SIG_RESUME);
}
    5736:	08 95       	ret

00005738 <_readln_SHIFTOUT>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    5738:	88 e0       	ldi	r24, 0x08	; 8
    573a:	80 93 af 21 	sts	0x21AF, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    573e:	e0 91 b5 21 	lds	r30, 0x21B5
    5742:	f0 91 b6 21 	lds	r31, 0x21B6
    5746:	19 95       	eicall
}

static int _readln_SHIFTOUT(void)
{
	return _readln_SIG(XIO_SIG_SHIFTOUT);
}
    5748:	08 95       	ret

0000574a <_readln_SHIFTIN>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    574a:	89 e0       	ldi	r24, 0x09	; 9
    574c:	80 93 af 21 	sts	0x21AF, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    5750:	e0 91 b5 21 	lds	r30, 0x21B5
    5754:	f0 91 b6 21 	lds	r31, 0x21B6
    5758:	19 95       	eicall
}

static int _readln_SHIFTIN(void)
{
	return _readln_SIG(XIO_SIG_SHIFTIN);
}
    575a:	08 95       	ret

0000575c <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    575c:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    575e:	e0 ec       	ldi	r30, 0xC0	; 192
    5760:	f1 e0       	ldi	r31, 0x01	; 1
    5762:	80 91 cf 01 	lds	r24, 0x01CF
    5766:	87 fd       	sbrc	r24, 7
    5768:	fa cf       	rjmp	.-12     	; 0x575e <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    576a:	26 2f       	mov	r18, r22
    576c:	30 e0       	ldi	r19, 0x00	; 0
    576e:	2f 71       	andi	r18, 0x1F	; 31
    5770:	30 70       	andi	r19, 0x00	; 0
    5772:	89 2f       	mov	r24, r25
    5774:	90 e0       	ldi	r25, 0x00	; 0
    5776:	45 e0       	ldi	r20, 0x05	; 5
    5778:	88 0f       	add	r24, r24
    577a:	99 1f       	adc	r25, r25
    577c:	4a 95       	dec	r20
    577e:	e1 f7       	brne	.-8      	; 0x5778 <EEPROM_ReadByte+0x1c>
    5780:	28 2b       	or	r18, r24
    5782:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    5784:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5788:	83 2f       	mov	r24, r19
    578a:	8f 71       	andi	r24, 0x1F	; 31
    578c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    578e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    5790:	86 e0       	ldi	r24, 0x06	; 6
    5792:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5794:	ef 93       	push	r30
    5796:	ff 93       	push	r31
    5798:	0f 93       	push	r16
    579a:	2f 93       	push	r18
    579c:	eb ec       	ldi	r30, 0xCB	; 203
    579e:	f1 e0       	ldi	r31, 0x01	; 1
    57a0:	08 ed       	ldi	r16, 0xD8	; 216
    57a2:	21 e0       	ldi	r18, 0x01	; 1
    57a4:	04 bf       	out	0x34, r16	; 52
    57a6:	20 83       	st	Z, r18
    57a8:	2f 91       	pop	r18
    57aa:	0f 91       	pop	r16
    57ac:	ff 91       	pop	r31
    57ae:	ef 91       	pop	r30

	return NVM.DATA0;
    57b0:	80 91 c4 01 	lds	r24, 0x01C4
}
    57b4:	08 95       	ret

000057b6 <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    57b6:	68 2f       	mov	r22, r24
    57b8:	6f 71       	andi	r22, 0x1F	; 31
    57ba:	55 e0       	ldi	r21, 0x05	; 5
    57bc:	96 95       	lsr	r25
    57be:	87 95       	ror	r24
    57c0:	5a 95       	dec	r21
    57c2:	e1 f7       	brne	.-8      	; 0x57bc <eeprom_get_char+0x6>
    57c4:	0e 94 ae 2b 	call	0x575c	; 0x575c <EEPROM_ReadByte>
}
    57c8:	08 95       	ret

000057ca <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    57ca:	8f 92       	push	r8
    57cc:	9f 92       	push	r9
    57ce:	af 92       	push	r10
    57d0:	bf 92       	push	r11
    57d2:	cf 92       	push	r12
    57d4:	df 92       	push	r13
    57d6:	ff 92       	push	r15
    57d8:	0f 93       	push	r16
    57da:	1f 93       	push	r17
    57dc:	cf 93       	push	r28
    57de:	df 93       	push	r29
    57e0:	4c 01       	movw	r8, r24
    57e2:	5b 01       	movw	r10, r22
    57e4:	6a 01       	movw	r12, r20
    57e6:	8b 01       	movw	r16, r22
    57e8:	ea 01       	movw	r28, r20
    57ea:	ff 24       	eor	r15, r15
    57ec:	18 c0       	rjmp	.+48     	; 0x581e <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    57ee:	c8 01       	movw	r24, r16
    57f0:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    57f4:	ff 20       	and	r15, r15
    57f6:	19 f0       	breq	.+6      	; 0x57fe <memcpy_from_eeprom_with_checksum+0x34>
    57f8:	21 e0       	ldi	r18, 0x01	; 1
    57fa:	30 e0       	ldi	r19, 0x00	; 0
    57fc:	08 c0       	rjmp	.+16     	; 0x580e <memcpy_from_eeprom_with_checksum+0x44>
    57fe:	2f 2d       	mov	r18, r15
    5800:	33 27       	eor	r19, r19
    5802:	27 fd       	sbrc	r18, 7
    5804:	30 95       	com	r19
    5806:	22 27       	eor	r18, r18
    5808:	33 0f       	add	r19, r19
    580a:	22 1f       	adc	r18, r18
    580c:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    580e:	0f 5f       	subi	r16, 0xFF	; 255
    5810:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    5812:	f8 2e       	mov	r15, r24
    5814:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    5816:	f4 01       	movw	r30, r8
    5818:	81 93       	st	Z+, r24
    581a:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    581c:	21 97       	sbiw	r28, 0x01	; 1
    581e:	20 97       	sbiw	r28, 0x00	; 0
    5820:	31 f7       	brne	.-52     	; 0x57ee <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    5822:	c6 01       	movw	r24, r12
    5824:	8a 0d       	add	r24, r10
    5826:	9b 1d       	adc	r25, r11
    5828:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <eeprom_get_char>
    582c:	20 e0       	ldi	r18, 0x00	; 0
    582e:	30 e0       	ldi	r19, 0x00	; 0
    5830:	f8 16       	cp	r15, r24
    5832:	11 f4       	brne	.+4      	; 0x5838 <memcpy_from_eeprom_with_checksum+0x6e>
    5834:	21 e0       	ldi	r18, 0x01	; 1
    5836:	30 e0       	ldi	r19, 0x00	; 0
}
    5838:	c9 01       	movw	r24, r18
    583a:	df 91       	pop	r29
    583c:	cf 91       	pop	r28
    583e:	1f 91       	pop	r17
    5840:	0f 91       	pop	r16
    5842:	ff 90       	pop	r15
    5844:	df 90       	pop	r13
    5846:	cf 90       	pop	r12
    5848:	bf 90       	pop	r11
    584a:	af 90       	pop	r10
    584c:	9f 90       	pop	r9
    584e:	8f 90       	pop	r8
    5850:	08 95       	ret

00005852 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5852:	80 91 cf 01 	lds	r24, 0x01CF
    5856:	87 fd       	sbrc	r24, 7
    5858:	fc cf       	rjmp	.-8      	; 0x5852 <EEPROM_WaitForNVM>
}
    585a:	08 95       	ret

0000585c <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    585c:	80 91 cf 01 	lds	r24, 0x01CF
    5860:	87 fd       	sbrc	r24, 7
    5862:	fc cf       	rjmp	.-8      	; 0x585c <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    5864:	80 91 cf 01 	lds	r24, 0x01CF
    5868:	81 ff       	sbrs	r24, 1
    586a:	12 c0       	rjmp	.+36     	; 0x5890 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    586c:	86 e3       	ldi	r24, 0x36	; 54
    586e:	e0 ec       	ldi	r30, 0xC0	; 192
    5870:	f1 e0       	ldi	r31, 0x01	; 1
    5872:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    5874:	ef 93       	push	r30
    5876:	ff 93       	push	r31
    5878:	0f 93       	push	r16
    587a:	2f 93       	push	r18
    587c:	eb ec       	ldi	r30, 0xCB	; 203
    587e:	f1 e0       	ldi	r31, 0x01	; 1
    5880:	08 ed       	ldi	r16, 0xD8	; 216
    5882:	21 e0       	ldi	r18, 0x01	; 1
    5884:	04 bf       	out	0x34, r16	; 52
    5886:	20 83       	st	Z, r18
    5888:	2f 91       	pop	r18
    588a:	0f 91       	pop	r16
    588c:	ff 91       	pop	r31
    588e:	ef 91       	pop	r30
    5890:	08 95       	ret

00005892 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    5892:	df 92       	push	r13
    5894:	ef 92       	push	r14
    5896:	ff 92       	push	r15
    5898:	0f 93       	push	r16
    589a:	1f 93       	push	r17
    589c:	e8 2e       	mov	r14, r24
    589e:	06 2f       	mov	r16, r22
    58a0:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    58a2:	0e 94 2e 2c 	call	0x585c	; 0x585c <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    58a6:	e0 ec       	ldi	r30, 0xC0	; 192
    58a8:	f1 e0       	ldi	r31, 0x01	; 1
    58aa:	83 e3       	ldi	r24, 0x33	; 51
    58ac:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    58ae:	10 e0       	ldi	r17, 0x00	; 0
    58b0:	0f 71       	andi	r16, 0x1F	; 31
    58b2:	10 70       	andi	r17, 0x00	; 0
    58b4:	ff 24       	eor	r15, r15
    58b6:	75 e0       	ldi	r23, 0x05	; 5
    58b8:	ee 0c       	add	r14, r14
    58ba:	ff 1c       	adc	r15, r15
    58bc:	7a 95       	dec	r23
    58be:	e1 f7       	brne	.-8      	; 0x58b8 <EEPROM_WriteByte+0x26>
    58c0:	0e 29       	or	r16, r14
    58c2:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    58c4:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    58c6:	81 2f       	mov	r24, r17
    58c8:	8f 71       	andi	r24, 0x1F	; 31
    58ca:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    58cc:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    58ce:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    58d0:	85 e3       	ldi	r24, 0x35	; 53
    58d2:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    58d4:	ef 93       	push	r30
    58d6:	ff 93       	push	r31
    58d8:	0f 93       	push	r16
    58da:	2f 93       	push	r18
    58dc:	eb ec       	ldi	r30, 0xCB	; 203
    58de:	f1 e0       	ldi	r31, 0x01	; 1
    58e0:	08 ed       	ldi	r16, 0xD8	; 216
    58e2:	21 e0       	ldi	r18, 0x01	; 1
    58e4:	04 bf       	out	0x34, r16	; 52
    58e6:	20 83       	st	Z, r18
    58e8:	2f 91       	pop	r18
    58ea:	0f 91       	pop	r16
    58ec:	ff 91       	pop	r31
    58ee:	ef 91       	pop	r30
}
    58f0:	1f 91       	pop	r17
    58f2:	0f 91       	pop	r16
    58f4:	ff 90       	pop	r15
    58f6:	ef 90       	pop	r14
    58f8:	df 90       	pop	r13
    58fa:	08 95       	ret

000058fc <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    58fc:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    58fe:	68 2f       	mov	r22, r24
    5900:	6f 71       	andi	r22, 0x1F	; 31
    5902:	e5 e0       	ldi	r30, 0x05	; 5
    5904:	96 95       	lsr	r25
    5906:	87 95       	ror	r24
    5908:	ea 95       	dec	r30
    590a:	e1 f7       	brne	.-8      	; 0x5904 <eeprom_put_char+0x8>
    590c:	0e 94 49 2c 	call	0x5892	; 0x5892 <EEPROM_WriteByte>
}
    5910:	08 95       	ret

00005912 <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    5912:	8f 92       	push	r8
    5914:	9f 92       	push	r9
    5916:	af 92       	push	r10
    5918:	bf 92       	push	r11
    591a:	cf 92       	push	r12
    591c:	df 92       	push	r13
    591e:	ef 92       	push	r14
    5920:	ff 92       	push	r15
    5922:	0f 93       	push	r16
    5924:	df 93       	push	r29
    5926:	cf 93       	push	r28
    5928:	0f 92       	push	r0
    592a:	0f 92       	push	r0
    592c:	cd b7       	in	r28, 0x3d	; 61
    592e:	de b7       	in	r29, 0x3e	; 62
    5930:	5c 01       	movw	r10, r24
    5932:	6b 01       	movw	r12, r22
    5934:	7a 01       	movw	r14, r20
    5936:	4a 01       	movw	r8, r20
    5938:	00 e0       	ldi	r16, 0x00	; 0
    593a:	1e c0       	rjmp	.+60     	; 0x5978 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    593c:	00 23       	and	r16, r16
    593e:	19 f0       	breq	.+6      	; 0x5946 <memcpy_to_eeprom_with_checksum+0x34>
    5940:	21 e0       	ldi	r18, 0x01	; 1
    5942:	30 e0       	ldi	r19, 0x00	; 0
    5944:	08 c0       	rjmp	.+16     	; 0x5956 <memcpy_to_eeprom_with_checksum+0x44>
    5946:	20 2f       	mov	r18, r16
    5948:	33 27       	eor	r19, r19
    594a:	27 fd       	sbrc	r18, 7
    594c:	30 95       	com	r19
    594e:	22 27       	eor	r18, r18
    5950:	33 0f       	add	r19, r19
    5952:	22 1f       	adc	r18, r18
    5954:	33 27       	eor	r19, r19
    checksum += *source;
    5956:	f6 01       	movw	r30, r12
    5958:	61 91       	ld	r22, Z+
    595a:	6f 01       	movw	r12, r30
    595c:	06 2f       	mov	r16, r22
    595e:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    5960:	9c 01       	movw	r18, r24
    5962:	2f 5f       	subi	r18, 0xFF	; 255
    5964:	3f 4f       	sbci	r19, 0xFF	; 255
    5966:	29 83       	std	Y+1, r18	; 0x01
    5968:	3a 83       	std	Y+2, r19	; 0x02
    596a:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    596e:	08 94       	sec
    5970:	81 08       	sbc	r8, r1
    5972:	91 08       	sbc	r9, r1
    5974:	89 81       	ldd	r24, Y+1	; 0x01
    5976:	9a 81       	ldd	r25, Y+2	; 0x02
    5978:	81 14       	cp	r8, r1
    597a:	91 04       	cpc	r9, r1
    597c:	f9 f6       	brne	.-66     	; 0x593c <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    597e:	c7 01       	movw	r24, r14
    5980:	8a 0d       	add	r24, r10
    5982:	9b 1d       	adc	r25, r11
    5984:	60 2f       	mov	r22, r16
    5986:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <eeprom_put_char>
}
    598a:	0f 90       	pop	r0
    598c:	0f 90       	pop	r0
    598e:	cf 91       	pop	r28
    5990:	df 91       	pop	r29
    5992:	0f 91       	pop	r16
    5994:	ff 90       	pop	r15
    5996:	ef 90       	pop	r14
    5998:	df 90       	pop	r13
    599a:	cf 90       	pop	r12
    599c:	bf 90       	pop	r11
    599e:	af 90       	pop	r10
    59a0:	9f 90       	pop	r9
    59a2:	8f 90       	pop	r8
    59a4:	08 95       	ret

000059a6 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    59a6:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    59a8:	e0 ec       	ldi	r30, 0xC0	; 192
    59aa:	f1 e0       	ldi	r31, 0x01	; 1
    59ac:	80 91 cf 01 	lds	r24, 0x01CF
    59b0:	87 fd       	sbrc	r24, 7
    59b2:	fa cf       	rjmp	.-12     	; 0x59a8 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    59b4:	83 e3       	ldi	r24, 0x33	; 51
    59b6:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    59b8:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    59bc:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    59be:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    59c0:	64 83       	std	Z+4, r22	; 0x04
}
    59c2:	08 95       	ret

000059c4 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    59c4:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    59c6:	e0 ec       	ldi	r30, 0xC0	; 192
    59c8:	f1 e0       	ldi	r31, 0x01	; 1
    59ca:	80 91 cf 01 	lds	r24, 0x01CF
    59ce:	87 fd       	sbrc	r24, 7
    59d0:	fa cf       	rjmp	.-12     	; 0x59c6 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    59d2:	83 e3       	ldi	r24, 0x33	; 51
    59d4:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    59d6:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    59d8:	12 82       	std	Z+2, r1	; 0x02
    59da:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    59dc:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    59e0:	8d 91       	ld	r24, X+
    59e2:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    59e4:	9f 5f       	subi	r25, 0xFF	; 255
    59e6:	90 32       	cpi	r25, 0x20	; 32
    59e8:	c9 f7       	brne	.-14     	; 0x59dc <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    59ea:	08 95       	ret

000059ec <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    59ec:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    59ee:	e0 ec       	ldi	r30, 0xC0	; 192
    59f0:	f1 e0       	ldi	r31, 0x01	; 1
    59f2:	80 91 cf 01 	lds	r24, 0x01CF
    59f6:	87 fd       	sbrc	r24, 7
    59f8:	fa cf       	rjmp	.-12     	; 0x59ee <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    59fa:	89 2f       	mov	r24, r25
    59fc:	90 e0       	ldi	r25, 0x00	; 0
    59fe:	a5 e0       	ldi	r26, 0x05	; 5
    5a00:	88 0f       	add	r24, r24
    5a02:	99 1f       	adc	r25, r25
    5a04:	aa 95       	dec	r26
    5a06:	e1 f7       	brne	.-8      	; 0x5a00 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5a08:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5a0c:	89 2f       	mov	r24, r25
    5a0e:	8f 71       	andi	r24, 0x1F	; 31
    5a10:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5a12:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5a14:	85 e3       	ldi	r24, 0x35	; 53
    5a16:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5a18:	ef 93       	push	r30
    5a1a:	ff 93       	push	r31
    5a1c:	0f 93       	push	r16
    5a1e:	2f 93       	push	r18
    5a20:	eb ec       	ldi	r30, 0xCB	; 203
    5a22:	f1 e0       	ldi	r31, 0x01	; 1
    5a24:	08 ed       	ldi	r16, 0xD8	; 216
    5a26:	21 e0       	ldi	r18, 0x01	; 1
    5a28:	04 bf       	out	0x34, r16	; 52
    5a2a:	20 83       	st	Z, r18
    5a2c:	2f 91       	pop	r18
    5a2e:	0f 91       	pop	r16
    5a30:	ff 91       	pop	r31
    5a32:	ef 91       	pop	r30
}
    5a34:	08 95       	ret

00005a36 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    5a36:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a38:	e0 ec       	ldi	r30, 0xC0	; 192
    5a3a:	f1 e0       	ldi	r31, 0x01	; 1
    5a3c:	80 91 cf 01 	lds	r24, 0x01CF
    5a40:	87 fd       	sbrc	r24, 7
    5a42:	fa cf       	rjmp	.-12     	; 0x5a38 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5a44:	89 2f       	mov	r24, r25
    5a46:	90 e0       	ldi	r25, 0x00	; 0
    5a48:	b5 e0       	ldi	r27, 0x05	; 5
    5a4a:	88 0f       	add	r24, r24
    5a4c:	99 1f       	adc	r25, r25
    5a4e:	ba 95       	dec	r27
    5a50:	e1 f7       	brne	.-8      	; 0x5a4a <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5a52:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5a56:	89 2f       	mov	r24, r25
    5a58:	8f 71       	andi	r24, 0x1F	; 31
    5a5a:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5a5c:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    5a5e:	82 e3       	ldi	r24, 0x32	; 50
    5a60:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5a62:	ef 93       	push	r30
    5a64:	ff 93       	push	r31
    5a66:	0f 93       	push	r16
    5a68:	2f 93       	push	r18
    5a6a:	eb ec       	ldi	r30, 0xCB	; 203
    5a6c:	f1 e0       	ldi	r31, 0x01	; 1
    5a6e:	08 ed       	ldi	r16, 0xD8	; 216
    5a70:	21 e0       	ldi	r18, 0x01	; 1
    5a72:	04 bf       	out	0x34, r16	; 52
    5a74:	20 83       	st	Z, r18
    5a76:	2f 91       	pop	r18
    5a78:	0f 91       	pop	r16
    5a7a:	ff 91       	pop	r31
    5a7c:	ef 91       	pop	r30
}
    5a7e:	08 95       	ret

00005a80 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    5a80:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a82:	e0 ec       	ldi	r30, 0xC0	; 192
    5a84:	f1 e0       	ldi	r31, 0x01	; 1
    5a86:	80 91 cf 01 	lds	r24, 0x01CF
    5a8a:	87 fd       	sbrc	r24, 7
    5a8c:	fa cf       	rjmp	.-12     	; 0x5a82 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5a8e:	89 2f       	mov	r24, r25
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	25 e0       	ldi	r18, 0x05	; 5
    5a94:	88 0f       	add	r24, r24
    5a96:	99 1f       	adc	r25, r25
    5a98:	2a 95       	dec	r18
    5a9a:	e1 f7       	brne	.-8      	; 0x5a94 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5a9c:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5aa0:	89 2f       	mov	r24, r25
    5aa2:	8f 71       	andi	r24, 0x1F	; 31
    5aa4:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5aa6:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    5aa8:	84 e3       	ldi	r24, 0x34	; 52
    5aaa:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5aac:	ef 93       	push	r30
    5aae:	ff 93       	push	r31
    5ab0:	0f 93       	push	r16
    5ab2:	2f 93       	push	r18
    5ab4:	eb ec       	ldi	r30, 0xCB	; 203
    5ab6:	f1 e0       	ldi	r31, 0x01	; 1
    5ab8:	08 ed       	ldi	r16, 0xD8	; 216
    5aba:	21 e0       	ldi	r18, 0x01	; 1
    5abc:	04 bf       	out	0x34, r16	; 52
    5abe:	20 83       	st	Z, r18
    5ac0:	2f 91       	pop	r18
    5ac2:	0f 91       	pop	r16
    5ac4:	ff 91       	pop	r31
    5ac6:	ef 91       	pop	r30
}
    5ac8:	08 95       	ret

00005aca <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5aca:	80 91 cf 01 	lds	r24, 0x01CF
    5ace:	87 fd       	sbrc	r24, 7
    5ad0:	fc cf       	rjmp	.-8      	; 0x5aca <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    5ad2:	80 e3       	ldi	r24, 0x30	; 48
    5ad4:	e0 ec       	ldi	r30, 0xC0	; 192
    5ad6:	f1 e0       	ldi	r31, 0x01	; 1
    5ad8:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5ada:	ef 93       	push	r30
    5adc:	ff 93       	push	r31
    5ade:	0f 93       	push	r16
    5ae0:	2f 93       	push	r18
    5ae2:	eb ec       	ldi	r30, 0xCB	; 203
    5ae4:	f1 e0       	ldi	r31, 0x01	; 1
    5ae6:	08 ed       	ldi	r16, 0xD8	; 216
    5ae8:	21 e0       	ldi	r18, 0x01	; 1
    5aea:	04 bf       	out	0x34, r16	; 52
    5aec:	20 83       	st	Z, r18
    5aee:	2f 91       	pop	r18
    5af0:	0f 91       	pop	r16
    5af2:	ff 91       	pop	r31
    5af4:	ef 91       	pop	r30
}
    5af6:	08 95       	ret

00005af8 <xio_pgm_init>:
 *
 *  Control parameters are defaulted and may be set using xio_pgm_control()
 */

void xio_pgm_init(const uint16_t control)
{
    5af8:	9c 01       	movw	r18, r24
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;	// set flags to defaults & initial state
    5afa:	85 e0       	ldi	r24, 0x05	; 5
    5afc:	90 e0       	ldi	r25, 0x00	; 0
    5afe:	80 93 e6 21 	sts	0x21E6, r24
    5b02:	90 93 e7 21 	sts	0x21E7, r25
	if (control & XIO_WR) {				// this is actually an error. Ignore for now.
    5b06:	25 ff       	sbrs	r18, 5
    5b08:	06 c0       	rjmp	.+12     	; 0x5b16 <xio_pgm_init+0x1e>
		fpgm.flags |= XIO_FLAG_WR_bm;
    5b0a:	87 e0       	ldi	r24, 0x07	; 7
    5b0c:	90 e0       	ldi	r25, 0x00	; 0
    5b0e:	80 93 e6 21 	sts	0x21E6, r24
    5b12:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOBLOCK) {		// this is also technically a config error.
    5b16:	27 ff       	sbrs	r18, 7
    5b18:	09 c0       	rjmp	.+18     	; 0x5b2c <xio_pgm_init+0x34>
		fpgm.flags &= ~XIO_FLAG_BLOCK_bm;
    5b1a:	80 91 e6 21 	lds	r24, 0x21E6
    5b1e:	90 91 e7 21 	lds	r25, 0x21E7
    5b22:	8b 7f       	andi	r24, 0xFB	; 251
    5b24:	80 93 e6 21 	sts	0x21E6, r24
    5b28:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_ECHO) {
    5b2c:	30 ff       	sbrs	r19, 0
    5b2e:	09 c0       	rjmp	.+18     	; 0x5b42 <xio_pgm_init+0x4a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5b30:	80 91 e6 21 	lds	r24, 0x21E6
    5b34:	90 91 e7 21 	lds	r25, 0x21E7
    5b38:	80 61       	ori	r24, 0x10	; 16
    5b3a:	80 93 e6 21 	sts	0x21E6, r24
    5b3e:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOECHO) {
    5b42:	31 ff       	sbrs	r19, 1
    5b44:	09 c0       	rjmp	.+18     	; 0x5b58 <xio_pgm_init+0x60>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5b46:	80 91 e6 21 	lds	r24, 0x21E6
    5b4a:	90 91 e7 21 	lds	r25, 0x21E7
    5b4e:	8f 7e       	andi	r24, 0xEF	; 239
    5b50:	80 93 e6 21 	sts	0x21E6, r24
    5b54:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_CRLF) {
    5b58:	32 ff       	sbrs	r19, 2
    5b5a:	09 c0       	rjmp	.+18     	; 0x5b6e <xio_pgm_init+0x76>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5b5c:	80 91 e6 21 	lds	r24, 0x21E6
    5b60:	90 91 e7 21 	lds	r25, 0x21E7
    5b64:	80 62       	ori	r24, 0x20	; 32
    5b66:	80 93 e6 21 	sts	0x21E6, r24
    5b6a:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOCRLF) {
    5b6e:	33 ff       	sbrs	r19, 3
    5b70:	09 c0       	rjmp	.+18     	; 0x5b84 <xio_pgm_init+0x8c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5b72:	80 91 e6 21 	lds	r24, 0x21E6
    5b76:	90 91 e7 21 	lds	r25, 0x21E7
    5b7a:	8f 7d       	andi	r24, 0xDF	; 223
    5b7c:	80 93 e6 21 	sts	0x21E6, r24
    5b80:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_LINEMODE) {
    5b84:	34 ff       	sbrs	r19, 4
    5b86:	09 c0       	rjmp	.+18     	; 0x5b9a <xio_pgm_init+0xa2>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5b88:	80 91 e6 21 	lds	r24, 0x21E6
    5b8c:	90 91 e7 21 	lds	r25, 0x21E7
    5b90:	80 64       	ori	r24, 0x40	; 64
    5b92:	80 93 e6 21 	sts	0x21E6, r24
    5b96:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOLINEMODE) {
    5b9a:	35 ff       	sbrs	r19, 5
    5b9c:	09 c0       	rjmp	.+18     	; 0x5bb0 <xio_pgm_init+0xb8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5b9e:	80 91 e6 21 	lds	r24, 0x21E6
    5ba2:	90 91 e7 21 	lds	r25, 0x21E7
    5ba6:	8f 7b       	andi	r24, 0xBF	; 191
    5ba8:	80 93 e6 21 	sts	0x21E6, r24
    5bac:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_SEMICOLONS) {
    5bb0:	36 ff       	sbrs	r19, 6
    5bb2:	09 c0       	rjmp	.+18     	; 0x5bc6 <xio_pgm_init+0xce>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5bb4:	80 91 e6 21 	lds	r24, 0x21E6
    5bb8:	90 91 e7 21 	lds	r25, 0x21E7
    5bbc:	80 68       	ori	r24, 0x80	; 128
    5bbe:	80 93 e6 21 	sts	0x21E6, r24
    5bc2:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5bc6:	37 ff       	sbrs	r19, 7
    5bc8:	09 c0       	rjmp	.+18     	; 0x5bdc <xio_pgm_init+0xe4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5bca:	80 91 e6 21 	lds	r24, 0x21E6
    5bce:	90 91 e7 21 	lds	r25, 0x21E7
    5bd2:	8f 77       	andi	r24, 0x7F	; 127
    5bd4:	80 93 e6 21 	sts	0x21E6, r24
    5bd8:	90 93 e7 21 	sts	0x21E7, r25
	}

	fpgm.idx = 0;
    5bdc:	10 92 f4 21 	sts	0x21F4, r1
    5be0:	10 92 f5 21 	sts	0x21F5, r1
	fpgm.sig = 0;
    5be4:	10 92 e8 21 	sts	0x21E8, r1
	dev_pgm.udata = &(fpgm.sig); 	// bind signals register to pgm FILE struct
    5be8:	88 ee       	ldi	r24, 0xE8	; 232
    5bea:	91 e2       	ldi	r25, 0x21	; 33
    5bec:	80 93 1a 20 	sts	0x201A, r24
    5bf0:	90 93 1b 20 	sts	0x201B, r25
	fpgm.len = sizeof(fpgm.buf);
    5bf4:	82 e0       	ldi	r24, 0x02	; 2
    5bf6:	80 93 eb 21 	sts	0x21EB, r24

	fpgm.sig_func = &xio_null_signal;			// bind null signal handler
    5bfa:	8c e1       	ldi	r24, 0x1C	; 28
    5bfc:	97 e2       	ldi	r25, 0x27	; 39
    5bfe:	80 93 ec 21 	sts	0x21EC, r24
    5c02:	90 93 ed 21 	sts	0x21ED, r25
	fpgm.line_func = &xio_null_line;			// bind null line handler
    5c06:	8f e1       	ldi	r24, 0x1F	; 31
    5c08:	97 e2       	ldi	r25, 0x27	; 39
    5c0a:	80 93 ee 21 	sts	0x21EE, r24
    5c0e:	90 93 ef 21 	sts	0x21EF, r25
}
    5c12:	08 95       	ret

00005c14 <xio_pgm_open>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

FILE * xio_pgm_open(const prog_char *addr)
{
	fpgm.flags &= XIO_FLAG_RESET_gm;			// reset the signaling bits
    5c14:	20 91 e6 21 	lds	r18, 0x21E6
    5c18:	30 91 e7 21 	lds	r19, 0x21E7
    5c1c:	3f 70       	andi	r19, 0x0F	; 15
    5c1e:	20 93 e6 21 	sts	0x21E6, r18
    5c22:	30 93 e7 21 	sts	0x21E7, r19
	fpgm.pgmbase_P = (PROGMEM char *)addr;		// might want to range check this
    5c26:	80 93 f2 21 	sts	0x21F2, r24
    5c2a:	90 93 f3 21 	sts	0x21F3, r25
	fpgm.idx = 0;
    5c2e:	10 92 f4 21 	sts	0x21F4, r1
    5c32:	10 92 f5 21 	sts	0x21F5, r1
	return(&dev_pgm);
}
    5c36:	8e e0       	ldi	r24, 0x0E	; 14
    5c38:	90 e2       	ldi	r25, 0x20	; 32
    5c3a:	08 95       	ret

00005c3c <xio_pgm_control>:
 *	XIO_SEMICOLONS <null>		Treat semicolons as line breaks
 *	XIO_NOSEMICOLONS <null>	Y	Don't treat semicolons as line breaks
 */

int8_t xio_pgm_control(const uint16_t control, const int16_t arg)
{
    5c3c:	9c 01       	movw	r18, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    5c3e:	84 ff       	sbrs	r24, 4
    5c40:	05 c0       	rjmp	.+10     	; 0x5c4c <xio_pgm_control+0x10>
		fpgm.sig_func = (fptr_int_uint8)arg;
    5c42:	60 93 ec 21 	sts	0x21EC, r22
    5c46:	70 93 ed 21 	sts	0x21ED, r23
    5c4a:	62 c0       	rjmp	.+196    	; 0x5d10 <xio_pgm_control+0xd4>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    5c4c:	85 ff       	sbrs	r24, 5
    5c4e:	05 c0       	rjmp	.+10     	; 0x5c5a <xio_pgm_control+0x1e>
		fpgm.line_func = (fptr_int_char_p)arg;
    5c50:	60 93 ee 21 	sts	0x21EE, r22
    5c54:	70 93 ef 21 	sts	0x21EF, r23
    5c58:	5b c0       	rjmp	.+182    	; 0x5d10 <xio_pgm_control+0xd4>
		return (0);
	}
	// transfer control flags to internal flag bits
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;		// set flags to defaults & initial state
    5c5a:	85 e0       	ldi	r24, 0x05	; 5
    5c5c:	90 e0       	ldi	r25, 0x00	; 0
    5c5e:	80 93 e6 21 	sts	0x21E6, r24
    5c62:	90 93 e7 21 	sts	0x21E7, r25
	if (control & XIO_ECHO) {
    5c66:	30 ff       	sbrs	r19, 0
    5c68:	06 c0       	rjmp	.+12     	; 0x5c76 <xio_pgm_control+0x3a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5c6a:	85 e1       	ldi	r24, 0x15	; 21
    5c6c:	90 e0       	ldi	r25, 0x00	; 0
    5c6e:	80 93 e6 21 	sts	0x21E6, r24
    5c72:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOECHO) {
    5c76:	31 ff       	sbrs	r19, 1
    5c78:	09 c0       	rjmp	.+18     	; 0x5c8c <xio_pgm_control+0x50>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5c7a:	80 91 e6 21 	lds	r24, 0x21E6
    5c7e:	90 91 e7 21 	lds	r25, 0x21E7
    5c82:	8f 7e       	andi	r24, 0xEF	; 239
    5c84:	80 93 e6 21 	sts	0x21E6, r24
    5c88:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_CRLF) {
    5c8c:	32 ff       	sbrs	r19, 2
    5c8e:	09 c0       	rjmp	.+18     	; 0x5ca2 <xio_pgm_control+0x66>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5c90:	80 91 e6 21 	lds	r24, 0x21E6
    5c94:	90 91 e7 21 	lds	r25, 0x21E7
    5c98:	80 62       	ori	r24, 0x20	; 32
    5c9a:	80 93 e6 21 	sts	0x21E6, r24
    5c9e:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOCRLF) {
    5ca2:	33 ff       	sbrs	r19, 3
    5ca4:	09 c0       	rjmp	.+18     	; 0x5cb8 <xio_pgm_control+0x7c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5ca6:	80 91 e6 21 	lds	r24, 0x21E6
    5caa:	90 91 e7 21 	lds	r25, 0x21E7
    5cae:	8f 7d       	andi	r24, 0xDF	; 223
    5cb0:	80 93 e6 21 	sts	0x21E6, r24
    5cb4:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_LINEMODE) {
    5cb8:	34 ff       	sbrs	r19, 4
    5cba:	09 c0       	rjmp	.+18     	; 0x5cce <xio_pgm_control+0x92>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5cbc:	80 91 e6 21 	lds	r24, 0x21E6
    5cc0:	90 91 e7 21 	lds	r25, 0x21E7
    5cc4:	80 64       	ori	r24, 0x40	; 64
    5cc6:	80 93 e6 21 	sts	0x21E6, r24
    5cca:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOLINEMODE) {
    5cce:	35 ff       	sbrs	r19, 5
    5cd0:	09 c0       	rjmp	.+18     	; 0x5ce4 <xio_pgm_control+0xa8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5cd2:	80 91 e6 21 	lds	r24, 0x21E6
    5cd6:	90 91 e7 21 	lds	r25, 0x21E7
    5cda:	8f 7b       	andi	r24, 0xBF	; 191
    5cdc:	80 93 e6 21 	sts	0x21E6, r24
    5ce0:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_SEMICOLONS) {
    5ce4:	36 ff       	sbrs	r19, 6
    5ce6:	09 c0       	rjmp	.+18     	; 0x5cfa <xio_pgm_control+0xbe>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5ce8:	80 91 e6 21 	lds	r24, 0x21E6
    5cec:	90 91 e7 21 	lds	r25, 0x21E7
    5cf0:	80 68       	ori	r24, 0x80	; 128
    5cf2:	80 93 e6 21 	sts	0x21E6, r24
    5cf6:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5cfa:	37 ff       	sbrs	r19, 7
    5cfc:	09 c0       	rjmp	.+18     	; 0x5d10 <xio_pgm_control+0xd4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5cfe:	80 91 e6 21 	lds	r24, 0x21E6
    5d02:	90 91 e7 21 	lds	r25, 0x21E7
    5d06:	8f 77       	andi	r24, 0x7F	; 127
    5d08:	80 93 e6 21 	sts	0x21E6, r24
    5d0c:	90 93 e7 21 	sts	0x21E7, r25
	}
	return (0);
}
    5d10:	80 e0       	ldi	r24, 0x00	; 0
    5d12:	08 95       	ret

00005d14 <xio_pgm_putc>:
 */

int xio_pgm_putc(const char c, FILE *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    5d14:	8f ef       	ldi	r24, 0xFF	; 255
    5d16:	9f ef       	ldi	r25, 0xFF	; 255
    5d18:	08 95       	ret

00005d1a <xio_pgm_readln>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_pgm_readln(char *buf, uint8_t len)
{
    5d1a:	9c 01       	movw	r18, r24
	if (!(fpgm.pgmbase_P)) {					// return OK if no file is open
    5d1c:	80 91 f2 21 	lds	r24, 0x21F2
    5d20:	90 91 f3 21 	lds	r25, 0x21F3
    5d24:	89 2b       	or	r24, r25
    5d26:	a9 f0       	breq	.+42     	; 0x5d52 <xio_pgm_readln+0x38>
		return (TG_OK);					 
	}
	fpgm.sig = XIO_SIG_OK;						// initialize signal
    5d28:	10 92 e8 21 	sts	0x21E8, r1
	if (fgets(buf, len, &dev_pgm) == NULL) {
    5d2c:	c9 01       	movw	r24, r18
    5d2e:	70 e0       	ldi	r23, 0x00	; 0
    5d30:	4e e0       	ldi	r20, 0x0E	; 14
    5d32:	50 e2       	ldi	r21, 0x20	; 32
    5d34:	0e 94 68 49 	call	0x92d0	; 0x92d0 <fgets>
    5d38:	89 2b       	or	r24, r25
    5d3a:	59 f4       	brne	.+22     	; 0x5d52 <xio_pgm_readln+0x38>
		fpgm.pgmbase_P = NULL;
    5d3c:	10 92 f2 21 	sts	0x21F2, r1
    5d40:	10 92 f3 21 	sts	0x21F3, r1
		clearerr(&dev_pgm);
    5d44:	8e e0       	ldi	r24, 0x0E	; 14
    5d46:	90 e2       	ldi	r25, 0x20	; 32
    5d48:	0e 94 63 49 	call	0x92c6	; 0x92c6 <clearerr>
    5d4c:	24 e0       	ldi	r18, 0x04	; 4
    5d4e:	30 e0       	ldi	r19, 0x00	; 0
    5d50:	02 c0       	rjmp	.+4      	; 0x5d56 <xio_pgm_readln+0x3c>
		return (TG_EOF);
    5d52:	20 e0       	ldi	r18, 0x00	; 0
    5d54:	30 e0       	ldi	r19, 0x00	; 0
//	return (fpgm.status);

	// return directly without dispatch through line function callback
//	fpgm.status = ((int)fpgm.line_func(buf));	// call line handler function
	return (TG_OK);
}
    5d56:	c9 01       	movw	r24, r18
    5d58:	08 95       	ret

00005d5a <xio_pgm_getc>:
 *		- Note: putc should expand newlines to <cr><lf>
 */

int xio_pgm_getc(FILE *stream)
{
	if (fpgm.flags & XIO_FLAG_EOF_bm) {
    5d5a:	40 91 e6 21 	lds	r20, 0x21E6
    5d5e:	50 91 e7 21 	lds	r21, 0x21E7
    5d62:	55 ff       	sbrs	r21, 5
    5d64:	06 c0       	rjmp	.+12     	; 0x5d72 <xio_pgm_getc+0x18>
		fpgm.sig = XIO_SIG_EOF;
    5d66:	82 e0       	ldi	r24, 0x02	; 2
    5d68:	80 93 e8 21 	sts	0x21E8, r24
    5d6c:	2e ef       	ldi	r18, 0xFE	; 254
    5d6e:	3f ef       	ldi	r19, 0xFF	; 255
    5d70:	3f c0       	rjmp	.+126    	; 0x5df0 <xio_pgm_getc+0x96>
		return (_FDEV_EOF);
	}
	if ((fpgm.c = pgm_read_byte(&fpgm.pgmbase_P[fpgm.idx])) == NUL) {
    5d72:	20 91 f4 21 	lds	r18, 0x21F4
    5d76:	30 91 f5 21 	lds	r19, 0x21F5
    5d7a:	e0 91 f2 21 	lds	r30, 0x21F2
    5d7e:	f0 91 f3 21 	lds	r31, 0x21F3
    5d82:	e2 0f       	add	r30, r18
    5d84:	f3 1f       	adc	r31, r19
    5d86:	84 91       	lpm	r24, Z+
    5d88:	80 93 e9 21 	sts	0x21E9, r24
    5d8c:	88 23       	and	r24, r24
    5d8e:	29 f4       	brne	.+10     	; 0x5d9a <xio_pgm_getc+0x40>
		fpgm.flags |= XIO_FLAG_EOF_bm;
    5d90:	50 62       	ori	r21, 0x20	; 32
    5d92:	40 93 e6 21 	sts	0x21E6, r20
    5d96:	50 93 e7 21 	sts	0x21E7, r21
	}
	++fpgm.idx;
    5d9a:	2f 5f       	subi	r18, 0xFF	; 255
    5d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    5d9e:	20 93 f4 21 	sts	0x21F4, r18
    5da2:	30 93 f5 21 	sts	0x21F5, r19
	if (!LINEMODE(fpgm.flags)) {		// processing is simple if not LINEMODE
    5da6:	90 91 e6 21 	lds	r25, 0x21E6
    5daa:	96 fd       	sbrc	r25, 6
    5dac:	07 c0       	rjmp	.+14     	; 0x5dbc <xio_pgm_getc+0x62>
		if (ECHO(fpgm.flags)) {
    5dae:	94 ff       	sbrs	r25, 4
    5db0:	1b c0       	rjmp	.+54     	; 0x5de8 <xio_pgm_getc+0x8e>
			putchar(fpgm.c);
    5db2:	60 91 55 25 	lds	r22, 0x2555
    5db6:	70 91 56 25 	lds	r23, 0x2556
    5dba:	13 c0       	rjmp	.+38     	; 0x5de2 <xio_pgm_getc+0x88>
		}
		return (fpgm.c);
	}
	// now do the LINEMODE stuff
	if (fpgm.c == NUL) {				// perform newline substitutions
    5dbc:	88 23       	and	r24, r24
    5dbe:	31 f0       	breq	.+12     	; 0x5dcc <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if (fpgm.c == '\r') {
    5dc0:	8d 30       	cpi	r24, 0x0D	; 13
    5dc2:	21 f0       	breq	.+8      	; 0x5dcc <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if ((SEMICOLONS(fpgm.flags)) && (fpgm.c == ';')) {
    5dc4:	97 ff       	sbrs	r25, 7
    5dc6:	05 c0       	rjmp	.+10     	; 0x5dd2 <xio_pgm_getc+0x78>
    5dc8:	8b 33       	cpi	r24, 0x3B	; 59
    5dca:	19 f4       	brne	.+6      	; 0x5dd2 <xio_pgm_getc+0x78>
		fpgm.c = '\n';
    5dcc:	8a e0       	ldi	r24, 0x0A	; 10
    5dce:	80 93 e9 21 	sts	0x21E9, r24
	}
	if (ECHO(fpgm.flags)) {
    5dd2:	94 ff       	sbrs	r25, 4
    5dd4:	09 c0       	rjmp	.+18     	; 0x5de8 <xio_pgm_getc+0x8e>
		putchar(fpgm.c);
    5dd6:	60 91 55 25 	lds	r22, 0x2555
    5dda:	70 91 56 25 	lds	r23, 0x2556
    5dde:	80 91 e9 21 	lds	r24, 0x21E9
    5de2:	90 e0       	ldi	r25, 0x00	; 0
    5de4:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
	}
	return (fpgm.c);
    5de8:	80 91 e9 21 	lds	r24, 0x21E9
    5dec:	28 2f       	mov	r18, r24
    5dee:	30 e0       	ldi	r19, 0x00	; 0
}
    5df0:	c9 01       	movw	r24, r18
    5df2:	08 95       	ret

00005df4 <_tg_set_source>:
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.source = d;									// d = XIO device #. See xio.h
    5df4:	80 93 fa 21 	sts	0x21FA, r24
	tg.prompts = TRUE;
    5df8:	61 e0       	ldi	r22, 0x01	; 1
    5dfa:	60 93 fc 21 	sts	0x21FC, r22

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5dfe:	42 e0       	ldi	r20, 0x02	; 2
    5e00:	40 93 52 22 	sts	0x2252, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5e04:	27 e5       	ldi	r18, 0x57	; 87
    5e06:	3f e2       	ldi	r19, 0x2F	; 47
    5e08:	20 93 54 22 	sts	0x2254, r18
    5e0c:	30 93 55 22 	sts	0x2255, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5e10:	90 e5       	ldi	r25, 0x50	; 80
    5e12:	90 93 53 22 	sts	0x2253, r25
	tg.source = d;									// d = XIO device #. See xio.h
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5e16:	40 93 a6 22 	sts	0x22A6, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5e1a:	20 93 a8 22 	sts	0x22A8, r18
    5e1e:	30 93 a9 22 	sts	0x22A9, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5e22:	90 93 a7 22 	sts	0x22A7, r25
	tg.source = d;									// d = XIO device #. See xio.h
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5e26:	40 93 fa 22 	sts	0x22FA, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5e2a:	20 93 fc 22 	sts	0x22FC, r18
    5e2e:	30 93 fd 22 	sts	0x22FD, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5e32:	90 93 fb 22 	sts	0x22FB, r25
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
		tg.dev[i].poll_func = &_tg_poll_signal;
    5e36:	20 93 50 23 	sts	0x2350, r18
    5e3a:	30 93 51 23 	sts	0x2351, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5e3e:	90 93 4f 23 	sts	0x234F, r25
	}
	tg.dev[XIO_DEV_PGM].state = TG_SRC_INACTIVE;	// program memory is an exception
    5e42:	10 92 4e 23 	sts	0x234E, r1

	// make selected device active
	tg.dev[d].state = TG_SRC_ACTIVE;	
    5e46:	48 2f       	mov	r20, r24
    5e48:	50 e0       	ldi	r21, 0x00	; 0
    5e4a:	24 e5       	ldi	r18, 0x54	; 84
    5e4c:	30 e0       	ldi	r19, 0x00	; 0
    5e4e:	42 9f       	mul	r20, r18
    5e50:	f0 01       	movw	r30, r0
    5e52:	43 9f       	mul	r20, r19
    5e54:	f0 0d       	add	r31, r0
    5e56:	52 9f       	mul	r21, r18
    5e58:	f0 0d       	add	r31, r0
    5e5a:	11 24       	eor	r1, r1
    5e5c:	e9 50       	subi	r30, 0x09	; 9
    5e5e:	fe 4d       	sbci	r31, 0xDE	; 222
    5e60:	67 83       	std	Z+7, r22	; 0x07
	tg.dev[d].poll_func = &_tg_poll_active;
    5e62:	2a e2       	ldi	r18, 0x2A	; 42
    5e64:	30 e0       	ldi	r19, 0x00	; 0
    5e66:	42 9f       	mul	r20, r18
    5e68:	f0 01       	movw	r30, r0
    5e6a:	43 9f       	mul	r20, r19
    5e6c:	f0 0d       	add	r31, r0
    5e6e:	52 9f       	mul	r21, r18
    5e70:	f0 0d       	add	r31, r0
    5e72:	11 24       	eor	r1, r1
    5e74:	ee 0f       	add	r30, r30
    5e76:	ff 1f       	adc	r31, r31
    5e78:	e7 50       	subi	r30, 0x07	; 7
    5e7a:	fe 4d       	sbci	r31, 0xDE	; 222
    5e7c:	21 e3       	ldi	r18, 0x31	; 49
    5e7e:	30 e3       	ldi	r19, 0x30	; 48
    5e80:	27 83       	std	Z+7, r18	; 0x07
    5e82:	30 87       	std	Z+8, r19	; 0x08
	if (d == XIO_DEV_PGM) {
    5e84:	84 30       	cpi	r24, 0x04	; 4
    5e86:	11 f4       	brne	.+4      	; 0x5e8c <_tg_set_source+0x98>
		tg.prompts = FALSE;							// no prompts for file input
    5e88:	10 92 fc 21 	sts	0x21FC, r1
    5e8c:	08 95       	ret

00005e8e <tg_pause>:
}

void tg_pause()
{
	return;
}
    5e8e:	08 95       	ret

00005e90 <tg_resume>:

void tg_resume()
{
	return;
}
    5e90:	08 95       	ret

00005e92 <tg_kill>:
	return (0);
}

void tg_kill()
{
	_tg_set_source(tg.source_default);	// return control to standard device
    5e92:	80 91 fb 21 	lds	r24, 0x21FB
    5e96:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <_tg_set_source>
	mc_motion_stop();					// stop computing and generating motions
    5e9a:	0e 94 46 1b 	call	0x368c	; 0x368c <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    5e9e:	0e 94 54 31 	call	0x62a8	; 0x62a8 <mv_flush>
	st_stop_steppers();					// stop the steppers
    5ea2:	0e 94 98 24 	call	0x4930	; 0x4930 <st_stop_steppers>
	return;
}
    5ea6:	08 95       	ret

00005ea8 <tg_terminate>:

void tg_terminate()
{
	tg_kill();
    5ea8:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <tg_kill>
	return;
}
    5eac:	08 95       	ret

00005eae <_tg_poll_signal>:
 *	If a signal is received it's dispatched from the low-level line reader
 *	Any line that's read is ignored (tossed)
 */

static void _tg_poll_signal(uint8_t d)
{
    5eae:	48 2f       	mov	r20, r24
	if (tg.dev[d].state != TG_SRC_SIGNAL) {			// sanity check
    5eb0:	28 2f       	mov	r18, r24
    5eb2:	30 e0       	ldi	r19, 0x00	; 0
    5eb4:	84 e5       	ldi	r24, 0x54	; 84
    5eb6:	90 e0       	ldi	r25, 0x00	; 0
    5eb8:	28 9f       	mul	r18, r24
    5eba:	f0 01       	movw	r30, r0
    5ebc:	29 9f       	mul	r18, r25
    5ebe:	f0 0d       	add	r31, r0
    5ec0:	38 9f       	mul	r19, r24
    5ec2:	f0 0d       	add	r31, r0
    5ec4:	11 24       	eor	r1, r1
    5ec6:	e9 50       	subi	r30, 0x09	; 9
    5ec8:	fe 4d       	sbci	r31, 0xDE	; 222
    5eca:	87 81       	ldd	r24, Z+7	; 0x07
    5ecc:	82 30       	cpi	r24, 0x02	; 2
    5ece:	a9 f4       	brne	.+42     	; 0x5efa <_tg_poll_signal+0x4c>
		return;
	}
	tg.status = xio_fget_ln(d, tg.dev[d].buf, tg.dev[d].len);
    5ed0:	85 e1       	ldi	r24, 0x15	; 21
    5ed2:	90 e0       	ldi	r25, 0x00	; 0
    5ed4:	28 9f       	mul	r18, r24
    5ed6:	b0 01       	movw	r22, r0
    5ed8:	29 9f       	mul	r18, r25
    5eda:	70 0d       	add	r23, r0
    5edc:	38 9f       	mul	r19, r24
    5ede:	70 0d       	add	r23, r0
    5ee0:	11 24       	eor	r1, r1
    5ee2:	66 0f       	add	r22, r22
    5ee4:	77 1f       	adc	r23, r23
    5ee6:	66 0f       	add	r22, r22
    5ee8:	77 1f       	adc	r23, r23
    5eea:	6e 5f       	subi	r22, 0xFE	; 254
    5eec:	7d 4d       	sbci	r23, 0xDD	; 221
    5eee:	84 2f       	mov	r24, r20
    5ef0:	40 85       	ldd	r20, Z+8	; 0x08
    5ef2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <xio_fget_ln>
    5ef6:	80 93 f8 21 	sts	0x21F8, r24
    5efa:	08 95       	ret

00005efc <_tg_prompt>:
	tgModeStringDirect
};

void _tg_prompt()
{
	if ((tg.prompts) && (tg.state == TG_STATE_READY_UNPROMPTED)) {
    5efc:	80 91 fc 21 	lds	r24, 0x21FC
    5f00:	88 23       	and	r24, r24
    5f02:	09 f1       	breq	.+66     	; 0x5f46 <_tg_prompt+0x4a>
    5f04:	80 91 f7 21 	lds	r24, 0x21F7
    5f08:	88 23       	and	r24, r24
    5f0a:	e9 f4       	brne	.+58     	; 0x5f46 <_tg_prompt+0x4a>
		printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5f0c:	80 91 f9 21 	lds	r24, 0x21F9
    5f10:	e8 2f       	mov	r30, r24
    5f12:	f0 e0       	ldi	r31, 0x00	; 0
    5f14:	ee 0f       	add	r30, r30
    5f16:	ff 1f       	adc	r31, r31
    5f18:	e8 57       	subi	r30, 0x78	; 120
    5f1a:	f5 4e       	sbci	r31, 0xE5	; 229
    5f1c:	25 91       	lpm	r18, Z+
    5f1e:	34 91       	lpm	r19, Z+
    5f20:	00 d0       	rcall	.+0      	; 0x5f22 <_tg_prompt+0x26>
    5f22:	0f 92       	push	r0
    5f24:	8f ec       	ldi	r24, 0xCF	; 207
    5f26:	9a e1       	ldi	r25, 0x1A	; 26
    5f28:	ed b7       	in	r30, 0x3d	; 61
    5f2a:	fe b7       	in	r31, 0x3e	; 62
    5f2c:	81 83       	std	Z+1, r24	; 0x01
    5f2e:	92 83       	std	Z+2, r25	; 0x02
    5f30:	23 83       	std	Z+3, r18	; 0x03
    5f32:	34 83       	std	Z+4, r19	; 0x04
    5f34:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
		tg.state = TG_STATE_READY_PROMPTED;
    5f38:	81 e0       	ldi	r24, 0x01	; 1
    5f3a:	80 93 f7 21 	sts	0x21F7, r24
    5f3e:	0f 90       	pop	r0
    5f40:	0f 90       	pop	r0
    5f42:	0f 90       	pop	r0
    5f44:	0f 90       	pop	r0
	}
	// bastardized prompts for file sources
	if ((!tg.prompts) && (tg.state == TG_STATE_READY_UNPROMPTED)) {
    5f46:	80 91 fc 21 	lds	r24, 0x21FC
    5f4a:	88 23       	and	r24, r24
    5f4c:	f1 f4       	brne	.+60     	; 0x5f8a <_tg_prompt+0x8e>
    5f4e:	80 91 f7 21 	lds	r24, 0x21F7
    5f52:	88 23       	and	r24, r24
    5f54:	d1 f4       	brne	.+52     	; 0x5f8a <_tg_prompt+0x8e>
		printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5f56:	80 91 f9 21 	lds	r24, 0x21F9
    5f5a:	e8 2f       	mov	r30, r24
    5f5c:	f0 e0       	ldi	r31, 0x00	; 0
    5f5e:	ee 0f       	add	r30, r30
    5f60:	ff 1f       	adc	r31, r31
    5f62:	e8 57       	subi	r30, 0x78	; 120
    5f64:	f5 4e       	sbci	r31, 0xE5	; 229
    5f66:	25 91       	lpm	r18, Z+
    5f68:	34 91       	lpm	r19, Z+
    5f6a:	00 d0       	rcall	.+0      	; 0x5f6c <_tg_prompt+0x70>
    5f6c:	0f 92       	push	r0
    5f6e:	81 ec       	ldi	r24, 0xC1	; 193
    5f70:	9a e1       	ldi	r25, 0x1A	; 26
    5f72:	ed b7       	in	r30, 0x3d	; 61
    5f74:	fe b7       	in	r31, 0x3e	; 62
    5f76:	81 83       	std	Z+1, r24	; 0x01
    5f78:	92 83       	std	Z+2, r25	; 0x02
    5f7a:	23 83       	std	Z+3, r18	; 0x03
    5f7c:	34 83       	std	Z+4, r19	; 0x04
    5f7e:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
    5f82:	0f 90       	pop	r0
    5f84:	0f 90       	pop	r0
    5f86:	0f 90       	pop	r0
    5f88:	0f 90       	pop	r0
    5f8a:	08 95       	ret

00005f8c <tg_signal>:
 * tg_signal() - default signal handler to bind to the line readers
 */

int tg_signal(uint8_t sig)
{
	switch (sig) {
    5f8c:	84 30       	cpi	r24, 0x04	; 4
    5f8e:	99 f0       	breq	.+38     	; 0x5fb6 <tg_signal+0x2a>
    5f90:	85 30       	cpi	r24, 0x05	; 5
    5f92:	89 f0       	breq	.+34     	; 0x5fb6 <tg_signal+0x2a>
    5f94:	82 30       	cpi	r24, 0x02	; 2
    5f96:	89 f4       	brne	.+34     	; 0x5fba <tg_signal+0x2e>
		case XIO_SIG_OK: break;
 		case XIO_SIG_EOL: break;

		case XIO_SIG_EOF:
			printf_P(PSTR("\r\nEnd of file encountered\r\n"));
    5f98:	0f 92       	push	r0
    5f9a:	0f 92       	push	r0
    5f9c:	85 ea       	ldi	r24, 0xA5	; 165
    5f9e:	9a e1       	ldi	r25, 0x1A	; 26
    5fa0:	ed b7       	in	r30, 0x3d	; 61
    5fa2:	fe b7       	in	r31, 0x3e	; 62
    5fa4:	81 83       	std	Z+1, r24	; 0x01
    5fa6:	92 83       	std	Z+2, r25	; 0x02
    5fa8:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
			_tg_prompt();
    5fac:	0f 90       	pop	r0
    5fae:	0f 90       	pop	r0
    5fb0:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <_tg_prompt>
    5fb4:	02 c0       	rjmp	.+4      	; 0x5fba <tg_signal+0x2e>
	return;
}

void tg_terminate()
{
	tg_kill();
    5fb6:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <tg_kill>
		case XIO_SIG_SHIFTOUT: break;
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
}
    5fba:	80 e0       	ldi	r24, 0x00	; 0
    5fbc:	90 e0       	ldi	r25, 0x00	; 0
    5fbe:	08 95       	ret

00005fc0 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    5fc0:	fc 01       	movw	r30, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    5fc2:	80 91 f9 21 	lds	r24, 0x21F9
    5fc6:	88 23       	and	r24, r24
    5fc8:	79 f5       	brne	.+94     	; 0x6028 <__stack+0x29>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    5fca:	90 81       	ld	r25, Z
    5fcc:	89 2f       	mov	r24, r25
    5fce:	81 56       	subi	r24, 0x61	; 97
    5fd0:	8a 31       	cpi	r24, 0x1A	; 26
    5fd2:	10 f4       	brcc	.+4      	; 0x5fd8 <tg_parser+0x18>
			buf[0] = buf[0]-'a'+'A';
    5fd4:	90 52       	subi	r25, 0x20	; 32
    5fd6:	90 83       	st	Z, r25
		}
		switch (buf[0]) {
    5fd8:	80 81       	ld	r24, Z
    5fda:	86 34       	cpi	r24, 0x46	; 70
    5fdc:	b1 f0       	breq	.+44     	; 0x600a <__stack+0xb>
    5fde:	87 34       	cpi	r24, 0x47	; 71
    5fe0:	38 f4       	brcc	.+14     	; 0x5ff0 <tg_parser+0x30>
    5fe2:	83 34       	cpi	r24, 0x43	; 67
    5fe4:	61 f0       	breq	.+24     	; 0x5ffe <tg_parser+0x3e>
    5fe6:	84 34       	cpi	r24, 0x44	; 68
    5fe8:	71 f0       	breq	.+28     	; 0x6006 <__stack+0x7>
    5fea:	8f 33       	cpi	r24, 0x3F	; 63
    5fec:	d9 f4       	brne	.+54     	; 0x6024 <__stack+0x25>
    5fee:	07 c0       	rjmp	.+14     	; 0x5ffe <tg_parser+0x3e>
    5ff0:	87 34       	cpi	r24, 0x47	; 71
    5ff2:	19 f0       	breq	.+6      	; 0x5ffa <tg_parser+0x3a>
    5ff4:	8d 54       	subi	r24, 0x4D	; 77
    5ff6:	82 30       	cpi	r24, 0x02	; 2
    5ff8:	a8 f4       	brcc	.+42     	; 0x6024 <__stack+0x25>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5ffa:	82 e0       	ldi	r24, 0x02	; 2
    5ffc:	01 c0       	rjmp	.+2      	; 0x6000 <__stack+0x1>
	if (tg.mode == TG_CONTROL_MODE) {
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
			buf[0] = buf[0]-'a'+'A';
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    5ffe:	81 e0       	ldi	r24, 0x01	; 1
    6000:	80 93 f9 21 	sts	0x21F9, r24
    6004:	11 c0       	rjmp	.+34     	; 0x6028 <__stack+0x29>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    6006:	83 e0       	ldi	r24, 0x03	; 3
    6008:	fb cf       	rjmp	.-10     	; 0x6000 <__stack+0x1>
//	xio_pgm_open(PGMFILE(&square_circle_test100));
//	xio_pgm_open(PGMFILE(&spiral_test50a));
//	xio_pgm_open(PGMFILE(&spiral_test5));

//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
	xio_pgm_open(PGMFILE(&zoetrope));
    600a:	8b eb       	ldi	r24, 0xBB	; 187
    600c:	9c e0       	ldi	r25, 0x0C	; 12
    600e:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <xio_pgm_open>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    6012:	82 e0       	ldi	r24, 0x02	; 2
    6014:	80 93 f9 21 	sts	0x21F9, r24
//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
	xio_pgm_open(PGMFILE(&zoetrope));

	// set mode and source for file mode
	_tg_set_mode(TG_GCODE_MODE);
	_tg_set_source(XIO_DEV_PGM);
    6018:	84 e0       	ldi	r24, 0x04	; 4
    601a:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <_tg_set_source>
    601e:	20 e0       	ldi	r18, 0x00	; 0
    6020:	30 e0       	ldi	r19, 0x00	; 0
    6022:	1d c0       	rjmp	.+58     	; 0x605e <__stack+0x5f>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    6024:	10 92 f9 21 	sts	0x21F9, r1
			case 'F': return (_tg_test_file());
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    6028:	10 92 f8 21 	sts	0x21F8, r1
	switch (tg.mode) {
    602c:	80 91 f9 21 	lds	r24, 0x21F9
    6030:	82 30       	cpi	r24, 0x02	; 2
    6032:	41 f0       	breq	.+16     	; 0x6044 <__stack+0x45>
    6034:	83 30       	cpi	r24, 0x03	; 3
    6036:	51 f0       	breq	.+20     	; 0x604c <__stack+0x4d>
    6038:	81 30       	cpi	r24, 0x01	; 1
    603a:	69 f4       	brne	.+26     	; 0x6056 <__stack+0x57>
//		case TG_CONTROL_MODE: 
//			break;

		case TG_CONFIG_MODE:
			tg.status = cfg_parse(buf);
    603c:	cf 01       	movw	r24, r30
    603e:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <cfg_parse>
    6042:	07 c0       	rjmp	.+14     	; 0x6052 <__stack+0x53>
			break;

		case TG_GCODE_MODE: 
			tg.status = gc_gcode_parser(buf);
    6044:	cf 01       	movw	r24, r30
    6046:	0e 94 98 15 	call	0x2b30	; 0x2b30 <gc_gcode_parser>
    604a:	03 c0       	rjmp	.+6      	; 0x6052 <__stack+0x53>
			break;

		case TG_DIRECT_DRIVE_MODE:
			tg.status = dd_parser(buf);
    604c:	cf 01       	movw	r24, r30
    604e:	0e 94 09 31 	call	0x6212	; 0x6212 <dd_parser>
    6052:	80 93 f8 21 	sts	0x21F8, r24
			break;
	}
	return (tg.status);
    6056:	80 91 f8 21 	lds	r24, 0x21F8
    605a:	28 2f       	mov	r18, r24
    605c:	30 e0       	ldi	r19, 0x00	; 0
}
    605e:	c9 01       	movw	r24, r18
    6060:	08 95       	ret

00006062 <_tg_poll_active>:
/* 
 * _tg_poll_active() - Perform a non-blocking line read from active input device
 */

static void _tg_poll_active(uint8_t d)
{
    6062:	cf 93       	push	r28
    6064:	df 93       	push	r29
    6066:	48 2f       	mov	r20, r24
	if (tg.dev[d].state != TG_SRC_ACTIVE) {			// sanity check
    6068:	28 2f       	mov	r18, r24
    606a:	30 e0       	ldi	r19, 0x00	; 0
    606c:	84 e5       	ldi	r24, 0x54	; 84
    606e:	90 e0       	ldi	r25, 0x00	; 0
    6070:	28 9f       	mul	r18, r24
    6072:	f0 01       	movw	r30, r0
    6074:	29 9f       	mul	r18, r25
    6076:	f0 0d       	add	r31, r0
    6078:	38 9f       	mul	r19, r24
    607a:	f0 0d       	add	r31, r0
    607c:	11 24       	eor	r1, r1
    607e:	e9 50       	subi	r30, 0x09	; 9
    6080:	fe 4d       	sbci	r31, 0xDE	; 222
    6082:	97 81       	ldd	r25, Z+7	; 0x07
    6084:	91 30       	cpi	r25, 0x01	; 1
    6086:	09 f0       	breq	.+2      	; 0x608a <_tg_poll_active+0x28>
    6088:	5b c0       	rjmp	.+182    	; 0x6140 <_tg_poll_active+0xde>
		return;
	}

	// special handling for file sources
	if (tg.source == XIO_DEV_PGM) {
    608a:	80 91 fa 21 	lds	r24, 0x21FA
    608e:	84 30       	cpi	r24, 0x04	; 4
    6090:	39 f4       	brne	.+14     	; 0x60a0 <_tg_poll_active+0x3e>
		if (tg.state == TG_STATE_READY_UNPROMPTED) {
    6092:	80 91 f7 21 	lds	r24, 0x21F7
    6096:	88 23       	and	r24, r24
    6098:	09 f0       	breq	.+2      	; 0x609c <_tg_poll_active+0x3a>
    609a:	52 c0       	rjmp	.+164    	; 0x6140 <_tg_poll_active+0xde>
			tg.state = TG_STATE_READY_PROMPTED; 	// issue "virtual prompt"
    609c:	90 93 f7 21 	sts	0x21F7, r25
			return;									// not ready for next line
		}
	}

	// read input line or return if not a completed line
	if ((tg.status = xio_fget_ln(d, tg.dev[d].buf, tg.dev[d].len)) == TG_OK) {
    60a0:	85 e1       	ldi	r24, 0x15	; 21
    60a2:	90 e0       	ldi	r25, 0x00	; 0
    60a4:	28 9f       	mul	r18, r24
    60a6:	e0 01       	movw	r28, r0
    60a8:	29 9f       	mul	r18, r25
    60aa:	d0 0d       	add	r29, r0
    60ac:	38 9f       	mul	r19, r24
    60ae:	d0 0d       	add	r29, r0
    60b0:	11 24       	eor	r1, r1
    60b2:	cc 0f       	add	r28, r28
    60b4:	dd 1f       	adc	r29, r29
    60b6:	cc 0f       	add	r28, r28
    60b8:	dd 1f       	adc	r29, r29
    60ba:	ce 5f       	subi	r28, 0xFE	; 254
    60bc:	dd 4d       	sbci	r29, 0xDD	; 221
    60be:	84 e5       	ldi	r24, 0x54	; 84
    60c0:	90 e0       	ldi	r25, 0x00	; 0
    60c2:	28 9f       	mul	r18, r24
    60c4:	f0 01       	movw	r30, r0
    60c6:	29 9f       	mul	r18, r25
    60c8:	f0 0d       	add	r31, r0
    60ca:	38 9f       	mul	r19, r24
    60cc:	f0 0d       	add	r31, r0
    60ce:	11 24       	eor	r1, r1
    60d0:	e9 50       	subi	r30, 0x09	; 9
    60d2:	fe 4d       	sbci	r31, 0xDE	; 222
    60d4:	84 2f       	mov	r24, r20
    60d6:	be 01       	movw	r22, r28
    60d8:	40 85       	ldd	r20, Z+8	; 0x08
    60da:	0e 94 22 27 	call	0x4e44	; 0x4e44 <xio_fget_ln>
    60de:	80 93 f8 21 	sts	0x21F8, r24
    60e2:	88 23       	and	r24, r24
    60e4:	29 f4       	brne	.+10     	; 0x60f0 <_tg_poll_active+0x8e>
		tg.status = tg_parser(tg.dev[d].buf);	// dispatch to parser
    60e6:	ce 01       	movw	r24, r28
    60e8:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <tg_parser>
    60ec:	80 93 f8 21 	sts	0x21F8, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_STATE_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    60f0:	80 91 f8 21 	lds	r24, 0x21F8
    60f4:	82 30       	cpi	r24, 0x02	; 2
    60f6:	61 f0       	breq	.+24     	; 0x6110 <_tg_poll_active+0xae>
    60f8:	83 30       	cpi	r24, 0x03	; 3
    60fa:	28 f4       	brcc	.+10     	; 0x6106 <_tg_poll_active+0xa4>
    60fc:	88 23       	and	r24, r24
    60fe:	f1 f0       	breq	.+60     	; 0x613c <_tg_poll_active+0xda>
    6100:	81 30       	cpi	r24, 0x01	; 1
    6102:	e1 f4       	brne	.+56     	; 0x613c <_tg_poll_active+0xda>
    6104:	1d c0       	rjmp	.+58     	; 0x6140 <_tg_poll_active+0xde>
    6106:	83 30       	cpi	r24, 0x03	; 3
    6108:	31 f0       	breq	.+12     	; 0x6116 <_tg_poll_active+0xb4>
    610a:	84 30       	cpi	r24, 0x04	; 4
    610c:	b9 f4       	brne	.+46     	; 0x613c <_tg_poll_active+0xda>
    610e:	06 c0       	rjmp	.+12     	; 0x611c <_tg_poll_active+0xba>
		case TG_NOOP: {
			break;
		}

		case TG_CONTINUE: { 						// returned without a new line
			tg.state = TG_STATE_READING_COMMAND; 
    6110:	80 93 f7 21 	sts	0x21F7, r24
    6114:	15 c0       	rjmp	.+42     	; 0x6140 <_tg_poll_active+0xde>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    6116:	10 92 f9 21 	sts	0x21F9, r1
    611a:	10 c0       	rjmp	.+32     	; 0x613c <_tg_poll_active+0xda>
			tg.state = TG_STATE_READY_UNPROMPTED;
			break;
		}
					  	
		case TG_EOF: {								// file devices only
			printf_P(PSTR("End of command file\n"));
    611c:	0f 92       	push	r0
    611e:	0f 92       	push	r0
    6120:	80 e9       	ldi	r24, 0x90	; 144
    6122:	9a e1       	ldi	r25, 0x1A	; 26
    6124:	ed b7       	in	r30, 0x3d	; 61
    6126:	fe b7       	in	r31, 0x3e	; 62
    6128:	81 83       	std	Z+1, r24	; 0x01
    612a:	92 83       	std	Z+2, r25	; 0x02
    612c:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
			_tg_set_source(tg.source_default);		// reset to default src
    6130:	0f 90       	pop	r0
    6132:	0f 90       	pop	r0
    6134:	80 91 fb 21 	lds	r24, 0x21FB
    6138:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <_tg_set_source>
			tg.state = TG_STATE_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_STATE_READY_UNPROMPTED;	// traps various error returns
    613c:	10 92 f7 21 	sts	0x21F7, r1
		}
	}
}
    6140:	df 91       	pop	r29
    6142:	cf 91       	pop	r28
    6144:	08 95       	ret

00006146 <tg_controller>:
 *	more to the point - a hack. If the flow of control gets much more complicated 
 *	it will make sense to replace this section with an event driven dispatcher.
 */

void tg_controller()
{
    6146:	cf 93       	push	r28
    6148:	df 93       	push	r29
//	uint8_t i = 1;

	_tg_prompt();		// Send a prompt - but only if controller is ready for input
    614a:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <_tg_prompt>

	if ((tg.status = mc_line_continuation()) == TG_OK) { // Run the line generator 
    614e:	0e 94 ae 1b 	call	0x375c	; 0x375c <mc_line_continuation>
    6152:	80 93 f8 21 	sts	0x21F8, r24
    6156:	88 23       	and	r24, r24
    6158:	31 f0       	breq	.+12     	; 0x6166 <tg_controller+0x20>
		tg.state = TG_STATE_READY_UNPROMPTED;
		return;
	}

	if ((tg.status = mc_arc_continuation()) == TG_OK) {	 // Run the arc generator 
    615a:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <mc_arc_continuation>
    615e:	80 93 f8 21 	sts	0x21F8, r24
    6162:	88 23       	and	r24, r24
    6164:	19 f4       	brne	.+6      	; 0x616c <tg_controller+0x26>
		tg.state = TG_STATE_READY_UNPROMPTED;
    6166:	10 92 f7 21 	sts	0x21F7, r1
    616a:	21 c0       	rjmp	.+66     	; 0x61ae <tg_controller+0x68>
		return;
	}

	for (tg.i=1; tg.i < XIO_DEV_MAX; tg.i++) {	// Scan all input devices 
    616c:	81 e0       	ldi	r24, 0x01	; 1
    616e:	80 93 fd 21 	sts	0x21FD, r24
		tg.dev[tg.i].poll_func(tg.i);			//   ...(except /dev/null)
    6172:	ca e2       	ldi	r28, 0x2A	; 42
    6174:	d0 e0       	ldi	r29, 0x00	; 0
    6176:	17 c0       	rjmp	.+46     	; 0x61a6 <tg_controller+0x60>
    6178:	82 2f       	mov	r24, r18
    617a:	90 e0       	ldi	r25, 0x00	; 0
    617c:	8c 9f       	mul	r24, r28
    617e:	f0 01       	movw	r30, r0
    6180:	8d 9f       	mul	r24, r29
    6182:	f0 0d       	add	r31, r0
    6184:	9c 9f       	mul	r25, r28
    6186:	f0 0d       	add	r31, r0
    6188:	11 24       	eor	r1, r1
    618a:	ee 0f       	add	r30, r30
    618c:	ff 1f       	adc	r31, r31
    618e:	e7 50       	subi	r30, 0x07	; 7
    6190:	fe 4d       	sbci	r31, 0xDE	; 222
    6192:	07 80       	ldd	r0, Z+7	; 0x07
    6194:	f0 85       	ldd	r31, Z+8	; 0x08
    6196:	e0 2d       	mov	r30, r0
    6198:	82 2f       	mov	r24, r18
    619a:	19 95       	eicall
	if ((tg.status = mc_arc_continuation()) == TG_OK) {	 // Run the arc generator 
		tg.state = TG_STATE_READY_UNPROMPTED;
		return;
	}

	for (tg.i=1; tg.i < XIO_DEV_MAX; tg.i++) {	// Scan all input devices 
    619c:	80 91 fd 21 	lds	r24, 0x21FD
    61a0:	8f 5f       	subi	r24, 0xFF	; 255
    61a2:	80 93 fd 21 	sts	0x21FD, r24
    61a6:	20 91 fd 21 	lds	r18, 0x21FD
    61aa:	25 30       	cpi	r18, 0x05	; 5
    61ac:	28 f3       	brcs	.-54     	; 0x6178 <tg_controller+0x32>
		tg.dev[tg.i].poll_func(tg.i);			//   ...(except /dev/null)
	}
}
    61ae:	df 91       	pop	r29
    61b0:	cf 91       	pop	r28
    61b2:	08 95       	ret

000061b4 <tg_init>:
/*
 * tg_init()
 */

void tg_init() 
{
    61b4:	0f 93       	push	r16
    61b6:	1f 93       	push	r17
	xio_control(XIO_DEV_USB, XIO_SIG_FUNC, (int)&tg_signal); // bind sig handler
    61b8:	06 ec       	ldi	r16, 0xC6	; 198
    61ba:	1f e2       	ldi	r17, 0x2F	; 47
    61bc:	81 e0       	ldi	r24, 0x01	; 1
    61be:	60 e1       	ldi	r22, 0x10	; 16
    61c0:	70 e0       	ldi	r23, 0x00	; 0
    61c2:	a8 01       	movw	r20, r16
    61c4:	0e 94 41 27 	call	0x4e82	; 0x4e82 <xio_control>
	xio_control(XIO_DEV_RS485, XIO_SIG_FUNC, (int)&tg_signal);
    61c8:	82 e0       	ldi	r24, 0x02	; 2
    61ca:	60 e1       	ldi	r22, 0x10	; 16
    61cc:	70 e0       	ldi	r23, 0x00	; 0
    61ce:	a8 01       	movw	r20, r16
    61d0:	0e 94 41 27 	call	0x4e82	; 0x4e82 <xio_control>
//	xio_control(XIO_DEV_AUX, XIO_SIG_FUNC, (int)&tg_signal);

	tg.source_default = XIO_DEV_USB; 
    61d4:	81 e0       	ldi	r24, 0x01	; 1
    61d6:	80 93 fb 21 	sts	0x21FB, r24
	tg.state = TG_STATE_READY_UNPROMPTED;
    61da:	10 92 f7 21 	sts	0x21F7, r1
	_tg_set_source(tg.source_default);		// set initial active source
    61de:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <_tg_set_source>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    61e2:	10 92 f9 21 	sts	0x21F9, r1
	tg.source_default = XIO_DEV_USB; 
	tg.state = TG_STATE_READY_UNPROMPTED;
	_tg_set_source(tg.source_default);		// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode

	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    61e6:	00 d0       	rcall	.+0      	; 0x61e8 <tg_init+0x34>
    61e8:	0f 92       	push	r0
    61ea:	87 ee       	ldi	r24, 0xE7	; 231
    61ec:	9a e1       	ldi	r25, 0x1A	; 26
    61ee:	ed b7       	in	r30, 0x3d	; 61
    61f0:	fe b7       	in	r31, 0x3e	; 62
    61f2:	81 83       	std	Z+1, r24	; 0x01
    61f4:	92 83       	std	Z+2, r25	; 0x02
    61f6:	8d ed       	ldi	r24, 0xDD	; 221
    61f8:	9a e1       	ldi	r25, 0x1A	; 26
    61fa:	83 83       	std	Z+3, r24	; 0x03
    61fc:	94 83       	std	Z+4, r25	; 0x04
    61fe:	0e 94 c7 49 	call	0x938e	; 0x938e <printf_P>
    6202:	0f 90       	pop	r0
    6204:	0f 90       	pop	r0
    6206:	0f 90       	pop	r0
    6208:	0f 90       	pop	r0
}
    620a:	1f 91       	pop	r17
    620c:	0f 91       	pop	r16
    620e:	08 95       	ret

00006210 <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    6210:	08 95       	ret

00006212 <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    6212:	80 e0       	ldi	r24, 0x00	; 0
    6214:	90 e0       	ldi	r25, 0x00	; 0
    6216:	08 95       	ret

00006218 <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    6218:	10 92 a2 23 	sts	0x23A2, r1
	mv.move_buffer_tail = 0;
    621c:	10 92 a3 23 	sts	0x23A3, r1
}
    6220:	08 95       	ret

00006222 <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    6222:	90 91 a2 23 	lds	r25, 0x23A2
    6226:	80 91 a3 23 	lds	r24, 0x23A3
    622a:	98 17       	cp	r25, r24
    622c:	19 f4       	brne	.+6      	; 0x6234 <mv_dequeue_move_buffer+0x12>
    622e:	20 e0       	ldi	r18, 0x00	; 0
    6230:	30 e0       	ldi	r19, 0x00	; 0
    6232:	17 c0       	rjmp	.+46     	; 0x6262 <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    6234:	90 91 a3 23 	lds	r25, 0x23A3
    6238:	8b e1       	ldi	r24, 0x1B	; 27
    623a:	98 9f       	mul	r25, r24
    623c:	90 01       	movw	r18, r0
    623e:	11 24       	eor	r1, r1
    6240:	2a 55       	subi	r18, 0x5A	; 90
    6242:	3c 4d       	sbci	r19, 0xDC	; 220
    6244:	20 93 a4 23 	sts	0x23A4, r18
    6248:	30 93 a5 23 	sts	0x23A5, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    624c:	80 91 a3 23 	lds	r24, 0x23A3
    6250:	8f 5f       	subi	r24, 0xFF	; 255
    6252:	80 93 a3 23 	sts	0x23A3, r24
    6256:	80 91 a3 23 	lds	r24, 0x23A3
    625a:	84 30       	cpi	r24, 0x04	; 4
    625c:	10 f0       	brcs	.+4      	; 0x6262 <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    625e:	10 92 a3 23 	sts	0x23A3, r1
	}
	return (mv.p); 
}
    6262:	c9 01       	movw	r24, r18
    6264:	08 95       	ret

00006266 <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    6266:	90 91 a2 23 	lds	r25, 0x23A2
    626a:	9f 5f       	subi	r25, 0xFF	; 255
    626c:	94 30       	cpi	r25, 0x04	; 4
    626e:	08 f0       	brcs	.+2      	; 0x6272 <mv_test_move_buffer_full+0xc>
    6270:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    6272:	80 91 a3 23 	lds	r24, 0x23A3
    6276:	20 e0       	ldi	r18, 0x00	; 0
    6278:	89 17       	cp	r24, r25
    627a:	09 f4       	brne	.+2      	; 0x627e <mv_test_move_buffer_full+0x18>
    627c:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    627e:	82 2f       	mov	r24, r18
    6280:	08 95       	ret

00006282 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    6282:	0b c0       	rjmp	.+22     	; 0x629a <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    6284:	80 91 48 00 	lds	r24, 0x0048
    6288:	81 60       	ori	r24, 0x01	; 1
    628a:	80 93 48 00 	sts	0x0048, r24
    628e:	88 95       	sleep
    6290:	80 91 48 00 	lds	r24, 0x0048
    6294:	8e 7f       	andi	r24, 0xFE	; 254
    6296:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    629a:	90 91 a3 23 	lds	r25, 0x23A3
    629e:	80 91 a2 23 	lds	r24, 0x23A2
    62a2:	98 17       	cp	r25, r24
    62a4:	79 f7       	brne	.-34     	; 0x6284 <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    62a6:	08 95       	ret

000062a8 <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    62a8:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    62aa:	80 91 a2 23 	lds	r24, 0x23A2
    62ae:	80 93 a3 23 	sts	0x23A3, r24
	mv.p = NULL;
    62b2:	10 92 a4 23 	sts	0x23A4, r1
    62b6:	10 92 a5 23 	sts	0x23A5, r1
	sei();
    62ba:	78 94       	sei
}
    62bc:	08 95       	ret

000062be <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    62be:	2f 92       	push	r2
    62c0:	4f 92       	push	r4
    62c2:	5f 92       	push	r5
    62c4:	6f 92       	push	r6
    62c6:	7f 92       	push	r7
    62c8:	8f 92       	push	r8
    62ca:	9f 92       	push	r9
    62cc:	af 92       	push	r10
    62ce:	bf 92       	push	r11
    62d0:	cf 92       	push	r12
    62d2:	df 92       	push	r13
    62d4:	ef 92       	push	r14
    62d6:	ff 92       	push	r15
    62d8:	0f 93       	push	r16
    62da:	1f 93       	push	r17
    62dc:	df 93       	push	r29
    62de:	cf 93       	push	r28
    62e0:	cd b7       	in	r28, 0x3d	; 61
    62e2:	de b7       	in	r29, 0x3e	; 62
    62e4:	2e 97       	sbiw	r28, 0x0e	; 14
    62e6:	cd bf       	out	0x3d, r28	; 61
    62e8:	de bf       	out	0x3e, r29	; 62
    62ea:	3b 01       	movw	r6, r22
    62ec:	4c 01       	movw	r8, r24
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Bail on a zero length line (perhaps test for abs val < min line length)
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    62ee:	61 15       	cp	r22, r1
    62f0:	71 05       	cpc	r23, r1
    62f2:	81 05       	cpc	r24, r1
    62f4:	91 05       	cpc	r25, r1
    62f6:	61 f4       	brne	.+24     	; 0x6310 <mv_queue_move_buffer+0x52>
    62f8:	21 15       	cp	r18, r1
    62fa:	31 05       	cpc	r19, r1
    62fc:	41 05       	cpc	r20, r1
    62fe:	51 05       	cpc	r21, r1
    6300:	39 f4       	brne	.+14     	; 0x6310 <mv_queue_move_buffer+0x52>
    6302:	e1 14       	cp	r14, r1
    6304:	f1 04       	cpc	r15, r1
    6306:	01 05       	cpc	r16, r1
    6308:	11 05       	cpc	r17, r1
    630a:	11 f4       	brne	.+4      	; 0x6310 <mv_queue_move_buffer+0x52>
    630c:	89 e0       	ldi	r24, 0x09	; 9
    630e:	e2 c0       	rjmp	.+452    	; 0x64d4 <mv_queue_move_buffer+0x216>
		return (TG_ZERO_LENGTH_LINE);
	}

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    6310:	20 90 a2 23 	lds	r2, 0x23A2
    6314:	23 94       	inc	r2
    6316:	63 e0       	ldi	r22, 0x03	; 3
    6318:	62 15       	cp	r22, r2
    631a:	08 f4       	brcc	.+2      	; 0x631e <mv_queue_move_buffer+0x60>
    631c:	22 24       	eor	r2, r2
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    631e:	80 91 a3 23 	lds	r24, 0x23A3
    6322:	82 15       	cp	r24, r2
    6324:	11 f4       	brne	.+4      	; 0x632a <mv_queue_move_buffer+0x6c>
    6326:	86 e0       	ldi	r24, 0x06	; 6
    6328:	d5 c0       	rjmp	.+426    	; 0x64d4 <mv_queue_move_buffer+0x216>
		return (TG_BUFFER_FULL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    632a:	e0 91 a2 23 	lds	r30, 0x23A2
    632e:	8b e1       	ldi	r24, 0x1B	; 27
    6330:	e8 9f       	mul	r30, r24
    6332:	f0 01       	movw	r30, r0
    6334:	11 24       	eor	r1, r1
    6336:	ea 55       	subi	r30, 0x5A	; 90
    6338:	fc 4d       	sbci	r31, 0xDC	; 220
    633a:	e0 93 a4 23 	sts	0x23A4, r30
    633e:	f0 93 a5 23 	sts	0x23A5, r31
	mv.p->a[X_AXIS].steps = steps_x;
    6342:	60 82       	st	Z, r6
    6344:	71 82       	std	Z+1, r7	; 0x01
    6346:	82 82       	std	Z+2, r8	; 0x02
    6348:	93 82       	std	Z+3, r9	; 0x03
	mv.p->a[Y_AXIS].steps = steps_y;
    634a:	21 87       	std	Z+9, r18	; 0x09
    634c:	32 87       	std	Z+10, r19	; 0x0a
    634e:	43 87       	std	Z+11, r20	; 0x0b
    6350:	54 87       	std	Z+12, r21	; 0x0c
	mv.p->a[Z_AXIS].steps = steps_z;
    6352:	e2 8a       	std	Z+18, r14	; 0x12
    6354:	f3 8a       	std	Z+19, r15	; 0x13
    6356:	04 8b       	std	Z+20, r16	; 0x14
    6358:	15 8b       	std	Z+21, r17	; 0x15

	ticks = microseconds * TICKS_PER_MICROSECOND;
    635a:	65 e0       	ldi	r22, 0x05	; 5
    635c:	aa 0c       	add	r10, r10
    635e:	bb 1c       	adc	r11, r11
    6360:	cc 1c       	adc	r12, r12
    6362:	dd 1c       	adc	r13, r13
    6364:	6a 95       	dec	r22
    6366:	d1 f7       	brne	.-12     	; 0x635c <mv_queue_move_buffer+0x9e>
    6368:	a6 01       	movw	r20, r12
    636a:	95 01       	movw	r18, r10
    636c:	60 e0       	ldi	r22, 0x00	; 0
    636e:	70 e0       	ldi	r23, 0x00	; 0
    6370:	80 e0       	ldi	r24, 0x00	; 0
    6372:	90 e0       	ldi	r25, 0x00	; 0
    6374:	ab 82       	std	Y+3, r10	; 0x03
    6376:	3c 83       	std	Y+4, r19	; 0x04
    6378:	4d 83       	std	Y+5, r20	; 0x05
    637a:	5e 83       	std	Y+6, r21	; 0x06
    637c:	6f 83       	std	Y+7, r22	; 0x07
    637e:	78 87       	std	Y+8, r23	; 0x08
    6380:	89 87       	std	Y+9, r24	; 0x09
    6382:	9a 87       	std	Y+10, r25	; 0x0a
    6384:	1d 86       	std	Y+13, r1	; 0x0d
    6386:	1e 86       	std	Y+14, r1	; 0x0e

	// load axis values
	for (i = X_AXIS; i <= Z_AXIS; i++) {

		if (mv.p->a[i].steps) { 				// skip axes with zero steps
    6388:	20 91 a4 23 	lds	r18, 0x23A4
    638c:	30 91 a5 23 	lds	r19, 0x23A5
    6390:	ed 85       	ldd	r30, Y+13	; 0x0d
    6392:	fe 85       	ldd	r31, Y+14	; 0x0e
    6394:	53 e0       	ldi	r21, 0x03	; 3
    6396:	ee 0f       	add	r30, r30
    6398:	ff 1f       	adc	r31, r31
    639a:	5a 95       	dec	r21
    639c:	e1 f7       	brne	.-8      	; 0x6396 <mv_queue_move_buffer+0xd8>
    639e:	4d 85       	ldd	r20, Y+13	; 0x0d
    63a0:	5e 85       	ldd	r21, Y+14	; 0x0e
    63a2:	e4 0f       	add	r30, r20
    63a4:	f5 1f       	adc	r31, r21
    63a6:	e2 0f       	add	r30, r18
    63a8:	f3 1f       	adc	r31, r19
    63aa:	80 81       	ld	r24, Z
    63ac:	91 81       	ldd	r25, Z+1	; 0x01
    63ae:	a2 81       	ldd	r26, Z+2	; 0x02
    63b0:	b3 81       	ldd	r27, Z+3	; 0x03
    63b2:	00 97       	sbiw	r24, 0x00	; 0
    63b4:	a1 05       	cpc	r26, r1
    63b6:	b1 05       	cpc	r27, r1
    63b8:	09 f4       	brne	.+2      	; 0x63bc <mv_queue_move_buffer+0xfe>
    63ba:	7f c0       	rjmp	.+254    	; 0x64ba <mv_queue_move_buffer+0x1fc>

			// set direction: (polarity is corrected during execute move)
			(mv.p->a[i].steps < 0) ? 
    63bc:	b7 ff       	sbrs	r27, 7
    63be:	03 c0       	rjmp	.+6      	; 0x63c6 <mv_queue_move_buffer+0x108>
    63c0:	51 e0       	ldi	r21, 0x01	; 1
    63c2:	50 87       	std	Z+8, r21	; 0x08
    63c4:	01 c0       	rjmp	.+2      	; 0x63c8 <mv_queue_move_buffer+0x10a>
    63c6:	10 86       	std	Z+8, r1	; 0x08
			(mv.p->a[i].direction = 1): 		// CCW = 1 
			(mv.p->a[i].direction = 0);			// CW = 0

			// set steps to absolute value
			mv.p->a[i].steps = labs(mv.p->a[i].steps);
    63c8:	ed 85       	ldd	r30, Y+13	; 0x0d
    63ca:	fe 85       	ldd	r31, Y+14	; 0x0e
    63cc:	43 e0       	ldi	r20, 0x03	; 3
    63ce:	ee 0f       	add	r30, r30
    63d0:	ff 1f       	adc	r31, r31
    63d2:	4a 95       	dec	r20
    63d4:	e1 f7       	brne	.-8      	; 0x63ce <mv_queue_move_buffer+0x110>
    63d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    63d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    63da:	e6 0f       	add	r30, r22
    63dc:	f7 1f       	adc	r31, r23
    63de:	e2 0f       	add	r30, r18
    63e0:	f3 1f       	adc	r31, r19
    63e2:	80 81       	ld	r24, Z
    63e4:	91 81       	ldd	r25, Z+1	; 0x01
    63e6:	a2 81       	ldd	r26, Z+2	; 0x02
    63e8:	b3 81       	ldd	r27, Z+3	; 0x03
    63ea:	b7 ff       	sbrs	r27, 7
    63ec:	07 c0       	rjmp	.+14     	; 0x63fc <mv_queue_move_buffer+0x13e>
    63ee:	b0 95       	com	r27
    63f0:	a0 95       	com	r26
    63f2:	90 95       	com	r25
    63f4:	81 95       	neg	r24
    63f6:	9f 4f       	sbci	r25, 0xFF	; 255
    63f8:	af 4f       	sbci	r26, 0xFF	; 255
    63fa:	bf 4f       	sbci	r27, 0xFF	; 255
    63fc:	80 83       	st	Z, r24
    63fe:	91 83       	std	Z+1, r25	; 0x01
    6400:	a2 83       	std	Z+2, r26	; 0x02
    6402:	b3 83       	std	Z+3, r27	; 0x03

			// Normalize ticks_per_step by right shifting until the MSword = 0
			// Accumulate LSBs shifted out of ticks_per_step into postscale
			mv.p->a[i].postscale = 1;
    6404:	80 91 a4 23 	lds	r24, 0x23A4
    6408:	90 91 a5 23 	lds	r25, 0x23A5
    640c:	89 83       	std	Y+1, r24	; 0x01
    640e:	9a 83       	std	Y+2, r25	; 0x02
    6410:	4d 84       	ldd	r4, Y+13	; 0x0d
    6412:	5e 84       	ldd	r5, Y+14	; 0x0e
    6414:	23 e0       	ldi	r18, 0x03	; 3
    6416:	44 0c       	add	r4, r4
    6418:	55 1c       	adc	r5, r5
    641a:	2a 95       	dec	r18
    641c:	e1 f7       	brne	.-8      	; 0x6416 <mv_queue_move_buffer+0x158>
    641e:	ed 85       	ldd	r30, Y+13	; 0x0d
    6420:	fe 85       	ldd	r31, Y+14	; 0x0e
    6422:	e4 0d       	add	r30, r4
    6424:	f5 1d       	adc	r31, r5
    6426:	e8 0f       	add	r30, r24
    6428:	f9 1f       	adc	r31, r25
    642a:	df 01       	movw	r26, r30
    642c:	16 96       	adiw	r26, 0x06	; 6
    642e:	ab 87       	std	Y+11, r26	; 0x0b
    6430:	bc 87       	std	Y+12, r27	; 0x0c
    6432:	21 e0       	ldi	r18, 0x01	; 1
    6434:	30 e0       	ldi	r19, 0x00	; 0
    6436:	26 83       	std	Z+6, r18	; 0x06
    6438:	37 83       	std	Z+7, r19	; 0x07
			ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    643a:	e0 80       	ld	r14, Z
    643c:	f1 80       	ldd	r15, Z+1	; 0x01
    643e:	02 81       	ldd	r16, Z+2	; 0x02
    6440:	13 81       	ldd	r17, Z+3	; 0x03
    6442:	37 01       	movw	r6, r14
    6444:	48 01       	movw	r8, r16
    6446:	99 0c       	add	r9, r9
    6448:	66 08       	sbc	r6, r6
    644a:	76 2c       	mov	r7, r6
    644c:	43 01       	movw	r8, r6
    644e:	2b 81       	ldd	r18, Y+3	; 0x03
    6450:	3c 81       	ldd	r19, Y+4	; 0x04
    6452:	4d 81       	ldd	r20, Y+5	; 0x05
    6454:	5e 81       	ldd	r21, Y+6	; 0x06
    6456:	6f 81       	ldd	r22, Y+7	; 0x07
    6458:	78 85       	ldd	r23, Y+8	; 0x08
    645a:	89 85       	ldd	r24, Y+9	; 0x09
    645c:	9a 85       	ldd	r25, Y+10	; 0x0a
    645e:	57 01       	movw	r10, r14
    6460:	68 01       	movw	r12, r16
    6462:	e6 2c       	mov	r14, r6
    6464:	f6 2c       	mov	r15, r6
    6466:	06 2d       	mov	r16, r6
    6468:	16 2d       	mov	r17, r6
    646a:	0e 94 f7 37 	call	0x6fee	; 0x6fee <__udivdi3>
    646e:	c9 01       	movw	r24, r18
    6470:	da 01       	movw	r26, r20
    6472:	9c 01       	movw	r18, r24
    6474:	ad 01       	movw	r20, r26
    6476:	b2 01       	movw	r22, r4
			while (ticks_per_step & 0xFFFF0000) {
				ticks_per_step >>= 1;
				mv.p->a[i].postscale <<= 1;
    6478:	eb 85       	ldd	r30, Y+11	; 0x0b
    647a:	fc 85       	ldd	r31, Y+12	; 0x0c
    647c:	0a c0       	rjmp	.+20     	; 0x6492 <mv_queue_move_buffer+0x1d4>
			// Normalize ticks_per_step by right shifting until the MSword = 0
			// Accumulate LSBs shifted out of ticks_per_step into postscale
			mv.p->a[i].postscale = 1;
			ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
			while (ticks_per_step & 0xFFFF0000) {
				ticks_per_step >>= 1;
    647e:	56 95       	lsr	r21
    6480:	47 95       	ror	r20
    6482:	37 95       	ror	r19
    6484:	27 95       	ror	r18
				mv.p->a[i].postscale <<= 1;
    6486:	80 81       	ld	r24, Z
    6488:	91 81       	ldd	r25, Z+1	; 0x01
    648a:	88 0f       	add	r24, r24
    648c:	99 1f       	adc	r25, r25
    648e:	80 83       	st	Z, r24
    6490:	91 83       	std	Z+1, r25	; 0x01

			// Normalize ticks_per_step by right shifting until the MSword = 0
			// Accumulate LSBs shifted out of ticks_per_step into postscale
			mv.p->a[i].postscale = 1;
			ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
			while (ticks_per_step & 0xFFFF0000) {
    6492:	da 01       	movw	r26, r20
    6494:	c9 01       	movw	r24, r18
    6496:	80 70       	andi	r24, 0x00	; 0
    6498:	90 70       	andi	r25, 0x00	; 0
    649a:	00 97       	sbiw	r24, 0x00	; 0
    649c:	a1 05       	cpc	r26, r1
    649e:	b1 05       	cpc	r27, r1
    64a0:	71 f7       	brne	.-36     	; 0x647e <mv_queue_move_buffer+0x1c0>
				ticks_per_step >>= 1;
				mv.p->a[i].postscale <<= 1;
			}
			mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    64a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    64a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    64a6:	68 0f       	add	r22, r24
    64a8:	79 1f       	adc	r23, r25
    64aa:	a9 81       	ldd	r26, Y+1	; 0x01
    64ac:	ba 81       	ldd	r27, Y+2	; 0x02
    64ae:	a6 0f       	add	r26, r22
    64b0:	b7 1f       	adc	r27, r23
    64b2:	14 96       	adiw	r26, 0x04	; 4
    64b4:	2d 93       	st	X+, r18
    64b6:	3c 93       	st	X, r19
    64b8:	15 97       	sbiw	r26, 0x05	; 5
    64ba:	ed 85       	ldd	r30, Y+13	; 0x0d
    64bc:	fe 85       	ldd	r31, Y+14	; 0x0e
    64be:	31 96       	adiw	r30, 0x01	; 1
    64c0:	ed 87       	std	Y+13, r30	; 0x0d
    64c2:	fe 87       	std	Y+14, r31	; 0x0e
	mv.p->a[Z_AXIS].steps = steps_z;

	ticks = microseconds * TICKS_PER_MICROSECOND;

	// load axis values
	for (i = X_AXIS; i <= Z_AXIS; i++) {
    64c4:	33 97       	sbiw	r30, 0x03	; 3
    64c6:	09 f0       	breq	.+2      	; 0x64ca <mv_queue_move_buffer+0x20c>
    64c8:	5f cf       	rjmp	.-322    	; 0x6388 <mv_queue_move_buffer+0xca>
				mv.p->a[i].postscale <<= 1;
			}
			mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		}
	}
	mv.move_buffer_head = next_buffer_head;
    64ca:	20 92 a2 23 	sts	0x23A2, r2
	st_execute_move();
    64ce:	0e 94 b3 24 	call	0x4966	; 0x4966 <st_execute_move>
    64d2:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    64d4:	2e 96       	adiw	r28, 0x0e	; 14
    64d6:	cd bf       	out	0x3d, r28	; 61
    64d8:	de bf       	out	0x3e, r29	; 62
    64da:	cf 91       	pop	r28
    64dc:	df 91       	pop	r29
    64de:	1f 91       	pop	r17
    64e0:	0f 91       	pop	r16
    64e2:	ff 90       	pop	r15
    64e4:	ef 90       	pop	r14
    64e6:	df 90       	pop	r13
    64e8:	cf 90       	pop	r12
    64ea:	bf 90       	pop	r11
    64ec:	af 90       	pop	r10
    64ee:	9f 90       	pop	r9
    64f0:	8f 90       	pop	r8
    64f2:	7f 90       	pop	r7
    64f4:	6f 90       	pop	r6
    64f6:	5f 90       	pop	r5
    64f8:	4f 90       	pop	r4
    64fa:	2f 90       	pop	r2
    64fc:	08 95       	ret

000064fe <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    64fe:	aa e5       	ldi	r26, 0x5A	; 90
    6500:	b4 e2       	ldi	r27, 0x24	; 36
	for (uint8_t i=0; i <= A_AXIS; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    6502:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    6504:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    6506:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    6508:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=0; i <= A_AXIS; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    650a:	ed 91       	ld	r30, X+
    650c:	fc 91       	ld	r31, X
    650e:	11 97       	sbiw	r26, 0x01	; 1
    6510:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    6512:	ed 91       	ld	r30, X+
    6514:	fc 91       	ld	r31, X
    6516:	11 97       	sbiw	r26, 0x01	; 1
    6518:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    651a:	ed 91       	ld	r30, X+
    651c:	fc 91       	ld	r31, X
    651e:	11 97       	sbiw	r26, 0x01	; 1
    6520:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    6522:	ed 91       	ld	r30, X+
    6524:	fc 91       	ld	r31, X
    6526:	11 97       	sbiw	r26, 0x01	; 1
    6528:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    652a:	ed 91       	ld	r30, X+
    652c:	fc 91       	ld	r31, X
    652e:	11 97       	sbiw	r26, 0x01	; 1
    6530:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    6532:	ed 91       	ld	r30, X+
    6534:	fc 91       	ld	r31, X
    6536:	11 97       	sbiw	r26, 0x01	; 1
    6538:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    653a:	ed 91       	ld	r30, X+
    653c:	fc 91       	ld	r31, X
    653e:	11 97       	sbiw	r26, 0x01	; 1
    6540:	31 87       	std	Z+9, r19	; 0x09
    6542:	1f 96       	adiw	r26, 0x0f	; 15
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=0; i <= A_AXIS; i++) {
    6544:	44 e2       	ldi	r20, 0x24	; 36
    6546:	a6 39       	cpi	r26, 0x96	; 150
    6548:	b4 07       	cpc	r27, r20
    654a:	f9 f6       	brne	.-66     	; 0x650a <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    654c:	08 95       	ret

0000654e <__vector_65>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    654e:	1f 92       	push	r1
    6550:	0f 92       	push	r0
    6552:	0f b6       	in	r0, 0x3f	; 63
    6554:	0f 92       	push	r0
    6556:	0b b6       	in	r0, 0x3b	; 59
    6558:	0f 92       	push	r0
    655a:	11 24       	eor	r1, r1
    655c:	2f 93       	push	r18
    655e:	3f 93       	push	r19
    6560:	4f 93       	push	r20
    6562:	5f 93       	push	r21
    6564:	6f 93       	push	r22
    6566:	7f 93       	push	r23
    6568:	8f 93       	push	r24
    656a:	9f 93       	push	r25
    656c:	af 93       	push	r26
    656e:	bf 93       	push	r27
    6570:	ef 93       	push	r30
    6572:	ff 93       	push	r31

void _ls_handler() {
	tg_kill();
    6574:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <tg_kill>
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    6578:	ff 91       	pop	r31
    657a:	ef 91       	pop	r30
    657c:	bf 91       	pop	r27
    657e:	af 91       	pop	r26
    6580:	9f 91       	pop	r25
    6582:	8f 91       	pop	r24
    6584:	7f 91       	pop	r23
    6586:	6f 91       	pop	r22
    6588:	5f 91       	pop	r21
    658a:	4f 91       	pop	r20
    658c:	3f 91       	pop	r19
    658e:	2f 91       	pop	r18
    6590:	0f 90       	pop	r0
    6592:	0b be       	out	0x3b, r0	; 59
    6594:	0f 90       	pop	r0
    6596:	0f be       	out	0x3f, r0	; 63
    6598:	0f 90       	pop	r0
    659a:	1f 90       	pop	r1
    659c:	18 95       	reti

0000659e <__vector_64>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    659e:	1f 92       	push	r1
    65a0:	0f 92       	push	r0
    65a2:	0f b6       	in	r0, 0x3f	; 63
    65a4:	0f 92       	push	r0
    65a6:	0b b6       	in	r0, 0x3b	; 59
    65a8:	0f 92       	push	r0
    65aa:	11 24       	eor	r1, r1
    65ac:	2f 93       	push	r18
    65ae:	3f 93       	push	r19
    65b0:	4f 93       	push	r20
    65b2:	5f 93       	push	r21
    65b4:	6f 93       	push	r22
    65b6:	7f 93       	push	r23
    65b8:	8f 93       	push	r24
    65ba:	9f 93       	push	r25
    65bc:	af 93       	push	r26
    65be:	bf 93       	push	r27
    65c0:	ef 93       	push	r30
    65c2:	ff 93       	push	r31
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    65c4:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <tg_kill>
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    65c8:	ff 91       	pop	r31
    65ca:	ef 91       	pop	r30
    65cc:	bf 91       	pop	r27
    65ce:	af 91       	pop	r26
    65d0:	9f 91       	pop	r25
    65d2:	8f 91       	pop	r24
    65d4:	7f 91       	pop	r23
    65d6:	6f 91       	pop	r22
    65d8:	5f 91       	pop	r21
    65da:	4f 91       	pop	r20
    65dc:	3f 91       	pop	r19
    65de:	2f 91       	pop	r18
    65e0:	0f 90       	pop	r0
    65e2:	0b be       	out	0x3b, r0	; 59
    65e4:	0f 90       	pop	r0
    65e6:	0f be       	out	0x3f, r0	; 63
    65e8:	0f 90       	pop	r0
    65ea:	1f 90       	pop	r1
    65ec:	18 95       	reti

000065ee <__vector_44>:
ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    65ee:	1f 92       	push	r1
    65f0:	0f 92       	push	r0
    65f2:	0f b6       	in	r0, 0x3f	; 63
    65f4:	0f 92       	push	r0
    65f6:	0b b6       	in	r0, 0x3b	; 59
    65f8:	0f 92       	push	r0
    65fa:	11 24       	eor	r1, r1
    65fc:	2f 93       	push	r18
    65fe:	3f 93       	push	r19
    6600:	4f 93       	push	r20
    6602:	5f 93       	push	r21
    6604:	6f 93       	push	r22
    6606:	7f 93       	push	r23
    6608:	8f 93       	push	r24
    660a:	9f 93       	push	r25
    660c:	af 93       	push	r26
    660e:	bf 93       	push	r27
    6610:	ef 93       	push	r30
    6612:	ff 93       	push	r31
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    6614:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <tg_kill>
ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    6618:	ff 91       	pop	r31
    661a:	ef 91       	pop	r30
    661c:	bf 91       	pop	r27
    661e:	af 91       	pop	r26
    6620:	9f 91       	pop	r25
    6622:	8f 91       	pop	r24
    6624:	7f 91       	pop	r23
    6626:	6f 91       	pop	r22
    6628:	5f 91       	pop	r21
    662a:	4f 91       	pop	r20
    662c:	3f 91       	pop	r19
    662e:	2f 91       	pop	r18
    6630:	0f 90       	pop	r0
    6632:	0b be       	out	0x3b, r0	; 59
    6634:	0f 90       	pop	r0
    6636:	0f be       	out	0x3f, r0	; 63
    6638:	0f 90       	pop	r0
    663a:	1f 90       	pop	r1
    663c:	18 95       	reti

0000663e <__vector_43>:

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    663e:	1f 92       	push	r1
    6640:	0f 92       	push	r0
    6642:	0f b6       	in	r0, 0x3f	; 63
    6644:	0f 92       	push	r0
    6646:	0b b6       	in	r0, 0x3b	; 59
    6648:	0f 92       	push	r0
    664a:	11 24       	eor	r1, r1
    664c:	2f 93       	push	r18
    664e:	3f 93       	push	r19
    6650:	4f 93       	push	r20
    6652:	5f 93       	push	r21
    6654:	6f 93       	push	r22
    6656:	7f 93       	push	r23
    6658:	8f 93       	push	r24
    665a:	9f 93       	push	r25
    665c:	af 93       	push	r26
    665e:	bf 93       	push	r27
    6660:	ef 93       	push	r30
    6662:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    6664:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <tg_kill>

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    6668:	ff 91       	pop	r31
    666a:	ef 91       	pop	r30
    666c:	bf 91       	pop	r27
    666e:	af 91       	pop	r26
    6670:	9f 91       	pop	r25
    6672:	8f 91       	pop	r24
    6674:	7f 91       	pop	r23
    6676:	6f 91       	pop	r22
    6678:	5f 91       	pop	r21
    667a:	4f 91       	pop	r20
    667c:	3f 91       	pop	r19
    667e:	2f 91       	pop	r18
    6680:	0f 90       	pop	r0
    6682:	0b be       	out	0x3b, r0	; 59
    6684:	0f 90       	pop	r0
    6686:	0f be       	out	0x3f, r0	; 63
    6688:	0f 90       	pop	r0
    668a:	1f 90       	pop	r1
    668c:	18 95       	reti

0000668e <__vector_105>:
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    668e:	1f 92       	push	r1
    6690:	0f 92       	push	r0
    6692:	0f b6       	in	r0, 0x3f	; 63
    6694:	0f 92       	push	r0
    6696:	0b b6       	in	r0, 0x3b	; 59
    6698:	0f 92       	push	r0
    669a:	11 24       	eor	r1, r1
    669c:	2f 93       	push	r18
    669e:	3f 93       	push	r19
    66a0:	4f 93       	push	r20
    66a2:	5f 93       	push	r21
    66a4:	6f 93       	push	r22
    66a6:	7f 93       	push	r23
    66a8:	8f 93       	push	r24
    66aa:	9f 93       	push	r25
    66ac:	af 93       	push	r26
    66ae:	bf 93       	push	r27
    66b0:	ef 93       	push	r30
    66b2:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    66b4:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <tg_kill>
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    66b8:	ff 91       	pop	r31
    66ba:	ef 91       	pop	r30
    66bc:	bf 91       	pop	r27
    66be:	af 91       	pop	r26
    66c0:	9f 91       	pop	r25
    66c2:	8f 91       	pop	r24
    66c4:	7f 91       	pop	r23
    66c6:	6f 91       	pop	r22
    66c8:	5f 91       	pop	r21
    66ca:	4f 91       	pop	r20
    66cc:	3f 91       	pop	r19
    66ce:	2f 91       	pop	r18
    66d0:	0f 90       	pop	r0
    66d2:	0b be       	out	0x3b, r0	; 59
    66d4:	0f 90       	pop	r0
    66d6:	0f be       	out	0x3f, r0	; 63
    66d8:	0f 90       	pop	r0
    66da:	1f 90       	pop	r1
    66dc:	18 95       	reti

000066de <__vector_104>:
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    66de:	1f 92       	push	r1
    66e0:	0f 92       	push	r0
    66e2:	0f b6       	in	r0, 0x3f	; 63
    66e4:	0f 92       	push	r0
    66e6:	0b b6       	in	r0, 0x3b	; 59
    66e8:	0f 92       	push	r0
    66ea:	11 24       	eor	r1, r1
    66ec:	2f 93       	push	r18
    66ee:	3f 93       	push	r19
    66f0:	4f 93       	push	r20
    66f2:	5f 93       	push	r21
    66f4:	6f 93       	push	r22
    66f6:	7f 93       	push	r23
    66f8:	8f 93       	push	r24
    66fa:	9f 93       	push	r25
    66fc:	af 93       	push	r26
    66fe:	bf 93       	push	r27
    6700:	ef 93       	push	r30
    6702:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    6704:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <tg_kill>
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    6708:	ff 91       	pop	r31
    670a:	ef 91       	pop	r30
    670c:	bf 91       	pop	r27
    670e:	af 91       	pop	r26
    6710:	9f 91       	pop	r25
    6712:	8f 91       	pop	r24
    6714:	7f 91       	pop	r23
    6716:	6f 91       	pop	r22
    6718:	5f 91       	pop	r21
    671a:	4f 91       	pop	r20
    671c:	3f 91       	pop	r19
    671e:	2f 91       	pop	r18
    6720:	0f 90       	pop	r0
    6722:	0b be       	out	0x3b, r0	; 59
    6724:	0f 90       	pop	r0
    6726:	0f be       	out	0x3f, r0	; 63
    6728:	0f 90       	pop	r0
    672a:	1f 90       	pop	r1
    672c:	18 95       	reti

0000672e <__vector_67>:
/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    672e:	1f 92       	push	r1
    6730:	0f 92       	push	r0
    6732:	0f b6       	in	r0, 0x3f	; 63
    6734:	0f 92       	push	r0
    6736:	0b b6       	in	r0, 0x3b	; 59
    6738:	0f 92       	push	r0
    673a:	11 24       	eor	r1, r1
    673c:	2f 93       	push	r18
    673e:	3f 93       	push	r19
    6740:	4f 93       	push	r20
    6742:	5f 93       	push	r21
    6744:	6f 93       	push	r22
    6746:	7f 93       	push	r23
    6748:	8f 93       	push	r24
    674a:	9f 93       	push	r25
    674c:	af 93       	push	r26
    674e:	bf 93       	push	r27
    6750:	ef 93       	push	r30
    6752:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    6754:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <tg_kill>
/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    6758:	ff 91       	pop	r31
    675a:	ef 91       	pop	r30
    675c:	bf 91       	pop	r27
    675e:	af 91       	pop	r26
    6760:	9f 91       	pop	r25
    6762:	8f 91       	pop	r24
    6764:	7f 91       	pop	r23
    6766:	6f 91       	pop	r22
    6768:	5f 91       	pop	r21
    676a:	4f 91       	pop	r20
    676c:	3f 91       	pop	r19
    676e:	2f 91       	pop	r18
    6770:	0f 90       	pop	r0
    6772:	0b be       	out	0x3b, r0	; 59
    6774:	0f 90       	pop	r0
    6776:	0f be       	out	0x3f, r0	; 63
    6778:	0f 90       	pop	r0
    677a:	1f 90       	pop	r1
    677c:	18 95       	reti

0000677e <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    677e:	1f 92       	push	r1
    6780:	0f 92       	push	r0
    6782:	0f b6       	in	r0, 0x3f	; 63
    6784:	0f 92       	push	r0
    6786:	0b b6       	in	r0, 0x3b	; 59
    6788:	0f 92       	push	r0
    678a:	11 24       	eor	r1, r1
    678c:	2f 93       	push	r18
    678e:	3f 93       	push	r19
    6790:	4f 93       	push	r20
    6792:	5f 93       	push	r21
    6794:	6f 93       	push	r22
    6796:	7f 93       	push	r23
    6798:	8f 93       	push	r24
    679a:	9f 93       	push	r25
    679c:	af 93       	push	r26
    679e:	bf 93       	push	r27
    67a0:	ef 93       	push	r30
    67a2:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    67a4:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <tg_kill>

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    67a8:	ff 91       	pop	r31
    67aa:	ef 91       	pop	r30
    67ac:	bf 91       	pop	r27
    67ae:	af 91       	pop	r26
    67b0:	9f 91       	pop	r25
    67b2:	8f 91       	pop	r24
    67b4:	7f 91       	pop	r23
    67b6:	6f 91       	pop	r22
    67b8:	5f 91       	pop	r21
    67ba:	4f 91       	pop	r20
    67bc:	3f 91       	pop	r19
    67be:	2f 91       	pop	r18
    67c0:	0f 90       	pop	r0
    67c2:	0b be       	out	0x3b, r0	; 59
    67c4:	0f 90       	pop	r0
    67c6:	0f be       	out	0x3f, r0	; 63
    67c8:	0f 90       	pop	r0
    67ca:	1f 90       	pop	r1
    67cc:	18 95       	reti

000067ce <xio_rs485_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_rs485_init(const uint16_t control)
{
    67ce:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    67d0:	e8 2f       	mov	r30, r24
    67d2:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	fr.flags = XIO_FLAG_RS485_DEFS_gm;		// set flags to defaults & initial state
    67d4:	87 e3       	ldi	r24, 0x37	; 55
    67d6:	90 e0       	ldi	r25, 0x00	; 0
    67d8:	80 93 12 24 	sts	0x2412, r24
    67dc:	90 93 13 24 	sts	0x2413, r25
		fr.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		fr.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    67e0:	26 ff       	sbrs	r18, 6
    67e2:	06 c0       	rjmp	.+12     	; 0x67f0 <xio_rs485_init+0x22>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    67e4:	87 e3       	ldi	r24, 0x37	; 55
    67e6:	90 e0       	ldi	r25, 0x00	; 0
    67e8:	80 93 12 24 	sts	0x2412, r24
    67ec:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOBLOCK) {
    67f0:	27 ff       	sbrs	r18, 7
    67f2:	06 c0       	rjmp	.+12     	; 0x6800 <xio_rs485_init+0x32>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    67f4:	83 e3       	ldi	r24, 0x33	; 51
    67f6:	90 e0       	ldi	r25, 0x00	; 0
    67f8:	80 93 12 24 	sts	0x2412, r24
    67fc:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_ECHO) {
    6800:	30 ff       	sbrs	r19, 0
    6802:	09 c0       	rjmp	.+18     	; 0x6816 <xio_rs485_init+0x48>
		fr.flags |= XIO_FLAG_ECHO_bm;
    6804:	80 91 12 24 	lds	r24, 0x2412
    6808:	90 91 13 24 	lds	r25, 0x2413
    680c:	80 61       	ori	r24, 0x10	; 16
    680e:	80 93 12 24 	sts	0x2412, r24
    6812:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOECHO) {
    6816:	31 ff       	sbrs	r19, 1
    6818:	09 c0       	rjmp	.+18     	; 0x682c <xio_rs485_init+0x5e>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    681a:	80 91 12 24 	lds	r24, 0x2412
    681e:	90 91 13 24 	lds	r25, 0x2413
    6822:	8f 7e       	andi	r24, 0xEF	; 239
    6824:	80 93 12 24 	sts	0x2412, r24
    6828:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_CRLF) {
    682c:	32 ff       	sbrs	r19, 2
    682e:	09 c0       	rjmp	.+18     	; 0x6842 <xio_rs485_init+0x74>
		fr.flags |= XIO_FLAG_CRLF_bm;
    6830:	80 91 12 24 	lds	r24, 0x2412
    6834:	90 91 13 24 	lds	r25, 0x2413
    6838:	80 62       	ori	r24, 0x20	; 32
    683a:	80 93 12 24 	sts	0x2412, r24
    683e:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOCRLF) {
    6842:	33 ff       	sbrs	r19, 3
    6844:	09 c0       	rjmp	.+18     	; 0x6858 <xio_rs485_init+0x8a>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    6846:	80 91 12 24 	lds	r24, 0x2412
    684a:	90 91 13 24 	lds	r25, 0x2413
    684e:	8f 7d       	andi	r24, 0xDF	; 223
    6850:	80 93 12 24 	sts	0x2412, r24
    6854:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_LINEMODE) {
    6858:	34 ff       	sbrs	r19, 4
    685a:	09 c0       	rjmp	.+18     	; 0x686e <xio_rs485_init+0xa0>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    685c:	80 91 12 24 	lds	r24, 0x2412
    6860:	90 91 13 24 	lds	r25, 0x2413
    6864:	80 64       	ori	r24, 0x40	; 64
    6866:	80 93 12 24 	sts	0x2412, r24
    686a:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOLINEMODE) {
    686e:	35 ff       	sbrs	r19, 5
    6870:	09 c0       	rjmp	.+18     	; 0x6884 <xio_rs485_init+0xb6>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    6872:	80 91 12 24 	lds	r24, 0x2412
    6876:	90 91 13 24 	lds	r25, 0x2413
    687a:	8f 7b       	andi	r24, 0xBF	; 191
    687c:	80 93 12 24 	sts	0x2412, r24
    6880:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_SEMICOLONS) {
    6884:	36 ff       	sbrs	r19, 6
    6886:	09 c0       	rjmp	.+18     	; 0x689a <xio_rs485_init+0xcc>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    6888:	80 91 12 24 	lds	r24, 0x2412
    688c:	90 91 13 24 	lds	r25, 0x2413
    6890:	80 68       	ori	r24, 0x80	; 128
    6892:	80 93 12 24 	sts	0x2412, r24
    6896:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    689a:	37 ff       	sbrs	r19, 7
    689c:	09 c0       	rjmp	.+18     	; 0x68b0 <xio_rs485_init+0xe2>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    689e:	80 91 12 24 	lds	r24, 0x2412
    68a2:	90 91 13 24 	lds	r25, 0x2413
    68a6:	8f 77       	andi	r24, 0x7F	; 127
    68a8:	80 93 12 24 	sts	0x2412, r24
    68ac:	90 93 13 24 	sts	0x2413, r25
	}

	// character signals and error returns
	fr.sig = 0;
    68b0:	10 92 14 24 	sts	0x2414, r1
	dev_rs485.udata = &(fr.sig);				// bind sig register to FILE struct
    68b4:	84 e1       	ldi	r24, 0x14	; 20
    68b6:	94 e2       	ldi	r25, 0x24	; 36
    68b8:	80 93 28 20 	sts	0x2028, r24
    68bc:	90 93 29 20 	sts	0x2029, r25

	// setup internal RX/TX buffers
	fr.rx_buf_head = 1;						// can't use location 0
    68c0:	81 e0       	ldi	r24, 0x01	; 1
    68c2:	80 93 1f 24 	sts	0x241F, r24
	fr.rx_buf_tail = 1;
    68c6:	80 93 1e 24 	sts	0x241E, r24
	fr.tx_buf_head = 1;
    68ca:	80 93 21 24 	sts	0x2421, r24
	fr.tx_buf_tail = 1;
    68ce:	80 93 20 24 	sts	0x2420, r24
	fr.len = sizeof(fr.buf);					// offset to zero
    68d2:	82 e0       	ldi	r24, 0x02	; 2
    68d4:	80 93 17 24 	sts	0x2417, r24

	// bindings
	fr.sig_func = &xio_null_signal;			// bind null signal handler
    68d8:	8c e1       	ldi	r24, 0x1C	; 28
    68da:	97 e2       	ldi	r25, 0x27	; 39
    68dc:	80 93 1a 24 	sts	0x241A, r24
    68e0:	90 93 1b 24 	sts	0x241B, r25
	fr.line_func = &xio_null_line;			// bind null line handler
    68e4:	8f e1       	ldi	r24, 0x1F	; 31
    68e6:	97 e2       	ldi	r25, 0x27	; 39
    68e8:	80 93 1c 24 	sts	0x241C, r24
    68ec:	90 93 1d 24 	sts	0x241D, r25

	fr.usart = &RS485_USART;				// bind USART structure
    68f0:	80 eb       	ldi	r24, 0xB0	; 176
    68f2:	98 e0       	ldi	r25, 0x08	; 8
    68f4:	80 93 47 24 	sts	0x2447, r24
    68f8:	90 93 48 24 	sts	0x2448, r25
	fr.port = &RS485_PORT;					// bind PORT structure
    68fc:	80 e4       	ldi	r24, 0x40	; 64
    68fe:	96 e0       	ldi	r25, 0x06	; 6
    6900:	80 93 49 24 	sts	0x2449, r24
    6904:	90 93 4a 24 	sts	0x244A, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    6908:	ee 23       	and	r30, r30
    690a:	09 f4       	brne	.+2      	; 0x690e <xio_rs485_init+0x140>
    690c:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    690e:	8e 2f       	mov	r24, r30
    6910:	90 e0       	ldi	r25, 0x00	; 0
    6912:	fc 01       	movw	r30, r24
    6914:	ec 5d       	subi	r30, 0xDC	; 220
    6916:	f8 4f       	sbci	r31, 0xF8	; 248
    6918:	e4 91       	lpm	r30, Z+
    691a:	a0 eb       	ldi	r26, 0xB0	; 176
    691c:	b8 e0       	ldi	r27, 0x08	; 8
    691e:	16 96       	adiw	r26, 0x06	; 6
    6920:	ec 93       	st	X, r30
    6922:	16 97       	sbiw	r26, 0x06	; 6
	fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    6924:	81 5d       	subi	r24, 0xD1	; 209
    6926:	98 4f       	sbci	r25, 0xF8	; 248
    6928:	fc 01       	movw	r30, r24
    692a:	84 91       	lpm	r24, Z+
    692c:	17 96       	adiw	r26, 0x07	; 7
    692e:	8c 93       	st	X, r24
    6930:	17 97       	sbiw	r26, 0x07	; 7
	fr.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx on USART
    6932:	88 e1       	ldi	r24, 0x18	; 24
    6934:	14 96       	adiw	r26, 0x04	; 4
    6936:	8c 93       	st	X, r24
    6938:	14 97       	sbiw	r26, 0x04	; 4
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    693a:	81 e2       	ldi	r24, 0x21	; 33
    693c:	13 96       	adiw	r26, 0x03	; 3
    693e:	8c 93       	st	X, r24

	fr.port->DIRCLR = RS485_RX_bm;	// clr RX pin as input
    6940:	e0 e4       	ldi	r30, 0x40	; 64
    6942:	f6 e0       	ldi	r31, 0x06	; 6
    6944:	80 e4       	ldi	r24, 0x40	; 64
    6946:	82 83       	std	Z+2, r24	; 0x02
	fr.port->DIRSET = RS485_TX_bm; 	// set TX pin as output
    6948:	80 e8       	ldi	r24, 0x80	; 128
    694a:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTSET = RS485_TX_bm;	// set TX HI as initial state
    694c:	85 83       	std	Z+5, r24	; 0x05
	fr.port->DIRSET = RS485_DE_bm; 	// Data Enable (TX) to output (TX enabled hi)
    694e:	90 e2       	ldi	r25, 0x20	; 32
    6950:	91 83       	std	Z+1, r25	; 0x01
	fr.port->DIRSET = RS485_RE_bm; 	// Recv Enable (RX) to output (RX enabled lo)
    6952:	80 e1       	ldi	r24, 0x10	; 16
    6954:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTCLR = RS485_DE_bm;	// DE lo initially (TX disabled)
    6956:	96 83       	std	Z+6, r25	; 0x06
	fr.port->OUTCLR = RS485_RE_bm; 	// RE lo initially (RX enabled)
    6958:	86 83       	std	Z+6, r24	; 0x06
}
    695a:	08 95       	ret

0000695c <xio_rs485_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_rs485_control(const uint16_t control, const int16_t arg)
{
    695c:	ac 01       	movw	r20, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    695e:	84 ff       	sbrs	r24, 4
    6960:	05 c0       	rjmp	.+10     	; 0x696c <xio_rs485_control+0x10>
		fr.sig_func = (fptr_int_uint8)arg;
    6962:	60 93 1a 24 	sts	0x241A, r22
    6966:	70 93 1b 24 	sts	0x241B, r23
    696a:	8b c0       	rjmp	.+278    	; 0x6a82 <xio_rs485_control+0x126>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    696c:	85 ff       	sbrs	r24, 5
    696e:	05 c0       	rjmp	.+10     	; 0x697a <xio_rs485_control+0x1e>
		fr.line_func = (fptr_int_char_p)arg;
    6970:	60 93 1c 24 	sts	0x241C, r22
    6974:	70 93 1d 24 	sts	0x241D, r23
    6978:	84 c0       	rjmp	.+264    	; 0x6a82 <xio_rs485_control+0x126>
		return (0);
	}
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    697a:	8f 70       	andi	r24, 0x0F	; 15
    697c:	90 70       	andi	r25, 0x00	; 0
    697e:	00 97       	sbiw	r24, 0x00	; 0
    6980:	91 f0       	breq	.+36     	; 0x69a6 <xio_rs485_control+0x4a>
		fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    6982:	a0 91 47 24 	lds	r26, 0x2447
    6986:	b0 91 48 24 	lds	r27, 0x2448
    698a:	9c 01       	movw	r18, r24
    698c:	2c 5d       	subi	r18, 0xDC	; 220
    698e:	38 4f       	sbci	r19, 0xF8	; 248
    6990:	f9 01       	movw	r30, r18
    6992:	24 91       	lpm	r18, Z+
    6994:	16 96       	adiw	r26, 0x06	; 6
    6996:	2c 93       	st	X, r18
    6998:	16 97       	sbiw	r26, 0x06	; 6
		fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    699a:	81 5d       	subi	r24, 0xD1	; 209
    699c:	98 4f       	sbci	r25, 0xF8	; 248
    699e:	fc 01       	movw	r30, r24
    69a0:	84 91       	lpm	r24, Z+
    69a2:	17 96       	adiw	r26, 0x07	; 7
    69a4:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    69a6:	46 ff       	sbrs	r20, 6
    69a8:	09 c0       	rjmp	.+18     	; 0x69bc <xio_rs485_control+0x60>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    69aa:	80 91 12 24 	lds	r24, 0x2412
    69ae:	90 91 13 24 	lds	r25, 0x2413
    69b2:	84 60       	ori	r24, 0x04	; 4
    69b4:	80 93 12 24 	sts	0x2412, r24
    69b8:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOBLOCK) {
    69bc:	47 ff       	sbrs	r20, 7
    69be:	09 c0       	rjmp	.+18     	; 0x69d2 <xio_rs485_control+0x76>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    69c0:	80 91 12 24 	lds	r24, 0x2412
    69c4:	90 91 13 24 	lds	r25, 0x2413
    69c8:	8b 7f       	andi	r24, 0xFB	; 251
    69ca:	80 93 12 24 	sts	0x2412, r24
    69ce:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_ECHO) {
    69d2:	50 ff       	sbrs	r21, 0
    69d4:	09 c0       	rjmp	.+18     	; 0x69e8 <xio_rs485_control+0x8c>
		fr.flags |= XIO_FLAG_ECHO_bm;
    69d6:	80 91 12 24 	lds	r24, 0x2412
    69da:	90 91 13 24 	lds	r25, 0x2413
    69de:	80 61       	ori	r24, 0x10	; 16
    69e0:	80 93 12 24 	sts	0x2412, r24
    69e4:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOECHO) {
    69e8:	51 ff       	sbrs	r21, 1
    69ea:	09 c0       	rjmp	.+18     	; 0x69fe <xio_rs485_control+0xa2>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    69ec:	80 91 12 24 	lds	r24, 0x2412
    69f0:	90 91 13 24 	lds	r25, 0x2413
    69f4:	8f 7e       	andi	r24, 0xEF	; 239
    69f6:	80 93 12 24 	sts	0x2412, r24
    69fa:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_CRLF) {
    69fe:	52 ff       	sbrs	r21, 2
    6a00:	09 c0       	rjmp	.+18     	; 0x6a14 <xio_rs485_control+0xb8>
		fr.flags |= XIO_FLAG_CRLF_bm;
    6a02:	80 91 12 24 	lds	r24, 0x2412
    6a06:	90 91 13 24 	lds	r25, 0x2413
    6a0a:	80 62       	ori	r24, 0x20	; 32
    6a0c:	80 93 12 24 	sts	0x2412, r24
    6a10:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOCRLF) {
    6a14:	53 ff       	sbrs	r21, 3
    6a16:	09 c0       	rjmp	.+18     	; 0x6a2a <xio_rs485_control+0xce>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    6a18:	80 91 12 24 	lds	r24, 0x2412
    6a1c:	90 91 13 24 	lds	r25, 0x2413
    6a20:	8f 7d       	andi	r24, 0xDF	; 223
    6a22:	80 93 12 24 	sts	0x2412, r24
    6a26:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_LINEMODE) {
    6a2a:	54 ff       	sbrs	r21, 4
    6a2c:	09 c0       	rjmp	.+18     	; 0x6a40 <xio_rs485_control+0xe4>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    6a2e:	80 91 12 24 	lds	r24, 0x2412
    6a32:	90 91 13 24 	lds	r25, 0x2413
    6a36:	80 64       	ori	r24, 0x40	; 64
    6a38:	80 93 12 24 	sts	0x2412, r24
    6a3c:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOLINEMODE) {
    6a40:	55 ff       	sbrs	r21, 5
    6a42:	09 c0       	rjmp	.+18     	; 0x6a56 <xio_rs485_control+0xfa>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    6a44:	80 91 12 24 	lds	r24, 0x2412
    6a48:	90 91 13 24 	lds	r25, 0x2413
    6a4c:	8f 7b       	andi	r24, 0xBF	; 191
    6a4e:	80 93 12 24 	sts	0x2412, r24
    6a52:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_SEMICOLONS) {
    6a56:	56 ff       	sbrs	r21, 6
    6a58:	09 c0       	rjmp	.+18     	; 0x6a6c <xio_rs485_control+0x110>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    6a5a:	80 91 12 24 	lds	r24, 0x2412
    6a5e:	90 91 13 24 	lds	r25, 0x2413
    6a62:	80 68       	ori	r24, 0x80	; 128
    6a64:	80 93 12 24 	sts	0x2412, r24
    6a68:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    6a6c:	57 ff       	sbrs	r21, 7
    6a6e:	09 c0       	rjmp	.+18     	; 0x6a82 <xio_rs485_control+0x126>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    6a70:	80 91 12 24 	lds	r24, 0x2412
    6a74:	90 91 13 24 	lds	r25, 0x2413
    6a78:	8f 77       	andi	r24, 0x7F	; 127
    6a7a:	80 93 12 24 	sts	0x2412, r24
    6a7e:	90 93 13 24 	sts	0x2413, r25
	}
	return (0);
}
    6a82:	80 e0       	ldi	r24, 0x00	; 0
    6a84:	08 95       	ret

00006a86 <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)		//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    6a86:	1f 92       	push	r1
    6a88:	0f 92       	push	r0
    6a8a:	0f b6       	in	r0, 0x3f	; 63
    6a8c:	0f 92       	push	r0
    6a8e:	0b b6       	in	r0, 0x3b	; 59
    6a90:	0f 92       	push	r0
    6a92:	11 24       	eor	r1, r1
    6a94:	8f 93       	push	r24
    6a96:	9f 93       	push	r25
    6a98:	af 93       	push	r26
    6a9a:	bf 93       	push	r27
    6a9c:	ef 93       	push	r30
    6a9e:	ff 93       	push	r31
	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// advance buffer head with wrap
    6aa0:	80 91 1f 24 	lds	r24, 0x241F
    6aa4:	81 50       	subi	r24, 0x01	; 1
    6aa6:	80 93 1f 24 	sts	0x241F, r24
    6aaa:	80 91 1f 24 	lds	r24, 0x241F
    6aae:	88 23       	and	r24, r24
    6ab0:	19 f4       	brne	.+6      	; 0x6ab8 <__vector_28+0x32>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6ab2:	81 e1       	ldi	r24, 0x11	; 17
    6ab4:	80 93 1f 24 	sts	0x241F, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    6ab8:	90 91 1f 24 	lds	r25, 0x241F
    6abc:	80 91 1e 24 	lds	r24, 0x241E
    6ac0:	98 17       	cp	r25, r24
    6ac2:	61 f0       	breq	.+24     	; 0x6adc <__vector_28+0x56>
		fr.rx_buf[fr.rx_buf_head] = fr.usart->DATA;// (= USARTC0.DATA;)
    6ac4:	e0 91 1f 24 	lds	r30, 0x241F
    6ac8:	f0 e0       	ldi	r31, 0x00	; 0
    6aca:	a0 91 47 24 	lds	r26, 0x2447
    6ace:	b0 91 48 24 	lds	r27, 0x2448
    6ad2:	8c 91       	ld	r24, X
    6ad4:	ee 5e       	subi	r30, 0xEE	; 238
    6ad6:	fb 4d       	sbci	r31, 0xDB	; 219
    6ad8:	81 8b       	std	Z+17, r24	; 0x11
    6ada:	0c c0       	rjmp	.+24     	; 0x6af4 <__vector_28+0x6e>
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6adc:	80 91 1f 24 	lds	r24, 0x241F
    6ae0:	8f 5f       	subi	r24, 0xFF	; 255
    6ae2:	80 93 1f 24 	sts	0x241F, r24
    6ae6:	80 91 1f 24 	lds	r24, 0x241F
    6aea:	82 31       	cpi	r24, 0x12	; 18
    6aec:	18 f0       	brcs	.+6      	; 0x6af4 <__vector_28+0x6e>
		fr.rx_buf_head = 1;
    6aee:	81 e0       	ldi	r24, 0x01	; 1
    6af0:	80 93 1f 24 	sts	0x241F, r24
	}
	// activate flow control here or before it gets to this level
}
    6af4:	ff 91       	pop	r31
    6af6:	ef 91       	pop	r30
    6af8:	bf 91       	pop	r27
    6afa:	af 91       	pop	r26
    6afc:	9f 91       	pop	r25
    6afe:	8f 91       	pop	r24
    6b00:	0f 90       	pop	r0
    6b02:	0b be       	out	0x3b, r0	; 59
    6b04:	0f 90       	pop	r0
    6b06:	0f be       	out	0x3f, r0	; 63
    6b08:	0f 90       	pop	r0
    6b0a:	1f 90       	pop	r1
    6b0c:	18 95       	reti

00006b0e <xio_rs485_queue_RX_char>:
/*
 * xio_rs485_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_rs485_queue_RX_char(const char c)
{
    6b0e:	28 2f       	mov	r18, r24
	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// wrap condition
    6b10:	80 91 1f 24 	lds	r24, 0x241F
    6b14:	81 50       	subi	r24, 0x01	; 1
    6b16:	80 93 1f 24 	sts	0x241F, r24
    6b1a:	80 91 1f 24 	lds	r24, 0x241F
    6b1e:	88 23       	and	r24, r24
    6b20:	19 f4       	brne	.+6      	; 0x6b28 <xio_rs485_queue_RX_char+0x1a>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6b22:	81 e1       	ldi	r24, 0x11	; 17
    6b24:	80 93 1f 24 	sts	0x241F, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    6b28:	90 91 1f 24 	lds	r25, 0x241F
    6b2c:	80 91 1e 24 	lds	r24, 0x241E
    6b30:	98 17       	cp	r25, r24
    6b32:	39 f0       	breq	.+14     	; 0x6b42 <xio_rs485_queue_RX_char+0x34>
		fr.rx_buf[fr.rx_buf_head] = c;			// FAKE INPUT DATA
    6b34:	e0 91 1f 24 	lds	r30, 0x241F
    6b38:	f0 e0       	ldi	r31, 0x00	; 0
    6b3a:	ee 5e       	subi	r30, 0xEE	; 238
    6b3c:	fb 4d       	sbci	r31, 0xDB	; 219
    6b3e:	21 8b       	std	Z+17, r18	; 0x11
    6b40:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6b42:	80 91 1f 24 	lds	r24, 0x241F
    6b46:	8f 5f       	subi	r24, 0xFF	; 255
    6b48:	80 93 1f 24 	sts	0x241F, r24
    6b4c:	80 91 1f 24 	lds	r24, 0x241F
    6b50:	82 31       	cpi	r24, 0x12	; 18
    6b52:	18 f0       	brcs	.+6      	; 0x6b5a <xio_rs485_queue_RX_char+0x4c>
		fr.rx_buf_head = 1;
    6b54:	81 e0       	ldi	r24, 0x01	; 1
    6b56:	80 93 1f 24 	sts	0x241F, r24
    6b5a:	08 95       	ret

00006b5c <xio_rs485_queue_RX_string>:
/*
 * xio_rs485_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_rs485_queue_RX_string(char *buf)
{
    6b5c:	1f 93       	push	r17
    6b5e:	cf 93       	push	r28
    6b60:	df 93       	push	r29
    6b62:	ec 01       	movw	r28, r24
    6b64:	10 e0       	ldi	r17, 0x00	; 0
    6b66:	02 c0       	rjmp	.+4      	; 0x6b6c <xio_rs485_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_rs485_queue_RX_char(c);
    6b68:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <xio_rs485_queue_RX_char>
void xio_rs485_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    6b6c:	fe 01       	movw	r30, r28
    6b6e:	e1 0f       	add	r30, r17
    6b70:	f1 1d       	adc	r31, r1
    6b72:	80 81       	ld	r24, Z
    6b74:	1f 5f       	subi	r17, 0xFF	; 255
    6b76:	88 23       	and	r24, r24
    6b78:	b9 f7       	brne	.-18     	; 0x6b68 <xio_rs485_queue_RX_string+0xc>
		xio_rs485_queue_RX_char(c);
	}
}
    6b7a:	df 91       	pop	r29
    6b7c:	cf 91       	pop	r28
    6b7e:	1f 91       	pop	r17
    6b80:	08 95       	ret

00006b82 <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC0 data register empty
{
    6b82:	1f 92       	push	r1
    6b84:	0f 92       	push	r0
    6b86:	0f b6       	in	r0, 0x3f	; 63
    6b88:	0f 92       	push	r0
    6b8a:	0b b6       	in	r0, 0x3b	; 59
    6b8c:	0f 92       	push	r0
    6b8e:	11 24       	eor	r1, r1
    6b90:	8f 93       	push	r24
    6b92:	9f 93       	push	r25
    6b94:	af 93       	push	r26
    6b96:	bf 93       	push	r27
    6b98:	ef 93       	push	r30
    6b9a:	ff 93       	push	r31
	if (fr.tx_buf_head == fr.tx_buf_tail) {			// buffer empty - disable ints
    6b9c:	90 91 21 24 	lds	r25, 0x2421
    6ba0:	80 91 20 24 	lds	r24, 0x2420
    6ba4:	98 17       	cp	r25, r24
    6ba6:	39 f4       	brne	.+14     	; 0x6bb6 <__vector_29+0x34>
		fr.usart->CTRLA = USART_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    6ba8:	e0 91 47 24 	lds	r30, 0x2447
    6bac:	f0 91 48 24 	lds	r31, 0x2448
    6bb0:	80 e2       	ldi	r24, 0x20	; 32
    6bb2:	83 83       	std	Z+3, r24	; 0x03
    6bb4:	1e c0       	rjmp	.+60     	; 0x6bf2 <__vector_29+0x70>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(fr.flags)) {
    6bb6:	80 91 12 24 	lds	r24, 0x2412
    6bba:	90 91 13 24 	lds	r25, 0x2413
    6bbe:	93 fd       	sbrc	r25, 3
    6bc0:	18 c0       	rjmp	.+48     	; 0x6bf2 <__vector_29+0x70>
		if (--(fr.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    6bc2:	80 91 20 24 	lds	r24, 0x2420
    6bc6:	81 50       	subi	r24, 0x01	; 1
    6bc8:	80 93 20 24 	sts	0x2420, r24
    6bcc:	80 91 20 24 	lds	r24, 0x2420
    6bd0:	88 23       	and	r24, r24
    6bd2:	19 f4       	brne	.+6      	; 0x6bda <__vector_29+0x58>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6bd4:	81 e1       	ldi	r24, 0x11	; 17
    6bd6:	80 93 20 24 	sts	0x2420, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];	// write char to TX DATA register
    6bda:	e0 91 47 24 	lds	r30, 0x2447
    6bde:	f0 91 48 24 	lds	r31, 0x2448
    6be2:	a0 91 20 24 	lds	r26, 0x2420
    6be6:	b0 e0       	ldi	r27, 0x00	; 0
    6be8:	ae 5e       	subi	r26, 0xEE	; 238
    6bea:	bb 4d       	sbci	r27, 0xDB	; 219
    6bec:	93 96       	adiw	r26, 0x23	; 35
    6bee:	8c 91       	ld	r24, X
    6bf0:	80 83       	st	Z, r24
	}
}
    6bf2:	ff 91       	pop	r31
    6bf4:	ef 91       	pop	r30
    6bf6:	bf 91       	pop	r27
    6bf8:	af 91       	pop	r26
    6bfa:	9f 91       	pop	r25
    6bfc:	8f 91       	pop	r24
    6bfe:	0f 90       	pop	r0
    6c00:	0b be       	out	0x3b, r0	; 59
    6c02:	0f 90       	pop	r0
    6c04:	0f be       	out	0x3f, r0	; 63
    6c06:	0f 90       	pop	r0
    6c08:	1f 90       	pop	r1
    6c0a:	18 95       	reti

00006c0c <xio_rs485_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_rs485_putc(const char c, FILE *stream)
{
    6c0c:	48 2f       	mov	r20, r24
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(fr.flags)) {
    6c0e:	20 91 12 24 	lds	r18, 0x2412
    6c12:	30 91 13 24 	lds	r19, 0x2413
    6c16:	d9 01       	movw	r26, r18
    6c18:	a4 70       	andi	r26, 0x04	; 4
    6c1a:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	fr.tx_buf_head = fr.next_tx_buf_head;			// accept the next buffer head value
	fr.tx_buf[fr.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(fr.flags) && (c == '\n')) {			// detect LF and add a CR
    6c1c:	b9 01       	movw	r22, r18
    6c1e:	60 72       	andi	r22, 0x20	; 32
    6c20:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_rs485_putc(const char c, FILE *stream)
{
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
    6c22:	90 91 21 24 	lds	r25, 0x2421
    6c26:	91 50       	subi	r25, 0x01	; 1
    6c28:	c1 f4       	brne	.+48     	; 0x6c5a <xio_rs485_putc+0x4e>
    6c2a:	91 e1       	ldi	r25, 0x11	; 17
    6c2c:	16 c0       	rjmp	.+44     	; 0x6c5a <xio_rs485_putc+0x4e>
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(fr.flags)) {
    6c2e:	10 97       	sbiw	r26, 0x00	; 0
    6c30:	61 f0       	breq	.+24     	; 0x6c4a <xio_rs485_putc+0x3e>
			sleep_mode();
    6c32:	80 91 48 00 	lds	r24, 0x0048
    6c36:	81 60       	ori	r24, 0x01	; 1
    6c38:	80 93 48 00 	sts	0x0048, r24
    6c3c:	88 95       	sleep
    6c3e:	80 91 48 00 	lds	r24, 0x0048
    6c42:	8e 7f       	andi	r24, 0xFE	; 254
    6c44:	80 93 48 00 	sts	0x0048, r24
    6c48:	08 c0       	rjmp	.+16     	; 0x6c5a <xio_rs485_putc+0x4e>
    6c4a:	90 93 22 24 	sts	0x2422, r25
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
    6c4e:	83 e0       	ldi	r24, 0x03	; 3
    6c50:	80 93 14 24 	sts	0x2414, r24
    6c54:	2f ef       	ldi	r18, 0xFF	; 255
    6c56:	3f ef       	ldi	r19, 0xFF	; 255
    6c58:	54 c0       	rjmp	.+168    	; 0x6d02 <xio_rs485_putc+0xf6>
int xio_rs485_putc(const char c, FILE *stream)
{
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
    6c5a:	80 91 20 24 	lds	r24, 0x2420
    6c5e:	98 17       	cp	r25, r24
    6c60:	31 f3       	breq	.-52     	; 0x6c2e <xio_rs485_putc+0x22>
			fr.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	fr.tx_buf_head = fr.next_tx_buf_head;			// accept the next buffer head value
    6c62:	90 93 21 24 	sts	0x2421, r25
	fr.tx_buf[fr.tx_buf_head] = c;				// ...and write char to buffer
    6c66:	e0 91 21 24 	lds	r30, 0x2421
    6c6a:	f0 e0       	ldi	r31, 0x00	; 0
    6c6c:	ee 5e       	subi	r30, 0xEE	; 238
    6c6e:	fb 4d       	sbci	r31, 0xDB	; 219
    6c70:	43 a3       	std	Z+35, r20	; 0x23

	if (CRLF(fr.flags) && (c == '\n')) {			// detect LF and add a CR
    6c72:	61 15       	cp	r22, r1
    6c74:	71 05       	cpc	r23, r1
    6c76:	21 f0       	breq	.+8      	; 0x6c80 <xio_rs485_putc+0x74>
    6c78:	4a 30       	cpi	r20, 0x0A	; 10
    6c7a:	11 f4       	brne	.+4      	; 0x6c80 <xio_rs485_putc+0x74>
    6c7c:	4d e0       	ldi	r20, 0x0D	; 13
    6c7e:	d1 cf       	rjmp	.-94     	; 0x6c22 <xio_rs485_putc+0x16>
    6c80:	90 93 22 24 	sts	0x2422, r25
		return xio_rs485_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (fr.usart->STATUS & 0x20) {
    6c84:	a0 91 47 24 	lds	r26, 0x2447
    6c88:	b0 91 48 24 	lds	r27, 0x2448
    6c8c:	11 96       	adiw	r26, 0x01	; 1
    6c8e:	8c 91       	ld	r24, X
    6c90:	11 97       	sbiw	r26, 0x01	; 1
    6c92:	85 ff       	sbrs	r24, 5
    6c94:	27 c0       	rjmp	.+78     	; 0x6ce4 <xio_rs485_putc+0xd8>
		if (fr.tx_buf_head == fr.tx_buf_tail) {	// buf might be empty if IRQ got it
    6c96:	90 91 21 24 	lds	r25, 0x2421
    6c9a:	80 91 20 24 	lds	r24, 0x2420
    6c9e:	98 17       	cp	r25, r24
    6ca0:	71 f1       	breq	.+92     	; 0x6cfe <xio_rs485_putc+0xf2>
			return (0);
		}
		fr.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    6ca2:	38 60       	ori	r19, 0x08	; 8
    6ca4:	20 93 12 24 	sts	0x2412, r18
    6ca8:	30 93 13 24 	sts	0x2413, r19
		if (--(fr.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    6cac:	80 91 20 24 	lds	r24, 0x2420
    6cb0:	81 50       	subi	r24, 0x01	; 1
    6cb2:	80 93 20 24 	sts	0x2420, r24
    6cb6:	80 91 20 24 	lds	r24, 0x2420
    6cba:	88 23       	and	r24, r24
    6cbc:	19 f4       	brne	.+6      	; 0x6cc4 <xio_rs485_putc+0xb8>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6cbe:	81 e1       	ldi	r24, 0x11	; 17
    6cc0:	80 93 20 24 	sts	0x2420, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];// write char to TX DATA register
    6cc4:	e0 91 20 24 	lds	r30, 0x2420
    6cc8:	f0 e0       	ldi	r31, 0x00	; 0
    6cca:	ee 5e       	subi	r30, 0xEE	; 238
    6ccc:	fb 4d       	sbci	r31, 0xDB	; 219
    6cce:	83 a1       	ldd	r24, Z+35	; 0x23
    6cd0:	8c 93       	st	X, r24
		fr.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    6cd2:	80 91 12 24 	lds	r24, 0x2412
    6cd6:	90 91 13 24 	lds	r25, 0x2413
    6cda:	97 7f       	andi	r25, 0xF7	; 247
    6cdc:	80 93 12 24 	sts	0x2412, r24
    6ce0:	90 93 13 24 	sts	0x2413, r25
	}
	// enable interrupts regardless
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    6ce4:	e0 91 47 24 	lds	r30, 0x2447
    6ce8:	f0 91 48 24 	lds	r31, 0x2448
    6cec:	81 e2       	ldi	r24, 0x21	; 33
    6cee:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    6cf0:	80 91 a2 00 	lds	r24, 0x00A2
    6cf4:	81 60       	ori	r24, 0x01	; 1
    6cf6:	e0 ea       	ldi	r30, 0xA0	; 160
    6cf8:	f0 e0       	ldi	r31, 0x00	; 0
    6cfa:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    6cfc:	78 94       	sei
    6cfe:	20 e0       	ldi	r18, 0x00	; 0
    6d00:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    6d02:	c9 01       	movw	r24, r18
    6d04:	08 95       	ret

00006d06 <xio_rs485_getc>:
 */

int xio_rs485_getc(FILE *stream)
{
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(fr.flags)) {
    6d06:	20 91 12 24 	lds	r18, 0x2412
    6d0a:	30 91 13 24 	lds	r19, 0x2413
    6d0e:	24 70       	andi	r18, 0x04	; 4
    6d10:	30 70       	andi	r19, 0x00	; 0
    6d12:	15 c0       	rjmp	.+42     	; 0x6d3e <xio_rs485_getc+0x38>
    6d14:	21 15       	cp	r18, r1
    6d16:	31 05       	cpc	r19, r1
    6d18:	61 f0       	breq	.+24     	; 0x6d32 <xio_rs485_getc+0x2c>
			sleep_mode();
    6d1a:	80 91 48 00 	lds	r24, 0x0048
    6d1e:	81 60       	ori	r24, 0x01	; 1
    6d20:	80 93 48 00 	sts	0x0048, r24
    6d24:	88 95       	sleep
    6d26:	80 91 48 00 	lds	r24, 0x0048
    6d2a:	8e 7f       	andi	r24, 0xFE	; 254
    6d2c:	80 93 48 00 	sts	0x0048, r24
    6d30:	06 c0       	rjmp	.+12     	; 0x6d3e <xio_rs485_getc+0x38>
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
    6d32:	83 e0       	ldi	r24, 0x03	; 3
    6d34:	80 93 14 24 	sts	0x2414, r24
    6d38:	2f ef       	ldi	r18, 0xFF	; 255
    6d3a:	3f ef       	ldi	r19, 0xFF	; 255
    6d3c:	26 c0       	rjmp	.+76     	; 0x6d8a <xio_rs485_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_rs485_getc(FILE *stream)
{
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
    6d3e:	90 91 1f 24 	lds	r25, 0x241F
    6d42:	80 91 1e 24 	lds	r24, 0x241E
    6d46:	98 17       	cp	r25, r24
    6d48:	29 f3       	breq	.-54     	; 0x6d14 <xio_rs485_getc+0xe>
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    6d4a:	80 91 1e 24 	lds	r24, 0x241E
    6d4e:	81 50       	subi	r24, 0x01	; 1
    6d50:	80 93 1e 24 	sts	0x241E, r24
    6d54:	80 91 1e 24 	lds	r24, 0x241E
    6d58:	88 23       	and	r24, r24
    6d5a:	19 f4       	brne	.+6      	; 0x6d62 <xio_rs485_getc+0x5c>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6d5c:	81 e1       	ldi	r24, 0x11	; 17
    6d5e:	80 93 1e 24 	sts	0x241E, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    6d62:	e0 91 1e 24 	lds	r30, 0x241E
    6d66:	f0 e0       	ldi	r31, 0x00	; 0
    6d68:	ee 5e       	subi	r30, 0xEE	; 238
    6d6a:	fb 4d       	sbci	r31, 0xDB	; 219
    6d6c:	81 89       	ldd	r24, Z+17	; 0x11
    6d6e:	8f 77       	andi	r24, 0x7F	; 127
    6d70:	80 93 15 24 	sts	0x2415, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[fr.c])))());
    6d74:	90 e0       	ldi	r25, 0x00	; 0
    6d76:	88 0f       	add	r24, r24
    6d78:	99 1f       	adc	r25, r25
    6d7a:	85 50       	subi	r24, 0x05	; 5
    6d7c:	94 4e       	sbci	r25, 0xE4	; 228
    6d7e:	fc 01       	movw	r30, r24
    6d80:	25 91       	lpm	r18, Z+
    6d82:	34 91       	lpm	r19, Z+
    6d84:	f9 01       	movw	r30, r18
    6d86:	19 95       	eicall
    6d88:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    6d8a:	c9 01       	movw	r24, r18
    6d8c:	08 95       	ret

00006d8e <_getc_char>:

/* xio_rs485_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    6d8e:	80 91 12 24 	lds	r24, 0x2412
    6d92:	84 ff       	sbrs	r24, 4
    6d94:	08 c0       	rjmp	.+16     	; 0x6da6 <_getc_char+0x18>
    6d96:	60 91 55 25 	lds	r22, 0x2555
    6d9a:	70 91 56 25 	lds	r23, 0x2556
    6d9e:	80 91 15 24 	lds	r24, 0x2415
    6da2:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <xio_rs485_putc>
	return(fr.c);
}
    6da6:	80 91 15 24 	lds	r24, 0x2415
    6daa:	90 e0       	ldi	r25, 0x00	; 0
    6dac:	08 95       	ret

00006dae <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(fr.flags)) fr.c = '\n';
    6dae:	90 91 12 24 	lds	r25, 0x2412
    6db2:	96 ff       	sbrs	r25, 6
    6db4:	03 c0       	rjmp	.+6      	; 0x6dbc <_getc_NEWLINE+0xe>
    6db6:	8a e0       	ldi	r24, 0x0A	; 10
    6db8:	80 93 15 24 	sts	0x2415, r24
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    6dbc:	94 ff       	sbrs	r25, 4
    6dbe:	08 c0       	rjmp	.+16     	; 0x6dd0 <_getc_NEWLINE+0x22>
    6dc0:	60 91 55 25 	lds	r22, 0x2555
    6dc4:	70 91 56 25 	lds	r23, 0x2556
    6dc8:	80 91 15 24 	lds	r24, 0x2415
    6dcc:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <xio_rs485_putc>
	return(fr.c);
}
    6dd0:	80 91 15 24 	lds	r24, 0x2415
    6dd4:	90 e0       	ldi	r25, 0x00	; 0
    6dd6:	08 95       	ret

00006dd8 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(fr.flags)) {
    6dd8:	80 91 12 24 	lds	r24, 0x2412
    6ddc:	87 ff       	sbrs	r24, 7
    6dde:	03 c0       	rjmp	.+6      	; 0x6de6 <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    6de0:	0e 94 d7 36 	call	0x6dae	; 0x6dae <_getc_NEWLINE>
    6de4:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    6de6:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <_getc_char>
}
    6dea:	08 95       	ret

00006dec <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	fr.sig = XIO_SIG_DELETE;
    6dec:	8a e0       	ldi	r24, 0x0A	; 10
    6dee:	80 93 14 24 	sts	0x2414, r24
	return(_FDEV_ERR);
}
    6df2:	8f ef       	ldi	r24, 0xFF	; 255
    6df4:	9f ef       	ldi	r25, 0xFF	; 255
    6df6:	08 95       	ret

00006df8 <_getc_KILL>:

static int _getc_KILL(void)
{
	fr.sig = XIO_SIG_KILL;
    6df8:	84 e0       	ldi	r24, 0x04	; 4
    6dfa:	80 93 14 24 	sts	0x2414, r24
	return(_FDEV_ERR);
}
    6dfe:	8f ef       	ldi	r24, 0xFF	; 255
    6e00:	9f ef       	ldi	r25, 0xFF	; 255
    6e02:	08 95       	ret

00006e04 <_getc_PAUSE>:

static int _getc_PAUSE(void)
{
	fr.sig = XIO_SIG_PAUSE;
    6e04:	86 e0       	ldi	r24, 0x06	; 6
    6e06:	80 93 14 24 	sts	0x2414, r24
	return(_FDEV_ERR);
}
    6e0a:	8f ef       	ldi	r24, 0xFF	; 255
    6e0c:	9f ef       	ldi	r25, 0xFF	; 255
    6e0e:	08 95       	ret

00006e10 <_getc_RESUME>:

static int _getc_RESUME(void)
{
	fr.sig = XIO_SIG_RESUME;
    6e10:	87 e0       	ldi	r24, 0x07	; 7
    6e12:	80 93 14 24 	sts	0x2414, r24
	return(_FDEV_ERR);
}
    6e16:	8f ef       	ldi	r24, 0xFF	; 255
    6e18:	9f ef       	ldi	r25, 0xFF	; 255
    6e1a:	08 95       	ret

00006e1c <_getc_SHIFTOUT>:

static int _getc_SHIFTOUT(void)
{
	fr.sig = XIO_SIG_SHIFTOUT;
    6e1c:	88 e0       	ldi	r24, 0x08	; 8
    6e1e:	80 93 14 24 	sts	0x2414, r24
	return(_FDEV_ERR);
}
    6e22:	8f ef       	ldi	r24, 0xFF	; 255
    6e24:	9f ef       	ldi	r25, 0xFF	; 255
    6e26:	08 95       	ret

00006e28 <_getc_SHIFTIN>:

static int _getc_SHIFTIN(void)
{
	fr.sig = XIO_SIG_SHIFTIN;
    6e28:	89 e0       	ldi	r24, 0x09	; 9
    6e2a:	80 93 14 24 	sts	0x2414, r24
	return(_FDEV_ERR);
}
    6e2e:	8f ef       	ldi	r24, 0xFF	; 255
    6e30:	9f ef       	ldi	r25, 0xFF	; 255
    6e32:	08 95       	ret

00006e34 <xio_rs485_readln>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_rs485_readln(char *buf, uint8_t len)
{
	if (!IN_LINE(fr.flags)) {					// first time thru initializations
    6e34:	20 91 12 24 	lds	r18, 0x2412
    6e38:	30 91 13 24 	lds	r19, 0x2413
    6e3c:	36 fd       	sbrc	r19, 6
    6e3e:	0d c0       	rjmp	.+26     	; 0x6e5a <xio_rs485_readln+0x26>
		fr.i = 0;								// zero buffer
    6e40:	10 92 16 24 	sts	0x2416, r1
		fr.len = len;							// save arg into struct 
    6e44:	60 93 17 24 	sts	0x2417, r22
		fr.buf = buf;							// save arg into struct 
    6e48:	80 93 18 24 	sts	0x2418, r24
    6e4c:	90 93 19 24 	sts	0x2419, r25
//		fr.sig = XIO_SIG_OK;					// no signal action
		fr.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    6e50:	30 64       	ori	r19, 0x40	; 64
    6e52:	20 93 12 24 	sts	0x2412, r18
    6e56:	30 93 13 24 	sts	0x2413, r19
	}
	if (fr.rx_buf_head == fr.rx_buf_tail) {		// RX ISR buffer empty
    6e5a:	90 91 1f 24 	lds	r25, 0x241F
    6e5e:	80 91 1e 24 	lds	r24, 0x241E
    6e62:	98 17       	cp	r25, r24
    6e64:	19 f4       	brne	.+6      	; 0x6e6c <xio_rs485_readln+0x38>
    6e66:	22 e0       	ldi	r18, 0x02	; 2
    6e68:	30 e0       	ldi	r19, 0x00	; 0
    6e6a:	20 c0       	rjmp	.+64     	; 0x6eac <xio_rs485_readln+0x78>
//		fr.sig = XIO_SIG_WOULDBLOCK;
		return(TG_CONTINUE);
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    6e6c:	80 91 1e 24 	lds	r24, 0x241E
    6e70:	81 50       	subi	r24, 0x01	; 1
    6e72:	80 93 1e 24 	sts	0x241E, r24
    6e76:	80 91 1e 24 	lds	r24, 0x241E
    6e7a:	88 23       	and	r24, r24
    6e7c:	19 f4       	brne	.+6      	; 0x6e84 <xio_rs485_readln+0x50>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6e7e:	81 e1       	ldi	r24, 0x11	; 17
    6e80:	80 93 1e 24 	sts	0x241E, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    6e84:	e0 91 1e 24 	lds	r30, 0x241E
    6e88:	f0 e0       	ldi	r31, 0x00	; 0
    6e8a:	ee 5e       	subi	r30, 0xEE	; 238
    6e8c:	fb 4d       	sbci	r31, 0xDB	; 219
    6e8e:	81 89       	ldd	r24, Z+17	; 0x11
    6e90:	8f 77       	andi	r24, 0x7F	; 127
    6e92:	80 93 15 24 	sts	0x2415, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[fr.c])))()); // dispatch on character
    6e96:	90 e0       	ldi	r25, 0x00	; 0
    6e98:	88 0f       	add	r24, r24
    6e9a:	99 1f       	adc	r25, r25
    6e9c:	85 50       	subi	r24, 0x05	; 5
    6e9e:	95 4e       	sbci	r25, 0xE5	; 229
    6ea0:	fc 01       	movw	r30, r24
    6ea2:	25 91       	lpm	r18, Z+
    6ea4:	34 91       	lpm	r19, Z+
    6ea6:	f9 01       	movw	r30, r18
    6ea8:	19 95       	eicall
    6eaa:	9c 01       	movw	r18, r24
}
    6eac:	c9 01       	movw	r24, r18
    6eae:	08 95       	ret

00006eb0 <_readln_char>:

/* xio_rs485_readln helper routines */

static int _readln_char(void)
{
	if (fr.i > fr.len) {						// trap buffer overflow
    6eb0:	90 91 16 24 	lds	r25, 0x2416
    6eb4:	20 91 17 24 	lds	r18, 0x2417
    6eb8:	e0 91 18 24 	lds	r30, 0x2418
    6ebc:	f0 91 19 24 	lds	r31, 0x2419
    6ec0:	29 17       	cp	r18, r25
    6ec2:	48 f4       	brcc	.+18     	; 0x6ed6 <_readln_char+0x26>
		fr.sig = XIO_SIG_EOL;
    6ec4:	81 e0       	ldi	r24, 0x01	; 1
    6ec6:	80 93 14 24 	sts	0x2414, r24
		fr.buf[fr.len] = NUL;					// fr.len is zero based
    6eca:	e2 0f       	add	r30, r18
    6ecc:	f1 1d       	adc	r31, r1
    6ece:	10 82       	st	Z, r1
    6ed0:	26 e0       	ldi	r18, 0x06	; 6
    6ed2:	30 e0       	ldi	r19, 0x00	; 0
    6ed4:	16 c0       	rjmp	.+44     	; 0x6f02 <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	fr.buf[fr.i++] = fr.c;
    6ed6:	e9 0f       	add	r30, r25
    6ed8:	f1 1d       	adc	r31, r1
    6eda:	80 91 15 24 	lds	r24, 0x2415
    6ede:	80 83       	st	Z, r24
    6ee0:	9f 5f       	subi	r25, 0xFF	; 255
    6ee2:	90 93 16 24 	sts	0x2416, r25
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);// conditional echo
    6ee6:	80 91 12 24 	lds	r24, 0x2412
    6eea:	84 ff       	sbrs	r24, 4
    6eec:	08 c0       	rjmp	.+16     	; 0x6efe <_readln_char+0x4e>
    6eee:	60 91 55 25 	lds	r22, 0x2555
    6ef2:	70 91 56 25 	lds	r23, 0x2556
    6ef6:	80 91 15 24 	lds	r24, 0x2415
    6efa:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <xio_rs485_putc>
    6efe:	22 e0       	ldi	r18, 0x02	; 2
    6f00:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_CONTINUE);						// line is still in process
}
    6f02:	c9 01       	movw	r24, r18
    6f04:	08 95       	ret

00006f06 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	fr.sig = XIO_SIG_EOL;
    6f06:	81 e0       	ldi	r24, 0x01	; 1
    6f08:	80 93 14 24 	sts	0x2414, r24
	fr.buf[fr.i] = NUL;
    6f0c:	80 91 16 24 	lds	r24, 0x2416
    6f10:	e0 91 18 24 	lds	r30, 0x2418
    6f14:	f0 91 19 24 	lds	r31, 0x2419
    6f18:	e8 0f       	add	r30, r24
    6f1a:	f1 1d       	adc	r31, r1
    6f1c:	10 82       	st	Z, r1
	fr.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    6f1e:	20 91 12 24 	lds	r18, 0x2412
    6f22:	30 91 13 24 	lds	r19, 0x2413
    6f26:	c9 01       	movw	r24, r18
    6f28:	9f 7b       	andi	r25, 0xBF	; 191
    6f2a:	80 93 12 24 	sts	0x2412, r24
    6f2e:	90 93 13 24 	sts	0x2413, r25
	if (ECHO(fr.flags)) xio_rs485_putc('\n',stdout);// echo a newline
    6f32:	24 ff       	sbrs	r18, 4
    6f34:	07 c0       	rjmp	.+14     	; 0x6f44 <_readln_NEWLINE+0x3e>
    6f36:	60 91 55 25 	lds	r22, 0x2555
    6f3a:	70 91 56 25 	lds	r23, 0x2556
    6f3e:	8a e0       	ldi	r24, 0x0A	; 10
    6f40:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <xio_rs485_putc>
	return ((int)fr.line_func(fr.buf));			// call line handler function
    6f44:	e0 91 1c 24 	lds	r30, 0x241C
    6f48:	f0 91 1d 24 	lds	r31, 0x241D
    6f4c:	80 91 18 24 	lds	r24, 0x2418
    6f50:	90 91 19 24 	lds	r25, 0x2419
    6f54:	19 95       	eicall
}
    6f56:	08 95       	ret

00006f58 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(fr.flags)) {
    6f58:	80 91 12 24 	lds	r24, 0x2412
    6f5c:	87 ff       	sbrs	r24, 7
    6f5e:	03 c0       	rjmp	.+6      	; 0x6f66 <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    6f60:	0e 94 83 37 	call	0x6f06	; 0x6f06 <_readln_NEWLINE>
    6f64:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    6f66:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <_readln_char>
	}
}
    6f6a:	08 95       	ret

00006f6c <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--fr.i >= 0) {
    6f6c:	80 91 16 24 	lds	r24, 0x2416
    6f70:	81 50       	subi	r24, 0x01	; 1
    6f72:	80 93 16 24 	sts	0x2416, r24
		if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    6f76:	80 91 12 24 	lds	r24, 0x2412
    6f7a:	84 ff       	sbrs	r24, 4
    6f7c:	08 c0       	rjmp	.+16     	; 0x6f8e <_readln_DELETE+0x22>
    6f7e:	60 91 55 25 	lds	r22, 0x2555
    6f82:	70 91 56 25 	lds	r23, 0x2556
    6f86:	80 91 15 24 	lds	r24, 0x2415
    6f8a:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <xio_rs485_putc>
	} else {
		fr.i = 0;
	}
	return (TG_CONTINUE);						// line is still in process
}
    6f8e:	82 e0       	ldi	r24, 0x02	; 2
    6f90:	90 e0       	ldi	r25, 0x00	; 0
    6f92:	08 95       	ret

00006f94 <_readln_KILL>:

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    6f94:	84 e0       	ldi	r24, 0x04	; 4
    6f96:	80 93 14 24 	sts	0x2414, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    6f9a:	e0 91 1a 24 	lds	r30, 0x241A
    6f9e:	f0 91 1b 24 	lds	r31, 0x241B
    6fa2:	19 95       	eicall
}

static int _readln_KILL(void)
{
	return _readln_SIG(XIO_SIG_KILL);
}
    6fa4:	08 95       	ret

00006fa6 <_readln_PAUSE>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    6fa6:	86 e0       	ldi	r24, 0x06	; 6
    6fa8:	80 93 14 24 	sts	0x2414, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    6fac:	e0 91 1a 24 	lds	r30, 0x241A
    6fb0:	f0 91 1b 24 	lds	r31, 0x241B
    6fb4:	19 95       	eicall
}

static int _readln_PAUSE(void)
{
	return _readln_SIG(XIO_SIG_PAUSE);
}
    6fb6:	08 95       	ret

00006fb8 <_readln_RESUME>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    6fb8:	87 e0       	ldi	r24, 0x07	; 7
    6fba:	80 93 14 24 	sts	0x2414, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    6fbe:	e0 91 1a 24 	lds	r30, 0x241A
    6fc2:	f0 91 1b 24 	lds	r31, 0x241B
    6fc6:	19 95       	eicall
}

static int _readln_RESUME(void)
{
	return _readln_SIG(XIO_SIG_RESUME);
}
    6fc8:	08 95       	ret

00006fca <_readln_SHIFTOUT>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    6fca:	88 e0       	ldi	r24, 0x08	; 8
    6fcc:	80 93 14 24 	sts	0x2414, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    6fd0:	e0 91 1a 24 	lds	r30, 0x241A
    6fd4:	f0 91 1b 24 	lds	r31, 0x241B
    6fd8:	19 95       	eicall
}

static int _readln_SHIFTOUT(void)
{
	return _readln_SIG(XIO_SIG_SHIFTOUT);
}
    6fda:	08 95       	ret

00006fdc <_readln_SHIFTIN>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    6fdc:	89 e0       	ldi	r24, 0x09	; 9
    6fde:	80 93 14 24 	sts	0x2414, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    6fe2:	e0 91 1a 24 	lds	r30, 0x241A
    6fe6:	f0 91 1b 24 	lds	r31, 0x241B
    6fea:	19 95       	eicall
}

static int _readln_SHIFTIN(void)
{
	return _readln_SIG(XIO_SIG_SHIFTIN);
}
    6fec:	08 95       	ret

00006fee <__udivdi3>:
    6fee:	ae e5       	ldi	r26, 0x5E	; 94
    6ff0:	b0 e0       	ldi	r27, 0x00	; 0
    6ff2:	ed ef       	ldi	r30, 0xFD	; 253
    6ff4:	f7 e3       	ldi	r31, 0x37	; 55
    6ff6:	0c 94 8a 46 	jmp	0x8d14	; 0x8d14 <__prologue_saves__>
    6ffa:	a8 e0       	ldi	r26, 0x08	; 8
    6ffc:	4e 01       	movw	r8, r28
    6ffe:	08 94       	sec
    7000:	81 1c       	adc	r8, r1
    7002:	91 1c       	adc	r9, r1
    7004:	f4 01       	movw	r30, r8
    7006:	6a 2e       	mov	r6, r26
    7008:	11 92       	st	Z+, r1
    700a:	6a 94       	dec	r6
    700c:	e9 f7       	brne	.-6      	; 0x7008 <__udivdi3+0x1a>
    700e:	29 83       	std	Y+1, r18	; 0x01
    7010:	3a 83       	std	Y+2, r19	; 0x02
    7012:	4b 83       	std	Y+3, r20	; 0x03
    7014:	5c 83       	std	Y+4, r21	; 0x04
    7016:	6d 83       	std	Y+5, r22	; 0x05
    7018:	7e 83       	std	Y+6, r23	; 0x06
    701a:	8f 83       	std	Y+7, r24	; 0x07
    701c:	98 87       	std	Y+8, r25	; 0x08
    701e:	ce 01       	movw	r24, r28
    7020:	09 96       	adiw	r24, 0x09	; 9
    7022:	fc 01       	movw	r30, r24
    7024:	11 92       	st	Z+, r1
    7026:	aa 95       	dec	r26
    7028:	e9 f7       	brne	.-6      	; 0x7024 <__udivdi3+0x36>
    702a:	a9 86       	std	Y+9, r10	; 0x09
    702c:	ba 86       	std	Y+10, r11	; 0x0a
    702e:	cb 86       	std	Y+11, r12	; 0x0b
    7030:	dc 86       	std	Y+12, r13	; 0x0c
    7032:	ed 86       	std	Y+13, r14	; 0x0d
    7034:	fe 86       	std	Y+14, r15	; 0x0e
    7036:	0f 87       	std	Y+15, r16	; 0x0f
    7038:	18 8b       	std	Y+16, r17	; 0x10
    703a:	29 84       	ldd	r2, Y+9	; 0x09
    703c:	3a 84       	ldd	r3, Y+10	; 0x0a
    703e:	4b 84       	ldd	r4, Y+11	; 0x0b
    7040:	5c 84       	ldd	r5, Y+12	; 0x0c
    7042:	ed 84       	ldd	r14, Y+13	; 0x0d
    7044:	fe 84       	ldd	r15, Y+14	; 0x0e
    7046:	0f 85       	ldd	r16, Y+15	; 0x0f
    7048:	18 89       	ldd	r17, Y+16	; 0x10
    704a:	69 80       	ldd	r6, Y+1	; 0x01
    704c:	7a 80       	ldd	r7, Y+2	; 0x02
    704e:	8b 80       	ldd	r8, Y+3	; 0x03
    7050:	9c 80       	ldd	r9, Y+4	; 0x04
    7052:	6d a6       	std	Y+45, r6	; 0x2d
    7054:	7e a6       	std	Y+46, r7	; 0x2e
    7056:	8f a6       	std	Y+47, r8	; 0x2f
    7058:	98 aa       	std	Y+48, r9	; 0x30
    705a:	6d 80       	ldd	r6, Y+5	; 0x05
    705c:	7e 80       	ldd	r7, Y+6	; 0x06
    705e:	8f 80       	ldd	r8, Y+7	; 0x07
    7060:	98 84       	ldd	r9, Y+8	; 0x08
    7062:	e1 14       	cp	r14, r1
    7064:	f1 04       	cpc	r15, r1
    7066:	01 05       	cpc	r16, r1
    7068:	11 05       	cpc	r17, r1
    706a:	09 f0       	breq	.+2      	; 0x706e <__udivdi3+0x80>
    706c:	b3 c3       	rjmp	.+1894   	; 0x77d4 <__udivdi3+0x7e6>
    706e:	62 14       	cp	r6, r2
    7070:	73 04       	cpc	r7, r3
    7072:	84 04       	cpc	r8, r4
    7074:	95 04       	cpc	r9, r5
    7076:	08 f0       	brcs	.+2      	; 0x707a <__udivdi3+0x8c>
    7078:	3d c1       	rjmp	.+634    	; 0x72f4 <__udivdi3+0x306>
    707a:	00 e0       	ldi	r16, 0x00	; 0
    707c:	20 16       	cp	r2, r16
    707e:	00 e0       	ldi	r16, 0x00	; 0
    7080:	30 06       	cpc	r3, r16
    7082:	01 e0       	ldi	r16, 0x01	; 1
    7084:	40 06       	cpc	r4, r16
    7086:	00 e0       	ldi	r16, 0x00	; 0
    7088:	50 06       	cpc	r5, r16
    708a:	88 f4       	brcc	.+34     	; 0x70ae <__udivdi3+0xc0>
    708c:	1f ef       	ldi	r17, 0xFF	; 255
    708e:	21 16       	cp	r2, r17
    7090:	31 04       	cpc	r3, r1
    7092:	41 04       	cpc	r4, r1
    7094:	51 04       	cpc	r5, r1
    7096:	39 f0       	breq	.+14     	; 0x70a6 <__udivdi3+0xb8>
    7098:	30 f0       	brcs	.+12     	; 0x70a6 <__udivdi3+0xb8>
    709a:	48 e0       	ldi	r20, 0x08	; 8
    709c:	e4 2e       	mov	r14, r20
    709e:	f1 2c       	mov	r15, r1
    70a0:	01 2d       	mov	r16, r1
    70a2:	11 2d       	mov	r17, r1
    70a4:	18 c0       	rjmp	.+48     	; 0x70d6 <__udivdi3+0xe8>
    70a6:	ee 24       	eor	r14, r14
    70a8:	ff 24       	eor	r15, r15
    70aa:	87 01       	movw	r16, r14
    70ac:	14 c0       	rjmp	.+40     	; 0x70d6 <__udivdi3+0xe8>
    70ae:	20 e0       	ldi	r18, 0x00	; 0
    70b0:	22 16       	cp	r2, r18
    70b2:	20 e0       	ldi	r18, 0x00	; 0
    70b4:	32 06       	cpc	r3, r18
    70b6:	20 e0       	ldi	r18, 0x00	; 0
    70b8:	42 06       	cpc	r4, r18
    70ba:	21 e0       	ldi	r18, 0x01	; 1
    70bc:	52 06       	cpc	r5, r18
    70be:	30 f0       	brcs	.+12     	; 0x70cc <__udivdi3+0xde>
    70c0:	38 e1       	ldi	r19, 0x18	; 24
    70c2:	e3 2e       	mov	r14, r19
    70c4:	f1 2c       	mov	r15, r1
    70c6:	01 2d       	mov	r16, r1
    70c8:	11 2d       	mov	r17, r1
    70ca:	05 c0       	rjmp	.+10     	; 0x70d6 <__udivdi3+0xe8>
    70cc:	20 e1       	ldi	r18, 0x10	; 16
    70ce:	e2 2e       	mov	r14, r18
    70d0:	f1 2c       	mov	r15, r1
    70d2:	01 2d       	mov	r16, r1
    70d4:	11 2d       	mov	r17, r1
    70d6:	d2 01       	movw	r26, r4
    70d8:	c1 01       	movw	r24, r2
    70da:	0e 2c       	mov	r0, r14
    70dc:	04 c0       	rjmp	.+8      	; 0x70e6 <__udivdi3+0xf8>
    70de:	b6 95       	lsr	r27
    70e0:	a7 95       	ror	r26
    70e2:	97 95       	ror	r25
    70e4:	87 95       	ror	r24
    70e6:	0a 94       	dec	r0
    70e8:	d2 f7       	brpl	.-12     	; 0x70de <__udivdi3+0xf0>
    70ea:	86 5d       	subi	r24, 0xD6	; 214
    70ec:	9f 4d       	sbci	r25, 0xDF	; 223
    70ee:	dc 01       	movw	r26, r24
    70f0:	2c 91       	ld	r18, X
    70f2:	80 e2       	ldi	r24, 0x20	; 32
    70f4:	90 e0       	ldi	r25, 0x00	; 0
    70f6:	a0 e0       	ldi	r26, 0x00	; 0
    70f8:	b0 e0       	ldi	r27, 0x00	; 0
    70fa:	8e 19       	sub	r24, r14
    70fc:	9f 09       	sbc	r25, r15
    70fe:	a0 0b       	sbc	r26, r16
    7100:	b1 0b       	sbc	r27, r17
    7102:	7c 01       	movw	r14, r24
    7104:	8d 01       	movw	r16, r26
    7106:	e2 1a       	sub	r14, r18
    7108:	f1 08       	sbc	r15, r1
    710a:	01 09       	sbc	r16, r1
    710c:	11 09       	sbc	r17, r1
    710e:	e1 14       	cp	r14, r1
    7110:	f1 04       	cpc	r15, r1
    7112:	01 05       	cpc	r16, r1
    7114:	11 05       	cpc	r17, r1
    7116:	a1 f1       	breq	.+104    	; 0x7180 <__udivdi3+0x192>
    7118:	0e 2c       	mov	r0, r14
    711a:	04 c0       	rjmp	.+8      	; 0x7124 <__udivdi3+0x136>
    711c:	22 0c       	add	r2, r2
    711e:	33 1c       	adc	r3, r3
    7120:	44 1c       	adc	r4, r4
    7122:	55 1c       	adc	r5, r5
    7124:	0a 94       	dec	r0
    7126:	d2 f7       	brpl	.-12     	; 0x711c <__udivdi3+0x12e>
    7128:	a4 01       	movw	r20, r8
    712a:	93 01       	movw	r18, r6
    712c:	0e 2c       	mov	r0, r14
    712e:	04 c0       	rjmp	.+8      	; 0x7138 <__udivdi3+0x14a>
    7130:	22 0f       	add	r18, r18
    7132:	33 1f       	adc	r19, r19
    7134:	44 1f       	adc	r20, r20
    7136:	55 1f       	adc	r21, r21
    7138:	0a 94       	dec	r0
    713a:	d2 f7       	brpl	.-12     	; 0x7130 <__udivdi3+0x142>
    713c:	80 e2       	ldi	r24, 0x20	; 32
    713e:	90 e0       	ldi	r25, 0x00	; 0
    7140:	8e 19       	sub	r24, r14
    7142:	9f 09       	sbc	r25, r15
    7144:	6d a4       	ldd	r6, Y+45	; 0x2d
    7146:	7e a4       	ldd	r7, Y+46	; 0x2e
    7148:	8f a4       	ldd	r8, Y+47	; 0x2f
    714a:	98 a8       	ldd	r9, Y+48	; 0x30
    714c:	04 c0       	rjmp	.+8      	; 0x7156 <__udivdi3+0x168>
    714e:	96 94       	lsr	r9
    7150:	87 94       	ror	r8
    7152:	77 94       	ror	r7
    7154:	67 94       	ror	r6
    7156:	8a 95       	dec	r24
    7158:	d2 f7       	brpl	.-12     	; 0x714e <__udivdi3+0x160>
    715a:	62 2a       	or	r6, r18
    715c:	73 2a       	or	r7, r19
    715e:	84 2a       	or	r8, r20
    7160:	95 2a       	or	r9, r21
    7162:	ad a4       	ldd	r10, Y+45	; 0x2d
    7164:	be a4       	ldd	r11, Y+46	; 0x2e
    7166:	cf a4       	ldd	r12, Y+47	; 0x2f
    7168:	d8 a8       	ldd	r13, Y+48	; 0x30
    716a:	04 c0       	rjmp	.+8      	; 0x7174 <__udivdi3+0x186>
    716c:	aa 0c       	add	r10, r10
    716e:	bb 1c       	adc	r11, r11
    7170:	cc 1c       	adc	r12, r12
    7172:	dd 1c       	adc	r13, r13
    7174:	ea 94       	dec	r14
    7176:	d2 f7       	brpl	.-12     	; 0x716c <__udivdi3+0x17e>
    7178:	ad a6       	std	Y+45, r10	; 0x2d
    717a:	be a6       	std	Y+46, r11	; 0x2e
    717c:	cf a6       	std	Y+47, r12	; 0x2f
    717e:	d8 aa       	std	Y+48, r13	; 0x30
    7180:	62 01       	movw	r12, r4
    7182:	ee 24       	eor	r14, r14
    7184:	ff 24       	eor	r15, r15
    7186:	cd aa       	std	Y+53, r12	; 0x35
    7188:	de aa       	std	Y+54, r13	; 0x36
    718a:	ef aa       	std	Y+55, r14	; 0x37
    718c:	f8 ae       	std	Y+56, r15	; 0x38
    718e:	92 01       	movw	r18, r4
    7190:	81 01       	movw	r16, r2
    7192:	20 70       	andi	r18, 0x00	; 0
    7194:	30 70       	andi	r19, 0x00	; 0
    7196:	09 af       	std	Y+57, r16	; 0x39
    7198:	1a af       	std	Y+58, r17	; 0x3a
    719a:	2b af       	std	Y+59, r18	; 0x3b
    719c:	3c af       	std	Y+60, r19	; 0x3c
    719e:	c4 01       	movw	r24, r8
    71a0:	b3 01       	movw	r22, r6
    71a2:	a7 01       	movw	r20, r14
    71a4:	96 01       	movw	r18, r12
    71a6:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    71aa:	7b 01       	movw	r14, r22
    71ac:	8c 01       	movw	r16, r24
    71ae:	c4 01       	movw	r24, r8
    71b0:	b3 01       	movw	r22, r6
    71b2:	2d a9       	ldd	r18, Y+53	; 0x35
    71b4:	3e a9       	ldd	r19, Y+54	; 0x36
    71b6:	4f a9       	ldd	r20, Y+55	; 0x37
    71b8:	58 ad       	ldd	r21, Y+56	; 0x38
    71ba:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    71be:	c9 01       	movw	r24, r18
    71c0:	da 01       	movw	r26, r20
    71c2:	3c 01       	movw	r6, r24
    71c4:	4d 01       	movw	r8, r26
    71c6:	c4 01       	movw	r24, r8
    71c8:	b3 01       	movw	r22, r6
    71ca:	29 ad       	ldd	r18, Y+57	; 0x39
    71cc:	3a ad       	ldd	r19, Y+58	; 0x3a
    71ce:	4b ad       	ldd	r20, Y+59	; 0x3b
    71d0:	5c ad       	ldd	r21, Y+60	; 0x3c
    71d2:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__mulsi3>
    71d6:	9b 01       	movw	r18, r22
    71d8:	ac 01       	movw	r20, r24
    71da:	87 01       	movw	r16, r14
    71dc:	ff 24       	eor	r15, r15
    71de:	ee 24       	eor	r14, r14
    71e0:	ad a4       	ldd	r10, Y+45	; 0x2d
    71e2:	be a4       	ldd	r11, Y+46	; 0x2e
    71e4:	cf a4       	ldd	r12, Y+47	; 0x2f
    71e6:	d8 a8       	ldd	r13, Y+48	; 0x30
    71e8:	c6 01       	movw	r24, r12
    71ea:	aa 27       	eor	r26, r26
    71ec:	bb 27       	eor	r27, r27
    71ee:	57 01       	movw	r10, r14
    71f0:	68 01       	movw	r12, r16
    71f2:	a8 2a       	or	r10, r24
    71f4:	b9 2a       	or	r11, r25
    71f6:	ca 2a       	or	r12, r26
    71f8:	db 2a       	or	r13, r27
    71fa:	a2 16       	cp	r10, r18
    71fc:	b3 06       	cpc	r11, r19
    71fe:	c4 06       	cpc	r12, r20
    7200:	d5 06       	cpc	r13, r21
    7202:	e0 f4       	brcc	.+56     	; 0x723c <__udivdi3+0x24e>
    7204:	08 94       	sec
    7206:	61 08       	sbc	r6, r1
    7208:	71 08       	sbc	r7, r1
    720a:	81 08       	sbc	r8, r1
    720c:	91 08       	sbc	r9, r1
    720e:	a2 0c       	add	r10, r2
    7210:	b3 1c       	adc	r11, r3
    7212:	c4 1c       	adc	r12, r4
    7214:	d5 1c       	adc	r13, r5
    7216:	a2 14       	cp	r10, r2
    7218:	b3 04       	cpc	r11, r3
    721a:	c4 04       	cpc	r12, r4
    721c:	d5 04       	cpc	r13, r5
    721e:	70 f0       	brcs	.+28     	; 0x723c <__udivdi3+0x24e>
    7220:	a2 16       	cp	r10, r18
    7222:	b3 06       	cpc	r11, r19
    7224:	c4 06       	cpc	r12, r20
    7226:	d5 06       	cpc	r13, r21
    7228:	48 f4       	brcc	.+18     	; 0x723c <__udivdi3+0x24e>
    722a:	08 94       	sec
    722c:	61 08       	sbc	r6, r1
    722e:	71 08       	sbc	r7, r1
    7230:	81 08       	sbc	r8, r1
    7232:	91 08       	sbc	r9, r1
    7234:	a2 0c       	add	r10, r2
    7236:	b3 1c       	adc	r11, r3
    7238:	c4 1c       	adc	r12, r4
    723a:	d5 1c       	adc	r13, r5
    723c:	a2 1a       	sub	r10, r18
    723e:	b3 0a       	sbc	r11, r19
    7240:	c4 0a       	sbc	r12, r20
    7242:	d5 0a       	sbc	r13, r21
    7244:	c6 01       	movw	r24, r12
    7246:	b5 01       	movw	r22, r10
    7248:	2d a9       	ldd	r18, Y+53	; 0x35
    724a:	3e a9       	ldd	r19, Y+54	; 0x36
    724c:	4f a9       	ldd	r20, Y+55	; 0x37
    724e:	58 ad       	ldd	r21, Y+56	; 0x38
    7250:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    7254:	7b 01       	movw	r14, r22
    7256:	8c 01       	movw	r16, r24
    7258:	c6 01       	movw	r24, r12
    725a:	b5 01       	movw	r22, r10
    725c:	2d a9       	ldd	r18, Y+53	; 0x35
    725e:	3e a9       	ldd	r19, Y+54	; 0x36
    7260:	4f a9       	ldd	r20, Y+55	; 0x37
    7262:	58 ad       	ldd	r21, Y+56	; 0x38
    7264:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    7268:	c9 01       	movw	r24, r18
    726a:	da 01       	movw	r26, r20
    726c:	5c 01       	movw	r10, r24
    726e:	6d 01       	movw	r12, r26
    7270:	c6 01       	movw	r24, r12
    7272:	b5 01       	movw	r22, r10
    7274:	29 ad       	ldd	r18, Y+57	; 0x39
    7276:	3a ad       	ldd	r19, Y+58	; 0x3a
    7278:	4b ad       	ldd	r20, Y+59	; 0x3b
    727a:	5c ad       	ldd	r21, Y+60	; 0x3c
    727c:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__mulsi3>
    7280:	9b 01       	movw	r18, r22
    7282:	ac 01       	movw	r20, r24
    7284:	87 01       	movw	r16, r14
    7286:	ff 24       	eor	r15, r15
    7288:	ee 24       	eor	r14, r14
    728a:	8d a5       	ldd	r24, Y+45	; 0x2d
    728c:	9e a5       	ldd	r25, Y+46	; 0x2e
    728e:	af a5       	ldd	r26, Y+47	; 0x2f
    7290:	b8 a9       	ldd	r27, Y+48	; 0x30
    7292:	a0 70       	andi	r26, 0x00	; 0
    7294:	b0 70       	andi	r27, 0x00	; 0
    7296:	e8 2a       	or	r14, r24
    7298:	f9 2a       	or	r15, r25
    729a:	0a 2b       	or	r16, r26
    729c:	1b 2b       	or	r17, r27
    729e:	e2 16       	cp	r14, r18
    72a0:	f3 06       	cpc	r15, r19
    72a2:	04 07       	cpc	r16, r20
    72a4:	15 07       	cpc	r17, r21
    72a6:	c0 f4       	brcc	.+48     	; 0x72d8 <__udivdi3+0x2ea>
    72a8:	08 94       	sec
    72aa:	a1 08       	sbc	r10, r1
    72ac:	b1 08       	sbc	r11, r1
    72ae:	c1 08       	sbc	r12, r1
    72b0:	d1 08       	sbc	r13, r1
    72b2:	e2 0c       	add	r14, r2
    72b4:	f3 1c       	adc	r15, r3
    72b6:	04 1d       	adc	r16, r4
    72b8:	15 1d       	adc	r17, r5
    72ba:	e2 14       	cp	r14, r2
    72bc:	f3 04       	cpc	r15, r3
    72be:	04 05       	cpc	r16, r4
    72c0:	15 05       	cpc	r17, r5
    72c2:	50 f0       	brcs	.+20     	; 0x72d8 <__udivdi3+0x2ea>
    72c4:	e2 16       	cp	r14, r18
    72c6:	f3 06       	cpc	r15, r19
    72c8:	04 07       	cpc	r16, r20
    72ca:	15 07       	cpc	r17, r21
    72cc:	28 f4       	brcc	.+10     	; 0x72d8 <__udivdi3+0x2ea>
    72ce:	08 94       	sec
    72d0:	a1 08       	sbc	r10, r1
    72d2:	b1 08       	sbc	r11, r1
    72d4:	c1 08       	sbc	r12, r1
    72d6:	d1 08       	sbc	r13, r1
    72d8:	d3 01       	movw	r26, r6
    72da:	99 27       	eor	r25, r25
    72dc:	88 27       	eor	r24, r24
    72de:	86 01       	movw	r16, r12
    72e0:	75 01       	movw	r14, r10
    72e2:	e8 2a       	or	r14, r24
    72e4:	f9 2a       	or	r15, r25
    72e6:	0a 2b       	or	r16, r26
    72e8:	1b 2b       	or	r17, r27
    72ea:	e9 aa       	std	Y+49, r14	; 0x31
    72ec:	fa aa       	std	Y+50, r15	; 0x32
    72ee:	0b ab       	std	Y+51, r16	; 0x33
    72f0:	1c ab       	std	Y+52, r17	; 0x34
    72f2:	cf c4       	rjmp	.+2462   	; 0x7c92 <__udivdi3+0xca4>
    72f4:	21 14       	cp	r2, r1
    72f6:	31 04       	cpc	r3, r1
    72f8:	41 04       	cpc	r4, r1
    72fa:	51 04       	cpc	r5, r1
    72fc:	71 f4       	brne	.+28     	; 0x731a <__udivdi3+0x32c>
    72fe:	61 e0       	ldi	r22, 0x01	; 1
    7300:	70 e0       	ldi	r23, 0x00	; 0
    7302:	80 e0       	ldi	r24, 0x00	; 0
    7304:	90 e0       	ldi	r25, 0x00	; 0
    7306:	20 e0       	ldi	r18, 0x00	; 0
    7308:	30 e0       	ldi	r19, 0x00	; 0
    730a:	40 e0       	ldi	r20, 0x00	; 0
    730c:	50 e0       	ldi	r21, 0x00	; 0
    730e:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    7312:	c9 01       	movw	r24, r18
    7314:	da 01       	movw	r26, r20
    7316:	1c 01       	movw	r2, r24
    7318:	2d 01       	movw	r4, r26
    731a:	00 e0       	ldi	r16, 0x00	; 0
    731c:	20 16       	cp	r2, r16
    731e:	00 e0       	ldi	r16, 0x00	; 0
    7320:	30 06       	cpc	r3, r16
    7322:	01 e0       	ldi	r16, 0x01	; 1
    7324:	40 06       	cpc	r4, r16
    7326:	00 e0       	ldi	r16, 0x00	; 0
    7328:	50 06       	cpc	r5, r16
    732a:	88 f4       	brcc	.+34     	; 0x734e <__udivdi3+0x360>
    732c:	1f ef       	ldi	r17, 0xFF	; 255
    732e:	21 16       	cp	r2, r17
    7330:	31 04       	cpc	r3, r1
    7332:	41 04       	cpc	r4, r1
    7334:	51 04       	cpc	r5, r1
    7336:	31 f0       	breq	.+12     	; 0x7344 <__udivdi3+0x356>
    7338:	28 f0       	brcs	.+10     	; 0x7344 <__udivdi3+0x356>
    733a:	48 e0       	ldi	r20, 0x08	; 8
    733c:	50 e0       	ldi	r21, 0x00	; 0
    733e:	60 e0       	ldi	r22, 0x00	; 0
    7340:	70 e0       	ldi	r23, 0x00	; 0
    7342:	17 c0       	rjmp	.+46     	; 0x7372 <__udivdi3+0x384>
    7344:	40 e0       	ldi	r20, 0x00	; 0
    7346:	50 e0       	ldi	r21, 0x00	; 0
    7348:	60 e0       	ldi	r22, 0x00	; 0
    734a:	70 e0       	ldi	r23, 0x00	; 0
    734c:	12 c0       	rjmp	.+36     	; 0x7372 <__udivdi3+0x384>
    734e:	20 e0       	ldi	r18, 0x00	; 0
    7350:	22 16       	cp	r2, r18
    7352:	20 e0       	ldi	r18, 0x00	; 0
    7354:	32 06       	cpc	r3, r18
    7356:	20 e0       	ldi	r18, 0x00	; 0
    7358:	42 06       	cpc	r4, r18
    735a:	21 e0       	ldi	r18, 0x01	; 1
    735c:	52 06       	cpc	r5, r18
    735e:	28 f0       	brcs	.+10     	; 0x736a <__udivdi3+0x37c>
    7360:	48 e1       	ldi	r20, 0x18	; 24
    7362:	50 e0       	ldi	r21, 0x00	; 0
    7364:	60 e0       	ldi	r22, 0x00	; 0
    7366:	70 e0       	ldi	r23, 0x00	; 0
    7368:	04 c0       	rjmp	.+8      	; 0x7372 <__udivdi3+0x384>
    736a:	40 e1       	ldi	r20, 0x10	; 16
    736c:	50 e0       	ldi	r21, 0x00	; 0
    736e:	60 e0       	ldi	r22, 0x00	; 0
    7370:	70 e0       	ldi	r23, 0x00	; 0
    7372:	d2 01       	movw	r26, r4
    7374:	c1 01       	movw	r24, r2
    7376:	04 2e       	mov	r0, r20
    7378:	04 c0       	rjmp	.+8      	; 0x7382 <__udivdi3+0x394>
    737a:	b6 95       	lsr	r27
    737c:	a7 95       	ror	r26
    737e:	97 95       	ror	r25
    7380:	87 95       	ror	r24
    7382:	0a 94       	dec	r0
    7384:	d2 f7       	brpl	.-12     	; 0x737a <__udivdi3+0x38c>
    7386:	86 5d       	subi	r24, 0xD6	; 214
    7388:	9f 4d       	sbci	r25, 0xDF	; 223
    738a:	dc 01       	movw	r26, r24
    738c:	2c 91       	ld	r18, X
    738e:	e0 e2       	ldi	r30, 0x20	; 32
    7390:	ee 2e       	mov	r14, r30
    7392:	f1 2c       	mov	r15, r1
    7394:	01 2d       	mov	r16, r1
    7396:	11 2d       	mov	r17, r1
    7398:	d8 01       	movw	r26, r16
    739a:	c7 01       	movw	r24, r14
    739c:	84 1b       	sub	r24, r20
    739e:	95 0b       	sbc	r25, r21
    73a0:	a6 0b       	sbc	r26, r22
    73a2:	b7 0b       	sbc	r27, r23
    73a4:	82 1b       	sub	r24, r18
    73a6:	91 09       	sbc	r25, r1
    73a8:	a1 09       	sbc	r26, r1
    73aa:	b1 09       	sbc	r27, r1
    73ac:	00 97       	sbiw	r24, 0x00	; 0
    73ae:	a1 05       	cpc	r26, r1
    73b0:	b1 05       	cpc	r27, r1
    73b2:	61 f4       	brne	.+24     	; 0x73cc <__udivdi3+0x3de>
    73b4:	64 01       	movw	r12, r8
    73b6:	53 01       	movw	r10, r6
    73b8:	a2 18       	sub	r10, r2
    73ba:	b3 08       	sbc	r11, r3
    73bc:	c4 08       	sbc	r12, r4
    73be:	d5 08       	sbc	r13, r5
    73c0:	31 e0       	ldi	r19, 0x01	; 1
    73c2:	63 2e       	mov	r6, r19
    73c4:	71 2c       	mov	r7, r1
    73c6:	81 2c       	mov	r8, r1
    73c8:	91 2c       	mov	r9, r1
    73ca:	1e c1       	rjmp	.+572    	; 0x7608 <__udivdi3+0x61a>
    73cc:	6f 96       	adiw	r28, 0x1f	; 31
    73ce:	8f af       	std	Y+63, r24	; 0x3f
    73d0:	6f 97       	sbiw	r28, 0x1f	; 31
    73d2:	08 2e       	mov	r0, r24
    73d4:	04 c0       	rjmp	.+8      	; 0x73de <__udivdi3+0x3f0>
    73d6:	22 0c       	add	r2, r2
    73d8:	33 1c       	adc	r3, r3
    73da:	44 1c       	adc	r4, r4
    73dc:	55 1c       	adc	r5, r5
    73de:	0a 94       	dec	r0
    73e0:	d2 f7       	brpl	.-12     	; 0x73d6 <__udivdi3+0x3e8>
    73e2:	ee 2d       	mov	r30, r14
    73e4:	e8 1b       	sub	r30, r24
    73e6:	64 01       	movw	r12, r8
    73e8:	53 01       	movw	r10, r6
    73ea:	0e 2e       	mov	r0, r30
    73ec:	04 c0       	rjmp	.+8      	; 0x73f6 <__udivdi3+0x408>
    73ee:	d6 94       	lsr	r13
    73f0:	c7 94       	ror	r12
    73f2:	b7 94       	ror	r11
    73f4:	a7 94       	ror	r10
    73f6:	0a 94       	dec	r0
    73f8:	d2 f7       	brpl	.-12     	; 0x73ee <__udivdi3+0x400>
    73fa:	a4 01       	movw	r20, r8
    73fc:	93 01       	movw	r18, r6
    73fe:	6f 96       	adiw	r28, 0x1f	; 31
    7400:	0f ac       	ldd	r0, Y+63	; 0x3f
    7402:	6f 97       	sbiw	r28, 0x1f	; 31
    7404:	04 c0       	rjmp	.+8      	; 0x740e <__udivdi3+0x420>
    7406:	22 0f       	add	r18, r18
    7408:	33 1f       	adc	r19, r19
    740a:	44 1f       	adc	r20, r20
    740c:	55 1f       	adc	r21, r21
    740e:	0a 94       	dec	r0
    7410:	d2 f7       	brpl	.-12     	; 0x7406 <__udivdi3+0x418>
    7412:	6d a4       	ldd	r6, Y+45	; 0x2d
    7414:	7e a4       	ldd	r7, Y+46	; 0x2e
    7416:	8f a4       	ldd	r8, Y+47	; 0x2f
    7418:	98 a8       	ldd	r9, Y+48	; 0x30
    741a:	0e 2e       	mov	r0, r30
    741c:	04 c0       	rjmp	.+8      	; 0x7426 <__udivdi3+0x438>
    741e:	96 94       	lsr	r9
    7420:	87 94       	ror	r8
    7422:	77 94       	ror	r7
    7424:	67 94       	ror	r6
    7426:	0a 94       	dec	r0
    7428:	d2 f7       	brpl	.-12     	; 0x741e <__udivdi3+0x430>
    742a:	84 01       	movw	r16, r8
    742c:	73 01       	movw	r14, r6
    742e:	e2 2a       	or	r14, r18
    7430:	f3 2a       	or	r15, r19
    7432:	04 2b       	or	r16, r20
    7434:	15 2b       	or	r17, r21
    7436:	e9 a6       	std	Y+41, r14	; 0x29
    7438:	fa a6       	std	Y+42, r15	; 0x2a
    743a:	0b a7       	std	Y+43, r16	; 0x2b
    743c:	1c a7       	std	Y+44, r17	; 0x2c
    743e:	32 01       	movw	r6, r4
    7440:	88 24       	eor	r8, r8
    7442:	99 24       	eor	r9, r9
    7444:	92 01       	movw	r18, r4
    7446:	81 01       	movw	r16, r2
    7448:	20 70       	andi	r18, 0x00	; 0
    744a:	30 70       	andi	r19, 0x00	; 0
    744c:	21 96       	adiw	r28, 0x01	; 1
    744e:	0c af       	std	Y+60, r16	; 0x3c
    7450:	1d af       	std	Y+61, r17	; 0x3d
    7452:	2e af       	std	Y+62, r18	; 0x3e
    7454:	3f af       	std	Y+63, r19	; 0x3f
    7456:	21 97       	sbiw	r28, 0x01	; 1
    7458:	c6 01       	movw	r24, r12
    745a:	b5 01       	movw	r22, r10
    745c:	a4 01       	movw	r20, r8
    745e:	93 01       	movw	r18, r6
    7460:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    7464:	7b 01       	movw	r14, r22
    7466:	8c 01       	movw	r16, r24
    7468:	c6 01       	movw	r24, r12
    746a:	b5 01       	movw	r22, r10
    746c:	a4 01       	movw	r20, r8
    746e:	93 01       	movw	r18, r6
    7470:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    7474:	c9 01       	movw	r24, r18
    7476:	da 01       	movw	r26, r20
    7478:	25 96       	adiw	r28, 0x05	; 5
    747a:	8c af       	std	Y+60, r24	; 0x3c
    747c:	9d af       	std	Y+61, r25	; 0x3d
    747e:	ae af       	std	Y+62, r26	; 0x3e
    7480:	bf af       	std	Y+63, r27	; 0x3f
    7482:	25 97       	sbiw	r28, 0x05	; 5
    7484:	bc 01       	movw	r22, r24
    7486:	cd 01       	movw	r24, r26
    7488:	21 96       	adiw	r28, 0x01	; 1
    748a:	2c ad       	ldd	r18, Y+60	; 0x3c
    748c:	3d ad       	ldd	r19, Y+61	; 0x3d
    748e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7490:	5f ad       	ldd	r21, Y+63	; 0x3f
    7492:	21 97       	sbiw	r28, 0x01	; 1
    7494:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__mulsi3>
    7498:	9b 01       	movw	r18, r22
    749a:	ac 01       	movw	r20, r24
    749c:	87 01       	movw	r16, r14
    749e:	ff 24       	eor	r15, r15
    74a0:	ee 24       	eor	r14, r14
    74a2:	a9 a4       	ldd	r10, Y+41	; 0x29
    74a4:	ba a4       	ldd	r11, Y+42	; 0x2a
    74a6:	cb a4       	ldd	r12, Y+43	; 0x2b
    74a8:	dc a4       	ldd	r13, Y+44	; 0x2c
    74aa:	c6 01       	movw	r24, r12
    74ac:	aa 27       	eor	r26, r26
    74ae:	bb 27       	eor	r27, r27
    74b0:	5c 01       	movw	r10, r24
    74b2:	6d 01       	movw	r12, r26
    74b4:	ae 28       	or	r10, r14
    74b6:	bf 28       	or	r11, r15
    74b8:	c0 2a       	or	r12, r16
    74ba:	d1 2a       	or	r13, r17
    74bc:	a2 16       	cp	r10, r18
    74be:	b3 06       	cpc	r11, r19
    74c0:	c4 06       	cpc	r12, r20
    74c2:	d5 06       	cpc	r13, r21
    74c4:	60 f5       	brcc	.+88     	; 0x751e <__udivdi3+0x530>
    74c6:	25 96       	adiw	r28, 0x05	; 5
    74c8:	6c ad       	ldd	r22, Y+60	; 0x3c
    74ca:	7d ad       	ldd	r23, Y+61	; 0x3d
    74cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    74ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    74d0:	25 97       	sbiw	r28, 0x05	; 5
    74d2:	61 50       	subi	r22, 0x01	; 1
    74d4:	70 40       	sbci	r23, 0x00	; 0
    74d6:	80 40       	sbci	r24, 0x00	; 0
    74d8:	90 40       	sbci	r25, 0x00	; 0
    74da:	25 96       	adiw	r28, 0x05	; 5
    74dc:	6c af       	std	Y+60, r22	; 0x3c
    74de:	7d af       	std	Y+61, r23	; 0x3d
    74e0:	8e af       	std	Y+62, r24	; 0x3e
    74e2:	9f af       	std	Y+63, r25	; 0x3f
    74e4:	25 97       	sbiw	r28, 0x05	; 5
    74e6:	a2 0c       	add	r10, r2
    74e8:	b3 1c       	adc	r11, r3
    74ea:	c4 1c       	adc	r12, r4
    74ec:	d5 1c       	adc	r13, r5
    74ee:	a2 14       	cp	r10, r2
    74f0:	b3 04       	cpc	r11, r3
    74f2:	c4 04       	cpc	r12, r4
    74f4:	d5 04       	cpc	r13, r5
    74f6:	98 f0       	brcs	.+38     	; 0x751e <__udivdi3+0x530>
    74f8:	a2 16       	cp	r10, r18
    74fa:	b3 06       	cpc	r11, r19
    74fc:	c4 06       	cpc	r12, r20
    74fe:	d5 06       	cpc	r13, r21
    7500:	70 f4       	brcc	.+28     	; 0x751e <__udivdi3+0x530>
    7502:	61 50       	subi	r22, 0x01	; 1
    7504:	70 40       	sbci	r23, 0x00	; 0
    7506:	80 40       	sbci	r24, 0x00	; 0
    7508:	90 40       	sbci	r25, 0x00	; 0
    750a:	25 96       	adiw	r28, 0x05	; 5
    750c:	6c af       	std	Y+60, r22	; 0x3c
    750e:	7d af       	std	Y+61, r23	; 0x3d
    7510:	8e af       	std	Y+62, r24	; 0x3e
    7512:	9f af       	std	Y+63, r25	; 0x3f
    7514:	25 97       	sbiw	r28, 0x05	; 5
    7516:	a2 0c       	add	r10, r2
    7518:	b3 1c       	adc	r11, r3
    751a:	c4 1c       	adc	r12, r4
    751c:	d5 1c       	adc	r13, r5
    751e:	a2 1a       	sub	r10, r18
    7520:	b3 0a       	sbc	r11, r19
    7522:	c4 0a       	sbc	r12, r20
    7524:	d5 0a       	sbc	r13, r21
    7526:	c6 01       	movw	r24, r12
    7528:	b5 01       	movw	r22, r10
    752a:	a4 01       	movw	r20, r8
    752c:	93 01       	movw	r18, r6
    752e:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    7532:	7b 01       	movw	r14, r22
    7534:	8c 01       	movw	r16, r24
    7536:	c6 01       	movw	r24, r12
    7538:	b5 01       	movw	r22, r10
    753a:	a4 01       	movw	r20, r8
    753c:	93 01       	movw	r18, r6
    753e:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    7542:	c9 01       	movw	r24, r18
    7544:	da 01       	movw	r26, r20
    7546:	3c 01       	movw	r6, r24
    7548:	4d 01       	movw	r8, r26
    754a:	c4 01       	movw	r24, r8
    754c:	b3 01       	movw	r22, r6
    754e:	21 96       	adiw	r28, 0x01	; 1
    7550:	2c ad       	ldd	r18, Y+60	; 0x3c
    7552:	3d ad       	ldd	r19, Y+61	; 0x3d
    7554:	4e ad       	ldd	r20, Y+62	; 0x3e
    7556:	5f ad       	ldd	r21, Y+63	; 0x3f
    7558:	21 97       	sbiw	r28, 0x01	; 1
    755a:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__mulsi3>
    755e:	9b 01       	movw	r18, r22
    7560:	ac 01       	movw	r20, r24
    7562:	87 01       	movw	r16, r14
    7564:	ff 24       	eor	r15, r15
    7566:	ee 24       	eor	r14, r14
    7568:	89 a5       	ldd	r24, Y+41	; 0x29
    756a:	9a a5       	ldd	r25, Y+42	; 0x2a
    756c:	ab a5       	ldd	r26, Y+43	; 0x2b
    756e:	bc a5       	ldd	r27, Y+44	; 0x2c
    7570:	a0 70       	andi	r26, 0x00	; 0
    7572:	b0 70       	andi	r27, 0x00	; 0
    7574:	57 01       	movw	r10, r14
    7576:	68 01       	movw	r12, r16
    7578:	a8 2a       	or	r10, r24
    757a:	b9 2a       	or	r11, r25
    757c:	ca 2a       	or	r12, r26
    757e:	db 2a       	or	r13, r27
    7580:	a2 16       	cp	r10, r18
    7582:	b3 06       	cpc	r11, r19
    7584:	c4 06       	cpc	r12, r20
    7586:	d5 06       	cpc	r13, r21
    7588:	e0 f4       	brcc	.+56     	; 0x75c2 <__udivdi3+0x5d4>
    758a:	08 94       	sec
    758c:	61 08       	sbc	r6, r1
    758e:	71 08       	sbc	r7, r1
    7590:	81 08       	sbc	r8, r1
    7592:	91 08       	sbc	r9, r1
    7594:	a2 0c       	add	r10, r2
    7596:	b3 1c       	adc	r11, r3
    7598:	c4 1c       	adc	r12, r4
    759a:	d5 1c       	adc	r13, r5
    759c:	a2 14       	cp	r10, r2
    759e:	b3 04       	cpc	r11, r3
    75a0:	c4 04       	cpc	r12, r4
    75a2:	d5 04       	cpc	r13, r5
    75a4:	70 f0       	brcs	.+28     	; 0x75c2 <__udivdi3+0x5d4>
    75a6:	a2 16       	cp	r10, r18
    75a8:	b3 06       	cpc	r11, r19
    75aa:	c4 06       	cpc	r12, r20
    75ac:	d5 06       	cpc	r13, r21
    75ae:	48 f4       	brcc	.+18     	; 0x75c2 <__udivdi3+0x5d4>
    75b0:	08 94       	sec
    75b2:	61 08       	sbc	r6, r1
    75b4:	71 08       	sbc	r7, r1
    75b6:	81 08       	sbc	r8, r1
    75b8:	91 08       	sbc	r9, r1
    75ba:	a2 0c       	add	r10, r2
    75bc:	b3 1c       	adc	r11, r3
    75be:	c4 1c       	adc	r12, r4
    75c0:	d5 1c       	adc	r13, r5
    75c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    75c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    75c6:	af a5       	ldd	r26, Y+47	; 0x2f
    75c8:	b8 a9       	ldd	r27, Y+48	; 0x30
    75ca:	6f 96       	adiw	r28, 0x1f	; 31
    75cc:	0f ac       	ldd	r0, Y+63	; 0x3f
    75ce:	6f 97       	sbiw	r28, 0x1f	; 31
    75d0:	04 c0       	rjmp	.+8      	; 0x75da <__udivdi3+0x5ec>
    75d2:	88 0f       	add	r24, r24
    75d4:	99 1f       	adc	r25, r25
    75d6:	aa 1f       	adc	r26, r26
    75d8:	bb 1f       	adc	r27, r27
    75da:	0a 94       	dec	r0
    75dc:	d2 f7       	brpl	.-12     	; 0x75d2 <__udivdi3+0x5e4>
    75de:	8d a7       	std	Y+45, r24	; 0x2d
    75e0:	9e a7       	std	Y+46, r25	; 0x2e
    75e2:	af a7       	std	Y+47, r26	; 0x2f
    75e4:	b8 ab       	std	Y+48, r27	; 0x30
    75e6:	a2 1a       	sub	r10, r18
    75e8:	b3 0a       	sbc	r11, r19
    75ea:	c4 0a       	sbc	r12, r20
    75ec:	d5 0a       	sbc	r13, r21
    75ee:	25 96       	adiw	r28, 0x05	; 5
    75f0:	ec ac       	ldd	r14, Y+60	; 0x3c
    75f2:	fd ac       	ldd	r15, Y+61	; 0x3d
    75f4:	0e ad       	ldd	r16, Y+62	; 0x3e
    75f6:	1f ad       	ldd	r17, Y+63	; 0x3f
    75f8:	25 97       	sbiw	r28, 0x05	; 5
    75fa:	d7 01       	movw	r26, r14
    75fc:	99 27       	eor	r25, r25
    75fe:	88 27       	eor	r24, r24
    7600:	68 2a       	or	r6, r24
    7602:	79 2a       	or	r7, r25
    7604:	8a 2a       	or	r8, r26
    7606:	9b 2a       	or	r9, r27
    7608:	82 01       	movw	r16, r4
    760a:	22 27       	eor	r18, r18
    760c:	33 27       	eor	r19, r19
    760e:	29 96       	adiw	r28, 0x09	; 9
    7610:	0c af       	std	Y+60, r16	; 0x3c
    7612:	1d af       	std	Y+61, r17	; 0x3d
    7614:	2e af       	std	Y+62, r18	; 0x3e
    7616:	3f af       	std	Y+63, r19	; 0x3f
    7618:	29 97       	sbiw	r28, 0x09	; 9
    761a:	a2 01       	movw	r20, r4
    761c:	91 01       	movw	r18, r2
    761e:	40 70       	andi	r20, 0x00	; 0
    7620:	50 70       	andi	r21, 0x00	; 0
    7622:	2d 96       	adiw	r28, 0x0d	; 13
    7624:	2c af       	std	Y+60, r18	; 0x3c
    7626:	3d af       	std	Y+61, r19	; 0x3d
    7628:	4e af       	std	Y+62, r20	; 0x3e
    762a:	5f af       	std	Y+63, r21	; 0x3f
    762c:	2d 97       	sbiw	r28, 0x0d	; 13
    762e:	c6 01       	movw	r24, r12
    7630:	b5 01       	movw	r22, r10
    7632:	29 96       	adiw	r28, 0x09	; 9
    7634:	2c ad       	ldd	r18, Y+60	; 0x3c
    7636:	3d ad       	ldd	r19, Y+61	; 0x3d
    7638:	4e ad       	ldd	r20, Y+62	; 0x3e
    763a:	5f ad       	ldd	r21, Y+63	; 0x3f
    763c:	29 97       	sbiw	r28, 0x09	; 9
    763e:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    7642:	7b 01       	movw	r14, r22
    7644:	8c 01       	movw	r16, r24
    7646:	c6 01       	movw	r24, r12
    7648:	b5 01       	movw	r22, r10
    764a:	29 96       	adiw	r28, 0x09	; 9
    764c:	2c ad       	ldd	r18, Y+60	; 0x3c
    764e:	3d ad       	ldd	r19, Y+61	; 0x3d
    7650:	4e ad       	ldd	r20, Y+62	; 0x3e
    7652:	5f ad       	ldd	r21, Y+63	; 0x3f
    7654:	29 97       	sbiw	r28, 0x09	; 9
    7656:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    765a:	c9 01       	movw	r24, r18
    765c:	da 01       	movw	r26, r20
    765e:	61 96       	adiw	r28, 0x11	; 17
    7660:	8c af       	std	Y+60, r24	; 0x3c
    7662:	9d af       	std	Y+61, r25	; 0x3d
    7664:	ae af       	std	Y+62, r26	; 0x3e
    7666:	bf af       	std	Y+63, r27	; 0x3f
    7668:	61 97       	sbiw	r28, 0x11	; 17
    766a:	bc 01       	movw	r22, r24
    766c:	cd 01       	movw	r24, r26
    766e:	2d 96       	adiw	r28, 0x0d	; 13
    7670:	2c ad       	ldd	r18, Y+60	; 0x3c
    7672:	3d ad       	ldd	r19, Y+61	; 0x3d
    7674:	4e ad       	ldd	r20, Y+62	; 0x3e
    7676:	5f ad       	ldd	r21, Y+63	; 0x3f
    7678:	2d 97       	sbiw	r28, 0x0d	; 13
    767a:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__mulsi3>
    767e:	9b 01       	movw	r18, r22
    7680:	ac 01       	movw	r20, r24
    7682:	87 01       	movw	r16, r14
    7684:	ff 24       	eor	r15, r15
    7686:	ee 24       	eor	r14, r14
    7688:	ad a4       	ldd	r10, Y+45	; 0x2d
    768a:	be a4       	ldd	r11, Y+46	; 0x2e
    768c:	cf a4       	ldd	r12, Y+47	; 0x2f
    768e:	d8 a8       	ldd	r13, Y+48	; 0x30
    7690:	c6 01       	movw	r24, r12
    7692:	aa 27       	eor	r26, r26
    7694:	bb 27       	eor	r27, r27
    7696:	57 01       	movw	r10, r14
    7698:	68 01       	movw	r12, r16
    769a:	a8 2a       	or	r10, r24
    769c:	b9 2a       	or	r11, r25
    769e:	ca 2a       	or	r12, r26
    76a0:	db 2a       	or	r13, r27
    76a2:	a2 16       	cp	r10, r18
    76a4:	b3 06       	cpc	r11, r19
    76a6:	c4 06       	cpc	r12, r20
    76a8:	d5 06       	cpc	r13, r21
    76aa:	60 f5       	brcc	.+88     	; 0x7704 <__udivdi3+0x716>
    76ac:	61 96       	adiw	r28, 0x11	; 17
    76ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    76b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    76b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    76b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    76b6:	61 97       	sbiw	r28, 0x11	; 17
    76b8:	61 50       	subi	r22, 0x01	; 1
    76ba:	70 40       	sbci	r23, 0x00	; 0
    76bc:	80 40       	sbci	r24, 0x00	; 0
    76be:	90 40       	sbci	r25, 0x00	; 0
    76c0:	61 96       	adiw	r28, 0x11	; 17
    76c2:	6c af       	std	Y+60, r22	; 0x3c
    76c4:	7d af       	std	Y+61, r23	; 0x3d
    76c6:	8e af       	std	Y+62, r24	; 0x3e
    76c8:	9f af       	std	Y+63, r25	; 0x3f
    76ca:	61 97       	sbiw	r28, 0x11	; 17
    76cc:	a2 0c       	add	r10, r2
    76ce:	b3 1c       	adc	r11, r3
    76d0:	c4 1c       	adc	r12, r4
    76d2:	d5 1c       	adc	r13, r5
    76d4:	a2 14       	cp	r10, r2
    76d6:	b3 04       	cpc	r11, r3
    76d8:	c4 04       	cpc	r12, r4
    76da:	d5 04       	cpc	r13, r5
    76dc:	98 f0       	brcs	.+38     	; 0x7704 <__udivdi3+0x716>
    76de:	a2 16       	cp	r10, r18
    76e0:	b3 06       	cpc	r11, r19
    76e2:	c4 06       	cpc	r12, r20
    76e4:	d5 06       	cpc	r13, r21
    76e6:	70 f4       	brcc	.+28     	; 0x7704 <__udivdi3+0x716>
    76e8:	61 50       	subi	r22, 0x01	; 1
    76ea:	70 40       	sbci	r23, 0x00	; 0
    76ec:	80 40       	sbci	r24, 0x00	; 0
    76ee:	90 40       	sbci	r25, 0x00	; 0
    76f0:	61 96       	adiw	r28, 0x11	; 17
    76f2:	6c af       	std	Y+60, r22	; 0x3c
    76f4:	7d af       	std	Y+61, r23	; 0x3d
    76f6:	8e af       	std	Y+62, r24	; 0x3e
    76f8:	9f af       	std	Y+63, r25	; 0x3f
    76fa:	61 97       	sbiw	r28, 0x11	; 17
    76fc:	a2 0c       	add	r10, r2
    76fe:	b3 1c       	adc	r11, r3
    7700:	c4 1c       	adc	r12, r4
    7702:	d5 1c       	adc	r13, r5
    7704:	a2 1a       	sub	r10, r18
    7706:	b3 0a       	sbc	r11, r19
    7708:	c4 0a       	sbc	r12, r20
    770a:	d5 0a       	sbc	r13, r21
    770c:	c6 01       	movw	r24, r12
    770e:	b5 01       	movw	r22, r10
    7710:	29 96       	adiw	r28, 0x09	; 9
    7712:	2c ad       	ldd	r18, Y+60	; 0x3c
    7714:	3d ad       	ldd	r19, Y+61	; 0x3d
    7716:	4e ad       	ldd	r20, Y+62	; 0x3e
    7718:	5f ad       	ldd	r21, Y+63	; 0x3f
    771a:	29 97       	sbiw	r28, 0x09	; 9
    771c:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    7720:	7b 01       	movw	r14, r22
    7722:	8c 01       	movw	r16, r24
    7724:	c6 01       	movw	r24, r12
    7726:	b5 01       	movw	r22, r10
    7728:	29 96       	adiw	r28, 0x09	; 9
    772a:	2c ad       	ldd	r18, Y+60	; 0x3c
    772c:	3d ad       	ldd	r19, Y+61	; 0x3d
    772e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7730:	5f ad       	ldd	r21, Y+63	; 0x3f
    7732:	29 97       	sbiw	r28, 0x09	; 9
    7734:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    7738:	c9 01       	movw	r24, r18
    773a:	da 01       	movw	r26, r20
    773c:	5c 01       	movw	r10, r24
    773e:	6d 01       	movw	r12, r26
    7740:	c6 01       	movw	r24, r12
    7742:	b5 01       	movw	r22, r10
    7744:	2d 96       	adiw	r28, 0x0d	; 13
    7746:	2c ad       	ldd	r18, Y+60	; 0x3c
    7748:	3d ad       	ldd	r19, Y+61	; 0x3d
    774a:	4e ad       	ldd	r20, Y+62	; 0x3e
    774c:	5f ad       	ldd	r21, Y+63	; 0x3f
    774e:	2d 97       	sbiw	r28, 0x0d	; 13
    7750:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__mulsi3>
    7754:	9b 01       	movw	r18, r22
    7756:	ac 01       	movw	r20, r24
    7758:	87 01       	movw	r16, r14
    775a:	ff 24       	eor	r15, r15
    775c:	ee 24       	eor	r14, r14
    775e:	8d a5       	ldd	r24, Y+45	; 0x2d
    7760:	9e a5       	ldd	r25, Y+46	; 0x2e
    7762:	af a5       	ldd	r26, Y+47	; 0x2f
    7764:	b8 a9       	ldd	r27, Y+48	; 0x30
    7766:	a0 70       	andi	r26, 0x00	; 0
    7768:	b0 70       	andi	r27, 0x00	; 0
    776a:	e8 2a       	or	r14, r24
    776c:	f9 2a       	or	r15, r25
    776e:	0a 2b       	or	r16, r26
    7770:	1b 2b       	or	r17, r27
    7772:	e2 16       	cp	r14, r18
    7774:	f3 06       	cpc	r15, r19
    7776:	04 07       	cpc	r16, r20
    7778:	15 07       	cpc	r17, r21
    777a:	c0 f4       	brcc	.+48     	; 0x77ac <__udivdi3+0x7be>
    777c:	08 94       	sec
    777e:	a1 08       	sbc	r10, r1
    7780:	b1 08       	sbc	r11, r1
    7782:	c1 08       	sbc	r12, r1
    7784:	d1 08       	sbc	r13, r1
    7786:	e2 0c       	add	r14, r2
    7788:	f3 1c       	adc	r15, r3
    778a:	04 1d       	adc	r16, r4
    778c:	15 1d       	adc	r17, r5
    778e:	e2 14       	cp	r14, r2
    7790:	f3 04       	cpc	r15, r3
    7792:	04 05       	cpc	r16, r4
    7794:	15 05       	cpc	r17, r5
    7796:	50 f0       	brcs	.+20     	; 0x77ac <__udivdi3+0x7be>
    7798:	e2 16       	cp	r14, r18
    779a:	f3 06       	cpc	r15, r19
    779c:	04 07       	cpc	r16, r20
    779e:	15 07       	cpc	r17, r21
    77a0:	28 f4       	brcc	.+10     	; 0x77ac <__udivdi3+0x7be>
    77a2:	08 94       	sec
    77a4:	a1 08       	sbc	r10, r1
    77a6:	b1 08       	sbc	r11, r1
    77a8:	c1 08       	sbc	r12, r1
    77aa:	d1 08       	sbc	r13, r1
    77ac:	61 96       	adiw	r28, 0x11	; 17
    77ae:	ec ac       	ldd	r14, Y+60	; 0x3c
    77b0:	fd ac       	ldd	r15, Y+61	; 0x3d
    77b2:	0e ad       	ldd	r16, Y+62	; 0x3e
    77b4:	1f ad       	ldd	r17, Y+63	; 0x3f
    77b6:	61 97       	sbiw	r28, 0x11	; 17
    77b8:	d7 01       	movw	r26, r14
    77ba:	99 27       	eor	r25, r25
    77bc:	88 27       	eor	r24, r24
    77be:	96 01       	movw	r18, r12
    77c0:	85 01       	movw	r16, r10
    77c2:	08 2b       	or	r16, r24
    77c4:	19 2b       	or	r17, r25
    77c6:	2a 2b       	or	r18, r26
    77c8:	3b 2b       	or	r19, r27
    77ca:	09 ab       	std	Y+49, r16	; 0x31
    77cc:	1a ab       	std	Y+50, r17	; 0x32
    77ce:	2b ab       	std	Y+51, r18	; 0x33
    77d0:	3c ab       	std	Y+52, r19	; 0x34
    77d2:	62 c2       	rjmp	.+1220   	; 0x7c98 <__udivdi3+0xcaa>
    77d4:	6e 14       	cp	r6, r14
    77d6:	7f 04       	cpc	r7, r15
    77d8:	80 06       	cpc	r8, r16
    77da:	91 06       	cpc	r9, r17
    77dc:	08 f4       	brcc	.+2      	; 0x77e0 <__udivdi3+0x7f2>
    77de:	51 c2       	rjmp	.+1186   	; 0x7c82 <__udivdi3+0xc94>
    77e0:	20 e0       	ldi	r18, 0x00	; 0
    77e2:	e2 16       	cp	r14, r18
    77e4:	20 e0       	ldi	r18, 0x00	; 0
    77e6:	f2 06       	cpc	r15, r18
    77e8:	21 e0       	ldi	r18, 0x01	; 1
    77ea:	02 07       	cpc	r16, r18
    77ec:	20 e0       	ldi	r18, 0x00	; 0
    77ee:	12 07       	cpc	r17, r18
    77f0:	88 f4       	brcc	.+34     	; 0x7814 <__udivdi3+0x826>
    77f2:	3f ef       	ldi	r19, 0xFF	; 255
    77f4:	e3 16       	cp	r14, r19
    77f6:	f1 04       	cpc	r15, r1
    77f8:	01 05       	cpc	r16, r1
    77fa:	11 05       	cpc	r17, r1
    77fc:	31 f0       	breq	.+12     	; 0x780a <__udivdi3+0x81c>
    77fe:	28 f0       	brcs	.+10     	; 0x780a <__udivdi3+0x81c>
    7800:	48 e0       	ldi	r20, 0x08	; 8
    7802:	50 e0       	ldi	r21, 0x00	; 0
    7804:	60 e0       	ldi	r22, 0x00	; 0
    7806:	70 e0       	ldi	r23, 0x00	; 0
    7808:	17 c0       	rjmp	.+46     	; 0x7838 <__udivdi3+0x84a>
    780a:	40 e0       	ldi	r20, 0x00	; 0
    780c:	50 e0       	ldi	r21, 0x00	; 0
    780e:	60 e0       	ldi	r22, 0x00	; 0
    7810:	70 e0       	ldi	r23, 0x00	; 0
    7812:	12 c0       	rjmp	.+36     	; 0x7838 <__udivdi3+0x84a>
    7814:	40 e0       	ldi	r20, 0x00	; 0
    7816:	e4 16       	cp	r14, r20
    7818:	40 e0       	ldi	r20, 0x00	; 0
    781a:	f4 06       	cpc	r15, r20
    781c:	40 e0       	ldi	r20, 0x00	; 0
    781e:	04 07       	cpc	r16, r20
    7820:	41 e0       	ldi	r20, 0x01	; 1
    7822:	14 07       	cpc	r17, r20
    7824:	28 f0       	brcs	.+10     	; 0x7830 <__udivdi3+0x842>
    7826:	48 e1       	ldi	r20, 0x18	; 24
    7828:	50 e0       	ldi	r21, 0x00	; 0
    782a:	60 e0       	ldi	r22, 0x00	; 0
    782c:	70 e0       	ldi	r23, 0x00	; 0
    782e:	04 c0       	rjmp	.+8      	; 0x7838 <__udivdi3+0x84a>
    7830:	40 e1       	ldi	r20, 0x10	; 16
    7832:	50 e0       	ldi	r21, 0x00	; 0
    7834:	60 e0       	ldi	r22, 0x00	; 0
    7836:	70 e0       	ldi	r23, 0x00	; 0
    7838:	d8 01       	movw	r26, r16
    783a:	c7 01       	movw	r24, r14
    783c:	04 2e       	mov	r0, r20
    783e:	04 c0       	rjmp	.+8      	; 0x7848 <__udivdi3+0x85a>
    7840:	b6 95       	lsr	r27
    7842:	a7 95       	ror	r26
    7844:	97 95       	ror	r25
    7846:	87 95       	ror	r24
    7848:	0a 94       	dec	r0
    784a:	d2 f7       	brpl	.-12     	; 0x7840 <__udivdi3+0x852>
    784c:	86 5d       	subi	r24, 0xD6	; 214
    784e:	9f 4d       	sbci	r25, 0xDF	; 223
    7850:	dc 01       	movw	r26, r24
    7852:	2c 91       	ld	r18, X
    7854:	30 e2       	ldi	r19, 0x20	; 32
    7856:	a3 2e       	mov	r10, r19
    7858:	b1 2c       	mov	r11, r1
    785a:	c1 2c       	mov	r12, r1
    785c:	d1 2c       	mov	r13, r1
    785e:	d6 01       	movw	r26, r12
    7860:	c5 01       	movw	r24, r10
    7862:	84 1b       	sub	r24, r20
    7864:	95 0b       	sbc	r25, r21
    7866:	a6 0b       	sbc	r26, r22
    7868:	b7 0b       	sbc	r27, r23
    786a:	82 1b       	sub	r24, r18
    786c:	91 09       	sbc	r25, r1
    786e:	a1 09       	sbc	r26, r1
    7870:	b1 09       	sbc	r27, r1
    7872:	00 97       	sbiw	r24, 0x00	; 0
    7874:	a1 05       	cpc	r26, r1
    7876:	b1 05       	cpc	r27, r1
    7878:	89 f4       	brne	.+34     	; 0x789c <__udivdi3+0x8ae>
    787a:	e6 14       	cp	r14, r6
    787c:	f7 04       	cpc	r15, r7
    787e:	08 05       	cpc	r16, r8
    7880:	19 05       	cpc	r17, r9
    7882:	08 f4       	brcc	.+2      	; 0x7886 <__udivdi3+0x898>
    7884:	f2 c1       	rjmp	.+996    	; 0x7c6a <__udivdi3+0xc7c>
    7886:	6d a4       	ldd	r6, Y+45	; 0x2d
    7888:	7e a4       	ldd	r7, Y+46	; 0x2e
    788a:	8f a4       	ldd	r8, Y+47	; 0x2f
    788c:	98 a8       	ldd	r9, Y+48	; 0x30
    788e:	62 14       	cp	r6, r2
    7890:	73 04       	cpc	r7, r3
    7892:	84 04       	cpc	r8, r4
    7894:	95 04       	cpc	r9, r5
    7896:	08 f0       	brcs	.+2      	; 0x789a <__udivdi3+0x8ac>
    7898:	e8 c1       	rjmp	.+976    	; 0x7c6a <__udivdi3+0xc7c>
    789a:	f3 c1       	rjmp	.+998    	; 0x7c82 <__udivdi3+0xc94>
    789c:	6e 96       	adiw	r28, 0x1e	; 30
    789e:	8f af       	std	Y+63, r24	; 0x3f
    78a0:	6e 97       	sbiw	r28, 0x1e	; 30
    78a2:	08 2e       	mov	r0, r24
    78a4:	04 c0       	rjmp	.+8      	; 0x78ae <__udivdi3+0x8c0>
    78a6:	ee 0c       	add	r14, r14
    78a8:	ff 1c       	adc	r15, r15
    78aa:	00 1f       	adc	r16, r16
    78ac:	11 1f       	adc	r17, r17
    78ae:	0a 94       	dec	r0
    78b0:	d2 f7       	brpl	.-12     	; 0x78a6 <__udivdi3+0x8b8>
    78b2:	6a 2d       	mov	r22, r10
    78b4:	68 1b       	sub	r22, r24
    78b6:	d2 01       	movw	r26, r4
    78b8:	c1 01       	movw	r24, r2
    78ba:	06 2e       	mov	r0, r22
    78bc:	04 c0       	rjmp	.+8      	; 0x78c6 <__udivdi3+0x8d8>
    78be:	b6 95       	lsr	r27
    78c0:	a7 95       	ror	r26
    78c2:	97 95       	ror	r25
    78c4:	87 95       	ror	r24
    78c6:	0a 94       	dec	r0
    78c8:	d2 f7       	brpl	.-12     	; 0x78be <__udivdi3+0x8d0>
    78ca:	5c 01       	movw	r10, r24
    78cc:	6d 01       	movw	r12, r26
    78ce:	ae 28       	or	r10, r14
    78d0:	bf 28       	or	r11, r15
    78d2:	c0 2a       	or	r12, r16
    78d4:	d1 2a       	or	r13, r17
    78d6:	ad a2       	std	Y+37, r10	; 0x25
    78d8:	be a2       	std	Y+38, r11	; 0x26
    78da:	cf a2       	std	Y+39, r12	; 0x27
    78dc:	d8 a6       	std	Y+40, r13	; 0x28
    78de:	72 01       	movw	r14, r4
    78e0:	61 01       	movw	r12, r2
    78e2:	6e 96       	adiw	r28, 0x1e	; 30
    78e4:	0f ac       	ldd	r0, Y+63	; 0x3f
    78e6:	6e 97       	sbiw	r28, 0x1e	; 30
    78e8:	04 c0       	rjmp	.+8      	; 0x78f2 <__udivdi3+0x904>
    78ea:	cc 0c       	add	r12, r12
    78ec:	dd 1c       	adc	r13, r13
    78ee:	ee 1c       	adc	r14, r14
    78f0:	ff 1c       	adc	r15, r15
    78f2:	0a 94       	dec	r0
    78f4:	d2 f7       	brpl	.-12     	; 0x78ea <__udivdi3+0x8fc>
    78f6:	c9 a2       	std	Y+33, r12	; 0x21
    78f8:	da a2       	std	Y+34, r13	; 0x22
    78fa:	eb a2       	std	Y+35, r14	; 0x23
    78fc:	fc a2       	std	Y+36, r15	; 0x24
    78fe:	64 01       	movw	r12, r8
    7900:	53 01       	movw	r10, r6
    7902:	06 2e       	mov	r0, r22
    7904:	04 c0       	rjmp	.+8      	; 0x790e <__udivdi3+0x920>
    7906:	d6 94       	lsr	r13
    7908:	c7 94       	ror	r12
    790a:	b7 94       	ror	r11
    790c:	a7 94       	ror	r10
    790e:	0a 94       	dec	r0
    7910:	d2 f7       	brpl	.-12     	; 0x7906 <__udivdi3+0x918>
    7912:	d4 01       	movw	r26, r8
    7914:	c3 01       	movw	r24, r6
    7916:	6e 96       	adiw	r28, 0x1e	; 30
    7918:	0f ac       	ldd	r0, Y+63	; 0x3f
    791a:	6e 97       	sbiw	r28, 0x1e	; 30
    791c:	04 c0       	rjmp	.+8      	; 0x7926 <__udivdi3+0x938>
    791e:	88 0f       	add	r24, r24
    7920:	99 1f       	adc	r25, r25
    7922:	aa 1f       	adc	r26, r26
    7924:	bb 1f       	adc	r27, r27
    7926:	0a 94       	dec	r0
    7928:	d2 f7       	brpl	.-12     	; 0x791e <__udivdi3+0x930>
    792a:	ed a4       	ldd	r14, Y+45	; 0x2d
    792c:	fe a4       	ldd	r15, Y+46	; 0x2e
    792e:	0f a5       	ldd	r16, Y+47	; 0x2f
    7930:	18 a9       	ldd	r17, Y+48	; 0x30
    7932:	04 c0       	rjmp	.+8      	; 0x793c <__udivdi3+0x94e>
    7934:	16 95       	lsr	r17
    7936:	07 95       	ror	r16
    7938:	f7 94       	ror	r15
    793a:	e7 94       	ror	r14
    793c:	6a 95       	dec	r22
    793e:	d2 f7       	brpl	.-12     	; 0x7934 <__udivdi3+0x946>
    7940:	37 01       	movw	r6, r14
    7942:	48 01       	movw	r8, r16
    7944:	68 2a       	or	r6, r24
    7946:	79 2a       	or	r7, r25
    7948:	8a 2a       	or	r8, r26
    794a:	9b 2a       	or	r9, r27
    794c:	6d 8e       	std	Y+29, r6	; 0x1d
    794e:	7e 8e       	std	Y+30, r7	; 0x1e
    7950:	8f 8e       	std	Y+31, r8	; 0x1f
    7952:	98 a2       	std	Y+32, r9	; 0x20
    7954:	ed a0       	ldd	r14, Y+37	; 0x25
    7956:	fe a0       	ldd	r15, Y+38	; 0x26
    7958:	0f a1       	ldd	r16, Y+39	; 0x27
    795a:	18 a5       	ldd	r17, Y+40	; 0x28
    795c:	38 01       	movw	r6, r16
    795e:	88 24       	eor	r8, r8
    7960:	99 24       	eor	r9, r9
    7962:	98 01       	movw	r18, r16
    7964:	87 01       	movw	r16, r14
    7966:	20 70       	andi	r18, 0x00	; 0
    7968:	30 70       	andi	r19, 0x00	; 0
    796a:	65 96       	adiw	r28, 0x15	; 21
    796c:	0c af       	std	Y+60, r16	; 0x3c
    796e:	1d af       	std	Y+61, r17	; 0x3d
    7970:	2e af       	std	Y+62, r18	; 0x3e
    7972:	3f af       	std	Y+63, r19	; 0x3f
    7974:	65 97       	sbiw	r28, 0x15	; 21
    7976:	c6 01       	movw	r24, r12
    7978:	b5 01       	movw	r22, r10
    797a:	a4 01       	movw	r20, r8
    797c:	93 01       	movw	r18, r6
    797e:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    7982:	7b 01       	movw	r14, r22
    7984:	8c 01       	movw	r16, r24
    7986:	c6 01       	movw	r24, r12
    7988:	b5 01       	movw	r22, r10
    798a:	a4 01       	movw	r20, r8
    798c:	93 01       	movw	r18, r6
    798e:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    7992:	c9 01       	movw	r24, r18
    7994:	da 01       	movw	r26, r20
    7996:	1c 01       	movw	r2, r24
    7998:	2d 01       	movw	r4, r26
    799a:	c2 01       	movw	r24, r4
    799c:	b1 01       	movw	r22, r2
    799e:	65 96       	adiw	r28, 0x15	; 21
    79a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    79a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    79a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    79a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    79a8:	65 97       	sbiw	r28, 0x15	; 21
    79aa:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__mulsi3>
    79ae:	9b 01       	movw	r18, r22
    79b0:	ac 01       	movw	r20, r24
    79b2:	87 01       	movw	r16, r14
    79b4:	ff 24       	eor	r15, r15
    79b6:	ee 24       	eor	r14, r14
    79b8:	ad 8c       	ldd	r10, Y+29	; 0x1d
    79ba:	be 8c       	ldd	r11, Y+30	; 0x1e
    79bc:	cf 8c       	ldd	r12, Y+31	; 0x1f
    79be:	d8 a0       	ldd	r13, Y+32	; 0x20
    79c0:	c6 01       	movw	r24, r12
    79c2:	aa 27       	eor	r26, r26
    79c4:	bb 27       	eor	r27, r27
    79c6:	57 01       	movw	r10, r14
    79c8:	68 01       	movw	r12, r16
    79ca:	a8 2a       	or	r10, r24
    79cc:	b9 2a       	or	r11, r25
    79ce:	ca 2a       	or	r12, r26
    79d0:	db 2a       	or	r13, r27
    79d2:	a2 16       	cp	r10, r18
    79d4:	b3 06       	cpc	r11, r19
    79d6:	c4 06       	cpc	r12, r20
    79d8:	d5 06       	cpc	r13, r21
    79da:	00 f5       	brcc	.+64     	; 0x7a1c <__udivdi3+0xa2e>
    79dc:	08 94       	sec
    79de:	21 08       	sbc	r2, r1
    79e0:	31 08       	sbc	r3, r1
    79e2:	41 08       	sbc	r4, r1
    79e4:	51 08       	sbc	r5, r1
    79e6:	ed a0       	ldd	r14, Y+37	; 0x25
    79e8:	fe a0       	ldd	r15, Y+38	; 0x26
    79ea:	0f a1       	ldd	r16, Y+39	; 0x27
    79ec:	18 a5       	ldd	r17, Y+40	; 0x28
    79ee:	ae 0c       	add	r10, r14
    79f0:	bf 1c       	adc	r11, r15
    79f2:	c0 1e       	adc	r12, r16
    79f4:	d1 1e       	adc	r13, r17
    79f6:	ae 14       	cp	r10, r14
    79f8:	bf 04       	cpc	r11, r15
    79fa:	c0 06       	cpc	r12, r16
    79fc:	d1 06       	cpc	r13, r17
    79fe:	70 f0       	brcs	.+28     	; 0x7a1c <__udivdi3+0xa2e>
    7a00:	a2 16       	cp	r10, r18
    7a02:	b3 06       	cpc	r11, r19
    7a04:	c4 06       	cpc	r12, r20
    7a06:	d5 06       	cpc	r13, r21
    7a08:	48 f4       	brcc	.+18     	; 0x7a1c <__udivdi3+0xa2e>
    7a0a:	08 94       	sec
    7a0c:	21 08       	sbc	r2, r1
    7a0e:	31 08       	sbc	r3, r1
    7a10:	41 08       	sbc	r4, r1
    7a12:	51 08       	sbc	r5, r1
    7a14:	ae 0c       	add	r10, r14
    7a16:	bf 1c       	adc	r11, r15
    7a18:	c0 1e       	adc	r12, r16
    7a1a:	d1 1e       	adc	r13, r17
    7a1c:	a2 1a       	sub	r10, r18
    7a1e:	b3 0a       	sbc	r11, r19
    7a20:	c4 0a       	sbc	r12, r20
    7a22:	d5 0a       	sbc	r13, r21
    7a24:	c6 01       	movw	r24, r12
    7a26:	b5 01       	movw	r22, r10
    7a28:	a4 01       	movw	r20, r8
    7a2a:	93 01       	movw	r18, r6
    7a2c:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    7a30:	7b 01       	movw	r14, r22
    7a32:	8c 01       	movw	r16, r24
    7a34:	c6 01       	movw	r24, r12
    7a36:	b5 01       	movw	r22, r10
    7a38:	a4 01       	movw	r20, r8
    7a3a:	93 01       	movw	r18, r6
    7a3c:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <__udivmodsi4>
    7a40:	c9 01       	movw	r24, r18
    7a42:	da 01       	movw	r26, r20
    7a44:	3c 01       	movw	r6, r24
    7a46:	4d 01       	movw	r8, r26
    7a48:	c4 01       	movw	r24, r8
    7a4a:	b3 01       	movw	r22, r6
    7a4c:	65 96       	adiw	r28, 0x15	; 21
    7a4e:	2c ad       	ldd	r18, Y+60	; 0x3c
    7a50:	3d ad       	ldd	r19, Y+61	; 0x3d
    7a52:	4e ad       	ldd	r20, Y+62	; 0x3e
    7a54:	5f ad       	ldd	r21, Y+63	; 0x3f
    7a56:	65 97       	sbiw	r28, 0x15	; 21
    7a58:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__mulsi3>
    7a5c:	9b 01       	movw	r18, r22
    7a5e:	ac 01       	movw	r20, r24
    7a60:	87 01       	movw	r16, r14
    7a62:	ff 24       	eor	r15, r15
    7a64:	ee 24       	eor	r14, r14
    7a66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7a68:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7a6a:	af 8d       	ldd	r26, Y+31	; 0x1f
    7a6c:	b8 a1       	ldd	r27, Y+32	; 0x20
    7a6e:	a0 70       	andi	r26, 0x00	; 0
    7a70:	b0 70       	andi	r27, 0x00	; 0
    7a72:	57 01       	movw	r10, r14
    7a74:	68 01       	movw	r12, r16
    7a76:	a8 2a       	or	r10, r24
    7a78:	b9 2a       	or	r11, r25
    7a7a:	ca 2a       	or	r12, r26
    7a7c:	db 2a       	or	r13, r27
    7a7e:	a2 16       	cp	r10, r18
    7a80:	b3 06       	cpc	r11, r19
    7a82:	c4 06       	cpc	r12, r20
    7a84:	d5 06       	cpc	r13, r21
    7a86:	00 f5       	brcc	.+64     	; 0x7ac8 <__udivdi3+0xada>
    7a88:	08 94       	sec
    7a8a:	61 08       	sbc	r6, r1
    7a8c:	71 08       	sbc	r7, r1
    7a8e:	81 08       	sbc	r8, r1
    7a90:	91 08       	sbc	r9, r1
    7a92:	6d a1       	ldd	r22, Y+37	; 0x25
    7a94:	7e a1       	ldd	r23, Y+38	; 0x26
    7a96:	8f a1       	ldd	r24, Y+39	; 0x27
    7a98:	98 a5       	ldd	r25, Y+40	; 0x28
    7a9a:	a6 0e       	add	r10, r22
    7a9c:	b7 1e       	adc	r11, r23
    7a9e:	c8 1e       	adc	r12, r24
    7aa0:	d9 1e       	adc	r13, r25
    7aa2:	a6 16       	cp	r10, r22
    7aa4:	b7 06       	cpc	r11, r23
    7aa6:	c8 06       	cpc	r12, r24
    7aa8:	d9 06       	cpc	r13, r25
    7aaa:	70 f0       	brcs	.+28     	; 0x7ac8 <__udivdi3+0xada>
    7aac:	a2 16       	cp	r10, r18
    7aae:	b3 06       	cpc	r11, r19
    7ab0:	c4 06       	cpc	r12, r20
    7ab2:	d5 06       	cpc	r13, r21
    7ab4:	48 f4       	brcc	.+18     	; 0x7ac8 <__udivdi3+0xada>
    7ab6:	08 94       	sec
    7ab8:	61 08       	sbc	r6, r1
    7aba:	71 08       	sbc	r7, r1
    7abc:	81 08       	sbc	r8, r1
    7abe:	91 08       	sbc	r9, r1
    7ac0:	a6 0e       	add	r10, r22
    7ac2:	b7 1e       	adc	r11, r23
    7ac4:	c8 1e       	adc	r12, r24
    7ac6:	d9 1e       	adc	r13, r25
    7ac8:	d6 01       	movw	r26, r12
    7aca:	c5 01       	movw	r24, r10
    7acc:	82 1b       	sub	r24, r18
    7ace:	93 0b       	sbc	r25, r19
    7ad0:	a4 0b       	sbc	r26, r20
    7ad2:	b5 0b       	sbc	r27, r21
    7ad4:	89 8f       	std	Y+25, r24	; 0x19
    7ad6:	9a 8f       	std	Y+26, r25	; 0x1a
    7ad8:	ab 8f       	std	Y+27, r26	; 0x1b
    7ada:	bc 8f       	std	Y+28, r27	; 0x1c
    7adc:	d1 01       	movw	r26, r2
    7ade:	99 27       	eor	r25, r25
    7ae0:	88 27       	eor	r24, r24
    7ae2:	64 01       	movw	r12, r8
    7ae4:	53 01       	movw	r10, r6
    7ae6:	a8 2a       	or	r10, r24
    7ae8:	b9 2a       	or	r11, r25
    7aea:	ca 2a       	or	r12, r26
    7aec:	db 2a       	or	r13, r27
    7aee:	a9 aa       	std	Y+49, r10	; 0x31
    7af0:	ba aa       	std	Y+50, r11	; 0x32
    7af2:	cb aa       	std	Y+51, r12	; 0x33
    7af4:	dc aa       	std	Y+52, r13	; 0x34
    7af6:	86 01       	movw	r16, r12
    7af8:	75 01       	movw	r14, r10
    7afa:	2f ef       	ldi	r18, 0xFF	; 255
    7afc:	3f ef       	ldi	r19, 0xFF	; 255
    7afe:	40 e0       	ldi	r20, 0x00	; 0
    7b00:	50 e0       	ldi	r21, 0x00	; 0
    7b02:	e2 22       	and	r14, r18
    7b04:	f3 22       	and	r15, r19
    7b06:	04 23       	and	r16, r20
    7b08:	15 23       	and	r17, r21
    7b0a:	a6 01       	movw	r20, r12
    7b0c:	66 27       	eor	r22, r22
    7b0e:	77 27       	eor	r23, r23
    7b10:	6d 96       	adiw	r28, 0x1d	; 29
    7b12:	4c af       	std	Y+60, r20	; 0x3c
    7b14:	5d af       	std	Y+61, r21	; 0x3d
    7b16:	6e af       	std	Y+62, r22	; 0x3e
    7b18:	7f af       	std	Y+63, r23	; 0x3f
    7b1a:	6d 97       	sbiw	r28, 0x1d	; 29
    7b1c:	a9 a0       	ldd	r10, Y+33	; 0x21
    7b1e:	ba a0       	ldd	r11, Y+34	; 0x22
    7b20:	cb a0       	ldd	r12, Y+35	; 0x23
    7b22:	dc a0       	ldd	r13, Y+36	; 0x24
    7b24:	6f ef       	ldi	r22, 0xFF	; 255
    7b26:	7f ef       	ldi	r23, 0xFF	; 255
    7b28:	80 e0       	ldi	r24, 0x00	; 0
    7b2a:	90 e0       	ldi	r25, 0x00	; 0
    7b2c:	a6 22       	and	r10, r22
    7b2e:	b7 22       	and	r11, r23
    7b30:	c8 22       	and	r12, r24
    7b32:	d9 22       	and	r13, r25
    7b34:	89 a1       	ldd	r24, Y+33	; 0x21
    7b36:	9a a1       	ldd	r25, Y+34	; 0x22
    7b38:	ab a1       	ldd	r26, Y+35	; 0x23
    7b3a:	bc a1       	ldd	r27, Y+36	; 0x24
    7b3c:	1d 01       	movw	r2, r26
    7b3e:	44 24       	eor	r4, r4
    7b40:	55 24       	eor	r5, r5
    7b42:	c8 01       	movw	r24, r16
    7b44:	b7 01       	movw	r22, r14
    7b46:	a6 01       	movw	r20, r12
    7b48:	95 01       	movw	r18, r10
    7b4a:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__mulsi3>
    7b4e:	69 96       	adiw	r28, 0x19	; 25
    7b50:	6c af       	std	Y+60, r22	; 0x3c
    7b52:	7d af       	std	Y+61, r23	; 0x3d
    7b54:	8e af       	std	Y+62, r24	; 0x3e
    7b56:	9f af       	std	Y+63, r25	; 0x3f
    7b58:	69 97       	sbiw	r28, 0x19	; 25
    7b5a:	c8 01       	movw	r24, r16
    7b5c:	b7 01       	movw	r22, r14
    7b5e:	a2 01       	movw	r20, r4
    7b60:	91 01       	movw	r18, r2
    7b62:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__mulsi3>
    7b66:	3b 01       	movw	r6, r22
    7b68:	4c 01       	movw	r8, r24
    7b6a:	6d 96       	adiw	r28, 0x1d	; 29
    7b6c:	6c ad       	ldd	r22, Y+60	; 0x3c
    7b6e:	7d ad       	ldd	r23, Y+61	; 0x3d
    7b70:	8e ad       	ldd	r24, Y+62	; 0x3e
    7b72:	9f ad       	ldd	r25, Y+63	; 0x3f
    7b74:	6d 97       	sbiw	r28, 0x1d	; 29
    7b76:	a6 01       	movw	r20, r12
    7b78:	95 01       	movw	r18, r10
    7b7a:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__mulsi3>
    7b7e:	7b 01       	movw	r14, r22
    7b80:	8c 01       	movw	r16, r24
    7b82:	6d 96       	adiw	r28, 0x1d	; 29
    7b84:	6c ad       	ldd	r22, Y+60	; 0x3c
    7b86:	7d ad       	ldd	r23, Y+61	; 0x3d
    7b88:	8e ad       	ldd	r24, Y+62	; 0x3e
    7b8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    7b8c:	6d 97       	sbiw	r28, 0x1d	; 29
    7b8e:	a2 01       	movw	r20, r4
    7b90:	91 01       	movw	r18, r2
    7b92:	0e 94 49 46 	call	0x8c92	; 0x8c92 <__mulsi3>
    7b96:	5b 01       	movw	r10, r22
    7b98:	6c 01       	movw	r12, r24
    7b9a:	a8 01       	movw	r20, r16
    7b9c:	97 01       	movw	r18, r14
    7b9e:	26 0d       	add	r18, r6
    7ba0:	37 1d       	adc	r19, r7
    7ba2:	48 1d       	adc	r20, r8
    7ba4:	59 1d       	adc	r21, r9
    7ba6:	69 96       	adiw	r28, 0x19	; 25
    7ba8:	6c ac       	ldd	r6, Y+60	; 0x3c
    7baa:	7d ac       	ldd	r7, Y+61	; 0x3d
    7bac:	8e ac       	ldd	r8, Y+62	; 0x3e
    7bae:	9f ac       	ldd	r9, Y+63	; 0x3f
    7bb0:	69 97       	sbiw	r28, 0x19	; 25
    7bb2:	c4 01       	movw	r24, r8
    7bb4:	aa 27       	eor	r26, r26
    7bb6:	bb 27       	eor	r27, r27
    7bb8:	28 0f       	add	r18, r24
    7bba:	39 1f       	adc	r19, r25
    7bbc:	4a 1f       	adc	r20, r26
    7bbe:	5b 1f       	adc	r21, r27
    7bc0:	2e 15       	cp	r18, r14
    7bc2:	3f 05       	cpc	r19, r15
    7bc4:	40 07       	cpc	r20, r16
    7bc6:	51 07       	cpc	r21, r17
    7bc8:	48 f4       	brcc	.+18     	; 0x7bdc <__udivdi3+0xbee>
    7bca:	e1 2c       	mov	r14, r1
    7bcc:	f1 2c       	mov	r15, r1
    7bce:	61 e0       	ldi	r22, 0x01	; 1
    7bd0:	06 2f       	mov	r16, r22
    7bd2:	11 2d       	mov	r17, r1
    7bd4:	ae 0c       	add	r10, r14
    7bd6:	bf 1c       	adc	r11, r15
    7bd8:	c0 1e       	adc	r12, r16
    7bda:	d1 1e       	adc	r13, r17
    7bdc:	ca 01       	movw	r24, r20
    7bde:	aa 27       	eor	r26, r26
    7be0:	bb 27       	eor	r27, r27
    7be2:	bc 01       	movw	r22, r24
    7be4:	cd 01       	movw	r24, r26
    7be6:	6a 0d       	add	r22, r10
    7be8:	7b 1d       	adc	r23, r11
    7bea:	8c 1d       	adc	r24, r12
    7bec:	9d 1d       	adc	r25, r13
    7bee:	69 8c       	ldd	r6, Y+25	; 0x19
    7bf0:	7a 8c       	ldd	r7, Y+26	; 0x1a
    7bf2:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7bf4:	9c 8c       	ldd	r9, Y+28	; 0x1c
    7bf6:	66 16       	cp	r6, r22
    7bf8:	77 06       	cpc	r7, r23
    7bfa:	88 06       	cpc	r8, r24
    7bfc:	99 06       	cpc	r9, r25
    7bfe:	40 f1       	brcs	.+80     	; 0x7c50 <__udivdi3+0xc62>
    7c00:	66 15       	cp	r22, r6
    7c02:	77 05       	cpc	r23, r7
    7c04:	88 05       	cpc	r24, r8
    7c06:	99 05       	cpc	r25, r9
    7c08:	09 f0       	breq	.+2      	; 0x7c0c <__udivdi3+0xc1e>
    7c0a:	43 c0       	rjmp	.+134    	; 0x7c92 <__udivdi3+0xca4>
    7c0c:	d9 01       	movw	r26, r18
    7c0e:	99 27       	eor	r25, r25
    7c10:	88 27       	eor	r24, r24
    7c12:	69 96       	adiw	r28, 0x19	; 25
    7c14:	2c ad       	ldd	r18, Y+60	; 0x3c
    7c16:	3d ad       	ldd	r19, Y+61	; 0x3d
    7c18:	4e ad       	ldd	r20, Y+62	; 0x3e
    7c1a:	5f ad       	ldd	r21, Y+63	; 0x3f
    7c1c:	69 97       	sbiw	r28, 0x19	; 25
    7c1e:	40 70       	andi	r20, 0x00	; 0
    7c20:	50 70       	andi	r21, 0x00	; 0
    7c22:	82 0f       	add	r24, r18
    7c24:	93 1f       	adc	r25, r19
    7c26:	a4 1f       	adc	r26, r20
    7c28:	b5 1f       	adc	r27, r21
    7c2a:	2d a5       	ldd	r18, Y+45	; 0x2d
    7c2c:	3e a5       	ldd	r19, Y+46	; 0x2e
    7c2e:	4f a5       	ldd	r20, Y+47	; 0x2f
    7c30:	58 a9       	ldd	r21, Y+48	; 0x30
    7c32:	6e 96       	adiw	r28, 0x1e	; 30
    7c34:	0f ac       	ldd	r0, Y+63	; 0x3f
    7c36:	6e 97       	sbiw	r28, 0x1e	; 30
    7c38:	04 c0       	rjmp	.+8      	; 0x7c42 <__udivdi3+0xc54>
    7c3a:	22 0f       	add	r18, r18
    7c3c:	33 1f       	adc	r19, r19
    7c3e:	44 1f       	adc	r20, r20
    7c40:	55 1f       	adc	r21, r21
    7c42:	0a 94       	dec	r0
    7c44:	d2 f7       	brpl	.-12     	; 0x7c3a <__udivdi3+0xc4c>
    7c46:	28 17       	cp	r18, r24
    7c48:	39 07       	cpc	r19, r25
    7c4a:	4a 07       	cpc	r20, r26
    7c4c:	5b 07       	cpc	r21, r27
    7c4e:	08 f5       	brcc	.+66     	; 0x7c92 <__udivdi3+0xca4>
    7c50:	09 a9       	ldd	r16, Y+49	; 0x31
    7c52:	1a a9       	ldd	r17, Y+50	; 0x32
    7c54:	2b a9       	ldd	r18, Y+51	; 0x33
    7c56:	3c a9       	ldd	r19, Y+52	; 0x34
    7c58:	01 50       	subi	r16, 0x01	; 1
    7c5a:	10 40       	sbci	r17, 0x00	; 0
    7c5c:	20 40       	sbci	r18, 0x00	; 0
    7c5e:	30 40       	sbci	r19, 0x00	; 0
    7c60:	09 ab       	std	Y+49, r16	; 0x31
    7c62:	1a ab       	std	Y+50, r17	; 0x32
    7c64:	2b ab       	std	Y+51, r18	; 0x33
    7c66:	3c ab       	std	Y+52, r19	; 0x34
    7c68:	14 c0       	rjmp	.+40     	; 0x7c92 <__udivdi3+0xca4>
    7c6a:	66 24       	eor	r6, r6
    7c6c:	77 24       	eor	r7, r7
    7c6e:	43 01       	movw	r8, r6
    7c70:	21 e0       	ldi	r18, 0x01	; 1
    7c72:	30 e0       	ldi	r19, 0x00	; 0
    7c74:	40 e0       	ldi	r20, 0x00	; 0
    7c76:	50 e0       	ldi	r21, 0x00	; 0
    7c78:	29 ab       	std	Y+49, r18	; 0x31
    7c7a:	3a ab       	std	Y+50, r19	; 0x32
    7c7c:	4b ab       	std	Y+51, r20	; 0x33
    7c7e:	5c ab       	std	Y+52, r21	; 0x34
    7c80:	0b c0       	rjmp	.+22     	; 0x7c98 <__udivdi3+0xcaa>
    7c82:	66 24       	eor	r6, r6
    7c84:	77 24       	eor	r7, r7
    7c86:	43 01       	movw	r8, r6
    7c88:	19 aa       	std	Y+49, r1	; 0x31
    7c8a:	1a aa       	std	Y+50, r1	; 0x32
    7c8c:	1b aa       	std	Y+51, r1	; 0x33
    7c8e:	1c aa       	std	Y+52, r1	; 0x34
    7c90:	03 c0       	rjmp	.+6      	; 0x7c98 <__udivdi3+0xcaa>
    7c92:	66 24       	eor	r6, r6
    7c94:	77 24       	eor	r7, r7
    7c96:	43 01       	movw	r8, r6
    7c98:	fe 01       	movw	r30, r28
    7c9a:	71 96       	adiw	r30, 0x11	; 17
    7c9c:	88 e0       	ldi	r24, 0x08	; 8
    7c9e:	df 01       	movw	r26, r30
    7ca0:	1d 92       	st	X+, r1
    7ca2:	8a 95       	dec	r24
    7ca4:	e9 f7       	brne	.-6      	; 0x7ca0 <__udivdi3+0xcb2>
    7ca6:	a9 a8       	ldd	r10, Y+49	; 0x31
    7ca8:	ba a8       	ldd	r11, Y+50	; 0x32
    7caa:	cb a8       	ldd	r12, Y+51	; 0x33
    7cac:	dc a8       	ldd	r13, Y+52	; 0x34
    7cae:	a9 8a       	std	Y+17, r10	; 0x11
    7cb0:	ba 8a       	std	Y+18, r11	; 0x12
    7cb2:	cb 8a       	std	Y+19, r12	; 0x13
    7cb4:	dc 8a       	std	Y+20, r13	; 0x14
    7cb6:	6d 8a       	std	Y+21, r6	; 0x15
    7cb8:	7e 8a       	std	Y+22, r7	; 0x16
    7cba:	8f 8a       	std	Y+23, r8	; 0x17
    7cbc:	98 8e       	std	Y+24, r9	; 0x18
    7cbe:	29 a9       	ldd	r18, Y+49	; 0x31
    7cc0:	3a 89       	ldd	r19, Y+18	; 0x12
    7cc2:	4b 89       	ldd	r20, Y+19	; 0x13
    7cc4:	5c 89       	ldd	r21, Y+20	; 0x14
    7cc6:	66 2d       	mov	r22, r6
    7cc8:	7e 89       	ldd	r23, Y+22	; 0x16
    7cca:	8f 89       	ldd	r24, Y+23	; 0x17
    7ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    7cce:	c2 5a       	subi	r28, 0xA2	; 162
    7cd0:	df 4f       	sbci	r29, 0xFF	; 255
    7cd2:	e2 e1       	ldi	r30, 0x12	; 18
    7cd4:	0c 94 a6 46 	jmp	0x8d4c	; 0x8d4c <__epilogue_restores__>

00007cd8 <vfprintf>:
    7cd8:	2f 92       	push	r2
    7cda:	3f 92       	push	r3
    7cdc:	4f 92       	push	r4
    7cde:	5f 92       	push	r5
    7ce0:	6f 92       	push	r6
    7ce2:	7f 92       	push	r7
    7ce4:	8f 92       	push	r8
    7ce6:	9f 92       	push	r9
    7ce8:	af 92       	push	r10
    7cea:	bf 92       	push	r11
    7cec:	cf 92       	push	r12
    7cee:	df 92       	push	r13
    7cf0:	ef 92       	push	r14
    7cf2:	ff 92       	push	r15
    7cf4:	0f 93       	push	r16
    7cf6:	1f 93       	push	r17
    7cf8:	df 93       	push	r29
    7cfa:	cf 93       	push	r28
    7cfc:	cd b7       	in	r28, 0x3d	; 61
    7cfe:	de b7       	in	r29, 0x3e	; 62
    7d00:	61 97       	sbiw	r28, 0x11	; 17
    7d02:	cd bf       	out	0x3d, r28	; 61
    7d04:	de bf       	out	0x3e, r29	; 62
    7d06:	3c 01       	movw	r6, r24
    7d08:	6e 87       	std	Y+14, r22	; 0x0e
    7d0a:	7f 87       	std	Y+15, r23	; 0x0f
    7d0c:	6a 01       	movw	r12, r20
    7d0e:	fc 01       	movw	r30, r24
    7d10:	16 82       	std	Z+6, r1	; 0x06
    7d12:	17 82       	std	Z+7, r1	; 0x07
    7d14:	83 81       	ldd	r24, Z+3	; 0x03
    7d16:	81 fd       	sbrc	r24, 1
    7d18:	03 c0       	rjmp	.+6      	; 0x7d20 <vfprintf+0x48>
    7d1a:	6f ef       	ldi	r22, 0xFF	; 255
    7d1c:	7f ef       	ldi	r23, 0xFF	; 255
    7d1e:	6f c3       	rjmp	.+1758   	; 0x83fe <vfprintf+0x726>
    7d20:	9e 01       	movw	r18, r28
    7d22:	2f 5f       	subi	r18, 0xFF	; 255
    7d24:	3f 4f       	sbci	r19, 0xFF	; 255
    7d26:	28 8b       	std	Y+16, r18	; 0x10
    7d28:	39 8b       	std	Y+17, r19	; 0x11
    7d2a:	f3 01       	movw	r30, r6
    7d2c:	23 81       	ldd	r18, Z+3	; 0x03
    7d2e:	ee 85       	ldd	r30, Y+14	; 0x0e
    7d30:	ff 85       	ldd	r31, Y+15	; 0x0f
    7d32:	23 fd       	sbrc	r18, 3
    7d34:	85 91       	lpm	r24, Z+
    7d36:	23 ff       	sbrs	r18, 3
    7d38:	81 91       	ld	r24, Z+
    7d3a:	ee 87       	std	Y+14, r30	; 0x0e
    7d3c:	ff 87       	std	Y+15, r31	; 0x0f
    7d3e:	88 23       	and	r24, r24
    7d40:	09 f4       	brne	.+2      	; 0x7d44 <vfprintf+0x6c>
    7d42:	5a c3       	rjmp	.+1716   	; 0x83f8 <vfprintf+0x720>
    7d44:	85 32       	cpi	r24, 0x25	; 37
    7d46:	51 f4       	brne	.+20     	; 0x7d5c <vfprintf+0x84>
    7d48:	ee 85       	ldd	r30, Y+14	; 0x0e
    7d4a:	ff 85       	ldd	r31, Y+15	; 0x0f
    7d4c:	23 fd       	sbrc	r18, 3
    7d4e:	85 91       	lpm	r24, Z+
    7d50:	23 ff       	sbrs	r18, 3
    7d52:	81 91       	ld	r24, Z+
    7d54:	ee 87       	std	Y+14, r30	; 0x0e
    7d56:	ff 87       	std	Y+15, r31	; 0x0f
    7d58:	85 32       	cpi	r24, 0x25	; 37
    7d5a:	29 f4       	brne	.+10     	; 0x7d66 <vfprintf+0x8e>
    7d5c:	90 e0       	ldi	r25, 0x00	; 0
    7d5e:	b3 01       	movw	r22, r6
    7d60:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    7d64:	e2 cf       	rjmp	.-60     	; 0x7d2a <vfprintf+0x52>
    7d66:	98 2f       	mov	r25, r24
    7d68:	10 e0       	ldi	r17, 0x00	; 0
    7d6a:	88 24       	eor	r8, r8
    7d6c:	99 24       	eor	r9, r9
    7d6e:	10 32       	cpi	r17, 0x20	; 32
    7d70:	b0 f4       	brcc	.+44     	; 0x7d9e <vfprintf+0xc6>
    7d72:	9b 32       	cpi	r25, 0x2B	; 43
    7d74:	69 f0       	breq	.+26     	; 0x7d90 <vfprintf+0xb8>
    7d76:	9c 32       	cpi	r25, 0x2C	; 44
    7d78:	28 f4       	brcc	.+10     	; 0x7d84 <vfprintf+0xac>
    7d7a:	90 32       	cpi	r25, 0x20	; 32
    7d7c:	51 f0       	breq	.+20     	; 0x7d92 <vfprintf+0xba>
    7d7e:	93 32       	cpi	r25, 0x23	; 35
    7d80:	71 f4       	brne	.+28     	; 0x7d9e <vfprintf+0xc6>
    7d82:	0b c0       	rjmp	.+22     	; 0x7d9a <vfprintf+0xc2>
    7d84:	9d 32       	cpi	r25, 0x2D	; 45
    7d86:	39 f0       	breq	.+14     	; 0x7d96 <vfprintf+0xbe>
    7d88:	90 33       	cpi	r25, 0x30	; 48
    7d8a:	49 f4       	brne	.+18     	; 0x7d9e <vfprintf+0xc6>
    7d8c:	11 60       	ori	r17, 0x01	; 1
    7d8e:	28 c0       	rjmp	.+80     	; 0x7de0 <vfprintf+0x108>
    7d90:	12 60       	ori	r17, 0x02	; 2
    7d92:	14 60       	ori	r17, 0x04	; 4
    7d94:	25 c0       	rjmp	.+74     	; 0x7de0 <vfprintf+0x108>
    7d96:	18 60       	ori	r17, 0x08	; 8
    7d98:	23 c0       	rjmp	.+70     	; 0x7de0 <vfprintf+0x108>
    7d9a:	10 61       	ori	r17, 0x10	; 16
    7d9c:	21 c0       	rjmp	.+66     	; 0x7de0 <vfprintf+0x108>
    7d9e:	17 fd       	sbrc	r17, 7
    7da0:	2a c0       	rjmp	.+84     	; 0x7df6 <vfprintf+0x11e>
    7da2:	89 2f       	mov	r24, r25
    7da4:	80 53       	subi	r24, 0x30	; 48
    7da6:	8a 30       	cpi	r24, 0x0A	; 10
    7da8:	78 f4       	brcc	.+30     	; 0x7dc8 <vfprintf+0xf0>
    7daa:	16 ff       	sbrs	r17, 6
    7dac:	06 c0       	rjmp	.+12     	; 0x7dba <vfprintf+0xe2>
    7dae:	fa e0       	ldi	r31, 0x0A	; 10
    7db0:	9f 9e       	mul	r9, r31
    7db2:	90 2c       	mov	r9, r0
    7db4:	11 24       	eor	r1, r1
    7db6:	98 0e       	add	r9, r24
    7db8:	13 c0       	rjmp	.+38     	; 0x7de0 <vfprintf+0x108>
    7dba:	3a e0       	ldi	r19, 0x0A	; 10
    7dbc:	83 9e       	mul	r8, r19
    7dbe:	80 2c       	mov	r8, r0
    7dc0:	11 24       	eor	r1, r1
    7dc2:	88 0e       	add	r8, r24
    7dc4:	10 62       	ori	r17, 0x20	; 32
    7dc6:	0c c0       	rjmp	.+24     	; 0x7de0 <vfprintf+0x108>
    7dc8:	9e 32       	cpi	r25, 0x2E	; 46
    7dca:	21 f4       	brne	.+8      	; 0x7dd4 <vfprintf+0xfc>
    7dcc:	16 fd       	sbrc	r17, 6
    7dce:	14 c3       	rjmp	.+1576   	; 0x83f8 <vfprintf+0x720>
    7dd0:	10 64       	ori	r17, 0x40	; 64
    7dd2:	06 c0       	rjmp	.+12     	; 0x7de0 <vfprintf+0x108>
    7dd4:	9c 36       	cpi	r25, 0x6C	; 108
    7dd6:	11 f4       	brne	.+4      	; 0x7ddc <vfprintf+0x104>
    7dd8:	10 68       	ori	r17, 0x80	; 128
    7dda:	02 c0       	rjmp	.+4      	; 0x7de0 <vfprintf+0x108>
    7ddc:	98 36       	cpi	r25, 0x68	; 104
    7dde:	59 f4       	brne	.+22     	; 0x7df6 <vfprintf+0x11e>
    7de0:	ee 85       	ldd	r30, Y+14	; 0x0e
    7de2:	ff 85       	ldd	r31, Y+15	; 0x0f
    7de4:	23 fd       	sbrc	r18, 3
    7de6:	95 91       	lpm	r25, Z+
    7de8:	23 ff       	sbrs	r18, 3
    7dea:	91 91       	ld	r25, Z+
    7dec:	ee 87       	std	Y+14, r30	; 0x0e
    7dee:	ff 87       	std	Y+15, r31	; 0x0f
    7df0:	99 23       	and	r25, r25
    7df2:	09 f0       	breq	.+2      	; 0x7df6 <vfprintf+0x11e>
    7df4:	bc cf       	rjmp	.-136    	; 0x7d6e <vfprintf+0x96>
    7df6:	89 2f       	mov	r24, r25
    7df8:	85 54       	subi	r24, 0x45	; 69
    7dfa:	83 30       	cpi	r24, 0x03	; 3
    7dfc:	20 f4       	brcc	.+8      	; 0x7e06 <vfprintf+0x12e>
    7dfe:	81 2f       	mov	r24, r17
    7e00:	80 61       	ori	r24, 0x10	; 16
    7e02:	90 5e       	subi	r25, 0xE0	; 224
    7e04:	07 c0       	rjmp	.+14     	; 0x7e14 <vfprintf+0x13c>
    7e06:	89 2f       	mov	r24, r25
    7e08:	85 56       	subi	r24, 0x65	; 101
    7e0a:	83 30       	cpi	r24, 0x03	; 3
    7e0c:	08 f0       	brcs	.+2      	; 0x7e10 <vfprintf+0x138>
    7e0e:	9f c1       	rjmp	.+830    	; 0x814e <vfprintf+0x476>
    7e10:	81 2f       	mov	r24, r17
    7e12:	8f 7e       	andi	r24, 0xEF	; 239
    7e14:	86 fd       	sbrc	r24, 6
    7e16:	02 c0       	rjmp	.+4      	; 0x7e1c <vfprintf+0x144>
    7e18:	76 e0       	ldi	r23, 0x06	; 6
    7e1a:	97 2e       	mov	r9, r23
    7e1c:	6f e3       	ldi	r22, 0x3F	; 63
    7e1e:	f6 2e       	mov	r15, r22
    7e20:	f8 22       	and	r15, r24
    7e22:	95 36       	cpi	r25, 0x65	; 101
    7e24:	19 f4       	brne	.+6      	; 0x7e2c <vfprintf+0x154>
    7e26:	f0 e4       	ldi	r31, 0x40	; 64
    7e28:	ff 2a       	or	r15, r31
    7e2a:	07 c0       	rjmp	.+14     	; 0x7e3a <vfprintf+0x162>
    7e2c:	96 36       	cpi	r25, 0x66	; 102
    7e2e:	19 f4       	brne	.+6      	; 0x7e36 <vfprintf+0x15e>
    7e30:	20 e8       	ldi	r18, 0x80	; 128
    7e32:	f2 2a       	or	r15, r18
    7e34:	02 c0       	rjmp	.+4      	; 0x7e3a <vfprintf+0x162>
    7e36:	91 10       	cpse	r9, r1
    7e38:	9a 94       	dec	r9
    7e3a:	f7 fe       	sbrs	r15, 7
    7e3c:	0a c0       	rjmp	.+20     	; 0x7e52 <vfprintf+0x17a>
    7e3e:	3b e3       	ldi	r19, 0x3B	; 59
    7e40:	39 15       	cp	r19, r9
    7e42:	18 f4       	brcc	.+6      	; 0x7e4a <vfprintf+0x172>
    7e44:	5c e3       	ldi	r21, 0x3C	; 60
    7e46:	b5 2e       	mov	r11, r21
    7e48:	02 c0       	rjmp	.+4      	; 0x7e4e <vfprintf+0x176>
    7e4a:	b9 2c       	mov	r11, r9
    7e4c:	b3 94       	inc	r11
    7e4e:	27 e0       	ldi	r18, 0x07	; 7
    7e50:	09 c0       	rjmp	.+18     	; 0x7e64 <vfprintf+0x18c>
    7e52:	47 e0       	ldi	r20, 0x07	; 7
    7e54:	49 15       	cp	r20, r9
    7e56:	20 f4       	brcc	.+8      	; 0x7e60 <vfprintf+0x188>
    7e58:	bb 24       	eor	r11, r11
    7e5a:	47 e0       	ldi	r20, 0x07	; 7
    7e5c:	94 2e       	mov	r9, r20
    7e5e:	f7 cf       	rjmp	.-18     	; 0x7e4e <vfprintf+0x176>
    7e60:	29 2d       	mov	r18, r9
    7e62:	bb 24       	eor	r11, r11
    7e64:	c6 01       	movw	r24, r12
    7e66:	04 96       	adiw	r24, 0x04	; 4
    7e68:	8c 87       	std	Y+12, r24	; 0x0c
    7e6a:	9d 87       	std	Y+13, r25	; 0x0d
    7e6c:	f6 01       	movw	r30, r12
    7e6e:	60 81       	ld	r22, Z
    7e70:	71 81       	ldd	r23, Z+1	; 0x01
    7e72:	82 81       	ldd	r24, Z+2	; 0x02
    7e74:	93 81       	ldd	r25, Z+3	; 0x03
    7e76:	ae 01       	movw	r20, r28
    7e78:	4f 5f       	subi	r20, 0xFF	; 255
    7e7a:	5f 4f       	sbci	r21, 0xFF	; 255
    7e7c:	0b 2d       	mov	r16, r11
    7e7e:	0e 94 4d 48 	call	0x909a	; 0x909a <__ftoa_engine>
    7e82:	6c 01       	movw	r12, r24
    7e84:	09 81       	ldd	r16, Y+1	; 0x01
    7e86:	20 2e       	mov	r2, r16
    7e88:	33 24       	eor	r3, r3
    7e8a:	00 ff       	sbrs	r16, 0
    7e8c:	04 c0       	rjmp	.+8      	; 0x7e96 <vfprintf+0x1be>
    7e8e:	03 fd       	sbrc	r16, 3
    7e90:	02 c0       	rjmp	.+4      	; 0x7e96 <vfprintf+0x1be>
    7e92:	1d e2       	ldi	r17, 0x2D	; 45
    7e94:	09 c0       	rjmp	.+18     	; 0x7ea8 <vfprintf+0x1d0>
    7e96:	f1 fe       	sbrs	r15, 1
    7e98:	02 c0       	rjmp	.+4      	; 0x7e9e <vfprintf+0x1c6>
    7e9a:	1b e2       	ldi	r17, 0x2B	; 43
    7e9c:	05 c0       	rjmp	.+10     	; 0x7ea8 <vfprintf+0x1d0>
    7e9e:	f2 fc       	sbrc	r15, 2
    7ea0:	02 c0       	rjmp	.+4      	; 0x7ea6 <vfprintf+0x1ce>
    7ea2:	10 e0       	ldi	r17, 0x00	; 0
    7ea4:	01 c0       	rjmp	.+2      	; 0x7ea8 <vfprintf+0x1d0>
    7ea6:	10 e2       	ldi	r17, 0x20	; 32
    7ea8:	c1 01       	movw	r24, r2
    7eaa:	8c 70       	andi	r24, 0x0C	; 12
    7eac:	90 70       	andi	r25, 0x00	; 0
    7eae:	89 2b       	or	r24, r25
    7eb0:	b9 f1       	breq	.+110    	; 0x7f20 <vfprintf+0x248>
    7eb2:	11 23       	and	r17, r17
    7eb4:	11 f4       	brne	.+4      	; 0x7eba <vfprintf+0x1e2>
    7eb6:	83 e0       	ldi	r24, 0x03	; 3
    7eb8:	01 c0       	rjmp	.+2      	; 0x7ebc <vfprintf+0x1e4>
    7eba:	84 e0       	ldi	r24, 0x04	; 4
    7ebc:	88 15       	cp	r24, r8
    7ebe:	10 f0       	brcs	.+4      	; 0x7ec4 <vfprintf+0x1ec>
    7ec0:	88 24       	eor	r8, r8
    7ec2:	0a c0       	rjmp	.+20     	; 0x7ed8 <vfprintf+0x200>
    7ec4:	88 1a       	sub	r8, r24
    7ec6:	f3 fc       	sbrc	r15, 3
    7ec8:	07 c0       	rjmp	.+14     	; 0x7ed8 <vfprintf+0x200>
    7eca:	80 e2       	ldi	r24, 0x20	; 32
    7ecc:	90 e0       	ldi	r25, 0x00	; 0
    7ece:	b3 01       	movw	r22, r6
    7ed0:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    7ed4:	8a 94       	dec	r8
    7ed6:	c9 f7       	brne	.-14     	; 0x7eca <vfprintf+0x1f2>
    7ed8:	11 23       	and	r17, r17
    7eda:	29 f0       	breq	.+10     	; 0x7ee6 <vfprintf+0x20e>
    7edc:	81 2f       	mov	r24, r17
    7ede:	90 e0       	ldi	r25, 0x00	; 0
    7ee0:	b3 01       	movw	r22, r6
    7ee2:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    7ee6:	23 fe       	sbrs	r2, 3
    7ee8:	03 c0       	rjmp	.+6      	; 0x7ef0 <vfprintf+0x218>
    7eea:	03 e3       	ldi	r16, 0x33	; 51
    7eec:	12 e0       	ldi	r17, 0x02	; 2
    7eee:	0e c0       	rjmp	.+28     	; 0x7f0c <vfprintf+0x234>
    7ef0:	07 e3       	ldi	r16, 0x37	; 55
    7ef2:	12 e0       	ldi	r17, 0x02	; 2
    7ef4:	0b c0       	rjmp	.+22     	; 0x7f0c <vfprintf+0x234>
    7ef6:	e1 14       	cp	r14, r1
    7ef8:	f1 04       	cpc	r15, r1
    7efa:	09 f0       	breq	.+2      	; 0x7efe <vfprintf+0x226>
    7efc:	80 52       	subi	r24, 0x20	; 32
    7efe:	90 e0       	ldi	r25, 0x00	; 0
    7f00:	b3 01       	movw	r22, r6
    7f02:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    7f06:	0f 5f       	subi	r16, 0xFF	; 255
    7f08:	1f 4f       	sbci	r17, 0xFF	; 255
    7f0a:	05 c0       	rjmp	.+10     	; 0x7f16 <vfprintf+0x23e>
    7f0c:	ef 2c       	mov	r14, r15
    7f0e:	ff 24       	eor	r15, r15
    7f10:	f0 e1       	ldi	r31, 0x10	; 16
    7f12:	ef 22       	and	r14, r31
    7f14:	ff 24       	eor	r15, r15
    7f16:	f8 01       	movw	r30, r16
    7f18:	84 91       	lpm	r24, Z+
    7f1a:	88 23       	and	r24, r24
    7f1c:	61 f7       	brne	.-40     	; 0x7ef6 <vfprintf+0x21e>
    7f1e:	14 c1       	rjmp	.+552    	; 0x8148 <vfprintf+0x470>
    7f20:	f7 fe       	sbrs	r15, 7
    7f22:	12 c0       	rjmp	.+36     	; 0x7f48 <vfprintf+0x270>
    7f24:	bc 0c       	add	r11, r12
    7f26:	24 fe       	sbrs	r2, 4
    7f28:	04 c0       	rjmp	.+8      	; 0x7f32 <vfprintf+0x25a>
    7f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    7f2c:	81 33       	cpi	r24, 0x31	; 49
    7f2e:	09 f4       	brne	.+2      	; 0x7f32 <vfprintf+0x25a>
    7f30:	ba 94       	dec	r11
    7f32:	1b 14       	cp	r1, r11
    7f34:	1c f0       	brlt	.+6      	; 0x7f3c <vfprintf+0x264>
    7f36:	bb 24       	eor	r11, r11
    7f38:	b3 94       	inc	r11
    7f3a:	2d c0       	rjmp	.+90     	; 0x7f96 <vfprintf+0x2be>
    7f3c:	f8 e0       	ldi	r31, 0x08	; 8
    7f3e:	fb 15       	cp	r31, r11
    7f40:	50 f5       	brcc	.+84     	; 0x7f96 <vfprintf+0x2be>
    7f42:	38 e0       	ldi	r19, 0x08	; 8
    7f44:	b3 2e       	mov	r11, r19
    7f46:	27 c0       	rjmp	.+78     	; 0x7f96 <vfprintf+0x2be>
    7f48:	f6 fc       	sbrc	r15, 6
    7f4a:	25 c0       	rjmp	.+74     	; 0x7f96 <vfprintf+0x2be>
    7f4c:	89 2d       	mov	r24, r9
    7f4e:	90 e0       	ldi	r25, 0x00	; 0
    7f50:	8c 15       	cp	r24, r12
    7f52:	9d 05       	cpc	r25, r13
    7f54:	4c f0       	brlt	.+18     	; 0x7f68 <vfprintf+0x290>
    7f56:	2c ef       	ldi	r18, 0xFC	; 252
    7f58:	c2 16       	cp	r12, r18
    7f5a:	2f ef       	ldi	r18, 0xFF	; 255
    7f5c:	d2 06       	cpc	r13, r18
    7f5e:	24 f0       	brlt	.+8      	; 0x7f68 <vfprintf+0x290>
    7f60:	30 e8       	ldi	r19, 0x80	; 128
    7f62:	f3 2a       	or	r15, r19
    7f64:	01 c0       	rjmp	.+2      	; 0x7f68 <vfprintf+0x290>
    7f66:	9a 94       	dec	r9
    7f68:	99 20       	and	r9, r9
    7f6a:	49 f0       	breq	.+18     	; 0x7f7e <vfprintf+0x2a6>
    7f6c:	e2 e0       	ldi	r30, 0x02	; 2
    7f6e:	f0 e0       	ldi	r31, 0x00	; 0
    7f70:	ec 0f       	add	r30, r28
    7f72:	fd 1f       	adc	r31, r29
    7f74:	e9 0d       	add	r30, r9
    7f76:	f1 1d       	adc	r31, r1
    7f78:	80 81       	ld	r24, Z
    7f7a:	80 33       	cpi	r24, 0x30	; 48
    7f7c:	a1 f3       	breq	.-24     	; 0x7f66 <vfprintf+0x28e>
    7f7e:	f7 fe       	sbrs	r15, 7
    7f80:	0a c0       	rjmp	.+20     	; 0x7f96 <vfprintf+0x2be>
    7f82:	b9 2c       	mov	r11, r9
    7f84:	b3 94       	inc	r11
    7f86:	89 2d       	mov	r24, r9
    7f88:	90 e0       	ldi	r25, 0x00	; 0
    7f8a:	c8 16       	cp	r12, r24
    7f8c:	d9 06       	cpc	r13, r25
    7f8e:	14 f0       	brlt	.+4      	; 0x7f94 <vfprintf+0x2bc>
    7f90:	99 24       	eor	r9, r9
    7f92:	01 c0       	rjmp	.+2      	; 0x7f96 <vfprintf+0x2be>
    7f94:	9c 18       	sub	r9, r12
    7f96:	f7 fc       	sbrc	r15, 7
    7f98:	03 c0       	rjmp	.+6      	; 0x7fa0 <vfprintf+0x2c8>
    7f9a:	25 e0       	ldi	r18, 0x05	; 5
    7f9c:	30 e0       	ldi	r19, 0x00	; 0
    7f9e:	09 c0       	rjmp	.+18     	; 0x7fb2 <vfprintf+0x2da>
    7fa0:	1c 14       	cp	r1, r12
    7fa2:	1d 04       	cpc	r1, r13
    7fa4:	1c f0       	brlt	.+6      	; 0x7fac <vfprintf+0x2d4>
    7fa6:	21 e0       	ldi	r18, 0x01	; 1
    7fa8:	30 e0       	ldi	r19, 0x00	; 0
    7faa:	03 c0       	rjmp	.+6      	; 0x7fb2 <vfprintf+0x2da>
    7fac:	96 01       	movw	r18, r12
    7fae:	2f 5f       	subi	r18, 0xFF	; 255
    7fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    7fb2:	11 23       	and	r17, r17
    7fb4:	11 f0       	breq	.+4      	; 0x7fba <vfprintf+0x2e2>
    7fb6:	2f 5f       	subi	r18, 0xFF	; 255
    7fb8:	3f 4f       	sbci	r19, 0xFF	; 255
    7fba:	99 20       	and	r9, r9
    7fbc:	29 f0       	breq	.+10     	; 0x7fc8 <vfprintf+0x2f0>
    7fbe:	89 2d       	mov	r24, r9
    7fc0:	90 e0       	ldi	r25, 0x00	; 0
    7fc2:	01 96       	adiw	r24, 0x01	; 1
    7fc4:	28 0f       	add	r18, r24
    7fc6:	39 1f       	adc	r19, r25
    7fc8:	88 2d       	mov	r24, r8
    7fca:	90 e0       	ldi	r25, 0x00	; 0
    7fcc:	28 17       	cp	r18, r24
    7fce:	39 07       	cpc	r19, r25
    7fd0:	14 f0       	brlt	.+4      	; 0x7fd6 <vfprintf+0x2fe>
    7fd2:	88 24       	eor	r8, r8
    7fd4:	01 c0       	rjmp	.+2      	; 0x7fd8 <vfprintf+0x300>
    7fd6:	82 1a       	sub	r8, r18
    7fd8:	4f 2c       	mov	r4, r15
    7fda:	55 24       	eor	r5, r5
    7fdc:	c2 01       	movw	r24, r4
    7fde:	89 70       	andi	r24, 0x09	; 9
    7fe0:	90 70       	andi	r25, 0x00	; 0
    7fe2:	89 2b       	or	r24, r25
    7fe4:	39 f0       	breq	.+14     	; 0x7ff4 <vfprintf+0x31c>
    7fe6:	08 c0       	rjmp	.+16     	; 0x7ff8 <vfprintf+0x320>
    7fe8:	80 e2       	ldi	r24, 0x20	; 32
    7fea:	90 e0       	ldi	r25, 0x00	; 0
    7fec:	b3 01       	movw	r22, r6
    7fee:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    7ff2:	8a 94       	dec	r8
    7ff4:	88 20       	and	r8, r8
    7ff6:	c1 f7       	brne	.-16     	; 0x7fe8 <vfprintf+0x310>
    7ff8:	11 23       	and	r17, r17
    7ffa:	29 f0       	breq	.+10     	; 0x8006 <vfprintf+0x32e>
    7ffc:	81 2f       	mov	r24, r17
    7ffe:	90 e0       	ldi	r25, 0x00	; 0
    8000:	b3 01       	movw	r22, r6
    8002:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    8006:	43 fe       	sbrs	r4, 3
    8008:	07 c0       	rjmp	.+14     	; 0x8018 <vfprintf+0x340>
    800a:	08 c0       	rjmp	.+16     	; 0x801c <vfprintf+0x344>
    800c:	80 e3       	ldi	r24, 0x30	; 48
    800e:	90 e0       	ldi	r25, 0x00	; 0
    8010:	b3 01       	movw	r22, r6
    8012:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    8016:	8a 94       	dec	r8
    8018:	88 20       	and	r8, r8
    801a:	c1 f7       	brne	.-16     	; 0x800c <vfprintf+0x334>
    801c:	f7 fe       	sbrs	r15, 7
    801e:	46 c0       	rjmp	.+140    	; 0x80ac <vfprintf+0x3d4>
    8020:	86 01       	movw	r16, r12
    8022:	d7 fe       	sbrs	r13, 7
    8024:	02 c0       	rjmp	.+4      	; 0x802a <vfprintf+0x352>
    8026:	00 e0       	ldi	r16, 0x00	; 0
    8028:	10 e0       	ldi	r17, 0x00	; 0
    802a:	76 01       	movw	r14, r12
    802c:	08 94       	sec
    802e:	e1 1c       	adc	r14, r1
    8030:	f1 1c       	adc	r15, r1
    8032:	e0 1a       	sub	r14, r16
    8034:	f1 0a       	sbc	r15, r17
    8036:	41 e0       	ldi	r20, 0x01	; 1
    8038:	50 e0       	ldi	r21, 0x00	; 0
    803a:	4c 0f       	add	r20, r28
    803c:	5d 1f       	adc	r21, r29
    803e:	e4 0e       	add	r14, r20
    8040:	f5 1e       	adc	r15, r21
    8042:	26 01       	movw	r4, r12
    8044:	4b 18       	sub	r4, r11
    8046:	51 08       	sbc	r5, r1
    8048:	89 2d       	mov	r24, r9
    804a:	90 e0       	ldi	r25, 0x00	; 0
    804c:	aa 24       	eor	r10, r10
    804e:	bb 24       	eor	r11, r11
    8050:	a8 1a       	sub	r10, r24
    8052:	b9 0a       	sbc	r11, r25
    8054:	5f ef       	ldi	r21, 0xFF	; 255
    8056:	0f 3f       	cpi	r16, 0xFF	; 255
    8058:	15 07       	cpc	r17, r21
    805a:	29 f4       	brne	.+10     	; 0x8066 <vfprintf+0x38e>
    805c:	8e e2       	ldi	r24, 0x2E	; 46
    805e:	90 e0       	ldi	r25, 0x00	; 0
    8060:	b3 01       	movw	r22, r6
    8062:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    8066:	c0 16       	cp	r12, r16
    8068:	d1 06       	cpc	r13, r17
    806a:	34 f0       	brlt	.+12     	; 0x8078 <vfprintf+0x3a0>
    806c:	40 16       	cp	r4, r16
    806e:	51 06       	cpc	r5, r17
    8070:	1c f4       	brge	.+6      	; 0x8078 <vfprintf+0x3a0>
    8072:	f7 01       	movw	r30, r14
    8074:	80 81       	ld	r24, Z
    8076:	01 c0       	rjmp	.+2      	; 0x807a <vfprintf+0x3a2>
    8078:	80 e3       	ldi	r24, 0x30	; 48
    807a:	01 50       	subi	r16, 0x01	; 1
    807c:	10 40       	sbci	r17, 0x00	; 0
    807e:	08 94       	sec
    8080:	e1 1c       	adc	r14, r1
    8082:	f1 1c       	adc	r15, r1
    8084:	0a 15       	cp	r16, r10
    8086:	1b 05       	cpc	r17, r11
    8088:	2c f0       	brlt	.+10     	; 0x8094 <vfprintf+0x3bc>
    808a:	90 e0       	ldi	r25, 0x00	; 0
    808c:	b3 01       	movw	r22, r6
    808e:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    8092:	e0 cf       	rjmp	.-64     	; 0x8054 <vfprintf+0x37c>
    8094:	0c 15       	cp	r16, r12
    8096:	1d 05       	cpc	r17, r13
    8098:	39 f4       	brne	.+14     	; 0x80a8 <vfprintf+0x3d0>
    809a:	9a 81       	ldd	r25, Y+2	; 0x02
    809c:	96 33       	cpi	r25, 0x36	; 54
    809e:	18 f4       	brcc	.+6      	; 0x80a6 <vfprintf+0x3ce>
    80a0:	95 33       	cpi	r25, 0x35	; 53
    80a2:	11 f4       	brne	.+4      	; 0x80a8 <vfprintf+0x3d0>
    80a4:	24 fe       	sbrs	r2, 4
    80a6:	81 e3       	ldi	r24, 0x31	; 49
    80a8:	90 e0       	ldi	r25, 0x00	; 0
    80aa:	4b c0       	rjmp	.+150    	; 0x8142 <vfprintf+0x46a>
    80ac:	8a 81       	ldd	r24, Y+2	; 0x02
    80ae:	81 33       	cpi	r24, 0x31	; 49
    80b0:	09 f0       	breq	.+2      	; 0x80b4 <vfprintf+0x3dc>
    80b2:	0f 7e       	andi	r16, 0xEF	; 239
    80b4:	90 e0       	ldi	r25, 0x00	; 0
    80b6:	b3 01       	movw	r22, r6
    80b8:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    80bc:	99 20       	and	r9, r9
    80be:	a1 f0       	breq	.+40     	; 0x80e8 <vfprintf+0x410>
    80c0:	8e e2       	ldi	r24, 0x2E	; 46
    80c2:	90 e0       	ldi	r25, 0x00	; 0
    80c4:	b3 01       	movw	r22, r6
    80c6:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    80ca:	12 e0       	ldi	r17, 0x02	; 2
    80cc:	e1 e0       	ldi	r30, 0x01	; 1
    80ce:	f0 e0       	ldi	r31, 0x00	; 0
    80d0:	ec 0f       	add	r30, r28
    80d2:	fd 1f       	adc	r31, r29
    80d4:	e1 0f       	add	r30, r17
    80d6:	f1 1d       	adc	r31, r1
    80d8:	1f 5f       	subi	r17, 0xFF	; 255
    80da:	80 81       	ld	r24, Z
    80dc:	90 e0       	ldi	r25, 0x00	; 0
    80de:	b3 01       	movw	r22, r6
    80e0:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    80e4:	9a 94       	dec	r9
    80e6:	91 f7       	brne	.-28     	; 0x80cc <vfprintf+0x3f4>
    80e8:	44 fc       	sbrc	r4, 4
    80ea:	03 c0       	rjmp	.+6      	; 0x80f2 <vfprintf+0x41a>
    80ec:	85 e6       	ldi	r24, 0x65	; 101
    80ee:	90 e0       	ldi	r25, 0x00	; 0
    80f0:	02 c0       	rjmp	.+4      	; 0x80f6 <vfprintf+0x41e>
    80f2:	85 e4       	ldi	r24, 0x45	; 69
    80f4:	90 e0       	ldi	r25, 0x00	; 0
    80f6:	b3 01       	movw	r22, r6
    80f8:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    80fc:	d7 fc       	sbrc	r13, 7
    80fe:	05 c0       	rjmp	.+10     	; 0x810a <vfprintf+0x432>
    8100:	c1 14       	cp	r12, r1
    8102:	d1 04       	cpc	r13, r1
    8104:	41 f4       	brne	.+16     	; 0x8116 <vfprintf+0x43e>
    8106:	04 ff       	sbrs	r16, 4
    8108:	06 c0       	rjmp	.+12     	; 0x8116 <vfprintf+0x43e>
    810a:	d0 94       	com	r13
    810c:	c1 94       	neg	r12
    810e:	d1 08       	sbc	r13, r1
    8110:	d3 94       	inc	r13
    8112:	8d e2       	ldi	r24, 0x2D	; 45
    8114:	01 c0       	rjmp	.+2      	; 0x8118 <vfprintf+0x440>
    8116:	8b e2       	ldi	r24, 0x2B	; 43
    8118:	90 e0       	ldi	r25, 0x00	; 0
    811a:	b3 01       	movw	r22, r6
    811c:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    8120:	80 e3       	ldi	r24, 0x30	; 48
    8122:	05 c0       	rjmp	.+10     	; 0x812e <vfprintf+0x456>
    8124:	8f 5f       	subi	r24, 0xFF	; 255
    8126:	26 ef       	ldi	r18, 0xF6	; 246
    8128:	3f ef       	ldi	r19, 0xFF	; 255
    812a:	c2 0e       	add	r12, r18
    812c:	d3 1e       	adc	r13, r19
    812e:	3a e0       	ldi	r19, 0x0A	; 10
    8130:	c3 16       	cp	r12, r19
    8132:	d1 04       	cpc	r13, r1
    8134:	bc f7       	brge	.-18     	; 0x8124 <vfprintf+0x44c>
    8136:	90 e0       	ldi	r25, 0x00	; 0
    8138:	b3 01       	movw	r22, r6
    813a:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    813e:	c6 01       	movw	r24, r12
    8140:	c0 96       	adiw	r24, 0x30	; 48
    8142:	b3 01       	movw	r22, r6
    8144:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    8148:	cc 84       	ldd	r12, Y+12	; 0x0c
    814a:	dd 84       	ldd	r13, Y+13	; 0x0d
    814c:	52 c1       	rjmp	.+676    	; 0x83f2 <vfprintf+0x71a>
    814e:	93 36       	cpi	r25, 0x63	; 99
    8150:	31 f0       	breq	.+12     	; 0x815e <vfprintf+0x486>
    8152:	93 37       	cpi	r25, 0x73	; 115
    8154:	99 f0       	breq	.+38     	; 0x817c <vfprintf+0x4a4>
    8156:	93 35       	cpi	r25, 0x53	; 83
    8158:	09 f0       	breq	.+2      	; 0x815c <vfprintf+0x484>
    815a:	59 c0       	rjmp	.+178    	; 0x820e <vfprintf+0x536>
    815c:	23 c0       	rjmp	.+70     	; 0x81a4 <vfprintf+0x4cc>
    815e:	f6 01       	movw	r30, r12
    8160:	80 81       	ld	r24, Z
    8162:	89 83       	std	Y+1, r24	; 0x01
    8164:	5e 01       	movw	r10, r28
    8166:	08 94       	sec
    8168:	a1 1c       	adc	r10, r1
    816a:	b1 1c       	adc	r11, r1
    816c:	22 e0       	ldi	r18, 0x02	; 2
    816e:	30 e0       	ldi	r19, 0x00	; 0
    8170:	c2 0e       	add	r12, r18
    8172:	d3 1e       	adc	r13, r19
    8174:	21 e0       	ldi	r18, 0x01	; 1
    8176:	e2 2e       	mov	r14, r18
    8178:	f1 2c       	mov	r15, r1
    817a:	12 c0       	rjmp	.+36     	; 0x81a0 <vfprintf+0x4c8>
    817c:	f6 01       	movw	r30, r12
    817e:	a0 80       	ld	r10, Z
    8180:	b1 80       	ldd	r11, Z+1	; 0x01
    8182:	16 fd       	sbrc	r17, 6
    8184:	03 c0       	rjmp	.+6      	; 0x818c <vfprintf+0x4b4>
    8186:	6f ef       	ldi	r22, 0xFF	; 255
    8188:	7f ef       	ldi	r23, 0xFF	; 255
    818a:	02 c0       	rjmp	.+4      	; 0x8190 <vfprintf+0x4b8>
    818c:	69 2d       	mov	r22, r9
    818e:	70 e0       	ldi	r23, 0x00	; 0
    8190:	22 e0       	ldi	r18, 0x02	; 2
    8192:	30 e0       	ldi	r19, 0x00	; 0
    8194:	c2 0e       	add	r12, r18
    8196:	d3 1e       	adc	r13, r19
    8198:	c5 01       	movw	r24, r10
    819a:	0e 94 50 49 	call	0x92a0	; 0x92a0 <strnlen>
    819e:	7c 01       	movw	r14, r24
    81a0:	1f 77       	andi	r17, 0x7F	; 127
    81a2:	13 c0       	rjmp	.+38     	; 0x81ca <vfprintf+0x4f2>
    81a4:	f6 01       	movw	r30, r12
    81a6:	a0 80       	ld	r10, Z
    81a8:	b1 80       	ldd	r11, Z+1	; 0x01
    81aa:	16 fd       	sbrc	r17, 6
    81ac:	03 c0       	rjmp	.+6      	; 0x81b4 <vfprintf+0x4dc>
    81ae:	6f ef       	ldi	r22, 0xFF	; 255
    81b0:	7f ef       	ldi	r23, 0xFF	; 255
    81b2:	02 c0       	rjmp	.+4      	; 0x81b8 <vfprintf+0x4e0>
    81b4:	69 2d       	mov	r22, r9
    81b6:	70 e0       	ldi	r23, 0x00	; 0
    81b8:	22 e0       	ldi	r18, 0x02	; 2
    81ba:	30 e0       	ldi	r19, 0x00	; 0
    81bc:	c2 0e       	add	r12, r18
    81be:	d3 1e       	adc	r13, r19
    81c0:	c5 01       	movw	r24, r10
    81c2:	0e 94 45 49 	call	0x928a	; 0x928a <strnlen_P>
    81c6:	7c 01       	movw	r14, r24
    81c8:	10 68       	ori	r17, 0x80	; 128
    81ca:	13 ff       	sbrs	r17, 3
    81cc:	07 c0       	rjmp	.+14     	; 0x81dc <vfprintf+0x504>
    81ce:	1b c0       	rjmp	.+54     	; 0x8206 <vfprintf+0x52e>
    81d0:	80 e2       	ldi	r24, 0x20	; 32
    81d2:	90 e0       	ldi	r25, 0x00	; 0
    81d4:	b3 01       	movw	r22, r6
    81d6:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    81da:	8a 94       	dec	r8
    81dc:	88 2d       	mov	r24, r8
    81de:	90 e0       	ldi	r25, 0x00	; 0
    81e0:	e8 16       	cp	r14, r24
    81e2:	f9 06       	cpc	r15, r25
    81e4:	a8 f3       	brcs	.-22     	; 0x81d0 <vfprintf+0x4f8>
    81e6:	0f c0       	rjmp	.+30     	; 0x8206 <vfprintf+0x52e>
    81e8:	f5 01       	movw	r30, r10
    81ea:	17 fd       	sbrc	r17, 7
    81ec:	85 91       	lpm	r24, Z+
    81ee:	17 ff       	sbrs	r17, 7
    81f0:	81 91       	ld	r24, Z+
    81f2:	5f 01       	movw	r10, r30
    81f4:	90 e0       	ldi	r25, 0x00	; 0
    81f6:	b3 01       	movw	r22, r6
    81f8:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    81fc:	81 10       	cpse	r8, r1
    81fe:	8a 94       	dec	r8
    8200:	08 94       	sec
    8202:	e1 08       	sbc	r14, r1
    8204:	f1 08       	sbc	r15, r1
    8206:	e1 14       	cp	r14, r1
    8208:	f1 04       	cpc	r15, r1
    820a:	71 f7       	brne	.-36     	; 0x81e8 <vfprintf+0x510>
    820c:	f2 c0       	rjmp	.+484    	; 0x83f2 <vfprintf+0x71a>
    820e:	94 36       	cpi	r25, 0x64	; 100
    8210:	11 f0       	breq	.+4      	; 0x8216 <vfprintf+0x53e>
    8212:	99 36       	cpi	r25, 0x69	; 105
    8214:	89 f5       	brne	.+98     	; 0x8278 <vfprintf+0x5a0>
    8216:	17 ff       	sbrs	r17, 7
    8218:	08 c0       	rjmp	.+16     	; 0x822a <vfprintf+0x552>
    821a:	f6 01       	movw	r30, r12
    821c:	20 81       	ld	r18, Z
    821e:	31 81       	ldd	r19, Z+1	; 0x01
    8220:	42 81       	ldd	r20, Z+2	; 0x02
    8222:	53 81       	ldd	r21, Z+3	; 0x03
    8224:	84 e0       	ldi	r24, 0x04	; 4
    8226:	90 e0       	ldi	r25, 0x00	; 0
    8228:	0a c0       	rjmp	.+20     	; 0x823e <vfprintf+0x566>
    822a:	f6 01       	movw	r30, r12
    822c:	80 81       	ld	r24, Z
    822e:	91 81       	ldd	r25, Z+1	; 0x01
    8230:	9c 01       	movw	r18, r24
    8232:	44 27       	eor	r20, r20
    8234:	37 fd       	sbrc	r19, 7
    8236:	40 95       	com	r20
    8238:	54 2f       	mov	r21, r20
    823a:	82 e0       	ldi	r24, 0x02	; 2
    823c:	90 e0       	ldi	r25, 0x00	; 0
    823e:	c8 0e       	add	r12, r24
    8240:	d9 1e       	adc	r13, r25
    8242:	9f e6       	ldi	r25, 0x6F	; 111
    8244:	f9 2e       	mov	r15, r25
    8246:	f1 22       	and	r15, r17
    8248:	57 ff       	sbrs	r21, 7
    824a:	09 c0       	rjmp	.+18     	; 0x825e <vfprintf+0x586>
    824c:	50 95       	com	r21
    824e:	40 95       	com	r20
    8250:	30 95       	com	r19
    8252:	21 95       	neg	r18
    8254:	3f 4f       	sbci	r19, 0xFF	; 255
    8256:	4f 4f       	sbci	r20, 0xFF	; 255
    8258:	5f 4f       	sbci	r21, 0xFF	; 255
    825a:	90 e8       	ldi	r25, 0x80	; 128
    825c:	f9 2a       	or	r15, r25
    825e:	ca 01       	movw	r24, r20
    8260:	b9 01       	movw	r22, r18
    8262:	ae 01       	movw	r20, r28
    8264:	4f 5f       	subi	r20, 0xFF	; 255
    8266:	5f 4f       	sbci	r21, 0xFF	; 255
    8268:	2a e0       	ldi	r18, 0x0A	; 10
    826a:	30 e0       	ldi	r19, 0x00	; 0
    826c:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <__ultoa_invert>
    8270:	e8 2e       	mov	r14, r24
    8272:	e8 89       	ldd	r30, Y+16	; 0x10
    8274:	ee 1a       	sub	r14, r30
    8276:	41 c0       	rjmp	.+130    	; 0x82fa <vfprintf+0x622>
    8278:	95 37       	cpi	r25, 0x75	; 117
    827a:	21 f4       	brne	.+8      	; 0x8284 <vfprintf+0x5ac>
    827c:	1f 7e       	andi	r17, 0xEF	; 239
    827e:	2a e0       	ldi	r18, 0x0A	; 10
    8280:	30 e0       	ldi	r19, 0x00	; 0
    8282:	1c c0       	rjmp	.+56     	; 0x82bc <vfprintf+0x5e4>
    8284:	19 7f       	andi	r17, 0xF9	; 249
    8286:	9f 36       	cpi	r25, 0x6F	; 111
    8288:	61 f0       	breq	.+24     	; 0x82a2 <vfprintf+0x5ca>
    828a:	90 37       	cpi	r25, 0x70	; 112
    828c:	20 f4       	brcc	.+8      	; 0x8296 <vfprintf+0x5be>
    828e:	98 35       	cpi	r25, 0x58	; 88
    8290:	09 f0       	breq	.+2      	; 0x8294 <vfprintf+0x5bc>
    8292:	b2 c0       	rjmp	.+356    	; 0x83f8 <vfprintf+0x720>
    8294:	0f c0       	rjmp	.+30     	; 0x82b4 <vfprintf+0x5dc>
    8296:	90 37       	cpi	r25, 0x70	; 112
    8298:	39 f0       	breq	.+14     	; 0x82a8 <vfprintf+0x5d0>
    829a:	98 37       	cpi	r25, 0x78	; 120
    829c:	09 f0       	breq	.+2      	; 0x82a0 <vfprintf+0x5c8>
    829e:	ac c0       	rjmp	.+344    	; 0x83f8 <vfprintf+0x720>
    82a0:	04 c0       	rjmp	.+8      	; 0x82aa <vfprintf+0x5d2>
    82a2:	28 e0       	ldi	r18, 0x08	; 8
    82a4:	30 e0       	ldi	r19, 0x00	; 0
    82a6:	0a c0       	rjmp	.+20     	; 0x82bc <vfprintf+0x5e4>
    82a8:	10 61       	ori	r17, 0x10	; 16
    82aa:	14 fd       	sbrc	r17, 4
    82ac:	14 60       	ori	r17, 0x04	; 4
    82ae:	20 e1       	ldi	r18, 0x10	; 16
    82b0:	30 e0       	ldi	r19, 0x00	; 0
    82b2:	04 c0       	rjmp	.+8      	; 0x82bc <vfprintf+0x5e4>
    82b4:	14 fd       	sbrc	r17, 4
    82b6:	16 60       	ori	r17, 0x06	; 6
    82b8:	20 e1       	ldi	r18, 0x10	; 16
    82ba:	32 e0       	ldi	r19, 0x02	; 2
    82bc:	17 ff       	sbrs	r17, 7
    82be:	08 c0       	rjmp	.+16     	; 0x82d0 <vfprintf+0x5f8>
    82c0:	f6 01       	movw	r30, r12
    82c2:	60 81       	ld	r22, Z
    82c4:	71 81       	ldd	r23, Z+1	; 0x01
    82c6:	82 81       	ldd	r24, Z+2	; 0x02
    82c8:	93 81       	ldd	r25, Z+3	; 0x03
    82ca:	44 e0       	ldi	r20, 0x04	; 4
    82cc:	50 e0       	ldi	r21, 0x00	; 0
    82ce:	08 c0       	rjmp	.+16     	; 0x82e0 <vfprintf+0x608>
    82d0:	f6 01       	movw	r30, r12
    82d2:	80 81       	ld	r24, Z
    82d4:	91 81       	ldd	r25, Z+1	; 0x01
    82d6:	bc 01       	movw	r22, r24
    82d8:	80 e0       	ldi	r24, 0x00	; 0
    82da:	90 e0       	ldi	r25, 0x00	; 0
    82dc:	42 e0       	ldi	r20, 0x02	; 2
    82de:	50 e0       	ldi	r21, 0x00	; 0
    82e0:	c4 0e       	add	r12, r20
    82e2:	d5 1e       	adc	r13, r21
    82e4:	ae 01       	movw	r20, r28
    82e6:	4f 5f       	subi	r20, 0xFF	; 255
    82e8:	5f 4f       	sbci	r21, 0xFF	; 255
    82ea:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <__ultoa_invert>
    82ee:	e8 2e       	mov	r14, r24
    82f0:	58 89       	ldd	r21, Y+16	; 0x10
    82f2:	e5 1a       	sub	r14, r21
    82f4:	8f e7       	ldi	r24, 0x7F	; 127
    82f6:	f8 2e       	mov	r15, r24
    82f8:	f1 22       	and	r15, r17
    82fa:	f6 fe       	sbrs	r15, 6
    82fc:	0b c0       	rjmp	.+22     	; 0x8314 <vfprintf+0x63c>
    82fe:	8e ef       	ldi	r24, 0xFE	; 254
    8300:	f8 22       	and	r15, r24
    8302:	e9 14       	cp	r14, r9
    8304:	38 f4       	brcc	.+14     	; 0x8314 <vfprintf+0x63c>
    8306:	f4 fe       	sbrs	r15, 4
    8308:	07 c0       	rjmp	.+14     	; 0x8318 <vfprintf+0x640>
    830a:	f2 fc       	sbrc	r15, 2
    830c:	05 c0       	rjmp	.+10     	; 0x8318 <vfprintf+0x640>
    830e:	9f ee       	ldi	r25, 0xEF	; 239
    8310:	f9 22       	and	r15, r25
    8312:	02 c0       	rjmp	.+4      	; 0x8318 <vfprintf+0x640>
    8314:	1e 2d       	mov	r17, r14
    8316:	01 c0       	rjmp	.+2      	; 0x831a <vfprintf+0x642>
    8318:	19 2d       	mov	r17, r9
    831a:	f4 fe       	sbrs	r15, 4
    831c:	0d c0       	rjmp	.+26     	; 0x8338 <vfprintf+0x660>
    831e:	fe 01       	movw	r30, r28
    8320:	ee 0d       	add	r30, r14
    8322:	f1 1d       	adc	r31, r1
    8324:	80 81       	ld	r24, Z
    8326:	80 33       	cpi	r24, 0x30	; 48
    8328:	19 f4       	brne	.+6      	; 0x8330 <vfprintf+0x658>
    832a:	e9 ee       	ldi	r30, 0xE9	; 233
    832c:	fe 22       	and	r15, r30
    832e:	08 c0       	rjmp	.+16     	; 0x8340 <vfprintf+0x668>
    8330:	1f 5f       	subi	r17, 0xFF	; 255
    8332:	f2 fe       	sbrs	r15, 2
    8334:	05 c0       	rjmp	.+10     	; 0x8340 <vfprintf+0x668>
    8336:	03 c0       	rjmp	.+6      	; 0x833e <vfprintf+0x666>
    8338:	8f 2d       	mov	r24, r15
    833a:	86 78       	andi	r24, 0x86	; 134
    833c:	09 f0       	breq	.+2      	; 0x8340 <vfprintf+0x668>
    833e:	1f 5f       	subi	r17, 0xFF	; 255
    8340:	0f 2d       	mov	r16, r15
    8342:	f3 fc       	sbrc	r15, 3
    8344:	14 c0       	rjmp	.+40     	; 0x836e <vfprintf+0x696>
    8346:	f0 fe       	sbrs	r15, 0
    8348:	0f c0       	rjmp	.+30     	; 0x8368 <vfprintf+0x690>
    834a:	18 15       	cp	r17, r8
    834c:	10 f0       	brcs	.+4      	; 0x8352 <vfprintf+0x67a>
    834e:	9e 2c       	mov	r9, r14
    8350:	0b c0       	rjmp	.+22     	; 0x8368 <vfprintf+0x690>
    8352:	9e 2c       	mov	r9, r14
    8354:	98 0c       	add	r9, r8
    8356:	91 1a       	sub	r9, r17
    8358:	18 2d       	mov	r17, r8
    835a:	06 c0       	rjmp	.+12     	; 0x8368 <vfprintf+0x690>
    835c:	80 e2       	ldi	r24, 0x20	; 32
    835e:	90 e0       	ldi	r25, 0x00	; 0
    8360:	b3 01       	movw	r22, r6
    8362:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    8366:	1f 5f       	subi	r17, 0xFF	; 255
    8368:	18 15       	cp	r17, r8
    836a:	c0 f3       	brcs	.-16     	; 0x835c <vfprintf+0x684>
    836c:	04 c0       	rjmp	.+8      	; 0x8376 <vfprintf+0x69e>
    836e:	18 15       	cp	r17, r8
    8370:	10 f4       	brcc	.+4      	; 0x8376 <vfprintf+0x69e>
    8372:	81 1a       	sub	r8, r17
    8374:	01 c0       	rjmp	.+2      	; 0x8378 <vfprintf+0x6a0>
    8376:	88 24       	eor	r8, r8
    8378:	04 ff       	sbrs	r16, 4
    837a:	0f c0       	rjmp	.+30     	; 0x839a <vfprintf+0x6c2>
    837c:	80 e3       	ldi	r24, 0x30	; 48
    837e:	90 e0       	ldi	r25, 0x00	; 0
    8380:	b3 01       	movw	r22, r6
    8382:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    8386:	02 ff       	sbrs	r16, 2
    8388:	1d c0       	rjmp	.+58     	; 0x83c4 <vfprintf+0x6ec>
    838a:	01 fd       	sbrc	r16, 1
    838c:	03 c0       	rjmp	.+6      	; 0x8394 <vfprintf+0x6bc>
    838e:	88 e7       	ldi	r24, 0x78	; 120
    8390:	90 e0       	ldi	r25, 0x00	; 0
    8392:	0e c0       	rjmp	.+28     	; 0x83b0 <vfprintf+0x6d8>
    8394:	88 e5       	ldi	r24, 0x58	; 88
    8396:	90 e0       	ldi	r25, 0x00	; 0
    8398:	0b c0       	rjmp	.+22     	; 0x83b0 <vfprintf+0x6d8>
    839a:	80 2f       	mov	r24, r16
    839c:	86 78       	andi	r24, 0x86	; 134
    839e:	91 f0       	breq	.+36     	; 0x83c4 <vfprintf+0x6ec>
    83a0:	01 ff       	sbrs	r16, 1
    83a2:	02 c0       	rjmp	.+4      	; 0x83a8 <vfprintf+0x6d0>
    83a4:	8b e2       	ldi	r24, 0x2B	; 43
    83a6:	01 c0       	rjmp	.+2      	; 0x83aa <vfprintf+0x6d2>
    83a8:	80 e2       	ldi	r24, 0x20	; 32
    83aa:	f7 fc       	sbrc	r15, 7
    83ac:	8d e2       	ldi	r24, 0x2D	; 45
    83ae:	90 e0       	ldi	r25, 0x00	; 0
    83b0:	b3 01       	movw	r22, r6
    83b2:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    83b6:	06 c0       	rjmp	.+12     	; 0x83c4 <vfprintf+0x6ec>
    83b8:	80 e3       	ldi	r24, 0x30	; 48
    83ba:	90 e0       	ldi	r25, 0x00	; 0
    83bc:	b3 01       	movw	r22, r6
    83be:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    83c2:	9a 94       	dec	r9
    83c4:	e9 14       	cp	r14, r9
    83c6:	c0 f3       	brcs	.-16     	; 0x83b8 <vfprintf+0x6e0>
    83c8:	ea 94       	dec	r14
    83ca:	e1 e0       	ldi	r30, 0x01	; 1
    83cc:	f0 e0       	ldi	r31, 0x00	; 0
    83ce:	ec 0f       	add	r30, r28
    83d0:	fd 1f       	adc	r31, r29
    83d2:	ee 0d       	add	r30, r14
    83d4:	f1 1d       	adc	r31, r1
    83d6:	80 81       	ld	r24, Z
    83d8:	90 e0       	ldi	r25, 0x00	; 0
    83da:	b3 01       	movw	r22, r6
    83dc:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    83e0:	ee 20       	and	r14, r14
    83e2:	91 f7       	brne	.-28     	; 0x83c8 <vfprintf+0x6f0>
    83e4:	06 c0       	rjmp	.+12     	; 0x83f2 <vfprintf+0x71a>
    83e6:	80 e2       	ldi	r24, 0x20	; 32
    83e8:	90 e0       	ldi	r25, 0x00	; 0
    83ea:	b3 01       	movw	r22, r6
    83ec:	0e 94 9b 49 	call	0x9336	; 0x9336 <fputc>
    83f0:	8a 94       	dec	r8
    83f2:	88 20       	and	r8, r8
    83f4:	c1 f7       	brne	.-16     	; 0x83e6 <vfprintf+0x70e>
    83f6:	99 cc       	rjmp	.-1742   	; 0x7d2a <vfprintf+0x52>
    83f8:	f3 01       	movw	r30, r6
    83fa:	66 81       	ldd	r22, Z+6	; 0x06
    83fc:	77 81       	ldd	r23, Z+7	; 0x07
    83fe:	cb 01       	movw	r24, r22
    8400:	61 96       	adiw	r28, 0x11	; 17
    8402:	cd bf       	out	0x3d, r28	; 61
    8404:	de bf       	out	0x3e, r29	; 62
    8406:	cf 91       	pop	r28
    8408:	df 91       	pop	r29
    840a:	1f 91       	pop	r17
    840c:	0f 91       	pop	r16
    840e:	ff 90       	pop	r15
    8410:	ef 90       	pop	r14
    8412:	df 90       	pop	r13
    8414:	cf 90       	pop	r12
    8416:	bf 90       	pop	r11
    8418:	af 90       	pop	r10
    841a:	9f 90       	pop	r9
    841c:	8f 90       	pop	r8
    841e:	7f 90       	pop	r7
    8420:	6f 90       	pop	r6
    8422:	5f 90       	pop	r5
    8424:	4f 90       	pop	r4
    8426:	3f 90       	pop	r3
    8428:	2f 90       	pop	r2
    842a:	08 95       	ret

0000842c <__subsf3>:
    842c:	50 58       	subi	r21, 0x80	; 128

0000842e <__addsf3>:
    842e:	bb 27       	eor	r27, r27
    8430:	aa 27       	eor	r26, r26
    8432:	0e d0       	rcall	.+28     	; 0x8450 <__addsf3x>
    8434:	29 c2       	rjmp	.+1106   	; 0x8888 <__fp_round>
    8436:	f2 d1       	rcall	.+996    	; 0x881c <__fp_pscA>
    8438:	30 f0       	brcs	.+12     	; 0x8446 <__addsf3+0x18>
    843a:	f7 d1       	rcall	.+1006   	; 0x882a <__fp_pscB>
    843c:	20 f0       	brcs	.+8      	; 0x8446 <__addsf3+0x18>
    843e:	31 f4       	brne	.+12     	; 0x844c <__addsf3+0x1e>
    8440:	9f 3f       	cpi	r25, 0xFF	; 255
    8442:	11 f4       	brne	.+4      	; 0x8448 <__addsf3+0x1a>
    8444:	1e f4       	brtc	.+6      	; 0x844c <__addsf3+0x1e>
    8446:	c2 c1       	rjmp	.+900    	; 0x87cc <__fp_nan>
    8448:	0e f4       	brtc	.+2      	; 0x844c <__addsf3+0x1e>
    844a:	e0 95       	com	r30
    844c:	e7 fb       	bst	r30, 7
    844e:	8f c1       	rjmp	.+798    	; 0x876e <__fp_inf>

00008450 <__addsf3x>:
    8450:	e9 2f       	mov	r30, r25
    8452:	3c d2       	rcall	.+1144   	; 0x88cc <__fp_split3>
    8454:	80 f3       	brcs	.-32     	; 0x8436 <__addsf3+0x8>
    8456:	ba 17       	cp	r27, r26
    8458:	62 07       	cpc	r22, r18
    845a:	73 07       	cpc	r23, r19
    845c:	84 07       	cpc	r24, r20
    845e:	95 07       	cpc	r25, r21
    8460:	18 f0       	brcs	.+6      	; 0x8468 <__addsf3x+0x18>
    8462:	71 f4       	brne	.+28     	; 0x8480 <__addsf3x+0x30>
    8464:	9e f5       	brtc	.+102    	; 0x84cc <__addsf3x+0x7c>
    8466:	6b c2       	rjmp	.+1238   	; 0x893e <__fp_zero>
    8468:	0e f4       	brtc	.+2      	; 0x846c <__addsf3x+0x1c>
    846a:	e0 95       	com	r30
    846c:	0b 2e       	mov	r0, r27
    846e:	ba 2f       	mov	r27, r26
    8470:	a0 2d       	mov	r26, r0
    8472:	0b 01       	movw	r0, r22
    8474:	b9 01       	movw	r22, r18
    8476:	90 01       	movw	r18, r0
    8478:	0c 01       	movw	r0, r24
    847a:	ca 01       	movw	r24, r20
    847c:	a0 01       	movw	r20, r0
    847e:	11 24       	eor	r1, r1
    8480:	ff 27       	eor	r31, r31
    8482:	59 1b       	sub	r21, r25
    8484:	99 f0       	breq	.+38     	; 0x84ac <__addsf3x+0x5c>
    8486:	59 3f       	cpi	r21, 0xF9	; 249
    8488:	50 f4       	brcc	.+20     	; 0x849e <__addsf3x+0x4e>
    848a:	50 3e       	cpi	r21, 0xE0	; 224
    848c:	68 f1       	brcs	.+90     	; 0x84e8 <__addsf3x+0x98>
    848e:	1a 16       	cp	r1, r26
    8490:	f0 40       	sbci	r31, 0x00	; 0
    8492:	a2 2f       	mov	r26, r18
    8494:	23 2f       	mov	r18, r19
    8496:	34 2f       	mov	r19, r20
    8498:	44 27       	eor	r20, r20
    849a:	58 5f       	subi	r21, 0xF8	; 248
    849c:	f3 cf       	rjmp	.-26     	; 0x8484 <__addsf3x+0x34>
    849e:	46 95       	lsr	r20
    84a0:	37 95       	ror	r19
    84a2:	27 95       	ror	r18
    84a4:	a7 95       	ror	r26
    84a6:	f0 40       	sbci	r31, 0x00	; 0
    84a8:	53 95       	inc	r21
    84aa:	c9 f7       	brne	.-14     	; 0x849e <__addsf3x+0x4e>
    84ac:	7e f4       	brtc	.+30     	; 0x84cc <__addsf3x+0x7c>
    84ae:	1f 16       	cp	r1, r31
    84b0:	ba 0b       	sbc	r27, r26
    84b2:	62 0b       	sbc	r22, r18
    84b4:	73 0b       	sbc	r23, r19
    84b6:	84 0b       	sbc	r24, r20
    84b8:	ba f0       	brmi	.+46     	; 0x84e8 <__addsf3x+0x98>
    84ba:	91 50       	subi	r25, 0x01	; 1
    84bc:	a1 f0       	breq	.+40     	; 0x84e6 <__addsf3x+0x96>
    84be:	ff 0f       	add	r31, r31
    84c0:	bb 1f       	adc	r27, r27
    84c2:	66 1f       	adc	r22, r22
    84c4:	77 1f       	adc	r23, r23
    84c6:	88 1f       	adc	r24, r24
    84c8:	c2 f7       	brpl	.-16     	; 0x84ba <__addsf3x+0x6a>
    84ca:	0e c0       	rjmp	.+28     	; 0x84e8 <__addsf3x+0x98>
    84cc:	ba 0f       	add	r27, r26
    84ce:	62 1f       	adc	r22, r18
    84d0:	73 1f       	adc	r23, r19
    84d2:	84 1f       	adc	r24, r20
    84d4:	48 f4       	brcc	.+18     	; 0x84e8 <__addsf3x+0x98>
    84d6:	87 95       	ror	r24
    84d8:	77 95       	ror	r23
    84da:	67 95       	ror	r22
    84dc:	b7 95       	ror	r27
    84de:	f7 95       	ror	r31
    84e0:	9e 3f       	cpi	r25, 0xFE	; 254
    84e2:	08 f0       	brcs	.+2      	; 0x84e6 <__addsf3x+0x96>
    84e4:	b3 cf       	rjmp	.-154    	; 0x844c <__addsf3+0x1e>
    84e6:	93 95       	inc	r25
    84e8:	88 0f       	add	r24, r24
    84ea:	08 f0       	brcs	.+2      	; 0x84ee <__addsf3x+0x9e>
    84ec:	99 27       	eor	r25, r25
    84ee:	ee 0f       	add	r30, r30
    84f0:	97 95       	ror	r25
    84f2:	87 95       	ror	r24
    84f4:	08 95       	ret

000084f6 <atan>:
    84f6:	df 93       	push	r29
    84f8:	dd 27       	eor	r29, r29
    84fa:	b9 2f       	mov	r27, r25
    84fc:	bf 77       	andi	r27, 0x7F	; 127
    84fe:	40 e8       	ldi	r20, 0x80	; 128
    8500:	5f e3       	ldi	r21, 0x3F	; 63
    8502:	16 16       	cp	r1, r22
    8504:	17 06       	cpc	r1, r23
    8506:	48 07       	cpc	r20, r24
    8508:	5b 07       	cpc	r21, r27
    850a:	10 f4       	brcc	.+4      	; 0x8510 <atan+0x1a>
    850c:	d9 2f       	mov	r29, r25
    850e:	83 d2       	rcall	.+1286   	; 0x8a16 <inverse>
    8510:	9f 93       	push	r25
    8512:	8f 93       	push	r24
    8514:	7f 93       	push	r23
    8516:	6f 93       	push	r22
    8518:	96 d3       	rcall	.+1836   	; 0x8c46 <square>
    851a:	e8 ee       	ldi	r30, 0xE8	; 232
    851c:	f1 e0       	ldi	r31, 0x01	; 1
    851e:	59 d1       	rcall	.+690    	; 0x87d2 <__fp_powser>
    8520:	b3 d1       	rcall	.+870    	; 0x8888 <__fp_round>
    8522:	2f 91       	pop	r18
    8524:	3f 91       	pop	r19
    8526:	4f 91       	pop	r20
    8528:	5f 91       	pop	r21
    852a:	ee d2       	rcall	.+1500   	; 0x8b08 <__mulsf3x>
    852c:	dd 23       	and	r29, r29
    852e:	49 f0       	breq	.+18     	; 0x8542 <atan+0x4c>
    8530:	90 58       	subi	r25, 0x80	; 128
    8532:	a2 ea       	ldi	r26, 0xA2	; 162
    8534:	2a ed       	ldi	r18, 0xDA	; 218
    8536:	3f e0       	ldi	r19, 0x0F	; 15
    8538:	49 ec       	ldi	r20, 0xC9	; 201
    853a:	5f e3       	ldi	r21, 0x3F	; 63
    853c:	d0 78       	andi	r29, 0x80	; 128
    853e:	5d 27       	eor	r21, r29
    8540:	87 df       	rcall	.-242    	; 0x8450 <__addsf3x>
    8542:	df 91       	pop	r29
    8544:	a1 c1       	rjmp	.+834    	; 0x8888 <__fp_round>

00008546 <ceil>:
    8546:	e4 d1       	rcall	.+968    	; 0x8910 <__fp_trunc>
    8548:	80 f0       	brcs	.+32     	; 0x856a <ceil+0x24>
    854a:	9f 37       	cpi	r25, 0x7F	; 127
    854c:	40 f4       	brcc	.+16     	; 0x855e <ceil+0x18>
    854e:	91 11       	cpse	r25, r1
    8550:	0e f4       	brtc	.+2      	; 0x8554 <ceil+0xe>
    8552:	f6 c1       	rjmp	.+1004   	; 0x8940 <__fp_szero>
    8554:	60 e0       	ldi	r22, 0x00	; 0
    8556:	70 e0       	ldi	r23, 0x00	; 0
    8558:	80 e8       	ldi	r24, 0x80	; 128
    855a:	9f e3       	ldi	r25, 0x3F	; 63
    855c:	08 95       	ret
    855e:	26 f0       	brts	.+8      	; 0x8568 <ceil+0x22>
    8560:	1b 16       	cp	r1, r27
    8562:	61 1d       	adc	r22, r1
    8564:	71 1d       	adc	r23, r1
    8566:	81 1d       	adc	r24, r1
    8568:	08 c1       	rjmp	.+528    	; 0x877a <__fp_mintl>
    856a:	22 c1       	rjmp	.+580    	; 0x87b0 <__fp_mpack>

0000856c <__cmpsf2>:
    856c:	dc d0       	rcall	.+440    	; 0x8726 <__fp_cmp>
    856e:	08 f4       	brcc	.+2      	; 0x8572 <__cmpsf2+0x6>
    8570:	81 e0       	ldi	r24, 0x01	; 1
    8572:	08 95       	ret

00008574 <cos>:
    8574:	62 d1       	rcall	.+708    	; 0x883a <__fp_rempio2>
    8576:	e3 95       	inc	r30
    8578:	98 c1       	rjmp	.+816    	; 0x88aa <__fp_sinus>

0000857a <__divsf3>:
    857a:	0c d0       	rcall	.+24     	; 0x8594 <__divsf3x>
    857c:	85 c1       	rjmp	.+778    	; 0x8888 <__fp_round>
    857e:	55 d1       	rcall	.+682    	; 0x882a <__fp_pscB>
    8580:	40 f0       	brcs	.+16     	; 0x8592 <__divsf3+0x18>
    8582:	4c d1       	rcall	.+664    	; 0x881c <__fp_pscA>
    8584:	30 f0       	brcs	.+12     	; 0x8592 <__divsf3+0x18>
    8586:	21 f4       	brne	.+8      	; 0x8590 <__divsf3+0x16>
    8588:	5f 3f       	cpi	r21, 0xFF	; 255
    858a:	19 f0       	breq	.+6      	; 0x8592 <__divsf3+0x18>
    858c:	f0 c0       	rjmp	.+480    	; 0x876e <__fp_inf>
    858e:	51 11       	cpse	r21, r1
    8590:	d7 c1       	rjmp	.+942    	; 0x8940 <__fp_szero>
    8592:	1c c1       	rjmp	.+568    	; 0x87cc <__fp_nan>

00008594 <__divsf3x>:
    8594:	9b d1       	rcall	.+822    	; 0x88cc <__fp_split3>
    8596:	98 f3       	brcs	.-26     	; 0x857e <__divsf3+0x4>

00008598 <__divsf3_pse>:
    8598:	99 23       	and	r25, r25
    859a:	c9 f3       	breq	.-14     	; 0x858e <__divsf3+0x14>
    859c:	55 23       	and	r21, r21
    859e:	b1 f3       	breq	.-20     	; 0x858c <__divsf3+0x12>
    85a0:	95 1b       	sub	r25, r21
    85a2:	55 0b       	sbc	r21, r21
    85a4:	bb 27       	eor	r27, r27
    85a6:	aa 27       	eor	r26, r26
    85a8:	62 17       	cp	r22, r18
    85aa:	73 07       	cpc	r23, r19
    85ac:	84 07       	cpc	r24, r20
    85ae:	38 f0       	brcs	.+14     	; 0x85be <__divsf3_pse+0x26>
    85b0:	9f 5f       	subi	r25, 0xFF	; 255
    85b2:	5f 4f       	sbci	r21, 0xFF	; 255
    85b4:	22 0f       	add	r18, r18
    85b6:	33 1f       	adc	r19, r19
    85b8:	44 1f       	adc	r20, r20
    85ba:	aa 1f       	adc	r26, r26
    85bc:	a9 f3       	breq	.-22     	; 0x85a8 <__divsf3_pse+0x10>
    85be:	33 d0       	rcall	.+102    	; 0x8626 <__divsf3_pse+0x8e>
    85c0:	0e 2e       	mov	r0, r30
    85c2:	3a f0       	brmi	.+14     	; 0x85d2 <__divsf3_pse+0x3a>
    85c4:	e0 e8       	ldi	r30, 0x80	; 128
    85c6:	30 d0       	rcall	.+96     	; 0x8628 <__divsf3_pse+0x90>
    85c8:	91 50       	subi	r25, 0x01	; 1
    85ca:	50 40       	sbci	r21, 0x00	; 0
    85cc:	e6 95       	lsr	r30
    85ce:	00 1c       	adc	r0, r0
    85d0:	ca f7       	brpl	.-14     	; 0x85c4 <__divsf3_pse+0x2c>
    85d2:	29 d0       	rcall	.+82     	; 0x8626 <__divsf3_pse+0x8e>
    85d4:	fe 2f       	mov	r31, r30
    85d6:	27 d0       	rcall	.+78     	; 0x8626 <__divsf3_pse+0x8e>
    85d8:	66 0f       	add	r22, r22
    85da:	77 1f       	adc	r23, r23
    85dc:	88 1f       	adc	r24, r24
    85de:	bb 1f       	adc	r27, r27
    85e0:	26 17       	cp	r18, r22
    85e2:	37 07       	cpc	r19, r23
    85e4:	48 07       	cpc	r20, r24
    85e6:	ab 07       	cpc	r26, r27
    85e8:	b0 e8       	ldi	r27, 0x80	; 128
    85ea:	09 f0       	breq	.+2      	; 0x85ee <__divsf3_pse+0x56>
    85ec:	bb 0b       	sbc	r27, r27
    85ee:	80 2d       	mov	r24, r0
    85f0:	bf 01       	movw	r22, r30
    85f2:	ff 27       	eor	r31, r31
    85f4:	93 58       	subi	r25, 0x83	; 131
    85f6:	5f 4f       	sbci	r21, 0xFF	; 255
    85f8:	2a f0       	brmi	.+10     	; 0x8604 <__divsf3_pse+0x6c>
    85fa:	9e 3f       	cpi	r25, 0xFE	; 254
    85fc:	51 05       	cpc	r21, r1
    85fe:	68 f0       	brcs	.+26     	; 0x861a <__divsf3_pse+0x82>
    8600:	b6 c0       	rjmp	.+364    	; 0x876e <__fp_inf>
    8602:	9e c1       	rjmp	.+828    	; 0x8940 <__fp_szero>
    8604:	5f 3f       	cpi	r21, 0xFF	; 255
    8606:	ec f3       	brlt	.-6      	; 0x8602 <__divsf3_pse+0x6a>
    8608:	98 3e       	cpi	r25, 0xE8	; 232
    860a:	dc f3       	brlt	.-10     	; 0x8602 <__divsf3_pse+0x6a>
    860c:	86 95       	lsr	r24
    860e:	77 95       	ror	r23
    8610:	67 95       	ror	r22
    8612:	b7 95       	ror	r27
    8614:	f7 95       	ror	r31
    8616:	9f 5f       	subi	r25, 0xFF	; 255
    8618:	c9 f7       	brne	.-14     	; 0x860c <__divsf3_pse+0x74>
    861a:	88 0f       	add	r24, r24
    861c:	91 1d       	adc	r25, r1
    861e:	96 95       	lsr	r25
    8620:	87 95       	ror	r24
    8622:	97 f9       	bld	r25, 7
    8624:	08 95       	ret
    8626:	e1 e0       	ldi	r30, 0x01	; 1
    8628:	66 0f       	add	r22, r22
    862a:	77 1f       	adc	r23, r23
    862c:	88 1f       	adc	r24, r24
    862e:	bb 1f       	adc	r27, r27
    8630:	62 17       	cp	r22, r18
    8632:	73 07       	cpc	r23, r19
    8634:	84 07       	cpc	r24, r20
    8636:	ba 07       	cpc	r27, r26
    8638:	20 f0       	brcs	.+8      	; 0x8642 <__divsf3_pse+0xaa>
    863a:	62 1b       	sub	r22, r18
    863c:	73 0b       	sbc	r23, r19
    863e:	84 0b       	sbc	r24, r20
    8640:	ba 0b       	sbc	r27, r26
    8642:	ee 1f       	adc	r30, r30
    8644:	88 f7       	brcc	.-30     	; 0x8628 <__divsf3_pse+0x90>
    8646:	e0 95       	com	r30
    8648:	08 95       	ret

0000864a <__fixsfsi>:
    864a:	04 d0       	rcall	.+8      	; 0x8654 <__fixunssfsi>
    864c:	68 94       	set
    864e:	b1 11       	cpse	r27, r1
    8650:	77 c1       	rjmp	.+750    	; 0x8940 <__fp_szero>
    8652:	08 95       	ret

00008654 <__fixunssfsi>:
    8654:	43 d1       	rcall	.+646    	; 0x88dc <__fp_splitA>
    8656:	88 f0       	brcs	.+34     	; 0x867a <__fixunssfsi+0x26>
    8658:	9f 57       	subi	r25, 0x7F	; 127
    865a:	90 f0       	brcs	.+36     	; 0x8680 <__fixunssfsi+0x2c>
    865c:	b9 2f       	mov	r27, r25
    865e:	99 27       	eor	r25, r25
    8660:	b7 51       	subi	r27, 0x17	; 23
    8662:	a0 f0       	brcs	.+40     	; 0x868c <__fixunssfsi+0x38>
    8664:	d1 f0       	breq	.+52     	; 0x869a <__fixunssfsi+0x46>
    8666:	66 0f       	add	r22, r22
    8668:	77 1f       	adc	r23, r23
    866a:	88 1f       	adc	r24, r24
    866c:	99 1f       	adc	r25, r25
    866e:	1a f0       	brmi	.+6      	; 0x8676 <__fixunssfsi+0x22>
    8670:	ba 95       	dec	r27
    8672:	c9 f7       	brne	.-14     	; 0x8666 <__fixunssfsi+0x12>
    8674:	12 c0       	rjmp	.+36     	; 0x869a <__fixunssfsi+0x46>
    8676:	b1 30       	cpi	r27, 0x01	; 1
    8678:	81 f0       	breq	.+32     	; 0x869a <__fixunssfsi+0x46>
    867a:	61 d1       	rcall	.+706    	; 0x893e <__fp_zero>
    867c:	b1 e0       	ldi	r27, 0x01	; 1
    867e:	08 95       	ret
    8680:	5e c1       	rjmp	.+700    	; 0x893e <__fp_zero>
    8682:	67 2f       	mov	r22, r23
    8684:	78 2f       	mov	r23, r24
    8686:	88 27       	eor	r24, r24
    8688:	b8 5f       	subi	r27, 0xF8	; 248
    868a:	39 f0       	breq	.+14     	; 0x869a <__fixunssfsi+0x46>
    868c:	b9 3f       	cpi	r27, 0xF9	; 249
    868e:	cc f3       	brlt	.-14     	; 0x8682 <__fixunssfsi+0x2e>
    8690:	86 95       	lsr	r24
    8692:	77 95       	ror	r23
    8694:	67 95       	ror	r22
    8696:	b3 95       	inc	r27
    8698:	d9 f7       	brne	.-10     	; 0x8690 <__fixunssfsi+0x3c>
    869a:	3e f4       	brtc	.+14     	; 0x86aa <__fixunssfsi+0x56>
    869c:	90 95       	com	r25
    869e:	80 95       	com	r24
    86a0:	70 95       	com	r23
    86a2:	61 95       	neg	r22
    86a4:	7f 4f       	sbci	r23, 0xFF	; 255
    86a6:	8f 4f       	sbci	r24, 0xFF	; 255
    86a8:	9f 4f       	sbci	r25, 0xFF	; 255
    86aa:	08 95       	ret

000086ac <__floatunsisf>:
    86ac:	e8 94       	clt
    86ae:	09 c0       	rjmp	.+18     	; 0x86c2 <__floatsisf+0x12>

000086b0 <__floatsisf>:
    86b0:	97 fb       	bst	r25, 7
    86b2:	3e f4       	brtc	.+14     	; 0x86c2 <__floatsisf+0x12>
    86b4:	90 95       	com	r25
    86b6:	80 95       	com	r24
    86b8:	70 95       	com	r23
    86ba:	61 95       	neg	r22
    86bc:	7f 4f       	sbci	r23, 0xFF	; 255
    86be:	8f 4f       	sbci	r24, 0xFF	; 255
    86c0:	9f 4f       	sbci	r25, 0xFF	; 255
    86c2:	99 23       	and	r25, r25
    86c4:	a9 f0       	breq	.+42     	; 0x86f0 <__floatsisf+0x40>
    86c6:	f9 2f       	mov	r31, r25
    86c8:	96 e9       	ldi	r25, 0x96	; 150
    86ca:	bb 27       	eor	r27, r27
    86cc:	93 95       	inc	r25
    86ce:	f6 95       	lsr	r31
    86d0:	87 95       	ror	r24
    86d2:	77 95       	ror	r23
    86d4:	67 95       	ror	r22
    86d6:	b7 95       	ror	r27
    86d8:	f1 11       	cpse	r31, r1
    86da:	f8 cf       	rjmp	.-16     	; 0x86cc <__floatsisf+0x1c>
    86dc:	fa f4       	brpl	.+62     	; 0x871c <__floatsisf+0x6c>
    86de:	bb 0f       	add	r27, r27
    86e0:	11 f4       	brne	.+4      	; 0x86e6 <__floatsisf+0x36>
    86e2:	60 ff       	sbrs	r22, 0
    86e4:	1b c0       	rjmp	.+54     	; 0x871c <__floatsisf+0x6c>
    86e6:	6f 5f       	subi	r22, 0xFF	; 255
    86e8:	7f 4f       	sbci	r23, 0xFF	; 255
    86ea:	8f 4f       	sbci	r24, 0xFF	; 255
    86ec:	9f 4f       	sbci	r25, 0xFF	; 255
    86ee:	16 c0       	rjmp	.+44     	; 0x871c <__floatsisf+0x6c>
    86f0:	88 23       	and	r24, r24
    86f2:	11 f0       	breq	.+4      	; 0x86f8 <__floatsisf+0x48>
    86f4:	96 e9       	ldi	r25, 0x96	; 150
    86f6:	11 c0       	rjmp	.+34     	; 0x871a <__floatsisf+0x6a>
    86f8:	77 23       	and	r23, r23
    86fa:	21 f0       	breq	.+8      	; 0x8704 <__floatsisf+0x54>
    86fc:	9e e8       	ldi	r25, 0x8E	; 142
    86fe:	87 2f       	mov	r24, r23
    8700:	76 2f       	mov	r23, r22
    8702:	05 c0       	rjmp	.+10     	; 0x870e <__floatsisf+0x5e>
    8704:	66 23       	and	r22, r22
    8706:	71 f0       	breq	.+28     	; 0x8724 <__floatsisf+0x74>
    8708:	96 e8       	ldi	r25, 0x86	; 134
    870a:	86 2f       	mov	r24, r22
    870c:	70 e0       	ldi	r23, 0x00	; 0
    870e:	60 e0       	ldi	r22, 0x00	; 0
    8710:	2a f0       	brmi	.+10     	; 0x871c <__floatsisf+0x6c>
    8712:	9a 95       	dec	r25
    8714:	66 0f       	add	r22, r22
    8716:	77 1f       	adc	r23, r23
    8718:	88 1f       	adc	r24, r24
    871a:	da f7       	brpl	.-10     	; 0x8712 <__floatsisf+0x62>
    871c:	88 0f       	add	r24, r24
    871e:	96 95       	lsr	r25
    8720:	87 95       	ror	r24
    8722:	97 f9       	bld	r25, 7
    8724:	08 95       	ret

00008726 <__fp_cmp>:
    8726:	99 0f       	add	r25, r25
    8728:	00 08       	sbc	r0, r0
    872a:	55 0f       	add	r21, r21
    872c:	aa 0b       	sbc	r26, r26
    872e:	e0 e8       	ldi	r30, 0x80	; 128
    8730:	fe ef       	ldi	r31, 0xFE	; 254
    8732:	16 16       	cp	r1, r22
    8734:	17 06       	cpc	r1, r23
    8736:	e8 07       	cpc	r30, r24
    8738:	f9 07       	cpc	r31, r25
    873a:	c0 f0       	brcs	.+48     	; 0x876c <__fp_cmp+0x46>
    873c:	12 16       	cp	r1, r18
    873e:	13 06       	cpc	r1, r19
    8740:	e4 07       	cpc	r30, r20
    8742:	f5 07       	cpc	r31, r21
    8744:	98 f0       	brcs	.+38     	; 0x876c <__fp_cmp+0x46>
    8746:	62 1b       	sub	r22, r18
    8748:	73 0b       	sbc	r23, r19
    874a:	84 0b       	sbc	r24, r20
    874c:	95 0b       	sbc	r25, r21
    874e:	39 f4       	brne	.+14     	; 0x875e <__fp_cmp+0x38>
    8750:	0a 26       	eor	r0, r26
    8752:	61 f0       	breq	.+24     	; 0x876c <__fp_cmp+0x46>
    8754:	23 2b       	or	r18, r19
    8756:	24 2b       	or	r18, r20
    8758:	25 2b       	or	r18, r21
    875a:	21 f4       	brne	.+8      	; 0x8764 <__fp_cmp+0x3e>
    875c:	08 95       	ret
    875e:	0a 26       	eor	r0, r26
    8760:	09 f4       	brne	.+2      	; 0x8764 <__fp_cmp+0x3e>
    8762:	a1 40       	sbci	r26, 0x01	; 1
    8764:	a6 95       	lsr	r26
    8766:	8f ef       	ldi	r24, 0xFF	; 255
    8768:	81 1d       	adc	r24, r1
    876a:	81 1d       	adc	r24, r1
    876c:	08 95       	ret

0000876e <__fp_inf>:
    876e:	97 f9       	bld	r25, 7
    8770:	9f 67       	ori	r25, 0x7F	; 127
    8772:	80 e8       	ldi	r24, 0x80	; 128
    8774:	70 e0       	ldi	r23, 0x00	; 0
    8776:	60 e0       	ldi	r22, 0x00	; 0
    8778:	08 95       	ret

0000877a <__fp_mintl>:
    877a:	88 23       	and	r24, r24
    877c:	71 f4       	brne	.+28     	; 0x879a <__fp_mintl+0x20>
    877e:	77 23       	and	r23, r23
    8780:	21 f0       	breq	.+8      	; 0x878a <__fp_mintl+0x10>
    8782:	98 50       	subi	r25, 0x08	; 8
    8784:	87 2b       	or	r24, r23
    8786:	76 2f       	mov	r23, r22
    8788:	07 c0       	rjmp	.+14     	; 0x8798 <__fp_mintl+0x1e>
    878a:	66 23       	and	r22, r22
    878c:	11 f4       	brne	.+4      	; 0x8792 <__fp_mintl+0x18>
    878e:	99 27       	eor	r25, r25
    8790:	0d c0       	rjmp	.+26     	; 0x87ac <__fp_mintl+0x32>
    8792:	90 51       	subi	r25, 0x10	; 16
    8794:	86 2b       	or	r24, r22
    8796:	70 e0       	ldi	r23, 0x00	; 0
    8798:	60 e0       	ldi	r22, 0x00	; 0
    879a:	2a f0       	brmi	.+10     	; 0x87a6 <__fp_mintl+0x2c>
    879c:	9a 95       	dec	r25
    879e:	66 0f       	add	r22, r22
    87a0:	77 1f       	adc	r23, r23
    87a2:	88 1f       	adc	r24, r24
    87a4:	da f7       	brpl	.-10     	; 0x879c <__fp_mintl+0x22>
    87a6:	88 0f       	add	r24, r24
    87a8:	96 95       	lsr	r25
    87aa:	87 95       	ror	r24
    87ac:	97 f9       	bld	r25, 7
    87ae:	08 95       	ret

000087b0 <__fp_mpack>:
    87b0:	9f 3f       	cpi	r25, 0xFF	; 255
    87b2:	31 f0       	breq	.+12     	; 0x87c0 <__fp_mpack_finite+0xc>

000087b4 <__fp_mpack_finite>:
    87b4:	91 50       	subi	r25, 0x01	; 1
    87b6:	20 f4       	brcc	.+8      	; 0x87c0 <__fp_mpack_finite+0xc>
    87b8:	87 95       	ror	r24
    87ba:	77 95       	ror	r23
    87bc:	67 95       	ror	r22
    87be:	b7 95       	ror	r27
    87c0:	88 0f       	add	r24, r24
    87c2:	91 1d       	adc	r25, r1
    87c4:	96 95       	lsr	r25
    87c6:	87 95       	ror	r24
    87c8:	97 f9       	bld	r25, 7
    87ca:	08 95       	ret

000087cc <__fp_nan>:
    87cc:	9f ef       	ldi	r25, 0xFF	; 255
    87ce:	80 ec       	ldi	r24, 0xC0	; 192
    87d0:	08 95       	ret

000087d2 <__fp_powser>:
    87d2:	df 93       	push	r29
    87d4:	cf 93       	push	r28
    87d6:	1f 93       	push	r17
    87d8:	0f 93       	push	r16
    87da:	ff 92       	push	r15
    87dc:	ef 92       	push	r14
    87de:	df 92       	push	r13
    87e0:	7b 01       	movw	r14, r22
    87e2:	8c 01       	movw	r16, r24
    87e4:	68 94       	set
    87e6:	05 c0       	rjmp	.+10     	; 0x87f2 <__fp_powser+0x20>
    87e8:	da 2e       	mov	r13, r26
    87ea:	ef 01       	movw	r28, r30
    87ec:	8d d1       	rcall	.+794    	; 0x8b08 <__mulsf3x>
    87ee:	fe 01       	movw	r30, r28
    87f0:	e8 94       	clt
    87f2:	a5 91       	lpm	r26, Z+
    87f4:	25 91       	lpm	r18, Z+
    87f6:	35 91       	lpm	r19, Z+
    87f8:	45 91       	lpm	r20, Z+
    87fa:	55 91       	lpm	r21, Z+
    87fc:	ae f3       	brts	.-22     	; 0x87e8 <__fp_powser+0x16>
    87fe:	ef 01       	movw	r28, r30
    8800:	27 de       	rcall	.-946    	; 0x8450 <__addsf3x>
    8802:	fe 01       	movw	r30, r28
    8804:	97 01       	movw	r18, r14
    8806:	a8 01       	movw	r20, r16
    8808:	da 94       	dec	r13
    880a:	79 f7       	brne	.-34     	; 0x87ea <__fp_powser+0x18>
    880c:	df 90       	pop	r13
    880e:	ef 90       	pop	r14
    8810:	ff 90       	pop	r15
    8812:	0f 91       	pop	r16
    8814:	1f 91       	pop	r17
    8816:	cf 91       	pop	r28
    8818:	df 91       	pop	r29
    881a:	08 95       	ret

0000881c <__fp_pscA>:
    881c:	00 24       	eor	r0, r0
    881e:	0a 94       	dec	r0
    8820:	16 16       	cp	r1, r22
    8822:	17 06       	cpc	r1, r23
    8824:	18 06       	cpc	r1, r24
    8826:	09 06       	cpc	r0, r25
    8828:	08 95       	ret

0000882a <__fp_pscB>:
    882a:	00 24       	eor	r0, r0
    882c:	0a 94       	dec	r0
    882e:	12 16       	cp	r1, r18
    8830:	13 06       	cpc	r1, r19
    8832:	14 06       	cpc	r1, r20
    8834:	05 06       	cpc	r0, r21
    8836:	08 95       	ret
    8838:	c9 cf       	rjmp	.-110    	; 0x87cc <__fp_nan>

0000883a <__fp_rempio2>:
    883a:	50 d0       	rcall	.+160    	; 0x88dc <__fp_splitA>
    883c:	e8 f3       	brcs	.-6      	; 0x8838 <__fp_pscB+0xe>
    883e:	e8 94       	clt
    8840:	e0 e0       	ldi	r30, 0x00	; 0
    8842:	bb 27       	eor	r27, r27
    8844:	9f 57       	subi	r25, 0x7F	; 127
    8846:	f0 f0       	brcs	.+60     	; 0x8884 <__fp_rempio2+0x4a>
    8848:	2a ed       	ldi	r18, 0xDA	; 218
    884a:	3f e0       	ldi	r19, 0x0F	; 15
    884c:	49 ec       	ldi	r20, 0xC9	; 201
    884e:	06 c0       	rjmp	.+12     	; 0x885c <__fp_rempio2+0x22>
    8850:	ee 0f       	add	r30, r30
    8852:	bb 0f       	add	r27, r27
    8854:	66 1f       	adc	r22, r22
    8856:	77 1f       	adc	r23, r23
    8858:	88 1f       	adc	r24, r24
    885a:	28 f0       	brcs	.+10     	; 0x8866 <__fp_rempio2+0x2c>
    885c:	b2 3a       	cpi	r27, 0xA2	; 162
    885e:	62 07       	cpc	r22, r18
    8860:	73 07       	cpc	r23, r19
    8862:	84 07       	cpc	r24, r20
    8864:	28 f0       	brcs	.+10     	; 0x8870 <__fp_rempio2+0x36>
    8866:	b2 5a       	subi	r27, 0xA2	; 162
    8868:	62 0b       	sbc	r22, r18
    886a:	73 0b       	sbc	r23, r19
    886c:	84 0b       	sbc	r24, r20
    886e:	e3 95       	inc	r30
    8870:	9a 95       	dec	r25
    8872:	72 f7       	brpl	.-36     	; 0x8850 <__fp_rempio2+0x16>
    8874:	80 38       	cpi	r24, 0x80	; 128
    8876:	30 f4       	brcc	.+12     	; 0x8884 <__fp_rempio2+0x4a>
    8878:	9a 95       	dec	r25
    887a:	bb 0f       	add	r27, r27
    887c:	66 1f       	adc	r22, r22
    887e:	77 1f       	adc	r23, r23
    8880:	88 1f       	adc	r24, r24
    8882:	d2 f7       	brpl	.-12     	; 0x8878 <__fp_rempio2+0x3e>
    8884:	90 48       	sbci	r25, 0x80	; 128
    8886:	96 cf       	rjmp	.-212    	; 0x87b4 <__fp_mpack_finite>

00008888 <__fp_round>:
    8888:	09 2e       	mov	r0, r25
    888a:	03 94       	inc	r0
    888c:	00 0c       	add	r0, r0
    888e:	11 f4       	brne	.+4      	; 0x8894 <__fp_round+0xc>
    8890:	88 23       	and	r24, r24
    8892:	52 f0       	brmi	.+20     	; 0x88a8 <__fp_round+0x20>
    8894:	bb 0f       	add	r27, r27
    8896:	40 f4       	brcc	.+16     	; 0x88a8 <__fp_round+0x20>
    8898:	bf 2b       	or	r27, r31
    889a:	11 f4       	brne	.+4      	; 0x88a0 <__fp_round+0x18>
    889c:	60 ff       	sbrs	r22, 0
    889e:	04 c0       	rjmp	.+8      	; 0x88a8 <__fp_round+0x20>
    88a0:	6f 5f       	subi	r22, 0xFF	; 255
    88a2:	7f 4f       	sbci	r23, 0xFF	; 255
    88a4:	8f 4f       	sbci	r24, 0xFF	; 255
    88a6:	9f 4f       	sbci	r25, 0xFF	; 255
    88a8:	08 95       	ret

000088aa <__fp_sinus>:
    88aa:	ef 93       	push	r30
    88ac:	e0 ff       	sbrs	r30, 0
    88ae:	06 c0       	rjmp	.+12     	; 0x88bc <__fp_sinus+0x12>
    88b0:	a2 ea       	ldi	r26, 0xA2	; 162
    88b2:	2a ed       	ldi	r18, 0xDA	; 218
    88b4:	3f e0       	ldi	r19, 0x0F	; 15
    88b6:	49 ec       	ldi	r20, 0xC9	; 201
    88b8:	5f eb       	ldi	r21, 0xBF	; 191
    88ba:	ca dd       	rcall	.-1132   	; 0x8450 <__addsf3x>
    88bc:	e5 df       	rcall	.-54     	; 0x8888 <__fp_round>
    88be:	0f 90       	pop	r0
    88c0:	03 94       	inc	r0
    88c2:	01 fc       	sbrc	r0, 1
    88c4:	90 58       	subi	r25, 0x80	; 128
    88c6:	e5 e1       	ldi	r30, 0x15	; 21
    88c8:	f2 e0       	ldi	r31, 0x02	; 2
    88ca:	d2 c1       	rjmp	.+932    	; 0x8c70 <__fp_powsodd>

000088cc <__fp_split3>:
    88cc:	57 fd       	sbrc	r21, 7
    88ce:	90 58       	subi	r25, 0x80	; 128
    88d0:	44 0f       	add	r20, r20
    88d2:	55 1f       	adc	r21, r21
    88d4:	59 f0       	breq	.+22     	; 0x88ec <__fp_splitA+0x10>
    88d6:	5f 3f       	cpi	r21, 0xFF	; 255
    88d8:	71 f0       	breq	.+28     	; 0x88f6 <__fp_splitA+0x1a>
    88da:	47 95       	ror	r20

000088dc <__fp_splitA>:
    88dc:	88 0f       	add	r24, r24
    88de:	97 fb       	bst	r25, 7
    88e0:	99 1f       	adc	r25, r25
    88e2:	61 f0       	breq	.+24     	; 0x88fc <__fp_splitA+0x20>
    88e4:	9f 3f       	cpi	r25, 0xFF	; 255
    88e6:	79 f0       	breq	.+30     	; 0x8906 <__fp_splitA+0x2a>
    88e8:	87 95       	ror	r24
    88ea:	08 95       	ret
    88ec:	12 16       	cp	r1, r18
    88ee:	13 06       	cpc	r1, r19
    88f0:	14 06       	cpc	r1, r20
    88f2:	55 1f       	adc	r21, r21
    88f4:	f2 cf       	rjmp	.-28     	; 0x88da <__fp_split3+0xe>
    88f6:	46 95       	lsr	r20
    88f8:	f1 df       	rcall	.-30     	; 0x88dc <__fp_splitA>
    88fa:	08 c0       	rjmp	.+16     	; 0x890c <__fp_splitA+0x30>
    88fc:	16 16       	cp	r1, r22
    88fe:	17 06       	cpc	r1, r23
    8900:	18 06       	cpc	r1, r24
    8902:	99 1f       	adc	r25, r25
    8904:	f1 cf       	rjmp	.-30     	; 0x88e8 <__fp_splitA+0xc>
    8906:	86 95       	lsr	r24
    8908:	71 05       	cpc	r23, r1
    890a:	61 05       	cpc	r22, r1
    890c:	08 94       	sec
    890e:	08 95       	ret

00008910 <__fp_trunc>:
    8910:	e5 df       	rcall	.-54     	; 0x88dc <__fp_splitA>
    8912:	a0 f0       	brcs	.+40     	; 0x893c <__fp_trunc+0x2c>
    8914:	be e7       	ldi	r27, 0x7E	; 126
    8916:	b9 17       	cp	r27, r25
    8918:	88 f4       	brcc	.+34     	; 0x893c <__fp_trunc+0x2c>
    891a:	bb 27       	eor	r27, r27
    891c:	9f 38       	cpi	r25, 0x8F	; 143
    891e:	60 f4       	brcc	.+24     	; 0x8938 <__fp_trunc+0x28>
    8920:	16 16       	cp	r1, r22
    8922:	b1 1d       	adc	r27, r1
    8924:	67 2f       	mov	r22, r23
    8926:	78 2f       	mov	r23, r24
    8928:	88 27       	eor	r24, r24
    892a:	98 5f       	subi	r25, 0xF8	; 248
    892c:	f7 cf       	rjmp	.-18     	; 0x891c <__fp_trunc+0xc>
    892e:	86 95       	lsr	r24
    8930:	77 95       	ror	r23
    8932:	67 95       	ror	r22
    8934:	b1 1d       	adc	r27, r1
    8936:	93 95       	inc	r25
    8938:	96 39       	cpi	r25, 0x96	; 150
    893a:	c8 f3       	brcs	.-14     	; 0x892e <__fp_trunc+0x1e>
    893c:	08 95       	ret

0000893e <__fp_zero>:
    893e:	e8 94       	clt

00008940 <__fp_szero>:
    8940:	bb 27       	eor	r27, r27
    8942:	66 27       	eor	r22, r22
    8944:	77 27       	eor	r23, r23
    8946:	cb 01       	movw	r24, r22
    8948:	97 f9       	bld	r25, 7
    894a:	08 95       	ret

0000894c <__gesf2>:
    894c:	ec de       	rcall	.-552    	; 0x8726 <__fp_cmp>
    894e:	08 f4       	brcc	.+2      	; 0x8952 <__gesf2+0x6>
    8950:	8f ef       	ldi	r24, 0xFF	; 255
    8952:	08 95       	ret
    8954:	63 df       	rcall	.-314    	; 0x881c <__fp_pscA>
    8956:	19 f0       	breq	.+6      	; 0x895e <__gesf2+0x12>
    8958:	68 df       	rcall	.-304    	; 0x882a <__fp_pscB>
    895a:	09 f0       	breq	.+2      	; 0x895e <__gesf2+0x12>
    895c:	37 cf       	rjmp	.-402    	; 0x87cc <__fp_nan>
    895e:	07 cf       	rjmp	.-498    	; 0x876e <__fp_inf>
    8960:	b9 01       	movw	r22, r18
    8962:	ca 01       	movw	r24, r20
    8964:	25 cf       	rjmp	.-438    	; 0x87b0 <__fp_mpack>

00008966 <hypot>:
    8966:	9f 77       	andi	r25, 0x7F	; 127
    8968:	5f 77       	andi	r21, 0x7F	; 127
    896a:	b0 df       	rcall	.-160    	; 0x88cc <__fp_split3>
    896c:	98 f3       	brcs	.-26     	; 0x8954 <__gesf2+0x8>
    896e:	99 23       	and	r25, r25
    8970:	b9 f3       	breq	.-18     	; 0x8960 <__gesf2+0x14>
    8972:	55 23       	and	r21, r21
    8974:	b9 f3       	breq	.-18     	; 0x8964 <__gesf2+0x18>
    8976:	ff 27       	eor	r31, r31
    8978:	95 17       	cp	r25, r21
    897a:	58 f4       	brcc	.+22     	; 0x8992 <hypot+0x2c>
    897c:	e5 2f       	mov	r30, r21
    897e:	e9 1b       	sub	r30, r25
    8980:	ed 30       	cpi	r30, 0x0D	; 13
    8982:	70 f7       	brcc	.-36     	; 0x8960 <__gesf2+0x14>
    8984:	5e 3b       	cpi	r21, 0xBE	; 190
    8986:	10 f0       	brcs	.+4      	; 0x898c <hypot+0x26>
    8988:	f1 e4       	ldi	r31, 0x41	; 65
    898a:	1c c0       	rjmp	.+56     	; 0x89c4 <hypot+0x5e>
    898c:	90 34       	cpi	r25, 0x40	; 64
    898e:	e0 f4       	brcc	.+56     	; 0x89c8 <hypot+0x62>
    8990:	0a c0       	rjmp	.+20     	; 0x89a6 <hypot+0x40>
    8992:	e9 2f       	mov	r30, r25
    8994:	e5 1b       	sub	r30, r21
    8996:	ed 30       	cpi	r30, 0x0D	; 13
    8998:	28 f7       	brcc	.-54     	; 0x8964 <__gesf2+0x18>
    899a:	9e 3b       	cpi	r25, 0xBE	; 190
    899c:	10 f0       	brcs	.+4      	; 0x89a2 <hypot+0x3c>
    899e:	f1 e4       	ldi	r31, 0x41	; 65
    89a0:	11 c0       	rjmp	.+34     	; 0x89c4 <hypot+0x5e>
    89a2:	50 34       	cpi	r21, 0x40	; 64
    89a4:	88 f4       	brcc	.+34     	; 0x89c8 <hypot+0x62>
    89a6:	f9 ea       	ldi	r31, 0xA9	; 169
    89a8:	88 23       	and	r24, r24
    89aa:	2a f0       	brmi	.+10     	; 0x89b6 <hypot+0x50>
    89ac:	9a 95       	dec	r25
    89ae:	66 0f       	add	r22, r22
    89b0:	77 1f       	adc	r23, r23
    89b2:	88 1f       	adc	r24, r24
    89b4:	da f7       	brpl	.-10     	; 0x89ac <hypot+0x46>
    89b6:	44 23       	and	r20, r20
    89b8:	2a f0       	brmi	.+10     	; 0x89c4 <hypot+0x5e>
    89ba:	5a 95       	dec	r21
    89bc:	22 0f       	add	r18, r18
    89be:	33 1f       	adc	r19, r19
    89c0:	44 1f       	adc	r20, r20
    89c2:	da f7       	brpl	.-10     	; 0x89ba <hypot+0x54>
    89c4:	9f 1b       	sub	r25, r31
    89c6:	5f 1b       	sub	r21, r31
    89c8:	ff 93       	push	r31
    89ca:	1f 93       	push	r17
    89cc:	0f 93       	push	r16
    89ce:	ff 92       	push	r15
    89d0:	ef 92       	push	r14
    89d2:	79 01       	movw	r14, r18
    89d4:	8a 01       	movw	r16, r20
    89d6:	bb 27       	eor	r27, r27
    89d8:	ab 2f       	mov	r26, r27
    89da:	9b 01       	movw	r18, r22
    89dc:	ac 01       	movw	r20, r24
    89de:	96 d0       	rcall	.+300    	; 0x8b0c <__mulsf3_pse>
    89e0:	97 01       	movw	r18, r14
    89e2:	a8 01       	movw	r20, r16
    89e4:	bf 93       	push	r27
    89e6:	7b 01       	movw	r14, r22
    89e8:	8c 01       	movw	r16, r24
    89ea:	aa 27       	eor	r26, r26
    89ec:	ba 2f       	mov	r27, r26
    89ee:	b9 01       	movw	r22, r18
    89f0:	ca 01       	movw	r24, r20
    89f2:	8c d0       	rcall	.+280    	; 0x8b0c <__mulsf3_pse>
    89f4:	af 91       	pop	r26
    89f6:	97 01       	movw	r18, r14
    89f8:	a8 01       	movw	r20, r16
    89fa:	ef 90       	pop	r14
    89fc:	ff 90       	pop	r15
    89fe:	0f 91       	pop	r16
    8a00:	1f 91       	pop	r17
    8a02:	26 dd       	rcall	.-1460   	; 0x8450 <__addsf3x>
    8a04:	41 df       	rcall	.-382    	; 0x8888 <__fp_round>
    8a06:	e1 d0       	rcall	.+450    	; 0x8bca <sqrt>
    8a08:	4f 91       	pop	r20
    8a0a:	40 ff       	sbrs	r20, 0
    8a0c:	08 95       	ret
    8a0e:	55 27       	eor	r21, r21
    8a10:	47 fd       	sbrc	r20, 7
    8a12:	50 95       	com	r21
    8a14:	09 c0       	rjmp	.+18     	; 0x8a28 <ldexp>

00008a16 <inverse>:
    8a16:	9b 01       	movw	r18, r22
    8a18:	ac 01       	movw	r20, r24
    8a1a:	60 e0       	ldi	r22, 0x00	; 0
    8a1c:	70 e0       	ldi	r23, 0x00	; 0
    8a1e:	80 e8       	ldi	r24, 0x80	; 128
    8a20:	9f e3       	ldi	r25, 0x3F	; 63
    8a22:	ab cd       	rjmp	.-1194   	; 0x857a <__divsf3>
    8a24:	a4 ce       	rjmp	.-696    	; 0x876e <__fp_inf>
    8a26:	c4 ce       	rjmp	.-632    	; 0x87b0 <__fp_mpack>

00008a28 <ldexp>:
    8a28:	59 df       	rcall	.-334    	; 0x88dc <__fp_splitA>
    8a2a:	e8 f3       	brcs	.-6      	; 0x8a26 <inverse+0x10>
    8a2c:	99 23       	and	r25, r25
    8a2e:	d9 f3       	breq	.-10     	; 0x8a26 <inverse+0x10>
    8a30:	94 0f       	add	r25, r20
    8a32:	51 1d       	adc	r21, r1
    8a34:	bb f3       	brvs	.-18     	; 0x8a24 <inverse+0xe>
    8a36:	91 50       	subi	r25, 0x01	; 1
    8a38:	50 40       	sbci	r21, 0x00	; 0
    8a3a:	94 f0       	brlt	.+36     	; 0x8a60 <ldexp+0x38>
    8a3c:	59 f0       	breq	.+22     	; 0x8a54 <ldexp+0x2c>
    8a3e:	88 23       	and	r24, r24
    8a40:	32 f0       	brmi	.+12     	; 0x8a4e <ldexp+0x26>
    8a42:	66 0f       	add	r22, r22
    8a44:	77 1f       	adc	r23, r23
    8a46:	88 1f       	adc	r24, r24
    8a48:	91 50       	subi	r25, 0x01	; 1
    8a4a:	50 40       	sbci	r21, 0x00	; 0
    8a4c:	c1 f7       	brne	.-16     	; 0x8a3e <ldexp+0x16>
    8a4e:	9e 3f       	cpi	r25, 0xFE	; 254
    8a50:	51 05       	cpc	r21, r1
    8a52:	44 f7       	brge	.-48     	; 0x8a24 <inverse+0xe>
    8a54:	88 0f       	add	r24, r24
    8a56:	91 1d       	adc	r25, r1
    8a58:	96 95       	lsr	r25
    8a5a:	87 95       	ror	r24
    8a5c:	97 f9       	bld	r25, 7
    8a5e:	08 95       	ret
    8a60:	5f 3f       	cpi	r21, 0xFF	; 255
    8a62:	ac f0       	brlt	.+42     	; 0x8a8e <ldexp+0x66>
    8a64:	98 3e       	cpi	r25, 0xE8	; 232
    8a66:	9c f0       	brlt	.+38     	; 0x8a8e <ldexp+0x66>
    8a68:	bb 27       	eor	r27, r27
    8a6a:	86 95       	lsr	r24
    8a6c:	77 95       	ror	r23
    8a6e:	67 95       	ror	r22
    8a70:	b7 95       	ror	r27
    8a72:	08 f4       	brcc	.+2      	; 0x8a76 <ldexp+0x4e>
    8a74:	b1 60       	ori	r27, 0x01	; 1
    8a76:	93 95       	inc	r25
    8a78:	c1 f7       	brne	.-16     	; 0x8a6a <ldexp+0x42>
    8a7a:	bb 0f       	add	r27, r27
    8a7c:	58 f7       	brcc	.-42     	; 0x8a54 <ldexp+0x2c>
    8a7e:	11 f4       	brne	.+4      	; 0x8a84 <ldexp+0x5c>
    8a80:	60 ff       	sbrs	r22, 0
    8a82:	e8 cf       	rjmp	.-48     	; 0x8a54 <ldexp+0x2c>
    8a84:	6f 5f       	subi	r22, 0xFF	; 255
    8a86:	7f 4f       	sbci	r23, 0xFF	; 255
    8a88:	8f 4f       	sbci	r24, 0xFF	; 255
    8a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    8a8c:	e3 cf       	rjmp	.-58     	; 0x8a54 <ldexp+0x2c>
    8a8e:	58 cf       	rjmp	.-336    	; 0x8940 <__fp_szero>

00008a90 <lround>:
    8a90:	25 df       	rcall	.-438    	; 0x88dc <__fp_splitA>
    8a92:	58 f1       	brcs	.+86     	; 0x8aea <lround+0x5a>
    8a94:	9e 57       	subi	r25, 0x7E	; 126
    8a96:	58 f1       	brcs	.+86     	; 0x8aee <lround+0x5e>
    8a98:	98 51       	subi	r25, 0x18	; 24
    8a9a:	a0 f0       	brcs	.+40     	; 0x8ac4 <lround+0x34>
    8a9c:	e9 f0       	breq	.+58     	; 0x8ad8 <lround+0x48>
    8a9e:	98 30       	cpi	r25, 0x08	; 8
    8aa0:	20 f5       	brcc	.+72     	; 0x8aea <lround+0x5a>
    8aa2:	09 2e       	mov	r0, r25
    8aa4:	99 27       	eor	r25, r25
    8aa6:	66 0f       	add	r22, r22
    8aa8:	77 1f       	adc	r23, r23
    8aaa:	88 1f       	adc	r24, r24
    8aac:	99 1f       	adc	r25, r25
    8aae:	0a 94       	dec	r0
    8ab0:	d1 f7       	brne	.-12     	; 0x8aa6 <lround+0x16>
    8ab2:	12 c0       	rjmp	.+36     	; 0x8ad8 <lround+0x48>
    8ab4:	06 2e       	mov	r0, r22
    8ab6:	67 2f       	mov	r22, r23
    8ab8:	78 2f       	mov	r23, r24
    8aba:	88 27       	eor	r24, r24
    8abc:	98 5f       	subi	r25, 0xF8	; 248
    8abe:	11 f4       	brne	.+4      	; 0x8ac4 <lround+0x34>
    8ac0:	00 0c       	add	r0, r0
    8ac2:	07 c0       	rjmp	.+14     	; 0x8ad2 <lround+0x42>
    8ac4:	99 3f       	cpi	r25, 0xF9	; 249
    8ac6:	b4 f3       	brlt	.-20     	; 0x8ab4 <lround+0x24>
    8ac8:	86 95       	lsr	r24
    8aca:	77 95       	ror	r23
    8acc:	67 95       	ror	r22
    8ace:	93 95       	inc	r25
    8ad0:	d9 f7       	brne	.-10     	; 0x8ac8 <lround+0x38>
    8ad2:	61 1d       	adc	r22, r1
    8ad4:	71 1d       	adc	r23, r1
    8ad6:	81 1d       	adc	r24, r1
    8ad8:	3e f4       	brtc	.+14     	; 0x8ae8 <lround+0x58>
    8ada:	90 95       	com	r25
    8adc:	80 95       	com	r24
    8ade:	70 95       	com	r23
    8ae0:	61 95       	neg	r22
    8ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    8ae4:	8f 4f       	sbci	r24, 0xFF	; 255
    8ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    8ae8:	08 95       	ret
    8aea:	68 94       	set
    8aec:	29 cf       	rjmp	.-430    	; 0x8940 <__fp_szero>
    8aee:	27 cf       	rjmp	.-434    	; 0x893e <__fp_zero>

00008af0 <__mulsf3>:
    8af0:	0b d0       	rcall	.+22     	; 0x8b08 <__mulsf3x>
    8af2:	ca ce       	rjmp	.-620    	; 0x8888 <__fp_round>
    8af4:	93 de       	rcall	.-730    	; 0x881c <__fp_pscA>
    8af6:	28 f0       	brcs	.+10     	; 0x8b02 <__mulsf3+0x12>
    8af8:	98 de       	rcall	.-720    	; 0x882a <__fp_pscB>
    8afa:	18 f0       	brcs	.+6      	; 0x8b02 <__mulsf3+0x12>
    8afc:	95 23       	and	r25, r21
    8afe:	09 f0       	breq	.+2      	; 0x8b02 <__mulsf3+0x12>
    8b00:	36 ce       	rjmp	.-916    	; 0x876e <__fp_inf>
    8b02:	64 ce       	rjmp	.-824    	; 0x87cc <__fp_nan>
    8b04:	11 24       	eor	r1, r1
    8b06:	1c cf       	rjmp	.-456    	; 0x8940 <__fp_szero>

00008b08 <__mulsf3x>:
    8b08:	e1 de       	rcall	.-574    	; 0x88cc <__fp_split3>
    8b0a:	a0 f3       	brcs	.-24     	; 0x8af4 <__mulsf3+0x4>

00008b0c <__mulsf3_pse>:
    8b0c:	95 9f       	mul	r25, r21
    8b0e:	d1 f3       	breq	.-12     	; 0x8b04 <__mulsf3+0x14>
    8b10:	95 0f       	add	r25, r21
    8b12:	50 e0       	ldi	r21, 0x00	; 0
    8b14:	55 1f       	adc	r21, r21
    8b16:	62 9f       	mul	r22, r18
    8b18:	f0 01       	movw	r30, r0
    8b1a:	72 9f       	mul	r23, r18
    8b1c:	bb 27       	eor	r27, r27
    8b1e:	f0 0d       	add	r31, r0
    8b20:	b1 1d       	adc	r27, r1
    8b22:	63 9f       	mul	r22, r19
    8b24:	aa 27       	eor	r26, r26
    8b26:	f0 0d       	add	r31, r0
    8b28:	b1 1d       	adc	r27, r1
    8b2a:	aa 1f       	adc	r26, r26
    8b2c:	64 9f       	mul	r22, r20
    8b2e:	66 27       	eor	r22, r22
    8b30:	b0 0d       	add	r27, r0
    8b32:	a1 1d       	adc	r26, r1
    8b34:	66 1f       	adc	r22, r22
    8b36:	82 9f       	mul	r24, r18
    8b38:	22 27       	eor	r18, r18
    8b3a:	b0 0d       	add	r27, r0
    8b3c:	a1 1d       	adc	r26, r1
    8b3e:	62 1f       	adc	r22, r18
    8b40:	73 9f       	mul	r23, r19
    8b42:	b0 0d       	add	r27, r0
    8b44:	a1 1d       	adc	r26, r1
    8b46:	62 1f       	adc	r22, r18
    8b48:	83 9f       	mul	r24, r19
    8b4a:	a0 0d       	add	r26, r0
    8b4c:	61 1d       	adc	r22, r1
    8b4e:	22 1f       	adc	r18, r18
    8b50:	74 9f       	mul	r23, r20
    8b52:	33 27       	eor	r19, r19
    8b54:	a0 0d       	add	r26, r0
    8b56:	61 1d       	adc	r22, r1
    8b58:	23 1f       	adc	r18, r19
    8b5a:	84 9f       	mul	r24, r20
    8b5c:	60 0d       	add	r22, r0
    8b5e:	21 1d       	adc	r18, r1
    8b60:	82 2f       	mov	r24, r18
    8b62:	76 2f       	mov	r23, r22
    8b64:	6a 2f       	mov	r22, r26
    8b66:	11 24       	eor	r1, r1
    8b68:	9f 57       	subi	r25, 0x7F	; 127
    8b6a:	50 40       	sbci	r21, 0x00	; 0
    8b6c:	8a f0       	brmi	.+34     	; 0x8b90 <__mulsf3_pse+0x84>
    8b6e:	e1 f0       	breq	.+56     	; 0x8ba8 <__mulsf3_pse+0x9c>
    8b70:	88 23       	and	r24, r24
    8b72:	4a f0       	brmi	.+18     	; 0x8b86 <__mulsf3_pse+0x7a>
    8b74:	ee 0f       	add	r30, r30
    8b76:	ff 1f       	adc	r31, r31
    8b78:	bb 1f       	adc	r27, r27
    8b7a:	66 1f       	adc	r22, r22
    8b7c:	77 1f       	adc	r23, r23
    8b7e:	88 1f       	adc	r24, r24
    8b80:	91 50       	subi	r25, 0x01	; 1
    8b82:	50 40       	sbci	r21, 0x00	; 0
    8b84:	a9 f7       	brne	.-22     	; 0x8b70 <__mulsf3_pse+0x64>
    8b86:	9e 3f       	cpi	r25, 0xFE	; 254
    8b88:	51 05       	cpc	r21, r1
    8b8a:	70 f0       	brcs	.+28     	; 0x8ba8 <__mulsf3_pse+0x9c>
    8b8c:	f0 cd       	rjmp	.-1056   	; 0x876e <__fp_inf>
    8b8e:	d8 ce       	rjmp	.-592    	; 0x8940 <__fp_szero>
    8b90:	5f 3f       	cpi	r21, 0xFF	; 255
    8b92:	ec f3       	brlt	.-6      	; 0x8b8e <__mulsf3_pse+0x82>
    8b94:	98 3e       	cpi	r25, 0xE8	; 232
    8b96:	dc f3       	brlt	.-10     	; 0x8b8e <__mulsf3_pse+0x82>
    8b98:	86 95       	lsr	r24
    8b9a:	77 95       	ror	r23
    8b9c:	67 95       	ror	r22
    8b9e:	b7 95       	ror	r27
    8ba0:	f7 95       	ror	r31
    8ba2:	e7 95       	ror	r30
    8ba4:	9f 5f       	subi	r25, 0xFF	; 255
    8ba6:	c1 f7       	brne	.-16     	; 0x8b98 <__mulsf3_pse+0x8c>
    8ba8:	fe 2b       	or	r31, r30
    8baa:	88 0f       	add	r24, r24
    8bac:	91 1d       	adc	r25, r1
    8bae:	96 95       	lsr	r25
    8bb0:	87 95       	ror	r24
    8bb2:	97 f9       	bld	r25, 7
    8bb4:	08 95       	ret

00008bb6 <sin>:
    8bb6:	9f 93       	push	r25
    8bb8:	40 de       	rcall	.-896    	; 0x883a <__fp_rempio2>
    8bba:	0f 90       	pop	r0
    8bbc:	07 fc       	sbrc	r0, 7
    8bbe:	ee 5f       	subi	r30, 0xFE	; 254
    8bc0:	74 ce       	rjmp	.-792    	; 0x88aa <__fp_sinus>
    8bc2:	11 f4       	brne	.+4      	; 0x8bc8 <sin+0x12>
    8bc4:	0e f4       	brtc	.+2      	; 0x8bc8 <sin+0x12>
    8bc6:	02 ce       	rjmp	.-1020   	; 0x87cc <__fp_nan>
    8bc8:	f3 cd       	rjmp	.-1050   	; 0x87b0 <__fp_mpack>

00008bca <sqrt>:
    8bca:	88 de       	rcall	.-752    	; 0x88dc <__fp_splitA>
    8bcc:	d0 f3       	brcs	.-12     	; 0x8bc2 <sin+0xc>
    8bce:	99 23       	and	r25, r25
    8bd0:	d9 f3       	breq	.-10     	; 0x8bc8 <sin+0x12>
    8bd2:	ce f3       	brts	.-14     	; 0x8bc6 <sin+0x10>
    8bd4:	9f 57       	subi	r25, 0x7F	; 127
    8bd6:	55 0b       	sbc	r21, r21
    8bd8:	87 ff       	sbrs	r24, 7
    8bda:	43 d0       	rcall	.+134    	; 0x8c62 <__fp_norm2>
    8bdc:	00 24       	eor	r0, r0
    8bde:	a0 e6       	ldi	r26, 0x60	; 96
    8be0:	40 ea       	ldi	r20, 0xA0	; 160
    8be2:	90 01       	movw	r18, r0
    8be4:	80 58       	subi	r24, 0x80	; 128
    8be6:	56 95       	lsr	r21
    8be8:	97 95       	ror	r25
    8bea:	28 f4       	brcc	.+10     	; 0x8bf6 <sqrt+0x2c>
    8bec:	80 5c       	subi	r24, 0xC0	; 192
    8bee:	66 0f       	add	r22, r22
    8bf0:	77 1f       	adc	r23, r23
    8bf2:	88 1f       	adc	r24, r24
    8bf4:	20 f0       	brcs	.+8      	; 0x8bfe <sqrt+0x34>
    8bf6:	26 17       	cp	r18, r22
    8bf8:	37 07       	cpc	r19, r23
    8bfa:	48 07       	cpc	r20, r24
    8bfc:	30 f4       	brcc	.+12     	; 0x8c0a <sqrt+0x40>
    8bfe:	62 1b       	sub	r22, r18
    8c00:	73 0b       	sbc	r23, r19
    8c02:	84 0b       	sbc	r24, r20
    8c04:	20 29       	or	r18, r0
    8c06:	31 29       	or	r19, r1
    8c08:	4a 2b       	or	r20, r26
    8c0a:	a6 95       	lsr	r26
    8c0c:	17 94       	ror	r1
    8c0e:	07 94       	ror	r0
    8c10:	20 25       	eor	r18, r0
    8c12:	31 25       	eor	r19, r1
    8c14:	4a 27       	eor	r20, r26
    8c16:	58 f7       	brcc	.-42     	; 0x8bee <sqrt+0x24>
    8c18:	66 0f       	add	r22, r22
    8c1a:	77 1f       	adc	r23, r23
    8c1c:	88 1f       	adc	r24, r24
    8c1e:	20 f0       	brcs	.+8      	; 0x8c28 <sqrt+0x5e>
    8c20:	26 17       	cp	r18, r22
    8c22:	37 07       	cpc	r19, r23
    8c24:	48 07       	cpc	r20, r24
    8c26:	30 f4       	brcc	.+12     	; 0x8c34 <sqrt+0x6a>
    8c28:	62 0b       	sbc	r22, r18
    8c2a:	73 0b       	sbc	r23, r19
    8c2c:	84 0b       	sbc	r24, r20
    8c2e:	20 0d       	add	r18, r0
    8c30:	31 1d       	adc	r19, r1
    8c32:	41 1d       	adc	r20, r1
    8c34:	a0 95       	com	r26
    8c36:	81 f7       	brne	.-32     	; 0x8c18 <sqrt+0x4e>
    8c38:	b9 01       	movw	r22, r18
    8c3a:	84 2f       	mov	r24, r20
    8c3c:	91 58       	subi	r25, 0x81	; 129
    8c3e:	88 0f       	add	r24, r24
    8c40:	96 95       	lsr	r25
    8c42:	87 95       	ror	r24
    8c44:	08 95       	ret

00008c46 <square>:
    8c46:	9b 01       	movw	r18, r22
    8c48:	ac 01       	movw	r20, r24
    8c4a:	52 cf       	rjmp	.-348    	; 0x8af0 <__mulsf3>

00008c4c <trunc>:
    8c4c:	61 de       	rcall	.-830    	; 0x8910 <__fp_trunc>
    8c4e:	20 f0       	brcs	.+8      	; 0x8c58 <trunc+0xc>
    8c50:	9f 37       	cpi	r25, 0x7F	; 127
    8c52:	08 f4       	brcc	.+2      	; 0x8c56 <trunc+0xa>
    8c54:	75 ce       	rjmp	.-790    	; 0x8940 <__fp_szero>
    8c56:	91 cd       	rjmp	.-1246   	; 0x877a <__fp_mintl>
    8c58:	ab cd       	rjmp	.-1194   	; 0x87b0 <__fp_mpack>

00008c5a <__unordsf2>:
    8c5a:	65 dd       	rcall	.-1334   	; 0x8726 <__fp_cmp>
    8c5c:	88 0b       	sbc	r24, r24
    8c5e:	99 0b       	sbc	r25, r25
    8c60:	08 95       	ret

00008c62 <__fp_norm2>:
    8c62:	91 50       	subi	r25, 0x01	; 1
    8c64:	50 40       	sbci	r21, 0x00	; 0
    8c66:	66 0f       	add	r22, r22
    8c68:	77 1f       	adc	r23, r23
    8c6a:	88 1f       	adc	r24, r24
    8c6c:	d2 f7       	brpl	.-12     	; 0x8c62 <__fp_norm2>
    8c6e:	08 95       	ret

00008c70 <__fp_powsodd>:
    8c70:	9f 93       	push	r25
    8c72:	8f 93       	push	r24
    8c74:	7f 93       	push	r23
    8c76:	6f 93       	push	r22
    8c78:	ff 93       	push	r31
    8c7a:	ef 93       	push	r30
    8c7c:	9b 01       	movw	r18, r22
    8c7e:	ac 01       	movw	r20, r24
    8c80:	37 df       	rcall	.-402    	; 0x8af0 <__mulsf3>
    8c82:	ef 91       	pop	r30
    8c84:	ff 91       	pop	r31
    8c86:	a5 dd       	rcall	.-1206   	; 0x87d2 <__fp_powser>
    8c88:	2f 91       	pop	r18
    8c8a:	3f 91       	pop	r19
    8c8c:	4f 91       	pop	r20
    8c8e:	5f 91       	pop	r21
    8c90:	2f cf       	rjmp	.-418    	; 0x8af0 <__mulsf3>

00008c92 <__mulsi3>:
    8c92:	62 9f       	mul	r22, r18
    8c94:	d0 01       	movw	r26, r0
    8c96:	73 9f       	mul	r23, r19
    8c98:	f0 01       	movw	r30, r0
    8c9a:	82 9f       	mul	r24, r18
    8c9c:	e0 0d       	add	r30, r0
    8c9e:	f1 1d       	adc	r31, r1
    8ca0:	64 9f       	mul	r22, r20
    8ca2:	e0 0d       	add	r30, r0
    8ca4:	f1 1d       	adc	r31, r1
    8ca6:	92 9f       	mul	r25, r18
    8ca8:	f0 0d       	add	r31, r0
    8caa:	83 9f       	mul	r24, r19
    8cac:	f0 0d       	add	r31, r0
    8cae:	74 9f       	mul	r23, r20
    8cb0:	f0 0d       	add	r31, r0
    8cb2:	65 9f       	mul	r22, r21
    8cb4:	f0 0d       	add	r31, r0
    8cb6:	99 27       	eor	r25, r25
    8cb8:	72 9f       	mul	r23, r18
    8cba:	b0 0d       	add	r27, r0
    8cbc:	e1 1d       	adc	r30, r1
    8cbe:	f9 1f       	adc	r31, r25
    8cc0:	63 9f       	mul	r22, r19
    8cc2:	b0 0d       	add	r27, r0
    8cc4:	e1 1d       	adc	r30, r1
    8cc6:	f9 1f       	adc	r31, r25
    8cc8:	bd 01       	movw	r22, r26
    8cca:	cf 01       	movw	r24, r30
    8ccc:	11 24       	eor	r1, r1
    8cce:	08 95       	ret

00008cd0 <__udivmodsi4>:
    8cd0:	a1 e2       	ldi	r26, 0x21	; 33
    8cd2:	1a 2e       	mov	r1, r26
    8cd4:	aa 1b       	sub	r26, r26
    8cd6:	bb 1b       	sub	r27, r27
    8cd8:	fd 01       	movw	r30, r26
    8cda:	0d c0       	rjmp	.+26     	; 0x8cf6 <__udivmodsi4_ep>

00008cdc <__udivmodsi4_loop>:
    8cdc:	aa 1f       	adc	r26, r26
    8cde:	bb 1f       	adc	r27, r27
    8ce0:	ee 1f       	adc	r30, r30
    8ce2:	ff 1f       	adc	r31, r31
    8ce4:	a2 17       	cp	r26, r18
    8ce6:	b3 07       	cpc	r27, r19
    8ce8:	e4 07       	cpc	r30, r20
    8cea:	f5 07       	cpc	r31, r21
    8cec:	20 f0       	brcs	.+8      	; 0x8cf6 <__udivmodsi4_ep>
    8cee:	a2 1b       	sub	r26, r18
    8cf0:	b3 0b       	sbc	r27, r19
    8cf2:	e4 0b       	sbc	r30, r20
    8cf4:	f5 0b       	sbc	r31, r21

00008cf6 <__udivmodsi4_ep>:
    8cf6:	66 1f       	adc	r22, r22
    8cf8:	77 1f       	adc	r23, r23
    8cfa:	88 1f       	adc	r24, r24
    8cfc:	99 1f       	adc	r25, r25
    8cfe:	1a 94       	dec	r1
    8d00:	69 f7       	brne	.-38     	; 0x8cdc <__udivmodsi4_loop>
    8d02:	60 95       	com	r22
    8d04:	70 95       	com	r23
    8d06:	80 95       	com	r24
    8d08:	90 95       	com	r25
    8d0a:	9b 01       	movw	r18, r22
    8d0c:	ac 01       	movw	r20, r24
    8d0e:	bd 01       	movw	r22, r26
    8d10:	cf 01       	movw	r24, r30
    8d12:	08 95       	ret

00008d14 <__prologue_saves__>:
    8d14:	2f 92       	push	r2
    8d16:	3f 92       	push	r3
    8d18:	4f 92       	push	r4
    8d1a:	5f 92       	push	r5
    8d1c:	6f 92       	push	r6
    8d1e:	7f 92       	push	r7
    8d20:	8f 92       	push	r8
    8d22:	9f 92       	push	r9
    8d24:	af 92       	push	r10
    8d26:	bf 92       	push	r11
    8d28:	cf 92       	push	r12
    8d2a:	df 92       	push	r13
    8d2c:	ef 92       	push	r14
    8d2e:	ff 92       	push	r15
    8d30:	0f 93       	push	r16
    8d32:	1f 93       	push	r17
    8d34:	cf 93       	push	r28
    8d36:	df 93       	push	r29
    8d38:	cd b7       	in	r28, 0x3d	; 61
    8d3a:	de b7       	in	r29, 0x3e	; 62
    8d3c:	ca 1b       	sub	r28, r26
    8d3e:	db 0b       	sbc	r29, r27
    8d40:	0f b6       	in	r0, 0x3f	; 63
    8d42:	f8 94       	cli
    8d44:	de bf       	out	0x3e, r29	; 62
    8d46:	0f be       	out	0x3f, r0	; 63
    8d48:	cd bf       	out	0x3d, r28	; 61
    8d4a:	19 94       	eijmp

00008d4c <__epilogue_restores__>:
    8d4c:	2a 88       	ldd	r2, Y+18	; 0x12
    8d4e:	39 88       	ldd	r3, Y+17	; 0x11
    8d50:	48 88       	ldd	r4, Y+16	; 0x10
    8d52:	5f 84       	ldd	r5, Y+15	; 0x0f
    8d54:	6e 84       	ldd	r6, Y+14	; 0x0e
    8d56:	7d 84       	ldd	r7, Y+13	; 0x0d
    8d58:	8c 84       	ldd	r8, Y+12	; 0x0c
    8d5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    8d5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    8d5e:	b9 84       	ldd	r11, Y+9	; 0x09
    8d60:	c8 84       	ldd	r12, Y+8	; 0x08
    8d62:	df 80       	ldd	r13, Y+7	; 0x07
    8d64:	ee 80       	ldd	r14, Y+6	; 0x06
    8d66:	fd 80       	ldd	r15, Y+5	; 0x05
    8d68:	0c 81       	ldd	r16, Y+4	; 0x04
    8d6a:	1b 81       	ldd	r17, Y+3	; 0x03
    8d6c:	aa 81       	ldd	r26, Y+2	; 0x02
    8d6e:	b9 81       	ldd	r27, Y+1	; 0x01
    8d70:	ce 0f       	add	r28, r30
    8d72:	d1 1d       	adc	r29, r1
    8d74:	0f b6       	in	r0, 0x3f	; 63
    8d76:	f8 94       	cli
    8d78:	de bf       	out	0x3e, r29	; 62
    8d7a:	0f be       	out	0x3f, r0	; 63
    8d7c:	cd bf       	out	0x3d, r28	; 61
    8d7e:	ed 01       	movw	r28, r26
    8d80:	08 95       	ret

00008d82 <strtod>:
    8d82:	8f 92       	push	r8
    8d84:	9f 92       	push	r9
    8d86:	af 92       	push	r10
    8d88:	bf 92       	push	r11
    8d8a:	cf 92       	push	r12
    8d8c:	df 92       	push	r13
    8d8e:	ef 92       	push	r14
    8d90:	ff 92       	push	r15
    8d92:	0f 93       	push	r16
    8d94:	1f 93       	push	r17
    8d96:	cf 93       	push	r28
    8d98:	df 93       	push	r29
    8d9a:	ec 01       	movw	r28, r24
    8d9c:	5b 01       	movw	r10, r22
    8d9e:	61 15       	cp	r22, r1
    8da0:	71 05       	cpc	r23, r1
    8da2:	19 f0       	breq	.+6      	; 0x8daa <strtod+0x28>
    8da4:	fb 01       	movw	r30, r22
    8da6:	80 83       	st	Z, r24
    8da8:	91 83       	std	Z+1, r25	; 0x01
    8daa:	f9 90       	ld	r15, Y+
    8dac:	8f 2d       	mov	r24, r15
    8dae:	90 e0       	ldi	r25, 0x00	; 0
    8db0:	0e 94 25 49 	call	0x924a	; 0x924a <isspace>
    8db4:	89 2b       	or	r24, r25
    8db6:	c9 f7       	brne	.-14     	; 0x8daa <strtod+0x28>
    8db8:	fd e2       	ldi	r31, 0x2D	; 45
    8dba:	ff 16       	cp	r15, r31
    8dbc:	21 f4       	brne	.+8      	; 0x8dc6 <strtod+0x44>
    8dbe:	f9 90       	ld	r15, Y+
    8dc0:	ee 24       	eor	r14, r14
    8dc2:	e3 94       	inc	r14
    8dc4:	05 c0       	rjmp	.+10     	; 0x8dd0 <strtod+0x4e>
    8dc6:	2b e2       	ldi	r18, 0x2B	; 43
    8dc8:	f2 16       	cp	r15, r18
    8dca:	09 f4       	brne	.+2      	; 0x8dce <strtod+0x4c>
    8dcc:	f9 90       	ld	r15, Y+
    8dce:	ee 24       	eor	r14, r14
    8dd0:	8e 01       	movw	r16, r28
    8dd2:	01 50       	subi	r16, 0x01	; 1
    8dd4:	10 40       	sbci	r17, 0x00	; 0
    8dd6:	c8 01       	movw	r24, r16
    8dd8:	6b ef       	ldi	r22, 0xFB	; 251
    8dda:	7c e1       	ldi	r23, 0x1C	; 28
    8ddc:	43 e0       	ldi	r20, 0x03	; 3
    8dde:	50 e0       	ldi	r21, 0x00	; 0
    8de0:	0e 94 2d 49 	call	0x925a	; 0x925a <strncasecmp_P>
    8de4:	89 2b       	or	r24, r25
    8de6:	01 f5       	brne	.+64     	; 0x8e28 <strtod+0xa6>
    8de8:	8e 01       	movw	r16, r28
    8dea:	0e 5f       	subi	r16, 0xFE	; 254
    8dec:	1f 4f       	sbci	r17, 0xFF	; 255
    8dee:	c8 01       	movw	r24, r16
    8df0:	6e ef       	ldi	r22, 0xFE	; 254
    8df2:	7c e1       	ldi	r23, 0x1C	; 28
    8df4:	45 e0       	ldi	r20, 0x05	; 5
    8df6:	50 e0       	ldi	r21, 0x00	; 0
    8df8:	0e 94 2d 49 	call	0x925a	; 0x925a <strncasecmp_P>
    8dfc:	89 2b       	or	r24, r25
    8dfe:	19 f4       	brne	.+6      	; 0x8e06 <strtod+0x84>
    8e00:	8e 01       	movw	r16, r28
    8e02:	09 5f       	subi	r16, 0xF9	; 249
    8e04:	1f 4f       	sbci	r17, 0xFF	; 255
    8e06:	a1 14       	cp	r10, r1
    8e08:	b1 04       	cpc	r11, r1
    8e0a:	19 f0       	breq	.+6      	; 0x8e12 <strtod+0x90>
    8e0c:	f5 01       	movw	r30, r10
    8e0e:	00 83       	st	Z, r16
    8e10:	11 83       	std	Z+1, r17	; 0x01
    8e12:	e0 fc       	sbrc	r14, 0
    8e14:	04 c0       	rjmp	.+8      	; 0x8e1e <strtod+0x9c>
    8e16:	70 e0       	ldi	r23, 0x00	; 0
    8e18:	90 e0       	ldi	r25, 0x00	; 0
    8e1a:	80 e8       	ldi	r24, 0x80	; 128
    8e1c:	14 c0       	rjmp	.+40     	; 0x8e46 <strtod+0xc4>
    8e1e:	70 e0       	ldi	r23, 0x00	; 0
    8e20:	90 e0       	ldi	r25, 0x00	; 0
    8e22:	80 e8       	ldi	r24, 0x80	; 128
    8e24:	6f ef       	ldi	r22, 0xFF	; 255
    8e26:	08 c1       	rjmp	.+528    	; 0x9038 <strtod+0x2b6>
    8e28:	c8 01       	movw	r24, r16
    8e2a:	63 e0       	ldi	r22, 0x03	; 3
    8e2c:	7d e1       	ldi	r23, 0x1D	; 29
    8e2e:	43 e0       	ldi	r20, 0x03	; 3
    8e30:	50 e0       	ldi	r21, 0x00	; 0
    8e32:	0e 94 2d 49 	call	0x925a	; 0x925a <strncasecmp_P>
    8e36:	89 2b       	or	r24, r25
    8e38:	69 f4       	brne	.+26     	; 0x8e54 <strtod+0xd2>
    8e3a:	a1 14       	cp	r10, r1
    8e3c:	b1 04       	cpc	r11, r1
    8e3e:	29 f4       	brne	.+10     	; 0x8e4a <strtod+0xc8>
    8e40:	70 e0       	ldi	r23, 0x00	; 0
    8e42:	90 e0       	ldi	r25, 0x00	; 0
    8e44:	80 ec       	ldi	r24, 0xC0	; 192
    8e46:	6f e7       	ldi	r22, 0x7F	; 127
    8e48:	f7 c0       	rjmp	.+494    	; 0x9038 <strtod+0x2b6>
    8e4a:	22 96       	adiw	r28, 0x02	; 2
    8e4c:	f5 01       	movw	r30, r10
    8e4e:	c0 83       	st	Z, r28
    8e50:	d1 83       	std	Z+1, r29	; 0x01
    8e52:	f6 cf       	rjmp	.-20     	; 0x8e40 <strtod+0xbe>
    8e54:	88 24       	eor	r8, r8
    8e56:	99 24       	eor	r9, r9
    8e58:	40 e0       	ldi	r20, 0x00	; 0
    8e5a:	50 e0       	ldi	r21, 0x00	; 0
    8e5c:	60 e0       	ldi	r22, 0x00	; 0
    8e5e:	70 e0       	ldi	r23, 0x00	; 0
    8e60:	ef 2d       	mov	r30, r15
    8e62:	e0 53       	subi	r30, 0x30	; 48
    8e64:	ea 30       	cpi	r30, 0x0A	; 10
    8e66:	a0 f5       	brcc	.+104    	; 0x8ed0 <strtod+0x14e>
    8e68:	f2 e0       	ldi	r31, 0x02	; 2
    8e6a:	ef 2a       	or	r14, r31
    8e6c:	8e 2d       	mov	r24, r14
    8e6e:	90 e0       	ldi	r25, 0x00	; 0
    8e70:	9c 01       	movw	r18, r24
    8e72:	28 70       	andi	r18, 0x08	; 8
    8e74:	30 70       	andi	r19, 0x00	; 0
    8e76:	e2 fe       	sbrs	r14, 2
    8e78:	06 c0       	rjmp	.+12     	; 0x8e86 <strtod+0x104>
    8e7a:	23 2b       	or	r18, r19
    8e7c:	79 f5       	brne	.+94     	; 0x8edc <strtod+0x15a>
    8e7e:	08 94       	sec
    8e80:	81 1c       	adc	r8, r1
    8e82:	91 1c       	adc	r9, r1
    8e84:	2b c0       	rjmp	.+86     	; 0x8edc <strtod+0x15a>
    8e86:	23 2b       	or	r18, r19
    8e88:	19 f0       	breq	.+6      	; 0x8e90 <strtod+0x10e>
    8e8a:	08 94       	sec
    8e8c:	81 08       	sbc	r8, r1
    8e8e:	91 08       	sbc	r9, r1
    8e90:	db 01       	movw	r26, r22
    8e92:	ca 01       	movw	r24, r20
    8e94:	12 e0       	ldi	r17, 0x02	; 2
    8e96:	88 0f       	add	r24, r24
    8e98:	99 1f       	adc	r25, r25
    8e9a:	aa 1f       	adc	r26, r26
    8e9c:	bb 1f       	adc	r27, r27
    8e9e:	1a 95       	dec	r17
    8ea0:	d1 f7       	brne	.-12     	; 0x8e96 <strtod+0x114>
    8ea2:	48 0f       	add	r20, r24
    8ea4:	59 1f       	adc	r21, r25
    8ea6:	6a 1f       	adc	r22, r26
    8ea8:	7b 1f       	adc	r23, r27
    8eaa:	44 0f       	add	r20, r20
    8eac:	55 1f       	adc	r21, r21
    8eae:	66 1f       	adc	r22, r22
    8eb0:	77 1f       	adc	r23, r23
    8eb2:	4e 0f       	add	r20, r30
    8eb4:	51 1d       	adc	r21, r1
    8eb6:	61 1d       	adc	r22, r1
    8eb8:	71 1d       	adc	r23, r1
    8eba:	48 39       	cpi	r20, 0x98	; 152
    8ebc:	29 e9       	ldi	r18, 0x99	; 153
    8ebe:	52 07       	cpc	r21, r18
    8ec0:	29 e9       	ldi	r18, 0x99	; 153
    8ec2:	62 07       	cpc	r22, r18
    8ec4:	29 e1       	ldi	r18, 0x19	; 25
    8ec6:	72 07       	cpc	r23, r18
    8ec8:	48 f0       	brcs	.+18     	; 0x8edc <strtod+0x15a>
    8eca:	84 e0       	ldi	r24, 0x04	; 4
    8ecc:	e8 2a       	or	r14, r24
    8ece:	06 c0       	rjmp	.+12     	; 0x8edc <strtod+0x15a>
    8ed0:	ee 3f       	cpi	r30, 0xFE	; 254
    8ed2:	31 f4       	brne	.+12     	; 0x8ee0 <strtod+0x15e>
    8ed4:	e3 fc       	sbrc	r14, 3
    8ed6:	39 c0       	rjmp	.+114    	; 0x8f4a <strtod+0x1c8>
    8ed8:	98 e0       	ldi	r25, 0x08	; 8
    8eda:	e9 2a       	or	r14, r25
    8edc:	f9 90       	ld	r15, Y+
    8ede:	c0 cf       	rjmp	.-128    	; 0x8e60 <strtod+0xde>
    8ee0:	e5 33       	cpi	r30, 0x35	; 53
    8ee2:	11 f0       	breq	.+4      	; 0x8ee8 <strtod+0x166>
    8ee4:	e5 31       	cpi	r30, 0x15	; 21
    8ee6:	89 f5       	brne	.+98     	; 0x8f4a <strtod+0x1c8>
    8ee8:	29 91       	ld	r18, Y+
    8eea:	2d 32       	cpi	r18, 0x2D	; 45
    8eec:	19 f4       	brne	.+6      	; 0x8ef4 <strtod+0x172>
    8eee:	e0 e1       	ldi	r30, 0x10	; 16
    8ef0:	ee 2a       	or	r14, r30
    8ef2:	05 c0       	rjmp	.+10     	; 0x8efe <strtod+0x17c>
    8ef4:	2b 32       	cpi	r18, 0x2B	; 43
    8ef6:	19 f0       	breq	.+6      	; 0x8efe <strtod+0x17c>
    8ef8:	81 e0       	ldi	r24, 0x01	; 1
    8efa:	90 e0       	ldi	r25, 0x00	; 0
    8efc:	03 c0       	rjmp	.+6      	; 0x8f04 <strtod+0x182>
    8efe:	29 91       	ld	r18, Y+
    8f00:	82 e0       	ldi	r24, 0x02	; 2
    8f02:	90 e0       	ldi	r25, 0x00	; 0
    8f04:	e2 2f       	mov	r30, r18
    8f06:	e0 53       	subi	r30, 0x30	; 48
    8f08:	ea 30       	cpi	r30, 0x0A	; 10
    8f0a:	18 f0       	brcs	.+6      	; 0x8f12 <strtod+0x190>
    8f0c:	c8 1b       	sub	r28, r24
    8f0e:	d9 0b       	sbc	r29, r25
    8f10:	1c c0       	rjmp	.+56     	; 0x8f4a <strtod+0x1c8>
    8f12:	20 e0       	ldi	r18, 0x00	; 0
    8f14:	30 e0       	ldi	r19, 0x00	; 0
    8f16:	fc e0       	ldi	r31, 0x0C	; 12
    8f18:	20 38       	cpi	r18, 0x80	; 128
    8f1a:	3f 07       	cpc	r19, r31
    8f1c:	5c f4       	brge	.+22     	; 0x8f34 <strtod+0x1b2>
    8f1e:	c9 01       	movw	r24, r18
    8f20:	88 0f       	add	r24, r24
    8f22:	99 1f       	adc	r25, r25
    8f24:	88 0f       	add	r24, r24
    8f26:	99 1f       	adc	r25, r25
    8f28:	28 0f       	add	r18, r24
    8f2a:	39 1f       	adc	r19, r25
    8f2c:	22 0f       	add	r18, r18
    8f2e:	33 1f       	adc	r19, r19
    8f30:	2e 0f       	add	r18, r30
    8f32:	31 1d       	adc	r19, r1
    8f34:	e9 91       	ld	r30, Y+
    8f36:	e0 53       	subi	r30, 0x30	; 48
    8f38:	ea 30       	cpi	r30, 0x0A	; 10
    8f3a:	68 f3       	brcs	.-38     	; 0x8f16 <strtod+0x194>
    8f3c:	e4 fe       	sbrs	r14, 4
    8f3e:	03 c0       	rjmp	.+6      	; 0x8f46 <strtod+0x1c4>
    8f40:	30 95       	com	r19
    8f42:	21 95       	neg	r18
    8f44:	3f 4f       	sbci	r19, 0xFF	; 255
    8f46:	82 0e       	add	r8, r18
    8f48:	93 1e       	adc	r9, r19
    8f4a:	ce 2c       	mov	r12, r14
    8f4c:	dd 24       	eor	r13, r13
    8f4e:	e1 fe       	sbrs	r14, 1
    8f50:	07 c0       	rjmp	.+14     	; 0x8f60 <strtod+0x1de>
    8f52:	a1 14       	cp	r10, r1
    8f54:	b1 04       	cpc	r11, r1
    8f56:	21 f0       	breq	.+8      	; 0x8f60 <strtod+0x1de>
    8f58:	21 97       	sbiw	r28, 0x01	; 1
    8f5a:	f5 01       	movw	r30, r10
    8f5c:	c0 83       	st	Z, r28
    8f5e:	d1 83       	std	Z+1, r29	; 0x01
    8f60:	cb 01       	movw	r24, r22
    8f62:	ba 01       	movw	r22, r20
    8f64:	0e 94 56 43 	call	0x86ac	; 0x86ac <__floatunsisf>
    8f68:	7b 01       	movw	r14, r22
    8f6a:	8c 01       	movw	r16, r24
    8f6c:	f3 e0       	ldi	r31, 0x03	; 3
    8f6e:	cf 22       	and	r12, r31
    8f70:	dd 24       	eor	r13, r13
    8f72:	23 e0       	ldi	r18, 0x03	; 3
    8f74:	c2 16       	cp	r12, r18
    8f76:	d1 04       	cpc	r13, r1
    8f78:	21 f4       	brne	.+8      	; 0x8f82 <strtod+0x200>
    8f7a:	17 fb       	bst	r17, 7
    8f7c:	10 95       	com	r17
    8f7e:	17 f9       	bld	r17, 7
    8f80:	10 95       	com	r17
    8f82:	57 01       	movw	r10, r14
    8f84:	68 01       	movw	r12, r16
    8f86:	c8 01       	movw	r24, r16
    8f88:	b7 01       	movw	r22, r14
    8f8a:	20 e0       	ldi	r18, 0x00	; 0
    8f8c:	30 e0       	ldi	r19, 0x00	; 0
    8f8e:	40 e0       	ldi	r20, 0x00	; 0
    8f90:	50 e0       	ldi	r21, 0x00	; 0
    8f92:	0e 94 b6 42 	call	0x856c	; 0x856c <__cmpsf2>
    8f96:	88 23       	and	r24, r24
    8f98:	09 f4       	brne	.+2      	; 0x8f9c <strtod+0x21a>
    8f9a:	4a c0       	rjmp	.+148    	; 0x9030 <strtod+0x2ae>
    8f9c:	97 fe       	sbrs	r9, 7
    8f9e:	0d c0       	rjmp	.+26     	; 0x8fba <strtod+0x238>
    8fa0:	2a e1       	ldi	r18, 0x1A	; 26
    8fa2:	e2 2e       	mov	r14, r18
    8fa4:	2d e1       	ldi	r18, 0x1D	; 29
    8fa6:	f2 2e       	mov	r15, r18
    8fa8:	90 94       	com	r9
    8faa:	81 94       	neg	r8
    8fac:	91 08       	sbc	r9, r1
    8fae:	93 94       	inc	r9
    8fb0:	c0 e2       	ldi	r28, 0x20	; 32
    8fb2:	d0 e0       	ldi	r29, 0x00	; 0
    8fb4:	00 e0       	ldi	r16, 0x00	; 0
    8fb6:	10 e0       	ldi	r17, 0x00	; 0
    8fb8:	12 c0       	rjmp	.+36     	; 0x8fde <strtod+0x25c>
    8fba:	92 e3       	ldi	r25, 0x32	; 50
    8fbc:	e9 2e       	mov	r14, r25
    8fbe:	9d e1       	ldi	r25, 0x1D	; 29
    8fc0:	f9 2e       	mov	r15, r25
    8fc2:	f6 cf       	rjmp	.-20     	; 0x8fb0 <strtod+0x22e>
    8fc4:	f7 01       	movw	r30, r14
    8fc6:	25 91       	lpm	r18, Z+
    8fc8:	35 91       	lpm	r19, Z+
    8fca:	45 91       	lpm	r20, Z+
    8fcc:	54 91       	lpm	r21, Z+
    8fce:	c6 01       	movw	r24, r12
    8fd0:	b5 01       	movw	r22, r10
    8fd2:	0e 94 78 45 	call	0x8af0	; 0x8af0 <__mulsf3>
    8fd6:	5b 01       	movw	r10, r22
    8fd8:	6c 01       	movw	r12, r24
    8fda:	8c 1a       	sub	r8, r28
    8fdc:	9d 0a       	sbc	r9, r29
    8fde:	8c 16       	cp	r8, r28
    8fe0:	9d 06       	cpc	r9, r29
    8fe2:	84 f7       	brge	.-32     	; 0x8fc4 <strtod+0x242>
    8fe4:	d5 95       	asr	r29
    8fe6:	c7 95       	ror	r28
    8fe8:	0f 5f       	subi	r16, 0xFF	; 255
    8fea:	1f 4f       	sbci	r17, 0xFF	; 255
    8fec:	06 30       	cpi	r16, 0x06	; 6
    8fee:	11 05       	cpc	r17, r1
    8ff0:	29 f0       	breq	.+10     	; 0x8ffc <strtod+0x27a>
    8ff2:	8c ef       	ldi	r24, 0xFC	; 252
    8ff4:	9f ef       	ldi	r25, 0xFF	; 255
    8ff6:	e8 0e       	add	r14, r24
    8ff8:	f9 1e       	adc	r15, r25
    8ffa:	f1 cf       	rjmp	.-30     	; 0x8fde <strtod+0x25c>
    8ffc:	c5 01       	movw	r24, r10
    8ffe:	d6 01       	movw	r26, r12
    9000:	7c 01       	movw	r14, r24
    9002:	8d 01       	movw	r16, r26
    9004:	8c 2d       	mov	r24, r12
    9006:	88 0f       	add	r24, r24
    9008:	8d 2d       	mov	r24, r13
    900a:	88 1f       	adc	r24, r24
    900c:	8f 3f       	cpi	r24, 0xFF	; 255
    900e:	51 f0       	breq	.+20     	; 0x9024 <strtod+0x2a2>
    9010:	c6 01       	movw	r24, r12
    9012:	b5 01       	movw	r22, r10
    9014:	20 e0       	ldi	r18, 0x00	; 0
    9016:	30 e0       	ldi	r19, 0x00	; 0
    9018:	40 e0       	ldi	r20, 0x00	; 0
    901a:	50 e0       	ldi	r21, 0x00	; 0
    901c:	0e 94 b6 42 	call	0x856c	; 0x856c <__cmpsf2>
    9020:	88 23       	and	r24, r24
    9022:	31 f4       	brne	.+12     	; 0x9030 <strtod+0x2ae>
    9024:	82 e2       	ldi	r24, 0x22	; 34
    9026:	90 e0       	ldi	r25, 0x00	; 0
    9028:	80 93 59 25 	sts	0x2559, r24
    902c:	90 93 5a 25 	sts	0x255A, r25
    9030:	7e 2d       	mov	r23, r14
    9032:	9f 2d       	mov	r25, r15
    9034:	80 2f       	mov	r24, r16
    9036:	61 2f       	mov	r22, r17
    9038:	27 2f       	mov	r18, r23
    903a:	39 2f       	mov	r19, r25
    903c:	48 2f       	mov	r20, r24
    903e:	56 2f       	mov	r21, r22
    9040:	b9 01       	movw	r22, r18
    9042:	ca 01       	movw	r24, r20
    9044:	df 91       	pop	r29
    9046:	cf 91       	pop	r28
    9048:	1f 91       	pop	r17
    904a:	0f 91       	pop	r16
    904c:	ff 90       	pop	r15
    904e:	ef 90       	pop	r14
    9050:	df 90       	pop	r13
    9052:	cf 90       	pop	r12
    9054:	bf 90       	pop	r11
    9056:	af 90       	pop	r10
    9058:	9f 90       	pop	r9
    905a:	8f 90       	pop	r8
    905c:	08 95       	ret

0000905e <atoi>:
    905e:	fc 01       	movw	r30, r24
    9060:	88 27       	eor	r24, r24
    9062:	99 27       	eor	r25, r25
    9064:	e8 94       	clt
    9066:	21 91       	ld	r18, Z+
    9068:	20 32       	cpi	r18, 0x20	; 32
    906a:	e9 f3       	breq	.-6      	; 0x9066 <atoi+0x8>
    906c:	29 30       	cpi	r18, 0x09	; 9
    906e:	10 f0       	brcs	.+4      	; 0x9074 <atoi+0x16>
    9070:	2e 30       	cpi	r18, 0x0E	; 14
    9072:	c8 f3       	brcs	.-14     	; 0x9066 <atoi+0x8>
    9074:	2b 32       	cpi	r18, 0x2B	; 43
    9076:	41 f0       	breq	.+16     	; 0x9088 <atoi+0x2a>
    9078:	2d 32       	cpi	r18, 0x2D	; 45
    907a:	39 f4       	brne	.+14     	; 0x908a <atoi+0x2c>
    907c:	68 94       	set
    907e:	04 c0       	rjmp	.+8      	; 0x9088 <atoi+0x2a>
    9080:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <__mulhi_const_10>
    9084:	82 0f       	add	r24, r18
    9086:	91 1d       	adc	r25, r1
    9088:	21 91       	ld	r18, Z+
    908a:	20 53       	subi	r18, 0x30	; 48
    908c:	2a 30       	cpi	r18, 0x0A	; 10
    908e:	c0 f3       	brcs	.-16     	; 0x9080 <atoi+0x22>
    9090:	1e f4       	brtc	.+6      	; 0x9098 <atoi+0x3a>
    9092:	90 95       	com	r25
    9094:	81 95       	neg	r24
    9096:	9f 4f       	sbci	r25, 0xFF	; 255
    9098:	08 95       	ret

0000909a <__ftoa_engine>:
    909a:	28 30       	cpi	r18, 0x08	; 8
    909c:	08 f0       	brcs	.+2      	; 0x90a0 <__ftoa_engine+0x6>
    909e:	27 e0       	ldi	r18, 0x07	; 7
    90a0:	33 27       	eor	r19, r19
    90a2:	da 01       	movw	r26, r20
    90a4:	99 0f       	add	r25, r25
    90a6:	31 1d       	adc	r19, r1
    90a8:	87 fd       	sbrc	r24, 7
    90aa:	91 60       	ori	r25, 0x01	; 1
    90ac:	00 96       	adiw	r24, 0x00	; 0
    90ae:	61 05       	cpc	r22, r1
    90b0:	71 05       	cpc	r23, r1
    90b2:	39 f4       	brne	.+14     	; 0x90c2 <__ftoa_engine+0x28>
    90b4:	32 60       	ori	r19, 0x02	; 2
    90b6:	2e 5f       	subi	r18, 0xFE	; 254
    90b8:	3d 93       	st	X+, r19
    90ba:	30 e3       	ldi	r19, 0x30	; 48
    90bc:	2a 95       	dec	r18
    90be:	e1 f7       	brne	.-8      	; 0x90b8 <__ftoa_engine+0x1e>
    90c0:	08 95       	ret
    90c2:	9f 3f       	cpi	r25, 0xFF	; 255
    90c4:	30 f0       	brcs	.+12     	; 0x90d2 <__ftoa_engine+0x38>
    90c6:	80 38       	cpi	r24, 0x80	; 128
    90c8:	71 05       	cpc	r23, r1
    90ca:	61 05       	cpc	r22, r1
    90cc:	09 f0       	breq	.+2      	; 0x90d0 <__ftoa_engine+0x36>
    90ce:	3c 5f       	subi	r19, 0xFC	; 252
    90d0:	3c 5f       	subi	r19, 0xFC	; 252
    90d2:	3d 93       	st	X+, r19
    90d4:	91 30       	cpi	r25, 0x01	; 1
    90d6:	08 f0       	brcs	.+2      	; 0x90da <__ftoa_engine+0x40>
    90d8:	80 68       	ori	r24, 0x80	; 128
    90da:	91 1d       	adc	r25, r1
    90dc:	df 93       	push	r29
    90de:	cf 93       	push	r28
    90e0:	1f 93       	push	r17
    90e2:	0f 93       	push	r16
    90e4:	ff 92       	push	r15
    90e6:	ef 92       	push	r14
    90e8:	19 2f       	mov	r17, r25
    90ea:	98 7f       	andi	r25, 0xF8	; 248
    90ec:	96 95       	lsr	r25
    90ee:	e9 2f       	mov	r30, r25
    90f0:	96 95       	lsr	r25
    90f2:	96 95       	lsr	r25
    90f4:	e9 0f       	add	r30, r25
    90f6:	ff 27       	eor	r31, r31
    90f8:	e0 57       	subi	r30, 0x70	; 112
    90fa:	f2 4e       	sbci	r31, 0xE2	; 226
    90fc:	99 27       	eor	r25, r25
    90fe:	33 27       	eor	r19, r19
    9100:	ee 24       	eor	r14, r14
    9102:	ff 24       	eor	r15, r15
    9104:	a7 01       	movw	r20, r14
    9106:	e7 01       	movw	r28, r14
    9108:	05 90       	lpm	r0, Z+
    910a:	08 94       	sec
    910c:	07 94       	ror	r0
    910e:	28 f4       	brcc	.+10     	; 0x911a <__ftoa_engine+0x80>
    9110:	36 0f       	add	r19, r22
    9112:	e7 1e       	adc	r14, r23
    9114:	f8 1e       	adc	r15, r24
    9116:	49 1f       	adc	r20, r25
    9118:	51 1d       	adc	r21, r1
    911a:	66 0f       	add	r22, r22
    911c:	77 1f       	adc	r23, r23
    911e:	88 1f       	adc	r24, r24
    9120:	99 1f       	adc	r25, r25
    9122:	06 94       	lsr	r0
    9124:	a1 f7       	brne	.-24     	; 0x910e <__ftoa_engine+0x74>
    9126:	05 90       	lpm	r0, Z+
    9128:	07 94       	ror	r0
    912a:	28 f4       	brcc	.+10     	; 0x9136 <__ftoa_engine+0x9c>
    912c:	e7 0e       	add	r14, r23
    912e:	f8 1e       	adc	r15, r24
    9130:	49 1f       	adc	r20, r25
    9132:	56 1f       	adc	r21, r22
    9134:	c1 1d       	adc	r28, r1
    9136:	77 0f       	add	r23, r23
    9138:	88 1f       	adc	r24, r24
    913a:	99 1f       	adc	r25, r25
    913c:	66 1f       	adc	r22, r22
    913e:	06 94       	lsr	r0
    9140:	a1 f7       	brne	.-24     	; 0x912a <__ftoa_engine+0x90>
    9142:	05 90       	lpm	r0, Z+
    9144:	07 94       	ror	r0
    9146:	28 f4       	brcc	.+10     	; 0x9152 <__ftoa_engine+0xb8>
    9148:	f8 0e       	add	r15, r24
    914a:	49 1f       	adc	r20, r25
    914c:	56 1f       	adc	r21, r22
    914e:	c7 1f       	adc	r28, r23
    9150:	d1 1d       	adc	r29, r1
    9152:	88 0f       	add	r24, r24
    9154:	99 1f       	adc	r25, r25
    9156:	66 1f       	adc	r22, r22
    9158:	77 1f       	adc	r23, r23
    915a:	06 94       	lsr	r0
    915c:	a1 f7       	brne	.-24     	; 0x9146 <__ftoa_engine+0xac>
    915e:	05 90       	lpm	r0, Z+
    9160:	07 94       	ror	r0
    9162:	20 f4       	brcc	.+8      	; 0x916c <__ftoa_engine+0xd2>
    9164:	49 0f       	add	r20, r25
    9166:	56 1f       	adc	r21, r22
    9168:	c7 1f       	adc	r28, r23
    916a:	d8 1f       	adc	r29, r24
    916c:	99 0f       	add	r25, r25
    916e:	66 1f       	adc	r22, r22
    9170:	77 1f       	adc	r23, r23
    9172:	88 1f       	adc	r24, r24
    9174:	06 94       	lsr	r0
    9176:	a9 f7       	brne	.-22     	; 0x9162 <__ftoa_engine+0xc8>
    9178:	84 91       	lpm	r24, Z+
    917a:	10 95       	com	r17
    917c:	17 70       	andi	r17, 0x07	; 7
    917e:	41 f0       	breq	.+16     	; 0x9190 <__ftoa_engine+0xf6>
    9180:	d6 95       	lsr	r29
    9182:	c7 95       	ror	r28
    9184:	57 95       	ror	r21
    9186:	47 95       	ror	r20
    9188:	f7 94       	ror	r15
    918a:	e7 94       	ror	r14
    918c:	1a 95       	dec	r17
    918e:	c1 f7       	brne	.-16     	; 0x9180 <__ftoa_engine+0xe6>
    9190:	e6 e3       	ldi	r30, 0x36	; 54
    9192:	fd e1       	ldi	r31, 0x1D	; 29
    9194:	68 94       	set
    9196:	15 90       	lpm	r1, Z+
    9198:	15 91       	lpm	r17, Z+
    919a:	35 91       	lpm	r19, Z+
    919c:	65 91       	lpm	r22, Z+
    919e:	95 91       	lpm	r25, Z+
    91a0:	05 90       	lpm	r0, Z+
    91a2:	7f e2       	ldi	r23, 0x2F	; 47
    91a4:	73 95       	inc	r23
    91a6:	e1 18       	sub	r14, r1
    91a8:	f1 0a       	sbc	r15, r17
    91aa:	43 0b       	sbc	r20, r19
    91ac:	56 0b       	sbc	r21, r22
    91ae:	c9 0b       	sbc	r28, r25
    91b0:	d0 09       	sbc	r29, r0
    91b2:	c0 f7       	brcc	.-16     	; 0x91a4 <__ftoa_engine+0x10a>
    91b4:	e1 0c       	add	r14, r1
    91b6:	f1 1e       	adc	r15, r17
    91b8:	43 1f       	adc	r20, r19
    91ba:	56 1f       	adc	r21, r22
    91bc:	c9 1f       	adc	r28, r25
    91be:	d0 1d       	adc	r29, r0
    91c0:	7e f4       	brtc	.+30     	; 0x91e0 <__ftoa_engine+0x146>
    91c2:	70 33       	cpi	r23, 0x30	; 48
    91c4:	11 f4       	brne	.+4      	; 0x91ca <__ftoa_engine+0x130>
    91c6:	8a 95       	dec	r24
    91c8:	e6 cf       	rjmp	.-52     	; 0x9196 <__ftoa_engine+0xfc>
    91ca:	e8 94       	clt
    91cc:	01 50       	subi	r16, 0x01	; 1
    91ce:	30 f0       	brcs	.+12     	; 0x91dc <__ftoa_engine+0x142>
    91d0:	08 0f       	add	r16, r24
    91d2:	0a f4       	brpl	.+2      	; 0x91d6 <__ftoa_engine+0x13c>
    91d4:	00 27       	eor	r16, r16
    91d6:	02 17       	cp	r16, r18
    91d8:	08 f4       	brcc	.+2      	; 0x91dc <__ftoa_engine+0x142>
    91da:	20 2f       	mov	r18, r16
    91dc:	23 95       	inc	r18
    91de:	02 2f       	mov	r16, r18
    91e0:	7a 33       	cpi	r23, 0x3A	; 58
    91e2:	28 f0       	brcs	.+10     	; 0x91ee <__ftoa_engine+0x154>
    91e4:	79 e3       	ldi	r23, 0x39	; 57
    91e6:	7d 93       	st	X+, r23
    91e8:	2a 95       	dec	r18
    91ea:	e9 f7       	brne	.-6      	; 0x91e6 <__ftoa_engine+0x14c>
    91ec:	10 c0       	rjmp	.+32     	; 0x920e <__ftoa_engine+0x174>
    91ee:	7d 93       	st	X+, r23
    91f0:	2a 95       	dec	r18
    91f2:	89 f6       	brne	.-94     	; 0x9196 <__ftoa_engine+0xfc>
    91f4:	06 94       	lsr	r0
    91f6:	97 95       	ror	r25
    91f8:	67 95       	ror	r22
    91fa:	37 95       	ror	r19
    91fc:	17 95       	ror	r17
    91fe:	17 94       	ror	r1
    9200:	e1 18       	sub	r14, r1
    9202:	f1 0a       	sbc	r15, r17
    9204:	43 0b       	sbc	r20, r19
    9206:	56 0b       	sbc	r21, r22
    9208:	c9 0b       	sbc	r28, r25
    920a:	d0 09       	sbc	r29, r0
    920c:	98 f0       	brcs	.+38     	; 0x9234 <__ftoa_engine+0x19a>
    920e:	23 95       	inc	r18
    9210:	7e 91       	ld	r23, -X
    9212:	73 95       	inc	r23
    9214:	7a 33       	cpi	r23, 0x3A	; 58
    9216:	08 f0       	brcs	.+2      	; 0x921a <__ftoa_engine+0x180>
    9218:	70 e3       	ldi	r23, 0x30	; 48
    921a:	7c 93       	st	X, r23
    921c:	20 13       	cpse	r18, r16
    921e:	b8 f7       	brcc	.-18     	; 0x920e <__ftoa_engine+0x174>
    9220:	7e 91       	ld	r23, -X
    9222:	70 61       	ori	r23, 0x10	; 16
    9224:	7d 93       	st	X+, r23
    9226:	30 f0       	brcs	.+12     	; 0x9234 <__ftoa_engine+0x19a>
    9228:	83 95       	inc	r24
    922a:	71 e3       	ldi	r23, 0x31	; 49
    922c:	7d 93       	st	X+, r23
    922e:	70 e3       	ldi	r23, 0x30	; 48
    9230:	2a 95       	dec	r18
    9232:	e1 f7       	brne	.-8      	; 0x922c <__ftoa_engine+0x192>
    9234:	11 24       	eor	r1, r1
    9236:	ef 90       	pop	r14
    9238:	ff 90       	pop	r15
    923a:	0f 91       	pop	r16
    923c:	1f 91       	pop	r17
    923e:	cf 91       	pop	r28
    9240:	df 91       	pop	r29
    9242:	99 27       	eor	r25, r25
    9244:	87 fd       	sbrc	r24, 7
    9246:	90 95       	com	r25
    9248:	08 95       	ret

0000924a <isspace>:
    924a:	91 11       	cpse	r25, r1
    924c:	21 c1       	rjmp	.+578    	; 0x9490 <__ctype_isfalse>
    924e:	80 32       	cpi	r24, 0x20	; 32
    9250:	19 f0       	breq	.+6      	; 0x9258 <isspace+0xe>
    9252:	89 50       	subi	r24, 0x09	; 9
    9254:	85 50       	subi	r24, 0x05	; 5
    9256:	d0 f7       	brcc	.-12     	; 0x924c <isspace+0x2>
    9258:	08 95       	ret

0000925a <strncasecmp_P>:
    925a:	fb 01       	movw	r30, r22
    925c:	dc 01       	movw	r26, r24
    925e:	41 50       	subi	r20, 0x01	; 1
    9260:	50 40       	sbci	r21, 0x00	; 0
    9262:	88 f0       	brcs	.+34     	; 0x9286 <strncasecmp_P+0x2c>
    9264:	8d 91       	ld	r24, X+
    9266:	81 34       	cpi	r24, 0x41	; 65
    9268:	1c f0       	brlt	.+6      	; 0x9270 <strncasecmp_P+0x16>
    926a:	8b 35       	cpi	r24, 0x5B	; 91
    926c:	0c f4       	brge	.+2      	; 0x9270 <strncasecmp_P+0x16>
    926e:	80 5e       	subi	r24, 0xE0	; 224
    9270:	65 91       	lpm	r22, Z+
    9272:	61 34       	cpi	r22, 0x41	; 65
    9274:	1c f0       	brlt	.+6      	; 0x927c <strncasecmp_P+0x22>
    9276:	6b 35       	cpi	r22, 0x5B	; 91
    9278:	0c f4       	brge	.+2      	; 0x927c <strncasecmp_P+0x22>
    927a:	60 5e       	subi	r22, 0xE0	; 224
    927c:	86 1b       	sub	r24, r22
    927e:	61 11       	cpse	r22, r1
    9280:	71 f3       	breq	.-36     	; 0x925e <strncasecmp_P+0x4>
    9282:	99 0b       	sbc	r25, r25
    9284:	08 95       	ret
    9286:	88 1b       	sub	r24, r24
    9288:	fc cf       	rjmp	.-8      	; 0x9282 <strncasecmp_P+0x28>

0000928a <strnlen_P>:
    928a:	fc 01       	movw	r30, r24
    928c:	05 90       	lpm	r0, Z+
    928e:	61 50       	subi	r22, 0x01	; 1
    9290:	70 40       	sbci	r23, 0x00	; 0
    9292:	01 10       	cpse	r0, r1
    9294:	d8 f7       	brcc	.-10     	; 0x928c <strnlen_P+0x2>
    9296:	80 95       	com	r24
    9298:	90 95       	com	r25
    929a:	8e 0f       	add	r24, r30
    929c:	9f 1f       	adc	r25, r31
    929e:	08 95       	ret

000092a0 <strnlen>:
    92a0:	fc 01       	movw	r30, r24
    92a2:	61 50       	subi	r22, 0x01	; 1
    92a4:	70 40       	sbci	r23, 0x00	; 0
    92a6:	01 90       	ld	r0, Z+
    92a8:	01 10       	cpse	r0, r1
    92aa:	d8 f7       	brcc	.-10     	; 0x92a2 <strnlen+0x2>
    92ac:	80 95       	com	r24
    92ae:	90 95       	com	r25
    92b0:	8e 0f       	add	r24, r30
    92b2:	9f 1f       	adc	r25, r31
    92b4:	08 95       	ret

000092b6 <__mulhi_const_10>:
    92b6:	7a e0       	ldi	r23, 0x0A	; 10
    92b8:	97 9f       	mul	r25, r23
    92ba:	90 2d       	mov	r25, r0
    92bc:	87 9f       	mul	r24, r23
    92be:	80 2d       	mov	r24, r0
    92c0:	91 0d       	add	r25, r1
    92c2:	11 24       	eor	r1, r1
    92c4:	08 95       	ret

000092c6 <clearerr>:
    92c6:	fc 01       	movw	r30, r24
    92c8:	83 81       	ldd	r24, Z+3	; 0x03
    92ca:	8f 7c       	andi	r24, 0xCF	; 207
    92cc:	83 83       	std	Z+3, r24	; 0x03
    92ce:	08 95       	ret

000092d0 <fgets>:
    92d0:	cf 92       	push	r12
    92d2:	df 92       	push	r13
    92d4:	ef 92       	push	r14
    92d6:	ff 92       	push	r15
    92d8:	0f 93       	push	r16
    92da:	1f 93       	push	r17
    92dc:	cf 93       	push	r28
    92de:	df 93       	push	r29
    92e0:	7c 01       	movw	r14, r24
    92e2:	6a 01       	movw	r12, r20
    92e4:	fa 01       	movw	r30, r20
    92e6:	83 81       	ldd	r24, Z+3	; 0x03
    92e8:	80 ff       	sbrs	r24, 0
    92ea:	19 c0       	rjmp	.+50     	; 0x931e <fgets+0x4e>
    92ec:	16 16       	cp	r1, r22
    92ee:	17 06       	cpc	r1, r23
    92f0:	b4 f4       	brge	.+44     	; 0x931e <fgets+0x4e>
    92f2:	eb 01       	movw	r28, r22
    92f4:	21 97       	sbiw	r28, 0x01	; 1
    92f6:	87 01       	movw	r16, r14
    92f8:	0d c0       	rjmp	.+26     	; 0x9314 <fgets+0x44>
    92fa:	c6 01       	movw	r24, r12
    92fc:	0e 94 4b 4a 	call	0x9496	; 0x9496 <fgetc>
    9300:	ff ef       	ldi	r31, 0xFF	; 255
    9302:	8f 3f       	cpi	r24, 0xFF	; 255
    9304:	9f 07       	cpc	r25, r31
    9306:	59 f0       	breq	.+22     	; 0x931e <fgets+0x4e>
    9308:	f8 01       	movw	r30, r16
    930a:	81 93       	st	Z+, r24
    930c:	8f 01       	movw	r16, r30
    930e:	0a 97       	sbiw	r24, 0x0a	; 10
    9310:	19 f0       	breq	.+6      	; 0x9318 <fgets+0x48>
    9312:	21 97       	sbiw	r28, 0x01	; 1
    9314:	20 97       	sbiw	r28, 0x00	; 0
    9316:	89 f7       	brne	.-30     	; 0x92fa <fgets+0x2a>
    9318:	f8 01       	movw	r30, r16
    931a:	10 82       	st	Z, r1
    931c:	02 c0       	rjmp	.+4      	; 0x9322 <fgets+0x52>
    931e:	ee 24       	eor	r14, r14
    9320:	ff 24       	eor	r15, r15
    9322:	c7 01       	movw	r24, r14
    9324:	df 91       	pop	r29
    9326:	cf 91       	pop	r28
    9328:	1f 91       	pop	r17
    932a:	0f 91       	pop	r16
    932c:	ff 90       	pop	r15
    932e:	ef 90       	pop	r14
    9330:	df 90       	pop	r13
    9332:	cf 90       	pop	r12
    9334:	08 95       	ret

00009336 <fputc>:
    9336:	0f 93       	push	r16
    9338:	1f 93       	push	r17
    933a:	cf 93       	push	r28
    933c:	df 93       	push	r29
    933e:	8c 01       	movw	r16, r24
    9340:	eb 01       	movw	r28, r22
    9342:	8b 81       	ldd	r24, Y+3	; 0x03
    9344:	81 ff       	sbrs	r24, 1
    9346:	1b c0       	rjmp	.+54     	; 0x937e <fputc+0x48>
    9348:	82 ff       	sbrs	r24, 2
    934a:	0d c0       	rjmp	.+26     	; 0x9366 <fputc+0x30>
    934c:	2e 81       	ldd	r18, Y+6	; 0x06
    934e:	3f 81       	ldd	r19, Y+7	; 0x07
    9350:	8c 81       	ldd	r24, Y+4	; 0x04
    9352:	9d 81       	ldd	r25, Y+5	; 0x05
    9354:	28 17       	cp	r18, r24
    9356:	39 07       	cpc	r19, r25
    9358:	64 f4       	brge	.+24     	; 0x9372 <fputc+0x3c>
    935a:	e8 81       	ld	r30, Y
    935c:	f9 81       	ldd	r31, Y+1	; 0x01
    935e:	01 93       	st	Z+, r16
    9360:	e8 83       	st	Y, r30
    9362:	f9 83       	std	Y+1, r31	; 0x01
    9364:	06 c0       	rjmp	.+12     	; 0x9372 <fputc+0x3c>
    9366:	e8 85       	ldd	r30, Y+8	; 0x08
    9368:	f9 85       	ldd	r31, Y+9	; 0x09
    936a:	80 2f       	mov	r24, r16
    936c:	19 95       	eicall
    936e:	89 2b       	or	r24, r25
    9370:	31 f4       	brne	.+12     	; 0x937e <fputc+0x48>
    9372:	8e 81       	ldd	r24, Y+6	; 0x06
    9374:	9f 81       	ldd	r25, Y+7	; 0x07
    9376:	01 96       	adiw	r24, 0x01	; 1
    9378:	8e 83       	std	Y+6, r24	; 0x06
    937a:	9f 83       	std	Y+7, r25	; 0x07
    937c:	02 c0       	rjmp	.+4      	; 0x9382 <fputc+0x4c>
    937e:	0f ef       	ldi	r16, 0xFF	; 255
    9380:	1f ef       	ldi	r17, 0xFF	; 255
    9382:	c8 01       	movw	r24, r16
    9384:	df 91       	pop	r29
    9386:	cf 91       	pop	r28
    9388:	1f 91       	pop	r17
    938a:	0f 91       	pop	r16
    938c:	08 95       	ret

0000938e <printf_P>:
    938e:	df 93       	push	r29
    9390:	cf 93       	push	r28
    9392:	cd b7       	in	r28, 0x3d	; 61
    9394:	de b7       	in	r29, 0x3e	; 62
    9396:	fe 01       	movw	r30, r28
    9398:	36 96       	adiw	r30, 0x06	; 6
    939a:	61 91       	ld	r22, Z+
    939c:	71 91       	ld	r23, Z+
    939e:	a0 91 55 25 	lds	r26, 0x2555
    93a2:	b0 91 56 25 	lds	r27, 0x2556
    93a6:	13 96       	adiw	r26, 0x03	; 3
    93a8:	8c 91       	ld	r24, X
    93aa:	13 97       	sbiw	r26, 0x03	; 3
    93ac:	88 60       	ori	r24, 0x08	; 8
    93ae:	13 96       	adiw	r26, 0x03	; 3
    93b0:	8c 93       	st	X, r24
    93b2:	80 91 55 25 	lds	r24, 0x2555
    93b6:	90 91 56 25 	lds	r25, 0x2556
    93ba:	af 01       	movw	r20, r30
    93bc:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <vfprintf>
    93c0:	e0 91 55 25 	lds	r30, 0x2555
    93c4:	f0 91 56 25 	lds	r31, 0x2556
    93c8:	23 81       	ldd	r18, Z+3	; 0x03
    93ca:	27 7f       	andi	r18, 0xF7	; 247
    93cc:	23 83       	std	Z+3, r18	; 0x03
    93ce:	cf 91       	pop	r28
    93d0:	df 91       	pop	r29
    93d2:	08 95       	ret

000093d4 <__ultoa_invert>:
    93d4:	fa 01       	movw	r30, r20
    93d6:	aa 27       	eor	r26, r26
    93d8:	28 30       	cpi	r18, 0x08	; 8
    93da:	51 f1       	breq	.+84     	; 0x9430 <__ultoa_invert+0x5c>
    93dc:	20 31       	cpi	r18, 0x10	; 16
    93de:	81 f1       	breq	.+96     	; 0x9440 <__ultoa_invert+0x6c>
    93e0:	e8 94       	clt
    93e2:	6f 93       	push	r22
    93e4:	6e 7f       	andi	r22, 0xFE	; 254
    93e6:	6e 5f       	subi	r22, 0xFE	; 254
    93e8:	7f 4f       	sbci	r23, 0xFF	; 255
    93ea:	8f 4f       	sbci	r24, 0xFF	; 255
    93ec:	9f 4f       	sbci	r25, 0xFF	; 255
    93ee:	af 4f       	sbci	r26, 0xFF	; 255
    93f0:	b1 e0       	ldi	r27, 0x01	; 1
    93f2:	3e d0       	rcall	.+124    	; 0x9470 <__ultoa_invert+0x9c>
    93f4:	b4 e0       	ldi	r27, 0x04	; 4
    93f6:	3c d0       	rcall	.+120    	; 0x9470 <__ultoa_invert+0x9c>
    93f8:	67 0f       	add	r22, r23
    93fa:	78 1f       	adc	r23, r24
    93fc:	89 1f       	adc	r24, r25
    93fe:	9a 1f       	adc	r25, r26
    9400:	a1 1d       	adc	r26, r1
    9402:	68 0f       	add	r22, r24
    9404:	79 1f       	adc	r23, r25
    9406:	8a 1f       	adc	r24, r26
    9408:	91 1d       	adc	r25, r1
    940a:	a1 1d       	adc	r26, r1
    940c:	6a 0f       	add	r22, r26
    940e:	71 1d       	adc	r23, r1
    9410:	81 1d       	adc	r24, r1
    9412:	91 1d       	adc	r25, r1
    9414:	a1 1d       	adc	r26, r1
    9416:	20 d0       	rcall	.+64     	; 0x9458 <__ultoa_invert+0x84>
    9418:	09 f4       	brne	.+2      	; 0x941c <__ultoa_invert+0x48>
    941a:	68 94       	set
    941c:	3f 91       	pop	r19
    941e:	2a e0       	ldi	r18, 0x0A	; 10
    9420:	26 9f       	mul	r18, r22
    9422:	11 24       	eor	r1, r1
    9424:	30 19       	sub	r19, r0
    9426:	30 5d       	subi	r19, 0xD0	; 208
    9428:	31 93       	st	Z+, r19
    942a:	de f6       	brtc	.-74     	; 0x93e2 <__ultoa_invert+0xe>
    942c:	cf 01       	movw	r24, r30
    942e:	08 95       	ret
    9430:	46 2f       	mov	r20, r22
    9432:	47 70       	andi	r20, 0x07	; 7
    9434:	40 5d       	subi	r20, 0xD0	; 208
    9436:	41 93       	st	Z+, r20
    9438:	b3 e0       	ldi	r27, 0x03	; 3
    943a:	0f d0       	rcall	.+30     	; 0x945a <__ultoa_invert+0x86>
    943c:	c9 f7       	brne	.-14     	; 0x9430 <__ultoa_invert+0x5c>
    943e:	f6 cf       	rjmp	.-20     	; 0x942c <__ultoa_invert+0x58>
    9440:	46 2f       	mov	r20, r22
    9442:	4f 70       	andi	r20, 0x0F	; 15
    9444:	40 5d       	subi	r20, 0xD0	; 208
    9446:	4a 33       	cpi	r20, 0x3A	; 58
    9448:	18 f0       	brcs	.+6      	; 0x9450 <__ultoa_invert+0x7c>
    944a:	49 5d       	subi	r20, 0xD9	; 217
    944c:	31 fd       	sbrc	r19, 1
    944e:	40 52       	subi	r20, 0x20	; 32
    9450:	41 93       	st	Z+, r20
    9452:	02 d0       	rcall	.+4      	; 0x9458 <__ultoa_invert+0x84>
    9454:	a9 f7       	brne	.-22     	; 0x9440 <__ultoa_invert+0x6c>
    9456:	ea cf       	rjmp	.-44     	; 0x942c <__ultoa_invert+0x58>
    9458:	b4 e0       	ldi	r27, 0x04	; 4
    945a:	a6 95       	lsr	r26
    945c:	97 95       	ror	r25
    945e:	87 95       	ror	r24
    9460:	77 95       	ror	r23
    9462:	67 95       	ror	r22
    9464:	ba 95       	dec	r27
    9466:	c9 f7       	brne	.-14     	; 0x945a <__ultoa_invert+0x86>
    9468:	00 97       	sbiw	r24, 0x00	; 0
    946a:	61 05       	cpc	r22, r1
    946c:	71 05       	cpc	r23, r1
    946e:	08 95       	ret
    9470:	9b 01       	movw	r18, r22
    9472:	ac 01       	movw	r20, r24
    9474:	0a 2e       	mov	r0, r26
    9476:	06 94       	lsr	r0
    9478:	57 95       	ror	r21
    947a:	47 95       	ror	r20
    947c:	37 95       	ror	r19
    947e:	27 95       	ror	r18
    9480:	ba 95       	dec	r27
    9482:	c9 f7       	brne	.-14     	; 0x9476 <__ultoa_invert+0xa2>
    9484:	62 0f       	add	r22, r18
    9486:	73 1f       	adc	r23, r19
    9488:	84 1f       	adc	r24, r20
    948a:	95 1f       	adc	r25, r21
    948c:	a0 1d       	adc	r26, r0
    948e:	08 95       	ret

00009490 <__ctype_isfalse>:
    9490:	99 27       	eor	r25, r25
    9492:	88 27       	eor	r24, r24

00009494 <__ctype_istrue>:
    9494:	08 95       	ret

00009496 <fgetc>:
    9496:	cf 93       	push	r28
    9498:	df 93       	push	r29
    949a:	ec 01       	movw	r28, r24
    949c:	4b 81       	ldd	r20, Y+3	; 0x03
    949e:	40 ff       	sbrs	r20, 0
    94a0:	1a c0       	rjmp	.+52     	; 0x94d6 <fgetc+0x40>
    94a2:	46 ff       	sbrs	r20, 6
    94a4:	0a c0       	rjmp	.+20     	; 0x94ba <fgetc+0x24>
    94a6:	4f 7b       	andi	r20, 0xBF	; 191
    94a8:	4b 83       	std	Y+3, r20	; 0x03
    94aa:	8e 81       	ldd	r24, Y+6	; 0x06
    94ac:	9f 81       	ldd	r25, Y+7	; 0x07
    94ae:	01 96       	adiw	r24, 0x01	; 1
    94b0:	8e 83       	std	Y+6, r24	; 0x06
    94b2:	9f 83       	std	Y+7, r25	; 0x07
    94b4:	8a 81       	ldd	r24, Y+2	; 0x02
    94b6:	28 2f       	mov	r18, r24
    94b8:	2b c0       	rjmp	.+86     	; 0x9510 <fgetc+0x7a>
    94ba:	42 ff       	sbrs	r20, 2
    94bc:	13 c0       	rjmp	.+38     	; 0x94e4 <fgetc+0x4e>
    94be:	e8 81       	ld	r30, Y
    94c0:	f9 81       	ldd	r31, Y+1	; 0x01
    94c2:	80 81       	ld	r24, Z
    94c4:	28 2f       	mov	r18, r24
    94c6:	33 27       	eor	r19, r19
    94c8:	27 fd       	sbrc	r18, 7
    94ca:	30 95       	com	r19
    94cc:	21 15       	cp	r18, r1
    94ce:	31 05       	cpc	r19, r1
    94d0:	29 f4       	brne	.+10     	; 0x94dc <fgetc+0x46>
    94d2:	40 62       	ori	r20, 0x20	; 32
    94d4:	4b 83       	std	Y+3, r20	; 0x03
    94d6:	2f ef       	ldi	r18, 0xFF	; 255
    94d8:	3f ef       	ldi	r19, 0xFF	; 255
    94da:	1b c0       	rjmp	.+54     	; 0x9512 <fgetc+0x7c>
    94dc:	31 96       	adiw	r30, 0x01	; 1
    94de:	e8 83       	st	Y, r30
    94e0:	f9 83       	std	Y+1, r31	; 0x01
    94e2:	11 c0       	rjmp	.+34     	; 0x9506 <fgetc+0x70>
    94e4:	ea 85       	ldd	r30, Y+10	; 0x0a
    94e6:	fb 85       	ldd	r31, Y+11	; 0x0b
    94e8:	ce 01       	movw	r24, r28
    94ea:	19 95       	eicall
    94ec:	9c 01       	movw	r18, r24
    94ee:	97 ff       	sbrs	r25, 7
    94f0:	0a c0       	rjmp	.+20     	; 0x9506 <fgetc+0x70>
    94f2:	9b 81       	ldd	r25, Y+3	; 0x03
    94f4:	2f 5f       	subi	r18, 0xFF	; 255
    94f6:	3f 4f       	sbci	r19, 0xFF	; 255
    94f8:	11 f0       	breq	.+4      	; 0x94fe <fgetc+0x68>
    94fa:	80 e2       	ldi	r24, 0x20	; 32
    94fc:	01 c0       	rjmp	.+2      	; 0x9500 <fgetc+0x6a>
    94fe:	80 e1       	ldi	r24, 0x10	; 16
    9500:	89 2b       	or	r24, r25
    9502:	8b 83       	std	Y+3, r24	; 0x03
    9504:	e8 cf       	rjmp	.-48     	; 0x94d6 <fgetc+0x40>
    9506:	8e 81       	ldd	r24, Y+6	; 0x06
    9508:	9f 81       	ldd	r25, Y+7	; 0x07
    950a:	01 96       	adiw	r24, 0x01	; 1
    950c:	8e 83       	std	Y+6, r24	; 0x06
    950e:	9f 83       	std	Y+7, r25	; 0x07
    9510:	30 e0       	ldi	r19, 0x00	; 0
    9512:	c9 01       	movw	r24, r18
    9514:	df 91       	pop	r29
    9516:	cf 91       	pop	r28
    9518:	08 95       	ret

0000951a <_exit>:
    951a:	f8 94       	cli

0000951c <__stop_program>:
    951c:	ff cf       	rjmp	.-2      	; 0x951c <__stop_program>
