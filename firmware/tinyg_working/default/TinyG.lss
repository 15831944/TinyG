
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000094a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00802000  000094a4  00009538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009b9  00802110  00802110  00009648  2**0
                  ALLOC
  3 .debug_aranges 000003e0  00000000  00000000  00009648  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000116d  00000000  00000000  00009a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000dc4b  00000000  00000000  0000ab95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002fdc  00000000  00000000  000187e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004f7d  00000000  00000000  0001b7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000be0  00000000  00000000  0002073c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000026ce  00000000  00000000  0002131c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003dc9  00000000  00000000  000239ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  000277b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__ctors_end>
       4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
       8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
       c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      10:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      14:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      18:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      1c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      20:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      24:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      28:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      2c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      30:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      34:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      38:	0c 94 fc 27 	jmp	0x4ff8	; 0x4ff8 <__vector_14>
      3c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      40:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      44:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      48:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      4c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      50:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      54:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      58:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      5c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      60:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      64:	0c 94 16 34 	jmp	0x682c	; 0x682c <__vector_25>
      68:	0c 94 d2 33 	jmp	0x67a4	; 0x67a4 <__vector_26>
      6c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      70:	0c 94 28 35 	jmp	0x6a50	; 0x6a50 <__vector_28>
      74:	0c 94 c4 34 	jmp	0x6988	; 0x6988 <__vector_29>
      78:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <__vector_30>
      7c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      80:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      84:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      88:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      8c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      90:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      94:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      98:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      9c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      a0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      a4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      a8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      ac:	0c 94 f0 2f 	jmp	0x5fe0	; 0x5fe0 <__vector_43>
      b0:	0c 94 fa 2f 	jmp	0x5ff4	; 0x5ff4 <__vector_44>
      b4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      b8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      bc:	0c 94 32 27 	jmp	0x4e64	; 0x4e64 <__vector_47>
      c0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      c4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      c8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      cc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      d0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      d4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      d8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      dc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      e0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      e4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      e8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      ec:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      f0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      f4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      f8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      fc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     100:	0c 94 04 30 	jmp	0x6008	; 0x6008 <__vector_64>
     104:	0c 94 0e 30 	jmp	0x601c	; 0x601c <__vector_65>
     108:	0c 94 c8 2f 	jmp	0x5f90	; 0x5f90 <__vector_66>
     10c:	0c 94 d2 2f 	jmp	0x5fa4	; 0x5fa4 <__vector_67>
     110:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     114:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     118:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     11c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     120:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     124:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     128:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     12c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     130:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     134:	0c 94 97 27 	jmp	0x4f2e	; 0x4f2e <__vector_77>
     138:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     13c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     140:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     144:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     148:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     14c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     150:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     154:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     158:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     15c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     160:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     164:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     168:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     16c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     170:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     174:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     178:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     17c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     180:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     184:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     188:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     18c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     190:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     194:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     198:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     19c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1a0:	0c 94 dc 2f 	jmp	0x5fb8	; 0x5fb8 <__vector_104>
     1a4:	0c 94 e6 2f 	jmp	0x5fcc	; 0x5fcc <__vector_105>
     1a8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1ac:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1b0:	0c 94 cd 26 	jmp	0x4d9a	; 0x4d9a <__vector_108>
     1b4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1b8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1bc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1c0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1c4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1c8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1cc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1d0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1d4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1d8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1dc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1e0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1e4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <__c.3954>:
     23b:	25 73 0a 00                                         %s..

0000023f <cfgMsgXaxis>:
     23f:	58 00                                               X.

00000241 <cfgMsgYaxis>:
     241:	59 00                                               Y.

00000243 <cfgMsgZaxis>:
     243:	5a 00                                               Z.

00000245 <cfgMsgAaxis>:
     245:	41 00                                               A.

00000247 <cfgMsgs>:
     247:	3f 02 41 02 43 02 45 02                             ?.A.C.E.

0000024f <configs_P>:
     24f:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25f:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26f:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27f:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28f:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29f:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2af:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bf:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cf:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2df:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2ef:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2ff:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30f:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31f:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32f:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33f:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34f:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35f:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36f:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37f:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38f:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

0000039d <__c.3754>:
     39d:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     3ad:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     3bd:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     3cd:	29 0a 0a 00                                         )...

000003d1 <__c.3752>:
     3d1:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     3e1:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     3f1:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000401 <__c.3750>:
     401:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     411:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     421:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

00000432 <__c.3748>:
     432:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     442:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     452:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

00000463 <__c.3746>:
     463:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     473:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     483:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     493:	6c 0a 00                                            l..

00000496 <__c.3744>:
     496:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     4a6:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     4b6:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     4c6:	6e 0a 00                                            n..

000004c9 <__c.3742>:
     4c9:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     4d9:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     4e9:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     4f9:	74 65 70 73 29 0a 00                                teps)..

00000500 <__c.3740>:
     500:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     510:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     520:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     530:	70 0a 00                                            p..

00000533 <__c.3738>:
     533:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     543:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     553:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     563:	73 74 65 70 73 29 0a 00                             steps)..

0000056b <__c.3736>:
     56b:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     57b:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     58b:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     59b:	73 74 65 70 73 29 0a 00                             steps)..

000005a3 <__c.3731>:
     5a3:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     5b3:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

000005c1 <__c.3717>:
     5c1:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     5d1:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     5e1:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

000005ec <__c.3715>:
     5ec:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     5fc:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     60c:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

00000616 <__c.3713>:
     616:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     626:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     636:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

00000640 <__c.3711>:
     640:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     650:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     660:	73 20 2d 2d 2d 0a 00                                s ---..

00000667 <__c.3709>:
     667:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     677:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     687:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

0000068f <__c.3711>:
     68f:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     69f:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     6af:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

000006bb <square_test1>:
     6bb:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     6cb:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     6db:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     6eb:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     6fb:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     70b:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     71b:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

00000729 <square_test2>:
     729:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     739:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     749:	78 30 20 79 30 00                                   x0 y0.

0000074f <square_test10>:
     74f:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     75f:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     76f:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

0000077b <circle_test10>:
     77b:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     78b:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     79b:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     7ab:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     7bb:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     7cb:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     7db:	30 00                                               0.

000007dd <square_circle_test10>:
     7dd:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     7ed:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     7fd:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     80d:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     81d:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     82d:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     83d:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     84d:	31 30 20 79 30 00                                   10 y0.

00000853 <square_circle_test100>:
     853:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     863:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     873:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     883:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     893:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     8a3:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     8b3:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     8c3:	35 30 20 6a 30 00                                   50 j0.

000008c9 <spiral_test5>:
     8c9:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     8d9:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     8e9:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     8f9:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     909:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     919:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     929:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     939:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

00000943 <spiral_test50a>:
     943:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     953:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

00000963 <dwell_test1>:
     963:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     973:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     983:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     993:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     9a3:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     9b3:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     9c3:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     9d3:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     9e3:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     9f3:	20 78 30 00                                          x0.

000009f7 <dwell_test2>:
     9f7:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     a07:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     a17:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     a27:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     a37:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     a47:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     a57:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     a67:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     a77:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000a81 <dwell_testMax>:
     a81:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000a8b <g0_test1>:
     a8b:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     a9b:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000aab <g0_test2>:
     aab:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     abb:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     acb:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     adb:	79 30 20 7a 30 00                                   y0 z0.

00000ae1 <g0_test3>:
     ae1:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     af1:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     b01:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000b0f <radius_arc_test1>:
     b0f:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     b1f:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     b2f:	72 35 30 0a 00                                      r50..

00000b34 <radius_arc_test2>:
     b34:	67 32 0a 00                                         g2..

00000b38 <zoetrope>:
     b38:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     b48:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     b58:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     b68:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     b78:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     b88:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     b98:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     ba8:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     bb8:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     bc8:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     bd8:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     be8:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     bf8:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     c08:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     c18:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     c28:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     c38:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     c48:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     c58:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     c68:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     c78:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     c88:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     c98:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     ca8:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     cb8:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     cc8:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     cd8:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     ce8:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     cf8:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     d08:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     d18:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     d28:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     d38:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     d48:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     d58:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     d68:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
     d78:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
     d88:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
     d98:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
     da8:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
     db8:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
     dc8:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
     dd8:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
     de8:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
     df8:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
     e08:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
     e18:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
     e28:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
     e38:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
     e48:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
     e58:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
     e68:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
     e78:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
     e88:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
     e98:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
     ea8:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
     eb8:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
     ec8:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
     ed8:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
     ee8:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
     ef8:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
     f08:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
     f18:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
     f28:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
     f38:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
     f48:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
     f58:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
     f68:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
     f78:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
     f88:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
     f98:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
     fa8:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
     fb8:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
     fc8:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
     fd8:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
     fe8:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
     ff8:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    1008:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    1018:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    1028:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    1038:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    1048:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    1058:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    1068:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    1078:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    1088:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    1098:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    10a8:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    10b8:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    10c8:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    10d8:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    10e8:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    10f8:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    1108:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    1118:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    1128:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    1138:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    1148:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    1158:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    1168:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    1178:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    1188:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    1198:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    11a8:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    11b8:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    11c8:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    11d8:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    11e8:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    11f8:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    1208:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    1218:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    1228:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    1238:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    1248:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    1258:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    1268:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    1278:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    1288:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    1298:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    12a8:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    12b8:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    12c8:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    12d8:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    12e8:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    12f8:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    1308:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    1318:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    1328:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    1338:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    1348:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    1358:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    1368:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    1378:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    1388:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    1398:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    13a8:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    13b8:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    13c8:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    13d8:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    13e8:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    13f8:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    1408:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    1418:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    1428:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    1438:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    1448:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    1458:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    1468:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    1478:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    1488:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    1498:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    14a8:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    14b8:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    14c8:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    14d8:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    14e8:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

000014f3 <contraptor_circle>:
    14f3:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    1503:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    1513:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    1523:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    1533:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    1543:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    1553:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    1563:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    1573:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    1583:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    1593:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    15a3:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    15b3:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    15c3:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    15d3:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    15e3:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    15f3:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    1603:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    1613:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    1623:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    1633:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    1643:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    1653:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    1663:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    1673:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    1683:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    1693:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    16a3:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    16b3:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    16c3:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    16d3:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    16e3:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    16f3:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    1703:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    1713:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    1723:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    1733:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    1743:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    1753:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    1763:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    1773:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1783:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1793:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    17a3:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    17b3:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    17c3:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    17d3:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    17e3:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    17f3:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1803:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    1813:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    1823:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    1833:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    1843:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    1853:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    1863:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1873:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1883:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1893:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    18a3:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    18b3:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    18c3:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

000018d3 <tgModeStringControl>:
    18d3:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

000018e0 <tgModeStringConfig>:
    18e0:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

000018ec <tgModeStringGCode>:
    18ec:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

000018f8 <tgModeStringDirect>:
    18f8:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

00001905 <tgModeStrings>:
    1905:	d3 18 e0 18 ec 18 f8 18                             ........

0000190d <tgStatusMsg00>:
    190d:	4f 4b 00                                            OK.

00001910 <tgStatusMsg01>:
    1910:	45 52 52 4f 52 00                                   ERROR.

00001916 <tgStatusMsg02>:
    1916:	45 41 47 41 49 4e 00                                EAGAIN.

0000191d <tgStatusMsg03>:
    191d:	4e 4f 4f 50 00                                      NOOP.

00001922 <tgStatusMsg04>:
    1922:	45 6e 64 20 6f 66 20 6c 69 6e 65 00                 End of line.

0000192e <tgStatusMsg05>:
    192e:	45 6e 64 20 6f 66 20 66 69 6c 65 00                 End of file.

0000193a <tgStatusMsg06>:
    193a:	46 69 6c 65 20 6e 6f 74 20 6f 70 65 6e 00           File not open.

00001948 <tgStatusMsg07>:
    1948:	4e 6f 20 73 75 63 68 20 64 65 76 69 63 65 00        No such device.

00001957 <tgStatusMsg08>:
    1957:	42 75 66 66 65 72 20 65 6d 70 74 79 00              Buffer empty.

00001964 <tgStatusMsg09>:
    1964:	42 75 66 66 65 72 20 66 75 6c 6c 20 2d 20 66 61     Buffer full - fa
    1974:	74 61 6c 00                                         tal.

00001978 <tgStatusMsg10>:
    1978:	42 75 66 66 65 72 20 66 75 6c 6c 20 2d 20 6e 6f     Buffer full - no
    1988:	6e 2d 66 61 74 61 6c 00                             n-fatal.

00001990 <tgStatusMsg11>:
    1990:	51 55 49 54 00                                      QUIT.

00001995 <tgStatusMsg12>:
    1995:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 63 6f 6d     Unrecognized com
    19a5:	6d 61 6e 64 00                                      mand.

000019aa <tgStatusMsg13>:
    19aa:	45 78 70 65 63 74 65 64 20 63 6f 6d 6d 61 6e 64     Expected command
    19ba:	20 6c 65 74 74 65 72 00                              letter.

000019c2 <tgStatusMsg14>:
    19c2:	55 6e 73 75 70 70 6f 72 74 65 64 20 73 74 61 74     Unsupported stat
    19d2:	65 6d 65 6e 74 00                                   ement.

000019d8 <tgStatusMsg15>:
    19d8:	50 61 72 61 6d 65 74 65 72 20 6f 76 65 72 20 72     Parameter over r
    19e8:	61 6e 67 65 00                                      ange.

000019ed <tgStatusMsg16>:
    19ed:	42 61 64 20 6e 75 6d 62 65 72 20 66 6f 72 6d 61     Bad number forma
    19fd:	74 00                                               t.

000019ff <tgStatusMsg17>:
    19ff:	46 6c 6f 61 74 69 6e 67 20 70 6f 69 6e 74 20 65     Floating point e
    1a0f:	72 72 6f 72 00                                      rror.

00001a14 <tgStatusMsg18>:
    1a14:	4d 6f 74 69 6f 6e 20 63 6f 6e 74 72 6f 6c 20 65     Motion control e
    1a24:	72 72 6f 72 00                                      rror.

00001a29 <tgStatusMsg19>:
    1a29:	41 72 63 20 73 70 65 63 69 66 69 63 61 74 69 6f     Arc specificatio
    1a39:	6e 20 65 72 72 6f 72 00                             n error.

00001a41 <tgStatusMsg20>:
    1a41:	5a 65 72 6f 20 6c 65 6e 67 74 68 20 6c 69 6e 65     Zero length line
	...

00001a52 <tgStatusStrings>:
    1a52:	0d 19 10 19 16 19 1d 19 22 19 2e 19 3a 19 48 19     ........"...:.H.
    1a62:	57 19 64 19 78 19 90 19 95 19 aa 19 c2 19 d8 19     W.d.x...........
    1a72:	ed 19 ff 19 14 1a 29 1a 41 1a                       ......).A.

00001a7c <__c.4094>:
    1a7c:	25 53 3a 20 25 73 0a 00                             %S: %s..

00001a84 <__c.3989>:
    1a84:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1a94:	69 6c 65 0a 00                                      ile..

00001a99 <__c.4052>:
    1a99:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001aa7 <__c.3964>:
    1aa7:	62 75 69 6c 64 20 32 30 38 00                       build 208.

00001ab1 <__c.3962>:
    1ab1:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1ac1:	25 53 0a 00                                         %S..

00001ac5 <bsel>:
    1ac5:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

00001ad0 <bscale>:
    1ad0:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

00001adb <readlnFuncs>:
    1adb:	85 31 41 31 41 31 41 31 41 31 41 31 41 31 41 31     .1A1A1A1A1A1A1A1
    1aeb:	cf 31 41 31 85 31 41 31 41 31 85 31 41 31 41 31     .1A1.1A1A1.1A1A1
    1afb:	41 31 41 31 41 31 41 31 41 31 41 31 41 31 41 31     A1A1A1A1A1A1A1A1
    1b0b:	41 31 41 31 41 31 41 31 41 31 41 31 41 31 41 31     A1A1A1A1A1A1A1A1
    1b1b:	41 31 41 31 41 31 41 31 41 31 41 31 41 31 41 31     A1A1A1A1A1A1A1A1
    1b2b:	41 31 41 31 41 31 41 31 41 31 41 31 41 31 41 31     A1A1A1A1A1A1A1A1
    1b3b:	41 31 41 31 41 31 41 31 41 31 41 31 41 31 41 31     A1A1A1A1A1A1A1A1
    1b4b:	41 31 41 31 41 31 b8 31 41 31 41 31 41 31 41 31     A1A1A1.1A1A1A1A1
    1b5b:	41 31 41 31 41 31 41 31 41 31 41 31 41 31 41 31     A1A1A1A1A1A1A1A1
    1b6b:	41 31 41 31 41 31 41 31 41 31 41 31 41 31 41 31     A1A1A1A1A1A1A1A1
    1b7b:	41 31 41 31 41 31 41 31 41 31 41 31 41 31 41 31     A1A1A1A1A1A1A1A1
    1b8b:	41 31 41 31 41 31 41 31 41 31 41 31 41 31 41 31     A1A1A1A1A1A1A1A1
    1b9b:	41 31 41 31 41 31 41 31 41 31 41 31 41 31 41 31     A1A1A1A1A1A1A1A1
    1bab:	41 31 41 31 41 31 41 31 41 31 41 31 41 31 41 31     A1A1A1A1A1A1A1A1
    1bbb:	41 31 41 31 41 31 41 31 41 31 41 31 41 31 41 31     A1A1A1A1A1A1A1A1
    1bcb:	41 31 41 31 41 31 41 31 41 31 41 31 41 31 cf 31     A1A1A1A1A1A1A1.1

00001bdb <getcFuncs>:
    1bdb:	78 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30     x0K0K0K0K0K0K0K0
    1beb:	cd 30 4b 30 78 30 4b 30 4b 30 78 30 4b 30 4b 30     .0K0x0K0K0x0K0K0
    1bfb:	4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30     K0K0K0K0K0K0K0K0
    1c0b:	4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30     K0K0K0K0K0K0K0K0
    1c1b:	4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30     K0K0K0K0K0K0K0K0
    1c2b:	4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30     K0K0K0K0K0K0K0K0
    1c3b:	4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30     K0K0K0K0K0K0K0K0
    1c4b:	4b 30 4b 30 4b 30 b6 30 4b 30 4b 30 4b 30 4b 30     K0K0K0.0K0K0K0K0
    1c5b:	4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30     K0K0K0K0K0K0K0K0
    1c6b:	4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30     K0K0K0K0K0K0K0K0
    1c7b:	4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30     K0K0K0K0K0K0K0K0
    1c8b:	4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30     K0K0K0K0K0K0K0K0
    1c9b:	4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30     K0K0K0K0K0K0K0K0
    1cab:	4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30     K0K0K0K0K0K0K0K0
    1cbb:	4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30     K0K0K0K0K0K0K0K0
    1ccb:	4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 4b 30 cd 30     K0K0K0K0K0K0K0.0

00001cdb <pstr_inf>:
    1cdb:	49 4e 46                                            INF

00001cde <pstr_inity>:
    1cde:	49 4e 49 54 59                                      INITY

00001ce3 <pstr_nan>:
    1ce3:	4e 41 4e                                            NAN

00001ce6 <pwr_m10>:
    1ce6:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1cf6:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001cfe <pwr_p10>:
    1cfe:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1d0e:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1d1e:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1d2e:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1d3e:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1d4e:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1d5e:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1d6e:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1d7e:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1d8e:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1d9e:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1dae:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1dbe:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1dce:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1dde:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1dee:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1dfe:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1e0e:	3d 27                                               ='

00001e10 <__ctors_end>:
    1e10:	11 24       	eor	r1, r1
    1e12:	1f be       	out	0x3f, r1	; 63
    1e14:	cf ef       	ldi	r28, 0xFF	; 255
    1e16:	df e5       	ldi	r29, 0x5F	; 95
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	00 e0       	ldi	r16, 0x00	; 0
    1e1e:	0c bf       	out	0x3c, r16	; 60

00001e20 <__do_copy_data>:
    1e20:	11 e2       	ldi	r17, 0x21	; 33
    1e22:	a0 e0       	ldi	r26, 0x00	; 0
    1e24:	b0 e2       	ldi	r27, 0x20	; 32
    1e26:	e4 ea       	ldi	r30, 0xA4	; 164
    1e28:	f4 e9       	ldi	r31, 0x94	; 148
    1e2a:	00 e0       	ldi	r16, 0x00	; 0
    1e2c:	0b bf       	out	0x3b, r16	; 59
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <__do_copy_data+0x14>
    1e30:	07 90       	elpm	r0, Z+
    1e32:	0d 92       	st	X+, r0
    1e34:	a0 31       	cpi	r26, 0x10	; 16
    1e36:	b1 07       	cpc	r27, r17
    1e38:	d9 f7       	brne	.-10     	; 0x1e30 <__do_copy_data+0x10>

00001e3a <__do_clear_bss>:
    1e3a:	1a e2       	ldi	r17, 0x2A	; 42
    1e3c:	a0 e1       	ldi	r26, 0x10	; 16
    1e3e:	b1 e2       	ldi	r27, 0x21	; 33
    1e40:	01 c0       	rjmp	.+2      	; 0x1e44 <.do_clear_bss_start>

00001e42 <.do_clear_bss_loop>:
    1e42:	1d 92       	st	X+, r1

00001e44 <.do_clear_bss_start>:
    1e44:	a9 3c       	cpi	r26, 0xC9	; 201
    1e46:	b1 07       	cpc	r27, r17
    1e48:	e1 f7       	brne	.-8      	; 0x1e42 <.do_clear_bss_loop>
    1e4a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <main>
    1e4e:	0c 94 50 4a 	jmp	0x94a0	; 0x94a0 <_exit>

00001e52 <__bad_interrupt>:
    1e52:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001e56 <main>:


int main(void) 
{
	// Order dependent inits are numbered (n):
	cli();
    1e56:	f8 94       	cli
	xmega_init();				// (1) xmega setup
    1e58:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <xmega_init>
	tg_init();					// (2) tinyg controller
    1e5c:	0e 94 0c 2c 	call	0x5818	; 0x5818 <tg_init>
	xio_init();					// (3) xmega io subsystem
    1e60:	0e 94 af 29 	call	0x535e	; 0x535e <xio_init>
	cfg_init();					// (4) get config record from eeprom
    1e64:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <cfg_init>
	st_init(); 					// stepper subsystem
    1e68:	0e 94 89 24 	call	0x4912	; 0x4912 <st_init>
	ls_init();					// limit switches
    1e6c:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <ls_init>
	mv_init();					// move buffers
    1e70:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <mv_init>
	mc_init();					// motion control subsystem
    1e74:	0e 94 a3 1b 	call	0x3746	; 0x3746 <mc_init>
	spindle_init();				// spindle controller
    1e78:	0e 94 6d 24 	call	0x48da	; 0x48da <spindle_init>
	en_init();					// encoders
    1e7c:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <en_init>
	gc_init();					// gcode-parser
    1e80:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <gc_init>
	dd_init();					// direct drive commands
    1e84:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <dd_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1e88:	0e 94 6f 28 	call	0x50de	; 0x50de <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1e8c:	e0 ea       	ldi	r30, 0xA0	; 160
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 91 a2 00 	lds	r24, 0x00A2
    1e94:	81 60       	ori	r24, 0x01	; 1
    1e96:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1e98:	80 91 a2 00 	lds	r24, 0x00A2
    1e9c:	82 60       	ori	r24, 0x02	; 2
    1e9e:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1ea0:	80 91 a2 00 	lds	r24, 0x00A2
    1ea4:	84 60       	ori	r24, 0x04	; 4
    1ea6:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1ea8:	78 94       	sei
	for(;;){
		tg_repeater();		// this node receives on USB and repeats to RS485
	}
#else
	for(;;){
		tg_controller();	// this node executes gcode blocks received via RS485
    1eaa:	0e 94 98 2c 	call	0x5930	; 0x5930 <tg_controller>
    1eae:	fd cf       	rjmp	.-6      	; 0x1eaa <main+0x54>

00001eb0 <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1eb0:	80 93 23 21 	sts	0x2123, r24
	gc.plane_axis_1 = axis_1;
    1eb4:	60 93 24 21 	sts	0x2124, r22
	gc.plane_axis_2 = axis_2;
    1eb8:	40 93 25 21 	sts	0x2125, r20
}
    1ebc:	08 95       	ret

00001ebe <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1ebe:	ef 92       	push	r14
    1ec0:	ff 92       	push	r15
    1ec2:	0f 93       	push	r16
    1ec4:	1f 93       	push	r17
    1ec6:	7b 01       	movw	r14, r22
    1ec8:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1eca:	80 91 1e 21 	lds	r24, 0x211E
    1ece:	88 23       	and	r24, r24
    1ed0:	51 f0       	breq	.+20     	; 0x1ee6 <to_millimeters+0x28>
    1ed2:	c8 01       	movw	r24, r16
    1ed4:	b7 01       	movw	r22, r14
    1ed6:	25 e8       	ldi	r18, 0x85	; 133
    1ed8:	32 e4       	ldi	r19, 0x42	; 66
    1eda:	41 e2       	ldi	r20, 0x21	; 33
    1edc:	5d e3       	ldi	r21, 0x3D	; 61
    1ede:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    1ee2:	7b 01       	movw	r14, r22
    1ee4:	8c 01       	movw	r16, r24
}
    1ee6:	b7 01       	movw	r22, r14
    1ee8:	c8 01       	movw	r24, r16
    1eea:	1f 91       	pop	r17
    1eec:	0f 91       	pop	r16
    1eee:	ff 90       	pop	r15
    1ef0:	ef 90       	pop	r14
    1ef2:	08 95       	ret

00001ef4 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    1ef4:	86 e5       	ldi	r24, 0x56	; 86
    1ef6:	e0 e1       	ldi	r30, 0x10	; 16
    1ef8:	f1 e2       	ldi	r31, 0x21	; 33
    1efa:	df 01       	movw	r26, r30
    1efc:	1d 92       	st	X+, r1
    1efe:	8a 95       	dec	r24
    1f00:	e9 f7       	brne	.-6      	; 0x1efc <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 e0       	ldi	r26, 0x00	; 0
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	80 93 26 21 	sts	0x2126, r24
    1f0e:	90 93 27 21 	sts	0x2127, r25
    1f12:	a0 93 28 21 	sts	0x2128, r26
    1f16:	b0 93 29 21 	sts	0x2129, r27
	gc.radius = 0;							// radius value
    1f1a:	80 93 2a 21 	sts	0x212A, r24
    1f1e:	90 93 2b 21 	sts	0x212B, r25
    1f22:	a0 93 2c 21 	sts	0x212C, r26
    1f26:	b0 93 2d 21 	sts	0x212D, r27
	gc.feed_rate = cfg.default_feed_rate;	// Note: is divided by 60 in Grbl
    1f2a:	80 91 55 22 	lds	r24, 0x2255
    1f2e:	90 91 56 22 	lds	r25, 0x2256
    1f32:	a0 91 57 22 	lds	r26, 0x2257
    1f36:	b0 91 58 22 	lds	r27, 0x2258
    1f3a:	80 93 2e 21 	sts	0x212E, r24
    1f3e:	90 93 2f 21 	sts	0x212F, r25
    1f42:	a0 93 30 21 	sts	0x2130, r26
    1f46:	b0 93 31 21 	sts	0x2131, r27
	gc.seek_rate = cfg.default_seek_rate;	// Note: is divided by 60 in Grbl
    1f4a:	80 91 59 22 	lds	r24, 0x2259
    1f4e:	90 91 5a 22 	lds	r25, 0x225A
    1f52:	a0 91 5b 22 	lds	r26, 0x225B
    1f56:	b0 91 5c 22 	lds	r27, 0x225C
    1f5a:	80 93 32 21 	sts	0x2132, r24
    1f5e:	90 93 33 21 	sts	0x2133, r25
    1f62:	a0 93 34 21 	sts	0x2134, r26
    1f66:	b0 93 35 21 	sts	0x2135, r27

	gc.absolute_mode = TRUE;
    1f6a:	21 e0       	ldi	r18, 0x01	; 1
    1f6c:	20 93 1f 21 	sts	0x211F, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a0 e8       	ldi	r26, 0x80	; 128
    1f76:	bf eb       	ldi	r27, 0xBF	; 191
    1f78:	80 93 3a 21 	sts	0x213A, r24
    1f7c:	90 93 3b 21 	sts	0x213B, r25
    1f80:	a0 93 3c 21 	sts	0x213C, r26
    1f84:	b0 93 3d 21 	sts	0x213D, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    1f88:	10 92 20 21 	sts	0x2120, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    1f8c:	10 92 22 21 	sts	0x2122, r1
	gc.next_action = NEXT_ACTION_NONE; 		// no operation
    1f90:	10 92 1a 21 	sts	0x211A, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1f94:	10 92 23 21 	sts	0x2123, r1
	gc.plane_axis_1 = axis_1;
    1f98:	20 93 24 21 	sts	0x2124, r18
	gc.plane_axis_2 = axis_2;
    1f9c:	82 e0       	ldi	r24, 0x02	; 2
    1f9e:	80 93 25 21 	sts	0x2125, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_NONE; 		// no operation

	select_plane(X, Y, Z);					// default planes, 0, 1 and 2
}
    1fa2:	08 95       	ret

00001fa4 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check gc.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    1fa4:	4f 92       	push	r4
    1fa6:	5f 92       	push	r5
    1fa8:	6f 92       	push	r6
    1faa:	7f 92       	push	r7
    1fac:	8f 92       	push	r8
    1fae:	9f 92       	push	r9
    1fb0:	af 92       	push	r10
    1fb2:	bf 92       	push	r11
    1fb4:	cf 92       	push	r12
    1fb6:	df 92       	push	r13
    1fb8:	ef 92       	push	r14
    1fba:	ff 92       	push	r15
    1fbc:	0f 93       	push	r16
    1fbe:	1f 93       	push	r17
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	0f 92       	push	r0
    1fc6:	0f 92       	push	r0
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	7c 01       	movw	r14, r24
    1fce:	3b 01       	movw	r6, r22
    1fd0:	2a 01       	movw	r4, r20
    1fd2:	49 01       	movw	r8, r18
    1fd4:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    1fd6:	d8 01       	movw	r26, r16
    1fd8:	ed 91       	ld	r30, X+
    1fda:	fc 91       	ld	r31, X
    1fdc:	e2 0f       	add	r30, r18
    1fde:	f3 1f       	adc	r31, r19
    1fe0:	80 81       	ld	r24, Z
    1fe2:	88 23       	and	r24, r24
    1fe4:	51 f0       	breq	.+20     	; 0x1ffa <_gc_next_statement+0x56>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    1fe6:	f7 01       	movw	r30, r14
    1fe8:	80 83       	st	Z, r24
	if(!isupper(*letter)) {
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	0e 94 cc 48 	call	0x9198	; 0x9198 <isupper>
    1ff0:	89 2b       	or	r24, r25
    1ff2:	31 f4       	brne	.+12     	; 0x2000 <_gc_next_statement+0x5c>
		gc.status = TG_EXPECTED_COMMAND_LETTER;
    1ff4:	8d e0       	ldi	r24, 0x0D	; 13
    1ff6:	80 93 10 21 	sts	0x2110, r24
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	34 c0       	rjmp	.+104    	; 0x2068 <_gc_next_statement+0xc4>
		return(FALSE);
	}
	(*i)++;
    2000:	d8 01       	movw	r26, r16
    2002:	8d 91       	ld	r24, X+
    2004:	9c 91       	ld	r25, X
    2006:	11 97       	sbiw	r26, 0x01	; 1
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	8d 93       	st	X+, r24
    200c:	9c 93       	st	X, r25
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    200e:	84 01       	movw	r16, r8
    2010:	08 0f       	add	r16, r24
    2012:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    2014:	c8 01       	movw	r24, r16
    2016:	be 01       	movw	r22, r28
    2018:	6f 5f       	subi	r22, 0xFF	; 255
    201a:	7f 4f       	sbci	r23, 0xFF	; 255
    201c:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <strtod>
    2020:	6b 01       	movw	r12, r22
    2022:	7c 01       	movw	r14, r24
    2024:	f3 01       	movw	r30, r6
    2026:	60 83       	st	Z, r22
    2028:	71 83       	std	Z+1, r23	; 0x01
    202a:	82 83       	std	Z+2, r24	; 0x02
    202c:	93 83       	std	Z+3, r25	; 0x03
	if(end == start) { 
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	9a 81       	ldd	r25, Y+2	; 0x02
    2032:	80 17       	cp	r24, r16
    2034:	91 07       	cpc	r25, r17
    2036:	11 f4       	brne	.+4      	; 0x203c <_gc_next_statement+0x98>
		gc.status = TG_BAD_NUMBER_FORMAT; 
    2038:	80 e1       	ldi	r24, 0x10	; 16
    203a:	dd cf       	rjmp	.-70     	; 0x1ff6 <_gc_next_statement+0x52>
		return(FALSE); 
	};
	*i = end - buf;
    203c:	88 19       	sub	r24, r8
    203e:	99 09       	sbc	r25, r9
    2040:	d5 01       	movw	r26, r10
    2042:	8d 93       	st	X+, r24
    2044:	9c 93       	st	X, r25
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    2046:	c7 01       	movw	r24, r14
    2048:	b6 01       	movw	r22, r12
    204a:	0e 94 cd 45 	call	0x8b9a	; 0x8b9a <trunc>
    204e:	9b 01       	movw	r18, r22
    2050:	ac 01       	movw	r20, r24
    2052:	c7 01       	movw	r24, r14
    2054:	b6 01       	movw	r22, r12
    2056:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    205a:	f2 01       	movw	r30, r4
    205c:	60 83       	st	Z, r22
    205e:	71 83       	std	Z+1, r23	; 0x01
    2060:	82 83       	std	Z+2, r24	; 0x02
    2062:	93 83       	std	Z+3, r25	; 0x03
    2064:	21 e0       	ldi	r18, 0x01	; 1
    2066:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    2068:	c9 01       	movw	r24, r18
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	1f 91       	pop	r17
    2074:	0f 91       	pop	r16
    2076:	ff 90       	pop	r15
    2078:	ef 90       	pop	r14
    207a:	df 90       	pop	r13
    207c:	cf 90       	pop	r12
    207e:	bf 90       	pop	r11
    2080:	af 90       	pop	r10
    2082:	9f 90       	pop	r9
    2084:	8f 90       	pop	r8
    2086:	7f 90       	pop	r7
    2088:	6f 90       	pop	r6
    208a:	5f 90       	pop	r5
    208c:	4f 90       	pop	r4
    208e:	08 95       	ret

00002090 <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    2090:	af 92       	push	r10
    2092:	bf 92       	push	r11
    2094:	cf 92       	push	r12
    2096:	df 92       	push	r13
    2098:	ef 92       	push	r14
    209a:	ff 92       	push	r15
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	79 01       	movw	r14, r18
    20a2:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    20a4:	5f 77       	andi	r21, 0x7F	; 127
    20a6:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    20aa:	0e 94 22 42 	call	0x8444	; 0x8444 <atan>
    20ae:	5b 01       	movw	r10, r22
    20b0:	6c 01       	movw	r12, r24

	if (y>0) {
    20b2:	c8 01       	movw	r24, r16
    20b4:	b7 01       	movw	r22, r14
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	0e 94 4d 44 	call	0x889a	; 0x889a <__gesf2>
    20c2:	18 16       	cp	r1, r24
    20c4:	cc f0       	brlt	.+50     	; 0x20f8 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    20c6:	c6 01       	movw	r24, r12
    20c8:	b5 01       	movw	r22, r10
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	50 e0       	ldi	r21, 0x00	; 0
    20d2:	0e 94 4d 44 	call	0x889a	; 0x889a <__gesf2>
    20d6:	18 16       	cp	r1, r24
    20d8:	2c f4       	brge	.+10     	; 0x20e4 <theta+0x54>
	    {
			return(M_PI-theta);
    20da:	6b ed       	ldi	r22, 0xDB	; 219
    20dc:	7f e0       	ldi	r23, 0x0F	; 15
    20de:	89 e4       	ldi	r24, 0x49	; 73
    20e0:	90 e4       	ldi	r25, 0x40	; 64
    20e2:	04 c0       	rjmp	.+8      	; 0x20ec <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    20e4:	6b ed       	ldi	r22, 0xDB	; 219
    20e6:	7f e0       	ldi	r23, 0x0F	; 15
    20e8:	89 e4       	ldi	r24, 0x49	; 73
    20ea:	90 ec       	ldi	r25, 0xC0	; 192
    20ec:	a6 01       	movw	r20, r12
    20ee:	95 01       	movw	r18, r10
    20f0:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    20f4:	5b 01       	movw	r10, r22
    20f6:	6c 01       	movw	r12, r24
		}
	}
}
    20f8:	b5 01       	movw	r22, r10
    20fa:	c6 01       	movw	r24, r12
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	ff 90       	pop	r15
    2102:	ef 90       	pop	r14
    2104:	df 90       	pop	r13
    2106:	cf 90       	pop	r12
    2108:	bf 90       	pop	r11
    210a:	af 90       	pop	r10
    210c:	08 95       	ret

0000210e <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    210e:	2f 92       	push	r2
    2110:	3f 92       	push	r3
    2112:	4f 92       	push	r4
    2114:	5f 92       	push	r5
    2116:	6f 92       	push	r6
    2118:	7f 92       	push	r7
    211a:	8f 92       	push	r8
    211c:	9f 92       	push	r9
    211e:	af 92       	push	r10
    2120:	bf 92       	push	r11
    2122:	cf 92       	push	r12
    2124:	df 92       	push	r13
    2126:	ef 92       	push	r14
    2128:	ff 92       	push	r15
    212a:	0f 93       	push	r16
    212c:	1f 93       	push	r17
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	68 97       	sbiw	r28, 0x18	; 24
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	5c 01       	movw	r10, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    213e:	19 82       	std	Y+1, r1	; 0x01
    2140:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    2142:	ea e4       	ldi	r30, 0x4A	; 74
    2144:	f1 e2       	ldi	r31, 0x21	; 33
    2146:	8c e0       	ldi	r24, 0x0C	; 12
    2148:	df 01       	movw	r26, r30
    214a:	28 2f       	mov	r18, r24
    214c:	1d 92       	st	X+, r1
    214e:	2a 95       	dec	r18
    2150:	e9 f7       	brne	.-6      	; 0x214c <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    2152:	3c 96       	adiw	r30, 0x0c	; 12
    2154:	df 01       	movw	r26, r30
    2156:	1d 92       	st	X+, r1
    2158:	8a 95       	dec	r24
    215a:	e9 f7       	brne	.-6      	; 0x2156 <gc_execute_block+0x48>

	gc.status = TG_OK;
    215c:	10 92 10 21 	sts	0x2110, r1
	gc.set_origin_mode = 0;	// you are not in set origin mode unless you say you are
    2160:	10 92 21 21 	sts	0x2121, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2164:	4e 01       	movw	r8, r28
    2166:	08 94       	sec
    2168:	81 1c       	adc	r8, r1
    216a:	91 1c       	adc	r9, r1

			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    216c:	ff 24       	eor	r15, r15
    216e:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: gc.status = TG_UNSUPPORTED_STATEMENT;
    2170:	be e0       	ldi	r27, 0x0E	; 14
    2172:	cb 2e       	mov	r12, r27
				break;

			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2174:	a2 e0       	ldi	r26, 0x02	; 2
    2176:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    2178:	77 24       	eor	r7, r7
    217a:	7a 94       	dec	r7

					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    217c:	f3 e0       	ldi	r31, 0x03	; 3
    217e:	df 2e       	mov	r13, r31

					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2180:	e4 e0       	ldi	r30, 0x04	; 4
    2182:	6e 2e       	mov	r6, r30
    2184:	0a c1       	rjmp	.+532    	; 0x239a <gc_execute_block+0x28c>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;	// you are not in set origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    2186:	80 91 11 21 	lds	r24, 0x2111
    218a:	8d 34       	cpi	r24, 0x4D	; 77
    218c:	09 f4       	brne	.+2      	; 0x2190 <gc_execute_block+0x82>
    218e:	be c0       	rjmp	.+380    	; 0x230c <gc_execute_block+0x1fe>
    2190:	84 35       	cpi	r24, 0x54	; 84
    2192:	09 f4       	brne	.+2      	; 0x2196 <gc_execute_block+0x88>
    2194:	f0 c0       	rjmp	.+480    	; 0x2376 <gc_execute_block+0x268>
    2196:	87 34       	cpi	r24, 0x47	; 71
    2198:	09 f0       	breq	.+2      	; 0x219c <gc_execute_block+0x8e>
    219a:	fb c0       	rjmp	.+502    	; 0x2392 <gc_execute_block+0x284>
			case 'G':
				switch((int)gc.value) {
    219c:	60 91 12 21 	lds	r22, 0x2112
    21a0:	70 91 13 21 	lds	r23, 0x2113
    21a4:	80 91 14 21 	lds	r24, 0x2114
    21a8:	90 91 15 21 	lds	r25, 0x2115
    21ac:	0e 94 cc 42 	call	0x8598	; 0x8598 <__fixsfsi>
    21b0:	65 31       	cpi	r22, 0x15	; 21
    21b2:	71 05       	cpc	r23, r1
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <gc_execute_block+0xaa>
    21b6:	8f c0       	rjmp	.+286    	; 0x22d6 <gc_execute_block+0x1c8>
    21b8:	66 31       	cpi	r22, 0x16	; 22
    21ba:	71 05       	cpc	r23, r1
    21bc:	84 f5       	brge	.+96     	; 0x221e <gc_execute_block+0x110>
    21be:	64 30       	cpi	r22, 0x04	; 4
    21c0:	71 05       	cpc	r23, r1
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <gc_execute_block+0xb8>
    21c4:	6d c0       	rjmp	.+218    	; 0x22a0 <gc_execute_block+0x192>
    21c6:	65 30       	cpi	r22, 0x05	; 5
    21c8:	71 05       	cpc	r23, r1
    21ca:	a4 f4       	brge	.+40     	; 0x21f4 <gc_execute_block+0xe6>
    21cc:	61 30       	cpi	r22, 0x01	; 1
    21ce:	71 05       	cpc	r23, r1
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <gc_execute_block+0xc6>
    21d2:	57 c0       	rjmp	.+174    	; 0x2282 <gc_execute_block+0x174>
    21d4:	62 30       	cpi	r22, 0x02	; 2
    21d6:	71 05       	cpc	r23, r1
    21d8:	24 f4       	brge	.+8      	; 0x21e2 <gc_execute_block+0xd4>
    21da:	67 2b       	or	r22, r23
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <gc_execute_block+0xd2>
    21de:	4c c0       	rjmp	.+152    	; 0x2278 <gc_execute_block+0x16a>
    21e0:	c7 c0       	rjmp	.+398    	; 0x2370 <gc_execute_block+0x262>
    21e2:	62 30       	cpi	r22, 0x02	; 2
    21e4:	71 05       	cpc	r23, r1
    21e6:	09 f4       	brne	.+2      	; 0x21ea <gc_execute_block+0xdc>
    21e8:	51 c0       	rjmp	.+162    	; 0x228c <gc_execute_block+0x17e>
    21ea:	63 30       	cpi	r22, 0x03	; 3
    21ec:	71 05       	cpc	r23, r1
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <gc_execute_block+0xe4>
    21f0:	bf c0       	rjmp	.+382    	; 0x2370 <gc_execute_block+0x262>
    21f2:	51 c0       	rjmp	.+162    	; 0x2296 <gc_execute_block+0x188>
    21f4:	62 31       	cpi	r22, 0x12	; 18
    21f6:	71 05       	cpc	r23, r1
    21f8:	09 f4       	brne	.+2      	; 0x21fc <gc_execute_block+0xee>
    21fa:	5c c0       	rjmp	.+184    	; 0x22b4 <gc_execute_block+0x1a6>
    21fc:	63 31       	cpi	r22, 0x13	; 19
    21fe:	71 05       	cpc	r23, r1
    2200:	2c f4       	brge	.+10     	; 0x220c <gc_execute_block+0xfe>
    2202:	61 31       	cpi	r22, 0x11	; 17
    2204:	71 05       	cpc	r23, r1
    2206:	09 f0       	breq	.+2      	; 0x220a <gc_execute_block+0xfc>
    2208:	b3 c0       	rjmp	.+358    	; 0x2370 <gc_execute_block+0x262>
    220a:	4d c0       	rjmp	.+154    	; 0x22a6 <gc_execute_block+0x198>
    220c:	63 31       	cpi	r22, 0x13	; 19
    220e:	71 05       	cpc	r23, r1
    2210:	09 f4       	brne	.+2      	; 0x2214 <gc_execute_block+0x106>
    2212:	57 c0       	rjmp	.+174    	; 0x22c2 <gc_execute_block+0x1b4>
    2214:	64 31       	cpi	r22, 0x14	; 20
    2216:	71 05       	cpc	r23, r1
    2218:	09 f0       	breq	.+2      	; 0x221c <gc_execute_block+0x10e>
    221a:	aa c0       	rjmp	.+340    	; 0x2370 <gc_execute_block+0x262>
    221c:	59 c0       	rjmp	.+178    	; 0x22d0 <gc_execute_block+0x1c2>
    221e:	6a 35       	cpi	r22, 0x5A	; 90
    2220:	71 05       	cpc	r23, r1
    2222:	09 f4       	brne	.+2      	; 0x2226 <gc_execute_block+0x118>
    2224:	64 c0       	rjmp	.+200    	; 0x22ee <gc_execute_block+0x1e0>
    2226:	6b 35       	cpi	r22, 0x5B	; 91
    2228:	71 05       	cpc	r23, r1
    222a:	ac f4       	brge	.+42     	; 0x2256 <gc_execute_block+0x148>
    222c:	6e 31       	cpi	r22, 0x1E	; 30
    222e:	71 05       	cpc	r23, r1
    2230:	09 f4       	brne	.+2      	; 0x2234 <gc_execute_block+0x126>
    2232:	54 c0       	rjmp	.+168    	; 0x22dc <gc_execute_block+0x1ce>
    2234:	6f 31       	cpi	r22, 0x1F	; 31
    2236:	71 05       	cpc	r23, r1
    2238:	2c f4       	brge	.+10     	; 0x2244 <gc_execute_block+0x136>
    223a:	6c 31       	cpi	r22, 0x1C	; 28
    223c:	71 05       	cpc	r23, r1
    223e:	09 f0       	breq	.+2      	; 0x2242 <gc_execute_block+0x134>
    2240:	97 c0       	rjmp	.+302    	; 0x2370 <gc_execute_block+0x262>
    2242:	4c c0       	rjmp	.+152    	; 0x22dc <gc_execute_block+0x1ce>
    2244:	65 33       	cpi	r22, 0x35	; 53
    2246:	71 05       	cpc	r23, r1
    2248:	09 f4       	brne	.+2      	; 0x224c <gc_execute_block+0x13e>
    224a:	4b c0       	rjmp	.+150    	; 0x22e2 <gc_execute_block+0x1d4>
    224c:	60 35       	cpi	r22, 0x50	; 80
    224e:	71 05       	cpc	r23, r1
    2250:	09 f0       	breq	.+2      	; 0x2254 <gc_execute_block+0x146>
    2252:	8e c0       	rjmp	.+284    	; 0x2370 <gc_execute_block+0x262>
    2254:	49 c0       	rjmp	.+146    	; 0x22e8 <gc_execute_block+0x1da>
    2256:	6c 35       	cpi	r22, 0x5C	; 92
    2258:	71 05       	cpc	r23, r1
    225a:	09 f4       	brne	.+2      	; 0x225e <gc_execute_block+0x150>
    225c:	4e c0       	rjmp	.+156    	; 0x22fa <gc_execute_block+0x1ec>
    225e:	6c 35       	cpi	r22, 0x5C	; 92
    2260:	71 05       	cpc	r23, r1
    2262:	0c f4       	brge	.+2      	; 0x2266 <gc_execute_block+0x158>
    2264:	47 c0       	rjmp	.+142    	; 0x22f4 <gc_execute_block+0x1e6>
    2266:	6d 35       	cpi	r22, 0x5D	; 93
    2268:	71 05       	cpc	r23, r1
    226a:	09 f4       	brne	.+2      	; 0x226e <gc_execute_block+0x160>
    226c:	49 c0       	rjmp	.+146    	; 0x2300 <gc_execute_block+0x1f2>
    226e:	6e 35       	cpi	r22, 0x5E	; 94
    2270:	71 05       	cpc	r23, r1
    2272:	09 f0       	breq	.+2      	; 0x2276 <gc_execute_block+0x168>
    2274:	7d c0       	rjmp	.+250    	; 0x2370 <gc_execute_block+0x262>
    2276:	47 c0       	rjmp	.+142    	; 0x2306 <gc_execute_block+0x1f8>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    2278:	f0 92 1a 21 	sts	0x211A, r15
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    227c:	10 92 1c 21 	sts	0x211C, r1
    2280:	88 c0       	rjmp	.+272    	; 0x2392 <gc_execute_block+0x284>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    2282:	f0 92 1a 21 	sts	0x211A, r15
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    2286:	f0 92 1c 21 	sts	0x211C, r15
    228a:	83 c0       	rjmp	.+262    	; 0x2392 <gc_execute_block+0x284>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    228c:	f0 92 1a 21 	sts	0x211A, r15
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    2290:	e0 92 1c 21 	sts	0x211C, r14
    2294:	7e c0       	rjmp	.+252    	; 0x2392 <gc_execute_block+0x284>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    2296:	f0 92 1a 21 	sts	0x211A, r15
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    229a:	d0 92 1c 21 	sts	0x211C, r13
    229e:	79 c0       	rjmp	.+242    	; 0x2392 <gc_execute_block+0x284>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    22a0:	e0 92 1a 21 	sts	0x211A, r14
    22a4:	76 c0       	rjmp	.+236    	; 0x2392 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22a6:	10 92 23 21 	sts	0x2123, r1
	gc.plane_axis_1 = axis_1;
    22aa:	f0 92 24 21 	sts	0x2124, r15
	gc.plane_axis_2 = axis_2;
    22ae:	e0 92 25 21 	sts	0x2125, r14
    22b2:	6f c0       	rjmp	.+222    	; 0x2392 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22b4:	10 92 23 21 	sts	0x2123, r1
	gc.plane_axis_1 = axis_1;
    22b8:	e0 92 24 21 	sts	0x2124, r14
	gc.plane_axis_2 = axis_2;
    22bc:	f0 92 25 21 	sts	0x2125, r15
    22c0:	68 c0       	rjmp	.+208    	; 0x2392 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22c2:	f0 92 23 21 	sts	0x2123, r15
	gc.plane_axis_1 = axis_1;
    22c6:	e0 92 24 21 	sts	0x2124, r14
	gc.plane_axis_2 = axis_2;
    22ca:	10 92 25 21 	sts	0x2125, r1
    22ce:	61 c0       	rjmp	.+194    	; 0x2392 <gc_execute_block+0x284>

					case 17: { select_plane(X, Y, Z); break; }
					case 18: { select_plane(X, Z, Y); break; }
					case 19: { select_plane(Y, Z, X); break; }

					case 20: { gc.inches_mode = TRUE; break; }
    22d0:	f0 92 1e 21 	sts	0x211E, r15
    22d4:	5e c0       	rjmp	.+188    	; 0x2392 <gc_execute_block+0x284>
					case 21: { gc.inches_mode = FALSE; break; }
    22d6:	10 92 1e 21 	sts	0x211E, r1
    22da:	5b c0       	rjmp	.+182    	; 0x2392 <gc_execute_block+0x284>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    22dc:	d0 92 1a 21 	sts	0x211A, r13
    22e0:	58 c0       	rjmp	.+176    	; 0x2392 <gc_execute_block+0x284>

					case 53: { gc.absolute_override = TRUE; break; }
    22e2:	f0 92 22 21 	sts	0x2122, r15
    22e6:	55 c0       	rjmp	.+170    	; 0x2392 <gc_execute_block+0x284>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    22e8:	60 92 1c 21 	sts	0x211C, r6
    22ec:	52 c0       	rjmp	.+164    	; 0x2392 <gc_execute_block+0x284>
					case 90: { gc.absolute_mode = TRUE; break; }
    22ee:	f0 92 1f 21 	sts	0x211F, r15
    22f2:	4f c0       	rjmp	.+158    	; 0x2392 <gc_execute_block+0x284>
					case 91: { gc.absolute_mode = FALSE; break; }
    22f4:	10 92 1f 21 	sts	0x211F, r1
    22f8:	4c c0       	rjmp	.+152    	; 0x2392 <gc_execute_block+0x284>
					case 92: { gc.set_origin_mode = TRUE; break; }
    22fa:	f0 92 21 21 	sts	0x2121, r15
    22fe:	49 c0       	rjmp	.+146    	; 0x2392 <gc_execute_block+0x284>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    2300:	f0 92 1d 21 	sts	0x211D, r15
    2304:	46 c0       	rjmp	.+140    	; 0x2392 <gc_execute_block+0x284>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2306:	10 92 1d 21 	sts	0x211D, r1
    230a:	43 c0       	rjmp	.+134    	; 0x2392 <gc_execute_block+0x284>
					default: gc.status = TG_UNSUPPORTED_STATEMENT;
				}
				break;

			case 'M':
				switch((int)gc.value) {
    230c:	60 91 12 21 	lds	r22, 0x2112
    2310:	70 91 13 21 	lds	r23, 0x2113
    2314:	80 91 14 21 	lds	r24, 0x2114
    2318:	90 91 15 21 	lds	r25, 0x2115
    231c:	0e 94 cc 42 	call	0x8598	; 0x8598 <__fixsfsi>
    2320:	63 30       	cpi	r22, 0x03	; 3
    2322:	71 05       	cpc	r23, r1
    2324:	e1 f0       	breq	.+56     	; 0x235e <gc_execute_block+0x250>
    2326:	64 30       	cpi	r22, 0x04	; 4
    2328:	71 05       	cpc	r23, r1
    232a:	34 f4       	brge	.+12     	; 0x2338 <gc_execute_block+0x22a>
    232c:	77 fd       	sbrc	r23, 7
    232e:	20 c0       	rjmp	.+64     	; 0x2370 <gc_execute_block+0x262>
    2330:	62 30       	cpi	r22, 0x02	; 2
    2332:	71 05       	cpc	r23, r1
    2334:	74 f0       	brlt	.+28     	; 0x2352 <gc_execute_block+0x244>
    2336:	10 c0       	rjmp	.+32     	; 0x2358 <gc_execute_block+0x24a>
    2338:	65 30       	cpi	r22, 0x05	; 5
    233a:	71 05       	cpc	r23, r1
    233c:	b1 f0       	breq	.+44     	; 0x236a <gc_execute_block+0x25c>
    233e:	65 30       	cpi	r22, 0x05	; 5
    2340:	71 05       	cpc	r23, r1
    2342:	84 f0       	brlt	.+32     	; 0x2364 <gc_execute_block+0x256>
    2344:	6e 31       	cpi	r22, 0x1E	; 30
    2346:	71 05       	cpc	r23, r1
    2348:	39 f0       	breq	.+14     	; 0x2358 <gc_execute_block+0x24a>
    234a:	6c 33       	cpi	r22, 0x3C	; 60
    234c:	71 05       	cpc	r23, r1
    234e:	81 f4       	brne	.+32     	; 0x2370 <gc_execute_block+0x262>
    2350:	03 c0       	rjmp	.+6      	; 0x2358 <gc_execute_block+0x24a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    2352:	f0 92 1b 21 	sts	0x211B, r15
    2356:	1d c0       	rjmp	.+58     	; 0x2392 <gc_execute_block+0x284>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2358:	e0 92 1b 21 	sts	0x211B, r14
    235c:	1a c0       	rjmp	.+52     	; 0x2392 <gc_execute_block+0x284>
					case 3: gc.spindle_direction = 1; break;
    235e:	f0 92 63 21 	sts	0x2163, r15
    2362:	17 c0       	rjmp	.+46     	; 0x2392 <gc_execute_block+0x284>
					case 4: gc.spindle_direction = -1; break;
    2364:	70 92 63 21 	sts	0x2163, r7
    2368:	14 c0       	rjmp	.+40     	; 0x2392 <gc_execute_block+0x284>
					case 5: gc.spindle_direction = 0; break;
    236a:	10 92 63 21 	sts	0x2163, r1
    236e:	11 c0       	rjmp	.+34     	; 0x2392 <gc_execute_block+0x284>
        			default: gc.status = TG_UNSUPPORTED_STATEMENT;
    2370:	c0 92 10 21 	sts	0x2110, r12
    2374:	0e c0       	rjmp	.+28     	; 0x2392 <gc_execute_block+0x284>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    2376:	60 91 12 21 	lds	r22, 0x2112
    237a:	70 91 13 21 	lds	r23, 0x2113
    237e:	80 91 14 21 	lds	r24, 0x2114
    2382:	90 91 15 21 	lds	r25, 0x2115
    2386:	0e 94 cd 45 	call	0x8b9a	; 0x8b9a <trunc>
    238a:	0e 94 d1 42 	call	0x85a2	; 0x85a2 <__fixunssfsi>
    238e:	60 93 62 21 	sts	0x2162, r22
		}
		if(gc.status) {
    2392:	80 91 10 21 	lds	r24, 0x2110
    2396:	88 23       	and	r24, r24
    2398:	69 f4       	brne	.+26     	; 0x23b4 <gc_execute_block+0x2a6>

	gc.status = TG_OK;
	gc.set_origin_mode = 0;	// you are not in set origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    239a:	81 e1       	ldi	r24, 0x11	; 17
    239c:	91 e2       	ldi	r25, 0x21	; 33
    239e:	62 e1       	ldi	r22, 0x12	; 18
    23a0:	71 e2       	ldi	r23, 0x21	; 33
    23a2:	46 e1       	ldi	r20, 0x16	; 22
    23a4:	51 e2       	ldi	r21, 0x21	; 33
    23a6:	95 01       	movw	r18, r10
    23a8:	84 01       	movw	r16, r8
    23aa:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_gc_next_statement>
    23ae:	89 2b       	or	r24, r25
    23b0:	09 f0       	breq	.+2      	; 0x23b4 <gc_execute_block+0x2a6>
    23b2:	e9 ce       	rjmp	.-558    	; 0x2186 <gc_execute_block+0x78>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    23b4:	80 91 10 21 	lds	r24, 0x2110
    23b8:	88 23       	and	r24, r24
    23ba:	09 f0       	breq	.+2      	; 0x23be <gc_execute_block+0x2b0>
    23bc:	c2 c3       	rjmp	.+1924   	; 0x2b42 <gc_execute_block+0xa34>
		return(gc.status); 
	}

	i = 0;
    23be:	19 82       	std	Y+1, r1	; 0x01
    23c0:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    23c2:	e6 e5       	ldi	r30, 0x56	; 86
    23c4:	f1 e2       	ldi	r31, 0x21	; 33
    23c6:	8c e0       	ldi	r24, 0x0C	; 12
    23c8:	df 01       	movw	r26, r30
    23ca:	1d 92       	st	X+, r1
    23cc:	8a 95       	dec	r24
    23ce:	e9 f7       	brne	.-6      	; 0x23ca <gc_execute_block+0x2bc>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = position
    23d0:	df 01       	movw	r26, r30
    23d2:	1c 97       	sbiw	r26, 0x0c	; 12
    23d4:	78 97       	sbiw	r30, 0x18	; 24
    23d6:	8c e0       	ldi	r24, 0x0C	; 12
    23d8:	01 90       	ld	r0, Z+
    23da:	0d 92       	st	X+, r0
    23dc:	81 50       	subi	r24, 0x01	; 1
    23de:	e1 f7       	brne	.-8      	; 0x23d8 <gc_execute_block+0x2ca>
    23e0:	cc c0       	rjmp	.+408    	; 0x257a <gc_execute_block+0x46c>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    23e2:	c0 90 12 21 	lds	r12, 0x2112
    23e6:	d0 90 13 21 	lds	r13, 0x2113
    23ea:	e0 90 14 21 	lds	r14, 0x2114
    23ee:	f0 90 15 21 	lds	r15, 0x2115
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    23f2:	80 91 1e 21 	lds	r24, 0x211E
    23f6:	88 23       	and	r24, r24
    23f8:	19 f4       	brne	.+6      	; 0x2400 <gc_execute_block+0x2f2>
    23fa:	a7 01       	movw	r20, r14
    23fc:	96 01       	movw	r18, r12
    23fe:	0a c0       	rjmp	.+20     	; 0x2414 <gc_execute_block+0x306>
    2400:	c7 01       	movw	r24, r14
    2402:	b6 01       	movw	r22, r12
    2404:	25 e8       	ldi	r18, 0x85	; 133
    2406:	32 e4       	ldi	r19, 0x42	; 66
    2408:	41 e2       	ldi	r20, 0x21	; 33
    240a:	5d e3       	ldi	r21, 0x3D	; 61
    240c:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    2410:	9b 01       	movw	r18, r22
    2412:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2414:	20 93 36 21 	sts	0x2136, r18
    2418:	30 93 37 21 	sts	0x2137, r19
    241c:	40 93 38 21 	sts	0x2138, r20
    2420:	50 93 39 21 	sts	0x2139, r21
		switch(gc.letter) {
    2424:	00 91 11 21 	lds	r16, 0x2111
    2428:	00 35       	cpi	r16, 0x50	; 80
    242a:	09 f4       	brne	.+2      	; 0x242e <gc_execute_block+0x320>
    242c:	47 c0       	rjmp	.+142    	; 0x24bc <gc_execute_block+0x3ae>
    242e:	01 35       	cpi	r16, 0x51	; 81
    2430:	58 f4       	brcc	.+22     	; 0x2448 <gc_execute_block+0x33a>
    2432:	06 34       	cpi	r16, 0x46	; 70
    2434:	c1 f0       	breq	.+48     	; 0x2466 <gc_execute_block+0x358>
    2436:	06 34       	cpi	r16, 0x46	; 70
    2438:	08 f4       	brcc	.+2      	; 0x243c <gc_execute_block+0x32e>
    243a:	a7 c0       	rjmp	.+334    	; 0x258a <gc_execute_block+0x47c>
    243c:	80 2f       	mov	r24, r16
    243e:	89 54       	subi	r24, 0x49	; 73
    2440:	83 30       	cpi	r24, 0x03	; 3
    2442:	08 f0       	brcs	.+2      	; 0x2446 <gc_execute_block+0x338>
    2444:	a2 c0       	rjmp	.+324    	; 0x258a <gc_execute_block+0x47c>
    2446:	2d c0       	rjmp	.+90     	; 0x24a2 <gc_execute_block+0x394>
    2448:	03 35       	cpi	r16, 0x53	; 83
    244a:	09 f4       	brne	.+2      	; 0x244e <gc_execute_block+0x340>
    244c:	4b c0       	rjmp	.+150    	; 0x24e4 <gc_execute_block+0x3d6>
    244e:	04 35       	cpi	r16, 0x54	; 84
    2450:	20 f4       	brcc	.+8      	; 0x245a <gc_execute_block+0x34c>
    2452:	02 35       	cpi	r16, 0x52	; 82
    2454:	09 f0       	breq	.+2      	; 0x2458 <gc_execute_block+0x34a>
    2456:	99 c0       	rjmp	.+306    	; 0x258a <gc_execute_block+0x47c>
    2458:	3a c0       	rjmp	.+116    	; 0x24ce <gc_execute_block+0x3c0>
    245a:	80 2f       	mov	r24, r16
    245c:	88 55       	subi	r24, 0x58	; 88
    245e:	83 30       	cpi	r24, 0x03	; 3
    2460:	08 f0       	brcs	.+2      	; 0x2464 <gc_execute_block+0x356>
    2462:	93 c0       	rjmp	.+294    	; 0x258a <gc_execute_block+0x47c>
    2464:	48 c0       	rjmp	.+144    	; 0x24f6 <gc_execute_block+0x3e8>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    2466:	80 91 1d 21 	lds	r24, 0x211D
    246a:	88 23       	and	r24, r24
    246c:	49 f0       	breq	.+18     	; 0x2480 <gc_execute_block+0x372>
					gc.inverse_feed_rate = gc.unit_converted_value; // secs per motion for this motion only
    246e:	20 93 3a 21 	sts	0x213A, r18
    2472:	30 93 3b 21 	sts	0x213B, r19
    2476:	40 93 3c 21 	sts	0x213C, r20
    247a:	50 93 3d 21 	sts	0x213D, r21
    247e:	85 c0       	rjmp	.+266    	; 0x258a <gc_execute_block+0x47c>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    2480:	ca 01       	movw	r24, r20
    2482:	b9 01       	movw	r22, r18
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e7       	ldi	r20, 0x70	; 112
    248a:	52 e4       	ldi	r21, 0x42	; 66
    248c:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    2490:	60 93 2e 21 	sts	0x212E, r22
    2494:	70 93 2f 21 	sts	0x212F, r23
    2498:	80 93 30 21 	sts	0x2130, r24
    249c:	90 93 31 21 	sts	0x2131, r25
    24a0:	74 c0       	rjmp	.+232    	; 0x258a <gc_execute_block+0x47c>
				}
				break;
			case 'I': case 'J': case 'K': {
				gc.offset[gc.letter-'I'] = gc.unit_converted_value; 
    24a2:	e0 2f       	mov	r30, r16
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	ee 0f       	add	r30, r30
    24a8:	ff 1f       	adc	r31, r31
    24aa:	ee 0f       	add	r30, r30
    24ac:	ff 1f       	adc	r31, r31
    24ae:	ee 5c       	subi	r30, 0xCE	; 206
    24b0:	ff 4d       	sbci	r31, 0xDF	; 223
    24b2:	20 83       	st	Z, r18
    24b4:	31 83       	std	Z+1, r19	; 0x01
    24b6:	42 83       	std	Z+2, r20	; 0x02
    24b8:	53 83       	std	Z+3, r21	; 0x03
    24ba:	67 c0       	rjmp	.+206    	; 0x258a <gc_execute_block+0x47c>
				break;
			}
			case 'P': {
				gc.dwell_time = gc.value; 			// dwell time in seconds
    24bc:	c0 92 26 21 	sts	0x2126, r12
    24c0:	d0 92 27 21 	sts	0x2127, r13
    24c4:	e0 92 28 21 	sts	0x2128, r14
    24c8:	f0 92 29 21 	sts	0x2129, r15
    24cc:	5e c0       	rjmp	.+188    	; 0x258a <gc_execute_block+0x47c>
				break;
			}
			case 'R': {
				gc.radius = gc.unit_converted_value; 
    24ce:	20 93 2a 21 	sts	0x212A, r18
    24d2:	30 93 2b 21 	sts	0x212B, r19
    24d6:	40 93 2c 21 	sts	0x212C, r20
    24da:	50 93 2d 21 	sts	0x212D, r21
				gc.radius_mode = TRUE; 
    24de:	70 92 20 21 	sts	0x2120, r7
    24e2:	53 c0       	rjmp	.+166    	; 0x258a <gc_execute_block+0x47c>
				break;
			}
			case 'S': {
				gc.spindle_speed = gc.value; 
    24e4:	c7 01       	movw	r24, r14
    24e6:	b6 01       	movw	r22, r12
    24e8:	0e 94 cc 42 	call	0x8598	; 0x8598 <__fixsfsi>
    24ec:	60 93 64 21 	sts	0x2164, r22
    24f0:	70 93 65 21 	sts	0x2165, r23
    24f4:	4a c0       	rjmp	.+148    	; 0x258a <gc_execute_block+0x47c>
				break;
			}
			case 'X': case 'Y': case 'Z': {
				if (gc.set_origin_mode) {
    24f6:	80 91 21 21 	lds	r24, 0x2121
    24fa:	88 23       	and	r24, r24
    24fc:	99 f0       	breq	.+38     	; 0x2524 <gc_execute_block+0x416>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    24fe:	e0 2f       	mov	r30, r16
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	ee 0f       	add	r30, r30
    2504:	ff 1f       	adc	r31, r31
    2506:	ee 0f       	add	r30, r30
    2508:	ff 1f       	adc	r31, r31
    250a:	e0 55       	subi	r30, 0x50	; 80
    250c:	f0 4e       	sbci	r31, 0xE0	; 224
    250e:	26 a7       	std	Z+46, r18	; 0x2e
    2510:	37 a7       	std	Z+47, r19	; 0x2f
    2512:	40 ab       	std	Z+48, r20	; 0x30
    2514:	51 ab       	std	Z+49, r21	; 0x31
					gc.target[gc.letter - 'X'] = gc.position[gc.letter - 'X'];
    2516:	22 af       	std	Z+58, r18	; 0x3a
    2518:	33 af       	std	Z+59, r19	; 0x3b
    251a:	44 af       	std	Z+60, r20	; 0x3c
    251c:	55 af       	std	Z+61, r21	; 0x3d
//					memcpy(gc.target, gc.position, sizeof(gc.target));	// target = position
					gc.next_action = NEXT_ACTION_SET_COORDINATES;
    251e:	60 92 1a 21 	sts	0x211A, r6
    2522:	33 c0       	rjmp	.+102    	; 0x258a <gc_execute_block+0x47c>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2524:	80 91 1f 21 	lds	r24, 0x211F
    2528:	88 23       	and	r24, r24
    252a:	21 f4       	brne	.+8      	; 0x2534 <gc_execute_block+0x426>
    252c:	80 91 22 21 	lds	r24, 0x2122
    2530:	88 23       	and	r24, r24
    2532:	69 f0       	breq	.+26     	; 0x254e <gc_execute_block+0x440>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    2534:	e0 2f       	mov	r30, r16
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	ee 0f       	add	r30, r30
    253a:	ff 1f       	adc	r31, r31
    253c:	ee 0f       	add	r30, r30
    253e:	ff 1f       	adc	r31, r31
    2540:	e0 55       	subi	r30, 0x50	; 80
    2542:	f0 4e       	sbci	r31, 0xE0	; 224
    2544:	22 af       	std	Z+58, r18	; 0x3a
    2546:	33 af       	std	Z+59, r19	; 0x3b
    2548:	44 af       	std	Z+60, r20	; 0x3c
    254a:	55 af       	std	Z+61, r21	; 0x3d
    254c:	1e c0       	rjmp	.+60     	; 0x258a <gc_execute_block+0x47c>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    254e:	10 e0       	ldi	r17, 0x00	; 0
    2550:	00 0f       	add	r16, r16
    2552:	11 1f       	adc	r17, r17
    2554:	00 0f       	add	r16, r16
    2556:	11 1f       	adc	r17, r17
    2558:	00 55       	subi	r16, 0x50	; 80
    255a:	10 4e       	sbci	r17, 0xE0	; 224
    255c:	f8 01       	movw	r30, r16
    255e:	62 ad       	ldd	r22, Z+58	; 0x3a
    2560:	73 ad       	ldd	r23, Z+59	; 0x3b
    2562:	84 ad       	ldd	r24, Z+60	; 0x3c
    2564:	95 ad       	ldd	r25, Z+61	; 0x3d
    2566:	0e 94 be 41 	call	0x837c	; 0x837c <__addsf3>
    256a:	d8 01       	movw	r26, r16
    256c:	da 96       	adiw	r26, 0x3a	; 58
    256e:	6d 93       	st	X+, r22
    2570:	7d 93       	st	X+, r23
    2572:	8d 93       	st	X+, r24
    2574:	9c 93       	st	X, r25
    2576:	dd 97       	sbiw	r26, 0x3d	; 61
    2578:	08 c0       	rjmp	.+16     	; 0x258a <gc_execute_block+0x47c>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    257a:	4e 01       	movw	r8, r28
    257c:	08 94       	sec
    257e:	81 1c       	adc	r8, r1
    2580:	91 1c       	adc	r9, r1
			case 'X': case 'Y': case 'Z': {
				if (gc.set_origin_mode) {
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
					gc.target[gc.letter - 'X'] = gc.position[gc.letter - 'X'];
//					memcpy(gc.target, gc.position, sizeof(gc.target));	// target = position
					gc.next_action = NEXT_ACTION_SET_COORDINATES;
    2582:	14 e0       	ldi	r17, 0x04	; 4
    2584:	61 2e       	mov	r6, r17
				gc.dwell_time = gc.value; 			// dwell time in seconds
				break;
			}
			case 'R': {
				gc.radius = gc.unit_converted_value; 
				gc.radius_mode = TRUE; 
    2586:	77 24       	eor	r7, r7
    2588:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    258a:	81 e1       	ldi	r24, 0x11	; 17
    258c:	91 e2       	ldi	r25, 0x21	; 33
    258e:	62 e1       	ldi	r22, 0x12	; 18
    2590:	71 e2       	ldi	r23, 0x21	; 33
    2592:	46 e1       	ldi	r20, 0x16	; 22
    2594:	51 e2       	ldi	r21, 0x21	; 33
    2596:	95 01       	movw	r18, r10
    2598:	84 01       	movw	r16, r8
    259a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_gc_next_statement>
    259e:	89 2b       	or	r24, r25
    25a0:	09 f0       	breq	.+2      	; 0x25a4 <gc_execute_block+0x496>
    25a2:	1f cf       	rjmp	.-450    	; 0x23e2 <gc_execute_block+0x2d4>
			}
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    25a4:	80 91 10 21 	lds	r24, 0x2110
    25a8:	88 23       	and	r24, r24
    25aa:	09 f0       	breq	.+2      	; 0x25ae <gc_execute_block+0x4a0>
    25ac:	ca c2       	rjmp	.+1428   	; 0x2b42 <gc_execute_block+0xa34>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    25ae:	80 91 63 21 	lds	r24, 0x2163
    25b2:	88 23       	and	r24, r24
    25b4:	71 f0       	breq	.+28     	; 0x25d2 <gc_execute_block+0x4c4>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    25b6:	40 91 64 21 	lds	r20, 0x2164
    25ba:	50 91 65 21 	lds	r21, 0x2165
    25be:	66 27       	eor	r22, r22
    25c0:	57 fd       	sbrc	r21, 7
    25c2:	60 95       	com	r22
    25c4:	76 2f       	mov	r23, r22
    25c6:	99 27       	eor	r25, r25
    25c8:	87 fd       	sbrc	r24, 7
    25ca:	90 95       	com	r25
    25cc:	0e 94 74 24 	call	0x48e8	; 0x48e8 <spindle_run>
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <gc_execute_block+0x4c8>
	} else {
		spindle_stop();
    25d2:	0e 94 84 24 	call	0x4908	; 0x4908 <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    25d6:	80 91 1a 21 	lds	r24, 0x211A
    25da:	82 30       	cpi	r24, 0x02	; 2
    25dc:	51 f1       	breq	.+84     	; 0x2632 <gc_execute_block+0x524>
    25de:	83 30       	cpi	r24, 0x03	; 3
    25e0:	20 f4       	brcc	.+8      	; 0x25ea <gc_execute_block+0x4dc>
    25e2:	81 30       	cpi	r24, 0x01	; 1
    25e4:	09 f0       	breq	.+2      	; 0x25e8 <gc_execute_block+0x4da>
    25e6:	9e c2       	rjmp	.+1340   	; 0x2b24 <gc_execute_block+0xa16>
    25e8:	2f c0       	rjmp	.+94     	; 0x2648 <gc_execute_block+0x53a>
    25ea:	83 30       	cpi	r24, 0x03	; 3
    25ec:	21 f0       	breq	.+8      	; 0x25f6 <gc_execute_block+0x4e8>
    25ee:	84 30       	cpi	r24, 0x04	; 4
    25f0:	09 f0       	breq	.+2      	; 0x25f4 <gc_execute_block+0x4e6>
    25f2:	98 c2       	rjmp	.+1328   	; 0x2b24 <gc_execute_block+0xa16>
    25f4:	03 c0       	rjmp	.+6      	; 0x25fc <gc_execute_block+0x4ee>
		case NEXT_ACTION_NONE: {				// nothing to do here
			break;
		}

		case NEXT_ACTION_GO_HOME: { 
			gc.status = mc_go_home(); 
    25f6:	0e 94 99 1b 	call	0x3732	; 0x3732 <mc_go_home>
    25fa:	92 c2       	rjmp	.+1316   	; 0x2b20 <gc_execute_block+0xa12>
			break;
		}

		case NEXT_ACTION_SET_COORDINATES: { 
			gc.status = mc_set_position(gc.position[X], gc.position[Y], gc.position[Z]); 
    25fc:	60 91 3e 21 	lds	r22, 0x213E
    2600:	70 91 3f 21 	lds	r23, 0x213F
    2604:	80 91 40 21 	lds	r24, 0x2140
    2608:	90 91 41 21 	lds	r25, 0x2141
    260c:	20 91 42 21 	lds	r18, 0x2142
    2610:	30 91 43 21 	lds	r19, 0x2143
    2614:	40 91 44 21 	lds	r20, 0x2144
    2618:	50 91 45 21 	lds	r21, 0x2145
    261c:	e0 90 46 21 	lds	r14, 0x2146
    2620:	f0 90 47 21 	lds	r15, 0x2147
    2624:	00 91 48 21 	lds	r16, 0x2148
    2628:	10 91 49 21 	lds	r17, 0x2149
    262c:	0e 94 32 1c 	call	0x3864	; 0x3864 <mc_set_position>
    2630:	77 c2       	rjmp	.+1262   	; 0x2b20 <gc_execute_block+0xa12>
			break;
		}

		case NEXT_ACTION_DWELL: {
			gc.status = mc_dwell(gc.dwell_time); 
    2632:	60 91 26 21 	lds	r22, 0x2126
    2636:	70 91 27 21 	lds	r23, 0x2127
    263a:	80 91 28 21 	lds	r24, 0x2128
    263e:	90 91 29 21 	lds	r25, 0x2129
    2642:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <mc_dwell>
    2646:	6c c2       	rjmp	.+1240   	; 0x2b20 <gc_execute_block+0xa12>
			break;
		}

		case NEXT_ACTION_MOTION: {
			switch (gc.motion_mode) {
    2648:	b0 91 1c 21 	lds	r27, 0x211C
    264c:	b8 8f       	std	Y+24, r27	; 0x18
    264e:	b2 30       	cpi	r27, 0x02	; 2
    2650:	20 f0       	brcs	.+8      	; 0x265a <gc_execute_block+0x54c>
    2652:	b4 30       	cpi	r27, 0x04	; 4
    2654:	08 f0       	brcs	.+2      	; 0x2658 <gc_execute_block+0x54a>
    2656:	66 c2       	rjmp	.+1228   	; 0x2b24 <gc_execute_block+0xa16>
    2658:	31 c0       	rjmp	.+98     	; 0x26bc <gc_execute_block+0x5ae>
				case MOTION_MODE_CANCEL: {
					break;
				}

				case MOTION_MODE_RAPID_LINEAR: case MOTION_MODE_LINEAR: {
					gc.status = mc_line(gc.target[X], gc.target[Y], gc.target[Z],
    265a:	60 91 4a 21 	lds	r22, 0x214A
    265e:	70 91 4b 21 	lds	r23, 0x214B
    2662:	80 91 4c 21 	lds	r24, 0x214C
    2666:	90 91 4d 21 	lds	r25, 0x214D
    266a:	20 91 4e 21 	lds	r18, 0x214E
    266e:	30 91 4f 21 	lds	r19, 0x214F
    2672:	40 91 50 21 	lds	r20, 0x2150
    2676:	50 91 51 21 	lds	r21, 0x2151
    267a:	e0 90 52 21 	lds	r14, 0x2152
    267e:	f0 90 53 21 	lds	r15, 0x2153
    2682:	00 91 54 21 	lds	r16, 0x2154
    2686:	10 91 55 21 	lds	r17, 0x2155
    268a:	80 90 1d 21 	lds	r8, 0x211D
    268e:	88 20       	and	r8, r8
    2690:	49 f0       	breq	.+18     	; 0x26a4 <gc_execute_block+0x596>
    2692:	a0 90 3a 21 	lds	r10, 0x213A
    2696:	b0 90 3b 21 	lds	r11, 0x213B
    269a:	c0 90 3c 21 	lds	r12, 0x213C
    269e:	d0 90 3d 21 	lds	r13, 0x213D
    26a2:	08 c0       	rjmp	.+16     	; 0x26b4 <gc_execute_block+0x5a6>
    26a4:	a0 90 2e 21 	lds	r10, 0x212E
    26a8:	b0 90 2f 21 	lds	r11, 0x212F
    26ac:	c0 90 30 21 	lds	r12, 0x2130
    26b0:	d0 90 31 21 	lds	r13, 0x2131
    26b4:	99 24       	eor	r9, r9
    26b6:	0e 94 90 1c 	call	0x3920	; 0x3920 <mc_line>
    26ba:	32 c2       	rjmp	.+1124   	; 0x2b20 <gc_execute_block+0xa12>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    26bc:	80 91 20 21 	lds	r24, 0x2120
    26c0:	88 23       	and	r24, r24
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <gc_execute_block+0x5b8>
    26c4:	ec c0       	rjmp	.+472    	; 0x289e <gc_execute_block+0x790>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    26c6:	e0 91 23 21 	lds	r30, 0x2123
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	ee 0f       	add	r30, r30
    26ce:	ff 1f       	adc	r31, r31
    26d0:	ee 0f       	add	r30, r30
    26d2:	ff 1f       	adc	r31, r31
    26d4:	e0 5f       	subi	r30, 0xF0	; 240
    26d6:	fe 4d       	sbci	r31, 0xDE	; 222
    26d8:	62 ad       	ldd	r22, Z+58	; 0x3a
    26da:	73 ad       	ldd	r23, Z+59	; 0x3b
    26dc:	84 ad       	ldd	r24, Z+60	; 0x3c
    26de:	95 ad       	ldd	r25, Z+61	; 0x3d
    26e0:	26 a5       	ldd	r18, Z+46	; 0x2e
    26e2:	37 a5       	ldd	r19, Z+47	; 0x2f
    26e4:	40 a9       	ldd	r20, Z+48	; 0x30
    26e6:	51 a9       	ldd	r21, Z+49	; 0x31
    26e8:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    26ec:	6f 83       	std	Y+7, r22	; 0x07
    26ee:	78 87       	std	Y+8, r23	; 0x08
    26f0:	89 87       	std	Y+9, r24	; 0x09
    26f2:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    26f4:	e0 91 24 21 	lds	r30, 0x2124
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	ee 0f       	add	r30, r30
    26fc:	ff 1f       	adc	r31, r31
    26fe:	ee 0f       	add	r30, r30
    2700:	ff 1f       	adc	r31, r31
    2702:	e0 5f       	subi	r30, 0xF0	; 240
    2704:	fe 4d       	sbci	r31, 0xDE	; 222
    2706:	62 ad       	ldd	r22, Z+58	; 0x3a
    2708:	73 ad       	ldd	r23, Z+59	; 0x3b
    270a:	84 ad       	ldd	r24, Z+60	; 0x3c
    270c:	95 ad       	ldd	r25, Z+61	; 0x3d
    270e:	26 a5       	ldd	r18, Z+46	; 0x2e
    2710:	37 a5       	ldd	r19, Z+47	; 0x2f
    2712:	40 a9       	ldd	r20, Z+48	; 0x30
    2714:	51 a9       	ldd	r21, Z+49	; 0x31
    2716:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    271a:	1b 01       	movw	r2, r22
    271c:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    271e:	10 92 56 21 	sts	0x2156, r1
    2722:	10 92 57 21 	sts	0x2157, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    2726:	60 90 2a 21 	lds	r6, 0x212A
    272a:	70 90 2b 21 	lds	r7, 0x212B
    272e:	80 90 2c 21 	lds	r8, 0x212C
    2732:	90 90 2d 21 	lds	r9, 0x212D
    2736:	c4 01       	movw	r24, r8
    2738:	b3 01       	movw	r22, r6
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e8       	ldi	r20, 0x80	; 128
    2740:	50 e4       	ldi	r21, 0x40	; 64
    2742:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    2746:	a4 01       	movw	r20, r8
    2748:	93 01       	movw	r18, r6
    274a:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    274e:	5b 01       	movw	r10, r22
    2750:	6c 01       	movw	r12, r24
    2752:	6f 81       	ldd	r22, Y+7	; 0x07
    2754:	78 85       	ldd	r23, Y+8	; 0x08
    2756:	89 85       	ldd	r24, Y+9	; 0x09
    2758:	9a 85       	ldd	r25, Y+10	; 0x0a
    275a:	9b 01       	movw	r18, r22
    275c:	ac 01       	movw	r20, r24
    275e:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    2762:	7b 01       	movw	r14, r22
    2764:	8c 01       	movw	r16, r24
    2766:	c2 01       	movw	r24, r4
    2768:	b1 01       	movw	r22, r2
    276a:	a2 01       	movw	r20, r4
    276c:	91 01       	movw	r18, r2
    276e:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    2772:	9b 01       	movw	r18, r22
    2774:	ac 01       	movw	r20, r24
    2776:	c8 01       	movw	r24, r16
    2778:	b7 01       	movw	r22, r14
    277a:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    277e:	9b 01       	movw	r18, r22
    2780:	ac 01       	movw	r20, r24
    2782:	c6 01       	movw	r24, r12
    2784:	b5 01       	movw	r22, r10
    2786:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    278a:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <sqrt>
    278e:	7b 01       	movw	r14, r22
    2790:	8c 01       	movw	r16, r24
    2792:	6f 81       	ldd	r22, Y+7	; 0x07
    2794:	78 85       	ldd	r23, Y+8	; 0x08
    2796:	89 85       	ldd	r24, Y+9	; 0x09
    2798:	9a 85       	ldd	r25, Y+10	; 0x0a
    279a:	a2 01       	movw	r20, r4
    279c:	91 01       	movw	r18, r2
    279e:	0e 94 5a 44 	call	0x88b4	; 0x88b4 <hypot>
    27a2:	9b 01       	movw	r18, r22
    27a4:	ac 01       	movw	r20, r24
    27a6:	17 fb       	bst	r17, 7
    27a8:	10 95       	com	r17
    27aa:	17 f9       	bld	r17, 7
    27ac:	10 95       	com	r17
    27ae:	c8 01       	movw	r24, r16
    27b0:	b7 01       	movw	r22, r14
    27b2:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    27b6:	7b 01       	movw	r14, r22
    27b8:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    27ba:	a8 01       	movw	r20, r16
    27bc:	97 01       	movw	r18, r14
    27be:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <__unordsf2>
    27c2:	88 23       	and	r24, r24
    27c4:	21 f0       	breq	.+8      	; 0x27ce <gc_execute_block+0x6c0>
		gc.status = TG_FLOATING_POINT_ERROR; 
    27c6:	81 e1       	ldi	r24, 0x11	; 17
    27c8:	80 93 10 21 	sts	0x2110, r24
    27cc:	65 c0       	rjmp	.+202    	; 0x2898 <gc_execute_block+0x78a>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    27ce:	e8 8d       	ldd	r30, Y+24	; 0x18
    27d0:	e3 30       	cpi	r30, 0x03	; 3
    27d2:	21 f4       	brne	.+8      	; 0x27dc <gc_execute_block+0x6ce>
		h_x2_div_d = -h_x2_div_d;
    27d4:	17 fb       	bst	r17, 7
    27d6:	10 95       	com	r17
    27d8:	17 f9       	bld	r17, 7
    27da:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    27dc:	c4 01       	movw	r24, r8
    27de:	b3 01       	movw	r22, r6
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e0       	ldi	r20, 0x00	; 0
    27e6:	50 e0       	ldi	r21, 0x00	; 0
    27e8:	0e 94 5d 42 	call	0x84ba	; 0x84ba <__cmpsf2>
    27ec:	88 23       	and	r24, r24
    27ee:	24 f4       	brge	.+8      	; 0x27f8 <gc_execute_block+0x6ea>
		h_x2_div_d = -h_x2_div_d; 
    27f0:	17 fb       	bst	r17, 7
    27f2:	10 95       	com	r17
    27f4:	17 f9       	bld	r17, 7
    27f6:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    27f8:	80 91 23 21 	lds	r24, 0x2123
    27fc:	c8 2e       	mov	r12, r24
    27fe:	dd 24       	eor	r13, r13
    2800:	cc 0c       	add	r12, r12
    2802:	dd 1c       	adc	r13, r13
    2804:	cc 0c       	add	r12, r12
    2806:	dd 1c       	adc	r13, r13
    2808:	26 e5       	ldi	r18, 0x56	; 86
    280a:	31 e2       	ldi	r19, 0x21	; 33
    280c:	c2 0e       	add	r12, r18
    280e:	d3 1e       	adc	r13, r19
    2810:	c2 01       	movw	r24, r4
    2812:	b1 01       	movw	r22, r2
    2814:	a8 01       	movw	r20, r16
    2816:	97 01       	movw	r18, r14
    2818:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    281c:	9b 01       	movw	r18, r22
    281e:	ac 01       	movw	r20, r24
    2820:	6f 81       	ldd	r22, Y+7	; 0x07
    2822:	78 85       	ldd	r23, Y+8	; 0x08
    2824:	89 85       	ldd	r24, Y+9	; 0x09
    2826:	9a 85       	ldd	r25, Y+10	; 0x0a
    2828:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e0       	ldi	r20, 0x00	; 0
    2832:	5f e3       	ldi	r21, 0x3F	; 63
    2834:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    2838:	d6 01       	movw	r26, r12
    283a:	6d 93       	st	X+, r22
    283c:	7d 93       	st	X+, r23
    283e:	8d 93       	st	X+, r24
    2840:	9c 93       	st	X, r25
    2842:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    2844:	80 91 24 21 	lds	r24, 0x2124
    2848:	c8 2e       	mov	r12, r24
    284a:	dd 24       	eor	r13, r13
    284c:	cc 0c       	add	r12, r12
    284e:	dd 1c       	adc	r13, r13
    2850:	cc 0c       	add	r12, r12
    2852:	dd 1c       	adc	r13, r13
    2854:	e6 e5       	ldi	r30, 0x56	; 86
    2856:	f1 e2       	ldi	r31, 0x21	; 33
    2858:	ce 0e       	add	r12, r30
    285a:	df 1e       	adc	r13, r31
    285c:	6f 81       	ldd	r22, Y+7	; 0x07
    285e:	78 85       	ldd	r23, Y+8	; 0x08
    2860:	89 85       	ldd	r24, Y+9	; 0x09
    2862:	9a 85       	ldd	r25, Y+10	; 0x0a
    2864:	a8 01       	movw	r20, r16
    2866:	97 01       	movw	r18, r14
    2868:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    286c:	9b 01       	movw	r18, r22
    286e:	ac 01       	movw	r20, r24
    2870:	c2 01       	movw	r24, r4
    2872:	b1 01       	movw	r22, r2
    2874:	0e 94 be 41 	call	0x837c	; 0x837c <__addsf3>
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	5f e3       	ldi	r21, 0x3F	; 63
    2880:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    2884:	d6 01       	movw	r26, r12
    2886:	6d 93       	st	X+, r22
    2888:	7d 93       	st	X+, r23
    288a:	8d 93       	st	X+, r24
    288c:	9c 93       	st	X, r25
    288e:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    2890:	80 91 10 21 	lds	r24, 0x2110
    2894:	88 23       	and	r24, r24
    2896:	19 f0       	breq	.+6      	; 0x289e <gc_execute_block+0x790>
			return (gc.status);
    2898:	80 91 10 21 	lds	r24, 0x2110
    289c:	41 c1       	rjmp	.+642    	; 0x2b20 <gc_execute_block+0xa12>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    289e:	e0 91 23 21 	lds	r30, 0x2123
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	ee 0f       	add	r30, r30
    28a6:	ff 1f       	adc	r31, r31
    28a8:	ee 0f       	add	r30, r30
    28aa:	ff 1f       	adc	r31, r31
    28ac:	ea 5a       	subi	r30, 0xAA	; 170
    28ae:	fe 4d       	sbci	r31, 0xDE	; 222
    28b0:	60 81       	ld	r22, Z
    28b2:	71 81       	ldd	r23, Z+1	; 0x01
    28b4:	82 81       	ldd	r24, Z+2	; 0x02
    28b6:	93 81       	ldd	r25, Z+3	; 0x03
    28b8:	90 58       	subi	r25, 0x80	; 128
    28ba:	e0 91 24 21 	lds	r30, 0x2124
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	ee 0f       	add	r30, r30
    28c2:	ff 1f       	adc	r31, r31
    28c4:	ee 0f       	add	r30, r30
    28c6:	ff 1f       	adc	r31, r31
    28c8:	ea 5a       	subi	r30, 0xAA	; 170
    28ca:	fe 4d       	sbci	r31, 0xDE	; 222
    28cc:	20 81       	ld	r18, Z
    28ce:	31 81       	ldd	r19, Z+1	; 0x01
    28d0:	42 81       	ldd	r20, Z+2	; 0x02
    28d2:	53 81       	ldd	r21, Z+3	; 0x03
    28d4:	50 58       	subi	r21, 0x80	; 128
    28d6:	0e 94 48 10 	call	0x2090	; 0x2090 <theta>
    28da:	6f 87       	std	Y+15, r22	; 0x0f
    28dc:	78 8b       	std	Y+16, r23	; 0x10
    28de:	89 8b       	std	Y+17, r24	; 0x11
    28e0:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    28e2:	9b 01       	movw	r18, r22
    28e4:	ac 01       	movw	r20, r24
    28e6:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <__unordsf2>
    28ea:	88 23       	and	r24, r24
    28ec:	09 f0       	breq	.+2      	; 0x28f0 <gc_execute_block+0x7e2>
    28ee:	54 c0       	rjmp	.+168    	; 0x2998 <gc_execute_block+0x88a>
		gc.status = TG_ARC_SPECIFICATION_ERROR;
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    28f0:	e0 91 23 21 	lds	r30, 0x2123
    28f4:	0e 2f       	mov	r16, r30
    28f6:	10 e0       	ldi	r17, 0x00	; 0
    28f8:	e0 91 24 21 	lds	r30, 0x2124
    28fc:	ce 2e       	mov	r12, r30
    28fe:	dd 24       	eor	r13, r13
    2900:	00 0f       	add	r16, r16
    2902:	11 1f       	adc	r17, r17
    2904:	00 0f       	add	r16, r16
    2906:	11 1f       	adc	r17, r17
    2908:	00 5f       	subi	r16, 0xF0	; 240
    290a:	1e 4d       	sbci	r17, 0xDE	; 222
    290c:	f8 01       	movw	r30, r16
    290e:	ea 5b       	subi	r30, 0xBA	; 186
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	d8 01       	movw	r26, r16
    2914:	da 96       	adiw	r26, 0x3a	; 58
    2916:	6d 91       	ld	r22, X+
    2918:	7d 91       	ld	r23, X+
    291a:	8d 91       	ld	r24, X+
    291c:	9c 91       	ld	r25, X
    291e:	dd 97       	sbiw	r26, 0x3d	; 61
    2920:	20 81       	ld	r18, Z
    2922:	31 81       	ldd	r19, Z+1	; 0x01
    2924:	42 81       	ldd	r20, Z+2	; 0x02
    2926:	53 81       	ldd	r21, Z+3	; 0x03
    2928:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    292c:	f8 01       	movw	r30, r16
    292e:	26 a5       	ldd	r18, Z+46	; 0x2e
    2930:	37 a5       	ldd	r19, Z+47	; 0x2f
    2932:	40 a9       	ldd	r20, Z+48	; 0x30
    2934:	51 a9       	ldd	r21, Z+49	; 0x31
    2936:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    293a:	7b 01       	movw	r14, r22
    293c:	8c 01       	movw	r16, r24
    293e:	cc 0c       	add	r12, r12
    2940:	dd 1c       	adc	r13, r13
    2942:	cc 0c       	add	r12, r12
    2944:	dd 1c       	adc	r13, r13
    2946:	20 e1       	ldi	r18, 0x10	; 16
    2948:	31 e2       	ldi	r19, 0x21	; 33
    294a:	c2 0e       	add	r12, r18
    294c:	d3 1e       	adc	r13, r19
    294e:	f6 01       	movw	r30, r12
    2950:	ea 5b       	subi	r30, 0xBA	; 186
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	d6 01       	movw	r26, r12
    2956:	da 96       	adiw	r26, 0x3a	; 58
    2958:	6d 91       	ld	r22, X+
    295a:	7d 91       	ld	r23, X+
    295c:	8d 91       	ld	r24, X+
    295e:	9c 91       	ld	r25, X
    2960:	dd 97       	sbiw	r26, 0x3d	; 61
    2962:	20 81       	ld	r18, Z
    2964:	31 81       	ldd	r19, Z+1	; 0x01
    2966:	42 81       	ldd	r20, Z+2	; 0x02
    2968:	53 81       	ldd	r21, Z+3	; 0x03
    296a:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    296e:	f6 01       	movw	r30, r12
    2970:	26 a5       	ldd	r18, Z+46	; 0x2e
    2972:	37 a5       	ldd	r19, Z+47	; 0x2f
    2974:	40 a9       	ldd	r20, Z+48	; 0x30
    2976:	51 a9       	ldd	r21, Z+49	; 0x31
    2978:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    297c:	9b 01       	movw	r18, r22
    297e:	ac 01       	movw	r20, r24
    2980:	c8 01       	movw	r24, r16
    2982:	b7 01       	movw	r22, r14
    2984:	0e 94 48 10 	call	0x2090	; 0x2090 <theta>
    2988:	7b 01       	movw	r14, r22
    298a:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    298c:	a8 01       	movw	r20, r16
    298e:	97 01       	movw	r18, r14
    2990:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <__unordsf2>
    2994:	88 23       	and	r24, r24
    2996:	19 f0       	breq	.+6      	; 0x299e <gc_execute_block+0x890>
		gc.status = TG_ARC_SPECIFICATION_ERROR; 
    2998:	83 e1       	ldi	r24, 0x13	; 19
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	c1 c0       	rjmp	.+386    	; 0x2b20 <gc_execute_block+0xa12>
		return(gc.status);
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    299e:	c8 01       	movw	r24, r16
    29a0:	b7 01       	movw	r22, r14
    29a2:	2f 85       	ldd	r18, Y+15	; 0x0f
    29a4:	38 89       	ldd	r19, Y+16	; 0x10
    29a6:	49 89       	ldd	r20, Y+17	; 0x11
    29a8:	5a 89       	ldd	r21, Y+18	; 0x12
    29aa:	0e 94 5d 42 	call	0x84ba	; 0x84ba <__cmpsf2>
    29ae:	88 23       	and	r24, r24
    29b0:	54 f4       	brge	.+20     	; 0x29c6 <gc_execute_block+0x8b8>
		theta_end += 2*M_PI;
    29b2:	c8 01       	movw	r24, r16
    29b4:	b7 01       	movw	r22, r14
    29b6:	2b ed       	ldi	r18, 0xDB	; 219
    29b8:	3f e0       	ldi	r19, 0x0F	; 15
    29ba:	49 ec       	ldi	r20, 0xC9	; 201
    29bc:	50 e4       	ldi	r21, 0x40	; 64
    29be:	0e 94 be 41 	call	0x837c	; 0x837c <__addsf3>
    29c2:	7b 01       	movw	r14, r22
    29c4:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    29c6:	c8 01       	movw	r24, r16
    29c8:	b7 01       	movw	r22, r14
    29ca:	2f 85       	ldd	r18, Y+15	; 0x0f
    29cc:	38 89       	ldd	r19, Y+16	; 0x10
    29ce:	49 89       	ldd	r20, Y+17	; 0x11
    29d0:	5a 89       	ldd	r21, Y+18	; 0x12
    29d2:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    29d6:	6b 87       	std	Y+11, r22	; 0x0b
    29d8:	7c 87       	std	Y+12, r23	; 0x0c
    29da:	8d 87       	std	Y+13, r24	; 0x0d
    29dc:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    29de:	80 91 1c 21 	lds	r24, 0x211C
    29e2:	83 30       	cpi	r24, 0x03	; 3
    29e4:	71 f4       	brne	.+28     	; 0x2a02 <gc_execute_block+0x8f4>
		angular_travel = angular_travel - 2*M_PI;
    29e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ee:	2b ed       	ldi	r18, 0xDB	; 219
    29f0:	3f e0       	ldi	r19, 0x0F	; 15
    29f2:	49 ec       	ldi	r20, 0xC9	; 201
    29f4:	50 e4       	ldi	r21, 0x40	; 64
    29f6:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    29fa:	6b 87       	std	Y+11, r22	; 0x0b
    29fc:	7c 87       	std	Y+12, r23	; 0x0c
    29fe:	8d 87       	std	Y+13, r24	; 0x0d
    2a00:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2a02:	80 91 23 21 	lds	r24, 0x2123
    2a06:	28 2f       	mov	r18, r24
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	2d 83       	std	Y+5, r18	; 0x05
    2a0c:	3e 83       	std	Y+6, r19	; 0x06
    2a0e:	f9 01       	movw	r30, r18
    2a10:	ee 0f       	add	r30, r30
    2a12:	ff 1f       	adc	r31, r31
    2a14:	ee 0f       	add	r30, r30
    2a16:	ff 1f       	adc	r31, r31
    2a18:	ea 5a       	subi	r30, 0xAA	; 170
    2a1a:	fe 4d       	sbci	r31, 0xDE	; 222
    2a1c:	e0 80       	ld	r14, Z
    2a1e:	f1 80       	ldd	r15, Z+1	; 0x01
    2a20:	02 81       	ldd	r16, Z+2	; 0x02
    2a22:	13 81       	ldd	r17, Z+3	; 0x03
    2a24:	80 91 24 21 	lds	r24, 0x2124
    2a28:	a8 2f       	mov	r26, r24
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	ab 83       	std	Y+3, r26	; 0x03
    2a2e:	bc 83       	std	Y+4, r27	; 0x04
    2a30:	fd 01       	movw	r30, r26
    2a32:	ee 0f       	add	r30, r30
    2a34:	ff 1f       	adc	r31, r31
    2a36:	ee 0f       	add	r30, r30
    2a38:	ff 1f       	adc	r31, r31
    2a3a:	ea 5a       	subi	r30, 0xAA	; 170
    2a3c:	fe 4d       	sbci	r31, 0xDE	; 222
    2a3e:	20 81       	ld	r18, Z
    2a40:	31 81       	ldd	r19, Z+1	; 0x01
    2a42:	42 81       	ldd	r20, Z+2	; 0x02
    2a44:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2a46:	80 91 25 21 	lds	r24, 0x2125
    2a4a:	28 2e       	mov	r2, r24
    2a4c:	33 24       	eor	r3, r3
    2a4e:	f1 01       	movw	r30, r2
    2a50:	ee 0f       	add	r30, r30
    2a52:	ff 1f       	adc	r31, r31
    2a54:	ee 0f       	add	r30, r30
    2a56:	ff 1f       	adc	r31, r31
    2a58:	e0 5f       	subi	r30, 0xF0	; 240
    2a5a:	fe 4d       	sbci	r31, 0xDE	; 222
    2a5c:	82 ad       	ldd	r24, Z+58	; 0x3a
    2a5e:	93 ad       	ldd	r25, Z+59	; 0x3b
    2a60:	a4 ad       	ldd	r26, Z+60	; 0x3c
    2a62:	b5 ad       	ldd	r27, Z+61	; 0x3d
    2a64:	8c 8b       	std	Y+20, r24	; 0x14
    2a66:	9d 8b       	std	Y+21, r25	; 0x15
    2a68:	ae 8b       	std	Y+22, r26	; 0x16
    2a6a:	bf 8b       	std	Y+23, r27	; 0x17
    2a6c:	a6 a4       	ldd	r10, Z+46	; 0x2e
    2a6e:	b7 a4       	ldd	r11, Z+47	; 0x2f
    2a70:	c0 a8       	ldd	r12, Z+48	; 0x30
    2a72:	d1 a8       	ldd	r13, Z+49	; 0x31

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2a74:	90 91 1d 21 	lds	r25, 0x211D
    2a78:	9b 8b       	std	Y+19, r25	; 0x13
    2a7a:	99 23       	and	r25, r25
    2a7c:	49 f0       	breq	.+18     	; 0x2a90 <gc_execute_block+0x982>
    2a7e:	40 90 3a 21 	lds	r4, 0x213A
    2a82:	50 90 3b 21 	lds	r5, 0x213B
    2a86:	60 90 3c 21 	lds	r6, 0x213C
    2a8a:	70 90 3d 21 	lds	r7, 0x213D
    2a8e:	08 c0       	rjmp	.+16     	; 0x2aa0 <gc_execute_block+0x992>
    2a90:	40 90 2e 21 	lds	r4, 0x212E
    2a94:	50 90 2f 21 	lds	r5, 0x212F
    2a98:	60 90 30 21 	lds	r6, 0x2130
    2a9c:	70 90 31 21 	lds	r7, 0x2131
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2aa0:	c8 01       	movw	r24, r16
    2aa2:	b7 01       	movw	r22, r14
    2aa4:	0e 94 5a 44 	call	0x88b4	; 0x88b4 <hypot>
    2aa8:	7b 01       	movw	r14, r22
    2aaa:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2aac:	ad b7       	in	r26, 0x3d	; 61
    2aae:	be b7       	in	r27, 0x3e	; 62
    2ab0:	1a 97       	sbiw	r26, 0x0a	; 10
    2ab2:	ad bf       	out	0x3d, r26	; 61
    2ab4:	be bf       	out	0x3e, r27	; 62
    2ab6:	8d b6       	in	r8, 0x3d	; 61
    2ab8:	9e b6       	in	r9, 0x3e	; 62
    2aba:	08 94       	sec
    2abc:	81 1c       	adc	r8, r1
    2abe:	91 1c       	adc	r9, r1
    2ac0:	6c 89       	ldd	r22, Y+20	; 0x14
    2ac2:	7d 89       	ldd	r23, Y+21	; 0x15
    2ac4:	8e 89       	ldd	r24, Y+22	; 0x16
    2ac6:	9f 89       	ldd	r25, Y+23	; 0x17
    2ac8:	a6 01       	movw	r20, r12
    2aca:	95 01       	movw	r18, r10
    2acc:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    2ad0:	5b 01       	movw	r10, r22
    2ad2:	6c 01       	movw	r12, r24
    2ad4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ad6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ad8:	f4 01       	movw	r30, r8
    2ada:	20 83       	st	Z, r18
    2adc:	31 83       	std	Z+1, r19	; 0x01
    2ade:	22 82       	std	Z+2, r2	; 0x02
    2ae0:	33 82       	std	Z+3, r3	; 0x03
    2ae2:	d4 01       	movw	r26, r8
    2ae4:	14 96       	adiw	r26, 0x04	; 4
    2ae6:	4d 92       	st	X+, r4
    2ae8:	5d 92       	st	X+, r5
    2aea:	6d 92       	st	X+, r6
    2aec:	7c 92       	st	X, r7
    2aee:	17 97       	sbiw	r26, 0x07	; 7
    2af0:	eb 89       	ldd	r30, Y+19	; 0x13
    2af2:	18 96       	adiw	r26, 0x08	; 8
    2af4:	ec 93       	st	X, r30
    2af6:	18 97       	sbiw	r26, 0x08	; 8
    2af8:	19 96       	adiw	r26, 0x09	; 9
    2afa:	1c 92       	st	X, r1
    2afc:	6f 85       	ldd	r22, Y+15	; 0x0f
    2afe:	78 89       	ldd	r23, Y+16	; 0x10
    2b00:	89 89       	ldd	r24, Y+17	; 0x11
    2b02:	9a 89       	ldd	r25, Y+18	; 0x12
    2b04:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b06:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b08:	4d 85       	ldd	r20, Y+13	; 0x0d
    2b0a:	5e 85       	ldd	r21, Y+14	; 0x0e
    2b0c:	8d 80       	ldd	r8, Y+5	; 0x05
    2b0e:	9e 80       	ldd	r9, Y+6	; 0x06
    2b10:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <mc_arc>
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//					   (gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//						gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    2b14:	2d b7       	in	r18, 0x3d	; 61
    2b16:	3e b7       	in	r19, 0x3e	; 62
    2b18:	26 5f       	subi	r18, 0xF6	; 246
    2b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1c:	2d bf       	out	0x3d, r18	; 61
    2b1e:	3e bf       	out	0x3e, r19	; 62
										gc.inverse_feed_rate_mode); 
					break;
				}

				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: {
					gc.status = _gc_compute_arc(); 
    2b20:	80 93 10 21 	sts	0x2110, r24
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    2b24:	80 91 10 21 	lds	r24, 0x2110
    2b28:	88 23       	and	r24, r24
    2b2a:	11 f0       	breq	.+4      	; 0x2b30 <gc_execute_block+0xa22>
    2b2c:	82 30       	cpi	r24, 0x02	; 2
    2b2e:	49 f4       	brne	.+18     	; 0x2b42 <gc_execute_block+0xa34>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2b30:	ee e3       	ldi	r30, 0x3E	; 62
    2b32:	f1 e2       	ldi	r31, 0x21	; 33
    2b34:	df 01       	movw	r26, r30
    2b36:	1c 96       	adiw	r26, 0x0c	; 12
    2b38:	9c e0       	ldi	r25, 0x0C	; 12
    2b3a:	0d 90       	ld	r0, X+
    2b3c:	01 92       	st	Z+, r0
    2b3e:	91 50       	subi	r25, 0x01	; 1
    2b40:	e1 f7       	brne	.-8      	; 0x2b3a <gc_execute_block+0xa2c>
	};
	return(gc.status);
}
    2b42:	68 96       	adiw	r28, 0x18	; 24
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	de bf       	out	0x3e, r29	; 62
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	1f 91       	pop	r17
    2b4e:	0f 91       	pop	r16
    2b50:	ff 90       	pop	r15
    2b52:	ef 90       	pop	r14
    2b54:	df 90       	pop	r13
    2b56:	cf 90       	pop	r12
    2b58:	bf 90       	pop	r11
    2b5a:	af 90       	pop	r10
    2b5c:	9f 90       	pop	r9
    2b5e:	8f 90       	pop	r8
    2b60:	7f 90       	pop	r7
    2b62:	6f 90       	pop	r6
    2b64:	5f 90       	pop	r5
    2b66:	4f 90       	pop	r4
    2b68:	3f 90       	pop	r3
    2b6a:	2f 90       	pop	r2
    2b6c:	08 95       	ret

00002b6e <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2b6e:	df 92       	push	r13
    2b70:	ef 92       	push	r14
    2b72:	ff 92       	push	r15
    2b74:	0f 93       	push	r16
    2b76:	1f 93       	push	r17
    2b78:	cf 93       	push	r28
    2b7a:	df 93       	push	r29
    2b7c:	7c 01       	movw	r14, r24
	char *comment=0;	// comment pointer - first char past opening paren
	uint8_t i=0; 		// index for incoming characters
	uint8_t j=0;		// index for normalized characters

	// discard deleted block
	if (block[0] == '/') {
    2b7e:	fc 01       	movw	r30, r24
    2b80:	80 81       	ld	r24, Z
    2b82:	8f 32       	cpi	r24, 0x2F	; 47
    2b84:	19 f0       	breq	.+6      	; 0x2b8c <gc_gcode_parser+0x1e>
    2b86:	00 e0       	ldi	r16, 0x00	; 0
    2b88:	dd 24       	eor	r13, r13
    2b8a:	2a c0       	rjmp	.+84     	; 0x2be0 <gc_gcode_parser+0x72>
		block[0] = 0;
    2b8c:	f7 01       	movw	r30, r14
    2b8e:	10 82       	st	Z, r1
    2b90:	6c c0       	rjmp	.+216    	; 0x2c6a <gc_gcode_parser+0xfc>
		return;
	}
	// normalize the comamnd block & mark the comment(if any)
	while ((c = toupper(block[i++])) != 0) {// NUL character
    2b92:	d3 94       	inc	r13
		if ((isupper(c)) || (isdigit(c))) {	// capture common chars
    2b94:	81 2f       	mov	r24, r17
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	0e 94 cc 48 	call	0x9198	; 0x9198 <isupper>
    2b9c:	89 2b       	or	r24, r25
    2b9e:	d9 f4       	brne	.+54     	; 0x2bd6 <gc_gcode_parser+0x68>
    2ba0:	81 2f       	mov	r24, r17
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	c0 97       	sbiw	r24, 0x30	; 48
    2ba6:	0a 97       	sbiw	r24, 0x0a	; 10
    2ba8:	b0 f0       	brcs	.+44     	; 0x2bd6 <gc_gcode_parser+0x68>
		 	block[j++] = c; 
			continue;
		}
		if (c == '(') {						// detect & handle comments
    2baa:	18 32       	cpi	r17, 0x28	; 40
    2bac:	41 f4       	brne	.+16     	; 0x2bbe <gc_gcode_parser+0x50>
			block[j] = 0;
    2bae:	f7 01       	movw	r30, r14
    2bb0:	e0 0f       	add	r30, r16
    2bb2:	f1 1d       	adc	r31, r1
    2bb4:	10 82       	st	Z, r1
			comment = &block[i]; 
    2bb6:	e7 01       	movw	r28, r14
    2bb8:	cd 0d       	add	r28, r13
    2bba:	d1 1d       	adc	r29, r1
    2bbc:	1d c0       	rjmp	.+58     	; 0x2bf8 <gc_gcode_parser+0x8a>
			break;
		}
		if (c <= ' ') continue;				// toss controls & whitespace
    2bbe:	11 32       	cpi	r17, 0x21	; 33
    2bc0:	78 f0       	brcs	.+30     	; 0x2be0 <gc_gcode_parser+0x72>
		if (c == 0x7F) continue;			// toss DELETE
    2bc2:	1f 37       	cpi	r17, 0x7F	; 127
    2bc4:	69 f0       	breq	.+26     	; 0x2be0 <gc_gcode_parser+0x72>
		if (strchr("!$%,;:?@^_~`\'\"", c))	// toss invalid punctuation
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	90 e2       	ldi	r25, 0x20	; 32
    2bca:	61 2f       	mov	r22, r17
    2bcc:	70 e0       	ldi	r23, 0x00	; 0
    2bce:	0e 94 08 49 	call	0x9210	; 0x9210 <strchr>
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	29 f4       	brne	.+10     	; 0x2be0 <gc_gcode_parser+0x72>
			continue;
		block[j++] = c;
    2bd6:	f7 01       	movw	r30, r14
    2bd8:	e0 0f       	add	r30, r16
    2bda:	f1 1d       	adc	r31, r1
    2bdc:	10 83       	st	Z, r17
    2bde:	0f 5f       	subi	r16, 0xFF	; 255
	if (block[0] == '/') {
		block[0] = 0;
		return;
	}
	// normalize the comamnd block & mark the comment(if any)
	while ((c = toupper(block[i++])) != 0) {// NUL character
    2be0:	f7 01       	movw	r30, r14
    2be2:	ed 0d       	add	r30, r13
    2be4:	f1 1d       	adc	r31, r1
    2be6:	80 81       	ld	r24, Z
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	0e 94 dd 48 	call	0x91ba	; 0x91ba <toupper>
    2bee:	18 2f       	mov	r17, r24
    2bf0:	88 23       	and	r24, r24
    2bf2:	79 f6       	brne	.-98     	; 0x2b92 <gc_gcode_parser+0x24>
    2bf4:	c0 e0       	ldi	r28, 0x00	; 0
    2bf6:	d0 e0       	ldi	r29, 0x00	; 0
		if (c == 0x7F) continue;			// toss DELETE
		if (strchr("!$%,;:?@^_~`\'\"", c))	// toss invalid punctuation
			continue;
		block[j++] = c;
	}
	block[j] = 0;							// nul terminate the command
    2bf8:	f7 01       	movw	r30, r14
    2bfa:	e0 0f       	add	r30, r16
    2bfc:	f1 1d       	adc	r31, r1
    2bfe:	10 82       	st	Z, r1
	if (comment) {
    2c00:	20 97       	sbiw	r28, 0x00	; 0
    2c02:	99 f1       	breq	.+102    	; 0x2c6a <gc_gcode_parser+0xfc>
		if ((toupper(comment[0]) == 'M') && 
    2c04:	88 81       	ld	r24, Y
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	0e 94 dd 48 	call	0x91ba	; 0x91ba <toupper>
    2c0c:	8d 34       	cpi	r24, 0x4D	; 77
    2c0e:	91 05       	cpc	r25, r1
    2c10:	61 f5       	brne	.+88     	; 0x2c6a <gc_gcode_parser+0xfc>
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	0e 94 dd 48 	call	0x91ba	; 0x91ba <toupper>
    2c1a:	83 35       	cpi	r24, 0x53	; 83
    2c1c:	91 05       	cpc	r25, r1
    2c1e:	29 f5       	brne	.+74     	; 0x2c6a <gc_gcode_parser+0xfc>
    2c20:	8a 81       	ldd	r24, Y+2	; 0x02
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	0e 94 dd 48 	call	0x91ba	; 0x91ba <toupper>
    2c28:	87 34       	cpi	r24, 0x47	; 71
    2c2a:	91 05       	cpc	r25, r1
    2c2c:	f1 f4       	brne	.+60     	; 0x2c6a <gc_gcode_parser+0xfc>
    2c2e:	04 c0       	rjmp	.+8      	; 0x2c38 <gc_gcode_parser+0xca>
			(toupper(comment[1]) == 'S') &&
			(toupper(comment[2]) == 'G')) {
			i=0;
			while ((c = comment[i++]) != 0) {// remove trailing parenthesis
				if (c == ')') {
    2c30:	99 32       	cpi	r25, 0x29	; 41
    2c32:	19 f4       	brne	.+6      	; 0x2c3a <gc_gcode_parser+0xcc>
					comment[--i] = 0;
    2c34:	10 82       	st	Z, r1
    2c36:	08 c0       	rjmp	.+16     	; 0x2c48 <gc_gcode_parser+0xda>
    2c38:	80 e0       	ldi	r24, 0x00	; 0
	if (comment) {
		if ((toupper(comment[0]) == 'M') && 
			(toupper(comment[1]) == 'S') &&
			(toupper(comment[2]) == 'G')) {
			i=0;
			while ((c = comment[i++]) != 0) {// remove trailing parenthesis
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	e8 0f       	add	r30, r24
    2c3e:	f1 1d       	adc	r31, r1
    2c40:	90 81       	ld	r25, Z
    2c42:	8f 5f       	subi	r24, 0xFF	; 255
    2c44:	99 23       	and	r25, r25
    2c46:	a1 f7       	brne	.-24     	; 0x2c30 <gc_gcode_parser+0xc2>
				if (c == ')') {
					comment[--i] = 0;
					break;
				}
			}
			printf_P(PSTR("%s\n"), (comment+3));
    2c48:	00 d0       	rcall	.+0      	; 0x2c4a <gc_gcode_parser+0xdc>
    2c4a:	0f 92       	push	r0
    2c4c:	8b e3       	ldi	r24, 0x3B	; 59
    2c4e:	92 e0       	ldi	r25, 0x02	; 2
    2c50:	ed b7       	in	r30, 0x3d	; 61
    2c52:	fe b7       	in	r31, 0x3e	; 62
    2c54:	81 83       	std	Z+1, r24	; 0x01
    2c56:	92 83       	std	Z+2, r25	; 0x02
    2c58:	23 96       	adiw	r28, 0x03	; 3
    2c5a:	c3 83       	std	Z+3, r28	; 0x03
    2c5c:	d4 83       	std	Z+4, r29	; 0x04
    2c5e:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
    2c62:	0f 90       	pop	r0
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
 */

uint8_t gc_gcode_parser(char *block)
{
	_gc_normalize_gcode_block(block);
	if (block[0] == 0) { 					// ignore comments (stripped)
    2c6a:	f7 01       	movw	r30, r14
    2c6c:	80 81       	ld	r24, Z
    2c6e:	88 23       	and	r24, r24
    2c70:	71 f0       	breq	.+28     	; 0x2c8e <gc_gcode_parser+0x120>
		return(TG_OK);
	}
	if (block[0] == 'Q') {					// quit gcode mode
    2c72:	81 35       	cpi	r24, 0x51	; 81
    2c74:	11 f4       	brne	.+4      	; 0x2c7a <gc_gcode_parser+0x10c>
    2c76:	8b e0       	ldi	r24, 0x0B	; 11
    2c78:	0a c0       	rjmp	.+20     	; 0x2c8e <gc_gcode_parser+0x120>
		return(TG_QUIT);
	}
	gc.status = gc_execute_block(block);	// execute gcode block
    2c7a:	c7 01       	movw	r24, r14
    2c7c:	0e 94 87 10 	call	0x210e	; 0x210e <gc_execute_block>
    2c80:	80 93 10 21 	sts	0x2110, r24
	tg_print_status(gc.status, block);
    2c84:	b7 01       	movw	r22, r14
    2c86:	0e 94 bc 2b 	call	0x5778	; 0x5778 <tg_print_status>
	return (gc.status);
    2c8a:	80 91 10 21 	lds	r24, 0x2110
}
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	1f 91       	pop	r17
    2c94:	0f 91       	pop	r16
    2c96:	ff 90       	pop	r15
    2c98:	ef 90       	pop	r14
    2c9a:	df 90       	pop	r13
    2c9c:	08 95       	ret

00002c9e <gc_send_to_parser>:
 *	Inject a block into parser taking gcode command processing state into account
 */

void gc_send_to_parser(char *block)
{
	gc_gcode_parser(block);
    2c9e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <gc_gcode_parser>
	return;
}
    2ca2:	08 95       	ret

00002ca4 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2ca4:	cf 92       	push	r12
    2ca6:	df 92       	push	r13
    2ca8:	ef 92       	push	r14
    2caa:	ff 92       	push	r15
    2cac:	0f 93       	push	r16
    2cae:	1f 93       	push	r17
    2cb0:	cf 93       	push	r28
    2cb2:	df 93       	push	r29
    2cb4:	cd e5       	ldi	r28, 0x5D	; 93
    2cb6:	d2 e2       	ldi	r29, 0x22	; 34
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2cb8:	68 81       	ld	r22, Y
    2cba:	70 e0       	ldi	r23, 0x00	; 0
    2cbc:	88 27       	eor	r24, r24
    2cbe:	77 fd       	sbrc	r23, 7
    2cc0:	80 95       	com	r24
    2cc2:	98 2f       	mov	r25, r24
    2cc4:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    2cc8:	9b 01       	movw	r18, r22
    2cca:	ac 01       	movw	r20, r24
    2ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cce:	78 85       	ldd	r23, Y+8	; 0x08
    2cd0:	89 85       	ldd	r24, Y+9	; 0x09
    2cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd4:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    2cd8:	9b 01       	movw	r18, r22
    2cda:	ac 01       	movw	r20, r24
    2cdc:	60 e0       	ldi	r22, 0x00	; 0
    2cde:	70 e0       	ldi	r23, 0x00	; 0
    2ce0:	84 eb       	ldi	r24, 0xB4	; 180
    2ce2:	93 e4       	ldi	r25, 0x43	; 67
    2ce4:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    2ce8:	2b 85       	ldd	r18, Y+11	; 0x0b
    2cea:	3c 85       	ldd	r19, Y+12	; 0x0c
    2cec:	4d 85       	ldd	r20, Y+13	; 0x0d
    2cee:	5e 85       	ldd	r21, Y+14	; 0x0e
    2cf0:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    2cf4:	6b 8b       	std	Y+19, r22	; 0x13
    2cf6:	7c 8b       	std	Y+20, r23	; 0x14
    2cf8:	8d 8b       	std	Y+21, r24	; 0x15
    2cfa:	9e 8b       	std	Y+22, r25	; 0x16
    2cfc:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    2cfe:	82 e2       	ldi	r24, 0x22	; 34
    2d00:	cd 3b       	cpi	r28, 0xBD	; 189
    2d02:	d8 07       	cpc	r29, r24
    2d04:	c9 f6       	brne	.-78     	; 0x2cb8 <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    2d06:	00 91 5d 22 	lds	r16, 0x225D
    2d0a:	10 e0       	ldi	r17, 0x00	; 0
    2d0c:	b8 01       	movw	r22, r16
    2d0e:	88 27       	eor	r24, r24
    2d10:	77 fd       	sbrc	r23, 7
    2d12:	80 95       	com	r24
    2d14:	98 2f       	mov	r25, r24
    2d16:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    2d1a:	9b 01       	movw	r18, r22
    2d1c:	ac 01       	movw	r20, r24
    2d1e:	60 91 64 22 	lds	r22, 0x2264
    2d22:	70 91 65 22 	lds	r23, 0x2265
    2d26:	80 91 66 22 	lds	r24, 0x2266
    2d2a:	90 91 67 22 	lds	r25, 0x2267
    2d2e:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    2d32:	9b 01       	movw	r18, r22
    2d34:	ac 01       	movw	r20, r24
    2d36:	60 e0       	ldi	r22, 0x00	; 0
    2d38:	70 e0       	ldi	r23, 0x00	; 0
    2d3a:	84 eb       	ldi	r24, 0xB4	; 180
    2d3c:	93 e4       	ldi	r25, 0x43	; 67
    2d3e:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    2d42:	6b 01       	movw	r12, r22
    2d44:	7c 01       	movw	r14, r24
    2d46:	80 91 62 22 	lds	r24, 0x2262
    2d4a:	90 91 63 22 	lds	r25, 0x2263
    2d4e:	08 9f       	mul	r16, r24
    2d50:	b0 01       	movw	r22, r0
    2d52:	09 9f       	mul	r16, r25
    2d54:	70 0d       	add	r23, r0
    2d56:	18 9f       	mul	r17, r24
    2d58:	70 0d       	add	r23, r0
    2d5a:	11 24       	eor	r1, r1
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	0e 94 fd 42 	call	0x85fa	; 0x85fa <__floatunsisf>
    2d64:	a7 01       	movw	r20, r14
    2d66:	96 01       	movw	r18, r12
    2d68:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    2d6c:	60 93 55 22 	sts	0x2255, r22
    2d70:	70 93 56 22 	sts	0x2256, r23
    2d74:	80 93 57 22 	sts	0x2257, r24
    2d78:	90 93 58 22 	sts	0x2258, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    2d7c:	80 91 60 22 	lds	r24, 0x2260
    2d80:	90 91 61 22 	lds	r25, 0x2261
    2d84:	08 9f       	mul	r16, r24
    2d86:	b0 01       	movw	r22, r0
    2d88:	09 9f       	mul	r16, r25
    2d8a:	70 0d       	add	r23, r0
    2d8c:	18 9f       	mul	r17, r24
    2d8e:	70 0d       	add	r23, r0
    2d90:	11 24       	eor	r1, r1
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0e 94 fd 42 	call	0x85fa	; 0x85fa <__floatunsisf>
    2d9a:	a7 01       	movw	r20, r14
    2d9c:	96 01       	movw	r18, r12
    2d9e:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    2da2:	60 93 59 22 	sts	0x2259, r22
    2da6:	70 93 5a 22 	sts	0x225A, r23
    2daa:	80 93 5b 22 	sts	0x225B, r24
    2dae:	90 93 5c 22 	sts	0x225C, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    2db2:	df 91       	pop	r29
    2db4:	cf 91       	pop	r28
    2db6:	1f 91       	pop	r17
    2db8:	0f 91       	pop	r16
    2dba:	ff 90       	pop	r15
    2dbc:	ef 90       	pop	r14
    2dbe:	df 90       	pop	r13
    2dc0:	cf 90       	pop	r12
    2dc2:	08 95       	ret

00002dc4 <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    2dc4:	ef e4       	ldi	r30, 0x4F	; 79
    2dc6:	f2 e2       	ldi	r31, 0x22	; 34
    2dc8:	84 e6       	ldi	r24, 0x64	; 100
    2dca:	80 93 4f 22 	sts	0x224F, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2dce:	8d ec       	ldi	r24, 0xCD	; 205
    2dd0:	9c ec       	ldi	r25, 0xCC	; 204
    2dd2:	ac e4       	ldi	r26, 0x4C	; 76
    2dd4:	bd e3       	ldi	r27, 0x3D	; 61
    2dd6:	80 93 51 22 	sts	0x2251, r24
    2dda:	90 93 52 22 	sts	0x2252, r25
    2dde:	a0 93 53 22 	sts	0x2253, r26
    2de2:	b0 93 54 22 	sts	0x2254, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2de6:	8c ed       	ldi	r24, 0xDC	; 220
    2de8:	95 e0       	ldi	r25, 0x05	; 5
    2dea:	80 93 60 22 	sts	0x2260, r24
    2dee:	90 93 61 22 	sts	0x2261, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2df2:	80 93 78 22 	sts	0x2278, r24
    2df6:	90 93 79 22 	sts	0x2279, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2dfa:	80 93 90 22 	sts	0x2290, r24
    2dfe:	90 93 91 22 	sts	0x2291, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2e02:	80 93 a8 22 	sts	0x22A8, r24
    2e06:	90 93 a9 22 	sts	0x22A9, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2e0a:	80 93 62 22 	sts	0x2262, r24
    2e0e:	90 93 63 22 	sts	0x2263, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2e12:	80 93 7a 22 	sts	0x227A, r24
    2e16:	90 93 7b 22 	sts	0x227B, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2e1a:	80 93 92 22 	sts	0x2292, r24
    2e1e:	90 93 93 22 	sts	0x2293, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2e22:	80 93 aa 22 	sts	0x22AA, r24
    2e26:	90 93 ab 22 	sts	0x22AB, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2e2a:	86 e6       	ldi	r24, 0x66	; 102
    2e2c:	96 e6       	ldi	r25, 0x66	; 102
    2e2e:	a6 ee       	ldi	r26, 0xE6	; 230
    2e30:	bf e3       	ldi	r27, 0x3F	; 63
    2e32:	80 93 64 22 	sts	0x2264, r24
    2e36:	90 93 65 22 	sts	0x2265, r25
    2e3a:	a0 93 66 22 	sts	0x2266, r26
    2e3e:	b0 93 67 22 	sts	0x2267, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2e42:	80 93 7c 22 	sts	0x227C, r24
    2e46:	90 93 7d 22 	sts	0x227D, r25
    2e4a:	a0 93 7e 22 	sts	0x227E, r26
    2e4e:	b0 93 7f 22 	sts	0x227F, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2e52:	80 93 94 22 	sts	0x2294, r24
    2e56:	90 93 95 22 	sts	0x2295, r25
    2e5a:	a0 93 96 22 	sts	0x2296, r26
    2e5e:	b0 93 97 22 	sts	0x2297, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2e62:	80 93 ac 22 	sts	0x22AC, r24
    2e66:	90 93 ad 22 	sts	0x22AD, r25
    2e6a:	a0 93 ae 22 	sts	0x22AE, r26
    2e6e:	b0 93 af 22 	sts	0x22AF, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    2e72:	8c e5       	ldi	r24, 0x5C	; 92
    2e74:	9f e8       	ldi	r25, 0x8F	; 143
    2e76:	a2 ea       	ldi	r26, 0xA2	; 162
    2e78:	bf e3       	ldi	r27, 0x3F	; 63
    2e7a:	80 93 68 22 	sts	0x2268, r24
    2e7e:	90 93 69 22 	sts	0x2269, r25
    2e82:	a0 93 6a 22 	sts	0x226A, r26
    2e86:	b0 93 6b 22 	sts	0x226B, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    2e8a:	80 93 80 22 	sts	0x2280, r24
    2e8e:	90 93 81 22 	sts	0x2281, r25
    2e92:	a0 93 82 22 	sts	0x2282, r26
    2e96:	b0 93 83 22 	sts	0x2283, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    2e9a:	80 93 98 22 	sts	0x2298, r24
    2e9e:	90 93 99 22 	sts	0x2299, r25
    2ea2:	a0 93 9a 22 	sts	0x229A, r26
    2ea6:	b0 93 9b 22 	sts	0x229B, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    2eaa:	80 93 b0 22 	sts	0x22B0, r24
    2eae:	90 93 b1 22 	sts	0x22B1, r25
    2eb2:	a0 93 b2 22 	sts	0x22B2, r26
    2eb6:	b0 93 b3 22 	sts	0x22B3, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	a8 ec       	ldi	r26, 0xC8	; 200
    2ec0:	b3 e4       	ldi	r27, 0x43	; 67
    2ec2:	80 93 6c 22 	sts	0x226C, r24
    2ec6:	90 93 6d 22 	sts	0x226D, r25
    2eca:	a0 93 6e 22 	sts	0x226E, r26
    2ece:	b0 93 6f 22 	sts	0x226F, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    2ed2:	80 93 84 22 	sts	0x2284, r24
    2ed6:	90 93 85 22 	sts	0x2285, r25
    2eda:	a0 93 86 22 	sts	0x2286, r26
    2ede:	b0 93 87 22 	sts	0x2287, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	a6 e9       	ldi	r26, 0x96	; 150
    2ee8:	b3 e4       	ldi	r27, 0x43	; 67
    2eea:	80 93 9c 22 	sts	0x229C, r24
    2eee:	90 93 9d 22 	sts	0x229D, r25
    2ef2:	a0 93 9e 22 	sts	0x229E, r26
    2ef6:	b0 93 9f 22 	sts	0x229F, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	a0 e8       	ldi	r26, 0x80	; 128
    2f00:	bf eb       	ldi	r27, 0xBF	; 191
    2f02:	80 93 b4 22 	sts	0x22B4, r24
    2f06:	90 93 b5 22 	sts	0x22B5, r25
    2f0a:	a0 93 b6 22 	sts	0x22B6, r26
    2f0e:	b0 93 b7 22 	sts	0x22B7, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    2f12:	88 e0       	ldi	r24, 0x08	; 8
    2f14:	80 93 5d 22 	sts	0x225D, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    2f18:	80 93 75 22 	sts	0x2275, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    2f1c:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A].microstep = A_MICROSTEPS;
    2f1e:	80 93 a5 22 	sts	0x22A5, r24

	cfg.a[X].polarity = X_POLARITY;
    2f22:	10 92 5f 22 	sts	0x225F, r1
	cfg.a[Y].polarity = Y_POLARITY;
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	80 93 77 22 	sts	0x2277, r24
	cfg.a[Z].polarity = Z_POLARITY;
    2f2c:	10 92 8f 22 	sts	0x228F, r1
	cfg.a[A].polarity = A_POLARITY;
    2f30:	10 92 a7 22 	sts	0x22A7, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    2f34:	80 93 74 22 	sts	0x2274, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    2f38:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    2f3a:	80 93 a4 22 	sts	0x22A4, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    2f3e:	10 92 bc 22 	sts	0x22BC, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    2f42:	80 93 5e 22 	sts	0x225E, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    2f46:	80 93 76 22 	sts	0x2276, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    2f4a:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    2f4c:	80 93 a6 22 	sts	0x22A6, r24

	_cfg_computed();		// generate computed values from the above
    2f50:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_cfg_computed>
}
    2f54:	08 95       	ret

00002f56 <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2f56:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <cfg_reset>
}
    2f5a:	08 95       	ret

00002f5c <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	6f e4       	ldi	r22, 0x4F	; 79
    2f62:	72 e2       	ldi	r23, 0x22	; 34
    2f64:	4e e6       	ldi	r20, 0x6E	; 110
    2f66:	50 e0       	ldi	r21, 0x00	; 0
    2f68:	0e 94 b9 2a 	call	0x5572	; 0x5572 <memcpy_to_eeprom_with_checksum>
}
    2f6c:	08 95       	ret

00002f6e <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	0e 94 0b 2a 	call	0x5416	; 0x5416 <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    2f76:	84 36       	cpi	r24, 0x64	; 100
    2f78:	19 f0       	breq	.+6      	; 0x2f80 <cfg_read+0x12>
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	0d c0       	rjmp	.+26     	; 0x2f9a <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    2f80:	8f e4       	ldi	r24, 0x4F	; 79
    2f82:	92 e2       	ldi	r25, 0x22	; 34
    2f84:	60 e0       	ldi	r22, 0x00	; 0
    2f86:	70 e0       	ldi	r23, 0x00	; 0
    2f88:	4e e6       	ldi	r20, 0x6E	; 110
    2f8a:	50 e0       	ldi	r21, 0x00	; 0
    2f8c:	0e 94 15 2a 	call	0x542a	; 0x542a <memcpy_from_eeprom_with_checksum>
    2f90:	00 97       	sbiw	r24, 0x00	; 0
    2f92:	11 f0       	breq	.+4      	; 0x2f98 <cfg_read+0x2a>
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    2f9a:	c9 01       	movw	r24, r18
    2f9c:	08 95       	ret

00002f9e <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    2f9e:	ef 92       	push	r14
    2fa0:	ff 92       	push	r15
    2fa2:	0f 93       	push	r16
    2fa4:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    2fa6:	e8 2e       	mov	r14, r24
    2fa8:	ff 24       	eor	r15, r15
    2faa:	87 01       	movw	r16, r14
    2fac:	00 0f       	add	r16, r16
    2fae:	11 1f       	adc	r17, r17
    2fb0:	f8 01       	movw	r30, r16
    2fb2:	e9 5b       	subi	r30, 0xB9	; 185
    2fb4:	fd 4f       	sbci	r31, 0xFD	; 253
    2fb6:	25 91       	lpm	r18, Z+
    2fb8:	34 91       	lpm	r19, Z+
    2fba:	00 d0       	rcall	.+0      	; 0x2fbc <_cfg_dump_axis+0x1e>
    2fbc:	0f 92       	push	r0
    2fbe:	83 ea       	ldi	r24, 0xA3	; 163
    2fc0:	95 e0       	ldi	r25, 0x05	; 5
    2fc2:	ad b7       	in	r26, 0x3d	; 61
    2fc4:	be b7       	in	r27, 0x3e	; 62
    2fc6:	11 96       	adiw	r26, 0x01	; 1
    2fc8:	8d 93       	st	X+, r24
    2fca:	9c 93       	st	X, r25
    2fcc:	12 97       	sbiw	r26, 0x02	; 2
    2fce:	13 96       	adiw	r26, 0x03	; 3
    2fd0:	2d 93       	st	X+, r18
    2fd2:	3c 93       	st	X, r19
    2fd4:	14 97       	sbiw	r26, 0x04	; 4
    2fd6:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    2fda:	8b e6       	ldi	r24, 0x6B	; 107
    2fdc:	95 e0       	ldi	r25, 0x05	; 5
    2fde:	ed b7       	in	r30, 0x3d	; 61
    2fe0:	fe b7       	in	r31, 0x3e	; 62
    2fe2:	81 83       	std	Z+1, r24	; 0x01
    2fe4:	92 83       	std	Z+2, r25	; 0x02
    2fe6:	0e 0d       	add	r16, r14
    2fe8:	1f 1d       	adc	r17, r15
    2fea:	83 e0       	ldi	r24, 0x03	; 3
    2fec:	00 0f       	add	r16, r16
    2fee:	11 1f       	adc	r17, r17
    2ff0:	8a 95       	dec	r24
    2ff2:	e1 f7       	brne	.-8      	; 0x2fec <_cfg_dump_axis+0x4e>
    2ff4:	01 5b       	subi	r16, 0xB1	; 177
    2ff6:	1d 4d       	sbci	r17, 0xDD	; 221
    2ff8:	d8 01       	movw	r26, r16
    2ffa:	51 96       	adiw	r26, 0x11	; 17
    2ffc:	8d 91       	ld	r24, X+
    2ffe:	9c 91       	ld	r25, X
    3000:	52 97       	sbiw	r26, 0x12	; 18
    3002:	83 83       	std	Z+3, r24	; 0x03
    3004:	94 83       	std	Z+4, r25	; 0x04
    3006:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    300a:	83 e3       	ldi	r24, 0x33	; 51
    300c:	95 e0       	ldi	r25, 0x05	; 5
    300e:	ed b7       	in	r30, 0x3d	; 61
    3010:	fe b7       	in	r31, 0x3e	; 62
    3012:	81 83       	std	Z+1, r24	; 0x01
    3014:	92 83       	std	Z+2, r25	; 0x02
    3016:	d8 01       	movw	r26, r16
    3018:	53 96       	adiw	r26, 0x13	; 19
    301a:	8d 91       	ld	r24, X+
    301c:	9c 91       	ld	r25, X
    301e:	54 97       	sbiw	r26, 0x14	; 20
    3020:	83 83       	std	Z+3, r24	; 0x03
    3022:	94 83       	std	Z+4, r25	; 0x04
    3024:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    3028:	ed b7       	in	r30, 0x3d	; 61
    302a:	fe b7       	in	r31, 0x3e	; 62
    302c:	31 96       	adiw	r30, 0x01	; 1
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	95 e0       	ldi	r25, 0x05	; 5
    3032:	ad b7       	in	r26, 0x3d	; 61
    3034:	be b7       	in	r27, 0x3e	; 62
    3036:	11 96       	adiw	r26, 0x01	; 1
    3038:	8d 93       	st	X+, r24
    303a:	9c 93       	st	X, r25
    303c:	12 97       	sbiw	r26, 0x02	; 2
    303e:	d8 01       	movw	r26, r16
    3040:	1e 96       	adiw	r26, 0x0e	; 14
    3042:	8c 91       	ld	r24, X
    3044:	82 83       	std	Z+2, r24	; 0x02
    3046:	13 82       	std	Z+3, r1	; 0x03
    3048:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    304c:	0f 92       	push	r0
    304e:	0f 92       	push	r0
    3050:	89 ec       	ldi	r24, 0xC9	; 201
    3052:	94 e0       	ldi	r25, 0x04	; 4
    3054:	ed b7       	in	r30, 0x3d	; 61
    3056:	fe b7       	in	r31, 0x3e	; 62
    3058:	81 83       	std	Z+1, r24	; 0x01
    305a:	92 83       	std	Z+2, r25	; 0x02
    305c:	f8 01       	movw	r30, r16
    305e:	85 89       	ldd	r24, Z+21	; 0x15
    3060:	96 89       	ldd	r25, Z+22	; 0x16
    3062:	a7 89       	ldd	r26, Z+23	; 0x17
    3064:	b0 8d       	ldd	r27, Z+24	; 0x18
    3066:	ed b7       	in	r30, 0x3d	; 61
    3068:	fe b7       	in	r31, 0x3e	; 62
    306a:	83 83       	std	Z+3, r24	; 0x03
    306c:	94 83       	std	Z+4, r25	; 0x04
    306e:	a5 83       	std	Z+5, r26	; 0x05
    3070:	b6 83       	std	Z+6, r27	; 0x06
    3072:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    3076:	86 e9       	ldi	r24, 0x96	; 150
    3078:	94 e0       	ldi	r25, 0x04	; 4
    307a:	ad b7       	in	r26, 0x3d	; 61
    307c:	be b7       	in	r27, 0x3e	; 62
    307e:	11 96       	adiw	r26, 0x01	; 1
    3080:	8d 93       	st	X+, r24
    3082:	9c 93       	st	X, r25
    3084:	12 97       	sbiw	r26, 0x02	; 2
    3086:	f8 01       	movw	r30, r16
    3088:	81 8d       	ldd	r24, Z+25	; 0x19
    308a:	92 8d       	ldd	r25, Z+26	; 0x1a
    308c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    308e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3090:	ed b7       	in	r30, 0x3d	; 61
    3092:	fe b7       	in	r31, 0x3e	; 62
    3094:	83 83       	std	Z+3, r24	; 0x03
    3096:	94 83       	std	Z+4, r25	; 0x04
    3098:	a5 83       	std	Z+5, r26	; 0x05
    309a:	b6 83       	std	Z+6, r27	; 0x06
    309c:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    30a0:	83 e6       	ldi	r24, 0x63	; 99
    30a2:	94 e0       	ldi	r25, 0x04	; 4
    30a4:	ad b7       	in	r26, 0x3d	; 61
    30a6:	be b7       	in	r27, 0x3e	; 62
    30a8:	11 96       	adiw	r26, 0x01	; 1
    30aa:	8d 93       	st	X+, r24
    30ac:	9c 93       	st	X, r25
    30ae:	12 97       	sbiw	r26, 0x02	; 2
    30b0:	f8 01       	movw	r30, r16
    30b2:	85 8d       	ldd	r24, Z+29	; 0x1d
    30b4:	96 8d       	ldd	r25, Z+30	; 0x1e
    30b6:	a7 8d       	ldd	r26, Z+31	; 0x1f
    30b8:	b0 a1       	ldd	r27, Z+32	; 0x20
    30ba:	ed b7       	in	r30, 0x3d	; 61
    30bc:	fe b7       	in	r31, 0x3e	; 62
    30be:	83 83       	std	Z+3, r24	; 0x03
    30c0:	94 83       	std	Z+4, r25	; 0x04
    30c2:	a5 83       	std	Z+5, r26	; 0x05
    30c4:	b6 83       	std	Z+6, r27	; 0x06
    30c6:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    30ca:	0f 90       	pop	r0
    30cc:	0f 90       	pop	r0
    30ce:	ed b7       	in	r30, 0x3d	; 61
    30d0:	fe b7       	in	r31, 0x3e	; 62
    30d2:	31 96       	adiw	r30, 0x01	; 1
    30d4:	82 e3       	ldi	r24, 0x32	; 50
    30d6:	94 e0       	ldi	r25, 0x04	; 4
    30d8:	ad b7       	in	r26, 0x3d	; 61
    30da:	be b7       	in	r27, 0x3e	; 62
    30dc:	11 96       	adiw	r26, 0x01	; 1
    30de:	8d 93       	st	X+, r24
    30e0:	9c 93       	st	X, r25
    30e2:	12 97       	sbiw	r26, 0x02	; 2
    30e4:	d8 01       	movw	r26, r16
    30e6:	95 96       	adiw	r26, 0x25	; 37
    30e8:	8c 91       	ld	r24, X
    30ea:	82 83       	std	Z+2, r24	; 0x02
    30ec:	13 82       	std	Z+3, r1	; 0x03
    30ee:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    30f2:	ed b7       	in	r30, 0x3d	; 61
    30f4:	fe b7       	in	r31, 0x3e	; 62
    30f6:	31 96       	adiw	r30, 0x01	; 1
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	94 e0       	ldi	r25, 0x04	; 4
    30fc:	ad b7       	in	r26, 0x3d	; 61
    30fe:	be b7       	in	r27, 0x3e	; 62
    3100:	11 96       	adiw	r26, 0x01	; 1
    3102:	8d 93       	st	X+, r24
    3104:	9c 93       	st	X, r25
    3106:	12 97       	sbiw	r26, 0x02	; 2
    3108:	d8 01       	movw	r26, r16
    310a:	1f 96       	adiw	r26, 0x0f	; 15
    310c:	8c 91       	ld	r24, X
    310e:	82 83       	std	Z+2, r24	; 0x02
    3110:	13 82       	std	Z+3, r1	; 0x03
    3112:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    3116:	ed b7       	in	r30, 0x3d	; 61
    3118:	fe b7       	in	r31, 0x3e	; 62
    311a:	31 96       	adiw	r30, 0x01	; 1
    311c:	81 ed       	ldi	r24, 0xD1	; 209
    311e:	93 e0       	ldi	r25, 0x03	; 3
    3120:	ad b7       	in	r26, 0x3d	; 61
    3122:	be b7       	in	r27, 0x3e	; 62
    3124:	11 96       	adiw	r26, 0x01	; 1
    3126:	8d 93       	st	X+, r24
    3128:	9c 93       	st	X, r25
    312a:	12 97       	sbiw	r26, 0x02	; 2
    312c:	d8 01       	movw	r26, r16
    312e:	50 96       	adiw	r26, 0x10	; 16
    3130:	8c 91       	ld	r24, X
    3132:	82 83       	std	Z+2, r24	; 0x02
    3134:	13 82       	std	Z+3, r1	; 0x03
    3136:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    313a:	0f 92       	push	r0
    313c:	0f 92       	push	r0
    313e:	8d e9       	ldi	r24, 0x9D	; 157
    3140:	93 e0       	ldi	r25, 0x03	; 3
    3142:	ed b7       	in	r30, 0x3d	; 61
    3144:	fe b7       	in	r31, 0x3e	; 62
    3146:	81 83       	std	Z+1, r24	; 0x01
    3148:	92 83       	std	Z+2, r25	; 0x02
    314a:	f8 01       	movw	r30, r16
    314c:	81 a1       	ldd	r24, Z+33	; 0x21
    314e:	92 a1       	ldd	r25, Z+34	; 0x22
    3150:	a3 a1       	ldd	r26, Z+35	; 0x23
    3152:	b4 a1       	ldd	r27, Z+36	; 0x24
    3154:	ed b7       	in	r30, 0x3d	; 61
    3156:	fe b7       	in	r31, 0x3e	; 62
    3158:	83 83       	std	Z+3, r24	; 0x03
    315a:	94 83       	std	Z+4, r25	; 0x04
    315c:	a5 83       	std	Z+5, r26	; 0x05
    315e:	b6 83       	std	Z+6, r27	; 0x06
    3160:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
    3164:	8d b7       	in	r24, 0x3d	; 61
    3166:	9e b7       	in	r25, 0x3e	; 62
    3168:	06 96       	adiw	r24, 0x06	; 6
    316a:	8d bf       	out	0x3d, r24	; 61
    316c:	9e bf       	out	0x3e, r25	; 62
}
    316e:	1f 91       	pop	r17
    3170:	0f 91       	pop	r16
    3172:	ff 90       	pop	r15
    3174:	ef 90       	pop	r14
    3176:	08 95       	ret

00003178 <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    3178:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    317a:	00 d0       	rcall	.+0      	; 0x317c <cfg_dump+0x4>
    317c:	0f 92       	push	r0
    317e:	ed b7       	in	r30, 0x3d	; 61
    3180:	fe b7       	in	r31, 0x3e	; 62
    3182:	31 96       	adiw	r30, 0x01	; 1
    3184:	87 e6       	ldi	r24, 0x67	; 103
    3186:	96 e0       	ldi	r25, 0x06	; 6
    3188:	ad b7       	in	r26, 0x3d	; 61
    318a:	be b7       	in	r27, 0x3e	; 62
    318c:	11 96       	adiw	r26, 0x01	; 1
    318e:	8d 93       	st	X+, r24
    3190:	9c 93       	st	X, r25
    3192:	12 97       	sbiw	r26, 0x02	; 2
    3194:	80 91 4f 22 	lds	r24, 0x224F
    3198:	82 83       	std	Z+2, r24	; 0x02
    319a:	13 82       	std	Z+3, r1	; 0x03
    319c:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	80 e4       	ldi	r24, 0x40	; 64
    31a6:	96 e0       	ldi	r25, 0x06	; 6
    31a8:	ed b7       	in	r30, 0x3d	; 61
    31aa:	fe b7       	in	r31, 0x3e	; 62
    31ac:	81 83       	std	Z+1, r24	; 0x01
    31ae:	92 83       	std	Z+2, r25	; 0x02
    31b0:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    31b4:	00 d0       	rcall	.+0      	; 0x31b6 <cfg_dump+0x3e>
    31b6:	0f 92       	push	r0
    31b8:	86 e1       	ldi	r24, 0x16	; 22
    31ba:	96 e0       	ldi	r25, 0x06	; 6
    31bc:	ad b7       	in	r26, 0x3d	; 61
    31be:	be b7       	in	r27, 0x3e	; 62
    31c0:	11 96       	adiw	r26, 0x01	; 1
    31c2:	8d 93       	st	X+, r24
    31c4:	9c 93       	st	X, r25
    31c6:	12 97       	sbiw	r26, 0x02	; 2
    31c8:	80 91 51 22 	lds	r24, 0x2251
    31cc:	90 91 52 22 	lds	r25, 0x2252
    31d0:	a0 91 53 22 	lds	r26, 0x2253
    31d4:	b0 91 54 22 	lds	r27, 0x2254
    31d8:	ed b7       	in	r30, 0x3d	; 61
    31da:	fe b7       	in	r31, 0x3e	; 62
    31dc:	83 83       	std	Z+3, r24	; 0x03
    31de:	94 83       	std	Z+4, r25	; 0x04
    31e0:	a5 83       	std	Z+5, r26	; 0x05
    31e2:	b6 83       	std	Z+6, r27	; 0x06
    31e4:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    31e8:	8c ee       	ldi	r24, 0xEC	; 236
    31ea:	95 e0       	ldi	r25, 0x05	; 5
    31ec:	ad b7       	in	r26, 0x3d	; 61
    31ee:	be b7       	in	r27, 0x3e	; 62
    31f0:	11 96       	adiw	r26, 0x01	; 1
    31f2:	8d 93       	st	X+, r24
    31f4:	9c 93       	st	X, r25
    31f6:	12 97       	sbiw	r26, 0x02	; 2
    31f8:	80 91 59 22 	lds	r24, 0x2259
    31fc:	90 91 5a 22 	lds	r25, 0x225A
    3200:	a0 91 5b 22 	lds	r26, 0x225B
    3204:	b0 91 5c 22 	lds	r27, 0x225C
    3208:	ed b7       	in	r30, 0x3d	; 61
    320a:	fe b7       	in	r31, 0x3e	; 62
    320c:	83 83       	std	Z+3, r24	; 0x03
    320e:	94 83       	std	Z+4, r25	; 0x04
    3210:	a5 83       	std	Z+5, r26	; 0x05
    3212:	b6 83       	std	Z+6, r27	; 0x06
    3214:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    3218:	81 ec       	ldi	r24, 0xC1	; 193
    321a:	95 e0       	ldi	r25, 0x05	; 5
    321c:	ad b7       	in	r26, 0x3d	; 61
    321e:	be b7       	in	r27, 0x3e	; 62
    3220:	11 96       	adiw	r26, 0x01	; 1
    3222:	8d 93       	st	X+, r24
    3224:	9c 93       	st	X, r25
    3226:	12 97       	sbiw	r26, 0x02	; 2
    3228:	80 91 55 22 	lds	r24, 0x2255
    322c:	90 91 56 22 	lds	r25, 0x2256
    3230:	a0 91 57 22 	lds	r26, 0x2257
    3234:	b0 91 58 22 	lds	r27, 0x2258
    3238:	ed b7       	in	r30, 0x3d	; 61
    323a:	fe b7       	in	r31, 0x3e	; 62
    323c:	83 83       	std	Z+3, r24	; 0x03
    323e:	94 83       	std	Z+4, r25	; 0x04
    3240:	a5 83       	std	Z+5, r26	; 0x05
    3242:	b6 83       	std	Z+6, r27	; 0x06
    3244:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
    3248:	10 e0       	ldi	r17, 0x00	; 0
    324a:	8d b7       	in	r24, 0x3d	; 61
    324c:	9e b7       	in	r25, 0x3e	; 62
    324e:	06 96       	adiw	r24, 0x06	; 6
    3250:	8d bf       	out	0x3d, r24	; 61
    3252:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
		_cfg_dump_axis(axis);
    3254:	81 2f       	mov	r24, r17
    3256:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    325a:	1f 5f       	subi	r17, 0xFF	; 255
    325c:	14 30       	cpi	r17, 0x04	; 4
    325e:	d1 f7       	brne	.-12     	; 0x3254 <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    3260:	1f 91       	pop	r17
    3262:	08 95       	ret

00003264 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    3264:	cf 92       	push	r12
    3266:	df 92       	push	r13
    3268:	ef 92       	push	r14
    326a:	ff 92       	push	r15
    326c:	0f 93       	push	r16
    326e:	1f 93       	push	r17
    3270:	df 93       	push	r29
    3272:	cf 93       	push	r28
    3274:	0f 92       	push	r0
    3276:	0f 92       	push	r0
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62
    327c:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    327e:	19 82       	std	Y+1, r1	; 0x01
    3280:	1a 82       	std	Y+2, r1	; 0x02
    3282:	cc 24       	eor	r12, r12
    3284:	dd 24       	eor	r13, r13
    3286:	00 e0       	ldi	r16, 0x00	; 0
    3288:	10 e0       	ldi	r17, 0x00	; 0
    328a:	22 c0       	rjmp	.+68     	; 0x32d0 <cfg_parse+0x6c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = toupper(text[i++])) != 0) {
		if (c == '=') {							// handle separator
    328c:	9d 33       	cpi	r25, 0x3D	; 61
    328e:	49 f4       	brne	.+18     	; 0x32a2 <cfg_parse+0x3e>
			text[j++] = 0;						// terminate tag at separator
    3290:	f7 01       	movw	r30, r14
    3292:	e1 0f       	add	r30, r17
    3294:	f1 1d       	adc	r31, r1
    3296:	10 82       	st	Z, r1
    3298:	1f 5f       	subi	r17, 0xFF	; 255
			val = &text[j];						// new string starts at value
    329a:	67 01       	movw	r12, r14
    329c:	c1 0e       	add	r12, r17
    329e:	d1 1c       	adc	r13, r1
    32a0:	17 c0       	rjmp	.+46     	; 0x32d0 <cfg_parse+0x6c>
		} else if ( (c == '-') || 				// capture special characters
    32a2:	9d 32       	cpi	r25, 0x2D	; 45
    32a4:	81 f0       	breq	.+32     	; 0x32c6 <cfg_parse+0x62>
    32a6:	9b 32       	cpi	r25, 0x2B	; 43
    32a8:	71 f0       	breq	.+28     	; 0x32c6 <cfg_parse+0x62>
    32aa:	9e 32       	cpi	r25, 0x2E	; 46
    32ac:	61 f0       	breq	.+24     	; 0x32c6 <cfg_parse+0x62>
    32ae:	9f 33       	cpi	r25, 0x3F	; 63
    32b0:	51 f0       	breq	.+20     	; 0x32c6 <cfg_parse+0x62>
    32b2:	98 32       	cpi	r25, 0x28	; 40
    32b4:	41 f0       	breq	.+16     	; 0x32c6 <cfg_parse+0x62>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'A' && c <= 'Z') {		// capture letters
    32b6:	89 2f       	mov	r24, r25
    32b8:	81 54       	subi	r24, 0x41	; 65
    32ba:	8a 31       	cpi	r24, 0x1A	; 26
    32bc:	20 f0       	brcs	.+8      	; 0x32c6 <cfg_parse+0x62>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// capture numbers
    32be:	89 2f       	mov	r24, r25
    32c0:	80 53       	subi	r24, 0x30	; 48
    32c2:	8a 30       	cpi	r24, 0x0A	; 10
    32c4:	28 f4       	brcc	.+10     	; 0x32d0 <cfg_parse+0x6c>
			text[j++] = c;
    32c6:	f7 01       	movw	r30, r14
    32c8:	e1 0f       	add	r30, r17
    32ca:	f1 1d       	adc	r31, r1
    32cc:	90 83       	st	Z, r25
    32ce:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = toupper(text[i++])) != 0) {
    32d0:	f7 01       	movw	r30, r14
    32d2:	e0 0f       	add	r30, r16
    32d4:	f1 1d       	adc	r31, r1
    32d6:	0f 5f       	subi	r16, 0xFF	; 255
    32d8:	80 81       	ld	r24, Z
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	0e 94 dd 48 	call	0x91ba	; 0x91ba <toupper>
    32e0:	98 2f       	mov	r25, r24
    32e2:	88 23       	and	r24, r24
    32e4:	99 f6       	brne	.-90     	; 0x328c <cfg_parse+0x28>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// capture numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// nul terminate line
    32e6:	f7 01       	movw	r30, r14
    32e8:	e1 0f       	add	r30, r17
    32ea:	f1 1d       	adc	r31, r1
    32ec:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    32ee:	1f 5f       	subi	r17, 0xFF	; 255
    32f0:	c7 01       	movw	r24, r14
    32f2:	81 0f       	add	r24, r17
    32f4:	91 1d       	adc	r25, r1
    32f6:	89 83       	std	Y+1, r24	; 0x01
    32f8:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    32fa:	10 92 50 22 	sts	0x2250, r1
	switch (text[0]) {
    32fe:	f7 01       	movw	r30, r14
    3300:	80 81       	ld	r24, Z
    3302:	81 35       	cpi	r24, 0x51	; 81
    3304:	d1 f0       	breq	.+52     	; 0x333a <cfg_parse+0xd6>
    3306:	82 35       	cpi	r24, 0x52	; 82
    3308:	60 f4       	brcc	.+24     	; 0x3322 <cfg_parse+0xbe>
    330a:	81 34       	cpi	r24, 0x41	; 65
    330c:	59 f1       	breq	.+86     	; 0x3364 <cfg_parse+0x100>
    330e:	82 34       	cpi	r24, 0x42	; 66
    3310:	28 f4       	brcc	.+10     	; 0x331c <cfg_parse+0xb8>
    3312:	88 32       	cpi	r24, 0x28	; 40
    3314:	11 f1       	breq	.+68     	; 0x335a <cfg_parse+0xf6>
    3316:	8f 33       	cpi	r24, 0x3F	; 63
    3318:	39 f5       	brne	.+78     	; 0x3368 <cfg_parse+0x104>
    331a:	0c c0       	rjmp	.+24     	; 0x3334 <cfg_parse+0xd0>
    331c:	8d 34       	cpi	r24, 0x4D	; 77
    331e:	21 f5       	brne	.+72     	; 0x3368 <cfg_parse+0x104>
    3320:	0e c0       	rjmp	.+28     	; 0x333e <cfg_parse+0xda>
    3322:	89 35       	cpi	r24, 0x59	; 89
    3324:	29 f0       	breq	.+10     	; 0x3330 <cfg_parse+0xcc>
    3326:	8a 35       	cpi	r24, 0x5A	; 90
    3328:	d9 f0       	breq	.+54     	; 0x3360 <cfg_parse+0xfc>
    332a:	88 35       	cpi	r24, 0x58	; 88
    332c:	e9 f4       	brne	.+58     	; 0x3368 <cfg_parse+0x104>
    332e:	1f c0       	rjmp	.+62     	; 0x336e <cfg_parse+0x10a>
    3330:	11 e0       	ldi	r17, 0x01	; 1
    3332:	1e c0       	rjmp	.+60     	; 0x3370 <cfg_parse+0x10c>
		case '?': cfg_dump(); cfg.status = TG_OK; break;
    3334:	0e 94 bc 18 	call	0x3178	; 0x3178 <cfg_dump>
    3338:	10 c0       	rjmp	.+32     	; 0x335a <cfg_parse+0xf6>
		case '(': cfg.status = TG_OK; break;		// ignore comment lines
		case 'Q': cfg.status = TG_QUIT; break;
    333a:	8b e0       	ldi	r24, 0x0B	; 11
    333c:	16 c0       	rjmp	.+44     	; 0x336a <cfg_parse+0x106>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    333e:	c6 01       	movw	r24, r12
    3340:	be 01       	movw	r22, r28
    3342:	6f 5f       	subi	r22, 0xFF	; 255
    3344:	7f 4f       	sbci	r23, 0xFF	; 255
    3346:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <strtod>
    334a:	60 93 51 22 	sts	0x2251, r22
    334e:	70 93 52 22 	sts	0x2252, r23
    3352:	80 93 53 22 	sts	0x2253, r24
    3356:	90 93 54 22 	sts	0x2254, r25
				  cfg.status = TG_OK; 
    335a:	10 92 50 22 	sts	0x2250, r1
    335e:	07 c0       	rjmp	.+14     	; 0x336e <cfg_parse+0x10a>
				  break;
    3360:	12 e0       	ldi	r17, 0x02	; 2
    3362:	06 c0       	rjmp	.+12     	; 0x3370 <cfg_parse+0x10c>

		case 'X': axis = X; break;
		case 'Y': axis = Y; break;
		case 'Z': axis = Z; break;
    3364:	13 e0       	ldi	r17, 0x03	; 3
    3366:	04 c0       	rjmp	.+8      	; 0x3370 <cfg_parse+0x10c>
		case 'A': axis = A; break;

		default: cfg.status = TG_UNRECOGNIZED_COMMAND; 	// error return
    3368:	8c e0       	ldi	r24, 0x0C	; 12
    336a:	80 93 50 22 	sts	0x2250, r24
    336e:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    3370:	80 91 50 22 	lds	r24, 0x2250
    3374:	88 23       	and	r24, r24
    3376:	09 f0       	breq	.+2      	; 0x337a <cfg_parse+0x116>
    3378:	ee c0       	rjmp	.+476    	; 0x3556 <cfg_parse+0x2f2>
		cfg.status = TG_OK;							// pre-emptive setting
    337a:	10 92 50 22 	sts	0x2250, r1
		switch (text[1]) {
    337e:	f7 01       	movw	r30, r14
    3380:	81 81       	ldd	r24, Z+1	; 0x01
    3382:	8c 34       	cpi	r24, 0x4C	; 76
    3384:	09 f4       	brne	.+2      	; 0x3388 <cfg_parse+0x124>
    3386:	b8 c0       	rjmp	.+368    	; 0x34f8 <cfg_parse+0x294>
    3388:	8d 34       	cpi	r24, 0x4D	; 77
    338a:	30 f4       	brcc	.+12     	; 0x3398 <cfg_parse+0x134>
    338c:	84 34       	cpi	r24, 0x44	; 68
    338e:	a9 f1       	breq	.+106    	; 0x33fa <cfg_parse+0x196>
    3390:	86 34       	cpi	r24, 0x46	; 70
    3392:	09 f0       	breq	.+2      	; 0x3396 <cfg_parse+0x132>
    3394:	dd c0       	rjmp	.+442    	; 0x3550 <cfg_parse+0x2ec>
    3396:	1d c0       	rjmp	.+58     	; 0x33d2 <cfg_parse+0x16e>
    3398:	80 35       	cpi	r24, 0x50	; 80
    339a:	09 f4       	brne	.+2      	; 0x339e <cfg_parse+0x13a>
    339c:	47 c0       	rjmp	.+142    	; 0x342c <cfg_parse+0x1c8>
    339e:	83 35       	cpi	r24, 0x53	; 83
    33a0:	21 f0       	breq	.+8      	; 0x33aa <cfg_parse+0x146>
    33a2:	8d 34       	cpi	r24, 0x4D	; 77
    33a4:	09 f0       	breq	.+2      	; 0x33a8 <cfg_parse+0x144>
    33a6:	d4 c0       	rjmp	.+424    	; 0x3550 <cfg_parse+0x2ec>
    33a8:	58 c0       	rjmp	.+176    	; 0x345a <cfg_parse+0x1f6>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    33aa:	c6 01       	movw	r24, r12
    33ac:	0e 94 d6 47 	call	0x8fac	; 0x8fac <atoi>
    33b0:	21 2f       	mov	r18, r17
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	f9 01       	movw	r30, r18
    33b6:	ee 0f       	add	r30, r30
    33b8:	ff 1f       	adc	r31, r31
    33ba:	e2 0f       	add	r30, r18
    33bc:	f3 1f       	adc	r31, r19
    33be:	23 e0       	ldi	r18, 0x03	; 3
    33c0:	ee 0f       	add	r30, r30
    33c2:	ff 1f       	adc	r31, r31
    33c4:	2a 95       	dec	r18
    33c6:	e1 f7       	brne	.-8      	; 0x33c0 <cfg_parse+0x15c>
    33c8:	e1 5b       	subi	r30, 0xB1	; 177
    33ca:	fd 4d       	sbci	r31, 0xDD	; 221
    33cc:	81 8b       	std	Z+17, r24	; 0x11
    33ce:	92 8b       	std	Z+18, r25	; 0x12
    33d0:	c2 c0       	rjmp	.+388    	; 0x3556 <cfg_parse+0x2f2>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    33d2:	c6 01       	movw	r24, r12
    33d4:	0e 94 d6 47 	call	0x8fac	; 0x8fac <atoi>
    33d8:	21 2f       	mov	r18, r17
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	f9 01       	movw	r30, r18
    33de:	ee 0f       	add	r30, r30
    33e0:	ff 1f       	adc	r31, r31
    33e2:	e2 0f       	add	r30, r18
    33e4:	f3 1f       	adc	r31, r19
    33e6:	13 e0       	ldi	r17, 0x03	; 3
    33e8:	ee 0f       	add	r30, r30
    33ea:	ff 1f       	adc	r31, r31
    33ec:	1a 95       	dec	r17
    33ee:	e1 f7       	brne	.-8      	; 0x33e8 <cfg_parse+0x184>
    33f0:	e1 5b       	subi	r30, 0xB1	; 177
    33f2:	fd 4d       	sbci	r31, 0xDD	; 221
    33f4:	83 8b       	std	Z+19, r24	; 0x13
    33f6:	94 8b       	std	Z+20, r25	; 0x14
    33f8:	ae c0       	rjmp	.+348    	; 0x3556 <cfg_parse+0x2f2>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    33fa:	c6 01       	movw	r24, r12
    33fc:	be 01       	movw	r22, r28
    33fe:	6f 5f       	subi	r22, 0xFF	; 255
    3400:	7f 4f       	sbci	r23, 0xFF	; 255
    3402:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <strtod>
    3406:	21 2f       	mov	r18, r17
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	f9 01       	movw	r30, r18
    340c:	ee 0f       	add	r30, r30
    340e:	ff 1f       	adc	r31, r31
    3410:	e2 0f       	add	r30, r18
    3412:	f3 1f       	adc	r31, r19
    3414:	a3 e0       	ldi	r26, 0x03	; 3
    3416:	ee 0f       	add	r30, r30
    3418:	ff 1f       	adc	r31, r31
    341a:	aa 95       	dec	r26
    341c:	e1 f7       	brne	.-8      	; 0x3416 <cfg_parse+0x1b2>
    341e:	e1 5b       	subi	r30, 0xB1	; 177
    3420:	fd 4d       	sbci	r31, 0xDD	; 221
    3422:	65 8b       	std	Z+21, r22	; 0x15
    3424:	76 8b       	std	Z+22, r23	; 0x16
    3426:	87 8b       	std	Z+23, r24	; 0x17
    3428:	90 8f       	std	Z+24, r25	; 0x18
    342a:	95 c0       	rjmp	.+298    	; 0x3556 <cfg_parse+0x2f2>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    342c:	c6 01       	movw	r24, r12
    342e:	0e 94 d6 47 	call	0x8fac	; 0x8fac <atoi>
    3432:	68 2f       	mov	r22, r24
    3434:	81 2f       	mov	r24, r17
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	fc 01       	movw	r30, r24
    343a:	ee 0f       	add	r30, r30
    343c:	ff 1f       	adc	r31, r31
    343e:	e8 0f       	add	r30, r24
    3440:	f9 1f       	adc	r31, r25
    3442:	53 e0       	ldi	r21, 0x03	; 3
    3444:	ee 0f       	add	r30, r30
    3446:	ff 1f       	adc	r31, r31
    3448:	5a 95       	dec	r21
    344a:	e1 f7       	brne	.-8      	; 0x3444 <cfg_parse+0x1e0>
    344c:	e1 5b       	subi	r30, 0xB1	; 177
    344e:	fd 4d       	sbci	r31, 0xDD	; 221
    3450:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    3452:	81 2f       	mov	r24, r17
    3454:	0e 94 f6 24 	call	0x49ec	; 0x49ec <st_set_polarity>
    3458:	7e c0       	rjmp	.+252    	; 0x3556 <cfg_parse+0x2f2>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    345a:	f7 01       	movw	r30, r14
    345c:	82 81       	ldd	r24, Z+2	; 0x02
    345e:	89 34       	cpi	r24, 0x49	; 73
    3460:	99 f4       	brne	.+38     	; 0x3488 <cfg_parse+0x224>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    3462:	c6 01       	movw	r24, r12
    3464:	0e 94 d6 47 	call	0x8fac	; 0x8fac <atoi>
    3468:	21 2f       	mov	r18, r17
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	f9 01       	movw	r30, r18
    346e:	ee 0f       	add	r30, r30
    3470:	ff 1f       	adc	r31, r31
    3472:	e2 0f       	add	r30, r18
    3474:	f3 1f       	adc	r31, r19
    3476:	93 e0       	ldi	r25, 0x03	; 3
    3478:	ee 0f       	add	r30, r30
    347a:	ff 1f       	adc	r31, r31
    347c:	9a 95       	dec	r25
    347e:	e1 f7       	brne	.-8      	; 0x3478 <cfg_parse+0x214>
    3480:	e1 5b       	subi	r30, 0xB1	; 177
    3482:	fd 4d       	sbci	r31, 0xDD	; 221
    3484:	86 87       	std	Z+14, r24	; 0x0e
    3486:	67 c0       	rjmp	.+206    	; 0x3556 <cfg_parse+0x2f2>
				} else if (text[3] == 'R') {
    3488:	f7 01       	movw	r30, r14
    348a:	83 81       	ldd	r24, Z+3	; 0x03
    348c:	82 35       	cpi	r24, 0x52	; 82
    348e:	c9 f4       	brne	.+50     	; 0x34c2 <cfg_parse+0x25e>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    3490:	c6 01       	movw	r24, r12
    3492:	be 01       	movw	r22, r28
    3494:	6f 5f       	subi	r22, 0xFF	; 255
    3496:	7f 4f       	sbci	r23, 0xFF	; 255
    3498:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <strtod>
    349c:	21 2f       	mov	r18, r17
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	f9 01       	movw	r30, r18
    34a2:	ee 0f       	add	r30, r30
    34a4:	ff 1f       	adc	r31, r31
    34a6:	e2 0f       	add	r30, r18
    34a8:	f3 1f       	adc	r31, r19
    34aa:	13 e0       	ldi	r17, 0x03	; 3
    34ac:	ee 0f       	add	r30, r30
    34ae:	ff 1f       	adc	r31, r31
    34b0:	1a 95       	dec	r17
    34b2:	e1 f7       	brne	.-8      	; 0x34ac <cfg_parse+0x248>
    34b4:	e1 5b       	subi	r30, 0xB1	; 177
    34b6:	fd 4d       	sbci	r31, 0xDD	; 221
    34b8:	61 8f       	std	Z+25, r22	; 0x19
    34ba:	72 8f       	std	Z+26, r23	; 0x1a
    34bc:	83 8f       	std	Z+27, r24	; 0x1b
    34be:	94 8f       	std	Z+28, r25	; 0x1c
    34c0:	4a c0       	rjmp	.+148    	; 0x3556 <cfg_parse+0x2f2>
				} else if (text[3] == 'T') {
    34c2:	84 35       	cpi	r24, 0x54	; 84
    34c4:	c9 f4       	brne	.+50     	; 0x34f8 <cfg_parse+0x294>
					CFG(axis).mm_travel = strtod(val, &end); break;
    34c6:	c6 01       	movw	r24, r12
    34c8:	be 01       	movw	r22, r28
    34ca:	6f 5f       	subi	r22, 0xFF	; 255
    34cc:	7f 4f       	sbci	r23, 0xFF	; 255
    34ce:	0e 94 68 46 	call	0x8cd0	; 0x8cd0 <strtod>
    34d2:	21 2f       	mov	r18, r17
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	f9 01       	movw	r30, r18
    34d8:	ee 0f       	add	r30, r30
    34da:	ff 1f       	adc	r31, r31
    34dc:	e2 0f       	add	r30, r18
    34de:	f3 1f       	adc	r31, r19
    34e0:	a3 e0       	ldi	r26, 0x03	; 3
    34e2:	ee 0f       	add	r30, r30
    34e4:	ff 1f       	adc	r31, r31
    34e6:	aa 95       	dec	r26
    34e8:	e1 f7       	brne	.-8      	; 0x34e2 <cfg_parse+0x27e>
    34ea:	e1 5b       	subi	r30, 0xB1	; 177
    34ec:	fd 4d       	sbci	r31, 0xDD	; 221
    34ee:	65 8f       	std	Z+29, r22	; 0x1d
    34f0:	76 8f       	std	Z+30, r23	; 0x1e
    34f2:	87 8f       	std	Z+31, r24	; 0x1f
    34f4:	90 a3       	std	Z+32, r25	; 0x20
    34f6:	2f c0       	rjmp	.+94     	; 0x3556 <cfg_parse+0x2f2>
				}
			case 'L': 
				if (text[2] == 'O') {
    34f8:	f7 01       	movw	r30, r14
    34fa:	82 81       	ldd	r24, Z+2	; 0x02
    34fc:	8f 34       	cpi	r24, 0x4F	; 79
    34fe:	99 f4       	brne	.+38     	; 0x3526 <cfg_parse+0x2c2>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    3500:	c6 01       	movw	r24, r12
    3502:	0e 94 d6 47 	call	0x8fac	; 0x8fac <atoi>
    3506:	21 2f       	mov	r18, r17
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	f9 01       	movw	r30, r18
    350c:	ee 0f       	add	r30, r30
    350e:	ff 1f       	adc	r31, r31
    3510:	e2 0f       	add	r30, r18
    3512:	f3 1f       	adc	r31, r19
    3514:	53 e0       	ldi	r21, 0x03	; 3
    3516:	ee 0f       	add	r30, r30
    3518:	ff 1f       	adc	r31, r31
    351a:	5a 95       	dec	r21
    351c:	e1 f7       	brne	.-8      	; 0x3516 <cfg_parse+0x2b2>
    351e:	e1 5b       	subi	r30, 0xB1	; 177
    3520:	fd 4d       	sbci	r31, 0xDD	; 221
    3522:	87 87       	std	Z+15, r24	; 0x0f
    3524:	18 c0       	rjmp	.+48     	; 0x3556 <cfg_parse+0x2f2>
				} else if (text[2] == 'I') {
    3526:	89 34       	cpi	r24, 0x49	; 73
    3528:	99 f4       	brne	.+38     	; 0x3550 <cfg_parse+0x2ec>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    352a:	c6 01       	movw	r24, r12
    352c:	0e 94 d6 47 	call	0x8fac	; 0x8fac <atoi>
    3530:	21 2f       	mov	r18, r17
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	f9 01       	movw	r30, r18
    3536:	ee 0f       	add	r30, r30
    3538:	ff 1f       	adc	r31, r31
    353a:	e2 0f       	add	r30, r18
    353c:	f3 1f       	adc	r31, r19
    353e:	23 e0       	ldi	r18, 0x03	; 3
    3540:	ee 0f       	add	r30, r30
    3542:	ff 1f       	adc	r31, r31
    3544:	2a 95       	dec	r18
    3546:	e1 f7       	brne	.-8      	; 0x3540 <cfg_parse+0x2dc>
    3548:	e1 5b       	subi	r30, 0xB1	; 177
    354a:	fd 4d       	sbci	r31, 0xDD	; 221
    354c:	85 a3       	std	Z+37, r24	; 0x25
    354e:	03 c0       	rjmp	.+6      	; 0x3556 <cfg_parse+0x2f2>
				}

			default: cfg.status = TG_UNRECOGNIZED_COMMAND;	// error return
    3550:	8c e0       	ldi	r24, 0x0C	; 12
    3552:	80 93 50 22 	sts	0x2250, r24
		}
	}
//	cfg_write();
	return (cfg.status);
}
    3556:	80 91 50 22 	lds	r24, 0x2250
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	cf 91       	pop	r28
    3562:	df 91       	pop	r29
    3564:	1f 91       	pop	r17
    3566:	0f 91       	pop	r16
    3568:	ff 90       	pop	r15
    356a:	ef 90       	pop	r14
    356c:	df 90       	pop	r13
    356e:	cf 90       	pop	r12
    3570:	08 95       	ret

00003572 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3572:	ef 92       	push	r14
    3574:	ff 92       	push	r15
    3576:	0f 93       	push	r16
    3578:	1f 93       	push	r17
    357a:	df 93       	push	r29
    357c:	cf 93       	push	r28
    357e:	cd b7       	in	r28, 0x3d	; 61
    3580:	de b7       	in	r29, 0x3e	; 62
    3582:	a8 97       	sbiw	r28, 0x28	; 40
    3584:	cd bf       	out	0x3d, r28	; 61
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	0f e4       	ldi	r16, 0x4F	; 79
    358a:	12 e0       	ldi	r17, 0x02	; 2
    358c:	a0 e0       	ldi	r26, 0x00	; 0
    358e:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    3590:	7e 01       	movw	r14, r28
    3592:	08 94       	sec
    3594:	e1 1c       	adc	r14, r1
    3596:	f1 1c       	adc	r15, r1
    3598:	02 c0       	rjmp	.+4      	; 0x359e <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    359a:	0f 5f       	subi	r16, 0xFF	; 255
    359c:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    359e:	f8 01       	movw	r30, r16
    35a0:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    35a2:	88 23       	and	r24, r24
    35a4:	89 f4       	brne	.+34     	; 0x35c8 <cfg_test+0x56>
			text[j] = 0;
    35a6:	ce 01       	movw	r24, r28
    35a8:	01 96       	adiw	r24, 0x01	; 1
    35aa:	a8 0f       	add	r26, r24
    35ac:	b9 1f       	adc	r27, r25
    35ae:	1c 92       	st	X, r1
			cfg_parse(text);
    35b0:	0e 94 32 19 	call	0x3264	; 0x3264 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    35b4:	a8 96       	adiw	r28, 0x28	; 40
    35b6:	cd bf       	out	0x3d, r28	; 61
    35b8:	de bf       	out	0x3e, r29	; 62
    35ba:	cf 91       	pop	r28
    35bc:	df 91       	pop	r29
    35be:	1f 91       	pop	r17
    35c0:	0f 91       	pop	r16
    35c2:	ff 90       	pop	r15
    35c4:	ef 90       	pop	r14
    35c6:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    35c8:	8d 30       	cpi	r24, 0x0D	; 13
    35ca:	21 f0       	breq	.+8      	; 0x35d4 <cfg_test+0x62>
    35cc:	8a 30       	cpi	r24, 0x0A	; 10
    35ce:	11 f0       	breq	.+4      	; 0x35d4 <cfg_test+0x62>
    35d0:	8b 33       	cpi	r24, 0x3B	; 59
    35d2:	49 f4       	brne	.+18     	; 0x35e6 <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    35d4:	ae 0d       	add	r26, r14
    35d6:	bf 1d       	adc	r27, r15
    35d8:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    35da:	c7 01       	movw	r24, r14
    35dc:	0e 94 32 19 	call	0x3264	; 0x3264 <cfg_parse>
    35e0:	a0 e0       	ldi	r26, 0x00	; 0
    35e2:	b0 e0       	ldi	r27, 0x00	; 0
    35e4:	da cf       	rjmp	.-76     	; 0x359a <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    35e6:	81 32       	cpi	r24, 0x21	; 33
    35e8:	c0 f2       	brcs	.-80     	; 0x359a <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    35ea:	f7 01       	movw	r30, r14
    35ec:	ea 0f       	add	r30, r26
    35ee:	fb 1f       	adc	r31, r27
    35f0:	80 83       	st	Z, r24
    35f2:	11 96       	adiw	r26, 0x01	; 1
    35f4:	d2 cf       	rjmp	.-92     	; 0x359a <cfg_test+0x28>

000035f6 <en_init>:
static uint8_t encoder_port_value;

void en_init(void) 
{
	return;
}
    35f6:	08 95       	ret

000035f8 <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	encoder_port_value = b;
    35f8:	80 93 66 21 	sts	0x2166, r24

	if (b & 0x01) { 								// b0 is on A axis
    35fc:	98 2f       	mov	r25, r24
    35fe:	90 ff       	sbrs	r25, 0
    3600:	07 c0       	rjmp	.+14     	; 0x3610 <en_write+0x18>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    3602:	e0 91 4b 22 	lds	r30, 0x224B
    3606:	f0 91 4c 22 	lds	r31, 0x224C
    360a:	80 e2       	ldi	r24, 0x20	; 32
    360c:	85 83       	std	Z+5, r24	; 0x05
    360e:	06 c0       	rjmp	.+12     	; 0x361c <en_write+0x24>
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    3610:	e0 91 4b 22 	lds	r30, 0x224B
    3614:	f0 91 4c 22 	lds	r31, 0x224C
    3618:	80 e2       	ldi	r24, 0x20	; 32
    361a:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b & 0x02) { 								// b1 is on Z axis
    361c:	91 ff       	sbrs	r25, 1
    361e:	07 c0       	rjmp	.+14     	; 0x362e <en_write+0x36>
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    3620:	e0 91 3b 22 	lds	r30, 0x223B
    3624:	f0 91 3c 22 	lds	r31, 0x223C
    3628:	80 e2       	ldi	r24, 0x20	; 32
    362a:	85 83       	std	Z+5, r24	; 0x05
    362c:	06 c0       	rjmp	.+12     	; 0x363a <en_write+0x42>
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    362e:	e0 91 3b 22 	lds	r30, 0x223B
    3632:	f0 91 3c 22 	lds	r31, 0x223C
    3636:	80 e2       	ldi	r24, 0x20	; 32
    3638:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b & 0x04) { 								// b2 is on Y axis
    363a:	92 ff       	sbrs	r25, 2
    363c:	07 c0       	rjmp	.+14     	; 0x364c <en_write+0x54>
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    363e:	e0 91 2b 22 	lds	r30, 0x222B
    3642:	f0 91 2c 22 	lds	r31, 0x222C
    3646:	80 e2       	ldi	r24, 0x20	; 32
    3648:	85 83       	std	Z+5, r24	; 0x05
    364a:	06 c0       	rjmp	.+12     	; 0x3658 <en_write+0x60>
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    364c:	e0 91 2b 22 	lds	r30, 0x222B
    3650:	f0 91 2c 22 	lds	r31, 0x222C
    3654:	80 e2       	ldi	r24, 0x20	; 32
    3656:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b & 0x08) { 								// b3 is on X axis
    3658:	93 ff       	sbrs	r25, 3
    365a:	07 c0       	rjmp	.+14     	; 0x366a <en_write+0x72>
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    365c:	e0 91 1b 22 	lds	r30, 0x221B
    3660:	f0 91 1c 22 	lds	r31, 0x221C
    3664:	80 e2       	ldi	r24, 0x20	; 32
    3666:	85 83       	std	Z+5, r24	; 0x05
    3668:	08 95       	ret
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    366a:	e0 91 1b 22 	lds	r30, 0x221B
    366e:	f0 91 1c 22 	lds	r31, 0x221C
    3672:	80 e2       	ldi	r24, 0x20	; 32
    3674:	86 83       	std	Z+6, r24	; 0x06
    3676:	08 95       	ret

00003678 <en_toggle>:
 * en_toggle() - toggle lowest 4 bits of a byte to encoder output port
 */

void en_toggle(uint8_t b)
{
	encoder_port_value ^= b;	// xor the stored encoder value with b
    3678:	90 91 66 21 	lds	r25, 0x2166
    367c:	98 27       	eor	r25, r24
    367e:	90 93 66 21 	sts	0x2166, r25
	en_write(encoder_port_value);
    3682:	89 2f       	mov	r24, r25
    3684:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <en_write>
}
    3688:	08 95       	ret

0000368a <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    368a:	0f 93       	push	r16
    368c:	df 93       	push	r29
    368e:	cf 93       	push	r28
    3690:	0f 92       	push	r0
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    3696:	8b ec       	ldi	r24, 0xCB	; 203
    3698:	e0 e5       	ldi	r30, 0x50	; 80
    369a:	f0 e0       	ldi	r31, 0x00	; 0
    369c:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    369e:	88 e0       	ldi	r24, 0x08	; 8
    36a0:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    36a4:	80 91 51 00 	lds	r24, 0x0051
    36a8:	83 ff       	sbrs	r24, 3
    36aa:	fc cf       	rjmp	.-8      	; 0x36a4 <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    36ac:	82 ec       	ldi	r24, 0xC2	; 194
    36ae:	e0 e5       	ldi	r30, 0x50	; 80
    36b0:	f0 e0       	ldi	r31, 0x00	; 0
    36b2:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    36b4:	88 e1       	ldi	r24, 0x18	; 24
    36b6:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    36ba:	80 91 51 00 	lds	r24, 0x0051
    36be:	84 ff       	sbrs	r24, 4
    36c0:	fc cf       	rjmp	.-8      	; 0x36ba <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    36c2:	8f b7       	in	r24, 0x3f	; 63
    36c4:	89 83       	std	Y+1, r24	; 0x01
    36c6:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    36c8:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    36ca:	24 e0       	ldi	r18, 0x04	; 4
    36cc:	80 e4       	ldi	r24, 0x40	; 64
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	fc 01       	movw	r30, r24
    36d2:	08 ed       	ldi	r16, 0xD8	; 216
    36d4:	04 bf       	out	0x34, r16	; 52
    36d6:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    36d8:	89 81       	ldd	r24, Y+1	; 0x01
    36da:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    36dc:	80 91 50 00 	lds	r24, 0x0050
    36e0:	8e 7f       	andi	r24, 0xFE	; 254
    36e2:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    36e6:	0f 90       	pop	r0
    36e8:	cf 91       	pop	r28
    36ea:	df 91       	pop	r29
    36ec:	0f 91       	pop	r16
    36ee:	08 95       	ret

000036f0 <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    36f0:	0e 94 45 1b 	call	0x368a	; 0x368a <xmega_init_clocks>
}
    36f4:	08 95       	ret

000036f6 <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    36f6:	0f 93       	push	r16
    36f8:	df 93       	push	r29
    36fa:	cf 93       	push	r28
    36fc:	0f 92       	push	r0
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3702:	2f b7       	in	r18, 0x3f	; 63
    3704:	29 83       	std	Y+1, r18	; 0x01
    3706:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3708:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    370a:	fc 01       	movw	r30, r24
    370c:	08 ed       	ldi	r16, 0xD8	; 216
    370e:	04 bf       	out	0x34, r16	; 52
    3710:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3712:	89 81       	ldd	r24, Y+1	; 0x01
    3714:	8f bf       	out	0x3f, r24	; 63
#endif
}
    3716:	0f 90       	pop	r0
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	0f 91       	pop	r16
    371e:	08 95       	ret

00003720 <mc_motion_pause>:
 */

int mc_motion_pause()
{
	return (TG_OK);
}
    3720:	80 e0       	ldi	r24, 0x00	; 0
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	08 95       	ret

00003726 <mc_motion_resume>:
 */

int mc_motion_resume()
{
	return (TG_OK);
}
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	08 95       	ret

0000372c <mc_motion_end>:
 */

int mc_motion_end()
{
	return (TG_OK);
}
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	08 95       	ret

00003732 <mc_go_home>:
 */

int mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    3732:	8c e0       	ldi	r24, 0x0C	; 12
    3734:	e8 e6       	ldi	r30, 0x68	; 104
    3736:	f1 e2       	ldi	r31, 0x21	; 33
    3738:	df 01       	movw	r26, r30
    373a:	1d 92       	st	X+, r1
    373c:	8a 95       	dec	r24
    373e:	e9 f7       	brne	.-6      	; 0x373a <mc_go_home+0x8>
	return (TG_OK);
}
    3740:	80 e0       	ldi	r24, 0x00	; 0
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	08 95       	ret

00003746 <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    3746:	8c e0       	ldi	r24, 0x0C	; 12
    3748:	e8 e6       	ldi	r30, 0x68	; 104
    374a:	f1 e2       	ldi	r31, 0x21	; 33
    374c:	df 01       	movw	r26, r30
    374e:	1d 92       	st	X+, r1
    3750:	8a 95       	dec	r24
    3752:	e9 f7       	brne	.-6      	; 0x374e <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    3754:	10 92 67 21 	sts	0x2167, r1
	ma.arc_state = MC_STATE_OFF;
    3758:	10 92 bd 22 	sts	0x22BD, r1
}
    375c:	08 95       	ret

0000375e <mc_line_continue>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continue() 
{
    375e:	af 92       	push	r10
    3760:	bf 92       	push	r11
    3762:	cf 92       	push	r12
    3764:	df 92       	push	r13
    3766:	ef 92       	push	r14
    3768:	ff 92       	push	r15
    376a:	0f 93       	push	r16
    376c:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    376e:	80 91 67 21 	lds	r24, 0x2167
    3772:	88 23       	and	r24, r24
    3774:	19 f4       	brne	.+6      	; 0x377c <mc_line_continue+0x1e>
    3776:	23 e0       	ldi	r18, 0x03	; 3
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	30 c0       	rjmp	.+96     	; 0x37dc <mc_line_continue+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    377c:	82 e0       	ldi	r24, 0x02	; 2
    377e:	80 93 67 21 	sts	0x2167, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    3782:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <mv_test_move_buffer_full>
    3786:	88 23       	and	r24, r24
    3788:	19 f0       	breq	.+6      	; 0x3790 <mc_line_continue+0x32>
    378a:	22 e0       	ldi	r18, 0x02	; 2
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	26 c0       	rjmp	.+76     	; 0x37dc <mc_line_continue+0x7e>
		return (TG_EAGAIN);
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    3790:	60 91 80 21 	lds	r22, 0x2180
    3794:	70 91 81 21 	lds	r23, 0x2181
    3798:	80 91 82 21 	lds	r24, 0x2182
    379c:	90 91 83 21 	lds	r25, 0x2183
    37a0:	20 91 84 21 	lds	r18, 0x2184
    37a4:	30 91 85 21 	lds	r19, 0x2185
    37a8:	40 91 86 21 	lds	r20, 0x2186
    37ac:	50 91 87 21 	lds	r21, 0x2187
    37b0:	e0 90 88 21 	lds	r14, 0x2188
    37b4:	f0 90 89 21 	lds	r15, 0x2189
    37b8:	00 91 8a 21 	lds	r16, 0x218A
    37bc:	10 91 8b 21 	lds	r17, 0x218B
    37c0:	a0 90 8c 21 	lds	r10, 0x218C
    37c4:	b0 90 8d 21 	lds	r11, 0x218D
    37c8:	c0 90 8e 21 	lds	r12, 0x218E
    37cc:	d0 90 8f 21 	lds	r13, 0x218F
    37d0:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    37d4:	10 92 67 21 	sts	0x2167, r1
    37d8:	20 e0       	ldi	r18, 0x00	; 0
    37da:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    37dc:	c9 01       	movw	r24, r18
    37de:	1f 91       	pop	r17
    37e0:	0f 91       	pop	r16
    37e2:	ff 90       	pop	r15
    37e4:	ef 90       	pop	r14
    37e6:	df 90       	pop	r13
    37e8:	cf 90       	pop	r12
    37ea:	bf 90       	pop	r11
    37ec:	af 90       	pop	r10
    37ee:	08 95       	ret

000037f0 <mc_dwell>:
 * NOTE: It's not necessary to set the target as this is set correctly in the Gcode. 
 */

int mc_dwell(double seconds) 
{
	mc.steps[X] = 0;
    37f0:	10 92 80 21 	sts	0x2180, r1
    37f4:	10 92 81 21 	sts	0x2181, r1
    37f8:	10 92 82 21 	sts	0x2182, r1
    37fc:	10 92 83 21 	sts	0x2183, r1
	mc.steps[Y] = 0;
    3800:	10 92 84 21 	sts	0x2184, r1
    3804:	10 92 85 21 	sts	0x2185, r1
    3808:	10 92 86 21 	sts	0x2186, r1
    380c:	10 92 87 21 	sts	0x2187, r1
	mc.steps[Z] = 0;
    3810:	10 92 88 21 	sts	0x2188, r1
    3814:	10 92 89 21 	sts	0x2189, r1
    3818:	10 92 8a 21 	sts	0x218A, r1
    381c:	10 92 8b 21 	sts	0x218B, r1
	mc.mm_of_travel = 0;	// not actually used, but makes debug make more sense
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	40 e0       	ldi	r20, 0x00	; 0
    3826:	50 e0       	ldi	r21, 0x00	; 0
    3828:	20 93 90 21 	sts	0x2190, r18
    382c:	30 93 91 21 	sts	0x2191, r19
    3830:	40 93 92 21 	sts	0x2192, r20
    3834:	50 93 93 21 	sts	0x2193, r21
	mc.microseconds = trunc(seconds*1000000);
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	34 e2       	ldi	r19, 0x24	; 36
    383c:	44 e7       	ldi	r20, 0x74	; 116
    383e:	59 e4       	ldi	r21, 0x49	; 73
    3840:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    3844:	0e 94 d1 42 	call	0x85a2	; 0x85a2 <__fixunssfsi>
    3848:	60 93 8c 21 	sts	0x218C, r22
    384c:	70 93 8d 21 	sts	0x218D, r23
    3850:	80 93 8e 21 	sts	0x218E, r24
    3854:	90 93 8f 21 	sts	0x218F, r25
	mc.line_state = MC_STATE_NEW;
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	80 93 67 21 	sts	0x2167, r24
	return (mc_line_continue());
    385e:	0e 94 af 1b 	call	0x375e	; 0x375e <mc_line_continue>
}
    3862:	08 95       	ret

00003864 <mc_set_position>:
/* 
 * mc_set_position() - set current position (support for G92)
 */

int mc_set_position(double x, double y, double z)
{
    3864:	8f 92       	push	r8
    3866:	9f 92       	push	r9
    3868:	af 92       	push	r10
    386a:	bf 92       	push	r11
    386c:	cf 92       	push	r12
    386e:	df 92       	push	r13
    3870:	ef 92       	push	r14
    3872:	ff 92       	push	r15
    3874:	0f 93       	push	r16
    3876:	1f 93       	push	r17
    3878:	49 01       	movw	r8, r18
    387a:	5a 01       	movw	r10, r20
	mc.position[X] = lround(x*CFG(X).steps_per_mm);
    387c:	20 91 70 22 	lds	r18, 0x2270
    3880:	30 91 71 22 	lds	r19, 0x2271
    3884:	40 91 72 22 	lds	r20, 0x2272
    3888:	50 91 73 22 	lds	r21, 0x2273
    388c:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    3890:	0e 94 ef 44 	call	0x89de	; 0x89de <lround>
    3894:	28 e6       	ldi	r18, 0x68	; 104
    3896:	c2 2e       	mov	r12, r18
    3898:	21 e2       	ldi	r18, 0x21	; 33
    389a:	d2 2e       	mov	r13, r18
    389c:	60 93 68 21 	sts	0x2168, r22
    38a0:	70 93 69 21 	sts	0x2169, r23
    38a4:	80 93 6a 21 	sts	0x216A, r24
    38a8:	90 93 6b 21 	sts	0x216B, r25
	mc.position[Y] = lround(y*CFG(Y).steps_per_mm);
    38ac:	c5 01       	movw	r24, r10
    38ae:	b4 01       	movw	r22, r8
    38b0:	20 91 88 22 	lds	r18, 0x2288
    38b4:	30 91 89 22 	lds	r19, 0x2289
    38b8:	40 91 8a 22 	lds	r20, 0x228A
    38bc:	50 91 8b 22 	lds	r21, 0x228B
    38c0:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    38c4:	0e 94 ef 44 	call	0x89de	; 0x89de <lround>
    38c8:	f6 01       	movw	r30, r12
    38ca:	34 96       	adiw	r30, 0x04	; 4
    38cc:	60 93 6c 21 	sts	0x216C, r22
    38d0:	71 83       	std	Z+1, r23	; 0x01
    38d2:	82 83       	std	Z+2, r24	; 0x02
    38d4:	93 83       	std	Z+3, r25	; 0x03
	mc.position[Z] = lround(z*CFG(Z).steps_per_mm); 
    38d6:	c8 01       	movw	r24, r16
    38d8:	b7 01       	movw	r22, r14
    38da:	20 91 a0 22 	lds	r18, 0x22A0
    38de:	30 91 a1 22 	lds	r19, 0x22A1
    38e2:	40 91 a2 22 	lds	r20, 0x22A2
    38e6:	50 91 a3 22 	lds	r21, 0x22A3
    38ea:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    38ee:	0e 94 ef 44 	call	0x89de	; 0x89de <lround>
    38f2:	28 e0       	ldi	r18, 0x08	; 8
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	c2 0e       	add	r12, r18
    38f8:	d3 1e       	adc	r13, r19
    38fa:	60 93 70 21 	sts	0x2170, r22
    38fe:	f6 01       	movw	r30, r12
    3900:	71 83       	std	Z+1, r23	; 0x01
    3902:	82 83       	std	Z+2, r24	; 0x02
    3904:	93 83       	std	Z+3, r25	; 0x03
	return (TG_OK);
}
    3906:	80 e0       	ldi	r24, 0x00	; 0
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	1f 91       	pop	r17
    390c:	0f 91       	pop	r16
    390e:	ff 90       	pop	r15
    3910:	ef 90       	pop	r14
    3912:	df 90       	pop	r13
    3914:	cf 90       	pop	r12
    3916:	bf 90       	pop	r11
    3918:	af 90       	pop	r10
    391a:	9f 90       	pop	r9
    391c:	8f 90       	pop	r8
    391e:	08 95       	ret

00003920 <mc_line>:
 * Zero length lines that are actually dwells come in thru mc_dwell().
 * The mv_queue doesn't check line length and queues anything.
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    3920:	2f 92       	push	r2
    3922:	3f 92       	push	r3
    3924:	4f 92       	push	r4
    3926:	5f 92       	push	r5
    3928:	6f 92       	push	r6
    392a:	7f 92       	push	r7
    392c:	8f 92       	push	r8
    392e:	9f 92       	push	r9
    3930:	af 92       	push	r10
    3932:	bf 92       	push	r11
    3934:	cf 92       	push	r12
    3936:	df 92       	push	r13
    3938:	ef 92       	push	r14
    393a:	ff 92       	push	r15
    393c:	0f 93       	push	r16
    393e:	1f 93       	push	r17
    3940:	df 93       	push	r29
    3942:	cf 93       	push	r28
    3944:	cd b7       	in	r28, 0x3d	; 61
    3946:	de b7       	in	r29, 0x3e	; 62
    3948:	62 97       	sbiw	r28, 0x12	; 18
    394a:	cd bf       	out	0x3d, r28	; 61
    394c:	de bf       	out	0x3e, r29	; 62
    394e:	19 01       	movw	r2, r18
    3950:	2a 01       	movw	r4, r20
    3952:	ad 86       	std	Y+13, r10	; 0x0d
    3954:	be 86       	std	Y+14, r11	; 0x0e
    3956:	cf 86       	std	Y+15, r12	; 0x0f
    3958:	d8 8a       	std	Y+16, r13	; 0x10
    395a:	89 8a       	std	Y+17, r8	; 0x11
    395c:	9a 8a       	std	Y+18, r9	; 0x12
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    395e:	20 91 70 22 	lds	r18, 0x2270
    3962:	30 91 71 22 	lds	r19, 0x2271
    3966:	40 91 72 22 	lds	r20, 0x2272
    396a:	50 91 73 22 	lds	r21, 0x2273
    396e:	29 87       	std	Y+9, r18	; 0x09
    3970:	3a 87       	std	Y+10, r19	; 0x0a
    3972:	4b 87       	std	Y+11, r20	; 0x0b
    3974:	5c 87       	std	Y+12, r21	; 0x0c
    3976:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    397a:	0e 94 ef 44 	call	0x89de	; 0x89de <lround>
    397e:	3b 01       	movw	r6, r22
    3980:	4c 01       	movw	r8, r24
    3982:	60 92 74 21 	sts	0x2174, r6
    3986:	70 92 75 21 	sts	0x2175, r7
    398a:	80 92 76 21 	sts	0x2176, r8
    398e:	90 92 77 21 	sts	0x2177, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    3992:	80 91 88 22 	lds	r24, 0x2288
    3996:	90 91 89 22 	lds	r25, 0x2289
    399a:	a0 91 8a 22 	lds	r26, 0x228A
    399e:	b0 91 8b 22 	lds	r27, 0x228B
    39a2:	8d 83       	std	Y+5, r24	; 0x05
    39a4:	9e 83       	std	Y+6, r25	; 0x06
    39a6:	af 83       	std	Y+7, r26	; 0x07
    39a8:	b8 87       	std	Y+8, r27	; 0x08
    39aa:	c2 01       	movw	r24, r4
    39ac:	b1 01       	movw	r22, r2
    39ae:	2d 81       	ldd	r18, Y+5	; 0x05
    39b0:	3e 81       	ldd	r19, Y+6	; 0x06
    39b2:	4f 81       	ldd	r20, Y+7	; 0x07
    39b4:	58 85       	ldd	r21, Y+8	; 0x08
    39b6:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    39ba:	0e 94 ef 44 	call	0x89de	; 0x89de <lround>
    39be:	5b 01       	movw	r10, r22
    39c0:	6c 01       	movw	r12, r24
    39c2:	a0 92 78 21 	sts	0x2178, r10
    39c6:	b0 92 79 21 	sts	0x2179, r11
    39ca:	c0 92 7a 21 	sts	0x217A, r12
    39ce:	d0 92 7b 21 	sts	0x217B, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    39d2:	20 91 a0 22 	lds	r18, 0x22A0
    39d6:	30 91 a1 22 	lds	r19, 0x22A1
    39da:	40 91 a2 22 	lds	r20, 0x22A2
    39de:	50 91 a3 22 	lds	r21, 0x22A3
    39e2:	29 83       	std	Y+1, r18	; 0x01
    39e4:	3a 83       	std	Y+2, r19	; 0x02
    39e6:	4b 83       	std	Y+3, r20	; 0x03
    39e8:	5c 83       	std	Y+4, r21	; 0x04
    39ea:	c8 01       	movw	r24, r16
    39ec:	b7 01       	movw	r22, r14
    39ee:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    39f2:	0e 94 ef 44 	call	0x89de	; 0x89de <lround>
    39f6:	9b 01       	movw	r18, r22
    39f8:	ac 01       	movw	r20, r24
    39fa:	20 93 7c 21 	sts	0x217C, r18
    39fe:	30 93 7d 21 	sts	0x217D, r19
    3a02:	40 93 7e 21 	sts	0x217E, r20
    3a06:	50 93 7f 21 	sts	0x217F, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    3a0a:	80 91 68 21 	lds	r24, 0x2168
    3a0e:	90 91 69 21 	lds	r25, 0x2169
    3a12:	a0 91 6a 21 	lds	r26, 0x216A
    3a16:	b0 91 6b 21 	lds	r27, 0x216B
    3a1a:	84 01       	movw	r16, r8
    3a1c:	73 01       	movw	r14, r6
    3a1e:	e8 1a       	sub	r14, r24
    3a20:	f9 0a       	sbc	r15, r25
    3a22:	0a 0b       	sbc	r16, r26
    3a24:	1b 0b       	sbc	r17, r27
    3a26:	e0 92 80 21 	sts	0x2180, r14
    3a2a:	f0 92 81 21 	sts	0x2181, r15
    3a2e:	00 93 82 21 	sts	0x2182, r16
    3a32:	10 93 83 21 	sts	0x2183, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    3a36:	80 91 6c 21 	lds	r24, 0x216C
    3a3a:	90 91 6d 21 	lds	r25, 0x216D
    3a3e:	a0 91 6e 21 	lds	r26, 0x216E
    3a42:	b0 91 6f 21 	lds	r27, 0x216F
    3a46:	a8 1a       	sub	r10, r24
    3a48:	b9 0a       	sbc	r11, r25
    3a4a:	ca 0a       	sbc	r12, r26
    3a4c:	db 0a       	sbc	r13, r27
    3a4e:	a0 92 84 21 	sts	0x2184, r10
    3a52:	b0 92 85 21 	sts	0x2185, r11
    3a56:	c0 92 86 21 	sts	0x2186, r12
    3a5a:	d0 92 87 21 	sts	0x2187, r13
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    3a5e:	80 91 70 21 	lds	r24, 0x2170
    3a62:	90 91 71 21 	lds	r25, 0x2171
    3a66:	a0 91 72 21 	lds	r26, 0x2172
    3a6a:	b0 91 73 21 	lds	r27, 0x2173
    3a6e:	19 01       	movw	r2, r18
    3a70:	2a 01       	movw	r4, r20
    3a72:	28 1a       	sub	r2, r24
    3a74:	39 0a       	sbc	r3, r25
    3a76:	4a 0a       	sbc	r4, r26
    3a78:	5b 0a       	sbc	r5, r27
    3a7a:	20 92 88 21 	sts	0x2188, r2
    3a7e:	30 92 89 21 	sts	0x2189, r3
    3a82:	40 92 8a 21 	sts	0x218A, r4
    3a86:	50 92 8b 21 	sts	0x218B, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    3a8a:	d6 01       	movw	r26, r12
    3a8c:	c5 01       	movw	r24, r10
    3a8e:	8e 0d       	add	r24, r14
    3a90:	9f 1d       	adc	r25, r15
    3a92:	a0 1f       	adc	r26, r16
    3a94:	b1 1f       	adc	r27, r17
    3a96:	82 0d       	add	r24, r2
    3a98:	93 1d       	adc	r25, r3
    3a9a:	a4 1d       	adc	r26, r4
    3a9c:	b5 1d       	adc	r27, r5
    3a9e:	00 97       	sbiw	r24, 0x00	; 0
    3aa0:	a1 05       	cpc	r26, r1
    3aa2:	b1 05       	cpc	r27, r1
    3aa4:	19 f4       	brne	.+6      	; 0x3aac <mc_line+0x18c>
    3aa6:	24 e1       	ldi	r18, 0x14	; 20
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	72 c0       	rjmp	.+228    	; 0x3b90 <mc_line+0x270>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    3aac:	49 89       	ldd	r20, Y+17	; 0x11
    3aae:	5a 89       	ldd	r21, Y+18	; 0x12
    3ab0:	45 2b       	or	r20, r21
    3ab2:	59 f0       	breq	.+22     	; 0x3aca <mc_line+0x1aa>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3ab4:	60 ec       	ldi	r22, 0xC0	; 192
    3ab6:	71 ee       	ldi	r23, 0xE1	; 225
    3ab8:	84 e6       	ldi	r24, 0x64	; 100
    3aba:	9c e4       	ldi	r25, 0x4C	; 76
    3abc:	2d 85       	ldd	r18, Y+13	; 0x0d
    3abe:	3e 85       	ldd	r19, Y+14	; 0x0e
    3ac0:	4f 85       	ldd	r20, Y+15	; 0x0f
    3ac2:	58 89       	ldd	r21, Y+16	; 0x10
    3ac4:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    3ac8:	4a c0       	rjmp	.+148    	; 0x3b5e <mc_line+0x23e>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    3aca:	c8 01       	movw	r24, r16
    3acc:	b7 01       	movw	r22, r14
    3ace:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    3ad2:	29 85       	ldd	r18, Y+9	; 0x09
    3ad4:	3a 85       	ldd	r19, Y+10	; 0x0a
    3ad6:	4b 85       	ldd	r20, Y+11	; 0x0b
    3ad8:	5c 85       	ldd	r21, Y+12	; 0x0c
    3ada:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    3ade:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <square>
    3ae2:	3b 01       	movw	r6, r22
    3ae4:	4c 01       	movw	r8, r24
    3ae6:	c6 01       	movw	r24, r12
    3ae8:	b5 01       	movw	r22, r10
    3aea:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    3aee:	2d 81       	ldd	r18, Y+5	; 0x05
    3af0:	3e 81       	ldd	r19, Y+6	; 0x06
    3af2:	4f 81       	ldd	r20, Y+7	; 0x07
    3af4:	58 85       	ldd	r21, Y+8	; 0x08
    3af6:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    3afa:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <square>
    3afe:	5b 01       	movw	r10, r22
    3b00:	6c 01       	movw	r12, r24
    3b02:	c2 01       	movw	r24, r4
    3b04:	b1 01       	movw	r22, r2
    3b06:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    3b0a:	29 81       	ldd	r18, Y+1	; 0x01
    3b0c:	3a 81       	ldd	r19, Y+2	; 0x02
    3b0e:	4b 81       	ldd	r20, Y+3	; 0x03
    3b10:	5c 81       	ldd	r21, Y+4	; 0x04
    3b12:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    3b16:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <square>
    3b1a:	7b 01       	movw	r14, r22
    3b1c:	8c 01       	movw	r16, r24
    3b1e:	c4 01       	movw	r24, r8
    3b20:	b3 01       	movw	r22, r6
    3b22:	a6 01       	movw	r20, r12
    3b24:	95 01       	movw	r18, r10
    3b26:	0e 94 be 41 	call	0x837c	; 0x837c <__addsf3>
    3b2a:	a8 01       	movw	r20, r16
    3b2c:	97 01       	movw	r18, r14
    3b2e:	0e 94 be 41 	call	0x837c	; 0x837c <__addsf3>
    3b32:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <sqrt>
    3b36:	60 93 90 21 	sts	0x2190, r22
    3b3a:	70 93 91 21 	sts	0x2191, r23
    3b3e:	80 93 92 21 	sts	0x2192, r24
    3b42:	90 93 93 21 	sts	0x2193, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3b46:	2d 85       	ldd	r18, Y+13	; 0x0d
    3b48:	3e 85       	ldd	r19, Y+14	; 0x0e
    3b4a:	4f 85       	ldd	r20, Y+15	; 0x0f
    3b4c:	58 89       	ldd	r21, Y+16	; 0x10
    3b4e:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	34 e2       	ldi	r19, 0x24	; 36
    3b56:	44 e7       	ldi	r20, 0x74	; 116
    3b58:	59 e4       	ldi	r21, 0x49	; 73
    3b5a:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    3b5e:	0e 94 ef 44 	call	0x89de	; 0x89de <lround>
    3b62:	60 93 8c 21 	sts	0x218C, r22
    3b66:	70 93 8d 21 	sts	0x218D, r23
    3b6a:	80 93 8e 21 	sts	0x218E, r24
    3b6e:	90 93 8f 21 	sts	0x218F, r25
	}
	mc.line_state = MC_STATE_NEW;
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	80 93 67 21 	sts	0x2167, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3b78:	e8 e6       	ldi	r30, 0x68	; 104
    3b7a:	f1 e2       	ldi	r31, 0x21	; 33
    3b7c:	df 01       	movw	r26, r30
    3b7e:	1c 96       	adiw	r26, 0x0c	; 12
    3b80:	8c e0       	ldi	r24, 0x0C	; 12
    3b82:	0d 90       	ld	r0, X+
    3b84:	01 92       	st	Z+, r0
    3b86:	81 50       	subi	r24, 0x01	; 1
    3b88:	e1 f7       	brne	.-8      	; 0x3b82 <mc_line+0x262>
	return (mc_line_continue());
    3b8a:	0e 94 af 1b 	call	0x375e	; 0x375e <mc_line_continue>
    3b8e:	9c 01       	movw	r18, r24
}
    3b90:	c9 01       	movw	r24, r18
    3b92:	62 96       	adiw	r28, 0x12	; 18
    3b94:	cd bf       	out	0x3d, r28	; 61
    3b96:	de bf       	out	0x3e, r29	; 62
    3b98:	cf 91       	pop	r28
    3b9a:	df 91       	pop	r29
    3b9c:	1f 91       	pop	r17
    3b9e:	0f 91       	pop	r16
    3ba0:	ff 90       	pop	r15
    3ba2:	ef 90       	pop	r14
    3ba4:	df 90       	pop	r13
    3ba6:	cf 90       	pop	r12
    3ba8:	bf 90       	pop	r11
    3baa:	af 90       	pop	r10
    3bac:	9f 90       	pop	r9
    3bae:	8f 90       	pop	r8
    3bb0:	7f 90       	pop	r7
    3bb2:	6f 90       	pop	r6
    3bb4:	5f 90       	pop	r5
    3bb6:	4f 90       	pop	r4
    3bb8:	3f 90       	pop	r3
    3bba:	2f 90       	pop	r2
    3bbc:	08 95       	ret

00003bbe <mc_arc_continue>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continue() 
{
    3bbe:	8f 92       	push	r8
    3bc0:	9f 92       	push	r9
    3bc2:	af 92       	push	r10
    3bc4:	bf 92       	push	r11
    3bc6:	cf 92       	push	r12
    3bc8:	df 92       	push	r13
    3bca:	ef 92       	push	r14
    3bcc:	ff 92       	push	r15
    3bce:	0f 93       	push	r16
    3bd0:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3bd2:	80 91 bd 22 	lds	r24, 0x22BD
    3bd6:	88 23       	and	r24, r24
    3bd8:	19 f4       	brne	.+6      	; 0x3be0 <mc_arc_continue+0x22>
    3bda:	23 e0       	ldi	r18, 0x03	; 3
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	dd c0       	rjmp	.+442    	; 0x3d9a <mc_arc_continue+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3be0:	81 30       	cpi	r24, 0x01	; 1
    3be2:	09 f0       	breq	.+2      	; 0x3be6 <mc_arc_continue+0x28>
    3be4:	ca c0       	rjmp	.+404    	; 0x3d7a <mc_arc_continue+0x1bc>
		ma.segment_counter=0;
    3be6:	10 92 c0 22 	sts	0x22C0, r1
    3bea:	10 92 c1 22 	sts	0x22C1, r1
		ma.arc_state = MC_STATE_RUNNING;
    3bee:	82 e0       	ldi	r24, 0x02	; 2
    3bf0:	80 93 bd 22 	sts	0x22BD, r24
    3bf4:	c2 c0       	rjmp	.+388    	; 0x3d7a <mc_arc_continue+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3bf6:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <mv_test_move_buffer_full>
    3bfa:	88 23       	and	r24, r24
    3bfc:	19 f0       	breq	.+6      	; 0x3c04 <mc_arc_continue+0x46>
    3bfe:	22 e0       	ldi	r18, 0x02	; 2
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	cb c0       	rjmp	.+406    	; 0x3d9a <mc_arc_continue+0x1dc>
			return (TG_EAGAIN);
		}
		ma.segment_counter++;
    3c04:	80 91 c0 22 	lds	r24, 0x22C0
    3c08:	90 91 c1 22 	lds	r25, 0x22C1
    3c0c:	01 96       	adiw	r24, 0x01	; 1
    3c0e:	80 93 c0 22 	sts	0x22C0, r24
    3c12:	90 93 c1 22 	sts	0x22C1, r25
		ma.theta += ma.theta_per_segment;
    3c16:	60 91 e2 22 	lds	r22, 0x22E2
    3c1a:	70 91 e3 22 	lds	r23, 0x22E3
    3c1e:	80 91 e4 22 	lds	r24, 0x22E4
    3c22:	90 91 e5 22 	lds	r25, 0x22E5
    3c26:	20 91 ee 22 	lds	r18, 0x22EE
    3c2a:	30 91 ef 22 	lds	r19, 0x22EF
    3c2e:	40 91 f0 22 	lds	r20, 0x22F0
    3c32:	50 91 f1 22 	lds	r21, 0x22F1
    3c36:	0e 94 be 41 	call	0x837c	; 0x837c <__addsf3>
    3c3a:	7b 01       	movw	r14, r22
    3c3c:	8c 01       	movw	r16, r24
    3c3e:	cb 01       	movw	r24, r22
    3c40:	d8 01       	movw	r26, r16
    3c42:	80 93 e2 22 	sts	0x22E2, r24
    3c46:	90 93 e3 22 	sts	0x22E3, r25
    3c4a:	a0 93 e4 22 	sts	0x22E4, r26
    3c4e:	b0 93 e5 22 	sts	0x22E5, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3c52:	b7 01       	movw	r22, r14
    3c54:	c8 01       	movw	r24, r16
    3c56:	0e 94 82 45 	call	0x8b04	; 0x8b04 <sin>
    3c5a:	80 90 e6 22 	lds	r8, 0x22E6
    3c5e:	90 90 e7 22 	lds	r9, 0x22E7
    3c62:	a0 90 e8 22 	lds	r10, 0x22E8
    3c66:	b0 90 e9 22 	lds	r11, 0x22E9
    3c6a:	c0 90 c4 22 	lds	r12, 0x22C4
    3c6e:	d0 90 c5 22 	lds	r13, 0x22C5
    3c72:	cc 0c       	add	r12, r12
    3c74:	dd 1c       	adc	r13, r13
    3c76:	cc 0c       	add	r12, r12
    3c78:	dd 1c       	adc	r13, r13
    3c7a:	2d eb       	ldi	r18, 0xBD	; 189
    3c7c:	32 e2       	ldi	r19, 0x22	; 34
    3c7e:	c2 0e       	add	r12, r18
    3c80:	d3 1e       	adc	r13, r19
    3c82:	a5 01       	movw	r20, r10
    3c84:	94 01       	movw	r18, r8
    3c86:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    3c8a:	9b 01       	movw	r18, r22
    3c8c:	ac 01       	movw	r20, r24
    3c8e:	60 91 da 22 	lds	r22, 0x22DA
    3c92:	70 91 db 22 	lds	r23, 0x22DB
    3c96:	80 91 dc 22 	lds	r24, 0x22DC
    3c9a:	90 91 dd 22 	lds	r25, 0x22DD
    3c9e:	0e 94 be 41 	call	0x837c	; 0x837c <__addsf3>
    3ca2:	f6 01       	movw	r30, r12
    3ca4:	65 87       	std	Z+13, r22	; 0x0d
    3ca6:	76 87       	std	Z+14, r23	; 0x0e
    3ca8:	87 87       	std	Z+15, r24	; 0x0f
    3caa:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3cac:	b7 01       	movw	r22, r14
    3cae:	c8 01       	movw	r24, r16
    3cb0:	0e 94 61 42 	call	0x84c2	; 0x84c2 <cos>
    3cb4:	00 91 c6 22 	lds	r16, 0x22C6
    3cb8:	10 91 c7 22 	lds	r17, 0x22C7
    3cbc:	00 0f       	add	r16, r16
    3cbe:	11 1f       	adc	r17, r17
    3cc0:	00 0f       	add	r16, r16
    3cc2:	11 1f       	adc	r17, r17
    3cc4:	03 54       	subi	r16, 0x43	; 67
    3cc6:	1d 4d       	sbci	r17, 0xDD	; 221
    3cc8:	a5 01       	movw	r20, r10
    3cca:	94 01       	movw	r18, r8
    3ccc:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    3cd0:	9b 01       	movw	r18, r22
    3cd2:	ac 01       	movw	r20, r24
    3cd4:	60 91 de 22 	lds	r22, 0x22DE
    3cd8:	70 91 df 22 	lds	r23, 0x22DF
    3cdc:	80 91 e0 22 	lds	r24, 0x22E0
    3ce0:	90 91 e1 22 	lds	r25, 0x22E1
    3ce4:	0e 94 be 41 	call	0x837c	; 0x837c <__addsf3>
    3ce8:	f8 01       	movw	r30, r16
    3cea:	65 87       	std	Z+13, r22	; 0x0d
    3cec:	76 87       	std	Z+14, r23	; 0x0e
    3cee:	87 87       	std	Z+15, r24	; 0x0f
    3cf0:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3cf2:	00 91 c8 22 	lds	r16, 0x22C8
    3cf6:	10 91 c9 22 	lds	r17, 0x22C9
    3cfa:	00 0f       	add	r16, r16
    3cfc:	11 1f       	adc	r17, r17
    3cfe:	00 0f       	add	r16, r16
    3d00:	11 1f       	adc	r17, r17
    3d02:	03 54       	subi	r16, 0x43	; 67
    3d04:	1d 4d       	sbci	r17, 0xDD	; 221
    3d06:	f8 01       	movw	r30, r16
    3d08:	65 85       	ldd	r22, Z+13	; 0x0d
    3d0a:	76 85       	ldd	r23, Z+14	; 0x0e
    3d0c:	87 85       	ldd	r24, Z+15	; 0x0f
    3d0e:	90 89       	ldd	r25, Z+16	; 0x10
    3d10:	20 91 f2 22 	lds	r18, 0x22F2
    3d14:	30 91 f3 22 	lds	r19, 0x22F3
    3d18:	40 91 f4 22 	lds	r20, 0x22F4
    3d1c:	50 91 f5 22 	lds	r21, 0x22F5
    3d20:	0e 94 be 41 	call	0x837c	; 0x837c <__addsf3>
    3d24:	f8 01       	movw	r30, r16
    3d26:	65 87       	std	Z+13, r22	; 0x0d
    3d28:	76 87       	std	Z+14, r23	; 0x0e
    3d2a:	87 87       	std	Z+15, r24	; 0x0f
    3d2c:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    3d2e:	60 91 ca 22 	lds	r22, 0x22CA
    3d32:	70 91 cb 22 	lds	r23, 0x22CB
    3d36:	80 91 cc 22 	lds	r24, 0x22CC
    3d3a:	90 91 cd 22 	lds	r25, 0x22CD
    3d3e:	20 91 ce 22 	lds	r18, 0x22CE
    3d42:	30 91 cf 22 	lds	r19, 0x22CF
    3d46:	40 91 d0 22 	lds	r20, 0x22D0
    3d4a:	50 91 d1 22 	lds	r21, 0x22D1
    3d4e:	e0 90 d2 22 	lds	r14, 0x22D2
    3d52:	f0 90 d3 22 	lds	r15, 0x22D3
    3d56:	00 91 d4 22 	lds	r16, 0x22D4
    3d5a:	10 91 d5 22 	lds	r17, 0x22D5
    3d5e:	a0 90 ea 22 	lds	r10, 0x22EA
    3d62:	b0 90 eb 22 	lds	r11, 0x22EB
    3d66:	c0 90 ec 22 	lds	r12, 0x22EC
    3d6a:	d0 90 ed 22 	lds	r13, 0x22ED
    3d6e:	80 90 c2 22 	lds	r8, 0x22C2
    3d72:	90 90 c3 22 	lds	r9, 0x22C3
    3d76:	0e 94 90 1c 	call	0x3920	; 0x3920 <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3d7a:	20 91 c0 22 	lds	r18, 0x22C0
    3d7e:	30 91 c1 22 	lds	r19, 0x22C1
    3d82:	80 91 be 22 	lds	r24, 0x22BE
    3d86:	90 91 bf 22 	lds	r25, 0x22BF
    3d8a:	82 17       	cp	r24, r18
    3d8c:	93 07       	cpc	r25, r19
    3d8e:	0c f0       	brlt	.+2      	; 0x3d92 <mc_arc_continue+0x1d4>
    3d90:	32 cf       	rjmp	.-412    	; 0x3bf6 <mc_arc_continue+0x38>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3d92:	10 92 bd 22 	sts	0x22BD, r1
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3d9a:	c9 01       	movw	r24, r18
    3d9c:	1f 91       	pop	r17
    3d9e:	0f 91       	pop	r16
    3da0:	ff 90       	pop	r15
    3da2:	ef 90       	pop	r14
    3da4:	df 90       	pop	r13
    3da6:	cf 90       	pop	r12
    3da8:	bf 90       	pop	r11
    3daa:	af 90       	pop	r10
    3dac:	9f 90       	pop	r9
    3dae:	8f 90       	pop	r8
    3db0:	08 95       	ret

00003db2 <mc_arc>:
 */

int mc_arc(double theta, double angular_travel, double radius, 
		   double linear_travel, int axis_1, int axis_2, int axis_linear, 
		   double feed_rate, int invert_feed_rate)
{
    3db2:	2f 92       	push	r2
    3db4:	3f 92       	push	r3
    3db6:	4f 92       	push	r4
    3db8:	5f 92       	push	r5
    3dba:	6f 92       	push	r6
    3dbc:	7f 92       	push	r7
    3dbe:	8f 92       	push	r8
    3dc0:	9f 92       	push	r9
    3dc2:	af 92       	push	r10
    3dc4:	bf 92       	push	r11
    3dc6:	cf 92       	push	r12
    3dc8:	df 92       	push	r13
    3dca:	ef 92       	push	r14
    3dcc:	ff 92       	push	r15
    3dce:	0f 93       	push	r16
    3dd0:	1f 93       	push	r17
    3dd2:	df 93       	push	r29
    3dd4:	cf 93       	push	r28
    3dd6:	cd b7       	in	r28, 0x3d	; 61
    3dd8:	de b7       	in	r29, 0x3e	; 62
    3dda:	28 97       	sbiw	r28, 0x08	; 8
    3ddc:	cd bf       	out	0x3d, r28	; 61
    3dde:	de bf       	out	0x3e, r29	; 62
    3de0:	69 83       	std	Y+1, r22	; 0x01
    3de2:	7a 83       	std	Y+2, r23	; 0x02
    3de4:	8b 83       	std	Y+3, r24	; 0x03
    3de6:	9c 83       	std	Y+4, r25	; 0x04
    3de8:	29 01       	movw	r4, r18
    3dea:	3a 01       	movw	r6, r20
    3dec:	ed 82       	std	Y+5, r14	; 0x05
    3dee:	fe 82       	std	Y+6, r15	; 0x06
    3df0:	0f 83       	std	Y+7, r16	; 0x07
    3df2:	18 87       	std	Y+8, r17	; 0x08
    3df4:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3df6:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3df8:	60 93 e2 22 	sts	0x22E2, r22
    3dfc:	70 93 e3 22 	sts	0x22E3, r23
    3e00:	80 93 e4 22 	sts	0x22E4, r24
    3e04:	90 93 e5 22 	sts	0x22E5, r25
	ma.radius = radius;
    3e08:	e0 92 e6 22 	sts	0x22E6, r14
    3e0c:	f0 92 e7 22 	sts	0x22E7, r15
    3e10:	00 93 e8 22 	sts	0x22E8, r16
    3e14:	10 93 e9 22 	sts	0x22E9, r17
	ma.angular_travel = angular_travel;
    3e18:	20 93 f6 22 	sts	0x22F6, r18
    3e1c:	30 93 f7 22 	sts	0x22F7, r19
    3e20:	40 93 f8 22 	sts	0x22F8, r20
    3e24:	50 93 f9 22 	sts	0x22F9, r21
	ma.linear_travel = linear_travel;
    3e28:	a0 92 fa 22 	sts	0x22FA, r10
    3e2c:	b0 92 fb 22 	sts	0x22FB, r11
    3e30:	c0 92 fc 22 	sts	0x22FC, r12
    3e34:	d0 92 fd 22 	sts	0x22FD, r13
	ma.feed_rate = feed_rate;
    3e38:	8a a1       	ldd	r24, Y+34	; 0x22
    3e3a:	9b a1       	ldd	r25, Y+35	; 0x23
    3e3c:	ac a1       	ldd	r26, Y+36	; 0x24
    3e3e:	bd a1       	ldd	r27, Y+37	; 0x25
    3e40:	80 93 ea 22 	sts	0x22EA, r24
    3e44:	90 93 eb 22 	sts	0x22EB, r25
    3e48:	a0 93 ec 22 	sts	0x22EC, r26
    3e4c:	b0 93 ed 22 	sts	0x22ED, r27
	ma.invert_feed_rate = invert_feed_rate;
    3e50:	ae a1       	ldd	r26, Y+38	; 0x26
    3e52:	bf a1       	ldd	r27, Y+39	; 0x27
    3e54:	a0 93 c2 22 	sts	0x22C2, r26
    3e58:	b0 93 c3 22 	sts	0x22C3, r27
	ma.axis_1 = axis_1;
    3e5c:	80 92 c4 22 	sts	0x22C4, r8
    3e60:	90 92 c5 22 	sts	0x22C5, r9
	ma.axis_2 = axis_2;
    3e64:	20 92 c6 22 	sts	0x22C6, r2
    3e68:	30 92 c7 22 	sts	0x22C7, r3
	ma.axis_linear = axis_linear;
    3e6c:	e8 a1       	ldd	r30, Y+32	; 0x20
    3e6e:	f9 a1       	ldd	r31, Y+33	; 0x21
    3e70:	e0 93 c8 22 	sts	0x22C8, r30
    3e74:	f0 93 c9 22 	sts	0x22C9, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3e78:	ca 01       	movw	r24, r20
    3e7a:	b9 01       	movw	r22, r18
    3e7c:	a8 01       	movw	r20, r16
    3e7e:	97 01       	movw	r18, r14
    3e80:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    3e84:	7b 01       	movw	r14, r22
    3e86:	8c 01       	movw	r16, r24
    3e88:	c6 01       	movw	r24, r12
    3e8a:	b5 01       	movw	r22, r10
    3e8c:	0e 94 cc 42 	call	0x8598	; 0x8598 <__fixsfsi>
    3e90:	97 ff       	sbrs	r25, 7
    3e92:	07 c0       	rjmp	.+14     	; 0x3ea2 <mc_arc+0xf0>
    3e94:	90 95       	com	r25
    3e96:	80 95       	com	r24
    3e98:	70 95       	com	r23
    3e9a:	61 95       	neg	r22
    3e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e9e:	8f 4f       	sbci	r24, 0xFF	; 255
    3ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea2:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    3ea6:	9b 01       	movw	r18, r22
    3ea8:	ac 01       	movw	r20, r24
    3eaa:	c8 01       	movw	r24, r16
    3eac:	b7 01       	movw	r22, r14
    3eae:	0e 94 5a 44 	call	0x88b4	; 0x88b4 <hypot>
    3eb2:	7b 01       	movw	r14, r22
    3eb4:	8c 01       	movw	r16, r24
    3eb6:	60 93 d6 22 	sts	0x22D6, r22
    3eba:	70 93 d7 22 	sts	0x22D7, r23
    3ebe:	80 93 d8 22 	sts	0x22D8, r24
    3ec2:	90 93 d9 22 	sts	0x22D9, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3ec6:	2d ec       	ldi	r18, 0xCD	; 205
    3ec8:	3c ec       	ldi	r19, 0xCC	; 204
    3eca:	4c e4       	ldi	r20, 0x4C	; 76
    3ecc:	5d e3       	ldi	r21, 0x3D	; 61
    3ece:	0e 94 5d 42 	call	0x84ba	; 0x84ba <__cmpsf2>
    3ed2:	88 23       	and	r24, r24
    3ed4:	1c f4       	brge	.+6      	; 0x3edc <mc_arc+0x12a>
    3ed6:	23 e1       	ldi	r18, 0x13	; 19
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	fb c0       	rjmp	.+502    	; 0x40d2 <mc_arc+0x320>
		return (TG_ARC_SPECIFICATION_ERROR);
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3edc:	c8 01       	movw	r24, r16
    3ede:	b7 01       	movw	r22, r14
    3ee0:	20 91 51 22 	lds	r18, 0x2251
    3ee4:	30 91 52 22 	lds	r19, 0x2252
    3ee8:	40 91 53 22 	lds	r20, 0x2253
    3eec:	50 91 54 22 	lds	r21, 0x2254
    3ef0:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    3ef4:	0e 94 4a 42 	call	0x8494	; 0x8494 <ceil>
    3ef8:	0e 94 cc 42 	call	0x8598	; 0x8598 <__fixsfsi>
    3efc:	8b 01       	movw	r16, r22
    3efe:	60 93 be 22 	sts	0x22BE, r22
    3f02:	70 93 bf 22 	sts	0x22BF, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    3f06:	8e a1       	ldd	r24, Y+38	; 0x26
    3f08:	9f a1       	ldd	r25, Y+39	; 0x27
    3f0a:	89 2b       	or	r24, r25
    3f0c:	b9 f0       	breq	.+46     	; 0x3f3c <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    3f0e:	b8 01       	movw	r22, r16
    3f10:	88 27       	eor	r24, r24
    3f12:	77 fd       	sbrc	r23, 7
    3f14:	80 95       	com	r24
    3f16:	98 2f       	mov	r25, r24
    3f18:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    3f1c:	9b 01       	movw	r18, r22
    3f1e:	ac 01       	movw	r20, r24
    3f20:	6a a1       	ldd	r22, Y+34	; 0x22
    3f22:	7b a1       	ldd	r23, Y+35	; 0x23
    3f24:	8c a1       	ldd	r24, Y+36	; 0x24
    3f26:	9d a1       	ldd	r25, Y+37	; 0x25
    3f28:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    3f2c:	60 93 ea 22 	sts	0x22EA, r22
    3f30:	70 93 eb 22 	sts	0x22EB, r23
    3f34:	80 93 ec 22 	sts	0x22EC, r24
    3f38:	90 93 ed 22 	sts	0x22ED, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    3f3c:	b8 01       	movw	r22, r16
    3f3e:	88 27       	eor	r24, r24
    3f40:	77 fd       	sbrc	r23, 7
    3f42:	80 95       	com	r24
    3f44:	98 2f       	mov	r25, r24
    3f46:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    3f4a:	7b 01       	movw	r14, r22
    3f4c:	8c 01       	movw	r16, r24
    3f4e:	c3 01       	movw	r24, r6
    3f50:	b2 01       	movw	r22, r4
    3f52:	a8 01       	movw	r20, r16
    3f54:	97 01       	movw	r18, r14
    3f56:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    3f5a:	60 93 ee 22 	sts	0x22EE, r22
    3f5e:	70 93 ef 22 	sts	0x22EF, r23
    3f62:	80 93 f0 22 	sts	0x22F0, r24
    3f66:	90 93 f1 22 	sts	0x22F1, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    3f6a:	c6 01       	movw	r24, r12
    3f6c:	b5 01       	movw	r22, r10
    3f6e:	a8 01       	movw	r20, r16
    3f70:	97 01       	movw	r18, r14
    3f72:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    3f76:	60 93 f2 22 	sts	0x22F2, r22
    3f7a:	70 93 f3 22 	sts	0x22F3, r23
    3f7e:	80 93 f4 22 	sts	0x22F4, r24
    3f82:	90 93 f5 22 	sts	0x22F5, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    3f86:	69 81       	ldd	r22, Y+1	; 0x01
    3f88:	7a 81       	ldd	r23, Y+2	; 0x02
    3f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f8e:	0e 94 82 45 	call	0x8b04	; 0x8b04 <sin>
    3f92:	5b 01       	movw	r10, r22
    3f94:	6c 01       	movw	r12, r24
    3f96:	f4 01       	movw	r30, r8
    3f98:	ee 0f       	add	r30, r30
    3f9a:	ff 1f       	adc	r31, r31
    3f9c:	ee 0f       	add	r30, r30
    3f9e:	ff 1f       	adc	r31, r31
    3fa0:	e9 59       	subi	r30, 0x99	; 153
    3fa2:	fe 4d       	sbci	r31, 0xDE	; 222
    3fa4:	61 81       	ldd	r22, Z+1	; 0x01
    3fa6:	72 81       	ldd	r23, Z+2	; 0x02
    3fa8:	83 81       	ldd	r24, Z+3	; 0x03
    3faa:	94 81       	ldd	r25, Z+4	; 0x04
    3fac:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    3fb0:	f4 01       	movw	r30, r8
    3fb2:	ee 0f       	add	r30, r30
    3fb4:	ff 1f       	adc	r31, r31
    3fb6:	e8 0d       	add	r30, r8
    3fb8:	f9 1d       	adc	r31, r9
    3fba:	03 e0       	ldi	r16, 0x03	; 3
    3fbc:	ee 0f       	add	r30, r30
    3fbe:	ff 1f       	adc	r31, r31
    3fc0:	0a 95       	dec	r16
    3fc2:	e1 f7       	brne	.-8      	; 0x3fbc <mc_arc+0x20a>
    3fc4:	e1 5b       	subi	r30, 0xB1	; 177
    3fc6:	fd 4d       	sbci	r31, 0xDD	; 221
    3fc8:	21 a1       	ldd	r18, Z+33	; 0x21
    3fca:	32 a1       	ldd	r19, Z+34	; 0x22
    3fcc:	43 a1       	ldd	r20, Z+35	; 0x23
    3fce:	54 a1       	ldd	r21, Z+36	; 0x24
    3fd0:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    3fd4:	7b 01       	movw	r14, r22
    3fd6:	8c 01       	movw	r16, r24
    3fd8:	c6 01       	movw	r24, r12
    3fda:	b5 01       	movw	r22, r10
    3fdc:	2d 81       	ldd	r18, Y+5	; 0x05
    3fde:	3e 81       	ldd	r19, Y+6	; 0x06
    3fe0:	4f 81       	ldd	r20, Y+7	; 0x07
    3fe2:	58 85       	ldd	r21, Y+8	; 0x08
    3fe4:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    3fe8:	9b 01       	movw	r18, r22
    3fea:	ac 01       	movw	r20, r24
    3fec:	c8 01       	movw	r24, r16
    3fee:	b7 01       	movw	r22, r14
    3ff0:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    3ff4:	60 93 da 22 	sts	0x22DA, r22
    3ff8:	70 93 db 22 	sts	0x22DB, r23
    3ffc:	80 93 dc 22 	sts	0x22DC, r24
    4000:	90 93 dd 22 	sts	0x22DD, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    4004:	69 81       	ldd	r22, Y+1	; 0x01
    4006:	7a 81       	ldd	r23, Y+2	; 0x02
    4008:	8b 81       	ldd	r24, Y+3	; 0x03
    400a:	9c 81       	ldd	r25, Y+4	; 0x04
    400c:	0e 94 61 42 	call	0x84c2	; 0x84c2 <cos>
    4010:	5b 01       	movw	r10, r22
    4012:	6c 01       	movw	r12, r24
    4014:	f1 01       	movw	r30, r2
    4016:	ee 0f       	add	r30, r30
    4018:	ff 1f       	adc	r31, r31
    401a:	ee 0f       	add	r30, r30
    401c:	ff 1f       	adc	r31, r31
    401e:	e9 59       	subi	r30, 0x99	; 153
    4020:	fe 4d       	sbci	r31, 0xDE	; 222
    4022:	61 81       	ldd	r22, Z+1	; 0x01
    4024:	72 81       	ldd	r23, Z+2	; 0x02
    4026:	83 81       	ldd	r24, Z+3	; 0x03
    4028:	94 81       	ldd	r25, Z+4	; 0x04
    402a:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    402e:	f1 01       	movw	r30, r2
    4030:	ee 0f       	add	r30, r30
    4032:	ff 1f       	adc	r31, r31
    4034:	e2 0d       	add	r30, r2
    4036:	f3 1d       	adc	r31, r3
    4038:	a3 e0       	ldi	r26, 0x03	; 3
    403a:	ee 0f       	add	r30, r30
    403c:	ff 1f       	adc	r31, r31
    403e:	aa 95       	dec	r26
    4040:	e1 f7       	brne	.-8      	; 0x403a <mc_arc+0x288>
    4042:	e1 5b       	subi	r30, 0xB1	; 177
    4044:	fd 4d       	sbci	r31, 0xDD	; 221
    4046:	21 a1       	ldd	r18, Z+33	; 0x21
    4048:	32 a1       	ldd	r19, Z+34	; 0x22
    404a:	43 a1       	ldd	r20, Z+35	; 0x23
    404c:	54 a1       	ldd	r21, Z+36	; 0x24
    404e:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    4052:	7b 01       	movw	r14, r22
    4054:	8c 01       	movw	r16, r24
    4056:	c6 01       	movw	r24, r12
    4058:	b5 01       	movw	r22, r10
    405a:	2d 81       	ldd	r18, Y+5	; 0x05
    405c:	3e 81       	ldd	r19, Y+6	; 0x06
    405e:	4f 81       	ldd	r20, Y+7	; 0x07
    4060:	58 85       	ldd	r21, Y+8	; 0x08
    4062:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    4066:	9b 01       	movw	r18, r22
    4068:	ac 01       	movw	r20, r24
    406a:	c8 01       	movw	r24, r16
    406c:	b7 01       	movw	r22, r14
    406e:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    4072:	60 93 de 22 	sts	0x22DE, r22
    4076:	70 93 df 22 	sts	0x22DF, r23
    407a:	80 93 e0 22 	sts	0x22E0, r24
    407e:	90 93 e1 22 	sts	0x22E1, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    4082:	e8 a1       	ldd	r30, Y+32	; 0x20
    4084:	f9 a1       	ldd	r31, Y+33	; 0x21
    4086:	ee 0f       	add	r30, r30
    4088:	ff 1f       	adc	r31, r31
    408a:	ee 0f       	add	r30, r30
    408c:	ff 1f       	adc	r31, r31
    408e:	8f 01       	movw	r16, r30
    4090:	03 54       	subi	r16, 0x43	; 67
    4092:	1d 4d       	sbci	r17, 0xDD	; 221
    4094:	e9 59       	subi	r30, 0x99	; 153
    4096:	fe 4d       	sbci	r31, 0xDE	; 222
    4098:	61 81       	ldd	r22, Z+1	; 0x01
    409a:	72 81       	ldd	r23, Z+2	; 0x02
    409c:	83 81       	ldd	r24, Z+3	; 0x03
    409e:	94 81       	ldd	r25, Z+4	; 0x04
    40a0:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    40a4:	20 91 a0 22 	lds	r18, 0x22A0
    40a8:	30 91 a1 22 	lds	r19, 0x22A1
    40ac:	40 91 a2 22 	lds	r20, 0x22A2
    40b0:	50 91 a3 22 	lds	r21, 0x22A3
    40b4:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    40b8:	d8 01       	movw	r26, r16
    40ba:	1d 96       	adiw	r26, 0x0d	; 13
    40bc:	6d 93       	st	X+, r22
    40be:	7d 93       	st	X+, r23
    40c0:	8d 93       	st	X+, r24
    40c2:	9c 93       	st	X, r25
    40c4:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    40c8:	80 93 bd 22 	sts	0x22BD, r24
	return (mc_arc_continue());
    40cc:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <mc_arc_continue>
    40d0:	9c 01       	movw	r18, r24
}
    40d2:	c9 01       	movw	r24, r18
    40d4:	28 96       	adiw	r28, 0x08	; 8
    40d6:	cd bf       	out	0x3d, r28	; 61
    40d8:	de bf       	out	0x3e, r29	; 62
    40da:	cf 91       	pop	r28
    40dc:	df 91       	pop	r29
    40de:	1f 91       	pop	r17
    40e0:	0f 91       	pop	r16
    40e2:	ff 90       	pop	r15
    40e4:	ef 90       	pop	r14
    40e6:	df 90       	pop	r13
    40e8:	cf 90       	pop	r12
    40ea:	bf 90       	pop	r11
    40ec:	af 90       	pop	r10
    40ee:	9f 90       	pop	r9
    40f0:	8f 90       	pop	r8
    40f2:	7f 90       	pop	r7
    40f4:	6f 90       	pop	r6
    40f6:	5f 90       	pop	r5
    40f8:	4f 90       	pop	r4
    40fa:	3f 90       	pop	r3
    40fc:	2f 90       	pop	r2
    40fe:	08 95       	ret

00004100 <mc_arc_blocking>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc_blocking(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    4100:	2f 92       	push	r2
    4102:	3f 92       	push	r3
    4104:	4f 92       	push	r4
    4106:	5f 92       	push	r5
    4108:	6f 92       	push	r6
    410a:	7f 92       	push	r7
    410c:	8f 92       	push	r8
    410e:	9f 92       	push	r9
    4110:	af 92       	push	r10
    4112:	bf 92       	push	r11
    4114:	cf 92       	push	r12
    4116:	df 92       	push	r13
    4118:	ef 92       	push	r14
    411a:	ff 92       	push	r15
    411c:	0f 93       	push	r16
    411e:	1f 93       	push	r17
    4120:	df 93       	push	r29
    4122:	cf 93       	push	r28
    4124:	cd b7       	in	r28, 0x3d	; 61
    4126:	de b7       	in	r29, 0x3e	; 62
    4128:	28 97       	sbiw	r28, 0x08	; 8
    412a:	cd bf       	out	0x3d, r28	; 61
    412c:	de bf       	out	0x3e, r29	; 62
    412e:	69 83       	std	Y+1, r22	; 0x01
    4130:	7a 83       	std	Y+2, r23	; 0x02
    4132:	8b 83       	std	Y+3, r24	; 0x03
    4134:	9c 83       	std	Y+4, r25	; 0x04
    4136:	29 01       	movw	r4, r18
    4138:	3a 01       	movw	r6, r20
    413a:	ed 82       	std	Y+5, r14	; 0x05
    413c:	fe 82       	std	Y+6, r15	; 0x06
    413e:	0f 83       	std	Y+7, r16	; 0x07
    4140:	18 87       	std	Y+8, r17	; 0x08
    4142:	2e 8c       	ldd	r2, Y+30	; 0x1e
    4144:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    4146:	60 93 e2 22 	sts	0x22E2, r22
    414a:	70 93 e3 22 	sts	0x22E3, r23
    414e:	80 93 e4 22 	sts	0x22E4, r24
    4152:	90 93 e5 22 	sts	0x22E5, r25
	ma.radius = radius;
    4156:	e0 92 e6 22 	sts	0x22E6, r14
    415a:	f0 92 e7 22 	sts	0x22E7, r15
    415e:	00 93 e8 22 	sts	0x22E8, r16
    4162:	10 93 e9 22 	sts	0x22E9, r17
	ma.angular_travel = angular_travel;
    4166:	20 93 f6 22 	sts	0x22F6, r18
    416a:	30 93 f7 22 	sts	0x22F7, r19
    416e:	40 93 f8 22 	sts	0x22F8, r20
    4172:	50 93 f9 22 	sts	0x22F9, r21
	ma.linear_travel = linear_travel;
    4176:	a0 92 fa 22 	sts	0x22FA, r10
    417a:	b0 92 fb 22 	sts	0x22FB, r11
    417e:	c0 92 fc 22 	sts	0x22FC, r12
    4182:	d0 92 fd 22 	sts	0x22FD, r13
	ma.feed_rate = feed_rate;
    4186:	8a a1       	ldd	r24, Y+34	; 0x22
    4188:	9b a1       	ldd	r25, Y+35	; 0x23
    418a:	ac a1       	ldd	r26, Y+36	; 0x24
    418c:	bd a1       	ldd	r27, Y+37	; 0x25
    418e:	80 93 ea 22 	sts	0x22EA, r24
    4192:	90 93 eb 22 	sts	0x22EB, r25
    4196:	a0 93 ec 22 	sts	0x22EC, r26
    419a:	b0 93 ed 22 	sts	0x22ED, r27
	ma.invert_feed_rate = invert_feed_rate;
    419e:	ae a1       	ldd	r26, Y+38	; 0x26
    41a0:	bf a1       	ldd	r27, Y+39	; 0x27
    41a2:	a0 93 c2 22 	sts	0x22C2, r26
    41a6:	b0 93 c3 22 	sts	0x22C3, r27
	ma.axis_1 = axis_1;
    41aa:	80 92 c4 22 	sts	0x22C4, r8
    41ae:	90 92 c5 22 	sts	0x22C5, r9
	ma.axis_2 = axis_2;
    41b2:	20 92 c6 22 	sts	0x22C6, r2
    41b6:	30 92 c7 22 	sts	0x22C7, r3
	ma.axis_linear = axis_linear;
    41ba:	e8 a1       	ldd	r30, Y+32	; 0x20
    41bc:	f9 a1       	ldd	r31, Y+33	; 0x21
    41be:	e0 93 c8 22 	sts	0x22C8, r30
    41c2:	f0 93 c9 22 	sts	0x22C9, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    41c6:	ca 01       	movw	r24, r20
    41c8:	b9 01       	movw	r22, r18
    41ca:	a8 01       	movw	r20, r16
    41cc:	97 01       	movw	r18, r14
    41ce:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    41d2:	7b 01       	movw	r14, r22
    41d4:	8c 01       	movw	r16, r24
    41d6:	c6 01       	movw	r24, r12
    41d8:	b5 01       	movw	r22, r10
    41da:	0e 94 cc 42 	call	0x8598	; 0x8598 <__fixsfsi>
    41de:	97 ff       	sbrs	r25, 7
    41e0:	07 c0       	rjmp	.+14     	; 0x41f0 <mc_arc_blocking+0xf0>
    41e2:	90 95       	com	r25
    41e4:	80 95       	com	r24
    41e6:	70 95       	com	r23
    41e8:	61 95       	neg	r22
    41ea:	7f 4f       	sbci	r23, 0xFF	; 255
    41ec:	8f 4f       	sbci	r24, 0xFF	; 255
    41ee:	9f 4f       	sbci	r25, 0xFF	; 255
    41f0:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    41f4:	9b 01       	movw	r18, r22
    41f6:	ac 01       	movw	r20, r24
    41f8:	c8 01       	movw	r24, r16
    41fa:	b7 01       	movw	r22, r14
    41fc:	0e 94 5a 44 	call	0x88b4	; 0x88b4 <hypot>
    4200:	7b 01       	movw	r14, r22
    4202:	8c 01       	movw	r16, r24
    4204:	60 93 d6 22 	sts	0x22D6, r22
    4208:	70 93 d7 22 	sts	0x22D7, r23
    420c:	80 93 d8 22 	sts	0x22D8, r24
    4210:	90 93 d9 22 	sts	0x22D9, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    4214:	2d ec       	ldi	r18, 0xCD	; 205
    4216:	3c ec       	ldi	r19, 0xCC	; 204
    4218:	4c e4       	ldi	r20, 0x4C	; 76
    421a:	5d e3       	ldi	r21, 0x3D	; 61
    421c:	0e 94 5d 42 	call	0x84ba	; 0x84ba <__cmpsf2>
    4220:	88 23       	and	r24, r24
    4222:	1c f4       	brge	.+6      	; 0x422a <mc_arc_blocking+0x12a>
    4224:	23 e1       	ldi	r18, 0x13	; 19
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	c7 c1       	rjmp	.+910    	; 0x45b8 <mc_arc_blocking+0x4b8>
		return (TG_ARC_SPECIFICATION_ERROR);			
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    422a:	c8 01       	movw	r24, r16
    422c:	b7 01       	movw	r22, r14
    422e:	20 91 51 22 	lds	r18, 0x2251
    4232:	30 91 52 22 	lds	r19, 0x2252
    4236:	40 91 53 22 	lds	r20, 0x2253
    423a:	50 91 54 22 	lds	r21, 0x2254
    423e:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    4242:	0e 94 4a 42 	call	0x8494	; 0x8494 <ceil>
    4246:	0e 94 cc 42 	call	0x8598	; 0x8598 <__fixsfsi>
    424a:	8b 01       	movw	r16, r22
    424c:	60 93 be 22 	sts	0x22BE, r22
    4250:	70 93 bf 22 	sts	0x22BF, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    4254:	2e a1       	ldd	r18, Y+38	; 0x26
    4256:	3f a1       	ldd	r19, Y+39	; 0x27
    4258:	23 2b       	or	r18, r19
    425a:	b9 f0       	breq	.+46     	; 0x428a <mc_arc_blocking+0x18a>
		ma.feed_rate *= ma.segments; 
    425c:	b8 01       	movw	r22, r16
    425e:	88 27       	eor	r24, r24
    4260:	77 fd       	sbrc	r23, 7
    4262:	80 95       	com	r24
    4264:	98 2f       	mov	r25, r24
    4266:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    426a:	9b 01       	movw	r18, r22
    426c:	ac 01       	movw	r20, r24
    426e:	6a a1       	ldd	r22, Y+34	; 0x22
    4270:	7b a1       	ldd	r23, Y+35	; 0x23
    4272:	8c a1       	ldd	r24, Y+36	; 0x24
    4274:	9d a1       	ldd	r25, Y+37	; 0x25
    4276:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    427a:	60 93 ea 22 	sts	0x22EA, r22
    427e:	70 93 eb 22 	sts	0x22EB, r23
    4282:	80 93 ec 22 	sts	0x22EC, r24
    4286:	90 93 ed 22 	sts	0x22ED, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    428a:	b8 01       	movw	r22, r16
    428c:	88 27       	eor	r24, r24
    428e:	77 fd       	sbrc	r23, 7
    4290:	80 95       	com	r24
    4292:	98 2f       	mov	r25, r24
    4294:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    4298:	7b 01       	movw	r14, r22
    429a:	8c 01       	movw	r16, r24
    429c:	c3 01       	movw	r24, r6
    429e:	b2 01       	movw	r22, r4
    42a0:	a8 01       	movw	r20, r16
    42a2:	97 01       	movw	r18, r14
    42a4:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    42a8:	60 93 ee 22 	sts	0x22EE, r22
    42ac:	70 93 ef 22 	sts	0x22EF, r23
    42b0:	80 93 f0 22 	sts	0x22F0, r24
    42b4:	90 93 f1 22 	sts	0x22F1, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    42b8:	c6 01       	movw	r24, r12
    42ba:	b5 01       	movw	r22, r10
    42bc:	a8 01       	movw	r20, r16
    42be:	97 01       	movw	r18, r14
    42c0:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    42c4:	60 93 f2 22 	sts	0x22F2, r22
    42c8:	70 93 f3 22 	sts	0x22F3, r23
    42cc:	80 93 f4 22 	sts	0x22F4, r24
    42d0:	90 93 f5 22 	sts	0x22F5, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    42d4:	69 81       	ldd	r22, Y+1	; 0x01
    42d6:	7a 81       	ldd	r23, Y+2	; 0x02
    42d8:	8b 81       	ldd	r24, Y+3	; 0x03
    42da:	9c 81       	ldd	r25, Y+4	; 0x04
    42dc:	0e 94 82 45 	call	0x8b04	; 0x8b04 <sin>
    42e0:	5b 01       	movw	r10, r22
    42e2:	6c 01       	movw	r12, r24
    42e4:	f4 01       	movw	r30, r8
    42e6:	ee 0f       	add	r30, r30
    42e8:	ff 1f       	adc	r31, r31
    42ea:	ee 0f       	add	r30, r30
    42ec:	ff 1f       	adc	r31, r31
    42ee:	e9 59       	subi	r30, 0x99	; 153
    42f0:	fe 4d       	sbci	r31, 0xDE	; 222
    42f2:	61 81       	ldd	r22, Z+1	; 0x01
    42f4:	72 81       	ldd	r23, Z+2	; 0x02
    42f6:	83 81       	ldd	r24, Z+3	; 0x03
    42f8:	94 81       	ldd	r25, Z+4	; 0x04
    42fa:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    42fe:	f4 01       	movw	r30, r8
    4300:	ee 0f       	add	r30, r30
    4302:	ff 1f       	adc	r31, r31
    4304:	e8 0d       	add	r30, r8
    4306:	f9 1d       	adc	r31, r9
    4308:	23 e0       	ldi	r18, 0x03	; 3
    430a:	ee 0f       	add	r30, r30
    430c:	ff 1f       	adc	r31, r31
    430e:	2a 95       	dec	r18
    4310:	e1 f7       	brne	.-8      	; 0x430a <mc_arc_blocking+0x20a>
    4312:	e1 5b       	subi	r30, 0xB1	; 177
    4314:	fd 4d       	sbci	r31, 0xDD	; 221
    4316:	21 a1       	ldd	r18, Z+33	; 0x21
    4318:	32 a1       	ldd	r19, Z+34	; 0x22
    431a:	43 a1       	ldd	r20, Z+35	; 0x23
    431c:	54 a1       	ldd	r21, Z+36	; 0x24
    431e:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    4322:	7b 01       	movw	r14, r22
    4324:	8c 01       	movw	r16, r24
    4326:	c6 01       	movw	r24, r12
    4328:	b5 01       	movw	r22, r10
    432a:	2d 81       	ldd	r18, Y+5	; 0x05
    432c:	3e 81       	ldd	r19, Y+6	; 0x06
    432e:	4f 81       	ldd	r20, Y+7	; 0x07
    4330:	58 85       	ldd	r21, Y+8	; 0x08
    4332:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    4336:	9b 01       	movw	r18, r22
    4338:	ac 01       	movw	r20, r24
    433a:	c8 01       	movw	r24, r16
    433c:	b7 01       	movw	r22, r14
    433e:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    4342:	60 93 da 22 	sts	0x22DA, r22
    4346:	70 93 db 22 	sts	0x22DB, r23
    434a:	80 93 dc 22 	sts	0x22DC, r24
    434e:	90 93 dd 22 	sts	0x22DD, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    4352:	69 81       	ldd	r22, Y+1	; 0x01
    4354:	7a 81       	ldd	r23, Y+2	; 0x02
    4356:	8b 81       	ldd	r24, Y+3	; 0x03
    4358:	9c 81       	ldd	r25, Y+4	; 0x04
    435a:	0e 94 61 42 	call	0x84c2	; 0x84c2 <cos>
    435e:	5b 01       	movw	r10, r22
    4360:	6c 01       	movw	r12, r24
    4362:	f1 01       	movw	r30, r2
    4364:	ee 0f       	add	r30, r30
    4366:	ff 1f       	adc	r31, r31
    4368:	ee 0f       	add	r30, r30
    436a:	ff 1f       	adc	r31, r31
    436c:	e9 59       	subi	r30, 0x99	; 153
    436e:	fe 4d       	sbci	r31, 0xDE	; 222
    4370:	61 81       	ldd	r22, Z+1	; 0x01
    4372:	72 81       	ldd	r23, Z+2	; 0x02
    4374:	83 81       	ldd	r24, Z+3	; 0x03
    4376:	94 81       	ldd	r25, Z+4	; 0x04
    4378:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    437c:	f1 01       	movw	r30, r2
    437e:	ee 0f       	add	r30, r30
    4380:	ff 1f       	adc	r31, r31
    4382:	e2 0d       	add	r30, r2
    4384:	f3 1d       	adc	r31, r3
    4386:	b3 e0       	ldi	r27, 0x03	; 3
    4388:	ee 0f       	add	r30, r30
    438a:	ff 1f       	adc	r31, r31
    438c:	ba 95       	dec	r27
    438e:	e1 f7       	brne	.-8      	; 0x4388 <mc_arc_blocking+0x288>
    4390:	e1 5b       	subi	r30, 0xB1	; 177
    4392:	fd 4d       	sbci	r31, 0xDD	; 221
    4394:	21 a1       	ldd	r18, Z+33	; 0x21
    4396:	32 a1       	ldd	r19, Z+34	; 0x22
    4398:	43 a1       	ldd	r20, Z+35	; 0x23
    439a:	54 a1       	ldd	r21, Z+36	; 0x24
    439c:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    43a0:	7b 01       	movw	r14, r22
    43a2:	8c 01       	movw	r16, r24
    43a4:	c6 01       	movw	r24, r12
    43a6:	b5 01       	movw	r22, r10
    43a8:	2d 81       	ldd	r18, Y+5	; 0x05
    43aa:	3e 81       	ldd	r19, Y+6	; 0x06
    43ac:	4f 81       	ldd	r20, Y+7	; 0x07
    43ae:	58 85       	ldd	r21, Y+8	; 0x08
    43b0:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    43b4:	9b 01       	movw	r18, r22
    43b6:	ac 01       	movw	r20, r24
    43b8:	c8 01       	movw	r24, r16
    43ba:	b7 01       	movw	r22, r14
    43bc:	0e 94 bd 41 	call	0x837a	; 0x837a <__subsf3>
    43c0:	60 93 de 22 	sts	0x22DE, r22
    43c4:	70 93 df 22 	sts	0x22DF, r23
    43c8:	80 93 e0 22 	sts	0x22E0, r24
    43cc:	90 93 e1 22 	sts	0x22E1, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    43d0:	e8 a1       	ldd	r30, Y+32	; 0x20
    43d2:	f9 a1       	ldd	r31, Y+33	; 0x21
    43d4:	ee 0f       	add	r30, r30
    43d6:	ff 1f       	adc	r31, r31
    43d8:	ee 0f       	add	r30, r30
    43da:	ff 1f       	adc	r31, r31
    43dc:	8f 01       	movw	r16, r30
    43de:	03 54       	subi	r16, 0x43	; 67
    43e0:	1d 4d       	sbci	r17, 0xDD	; 221
    43e2:	e9 59       	subi	r30, 0x99	; 153
    43e4:	fe 4d       	sbci	r31, 0xDE	; 222
    43e6:	61 81       	ldd	r22, Z+1	; 0x01
    43e8:	72 81       	ldd	r23, Z+2	; 0x02
    43ea:	83 81       	ldd	r24, Z+3	; 0x03
    43ec:	94 81       	ldd	r25, Z+4	; 0x04
    43ee:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    43f2:	20 91 a0 22 	lds	r18, 0x22A0
    43f6:	30 91 a1 22 	lds	r19, 0x22A1
    43fa:	40 91 a2 22 	lds	r20, 0x22A2
    43fe:	50 91 a3 22 	lds	r21, 0x22A3
    4402:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    4406:	d8 01       	movw	r26, r16
    4408:	1d 96       	adiw	r26, 0x0d	; 13
    440a:	6d 93       	st	X+, r22
    440c:	7d 93       	st	X+, r23
    440e:	8d 93       	st	X+, r24
    4410:	9c 93       	st	X, r25
    4412:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    4414:	10 92 c0 22 	sts	0x22C0, r1
    4418:	10 92 c1 22 	sts	0x22C1, r1
    441c:	bf c0       	rjmp	.+382    	; 0x459c <mc_arc_blocking+0x49c>
		ma.theta += ma.theta_per_segment;
    441e:	60 91 e2 22 	lds	r22, 0x22E2
    4422:	70 91 e3 22 	lds	r23, 0x22E3
    4426:	80 91 e4 22 	lds	r24, 0x22E4
    442a:	90 91 e5 22 	lds	r25, 0x22E5
    442e:	20 91 ee 22 	lds	r18, 0x22EE
    4432:	30 91 ef 22 	lds	r19, 0x22EF
    4436:	40 91 f0 22 	lds	r20, 0x22F0
    443a:	50 91 f1 22 	lds	r21, 0x22F1
    443e:	0e 94 be 41 	call	0x837c	; 0x837c <__addsf3>
    4442:	7b 01       	movw	r14, r22
    4444:	8c 01       	movw	r16, r24
    4446:	cb 01       	movw	r24, r22
    4448:	d8 01       	movw	r26, r16
    444a:	80 93 e2 22 	sts	0x22E2, r24
    444e:	90 93 e3 22 	sts	0x22E3, r25
    4452:	a0 93 e4 22 	sts	0x22E4, r26
    4456:	b0 93 e5 22 	sts	0x22E5, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    445a:	b7 01       	movw	r22, r14
    445c:	c8 01       	movw	r24, r16
    445e:	0e 94 82 45 	call	0x8b04	; 0x8b04 <sin>
    4462:	80 90 e6 22 	lds	r8, 0x22E6
    4466:	90 90 e7 22 	lds	r9, 0x22E7
    446a:	a0 90 e8 22 	lds	r10, 0x22E8
    446e:	b0 90 e9 22 	lds	r11, 0x22E9
    4472:	c0 90 c4 22 	lds	r12, 0x22C4
    4476:	d0 90 c5 22 	lds	r13, 0x22C5
    447a:	cc 0c       	add	r12, r12
    447c:	dd 1c       	adc	r13, r13
    447e:	cc 0c       	add	r12, r12
    4480:	dd 1c       	adc	r13, r13
    4482:	ed eb       	ldi	r30, 0xBD	; 189
    4484:	f2 e2       	ldi	r31, 0x22	; 34
    4486:	ce 0e       	add	r12, r30
    4488:	df 1e       	adc	r13, r31
    448a:	a5 01       	movw	r20, r10
    448c:	94 01       	movw	r18, r8
    448e:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    4492:	9b 01       	movw	r18, r22
    4494:	ac 01       	movw	r20, r24
    4496:	60 91 da 22 	lds	r22, 0x22DA
    449a:	70 91 db 22 	lds	r23, 0x22DB
    449e:	80 91 dc 22 	lds	r24, 0x22DC
    44a2:	90 91 dd 22 	lds	r25, 0x22DD
    44a6:	0e 94 be 41 	call	0x837c	; 0x837c <__addsf3>
    44aa:	d6 01       	movw	r26, r12
    44ac:	1d 96       	adiw	r26, 0x0d	; 13
    44ae:	6d 93       	st	X+, r22
    44b0:	7d 93       	st	X+, r23
    44b2:	8d 93       	st	X+, r24
    44b4:	9c 93       	st	X, r25
    44b6:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    44b8:	b7 01       	movw	r22, r14
    44ba:	c8 01       	movw	r24, r16
    44bc:	0e 94 61 42 	call	0x84c2	; 0x84c2 <cos>
    44c0:	00 91 c6 22 	lds	r16, 0x22C6
    44c4:	10 91 c7 22 	lds	r17, 0x22C7
    44c8:	00 0f       	add	r16, r16
    44ca:	11 1f       	adc	r17, r17
    44cc:	00 0f       	add	r16, r16
    44ce:	11 1f       	adc	r17, r17
    44d0:	03 54       	subi	r16, 0x43	; 67
    44d2:	1d 4d       	sbci	r17, 0xDD	; 221
    44d4:	a5 01       	movw	r20, r10
    44d6:	94 01       	movw	r18, r8
    44d8:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    44dc:	9b 01       	movw	r18, r22
    44de:	ac 01       	movw	r20, r24
    44e0:	60 91 de 22 	lds	r22, 0x22DE
    44e4:	70 91 df 22 	lds	r23, 0x22DF
    44e8:	80 91 e0 22 	lds	r24, 0x22E0
    44ec:	90 91 e1 22 	lds	r25, 0x22E1
    44f0:	0e 94 be 41 	call	0x837c	; 0x837c <__addsf3>
    44f4:	f8 01       	movw	r30, r16
    44f6:	65 87       	std	Z+13, r22	; 0x0d
    44f8:	76 87       	std	Z+14, r23	; 0x0e
    44fa:	87 87       	std	Z+15, r24	; 0x0f
    44fc:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    44fe:	00 91 c8 22 	lds	r16, 0x22C8
    4502:	10 91 c9 22 	lds	r17, 0x22C9
    4506:	00 0f       	add	r16, r16
    4508:	11 1f       	adc	r17, r17
    450a:	00 0f       	add	r16, r16
    450c:	11 1f       	adc	r17, r17
    450e:	03 54       	subi	r16, 0x43	; 67
    4510:	1d 4d       	sbci	r17, 0xDD	; 221
    4512:	d8 01       	movw	r26, r16
    4514:	1d 96       	adiw	r26, 0x0d	; 13
    4516:	6d 91       	ld	r22, X+
    4518:	7d 91       	ld	r23, X+
    451a:	8d 91       	ld	r24, X+
    451c:	9c 91       	ld	r25, X
    451e:	50 97       	sbiw	r26, 0x10	; 16
    4520:	20 91 f2 22 	lds	r18, 0x22F2
    4524:	30 91 f3 22 	lds	r19, 0x22F3
    4528:	40 91 f4 22 	lds	r20, 0x22F4
    452c:	50 91 f5 22 	lds	r21, 0x22F5
    4530:	0e 94 be 41 	call	0x837c	; 0x837c <__addsf3>
    4534:	f8 01       	movw	r30, r16
    4536:	65 87       	std	Z+13, r22	; 0x0d
    4538:	76 87       	std	Z+14, r23	; 0x0e
    453a:	87 87       	std	Z+15, r24	; 0x0f
    453c:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    453e:	60 91 ca 22 	lds	r22, 0x22CA
    4542:	70 91 cb 22 	lds	r23, 0x22CB
    4546:	80 91 cc 22 	lds	r24, 0x22CC
    454a:	90 91 cd 22 	lds	r25, 0x22CD
    454e:	20 91 ce 22 	lds	r18, 0x22CE
    4552:	30 91 cf 22 	lds	r19, 0x22CF
    4556:	40 91 d0 22 	lds	r20, 0x22D0
    455a:	50 91 d1 22 	lds	r21, 0x22D1
    455e:	e0 90 d2 22 	lds	r14, 0x22D2
    4562:	f0 90 d3 22 	lds	r15, 0x22D3
    4566:	00 91 d4 22 	lds	r16, 0x22D4
    456a:	10 91 d5 22 	lds	r17, 0x22D5
    456e:	a0 90 ea 22 	lds	r10, 0x22EA
    4572:	b0 90 eb 22 	lds	r11, 0x22EB
    4576:	c0 90 ec 22 	lds	r12, 0x22EC
    457a:	d0 90 ed 22 	lds	r13, 0x22ED
    457e:	80 90 c2 22 	lds	r8, 0x22C2
    4582:	90 90 c3 22 	lds	r9, 0x22C3
    4586:	0e 94 90 1c 	call	0x3920	; 0x3920 <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    458a:	80 91 c0 22 	lds	r24, 0x22C0
    458e:	90 91 c1 22 	lds	r25, 0x22C1
    4592:	01 96       	adiw	r24, 0x01	; 1
    4594:	80 93 c0 22 	sts	0x22C0, r24
    4598:	90 93 c1 22 	sts	0x22C1, r25
    459c:	20 91 c0 22 	lds	r18, 0x22C0
    45a0:	30 91 c1 22 	lds	r19, 0x22C1
    45a4:	80 91 be 22 	lds	r24, 0x22BE
    45a8:	90 91 bf 22 	lds	r25, 0x22BF
    45ac:	82 17       	cp	r24, r18
    45ae:	93 07       	cpc	r25, r19
    45b0:	0c f0       	brlt	.+2      	; 0x45b4 <mc_arc_blocking+0x4b4>
    45b2:	35 cf       	rjmp	.-406    	; 0x441e <mc_arc_blocking+0x31e>
    45b4:	20 e0       	ldi	r18, 0x00	; 0
    45b6:	30 e0       	ldi	r19, 0x00	; 0
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    45b8:	c9 01       	movw	r24, r18
    45ba:	28 96       	adiw	r28, 0x08	; 8
    45bc:	cd bf       	out	0x3d, r28	; 61
    45be:	de bf       	out	0x3e, r29	; 62
    45c0:	cf 91       	pop	r28
    45c2:	df 91       	pop	r29
    45c4:	1f 91       	pop	r17
    45c6:	0f 91       	pop	r16
    45c8:	ff 90       	pop	r15
    45ca:	ef 90       	pop	r14
    45cc:	df 90       	pop	r13
    45ce:	cf 90       	pop	r12
    45d0:	bf 90       	pop	r11
    45d2:	af 90       	pop	r10
    45d4:	9f 90       	pop	r9
    45d6:	8f 90       	pop	r8
    45d8:	7f 90       	pop	r7
    45da:	6f 90       	pop	r6
    45dc:	5f 90       	pop	r5
    45de:	4f 90       	pop	r4
    45e0:	3f 90       	pop	r3
    45e2:	2f 90       	pop	r2
    45e4:	08 95       	ret

000045e6 <mc_line_blocking>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line_blocking(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    45e6:	2f 92       	push	r2
    45e8:	3f 92       	push	r3
    45ea:	4f 92       	push	r4
    45ec:	5f 92       	push	r5
    45ee:	6f 92       	push	r6
    45f0:	7f 92       	push	r7
    45f2:	8f 92       	push	r8
    45f4:	9f 92       	push	r9
    45f6:	af 92       	push	r10
    45f8:	bf 92       	push	r11
    45fa:	cf 92       	push	r12
    45fc:	df 92       	push	r13
    45fe:	ef 92       	push	r14
    4600:	ff 92       	push	r15
    4602:	0f 93       	push	r16
    4604:	1f 93       	push	r17
    4606:	df 93       	push	r29
    4608:	cf 93       	push	r28
    460a:	cd b7       	in	r28, 0x3d	; 61
    460c:	de b7       	in	r29, 0x3e	; 62
    460e:	6a 97       	sbiw	r28, 0x1a	; 26
    4610:	cd bf       	out	0x3d, r28	; 61
    4612:	de bf       	out	0x3e, r29	; 62
    4614:	19 01       	movw	r2, r18
    4616:	2a 01       	movw	r4, r20
    4618:	ad 8a       	std	Y+21, r10	; 0x15
    461a:	be 8a       	std	Y+22, r11	; 0x16
    461c:	cf 8a       	std	Y+23, r12	; 0x17
    461e:	d8 8e       	std	Y+24, r13	; 0x18
    4620:	89 8e       	std	Y+25, r8	; 0x19
    4622:	9a 8e       	std	Y+26, r9	; 0x1a
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    4624:	20 91 70 22 	lds	r18, 0x2270
    4628:	30 91 71 22 	lds	r19, 0x2271
    462c:	40 91 72 22 	lds	r20, 0x2272
    4630:	50 91 73 22 	lds	r21, 0x2273
    4634:	29 8b       	std	Y+17, r18	; 0x11
    4636:	3a 8b       	std	Y+18, r19	; 0x12
    4638:	4b 8b       	std	Y+19, r20	; 0x13
    463a:	5c 8b       	std	Y+20, r21	; 0x14
    463c:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    4640:	0e 94 ef 44 	call	0x89de	; 0x89de <lround>
    4644:	3b 01       	movw	r6, r22
    4646:	4c 01       	movw	r8, r24
    4648:	60 92 74 21 	sts	0x2174, r6
    464c:	70 92 75 21 	sts	0x2175, r7
    4650:	80 92 76 21 	sts	0x2176, r8
    4654:	90 92 77 21 	sts	0x2177, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    4658:	80 91 88 22 	lds	r24, 0x2288
    465c:	90 91 89 22 	lds	r25, 0x2289
    4660:	a0 91 8a 22 	lds	r26, 0x228A
    4664:	b0 91 8b 22 	lds	r27, 0x228B
    4668:	8d 87       	std	Y+13, r24	; 0x0d
    466a:	9e 87       	std	Y+14, r25	; 0x0e
    466c:	af 87       	std	Y+15, r26	; 0x0f
    466e:	b8 8b       	std	Y+16, r27	; 0x10
    4670:	c2 01       	movw	r24, r4
    4672:	b1 01       	movw	r22, r2
    4674:	2d 85       	ldd	r18, Y+13	; 0x0d
    4676:	3e 85       	ldd	r19, Y+14	; 0x0e
    4678:	4f 85       	ldd	r20, Y+15	; 0x0f
    467a:	58 89       	ldd	r21, Y+16	; 0x10
    467c:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    4680:	0e 94 ef 44 	call	0x89de	; 0x89de <lround>
    4684:	5b 01       	movw	r10, r22
    4686:	6c 01       	movw	r12, r24
    4688:	a0 92 78 21 	sts	0x2178, r10
    468c:	b0 92 79 21 	sts	0x2179, r11
    4690:	c0 92 7a 21 	sts	0x217A, r12
    4694:	d0 92 7b 21 	sts	0x217B, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    4698:	20 91 a0 22 	lds	r18, 0x22A0
    469c:	30 91 a1 22 	lds	r19, 0x22A1
    46a0:	40 91 a2 22 	lds	r20, 0x22A2
    46a4:	50 91 a3 22 	lds	r21, 0x22A3
    46a8:	29 87       	std	Y+9, r18	; 0x09
    46aa:	3a 87       	std	Y+10, r19	; 0x0a
    46ac:	4b 87       	std	Y+11, r20	; 0x0b
    46ae:	5c 87       	std	Y+12, r21	; 0x0c
    46b0:	c8 01       	movw	r24, r16
    46b2:	b7 01       	movw	r22, r14
    46b4:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    46b8:	0e 94 ef 44 	call	0x89de	; 0x89de <lround>
    46bc:	9b 01       	movw	r18, r22
    46be:	ac 01       	movw	r20, r24
    46c0:	20 93 7c 21 	sts	0x217C, r18
    46c4:	30 93 7d 21 	sts	0x217D, r19
    46c8:	40 93 7e 21 	sts	0x217E, r20
    46cc:	50 93 7f 21 	sts	0x217F, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    46d0:	80 91 68 21 	lds	r24, 0x2168
    46d4:	90 91 69 21 	lds	r25, 0x2169
    46d8:	a0 91 6a 21 	lds	r26, 0x216A
    46dc:	b0 91 6b 21 	lds	r27, 0x216B
    46e0:	84 01       	movw	r16, r8
    46e2:	73 01       	movw	r14, r6
    46e4:	e8 1a       	sub	r14, r24
    46e6:	f9 0a       	sbc	r15, r25
    46e8:	0a 0b       	sbc	r16, r26
    46ea:	1b 0b       	sbc	r17, r27
    46ec:	ed 82       	std	Y+5, r14	; 0x05
    46ee:	fe 82       	std	Y+6, r15	; 0x06
    46f0:	0f 83       	std	Y+7, r16	; 0x07
    46f2:	18 87       	std	Y+8, r17	; 0x08
    46f4:	e0 92 80 21 	sts	0x2180, r14
    46f8:	f0 92 81 21 	sts	0x2181, r15
    46fc:	00 93 82 21 	sts	0x2182, r16
    4700:	10 93 83 21 	sts	0x2183, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    4704:	80 91 6c 21 	lds	r24, 0x216C
    4708:	90 91 6d 21 	lds	r25, 0x216D
    470c:	a0 91 6e 21 	lds	r26, 0x216E
    4710:	b0 91 6f 21 	lds	r27, 0x216F
    4714:	86 01       	movw	r16, r12
    4716:	75 01       	movw	r14, r10
    4718:	e8 1a       	sub	r14, r24
    471a:	f9 0a       	sbc	r15, r25
    471c:	0a 0b       	sbc	r16, r26
    471e:	1b 0b       	sbc	r17, r27
    4720:	e9 82       	std	Y+1, r14	; 0x01
    4722:	fa 82       	std	Y+2, r15	; 0x02
    4724:	0b 83       	std	Y+3, r16	; 0x03
    4726:	1c 83       	std	Y+4, r17	; 0x04
    4728:	e0 92 84 21 	sts	0x2184, r14
    472c:	f0 92 85 21 	sts	0x2185, r15
    4730:	00 93 86 21 	sts	0x2186, r16
    4734:	10 93 87 21 	sts	0x2187, r17
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    4738:	80 91 70 21 	lds	r24, 0x2170
    473c:	90 91 71 21 	lds	r25, 0x2171
    4740:	a0 91 72 21 	lds	r26, 0x2172
    4744:	b0 91 73 21 	lds	r27, 0x2173
    4748:	19 01       	movw	r2, r18
    474a:	2a 01       	movw	r4, r20
    474c:	28 1a       	sub	r2, r24
    474e:	39 0a       	sbc	r3, r25
    4750:	4a 0a       	sbc	r4, r26
    4752:	5b 0a       	sbc	r5, r27
    4754:	20 92 88 21 	sts	0x2188, r2
    4758:	30 92 89 21 	sts	0x2189, r3
    475c:	40 92 8a 21 	sts	0x218A, r4
    4760:	50 92 8b 21 	sts	0x218B, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    4764:	d8 01       	movw	r26, r16
    4766:	c7 01       	movw	r24, r14
    4768:	0d 81       	ldd	r16, Y+5	; 0x05
    476a:	1e 81       	ldd	r17, Y+6	; 0x06
    476c:	2f 81       	ldd	r18, Y+7	; 0x07
    476e:	38 85       	ldd	r19, Y+8	; 0x08
    4770:	80 0f       	add	r24, r16
    4772:	91 1f       	adc	r25, r17
    4774:	a2 1f       	adc	r26, r18
    4776:	b3 1f       	adc	r27, r19
    4778:	82 0d       	add	r24, r2
    477a:	93 1d       	adc	r25, r3
    477c:	a4 1d       	adc	r26, r4
    477e:	b5 1d       	adc	r27, r5
    4780:	00 97       	sbiw	r24, 0x00	; 0
    4782:	a1 05       	cpc	r26, r1
    4784:	b1 05       	cpc	r27, r1
    4786:	19 f4       	brne	.+6      	; 0x478e <mc_line_blocking+0x1a8>
    4788:	24 e1       	ldi	r18, 0x14	; 20
    478a:	30 e0       	ldi	r19, 0x00	; 0
    478c:	86 c0       	rjmp	.+268    	; 0x489a <mc_line_blocking+0x2b4>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    478e:	29 8d       	ldd	r18, Y+25	; 0x19
    4790:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4792:	23 2b       	or	r18, r19
    4794:	59 f0       	breq	.+22     	; 0x47ac <mc_line_blocking+0x1c6>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    4796:	60 ec       	ldi	r22, 0xC0	; 192
    4798:	71 ee       	ldi	r23, 0xE1	; 225
    479a:	84 e6       	ldi	r24, 0x64	; 100
    479c:	9c e4       	ldi	r25, 0x4C	; 76
    479e:	2d 89       	ldd	r18, Y+21	; 0x15
    47a0:	3e 89       	ldd	r19, Y+22	; 0x16
    47a2:	4f 89       	ldd	r20, Y+23	; 0x17
    47a4:	58 8d       	ldd	r21, Y+24	; 0x18
    47a6:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    47aa:	4e c0       	rjmp	.+156    	; 0x4848 <mc_line_blocking+0x262>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    47ac:	6d 81       	ldd	r22, Y+5	; 0x05
    47ae:	7e 81       	ldd	r23, Y+6	; 0x06
    47b0:	8f 81       	ldd	r24, Y+7	; 0x07
    47b2:	98 85       	ldd	r25, Y+8	; 0x08
    47b4:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    47b8:	29 89       	ldd	r18, Y+17	; 0x11
    47ba:	3a 89       	ldd	r19, Y+18	; 0x12
    47bc:	4b 89       	ldd	r20, Y+19	; 0x13
    47be:	5c 89       	ldd	r21, Y+20	; 0x14
    47c0:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    47c4:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <square>
    47c8:	3b 01       	movw	r6, r22
    47ca:	4c 01       	movw	r8, r24
    47cc:	69 81       	ldd	r22, Y+1	; 0x01
    47ce:	7a 81       	ldd	r23, Y+2	; 0x02
    47d0:	8b 81       	ldd	r24, Y+3	; 0x03
    47d2:	9c 81       	ldd	r25, Y+4	; 0x04
    47d4:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    47d8:	2d 85       	ldd	r18, Y+13	; 0x0d
    47da:	3e 85       	ldd	r19, Y+14	; 0x0e
    47dc:	4f 85       	ldd	r20, Y+15	; 0x0f
    47de:	58 89       	ldd	r21, Y+16	; 0x10
    47e0:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    47e4:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <square>
    47e8:	5b 01       	movw	r10, r22
    47ea:	6c 01       	movw	r12, r24
    47ec:	c2 01       	movw	r24, r4
    47ee:	b1 01       	movw	r22, r2
    47f0:	0e 94 ff 42 	call	0x85fe	; 0x85fe <__floatsisf>
    47f4:	29 85       	ldd	r18, Y+9	; 0x09
    47f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    47f8:	4b 85       	ldd	r20, Y+11	; 0x0b
    47fa:	5c 85       	ldd	r21, Y+12	; 0x0c
    47fc:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    4800:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <square>
    4804:	7b 01       	movw	r14, r22
    4806:	8c 01       	movw	r16, r24
    4808:	c4 01       	movw	r24, r8
    480a:	b3 01       	movw	r22, r6
    480c:	a6 01       	movw	r20, r12
    480e:	95 01       	movw	r18, r10
    4810:	0e 94 be 41 	call	0x837c	; 0x837c <__addsf3>
    4814:	a8 01       	movw	r20, r16
    4816:	97 01       	movw	r18, r14
    4818:	0e 94 be 41 	call	0x837c	; 0x837c <__addsf3>
    481c:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <sqrt>
    4820:	60 93 90 21 	sts	0x2190, r22
    4824:	70 93 91 21 	sts	0x2191, r23
    4828:	80 93 92 21 	sts	0x2192, r24
    482c:	90 93 93 21 	sts	0x2193, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    4830:	2d 89       	ldd	r18, Y+21	; 0x15
    4832:	3e 89       	ldd	r19, Y+22	; 0x16
    4834:	4f 89       	ldd	r20, Y+23	; 0x17
    4836:	58 8d       	ldd	r21, Y+24	; 0x18
    4838:	0e 94 64 42 	call	0x84c8	; 0x84c8 <__divsf3>
    483c:	20 e0       	ldi	r18, 0x00	; 0
    483e:	34 e2       	ldi	r19, 0x24	; 36
    4840:	44 e7       	ldi	r20, 0x74	; 116
    4842:	59 e4       	ldi	r21, 0x49	; 73
    4844:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    4848:	0e 94 ef 44 	call	0x89de	; 0x89de <lround>
    484c:	60 93 8c 21 	sts	0x218C, r22
    4850:	70 93 8d 21 	sts	0x218D, r23
    4854:	80 93 8e 21 	sts	0x218E, r24
    4858:	90 93 8f 21 	sts	0x218F, r25
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    485c:	a0 90 8c 21 	lds	r10, 0x218C
    4860:	b0 90 8d 21 	lds	r11, 0x218D
    4864:	c0 90 8e 21 	lds	r12, 0x218E
    4868:	d0 90 8f 21 	lds	r13, 0x218F
    486c:	6d 81       	ldd	r22, Y+5	; 0x05
    486e:	7e 81       	ldd	r23, Y+6	; 0x06
    4870:	8f 81       	ldd	r24, Y+7	; 0x07
    4872:	98 85       	ldd	r25, Y+8	; 0x08
    4874:	29 81       	ldd	r18, Y+1	; 0x01
    4876:	3a 81       	ldd	r19, Y+2	; 0x02
    4878:	4b 81       	ldd	r20, Y+3	; 0x03
    487a:	5c 81       	ldd	r21, Y+4	; 0x04
    487c:	82 01       	movw	r16, r4
    487e:	71 01       	movw	r14, r2
    4880:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    4884:	e8 e6       	ldi	r30, 0x68	; 104
    4886:	f1 e2       	ldi	r31, 0x21	; 33
    4888:	df 01       	movw	r26, r30
    488a:	1c 96       	adiw	r26, 0x0c	; 12
    488c:	8c e0       	ldi	r24, 0x0C	; 12
    488e:	0d 90       	ld	r0, X+
    4890:	01 92       	st	Z+, r0
    4892:	81 50       	subi	r24, 0x01	; 1
    4894:	e1 f7       	brne	.-8      	; 0x488e <mc_line_blocking+0x2a8>
    4896:	20 e0       	ldi	r18, 0x00	; 0
    4898:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    489a:	c9 01       	movw	r24, r18
    489c:	6a 96       	adiw	r28, 0x1a	; 26
    489e:	cd bf       	out	0x3d, r28	; 61
    48a0:	de bf       	out	0x3e, r29	; 62
    48a2:	cf 91       	pop	r28
    48a4:	df 91       	pop	r29
    48a6:	1f 91       	pop	r17
    48a8:	0f 91       	pop	r16
    48aa:	ff 90       	pop	r15
    48ac:	ef 90       	pop	r14
    48ae:	df 90       	pop	r13
    48b0:	cf 90       	pop	r12
    48b2:	bf 90       	pop	r11
    48b4:	af 90       	pop	r10
    48b6:	9f 90       	pop	r9
    48b8:	8f 90       	pop	r8
    48ba:	7f 90       	pop	r7
    48bc:	6f 90       	pop	r6
    48be:	5f 90       	pop	r5
    48c0:	4f 90       	pop	r4
    48c2:	3f 90       	pop	r3
    48c4:	2f 90       	pop	r2
    48c6:	08 95       	ret

000048c8 <mc_motion_stop>:
 * mc_motion_stop() - stop current motion immediately
 */

int mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    48c8:	10 92 67 21 	sts	0x2167, r1
	ma.arc_state = MC_STATE_OFF;
    48cc:	10 92 bd 22 	sts	0x22BD, r1
	mv_flush();						// empty and reset the move queue
    48d0:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <mv_flush>
	st_stop_steppers();				// stop the steppers
    48d4:	0e 94 65 25 	call	0x4aca	; 0x4aca <st_stop_steppers>
    48d8:	f7 cf       	rjmp	.-18     	; 0x48c8 <mc_motion_stop>

000048da <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    48da:	e0 e6       	ldi	r30, 0x60	; 96
    48dc:	f6 e0       	ldi	r31, 0x06	; 6
    48de:	80 e4       	ldi	r24, 0x40	; 64
    48e0:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    48e2:	80 e8       	ldi	r24, 0x80	; 128
    48e4:	81 83       	std	Z+1, r24	; 0x01
}
    48e6:	08 95       	ret

000048e8 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    48e8:	97 fd       	sbrc	r25, 7
    48ea:	05 c0       	rjmp	.+10     	; 0x48f6 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    48ec:	80 e8       	ldi	r24, 0x80	; 128
    48ee:	e0 e6       	ldi	r30, 0x60	; 96
    48f0:	f6 e0       	ldi	r31, 0x06	; 6
    48f2:	85 83       	std	Z+5, r24	; 0x05
    48f4:	04 c0       	rjmp	.+8      	; 0x48fe <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    48f6:	80 e8       	ldi	r24, 0x80	; 128
    48f8:	e0 e6       	ldi	r30, 0x60	; 96
    48fa:	f6 e0       	ldi	r31, 0x06	; 6
    48fc:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    48fe:	80 e4       	ldi	r24, 0x40	; 64
    4900:	e0 e6       	ldi	r30, 0x60	; 96
    4902:	f6 e0       	ldi	r31, 0x06	; 6
    4904:	85 83       	std	Z+5, r24	; 0x05
}
    4906:	08 95       	ret

00004908 <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    4908:	80 e4       	ldi	r24, 0x40	; 64
    490a:	e0 e6       	ldi	r30, 0x60	; 96
    490c:	f6 e0       	ldi	r31, 0x06	; 6
    490e:	86 83       	std	Z+6, r24	; 0x06
}
    4910:	08 95       	ret

00004912 <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    4912:	cf 93       	push	r28
    4914:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    4916:	10 92 0c 22 	sts	0x220C, r1
	ax.exec_mutex = FALSE;
    491a:	10 92 0b 22 	sts	0x220B, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    491e:	80 e0       	ldi	r24, 0x00	; 0
    4920:	96 e0       	ldi	r25, 0x06	; 6
    4922:	80 93 1b 22 	sts	0x221B, r24
    4926:	90 93 1c 22 	sts	0x221C, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    492a:	80 ea       	ldi	r24, 0xA0	; 160
    492c:	96 e0       	ldi	r25, 0x06	; 6
    492e:	80 93 2b 22 	sts	0x222B, r24
    4932:	90 93 2c 22 	sts	0x222C, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    4936:	80 e8       	ldi	r24, 0x80	; 128
    4938:	96 e0       	ldi	r25, 0x06	; 6
    493a:	80 93 3b 22 	sts	0x223B, r24
    493e:	90 93 3c 22 	sts	0x223C, r25
	ax.a[A].port = &A_MOTOR_PORT;
    4942:	80 e6       	ldi	r24, 0x60	; 96
    4944:	96 e0       	ldi	r25, 0x06	; 6
    4946:	80 93 4b 22 	sts	0x224B, r24
    494a:	90 93 4c 22 	sts	0x224C, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    494e:	80 e0       	ldi	r24, 0x00	; 0
    4950:	98 e0       	ldi	r25, 0x08	; 8
    4952:	80 93 1d 22 	sts	0x221D, r24
    4956:	90 93 1e 22 	sts	0x221E, r25
	ax.a[Y].timer = &Y_TIMER;
    495a:	80 e0       	ldi	r24, 0x00	; 0
    495c:	99 e0       	ldi	r25, 0x09	; 9
    495e:	80 93 2d 22 	sts	0x222D, r24
    4962:	90 93 2e 22 	sts	0x222E, r25
	ax.a[Z].timer = &Z_TIMER;
    4966:	80 e0       	ldi	r24, 0x00	; 0
    4968:	9a e0       	ldi	r25, 0x0A	; 10
    496a:	80 93 3d 22 	sts	0x223D, r24
    496e:	90 93 3e 22 	sts	0x223E, r25
	ax.a[A].timer = &A_TIMER;
    4972:	80 e0       	ldi	r24, 0x00	; 0
    4974:	9b e0       	ldi	r25, 0x0B	; 11
    4976:	80 93 4d 22 	sts	0x224D, r24
    497a:	90 93 4e 22 	sts	0x224E, r25
    497e:	cf e5       	ldi	r28, 0x5F	; 95
    4980:	d2 e2       	ldi	r29, 0x22	; 34
    4982:	a9 e1       	ldi	r26, 0x19	; 25
    4984:	b2 e2       	ldi	r27, 0x22	; 34

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    4986:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4988:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    498a:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    498c:	88 81       	ld	r24, Y
    498e:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    4990:	12 96       	adiw	r26, 0x02	; 2
    4992:	ed 91       	ld	r30, X+
    4994:	fc 91       	ld	r31, X
    4996:	13 97       	sbiw	r26, 0x03	; 3
    4998:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    499a:	12 96       	adiw	r26, 0x02	; 2
    499c:	ed 91       	ld	r30, X+
    499e:	fc 91       	ld	r31, X
    49a0:	13 97       	sbiw	r26, 0x03	; 3
    49a2:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
    49a4:	12 96       	adiw	r26, 0x02	; 2
    49a6:	ed 91       	ld	r30, X+
    49a8:	fc 91       	ld	r31, X
    49aa:	13 97       	sbiw	r26, 0x03	; 3
    49ac:	84 81       	ldd	r24, Z+4	; 0x04
    49ae:	88 61       	ori	r24, 0x18	; 24
    49b0:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    49b2:	12 96       	adiw	r26, 0x02	; 2
    49b4:	ed 91       	ld	r30, X+
    49b6:	fc 91       	ld	r31, X
    49b8:	13 97       	sbiw	r26, 0x03	; 3
    49ba:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    49bc:	14 96       	adiw	r26, 0x04	; 4
    49be:	ed 91       	ld	r30, X+
    49c0:	fc 91       	ld	r31, X
    49c2:	15 97       	sbiw	r26, 0x05	; 5
    49c4:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    49c6:	14 96       	adiw	r26, 0x04	; 4
    49c8:	ed 91       	ld	r30, X+
    49ca:	fc 91       	ld	r31, X
    49cc:	15 97       	sbiw	r26, 0x05	; 5
    49ce:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    49d0:	14 96       	adiw	r26, 0x04	; 4
    49d2:	ed 91       	ld	r30, X+
    49d4:	fc 91       	ld	r31, X
    49d6:	15 97       	sbiw	r26, 0x05	; 5
    49d8:	96 83       	std	Z+6, r25	; 0x06
    49da:	68 96       	adiw	r28, 0x18	; 24
    49dc:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    49de:	82 e2       	ldi	r24, 0x22	; 34
    49e0:	cf 3b       	cpi	r28, 0xBF	; 191
    49e2:	d8 07       	cpc	r29, r24
    49e4:	99 f6       	brne	.-90     	; 0x498c <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    49e6:	df 91       	pop	r29
    49e8:	cf 91       	pop	r28
    49ea:	08 95       	ret

000049ec <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    49ec:	e8 2f       	mov	r30, r24
    49ee:	f0 e0       	ldi	r31, 0x00	; 0
    49f0:	84 e0       	ldi	r24, 0x04	; 4
    49f2:	ee 0f       	add	r30, r30
    49f4:	ff 1f       	adc	r31, r31
    49f6:	8a 95       	dec	r24
    49f8:	e1 f7       	brne	.-8      	; 0x49f2 <st_set_polarity+0x6>
    49fa:	e5 5f       	subi	r30, 0xF5	; 245
    49fc:	fd 4d       	sbci	r31, 0xDD	; 221
    49fe:	66 87       	std	Z+14, r22	; 0x0e
}
    4a00:	08 95       	ret

00004a02 <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X].step_counter = 0x00001000;
    4a02:	2f e0       	ldi	r18, 0x0F	; 15
    4a04:	32 e2       	ldi	r19, 0x22	; 34
    4a06:	80 e0       	ldi	r24, 0x00	; 0
    4a08:	90 e1       	ldi	r25, 0x10	; 16
    4a0a:	a0 e0       	ldi	r26, 0x00	; 0
    4a0c:	b0 e0       	ldi	r27, 0x00	; 0
    4a0e:	80 93 0f 22 	sts	0x220F, r24
    4a12:	90 93 10 22 	sts	0x2210, r25
    4a16:	a0 93 11 22 	sts	0x2211, r26
    4a1a:	b0 93 12 22 	sts	0x2212, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    4a1e:	e0 91 1d 22 	lds	r30, 0x221D
    4a22:	f0 91 1e 22 	lds	r31, 0x221E
    4a26:	80 e0       	ldi	r24, 0x00	; 0
    4a28:	90 e1       	ldi	r25, 0x10	; 16
    4a2a:	86 a3       	std	Z+38, r24	; 0x26
    4a2c:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    4a2e:	41 e0       	ldi	r20, 0x01	; 1
    4a30:	40 83       	st	Z, r20

	ax.a[Y].step_counter = 0x00000800;
    4a32:	80 e0       	ldi	r24, 0x00	; 0
    4a34:	98 e0       	ldi	r25, 0x08	; 8
    4a36:	a0 e0       	ldi	r26, 0x00	; 0
    4a38:	b0 e0       	ldi	r27, 0x00	; 0
    4a3a:	80 93 1f 22 	sts	0x221F, r24
    4a3e:	90 93 20 22 	sts	0x2220, r25
    4a42:	a0 93 21 22 	sts	0x2221, r26
    4a46:	b0 93 22 22 	sts	0x2222, r27
	ax.a[Y].timer->PER = 0x2000;
    4a4a:	e0 91 2d 22 	lds	r30, 0x222D
    4a4e:	f0 91 2e 22 	lds	r31, 0x222E
    4a52:	80 e0       	ldi	r24, 0x00	; 0
    4a54:	90 e2       	ldi	r25, 0x20	; 32
    4a56:	86 a3       	std	Z+38, r24	; 0x26
    4a58:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4a5a:	40 83       	st	Z, r20

	ax.a[Z].step_counter = 0x00000600;
    4a5c:	80 e0       	ldi	r24, 0x00	; 0
    4a5e:	96 e0       	ldi	r25, 0x06	; 6
    4a60:	a0 e0       	ldi	r26, 0x00	; 0
    4a62:	b0 e0       	ldi	r27, 0x00	; 0
    4a64:	80 93 2f 22 	sts	0x222F, r24
    4a68:	90 93 30 22 	sts	0x2230, r25
    4a6c:	a0 93 31 22 	sts	0x2231, r26
    4a70:	b0 93 32 22 	sts	0x2232, r27
	ax.a[Z].timer->PER = 0x3000;
    4a74:	e0 91 3d 22 	lds	r30, 0x223D
    4a78:	f0 91 3e 22 	lds	r31, 0x223E
    4a7c:	80 e0       	ldi	r24, 0x00	; 0
    4a7e:	90 e3       	ldi	r25, 0x30	; 48
    4a80:	86 a3       	std	Z+38, r24	; 0x26
    4a82:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4a84:	40 83       	st	Z, r20

	ax.a[A].step_counter = 0x00000400;
    4a86:	80 e0       	ldi	r24, 0x00	; 0
    4a88:	94 e0       	ldi	r25, 0x04	; 4
    4a8a:	a0 e0       	ldi	r26, 0x00	; 0
    4a8c:	b0 e0       	ldi	r27, 0x00	; 0
    4a8e:	80 93 3f 22 	sts	0x223F, r24
    4a92:	90 93 40 22 	sts	0x2240, r25
    4a96:	a0 93 41 22 	sts	0x2241, r26
    4a9a:	b0 93 42 22 	sts	0x2242, r27
	ax.a[A].timer->PER = 0x4000;
    4a9e:	d9 01       	movw	r26, r18
    4aa0:	de 96       	adiw	r26, 0x3e	; 62
    4aa2:	ed 91       	ld	r30, X+
    4aa4:	fc 91       	ld	r31, X
    4aa6:	df 97       	sbiw	r26, 0x3f	; 63
    4aa8:	80 e0       	ldi	r24, 0x00	; 0
    4aaa:	90 e4       	ldi	r25, 0x40	; 64
    4aac:	86 a3       	std	Z+38, r24	; 0x26
    4aae:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    4ab0:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    4ab2:	23 50       	subi	r18, 0x03	; 3
    4ab4:	30 40       	sbci	r19, 0x00	; 0
    4ab6:	f9 01       	movw	r30, r18
    4ab8:	80 81       	ld	r24, Z
    4aba:	8f 60       	ori	r24, 0x0F	; 15
    4abc:	80 83       	st	Z, r24
}
    4abe:	08 95       	ret

00004ac0 <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    4ac0:	f8 94       	cli
	mv_flush();									// flush the move buffer
    4ac2:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <mv_flush>
	sei();
    4ac6:	78 94       	sei
}
    4ac8:	08 95       	ret

00004aca <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    4aca:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    4acc:	e0 91 1d 22 	lds	r30, 0x221D
    4ad0:	f0 91 1e 22 	lds	r31, 0x221E
    4ad4:	10 82       	st	Z, r1
    4ad6:	e0 91 2d 22 	lds	r30, 0x222D
    4ada:	f0 91 2e 22 	lds	r31, 0x222E
    4ade:	10 82       	st	Z, r1
    4ae0:	e0 91 3d 22 	lds	r30, 0x223D
    4ae4:	f0 91 3e 22 	lds	r31, 0x223E
    4ae8:	10 82       	st	Z, r1
    4aea:	e0 91 4d 22 	lds	r30, 0x224D
    4aee:	f0 91 4e 22 	lds	r31, 0x224E
    4af2:	10 82       	st	Z, r1
	}	
	mv_flush();									// flush the move buffer
    4af4:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4af8:	10 92 0c 22 	sts	0x220C, r1
	sei();
    4afc:	78 94       	sei
}
    4afe:	08 95       	ret

00004b00 <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    4b00:	cf 92       	push	r12
    4b02:	df 92       	push	r13
    4b04:	ef 92       	push	r14
    4b06:	ff 92       	push	r15
    4b08:	0f 93       	push	r16
    4b0a:	1f 93       	push	r17
    4b0c:	cf 93       	push	r28
    4b0e:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    4b10:	80 91 0b 22 	lds	r24, 0x220B
    4b14:	88 23       	and	r24, r24
    4b16:	09 f0       	breq	.+2      	; 0x4b1a <st_execute_move+0x1a>
    4b18:	32 c1       	rjmp	.+612    	; 0x4d7e <st_execute_move+0x27e>
		return;
	}
	ax.exec_mutex = TRUE;
    4b1a:	81 e0       	ldi	r24, 0x01	; 1
    4b1c:	80 93 0b 22 	sts	0x220B, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    4b20:	80 91 0c 22 	lds	r24, 0x220C
    4b24:	88 23       	and	r24, r24
    4b26:	09 f0       	breq	.+2      	; 0x4b2a <st_execute_move+0x2a>
    4b28:	28 c1       	rjmp	.+592    	; 0x4d7a <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    4b2a:	0e 94 ed 2c 	call	0x59da	; 0x59da <mv_dequeue_move_buffer>
    4b2e:	80 93 0d 22 	sts	0x220D, r24
    4b32:	90 93 0e 22 	sts	0x220E, r25
    4b36:	89 2b       	or	r24, r25
    4b38:	09 f4       	brne	.+2      	; 0x4b3c <st_execute_move+0x3c>
    4b3a:	1f c1       	rjmp	.+574    	; 0x4d7a <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;
		return;
    4b3c:	6f e0       	ldi	r22, 0x0F	; 15
    4b3e:	72 e2       	ldi	r23, 0x22	; 34
    4b40:	00 e0       	ldi	r16, 0x00	; 0
    4b42:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4b44:	94 e0       	ldi	r25, 0x04	; 4
    4b46:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4b48:	82 e0       	ldi	r24, 0x02	; 2
    4b4a:	d8 2e       	mov	r13, r24
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.exec_mutex = FALSE;
		return;
    4b4c:	f0 2e       	mov	r15, r16
    4b4e:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    4b50:	db 01       	movw	r26, r22
    4b52:	1e 96       	adiw	r26, 0x0e	; 14
    4b54:	ed 91       	ld	r30, X+
    4b56:	fc 91       	ld	r31, X
    4b58:	1f 97       	sbiw	r26, 0x0f	; 15
    4b5a:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    4b5c:	c0 91 0d 22 	lds	r28, 0x220D
    4b60:	d0 91 0e 22 	lds	r29, 0x220E
    4b64:	c8 01       	movw	r24, r16
    4b66:	fc 01       	movw	r30, r24
    4b68:	b3 e0       	ldi	r27, 0x03	; 3
    4b6a:	ee 0f       	add	r30, r30
    4b6c:	ff 1f       	adc	r31, r31
    4b6e:	ba 95       	dec	r27
    4b70:	e1 f7       	brne	.-8      	; 0x4b6a <st_execute_move+0x6a>
    4b72:	88 0f       	add	r24, r24
    4b74:	99 1f       	adc	r25, r25
    4b76:	e8 0f       	add	r30, r24
    4b78:	f9 1f       	adc	r31, r25
    4b7a:	ec 0f       	add	r30, r28
    4b7c:	fd 1f       	adc	r31, r29
    4b7e:	80 81       	ld	r24, Z
    4b80:	91 81       	ldd	r25, Z+1	; 0x01
    4b82:	a2 81       	ldd	r26, Z+2	; 0x02
    4b84:	b3 81       	ldd	r27, Z+3	; 0x03
    4b86:	00 97       	sbiw	r24, 0x00	; 0
    4b88:	a1 05       	cpc	r26, r1
    4b8a:	b1 05       	cpc	r27, r1
    4b8c:	09 f4       	brne	.+2      	; 0x4b90 <st_execute_move+0x90>
    4b8e:	a6 c0       	rjmp	.+332    	; 0x4cdc <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    4b90:	c8 01       	movw	r24, r16
    4b92:	9c 01       	movw	r18, r24
    4b94:	f3 e0       	ldi	r31, 0x03	; 3
    4b96:	22 0f       	add	r18, r18
    4b98:	33 1f       	adc	r19, r19
    4b9a:	fa 95       	dec	r31
    4b9c:	e1 f7       	brne	.-8      	; 0x4b96 <st_execute_move+0x96>
    4b9e:	88 0f       	add	r24, r24
    4ba0:	99 1f       	adc	r25, r25
    4ba2:	28 0f       	add	r18, r24
    4ba4:	39 1f       	adc	r19, r25
    4ba6:	c2 0f       	add	r28, r18
    4ba8:	d3 1f       	adc	r29, r19
    4baa:	89 85       	ldd	r24, Y+9	; 0x09
    4bac:	fb 01       	movw	r30, r22
    4bae:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4bb0:	e0 91 0d 22 	lds	r30, 0x220D
    4bb4:	f0 91 0e 22 	lds	r31, 0x220E
    4bb8:	c8 01       	movw	r24, r16
    4bba:	9c 01       	movw	r18, r24
    4bbc:	53 e0       	ldi	r21, 0x03	; 3
    4bbe:	22 0f       	add	r18, r18
    4bc0:	33 1f       	adc	r19, r19
    4bc2:	5a 95       	dec	r21
    4bc4:	e1 f7       	brne	.-8      	; 0x4bbe <st_execute_move+0xbe>
    4bc6:	88 0f       	add	r24, r24
    4bc8:	99 1f       	adc	r25, r25
    4bca:	28 0f       	add	r18, r24
    4bcc:	39 1f       	adc	r19, r25
    4bce:	e2 0f       	add	r30, r18
    4bd0:	f3 1f       	adc	r31, r19
    4bd2:	90 85       	ldd	r25, Z+8	; 0x08
    4bd4:	db 01       	movw	r26, r22
    4bd6:	1a 96       	adiw	r26, 0x0a	; 10
    4bd8:	8c 91       	ld	r24, X
    4bda:	1a 97       	sbiw	r26, 0x0a	; 10
    4bdc:	1c 96       	adiw	r26, 0x0c	; 12
    4bde:	ed 91       	ld	r30, X+
    4be0:	fc 91       	ld	r31, X
    4be2:	1d 97       	sbiw	r26, 0x0d	; 13
    4be4:	98 17       	cp	r25, r24
    4be6:	11 f0       	breq	.+4      	; 0x4bec <st_execute_move+0xec>
    4be8:	d5 82       	std	Z+5, r13	; 0x05
    4bea:	01 c0       	rjmp	.+2      	; 0x4bee <st_execute_move+0xee>
    4bec:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    4bee:	40 91 0d 22 	lds	r20, 0x220D
    4bf2:	50 91 0e 22 	lds	r21, 0x220E
    4bf6:	8f 2d       	mov	r24, r15
    4bf8:	9e 2d       	mov	r25, r14
    4bfa:	fc 01       	movw	r30, r24
    4bfc:	33 e0       	ldi	r19, 0x03	; 3
    4bfe:	ee 0f       	add	r30, r30
    4c00:	ff 1f       	adc	r31, r31
    4c02:	3a 95       	dec	r19
    4c04:	e1 f7       	brne	.-8      	; 0x4bfe <st_execute_move+0xfe>
    4c06:	88 0f       	add	r24, r24
    4c08:	99 1f       	adc	r25, r25
    4c0a:	e8 0f       	add	r30, r24
    4c0c:	f9 1f       	adc	r31, r25
    4c0e:	e4 0f       	add	r30, r20
    4c10:	f5 1f       	adc	r31, r21
    4c12:	80 81       	ld	r24, Z
    4c14:	91 81       	ldd	r25, Z+1	; 0x01
    4c16:	a2 81       	ldd	r26, Z+2	; 0x02
    4c18:	b3 81       	ldd	r27, Z+3	; 0x03
    4c1a:	fb 01       	movw	r30, r22
    4c1c:	80 83       	st	Z, r24
    4c1e:	91 83       	std	Z+1, r25	; 0x01
    4c20:	a2 83       	std	Z+2, r26	; 0x02
    4c22:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    4c24:	8f 2d       	mov	r24, r15
    4c26:	9e 2d       	mov	r25, r14
    4c28:	fc 01       	movw	r30, r24
    4c2a:	b3 e0       	ldi	r27, 0x03	; 3
    4c2c:	ee 0f       	add	r30, r30
    4c2e:	ff 1f       	adc	r31, r31
    4c30:	ba 95       	dec	r27
    4c32:	e1 f7       	brne	.-8      	; 0x4c2c <st_execute_move+0x12c>
    4c34:	88 0f       	add	r24, r24
    4c36:	99 1f       	adc	r25, r25
    4c38:	e8 0f       	add	r30, r24
    4c3a:	f9 1f       	adc	r31, r25
    4c3c:	e4 0f       	add	r30, r20
    4c3e:	f5 1f       	adc	r31, r21
    4c40:	86 81       	ldd	r24, Z+6	; 0x06
    4c42:	97 81       	ldd	r25, Z+7	; 0x07
    4c44:	db 01       	movw	r26, r22
    4c46:	16 96       	adiw	r26, 0x06	; 6
    4c48:	8d 93       	st	X+, r24
    4c4a:	9c 93       	st	X, r25
    4c4c:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    4c4e:	8f 2d       	mov	r24, r15
    4c50:	9e 2d       	mov	r25, r14
    4c52:	fc 01       	movw	r30, r24
    4c54:	33 e0       	ldi	r19, 0x03	; 3
    4c56:	ee 0f       	add	r30, r30
    4c58:	ff 1f       	adc	r31, r31
    4c5a:	3a 95       	dec	r19
    4c5c:	e1 f7       	brne	.-8      	; 0x4c56 <st_execute_move+0x156>
    4c5e:	88 0f       	add	r24, r24
    4c60:	99 1f       	adc	r25, r25
    4c62:	e8 0f       	add	r30, r24
    4c64:	f9 1f       	adc	r31, r25
    4c66:	e4 0f       	add	r30, r20
    4c68:	f5 1f       	adc	r31, r21
    4c6a:	86 81       	ldd	r24, Z+6	; 0x06
    4c6c:	97 81       	ldd	r25, Z+7	; 0x07
    4c6e:	18 96       	adiw	r26, 0x08	; 8
    4c70:	8d 93       	st	X+, r24
    4c72:	9c 93       	st	X, r25
    4c74:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    4c76:	8f 2d       	mov	r24, r15
    4c78:	9e 2d       	mov	r25, r14
    4c7a:	fc 01       	movw	r30, r24
    4c7c:	33 e0       	ldi	r19, 0x03	; 3
    4c7e:	ee 0f       	add	r30, r30
    4c80:	ff 1f       	adc	r31, r31
    4c82:	3a 95       	dec	r19
    4c84:	e1 f7       	brne	.-8      	; 0x4c7e <st_execute_move+0x17e>
    4c86:	88 0f       	add	r24, r24
    4c88:	99 1f       	adc	r25, r25
    4c8a:	e8 0f       	add	r30, r24
    4c8c:	f9 1f       	adc	r31, r25
    4c8e:	e4 0f       	add	r30, r20
    4c90:	f5 1f       	adc	r31, r21
    4c92:	84 81       	ldd	r24, Z+4	; 0x04
    4c94:	95 81       	ldd	r25, Z+5	; 0x05
    4c96:	14 96       	adiw	r26, 0x04	; 4
    4c98:	8d 93       	st	X+, r24
    4c9a:	9c 93       	st	X, r25
    4c9c:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    4c9e:	1e 96       	adiw	r26, 0x0e	; 14
    4ca0:	ed 91       	ld	r30, X+
    4ca2:	fc 91       	ld	r31, X
    4ca4:	1f 97       	sbiw	r26, 0x0f	; 15
    4ca6:	8f 2d       	mov	r24, r15
    4ca8:	9e 2d       	mov	r25, r14
    4caa:	9c 01       	movw	r18, r24
    4cac:	b3 e0       	ldi	r27, 0x03	; 3
    4cae:	22 0f       	add	r18, r18
    4cb0:	33 1f       	adc	r19, r19
    4cb2:	ba 95       	dec	r27
    4cb4:	e1 f7       	brne	.-8      	; 0x4cae <st_execute_move+0x1ae>
    4cb6:	88 0f       	add	r24, r24
    4cb8:	99 1f       	adc	r25, r25
    4cba:	28 0f       	add	r18, r24
    4cbc:	39 1f       	adc	r19, r25
    4cbe:	42 0f       	add	r20, r18
    4cc0:	53 1f       	adc	r21, r19
    4cc2:	da 01       	movw	r26, r20
    4cc4:	14 96       	adiw	r26, 0x04	; 4
    4cc6:	8d 91       	ld	r24, X+
    4cc8:	9c 91       	ld	r25, X
    4cca:	15 97       	sbiw	r26, 0x05	; 5
    4ccc:	86 a3       	std	Z+38, r24	; 0x26
    4cce:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4cd0:	db 01       	movw	r26, r22
    4cd2:	1c 96       	adiw	r26, 0x0c	; 12
    4cd4:	ed 91       	ld	r30, X+
    4cd6:	fc 91       	ld	r31, X
    4cd8:	1d 97       	sbiw	r26, 0x0d	; 13
    4cda:	c6 82       	std	Z+6, r12	; 0x06
    4cdc:	0f 5f       	subi	r16, 0xFF	; 255
    4cde:	1f 4f       	sbci	r17, 0xFF	; 255
    4ce0:	60 5f       	subi	r22, 0xF0	; 240
    4ce2:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    4ce4:	03 30       	cpi	r16, 0x03	; 3
    4ce6:	11 05       	cpc	r17, r1
    4ce8:	09 f0       	breq	.+2      	; 0x4cec <st_execute_move+0x1ec>
    4cea:	30 cf       	rjmp	.-416    	; 0x4b4c <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4cec:	10 92 0c 22 	sts	0x220C, r1
	if (ax.a[X].step_counter) { 
    4cf0:	80 91 0f 22 	lds	r24, 0x220F
    4cf4:	90 91 10 22 	lds	r25, 0x2210
    4cf8:	a0 91 11 22 	lds	r26, 0x2211
    4cfc:	b0 91 12 22 	lds	r27, 0x2212
    4d00:	00 97       	sbiw	r24, 0x00	; 0
    4d02:	a1 05       	cpc	r26, r1
    4d04:	b1 05       	cpc	r27, r1
    4d06:	59 f0       	breq	.+22     	; 0x4d1e <st_execute_move+0x21e>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    4d08:	e0 91 1d 22 	lds	r30, 0x221D
    4d0c:	f0 91 1e 22 	lds	r31, 0x221E
    4d10:	81 e0       	ldi	r24, 0x01	; 1
    4d12:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4d14:	80 91 0c 22 	lds	r24, 0x220C
    4d18:	88 60       	ori	r24, 0x08	; 8
    4d1a:	80 93 0c 22 	sts	0x220C, r24
	}
	if (ax.a[Y].step_counter) {
    4d1e:	80 91 1f 22 	lds	r24, 0x221F
    4d22:	90 91 20 22 	lds	r25, 0x2220
    4d26:	a0 91 21 22 	lds	r26, 0x2221
    4d2a:	b0 91 22 22 	lds	r27, 0x2222
    4d2e:	00 97       	sbiw	r24, 0x00	; 0
    4d30:	a1 05       	cpc	r26, r1
    4d32:	b1 05       	cpc	r27, r1
    4d34:	59 f0       	breq	.+22     	; 0x4d4c <st_execute_move+0x24c>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4d36:	e0 91 2d 22 	lds	r30, 0x222D
    4d3a:	f0 91 2e 22 	lds	r31, 0x222E
    4d3e:	81 e0       	ldi	r24, 0x01	; 1
    4d40:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4d42:	80 91 0c 22 	lds	r24, 0x220C
    4d46:	84 60       	ori	r24, 0x04	; 4
    4d48:	80 93 0c 22 	sts	0x220C, r24
	}
	if (ax.a[Z].step_counter) {
    4d4c:	80 91 2f 22 	lds	r24, 0x222F
    4d50:	90 91 30 22 	lds	r25, 0x2230
    4d54:	a0 91 31 22 	lds	r26, 0x2231
    4d58:	b0 91 32 22 	lds	r27, 0x2232
    4d5c:	00 97       	sbiw	r24, 0x00	; 0
    4d5e:	a1 05       	cpc	r26, r1
    4d60:	b1 05       	cpc	r27, r1
    4d62:	59 f0       	breq	.+22     	; 0x4d7a <st_execute_move+0x27a>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4d64:	e0 91 3d 22 	lds	r30, 0x223D
    4d68:	f0 91 3e 22 	lds	r31, 0x223E
    4d6c:	81 e0       	ldi	r24, 0x01	; 1
    4d6e:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4d70:	80 91 0c 22 	lds	r24, 0x220C
    4d74:	82 60       	ori	r24, 0x02	; 2
    4d76:	80 93 0c 22 	sts	0x220C, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4d7a:	10 92 0b 22 	sts	0x220B, r1
}
    4d7e:	df 91       	pop	r29
    4d80:	cf 91       	pop	r28
    4d82:	1f 91       	pop	r17
    4d84:	0f 91       	pop	r16
    4d86:	ff 90       	pop	r15
    4d88:	ef 90       	pop	r14
    4d8a:	df 90       	pop	r13
    4d8c:	cf 90       	pop	r12
    4d8e:	08 95       	ret

00004d90 <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4d90:	10 92 0b 22 	sts	0x220B, r1
	st_execute_move();		// recursively empty the move queue
    4d94:	0e 94 80 25 	call	0x4b00	; 0x4b00 <st_execute_move>
	return;
}
    4d98:	08 95       	ret

00004d9a <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4d9a:	1f 92       	push	r1
    4d9c:	0f 92       	push	r0
    4d9e:	0f b6       	in	r0, 0x3f	; 63
    4da0:	0f 92       	push	r0
    4da2:	0b b6       	in	r0, 0x3b	; 59
    4da4:	0f 92       	push	r0
    4da6:	11 24       	eor	r1, r1
    4da8:	2f 93       	push	r18
    4daa:	3f 93       	push	r19
    4dac:	4f 93       	push	r20
    4dae:	5f 93       	push	r21
    4db0:	6f 93       	push	r22
    4db2:	7f 93       	push	r23
    4db4:	8f 93       	push	r24
    4db6:	9f 93       	push	r25
    4db8:	af 93       	push	r26
    4dba:	bf 93       	push	r27
    4dbc:	ef 93       	push	r30
    4dbe:	ff 93       	push	r31
	if (--ax.a[A].postscale_counter != 0) {
    4dc0:	80 91 47 22 	lds	r24, 0x2247
    4dc4:	90 91 48 22 	lds	r25, 0x2248
    4dc8:	01 97       	sbiw	r24, 0x01	; 1
    4dca:	80 93 47 22 	sts	0x2247, r24
    4dce:	90 93 48 22 	sts	0x2248, r25
    4dd2:	89 2b       	or	r24, r25
    4dd4:	a1 f5       	brne	.+104    	; 0x4e3e <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4dd6:	e0 e6       	ldi	r30, 0x60	; 96
    4dd8:	f6 e0       	ldi	r31, 0x06	; 6
    4dda:	81 e0       	ldi	r24, 0x01	; 1
    4ddc:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    4dde:	80 91 3f 22 	lds	r24, 0x223F
    4de2:	90 91 40 22 	lds	r25, 0x2240
    4de6:	a0 91 41 22 	lds	r26, 0x2241
    4dea:	b0 91 42 22 	lds	r27, 0x2242
    4dee:	01 97       	sbiw	r24, 0x01	; 1
    4df0:	a1 09       	sbc	r26, r1
    4df2:	b1 09       	sbc	r27, r1
    4df4:	80 93 3f 22 	sts	0x223F, r24
    4df8:	90 93 40 22 	sts	0x2240, r25
    4dfc:	a0 93 41 22 	sts	0x2241, r26
    4e00:	b0 93 42 22 	sts	0x2242, r27
    4e04:	00 97       	sbiw	r24, 0x00	; 0
    4e06:	a1 05       	cpc	r26, r1
    4e08:	b1 05       	cpc	r27, r1
    4e0a:	69 f4       	brne	.+26     	; 0x4e26 <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4e0c:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4e10:	84 e0       	ldi	r24, 0x04	; 4
    4e12:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4e14:	80 91 0c 22 	lds	r24, 0x220C
    4e18:	8e 7f       	andi	r24, 0xFE	; 254
    4e1a:	80 93 0c 22 	sts	0x220C, r24
		if (ax.active_axes == 0) {
    4e1e:	88 23       	and	r24, r24
    4e20:	11 f4       	brne	.+4      	; 0x4e26 <__vector_108+0x8c>
			st_execute_move();
    4e22:	0e 94 80 25 	call	0x4b00	; 0x4b00 <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    4e26:	80 91 45 22 	lds	r24, 0x2245
    4e2a:	90 91 46 22 	lds	r25, 0x2246
    4e2e:	80 93 47 22 	sts	0x2247, r24
    4e32:	90 93 48 22 	sts	0x2248, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4e36:	81 e0       	ldi	r24, 0x01	; 1
    4e38:	e0 e6       	ldi	r30, 0x60	; 96
    4e3a:	f6 e0       	ldi	r31, 0x06	; 6
    4e3c:	86 83       	std	Z+6, r24	; 0x06
}
    4e3e:	ff 91       	pop	r31
    4e40:	ef 91       	pop	r30
    4e42:	bf 91       	pop	r27
    4e44:	af 91       	pop	r26
    4e46:	9f 91       	pop	r25
    4e48:	8f 91       	pop	r24
    4e4a:	7f 91       	pop	r23
    4e4c:	6f 91       	pop	r22
    4e4e:	5f 91       	pop	r21
    4e50:	4f 91       	pop	r20
    4e52:	3f 91       	pop	r19
    4e54:	2f 91       	pop	r18
    4e56:	0f 90       	pop	r0
    4e58:	0b be       	out	0x3b, r0	; 59
    4e5a:	0f 90       	pop	r0
    4e5c:	0f be       	out	0x3f, r0	; 63
    4e5e:	0f 90       	pop	r0
    4e60:	1f 90       	pop	r1
    4e62:	18 95       	reti

00004e64 <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4e64:	1f 92       	push	r1
    4e66:	0f 92       	push	r0
    4e68:	0f b6       	in	r0, 0x3f	; 63
    4e6a:	0f 92       	push	r0
    4e6c:	0b b6       	in	r0, 0x3b	; 59
    4e6e:	0f 92       	push	r0
    4e70:	11 24       	eor	r1, r1
    4e72:	2f 93       	push	r18
    4e74:	3f 93       	push	r19
    4e76:	4f 93       	push	r20
    4e78:	5f 93       	push	r21
    4e7a:	6f 93       	push	r22
    4e7c:	7f 93       	push	r23
    4e7e:	8f 93       	push	r24
    4e80:	9f 93       	push	r25
    4e82:	af 93       	push	r26
    4e84:	bf 93       	push	r27
    4e86:	ef 93       	push	r30
    4e88:	ff 93       	push	r31
	if (--ax.a[Z].postscale_counter != 0) {
    4e8a:	80 91 37 22 	lds	r24, 0x2237
    4e8e:	90 91 38 22 	lds	r25, 0x2238
    4e92:	01 97       	sbiw	r24, 0x01	; 1
    4e94:	80 93 37 22 	sts	0x2237, r24
    4e98:	90 93 38 22 	sts	0x2238, r25
    4e9c:	89 2b       	or	r24, r25
    4e9e:	a1 f5       	brne	.+104    	; 0x4f08 <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4ea0:	e0 e8       	ldi	r30, 0x80	; 128
    4ea2:	f6 e0       	ldi	r31, 0x06	; 6
    4ea4:	81 e0       	ldi	r24, 0x01	; 1
    4ea6:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    4ea8:	80 91 2f 22 	lds	r24, 0x222F
    4eac:	90 91 30 22 	lds	r25, 0x2230
    4eb0:	a0 91 31 22 	lds	r26, 0x2231
    4eb4:	b0 91 32 22 	lds	r27, 0x2232
    4eb8:	01 97       	sbiw	r24, 0x01	; 1
    4eba:	a1 09       	sbc	r26, r1
    4ebc:	b1 09       	sbc	r27, r1
    4ebe:	80 93 2f 22 	sts	0x222F, r24
    4ec2:	90 93 30 22 	sts	0x2230, r25
    4ec6:	a0 93 31 22 	sts	0x2231, r26
    4eca:	b0 93 32 22 	sts	0x2232, r27
    4ece:	00 97       	sbiw	r24, 0x00	; 0
    4ed0:	a1 05       	cpc	r26, r1
    4ed2:	b1 05       	cpc	r27, r1
    4ed4:	69 f4       	brne	.+26     	; 0x4ef0 <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4ed6:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4eda:	84 e0       	ldi	r24, 0x04	; 4
    4edc:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4ede:	80 91 0c 22 	lds	r24, 0x220C
    4ee2:	8d 7f       	andi	r24, 0xFD	; 253
    4ee4:	80 93 0c 22 	sts	0x220C, r24
		if (ax.active_axes == 0) {
    4ee8:	88 23       	and	r24, r24
    4eea:	11 f4       	brne	.+4      	; 0x4ef0 <__vector_47+0x8c>
			st_execute_move();
    4eec:	0e 94 80 25 	call	0x4b00	; 0x4b00 <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    4ef0:	80 91 35 22 	lds	r24, 0x2235
    4ef4:	90 91 36 22 	lds	r25, 0x2236
    4ef8:	80 93 37 22 	sts	0x2237, r24
    4efc:	90 93 38 22 	sts	0x2238, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4f00:	81 e0       	ldi	r24, 0x01	; 1
    4f02:	e0 e8       	ldi	r30, 0x80	; 128
    4f04:	f6 e0       	ldi	r31, 0x06	; 6
    4f06:	86 83       	std	Z+6, r24	; 0x06
}
    4f08:	ff 91       	pop	r31
    4f0a:	ef 91       	pop	r30
    4f0c:	bf 91       	pop	r27
    4f0e:	af 91       	pop	r26
    4f10:	9f 91       	pop	r25
    4f12:	8f 91       	pop	r24
    4f14:	7f 91       	pop	r23
    4f16:	6f 91       	pop	r22
    4f18:	5f 91       	pop	r21
    4f1a:	4f 91       	pop	r20
    4f1c:	3f 91       	pop	r19
    4f1e:	2f 91       	pop	r18
    4f20:	0f 90       	pop	r0
    4f22:	0b be       	out	0x3b, r0	; 59
    4f24:	0f 90       	pop	r0
    4f26:	0f be       	out	0x3f, r0	; 63
    4f28:	0f 90       	pop	r0
    4f2a:	1f 90       	pop	r1
    4f2c:	18 95       	reti

00004f2e <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4f2e:	1f 92       	push	r1
    4f30:	0f 92       	push	r0
    4f32:	0f b6       	in	r0, 0x3f	; 63
    4f34:	0f 92       	push	r0
    4f36:	0b b6       	in	r0, 0x3b	; 59
    4f38:	0f 92       	push	r0
    4f3a:	11 24       	eor	r1, r1
    4f3c:	2f 93       	push	r18
    4f3e:	3f 93       	push	r19
    4f40:	4f 93       	push	r20
    4f42:	5f 93       	push	r21
    4f44:	6f 93       	push	r22
    4f46:	7f 93       	push	r23
    4f48:	8f 93       	push	r24
    4f4a:	9f 93       	push	r25
    4f4c:	af 93       	push	r26
    4f4e:	bf 93       	push	r27
    4f50:	ef 93       	push	r30
    4f52:	ff 93       	push	r31
	if (--ax.a[Y].postscale_counter != 0) {
    4f54:	80 91 27 22 	lds	r24, 0x2227
    4f58:	90 91 28 22 	lds	r25, 0x2228
    4f5c:	01 97       	sbiw	r24, 0x01	; 1
    4f5e:	80 93 27 22 	sts	0x2227, r24
    4f62:	90 93 28 22 	sts	0x2228, r25
    4f66:	89 2b       	or	r24, r25
    4f68:	a1 f5       	brne	.+104    	; 0x4fd2 <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4f6a:	e0 ea       	ldi	r30, 0xA0	; 160
    4f6c:	f6 e0       	ldi	r31, 0x06	; 6
    4f6e:	81 e0       	ldi	r24, 0x01	; 1
    4f70:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    4f72:	80 91 1f 22 	lds	r24, 0x221F
    4f76:	90 91 20 22 	lds	r25, 0x2220
    4f7a:	a0 91 21 22 	lds	r26, 0x2221
    4f7e:	b0 91 22 22 	lds	r27, 0x2222
    4f82:	01 97       	sbiw	r24, 0x01	; 1
    4f84:	a1 09       	sbc	r26, r1
    4f86:	b1 09       	sbc	r27, r1
    4f88:	80 93 1f 22 	sts	0x221F, r24
    4f8c:	90 93 20 22 	sts	0x2220, r25
    4f90:	a0 93 21 22 	sts	0x2221, r26
    4f94:	b0 93 22 22 	sts	0x2222, r27
    4f98:	00 97       	sbiw	r24, 0x00	; 0
    4f9a:	a1 05       	cpc	r26, r1
    4f9c:	b1 05       	cpc	r27, r1
    4f9e:	69 f4       	brne	.+26     	; 0x4fba <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4fa0:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4fa4:	84 e0       	ldi	r24, 0x04	; 4
    4fa6:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4fa8:	80 91 0c 22 	lds	r24, 0x220C
    4fac:	8b 7f       	andi	r24, 0xFB	; 251
    4fae:	80 93 0c 22 	sts	0x220C, r24
		if (ax.active_axes == 0) {
    4fb2:	88 23       	and	r24, r24
    4fb4:	11 f4       	brne	.+4      	; 0x4fba <__vector_77+0x8c>
			st_execute_move();
    4fb6:	0e 94 80 25 	call	0x4b00	; 0x4b00 <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    4fba:	80 91 25 22 	lds	r24, 0x2225
    4fbe:	90 91 26 22 	lds	r25, 0x2226
    4fc2:	80 93 27 22 	sts	0x2227, r24
    4fc6:	90 93 28 22 	sts	0x2228, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4fca:	81 e0       	ldi	r24, 0x01	; 1
    4fcc:	e0 ea       	ldi	r30, 0xA0	; 160
    4fce:	f6 e0       	ldi	r31, 0x06	; 6
    4fd0:	86 83       	std	Z+6, r24	; 0x06
}
    4fd2:	ff 91       	pop	r31
    4fd4:	ef 91       	pop	r30
    4fd6:	bf 91       	pop	r27
    4fd8:	af 91       	pop	r26
    4fda:	9f 91       	pop	r25
    4fdc:	8f 91       	pop	r24
    4fde:	7f 91       	pop	r23
    4fe0:	6f 91       	pop	r22
    4fe2:	5f 91       	pop	r21
    4fe4:	4f 91       	pop	r20
    4fe6:	3f 91       	pop	r19
    4fe8:	2f 91       	pop	r18
    4fea:	0f 90       	pop	r0
    4fec:	0b be       	out	0x3b, r0	; 59
    4fee:	0f 90       	pop	r0
    4ff0:	0f be       	out	0x3f, r0	; 63
    4ff2:	0f 90       	pop	r0
    4ff4:	1f 90       	pop	r1
    4ff6:	18 95       	reti

00004ff8 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4ff8:	1f 92       	push	r1
    4ffa:	0f 92       	push	r0
    4ffc:	0f b6       	in	r0, 0x3f	; 63
    4ffe:	0f 92       	push	r0
    5000:	0b b6       	in	r0, 0x3b	; 59
    5002:	0f 92       	push	r0
    5004:	11 24       	eor	r1, r1
    5006:	2f 93       	push	r18
    5008:	3f 93       	push	r19
    500a:	4f 93       	push	r20
    500c:	5f 93       	push	r21
    500e:	6f 93       	push	r22
    5010:	7f 93       	push	r23
    5012:	8f 93       	push	r24
    5014:	9f 93       	push	r25
    5016:	af 93       	push	r26
    5018:	bf 93       	push	r27
    501a:	ef 93       	push	r30
    501c:	ff 93       	push	r31
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    501e:	80 91 17 22 	lds	r24, 0x2217
    5022:	90 91 18 22 	lds	r25, 0x2218
    5026:	01 97       	sbiw	r24, 0x01	; 1
    5028:	80 93 17 22 	sts	0x2217, r24
    502c:	90 93 18 22 	sts	0x2218, r25
    5030:	89 2b       	or	r24, r25
    5032:	d1 f5       	brne	.+116    	; 0x50a8 <__vector_14+0xb0>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    5034:	80 91 1a 22 	lds	r24, 0x221A
    5038:	88 23       	and	r24, r24
    503a:	21 f4       	brne	.+8      	; 0x5044 <__vector_14+0x4c>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    503c:	81 e0       	ldi	r24, 0x01	; 1
    503e:	e0 e0       	ldi	r30, 0x00	; 0
    5040:	f6 e0       	ldi	r31, 0x06	; 6
    5042:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    5044:	80 91 0f 22 	lds	r24, 0x220F
    5048:	90 91 10 22 	lds	r25, 0x2210
    504c:	a0 91 11 22 	lds	r26, 0x2211
    5050:	b0 91 12 22 	lds	r27, 0x2212
    5054:	01 97       	sbiw	r24, 0x01	; 1
    5056:	a1 09       	sbc	r26, r1
    5058:	b1 09       	sbc	r27, r1
    505a:	80 93 0f 22 	sts	0x220F, r24
    505e:	90 93 10 22 	sts	0x2210, r25
    5062:	a0 93 11 22 	sts	0x2211, r26
    5066:	b0 93 12 22 	sts	0x2212, r27
    506a:	00 97       	sbiw	r24, 0x00	; 0
    506c:	a1 05       	cpc	r26, r1
    506e:	b1 05       	cpc	r27, r1
    5070:	79 f4       	brne	.+30     	; 0x5090 <__vector_14+0x98>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    5072:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    5076:	84 e0       	ldi	r24, 0x04	; 4
    5078:	e0 e0       	ldi	r30, 0x00	; 0
    507a:	f6 e0       	ldi	r31, 0x06	; 6
    507c:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    507e:	80 91 0c 22 	lds	r24, 0x220C
    5082:	87 7f       	andi	r24, 0xF7	; 247
    5084:	80 93 0c 22 	sts	0x220C, r24
		if (ax.active_axes == 0) {				// if all axes are done
    5088:	88 23       	and	r24, r24
    508a:	11 f4       	brne	.+4      	; 0x5090 <__vector_14+0x98>
			st_execute_move();					// ...run the next move
    508c:	0e 94 80 25 	call	0x4b00	; 0x4b00 <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    5090:	80 91 15 22 	lds	r24, 0x2215
    5094:	90 91 16 22 	lds	r25, 0x2216
    5098:	80 93 17 22 	sts	0x2217, r24
    509c:	90 93 18 22 	sts	0x2218, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    50a0:	81 e0       	ldi	r24, 0x01	; 1
    50a2:	e0 e0       	ldi	r30, 0x00	; 0
    50a4:	f6 e0       	ldi	r31, 0x06	; 6
    50a6:	86 83       	std	Z+6, r24	; 0x06
}
    50a8:	ff 91       	pop	r31
    50aa:	ef 91       	pop	r30
    50ac:	bf 91       	pop	r27
    50ae:	af 91       	pop	r26
    50b0:	9f 91       	pop	r25
    50b2:	8f 91       	pop	r24
    50b4:	7f 91       	pop	r23
    50b6:	6f 91       	pop	r22
    50b8:	5f 91       	pop	r21
    50ba:	4f 91       	pop	r20
    50bc:	3f 91       	pop	r19
    50be:	2f 91       	pop	r18
    50c0:	0f 90       	pop	r0
    50c2:	0b be       	out	0x3b, r0	; 59
    50c4:	0f 90       	pop	r0
    50c6:	0f be       	out	0x3f, r0	; 63
    50c8:	0f 90       	pop	r0
    50ca:	1f 90       	pop	r1
    50cc:	18 95       	reti

000050ce <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    50ce:	e0 ea       	ldi	r30, 0xA0	; 160
    50d0:	f0 e0       	ldi	r31, 0x00	; 0
    50d2:	82 81       	ldd	r24, Z+2	; 0x02
    50d4:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    50d6:	98 ed       	ldi	r25, 0xD8	; 216
    50d8:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    50da:	82 83       	std	Z+2, r24	; 0x02
}
    50dc:	08 95       	ret

000050de <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    50de:	e0 ea       	ldi	r30, 0xA0	; 160
    50e0:	f0 e0       	ldi	r31, 0x00	; 0
    50e2:	82 81       	ldd	r24, Z+2	; 0x02
    50e4:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    50e6:	98 ed       	ldi	r25, 0xD8	; 216
    50e8:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    50ea:	82 83       	std	Z+2, r24	; 0x02
}
    50ec:	08 95       	ret

000050ee <xio_setflags>:
 * xio_setflags()
 */

int xio_setflags(const uint8_t dev, const uint16_t control)
{
	struct xioDEVICE *d = &ds[dev];
    50ee:	97 e1       	ldi	r25, 0x17	; 23
    50f0:	89 9f       	mul	r24, r25
    50f2:	f0 01       	movw	r30, r0
    50f4:	11 24       	eor	r1, r1
    50f6:	e5 5d       	subi	r30, 0xD5	; 213
    50f8:	f6 4d       	sbci	r31, 0xD6	; 214

	if (control & XIO_RD) {
    50fa:	64 ff       	sbrs	r22, 4
    50fc:	05 c0       	rjmp	.+10     	; 0x5108 <xio_setflags+0x1a>
		d->flags |= XIO_FLAG_RD_bm;
    50fe:	80 81       	ld	r24, Z
    5100:	91 81       	ldd	r25, Z+1	; 0x01
    5102:	81 60       	ori	r24, 0x01	; 1
    5104:	80 83       	st	Z, r24
    5106:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_WR) {
    5108:	65 ff       	sbrs	r22, 5
    510a:	05 c0       	rjmp	.+10     	; 0x5116 <xio_setflags+0x28>
		d->flags |= XIO_FLAG_WR_bm;
    510c:	80 81       	ld	r24, Z
    510e:	91 81       	ldd	r25, Z+1	; 0x01
    5110:	82 60       	ori	r24, 0x02	; 2
    5112:	80 83       	st	Z, r24
    5114:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_BLOCK) {
    5116:	66 ff       	sbrs	r22, 6
    5118:	05 c0       	rjmp	.+10     	; 0x5124 <xio_setflags+0x36>
		d->flags |= XIO_FLAG_BLOCK_bm;
    511a:	80 81       	ld	r24, Z
    511c:	91 81       	ldd	r25, Z+1	; 0x01
    511e:	84 60       	ori	r24, 0x04	; 4
    5120:	80 83       	st	Z, r24
    5122:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOBLOCK) {
    5124:	67 ff       	sbrs	r22, 7
    5126:	05 c0       	rjmp	.+10     	; 0x5132 <xio_setflags+0x44>
		d->flags &= ~XIO_FLAG_BLOCK_bm;
    5128:	80 81       	ld	r24, Z
    512a:	91 81       	ldd	r25, Z+1	; 0x01
    512c:	8b 7f       	andi	r24, 0xFB	; 251
    512e:	80 83       	st	Z, r24
    5130:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_ECHO) {
    5132:	70 ff       	sbrs	r23, 0
    5134:	05 c0       	rjmp	.+10     	; 0x5140 <xio_setflags+0x52>
		d->flags |= XIO_FLAG_ECHO_bm;
    5136:	80 81       	ld	r24, Z
    5138:	91 81       	ldd	r25, Z+1	; 0x01
    513a:	80 61       	ori	r24, 0x10	; 16
    513c:	80 83       	st	Z, r24
    513e:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOECHO) {
    5140:	71 ff       	sbrs	r23, 1
    5142:	05 c0       	rjmp	.+10     	; 0x514e <xio_setflags+0x60>
		d->flags &= ~XIO_FLAG_ECHO_bm;
    5144:	80 81       	ld	r24, Z
    5146:	91 81       	ldd	r25, Z+1	; 0x01
    5148:	8f 7e       	andi	r24, 0xEF	; 239
    514a:	80 83       	st	Z, r24
    514c:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_CRLF) {
    514e:	72 ff       	sbrs	r23, 2
    5150:	05 c0       	rjmp	.+10     	; 0x515c <xio_setflags+0x6e>
		d->flags |= XIO_FLAG_CRLF_bm;
    5152:	80 81       	ld	r24, Z
    5154:	91 81       	ldd	r25, Z+1	; 0x01
    5156:	80 62       	ori	r24, 0x20	; 32
    5158:	80 83       	st	Z, r24
    515a:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOCRLF) {
    515c:	73 ff       	sbrs	r23, 3
    515e:	05 c0       	rjmp	.+10     	; 0x516a <xio_setflags+0x7c>
		d->flags &= ~XIO_FLAG_CRLF_bm;
    5160:	80 81       	ld	r24, Z
    5162:	91 81       	ldd	r25, Z+1	; 0x01
    5164:	8f 7d       	andi	r24, 0xDF	; 223
    5166:	80 83       	st	Z, r24
    5168:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_LINEMODE) {
    516a:	74 ff       	sbrs	r23, 4
    516c:	05 c0       	rjmp	.+10     	; 0x5178 <xio_setflags+0x8a>
		d->flags |= XIO_FLAG_LINEMODE_bm;
    516e:	80 81       	ld	r24, Z
    5170:	91 81       	ldd	r25, Z+1	; 0x01
    5172:	80 64       	ori	r24, 0x40	; 64
    5174:	80 83       	st	Z, r24
    5176:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOLINEMODE) {
    5178:	75 ff       	sbrs	r23, 5
    517a:	05 c0       	rjmp	.+10     	; 0x5186 <xio_setflags+0x98>
		d->flags &= ~XIO_FLAG_LINEMODE_bm;
    517c:	80 81       	ld	r24, Z
    517e:	91 81       	ldd	r25, Z+1	; 0x01
    5180:	8f 7b       	andi	r24, 0xBF	; 191
    5182:	80 83       	st	Z, r24
    5184:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_SEMICOLONS) {
    5186:	76 ff       	sbrs	r23, 6
    5188:	05 c0       	rjmp	.+10     	; 0x5194 <xio_setflags+0xa6>
		d->flags |= XIO_FLAG_SEMICOLONS_bm;
    518a:	80 81       	ld	r24, Z
    518c:	91 81       	ldd	r25, Z+1	; 0x01
    518e:	80 68       	ori	r24, 0x80	; 128
    5190:	80 83       	st	Z, r24
    5192:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOSEMICOLONS) {
    5194:	77 ff       	sbrs	r23, 7
    5196:	05 c0       	rjmp	.+10     	; 0x51a2 <xio_setflags+0xb4>
		d->flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5198:	80 81       	ld	r24, Z
    519a:	91 81       	ldd	r25, Z+1	; 0x01
    519c:	8f 77       	andi	r24, 0x7F	; 127
    519e:	80 83       	st	Z, r24
    51a0:	91 83       	std	Z+1, r25	; 0x01
	}
	return (XIO_OK);
}
    51a2:	80 e0       	ldi	r24, 0x00	; 0
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	08 95       	ret

000051a8 <xio_set_stdin>:
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    51a8:	90 e0       	ldi	r25, 0x00	; 0
    51aa:	27 e1       	ldi	r18, 0x17	; 23
    51ac:	30 e0       	ldi	r19, 0x00	; 0
    51ae:	82 9f       	mul	r24, r18
    51b0:	f0 01       	movw	r30, r0
    51b2:	83 9f       	mul	r24, r19
    51b4:	f0 0d       	add	r31, r0
    51b6:	92 9f       	mul	r25, r18
    51b8:	f0 0d       	add	r31, r0
    51ba:	11 24       	eor	r1, r1
    51bc:	e5 5d       	subi	r30, 0xD5	; 213
    51be:	f6 4d       	sbci	r31, 0xD6	; 214
    51c0:	83 89       	ldd	r24, Z+19	; 0x13
    51c2:	94 89       	ldd	r25, Z+20	; 0x14
    51c4:	80 93 c1 2a 	sts	0x2AC1, r24
    51c8:	90 93 c2 2a 	sts	0x2AC2, r25
}
    51cc:	08 95       	ret

000051ce <xio_set_stdout>:

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    51ce:	90 e0       	ldi	r25, 0x00	; 0
    51d0:	27 e1       	ldi	r18, 0x17	; 23
    51d2:	30 e0       	ldi	r19, 0x00	; 0
    51d4:	82 9f       	mul	r24, r18
    51d6:	f0 01       	movw	r30, r0
    51d8:	83 9f       	mul	r24, r19
    51da:	f0 0d       	add	r31, r0
    51dc:	92 9f       	mul	r25, r18
    51de:	f0 0d       	add	r31, r0
    51e0:	11 24       	eor	r1, r1
    51e2:	e5 5d       	subi	r30, 0xD5	; 213
    51e4:	f6 4d       	sbci	r31, 0xD6	; 214
    51e6:	83 89       	ldd	r24, Z+19	; 0x13
    51e8:	94 89       	ldd	r25, Z+20	; 0x14
    51ea:	80 93 c3 2a 	sts	0x2AC3, r24
    51ee:	90 93 c4 2a 	sts	0x2AC4, r25
}
    51f2:	08 95       	ret

000051f4 <xio_set_stderr>:

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    51f4:	90 e0       	ldi	r25, 0x00	; 0
    51f6:	27 e1       	ldi	r18, 0x17	; 23
    51f8:	30 e0       	ldi	r19, 0x00	; 0
    51fa:	82 9f       	mul	r24, r18
    51fc:	f0 01       	movw	r30, r0
    51fe:	83 9f       	mul	r24, r19
    5200:	f0 0d       	add	r31, r0
    5202:	92 9f       	mul	r25, r18
    5204:	f0 0d       	add	r31, r0
    5206:	11 24       	eor	r1, r1
    5208:	e5 5d       	subi	r30, 0xD5	; 213
    520a:	f6 4d       	sbci	r31, 0xD6	; 214
    520c:	83 89       	ldd	r24, Z+19	; 0x13
    520e:	94 89       	ldd	r25, Z+20	; 0x14
    5210:	80 93 c5 2a 	sts	0x2AC5, r24
    5214:	90 93 c6 2a 	sts	0x2AC6, r25
}
    5218:	08 95       	ret

0000521a <xio_putc>:
/*
 * xio_putc() - common entry point for putc
 */

int xio_putc(const uint8_t dev, const char c)
{
    521a:	46 2f       	mov	r20, r22
	if (dev < XIO_DEV_COUNT) {
    521c:	88 30       	cpi	r24, 0x08	; 8
    521e:	18 f0       	brcs	.+6      	; 0x5226 <xio_putc+0xc>
    5220:	27 e0       	ldi	r18, 0x07	; 7
    5222:	30 e0       	ldi	r19, 0x00	; 0
    5224:	15 c0       	rjmp	.+42     	; 0x5250 <xio_putc+0x36>
		return ds[dev].x_putc(c, ds[dev].fdev);
    5226:	28 2f       	mov	r18, r24
    5228:	30 e0       	ldi	r19, 0x00	; 0
    522a:	87 e1       	ldi	r24, 0x17	; 23
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	28 9f       	mul	r18, r24
    5230:	f0 01       	movw	r30, r0
    5232:	29 9f       	mul	r18, r25
    5234:	f0 0d       	add	r31, r0
    5236:	38 9f       	mul	r19, r24
    5238:	f0 0d       	add	r31, r0
    523a:	11 24       	eor	r1, r1
    523c:	e5 5d       	subi	r30, 0xD5	; 213
    523e:	f6 4d       	sbci	r31, 0xD6	; 214
    5240:	63 89       	ldd	r22, Z+19	; 0x13
    5242:	74 89       	ldd	r23, Z+20	; 0x14
    5244:	03 84       	ldd	r0, Z+11	; 0x0b
    5246:	f4 85       	ldd	r31, Z+12	; 0x0c
    5248:	e0 2d       	mov	r30, r0
    524a:	84 2f       	mov	r24, r20
    524c:	19 95       	eicall
    524e:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}
}
    5250:	c9 01       	movw	r24, r18
    5252:	08 95       	ret

00005254 <xio_getc>:
 * xio_getc() - common entry point for getc
 */

int xio_getc(const uint8_t dev)
{
	if (dev < XIO_DEV_COUNT) {
    5254:	88 30       	cpi	r24, 0x08	; 8
    5256:	18 f0       	brcs	.+6      	; 0x525e <xio_getc+0xa>
    5258:	27 e0       	ldi	r18, 0x07	; 7
    525a:	30 e0       	ldi	r19, 0x00	; 0
    525c:	14 c0       	rjmp	.+40     	; 0x5286 <xio_getc+0x32>
		return ds[dev].x_getc(ds[dev].fdev);
    525e:	28 2f       	mov	r18, r24
    5260:	30 e0       	ldi	r19, 0x00	; 0
    5262:	87 e1       	ldi	r24, 0x17	; 23
    5264:	90 e0       	ldi	r25, 0x00	; 0
    5266:	28 9f       	mul	r18, r24
    5268:	f0 01       	movw	r30, r0
    526a:	29 9f       	mul	r18, r25
    526c:	f0 0d       	add	r31, r0
    526e:	38 9f       	mul	r19, r24
    5270:	f0 0d       	add	r31, r0
    5272:	11 24       	eor	r1, r1
    5274:	e5 5d       	subi	r30, 0xD5	; 213
    5276:	f6 4d       	sbci	r31, 0xD6	; 214
    5278:	25 85       	ldd	r18, Z+13	; 0x0d
    527a:	36 85       	ldd	r19, Z+14	; 0x0e
    527c:	83 89       	ldd	r24, Z+19	; 0x13
    527e:	94 89       	ldd	r25, Z+20	; 0x14
    5280:	f9 01       	movw	r30, r18
    5282:	19 95       	eicall
    5284:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}		
}
    5286:	c9 01       	movw	r24, r18
    5288:	08 95       	ret

0000528a <xio_readln>:
 *	size	size of text buffer in 1 offset form: e.g. use 80 instead of 79
 */

int xio_readln(const uint8_t dev, char *buf, const uint8_t size)
{
	if (dev < XIO_DEV_COUNT) {
    528a:	88 30       	cpi	r24, 0x08	; 8
    528c:	18 f0       	brcs	.+6      	; 0x5294 <xio_readln+0xa>
    528e:	27 e0       	ldi	r18, 0x07	; 7
    5290:	30 e0       	ldi	r19, 0x00	; 0
    5292:	14 c0       	rjmp	.+40     	; 0x52bc <xio_readln+0x32>
		return ds[dev].x_readln(buf, size);
    5294:	28 2f       	mov	r18, r24
    5296:	30 e0       	ldi	r19, 0x00	; 0
    5298:	87 e1       	ldi	r24, 0x17	; 23
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	28 9f       	mul	r18, r24
    529e:	f0 01       	movw	r30, r0
    52a0:	29 9f       	mul	r18, r25
    52a2:	f0 0d       	add	r31, r0
    52a4:	38 9f       	mul	r19, r24
    52a6:	f0 0d       	add	r31, r0
    52a8:	11 24       	eor	r1, r1
    52aa:	e5 5d       	subi	r30, 0xD5	; 213
    52ac:	f6 4d       	sbci	r31, 0xD6	; 214
    52ae:	07 84       	ldd	r0, Z+15	; 0x0f
    52b0:	f0 89       	ldd	r31, Z+16	; 0x10
    52b2:	e0 2d       	mov	r30, r0
    52b4:	cb 01       	movw	r24, r22
    52b6:	64 2f       	mov	r22, r20
    52b8:	19 95       	eicall
    52ba:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}		
}
    52bc:	c9 01       	movw	r24, r18
    52be:	08 95       	ret

000052c0 <xio_init_dev>:
	int (*x_setflags)(const uint16_t control),// set device control flags
	int (*x_putc)(char, struct __file *),		// write char (stdio compatible)
	int (*x_getc)(struct __file *),			// read char (stdio compatible)
	int (*x_readln)(char *buf, uint8_t size)	// specialized line reader
	) 
{
    52c0:	df 92       	push	r13
    52c2:	ef 92       	push	r14
    52c4:	ff 92       	push	r15
    52c6:	0f 93       	push	r16
    52c8:	1f 93       	push	r17
    52ca:	cf 93       	push	r28
    52cc:	df 93       	push	r29
	// clear device struct
	memset (&ds[dev], 0, sizeof(struct xioDEVICE));	
    52ce:	90 e0       	ldi	r25, 0x00	; 0
    52d0:	e7 e1       	ldi	r30, 0x17	; 23
    52d2:	f0 e0       	ldi	r31, 0x00	; 0
    52d4:	8e 9f       	mul	r24, r30
    52d6:	d0 01       	movw	r26, r0
    52d8:	8f 9f       	mul	r24, r31
    52da:	b0 0d       	add	r27, r0
    52dc:	9e 9f       	mul	r25, r30
    52de:	b0 0d       	add	r27, r0
    52e0:	11 24       	eor	r1, r1
    52e2:	a5 5d       	subi	r26, 0xD5	; 213
    52e4:	b6 4d       	sbci	r27, 0xD6	; 214
    52e6:	0f 2e       	mov	r0, r31
    52e8:	f7 e1       	ldi	r31, 0x17	; 23
    52ea:	df 2e       	mov	r13, r31
    52ec:	f0 2d       	mov	r31, r0
    52ee:	ed 01       	movw	r28, r26
    52f0:	19 92       	st	Y+, r1
    52f2:	da 94       	dec	r13
    52f4:	e9 f7       	brne	.-6      	; 0x52f0 <xio_init_dev+0x30>

	// bind functions
	ds[dev].x_open = x_open;	
    52f6:	17 96       	adiw	r26, 0x07	; 7
    52f8:	6d 93       	st	X+, r22
    52fa:	7c 93       	st	X, r23
    52fc:	18 97       	sbiw	r26, 0x08	; 8
	ds[dev].x_setflags = x_setflags;
    52fe:	19 96       	adiw	r26, 0x09	; 9
    5300:	4d 93       	st	X+, r20
    5302:	5c 93       	st	X, r21
    5304:	1a 97       	sbiw	r26, 0x0a	; 10
	ds[dev].x_putc = x_putc;
    5306:	1b 96       	adiw	r26, 0x0b	; 11
    5308:	2d 93       	st	X+, r18
    530a:	3c 93       	st	X, r19
    530c:	1c 97       	sbiw	r26, 0x0c	; 12
	ds[dev].x_getc = x_getc;
    530e:	1d 96       	adiw	r26, 0x0d	; 13
    5310:	0d 93       	st	X+, r16
    5312:	1c 93       	st	X, r17
    5314:	1e 97       	sbiw	r26, 0x0e	; 14
	ds[dev].x_readln = x_readln;
    5316:	1f 96       	adiw	r26, 0x0f	; 15
    5318:	ed 92       	st	X+, r14
    531a:	fc 92       	st	X, r15
    531c:	50 97       	sbiw	r26, 0x10	; 16

	// bind and setup stdio struct
	ds[dev].fdev = &ss[dev];					
    531e:	88 0f       	add	r24, r24
    5320:	99 1f       	adc	r25, r25
    5322:	fc 01       	movw	r30, r24
    5324:	43 e0       	ldi	r20, 0x03	; 3
    5326:	ee 0f       	add	r30, r30
    5328:	ff 1f       	adc	r31, r31
    532a:	4a 95       	dec	r20
    532c:	e1 f7       	brne	.-8      	; 0x5326 <xio_init_dev+0x66>
    532e:	e8 1b       	sub	r30, r24
    5330:	f9 0b       	sbc	r31, r25
    5332:	ed 51       	subi	r30, 0x1D	; 29
    5334:	f6 4d       	sbci	r31, 0xD6	; 214
    5336:	53 96       	adiw	r26, 0x13	; 19
    5338:	ed 93       	st	X+, r30
    533a:	fc 93       	st	X, r31
    533c:	54 97       	sbiw	r26, 0x14	; 20
	fdev_setup_stream(ds[dev].fdev, x_putc, x_getc, _FDEV_SETUP_RW);
    533e:	20 87       	std	Z+8, r18	; 0x08
    5340:	31 87       	std	Z+9, r19	; 0x09
    5342:	02 87       	std	Z+10, r16	; 0x0a
    5344:	13 87       	std	Z+11, r17	; 0x0b
    5346:	83 e0       	ldi	r24, 0x03	; 3
    5348:	83 83       	std	Z+3, r24	; 0x03
    534a:	14 86       	std	Z+12, r1	; 0x0c
    534c:	15 86       	std	Z+13, r1	; 0x0d
}
    534e:	df 91       	pop	r29
    5350:	cf 91       	pop	r28
    5352:	1f 91       	pop	r17
    5354:	0f 91       	pop	r16
    5356:	ff 90       	pop	r15
    5358:	ef 90       	pop	r14
    535a:	df 90       	pop	r13
    535c:	08 95       	ret

0000535e <xio_init>:
 *	xio_init() - initialize all active XIO devices
 */

void xio_init(void)
{	
	xio_init_rs485();
    535e:	0e 94 80 35 	call	0x6b00	; 0x6b00 <xio_init_rs485>
	xio_init_usb();
    5362:	0e 94 6e 34 	call	0x68dc	; 0x68dc <xio_init_usb>
	xio_init_pgm();
    5366:	0e 94 80 36 	call	0x6d00	; 0x6d00 <xio_init_pgm>
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    536a:	80 91 58 2a 	lds	r24, 0x2A58
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	27 e1       	ldi	r18, 0x17	; 23
    5372:	30 e0       	ldi	r19, 0x00	; 0
    5374:	82 9f       	mul	r24, r18
    5376:	f0 01       	movw	r30, r0
    5378:	83 9f       	mul	r24, r19
    537a:	f0 0d       	add	r31, r0
    537c:	92 9f       	mul	r25, r18
    537e:	f0 0d       	add	r31, r0
    5380:	11 24       	eor	r1, r1
    5382:	e5 5d       	subi	r30, 0xD5	; 213
    5384:	f6 4d       	sbci	r31, 0xD6	; 214
    5386:	83 89       	ldd	r24, Z+19	; 0x13
    5388:	94 89       	ldd	r25, Z+20	; 0x14
    538a:	80 93 c1 2a 	sts	0x2AC1, r24
    538e:	90 93 c2 2a 	sts	0x2AC2, r25
}

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    5392:	80 93 c3 2a 	sts	0x2AC3, r24
    5396:	90 93 c4 2a 	sts	0x2AC4, r25
}

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    539a:	80 93 c5 2a 	sts	0x2AC5, r24
    539e:	90 93 c6 2a 	sts	0x2AC6, r25
	xio_set_stdin(tg.default_src);
	xio_set_stdout(tg.default_src);
	xio_set_stderr(tg.default_src);

	// tell the world we are ready!
	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    53a2:	0f 92       	push	r0
    53a4:	0f 92       	push	r0
    53a6:	8f e8       	ldi	r24, 0x8F	; 143
    53a8:	96 e0       	ldi	r25, 0x06	; 6
    53aa:	ed b7       	in	r30, 0x3d	; 61
    53ac:	fe b7       	in	r31, 0x3e	; 62
    53ae:	81 83       	std	Z+1, r24	; 0x01
    53b0:	92 83       	std	Z+2, r25	; 0x02
    53b2:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
    53b6:	0f 90       	pop	r0
    53b8:	0f 90       	pop	r0
}
    53ba:	08 95       	ret

000053bc <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    53bc:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    53be:	e0 ec       	ldi	r30, 0xC0	; 192
    53c0:	f1 e0       	ldi	r31, 0x01	; 1
    53c2:	80 91 cf 01 	lds	r24, 0x01CF
    53c6:	87 fd       	sbrc	r24, 7
    53c8:	fa cf       	rjmp	.-12     	; 0x53be <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    53ca:	26 2f       	mov	r18, r22
    53cc:	30 e0       	ldi	r19, 0x00	; 0
    53ce:	2f 71       	andi	r18, 0x1F	; 31
    53d0:	30 70       	andi	r19, 0x00	; 0
    53d2:	89 2f       	mov	r24, r25
    53d4:	90 e0       	ldi	r25, 0x00	; 0
    53d6:	45 e0       	ldi	r20, 0x05	; 5
    53d8:	88 0f       	add	r24, r24
    53da:	99 1f       	adc	r25, r25
    53dc:	4a 95       	dec	r20
    53de:	e1 f7       	brne	.-8      	; 0x53d8 <EEPROM_ReadByte+0x1c>
    53e0:	28 2b       	or	r18, r24
    53e2:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    53e4:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    53e8:	83 2f       	mov	r24, r19
    53ea:	8f 71       	andi	r24, 0x1F	; 31
    53ec:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    53ee:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    53f0:	86 e0       	ldi	r24, 0x06	; 6
    53f2:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    53f4:	ef 93       	push	r30
    53f6:	ff 93       	push	r31
    53f8:	0f 93       	push	r16
    53fa:	2f 93       	push	r18
    53fc:	eb ec       	ldi	r30, 0xCB	; 203
    53fe:	f1 e0       	ldi	r31, 0x01	; 1
    5400:	08 ed       	ldi	r16, 0xD8	; 216
    5402:	21 e0       	ldi	r18, 0x01	; 1
    5404:	04 bf       	out	0x34, r16	; 52
    5406:	20 83       	st	Z, r18
    5408:	2f 91       	pop	r18
    540a:	0f 91       	pop	r16
    540c:	ff 91       	pop	r31
    540e:	ef 91       	pop	r30

	return NVM.DATA0;
    5410:	80 91 c4 01 	lds	r24, 0x01C4
}
    5414:	08 95       	ret

00005416 <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    5416:	68 2f       	mov	r22, r24
    5418:	6f 71       	andi	r22, 0x1F	; 31
    541a:	55 e0       	ldi	r21, 0x05	; 5
    541c:	96 95       	lsr	r25
    541e:	87 95       	ror	r24
    5420:	5a 95       	dec	r21
    5422:	e1 f7       	brne	.-8      	; 0x541c <eeprom_get_char+0x6>
    5424:	0e 94 de 29 	call	0x53bc	; 0x53bc <EEPROM_ReadByte>
}
    5428:	08 95       	ret

0000542a <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    542a:	8f 92       	push	r8
    542c:	9f 92       	push	r9
    542e:	af 92       	push	r10
    5430:	bf 92       	push	r11
    5432:	cf 92       	push	r12
    5434:	df 92       	push	r13
    5436:	ff 92       	push	r15
    5438:	0f 93       	push	r16
    543a:	1f 93       	push	r17
    543c:	cf 93       	push	r28
    543e:	df 93       	push	r29
    5440:	4c 01       	movw	r8, r24
    5442:	5b 01       	movw	r10, r22
    5444:	6a 01       	movw	r12, r20
    5446:	8b 01       	movw	r16, r22
    5448:	ea 01       	movw	r28, r20
    544a:	ff 24       	eor	r15, r15
    544c:	18 c0       	rjmp	.+48     	; 0x547e <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    544e:	c8 01       	movw	r24, r16
    5450:	0e 94 0b 2a 	call	0x5416	; 0x5416 <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    5454:	ff 20       	and	r15, r15
    5456:	19 f0       	breq	.+6      	; 0x545e <memcpy_from_eeprom_with_checksum+0x34>
    5458:	21 e0       	ldi	r18, 0x01	; 1
    545a:	30 e0       	ldi	r19, 0x00	; 0
    545c:	08 c0       	rjmp	.+16     	; 0x546e <memcpy_from_eeprom_with_checksum+0x44>
    545e:	2f 2d       	mov	r18, r15
    5460:	33 27       	eor	r19, r19
    5462:	27 fd       	sbrc	r18, 7
    5464:	30 95       	com	r19
    5466:	22 27       	eor	r18, r18
    5468:	33 0f       	add	r19, r19
    546a:	22 1f       	adc	r18, r18
    546c:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    546e:	0f 5f       	subi	r16, 0xFF	; 255
    5470:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    5472:	f8 2e       	mov	r15, r24
    5474:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    5476:	f4 01       	movw	r30, r8
    5478:	81 93       	st	Z+, r24
    547a:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    547c:	21 97       	sbiw	r28, 0x01	; 1
    547e:	20 97       	sbiw	r28, 0x00	; 0
    5480:	31 f7       	brne	.-52     	; 0x544e <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    5482:	c6 01       	movw	r24, r12
    5484:	8a 0d       	add	r24, r10
    5486:	9b 1d       	adc	r25, r11
    5488:	0e 94 0b 2a 	call	0x5416	; 0x5416 <eeprom_get_char>
    548c:	20 e0       	ldi	r18, 0x00	; 0
    548e:	30 e0       	ldi	r19, 0x00	; 0
    5490:	f8 16       	cp	r15, r24
    5492:	11 f4       	brne	.+4      	; 0x5498 <memcpy_from_eeprom_with_checksum+0x6e>
    5494:	21 e0       	ldi	r18, 0x01	; 1
    5496:	30 e0       	ldi	r19, 0x00	; 0
}
    5498:	c9 01       	movw	r24, r18
    549a:	df 91       	pop	r29
    549c:	cf 91       	pop	r28
    549e:	1f 91       	pop	r17
    54a0:	0f 91       	pop	r16
    54a2:	ff 90       	pop	r15
    54a4:	df 90       	pop	r13
    54a6:	cf 90       	pop	r12
    54a8:	bf 90       	pop	r11
    54aa:	af 90       	pop	r10
    54ac:	9f 90       	pop	r9
    54ae:	8f 90       	pop	r8
    54b0:	08 95       	ret

000054b2 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    54b2:	80 91 cf 01 	lds	r24, 0x01CF
    54b6:	87 fd       	sbrc	r24, 7
    54b8:	fc cf       	rjmp	.-8      	; 0x54b2 <EEPROM_WaitForNVM>
}
    54ba:	08 95       	ret

000054bc <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    54bc:	80 91 cf 01 	lds	r24, 0x01CF
    54c0:	87 fd       	sbrc	r24, 7
    54c2:	fc cf       	rjmp	.-8      	; 0x54bc <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    54c4:	80 91 cf 01 	lds	r24, 0x01CF
    54c8:	81 ff       	sbrs	r24, 1
    54ca:	12 c0       	rjmp	.+36     	; 0x54f0 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    54cc:	86 e3       	ldi	r24, 0x36	; 54
    54ce:	e0 ec       	ldi	r30, 0xC0	; 192
    54d0:	f1 e0       	ldi	r31, 0x01	; 1
    54d2:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    54d4:	ef 93       	push	r30
    54d6:	ff 93       	push	r31
    54d8:	0f 93       	push	r16
    54da:	2f 93       	push	r18
    54dc:	eb ec       	ldi	r30, 0xCB	; 203
    54de:	f1 e0       	ldi	r31, 0x01	; 1
    54e0:	08 ed       	ldi	r16, 0xD8	; 216
    54e2:	21 e0       	ldi	r18, 0x01	; 1
    54e4:	04 bf       	out	0x34, r16	; 52
    54e6:	20 83       	st	Z, r18
    54e8:	2f 91       	pop	r18
    54ea:	0f 91       	pop	r16
    54ec:	ff 91       	pop	r31
    54ee:	ef 91       	pop	r30
    54f0:	08 95       	ret

000054f2 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    54f2:	df 92       	push	r13
    54f4:	ef 92       	push	r14
    54f6:	ff 92       	push	r15
    54f8:	0f 93       	push	r16
    54fa:	1f 93       	push	r17
    54fc:	e8 2e       	mov	r14, r24
    54fe:	06 2f       	mov	r16, r22
    5500:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    5502:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5506:	e0 ec       	ldi	r30, 0xC0	; 192
    5508:	f1 e0       	ldi	r31, 0x01	; 1
    550a:	83 e3       	ldi	r24, 0x33	; 51
    550c:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    550e:	10 e0       	ldi	r17, 0x00	; 0
    5510:	0f 71       	andi	r16, 0x1F	; 31
    5512:	10 70       	andi	r17, 0x00	; 0
    5514:	ff 24       	eor	r15, r15
    5516:	75 e0       	ldi	r23, 0x05	; 5
    5518:	ee 0c       	add	r14, r14
    551a:	ff 1c       	adc	r15, r15
    551c:	7a 95       	dec	r23
    551e:	e1 f7       	brne	.-8      	; 0x5518 <EEPROM_WriteByte+0x26>
    5520:	0e 29       	or	r16, r14
    5522:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    5524:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5526:	81 2f       	mov	r24, r17
    5528:	8f 71       	andi	r24, 0x1F	; 31
    552a:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    552c:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    552e:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5530:	85 e3       	ldi	r24, 0x35	; 53
    5532:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5534:	ef 93       	push	r30
    5536:	ff 93       	push	r31
    5538:	0f 93       	push	r16
    553a:	2f 93       	push	r18
    553c:	eb ec       	ldi	r30, 0xCB	; 203
    553e:	f1 e0       	ldi	r31, 0x01	; 1
    5540:	08 ed       	ldi	r16, 0xD8	; 216
    5542:	21 e0       	ldi	r18, 0x01	; 1
    5544:	04 bf       	out	0x34, r16	; 52
    5546:	20 83       	st	Z, r18
    5548:	2f 91       	pop	r18
    554a:	0f 91       	pop	r16
    554c:	ff 91       	pop	r31
    554e:	ef 91       	pop	r30
}
    5550:	1f 91       	pop	r17
    5552:	0f 91       	pop	r16
    5554:	ff 90       	pop	r15
    5556:	ef 90       	pop	r14
    5558:	df 90       	pop	r13
    555a:	08 95       	ret

0000555c <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    555c:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    555e:	68 2f       	mov	r22, r24
    5560:	6f 71       	andi	r22, 0x1F	; 31
    5562:	e5 e0       	ldi	r30, 0x05	; 5
    5564:	96 95       	lsr	r25
    5566:	87 95       	ror	r24
    5568:	ea 95       	dec	r30
    556a:	e1 f7       	brne	.-8      	; 0x5564 <eeprom_put_char+0x8>
    556c:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <EEPROM_WriteByte>
}
    5570:	08 95       	ret

00005572 <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    5572:	8f 92       	push	r8
    5574:	9f 92       	push	r9
    5576:	af 92       	push	r10
    5578:	bf 92       	push	r11
    557a:	cf 92       	push	r12
    557c:	df 92       	push	r13
    557e:	ef 92       	push	r14
    5580:	ff 92       	push	r15
    5582:	0f 93       	push	r16
    5584:	df 93       	push	r29
    5586:	cf 93       	push	r28
    5588:	0f 92       	push	r0
    558a:	0f 92       	push	r0
    558c:	cd b7       	in	r28, 0x3d	; 61
    558e:	de b7       	in	r29, 0x3e	; 62
    5590:	5c 01       	movw	r10, r24
    5592:	6b 01       	movw	r12, r22
    5594:	7a 01       	movw	r14, r20
    5596:	4a 01       	movw	r8, r20
    5598:	00 e0       	ldi	r16, 0x00	; 0
    559a:	1e c0       	rjmp	.+60     	; 0x55d8 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    559c:	00 23       	and	r16, r16
    559e:	19 f0       	breq	.+6      	; 0x55a6 <memcpy_to_eeprom_with_checksum+0x34>
    55a0:	21 e0       	ldi	r18, 0x01	; 1
    55a2:	30 e0       	ldi	r19, 0x00	; 0
    55a4:	08 c0       	rjmp	.+16     	; 0x55b6 <memcpy_to_eeprom_with_checksum+0x44>
    55a6:	20 2f       	mov	r18, r16
    55a8:	33 27       	eor	r19, r19
    55aa:	27 fd       	sbrc	r18, 7
    55ac:	30 95       	com	r19
    55ae:	22 27       	eor	r18, r18
    55b0:	33 0f       	add	r19, r19
    55b2:	22 1f       	adc	r18, r18
    55b4:	33 27       	eor	r19, r19
    checksum += *source;
    55b6:	f6 01       	movw	r30, r12
    55b8:	61 91       	ld	r22, Z+
    55ba:	6f 01       	movw	r12, r30
    55bc:	06 2f       	mov	r16, r22
    55be:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    55c0:	9c 01       	movw	r18, r24
    55c2:	2f 5f       	subi	r18, 0xFF	; 255
    55c4:	3f 4f       	sbci	r19, 0xFF	; 255
    55c6:	29 83       	std	Y+1, r18	; 0x01
    55c8:	3a 83       	std	Y+2, r19	; 0x02
    55ca:	0e 94 ae 2a 	call	0x555c	; 0x555c <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    55ce:	08 94       	sec
    55d0:	81 08       	sbc	r8, r1
    55d2:	91 08       	sbc	r9, r1
    55d4:	89 81       	ldd	r24, Y+1	; 0x01
    55d6:	9a 81       	ldd	r25, Y+2	; 0x02
    55d8:	81 14       	cp	r8, r1
    55da:	91 04       	cpc	r9, r1
    55dc:	f9 f6       	brne	.-66     	; 0x559c <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    55de:	c7 01       	movw	r24, r14
    55e0:	8a 0d       	add	r24, r10
    55e2:	9b 1d       	adc	r25, r11
    55e4:	60 2f       	mov	r22, r16
    55e6:	0e 94 ae 2a 	call	0x555c	; 0x555c <eeprom_put_char>
}
    55ea:	0f 90       	pop	r0
    55ec:	0f 90       	pop	r0
    55ee:	cf 91       	pop	r28
    55f0:	df 91       	pop	r29
    55f2:	0f 91       	pop	r16
    55f4:	ff 90       	pop	r15
    55f6:	ef 90       	pop	r14
    55f8:	df 90       	pop	r13
    55fa:	cf 90       	pop	r12
    55fc:	bf 90       	pop	r11
    55fe:	af 90       	pop	r10
    5600:	9f 90       	pop	r9
    5602:	8f 90       	pop	r8
    5604:	08 95       	ret

00005606 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    5606:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5608:	e0 ec       	ldi	r30, 0xC0	; 192
    560a:	f1 e0       	ldi	r31, 0x01	; 1
    560c:	80 91 cf 01 	lds	r24, 0x01CF
    5610:	87 fd       	sbrc	r24, 7
    5612:	fa cf       	rjmp	.-12     	; 0x5608 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5614:	83 e3       	ldi	r24, 0x33	; 51
    5616:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    5618:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    561c:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    561e:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5620:	64 83       	std	Z+4, r22	; 0x04
}
    5622:	08 95       	ret

00005624 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    5624:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5626:	e0 ec       	ldi	r30, 0xC0	; 192
    5628:	f1 e0       	ldi	r31, 0x01	; 1
    562a:	80 91 cf 01 	lds	r24, 0x01CF
    562e:	87 fd       	sbrc	r24, 7
    5630:	fa cf       	rjmp	.-12     	; 0x5626 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5632:	83 e3       	ldi	r24, 0x33	; 51
    5634:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    5636:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5638:	12 82       	std	Z+2, r1	; 0x02
    563a:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    563c:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    5640:	8d 91       	ld	r24, X+
    5642:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    5644:	9f 5f       	subi	r25, 0xFF	; 255
    5646:	90 32       	cpi	r25, 0x20	; 32
    5648:	c9 f7       	brne	.-14     	; 0x563c <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    564a:	08 95       	ret

0000564c <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    564c:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    564e:	e0 ec       	ldi	r30, 0xC0	; 192
    5650:	f1 e0       	ldi	r31, 0x01	; 1
    5652:	80 91 cf 01 	lds	r24, 0x01CF
    5656:	87 fd       	sbrc	r24, 7
    5658:	fa cf       	rjmp	.-12     	; 0x564e <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    565a:	89 2f       	mov	r24, r25
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	a5 e0       	ldi	r26, 0x05	; 5
    5660:	88 0f       	add	r24, r24
    5662:	99 1f       	adc	r25, r25
    5664:	aa 95       	dec	r26
    5666:	e1 f7       	brne	.-8      	; 0x5660 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5668:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    566c:	89 2f       	mov	r24, r25
    566e:	8f 71       	andi	r24, 0x1F	; 31
    5670:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5672:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5674:	85 e3       	ldi	r24, 0x35	; 53
    5676:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5678:	ef 93       	push	r30
    567a:	ff 93       	push	r31
    567c:	0f 93       	push	r16
    567e:	2f 93       	push	r18
    5680:	eb ec       	ldi	r30, 0xCB	; 203
    5682:	f1 e0       	ldi	r31, 0x01	; 1
    5684:	08 ed       	ldi	r16, 0xD8	; 216
    5686:	21 e0       	ldi	r18, 0x01	; 1
    5688:	04 bf       	out	0x34, r16	; 52
    568a:	20 83       	st	Z, r18
    568c:	2f 91       	pop	r18
    568e:	0f 91       	pop	r16
    5690:	ff 91       	pop	r31
    5692:	ef 91       	pop	r30
}
    5694:	08 95       	ret

00005696 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    5696:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5698:	e0 ec       	ldi	r30, 0xC0	; 192
    569a:	f1 e0       	ldi	r31, 0x01	; 1
    569c:	80 91 cf 01 	lds	r24, 0x01CF
    56a0:	87 fd       	sbrc	r24, 7
    56a2:	fa cf       	rjmp	.-12     	; 0x5698 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    56a4:	89 2f       	mov	r24, r25
    56a6:	90 e0       	ldi	r25, 0x00	; 0
    56a8:	b5 e0       	ldi	r27, 0x05	; 5
    56aa:	88 0f       	add	r24, r24
    56ac:	99 1f       	adc	r25, r25
    56ae:	ba 95       	dec	r27
    56b0:	e1 f7       	brne	.-8      	; 0x56aa <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    56b2:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    56b6:	89 2f       	mov	r24, r25
    56b8:	8f 71       	andi	r24, 0x1F	; 31
    56ba:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    56bc:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    56be:	82 e3       	ldi	r24, 0x32	; 50
    56c0:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    56c2:	ef 93       	push	r30
    56c4:	ff 93       	push	r31
    56c6:	0f 93       	push	r16
    56c8:	2f 93       	push	r18
    56ca:	eb ec       	ldi	r30, 0xCB	; 203
    56cc:	f1 e0       	ldi	r31, 0x01	; 1
    56ce:	08 ed       	ldi	r16, 0xD8	; 216
    56d0:	21 e0       	ldi	r18, 0x01	; 1
    56d2:	04 bf       	out	0x34, r16	; 52
    56d4:	20 83       	st	Z, r18
    56d6:	2f 91       	pop	r18
    56d8:	0f 91       	pop	r16
    56da:	ff 91       	pop	r31
    56dc:	ef 91       	pop	r30
}
    56de:	08 95       	ret

000056e0 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    56e0:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    56e2:	e0 ec       	ldi	r30, 0xC0	; 192
    56e4:	f1 e0       	ldi	r31, 0x01	; 1
    56e6:	80 91 cf 01 	lds	r24, 0x01CF
    56ea:	87 fd       	sbrc	r24, 7
    56ec:	fa cf       	rjmp	.-12     	; 0x56e2 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    56ee:	89 2f       	mov	r24, r25
    56f0:	90 e0       	ldi	r25, 0x00	; 0
    56f2:	25 e0       	ldi	r18, 0x05	; 5
    56f4:	88 0f       	add	r24, r24
    56f6:	99 1f       	adc	r25, r25
    56f8:	2a 95       	dec	r18
    56fa:	e1 f7       	brne	.-8      	; 0x56f4 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    56fc:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5700:	89 2f       	mov	r24, r25
    5702:	8f 71       	andi	r24, 0x1F	; 31
    5704:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5706:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    5708:	84 e3       	ldi	r24, 0x34	; 52
    570a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    570c:	ef 93       	push	r30
    570e:	ff 93       	push	r31
    5710:	0f 93       	push	r16
    5712:	2f 93       	push	r18
    5714:	eb ec       	ldi	r30, 0xCB	; 203
    5716:	f1 e0       	ldi	r31, 0x01	; 1
    5718:	08 ed       	ldi	r16, 0xD8	; 216
    571a:	21 e0       	ldi	r18, 0x01	; 1
    571c:	04 bf       	out	0x34, r16	; 52
    571e:	20 83       	st	Z, r18
    5720:	2f 91       	pop	r18
    5722:	0f 91       	pop	r16
    5724:	ff 91       	pop	r31
    5726:	ef 91       	pop	r30
}
    5728:	08 95       	ret

0000572a <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    572a:	80 91 cf 01 	lds	r24, 0x01CF
    572e:	87 fd       	sbrc	r24, 7
    5730:	fc cf       	rjmp	.-8      	; 0x572a <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    5732:	80 e3       	ldi	r24, 0x30	; 48
    5734:	e0 ec       	ldi	r30, 0xC0	; 192
    5736:	f1 e0       	ldi	r31, 0x01	; 1
    5738:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    573a:	ef 93       	push	r30
    573c:	ff 93       	push	r31
    573e:	0f 93       	push	r16
    5740:	2f 93       	push	r18
    5742:	eb ec       	ldi	r30, 0xCB	; 203
    5744:	f1 e0       	ldi	r31, 0x01	; 1
    5746:	08 ed       	ldi	r16, 0xD8	; 216
    5748:	21 e0       	ldi	r18, 0x01	; 1
    574a:	04 bf       	out	0x34, r16	; 52
    574c:	20 83       	st	Z, r18
    574e:	2f 91       	pop	r18
    5750:	0f 91       	pop	r16
    5752:	ff 91       	pop	r31
    5754:	ef 91       	pop	r30
}
    5756:	08 95       	ret

00005758 <tg_reset_source>:
 * tg_reset_source()  Reset source to default input device
 */

void tg_reset_source()
{
	_tg_set_source(tg.default_src);
    5758:	80 91 58 2a 	lds	r24, 0x2A58
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    575c:	80 93 57 2a 	sts	0x2A57, r24
	if (tg.src == XIO_DEV_PGM) {
    5760:	83 30       	cpi	r24, 0x03	; 3
    5762:	21 f4       	brne	.+8      	; 0x576c <tg_reset_source+0x14>
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    5764:	80 91 54 2a 	lds	r24, 0x2A54
    5768:	8e 7f       	andi	r24, 0xFE	; 254
    576a:	03 c0       	rjmp	.+6      	; 0x5772 <tg_reset_source+0x1a>
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    576c:	80 91 54 2a 	lds	r24, 0x2A54
    5770:	81 60       	ori	r24, 0x01	; 1
    5772:	80 93 54 2a 	sts	0x2A54, r24
    5776:	08 95       	ret

00005778 <tg_print_status>:
	tgStatusMsg20
};

void tg_print_status(const uint8_t status_code, const char *textbuf)
{
	switch (status_code) {		// don't send messages for these status codes
    5778:	84 30       	cpi	r24, 0x04	; 4
    577a:	28 f4       	brcc	.+10     	; 0x5786 <tg_print_status+0xe>
    577c:	82 30       	cpi	r24, 0x02	; 2
    577e:	28 f5       	brcc	.+74     	; 0x57ca <tg_print_status+0x52>
    5780:	88 23       	and	r24, r24
    5782:	19 f1       	breq	.+70     	; 0x57ca <tg_print_status+0x52>
    5784:	02 c0       	rjmp	.+4      	; 0x578a <tg_print_status+0x12>
    5786:	8b 30       	cpi	r24, 0x0B	; 11
    5788:	01 f1       	breq	.+64     	; 0x57ca <tg_print_status+0x52>
		case TG_OK: return;
		case TG_EAGAIN: return;
		case TG_NOOP: return;
		case TG_QUIT: return;
	}
	printf_P(PSTR("%S: %s\n"),(PGM_P)pgm_read_word(&tgStatusStrings[status_code]), textbuf);
    578a:	e8 2f       	mov	r30, r24
    578c:	f0 e0       	ldi	r31, 0x00	; 0
    578e:	ee 0f       	add	r30, r30
    5790:	ff 1f       	adc	r31, r31
    5792:	ee 5a       	subi	r30, 0xAE	; 174
    5794:	f5 4e       	sbci	r31, 0xE5	; 229
    5796:	25 91       	lpm	r18, Z+
    5798:	34 91       	lpm	r19, Z+
    579a:	00 d0       	rcall	.+0      	; 0x579c <tg_print_status+0x24>
    579c:	00 d0       	rcall	.+0      	; 0x579e <tg_print_status+0x26>
    579e:	ed b7       	in	r30, 0x3d	; 61
    57a0:	fe b7       	in	r31, 0x3e	; 62
    57a2:	31 96       	adiw	r30, 0x01	; 1
    57a4:	8c e7       	ldi	r24, 0x7C	; 124
    57a6:	9a e1       	ldi	r25, 0x1A	; 26
    57a8:	ad b7       	in	r26, 0x3d	; 61
    57aa:	be b7       	in	r27, 0x3e	; 62
    57ac:	11 96       	adiw	r26, 0x01	; 1
    57ae:	8d 93       	st	X+, r24
    57b0:	9c 93       	st	X, r25
    57b2:	12 97       	sbiw	r26, 0x02	; 2
    57b4:	22 83       	std	Z+2, r18	; 0x02
    57b6:	33 83       	std	Z+3, r19	; 0x03
    57b8:	64 83       	std	Z+4, r22	; 0x04
    57ba:	75 83       	std	Z+5, r23	; 0x05
    57bc:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
    57c0:	8d b7       	in	r24, 0x3d	; 61
    57c2:	9e b7       	in	r25, 0x3e	; 62
    57c4:	06 96       	adiw	r24, 0x06	; 6
    57c6:	8d bf       	out	0x3d, r24	; 61
    57c8:	9e bf       	out	0x3e, r25	; 62
    57ca:	08 95       	ret

000057cc <_tg_prompt>:
	tgModeStringDirect
};

void _tg_prompt()
{
	if (tg.state == TG_READY_UNPROMPTED) {
    57cc:	80 91 53 2a 	lds	r24, 0x2A53
    57d0:	88 23       	and	r24, r24
    57d2:	09 f5       	brne	.+66     	; 0x5816 <_tg_prompt+0x4a>
		if (tg.flags && TG_FLAG_PROMPTS_bm) {
    57d4:	80 91 54 2a 	lds	r24, 0x2A54
    57d8:	88 23       	and	r24, r24
    57da:	d1 f0       	breq	.+52     	; 0x5810 <_tg_prompt+0x44>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    57dc:	80 91 56 2a 	lds	r24, 0x2A56
    57e0:	e8 2f       	mov	r30, r24
    57e2:	f0 e0       	ldi	r31, 0x00	; 0
    57e4:	ee 0f       	add	r30, r30
    57e6:	ff 1f       	adc	r31, r31
    57e8:	eb 5f       	subi	r30, 0xFB	; 251
    57ea:	f6 4e       	sbci	r31, 0xE6	; 230
    57ec:	25 91       	lpm	r18, Z+
    57ee:	34 91       	lpm	r19, Z+
    57f0:	00 d0       	rcall	.+0      	; 0x57f2 <_tg_prompt+0x26>
    57f2:	0f 92       	push	r0
    57f4:	89 e9       	ldi	r24, 0x99	; 153
    57f6:	9a e1       	ldi	r25, 0x1A	; 26
    57f8:	ed b7       	in	r30, 0x3d	; 61
    57fa:	fe b7       	in	r31, 0x3e	; 62
    57fc:	81 83       	std	Z+1, r24	; 0x01
    57fe:	92 83       	std	Z+2, r25	; 0x02
    5800:	23 83       	std	Z+3, r18	; 0x03
    5802:	34 83       	std	Z+4, r19	; 0x04
    5804:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
    5808:	0f 90       	pop	r0
    580a:	0f 90       	pop	r0
    580c:	0f 90       	pop	r0
    580e:	0f 90       	pop	r0
		}
		tg.state = TG_READY_PROMPTED;
    5810:	81 e0       	ldi	r24, 0x01	; 1
    5812:	80 93 53 2a 	sts	0x2A53, r24
    5816:	08 95       	ret

00005818 <tg_init>:
 */

void tg_init() 
{
	// set input source
	tg.default_src = DEFAULT_SOURCE; 		// set in tinyg.h
    5818:	81 e0       	ldi	r24, 0x01	; 1
    581a:	80 93 58 2a 	sts	0x2A58, r24
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    581e:	e8 e5       	ldi	r30, 0x58	; 88
    5820:	fa e2       	ldi	r31, 0x2A	; 42
    5822:	80 93 57 2a 	sts	0x2A57, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    5826:	34 97       	sbiw	r30, 0x04	; 4
    5828:	80 81       	ld	r24, Z
    582a:	81 60       	ori	r24, 0x01	; 1
    582c:	80 83       	st	Z, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    582e:	10 92 56 2a 	sts	0x2A56, r1
{
	// set input source
	tg.default_src = DEFAULT_SOURCE; 		// set in tinyg.h
	_tg_set_source(tg.default_src);			// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
	tg.state = TG_READY_UNPROMPTED;
    5832:	10 92 53 2a 	sts	0x2A53, r1

	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    5836:	00 d0       	rcall	.+0      	; 0x5838 <tg_init+0x20>
    5838:	0f 92       	push	r0
    583a:	81 eb       	ldi	r24, 0xB1	; 177
    583c:	9a e1       	ldi	r25, 0x1A	; 26
    583e:	ed b7       	in	r30, 0x3d	; 61
    5840:	fe b7       	in	r31, 0x3e	; 62
    5842:	81 83       	std	Z+1, r24	; 0x01
    5844:	92 83       	std	Z+2, r25	; 0x02
    5846:	87 ea       	ldi	r24, 0xA7	; 167
    5848:	9a e1       	ldi	r25, 0x1A	; 26
    584a:	83 83       	std	Z+3, r24	; 0x03
    584c:	94 83       	std	Z+4, r25	; 0x04
    584e:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
    5852:	0f 90       	pop	r0
    5854:	0f 90       	pop	r0
    5856:	0f 90       	pop	r0
    5858:	0f 90       	pop	r0
}
    585a:	08 95       	ret

0000585c <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    585c:	cf 93       	push	r28
    585e:	df 93       	push	r29
    5860:	ec 01       	movw	r28, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    5862:	80 91 56 2a 	lds	r24, 0x2A56
    5866:	88 23       	and	r24, r24
    5868:	09 f0       	breq	.+2      	; 0x586c <tg_parser+0x10>
    586a:	43 c0       	rjmp	.+134    	; 0x58f2 <tg_parser+0x96>
		switch (toupper(buf[0])) {
    586c:	88 81       	ld	r24, Y
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	0e 94 dd 48 	call	0x91ba	; 0x91ba <toupper>
    5874:	86 34       	cpi	r24, 0x46	; 70
    5876:	91 05       	cpc	r25, r1
    5878:	41 f1       	breq	.+80     	; 0x58ca <tg_parser+0x6e>
    587a:	87 34       	cpi	r24, 0x47	; 71
    587c:	91 05       	cpc	r25, r1
    587e:	84 f4       	brge	.+32     	; 0x58a0 <tg_parser+0x44>
    5880:	83 34       	cpi	r24, 0x43	; 67
    5882:	91 05       	cpc	r25, r1
    5884:	e1 f0       	breq	.+56     	; 0x58be <tg_parser+0x62>
    5886:	84 34       	cpi	r24, 0x44	; 68
    5888:	91 05       	cpc	r25, r1
    588a:	34 f4       	brge	.+12     	; 0x5898 <tg_parser+0x3c>
    588c:	88 32       	cpi	r24, 0x28	; 40
    588e:	91 05       	cpc	r25, r1
    5890:	a1 f0       	breq	.+40     	; 0x58ba <tg_parser+0x5e>
    5892:	cf 97       	sbiw	r24, 0x3f	; 63
    5894:	61 f5       	brne	.+88     	; 0x58ee <tg_parser+0x92>
    5896:	13 c0       	rjmp	.+38     	; 0x58be <tg_parser+0x62>
    5898:	84 34       	cpi	r24, 0x44	; 68
    589a:	91 05       	cpc	r25, r1
    589c:	41 f5       	brne	.+80     	; 0x58ee <tg_parser+0x92>
    589e:	13 c0       	rjmp	.+38     	; 0x58c6 <tg_parser+0x6a>
    58a0:	8f 34       	cpi	r24, 0x4F	; 79
    58a2:	91 05       	cpc	r25, r1
    58a4:	3c f4       	brge	.+14     	; 0x58b4 <tg_parser+0x58>
    58a6:	8d 34       	cpi	r24, 0x4D	; 77
    58a8:	91 05       	cpc	r25, r1
    58aa:	3c f4       	brge	.+14     	; 0x58ba <tg_parser+0x5e>
    58ac:	87 34       	cpi	r24, 0x47	; 71
    58ae:	91 05       	cpc	r25, r1
    58b0:	f1 f4       	brne	.+60     	; 0x58ee <tg_parser+0x92>
    58b2:	03 c0       	rjmp	.+6      	; 0x58ba <tg_parser+0x5e>
    58b4:	8c 35       	cpi	r24, 0x5C	; 92
    58b6:	91 05       	cpc	r25, r1
    58b8:	d1 f4       	brne	.+52     	; 0x58ee <tg_parser+0x92>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    58ba:	82 e0       	ldi	r24, 0x02	; 2
    58bc:	01 c0       	rjmp	.+2      	; 0x58c0 <tg_parser+0x64>
int tg_parser(char * buf)
{
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
		switch (toupper(buf[0])) {
			case 'G': case 'M': case 'N': case '(': case '\\': _tg_set_mode(TG_GCODE_MODE); break;
    58be:	81 e0       	ldi	r24, 0x01	; 1
    58c0:	80 93 56 2a 	sts	0x2A56, r24
    58c4:	16 c0       	rjmp	.+44     	; 0x58f2 <tg_parser+0x96>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    58c6:	83 e0       	ldi	r24, 0x03	; 3
    58c8:	fb cf       	rjmp	.-10     	; 0x58c0 <tg_parser+0x64>
//	xio_open_pgm(PGMFILE(&spiral_test50a));
//	xio_open_pgm(PGMFILE(&spiral_test5));
//	xio_open_pgm(PGMFILE(&dwell_test2));

//	xio_open_pgm(PGMFILE(&contraptor_circle)); 	// contraptor circle test
	xio_open_pgm(PGMFILE(&zoetrope));			// crazy noisy zoetrope file
    58ca:	88 e3       	ldi	r24, 0x38	; 56
    58cc:	9b e0       	ldi	r25, 0x0B	; 11
    58ce:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <xio_open_pgm>
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    58d2:	83 e0       	ldi	r24, 0x03	; 3
    58d4:	80 93 57 2a 	sts	0x2A57, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    58d8:	80 91 54 2a 	lds	r24, 0x2A54
    58dc:	8e 7f       	andi	r24, 0xFE	; 254
    58de:	80 93 54 2a 	sts	0x2A54, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    58e2:	82 e0       	ldi	r24, 0x02	; 2
    58e4:	80 93 56 2a 	sts	0x2A56, r24
    58e8:	20 e0       	ldi	r18, 0x00	; 0
    58ea:	30 e0       	ldi	r19, 0x00	; 0
    58ec:	1d c0       	rjmp	.+58     	; 0x5928 <tg_parser+0xcc>
	if (tg.mode == TG_CONTROL_MODE) {
		switch (toupper(buf[0])) {
			case 'G': case 'M': case 'N': case '(': case '\\': _tg_set_mode(TG_GCODE_MODE); break;
			case 'C': case '?': _tg_set_mode(TG_CONFIG_MODE); break;
			case 'D': _tg_set_mode(TG_DIRECT_DRIVE_MODE); break;
			case 'F': return (_tg_test_file());
    58ee:	10 92 56 2a 	sts	0x2A56, r1
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    58f2:	10 92 55 2a 	sts	0x2A55, r1
	switch (tg.mode) {
    58f6:	80 91 56 2a 	lds	r24, 0x2A56
    58fa:	82 30       	cpi	r24, 0x02	; 2
    58fc:	41 f0       	breq	.+16     	; 0x590e <tg_parser+0xb2>
    58fe:	83 30       	cpi	r24, 0x03	; 3
    5900:	51 f0       	breq	.+20     	; 0x5916 <tg_parser+0xba>
    5902:	81 30       	cpi	r24, 0x01	; 1
    5904:	69 f4       	brne	.+26     	; 0x5920 <tg_parser+0xc4>
		case TG_CONFIG_MODE: tg.status = cfg_parse(buf); break;
    5906:	ce 01       	movw	r24, r28
    5908:	0e 94 32 19 	call	0x3264	; 0x3264 <cfg_parse>
    590c:	07 c0       	rjmp	.+14     	; 0x591c <tg_parser+0xc0>
		case TG_GCODE_MODE: tg.status = gc_gcode_parser(buf); break;
    590e:	ce 01       	movw	r24, r28
    5910:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <gc_gcode_parser>
    5914:	03 c0       	rjmp	.+6      	; 0x591c <tg_parser+0xc0>
		case TG_DIRECT_DRIVE_MODE: tg.status = dd_parser(buf); break;
    5916:	ce 01       	movw	r24, r28
    5918:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <dd_parser>
    591c:	80 93 55 2a 	sts	0x2A55, r24
	}
	return (tg.status);
    5920:	80 91 55 2a 	lds	r24, 0x2A55
    5924:	28 2f       	mov	r18, r24
    5926:	30 e0       	ldi	r19, 0x00	; 0
}
    5928:	c9 01       	movw	r24, r18
    592a:	df 91       	pop	r29
    592c:	cf 91       	pop	r28
    592e:	08 95       	ret

00005930 <tg_controller>:
#define	DISPATCH(func) switch (func) { case (TG_EAGAIN): return; \
	case (TG_OK): { tg.state = TG_READY_UNPROMPTED; _tg_prompt(); return;}}

void tg_controller()
{
	st_execute_move();
    5930:	0e 94 80 25 	call	0x4b00	; 0x4b00 <st_execute_move>
	DISPATCH(mc_line_continue());
    5934:	0e 94 af 1b 	call	0x375e	; 0x375e <mc_line_continue>
    5938:	00 97       	sbiw	r24, 0x00	; 0
    593a:	09 f4       	brne	.+2      	; 0x593e <tg_controller+0xe>
    593c:	40 c0       	rjmp	.+128    	; 0x59be <tg_controller+0x8e>
    593e:	02 97       	sbiw	r24, 0x02	; 2
    5940:	09 f4       	brne	.+2      	; 0x5944 <tg_controller+0x14>
    5942:	08 95       	ret
	DISPATCH(mc_arc_continue());
    5944:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <mc_arc_continue>
    5948:	00 97       	sbiw	r24, 0x00	; 0
    594a:	c9 f1       	breq	.+114    	; 0x59be <tg_controller+0x8e>
    594c:	02 97       	sbiw	r24, 0x02	; 2
    594e:	09 f4       	brne	.+2      	; 0x5952 <tg_controller+0x22>
    5950:	08 95       	ret
 */

static int _tg_read_next_line()
{
	// read input line or return if not a completed line
	if ((tg.status = xio_readln(tg.src, tg.buf, sizeof(tg.buf))) == TG_OK) {
    5952:	80 91 57 2a 	lds	r24, 0x2A57
    5956:	6a e5       	ldi	r22, 0x5A	; 90
    5958:	7a e2       	ldi	r23, 0x2A	; 42
    595a:	40 e5       	ldi	r20, 0x50	; 80
    595c:	0e 94 45 29 	call	0x528a	; 0x528a <xio_readln>
    5960:	80 93 55 2a 	sts	0x2A55, r24
    5964:	88 23       	and	r24, r24
    5966:	31 f4       	brne	.+12     	; 0x5974 <tg_controller+0x44>
		tg.status = tg_parser(tg.buf);				// dispatch to parser
    5968:	8a e5       	ldi	r24, 0x5A	; 90
    596a:	9a e2       	ldi	r25, 0x2A	; 42
    596c:	0e 94 2e 2c 	call	0x585c	; 0x585c <tg_parser>
    5970:	80 93 55 2a 	sts	0x2A55, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    5974:	80 91 55 2a 	lds	r24, 0x2A55
    5978:	84 30       	cpi	r24, 0x04	; 4
    597a:	18 f4       	brcc	.+6      	; 0x5982 <tg_controller+0x52>
    597c:	82 30       	cpi	r24, 0x02	; 2
    597e:	c0 f4       	brcc	.+48     	; 0x59b0 <tg_controller+0x80>
    5980:	15 c0       	rjmp	.+42     	; 0x59ac <tg_controller+0x7c>
    5982:	85 30       	cpi	r24, 0x05	; 5
    5984:	29 f0       	breq	.+10     	; 0x5990 <tg_controller+0x60>
    5986:	8b 30       	cpi	r24, 0x0B	; 11
    5988:	89 f4       	brne	.+34     	; 0x59ac <tg_controller+0x7c>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    598a:	10 92 56 2a 	sts	0x2A56, r1
    598e:	0e c0       	rjmp	.+28     	; 0x59ac <tg_controller+0x7c>
			_tg_set_mode(TG_CONTROL_MODE);
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
    5990:	0f 92       	push	r0
    5992:	0f 92       	push	r0
    5994:	84 e8       	ldi	r24, 0x84	; 132
    5996:	9a e1       	ldi	r25, 0x1A	; 26
    5998:	ed b7       	in	r30, 0x3d	; 61
    599a:	fe b7       	in	r31, 0x3e	; 62
    599c:	81 83       	std	Z+1, r24	; 0x01
    599e:	92 83       	std	Z+2, r25	; 0x02
    59a0:	0e 94 8a 49 	call	0x9314	; 0x9314 <printf_P>
			tg_reset_source();						// reset to default src
    59a4:	0f 90       	pop	r0
    59a6:	0f 90       	pop	r0
    59a8:	0e 94 ac 2b 	call	0x5758	; 0x5758 <tg_reset_source>
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_READY_UNPROMPTED;			// traps various error returns
    59ac:	10 92 53 2a 	sts	0x2A53, r1
void tg_controller()
{
	st_execute_move();
	DISPATCH(mc_line_continue());
	DISPATCH(mc_arc_continue());
	DISPATCH(_tg_read_next_line());
    59b0:	80 91 55 2a 	lds	r24, 0x2A55
    59b4:	88 23       	and	r24, r24
    59b6:	19 f0       	breq	.+6      	; 0x59be <tg_controller+0x8e>
    59b8:	82 30       	cpi	r24, 0x02	; 2
    59ba:	19 f4       	brne	.+6      	; 0x59c2 <tg_controller+0x92>
    59bc:	08 95       	ret
    59be:	10 92 53 2a 	sts	0x2A53, r1
	_tg_prompt();
    59c2:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_tg_prompt>
    59c6:	08 95       	ret

000059c8 <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    59c8:	08 95       	ret

000059ca <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    59ca:	80 e0       	ldi	r24, 0x00	; 0
    59cc:	90 e0       	ldi	r25, 0x00	; 0
    59ce:	08 95       	ret

000059d0 <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    59d0:	10 92 ac 21 	sts	0x21AC, r1
	mv.move_buffer_tail = 0;
    59d4:	10 92 ad 21 	sts	0x21AD, r1
}
    59d8:	08 95       	ret

000059da <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    59da:	90 91 ac 21 	lds	r25, 0x21AC
    59de:	80 91 ad 21 	lds	r24, 0x21AD
    59e2:	98 17       	cp	r25, r24
    59e4:	19 f4       	brne	.+6      	; 0x59ec <mv_dequeue_move_buffer+0x12>
    59e6:	20 e0       	ldi	r18, 0x00	; 0
    59e8:	30 e0       	ldi	r19, 0x00	; 0
    59ea:	17 c0       	rjmp	.+46     	; 0x5a1a <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    59ec:	90 91 ad 21 	lds	r25, 0x21AD
    59f0:	8e e1       	ldi	r24, 0x1E	; 30
    59f2:	98 9f       	mul	r25, r24
    59f4:	90 01       	movw	r18, r0
    59f6:	11 24       	eor	r1, r1
    59f8:	20 55       	subi	r18, 0x50	; 80
    59fa:	3e 4d       	sbci	r19, 0xDE	; 222
    59fc:	20 93 ae 21 	sts	0x21AE, r18
    5a00:	30 93 af 21 	sts	0x21AF, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    5a04:	80 91 ad 21 	lds	r24, 0x21AD
    5a08:	8f 5f       	subi	r24, 0xFF	; 255
    5a0a:	80 93 ad 21 	sts	0x21AD, r24
    5a0e:	80 91 ad 21 	lds	r24, 0x21AD
    5a12:	83 30       	cpi	r24, 0x03	; 3
    5a14:	10 f0       	brcs	.+4      	; 0x5a1a <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    5a16:	10 92 ad 21 	sts	0x21AD, r1
	}
	return (mv.p); 
}
    5a1a:	c9 01       	movw	r24, r18
    5a1c:	08 95       	ret

00005a1e <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    5a1e:	90 91 ac 21 	lds	r25, 0x21AC
    5a22:	9f 5f       	subi	r25, 0xFF	; 255
    5a24:	93 30       	cpi	r25, 0x03	; 3
    5a26:	08 f0       	brcs	.+2      	; 0x5a2a <mv_test_move_buffer_full+0xc>
    5a28:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    5a2a:	80 91 ad 21 	lds	r24, 0x21AD
    5a2e:	20 e0       	ldi	r18, 0x00	; 0
    5a30:	89 17       	cp	r24, r25
    5a32:	09 f4       	brne	.+2      	; 0x5a36 <mv_test_move_buffer_full+0x18>
    5a34:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    5a36:	82 2f       	mov	r24, r18
    5a38:	08 95       	ret

00005a3a <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    5a3a:	0b c0       	rjmp	.+22     	; 0x5a52 <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    5a3c:	80 91 48 00 	lds	r24, 0x0048
    5a40:	81 60       	ori	r24, 0x01	; 1
    5a42:	80 93 48 00 	sts	0x0048, r24
    5a46:	88 95       	sleep
    5a48:	80 91 48 00 	lds	r24, 0x0048
    5a4c:	8e 7f       	andi	r24, 0xFE	; 254
    5a4e:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    5a52:	90 91 ad 21 	lds	r25, 0x21AD
    5a56:	80 91 ac 21 	lds	r24, 0x21AC
    5a5a:	98 17       	cp	r25, r24
    5a5c:	79 f7       	brne	.-34     	; 0x5a3c <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    5a5e:	08 95       	ret

00005a60 <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    5a60:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    5a62:	80 91 ac 21 	lds	r24, 0x21AC
    5a66:	80 93 ad 21 	sts	0x21AD, r24
	mv.p = NULL;
    5a6a:	10 92 ae 21 	sts	0x21AE, r1
    5a6e:	10 92 af 21 	sts	0x21AF, r1
	sei();
    5a72:	78 94       	sei
}
    5a74:	08 95       	ret

00005a76 <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    5a76:	2f 92       	push	r2
    5a78:	3f 92       	push	r3
    5a7a:	4f 92       	push	r4
    5a7c:	5f 92       	push	r5
    5a7e:	6f 92       	push	r6
    5a80:	7f 92       	push	r7
    5a82:	8f 92       	push	r8
    5a84:	9f 92       	push	r9
    5a86:	af 92       	push	r10
    5a88:	bf 92       	push	r11
    5a8a:	cf 92       	push	r12
    5a8c:	df 92       	push	r13
    5a8e:	ef 92       	push	r14
    5a90:	ff 92       	push	r15
    5a92:	0f 93       	push	r16
    5a94:	1f 93       	push	r17
    5a96:	df 93       	push	r29
    5a98:	cf 93       	push	r28
    5a9a:	cd b7       	in	r28, 0x3d	; 61
    5a9c:	de b7       	in	r29, 0x3e	; 62
    5a9e:	2b 97       	sbiw	r28, 0x0b	; 11
    5aa0:	cd bf       	out	0x3d, r28	; 61
    5aa2:	de bf       	out	0x3e, r29	; 62
    5aa4:	1b 01       	movw	r2, r22
    5aa6:	2c 01       	movw	r4, r24
    5aa8:	2a 83       	std	Y+2, r18	; 0x02
    5aaa:	3b 83       	std	Y+3, r19	; 0x03
    5aac:	4c 83       	std	Y+4, r20	; 0x04
    5aae:	5d 83       	std	Y+5, r21	; 0x05
    5ab0:	ee 82       	std	Y+6, r14	; 0x06
    5ab2:	ff 82       	std	Y+7, r15	; 0x07
    5ab4:	08 87       	std	Y+8, r16	; 0x08
    5ab6:	19 87       	std	Y+9, r17	; 0x09
	uint8_t next_buffer_head;
	uint8_t i;

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    5ab8:	80 91 ac 21 	lds	r24, 0x21AC
    5abc:	8f 5f       	subi	r24, 0xFF	; 255
    5abe:	89 83       	std	Y+1, r24	; 0x01
    5ac0:	83 30       	cpi	r24, 0x03	; 3
    5ac2:	08 f0       	brcs	.+2      	; 0x5ac6 <mv_queue_move_buffer+0x50>
    5ac4:	19 82       	std	Y+1, r1	; 0x01
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    5ac6:	80 91 ad 21 	lds	r24, 0x21AD
    5aca:	99 81       	ldd	r25, Y+1	; 0x01
    5acc:	89 17       	cp	r24, r25
    5ace:	11 f4       	brne	.+4      	; 0x5ad4 <mv_queue_move_buffer+0x5e>
    5ad0:	8a e0       	ldi	r24, 0x0A	; 10
    5ad2:	20 c2       	rjmp	.+1088   	; 0x5f14 <mv_queue_move_buffer+0x49e>
		return (TG_BUFFER_FULL_NON_FATAL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    5ad4:	e0 91 ac 21 	lds	r30, 0x21AC
    5ad8:	8e e1       	ldi	r24, 0x1E	; 30
    5ada:	e8 9f       	mul	r30, r24
    5adc:	f0 01       	movw	r30, r0
    5ade:	11 24       	eor	r1, r1
    5ae0:	e0 55       	subi	r30, 0x50	; 80
    5ae2:	fe 4d       	sbci	r31, 0xDE	; 222
    5ae4:	e0 93 ae 21 	sts	0x21AE, r30
    5ae8:	f0 93 af 21 	sts	0x21AF, r31
	memset(mv.p, 0, sizeof(struct mvMove));
    5aec:	df 01       	movw	r26, r30
    5aee:	1d 92       	st	X+, r1
    5af0:	8a 95       	dec	r24
    5af2:	e9 f7       	brne	.-6      	; 0x5aee <mv_queue_move_buffer+0x78>
	mv.p->a[X].steps = steps_x;
    5af4:	80 90 ae 21 	lds	r8, 0x21AE
    5af8:	90 90 af 21 	lds	r9, 0x21AF
    5afc:	f4 01       	movw	r30, r8
    5afe:	20 82       	st	Z, r2
    5b00:	31 82       	std	Z+1, r3	; 0x01
    5b02:	42 82       	std	Z+2, r4	; 0x02
    5b04:	53 82       	std	Z+3, r5	; 0x03
	mv.p->a[Y].steps = steps_y;
    5b06:	8a 81       	ldd	r24, Y+2	; 0x02
    5b08:	9b 81       	ldd	r25, Y+3	; 0x03
    5b0a:	ac 81       	ldd	r26, Y+4	; 0x04
    5b0c:	bd 81       	ldd	r27, Y+5	; 0x05
    5b0e:	82 87       	std	Z+10, r24	; 0x0a
    5b10:	93 87       	std	Z+11, r25	; 0x0b
    5b12:	a4 87       	std	Z+12, r26	; 0x0c
    5b14:	b5 87       	std	Z+13, r27	; 0x0d
	mv.p->a[Z].steps = steps_z;
    5b16:	8e 81       	ldd	r24, Y+6	; 0x06
    5b18:	9f 81       	ldd	r25, Y+7	; 0x07
    5b1a:	a8 85       	ldd	r26, Y+8	; 0x08
    5b1c:	b9 85       	ldd	r27, Y+9	; 0x09
    5b1e:	84 8b       	std	Z+20, r24	; 0x14
    5b20:	95 8b       	std	Z+21, r25	; 0x15
    5b22:	a6 8b       	std	Z+22, r26	; 0x16
    5b24:	b7 8b       	std	Z+23, r27	; 0x17
	mv.microseconds = (uint64_t)microseconds;			// cast to larger base
    5b26:	a0 92 a4 21 	sts	0x21A4, r10
    5b2a:	b0 92 a5 21 	sts	0x21A5, r11
    5b2e:	c0 92 a6 21 	sts	0x21A6, r12
    5b32:	d0 92 a7 21 	sts	0x21A7, r13
    5b36:	10 92 a8 21 	sts	0x21A8, r1
    5b3a:	10 92 a9 21 	sts	0x21A9, r1
    5b3e:	10 92 aa 21 	sts	0x21AA, r1
    5b42:	10 92 ab 21 	sts	0x21AB, r1
	mv.ticks = mv.microseconds * TICKS_PER_MICROSECOND;
    5b46:	95 01       	movw	r18, r10
    5b48:	a6 01       	movw	r20, r12
    5b4a:	60 e0       	ldi	r22, 0x00	; 0
    5b4c:	70 e0       	ldi	r23, 0x00	; 0
    5b4e:	80 e0       	ldi	r24, 0x00	; 0
    5b50:	90 e0       	ldi	r25, 0x00	; 0
    5b52:	05 e0       	ldi	r16, 0x05	; 5
    5b54:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <__ashldi3>
    5b58:	fc 01       	movw	r30, r24
    5b5a:	94 e9       	ldi	r25, 0x94	; 148
    5b5c:	69 2e       	mov	r6, r25
    5b5e:	91 e2       	ldi	r25, 0x21	; 33
    5b60:	79 2e       	mov	r7, r25
    5b62:	20 93 94 21 	sts	0x2194, r18
    5b66:	d3 01       	movw	r26, r6
    5b68:	11 96       	adiw	r26, 0x01	; 1
    5b6a:	3c 93       	st	X, r19
    5b6c:	11 97       	sbiw	r26, 0x01	; 1
    5b6e:	12 96       	adiw	r26, 0x02	; 2
    5b70:	4c 93       	st	X, r20
    5b72:	12 97       	sbiw	r26, 0x02	; 2
    5b74:	13 96       	adiw	r26, 0x03	; 3
    5b76:	5c 93       	st	X, r21
    5b78:	13 97       	sbiw	r26, 0x03	; 3
    5b7a:	14 96       	adiw	r26, 0x04	; 4
    5b7c:	6c 93       	st	X, r22
    5b7e:	14 97       	sbiw	r26, 0x04	; 4
    5b80:	15 96       	adiw	r26, 0x05	; 5
    5b82:	7c 93       	st	X, r23
    5b84:	15 97       	sbiw	r26, 0x05	; 5
    5b86:	16 96       	adiw	r26, 0x06	; 6
    5b88:	ec 93       	st	X, r30
    5b8a:	16 97       	sbiw	r26, 0x06	; 6
    5b8c:	17 96       	adiw	r26, 0x07	; 7
    5b8e:	fc 93       	st	X, r31

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    5b90:	21 14       	cp	r2, r1
    5b92:	31 04       	cpc	r3, r1
    5b94:	41 04       	cpc	r4, r1
    5b96:	51 04       	cpc	r5, r1
    5b98:	09 f0       	breq	.+2      	; 0x5b9c <mv_queue_move_buffer+0x126>
    5b9a:	73 c0       	rjmp	.+230    	; 0x5c82 <mv_queue_move_buffer+0x20c>
    5b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    5b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    5ba0:	ac 81       	ldd	r26, Y+4	; 0x04
    5ba2:	bd 81       	ldd	r27, Y+5	; 0x05
    5ba4:	00 97       	sbiw	r24, 0x00	; 0
    5ba6:	a1 05       	cpc	r26, r1
    5ba8:	b1 05       	cpc	r27, r1
    5baa:	09 f0       	breq	.+2      	; 0x5bae <mv_queue_move_buffer+0x138>
    5bac:	6a c0       	rjmp	.+212    	; 0x5c82 <mv_queue_move_buffer+0x20c>
    5bae:	8e 81       	ldd	r24, Y+6	; 0x06
    5bb0:	9f 81       	ldd	r25, Y+7	; 0x07
    5bb2:	a8 85       	ldd	r26, Y+8	; 0x08
    5bb4:	b9 85       	ldd	r27, Y+9	; 0x09
    5bb6:	00 97       	sbiw	r24, 0x00	; 0
    5bb8:	a1 05       	cpc	r26, r1
    5bba:	b1 05       	cpc	r27, r1
    5bbc:	09 f0       	breq	.+2      	; 0x5bc0 <mv_queue_move_buffer+0x14a>
    5bbe:	61 c0       	rjmp	.+194    	; 0x5c82 <mv_queue_move_buffer+0x20c>
		mv.p->a[X].steps = (((mv.ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    5bc0:	81 e0       	ldi	r24, 0x01	; 1
    5bc2:	e8 2e       	mov	r14, r24
    5bc4:	f1 2c       	mov	r15, r1
    5bc6:	01 2d       	mov	r16, r1
    5bc8:	11 2d       	mov	r17, r1
    5bca:	d4 01       	movw	r26, r8
    5bcc:	ed 92       	st	X+, r14
    5bce:	fd 92       	st	X+, r15
    5bd0:	0d 93       	st	X+, r16
    5bd2:	1c 93       	st	X, r17
    5bd4:	13 97       	sbiw	r26, 0x03	; 3
		mv.p->a[X].postscale = 1;
    5bd6:	81 e0       	ldi	r24, 0x01	; 1
    5bd8:	90 e0       	ldi	r25, 0x00	; 0
    5bda:	16 96       	adiw	r26, 0x06	; 6
    5bdc:	8d 93       	st	X+, r24
    5bde:	9c 93       	st	X, r25
    5be0:	17 97       	sbiw	r26, 0x07	; 7
		mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[X].steps); // expensive!
    5be2:	cf 01       	movw	r24, r30
    5be4:	aa 24       	eor	r10, r10
    5be6:	a3 94       	inc	r10
    5be8:	bb 24       	eor	r11, r11
    5bea:	cc 24       	eor	r12, r12
    5bec:	dd 24       	eor	r13, r13
    5bee:	ee 24       	eor	r14, r14
    5bf0:	ff 24       	eor	r15, r15
    5bf2:	00 e0       	ldi	r16, 0x00	; 0
    5bf4:	10 e0       	ldi	r17, 0x00	; 0
    5bf6:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <__udivdi3>
    5bfa:	f3 01       	movw	r30, r6
    5bfc:	38 96       	adiw	r30, 0x08	; 8
    5bfe:	20 93 9c 21 	sts	0x219C, r18
    5c02:	31 83       	std	Z+1, r19	; 0x01
    5c04:	42 83       	std	Z+2, r20	; 0x02
    5c06:	53 83       	std	Z+3, r21	; 0x03
    5c08:	64 83       	std	Z+4, r22	; 0x04
    5c0a:	75 83       	std	Z+5, r23	; 0x05
    5c0c:	86 83       	std	Z+6, r24	; 0x06
    5c0e:	97 83       	std	Z+7, r25	; 0x07
		while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5c10:	7f 01       	movw	r14, r30
    5c12:	19 c0       	rjmp	.+50     	; 0x5c46 <mv_queue_move_buffer+0x1d0>
			mv.ticks_per_step >>= 1;
    5c14:	8e 2f       	mov	r24, r30
    5c16:	01 e0       	ldi	r16, 0x01	; 1
    5c18:	0e 94 ac 36 	call	0x6d58	; 0x6d58 <__lshrdi3>
    5c1c:	20 93 9c 21 	sts	0x219C, r18
    5c20:	f7 01       	movw	r30, r14
    5c22:	31 83       	std	Z+1, r19	; 0x01
    5c24:	42 83       	std	Z+2, r20	; 0x02
    5c26:	53 83       	std	Z+3, r21	; 0x03
    5c28:	64 83       	std	Z+4, r22	; 0x04
    5c2a:	75 83       	std	Z+5, r23	; 0x05
    5c2c:	86 83       	std	Z+6, r24	; 0x06
    5c2e:	97 83       	std	Z+7, r25	; 0x07
			mv.p->a[X].postscale <<= 1;
    5c30:	d4 01       	movw	r26, r8
    5c32:	16 96       	adiw	r26, 0x06	; 6
    5c34:	8d 91       	ld	r24, X+
    5c36:	9c 91       	ld	r25, X
    5c38:	17 97       	sbiw	r26, 0x07	; 7
    5c3a:	88 0f       	add	r24, r24
    5c3c:	99 1f       	adc	r25, r25
    5c3e:	16 96       	adiw	r26, 0x06	; 6
    5c40:	8d 93       	st	X+, r24
    5c42:	9c 93       	st	X, r25
    5c44:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((mv.ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[X].steps); // expensive!
		while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5c46:	20 91 9c 21 	lds	r18, 0x219C
    5c4a:	30 91 9d 21 	lds	r19, 0x219D
    5c4e:	40 91 9e 21 	lds	r20, 0x219E
    5c52:	50 91 9f 21 	lds	r21, 0x219F
    5c56:	60 91 a0 21 	lds	r22, 0x21A0
    5c5a:	70 91 a1 21 	lds	r23, 0x21A1
    5c5e:	e0 91 a2 21 	lds	r30, 0x21A2
    5c62:	90 91 a3 21 	lds	r25, 0x21A3
    5c66:	84 2f       	mov	r24, r20
    5c68:	85 2b       	or	r24, r21
    5c6a:	86 2b       	or	r24, r22
    5c6c:	87 2b       	or	r24, r23
    5c6e:	8e 2b       	or	r24, r30
    5c70:	89 2b       	or	r24, r25
    5c72:	81 f6       	brne	.-96     	; 0x5c14 <mv_queue_move_buffer+0x19e>
			mv.ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
    5c74:	c9 01       	movw	r24, r18
    5c76:	f4 01       	movw	r30, r8
    5c78:	84 83       	std	Z+4, r24	; 0x04
    5c7a:	95 83       	std	Z+5, r25	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    5c7c:	81 e0       	ldi	r24, 0x01	; 1
    5c7e:	81 87       	std	Z+9, r24	; 0x09
    5c80:	43 c1       	rjmp	.+646    	; 0x5f08 <mv_queue_move_buffer+0x492>
	mv.p->a[Z].steps = steps_z;
	mv.microseconds = (uint64_t)microseconds;			// cast to larger base
	mv.ticks = mv.microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    5c82:	44 24       	eor	r4, r4
    5c84:	55 24       	eor	r5, r5
				mv.p->a[i].steps = labs(mv.p->a[i].steps);

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
    5c86:	1c e9       	ldi	r17, 0x9C	; 156
    5c88:	21 2e       	mov	r2, r17
    5c8a:	11 e2       	ldi	r17, 0x21	; 33
    5c8c:	31 2e       	mov	r3, r17
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    5c8e:	40 91 ae 21 	lds	r20, 0x21AE
    5c92:	50 91 af 21 	lds	r21, 0x21AF
    5c96:	4a 86       	std	Y+10, r4	; 0x0a
    5c98:	5b 86       	std	Y+11, r5	; 0x0b
    5c9a:	c2 01       	movw	r24, r4
    5c9c:	f2 01       	movw	r30, r4
    5c9e:	b3 e0       	ldi	r27, 0x03	; 3
    5ca0:	ee 0f       	add	r30, r30
    5ca2:	ff 1f       	adc	r31, r31
    5ca4:	ba 95       	dec	r27
    5ca6:	e1 f7       	brne	.-8      	; 0x5ca0 <mv_queue_move_buffer+0x22a>
    5ca8:	88 0f       	add	r24, r24
    5caa:	99 1f       	adc	r25, r25
    5cac:	e8 0f       	add	r30, r24
    5cae:	f9 1f       	adc	r31, r25
    5cb0:	e4 0f       	add	r30, r20
    5cb2:	f5 1f       	adc	r31, r21
    5cb4:	80 81       	ld	r24, Z
    5cb6:	91 81       	ldd	r25, Z+1	; 0x01
    5cb8:	a2 81       	ldd	r26, Z+2	; 0x02
    5cba:	b3 81       	ldd	r27, Z+3	; 0x03
    5cbc:	00 97       	sbiw	r24, 0x00	; 0
    5cbe:	a1 05       	cpc	r26, r1
    5cc0:	b1 05       	cpc	r27, r1
    5cc2:	09 f4       	brne	.+2      	; 0x5cc6 <mv_queue_move_buffer+0x250>
    5cc4:	19 c1       	rjmp	.+562    	; 0x5ef8 <mv_queue_move_buffer+0x482>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    5cc6:	b7 ff       	sbrs	r27, 7
    5cc8:	12 c0       	rjmp	.+36     	; 0x5cee <mv_queue_move_buffer+0x278>
    5cca:	c2 01       	movw	r24, r4
    5ccc:	92 01       	movw	r18, r4
    5cce:	f3 e0       	ldi	r31, 0x03	; 3
    5cd0:	22 0f       	add	r18, r18
    5cd2:	33 1f       	adc	r19, r19
    5cd4:	fa 95       	dec	r31
    5cd6:	e1 f7       	brne	.-8      	; 0x5cd0 <mv_queue_move_buffer+0x25a>
    5cd8:	88 0f       	add	r24, r24
    5cda:	99 1f       	adc	r25, r25
    5cdc:	28 0f       	add	r18, r24
    5cde:	39 1f       	adc	r19, r25
    5ce0:	42 0f       	add	r20, r18
    5ce2:	53 1f       	adc	r21, r19
    5ce4:	81 e0       	ldi	r24, 0x01	; 1
    5ce6:	da 01       	movw	r26, r20
    5ce8:	18 96       	adiw	r26, 0x08	; 8
    5cea:	8c 93       	st	X, r24
    5cec:	0f c0       	rjmp	.+30     	; 0x5d0c <mv_queue_move_buffer+0x296>
    5cee:	c2 01       	movw	r24, r4
    5cf0:	92 01       	movw	r18, r4
    5cf2:	73 e0       	ldi	r23, 0x03	; 3
    5cf4:	22 0f       	add	r18, r18
    5cf6:	33 1f       	adc	r19, r19
    5cf8:	7a 95       	dec	r23
    5cfa:	e1 f7       	brne	.-8      	; 0x5cf4 <mv_queue_move_buffer+0x27e>
    5cfc:	88 0f       	add	r24, r24
    5cfe:	99 1f       	adc	r25, r25
    5d00:	28 0f       	add	r18, r24
    5d02:	39 1f       	adc	r19, r25
    5d04:	42 0f       	add	r20, r18
    5d06:	53 1f       	adc	r21, r19
    5d08:	fa 01       	movw	r30, r20
    5d0a:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    5d0c:	e0 91 ae 21 	lds	r30, 0x21AE
    5d10:	f0 91 af 21 	lds	r31, 0x21AF
    5d14:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d16:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d18:	ac 01       	movw	r20, r24
    5d1a:	03 e0       	ldi	r16, 0x03	; 3
    5d1c:	44 0f       	add	r20, r20
    5d1e:	55 1f       	adc	r21, r21
    5d20:	0a 95       	dec	r16
    5d22:	e1 f7       	brne	.-8      	; 0x5d1c <mv_queue_move_buffer+0x2a6>
    5d24:	88 0f       	add	r24, r24
    5d26:	99 1f       	adc	r25, r25
    5d28:	48 0f       	add	r20, r24
    5d2a:	59 1f       	adc	r21, r25
    5d2c:	4e 0f       	add	r20, r30
    5d2e:	5f 1f       	adc	r21, r31
    5d30:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d32:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d34:	9c 01       	movw	r18, r24
    5d36:	b3 e0       	ldi	r27, 0x03	; 3
    5d38:	22 0f       	add	r18, r18
    5d3a:	33 1f       	adc	r19, r19
    5d3c:	ba 95       	dec	r27
    5d3e:	e1 f7       	brne	.-8      	; 0x5d38 <mv_queue_move_buffer+0x2c2>
    5d40:	88 0f       	add	r24, r24
    5d42:	99 1f       	adc	r25, r25
    5d44:	28 0f       	add	r18, r24
    5d46:	39 1f       	adc	r19, r25
    5d48:	e2 0f       	add	r30, r18
    5d4a:	f3 1f       	adc	r31, r19
    5d4c:	80 81       	ld	r24, Z
    5d4e:	91 81       	ldd	r25, Z+1	; 0x01
    5d50:	a2 81       	ldd	r26, Z+2	; 0x02
    5d52:	b3 81       	ldd	r27, Z+3	; 0x03
    5d54:	b7 ff       	sbrs	r27, 7
    5d56:	07 c0       	rjmp	.+14     	; 0x5d66 <mv_queue_move_buffer+0x2f0>
    5d58:	b0 95       	com	r27
    5d5a:	a0 95       	com	r26
    5d5c:	90 95       	com	r25
    5d5e:	81 95       	neg	r24
    5d60:	9f 4f       	sbci	r25, 0xFF	; 255
    5d62:	af 4f       	sbci	r26, 0xFF	; 255
    5d64:	bf 4f       	sbci	r27, 0xFF	; 255
    5d66:	fa 01       	movw	r30, r20
    5d68:	80 83       	st	Z, r24
    5d6a:	91 83       	std	Z+1, r25	; 0x01
    5d6c:	a2 83       	std	Z+2, r26	; 0x02
    5d6e:	b3 83       	std	Z+3, r27	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    5d70:	a0 91 ae 21 	lds	r26, 0x21AE
    5d74:	b0 91 af 21 	lds	r27, 0x21AF
    5d78:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d7c:	fc 01       	movw	r30, r24
    5d7e:	73 e0       	ldi	r23, 0x03	; 3
    5d80:	ee 0f       	add	r30, r30
    5d82:	ff 1f       	adc	r31, r31
    5d84:	7a 95       	dec	r23
    5d86:	e1 f7       	brne	.-8      	; 0x5d80 <mv_queue_move_buffer+0x30a>
    5d88:	88 0f       	add	r24, r24
    5d8a:	99 1f       	adc	r25, r25
    5d8c:	e8 0f       	add	r30, r24
    5d8e:	f9 1f       	adc	r31, r25
    5d90:	ea 0f       	add	r30, r26
    5d92:	fb 1f       	adc	r31, r27
    5d94:	81 e0       	ldi	r24, 0x01	; 1
    5d96:	90 e0       	ldi	r25, 0x00	; 0
    5d98:	86 83       	std	Z+6, r24	; 0x06
    5d9a:	97 83       	std	Z+7, r25	; 0x07
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
    5d9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5da0:	9c 01       	movw	r18, r24
    5da2:	53 e0       	ldi	r21, 0x03	; 3
    5da4:	22 0f       	add	r18, r18
    5da6:	33 1f       	adc	r19, r19
    5da8:	5a 95       	dec	r21
    5daa:	e1 f7       	brne	.-8      	; 0x5da4 <mv_queue_move_buffer+0x32e>
    5dac:	88 0f       	add	r24, r24
    5dae:	99 1f       	adc	r25, r25
    5db0:	28 0f       	add	r18, r24
    5db2:	39 1f       	adc	r19, r25
    5db4:	a2 0f       	add	r26, r18
    5db6:	b3 1f       	adc	r27, r19
    5db8:	ed 90       	ld	r14, X+
    5dba:	fd 90       	ld	r15, X+
    5dbc:	0d 91       	ld	r16, X+
    5dbe:	1c 91       	ld	r17, X
    5dc0:	37 01       	movw	r6, r14
    5dc2:	48 01       	movw	r8, r16
    5dc4:	99 0c       	add	r9, r9
    5dc6:	66 08       	sbc	r6, r6
    5dc8:	76 2c       	mov	r7, r6
    5dca:	43 01       	movw	r8, r6
    5dcc:	20 91 94 21 	lds	r18, 0x2194
    5dd0:	30 91 95 21 	lds	r19, 0x2195
    5dd4:	40 91 96 21 	lds	r20, 0x2196
    5dd8:	50 91 97 21 	lds	r21, 0x2197
    5ddc:	60 91 98 21 	lds	r22, 0x2198
    5de0:	70 91 99 21 	lds	r23, 0x2199
    5de4:	80 91 9a 21 	lds	r24, 0x219A
    5de8:	90 91 9b 21 	lds	r25, 0x219B
    5dec:	57 01       	movw	r10, r14
    5dee:	68 01       	movw	r12, r16
    5df0:	e6 2c       	mov	r14, r6
    5df2:	f6 2c       	mov	r15, r6
    5df4:	06 2d       	mov	r16, r6
    5df6:	16 2d       	mov	r17, r6
    5df8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <__udivdi3>
    5dfc:	20 93 9c 21 	sts	0x219C, r18
    5e00:	d1 01       	movw	r26, r2
    5e02:	11 96       	adiw	r26, 0x01	; 1
    5e04:	3c 93       	st	X, r19
    5e06:	11 97       	sbiw	r26, 0x01	; 1
    5e08:	12 96       	adiw	r26, 0x02	; 2
    5e0a:	4c 93       	st	X, r20
    5e0c:	12 97       	sbiw	r26, 0x02	; 2
    5e0e:	13 96       	adiw	r26, 0x03	; 3
    5e10:	5c 93       	st	X, r21
    5e12:	13 97       	sbiw	r26, 0x03	; 3
    5e14:	14 96       	adiw	r26, 0x04	; 4
    5e16:	6c 93       	st	X, r22
    5e18:	14 97       	sbiw	r26, 0x04	; 4
    5e1a:	15 96       	adiw	r26, 0x05	; 5
    5e1c:	7c 93       	st	X, r23
    5e1e:	15 97       	sbiw	r26, 0x05	; 5
    5e20:	16 96       	adiw	r26, 0x06	; 6
    5e22:	8c 93       	st	X, r24
    5e24:	16 97       	sbiw	r26, 0x06	; 6
    5e26:	17 96       	adiw	r26, 0x07	; 7
    5e28:	9c 93       	st	X, r25
    5e2a:	38 c0       	rjmp	.+112    	; 0x5e9c <mv_queue_move_buffer+0x426>
				while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
					mv.ticks_per_step >>= 1;
    5e2c:	9d 01       	movw	r18, r26
    5e2e:	8e 2f       	mov	r24, r30
    5e30:	01 e0       	ldi	r16, 0x01	; 1
    5e32:	0e 94 ac 36 	call	0x6d58	; 0x6d58 <__lshrdi3>
    5e36:	20 93 9c 21 	sts	0x219C, r18
    5e3a:	f1 01       	movw	r30, r2
    5e3c:	31 83       	std	Z+1, r19	; 0x01
    5e3e:	42 83       	std	Z+2, r20	; 0x02
    5e40:	53 83       	std	Z+3, r21	; 0x03
    5e42:	64 83       	std	Z+4, r22	; 0x04
    5e44:	75 83       	std	Z+5, r23	; 0x05
    5e46:	86 83       	std	Z+6, r24	; 0x06
    5e48:	97 83       	std	Z+7, r25	; 0x07
					mv.p->a[i].postscale <<= 1;
    5e4a:	40 91 ae 21 	lds	r20, 0x21AE
    5e4e:	50 91 af 21 	lds	r21, 0x21AF
    5e52:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e54:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e56:	fc 01       	movw	r30, r24
    5e58:	23 e0       	ldi	r18, 0x03	; 3
    5e5a:	ee 0f       	add	r30, r30
    5e5c:	ff 1f       	adc	r31, r31
    5e5e:	2a 95       	dec	r18
    5e60:	e1 f7       	brne	.-8      	; 0x5e5a <mv_queue_move_buffer+0x3e4>
    5e62:	88 0f       	add	r24, r24
    5e64:	99 1f       	adc	r25, r25
    5e66:	e8 0f       	add	r30, r24
    5e68:	f9 1f       	adc	r31, r25
    5e6a:	e4 0f       	add	r30, r20
    5e6c:	f5 1f       	adc	r31, r21
    5e6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e70:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e72:	9c 01       	movw	r18, r24
    5e74:	13 e0       	ldi	r17, 0x03	; 3
    5e76:	22 0f       	add	r18, r18
    5e78:	33 1f       	adc	r19, r19
    5e7a:	1a 95       	dec	r17
    5e7c:	e1 f7       	brne	.-8      	; 0x5e76 <mv_queue_move_buffer+0x400>
    5e7e:	88 0f       	add	r24, r24
    5e80:	99 1f       	adc	r25, r25
    5e82:	28 0f       	add	r18, r24
    5e84:	39 1f       	adc	r19, r25
    5e86:	42 0f       	add	r20, r18
    5e88:	53 1f       	adc	r21, r19
    5e8a:	da 01       	movw	r26, r20
    5e8c:	16 96       	adiw	r26, 0x06	; 6
    5e8e:	8d 91       	ld	r24, X+
    5e90:	9c 91       	ld	r25, X
    5e92:	17 97       	sbiw	r26, 0x07	; 7
    5e94:	88 0f       	add	r24, r24
    5e96:	99 1f       	adc	r25, r25
    5e98:	86 83       	std	Z+6, r24	; 0x06
    5e9a:	97 83       	std	Z+7, r25	; 0x07

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
				while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5e9c:	a0 91 9c 21 	lds	r26, 0x219C
    5ea0:	b0 91 9d 21 	lds	r27, 0x219D
    5ea4:	40 91 9e 21 	lds	r20, 0x219E
    5ea8:	50 91 9f 21 	lds	r21, 0x219F
    5eac:	60 91 a0 21 	lds	r22, 0x21A0
    5eb0:	70 91 a1 21 	lds	r23, 0x21A1
    5eb4:	e0 91 a2 21 	lds	r30, 0x21A2
    5eb8:	90 91 a3 21 	lds	r25, 0x21A3
    5ebc:	84 2f       	mov	r24, r20
    5ebe:	85 2b       	or	r24, r21
    5ec0:	86 2b       	or	r24, r22
    5ec2:	87 2b       	or	r24, r23
    5ec4:	8e 2b       	or	r24, r30
    5ec6:	89 2b       	or	r24, r25
    5ec8:	09 f0       	breq	.+2      	; 0x5ecc <mv_queue_move_buffer+0x456>
    5eca:	b0 cf       	rjmp	.-160    	; 0x5e2c <mv_queue_move_buffer+0x3b6>
					mv.ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
    5ecc:	40 91 ae 21 	lds	r20, 0x21AE
    5ed0:	50 91 af 21 	lds	r21, 0x21AF
    5ed4:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ed6:	9b 85       	ldd	r25, Y+11	; 0x0b
    5ed8:	9c 01       	movw	r18, r24
    5eda:	73 e0       	ldi	r23, 0x03	; 3
    5edc:	22 0f       	add	r18, r18
    5ede:	33 1f       	adc	r19, r19
    5ee0:	7a 95       	dec	r23
    5ee2:	e1 f7       	brne	.-8      	; 0x5edc <mv_queue_move_buffer+0x466>
    5ee4:	88 0f       	add	r24, r24
    5ee6:	99 1f       	adc	r25, r25
    5ee8:	28 0f       	add	r18, r24
    5eea:	39 1f       	adc	r19, r25
    5eec:	42 0f       	add	r20, r18
    5eee:	53 1f       	adc	r21, r19
    5ef0:	cd 01       	movw	r24, r26
    5ef2:	fa 01       	movw	r30, r20
    5ef4:	84 83       	std	Z+4, r24	; 0x04
    5ef6:	95 83       	std	Z+5, r25	; 0x05
    5ef8:	08 94       	sec
    5efa:	41 1c       	adc	r4, r1
    5efc:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    5efe:	f3 e0       	ldi	r31, 0x03	; 3
    5f00:	4f 16       	cp	r4, r31
    5f02:	51 04       	cpc	r5, r1
    5f04:	09 f0       	breq	.+2      	; 0x5f08 <mv_queue_move_buffer+0x492>
    5f06:	c3 ce       	rjmp	.-634    	; 0x5c8e <mv_queue_move_buffer+0x218>
				}
				mv.p->a[i].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    5f08:	89 81       	ldd	r24, Y+1	; 0x01
    5f0a:	80 93 ac 21 	sts	0x21AC, r24
	st_execute_move();
    5f0e:	0e 94 80 25 	call	0x4b00	; 0x4b00 <st_execute_move>
    5f12:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    5f14:	2b 96       	adiw	r28, 0x0b	; 11
    5f16:	cd bf       	out	0x3d, r28	; 61
    5f18:	de bf       	out	0x3e, r29	; 62
    5f1a:	cf 91       	pop	r28
    5f1c:	df 91       	pop	r29
    5f1e:	1f 91       	pop	r17
    5f20:	0f 91       	pop	r16
    5f22:	ff 90       	pop	r15
    5f24:	ef 90       	pop	r14
    5f26:	df 90       	pop	r13
    5f28:	cf 90       	pop	r12
    5f2a:	bf 90       	pop	r11
    5f2c:	af 90       	pop	r10
    5f2e:	9f 90       	pop	r9
    5f30:	8f 90       	pop	r8
    5f32:	7f 90       	pop	r7
    5f34:	6f 90       	pop	r6
    5f36:	5f 90       	pop	r5
    5f38:	4f 90       	pop	r4
    5f3a:	3f 90       	pop	r3
    5f3c:	2f 90       	pop	r2
    5f3e:	08 95       	ret

00005f40 <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    5f40:	ab e1       	ldi	r26, 0x1B	; 27
    5f42:	b2 e2       	ldi	r27, 0x22	; 34
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5f44:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5f46:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5f48:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5f4a:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5f4c:	ed 91       	ld	r30, X+
    5f4e:	fc 91       	ld	r31, X
    5f50:	11 97       	sbiw	r26, 0x01	; 1
    5f52:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5f54:	ed 91       	ld	r30, X+
    5f56:	fc 91       	ld	r31, X
    5f58:	11 97       	sbiw	r26, 0x01	; 1
    5f5a:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5f5c:	ed 91       	ld	r30, X+
    5f5e:	fc 91       	ld	r31, X
    5f60:	11 97       	sbiw	r26, 0x01	; 1
    5f62:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    5f64:	ed 91       	ld	r30, X+
    5f66:	fc 91       	ld	r31, X
    5f68:	11 97       	sbiw	r26, 0x01	; 1
    5f6a:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    5f6c:	ed 91       	ld	r30, X+
    5f6e:	fc 91       	ld	r31, X
    5f70:	11 97       	sbiw	r26, 0x01	; 1
    5f72:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    5f74:	ed 91       	ld	r30, X+
    5f76:	fc 91       	ld	r31, X
    5f78:	11 97       	sbiw	r26, 0x01	; 1
    5f7a:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5f7c:	ed 91       	ld	r30, X+
    5f7e:	fc 91       	ld	r31, X
    5f80:	11 97       	sbiw	r26, 0x01	; 1
    5f82:	31 87       	std	Z+9, r19	; 0x09
    5f84:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    5f86:	42 e2       	ldi	r20, 0x22	; 34
    5f88:	ab 35       	cpi	r26, 0x5B	; 91
    5f8a:	b4 07       	cpc	r27, r20
    5f8c:	f9 f6       	brne	.-66     	; 0x5f4c <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    5f8e:	08 95       	ret

00005f90 <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    5f90:	1f 92       	push	r1
    5f92:	0f 92       	push	r0
    5f94:	0f b6       	in	r0, 0x3f	; 63
    5f96:	0f 92       	push	r0
    5f98:	11 24       	eor	r1, r1
    5f9a:	0f 90       	pop	r0
    5f9c:	0f be       	out	0x3f, r0	; 63
    5f9e:	0f 90       	pop	r0
    5fa0:	1f 90       	pop	r1
    5fa2:	18 95       	reti

00005fa4 <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    5fa4:	1f 92       	push	r1
    5fa6:	0f 92       	push	r0
    5fa8:	0f b6       	in	r0, 0x3f	; 63
    5faa:	0f 92       	push	r0
    5fac:	11 24       	eor	r1, r1
    5fae:	0f 90       	pop	r0
    5fb0:	0f be       	out	0x3f, r0	; 63
    5fb2:	0f 90       	pop	r0
    5fb4:	1f 90       	pop	r1
    5fb6:	18 95       	reti

00005fb8 <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    5fb8:	1f 92       	push	r1
    5fba:	0f 92       	push	r0
    5fbc:	0f b6       	in	r0, 0x3f	; 63
    5fbe:	0f 92       	push	r0
    5fc0:	11 24       	eor	r1, r1
    5fc2:	0f 90       	pop	r0
    5fc4:	0f be       	out	0x3f, r0	; 63
    5fc6:	0f 90       	pop	r0
    5fc8:	1f 90       	pop	r1
    5fca:	18 95       	reti

00005fcc <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    5fcc:	1f 92       	push	r1
    5fce:	0f 92       	push	r0
    5fd0:	0f b6       	in	r0, 0x3f	; 63
    5fd2:	0f 92       	push	r0
    5fd4:	11 24       	eor	r1, r1
    5fd6:	0f 90       	pop	r0
    5fd8:	0f be       	out	0x3f, r0	; 63
    5fda:	0f 90       	pop	r0
    5fdc:	1f 90       	pop	r1
    5fde:	18 95       	reti

00005fe0 <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    5fe0:	1f 92       	push	r1
    5fe2:	0f 92       	push	r0
    5fe4:	0f b6       	in	r0, 0x3f	; 63
    5fe6:	0f 92       	push	r0
    5fe8:	11 24       	eor	r1, r1
    5fea:	0f 90       	pop	r0
    5fec:	0f be       	out	0x3f, r0	; 63
    5fee:	0f 90       	pop	r0
    5ff0:	1f 90       	pop	r1
    5ff2:	18 95       	reti

00005ff4 <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    5ff4:	1f 92       	push	r1
    5ff6:	0f 92       	push	r0
    5ff8:	0f b6       	in	r0, 0x3f	; 63
    5ffa:	0f 92       	push	r0
    5ffc:	11 24       	eor	r1, r1
    5ffe:	0f 90       	pop	r0
    6000:	0f be       	out	0x3f, r0	; 63
    6002:	0f 90       	pop	r0
    6004:	1f 90       	pop	r1
    6006:	18 95       	reti

00006008 <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    6008:	1f 92       	push	r1
    600a:	0f 92       	push	r0
    600c:	0f b6       	in	r0, 0x3f	; 63
    600e:	0f 92       	push	r0
    6010:	11 24       	eor	r1, r1
    6012:	0f 90       	pop	r0
    6014:	0f be       	out	0x3f, r0	; 63
    6016:	0f 90       	pop	r0
    6018:	1f 90       	pop	r1
    601a:	18 95       	reti

0000601c <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    601c:	1f 92       	push	r1
    601e:	0f 92       	push	r0
    6020:	0f b6       	in	r0, 0x3f	; 63
    6022:	0f 92       	push	r0
    6024:	11 24       	eor	r1, r1
    6026:	0f 90       	pop	r0
    6028:	0f be       	out	0x3f, r0	; 63
    602a:	0f 90       	pop	r0
    602c:	1f 90       	pop	r1
    602e:	18 95       	reti

00006030 <tg_terminate>:

void tg_terminate()
{
//	tg_kill();
	return;
}
    6030:	08 95       	ret

00006032 <tg_pause>:

void tg_pause()
{
	return;
}
    6032:	08 95       	ret

00006034 <tg_resume>:

void tg_resume()
{
	return;
}
    6034:	08 95       	ret

00006036 <signal_etx>:
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx()				// ^c
{
	tg_reset_source();			// return control to standard device
    6036:	0e 94 ac 2b 	call	0x5758	; 0x5758 <tg_reset_source>
	mc_motion_stop();			// stop computing and generating motions
    603a:	0e 94 64 24 	call	0x48c8	; 0x48c8 <mc_motion_stop>
	return;
}
    603e:	08 95       	ret

00006040 <xio_set_baud_usart>:
	dx->port->OUTCLR = outclr;
	dx->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
    6040:	cf 93       	push	r28
    6042:	df 93       	push	r29
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	27 e1       	ldi	r18, 0x17	; 23
    6048:	30 e0       	ldi	r19, 0x00	; 0
    604a:	82 9f       	mul	r24, r18
    604c:	d0 01       	movw	r26, r0
    604e:	83 9f       	mul	r24, r19
    6050:	b0 0d       	add	r27, r0
    6052:	92 9f       	mul	r25, r18
    6054:	b0 0d       	add	r27, r0
    6056:	11 24       	eor	r1, r1
    6058:	a5 5d       	subi	r26, 0xD5	; 213
    605a:	b6 4d       	sbci	r27, 0xD6	; 214
    605c:	51 96       	adiw	r26, 0x11	; 17
    605e:	ed 91       	ld	r30, X+
    6060:	fc 91       	ld	r31, X
    6062:	52 97       	sbiw	r26, 0x12	; 18
    6064:	87 81       	ldd	r24, Z+7	; 0x07
    6066:	90 85       	ldd	r25, Z+8	; 0x08
    6068:	26 2f       	mov	r18, r22
    606a:	30 e0       	ldi	r19, 0x00	; 0
    606c:	f9 01       	movw	r30, r18
    606e:	eb 53       	subi	r30, 0x3B	; 59
    6070:	f5 4e       	sbci	r31, 0xE5	; 229
    6072:	e4 91       	lpm	r30, Z+
    6074:	ec 01       	movw	r28, r24
    6076:	ee 83       	std	Y+6, r30	; 0x06
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    6078:	51 96       	adiw	r26, 0x11	; 17
    607a:	ed 91       	ld	r30, X+
    607c:	fc 91       	ld	r31, X
    607e:	52 97       	sbiw	r26, 0x12	; 18
    6080:	a7 81       	ldd	r26, Z+7	; 0x07
    6082:	b0 85       	ldd	r27, Z+8	; 0x08
    6084:	20 53       	subi	r18, 0x30	; 48
    6086:	35 4e       	sbci	r19, 0xE5	; 229
    6088:	f9 01       	movw	r30, r18
    608a:	64 91       	lpm	r22, Z+
    608c:	17 96       	adiw	r26, 0x07	; 7
    608e:	6c 93       	st	X, r22
}
    6090:	df 91       	pop	r29
    6092:	cf 91       	pop	r28
    6094:	08 95       	ret

00006096 <_getc_char>:

// xio_getc_usart helper routines

static int _getc_char(void)
{
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    6096:	80 91 0a 22 	lds	r24, 0x220A
    609a:	90 e0       	ldi	r25, 0x00	; 0
    609c:	27 e1       	ldi	r18, 0x17	; 23
    609e:	30 e0       	ldi	r19, 0x00	; 0
    60a0:	82 9f       	mul	r24, r18
    60a2:	d0 01       	movw	r26, r0
    60a4:	83 9f       	mul	r24, r19
    60a6:	b0 0d       	add	r27, r0
    60a8:	92 9f       	mul	r25, r18
    60aa:	b0 0d       	add	r27, r0
    60ac:	11 24       	eor	r1, r1
    60ae:	a5 5d       	subi	r26, 0xD5	; 213
    60b0:	b6 4d       	sbci	r27, 0xD6	; 214
    60b2:	8c 91       	ld	r24, X
    60b4:	84 ff       	sbrs	r24, 4
    60b6:	0b c0       	rjmp	.+22     	; 0x60ce <_getc_char+0x38>
    60b8:	60 91 c3 2a 	lds	r22, 0x2AC3
    60bc:	70 91 c4 2a 	lds	r23, 0x2AC4
    60c0:	1b 96       	adiw	r26, 0x0b	; 11
    60c2:	ed 91       	ld	r30, X+
    60c4:	fc 91       	ld	r31, X
    60c6:	1c 97       	sbiw	r26, 0x0c	; 12
    60c8:	14 96       	adiw	r26, 0x04	; 4
    60ca:	8c 91       	ld	r24, X
    60cc:	19 95       	eicall
    60ce:	80 91 0a 22 	lds	r24, 0x220A
    60d2:	90 e0       	ldi	r25, 0x00	; 0
    60d4:	27 e1       	ldi	r18, 0x17	; 23
    60d6:	30 e0       	ldi	r19, 0x00	; 0
    60d8:	82 9f       	mul	r24, r18
    60da:	f0 01       	movw	r30, r0
    60dc:	83 9f       	mul	r24, r19
    60de:	f0 0d       	add	r31, r0
    60e0:	92 9f       	mul	r25, r18
    60e2:	f0 0d       	add	r31, r0
    60e4:	11 24       	eor	r1, r1
    60e6:	e5 5d       	subi	r30, 0xD5	; 213
    60e8:	f6 4d       	sbci	r31, 0xD6	; 214
	return(ds[gdev].c);
}
    60ea:	84 81       	ldd	r24, Z+4	; 0x04
    60ec:	90 e0       	ldi	r25, 0x00	; 0
    60ee:	08 95       	ret

000060f0 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(ds[gdev].flags)) ds[gdev].c = '\n';
    60f0:	80 91 0a 22 	lds	r24, 0x220A
    60f4:	28 2f       	mov	r18, r24
    60f6:	30 e0       	ldi	r19, 0x00	; 0
    60f8:	87 e1       	ldi	r24, 0x17	; 23
    60fa:	90 e0       	ldi	r25, 0x00	; 0
    60fc:	28 9f       	mul	r18, r24
    60fe:	f0 01       	movw	r30, r0
    6100:	29 9f       	mul	r18, r25
    6102:	f0 0d       	add	r31, r0
    6104:	38 9f       	mul	r19, r24
    6106:	f0 0d       	add	r31, r0
    6108:	11 24       	eor	r1, r1
    610a:	e5 5d       	subi	r30, 0xD5	; 213
    610c:	f6 4d       	sbci	r31, 0xD6	; 214
    610e:	80 81       	ld	r24, Z
    6110:	86 ff       	sbrs	r24, 6
    6112:	02 c0       	rjmp	.+4      	; 0x6118 <_getc_NEWLINE+0x28>
    6114:	8a e0       	ldi	r24, 0x0A	; 10
    6116:	84 83       	std	Z+4, r24	; 0x04
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    6118:	87 e1       	ldi	r24, 0x17	; 23
    611a:	90 e0       	ldi	r25, 0x00	; 0
    611c:	28 9f       	mul	r18, r24
    611e:	d0 01       	movw	r26, r0
    6120:	29 9f       	mul	r18, r25
    6122:	b0 0d       	add	r27, r0
    6124:	38 9f       	mul	r19, r24
    6126:	b0 0d       	add	r27, r0
    6128:	11 24       	eor	r1, r1
    612a:	a5 5d       	subi	r26, 0xD5	; 213
    612c:	b6 4d       	sbci	r27, 0xD6	; 214
    612e:	8c 91       	ld	r24, X
    6130:	84 ff       	sbrs	r24, 4
    6132:	0b c0       	rjmp	.+22     	; 0x614a <_getc_NEWLINE+0x5a>
    6134:	60 91 c3 2a 	lds	r22, 0x2AC3
    6138:	70 91 c4 2a 	lds	r23, 0x2AC4
    613c:	1b 96       	adiw	r26, 0x0b	; 11
    613e:	ed 91       	ld	r30, X+
    6140:	fc 91       	ld	r31, X
    6142:	1c 97       	sbiw	r26, 0x0c	; 12
    6144:	14 96       	adiw	r26, 0x04	; 4
    6146:	8c 91       	ld	r24, X
    6148:	19 95       	eicall
    614a:	80 91 0a 22 	lds	r24, 0x220A
    614e:	90 e0       	ldi	r25, 0x00	; 0
    6150:	27 e1       	ldi	r18, 0x17	; 23
    6152:	30 e0       	ldi	r19, 0x00	; 0
    6154:	82 9f       	mul	r24, r18
    6156:	f0 01       	movw	r30, r0
    6158:	83 9f       	mul	r24, r19
    615a:	f0 0d       	add	r31, r0
    615c:	92 9f       	mul	r25, r18
    615e:	f0 0d       	add	r31, r0
    6160:	11 24       	eor	r1, r1
    6162:	e5 5d       	subi	r30, 0xD5	; 213
    6164:	f6 4d       	sbci	r31, 0xD6	; 214
	return(ds[gdev].c);
}
    6166:	84 81       	ldd	r24, Z+4	; 0x04
    6168:	90 e0       	ldi	r25, 0x00	; 0
    616a:	08 95       	ret

0000616c <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(ds[gdev].flags)) {
    616c:	80 91 0a 22 	lds	r24, 0x220A
    6170:	90 e0       	ldi	r25, 0x00	; 0
    6172:	27 e1       	ldi	r18, 0x17	; 23
    6174:	30 e0       	ldi	r19, 0x00	; 0
    6176:	82 9f       	mul	r24, r18
    6178:	f0 01       	movw	r30, r0
    617a:	83 9f       	mul	r24, r19
    617c:	f0 0d       	add	r31, r0
    617e:	92 9f       	mul	r25, r18
    6180:	f0 0d       	add	r31, r0
    6182:	11 24       	eor	r1, r1
    6184:	e5 5d       	subi	r30, 0xD5	; 213
    6186:	f6 4d       	sbci	r31, 0xD6	; 214
    6188:	80 81       	ld	r24, Z
    618a:	87 ff       	sbrs	r24, 7
    618c:	03 c0       	rjmp	.+6      	; 0x6194 <_getc_SEMICOLON+0x28>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    618e:	0e 94 78 30 	call	0x60f0	; 0x60f0 <_getc_NEWLINE>
    6192:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    6194:	0e 94 4b 30 	call	0x6096	; 0x6096 <_getc_char>
}
    6198:	08 95       	ret

0000619a <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	ds[gdev].sig = XIO_SIG_DELETE;
    619a:	80 91 0a 22 	lds	r24, 0x220A
    619e:	90 e0       	ldi	r25, 0x00	; 0
    61a0:	27 e1       	ldi	r18, 0x17	; 23
    61a2:	30 e0       	ldi	r19, 0x00	; 0
    61a4:	82 9f       	mul	r24, r18
    61a6:	f0 01       	movw	r30, r0
    61a8:	83 9f       	mul	r24, r19
    61aa:	f0 0d       	add	r31, r0
    61ac:	92 9f       	mul	r25, r18
    61ae:	f0 0d       	add	r31, r0
    61b0:	11 24       	eor	r1, r1
    61b2:	e5 5d       	subi	r30, 0xD5	; 213
    61b4:	f6 4d       	sbci	r31, 0xD6	; 214
    61b6:	89 e0       	ldi	r24, 0x09	; 9
    61b8:	83 83       	std	Z+3, r24	; 0x03
	return(_FDEV_ERR);
}
    61ba:	8f ef       	ldi	r24, 0xFF	; 255
    61bc:	9f ef       	ldi	r25, 0xFF	; 255
    61be:	08 95       	ret

000061c0 <xio_readln_usart>:
 *
 *	Note: LINEMODE flag in device struct is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_usart(const uint8_t dev, char *buf, const uint8_t size)
{
    61c0:	ff 92       	push	r15
    61c2:	0f 93       	push	r16
    61c4:	1f 93       	push	r17
    61c6:	cf 93       	push	r28
    61c8:	df 93       	push	r29
    61ca:	28 2f       	mov	r18, r24
	struct xioDEVICE *d = &ds[dev];				// init device struct pointer
    61cc:	87 e1       	ldi	r24, 0x17	; 23
    61ce:	28 9f       	mul	r18, r24
    61d0:	e0 01       	movw	r28, r0
    61d2:	11 24       	eor	r1, r1
    61d4:	c5 5d       	subi	r28, 0xD5	; 213
    61d6:	d6 4d       	sbci	r29, 0xD6	; 214
	
	gdev = dev;									// set the global device number
    61d8:	20 93 0a 22 	sts	0x220A, r18

	if (!IN_LINE(d->flags)) {					// first time thru initializations
    61dc:	88 81       	ld	r24, Y
    61de:	99 81       	ldd	r25, Y+1	; 0x01
    61e0:	96 fd       	sbrc	r25, 6
    61e2:	09 c0       	rjmp	.+18     	; 0x61f6 <xio_readln_usart+0x36>
		d->len = 0;								// zero buffer
    61e4:	1d 82       	std	Y+5, r1	; 0x05
		d->status = 0;
    61e6:	1a 82       	std	Y+2, r1	; 0x02
		d->size = size;
    61e8:	4e 83       	std	Y+6, r20	; 0x06
		d->buf = buf;
    61ea:	6d 8b       	std	Y+21, r22	; 0x15
    61ec:	7e 8b       	std	Y+22, r23	; 0x16
		d->sig = XIO_SIG_OK;					// reset signal register
    61ee:	1b 82       	std	Y+3, r1	; 0x03
		d->flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    61f0:	90 64       	ori	r25, 0x40	; 64
    61f2:	88 83       	st	Y, r24
    61f4:	99 83       	std	Y+1, r25	; 0x01
 */

static int _xio_readc_usart(const uint8_t dev, const char *buf)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    61f6:	30 e0       	ldi	r19, 0x00	; 0
    61f8:	87 e1       	ldi	r24, 0x17	; 23
    61fa:	90 e0       	ldi	r25, 0x00	; 0
    61fc:	28 9f       	mul	r18, r24
    61fe:	80 01       	movw	r16, r0
    6200:	29 9f       	mul	r18, r25
    6202:	10 0d       	add	r17, r0
    6204:	38 9f       	mul	r19, r24
    6206:	10 0d       	add	r17, r0
    6208:	11 24       	eor	r1, r1
    620a:	04 5c       	subi	r16, 0xC4	; 196
    620c:	16 4d       	sbci	r17, 0xD6	; 214

	if (dx->rx_buf_head == dx->rx_buf_tail) {		// RX ISR buffer empty
		return(XIO_BUFFER_EMPTY);
	}
	if (--(dx->rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    620e:	3e ef       	ldi	r19, 0xFE	; 254
    6210:	f3 2e       	mov	r15, r19
 */

static int _xio_readc_usart(const uint8_t dev, const char *buf)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6212:	d8 01       	movw	r26, r16
    6214:	ed 91       	ld	r30, X+
    6216:	fc 91       	ld	r31, X

	if (dx->rx_buf_head == dx->rx_buf_tail) {		// RX ISR buffer empty
    6218:	93 81       	ldd	r25, Z+3	; 0x03
    621a:	82 81       	ldd	r24, Z+2	; 0x02
    621c:	98 17       	cp	r25, r24
    621e:	19 f4       	brne	.+6      	; 0x6226 <xio_readln_usart+0x66>
    6220:	88 e0       	ldi	r24, 0x08	; 8
    6222:	90 e0       	ldi	r25, 0x00	; 0
    6224:	17 c0       	rjmp	.+46     	; 0x6254 <xio_readln_usart+0x94>
		return(XIO_BUFFER_EMPTY);
	}
	if (--(dx->rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
    6226:	82 81       	ldd	r24, Z+2	; 0x02
    6228:	81 50       	subi	r24, 0x01	; 1
    622a:	82 83       	std	Z+2, r24	; 0x02
    622c:	82 81       	ldd	r24, Z+2	; 0x02
    622e:	88 23       	and	r24, r24
    6230:	09 f4       	brne	.+2      	; 0x6234 <xio_readln_usart+0x74>
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6232:	f2 82       	std	Z+2, r15	; 0x02
	}
	d->c = (dx->rx_buf[dx->rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    6234:	82 81       	ldd	r24, Z+2	; 0x02
    6236:	e8 0f       	add	r30, r24
    6238:	f1 1d       	adc	r31, r1
    623a:	83 85       	ldd	r24, Z+11	; 0x0b
    623c:	8f 77       	andi	r24, 0x7F	; 127
    623e:	8c 83       	std	Y+4, r24	; 0x04
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[d->c])))()); // dispatch char
    6240:	90 e0       	ldi	r25, 0x00	; 0
    6242:	88 0f       	add	r24, r24
    6244:	99 1f       	adc	r25, r25
    6246:	85 52       	subi	r24, 0x25	; 37
    6248:	95 4e       	sbci	r25, 0xE5	; 229
    624a:	fc 01       	movw	r30, r24
    624c:	25 91       	lpm	r18, Z+
    624e:	34 91       	lpm	r19, Z+
    6250:	f9 01       	movw	r30, r18
    6252:	19 95       	eicall
		d->buf = buf;
		d->sig = XIO_SIG_OK;					// reset signal register
		d->flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
	}
	while (TRUE) { 
		switch (d->status = _xio_readc_usart(dev, d->buf)) {
    6254:	8a 83       	std	Y+2, r24	; 0x02
    6256:	88 30       	cpi	r24, 0x08	; 8
    6258:	41 f0       	breq	.+16     	; 0x626a <xio_readln_usart+0xaa>
    625a:	8a 30       	cpi	r24, 0x0A	; 10
    625c:	19 f0       	breq	.+6      	; 0x6264 <xio_readln_usart+0xa4>
    625e:	84 30       	cpi	r24, 0x04	; 4
    6260:	c1 f6       	brne	.-80     	; 0x6212 <xio_readln_usart+0x52>
    6262:	06 c0       	rjmp	.+12     	; 0x6270 <xio_readln_usart+0xb0>
    6264:	2a e0       	ldi	r18, 0x0A	; 10
    6266:	30 e0       	ldi	r19, 0x00	; 0
    6268:	05 c0       	rjmp	.+10     	; 0x6274 <xio_readln_usart+0xb4>
    626a:	22 e0       	ldi	r18, 0x02	; 2
    626c:	30 e0       	ldi	r19, 0x00	; 0
    626e:	02 c0       	rjmp	.+4      	; 0x6274 <xio_readln_usart+0xb4>
    6270:	20 e0       	ldi	r18, 0x00	; 0
    6272:	30 e0       	ldi	r19, 0x00	; 0
			case (XIO_EAGAIN): break;							// loop
		}
		// +++ put a size check here of buffers can overrun.
	}
	return (XIO_OK);
}
    6274:	c9 01       	movw	r24, r18
    6276:	df 91       	pop	r29
    6278:	cf 91       	pop	r28
    627a:	1f 91       	pop	r17
    627c:	0f 91       	pop	r16
    627e:	ff 90       	pop	r15
    6280:	08 95       	ret

00006282 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (ds[gdev].len > ds[gdev].size) {			// trap buffer overflow
    6282:	80 91 0a 22 	lds	r24, 0x220A
    6286:	90 e0       	ldi	r25, 0x00	; 0
    6288:	27 e1       	ldi	r18, 0x17	; 23
    628a:	30 e0       	ldi	r19, 0x00	; 0
    628c:	82 9f       	mul	r24, r18
    628e:	d0 01       	movw	r26, r0
    6290:	83 9f       	mul	r24, r19
    6292:	b0 0d       	add	r27, r0
    6294:	92 9f       	mul	r25, r18
    6296:	b0 0d       	add	r27, r0
    6298:	11 24       	eor	r1, r1
    629a:	a5 5d       	subi	r26, 0xD5	; 213
    629c:	b6 4d       	sbci	r27, 0xD6	; 214
    629e:	15 96       	adiw	r26, 0x05	; 5
    62a0:	9c 91       	ld	r25, X
    62a2:	15 97       	sbiw	r26, 0x05	; 5
    62a4:	16 96       	adiw	r26, 0x06	; 6
    62a6:	2c 91       	ld	r18, X
    62a8:	16 97       	sbiw	r26, 0x06	; 6
    62aa:	29 17       	cp	r18, r25
    62ac:	70 f4       	brcc	.+28     	; 0x62ca <_readln_char+0x48>
		ds[gdev].sig = XIO_SIG_EOL;
    62ae:	82 e0       	ldi	r24, 0x02	; 2
    62b0:	13 96       	adiw	r26, 0x03	; 3
    62b2:	8c 93       	st	X, r24
    62b4:	13 97       	sbiw	r26, 0x03	; 3
		ds[gdev].buf[ds[gdev].size] = NUL;		// size is zero based
    62b6:	55 96       	adiw	r26, 0x15	; 21
    62b8:	ed 91       	ld	r30, X+
    62ba:	fc 91       	ld	r31, X
    62bc:	56 97       	sbiw	r26, 0x16	; 22
    62be:	e2 0f       	add	r30, r18
    62c0:	f1 1d       	adc	r31, r1
    62c2:	10 82       	st	Z, r1
    62c4:	2a e0       	ldi	r18, 0x0A	; 10
    62c6:	30 e0       	ldi	r19, 0x00	; 0
    62c8:	1e c0       	rjmp	.+60     	; 0x6306 <_readln_char+0x84>
		return (XIO_BUFFER_FULL_NON_FATAL);
	}
	ds[gdev].buf[ds[gdev].len++] = ds[gdev].c;
    62ca:	55 96       	adiw	r26, 0x15	; 21
    62cc:	ed 91       	ld	r30, X+
    62ce:	fc 91       	ld	r31, X
    62d0:	56 97       	sbiw	r26, 0x16	; 22
    62d2:	e9 0f       	add	r30, r25
    62d4:	f1 1d       	adc	r31, r1
    62d6:	14 96       	adiw	r26, 0x04	; 4
    62d8:	8c 91       	ld	r24, X
    62da:	14 97       	sbiw	r26, 0x04	; 4
    62dc:	80 83       	st	Z, r24
    62de:	9f 5f       	subi	r25, 0xFF	; 255
    62e0:	15 96       	adiw	r26, 0x05	; 5
    62e2:	9c 93       	st	X, r25
    62e4:	15 97       	sbiw	r26, 0x05	; 5
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);// conditional echo
    62e6:	8c 91       	ld	r24, X
    62e8:	84 ff       	sbrs	r24, 4
    62ea:	0b c0       	rjmp	.+22     	; 0x6302 <_readln_char+0x80>
    62ec:	60 91 c3 2a 	lds	r22, 0x2AC3
    62f0:	70 91 c4 2a 	lds	r23, 0x2AC4
    62f4:	1b 96       	adiw	r26, 0x0b	; 11
    62f6:	ed 91       	ld	r30, X+
    62f8:	fc 91       	ld	r31, X
    62fa:	1c 97       	sbiw	r26, 0x0c	; 12
    62fc:	14 96       	adiw	r26, 0x04	; 4
    62fe:	8c 91       	ld	r24, X
    6300:	19 95       	eicall
    6302:	22 e0       	ldi	r18, 0x02	; 2
    6304:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_EAGAIN);						// line is still in process
}
    6306:	c9 01       	movw	r24, r18
    6308:	08 95       	ret

0000630a <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	ds[gdev].sig = XIO_SIG_EOL;
    630a:	80 91 0a 22 	lds	r24, 0x220A
    630e:	90 e0       	ldi	r25, 0x00	; 0
    6310:	27 e1       	ldi	r18, 0x17	; 23
    6312:	30 e0       	ldi	r19, 0x00	; 0
    6314:	82 9f       	mul	r24, r18
    6316:	d0 01       	movw	r26, r0
    6318:	83 9f       	mul	r24, r19
    631a:	b0 0d       	add	r27, r0
    631c:	92 9f       	mul	r25, r18
    631e:	b0 0d       	add	r27, r0
    6320:	11 24       	eor	r1, r1
    6322:	a5 5d       	subi	r26, 0xD5	; 213
    6324:	b6 4d       	sbci	r27, 0xD6	; 214
    6326:	82 e0       	ldi	r24, 0x02	; 2
    6328:	13 96       	adiw	r26, 0x03	; 3
    632a:	8c 93       	st	X, r24
    632c:	13 97       	sbiw	r26, 0x03	; 3
	ds[gdev].buf[ds[gdev].len] = NUL;
    632e:	15 96       	adiw	r26, 0x05	; 5
    6330:	8c 91       	ld	r24, X
    6332:	15 97       	sbiw	r26, 0x05	; 5
    6334:	55 96       	adiw	r26, 0x15	; 21
    6336:	ed 91       	ld	r30, X+
    6338:	fc 91       	ld	r31, X
    633a:	56 97       	sbiw	r26, 0x16	; 22
    633c:	e8 0f       	add	r30, r24
    633e:	f1 1d       	adc	r31, r1
    6340:	10 82       	st	Z, r1
	ds[gdev].flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    6342:	2d 91       	ld	r18, X+
    6344:	3c 91       	ld	r19, X
    6346:	11 97       	sbiw	r26, 0x01	; 1
    6348:	c9 01       	movw	r24, r18
    634a:	9f 7b       	andi	r25, 0xBF	; 191
    634c:	8d 93       	st	X+, r24
    634e:	9c 93       	st	X, r25
    6350:	11 97       	sbiw	r26, 0x01	; 1
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc('\n',stdout);// echo a newline
    6352:	24 ff       	sbrs	r18, 4
    6354:	0a c0       	rjmp	.+20     	; 0x636a <_readln_NEWLINE+0x60>
    6356:	60 91 c3 2a 	lds	r22, 0x2AC3
    635a:	70 91 c4 2a 	lds	r23, 0x2AC4
    635e:	1b 96       	adiw	r26, 0x0b	; 11
    6360:	ed 91       	ld	r30, X+
    6362:	fc 91       	ld	r31, X
    6364:	1c 97       	sbiw	r26, 0x0c	; 12
    6366:	8a e0       	ldi	r24, 0x0A	; 10
    6368:	19 95       	eicall
	return (XIO_EOL);							// return for end-of-line
}
    636a:	84 e0       	ldi	r24, 0x04	; 4
    636c:	90 e0       	ldi	r25, 0x00	; 0
    636e:	08 95       	ret

00006370 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newln
{
	if (SEMICOLONS(ds[gdev].flags)) {
    6370:	80 91 0a 22 	lds	r24, 0x220A
    6374:	90 e0       	ldi	r25, 0x00	; 0
    6376:	27 e1       	ldi	r18, 0x17	; 23
    6378:	30 e0       	ldi	r19, 0x00	; 0
    637a:	82 9f       	mul	r24, r18
    637c:	f0 01       	movw	r30, r0
    637e:	83 9f       	mul	r24, r19
    6380:	f0 0d       	add	r31, r0
    6382:	92 9f       	mul	r25, r18
    6384:	f0 0d       	add	r31, r0
    6386:	11 24       	eor	r1, r1
    6388:	e5 5d       	subi	r30, 0xD5	; 213
    638a:	f6 4d       	sbci	r31, 0xD6	; 214
    638c:	80 81       	ld	r24, Z
    638e:	87 ff       	sbrs	r24, 7
    6390:	03 c0       	rjmp	.+6      	; 0x6398 <_readln_SEMICOLON+0x28>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    6392:	0e 94 85 31 	call	0x630a	; 0x630a <_readln_NEWLINE>
    6396:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    6398:	0e 94 41 31 	call	0x6282	; 0x6282 <_readln_char>
	}
}
    639c:	08 95       	ret

0000639e <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--ds[gdev].len >= 0) {
    639e:	80 91 0a 22 	lds	r24, 0x220A
    63a2:	90 e0       	ldi	r25, 0x00	; 0
    63a4:	27 e1       	ldi	r18, 0x17	; 23
    63a6:	30 e0       	ldi	r19, 0x00	; 0
    63a8:	82 9f       	mul	r24, r18
    63aa:	d0 01       	movw	r26, r0
    63ac:	83 9f       	mul	r24, r19
    63ae:	b0 0d       	add	r27, r0
    63b0:	92 9f       	mul	r25, r18
    63b2:	b0 0d       	add	r27, r0
    63b4:	11 24       	eor	r1, r1
    63b6:	a5 5d       	subi	r26, 0xD5	; 213
    63b8:	b6 4d       	sbci	r27, 0xD6	; 214
    63ba:	15 96       	adiw	r26, 0x05	; 5
    63bc:	8c 91       	ld	r24, X
    63be:	15 97       	sbiw	r26, 0x05	; 5
    63c0:	81 50       	subi	r24, 0x01	; 1
    63c2:	15 96       	adiw	r26, 0x05	; 5
    63c4:	8c 93       	st	X, r24
    63c6:	15 97       	sbiw	r26, 0x05	; 5
		if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    63c8:	8c 91       	ld	r24, X
    63ca:	84 ff       	sbrs	r24, 4
    63cc:	0b c0       	rjmp	.+22     	; 0x63e4 <_readln_DELETE+0x46>
    63ce:	60 91 c3 2a 	lds	r22, 0x2AC3
    63d2:	70 91 c4 2a 	lds	r23, 0x2AC4
    63d6:	1b 96       	adiw	r26, 0x0b	; 11
    63d8:	ed 91       	ld	r30, X+
    63da:	fc 91       	ld	r31, X
    63dc:	1c 97       	sbiw	r26, 0x0c	; 12
    63de:	14 96       	adiw	r26, 0x04	; 4
    63e0:	8c 91       	ld	r24, X
    63e2:	19 95       	eicall
	} else {
		ds[gdev].len = 0;
	}
	return (XIO_EAGAIN);						// line is still in process
}
    63e4:	82 e0       	ldi	r24, 0x02	; 2
    63e6:	90 e0       	ldi	r25, 0x00	; 0
    63e8:	08 95       	ret

000063ea <xio_queue_RX_char_usart>:
 */

void xio_queue_RX_char_usart(const uint8_t dev, const char c)
{
	struct xioDEVICE *d = &ds[dev];				// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));// init USART pointer
    63ea:	90 e0       	ldi	r25, 0x00	; 0
    63ec:	27 e1       	ldi	r18, 0x17	; 23
    63ee:	30 e0       	ldi	r19, 0x00	; 0
    63f0:	82 9f       	mul	r24, r18
    63f2:	f0 01       	movw	r30, r0
    63f4:	83 9f       	mul	r24, r19
    63f6:	f0 0d       	add	r31, r0
    63f8:	92 9f       	mul	r25, r18
    63fa:	f0 0d       	add	r31, r0
    63fc:	11 24       	eor	r1, r1
    63fe:	e5 5d       	subi	r30, 0xD5	; 213
    6400:	f6 4d       	sbci	r31, 0xD6	; 214
    6402:	81 89       	ldd	r24, Z+17	; 0x11
    6404:	92 89       	ldd	r25, Z+18	; 0x12

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6406:	63 30       	cpi	r22, 0x03	; 3
    6408:	29 f4       	brne	.+10     	; 0x6414 <xio_queue_RX_char_usart+0x2a>
		d->sig = XIO_SIG_KILL;					// set signal value
    640a:	84 e0       	ldi	r24, 0x04	; 4
    640c:	83 83       	std	Z+3, r24	; 0x03
		signal_etx();							// call app-specific sig handler
    640e:	0e 94 1b 30 	call	0x6036	; 0x6036 <signal_etx>
    6412:	08 95       	ret
 */

void xio_queue_RX_char_usart(const uint8_t dev, const char c)
{
	struct xioDEVICE *d = &ds[dev];				// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));// init USART pointer
    6414:	fc 01       	movw	r30, r24
		signal_etx();							// call app-specific sig handler
		return;
	}

	// normal path
	if ((--dx->rx_buf_head) == 0) { 			// wrap condition
    6416:	83 81       	ldd	r24, Z+3	; 0x03
    6418:	81 50       	subi	r24, 0x01	; 1
    641a:	83 83       	std	Z+3, r24	; 0x03
    641c:	83 81       	ldd	r24, Z+3	; 0x03
    641e:	88 23       	and	r24, r24
    6420:	11 f4       	brne	.+4      	; 0x6426 <xio_queue_RX_char_usart+0x3c>
		dx->rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6422:	8e ef       	ldi	r24, 0xFE	; 254
    6424:	83 83       	std	Z+3, r24	; 0x03
	}
	if (dx->rx_buf_head != dx->rx_buf_tail) {	// write char unless buffer full
    6426:	93 81       	ldd	r25, Z+3	; 0x03
    6428:	82 81       	ldd	r24, Z+2	; 0x02
    642a:	98 17       	cp	r25, r24
    642c:	29 f0       	breq	.+10     	; 0x6438 <xio_queue_RX_char_usart+0x4e>
		dx->rx_buf[dx->rx_buf_head] = c;		// FAKE INPUT DATA
    642e:	83 81       	ldd	r24, Z+3	; 0x03
    6430:	e8 0f       	add	r30, r24
    6432:	f1 1d       	adc	r31, r1
    6434:	63 87       	std	Z+11, r22	; 0x0b
    6436:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++dx->rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6438:	83 81       	ldd	r24, Z+3	; 0x03
    643a:	8f 5f       	subi	r24, 0xFF	; 255
    643c:	83 83       	std	Z+3, r24	; 0x03
    643e:	83 81       	ldd	r24, Z+3	; 0x03
    6440:	8f 3f       	cpi	r24, 0xFF	; 255
    6442:	11 f4       	brne	.+4      	; 0x6448 <xio_queue_RX_char_usart+0x5e>
		dx->rx_buf_head = 1;
    6444:	81 e0       	ldi	r24, 0x01	; 1
    6446:	83 83       	std	Z+3, r24	; 0x03
    6448:	08 95       	ret

0000644a <xio_queue_RX_string_usart>:
/*
 * xio_queue_RX_string_usart() - fake ISR to put a string in the RX buffer
 */

void xio_queue_RX_string_usart(const uint8_t dev, const char *buf)
{
    644a:	0f 93       	push	r16
    644c:	1f 93       	push	r17
    644e:	cf 93       	push	r28
    6450:	df 93       	push	r29
    6452:	08 2f       	mov	r16, r24
    6454:	eb 01       	movw	r28, r22
    6456:	10 e0       	ldi	r17, 0x00	; 0
    6458:	03 c0       	rjmp	.+6      	; 0x6460 <xio_queue_RX_string_usart+0x16>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_queue_RX_char_usart(dev, c);
    645a:	80 2f       	mov	r24, r16
    645c:	0e 94 f5 31 	call	0x63ea	; 0x63ea <xio_queue_RX_char_usart>
void xio_queue_RX_string_usart(const uint8_t dev, const char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    6460:	fe 01       	movw	r30, r28
    6462:	e1 0f       	add	r30, r17
    6464:	f1 1d       	adc	r31, r1
    6466:	60 81       	ld	r22, Z
    6468:	1f 5f       	subi	r17, 0xFF	; 255
    646a:	66 23       	and	r22, r22
    646c:	b1 f7       	brne	.-20     	; 0x645a <xio_queue_RX_string_usart+0x10>
		xio_queue_RX_char_usart(dev, c);
	}
}
    646e:	df 91       	pop	r29
    6470:	cf 91       	pop	r28
    6472:	1f 91       	pop	r17
    6474:	0f 91       	pop	r16
    6476:	08 95       	ret

00006478 <xio_getc_usart>:
 *		- special characters such as EOL and control chars are handled by the
 *		  character helper routines. See them for behaviors
 */

int xio_getc_usart(const uint8_t dev, FILE *stream)
{
    6478:	0f 93       	push	r16
    647a:	1f 93       	push	r17
    647c:	cf 93       	push	r28
    647e:	df 93       	push	r29
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
    6480:	97 e1       	ldi	r25, 0x17	; 23
    6482:	89 9f       	mul	r24, r25
    6484:	80 01       	movw	r16, r0
    6486:	11 24       	eor	r1, r1
    6488:	05 5d       	subi	r16, 0xD5	; 213
    648a:	16 4d       	sbci	r17, 0xD6	; 214
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    648c:	48 2f       	mov	r20, r24
    648e:	50 e0       	ldi	r21, 0x00	; 0
    6490:	27 e1       	ldi	r18, 0x17	; 23
    6492:	30 e0       	ldi	r19, 0x00	; 0
    6494:	42 9f       	mul	r20, r18
    6496:	f0 01       	movw	r30, r0
    6498:	43 9f       	mul	r20, r19
    649a:	f0 0d       	add	r31, r0
    649c:	52 9f       	mul	r21, r18
    649e:	f0 0d       	add	r31, r0
    64a0:	11 24       	eor	r1, r1
    64a2:	e5 5d       	subi	r30, 0xD5	; 213
    64a4:	f6 4d       	sbci	r31, 0xD6	; 214
    64a6:	c1 89       	ldd	r28, Z+17	; 0x11
    64a8:	d2 89       	ldd	r29, Z+18	; 0x12

	gdev = dev;										// set dev number global var
    64aa:	80 93 0a 22 	sts	0x220A, r24
    64ae:	16 c0       	rjmp	.+44     	; 0x64dc <xio_getc_usart+0x64>

	while (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(d->flags)) {
    64b0:	f8 01       	movw	r30, r16
    64b2:	80 81       	ld	r24, Z
    64b4:	82 ff       	sbrs	r24, 2
    64b6:	0c c0       	rjmp	.+24     	; 0x64d0 <xio_getc_usart+0x58>
			sleep_mode();
    64b8:	80 91 48 00 	lds	r24, 0x0048
    64bc:	81 60       	ori	r24, 0x01	; 1
    64be:	80 93 48 00 	sts	0x0048, r24
    64c2:	88 95       	sleep
    64c4:	80 91 48 00 	lds	r24, 0x0048
    64c8:	8e 7f       	andi	r24, 0xFE	; 254
    64ca:	80 93 48 00 	sts	0x0048, r24
    64ce:	06 c0       	rjmp	.+12     	; 0x64dc <xio_getc_usart+0x64>
		} else {
			d->sig = XIO_SIG_EAGAIN;
    64d0:	81 e0       	ldi	r24, 0x01	; 1
    64d2:	f8 01       	movw	r30, r16
    64d4:	83 83       	std	Z+3, r24	; 0x03
    64d6:	2f ef       	ldi	r18, 0xFF	; 255
    64d8:	3f ef       	ldi	r19, 0xFF	; 255
    64da:	21 c0       	rjmp	.+66     	; 0x651e <xio_getc_usart+0xa6>
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer

	gdev = dev;										// set dev number global var

	while (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
    64dc:	9b 81       	ldd	r25, Y+3	; 0x03
    64de:	8a 81       	ldd	r24, Y+2	; 0x02
    64e0:	98 17       	cp	r25, r24
    64e2:	31 f3       	breq	.-52     	; 0x64b0 <xio_getc_usart+0x38>
		} else {
			d->sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(dx->rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
    64e4:	8a 81       	ldd	r24, Y+2	; 0x02
    64e6:	81 50       	subi	r24, 0x01	; 1
    64e8:	8a 83       	std	Y+2, r24	; 0x02
    64ea:	8a 81       	ldd	r24, Y+2	; 0x02
    64ec:	88 23       	and	r24, r24
    64ee:	11 f4       	brne	.+4      	; 0x64f4 <xio_getc_usart+0x7c>
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    64f0:	8e ef       	ldi	r24, 0xFE	; 254
    64f2:	8a 83       	std	Y+2, r24	; 0x02
	}
	en_toggle(1);								// ++++ DEBUG
    64f4:	81 e0       	ldi	r24, 0x01	; 1
    64f6:	0e 94 3c 1b 	call	0x3678	; 0x3678 <en_toggle>
	d->c = (dx->rx_buf[dx->rx_buf_tail] & 0x007F);// get char from RX buf & mask MSB
    64fa:	8a 81       	ldd	r24, Y+2	; 0x02
    64fc:	c8 0f       	add	r28, r24
    64fe:	d1 1d       	adc	r29, r1
    6500:	8b 85       	ldd	r24, Y+11	; 0x0b
    6502:	8f 77       	andi	r24, 0x7F	; 127
    6504:	f8 01       	movw	r30, r16
    6506:	84 83       	std	Z+4, r24	; 0x04
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[d->c])))());
    6508:	90 e0       	ldi	r25, 0x00	; 0
    650a:	88 0f       	add	r24, r24
    650c:	99 1f       	adc	r25, r25
    650e:	85 52       	subi	r24, 0x25	; 37
    6510:	94 4e       	sbci	r25, 0xE4	; 228
    6512:	fc 01       	movw	r30, r24
    6514:	25 91       	lpm	r18, Z+
    6516:	34 91       	lpm	r19, Z+
    6518:	f9 01       	movw	r30, r18
    651a:	19 95       	eicall
    651c:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    651e:	c9 01       	movw	r24, r18
    6520:	df 91       	pop	r29
    6522:	cf 91       	pop	r28
    6524:	1f 91       	pop	r17
    6526:	0f 91       	pop	r16
    6528:	08 95       	ret

0000652a <xio_putc_usart>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_usart(const uint8_t dev, const char c, FILE *stream)
{
    652a:	ff 92       	push	r15
    652c:	0f 93       	push	r16
    652e:	1f 93       	push	r17
    6530:	cf 93       	push	r28
    6532:	df 93       	push	r29
    6534:	f8 2e       	mov	r15, r24
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
    6536:	87 e1       	ldi	r24, 0x17	; 23
    6538:	f8 9e       	mul	r15, r24
    653a:	80 01       	movw	r16, r0
    653c:	11 24       	eor	r1, r1
    653e:	05 5d       	subi	r16, 0xD5	; 213
    6540:	16 4d       	sbci	r17, 0xD6	; 214
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6542:	2f 2d       	mov	r18, r15
    6544:	30 e0       	ldi	r19, 0x00	; 0
    6546:	87 e1       	ldi	r24, 0x17	; 23
    6548:	90 e0       	ldi	r25, 0x00	; 0
    654a:	28 9f       	mul	r18, r24
    654c:	f0 01       	movw	r30, r0
    654e:	29 9f       	mul	r18, r25
    6550:	f0 0d       	add	r31, r0
    6552:	38 9f       	mul	r19, r24
    6554:	f0 0d       	add	r31, r0
    6556:	11 24       	eor	r1, r1
    6558:	e5 5d       	subi	r30, 0xD5	; 213
    655a:	f6 4d       	sbci	r31, 0xD6	; 214
    655c:	c1 89       	ldd	r28, Z+17	; 0x11
    655e:	d2 89       	ldd	r29, Z+18	; 0x12

	if ((dx->next_tx_buf_head = (dx->tx_buf_head)-1) == 0) { // adv. head & wrap
    6560:	8d 81       	ldd	r24, Y+5	; 0x05
    6562:	81 50       	subi	r24, 0x01	; 1
    6564:	8e 83       	std	Y+6, r24	; 0x06
    6566:	88 23       	and	r24, r24
    6568:	11 f4       	brne	.+4      	; 0x656e <xio_putc_usart+0x44>
		dx->next_tx_buf_head = TX_BUFFER_SIZE-1;	 // -1 avoids the off-by-one
    656a:	8e ef       	ldi	r24, 0xFE	; 254
    656c:	8e 83       	std	Y+6, r24	; 0x06
	}
	while(dx->next_tx_buf_head == dx->tx_buf_tail) { // buf full. sleep or ret
    656e:	9e 81       	ldd	r25, Y+6	; 0x06
    6570:	16 c0       	rjmp	.+44     	; 0x659e <xio_putc_usart+0x74>
		if (BLOCKING(d->flags)) {
    6572:	d8 01       	movw	r26, r16
    6574:	8c 91       	ld	r24, X
    6576:	82 ff       	sbrs	r24, 2
    6578:	0c c0       	rjmp	.+24     	; 0x6592 <xio_putc_usart+0x68>
			sleep_mode();
    657a:	80 91 48 00 	lds	r24, 0x0048
    657e:	81 60       	ori	r24, 0x01	; 1
    6580:	80 93 48 00 	sts	0x0048, r24
    6584:	88 95       	sleep
    6586:	80 91 48 00 	lds	r24, 0x0048
    658a:	8e 7f       	andi	r24, 0xFE	; 254
    658c:	80 93 48 00 	sts	0x0048, r24
    6590:	06 c0       	rjmp	.+12     	; 0x659e <xio_putc_usart+0x74>
		} else {
			d->sig = XIO_SIG_EAGAIN;
    6592:	81 e0       	ldi	r24, 0x01	; 1
    6594:	f8 01       	movw	r30, r16
    6596:	83 83       	std	Z+3, r24	; 0x03
    6598:	2f ef       	ldi	r18, 0xFF	; 255
    659a:	3f ef       	ldi	r19, 0xFF	; 255
    659c:	5c c0       	rjmp	.+184    	; 0x6656 <xio_putc_usart+0x12c>
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer

	if ((dx->next_tx_buf_head = (dx->tx_buf_head)-1) == 0) { // adv. head & wrap
		dx->next_tx_buf_head = TX_BUFFER_SIZE-1;	 // -1 avoids the off-by-one
	}
	while(dx->next_tx_buf_head == dx->tx_buf_tail) { // buf full. sleep or ret
    659e:	8c 81       	ldd	r24, Y+4	; 0x04
    65a0:	98 17       	cp	r25, r24
    65a2:	39 f3       	breq	.-50     	; 0x6572 <xio_putc_usart+0x48>
			d->sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	dx->tx_buf_head = dx->next_tx_buf_head;			// accept next buffer head
    65a4:	9d 83       	std	Y+5, r25	; 0x05
	dx->tx_buf[dx->tx_buf_head] = c;				// ...write char to buffer
    65a6:	8d 81       	ldd	r24, Y+5	; 0x05
    65a8:	fe 01       	movw	r30, r28
    65aa:	e8 0f       	add	r30, r24
    65ac:	f1 1d       	adc	r31, r1
    65ae:	e6 5f       	subi	r30, 0xF6	; 246
    65b0:	fe 4f       	sbci	r31, 0xFE	; 254
    65b2:	60 83       	st	Z, r22

	if (CRLF(d->flags) && (c == '\n')) {			// detect LF & add CR
    65b4:	d8 01       	movw	r26, r16
    65b6:	2d 91       	ld	r18, X+
    65b8:	3c 91       	ld	r19, X
    65ba:	11 97       	sbiw	r26, 0x01	; 1
    65bc:	25 ff       	sbrs	r18, 5
    65be:	0b c0       	rjmp	.+22     	; 0x65d6 <xio_putc_usart+0xac>
    65c0:	6a 30       	cpi	r22, 0x0A	; 10
    65c2:	49 f4       	brne	.+18     	; 0x65d6 <xio_putc_usart+0xac>
		return d->x_putc('\r', stream);				// recurse
    65c4:	1b 96       	adiw	r26, 0x0b	; 11
    65c6:	ed 91       	ld	r30, X+
    65c8:	fc 91       	ld	r31, X
    65ca:	1c 97       	sbiw	r26, 0x0c	; 12
    65cc:	8d e0       	ldi	r24, 0x0D	; 13
    65ce:	ba 01       	movw	r22, r20
    65d0:	19 95       	eicall
    65d2:	9c 01       	movw	r18, r24
    65d4:	40 c0       	rjmp	.+128    	; 0x6656 <xio_putc_usart+0x12c>
	}

	// dequeue the buffer if DATA register is ready
	if (dx->usart->STATUS & 0x20) {
    65d6:	ef 81       	ldd	r30, Y+7	; 0x07
    65d8:	f8 85       	ldd	r31, Y+8	; 0x08
    65da:	81 81       	ldd	r24, Z+1	; 0x01
    65dc:	85 ff       	sbrs	r24, 5
    65de:	2a c0       	rjmp	.+84     	; 0x6634 <xio_putc_usart+0x10a>
		if (dx->tx_buf_head == dx->tx_buf_tail) {// buf might be empty if IRQ got it
    65e0:	9d 81       	ldd	r25, Y+5	; 0x05
    65e2:	8c 81       	ldd	r24, Y+4	; 0x04
    65e4:	98 17       	cp	r25, r24
    65e6:	a9 f1       	breq	.+106    	; 0x6652 <xio_putc_usart+0x128>
			return (XIO_OK);
		}
		d->flags |= XIO_FLAG_TX_MUTEX_bm;			// mutual exclusion from ISR
    65e8:	38 60       	ori	r19, 0x08	; 8
    65ea:	f8 01       	movw	r30, r16
    65ec:	20 83       	st	Z, r18
    65ee:	31 83       	std	Z+1, r19	; 0x01
		if (--(dx->tx_buf_tail) == 0) {				// advance tail & wrap if needed
    65f0:	8c 81       	ldd	r24, Y+4	; 0x04
    65f2:	81 50       	subi	r24, 0x01	; 1
    65f4:	8c 83       	std	Y+4, r24	; 0x04
    65f6:	8c 81       	ldd	r24, Y+4	; 0x04
    65f8:	88 23       	and	r24, r24
    65fa:	11 f4       	brne	.+4      	; 0x6600 <xio_putc_usart+0xd6>
			dx->tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoid off-by-one err (OBOE)
    65fc:	8e ef       	ldi	r24, 0xFE	; 254
    65fe:	8c 83       	std	Y+4, r24	; 0x04
		}
		if (dev == XIO_DEV_RS485) {					// ++++ HACK ++++
    6600:	ff 20       	and	r15, r15
    6602:	39 f4       	brne	.+14     	; 0x6612 <xio_putc_usart+0xe8>
			dx->port->OUTSET = (RS485_DE_bm | RS485_RE_bm);	// enable DE, disable RE
    6604:	e9 85       	ldd	r30, Y+9	; 0x09
    6606:	fa 85       	ldd	r31, Y+10	; 0x0a
    6608:	80 e3       	ldi	r24, 0x30	; 48
    660a:	85 83       	std	Z+5, r24	; 0x05
			en_toggle(2);							// ++++ DEBUG
    660c:	82 e0       	ldi	r24, 0x02	; 2
    660e:	0e 94 3c 1b 	call	0x3678	; 0x3678 <en_toggle>
		}
		dx->usart->DATA = dx->tx_buf[dx->tx_buf_tail];// write to TX DATA reg
    6612:	af 81       	ldd	r26, Y+7	; 0x07
    6614:	b8 85       	ldd	r27, Y+8	; 0x08
    6616:	8c 81       	ldd	r24, Y+4	; 0x04
    6618:	fe 01       	movw	r30, r28
    661a:	e8 0f       	add	r30, r24
    661c:	f1 1d       	adc	r31, r1
    661e:	e6 5f       	subi	r30, 0xF6	; 246
    6620:	fe 4f       	sbci	r31, 0xFE	; 254
    6622:	80 81       	ld	r24, Z
    6624:	8c 93       	st	X, r24
		d->flags &= ~XIO_FLAG_TX_MUTEX_bm;			// release mutual exclusion lock
    6626:	d8 01       	movw	r26, r16
    6628:	8d 91       	ld	r24, X+
    662a:	9c 91       	ld	r25, X
    662c:	11 97       	sbiw	r26, 0x01	; 1
    662e:	97 7f       	andi	r25, 0xF7	; 247
    6630:	8d 93       	st	X+, r24
    6632:	9c 93       	st	X, r25
    6634:	ef 81       	ldd	r30, Y+7	; 0x07
    6636:	f8 85       	ldd	r31, Y+8	; 0x08
	}
	// enable interrupts regardless
	if (dev == XIO_DEV_RS485) {						// ++++ HACK ++++
    6638:	ff 20       	and	r15, r15
    663a:	11 f4       	brne	.+4      	; 0x6640 <xio_putc_usart+0x116>
		dx->usart->CTRLA = CTRLA_RXON_TXON_TXCON;	// doesn't work if you just |= it
    663c:	85 e2       	ldi	r24, 0x25	; 37
    663e:	01 c0       	rjmp	.+2      	; 0x6642 <xio_putc_usart+0x118>
	} else {
		dx->usart->CTRLA = CTRLA_RXON_TXON;			// doesn't work if you just |= it
    6640:	81 e2       	ldi	r24, 0x21	; 33
    6642:	83 83       	std	Z+3, r24	; 0x03
	}
	PMIC_EnableLowLevel(); 							// enable USART TX interrupts
    6644:	80 91 a2 00 	lds	r24, 0x00A2
    6648:	81 60       	ori	r24, 0x01	; 1
    664a:	e0 ea       	ldi	r30, 0xA0	; 160
    664c:	f0 e0       	ldi	r31, 0x00	; 0
    664e:	82 83       	std	Z+2, r24	; 0x02
	sei();											// enable global interrupts
    6650:	78 94       	sei
    6652:	20 e0       	ldi	r18, 0x00	; 0
    6654:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_OK);
}
    6656:	c9 01       	movw	r24, r18
    6658:	df 91       	pop	r29
    665a:	cf 91       	pop	r28
    665c:	1f 91       	pop	r17
    665e:	0f 91       	pop	r16
    6660:	ff 90       	pop	r15
    6662:	08 95       	ret

00006664 <xio_init_usart>:
					const struct PORT_struct *port_addr,
					const uint8_t dirclr, 
					const uint8_t dirset, 
					const uint8_t outclr, 
					const uint8_t outset) 
{
    6664:	8f 92       	push	r8
    6666:	9f 92       	push	r9
    6668:	af 92       	push	r10
    666a:	bf 92       	push	r11
    666c:	cf 92       	push	r12
    666e:	df 92       	push	r13
    6670:	ef 92       	push	r14
    6672:	ff 92       	push	r15
    6674:	0f 93       	push	r16
    6676:	1f 93       	push	r17
    6678:	df 93       	push	r29
    667a:	cf 93       	push	r28
    667c:	cd b7       	in	r28, 0x3d	; 61
    667e:	de b7       	in	r29, 0x3e	; 62
    6680:	b8 2e       	mov	r11, r24
    6682:	f4 2e       	mov	r15, r20
    6684:	9c 2c       	mov	r9, r12
	// do all the bindings first (and in this order)
	struct xioDEVICE *d = &ds[dev];					// setup device struct pointer
	d->x = &us[offset];								// bind USART struct to device
    6686:	70 e0       	ldi	r23, 0x00	; 0
    6688:	89 e0       	ldi	r24, 0x09	; 9
    668a:	92 e0       	ldi	r25, 0x02	; 2
    668c:	68 9f       	mul	r22, r24
    668e:	60 01       	movw	r12, r0
    6690:	69 9f       	mul	r22, r25
    6692:	d0 0c       	add	r13, r0
    6694:	78 9f       	mul	r23, r24
    6696:	d0 0c       	add	r13, r0
    6698:	11 24       	eor	r1, r1
    669a:	8e ef       	ldi	r24, 0xFE	; 254
    669c:	92 e2       	ldi	r25, 0x22	; 34
    669e:	c8 0e       	add	r12, r24
    66a0:	d9 1e       	adc	r13, r25
    66a2:	6b 2d       	mov	r22, r11
    66a4:	70 e0       	ldi	r23, 0x00	; 0
    66a6:	87 e1       	ldi	r24, 0x17	; 23
    66a8:	90 e0       	ldi	r25, 0x00	; 0
    66aa:	68 9f       	mul	r22, r24
    66ac:	f0 01       	movw	r30, r0
    66ae:	69 9f       	mul	r22, r25
    66b0:	f0 0d       	add	r31, r0
    66b2:	78 9f       	mul	r23, r24
    66b4:	f0 0d       	add	r31, r0
    66b6:	11 24       	eor	r1, r1
    66b8:	e5 5d       	subi	r30, 0xD5	; 213
    66ba:	f6 4d       	sbci	r31, 0xD6	; 214
    66bc:	c1 8a       	std	Z+17, r12	; 0x11
    66be:	d2 8a       	std	Z+18, r13	; 0x12
	struct xioUSART *dx = (struct xioUSART *)d->x;	// setup USART struct pointer
	dx->usart = (struct USART_struct *)usart_addr;	// bind USART 
    66c0:	d6 01       	movw	r26, r12
    66c2:	17 96       	adiw	r26, 0x07	; 7
    66c4:	2d 93       	st	X+, r18
    66c6:	3c 93       	st	X, r19
    66c8:	18 97       	sbiw	r26, 0x08	; 8
	dx->port = (struct PORT_struct *)port_addr;		// bind PORT
    66ca:	19 96       	adiw	r26, 0x09	; 9
    66cc:	0d 93       	st	X+, r16
    66ce:	1c 93       	st	X, r17
    66d0:	1a 97       	sbiw	r26, 0x0a	; 10

	// set flags
	xio_setflags(dev, control);		// generic setflags - doesn't validate flags
    66d2:	8b 2d       	mov	r24, r11
    66d4:	64 2f       	mov	r22, r20
    66d6:	75 2f       	mov	r23, r21
    66d8:	0e 94 77 28 	call	0x50ee	; 0x50ee <xio_setflags>

	// setup internal RX/TX buffers
	dx->rx_buf_head = 1;			// can't use location 0 in circular buffer
    66dc:	81 e0       	ldi	r24, 0x01	; 1
    66de:	f6 01       	movw	r30, r12
    66e0:	83 83       	std	Z+3, r24	; 0x03
	dx->rx_buf_tail = 1;
    66e2:	82 83       	std	Z+2, r24	; 0x02
	dx->tx_buf_head = 1;
    66e4:	85 83       	std	Z+5, r24	; 0x05
	dx->tx_buf_tail = 1;
    66e6:	84 83       	std	Z+4, r24	; 0x04

	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    66e8:	4f 2d       	mov	r20, r15
    66ea:	4f 70       	andi	r20, 0x0F	; 15
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
    66ec:	09 f4       	brne	.+2      	; 0x66f0 <xio_init_usart+0x8c>
    66ee:	45 e0       	ldi	r20, 0x05	; 5
	dx->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    66f0:	2b 2d       	mov	r18, r11
    66f2:	30 e0       	ldi	r19, 0x00	; 0
    66f4:	87 e1       	ldi	r24, 0x17	; 23
    66f6:	90 e0       	ldi	r25, 0x00	; 0
    66f8:	28 9f       	mul	r18, r24
    66fa:	d0 01       	movw	r26, r0
    66fc:	29 9f       	mul	r18, r25
    66fe:	b0 0d       	add	r27, r0
    6700:	38 9f       	mul	r19, r24
    6702:	b0 0d       	add	r27, r0
    6704:	11 24       	eor	r1, r1
    6706:	a5 5d       	subi	r26, 0xD5	; 213
    6708:	b6 4d       	sbci	r27, 0xD6	; 214
    670a:	51 96       	adiw	r26, 0x11	; 17
    670c:	ed 91       	ld	r30, X+
    670e:	fc 91       	ld	r31, X
    6710:	52 97       	sbiw	r26, 0x12	; 18
    6712:	87 81       	ldd	r24, Z+7	; 0x07
    6714:	90 85       	ldd	r25, Z+8	; 0x08
    6716:	24 2f       	mov	r18, r20
    6718:	30 e0       	ldi	r19, 0x00	; 0
    671a:	f9 01       	movw	r30, r18
    671c:	eb 53       	subi	r30, 0x3B	; 59
    671e:	f5 4e       	sbci	r31, 0xE5	; 229
    6720:	44 91       	lpm	r20, Z+
    6722:	fc 01       	movw	r30, r24
    6724:	46 83       	std	Z+6, r20	; 0x06
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    6726:	51 96       	adiw	r26, 0x11	; 17
    6728:	ed 91       	ld	r30, X+
    672a:	fc 91       	ld	r31, X
    672c:	52 97       	sbiw	r26, 0x12	; 18
    672e:	a7 81       	ldd	r26, Z+7	; 0x07
    6730:	b0 85       	ldd	r27, Z+8	; 0x08
    6732:	20 53       	subi	r18, 0x30	; 48
    6734:	35 4e       	sbci	r19, 0xE5	; 229
    6736:	f9 01       	movw	r30, r18
    6738:	f4 90       	lpm	r15, Z+
    673a:	17 96       	adiw	r26, 0x07	; 7
    673c:	fc 92       	st	X, r15
	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
	xio_set_baud_usart(dev, baud);					// usart must be bound first

	dx->usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx
    673e:	d6 01       	movw	r26, r12
    6740:	17 96       	adiw	r26, 0x07	; 7
    6742:	ed 91       	ld	r30, X+
    6744:	fc 91       	ld	r31, X
    6746:	18 97       	sbiw	r26, 0x08	; 8
    6748:	88 e1       	ldi	r24, 0x18	; 24
    674a:	84 83       	std	Z+4, r24	; 0x04
	dx->usart->CTRLA = CTRLA_RXON_TXON;			   // enable tx and rx IRQs
    674c:	17 96       	adiw	r26, 0x07	; 7
    674e:	ed 91       	ld	r30, X+
    6750:	fc 91       	ld	r31, X
    6752:	18 97       	sbiw	r26, 0x08	; 8
    6754:	81 e2       	ldi	r24, 0x21	; 33
    6756:	83 83       	std	Z+3, r24	; 0x03

	dx->port->DIRCLR = dirclr;
    6758:	19 96       	adiw	r26, 0x09	; 9
    675a:	ed 91       	ld	r30, X+
    675c:	fc 91       	ld	r31, X
    675e:	1a 97       	sbiw	r26, 0x0a	; 10
    6760:	e2 82       	std	Z+2, r14	; 0x02
	dx->port->DIRSET = dirset;
    6762:	19 96       	adiw	r26, 0x09	; 9
    6764:	ed 91       	ld	r30, X+
    6766:	fc 91       	ld	r31, X
    6768:	1a 97       	sbiw	r26, 0x0a	; 10
    676a:	91 82       	std	Z+1, r9	; 0x01
	dx->port->OUTCLR = outclr;
    676c:	19 96       	adiw	r26, 0x09	; 9
    676e:	ed 91       	ld	r30, X+
    6770:	fc 91       	ld	r31, X
    6772:	1a 97       	sbiw	r26, 0x0a	; 10
    6774:	a6 82       	std	Z+6, r10	; 0x06
	dx->port->OUTSET = outset;
    6776:	19 96       	adiw	r26, 0x09	; 9
    6778:	ed 91       	ld	r30, X+
    677a:	fc 91       	ld	r31, X
    677c:	1a 97       	sbiw	r26, 0x0a	; 10
    677e:	85 82       	std	Z+5, r8	; 0x05
}
    6780:	cf 91       	pop	r28
    6782:	df 91       	pop	r29
    6784:	1f 91       	pop	r17
    6786:	0f 91       	pop	r16
    6788:	ff 90       	pop	r15
    678a:	ef 90       	pop	r14
    678c:	df 90       	pop	r13
    678e:	cf 90       	pop	r12
    6790:	bf 90       	pop	r11
    6792:	af 90       	pop	r10
    6794:	9f 90       	pop	r9
    6796:	8f 90       	pop	r8
    6798:	08 95       	ret

0000679a <xio_open_usb>:

#define USB ds[XIO_DEV_USB]			// device struct accessoor
#define USBu us[XIO_DEV_USB_OFFSET]	// usart extended struct accessor

/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
    679a:	80 91 55 29 	lds	r24, 0x2955
    679e:	90 91 56 29 	lds	r25, 0x2956
    67a2:	08 95       	ret

000067a4 <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)	//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    67a4:	1f 92       	push	r1
    67a6:	0f 92       	push	r0
    67a8:	0f b6       	in	r0, 0x3f	; 63
    67aa:	0f 92       	push	r0
    67ac:	0b b6       	in	r0, 0x3b	; 59
    67ae:	0f 92       	push	r0
    67b0:	11 24       	eor	r1, r1
    67b2:	8f 93       	push	r24
    67b4:	9f 93       	push	r25
    67b6:	af 93       	push	r26
    67b8:	bf 93       	push	r27
    67ba:	ef 93       	push	r30
    67bc:	ff 93       	push	r31
	if (USBu.tx_buf_head == USBu.tx_buf_tail) {	// buffer empty - disable ints
    67be:	90 91 0c 25 	lds	r25, 0x250C
    67c2:	80 91 0b 25 	lds	r24, 0x250B
    67c6:	98 17       	cp	r25, r24
    67c8:	39 f4       	brne	.+14     	; 0x67d8 <__vector_26+0x34>
		USBu.usart->CTRLA = CTRLA_RXON_TXOFF;	// won't work if you just &= it
    67ca:	e0 91 0e 25 	lds	r30, 0x250E
    67ce:	f0 91 0f 25 	lds	r31, 0x250F
    67d2:	80 e2       	ldi	r24, 0x20	; 32
    67d4:	83 83       	std	Z+3, r24	; 0x03
    67d6:	1d c0       	rjmp	.+58     	; 0x6812 <__vector_26+0x6e>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(USB.flags)) {
    67d8:	80 91 42 29 	lds	r24, 0x2942
    67dc:	90 91 43 29 	lds	r25, 0x2943
    67e0:	93 fd       	sbrc	r25, 3
    67e2:	17 c0       	rjmp	.+46     	; 0x6812 <__vector_26+0x6e>
		if (--(USBu.tx_buf_tail) == 0) {		// advance tail and wrap 
    67e4:	80 91 0b 25 	lds	r24, 0x250B
    67e8:	81 50       	subi	r24, 0x01	; 1
    67ea:	80 93 0b 25 	sts	0x250B, r24
    67ee:	80 91 0b 25 	lds	r24, 0x250B
    67f2:	88 23       	and	r24, r24
    67f4:	19 f4       	brne	.+6      	; 0x67fc <__vector_26+0x58>
			USBu.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one err (OBOE)
    67f6:	8e ef       	ldi	r24, 0xFE	; 254
    67f8:	80 93 0b 25 	sts	0x250B, r24
		}
		USBu.usart->DATA = USBu.tx_buf[USBu.tx_buf_tail]; // write to TX DATA reg
    67fc:	e0 91 0e 25 	lds	r30, 0x250E
    6800:	f0 91 0f 25 	lds	r31, 0x250F
    6804:	a0 91 0b 25 	lds	r26, 0x250B
    6808:	b0 e0       	ldi	r27, 0x00	; 0
    680a:	af 5e       	subi	r26, 0xEF	; 239
    680c:	b9 4d       	sbci	r27, 0xD9	; 217
    680e:	8c 91       	ld	r24, X
    6810:	80 83       	st	Z, r24
	}
}
    6812:	ff 91       	pop	r31
    6814:	ef 91       	pop	r30
    6816:	bf 91       	pop	r27
    6818:	af 91       	pop	r26
    681a:	9f 91       	pop	r25
    681c:	8f 91       	pop	r24
    681e:	0f 90       	pop	r0
    6820:	0b be       	out	0x3b, r0	; 59
    6822:	0f 90       	pop	r0
    6824:	0f be       	out	0x3f, r0	; 63
    6826:	0f 90       	pop	r0
    6828:	1f 90       	pop	r1
    682a:	18 95       	reti

0000682c <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    682c:	1f 92       	push	r1
    682e:	0f 92       	push	r0
    6830:	0f b6       	in	r0, 0x3f	; 63
    6832:	0f 92       	push	r0
    6834:	0b b6       	in	r0, 0x3b	; 59
    6836:	0f 92       	push	r0
    6838:	11 24       	eor	r1, r1
    683a:	2f 93       	push	r18
    683c:	3f 93       	push	r19
    683e:	4f 93       	push	r20
    6840:	5f 93       	push	r21
    6842:	6f 93       	push	r22
    6844:	7f 93       	push	r23
    6846:	8f 93       	push	r24
    6848:	9f 93       	push	r25
    684a:	af 93       	push	r26
    684c:	bf 93       	push	r27
    684e:	ef 93       	push	r30
    6850:	ff 93       	push	r31
	uint8_t c = USBu.usart->DATA;				// can only read DATA once
    6852:	e0 91 0e 25 	lds	r30, 0x250E
    6856:	f0 91 0f 25 	lds	r31, 0x250F
    685a:	20 81       	ld	r18, Z

	// trap signals - do not insert character into RX queue
	if (c == ETX) {								// trap ^c signal
    685c:	23 30       	cpi	r18, 0x03	; 3
    685e:	31 f4       	brne	.+12     	; 0x686c <__vector_25+0x40>
		USB.sig = XIO_SIG_KILL;					// set signal value
    6860:	84 e0       	ldi	r24, 0x04	; 4
    6862:	80 93 45 29 	sts	0x2945, r24
		signal_etx();							// call app-specific signal handler
    6866:	0e 94 1b 30 	call	0x6036	; 0x6036 <signal_etx>
    686a:	25 c0       	rjmp	.+74     	; 0x68b6 <__vector_25+0x8a>
		return;
	}

	// normal character path
	if ((--USBu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    686c:	80 91 0a 25 	lds	r24, 0x250A
    6870:	81 50       	subi	r24, 0x01	; 1
    6872:	80 93 0a 25 	sts	0x250A, r24
    6876:	80 91 0a 25 	lds	r24, 0x250A
    687a:	88 23       	and	r24, r24
    687c:	19 f4       	brne	.+6      	; 0x6884 <__vector_25+0x58>
		USBu.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    687e:	8e ef       	ldi	r24, 0xFE	; 254
    6880:	80 93 0a 25 	sts	0x250A, r24
	}
	if (USBu.rx_buf_head != USBu.rx_buf_tail) {	// write char unless buffer full
    6884:	90 91 0a 25 	lds	r25, 0x250A
    6888:	80 91 09 25 	lds	r24, 0x2509
    688c:	98 17       	cp	r25, r24
    688e:	39 f0       	breq	.+14     	; 0x689e <__vector_25+0x72>
		USBu.rx_buf[USBu.rx_buf_head] = c;
    6890:	e0 91 0a 25 	lds	r30, 0x250A
    6894:	f0 e0       	ldi	r31, 0x00	; 0
    6896:	ee 5e       	subi	r30, 0xEE	; 238
    6898:	fa 4d       	sbci	r31, 0xDA	; 218
    689a:	20 83       	st	Z, r18
    689c:	0c c0       	rjmp	.+24     	; 0x68b6 <__vector_25+0x8a>
		return;
	}
	// buffer-full handling
	if ((++USBu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    689e:	80 91 0a 25 	lds	r24, 0x250A
    68a2:	8f 5f       	subi	r24, 0xFF	; 255
    68a4:	80 93 0a 25 	sts	0x250A, r24
    68a8:	80 91 0a 25 	lds	r24, 0x250A
    68ac:	8f 3f       	cpi	r24, 0xFF	; 255
    68ae:	19 f4       	brne	.+6      	; 0x68b6 <__vector_25+0x8a>
		USBu.rx_buf_head = 1;
    68b0:	81 e0       	ldi	r24, 0x01	; 1
    68b2:	80 93 0a 25 	sts	0x250A, r24
	}
	// activate flow control here or before it gets to this level
}
    68b6:	ff 91       	pop	r31
    68b8:	ef 91       	pop	r30
    68ba:	bf 91       	pop	r27
    68bc:	af 91       	pop	r26
    68be:	9f 91       	pop	r25
    68c0:	8f 91       	pop	r24
    68c2:	7f 91       	pop	r23
    68c4:	6f 91       	pop	r22
    68c6:	5f 91       	pop	r21
    68c8:	4f 91       	pop	r20
    68ca:	3f 91       	pop	r19
    68cc:	2f 91       	pop	r18
    68ce:	0f 90       	pop	r0
    68d0:	0b be       	out	0x3b, r0	; 59
    68d2:	0f 90       	pop	r0
    68d4:	0f be       	out	0x3f, r0	; 63
    68d6:	0f 90       	pop	r0
    68d8:	1f 90       	pop	r1
    68da:	18 95       	reti

000068dc <xio_init_usb>:
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
void xio_queue_RX_string_usb(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_USB, buf);}

void xio_init_usb()	// USB inits
{
    68dc:	8f 92       	push	r8
    68de:	af 92       	push	r10
    68e0:	cf 92       	push	r12
    68e2:	ef 92       	push	r14
    68e4:	ff 92       	push	r15
    68e6:	0f 93       	push	r16
    68e8:	1f 93       	push	r17
	xio_init_dev(XIO_DEV_USB, xio_open_usb, xio_setflags_usb, xio_putc_usb, xio_getc_usb, xio_readln_usb);
    68ea:	81 e0       	ldi	r24, 0x01	; 1
    68ec:	6d ec       	ldi	r22, 0xCD	; 205
    68ee:	73 e3       	ldi	r23, 0x33	; 51
    68f0:	4a eb       	ldi	r20, 0xBA	; 186
    68f2:	54 e3       	ldi	r21, 0x34	; 52
    68f4:	23 eb       	ldi	r18, 0xB3	; 179
    68f6:	34 e3       	ldi	r19, 0x34	; 52
    68f8:	0e ea       	ldi	r16, 0xAE	; 174
    68fa:	14 e3       	ldi	r17, 0x34	; 52
    68fc:	f7 ea       	ldi	r31, 0xA7	; 167
    68fe:	ef 2e       	mov	r14, r31
    6900:	f4 e3       	ldi	r31, 0x34	; 52
    6902:	ff 2e       	mov	r15, r31
    6904:	0e 94 60 29 	call	0x52c0	; 0x52c0 <xio_init_dev>
	xio_init_usart(XIO_DEV_USB, XIO_DEV_USB_OFFSET, USB_INIT_bm, &USB_USART, &USB_PORT, USB_DIRCLR_bm, USB_DIRSET_bm, USB_OUTCLR_bm, USB_OUTSET_bm);
    6908:	81 e0       	ldi	r24, 0x01	; 1
    690a:	61 e0       	ldi	r22, 0x01	; 1
    690c:	45 e7       	ldi	r20, 0x75	; 117
    690e:	55 e5       	ldi	r21, 0x55	; 85
    6910:	20 ea       	ldi	r18, 0xA0	; 160
    6912:	38 e0       	ldi	r19, 0x08	; 8
    6914:	00 e4       	ldi	r16, 0x40	; 64
    6916:	16 e0       	ldi	r17, 0x06	; 6
    6918:	e5 e0       	ldi	r30, 0x05	; 5
    691a:	ee 2e       	mov	r14, r30
    691c:	7a e0       	ldi	r23, 0x0A	; 10
    691e:	c7 2e       	mov	r12, r23
    6920:	aa 24       	eor	r10, r10
    6922:	9a e0       	ldi	r25, 0x0A	; 10
    6924:	89 2e       	mov	r8, r25
    6926:	0e 94 32 33 	call	0x6664	; 0x6664 <xio_init_usart>
}
    692a:	1f 91       	pop	r17
    692c:	0f 91       	pop	r16
    692e:	ff 90       	pop	r15
    6930:	ef 90       	pop	r14
    6932:	cf 90       	pop	r12
    6934:	af 90       	pop	r10
    6936:	8f 90       	pop	r8
    6938:	08 95       	ret

0000693a <xio_queue_RX_string_usb>:
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
void xio_queue_RX_string_usb(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_USB, buf);}
    693a:	bc 01       	movw	r22, r24
    693c:	81 e0       	ldi	r24, 0x01	; 1
    693e:	0e 94 25 32 	call	0x644a	; 0x644a <xio_queue_RX_string_usart>
    6942:	08 95       	ret

00006944 <xio_queue_RX_char_usb>:
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
    6944:	68 2f       	mov	r22, r24
    6946:	81 e0       	ldi	r24, 0x01	; 1
    6948:	0e 94 f5 31 	call	0x63ea	; 0x63ea <xio_queue_RX_char_usart>
    694c:	08 95       	ret

0000694e <xio_readln_usb>:
/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
    694e:	9c 01       	movw	r18, r24
    6950:	46 2f       	mov	r20, r22
    6952:	81 e0       	ldi	r24, 0x01	; 1
    6954:	b9 01       	movw	r22, r18
    6956:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <xio_readln_usart>
    695a:	08 95       	ret

0000695c <xio_getc_usb>:

/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
    695c:	bc 01       	movw	r22, r24
    695e:	81 e0       	ldi	r24, 0x01	; 1
    6960:	0e 94 3c 32 	call	0x6478	; 0x6478 <xio_getc_usart>
    6964:	08 95       	ret

00006966 <xio_putc_usb>:
#define USBu us[XIO_DEV_USB_OFFSET]	// usart extended struct accessor

/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
    6966:	98 2f       	mov	r25, r24
    6968:	ab 01       	movw	r20, r22
    696a:	81 e0       	ldi	r24, 0x01	; 1
    696c:	69 2f       	mov	r22, r25
    696e:	0e 94 95 32 	call	0x652a	; 0x652a <xio_putc_usart>
    6972:	08 95       	ret

00006974 <xio_setflags_usb>:
#define USB ds[XIO_DEV_USB]			// device struct accessoor
#define USBu us[XIO_DEV_USB_OFFSET]	// usart extended struct accessor

/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
    6974:	bc 01       	movw	r22, r24
    6976:	81 e0       	ldi	r24, 0x01	; 1
    6978:	0e 94 77 28 	call	0x50ee	; 0x50ee <xio_setflags>
    697c:	08 95       	ret

0000697e <xio_open_rs485>:

#define RS ds[XIO_DEV_RS485]			// device struct accessoor
#define RSu us[XIO_DEV_RS485_OFFSET]	// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
    697e:	80 91 3e 29 	lds	r24, 0x293E
    6982:	90 91 3f 29 	lds	r25, 0x293F
    6986:	08 95       	ret

00006988 <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC1 data register empty
{
    6988:	1f 92       	push	r1
    698a:	0f 92       	push	r0
    698c:	0f b6       	in	r0, 0x3f	; 63
    698e:	0f 92       	push	r0
    6990:	0b b6       	in	r0, 0x3b	; 59
    6992:	0f 92       	push	r0
    6994:	11 24       	eor	r1, r1
    6996:	8f 93       	push	r24
    6998:	9f 93       	push	r25
    699a:	af 93       	push	r26
    699c:	bf 93       	push	r27
    699e:	ef 93       	push	r30
    69a0:	ff 93       	push	r31
	if (RSu.tx_buf_head == RSu.tx_buf_tail) {	// buffer empty - disable ints (Note)
    69a2:	90 91 03 23 	lds	r25, 0x2303
    69a6:	80 91 02 23 	lds	r24, 0x2302
    69aa:	98 17       	cp	r25, r24
    69ac:	39 f4       	brne	.+14     	; 0x69bc <__vector_29+0x34>
		RSu.usart->CTRLA = CTRLA_RXON_TXOFF_TXCON;	// doesn't work if you just &= it
    69ae:	e0 91 05 23 	lds	r30, 0x2305
    69b2:	f0 91 06 23 	lds	r31, 0x2306
    69b6:	84 e2       	ldi	r24, 0x24	; 36
    69b8:	83 83       	std	Z+3, r24	; 0x03
    69ba:	23 c0       	rjmp	.+70     	; 0x6a02 <__vector_29+0x7a>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(RS.flags)) {
    69bc:	80 91 2b 29 	lds	r24, 0x292B
    69c0:	90 91 2c 29 	lds	r25, 0x292C
    69c4:	93 fd       	sbrc	r25, 3
    69c6:	1d c0       	rjmp	.+58     	; 0x6a02 <__vector_29+0x7a>
		if (--(RSu.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    69c8:	80 91 02 23 	lds	r24, 0x2302
    69cc:	81 50       	subi	r24, 0x01	; 1
    69ce:	80 93 02 23 	sts	0x2302, r24
    69d2:	80 91 02 23 	lds	r24, 0x2302
    69d6:	88 23       	and	r24, r24
    69d8:	19 f4       	brne	.+6      	; 0x69e0 <__vector_29+0x58>
			RSu.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    69da:	8e ef       	ldi	r24, 0xFE	; 254
    69dc:	80 93 02 23 	sts	0x2302, r24
		}
		RSu.port->OUTSET = (RS485_DE_bm | RS485_RE_bm);	// enable DE (TX, active hi)
    69e0:	e0 91 07 23 	lds	r30, 0x2307
    69e4:	f0 91 08 23 	lds	r31, 0x2308
    69e8:	80 e3       	ldi	r24, 0x30	; 48
    69ea:	85 83       	std	Z+5, r24	; 0x05
														// disable RE (RX, active lo)
		RSu.usart->DATA = RSu.tx_buf[RSu.tx_buf_tail];	// write char to TX DATA reg
    69ec:	a0 91 05 23 	lds	r26, 0x2305
    69f0:	b0 91 06 23 	lds	r27, 0x2306
    69f4:	e0 91 02 23 	lds	r30, 0x2302
    69f8:	f0 e0       	ldi	r31, 0x00	; 0
    69fa:	e8 5f       	subi	r30, 0xF8	; 248
    69fc:	fb 4d       	sbci	r31, 0xDB	; 219
    69fe:	80 81       	ld	r24, Z
    6a00:	8c 93       	st	X, r24
	}
}
    6a02:	ff 91       	pop	r31
    6a04:	ef 91       	pop	r30
    6a06:	bf 91       	pop	r27
    6a08:	af 91       	pop	r26
    6a0a:	9f 91       	pop	r25
    6a0c:	8f 91       	pop	r24
    6a0e:	0f 90       	pop	r0
    6a10:	0b be       	out	0x3b, r0	; 59
    6a12:	0f 90       	pop	r0
    6a14:	0f be       	out	0x3f, r0	; 63
    6a16:	0f 90       	pop	r0
    6a18:	1f 90       	pop	r1
    6a1a:	18 95       	reti

00006a1c <__vector_30>:

/* Note: Finding a buffer empty condition on the first byte of a string is common 
 * as the TX byte is often written by the task itself */

ISR(RS485_TXC_ISR_vect)		// ISR(USARTC1_TXC_vect) // USARTC1 transmission complete
{
    6a1c:	1f 92       	push	r1
    6a1e:	0f 92       	push	r0
    6a20:	0f b6       	in	r0, 0x3f	; 63
    6a22:	0f 92       	push	r0
    6a24:	0b b6       	in	r0, 0x3b	; 59
    6a26:	0f 92       	push	r0
    6a28:	11 24       	eor	r1, r1
    6a2a:	8f 93       	push	r24
    6a2c:	ef 93       	push	r30
    6a2e:	ff 93       	push	r31
	RSu.port->OUTCLR = (RS485_DE_bm | RS485_RE_bm);	// disable DE (TX), enable RE (RX)
    6a30:	e0 91 07 23 	lds	r30, 0x2307
    6a34:	f0 91 08 23 	lds	r31, 0x2308
    6a38:	80 e3       	ldi	r24, 0x30	; 48
    6a3a:	86 83       	std	Z+6, r24	; 0x06
}
    6a3c:	ff 91       	pop	r31
    6a3e:	ef 91       	pop	r30
    6a40:	8f 91       	pop	r24
    6a42:	0f 90       	pop	r0
    6a44:	0b be       	out	0x3b, r0	; 59
    6a46:	0f 90       	pop	r0
    6a48:	0f be       	out	0x3f, r0	; 63
    6a4a:	0f 90       	pop	r0
    6a4c:	1f 90       	pop	r1
    6a4e:	18 95       	reti

00006a50 <__vector_28>:
/* 
 * RS485_RX_ISR - RS485 receiver interrupt (RX)
 */

ISR(RS485_RX_ISR_vect)	//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    6a50:	1f 92       	push	r1
    6a52:	0f 92       	push	r0
    6a54:	0f b6       	in	r0, 0x3f	; 63
    6a56:	0f 92       	push	r0
    6a58:	0b b6       	in	r0, 0x3b	; 59
    6a5a:	0f 92       	push	r0
    6a5c:	11 24       	eor	r1, r1
    6a5e:	2f 93       	push	r18
    6a60:	3f 93       	push	r19
    6a62:	4f 93       	push	r20
    6a64:	5f 93       	push	r21
    6a66:	6f 93       	push	r22
    6a68:	7f 93       	push	r23
    6a6a:	8f 93       	push	r24
    6a6c:	9f 93       	push	r25
    6a6e:	af 93       	push	r26
    6a70:	bf 93       	push	r27
    6a72:	ef 93       	push	r30
    6a74:	ff 93       	push	r31
	uint8_t c = RSu.usart->DATA;				// can only read DATA once
    6a76:	e0 91 05 23 	lds	r30, 0x2305
    6a7a:	f0 91 06 23 	lds	r31, 0x2306
    6a7e:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6a80:	23 30       	cpi	r18, 0x03	; 3
    6a82:	31 f4       	brne	.+12     	; 0x6a90 <__vector_28+0x40>
		RS.sig = XIO_SIG_KILL;					// set signal value
    6a84:	84 e0       	ldi	r24, 0x04	; 4
    6a86:	80 93 2e 29 	sts	0x292E, r24
		signal_etx();							// call app-specific signal handler
    6a8a:	0e 94 1b 30 	call	0x6036	; 0x6036 <signal_etx>
    6a8e:	25 c0       	rjmp	.+74     	; 0x6ada <__vector_28+0x8a>
		return;
	}

	// normal path
	if ((--RSu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    6a90:	80 91 01 23 	lds	r24, 0x2301
    6a94:	81 50       	subi	r24, 0x01	; 1
    6a96:	80 93 01 23 	sts	0x2301, r24
    6a9a:	80 91 01 23 	lds	r24, 0x2301
    6a9e:	88 23       	and	r24, r24
    6aa0:	19 f4       	brne	.+6      	; 0x6aa8 <__vector_28+0x58>
		RSu.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6aa2:	8e ef       	ldi	r24, 0xFE	; 254
    6aa4:	80 93 01 23 	sts	0x2301, r24
	}
	if (RSu.rx_buf_head != RSu.rx_buf_tail) {	// write char unless buffer full
    6aa8:	90 91 01 23 	lds	r25, 0x2301
    6aac:	80 91 00 23 	lds	r24, 0x2300
    6ab0:	98 17       	cp	r25, r24
    6ab2:	39 f0       	breq	.+14     	; 0x6ac2 <__vector_28+0x72>
		RSu.rx_buf[RSu.rx_buf_head] = c;		// (= USARTC1.DATA;)
    6ab4:	e0 91 01 23 	lds	r30, 0x2301
    6ab8:	f0 e0       	ldi	r31, 0x00	; 0
    6aba:	e2 50       	subi	r30, 0x02	; 2
    6abc:	fd 4d       	sbci	r31, 0xDD	; 221
    6abe:	23 87       	std	Z+11, r18	; 0x0b
    6ac0:	0c c0       	rjmp	.+24     	; 0x6ada <__vector_28+0x8a>
		return;
	}
	// buffer-full handling
	if ((++RSu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6ac2:	80 91 01 23 	lds	r24, 0x2301
    6ac6:	8f 5f       	subi	r24, 0xFF	; 255
    6ac8:	80 93 01 23 	sts	0x2301, r24
    6acc:	80 91 01 23 	lds	r24, 0x2301
    6ad0:	8f 3f       	cpi	r24, 0xFF	; 255
    6ad2:	19 f4       	brne	.+6      	; 0x6ada <__vector_28+0x8a>
		RSu.rx_buf_head = 1;
    6ad4:	81 e0       	ldi	r24, 0x01	; 1
    6ad6:	80 93 01 23 	sts	0x2301, r24
	}
	// activate flow control here or before it gets to this level
}
    6ada:	ff 91       	pop	r31
    6adc:	ef 91       	pop	r30
    6ade:	bf 91       	pop	r27
    6ae0:	af 91       	pop	r26
    6ae2:	9f 91       	pop	r25
    6ae4:	8f 91       	pop	r24
    6ae6:	7f 91       	pop	r23
    6ae8:	6f 91       	pop	r22
    6aea:	5f 91       	pop	r21
    6aec:	4f 91       	pop	r20
    6aee:	3f 91       	pop	r19
    6af0:	2f 91       	pop	r18
    6af2:	0f 90       	pop	r0
    6af4:	0b be       	out	0x3b, r0	; 59
    6af6:	0f 90       	pop	r0
    6af8:	0f be       	out	0x3f, r0	; 63
    6afa:	0f 90       	pop	r0
    6afc:	1f 90       	pop	r1
    6afe:	18 95       	reti

00006b00 <xio_init_rs485>:
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
void xio_queue_RX_string_rs485(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_RS485, buf);}

void xio_init_rs485()	// RS485 init
{
    6b00:	8f 92       	push	r8
    6b02:	af 92       	push	r10
    6b04:	cf 92       	push	r12
    6b06:	ef 92       	push	r14
    6b08:	ff 92       	push	r15
    6b0a:	0f 93       	push	r16
    6b0c:	1f 93       	push	r17
	xio_init_dev(XIO_DEV_RS485, xio_open_rs485, xio_setflags_rs485, xio_putc_rs485, xio_getc_rs485, xio_readln_rs485);
    6b0e:	80 e0       	ldi	r24, 0x00	; 0
    6b10:	6f eb       	ldi	r22, 0xBF	; 191
    6b12:	74 e3       	ldi	r23, 0x34	; 52
    6b14:	4d ec       	ldi	r20, 0xCD	; 205
    6b16:	55 e3       	ldi	r21, 0x35	; 53
    6b18:	26 ec       	ldi	r18, 0xC6	; 198
    6b1a:	35 e3       	ldi	r19, 0x35	; 53
    6b1c:	01 ec       	ldi	r16, 0xC1	; 193
    6b1e:	15 e3       	ldi	r17, 0x35	; 53
    6b20:	aa eb       	ldi	r26, 0xBA	; 186
    6b22:	ea 2e       	mov	r14, r26
    6b24:	a5 e3       	ldi	r26, 0x35	; 53
    6b26:	fa 2e       	mov	r15, r26
    6b28:	0e 94 60 29 	call	0x52c0	; 0x52c0 <xio_init_dev>
	xio_init_usart(XIO_DEV_RS485, XIO_DEV_RS485_OFFSET, RS485_INIT_bm, &RS485_USART, &RS485_PORT, RS485_DIRCLR_bm, RS485_DIRSET_bm, RS485_OUTCLR_bm, RS485_OUTSET_bm);
    6b2c:	80 e0       	ldi	r24, 0x00	; 0
    6b2e:	60 e0       	ldi	r22, 0x00	; 0
    6b30:	45 e7       	ldi	r20, 0x75	; 117
    6b32:	55 e1       	ldi	r21, 0x15	; 21
    6b34:	20 eb       	ldi	r18, 0xB0	; 176
    6b36:	38 e0       	ldi	r19, 0x08	; 8
    6b38:	00 e4       	ldi	r16, 0x40	; 64
    6b3a:	16 e0       	ldi	r17, 0x06	; 6
    6b3c:	f0 e4       	ldi	r31, 0x40	; 64
    6b3e:	ef 2e       	mov	r14, r31
    6b40:	e0 eb       	ldi	r30, 0xB0	; 176
    6b42:	ce 2e       	mov	r12, r30
    6b44:	70 e3       	ldi	r23, 0x30	; 48
    6b46:	a7 2e       	mov	r10, r23
    6b48:	90 e8       	ldi	r25, 0x80	; 128
    6b4a:	89 2e       	mov	r8, r25
    6b4c:	0e 94 32 33 	call	0x6664	; 0x6664 <xio_init_usart>
}
    6b50:	1f 91       	pop	r17
    6b52:	0f 91       	pop	r16
    6b54:	ff 90       	pop	r15
    6b56:	ef 90       	pop	r14
    6b58:	cf 90       	pop	r12
    6b5a:	af 90       	pop	r10
    6b5c:	8f 90       	pop	r8
    6b5e:	08 95       	ret

00006b60 <xio_queue_RX_string_rs485>:
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
void xio_queue_RX_string_rs485(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_RS485, buf);}
    6b60:	bc 01       	movw	r22, r24
    6b62:	80 e0       	ldi	r24, 0x00	; 0
    6b64:	0e 94 25 32 	call	0x644a	; 0x644a <xio_queue_RX_string_usart>
    6b68:	08 95       	ret

00006b6a <xio_queue_RX_char_rs485>:
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
    6b6a:	68 2f       	mov	r22, r24
    6b6c:	80 e0       	ldi	r24, 0x00	; 0
    6b6e:	0e 94 f5 31 	call	0x63ea	; 0x63ea <xio_queue_RX_char_usart>
    6b72:	08 95       	ret

00006b74 <xio_readln_rs485>:
/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
    6b74:	9c 01       	movw	r18, r24
    6b76:	46 2f       	mov	r20, r22
    6b78:	80 e0       	ldi	r24, 0x00	; 0
    6b7a:	b9 01       	movw	r22, r18
    6b7c:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <xio_readln_usart>
    6b80:	08 95       	ret

00006b82 <xio_getc_rs485>:

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
    6b82:	bc 01       	movw	r22, r24
    6b84:	80 e0       	ldi	r24, 0x00	; 0
    6b86:	0e 94 3c 32 	call	0x6478	; 0x6478 <xio_getc_usart>
    6b8a:	08 95       	ret

00006b8c <xio_putc_rs485>:
#define RSu us[XIO_DEV_RS485_OFFSET]	// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
    6b8c:	98 2f       	mov	r25, r24
    6b8e:	ab 01       	movw	r20, r22
    6b90:	80 e0       	ldi	r24, 0x00	; 0
    6b92:	69 2f       	mov	r22, r25
    6b94:	0e 94 95 32 	call	0x652a	; 0x652a <xio_putc_usart>
    6b98:	08 95       	ret

00006b9a <xio_setflags_rs485>:
#define RS ds[XIO_DEV_RS485]			// device struct accessoor
#define RSu us[XIO_DEV_RS485_OFFSET]	// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
    6b9a:	bc 01       	movw	r22, r24
    6b9c:	80 e0       	ldi	r24, 0x00	; 0
    6b9e:	0e 94 77 28 	call	0x50ee	; 0x50ee <xio_setflags>
    6ba2:	08 95       	ret

00006ba4 <xio_open_pgm>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

struct __file * xio_open_pgm(const prog_char *addr)
{
	PGM.flags &= XIO_FLAG_RESET_gm;			// reset flag signaling bits
    6ba4:	20 91 70 29 	lds	r18, 0x2970
    6ba8:	30 91 71 29 	lds	r19, 0x2971
    6bac:	3f 70       	andi	r19, 0x0F	; 15
    6bae:	20 93 70 29 	sts	0x2970, r18
    6bb2:	30 93 71 29 	sts	0x2971, r19
	PGM.sig = 0;							// reset signal
    6bb6:	10 92 73 29 	sts	0x2973, r1
	PGMf.pgmbase_P = (PROGMEM char *)addr;	// might want to range check this
    6bba:	80 93 1d 29 	sts	0x291D, r24
    6bbe:	90 93 1e 29 	sts	0x291E, r25
	PGMf.len = 0;							// initialize buffer pointer
    6bc2:	10 92 1b 29 	sts	0x291B, r1
    6bc6:	10 92 1c 29 	sts	0x291C, r1
	return(PGM.fdev);							// return pointer to the fdev stream
}
    6bca:	80 91 83 29 	lds	r24, 0x2983
    6bce:	90 91 84 29 	lds	r25, 0x2984
    6bd2:	08 95       	ret

00006bd4 <xio_putc_pgm>:
 */

int xio_putc_pgm(const char c, struct __file *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    6bd4:	8f ef       	ldi	r24, 0xFF	; 255
    6bd6:	9f ef       	ldi	r25, 0xFF	; 255
    6bd8:	08 95       	ret

00006bda <xio_readln_pgm>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_pgm(char *buf, const uint8_t size)
{
    6bda:	9c 01       	movw	r18, r24
	if (!(PGMf.pgmbase_P)) {					// return error if no file is open
    6bdc:	80 91 1d 29 	lds	r24, 0x291D
    6be0:	90 91 1e 29 	lds	r25, 0x291E
    6be4:	89 2b       	or	r24, r25
    6be6:	19 f4       	brne	.+6      	; 0x6bee <xio_readln_pgm+0x14>
    6be8:	26 e0       	ldi	r18, 0x06	; 6
    6bea:	30 e0       	ldi	r19, 0x00	; 0
    6bec:	1b c0       	rjmp	.+54     	; 0x6c24 <xio_readln_pgm+0x4a>
		return (XIO_FILE_NOT_OPEN);
	}
	PGM.sig = XIO_SIG_OK;						// initialize signal
    6bee:	10 92 73 29 	sts	0x2973, r1
	if (fgets(buf, size, PGM.fdev) == NULL) {
    6bf2:	40 91 83 29 	lds	r20, 0x2983
    6bf6:	50 91 84 29 	lds	r21, 0x2984
    6bfa:	c9 01       	movw	r24, r18
    6bfc:	70 e0       	ldi	r23, 0x00	; 0
    6bfe:	0e 94 2b 49 	call	0x9256	; 0x9256 <fgets>
    6c02:	89 2b       	or	r24, r25
    6c04:	19 f0       	breq	.+6      	; 0x6c0c <xio_readln_pgm+0x32>
    6c06:	20 e0       	ldi	r18, 0x00	; 0
    6c08:	30 e0       	ldi	r19, 0x00	; 0
    6c0a:	0c c0       	rjmp	.+24     	; 0x6c24 <xio_readln_pgm+0x4a>
		PGMf.pgmbase_P = NULL;
    6c0c:	10 92 1d 29 	sts	0x291D, r1
    6c10:	10 92 1e 29 	sts	0x291E, r1
		clearerr(PGM.fdev);
    6c14:	80 91 83 29 	lds	r24, 0x2983
    6c18:	90 91 84 29 	lds	r25, 0x2984
    6c1c:	0e 94 26 49 	call	0x924c	; 0x924c <clearerr>
    6c20:	25 e0       	ldi	r18, 0x05	; 5
    6c22:	30 e0       	ldi	r19, 0x00	; 0
		return (XIO_EOF);
	}
	return (XIO_OK);
}
    6c24:	c9 01       	movw	r24, r18
    6c26:	08 95       	ret

00006c28 <xio_getc_pgm>:
 */

int xio_getc_pgm(struct __file *stream)
{

	if (PGM.flags & XIO_FLAG_EOF_bm) {
    6c28:	20 91 70 29 	lds	r18, 0x2970
    6c2c:	30 91 71 29 	lds	r19, 0x2971
    6c30:	35 ff       	sbrs	r19, 5
    6c32:	06 c0       	rjmp	.+12     	; 0x6c40 <xio_getc_pgm+0x18>
		PGM.sig = XIO_SIG_EOF;
    6c34:	83 e0       	ldi	r24, 0x03	; 3
    6c36:	80 93 73 29 	sts	0x2973, r24
    6c3a:	2e ef       	ldi	r18, 0xFE	; 254
    6c3c:	3f ef       	ldi	r19, 0xFF	; 255
    6c3e:	3e c0       	rjmp	.+124    	; 0x6cbc <xio_getc_pgm+0x94>
		return (_FDEV_EOF);
	}
	if ((PGM.c = pgm_read_byte(&PGMf.pgmbase_P[PGMf.len])) == NUL) {
    6c40:	80 91 1b 29 	lds	r24, 0x291B
    6c44:	90 91 1c 29 	lds	r25, 0x291C
    6c48:	e0 91 1d 29 	lds	r30, 0x291D
    6c4c:	f0 91 1e 29 	lds	r31, 0x291E
    6c50:	e8 0f       	add	r30, r24
    6c52:	f9 1f       	adc	r31, r25
    6c54:	e4 91       	lpm	r30, Z+
    6c56:	e0 93 74 29 	sts	0x2974, r30
    6c5a:	ee 23       	and	r30, r30
    6c5c:	29 f4       	brne	.+10     	; 0x6c68 <xio_getc_pgm+0x40>
		PGM.flags |= XIO_FLAG_EOF_bm;
    6c5e:	30 62       	ori	r19, 0x20	; 32
    6c60:	20 93 70 29 	sts	0x2970, r18
    6c64:	30 93 71 29 	sts	0x2971, r19
	}
	++PGMf.len;
    6c68:	01 96       	adiw	r24, 0x01	; 1
    6c6a:	80 93 1b 29 	sts	0x291B, r24
    6c6e:	90 93 1c 29 	sts	0x291C, r25
	if (!LINEMODE(PGM.flags)) {			// processing is simple if not LINEMODE
    6c72:	90 91 70 29 	lds	r25, 0x2970
    6c76:	96 fd       	sbrc	r25, 6
    6c78:	03 c0       	rjmp	.+6      	; 0x6c80 <xio_getc_pgm+0x58>
		if (ECHO(PGM.flags)) {
    6c7a:	94 ff       	sbrs	r25, 4
    6c7c:	1b c0       	rjmp	.+54     	; 0x6cb4 <xio_getc_pgm+0x8c>
    6c7e:	11 c0       	rjmp	.+34     	; 0x6ca2 <xio_getc_pgm+0x7a>
			putchar(PGM.c);
		}
		return (PGM.c);
	}
	// now do the LINEMODE stuff
	if (PGM.c == NUL) {					// perform newline substitutions
    6c80:	80 91 74 29 	lds	r24, 0x2974
    6c84:	88 23       	and	r24, r24
    6c86:	31 f0       	breq	.+12     	; 0x6c94 <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if (PGM.c == '\r') {
    6c88:	8d 30       	cpi	r24, 0x0D	; 13
    6c8a:	21 f0       	breq	.+8      	; 0x6c94 <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if ((SEMICOLONS(PGM.flags)) && (PGM.c == ';')) {
    6c8c:	97 ff       	sbrs	r25, 7
    6c8e:	05 c0       	rjmp	.+10     	; 0x6c9a <xio_getc_pgm+0x72>
    6c90:	8b 33       	cpi	r24, 0x3B	; 59
    6c92:	19 f4       	brne	.+6      	; 0x6c9a <xio_getc_pgm+0x72>
		PGM.c = '\n';
    6c94:	8a e0       	ldi	r24, 0x0A	; 10
    6c96:	80 93 74 29 	sts	0x2974, r24
	}
	if (ECHO(PGM.flags)) {
    6c9a:	80 91 70 29 	lds	r24, 0x2970
    6c9e:	84 ff       	sbrs	r24, 4
    6ca0:	09 c0       	rjmp	.+18     	; 0x6cb4 <xio_getc_pgm+0x8c>
		putchar(PGM.c);
    6ca2:	60 91 c3 2a 	lds	r22, 0x2AC3
    6ca6:	70 91 c4 2a 	lds	r23, 0x2AC4
    6caa:	80 91 74 29 	lds	r24, 0x2974
    6cae:	90 e0       	ldi	r25, 0x00	; 0
    6cb0:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
	}
	return (PGM.c);
    6cb4:	80 91 74 29 	lds	r24, 0x2974
    6cb8:	28 2f       	mov	r18, r24
    6cba:	30 e0       	ldi	r19, 0x00	; 0
}
    6cbc:	c9 01       	movw	r24, r18
    6cbe:	08 95       	ret

00006cc0 <xio_setflags_pgm>:
/*
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
    6cc0:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_PGM, control);
    6cc2:	83 e0       	ldi	r24, 0x03	; 3
    6cc4:	0e 94 77 28 	call	0x50ee	; 0x50ee <xio_setflags>
	return (XIO_OK);									// for now it's always OK
}
    6cc8:	80 e0       	ldi	r24, 0x00	; 0
    6cca:	90 e0       	ldi	r25, 0x00	; 0
    6ccc:	08 95       	ret

00006cce <xio_init_file>:
 *	xio_init_file() - generic init for file devices
 */
void xio_init_file(const uint8_t dev, const uint8_t offset, const uint16_t control)
{
	// bind file struct to extended device parameters
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
    6cce:	90 e0       	ldi	r25, 0x00	; 0
    6cd0:	27 e1       	ldi	r18, 0x17	; 23
    6cd2:	30 e0       	ldi	r19, 0x00	; 0
    6cd4:	82 9f       	mul	r24, r18
    6cd6:	f0 01       	movw	r30, r0
    6cd8:	83 9f       	mul	r24, r19
    6cda:	f0 0d       	add	r31, r0
    6cdc:	92 9f       	mul	r25, r18
    6cde:	f0 0d       	add	r31, r0
    6ce0:	11 24       	eor	r1, r1
    6ce2:	e5 5d       	subi	r30, 0xD5	; 213
    6ce4:	f6 4d       	sbci	r31, 0xD6	; 214
    6ce6:	86 e0       	ldi	r24, 0x06	; 6
    6ce8:	68 9f       	mul	r22, r24
    6cea:	b0 01       	movw	r22, r0
    6cec:	11 24       	eor	r1, r1
    6cee:	67 5e       	subi	r22, 0xE7	; 231
    6cf0:	76 4d       	sbci	r23, 0xD6	; 214
    6cf2:	61 8b       	std	Z+17, r22	; 0x11
    6cf4:	72 8b       	std	Z+18, r23	; 0x12
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
	xio_setflags(XIO_DEV_PGM, control);
    6cf6:	83 e0       	ldi	r24, 0x03	; 3
    6cf8:	ba 01       	movw	r22, r20
    6cfa:	0e 94 77 28 	call	0x50ee	; 0x50ee <xio_setflags>
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
	// might be useful to sanity check the control bits before calling set flags
	//	- RD and BLOCK are mandatory
	// 	- WR and NOBLOCK are restricted
	xio_setflags_pgm(control);
}
    6cfe:	08 95       	ret

00006d00 <xio_init_pgm>:

/* 
 *	xio_init_pgm() - initialize and set controls for program memory device 
 */
void xio_init_pgm()
{
    6d00:	ef 92       	push	r14
    6d02:	ff 92       	push	r15
    6d04:	0f 93       	push	r16
    6d06:	1f 93       	push	r17
	// Program memory file device setup
	xio_init_dev(XIO_DEV_PGM, xio_open_pgm, xio_setflags_pgm, xio_putc_pgm, xio_getc_pgm, xio_readln_pgm);
    6d08:	83 e0       	ldi	r24, 0x03	; 3
    6d0a:	62 ed       	ldi	r22, 0xD2	; 210
    6d0c:	75 e3       	ldi	r23, 0x35	; 53
    6d0e:	40 e6       	ldi	r20, 0x60	; 96
    6d10:	56 e3       	ldi	r21, 0x36	; 54
    6d12:	2a ee       	ldi	r18, 0xEA	; 234
    6d14:	35 e3       	ldi	r19, 0x35	; 53
    6d16:	04 e1       	ldi	r16, 0x14	; 20
    6d18:	16 e3       	ldi	r17, 0x36	; 54
    6d1a:	9d ee       	ldi	r25, 0xED	; 237
    6d1c:	e9 2e       	mov	r14, r25
    6d1e:	95 e3       	ldi	r25, 0x35	; 53
    6d20:	f9 2e       	mov	r15, r25
    6d22:	0e 94 60 29 	call	0x52c0	; 0x52c0 <xio_init_dev>
 *	xio_init_file() - generic init for file devices
 */
void xio_init_file(const uint8_t dev, const uint8_t offset, const uint16_t control)
{
	// bind file struct to extended device parameters
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
    6d26:	89 e1       	ldi	r24, 0x19	; 25
    6d28:	99 e2       	ldi	r25, 0x29	; 41
    6d2a:	80 93 81 29 	sts	0x2981, r24
    6d2e:	90 93 82 29 	sts	0x2982, r25
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
	xio_setflags(XIO_DEV_PGM, control);
    6d32:	83 e0       	ldi	r24, 0x03	; 3
    6d34:	60 e5       	ldi	r22, 0x50	; 80
    6d36:	75 e1       	ldi	r23, 0x15	; 21
    6d38:	0e 94 77 28 	call	0x50ee	; 0x50ee <xio_setflags>
void xio_init_pgm()
{
	// Program memory file device setup
	xio_init_dev(XIO_DEV_PGM, xio_open_pgm, xio_setflags_pgm, xio_putc_pgm, xio_getc_pgm, xio_readln_pgm);
	xio_init_file(XIO_DEV_PGM, XIO_DEV_PGM_OFFSET, PGM_INIT_bm);
}
    6d3c:	1f 91       	pop	r17
    6d3e:	0f 91       	pop	r16
    6d40:	ff 90       	pop	r15
    6d42:	ef 90       	pop	r14
    6d44:	08 95       	ret

00006d46 <net_init>:
 */

void net_init() 
{
	
}
    6d46:	08 95       	ret

00006d48 <tg_repeater>:
void tg_repeater()
{
	char c;

	while (TRUE) {
		c = xio_getc(XIO_DEV_USB);		// blocking read
    6d48:	81 e0       	ldi	r24, 0x01	; 1
    6d4a:	0e 94 2a 29 	call	0x5254	; 0x5254 <xio_getc>
    6d4e:	68 2f       	mov	r22, r24
		xio_putc(XIO_DEV_RS485, c);		// transfer to RS485 port
    6d50:	80 e0       	ldi	r24, 0x00	; 0
    6d52:	0e 94 0d 29 	call	0x521a	; 0x521a <xio_putc>
    6d56:	f8 cf       	rjmp	.-16     	; 0x6d48 <tg_repeater>

00006d58 <__lshrdi3>:
    6d58:	ef 92       	push	r14
    6d5a:	ff 92       	push	r15
    6d5c:	0f 93       	push	r16
    6d5e:	df 93       	push	r29
    6d60:	cf 93       	push	r28
    6d62:	cd b7       	in	r28, 0x3d	; 61
    6d64:	de b7       	in	r29, 0x3e	; 62
    6d66:	60 97       	sbiw	r28, 0x10	; 16
    6d68:	cd bf       	out	0x3d, r28	; 61
    6d6a:	de bf       	out	0x3e, r29	; 62
    6d6c:	a8 2f       	mov	r26, r24
    6d6e:	00 23       	and	r16, r16
    6d70:	09 f4       	brne	.+2      	; 0x6d74 <__lshrdi3+0x1c>
    6d72:	61 c0       	rjmp	.+194    	; 0x6e36 <__lshrdi3+0xde>
    6d74:	7e 01       	movw	r14, r28
    6d76:	08 94       	sec
    6d78:	e1 1c       	adc	r14, r1
    6d7a:	f1 1c       	adc	r15, r1
    6d7c:	88 e0       	ldi	r24, 0x08	; 8
    6d7e:	f7 01       	movw	r30, r14
    6d80:	11 92       	st	Z+, r1
    6d82:	8a 95       	dec	r24
    6d84:	e9 f7       	brne	.-6      	; 0x6d80 <__lshrdi3+0x28>
    6d86:	29 83       	std	Y+1, r18	; 0x01
    6d88:	3a 83       	std	Y+2, r19	; 0x02
    6d8a:	4b 83       	std	Y+3, r20	; 0x03
    6d8c:	5c 83       	std	Y+4, r21	; 0x04
    6d8e:	6d 83       	std	Y+5, r22	; 0x05
    6d90:	7e 83       	std	Y+6, r23	; 0x06
    6d92:	af 83       	std	Y+7, r26	; 0x07
    6d94:	98 87       	std	Y+8, r25	; 0x08
    6d96:	80 e2       	ldi	r24, 0x20	; 32
    6d98:	80 1b       	sub	r24, r16
    6d9a:	e8 2f       	mov	r30, r24
    6d9c:	ff 27       	eor	r31, r31
    6d9e:	e7 fd       	sbrc	r30, 7
    6da0:	f0 95       	com	r31
    6da2:	4d 81       	ldd	r20, Y+5	; 0x05
    6da4:	5e 81       	ldd	r21, Y+6	; 0x06
    6da6:	6f 81       	ldd	r22, Y+7	; 0x07
    6da8:	78 85       	ldd	r23, Y+8	; 0x08
    6daa:	18 16       	cp	r1, r24
    6dac:	84 f0       	brlt	.+32     	; 0x6dce <__lshrdi3+0x76>
    6dae:	1d 86       	std	Y+13, r1	; 0x0d
    6db0:	1e 86       	std	Y+14, r1	; 0x0e
    6db2:	1f 86       	std	Y+15, r1	; 0x0f
    6db4:	18 8a       	std	Y+16, r1	; 0x10
    6db6:	88 27       	eor	r24, r24
    6db8:	99 27       	eor	r25, r25
    6dba:	8e 1b       	sub	r24, r30
    6dbc:	9f 0b       	sbc	r25, r31
    6dbe:	04 c0       	rjmp	.+8      	; 0x6dc8 <__lshrdi3+0x70>
    6dc0:	76 95       	lsr	r23
    6dc2:	67 95       	ror	r22
    6dc4:	57 95       	ror	r21
    6dc6:	47 95       	ror	r20
    6dc8:	8a 95       	dec	r24
    6dca:	d2 f7       	brpl	.-12     	; 0x6dc0 <__lshrdi3+0x68>
    6dcc:	28 c0       	rjmp	.+80     	; 0x6e1e <__lshrdi3+0xc6>
    6dce:	20 2f       	mov	r18, r16
    6dd0:	33 27       	eor	r19, r19
    6dd2:	27 fd       	sbrc	r18, 7
    6dd4:	30 95       	com	r19
    6dd6:	db 01       	movw	r26, r22
    6dd8:	ca 01       	movw	r24, r20
    6dda:	02 2e       	mov	r0, r18
    6ddc:	04 c0       	rjmp	.+8      	; 0x6de6 <__lshrdi3+0x8e>
    6dde:	b6 95       	lsr	r27
    6de0:	a7 95       	ror	r26
    6de2:	97 95       	ror	r25
    6de4:	87 95       	ror	r24
    6de6:	0a 94       	dec	r0
    6de8:	d2 f7       	brpl	.-12     	; 0x6dde <__lshrdi3+0x86>
    6dea:	8d 87       	std	Y+13, r24	; 0x0d
    6dec:	9e 87       	std	Y+14, r25	; 0x0e
    6dee:	af 87       	std	Y+15, r26	; 0x0f
    6df0:	b8 8b       	std	Y+16, r27	; 0x10
    6df2:	04 c0       	rjmp	.+8      	; 0x6dfc <__lshrdi3+0xa4>
    6df4:	44 0f       	add	r20, r20
    6df6:	55 1f       	adc	r21, r21
    6df8:	66 1f       	adc	r22, r22
    6dfa:	77 1f       	adc	r23, r23
    6dfc:	ea 95       	dec	r30
    6dfe:	d2 f7       	brpl	.-12     	; 0x6df4 <__lshrdi3+0x9c>
    6e00:	89 81       	ldd	r24, Y+1	; 0x01
    6e02:	9a 81       	ldd	r25, Y+2	; 0x02
    6e04:	ab 81       	ldd	r26, Y+3	; 0x03
    6e06:	bc 81       	ldd	r27, Y+4	; 0x04
    6e08:	04 c0       	rjmp	.+8      	; 0x6e12 <__lshrdi3+0xba>
    6e0a:	b6 95       	lsr	r27
    6e0c:	a7 95       	ror	r26
    6e0e:	97 95       	ror	r25
    6e10:	87 95       	ror	r24
    6e12:	2a 95       	dec	r18
    6e14:	d2 f7       	brpl	.-12     	; 0x6e0a <__lshrdi3+0xb2>
    6e16:	48 2b       	or	r20, r24
    6e18:	59 2b       	or	r21, r25
    6e1a:	6a 2b       	or	r22, r26
    6e1c:	7b 2b       	or	r23, r27
    6e1e:	49 87       	std	Y+9, r20	; 0x09
    6e20:	5a 87       	std	Y+10, r21	; 0x0a
    6e22:	6b 87       	std	Y+11, r22	; 0x0b
    6e24:	7c 87       	std	Y+12, r23	; 0x0c
    6e26:	29 85       	ldd	r18, Y+9	; 0x09
    6e28:	3a 85       	ldd	r19, Y+10	; 0x0a
    6e2a:	4b 85       	ldd	r20, Y+11	; 0x0b
    6e2c:	5c 85       	ldd	r21, Y+12	; 0x0c
    6e2e:	6d 85       	ldd	r22, Y+13	; 0x0d
    6e30:	7e 85       	ldd	r23, Y+14	; 0x0e
    6e32:	af 85       	ldd	r26, Y+15	; 0x0f
    6e34:	98 89       	ldd	r25, Y+16	; 0x10
    6e36:	8a 2f       	mov	r24, r26
    6e38:	60 96       	adiw	r28, 0x10	; 16
    6e3a:	cd bf       	out	0x3d, r28	; 61
    6e3c:	de bf       	out	0x3e, r29	; 62
    6e3e:	cf 91       	pop	r28
    6e40:	df 91       	pop	r29
    6e42:	0f 91       	pop	r16
    6e44:	ff 90       	pop	r15
    6e46:	ef 90       	pop	r14
    6e48:	08 95       	ret

00006e4a <__ashldi3>:
    6e4a:	ef 92       	push	r14
    6e4c:	ff 92       	push	r15
    6e4e:	0f 93       	push	r16
    6e50:	df 93       	push	r29
    6e52:	cf 93       	push	r28
    6e54:	cd b7       	in	r28, 0x3d	; 61
    6e56:	de b7       	in	r29, 0x3e	; 62
    6e58:	60 97       	sbiw	r28, 0x10	; 16
    6e5a:	cd bf       	out	0x3d, r28	; 61
    6e5c:	de bf       	out	0x3e, r29	; 62
    6e5e:	a8 2f       	mov	r26, r24
    6e60:	00 23       	and	r16, r16
    6e62:	09 f4       	brne	.+2      	; 0x6e66 <__ashldi3+0x1c>
    6e64:	61 c0       	rjmp	.+194    	; 0x6f28 <__ashldi3+0xde>
    6e66:	7e 01       	movw	r14, r28
    6e68:	08 94       	sec
    6e6a:	e1 1c       	adc	r14, r1
    6e6c:	f1 1c       	adc	r15, r1
    6e6e:	88 e0       	ldi	r24, 0x08	; 8
    6e70:	f7 01       	movw	r30, r14
    6e72:	11 92       	st	Z+, r1
    6e74:	8a 95       	dec	r24
    6e76:	e9 f7       	brne	.-6      	; 0x6e72 <__ashldi3+0x28>
    6e78:	29 83       	std	Y+1, r18	; 0x01
    6e7a:	3a 83       	std	Y+2, r19	; 0x02
    6e7c:	4b 83       	std	Y+3, r20	; 0x03
    6e7e:	5c 83       	std	Y+4, r21	; 0x04
    6e80:	6d 83       	std	Y+5, r22	; 0x05
    6e82:	7e 83       	std	Y+6, r23	; 0x06
    6e84:	af 83       	std	Y+7, r26	; 0x07
    6e86:	98 87       	std	Y+8, r25	; 0x08
    6e88:	80 e2       	ldi	r24, 0x20	; 32
    6e8a:	80 1b       	sub	r24, r16
    6e8c:	e8 2f       	mov	r30, r24
    6e8e:	ff 27       	eor	r31, r31
    6e90:	e7 fd       	sbrc	r30, 7
    6e92:	f0 95       	com	r31
    6e94:	49 81       	ldd	r20, Y+1	; 0x01
    6e96:	5a 81       	ldd	r21, Y+2	; 0x02
    6e98:	6b 81       	ldd	r22, Y+3	; 0x03
    6e9a:	7c 81       	ldd	r23, Y+4	; 0x04
    6e9c:	18 16       	cp	r1, r24
    6e9e:	84 f0       	brlt	.+32     	; 0x6ec0 <__ashldi3+0x76>
    6ea0:	19 86       	std	Y+9, r1	; 0x09
    6ea2:	1a 86       	std	Y+10, r1	; 0x0a
    6ea4:	1b 86       	std	Y+11, r1	; 0x0b
    6ea6:	1c 86       	std	Y+12, r1	; 0x0c
    6ea8:	88 27       	eor	r24, r24
    6eaa:	99 27       	eor	r25, r25
    6eac:	8e 1b       	sub	r24, r30
    6eae:	9f 0b       	sbc	r25, r31
    6eb0:	04 c0       	rjmp	.+8      	; 0x6eba <__ashldi3+0x70>
    6eb2:	44 0f       	add	r20, r20
    6eb4:	55 1f       	adc	r21, r21
    6eb6:	66 1f       	adc	r22, r22
    6eb8:	77 1f       	adc	r23, r23
    6eba:	8a 95       	dec	r24
    6ebc:	d2 f7       	brpl	.-12     	; 0x6eb2 <__ashldi3+0x68>
    6ebe:	28 c0       	rjmp	.+80     	; 0x6f10 <__ashldi3+0xc6>
    6ec0:	20 2f       	mov	r18, r16
    6ec2:	33 27       	eor	r19, r19
    6ec4:	27 fd       	sbrc	r18, 7
    6ec6:	30 95       	com	r19
    6ec8:	db 01       	movw	r26, r22
    6eca:	ca 01       	movw	r24, r20
    6ecc:	02 2e       	mov	r0, r18
    6ece:	04 c0       	rjmp	.+8      	; 0x6ed8 <__ashldi3+0x8e>
    6ed0:	88 0f       	add	r24, r24
    6ed2:	99 1f       	adc	r25, r25
    6ed4:	aa 1f       	adc	r26, r26
    6ed6:	bb 1f       	adc	r27, r27
    6ed8:	0a 94       	dec	r0
    6eda:	d2 f7       	brpl	.-12     	; 0x6ed0 <__ashldi3+0x86>
    6edc:	89 87       	std	Y+9, r24	; 0x09
    6ede:	9a 87       	std	Y+10, r25	; 0x0a
    6ee0:	ab 87       	std	Y+11, r26	; 0x0b
    6ee2:	bc 87       	std	Y+12, r27	; 0x0c
    6ee4:	04 c0       	rjmp	.+8      	; 0x6eee <__ashldi3+0xa4>
    6ee6:	76 95       	lsr	r23
    6ee8:	67 95       	ror	r22
    6eea:	57 95       	ror	r21
    6eec:	47 95       	ror	r20
    6eee:	ea 95       	dec	r30
    6ef0:	d2 f7       	brpl	.-12     	; 0x6ee6 <__ashldi3+0x9c>
    6ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    6ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    6ef6:	af 81       	ldd	r26, Y+7	; 0x07
    6ef8:	b8 85       	ldd	r27, Y+8	; 0x08
    6efa:	04 c0       	rjmp	.+8      	; 0x6f04 <__ashldi3+0xba>
    6efc:	88 0f       	add	r24, r24
    6efe:	99 1f       	adc	r25, r25
    6f00:	aa 1f       	adc	r26, r26
    6f02:	bb 1f       	adc	r27, r27
    6f04:	2a 95       	dec	r18
    6f06:	d2 f7       	brpl	.-12     	; 0x6efc <__ashldi3+0xb2>
    6f08:	48 2b       	or	r20, r24
    6f0a:	59 2b       	or	r21, r25
    6f0c:	6a 2b       	or	r22, r26
    6f0e:	7b 2b       	or	r23, r27
    6f10:	4d 87       	std	Y+13, r20	; 0x0d
    6f12:	5e 87       	std	Y+14, r21	; 0x0e
    6f14:	6f 87       	std	Y+15, r22	; 0x0f
    6f16:	78 8b       	std	Y+16, r23	; 0x10
    6f18:	29 85       	ldd	r18, Y+9	; 0x09
    6f1a:	3a 85       	ldd	r19, Y+10	; 0x0a
    6f1c:	4b 85       	ldd	r20, Y+11	; 0x0b
    6f1e:	5c 85       	ldd	r21, Y+12	; 0x0c
    6f20:	6d 85       	ldd	r22, Y+13	; 0x0d
    6f22:	7e 85       	ldd	r23, Y+14	; 0x0e
    6f24:	af 85       	ldd	r26, Y+15	; 0x0f
    6f26:	98 89       	ldd	r25, Y+16	; 0x10
    6f28:	8a 2f       	mov	r24, r26
    6f2a:	60 96       	adiw	r28, 0x10	; 16
    6f2c:	cd bf       	out	0x3d, r28	; 61
    6f2e:	de bf       	out	0x3e, r29	; 62
    6f30:	cf 91       	pop	r28
    6f32:	df 91       	pop	r29
    6f34:	0f 91       	pop	r16
    6f36:	ff 90       	pop	r15
    6f38:	ef 90       	pop	r14
    6f3a:	08 95       	ret

00006f3c <__udivdi3>:
    6f3c:	ae e5       	ldi	r26, 0x5E	; 94
    6f3e:	b0 e0       	ldi	r27, 0x00	; 0
    6f40:	e4 ea       	ldi	r30, 0xA4	; 164
    6f42:	f7 e3       	ldi	r31, 0x37	; 55
    6f44:	0c 94 31 46 	jmp	0x8c62	; 0x8c62 <__prologue_saves__>
    6f48:	a8 e0       	ldi	r26, 0x08	; 8
    6f4a:	4e 01       	movw	r8, r28
    6f4c:	08 94       	sec
    6f4e:	81 1c       	adc	r8, r1
    6f50:	91 1c       	adc	r9, r1
    6f52:	f4 01       	movw	r30, r8
    6f54:	6a 2e       	mov	r6, r26
    6f56:	11 92       	st	Z+, r1
    6f58:	6a 94       	dec	r6
    6f5a:	e9 f7       	brne	.-6      	; 0x6f56 <__udivdi3+0x1a>
    6f5c:	29 83       	std	Y+1, r18	; 0x01
    6f5e:	3a 83       	std	Y+2, r19	; 0x02
    6f60:	4b 83       	std	Y+3, r20	; 0x03
    6f62:	5c 83       	std	Y+4, r21	; 0x04
    6f64:	6d 83       	std	Y+5, r22	; 0x05
    6f66:	7e 83       	std	Y+6, r23	; 0x06
    6f68:	8f 83       	std	Y+7, r24	; 0x07
    6f6a:	98 87       	std	Y+8, r25	; 0x08
    6f6c:	ce 01       	movw	r24, r28
    6f6e:	09 96       	adiw	r24, 0x09	; 9
    6f70:	fc 01       	movw	r30, r24
    6f72:	11 92       	st	Z+, r1
    6f74:	aa 95       	dec	r26
    6f76:	e9 f7       	brne	.-6      	; 0x6f72 <__udivdi3+0x36>
    6f78:	a9 86       	std	Y+9, r10	; 0x09
    6f7a:	ba 86       	std	Y+10, r11	; 0x0a
    6f7c:	cb 86       	std	Y+11, r12	; 0x0b
    6f7e:	dc 86       	std	Y+12, r13	; 0x0c
    6f80:	ed 86       	std	Y+13, r14	; 0x0d
    6f82:	fe 86       	std	Y+14, r15	; 0x0e
    6f84:	0f 87       	std	Y+15, r16	; 0x0f
    6f86:	18 8b       	std	Y+16, r17	; 0x10
    6f88:	29 84       	ldd	r2, Y+9	; 0x09
    6f8a:	3a 84       	ldd	r3, Y+10	; 0x0a
    6f8c:	4b 84       	ldd	r4, Y+11	; 0x0b
    6f8e:	5c 84       	ldd	r5, Y+12	; 0x0c
    6f90:	ed 84       	ldd	r14, Y+13	; 0x0d
    6f92:	fe 84       	ldd	r15, Y+14	; 0x0e
    6f94:	0f 85       	ldd	r16, Y+15	; 0x0f
    6f96:	18 89       	ldd	r17, Y+16	; 0x10
    6f98:	69 80       	ldd	r6, Y+1	; 0x01
    6f9a:	7a 80       	ldd	r7, Y+2	; 0x02
    6f9c:	8b 80       	ldd	r8, Y+3	; 0x03
    6f9e:	9c 80       	ldd	r9, Y+4	; 0x04
    6fa0:	6d a6       	std	Y+45, r6	; 0x2d
    6fa2:	7e a6       	std	Y+46, r7	; 0x2e
    6fa4:	8f a6       	std	Y+47, r8	; 0x2f
    6fa6:	98 aa       	std	Y+48, r9	; 0x30
    6fa8:	6d 80       	ldd	r6, Y+5	; 0x05
    6faa:	7e 80       	ldd	r7, Y+6	; 0x06
    6fac:	8f 80       	ldd	r8, Y+7	; 0x07
    6fae:	98 84       	ldd	r9, Y+8	; 0x08
    6fb0:	e1 14       	cp	r14, r1
    6fb2:	f1 04       	cpc	r15, r1
    6fb4:	01 05       	cpc	r16, r1
    6fb6:	11 05       	cpc	r17, r1
    6fb8:	09 f0       	breq	.+2      	; 0x6fbc <__udivdi3+0x80>
    6fba:	b3 c3       	rjmp	.+1894   	; 0x7722 <__udivdi3+0x7e6>
    6fbc:	62 14       	cp	r6, r2
    6fbe:	73 04       	cpc	r7, r3
    6fc0:	84 04       	cpc	r8, r4
    6fc2:	95 04       	cpc	r9, r5
    6fc4:	08 f0       	brcs	.+2      	; 0x6fc8 <__udivdi3+0x8c>
    6fc6:	3d c1       	rjmp	.+634    	; 0x7242 <__udivdi3+0x306>
    6fc8:	00 e0       	ldi	r16, 0x00	; 0
    6fca:	20 16       	cp	r2, r16
    6fcc:	00 e0       	ldi	r16, 0x00	; 0
    6fce:	30 06       	cpc	r3, r16
    6fd0:	01 e0       	ldi	r16, 0x01	; 1
    6fd2:	40 06       	cpc	r4, r16
    6fd4:	00 e0       	ldi	r16, 0x00	; 0
    6fd6:	50 06       	cpc	r5, r16
    6fd8:	88 f4       	brcc	.+34     	; 0x6ffc <__udivdi3+0xc0>
    6fda:	1f ef       	ldi	r17, 0xFF	; 255
    6fdc:	21 16       	cp	r2, r17
    6fde:	31 04       	cpc	r3, r1
    6fe0:	41 04       	cpc	r4, r1
    6fe2:	51 04       	cpc	r5, r1
    6fe4:	39 f0       	breq	.+14     	; 0x6ff4 <__udivdi3+0xb8>
    6fe6:	30 f0       	brcs	.+12     	; 0x6ff4 <__udivdi3+0xb8>
    6fe8:	48 e0       	ldi	r20, 0x08	; 8
    6fea:	e4 2e       	mov	r14, r20
    6fec:	f1 2c       	mov	r15, r1
    6fee:	01 2d       	mov	r16, r1
    6ff0:	11 2d       	mov	r17, r1
    6ff2:	18 c0       	rjmp	.+48     	; 0x7024 <__udivdi3+0xe8>
    6ff4:	ee 24       	eor	r14, r14
    6ff6:	ff 24       	eor	r15, r15
    6ff8:	87 01       	movw	r16, r14
    6ffa:	14 c0       	rjmp	.+40     	; 0x7024 <__udivdi3+0xe8>
    6ffc:	20 e0       	ldi	r18, 0x00	; 0
    6ffe:	22 16       	cp	r2, r18
    7000:	20 e0       	ldi	r18, 0x00	; 0
    7002:	32 06       	cpc	r3, r18
    7004:	20 e0       	ldi	r18, 0x00	; 0
    7006:	42 06       	cpc	r4, r18
    7008:	21 e0       	ldi	r18, 0x01	; 1
    700a:	52 06       	cpc	r5, r18
    700c:	30 f0       	brcs	.+12     	; 0x701a <__udivdi3+0xde>
    700e:	38 e1       	ldi	r19, 0x18	; 24
    7010:	e3 2e       	mov	r14, r19
    7012:	f1 2c       	mov	r15, r1
    7014:	01 2d       	mov	r16, r1
    7016:	11 2d       	mov	r17, r1
    7018:	05 c0       	rjmp	.+10     	; 0x7024 <__udivdi3+0xe8>
    701a:	20 e1       	ldi	r18, 0x10	; 16
    701c:	e2 2e       	mov	r14, r18
    701e:	f1 2c       	mov	r15, r1
    7020:	01 2d       	mov	r16, r1
    7022:	11 2d       	mov	r17, r1
    7024:	d2 01       	movw	r26, r4
    7026:	c1 01       	movw	r24, r2
    7028:	0e 2c       	mov	r0, r14
    702a:	04 c0       	rjmp	.+8      	; 0x7034 <__udivdi3+0xf8>
    702c:	b6 95       	lsr	r27
    702e:	a7 95       	ror	r26
    7030:	97 95       	ror	r25
    7032:	87 95       	ror	r24
    7034:	0a 94       	dec	r0
    7036:	d2 f7       	brpl	.-12     	; 0x702c <__udivdi3+0xf0>
    7038:	81 5f       	subi	r24, 0xF1	; 241
    703a:	9f 4d       	sbci	r25, 0xDF	; 223
    703c:	dc 01       	movw	r26, r24
    703e:	2c 91       	ld	r18, X
    7040:	80 e2       	ldi	r24, 0x20	; 32
    7042:	90 e0       	ldi	r25, 0x00	; 0
    7044:	a0 e0       	ldi	r26, 0x00	; 0
    7046:	b0 e0       	ldi	r27, 0x00	; 0
    7048:	8e 19       	sub	r24, r14
    704a:	9f 09       	sbc	r25, r15
    704c:	a0 0b       	sbc	r26, r16
    704e:	b1 0b       	sbc	r27, r17
    7050:	7c 01       	movw	r14, r24
    7052:	8d 01       	movw	r16, r26
    7054:	e2 1a       	sub	r14, r18
    7056:	f1 08       	sbc	r15, r1
    7058:	01 09       	sbc	r16, r1
    705a:	11 09       	sbc	r17, r1
    705c:	e1 14       	cp	r14, r1
    705e:	f1 04       	cpc	r15, r1
    7060:	01 05       	cpc	r16, r1
    7062:	11 05       	cpc	r17, r1
    7064:	a1 f1       	breq	.+104    	; 0x70ce <__udivdi3+0x192>
    7066:	0e 2c       	mov	r0, r14
    7068:	04 c0       	rjmp	.+8      	; 0x7072 <__udivdi3+0x136>
    706a:	22 0c       	add	r2, r2
    706c:	33 1c       	adc	r3, r3
    706e:	44 1c       	adc	r4, r4
    7070:	55 1c       	adc	r5, r5
    7072:	0a 94       	dec	r0
    7074:	d2 f7       	brpl	.-12     	; 0x706a <__udivdi3+0x12e>
    7076:	a4 01       	movw	r20, r8
    7078:	93 01       	movw	r18, r6
    707a:	0e 2c       	mov	r0, r14
    707c:	04 c0       	rjmp	.+8      	; 0x7086 <__udivdi3+0x14a>
    707e:	22 0f       	add	r18, r18
    7080:	33 1f       	adc	r19, r19
    7082:	44 1f       	adc	r20, r20
    7084:	55 1f       	adc	r21, r21
    7086:	0a 94       	dec	r0
    7088:	d2 f7       	brpl	.-12     	; 0x707e <__udivdi3+0x142>
    708a:	80 e2       	ldi	r24, 0x20	; 32
    708c:	90 e0       	ldi	r25, 0x00	; 0
    708e:	8e 19       	sub	r24, r14
    7090:	9f 09       	sbc	r25, r15
    7092:	6d a4       	ldd	r6, Y+45	; 0x2d
    7094:	7e a4       	ldd	r7, Y+46	; 0x2e
    7096:	8f a4       	ldd	r8, Y+47	; 0x2f
    7098:	98 a8       	ldd	r9, Y+48	; 0x30
    709a:	04 c0       	rjmp	.+8      	; 0x70a4 <__udivdi3+0x168>
    709c:	96 94       	lsr	r9
    709e:	87 94       	ror	r8
    70a0:	77 94       	ror	r7
    70a2:	67 94       	ror	r6
    70a4:	8a 95       	dec	r24
    70a6:	d2 f7       	brpl	.-12     	; 0x709c <__udivdi3+0x160>
    70a8:	62 2a       	or	r6, r18
    70aa:	73 2a       	or	r7, r19
    70ac:	84 2a       	or	r8, r20
    70ae:	95 2a       	or	r9, r21
    70b0:	ad a4       	ldd	r10, Y+45	; 0x2d
    70b2:	be a4       	ldd	r11, Y+46	; 0x2e
    70b4:	cf a4       	ldd	r12, Y+47	; 0x2f
    70b6:	d8 a8       	ldd	r13, Y+48	; 0x30
    70b8:	04 c0       	rjmp	.+8      	; 0x70c2 <__udivdi3+0x186>
    70ba:	aa 0c       	add	r10, r10
    70bc:	bb 1c       	adc	r11, r11
    70be:	cc 1c       	adc	r12, r12
    70c0:	dd 1c       	adc	r13, r13
    70c2:	ea 94       	dec	r14
    70c4:	d2 f7       	brpl	.-12     	; 0x70ba <__udivdi3+0x17e>
    70c6:	ad a6       	std	Y+45, r10	; 0x2d
    70c8:	be a6       	std	Y+46, r11	; 0x2e
    70ca:	cf a6       	std	Y+47, r12	; 0x2f
    70cc:	d8 aa       	std	Y+48, r13	; 0x30
    70ce:	62 01       	movw	r12, r4
    70d0:	ee 24       	eor	r14, r14
    70d2:	ff 24       	eor	r15, r15
    70d4:	cd aa       	std	Y+53, r12	; 0x35
    70d6:	de aa       	std	Y+54, r13	; 0x36
    70d8:	ef aa       	std	Y+55, r14	; 0x37
    70da:	f8 ae       	std	Y+56, r15	; 0x38
    70dc:	92 01       	movw	r18, r4
    70de:	81 01       	movw	r16, r2
    70e0:	20 70       	andi	r18, 0x00	; 0
    70e2:	30 70       	andi	r19, 0x00	; 0
    70e4:	09 af       	std	Y+57, r16	; 0x39
    70e6:	1a af       	std	Y+58, r17	; 0x3a
    70e8:	2b af       	std	Y+59, r18	; 0x3b
    70ea:	3c af       	std	Y+60, r19	; 0x3c
    70ec:	c4 01       	movw	r24, r8
    70ee:	b3 01       	movw	r22, r6
    70f0:	a7 01       	movw	r20, r14
    70f2:	96 01       	movw	r18, r12
    70f4:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    70f8:	7b 01       	movw	r14, r22
    70fa:	8c 01       	movw	r16, r24
    70fc:	c4 01       	movw	r24, r8
    70fe:	b3 01       	movw	r22, r6
    7100:	2d a9       	ldd	r18, Y+53	; 0x35
    7102:	3e a9       	ldd	r19, Y+54	; 0x36
    7104:	4f a9       	ldd	r20, Y+55	; 0x37
    7106:	58 ad       	ldd	r21, Y+56	; 0x38
    7108:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    710c:	c9 01       	movw	r24, r18
    710e:	da 01       	movw	r26, r20
    7110:	3c 01       	movw	r6, r24
    7112:	4d 01       	movw	r8, r26
    7114:	c4 01       	movw	r24, r8
    7116:	b3 01       	movw	r22, r6
    7118:	29 ad       	ldd	r18, Y+57	; 0x39
    711a:	3a ad       	ldd	r19, Y+58	; 0x3a
    711c:	4b ad       	ldd	r20, Y+59	; 0x3b
    711e:	5c ad       	ldd	r21, Y+60	; 0x3c
    7120:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <__mulsi3>
    7124:	9b 01       	movw	r18, r22
    7126:	ac 01       	movw	r20, r24
    7128:	87 01       	movw	r16, r14
    712a:	ff 24       	eor	r15, r15
    712c:	ee 24       	eor	r14, r14
    712e:	ad a4       	ldd	r10, Y+45	; 0x2d
    7130:	be a4       	ldd	r11, Y+46	; 0x2e
    7132:	cf a4       	ldd	r12, Y+47	; 0x2f
    7134:	d8 a8       	ldd	r13, Y+48	; 0x30
    7136:	c6 01       	movw	r24, r12
    7138:	aa 27       	eor	r26, r26
    713a:	bb 27       	eor	r27, r27
    713c:	57 01       	movw	r10, r14
    713e:	68 01       	movw	r12, r16
    7140:	a8 2a       	or	r10, r24
    7142:	b9 2a       	or	r11, r25
    7144:	ca 2a       	or	r12, r26
    7146:	db 2a       	or	r13, r27
    7148:	a2 16       	cp	r10, r18
    714a:	b3 06       	cpc	r11, r19
    714c:	c4 06       	cpc	r12, r20
    714e:	d5 06       	cpc	r13, r21
    7150:	e0 f4       	brcc	.+56     	; 0x718a <__udivdi3+0x24e>
    7152:	08 94       	sec
    7154:	61 08       	sbc	r6, r1
    7156:	71 08       	sbc	r7, r1
    7158:	81 08       	sbc	r8, r1
    715a:	91 08       	sbc	r9, r1
    715c:	a2 0c       	add	r10, r2
    715e:	b3 1c       	adc	r11, r3
    7160:	c4 1c       	adc	r12, r4
    7162:	d5 1c       	adc	r13, r5
    7164:	a2 14       	cp	r10, r2
    7166:	b3 04       	cpc	r11, r3
    7168:	c4 04       	cpc	r12, r4
    716a:	d5 04       	cpc	r13, r5
    716c:	70 f0       	brcs	.+28     	; 0x718a <__udivdi3+0x24e>
    716e:	a2 16       	cp	r10, r18
    7170:	b3 06       	cpc	r11, r19
    7172:	c4 06       	cpc	r12, r20
    7174:	d5 06       	cpc	r13, r21
    7176:	48 f4       	brcc	.+18     	; 0x718a <__udivdi3+0x24e>
    7178:	08 94       	sec
    717a:	61 08       	sbc	r6, r1
    717c:	71 08       	sbc	r7, r1
    717e:	81 08       	sbc	r8, r1
    7180:	91 08       	sbc	r9, r1
    7182:	a2 0c       	add	r10, r2
    7184:	b3 1c       	adc	r11, r3
    7186:	c4 1c       	adc	r12, r4
    7188:	d5 1c       	adc	r13, r5
    718a:	a2 1a       	sub	r10, r18
    718c:	b3 0a       	sbc	r11, r19
    718e:	c4 0a       	sbc	r12, r20
    7190:	d5 0a       	sbc	r13, r21
    7192:	c6 01       	movw	r24, r12
    7194:	b5 01       	movw	r22, r10
    7196:	2d a9       	ldd	r18, Y+53	; 0x35
    7198:	3e a9       	ldd	r19, Y+54	; 0x36
    719a:	4f a9       	ldd	r20, Y+55	; 0x37
    719c:	58 ad       	ldd	r21, Y+56	; 0x38
    719e:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    71a2:	7b 01       	movw	r14, r22
    71a4:	8c 01       	movw	r16, r24
    71a6:	c6 01       	movw	r24, r12
    71a8:	b5 01       	movw	r22, r10
    71aa:	2d a9       	ldd	r18, Y+53	; 0x35
    71ac:	3e a9       	ldd	r19, Y+54	; 0x36
    71ae:	4f a9       	ldd	r20, Y+55	; 0x37
    71b0:	58 ad       	ldd	r21, Y+56	; 0x38
    71b2:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    71b6:	c9 01       	movw	r24, r18
    71b8:	da 01       	movw	r26, r20
    71ba:	5c 01       	movw	r10, r24
    71bc:	6d 01       	movw	r12, r26
    71be:	c6 01       	movw	r24, r12
    71c0:	b5 01       	movw	r22, r10
    71c2:	29 ad       	ldd	r18, Y+57	; 0x39
    71c4:	3a ad       	ldd	r19, Y+58	; 0x3a
    71c6:	4b ad       	ldd	r20, Y+59	; 0x3b
    71c8:	5c ad       	ldd	r21, Y+60	; 0x3c
    71ca:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <__mulsi3>
    71ce:	9b 01       	movw	r18, r22
    71d0:	ac 01       	movw	r20, r24
    71d2:	87 01       	movw	r16, r14
    71d4:	ff 24       	eor	r15, r15
    71d6:	ee 24       	eor	r14, r14
    71d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    71da:	9e a5       	ldd	r25, Y+46	; 0x2e
    71dc:	af a5       	ldd	r26, Y+47	; 0x2f
    71de:	b8 a9       	ldd	r27, Y+48	; 0x30
    71e0:	a0 70       	andi	r26, 0x00	; 0
    71e2:	b0 70       	andi	r27, 0x00	; 0
    71e4:	e8 2a       	or	r14, r24
    71e6:	f9 2a       	or	r15, r25
    71e8:	0a 2b       	or	r16, r26
    71ea:	1b 2b       	or	r17, r27
    71ec:	e2 16       	cp	r14, r18
    71ee:	f3 06       	cpc	r15, r19
    71f0:	04 07       	cpc	r16, r20
    71f2:	15 07       	cpc	r17, r21
    71f4:	c0 f4       	brcc	.+48     	; 0x7226 <__udivdi3+0x2ea>
    71f6:	08 94       	sec
    71f8:	a1 08       	sbc	r10, r1
    71fa:	b1 08       	sbc	r11, r1
    71fc:	c1 08       	sbc	r12, r1
    71fe:	d1 08       	sbc	r13, r1
    7200:	e2 0c       	add	r14, r2
    7202:	f3 1c       	adc	r15, r3
    7204:	04 1d       	adc	r16, r4
    7206:	15 1d       	adc	r17, r5
    7208:	e2 14       	cp	r14, r2
    720a:	f3 04       	cpc	r15, r3
    720c:	04 05       	cpc	r16, r4
    720e:	15 05       	cpc	r17, r5
    7210:	50 f0       	brcs	.+20     	; 0x7226 <__udivdi3+0x2ea>
    7212:	e2 16       	cp	r14, r18
    7214:	f3 06       	cpc	r15, r19
    7216:	04 07       	cpc	r16, r20
    7218:	15 07       	cpc	r17, r21
    721a:	28 f4       	brcc	.+10     	; 0x7226 <__udivdi3+0x2ea>
    721c:	08 94       	sec
    721e:	a1 08       	sbc	r10, r1
    7220:	b1 08       	sbc	r11, r1
    7222:	c1 08       	sbc	r12, r1
    7224:	d1 08       	sbc	r13, r1
    7226:	d3 01       	movw	r26, r6
    7228:	99 27       	eor	r25, r25
    722a:	88 27       	eor	r24, r24
    722c:	86 01       	movw	r16, r12
    722e:	75 01       	movw	r14, r10
    7230:	e8 2a       	or	r14, r24
    7232:	f9 2a       	or	r15, r25
    7234:	0a 2b       	or	r16, r26
    7236:	1b 2b       	or	r17, r27
    7238:	e9 aa       	std	Y+49, r14	; 0x31
    723a:	fa aa       	std	Y+50, r15	; 0x32
    723c:	0b ab       	std	Y+51, r16	; 0x33
    723e:	1c ab       	std	Y+52, r17	; 0x34
    7240:	cf c4       	rjmp	.+2462   	; 0x7be0 <__udivdi3+0xca4>
    7242:	21 14       	cp	r2, r1
    7244:	31 04       	cpc	r3, r1
    7246:	41 04       	cpc	r4, r1
    7248:	51 04       	cpc	r5, r1
    724a:	71 f4       	brne	.+28     	; 0x7268 <__udivdi3+0x32c>
    724c:	61 e0       	ldi	r22, 0x01	; 1
    724e:	70 e0       	ldi	r23, 0x00	; 0
    7250:	80 e0       	ldi	r24, 0x00	; 0
    7252:	90 e0       	ldi	r25, 0x00	; 0
    7254:	20 e0       	ldi	r18, 0x00	; 0
    7256:	30 e0       	ldi	r19, 0x00	; 0
    7258:	40 e0       	ldi	r20, 0x00	; 0
    725a:	50 e0       	ldi	r21, 0x00	; 0
    725c:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    7260:	c9 01       	movw	r24, r18
    7262:	da 01       	movw	r26, r20
    7264:	1c 01       	movw	r2, r24
    7266:	2d 01       	movw	r4, r26
    7268:	00 e0       	ldi	r16, 0x00	; 0
    726a:	20 16       	cp	r2, r16
    726c:	00 e0       	ldi	r16, 0x00	; 0
    726e:	30 06       	cpc	r3, r16
    7270:	01 e0       	ldi	r16, 0x01	; 1
    7272:	40 06       	cpc	r4, r16
    7274:	00 e0       	ldi	r16, 0x00	; 0
    7276:	50 06       	cpc	r5, r16
    7278:	88 f4       	brcc	.+34     	; 0x729c <__udivdi3+0x360>
    727a:	1f ef       	ldi	r17, 0xFF	; 255
    727c:	21 16       	cp	r2, r17
    727e:	31 04       	cpc	r3, r1
    7280:	41 04       	cpc	r4, r1
    7282:	51 04       	cpc	r5, r1
    7284:	31 f0       	breq	.+12     	; 0x7292 <__udivdi3+0x356>
    7286:	28 f0       	brcs	.+10     	; 0x7292 <__udivdi3+0x356>
    7288:	48 e0       	ldi	r20, 0x08	; 8
    728a:	50 e0       	ldi	r21, 0x00	; 0
    728c:	60 e0       	ldi	r22, 0x00	; 0
    728e:	70 e0       	ldi	r23, 0x00	; 0
    7290:	17 c0       	rjmp	.+46     	; 0x72c0 <__udivdi3+0x384>
    7292:	40 e0       	ldi	r20, 0x00	; 0
    7294:	50 e0       	ldi	r21, 0x00	; 0
    7296:	60 e0       	ldi	r22, 0x00	; 0
    7298:	70 e0       	ldi	r23, 0x00	; 0
    729a:	12 c0       	rjmp	.+36     	; 0x72c0 <__udivdi3+0x384>
    729c:	20 e0       	ldi	r18, 0x00	; 0
    729e:	22 16       	cp	r2, r18
    72a0:	20 e0       	ldi	r18, 0x00	; 0
    72a2:	32 06       	cpc	r3, r18
    72a4:	20 e0       	ldi	r18, 0x00	; 0
    72a6:	42 06       	cpc	r4, r18
    72a8:	21 e0       	ldi	r18, 0x01	; 1
    72aa:	52 06       	cpc	r5, r18
    72ac:	28 f0       	brcs	.+10     	; 0x72b8 <__udivdi3+0x37c>
    72ae:	48 e1       	ldi	r20, 0x18	; 24
    72b0:	50 e0       	ldi	r21, 0x00	; 0
    72b2:	60 e0       	ldi	r22, 0x00	; 0
    72b4:	70 e0       	ldi	r23, 0x00	; 0
    72b6:	04 c0       	rjmp	.+8      	; 0x72c0 <__udivdi3+0x384>
    72b8:	40 e1       	ldi	r20, 0x10	; 16
    72ba:	50 e0       	ldi	r21, 0x00	; 0
    72bc:	60 e0       	ldi	r22, 0x00	; 0
    72be:	70 e0       	ldi	r23, 0x00	; 0
    72c0:	d2 01       	movw	r26, r4
    72c2:	c1 01       	movw	r24, r2
    72c4:	04 2e       	mov	r0, r20
    72c6:	04 c0       	rjmp	.+8      	; 0x72d0 <__udivdi3+0x394>
    72c8:	b6 95       	lsr	r27
    72ca:	a7 95       	ror	r26
    72cc:	97 95       	ror	r25
    72ce:	87 95       	ror	r24
    72d0:	0a 94       	dec	r0
    72d2:	d2 f7       	brpl	.-12     	; 0x72c8 <__udivdi3+0x38c>
    72d4:	81 5f       	subi	r24, 0xF1	; 241
    72d6:	9f 4d       	sbci	r25, 0xDF	; 223
    72d8:	dc 01       	movw	r26, r24
    72da:	2c 91       	ld	r18, X
    72dc:	e0 e2       	ldi	r30, 0x20	; 32
    72de:	ee 2e       	mov	r14, r30
    72e0:	f1 2c       	mov	r15, r1
    72e2:	01 2d       	mov	r16, r1
    72e4:	11 2d       	mov	r17, r1
    72e6:	d8 01       	movw	r26, r16
    72e8:	c7 01       	movw	r24, r14
    72ea:	84 1b       	sub	r24, r20
    72ec:	95 0b       	sbc	r25, r21
    72ee:	a6 0b       	sbc	r26, r22
    72f0:	b7 0b       	sbc	r27, r23
    72f2:	82 1b       	sub	r24, r18
    72f4:	91 09       	sbc	r25, r1
    72f6:	a1 09       	sbc	r26, r1
    72f8:	b1 09       	sbc	r27, r1
    72fa:	00 97       	sbiw	r24, 0x00	; 0
    72fc:	a1 05       	cpc	r26, r1
    72fe:	b1 05       	cpc	r27, r1
    7300:	61 f4       	brne	.+24     	; 0x731a <__udivdi3+0x3de>
    7302:	64 01       	movw	r12, r8
    7304:	53 01       	movw	r10, r6
    7306:	a2 18       	sub	r10, r2
    7308:	b3 08       	sbc	r11, r3
    730a:	c4 08       	sbc	r12, r4
    730c:	d5 08       	sbc	r13, r5
    730e:	31 e0       	ldi	r19, 0x01	; 1
    7310:	63 2e       	mov	r6, r19
    7312:	71 2c       	mov	r7, r1
    7314:	81 2c       	mov	r8, r1
    7316:	91 2c       	mov	r9, r1
    7318:	1e c1       	rjmp	.+572    	; 0x7556 <__udivdi3+0x61a>
    731a:	6f 96       	adiw	r28, 0x1f	; 31
    731c:	8f af       	std	Y+63, r24	; 0x3f
    731e:	6f 97       	sbiw	r28, 0x1f	; 31
    7320:	08 2e       	mov	r0, r24
    7322:	04 c0       	rjmp	.+8      	; 0x732c <__udivdi3+0x3f0>
    7324:	22 0c       	add	r2, r2
    7326:	33 1c       	adc	r3, r3
    7328:	44 1c       	adc	r4, r4
    732a:	55 1c       	adc	r5, r5
    732c:	0a 94       	dec	r0
    732e:	d2 f7       	brpl	.-12     	; 0x7324 <__udivdi3+0x3e8>
    7330:	ee 2d       	mov	r30, r14
    7332:	e8 1b       	sub	r30, r24
    7334:	64 01       	movw	r12, r8
    7336:	53 01       	movw	r10, r6
    7338:	0e 2e       	mov	r0, r30
    733a:	04 c0       	rjmp	.+8      	; 0x7344 <__udivdi3+0x408>
    733c:	d6 94       	lsr	r13
    733e:	c7 94       	ror	r12
    7340:	b7 94       	ror	r11
    7342:	a7 94       	ror	r10
    7344:	0a 94       	dec	r0
    7346:	d2 f7       	brpl	.-12     	; 0x733c <__udivdi3+0x400>
    7348:	a4 01       	movw	r20, r8
    734a:	93 01       	movw	r18, r6
    734c:	6f 96       	adiw	r28, 0x1f	; 31
    734e:	0f ac       	ldd	r0, Y+63	; 0x3f
    7350:	6f 97       	sbiw	r28, 0x1f	; 31
    7352:	04 c0       	rjmp	.+8      	; 0x735c <__udivdi3+0x420>
    7354:	22 0f       	add	r18, r18
    7356:	33 1f       	adc	r19, r19
    7358:	44 1f       	adc	r20, r20
    735a:	55 1f       	adc	r21, r21
    735c:	0a 94       	dec	r0
    735e:	d2 f7       	brpl	.-12     	; 0x7354 <__udivdi3+0x418>
    7360:	6d a4       	ldd	r6, Y+45	; 0x2d
    7362:	7e a4       	ldd	r7, Y+46	; 0x2e
    7364:	8f a4       	ldd	r8, Y+47	; 0x2f
    7366:	98 a8       	ldd	r9, Y+48	; 0x30
    7368:	0e 2e       	mov	r0, r30
    736a:	04 c0       	rjmp	.+8      	; 0x7374 <__udivdi3+0x438>
    736c:	96 94       	lsr	r9
    736e:	87 94       	ror	r8
    7370:	77 94       	ror	r7
    7372:	67 94       	ror	r6
    7374:	0a 94       	dec	r0
    7376:	d2 f7       	brpl	.-12     	; 0x736c <__udivdi3+0x430>
    7378:	84 01       	movw	r16, r8
    737a:	73 01       	movw	r14, r6
    737c:	e2 2a       	or	r14, r18
    737e:	f3 2a       	or	r15, r19
    7380:	04 2b       	or	r16, r20
    7382:	15 2b       	or	r17, r21
    7384:	e9 a6       	std	Y+41, r14	; 0x29
    7386:	fa a6       	std	Y+42, r15	; 0x2a
    7388:	0b a7       	std	Y+43, r16	; 0x2b
    738a:	1c a7       	std	Y+44, r17	; 0x2c
    738c:	32 01       	movw	r6, r4
    738e:	88 24       	eor	r8, r8
    7390:	99 24       	eor	r9, r9
    7392:	92 01       	movw	r18, r4
    7394:	81 01       	movw	r16, r2
    7396:	20 70       	andi	r18, 0x00	; 0
    7398:	30 70       	andi	r19, 0x00	; 0
    739a:	21 96       	adiw	r28, 0x01	; 1
    739c:	0c af       	std	Y+60, r16	; 0x3c
    739e:	1d af       	std	Y+61, r17	; 0x3d
    73a0:	2e af       	std	Y+62, r18	; 0x3e
    73a2:	3f af       	std	Y+63, r19	; 0x3f
    73a4:	21 97       	sbiw	r28, 0x01	; 1
    73a6:	c6 01       	movw	r24, r12
    73a8:	b5 01       	movw	r22, r10
    73aa:	a4 01       	movw	r20, r8
    73ac:	93 01       	movw	r18, r6
    73ae:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    73b2:	7b 01       	movw	r14, r22
    73b4:	8c 01       	movw	r16, r24
    73b6:	c6 01       	movw	r24, r12
    73b8:	b5 01       	movw	r22, r10
    73ba:	a4 01       	movw	r20, r8
    73bc:	93 01       	movw	r18, r6
    73be:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    73c2:	c9 01       	movw	r24, r18
    73c4:	da 01       	movw	r26, r20
    73c6:	25 96       	adiw	r28, 0x05	; 5
    73c8:	8c af       	std	Y+60, r24	; 0x3c
    73ca:	9d af       	std	Y+61, r25	; 0x3d
    73cc:	ae af       	std	Y+62, r26	; 0x3e
    73ce:	bf af       	std	Y+63, r27	; 0x3f
    73d0:	25 97       	sbiw	r28, 0x05	; 5
    73d2:	bc 01       	movw	r22, r24
    73d4:	cd 01       	movw	r24, r26
    73d6:	21 96       	adiw	r28, 0x01	; 1
    73d8:	2c ad       	ldd	r18, Y+60	; 0x3c
    73da:	3d ad       	ldd	r19, Y+61	; 0x3d
    73dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    73de:	5f ad       	ldd	r21, Y+63	; 0x3f
    73e0:	21 97       	sbiw	r28, 0x01	; 1
    73e2:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <__mulsi3>
    73e6:	9b 01       	movw	r18, r22
    73e8:	ac 01       	movw	r20, r24
    73ea:	87 01       	movw	r16, r14
    73ec:	ff 24       	eor	r15, r15
    73ee:	ee 24       	eor	r14, r14
    73f0:	a9 a4       	ldd	r10, Y+41	; 0x29
    73f2:	ba a4       	ldd	r11, Y+42	; 0x2a
    73f4:	cb a4       	ldd	r12, Y+43	; 0x2b
    73f6:	dc a4       	ldd	r13, Y+44	; 0x2c
    73f8:	c6 01       	movw	r24, r12
    73fa:	aa 27       	eor	r26, r26
    73fc:	bb 27       	eor	r27, r27
    73fe:	5c 01       	movw	r10, r24
    7400:	6d 01       	movw	r12, r26
    7402:	ae 28       	or	r10, r14
    7404:	bf 28       	or	r11, r15
    7406:	c0 2a       	or	r12, r16
    7408:	d1 2a       	or	r13, r17
    740a:	a2 16       	cp	r10, r18
    740c:	b3 06       	cpc	r11, r19
    740e:	c4 06       	cpc	r12, r20
    7410:	d5 06       	cpc	r13, r21
    7412:	60 f5       	brcc	.+88     	; 0x746c <__udivdi3+0x530>
    7414:	25 96       	adiw	r28, 0x05	; 5
    7416:	6c ad       	ldd	r22, Y+60	; 0x3c
    7418:	7d ad       	ldd	r23, Y+61	; 0x3d
    741a:	8e ad       	ldd	r24, Y+62	; 0x3e
    741c:	9f ad       	ldd	r25, Y+63	; 0x3f
    741e:	25 97       	sbiw	r28, 0x05	; 5
    7420:	61 50       	subi	r22, 0x01	; 1
    7422:	70 40       	sbci	r23, 0x00	; 0
    7424:	80 40       	sbci	r24, 0x00	; 0
    7426:	90 40       	sbci	r25, 0x00	; 0
    7428:	25 96       	adiw	r28, 0x05	; 5
    742a:	6c af       	std	Y+60, r22	; 0x3c
    742c:	7d af       	std	Y+61, r23	; 0x3d
    742e:	8e af       	std	Y+62, r24	; 0x3e
    7430:	9f af       	std	Y+63, r25	; 0x3f
    7432:	25 97       	sbiw	r28, 0x05	; 5
    7434:	a2 0c       	add	r10, r2
    7436:	b3 1c       	adc	r11, r3
    7438:	c4 1c       	adc	r12, r4
    743a:	d5 1c       	adc	r13, r5
    743c:	a2 14       	cp	r10, r2
    743e:	b3 04       	cpc	r11, r3
    7440:	c4 04       	cpc	r12, r4
    7442:	d5 04       	cpc	r13, r5
    7444:	98 f0       	brcs	.+38     	; 0x746c <__udivdi3+0x530>
    7446:	a2 16       	cp	r10, r18
    7448:	b3 06       	cpc	r11, r19
    744a:	c4 06       	cpc	r12, r20
    744c:	d5 06       	cpc	r13, r21
    744e:	70 f4       	brcc	.+28     	; 0x746c <__udivdi3+0x530>
    7450:	61 50       	subi	r22, 0x01	; 1
    7452:	70 40       	sbci	r23, 0x00	; 0
    7454:	80 40       	sbci	r24, 0x00	; 0
    7456:	90 40       	sbci	r25, 0x00	; 0
    7458:	25 96       	adiw	r28, 0x05	; 5
    745a:	6c af       	std	Y+60, r22	; 0x3c
    745c:	7d af       	std	Y+61, r23	; 0x3d
    745e:	8e af       	std	Y+62, r24	; 0x3e
    7460:	9f af       	std	Y+63, r25	; 0x3f
    7462:	25 97       	sbiw	r28, 0x05	; 5
    7464:	a2 0c       	add	r10, r2
    7466:	b3 1c       	adc	r11, r3
    7468:	c4 1c       	adc	r12, r4
    746a:	d5 1c       	adc	r13, r5
    746c:	a2 1a       	sub	r10, r18
    746e:	b3 0a       	sbc	r11, r19
    7470:	c4 0a       	sbc	r12, r20
    7472:	d5 0a       	sbc	r13, r21
    7474:	c6 01       	movw	r24, r12
    7476:	b5 01       	movw	r22, r10
    7478:	a4 01       	movw	r20, r8
    747a:	93 01       	movw	r18, r6
    747c:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    7480:	7b 01       	movw	r14, r22
    7482:	8c 01       	movw	r16, r24
    7484:	c6 01       	movw	r24, r12
    7486:	b5 01       	movw	r22, r10
    7488:	a4 01       	movw	r20, r8
    748a:	93 01       	movw	r18, r6
    748c:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    7490:	c9 01       	movw	r24, r18
    7492:	da 01       	movw	r26, r20
    7494:	3c 01       	movw	r6, r24
    7496:	4d 01       	movw	r8, r26
    7498:	c4 01       	movw	r24, r8
    749a:	b3 01       	movw	r22, r6
    749c:	21 96       	adiw	r28, 0x01	; 1
    749e:	2c ad       	ldd	r18, Y+60	; 0x3c
    74a0:	3d ad       	ldd	r19, Y+61	; 0x3d
    74a2:	4e ad       	ldd	r20, Y+62	; 0x3e
    74a4:	5f ad       	ldd	r21, Y+63	; 0x3f
    74a6:	21 97       	sbiw	r28, 0x01	; 1
    74a8:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <__mulsi3>
    74ac:	9b 01       	movw	r18, r22
    74ae:	ac 01       	movw	r20, r24
    74b0:	87 01       	movw	r16, r14
    74b2:	ff 24       	eor	r15, r15
    74b4:	ee 24       	eor	r14, r14
    74b6:	89 a5       	ldd	r24, Y+41	; 0x29
    74b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    74ba:	ab a5       	ldd	r26, Y+43	; 0x2b
    74bc:	bc a5       	ldd	r27, Y+44	; 0x2c
    74be:	a0 70       	andi	r26, 0x00	; 0
    74c0:	b0 70       	andi	r27, 0x00	; 0
    74c2:	57 01       	movw	r10, r14
    74c4:	68 01       	movw	r12, r16
    74c6:	a8 2a       	or	r10, r24
    74c8:	b9 2a       	or	r11, r25
    74ca:	ca 2a       	or	r12, r26
    74cc:	db 2a       	or	r13, r27
    74ce:	a2 16       	cp	r10, r18
    74d0:	b3 06       	cpc	r11, r19
    74d2:	c4 06       	cpc	r12, r20
    74d4:	d5 06       	cpc	r13, r21
    74d6:	e0 f4       	brcc	.+56     	; 0x7510 <__udivdi3+0x5d4>
    74d8:	08 94       	sec
    74da:	61 08       	sbc	r6, r1
    74dc:	71 08       	sbc	r7, r1
    74de:	81 08       	sbc	r8, r1
    74e0:	91 08       	sbc	r9, r1
    74e2:	a2 0c       	add	r10, r2
    74e4:	b3 1c       	adc	r11, r3
    74e6:	c4 1c       	adc	r12, r4
    74e8:	d5 1c       	adc	r13, r5
    74ea:	a2 14       	cp	r10, r2
    74ec:	b3 04       	cpc	r11, r3
    74ee:	c4 04       	cpc	r12, r4
    74f0:	d5 04       	cpc	r13, r5
    74f2:	70 f0       	brcs	.+28     	; 0x7510 <__udivdi3+0x5d4>
    74f4:	a2 16       	cp	r10, r18
    74f6:	b3 06       	cpc	r11, r19
    74f8:	c4 06       	cpc	r12, r20
    74fa:	d5 06       	cpc	r13, r21
    74fc:	48 f4       	brcc	.+18     	; 0x7510 <__udivdi3+0x5d4>
    74fe:	08 94       	sec
    7500:	61 08       	sbc	r6, r1
    7502:	71 08       	sbc	r7, r1
    7504:	81 08       	sbc	r8, r1
    7506:	91 08       	sbc	r9, r1
    7508:	a2 0c       	add	r10, r2
    750a:	b3 1c       	adc	r11, r3
    750c:	c4 1c       	adc	r12, r4
    750e:	d5 1c       	adc	r13, r5
    7510:	8d a5       	ldd	r24, Y+45	; 0x2d
    7512:	9e a5       	ldd	r25, Y+46	; 0x2e
    7514:	af a5       	ldd	r26, Y+47	; 0x2f
    7516:	b8 a9       	ldd	r27, Y+48	; 0x30
    7518:	6f 96       	adiw	r28, 0x1f	; 31
    751a:	0f ac       	ldd	r0, Y+63	; 0x3f
    751c:	6f 97       	sbiw	r28, 0x1f	; 31
    751e:	04 c0       	rjmp	.+8      	; 0x7528 <__udivdi3+0x5ec>
    7520:	88 0f       	add	r24, r24
    7522:	99 1f       	adc	r25, r25
    7524:	aa 1f       	adc	r26, r26
    7526:	bb 1f       	adc	r27, r27
    7528:	0a 94       	dec	r0
    752a:	d2 f7       	brpl	.-12     	; 0x7520 <__udivdi3+0x5e4>
    752c:	8d a7       	std	Y+45, r24	; 0x2d
    752e:	9e a7       	std	Y+46, r25	; 0x2e
    7530:	af a7       	std	Y+47, r26	; 0x2f
    7532:	b8 ab       	std	Y+48, r27	; 0x30
    7534:	a2 1a       	sub	r10, r18
    7536:	b3 0a       	sbc	r11, r19
    7538:	c4 0a       	sbc	r12, r20
    753a:	d5 0a       	sbc	r13, r21
    753c:	25 96       	adiw	r28, 0x05	; 5
    753e:	ec ac       	ldd	r14, Y+60	; 0x3c
    7540:	fd ac       	ldd	r15, Y+61	; 0x3d
    7542:	0e ad       	ldd	r16, Y+62	; 0x3e
    7544:	1f ad       	ldd	r17, Y+63	; 0x3f
    7546:	25 97       	sbiw	r28, 0x05	; 5
    7548:	d7 01       	movw	r26, r14
    754a:	99 27       	eor	r25, r25
    754c:	88 27       	eor	r24, r24
    754e:	68 2a       	or	r6, r24
    7550:	79 2a       	or	r7, r25
    7552:	8a 2a       	or	r8, r26
    7554:	9b 2a       	or	r9, r27
    7556:	82 01       	movw	r16, r4
    7558:	22 27       	eor	r18, r18
    755a:	33 27       	eor	r19, r19
    755c:	29 96       	adiw	r28, 0x09	; 9
    755e:	0c af       	std	Y+60, r16	; 0x3c
    7560:	1d af       	std	Y+61, r17	; 0x3d
    7562:	2e af       	std	Y+62, r18	; 0x3e
    7564:	3f af       	std	Y+63, r19	; 0x3f
    7566:	29 97       	sbiw	r28, 0x09	; 9
    7568:	a2 01       	movw	r20, r4
    756a:	91 01       	movw	r18, r2
    756c:	40 70       	andi	r20, 0x00	; 0
    756e:	50 70       	andi	r21, 0x00	; 0
    7570:	2d 96       	adiw	r28, 0x0d	; 13
    7572:	2c af       	std	Y+60, r18	; 0x3c
    7574:	3d af       	std	Y+61, r19	; 0x3d
    7576:	4e af       	std	Y+62, r20	; 0x3e
    7578:	5f af       	std	Y+63, r21	; 0x3f
    757a:	2d 97       	sbiw	r28, 0x0d	; 13
    757c:	c6 01       	movw	r24, r12
    757e:	b5 01       	movw	r22, r10
    7580:	29 96       	adiw	r28, 0x09	; 9
    7582:	2c ad       	ldd	r18, Y+60	; 0x3c
    7584:	3d ad       	ldd	r19, Y+61	; 0x3d
    7586:	4e ad       	ldd	r20, Y+62	; 0x3e
    7588:	5f ad       	ldd	r21, Y+63	; 0x3f
    758a:	29 97       	sbiw	r28, 0x09	; 9
    758c:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    7590:	7b 01       	movw	r14, r22
    7592:	8c 01       	movw	r16, r24
    7594:	c6 01       	movw	r24, r12
    7596:	b5 01       	movw	r22, r10
    7598:	29 96       	adiw	r28, 0x09	; 9
    759a:	2c ad       	ldd	r18, Y+60	; 0x3c
    759c:	3d ad       	ldd	r19, Y+61	; 0x3d
    759e:	4e ad       	ldd	r20, Y+62	; 0x3e
    75a0:	5f ad       	ldd	r21, Y+63	; 0x3f
    75a2:	29 97       	sbiw	r28, 0x09	; 9
    75a4:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    75a8:	c9 01       	movw	r24, r18
    75aa:	da 01       	movw	r26, r20
    75ac:	61 96       	adiw	r28, 0x11	; 17
    75ae:	8c af       	std	Y+60, r24	; 0x3c
    75b0:	9d af       	std	Y+61, r25	; 0x3d
    75b2:	ae af       	std	Y+62, r26	; 0x3e
    75b4:	bf af       	std	Y+63, r27	; 0x3f
    75b6:	61 97       	sbiw	r28, 0x11	; 17
    75b8:	bc 01       	movw	r22, r24
    75ba:	cd 01       	movw	r24, r26
    75bc:	2d 96       	adiw	r28, 0x0d	; 13
    75be:	2c ad       	ldd	r18, Y+60	; 0x3c
    75c0:	3d ad       	ldd	r19, Y+61	; 0x3d
    75c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    75c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    75c6:	2d 97       	sbiw	r28, 0x0d	; 13
    75c8:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <__mulsi3>
    75cc:	9b 01       	movw	r18, r22
    75ce:	ac 01       	movw	r20, r24
    75d0:	87 01       	movw	r16, r14
    75d2:	ff 24       	eor	r15, r15
    75d4:	ee 24       	eor	r14, r14
    75d6:	ad a4       	ldd	r10, Y+45	; 0x2d
    75d8:	be a4       	ldd	r11, Y+46	; 0x2e
    75da:	cf a4       	ldd	r12, Y+47	; 0x2f
    75dc:	d8 a8       	ldd	r13, Y+48	; 0x30
    75de:	c6 01       	movw	r24, r12
    75e0:	aa 27       	eor	r26, r26
    75e2:	bb 27       	eor	r27, r27
    75e4:	57 01       	movw	r10, r14
    75e6:	68 01       	movw	r12, r16
    75e8:	a8 2a       	or	r10, r24
    75ea:	b9 2a       	or	r11, r25
    75ec:	ca 2a       	or	r12, r26
    75ee:	db 2a       	or	r13, r27
    75f0:	a2 16       	cp	r10, r18
    75f2:	b3 06       	cpc	r11, r19
    75f4:	c4 06       	cpc	r12, r20
    75f6:	d5 06       	cpc	r13, r21
    75f8:	60 f5       	brcc	.+88     	; 0x7652 <__udivdi3+0x716>
    75fa:	61 96       	adiw	r28, 0x11	; 17
    75fc:	6c ad       	ldd	r22, Y+60	; 0x3c
    75fe:	7d ad       	ldd	r23, Y+61	; 0x3d
    7600:	8e ad       	ldd	r24, Y+62	; 0x3e
    7602:	9f ad       	ldd	r25, Y+63	; 0x3f
    7604:	61 97       	sbiw	r28, 0x11	; 17
    7606:	61 50       	subi	r22, 0x01	; 1
    7608:	70 40       	sbci	r23, 0x00	; 0
    760a:	80 40       	sbci	r24, 0x00	; 0
    760c:	90 40       	sbci	r25, 0x00	; 0
    760e:	61 96       	adiw	r28, 0x11	; 17
    7610:	6c af       	std	Y+60, r22	; 0x3c
    7612:	7d af       	std	Y+61, r23	; 0x3d
    7614:	8e af       	std	Y+62, r24	; 0x3e
    7616:	9f af       	std	Y+63, r25	; 0x3f
    7618:	61 97       	sbiw	r28, 0x11	; 17
    761a:	a2 0c       	add	r10, r2
    761c:	b3 1c       	adc	r11, r3
    761e:	c4 1c       	adc	r12, r4
    7620:	d5 1c       	adc	r13, r5
    7622:	a2 14       	cp	r10, r2
    7624:	b3 04       	cpc	r11, r3
    7626:	c4 04       	cpc	r12, r4
    7628:	d5 04       	cpc	r13, r5
    762a:	98 f0       	brcs	.+38     	; 0x7652 <__udivdi3+0x716>
    762c:	a2 16       	cp	r10, r18
    762e:	b3 06       	cpc	r11, r19
    7630:	c4 06       	cpc	r12, r20
    7632:	d5 06       	cpc	r13, r21
    7634:	70 f4       	brcc	.+28     	; 0x7652 <__udivdi3+0x716>
    7636:	61 50       	subi	r22, 0x01	; 1
    7638:	70 40       	sbci	r23, 0x00	; 0
    763a:	80 40       	sbci	r24, 0x00	; 0
    763c:	90 40       	sbci	r25, 0x00	; 0
    763e:	61 96       	adiw	r28, 0x11	; 17
    7640:	6c af       	std	Y+60, r22	; 0x3c
    7642:	7d af       	std	Y+61, r23	; 0x3d
    7644:	8e af       	std	Y+62, r24	; 0x3e
    7646:	9f af       	std	Y+63, r25	; 0x3f
    7648:	61 97       	sbiw	r28, 0x11	; 17
    764a:	a2 0c       	add	r10, r2
    764c:	b3 1c       	adc	r11, r3
    764e:	c4 1c       	adc	r12, r4
    7650:	d5 1c       	adc	r13, r5
    7652:	a2 1a       	sub	r10, r18
    7654:	b3 0a       	sbc	r11, r19
    7656:	c4 0a       	sbc	r12, r20
    7658:	d5 0a       	sbc	r13, r21
    765a:	c6 01       	movw	r24, r12
    765c:	b5 01       	movw	r22, r10
    765e:	29 96       	adiw	r28, 0x09	; 9
    7660:	2c ad       	ldd	r18, Y+60	; 0x3c
    7662:	3d ad       	ldd	r19, Y+61	; 0x3d
    7664:	4e ad       	ldd	r20, Y+62	; 0x3e
    7666:	5f ad       	ldd	r21, Y+63	; 0x3f
    7668:	29 97       	sbiw	r28, 0x09	; 9
    766a:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    766e:	7b 01       	movw	r14, r22
    7670:	8c 01       	movw	r16, r24
    7672:	c6 01       	movw	r24, r12
    7674:	b5 01       	movw	r22, r10
    7676:	29 96       	adiw	r28, 0x09	; 9
    7678:	2c ad       	ldd	r18, Y+60	; 0x3c
    767a:	3d ad       	ldd	r19, Y+61	; 0x3d
    767c:	4e ad       	ldd	r20, Y+62	; 0x3e
    767e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7680:	29 97       	sbiw	r28, 0x09	; 9
    7682:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    7686:	c9 01       	movw	r24, r18
    7688:	da 01       	movw	r26, r20
    768a:	5c 01       	movw	r10, r24
    768c:	6d 01       	movw	r12, r26
    768e:	c6 01       	movw	r24, r12
    7690:	b5 01       	movw	r22, r10
    7692:	2d 96       	adiw	r28, 0x0d	; 13
    7694:	2c ad       	ldd	r18, Y+60	; 0x3c
    7696:	3d ad       	ldd	r19, Y+61	; 0x3d
    7698:	4e ad       	ldd	r20, Y+62	; 0x3e
    769a:	5f ad       	ldd	r21, Y+63	; 0x3f
    769c:	2d 97       	sbiw	r28, 0x0d	; 13
    769e:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <__mulsi3>
    76a2:	9b 01       	movw	r18, r22
    76a4:	ac 01       	movw	r20, r24
    76a6:	87 01       	movw	r16, r14
    76a8:	ff 24       	eor	r15, r15
    76aa:	ee 24       	eor	r14, r14
    76ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    76ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    76b0:	af a5       	ldd	r26, Y+47	; 0x2f
    76b2:	b8 a9       	ldd	r27, Y+48	; 0x30
    76b4:	a0 70       	andi	r26, 0x00	; 0
    76b6:	b0 70       	andi	r27, 0x00	; 0
    76b8:	e8 2a       	or	r14, r24
    76ba:	f9 2a       	or	r15, r25
    76bc:	0a 2b       	or	r16, r26
    76be:	1b 2b       	or	r17, r27
    76c0:	e2 16       	cp	r14, r18
    76c2:	f3 06       	cpc	r15, r19
    76c4:	04 07       	cpc	r16, r20
    76c6:	15 07       	cpc	r17, r21
    76c8:	c0 f4       	brcc	.+48     	; 0x76fa <__udivdi3+0x7be>
    76ca:	08 94       	sec
    76cc:	a1 08       	sbc	r10, r1
    76ce:	b1 08       	sbc	r11, r1
    76d0:	c1 08       	sbc	r12, r1
    76d2:	d1 08       	sbc	r13, r1
    76d4:	e2 0c       	add	r14, r2
    76d6:	f3 1c       	adc	r15, r3
    76d8:	04 1d       	adc	r16, r4
    76da:	15 1d       	adc	r17, r5
    76dc:	e2 14       	cp	r14, r2
    76de:	f3 04       	cpc	r15, r3
    76e0:	04 05       	cpc	r16, r4
    76e2:	15 05       	cpc	r17, r5
    76e4:	50 f0       	brcs	.+20     	; 0x76fa <__udivdi3+0x7be>
    76e6:	e2 16       	cp	r14, r18
    76e8:	f3 06       	cpc	r15, r19
    76ea:	04 07       	cpc	r16, r20
    76ec:	15 07       	cpc	r17, r21
    76ee:	28 f4       	brcc	.+10     	; 0x76fa <__udivdi3+0x7be>
    76f0:	08 94       	sec
    76f2:	a1 08       	sbc	r10, r1
    76f4:	b1 08       	sbc	r11, r1
    76f6:	c1 08       	sbc	r12, r1
    76f8:	d1 08       	sbc	r13, r1
    76fa:	61 96       	adiw	r28, 0x11	; 17
    76fc:	ec ac       	ldd	r14, Y+60	; 0x3c
    76fe:	fd ac       	ldd	r15, Y+61	; 0x3d
    7700:	0e ad       	ldd	r16, Y+62	; 0x3e
    7702:	1f ad       	ldd	r17, Y+63	; 0x3f
    7704:	61 97       	sbiw	r28, 0x11	; 17
    7706:	d7 01       	movw	r26, r14
    7708:	99 27       	eor	r25, r25
    770a:	88 27       	eor	r24, r24
    770c:	96 01       	movw	r18, r12
    770e:	85 01       	movw	r16, r10
    7710:	08 2b       	or	r16, r24
    7712:	19 2b       	or	r17, r25
    7714:	2a 2b       	or	r18, r26
    7716:	3b 2b       	or	r19, r27
    7718:	09 ab       	std	Y+49, r16	; 0x31
    771a:	1a ab       	std	Y+50, r17	; 0x32
    771c:	2b ab       	std	Y+51, r18	; 0x33
    771e:	3c ab       	std	Y+52, r19	; 0x34
    7720:	62 c2       	rjmp	.+1220   	; 0x7be6 <__udivdi3+0xcaa>
    7722:	6e 14       	cp	r6, r14
    7724:	7f 04       	cpc	r7, r15
    7726:	80 06       	cpc	r8, r16
    7728:	91 06       	cpc	r9, r17
    772a:	08 f4       	brcc	.+2      	; 0x772e <__udivdi3+0x7f2>
    772c:	51 c2       	rjmp	.+1186   	; 0x7bd0 <__udivdi3+0xc94>
    772e:	20 e0       	ldi	r18, 0x00	; 0
    7730:	e2 16       	cp	r14, r18
    7732:	20 e0       	ldi	r18, 0x00	; 0
    7734:	f2 06       	cpc	r15, r18
    7736:	21 e0       	ldi	r18, 0x01	; 1
    7738:	02 07       	cpc	r16, r18
    773a:	20 e0       	ldi	r18, 0x00	; 0
    773c:	12 07       	cpc	r17, r18
    773e:	88 f4       	brcc	.+34     	; 0x7762 <__udivdi3+0x826>
    7740:	3f ef       	ldi	r19, 0xFF	; 255
    7742:	e3 16       	cp	r14, r19
    7744:	f1 04       	cpc	r15, r1
    7746:	01 05       	cpc	r16, r1
    7748:	11 05       	cpc	r17, r1
    774a:	31 f0       	breq	.+12     	; 0x7758 <__udivdi3+0x81c>
    774c:	28 f0       	brcs	.+10     	; 0x7758 <__udivdi3+0x81c>
    774e:	48 e0       	ldi	r20, 0x08	; 8
    7750:	50 e0       	ldi	r21, 0x00	; 0
    7752:	60 e0       	ldi	r22, 0x00	; 0
    7754:	70 e0       	ldi	r23, 0x00	; 0
    7756:	17 c0       	rjmp	.+46     	; 0x7786 <__udivdi3+0x84a>
    7758:	40 e0       	ldi	r20, 0x00	; 0
    775a:	50 e0       	ldi	r21, 0x00	; 0
    775c:	60 e0       	ldi	r22, 0x00	; 0
    775e:	70 e0       	ldi	r23, 0x00	; 0
    7760:	12 c0       	rjmp	.+36     	; 0x7786 <__udivdi3+0x84a>
    7762:	40 e0       	ldi	r20, 0x00	; 0
    7764:	e4 16       	cp	r14, r20
    7766:	40 e0       	ldi	r20, 0x00	; 0
    7768:	f4 06       	cpc	r15, r20
    776a:	40 e0       	ldi	r20, 0x00	; 0
    776c:	04 07       	cpc	r16, r20
    776e:	41 e0       	ldi	r20, 0x01	; 1
    7770:	14 07       	cpc	r17, r20
    7772:	28 f0       	brcs	.+10     	; 0x777e <__udivdi3+0x842>
    7774:	48 e1       	ldi	r20, 0x18	; 24
    7776:	50 e0       	ldi	r21, 0x00	; 0
    7778:	60 e0       	ldi	r22, 0x00	; 0
    777a:	70 e0       	ldi	r23, 0x00	; 0
    777c:	04 c0       	rjmp	.+8      	; 0x7786 <__udivdi3+0x84a>
    777e:	40 e1       	ldi	r20, 0x10	; 16
    7780:	50 e0       	ldi	r21, 0x00	; 0
    7782:	60 e0       	ldi	r22, 0x00	; 0
    7784:	70 e0       	ldi	r23, 0x00	; 0
    7786:	d8 01       	movw	r26, r16
    7788:	c7 01       	movw	r24, r14
    778a:	04 2e       	mov	r0, r20
    778c:	04 c0       	rjmp	.+8      	; 0x7796 <__udivdi3+0x85a>
    778e:	b6 95       	lsr	r27
    7790:	a7 95       	ror	r26
    7792:	97 95       	ror	r25
    7794:	87 95       	ror	r24
    7796:	0a 94       	dec	r0
    7798:	d2 f7       	brpl	.-12     	; 0x778e <__udivdi3+0x852>
    779a:	81 5f       	subi	r24, 0xF1	; 241
    779c:	9f 4d       	sbci	r25, 0xDF	; 223
    779e:	dc 01       	movw	r26, r24
    77a0:	2c 91       	ld	r18, X
    77a2:	30 e2       	ldi	r19, 0x20	; 32
    77a4:	a3 2e       	mov	r10, r19
    77a6:	b1 2c       	mov	r11, r1
    77a8:	c1 2c       	mov	r12, r1
    77aa:	d1 2c       	mov	r13, r1
    77ac:	d6 01       	movw	r26, r12
    77ae:	c5 01       	movw	r24, r10
    77b0:	84 1b       	sub	r24, r20
    77b2:	95 0b       	sbc	r25, r21
    77b4:	a6 0b       	sbc	r26, r22
    77b6:	b7 0b       	sbc	r27, r23
    77b8:	82 1b       	sub	r24, r18
    77ba:	91 09       	sbc	r25, r1
    77bc:	a1 09       	sbc	r26, r1
    77be:	b1 09       	sbc	r27, r1
    77c0:	00 97       	sbiw	r24, 0x00	; 0
    77c2:	a1 05       	cpc	r26, r1
    77c4:	b1 05       	cpc	r27, r1
    77c6:	89 f4       	brne	.+34     	; 0x77ea <__udivdi3+0x8ae>
    77c8:	e6 14       	cp	r14, r6
    77ca:	f7 04       	cpc	r15, r7
    77cc:	08 05       	cpc	r16, r8
    77ce:	19 05       	cpc	r17, r9
    77d0:	08 f4       	brcc	.+2      	; 0x77d4 <__udivdi3+0x898>
    77d2:	f2 c1       	rjmp	.+996    	; 0x7bb8 <__udivdi3+0xc7c>
    77d4:	6d a4       	ldd	r6, Y+45	; 0x2d
    77d6:	7e a4       	ldd	r7, Y+46	; 0x2e
    77d8:	8f a4       	ldd	r8, Y+47	; 0x2f
    77da:	98 a8       	ldd	r9, Y+48	; 0x30
    77dc:	62 14       	cp	r6, r2
    77de:	73 04       	cpc	r7, r3
    77e0:	84 04       	cpc	r8, r4
    77e2:	95 04       	cpc	r9, r5
    77e4:	08 f0       	brcs	.+2      	; 0x77e8 <__udivdi3+0x8ac>
    77e6:	e8 c1       	rjmp	.+976    	; 0x7bb8 <__udivdi3+0xc7c>
    77e8:	f3 c1       	rjmp	.+998    	; 0x7bd0 <__udivdi3+0xc94>
    77ea:	6e 96       	adiw	r28, 0x1e	; 30
    77ec:	8f af       	std	Y+63, r24	; 0x3f
    77ee:	6e 97       	sbiw	r28, 0x1e	; 30
    77f0:	08 2e       	mov	r0, r24
    77f2:	04 c0       	rjmp	.+8      	; 0x77fc <__udivdi3+0x8c0>
    77f4:	ee 0c       	add	r14, r14
    77f6:	ff 1c       	adc	r15, r15
    77f8:	00 1f       	adc	r16, r16
    77fa:	11 1f       	adc	r17, r17
    77fc:	0a 94       	dec	r0
    77fe:	d2 f7       	brpl	.-12     	; 0x77f4 <__udivdi3+0x8b8>
    7800:	6a 2d       	mov	r22, r10
    7802:	68 1b       	sub	r22, r24
    7804:	d2 01       	movw	r26, r4
    7806:	c1 01       	movw	r24, r2
    7808:	06 2e       	mov	r0, r22
    780a:	04 c0       	rjmp	.+8      	; 0x7814 <__udivdi3+0x8d8>
    780c:	b6 95       	lsr	r27
    780e:	a7 95       	ror	r26
    7810:	97 95       	ror	r25
    7812:	87 95       	ror	r24
    7814:	0a 94       	dec	r0
    7816:	d2 f7       	brpl	.-12     	; 0x780c <__udivdi3+0x8d0>
    7818:	5c 01       	movw	r10, r24
    781a:	6d 01       	movw	r12, r26
    781c:	ae 28       	or	r10, r14
    781e:	bf 28       	or	r11, r15
    7820:	c0 2a       	or	r12, r16
    7822:	d1 2a       	or	r13, r17
    7824:	ad a2       	std	Y+37, r10	; 0x25
    7826:	be a2       	std	Y+38, r11	; 0x26
    7828:	cf a2       	std	Y+39, r12	; 0x27
    782a:	d8 a6       	std	Y+40, r13	; 0x28
    782c:	72 01       	movw	r14, r4
    782e:	61 01       	movw	r12, r2
    7830:	6e 96       	adiw	r28, 0x1e	; 30
    7832:	0f ac       	ldd	r0, Y+63	; 0x3f
    7834:	6e 97       	sbiw	r28, 0x1e	; 30
    7836:	04 c0       	rjmp	.+8      	; 0x7840 <__udivdi3+0x904>
    7838:	cc 0c       	add	r12, r12
    783a:	dd 1c       	adc	r13, r13
    783c:	ee 1c       	adc	r14, r14
    783e:	ff 1c       	adc	r15, r15
    7840:	0a 94       	dec	r0
    7842:	d2 f7       	brpl	.-12     	; 0x7838 <__udivdi3+0x8fc>
    7844:	c9 a2       	std	Y+33, r12	; 0x21
    7846:	da a2       	std	Y+34, r13	; 0x22
    7848:	eb a2       	std	Y+35, r14	; 0x23
    784a:	fc a2       	std	Y+36, r15	; 0x24
    784c:	64 01       	movw	r12, r8
    784e:	53 01       	movw	r10, r6
    7850:	06 2e       	mov	r0, r22
    7852:	04 c0       	rjmp	.+8      	; 0x785c <__udivdi3+0x920>
    7854:	d6 94       	lsr	r13
    7856:	c7 94       	ror	r12
    7858:	b7 94       	ror	r11
    785a:	a7 94       	ror	r10
    785c:	0a 94       	dec	r0
    785e:	d2 f7       	brpl	.-12     	; 0x7854 <__udivdi3+0x918>
    7860:	d4 01       	movw	r26, r8
    7862:	c3 01       	movw	r24, r6
    7864:	6e 96       	adiw	r28, 0x1e	; 30
    7866:	0f ac       	ldd	r0, Y+63	; 0x3f
    7868:	6e 97       	sbiw	r28, 0x1e	; 30
    786a:	04 c0       	rjmp	.+8      	; 0x7874 <__udivdi3+0x938>
    786c:	88 0f       	add	r24, r24
    786e:	99 1f       	adc	r25, r25
    7870:	aa 1f       	adc	r26, r26
    7872:	bb 1f       	adc	r27, r27
    7874:	0a 94       	dec	r0
    7876:	d2 f7       	brpl	.-12     	; 0x786c <__udivdi3+0x930>
    7878:	ed a4       	ldd	r14, Y+45	; 0x2d
    787a:	fe a4       	ldd	r15, Y+46	; 0x2e
    787c:	0f a5       	ldd	r16, Y+47	; 0x2f
    787e:	18 a9       	ldd	r17, Y+48	; 0x30
    7880:	04 c0       	rjmp	.+8      	; 0x788a <__udivdi3+0x94e>
    7882:	16 95       	lsr	r17
    7884:	07 95       	ror	r16
    7886:	f7 94       	ror	r15
    7888:	e7 94       	ror	r14
    788a:	6a 95       	dec	r22
    788c:	d2 f7       	brpl	.-12     	; 0x7882 <__udivdi3+0x946>
    788e:	37 01       	movw	r6, r14
    7890:	48 01       	movw	r8, r16
    7892:	68 2a       	or	r6, r24
    7894:	79 2a       	or	r7, r25
    7896:	8a 2a       	or	r8, r26
    7898:	9b 2a       	or	r9, r27
    789a:	6d 8e       	std	Y+29, r6	; 0x1d
    789c:	7e 8e       	std	Y+30, r7	; 0x1e
    789e:	8f 8e       	std	Y+31, r8	; 0x1f
    78a0:	98 a2       	std	Y+32, r9	; 0x20
    78a2:	ed a0       	ldd	r14, Y+37	; 0x25
    78a4:	fe a0       	ldd	r15, Y+38	; 0x26
    78a6:	0f a1       	ldd	r16, Y+39	; 0x27
    78a8:	18 a5       	ldd	r17, Y+40	; 0x28
    78aa:	38 01       	movw	r6, r16
    78ac:	88 24       	eor	r8, r8
    78ae:	99 24       	eor	r9, r9
    78b0:	98 01       	movw	r18, r16
    78b2:	87 01       	movw	r16, r14
    78b4:	20 70       	andi	r18, 0x00	; 0
    78b6:	30 70       	andi	r19, 0x00	; 0
    78b8:	65 96       	adiw	r28, 0x15	; 21
    78ba:	0c af       	std	Y+60, r16	; 0x3c
    78bc:	1d af       	std	Y+61, r17	; 0x3d
    78be:	2e af       	std	Y+62, r18	; 0x3e
    78c0:	3f af       	std	Y+63, r19	; 0x3f
    78c2:	65 97       	sbiw	r28, 0x15	; 21
    78c4:	c6 01       	movw	r24, r12
    78c6:	b5 01       	movw	r22, r10
    78c8:	a4 01       	movw	r20, r8
    78ca:	93 01       	movw	r18, r6
    78cc:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    78d0:	7b 01       	movw	r14, r22
    78d2:	8c 01       	movw	r16, r24
    78d4:	c6 01       	movw	r24, r12
    78d6:	b5 01       	movw	r22, r10
    78d8:	a4 01       	movw	r20, r8
    78da:	93 01       	movw	r18, r6
    78dc:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    78e0:	c9 01       	movw	r24, r18
    78e2:	da 01       	movw	r26, r20
    78e4:	1c 01       	movw	r2, r24
    78e6:	2d 01       	movw	r4, r26
    78e8:	c2 01       	movw	r24, r4
    78ea:	b1 01       	movw	r22, r2
    78ec:	65 96       	adiw	r28, 0x15	; 21
    78ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    78f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    78f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    78f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    78f6:	65 97       	sbiw	r28, 0x15	; 21
    78f8:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <__mulsi3>
    78fc:	9b 01       	movw	r18, r22
    78fe:	ac 01       	movw	r20, r24
    7900:	87 01       	movw	r16, r14
    7902:	ff 24       	eor	r15, r15
    7904:	ee 24       	eor	r14, r14
    7906:	ad 8c       	ldd	r10, Y+29	; 0x1d
    7908:	be 8c       	ldd	r11, Y+30	; 0x1e
    790a:	cf 8c       	ldd	r12, Y+31	; 0x1f
    790c:	d8 a0       	ldd	r13, Y+32	; 0x20
    790e:	c6 01       	movw	r24, r12
    7910:	aa 27       	eor	r26, r26
    7912:	bb 27       	eor	r27, r27
    7914:	57 01       	movw	r10, r14
    7916:	68 01       	movw	r12, r16
    7918:	a8 2a       	or	r10, r24
    791a:	b9 2a       	or	r11, r25
    791c:	ca 2a       	or	r12, r26
    791e:	db 2a       	or	r13, r27
    7920:	a2 16       	cp	r10, r18
    7922:	b3 06       	cpc	r11, r19
    7924:	c4 06       	cpc	r12, r20
    7926:	d5 06       	cpc	r13, r21
    7928:	00 f5       	brcc	.+64     	; 0x796a <__udivdi3+0xa2e>
    792a:	08 94       	sec
    792c:	21 08       	sbc	r2, r1
    792e:	31 08       	sbc	r3, r1
    7930:	41 08       	sbc	r4, r1
    7932:	51 08       	sbc	r5, r1
    7934:	ed a0       	ldd	r14, Y+37	; 0x25
    7936:	fe a0       	ldd	r15, Y+38	; 0x26
    7938:	0f a1       	ldd	r16, Y+39	; 0x27
    793a:	18 a5       	ldd	r17, Y+40	; 0x28
    793c:	ae 0c       	add	r10, r14
    793e:	bf 1c       	adc	r11, r15
    7940:	c0 1e       	adc	r12, r16
    7942:	d1 1e       	adc	r13, r17
    7944:	ae 14       	cp	r10, r14
    7946:	bf 04       	cpc	r11, r15
    7948:	c0 06       	cpc	r12, r16
    794a:	d1 06       	cpc	r13, r17
    794c:	70 f0       	brcs	.+28     	; 0x796a <__udivdi3+0xa2e>
    794e:	a2 16       	cp	r10, r18
    7950:	b3 06       	cpc	r11, r19
    7952:	c4 06       	cpc	r12, r20
    7954:	d5 06       	cpc	r13, r21
    7956:	48 f4       	brcc	.+18     	; 0x796a <__udivdi3+0xa2e>
    7958:	08 94       	sec
    795a:	21 08       	sbc	r2, r1
    795c:	31 08       	sbc	r3, r1
    795e:	41 08       	sbc	r4, r1
    7960:	51 08       	sbc	r5, r1
    7962:	ae 0c       	add	r10, r14
    7964:	bf 1c       	adc	r11, r15
    7966:	c0 1e       	adc	r12, r16
    7968:	d1 1e       	adc	r13, r17
    796a:	a2 1a       	sub	r10, r18
    796c:	b3 0a       	sbc	r11, r19
    796e:	c4 0a       	sbc	r12, r20
    7970:	d5 0a       	sbc	r13, r21
    7972:	c6 01       	movw	r24, r12
    7974:	b5 01       	movw	r22, r10
    7976:	a4 01       	movw	r20, r8
    7978:	93 01       	movw	r18, r6
    797a:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    797e:	7b 01       	movw	r14, r22
    7980:	8c 01       	movw	r16, r24
    7982:	c6 01       	movw	r24, r12
    7984:	b5 01       	movw	r22, r10
    7986:	a4 01       	movw	r20, r8
    7988:	93 01       	movw	r18, r6
    798a:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <__udivmodsi4>
    798e:	c9 01       	movw	r24, r18
    7990:	da 01       	movw	r26, r20
    7992:	3c 01       	movw	r6, r24
    7994:	4d 01       	movw	r8, r26
    7996:	c4 01       	movw	r24, r8
    7998:	b3 01       	movw	r22, r6
    799a:	65 96       	adiw	r28, 0x15	; 21
    799c:	2c ad       	ldd	r18, Y+60	; 0x3c
    799e:	3d ad       	ldd	r19, Y+61	; 0x3d
    79a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    79a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    79a4:	65 97       	sbiw	r28, 0x15	; 21
    79a6:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <__mulsi3>
    79aa:	9b 01       	movw	r18, r22
    79ac:	ac 01       	movw	r20, r24
    79ae:	87 01       	movw	r16, r14
    79b0:	ff 24       	eor	r15, r15
    79b2:	ee 24       	eor	r14, r14
    79b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    79b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    79b8:	af 8d       	ldd	r26, Y+31	; 0x1f
    79ba:	b8 a1       	ldd	r27, Y+32	; 0x20
    79bc:	a0 70       	andi	r26, 0x00	; 0
    79be:	b0 70       	andi	r27, 0x00	; 0
    79c0:	57 01       	movw	r10, r14
    79c2:	68 01       	movw	r12, r16
    79c4:	a8 2a       	or	r10, r24
    79c6:	b9 2a       	or	r11, r25
    79c8:	ca 2a       	or	r12, r26
    79ca:	db 2a       	or	r13, r27
    79cc:	a2 16       	cp	r10, r18
    79ce:	b3 06       	cpc	r11, r19
    79d0:	c4 06       	cpc	r12, r20
    79d2:	d5 06       	cpc	r13, r21
    79d4:	00 f5       	brcc	.+64     	; 0x7a16 <__udivdi3+0xada>
    79d6:	08 94       	sec
    79d8:	61 08       	sbc	r6, r1
    79da:	71 08       	sbc	r7, r1
    79dc:	81 08       	sbc	r8, r1
    79de:	91 08       	sbc	r9, r1
    79e0:	6d a1       	ldd	r22, Y+37	; 0x25
    79e2:	7e a1       	ldd	r23, Y+38	; 0x26
    79e4:	8f a1       	ldd	r24, Y+39	; 0x27
    79e6:	98 a5       	ldd	r25, Y+40	; 0x28
    79e8:	a6 0e       	add	r10, r22
    79ea:	b7 1e       	adc	r11, r23
    79ec:	c8 1e       	adc	r12, r24
    79ee:	d9 1e       	adc	r13, r25
    79f0:	a6 16       	cp	r10, r22
    79f2:	b7 06       	cpc	r11, r23
    79f4:	c8 06       	cpc	r12, r24
    79f6:	d9 06       	cpc	r13, r25
    79f8:	70 f0       	brcs	.+28     	; 0x7a16 <__udivdi3+0xada>
    79fa:	a2 16       	cp	r10, r18
    79fc:	b3 06       	cpc	r11, r19
    79fe:	c4 06       	cpc	r12, r20
    7a00:	d5 06       	cpc	r13, r21
    7a02:	48 f4       	brcc	.+18     	; 0x7a16 <__udivdi3+0xada>
    7a04:	08 94       	sec
    7a06:	61 08       	sbc	r6, r1
    7a08:	71 08       	sbc	r7, r1
    7a0a:	81 08       	sbc	r8, r1
    7a0c:	91 08       	sbc	r9, r1
    7a0e:	a6 0e       	add	r10, r22
    7a10:	b7 1e       	adc	r11, r23
    7a12:	c8 1e       	adc	r12, r24
    7a14:	d9 1e       	adc	r13, r25
    7a16:	d6 01       	movw	r26, r12
    7a18:	c5 01       	movw	r24, r10
    7a1a:	82 1b       	sub	r24, r18
    7a1c:	93 0b       	sbc	r25, r19
    7a1e:	a4 0b       	sbc	r26, r20
    7a20:	b5 0b       	sbc	r27, r21
    7a22:	89 8f       	std	Y+25, r24	; 0x19
    7a24:	9a 8f       	std	Y+26, r25	; 0x1a
    7a26:	ab 8f       	std	Y+27, r26	; 0x1b
    7a28:	bc 8f       	std	Y+28, r27	; 0x1c
    7a2a:	d1 01       	movw	r26, r2
    7a2c:	99 27       	eor	r25, r25
    7a2e:	88 27       	eor	r24, r24
    7a30:	64 01       	movw	r12, r8
    7a32:	53 01       	movw	r10, r6
    7a34:	a8 2a       	or	r10, r24
    7a36:	b9 2a       	or	r11, r25
    7a38:	ca 2a       	or	r12, r26
    7a3a:	db 2a       	or	r13, r27
    7a3c:	a9 aa       	std	Y+49, r10	; 0x31
    7a3e:	ba aa       	std	Y+50, r11	; 0x32
    7a40:	cb aa       	std	Y+51, r12	; 0x33
    7a42:	dc aa       	std	Y+52, r13	; 0x34
    7a44:	86 01       	movw	r16, r12
    7a46:	75 01       	movw	r14, r10
    7a48:	2f ef       	ldi	r18, 0xFF	; 255
    7a4a:	3f ef       	ldi	r19, 0xFF	; 255
    7a4c:	40 e0       	ldi	r20, 0x00	; 0
    7a4e:	50 e0       	ldi	r21, 0x00	; 0
    7a50:	e2 22       	and	r14, r18
    7a52:	f3 22       	and	r15, r19
    7a54:	04 23       	and	r16, r20
    7a56:	15 23       	and	r17, r21
    7a58:	a6 01       	movw	r20, r12
    7a5a:	66 27       	eor	r22, r22
    7a5c:	77 27       	eor	r23, r23
    7a5e:	6d 96       	adiw	r28, 0x1d	; 29
    7a60:	4c af       	std	Y+60, r20	; 0x3c
    7a62:	5d af       	std	Y+61, r21	; 0x3d
    7a64:	6e af       	std	Y+62, r22	; 0x3e
    7a66:	7f af       	std	Y+63, r23	; 0x3f
    7a68:	6d 97       	sbiw	r28, 0x1d	; 29
    7a6a:	a9 a0       	ldd	r10, Y+33	; 0x21
    7a6c:	ba a0       	ldd	r11, Y+34	; 0x22
    7a6e:	cb a0       	ldd	r12, Y+35	; 0x23
    7a70:	dc a0       	ldd	r13, Y+36	; 0x24
    7a72:	6f ef       	ldi	r22, 0xFF	; 255
    7a74:	7f ef       	ldi	r23, 0xFF	; 255
    7a76:	80 e0       	ldi	r24, 0x00	; 0
    7a78:	90 e0       	ldi	r25, 0x00	; 0
    7a7a:	a6 22       	and	r10, r22
    7a7c:	b7 22       	and	r11, r23
    7a7e:	c8 22       	and	r12, r24
    7a80:	d9 22       	and	r13, r25
    7a82:	89 a1       	ldd	r24, Y+33	; 0x21
    7a84:	9a a1       	ldd	r25, Y+34	; 0x22
    7a86:	ab a1       	ldd	r26, Y+35	; 0x23
    7a88:	bc a1       	ldd	r27, Y+36	; 0x24
    7a8a:	1d 01       	movw	r2, r26
    7a8c:	44 24       	eor	r4, r4
    7a8e:	55 24       	eor	r5, r5
    7a90:	c8 01       	movw	r24, r16
    7a92:	b7 01       	movw	r22, r14
    7a94:	a6 01       	movw	r20, r12
    7a96:	95 01       	movw	r18, r10
    7a98:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <__mulsi3>
    7a9c:	69 96       	adiw	r28, 0x19	; 25
    7a9e:	6c af       	std	Y+60, r22	; 0x3c
    7aa0:	7d af       	std	Y+61, r23	; 0x3d
    7aa2:	8e af       	std	Y+62, r24	; 0x3e
    7aa4:	9f af       	std	Y+63, r25	; 0x3f
    7aa6:	69 97       	sbiw	r28, 0x19	; 25
    7aa8:	c8 01       	movw	r24, r16
    7aaa:	b7 01       	movw	r22, r14
    7aac:	a2 01       	movw	r20, r4
    7aae:	91 01       	movw	r18, r2
    7ab0:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <__mulsi3>
    7ab4:	3b 01       	movw	r6, r22
    7ab6:	4c 01       	movw	r8, r24
    7ab8:	6d 96       	adiw	r28, 0x1d	; 29
    7aba:	6c ad       	ldd	r22, Y+60	; 0x3c
    7abc:	7d ad       	ldd	r23, Y+61	; 0x3d
    7abe:	8e ad       	ldd	r24, Y+62	; 0x3e
    7ac0:	9f ad       	ldd	r25, Y+63	; 0x3f
    7ac2:	6d 97       	sbiw	r28, 0x1d	; 29
    7ac4:	a6 01       	movw	r20, r12
    7ac6:	95 01       	movw	r18, r10
    7ac8:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <__mulsi3>
    7acc:	7b 01       	movw	r14, r22
    7ace:	8c 01       	movw	r16, r24
    7ad0:	6d 96       	adiw	r28, 0x1d	; 29
    7ad2:	6c ad       	ldd	r22, Y+60	; 0x3c
    7ad4:	7d ad       	ldd	r23, Y+61	; 0x3d
    7ad6:	8e ad       	ldd	r24, Y+62	; 0x3e
    7ad8:	9f ad       	ldd	r25, Y+63	; 0x3f
    7ada:	6d 97       	sbiw	r28, 0x1d	; 29
    7adc:	a2 01       	movw	r20, r4
    7ade:	91 01       	movw	r18, r2
    7ae0:	0e 94 f0 45 	call	0x8be0	; 0x8be0 <__mulsi3>
    7ae4:	5b 01       	movw	r10, r22
    7ae6:	6c 01       	movw	r12, r24
    7ae8:	a8 01       	movw	r20, r16
    7aea:	97 01       	movw	r18, r14
    7aec:	26 0d       	add	r18, r6
    7aee:	37 1d       	adc	r19, r7
    7af0:	48 1d       	adc	r20, r8
    7af2:	59 1d       	adc	r21, r9
    7af4:	69 96       	adiw	r28, 0x19	; 25
    7af6:	6c ac       	ldd	r6, Y+60	; 0x3c
    7af8:	7d ac       	ldd	r7, Y+61	; 0x3d
    7afa:	8e ac       	ldd	r8, Y+62	; 0x3e
    7afc:	9f ac       	ldd	r9, Y+63	; 0x3f
    7afe:	69 97       	sbiw	r28, 0x19	; 25
    7b00:	c4 01       	movw	r24, r8
    7b02:	aa 27       	eor	r26, r26
    7b04:	bb 27       	eor	r27, r27
    7b06:	28 0f       	add	r18, r24
    7b08:	39 1f       	adc	r19, r25
    7b0a:	4a 1f       	adc	r20, r26
    7b0c:	5b 1f       	adc	r21, r27
    7b0e:	2e 15       	cp	r18, r14
    7b10:	3f 05       	cpc	r19, r15
    7b12:	40 07       	cpc	r20, r16
    7b14:	51 07       	cpc	r21, r17
    7b16:	48 f4       	brcc	.+18     	; 0x7b2a <__udivdi3+0xbee>
    7b18:	e1 2c       	mov	r14, r1
    7b1a:	f1 2c       	mov	r15, r1
    7b1c:	61 e0       	ldi	r22, 0x01	; 1
    7b1e:	06 2f       	mov	r16, r22
    7b20:	11 2d       	mov	r17, r1
    7b22:	ae 0c       	add	r10, r14
    7b24:	bf 1c       	adc	r11, r15
    7b26:	c0 1e       	adc	r12, r16
    7b28:	d1 1e       	adc	r13, r17
    7b2a:	ca 01       	movw	r24, r20
    7b2c:	aa 27       	eor	r26, r26
    7b2e:	bb 27       	eor	r27, r27
    7b30:	bc 01       	movw	r22, r24
    7b32:	cd 01       	movw	r24, r26
    7b34:	6a 0d       	add	r22, r10
    7b36:	7b 1d       	adc	r23, r11
    7b38:	8c 1d       	adc	r24, r12
    7b3a:	9d 1d       	adc	r25, r13
    7b3c:	69 8c       	ldd	r6, Y+25	; 0x19
    7b3e:	7a 8c       	ldd	r7, Y+26	; 0x1a
    7b40:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7b42:	9c 8c       	ldd	r9, Y+28	; 0x1c
    7b44:	66 16       	cp	r6, r22
    7b46:	77 06       	cpc	r7, r23
    7b48:	88 06       	cpc	r8, r24
    7b4a:	99 06       	cpc	r9, r25
    7b4c:	40 f1       	brcs	.+80     	; 0x7b9e <__udivdi3+0xc62>
    7b4e:	66 15       	cp	r22, r6
    7b50:	77 05       	cpc	r23, r7
    7b52:	88 05       	cpc	r24, r8
    7b54:	99 05       	cpc	r25, r9
    7b56:	09 f0       	breq	.+2      	; 0x7b5a <__udivdi3+0xc1e>
    7b58:	43 c0       	rjmp	.+134    	; 0x7be0 <__udivdi3+0xca4>
    7b5a:	d9 01       	movw	r26, r18
    7b5c:	99 27       	eor	r25, r25
    7b5e:	88 27       	eor	r24, r24
    7b60:	69 96       	adiw	r28, 0x19	; 25
    7b62:	2c ad       	ldd	r18, Y+60	; 0x3c
    7b64:	3d ad       	ldd	r19, Y+61	; 0x3d
    7b66:	4e ad       	ldd	r20, Y+62	; 0x3e
    7b68:	5f ad       	ldd	r21, Y+63	; 0x3f
    7b6a:	69 97       	sbiw	r28, 0x19	; 25
    7b6c:	40 70       	andi	r20, 0x00	; 0
    7b6e:	50 70       	andi	r21, 0x00	; 0
    7b70:	82 0f       	add	r24, r18
    7b72:	93 1f       	adc	r25, r19
    7b74:	a4 1f       	adc	r26, r20
    7b76:	b5 1f       	adc	r27, r21
    7b78:	2d a5       	ldd	r18, Y+45	; 0x2d
    7b7a:	3e a5       	ldd	r19, Y+46	; 0x2e
    7b7c:	4f a5       	ldd	r20, Y+47	; 0x2f
    7b7e:	58 a9       	ldd	r21, Y+48	; 0x30
    7b80:	6e 96       	adiw	r28, 0x1e	; 30
    7b82:	0f ac       	ldd	r0, Y+63	; 0x3f
    7b84:	6e 97       	sbiw	r28, 0x1e	; 30
    7b86:	04 c0       	rjmp	.+8      	; 0x7b90 <__udivdi3+0xc54>
    7b88:	22 0f       	add	r18, r18
    7b8a:	33 1f       	adc	r19, r19
    7b8c:	44 1f       	adc	r20, r20
    7b8e:	55 1f       	adc	r21, r21
    7b90:	0a 94       	dec	r0
    7b92:	d2 f7       	brpl	.-12     	; 0x7b88 <__udivdi3+0xc4c>
    7b94:	28 17       	cp	r18, r24
    7b96:	39 07       	cpc	r19, r25
    7b98:	4a 07       	cpc	r20, r26
    7b9a:	5b 07       	cpc	r21, r27
    7b9c:	08 f5       	brcc	.+66     	; 0x7be0 <__udivdi3+0xca4>
    7b9e:	09 a9       	ldd	r16, Y+49	; 0x31
    7ba0:	1a a9       	ldd	r17, Y+50	; 0x32
    7ba2:	2b a9       	ldd	r18, Y+51	; 0x33
    7ba4:	3c a9       	ldd	r19, Y+52	; 0x34
    7ba6:	01 50       	subi	r16, 0x01	; 1
    7ba8:	10 40       	sbci	r17, 0x00	; 0
    7baa:	20 40       	sbci	r18, 0x00	; 0
    7bac:	30 40       	sbci	r19, 0x00	; 0
    7bae:	09 ab       	std	Y+49, r16	; 0x31
    7bb0:	1a ab       	std	Y+50, r17	; 0x32
    7bb2:	2b ab       	std	Y+51, r18	; 0x33
    7bb4:	3c ab       	std	Y+52, r19	; 0x34
    7bb6:	14 c0       	rjmp	.+40     	; 0x7be0 <__udivdi3+0xca4>
    7bb8:	66 24       	eor	r6, r6
    7bba:	77 24       	eor	r7, r7
    7bbc:	43 01       	movw	r8, r6
    7bbe:	21 e0       	ldi	r18, 0x01	; 1
    7bc0:	30 e0       	ldi	r19, 0x00	; 0
    7bc2:	40 e0       	ldi	r20, 0x00	; 0
    7bc4:	50 e0       	ldi	r21, 0x00	; 0
    7bc6:	29 ab       	std	Y+49, r18	; 0x31
    7bc8:	3a ab       	std	Y+50, r19	; 0x32
    7bca:	4b ab       	std	Y+51, r20	; 0x33
    7bcc:	5c ab       	std	Y+52, r21	; 0x34
    7bce:	0b c0       	rjmp	.+22     	; 0x7be6 <__udivdi3+0xcaa>
    7bd0:	66 24       	eor	r6, r6
    7bd2:	77 24       	eor	r7, r7
    7bd4:	43 01       	movw	r8, r6
    7bd6:	19 aa       	std	Y+49, r1	; 0x31
    7bd8:	1a aa       	std	Y+50, r1	; 0x32
    7bda:	1b aa       	std	Y+51, r1	; 0x33
    7bdc:	1c aa       	std	Y+52, r1	; 0x34
    7bde:	03 c0       	rjmp	.+6      	; 0x7be6 <__udivdi3+0xcaa>
    7be0:	66 24       	eor	r6, r6
    7be2:	77 24       	eor	r7, r7
    7be4:	43 01       	movw	r8, r6
    7be6:	fe 01       	movw	r30, r28
    7be8:	71 96       	adiw	r30, 0x11	; 17
    7bea:	88 e0       	ldi	r24, 0x08	; 8
    7bec:	df 01       	movw	r26, r30
    7bee:	1d 92       	st	X+, r1
    7bf0:	8a 95       	dec	r24
    7bf2:	e9 f7       	brne	.-6      	; 0x7bee <__udivdi3+0xcb2>
    7bf4:	a9 a8       	ldd	r10, Y+49	; 0x31
    7bf6:	ba a8       	ldd	r11, Y+50	; 0x32
    7bf8:	cb a8       	ldd	r12, Y+51	; 0x33
    7bfa:	dc a8       	ldd	r13, Y+52	; 0x34
    7bfc:	a9 8a       	std	Y+17, r10	; 0x11
    7bfe:	ba 8a       	std	Y+18, r11	; 0x12
    7c00:	cb 8a       	std	Y+19, r12	; 0x13
    7c02:	dc 8a       	std	Y+20, r13	; 0x14
    7c04:	6d 8a       	std	Y+21, r6	; 0x15
    7c06:	7e 8a       	std	Y+22, r7	; 0x16
    7c08:	8f 8a       	std	Y+23, r8	; 0x17
    7c0a:	98 8e       	std	Y+24, r9	; 0x18
    7c0c:	29 a9       	ldd	r18, Y+49	; 0x31
    7c0e:	3a 89       	ldd	r19, Y+18	; 0x12
    7c10:	4b 89       	ldd	r20, Y+19	; 0x13
    7c12:	5c 89       	ldd	r21, Y+20	; 0x14
    7c14:	66 2d       	mov	r22, r6
    7c16:	7e 89       	ldd	r23, Y+22	; 0x16
    7c18:	8f 89       	ldd	r24, Y+23	; 0x17
    7c1a:	98 8d       	ldd	r25, Y+24	; 0x18
    7c1c:	c2 5a       	subi	r28, 0xA2	; 162
    7c1e:	df 4f       	sbci	r29, 0xFF	; 255
    7c20:	e2 e1       	ldi	r30, 0x12	; 18
    7c22:	0c 94 4d 46 	jmp	0x8c9a	; 0x8c9a <__epilogue_restores__>

00007c26 <vfprintf>:
    7c26:	2f 92       	push	r2
    7c28:	3f 92       	push	r3
    7c2a:	4f 92       	push	r4
    7c2c:	5f 92       	push	r5
    7c2e:	6f 92       	push	r6
    7c30:	7f 92       	push	r7
    7c32:	8f 92       	push	r8
    7c34:	9f 92       	push	r9
    7c36:	af 92       	push	r10
    7c38:	bf 92       	push	r11
    7c3a:	cf 92       	push	r12
    7c3c:	df 92       	push	r13
    7c3e:	ef 92       	push	r14
    7c40:	ff 92       	push	r15
    7c42:	0f 93       	push	r16
    7c44:	1f 93       	push	r17
    7c46:	df 93       	push	r29
    7c48:	cf 93       	push	r28
    7c4a:	cd b7       	in	r28, 0x3d	; 61
    7c4c:	de b7       	in	r29, 0x3e	; 62
    7c4e:	61 97       	sbiw	r28, 0x11	; 17
    7c50:	cd bf       	out	0x3d, r28	; 61
    7c52:	de bf       	out	0x3e, r29	; 62
    7c54:	3c 01       	movw	r6, r24
    7c56:	6e 87       	std	Y+14, r22	; 0x0e
    7c58:	7f 87       	std	Y+15, r23	; 0x0f
    7c5a:	6a 01       	movw	r12, r20
    7c5c:	fc 01       	movw	r30, r24
    7c5e:	16 82       	std	Z+6, r1	; 0x06
    7c60:	17 82       	std	Z+7, r1	; 0x07
    7c62:	83 81       	ldd	r24, Z+3	; 0x03
    7c64:	81 fd       	sbrc	r24, 1
    7c66:	03 c0       	rjmp	.+6      	; 0x7c6e <vfprintf+0x48>
    7c68:	6f ef       	ldi	r22, 0xFF	; 255
    7c6a:	7f ef       	ldi	r23, 0xFF	; 255
    7c6c:	6f c3       	rjmp	.+1758   	; 0x834c <vfprintf+0x726>
    7c6e:	9e 01       	movw	r18, r28
    7c70:	2f 5f       	subi	r18, 0xFF	; 255
    7c72:	3f 4f       	sbci	r19, 0xFF	; 255
    7c74:	28 8b       	std	Y+16, r18	; 0x10
    7c76:	39 8b       	std	Y+17, r19	; 0x11
    7c78:	f3 01       	movw	r30, r6
    7c7a:	23 81       	ldd	r18, Z+3	; 0x03
    7c7c:	ee 85       	ldd	r30, Y+14	; 0x0e
    7c7e:	ff 85       	ldd	r31, Y+15	; 0x0f
    7c80:	23 fd       	sbrc	r18, 3
    7c82:	85 91       	lpm	r24, Z+
    7c84:	23 ff       	sbrs	r18, 3
    7c86:	81 91       	ld	r24, Z+
    7c88:	ee 87       	std	Y+14, r30	; 0x0e
    7c8a:	ff 87       	std	Y+15, r31	; 0x0f
    7c8c:	88 23       	and	r24, r24
    7c8e:	09 f4       	brne	.+2      	; 0x7c92 <vfprintf+0x6c>
    7c90:	5a c3       	rjmp	.+1716   	; 0x8346 <vfprintf+0x720>
    7c92:	85 32       	cpi	r24, 0x25	; 37
    7c94:	51 f4       	brne	.+20     	; 0x7caa <vfprintf+0x84>
    7c96:	ee 85       	ldd	r30, Y+14	; 0x0e
    7c98:	ff 85       	ldd	r31, Y+15	; 0x0f
    7c9a:	23 fd       	sbrc	r18, 3
    7c9c:	85 91       	lpm	r24, Z+
    7c9e:	23 ff       	sbrs	r18, 3
    7ca0:	81 91       	ld	r24, Z+
    7ca2:	ee 87       	std	Y+14, r30	; 0x0e
    7ca4:	ff 87       	std	Y+15, r31	; 0x0f
    7ca6:	85 32       	cpi	r24, 0x25	; 37
    7ca8:	29 f4       	brne	.+10     	; 0x7cb4 <vfprintf+0x8e>
    7caa:	90 e0       	ldi	r25, 0x00	; 0
    7cac:	b3 01       	movw	r22, r6
    7cae:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    7cb2:	e2 cf       	rjmp	.-60     	; 0x7c78 <vfprintf+0x52>
    7cb4:	98 2f       	mov	r25, r24
    7cb6:	10 e0       	ldi	r17, 0x00	; 0
    7cb8:	88 24       	eor	r8, r8
    7cba:	99 24       	eor	r9, r9
    7cbc:	10 32       	cpi	r17, 0x20	; 32
    7cbe:	b0 f4       	brcc	.+44     	; 0x7cec <vfprintf+0xc6>
    7cc0:	9b 32       	cpi	r25, 0x2B	; 43
    7cc2:	69 f0       	breq	.+26     	; 0x7cde <vfprintf+0xb8>
    7cc4:	9c 32       	cpi	r25, 0x2C	; 44
    7cc6:	28 f4       	brcc	.+10     	; 0x7cd2 <vfprintf+0xac>
    7cc8:	90 32       	cpi	r25, 0x20	; 32
    7cca:	51 f0       	breq	.+20     	; 0x7ce0 <vfprintf+0xba>
    7ccc:	93 32       	cpi	r25, 0x23	; 35
    7cce:	71 f4       	brne	.+28     	; 0x7cec <vfprintf+0xc6>
    7cd0:	0b c0       	rjmp	.+22     	; 0x7ce8 <vfprintf+0xc2>
    7cd2:	9d 32       	cpi	r25, 0x2D	; 45
    7cd4:	39 f0       	breq	.+14     	; 0x7ce4 <vfprintf+0xbe>
    7cd6:	90 33       	cpi	r25, 0x30	; 48
    7cd8:	49 f4       	brne	.+18     	; 0x7cec <vfprintf+0xc6>
    7cda:	11 60       	ori	r17, 0x01	; 1
    7cdc:	28 c0       	rjmp	.+80     	; 0x7d2e <vfprintf+0x108>
    7cde:	12 60       	ori	r17, 0x02	; 2
    7ce0:	14 60       	ori	r17, 0x04	; 4
    7ce2:	25 c0       	rjmp	.+74     	; 0x7d2e <vfprintf+0x108>
    7ce4:	18 60       	ori	r17, 0x08	; 8
    7ce6:	23 c0       	rjmp	.+70     	; 0x7d2e <vfprintf+0x108>
    7ce8:	10 61       	ori	r17, 0x10	; 16
    7cea:	21 c0       	rjmp	.+66     	; 0x7d2e <vfprintf+0x108>
    7cec:	17 fd       	sbrc	r17, 7
    7cee:	2a c0       	rjmp	.+84     	; 0x7d44 <vfprintf+0x11e>
    7cf0:	89 2f       	mov	r24, r25
    7cf2:	80 53       	subi	r24, 0x30	; 48
    7cf4:	8a 30       	cpi	r24, 0x0A	; 10
    7cf6:	78 f4       	brcc	.+30     	; 0x7d16 <vfprintf+0xf0>
    7cf8:	16 ff       	sbrs	r17, 6
    7cfa:	06 c0       	rjmp	.+12     	; 0x7d08 <vfprintf+0xe2>
    7cfc:	fa e0       	ldi	r31, 0x0A	; 10
    7cfe:	9f 9e       	mul	r9, r31
    7d00:	90 2c       	mov	r9, r0
    7d02:	11 24       	eor	r1, r1
    7d04:	98 0e       	add	r9, r24
    7d06:	13 c0       	rjmp	.+38     	; 0x7d2e <vfprintf+0x108>
    7d08:	3a e0       	ldi	r19, 0x0A	; 10
    7d0a:	83 9e       	mul	r8, r19
    7d0c:	80 2c       	mov	r8, r0
    7d0e:	11 24       	eor	r1, r1
    7d10:	88 0e       	add	r8, r24
    7d12:	10 62       	ori	r17, 0x20	; 32
    7d14:	0c c0       	rjmp	.+24     	; 0x7d2e <vfprintf+0x108>
    7d16:	9e 32       	cpi	r25, 0x2E	; 46
    7d18:	21 f4       	brne	.+8      	; 0x7d22 <vfprintf+0xfc>
    7d1a:	16 fd       	sbrc	r17, 6
    7d1c:	14 c3       	rjmp	.+1576   	; 0x8346 <vfprintf+0x720>
    7d1e:	10 64       	ori	r17, 0x40	; 64
    7d20:	06 c0       	rjmp	.+12     	; 0x7d2e <vfprintf+0x108>
    7d22:	9c 36       	cpi	r25, 0x6C	; 108
    7d24:	11 f4       	brne	.+4      	; 0x7d2a <vfprintf+0x104>
    7d26:	10 68       	ori	r17, 0x80	; 128
    7d28:	02 c0       	rjmp	.+4      	; 0x7d2e <vfprintf+0x108>
    7d2a:	98 36       	cpi	r25, 0x68	; 104
    7d2c:	59 f4       	brne	.+22     	; 0x7d44 <vfprintf+0x11e>
    7d2e:	ee 85       	ldd	r30, Y+14	; 0x0e
    7d30:	ff 85       	ldd	r31, Y+15	; 0x0f
    7d32:	23 fd       	sbrc	r18, 3
    7d34:	95 91       	lpm	r25, Z+
    7d36:	23 ff       	sbrs	r18, 3
    7d38:	91 91       	ld	r25, Z+
    7d3a:	ee 87       	std	Y+14, r30	; 0x0e
    7d3c:	ff 87       	std	Y+15, r31	; 0x0f
    7d3e:	99 23       	and	r25, r25
    7d40:	09 f0       	breq	.+2      	; 0x7d44 <vfprintf+0x11e>
    7d42:	bc cf       	rjmp	.-136    	; 0x7cbc <vfprintf+0x96>
    7d44:	89 2f       	mov	r24, r25
    7d46:	85 54       	subi	r24, 0x45	; 69
    7d48:	83 30       	cpi	r24, 0x03	; 3
    7d4a:	20 f4       	brcc	.+8      	; 0x7d54 <vfprintf+0x12e>
    7d4c:	81 2f       	mov	r24, r17
    7d4e:	80 61       	ori	r24, 0x10	; 16
    7d50:	90 5e       	subi	r25, 0xE0	; 224
    7d52:	07 c0       	rjmp	.+14     	; 0x7d62 <vfprintf+0x13c>
    7d54:	89 2f       	mov	r24, r25
    7d56:	85 56       	subi	r24, 0x65	; 101
    7d58:	83 30       	cpi	r24, 0x03	; 3
    7d5a:	08 f0       	brcs	.+2      	; 0x7d5e <vfprintf+0x138>
    7d5c:	9f c1       	rjmp	.+830    	; 0x809c <vfprintf+0x476>
    7d5e:	81 2f       	mov	r24, r17
    7d60:	8f 7e       	andi	r24, 0xEF	; 239
    7d62:	86 fd       	sbrc	r24, 6
    7d64:	02 c0       	rjmp	.+4      	; 0x7d6a <vfprintf+0x144>
    7d66:	76 e0       	ldi	r23, 0x06	; 6
    7d68:	97 2e       	mov	r9, r23
    7d6a:	6f e3       	ldi	r22, 0x3F	; 63
    7d6c:	f6 2e       	mov	r15, r22
    7d6e:	f8 22       	and	r15, r24
    7d70:	95 36       	cpi	r25, 0x65	; 101
    7d72:	19 f4       	brne	.+6      	; 0x7d7a <vfprintf+0x154>
    7d74:	f0 e4       	ldi	r31, 0x40	; 64
    7d76:	ff 2a       	or	r15, r31
    7d78:	07 c0       	rjmp	.+14     	; 0x7d88 <vfprintf+0x162>
    7d7a:	96 36       	cpi	r25, 0x66	; 102
    7d7c:	19 f4       	brne	.+6      	; 0x7d84 <vfprintf+0x15e>
    7d7e:	20 e8       	ldi	r18, 0x80	; 128
    7d80:	f2 2a       	or	r15, r18
    7d82:	02 c0       	rjmp	.+4      	; 0x7d88 <vfprintf+0x162>
    7d84:	91 10       	cpse	r9, r1
    7d86:	9a 94       	dec	r9
    7d88:	f7 fe       	sbrs	r15, 7
    7d8a:	0a c0       	rjmp	.+20     	; 0x7da0 <vfprintf+0x17a>
    7d8c:	3b e3       	ldi	r19, 0x3B	; 59
    7d8e:	39 15       	cp	r19, r9
    7d90:	18 f4       	brcc	.+6      	; 0x7d98 <vfprintf+0x172>
    7d92:	5c e3       	ldi	r21, 0x3C	; 60
    7d94:	b5 2e       	mov	r11, r21
    7d96:	02 c0       	rjmp	.+4      	; 0x7d9c <vfprintf+0x176>
    7d98:	b9 2c       	mov	r11, r9
    7d9a:	b3 94       	inc	r11
    7d9c:	27 e0       	ldi	r18, 0x07	; 7
    7d9e:	09 c0       	rjmp	.+18     	; 0x7db2 <vfprintf+0x18c>
    7da0:	47 e0       	ldi	r20, 0x07	; 7
    7da2:	49 15       	cp	r20, r9
    7da4:	20 f4       	brcc	.+8      	; 0x7dae <vfprintf+0x188>
    7da6:	bb 24       	eor	r11, r11
    7da8:	47 e0       	ldi	r20, 0x07	; 7
    7daa:	94 2e       	mov	r9, r20
    7dac:	f7 cf       	rjmp	.-18     	; 0x7d9c <vfprintf+0x176>
    7dae:	29 2d       	mov	r18, r9
    7db0:	bb 24       	eor	r11, r11
    7db2:	c6 01       	movw	r24, r12
    7db4:	04 96       	adiw	r24, 0x04	; 4
    7db6:	8c 87       	std	Y+12, r24	; 0x0c
    7db8:	9d 87       	std	Y+13, r25	; 0x0d
    7dba:	f6 01       	movw	r30, r12
    7dbc:	60 81       	ld	r22, Z
    7dbe:	71 81       	ldd	r23, Z+1	; 0x01
    7dc0:	82 81       	ldd	r24, Z+2	; 0x02
    7dc2:	93 81       	ldd	r25, Z+3	; 0x03
    7dc4:	ae 01       	movw	r20, r28
    7dc6:	4f 5f       	subi	r20, 0xFF	; 255
    7dc8:	5f 4f       	sbci	r21, 0xFF	; 255
    7dca:	0b 2d       	mov	r16, r11
    7dcc:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <__ftoa_engine>
    7dd0:	6c 01       	movw	r12, r24
    7dd2:	09 81       	ldd	r16, Y+1	; 0x01
    7dd4:	20 2e       	mov	r2, r16
    7dd6:	33 24       	eor	r3, r3
    7dd8:	00 ff       	sbrs	r16, 0
    7dda:	04 c0       	rjmp	.+8      	; 0x7de4 <vfprintf+0x1be>
    7ddc:	03 fd       	sbrc	r16, 3
    7dde:	02 c0       	rjmp	.+4      	; 0x7de4 <vfprintf+0x1be>
    7de0:	1d e2       	ldi	r17, 0x2D	; 45
    7de2:	09 c0       	rjmp	.+18     	; 0x7df6 <vfprintf+0x1d0>
    7de4:	f1 fe       	sbrs	r15, 1
    7de6:	02 c0       	rjmp	.+4      	; 0x7dec <vfprintf+0x1c6>
    7de8:	1b e2       	ldi	r17, 0x2B	; 43
    7dea:	05 c0       	rjmp	.+10     	; 0x7df6 <vfprintf+0x1d0>
    7dec:	f2 fc       	sbrc	r15, 2
    7dee:	02 c0       	rjmp	.+4      	; 0x7df4 <vfprintf+0x1ce>
    7df0:	10 e0       	ldi	r17, 0x00	; 0
    7df2:	01 c0       	rjmp	.+2      	; 0x7df6 <vfprintf+0x1d0>
    7df4:	10 e2       	ldi	r17, 0x20	; 32
    7df6:	c1 01       	movw	r24, r2
    7df8:	8c 70       	andi	r24, 0x0C	; 12
    7dfa:	90 70       	andi	r25, 0x00	; 0
    7dfc:	89 2b       	or	r24, r25
    7dfe:	b9 f1       	breq	.+110    	; 0x7e6e <vfprintf+0x248>
    7e00:	11 23       	and	r17, r17
    7e02:	11 f4       	brne	.+4      	; 0x7e08 <vfprintf+0x1e2>
    7e04:	83 e0       	ldi	r24, 0x03	; 3
    7e06:	01 c0       	rjmp	.+2      	; 0x7e0a <vfprintf+0x1e4>
    7e08:	84 e0       	ldi	r24, 0x04	; 4
    7e0a:	88 15       	cp	r24, r8
    7e0c:	10 f0       	brcs	.+4      	; 0x7e12 <vfprintf+0x1ec>
    7e0e:	88 24       	eor	r8, r8
    7e10:	0a c0       	rjmp	.+20     	; 0x7e26 <vfprintf+0x200>
    7e12:	88 1a       	sub	r8, r24
    7e14:	f3 fc       	sbrc	r15, 3
    7e16:	07 c0       	rjmp	.+14     	; 0x7e26 <vfprintf+0x200>
    7e18:	80 e2       	ldi	r24, 0x20	; 32
    7e1a:	90 e0       	ldi	r25, 0x00	; 0
    7e1c:	b3 01       	movw	r22, r6
    7e1e:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    7e22:	8a 94       	dec	r8
    7e24:	c9 f7       	brne	.-14     	; 0x7e18 <vfprintf+0x1f2>
    7e26:	11 23       	and	r17, r17
    7e28:	29 f0       	breq	.+10     	; 0x7e34 <vfprintf+0x20e>
    7e2a:	81 2f       	mov	r24, r17
    7e2c:	90 e0       	ldi	r25, 0x00	; 0
    7e2e:	b3 01       	movw	r22, r6
    7e30:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    7e34:	23 fe       	sbrs	r2, 3
    7e36:	03 c0       	rjmp	.+6      	; 0x7e3e <vfprintf+0x218>
    7e38:	03 e3       	ldi	r16, 0x33	; 51
    7e3a:	12 e0       	ldi	r17, 0x02	; 2
    7e3c:	0e c0       	rjmp	.+28     	; 0x7e5a <vfprintf+0x234>
    7e3e:	07 e3       	ldi	r16, 0x37	; 55
    7e40:	12 e0       	ldi	r17, 0x02	; 2
    7e42:	0b c0       	rjmp	.+22     	; 0x7e5a <vfprintf+0x234>
    7e44:	e1 14       	cp	r14, r1
    7e46:	f1 04       	cpc	r15, r1
    7e48:	09 f0       	breq	.+2      	; 0x7e4c <vfprintf+0x226>
    7e4a:	80 52       	subi	r24, 0x20	; 32
    7e4c:	90 e0       	ldi	r25, 0x00	; 0
    7e4e:	b3 01       	movw	r22, r6
    7e50:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    7e54:	0f 5f       	subi	r16, 0xFF	; 255
    7e56:	1f 4f       	sbci	r17, 0xFF	; 255
    7e58:	05 c0       	rjmp	.+10     	; 0x7e64 <vfprintf+0x23e>
    7e5a:	ef 2c       	mov	r14, r15
    7e5c:	ff 24       	eor	r15, r15
    7e5e:	f0 e1       	ldi	r31, 0x10	; 16
    7e60:	ef 22       	and	r14, r31
    7e62:	ff 24       	eor	r15, r15
    7e64:	f8 01       	movw	r30, r16
    7e66:	84 91       	lpm	r24, Z+
    7e68:	88 23       	and	r24, r24
    7e6a:	61 f7       	brne	.-40     	; 0x7e44 <vfprintf+0x21e>
    7e6c:	14 c1       	rjmp	.+552    	; 0x8096 <vfprintf+0x470>
    7e6e:	f7 fe       	sbrs	r15, 7
    7e70:	12 c0       	rjmp	.+36     	; 0x7e96 <vfprintf+0x270>
    7e72:	bc 0c       	add	r11, r12
    7e74:	24 fe       	sbrs	r2, 4
    7e76:	04 c0       	rjmp	.+8      	; 0x7e80 <vfprintf+0x25a>
    7e78:	8a 81       	ldd	r24, Y+2	; 0x02
    7e7a:	81 33       	cpi	r24, 0x31	; 49
    7e7c:	09 f4       	brne	.+2      	; 0x7e80 <vfprintf+0x25a>
    7e7e:	ba 94       	dec	r11
    7e80:	1b 14       	cp	r1, r11
    7e82:	1c f0       	brlt	.+6      	; 0x7e8a <vfprintf+0x264>
    7e84:	bb 24       	eor	r11, r11
    7e86:	b3 94       	inc	r11
    7e88:	2d c0       	rjmp	.+90     	; 0x7ee4 <vfprintf+0x2be>
    7e8a:	f8 e0       	ldi	r31, 0x08	; 8
    7e8c:	fb 15       	cp	r31, r11
    7e8e:	50 f5       	brcc	.+84     	; 0x7ee4 <vfprintf+0x2be>
    7e90:	38 e0       	ldi	r19, 0x08	; 8
    7e92:	b3 2e       	mov	r11, r19
    7e94:	27 c0       	rjmp	.+78     	; 0x7ee4 <vfprintf+0x2be>
    7e96:	f6 fc       	sbrc	r15, 6
    7e98:	25 c0       	rjmp	.+74     	; 0x7ee4 <vfprintf+0x2be>
    7e9a:	89 2d       	mov	r24, r9
    7e9c:	90 e0       	ldi	r25, 0x00	; 0
    7e9e:	8c 15       	cp	r24, r12
    7ea0:	9d 05       	cpc	r25, r13
    7ea2:	4c f0       	brlt	.+18     	; 0x7eb6 <vfprintf+0x290>
    7ea4:	2c ef       	ldi	r18, 0xFC	; 252
    7ea6:	c2 16       	cp	r12, r18
    7ea8:	2f ef       	ldi	r18, 0xFF	; 255
    7eaa:	d2 06       	cpc	r13, r18
    7eac:	24 f0       	brlt	.+8      	; 0x7eb6 <vfprintf+0x290>
    7eae:	30 e8       	ldi	r19, 0x80	; 128
    7eb0:	f3 2a       	or	r15, r19
    7eb2:	01 c0       	rjmp	.+2      	; 0x7eb6 <vfprintf+0x290>
    7eb4:	9a 94       	dec	r9
    7eb6:	99 20       	and	r9, r9
    7eb8:	49 f0       	breq	.+18     	; 0x7ecc <vfprintf+0x2a6>
    7eba:	e2 e0       	ldi	r30, 0x02	; 2
    7ebc:	f0 e0       	ldi	r31, 0x00	; 0
    7ebe:	ec 0f       	add	r30, r28
    7ec0:	fd 1f       	adc	r31, r29
    7ec2:	e9 0d       	add	r30, r9
    7ec4:	f1 1d       	adc	r31, r1
    7ec6:	80 81       	ld	r24, Z
    7ec8:	80 33       	cpi	r24, 0x30	; 48
    7eca:	a1 f3       	breq	.-24     	; 0x7eb4 <vfprintf+0x28e>
    7ecc:	f7 fe       	sbrs	r15, 7
    7ece:	0a c0       	rjmp	.+20     	; 0x7ee4 <vfprintf+0x2be>
    7ed0:	b9 2c       	mov	r11, r9
    7ed2:	b3 94       	inc	r11
    7ed4:	89 2d       	mov	r24, r9
    7ed6:	90 e0       	ldi	r25, 0x00	; 0
    7ed8:	c8 16       	cp	r12, r24
    7eda:	d9 06       	cpc	r13, r25
    7edc:	14 f0       	brlt	.+4      	; 0x7ee2 <vfprintf+0x2bc>
    7ede:	99 24       	eor	r9, r9
    7ee0:	01 c0       	rjmp	.+2      	; 0x7ee4 <vfprintf+0x2be>
    7ee2:	9c 18       	sub	r9, r12
    7ee4:	f7 fc       	sbrc	r15, 7
    7ee6:	03 c0       	rjmp	.+6      	; 0x7eee <vfprintf+0x2c8>
    7ee8:	25 e0       	ldi	r18, 0x05	; 5
    7eea:	30 e0       	ldi	r19, 0x00	; 0
    7eec:	09 c0       	rjmp	.+18     	; 0x7f00 <vfprintf+0x2da>
    7eee:	1c 14       	cp	r1, r12
    7ef0:	1d 04       	cpc	r1, r13
    7ef2:	1c f0       	brlt	.+6      	; 0x7efa <vfprintf+0x2d4>
    7ef4:	21 e0       	ldi	r18, 0x01	; 1
    7ef6:	30 e0       	ldi	r19, 0x00	; 0
    7ef8:	03 c0       	rjmp	.+6      	; 0x7f00 <vfprintf+0x2da>
    7efa:	96 01       	movw	r18, r12
    7efc:	2f 5f       	subi	r18, 0xFF	; 255
    7efe:	3f 4f       	sbci	r19, 0xFF	; 255
    7f00:	11 23       	and	r17, r17
    7f02:	11 f0       	breq	.+4      	; 0x7f08 <vfprintf+0x2e2>
    7f04:	2f 5f       	subi	r18, 0xFF	; 255
    7f06:	3f 4f       	sbci	r19, 0xFF	; 255
    7f08:	99 20       	and	r9, r9
    7f0a:	29 f0       	breq	.+10     	; 0x7f16 <vfprintf+0x2f0>
    7f0c:	89 2d       	mov	r24, r9
    7f0e:	90 e0       	ldi	r25, 0x00	; 0
    7f10:	01 96       	adiw	r24, 0x01	; 1
    7f12:	28 0f       	add	r18, r24
    7f14:	39 1f       	adc	r19, r25
    7f16:	88 2d       	mov	r24, r8
    7f18:	90 e0       	ldi	r25, 0x00	; 0
    7f1a:	28 17       	cp	r18, r24
    7f1c:	39 07       	cpc	r19, r25
    7f1e:	14 f0       	brlt	.+4      	; 0x7f24 <vfprintf+0x2fe>
    7f20:	88 24       	eor	r8, r8
    7f22:	01 c0       	rjmp	.+2      	; 0x7f26 <vfprintf+0x300>
    7f24:	82 1a       	sub	r8, r18
    7f26:	4f 2c       	mov	r4, r15
    7f28:	55 24       	eor	r5, r5
    7f2a:	c2 01       	movw	r24, r4
    7f2c:	89 70       	andi	r24, 0x09	; 9
    7f2e:	90 70       	andi	r25, 0x00	; 0
    7f30:	89 2b       	or	r24, r25
    7f32:	39 f0       	breq	.+14     	; 0x7f42 <vfprintf+0x31c>
    7f34:	08 c0       	rjmp	.+16     	; 0x7f46 <vfprintf+0x320>
    7f36:	80 e2       	ldi	r24, 0x20	; 32
    7f38:	90 e0       	ldi	r25, 0x00	; 0
    7f3a:	b3 01       	movw	r22, r6
    7f3c:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    7f40:	8a 94       	dec	r8
    7f42:	88 20       	and	r8, r8
    7f44:	c1 f7       	brne	.-16     	; 0x7f36 <vfprintf+0x310>
    7f46:	11 23       	and	r17, r17
    7f48:	29 f0       	breq	.+10     	; 0x7f54 <vfprintf+0x32e>
    7f4a:	81 2f       	mov	r24, r17
    7f4c:	90 e0       	ldi	r25, 0x00	; 0
    7f4e:	b3 01       	movw	r22, r6
    7f50:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    7f54:	43 fe       	sbrs	r4, 3
    7f56:	07 c0       	rjmp	.+14     	; 0x7f66 <vfprintf+0x340>
    7f58:	08 c0       	rjmp	.+16     	; 0x7f6a <vfprintf+0x344>
    7f5a:	80 e3       	ldi	r24, 0x30	; 48
    7f5c:	90 e0       	ldi	r25, 0x00	; 0
    7f5e:	b3 01       	movw	r22, r6
    7f60:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    7f64:	8a 94       	dec	r8
    7f66:	88 20       	and	r8, r8
    7f68:	c1 f7       	brne	.-16     	; 0x7f5a <vfprintf+0x334>
    7f6a:	f7 fe       	sbrs	r15, 7
    7f6c:	46 c0       	rjmp	.+140    	; 0x7ffa <vfprintf+0x3d4>
    7f6e:	86 01       	movw	r16, r12
    7f70:	d7 fe       	sbrs	r13, 7
    7f72:	02 c0       	rjmp	.+4      	; 0x7f78 <vfprintf+0x352>
    7f74:	00 e0       	ldi	r16, 0x00	; 0
    7f76:	10 e0       	ldi	r17, 0x00	; 0
    7f78:	76 01       	movw	r14, r12
    7f7a:	08 94       	sec
    7f7c:	e1 1c       	adc	r14, r1
    7f7e:	f1 1c       	adc	r15, r1
    7f80:	e0 1a       	sub	r14, r16
    7f82:	f1 0a       	sbc	r15, r17
    7f84:	41 e0       	ldi	r20, 0x01	; 1
    7f86:	50 e0       	ldi	r21, 0x00	; 0
    7f88:	4c 0f       	add	r20, r28
    7f8a:	5d 1f       	adc	r21, r29
    7f8c:	e4 0e       	add	r14, r20
    7f8e:	f5 1e       	adc	r15, r21
    7f90:	26 01       	movw	r4, r12
    7f92:	4b 18       	sub	r4, r11
    7f94:	51 08       	sbc	r5, r1
    7f96:	89 2d       	mov	r24, r9
    7f98:	90 e0       	ldi	r25, 0x00	; 0
    7f9a:	aa 24       	eor	r10, r10
    7f9c:	bb 24       	eor	r11, r11
    7f9e:	a8 1a       	sub	r10, r24
    7fa0:	b9 0a       	sbc	r11, r25
    7fa2:	5f ef       	ldi	r21, 0xFF	; 255
    7fa4:	0f 3f       	cpi	r16, 0xFF	; 255
    7fa6:	15 07       	cpc	r17, r21
    7fa8:	29 f4       	brne	.+10     	; 0x7fb4 <vfprintf+0x38e>
    7faa:	8e e2       	ldi	r24, 0x2E	; 46
    7fac:	90 e0       	ldi	r25, 0x00	; 0
    7fae:	b3 01       	movw	r22, r6
    7fb0:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    7fb4:	c0 16       	cp	r12, r16
    7fb6:	d1 06       	cpc	r13, r17
    7fb8:	34 f0       	brlt	.+12     	; 0x7fc6 <vfprintf+0x3a0>
    7fba:	40 16       	cp	r4, r16
    7fbc:	51 06       	cpc	r5, r17
    7fbe:	1c f4       	brge	.+6      	; 0x7fc6 <vfprintf+0x3a0>
    7fc0:	f7 01       	movw	r30, r14
    7fc2:	80 81       	ld	r24, Z
    7fc4:	01 c0       	rjmp	.+2      	; 0x7fc8 <vfprintf+0x3a2>
    7fc6:	80 e3       	ldi	r24, 0x30	; 48
    7fc8:	01 50       	subi	r16, 0x01	; 1
    7fca:	10 40       	sbci	r17, 0x00	; 0
    7fcc:	08 94       	sec
    7fce:	e1 1c       	adc	r14, r1
    7fd0:	f1 1c       	adc	r15, r1
    7fd2:	0a 15       	cp	r16, r10
    7fd4:	1b 05       	cpc	r17, r11
    7fd6:	2c f0       	brlt	.+10     	; 0x7fe2 <vfprintf+0x3bc>
    7fd8:	90 e0       	ldi	r25, 0x00	; 0
    7fda:	b3 01       	movw	r22, r6
    7fdc:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    7fe0:	e0 cf       	rjmp	.-64     	; 0x7fa2 <vfprintf+0x37c>
    7fe2:	0c 15       	cp	r16, r12
    7fe4:	1d 05       	cpc	r17, r13
    7fe6:	39 f4       	brne	.+14     	; 0x7ff6 <vfprintf+0x3d0>
    7fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    7fea:	96 33       	cpi	r25, 0x36	; 54
    7fec:	18 f4       	brcc	.+6      	; 0x7ff4 <vfprintf+0x3ce>
    7fee:	95 33       	cpi	r25, 0x35	; 53
    7ff0:	11 f4       	brne	.+4      	; 0x7ff6 <vfprintf+0x3d0>
    7ff2:	24 fe       	sbrs	r2, 4
    7ff4:	81 e3       	ldi	r24, 0x31	; 49
    7ff6:	90 e0       	ldi	r25, 0x00	; 0
    7ff8:	4b c0       	rjmp	.+150    	; 0x8090 <vfprintf+0x46a>
    7ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    7ffc:	81 33       	cpi	r24, 0x31	; 49
    7ffe:	09 f0       	breq	.+2      	; 0x8002 <vfprintf+0x3dc>
    8000:	0f 7e       	andi	r16, 0xEF	; 239
    8002:	90 e0       	ldi	r25, 0x00	; 0
    8004:	b3 01       	movw	r22, r6
    8006:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    800a:	99 20       	and	r9, r9
    800c:	a1 f0       	breq	.+40     	; 0x8036 <vfprintf+0x410>
    800e:	8e e2       	ldi	r24, 0x2E	; 46
    8010:	90 e0       	ldi	r25, 0x00	; 0
    8012:	b3 01       	movw	r22, r6
    8014:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    8018:	12 e0       	ldi	r17, 0x02	; 2
    801a:	e1 e0       	ldi	r30, 0x01	; 1
    801c:	f0 e0       	ldi	r31, 0x00	; 0
    801e:	ec 0f       	add	r30, r28
    8020:	fd 1f       	adc	r31, r29
    8022:	e1 0f       	add	r30, r17
    8024:	f1 1d       	adc	r31, r1
    8026:	1f 5f       	subi	r17, 0xFF	; 255
    8028:	80 81       	ld	r24, Z
    802a:	90 e0       	ldi	r25, 0x00	; 0
    802c:	b3 01       	movw	r22, r6
    802e:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    8032:	9a 94       	dec	r9
    8034:	91 f7       	brne	.-28     	; 0x801a <vfprintf+0x3f4>
    8036:	44 fc       	sbrc	r4, 4
    8038:	03 c0       	rjmp	.+6      	; 0x8040 <vfprintf+0x41a>
    803a:	85 e6       	ldi	r24, 0x65	; 101
    803c:	90 e0       	ldi	r25, 0x00	; 0
    803e:	02 c0       	rjmp	.+4      	; 0x8044 <vfprintf+0x41e>
    8040:	85 e4       	ldi	r24, 0x45	; 69
    8042:	90 e0       	ldi	r25, 0x00	; 0
    8044:	b3 01       	movw	r22, r6
    8046:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    804a:	d7 fc       	sbrc	r13, 7
    804c:	05 c0       	rjmp	.+10     	; 0x8058 <vfprintf+0x432>
    804e:	c1 14       	cp	r12, r1
    8050:	d1 04       	cpc	r13, r1
    8052:	41 f4       	brne	.+16     	; 0x8064 <vfprintf+0x43e>
    8054:	04 ff       	sbrs	r16, 4
    8056:	06 c0       	rjmp	.+12     	; 0x8064 <vfprintf+0x43e>
    8058:	d0 94       	com	r13
    805a:	c1 94       	neg	r12
    805c:	d1 08       	sbc	r13, r1
    805e:	d3 94       	inc	r13
    8060:	8d e2       	ldi	r24, 0x2D	; 45
    8062:	01 c0       	rjmp	.+2      	; 0x8066 <vfprintf+0x440>
    8064:	8b e2       	ldi	r24, 0x2B	; 43
    8066:	90 e0       	ldi	r25, 0x00	; 0
    8068:	b3 01       	movw	r22, r6
    806a:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    806e:	80 e3       	ldi	r24, 0x30	; 48
    8070:	05 c0       	rjmp	.+10     	; 0x807c <vfprintf+0x456>
    8072:	8f 5f       	subi	r24, 0xFF	; 255
    8074:	26 ef       	ldi	r18, 0xF6	; 246
    8076:	3f ef       	ldi	r19, 0xFF	; 255
    8078:	c2 0e       	add	r12, r18
    807a:	d3 1e       	adc	r13, r19
    807c:	3a e0       	ldi	r19, 0x0A	; 10
    807e:	c3 16       	cp	r12, r19
    8080:	d1 04       	cpc	r13, r1
    8082:	bc f7       	brge	.-18     	; 0x8072 <vfprintf+0x44c>
    8084:	90 e0       	ldi	r25, 0x00	; 0
    8086:	b3 01       	movw	r22, r6
    8088:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    808c:	c6 01       	movw	r24, r12
    808e:	c0 96       	adiw	r24, 0x30	; 48
    8090:	b3 01       	movw	r22, r6
    8092:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    8096:	cc 84       	ldd	r12, Y+12	; 0x0c
    8098:	dd 84       	ldd	r13, Y+13	; 0x0d
    809a:	52 c1       	rjmp	.+676    	; 0x8340 <vfprintf+0x71a>
    809c:	93 36       	cpi	r25, 0x63	; 99
    809e:	31 f0       	breq	.+12     	; 0x80ac <vfprintf+0x486>
    80a0:	93 37       	cpi	r25, 0x73	; 115
    80a2:	99 f0       	breq	.+38     	; 0x80ca <vfprintf+0x4a4>
    80a4:	93 35       	cpi	r25, 0x53	; 83
    80a6:	09 f0       	breq	.+2      	; 0x80aa <vfprintf+0x484>
    80a8:	59 c0       	rjmp	.+178    	; 0x815c <vfprintf+0x536>
    80aa:	23 c0       	rjmp	.+70     	; 0x80f2 <vfprintf+0x4cc>
    80ac:	f6 01       	movw	r30, r12
    80ae:	80 81       	ld	r24, Z
    80b0:	89 83       	std	Y+1, r24	; 0x01
    80b2:	5e 01       	movw	r10, r28
    80b4:	08 94       	sec
    80b6:	a1 1c       	adc	r10, r1
    80b8:	b1 1c       	adc	r11, r1
    80ba:	22 e0       	ldi	r18, 0x02	; 2
    80bc:	30 e0       	ldi	r19, 0x00	; 0
    80be:	c2 0e       	add	r12, r18
    80c0:	d3 1e       	adc	r13, r19
    80c2:	21 e0       	ldi	r18, 0x01	; 1
    80c4:	e2 2e       	mov	r14, r18
    80c6:	f1 2c       	mov	r15, r1
    80c8:	12 c0       	rjmp	.+36     	; 0x80ee <vfprintf+0x4c8>
    80ca:	f6 01       	movw	r30, r12
    80cc:	a0 80       	ld	r10, Z
    80ce:	b1 80       	ldd	r11, Z+1	; 0x01
    80d0:	16 fd       	sbrc	r17, 6
    80d2:	03 c0       	rjmp	.+6      	; 0x80da <vfprintf+0x4b4>
    80d4:	6f ef       	ldi	r22, 0xFF	; 255
    80d6:	7f ef       	ldi	r23, 0xFF	; 255
    80d8:	02 c0       	rjmp	.+4      	; 0x80de <vfprintf+0x4b8>
    80da:	69 2d       	mov	r22, r9
    80dc:	70 e0       	ldi	r23, 0x00	; 0
    80de:	22 e0       	ldi	r18, 0x02	; 2
    80e0:	30 e0       	ldi	r19, 0x00	; 0
    80e2:	c2 0e       	add	r12, r18
    80e4:	d3 1e       	adc	r13, r19
    80e6:	c5 01       	movw	r24, r10
    80e8:	0e 94 13 49 	call	0x9226	; 0x9226 <strnlen>
    80ec:	7c 01       	movw	r14, r24
    80ee:	1f 77       	andi	r17, 0x7F	; 127
    80f0:	13 c0       	rjmp	.+38     	; 0x8118 <vfprintf+0x4f2>
    80f2:	f6 01       	movw	r30, r12
    80f4:	a0 80       	ld	r10, Z
    80f6:	b1 80       	ldd	r11, Z+1	; 0x01
    80f8:	16 fd       	sbrc	r17, 6
    80fa:	03 c0       	rjmp	.+6      	; 0x8102 <vfprintf+0x4dc>
    80fc:	6f ef       	ldi	r22, 0xFF	; 255
    80fe:	7f ef       	ldi	r23, 0xFF	; 255
    8100:	02 c0       	rjmp	.+4      	; 0x8106 <vfprintf+0x4e0>
    8102:	69 2d       	mov	r22, r9
    8104:	70 e0       	ldi	r23, 0x00	; 0
    8106:	22 e0       	ldi	r18, 0x02	; 2
    8108:	30 e0       	ldi	r19, 0x00	; 0
    810a:	c2 0e       	add	r12, r18
    810c:	d3 1e       	adc	r13, r19
    810e:	c5 01       	movw	r24, r10
    8110:	0e 94 fd 48 	call	0x91fa	; 0x91fa <strnlen_P>
    8114:	7c 01       	movw	r14, r24
    8116:	10 68       	ori	r17, 0x80	; 128
    8118:	13 ff       	sbrs	r17, 3
    811a:	07 c0       	rjmp	.+14     	; 0x812a <vfprintf+0x504>
    811c:	1b c0       	rjmp	.+54     	; 0x8154 <vfprintf+0x52e>
    811e:	80 e2       	ldi	r24, 0x20	; 32
    8120:	90 e0       	ldi	r25, 0x00	; 0
    8122:	b3 01       	movw	r22, r6
    8124:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    8128:	8a 94       	dec	r8
    812a:	88 2d       	mov	r24, r8
    812c:	90 e0       	ldi	r25, 0x00	; 0
    812e:	e8 16       	cp	r14, r24
    8130:	f9 06       	cpc	r15, r25
    8132:	a8 f3       	brcs	.-22     	; 0x811e <vfprintf+0x4f8>
    8134:	0f c0       	rjmp	.+30     	; 0x8154 <vfprintf+0x52e>
    8136:	f5 01       	movw	r30, r10
    8138:	17 fd       	sbrc	r17, 7
    813a:	85 91       	lpm	r24, Z+
    813c:	17 ff       	sbrs	r17, 7
    813e:	81 91       	ld	r24, Z+
    8140:	5f 01       	movw	r10, r30
    8142:	90 e0       	ldi	r25, 0x00	; 0
    8144:	b3 01       	movw	r22, r6
    8146:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    814a:	81 10       	cpse	r8, r1
    814c:	8a 94       	dec	r8
    814e:	08 94       	sec
    8150:	e1 08       	sbc	r14, r1
    8152:	f1 08       	sbc	r15, r1
    8154:	e1 14       	cp	r14, r1
    8156:	f1 04       	cpc	r15, r1
    8158:	71 f7       	brne	.-36     	; 0x8136 <vfprintf+0x510>
    815a:	f2 c0       	rjmp	.+484    	; 0x8340 <vfprintf+0x71a>
    815c:	94 36       	cpi	r25, 0x64	; 100
    815e:	11 f0       	breq	.+4      	; 0x8164 <vfprintf+0x53e>
    8160:	99 36       	cpi	r25, 0x69	; 105
    8162:	89 f5       	brne	.+98     	; 0x81c6 <vfprintf+0x5a0>
    8164:	17 ff       	sbrs	r17, 7
    8166:	08 c0       	rjmp	.+16     	; 0x8178 <vfprintf+0x552>
    8168:	f6 01       	movw	r30, r12
    816a:	20 81       	ld	r18, Z
    816c:	31 81       	ldd	r19, Z+1	; 0x01
    816e:	42 81       	ldd	r20, Z+2	; 0x02
    8170:	53 81       	ldd	r21, Z+3	; 0x03
    8172:	84 e0       	ldi	r24, 0x04	; 4
    8174:	90 e0       	ldi	r25, 0x00	; 0
    8176:	0a c0       	rjmp	.+20     	; 0x818c <vfprintf+0x566>
    8178:	f6 01       	movw	r30, r12
    817a:	80 81       	ld	r24, Z
    817c:	91 81       	ldd	r25, Z+1	; 0x01
    817e:	9c 01       	movw	r18, r24
    8180:	44 27       	eor	r20, r20
    8182:	37 fd       	sbrc	r19, 7
    8184:	40 95       	com	r20
    8186:	54 2f       	mov	r21, r20
    8188:	82 e0       	ldi	r24, 0x02	; 2
    818a:	90 e0       	ldi	r25, 0x00	; 0
    818c:	c8 0e       	add	r12, r24
    818e:	d9 1e       	adc	r13, r25
    8190:	9f e6       	ldi	r25, 0x6F	; 111
    8192:	f9 2e       	mov	r15, r25
    8194:	f1 22       	and	r15, r17
    8196:	57 ff       	sbrs	r21, 7
    8198:	09 c0       	rjmp	.+18     	; 0x81ac <vfprintf+0x586>
    819a:	50 95       	com	r21
    819c:	40 95       	com	r20
    819e:	30 95       	com	r19
    81a0:	21 95       	neg	r18
    81a2:	3f 4f       	sbci	r19, 0xFF	; 255
    81a4:	4f 4f       	sbci	r20, 0xFF	; 255
    81a6:	5f 4f       	sbci	r21, 0xFF	; 255
    81a8:	90 e8       	ldi	r25, 0x80	; 128
    81aa:	f9 2a       	or	r15, r25
    81ac:	ca 01       	movw	r24, r20
    81ae:	b9 01       	movw	r22, r18
    81b0:	ae 01       	movw	r20, r28
    81b2:	4f 5f       	subi	r20, 0xFF	; 255
    81b4:	5f 4f       	sbci	r21, 0xFF	; 255
    81b6:	2a e0       	ldi	r18, 0x0A	; 10
    81b8:	30 e0       	ldi	r19, 0x00	; 0
    81ba:	0e 94 ad 49 	call	0x935a	; 0x935a <__ultoa_invert>
    81be:	e8 2e       	mov	r14, r24
    81c0:	e8 89       	ldd	r30, Y+16	; 0x10
    81c2:	ee 1a       	sub	r14, r30
    81c4:	41 c0       	rjmp	.+130    	; 0x8248 <vfprintf+0x622>
    81c6:	95 37       	cpi	r25, 0x75	; 117
    81c8:	21 f4       	brne	.+8      	; 0x81d2 <vfprintf+0x5ac>
    81ca:	1f 7e       	andi	r17, 0xEF	; 239
    81cc:	2a e0       	ldi	r18, 0x0A	; 10
    81ce:	30 e0       	ldi	r19, 0x00	; 0
    81d0:	1c c0       	rjmp	.+56     	; 0x820a <vfprintf+0x5e4>
    81d2:	19 7f       	andi	r17, 0xF9	; 249
    81d4:	9f 36       	cpi	r25, 0x6F	; 111
    81d6:	61 f0       	breq	.+24     	; 0x81f0 <vfprintf+0x5ca>
    81d8:	90 37       	cpi	r25, 0x70	; 112
    81da:	20 f4       	brcc	.+8      	; 0x81e4 <vfprintf+0x5be>
    81dc:	98 35       	cpi	r25, 0x58	; 88
    81de:	09 f0       	breq	.+2      	; 0x81e2 <vfprintf+0x5bc>
    81e0:	b2 c0       	rjmp	.+356    	; 0x8346 <vfprintf+0x720>
    81e2:	0f c0       	rjmp	.+30     	; 0x8202 <vfprintf+0x5dc>
    81e4:	90 37       	cpi	r25, 0x70	; 112
    81e6:	39 f0       	breq	.+14     	; 0x81f6 <vfprintf+0x5d0>
    81e8:	98 37       	cpi	r25, 0x78	; 120
    81ea:	09 f0       	breq	.+2      	; 0x81ee <vfprintf+0x5c8>
    81ec:	ac c0       	rjmp	.+344    	; 0x8346 <vfprintf+0x720>
    81ee:	04 c0       	rjmp	.+8      	; 0x81f8 <vfprintf+0x5d2>
    81f0:	28 e0       	ldi	r18, 0x08	; 8
    81f2:	30 e0       	ldi	r19, 0x00	; 0
    81f4:	0a c0       	rjmp	.+20     	; 0x820a <vfprintf+0x5e4>
    81f6:	10 61       	ori	r17, 0x10	; 16
    81f8:	14 fd       	sbrc	r17, 4
    81fa:	14 60       	ori	r17, 0x04	; 4
    81fc:	20 e1       	ldi	r18, 0x10	; 16
    81fe:	30 e0       	ldi	r19, 0x00	; 0
    8200:	04 c0       	rjmp	.+8      	; 0x820a <vfprintf+0x5e4>
    8202:	14 fd       	sbrc	r17, 4
    8204:	16 60       	ori	r17, 0x06	; 6
    8206:	20 e1       	ldi	r18, 0x10	; 16
    8208:	32 e0       	ldi	r19, 0x02	; 2
    820a:	17 ff       	sbrs	r17, 7
    820c:	08 c0       	rjmp	.+16     	; 0x821e <vfprintf+0x5f8>
    820e:	f6 01       	movw	r30, r12
    8210:	60 81       	ld	r22, Z
    8212:	71 81       	ldd	r23, Z+1	; 0x01
    8214:	82 81       	ldd	r24, Z+2	; 0x02
    8216:	93 81       	ldd	r25, Z+3	; 0x03
    8218:	44 e0       	ldi	r20, 0x04	; 4
    821a:	50 e0       	ldi	r21, 0x00	; 0
    821c:	08 c0       	rjmp	.+16     	; 0x822e <vfprintf+0x608>
    821e:	f6 01       	movw	r30, r12
    8220:	80 81       	ld	r24, Z
    8222:	91 81       	ldd	r25, Z+1	; 0x01
    8224:	bc 01       	movw	r22, r24
    8226:	80 e0       	ldi	r24, 0x00	; 0
    8228:	90 e0       	ldi	r25, 0x00	; 0
    822a:	42 e0       	ldi	r20, 0x02	; 2
    822c:	50 e0       	ldi	r21, 0x00	; 0
    822e:	c4 0e       	add	r12, r20
    8230:	d5 1e       	adc	r13, r21
    8232:	ae 01       	movw	r20, r28
    8234:	4f 5f       	subi	r20, 0xFF	; 255
    8236:	5f 4f       	sbci	r21, 0xFF	; 255
    8238:	0e 94 ad 49 	call	0x935a	; 0x935a <__ultoa_invert>
    823c:	e8 2e       	mov	r14, r24
    823e:	58 89       	ldd	r21, Y+16	; 0x10
    8240:	e5 1a       	sub	r14, r21
    8242:	8f e7       	ldi	r24, 0x7F	; 127
    8244:	f8 2e       	mov	r15, r24
    8246:	f1 22       	and	r15, r17
    8248:	f6 fe       	sbrs	r15, 6
    824a:	0b c0       	rjmp	.+22     	; 0x8262 <vfprintf+0x63c>
    824c:	8e ef       	ldi	r24, 0xFE	; 254
    824e:	f8 22       	and	r15, r24
    8250:	e9 14       	cp	r14, r9
    8252:	38 f4       	brcc	.+14     	; 0x8262 <vfprintf+0x63c>
    8254:	f4 fe       	sbrs	r15, 4
    8256:	07 c0       	rjmp	.+14     	; 0x8266 <vfprintf+0x640>
    8258:	f2 fc       	sbrc	r15, 2
    825a:	05 c0       	rjmp	.+10     	; 0x8266 <vfprintf+0x640>
    825c:	9f ee       	ldi	r25, 0xEF	; 239
    825e:	f9 22       	and	r15, r25
    8260:	02 c0       	rjmp	.+4      	; 0x8266 <vfprintf+0x640>
    8262:	1e 2d       	mov	r17, r14
    8264:	01 c0       	rjmp	.+2      	; 0x8268 <vfprintf+0x642>
    8266:	19 2d       	mov	r17, r9
    8268:	f4 fe       	sbrs	r15, 4
    826a:	0d c0       	rjmp	.+26     	; 0x8286 <vfprintf+0x660>
    826c:	fe 01       	movw	r30, r28
    826e:	ee 0d       	add	r30, r14
    8270:	f1 1d       	adc	r31, r1
    8272:	80 81       	ld	r24, Z
    8274:	80 33       	cpi	r24, 0x30	; 48
    8276:	19 f4       	brne	.+6      	; 0x827e <vfprintf+0x658>
    8278:	e9 ee       	ldi	r30, 0xE9	; 233
    827a:	fe 22       	and	r15, r30
    827c:	08 c0       	rjmp	.+16     	; 0x828e <vfprintf+0x668>
    827e:	1f 5f       	subi	r17, 0xFF	; 255
    8280:	f2 fe       	sbrs	r15, 2
    8282:	05 c0       	rjmp	.+10     	; 0x828e <vfprintf+0x668>
    8284:	03 c0       	rjmp	.+6      	; 0x828c <vfprintf+0x666>
    8286:	8f 2d       	mov	r24, r15
    8288:	86 78       	andi	r24, 0x86	; 134
    828a:	09 f0       	breq	.+2      	; 0x828e <vfprintf+0x668>
    828c:	1f 5f       	subi	r17, 0xFF	; 255
    828e:	0f 2d       	mov	r16, r15
    8290:	f3 fc       	sbrc	r15, 3
    8292:	14 c0       	rjmp	.+40     	; 0x82bc <vfprintf+0x696>
    8294:	f0 fe       	sbrs	r15, 0
    8296:	0f c0       	rjmp	.+30     	; 0x82b6 <vfprintf+0x690>
    8298:	18 15       	cp	r17, r8
    829a:	10 f0       	brcs	.+4      	; 0x82a0 <vfprintf+0x67a>
    829c:	9e 2c       	mov	r9, r14
    829e:	0b c0       	rjmp	.+22     	; 0x82b6 <vfprintf+0x690>
    82a0:	9e 2c       	mov	r9, r14
    82a2:	98 0c       	add	r9, r8
    82a4:	91 1a       	sub	r9, r17
    82a6:	18 2d       	mov	r17, r8
    82a8:	06 c0       	rjmp	.+12     	; 0x82b6 <vfprintf+0x690>
    82aa:	80 e2       	ldi	r24, 0x20	; 32
    82ac:	90 e0       	ldi	r25, 0x00	; 0
    82ae:	b3 01       	movw	r22, r6
    82b0:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    82b4:	1f 5f       	subi	r17, 0xFF	; 255
    82b6:	18 15       	cp	r17, r8
    82b8:	c0 f3       	brcs	.-16     	; 0x82aa <vfprintf+0x684>
    82ba:	04 c0       	rjmp	.+8      	; 0x82c4 <vfprintf+0x69e>
    82bc:	18 15       	cp	r17, r8
    82be:	10 f4       	brcc	.+4      	; 0x82c4 <vfprintf+0x69e>
    82c0:	81 1a       	sub	r8, r17
    82c2:	01 c0       	rjmp	.+2      	; 0x82c6 <vfprintf+0x6a0>
    82c4:	88 24       	eor	r8, r8
    82c6:	04 ff       	sbrs	r16, 4
    82c8:	0f c0       	rjmp	.+30     	; 0x82e8 <vfprintf+0x6c2>
    82ca:	80 e3       	ldi	r24, 0x30	; 48
    82cc:	90 e0       	ldi	r25, 0x00	; 0
    82ce:	b3 01       	movw	r22, r6
    82d0:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    82d4:	02 ff       	sbrs	r16, 2
    82d6:	1d c0       	rjmp	.+58     	; 0x8312 <vfprintf+0x6ec>
    82d8:	01 fd       	sbrc	r16, 1
    82da:	03 c0       	rjmp	.+6      	; 0x82e2 <vfprintf+0x6bc>
    82dc:	88 e7       	ldi	r24, 0x78	; 120
    82de:	90 e0       	ldi	r25, 0x00	; 0
    82e0:	0e c0       	rjmp	.+28     	; 0x82fe <vfprintf+0x6d8>
    82e2:	88 e5       	ldi	r24, 0x58	; 88
    82e4:	90 e0       	ldi	r25, 0x00	; 0
    82e6:	0b c0       	rjmp	.+22     	; 0x82fe <vfprintf+0x6d8>
    82e8:	80 2f       	mov	r24, r16
    82ea:	86 78       	andi	r24, 0x86	; 134
    82ec:	91 f0       	breq	.+36     	; 0x8312 <vfprintf+0x6ec>
    82ee:	01 ff       	sbrs	r16, 1
    82f0:	02 c0       	rjmp	.+4      	; 0x82f6 <vfprintf+0x6d0>
    82f2:	8b e2       	ldi	r24, 0x2B	; 43
    82f4:	01 c0       	rjmp	.+2      	; 0x82f8 <vfprintf+0x6d2>
    82f6:	80 e2       	ldi	r24, 0x20	; 32
    82f8:	f7 fc       	sbrc	r15, 7
    82fa:	8d e2       	ldi	r24, 0x2D	; 45
    82fc:	90 e0       	ldi	r25, 0x00	; 0
    82fe:	b3 01       	movw	r22, r6
    8300:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    8304:	06 c0       	rjmp	.+12     	; 0x8312 <vfprintf+0x6ec>
    8306:	80 e3       	ldi	r24, 0x30	; 48
    8308:	90 e0       	ldi	r25, 0x00	; 0
    830a:	b3 01       	movw	r22, r6
    830c:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    8310:	9a 94       	dec	r9
    8312:	e9 14       	cp	r14, r9
    8314:	c0 f3       	brcs	.-16     	; 0x8306 <vfprintf+0x6e0>
    8316:	ea 94       	dec	r14
    8318:	e1 e0       	ldi	r30, 0x01	; 1
    831a:	f0 e0       	ldi	r31, 0x00	; 0
    831c:	ec 0f       	add	r30, r28
    831e:	fd 1f       	adc	r31, r29
    8320:	ee 0d       	add	r30, r14
    8322:	f1 1d       	adc	r31, r1
    8324:	80 81       	ld	r24, Z
    8326:	90 e0       	ldi	r25, 0x00	; 0
    8328:	b3 01       	movw	r22, r6
    832a:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    832e:	ee 20       	and	r14, r14
    8330:	91 f7       	brne	.-28     	; 0x8316 <vfprintf+0x6f0>
    8332:	06 c0       	rjmp	.+12     	; 0x8340 <vfprintf+0x71a>
    8334:	80 e2       	ldi	r24, 0x20	; 32
    8336:	90 e0       	ldi	r25, 0x00	; 0
    8338:	b3 01       	movw	r22, r6
    833a:	0e 94 5e 49 	call	0x92bc	; 0x92bc <fputc>
    833e:	8a 94       	dec	r8
    8340:	88 20       	and	r8, r8
    8342:	c1 f7       	brne	.-16     	; 0x8334 <vfprintf+0x70e>
    8344:	99 cc       	rjmp	.-1742   	; 0x7c78 <vfprintf+0x52>
    8346:	f3 01       	movw	r30, r6
    8348:	66 81       	ldd	r22, Z+6	; 0x06
    834a:	77 81       	ldd	r23, Z+7	; 0x07
    834c:	cb 01       	movw	r24, r22
    834e:	61 96       	adiw	r28, 0x11	; 17
    8350:	cd bf       	out	0x3d, r28	; 61
    8352:	de bf       	out	0x3e, r29	; 62
    8354:	cf 91       	pop	r28
    8356:	df 91       	pop	r29
    8358:	1f 91       	pop	r17
    835a:	0f 91       	pop	r16
    835c:	ff 90       	pop	r15
    835e:	ef 90       	pop	r14
    8360:	df 90       	pop	r13
    8362:	cf 90       	pop	r12
    8364:	bf 90       	pop	r11
    8366:	af 90       	pop	r10
    8368:	9f 90       	pop	r9
    836a:	8f 90       	pop	r8
    836c:	7f 90       	pop	r7
    836e:	6f 90       	pop	r6
    8370:	5f 90       	pop	r5
    8372:	4f 90       	pop	r4
    8374:	3f 90       	pop	r3
    8376:	2f 90       	pop	r2
    8378:	08 95       	ret

0000837a <__subsf3>:
    837a:	50 58       	subi	r21, 0x80	; 128

0000837c <__addsf3>:
    837c:	bb 27       	eor	r27, r27
    837e:	aa 27       	eor	r26, r26
    8380:	0e d0       	rcall	.+28     	; 0x839e <__addsf3x>
    8382:	29 c2       	rjmp	.+1106   	; 0x87d6 <__fp_round>
    8384:	f2 d1       	rcall	.+996    	; 0x876a <__fp_pscA>
    8386:	30 f0       	brcs	.+12     	; 0x8394 <__addsf3+0x18>
    8388:	f7 d1       	rcall	.+1006   	; 0x8778 <__fp_pscB>
    838a:	20 f0       	brcs	.+8      	; 0x8394 <__addsf3+0x18>
    838c:	31 f4       	brne	.+12     	; 0x839a <__addsf3+0x1e>
    838e:	9f 3f       	cpi	r25, 0xFF	; 255
    8390:	11 f4       	brne	.+4      	; 0x8396 <__addsf3+0x1a>
    8392:	1e f4       	brtc	.+6      	; 0x839a <__addsf3+0x1e>
    8394:	c2 c1       	rjmp	.+900    	; 0x871a <__fp_nan>
    8396:	0e f4       	brtc	.+2      	; 0x839a <__addsf3+0x1e>
    8398:	e0 95       	com	r30
    839a:	e7 fb       	bst	r30, 7
    839c:	8f c1       	rjmp	.+798    	; 0x86bc <__fp_inf>

0000839e <__addsf3x>:
    839e:	e9 2f       	mov	r30, r25
    83a0:	3c d2       	rcall	.+1144   	; 0x881a <__fp_split3>
    83a2:	80 f3       	brcs	.-32     	; 0x8384 <__addsf3+0x8>
    83a4:	ba 17       	cp	r27, r26
    83a6:	62 07       	cpc	r22, r18
    83a8:	73 07       	cpc	r23, r19
    83aa:	84 07       	cpc	r24, r20
    83ac:	95 07       	cpc	r25, r21
    83ae:	18 f0       	brcs	.+6      	; 0x83b6 <__addsf3x+0x18>
    83b0:	71 f4       	brne	.+28     	; 0x83ce <__addsf3x+0x30>
    83b2:	9e f5       	brtc	.+102    	; 0x841a <__addsf3x+0x7c>
    83b4:	6b c2       	rjmp	.+1238   	; 0x888c <__fp_zero>
    83b6:	0e f4       	brtc	.+2      	; 0x83ba <__addsf3x+0x1c>
    83b8:	e0 95       	com	r30
    83ba:	0b 2e       	mov	r0, r27
    83bc:	ba 2f       	mov	r27, r26
    83be:	a0 2d       	mov	r26, r0
    83c0:	0b 01       	movw	r0, r22
    83c2:	b9 01       	movw	r22, r18
    83c4:	90 01       	movw	r18, r0
    83c6:	0c 01       	movw	r0, r24
    83c8:	ca 01       	movw	r24, r20
    83ca:	a0 01       	movw	r20, r0
    83cc:	11 24       	eor	r1, r1
    83ce:	ff 27       	eor	r31, r31
    83d0:	59 1b       	sub	r21, r25
    83d2:	99 f0       	breq	.+38     	; 0x83fa <__addsf3x+0x5c>
    83d4:	59 3f       	cpi	r21, 0xF9	; 249
    83d6:	50 f4       	brcc	.+20     	; 0x83ec <__addsf3x+0x4e>
    83d8:	50 3e       	cpi	r21, 0xE0	; 224
    83da:	68 f1       	brcs	.+90     	; 0x8436 <__addsf3x+0x98>
    83dc:	1a 16       	cp	r1, r26
    83de:	f0 40       	sbci	r31, 0x00	; 0
    83e0:	a2 2f       	mov	r26, r18
    83e2:	23 2f       	mov	r18, r19
    83e4:	34 2f       	mov	r19, r20
    83e6:	44 27       	eor	r20, r20
    83e8:	58 5f       	subi	r21, 0xF8	; 248
    83ea:	f3 cf       	rjmp	.-26     	; 0x83d2 <__addsf3x+0x34>
    83ec:	46 95       	lsr	r20
    83ee:	37 95       	ror	r19
    83f0:	27 95       	ror	r18
    83f2:	a7 95       	ror	r26
    83f4:	f0 40       	sbci	r31, 0x00	; 0
    83f6:	53 95       	inc	r21
    83f8:	c9 f7       	brne	.-14     	; 0x83ec <__addsf3x+0x4e>
    83fa:	7e f4       	brtc	.+30     	; 0x841a <__addsf3x+0x7c>
    83fc:	1f 16       	cp	r1, r31
    83fe:	ba 0b       	sbc	r27, r26
    8400:	62 0b       	sbc	r22, r18
    8402:	73 0b       	sbc	r23, r19
    8404:	84 0b       	sbc	r24, r20
    8406:	ba f0       	brmi	.+46     	; 0x8436 <__addsf3x+0x98>
    8408:	91 50       	subi	r25, 0x01	; 1
    840a:	a1 f0       	breq	.+40     	; 0x8434 <__addsf3x+0x96>
    840c:	ff 0f       	add	r31, r31
    840e:	bb 1f       	adc	r27, r27
    8410:	66 1f       	adc	r22, r22
    8412:	77 1f       	adc	r23, r23
    8414:	88 1f       	adc	r24, r24
    8416:	c2 f7       	brpl	.-16     	; 0x8408 <__addsf3x+0x6a>
    8418:	0e c0       	rjmp	.+28     	; 0x8436 <__addsf3x+0x98>
    841a:	ba 0f       	add	r27, r26
    841c:	62 1f       	adc	r22, r18
    841e:	73 1f       	adc	r23, r19
    8420:	84 1f       	adc	r24, r20
    8422:	48 f4       	brcc	.+18     	; 0x8436 <__addsf3x+0x98>
    8424:	87 95       	ror	r24
    8426:	77 95       	ror	r23
    8428:	67 95       	ror	r22
    842a:	b7 95       	ror	r27
    842c:	f7 95       	ror	r31
    842e:	9e 3f       	cpi	r25, 0xFE	; 254
    8430:	08 f0       	brcs	.+2      	; 0x8434 <__addsf3x+0x96>
    8432:	b3 cf       	rjmp	.-154    	; 0x839a <__addsf3+0x1e>
    8434:	93 95       	inc	r25
    8436:	88 0f       	add	r24, r24
    8438:	08 f0       	brcs	.+2      	; 0x843c <__addsf3x+0x9e>
    843a:	99 27       	eor	r25, r25
    843c:	ee 0f       	add	r30, r30
    843e:	97 95       	ror	r25
    8440:	87 95       	ror	r24
    8442:	08 95       	ret

00008444 <atan>:
    8444:	df 93       	push	r29
    8446:	dd 27       	eor	r29, r29
    8448:	b9 2f       	mov	r27, r25
    844a:	bf 77       	andi	r27, 0x7F	; 127
    844c:	40 e8       	ldi	r20, 0x80	; 128
    844e:	5f e3       	ldi	r21, 0x3F	; 63
    8450:	16 16       	cp	r1, r22
    8452:	17 06       	cpc	r1, r23
    8454:	48 07       	cpc	r20, r24
    8456:	5b 07       	cpc	r21, r27
    8458:	10 f4       	brcc	.+4      	; 0x845e <atan+0x1a>
    845a:	d9 2f       	mov	r29, r25
    845c:	83 d2       	rcall	.+1286   	; 0x8964 <inverse>
    845e:	9f 93       	push	r25
    8460:	8f 93       	push	r24
    8462:	7f 93       	push	r23
    8464:	6f 93       	push	r22
    8466:	96 d3       	rcall	.+1836   	; 0x8b94 <square>
    8468:	e8 ee       	ldi	r30, 0xE8	; 232
    846a:	f1 e0       	ldi	r31, 0x01	; 1
    846c:	59 d1       	rcall	.+690    	; 0x8720 <__fp_powser>
    846e:	b3 d1       	rcall	.+870    	; 0x87d6 <__fp_round>
    8470:	2f 91       	pop	r18
    8472:	3f 91       	pop	r19
    8474:	4f 91       	pop	r20
    8476:	5f 91       	pop	r21
    8478:	ee d2       	rcall	.+1500   	; 0x8a56 <__mulsf3x>
    847a:	dd 23       	and	r29, r29
    847c:	49 f0       	breq	.+18     	; 0x8490 <atan+0x4c>
    847e:	90 58       	subi	r25, 0x80	; 128
    8480:	a2 ea       	ldi	r26, 0xA2	; 162
    8482:	2a ed       	ldi	r18, 0xDA	; 218
    8484:	3f e0       	ldi	r19, 0x0F	; 15
    8486:	49 ec       	ldi	r20, 0xC9	; 201
    8488:	5f e3       	ldi	r21, 0x3F	; 63
    848a:	d0 78       	andi	r29, 0x80	; 128
    848c:	5d 27       	eor	r21, r29
    848e:	87 df       	rcall	.-242    	; 0x839e <__addsf3x>
    8490:	df 91       	pop	r29
    8492:	a1 c1       	rjmp	.+834    	; 0x87d6 <__fp_round>

00008494 <ceil>:
    8494:	e4 d1       	rcall	.+968    	; 0x885e <__fp_trunc>
    8496:	80 f0       	brcs	.+32     	; 0x84b8 <ceil+0x24>
    8498:	9f 37       	cpi	r25, 0x7F	; 127
    849a:	40 f4       	brcc	.+16     	; 0x84ac <ceil+0x18>
    849c:	91 11       	cpse	r25, r1
    849e:	0e f4       	brtc	.+2      	; 0x84a2 <ceil+0xe>
    84a0:	f6 c1       	rjmp	.+1004   	; 0x888e <__fp_szero>
    84a2:	60 e0       	ldi	r22, 0x00	; 0
    84a4:	70 e0       	ldi	r23, 0x00	; 0
    84a6:	80 e8       	ldi	r24, 0x80	; 128
    84a8:	9f e3       	ldi	r25, 0x3F	; 63
    84aa:	08 95       	ret
    84ac:	26 f0       	brts	.+8      	; 0x84b6 <ceil+0x22>
    84ae:	1b 16       	cp	r1, r27
    84b0:	61 1d       	adc	r22, r1
    84b2:	71 1d       	adc	r23, r1
    84b4:	81 1d       	adc	r24, r1
    84b6:	08 c1       	rjmp	.+528    	; 0x86c8 <__fp_mintl>
    84b8:	22 c1       	rjmp	.+580    	; 0x86fe <__fp_mpack>

000084ba <__cmpsf2>:
    84ba:	dc d0       	rcall	.+440    	; 0x8674 <__fp_cmp>
    84bc:	08 f4       	brcc	.+2      	; 0x84c0 <__cmpsf2+0x6>
    84be:	81 e0       	ldi	r24, 0x01	; 1
    84c0:	08 95       	ret

000084c2 <cos>:
    84c2:	62 d1       	rcall	.+708    	; 0x8788 <__fp_rempio2>
    84c4:	e3 95       	inc	r30
    84c6:	98 c1       	rjmp	.+816    	; 0x87f8 <__fp_sinus>

000084c8 <__divsf3>:
    84c8:	0c d0       	rcall	.+24     	; 0x84e2 <__divsf3x>
    84ca:	85 c1       	rjmp	.+778    	; 0x87d6 <__fp_round>
    84cc:	55 d1       	rcall	.+682    	; 0x8778 <__fp_pscB>
    84ce:	40 f0       	brcs	.+16     	; 0x84e0 <__divsf3+0x18>
    84d0:	4c d1       	rcall	.+664    	; 0x876a <__fp_pscA>
    84d2:	30 f0       	brcs	.+12     	; 0x84e0 <__divsf3+0x18>
    84d4:	21 f4       	brne	.+8      	; 0x84de <__divsf3+0x16>
    84d6:	5f 3f       	cpi	r21, 0xFF	; 255
    84d8:	19 f0       	breq	.+6      	; 0x84e0 <__divsf3+0x18>
    84da:	f0 c0       	rjmp	.+480    	; 0x86bc <__fp_inf>
    84dc:	51 11       	cpse	r21, r1
    84de:	d7 c1       	rjmp	.+942    	; 0x888e <__fp_szero>
    84e0:	1c c1       	rjmp	.+568    	; 0x871a <__fp_nan>

000084e2 <__divsf3x>:
    84e2:	9b d1       	rcall	.+822    	; 0x881a <__fp_split3>
    84e4:	98 f3       	brcs	.-26     	; 0x84cc <__divsf3+0x4>

000084e6 <__divsf3_pse>:
    84e6:	99 23       	and	r25, r25
    84e8:	c9 f3       	breq	.-14     	; 0x84dc <__divsf3+0x14>
    84ea:	55 23       	and	r21, r21
    84ec:	b1 f3       	breq	.-20     	; 0x84da <__divsf3+0x12>
    84ee:	95 1b       	sub	r25, r21
    84f0:	55 0b       	sbc	r21, r21
    84f2:	bb 27       	eor	r27, r27
    84f4:	aa 27       	eor	r26, r26
    84f6:	62 17       	cp	r22, r18
    84f8:	73 07       	cpc	r23, r19
    84fa:	84 07       	cpc	r24, r20
    84fc:	38 f0       	brcs	.+14     	; 0x850c <__divsf3_pse+0x26>
    84fe:	9f 5f       	subi	r25, 0xFF	; 255
    8500:	5f 4f       	sbci	r21, 0xFF	; 255
    8502:	22 0f       	add	r18, r18
    8504:	33 1f       	adc	r19, r19
    8506:	44 1f       	adc	r20, r20
    8508:	aa 1f       	adc	r26, r26
    850a:	a9 f3       	breq	.-22     	; 0x84f6 <__divsf3_pse+0x10>
    850c:	33 d0       	rcall	.+102    	; 0x8574 <__divsf3_pse+0x8e>
    850e:	0e 2e       	mov	r0, r30
    8510:	3a f0       	brmi	.+14     	; 0x8520 <__divsf3_pse+0x3a>
    8512:	e0 e8       	ldi	r30, 0x80	; 128
    8514:	30 d0       	rcall	.+96     	; 0x8576 <__divsf3_pse+0x90>
    8516:	91 50       	subi	r25, 0x01	; 1
    8518:	50 40       	sbci	r21, 0x00	; 0
    851a:	e6 95       	lsr	r30
    851c:	00 1c       	adc	r0, r0
    851e:	ca f7       	brpl	.-14     	; 0x8512 <__divsf3_pse+0x2c>
    8520:	29 d0       	rcall	.+82     	; 0x8574 <__divsf3_pse+0x8e>
    8522:	fe 2f       	mov	r31, r30
    8524:	27 d0       	rcall	.+78     	; 0x8574 <__divsf3_pse+0x8e>
    8526:	66 0f       	add	r22, r22
    8528:	77 1f       	adc	r23, r23
    852a:	88 1f       	adc	r24, r24
    852c:	bb 1f       	adc	r27, r27
    852e:	26 17       	cp	r18, r22
    8530:	37 07       	cpc	r19, r23
    8532:	48 07       	cpc	r20, r24
    8534:	ab 07       	cpc	r26, r27
    8536:	b0 e8       	ldi	r27, 0x80	; 128
    8538:	09 f0       	breq	.+2      	; 0x853c <__divsf3_pse+0x56>
    853a:	bb 0b       	sbc	r27, r27
    853c:	80 2d       	mov	r24, r0
    853e:	bf 01       	movw	r22, r30
    8540:	ff 27       	eor	r31, r31
    8542:	93 58       	subi	r25, 0x83	; 131
    8544:	5f 4f       	sbci	r21, 0xFF	; 255
    8546:	2a f0       	brmi	.+10     	; 0x8552 <__divsf3_pse+0x6c>
    8548:	9e 3f       	cpi	r25, 0xFE	; 254
    854a:	51 05       	cpc	r21, r1
    854c:	68 f0       	brcs	.+26     	; 0x8568 <__divsf3_pse+0x82>
    854e:	b6 c0       	rjmp	.+364    	; 0x86bc <__fp_inf>
    8550:	9e c1       	rjmp	.+828    	; 0x888e <__fp_szero>
    8552:	5f 3f       	cpi	r21, 0xFF	; 255
    8554:	ec f3       	brlt	.-6      	; 0x8550 <__divsf3_pse+0x6a>
    8556:	98 3e       	cpi	r25, 0xE8	; 232
    8558:	dc f3       	brlt	.-10     	; 0x8550 <__divsf3_pse+0x6a>
    855a:	86 95       	lsr	r24
    855c:	77 95       	ror	r23
    855e:	67 95       	ror	r22
    8560:	b7 95       	ror	r27
    8562:	f7 95       	ror	r31
    8564:	9f 5f       	subi	r25, 0xFF	; 255
    8566:	c9 f7       	brne	.-14     	; 0x855a <__divsf3_pse+0x74>
    8568:	88 0f       	add	r24, r24
    856a:	91 1d       	adc	r25, r1
    856c:	96 95       	lsr	r25
    856e:	87 95       	ror	r24
    8570:	97 f9       	bld	r25, 7
    8572:	08 95       	ret
    8574:	e1 e0       	ldi	r30, 0x01	; 1
    8576:	66 0f       	add	r22, r22
    8578:	77 1f       	adc	r23, r23
    857a:	88 1f       	adc	r24, r24
    857c:	bb 1f       	adc	r27, r27
    857e:	62 17       	cp	r22, r18
    8580:	73 07       	cpc	r23, r19
    8582:	84 07       	cpc	r24, r20
    8584:	ba 07       	cpc	r27, r26
    8586:	20 f0       	brcs	.+8      	; 0x8590 <__divsf3_pse+0xaa>
    8588:	62 1b       	sub	r22, r18
    858a:	73 0b       	sbc	r23, r19
    858c:	84 0b       	sbc	r24, r20
    858e:	ba 0b       	sbc	r27, r26
    8590:	ee 1f       	adc	r30, r30
    8592:	88 f7       	brcc	.-30     	; 0x8576 <__divsf3_pse+0x90>
    8594:	e0 95       	com	r30
    8596:	08 95       	ret

00008598 <__fixsfsi>:
    8598:	04 d0       	rcall	.+8      	; 0x85a2 <__fixunssfsi>
    859a:	68 94       	set
    859c:	b1 11       	cpse	r27, r1
    859e:	77 c1       	rjmp	.+750    	; 0x888e <__fp_szero>
    85a0:	08 95       	ret

000085a2 <__fixunssfsi>:
    85a2:	43 d1       	rcall	.+646    	; 0x882a <__fp_splitA>
    85a4:	88 f0       	brcs	.+34     	; 0x85c8 <__fixunssfsi+0x26>
    85a6:	9f 57       	subi	r25, 0x7F	; 127
    85a8:	90 f0       	brcs	.+36     	; 0x85ce <__fixunssfsi+0x2c>
    85aa:	b9 2f       	mov	r27, r25
    85ac:	99 27       	eor	r25, r25
    85ae:	b7 51       	subi	r27, 0x17	; 23
    85b0:	a0 f0       	brcs	.+40     	; 0x85da <__fixunssfsi+0x38>
    85b2:	d1 f0       	breq	.+52     	; 0x85e8 <__fixunssfsi+0x46>
    85b4:	66 0f       	add	r22, r22
    85b6:	77 1f       	adc	r23, r23
    85b8:	88 1f       	adc	r24, r24
    85ba:	99 1f       	adc	r25, r25
    85bc:	1a f0       	brmi	.+6      	; 0x85c4 <__fixunssfsi+0x22>
    85be:	ba 95       	dec	r27
    85c0:	c9 f7       	brne	.-14     	; 0x85b4 <__fixunssfsi+0x12>
    85c2:	12 c0       	rjmp	.+36     	; 0x85e8 <__fixunssfsi+0x46>
    85c4:	b1 30       	cpi	r27, 0x01	; 1
    85c6:	81 f0       	breq	.+32     	; 0x85e8 <__fixunssfsi+0x46>
    85c8:	61 d1       	rcall	.+706    	; 0x888c <__fp_zero>
    85ca:	b1 e0       	ldi	r27, 0x01	; 1
    85cc:	08 95       	ret
    85ce:	5e c1       	rjmp	.+700    	; 0x888c <__fp_zero>
    85d0:	67 2f       	mov	r22, r23
    85d2:	78 2f       	mov	r23, r24
    85d4:	88 27       	eor	r24, r24
    85d6:	b8 5f       	subi	r27, 0xF8	; 248
    85d8:	39 f0       	breq	.+14     	; 0x85e8 <__fixunssfsi+0x46>
    85da:	b9 3f       	cpi	r27, 0xF9	; 249
    85dc:	cc f3       	brlt	.-14     	; 0x85d0 <__fixunssfsi+0x2e>
    85de:	86 95       	lsr	r24
    85e0:	77 95       	ror	r23
    85e2:	67 95       	ror	r22
    85e4:	b3 95       	inc	r27
    85e6:	d9 f7       	brne	.-10     	; 0x85de <__fixunssfsi+0x3c>
    85e8:	3e f4       	brtc	.+14     	; 0x85f8 <__fixunssfsi+0x56>
    85ea:	90 95       	com	r25
    85ec:	80 95       	com	r24
    85ee:	70 95       	com	r23
    85f0:	61 95       	neg	r22
    85f2:	7f 4f       	sbci	r23, 0xFF	; 255
    85f4:	8f 4f       	sbci	r24, 0xFF	; 255
    85f6:	9f 4f       	sbci	r25, 0xFF	; 255
    85f8:	08 95       	ret

000085fa <__floatunsisf>:
    85fa:	e8 94       	clt
    85fc:	09 c0       	rjmp	.+18     	; 0x8610 <__floatsisf+0x12>

000085fe <__floatsisf>:
    85fe:	97 fb       	bst	r25, 7
    8600:	3e f4       	brtc	.+14     	; 0x8610 <__floatsisf+0x12>
    8602:	90 95       	com	r25
    8604:	80 95       	com	r24
    8606:	70 95       	com	r23
    8608:	61 95       	neg	r22
    860a:	7f 4f       	sbci	r23, 0xFF	; 255
    860c:	8f 4f       	sbci	r24, 0xFF	; 255
    860e:	9f 4f       	sbci	r25, 0xFF	; 255
    8610:	99 23       	and	r25, r25
    8612:	a9 f0       	breq	.+42     	; 0x863e <__floatsisf+0x40>
    8614:	f9 2f       	mov	r31, r25
    8616:	96 e9       	ldi	r25, 0x96	; 150
    8618:	bb 27       	eor	r27, r27
    861a:	93 95       	inc	r25
    861c:	f6 95       	lsr	r31
    861e:	87 95       	ror	r24
    8620:	77 95       	ror	r23
    8622:	67 95       	ror	r22
    8624:	b7 95       	ror	r27
    8626:	f1 11       	cpse	r31, r1
    8628:	f8 cf       	rjmp	.-16     	; 0x861a <__floatsisf+0x1c>
    862a:	fa f4       	brpl	.+62     	; 0x866a <__floatsisf+0x6c>
    862c:	bb 0f       	add	r27, r27
    862e:	11 f4       	brne	.+4      	; 0x8634 <__floatsisf+0x36>
    8630:	60 ff       	sbrs	r22, 0
    8632:	1b c0       	rjmp	.+54     	; 0x866a <__floatsisf+0x6c>
    8634:	6f 5f       	subi	r22, 0xFF	; 255
    8636:	7f 4f       	sbci	r23, 0xFF	; 255
    8638:	8f 4f       	sbci	r24, 0xFF	; 255
    863a:	9f 4f       	sbci	r25, 0xFF	; 255
    863c:	16 c0       	rjmp	.+44     	; 0x866a <__floatsisf+0x6c>
    863e:	88 23       	and	r24, r24
    8640:	11 f0       	breq	.+4      	; 0x8646 <__floatsisf+0x48>
    8642:	96 e9       	ldi	r25, 0x96	; 150
    8644:	11 c0       	rjmp	.+34     	; 0x8668 <__floatsisf+0x6a>
    8646:	77 23       	and	r23, r23
    8648:	21 f0       	breq	.+8      	; 0x8652 <__floatsisf+0x54>
    864a:	9e e8       	ldi	r25, 0x8E	; 142
    864c:	87 2f       	mov	r24, r23
    864e:	76 2f       	mov	r23, r22
    8650:	05 c0       	rjmp	.+10     	; 0x865c <__floatsisf+0x5e>
    8652:	66 23       	and	r22, r22
    8654:	71 f0       	breq	.+28     	; 0x8672 <__floatsisf+0x74>
    8656:	96 e8       	ldi	r25, 0x86	; 134
    8658:	86 2f       	mov	r24, r22
    865a:	70 e0       	ldi	r23, 0x00	; 0
    865c:	60 e0       	ldi	r22, 0x00	; 0
    865e:	2a f0       	brmi	.+10     	; 0x866a <__floatsisf+0x6c>
    8660:	9a 95       	dec	r25
    8662:	66 0f       	add	r22, r22
    8664:	77 1f       	adc	r23, r23
    8666:	88 1f       	adc	r24, r24
    8668:	da f7       	brpl	.-10     	; 0x8660 <__floatsisf+0x62>
    866a:	88 0f       	add	r24, r24
    866c:	96 95       	lsr	r25
    866e:	87 95       	ror	r24
    8670:	97 f9       	bld	r25, 7
    8672:	08 95       	ret

00008674 <__fp_cmp>:
    8674:	99 0f       	add	r25, r25
    8676:	00 08       	sbc	r0, r0
    8678:	55 0f       	add	r21, r21
    867a:	aa 0b       	sbc	r26, r26
    867c:	e0 e8       	ldi	r30, 0x80	; 128
    867e:	fe ef       	ldi	r31, 0xFE	; 254
    8680:	16 16       	cp	r1, r22
    8682:	17 06       	cpc	r1, r23
    8684:	e8 07       	cpc	r30, r24
    8686:	f9 07       	cpc	r31, r25
    8688:	c0 f0       	brcs	.+48     	; 0x86ba <__fp_cmp+0x46>
    868a:	12 16       	cp	r1, r18
    868c:	13 06       	cpc	r1, r19
    868e:	e4 07       	cpc	r30, r20
    8690:	f5 07       	cpc	r31, r21
    8692:	98 f0       	brcs	.+38     	; 0x86ba <__fp_cmp+0x46>
    8694:	62 1b       	sub	r22, r18
    8696:	73 0b       	sbc	r23, r19
    8698:	84 0b       	sbc	r24, r20
    869a:	95 0b       	sbc	r25, r21
    869c:	39 f4       	brne	.+14     	; 0x86ac <__fp_cmp+0x38>
    869e:	0a 26       	eor	r0, r26
    86a0:	61 f0       	breq	.+24     	; 0x86ba <__fp_cmp+0x46>
    86a2:	23 2b       	or	r18, r19
    86a4:	24 2b       	or	r18, r20
    86a6:	25 2b       	or	r18, r21
    86a8:	21 f4       	brne	.+8      	; 0x86b2 <__fp_cmp+0x3e>
    86aa:	08 95       	ret
    86ac:	0a 26       	eor	r0, r26
    86ae:	09 f4       	brne	.+2      	; 0x86b2 <__fp_cmp+0x3e>
    86b0:	a1 40       	sbci	r26, 0x01	; 1
    86b2:	a6 95       	lsr	r26
    86b4:	8f ef       	ldi	r24, 0xFF	; 255
    86b6:	81 1d       	adc	r24, r1
    86b8:	81 1d       	adc	r24, r1
    86ba:	08 95       	ret

000086bc <__fp_inf>:
    86bc:	97 f9       	bld	r25, 7
    86be:	9f 67       	ori	r25, 0x7F	; 127
    86c0:	80 e8       	ldi	r24, 0x80	; 128
    86c2:	70 e0       	ldi	r23, 0x00	; 0
    86c4:	60 e0       	ldi	r22, 0x00	; 0
    86c6:	08 95       	ret

000086c8 <__fp_mintl>:
    86c8:	88 23       	and	r24, r24
    86ca:	71 f4       	brne	.+28     	; 0x86e8 <__fp_mintl+0x20>
    86cc:	77 23       	and	r23, r23
    86ce:	21 f0       	breq	.+8      	; 0x86d8 <__fp_mintl+0x10>
    86d0:	98 50       	subi	r25, 0x08	; 8
    86d2:	87 2b       	or	r24, r23
    86d4:	76 2f       	mov	r23, r22
    86d6:	07 c0       	rjmp	.+14     	; 0x86e6 <__fp_mintl+0x1e>
    86d8:	66 23       	and	r22, r22
    86da:	11 f4       	brne	.+4      	; 0x86e0 <__fp_mintl+0x18>
    86dc:	99 27       	eor	r25, r25
    86de:	0d c0       	rjmp	.+26     	; 0x86fa <__fp_mintl+0x32>
    86e0:	90 51       	subi	r25, 0x10	; 16
    86e2:	86 2b       	or	r24, r22
    86e4:	70 e0       	ldi	r23, 0x00	; 0
    86e6:	60 e0       	ldi	r22, 0x00	; 0
    86e8:	2a f0       	brmi	.+10     	; 0x86f4 <__fp_mintl+0x2c>
    86ea:	9a 95       	dec	r25
    86ec:	66 0f       	add	r22, r22
    86ee:	77 1f       	adc	r23, r23
    86f0:	88 1f       	adc	r24, r24
    86f2:	da f7       	brpl	.-10     	; 0x86ea <__fp_mintl+0x22>
    86f4:	88 0f       	add	r24, r24
    86f6:	96 95       	lsr	r25
    86f8:	87 95       	ror	r24
    86fa:	97 f9       	bld	r25, 7
    86fc:	08 95       	ret

000086fe <__fp_mpack>:
    86fe:	9f 3f       	cpi	r25, 0xFF	; 255
    8700:	31 f0       	breq	.+12     	; 0x870e <__fp_mpack_finite+0xc>

00008702 <__fp_mpack_finite>:
    8702:	91 50       	subi	r25, 0x01	; 1
    8704:	20 f4       	brcc	.+8      	; 0x870e <__fp_mpack_finite+0xc>
    8706:	87 95       	ror	r24
    8708:	77 95       	ror	r23
    870a:	67 95       	ror	r22
    870c:	b7 95       	ror	r27
    870e:	88 0f       	add	r24, r24
    8710:	91 1d       	adc	r25, r1
    8712:	96 95       	lsr	r25
    8714:	87 95       	ror	r24
    8716:	97 f9       	bld	r25, 7
    8718:	08 95       	ret

0000871a <__fp_nan>:
    871a:	9f ef       	ldi	r25, 0xFF	; 255
    871c:	80 ec       	ldi	r24, 0xC0	; 192
    871e:	08 95       	ret

00008720 <__fp_powser>:
    8720:	df 93       	push	r29
    8722:	cf 93       	push	r28
    8724:	1f 93       	push	r17
    8726:	0f 93       	push	r16
    8728:	ff 92       	push	r15
    872a:	ef 92       	push	r14
    872c:	df 92       	push	r13
    872e:	7b 01       	movw	r14, r22
    8730:	8c 01       	movw	r16, r24
    8732:	68 94       	set
    8734:	05 c0       	rjmp	.+10     	; 0x8740 <__fp_powser+0x20>
    8736:	da 2e       	mov	r13, r26
    8738:	ef 01       	movw	r28, r30
    873a:	8d d1       	rcall	.+794    	; 0x8a56 <__mulsf3x>
    873c:	fe 01       	movw	r30, r28
    873e:	e8 94       	clt
    8740:	a5 91       	lpm	r26, Z+
    8742:	25 91       	lpm	r18, Z+
    8744:	35 91       	lpm	r19, Z+
    8746:	45 91       	lpm	r20, Z+
    8748:	55 91       	lpm	r21, Z+
    874a:	ae f3       	brts	.-22     	; 0x8736 <__fp_powser+0x16>
    874c:	ef 01       	movw	r28, r30
    874e:	27 de       	rcall	.-946    	; 0x839e <__addsf3x>
    8750:	fe 01       	movw	r30, r28
    8752:	97 01       	movw	r18, r14
    8754:	a8 01       	movw	r20, r16
    8756:	da 94       	dec	r13
    8758:	79 f7       	brne	.-34     	; 0x8738 <__fp_powser+0x18>
    875a:	df 90       	pop	r13
    875c:	ef 90       	pop	r14
    875e:	ff 90       	pop	r15
    8760:	0f 91       	pop	r16
    8762:	1f 91       	pop	r17
    8764:	cf 91       	pop	r28
    8766:	df 91       	pop	r29
    8768:	08 95       	ret

0000876a <__fp_pscA>:
    876a:	00 24       	eor	r0, r0
    876c:	0a 94       	dec	r0
    876e:	16 16       	cp	r1, r22
    8770:	17 06       	cpc	r1, r23
    8772:	18 06       	cpc	r1, r24
    8774:	09 06       	cpc	r0, r25
    8776:	08 95       	ret

00008778 <__fp_pscB>:
    8778:	00 24       	eor	r0, r0
    877a:	0a 94       	dec	r0
    877c:	12 16       	cp	r1, r18
    877e:	13 06       	cpc	r1, r19
    8780:	14 06       	cpc	r1, r20
    8782:	05 06       	cpc	r0, r21
    8784:	08 95       	ret
    8786:	c9 cf       	rjmp	.-110    	; 0x871a <__fp_nan>

00008788 <__fp_rempio2>:
    8788:	50 d0       	rcall	.+160    	; 0x882a <__fp_splitA>
    878a:	e8 f3       	brcs	.-6      	; 0x8786 <__fp_pscB+0xe>
    878c:	e8 94       	clt
    878e:	e0 e0       	ldi	r30, 0x00	; 0
    8790:	bb 27       	eor	r27, r27
    8792:	9f 57       	subi	r25, 0x7F	; 127
    8794:	f0 f0       	brcs	.+60     	; 0x87d2 <__fp_rempio2+0x4a>
    8796:	2a ed       	ldi	r18, 0xDA	; 218
    8798:	3f e0       	ldi	r19, 0x0F	; 15
    879a:	49 ec       	ldi	r20, 0xC9	; 201
    879c:	06 c0       	rjmp	.+12     	; 0x87aa <__fp_rempio2+0x22>
    879e:	ee 0f       	add	r30, r30
    87a0:	bb 0f       	add	r27, r27
    87a2:	66 1f       	adc	r22, r22
    87a4:	77 1f       	adc	r23, r23
    87a6:	88 1f       	adc	r24, r24
    87a8:	28 f0       	brcs	.+10     	; 0x87b4 <__fp_rempio2+0x2c>
    87aa:	b2 3a       	cpi	r27, 0xA2	; 162
    87ac:	62 07       	cpc	r22, r18
    87ae:	73 07       	cpc	r23, r19
    87b0:	84 07       	cpc	r24, r20
    87b2:	28 f0       	brcs	.+10     	; 0x87be <__fp_rempio2+0x36>
    87b4:	b2 5a       	subi	r27, 0xA2	; 162
    87b6:	62 0b       	sbc	r22, r18
    87b8:	73 0b       	sbc	r23, r19
    87ba:	84 0b       	sbc	r24, r20
    87bc:	e3 95       	inc	r30
    87be:	9a 95       	dec	r25
    87c0:	72 f7       	brpl	.-36     	; 0x879e <__fp_rempio2+0x16>
    87c2:	80 38       	cpi	r24, 0x80	; 128
    87c4:	30 f4       	brcc	.+12     	; 0x87d2 <__fp_rempio2+0x4a>
    87c6:	9a 95       	dec	r25
    87c8:	bb 0f       	add	r27, r27
    87ca:	66 1f       	adc	r22, r22
    87cc:	77 1f       	adc	r23, r23
    87ce:	88 1f       	adc	r24, r24
    87d0:	d2 f7       	brpl	.-12     	; 0x87c6 <__fp_rempio2+0x3e>
    87d2:	90 48       	sbci	r25, 0x80	; 128
    87d4:	96 cf       	rjmp	.-212    	; 0x8702 <__fp_mpack_finite>

000087d6 <__fp_round>:
    87d6:	09 2e       	mov	r0, r25
    87d8:	03 94       	inc	r0
    87da:	00 0c       	add	r0, r0
    87dc:	11 f4       	brne	.+4      	; 0x87e2 <__fp_round+0xc>
    87de:	88 23       	and	r24, r24
    87e0:	52 f0       	brmi	.+20     	; 0x87f6 <__fp_round+0x20>
    87e2:	bb 0f       	add	r27, r27
    87e4:	40 f4       	brcc	.+16     	; 0x87f6 <__fp_round+0x20>
    87e6:	bf 2b       	or	r27, r31
    87e8:	11 f4       	brne	.+4      	; 0x87ee <__fp_round+0x18>
    87ea:	60 ff       	sbrs	r22, 0
    87ec:	04 c0       	rjmp	.+8      	; 0x87f6 <__fp_round+0x20>
    87ee:	6f 5f       	subi	r22, 0xFF	; 255
    87f0:	7f 4f       	sbci	r23, 0xFF	; 255
    87f2:	8f 4f       	sbci	r24, 0xFF	; 255
    87f4:	9f 4f       	sbci	r25, 0xFF	; 255
    87f6:	08 95       	ret

000087f8 <__fp_sinus>:
    87f8:	ef 93       	push	r30
    87fa:	e0 ff       	sbrs	r30, 0
    87fc:	06 c0       	rjmp	.+12     	; 0x880a <__fp_sinus+0x12>
    87fe:	a2 ea       	ldi	r26, 0xA2	; 162
    8800:	2a ed       	ldi	r18, 0xDA	; 218
    8802:	3f e0       	ldi	r19, 0x0F	; 15
    8804:	49 ec       	ldi	r20, 0xC9	; 201
    8806:	5f eb       	ldi	r21, 0xBF	; 191
    8808:	ca dd       	rcall	.-1132   	; 0x839e <__addsf3x>
    880a:	e5 df       	rcall	.-54     	; 0x87d6 <__fp_round>
    880c:	0f 90       	pop	r0
    880e:	03 94       	inc	r0
    8810:	01 fc       	sbrc	r0, 1
    8812:	90 58       	subi	r25, 0x80	; 128
    8814:	e5 e1       	ldi	r30, 0x15	; 21
    8816:	f2 e0       	ldi	r31, 0x02	; 2
    8818:	d2 c1       	rjmp	.+932    	; 0x8bbe <__fp_powsodd>

0000881a <__fp_split3>:
    881a:	57 fd       	sbrc	r21, 7
    881c:	90 58       	subi	r25, 0x80	; 128
    881e:	44 0f       	add	r20, r20
    8820:	55 1f       	adc	r21, r21
    8822:	59 f0       	breq	.+22     	; 0x883a <__fp_splitA+0x10>
    8824:	5f 3f       	cpi	r21, 0xFF	; 255
    8826:	71 f0       	breq	.+28     	; 0x8844 <__fp_splitA+0x1a>
    8828:	47 95       	ror	r20

0000882a <__fp_splitA>:
    882a:	88 0f       	add	r24, r24
    882c:	97 fb       	bst	r25, 7
    882e:	99 1f       	adc	r25, r25
    8830:	61 f0       	breq	.+24     	; 0x884a <__fp_splitA+0x20>
    8832:	9f 3f       	cpi	r25, 0xFF	; 255
    8834:	79 f0       	breq	.+30     	; 0x8854 <__fp_splitA+0x2a>
    8836:	87 95       	ror	r24
    8838:	08 95       	ret
    883a:	12 16       	cp	r1, r18
    883c:	13 06       	cpc	r1, r19
    883e:	14 06       	cpc	r1, r20
    8840:	55 1f       	adc	r21, r21
    8842:	f2 cf       	rjmp	.-28     	; 0x8828 <__fp_split3+0xe>
    8844:	46 95       	lsr	r20
    8846:	f1 df       	rcall	.-30     	; 0x882a <__fp_splitA>
    8848:	08 c0       	rjmp	.+16     	; 0x885a <__fp_splitA+0x30>
    884a:	16 16       	cp	r1, r22
    884c:	17 06       	cpc	r1, r23
    884e:	18 06       	cpc	r1, r24
    8850:	99 1f       	adc	r25, r25
    8852:	f1 cf       	rjmp	.-30     	; 0x8836 <__fp_splitA+0xc>
    8854:	86 95       	lsr	r24
    8856:	71 05       	cpc	r23, r1
    8858:	61 05       	cpc	r22, r1
    885a:	08 94       	sec
    885c:	08 95       	ret

0000885e <__fp_trunc>:
    885e:	e5 df       	rcall	.-54     	; 0x882a <__fp_splitA>
    8860:	a0 f0       	brcs	.+40     	; 0x888a <__fp_trunc+0x2c>
    8862:	be e7       	ldi	r27, 0x7E	; 126
    8864:	b9 17       	cp	r27, r25
    8866:	88 f4       	brcc	.+34     	; 0x888a <__fp_trunc+0x2c>
    8868:	bb 27       	eor	r27, r27
    886a:	9f 38       	cpi	r25, 0x8F	; 143
    886c:	60 f4       	brcc	.+24     	; 0x8886 <__fp_trunc+0x28>
    886e:	16 16       	cp	r1, r22
    8870:	b1 1d       	adc	r27, r1
    8872:	67 2f       	mov	r22, r23
    8874:	78 2f       	mov	r23, r24
    8876:	88 27       	eor	r24, r24
    8878:	98 5f       	subi	r25, 0xF8	; 248
    887a:	f7 cf       	rjmp	.-18     	; 0x886a <__fp_trunc+0xc>
    887c:	86 95       	lsr	r24
    887e:	77 95       	ror	r23
    8880:	67 95       	ror	r22
    8882:	b1 1d       	adc	r27, r1
    8884:	93 95       	inc	r25
    8886:	96 39       	cpi	r25, 0x96	; 150
    8888:	c8 f3       	brcs	.-14     	; 0x887c <__fp_trunc+0x1e>
    888a:	08 95       	ret

0000888c <__fp_zero>:
    888c:	e8 94       	clt

0000888e <__fp_szero>:
    888e:	bb 27       	eor	r27, r27
    8890:	66 27       	eor	r22, r22
    8892:	77 27       	eor	r23, r23
    8894:	cb 01       	movw	r24, r22
    8896:	97 f9       	bld	r25, 7
    8898:	08 95       	ret

0000889a <__gesf2>:
    889a:	ec de       	rcall	.-552    	; 0x8674 <__fp_cmp>
    889c:	08 f4       	brcc	.+2      	; 0x88a0 <__gesf2+0x6>
    889e:	8f ef       	ldi	r24, 0xFF	; 255
    88a0:	08 95       	ret
    88a2:	63 df       	rcall	.-314    	; 0x876a <__fp_pscA>
    88a4:	19 f0       	breq	.+6      	; 0x88ac <__gesf2+0x12>
    88a6:	68 df       	rcall	.-304    	; 0x8778 <__fp_pscB>
    88a8:	09 f0       	breq	.+2      	; 0x88ac <__gesf2+0x12>
    88aa:	37 cf       	rjmp	.-402    	; 0x871a <__fp_nan>
    88ac:	07 cf       	rjmp	.-498    	; 0x86bc <__fp_inf>
    88ae:	b9 01       	movw	r22, r18
    88b0:	ca 01       	movw	r24, r20
    88b2:	25 cf       	rjmp	.-438    	; 0x86fe <__fp_mpack>

000088b4 <hypot>:
    88b4:	9f 77       	andi	r25, 0x7F	; 127
    88b6:	5f 77       	andi	r21, 0x7F	; 127
    88b8:	b0 df       	rcall	.-160    	; 0x881a <__fp_split3>
    88ba:	98 f3       	brcs	.-26     	; 0x88a2 <__gesf2+0x8>
    88bc:	99 23       	and	r25, r25
    88be:	b9 f3       	breq	.-18     	; 0x88ae <__gesf2+0x14>
    88c0:	55 23       	and	r21, r21
    88c2:	b9 f3       	breq	.-18     	; 0x88b2 <__gesf2+0x18>
    88c4:	ff 27       	eor	r31, r31
    88c6:	95 17       	cp	r25, r21
    88c8:	58 f4       	brcc	.+22     	; 0x88e0 <hypot+0x2c>
    88ca:	e5 2f       	mov	r30, r21
    88cc:	e9 1b       	sub	r30, r25
    88ce:	ed 30       	cpi	r30, 0x0D	; 13
    88d0:	70 f7       	brcc	.-36     	; 0x88ae <__gesf2+0x14>
    88d2:	5e 3b       	cpi	r21, 0xBE	; 190
    88d4:	10 f0       	brcs	.+4      	; 0x88da <hypot+0x26>
    88d6:	f1 e4       	ldi	r31, 0x41	; 65
    88d8:	1c c0       	rjmp	.+56     	; 0x8912 <hypot+0x5e>
    88da:	90 34       	cpi	r25, 0x40	; 64
    88dc:	e0 f4       	brcc	.+56     	; 0x8916 <hypot+0x62>
    88de:	0a c0       	rjmp	.+20     	; 0x88f4 <hypot+0x40>
    88e0:	e9 2f       	mov	r30, r25
    88e2:	e5 1b       	sub	r30, r21
    88e4:	ed 30       	cpi	r30, 0x0D	; 13
    88e6:	28 f7       	brcc	.-54     	; 0x88b2 <__gesf2+0x18>
    88e8:	9e 3b       	cpi	r25, 0xBE	; 190
    88ea:	10 f0       	brcs	.+4      	; 0x88f0 <hypot+0x3c>
    88ec:	f1 e4       	ldi	r31, 0x41	; 65
    88ee:	11 c0       	rjmp	.+34     	; 0x8912 <hypot+0x5e>
    88f0:	50 34       	cpi	r21, 0x40	; 64
    88f2:	88 f4       	brcc	.+34     	; 0x8916 <hypot+0x62>
    88f4:	f9 ea       	ldi	r31, 0xA9	; 169
    88f6:	88 23       	and	r24, r24
    88f8:	2a f0       	brmi	.+10     	; 0x8904 <hypot+0x50>
    88fa:	9a 95       	dec	r25
    88fc:	66 0f       	add	r22, r22
    88fe:	77 1f       	adc	r23, r23
    8900:	88 1f       	adc	r24, r24
    8902:	da f7       	brpl	.-10     	; 0x88fa <hypot+0x46>
    8904:	44 23       	and	r20, r20
    8906:	2a f0       	brmi	.+10     	; 0x8912 <hypot+0x5e>
    8908:	5a 95       	dec	r21
    890a:	22 0f       	add	r18, r18
    890c:	33 1f       	adc	r19, r19
    890e:	44 1f       	adc	r20, r20
    8910:	da f7       	brpl	.-10     	; 0x8908 <hypot+0x54>
    8912:	9f 1b       	sub	r25, r31
    8914:	5f 1b       	sub	r21, r31
    8916:	ff 93       	push	r31
    8918:	1f 93       	push	r17
    891a:	0f 93       	push	r16
    891c:	ff 92       	push	r15
    891e:	ef 92       	push	r14
    8920:	79 01       	movw	r14, r18
    8922:	8a 01       	movw	r16, r20
    8924:	bb 27       	eor	r27, r27
    8926:	ab 2f       	mov	r26, r27
    8928:	9b 01       	movw	r18, r22
    892a:	ac 01       	movw	r20, r24
    892c:	96 d0       	rcall	.+300    	; 0x8a5a <__mulsf3_pse>
    892e:	97 01       	movw	r18, r14
    8930:	a8 01       	movw	r20, r16
    8932:	bf 93       	push	r27
    8934:	7b 01       	movw	r14, r22
    8936:	8c 01       	movw	r16, r24
    8938:	aa 27       	eor	r26, r26
    893a:	ba 2f       	mov	r27, r26
    893c:	b9 01       	movw	r22, r18
    893e:	ca 01       	movw	r24, r20
    8940:	8c d0       	rcall	.+280    	; 0x8a5a <__mulsf3_pse>
    8942:	af 91       	pop	r26
    8944:	97 01       	movw	r18, r14
    8946:	a8 01       	movw	r20, r16
    8948:	ef 90       	pop	r14
    894a:	ff 90       	pop	r15
    894c:	0f 91       	pop	r16
    894e:	1f 91       	pop	r17
    8950:	26 dd       	rcall	.-1460   	; 0x839e <__addsf3x>
    8952:	41 df       	rcall	.-382    	; 0x87d6 <__fp_round>
    8954:	e1 d0       	rcall	.+450    	; 0x8b18 <sqrt>
    8956:	4f 91       	pop	r20
    8958:	40 ff       	sbrs	r20, 0
    895a:	08 95       	ret
    895c:	55 27       	eor	r21, r21
    895e:	47 fd       	sbrc	r20, 7
    8960:	50 95       	com	r21
    8962:	09 c0       	rjmp	.+18     	; 0x8976 <ldexp>

00008964 <inverse>:
    8964:	9b 01       	movw	r18, r22
    8966:	ac 01       	movw	r20, r24
    8968:	60 e0       	ldi	r22, 0x00	; 0
    896a:	70 e0       	ldi	r23, 0x00	; 0
    896c:	80 e8       	ldi	r24, 0x80	; 128
    896e:	9f e3       	ldi	r25, 0x3F	; 63
    8970:	ab cd       	rjmp	.-1194   	; 0x84c8 <__divsf3>
    8972:	a4 ce       	rjmp	.-696    	; 0x86bc <__fp_inf>
    8974:	c4 ce       	rjmp	.-632    	; 0x86fe <__fp_mpack>

00008976 <ldexp>:
    8976:	59 df       	rcall	.-334    	; 0x882a <__fp_splitA>
    8978:	e8 f3       	brcs	.-6      	; 0x8974 <inverse+0x10>
    897a:	99 23       	and	r25, r25
    897c:	d9 f3       	breq	.-10     	; 0x8974 <inverse+0x10>
    897e:	94 0f       	add	r25, r20
    8980:	51 1d       	adc	r21, r1
    8982:	bb f3       	brvs	.-18     	; 0x8972 <inverse+0xe>
    8984:	91 50       	subi	r25, 0x01	; 1
    8986:	50 40       	sbci	r21, 0x00	; 0
    8988:	94 f0       	brlt	.+36     	; 0x89ae <ldexp+0x38>
    898a:	59 f0       	breq	.+22     	; 0x89a2 <ldexp+0x2c>
    898c:	88 23       	and	r24, r24
    898e:	32 f0       	brmi	.+12     	; 0x899c <ldexp+0x26>
    8990:	66 0f       	add	r22, r22
    8992:	77 1f       	adc	r23, r23
    8994:	88 1f       	adc	r24, r24
    8996:	91 50       	subi	r25, 0x01	; 1
    8998:	50 40       	sbci	r21, 0x00	; 0
    899a:	c1 f7       	brne	.-16     	; 0x898c <ldexp+0x16>
    899c:	9e 3f       	cpi	r25, 0xFE	; 254
    899e:	51 05       	cpc	r21, r1
    89a0:	44 f7       	brge	.-48     	; 0x8972 <inverse+0xe>
    89a2:	88 0f       	add	r24, r24
    89a4:	91 1d       	adc	r25, r1
    89a6:	96 95       	lsr	r25
    89a8:	87 95       	ror	r24
    89aa:	97 f9       	bld	r25, 7
    89ac:	08 95       	ret
    89ae:	5f 3f       	cpi	r21, 0xFF	; 255
    89b0:	ac f0       	brlt	.+42     	; 0x89dc <ldexp+0x66>
    89b2:	98 3e       	cpi	r25, 0xE8	; 232
    89b4:	9c f0       	brlt	.+38     	; 0x89dc <ldexp+0x66>
    89b6:	bb 27       	eor	r27, r27
    89b8:	86 95       	lsr	r24
    89ba:	77 95       	ror	r23
    89bc:	67 95       	ror	r22
    89be:	b7 95       	ror	r27
    89c0:	08 f4       	brcc	.+2      	; 0x89c4 <ldexp+0x4e>
    89c2:	b1 60       	ori	r27, 0x01	; 1
    89c4:	93 95       	inc	r25
    89c6:	c1 f7       	brne	.-16     	; 0x89b8 <ldexp+0x42>
    89c8:	bb 0f       	add	r27, r27
    89ca:	58 f7       	brcc	.-42     	; 0x89a2 <ldexp+0x2c>
    89cc:	11 f4       	brne	.+4      	; 0x89d2 <ldexp+0x5c>
    89ce:	60 ff       	sbrs	r22, 0
    89d0:	e8 cf       	rjmp	.-48     	; 0x89a2 <ldexp+0x2c>
    89d2:	6f 5f       	subi	r22, 0xFF	; 255
    89d4:	7f 4f       	sbci	r23, 0xFF	; 255
    89d6:	8f 4f       	sbci	r24, 0xFF	; 255
    89d8:	9f 4f       	sbci	r25, 0xFF	; 255
    89da:	e3 cf       	rjmp	.-58     	; 0x89a2 <ldexp+0x2c>
    89dc:	58 cf       	rjmp	.-336    	; 0x888e <__fp_szero>

000089de <lround>:
    89de:	25 df       	rcall	.-438    	; 0x882a <__fp_splitA>
    89e0:	58 f1       	brcs	.+86     	; 0x8a38 <lround+0x5a>
    89e2:	9e 57       	subi	r25, 0x7E	; 126
    89e4:	58 f1       	brcs	.+86     	; 0x8a3c <lround+0x5e>
    89e6:	98 51       	subi	r25, 0x18	; 24
    89e8:	a0 f0       	brcs	.+40     	; 0x8a12 <lround+0x34>
    89ea:	e9 f0       	breq	.+58     	; 0x8a26 <lround+0x48>
    89ec:	98 30       	cpi	r25, 0x08	; 8
    89ee:	20 f5       	brcc	.+72     	; 0x8a38 <lround+0x5a>
    89f0:	09 2e       	mov	r0, r25
    89f2:	99 27       	eor	r25, r25
    89f4:	66 0f       	add	r22, r22
    89f6:	77 1f       	adc	r23, r23
    89f8:	88 1f       	adc	r24, r24
    89fa:	99 1f       	adc	r25, r25
    89fc:	0a 94       	dec	r0
    89fe:	d1 f7       	brne	.-12     	; 0x89f4 <lround+0x16>
    8a00:	12 c0       	rjmp	.+36     	; 0x8a26 <lround+0x48>
    8a02:	06 2e       	mov	r0, r22
    8a04:	67 2f       	mov	r22, r23
    8a06:	78 2f       	mov	r23, r24
    8a08:	88 27       	eor	r24, r24
    8a0a:	98 5f       	subi	r25, 0xF8	; 248
    8a0c:	11 f4       	brne	.+4      	; 0x8a12 <lround+0x34>
    8a0e:	00 0c       	add	r0, r0
    8a10:	07 c0       	rjmp	.+14     	; 0x8a20 <lround+0x42>
    8a12:	99 3f       	cpi	r25, 0xF9	; 249
    8a14:	b4 f3       	brlt	.-20     	; 0x8a02 <lround+0x24>
    8a16:	86 95       	lsr	r24
    8a18:	77 95       	ror	r23
    8a1a:	67 95       	ror	r22
    8a1c:	93 95       	inc	r25
    8a1e:	d9 f7       	brne	.-10     	; 0x8a16 <lround+0x38>
    8a20:	61 1d       	adc	r22, r1
    8a22:	71 1d       	adc	r23, r1
    8a24:	81 1d       	adc	r24, r1
    8a26:	3e f4       	brtc	.+14     	; 0x8a36 <lround+0x58>
    8a28:	90 95       	com	r25
    8a2a:	80 95       	com	r24
    8a2c:	70 95       	com	r23
    8a2e:	61 95       	neg	r22
    8a30:	7f 4f       	sbci	r23, 0xFF	; 255
    8a32:	8f 4f       	sbci	r24, 0xFF	; 255
    8a34:	9f 4f       	sbci	r25, 0xFF	; 255
    8a36:	08 95       	ret
    8a38:	68 94       	set
    8a3a:	29 cf       	rjmp	.-430    	; 0x888e <__fp_szero>
    8a3c:	27 cf       	rjmp	.-434    	; 0x888c <__fp_zero>

00008a3e <__mulsf3>:
    8a3e:	0b d0       	rcall	.+22     	; 0x8a56 <__mulsf3x>
    8a40:	ca ce       	rjmp	.-620    	; 0x87d6 <__fp_round>
    8a42:	93 de       	rcall	.-730    	; 0x876a <__fp_pscA>
    8a44:	28 f0       	brcs	.+10     	; 0x8a50 <__mulsf3+0x12>
    8a46:	98 de       	rcall	.-720    	; 0x8778 <__fp_pscB>
    8a48:	18 f0       	brcs	.+6      	; 0x8a50 <__mulsf3+0x12>
    8a4a:	95 23       	and	r25, r21
    8a4c:	09 f0       	breq	.+2      	; 0x8a50 <__mulsf3+0x12>
    8a4e:	36 ce       	rjmp	.-916    	; 0x86bc <__fp_inf>
    8a50:	64 ce       	rjmp	.-824    	; 0x871a <__fp_nan>
    8a52:	11 24       	eor	r1, r1
    8a54:	1c cf       	rjmp	.-456    	; 0x888e <__fp_szero>

00008a56 <__mulsf3x>:
    8a56:	e1 de       	rcall	.-574    	; 0x881a <__fp_split3>
    8a58:	a0 f3       	brcs	.-24     	; 0x8a42 <__mulsf3+0x4>

00008a5a <__mulsf3_pse>:
    8a5a:	95 9f       	mul	r25, r21
    8a5c:	d1 f3       	breq	.-12     	; 0x8a52 <__mulsf3+0x14>
    8a5e:	95 0f       	add	r25, r21
    8a60:	50 e0       	ldi	r21, 0x00	; 0
    8a62:	55 1f       	adc	r21, r21
    8a64:	62 9f       	mul	r22, r18
    8a66:	f0 01       	movw	r30, r0
    8a68:	72 9f       	mul	r23, r18
    8a6a:	bb 27       	eor	r27, r27
    8a6c:	f0 0d       	add	r31, r0
    8a6e:	b1 1d       	adc	r27, r1
    8a70:	63 9f       	mul	r22, r19
    8a72:	aa 27       	eor	r26, r26
    8a74:	f0 0d       	add	r31, r0
    8a76:	b1 1d       	adc	r27, r1
    8a78:	aa 1f       	adc	r26, r26
    8a7a:	64 9f       	mul	r22, r20
    8a7c:	66 27       	eor	r22, r22
    8a7e:	b0 0d       	add	r27, r0
    8a80:	a1 1d       	adc	r26, r1
    8a82:	66 1f       	adc	r22, r22
    8a84:	82 9f       	mul	r24, r18
    8a86:	22 27       	eor	r18, r18
    8a88:	b0 0d       	add	r27, r0
    8a8a:	a1 1d       	adc	r26, r1
    8a8c:	62 1f       	adc	r22, r18
    8a8e:	73 9f       	mul	r23, r19
    8a90:	b0 0d       	add	r27, r0
    8a92:	a1 1d       	adc	r26, r1
    8a94:	62 1f       	adc	r22, r18
    8a96:	83 9f       	mul	r24, r19
    8a98:	a0 0d       	add	r26, r0
    8a9a:	61 1d       	adc	r22, r1
    8a9c:	22 1f       	adc	r18, r18
    8a9e:	74 9f       	mul	r23, r20
    8aa0:	33 27       	eor	r19, r19
    8aa2:	a0 0d       	add	r26, r0
    8aa4:	61 1d       	adc	r22, r1
    8aa6:	23 1f       	adc	r18, r19
    8aa8:	84 9f       	mul	r24, r20
    8aaa:	60 0d       	add	r22, r0
    8aac:	21 1d       	adc	r18, r1
    8aae:	82 2f       	mov	r24, r18
    8ab0:	76 2f       	mov	r23, r22
    8ab2:	6a 2f       	mov	r22, r26
    8ab4:	11 24       	eor	r1, r1
    8ab6:	9f 57       	subi	r25, 0x7F	; 127
    8ab8:	50 40       	sbci	r21, 0x00	; 0
    8aba:	8a f0       	brmi	.+34     	; 0x8ade <__mulsf3_pse+0x84>
    8abc:	e1 f0       	breq	.+56     	; 0x8af6 <__mulsf3_pse+0x9c>
    8abe:	88 23       	and	r24, r24
    8ac0:	4a f0       	brmi	.+18     	; 0x8ad4 <__mulsf3_pse+0x7a>
    8ac2:	ee 0f       	add	r30, r30
    8ac4:	ff 1f       	adc	r31, r31
    8ac6:	bb 1f       	adc	r27, r27
    8ac8:	66 1f       	adc	r22, r22
    8aca:	77 1f       	adc	r23, r23
    8acc:	88 1f       	adc	r24, r24
    8ace:	91 50       	subi	r25, 0x01	; 1
    8ad0:	50 40       	sbci	r21, 0x00	; 0
    8ad2:	a9 f7       	brne	.-22     	; 0x8abe <__mulsf3_pse+0x64>
    8ad4:	9e 3f       	cpi	r25, 0xFE	; 254
    8ad6:	51 05       	cpc	r21, r1
    8ad8:	70 f0       	brcs	.+28     	; 0x8af6 <__mulsf3_pse+0x9c>
    8ada:	f0 cd       	rjmp	.-1056   	; 0x86bc <__fp_inf>
    8adc:	d8 ce       	rjmp	.-592    	; 0x888e <__fp_szero>
    8ade:	5f 3f       	cpi	r21, 0xFF	; 255
    8ae0:	ec f3       	brlt	.-6      	; 0x8adc <__mulsf3_pse+0x82>
    8ae2:	98 3e       	cpi	r25, 0xE8	; 232
    8ae4:	dc f3       	brlt	.-10     	; 0x8adc <__mulsf3_pse+0x82>
    8ae6:	86 95       	lsr	r24
    8ae8:	77 95       	ror	r23
    8aea:	67 95       	ror	r22
    8aec:	b7 95       	ror	r27
    8aee:	f7 95       	ror	r31
    8af0:	e7 95       	ror	r30
    8af2:	9f 5f       	subi	r25, 0xFF	; 255
    8af4:	c1 f7       	brne	.-16     	; 0x8ae6 <__mulsf3_pse+0x8c>
    8af6:	fe 2b       	or	r31, r30
    8af8:	88 0f       	add	r24, r24
    8afa:	91 1d       	adc	r25, r1
    8afc:	96 95       	lsr	r25
    8afe:	87 95       	ror	r24
    8b00:	97 f9       	bld	r25, 7
    8b02:	08 95       	ret

00008b04 <sin>:
    8b04:	9f 93       	push	r25
    8b06:	40 de       	rcall	.-896    	; 0x8788 <__fp_rempio2>
    8b08:	0f 90       	pop	r0
    8b0a:	07 fc       	sbrc	r0, 7
    8b0c:	ee 5f       	subi	r30, 0xFE	; 254
    8b0e:	74 ce       	rjmp	.-792    	; 0x87f8 <__fp_sinus>
    8b10:	11 f4       	brne	.+4      	; 0x8b16 <sin+0x12>
    8b12:	0e f4       	brtc	.+2      	; 0x8b16 <sin+0x12>
    8b14:	02 ce       	rjmp	.-1020   	; 0x871a <__fp_nan>
    8b16:	f3 cd       	rjmp	.-1050   	; 0x86fe <__fp_mpack>

00008b18 <sqrt>:
    8b18:	88 de       	rcall	.-752    	; 0x882a <__fp_splitA>
    8b1a:	d0 f3       	brcs	.-12     	; 0x8b10 <sin+0xc>
    8b1c:	99 23       	and	r25, r25
    8b1e:	d9 f3       	breq	.-10     	; 0x8b16 <sin+0x12>
    8b20:	ce f3       	brts	.-14     	; 0x8b14 <sin+0x10>
    8b22:	9f 57       	subi	r25, 0x7F	; 127
    8b24:	55 0b       	sbc	r21, r21
    8b26:	87 ff       	sbrs	r24, 7
    8b28:	43 d0       	rcall	.+134    	; 0x8bb0 <__fp_norm2>
    8b2a:	00 24       	eor	r0, r0
    8b2c:	a0 e6       	ldi	r26, 0x60	; 96
    8b2e:	40 ea       	ldi	r20, 0xA0	; 160
    8b30:	90 01       	movw	r18, r0
    8b32:	80 58       	subi	r24, 0x80	; 128
    8b34:	56 95       	lsr	r21
    8b36:	97 95       	ror	r25
    8b38:	28 f4       	brcc	.+10     	; 0x8b44 <sqrt+0x2c>
    8b3a:	80 5c       	subi	r24, 0xC0	; 192
    8b3c:	66 0f       	add	r22, r22
    8b3e:	77 1f       	adc	r23, r23
    8b40:	88 1f       	adc	r24, r24
    8b42:	20 f0       	brcs	.+8      	; 0x8b4c <sqrt+0x34>
    8b44:	26 17       	cp	r18, r22
    8b46:	37 07       	cpc	r19, r23
    8b48:	48 07       	cpc	r20, r24
    8b4a:	30 f4       	brcc	.+12     	; 0x8b58 <sqrt+0x40>
    8b4c:	62 1b       	sub	r22, r18
    8b4e:	73 0b       	sbc	r23, r19
    8b50:	84 0b       	sbc	r24, r20
    8b52:	20 29       	or	r18, r0
    8b54:	31 29       	or	r19, r1
    8b56:	4a 2b       	or	r20, r26
    8b58:	a6 95       	lsr	r26
    8b5a:	17 94       	ror	r1
    8b5c:	07 94       	ror	r0
    8b5e:	20 25       	eor	r18, r0
    8b60:	31 25       	eor	r19, r1
    8b62:	4a 27       	eor	r20, r26
    8b64:	58 f7       	brcc	.-42     	; 0x8b3c <sqrt+0x24>
    8b66:	66 0f       	add	r22, r22
    8b68:	77 1f       	adc	r23, r23
    8b6a:	88 1f       	adc	r24, r24
    8b6c:	20 f0       	brcs	.+8      	; 0x8b76 <sqrt+0x5e>
    8b6e:	26 17       	cp	r18, r22
    8b70:	37 07       	cpc	r19, r23
    8b72:	48 07       	cpc	r20, r24
    8b74:	30 f4       	brcc	.+12     	; 0x8b82 <sqrt+0x6a>
    8b76:	62 0b       	sbc	r22, r18
    8b78:	73 0b       	sbc	r23, r19
    8b7a:	84 0b       	sbc	r24, r20
    8b7c:	20 0d       	add	r18, r0
    8b7e:	31 1d       	adc	r19, r1
    8b80:	41 1d       	adc	r20, r1
    8b82:	a0 95       	com	r26
    8b84:	81 f7       	brne	.-32     	; 0x8b66 <sqrt+0x4e>
    8b86:	b9 01       	movw	r22, r18
    8b88:	84 2f       	mov	r24, r20
    8b8a:	91 58       	subi	r25, 0x81	; 129
    8b8c:	88 0f       	add	r24, r24
    8b8e:	96 95       	lsr	r25
    8b90:	87 95       	ror	r24
    8b92:	08 95       	ret

00008b94 <square>:
    8b94:	9b 01       	movw	r18, r22
    8b96:	ac 01       	movw	r20, r24
    8b98:	52 cf       	rjmp	.-348    	; 0x8a3e <__mulsf3>

00008b9a <trunc>:
    8b9a:	61 de       	rcall	.-830    	; 0x885e <__fp_trunc>
    8b9c:	20 f0       	brcs	.+8      	; 0x8ba6 <trunc+0xc>
    8b9e:	9f 37       	cpi	r25, 0x7F	; 127
    8ba0:	08 f4       	brcc	.+2      	; 0x8ba4 <trunc+0xa>
    8ba2:	75 ce       	rjmp	.-790    	; 0x888e <__fp_szero>
    8ba4:	91 cd       	rjmp	.-1246   	; 0x86c8 <__fp_mintl>
    8ba6:	ab cd       	rjmp	.-1194   	; 0x86fe <__fp_mpack>

00008ba8 <__unordsf2>:
    8ba8:	65 dd       	rcall	.-1334   	; 0x8674 <__fp_cmp>
    8baa:	88 0b       	sbc	r24, r24
    8bac:	99 0b       	sbc	r25, r25
    8bae:	08 95       	ret

00008bb0 <__fp_norm2>:
    8bb0:	91 50       	subi	r25, 0x01	; 1
    8bb2:	50 40       	sbci	r21, 0x00	; 0
    8bb4:	66 0f       	add	r22, r22
    8bb6:	77 1f       	adc	r23, r23
    8bb8:	88 1f       	adc	r24, r24
    8bba:	d2 f7       	brpl	.-12     	; 0x8bb0 <__fp_norm2>
    8bbc:	08 95       	ret

00008bbe <__fp_powsodd>:
    8bbe:	9f 93       	push	r25
    8bc0:	8f 93       	push	r24
    8bc2:	7f 93       	push	r23
    8bc4:	6f 93       	push	r22
    8bc6:	ff 93       	push	r31
    8bc8:	ef 93       	push	r30
    8bca:	9b 01       	movw	r18, r22
    8bcc:	ac 01       	movw	r20, r24
    8bce:	37 df       	rcall	.-402    	; 0x8a3e <__mulsf3>
    8bd0:	ef 91       	pop	r30
    8bd2:	ff 91       	pop	r31
    8bd4:	a5 dd       	rcall	.-1206   	; 0x8720 <__fp_powser>
    8bd6:	2f 91       	pop	r18
    8bd8:	3f 91       	pop	r19
    8bda:	4f 91       	pop	r20
    8bdc:	5f 91       	pop	r21
    8bde:	2f cf       	rjmp	.-418    	; 0x8a3e <__mulsf3>

00008be0 <__mulsi3>:
    8be0:	62 9f       	mul	r22, r18
    8be2:	d0 01       	movw	r26, r0
    8be4:	73 9f       	mul	r23, r19
    8be6:	f0 01       	movw	r30, r0
    8be8:	82 9f       	mul	r24, r18
    8bea:	e0 0d       	add	r30, r0
    8bec:	f1 1d       	adc	r31, r1
    8bee:	64 9f       	mul	r22, r20
    8bf0:	e0 0d       	add	r30, r0
    8bf2:	f1 1d       	adc	r31, r1
    8bf4:	92 9f       	mul	r25, r18
    8bf6:	f0 0d       	add	r31, r0
    8bf8:	83 9f       	mul	r24, r19
    8bfa:	f0 0d       	add	r31, r0
    8bfc:	74 9f       	mul	r23, r20
    8bfe:	f0 0d       	add	r31, r0
    8c00:	65 9f       	mul	r22, r21
    8c02:	f0 0d       	add	r31, r0
    8c04:	99 27       	eor	r25, r25
    8c06:	72 9f       	mul	r23, r18
    8c08:	b0 0d       	add	r27, r0
    8c0a:	e1 1d       	adc	r30, r1
    8c0c:	f9 1f       	adc	r31, r25
    8c0e:	63 9f       	mul	r22, r19
    8c10:	b0 0d       	add	r27, r0
    8c12:	e1 1d       	adc	r30, r1
    8c14:	f9 1f       	adc	r31, r25
    8c16:	bd 01       	movw	r22, r26
    8c18:	cf 01       	movw	r24, r30
    8c1a:	11 24       	eor	r1, r1
    8c1c:	08 95       	ret

00008c1e <__udivmodsi4>:
    8c1e:	a1 e2       	ldi	r26, 0x21	; 33
    8c20:	1a 2e       	mov	r1, r26
    8c22:	aa 1b       	sub	r26, r26
    8c24:	bb 1b       	sub	r27, r27
    8c26:	fd 01       	movw	r30, r26
    8c28:	0d c0       	rjmp	.+26     	; 0x8c44 <__udivmodsi4_ep>

00008c2a <__udivmodsi4_loop>:
    8c2a:	aa 1f       	adc	r26, r26
    8c2c:	bb 1f       	adc	r27, r27
    8c2e:	ee 1f       	adc	r30, r30
    8c30:	ff 1f       	adc	r31, r31
    8c32:	a2 17       	cp	r26, r18
    8c34:	b3 07       	cpc	r27, r19
    8c36:	e4 07       	cpc	r30, r20
    8c38:	f5 07       	cpc	r31, r21
    8c3a:	20 f0       	brcs	.+8      	; 0x8c44 <__udivmodsi4_ep>
    8c3c:	a2 1b       	sub	r26, r18
    8c3e:	b3 0b       	sbc	r27, r19
    8c40:	e4 0b       	sbc	r30, r20
    8c42:	f5 0b       	sbc	r31, r21

00008c44 <__udivmodsi4_ep>:
    8c44:	66 1f       	adc	r22, r22
    8c46:	77 1f       	adc	r23, r23
    8c48:	88 1f       	adc	r24, r24
    8c4a:	99 1f       	adc	r25, r25
    8c4c:	1a 94       	dec	r1
    8c4e:	69 f7       	brne	.-38     	; 0x8c2a <__udivmodsi4_loop>
    8c50:	60 95       	com	r22
    8c52:	70 95       	com	r23
    8c54:	80 95       	com	r24
    8c56:	90 95       	com	r25
    8c58:	9b 01       	movw	r18, r22
    8c5a:	ac 01       	movw	r20, r24
    8c5c:	bd 01       	movw	r22, r26
    8c5e:	cf 01       	movw	r24, r30
    8c60:	08 95       	ret

00008c62 <__prologue_saves__>:
    8c62:	2f 92       	push	r2
    8c64:	3f 92       	push	r3
    8c66:	4f 92       	push	r4
    8c68:	5f 92       	push	r5
    8c6a:	6f 92       	push	r6
    8c6c:	7f 92       	push	r7
    8c6e:	8f 92       	push	r8
    8c70:	9f 92       	push	r9
    8c72:	af 92       	push	r10
    8c74:	bf 92       	push	r11
    8c76:	cf 92       	push	r12
    8c78:	df 92       	push	r13
    8c7a:	ef 92       	push	r14
    8c7c:	ff 92       	push	r15
    8c7e:	0f 93       	push	r16
    8c80:	1f 93       	push	r17
    8c82:	cf 93       	push	r28
    8c84:	df 93       	push	r29
    8c86:	cd b7       	in	r28, 0x3d	; 61
    8c88:	de b7       	in	r29, 0x3e	; 62
    8c8a:	ca 1b       	sub	r28, r26
    8c8c:	db 0b       	sbc	r29, r27
    8c8e:	0f b6       	in	r0, 0x3f	; 63
    8c90:	f8 94       	cli
    8c92:	de bf       	out	0x3e, r29	; 62
    8c94:	0f be       	out	0x3f, r0	; 63
    8c96:	cd bf       	out	0x3d, r28	; 61
    8c98:	19 94       	eijmp

00008c9a <__epilogue_restores__>:
    8c9a:	2a 88       	ldd	r2, Y+18	; 0x12
    8c9c:	39 88       	ldd	r3, Y+17	; 0x11
    8c9e:	48 88       	ldd	r4, Y+16	; 0x10
    8ca0:	5f 84       	ldd	r5, Y+15	; 0x0f
    8ca2:	6e 84       	ldd	r6, Y+14	; 0x0e
    8ca4:	7d 84       	ldd	r7, Y+13	; 0x0d
    8ca6:	8c 84       	ldd	r8, Y+12	; 0x0c
    8ca8:	9b 84       	ldd	r9, Y+11	; 0x0b
    8caa:	aa 84       	ldd	r10, Y+10	; 0x0a
    8cac:	b9 84       	ldd	r11, Y+9	; 0x09
    8cae:	c8 84       	ldd	r12, Y+8	; 0x08
    8cb0:	df 80       	ldd	r13, Y+7	; 0x07
    8cb2:	ee 80       	ldd	r14, Y+6	; 0x06
    8cb4:	fd 80       	ldd	r15, Y+5	; 0x05
    8cb6:	0c 81       	ldd	r16, Y+4	; 0x04
    8cb8:	1b 81       	ldd	r17, Y+3	; 0x03
    8cba:	aa 81       	ldd	r26, Y+2	; 0x02
    8cbc:	b9 81       	ldd	r27, Y+1	; 0x01
    8cbe:	ce 0f       	add	r28, r30
    8cc0:	d1 1d       	adc	r29, r1
    8cc2:	0f b6       	in	r0, 0x3f	; 63
    8cc4:	f8 94       	cli
    8cc6:	de bf       	out	0x3e, r29	; 62
    8cc8:	0f be       	out	0x3f, r0	; 63
    8cca:	cd bf       	out	0x3d, r28	; 61
    8ccc:	ed 01       	movw	r28, r26
    8cce:	08 95       	ret

00008cd0 <strtod>:
    8cd0:	8f 92       	push	r8
    8cd2:	9f 92       	push	r9
    8cd4:	af 92       	push	r10
    8cd6:	bf 92       	push	r11
    8cd8:	cf 92       	push	r12
    8cda:	df 92       	push	r13
    8cdc:	ef 92       	push	r14
    8cde:	ff 92       	push	r15
    8ce0:	0f 93       	push	r16
    8ce2:	1f 93       	push	r17
    8ce4:	cf 93       	push	r28
    8ce6:	df 93       	push	r29
    8ce8:	ec 01       	movw	r28, r24
    8cea:	5b 01       	movw	r10, r22
    8cec:	61 15       	cp	r22, r1
    8cee:	71 05       	cpc	r23, r1
    8cf0:	19 f0       	breq	.+6      	; 0x8cf8 <strtod+0x28>
    8cf2:	fb 01       	movw	r30, r22
    8cf4:	80 83       	st	Z, r24
    8cf6:	91 83       	std	Z+1, r25	; 0x01
    8cf8:	f9 90       	ld	r15, Y+
    8cfa:	8f 2d       	mov	r24, r15
    8cfc:	90 e0       	ldi	r25, 0x00	; 0
    8cfe:	0e 94 d5 48 	call	0x91aa	; 0x91aa <isspace>
    8d02:	89 2b       	or	r24, r25
    8d04:	c9 f7       	brne	.-14     	; 0x8cf8 <strtod+0x28>
    8d06:	fd e2       	ldi	r31, 0x2D	; 45
    8d08:	ff 16       	cp	r15, r31
    8d0a:	21 f4       	brne	.+8      	; 0x8d14 <strtod+0x44>
    8d0c:	f9 90       	ld	r15, Y+
    8d0e:	ee 24       	eor	r14, r14
    8d10:	e3 94       	inc	r14
    8d12:	05 c0       	rjmp	.+10     	; 0x8d1e <strtod+0x4e>
    8d14:	2b e2       	ldi	r18, 0x2B	; 43
    8d16:	f2 16       	cp	r15, r18
    8d18:	09 f4       	brne	.+2      	; 0x8d1c <strtod+0x4c>
    8d1a:	f9 90       	ld	r15, Y+
    8d1c:	ee 24       	eor	r14, r14
    8d1e:	8e 01       	movw	r16, r28
    8d20:	01 50       	subi	r16, 0x01	; 1
    8d22:	10 40       	sbci	r17, 0x00	; 0
    8d24:	c8 01       	movw	r24, r16
    8d26:	6b ed       	ldi	r22, 0xDB	; 219
    8d28:	7c e1       	ldi	r23, 0x1C	; 28
    8d2a:	43 e0       	ldi	r20, 0x03	; 3
    8d2c:	50 e0       	ldi	r21, 0x00	; 0
    8d2e:	0e 94 e5 48 	call	0x91ca	; 0x91ca <strncasecmp_P>
    8d32:	89 2b       	or	r24, r25
    8d34:	01 f5       	brne	.+64     	; 0x8d76 <strtod+0xa6>
    8d36:	8e 01       	movw	r16, r28
    8d38:	0e 5f       	subi	r16, 0xFE	; 254
    8d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    8d3c:	c8 01       	movw	r24, r16
    8d3e:	6e ed       	ldi	r22, 0xDE	; 222
    8d40:	7c e1       	ldi	r23, 0x1C	; 28
    8d42:	45 e0       	ldi	r20, 0x05	; 5
    8d44:	50 e0       	ldi	r21, 0x00	; 0
    8d46:	0e 94 e5 48 	call	0x91ca	; 0x91ca <strncasecmp_P>
    8d4a:	89 2b       	or	r24, r25
    8d4c:	19 f4       	brne	.+6      	; 0x8d54 <strtod+0x84>
    8d4e:	8e 01       	movw	r16, r28
    8d50:	09 5f       	subi	r16, 0xF9	; 249
    8d52:	1f 4f       	sbci	r17, 0xFF	; 255
    8d54:	a1 14       	cp	r10, r1
    8d56:	b1 04       	cpc	r11, r1
    8d58:	19 f0       	breq	.+6      	; 0x8d60 <strtod+0x90>
    8d5a:	f5 01       	movw	r30, r10
    8d5c:	00 83       	st	Z, r16
    8d5e:	11 83       	std	Z+1, r17	; 0x01
    8d60:	e0 fc       	sbrc	r14, 0
    8d62:	04 c0       	rjmp	.+8      	; 0x8d6c <strtod+0x9c>
    8d64:	70 e0       	ldi	r23, 0x00	; 0
    8d66:	90 e0       	ldi	r25, 0x00	; 0
    8d68:	80 e8       	ldi	r24, 0x80	; 128
    8d6a:	14 c0       	rjmp	.+40     	; 0x8d94 <strtod+0xc4>
    8d6c:	70 e0       	ldi	r23, 0x00	; 0
    8d6e:	90 e0       	ldi	r25, 0x00	; 0
    8d70:	80 e8       	ldi	r24, 0x80	; 128
    8d72:	6f ef       	ldi	r22, 0xFF	; 255
    8d74:	08 c1       	rjmp	.+528    	; 0x8f86 <strtod+0x2b6>
    8d76:	c8 01       	movw	r24, r16
    8d78:	63 ee       	ldi	r22, 0xE3	; 227
    8d7a:	7c e1       	ldi	r23, 0x1C	; 28
    8d7c:	43 e0       	ldi	r20, 0x03	; 3
    8d7e:	50 e0       	ldi	r21, 0x00	; 0
    8d80:	0e 94 e5 48 	call	0x91ca	; 0x91ca <strncasecmp_P>
    8d84:	89 2b       	or	r24, r25
    8d86:	69 f4       	brne	.+26     	; 0x8da2 <strtod+0xd2>
    8d88:	a1 14       	cp	r10, r1
    8d8a:	b1 04       	cpc	r11, r1
    8d8c:	29 f4       	brne	.+10     	; 0x8d98 <strtod+0xc8>
    8d8e:	70 e0       	ldi	r23, 0x00	; 0
    8d90:	90 e0       	ldi	r25, 0x00	; 0
    8d92:	80 ec       	ldi	r24, 0xC0	; 192
    8d94:	6f e7       	ldi	r22, 0x7F	; 127
    8d96:	f7 c0       	rjmp	.+494    	; 0x8f86 <strtod+0x2b6>
    8d98:	22 96       	adiw	r28, 0x02	; 2
    8d9a:	f5 01       	movw	r30, r10
    8d9c:	c0 83       	st	Z, r28
    8d9e:	d1 83       	std	Z+1, r29	; 0x01
    8da0:	f6 cf       	rjmp	.-20     	; 0x8d8e <strtod+0xbe>
    8da2:	88 24       	eor	r8, r8
    8da4:	99 24       	eor	r9, r9
    8da6:	40 e0       	ldi	r20, 0x00	; 0
    8da8:	50 e0       	ldi	r21, 0x00	; 0
    8daa:	60 e0       	ldi	r22, 0x00	; 0
    8dac:	70 e0       	ldi	r23, 0x00	; 0
    8dae:	ef 2d       	mov	r30, r15
    8db0:	e0 53       	subi	r30, 0x30	; 48
    8db2:	ea 30       	cpi	r30, 0x0A	; 10
    8db4:	a0 f5       	brcc	.+104    	; 0x8e1e <strtod+0x14e>
    8db6:	f2 e0       	ldi	r31, 0x02	; 2
    8db8:	ef 2a       	or	r14, r31
    8dba:	8e 2d       	mov	r24, r14
    8dbc:	90 e0       	ldi	r25, 0x00	; 0
    8dbe:	9c 01       	movw	r18, r24
    8dc0:	28 70       	andi	r18, 0x08	; 8
    8dc2:	30 70       	andi	r19, 0x00	; 0
    8dc4:	e2 fe       	sbrs	r14, 2
    8dc6:	06 c0       	rjmp	.+12     	; 0x8dd4 <strtod+0x104>
    8dc8:	23 2b       	or	r18, r19
    8dca:	79 f5       	brne	.+94     	; 0x8e2a <strtod+0x15a>
    8dcc:	08 94       	sec
    8dce:	81 1c       	adc	r8, r1
    8dd0:	91 1c       	adc	r9, r1
    8dd2:	2b c0       	rjmp	.+86     	; 0x8e2a <strtod+0x15a>
    8dd4:	23 2b       	or	r18, r19
    8dd6:	19 f0       	breq	.+6      	; 0x8dde <strtod+0x10e>
    8dd8:	08 94       	sec
    8dda:	81 08       	sbc	r8, r1
    8ddc:	91 08       	sbc	r9, r1
    8dde:	db 01       	movw	r26, r22
    8de0:	ca 01       	movw	r24, r20
    8de2:	12 e0       	ldi	r17, 0x02	; 2
    8de4:	88 0f       	add	r24, r24
    8de6:	99 1f       	adc	r25, r25
    8de8:	aa 1f       	adc	r26, r26
    8dea:	bb 1f       	adc	r27, r27
    8dec:	1a 95       	dec	r17
    8dee:	d1 f7       	brne	.-12     	; 0x8de4 <strtod+0x114>
    8df0:	48 0f       	add	r20, r24
    8df2:	59 1f       	adc	r21, r25
    8df4:	6a 1f       	adc	r22, r26
    8df6:	7b 1f       	adc	r23, r27
    8df8:	44 0f       	add	r20, r20
    8dfa:	55 1f       	adc	r21, r21
    8dfc:	66 1f       	adc	r22, r22
    8dfe:	77 1f       	adc	r23, r23
    8e00:	4e 0f       	add	r20, r30
    8e02:	51 1d       	adc	r21, r1
    8e04:	61 1d       	adc	r22, r1
    8e06:	71 1d       	adc	r23, r1
    8e08:	48 39       	cpi	r20, 0x98	; 152
    8e0a:	29 e9       	ldi	r18, 0x99	; 153
    8e0c:	52 07       	cpc	r21, r18
    8e0e:	29 e9       	ldi	r18, 0x99	; 153
    8e10:	62 07       	cpc	r22, r18
    8e12:	29 e1       	ldi	r18, 0x19	; 25
    8e14:	72 07       	cpc	r23, r18
    8e16:	48 f0       	brcs	.+18     	; 0x8e2a <strtod+0x15a>
    8e18:	84 e0       	ldi	r24, 0x04	; 4
    8e1a:	e8 2a       	or	r14, r24
    8e1c:	06 c0       	rjmp	.+12     	; 0x8e2a <strtod+0x15a>
    8e1e:	ee 3f       	cpi	r30, 0xFE	; 254
    8e20:	31 f4       	brne	.+12     	; 0x8e2e <strtod+0x15e>
    8e22:	e3 fc       	sbrc	r14, 3
    8e24:	39 c0       	rjmp	.+114    	; 0x8e98 <strtod+0x1c8>
    8e26:	98 e0       	ldi	r25, 0x08	; 8
    8e28:	e9 2a       	or	r14, r25
    8e2a:	f9 90       	ld	r15, Y+
    8e2c:	c0 cf       	rjmp	.-128    	; 0x8dae <strtod+0xde>
    8e2e:	e5 33       	cpi	r30, 0x35	; 53
    8e30:	11 f0       	breq	.+4      	; 0x8e36 <strtod+0x166>
    8e32:	e5 31       	cpi	r30, 0x15	; 21
    8e34:	89 f5       	brne	.+98     	; 0x8e98 <strtod+0x1c8>
    8e36:	29 91       	ld	r18, Y+
    8e38:	2d 32       	cpi	r18, 0x2D	; 45
    8e3a:	19 f4       	brne	.+6      	; 0x8e42 <strtod+0x172>
    8e3c:	e0 e1       	ldi	r30, 0x10	; 16
    8e3e:	ee 2a       	or	r14, r30
    8e40:	05 c0       	rjmp	.+10     	; 0x8e4c <strtod+0x17c>
    8e42:	2b 32       	cpi	r18, 0x2B	; 43
    8e44:	19 f0       	breq	.+6      	; 0x8e4c <strtod+0x17c>
    8e46:	81 e0       	ldi	r24, 0x01	; 1
    8e48:	90 e0       	ldi	r25, 0x00	; 0
    8e4a:	03 c0       	rjmp	.+6      	; 0x8e52 <strtod+0x182>
    8e4c:	29 91       	ld	r18, Y+
    8e4e:	82 e0       	ldi	r24, 0x02	; 2
    8e50:	90 e0       	ldi	r25, 0x00	; 0
    8e52:	e2 2f       	mov	r30, r18
    8e54:	e0 53       	subi	r30, 0x30	; 48
    8e56:	ea 30       	cpi	r30, 0x0A	; 10
    8e58:	18 f0       	brcs	.+6      	; 0x8e60 <strtod+0x190>
    8e5a:	c8 1b       	sub	r28, r24
    8e5c:	d9 0b       	sbc	r29, r25
    8e5e:	1c c0       	rjmp	.+56     	; 0x8e98 <strtod+0x1c8>
    8e60:	20 e0       	ldi	r18, 0x00	; 0
    8e62:	30 e0       	ldi	r19, 0x00	; 0
    8e64:	fc e0       	ldi	r31, 0x0C	; 12
    8e66:	20 38       	cpi	r18, 0x80	; 128
    8e68:	3f 07       	cpc	r19, r31
    8e6a:	5c f4       	brge	.+22     	; 0x8e82 <strtod+0x1b2>
    8e6c:	c9 01       	movw	r24, r18
    8e6e:	88 0f       	add	r24, r24
    8e70:	99 1f       	adc	r25, r25
    8e72:	88 0f       	add	r24, r24
    8e74:	99 1f       	adc	r25, r25
    8e76:	28 0f       	add	r18, r24
    8e78:	39 1f       	adc	r19, r25
    8e7a:	22 0f       	add	r18, r18
    8e7c:	33 1f       	adc	r19, r19
    8e7e:	2e 0f       	add	r18, r30
    8e80:	31 1d       	adc	r19, r1
    8e82:	e9 91       	ld	r30, Y+
    8e84:	e0 53       	subi	r30, 0x30	; 48
    8e86:	ea 30       	cpi	r30, 0x0A	; 10
    8e88:	68 f3       	brcs	.-38     	; 0x8e64 <strtod+0x194>
    8e8a:	e4 fe       	sbrs	r14, 4
    8e8c:	03 c0       	rjmp	.+6      	; 0x8e94 <strtod+0x1c4>
    8e8e:	30 95       	com	r19
    8e90:	21 95       	neg	r18
    8e92:	3f 4f       	sbci	r19, 0xFF	; 255
    8e94:	82 0e       	add	r8, r18
    8e96:	93 1e       	adc	r9, r19
    8e98:	ce 2c       	mov	r12, r14
    8e9a:	dd 24       	eor	r13, r13
    8e9c:	e1 fe       	sbrs	r14, 1
    8e9e:	07 c0       	rjmp	.+14     	; 0x8eae <strtod+0x1de>
    8ea0:	a1 14       	cp	r10, r1
    8ea2:	b1 04       	cpc	r11, r1
    8ea4:	21 f0       	breq	.+8      	; 0x8eae <strtod+0x1de>
    8ea6:	21 97       	sbiw	r28, 0x01	; 1
    8ea8:	f5 01       	movw	r30, r10
    8eaa:	c0 83       	st	Z, r28
    8eac:	d1 83       	std	Z+1, r29	; 0x01
    8eae:	cb 01       	movw	r24, r22
    8eb0:	ba 01       	movw	r22, r20
    8eb2:	0e 94 fd 42 	call	0x85fa	; 0x85fa <__floatunsisf>
    8eb6:	7b 01       	movw	r14, r22
    8eb8:	8c 01       	movw	r16, r24
    8eba:	f3 e0       	ldi	r31, 0x03	; 3
    8ebc:	cf 22       	and	r12, r31
    8ebe:	dd 24       	eor	r13, r13
    8ec0:	23 e0       	ldi	r18, 0x03	; 3
    8ec2:	c2 16       	cp	r12, r18
    8ec4:	d1 04       	cpc	r13, r1
    8ec6:	21 f4       	brne	.+8      	; 0x8ed0 <strtod+0x200>
    8ec8:	17 fb       	bst	r17, 7
    8eca:	10 95       	com	r17
    8ecc:	17 f9       	bld	r17, 7
    8ece:	10 95       	com	r17
    8ed0:	57 01       	movw	r10, r14
    8ed2:	68 01       	movw	r12, r16
    8ed4:	c8 01       	movw	r24, r16
    8ed6:	b7 01       	movw	r22, r14
    8ed8:	20 e0       	ldi	r18, 0x00	; 0
    8eda:	30 e0       	ldi	r19, 0x00	; 0
    8edc:	40 e0       	ldi	r20, 0x00	; 0
    8ede:	50 e0       	ldi	r21, 0x00	; 0
    8ee0:	0e 94 5d 42 	call	0x84ba	; 0x84ba <__cmpsf2>
    8ee4:	88 23       	and	r24, r24
    8ee6:	09 f4       	brne	.+2      	; 0x8eea <strtod+0x21a>
    8ee8:	4a c0       	rjmp	.+148    	; 0x8f7e <strtod+0x2ae>
    8eea:	97 fe       	sbrs	r9, 7
    8eec:	0d c0       	rjmp	.+26     	; 0x8f08 <strtod+0x238>
    8eee:	2a ef       	ldi	r18, 0xFA	; 250
    8ef0:	e2 2e       	mov	r14, r18
    8ef2:	2c e1       	ldi	r18, 0x1C	; 28
    8ef4:	f2 2e       	mov	r15, r18
    8ef6:	90 94       	com	r9
    8ef8:	81 94       	neg	r8
    8efa:	91 08       	sbc	r9, r1
    8efc:	93 94       	inc	r9
    8efe:	c0 e2       	ldi	r28, 0x20	; 32
    8f00:	d0 e0       	ldi	r29, 0x00	; 0
    8f02:	00 e0       	ldi	r16, 0x00	; 0
    8f04:	10 e0       	ldi	r17, 0x00	; 0
    8f06:	12 c0       	rjmp	.+36     	; 0x8f2c <strtod+0x25c>
    8f08:	92 e1       	ldi	r25, 0x12	; 18
    8f0a:	e9 2e       	mov	r14, r25
    8f0c:	9d e1       	ldi	r25, 0x1D	; 29
    8f0e:	f9 2e       	mov	r15, r25
    8f10:	f6 cf       	rjmp	.-20     	; 0x8efe <strtod+0x22e>
    8f12:	f7 01       	movw	r30, r14
    8f14:	25 91       	lpm	r18, Z+
    8f16:	35 91       	lpm	r19, Z+
    8f18:	45 91       	lpm	r20, Z+
    8f1a:	54 91       	lpm	r21, Z+
    8f1c:	c6 01       	movw	r24, r12
    8f1e:	b5 01       	movw	r22, r10
    8f20:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <__mulsf3>
    8f24:	5b 01       	movw	r10, r22
    8f26:	6c 01       	movw	r12, r24
    8f28:	8c 1a       	sub	r8, r28
    8f2a:	9d 0a       	sbc	r9, r29
    8f2c:	8c 16       	cp	r8, r28
    8f2e:	9d 06       	cpc	r9, r29
    8f30:	84 f7       	brge	.-32     	; 0x8f12 <strtod+0x242>
    8f32:	d5 95       	asr	r29
    8f34:	c7 95       	ror	r28
    8f36:	0f 5f       	subi	r16, 0xFF	; 255
    8f38:	1f 4f       	sbci	r17, 0xFF	; 255
    8f3a:	06 30       	cpi	r16, 0x06	; 6
    8f3c:	11 05       	cpc	r17, r1
    8f3e:	29 f0       	breq	.+10     	; 0x8f4a <strtod+0x27a>
    8f40:	8c ef       	ldi	r24, 0xFC	; 252
    8f42:	9f ef       	ldi	r25, 0xFF	; 255
    8f44:	e8 0e       	add	r14, r24
    8f46:	f9 1e       	adc	r15, r25
    8f48:	f1 cf       	rjmp	.-30     	; 0x8f2c <strtod+0x25c>
    8f4a:	c5 01       	movw	r24, r10
    8f4c:	d6 01       	movw	r26, r12
    8f4e:	7c 01       	movw	r14, r24
    8f50:	8d 01       	movw	r16, r26
    8f52:	8c 2d       	mov	r24, r12
    8f54:	88 0f       	add	r24, r24
    8f56:	8d 2d       	mov	r24, r13
    8f58:	88 1f       	adc	r24, r24
    8f5a:	8f 3f       	cpi	r24, 0xFF	; 255
    8f5c:	51 f0       	breq	.+20     	; 0x8f72 <strtod+0x2a2>
    8f5e:	c6 01       	movw	r24, r12
    8f60:	b5 01       	movw	r22, r10
    8f62:	20 e0       	ldi	r18, 0x00	; 0
    8f64:	30 e0       	ldi	r19, 0x00	; 0
    8f66:	40 e0       	ldi	r20, 0x00	; 0
    8f68:	50 e0       	ldi	r21, 0x00	; 0
    8f6a:	0e 94 5d 42 	call	0x84ba	; 0x84ba <__cmpsf2>
    8f6e:	88 23       	and	r24, r24
    8f70:	31 f4       	brne	.+12     	; 0x8f7e <strtod+0x2ae>
    8f72:	82 e2       	ldi	r24, 0x22	; 34
    8f74:	90 e0       	ldi	r25, 0x00	; 0
    8f76:	80 93 c7 2a 	sts	0x2AC7, r24
    8f7a:	90 93 c8 2a 	sts	0x2AC8, r25
    8f7e:	7e 2d       	mov	r23, r14
    8f80:	9f 2d       	mov	r25, r15
    8f82:	80 2f       	mov	r24, r16
    8f84:	61 2f       	mov	r22, r17
    8f86:	27 2f       	mov	r18, r23
    8f88:	39 2f       	mov	r19, r25
    8f8a:	48 2f       	mov	r20, r24
    8f8c:	56 2f       	mov	r21, r22
    8f8e:	b9 01       	movw	r22, r18
    8f90:	ca 01       	movw	r24, r20
    8f92:	df 91       	pop	r29
    8f94:	cf 91       	pop	r28
    8f96:	1f 91       	pop	r17
    8f98:	0f 91       	pop	r16
    8f9a:	ff 90       	pop	r15
    8f9c:	ef 90       	pop	r14
    8f9e:	df 90       	pop	r13
    8fa0:	cf 90       	pop	r12
    8fa2:	bf 90       	pop	r11
    8fa4:	af 90       	pop	r10
    8fa6:	9f 90       	pop	r9
    8fa8:	8f 90       	pop	r8
    8faa:	08 95       	ret

00008fac <atoi>:
    8fac:	fc 01       	movw	r30, r24
    8fae:	88 27       	eor	r24, r24
    8fb0:	99 27       	eor	r25, r25
    8fb2:	e8 94       	clt
    8fb4:	21 91       	ld	r18, Z+
    8fb6:	20 32       	cpi	r18, 0x20	; 32
    8fb8:	e9 f3       	breq	.-6      	; 0x8fb4 <atoi+0x8>
    8fba:	29 30       	cpi	r18, 0x09	; 9
    8fbc:	10 f0       	brcs	.+4      	; 0x8fc2 <atoi+0x16>
    8fbe:	2e 30       	cpi	r18, 0x0E	; 14
    8fc0:	c8 f3       	brcs	.-14     	; 0x8fb4 <atoi+0x8>
    8fc2:	2b 32       	cpi	r18, 0x2B	; 43
    8fc4:	41 f0       	breq	.+16     	; 0x8fd6 <atoi+0x2a>
    8fc6:	2d 32       	cpi	r18, 0x2D	; 45
    8fc8:	39 f4       	brne	.+14     	; 0x8fd8 <atoi+0x2c>
    8fca:	68 94       	set
    8fcc:	04 c0       	rjmp	.+8      	; 0x8fd6 <atoi+0x2a>
    8fce:	0e 94 1e 49 	call	0x923c	; 0x923c <__mulhi_const_10>
    8fd2:	82 0f       	add	r24, r18
    8fd4:	91 1d       	adc	r25, r1
    8fd6:	21 91       	ld	r18, Z+
    8fd8:	20 53       	subi	r18, 0x30	; 48
    8fda:	2a 30       	cpi	r18, 0x0A	; 10
    8fdc:	c0 f3       	brcs	.-16     	; 0x8fce <atoi+0x22>
    8fde:	1e f4       	brtc	.+6      	; 0x8fe6 <atoi+0x3a>
    8fe0:	90 95       	com	r25
    8fe2:	81 95       	neg	r24
    8fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    8fe6:	08 95       	ret

00008fe8 <__ftoa_engine>:
    8fe8:	28 30       	cpi	r18, 0x08	; 8
    8fea:	08 f0       	brcs	.+2      	; 0x8fee <__ftoa_engine+0x6>
    8fec:	27 e0       	ldi	r18, 0x07	; 7
    8fee:	33 27       	eor	r19, r19
    8ff0:	da 01       	movw	r26, r20
    8ff2:	99 0f       	add	r25, r25
    8ff4:	31 1d       	adc	r19, r1
    8ff6:	87 fd       	sbrc	r24, 7
    8ff8:	91 60       	ori	r25, 0x01	; 1
    8ffa:	00 96       	adiw	r24, 0x00	; 0
    8ffc:	61 05       	cpc	r22, r1
    8ffe:	71 05       	cpc	r23, r1
    9000:	39 f4       	brne	.+14     	; 0x9010 <__ftoa_engine+0x28>
    9002:	32 60       	ori	r19, 0x02	; 2
    9004:	2e 5f       	subi	r18, 0xFE	; 254
    9006:	3d 93       	st	X+, r19
    9008:	30 e3       	ldi	r19, 0x30	; 48
    900a:	2a 95       	dec	r18
    900c:	e1 f7       	brne	.-8      	; 0x9006 <__ftoa_engine+0x1e>
    900e:	08 95       	ret
    9010:	9f 3f       	cpi	r25, 0xFF	; 255
    9012:	30 f0       	brcs	.+12     	; 0x9020 <__ftoa_engine+0x38>
    9014:	80 38       	cpi	r24, 0x80	; 128
    9016:	71 05       	cpc	r23, r1
    9018:	61 05       	cpc	r22, r1
    901a:	09 f0       	breq	.+2      	; 0x901e <__ftoa_engine+0x36>
    901c:	3c 5f       	subi	r19, 0xFC	; 252
    901e:	3c 5f       	subi	r19, 0xFC	; 252
    9020:	3d 93       	st	X+, r19
    9022:	91 30       	cpi	r25, 0x01	; 1
    9024:	08 f0       	brcs	.+2      	; 0x9028 <__ftoa_engine+0x40>
    9026:	80 68       	ori	r24, 0x80	; 128
    9028:	91 1d       	adc	r25, r1
    902a:	df 93       	push	r29
    902c:	cf 93       	push	r28
    902e:	1f 93       	push	r17
    9030:	0f 93       	push	r16
    9032:	ff 92       	push	r15
    9034:	ef 92       	push	r14
    9036:	19 2f       	mov	r17, r25
    9038:	98 7f       	andi	r25, 0xF8	; 248
    903a:	96 95       	lsr	r25
    903c:	e9 2f       	mov	r30, r25
    903e:	96 95       	lsr	r25
    9040:	96 95       	lsr	r25
    9042:	e9 0f       	add	r30, r25
    9044:	ff 27       	eor	r31, r31
    9046:	e0 59       	subi	r30, 0x90	; 144
    9048:	f2 4e       	sbci	r31, 0xE2	; 226
    904a:	99 27       	eor	r25, r25
    904c:	33 27       	eor	r19, r19
    904e:	ee 24       	eor	r14, r14
    9050:	ff 24       	eor	r15, r15
    9052:	a7 01       	movw	r20, r14
    9054:	e7 01       	movw	r28, r14
    9056:	05 90       	lpm	r0, Z+
    9058:	08 94       	sec
    905a:	07 94       	ror	r0
    905c:	28 f4       	brcc	.+10     	; 0x9068 <__ftoa_engine+0x80>
    905e:	36 0f       	add	r19, r22
    9060:	e7 1e       	adc	r14, r23
    9062:	f8 1e       	adc	r15, r24
    9064:	49 1f       	adc	r20, r25
    9066:	51 1d       	adc	r21, r1
    9068:	66 0f       	add	r22, r22
    906a:	77 1f       	adc	r23, r23
    906c:	88 1f       	adc	r24, r24
    906e:	99 1f       	adc	r25, r25
    9070:	06 94       	lsr	r0
    9072:	a1 f7       	brne	.-24     	; 0x905c <__ftoa_engine+0x74>
    9074:	05 90       	lpm	r0, Z+
    9076:	07 94       	ror	r0
    9078:	28 f4       	brcc	.+10     	; 0x9084 <__ftoa_engine+0x9c>
    907a:	e7 0e       	add	r14, r23
    907c:	f8 1e       	adc	r15, r24
    907e:	49 1f       	adc	r20, r25
    9080:	56 1f       	adc	r21, r22
    9082:	c1 1d       	adc	r28, r1
    9084:	77 0f       	add	r23, r23
    9086:	88 1f       	adc	r24, r24
    9088:	99 1f       	adc	r25, r25
    908a:	66 1f       	adc	r22, r22
    908c:	06 94       	lsr	r0
    908e:	a1 f7       	brne	.-24     	; 0x9078 <__ftoa_engine+0x90>
    9090:	05 90       	lpm	r0, Z+
    9092:	07 94       	ror	r0
    9094:	28 f4       	brcc	.+10     	; 0x90a0 <__ftoa_engine+0xb8>
    9096:	f8 0e       	add	r15, r24
    9098:	49 1f       	adc	r20, r25
    909a:	56 1f       	adc	r21, r22
    909c:	c7 1f       	adc	r28, r23
    909e:	d1 1d       	adc	r29, r1
    90a0:	88 0f       	add	r24, r24
    90a2:	99 1f       	adc	r25, r25
    90a4:	66 1f       	adc	r22, r22
    90a6:	77 1f       	adc	r23, r23
    90a8:	06 94       	lsr	r0
    90aa:	a1 f7       	brne	.-24     	; 0x9094 <__ftoa_engine+0xac>
    90ac:	05 90       	lpm	r0, Z+
    90ae:	07 94       	ror	r0
    90b0:	20 f4       	brcc	.+8      	; 0x90ba <__ftoa_engine+0xd2>
    90b2:	49 0f       	add	r20, r25
    90b4:	56 1f       	adc	r21, r22
    90b6:	c7 1f       	adc	r28, r23
    90b8:	d8 1f       	adc	r29, r24
    90ba:	99 0f       	add	r25, r25
    90bc:	66 1f       	adc	r22, r22
    90be:	77 1f       	adc	r23, r23
    90c0:	88 1f       	adc	r24, r24
    90c2:	06 94       	lsr	r0
    90c4:	a9 f7       	brne	.-22     	; 0x90b0 <__ftoa_engine+0xc8>
    90c6:	84 91       	lpm	r24, Z+
    90c8:	10 95       	com	r17
    90ca:	17 70       	andi	r17, 0x07	; 7
    90cc:	41 f0       	breq	.+16     	; 0x90de <__ftoa_engine+0xf6>
    90ce:	d6 95       	lsr	r29
    90d0:	c7 95       	ror	r28
    90d2:	57 95       	ror	r21
    90d4:	47 95       	ror	r20
    90d6:	f7 94       	ror	r15
    90d8:	e7 94       	ror	r14
    90da:	1a 95       	dec	r17
    90dc:	c1 f7       	brne	.-16     	; 0x90ce <__ftoa_engine+0xe6>
    90de:	e6 e1       	ldi	r30, 0x16	; 22
    90e0:	fd e1       	ldi	r31, 0x1D	; 29
    90e2:	68 94       	set
    90e4:	15 90       	lpm	r1, Z+
    90e6:	15 91       	lpm	r17, Z+
    90e8:	35 91       	lpm	r19, Z+
    90ea:	65 91       	lpm	r22, Z+
    90ec:	95 91       	lpm	r25, Z+
    90ee:	05 90       	lpm	r0, Z+
    90f0:	7f e2       	ldi	r23, 0x2F	; 47
    90f2:	73 95       	inc	r23
    90f4:	e1 18       	sub	r14, r1
    90f6:	f1 0a       	sbc	r15, r17
    90f8:	43 0b       	sbc	r20, r19
    90fa:	56 0b       	sbc	r21, r22
    90fc:	c9 0b       	sbc	r28, r25
    90fe:	d0 09       	sbc	r29, r0
    9100:	c0 f7       	brcc	.-16     	; 0x90f2 <__ftoa_engine+0x10a>
    9102:	e1 0c       	add	r14, r1
    9104:	f1 1e       	adc	r15, r17
    9106:	43 1f       	adc	r20, r19
    9108:	56 1f       	adc	r21, r22
    910a:	c9 1f       	adc	r28, r25
    910c:	d0 1d       	adc	r29, r0
    910e:	7e f4       	brtc	.+30     	; 0x912e <__ftoa_engine+0x146>
    9110:	70 33       	cpi	r23, 0x30	; 48
    9112:	11 f4       	brne	.+4      	; 0x9118 <__ftoa_engine+0x130>
    9114:	8a 95       	dec	r24
    9116:	e6 cf       	rjmp	.-52     	; 0x90e4 <__ftoa_engine+0xfc>
    9118:	e8 94       	clt
    911a:	01 50       	subi	r16, 0x01	; 1
    911c:	30 f0       	brcs	.+12     	; 0x912a <__ftoa_engine+0x142>
    911e:	08 0f       	add	r16, r24
    9120:	0a f4       	brpl	.+2      	; 0x9124 <__ftoa_engine+0x13c>
    9122:	00 27       	eor	r16, r16
    9124:	02 17       	cp	r16, r18
    9126:	08 f4       	brcc	.+2      	; 0x912a <__ftoa_engine+0x142>
    9128:	20 2f       	mov	r18, r16
    912a:	23 95       	inc	r18
    912c:	02 2f       	mov	r16, r18
    912e:	7a 33       	cpi	r23, 0x3A	; 58
    9130:	28 f0       	brcs	.+10     	; 0x913c <__ftoa_engine+0x154>
    9132:	79 e3       	ldi	r23, 0x39	; 57
    9134:	7d 93       	st	X+, r23
    9136:	2a 95       	dec	r18
    9138:	e9 f7       	brne	.-6      	; 0x9134 <__ftoa_engine+0x14c>
    913a:	10 c0       	rjmp	.+32     	; 0x915c <__ftoa_engine+0x174>
    913c:	7d 93       	st	X+, r23
    913e:	2a 95       	dec	r18
    9140:	89 f6       	brne	.-94     	; 0x90e4 <__ftoa_engine+0xfc>
    9142:	06 94       	lsr	r0
    9144:	97 95       	ror	r25
    9146:	67 95       	ror	r22
    9148:	37 95       	ror	r19
    914a:	17 95       	ror	r17
    914c:	17 94       	ror	r1
    914e:	e1 18       	sub	r14, r1
    9150:	f1 0a       	sbc	r15, r17
    9152:	43 0b       	sbc	r20, r19
    9154:	56 0b       	sbc	r21, r22
    9156:	c9 0b       	sbc	r28, r25
    9158:	d0 09       	sbc	r29, r0
    915a:	98 f0       	brcs	.+38     	; 0x9182 <__ftoa_engine+0x19a>
    915c:	23 95       	inc	r18
    915e:	7e 91       	ld	r23, -X
    9160:	73 95       	inc	r23
    9162:	7a 33       	cpi	r23, 0x3A	; 58
    9164:	08 f0       	brcs	.+2      	; 0x9168 <__ftoa_engine+0x180>
    9166:	70 e3       	ldi	r23, 0x30	; 48
    9168:	7c 93       	st	X, r23
    916a:	20 13       	cpse	r18, r16
    916c:	b8 f7       	brcc	.-18     	; 0x915c <__ftoa_engine+0x174>
    916e:	7e 91       	ld	r23, -X
    9170:	70 61       	ori	r23, 0x10	; 16
    9172:	7d 93       	st	X+, r23
    9174:	30 f0       	brcs	.+12     	; 0x9182 <__ftoa_engine+0x19a>
    9176:	83 95       	inc	r24
    9178:	71 e3       	ldi	r23, 0x31	; 49
    917a:	7d 93       	st	X+, r23
    917c:	70 e3       	ldi	r23, 0x30	; 48
    917e:	2a 95       	dec	r18
    9180:	e1 f7       	brne	.-8      	; 0x917a <__ftoa_engine+0x192>
    9182:	11 24       	eor	r1, r1
    9184:	ef 90       	pop	r14
    9186:	ff 90       	pop	r15
    9188:	0f 91       	pop	r16
    918a:	1f 91       	pop	r17
    918c:	cf 91       	pop	r28
    918e:	df 91       	pop	r29
    9190:	99 27       	eor	r25, r25
    9192:	87 fd       	sbrc	r24, 7
    9194:	90 95       	com	r25
    9196:	08 95       	ret

00009198 <isupper>:
    9198:	85 fd       	sbrc	r24, 5
    919a:	3d c1       	rjmp	.+634    	; 0x9416 <__ctype_isfalse>

0000919c <isalpha>:
    919c:	80 62       	ori	r24, 0x20	; 32

0000919e <islower>:
    919e:	91 11       	cpse	r25, r1
    91a0:	3a c1       	rjmp	.+628    	; 0x9416 <__ctype_isfalse>
    91a2:	81 56       	subi	r24, 0x61	; 97
    91a4:	8a 51       	subi	r24, 0x1A	; 26
    91a6:	e0 f7       	brcc	.-8      	; 0x91a0 <islower+0x2>
    91a8:	08 95       	ret

000091aa <isspace>:
    91aa:	91 11       	cpse	r25, r1
    91ac:	34 c1       	rjmp	.+616    	; 0x9416 <__ctype_isfalse>
    91ae:	80 32       	cpi	r24, 0x20	; 32
    91b0:	19 f0       	breq	.+6      	; 0x91b8 <isspace+0xe>
    91b2:	89 50       	subi	r24, 0x09	; 9
    91b4:	85 50       	subi	r24, 0x05	; 5
    91b6:	d0 f7       	brcc	.-12     	; 0x91ac <isspace+0x2>
    91b8:	08 95       	ret

000091ba <toupper>:
    91ba:	91 11       	cpse	r25, r1
    91bc:	08 95       	ret
    91be:	81 56       	subi	r24, 0x61	; 97
    91c0:	8a 51       	subi	r24, 0x1A	; 26
    91c2:	08 f4       	brcc	.+2      	; 0x91c6 <toupper+0xc>
    91c4:	80 52       	subi	r24, 0x20	; 32
    91c6:	85 58       	subi	r24, 0x85	; 133
    91c8:	08 95       	ret

000091ca <strncasecmp_P>:
    91ca:	fb 01       	movw	r30, r22
    91cc:	dc 01       	movw	r26, r24
    91ce:	41 50       	subi	r20, 0x01	; 1
    91d0:	50 40       	sbci	r21, 0x00	; 0
    91d2:	88 f0       	brcs	.+34     	; 0x91f6 <strncasecmp_P+0x2c>
    91d4:	8d 91       	ld	r24, X+
    91d6:	81 34       	cpi	r24, 0x41	; 65
    91d8:	1c f0       	brlt	.+6      	; 0x91e0 <strncasecmp_P+0x16>
    91da:	8b 35       	cpi	r24, 0x5B	; 91
    91dc:	0c f4       	brge	.+2      	; 0x91e0 <strncasecmp_P+0x16>
    91de:	80 5e       	subi	r24, 0xE0	; 224
    91e0:	65 91       	lpm	r22, Z+
    91e2:	61 34       	cpi	r22, 0x41	; 65
    91e4:	1c f0       	brlt	.+6      	; 0x91ec <strncasecmp_P+0x22>
    91e6:	6b 35       	cpi	r22, 0x5B	; 91
    91e8:	0c f4       	brge	.+2      	; 0x91ec <strncasecmp_P+0x22>
    91ea:	60 5e       	subi	r22, 0xE0	; 224
    91ec:	86 1b       	sub	r24, r22
    91ee:	61 11       	cpse	r22, r1
    91f0:	71 f3       	breq	.-36     	; 0x91ce <strncasecmp_P+0x4>
    91f2:	99 0b       	sbc	r25, r25
    91f4:	08 95       	ret
    91f6:	88 1b       	sub	r24, r24
    91f8:	fc cf       	rjmp	.-8      	; 0x91f2 <strncasecmp_P+0x28>

000091fa <strnlen_P>:
    91fa:	fc 01       	movw	r30, r24
    91fc:	05 90       	lpm	r0, Z+
    91fe:	61 50       	subi	r22, 0x01	; 1
    9200:	70 40       	sbci	r23, 0x00	; 0
    9202:	01 10       	cpse	r0, r1
    9204:	d8 f7       	brcc	.-10     	; 0x91fc <strnlen_P+0x2>
    9206:	80 95       	com	r24
    9208:	90 95       	com	r25
    920a:	8e 0f       	add	r24, r30
    920c:	9f 1f       	adc	r25, r31
    920e:	08 95       	ret

00009210 <strchr>:
    9210:	fc 01       	movw	r30, r24
    9212:	81 91       	ld	r24, Z+
    9214:	86 17       	cp	r24, r22
    9216:	21 f0       	breq	.+8      	; 0x9220 <strchr+0x10>
    9218:	88 23       	and	r24, r24
    921a:	d9 f7       	brne	.-10     	; 0x9212 <strchr+0x2>
    921c:	99 27       	eor	r25, r25
    921e:	08 95       	ret
    9220:	31 97       	sbiw	r30, 0x01	; 1
    9222:	cf 01       	movw	r24, r30
    9224:	08 95       	ret

00009226 <strnlen>:
    9226:	fc 01       	movw	r30, r24
    9228:	61 50       	subi	r22, 0x01	; 1
    922a:	70 40       	sbci	r23, 0x00	; 0
    922c:	01 90       	ld	r0, Z+
    922e:	01 10       	cpse	r0, r1
    9230:	d8 f7       	brcc	.-10     	; 0x9228 <strnlen+0x2>
    9232:	80 95       	com	r24
    9234:	90 95       	com	r25
    9236:	8e 0f       	add	r24, r30
    9238:	9f 1f       	adc	r25, r31
    923a:	08 95       	ret

0000923c <__mulhi_const_10>:
    923c:	7a e0       	ldi	r23, 0x0A	; 10
    923e:	97 9f       	mul	r25, r23
    9240:	90 2d       	mov	r25, r0
    9242:	87 9f       	mul	r24, r23
    9244:	80 2d       	mov	r24, r0
    9246:	91 0d       	add	r25, r1
    9248:	11 24       	eor	r1, r1
    924a:	08 95       	ret

0000924c <clearerr>:
    924c:	fc 01       	movw	r30, r24
    924e:	83 81       	ldd	r24, Z+3	; 0x03
    9250:	8f 7c       	andi	r24, 0xCF	; 207
    9252:	83 83       	std	Z+3, r24	; 0x03
    9254:	08 95       	ret

00009256 <fgets>:
    9256:	cf 92       	push	r12
    9258:	df 92       	push	r13
    925a:	ef 92       	push	r14
    925c:	ff 92       	push	r15
    925e:	0f 93       	push	r16
    9260:	1f 93       	push	r17
    9262:	cf 93       	push	r28
    9264:	df 93       	push	r29
    9266:	7c 01       	movw	r14, r24
    9268:	6a 01       	movw	r12, r20
    926a:	fa 01       	movw	r30, r20
    926c:	83 81       	ldd	r24, Z+3	; 0x03
    926e:	80 ff       	sbrs	r24, 0
    9270:	19 c0       	rjmp	.+50     	; 0x92a4 <fgets+0x4e>
    9272:	16 16       	cp	r1, r22
    9274:	17 06       	cpc	r1, r23
    9276:	b4 f4       	brge	.+44     	; 0x92a4 <fgets+0x4e>
    9278:	eb 01       	movw	r28, r22
    927a:	21 97       	sbiw	r28, 0x01	; 1
    927c:	87 01       	movw	r16, r14
    927e:	0d c0       	rjmp	.+26     	; 0x929a <fgets+0x44>
    9280:	c6 01       	movw	r24, r12
    9282:	0e 94 0e 4a 	call	0x941c	; 0x941c <fgetc>
    9286:	ff ef       	ldi	r31, 0xFF	; 255
    9288:	8f 3f       	cpi	r24, 0xFF	; 255
    928a:	9f 07       	cpc	r25, r31
    928c:	59 f0       	breq	.+22     	; 0x92a4 <fgets+0x4e>
    928e:	f8 01       	movw	r30, r16
    9290:	81 93       	st	Z+, r24
    9292:	8f 01       	movw	r16, r30
    9294:	0a 97       	sbiw	r24, 0x0a	; 10
    9296:	19 f0       	breq	.+6      	; 0x929e <fgets+0x48>
    9298:	21 97       	sbiw	r28, 0x01	; 1
    929a:	20 97       	sbiw	r28, 0x00	; 0
    929c:	89 f7       	brne	.-30     	; 0x9280 <fgets+0x2a>
    929e:	f8 01       	movw	r30, r16
    92a0:	10 82       	st	Z, r1
    92a2:	02 c0       	rjmp	.+4      	; 0x92a8 <fgets+0x52>
    92a4:	ee 24       	eor	r14, r14
    92a6:	ff 24       	eor	r15, r15
    92a8:	c7 01       	movw	r24, r14
    92aa:	df 91       	pop	r29
    92ac:	cf 91       	pop	r28
    92ae:	1f 91       	pop	r17
    92b0:	0f 91       	pop	r16
    92b2:	ff 90       	pop	r15
    92b4:	ef 90       	pop	r14
    92b6:	df 90       	pop	r13
    92b8:	cf 90       	pop	r12
    92ba:	08 95       	ret

000092bc <fputc>:
    92bc:	0f 93       	push	r16
    92be:	1f 93       	push	r17
    92c0:	cf 93       	push	r28
    92c2:	df 93       	push	r29
    92c4:	8c 01       	movw	r16, r24
    92c6:	eb 01       	movw	r28, r22
    92c8:	8b 81       	ldd	r24, Y+3	; 0x03
    92ca:	81 ff       	sbrs	r24, 1
    92cc:	1b c0       	rjmp	.+54     	; 0x9304 <fputc+0x48>
    92ce:	82 ff       	sbrs	r24, 2
    92d0:	0d c0       	rjmp	.+26     	; 0x92ec <fputc+0x30>
    92d2:	2e 81       	ldd	r18, Y+6	; 0x06
    92d4:	3f 81       	ldd	r19, Y+7	; 0x07
    92d6:	8c 81       	ldd	r24, Y+4	; 0x04
    92d8:	9d 81       	ldd	r25, Y+5	; 0x05
    92da:	28 17       	cp	r18, r24
    92dc:	39 07       	cpc	r19, r25
    92de:	64 f4       	brge	.+24     	; 0x92f8 <fputc+0x3c>
    92e0:	e8 81       	ld	r30, Y
    92e2:	f9 81       	ldd	r31, Y+1	; 0x01
    92e4:	01 93       	st	Z+, r16
    92e6:	e8 83       	st	Y, r30
    92e8:	f9 83       	std	Y+1, r31	; 0x01
    92ea:	06 c0       	rjmp	.+12     	; 0x92f8 <fputc+0x3c>
    92ec:	e8 85       	ldd	r30, Y+8	; 0x08
    92ee:	f9 85       	ldd	r31, Y+9	; 0x09
    92f0:	80 2f       	mov	r24, r16
    92f2:	19 95       	eicall
    92f4:	89 2b       	or	r24, r25
    92f6:	31 f4       	brne	.+12     	; 0x9304 <fputc+0x48>
    92f8:	8e 81       	ldd	r24, Y+6	; 0x06
    92fa:	9f 81       	ldd	r25, Y+7	; 0x07
    92fc:	01 96       	adiw	r24, 0x01	; 1
    92fe:	8e 83       	std	Y+6, r24	; 0x06
    9300:	9f 83       	std	Y+7, r25	; 0x07
    9302:	02 c0       	rjmp	.+4      	; 0x9308 <fputc+0x4c>
    9304:	0f ef       	ldi	r16, 0xFF	; 255
    9306:	1f ef       	ldi	r17, 0xFF	; 255
    9308:	c8 01       	movw	r24, r16
    930a:	df 91       	pop	r29
    930c:	cf 91       	pop	r28
    930e:	1f 91       	pop	r17
    9310:	0f 91       	pop	r16
    9312:	08 95       	ret

00009314 <printf_P>:
    9314:	df 93       	push	r29
    9316:	cf 93       	push	r28
    9318:	cd b7       	in	r28, 0x3d	; 61
    931a:	de b7       	in	r29, 0x3e	; 62
    931c:	fe 01       	movw	r30, r28
    931e:	36 96       	adiw	r30, 0x06	; 6
    9320:	61 91       	ld	r22, Z+
    9322:	71 91       	ld	r23, Z+
    9324:	a0 91 c3 2a 	lds	r26, 0x2AC3
    9328:	b0 91 c4 2a 	lds	r27, 0x2AC4
    932c:	13 96       	adiw	r26, 0x03	; 3
    932e:	8c 91       	ld	r24, X
    9330:	13 97       	sbiw	r26, 0x03	; 3
    9332:	88 60       	ori	r24, 0x08	; 8
    9334:	13 96       	adiw	r26, 0x03	; 3
    9336:	8c 93       	st	X, r24
    9338:	80 91 c3 2a 	lds	r24, 0x2AC3
    933c:	90 91 c4 2a 	lds	r25, 0x2AC4
    9340:	af 01       	movw	r20, r30
    9342:	0e 94 13 3e 	call	0x7c26	; 0x7c26 <vfprintf>
    9346:	e0 91 c3 2a 	lds	r30, 0x2AC3
    934a:	f0 91 c4 2a 	lds	r31, 0x2AC4
    934e:	23 81       	ldd	r18, Z+3	; 0x03
    9350:	27 7f       	andi	r18, 0xF7	; 247
    9352:	23 83       	std	Z+3, r18	; 0x03
    9354:	cf 91       	pop	r28
    9356:	df 91       	pop	r29
    9358:	08 95       	ret

0000935a <__ultoa_invert>:
    935a:	fa 01       	movw	r30, r20
    935c:	aa 27       	eor	r26, r26
    935e:	28 30       	cpi	r18, 0x08	; 8
    9360:	51 f1       	breq	.+84     	; 0x93b6 <__ultoa_invert+0x5c>
    9362:	20 31       	cpi	r18, 0x10	; 16
    9364:	81 f1       	breq	.+96     	; 0x93c6 <__ultoa_invert+0x6c>
    9366:	e8 94       	clt
    9368:	6f 93       	push	r22
    936a:	6e 7f       	andi	r22, 0xFE	; 254
    936c:	6e 5f       	subi	r22, 0xFE	; 254
    936e:	7f 4f       	sbci	r23, 0xFF	; 255
    9370:	8f 4f       	sbci	r24, 0xFF	; 255
    9372:	9f 4f       	sbci	r25, 0xFF	; 255
    9374:	af 4f       	sbci	r26, 0xFF	; 255
    9376:	b1 e0       	ldi	r27, 0x01	; 1
    9378:	3e d0       	rcall	.+124    	; 0x93f6 <__ultoa_invert+0x9c>
    937a:	b4 e0       	ldi	r27, 0x04	; 4
    937c:	3c d0       	rcall	.+120    	; 0x93f6 <__ultoa_invert+0x9c>
    937e:	67 0f       	add	r22, r23
    9380:	78 1f       	adc	r23, r24
    9382:	89 1f       	adc	r24, r25
    9384:	9a 1f       	adc	r25, r26
    9386:	a1 1d       	adc	r26, r1
    9388:	68 0f       	add	r22, r24
    938a:	79 1f       	adc	r23, r25
    938c:	8a 1f       	adc	r24, r26
    938e:	91 1d       	adc	r25, r1
    9390:	a1 1d       	adc	r26, r1
    9392:	6a 0f       	add	r22, r26
    9394:	71 1d       	adc	r23, r1
    9396:	81 1d       	adc	r24, r1
    9398:	91 1d       	adc	r25, r1
    939a:	a1 1d       	adc	r26, r1
    939c:	20 d0       	rcall	.+64     	; 0x93de <__ultoa_invert+0x84>
    939e:	09 f4       	brne	.+2      	; 0x93a2 <__ultoa_invert+0x48>
    93a0:	68 94       	set
    93a2:	3f 91       	pop	r19
    93a4:	2a e0       	ldi	r18, 0x0A	; 10
    93a6:	26 9f       	mul	r18, r22
    93a8:	11 24       	eor	r1, r1
    93aa:	30 19       	sub	r19, r0
    93ac:	30 5d       	subi	r19, 0xD0	; 208
    93ae:	31 93       	st	Z+, r19
    93b0:	de f6       	brtc	.-74     	; 0x9368 <__ultoa_invert+0xe>
    93b2:	cf 01       	movw	r24, r30
    93b4:	08 95       	ret
    93b6:	46 2f       	mov	r20, r22
    93b8:	47 70       	andi	r20, 0x07	; 7
    93ba:	40 5d       	subi	r20, 0xD0	; 208
    93bc:	41 93       	st	Z+, r20
    93be:	b3 e0       	ldi	r27, 0x03	; 3
    93c0:	0f d0       	rcall	.+30     	; 0x93e0 <__ultoa_invert+0x86>
    93c2:	c9 f7       	brne	.-14     	; 0x93b6 <__ultoa_invert+0x5c>
    93c4:	f6 cf       	rjmp	.-20     	; 0x93b2 <__ultoa_invert+0x58>
    93c6:	46 2f       	mov	r20, r22
    93c8:	4f 70       	andi	r20, 0x0F	; 15
    93ca:	40 5d       	subi	r20, 0xD0	; 208
    93cc:	4a 33       	cpi	r20, 0x3A	; 58
    93ce:	18 f0       	brcs	.+6      	; 0x93d6 <__ultoa_invert+0x7c>
    93d0:	49 5d       	subi	r20, 0xD9	; 217
    93d2:	31 fd       	sbrc	r19, 1
    93d4:	40 52       	subi	r20, 0x20	; 32
    93d6:	41 93       	st	Z+, r20
    93d8:	02 d0       	rcall	.+4      	; 0x93de <__ultoa_invert+0x84>
    93da:	a9 f7       	brne	.-22     	; 0x93c6 <__ultoa_invert+0x6c>
    93dc:	ea cf       	rjmp	.-44     	; 0x93b2 <__ultoa_invert+0x58>
    93de:	b4 e0       	ldi	r27, 0x04	; 4
    93e0:	a6 95       	lsr	r26
    93e2:	97 95       	ror	r25
    93e4:	87 95       	ror	r24
    93e6:	77 95       	ror	r23
    93e8:	67 95       	ror	r22
    93ea:	ba 95       	dec	r27
    93ec:	c9 f7       	brne	.-14     	; 0x93e0 <__ultoa_invert+0x86>
    93ee:	00 97       	sbiw	r24, 0x00	; 0
    93f0:	61 05       	cpc	r22, r1
    93f2:	71 05       	cpc	r23, r1
    93f4:	08 95       	ret
    93f6:	9b 01       	movw	r18, r22
    93f8:	ac 01       	movw	r20, r24
    93fa:	0a 2e       	mov	r0, r26
    93fc:	06 94       	lsr	r0
    93fe:	57 95       	ror	r21
    9400:	47 95       	ror	r20
    9402:	37 95       	ror	r19
    9404:	27 95       	ror	r18
    9406:	ba 95       	dec	r27
    9408:	c9 f7       	brne	.-14     	; 0x93fc <__ultoa_invert+0xa2>
    940a:	62 0f       	add	r22, r18
    940c:	73 1f       	adc	r23, r19
    940e:	84 1f       	adc	r24, r20
    9410:	95 1f       	adc	r25, r21
    9412:	a0 1d       	adc	r26, r0
    9414:	08 95       	ret

00009416 <__ctype_isfalse>:
    9416:	99 27       	eor	r25, r25
    9418:	88 27       	eor	r24, r24

0000941a <__ctype_istrue>:
    941a:	08 95       	ret

0000941c <fgetc>:
    941c:	cf 93       	push	r28
    941e:	df 93       	push	r29
    9420:	ec 01       	movw	r28, r24
    9422:	4b 81       	ldd	r20, Y+3	; 0x03
    9424:	40 ff       	sbrs	r20, 0
    9426:	1a c0       	rjmp	.+52     	; 0x945c <fgetc+0x40>
    9428:	46 ff       	sbrs	r20, 6
    942a:	0a c0       	rjmp	.+20     	; 0x9440 <fgetc+0x24>
    942c:	4f 7b       	andi	r20, 0xBF	; 191
    942e:	4b 83       	std	Y+3, r20	; 0x03
    9430:	8e 81       	ldd	r24, Y+6	; 0x06
    9432:	9f 81       	ldd	r25, Y+7	; 0x07
    9434:	01 96       	adiw	r24, 0x01	; 1
    9436:	8e 83       	std	Y+6, r24	; 0x06
    9438:	9f 83       	std	Y+7, r25	; 0x07
    943a:	8a 81       	ldd	r24, Y+2	; 0x02
    943c:	28 2f       	mov	r18, r24
    943e:	2b c0       	rjmp	.+86     	; 0x9496 <fgetc+0x7a>
    9440:	42 ff       	sbrs	r20, 2
    9442:	13 c0       	rjmp	.+38     	; 0x946a <fgetc+0x4e>
    9444:	e8 81       	ld	r30, Y
    9446:	f9 81       	ldd	r31, Y+1	; 0x01
    9448:	80 81       	ld	r24, Z
    944a:	28 2f       	mov	r18, r24
    944c:	33 27       	eor	r19, r19
    944e:	27 fd       	sbrc	r18, 7
    9450:	30 95       	com	r19
    9452:	21 15       	cp	r18, r1
    9454:	31 05       	cpc	r19, r1
    9456:	29 f4       	brne	.+10     	; 0x9462 <fgetc+0x46>
    9458:	40 62       	ori	r20, 0x20	; 32
    945a:	4b 83       	std	Y+3, r20	; 0x03
    945c:	2f ef       	ldi	r18, 0xFF	; 255
    945e:	3f ef       	ldi	r19, 0xFF	; 255
    9460:	1b c0       	rjmp	.+54     	; 0x9498 <fgetc+0x7c>
    9462:	31 96       	adiw	r30, 0x01	; 1
    9464:	e8 83       	st	Y, r30
    9466:	f9 83       	std	Y+1, r31	; 0x01
    9468:	11 c0       	rjmp	.+34     	; 0x948c <fgetc+0x70>
    946a:	ea 85       	ldd	r30, Y+10	; 0x0a
    946c:	fb 85       	ldd	r31, Y+11	; 0x0b
    946e:	ce 01       	movw	r24, r28
    9470:	19 95       	eicall
    9472:	9c 01       	movw	r18, r24
    9474:	97 ff       	sbrs	r25, 7
    9476:	0a c0       	rjmp	.+20     	; 0x948c <fgetc+0x70>
    9478:	9b 81       	ldd	r25, Y+3	; 0x03
    947a:	2f 5f       	subi	r18, 0xFF	; 255
    947c:	3f 4f       	sbci	r19, 0xFF	; 255
    947e:	11 f0       	breq	.+4      	; 0x9484 <fgetc+0x68>
    9480:	80 e2       	ldi	r24, 0x20	; 32
    9482:	01 c0       	rjmp	.+2      	; 0x9486 <fgetc+0x6a>
    9484:	80 e1       	ldi	r24, 0x10	; 16
    9486:	89 2b       	or	r24, r25
    9488:	8b 83       	std	Y+3, r24	; 0x03
    948a:	e8 cf       	rjmp	.-48     	; 0x945c <fgetc+0x40>
    948c:	8e 81       	ldd	r24, Y+6	; 0x06
    948e:	9f 81       	ldd	r25, Y+7	; 0x07
    9490:	01 96       	adiw	r24, 0x01	; 1
    9492:	8e 83       	std	Y+6, r24	; 0x06
    9494:	9f 83       	std	Y+7, r25	; 0x07
    9496:	30 e0       	ldi	r19, 0x00	; 0
    9498:	c9 01       	movw	r24, r18
    949a:	df 91       	pop	r29
    949c:	cf 91       	pop	r28
    949e:	08 95       	ret

000094a0 <_exit>:
    94a0:	f8 94       	cli

000094a2 <__stop_program>:
    94a2:	ff cf       	rjmp	.-2      	; 0x94a2 <__stop_program>
