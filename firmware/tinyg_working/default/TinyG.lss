
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009770  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00802000  00009770  00009804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000441  0080212e  0080212e  00009932  2**0
                  ALLOC
  3 .debug_aranges 00000340  00000000  00000000  00009932  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e06  00000000  00000000  00009c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000cf66  00000000  00000000  0000aa78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002c02  00000000  00000000  000179de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005270  00000000  00000000  0001a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c00  00000000  00000000  0001f850  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002470  00000000  00000000  00020450  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003b01  00000000  00000000  000228c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  000263c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__ctors_end>
       4:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
       8:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
       c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      10:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      14:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      18:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      1c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      20:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      24:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      28:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      2c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      30:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      34:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      38:	0c 94 12 27 	jmp	0x4e24	; 0x4e24 <__vector_14>
      3c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      40:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      44:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      48:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      4c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      50:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      54:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      58:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      5c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      60:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      64:	0c 94 6b 29 	jmp	0x52d6	; 0x52d6 <__vector_25>
      68:	0c 94 e9 29 	jmp	0x53d2	; 0x53d2 <__vector_26>
      6c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      70:	0c 94 6c 36 	jmp	0x6cd8	; 0x6cd8 <__vector_28>
      74:	0c 94 ea 36 	jmp	0x6dd4	; 0x6dd4 <__vector_29>
      78:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      7c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      80:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      84:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      88:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      8c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      90:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      94:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      98:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      9c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      a0:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      a4:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      a8:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      ac:	0c 94 48 34 	jmp	0x6890	; 0x6890 <__vector_43>
      b0:	0c 94 20 34 	jmp	0x6840	; 0x6840 <__vector_44>
      b4:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      b8:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      bc:	0c 94 48 26 	jmp	0x4c90	; 0x4c90 <__vector_47>
      c0:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      c4:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      c8:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      cc:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      d0:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      d4:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      d8:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      dc:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      e0:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      e4:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      e8:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      ec:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      f0:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      f4:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      f8:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
      fc:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     100:	0c 94 f8 33 	jmp	0x67f0	; 0x67f0 <__vector_64>
     104:	0c 94 d0 33 	jmp	0x67a0	; 0x67a0 <__vector_65>
     108:	0c 94 e8 34 	jmp	0x69d0	; 0x69d0 <__vector_66>
     10c:	0c 94 c0 34 	jmp	0x6980	; 0x6980 <__vector_67>
     110:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     114:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     118:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     11c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     120:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     124:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     128:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     12c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     130:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     134:	0c 94 ad 26 	jmp	0x4d5a	; 0x4d5a <__vector_77>
     138:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     13c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     140:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     144:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     148:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     14c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     150:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     154:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     158:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     15c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     160:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     164:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     168:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     16c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     170:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     174:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     178:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     17c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     180:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     184:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     188:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     18c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     190:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     194:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     198:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     19c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     1a0:	0c 94 98 34 	jmp	0x6930	; 0x6930 <__vector_104>
     1a4:	0c 94 70 34 	jmp	0x68e0	; 0x68e0 <__vector_105>
     1a8:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     1ac:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     1b0:	0c 94 e3 25 	jmp	0x4bc6	; 0x4bc6 <__vector_108>
     1b4:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     1b8:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     1bc:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     1c0:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     1c4:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     1c8:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     1cc:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     1d0:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     1d4:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     1d8:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     1dc:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     1e0:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     1e4:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <configs_P>:
     24b:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25b:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26b:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27b:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28b:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29b:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2ab:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bb:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2db:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2eb:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2fb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30b:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31b:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32b:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33b:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34b:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35b:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36b:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37b:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38b:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000399 <__c.3832>:
     399:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     3a9:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000003b4 <__c.3829>:
     3b4:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     3c4:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

000003ce <__c.3826>:
     3ce:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     3de:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000003e8 <__c.3823>:
     3e8:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     3f8:	74 3a 20 25 73 0a 00                                t: %s..

000003ff <__c.3820>:
     3ff:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     40f:	4d 6f 64 65 0a 00                                   Mode..

00000415 <__c.3817>:
     415:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     425:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

00000432 <__c.3749>:
     432:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     442:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     452:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     462:	29 0a 0a 00                                         )...

00000466 <__c.3747>:
     466:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     476:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     486:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000496 <__c.3745>:
     496:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     4a6:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4b6:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004c7 <__c.3743>:
     4c7:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     4d7:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4e7:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004f8 <__c.3741>:
     4f8:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     508:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     518:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     528:	6c 0a 00                                            l..

0000052b <__c.3739>:
     52b:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     53b:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     54b:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     55b:	6e 0a 00                                            n..

0000055e <__c.3737>:
     55e:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     56e:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     57e:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     58e:	74 65 70 73 29 0a 00                                teps)..

00000595 <__c.3735>:
     595:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     5a5:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     5b5:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     5c5:	70 0a 00                                            p..

000005c8 <__c.3733>:
     5c8:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     5d8:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     5e8:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     5f8:	73 74 65 70 73 29 0a 00                             steps)..

00000600 <__c.3731>:
     600:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     610:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     620:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     630:	73 74 65 70 73 29 0a 00                             steps)..

00000638 <__c.3726>:
     638:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     648:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

00000656 <__c.3712>:
     656:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     666:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     676:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000681 <__c.3710>:
     681:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     691:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     6a1:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000006ab <__c.3708>:
     6ab:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     6bb:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     6cb:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000006d5 <__c.3706>:
     6d5:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     6e5:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     6f5:	73 20 2d 2d 2d 0a 00                                s ---..

000006fc <__c.3704>:
     6fc:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     70c:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     71c:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000724 <bsel>:
     724:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

0000072f <bscale>:
     72f:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

0000073a <__c.3529>:
     73a:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     74a:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     75a:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000766 <readlnFuncs>:
     766:	ab 2b 80 2b 80 2b f2 2b 80 2b 80 2b 80 2b 80 2b     .+.+.+.+.+.+.+.+
     776:	de 2b 80 2b ab 2b 80 2b 80 2b ab 2b 0d 2c 16 2c     .+.+.+.+.+.+.,.,
     786:	80 2b 04 2c 80 2b fb 2b 80 2b 80 2b 80 2b 80 2b     .+.,.+.+.+.+.+.+
     796:	f2 2b 80 2b 80 2b f2 2b 80 2b 80 2b 80 2b 80 2b     .+.+.+.+.+.+.+.+
     7a6:	80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b     .+.+.+.+.+.+.+.+
     7b6:	80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b     .+.+.+.+.+.+.+.+
     7c6:	80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b     .+.+.+.+.+.+.+.+
     7d6:	80 2b 80 2b 80 2b d4 2b 80 2b 80 2b 80 2b 80 2b     .+.+.+.+.+.+.+.+
     7e6:	80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b     .+.+.+.+.+.+.+.+
     7f6:	80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b     .+.+.+.+.+.+.+.+
     806:	80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b     .+.+.+.+.+.+.+.+
     816:	80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b     .+.+.+.+.+.+.+.+
     826:	80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b     .+.+.+.+.+.+.+.+
     836:	80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b     .+.+.+.+.+.+.+.+
     846:	80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b     .+.+.+.+.+.+.+.+
     856:	80 2b 80 2b 80 2b 80 2b 80 2b 80 2b 80 2b de 2b     .+.+.+.+.+.+.+.+

00000866 <getcFuncs>:
     866:	ff 2a ef 2a ef 2a 24 2b ef 2a ef 2a ef 2a ef 2a     .*.*.*$+.*.*.*.*
     876:	1e 2b ef 2a ff 2a ef 2a ef 2a ff 2a 36 2b 3c 2b     .+.*.*.*.*.*6+<+
     886:	ef 2a 30 2b ef 2a 2a 2b ef 2a ef 2a ef 2a ef 2a     .*0+.**+.*.*.*.*
     896:	24 2b ef 2a ef 2a 24 2b ef 2a ef 2a ef 2a ef 2a     $+.*.*$+.*.*.*.*
     8a6:	ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a     .*.*.*.*.*.*.*.*
     8b6:	ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a     .*.*.*.*.*.*.*.*
     8c6:	ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a     .*.*.*.*.*.*.*.*
     8d6:	ef 2a ef 2a ef 2a 14 2b ef 2a ef 2a ef 2a ef 2a     .*.*.*.+.*.*.*.*
     8e6:	ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a     .*.*.*.*.*.*.*.*
     8f6:	ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a     .*.*.*.*.*.*.*.*
     906:	ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a     .*.*.*.*.*.*.*.*
     916:	ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a     .*.*.*.*.*.*.*.*
     926:	ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a     .*.*.*.*.*.*.*.*
     936:	ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a     .*.*.*.*.*.*.*.*
     946:	ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a     .*.*.*.*.*.*.*.*
     956:	ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a ef 2a 1e 2b     .*.*.*.*.*.*.*.+

00000966 <square_test1>:
     966:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     976:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     986:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     996:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     9a6:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     9b6:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     9c6:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000009d4 <square_test2>:
     9d4:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     9e4:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     9f4:	78 30 20 79 30 00                                   x0 y0.

000009fa <square_test10>:
     9fa:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     a0a:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     a1a:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000a26 <circle_test10>:
     a26:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     a36:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     a46:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     a56:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     a66:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     a76:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     a86:	30 00                                               0.

00000a88 <square_circle_test10>:
     a88:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     a98:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     aa8:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     ab8:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     ac8:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     ad8:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     ae8:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     af8:	31 30 20 79 30 00                                   10 y0.

00000afe <square_circle_test100>:
     afe:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     b0e:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     b1e:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     b2e:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     b3e:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     b4e:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     b5e:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     b6e:	35 30 20 6a 30 00                                   50 j0.

00000b74 <spiral_test5>:
     b74:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     b84:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     b94:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     ba4:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     bb4:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     bc4:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     bd4:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     be4:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

00000bee <spiral_test50a>:
     bee:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     bfe:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

00000c0e <dwell_test2>:
     c0e:	67 34 20 70 32 2e 33 34 35 00                       g4 p2.345.

00000c18 <dwell_testMax>:
     c18:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000c22 <g0_test1>:
     c22:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     c32:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000c42 <g0_test2>:
     c42:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     c52:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     c62:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     c72:	79 30 20 7a 30 00                                   y0 z0.

00000c78 <g0_test3>:
     c78:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     c88:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     c98:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000ca6 <radius_arc_test1>:
     ca6:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     cb6:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     cc6:	72 35 30 0a 00                                      r50..

00000ccb <radius_arc_test2>:
     ccb:	67 32 0a 00                                         g2..

00000ccf <zoetrope>:
     ccf:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     cdf:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     cef:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     cff:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     d0f:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     d1f:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     d2f:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     d3f:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     d4f:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     d5f:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     d6f:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     d7f:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     d8f:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     d9f:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     daf:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     dbf:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     dcf:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     ddf:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     def:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     dff:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     e0f:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     e1f:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     e2f:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     e3f:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     e4f:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     e5f:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     e6f:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     e7f:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     e8f:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     e9f:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     eaf:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     ebf:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     ecf:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     edf:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     eef:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     eff:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
     f0f:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
     f1f:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
     f2f:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
     f3f:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
     f4f:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
     f5f:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
     f6f:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
     f7f:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
     f8f:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
     f9f:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
     faf:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
     fbf:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
     fcf:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
     fdf:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
     fef:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
     fff:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
    100f:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
    101f:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
    102f:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
    103f:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
    104f:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
    105f:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
    106f:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
    107f:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
    108f:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
    109f:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
    10af:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
    10bf:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
    10cf:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
    10df:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
    10ef:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
    10ff:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    110f:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    111f:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    112f:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    113f:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    114f:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    115f:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    116f:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    117f:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    118f:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    119f:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    11af:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    11bf:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    11cf:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    11df:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    11ef:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    11ff:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    120f:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    121f:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    122f:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    123f:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    124f:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    125f:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    126f:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    127f:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    128f:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    129f:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    12af:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    12bf:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    12cf:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    12df:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    12ef:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    12ff:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    130f:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    131f:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    132f:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    133f:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    134f:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    135f:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    136f:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    137f:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    138f:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    139f:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    13af:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    13bf:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    13cf:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    13df:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    13ef:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    13ff:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    140f:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    141f:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    142f:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    143f:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    144f:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    145f:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    146f:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    147f:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    148f:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    149f:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    14af:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    14bf:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    14cf:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    14df:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    14ef:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    14ff:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    150f:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    151f:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    152f:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    153f:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    154f:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    155f:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    156f:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    157f:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    158f:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    159f:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    15af:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    15bf:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    15cf:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    15df:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    15ef:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    15ff:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    160f:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    161f:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    162f:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    163f:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    164f:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    165f:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    166f:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    167f:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

0000168a <contraptor_circle>:
    168a:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    169a:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    16aa:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    16ba:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    16ca:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    16da:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    16ea:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    16fa:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    170a:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    171a:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    172a:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    173a:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    174a:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    175a:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    176a:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    177a:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    178a:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    179a:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    17aa:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    17ba:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    17ca:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    17da:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    17ea:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    17fa:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    180a:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    181a:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    182a:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    183a:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    184a:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    185a:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    186a:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    187a:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    188a:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    189a:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    18aa:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    18ba:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    18ca:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    18da:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    18ea:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    18fa:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    190a:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    191a:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    192a:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    193a:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    194a:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    195a:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    196a:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    197a:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    198a:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    199a:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    19aa:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    19ba:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    19ca:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    19da:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    19ea:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    19fa:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1a0a:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1a1a:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1a2a:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1a3a:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1a4a:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1a5a:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001a6a <tgModeStringControl>:
    1a6a:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001a77 <tgModeStringConfig>:
    1a77:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001a83 <tgModeStringGCode>:
    1a83:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

00001a8f <tgModeStringDirect>:
    1a8f:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

00001a9c <tgModeStrings>:
    1a9c:	6a 1a 77 1a 83 1a 8f 1a                             j.w.....

00001aa4 <__c.3946>:
    1aa4:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1ab4:	69 6c 65 0a 00                                      ile..

00001ab9 <__c.3978>:
    1ab9:	0d 0a 45 6e 64 20 6f 66 20 66 69 6c 65 20 65 6e     ..End of file en
    1ac9:	63 6f 75 6e 74 65 72 65 64 0d 0a 00                 countered...

00001ad5 <__c.3924>:
    1ad5:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001ae3 <__c.3919>:
    1ae3:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001af1 <__c.3851>:
    1af1:	62 75 69 6c 64 20 32 30 32 00                       build 202.

00001afb <__c.3849>:
    1afb:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1b0b:	25 53 0a 00                                         %S..

00001b0f <readlnFuncs>:
    1b0f:	ac 38 81 38 81 38 f3 38 81 38 81 38 81 38 81 38     .8.8.8.8.8.8.8.8
    1b1f:	df 38 81 38 ac 38 81 38 81 38 ac 38 0e 39 17 39     .8.8.8.8.8.8.9.9
    1b2f:	81 38 05 39 81 38 fc 38 81 38 81 38 81 38 81 38     .8.9.8.8.8.8.8.8
    1b3f:	f3 38 81 38 81 38 f3 38 81 38 81 38 81 38 81 38     .8.8.8.8.8.8.8.8
    1b4f:	81 38 81 38 81 38 81 38 81 38 81 38 81 38 81 38     .8.8.8.8.8.8.8.8
    1b5f:	81 38 81 38 81 38 81 38 81 38 81 38 81 38 81 38     .8.8.8.8.8.8.8.8
    1b6f:	81 38 81 38 81 38 81 38 81 38 81 38 81 38 81 38     .8.8.8.8.8.8.8.8
    1b7f:	81 38 81 38 81 38 d5 38 81 38 81 38 81 38 81 38     .8.8.8.8.8.8.8.8
    1b8f:	81 38 81 38 81 38 81 38 81 38 81 38 81 38 81 38     .8.8.8.8.8.8.8.8
    1b9f:	81 38 81 38 81 38 81 38 81 38 81 38 81 38 81 38     .8.8.8.8.8.8.8.8
    1baf:	81 38 81 38 81 38 81 38 81 38 81 38 81 38 81 38     .8.8.8.8.8.8.8.8
    1bbf:	81 38 81 38 81 38 81 38 81 38 81 38 81 38 81 38     .8.8.8.8.8.8.8.8
    1bcf:	81 38 81 38 81 38 81 38 81 38 81 38 81 38 81 38     .8.8.8.8.8.8.8.8
    1bdf:	81 38 81 38 81 38 81 38 81 38 81 38 81 38 81 38     .8.8.8.8.8.8.8.8
    1bef:	81 38 81 38 81 38 81 38 81 38 81 38 81 38 81 38     .8.8.8.8.8.8.8.8
    1bff:	81 38 81 38 81 38 81 38 81 38 81 38 81 38 df 38     .8.8.8.8.8.8.8.8

00001c0f <getcFuncs>:
    1c0f:	00 38 f0 37 f0 37 25 38 f0 37 f0 37 f0 37 f0 37     .8.7.7%8.7.7.7.7
    1c1f:	1f 38 f0 37 00 38 f0 37 f0 37 00 38 37 38 3d 38     .8.7.8.7.7.878=8
    1c2f:	f0 37 31 38 f0 37 2b 38 f0 37 f0 37 f0 37 f0 37     .718.7+8.7.7.7.7
    1c3f:	25 38 f0 37 f0 37 25 38 f0 37 f0 37 f0 37 f0 37     %8.7.7%8.7.7.7.7
    1c4f:	f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37     .7.7.7.7.7.7.7.7
    1c5f:	f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37     .7.7.7.7.7.7.7.7
    1c6f:	f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37     .7.7.7.7.7.7.7.7
    1c7f:	f0 37 f0 37 f0 37 15 38 f0 37 f0 37 f0 37 f0 37     .7.7.7.8.7.7.7.7
    1c8f:	f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37     .7.7.7.7.7.7.7.7
    1c9f:	f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37     .7.7.7.7.7.7.7.7
    1caf:	f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37     .7.7.7.7.7.7.7.7
    1cbf:	f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37     .7.7.7.7.7.7.7.7
    1ccf:	f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37     .7.7.7.7.7.7.7.7
    1cdf:	f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37     .7.7.7.7.7.7.7.7
    1cef:	f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37     .7.7.7.7.7.7.7.7
    1cff:	f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 f0 37 1f 38     .7.7.7.7.7.7.7.8

00001d0f <pstr_inf>:
    1d0f:	49 4e 46                                            INF

00001d12 <pstr_inity>:
    1d12:	49 4e 49 54 59                                      INITY

00001d17 <pstr_nan>:
    1d17:	4e 41 4e                                            NAN

00001d1a <pwr_m10>:
    1d1a:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1d2a:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001d32 <pwr_p10>:
    1d32:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1d42:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1d52:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1d62:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1d72:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1d82:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1d92:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1da2:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1db2:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1dc2:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1dd2:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1de2:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1df2:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1e02:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1e12:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1e22:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1e32:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1e42:	3d 27                                               ='

00001e44 <__ctors_end>:
    1e44:	11 24       	eor	r1, r1
    1e46:	1f be       	out	0x3f, r1	; 63
    1e48:	cf ef       	ldi	r28, 0xFF	; 255
    1e4a:	df e5       	ldi	r29, 0x5F	; 95
    1e4c:	de bf       	out	0x3e, r29	; 62
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	00 e0       	ldi	r16, 0x00	; 0
    1e52:	0c bf       	out	0x3c, r16	; 60

00001e54 <__do_copy_data>:
    1e54:	11 e2       	ldi	r17, 0x21	; 33
    1e56:	a0 e0       	ldi	r26, 0x00	; 0
    1e58:	b0 e2       	ldi	r27, 0x20	; 32
    1e5a:	e0 e7       	ldi	r30, 0x70	; 112
    1e5c:	f7 e9       	ldi	r31, 0x97	; 151
    1e5e:	00 e0       	ldi	r16, 0x00	; 0
    1e60:	0b bf       	out	0x3b, r16	; 59
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <__do_copy_data+0x14>
    1e64:	07 90       	elpm	r0, Z+
    1e66:	0d 92       	st	X+, r0
    1e68:	ae 32       	cpi	r26, 0x2E	; 46
    1e6a:	b1 07       	cpc	r27, r17
    1e6c:	d9 f7       	brne	.-10     	; 0x1e64 <__do_copy_data+0x10>

00001e6e <__do_clear_bss>:
    1e6e:	15 e2       	ldi	r17, 0x25	; 37
    1e70:	ae e2       	ldi	r26, 0x2E	; 46
    1e72:	b1 e2       	ldi	r27, 0x21	; 33
    1e74:	01 c0       	rjmp	.+2      	; 0x1e78 <.do_clear_bss_start>

00001e76 <.do_clear_bss_loop>:
    1e76:	1d 92       	st	X+, r1

00001e78 <.do_clear_bss_start>:
    1e78:	af 36       	cpi	r26, 0x6F	; 111
    1e7a:	b1 07       	cpc	r27, r17
    1e7c:	e1 f7       	brne	.-8      	; 0x1e76 <.do_clear_bss_loop>
    1e7e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <main>
    1e82:	0c 94 b6 4b 	jmp	0x976c	; 0x976c <_exit>

00001e86 <__bad_interrupt>:
    1e86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001e8a <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1e8a:	f8 94       	cli
	xmega_init();				// xmega setup
    1e8c:	0e 94 3c 1b 	call	0x3678	; 0x3678 <xmega_init>
	xio_init();					// xmega io subsystem
    1e90:	0e 94 e5 27 	call	0x4fca	; 0x4fca <xio_init>

	cfg_init();					// get config record from eeprom
    1e94:	0e 94 33 17 	call	0x2e66	; 0x2e66 <cfg_init>
	st_init(); 					// stepper subsystem
    1e98:	0e 94 9f 23 	call	0x473e	; 0x473e <st_init>
	ls_init();					// limit switches
    1e9c:	0e 94 a8 33 	call	0x6750	; 0x6750 <ls_init>
	mv_init();					// move buffers
    1ea0:	0e 94 7d 31 	call	0x62fa	; 0x62fa <mv_init>
	mc_init();					// motion control subsystem
    1ea4:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <mc_init>
	spindle_init();				// spindle controller
    1ea8:	0e 94 83 23 	call	0x4706	; 0x4706 <spindle_init>
	en_init();					// encoders
    1eac:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <en_init>
	gc_init();					// gcode-parser
    1eb0:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <gc_init>
	dd_init();					// direct drive commands
    1eb4:	0e 94 79 31 	call	0x62f2	; 0x62f2 <dd_init>
	tg_init();					// tinyg parsers
    1eb8:	0e 94 4b 31 	call	0x6296	; 0x6296 <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1ebc:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1ec0:	e0 ea       	ldi	r30, 0xA0	; 160
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 91 a2 00 	lds	r24, 0x00A2
    1ec8:	81 60       	ori	r24, 0x01	; 1
    1eca:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1ecc:	80 91 a2 00 	lds	r24, 0x00A2
    1ed0:	82 60       	ori	r24, 0x02	; 2
    1ed2:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1ed4:	80 91 a2 00 	lds	r24, 0x00A2
    1ed8:	84 60       	ori	r24, 0x04	; 4
    1eda:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1edc:	78 94       	sei

	// Debug help:
	// Pre-load the USB RX (input) buffer with some test strings
	// Be mindful of the 16 char limit on the RX (circular) buffer.
	xio_usb_queue_RX_string("f\n");
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e2       	ldi	r25, 0x20	; 32
    1ee2:	0e 94 d6 29 	call	0x53ac	; 0x53ac <xio_usb_queue_RX_string>
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");

	for(;;){
		tg_controller();
    1ee6:	0e 94 14 31 	call	0x6228	; 0x6228 <tg_controller>
    1eea:	fd cf       	rjmp	.-6      	; 0x1ee6 <main+0x5c>

00001eec <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1eec:	80 93 7b 21 	sts	0x217B, r24
	gc.plane_axis_1 = axis_1;
    1ef0:	60 93 7c 21 	sts	0x217C, r22
	gc.plane_axis_2 = axis_2;
    1ef4:	40 93 7d 21 	sts	0x217D, r20
}
    1ef8:	08 95       	ret

00001efa <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1efa:	ef 92       	push	r14
    1efc:	ff 92       	push	r15
    1efe:	0f 93       	push	r16
    1f00:	1f 93       	push	r17
    1f02:	7b 01       	movw	r14, r22
    1f04:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1f06:	80 91 3b 21 	lds	r24, 0x213B
    1f0a:	88 23       	and	r24, r24
    1f0c:	51 f0       	breq	.+20     	; 0x1f22 <to_millimeters+0x28>
    1f0e:	c8 01       	movw	r24, r16
    1f10:	b7 01       	movw	r22, r14
    1f12:	25 e8       	ldi	r18, 0x85	; 133
    1f14:	32 e4       	ldi	r19, 0x42	; 66
    1f16:	41 e2       	ldi	r20, 0x21	; 33
    1f18:	5d e3       	ldi	r21, 0x3D	; 61
    1f1a:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    1f1e:	7b 01       	movw	r14, r22
    1f20:	8c 01       	movw	r16, r24
}
    1f22:	b7 01       	movw	r22, r14
    1f24:	c8 01       	movw	r24, r16
    1f26:	1f 91       	pop	r17
    1f28:	0f 91       	pop	r16
    1f2a:	ff 90       	pop	r15
    1f2c:	ef 90       	pop	r14
    1f2e:	08 95       	ret

00001f30 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    1f30:	86 e5       	ldi	r24, 0x56	; 86
    1f32:	ee e2       	ldi	r30, 0x2E	; 46
    1f34:	f1 e2       	ldi	r31, 0x21	; 33
    1f36:	df 01       	movw	r26, r30
    1f38:	1d 92       	st	X+, r1
    1f3a:	8a 95       	dec	r24
    1f3c:	e9 f7       	brne	.-6      	; 0x1f38 <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	a0 e0       	ldi	r26, 0x00	; 0
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	80 93 3f 21 	sts	0x213F, r24
    1f4a:	90 93 40 21 	sts	0x2140, r25
    1f4e:	a0 93 41 21 	sts	0x2141, r26
    1f52:	b0 93 42 21 	sts	0x2142, r27
	gc.radius = 0;							// radius value
    1f56:	80 93 43 21 	sts	0x2143, r24
    1f5a:	90 93 44 21 	sts	0x2144, r25
    1f5e:	a0 93 45 21 	sts	0x2145, r26
    1f62:	b0 93 46 21 	sts	0x2146, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    1f66:	80 91 a5 24 	lds	r24, 0x24A5
    1f6a:	90 91 a6 24 	lds	r25, 0x24A6
    1f6e:	a0 91 a7 24 	lds	r26, 0x24A7
    1f72:	b0 91 a8 24 	lds	r27, 0x24A8
    1f76:	80 93 47 21 	sts	0x2147, r24
    1f7a:	90 93 48 21 	sts	0x2148, r25
    1f7e:	a0 93 49 21 	sts	0x2149, r26
    1f82:	b0 93 4a 21 	sts	0x214A, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    1f86:	80 91 a9 24 	lds	r24, 0x24A9
    1f8a:	90 91 aa 24 	lds	r25, 0x24AA
    1f8e:	a0 91 ab 24 	lds	r26, 0x24AB
    1f92:	b0 91 ac 24 	lds	r27, 0x24AC
    1f96:	80 93 4b 21 	sts	0x214B, r24
    1f9a:	90 93 4c 21 	sts	0x214C, r25
    1f9e:	a0 93 4d 21 	sts	0x214D, r26
    1fa2:	b0 93 4e 21 	sts	0x214E, r27

	gc.absolute_mode = TRUE;
    1fa6:	21 e0       	ldi	r18, 0x01	; 1
    1fa8:	20 93 3c 21 	sts	0x213C, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a0 e8       	ldi	r26, 0x80	; 128
    1fb2:	bf eb       	ldi	r27, 0xBF	; 191
    1fb4:	80 93 53 21 	sts	0x2153, r24
    1fb8:	90 93 54 21 	sts	0x2154, r25
    1fbc:	a0 93 55 21 	sts	0x2155, r26
    1fc0:	b0 93 56 21 	sts	0x2156, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    1fc4:	10 92 3d 21 	sts	0x213D, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    1fc8:	10 92 82 21 	sts	0x2182, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    1fcc:	10 92 83 21 	sts	0x2183, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1fd0:	10 92 7b 21 	sts	0x217B, r1
	gc.plane_axis_1 = axis_1;
    1fd4:	20 93 7c 21 	sts	0x217C, r18
	gc.plane_axis_2 = axis_2;
    1fd8:	82 e0       	ldi	r24, 0x02	; 2
    1fda:	80 93 7d 21 	sts	0x217D, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X_AXIS, Y_AXIS, Z_AXIS);
}
    1fde:	08 95       	ret

00001fe0 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    1fe0:	4f 92       	push	r4
    1fe2:	5f 92       	push	r5
    1fe4:	6f 92       	push	r6
    1fe6:	7f 92       	push	r7
    1fe8:	8f 92       	push	r8
    1fea:	9f 92       	push	r9
    1fec:	af 92       	push	r10
    1fee:	bf 92       	push	r11
    1ff0:	cf 92       	push	r12
    1ff2:	df 92       	push	r13
    1ff4:	ef 92       	push	r14
    1ff6:	ff 92       	push	r15
    1ff8:	0f 93       	push	r16
    1ffa:	1f 93       	push	r17
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	0f 92       	push	r0
    2002:	0f 92       	push	r0
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	3b 01       	movw	r6, r22
    200a:	2a 01       	movw	r4, r20
    200c:	49 01       	movw	r8, r18
    200e:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    2010:	d8 01       	movw	r26, r16
    2012:	ed 91       	ld	r30, X+
    2014:	fc 91       	ld	r31, X
    2016:	e2 0f       	add	r30, r18
    2018:	f3 1f       	adc	r31, r19
    201a:	e0 81       	ld	r30, Z
    201c:	ee 23       	and	r30, r30
    201e:	41 f0       	breq	.+16     	; 0x2030 <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    2020:	dc 01       	movw	r26, r24
    2022:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    2024:	e1 54       	subi	r30, 0x41	; 65
    2026:	ea 31       	cpi	r30, 0x1A	; 26
    2028:	30 f0       	brcs	.+12     	; 0x2036 <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    202a:	88 e0       	ldi	r24, 0x08	; 8
    202c:	80 93 2e 21 	sts	0x212E, r24
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	35 c0       	rjmp	.+106    	; 0x20a0 <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    2036:	f8 01       	movw	r30, r16
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	01 96       	adiw	r24, 0x01	; 1
    203e:	80 83       	st	Z, r24
    2040:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    2042:	89 01       	movw	r16, r18
    2044:	08 0f       	add	r16, r24
    2046:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    2048:	c8 01       	movw	r24, r16
    204a:	be 01       	movw	r22, r28
    204c:	6f 5f       	subi	r22, 0xFF	; 255
    204e:	7f 4f       	sbci	r23, 0xFF	; 255
    2050:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <strtod>
    2054:	6b 01       	movw	r12, r22
    2056:	7c 01       	movw	r14, r24
    2058:	d3 01       	movw	r26, r6
    205a:	6d 93       	st	X+, r22
    205c:	7d 93       	st	X+, r23
    205e:	8d 93       	st	X+, r24
    2060:	9c 93       	st	X, r25
    2062:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	9a 81       	ldd	r25, Y+2	; 0x02
    2068:	80 17       	cp	r24, r16
    206a:	91 07       	cpc	r25, r17
    206c:	11 f4       	brne	.+4      	; 0x2072 <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    206e:	8c e0       	ldi	r24, 0x0C	; 12
    2070:	dd cf       	rjmp	.-70     	; 0x202c <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    2072:	88 19       	sub	r24, r8
    2074:	99 09       	sbc	r25, r9
    2076:	f5 01       	movw	r30, r10
    2078:	80 83       	st	Z, r24
    207a:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    207c:	c7 01       	movw	r24, r14
    207e:	b6 01       	movw	r22, r12
    2080:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <trunc>
    2084:	9b 01       	movw	r18, r22
    2086:	ac 01       	movw	r20, r24
    2088:	c7 01       	movw	r24, r14
    208a:	b6 01       	movw	r22, r12
    208c:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    2090:	d2 01       	movw	r26, r4
    2092:	6d 93       	st	X+, r22
    2094:	7d 93       	st	X+, r23
    2096:	8d 93       	st	X+, r24
    2098:	9c 93       	st	X, r25
    209a:	13 97       	sbiw	r26, 0x03	; 3
    209c:	21 e0       	ldi	r18, 0x01	; 1
    209e:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    20a0:	c9 01       	movw	r24, r18
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	1f 91       	pop	r17
    20ac:	0f 91       	pop	r16
    20ae:	ff 90       	pop	r15
    20b0:	ef 90       	pop	r14
    20b2:	df 90       	pop	r13
    20b4:	cf 90       	pop	r12
    20b6:	bf 90       	pop	r11
    20b8:	af 90       	pop	r10
    20ba:	9f 90       	pop	r9
    20bc:	8f 90       	pop	r8
    20be:	7f 90       	pop	r7
    20c0:	6f 90       	pop	r6
    20c2:	5f 90       	pop	r5
    20c4:	4f 90       	pop	r4
    20c6:	08 95       	ret

000020c8 <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    20c8:	af 92       	push	r10
    20ca:	bf 92       	push	r11
    20cc:	cf 92       	push	r12
    20ce:	df 92       	push	r13
    20d0:	ef 92       	push	r14
    20d2:	ff 92       	push	r15
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	79 01       	movw	r14, r18
    20da:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    20dc:	5f 77       	andi	r21, 0x7F	; 127
    20de:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    20e2:	0e 94 a4 43 	call	0x8748	; 0x8748 <atan>
    20e6:	5b 01       	movw	r10, r22
    20e8:	6c 01       	movw	r12, r24

	if (y>0) {
    20ea:	c8 01       	movw	r24, r16
    20ec:	b7 01       	movw	r22, r14
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e0       	ldi	r20, 0x00	; 0
    20f4:	50 e0       	ldi	r21, 0x00	; 0
    20f6:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <__gesf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	cc f0       	brlt	.+50     	; 0x2130 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    20fe:	c6 01       	movw	r24, r12
    2100:	b5 01       	movw	r22, r10
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e0       	ldi	r20, 0x00	; 0
    2108:	50 e0       	ldi	r21, 0x00	; 0
    210a:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <__gesf2>
    210e:	18 16       	cp	r1, r24
    2110:	2c f4       	brge	.+10     	; 0x211c <theta+0x54>
	    {
			return(M_PI-theta);
    2112:	6b ed       	ldi	r22, 0xDB	; 219
    2114:	7f e0       	ldi	r23, 0x0F	; 15
    2116:	89 e4       	ldi	r24, 0x49	; 73
    2118:	90 e4       	ldi	r25, 0x40	; 64
    211a:	04 c0       	rjmp	.+8      	; 0x2124 <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    211c:	6b ed       	ldi	r22, 0xDB	; 219
    211e:	7f e0       	ldi	r23, 0x0F	; 15
    2120:	89 e4       	ldi	r24, 0x49	; 73
    2122:	90 ec       	ldi	r25, 0xC0	; 192
    2124:	a6 01       	movw	r20, r12
    2126:	95 01       	movw	r18, r10
    2128:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    212c:	5b 01       	movw	r10, r22
    212e:	6c 01       	movw	r12, r24
		}
	}
}
    2130:	b5 01       	movw	r22, r10
    2132:	c6 01       	movw	r24, r12
    2134:	1f 91       	pop	r17
    2136:	0f 91       	pop	r16
    2138:	ff 90       	pop	r15
    213a:	ef 90       	pop	r14
    213c:	df 90       	pop	r13
    213e:	cf 90       	pop	r12
    2140:	bf 90       	pop	r11
    2142:	af 90       	pop	r10
    2144:	08 95       	ret

00002146 <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    2146:	2f 92       	push	r2
    2148:	3f 92       	push	r3
    214a:	4f 92       	push	r4
    214c:	5f 92       	push	r5
    214e:	6f 92       	push	r6
    2150:	7f 92       	push	r7
    2152:	8f 92       	push	r8
    2154:	9f 92       	push	r9
    2156:	af 92       	push	r10
    2158:	bf 92       	push	r11
    215a:	cf 92       	push	r12
    215c:	df 92       	push	r13
    215e:	ef 92       	push	r14
    2160:	ff 92       	push	r15
    2162:	0f 93       	push	r16
    2164:	1f 93       	push	r17
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	68 97       	sbiw	r28, 0x18	; 24
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    2176:	19 82       	std	Y+1, r1	; 0x01
    2178:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    217a:	e3 e6       	ldi	r30, 0x63	; 99
    217c:	f1 e2       	ldi	r31, 0x21	; 33
    217e:	8c e0       	ldi	r24, 0x0C	; 12
    2180:	df 01       	movw	r26, r30
    2182:	28 2f       	mov	r18, r24
    2184:	1d 92       	st	X+, r1
    2186:	2a 95       	dec	r18
    2188:	e9 f7       	brne	.-6      	; 0x2184 <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    218a:	3c 96       	adiw	r30, 0x0c	; 12
    218c:	df 01       	movw	r26, r30
    218e:	1d 92       	st	X+, r1
    2190:	8a 95       	dec	r24
    2192:	e9 f7       	brne	.-6      	; 0x218e <gc_execute_block+0x48>

	gc.status = TG_OK;
    2194:	10 92 2e 21 	sts	0x212E, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    2198:	10 92 3e 21 	sts	0x213E, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    219c:	6e 01       	movw	r12, r28
    219e:	08 94       	sec
    21a0:	c1 1c       	adc	r12, r1
    21a2:	d1 1c       	adc	r13, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    21a4:	ff 24       	eor	r15, r15
    21a6:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    21a8:	ba e0       	ldi	r27, 0x0A	; 10
    21aa:	bb 2e       	mov	r11, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    21ac:	a2 e0       	ldi	r26, 0x02	; 2
    21ae:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    21b0:	77 24       	eor	r7, r7
    21b2:	7a 94       	dec	r7
					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }
					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    21b4:	f4 e0       	ldi	r31, 0x04	; 4
    21b6:	6f 2e       	mov	r6, r31
			case 'G':
				switch((int)gc.value) {
					case 0:  { gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
					case 1:  { gc.motion_mode = MOTION_MODE_LINEAR; break; }
					case 2:  { gc.motion_mode = MOTION_MODE_CW_ARC; break; }
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    21b8:	e3 e0       	ldi	r30, 0x03	; 3
    21ba:	ae 2e       	mov	r10, r30
    21bc:	02 c1       	rjmp	.+516    	; 0x23c2 <gc_execute_block+0x27c>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    21be:	80 91 2f 21 	lds	r24, 0x212F
    21c2:	8d 34       	cpi	r24, 0x4D	; 77
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <gc_execute_block+0x82>
    21c6:	b6 c0       	rjmp	.+364    	; 0x2334 <gc_execute_block+0x1ee>
    21c8:	84 35       	cpi	r24, 0x54	; 84
    21ca:	09 f4       	brne	.+2      	; 0x21ce <gc_execute_block+0x88>
    21cc:	e8 c0       	rjmp	.+464    	; 0x239e <gc_execute_block+0x258>
    21ce:	87 34       	cpi	r24, 0x47	; 71
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <gc_execute_block+0x8e>
    21d2:	f3 c0       	rjmp	.+486    	; 0x23ba <gc_execute_block+0x274>
			case 'G':
				switch((int)gc.value) {
    21d4:	60 91 30 21 	lds	r22, 0x2130
    21d8:	70 91 31 21 	lds	r23, 0x2131
    21dc:	80 91 32 21 	lds	r24, 0x2132
    21e0:	90 91 33 21 	lds	r25, 0x2133
    21e4:	0e 94 4e 44 	call	0x889c	; 0x889c <__fixsfsi>
    21e8:	65 31       	cpi	r22, 0x15	; 21
    21ea:	71 05       	cpc	r23, r1
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <gc_execute_block+0xaa>
    21ee:	87 c0       	rjmp	.+270    	; 0x22fe <gc_execute_block+0x1b8>
    21f0:	66 31       	cpi	r22, 0x16	; 22
    21f2:	71 05       	cpc	r23, r1
    21f4:	84 f5       	brge	.+96     	; 0x2256 <gc_execute_block+0x110>
    21f6:	64 30       	cpi	r22, 0x04	; 4
    21f8:	71 05       	cpc	r23, r1
    21fa:	09 f4       	brne	.+2      	; 0x21fe <gc_execute_block+0xb8>
    21fc:	65 c0       	rjmp	.+202    	; 0x22c8 <gc_execute_block+0x182>
    21fe:	65 30       	cpi	r22, 0x05	; 5
    2200:	71 05       	cpc	r23, r1
    2202:	a4 f4       	brge	.+40     	; 0x222c <gc_execute_block+0xe6>
    2204:	61 30       	cpi	r22, 0x01	; 1
    2206:	71 05       	cpc	r23, r1
    2208:	09 f4       	brne	.+2      	; 0x220c <gc_execute_block+0xc6>
    220a:	55 c0       	rjmp	.+170    	; 0x22b6 <gc_execute_block+0x170>
    220c:	62 30       	cpi	r22, 0x02	; 2
    220e:	71 05       	cpc	r23, r1
    2210:	24 f4       	brge	.+8      	; 0x221a <gc_execute_block+0xd4>
    2212:	67 2b       	or	r22, r23
    2214:	09 f4       	brne	.+2      	; 0x2218 <gc_execute_block+0xd2>
    2216:	4c c0       	rjmp	.+152    	; 0x22b0 <gc_execute_block+0x16a>
    2218:	bf c0       	rjmp	.+382    	; 0x2398 <gc_execute_block+0x252>
    221a:	62 30       	cpi	r22, 0x02	; 2
    221c:	71 05       	cpc	r23, r1
    221e:	09 f4       	brne	.+2      	; 0x2222 <gc_execute_block+0xdc>
    2220:	4d c0       	rjmp	.+154    	; 0x22bc <gc_execute_block+0x176>
    2222:	63 30       	cpi	r22, 0x03	; 3
    2224:	71 05       	cpc	r23, r1
    2226:	09 f0       	breq	.+2      	; 0x222a <gc_execute_block+0xe4>
    2228:	b7 c0       	rjmp	.+366    	; 0x2398 <gc_execute_block+0x252>
    222a:	4b c0       	rjmp	.+150    	; 0x22c2 <gc_execute_block+0x17c>
    222c:	62 31       	cpi	r22, 0x12	; 18
    222e:	71 05       	cpc	r23, r1
    2230:	09 f4       	brne	.+2      	; 0x2234 <gc_execute_block+0xee>
    2232:	54 c0       	rjmp	.+168    	; 0x22dc <gc_execute_block+0x196>
    2234:	63 31       	cpi	r22, 0x13	; 19
    2236:	71 05       	cpc	r23, r1
    2238:	2c f4       	brge	.+10     	; 0x2244 <gc_execute_block+0xfe>
    223a:	61 31       	cpi	r22, 0x11	; 17
    223c:	71 05       	cpc	r23, r1
    223e:	09 f0       	breq	.+2      	; 0x2242 <gc_execute_block+0xfc>
    2240:	ab c0       	rjmp	.+342    	; 0x2398 <gc_execute_block+0x252>
    2242:	45 c0       	rjmp	.+138    	; 0x22ce <gc_execute_block+0x188>
    2244:	63 31       	cpi	r22, 0x13	; 19
    2246:	71 05       	cpc	r23, r1
    2248:	09 f4       	brne	.+2      	; 0x224c <gc_execute_block+0x106>
    224a:	4f c0       	rjmp	.+158    	; 0x22ea <gc_execute_block+0x1a4>
    224c:	64 31       	cpi	r22, 0x14	; 20
    224e:	71 05       	cpc	r23, r1
    2250:	09 f0       	breq	.+2      	; 0x2254 <gc_execute_block+0x10e>
    2252:	a2 c0       	rjmp	.+324    	; 0x2398 <gc_execute_block+0x252>
    2254:	51 c0       	rjmp	.+162    	; 0x22f8 <gc_execute_block+0x1b2>
    2256:	6a 35       	cpi	r22, 0x5A	; 90
    2258:	71 05       	cpc	r23, r1
    225a:	09 f4       	brne	.+2      	; 0x225e <gc_execute_block+0x118>
    225c:	5c c0       	rjmp	.+184    	; 0x2316 <gc_execute_block+0x1d0>
    225e:	6b 35       	cpi	r22, 0x5B	; 91
    2260:	71 05       	cpc	r23, r1
    2262:	ac f4       	brge	.+42     	; 0x228e <gc_execute_block+0x148>
    2264:	6e 31       	cpi	r22, 0x1E	; 30
    2266:	71 05       	cpc	r23, r1
    2268:	09 f4       	brne	.+2      	; 0x226c <gc_execute_block+0x126>
    226a:	4c c0       	rjmp	.+152    	; 0x2304 <gc_execute_block+0x1be>
    226c:	6f 31       	cpi	r22, 0x1F	; 31
    226e:	71 05       	cpc	r23, r1
    2270:	2c f4       	brge	.+10     	; 0x227c <gc_execute_block+0x136>
    2272:	6c 31       	cpi	r22, 0x1C	; 28
    2274:	71 05       	cpc	r23, r1
    2276:	09 f0       	breq	.+2      	; 0x227a <gc_execute_block+0x134>
    2278:	8f c0       	rjmp	.+286    	; 0x2398 <gc_execute_block+0x252>
    227a:	44 c0       	rjmp	.+136    	; 0x2304 <gc_execute_block+0x1be>
    227c:	65 33       	cpi	r22, 0x35	; 53
    227e:	71 05       	cpc	r23, r1
    2280:	09 f4       	brne	.+2      	; 0x2284 <gc_execute_block+0x13e>
    2282:	43 c0       	rjmp	.+134    	; 0x230a <gc_execute_block+0x1c4>
    2284:	60 35       	cpi	r22, 0x50	; 80
    2286:	71 05       	cpc	r23, r1
    2288:	09 f0       	breq	.+2      	; 0x228c <gc_execute_block+0x146>
    228a:	86 c0       	rjmp	.+268    	; 0x2398 <gc_execute_block+0x252>
    228c:	41 c0       	rjmp	.+130    	; 0x2310 <gc_execute_block+0x1ca>
    228e:	6c 35       	cpi	r22, 0x5C	; 92
    2290:	71 05       	cpc	r23, r1
    2292:	09 f4       	brne	.+2      	; 0x2296 <gc_execute_block+0x150>
    2294:	46 c0       	rjmp	.+140    	; 0x2322 <gc_execute_block+0x1dc>
    2296:	6c 35       	cpi	r22, 0x5C	; 92
    2298:	71 05       	cpc	r23, r1
    229a:	0c f4       	brge	.+2      	; 0x229e <gc_execute_block+0x158>
    229c:	3f c0       	rjmp	.+126    	; 0x231c <gc_execute_block+0x1d6>
    229e:	6d 35       	cpi	r22, 0x5D	; 93
    22a0:	71 05       	cpc	r23, r1
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <gc_execute_block+0x160>
    22a4:	41 c0       	rjmp	.+130    	; 0x2328 <gc_execute_block+0x1e2>
    22a6:	6e 35       	cpi	r22, 0x5E	; 94
    22a8:	71 05       	cpc	r23, r1
    22aa:	09 f0       	breq	.+2      	; 0x22ae <gc_execute_block+0x168>
    22ac:	75 c0       	rjmp	.+234    	; 0x2398 <gc_execute_block+0x252>
    22ae:	3f c0       	rjmp	.+126    	; 0x232e <gc_execute_block+0x1e8>
					case 0:  { gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    22b0:	10 92 39 21 	sts	0x2139, r1
    22b4:	82 c0       	rjmp	.+260    	; 0x23ba <gc_execute_block+0x274>
					case 1:  { gc.motion_mode = MOTION_MODE_LINEAR; break; }
    22b6:	f0 92 39 21 	sts	0x2139, r15
    22ba:	7f c0       	rjmp	.+254    	; 0x23ba <gc_execute_block+0x274>
					case 2:  { gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    22bc:	e0 92 39 21 	sts	0x2139, r14
    22c0:	7c c0       	rjmp	.+248    	; 0x23ba <gc_execute_block+0x274>
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    22c2:	a0 92 39 21 	sts	0x2139, r10
    22c6:	79 c0       	rjmp	.+242    	; 0x23ba <gc_execute_block+0x274>
					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    22c8:	f0 92 83 21 	sts	0x2183, r15
    22cc:	76 c0       	rjmp	.+236    	; 0x23ba <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22ce:	10 92 7b 21 	sts	0x217B, r1
	gc.plane_axis_1 = axis_1;
    22d2:	f0 92 7c 21 	sts	0x217C, r15
	gc.plane_axis_2 = axis_2;
    22d6:	e0 92 7d 21 	sts	0x217D, r14
    22da:	6f c0       	rjmp	.+222    	; 0x23ba <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22dc:	10 92 7b 21 	sts	0x217B, r1
	gc.plane_axis_1 = axis_1;
    22e0:	e0 92 7c 21 	sts	0x217C, r14
	gc.plane_axis_2 = axis_2;
    22e4:	f0 92 7d 21 	sts	0x217D, r15
    22e8:	68 c0       	rjmp	.+208    	; 0x23ba <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22ea:	f0 92 7b 21 	sts	0x217B, r15
	gc.plane_axis_1 = axis_1;
    22ee:	e0 92 7c 21 	sts	0x217C, r14
	gc.plane_axis_2 = axis_2;
    22f2:	10 92 7d 21 	sts	0x217D, r1
    22f6:	61 c0       	rjmp	.+194    	; 0x23ba <gc_execute_block+0x274>
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
					case 17: { select_plane(X_AXIS, Y_AXIS, Z_AXIS); break; }
					case 18: { select_plane(X_AXIS, Z_AXIS, Y_AXIS); break; }
					case 19: { select_plane(Y_AXIS, Z_AXIS, X_AXIS); break; }
					case 20: { gc.inches_mode = TRUE; break; }
    22f8:	f0 92 3b 21 	sts	0x213B, r15
    22fc:	5e c0       	rjmp	.+188    	; 0x23ba <gc_execute_block+0x274>
					case 21: { gc.inches_mode = FALSE; break; }
    22fe:	10 92 3b 21 	sts	0x213B, r1
    2302:	5b c0       	rjmp	.+182    	; 0x23ba <gc_execute_block+0x274>
					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    2304:	e0 92 83 21 	sts	0x2183, r14
    2308:	58 c0       	rjmp	.+176    	; 0x23ba <gc_execute_block+0x274>
					case 53: { gc.absolute_override = TRUE; break; }
    230a:	f0 92 82 21 	sts	0x2182, r15
    230e:	55 c0       	rjmp	.+170    	; 0x23ba <gc_execute_block+0x274>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2310:	60 92 39 21 	sts	0x2139, r6
    2314:	52 c0       	rjmp	.+164    	; 0x23ba <gc_execute_block+0x274>
					case 90: { gc.absolute_mode = TRUE; break; }
    2316:	f0 92 3c 21 	sts	0x213C, r15
    231a:	4f c0       	rjmp	.+158    	; 0x23ba <gc_execute_block+0x274>
					case 91: { gc.absolute_mode = FALSE; break; }
    231c:	10 92 3c 21 	sts	0x213C, r1
    2320:	4c c0       	rjmp	.+152    	; 0x23ba <gc_execute_block+0x274>
					case 92: { gc.set_origin_mode = TRUE; break; }
    2322:	f0 92 3e 21 	sts	0x213E, r15
    2326:	49 c0       	rjmp	.+146    	; 0x23ba <gc_execute_block+0x274>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    2328:	f0 92 3a 21 	sts	0x213A, r15
    232c:	46 c0       	rjmp	.+140    	; 0x23ba <gc_execute_block+0x274>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    232e:	10 92 3a 21 	sts	0x213A, r1
    2332:	43 c0       	rjmp	.+134    	; 0x23ba <gc_execute_block+0x274>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    2334:	60 91 30 21 	lds	r22, 0x2130
    2338:	70 91 31 21 	lds	r23, 0x2131
    233c:	80 91 32 21 	lds	r24, 0x2132
    2340:	90 91 33 21 	lds	r25, 0x2133
    2344:	0e 94 4e 44 	call	0x889c	; 0x889c <__fixsfsi>
    2348:	63 30       	cpi	r22, 0x03	; 3
    234a:	71 05       	cpc	r23, r1
    234c:	e1 f0       	breq	.+56     	; 0x2386 <gc_execute_block+0x240>
    234e:	64 30       	cpi	r22, 0x04	; 4
    2350:	71 05       	cpc	r23, r1
    2352:	34 f4       	brge	.+12     	; 0x2360 <gc_execute_block+0x21a>
    2354:	77 fd       	sbrc	r23, 7
    2356:	20 c0       	rjmp	.+64     	; 0x2398 <gc_execute_block+0x252>
    2358:	62 30       	cpi	r22, 0x02	; 2
    235a:	71 05       	cpc	r23, r1
    235c:	74 f0       	brlt	.+28     	; 0x237a <gc_execute_block+0x234>
    235e:	10 c0       	rjmp	.+32     	; 0x2380 <gc_execute_block+0x23a>
    2360:	65 30       	cpi	r22, 0x05	; 5
    2362:	71 05       	cpc	r23, r1
    2364:	b1 f0       	breq	.+44     	; 0x2392 <gc_execute_block+0x24c>
    2366:	65 30       	cpi	r22, 0x05	; 5
    2368:	71 05       	cpc	r23, r1
    236a:	84 f0       	brlt	.+32     	; 0x238c <gc_execute_block+0x246>
    236c:	6e 31       	cpi	r22, 0x1E	; 30
    236e:	71 05       	cpc	r23, r1
    2370:	39 f0       	breq	.+14     	; 0x2380 <gc_execute_block+0x23a>
    2372:	6c 33       	cpi	r22, 0x3C	; 60
    2374:	71 05       	cpc	r23, r1
    2376:	81 f4       	brne	.+32     	; 0x2398 <gc_execute_block+0x252>
    2378:	03 c0       	rjmp	.+6      	; 0x2380 <gc_execute_block+0x23a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    237a:	f0 92 38 21 	sts	0x2138, r15
    237e:	1d c0       	rjmp	.+58     	; 0x23ba <gc_execute_block+0x274>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2380:	e0 92 38 21 	sts	0x2138, r14
    2384:	1a c0       	rjmp	.+52     	; 0x23ba <gc_execute_block+0x274>
					case 3: gc.spindle_direction = 1; break;
    2386:	f0 92 7f 21 	sts	0x217F, r15
    238a:	17 c0       	rjmp	.+46     	; 0x23ba <gc_execute_block+0x274>
					case 4: gc.spindle_direction = -1; break;
    238c:	70 92 7f 21 	sts	0x217F, r7
    2390:	14 c0       	rjmp	.+40     	; 0x23ba <gc_execute_block+0x274>
					case 5: gc.spindle_direction = 0; break;
    2392:	10 92 7f 21 	sts	0x217F, r1
    2396:	11 c0       	rjmp	.+34     	; 0x23ba <gc_execute_block+0x274>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    2398:	b0 92 2e 21 	sts	0x212E, r11
    239c:	0e c0       	rjmp	.+28     	; 0x23ba <gc_execute_block+0x274>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    239e:	60 91 30 21 	lds	r22, 0x2130
    23a2:	70 91 31 21 	lds	r23, 0x2131
    23a6:	80 91 32 21 	lds	r24, 0x2132
    23aa:	90 91 33 21 	lds	r25, 0x2133
    23ae:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <trunc>
    23b2:	0e 94 53 44 	call	0x88a6	; 0x88a6 <__fixunssfsi>
    23b6:	60 93 7e 21 	sts	0x217E, r22
		}
		if(gc.status) {
    23ba:	80 91 2e 21 	lds	r24, 0x212E
    23be:	88 23       	and	r24, r24
    23c0:	69 f4       	brne	.+26     	; 0x23dc <gc_execute_block+0x296>

	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    23c2:	8f e2       	ldi	r24, 0x2F	; 47
    23c4:	91 e2       	ldi	r25, 0x21	; 33
    23c6:	60 e3       	ldi	r22, 0x30	; 48
    23c8:	71 e2       	ldi	r23, 0x21	; 33
    23ca:	44 e3       	ldi	r20, 0x34	; 52
    23cc:	51 e2       	ldi	r21, 0x21	; 33
    23ce:	94 01       	movw	r18, r8
    23d0:	86 01       	movw	r16, r12
    23d2:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_gc_next_statement>
    23d6:	89 2b       	or	r24, r25
    23d8:	09 f0       	breq	.+2      	; 0x23dc <gc_execute_block+0x296>
    23da:	f1 ce       	rjmp	.-542    	; 0x21be <gc_execute_block+0x78>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    23dc:	80 91 2e 21 	lds	r24, 0x212E
    23e0:	88 23       	and	r24, r24
    23e2:	09 f0       	breq	.+2      	; 0x23e6 <gc_execute_block+0x2a0>
    23e4:	9d c3       	rjmp	.+1850   	; 0x2b20 <gc_execute_block+0x9da>
		return(gc.status); 
	}

	i = 0;
    23e6:	19 82       	std	Y+1, r1	; 0x01
    23e8:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    23ea:	ef e6       	ldi	r30, 0x6F	; 111
    23ec:	f1 e2       	ldi	r31, 0x21	; 33
    23ee:	8c e0       	ldi	r24, 0x0C	; 12
    23f0:	df 01       	movw	r26, r30
    23f2:	1d 92       	st	X+, r1
    23f4:	8a 95       	dec	r24
    23f6:	e9 f7       	brne	.-6      	; 0x23f2 <gc_execute_block+0x2ac>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    23f8:	df 01       	movw	r26, r30
    23fa:	1c 97       	sbiw	r26, 0x0c	; 12
    23fc:	78 97       	sbiw	r30, 0x18	; 24
    23fe:	8c e0       	ldi	r24, 0x0C	; 12
    2400:	01 90       	ld	r0, Z+
    2402:	0d 92       	st	X+, r0
    2404:	81 50       	subi	r24, 0x01	; 1
    2406:	e1 f7       	brne	.-8      	; 0x2400 <gc_execute_block+0x2ba>
    2408:	c6 c0       	rjmp	.+396    	; 0x2596 <gc_execute_block+0x450>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    240a:	c0 90 30 21 	lds	r12, 0x2130
    240e:	d0 90 31 21 	lds	r13, 0x2131
    2412:	e0 90 32 21 	lds	r14, 0x2132
    2416:	f0 90 33 21 	lds	r15, 0x2133
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    241a:	80 91 3b 21 	lds	r24, 0x213B
    241e:	88 23       	and	r24, r24
    2420:	19 f4       	brne	.+6      	; 0x2428 <gc_execute_block+0x2e2>
    2422:	a7 01       	movw	r20, r14
    2424:	96 01       	movw	r18, r12
    2426:	0a c0       	rjmp	.+20     	; 0x243c <gc_execute_block+0x2f6>
    2428:	c7 01       	movw	r24, r14
    242a:	b6 01       	movw	r22, r12
    242c:	25 e8       	ldi	r18, 0x85	; 133
    242e:	32 e4       	ldi	r19, 0x42	; 66
    2430:	41 e2       	ldi	r20, 0x21	; 33
    2432:	5d e3       	ldi	r21, 0x3D	; 61
    2434:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    2438:	9b 01       	movw	r18, r22
    243a:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    243c:	20 93 4f 21 	sts	0x214F, r18
    2440:	30 93 50 21 	sts	0x2150, r19
    2444:	40 93 51 21 	sts	0x2151, r20
    2448:	50 93 52 21 	sts	0x2152, r21
		switch(gc.letter) {
    244c:	00 91 2f 21 	lds	r16, 0x212F
    2450:	00 35       	cpi	r16, 0x50	; 80
    2452:	09 f4       	brne	.+2      	; 0x2456 <gc_execute_block+0x310>
    2454:	47 c0       	rjmp	.+142    	; 0x24e4 <gc_execute_block+0x39e>
    2456:	01 35       	cpi	r16, 0x51	; 81
    2458:	58 f4       	brcc	.+22     	; 0x2470 <gc_execute_block+0x32a>
    245a:	06 34       	cpi	r16, 0x46	; 70
    245c:	c1 f0       	breq	.+48     	; 0x248e <gc_execute_block+0x348>
    245e:	06 34       	cpi	r16, 0x46	; 70
    2460:	08 f4       	brcc	.+2      	; 0x2464 <gc_execute_block+0x31e>
    2462:	9f c0       	rjmp	.+318    	; 0x25a2 <gc_execute_block+0x45c>
    2464:	80 2f       	mov	r24, r16
    2466:	89 54       	subi	r24, 0x49	; 73
    2468:	83 30       	cpi	r24, 0x03	; 3
    246a:	08 f0       	brcs	.+2      	; 0x246e <gc_execute_block+0x328>
    246c:	9a c0       	rjmp	.+308    	; 0x25a2 <gc_execute_block+0x45c>
    246e:	2d c0       	rjmp	.+90     	; 0x24ca <gc_execute_block+0x384>
    2470:	03 35       	cpi	r16, 0x53	; 83
    2472:	09 f4       	brne	.+2      	; 0x2476 <gc_execute_block+0x330>
    2474:	4b c0       	rjmp	.+150    	; 0x250c <gc_execute_block+0x3c6>
    2476:	04 35       	cpi	r16, 0x54	; 84
    2478:	20 f4       	brcc	.+8      	; 0x2482 <gc_execute_block+0x33c>
    247a:	02 35       	cpi	r16, 0x52	; 82
    247c:	09 f0       	breq	.+2      	; 0x2480 <gc_execute_block+0x33a>
    247e:	91 c0       	rjmp	.+290    	; 0x25a2 <gc_execute_block+0x45c>
    2480:	3a c0       	rjmp	.+116    	; 0x24f6 <gc_execute_block+0x3b0>
    2482:	80 2f       	mov	r24, r16
    2484:	88 55       	subi	r24, 0x58	; 88
    2486:	83 30       	cpi	r24, 0x03	; 3
    2488:	08 f0       	brcs	.+2      	; 0x248c <gc_execute_block+0x346>
    248a:	8b c0       	rjmp	.+278    	; 0x25a2 <gc_execute_block+0x45c>
    248c:	48 c0       	rjmp	.+144    	; 0x251e <gc_execute_block+0x3d8>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    248e:	80 91 3a 21 	lds	r24, 0x213A
    2492:	88 23       	and	r24, r24
    2494:	49 f0       	breq	.+18     	; 0x24a8 <gc_execute_block+0x362>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    2496:	20 93 53 21 	sts	0x2153, r18
    249a:	30 93 54 21 	sts	0x2154, r19
    249e:	40 93 55 21 	sts	0x2155, r20
    24a2:	50 93 56 21 	sts	0x2156, r21
    24a6:	7d c0       	rjmp	.+250    	; 0x25a2 <gc_execute_block+0x45c>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    24a8:	ca 01       	movw	r24, r20
    24aa:	b9 01       	movw	r22, r18
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e7       	ldi	r20, 0x70	; 112
    24b2:	52 e4       	ldi	r21, 0x42	; 66
    24b4:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    24b8:	60 93 47 21 	sts	0x2147, r22
    24bc:	70 93 48 21 	sts	0x2148, r23
    24c0:	80 93 49 21 	sts	0x2149, r24
    24c4:	90 93 4a 21 	sts	0x214A, r25
    24c8:	6c c0       	rjmp	.+216    	; 0x25a2 <gc_execute_block+0x45c>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    24ca:	e0 2f       	mov	r30, r16
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	ee 0f       	add	r30, r30
    24d0:	ff 1f       	adc	r31, r31
    24d2:	ee 0f       	add	r30, r30
    24d4:	ff 1f       	adc	r31, r31
    24d6:	e5 5b       	subi	r30, 0xB5	; 181
    24d8:	ff 4d       	sbci	r31, 0xDF	; 223
    24da:	20 83       	st	Z, r18
    24dc:	31 83       	std	Z+1, r19	; 0x01
    24de:	42 83       	std	Z+2, r20	; 0x02
    24e0:	53 83       	std	Z+3, r21	; 0x03
    24e2:	5f c0       	rjmp	.+190    	; 0x25a2 <gc_execute_block+0x45c>
			case 'P': gc.dwell_time = gc.value; break;
    24e4:	c0 92 3f 21 	sts	0x213F, r12
    24e8:	d0 92 40 21 	sts	0x2140, r13
    24ec:	e0 92 41 21 	sts	0x2141, r14
    24f0:	f0 92 42 21 	sts	0x2142, r15
    24f4:	56 c0       	rjmp	.+172    	; 0x25a2 <gc_execute_block+0x45c>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    24f6:	20 93 43 21 	sts	0x2143, r18
    24fa:	30 93 44 21 	sts	0x2144, r19
    24fe:	40 93 45 21 	sts	0x2145, r20
    2502:	50 93 46 21 	sts	0x2146, r21
    2506:	70 92 3d 21 	sts	0x213D, r7
    250a:	4b c0       	rjmp	.+150    	; 0x25a2 <gc_execute_block+0x45c>
			case 'S': gc.spindle_speed = gc.value; break;
    250c:	c7 01       	movw	r24, r14
    250e:	b6 01       	movw	r22, r12
    2510:	0e 94 4e 44 	call	0x889c	; 0x889c <__fixsfsi>
    2514:	60 93 80 21 	sts	0x2180, r22
    2518:	70 93 81 21 	sts	0x2181, r23
    251c:	42 c0       	rjmp	.+132    	; 0x25a2 <gc_execute_block+0x45c>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    251e:	80 91 3e 21 	lds	r24, 0x213E
    2522:	88 23       	and	r24, r24
    2524:	69 f0       	breq	.+26     	; 0x2540 <gc_execute_block+0x3fa>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    2526:	e0 2f       	mov	r30, r16
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	ee 0f       	add	r30, r30
    252c:	ff 1f       	adc	r31, r31
    252e:	ee 0f       	add	r30, r30
    2530:	ff 1f       	adc	r31, r31
    2532:	e2 53       	subi	r30, 0x32	; 50
    2534:	f0 4e       	sbci	r31, 0xE0	; 224
    2536:	21 a7       	std	Z+41, r18	; 0x29
    2538:	32 a7       	std	Z+42, r19	; 0x2a
    253a:	43 a7       	std	Z+43, r20	; 0x2b
    253c:	54 a7       	std	Z+44, r21	; 0x2c
    253e:	31 c0       	rjmp	.+98     	; 0x25a2 <gc_execute_block+0x45c>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2540:	80 91 3c 21 	lds	r24, 0x213C
    2544:	88 23       	and	r24, r24
    2546:	21 f4       	brne	.+8      	; 0x2550 <gc_execute_block+0x40a>
    2548:	80 91 82 21 	lds	r24, 0x2182
    254c:	88 23       	and	r24, r24
    254e:	69 f0       	breq	.+26     	; 0x256a <gc_execute_block+0x424>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    2550:	e0 2f       	mov	r30, r16
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	ee 0f       	add	r30, r30
    2556:	ff 1f       	adc	r31, r31
    2558:	ee 0f       	add	r30, r30
    255a:	ff 1f       	adc	r31, r31
    255c:	e2 53       	subi	r30, 0x32	; 50
    255e:	f0 4e       	sbci	r31, 0xE0	; 224
    2560:	25 ab       	std	Z+53, r18	; 0x35
    2562:	36 ab       	std	Z+54, r19	; 0x36
    2564:	47 ab       	std	Z+55, r20	; 0x37
    2566:	50 af       	std	Z+56, r21	; 0x38
    2568:	1c c0       	rjmp	.+56     	; 0x25a2 <gc_execute_block+0x45c>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    256a:	10 e0       	ldi	r17, 0x00	; 0
    256c:	00 0f       	add	r16, r16
    256e:	11 1f       	adc	r17, r17
    2570:	00 0f       	add	r16, r16
    2572:	11 1f       	adc	r17, r17
    2574:	02 53       	subi	r16, 0x32	; 50
    2576:	10 4e       	sbci	r17, 0xE0	; 224
    2578:	f8 01       	movw	r30, r16
    257a:	65 a9       	ldd	r22, Z+53	; 0x35
    257c:	76 a9       	ldd	r23, Z+54	; 0x36
    257e:	87 a9       	ldd	r24, Z+55	; 0x37
    2580:	90 ad       	ldd	r25, Z+56	; 0x38
    2582:	0e 94 40 43 	call	0x8680	; 0x8680 <__addsf3>
    2586:	d8 01       	movw	r26, r16
    2588:	d5 96       	adiw	r26, 0x35	; 53
    258a:	6d 93       	st	X+, r22
    258c:	7d 93       	st	X+, r23
    258e:	8d 93       	st	X+, r24
    2590:	9c 93       	st	X, r25
    2592:	d8 97       	sbiw	r26, 0x38	; 56
    2594:	06 c0       	rjmp	.+12     	; 0x25a2 <gc_execute_block+0x45c>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2596:	5e 01       	movw	r10, r28
    2598:	08 94       	sec
    259a:	a1 1c       	adc	r10, r1
    259c:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    259e:	77 24       	eor	r7, r7
    25a0:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    25a2:	8f e2       	ldi	r24, 0x2F	; 47
    25a4:	91 e2       	ldi	r25, 0x21	; 33
    25a6:	60 e3       	ldi	r22, 0x30	; 48
    25a8:	71 e2       	ldi	r23, 0x21	; 33
    25aa:	44 e3       	ldi	r20, 0x34	; 52
    25ac:	51 e2       	ldi	r21, 0x21	; 33
    25ae:	94 01       	movw	r18, r8
    25b0:	85 01       	movw	r16, r10
    25b2:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_gc_next_statement>
    25b6:	89 2b       	or	r24, r25
    25b8:	09 f0       	breq	.+2      	; 0x25bc <gc_execute_block+0x476>
    25ba:	27 cf       	rjmp	.-434    	; 0x240a <gc_execute_block+0x2c4>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    25bc:	80 91 2e 21 	lds	r24, 0x212E
    25c0:	88 23       	and	r24, r24
    25c2:	09 f0       	breq	.+2      	; 0x25c6 <gc_execute_block+0x480>
    25c4:	ad c2       	rjmp	.+1370   	; 0x2b20 <gc_execute_block+0x9da>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    25c6:	80 91 7f 21 	lds	r24, 0x217F
    25ca:	88 23       	and	r24, r24
    25cc:	71 f0       	breq	.+28     	; 0x25ea <gc_execute_block+0x4a4>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    25ce:	40 91 80 21 	lds	r20, 0x2180
    25d2:	50 91 81 21 	lds	r21, 0x2181
    25d6:	66 27       	eor	r22, r22
    25d8:	57 fd       	sbrc	r21, 7
    25da:	60 95       	com	r22
    25dc:	76 2f       	mov	r23, r22
    25de:	99 27       	eor	r25, r25
    25e0:	87 fd       	sbrc	r24, 7
    25e2:	90 95       	com	r25
    25e4:	0e 94 8a 23 	call	0x4714	; 0x4714 <spindle_run>
    25e8:	02 c0       	rjmp	.+4      	; 0x25ee <gc_execute_block+0x4a8>
	} else {
		spindle_stop();
    25ea:	0e 94 9a 23 	call	0x4734	; 0x4734 <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    25ee:	80 91 83 21 	lds	r24, 0x2183
    25f2:	81 30       	cpi	r24, 0x01	; 1
    25f4:	41 f0       	breq	.+16     	; 0x2606 <gc_execute_block+0x4c0>
    25f6:	81 30       	cpi	r24, 0x01	; 1
    25f8:	c8 f0       	brcs	.+50     	; 0x262c <gc_execute_block+0x4e6>
    25fa:	82 30       	cpi	r24, 0x02	; 2
    25fc:	09 f0       	breq	.+2      	; 0x2600 <gc_execute_block+0x4ba>
    25fe:	81 c2       	rjmp	.+1282   	; 0x2b02 <gc_execute_block+0x9bc>
    	case NEXT_ACTION_GO_HOME: mc_go_home(); break;
    2600:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <mc_go_home>
    2604:	7e c2       	rjmp	.+1276   	; 0x2b02 <gc_execute_block+0x9bc>
		case NEXT_ACTION_DWELL: mc_dwell(trunc(gc.dwell_time*1000)); break;
    2606:	60 91 3f 21 	lds	r22, 0x213F
    260a:	70 91 40 21 	lds	r23, 0x2140
    260e:	80 91 41 21 	lds	r24, 0x2141
    2612:	90 91 42 21 	lds	r25, 0x2142
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	4a e7       	ldi	r20, 0x7A	; 122
    261c:	54 e4       	ldi	r21, 0x44	; 68
    261e:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    2622:	0e 94 53 44 	call	0x88a6	; 0x88a6 <__fixunssfsi>
    2626:	0e 94 6d 1b 	call	0x36da	; 0x36da <mc_dwell>
    262a:	6b c2       	rjmp	.+1238   	; 0x2b02 <gc_execute_block+0x9bc>
		case NEXT_ACTION_DEFAULT: 
 		switch (gc.motion_mode) {
    262c:	b0 91 39 21 	lds	r27, 0x2139
    2630:	b8 8f       	std	Y+24, r27	; 0x18
    2632:	b2 30       	cpi	r27, 0x02	; 2
    2634:	20 f0       	brcs	.+8      	; 0x263e <gc_execute_block+0x4f8>
    2636:	b4 30       	cpi	r27, 0x04	; 4
    2638:	08 f0       	brcs	.+2      	; 0x263c <gc_execute_block+0x4f6>
    263a:	63 c2       	rjmp	.+1222   	; 0x2b02 <gc_execute_block+0x9bc>
    263c:	31 c0       	rjmp	.+98     	; 0x26a0 <gc_execute_block+0x55a>
			case MOTION_MODE_CANCEL: break;
			case MOTION_MODE_RAPID_LINEAR:
			case MOTION_MODE_LINEAR:
				gc.status = mc_line_nonblock(gc.target[X_AXIS], 
    263e:	60 91 63 21 	lds	r22, 0x2163
    2642:	70 91 64 21 	lds	r23, 0x2164
    2646:	80 91 65 21 	lds	r24, 0x2165
    264a:	90 91 66 21 	lds	r25, 0x2166
    264e:	20 91 67 21 	lds	r18, 0x2167
    2652:	30 91 68 21 	lds	r19, 0x2168
    2656:	40 91 69 21 	lds	r20, 0x2169
    265a:	50 91 6a 21 	lds	r21, 0x216A
    265e:	e0 90 6b 21 	lds	r14, 0x216B
    2662:	f0 90 6c 21 	lds	r15, 0x216C
    2666:	00 91 6d 21 	lds	r16, 0x216D
    266a:	10 91 6e 21 	lds	r17, 0x216E
    266e:	80 90 3a 21 	lds	r8, 0x213A
    2672:	88 20       	and	r8, r8
    2674:	49 f0       	breq	.+18     	; 0x2688 <gc_execute_block+0x542>
    2676:	a0 90 53 21 	lds	r10, 0x2153
    267a:	b0 90 54 21 	lds	r11, 0x2154
    267e:	c0 90 55 21 	lds	r12, 0x2155
    2682:	d0 90 56 21 	lds	r13, 0x2156
    2686:	08 c0       	rjmp	.+16     	; 0x2698 <gc_execute_block+0x552>
    2688:	a0 90 47 21 	lds	r10, 0x2147
    268c:	b0 90 48 21 	lds	r11, 0x2148
    2690:	c0 90 49 21 	lds	r12, 0x2149
    2694:	d0 90 4a 21 	lds	r13, 0x214A
    2698:	99 24       	eor	r9, r9
    269a:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <mc_line_nonblock>
    269e:	16 c1       	rjmp	.+556    	; 0x28cc <gc_execute_block+0x786>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    26a0:	80 91 3d 21 	lds	r24, 0x213D
    26a4:	88 23       	and	r24, r24
    26a6:	09 f4       	brne	.+2      	; 0x26aa <gc_execute_block+0x564>
    26a8:	e8 c0       	rjmp	.+464    	; 0x287a <gc_execute_block+0x734>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    26aa:	e0 91 7b 21 	lds	r30, 0x217B
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	ee 0f       	add	r30, r30
    26b2:	ff 1f       	adc	r31, r31
    26b4:	ee 0f       	add	r30, r30
    26b6:	ff 1f       	adc	r31, r31
    26b8:	e2 5d       	subi	r30, 0xD2	; 210
    26ba:	fe 4d       	sbci	r31, 0xDE	; 222
    26bc:	65 a9       	ldd	r22, Z+53	; 0x35
    26be:	76 a9       	ldd	r23, Z+54	; 0x36
    26c0:	87 a9       	ldd	r24, Z+55	; 0x37
    26c2:	90 ad       	ldd	r25, Z+56	; 0x38
    26c4:	21 a5       	ldd	r18, Z+41	; 0x29
    26c6:	32 a5       	ldd	r19, Z+42	; 0x2a
    26c8:	43 a5       	ldd	r20, Z+43	; 0x2b
    26ca:	54 a5       	ldd	r21, Z+44	; 0x2c
    26cc:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    26d0:	6f 83       	std	Y+7, r22	; 0x07
    26d2:	78 87       	std	Y+8, r23	; 0x08
    26d4:	89 87       	std	Y+9, r24	; 0x09
    26d6:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    26d8:	e0 91 7c 21 	lds	r30, 0x217C
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	ee 0f       	add	r30, r30
    26e0:	ff 1f       	adc	r31, r31
    26e2:	ee 0f       	add	r30, r30
    26e4:	ff 1f       	adc	r31, r31
    26e6:	e2 5d       	subi	r30, 0xD2	; 210
    26e8:	fe 4d       	sbci	r31, 0xDE	; 222
    26ea:	65 a9       	ldd	r22, Z+53	; 0x35
    26ec:	76 a9       	ldd	r23, Z+54	; 0x36
    26ee:	87 a9       	ldd	r24, Z+55	; 0x37
    26f0:	90 ad       	ldd	r25, Z+56	; 0x38
    26f2:	21 a5       	ldd	r18, Z+41	; 0x29
    26f4:	32 a5       	ldd	r19, Z+42	; 0x2a
    26f6:	43 a5       	ldd	r20, Z+43	; 0x2b
    26f8:	54 a5       	ldd	r21, Z+44	; 0x2c
    26fa:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    26fe:	1b 01       	movw	r2, r22
    2700:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    2702:	10 92 6f 21 	sts	0x216F, r1
    2706:	10 92 70 21 	sts	0x2170, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    270a:	60 90 43 21 	lds	r6, 0x2143
    270e:	70 90 44 21 	lds	r7, 0x2144
    2712:	80 90 45 21 	lds	r8, 0x2145
    2716:	90 90 46 21 	lds	r9, 0x2146
    271a:	c4 01       	movw	r24, r8
    271c:	b3 01       	movw	r22, r6
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e8       	ldi	r20, 0x80	; 128
    2724:	50 e4       	ldi	r21, 0x40	; 64
    2726:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    272a:	a4 01       	movw	r20, r8
    272c:	93 01       	movw	r18, r6
    272e:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    2732:	5b 01       	movw	r10, r22
    2734:	6c 01       	movw	r12, r24
    2736:	6f 81       	ldd	r22, Y+7	; 0x07
    2738:	78 85       	ldd	r23, Y+8	; 0x08
    273a:	89 85       	ldd	r24, Y+9	; 0x09
    273c:	9a 85       	ldd	r25, Y+10	; 0x0a
    273e:	9b 01       	movw	r18, r22
    2740:	ac 01       	movw	r20, r24
    2742:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    2746:	7b 01       	movw	r14, r22
    2748:	8c 01       	movw	r16, r24
    274a:	c2 01       	movw	r24, r4
    274c:	b1 01       	movw	r22, r2
    274e:	a2 01       	movw	r20, r4
    2750:	91 01       	movw	r18, r2
    2752:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    2756:	9b 01       	movw	r18, r22
    2758:	ac 01       	movw	r20, r24
    275a:	c8 01       	movw	r24, r16
    275c:	b7 01       	movw	r22, r14
    275e:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    2762:	9b 01       	movw	r18, r22
    2764:	ac 01       	movw	r20, r24
    2766:	c6 01       	movw	r24, r12
    2768:	b5 01       	movw	r22, r10
    276a:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    276e:	0e 94 0e 47 	call	0x8e1c	; 0x8e1c <sqrt>
    2772:	7b 01       	movw	r14, r22
    2774:	8c 01       	movw	r16, r24
    2776:	6f 81       	ldd	r22, Y+7	; 0x07
    2778:	78 85       	ldd	r23, Y+8	; 0x08
    277a:	89 85       	ldd	r24, Y+9	; 0x09
    277c:	9a 85       	ldd	r25, Y+10	; 0x0a
    277e:	a2 01       	movw	r20, r4
    2780:	91 01       	movw	r18, r2
    2782:	0e 94 dc 45 	call	0x8bb8	; 0x8bb8 <hypot>
    2786:	9b 01       	movw	r18, r22
    2788:	ac 01       	movw	r20, r24
    278a:	17 fb       	bst	r17, 7
    278c:	10 95       	com	r17
    278e:	17 f9       	bld	r17, 7
    2790:	10 95       	com	r17
    2792:	c8 01       	movw	r24, r16
    2794:	b7 01       	movw	r22, r14
    2796:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    279a:	7b 01       	movw	r14, r22
    279c:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    279e:	a8 01       	movw	r20, r16
    27a0:	97 01       	movw	r18, r14
    27a2:	0e 94 56 47 	call	0x8eac	; 0x8eac <__unordsf2>
    27a6:	88 23       	and	r24, r24
    27a8:	11 f0       	breq	.+4      	; 0x27ae <gc_execute_block+0x668>
		FAIL(TG_FLOATING_POINT_ERROR); 
    27aa:	8d e0       	ldi	r24, 0x0D	; 13
    27ac:	8f c0       	rjmp	.+286    	; 0x28cc <gc_execute_block+0x786>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    27ae:	e8 8d       	ldd	r30, Y+24	; 0x18
    27b0:	e3 30       	cpi	r30, 0x03	; 3
    27b2:	21 f4       	brne	.+8      	; 0x27bc <gc_execute_block+0x676>
		h_x2_div_d = -h_x2_div_d;
    27b4:	17 fb       	bst	r17, 7
    27b6:	10 95       	com	r17
    27b8:	17 f9       	bld	r17, 7
    27ba:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    27bc:	c4 01       	movw	r24, r8
    27be:	b3 01       	movw	r22, r6
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	50 e0       	ldi	r21, 0x00	; 0
    27c8:	0e 94 df 43 	call	0x87be	; 0x87be <__cmpsf2>
    27cc:	88 23       	and	r24, r24
    27ce:	24 f4       	brge	.+8      	; 0x27d8 <gc_execute_block+0x692>
		h_x2_div_d = -h_x2_div_d; 
    27d0:	17 fb       	bst	r17, 7
    27d2:	10 95       	com	r17
    27d4:	17 f9       	bld	r17, 7
    27d6:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    27d8:	80 91 7b 21 	lds	r24, 0x217B
    27dc:	c8 2e       	mov	r12, r24
    27de:	dd 24       	eor	r13, r13
    27e0:	cc 0c       	add	r12, r12
    27e2:	dd 1c       	adc	r13, r13
    27e4:	cc 0c       	add	r12, r12
    27e6:	dd 1c       	adc	r13, r13
    27e8:	2f e6       	ldi	r18, 0x6F	; 111
    27ea:	31 e2       	ldi	r19, 0x21	; 33
    27ec:	c2 0e       	add	r12, r18
    27ee:	d3 1e       	adc	r13, r19
    27f0:	c2 01       	movw	r24, r4
    27f2:	b1 01       	movw	r22, r2
    27f4:	a8 01       	movw	r20, r16
    27f6:	97 01       	movw	r18, r14
    27f8:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    27fc:	9b 01       	movw	r18, r22
    27fe:	ac 01       	movw	r20, r24
    2800:	6f 81       	ldd	r22, Y+7	; 0x07
    2802:	78 85       	ldd	r23, Y+8	; 0x08
    2804:	89 85       	ldd	r24, Y+9	; 0x09
    2806:	9a 85       	ldd	r25, Y+10	; 0x0a
    2808:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	5f e3       	ldi	r21, 0x3F	; 63
    2814:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    2818:	d6 01       	movw	r26, r12
    281a:	6d 93       	st	X+, r22
    281c:	7d 93       	st	X+, r23
    281e:	8d 93       	st	X+, r24
    2820:	9c 93       	st	X, r25
    2822:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    2824:	80 91 7c 21 	lds	r24, 0x217C
    2828:	c8 2e       	mov	r12, r24
    282a:	dd 24       	eor	r13, r13
    282c:	cc 0c       	add	r12, r12
    282e:	dd 1c       	adc	r13, r13
    2830:	cc 0c       	add	r12, r12
    2832:	dd 1c       	adc	r13, r13
    2834:	ef e6       	ldi	r30, 0x6F	; 111
    2836:	f1 e2       	ldi	r31, 0x21	; 33
    2838:	ce 0e       	add	r12, r30
    283a:	df 1e       	adc	r13, r31
    283c:	6f 81       	ldd	r22, Y+7	; 0x07
    283e:	78 85       	ldd	r23, Y+8	; 0x08
    2840:	89 85       	ldd	r24, Y+9	; 0x09
    2842:	9a 85       	ldd	r25, Y+10	; 0x0a
    2844:	a8 01       	movw	r20, r16
    2846:	97 01       	movw	r18, r14
    2848:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    284c:	9b 01       	movw	r18, r22
    284e:	ac 01       	movw	r20, r24
    2850:	c2 01       	movw	r24, r4
    2852:	b1 01       	movw	r22, r2
    2854:	0e 94 40 43 	call	0x8680	; 0x8680 <__addsf3>
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e0       	ldi	r20, 0x00	; 0
    285e:	5f e3       	ldi	r21, 0x3F	; 63
    2860:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    2864:	d6 01       	movw	r26, r12
    2866:	6d 93       	st	X+, r22
    2868:	7d 93       	st	X+, r23
    286a:	8d 93       	st	X+, r24
    286c:	9c 93       	st	X, r25
    286e:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    2870:	80 91 2e 21 	lds	r24, 0x212E
    2874:	88 23       	and	r24, r24
    2876:	09 f0       	breq	.+2      	; 0x287a <gc_execute_block+0x734>
    2878:	44 c1       	rjmp	.+648    	; 0x2b02 <gc_execute_block+0x9bc>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    287a:	e0 91 7b 21 	lds	r30, 0x217B
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	ee 0f       	add	r30, r30
    2882:	ff 1f       	adc	r31, r31
    2884:	ee 0f       	add	r30, r30
    2886:	ff 1f       	adc	r31, r31
    2888:	e1 59       	subi	r30, 0x91	; 145
    288a:	fe 4d       	sbci	r31, 0xDE	; 222
    288c:	60 81       	ld	r22, Z
    288e:	71 81       	ldd	r23, Z+1	; 0x01
    2890:	82 81       	ldd	r24, Z+2	; 0x02
    2892:	93 81       	ldd	r25, Z+3	; 0x03
    2894:	90 58       	subi	r25, 0x80	; 128
    2896:	e0 91 7c 21 	lds	r30, 0x217C
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	ee 0f       	add	r30, r30
    289e:	ff 1f       	adc	r31, r31
    28a0:	ee 0f       	add	r30, r30
    28a2:	ff 1f       	adc	r31, r31
    28a4:	e1 59       	subi	r30, 0x91	; 145
    28a6:	fe 4d       	sbci	r31, 0xDE	; 222
    28a8:	20 81       	ld	r18, Z
    28aa:	31 81       	ldd	r19, Z+1	; 0x01
    28ac:	42 81       	ldd	r20, Z+2	; 0x02
    28ae:	53 81       	ldd	r21, Z+3	; 0x03
    28b0:	50 58       	subi	r21, 0x80	; 128
    28b2:	0e 94 64 10 	call	0x20c8	; 0x20c8 <theta>
    28b6:	6f 87       	std	Y+15, r22	; 0x0f
    28b8:	78 8b       	std	Y+16, r23	; 0x10
    28ba:	89 8b       	std	Y+17, r24	; 0x11
    28bc:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    28be:	9b 01       	movw	r18, r22
    28c0:	ac 01       	movw	r20, r24
    28c2:	0e 94 56 47 	call	0x8eac	; 0x8eac <__unordsf2>
    28c6:	88 23       	and	r24, r24
    28c8:	21 f0       	breq	.+8      	; 0x28d2 <gc_execute_block+0x78c>
		FAIL(TG_ARC_ERROR); 
    28ca:	8f e0       	ldi	r24, 0x0F	; 15
    28cc:	80 93 2e 21 	sts	0x212E, r24
    28d0:	18 c1       	rjmp	.+560    	; 0x2b02 <gc_execute_block+0x9bc>
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    28d2:	e0 91 7b 21 	lds	r30, 0x217B
    28d6:	0e 2f       	mov	r16, r30
    28d8:	10 e0       	ldi	r17, 0x00	; 0
    28da:	e0 91 7c 21 	lds	r30, 0x217C
    28de:	ce 2e       	mov	r12, r30
    28e0:	dd 24       	eor	r13, r13
    28e2:	00 0f       	add	r16, r16
    28e4:	11 1f       	adc	r17, r17
    28e6:	00 0f       	add	r16, r16
    28e8:	11 1f       	adc	r17, r17
    28ea:	02 5d       	subi	r16, 0xD2	; 210
    28ec:	1e 4d       	sbci	r17, 0xDE	; 222
    28ee:	f8 01       	movw	r30, r16
    28f0:	ef 5b       	subi	r30, 0xBF	; 191
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	d8 01       	movw	r26, r16
    28f6:	d5 96       	adiw	r26, 0x35	; 53
    28f8:	6d 91       	ld	r22, X+
    28fa:	7d 91       	ld	r23, X+
    28fc:	8d 91       	ld	r24, X+
    28fe:	9c 91       	ld	r25, X
    2900:	d8 97       	sbiw	r26, 0x38	; 56
    2902:	20 81       	ld	r18, Z
    2904:	31 81       	ldd	r19, Z+1	; 0x01
    2906:	42 81       	ldd	r20, Z+2	; 0x02
    2908:	53 81       	ldd	r21, Z+3	; 0x03
    290a:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    290e:	f8 01       	movw	r30, r16
    2910:	21 a5       	ldd	r18, Z+41	; 0x29
    2912:	32 a5       	ldd	r19, Z+42	; 0x2a
    2914:	43 a5       	ldd	r20, Z+43	; 0x2b
    2916:	54 a5       	ldd	r21, Z+44	; 0x2c
    2918:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    291c:	7b 01       	movw	r14, r22
    291e:	8c 01       	movw	r16, r24
    2920:	cc 0c       	add	r12, r12
    2922:	dd 1c       	adc	r13, r13
    2924:	cc 0c       	add	r12, r12
    2926:	dd 1c       	adc	r13, r13
    2928:	2e e2       	ldi	r18, 0x2E	; 46
    292a:	31 e2       	ldi	r19, 0x21	; 33
    292c:	c2 0e       	add	r12, r18
    292e:	d3 1e       	adc	r13, r19
    2930:	f6 01       	movw	r30, r12
    2932:	ef 5b       	subi	r30, 0xBF	; 191
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	d6 01       	movw	r26, r12
    2938:	d5 96       	adiw	r26, 0x35	; 53
    293a:	6d 91       	ld	r22, X+
    293c:	7d 91       	ld	r23, X+
    293e:	8d 91       	ld	r24, X+
    2940:	9c 91       	ld	r25, X
    2942:	d8 97       	sbiw	r26, 0x38	; 56
    2944:	20 81       	ld	r18, Z
    2946:	31 81       	ldd	r19, Z+1	; 0x01
    2948:	42 81       	ldd	r20, Z+2	; 0x02
    294a:	53 81       	ldd	r21, Z+3	; 0x03
    294c:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    2950:	f6 01       	movw	r30, r12
    2952:	21 a5       	ldd	r18, Z+41	; 0x29
    2954:	32 a5       	ldd	r19, Z+42	; 0x2a
    2956:	43 a5       	ldd	r20, Z+43	; 0x2b
    2958:	54 a5       	ldd	r21, Z+44	; 0x2c
    295a:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    295e:	9b 01       	movw	r18, r22
    2960:	ac 01       	movw	r20, r24
    2962:	c8 01       	movw	r24, r16
    2964:	b7 01       	movw	r22, r14
    2966:	0e 94 64 10 	call	0x20c8	; 0x20c8 <theta>
    296a:	7b 01       	movw	r14, r22
    296c:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    296e:	a8 01       	movw	r20, r16
    2970:	97 01       	movw	r18, r14
    2972:	0e 94 56 47 	call	0x8eac	; 0x8eac <__unordsf2>
    2976:	88 23       	and	r24, r24
    2978:	09 f0       	breq	.+2      	; 0x297c <gc_execute_block+0x836>
    297a:	a7 cf       	rjmp	.-178    	; 0x28ca <gc_execute_block+0x784>
		FAIL(TG_ARC_ERROR); 
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    297c:	c8 01       	movw	r24, r16
    297e:	b7 01       	movw	r22, r14
    2980:	2f 85       	ldd	r18, Y+15	; 0x0f
    2982:	38 89       	ldd	r19, Y+16	; 0x10
    2984:	49 89       	ldd	r20, Y+17	; 0x11
    2986:	5a 89       	ldd	r21, Y+18	; 0x12
    2988:	0e 94 df 43 	call	0x87be	; 0x87be <__cmpsf2>
    298c:	88 23       	and	r24, r24
    298e:	54 f4       	brge	.+20     	; 0x29a4 <gc_execute_block+0x85e>
		theta_end += 2*M_PI;
    2990:	c8 01       	movw	r24, r16
    2992:	b7 01       	movw	r22, r14
    2994:	2b ed       	ldi	r18, 0xDB	; 219
    2996:	3f e0       	ldi	r19, 0x0F	; 15
    2998:	49 ec       	ldi	r20, 0xC9	; 201
    299a:	50 e4       	ldi	r21, 0x40	; 64
    299c:	0e 94 40 43 	call	0x8680	; 0x8680 <__addsf3>
    29a0:	7b 01       	movw	r14, r22
    29a2:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    29a4:	c8 01       	movw	r24, r16
    29a6:	b7 01       	movw	r22, r14
    29a8:	2f 85       	ldd	r18, Y+15	; 0x0f
    29aa:	38 89       	ldd	r19, Y+16	; 0x10
    29ac:	49 89       	ldd	r20, Y+17	; 0x11
    29ae:	5a 89       	ldd	r21, Y+18	; 0x12
    29b0:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    29b4:	6b 87       	std	Y+11, r22	; 0x0b
    29b6:	7c 87       	std	Y+12, r23	; 0x0c
    29b8:	8d 87       	std	Y+13, r24	; 0x0d
    29ba:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    29bc:	80 91 39 21 	lds	r24, 0x2139
    29c0:	83 30       	cpi	r24, 0x03	; 3
    29c2:	71 f4       	brne	.+28     	; 0x29e0 <gc_execute_block+0x89a>
		angular_travel = angular_travel - 2*M_PI;
    29c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    29cc:	2b ed       	ldi	r18, 0xDB	; 219
    29ce:	3f e0       	ldi	r19, 0x0F	; 15
    29d0:	49 ec       	ldi	r20, 0xC9	; 201
    29d2:	50 e4       	ldi	r21, 0x40	; 64
    29d4:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    29d8:	6b 87       	std	Y+11, r22	; 0x0b
    29da:	7c 87       	std	Y+12, r23	; 0x0c
    29dc:	8d 87       	std	Y+13, r24	; 0x0d
    29de:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    29e0:	80 91 7b 21 	lds	r24, 0x217B
    29e4:	28 2f       	mov	r18, r24
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	2d 83       	std	Y+5, r18	; 0x05
    29ea:	3e 83       	std	Y+6, r19	; 0x06
    29ec:	f9 01       	movw	r30, r18
    29ee:	ee 0f       	add	r30, r30
    29f0:	ff 1f       	adc	r31, r31
    29f2:	ee 0f       	add	r30, r30
    29f4:	ff 1f       	adc	r31, r31
    29f6:	e1 59       	subi	r30, 0x91	; 145
    29f8:	fe 4d       	sbci	r31, 0xDE	; 222
    29fa:	e0 80       	ld	r14, Z
    29fc:	f1 80       	ldd	r15, Z+1	; 0x01
    29fe:	02 81       	ldd	r16, Z+2	; 0x02
    2a00:	13 81       	ldd	r17, Z+3	; 0x03
    2a02:	80 91 7c 21 	lds	r24, 0x217C
    2a06:	a8 2f       	mov	r26, r24
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	ab 83       	std	Y+3, r26	; 0x03
    2a0c:	bc 83       	std	Y+4, r27	; 0x04
    2a0e:	fd 01       	movw	r30, r26
    2a10:	ee 0f       	add	r30, r30
    2a12:	ff 1f       	adc	r31, r31
    2a14:	ee 0f       	add	r30, r30
    2a16:	ff 1f       	adc	r31, r31
    2a18:	e1 59       	subi	r30, 0x91	; 145
    2a1a:	fe 4d       	sbci	r31, 0xDE	; 222
    2a1c:	20 81       	ld	r18, Z
    2a1e:	31 81       	ldd	r19, Z+1	; 0x01
    2a20:	42 81       	ldd	r20, Z+2	; 0x02
    2a22:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2a24:	80 91 7d 21 	lds	r24, 0x217D
    2a28:	28 2e       	mov	r2, r24
    2a2a:	33 24       	eor	r3, r3
    2a2c:	f1 01       	movw	r30, r2
    2a2e:	ee 0f       	add	r30, r30
    2a30:	ff 1f       	adc	r31, r31
    2a32:	ee 0f       	add	r30, r30
    2a34:	ff 1f       	adc	r31, r31
    2a36:	e2 5d       	subi	r30, 0xD2	; 210
    2a38:	fe 4d       	sbci	r31, 0xDE	; 222
    2a3a:	85 a9       	ldd	r24, Z+53	; 0x35
    2a3c:	96 a9       	ldd	r25, Z+54	; 0x36
    2a3e:	a7 a9       	ldd	r26, Z+55	; 0x37
    2a40:	b0 ad       	ldd	r27, Z+56	; 0x38
    2a42:	8c 8b       	std	Y+20, r24	; 0x14
    2a44:	9d 8b       	std	Y+21, r25	; 0x15
    2a46:	ae 8b       	std	Y+22, r26	; 0x16
    2a48:	bf 8b       	std	Y+23, r27	; 0x17
    2a4a:	a1 a4       	ldd	r10, Z+41	; 0x29
    2a4c:	b2 a4       	ldd	r11, Z+42	; 0x2a
    2a4e:	c3 a4       	ldd	r12, Z+43	; 0x2b
    2a50:	d4 a4       	ldd	r13, Z+44	; 0x2c

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    2a52:	90 91 3a 21 	lds	r25, 0x213A
    2a56:	9b 8b       	std	Y+19, r25	; 0x13
    2a58:	99 23       	and	r25, r25
    2a5a:	49 f0       	breq	.+18     	; 0x2a6e <gc_execute_block+0x928>
    2a5c:	40 90 53 21 	lds	r4, 0x2153
    2a60:	50 90 54 21 	lds	r5, 0x2154
    2a64:	60 90 55 21 	lds	r6, 0x2155
    2a68:	70 90 56 21 	lds	r7, 0x2156
    2a6c:	08 c0       	rjmp	.+16     	; 0x2a7e <gc_execute_block+0x938>
    2a6e:	40 90 47 21 	lds	r4, 0x2147
    2a72:	50 90 48 21 	lds	r5, 0x2148
    2a76:	60 90 49 21 	lds	r6, 0x2149
    2a7a:	70 90 4a 21 	lds	r7, 0x214A
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2a7e:	c8 01       	movw	r24, r16
    2a80:	b7 01       	movw	r22, r14
    2a82:	0e 94 dc 45 	call	0x8bb8	; 0x8bb8 <hypot>
    2a86:	7b 01       	movw	r14, r22
    2a88:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    2a8a:	ad b7       	in	r26, 0x3d	; 61
    2a8c:	be b7       	in	r27, 0x3e	; 62
    2a8e:	1a 97       	sbiw	r26, 0x0a	; 10
    2a90:	ad bf       	out	0x3d, r26	; 61
    2a92:	be bf       	out	0x3e, r27	; 62
    2a94:	8d b6       	in	r8, 0x3d	; 61
    2a96:	9e b6       	in	r9, 0x3e	; 62
    2a98:	08 94       	sec
    2a9a:	81 1c       	adc	r8, r1
    2a9c:	91 1c       	adc	r9, r1
    2a9e:	6c 89       	ldd	r22, Y+20	; 0x14
    2aa0:	7d 89       	ldd	r23, Y+21	; 0x15
    2aa2:	8e 89       	ldd	r24, Y+22	; 0x16
    2aa4:	9f 89       	ldd	r25, Y+23	; 0x17
    2aa6:	a6 01       	movw	r20, r12
    2aa8:	95 01       	movw	r18, r10
    2aaa:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    2aae:	5b 01       	movw	r10, r22
    2ab0:	6c 01       	movw	r12, r24
    2ab2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ab4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ab6:	f4 01       	movw	r30, r8
    2ab8:	20 83       	st	Z, r18
    2aba:	31 83       	std	Z+1, r19	; 0x01
    2abc:	22 82       	std	Z+2, r2	; 0x02
    2abe:	33 82       	std	Z+3, r3	; 0x03
    2ac0:	d4 01       	movw	r26, r8
    2ac2:	14 96       	adiw	r26, 0x04	; 4
    2ac4:	4d 92       	st	X+, r4
    2ac6:	5d 92       	st	X+, r5
    2ac8:	6d 92       	st	X+, r6
    2aca:	7c 92       	st	X, r7
    2acc:	17 97       	sbiw	r26, 0x07	; 7
    2ace:	eb 89       	ldd	r30, Y+19	; 0x13
    2ad0:	18 96       	adiw	r26, 0x08	; 8
    2ad2:	ec 93       	st	X, r30
    2ad4:	18 97       	sbiw	r26, 0x08	; 8
    2ad6:	19 96       	adiw	r26, 0x09	; 9
    2ad8:	1c 92       	st	X, r1
    2ada:	6f 85       	ldd	r22, Y+15	; 0x0f
    2adc:	78 89       	ldd	r23, Y+16	; 0x10
    2ade:	89 89       	ldd	r24, Y+17	; 0x11
    2ae0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ae2:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ae4:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ae6:	4d 85       	ldd	r20, Y+13	; 0x0d
    2ae8:	5e 85       	ldd	r21, Y+14	; 0x0e
    2aea:	8d 80       	ldd	r8, Y+5	; 0x05
    2aec:	9e 80       	ldd	r9, Y+6	; 0x06
    2aee:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <mc_arc_nonblock>
    2af2:	80 93 2e 21 	sts	0x212E, r24
    2af6:	2d b7       	in	r18, 0x3d	; 61
    2af8:	3e b7       	in	r19, 0x3e	; 62
    2afa:	26 5f       	subi	r18, 0xF6	; 246
    2afc:	3f 4f       	sbci	r19, 0xFF	; 255
    2afe:	2d bf       	out	0x3d, r18	; 61
    2b00:	3e bf       	out	0x3e, r19	; 62
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_CONTINUE)) {
    2b02:	80 91 2e 21 	lds	r24, 0x212E
    2b06:	88 23       	and	r24, r24
    2b08:	11 f0       	breq	.+4      	; 0x2b0e <gc_execute_block+0x9c8>
    2b0a:	82 30       	cpi	r24, 0x02	; 2
    2b0c:	49 f4       	brne	.+18     	; 0x2b20 <gc_execute_block+0x9da>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2b0e:	e7 e5       	ldi	r30, 0x57	; 87
    2b10:	f1 e2       	ldi	r31, 0x21	; 33
    2b12:	df 01       	movw	r26, r30
    2b14:	1c 96       	adiw	r26, 0x0c	; 12
    2b16:	9c e0       	ldi	r25, 0x0C	; 12
    2b18:	0d 90       	ld	r0, X+
    2b1a:	01 92       	st	Z+, r0
    2b1c:	91 50       	subi	r25, 0x01	; 1
    2b1e:	e1 f7       	brne	.-8      	; 0x2b18 <gc_execute_block+0x9d2>
	};
	return(gc.status);
}
    2b20:	68 96       	adiw	r28, 0x18	; 24
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	1f 91       	pop	r17
    2b2c:	0f 91       	pop	r16
    2b2e:	ff 90       	pop	r15
    2b30:	ef 90       	pop	r14
    2b32:	df 90       	pop	r13
    2b34:	cf 90       	pop	r12
    2b36:	bf 90       	pop	r11
    2b38:	af 90       	pop	r10
    2b3a:	9f 90       	pop	r9
    2b3c:	8f 90       	pop	r8
    2b3e:	7f 90       	pop	r7
    2b40:	6f 90       	pop	r6
    2b42:	5f 90       	pop	r5
    2b44:	4f 90       	pop	r4
    2b46:	3f 90       	pop	r3
    2b48:	2f 90       	pop	r2
    2b4a:	08 95       	ret

00002b4c <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	ec 01       	movw	r28, r24
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	10 c0       	rjmp	.+32     	; 0x2b78 <gc_gcode_parser+0x2c>
	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    2b58:	e1 32       	cpi	r30, 0x21	; 33
    2b5a:	70 f0       	brcs	.+28     	; 0x2b78 <gc_gcode_parser+0x2c>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    2b5c:	8e 2f       	mov	r24, r30
    2b5e:	81 56       	subi	r24, 0x61	; 97
    2b60:	a9 2f       	mov	r26, r25
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	9f 5f       	subi	r25, 0xFF	; 255
    2b66:	8a 31       	cpi	r24, 0x1A	; 26
    2b68:	20 f4       	brcc	.+8      	; 0x2b72 <gc_gcode_parser+0x26>
			block[j++] = c-'a'+'A';
    2b6a:	ac 0f       	add	r26, r28
    2b6c:	bd 1f       	adc	r27, r29
    2b6e:	e0 52       	subi	r30, 0x20	; 32
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <gc_gcode_parser+0x2a>
		} else {
			block[j++] = c;
    2b72:	ac 0f       	add	r26, r28
    2b74:	bd 1f       	adc	r27, r29
    2b76:	ec 93       	st	X, r30

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e2 0f       	add	r30, r18
    2b7c:	f1 1d       	adc	r31, r1
    2b7e:	e0 81       	ld	r30, Z
    2b80:	2f 5f       	subi	r18, 0xFF	; 255
    2b82:	ee 23       	and	r30, r30
    2b84:	49 f7       	brne	.-46     	; 0x2b58 <gc_gcode_parser+0xc>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    2b86:	fe 01       	movw	r30, r28
    2b88:	e9 0f       	add	r30, r25
    2b8a:	f1 1d       	adc	r31, r1
    2b8c:	10 82       	st	Z, r1
{
	_gc_normalize_gcode_block(block);
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    2b8e:	88 81       	ld	r24, Y
    2b90:	88 32       	cpi	r24, 0x28	; 40
    2b92:	61 f0       	breq	.+24     	; 0x2bac <gc_gcode_parser+0x60>
		return(TG_OK);
	}
	if (block[0] == 'Q') { 					// quit
    2b94:	81 35       	cpi	r24, 0x51	; 81
    2b96:	11 f4       	brne	.+4      	; 0x2b9c <gc_gcode_parser+0x50>
    2b98:	83 e0       	ldi	r24, 0x03	; 3
    2b9a:	09 c0       	rjmp	.+18     	; 0x2bae <gc_gcode_parser+0x62>
		return(TG_QUIT);
	} 
	if (block[0] == '/') { 					// ignore block delete
    2b9c:	8f 32       	cpi	r24, 0x2F	; 47
    2b9e:	31 f0       	breq	.+12     	; 0x2bac <gc_gcode_parser+0x60>
		return(TG_OK);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2ba0:	ce 01       	movw	r24, r28
    2ba2:	0e 94 a3 10 	call	0x2146	; 0x2146 <gc_execute_block>
    2ba6:	80 93 2e 21 	sts	0x212E, r24
    2baa:	01 c0       	rjmp	.+2      	; 0x2bae <gc_gcode_parser+0x62>
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    2bac:	80 e0       	ldi	r24, 0x00	; 0
}
    2bae:	df 91       	pop	r29
    2bb0:	cf 91       	pop	r28
    2bb2:	08 95       	ret

00002bb4 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2bb4:	cf 92       	push	r12
    2bb6:	df 92       	push	r13
    2bb8:	ef 92       	push	r14
    2bba:	ff 92       	push	r15
    2bbc:	0f 93       	push	r16
    2bbe:	1f 93       	push	r17
    2bc0:	cf 93       	push	r28
    2bc2:	df 93       	push	r29
    2bc4:	cd ea       	ldi	r28, 0xAD	; 173
    2bc6:	d4 e2       	ldi	r29, 0x24	; 36
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (int i = X_AXIS; i <= A_AXIS; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2bc8:	68 81       	ld	r22, Y
    2bca:	70 e0       	ldi	r23, 0x00	; 0
    2bcc:	88 27       	eor	r24, r24
    2bce:	77 fd       	sbrc	r23, 7
    2bd0:	80 95       	com	r24
    2bd2:	98 2f       	mov	r25, r24
    2bd4:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    2bd8:	9b 01       	movw	r18, r22
    2bda:	ac 01       	movw	r20, r24
    2bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bde:	78 85       	ldd	r23, Y+8	; 0x08
    2be0:	89 85       	ldd	r24, Y+9	; 0x09
    2be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be4:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    2be8:	9b 01       	movw	r18, r22
    2bea:	ac 01       	movw	r20, r24
    2bec:	60 e0       	ldi	r22, 0x00	; 0
    2bee:	70 e0       	ldi	r23, 0x00	; 0
    2bf0:	84 eb       	ldi	r24, 0xB4	; 180
    2bf2:	93 e4       	ldi	r25, 0x43	; 67
    2bf4:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    2bf8:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bfa:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bfc:	4d 85       	ldd	r20, Y+13	; 0x0d
    2bfe:	5e 85       	ldd	r21, Y+14	; 0x0e
    2c00:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    2c04:	6b 8b       	std	Y+19, r22	; 0x13
    2c06:	7c 8b       	std	Y+20, r23	; 0x14
    2c08:	8d 8b       	std	Y+21, r24	; 0x15
    2c0a:	9e 8b       	std	Y+22, r25	; 0x16
    2c0c:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (int i = X_AXIS; i <= A_AXIS; i++) {
    2c0e:	85 e2       	ldi	r24, 0x25	; 37
    2c10:	cd 30       	cpi	r28, 0x0D	; 13
    2c12:	d8 07       	cpc	r29, r24
    2c14:	c9 f6       	brne	.-78     	; 0x2bc8 <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X_AXIS].feed_steps_sec * 
    2c16:	00 91 ad 24 	lds	r16, 0x24AD
    2c1a:	10 e0       	ldi	r17, 0x00	; 0
    2c1c:	b8 01       	movw	r22, r16
    2c1e:	88 27       	eor	r24, r24
    2c20:	77 fd       	sbrc	r23, 7
    2c22:	80 95       	com	r24
    2c24:	98 2f       	mov	r25, r24
    2c26:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    2c2a:	9b 01       	movw	r18, r22
    2c2c:	ac 01       	movw	r20, r24
    2c2e:	60 91 b4 24 	lds	r22, 0x24B4
    2c32:	70 91 b5 24 	lds	r23, 0x24B5
    2c36:	80 91 b6 24 	lds	r24, 0x24B6
    2c3a:	90 91 b7 24 	lds	r25, 0x24B7
    2c3e:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    2c42:	9b 01       	movw	r18, r22
    2c44:	ac 01       	movw	r20, r24
    2c46:	60 e0       	ldi	r22, 0x00	; 0
    2c48:	70 e0       	ldi	r23, 0x00	; 0
    2c4a:	84 eb       	ldi	r24, 0xB4	; 180
    2c4c:	93 e4       	ldi	r25, 0x43	; 67
    2c4e:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    2c52:	6b 01       	movw	r12, r22
    2c54:	7c 01       	movw	r14, r24
    2c56:	80 91 b2 24 	lds	r24, 0x24B2
    2c5a:	90 91 b3 24 	lds	r25, 0x24B3
    2c5e:	08 9f       	mul	r16, r24
    2c60:	b0 01       	movw	r22, r0
    2c62:	09 9f       	mul	r16, r25
    2c64:	70 0d       	add	r23, r0
    2c66:	18 9f       	mul	r17, r24
    2c68:	70 0d       	add	r23, r0
    2c6a:	11 24       	eor	r1, r1
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	0e 94 7f 44 	call	0x88fe	; 0x88fe <__floatunsisf>
    2c74:	a7 01       	movw	r20, r14
    2c76:	96 01       	movw	r18, r12
    2c78:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    2c7c:	60 93 a5 24 	sts	0x24A5, r22
    2c80:	70 93 a6 24 	sts	0x24A6, r23
    2c84:	80 93 a7 24 	sts	0x24A7, r24
    2c88:	90 93 a8 24 	sts	0x24A8, r25
							  cfg.a[X_AXIS].microstep) / 
							 (360/(cfg.a[X_AXIS].degree_per_step / 
							 	   cfg.a[X_AXIS].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X_AXIS].seek_steps_sec * 
    2c8c:	80 91 b0 24 	lds	r24, 0x24B0
    2c90:	90 91 b1 24 	lds	r25, 0x24B1
    2c94:	08 9f       	mul	r16, r24
    2c96:	b0 01       	movw	r22, r0
    2c98:	09 9f       	mul	r16, r25
    2c9a:	70 0d       	add	r23, r0
    2c9c:	18 9f       	mul	r17, r24
    2c9e:	70 0d       	add	r23, r0
    2ca0:	11 24       	eor	r1, r1
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	0e 94 7f 44 	call	0x88fe	; 0x88fe <__floatunsisf>
    2caa:	a7 01       	movw	r20, r14
    2cac:	96 01       	movw	r18, r12
    2cae:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    2cb2:	60 93 a9 24 	sts	0x24A9, r22
    2cb6:	70 93 aa 24 	sts	0x24AA, r23
    2cba:	80 93 ab 24 	sts	0x24AB, r24
    2cbe:	90 93 ac 24 	sts	0x24AC, r25
							  cfg.a[X_AXIS].microstep) / 
							 (360/(cfg.a[X_AXIS].degree_per_step / 
							 	   cfg.a[X_AXIS].microstep));
}
    2cc2:	df 91       	pop	r29
    2cc4:	cf 91       	pop	r28
    2cc6:	1f 91       	pop	r17
    2cc8:	0f 91       	pop	r16
    2cca:	ff 90       	pop	r15
    2ccc:	ef 90       	pop	r14
    2cce:	df 90       	pop	r13
    2cd0:	cf 90       	pop	r12
    2cd2:	08 95       	ret

00002cd4 <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    2cd4:	ef e9       	ldi	r30, 0x9F	; 159
    2cd6:	f4 e2       	ldi	r31, 0x24	; 36
    2cd8:	84 e6       	ldi	r24, 0x64	; 100
    2cda:	80 93 9f 24 	sts	0x249F, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2cde:	8a e0       	ldi	r24, 0x0A	; 10
    2ce0:	97 ed       	ldi	r25, 0xD7	; 215
    2ce2:	a3 e2       	ldi	r26, 0x23	; 35
    2ce4:	bc e3       	ldi	r27, 0x3C	; 60
    2ce6:	80 93 a1 24 	sts	0x24A1, r24
    2cea:	90 93 a2 24 	sts	0x24A2, r25
    2cee:	a0 93 a3 24 	sts	0x24A3, r26
    2cf2:	b0 93 a4 24 	sts	0x24A4, r27

	cfg.a[X_AXIS].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2cf6:	8c ed       	ldi	r24, 0xDC	; 220
    2cf8:	95 e0       	ldi	r25, 0x05	; 5
    2cfa:	80 93 b0 24 	sts	0x24B0, r24
    2cfe:	90 93 b1 24 	sts	0x24B1, r25
	cfg.a[Y_AXIS].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2d02:	80 93 c8 24 	sts	0x24C8, r24
    2d06:	90 93 c9 24 	sts	0x24C9, r25
	cfg.a[Z_AXIS].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2d0a:	80 93 e0 24 	sts	0x24E0, r24
    2d0e:	90 93 e1 24 	sts	0x24E1, r25
	cfg.a[A_AXIS].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2d12:	80 93 f8 24 	sts	0x24F8, r24
    2d16:	90 93 f9 24 	sts	0x24F9, r25

	cfg.a[X_AXIS].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2d1a:	80 93 b2 24 	sts	0x24B2, r24
    2d1e:	90 93 b3 24 	sts	0x24B3, r25
	cfg.a[Y_AXIS].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2d22:	80 93 ca 24 	sts	0x24CA, r24
    2d26:	90 93 cb 24 	sts	0x24CB, r25
	cfg.a[Z_AXIS].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2d2a:	80 93 e2 24 	sts	0x24E2, r24
    2d2e:	90 93 e3 24 	sts	0x24E3, r25
	cfg.a[A_AXIS].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2d32:	80 93 fa 24 	sts	0x24FA, r24
    2d36:	90 93 fb 24 	sts	0x24FB, r25

	cfg.a[X_AXIS].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2d3a:	86 e6       	ldi	r24, 0x66	; 102
    2d3c:	96 e6       	ldi	r25, 0x66	; 102
    2d3e:	a6 ee       	ldi	r26, 0xE6	; 230
    2d40:	bf e3       	ldi	r27, 0x3F	; 63
    2d42:	80 93 b4 24 	sts	0x24B4, r24
    2d46:	90 93 b5 24 	sts	0x24B5, r25
    2d4a:	a0 93 b6 24 	sts	0x24B6, r26
    2d4e:	b0 93 b7 24 	sts	0x24B7, r27
	cfg.a[Y_AXIS].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2d52:	80 93 cc 24 	sts	0x24CC, r24
    2d56:	90 93 cd 24 	sts	0x24CD, r25
    2d5a:	a0 93 ce 24 	sts	0x24CE, r26
    2d5e:	b0 93 cf 24 	sts	0x24CF, r27
	cfg.a[Z_AXIS].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2d62:	80 93 e4 24 	sts	0x24E4, r24
    2d66:	90 93 e5 24 	sts	0x24E5, r25
    2d6a:	a0 93 e6 24 	sts	0x24E6, r26
    2d6e:	b0 93 e7 24 	sts	0x24E7, r27
	cfg.a[A_AXIS].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2d72:	80 93 fc 24 	sts	0x24FC, r24
    2d76:	90 93 fd 24 	sts	0x24FD, r25
    2d7a:	a0 93 fe 24 	sts	0x24FE, r26
    2d7e:	b0 93 ff 24 	sts	0x24FF, r27

	cfg.a[X_AXIS].mm_per_rev = X_MM_PER_REVOLUTION;
    2d82:	8c e5       	ldi	r24, 0x5C	; 92
    2d84:	9f e8       	ldi	r25, 0x8F	; 143
    2d86:	a2 ea       	ldi	r26, 0xA2	; 162
    2d88:	bf e3       	ldi	r27, 0x3F	; 63
    2d8a:	80 93 b8 24 	sts	0x24B8, r24
    2d8e:	90 93 b9 24 	sts	0x24B9, r25
    2d92:	a0 93 ba 24 	sts	0x24BA, r26
    2d96:	b0 93 bb 24 	sts	0x24BB, r27
	cfg.a[Y_AXIS].mm_per_rev = Y_MM_PER_REVOLUTION;
    2d9a:	80 93 d0 24 	sts	0x24D0, r24
    2d9e:	90 93 d1 24 	sts	0x24D1, r25
    2da2:	a0 93 d2 24 	sts	0x24D2, r26
    2da6:	b0 93 d3 24 	sts	0x24D3, r27
	cfg.a[Z_AXIS].mm_per_rev = Z_MM_PER_REVOLUTION;
    2daa:	80 93 e8 24 	sts	0x24E8, r24
    2dae:	90 93 e9 24 	sts	0x24E9, r25
    2db2:	a0 93 ea 24 	sts	0x24EA, r26
    2db6:	b0 93 eb 24 	sts	0x24EB, r27
	cfg.a[A_AXIS].mm_per_rev = A_MM_PER_REVOLUTION;
    2dba:	80 93 00 25 	sts	0x2500, r24
    2dbe:	90 93 01 25 	sts	0x2501, r25
    2dc2:	a0 93 02 25 	sts	0x2502, r26
    2dc6:	b0 93 03 25 	sts	0x2503, r27
	
	cfg.a[X_AXIS].mm_travel = X_MM_TRAVEL;
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	a8 ec       	ldi	r26, 0xC8	; 200
    2dd0:	b3 e4       	ldi	r27, 0x43	; 67
    2dd2:	80 93 bc 24 	sts	0x24BC, r24
    2dd6:	90 93 bd 24 	sts	0x24BD, r25
    2dda:	a0 93 be 24 	sts	0x24BE, r26
    2dde:	b0 93 bf 24 	sts	0x24BF, r27
	cfg.a[Y_AXIS].mm_travel = Y_MM_TRAVEL;
    2de2:	80 93 d4 24 	sts	0x24D4, r24
    2de6:	90 93 d5 24 	sts	0x24D5, r25
    2dea:	a0 93 d6 24 	sts	0x24D6, r26
    2dee:	b0 93 d7 24 	sts	0x24D7, r27
	cfg.a[Z_AXIS].mm_travel = Z_MM_TRAVEL;
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	a6 e9       	ldi	r26, 0x96	; 150
    2df8:	b3 e4       	ldi	r27, 0x43	; 67
    2dfa:	80 93 ec 24 	sts	0x24EC, r24
    2dfe:	90 93 ed 24 	sts	0x24ED, r25
    2e02:	a0 93 ee 24 	sts	0x24EE, r26
    2e06:	b0 93 ef 24 	sts	0x24EF, r27
	cfg.a[A_AXIS].mm_travel = A_MM_TRAVEL;
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	a0 e8       	ldi	r26, 0x80	; 128
    2e10:	bf eb       	ldi	r27, 0xBF	; 191
    2e12:	80 93 04 25 	sts	0x2504, r24
    2e16:	90 93 05 25 	sts	0x2505, r25
    2e1a:	a0 93 06 25 	sts	0x2506, r26
    2e1e:	b0 93 07 25 	sts	0x2507, r27
	
	cfg.a[X_AXIS].microstep = X_MICROSTEPS;
    2e22:	88 e0       	ldi	r24, 0x08	; 8
    2e24:	80 93 ad 24 	sts	0x24AD, r24
	cfg.a[Y_AXIS].microstep = Y_MICROSTEPS;
    2e28:	80 93 c5 24 	sts	0x24C5, r24
	cfg.a[Z_AXIS].microstep = Z_MICROSTEPS;
    2e2c:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A_AXIS].microstep = A_MICROSTEPS;
    2e2e:	80 93 f5 24 	sts	0x24F5, r24

	cfg.a[X_AXIS].polarity = X_POLARITY;
    2e32:	10 92 af 24 	sts	0x24AF, r1
	cfg.a[Y_AXIS].polarity = Y_POLARITY;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	80 93 c7 24 	sts	0x24C7, r24
	cfg.a[Z_AXIS].polarity = Z_POLARITY;
    2e3c:	10 92 df 24 	sts	0x24DF, r1
	cfg.a[A_AXIS].polarity = A_POLARITY;
    2e40:	10 92 f7 24 	sts	0x24F7, r1

	cfg.a[X_AXIS].limit_enable = X_LIMIT_ENABLE;
    2e44:	80 93 c4 24 	sts	0x24C4, r24
	cfg.a[Y_AXIS].limit_enable = Y_LIMIT_ENABLE;
    2e48:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z_AXIS].limit_enable = Z_LIMIT_ENABLE;
    2e4a:	80 93 f4 24 	sts	0x24F4, r24
	cfg.a[A_AXIS].limit_enable = A_LIMIT_ENABLE;
    2e4e:	10 92 0c 25 	sts	0x250C, r1

	cfg.a[X_AXIS].low_pwr_idle = X_LOW_POWER_IDLE;
    2e52:	80 93 ae 24 	sts	0x24AE, r24
	cfg.a[Y_AXIS].low_pwr_idle = Y_LOW_POWER_IDLE;
    2e56:	80 93 c6 24 	sts	0x24C6, r24
	cfg.a[Z_AXIS].low_pwr_idle = Z_LOW_POWER_IDLE;
    2e5a:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A_AXIS].low_pwr_idle = A_LOW_POWER_IDLE;
    2e5c:	80 93 f6 24 	sts	0x24F6, r24

	_cfg_computed();		// generate computed values from the above
    2e60:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <_cfg_computed>
}
    2e64:	08 95       	ret

00002e66 <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2e66:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <cfg_reset>
}
    2e6a:	08 95       	ret

00002e6c <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2e6c:	87 30       	cpi	r24, 0x07	; 7
    2e6e:	31 f1       	breq	.+76     	; 0x2ebc <_cfg_print_status+0x50>
    2e70:	88 30       	cpi	r24, 0x08	; 8
    2e72:	30 f4       	brcc	.+12     	; 0x2e80 <_cfg_print_status+0x14>
    2e74:	82 30       	cpi	r24, 0x02	; 2
    2e76:	59 f0       	breq	.+22     	; 0x2e8e <_cfg_print_status+0x22>
    2e78:	83 30       	cpi	r24, 0x03	; 3
    2e7a:	09 f0       	breq	.+2      	; 0x2e7e <_cfg_print_status+0x12>
    2e7c:	45 c0       	rjmp	.+138    	; 0x2f08 <_cfg_print_status+0x9c>
    2e7e:	0c c0       	rjmp	.+24     	; 0x2e98 <_cfg_print_status+0x2c>
    2e80:	8d 30       	cpi	r24, 0x0D	; 13
    2e82:	09 f1       	breq	.+66     	; 0x2ec6 <_cfg_print_status+0x5a>
    2e84:	8f 30       	cpi	r24, 0x0F	; 15
    2e86:	81 f1       	breq	.+96     	; 0x2ee8 <_cfg_print_status+0x7c>
    2e88:	8c 30       	cpi	r24, 0x0C	; 12
    2e8a:	f1 f5       	brne	.+124    	; 0x2f08 <_cfg_print_status+0x9c>
    2e8c:	12 c0       	rjmp	.+36     	; 0x2eb2 <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_CONTINUE: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2e8e:	00 d0       	rcall	.+0      	; 0x2e90 <_cfg_print_status+0x24>
    2e90:	0f 92       	push	r0
    2e92:	85 e1       	ldi	r24, 0x15	; 21
    2e94:	94 e0       	ldi	r25, 0x04	; 4
    2e96:	1b c0       	rjmp	.+54     	; 0x2ece <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2e98:	0f 92       	push	r0
    2e9a:	0f 92       	push	r0
    2e9c:	8f ef       	ldi	r24, 0xFF	; 255
    2e9e:	93 e0       	ldi	r25, 0x03	; 3
    2ea0:	ed b7       	in	r30, 0x3d	; 61
    2ea2:	fe b7       	in	r31, 0x3e	; 62
    2ea4:	81 83       	std	Z+1, r24	; 0x01
    2ea6:	92 83       	std	Z+2, r25	; 0x02
    2ea8:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2eb2:	00 d0       	rcall	.+0      	; 0x2eb4 <_cfg_print_status+0x48>
    2eb4:	0f 92       	push	r0
    2eb6:	88 ee       	ldi	r24, 0xE8	; 232
    2eb8:	93 e0       	ldi	r25, 0x03	; 3
    2eba:	09 c0       	rjmp	.+18     	; 0x2ece <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2ebc:	00 d0       	rcall	.+0      	; 0x2ebe <_cfg_print_status+0x52>
    2ebe:	0f 92       	push	r0
    2ec0:	8e ec       	ldi	r24, 0xCE	; 206
    2ec2:	93 e0       	ldi	r25, 0x03	; 3
    2ec4:	04 c0       	rjmp	.+8      	; 0x2ece <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2ec6:	00 d0       	rcall	.+0      	; 0x2ec8 <_cfg_print_status+0x5c>
    2ec8:	0f 92       	push	r0
    2eca:	84 eb       	ldi	r24, 0xB4	; 180
    2ecc:	93 e0       	ldi	r25, 0x03	; 3
    2ece:	ed b7       	in	r30, 0x3d	; 61
    2ed0:	fe b7       	in	r31, 0x3e	; 62
    2ed2:	81 83       	std	Z+1, r24	; 0x01
    2ed4:	92 83       	std	Z+2, r25	; 0x02
    2ed6:	63 83       	std	Z+3, r22	; 0x03
    2ed8:	74 83       	std	Z+4, r23	; 0x04
    2eda:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	08 95       	ret
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2ee8:	00 d0       	rcall	.+0      	; 0x2eea <_cfg_print_status+0x7e>
    2eea:	0f 92       	push	r0
    2eec:	89 e9       	ldi	r24, 0x99	; 153
    2eee:	93 e0       	ldi	r25, 0x03	; 3
    2ef0:	ed b7       	in	r30, 0x3d	; 61
    2ef2:	fe b7       	in	r31, 0x3e	; 62
    2ef4:	81 83       	std	Z+1, r24	; 0x01
    2ef6:	92 83       	std	Z+2, r25	; 0x02
    2ef8:	63 83       	std	Z+3, r22	; 0x03
    2efa:	74 83       	std	Z+4, r23	; 0x04
    2efc:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	08 95       	ret

00002f0a <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    2f0a:	ef 92       	push	r14
    2f0c:	ff 92       	push	r15
    2f0e:	0f 93       	push	r16
    2f10:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    2f12:	e8 2e       	mov	r14, r24
    2f14:	ff 24       	eor	r15, r15
    2f16:	87 01       	movw	r16, r14
    2f18:	00 0f       	add	r16, r16
    2f1a:	11 1f       	adc	r17, r17
    2f1c:	f8 01       	movw	r30, r16
    2f1e:	ed 5b       	subi	r30, 0xBD	; 189
    2f20:	fd 4f       	sbci	r31, 0xFD	; 253
    2f22:	25 91       	lpm	r18, Z+
    2f24:	34 91       	lpm	r19, Z+
    2f26:	00 d0       	rcall	.+0      	; 0x2f28 <_cfg_dump_axis+0x1e>
    2f28:	0f 92       	push	r0
    2f2a:	88 e3       	ldi	r24, 0x38	; 56
    2f2c:	96 e0       	ldi	r25, 0x06	; 6
    2f2e:	ad b7       	in	r26, 0x3d	; 61
    2f30:	be b7       	in	r27, 0x3e	; 62
    2f32:	11 96       	adiw	r26, 0x01	; 1
    2f34:	8d 93       	st	X+, r24
    2f36:	9c 93       	st	X, r25
    2f38:	12 97       	sbiw	r26, 0x02	; 2
    2f3a:	13 96       	adiw	r26, 0x03	; 3
    2f3c:	2d 93       	st	X+, r18
    2f3e:	3c 93       	st	X, r19
    2f40:	14 97       	sbiw	r26, 0x04	; 4
    2f42:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	96 e0       	ldi	r25, 0x06	; 6
    2f4a:	ed b7       	in	r30, 0x3d	; 61
    2f4c:	fe b7       	in	r31, 0x3e	; 62
    2f4e:	81 83       	std	Z+1, r24	; 0x01
    2f50:	92 83       	std	Z+2, r25	; 0x02
    2f52:	0e 0d       	add	r16, r14
    2f54:	1f 1d       	adc	r17, r15
    2f56:	83 e0       	ldi	r24, 0x03	; 3
    2f58:	00 0f       	add	r16, r16
    2f5a:	11 1f       	adc	r17, r17
    2f5c:	8a 95       	dec	r24
    2f5e:	e1 f7       	brne	.-8      	; 0x2f58 <_cfg_dump_axis+0x4e>
    2f60:	01 56       	subi	r16, 0x61	; 97
    2f62:	1b 4d       	sbci	r17, 0xDB	; 219
    2f64:	d8 01       	movw	r26, r16
    2f66:	51 96       	adiw	r26, 0x11	; 17
    2f68:	8d 91       	ld	r24, X+
    2f6a:	9c 91       	ld	r25, X
    2f6c:	52 97       	sbiw	r26, 0x12	; 18
    2f6e:	83 83       	std	Z+3, r24	; 0x03
    2f70:	94 83       	std	Z+4, r25	; 0x04
    2f72:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    2f76:	88 ec       	ldi	r24, 0xC8	; 200
    2f78:	95 e0       	ldi	r25, 0x05	; 5
    2f7a:	ed b7       	in	r30, 0x3d	; 61
    2f7c:	fe b7       	in	r31, 0x3e	; 62
    2f7e:	81 83       	std	Z+1, r24	; 0x01
    2f80:	92 83       	std	Z+2, r25	; 0x02
    2f82:	d8 01       	movw	r26, r16
    2f84:	53 96       	adiw	r26, 0x13	; 19
    2f86:	8d 91       	ld	r24, X+
    2f88:	9c 91       	ld	r25, X
    2f8a:	54 97       	sbiw	r26, 0x14	; 20
    2f8c:	83 83       	std	Z+3, r24	; 0x03
    2f8e:	94 83       	std	Z+4, r25	; 0x04
    2f90:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    2f94:	ed b7       	in	r30, 0x3d	; 61
    2f96:	fe b7       	in	r31, 0x3e	; 62
    2f98:	31 96       	adiw	r30, 0x01	; 1
    2f9a:	85 e9       	ldi	r24, 0x95	; 149
    2f9c:	95 e0       	ldi	r25, 0x05	; 5
    2f9e:	ad b7       	in	r26, 0x3d	; 61
    2fa0:	be b7       	in	r27, 0x3e	; 62
    2fa2:	11 96       	adiw	r26, 0x01	; 1
    2fa4:	8d 93       	st	X+, r24
    2fa6:	9c 93       	st	X, r25
    2fa8:	12 97       	sbiw	r26, 0x02	; 2
    2faa:	d8 01       	movw	r26, r16
    2fac:	1e 96       	adiw	r26, 0x0e	; 14
    2fae:	8c 91       	ld	r24, X
    2fb0:	82 83       	std	Z+2, r24	; 0x02
    2fb2:	13 82       	std	Z+3, r1	; 0x03
    2fb4:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    2fb8:	0f 92       	push	r0
    2fba:	0f 92       	push	r0
    2fbc:	8e e5       	ldi	r24, 0x5E	; 94
    2fbe:	95 e0       	ldi	r25, 0x05	; 5
    2fc0:	ed b7       	in	r30, 0x3d	; 61
    2fc2:	fe b7       	in	r31, 0x3e	; 62
    2fc4:	81 83       	std	Z+1, r24	; 0x01
    2fc6:	92 83       	std	Z+2, r25	; 0x02
    2fc8:	f8 01       	movw	r30, r16
    2fca:	85 89       	ldd	r24, Z+21	; 0x15
    2fcc:	96 89       	ldd	r25, Z+22	; 0x16
    2fce:	a7 89       	ldd	r26, Z+23	; 0x17
    2fd0:	b0 8d       	ldd	r27, Z+24	; 0x18
    2fd2:	ed b7       	in	r30, 0x3d	; 61
    2fd4:	fe b7       	in	r31, 0x3e	; 62
    2fd6:	83 83       	std	Z+3, r24	; 0x03
    2fd8:	94 83       	std	Z+4, r25	; 0x04
    2fda:	a5 83       	std	Z+5, r26	; 0x05
    2fdc:	b6 83       	std	Z+6, r27	; 0x06
    2fde:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    2fe2:	8b e2       	ldi	r24, 0x2B	; 43
    2fe4:	95 e0       	ldi	r25, 0x05	; 5
    2fe6:	ad b7       	in	r26, 0x3d	; 61
    2fe8:	be b7       	in	r27, 0x3e	; 62
    2fea:	11 96       	adiw	r26, 0x01	; 1
    2fec:	8d 93       	st	X+, r24
    2fee:	9c 93       	st	X, r25
    2ff0:	12 97       	sbiw	r26, 0x02	; 2
    2ff2:	f8 01       	movw	r30, r16
    2ff4:	81 8d       	ldd	r24, Z+25	; 0x19
    2ff6:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ff8:	a3 8d       	ldd	r26, Z+27	; 0x1b
    2ffa:	b4 8d       	ldd	r27, Z+28	; 0x1c
    2ffc:	ed b7       	in	r30, 0x3d	; 61
    2ffe:	fe b7       	in	r31, 0x3e	; 62
    3000:	83 83       	std	Z+3, r24	; 0x03
    3002:	94 83       	std	Z+4, r25	; 0x04
    3004:	a5 83       	std	Z+5, r26	; 0x05
    3006:	b6 83       	std	Z+6, r27	; 0x06
    3008:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    300c:	88 ef       	ldi	r24, 0xF8	; 248
    300e:	94 e0       	ldi	r25, 0x04	; 4
    3010:	ad b7       	in	r26, 0x3d	; 61
    3012:	be b7       	in	r27, 0x3e	; 62
    3014:	11 96       	adiw	r26, 0x01	; 1
    3016:	8d 93       	st	X+, r24
    3018:	9c 93       	st	X, r25
    301a:	12 97       	sbiw	r26, 0x02	; 2
    301c:	f8 01       	movw	r30, r16
    301e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3020:	96 8d       	ldd	r25, Z+30	; 0x1e
    3022:	a7 8d       	ldd	r26, Z+31	; 0x1f
    3024:	b0 a1       	ldd	r27, Z+32	; 0x20
    3026:	ed b7       	in	r30, 0x3d	; 61
    3028:	fe b7       	in	r31, 0x3e	; 62
    302a:	83 83       	std	Z+3, r24	; 0x03
    302c:	94 83       	std	Z+4, r25	; 0x04
    302e:	a5 83       	std	Z+5, r26	; 0x05
    3030:	b6 83       	std	Z+6, r27	; 0x06
    3032:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    3036:	0f 90       	pop	r0
    3038:	0f 90       	pop	r0
    303a:	ed b7       	in	r30, 0x3d	; 61
    303c:	fe b7       	in	r31, 0x3e	; 62
    303e:	31 96       	adiw	r30, 0x01	; 1
    3040:	87 ec       	ldi	r24, 0xC7	; 199
    3042:	94 e0       	ldi	r25, 0x04	; 4
    3044:	ad b7       	in	r26, 0x3d	; 61
    3046:	be b7       	in	r27, 0x3e	; 62
    3048:	11 96       	adiw	r26, 0x01	; 1
    304a:	8d 93       	st	X+, r24
    304c:	9c 93       	st	X, r25
    304e:	12 97       	sbiw	r26, 0x02	; 2
    3050:	d8 01       	movw	r26, r16
    3052:	95 96       	adiw	r26, 0x25	; 37
    3054:	8c 91       	ld	r24, X
    3056:	82 83       	std	Z+2, r24	; 0x02
    3058:	13 82       	std	Z+3, r1	; 0x03
    305a:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    305e:	ed b7       	in	r30, 0x3d	; 61
    3060:	fe b7       	in	r31, 0x3e	; 62
    3062:	31 96       	adiw	r30, 0x01	; 1
    3064:	86 e9       	ldi	r24, 0x96	; 150
    3066:	94 e0       	ldi	r25, 0x04	; 4
    3068:	ad b7       	in	r26, 0x3d	; 61
    306a:	be b7       	in	r27, 0x3e	; 62
    306c:	11 96       	adiw	r26, 0x01	; 1
    306e:	8d 93       	st	X+, r24
    3070:	9c 93       	st	X, r25
    3072:	12 97       	sbiw	r26, 0x02	; 2
    3074:	d8 01       	movw	r26, r16
    3076:	1f 96       	adiw	r26, 0x0f	; 15
    3078:	8c 91       	ld	r24, X
    307a:	82 83       	std	Z+2, r24	; 0x02
    307c:	13 82       	std	Z+3, r1	; 0x03
    307e:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    3082:	ed b7       	in	r30, 0x3d	; 61
    3084:	fe b7       	in	r31, 0x3e	; 62
    3086:	31 96       	adiw	r30, 0x01	; 1
    3088:	86 e6       	ldi	r24, 0x66	; 102
    308a:	94 e0       	ldi	r25, 0x04	; 4
    308c:	ad b7       	in	r26, 0x3d	; 61
    308e:	be b7       	in	r27, 0x3e	; 62
    3090:	11 96       	adiw	r26, 0x01	; 1
    3092:	8d 93       	st	X+, r24
    3094:	9c 93       	st	X, r25
    3096:	12 97       	sbiw	r26, 0x02	; 2
    3098:	d8 01       	movw	r26, r16
    309a:	50 96       	adiw	r26, 0x10	; 16
    309c:	8c 91       	ld	r24, X
    309e:	82 83       	std	Z+2, r24	; 0x02
    30a0:	13 82       	std	Z+3, r1	; 0x03
    30a2:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    30a6:	0f 92       	push	r0
    30a8:	0f 92       	push	r0
    30aa:	82 e3       	ldi	r24, 0x32	; 50
    30ac:	94 e0       	ldi	r25, 0x04	; 4
    30ae:	ed b7       	in	r30, 0x3d	; 61
    30b0:	fe b7       	in	r31, 0x3e	; 62
    30b2:	81 83       	std	Z+1, r24	; 0x01
    30b4:	92 83       	std	Z+2, r25	; 0x02
    30b6:	f8 01       	movw	r30, r16
    30b8:	81 a1       	ldd	r24, Z+33	; 0x21
    30ba:	92 a1       	ldd	r25, Z+34	; 0x22
    30bc:	a3 a1       	ldd	r26, Z+35	; 0x23
    30be:	b4 a1       	ldd	r27, Z+36	; 0x24
    30c0:	ed b7       	in	r30, 0x3d	; 61
    30c2:	fe b7       	in	r31, 0x3e	; 62
    30c4:	83 83       	std	Z+3, r24	; 0x03
    30c6:	94 83       	std	Z+4, r25	; 0x04
    30c8:	a5 83       	std	Z+5, r26	; 0x05
    30ca:	b6 83       	std	Z+6, r27	; 0x06
    30cc:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
    30d0:	8d b7       	in	r24, 0x3d	; 61
    30d2:	9e b7       	in	r25, 0x3e	; 62
    30d4:	06 96       	adiw	r24, 0x06	; 6
    30d6:	8d bf       	out	0x3d, r24	; 61
    30d8:	9e bf       	out	0x3e, r25	; 62
}
    30da:	1f 91       	pop	r17
    30dc:	0f 91       	pop	r16
    30de:	ff 90       	pop	r15
    30e0:	ef 90       	pop	r14
    30e2:	08 95       	ret

000030e4 <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    30e4:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    30e6:	00 d0       	rcall	.+0      	; 0x30e8 <cfg_dump+0x4>
    30e8:	0f 92       	push	r0
    30ea:	ed b7       	in	r30, 0x3d	; 61
    30ec:	fe b7       	in	r31, 0x3e	; 62
    30ee:	31 96       	adiw	r30, 0x01	; 1
    30f0:	8c ef       	ldi	r24, 0xFC	; 252
    30f2:	96 e0       	ldi	r25, 0x06	; 6
    30f4:	ad b7       	in	r26, 0x3d	; 61
    30f6:	be b7       	in	r27, 0x3e	; 62
    30f8:	11 96       	adiw	r26, 0x01	; 1
    30fa:	8d 93       	st	X+, r24
    30fc:	9c 93       	st	X, r25
    30fe:	12 97       	sbiw	r26, 0x02	; 2
    3100:	80 91 9f 24 	lds	r24, 0x249F
    3104:	82 83       	std	Z+2, r24	; 0x02
    3106:	13 82       	std	Z+3, r1	; 0x03
    3108:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    310c:	0f 90       	pop	r0
    310e:	0f 90       	pop	r0
    3110:	85 ed       	ldi	r24, 0xD5	; 213
    3112:	96 e0       	ldi	r25, 0x06	; 6
    3114:	ed b7       	in	r30, 0x3d	; 61
    3116:	fe b7       	in	r31, 0x3e	; 62
    3118:	81 83       	std	Z+1, r24	; 0x01
    311a:	92 83       	std	Z+2, r25	; 0x02
    311c:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    3120:	00 d0       	rcall	.+0      	; 0x3122 <cfg_dump+0x3e>
    3122:	0f 92       	push	r0
    3124:	8b ea       	ldi	r24, 0xAB	; 171
    3126:	96 e0       	ldi	r25, 0x06	; 6
    3128:	ad b7       	in	r26, 0x3d	; 61
    312a:	be b7       	in	r27, 0x3e	; 62
    312c:	11 96       	adiw	r26, 0x01	; 1
    312e:	8d 93       	st	X+, r24
    3130:	9c 93       	st	X, r25
    3132:	12 97       	sbiw	r26, 0x02	; 2
    3134:	80 91 a1 24 	lds	r24, 0x24A1
    3138:	90 91 a2 24 	lds	r25, 0x24A2
    313c:	a0 91 a3 24 	lds	r26, 0x24A3
    3140:	b0 91 a4 24 	lds	r27, 0x24A4
    3144:	ed b7       	in	r30, 0x3d	; 61
    3146:	fe b7       	in	r31, 0x3e	; 62
    3148:	83 83       	std	Z+3, r24	; 0x03
    314a:	94 83       	std	Z+4, r25	; 0x04
    314c:	a5 83       	std	Z+5, r26	; 0x05
    314e:	b6 83       	std	Z+6, r27	; 0x06
    3150:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    3154:	81 e8       	ldi	r24, 0x81	; 129
    3156:	96 e0       	ldi	r25, 0x06	; 6
    3158:	ad b7       	in	r26, 0x3d	; 61
    315a:	be b7       	in	r27, 0x3e	; 62
    315c:	11 96       	adiw	r26, 0x01	; 1
    315e:	8d 93       	st	X+, r24
    3160:	9c 93       	st	X, r25
    3162:	12 97       	sbiw	r26, 0x02	; 2
    3164:	80 91 a9 24 	lds	r24, 0x24A9
    3168:	90 91 aa 24 	lds	r25, 0x24AA
    316c:	a0 91 ab 24 	lds	r26, 0x24AB
    3170:	b0 91 ac 24 	lds	r27, 0x24AC
    3174:	ed b7       	in	r30, 0x3d	; 61
    3176:	fe b7       	in	r31, 0x3e	; 62
    3178:	83 83       	std	Z+3, r24	; 0x03
    317a:	94 83       	std	Z+4, r25	; 0x04
    317c:	a5 83       	std	Z+5, r26	; 0x05
    317e:	b6 83       	std	Z+6, r27	; 0x06
    3180:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    3184:	86 e5       	ldi	r24, 0x56	; 86
    3186:	96 e0       	ldi	r25, 0x06	; 6
    3188:	ad b7       	in	r26, 0x3d	; 61
    318a:	be b7       	in	r27, 0x3e	; 62
    318c:	11 96       	adiw	r26, 0x01	; 1
    318e:	8d 93       	st	X+, r24
    3190:	9c 93       	st	X, r25
    3192:	12 97       	sbiw	r26, 0x02	; 2
    3194:	80 91 a5 24 	lds	r24, 0x24A5
    3198:	90 91 a6 24 	lds	r25, 0x24A6
    319c:	a0 91 a7 24 	lds	r26, 0x24A7
    31a0:	b0 91 a8 24 	lds	r27, 0x24A8
    31a4:	ed b7       	in	r30, 0x3d	; 61
    31a6:	fe b7       	in	r31, 0x3e	; 62
    31a8:	83 83       	std	Z+3, r24	; 0x03
    31aa:	94 83       	std	Z+4, r25	; 0x04
    31ac:	a5 83       	std	Z+5, r26	; 0x05
    31ae:	b6 83       	std	Z+6, r27	; 0x06
    31b0:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
    31b4:	10 e0       	ldi	r17, 0x00	; 0
    31b6:	8d b7       	in	r24, 0x3d	; 61
    31b8:	9e b7       	in	r25, 0x3e	; 62
    31ba:	06 96       	adiw	r24, 0x06	; 6
    31bc:	8d bf       	out	0x3d, r24	; 61
    31be:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis = 0; axis <= A_AXIS; axis++) {
		_cfg_dump_axis(axis);
    31c0:	81 2f       	mov	r24, r17
    31c2:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis = 0; axis <= A_AXIS; axis++) {
    31c6:	1f 5f       	subi	r17, 0xFF	; 255
    31c8:	14 30       	cpi	r17, 0x04	; 4
    31ca:	d1 f7       	brne	.-12     	; 0x31c0 <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    31cc:	1f 91       	pop	r17
    31ce:	08 95       	ret

000031d0 <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	6f e9       	ldi	r22, 0x9F	; 159
    31d6:	74 e2       	ldi	r23, 0x24	; 36
    31d8:	4e e6       	ldi	r20, 0x6E	; 110
    31da:	50 e0       	ldi	r21, 0x00	; 0
    31dc:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <memcpy_to_eeprom_with_checksum>
}
    31e0:	08 95       	ret

000031e2 <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	0e 94 4c 2c 	call	0x5898	; 0x5898 <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    31ea:	84 36       	cpi	r24, 0x64	; 100
    31ec:	19 f0       	breq	.+6      	; 0x31f4 <cfg_read+0x12>
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	0d c0       	rjmp	.+26     	; 0x320e <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    31f4:	8f e9       	ldi	r24, 0x9F	; 159
    31f6:	94 e2       	ldi	r25, 0x24	; 36
    31f8:	60 e0       	ldi	r22, 0x00	; 0
    31fa:	70 e0       	ldi	r23, 0x00	; 0
    31fc:	4e e6       	ldi	r20, 0x6E	; 110
    31fe:	50 e0       	ldi	r21, 0x00	; 0
    3200:	0e 94 56 2c 	call	0x58ac	; 0x58ac <memcpy_from_eeprom_with_checksum>
    3204:	00 97       	sbiw	r24, 0x00	; 0
    3206:	11 f0       	breq	.+4      	; 0x320c <cfg_read+0x2a>
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    320e:	c9 01       	movw	r24, r18
    3210:	08 95       	ret

00003212 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    3212:	cf 92       	push	r12
    3214:	df 92       	push	r13
    3216:	ef 92       	push	r14
    3218:	ff 92       	push	r15
    321a:	1f 93       	push	r17
    321c:	df 93       	push	r29
    321e:	cf 93       	push	r28
    3220:	0f 92       	push	r0
    3222:	0f 92       	push	r0
    3224:	cd b7       	in	r28, 0x3d	; 61
    3226:	de b7       	in	r29, 0x3e	; 62
    3228:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    322a:	19 82       	std	Y+1, r1	; 0x01
    322c:	1a 82       	std	Y+2, r1	; 0x02
    322e:	cc 24       	eor	r12, r12
    3230:	dd 24       	eor	r13, r13
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	2b c0       	rjmp	.+86     	; 0x328e <cfg_parse+0x7c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    3238:	9d 33       	cpi	r25, 0x3D	; 61
    323a:	49 f4       	brne	.+18     	; 0x324e <cfg_parse+0x3c>
			text[j++] = 0;						// terminate tag at separator
    323c:	f7 01       	movw	r30, r14
    323e:	e2 0f       	add	r30, r18
    3240:	f1 1d       	adc	r31, r1
    3242:	10 82       	st	Z, r1
    3244:	2f 5f       	subi	r18, 0xFF	; 255
			val = &text[j];						// new string starts at value
    3246:	67 01       	movw	r12, r14
    3248:	c2 0e       	add	r12, r18
    324a:	d1 1c       	adc	r13, r1
    324c:	20 c0       	rjmp	.+64     	; 0x328e <cfg_parse+0x7c>
		} else if ( (c == '-') || 				// pass special characters
    324e:	9d 32       	cpi	r25, 0x2D	; 45
    3250:	c9 f0       	breq	.+50     	; 0x3284 <cfg_parse+0x72>
    3252:	9b 32       	cpi	r25, 0x2B	; 43
    3254:	b9 f0       	breq	.+46     	; 0x3284 <cfg_parse+0x72>
    3256:	9e 32       	cpi	r25, 0x2E	; 46
    3258:	a9 f0       	breq	.+42     	; 0x3284 <cfg_parse+0x72>
    325a:	9f 33       	cpi	r25, 0x3F	; 63
    325c:	99 f0       	breq	.+38     	; 0x3284 <cfg_parse+0x72>
    325e:	98 32       	cpi	r25, 0x28	; 40
    3260:	89 f0       	breq	.+34     	; 0x3284 <cfg_parse+0x72>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    3262:	89 2f       	mov	r24, r25
    3264:	81 56       	subi	r24, 0x61	; 97
    3266:	8a 31       	cpi	r24, 0x1A	; 26
    3268:	28 f4       	brcc	.+10     	; 0x3274 <cfg_parse+0x62>
			text[j++] = c-'a'+'A';
    326a:	f7 01       	movw	r30, r14
    326c:	e2 0f       	add	r30, r18
    326e:	f1 1d       	adc	r31, r1
    3270:	90 52       	subi	r25, 0x20	; 32
    3272:	0b c0       	rjmp	.+22     	; 0x328a <cfg_parse+0x78>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    3274:	89 2f       	mov	r24, r25
    3276:	81 54       	subi	r24, 0x41	; 65
    3278:	8a 31       	cpi	r24, 0x1A	; 26
    327a:	20 f0       	brcs	.+8      	; 0x3284 <cfg_parse+0x72>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
    327c:	89 2f       	mov	r24, r25
    327e:	80 53       	subi	r24, 0x30	; 48
    3280:	8a 30       	cpi	r24, 0x0A	; 10
    3282:	28 f4       	brcc	.+10     	; 0x328e <cfg_parse+0x7c>
			text[j++] = c;
    3284:	f7 01       	movw	r30, r14
    3286:	e2 0f       	add	r30, r18
    3288:	f1 1d       	adc	r31, r1
    328a:	90 83       	st	Z, r25
    328c:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    328e:	f7 01       	movw	r30, r14
    3290:	e3 0f       	add	r30, r19
    3292:	f1 1d       	adc	r31, r1
    3294:	90 81       	ld	r25, Z
    3296:	3f 5f       	subi	r19, 0xFF	; 255
    3298:	99 23       	and	r25, r25
    329a:	71 f6       	brne	.-100    	; 0x3238 <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    329c:	f7 01       	movw	r30, r14
    329e:	e2 0f       	add	r30, r18
    32a0:	f1 1d       	adc	r31, r1
    32a2:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    32a4:	2f 5f       	subi	r18, 0xFF	; 255
    32a6:	c7 01       	movw	r24, r14
    32a8:	82 0f       	add	r24, r18
    32aa:	91 1d       	adc	r25, r1
    32ac:	89 83       	std	Y+1, r24	; 0x01
    32ae:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    32b0:	10 92 a0 24 	sts	0x24A0, r1
	switch (text[0]) {
    32b4:	f7 01       	movw	r30, r14
    32b6:	80 81       	ld	r24, Z
    32b8:	81 35       	cpi	r24, 0x51	; 81
    32ba:	d1 f0       	breq	.+52     	; 0x32f0 <cfg_parse+0xde>
    32bc:	82 35       	cpi	r24, 0x52	; 82
    32be:	60 f4       	brcc	.+24     	; 0x32d8 <cfg_parse+0xc6>
    32c0:	81 34       	cpi	r24, 0x41	; 65
    32c2:	59 f1       	breq	.+86     	; 0x331a <cfg_parse+0x108>
    32c4:	82 34       	cpi	r24, 0x42	; 66
    32c6:	28 f4       	brcc	.+10     	; 0x32d2 <cfg_parse+0xc0>
    32c8:	88 32       	cpi	r24, 0x28	; 40
    32ca:	11 f1       	breq	.+68     	; 0x3310 <cfg_parse+0xfe>
    32cc:	8f 33       	cpi	r24, 0x3F	; 63
    32ce:	39 f5       	brne	.+78     	; 0x331e <cfg_parse+0x10c>
    32d0:	0c c0       	rjmp	.+24     	; 0x32ea <cfg_parse+0xd8>
    32d2:	8d 34       	cpi	r24, 0x4D	; 77
    32d4:	21 f5       	brne	.+72     	; 0x331e <cfg_parse+0x10c>
    32d6:	0e c0       	rjmp	.+28     	; 0x32f4 <cfg_parse+0xe2>
    32d8:	89 35       	cpi	r24, 0x59	; 89
    32da:	29 f0       	breq	.+10     	; 0x32e6 <cfg_parse+0xd4>
    32dc:	8a 35       	cpi	r24, 0x5A	; 90
    32de:	d9 f0       	breq	.+54     	; 0x3316 <cfg_parse+0x104>
    32e0:	88 35       	cpi	r24, 0x58	; 88
    32e2:	e9 f4       	brne	.+58     	; 0x331e <cfg_parse+0x10c>
    32e4:	1f c0       	rjmp	.+62     	; 0x3324 <cfg_parse+0x112>
    32e6:	11 e0       	ldi	r17, 0x01	; 1
    32e8:	1e c0       	rjmp	.+60     	; 0x3326 <cfg_parse+0x114>
		case '?': cfg_dump(); status (TG_OK); break;
    32ea:	0e 94 72 18 	call	0x30e4	; 0x30e4 <cfg_dump>
    32ee:	10 c0       	rjmp	.+32     	; 0x3310 <cfg_parse+0xfe>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    32f0:	83 e0       	ldi	r24, 0x03	; 3
    32f2:	16 c0       	rjmp	.+44     	; 0x3320 <cfg_parse+0x10e>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    32f4:	c6 01       	movw	r24, r12
    32f6:	be 01       	movw	r22, r28
    32f8:	6f 5f       	subi	r22, 0xFF	; 255
    32fa:	7f 4f       	sbci	r23, 0xFF	; 255
    32fc:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <strtod>
    3300:	60 93 a1 24 	sts	0x24A1, r22
    3304:	70 93 a2 24 	sts	0x24A2, r23
    3308:	80 93 a3 24 	sts	0x24A3, r24
    330c:	90 93 a4 24 	sts	0x24A4, r25
				  status(TG_OK); 
    3310:	10 92 a0 24 	sts	0x24A0, r1
    3314:	07 c0       	rjmp	.+14     	; 0x3324 <cfg_parse+0x112>
				  break;
    3316:	12 e0       	ldi	r17, 0x02	; 2
    3318:	06 c0       	rjmp	.+12     	; 0x3326 <cfg_parse+0x114>

		case 'X': axis = X_AXIS; break;
		case 'Y': axis = Y_AXIS; break;
		case 'Z': axis = Z_AXIS; break;
    331a:	13 e0       	ldi	r17, 0x03	; 3
    331c:	04 c0       	rjmp	.+8      	; 0x3326 <cfg_parse+0x114>
		case 'A': axis = A_AXIS; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    331e:	87 e0       	ldi	r24, 0x07	; 7
    3320:	80 93 a0 24 	sts	0x24A0, r24
    3324:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    3326:	80 91 a0 24 	lds	r24, 0x24A0
    332a:	88 23       	and	r24, r24
    332c:	09 f0       	breq	.+2      	; 0x3330 <cfg_parse+0x11e>
    332e:	ee c0       	rjmp	.+476    	; 0x350c <cfg_parse+0x2fa>
		status(TG_OK);							// pre-emptive setting
    3330:	10 92 a0 24 	sts	0x24A0, r1
		switch (text[1]) {
    3334:	f7 01       	movw	r30, r14
    3336:	81 81       	ldd	r24, Z+1	; 0x01
    3338:	8c 34       	cpi	r24, 0x4C	; 76
    333a:	09 f4       	brne	.+2      	; 0x333e <cfg_parse+0x12c>
    333c:	b8 c0       	rjmp	.+368    	; 0x34ae <cfg_parse+0x29c>
    333e:	8d 34       	cpi	r24, 0x4D	; 77
    3340:	30 f4       	brcc	.+12     	; 0x334e <cfg_parse+0x13c>
    3342:	84 34       	cpi	r24, 0x44	; 68
    3344:	a9 f1       	breq	.+106    	; 0x33b0 <cfg_parse+0x19e>
    3346:	86 34       	cpi	r24, 0x46	; 70
    3348:	09 f0       	breq	.+2      	; 0x334c <cfg_parse+0x13a>
    334a:	dd c0       	rjmp	.+442    	; 0x3506 <cfg_parse+0x2f4>
    334c:	1d c0       	rjmp	.+58     	; 0x3388 <cfg_parse+0x176>
    334e:	80 35       	cpi	r24, 0x50	; 80
    3350:	09 f4       	brne	.+2      	; 0x3354 <cfg_parse+0x142>
    3352:	47 c0       	rjmp	.+142    	; 0x33e2 <cfg_parse+0x1d0>
    3354:	83 35       	cpi	r24, 0x53	; 83
    3356:	21 f0       	breq	.+8      	; 0x3360 <cfg_parse+0x14e>
    3358:	8d 34       	cpi	r24, 0x4D	; 77
    335a:	09 f0       	breq	.+2      	; 0x335e <cfg_parse+0x14c>
    335c:	d4 c0       	rjmp	.+424    	; 0x3506 <cfg_parse+0x2f4>
    335e:	58 c0       	rjmp	.+176    	; 0x3410 <cfg_parse+0x1fe>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    3360:	c6 01       	movw	r24, r12
    3362:	0e 94 58 49 	call	0x92b0	; 0x92b0 <atoi>
    3366:	21 2f       	mov	r18, r17
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	f9 01       	movw	r30, r18
    336c:	ee 0f       	add	r30, r30
    336e:	ff 1f       	adc	r31, r31
    3370:	e2 0f       	add	r30, r18
    3372:	f3 1f       	adc	r31, r19
    3374:	53 e0       	ldi	r21, 0x03	; 3
    3376:	ee 0f       	add	r30, r30
    3378:	ff 1f       	adc	r31, r31
    337a:	5a 95       	dec	r21
    337c:	e1 f7       	brne	.-8      	; 0x3376 <cfg_parse+0x164>
    337e:	e1 56       	subi	r30, 0x61	; 97
    3380:	fb 4d       	sbci	r31, 0xDB	; 219
    3382:	81 8b       	std	Z+17, r24	; 0x11
    3384:	92 8b       	std	Z+18, r25	; 0x12
    3386:	c2 c0       	rjmp	.+388    	; 0x350c <cfg_parse+0x2fa>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    3388:	c6 01       	movw	r24, r12
    338a:	0e 94 58 49 	call	0x92b0	; 0x92b0 <atoi>
    338e:	21 2f       	mov	r18, r17
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	f9 01       	movw	r30, r18
    3394:	ee 0f       	add	r30, r30
    3396:	ff 1f       	adc	r31, r31
    3398:	e2 0f       	add	r30, r18
    339a:	f3 1f       	adc	r31, r19
    339c:	23 e0       	ldi	r18, 0x03	; 3
    339e:	ee 0f       	add	r30, r30
    33a0:	ff 1f       	adc	r31, r31
    33a2:	2a 95       	dec	r18
    33a4:	e1 f7       	brne	.-8      	; 0x339e <cfg_parse+0x18c>
    33a6:	e1 56       	subi	r30, 0x61	; 97
    33a8:	fb 4d       	sbci	r31, 0xDB	; 219
    33aa:	83 8b       	std	Z+19, r24	; 0x13
    33ac:	94 8b       	std	Z+20, r25	; 0x14
    33ae:	ae c0       	rjmp	.+348    	; 0x350c <cfg_parse+0x2fa>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    33b0:	c6 01       	movw	r24, r12
    33b2:	be 01       	movw	r22, r28
    33b4:	6f 5f       	subi	r22, 0xFF	; 255
    33b6:	7f 4f       	sbci	r23, 0xFF	; 255
    33b8:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <strtod>
    33bc:	21 2f       	mov	r18, r17
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	f9 01       	movw	r30, r18
    33c2:	ee 0f       	add	r30, r30
    33c4:	ff 1f       	adc	r31, r31
    33c6:	e2 0f       	add	r30, r18
    33c8:	f3 1f       	adc	r31, r19
    33ca:	b3 e0       	ldi	r27, 0x03	; 3
    33cc:	ee 0f       	add	r30, r30
    33ce:	ff 1f       	adc	r31, r31
    33d0:	ba 95       	dec	r27
    33d2:	e1 f7       	brne	.-8      	; 0x33cc <cfg_parse+0x1ba>
    33d4:	e1 56       	subi	r30, 0x61	; 97
    33d6:	fb 4d       	sbci	r31, 0xDB	; 219
    33d8:	65 8b       	std	Z+21, r22	; 0x15
    33da:	76 8b       	std	Z+22, r23	; 0x16
    33dc:	87 8b       	std	Z+23, r24	; 0x17
    33de:	90 8f       	std	Z+24, r25	; 0x18
    33e0:	95 c0       	rjmp	.+298    	; 0x350c <cfg_parse+0x2fa>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    33e2:	c6 01       	movw	r24, r12
    33e4:	0e 94 58 49 	call	0x92b0	; 0x92b0 <atoi>
    33e8:	68 2f       	mov	r22, r24
    33ea:	81 2f       	mov	r24, r17
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	fc 01       	movw	r30, r24
    33f0:	ee 0f       	add	r30, r30
    33f2:	ff 1f       	adc	r31, r31
    33f4:	e8 0f       	add	r30, r24
    33f6:	f9 1f       	adc	r31, r25
    33f8:	73 e0       	ldi	r23, 0x03	; 3
    33fa:	ee 0f       	add	r30, r30
    33fc:	ff 1f       	adc	r31, r31
    33fe:	7a 95       	dec	r23
    3400:	e1 f7       	brne	.-8      	; 0x33fa <cfg_parse+0x1e8>
    3402:	e1 56       	subi	r30, 0x61	; 97
    3404:	fb 4d       	sbci	r31, 0xDB	; 219
    3406:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    3408:	81 2f       	mov	r24, r17
    340a:	0e 94 0c 24 	call	0x4818	; 0x4818 <st_set_polarity>
    340e:	7e c0       	rjmp	.+252    	; 0x350c <cfg_parse+0x2fa>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    3410:	f7 01       	movw	r30, r14
    3412:	82 81       	ldd	r24, Z+2	; 0x02
    3414:	89 34       	cpi	r24, 0x49	; 73
    3416:	99 f4       	brne	.+38     	; 0x343e <cfg_parse+0x22c>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    3418:	c6 01       	movw	r24, r12
    341a:	0e 94 58 49 	call	0x92b0	; 0x92b0 <atoi>
    341e:	21 2f       	mov	r18, r17
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	f9 01       	movw	r30, r18
    3424:	ee 0f       	add	r30, r30
    3426:	ff 1f       	adc	r31, r31
    3428:	e2 0f       	add	r30, r18
    342a:	f3 1f       	adc	r31, r19
    342c:	53 e0       	ldi	r21, 0x03	; 3
    342e:	ee 0f       	add	r30, r30
    3430:	ff 1f       	adc	r31, r31
    3432:	5a 95       	dec	r21
    3434:	e1 f7       	brne	.-8      	; 0x342e <cfg_parse+0x21c>
    3436:	e1 56       	subi	r30, 0x61	; 97
    3438:	fb 4d       	sbci	r31, 0xDB	; 219
    343a:	86 87       	std	Z+14, r24	; 0x0e
    343c:	67 c0       	rjmp	.+206    	; 0x350c <cfg_parse+0x2fa>
				} else if (text[3] == 'R') {
    343e:	f7 01       	movw	r30, r14
    3440:	83 81       	ldd	r24, Z+3	; 0x03
    3442:	82 35       	cpi	r24, 0x52	; 82
    3444:	c9 f4       	brne	.+50     	; 0x3478 <cfg_parse+0x266>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    3446:	c6 01       	movw	r24, r12
    3448:	be 01       	movw	r22, r28
    344a:	6f 5f       	subi	r22, 0xFF	; 255
    344c:	7f 4f       	sbci	r23, 0xFF	; 255
    344e:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <strtod>
    3452:	21 2f       	mov	r18, r17
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	f9 01       	movw	r30, r18
    3458:	ee 0f       	add	r30, r30
    345a:	ff 1f       	adc	r31, r31
    345c:	e2 0f       	add	r30, r18
    345e:	f3 1f       	adc	r31, r19
    3460:	13 e0       	ldi	r17, 0x03	; 3
    3462:	ee 0f       	add	r30, r30
    3464:	ff 1f       	adc	r31, r31
    3466:	1a 95       	dec	r17
    3468:	e1 f7       	brne	.-8      	; 0x3462 <cfg_parse+0x250>
    346a:	e1 56       	subi	r30, 0x61	; 97
    346c:	fb 4d       	sbci	r31, 0xDB	; 219
    346e:	61 8f       	std	Z+25, r22	; 0x19
    3470:	72 8f       	std	Z+26, r23	; 0x1a
    3472:	83 8f       	std	Z+27, r24	; 0x1b
    3474:	94 8f       	std	Z+28, r25	; 0x1c
    3476:	4a c0       	rjmp	.+148    	; 0x350c <cfg_parse+0x2fa>
				} else if (text[3] == 'T') {
    3478:	84 35       	cpi	r24, 0x54	; 84
    347a:	c9 f4       	brne	.+50     	; 0x34ae <cfg_parse+0x29c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    347c:	c6 01       	movw	r24, r12
    347e:	be 01       	movw	r22, r28
    3480:	6f 5f       	subi	r22, 0xFF	; 255
    3482:	7f 4f       	sbci	r23, 0xFF	; 255
    3484:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <strtod>
    3488:	21 2f       	mov	r18, r17
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	f9 01       	movw	r30, r18
    348e:	ee 0f       	add	r30, r30
    3490:	ff 1f       	adc	r31, r31
    3492:	e2 0f       	add	r30, r18
    3494:	f3 1f       	adc	r31, r19
    3496:	a3 e0       	ldi	r26, 0x03	; 3
    3498:	ee 0f       	add	r30, r30
    349a:	ff 1f       	adc	r31, r31
    349c:	aa 95       	dec	r26
    349e:	e1 f7       	brne	.-8      	; 0x3498 <cfg_parse+0x286>
    34a0:	e1 56       	subi	r30, 0x61	; 97
    34a2:	fb 4d       	sbci	r31, 0xDB	; 219
    34a4:	65 8f       	std	Z+29, r22	; 0x1d
    34a6:	76 8f       	std	Z+30, r23	; 0x1e
    34a8:	87 8f       	std	Z+31, r24	; 0x1f
    34aa:	90 a3       	std	Z+32, r25	; 0x20
    34ac:	2f c0       	rjmp	.+94     	; 0x350c <cfg_parse+0x2fa>
				}
			case 'L': 
				if (text[2] == 'O') {
    34ae:	f7 01       	movw	r30, r14
    34b0:	82 81       	ldd	r24, Z+2	; 0x02
    34b2:	8f 34       	cpi	r24, 0x4F	; 79
    34b4:	99 f4       	brne	.+38     	; 0x34dc <cfg_parse+0x2ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    34b6:	c6 01       	movw	r24, r12
    34b8:	0e 94 58 49 	call	0x92b0	; 0x92b0 <atoi>
    34bc:	21 2f       	mov	r18, r17
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	f9 01       	movw	r30, r18
    34c2:	ee 0f       	add	r30, r30
    34c4:	ff 1f       	adc	r31, r31
    34c6:	e2 0f       	add	r30, r18
    34c8:	f3 1f       	adc	r31, r19
    34ca:	53 e0       	ldi	r21, 0x03	; 3
    34cc:	ee 0f       	add	r30, r30
    34ce:	ff 1f       	adc	r31, r31
    34d0:	5a 95       	dec	r21
    34d2:	e1 f7       	brne	.-8      	; 0x34cc <cfg_parse+0x2ba>
    34d4:	e1 56       	subi	r30, 0x61	; 97
    34d6:	fb 4d       	sbci	r31, 0xDB	; 219
    34d8:	87 87       	std	Z+15, r24	; 0x0f
    34da:	18 c0       	rjmp	.+48     	; 0x350c <cfg_parse+0x2fa>
				} else if (text[2] == 'I') {
    34dc:	89 34       	cpi	r24, 0x49	; 73
    34de:	99 f4       	brne	.+38     	; 0x3506 <cfg_parse+0x2f4>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    34e0:	c6 01       	movw	r24, r12
    34e2:	0e 94 58 49 	call	0x92b0	; 0x92b0 <atoi>
    34e6:	21 2f       	mov	r18, r17
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	f9 01       	movw	r30, r18
    34ec:	ee 0f       	add	r30, r30
    34ee:	ff 1f       	adc	r31, r31
    34f0:	e2 0f       	add	r30, r18
    34f2:	f3 1f       	adc	r31, r19
    34f4:	23 e0       	ldi	r18, 0x03	; 3
    34f6:	ee 0f       	add	r30, r30
    34f8:	ff 1f       	adc	r31, r31
    34fa:	2a 95       	dec	r18
    34fc:	e1 f7       	brne	.-8      	; 0x34f6 <cfg_parse+0x2e4>
    34fe:	e1 56       	subi	r30, 0x61	; 97
    3500:	fb 4d       	sbci	r31, 0xDB	; 219
    3502:	85 a3       	std	Z+37, r24	; 0x25
    3504:	03 c0       	rjmp	.+6      	; 0x350c <cfg_parse+0x2fa>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    3506:	87 e0       	ldi	r24, 0x07	; 7
    3508:	80 93 a0 24 	sts	0x24A0, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    350c:	80 91 a0 24 	lds	r24, 0x24A0
    3510:	b7 01       	movw	r22, r14
    3512:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    3516:	80 91 a0 24 	lds	r24, 0x24A0
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	0f 90       	pop	r0
    351e:	0f 90       	pop	r0
    3520:	cf 91       	pop	r28
    3522:	df 91       	pop	r29
    3524:	1f 91       	pop	r17
    3526:	ff 90       	pop	r15
    3528:	ef 90       	pop	r14
    352a:	df 90       	pop	r13
    352c:	cf 90       	pop	r12
    352e:	08 95       	ret

00003530 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3530:	ef 92       	push	r14
    3532:	ff 92       	push	r15
    3534:	0f 93       	push	r16
    3536:	1f 93       	push	r17
    3538:	df 93       	push	r29
    353a:	cf 93       	push	r28
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
    3540:	a8 97       	sbiw	r28, 0x28	; 40
    3542:	cd bf       	out	0x3d, r28	; 61
    3544:	de bf       	out	0x3e, r29	; 62
    3546:	0b e4       	ldi	r16, 0x4B	; 75
    3548:	12 e0       	ldi	r17, 0x02	; 2
    354a:	a0 e0       	ldi	r26, 0x00	; 0
    354c:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    354e:	7e 01       	movw	r14, r28
    3550:	08 94       	sec
    3552:	e1 1c       	adc	r14, r1
    3554:	f1 1c       	adc	r15, r1
    3556:	02 c0       	rjmp	.+4      	; 0x355c <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3558:	0f 5f       	subi	r16, 0xFF	; 255
    355a:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    355c:	f8 01       	movw	r30, r16
    355e:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    3560:	88 23       	and	r24, r24
    3562:	89 f4       	brne	.+34     	; 0x3586 <cfg_test+0x56>
			text[j] = 0;
    3564:	ce 01       	movw	r24, r28
    3566:	01 96       	adiw	r24, 0x01	; 1
    3568:	a8 0f       	add	r26, r24
    356a:	b9 1f       	adc	r27, r25
    356c:	1c 92       	st	X, r1
			cfg_parse(text);
    356e:	0e 94 09 19 	call	0x3212	; 0x3212 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    3572:	a8 96       	adiw	r28, 0x28	; 40
    3574:	cd bf       	out	0x3d, r28	; 61
    3576:	de bf       	out	0x3e, r29	; 62
    3578:	cf 91       	pop	r28
    357a:	df 91       	pop	r29
    357c:	1f 91       	pop	r17
    357e:	0f 91       	pop	r16
    3580:	ff 90       	pop	r15
    3582:	ef 90       	pop	r14
    3584:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    3586:	8d 30       	cpi	r24, 0x0D	; 13
    3588:	21 f0       	breq	.+8      	; 0x3592 <cfg_test+0x62>
    358a:	8a 30       	cpi	r24, 0x0A	; 10
    358c:	11 f0       	breq	.+4      	; 0x3592 <cfg_test+0x62>
    358e:	8b 33       	cpi	r24, 0x3B	; 59
    3590:	49 f4       	brne	.+18     	; 0x35a4 <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    3592:	ae 0d       	add	r26, r14
    3594:	bf 1d       	adc	r27, r15
    3596:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    3598:	c7 01       	movw	r24, r14
    359a:	0e 94 09 19 	call	0x3212	; 0x3212 <cfg_parse>
    359e:	a0 e0       	ldi	r26, 0x00	; 0
    35a0:	b0 e0       	ldi	r27, 0x00	; 0
    35a2:	da cf       	rjmp	.-76     	; 0x3558 <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    35a4:	81 32       	cpi	r24, 0x21	; 33
    35a6:	c0 f2       	brcs	.-80     	; 0x3558 <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    35a8:	f7 01       	movw	r30, r14
    35aa:	ea 0f       	add	r30, r26
    35ac:	fb 1f       	adc	r31, r27
    35ae:	80 83       	st	Z, r24
    35b0:	11 96       	adiw	r26, 0x01	; 1
    35b2:	d2 cf       	rjmp	.-92     	; 0x3558 <cfg_test+0x28>

000035b4 <en_init>:


void en_init(void) 
{
	return;
}
    35b4:	08 95       	ret

000035b6 <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
    35b6:	88 23       	and	r24, r24
    35b8:	b1 f0       	breq	.+44     	; 0x35e6 <en_write+0x30>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    35ba:	e0 91 9b 24 	lds	r30, 0x249B
    35be:	f0 91 9c 24 	lds	r31, 0x249C
    35c2:	80 e2       	ldi	r24, 0x20	; 32
    35c4:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    35c6:	e0 91 8b 24 	lds	r30, 0x248B
    35ca:	f0 91 8c 24 	lds	r31, 0x248C
    35ce:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    35d0:	e0 91 7b 24 	lds	r30, 0x247B
    35d4:	f0 91 7c 24 	lds	r31, 0x247C
    35d8:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    35da:	e0 91 6b 24 	lds	r30, 0x246B
    35de:	f0 91 6c 24 	lds	r31, 0x246C
    35e2:	85 83       	std	Z+5, r24	; 0x05
    35e4:	08 95       	ret
void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    35e6:	e0 91 9b 24 	lds	r30, 0x249B
    35ea:	f0 91 9c 24 	lds	r31, 0x249C
    35ee:	80 e2       	ldi	r24, 0x20	; 32
    35f0:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    35f2:	e0 91 8b 24 	lds	r30, 0x248B
    35f6:	f0 91 8c 24 	lds	r31, 0x248C
    35fa:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    35fc:	e0 91 7b 24 	lds	r30, 0x247B
    3600:	f0 91 7c 24 	lds	r31, 0x247C
    3604:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    3606:	e0 91 6b 24 	lds	r30, 0x246B
    360a:	f0 91 6c 24 	lds	r31, 0x246C
    360e:	86 83       	std	Z+6, r24	; 0x06
    3610:	08 95       	ret

00003612 <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    3612:	0f 93       	push	r16
    3614:	df 93       	push	r29
    3616:	cf 93       	push	r28
    3618:	0f 92       	push	r0
    361a:	cd b7       	in	r28, 0x3d	; 61
    361c:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    361e:	8b ec       	ldi	r24, 0xCB	; 203
    3620:	e0 e5       	ldi	r30, 0x50	; 80
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    3626:	88 e0       	ldi	r24, 0x08	; 8
    3628:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    362c:	80 91 51 00 	lds	r24, 0x0051
    3630:	83 ff       	sbrs	r24, 3
    3632:	fc cf       	rjmp	.-8      	; 0x362c <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    3634:	82 ec       	ldi	r24, 0xC2	; 194
    3636:	e0 e5       	ldi	r30, 0x50	; 80
    3638:	f0 e0       	ldi	r31, 0x00	; 0
    363a:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    363c:	88 e1       	ldi	r24, 0x18	; 24
    363e:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    3642:	80 91 51 00 	lds	r24, 0x0051
    3646:	84 ff       	sbrs	r24, 4
    3648:	fc cf       	rjmp	.-8      	; 0x3642 <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    364a:	8f b7       	in	r24, 0x3f	; 63
    364c:	89 83       	std	Y+1, r24	; 0x01
    364e:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3650:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3652:	24 e0       	ldi	r18, 0x04	; 4
    3654:	80 e4       	ldi	r24, 0x40	; 64
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	fc 01       	movw	r30, r24
    365a:	08 ed       	ldi	r16, 0xD8	; 216
    365c:	04 bf       	out	0x34, r16	; 52
    365e:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    3664:	80 91 50 00 	lds	r24, 0x0050
    3668:	8e 7f       	andi	r24, 0xFE	; 254
    366a:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    366e:	0f 90       	pop	r0
    3670:	cf 91       	pop	r28
    3672:	df 91       	pop	r29
    3674:	0f 91       	pop	r16
    3676:	08 95       	ret

00003678 <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    3678:	0e 94 09 1b 	call	0x3612	; 0x3612 <xmega_init_clocks>
}
    367c:	08 95       	ret

0000367e <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    367e:	0f 93       	push	r16
    3680:	df 93       	push	r29
    3682:	cf 93       	push	r28
    3684:	0f 92       	push	r0
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    368a:	2f b7       	in	r18, 0x3f	; 63
    368c:	29 83       	std	Y+1, r18	; 0x01
    368e:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3690:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3692:	fc 01       	movw	r30, r24
    3694:	08 ed       	ldi	r16, 0xD8	; 216
    3696:	04 bf       	out	0x34, r16	; 52
    3698:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	8f bf       	out	0x3f, r24	; 63
#endif
}
    369e:	0f 90       	pop	r0
    36a0:	cf 91       	pop	r28
    36a2:	df 91       	pop	r29
    36a4:	0f 91       	pop	r16
    36a6:	08 95       	ret

000036a8 <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

void mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    36a8:	10 92 84 21 	sts	0x2184, r1
	ma.arc_state = MC_STATE_OFF;
    36ac:	10 92 0f 25 	sts	0x250F, r1
}
    36b0:	08 95       	ret

000036b2 <mc_go_home>:
 */

void mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    36b2:	8c e0       	ldi	r24, 0x0C	; 12
    36b4:	e5 e8       	ldi	r30, 0x85	; 133
    36b6:	f1 e2       	ldi	r31, 0x21	; 33
    36b8:	df 01       	movw	r26, r30
    36ba:	1d 92       	st	X+, r1
    36bc:	8a 95       	dec	r24
    36be:	e9 f7       	brne	.-6      	; 0x36ba <mc_go_home+0x8>
}
    36c0:	08 95       	ret

000036c2 <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    36c2:	8c e0       	ldi	r24, 0x0C	; 12
    36c4:	e5 e8       	ldi	r30, 0x85	; 133
    36c6:	f1 e2       	ldi	r31, 0x21	; 33
    36c8:	df 01       	movw	r26, r30
    36ca:	1d 92       	st	X+, r1
    36cc:	8a 95       	dec	r24
    36ce:	e9 f7       	brne	.-6      	; 0x36ca <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    36d0:	10 92 84 21 	sts	0x2184, r1
	ma.arc_state = MC_STATE_OFF;
    36d4:	10 92 0f 25 	sts	0x250F, r1
}
    36d8:	08 95       	ret

000036da <mc_dwell>:
 * The stepper driver knows this and times the move but does not send any pulses.
 * This routine uses the X asis as only the X axis knows how to deal with a dwell.
 */

int mc_dwell(uint32_t milliseconds) 
{
    36da:	af 92       	push	r10
    36dc:	bf 92       	push	r11
    36de:	cf 92       	push	r12
    36e0:	df 92       	push	r13
    36e2:	ef 92       	push	r14
    36e4:	ff 92       	push	r15
    36e6:	0f 93       	push	r16
    36e8:	1f 93       	push	r17
    36ea:	5b 01       	movw	r10, r22
    36ec:	6c 01       	movw	r12, r24
    mv_queue_move_buffer(0, 0, 0, milliseconds);
    36ee:	60 e0       	ldi	r22, 0x00	; 0
    36f0:	70 e0       	ldi	r23, 0x00	; 0
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	40 e0       	ldi	r20, 0x00	; 0
    36fc:	50 e0       	ldi	r21, 0x00	; 0
    36fe:	ee 24       	eor	r14, r14
    3700:	ff 24       	eor	r15, r15
    3702:	87 01       	movw	r16, r14
    3704:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <mv_queue_move_buffer>
	return (TG_OK);
}
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	1f 91       	pop	r17
    370e:	0f 91       	pop	r16
    3710:	ff 90       	pop	r15
    3712:	ef 90       	pop	r14
    3714:	df 90       	pop	r13
    3716:	cf 90       	pop	r12
    3718:	bf 90       	pop	r11
    371a:	af 90       	pop	r10
    371c:	08 95       	ret

0000371e <mc_line_continuation>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continuation() 
{
    371e:	af 92       	push	r10
    3720:	bf 92       	push	r11
    3722:	cf 92       	push	r12
    3724:	df 92       	push	r13
    3726:	ef 92       	push	r14
    3728:	ff 92       	push	r15
    372a:	0f 93       	push	r16
    372c:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    372e:	80 91 84 21 	lds	r24, 0x2184
    3732:	88 23       	and	r24, r24
    3734:	19 f4       	brne	.+6      	; 0x373c <mc_line_continuation+0x1e>
    3736:	21 e0       	ldi	r18, 0x01	; 1
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	30 c0       	rjmp	.+96     	; 0x379c <mc_line_continuation+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    373c:	82 e0       	ldi	r24, 0x02	; 2
    373e:	80 93 84 21 	sts	0x2184, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    3742:	0e 94 a4 31 	call	0x6348	; 0x6348 <mv_test_move_buffer_full>
    3746:	88 23       	and	r24, r24
    3748:	19 f0       	breq	.+6      	; 0x3750 <mc_line_continuation+0x32>
    374a:	22 e0       	ldi	r18, 0x02	; 2
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	26 c0       	rjmp	.+76     	; 0x379c <mc_line_continuation+0x7e>
		return (TG_CONTINUE);
	}
	mv_queue_move_buffer(mc.steps[X_AXIS], mc.steps[Y_AXIS], mc.steps[Z_AXIS], mc.microseconds); 
    3750:	60 91 9d 21 	lds	r22, 0x219D
    3754:	70 91 9e 21 	lds	r23, 0x219E
    3758:	80 91 9f 21 	lds	r24, 0x219F
    375c:	90 91 a0 21 	lds	r25, 0x21A0
    3760:	20 91 a1 21 	lds	r18, 0x21A1
    3764:	30 91 a2 21 	lds	r19, 0x21A2
    3768:	40 91 a3 21 	lds	r20, 0x21A3
    376c:	50 91 a4 21 	lds	r21, 0x21A4
    3770:	e0 90 a5 21 	lds	r14, 0x21A5
    3774:	f0 90 a6 21 	lds	r15, 0x21A6
    3778:	00 91 a7 21 	lds	r16, 0x21A7
    377c:	10 91 a8 21 	lds	r17, 0x21A8
    3780:	a0 90 a9 21 	lds	r10, 0x21A9
    3784:	b0 90 aa 21 	lds	r11, 0x21AA
    3788:	c0 90 ab 21 	lds	r12, 0x21AB
    378c:	d0 90 ac 21 	lds	r13, 0x21AC
    3790:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    3794:	10 92 84 21 	sts	0x2184, r1
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    379c:	c9 01       	movw	r24, r18
    379e:	1f 91       	pop	r17
    37a0:	0f 91       	pop	r16
    37a2:	ff 90       	pop	r15
    37a4:	ef 90       	pop	r14
    37a6:	df 90       	pop	r13
    37a8:	cf 90       	pop	r12
    37aa:	bf 90       	pop	r11
    37ac:	af 90       	pop	r10
    37ae:	08 95       	ret

000037b0 <mc_line_nonblock>:
/* 
 * mc_line_nonblock() - mc_line with non-blocking behavior
 */

int mc_line_nonblock(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    37b0:	2f 92       	push	r2
    37b2:	3f 92       	push	r3
    37b4:	4f 92       	push	r4
    37b6:	5f 92       	push	r5
    37b8:	6f 92       	push	r6
    37ba:	7f 92       	push	r7
    37bc:	8f 92       	push	r8
    37be:	9f 92       	push	r9
    37c0:	af 92       	push	r10
    37c2:	bf 92       	push	r11
    37c4:	cf 92       	push	r12
    37c6:	df 92       	push	r13
    37c8:	ef 92       	push	r14
    37ca:	ff 92       	push	r15
    37cc:	0f 93       	push	r16
    37ce:	1f 93       	push	r17
    37d0:	df 93       	push	r29
    37d2:	cf 93       	push	r28
    37d4:	cd b7       	in	r28, 0x3d	; 61
    37d6:	de b7       	in	r29, 0x3e	; 62
    37d8:	64 97       	sbiw	r28, 0x14	; 20
    37da:	cd bf       	out	0x3d, r28	; 61
    37dc:	de bf       	out	0x3e, r29	; 62
    37de:	2d 87       	std	Y+13, r18	; 0x0d
    37e0:	3e 87       	std	Y+14, r19	; 0x0e
    37e2:	4f 87       	std	Y+15, r20	; 0x0f
    37e4:	58 8b       	std	Y+16, r21	; 0x10
    37e6:	a9 8a       	std	Y+17, r10	; 0x11
    37e8:	ba 8a       	std	Y+18, r11	; 0x12
    37ea:	cb 8a       	std	Y+19, r12	; 0x13
    37ec:	dc 8a       	std	Y+20, r13	; 0x14
	mc.target[X_AXIS] = lround(x*CFG(X_AXIS).steps_per_mm);
    37ee:	20 91 c0 24 	lds	r18, 0x24C0
    37f2:	30 91 c1 24 	lds	r19, 0x24C1
    37f6:	40 91 c2 24 	lds	r20, 0x24C2
    37fa:	50 91 c3 24 	lds	r21, 0x24C3
    37fe:	29 87       	std	Y+9, r18	; 0x09
    3800:	3a 87       	std	Y+10, r19	; 0x0a
    3802:	4b 87       	std	Y+11, r20	; 0x0b
    3804:	5c 87       	std	Y+12, r21	; 0x0c
    3806:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    380a:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <lround>
    380e:	2b 01       	movw	r4, r22
    3810:	3c 01       	movw	r6, r24
    3812:	40 92 91 21 	sts	0x2191, r4
    3816:	50 92 92 21 	sts	0x2192, r5
    381a:	60 92 93 21 	sts	0x2193, r6
    381e:	70 92 94 21 	sts	0x2194, r7
	mc.target[Y_AXIS] = lround(y*CFG(Y_AXIS).steps_per_mm);
    3822:	80 91 d8 24 	lds	r24, 0x24D8
    3826:	90 91 d9 24 	lds	r25, 0x24D9
    382a:	a0 91 da 24 	lds	r26, 0x24DA
    382e:	b0 91 db 24 	lds	r27, 0x24DB
    3832:	8d 83       	std	Y+5, r24	; 0x05
    3834:	9e 83       	std	Y+6, r25	; 0x06
    3836:	af 83       	std	Y+7, r26	; 0x07
    3838:	b8 87       	std	Y+8, r27	; 0x08
    383a:	6d 85       	ldd	r22, Y+13	; 0x0d
    383c:	7e 85       	ldd	r23, Y+14	; 0x0e
    383e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3840:	98 89       	ldd	r25, Y+16	; 0x10
    3842:	2d 81       	ldd	r18, Y+5	; 0x05
    3844:	3e 81       	ldd	r19, Y+6	; 0x06
    3846:	4f 81       	ldd	r20, Y+7	; 0x07
    3848:	58 85       	ldd	r21, Y+8	; 0x08
    384a:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    384e:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <lround>
    3852:	5b 01       	movw	r10, r22
    3854:	6c 01       	movw	r12, r24
    3856:	a0 92 95 21 	sts	0x2195, r10
    385a:	b0 92 96 21 	sts	0x2196, r11
    385e:	c0 92 97 21 	sts	0x2197, r12
    3862:	d0 92 98 21 	sts	0x2198, r13
	mc.target[Z_AXIS] = lround(z*CFG(Z_AXIS).steps_per_mm); 
    3866:	20 91 f0 24 	lds	r18, 0x24F0
    386a:	30 91 f1 24 	lds	r19, 0x24F1
    386e:	40 91 f2 24 	lds	r20, 0x24F2
    3872:	50 91 f3 24 	lds	r21, 0x24F3
    3876:	29 83       	std	Y+1, r18	; 0x01
    3878:	3a 83       	std	Y+2, r19	; 0x02
    387a:	4b 83       	std	Y+3, r20	; 0x03
    387c:	5c 83       	std	Y+4, r21	; 0x04
    387e:	c8 01       	movw	r24, r16
    3880:	b7 01       	movw	r22, r14
    3882:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    3886:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <lround>
    388a:	9b 01       	movw	r18, r22
    388c:	ac 01       	movw	r20, r24
    388e:	20 93 99 21 	sts	0x2199, r18
    3892:	30 93 9a 21 	sts	0x219A, r19
    3896:	40 93 9b 21 	sts	0x219B, r20
    389a:	50 93 9c 21 	sts	0x219C, r21

	mc.steps[X_AXIS] = mc.target[X_AXIS]-mc.position[X_AXIS];
    389e:	80 91 85 21 	lds	r24, 0x2185
    38a2:	90 91 86 21 	lds	r25, 0x2186
    38a6:	a0 91 87 21 	lds	r26, 0x2187
    38aa:	b0 91 88 21 	lds	r27, 0x2188
    38ae:	83 01       	movw	r16, r6
    38b0:	72 01       	movw	r14, r4
    38b2:	e8 1a       	sub	r14, r24
    38b4:	f9 0a       	sbc	r15, r25
    38b6:	0a 0b       	sbc	r16, r26
    38b8:	1b 0b       	sbc	r17, r27
    38ba:	e0 92 9d 21 	sts	0x219D, r14
    38be:	f0 92 9e 21 	sts	0x219E, r15
    38c2:	00 93 9f 21 	sts	0x219F, r16
    38c6:	10 93 a0 21 	sts	0x21A0, r17
	mc.steps[Y_AXIS] = mc.target[Y_AXIS]-mc.position[Y_AXIS];
    38ca:	80 91 89 21 	lds	r24, 0x2189
    38ce:	90 91 8a 21 	lds	r25, 0x218A
    38d2:	a0 91 8b 21 	lds	r26, 0x218B
    38d6:	b0 91 8c 21 	lds	r27, 0x218C
    38da:	a8 1a       	sub	r10, r24
    38dc:	b9 0a       	sbc	r11, r25
    38de:	ca 0a       	sbc	r12, r26
    38e0:	db 0a       	sbc	r13, r27
    38e2:	a0 92 a1 21 	sts	0x21A1, r10
    38e6:	b0 92 a2 21 	sts	0x21A2, r11
    38ea:	c0 92 a3 21 	sts	0x21A3, r12
    38ee:	d0 92 a4 21 	sts	0x21A4, r13
	mc.steps[Z_AXIS] = mc.target[Z_AXIS]-mc.position[Z_AXIS];
    38f2:	80 91 8d 21 	lds	r24, 0x218D
    38f6:	90 91 8e 21 	lds	r25, 0x218E
    38fa:	a0 91 8f 21 	lds	r26, 0x218F
    38fe:	b0 91 90 21 	lds	r27, 0x2190
    3902:	19 01       	movw	r2, r18
    3904:	2a 01       	movw	r4, r20
    3906:	28 1a       	sub	r2, r24
    3908:	39 0a       	sbc	r3, r25
    390a:	4a 0a       	sbc	r4, r26
    390c:	5b 0a       	sbc	r5, r27
    390e:	20 92 a5 21 	sts	0x21A5, r2
    3912:	30 92 a6 21 	sts	0x21A6, r3
    3916:	40 92 a7 21 	sts	0x21A7, r4
    391a:	50 92 a8 21 	sts	0x21A8, r5

	if (invert_feed_rate) {
    391e:	89 28       	or	r8, r9
    3920:	59 f0       	breq	.+22     	; 0x3938 <mc_line_nonblock+0x188>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3922:	60 ec       	ldi	r22, 0xC0	; 192
    3924:	71 ee       	ldi	r23, 0xE1	; 225
    3926:	84 e6       	ldi	r24, 0x64	; 100
    3928:	9c e4       	ldi	r25, 0x4C	; 76
    392a:	29 89       	ldd	r18, Y+17	; 0x11
    392c:	3a 89       	ldd	r19, Y+18	; 0x12
    392e:	4b 89       	ldd	r20, Y+19	; 0x13
    3930:	5c 89       	ldd	r21, Y+20	; 0x14
    3932:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    3936:	4a c0       	rjmp	.+148    	; 0x39cc <mc_line_nonblock+0x21c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X_AXIS]/CFG(X_AXIS).steps_per_mm) + 
    3938:	c8 01       	movw	r24, r16
    393a:	b7 01       	movw	r22, r14
    393c:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    3940:	29 85       	ldd	r18, Y+9	; 0x09
    3942:	3a 85       	ldd	r19, Y+10	; 0x0a
    3944:	4b 85       	ldd	r20, Y+11	; 0x0b
    3946:	5c 85       	ldd	r21, Y+12	; 0x0c
    3948:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    394c:	0e 94 4c 47 	call	0x8e98	; 0x8e98 <square>
    3950:	3b 01       	movw	r6, r22
    3952:	4c 01       	movw	r8, r24
    3954:	c6 01       	movw	r24, r12
    3956:	b5 01       	movw	r22, r10
    3958:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    395c:	2d 81       	ldd	r18, Y+5	; 0x05
    395e:	3e 81       	ldd	r19, Y+6	; 0x06
    3960:	4f 81       	ldd	r20, Y+7	; 0x07
    3962:	58 85       	ldd	r21, Y+8	; 0x08
    3964:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    3968:	0e 94 4c 47 	call	0x8e98	; 0x8e98 <square>
    396c:	5b 01       	movw	r10, r22
    396e:	6c 01       	movw	r12, r24
    3970:	c2 01       	movw	r24, r4
    3972:	b1 01       	movw	r22, r2
    3974:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    3978:	29 81       	ldd	r18, Y+1	; 0x01
    397a:	3a 81       	ldd	r19, Y+2	; 0x02
    397c:	4b 81       	ldd	r20, Y+3	; 0x03
    397e:	5c 81       	ldd	r21, Y+4	; 0x04
    3980:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    3984:	0e 94 4c 47 	call	0x8e98	; 0x8e98 <square>
    3988:	7b 01       	movw	r14, r22
    398a:	8c 01       	movw	r16, r24
    398c:	c4 01       	movw	r24, r8
    398e:	b3 01       	movw	r22, r6
    3990:	a6 01       	movw	r20, r12
    3992:	95 01       	movw	r18, r10
    3994:	0e 94 40 43 	call	0x8680	; 0x8680 <__addsf3>
    3998:	a8 01       	movw	r20, r16
    399a:	97 01       	movw	r18, r14
    399c:	0e 94 40 43 	call	0x8680	; 0x8680 <__addsf3>
    39a0:	0e 94 0e 47 	call	0x8e1c	; 0x8e1c <sqrt>
    39a4:	60 93 ad 21 	sts	0x21AD, r22
    39a8:	70 93 ae 21 	sts	0x21AE, r23
    39ac:	80 93 af 21 	sts	0x21AF, r24
    39b0:	90 93 b0 21 	sts	0x21B0, r25
							   square(mc.steps[Y_AXIS]/CFG(Y_AXIS).steps_per_mm) + 
							   square(mc.steps[Z_AXIS]/CFG(Z_AXIS).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    39b4:	29 89       	ldd	r18, Y+17	; 0x11
    39b6:	3a 89       	ldd	r19, Y+18	; 0x12
    39b8:	4b 89       	ldd	r20, Y+19	; 0x13
    39ba:	5c 89       	ldd	r21, Y+20	; 0x14
    39bc:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	34 e2       	ldi	r19, 0x24	; 36
    39c4:	44 e7       	ldi	r20, 0x74	; 116
    39c6:	59 e4       	ldi	r21, 0x49	; 73
    39c8:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    39cc:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <lround>
    39d0:	60 93 a9 21 	sts	0x21A9, r22
    39d4:	70 93 aa 21 	sts	0x21AA, r23
    39d8:	80 93 ab 21 	sts	0x21AB, r24
    39dc:	90 93 ac 21 	sts	0x21AC, r25
	}
	mc.line_state = MC_STATE_NEW;
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	80 93 84 21 	sts	0x2184, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    39e6:	e5 e8       	ldi	r30, 0x85	; 133
    39e8:	f1 e2       	ldi	r31, 0x21	; 33
    39ea:	df 01       	movw	r26, r30
    39ec:	1c 96       	adiw	r26, 0x0c	; 12
    39ee:	8c e0       	ldi	r24, 0x0C	; 12
    39f0:	0d 90       	ld	r0, X+
    39f2:	01 92       	st	Z+, r0
    39f4:	81 50       	subi	r24, 0x01	; 1
    39f6:	e1 f7       	brne	.-8      	; 0x39f0 <mc_line_nonblock+0x240>
	return (mc_line_continuation());
    39f8:	0e 94 8f 1b 	call	0x371e	; 0x371e <mc_line_continuation>
}
    39fc:	64 96       	adiw	r28, 0x14	; 20
    39fe:	cd bf       	out	0x3d, r28	; 61
    3a00:	de bf       	out	0x3e, r29	; 62
    3a02:	cf 91       	pop	r28
    3a04:	df 91       	pop	r29
    3a06:	1f 91       	pop	r17
    3a08:	0f 91       	pop	r16
    3a0a:	ff 90       	pop	r15
    3a0c:	ef 90       	pop	r14
    3a0e:	df 90       	pop	r13
    3a10:	cf 90       	pop	r12
    3a12:	bf 90       	pop	r11
    3a14:	af 90       	pop	r10
    3a16:	9f 90       	pop	r9
    3a18:	8f 90       	pop	r8
    3a1a:	7f 90       	pop	r7
    3a1c:	6f 90       	pop	r6
    3a1e:	5f 90       	pop	r5
    3a20:	4f 90       	pop	r4
    3a22:	3f 90       	pop	r3
    3a24:	2f 90       	pop	r2
    3a26:	08 95       	ret

00003a28 <mc_line>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    3a28:	2f 92       	push	r2
    3a2a:	3f 92       	push	r3
    3a2c:	4f 92       	push	r4
    3a2e:	5f 92       	push	r5
    3a30:	6f 92       	push	r6
    3a32:	7f 92       	push	r7
    3a34:	8f 92       	push	r8
    3a36:	9f 92       	push	r9
    3a38:	af 92       	push	r10
    3a3a:	bf 92       	push	r11
    3a3c:	cf 92       	push	r12
    3a3e:	df 92       	push	r13
    3a40:	ef 92       	push	r14
    3a42:	ff 92       	push	r15
    3a44:	0f 93       	push	r16
    3a46:	1f 93       	push	r17
    3a48:	df 93       	push	r29
    3a4a:	cf 93       	push	r28
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
    3a50:	6c 97       	sbiw	r28, 0x1c	; 28
    3a52:	cd bf       	out	0x3d, r28	; 61
    3a54:	de bf       	out	0x3e, r29	; 62
    3a56:	2d 8b       	std	Y+21, r18	; 0x15
    3a58:	3e 8b       	std	Y+22, r19	; 0x16
    3a5a:	4f 8b       	std	Y+23, r20	; 0x17
    3a5c:	58 8f       	std	Y+24, r21	; 0x18
    3a5e:	a9 8e       	std	Y+25, r10	; 0x19
    3a60:	ba 8e       	std	Y+26, r11	; 0x1a
    3a62:	cb 8e       	std	Y+27, r12	; 0x1b
    3a64:	dc 8e       	std	Y+28, r13	; 0x1c
	mc.target[X_AXIS] = lround(x*CFG(X_AXIS).steps_per_mm);
    3a66:	20 91 c0 24 	lds	r18, 0x24C0
    3a6a:	30 91 c1 24 	lds	r19, 0x24C1
    3a6e:	40 91 c2 24 	lds	r20, 0x24C2
    3a72:	50 91 c3 24 	lds	r21, 0x24C3
    3a76:	29 8b       	std	Y+17, r18	; 0x11
    3a78:	3a 8b       	std	Y+18, r19	; 0x12
    3a7a:	4b 8b       	std	Y+19, r20	; 0x13
    3a7c:	5c 8b       	std	Y+20, r21	; 0x14
    3a7e:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    3a82:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <lround>
    3a86:	2b 01       	movw	r4, r22
    3a88:	3c 01       	movw	r6, r24
    3a8a:	40 92 91 21 	sts	0x2191, r4
    3a8e:	50 92 92 21 	sts	0x2192, r5
    3a92:	60 92 93 21 	sts	0x2193, r6
    3a96:	70 92 94 21 	sts	0x2194, r7
	mc.target[Y_AXIS] = lround(y*CFG(Y_AXIS).steps_per_mm);
    3a9a:	80 91 d8 24 	lds	r24, 0x24D8
    3a9e:	90 91 d9 24 	lds	r25, 0x24D9
    3aa2:	a0 91 da 24 	lds	r26, 0x24DA
    3aa6:	b0 91 db 24 	lds	r27, 0x24DB
    3aaa:	8d 87       	std	Y+13, r24	; 0x0d
    3aac:	9e 87       	std	Y+14, r25	; 0x0e
    3aae:	af 87       	std	Y+15, r26	; 0x0f
    3ab0:	b8 8b       	std	Y+16, r27	; 0x10
    3ab2:	6d 89       	ldd	r22, Y+21	; 0x15
    3ab4:	7e 89       	ldd	r23, Y+22	; 0x16
    3ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    3ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    3aba:	2d 85       	ldd	r18, Y+13	; 0x0d
    3abc:	3e 85       	ldd	r19, Y+14	; 0x0e
    3abe:	4f 85       	ldd	r20, Y+15	; 0x0f
    3ac0:	58 89       	ldd	r21, Y+16	; 0x10
    3ac2:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    3ac6:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <lround>
    3aca:	5b 01       	movw	r10, r22
    3acc:	6c 01       	movw	r12, r24
    3ace:	a0 92 95 21 	sts	0x2195, r10
    3ad2:	b0 92 96 21 	sts	0x2196, r11
    3ad6:	c0 92 97 21 	sts	0x2197, r12
    3ada:	d0 92 98 21 	sts	0x2198, r13
	mc.target[Z_AXIS] = lround(z*CFG(Z_AXIS).steps_per_mm); 
    3ade:	20 91 f0 24 	lds	r18, 0x24F0
    3ae2:	30 91 f1 24 	lds	r19, 0x24F1
    3ae6:	40 91 f2 24 	lds	r20, 0x24F2
    3aea:	50 91 f3 24 	lds	r21, 0x24F3
    3aee:	29 87       	std	Y+9, r18	; 0x09
    3af0:	3a 87       	std	Y+10, r19	; 0x0a
    3af2:	4b 87       	std	Y+11, r20	; 0x0b
    3af4:	5c 87       	std	Y+12, r21	; 0x0c
    3af6:	c8 01       	movw	r24, r16
    3af8:	b7 01       	movw	r22, r14
    3afa:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    3afe:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <lround>
    3b02:	9b 01       	movw	r18, r22
    3b04:	ac 01       	movw	r20, r24
    3b06:	20 93 99 21 	sts	0x2199, r18
    3b0a:	30 93 9a 21 	sts	0x219A, r19
    3b0e:	40 93 9b 21 	sts	0x219B, r20
    3b12:	50 93 9c 21 	sts	0x219C, r21

	mc.steps[X_AXIS] = mc.target[X_AXIS]-mc.position[X_AXIS];
    3b16:	80 91 85 21 	lds	r24, 0x2185
    3b1a:	90 91 86 21 	lds	r25, 0x2186
    3b1e:	a0 91 87 21 	lds	r26, 0x2187
    3b22:	b0 91 88 21 	lds	r27, 0x2188
    3b26:	83 01       	movw	r16, r6
    3b28:	72 01       	movw	r14, r4
    3b2a:	e8 1a       	sub	r14, r24
    3b2c:	f9 0a       	sbc	r15, r25
    3b2e:	0a 0b       	sbc	r16, r26
    3b30:	1b 0b       	sbc	r17, r27
    3b32:	ed 82       	std	Y+5, r14	; 0x05
    3b34:	fe 82       	std	Y+6, r15	; 0x06
    3b36:	0f 83       	std	Y+7, r16	; 0x07
    3b38:	18 87       	std	Y+8, r17	; 0x08
    3b3a:	e0 92 9d 21 	sts	0x219D, r14
    3b3e:	f0 92 9e 21 	sts	0x219E, r15
    3b42:	00 93 9f 21 	sts	0x219F, r16
    3b46:	10 93 a0 21 	sts	0x21A0, r17
	mc.steps[Y_AXIS] = mc.target[Y_AXIS]-mc.position[Y_AXIS];
    3b4a:	80 91 89 21 	lds	r24, 0x2189
    3b4e:	90 91 8a 21 	lds	r25, 0x218A
    3b52:	a0 91 8b 21 	lds	r26, 0x218B
    3b56:	b0 91 8c 21 	lds	r27, 0x218C
    3b5a:	86 01       	movw	r16, r12
    3b5c:	75 01       	movw	r14, r10
    3b5e:	e8 1a       	sub	r14, r24
    3b60:	f9 0a       	sbc	r15, r25
    3b62:	0a 0b       	sbc	r16, r26
    3b64:	1b 0b       	sbc	r17, r27
    3b66:	e9 82       	std	Y+1, r14	; 0x01
    3b68:	fa 82       	std	Y+2, r15	; 0x02
    3b6a:	0b 83       	std	Y+3, r16	; 0x03
    3b6c:	1c 83       	std	Y+4, r17	; 0x04
    3b6e:	e0 92 a1 21 	sts	0x21A1, r14
    3b72:	f0 92 a2 21 	sts	0x21A2, r15
    3b76:	00 93 a3 21 	sts	0x21A3, r16
    3b7a:	10 93 a4 21 	sts	0x21A4, r17
	mc.steps[Z_AXIS] = mc.target[Z_AXIS]-mc.position[Z_AXIS];
    3b7e:	80 91 8d 21 	lds	r24, 0x218D
    3b82:	90 91 8e 21 	lds	r25, 0x218E
    3b86:	a0 91 8f 21 	lds	r26, 0x218F
    3b8a:	b0 91 90 21 	lds	r27, 0x2190
    3b8e:	19 01       	movw	r2, r18
    3b90:	2a 01       	movw	r4, r20
    3b92:	28 1a       	sub	r2, r24
    3b94:	39 0a       	sbc	r3, r25
    3b96:	4a 0a       	sbc	r4, r26
    3b98:	5b 0a       	sbc	r5, r27
    3b9a:	20 92 a5 21 	sts	0x21A5, r2
    3b9e:	30 92 a6 21 	sts	0x21A6, r3
    3ba2:	40 92 a7 21 	sts	0x21A7, r4
    3ba6:	50 92 a8 21 	sts	0x21A8, r5

	if (invert_feed_rate) {
    3baa:	89 28       	or	r8, r9
    3bac:	59 f0       	breq	.+22     	; 0x3bc4 <mc_line+0x19c>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3bae:	60 ec       	ldi	r22, 0xC0	; 192
    3bb0:	71 ee       	ldi	r23, 0xE1	; 225
    3bb2:	84 e6       	ldi	r24, 0x64	; 100
    3bb4:	9c e4       	ldi	r25, 0x4C	; 76
    3bb6:	29 8d       	ldd	r18, Y+25	; 0x19
    3bb8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3bba:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3bbc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3bbe:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    3bc2:	4e c0       	rjmp	.+156    	; 0x3c60 <mc_line+0x238>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X_AXIS]/CFG(X_AXIS).steps_per_mm) + 
    3bc4:	6d 81       	ldd	r22, Y+5	; 0x05
    3bc6:	7e 81       	ldd	r23, Y+6	; 0x06
    3bc8:	8f 81       	ldd	r24, Y+7	; 0x07
    3bca:	98 85       	ldd	r25, Y+8	; 0x08
    3bcc:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    3bd0:	29 89       	ldd	r18, Y+17	; 0x11
    3bd2:	3a 89       	ldd	r19, Y+18	; 0x12
    3bd4:	4b 89       	ldd	r20, Y+19	; 0x13
    3bd6:	5c 89       	ldd	r21, Y+20	; 0x14
    3bd8:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    3bdc:	0e 94 4c 47 	call	0x8e98	; 0x8e98 <square>
    3be0:	3b 01       	movw	r6, r22
    3be2:	4c 01       	movw	r8, r24
    3be4:	69 81       	ldd	r22, Y+1	; 0x01
    3be6:	7a 81       	ldd	r23, Y+2	; 0x02
    3be8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bea:	9c 81       	ldd	r25, Y+4	; 0x04
    3bec:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    3bf0:	2d 85       	ldd	r18, Y+13	; 0x0d
    3bf2:	3e 85       	ldd	r19, Y+14	; 0x0e
    3bf4:	4f 85       	ldd	r20, Y+15	; 0x0f
    3bf6:	58 89       	ldd	r21, Y+16	; 0x10
    3bf8:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    3bfc:	0e 94 4c 47 	call	0x8e98	; 0x8e98 <square>
    3c00:	5b 01       	movw	r10, r22
    3c02:	6c 01       	movw	r12, r24
    3c04:	c2 01       	movw	r24, r4
    3c06:	b1 01       	movw	r22, r2
    3c08:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    3c0c:	29 85       	ldd	r18, Y+9	; 0x09
    3c0e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c10:	4b 85       	ldd	r20, Y+11	; 0x0b
    3c12:	5c 85       	ldd	r21, Y+12	; 0x0c
    3c14:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    3c18:	0e 94 4c 47 	call	0x8e98	; 0x8e98 <square>
    3c1c:	7b 01       	movw	r14, r22
    3c1e:	8c 01       	movw	r16, r24
    3c20:	c4 01       	movw	r24, r8
    3c22:	b3 01       	movw	r22, r6
    3c24:	a6 01       	movw	r20, r12
    3c26:	95 01       	movw	r18, r10
    3c28:	0e 94 40 43 	call	0x8680	; 0x8680 <__addsf3>
    3c2c:	a8 01       	movw	r20, r16
    3c2e:	97 01       	movw	r18, r14
    3c30:	0e 94 40 43 	call	0x8680	; 0x8680 <__addsf3>
    3c34:	0e 94 0e 47 	call	0x8e1c	; 0x8e1c <sqrt>
    3c38:	60 93 ad 21 	sts	0x21AD, r22
    3c3c:	70 93 ae 21 	sts	0x21AE, r23
    3c40:	80 93 af 21 	sts	0x21AF, r24
    3c44:	90 93 b0 21 	sts	0x21B0, r25
							   square(mc.steps[Y_AXIS]/CFG(Y_AXIS).steps_per_mm) + 
							   square(mc.steps[Z_AXIS]/CFG(Z_AXIS).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3c48:	29 8d       	ldd	r18, Y+25	; 0x19
    3c4a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3c4c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3c4e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3c50:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    3c54:	20 e0       	ldi	r18, 0x00	; 0
    3c56:	34 e2       	ldi	r19, 0x24	; 36
    3c58:	44 e7       	ldi	r20, 0x74	; 116
    3c5a:	59 e4       	ldi	r21, 0x49	; 73
    3c5c:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    3c60:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <lround>
    3c64:	60 93 a9 21 	sts	0x21A9, r22
    3c68:	70 93 aa 21 	sts	0x21AA, r23
    3c6c:	80 93 ab 21 	sts	0x21AB, r24
    3c70:	90 93 ac 21 	sts	0x21AC, r25
	}
    mv_queue_move_buffer(mc.steps[X_AXIS], mc.steps[Y_AXIS], mc.steps[Z_AXIS], mc.microseconds); 
    3c74:	a0 90 a9 21 	lds	r10, 0x21A9
    3c78:	b0 90 aa 21 	lds	r11, 0x21AA
    3c7c:	c0 90 ab 21 	lds	r12, 0x21AB
    3c80:	d0 90 ac 21 	lds	r13, 0x21AC
    3c84:	6d 81       	ldd	r22, Y+5	; 0x05
    3c86:	7e 81       	ldd	r23, Y+6	; 0x06
    3c88:	8f 81       	ldd	r24, Y+7	; 0x07
    3c8a:	98 85       	ldd	r25, Y+8	; 0x08
    3c8c:	29 81       	ldd	r18, Y+1	; 0x01
    3c8e:	3a 81       	ldd	r19, Y+2	; 0x02
    3c90:	4b 81       	ldd	r20, Y+3	; 0x03
    3c92:	5c 81       	ldd	r21, Y+4	; 0x04
    3c94:	82 01       	movw	r16, r4
    3c96:	71 01       	movw	r14, r2
    3c98:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3c9c:	e5 e8       	ldi	r30, 0x85	; 133
    3c9e:	f1 e2       	ldi	r31, 0x21	; 33
    3ca0:	df 01       	movw	r26, r30
    3ca2:	1c 96       	adiw	r26, 0x0c	; 12
    3ca4:	8c e0       	ldi	r24, 0x0C	; 12
    3ca6:	0d 90       	ld	r0, X+
    3ca8:	01 92       	st	Z+, r0
    3caa:	81 50       	subi	r24, 0x01	; 1
    3cac:	e1 f7       	brne	.-8      	; 0x3ca6 <mc_line+0x27e>
	return (TG_OK);
}
    3cae:	80 e0       	ldi	r24, 0x00	; 0
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	6c 96       	adiw	r28, 0x1c	; 28
    3cb4:	cd bf       	out	0x3d, r28	; 61
    3cb6:	de bf       	out	0x3e, r29	; 62
    3cb8:	cf 91       	pop	r28
    3cba:	df 91       	pop	r29
    3cbc:	1f 91       	pop	r17
    3cbe:	0f 91       	pop	r16
    3cc0:	ff 90       	pop	r15
    3cc2:	ef 90       	pop	r14
    3cc4:	df 90       	pop	r13
    3cc6:	cf 90       	pop	r12
    3cc8:	bf 90       	pop	r11
    3cca:	af 90       	pop	r10
    3ccc:	9f 90       	pop	r9
    3cce:	8f 90       	pop	r8
    3cd0:	7f 90       	pop	r7
    3cd2:	6f 90       	pop	r6
    3cd4:	5f 90       	pop	r5
    3cd6:	4f 90       	pop	r4
    3cd8:	3f 90       	pop	r3
    3cda:	2f 90       	pop	r2
    3cdc:	08 95       	ret

00003cde <mc_arc_continuation>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continuation() 
{
    3cde:	8f 92       	push	r8
    3ce0:	9f 92       	push	r9
    3ce2:	af 92       	push	r10
    3ce4:	bf 92       	push	r11
    3ce6:	cf 92       	push	r12
    3ce8:	df 92       	push	r13
    3cea:	ef 92       	push	r14
    3cec:	ff 92       	push	r15
    3cee:	0f 93       	push	r16
    3cf0:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3cf2:	80 91 0f 25 	lds	r24, 0x250F
    3cf6:	88 23       	and	r24, r24
    3cf8:	19 f4       	brne	.+6      	; 0x3d00 <mc_arc_continuation+0x22>
    3cfa:	21 e0       	ldi	r18, 0x01	; 1
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	dd c0       	rjmp	.+442    	; 0x3eba <mc_arc_continuation+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3d00:	81 30       	cpi	r24, 0x01	; 1
    3d02:	09 f0       	breq	.+2      	; 0x3d06 <mc_arc_continuation+0x28>
    3d04:	ca c0       	rjmp	.+404    	; 0x3e9a <mc_arc_continuation+0x1bc>
		ma.segment_counter=0;
    3d06:	10 92 12 25 	sts	0x2512, r1
    3d0a:	10 92 13 25 	sts	0x2513, r1
		ma.arc_state = MC_STATE_RUNNING;
    3d0e:	82 e0       	ldi	r24, 0x02	; 2
    3d10:	80 93 0f 25 	sts	0x250F, r24
    3d14:	c2 c0       	rjmp	.+388    	; 0x3e9a <mc_arc_continuation+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3d16:	0e 94 a4 31 	call	0x6348	; 0x6348 <mv_test_move_buffer_full>
    3d1a:	88 23       	and	r24, r24
    3d1c:	19 f0       	breq	.+6      	; 0x3d24 <mc_arc_continuation+0x46>
    3d1e:	22 e0       	ldi	r18, 0x02	; 2
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	cb c0       	rjmp	.+406    	; 0x3eba <mc_arc_continuation+0x1dc>
			return (TG_CONTINUE);
		}
		ma.segment_counter++;
    3d24:	80 91 12 25 	lds	r24, 0x2512
    3d28:	90 91 13 25 	lds	r25, 0x2513
    3d2c:	01 96       	adiw	r24, 0x01	; 1
    3d2e:	80 93 12 25 	sts	0x2512, r24
    3d32:	90 93 13 25 	sts	0x2513, r25
		ma.theta += ma.theta_per_segment;
    3d36:	60 91 34 25 	lds	r22, 0x2534
    3d3a:	70 91 35 25 	lds	r23, 0x2535
    3d3e:	80 91 36 25 	lds	r24, 0x2536
    3d42:	90 91 37 25 	lds	r25, 0x2537
    3d46:	20 91 40 25 	lds	r18, 0x2540
    3d4a:	30 91 41 25 	lds	r19, 0x2541
    3d4e:	40 91 42 25 	lds	r20, 0x2542
    3d52:	50 91 43 25 	lds	r21, 0x2543
    3d56:	0e 94 40 43 	call	0x8680	; 0x8680 <__addsf3>
    3d5a:	7b 01       	movw	r14, r22
    3d5c:	8c 01       	movw	r16, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	d8 01       	movw	r26, r16
    3d62:	80 93 34 25 	sts	0x2534, r24
    3d66:	90 93 35 25 	sts	0x2535, r25
    3d6a:	a0 93 36 25 	sts	0x2536, r26
    3d6e:	b0 93 37 25 	sts	0x2537, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3d72:	b7 01       	movw	r22, r14
    3d74:	c8 01       	movw	r24, r16
    3d76:	0e 94 04 47 	call	0x8e08	; 0x8e08 <sin>
    3d7a:	80 90 38 25 	lds	r8, 0x2538
    3d7e:	90 90 39 25 	lds	r9, 0x2539
    3d82:	a0 90 3a 25 	lds	r10, 0x253A
    3d86:	b0 90 3b 25 	lds	r11, 0x253B
    3d8a:	c0 90 16 25 	lds	r12, 0x2516
    3d8e:	d0 90 17 25 	lds	r13, 0x2517
    3d92:	cc 0c       	add	r12, r12
    3d94:	dd 1c       	adc	r13, r13
    3d96:	cc 0c       	add	r12, r12
    3d98:	dd 1c       	adc	r13, r13
    3d9a:	2f e0       	ldi	r18, 0x0F	; 15
    3d9c:	35 e2       	ldi	r19, 0x25	; 37
    3d9e:	c2 0e       	add	r12, r18
    3da0:	d3 1e       	adc	r13, r19
    3da2:	a5 01       	movw	r20, r10
    3da4:	94 01       	movw	r18, r8
    3da6:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    3daa:	9b 01       	movw	r18, r22
    3dac:	ac 01       	movw	r20, r24
    3dae:	60 91 2c 25 	lds	r22, 0x252C
    3db2:	70 91 2d 25 	lds	r23, 0x252D
    3db6:	80 91 2e 25 	lds	r24, 0x252E
    3dba:	90 91 2f 25 	lds	r25, 0x252F
    3dbe:	0e 94 40 43 	call	0x8680	; 0x8680 <__addsf3>
    3dc2:	f6 01       	movw	r30, r12
    3dc4:	65 87       	std	Z+13, r22	; 0x0d
    3dc6:	76 87       	std	Z+14, r23	; 0x0e
    3dc8:	87 87       	std	Z+15, r24	; 0x0f
    3dca:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3dcc:	b7 01       	movw	r22, r14
    3dce:	c8 01       	movw	r24, r16
    3dd0:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <cos>
    3dd4:	00 91 18 25 	lds	r16, 0x2518
    3dd8:	10 91 19 25 	lds	r17, 0x2519
    3ddc:	00 0f       	add	r16, r16
    3dde:	11 1f       	adc	r17, r17
    3de0:	00 0f       	add	r16, r16
    3de2:	11 1f       	adc	r17, r17
    3de4:	01 5f       	subi	r16, 0xF1	; 241
    3de6:	1a 4d       	sbci	r17, 0xDA	; 218
    3de8:	a5 01       	movw	r20, r10
    3dea:	94 01       	movw	r18, r8
    3dec:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    3df0:	9b 01       	movw	r18, r22
    3df2:	ac 01       	movw	r20, r24
    3df4:	60 91 30 25 	lds	r22, 0x2530
    3df8:	70 91 31 25 	lds	r23, 0x2531
    3dfc:	80 91 32 25 	lds	r24, 0x2532
    3e00:	90 91 33 25 	lds	r25, 0x2533
    3e04:	0e 94 40 43 	call	0x8680	; 0x8680 <__addsf3>
    3e08:	f8 01       	movw	r30, r16
    3e0a:	65 87       	std	Z+13, r22	; 0x0d
    3e0c:	76 87       	std	Z+14, r23	; 0x0e
    3e0e:	87 87       	std	Z+15, r24	; 0x0f
    3e10:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3e12:	00 91 1a 25 	lds	r16, 0x251A
    3e16:	10 91 1b 25 	lds	r17, 0x251B
    3e1a:	00 0f       	add	r16, r16
    3e1c:	11 1f       	adc	r17, r17
    3e1e:	00 0f       	add	r16, r16
    3e20:	11 1f       	adc	r17, r17
    3e22:	01 5f       	subi	r16, 0xF1	; 241
    3e24:	1a 4d       	sbci	r17, 0xDA	; 218
    3e26:	f8 01       	movw	r30, r16
    3e28:	65 85       	ldd	r22, Z+13	; 0x0d
    3e2a:	76 85       	ldd	r23, Z+14	; 0x0e
    3e2c:	87 85       	ldd	r24, Z+15	; 0x0f
    3e2e:	90 89       	ldd	r25, Z+16	; 0x10
    3e30:	20 91 44 25 	lds	r18, 0x2544
    3e34:	30 91 45 25 	lds	r19, 0x2545
    3e38:	40 91 46 25 	lds	r20, 0x2546
    3e3c:	50 91 47 25 	lds	r21, 0x2547
    3e40:	0e 94 40 43 	call	0x8680	; 0x8680 <__addsf3>
    3e44:	f8 01       	movw	r30, r16
    3e46:	65 87       	std	Z+13, r22	; 0x0d
    3e48:	76 87       	std	Z+14, r23	; 0x0e
    3e4a:	87 87       	std	Z+15, r24	; 0x0f
    3e4c:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X_AXIS], 
    3e4e:	60 91 1c 25 	lds	r22, 0x251C
    3e52:	70 91 1d 25 	lds	r23, 0x251D
    3e56:	80 91 1e 25 	lds	r24, 0x251E
    3e5a:	90 91 1f 25 	lds	r25, 0x251F
    3e5e:	20 91 20 25 	lds	r18, 0x2520
    3e62:	30 91 21 25 	lds	r19, 0x2521
    3e66:	40 91 22 25 	lds	r20, 0x2522
    3e6a:	50 91 23 25 	lds	r21, 0x2523
    3e6e:	e0 90 24 25 	lds	r14, 0x2524
    3e72:	f0 90 25 25 	lds	r15, 0x2525
    3e76:	00 91 26 25 	lds	r16, 0x2526
    3e7a:	10 91 27 25 	lds	r17, 0x2527
    3e7e:	a0 90 3c 25 	lds	r10, 0x253C
    3e82:	b0 90 3d 25 	lds	r11, 0x253D
    3e86:	c0 90 3e 25 	lds	r12, 0x253E
    3e8a:	d0 90 3f 25 	lds	r13, 0x253F
    3e8e:	80 90 14 25 	lds	r8, 0x2514
    3e92:	90 90 15 25 	lds	r9, 0x2515
    3e96:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3e9a:	20 91 12 25 	lds	r18, 0x2512
    3e9e:	30 91 13 25 	lds	r19, 0x2513
    3ea2:	80 91 10 25 	lds	r24, 0x2510
    3ea6:	90 91 11 25 	lds	r25, 0x2511
    3eaa:	82 17       	cp	r24, r18
    3eac:	93 07       	cpc	r25, r19
    3eae:	0c f0       	brlt	.+2      	; 0x3eb2 <mc_arc_continuation+0x1d4>
    3eb0:	32 cf       	rjmp	.-412    	; 0x3d16 <mc_arc_continuation+0x38>
				ma.dtarget[Y_AXIS], 
				ma.dtarget[Z_AXIS], 
				ma.feed_rate, 
				ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3eb2:	10 92 0f 25 	sts	0x250F, r1
    3eb6:	20 e0       	ldi	r18, 0x00	; 0
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3eba:	c9 01       	movw	r24, r18
    3ebc:	1f 91       	pop	r17
    3ebe:	0f 91       	pop	r16
    3ec0:	ff 90       	pop	r15
    3ec2:	ef 90       	pop	r14
    3ec4:	df 90       	pop	r13
    3ec6:	cf 90       	pop	r12
    3ec8:	bf 90       	pop	r11
    3eca:	af 90       	pop	r10
    3ecc:	9f 90       	pop	r9
    3ece:	8f 90       	pop	r8
    3ed0:	08 95       	ret

00003ed2 <mc_arc_nonblock>:

int mc_arc_nonblock(double theta, double angular_travel, 
					double radius, double linear_travel, 
					int axis_1, int axis_2, int axis_linear, 
					double feed_rate, int invert_feed_rate)
{
    3ed2:	2f 92       	push	r2
    3ed4:	3f 92       	push	r3
    3ed6:	4f 92       	push	r4
    3ed8:	5f 92       	push	r5
    3eda:	6f 92       	push	r6
    3edc:	7f 92       	push	r7
    3ede:	8f 92       	push	r8
    3ee0:	9f 92       	push	r9
    3ee2:	af 92       	push	r10
    3ee4:	bf 92       	push	r11
    3ee6:	cf 92       	push	r12
    3ee8:	df 92       	push	r13
    3eea:	ef 92       	push	r14
    3eec:	ff 92       	push	r15
    3eee:	0f 93       	push	r16
    3ef0:	1f 93       	push	r17
    3ef2:	df 93       	push	r29
    3ef4:	cf 93       	push	r28
    3ef6:	cd b7       	in	r28, 0x3d	; 61
    3ef8:	de b7       	in	r29, 0x3e	; 62
    3efa:	28 97       	sbiw	r28, 0x08	; 8
    3efc:	cd bf       	out	0x3d, r28	; 61
    3efe:	de bf       	out	0x3e, r29	; 62
    3f00:	69 83       	std	Y+1, r22	; 0x01
    3f02:	7a 83       	std	Y+2, r23	; 0x02
    3f04:	8b 83       	std	Y+3, r24	; 0x03
    3f06:	9c 83       	std	Y+4, r25	; 0x04
    3f08:	29 01       	movw	r4, r18
    3f0a:	3a 01       	movw	r6, r20
    3f0c:	ed 82       	std	Y+5, r14	; 0x05
    3f0e:	fe 82       	std	Y+6, r15	; 0x06
    3f10:	0f 83       	std	Y+7, r16	; 0x07
    3f12:	18 87       	std	Y+8, r17	; 0x08
    3f14:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3f16:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3f18:	60 93 34 25 	sts	0x2534, r22
    3f1c:	70 93 35 25 	sts	0x2535, r23
    3f20:	80 93 36 25 	sts	0x2536, r24
    3f24:	90 93 37 25 	sts	0x2537, r25
	ma.radius = radius;
    3f28:	e0 92 38 25 	sts	0x2538, r14
    3f2c:	f0 92 39 25 	sts	0x2539, r15
    3f30:	00 93 3a 25 	sts	0x253A, r16
    3f34:	10 93 3b 25 	sts	0x253B, r17
	ma.angular_travel = angular_travel;
    3f38:	20 93 48 25 	sts	0x2548, r18
    3f3c:	30 93 49 25 	sts	0x2549, r19
    3f40:	40 93 4a 25 	sts	0x254A, r20
    3f44:	50 93 4b 25 	sts	0x254B, r21
	ma.linear_travel = linear_travel;
    3f48:	a0 92 4c 25 	sts	0x254C, r10
    3f4c:	b0 92 4d 25 	sts	0x254D, r11
    3f50:	c0 92 4e 25 	sts	0x254E, r12
    3f54:	d0 92 4f 25 	sts	0x254F, r13
	ma.feed_rate = feed_rate;
    3f58:	8a a1       	ldd	r24, Y+34	; 0x22
    3f5a:	9b a1       	ldd	r25, Y+35	; 0x23
    3f5c:	ac a1       	ldd	r26, Y+36	; 0x24
    3f5e:	bd a1       	ldd	r27, Y+37	; 0x25
    3f60:	80 93 3c 25 	sts	0x253C, r24
    3f64:	90 93 3d 25 	sts	0x253D, r25
    3f68:	a0 93 3e 25 	sts	0x253E, r26
    3f6c:	b0 93 3f 25 	sts	0x253F, r27
	ma.invert_feed_rate = invert_feed_rate;
    3f70:	ae a1       	ldd	r26, Y+38	; 0x26
    3f72:	bf a1       	ldd	r27, Y+39	; 0x27
    3f74:	a0 93 14 25 	sts	0x2514, r26
    3f78:	b0 93 15 25 	sts	0x2515, r27
	ma.axis_1 = axis_1;
    3f7c:	80 92 16 25 	sts	0x2516, r8
    3f80:	90 92 17 25 	sts	0x2517, r9
	ma.axis_2 = axis_2;
    3f84:	20 92 18 25 	sts	0x2518, r2
    3f88:	30 92 19 25 	sts	0x2519, r3
	ma.axis_linear = axis_linear;
    3f8c:	e8 a1       	ldd	r30, Y+32	; 0x20
    3f8e:	f9 a1       	ldd	r31, Y+33	; 0x21
    3f90:	e0 93 1a 25 	sts	0x251A, r30
    3f94:	f0 93 1b 25 	sts	0x251B, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3f98:	ca 01       	movw	r24, r20
    3f9a:	b9 01       	movw	r22, r18
    3f9c:	a8 01       	movw	r20, r16
    3f9e:	97 01       	movw	r18, r14
    3fa0:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    3fa4:	7b 01       	movw	r14, r22
    3fa6:	8c 01       	movw	r16, r24
    3fa8:	c6 01       	movw	r24, r12
    3faa:	b5 01       	movw	r22, r10
    3fac:	0e 94 4e 44 	call	0x889c	; 0x889c <__fixsfsi>
    3fb0:	97 ff       	sbrs	r25, 7
    3fb2:	07 c0       	rjmp	.+14     	; 0x3fc2 <mc_arc_nonblock+0xf0>
    3fb4:	90 95       	com	r25
    3fb6:	80 95       	com	r24
    3fb8:	70 95       	com	r23
    3fba:	61 95       	neg	r22
    3fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    3fbe:	8f 4f       	sbci	r24, 0xFF	; 255
    3fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fc2:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    3fc6:	9b 01       	movw	r18, r22
    3fc8:	ac 01       	movw	r20, r24
    3fca:	c8 01       	movw	r24, r16
    3fcc:	b7 01       	movw	r22, r14
    3fce:	0e 94 dc 45 	call	0x8bb8	; 0x8bb8 <hypot>
    3fd2:	7b 01       	movw	r14, r22
    3fd4:	8c 01       	movw	r16, r24
    3fd6:	60 93 28 25 	sts	0x2528, r22
    3fda:	70 93 29 25 	sts	0x2529, r23
    3fde:	80 93 2a 25 	sts	0x252A, r24
    3fe2:	90 93 2b 25 	sts	0x252B, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3fe6:	2a e0       	ldi	r18, 0x0A	; 10
    3fe8:	37 ed       	ldi	r19, 0xD7	; 215
    3fea:	43 e2       	ldi	r20, 0x23	; 35
    3fec:	5c e3       	ldi	r21, 0x3C	; 60
    3fee:	0e 94 df 43 	call	0x87be	; 0x87be <__cmpsf2>
    3ff2:	88 23       	and	r24, r24
    3ff4:	1c f4       	brge	.+6      	; 0x3ffc <mc_arc_nonblock+0x12a>
    3ff6:	2f e0       	ldi	r18, 0x0F	; 15
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	fb c0       	rjmp	.+502    	; 0x41f2 <mc_arc_nonblock+0x320>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3ffc:	c8 01       	movw	r24, r16
    3ffe:	b7 01       	movw	r22, r14
    4000:	20 91 a1 24 	lds	r18, 0x24A1
    4004:	30 91 a2 24 	lds	r19, 0x24A2
    4008:	40 91 a3 24 	lds	r20, 0x24A3
    400c:	50 91 a4 24 	lds	r21, 0x24A4
    4010:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    4014:	0e 94 cc 43 	call	0x8798	; 0x8798 <ceil>
    4018:	0e 94 4e 44 	call	0x889c	; 0x889c <__fixsfsi>
    401c:	8b 01       	movw	r16, r22
    401e:	60 93 10 25 	sts	0x2510, r22
    4022:	70 93 11 25 	sts	0x2511, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    4026:	8e a1       	ldd	r24, Y+38	; 0x26
    4028:	9f a1       	ldd	r25, Y+39	; 0x27
    402a:	89 2b       	or	r24, r25
    402c:	b9 f0       	breq	.+46     	; 0x405c <mc_arc_nonblock+0x18a>
		ma.feed_rate *= ma.segments; 
    402e:	b8 01       	movw	r22, r16
    4030:	88 27       	eor	r24, r24
    4032:	77 fd       	sbrc	r23, 7
    4034:	80 95       	com	r24
    4036:	98 2f       	mov	r25, r24
    4038:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    403c:	9b 01       	movw	r18, r22
    403e:	ac 01       	movw	r20, r24
    4040:	6a a1       	ldd	r22, Y+34	; 0x22
    4042:	7b a1       	ldd	r23, Y+35	; 0x23
    4044:	8c a1       	ldd	r24, Y+36	; 0x24
    4046:	9d a1       	ldd	r25, Y+37	; 0x25
    4048:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    404c:	60 93 3c 25 	sts	0x253C, r22
    4050:	70 93 3d 25 	sts	0x253D, r23
    4054:	80 93 3e 25 	sts	0x253E, r24
    4058:	90 93 3f 25 	sts	0x253F, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    405c:	b8 01       	movw	r22, r16
    405e:	88 27       	eor	r24, r24
    4060:	77 fd       	sbrc	r23, 7
    4062:	80 95       	com	r24
    4064:	98 2f       	mov	r25, r24
    4066:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    406a:	7b 01       	movw	r14, r22
    406c:	8c 01       	movw	r16, r24
    406e:	c3 01       	movw	r24, r6
    4070:	b2 01       	movw	r22, r4
    4072:	a8 01       	movw	r20, r16
    4074:	97 01       	movw	r18, r14
    4076:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    407a:	60 93 40 25 	sts	0x2540, r22
    407e:	70 93 41 25 	sts	0x2541, r23
    4082:	80 93 42 25 	sts	0x2542, r24
    4086:	90 93 43 25 	sts	0x2543, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    408a:	c6 01       	movw	r24, r12
    408c:	b5 01       	movw	r22, r10
    408e:	a8 01       	movw	r20, r16
    4090:	97 01       	movw	r18, r14
    4092:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    4096:	60 93 44 25 	sts	0x2544, r22
    409a:	70 93 45 25 	sts	0x2545, r23
    409e:	80 93 46 25 	sts	0x2546, r24
    40a2:	90 93 47 25 	sts	0x2547, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    40a6:	69 81       	ldd	r22, Y+1	; 0x01
    40a8:	7a 81       	ldd	r23, Y+2	; 0x02
    40aa:	8b 81       	ldd	r24, Y+3	; 0x03
    40ac:	9c 81       	ldd	r25, Y+4	; 0x04
    40ae:	0e 94 04 47 	call	0x8e08	; 0x8e08 <sin>
    40b2:	5b 01       	movw	r10, r22
    40b4:	6c 01       	movw	r12, r24
    40b6:	f4 01       	movw	r30, r8
    40b8:	ee 0f       	add	r30, r30
    40ba:	ff 1f       	adc	r31, r31
    40bc:	ee 0f       	add	r30, r30
    40be:	ff 1f       	adc	r31, r31
    40c0:	ec 57       	subi	r30, 0x7C	; 124
    40c2:	fe 4d       	sbci	r31, 0xDE	; 222
    40c4:	61 81       	ldd	r22, Z+1	; 0x01
    40c6:	72 81       	ldd	r23, Z+2	; 0x02
    40c8:	83 81       	ldd	r24, Z+3	; 0x03
    40ca:	94 81       	ldd	r25, Z+4	; 0x04
    40cc:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    40d0:	f4 01       	movw	r30, r8
    40d2:	ee 0f       	add	r30, r30
    40d4:	ff 1f       	adc	r31, r31
    40d6:	e8 0d       	add	r30, r8
    40d8:	f9 1d       	adc	r31, r9
    40da:	13 e0       	ldi	r17, 0x03	; 3
    40dc:	ee 0f       	add	r30, r30
    40de:	ff 1f       	adc	r31, r31
    40e0:	1a 95       	dec	r17
    40e2:	e1 f7       	brne	.-8      	; 0x40dc <mc_arc_nonblock+0x20a>
    40e4:	e1 56       	subi	r30, 0x61	; 97
    40e6:	fb 4d       	sbci	r31, 0xDB	; 219
    40e8:	21 a1       	ldd	r18, Z+33	; 0x21
    40ea:	32 a1       	ldd	r19, Z+34	; 0x22
    40ec:	43 a1       	ldd	r20, Z+35	; 0x23
    40ee:	54 a1       	ldd	r21, Z+36	; 0x24
    40f0:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    40f4:	7b 01       	movw	r14, r22
    40f6:	8c 01       	movw	r16, r24
    40f8:	c6 01       	movw	r24, r12
    40fa:	b5 01       	movw	r22, r10
    40fc:	2d 81       	ldd	r18, Y+5	; 0x05
    40fe:	3e 81       	ldd	r19, Y+6	; 0x06
    4100:	4f 81       	ldd	r20, Y+7	; 0x07
    4102:	58 85       	ldd	r21, Y+8	; 0x08
    4104:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    4108:	9b 01       	movw	r18, r22
    410a:	ac 01       	movw	r20, r24
    410c:	c8 01       	movw	r24, r16
    410e:	b7 01       	movw	r22, r14
    4110:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    4114:	60 93 2c 25 	sts	0x252C, r22
    4118:	70 93 2d 25 	sts	0x252D, r23
    411c:	80 93 2e 25 	sts	0x252E, r24
    4120:	90 93 2f 25 	sts	0x252F, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    4124:	69 81       	ldd	r22, Y+1	; 0x01
    4126:	7a 81       	ldd	r23, Y+2	; 0x02
    4128:	8b 81       	ldd	r24, Y+3	; 0x03
    412a:	9c 81       	ldd	r25, Y+4	; 0x04
    412c:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <cos>
    4130:	5b 01       	movw	r10, r22
    4132:	6c 01       	movw	r12, r24
    4134:	f1 01       	movw	r30, r2
    4136:	ee 0f       	add	r30, r30
    4138:	ff 1f       	adc	r31, r31
    413a:	ee 0f       	add	r30, r30
    413c:	ff 1f       	adc	r31, r31
    413e:	ec 57       	subi	r30, 0x7C	; 124
    4140:	fe 4d       	sbci	r31, 0xDE	; 222
    4142:	61 81       	ldd	r22, Z+1	; 0x01
    4144:	72 81       	ldd	r23, Z+2	; 0x02
    4146:	83 81       	ldd	r24, Z+3	; 0x03
    4148:	94 81       	ldd	r25, Z+4	; 0x04
    414a:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    414e:	f1 01       	movw	r30, r2
    4150:	ee 0f       	add	r30, r30
    4152:	ff 1f       	adc	r31, r31
    4154:	e2 0d       	add	r30, r2
    4156:	f3 1d       	adc	r31, r3
    4158:	53 e0       	ldi	r21, 0x03	; 3
    415a:	ee 0f       	add	r30, r30
    415c:	ff 1f       	adc	r31, r31
    415e:	5a 95       	dec	r21
    4160:	e1 f7       	brne	.-8      	; 0x415a <mc_arc_nonblock+0x288>
    4162:	e1 56       	subi	r30, 0x61	; 97
    4164:	fb 4d       	sbci	r31, 0xDB	; 219
    4166:	21 a1       	ldd	r18, Z+33	; 0x21
    4168:	32 a1       	ldd	r19, Z+34	; 0x22
    416a:	43 a1       	ldd	r20, Z+35	; 0x23
    416c:	54 a1       	ldd	r21, Z+36	; 0x24
    416e:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    4172:	7b 01       	movw	r14, r22
    4174:	8c 01       	movw	r16, r24
    4176:	c6 01       	movw	r24, r12
    4178:	b5 01       	movw	r22, r10
    417a:	2d 81       	ldd	r18, Y+5	; 0x05
    417c:	3e 81       	ldd	r19, Y+6	; 0x06
    417e:	4f 81       	ldd	r20, Y+7	; 0x07
    4180:	58 85       	ldd	r21, Y+8	; 0x08
    4182:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    4186:	9b 01       	movw	r18, r22
    4188:	ac 01       	movw	r20, r24
    418a:	c8 01       	movw	r24, r16
    418c:	b7 01       	movw	r22, r14
    418e:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    4192:	60 93 30 25 	sts	0x2530, r22
    4196:	70 93 31 25 	sts	0x2531, r23
    419a:	80 93 32 25 	sts	0x2532, r24
    419e:	90 93 33 25 	sts	0x2533, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
    41a2:	e8 a1       	ldd	r30, Y+32	; 0x20
    41a4:	f9 a1       	ldd	r31, Y+33	; 0x21
    41a6:	ee 0f       	add	r30, r30
    41a8:	ff 1f       	adc	r31, r31
    41aa:	ee 0f       	add	r30, r30
    41ac:	ff 1f       	adc	r31, r31
    41ae:	8f 01       	movw	r16, r30
    41b0:	01 5f       	subi	r16, 0xF1	; 241
    41b2:	1a 4d       	sbci	r17, 0xDA	; 218
    41b4:	ec 57       	subi	r30, 0x7C	; 124
    41b6:	fe 4d       	sbci	r31, 0xDE	; 222
    41b8:	61 81       	ldd	r22, Z+1	; 0x01
    41ba:	72 81       	ldd	r23, Z+2	; 0x02
    41bc:	83 81       	ldd	r24, Z+3	; 0x03
    41be:	94 81       	ldd	r25, Z+4	; 0x04
    41c0:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    41c4:	20 91 f0 24 	lds	r18, 0x24F0
    41c8:	30 91 f1 24 	lds	r19, 0x24F1
    41cc:	40 91 f2 24 	lds	r20, 0x24F2
    41d0:	50 91 f3 24 	lds	r21, 0x24F3
    41d4:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    41d8:	d8 01       	movw	r26, r16
    41da:	1d 96       	adiw	r26, 0x0d	; 13
    41dc:	6d 93       	st	X+, r22
    41de:	7d 93       	st	X+, r23
    41e0:	8d 93       	st	X+, r24
    41e2:	9c 93       	st	X, r25
    41e4:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    41e6:	81 e0       	ldi	r24, 0x01	; 1
    41e8:	80 93 0f 25 	sts	0x250F, r24
	return (mc_arc_continuation());
    41ec:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <mc_arc_continuation>
    41f0:	9c 01       	movw	r18, r24
}
    41f2:	c9 01       	movw	r24, r18
    41f4:	28 96       	adiw	r28, 0x08	; 8
    41f6:	cd bf       	out	0x3d, r28	; 61
    41f8:	de bf       	out	0x3e, r29	; 62
    41fa:	cf 91       	pop	r28
    41fc:	df 91       	pop	r29
    41fe:	1f 91       	pop	r17
    4200:	0f 91       	pop	r16
    4202:	ff 90       	pop	r15
    4204:	ef 90       	pop	r14
    4206:	df 90       	pop	r13
    4208:	cf 90       	pop	r12
    420a:	bf 90       	pop	r11
    420c:	af 90       	pop	r10
    420e:	9f 90       	pop	r9
    4210:	8f 90       	pop	r8
    4212:	7f 90       	pop	r7
    4214:	6f 90       	pop	r6
    4216:	5f 90       	pop	r5
    4218:	4f 90       	pop	r4
    421a:	3f 90       	pop	r3
    421c:	2f 90       	pop	r2
    421e:	08 95       	ret

00004220 <mc_arc>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    4220:	2f 92       	push	r2
    4222:	3f 92       	push	r3
    4224:	4f 92       	push	r4
    4226:	5f 92       	push	r5
    4228:	6f 92       	push	r6
    422a:	7f 92       	push	r7
    422c:	8f 92       	push	r8
    422e:	9f 92       	push	r9
    4230:	af 92       	push	r10
    4232:	bf 92       	push	r11
    4234:	cf 92       	push	r12
    4236:	df 92       	push	r13
    4238:	ef 92       	push	r14
    423a:	ff 92       	push	r15
    423c:	0f 93       	push	r16
    423e:	1f 93       	push	r17
    4240:	df 93       	push	r29
    4242:	cf 93       	push	r28
    4244:	cd b7       	in	r28, 0x3d	; 61
    4246:	de b7       	in	r29, 0x3e	; 62
    4248:	28 97       	sbiw	r28, 0x08	; 8
    424a:	cd bf       	out	0x3d, r28	; 61
    424c:	de bf       	out	0x3e, r29	; 62
    424e:	69 83       	std	Y+1, r22	; 0x01
    4250:	7a 83       	std	Y+2, r23	; 0x02
    4252:	8b 83       	std	Y+3, r24	; 0x03
    4254:	9c 83       	std	Y+4, r25	; 0x04
    4256:	29 01       	movw	r4, r18
    4258:	3a 01       	movw	r6, r20
    425a:	ed 82       	std	Y+5, r14	; 0x05
    425c:	fe 82       	std	Y+6, r15	; 0x06
    425e:	0f 83       	std	Y+7, r16	; 0x07
    4260:	18 87       	std	Y+8, r17	; 0x08
    4262:	2e 8c       	ldd	r2, Y+30	; 0x1e
    4264:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    4266:	60 93 34 25 	sts	0x2534, r22
    426a:	70 93 35 25 	sts	0x2535, r23
    426e:	80 93 36 25 	sts	0x2536, r24
    4272:	90 93 37 25 	sts	0x2537, r25
	ma.radius = radius;
    4276:	e0 92 38 25 	sts	0x2538, r14
    427a:	f0 92 39 25 	sts	0x2539, r15
    427e:	00 93 3a 25 	sts	0x253A, r16
    4282:	10 93 3b 25 	sts	0x253B, r17
	ma.angular_travel = angular_travel;
    4286:	20 93 48 25 	sts	0x2548, r18
    428a:	30 93 49 25 	sts	0x2549, r19
    428e:	40 93 4a 25 	sts	0x254A, r20
    4292:	50 93 4b 25 	sts	0x254B, r21
	ma.linear_travel = linear_travel;
    4296:	a0 92 4c 25 	sts	0x254C, r10
    429a:	b0 92 4d 25 	sts	0x254D, r11
    429e:	c0 92 4e 25 	sts	0x254E, r12
    42a2:	d0 92 4f 25 	sts	0x254F, r13
	ma.feed_rate = feed_rate;
    42a6:	8a a1       	ldd	r24, Y+34	; 0x22
    42a8:	9b a1       	ldd	r25, Y+35	; 0x23
    42aa:	ac a1       	ldd	r26, Y+36	; 0x24
    42ac:	bd a1       	ldd	r27, Y+37	; 0x25
    42ae:	80 93 3c 25 	sts	0x253C, r24
    42b2:	90 93 3d 25 	sts	0x253D, r25
    42b6:	a0 93 3e 25 	sts	0x253E, r26
    42ba:	b0 93 3f 25 	sts	0x253F, r27
	ma.invert_feed_rate = invert_feed_rate;
    42be:	ae a1       	ldd	r26, Y+38	; 0x26
    42c0:	bf a1       	ldd	r27, Y+39	; 0x27
    42c2:	a0 93 14 25 	sts	0x2514, r26
    42c6:	b0 93 15 25 	sts	0x2515, r27
	ma.axis_1 = axis_1;
    42ca:	80 92 16 25 	sts	0x2516, r8
    42ce:	90 92 17 25 	sts	0x2517, r9
	ma.axis_2 = axis_2;
    42d2:	20 92 18 25 	sts	0x2518, r2
    42d6:	30 92 19 25 	sts	0x2519, r3
	ma.axis_linear = axis_linear;
    42da:	e8 a1       	ldd	r30, Y+32	; 0x20
    42dc:	f9 a1       	ldd	r31, Y+33	; 0x21
    42de:	e0 93 1a 25 	sts	0x251A, r30
    42e2:	f0 93 1b 25 	sts	0x251B, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    42e6:	ca 01       	movw	r24, r20
    42e8:	b9 01       	movw	r22, r18
    42ea:	a8 01       	movw	r20, r16
    42ec:	97 01       	movw	r18, r14
    42ee:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    42f2:	7b 01       	movw	r14, r22
    42f4:	8c 01       	movw	r16, r24
    42f6:	c6 01       	movw	r24, r12
    42f8:	b5 01       	movw	r22, r10
    42fa:	0e 94 4e 44 	call	0x889c	; 0x889c <__fixsfsi>
    42fe:	97 ff       	sbrs	r25, 7
    4300:	07 c0       	rjmp	.+14     	; 0x4310 <mc_arc+0xf0>
    4302:	90 95       	com	r25
    4304:	80 95       	com	r24
    4306:	70 95       	com	r23
    4308:	61 95       	neg	r22
    430a:	7f 4f       	sbci	r23, 0xFF	; 255
    430c:	8f 4f       	sbci	r24, 0xFF	; 255
    430e:	9f 4f       	sbci	r25, 0xFF	; 255
    4310:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    4314:	9b 01       	movw	r18, r22
    4316:	ac 01       	movw	r20, r24
    4318:	c8 01       	movw	r24, r16
    431a:	b7 01       	movw	r22, r14
    431c:	0e 94 dc 45 	call	0x8bb8	; 0x8bb8 <hypot>
    4320:	7b 01       	movw	r14, r22
    4322:	8c 01       	movw	r16, r24
    4324:	60 93 28 25 	sts	0x2528, r22
    4328:	70 93 29 25 	sts	0x2529, r23
    432c:	80 93 2a 25 	sts	0x252A, r24
    4330:	90 93 2b 25 	sts	0x252B, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    4334:	2a e0       	ldi	r18, 0x0A	; 10
    4336:	37 ed       	ldi	r19, 0xD7	; 215
    4338:	43 e2       	ldi	r20, 0x23	; 35
    433a:	5c e3       	ldi	r21, 0x3C	; 60
    433c:	0e 94 df 43 	call	0x87be	; 0x87be <__cmpsf2>
    4340:	88 23       	and	r24, r24
    4342:	1c f4       	brge	.+6      	; 0x434a <mc_arc+0x12a>
    4344:	2f e0       	ldi	r18, 0x0F	; 15
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	c7 c1       	rjmp	.+910    	; 0x46d8 <mc_arc+0x4b8>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    434a:	c8 01       	movw	r24, r16
    434c:	b7 01       	movw	r22, r14
    434e:	20 91 a1 24 	lds	r18, 0x24A1
    4352:	30 91 a2 24 	lds	r19, 0x24A2
    4356:	40 91 a3 24 	lds	r20, 0x24A3
    435a:	50 91 a4 24 	lds	r21, 0x24A4
    435e:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    4362:	0e 94 cc 43 	call	0x8798	; 0x8798 <ceil>
    4366:	0e 94 4e 44 	call	0x889c	; 0x889c <__fixsfsi>
    436a:	8b 01       	movw	r16, r22
    436c:	60 93 10 25 	sts	0x2510, r22
    4370:	70 93 11 25 	sts	0x2511, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    4374:	2e a1       	ldd	r18, Y+38	; 0x26
    4376:	3f a1       	ldd	r19, Y+39	; 0x27
    4378:	23 2b       	or	r18, r19
    437a:	b9 f0       	breq	.+46     	; 0x43aa <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    437c:	b8 01       	movw	r22, r16
    437e:	88 27       	eor	r24, r24
    4380:	77 fd       	sbrc	r23, 7
    4382:	80 95       	com	r24
    4384:	98 2f       	mov	r25, r24
    4386:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    438a:	9b 01       	movw	r18, r22
    438c:	ac 01       	movw	r20, r24
    438e:	6a a1       	ldd	r22, Y+34	; 0x22
    4390:	7b a1       	ldd	r23, Y+35	; 0x23
    4392:	8c a1       	ldd	r24, Y+36	; 0x24
    4394:	9d a1       	ldd	r25, Y+37	; 0x25
    4396:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    439a:	60 93 3c 25 	sts	0x253C, r22
    439e:	70 93 3d 25 	sts	0x253D, r23
    43a2:	80 93 3e 25 	sts	0x253E, r24
    43a6:	90 93 3f 25 	sts	0x253F, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    43aa:	b8 01       	movw	r22, r16
    43ac:	88 27       	eor	r24, r24
    43ae:	77 fd       	sbrc	r23, 7
    43b0:	80 95       	com	r24
    43b2:	98 2f       	mov	r25, r24
    43b4:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    43b8:	7b 01       	movw	r14, r22
    43ba:	8c 01       	movw	r16, r24
    43bc:	c3 01       	movw	r24, r6
    43be:	b2 01       	movw	r22, r4
    43c0:	a8 01       	movw	r20, r16
    43c2:	97 01       	movw	r18, r14
    43c4:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    43c8:	60 93 40 25 	sts	0x2540, r22
    43cc:	70 93 41 25 	sts	0x2541, r23
    43d0:	80 93 42 25 	sts	0x2542, r24
    43d4:	90 93 43 25 	sts	0x2543, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    43d8:	c6 01       	movw	r24, r12
    43da:	b5 01       	movw	r22, r10
    43dc:	a8 01       	movw	r20, r16
    43de:	97 01       	movw	r18, r14
    43e0:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    43e4:	60 93 44 25 	sts	0x2544, r22
    43e8:	70 93 45 25 	sts	0x2545, r23
    43ec:	80 93 46 25 	sts	0x2546, r24
    43f0:	90 93 47 25 	sts	0x2547, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    43f4:	69 81       	ldd	r22, Y+1	; 0x01
    43f6:	7a 81       	ldd	r23, Y+2	; 0x02
    43f8:	8b 81       	ldd	r24, Y+3	; 0x03
    43fa:	9c 81       	ldd	r25, Y+4	; 0x04
    43fc:	0e 94 04 47 	call	0x8e08	; 0x8e08 <sin>
    4400:	5b 01       	movw	r10, r22
    4402:	6c 01       	movw	r12, r24
    4404:	f4 01       	movw	r30, r8
    4406:	ee 0f       	add	r30, r30
    4408:	ff 1f       	adc	r31, r31
    440a:	ee 0f       	add	r30, r30
    440c:	ff 1f       	adc	r31, r31
    440e:	ec 57       	subi	r30, 0x7C	; 124
    4410:	fe 4d       	sbci	r31, 0xDE	; 222
    4412:	61 81       	ldd	r22, Z+1	; 0x01
    4414:	72 81       	ldd	r23, Z+2	; 0x02
    4416:	83 81       	ldd	r24, Z+3	; 0x03
    4418:	94 81       	ldd	r25, Z+4	; 0x04
    441a:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    441e:	f4 01       	movw	r30, r8
    4420:	ee 0f       	add	r30, r30
    4422:	ff 1f       	adc	r31, r31
    4424:	e8 0d       	add	r30, r8
    4426:	f9 1d       	adc	r31, r9
    4428:	13 e0       	ldi	r17, 0x03	; 3
    442a:	ee 0f       	add	r30, r30
    442c:	ff 1f       	adc	r31, r31
    442e:	1a 95       	dec	r17
    4430:	e1 f7       	brne	.-8      	; 0x442a <mc_arc+0x20a>
    4432:	e1 56       	subi	r30, 0x61	; 97
    4434:	fb 4d       	sbci	r31, 0xDB	; 219
    4436:	21 a1       	ldd	r18, Z+33	; 0x21
    4438:	32 a1       	ldd	r19, Z+34	; 0x22
    443a:	43 a1       	ldd	r20, Z+35	; 0x23
    443c:	54 a1       	ldd	r21, Z+36	; 0x24
    443e:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    4442:	7b 01       	movw	r14, r22
    4444:	8c 01       	movw	r16, r24
    4446:	c6 01       	movw	r24, r12
    4448:	b5 01       	movw	r22, r10
    444a:	2d 81       	ldd	r18, Y+5	; 0x05
    444c:	3e 81       	ldd	r19, Y+6	; 0x06
    444e:	4f 81       	ldd	r20, Y+7	; 0x07
    4450:	58 85       	ldd	r21, Y+8	; 0x08
    4452:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    4456:	9b 01       	movw	r18, r22
    4458:	ac 01       	movw	r20, r24
    445a:	c8 01       	movw	r24, r16
    445c:	b7 01       	movw	r22, r14
    445e:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    4462:	60 93 2c 25 	sts	0x252C, r22
    4466:	70 93 2d 25 	sts	0x252D, r23
    446a:	80 93 2e 25 	sts	0x252E, r24
    446e:	90 93 2f 25 	sts	0x252F, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    4472:	69 81       	ldd	r22, Y+1	; 0x01
    4474:	7a 81       	ldd	r23, Y+2	; 0x02
    4476:	8b 81       	ldd	r24, Y+3	; 0x03
    4478:	9c 81       	ldd	r25, Y+4	; 0x04
    447a:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <cos>
    447e:	5b 01       	movw	r10, r22
    4480:	6c 01       	movw	r12, r24
    4482:	f1 01       	movw	r30, r2
    4484:	ee 0f       	add	r30, r30
    4486:	ff 1f       	adc	r31, r31
    4488:	ee 0f       	add	r30, r30
    448a:	ff 1f       	adc	r31, r31
    448c:	ec 57       	subi	r30, 0x7C	; 124
    448e:	fe 4d       	sbci	r31, 0xDE	; 222
    4490:	61 81       	ldd	r22, Z+1	; 0x01
    4492:	72 81       	ldd	r23, Z+2	; 0x02
    4494:	83 81       	ldd	r24, Z+3	; 0x03
    4496:	94 81       	ldd	r25, Z+4	; 0x04
    4498:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    449c:	f1 01       	movw	r30, r2
    449e:	ee 0f       	add	r30, r30
    44a0:	ff 1f       	adc	r31, r31
    44a2:	e2 0d       	add	r30, r2
    44a4:	f3 1d       	adc	r31, r3
    44a6:	53 e0       	ldi	r21, 0x03	; 3
    44a8:	ee 0f       	add	r30, r30
    44aa:	ff 1f       	adc	r31, r31
    44ac:	5a 95       	dec	r21
    44ae:	e1 f7       	brne	.-8      	; 0x44a8 <mc_arc+0x288>
    44b0:	e1 56       	subi	r30, 0x61	; 97
    44b2:	fb 4d       	sbci	r31, 0xDB	; 219
    44b4:	21 a1       	ldd	r18, Z+33	; 0x21
    44b6:	32 a1       	ldd	r19, Z+34	; 0x22
    44b8:	43 a1       	ldd	r20, Z+35	; 0x23
    44ba:	54 a1       	ldd	r21, Z+36	; 0x24
    44bc:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    44c0:	7b 01       	movw	r14, r22
    44c2:	8c 01       	movw	r16, r24
    44c4:	c6 01       	movw	r24, r12
    44c6:	b5 01       	movw	r22, r10
    44c8:	2d 81       	ldd	r18, Y+5	; 0x05
    44ca:	3e 81       	ldd	r19, Y+6	; 0x06
    44cc:	4f 81       	ldd	r20, Y+7	; 0x07
    44ce:	58 85       	ldd	r21, Y+8	; 0x08
    44d0:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    44d4:	9b 01       	movw	r18, r22
    44d6:	ac 01       	movw	r20, r24
    44d8:	c8 01       	movw	r24, r16
    44da:	b7 01       	movw	r22, r14
    44dc:	0e 94 3f 43 	call	0x867e	; 0x867e <__subsf3>
    44e0:	60 93 30 25 	sts	0x2530, r22
    44e4:	70 93 31 25 	sts	0x2531, r23
    44e8:	80 93 32 25 	sts	0x2532, r24
    44ec:	90 93 33 25 	sts	0x2533, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
    44f0:	e8 a1       	ldd	r30, Y+32	; 0x20
    44f2:	f9 a1       	ldd	r31, Y+33	; 0x21
    44f4:	ee 0f       	add	r30, r30
    44f6:	ff 1f       	adc	r31, r31
    44f8:	ee 0f       	add	r30, r30
    44fa:	ff 1f       	adc	r31, r31
    44fc:	8f 01       	movw	r16, r30
    44fe:	01 5f       	subi	r16, 0xF1	; 241
    4500:	1a 4d       	sbci	r17, 0xDA	; 218
    4502:	ec 57       	subi	r30, 0x7C	; 124
    4504:	fe 4d       	sbci	r31, 0xDE	; 222
    4506:	61 81       	ldd	r22, Z+1	; 0x01
    4508:	72 81       	ldd	r23, Z+2	; 0x02
    450a:	83 81       	ldd	r24, Z+3	; 0x03
    450c:	94 81       	ldd	r25, Z+4	; 0x04
    450e:	0e 94 81 44 	call	0x8902	; 0x8902 <__floatsisf>
    4512:	20 91 f0 24 	lds	r18, 0x24F0
    4516:	30 91 f1 24 	lds	r19, 0x24F1
    451a:	40 91 f2 24 	lds	r20, 0x24F2
    451e:	50 91 f3 24 	lds	r21, 0x24F3
    4522:	0e 94 e6 43 	call	0x87cc	; 0x87cc <__divsf3>
    4526:	d8 01       	movw	r26, r16
    4528:	1d 96       	adiw	r26, 0x0d	; 13
    452a:	6d 93       	st	X+, r22
    452c:	7d 93       	st	X+, r23
    452e:	8d 93       	st	X+, r24
    4530:	9c 93       	st	X, r25
    4532:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    4534:	10 92 12 25 	sts	0x2512, r1
    4538:	10 92 13 25 	sts	0x2513, r1
    453c:	bf c0       	rjmp	.+382    	; 0x46bc <mc_arc+0x49c>
		ma.theta += ma.theta_per_segment;
    453e:	60 91 34 25 	lds	r22, 0x2534
    4542:	70 91 35 25 	lds	r23, 0x2535
    4546:	80 91 36 25 	lds	r24, 0x2536
    454a:	90 91 37 25 	lds	r25, 0x2537
    454e:	20 91 40 25 	lds	r18, 0x2540
    4552:	30 91 41 25 	lds	r19, 0x2541
    4556:	40 91 42 25 	lds	r20, 0x2542
    455a:	50 91 43 25 	lds	r21, 0x2543
    455e:	0e 94 40 43 	call	0x8680	; 0x8680 <__addsf3>
    4562:	7b 01       	movw	r14, r22
    4564:	8c 01       	movw	r16, r24
    4566:	cb 01       	movw	r24, r22
    4568:	d8 01       	movw	r26, r16
    456a:	80 93 34 25 	sts	0x2534, r24
    456e:	90 93 35 25 	sts	0x2535, r25
    4572:	a0 93 36 25 	sts	0x2536, r26
    4576:	b0 93 37 25 	sts	0x2537, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    457a:	b7 01       	movw	r22, r14
    457c:	c8 01       	movw	r24, r16
    457e:	0e 94 04 47 	call	0x8e08	; 0x8e08 <sin>
    4582:	80 90 38 25 	lds	r8, 0x2538
    4586:	90 90 39 25 	lds	r9, 0x2539
    458a:	a0 90 3a 25 	lds	r10, 0x253A
    458e:	b0 90 3b 25 	lds	r11, 0x253B
    4592:	c0 90 16 25 	lds	r12, 0x2516
    4596:	d0 90 17 25 	lds	r13, 0x2517
    459a:	cc 0c       	add	r12, r12
    459c:	dd 1c       	adc	r13, r13
    459e:	cc 0c       	add	r12, r12
    45a0:	dd 1c       	adc	r13, r13
    45a2:	ef e0       	ldi	r30, 0x0F	; 15
    45a4:	f5 e2       	ldi	r31, 0x25	; 37
    45a6:	ce 0e       	add	r12, r30
    45a8:	df 1e       	adc	r13, r31
    45aa:	a5 01       	movw	r20, r10
    45ac:	94 01       	movw	r18, r8
    45ae:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    45b2:	9b 01       	movw	r18, r22
    45b4:	ac 01       	movw	r20, r24
    45b6:	60 91 2c 25 	lds	r22, 0x252C
    45ba:	70 91 2d 25 	lds	r23, 0x252D
    45be:	80 91 2e 25 	lds	r24, 0x252E
    45c2:	90 91 2f 25 	lds	r25, 0x252F
    45c6:	0e 94 40 43 	call	0x8680	; 0x8680 <__addsf3>
    45ca:	d6 01       	movw	r26, r12
    45cc:	1d 96       	adiw	r26, 0x0d	; 13
    45ce:	6d 93       	st	X+, r22
    45d0:	7d 93       	st	X+, r23
    45d2:	8d 93       	st	X+, r24
    45d4:	9c 93       	st	X, r25
    45d6:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    45d8:	b7 01       	movw	r22, r14
    45da:	c8 01       	movw	r24, r16
    45dc:	0e 94 e3 43 	call	0x87c6	; 0x87c6 <cos>
    45e0:	00 91 18 25 	lds	r16, 0x2518
    45e4:	10 91 19 25 	lds	r17, 0x2519
    45e8:	00 0f       	add	r16, r16
    45ea:	11 1f       	adc	r17, r17
    45ec:	00 0f       	add	r16, r16
    45ee:	11 1f       	adc	r17, r17
    45f0:	01 5f       	subi	r16, 0xF1	; 241
    45f2:	1a 4d       	sbci	r17, 0xDA	; 218
    45f4:	a5 01       	movw	r20, r10
    45f6:	94 01       	movw	r18, r8
    45f8:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    45fc:	9b 01       	movw	r18, r22
    45fe:	ac 01       	movw	r20, r24
    4600:	60 91 30 25 	lds	r22, 0x2530
    4604:	70 91 31 25 	lds	r23, 0x2531
    4608:	80 91 32 25 	lds	r24, 0x2532
    460c:	90 91 33 25 	lds	r25, 0x2533
    4610:	0e 94 40 43 	call	0x8680	; 0x8680 <__addsf3>
    4614:	f8 01       	movw	r30, r16
    4616:	65 87       	std	Z+13, r22	; 0x0d
    4618:	76 87       	std	Z+14, r23	; 0x0e
    461a:	87 87       	std	Z+15, r24	; 0x0f
    461c:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    461e:	00 91 1a 25 	lds	r16, 0x251A
    4622:	10 91 1b 25 	lds	r17, 0x251B
    4626:	00 0f       	add	r16, r16
    4628:	11 1f       	adc	r17, r17
    462a:	00 0f       	add	r16, r16
    462c:	11 1f       	adc	r17, r17
    462e:	01 5f       	subi	r16, 0xF1	; 241
    4630:	1a 4d       	sbci	r17, 0xDA	; 218
    4632:	d8 01       	movw	r26, r16
    4634:	1d 96       	adiw	r26, 0x0d	; 13
    4636:	6d 91       	ld	r22, X+
    4638:	7d 91       	ld	r23, X+
    463a:	8d 91       	ld	r24, X+
    463c:	9c 91       	ld	r25, X
    463e:	50 97       	sbiw	r26, 0x10	; 16
    4640:	20 91 44 25 	lds	r18, 0x2544
    4644:	30 91 45 25 	lds	r19, 0x2545
    4648:	40 91 46 25 	lds	r20, 0x2546
    464c:	50 91 47 25 	lds	r21, 0x2547
    4650:	0e 94 40 43 	call	0x8680	; 0x8680 <__addsf3>
    4654:	f8 01       	movw	r30, r16
    4656:	65 87       	std	Z+13, r22	; 0x0d
    4658:	76 87       	std	Z+14, r23	; 0x0e
    465a:	87 87       	std	Z+15, r24	; 0x0f
    465c:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X_AXIS], 
    465e:	60 91 1c 25 	lds	r22, 0x251C
    4662:	70 91 1d 25 	lds	r23, 0x251D
    4666:	80 91 1e 25 	lds	r24, 0x251E
    466a:	90 91 1f 25 	lds	r25, 0x251F
    466e:	20 91 20 25 	lds	r18, 0x2520
    4672:	30 91 21 25 	lds	r19, 0x2521
    4676:	40 91 22 25 	lds	r20, 0x2522
    467a:	50 91 23 25 	lds	r21, 0x2523
    467e:	e0 90 24 25 	lds	r14, 0x2524
    4682:	f0 90 25 25 	lds	r15, 0x2525
    4686:	00 91 26 25 	lds	r16, 0x2526
    468a:	10 91 27 25 	lds	r17, 0x2527
    468e:	a0 90 3c 25 	lds	r10, 0x253C
    4692:	b0 90 3d 25 	lds	r11, 0x253D
    4696:	c0 90 3e 25 	lds	r12, 0x253E
    469a:	d0 90 3f 25 	lds	r13, 0x253F
    469e:	80 90 14 25 	lds	r8, 0x2514
    46a2:	90 90 15 25 	lds	r9, 0x2515
    46a6:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    46aa:	80 91 12 25 	lds	r24, 0x2512
    46ae:	90 91 13 25 	lds	r25, 0x2513
    46b2:	01 96       	adiw	r24, 0x01	; 1
    46b4:	80 93 12 25 	sts	0x2512, r24
    46b8:	90 93 13 25 	sts	0x2513, r25
    46bc:	20 91 12 25 	lds	r18, 0x2512
    46c0:	30 91 13 25 	lds	r19, 0x2513
    46c4:	80 91 10 25 	lds	r24, 0x2510
    46c8:	90 91 11 25 	lds	r25, 0x2511
    46cc:	82 17       	cp	r24, r18
    46ce:	93 07       	cpc	r25, r19
    46d0:	0c f0       	brlt	.+2      	; 0x46d4 <mc_arc+0x4b4>
    46d2:	35 cf       	rjmp	.-406    	; 0x453e <mc_arc+0x31e>
    46d4:	20 e0       	ldi	r18, 0x00	; 0
    46d6:	30 e0       	ldi	r19, 0x00	; 0
				ma.dtarget[Z_AXIS], 
				ma.feed_rate, 
				ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    46d8:	c9 01       	movw	r24, r18
    46da:	28 96       	adiw	r28, 0x08	; 8
    46dc:	cd bf       	out	0x3d, r28	; 61
    46de:	de bf       	out	0x3e, r29	; 62
    46e0:	cf 91       	pop	r28
    46e2:	df 91       	pop	r29
    46e4:	1f 91       	pop	r17
    46e6:	0f 91       	pop	r16
    46e8:	ff 90       	pop	r15
    46ea:	ef 90       	pop	r14
    46ec:	df 90       	pop	r13
    46ee:	cf 90       	pop	r12
    46f0:	bf 90       	pop	r11
    46f2:	af 90       	pop	r10
    46f4:	9f 90       	pop	r9
    46f6:	8f 90       	pop	r8
    46f8:	7f 90       	pop	r7
    46fa:	6f 90       	pop	r6
    46fc:	5f 90       	pop	r5
    46fe:	4f 90       	pop	r4
    4700:	3f 90       	pop	r3
    4702:	2f 90       	pop	r2
    4704:	08 95       	ret

00004706 <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    4706:	e0 e6       	ldi	r30, 0x60	; 96
    4708:	f6 e0       	ldi	r31, 0x06	; 6
    470a:	80 e4       	ldi	r24, 0x40	; 64
    470c:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    470e:	80 e8       	ldi	r24, 0x80	; 128
    4710:	81 83       	std	Z+1, r24	; 0x01
}
    4712:	08 95       	ret

00004714 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    4714:	97 fd       	sbrc	r25, 7
    4716:	05 c0       	rjmp	.+10     	; 0x4722 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    4718:	80 e8       	ldi	r24, 0x80	; 128
    471a:	e0 e6       	ldi	r30, 0x60	; 96
    471c:	f6 e0       	ldi	r31, 0x06	; 6
    471e:	85 83       	std	Z+5, r24	; 0x05
    4720:	04 c0       	rjmp	.+8      	; 0x472a <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    4722:	80 e8       	ldi	r24, 0x80	; 128
    4724:	e0 e6       	ldi	r30, 0x60	; 96
    4726:	f6 e0       	ldi	r31, 0x06	; 6
    4728:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    472a:	80 e4       	ldi	r24, 0x40	; 64
    472c:	e0 e6       	ldi	r30, 0x60	; 96
    472e:	f6 e0       	ldi	r31, 0x06	; 6
    4730:	85 83       	std	Z+5, r24	; 0x05
}
    4732:	08 95       	ret

00004734 <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    4734:	80 e4       	ldi	r24, 0x40	; 64
    4736:	e0 e6       	ldi	r30, 0x60	; 96
    4738:	f6 e0       	ldi	r31, 0x06	; 6
    473a:	86 83       	std	Z+6, r24	; 0x06
}
    473c:	08 95       	ret

0000473e <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    473e:	cf 93       	push	r28
    4740:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    4742:	10 92 5c 24 	sts	0x245C, r1
	ax.exec_mutex = FALSE;
    4746:	10 92 5b 24 	sts	0x245B, r1

	ax.a[X_AXIS].port = &X_MOTOR_PORT;				// bind PORTs to structs
    474a:	80 e0       	ldi	r24, 0x00	; 0
    474c:	96 e0       	ldi	r25, 0x06	; 6
    474e:	80 93 6b 24 	sts	0x246B, r24
    4752:	90 93 6c 24 	sts	0x246C, r25
	ax.a[Y_AXIS].port = &Y_MOTOR_PORT;
    4756:	80 ea       	ldi	r24, 0xA0	; 160
    4758:	96 e0       	ldi	r25, 0x06	; 6
    475a:	80 93 7b 24 	sts	0x247B, r24
    475e:	90 93 7c 24 	sts	0x247C, r25
	ax.a[Z_AXIS].port = &Z_MOTOR_PORT;
    4762:	80 e8       	ldi	r24, 0x80	; 128
    4764:	96 e0       	ldi	r25, 0x06	; 6
    4766:	80 93 8b 24 	sts	0x248B, r24
    476a:	90 93 8c 24 	sts	0x248C, r25
	ax.a[A_AXIS].port = &A_MOTOR_PORT;
    476e:	80 e6       	ldi	r24, 0x60	; 96
    4770:	96 e0       	ldi	r25, 0x06	; 6
    4772:	80 93 9b 24 	sts	0x249B, r24
    4776:	90 93 9c 24 	sts	0x249C, r25

	ax.a[X_AXIS].timer = &X_TIMER;					// bind TIMERs to structs
    477a:	80 e0       	ldi	r24, 0x00	; 0
    477c:	98 e0       	ldi	r25, 0x08	; 8
    477e:	80 93 6d 24 	sts	0x246D, r24
    4782:	90 93 6e 24 	sts	0x246E, r25
	ax.a[Y_AXIS].timer = &Y_TIMER;
    4786:	80 e0       	ldi	r24, 0x00	; 0
    4788:	99 e0       	ldi	r25, 0x09	; 9
    478a:	80 93 7d 24 	sts	0x247D, r24
    478e:	90 93 7e 24 	sts	0x247E, r25
	ax.a[Z_AXIS].timer = &Z_TIMER;
    4792:	80 e0       	ldi	r24, 0x00	; 0
    4794:	9a e0       	ldi	r25, 0x0A	; 10
    4796:	80 93 8d 24 	sts	0x248D, r24
    479a:	90 93 8e 24 	sts	0x248E, r25
	ax.a[A_AXIS].timer = &A_TIMER;
    479e:	80 e0       	ldi	r24, 0x00	; 0
    47a0:	9b e0       	ldi	r25, 0x0B	; 11
    47a2:	80 93 9d 24 	sts	0x249D, r24
    47a6:	90 93 9e 24 	sts	0x249E, r25
    47aa:	cf ea       	ldi	r28, 0xAF	; 175
    47ac:	d4 e2       	ldi	r29, 0x24	; 36
    47ae:	a9 e6       	ldi	r26, 0x69	; 105
    47b0:	b4 e2       	ldi	r27, 0x24	; 36

	for (uint8_t i=0; i <= A_AXIS; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    47b2:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    47b4:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    47b6:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y_AXIS].timer = &Y_TIMER;
	ax.a[Z_AXIS].timer = &Z_TIMER;
	ax.a[A_AXIS].timer = &A_TIMER;

	for (uint8_t i=0; i <= A_AXIS; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    47b8:	88 81       	ld	r24, Y
    47ba:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    47bc:	12 96       	adiw	r26, 0x02	; 2
    47be:	ed 91       	ld	r30, X+
    47c0:	fc 91       	ld	r31, X
    47c2:	13 97       	sbiw	r26, 0x03	; 3
    47c4:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    47c6:	12 96       	adiw	r26, 0x02	; 2
    47c8:	ed 91       	ld	r30, X+
    47ca:	fc 91       	ld	r31, X
    47cc:	13 97       	sbiw	r26, 0x03	; 3
    47ce:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
    47d0:	12 96       	adiw	r26, 0x02	; 2
    47d2:	ed 91       	ld	r30, X+
    47d4:	fc 91       	ld	r31, X
    47d6:	13 97       	sbiw	r26, 0x03	; 3
    47d8:	84 81       	ldd	r24, Z+4	; 0x04
    47da:	88 61       	ori	r24, 0x18	; 24
    47dc:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    47de:	12 96       	adiw	r26, 0x02	; 2
    47e0:	ed 91       	ld	r30, X+
    47e2:	fc 91       	ld	r31, X
    47e4:	13 97       	sbiw	r26, 0x03	; 3
    47e6:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    47e8:	14 96       	adiw	r26, 0x04	; 4
    47ea:	ed 91       	ld	r30, X+
    47ec:	fc 91       	ld	r31, X
    47ee:	15 97       	sbiw	r26, 0x05	; 5
    47f0:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    47f2:	14 96       	adiw	r26, 0x04	; 4
    47f4:	ed 91       	ld	r30, X+
    47f6:	fc 91       	ld	r31, X
    47f8:	15 97       	sbiw	r26, 0x05	; 5
    47fa:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    47fc:	14 96       	adiw	r26, 0x04	; 4
    47fe:	ed 91       	ld	r30, X+
    4800:	fc 91       	ld	r31, X
    4802:	15 97       	sbiw	r26, 0x05	; 5
    4804:	96 83       	std	Z+6, r25	; 0x06
    4806:	68 96       	adiw	r28, 0x18	; 24
    4808:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X_AXIS].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y_AXIS].timer = &Y_TIMER;
	ax.a[Z_AXIS].timer = &Z_TIMER;
	ax.a[A_AXIS].timer = &A_TIMER;

	for (uint8_t i=0; i <= A_AXIS; i++) {
    480a:	85 e2       	ldi	r24, 0x25	; 37
    480c:	cf 30       	cpi	r28, 0x0F	; 15
    480e:	d8 07       	cpc	r29, r24
    4810:	99 f6       	brne	.-90     	; 0x47b8 <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    4812:	df 91       	pop	r29
    4814:	cf 91       	pop	r28
    4816:	08 95       	ret

00004818 <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    4818:	e8 2f       	mov	r30, r24
    481a:	f0 e0       	ldi	r31, 0x00	; 0
    481c:	84 e0       	ldi	r24, 0x04	; 4
    481e:	ee 0f       	add	r30, r30
    4820:	ff 1f       	adc	r31, r31
    4822:	8a 95       	dec	r24
    4824:	e1 f7       	brne	.-8      	; 0x481e <st_set_polarity+0x6>
    4826:	e5 5a       	subi	r30, 0xA5	; 165
    4828:	fb 4d       	sbci	r31, 0xDB	; 219
    482a:	66 87       	std	Z+14, r22	; 0x0e
}
    482c:	08 95       	ret

0000482e <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X_AXIS].step_counter = 0x00001000;
    482e:	2f e5       	ldi	r18, 0x5F	; 95
    4830:	34 e2       	ldi	r19, 0x24	; 36
    4832:	80 e0       	ldi	r24, 0x00	; 0
    4834:	90 e1       	ldi	r25, 0x10	; 16
    4836:	a0 e0       	ldi	r26, 0x00	; 0
    4838:	b0 e0       	ldi	r27, 0x00	; 0
    483a:	80 93 5f 24 	sts	0x245F, r24
    483e:	90 93 60 24 	sts	0x2460, r25
    4842:	a0 93 61 24 	sts	0x2461, r26
    4846:	b0 93 62 24 	sts	0x2462, r27
	ax.a[X_AXIS].timer->PER = 0x1000;			// step rate (period)
    484a:	e0 91 6d 24 	lds	r30, 0x246D
    484e:	f0 91 6e 24 	lds	r31, 0x246E
    4852:	80 e0       	ldi	r24, 0x00	; 0
    4854:	90 e1       	ldi	r25, 0x10	; 16
    4856:	86 a3       	std	Z+38, r24	; 0x26
    4858:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X_AXIS].timer->CTRLA = TC_CLK_ON;		// start clock
    485a:	41 e0       	ldi	r20, 0x01	; 1
    485c:	40 83       	st	Z, r20

	ax.a[Y_AXIS].step_counter = 0x00000800;
    485e:	80 e0       	ldi	r24, 0x00	; 0
    4860:	98 e0       	ldi	r25, 0x08	; 8
    4862:	a0 e0       	ldi	r26, 0x00	; 0
    4864:	b0 e0       	ldi	r27, 0x00	; 0
    4866:	80 93 6f 24 	sts	0x246F, r24
    486a:	90 93 70 24 	sts	0x2470, r25
    486e:	a0 93 71 24 	sts	0x2471, r26
    4872:	b0 93 72 24 	sts	0x2472, r27
	ax.a[Y_AXIS].timer->PER = 0x2000;
    4876:	e0 91 7d 24 	lds	r30, 0x247D
    487a:	f0 91 7e 24 	lds	r31, 0x247E
    487e:	80 e0       	ldi	r24, 0x00	; 0
    4880:	90 e2       	ldi	r25, 0x20	; 32
    4882:	86 a3       	std	Z+38, r24	; 0x26
    4884:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y_AXIS].timer->CTRLA = TC_CLK_ON;
    4886:	40 83       	st	Z, r20

	ax.a[Z_AXIS].step_counter = 0x00000600;
    4888:	80 e0       	ldi	r24, 0x00	; 0
    488a:	96 e0       	ldi	r25, 0x06	; 6
    488c:	a0 e0       	ldi	r26, 0x00	; 0
    488e:	b0 e0       	ldi	r27, 0x00	; 0
    4890:	80 93 7f 24 	sts	0x247F, r24
    4894:	90 93 80 24 	sts	0x2480, r25
    4898:	a0 93 81 24 	sts	0x2481, r26
    489c:	b0 93 82 24 	sts	0x2482, r27
	ax.a[Z_AXIS].timer->PER = 0x3000;
    48a0:	e0 91 8d 24 	lds	r30, 0x248D
    48a4:	f0 91 8e 24 	lds	r31, 0x248E
    48a8:	80 e0       	ldi	r24, 0x00	; 0
    48aa:	90 e3       	ldi	r25, 0x30	; 48
    48ac:	86 a3       	std	Z+38, r24	; 0x26
    48ae:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z_AXIS].timer->CTRLA = TC_CLK_ON;
    48b0:	40 83       	st	Z, r20

	ax.a[A_AXIS].step_counter = 0x00000400;
    48b2:	80 e0       	ldi	r24, 0x00	; 0
    48b4:	94 e0       	ldi	r25, 0x04	; 4
    48b6:	a0 e0       	ldi	r26, 0x00	; 0
    48b8:	b0 e0       	ldi	r27, 0x00	; 0
    48ba:	80 93 8f 24 	sts	0x248F, r24
    48be:	90 93 90 24 	sts	0x2490, r25
    48c2:	a0 93 91 24 	sts	0x2491, r26
    48c6:	b0 93 92 24 	sts	0x2492, r27
	ax.a[A_AXIS].timer->PER = 0x4000;
    48ca:	d9 01       	movw	r26, r18
    48cc:	de 96       	adiw	r26, 0x3e	; 62
    48ce:	ed 91       	ld	r30, X+
    48d0:	fc 91       	ld	r31, X
    48d2:	df 97       	sbiw	r26, 0x3f	; 63
    48d4:	80 e0       	ldi	r24, 0x00	; 0
    48d6:	90 e4       	ldi	r25, 0x40	; 64
    48d8:	86 a3       	std	Z+38, r24	; 0x26
    48da:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A_AXIS].timer->CTRLA = TC_CLK_ON;
    48dc:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    48de:	23 50       	subi	r18, 0x03	; 3
    48e0:	30 40       	sbci	r19, 0x00	; 0
    48e2:	f9 01       	movw	r30, r18
    48e4:	80 81       	ld	r24, Z
    48e6:	8f 60       	ori	r24, 0x0F	; 15
    48e8:	80 83       	st	Z, r24
}
    48ea:	08 95       	ret

000048ec <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    48ec:	f8 94       	cli
	mv_flush();									// flush the move buffer
    48ee:	0e 94 c5 31 	call	0x638a	; 0x638a <mv_flush>
	sei();
    48f2:	78 94       	sei
}
    48f4:	08 95       	ret

000048f6 <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    48f6:	f8 94       	cli
	ax.a[X_AXIS].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    48f8:	e0 91 6d 24 	lds	r30, 0x246D
    48fc:	f0 91 6e 24 	lds	r31, 0x246E
    4900:	10 82       	st	Z, r1
	ax.a[Y_AXIS].timer->CTRLA = TC_CLK_OFF;
    4902:	e0 91 7d 24 	lds	r30, 0x247D
    4906:	f0 91 7e 24 	lds	r31, 0x247E
    490a:	10 82       	st	Z, r1
	ax.a[Z_AXIS].timer->CTRLA = TC_CLK_OFF;
    490c:	e0 91 8d 24 	lds	r30, 0x248D
    4910:	f0 91 8e 24 	lds	r31, 0x248E
    4914:	10 82       	st	Z, r1
	ax.a[A_AXIS].timer->CTRLA = TC_CLK_OFF;
    4916:	e0 91 9d 24 	lds	r30, 0x249D
    491a:	f0 91 9e 24 	lds	r31, 0x249E
    491e:	10 82       	st	Z, r1
	
	mv_flush();									// flush the move buffer
    4920:	0e 94 c5 31 	call	0x638a	; 0x638a <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4924:	10 92 5c 24 	sts	0x245C, r1
	sei();
    4928:	78 94       	sei
}
    492a:	08 95       	ret

0000492c <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    492c:	cf 92       	push	r12
    492e:	df 92       	push	r13
    4930:	ef 92       	push	r14
    4932:	ff 92       	push	r15
    4934:	0f 93       	push	r16
    4936:	1f 93       	push	r17
    4938:	cf 93       	push	r28
    493a:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    493c:	80 91 5b 24 	lds	r24, 0x245B
    4940:	88 23       	and	r24, r24
    4942:	09 f0       	breq	.+2      	; 0x4946 <st_execute_move+0x1a>
    4944:	32 c1       	rjmp	.+612    	; 0x4baa <st_execute_move+0x27e>
		return;
	}
	ax.exec_mutex = TRUE;
    4946:	81 e0       	ldi	r24, 0x01	; 1
    4948:	80 93 5b 24 	sts	0x245B, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    494c:	80 91 5c 24 	lds	r24, 0x245C
    4950:	88 23       	and	r24, r24
    4952:	09 f0       	breq	.+2      	; 0x4956 <st_execute_move+0x2a>
    4954:	28 c1       	rjmp	.+592    	; 0x4ba6 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    4956:	0e 94 82 31 	call	0x6304	; 0x6304 <mv_dequeue_move_buffer>
    495a:	80 93 5d 24 	sts	0x245D, r24
    495e:	90 93 5e 24 	sts	0x245E, r25
    4962:	89 2b       	or	r24, r25
    4964:	09 f4       	brne	.+2      	; 0x4968 <st_execute_move+0x3c>
    4966:	1f c1       	rjmp	.+574    	; 0x4ba6 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;
		return;
    4968:	6f e5       	ldi	r22, 0x5F	; 95
    496a:	74 e2       	ldi	r23, 0x24	; 36
    496c:	00 e0       	ldi	r16, 0x00	; 0
    496e:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4970:	94 e0       	ldi	r25, 0x04	; 4
    4972:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4974:	82 e0       	ldi	r24, 0x02	; 2
    4976:	d8 2e       	mov	r13, r24
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.exec_mutex = FALSE;
		return;
    4978:	f0 2e       	mov	r15, r16
    497a:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i = X_AXIS; i <= Z_AXIS; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    497c:	db 01       	movw	r26, r22
    497e:	1e 96       	adiw	r26, 0x0e	; 14
    4980:	ed 91       	ld	r30, X+
    4982:	fc 91       	ld	r31, X
    4984:	1f 97       	sbiw	r26, 0x0f	; 15
    4986:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    4988:	c0 91 5d 24 	lds	r28, 0x245D
    498c:	d0 91 5e 24 	lds	r29, 0x245E
    4990:	c8 01       	movw	r24, r16
    4992:	fc 01       	movw	r30, r24
    4994:	b3 e0       	ldi	r27, 0x03	; 3
    4996:	ee 0f       	add	r30, r30
    4998:	ff 1f       	adc	r31, r31
    499a:	ba 95       	dec	r27
    499c:	e1 f7       	brne	.-8      	; 0x4996 <st_execute_move+0x6a>
    499e:	88 0f       	add	r24, r24
    49a0:	99 1f       	adc	r25, r25
    49a2:	e8 0f       	add	r30, r24
    49a4:	f9 1f       	adc	r31, r25
    49a6:	ec 0f       	add	r30, r28
    49a8:	fd 1f       	adc	r31, r29
    49aa:	80 81       	ld	r24, Z
    49ac:	91 81       	ldd	r25, Z+1	; 0x01
    49ae:	a2 81       	ldd	r26, Z+2	; 0x02
    49b0:	b3 81       	ldd	r27, Z+3	; 0x03
    49b2:	00 97       	sbiw	r24, 0x00	; 0
    49b4:	a1 05       	cpc	r26, r1
    49b6:	b1 05       	cpc	r27, r1
    49b8:	09 f4       	brne	.+2      	; 0x49bc <st_execute_move+0x90>
    49ba:	a6 c0       	rjmp	.+332    	; 0x4b08 <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    49bc:	c8 01       	movw	r24, r16
    49be:	9c 01       	movw	r18, r24
    49c0:	f3 e0       	ldi	r31, 0x03	; 3
    49c2:	22 0f       	add	r18, r18
    49c4:	33 1f       	adc	r19, r19
    49c6:	fa 95       	dec	r31
    49c8:	e1 f7       	brne	.-8      	; 0x49c2 <st_execute_move+0x96>
    49ca:	88 0f       	add	r24, r24
    49cc:	99 1f       	adc	r25, r25
    49ce:	28 0f       	add	r18, r24
    49d0:	39 1f       	adc	r19, r25
    49d2:	c2 0f       	add	r28, r18
    49d4:	d3 1f       	adc	r29, r19
    49d6:	89 85       	ldd	r24, Y+9	; 0x09
    49d8:	fb 01       	movw	r30, r22
    49da:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    49dc:	e0 91 5d 24 	lds	r30, 0x245D
    49e0:	f0 91 5e 24 	lds	r31, 0x245E
    49e4:	c8 01       	movw	r24, r16
    49e6:	9c 01       	movw	r18, r24
    49e8:	53 e0       	ldi	r21, 0x03	; 3
    49ea:	22 0f       	add	r18, r18
    49ec:	33 1f       	adc	r19, r19
    49ee:	5a 95       	dec	r21
    49f0:	e1 f7       	brne	.-8      	; 0x49ea <st_execute_move+0xbe>
    49f2:	88 0f       	add	r24, r24
    49f4:	99 1f       	adc	r25, r25
    49f6:	28 0f       	add	r18, r24
    49f8:	39 1f       	adc	r19, r25
    49fa:	e2 0f       	add	r30, r18
    49fc:	f3 1f       	adc	r31, r19
    49fe:	90 85       	ldd	r25, Z+8	; 0x08
    4a00:	db 01       	movw	r26, r22
    4a02:	1a 96       	adiw	r26, 0x0a	; 10
    4a04:	8c 91       	ld	r24, X
    4a06:	1a 97       	sbiw	r26, 0x0a	; 10
    4a08:	1c 96       	adiw	r26, 0x0c	; 12
    4a0a:	ed 91       	ld	r30, X+
    4a0c:	fc 91       	ld	r31, X
    4a0e:	1d 97       	sbiw	r26, 0x0d	; 13
    4a10:	98 17       	cp	r25, r24
    4a12:	11 f0       	breq	.+4      	; 0x4a18 <st_execute_move+0xec>
    4a14:	d5 82       	std	Z+5, r13	; 0x05
    4a16:	01 c0       	rjmp	.+2      	; 0x4a1a <st_execute_move+0xee>
    4a18:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    4a1a:	40 91 5d 24 	lds	r20, 0x245D
    4a1e:	50 91 5e 24 	lds	r21, 0x245E
    4a22:	8f 2d       	mov	r24, r15
    4a24:	9e 2d       	mov	r25, r14
    4a26:	fc 01       	movw	r30, r24
    4a28:	33 e0       	ldi	r19, 0x03	; 3
    4a2a:	ee 0f       	add	r30, r30
    4a2c:	ff 1f       	adc	r31, r31
    4a2e:	3a 95       	dec	r19
    4a30:	e1 f7       	brne	.-8      	; 0x4a2a <st_execute_move+0xfe>
    4a32:	88 0f       	add	r24, r24
    4a34:	99 1f       	adc	r25, r25
    4a36:	e8 0f       	add	r30, r24
    4a38:	f9 1f       	adc	r31, r25
    4a3a:	e4 0f       	add	r30, r20
    4a3c:	f5 1f       	adc	r31, r21
    4a3e:	80 81       	ld	r24, Z
    4a40:	91 81       	ldd	r25, Z+1	; 0x01
    4a42:	a2 81       	ldd	r26, Z+2	; 0x02
    4a44:	b3 81       	ldd	r27, Z+3	; 0x03
    4a46:	fb 01       	movw	r30, r22
    4a48:	80 83       	st	Z, r24
    4a4a:	91 83       	std	Z+1, r25	; 0x01
    4a4c:	a2 83       	std	Z+2, r26	; 0x02
    4a4e:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    4a50:	8f 2d       	mov	r24, r15
    4a52:	9e 2d       	mov	r25, r14
    4a54:	fc 01       	movw	r30, r24
    4a56:	b3 e0       	ldi	r27, 0x03	; 3
    4a58:	ee 0f       	add	r30, r30
    4a5a:	ff 1f       	adc	r31, r31
    4a5c:	ba 95       	dec	r27
    4a5e:	e1 f7       	brne	.-8      	; 0x4a58 <st_execute_move+0x12c>
    4a60:	88 0f       	add	r24, r24
    4a62:	99 1f       	adc	r25, r25
    4a64:	e8 0f       	add	r30, r24
    4a66:	f9 1f       	adc	r31, r25
    4a68:	e4 0f       	add	r30, r20
    4a6a:	f5 1f       	adc	r31, r21
    4a6c:	86 81       	ldd	r24, Z+6	; 0x06
    4a6e:	97 81       	ldd	r25, Z+7	; 0x07
    4a70:	db 01       	movw	r26, r22
    4a72:	16 96       	adiw	r26, 0x06	; 6
    4a74:	8d 93       	st	X+, r24
    4a76:	9c 93       	st	X, r25
    4a78:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    4a7a:	8f 2d       	mov	r24, r15
    4a7c:	9e 2d       	mov	r25, r14
    4a7e:	fc 01       	movw	r30, r24
    4a80:	33 e0       	ldi	r19, 0x03	; 3
    4a82:	ee 0f       	add	r30, r30
    4a84:	ff 1f       	adc	r31, r31
    4a86:	3a 95       	dec	r19
    4a88:	e1 f7       	brne	.-8      	; 0x4a82 <st_execute_move+0x156>
    4a8a:	88 0f       	add	r24, r24
    4a8c:	99 1f       	adc	r25, r25
    4a8e:	e8 0f       	add	r30, r24
    4a90:	f9 1f       	adc	r31, r25
    4a92:	e4 0f       	add	r30, r20
    4a94:	f5 1f       	adc	r31, r21
    4a96:	86 81       	ldd	r24, Z+6	; 0x06
    4a98:	97 81       	ldd	r25, Z+7	; 0x07
    4a9a:	18 96       	adiw	r26, 0x08	; 8
    4a9c:	8d 93       	st	X+, r24
    4a9e:	9c 93       	st	X, r25
    4aa0:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    4aa2:	8f 2d       	mov	r24, r15
    4aa4:	9e 2d       	mov	r25, r14
    4aa6:	fc 01       	movw	r30, r24
    4aa8:	33 e0       	ldi	r19, 0x03	; 3
    4aaa:	ee 0f       	add	r30, r30
    4aac:	ff 1f       	adc	r31, r31
    4aae:	3a 95       	dec	r19
    4ab0:	e1 f7       	brne	.-8      	; 0x4aaa <st_execute_move+0x17e>
    4ab2:	88 0f       	add	r24, r24
    4ab4:	99 1f       	adc	r25, r25
    4ab6:	e8 0f       	add	r30, r24
    4ab8:	f9 1f       	adc	r31, r25
    4aba:	e4 0f       	add	r30, r20
    4abc:	f5 1f       	adc	r31, r21
    4abe:	84 81       	ldd	r24, Z+4	; 0x04
    4ac0:	95 81       	ldd	r25, Z+5	; 0x05
    4ac2:	14 96       	adiw	r26, 0x04	; 4
    4ac4:	8d 93       	st	X+, r24
    4ac6:	9c 93       	st	X, r25
    4ac8:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    4aca:	1e 96       	adiw	r26, 0x0e	; 14
    4acc:	ed 91       	ld	r30, X+
    4ace:	fc 91       	ld	r31, X
    4ad0:	1f 97       	sbiw	r26, 0x0f	; 15
    4ad2:	8f 2d       	mov	r24, r15
    4ad4:	9e 2d       	mov	r25, r14
    4ad6:	9c 01       	movw	r18, r24
    4ad8:	b3 e0       	ldi	r27, 0x03	; 3
    4ada:	22 0f       	add	r18, r18
    4adc:	33 1f       	adc	r19, r19
    4ade:	ba 95       	dec	r27
    4ae0:	e1 f7       	brne	.-8      	; 0x4ada <st_execute_move+0x1ae>
    4ae2:	88 0f       	add	r24, r24
    4ae4:	99 1f       	adc	r25, r25
    4ae6:	28 0f       	add	r18, r24
    4ae8:	39 1f       	adc	r19, r25
    4aea:	42 0f       	add	r20, r18
    4aec:	53 1f       	adc	r21, r19
    4aee:	da 01       	movw	r26, r20
    4af0:	14 96       	adiw	r26, 0x04	; 4
    4af2:	8d 91       	ld	r24, X+
    4af4:	9c 91       	ld	r25, X
    4af6:	15 97       	sbiw	r26, 0x05	; 5
    4af8:	86 a3       	std	Z+38, r24	; 0x26
    4afa:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4afc:	db 01       	movw	r26, r22
    4afe:	1c 96       	adiw	r26, 0x0c	; 12
    4b00:	ed 91       	ld	r30, X+
    4b02:	fc 91       	ld	r31, X
    4b04:	1d 97       	sbiw	r26, 0x0d	; 13
    4b06:	c6 82       	std	Z+6, r12	; 0x06
    4b08:	0f 5f       	subi	r16, 0xFF	; 255
    4b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b0c:	60 5f       	subi	r22, 0xF0	; 240
    4b0e:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i = X_AXIS; i <= Z_AXIS; i++) {
    4b10:	03 30       	cpi	r16, 0x03	; 3
    4b12:	11 05       	cpc	r17, r1
    4b14:	09 f0       	breq	.+2      	; 0x4b18 <st_execute_move+0x1ec>
    4b16:	30 cf       	rjmp	.-416    	; 0x4978 <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4b18:	10 92 5c 24 	sts	0x245C, r1
	if (ax.a[X_AXIS].step_counter) { 
    4b1c:	80 91 5f 24 	lds	r24, 0x245F
    4b20:	90 91 60 24 	lds	r25, 0x2460
    4b24:	a0 91 61 24 	lds	r26, 0x2461
    4b28:	b0 91 62 24 	lds	r27, 0x2462
    4b2c:	00 97       	sbiw	r24, 0x00	; 0
    4b2e:	a1 05       	cpc	r26, r1
    4b30:	b1 05       	cpc	r27, r1
    4b32:	59 f0       	breq	.+22     	; 0x4b4a <st_execute_move+0x21e>
		ax.a[X_AXIS].timer->CTRLA = TC_CLK_ON;
    4b34:	e0 91 6d 24 	lds	r30, 0x246D
    4b38:	f0 91 6e 24 	lds	r31, 0x246E
    4b3c:	81 e0       	ldi	r24, 0x01	; 1
    4b3e:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4b40:	80 91 5c 24 	lds	r24, 0x245C
    4b44:	88 60       	ori	r24, 0x08	; 8
    4b46:	80 93 5c 24 	sts	0x245C, r24
	}
	if (ax.a[Y_AXIS].step_counter) {
    4b4a:	80 91 6f 24 	lds	r24, 0x246F
    4b4e:	90 91 70 24 	lds	r25, 0x2470
    4b52:	a0 91 71 24 	lds	r26, 0x2471
    4b56:	b0 91 72 24 	lds	r27, 0x2472
    4b5a:	00 97       	sbiw	r24, 0x00	; 0
    4b5c:	a1 05       	cpc	r26, r1
    4b5e:	b1 05       	cpc	r27, r1
    4b60:	59 f0       	breq	.+22     	; 0x4b78 <st_execute_move+0x24c>
		ax.a[Y_AXIS].timer->CTRLA = TC_CLK_ON;
    4b62:	e0 91 7d 24 	lds	r30, 0x247D
    4b66:	f0 91 7e 24 	lds	r31, 0x247E
    4b6a:	81 e0       	ldi	r24, 0x01	; 1
    4b6c:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4b6e:	80 91 5c 24 	lds	r24, 0x245C
    4b72:	84 60       	ori	r24, 0x04	; 4
    4b74:	80 93 5c 24 	sts	0x245C, r24
	}
	if (ax.a[Z_AXIS].step_counter) {
    4b78:	80 91 7f 24 	lds	r24, 0x247F
    4b7c:	90 91 80 24 	lds	r25, 0x2480
    4b80:	a0 91 81 24 	lds	r26, 0x2481
    4b84:	b0 91 82 24 	lds	r27, 0x2482
    4b88:	00 97       	sbiw	r24, 0x00	; 0
    4b8a:	a1 05       	cpc	r26, r1
    4b8c:	b1 05       	cpc	r27, r1
    4b8e:	59 f0       	breq	.+22     	; 0x4ba6 <st_execute_move+0x27a>
		ax.a[Z_AXIS].timer->CTRLA = TC_CLK_ON;
    4b90:	e0 91 8d 24 	lds	r30, 0x248D
    4b94:	f0 91 8e 24 	lds	r31, 0x248E
    4b98:	81 e0       	ldi	r24, 0x01	; 1
    4b9a:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4b9c:	80 91 5c 24 	lds	r24, 0x245C
    4ba0:	82 60       	ori	r24, 0x02	; 2
    4ba2:	80 93 5c 24 	sts	0x245C, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4ba6:	10 92 5b 24 	sts	0x245B, r1
}
    4baa:	df 91       	pop	r29
    4bac:	cf 91       	pop	r28
    4bae:	1f 91       	pop	r17
    4bb0:	0f 91       	pop	r16
    4bb2:	ff 90       	pop	r15
    4bb4:	ef 90       	pop	r14
    4bb6:	df 90       	pop	r13
    4bb8:	cf 90       	pop	r12
    4bba:	08 95       	ret

00004bbc <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4bbc:	10 92 5b 24 	sts	0x245B, r1
	st_execute_move();		// recursively empty the move queue
    4bc0:	0e 94 96 24 	call	0x492c	; 0x492c <st_execute_move>
	return;
}
    4bc4:	08 95       	ret

00004bc6 <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4bc6:	1f 92       	push	r1
    4bc8:	0f 92       	push	r0
    4bca:	0f b6       	in	r0, 0x3f	; 63
    4bcc:	0f 92       	push	r0
    4bce:	0b b6       	in	r0, 0x3b	; 59
    4bd0:	0f 92       	push	r0
    4bd2:	11 24       	eor	r1, r1
    4bd4:	2f 93       	push	r18
    4bd6:	3f 93       	push	r19
    4bd8:	4f 93       	push	r20
    4bda:	5f 93       	push	r21
    4bdc:	6f 93       	push	r22
    4bde:	7f 93       	push	r23
    4be0:	8f 93       	push	r24
    4be2:	9f 93       	push	r25
    4be4:	af 93       	push	r26
    4be6:	bf 93       	push	r27
    4be8:	ef 93       	push	r30
    4bea:	ff 93       	push	r31
	if (--ax.a[A_AXIS].postscale_counter != 0) {
    4bec:	80 91 97 24 	lds	r24, 0x2497
    4bf0:	90 91 98 24 	lds	r25, 0x2498
    4bf4:	01 97       	sbiw	r24, 0x01	; 1
    4bf6:	80 93 97 24 	sts	0x2497, r24
    4bfa:	90 93 98 24 	sts	0x2498, r25
    4bfe:	89 2b       	or	r24, r25
    4c00:	a1 f5       	brne	.+104    	; 0x4c6a <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4c02:	e0 e6       	ldi	r30, 0x60	; 96
    4c04:	f6 e0       	ldi	r31, 0x06	; 6
    4c06:	81 e0       	ldi	r24, 0x01	; 1
    4c08:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A_AXIS].step_counter == 0) {
    4c0a:	80 91 8f 24 	lds	r24, 0x248F
    4c0e:	90 91 90 24 	lds	r25, 0x2490
    4c12:	a0 91 91 24 	lds	r26, 0x2491
    4c16:	b0 91 92 24 	lds	r27, 0x2492
    4c1a:	01 97       	sbiw	r24, 0x01	; 1
    4c1c:	a1 09       	sbc	r26, r1
    4c1e:	b1 09       	sbc	r27, r1
    4c20:	80 93 8f 24 	sts	0x248F, r24
    4c24:	90 93 90 24 	sts	0x2490, r25
    4c28:	a0 93 91 24 	sts	0x2491, r26
    4c2c:	b0 93 92 24 	sts	0x2492, r27
    4c30:	00 97       	sbiw	r24, 0x00	; 0
    4c32:	a1 05       	cpc	r26, r1
    4c34:	b1 05       	cpc	r27, r1
    4c36:	69 f4       	brne	.+26     	; 0x4c52 <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4c38:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4c3c:	84 e0       	ldi	r24, 0x04	; 4
    4c3e:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4c40:	80 91 5c 24 	lds	r24, 0x245C
    4c44:	8e 7f       	andi	r24, 0xFE	; 254
    4c46:	80 93 5c 24 	sts	0x245C, r24
		if (ax.active_axes == 0) {
    4c4a:	88 23       	and	r24, r24
    4c4c:	11 f4       	brne	.+4      	; 0x4c52 <__vector_108+0x8c>
			st_execute_move();
    4c4e:	0e 94 96 24 	call	0x492c	; 0x492c <st_execute_move>
		}
	}
	ax.a[A_AXIS].postscale_counter = ax.a[A_AXIS].postscale_value;
    4c52:	80 91 95 24 	lds	r24, 0x2495
    4c56:	90 91 96 24 	lds	r25, 0x2496
    4c5a:	80 93 97 24 	sts	0x2497, r24
    4c5e:	90 93 98 24 	sts	0x2498, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	e0 e6       	ldi	r30, 0x60	; 96
    4c66:	f6 e0       	ldi	r31, 0x06	; 6
    4c68:	86 83       	std	Z+6, r24	; 0x06
}
    4c6a:	ff 91       	pop	r31
    4c6c:	ef 91       	pop	r30
    4c6e:	bf 91       	pop	r27
    4c70:	af 91       	pop	r26
    4c72:	9f 91       	pop	r25
    4c74:	8f 91       	pop	r24
    4c76:	7f 91       	pop	r23
    4c78:	6f 91       	pop	r22
    4c7a:	5f 91       	pop	r21
    4c7c:	4f 91       	pop	r20
    4c7e:	3f 91       	pop	r19
    4c80:	2f 91       	pop	r18
    4c82:	0f 90       	pop	r0
    4c84:	0b be       	out	0x3b, r0	; 59
    4c86:	0f 90       	pop	r0
    4c88:	0f be       	out	0x3f, r0	; 63
    4c8a:	0f 90       	pop	r0
    4c8c:	1f 90       	pop	r1
    4c8e:	18 95       	reti

00004c90 <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4c90:	1f 92       	push	r1
    4c92:	0f 92       	push	r0
    4c94:	0f b6       	in	r0, 0x3f	; 63
    4c96:	0f 92       	push	r0
    4c98:	0b b6       	in	r0, 0x3b	; 59
    4c9a:	0f 92       	push	r0
    4c9c:	11 24       	eor	r1, r1
    4c9e:	2f 93       	push	r18
    4ca0:	3f 93       	push	r19
    4ca2:	4f 93       	push	r20
    4ca4:	5f 93       	push	r21
    4ca6:	6f 93       	push	r22
    4ca8:	7f 93       	push	r23
    4caa:	8f 93       	push	r24
    4cac:	9f 93       	push	r25
    4cae:	af 93       	push	r26
    4cb0:	bf 93       	push	r27
    4cb2:	ef 93       	push	r30
    4cb4:	ff 93       	push	r31
	if (--ax.a[Z_AXIS].postscale_counter != 0) {
    4cb6:	80 91 87 24 	lds	r24, 0x2487
    4cba:	90 91 88 24 	lds	r25, 0x2488
    4cbe:	01 97       	sbiw	r24, 0x01	; 1
    4cc0:	80 93 87 24 	sts	0x2487, r24
    4cc4:	90 93 88 24 	sts	0x2488, r25
    4cc8:	89 2b       	or	r24, r25
    4cca:	a1 f5       	brne	.+104    	; 0x4d34 <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4ccc:	e0 e8       	ldi	r30, 0x80	; 128
    4cce:	f6 e0       	ldi	r31, 0x06	; 6
    4cd0:	81 e0       	ldi	r24, 0x01	; 1
    4cd2:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z_AXIS].step_counter == 0) {
    4cd4:	80 91 7f 24 	lds	r24, 0x247F
    4cd8:	90 91 80 24 	lds	r25, 0x2480
    4cdc:	a0 91 81 24 	lds	r26, 0x2481
    4ce0:	b0 91 82 24 	lds	r27, 0x2482
    4ce4:	01 97       	sbiw	r24, 0x01	; 1
    4ce6:	a1 09       	sbc	r26, r1
    4ce8:	b1 09       	sbc	r27, r1
    4cea:	80 93 7f 24 	sts	0x247F, r24
    4cee:	90 93 80 24 	sts	0x2480, r25
    4cf2:	a0 93 81 24 	sts	0x2481, r26
    4cf6:	b0 93 82 24 	sts	0x2482, r27
    4cfa:	00 97       	sbiw	r24, 0x00	; 0
    4cfc:	a1 05       	cpc	r26, r1
    4cfe:	b1 05       	cpc	r27, r1
    4d00:	69 f4       	brne	.+26     	; 0x4d1c <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4d02:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4d06:	84 e0       	ldi	r24, 0x04	; 4
    4d08:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4d0a:	80 91 5c 24 	lds	r24, 0x245C
    4d0e:	8d 7f       	andi	r24, 0xFD	; 253
    4d10:	80 93 5c 24 	sts	0x245C, r24
		if (ax.active_axes == 0) {
    4d14:	88 23       	and	r24, r24
    4d16:	11 f4       	brne	.+4      	; 0x4d1c <__vector_47+0x8c>
			st_execute_move();
    4d18:	0e 94 96 24 	call	0x492c	; 0x492c <st_execute_move>
		}
	}
	ax.a[Z_AXIS].postscale_counter = ax.a[Z_AXIS].postscale_value;
    4d1c:	80 91 85 24 	lds	r24, 0x2485
    4d20:	90 91 86 24 	lds	r25, 0x2486
    4d24:	80 93 87 24 	sts	0x2487, r24
    4d28:	90 93 88 24 	sts	0x2488, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4d2c:	81 e0       	ldi	r24, 0x01	; 1
    4d2e:	e0 e8       	ldi	r30, 0x80	; 128
    4d30:	f6 e0       	ldi	r31, 0x06	; 6
    4d32:	86 83       	std	Z+6, r24	; 0x06
}
    4d34:	ff 91       	pop	r31
    4d36:	ef 91       	pop	r30
    4d38:	bf 91       	pop	r27
    4d3a:	af 91       	pop	r26
    4d3c:	9f 91       	pop	r25
    4d3e:	8f 91       	pop	r24
    4d40:	7f 91       	pop	r23
    4d42:	6f 91       	pop	r22
    4d44:	5f 91       	pop	r21
    4d46:	4f 91       	pop	r20
    4d48:	3f 91       	pop	r19
    4d4a:	2f 91       	pop	r18
    4d4c:	0f 90       	pop	r0
    4d4e:	0b be       	out	0x3b, r0	; 59
    4d50:	0f 90       	pop	r0
    4d52:	0f be       	out	0x3f, r0	; 63
    4d54:	0f 90       	pop	r0
    4d56:	1f 90       	pop	r1
    4d58:	18 95       	reti

00004d5a <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4d5a:	1f 92       	push	r1
    4d5c:	0f 92       	push	r0
    4d5e:	0f b6       	in	r0, 0x3f	; 63
    4d60:	0f 92       	push	r0
    4d62:	0b b6       	in	r0, 0x3b	; 59
    4d64:	0f 92       	push	r0
    4d66:	11 24       	eor	r1, r1
    4d68:	2f 93       	push	r18
    4d6a:	3f 93       	push	r19
    4d6c:	4f 93       	push	r20
    4d6e:	5f 93       	push	r21
    4d70:	6f 93       	push	r22
    4d72:	7f 93       	push	r23
    4d74:	8f 93       	push	r24
    4d76:	9f 93       	push	r25
    4d78:	af 93       	push	r26
    4d7a:	bf 93       	push	r27
    4d7c:	ef 93       	push	r30
    4d7e:	ff 93       	push	r31
	if (--ax.a[Y_AXIS].postscale_counter != 0) {
    4d80:	80 91 77 24 	lds	r24, 0x2477
    4d84:	90 91 78 24 	lds	r25, 0x2478
    4d88:	01 97       	sbiw	r24, 0x01	; 1
    4d8a:	80 93 77 24 	sts	0x2477, r24
    4d8e:	90 93 78 24 	sts	0x2478, r25
    4d92:	89 2b       	or	r24, r25
    4d94:	a1 f5       	brne	.+104    	; 0x4dfe <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4d96:	e0 ea       	ldi	r30, 0xA0	; 160
    4d98:	f6 e0       	ldi	r31, 0x06	; 6
    4d9a:	81 e0       	ldi	r24, 0x01	; 1
    4d9c:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y_AXIS].step_counter == 0) {
    4d9e:	80 91 6f 24 	lds	r24, 0x246F
    4da2:	90 91 70 24 	lds	r25, 0x2470
    4da6:	a0 91 71 24 	lds	r26, 0x2471
    4daa:	b0 91 72 24 	lds	r27, 0x2472
    4dae:	01 97       	sbiw	r24, 0x01	; 1
    4db0:	a1 09       	sbc	r26, r1
    4db2:	b1 09       	sbc	r27, r1
    4db4:	80 93 6f 24 	sts	0x246F, r24
    4db8:	90 93 70 24 	sts	0x2470, r25
    4dbc:	a0 93 71 24 	sts	0x2471, r26
    4dc0:	b0 93 72 24 	sts	0x2472, r27
    4dc4:	00 97       	sbiw	r24, 0x00	; 0
    4dc6:	a1 05       	cpc	r26, r1
    4dc8:	b1 05       	cpc	r27, r1
    4dca:	69 f4       	brne	.+26     	; 0x4de6 <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4dcc:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4dd0:	84 e0       	ldi	r24, 0x04	; 4
    4dd2:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4dd4:	80 91 5c 24 	lds	r24, 0x245C
    4dd8:	8b 7f       	andi	r24, 0xFB	; 251
    4dda:	80 93 5c 24 	sts	0x245C, r24
		if (ax.active_axes == 0) {
    4dde:	88 23       	and	r24, r24
    4de0:	11 f4       	brne	.+4      	; 0x4de6 <__vector_77+0x8c>
			st_execute_move();
    4de2:	0e 94 96 24 	call	0x492c	; 0x492c <st_execute_move>
		}
	}
	ax.a[Y_AXIS].postscale_counter = ax.a[Y_AXIS].postscale_value;
    4de6:	80 91 75 24 	lds	r24, 0x2475
    4dea:	90 91 76 24 	lds	r25, 0x2476
    4dee:	80 93 77 24 	sts	0x2477, r24
    4df2:	90 93 78 24 	sts	0x2478, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4df6:	81 e0       	ldi	r24, 0x01	; 1
    4df8:	e0 ea       	ldi	r30, 0xA0	; 160
    4dfa:	f6 e0       	ldi	r31, 0x06	; 6
    4dfc:	86 83       	std	Z+6, r24	; 0x06
}
    4dfe:	ff 91       	pop	r31
    4e00:	ef 91       	pop	r30
    4e02:	bf 91       	pop	r27
    4e04:	af 91       	pop	r26
    4e06:	9f 91       	pop	r25
    4e08:	8f 91       	pop	r24
    4e0a:	7f 91       	pop	r23
    4e0c:	6f 91       	pop	r22
    4e0e:	5f 91       	pop	r21
    4e10:	4f 91       	pop	r20
    4e12:	3f 91       	pop	r19
    4e14:	2f 91       	pop	r18
    4e16:	0f 90       	pop	r0
    4e18:	0b be       	out	0x3b, r0	; 59
    4e1a:	0f 90       	pop	r0
    4e1c:	0f be       	out	0x3f, r0	; 63
    4e1e:	0f 90       	pop	r0
    4e20:	1f 90       	pop	r1
    4e22:	18 95       	reti

00004e24 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4e24:	1f 92       	push	r1
    4e26:	0f 92       	push	r0
    4e28:	0f b6       	in	r0, 0x3f	; 63
    4e2a:	0f 92       	push	r0
    4e2c:	0b b6       	in	r0, 0x3b	; 59
    4e2e:	0f 92       	push	r0
    4e30:	11 24       	eor	r1, r1
    4e32:	2f 93       	push	r18
    4e34:	3f 93       	push	r19
    4e36:	4f 93       	push	r20
    4e38:	5f 93       	push	r21
    4e3a:	6f 93       	push	r22
    4e3c:	7f 93       	push	r23
    4e3e:	8f 93       	push	r24
    4e40:	9f 93       	push	r25
    4e42:	af 93       	push	r26
    4e44:	bf 93       	push	r27
    4e46:	ef 93       	push	r30
    4e48:	ff 93       	push	r31
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    4e4a:	80 91 67 24 	lds	r24, 0x2467
    4e4e:	90 91 68 24 	lds	r25, 0x2468
    4e52:	01 97       	sbiw	r24, 0x01	; 1
    4e54:	80 93 67 24 	sts	0x2467, r24
    4e58:	90 93 68 24 	sts	0x2468, r25
    4e5c:	89 2b       	or	r24, r25
    4e5e:	d1 f5       	brne	.+116    	; 0x4ed4 <__vector_14+0xb0>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    4e60:	80 91 6a 24 	lds	r24, 0x246A
    4e64:	88 23       	and	r24, r24
    4e66:	21 f4       	brne	.+8      	; 0x4e70 <__vector_14+0x4c>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    4e68:	81 e0       	ldi	r24, 0x01	; 1
    4e6a:	e0 e0       	ldi	r30, 0x00	; 0
    4e6c:	f6 e0       	ldi	r31, 0x06	; 6
    4e6e:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    4e70:	80 91 5f 24 	lds	r24, 0x245F
    4e74:	90 91 60 24 	lds	r25, 0x2460
    4e78:	a0 91 61 24 	lds	r26, 0x2461
    4e7c:	b0 91 62 24 	lds	r27, 0x2462
    4e80:	01 97       	sbiw	r24, 0x01	; 1
    4e82:	a1 09       	sbc	r26, r1
    4e84:	b1 09       	sbc	r27, r1
    4e86:	80 93 5f 24 	sts	0x245F, r24
    4e8a:	90 93 60 24 	sts	0x2460, r25
    4e8e:	a0 93 61 24 	sts	0x2461, r26
    4e92:	b0 93 62 24 	sts	0x2462, r27
    4e96:	00 97       	sbiw	r24, 0x00	; 0
    4e98:	a1 05       	cpc	r26, r1
    4e9a:	b1 05       	cpc	r27, r1
    4e9c:	79 f4       	brne	.+30     	; 0x4ebc <__vector_14+0x98>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    4e9e:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4ea2:	84 e0       	ldi	r24, 0x04	; 4
    4ea4:	e0 e0       	ldi	r30, 0x00	; 0
    4ea6:	f6 e0       	ldi	r31, 0x06	; 6
    4ea8:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    4eaa:	80 91 5c 24 	lds	r24, 0x245C
    4eae:	87 7f       	andi	r24, 0xF7	; 247
    4eb0:	80 93 5c 24 	sts	0x245C, r24
		if (ax.active_axes == 0) {				// if all axes are done
    4eb4:	88 23       	and	r24, r24
    4eb6:	11 f4       	brne	.+4      	; 0x4ebc <__vector_14+0x98>
			st_execute_move();					// ...run the next move
    4eb8:	0e 94 96 24 	call	0x492c	; 0x492c <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X_AXIS].postscale_value;// reset post-scaler counter
    4ebc:	80 91 65 24 	lds	r24, 0x2465
    4ec0:	90 91 66 24 	lds	r25, 0x2466
    4ec4:	80 93 67 24 	sts	0x2467, r24
    4ec8:	90 93 68 24 	sts	0x2468, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	e0 e0       	ldi	r30, 0x00	; 0
    4ed0:	f6 e0       	ldi	r31, 0x06	; 6
    4ed2:	86 83       	std	Z+6, r24	; 0x06
}
    4ed4:	ff 91       	pop	r31
    4ed6:	ef 91       	pop	r30
    4ed8:	bf 91       	pop	r27
    4eda:	af 91       	pop	r26
    4edc:	9f 91       	pop	r25
    4ede:	8f 91       	pop	r24
    4ee0:	7f 91       	pop	r23
    4ee2:	6f 91       	pop	r22
    4ee4:	5f 91       	pop	r21
    4ee6:	4f 91       	pop	r20
    4ee8:	3f 91       	pop	r19
    4eea:	2f 91       	pop	r18
    4eec:	0f 90       	pop	r0
    4eee:	0b be       	out	0x3b, r0	; 59
    4ef0:	0f 90       	pop	r0
    4ef2:	0f be       	out	0x3f, r0	; 63
    4ef4:	0f 90       	pop	r0
    4ef6:	1f 90       	pop	r1
    4ef8:	18 95       	reti

00004efa <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    4efa:	e0 ea       	ldi	r30, 0xA0	; 160
    4efc:	f0 e0       	ldi	r31, 0x00	; 0
    4efe:	82 81       	ldd	r24, Z+2	; 0x02
    4f00:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    4f02:	98 ed       	ldi	r25, 0xD8	; 216
    4f04:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4f06:	82 83       	std	Z+2, r24	; 0x02
}
    4f08:	08 95       	ret

00004f0a <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    4f0a:	e0 ea       	ldi	r30, 0xA0	; 160
    4f0c:	f0 e0       	ldi	r31, 0x00	; 0
    4f0e:	82 81       	ldd	r24, Z+2	; 0x02
    4f10:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    4f12:	98 ed       	ldi	r25, 0xD8	; 216
    4f14:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4f16:	82 83       	std	Z+2, r24	; 0x02
}
    4f18:	08 95       	ret

00004f1a <xio_null_signal>:
 */

int xio_null_signal(uint8_t sig)
{
	return (TG_NOOP);
}
    4f1a:	81 e0       	ldi	r24, 0x01	; 1
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	08 95       	ret

00004f20 <xio_null_line>:
 */

int xio_null_line(char * buf)
{
	return (TG_OK);
}
    4f20:	80 e0       	ldi	r24, 0x00	; 0
    4f22:	90 e0       	ldi	r25, 0x00	; 0
    4f24:	08 95       	ret

00004f26 <xio_fget_ln>:
 *	dev		XIO device enumeration
 */

int xio_fget_ln(uint8_t dev, char *buf, uint8_t len)
{
	switch (dev) {
    4f26:	81 30       	cpi	r24, 0x01	; 1
    4f28:	61 f0       	breq	.+24     	; 0x4f42 <xio_fget_ln+0x1c>
    4f2a:	81 30       	cpi	r24, 0x01	; 1
    4f2c:	38 f0       	brcs	.+14     	; 0x4f3c <xio_fget_ln+0x16>
    4f2e:	82 30       	cpi	r24, 0x02	; 2
    4f30:	69 f0       	breq	.+26     	; 0x4f4c <xio_fget_ln+0x26>
    4f32:	84 30       	cpi	r24, 0x04	; 4
    4f34:	81 f0       	breq	.+32     	; 0x4f56 <xio_fget_ln+0x30>
    4f36:	20 e1       	ldi	r18, 0x10	; 16
    4f38:	30 e0       	ldi	r19, 0x00	; 0
    4f3a:	12 c0       	rjmp	.+36     	; 0x4f60 <xio_fget_ln+0x3a>
    4f3c:	20 e0       	ldi	r18, 0x00	; 0
    4f3e:	30 e0       	ldi	r19, 0x00	; 0
    4f40:	0f c0       	rjmp	.+30     	; 0x4f60 <xio_fget_ln+0x3a>
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): return (xio_usb_readln(buf, len));
    4f42:	cb 01       	movw	r24, r22
    4f44:	64 2f       	mov	r22, r20
    4f46:	0e 94 42 2b 	call	0x5684	; 0x5684 <xio_usb_readln>
    4f4a:	09 c0       	rjmp	.+18     	; 0x4f5e <xio_fget_ln+0x38>
		case (XIO_DEV_RS485): return (xio_rs485_readln(buf, len));
    4f4c:	cb 01       	movw	r24, r22
    4f4e:	64 2f       	mov	r22, r20
    4f50:	0e 94 43 38 	call	0x7086	; 0x7086 <xio_rs485_readln>
    4f54:	04 c0       	rjmp	.+8      	; 0x4f5e <xio_fget_ln+0x38>
//		case (XIO_DEV_AUX): return (xio_aux_readln(buf, len));
		case (XIO_DEV_PGM): return (xio_pgm_readln(buf, len));
    4f56:	cb 01       	movw	r24, r22
    4f58:	64 2f       	mov	r22, r20
    4f5a:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <xio_pgm_readln>
    4f5e:	9c 01       	movw	r18, r24
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4f60:	c9 01       	movw	r24, r18
    4f62:	08 95       	ret

00004f64 <xio_control>:
 * xio_control() - common entry point for device control functions
 */

int8_t xio_control(uint8_t dev, const uint16_t control, const int16_t arg)
{
	switch (dev) {
    4f64:	81 30       	cpi	r24, 0x01	; 1
    4f66:	51 f0       	breq	.+20     	; 0x4f7c <xio_control+0x18>
    4f68:	81 30       	cpi	r24, 0x01	; 1
    4f6a:	30 f0       	brcs	.+12     	; 0x4f78 <xio_control+0x14>
    4f6c:	82 30       	cpi	r24, 0x02	; 2
    4f6e:	59 f0       	breq	.+22     	; 0x4f86 <xio_control+0x22>
    4f70:	84 30       	cpi	r24, 0x04	; 4
    4f72:	71 f0       	breq	.+28     	; 0x4f90 <xio_control+0x2c>
    4f74:	80 e1       	ldi	r24, 0x10	; 16
    4f76:	08 95       	ret
    4f78:	80 e0       	ldi	r24, 0x00	; 0
    4f7a:	08 95       	ret
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): return (xio_usb_control(control, arg));
    4f7c:	cb 01       	movw	r24, r22
    4f7e:	ba 01       	movw	r22, r20
    4f80:	0e 94 d6 28 	call	0x51ac	; 0x51ac <xio_usb_control>
    4f84:	08 95       	ret
		case (XIO_DEV_RS485): return (xio_rs485_control(control, arg));
    4f86:	cb 01       	movw	r24, r22
    4f88:	ba 01       	movw	r22, r20
    4f8a:	0e 94 d7 35 	call	0x6bae	; 0x6bae <xio_rs485_control>
    4f8e:	08 95       	ret
//		case (XIO_DEV_AUX): return (xio_aux_control(control, arg));
		case (XIO_DEV_PGM): return (xio_pgm_control(control, arg));
    4f90:	cb 01       	movw	r24, r22
    4f92:	ba 01       	movw	r22, r20
    4f94:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <xio_pgm_control>
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4f98:	08 95       	ret

00004f9a <xio_dev_init>:
 * xio_dev_init() - common entry point for device init functions
 */

int8_t xio_dev_init(uint8_t dev, const int16_t arg)
{
	switch (dev) {
    4f9a:	81 30       	cpi	r24, 0x01	; 1
    4f9c:	41 f0       	breq	.+16     	; 0x4fae <xio_dev_init+0x14>
    4f9e:	81 30       	cpi	r24, 0x01	; 1
    4fa0:	68 f0       	brcs	.+26     	; 0x4fbc <xio_dev_init+0x22>
    4fa2:	82 30       	cpi	r24, 0x02	; 2
    4fa4:	41 f0       	breq	.+16     	; 0x4fb6 <xio_dev_init+0x1c>
    4fa6:	84 30       	cpi	r24, 0x04	; 4
    4fa8:	59 f0       	breq	.+22     	; 0x4fc0 <xio_dev_init+0x26>
    4faa:	80 e1       	ldi	r24, 0x10	; 16
    4fac:	08 95       	ret
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): xio_usb_init(arg); return (TG_OK);
    4fae:	cb 01       	movw	r24, r22
    4fb0:	0e 94 10 28 	call	0x5020	; 0x5020 <xio_usb_init>
    4fb4:	03 c0       	rjmp	.+6      	; 0x4fbc <xio_dev_init+0x22>
		case (XIO_DEV_RS485): xio_rs485_init(arg); return (TG_OK);
    4fb6:	cb 01       	movw	r24, r22
    4fb8:	0e 94 10 35 	call	0x6a20	; 0x6a20 <xio_rs485_init>
    4fbc:	80 e0       	ldi	r24, 0x00	; 0
    4fbe:	08 95       	ret
//		case (XIO_DEV_AUX): xio_aux_init(arg); return (TG_OK);
		case (XIO_DEV_PGM): xio_pgm_init(arg); return (TG_OK);
    4fc0:	cb 01       	movw	r24, r22
    4fc2:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <xio_pgm_init>
    4fc6:	80 e0       	ldi	r24, 0x00	; 0
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4fc8:	08 95       	ret

00004fca <xio_init>:
 */

void xio_init(void)
{	
	// USB port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_SEMICOLONS | XIO_BAUD_115200);
    4fca:	85 e0       	ldi	r24, 0x05	; 5
    4fcc:	90 e5       	ldi	r25, 0x50	; 80
    4fce:	0e 94 10 28 	call	0x5020	; 0x5020 <xio_usb_init>

	// RS485 port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_BAUD_115200);
    4fd2:	85 e0       	ldi	r24, 0x05	; 5
    4fd4:	90 e1       	ldi	r25, 0x10	; 16
    4fd6:	0e 94 10 28 	call	0x5020	; 0x5020 <xio_usb_init>

	// PGM file defaults are:	XIO_RD | XIO_BLOCK
//	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE | XIO_SEMICOLONS);
	xio_pgm_init(XIO_LINEMODE);
    4fda:	80 e0       	ldi	r24, 0x00	; 0
    4fdc:	90 e1       	ldi	r25, 0x10	; 16
    4fde:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <xio_pgm_init>

	stddev = &dev_usb;				// stddev is a convenience
    4fe2:	83 e0       	ldi	r24, 0x03	; 3
    4fe4:	90 e2       	ldi	r25, 0x20	; 32
    4fe6:	80 93 0d 25 	sts	0x250D, r24
    4fea:	90 93 0e 25 	sts	0x250E, r25
	stdin = &dev_usb;				// define the console device
    4fee:	80 93 67 25 	sts	0x2567, r24
    4ff2:	90 93 68 25 	sts	0x2568, r25
	stdout = &dev_usb;				// ...
    4ff6:	80 93 69 25 	sts	0x2569, r24
    4ffa:	90 93 6a 25 	sts	0x256A, r25
	stderr = &dev_usb;				// ...
    4ffe:	80 93 6b 25 	sts	0x256B, r24
    5002:	90 93 6c 25 	sts	0x256C, r25

	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    5006:	0f 92       	push	r0
    5008:	0f 92       	push	r0
    500a:	8a e3       	ldi	r24, 0x3A	; 58
    500c:	97 e0       	ldi	r25, 0x07	; 7
    500e:	ed b7       	in	r30, 0x3d	; 61
    5010:	fe b7       	in	r31, 0x3e	; 62
    5012:	81 83       	std	Z+1, r24	; 0x01
    5014:	92 83       	std	Z+2, r25	; 0x02
    5016:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
    501a:	0f 90       	pop	r0
    501c:	0f 90       	pop	r0
}
    501e:	08 95       	ret

00005020 <xio_usb_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_usb_init(const uint16_t control)
{
    5020:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    5022:	e8 2f       	mov	r30, r24
    5024:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	f.flags = XIO_FLAG_USB_DEFS_gm;		// set flags to defaults & initial state
    5026:	87 e3       	ldi	r24, 0x37	; 55
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	80 93 b1 21 	sts	0x21B1, r24
    502e:	90 93 b2 21 	sts	0x21B2, r25
		f.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		f.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    5032:	26 ff       	sbrs	r18, 6
    5034:	06 c0       	rjmp	.+12     	; 0x5042 <xio_usb_init+0x22>
		f.flags |= XIO_FLAG_BLOCK_bm;
    5036:	87 e3       	ldi	r24, 0x37	; 55
    5038:	90 e0       	ldi	r25, 0x00	; 0
    503a:	80 93 b1 21 	sts	0x21B1, r24
    503e:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOBLOCK) {
    5042:	27 ff       	sbrs	r18, 7
    5044:	06 c0       	rjmp	.+12     	; 0x5052 <xio_usb_init+0x32>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    5046:	83 e3       	ldi	r24, 0x33	; 51
    5048:	90 e0       	ldi	r25, 0x00	; 0
    504a:	80 93 b1 21 	sts	0x21B1, r24
    504e:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_ECHO) {
    5052:	30 ff       	sbrs	r19, 0
    5054:	09 c0       	rjmp	.+18     	; 0x5068 <xio_usb_init+0x48>
		f.flags |= XIO_FLAG_ECHO_bm;
    5056:	80 91 b1 21 	lds	r24, 0x21B1
    505a:	90 91 b2 21 	lds	r25, 0x21B2
    505e:	80 61       	ori	r24, 0x10	; 16
    5060:	80 93 b1 21 	sts	0x21B1, r24
    5064:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOECHO) {
    5068:	31 ff       	sbrs	r19, 1
    506a:	09 c0       	rjmp	.+18     	; 0x507e <xio_usb_init+0x5e>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    506c:	80 91 b1 21 	lds	r24, 0x21B1
    5070:	90 91 b2 21 	lds	r25, 0x21B2
    5074:	8f 7e       	andi	r24, 0xEF	; 239
    5076:	80 93 b1 21 	sts	0x21B1, r24
    507a:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_CRLF) {
    507e:	32 ff       	sbrs	r19, 2
    5080:	09 c0       	rjmp	.+18     	; 0x5094 <xio_usb_init+0x74>
		f.flags |= XIO_FLAG_CRLF_bm;
    5082:	80 91 b1 21 	lds	r24, 0x21B1
    5086:	90 91 b2 21 	lds	r25, 0x21B2
    508a:	80 62       	ori	r24, 0x20	; 32
    508c:	80 93 b1 21 	sts	0x21B1, r24
    5090:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOCRLF) {
    5094:	33 ff       	sbrs	r19, 3
    5096:	09 c0       	rjmp	.+18     	; 0x50aa <xio_usb_init+0x8a>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    5098:	80 91 b1 21 	lds	r24, 0x21B1
    509c:	90 91 b2 21 	lds	r25, 0x21B2
    50a0:	8f 7d       	andi	r24, 0xDF	; 223
    50a2:	80 93 b1 21 	sts	0x21B1, r24
    50a6:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_LINEMODE) {
    50aa:	34 ff       	sbrs	r19, 4
    50ac:	09 c0       	rjmp	.+18     	; 0x50c0 <xio_usb_init+0xa0>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    50ae:	80 91 b1 21 	lds	r24, 0x21B1
    50b2:	90 91 b2 21 	lds	r25, 0x21B2
    50b6:	80 64       	ori	r24, 0x40	; 64
    50b8:	80 93 b1 21 	sts	0x21B1, r24
    50bc:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOLINEMODE) {
    50c0:	35 ff       	sbrs	r19, 5
    50c2:	09 c0       	rjmp	.+18     	; 0x50d6 <xio_usb_init+0xb6>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    50c4:	80 91 b1 21 	lds	r24, 0x21B1
    50c8:	90 91 b2 21 	lds	r25, 0x21B2
    50cc:	8f 7b       	andi	r24, 0xBF	; 191
    50ce:	80 93 b1 21 	sts	0x21B1, r24
    50d2:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_SEMICOLONS) {
    50d6:	36 ff       	sbrs	r19, 6
    50d8:	09 c0       	rjmp	.+18     	; 0x50ec <xio_usb_init+0xcc>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    50da:	80 91 b1 21 	lds	r24, 0x21B1
    50de:	90 91 b2 21 	lds	r25, 0x21B2
    50e2:	80 68       	ori	r24, 0x80	; 128
    50e4:	80 93 b1 21 	sts	0x21B1, r24
    50e8:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    50ec:	37 ff       	sbrs	r19, 7
    50ee:	09 c0       	rjmp	.+18     	; 0x5102 <xio_usb_init+0xe2>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    50f0:	80 91 b1 21 	lds	r24, 0x21B1
    50f4:	90 91 b2 21 	lds	r25, 0x21B2
    50f8:	8f 77       	andi	r24, 0x7F	; 127
    50fa:	80 93 b1 21 	sts	0x21B1, r24
    50fe:	90 93 b2 21 	sts	0x21B2, r25
	}

	// character signals and error returns
	f.sig = 0;
    5102:	10 92 b3 21 	sts	0x21B3, r1
	dev_usb.udata = &(f.sig);				// bind sig register to FILE struct
    5106:	83 eb       	ldi	r24, 0xB3	; 179
    5108:	91 e2       	ldi	r25, 0x21	; 33
    510a:	80 93 0f 20 	sts	0x200F, r24
    510e:	90 93 10 20 	sts	0x2010, r25

	// setup internal RX/TX buffers
	f.rx_buf_head = 1;						// can't use location 0
    5112:	81 e0       	ldi	r24, 0x01	; 1
    5114:	80 93 be 21 	sts	0x21BE, r24
	f.rx_buf_tail = 1;
    5118:	80 93 bd 21 	sts	0x21BD, r24
	f.tx_buf_head = 1;
    511c:	80 93 c0 21 	sts	0x21C0, r24
	f.tx_buf_tail = 1;
    5120:	80 93 bf 21 	sts	0x21BF, r24
	f.len = sizeof(f.buf);					// offset to zero
    5124:	82 e0       	ldi	r24, 0x02	; 2
    5126:	80 93 b6 21 	sts	0x21B6, r24

	// bindings
	f.sig_func = &xio_null_signal;			// bind null signal handler
    512a:	8d e8       	ldi	r24, 0x8D	; 141
    512c:	97 e2       	ldi	r25, 0x27	; 39
    512e:	80 93 b9 21 	sts	0x21B9, r24
    5132:	90 93 ba 21 	sts	0x21BA, r25
	f.line_func = &xio_null_line;			// bind null line handler
    5136:	80 e9       	ldi	r24, 0x90	; 144
    5138:	97 e2       	ldi	r25, 0x27	; 39
    513a:	80 93 bb 21 	sts	0x21BB, r24
    513e:	90 93 bc 21 	sts	0x21BC, r25

	f.usart = &USB_USART;					// bind USART structure
    5142:	80 ea       	ldi	r24, 0xA0	; 160
    5144:	98 e0       	ldi	r25, 0x08	; 8
    5146:	80 93 e6 21 	sts	0x21E6, r24
    514a:	90 93 e7 21 	sts	0x21E7, r25
	f.port = &USB_PORT;						// bind PORT structure
    514e:	80 e4       	ldi	r24, 0x40	; 64
    5150:	96 e0       	ldi	r25, 0x06	; 6
    5152:	80 93 e8 21 	sts	0x21E8, r24
    5156:	90 93 e9 21 	sts	0x21E9, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    515a:	ee 23       	and	r30, r30
    515c:	09 f4       	brne	.+2      	; 0x5160 <xio_usb_init+0x140>
    515e:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    5160:	8e 2f       	mov	r24, r30
    5162:	90 e0       	ldi	r25, 0x00	; 0
    5164:	fc 01       	movw	r30, r24
    5166:	ec 5d       	subi	r30, 0xDC	; 220
    5168:	f8 4f       	sbci	r31, 0xF8	; 248
    516a:	e4 91       	lpm	r30, Z+
    516c:	a0 ea       	ldi	r26, 0xA0	; 160
    516e:	b8 e0       	ldi	r27, 0x08	; 8
    5170:	16 96       	adiw	r26, 0x06	; 6
    5172:	ec 93       	st	X, r30
    5174:	16 97       	sbiw	r26, 0x06	; 6
	f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    5176:	81 5d       	subi	r24, 0xD1	; 209
    5178:	98 4f       	sbci	r25, 0xF8	; 248
    517a:	fc 01       	movw	r30, r24
    517c:	84 91       	lpm	r24, Z+
    517e:	17 96       	adiw	r26, 0x07	; 7
    5180:	8c 93       	st	X, r24
    5182:	17 97       	sbiw	r26, 0x07	; 7
	f.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm; // enable tx and rx on USART
    5184:	88 e1       	ldi	r24, 0x18	; 24
    5186:	14 96       	adiw	r26, 0x04	; 4
    5188:	8c 93       	st	X, r24
    518a:	14 97       	sbiw	r26, 0x04	; 4
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    518c:	81 e2       	ldi	r24, 0x21	; 33
    518e:	13 96       	adiw	r26, 0x03	; 3
    5190:	8c 93       	st	X, r24

	f.port->DIRCLR = USB_RX_bm;	 			// clr RX pin as input
    5192:	e0 e4       	ldi	r30, 0x40	; 64
    5194:	f6 e0       	ldi	r31, 0x06	; 6
    5196:	84 e0       	ldi	r24, 0x04	; 4
    5198:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_TX_bm; 			// set TX pin as output
    519a:	88 e0       	ldi	r24, 0x08	; 8
    519c:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_TX_bm;				// set TX HI as initial state
    519e:	85 83       	std	Z+5, r24	; 0x05
	f.port->DIRCLR = USB_CTS_bm; 			// set CTS pin as input
    51a0:	81 e0       	ldi	r24, 0x01	; 1
    51a2:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_RTS_bm; 			// set RTS pin as output
    51a4:	82 e0       	ldi	r24, 0x02	; 2
    51a6:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
    51a8:	85 83       	std	Z+5, r24	; 0x05
//	f.port->OUTCLR = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
}
    51aa:	08 95       	ret

000051ac <xio_usb_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_usb_control(const uint16_t control, const int16_t arg)
{
    51ac:	ac 01       	movw	r20, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    51ae:	84 ff       	sbrs	r24, 4
    51b0:	05 c0       	rjmp	.+10     	; 0x51bc <xio_usb_control+0x10>
		f.sig_func = (fptr_int_uint8)arg;
    51b2:	60 93 b9 21 	sts	0x21B9, r22
    51b6:	70 93 ba 21 	sts	0x21BA, r23
    51ba:	8b c0       	rjmp	.+278    	; 0x52d2 <xio_usb_control+0x126>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    51bc:	85 ff       	sbrs	r24, 5
    51be:	05 c0       	rjmp	.+10     	; 0x51ca <xio_usb_control+0x1e>
		f.line_func = (fptr_int_char_p)arg;
    51c0:	60 93 bb 21 	sts	0x21BB, r22
    51c4:	70 93 bc 21 	sts	0x21BC, r23
    51c8:	84 c0       	rjmp	.+264    	; 0x52d2 <xio_usb_control+0x126>
		return (0);
	}
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    51ca:	8f 70       	andi	r24, 0x0F	; 15
    51cc:	90 70       	andi	r25, 0x00	; 0
    51ce:	00 97       	sbiw	r24, 0x00	; 0
    51d0:	91 f0       	breq	.+36     	; 0x51f6 <xio_usb_control+0x4a>
		f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    51d2:	a0 91 e6 21 	lds	r26, 0x21E6
    51d6:	b0 91 e7 21 	lds	r27, 0x21E7
    51da:	9c 01       	movw	r18, r24
    51dc:	2c 5d       	subi	r18, 0xDC	; 220
    51de:	38 4f       	sbci	r19, 0xF8	; 248
    51e0:	f9 01       	movw	r30, r18
    51e2:	24 91       	lpm	r18, Z+
    51e4:	16 96       	adiw	r26, 0x06	; 6
    51e6:	2c 93       	st	X, r18
    51e8:	16 97       	sbiw	r26, 0x06	; 6
		f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    51ea:	81 5d       	subi	r24, 0xD1	; 209
    51ec:	98 4f       	sbci	r25, 0xF8	; 248
    51ee:	fc 01       	movw	r30, r24
    51f0:	84 91       	lpm	r24, Z+
    51f2:	17 96       	adiw	r26, 0x07	; 7
    51f4:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    51f6:	46 ff       	sbrs	r20, 6
    51f8:	09 c0       	rjmp	.+18     	; 0x520c <xio_usb_control+0x60>
		f.flags |= XIO_FLAG_BLOCK_bm;
    51fa:	80 91 b1 21 	lds	r24, 0x21B1
    51fe:	90 91 b2 21 	lds	r25, 0x21B2
    5202:	84 60       	ori	r24, 0x04	; 4
    5204:	80 93 b1 21 	sts	0x21B1, r24
    5208:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOBLOCK) {
    520c:	47 ff       	sbrs	r20, 7
    520e:	09 c0       	rjmp	.+18     	; 0x5222 <xio_usb_control+0x76>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    5210:	80 91 b1 21 	lds	r24, 0x21B1
    5214:	90 91 b2 21 	lds	r25, 0x21B2
    5218:	8b 7f       	andi	r24, 0xFB	; 251
    521a:	80 93 b1 21 	sts	0x21B1, r24
    521e:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_ECHO) {
    5222:	50 ff       	sbrs	r21, 0
    5224:	09 c0       	rjmp	.+18     	; 0x5238 <xio_usb_control+0x8c>
		f.flags |= XIO_FLAG_ECHO_bm;
    5226:	80 91 b1 21 	lds	r24, 0x21B1
    522a:	90 91 b2 21 	lds	r25, 0x21B2
    522e:	80 61       	ori	r24, 0x10	; 16
    5230:	80 93 b1 21 	sts	0x21B1, r24
    5234:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOECHO) {
    5238:	51 ff       	sbrs	r21, 1
    523a:	09 c0       	rjmp	.+18     	; 0x524e <xio_usb_control+0xa2>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    523c:	80 91 b1 21 	lds	r24, 0x21B1
    5240:	90 91 b2 21 	lds	r25, 0x21B2
    5244:	8f 7e       	andi	r24, 0xEF	; 239
    5246:	80 93 b1 21 	sts	0x21B1, r24
    524a:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_CRLF) {
    524e:	52 ff       	sbrs	r21, 2
    5250:	09 c0       	rjmp	.+18     	; 0x5264 <xio_usb_control+0xb8>
		f.flags |= XIO_FLAG_CRLF_bm;
    5252:	80 91 b1 21 	lds	r24, 0x21B1
    5256:	90 91 b2 21 	lds	r25, 0x21B2
    525a:	80 62       	ori	r24, 0x20	; 32
    525c:	80 93 b1 21 	sts	0x21B1, r24
    5260:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOCRLF) {
    5264:	53 ff       	sbrs	r21, 3
    5266:	09 c0       	rjmp	.+18     	; 0x527a <xio_usb_control+0xce>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    5268:	80 91 b1 21 	lds	r24, 0x21B1
    526c:	90 91 b2 21 	lds	r25, 0x21B2
    5270:	8f 7d       	andi	r24, 0xDF	; 223
    5272:	80 93 b1 21 	sts	0x21B1, r24
    5276:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_LINEMODE) {
    527a:	54 ff       	sbrs	r21, 4
    527c:	09 c0       	rjmp	.+18     	; 0x5290 <xio_usb_control+0xe4>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    527e:	80 91 b1 21 	lds	r24, 0x21B1
    5282:	90 91 b2 21 	lds	r25, 0x21B2
    5286:	80 64       	ori	r24, 0x40	; 64
    5288:	80 93 b1 21 	sts	0x21B1, r24
    528c:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOLINEMODE) {
    5290:	55 ff       	sbrs	r21, 5
    5292:	09 c0       	rjmp	.+18     	; 0x52a6 <xio_usb_control+0xfa>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    5294:	80 91 b1 21 	lds	r24, 0x21B1
    5298:	90 91 b2 21 	lds	r25, 0x21B2
    529c:	8f 7b       	andi	r24, 0xBF	; 191
    529e:	80 93 b1 21 	sts	0x21B1, r24
    52a2:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_SEMICOLONS) {
    52a6:	56 ff       	sbrs	r21, 6
    52a8:	09 c0       	rjmp	.+18     	; 0x52bc <xio_usb_control+0x110>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    52aa:	80 91 b1 21 	lds	r24, 0x21B1
    52ae:	90 91 b2 21 	lds	r25, 0x21B2
    52b2:	80 68       	ori	r24, 0x80	; 128
    52b4:	80 93 b1 21 	sts	0x21B1, r24
    52b8:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    52bc:	57 ff       	sbrs	r21, 7
    52be:	09 c0       	rjmp	.+18     	; 0x52d2 <xio_usb_control+0x126>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    52c0:	80 91 b1 21 	lds	r24, 0x21B1
    52c4:	90 91 b2 21 	lds	r25, 0x21B2
    52c8:	8f 77       	andi	r24, 0x7F	; 127
    52ca:	80 93 b1 21 	sts	0x21B1, r24
    52ce:	90 93 b2 21 	sts	0x21B2, r25
	}
	return (0);
}
    52d2:	80 e0       	ldi	r24, 0x00	; 0
    52d4:	08 95       	ret

000052d6 <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(USB_RX_ISR_vect)		//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    52d6:	1f 92       	push	r1
    52d8:	0f 92       	push	r0
    52da:	0f b6       	in	r0, 0x3f	; 63
    52dc:	0f 92       	push	r0
    52de:	0b b6       	in	r0, 0x3b	; 59
    52e0:	0f 92       	push	r0
    52e2:	11 24       	eor	r1, r1
    52e4:	8f 93       	push	r24
    52e6:	9f 93       	push	r25
    52e8:	af 93       	push	r26
    52ea:	bf 93       	push	r27
    52ec:	ef 93       	push	r30
    52ee:	ff 93       	push	r31
	// normal path
	if ((--f.rx_buf_head) == 0) { 				// advance buffer head with wrap
    52f0:	80 91 be 21 	lds	r24, 0x21BE
    52f4:	81 50       	subi	r24, 0x01	; 1
    52f6:	80 93 be 21 	sts	0x21BE, r24
    52fa:	80 91 be 21 	lds	r24, 0x21BE
    52fe:	88 23       	and	r24, r24
    5300:	19 f4       	brne	.+6      	; 0x5308 <__vector_25+0x32>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    5302:	81 e1       	ldi	r24, 0x11	; 17
    5304:	80 93 be 21 	sts	0x21BE, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    5308:	90 91 be 21 	lds	r25, 0x21BE
    530c:	80 91 bd 21 	lds	r24, 0x21BD
    5310:	98 17       	cp	r25, r24
    5312:	61 f0       	breq	.+24     	; 0x532c <__vector_25+0x56>
		f.rx_buf[f.rx_buf_head] = f.usart->DATA;// (= USARTC0.DATA;)
    5314:	e0 91 be 21 	lds	r30, 0x21BE
    5318:	f0 e0       	ldi	r31, 0x00	; 0
    531a:	a0 91 e6 21 	lds	r26, 0x21E6
    531e:	b0 91 e7 21 	lds	r27, 0x21E7
    5322:	8c 91       	ld	r24, X
    5324:	ef 54       	subi	r30, 0x4F	; 79
    5326:	fe 4d       	sbci	r31, 0xDE	; 222
    5328:	81 8b       	std	Z+17, r24	; 0x11
    532a:	0c c0       	rjmp	.+24     	; 0x5344 <__vector_25+0x6e>
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    532c:	80 91 be 21 	lds	r24, 0x21BE
    5330:	8f 5f       	subi	r24, 0xFF	; 255
    5332:	80 93 be 21 	sts	0x21BE, r24
    5336:	80 91 be 21 	lds	r24, 0x21BE
    533a:	82 31       	cpi	r24, 0x12	; 18
    533c:	18 f0       	brcs	.+6      	; 0x5344 <__vector_25+0x6e>
		f.rx_buf_head = 1;
    533e:	81 e0       	ldi	r24, 0x01	; 1
    5340:	80 93 be 21 	sts	0x21BE, r24
	}
	// activate flow control here or before it gets to this level
}
    5344:	ff 91       	pop	r31
    5346:	ef 91       	pop	r30
    5348:	bf 91       	pop	r27
    534a:	af 91       	pop	r26
    534c:	9f 91       	pop	r25
    534e:	8f 91       	pop	r24
    5350:	0f 90       	pop	r0
    5352:	0b be       	out	0x3b, r0	; 59
    5354:	0f 90       	pop	r0
    5356:	0f be       	out	0x3f, r0	; 63
    5358:	0f 90       	pop	r0
    535a:	1f 90       	pop	r1
    535c:	18 95       	reti

0000535e <xio_usb_queue_RX_char>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_usb_queue_RX_char(const char c)
{
    535e:	28 2f       	mov	r18, r24
	// normal path
	if ((--f.rx_buf_head) == 0) { 				// wrap condition
    5360:	80 91 be 21 	lds	r24, 0x21BE
    5364:	81 50       	subi	r24, 0x01	; 1
    5366:	80 93 be 21 	sts	0x21BE, r24
    536a:	80 91 be 21 	lds	r24, 0x21BE
    536e:	88 23       	and	r24, r24
    5370:	19 f4       	brne	.+6      	; 0x5378 <xio_usb_queue_RX_char+0x1a>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    5372:	81 e1       	ldi	r24, 0x11	; 17
    5374:	80 93 be 21 	sts	0x21BE, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    5378:	90 91 be 21 	lds	r25, 0x21BE
    537c:	80 91 bd 21 	lds	r24, 0x21BD
    5380:	98 17       	cp	r25, r24
    5382:	39 f0       	breq	.+14     	; 0x5392 <xio_usb_queue_RX_char+0x34>
		f.rx_buf[f.rx_buf_head] = c;			// FAKE INPUT DATA
    5384:	e0 91 be 21 	lds	r30, 0x21BE
    5388:	f0 e0       	ldi	r31, 0x00	; 0
    538a:	ef 54       	subi	r30, 0x4F	; 79
    538c:	fe 4d       	sbci	r31, 0xDE	; 222
    538e:	21 8b       	std	Z+17, r18	; 0x11
    5390:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    5392:	80 91 be 21 	lds	r24, 0x21BE
    5396:	8f 5f       	subi	r24, 0xFF	; 255
    5398:	80 93 be 21 	sts	0x21BE, r24
    539c:	80 91 be 21 	lds	r24, 0x21BE
    53a0:	82 31       	cpi	r24, 0x12	; 18
    53a2:	18 f0       	brcs	.+6      	; 0x53aa <xio_usb_queue_RX_char+0x4c>
		f.rx_buf_head = 1;
    53a4:	81 e0       	ldi	r24, 0x01	; 1
    53a6:	80 93 be 21 	sts	0x21BE, r24
    53aa:	08 95       	ret

000053ac <xio_usb_queue_RX_string>:
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_usb_queue_RX_string(char *buf)
{
    53ac:	1f 93       	push	r17
    53ae:	cf 93       	push	r28
    53b0:	df 93       	push	r29
    53b2:	ec 01       	movw	r28, r24
    53b4:	10 e0       	ldi	r17, 0x00	; 0
    53b6:	02 c0       	rjmp	.+4      	; 0x53bc <xio_usb_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    53b8:	0e 94 af 29 	call	0x535e	; 0x535e <xio_usb_queue_RX_char>
void xio_usb_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    53bc:	fe 01       	movw	r30, r28
    53be:	e1 0f       	add	r30, r17
    53c0:	f1 1d       	adc	r31, r1
    53c2:	80 81       	ld	r24, Z
    53c4:	1f 5f       	subi	r17, 0xFF	; 255
    53c6:	88 23       	and	r24, r24
    53c8:	b9 f7       	brne	.-18     	; 0x53b8 <xio_usb_queue_RX_string+0xc>
		xio_usb_queue_RX_char(c);
	}
}
    53ca:	df 91       	pop	r29
    53cc:	cf 91       	pop	r28
    53ce:	1f 91       	pop	r17
    53d0:	08 95       	ret

000053d2 <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)		//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    53d2:	1f 92       	push	r1
    53d4:	0f 92       	push	r0
    53d6:	0f b6       	in	r0, 0x3f	; 63
    53d8:	0f 92       	push	r0
    53da:	0b b6       	in	r0, 0x3b	; 59
    53dc:	0f 92       	push	r0
    53de:	11 24       	eor	r1, r1
    53e0:	8f 93       	push	r24
    53e2:	9f 93       	push	r25
    53e4:	af 93       	push	r26
    53e6:	bf 93       	push	r27
    53e8:	ef 93       	push	r30
    53ea:	ff 93       	push	r31
	if (f.tx_buf_head == f.tx_buf_tail) {			// buffer empty - disable ints
    53ec:	90 91 c0 21 	lds	r25, 0x21C0
    53f0:	80 91 bf 21 	lds	r24, 0x21BF
    53f4:	98 17       	cp	r25, r24
    53f6:	39 f4       	brne	.+14     	; 0x5406 <__vector_26+0x34>
		f.usart->CTRLA = USARTC0_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    53f8:	e0 91 e6 21 	lds	r30, 0x21E6
    53fc:	f0 91 e7 21 	lds	r31, 0x21E7
    5400:	80 e2       	ldi	r24, 0x20	; 32
    5402:	83 83       	std	Z+3, r24	; 0x03
    5404:	1e c0       	rjmp	.+60     	; 0x5442 <__vector_26+0x70>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(f.flags)) {
    5406:	80 91 b1 21 	lds	r24, 0x21B1
    540a:	90 91 b2 21 	lds	r25, 0x21B2
    540e:	93 fd       	sbrc	r25, 3
    5410:	18 c0       	rjmp	.+48     	; 0x5442 <__vector_26+0x70>
		if (--(f.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    5412:	80 91 bf 21 	lds	r24, 0x21BF
    5416:	81 50       	subi	r24, 0x01	; 1
    5418:	80 93 bf 21 	sts	0x21BF, r24
    541c:	80 91 bf 21 	lds	r24, 0x21BF
    5420:	88 23       	and	r24, r24
    5422:	19 f4       	brne	.+6      	; 0x542a <__vector_26+0x58>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5424:	81 e1       	ldi	r24, 0x11	; 17
    5426:	80 93 bf 21 	sts	0x21BF, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];	// write char to TX DATA register
    542a:	e0 91 e6 21 	lds	r30, 0x21E6
    542e:	f0 91 e7 21 	lds	r31, 0x21E7
    5432:	a0 91 bf 21 	lds	r26, 0x21BF
    5436:	b0 e0       	ldi	r27, 0x00	; 0
    5438:	af 54       	subi	r26, 0x4F	; 79
    543a:	be 4d       	sbci	r27, 0xDE	; 222
    543c:	93 96       	adiw	r26, 0x23	; 35
    543e:	8c 91       	ld	r24, X
    5440:	80 83       	st	Z, r24
	}
}
    5442:	ff 91       	pop	r31
    5444:	ef 91       	pop	r30
    5446:	bf 91       	pop	r27
    5448:	af 91       	pop	r26
    544a:	9f 91       	pop	r25
    544c:	8f 91       	pop	r24
    544e:	0f 90       	pop	r0
    5450:	0b be       	out	0x3b, r0	; 59
    5452:	0f 90       	pop	r0
    5454:	0f be       	out	0x3f, r0	; 63
    5456:	0f 90       	pop	r0
    5458:	1f 90       	pop	r1
    545a:	18 95       	reti

0000545c <xio_usb_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
    545c:	48 2f       	mov	r20, r24
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    545e:	20 91 b1 21 	lds	r18, 0x21B1
    5462:	30 91 b2 21 	lds	r19, 0x21B2
    5466:	d9 01       	movw	r26, r18
    5468:	a4 70       	andi	r26, 0x04	; 4
    546a:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    546c:	b9 01       	movw	r22, r18
    546e:	60 72       	andi	r22, 0x20	; 32
    5470:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
    5472:	90 91 c0 21 	lds	r25, 0x21C0
    5476:	91 50       	subi	r25, 0x01	; 1
    5478:	c1 f4       	brne	.+48     	; 0x54aa <xio_usb_putc+0x4e>
    547a:	91 e1       	ldi	r25, 0x11	; 17
    547c:	16 c0       	rjmp	.+44     	; 0x54aa <xio_usb_putc+0x4e>
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    547e:	10 97       	sbiw	r26, 0x00	; 0
    5480:	61 f0       	breq	.+24     	; 0x549a <xio_usb_putc+0x3e>
			sleep_mode();
    5482:	80 91 48 00 	lds	r24, 0x0048
    5486:	81 60       	ori	r24, 0x01	; 1
    5488:	80 93 48 00 	sts	0x0048, r24
    548c:	88 95       	sleep
    548e:	80 91 48 00 	lds	r24, 0x0048
    5492:	8e 7f       	andi	r24, 0xFE	; 254
    5494:	80 93 48 00 	sts	0x0048, r24
    5498:	08 c0       	rjmp	.+16     	; 0x54aa <xio_usb_putc+0x4e>
    549a:	90 93 c1 21 	sts	0x21C1, r25
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    549e:	83 e0       	ldi	r24, 0x03	; 3
    54a0:	80 93 b3 21 	sts	0x21B3, r24
    54a4:	2f ef       	ldi	r18, 0xFF	; 255
    54a6:	3f ef       	ldi	r19, 0xFF	; 255
    54a8:	54 c0       	rjmp	.+168    	; 0x5552 <xio_usb_putc+0xf6>
int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
    54aa:	80 91 bf 21 	lds	r24, 0x21BF
    54ae:	98 17       	cp	r25, r24
    54b0:	31 f3       	breq	.-52     	; 0x547e <xio_usb_putc+0x22>
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
    54b2:	90 93 c0 21 	sts	0x21C0, r25
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer
    54b6:	e0 91 c0 21 	lds	r30, 0x21C0
    54ba:	f0 e0       	ldi	r31, 0x00	; 0
    54bc:	ef 54       	subi	r30, 0x4F	; 79
    54be:	fe 4d       	sbci	r31, 0xDE	; 222
    54c0:	43 a3       	std	Z+35, r20	; 0x23

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    54c2:	61 15       	cp	r22, r1
    54c4:	71 05       	cpc	r23, r1
    54c6:	21 f0       	breq	.+8      	; 0x54d0 <xio_usb_putc+0x74>
    54c8:	4a 30       	cpi	r20, 0x0A	; 10
    54ca:	11 f4       	brne	.+4      	; 0x54d0 <xio_usb_putc+0x74>
    54cc:	4d e0       	ldi	r20, 0x0D	; 13
    54ce:	d1 cf       	rjmp	.-94     	; 0x5472 <xio_usb_putc+0x16>
    54d0:	90 93 c1 21 	sts	0x21C1, r25
		return xio_usb_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (f.usart->STATUS & 0x20) {
    54d4:	a0 91 e6 21 	lds	r26, 0x21E6
    54d8:	b0 91 e7 21 	lds	r27, 0x21E7
    54dc:	11 96       	adiw	r26, 0x01	; 1
    54de:	8c 91       	ld	r24, X
    54e0:	11 97       	sbiw	r26, 0x01	; 1
    54e2:	85 ff       	sbrs	r24, 5
    54e4:	27 c0       	rjmp	.+78     	; 0x5534 <xio_usb_putc+0xd8>
		if (f.tx_buf_head == f.tx_buf_tail) {	// buf might be empty if IRQ got it
    54e6:	90 91 c0 21 	lds	r25, 0x21C0
    54ea:	80 91 bf 21 	lds	r24, 0x21BF
    54ee:	98 17       	cp	r25, r24
    54f0:	71 f1       	breq	.+92     	; 0x554e <xio_usb_putc+0xf2>
			return (0);
		}
		f.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    54f2:	38 60       	ori	r19, 0x08	; 8
    54f4:	20 93 b1 21 	sts	0x21B1, r18
    54f8:	30 93 b2 21 	sts	0x21B2, r19
		if (--(f.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    54fc:	80 91 bf 21 	lds	r24, 0x21BF
    5500:	81 50       	subi	r24, 0x01	; 1
    5502:	80 93 bf 21 	sts	0x21BF, r24
    5506:	80 91 bf 21 	lds	r24, 0x21BF
    550a:	88 23       	and	r24, r24
    550c:	19 f4       	brne	.+6      	; 0x5514 <xio_usb_putc+0xb8>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    550e:	81 e1       	ldi	r24, 0x11	; 17
    5510:	80 93 bf 21 	sts	0x21BF, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];// write char to TX DATA register
    5514:	e0 91 bf 21 	lds	r30, 0x21BF
    5518:	f0 e0       	ldi	r31, 0x00	; 0
    551a:	ef 54       	subi	r30, 0x4F	; 79
    551c:	fe 4d       	sbci	r31, 0xDE	; 222
    551e:	83 a1       	ldd	r24, Z+35	; 0x23
    5520:	8c 93       	st	X, r24
		f.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    5522:	80 91 b1 21 	lds	r24, 0x21B1
    5526:	90 91 b2 21 	lds	r25, 0x21B2
    552a:	97 7f       	andi	r25, 0xF7	; 247
    552c:	80 93 b1 21 	sts	0x21B1, r24
    5530:	90 93 b2 21 	sts	0x21B2, r25
	}
	// enable interrupts regardless
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    5534:	e0 91 e6 21 	lds	r30, 0x21E6
    5538:	f0 91 e7 21 	lds	r31, 0x21E7
    553c:	81 e2       	ldi	r24, 0x21	; 33
    553e:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    5540:	80 91 a2 00 	lds	r24, 0x00A2
    5544:	81 60       	ori	r24, 0x01	; 1
    5546:	e0 ea       	ldi	r30, 0xA0	; 160
    5548:	f0 e0       	ldi	r31, 0x00	; 0
    554a:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    554c:	78 94       	sei
    554e:	20 e0       	ldi	r18, 0x00	; 0
    5550:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    5552:	c9 01       	movw	r24, r18
    5554:	08 95       	ret

00005556 <xio_usb_getc>:
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(f.flags)) {
    5556:	20 91 b1 21 	lds	r18, 0x21B1
    555a:	30 91 b2 21 	lds	r19, 0x21B2
    555e:	24 70       	andi	r18, 0x04	; 4
    5560:	30 70       	andi	r19, 0x00	; 0
    5562:	15 c0       	rjmp	.+42     	; 0x558e <xio_usb_getc+0x38>
    5564:	21 15       	cp	r18, r1
    5566:	31 05       	cpc	r19, r1
    5568:	61 f0       	breq	.+24     	; 0x5582 <xio_usb_getc+0x2c>
			sleep_mode();
    556a:	80 91 48 00 	lds	r24, 0x0048
    556e:	81 60       	ori	r24, 0x01	; 1
    5570:	80 93 48 00 	sts	0x0048, r24
    5574:	88 95       	sleep
    5576:	80 91 48 00 	lds	r24, 0x0048
    557a:	8e 7f       	andi	r24, 0xFE	; 254
    557c:	80 93 48 00 	sts	0x0048, r24
    5580:	06 c0       	rjmp	.+12     	; 0x558e <xio_usb_getc+0x38>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    5582:	83 e0       	ldi	r24, 0x03	; 3
    5584:	80 93 b3 21 	sts	0x21B3, r24
    5588:	2f ef       	ldi	r18, 0xFF	; 255
    558a:	3f ef       	ldi	r19, 0xFF	; 255
    558c:	26 c0       	rjmp	.+76     	; 0x55da <xio_usb_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
    558e:	90 91 be 21 	lds	r25, 0x21BE
    5592:	80 91 bd 21 	lds	r24, 0x21BD
    5596:	98 17       	cp	r25, r24
    5598:	29 f3       	breq	.-54     	; 0x5564 <xio_usb_getc+0xe>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    559a:	80 91 bd 21 	lds	r24, 0x21BD
    559e:	81 50       	subi	r24, 0x01	; 1
    55a0:	80 93 bd 21 	sts	0x21BD, r24
    55a4:	80 91 bd 21 	lds	r24, 0x21BD
    55a8:	88 23       	and	r24, r24
    55aa:	19 f4       	brne	.+6      	; 0x55b2 <xio_usb_getc+0x5c>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    55ac:	81 e1       	ldi	r24, 0x11	; 17
    55ae:	80 93 bd 21 	sts	0x21BD, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    55b2:	e0 91 bd 21 	lds	r30, 0x21BD
    55b6:	f0 e0       	ldi	r31, 0x00	; 0
    55b8:	ef 54       	subi	r30, 0x4F	; 79
    55ba:	fe 4d       	sbci	r31, 0xDE	; 222
    55bc:	81 89       	ldd	r24, Z+17	; 0x11
    55be:	8f 77       	andi	r24, 0x7F	; 127
    55c0:	80 93 b4 21 	sts	0x21B4, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[f.c])))());
    55c4:	90 e0       	ldi	r25, 0x00	; 0
    55c6:	88 0f       	add	r24, r24
    55c8:	99 1f       	adc	r25, r25
    55ca:	8a 59       	subi	r24, 0x9A	; 154
    55cc:	97 4f       	sbci	r25, 0xF7	; 247
    55ce:	fc 01       	movw	r30, r24
    55d0:	25 91       	lpm	r18, Z+
    55d2:	34 91       	lpm	r19, Z+
    55d4:	f9 01       	movw	r30, r18
    55d6:	19 95       	eicall
    55d8:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    55da:	c9 01       	movw	r24, r18
    55dc:	08 95       	ret

000055de <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    55de:	80 91 b1 21 	lds	r24, 0x21B1
    55e2:	84 ff       	sbrs	r24, 4
    55e4:	08 c0       	rjmp	.+16     	; 0x55f6 <_getc_char+0x18>
    55e6:	60 91 69 25 	lds	r22, 0x2569
    55ea:	70 91 6a 25 	lds	r23, 0x256A
    55ee:	80 91 b4 21 	lds	r24, 0x21B4
    55f2:	0e 94 2e 2a 	call	0x545c	; 0x545c <xio_usb_putc>
	return(f.c);
}
    55f6:	80 91 b4 21 	lds	r24, 0x21B4
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	08 95       	ret

000055fe <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(f.flags)) f.c = '\n';
    55fe:	90 91 b1 21 	lds	r25, 0x21B1
    5602:	96 ff       	sbrs	r25, 6
    5604:	03 c0       	rjmp	.+6      	; 0x560c <_getc_NEWLINE+0xe>
    5606:	8a e0       	ldi	r24, 0x0A	; 10
    5608:	80 93 b4 21 	sts	0x21B4, r24
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    560c:	94 ff       	sbrs	r25, 4
    560e:	08 c0       	rjmp	.+16     	; 0x5620 <_getc_NEWLINE+0x22>
    5610:	60 91 69 25 	lds	r22, 0x2569
    5614:	70 91 6a 25 	lds	r23, 0x256A
    5618:	80 91 b4 21 	lds	r24, 0x21B4
    561c:	0e 94 2e 2a 	call	0x545c	; 0x545c <xio_usb_putc>
	return(f.c);
}
    5620:	80 91 b4 21 	lds	r24, 0x21B4
    5624:	90 e0       	ldi	r25, 0x00	; 0
    5626:	08 95       	ret

00005628 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(f.flags)) {
    5628:	80 91 b1 21 	lds	r24, 0x21B1
    562c:	87 ff       	sbrs	r24, 7
    562e:	03 c0       	rjmp	.+6      	; 0x5636 <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    5630:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <_getc_NEWLINE>
    5634:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    5636:	0e 94 ef 2a 	call	0x55de	; 0x55de <_getc_char>
}
    563a:	08 95       	ret

0000563c <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	f.sig = XIO_SIG_DELETE;
    563c:	8a e0       	ldi	r24, 0x0A	; 10
    563e:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
}
    5642:	8f ef       	ldi	r24, 0xFF	; 255
    5644:	9f ef       	ldi	r25, 0xFF	; 255
    5646:	08 95       	ret

00005648 <_getc_KILL>:

static int _getc_KILL(void)
{
	f.sig = XIO_SIG_KILL;
    5648:	84 e0       	ldi	r24, 0x04	; 4
    564a:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
}
    564e:	8f ef       	ldi	r24, 0xFF	; 255
    5650:	9f ef       	ldi	r25, 0xFF	; 255
    5652:	08 95       	ret

00005654 <_getc_PAUSE>:

static int _getc_PAUSE(void)
{
	f.sig = XIO_SIG_PAUSE;
    5654:	86 e0       	ldi	r24, 0x06	; 6
    5656:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
}
    565a:	8f ef       	ldi	r24, 0xFF	; 255
    565c:	9f ef       	ldi	r25, 0xFF	; 255
    565e:	08 95       	ret

00005660 <_getc_RESUME>:

static int _getc_RESUME(void)
{
	f.sig = XIO_SIG_RESUME;
    5660:	87 e0       	ldi	r24, 0x07	; 7
    5662:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
}
    5666:	8f ef       	ldi	r24, 0xFF	; 255
    5668:	9f ef       	ldi	r25, 0xFF	; 255
    566a:	08 95       	ret

0000566c <_getc_SHIFTOUT>:

static int _getc_SHIFTOUT(void)
{
	f.sig = XIO_SIG_SHIFTOUT;
    566c:	88 e0       	ldi	r24, 0x08	; 8
    566e:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
}
    5672:	8f ef       	ldi	r24, 0xFF	; 255
    5674:	9f ef       	ldi	r25, 0xFF	; 255
    5676:	08 95       	ret

00005678 <_getc_SHIFTIN>:

static int _getc_SHIFTIN(void)
{
	f.sig = XIO_SIG_SHIFTIN;
    5678:	89 e0       	ldi	r24, 0x09	; 9
    567a:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
}
    567e:	8f ef       	ldi	r24, 0xFF	; 255
    5680:	9f ef       	ldi	r25, 0xFF	; 255
    5682:	08 95       	ret

00005684 <xio_usb_readln>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_usb_readln(char *buf, uint8_t len)
{
	if (!IN_LINE(f.flags)) {					// first time thru initializations
    5684:	20 91 b1 21 	lds	r18, 0x21B1
    5688:	30 91 b2 21 	lds	r19, 0x21B2
    568c:	36 fd       	sbrc	r19, 6
    568e:	0d c0       	rjmp	.+26     	; 0x56aa <xio_usb_readln+0x26>
		f.i = 0;								// zero buffer
    5690:	10 92 b5 21 	sts	0x21B5, r1
		f.len = len;							// save arg into struct 
    5694:	60 93 b6 21 	sts	0x21B6, r22
		f.buf = buf;							// save arg into struct 
    5698:	80 93 b7 21 	sts	0x21B7, r24
    569c:	90 93 b8 21 	sts	0x21B8, r25
//		f.sig = XIO_SIG_OK;						// no signal action
		f.flags |= XIO_FLAG_IN_LINE_bm;			// yes, we are busy getting a line
    56a0:	30 64       	ori	r19, 0x40	; 64
    56a2:	20 93 b1 21 	sts	0x21B1, r18
    56a6:	30 93 b2 21 	sts	0x21B2, r19
	}
	if (f.rx_buf_head == f.rx_buf_tail) {		// RX ISR buffer empty
    56aa:	90 91 be 21 	lds	r25, 0x21BE
    56ae:	80 91 bd 21 	lds	r24, 0x21BD
    56b2:	98 17       	cp	r25, r24
    56b4:	19 f4       	brne	.+6      	; 0x56bc <xio_usb_readln+0x38>
    56b6:	22 e0       	ldi	r18, 0x02	; 2
    56b8:	30 e0       	ldi	r19, 0x00	; 0
    56ba:	20 c0       	rjmp	.+64     	; 0x56fc <xio_usb_readln+0x78>
//		f.sig = XIO_SIG_WOULDBLOCK;
		return(TG_CONTINUE);
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    56bc:	80 91 bd 21 	lds	r24, 0x21BD
    56c0:	81 50       	subi	r24, 0x01	; 1
    56c2:	80 93 bd 21 	sts	0x21BD, r24
    56c6:	80 91 bd 21 	lds	r24, 0x21BD
    56ca:	88 23       	and	r24, r24
    56cc:	19 f4       	brne	.+6      	; 0x56d4 <xio_usb_readln+0x50>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    56ce:	81 e1       	ldi	r24, 0x11	; 17
    56d0:	80 93 bd 21 	sts	0x21BD, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    56d4:	e0 91 bd 21 	lds	r30, 0x21BD
    56d8:	f0 e0       	ldi	r31, 0x00	; 0
    56da:	ef 54       	subi	r30, 0x4F	; 79
    56dc:	fe 4d       	sbci	r31, 0xDE	; 222
    56de:	81 89       	ldd	r24, Z+17	; 0x11
    56e0:	8f 77       	andi	r24, 0x7F	; 127
    56e2:	80 93 b4 21 	sts	0x21B4, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[f.c])))()); // dispatch on character
    56e6:	90 e0       	ldi	r25, 0x00	; 0
    56e8:	88 0f       	add	r24, r24
    56ea:	99 1f       	adc	r25, r25
    56ec:	8a 59       	subi	r24, 0x9A	; 154
    56ee:	98 4f       	sbci	r25, 0xF8	; 248
    56f0:	fc 01       	movw	r30, r24
    56f2:	25 91       	lpm	r18, Z+
    56f4:	34 91       	lpm	r19, Z+
    56f6:	f9 01       	movw	r30, r18
    56f8:	19 95       	eicall
    56fa:	9c 01       	movw	r18, r24
}
    56fc:	c9 01       	movw	r24, r18
    56fe:	08 95       	ret

00005700 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (f.i > f.len) {							// trap buffer overflow
    5700:	90 91 b5 21 	lds	r25, 0x21B5
    5704:	20 91 b6 21 	lds	r18, 0x21B6
    5708:	e0 91 b7 21 	lds	r30, 0x21B7
    570c:	f0 91 b8 21 	lds	r31, 0x21B8
    5710:	29 17       	cp	r18, r25
    5712:	48 f4       	brcc	.+18     	; 0x5726 <_readln_char+0x26>
		f.sig = XIO_SIG_EOL;
    5714:	81 e0       	ldi	r24, 0x01	; 1
    5716:	80 93 b3 21 	sts	0x21B3, r24
		f.buf[f.len] = NUL;						// f.len is zero based
    571a:	e2 0f       	add	r30, r18
    571c:	f1 1d       	adc	r31, r1
    571e:	10 82       	st	Z, r1
    5720:	26 e0       	ldi	r18, 0x06	; 6
    5722:	30 e0       	ldi	r19, 0x00	; 0
    5724:	16 c0       	rjmp	.+44     	; 0x5752 <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	f.buf[f.i++] = f.c;
    5726:	e9 0f       	add	r30, r25
    5728:	f1 1d       	adc	r31, r1
    572a:	80 91 b4 21 	lds	r24, 0x21B4
    572e:	80 83       	st	Z, r24
    5730:	9f 5f       	subi	r25, 0xFF	; 255
    5732:	90 93 b5 21 	sts	0x21B5, r25
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);// conditional echo
    5736:	80 91 b1 21 	lds	r24, 0x21B1
    573a:	84 ff       	sbrs	r24, 4
    573c:	08 c0       	rjmp	.+16     	; 0x574e <_readln_char+0x4e>
    573e:	60 91 69 25 	lds	r22, 0x2569
    5742:	70 91 6a 25 	lds	r23, 0x256A
    5746:	80 91 b4 21 	lds	r24, 0x21B4
    574a:	0e 94 2e 2a 	call	0x545c	; 0x545c <xio_usb_putc>
    574e:	22 e0       	ldi	r18, 0x02	; 2
    5750:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_CONTINUE);						// line is still in process
}
    5752:	c9 01       	movw	r24, r18
    5754:	08 95       	ret

00005756 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	f.sig = XIO_SIG_EOL;
    5756:	81 e0       	ldi	r24, 0x01	; 1
    5758:	80 93 b3 21 	sts	0x21B3, r24
	f.buf[f.i] = NUL;
    575c:	80 91 b5 21 	lds	r24, 0x21B5
    5760:	e0 91 b7 21 	lds	r30, 0x21B7
    5764:	f0 91 b8 21 	lds	r31, 0x21B8
    5768:	e8 0f       	add	r30, r24
    576a:	f1 1d       	adc	r31, r1
    576c:	10 82       	st	Z, r1
	f.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    576e:	20 91 b1 21 	lds	r18, 0x21B1
    5772:	30 91 b2 21 	lds	r19, 0x21B2
    5776:	c9 01       	movw	r24, r18
    5778:	9f 7b       	andi	r25, 0xBF	; 191
    577a:	80 93 b1 21 	sts	0x21B1, r24
    577e:	90 93 b2 21 	sts	0x21B2, r25
	if (ECHO(f.flags)) xio_usb_putc('\n',stdout);// echo a newline
    5782:	24 ff       	sbrs	r18, 4
    5784:	07 c0       	rjmp	.+14     	; 0x5794 <_readln_NEWLINE+0x3e>
    5786:	60 91 69 25 	lds	r22, 0x2569
    578a:	70 91 6a 25 	lds	r23, 0x256A
    578e:	8a e0       	ldi	r24, 0x0A	; 10
    5790:	0e 94 2e 2a 	call	0x545c	; 0x545c <xio_usb_putc>
	return ((int)f.line_func(f.buf));			// call line handler function
    5794:	e0 91 bb 21 	lds	r30, 0x21BB
    5798:	f0 91 bc 21 	lds	r31, 0x21BC
    579c:	80 91 b7 21 	lds	r24, 0x21B7
    57a0:	90 91 b8 21 	lds	r25, 0x21B8
    57a4:	19 95       	eicall
}
    57a6:	08 95       	ret

000057a8 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(f.flags)) {
    57a8:	80 91 b1 21 	lds	r24, 0x21B1
    57ac:	87 ff       	sbrs	r24, 7
    57ae:	03 c0       	rjmp	.+6      	; 0x57b6 <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    57b0:	0e 94 ab 2b 	call	0x5756	; 0x5756 <_readln_NEWLINE>
    57b4:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    57b6:	0e 94 80 2b 	call	0x5700	; 0x5700 <_readln_char>
	}
}
    57ba:	08 95       	ret

000057bc <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--f.i >= 0) {
    57bc:	80 91 b5 21 	lds	r24, 0x21B5
    57c0:	81 50       	subi	r24, 0x01	; 1
    57c2:	80 93 b5 21 	sts	0x21B5, r24
		if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    57c6:	80 91 b1 21 	lds	r24, 0x21B1
    57ca:	84 ff       	sbrs	r24, 4
    57cc:	08 c0       	rjmp	.+16     	; 0x57de <_readln_DELETE+0x22>
    57ce:	60 91 69 25 	lds	r22, 0x2569
    57d2:	70 91 6a 25 	lds	r23, 0x256A
    57d6:	80 91 b4 21 	lds	r24, 0x21B4
    57da:	0e 94 2e 2a 	call	0x545c	; 0x545c <xio_usb_putc>
	} else {
		f.i = 0;
	}
	return (TG_CONTINUE);						// line is still in process
}
    57de:	82 e0       	ldi	r24, 0x02	; 2
    57e0:	90 e0       	ldi	r25, 0x00	; 0
    57e2:	08 95       	ret

000057e4 <_readln_KILL>:

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    57e4:	84 e0       	ldi	r24, 0x04	; 4
    57e6:	80 93 b3 21 	sts	0x21B3, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    57ea:	e0 91 b9 21 	lds	r30, 0x21B9
    57ee:	f0 91 ba 21 	lds	r31, 0x21BA
    57f2:	19 95       	eicall
}

static int _readln_KILL(void)
{
	return _readln_SIG(XIO_SIG_KILL);
}
    57f4:	08 95       	ret

000057f6 <_readln_PAUSE>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    57f6:	86 e0       	ldi	r24, 0x06	; 6
    57f8:	80 93 b3 21 	sts	0x21B3, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    57fc:	e0 91 b9 21 	lds	r30, 0x21B9
    5800:	f0 91 ba 21 	lds	r31, 0x21BA
    5804:	19 95       	eicall
}

static int _readln_PAUSE(void)
{
	return _readln_SIG(XIO_SIG_PAUSE);
}
    5806:	08 95       	ret

00005808 <_readln_RESUME>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    5808:	87 e0       	ldi	r24, 0x07	; 7
    580a:	80 93 b3 21 	sts	0x21B3, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    580e:	e0 91 b9 21 	lds	r30, 0x21B9
    5812:	f0 91 ba 21 	lds	r31, 0x21BA
    5816:	19 95       	eicall
}

static int _readln_RESUME(void)
{
	return _readln_SIG(XIO_SIG_RESUME);
}
    5818:	08 95       	ret

0000581a <_readln_SHIFTOUT>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    581a:	88 e0       	ldi	r24, 0x08	; 8
    581c:	80 93 b3 21 	sts	0x21B3, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    5820:	e0 91 b9 21 	lds	r30, 0x21B9
    5824:	f0 91 ba 21 	lds	r31, 0x21BA
    5828:	19 95       	eicall
}

static int _readln_SHIFTOUT(void)
{
	return _readln_SIG(XIO_SIG_SHIFTOUT);
}
    582a:	08 95       	ret

0000582c <_readln_SHIFTIN>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    582c:	89 e0       	ldi	r24, 0x09	; 9
    582e:	80 93 b3 21 	sts	0x21B3, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    5832:	e0 91 b9 21 	lds	r30, 0x21B9
    5836:	f0 91 ba 21 	lds	r31, 0x21BA
    583a:	19 95       	eicall
}

static int _readln_SHIFTIN(void)
{
	return _readln_SIG(XIO_SIG_SHIFTIN);
}
    583c:	08 95       	ret

0000583e <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    583e:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5840:	e0 ec       	ldi	r30, 0xC0	; 192
    5842:	f1 e0       	ldi	r31, 0x01	; 1
    5844:	80 91 cf 01 	lds	r24, 0x01CF
    5848:	87 fd       	sbrc	r24, 7
    584a:	fa cf       	rjmp	.-12     	; 0x5840 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    584c:	26 2f       	mov	r18, r22
    584e:	30 e0       	ldi	r19, 0x00	; 0
    5850:	2f 71       	andi	r18, 0x1F	; 31
    5852:	30 70       	andi	r19, 0x00	; 0
    5854:	89 2f       	mov	r24, r25
    5856:	90 e0       	ldi	r25, 0x00	; 0
    5858:	45 e0       	ldi	r20, 0x05	; 5
    585a:	88 0f       	add	r24, r24
    585c:	99 1f       	adc	r25, r25
    585e:	4a 95       	dec	r20
    5860:	e1 f7       	brne	.-8      	; 0x585a <EEPROM_ReadByte+0x1c>
    5862:	28 2b       	or	r18, r24
    5864:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    5866:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    586a:	83 2f       	mov	r24, r19
    586c:	8f 71       	andi	r24, 0x1F	; 31
    586e:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5870:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    5872:	86 e0       	ldi	r24, 0x06	; 6
    5874:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5876:	ef 93       	push	r30
    5878:	ff 93       	push	r31
    587a:	0f 93       	push	r16
    587c:	2f 93       	push	r18
    587e:	eb ec       	ldi	r30, 0xCB	; 203
    5880:	f1 e0       	ldi	r31, 0x01	; 1
    5882:	08 ed       	ldi	r16, 0xD8	; 216
    5884:	21 e0       	ldi	r18, 0x01	; 1
    5886:	04 bf       	out	0x34, r16	; 52
    5888:	20 83       	st	Z, r18
    588a:	2f 91       	pop	r18
    588c:	0f 91       	pop	r16
    588e:	ff 91       	pop	r31
    5890:	ef 91       	pop	r30

	return NVM.DATA0;
    5892:	80 91 c4 01 	lds	r24, 0x01C4
}
    5896:	08 95       	ret

00005898 <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    5898:	68 2f       	mov	r22, r24
    589a:	6f 71       	andi	r22, 0x1F	; 31
    589c:	55 e0       	ldi	r21, 0x05	; 5
    589e:	96 95       	lsr	r25
    58a0:	87 95       	ror	r24
    58a2:	5a 95       	dec	r21
    58a4:	e1 f7       	brne	.-8      	; 0x589e <eeprom_get_char+0x6>
    58a6:	0e 94 1f 2c 	call	0x583e	; 0x583e <EEPROM_ReadByte>
}
    58aa:	08 95       	ret

000058ac <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    58ac:	8f 92       	push	r8
    58ae:	9f 92       	push	r9
    58b0:	af 92       	push	r10
    58b2:	bf 92       	push	r11
    58b4:	cf 92       	push	r12
    58b6:	df 92       	push	r13
    58b8:	ff 92       	push	r15
    58ba:	0f 93       	push	r16
    58bc:	1f 93       	push	r17
    58be:	cf 93       	push	r28
    58c0:	df 93       	push	r29
    58c2:	4c 01       	movw	r8, r24
    58c4:	5b 01       	movw	r10, r22
    58c6:	6a 01       	movw	r12, r20
    58c8:	8b 01       	movw	r16, r22
    58ca:	ea 01       	movw	r28, r20
    58cc:	ff 24       	eor	r15, r15
    58ce:	18 c0       	rjmp	.+48     	; 0x5900 <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    58d0:	c8 01       	movw	r24, r16
    58d2:	0e 94 4c 2c 	call	0x5898	; 0x5898 <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    58d6:	ff 20       	and	r15, r15
    58d8:	19 f0       	breq	.+6      	; 0x58e0 <memcpy_from_eeprom_with_checksum+0x34>
    58da:	21 e0       	ldi	r18, 0x01	; 1
    58dc:	30 e0       	ldi	r19, 0x00	; 0
    58de:	08 c0       	rjmp	.+16     	; 0x58f0 <memcpy_from_eeprom_with_checksum+0x44>
    58e0:	2f 2d       	mov	r18, r15
    58e2:	33 27       	eor	r19, r19
    58e4:	27 fd       	sbrc	r18, 7
    58e6:	30 95       	com	r19
    58e8:	22 27       	eor	r18, r18
    58ea:	33 0f       	add	r19, r19
    58ec:	22 1f       	adc	r18, r18
    58ee:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    58f0:	0f 5f       	subi	r16, 0xFF	; 255
    58f2:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    58f4:	f8 2e       	mov	r15, r24
    58f6:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    58f8:	f4 01       	movw	r30, r8
    58fa:	81 93       	st	Z+, r24
    58fc:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    58fe:	21 97       	sbiw	r28, 0x01	; 1
    5900:	20 97       	sbiw	r28, 0x00	; 0
    5902:	31 f7       	brne	.-52     	; 0x58d0 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    5904:	c6 01       	movw	r24, r12
    5906:	8a 0d       	add	r24, r10
    5908:	9b 1d       	adc	r25, r11
    590a:	0e 94 4c 2c 	call	0x5898	; 0x5898 <eeprom_get_char>
    590e:	20 e0       	ldi	r18, 0x00	; 0
    5910:	30 e0       	ldi	r19, 0x00	; 0
    5912:	f8 16       	cp	r15, r24
    5914:	11 f4       	brne	.+4      	; 0x591a <memcpy_from_eeprom_with_checksum+0x6e>
    5916:	21 e0       	ldi	r18, 0x01	; 1
    5918:	30 e0       	ldi	r19, 0x00	; 0
}
    591a:	c9 01       	movw	r24, r18
    591c:	df 91       	pop	r29
    591e:	cf 91       	pop	r28
    5920:	1f 91       	pop	r17
    5922:	0f 91       	pop	r16
    5924:	ff 90       	pop	r15
    5926:	df 90       	pop	r13
    5928:	cf 90       	pop	r12
    592a:	bf 90       	pop	r11
    592c:	af 90       	pop	r10
    592e:	9f 90       	pop	r9
    5930:	8f 90       	pop	r8
    5932:	08 95       	ret

00005934 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5934:	80 91 cf 01 	lds	r24, 0x01CF
    5938:	87 fd       	sbrc	r24, 7
    593a:	fc cf       	rjmp	.-8      	; 0x5934 <EEPROM_WaitForNVM>
}
    593c:	08 95       	ret

0000593e <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    593e:	80 91 cf 01 	lds	r24, 0x01CF
    5942:	87 fd       	sbrc	r24, 7
    5944:	fc cf       	rjmp	.-8      	; 0x593e <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    5946:	80 91 cf 01 	lds	r24, 0x01CF
    594a:	81 ff       	sbrs	r24, 1
    594c:	12 c0       	rjmp	.+36     	; 0x5972 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    594e:	86 e3       	ldi	r24, 0x36	; 54
    5950:	e0 ec       	ldi	r30, 0xC0	; 192
    5952:	f1 e0       	ldi	r31, 0x01	; 1
    5954:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    5956:	ef 93       	push	r30
    5958:	ff 93       	push	r31
    595a:	0f 93       	push	r16
    595c:	2f 93       	push	r18
    595e:	eb ec       	ldi	r30, 0xCB	; 203
    5960:	f1 e0       	ldi	r31, 0x01	; 1
    5962:	08 ed       	ldi	r16, 0xD8	; 216
    5964:	21 e0       	ldi	r18, 0x01	; 1
    5966:	04 bf       	out	0x34, r16	; 52
    5968:	20 83       	st	Z, r18
    596a:	2f 91       	pop	r18
    596c:	0f 91       	pop	r16
    596e:	ff 91       	pop	r31
    5970:	ef 91       	pop	r30
    5972:	08 95       	ret

00005974 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    5974:	df 92       	push	r13
    5976:	ef 92       	push	r14
    5978:	ff 92       	push	r15
    597a:	0f 93       	push	r16
    597c:	1f 93       	push	r17
    597e:	e8 2e       	mov	r14, r24
    5980:	06 2f       	mov	r16, r22
    5982:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    5984:	0e 94 9f 2c 	call	0x593e	; 0x593e <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5988:	e0 ec       	ldi	r30, 0xC0	; 192
    598a:	f1 e0       	ldi	r31, 0x01	; 1
    598c:	83 e3       	ldi	r24, 0x33	; 51
    598e:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    5990:	10 e0       	ldi	r17, 0x00	; 0
    5992:	0f 71       	andi	r16, 0x1F	; 31
    5994:	10 70       	andi	r17, 0x00	; 0
    5996:	ff 24       	eor	r15, r15
    5998:	75 e0       	ldi	r23, 0x05	; 5
    599a:	ee 0c       	add	r14, r14
    599c:	ff 1c       	adc	r15, r15
    599e:	7a 95       	dec	r23
    59a0:	e1 f7       	brne	.-8      	; 0x599a <EEPROM_WriteByte+0x26>
    59a2:	0e 29       	or	r16, r14
    59a4:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    59a6:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    59a8:	81 2f       	mov	r24, r17
    59aa:	8f 71       	andi	r24, 0x1F	; 31
    59ac:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    59ae:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    59b0:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    59b2:	85 e3       	ldi	r24, 0x35	; 53
    59b4:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    59b6:	ef 93       	push	r30
    59b8:	ff 93       	push	r31
    59ba:	0f 93       	push	r16
    59bc:	2f 93       	push	r18
    59be:	eb ec       	ldi	r30, 0xCB	; 203
    59c0:	f1 e0       	ldi	r31, 0x01	; 1
    59c2:	08 ed       	ldi	r16, 0xD8	; 216
    59c4:	21 e0       	ldi	r18, 0x01	; 1
    59c6:	04 bf       	out	0x34, r16	; 52
    59c8:	20 83       	st	Z, r18
    59ca:	2f 91       	pop	r18
    59cc:	0f 91       	pop	r16
    59ce:	ff 91       	pop	r31
    59d0:	ef 91       	pop	r30
}
    59d2:	1f 91       	pop	r17
    59d4:	0f 91       	pop	r16
    59d6:	ff 90       	pop	r15
    59d8:	ef 90       	pop	r14
    59da:	df 90       	pop	r13
    59dc:	08 95       	ret

000059de <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    59de:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    59e0:	68 2f       	mov	r22, r24
    59e2:	6f 71       	andi	r22, 0x1F	; 31
    59e4:	e5 e0       	ldi	r30, 0x05	; 5
    59e6:	96 95       	lsr	r25
    59e8:	87 95       	ror	r24
    59ea:	ea 95       	dec	r30
    59ec:	e1 f7       	brne	.-8      	; 0x59e6 <eeprom_put_char+0x8>
    59ee:	0e 94 ba 2c 	call	0x5974	; 0x5974 <EEPROM_WriteByte>
}
    59f2:	08 95       	ret

000059f4 <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    59f4:	8f 92       	push	r8
    59f6:	9f 92       	push	r9
    59f8:	af 92       	push	r10
    59fa:	bf 92       	push	r11
    59fc:	cf 92       	push	r12
    59fe:	df 92       	push	r13
    5a00:	ef 92       	push	r14
    5a02:	ff 92       	push	r15
    5a04:	0f 93       	push	r16
    5a06:	df 93       	push	r29
    5a08:	cf 93       	push	r28
    5a0a:	0f 92       	push	r0
    5a0c:	0f 92       	push	r0
    5a0e:	cd b7       	in	r28, 0x3d	; 61
    5a10:	de b7       	in	r29, 0x3e	; 62
    5a12:	5c 01       	movw	r10, r24
    5a14:	6b 01       	movw	r12, r22
    5a16:	7a 01       	movw	r14, r20
    5a18:	4a 01       	movw	r8, r20
    5a1a:	00 e0       	ldi	r16, 0x00	; 0
    5a1c:	1e c0       	rjmp	.+60     	; 0x5a5a <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    5a1e:	00 23       	and	r16, r16
    5a20:	19 f0       	breq	.+6      	; 0x5a28 <memcpy_to_eeprom_with_checksum+0x34>
    5a22:	21 e0       	ldi	r18, 0x01	; 1
    5a24:	30 e0       	ldi	r19, 0x00	; 0
    5a26:	08 c0       	rjmp	.+16     	; 0x5a38 <memcpy_to_eeprom_with_checksum+0x44>
    5a28:	20 2f       	mov	r18, r16
    5a2a:	33 27       	eor	r19, r19
    5a2c:	27 fd       	sbrc	r18, 7
    5a2e:	30 95       	com	r19
    5a30:	22 27       	eor	r18, r18
    5a32:	33 0f       	add	r19, r19
    5a34:	22 1f       	adc	r18, r18
    5a36:	33 27       	eor	r19, r19
    checksum += *source;
    5a38:	f6 01       	movw	r30, r12
    5a3a:	61 91       	ld	r22, Z+
    5a3c:	6f 01       	movw	r12, r30
    5a3e:	06 2f       	mov	r16, r22
    5a40:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    5a42:	9c 01       	movw	r18, r24
    5a44:	2f 5f       	subi	r18, 0xFF	; 255
    5a46:	3f 4f       	sbci	r19, 0xFF	; 255
    5a48:	29 83       	std	Y+1, r18	; 0x01
    5a4a:	3a 83       	std	Y+2, r19	; 0x02
    5a4c:	0e 94 ef 2c 	call	0x59de	; 0x59de <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    5a50:	08 94       	sec
    5a52:	81 08       	sbc	r8, r1
    5a54:	91 08       	sbc	r9, r1
    5a56:	89 81       	ldd	r24, Y+1	; 0x01
    5a58:	9a 81       	ldd	r25, Y+2	; 0x02
    5a5a:	81 14       	cp	r8, r1
    5a5c:	91 04       	cpc	r9, r1
    5a5e:	f9 f6       	brne	.-66     	; 0x5a1e <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    5a60:	c7 01       	movw	r24, r14
    5a62:	8a 0d       	add	r24, r10
    5a64:	9b 1d       	adc	r25, r11
    5a66:	60 2f       	mov	r22, r16
    5a68:	0e 94 ef 2c 	call	0x59de	; 0x59de <eeprom_put_char>
}
    5a6c:	0f 90       	pop	r0
    5a6e:	0f 90       	pop	r0
    5a70:	cf 91       	pop	r28
    5a72:	df 91       	pop	r29
    5a74:	0f 91       	pop	r16
    5a76:	ff 90       	pop	r15
    5a78:	ef 90       	pop	r14
    5a7a:	df 90       	pop	r13
    5a7c:	cf 90       	pop	r12
    5a7e:	bf 90       	pop	r11
    5a80:	af 90       	pop	r10
    5a82:	9f 90       	pop	r9
    5a84:	8f 90       	pop	r8
    5a86:	08 95       	ret

00005a88 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    5a88:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a8a:	e0 ec       	ldi	r30, 0xC0	; 192
    5a8c:	f1 e0       	ldi	r31, 0x01	; 1
    5a8e:	80 91 cf 01 	lds	r24, 0x01CF
    5a92:	87 fd       	sbrc	r24, 7
    5a94:	fa cf       	rjmp	.-12     	; 0x5a8a <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5a96:	83 e3       	ldi	r24, 0x33	; 51
    5a98:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    5a9a:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    5a9e:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5aa0:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5aa2:	64 83       	std	Z+4, r22	; 0x04
}
    5aa4:	08 95       	ret

00005aa6 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    5aa6:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5aa8:	e0 ec       	ldi	r30, 0xC0	; 192
    5aaa:	f1 e0       	ldi	r31, 0x01	; 1
    5aac:	80 91 cf 01 	lds	r24, 0x01CF
    5ab0:	87 fd       	sbrc	r24, 7
    5ab2:	fa cf       	rjmp	.-12     	; 0x5aa8 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5ab4:	83 e3       	ldi	r24, 0x33	; 51
    5ab6:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    5ab8:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5aba:	12 82       	std	Z+2, r1	; 0x02
    5abc:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    5abe:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    5ac2:	8d 91       	ld	r24, X+
    5ac4:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    5ac6:	9f 5f       	subi	r25, 0xFF	; 255
    5ac8:	90 32       	cpi	r25, 0x20	; 32
    5aca:	c9 f7       	brne	.-14     	; 0x5abe <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    5acc:	08 95       	ret

00005ace <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    5ace:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5ad0:	e0 ec       	ldi	r30, 0xC0	; 192
    5ad2:	f1 e0       	ldi	r31, 0x01	; 1
    5ad4:	80 91 cf 01 	lds	r24, 0x01CF
    5ad8:	87 fd       	sbrc	r24, 7
    5ada:	fa cf       	rjmp	.-12     	; 0x5ad0 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5adc:	89 2f       	mov	r24, r25
    5ade:	90 e0       	ldi	r25, 0x00	; 0
    5ae0:	a5 e0       	ldi	r26, 0x05	; 5
    5ae2:	88 0f       	add	r24, r24
    5ae4:	99 1f       	adc	r25, r25
    5ae6:	aa 95       	dec	r26
    5ae8:	e1 f7       	brne	.-8      	; 0x5ae2 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5aea:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5aee:	89 2f       	mov	r24, r25
    5af0:	8f 71       	andi	r24, 0x1F	; 31
    5af2:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5af4:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5af6:	85 e3       	ldi	r24, 0x35	; 53
    5af8:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5afa:	ef 93       	push	r30
    5afc:	ff 93       	push	r31
    5afe:	0f 93       	push	r16
    5b00:	2f 93       	push	r18
    5b02:	eb ec       	ldi	r30, 0xCB	; 203
    5b04:	f1 e0       	ldi	r31, 0x01	; 1
    5b06:	08 ed       	ldi	r16, 0xD8	; 216
    5b08:	21 e0       	ldi	r18, 0x01	; 1
    5b0a:	04 bf       	out	0x34, r16	; 52
    5b0c:	20 83       	st	Z, r18
    5b0e:	2f 91       	pop	r18
    5b10:	0f 91       	pop	r16
    5b12:	ff 91       	pop	r31
    5b14:	ef 91       	pop	r30
}
    5b16:	08 95       	ret

00005b18 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    5b18:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5b1a:	e0 ec       	ldi	r30, 0xC0	; 192
    5b1c:	f1 e0       	ldi	r31, 0x01	; 1
    5b1e:	80 91 cf 01 	lds	r24, 0x01CF
    5b22:	87 fd       	sbrc	r24, 7
    5b24:	fa cf       	rjmp	.-12     	; 0x5b1a <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5b26:	89 2f       	mov	r24, r25
    5b28:	90 e0       	ldi	r25, 0x00	; 0
    5b2a:	b5 e0       	ldi	r27, 0x05	; 5
    5b2c:	88 0f       	add	r24, r24
    5b2e:	99 1f       	adc	r25, r25
    5b30:	ba 95       	dec	r27
    5b32:	e1 f7       	brne	.-8      	; 0x5b2c <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5b34:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5b38:	89 2f       	mov	r24, r25
    5b3a:	8f 71       	andi	r24, 0x1F	; 31
    5b3c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5b3e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    5b40:	82 e3       	ldi	r24, 0x32	; 50
    5b42:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5b44:	ef 93       	push	r30
    5b46:	ff 93       	push	r31
    5b48:	0f 93       	push	r16
    5b4a:	2f 93       	push	r18
    5b4c:	eb ec       	ldi	r30, 0xCB	; 203
    5b4e:	f1 e0       	ldi	r31, 0x01	; 1
    5b50:	08 ed       	ldi	r16, 0xD8	; 216
    5b52:	21 e0       	ldi	r18, 0x01	; 1
    5b54:	04 bf       	out	0x34, r16	; 52
    5b56:	20 83       	st	Z, r18
    5b58:	2f 91       	pop	r18
    5b5a:	0f 91       	pop	r16
    5b5c:	ff 91       	pop	r31
    5b5e:	ef 91       	pop	r30
}
    5b60:	08 95       	ret

00005b62 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    5b62:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5b64:	e0 ec       	ldi	r30, 0xC0	; 192
    5b66:	f1 e0       	ldi	r31, 0x01	; 1
    5b68:	80 91 cf 01 	lds	r24, 0x01CF
    5b6c:	87 fd       	sbrc	r24, 7
    5b6e:	fa cf       	rjmp	.-12     	; 0x5b64 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5b70:	89 2f       	mov	r24, r25
    5b72:	90 e0       	ldi	r25, 0x00	; 0
    5b74:	25 e0       	ldi	r18, 0x05	; 5
    5b76:	88 0f       	add	r24, r24
    5b78:	99 1f       	adc	r25, r25
    5b7a:	2a 95       	dec	r18
    5b7c:	e1 f7       	brne	.-8      	; 0x5b76 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5b7e:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5b82:	89 2f       	mov	r24, r25
    5b84:	8f 71       	andi	r24, 0x1F	; 31
    5b86:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5b88:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    5b8a:	84 e3       	ldi	r24, 0x34	; 52
    5b8c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5b8e:	ef 93       	push	r30
    5b90:	ff 93       	push	r31
    5b92:	0f 93       	push	r16
    5b94:	2f 93       	push	r18
    5b96:	eb ec       	ldi	r30, 0xCB	; 203
    5b98:	f1 e0       	ldi	r31, 0x01	; 1
    5b9a:	08 ed       	ldi	r16, 0xD8	; 216
    5b9c:	21 e0       	ldi	r18, 0x01	; 1
    5b9e:	04 bf       	out	0x34, r16	; 52
    5ba0:	20 83       	st	Z, r18
    5ba2:	2f 91       	pop	r18
    5ba4:	0f 91       	pop	r16
    5ba6:	ff 91       	pop	r31
    5ba8:	ef 91       	pop	r30
}
    5baa:	08 95       	ret

00005bac <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5bac:	80 91 cf 01 	lds	r24, 0x01CF
    5bb0:	87 fd       	sbrc	r24, 7
    5bb2:	fc cf       	rjmp	.-8      	; 0x5bac <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    5bb4:	80 e3       	ldi	r24, 0x30	; 48
    5bb6:	e0 ec       	ldi	r30, 0xC0	; 192
    5bb8:	f1 e0       	ldi	r31, 0x01	; 1
    5bba:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5bbc:	ef 93       	push	r30
    5bbe:	ff 93       	push	r31
    5bc0:	0f 93       	push	r16
    5bc2:	2f 93       	push	r18
    5bc4:	eb ec       	ldi	r30, 0xCB	; 203
    5bc6:	f1 e0       	ldi	r31, 0x01	; 1
    5bc8:	08 ed       	ldi	r16, 0xD8	; 216
    5bca:	21 e0       	ldi	r18, 0x01	; 1
    5bcc:	04 bf       	out	0x34, r16	; 52
    5bce:	20 83       	st	Z, r18
    5bd0:	2f 91       	pop	r18
    5bd2:	0f 91       	pop	r16
    5bd4:	ff 91       	pop	r31
    5bd6:	ef 91       	pop	r30
}
    5bd8:	08 95       	ret

00005bda <xio_pgm_init>:
 *
 *  Control parameters are defaulted and may be set using xio_pgm_control()
 */

void xio_pgm_init(const uint16_t control)
{
    5bda:	9c 01       	movw	r18, r24
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;	// set flags to defaults & initial state
    5bdc:	85 e0       	ldi	r24, 0x05	; 5
    5bde:	90 e0       	ldi	r25, 0x00	; 0
    5be0:	80 93 ea 21 	sts	0x21EA, r24
    5be4:	90 93 eb 21 	sts	0x21EB, r25
	if (control & XIO_WR) {				// this is actually an error. Ignore for now.
    5be8:	25 ff       	sbrs	r18, 5
    5bea:	06 c0       	rjmp	.+12     	; 0x5bf8 <xio_pgm_init+0x1e>
		fpgm.flags |= XIO_FLAG_WR_bm;
    5bec:	87 e0       	ldi	r24, 0x07	; 7
    5bee:	90 e0       	ldi	r25, 0x00	; 0
    5bf0:	80 93 ea 21 	sts	0x21EA, r24
    5bf4:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOBLOCK) {		// this is also technically a config error.
    5bf8:	27 ff       	sbrs	r18, 7
    5bfa:	09 c0       	rjmp	.+18     	; 0x5c0e <xio_pgm_init+0x34>
		fpgm.flags &= ~XIO_FLAG_BLOCK_bm;
    5bfc:	80 91 ea 21 	lds	r24, 0x21EA
    5c00:	90 91 eb 21 	lds	r25, 0x21EB
    5c04:	8b 7f       	andi	r24, 0xFB	; 251
    5c06:	80 93 ea 21 	sts	0x21EA, r24
    5c0a:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_ECHO) {
    5c0e:	30 ff       	sbrs	r19, 0
    5c10:	09 c0       	rjmp	.+18     	; 0x5c24 <xio_pgm_init+0x4a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5c12:	80 91 ea 21 	lds	r24, 0x21EA
    5c16:	90 91 eb 21 	lds	r25, 0x21EB
    5c1a:	80 61       	ori	r24, 0x10	; 16
    5c1c:	80 93 ea 21 	sts	0x21EA, r24
    5c20:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOECHO) {
    5c24:	31 ff       	sbrs	r19, 1
    5c26:	09 c0       	rjmp	.+18     	; 0x5c3a <xio_pgm_init+0x60>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5c28:	80 91 ea 21 	lds	r24, 0x21EA
    5c2c:	90 91 eb 21 	lds	r25, 0x21EB
    5c30:	8f 7e       	andi	r24, 0xEF	; 239
    5c32:	80 93 ea 21 	sts	0x21EA, r24
    5c36:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_CRLF) {
    5c3a:	32 ff       	sbrs	r19, 2
    5c3c:	09 c0       	rjmp	.+18     	; 0x5c50 <xio_pgm_init+0x76>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5c3e:	80 91 ea 21 	lds	r24, 0x21EA
    5c42:	90 91 eb 21 	lds	r25, 0x21EB
    5c46:	80 62       	ori	r24, 0x20	; 32
    5c48:	80 93 ea 21 	sts	0x21EA, r24
    5c4c:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOCRLF) {
    5c50:	33 ff       	sbrs	r19, 3
    5c52:	09 c0       	rjmp	.+18     	; 0x5c66 <xio_pgm_init+0x8c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5c54:	80 91 ea 21 	lds	r24, 0x21EA
    5c58:	90 91 eb 21 	lds	r25, 0x21EB
    5c5c:	8f 7d       	andi	r24, 0xDF	; 223
    5c5e:	80 93 ea 21 	sts	0x21EA, r24
    5c62:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_LINEMODE) {
    5c66:	34 ff       	sbrs	r19, 4
    5c68:	09 c0       	rjmp	.+18     	; 0x5c7c <xio_pgm_init+0xa2>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5c6a:	80 91 ea 21 	lds	r24, 0x21EA
    5c6e:	90 91 eb 21 	lds	r25, 0x21EB
    5c72:	80 64       	ori	r24, 0x40	; 64
    5c74:	80 93 ea 21 	sts	0x21EA, r24
    5c78:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOLINEMODE) {
    5c7c:	35 ff       	sbrs	r19, 5
    5c7e:	09 c0       	rjmp	.+18     	; 0x5c92 <xio_pgm_init+0xb8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5c80:	80 91 ea 21 	lds	r24, 0x21EA
    5c84:	90 91 eb 21 	lds	r25, 0x21EB
    5c88:	8f 7b       	andi	r24, 0xBF	; 191
    5c8a:	80 93 ea 21 	sts	0x21EA, r24
    5c8e:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_SEMICOLONS) {
    5c92:	36 ff       	sbrs	r19, 6
    5c94:	09 c0       	rjmp	.+18     	; 0x5ca8 <xio_pgm_init+0xce>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5c96:	80 91 ea 21 	lds	r24, 0x21EA
    5c9a:	90 91 eb 21 	lds	r25, 0x21EB
    5c9e:	80 68       	ori	r24, 0x80	; 128
    5ca0:	80 93 ea 21 	sts	0x21EA, r24
    5ca4:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5ca8:	37 ff       	sbrs	r19, 7
    5caa:	09 c0       	rjmp	.+18     	; 0x5cbe <xio_pgm_init+0xe4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5cac:	80 91 ea 21 	lds	r24, 0x21EA
    5cb0:	90 91 eb 21 	lds	r25, 0x21EB
    5cb4:	8f 77       	andi	r24, 0x7F	; 127
    5cb6:	80 93 ea 21 	sts	0x21EA, r24
    5cba:	90 93 eb 21 	sts	0x21EB, r25
	}

	fpgm.idx = 0;
    5cbe:	10 92 f8 21 	sts	0x21F8, r1
    5cc2:	10 92 f9 21 	sts	0x21F9, r1
	fpgm.sig = 0;
    5cc6:	10 92 ec 21 	sts	0x21EC, r1
	dev_pgm.udata = &(fpgm.sig); 	// bind signals register to pgm FILE struct
    5cca:	8c ee       	ldi	r24, 0xEC	; 236
    5ccc:	91 e2       	ldi	r25, 0x21	; 33
    5cce:	80 93 1d 20 	sts	0x201D, r24
    5cd2:	90 93 1e 20 	sts	0x201E, r25
	fpgm.len = sizeof(fpgm.buf);
    5cd6:	82 e0       	ldi	r24, 0x02	; 2
    5cd8:	80 93 ef 21 	sts	0x21EF, r24

	fpgm.sig_func = &xio_null_signal;			// bind null signal handler
    5cdc:	8d e8       	ldi	r24, 0x8D	; 141
    5cde:	97 e2       	ldi	r25, 0x27	; 39
    5ce0:	80 93 f0 21 	sts	0x21F0, r24
    5ce4:	90 93 f1 21 	sts	0x21F1, r25
	fpgm.line_func = &xio_null_line;			// bind null line handler
    5ce8:	80 e9       	ldi	r24, 0x90	; 144
    5cea:	97 e2       	ldi	r25, 0x27	; 39
    5cec:	80 93 f2 21 	sts	0x21F2, r24
    5cf0:	90 93 f3 21 	sts	0x21F3, r25
}
    5cf4:	08 95       	ret

00005cf6 <xio_pgm_open>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

FILE * xio_pgm_open(const prog_char *addr)
{
	fpgm.flags &= XIO_FLAG_RESET_gm;			// reset the signaling bits
    5cf6:	20 91 ea 21 	lds	r18, 0x21EA
    5cfa:	30 91 eb 21 	lds	r19, 0x21EB
    5cfe:	3f 70       	andi	r19, 0x0F	; 15
    5d00:	20 93 ea 21 	sts	0x21EA, r18
    5d04:	30 93 eb 21 	sts	0x21EB, r19
	fpgm.pgmbase_P = (PROGMEM char *)addr;		// might want to range check this
    5d08:	80 93 f6 21 	sts	0x21F6, r24
    5d0c:	90 93 f7 21 	sts	0x21F7, r25
	fpgm.idx = 0;
    5d10:	10 92 f8 21 	sts	0x21F8, r1
    5d14:	10 92 f9 21 	sts	0x21F9, r1
	return(&dev_pgm);
}
    5d18:	81 e1       	ldi	r24, 0x11	; 17
    5d1a:	90 e2       	ldi	r25, 0x20	; 32
    5d1c:	08 95       	ret

00005d1e <xio_pgm_control>:
 *	XIO_SEMICOLONS <null>		Treat semicolons as line breaks
 *	XIO_NOSEMICOLONS <null>	Y	Don't treat semicolons as line breaks
 */

int8_t xio_pgm_control(const uint16_t control, const int16_t arg)
{
    5d1e:	9c 01       	movw	r18, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    5d20:	84 ff       	sbrs	r24, 4
    5d22:	05 c0       	rjmp	.+10     	; 0x5d2e <xio_pgm_control+0x10>
		fpgm.sig_func = (fptr_int_uint8)arg;
    5d24:	60 93 f0 21 	sts	0x21F0, r22
    5d28:	70 93 f1 21 	sts	0x21F1, r23
    5d2c:	62 c0       	rjmp	.+196    	; 0x5df2 <xio_pgm_control+0xd4>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    5d2e:	85 ff       	sbrs	r24, 5
    5d30:	05 c0       	rjmp	.+10     	; 0x5d3c <xio_pgm_control+0x1e>
		fpgm.line_func = (fptr_int_char_p)arg;
    5d32:	60 93 f2 21 	sts	0x21F2, r22
    5d36:	70 93 f3 21 	sts	0x21F3, r23
    5d3a:	5b c0       	rjmp	.+182    	; 0x5df2 <xio_pgm_control+0xd4>
		return (0);
	}
	// transfer control flags to internal flag bits
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;		// set flags to defaults & initial state
    5d3c:	85 e0       	ldi	r24, 0x05	; 5
    5d3e:	90 e0       	ldi	r25, 0x00	; 0
    5d40:	80 93 ea 21 	sts	0x21EA, r24
    5d44:	90 93 eb 21 	sts	0x21EB, r25
	if (control & XIO_ECHO) {
    5d48:	30 ff       	sbrs	r19, 0
    5d4a:	06 c0       	rjmp	.+12     	; 0x5d58 <xio_pgm_control+0x3a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5d4c:	85 e1       	ldi	r24, 0x15	; 21
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
    5d50:	80 93 ea 21 	sts	0x21EA, r24
    5d54:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOECHO) {
    5d58:	31 ff       	sbrs	r19, 1
    5d5a:	09 c0       	rjmp	.+18     	; 0x5d6e <xio_pgm_control+0x50>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5d5c:	80 91 ea 21 	lds	r24, 0x21EA
    5d60:	90 91 eb 21 	lds	r25, 0x21EB
    5d64:	8f 7e       	andi	r24, 0xEF	; 239
    5d66:	80 93 ea 21 	sts	0x21EA, r24
    5d6a:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_CRLF) {
    5d6e:	32 ff       	sbrs	r19, 2
    5d70:	09 c0       	rjmp	.+18     	; 0x5d84 <xio_pgm_control+0x66>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5d72:	80 91 ea 21 	lds	r24, 0x21EA
    5d76:	90 91 eb 21 	lds	r25, 0x21EB
    5d7a:	80 62       	ori	r24, 0x20	; 32
    5d7c:	80 93 ea 21 	sts	0x21EA, r24
    5d80:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOCRLF) {
    5d84:	33 ff       	sbrs	r19, 3
    5d86:	09 c0       	rjmp	.+18     	; 0x5d9a <xio_pgm_control+0x7c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5d88:	80 91 ea 21 	lds	r24, 0x21EA
    5d8c:	90 91 eb 21 	lds	r25, 0x21EB
    5d90:	8f 7d       	andi	r24, 0xDF	; 223
    5d92:	80 93 ea 21 	sts	0x21EA, r24
    5d96:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_LINEMODE) {
    5d9a:	34 ff       	sbrs	r19, 4
    5d9c:	09 c0       	rjmp	.+18     	; 0x5db0 <xio_pgm_control+0x92>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5d9e:	80 91 ea 21 	lds	r24, 0x21EA
    5da2:	90 91 eb 21 	lds	r25, 0x21EB
    5da6:	80 64       	ori	r24, 0x40	; 64
    5da8:	80 93 ea 21 	sts	0x21EA, r24
    5dac:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOLINEMODE) {
    5db0:	35 ff       	sbrs	r19, 5
    5db2:	09 c0       	rjmp	.+18     	; 0x5dc6 <xio_pgm_control+0xa8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5db4:	80 91 ea 21 	lds	r24, 0x21EA
    5db8:	90 91 eb 21 	lds	r25, 0x21EB
    5dbc:	8f 7b       	andi	r24, 0xBF	; 191
    5dbe:	80 93 ea 21 	sts	0x21EA, r24
    5dc2:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_SEMICOLONS) {
    5dc6:	36 ff       	sbrs	r19, 6
    5dc8:	09 c0       	rjmp	.+18     	; 0x5ddc <xio_pgm_control+0xbe>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5dca:	80 91 ea 21 	lds	r24, 0x21EA
    5dce:	90 91 eb 21 	lds	r25, 0x21EB
    5dd2:	80 68       	ori	r24, 0x80	; 128
    5dd4:	80 93 ea 21 	sts	0x21EA, r24
    5dd8:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5ddc:	37 ff       	sbrs	r19, 7
    5dde:	09 c0       	rjmp	.+18     	; 0x5df2 <xio_pgm_control+0xd4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5de0:	80 91 ea 21 	lds	r24, 0x21EA
    5de4:	90 91 eb 21 	lds	r25, 0x21EB
    5de8:	8f 77       	andi	r24, 0x7F	; 127
    5dea:	80 93 ea 21 	sts	0x21EA, r24
    5dee:	90 93 eb 21 	sts	0x21EB, r25
	}
	return (0);
}
    5df2:	80 e0       	ldi	r24, 0x00	; 0
    5df4:	08 95       	ret

00005df6 <xio_pgm_putc>:
 */

int xio_pgm_putc(const char c, FILE *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    5df6:	8f ef       	ldi	r24, 0xFF	; 255
    5df8:	9f ef       	ldi	r25, 0xFF	; 255
    5dfa:	08 95       	ret

00005dfc <xio_pgm_readln>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_pgm_readln(char *buf, uint8_t len)
{
    5dfc:	9c 01       	movw	r18, r24
	if (!(fpgm.pgmbase_P)) {					// return OK if no file is open
    5dfe:	80 91 f6 21 	lds	r24, 0x21F6
    5e02:	90 91 f7 21 	lds	r25, 0x21F7
    5e06:	89 2b       	or	r24, r25
    5e08:	a9 f0       	breq	.+42     	; 0x5e34 <xio_pgm_readln+0x38>
		return (TG_OK);					 
	}
	fpgm.sig = XIO_SIG_OK;						// initialize signal
    5e0a:	10 92 ec 21 	sts	0x21EC, r1
	if (fgets(buf, len, &dev_pgm) == NULL) {
    5e0e:	c9 01       	movw	r24, r18
    5e10:	70 e0       	ldi	r23, 0x00	; 0
    5e12:	41 e1       	ldi	r20, 0x11	; 17
    5e14:	50 e2       	ldi	r21, 0x20	; 32
    5e16:	0e 94 91 4a 	call	0x9522	; 0x9522 <fgets>
    5e1a:	89 2b       	or	r24, r25
    5e1c:	59 f4       	brne	.+22     	; 0x5e34 <xio_pgm_readln+0x38>
		fpgm.pgmbase_P = NULL;
    5e1e:	10 92 f6 21 	sts	0x21F6, r1
    5e22:	10 92 f7 21 	sts	0x21F7, r1
		clearerr(&dev_pgm);
    5e26:	81 e1       	ldi	r24, 0x11	; 17
    5e28:	90 e2       	ldi	r25, 0x20	; 32
    5e2a:	0e 94 8c 4a 	call	0x9518	; 0x9518 <clearerr>
    5e2e:	24 e0       	ldi	r18, 0x04	; 4
    5e30:	30 e0       	ldi	r19, 0x00	; 0
    5e32:	02 c0       	rjmp	.+4      	; 0x5e38 <xio_pgm_readln+0x3c>
		return (TG_EOF);
    5e34:	20 e0       	ldi	r18, 0x00	; 0
    5e36:	30 e0       	ldi	r19, 0x00	; 0
//	return (fpgm.status);

	// return directly without dispatch through line function callback
//	fpgm.status = ((int)fpgm.line_func(buf));	// call line handler function
	return (TG_OK);
}
    5e38:	c9 01       	movw	r24, r18
    5e3a:	08 95       	ret

00005e3c <xio_pgm_getc>:
 *		- Note: putc should expand newlines to <cr><lf>
 */

int xio_pgm_getc(FILE *stream)
{
	if (fpgm.flags & XIO_FLAG_EOF_bm) {
    5e3c:	40 91 ea 21 	lds	r20, 0x21EA
    5e40:	50 91 eb 21 	lds	r21, 0x21EB
    5e44:	55 ff       	sbrs	r21, 5
    5e46:	06 c0       	rjmp	.+12     	; 0x5e54 <xio_pgm_getc+0x18>
		fpgm.sig = XIO_SIG_EOF;
    5e48:	82 e0       	ldi	r24, 0x02	; 2
    5e4a:	80 93 ec 21 	sts	0x21EC, r24
    5e4e:	2e ef       	ldi	r18, 0xFE	; 254
    5e50:	3f ef       	ldi	r19, 0xFF	; 255
    5e52:	3f c0       	rjmp	.+126    	; 0x5ed2 <xio_pgm_getc+0x96>
		return (_FDEV_EOF);
	}
	if ((fpgm.c = pgm_read_byte(&fpgm.pgmbase_P[fpgm.idx])) == NUL) {
    5e54:	20 91 f8 21 	lds	r18, 0x21F8
    5e58:	30 91 f9 21 	lds	r19, 0x21F9
    5e5c:	e0 91 f6 21 	lds	r30, 0x21F6
    5e60:	f0 91 f7 21 	lds	r31, 0x21F7
    5e64:	e2 0f       	add	r30, r18
    5e66:	f3 1f       	adc	r31, r19
    5e68:	84 91       	lpm	r24, Z+
    5e6a:	80 93 ed 21 	sts	0x21ED, r24
    5e6e:	88 23       	and	r24, r24
    5e70:	29 f4       	brne	.+10     	; 0x5e7c <xio_pgm_getc+0x40>
		fpgm.flags |= XIO_FLAG_EOF_bm;
    5e72:	50 62       	ori	r21, 0x20	; 32
    5e74:	40 93 ea 21 	sts	0x21EA, r20
    5e78:	50 93 eb 21 	sts	0x21EB, r21
	}
	++fpgm.idx;
    5e7c:	2f 5f       	subi	r18, 0xFF	; 255
    5e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    5e80:	20 93 f8 21 	sts	0x21F8, r18
    5e84:	30 93 f9 21 	sts	0x21F9, r19
	if (!LINEMODE(fpgm.flags)) {		// processing is simple if not LINEMODE
    5e88:	90 91 ea 21 	lds	r25, 0x21EA
    5e8c:	96 fd       	sbrc	r25, 6
    5e8e:	07 c0       	rjmp	.+14     	; 0x5e9e <xio_pgm_getc+0x62>
		if (ECHO(fpgm.flags)) {
    5e90:	94 ff       	sbrs	r25, 4
    5e92:	1b c0       	rjmp	.+54     	; 0x5eca <xio_pgm_getc+0x8e>
			putchar(fpgm.c);
    5e94:	60 91 69 25 	lds	r22, 0x2569
    5e98:	70 91 6a 25 	lds	r23, 0x256A
    5e9c:	13 c0       	rjmp	.+38     	; 0x5ec4 <xio_pgm_getc+0x88>
		}
		return (fpgm.c);
	}
	// now do the LINEMODE stuff
	if (fpgm.c == NUL) {				// perform newline substitutions
    5e9e:	88 23       	and	r24, r24
    5ea0:	31 f0       	breq	.+12     	; 0x5eae <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if (fpgm.c == '\r') {
    5ea2:	8d 30       	cpi	r24, 0x0D	; 13
    5ea4:	21 f0       	breq	.+8      	; 0x5eae <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if ((SEMICOLONS(fpgm.flags)) && (fpgm.c == ';')) {
    5ea6:	97 ff       	sbrs	r25, 7
    5ea8:	05 c0       	rjmp	.+10     	; 0x5eb4 <xio_pgm_getc+0x78>
    5eaa:	8b 33       	cpi	r24, 0x3B	; 59
    5eac:	19 f4       	brne	.+6      	; 0x5eb4 <xio_pgm_getc+0x78>
		fpgm.c = '\n';
    5eae:	8a e0       	ldi	r24, 0x0A	; 10
    5eb0:	80 93 ed 21 	sts	0x21ED, r24
	}
	if (ECHO(fpgm.flags)) {
    5eb4:	94 ff       	sbrs	r25, 4
    5eb6:	09 c0       	rjmp	.+18     	; 0x5eca <xio_pgm_getc+0x8e>
		putchar(fpgm.c);
    5eb8:	60 91 69 25 	lds	r22, 0x2569
    5ebc:	70 91 6a 25 	lds	r23, 0x256A
    5ec0:	80 91 ed 21 	lds	r24, 0x21ED
    5ec4:	90 e0       	ldi	r25, 0x00	; 0
    5ec6:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
	}
	return (fpgm.c);
    5eca:	80 91 ed 21 	lds	r24, 0x21ED
    5ece:	28 2f       	mov	r18, r24
    5ed0:	30 e0       	ldi	r19, 0x00	; 0
}
    5ed2:	c9 01       	movw	r24, r18
    5ed4:	08 95       	ret

00005ed6 <_tg_set_source>:
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.source = d;									// d = XIO device #. See xio.h
    5ed6:	80 93 fe 21 	sts	0x21FE, r24
	tg.prompts = TRUE;
    5eda:	61 e0       	ldi	r22, 0x01	; 1
    5edc:	60 93 00 22 	sts	0x2200, r22

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5ee0:	42 e0       	ldi	r20, 0x02	; 2
    5ee2:	40 93 56 22 	sts	0x2256, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5ee6:	28 ec       	ldi	r18, 0xC8	; 200
    5ee8:	3f e2       	ldi	r19, 0x2F	; 47
    5eea:	20 93 58 22 	sts	0x2258, r18
    5eee:	30 93 59 22 	sts	0x2259, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5ef2:	90 e5       	ldi	r25, 0x50	; 80
    5ef4:	90 93 57 22 	sts	0x2257, r25
	tg.source = d;									// d = XIO device #. See xio.h
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5ef8:	40 93 aa 22 	sts	0x22AA, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5efc:	20 93 ac 22 	sts	0x22AC, r18
    5f00:	30 93 ad 22 	sts	0x22AD, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5f04:	90 93 ab 22 	sts	0x22AB, r25
	tg.source = d;									// d = XIO device #. See xio.h
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5f08:	40 93 fe 22 	sts	0x22FE, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5f0c:	20 93 00 23 	sts	0x2300, r18
    5f10:	30 93 01 23 	sts	0x2301, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5f14:	90 93 ff 22 	sts	0x22FF, r25
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
		tg.dev[i].poll_func = &_tg_poll_signal;
    5f18:	20 93 54 23 	sts	0x2354, r18
    5f1c:	30 93 55 23 	sts	0x2355, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5f20:	90 93 53 23 	sts	0x2353, r25
	}
	tg.dev[XIO_DEV_PGM].state = TG_SRC_INACTIVE;	// program memory is an exception
    5f24:	10 92 52 23 	sts	0x2352, r1

	// make selected device active
	tg.dev[d].state = TG_SRC_ACTIVE;	
    5f28:	48 2f       	mov	r20, r24
    5f2a:	50 e0       	ldi	r21, 0x00	; 0
    5f2c:	24 e5       	ldi	r18, 0x54	; 84
    5f2e:	30 e0       	ldi	r19, 0x00	; 0
    5f30:	42 9f       	mul	r20, r18
    5f32:	f0 01       	movw	r30, r0
    5f34:	43 9f       	mul	r20, r19
    5f36:	f0 0d       	add	r31, r0
    5f38:	52 9f       	mul	r21, r18
    5f3a:	f0 0d       	add	r31, r0
    5f3c:	11 24       	eor	r1, r1
    5f3e:	e5 50       	subi	r30, 0x05	; 5
    5f40:	fe 4d       	sbci	r31, 0xDE	; 222
    5f42:	67 83       	std	Z+7, r22	; 0x07
	tg.dev[d].poll_func = &_tg_poll_active;
    5f44:	2a e2       	ldi	r18, 0x2A	; 42
    5f46:	30 e0       	ldi	r19, 0x00	; 0
    5f48:	42 9f       	mul	r20, r18
    5f4a:	f0 01       	movw	r30, r0
    5f4c:	43 9f       	mul	r20, r19
    5f4e:	f0 0d       	add	r31, r0
    5f50:	52 9f       	mul	r21, r18
    5f52:	f0 0d       	add	r31, r0
    5f54:	11 24       	eor	r1, r1
    5f56:	ee 0f       	add	r30, r30
    5f58:	ff 1f       	adc	r31, r31
    5f5a:	e3 50       	subi	r30, 0x03	; 3
    5f5c:	fe 4d       	sbci	r31, 0xDE	; 222
    5f5e:	22 ea       	ldi	r18, 0xA2	; 162
    5f60:	30 e3       	ldi	r19, 0x30	; 48
    5f62:	27 83       	std	Z+7, r18	; 0x07
    5f64:	30 87       	std	Z+8, r19	; 0x08
	if (d == XIO_DEV_PGM) {
    5f66:	84 30       	cpi	r24, 0x04	; 4
    5f68:	11 f4       	brne	.+4      	; 0x5f6e <_tg_set_source+0x98>
		tg.prompts = FALSE;							// no prompts for file input
    5f6a:	10 92 00 22 	sts	0x2200, r1
    5f6e:	08 95       	ret

00005f70 <tg_pause>:
}

void tg_pause()
{
	return;
}
    5f70:	08 95       	ret

00005f72 <tg_resume>:

void tg_resume()
{
	return;
}
    5f72:	08 95       	ret

00005f74 <tg_kill>:
	return (0);
}

void tg_kill()
{
	_tg_set_source(tg.source_default);	// return control to standard device
    5f74:	80 91 ff 21 	lds	r24, 0x21FF
    5f78:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <_tg_set_source>
	mc_motion_stop();					// stop computing and generating motions
    5f7c:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    5f80:	0e 94 c5 31 	call	0x638a	; 0x638a <mv_flush>
	st_stop_steppers();					// stop the steppers
    5f84:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <st_stop_steppers>
	return;
}
    5f88:	08 95       	ret

00005f8a <tg_terminate>:

void tg_terminate()
{
	tg_kill();
    5f8a:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <tg_kill>
	return;
}
    5f8e:	08 95       	ret

00005f90 <_tg_poll_signal>:
 *	If a signal is received it's dispatched from the low-level line reader
 *	Any line that's read is ignored (tossed)
 */

static void _tg_poll_signal(uint8_t d)
{
    5f90:	48 2f       	mov	r20, r24
	if (tg.dev[d].state != TG_SRC_SIGNAL) {			// sanity check
    5f92:	28 2f       	mov	r18, r24
    5f94:	30 e0       	ldi	r19, 0x00	; 0
    5f96:	84 e5       	ldi	r24, 0x54	; 84
    5f98:	90 e0       	ldi	r25, 0x00	; 0
    5f9a:	28 9f       	mul	r18, r24
    5f9c:	f0 01       	movw	r30, r0
    5f9e:	29 9f       	mul	r18, r25
    5fa0:	f0 0d       	add	r31, r0
    5fa2:	38 9f       	mul	r19, r24
    5fa4:	f0 0d       	add	r31, r0
    5fa6:	11 24       	eor	r1, r1
    5fa8:	e5 50       	subi	r30, 0x05	; 5
    5faa:	fe 4d       	sbci	r31, 0xDE	; 222
    5fac:	87 81       	ldd	r24, Z+7	; 0x07
    5fae:	82 30       	cpi	r24, 0x02	; 2
    5fb0:	a9 f4       	brne	.+42     	; 0x5fdc <_tg_poll_signal+0x4c>
		return;
	}
	tg.status = xio_fget_ln(d, tg.dev[d].buf, tg.dev[d].len);
    5fb2:	85 e1       	ldi	r24, 0x15	; 21
    5fb4:	90 e0       	ldi	r25, 0x00	; 0
    5fb6:	28 9f       	mul	r18, r24
    5fb8:	b0 01       	movw	r22, r0
    5fba:	29 9f       	mul	r18, r25
    5fbc:	70 0d       	add	r23, r0
    5fbe:	38 9f       	mul	r19, r24
    5fc0:	70 0d       	add	r23, r0
    5fc2:	11 24       	eor	r1, r1
    5fc4:	66 0f       	add	r22, r22
    5fc6:	77 1f       	adc	r23, r23
    5fc8:	66 0f       	add	r22, r22
    5fca:	77 1f       	adc	r23, r23
    5fcc:	6a 5f       	subi	r22, 0xFA	; 250
    5fce:	7d 4d       	sbci	r23, 0xDD	; 221
    5fd0:	84 2f       	mov	r24, r20
    5fd2:	40 85       	ldd	r20, Z+8	; 0x08
    5fd4:	0e 94 93 27 	call	0x4f26	; 0x4f26 <xio_fget_ln>
    5fd8:	80 93 fc 21 	sts	0x21FC, r24
    5fdc:	08 95       	ret

00005fde <_tg_prompt>:
	tgModeStringDirect
};

void _tg_prompt()
{
	if ((tg.prompts) && (tg.state == TG_STATE_READY_UNPROMPTED)) {
    5fde:	80 91 00 22 	lds	r24, 0x2200
    5fe2:	88 23       	and	r24, r24
    5fe4:	09 f1       	breq	.+66     	; 0x6028 <__stack+0x29>
    5fe6:	80 91 fb 21 	lds	r24, 0x21FB
    5fea:	88 23       	and	r24, r24
    5fec:	e9 f4       	brne	.+58     	; 0x6028 <__stack+0x29>
		printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5fee:	80 91 fd 21 	lds	r24, 0x21FD
    5ff2:	e8 2f       	mov	r30, r24
    5ff4:	f0 e0       	ldi	r31, 0x00	; 0
    5ff6:	ee 0f       	add	r30, r30
    5ff8:	ff 1f       	adc	r31, r31
    5ffa:	e4 56       	subi	r30, 0x64	; 100
    5ffc:	f5 4e       	sbci	r31, 0xE5	; 229
    5ffe:	25 91       	lpm	r18, Z+
    6000:	34 91       	lpm	r19, Z+
    6002:	00 d0       	rcall	.+0      	; 0x6004 <__stack+0x5>
    6004:	0f 92       	push	r0
    6006:	83 ee       	ldi	r24, 0xE3	; 227
    6008:	9a e1       	ldi	r25, 0x1A	; 26
    600a:	ed b7       	in	r30, 0x3d	; 61
    600c:	fe b7       	in	r31, 0x3e	; 62
    600e:	81 83       	std	Z+1, r24	; 0x01
    6010:	92 83       	std	Z+2, r25	; 0x02
    6012:	23 83       	std	Z+3, r18	; 0x03
    6014:	34 83       	std	Z+4, r19	; 0x04
    6016:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
		tg.state = TG_STATE_READY_PROMPTED;
    601a:	81 e0       	ldi	r24, 0x01	; 1
    601c:	80 93 fb 21 	sts	0x21FB, r24
    6020:	0f 90       	pop	r0
    6022:	0f 90       	pop	r0
    6024:	0f 90       	pop	r0
    6026:	0f 90       	pop	r0
	}
	// bastardized prompts for file sources
	if ((!tg.prompts) && (tg.state == TG_STATE_READY_UNPROMPTED)) {
    6028:	80 91 00 22 	lds	r24, 0x2200
    602c:	88 23       	and	r24, r24
    602e:	f1 f4       	brne	.+60     	; 0x606c <__stack+0x6d>
    6030:	80 91 fb 21 	lds	r24, 0x21FB
    6034:	88 23       	and	r24, r24
    6036:	d1 f4       	brne	.+52     	; 0x606c <__stack+0x6d>
		printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    6038:	80 91 fd 21 	lds	r24, 0x21FD
    603c:	e8 2f       	mov	r30, r24
    603e:	f0 e0       	ldi	r31, 0x00	; 0
    6040:	ee 0f       	add	r30, r30
    6042:	ff 1f       	adc	r31, r31
    6044:	e4 56       	subi	r30, 0x64	; 100
    6046:	f5 4e       	sbci	r31, 0xE5	; 229
    6048:	25 91       	lpm	r18, Z+
    604a:	34 91       	lpm	r19, Z+
    604c:	00 d0       	rcall	.+0      	; 0x604e <__stack+0x4f>
    604e:	0f 92       	push	r0
    6050:	85 ed       	ldi	r24, 0xD5	; 213
    6052:	9a e1       	ldi	r25, 0x1A	; 26
    6054:	ed b7       	in	r30, 0x3d	; 61
    6056:	fe b7       	in	r31, 0x3e	; 62
    6058:	81 83       	std	Z+1, r24	; 0x01
    605a:	92 83       	std	Z+2, r25	; 0x02
    605c:	23 83       	std	Z+3, r18	; 0x03
    605e:	34 83       	std	Z+4, r19	; 0x04
    6060:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
    6064:	0f 90       	pop	r0
    6066:	0f 90       	pop	r0
    6068:	0f 90       	pop	r0
    606a:	0f 90       	pop	r0
    606c:	08 95       	ret

0000606e <tg_signal>:
 * tg_signal() - default signal handler to bind to the line readers
 */

int tg_signal(uint8_t sig)
{
	switch (sig) {
    606e:	84 30       	cpi	r24, 0x04	; 4
    6070:	99 f0       	breq	.+38     	; 0x6098 <tg_signal+0x2a>
    6072:	85 30       	cpi	r24, 0x05	; 5
    6074:	89 f0       	breq	.+34     	; 0x6098 <tg_signal+0x2a>
    6076:	82 30       	cpi	r24, 0x02	; 2
    6078:	89 f4       	brne	.+34     	; 0x609c <tg_signal+0x2e>
		case XIO_SIG_OK: break;
 		case XIO_SIG_EOL: break;

		case XIO_SIG_EOF:
			printf_P(PSTR("\r\nEnd of file encountered\r\n"));
    607a:	0f 92       	push	r0
    607c:	0f 92       	push	r0
    607e:	89 eb       	ldi	r24, 0xB9	; 185
    6080:	9a e1       	ldi	r25, 0x1A	; 26
    6082:	ed b7       	in	r30, 0x3d	; 61
    6084:	fe b7       	in	r31, 0x3e	; 62
    6086:	81 83       	std	Z+1, r24	; 0x01
    6088:	92 83       	std	Z+2, r25	; 0x02
    608a:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
			_tg_prompt();
    608e:	0f 90       	pop	r0
    6090:	0f 90       	pop	r0
    6092:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <_tg_prompt>
    6096:	02 c0       	rjmp	.+4      	; 0x609c <tg_signal+0x2e>
	return;
}

void tg_terminate()
{
	tg_kill();
    6098:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <tg_kill>
		case XIO_SIG_SHIFTOUT: break;
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
}
    609c:	80 e0       	ldi	r24, 0x00	; 0
    609e:	90 e0       	ldi	r25, 0x00	; 0
    60a0:	08 95       	ret

000060a2 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    60a2:	fc 01       	movw	r30, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    60a4:	80 91 fd 21 	lds	r24, 0x21FD
    60a8:	88 23       	and	r24, r24
    60aa:	79 f5       	brne	.+94     	; 0x610a <tg_parser+0x68>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    60ac:	90 81       	ld	r25, Z
    60ae:	89 2f       	mov	r24, r25
    60b0:	81 56       	subi	r24, 0x61	; 97
    60b2:	8a 31       	cpi	r24, 0x1A	; 26
    60b4:	10 f4       	brcc	.+4      	; 0x60ba <tg_parser+0x18>
			buf[0] = buf[0]-'a'+'A';
    60b6:	90 52       	subi	r25, 0x20	; 32
    60b8:	90 83       	st	Z, r25
		}
		switch (buf[0]) {
    60ba:	80 81       	ld	r24, Z
    60bc:	86 34       	cpi	r24, 0x46	; 70
    60be:	b1 f0       	breq	.+44     	; 0x60ec <tg_parser+0x4a>
    60c0:	87 34       	cpi	r24, 0x47	; 71
    60c2:	38 f4       	brcc	.+14     	; 0x60d2 <tg_parser+0x30>
    60c4:	83 34       	cpi	r24, 0x43	; 67
    60c6:	61 f0       	breq	.+24     	; 0x60e0 <tg_parser+0x3e>
    60c8:	84 34       	cpi	r24, 0x44	; 68
    60ca:	71 f0       	breq	.+28     	; 0x60e8 <tg_parser+0x46>
    60cc:	8f 33       	cpi	r24, 0x3F	; 63
    60ce:	d9 f4       	brne	.+54     	; 0x6106 <tg_parser+0x64>
    60d0:	07 c0       	rjmp	.+14     	; 0x60e0 <tg_parser+0x3e>
    60d2:	87 34       	cpi	r24, 0x47	; 71
    60d4:	19 f0       	breq	.+6      	; 0x60dc <tg_parser+0x3a>
    60d6:	8d 54       	subi	r24, 0x4D	; 77
    60d8:	82 30       	cpi	r24, 0x02	; 2
    60da:	a8 f4       	brcc	.+42     	; 0x6106 <tg_parser+0x64>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    60dc:	82 e0       	ldi	r24, 0x02	; 2
    60de:	01 c0       	rjmp	.+2      	; 0x60e2 <tg_parser+0x40>
	if (tg.mode == TG_CONTROL_MODE) {
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
			buf[0] = buf[0]-'a'+'A';
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    60e0:	81 e0       	ldi	r24, 0x01	; 1
    60e2:	80 93 fd 21 	sts	0x21FD, r24
    60e6:	11 c0       	rjmp	.+34     	; 0x610a <tg_parser+0x68>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    60e8:	83 e0       	ldi	r24, 0x03	; 3
    60ea:	fb cf       	rjmp	.-10     	; 0x60e2 <tg_parser+0x40>
//	xio_pgm_open(PGMFILE(&circle_test10));
//	xio_pgm_open(PGMFILE(&square_circle_test10));
//	xio_pgm_open(PGMFILE(&square_circle_test100));
//	xio_pgm_open(PGMFILE(&spiral_test50a));
//	xio_pgm_open(PGMFILE(&spiral_test5));
	xio_pgm_open(PGMFILE(&dwell_test2));
    60ec:	8e e0       	ldi	r24, 0x0E	; 14
    60ee:	9c e0       	ldi	r25, 0x0C	; 12
    60f0:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <xio_pgm_open>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    60f4:	82 e0       	ldi	r24, 0x02	; 2
    60f6:	80 93 fd 21 	sts	0x21FD, r24
//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
//	xio_pgm_open(PGMFILE(&zoetrope));

	// set mode and source for file mode
	_tg_set_mode(TG_GCODE_MODE);
	_tg_set_source(XIO_DEV_PGM);
    60fa:	84 e0       	ldi	r24, 0x04	; 4
    60fc:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <_tg_set_source>
    6100:	20 e0       	ldi	r18, 0x00	; 0
    6102:	30 e0       	ldi	r19, 0x00	; 0
    6104:	1d c0       	rjmp	.+58     	; 0x6140 <tg_parser+0x9e>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    6106:	10 92 fd 21 	sts	0x21FD, r1
			case 'F': return (_tg_test_file());
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    610a:	10 92 fc 21 	sts	0x21FC, r1
	switch (tg.mode) {
    610e:	80 91 fd 21 	lds	r24, 0x21FD
    6112:	82 30       	cpi	r24, 0x02	; 2
    6114:	41 f0       	breq	.+16     	; 0x6126 <tg_parser+0x84>
    6116:	83 30       	cpi	r24, 0x03	; 3
    6118:	51 f0       	breq	.+20     	; 0x612e <tg_parser+0x8c>
    611a:	81 30       	cpi	r24, 0x01	; 1
    611c:	69 f4       	brne	.+26     	; 0x6138 <tg_parser+0x96>
//		case TG_CONTROL_MODE: 
//			break;

		case TG_CONFIG_MODE:
			tg.status = cfg_parse(buf);
    611e:	cf 01       	movw	r24, r30
    6120:	0e 94 09 19 	call	0x3212	; 0x3212 <cfg_parse>
    6124:	07 c0       	rjmp	.+14     	; 0x6134 <tg_parser+0x92>
			break;

		case TG_GCODE_MODE: 
			tg.status = gc_gcode_parser(buf);
    6126:	cf 01       	movw	r24, r30
    6128:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <gc_gcode_parser>
    612c:	03 c0       	rjmp	.+6      	; 0x6134 <tg_parser+0x92>
			break;

		case TG_DIRECT_DRIVE_MODE:
			tg.status = dd_parser(buf);
    612e:	cf 01       	movw	r24, r30
    6130:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <dd_parser>
    6134:	80 93 fc 21 	sts	0x21FC, r24
			break;
	}
	return (tg.status);
    6138:	80 91 fc 21 	lds	r24, 0x21FC
    613c:	28 2f       	mov	r18, r24
    613e:	30 e0       	ldi	r19, 0x00	; 0
}
    6140:	c9 01       	movw	r24, r18
    6142:	08 95       	ret

00006144 <_tg_poll_active>:
/* 
 * _tg_poll_active() - Perform a non-blocking line read from active input device
 */

static void _tg_poll_active(uint8_t d)
{
    6144:	cf 93       	push	r28
    6146:	df 93       	push	r29
    6148:	48 2f       	mov	r20, r24
	if (tg.dev[d].state != TG_SRC_ACTIVE) {			// sanity check
    614a:	28 2f       	mov	r18, r24
    614c:	30 e0       	ldi	r19, 0x00	; 0
    614e:	84 e5       	ldi	r24, 0x54	; 84
    6150:	90 e0       	ldi	r25, 0x00	; 0
    6152:	28 9f       	mul	r18, r24
    6154:	f0 01       	movw	r30, r0
    6156:	29 9f       	mul	r18, r25
    6158:	f0 0d       	add	r31, r0
    615a:	38 9f       	mul	r19, r24
    615c:	f0 0d       	add	r31, r0
    615e:	11 24       	eor	r1, r1
    6160:	e5 50       	subi	r30, 0x05	; 5
    6162:	fe 4d       	sbci	r31, 0xDE	; 222
    6164:	97 81       	ldd	r25, Z+7	; 0x07
    6166:	91 30       	cpi	r25, 0x01	; 1
    6168:	09 f0       	breq	.+2      	; 0x616c <_tg_poll_active+0x28>
    616a:	5b c0       	rjmp	.+182    	; 0x6222 <_tg_poll_active+0xde>
		return;
	}

	// special handling for file sources
	if (tg.source == XIO_DEV_PGM) {
    616c:	80 91 fe 21 	lds	r24, 0x21FE
    6170:	84 30       	cpi	r24, 0x04	; 4
    6172:	39 f4       	brne	.+14     	; 0x6182 <_tg_poll_active+0x3e>
		if (tg.state == TG_STATE_READY_UNPROMPTED) {
    6174:	80 91 fb 21 	lds	r24, 0x21FB
    6178:	88 23       	and	r24, r24
    617a:	09 f0       	breq	.+2      	; 0x617e <_tg_poll_active+0x3a>
    617c:	52 c0       	rjmp	.+164    	; 0x6222 <_tg_poll_active+0xde>
			tg.state = TG_STATE_READY_PROMPTED; 	// issue "virtual prompt"
    617e:	90 93 fb 21 	sts	0x21FB, r25
			return;									// not ready for next line
		}
	}

	// read input line or return if not a completed line
	if ((tg.status = xio_fget_ln(d, tg.dev[d].buf, tg.dev[d].len)) == TG_OK) {
    6182:	85 e1       	ldi	r24, 0x15	; 21
    6184:	90 e0       	ldi	r25, 0x00	; 0
    6186:	28 9f       	mul	r18, r24
    6188:	e0 01       	movw	r28, r0
    618a:	29 9f       	mul	r18, r25
    618c:	d0 0d       	add	r29, r0
    618e:	38 9f       	mul	r19, r24
    6190:	d0 0d       	add	r29, r0
    6192:	11 24       	eor	r1, r1
    6194:	cc 0f       	add	r28, r28
    6196:	dd 1f       	adc	r29, r29
    6198:	cc 0f       	add	r28, r28
    619a:	dd 1f       	adc	r29, r29
    619c:	ca 5f       	subi	r28, 0xFA	; 250
    619e:	dd 4d       	sbci	r29, 0xDD	; 221
    61a0:	84 e5       	ldi	r24, 0x54	; 84
    61a2:	90 e0       	ldi	r25, 0x00	; 0
    61a4:	28 9f       	mul	r18, r24
    61a6:	f0 01       	movw	r30, r0
    61a8:	29 9f       	mul	r18, r25
    61aa:	f0 0d       	add	r31, r0
    61ac:	38 9f       	mul	r19, r24
    61ae:	f0 0d       	add	r31, r0
    61b0:	11 24       	eor	r1, r1
    61b2:	e5 50       	subi	r30, 0x05	; 5
    61b4:	fe 4d       	sbci	r31, 0xDE	; 222
    61b6:	84 2f       	mov	r24, r20
    61b8:	be 01       	movw	r22, r28
    61ba:	40 85       	ldd	r20, Z+8	; 0x08
    61bc:	0e 94 93 27 	call	0x4f26	; 0x4f26 <xio_fget_ln>
    61c0:	80 93 fc 21 	sts	0x21FC, r24
    61c4:	88 23       	and	r24, r24
    61c6:	29 f4       	brne	.+10     	; 0x61d2 <_tg_poll_active+0x8e>
		tg.status = tg_parser(tg.dev[d].buf);	// dispatch to parser
    61c8:	ce 01       	movw	r24, r28
    61ca:	0e 94 51 30 	call	0x60a2	; 0x60a2 <tg_parser>
    61ce:	80 93 fc 21 	sts	0x21FC, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_STATE_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    61d2:	80 91 fc 21 	lds	r24, 0x21FC
    61d6:	82 30       	cpi	r24, 0x02	; 2
    61d8:	61 f0       	breq	.+24     	; 0x61f2 <_tg_poll_active+0xae>
    61da:	83 30       	cpi	r24, 0x03	; 3
    61dc:	28 f4       	brcc	.+10     	; 0x61e8 <_tg_poll_active+0xa4>
    61de:	88 23       	and	r24, r24
    61e0:	f1 f0       	breq	.+60     	; 0x621e <_tg_poll_active+0xda>
    61e2:	81 30       	cpi	r24, 0x01	; 1
    61e4:	e1 f4       	brne	.+56     	; 0x621e <_tg_poll_active+0xda>
    61e6:	1d c0       	rjmp	.+58     	; 0x6222 <_tg_poll_active+0xde>
    61e8:	83 30       	cpi	r24, 0x03	; 3
    61ea:	31 f0       	breq	.+12     	; 0x61f8 <_tg_poll_active+0xb4>
    61ec:	84 30       	cpi	r24, 0x04	; 4
    61ee:	b9 f4       	brne	.+46     	; 0x621e <_tg_poll_active+0xda>
    61f0:	06 c0       	rjmp	.+12     	; 0x61fe <_tg_poll_active+0xba>
		case TG_NOOP: {
			break;
		}

		case TG_CONTINUE: { 						// returned without a new line
			tg.state = TG_STATE_READING_COMMAND; 
    61f2:	80 93 fb 21 	sts	0x21FB, r24
    61f6:	15 c0       	rjmp	.+42     	; 0x6222 <_tg_poll_active+0xde>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    61f8:	10 92 fd 21 	sts	0x21FD, r1
    61fc:	10 c0       	rjmp	.+32     	; 0x621e <_tg_poll_active+0xda>
			tg.state = TG_STATE_READY_UNPROMPTED;
			break;
		}
					  	
		case TG_EOF: {								// file devices only
			printf_P(PSTR("End of command file\n"));
    61fe:	0f 92       	push	r0
    6200:	0f 92       	push	r0
    6202:	84 ea       	ldi	r24, 0xA4	; 164
    6204:	9a e1       	ldi	r25, 0x1A	; 26
    6206:	ed b7       	in	r30, 0x3d	; 61
    6208:	fe b7       	in	r31, 0x3e	; 62
    620a:	81 83       	std	Z+1, r24	; 0x01
    620c:	92 83       	std	Z+2, r25	; 0x02
    620e:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
			_tg_set_source(tg.source_default);		// reset to default src
    6212:	0f 90       	pop	r0
    6214:	0f 90       	pop	r0
    6216:	80 91 ff 21 	lds	r24, 0x21FF
    621a:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <_tg_set_source>
			tg.state = TG_STATE_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_STATE_READY_UNPROMPTED;	// traps various error returns
    621e:	10 92 fb 21 	sts	0x21FB, r1
		}
	}
}
    6222:	df 91       	pop	r29
    6224:	cf 91       	pop	r28
    6226:	08 95       	ret

00006228 <tg_controller>:
 *	more to the point - a hack. If the flow of control gets much more complicated 
 *	it will make sense to replace this section with an event driven dispatcher.
 */

void tg_controller()
{
    6228:	cf 93       	push	r28
    622a:	df 93       	push	r29
//	uint8_t i = 1;

	_tg_prompt();		// Send a prompt - but only if controller is ready for input
    622c:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <_tg_prompt>

	if ((tg.status = mc_line_continuation()) == TG_OK) { // Run the line generator 
    6230:	0e 94 8f 1b 	call	0x371e	; 0x371e <mc_line_continuation>
    6234:	80 93 fc 21 	sts	0x21FC, r24
    6238:	88 23       	and	r24, r24
    623a:	31 f0       	breq	.+12     	; 0x6248 <tg_controller+0x20>
		tg.state = TG_STATE_READY_UNPROMPTED;
		return;
	}

	if ((tg.status = mc_arc_continuation()) == TG_OK) {	 // Run the arc generator 
    623c:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <mc_arc_continuation>
    6240:	80 93 fc 21 	sts	0x21FC, r24
    6244:	88 23       	and	r24, r24
    6246:	19 f4       	brne	.+6      	; 0x624e <tg_controller+0x26>
		tg.state = TG_STATE_READY_UNPROMPTED;
    6248:	10 92 fb 21 	sts	0x21FB, r1
    624c:	21 c0       	rjmp	.+66     	; 0x6290 <tg_controller+0x68>
		return;
	}

	for (tg.i=1; tg.i < XIO_DEV_MAX; tg.i++) {	// Scan all input devices 
    624e:	81 e0       	ldi	r24, 0x01	; 1
    6250:	80 93 01 22 	sts	0x2201, r24
		tg.dev[tg.i].poll_func(tg.i);			//   ...(except /dev/null)
    6254:	ca e2       	ldi	r28, 0x2A	; 42
    6256:	d0 e0       	ldi	r29, 0x00	; 0
    6258:	17 c0       	rjmp	.+46     	; 0x6288 <tg_controller+0x60>
    625a:	82 2f       	mov	r24, r18
    625c:	90 e0       	ldi	r25, 0x00	; 0
    625e:	8c 9f       	mul	r24, r28
    6260:	f0 01       	movw	r30, r0
    6262:	8d 9f       	mul	r24, r29
    6264:	f0 0d       	add	r31, r0
    6266:	9c 9f       	mul	r25, r28
    6268:	f0 0d       	add	r31, r0
    626a:	11 24       	eor	r1, r1
    626c:	ee 0f       	add	r30, r30
    626e:	ff 1f       	adc	r31, r31
    6270:	e3 50       	subi	r30, 0x03	; 3
    6272:	fe 4d       	sbci	r31, 0xDE	; 222
    6274:	07 80       	ldd	r0, Z+7	; 0x07
    6276:	f0 85       	ldd	r31, Z+8	; 0x08
    6278:	e0 2d       	mov	r30, r0
    627a:	82 2f       	mov	r24, r18
    627c:	19 95       	eicall
	if ((tg.status = mc_arc_continuation()) == TG_OK) {	 // Run the arc generator 
		tg.state = TG_STATE_READY_UNPROMPTED;
		return;
	}

	for (tg.i=1; tg.i < XIO_DEV_MAX; tg.i++) {	// Scan all input devices 
    627e:	80 91 01 22 	lds	r24, 0x2201
    6282:	8f 5f       	subi	r24, 0xFF	; 255
    6284:	80 93 01 22 	sts	0x2201, r24
    6288:	20 91 01 22 	lds	r18, 0x2201
    628c:	25 30       	cpi	r18, 0x05	; 5
    628e:	28 f3       	brcs	.-54     	; 0x625a <tg_controller+0x32>
		tg.dev[tg.i].poll_func(tg.i);			//   ...(except /dev/null)
	}
}
    6290:	df 91       	pop	r29
    6292:	cf 91       	pop	r28
    6294:	08 95       	ret

00006296 <tg_init>:
/*
 * tg_init()
 */

void tg_init() 
{
    6296:	0f 93       	push	r16
    6298:	1f 93       	push	r17
	xio_control(XIO_DEV_USB, XIO_SIG_FUNC, (int)&tg_signal); // bind sig handler
    629a:	07 e3       	ldi	r16, 0x37	; 55
    629c:	10 e3       	ldi	r17, 0x30	; 48
    629e:	81 e0       	ldi	r24, 0x01	; 1
    62a0:	60 e1       	ldi	r22, 0x10	; 16
    62a2:	70 e0       	ldi	r23, 0x00	; 0
    62a4:	a8 01       	movw	r20, r16
    62a6:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <xio_control>
	xio_control(XIO_DEV_RS485, XIO_SIG_FUNC, (int)&tg_signal);
    62aa:	82 e0       	ldi	r24, 0x02	; 2
    62ac:	60 e1       	ldi	r22, 0x10	; 16
    62ae:	70 e0       	ldi	r23, 0x00	; 0
    62b0:	a8 01       	movw	r20, r16
    62b2:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <xio_control>
//	xio_control(XIO_DEV_AUX, XIO_SIG_FUNC, (int)&tg_signal);

	tg.source_default = XIO_DEV_USB; 
    62b6:	81 e0       	ldi	r24, 0x01	; 1
    62b8:	80 93 ff 21 	sts	0x21FF, r24
	tg.state = TG_STATE_READY_UNPROMPTED;
    62bc:	10 92 fb 21 	sts	0x21FB, r1
	_tg_set_source(tg.source_default);		// set initial active source
    62c0:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <_tg_set_source>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    62c4:	10 92 fd 21 	sts	0x21FD, r1
	tg.source_default = XIO_DEV_USB; 
	tg.state = TG_STATE_READY_UNPROMPTED;
	_tg_set_source(tg.source_default);		// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode

	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    62c8:	00 d0       	rcall	.+0      	; 0x62ca <tg_init+0x34>
    62ca:	0f 92       	push	r0
    62cc:	8b ef       	ldi	r24, 0xFB	; 251
    62ce:	9a e1       	ldi	r25, 0x1A	; 26
    62d0:	ed b7       	in	r30, 0x3d	; 61
    62d2:	fe b7       	in	r31, 0x3e	; 62
    62d4:	81 83       	std	Z+1, r24	; 0x01
    62d6:	92 83       	std	Z+2, r25	; 0x02
    62d8:	81 ef       	ldi	r24, 0xF1	; 241
    62da:	9a e1       	ldi	r25, 0x1A	; 26
    62dc:	83 83       	std	Z+3, r24	; 0x03
    62de:	94 83       	std	Z+4, r25	; 0x04
    62e0:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <printf_P>
    62e4:	0f 90       	pop	r0
    62e6:	0f 90       	pop	r0
    62e8:	0f 90       	pop	r0
    62ea:	0f 90       	pop	r0
}
    62ec:	1f 91       	pop	r17
    62ee:	0f 91       	pop	r16
    62f0:	08 95       	ret

000062f2 <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    62f2:	08 95       	ret

000062f4 <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    62f4:	80 e0       	ldi	r24, 0x00	; 0
    62f6:	90 e0       	ldi	r25, 0x00	; 0
    62f8:	08 95       	ret

000062fa <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    62fa:	10 92 a6 23 	sts	0x23A6, r1
	mv.move_buffer_tail = 0;
    62fe:	10 92 a7 23 	sts	0x23A7, r1
}
    6302:	08 95       	ret

00006304 <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    6304:	90 91 a6 23 	lds	r25, 0x23A6
    6308:	80 91 a7 23 	lds	r24, 0x23A7
    630c:	98 17       	cp	r25, r24
    630e:	19 f4       	brne	.+6      	; 0x6316 <mv_dequeue_move_buffer+0x12>
    6310:	20 e0       	ldi	r18, 0x00	; 0
    6312:	30 e0       	ldi	r19, 0x00	; 0
    6314:	17 c0       	rjmp	.+46     	; 0x6344 <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    6316:	90 91 a7 23 	lds	r25, 0x23A7
    631a:	8e e1       	ldi	r24, 0x1E	; 30
    631c:	98 9f       	mul	r25, r24
    631e:	90 01       	movw	r18, r0
    6320:	11 24       	eor	r1, r1
    6322:	26 55       	subi	r18, 0x56	; 86
    6324:	3c 4d       	sbci	r19, 0xDC	; 220
    6326:	20 93 a8 23 	sts	0x23A8, r18
    632a:	30 93 a9 23 	sts	0x23A9, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    632e:	80 91 a7 23 	lds	r24, 0x23A7
    6332:	8f 5f       	subi	r24, 0xFF	; 255
    6334:	80 93 a7 23 	sts	0x23A7, r24
    6338:	80 91 a7 23 	lds	r24, 0x23A7
    633c:	84 30       	cpi	r24, 0x04	; 4
    633e:	10 f0       	brcs	.+4      	; 0x6344 <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    6340:	10 92 a7 23 	sts	0x23A7, r1
	}
	return (mv.p); 
}
    6344:	c9 01       	movw	r24, r18
    6346:	08 95       	ret

00006348 <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    6348:	90 91 a6 23 	lds	r25, 0x23A6
    634c:	9f 5f       	subi	r25, 0xFF	; 255
    634e:	94 30       	cpi	r25, 0x04	; 4
    6350:	08 f0       	brcs	.+2      	; 0x6354 <mv_test_move_buffer_full+0xc>
    6352:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    6354:	80 91 a7 23 	lds	r24, 0x23A7
    6358:	20 e0       	ldi	r18, 0x00	; 0
    635a:	89 17       	cp	r24, r25
    635c:	09 f4       	brne	.+2      	; 0x6360 <mv_test_move_buffer_full+0x18>
    635e:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    6360:	82 2f       	mov	r24, r18
    6362:	08 95       	ret

00006364 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    6364:	0b c0       	rjmp	.+22     	; 0x637c <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    6366:	80 91 48 00 	lds	r24, 0x0048
    636a:	81 60       	ori	r24, 0x01	; 1
    636c:	80 93 48 00 	sts	0x0048, r24
    6370:	88 95       	sleep
    6372:	80 91 48 00 	lds	r24, 0x0048
    6376:	8e 7f       	andi	r24, 0xFE	; 254
    6378:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    637c:	90 91 a7 23 	lds	r25, 0x23A7
    6380:	80 91 a6 23 	lds	r24, 0x23A6
    6384:	98 17       	cp	r25, r24
    6386:	79 f7       	brne	.-34     	; 0x6366 <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    6388:	08 95       	ret

0000638a <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    638a:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    638c:	80 91 a6 23 	lds	r24, 0x23A6
    6390:	80 93 a7 23 	sts	0x23A7, r24
	mv.p = NULL;
    6394:	10 92 a8 23 	sts	0x23A8, r1
    6398:	10 92 a9 23 	sts	0x23A9, r1
	sei();
    639c:	78 94       	sei
}
    639e:	08 95       	ret

000063a0 <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    63a0:	2f 92       	push	r2
    63a2:	3f 92       	push	r3
    63a4:	4f 92       	push	r4
    63a6:	5f 92       	push	r5
    63a8:	6f 92       	push	r6
    63aa:	7f 92       	push	r7
    63ac:	8f 92       	push	r8
    63ae:	9f 92       	push	r9
    63b0:	af 92       	push	r10
    63b2:	bf 92       	push	r11
    63b4:	cf 92       	push	r12
    63b6:	df 92       	push	r13
    63b8:	ef 92       	push	r14
    63ba:	ff 92       	push	r15
    63bc:	0f 93       	push	r16
    63be:	1f 93       	push	r17
    63c0:	df 93       	push	r29
    63c2:	cf 93       	push	r28
    63c4:	cd b7       	in	r28, 0x3d	; 61
    63c6:	de b7       	in	r29, 0x3e	; 62
    63c8:	2f 97       	sbiw	r28, 0x0f	; 15
    63ca:	cd bf       	out	0x3d, r28	; 61
    63cc:	de bf       	out	0x3e, r29	; 62
    63ce:	3b 01       	movw	r6, r22
    63d0:	4c 01       	movw	r8, r24
    63d2:	2c 87       	std	Y+12, r18	; 0x0c
    63d4:	3d 87       	std	Y+13, r19	; 0x0d
    63d6:	4e 87       	std	Y+14, r20	; 0x0e
    63d8:	5f 87       	std	Y+15, r21	; 0x0f
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    63da:	20 91 a6 23 	lds	r18, 0x23A6
    63de:	2f 5f       	subi	r18, 0xFF	; 255
    63e0:	29 87       	std	Y+9, r18	; 0x09
    63e2:	24 30       	cpi	r18, 0x04	; 4
    63e4:	08 f0       	brcs	.+2      	; 0x63e8 <mv_queue_move_buffer+0x48>
    63e6:	19 86       	std	Y+9, r1	; 0x09
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    63e8:	80 91 a7 23 	lds	r24, 0x23A7
    63ec:	39 85       	ldd	r19, Y+9	; 0x09
    63ee:	83 17       	cp	r24, r19
    63f0:	11 f4       	brne	.+4      	; 0x63f6 <mv_queue_move_buffer+0x56>
    63f2:	86 e0       	ldi	r24, 0x06	; 6
    63f4:	97 c1       	rjmp	.+814    	; 0x6724 <mv_queue_move_buffer+0x384>
		return (TG_BUFFER_FULL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    63f6:	90 91 a6 23 	lds	r25, 0x23A6
    63fa:	8e e1       	ldi	r24, 0x1E	; 30
    63fc:	98 9f       	mul	r25, r24
    63fe:	20 01       	movw	r4, r0
    6400:	11 24       	eor	r1, r1
    6402:	4a ea       	ldi	r20, 0xAA	; 170
    6404:	53 e2       	ldi	r21, 0x23	; 35
    6406:	44 0e       	add	r4, r20
    6408:	55 1e       	adc	r5, r21
    640a:	40 92 a8 23 	sts	0x23A8, r4
    640e:	50 92 a9 23 	sts	0x23A9, r5
	mv.p->a[X].steps = steps_x;
    6412:	d2 01       	movw	r26, r4
    6414:	6d 92       	st	X+, r6
    6416:	7d 92       	st	X+, r7
    6418:	8d 92       	st	X+, r8
    641a:	9c 92       	st	X, r9
    641c:	13 97       	sbiw	r26, 0x03	; 3
	mv.p->a[Y].steps = steps_y;
    641e:	2c 85       	ldd	r18, Y+12	; 0x0c
    6420:	3d 85       	ldd	r19, Y+13	; 0x0d
    6422:	4e 85       	ldd	r20, Y+14	; 0x0e
    6424:	5f 85       	ldd	r21, Y+15	; 0x0f
    6426:	1a 96       	adiw	r26, 0x0a	; 10
    6428:	2d 93       	st	X+, r18
    642a:	3d 93       	st	X+, r19
    642c:	4d 93       	st	X+, r20
    642e:	5c 93       	st	X, r21
    6430:	1d 97       	sbiw	r26, 0x0d	; 13
	mv.p->a[Z].steps = steps_z;
    6432:	f2 01       	movw	r30, r4
    6434:	e4 8a       	std	Z+20, r14	; 0x14
    6436:	f5 8a       	std	Z+21, r15	; 0x15
    6438:	06 8b       	std	Z+22, r16	; 0x16
    643a:	17 8b       	std	Z+23, r17	; 0x17
	ticks = microseconds * TICKS_PER_MICROSECOND;
    643c:	a5 e0       	ldi	r26, 0x05	; 5
    643e:	aa 0c       	add	r10, r10
    6440:	bb 1c       	adc	r11, r11
    6442:	cc 1c       	adc	r12, r12
    6444:	dd 1c       	adc	r13, r13
    6446:	aa 95       	dec	r26
    6448:	d1 f7       	brne	.-12     	; 0x643e <mv_queue_move_buffer+0x9e>
    644a:	a6 01       	movw	r20, r12
    644c:	95 01       	movw	r18, r10
    644e:	60 e0       	ldi	r22, 0x00	; 0
    6450:	70 e0       	ldi	r23, 0x00	; 0
    6452:	80 e0       	ldi	r24, 0x00	; 0
    6454:	90 e0       	ldi	r25, 0x00	; 0
    6456:	a9 82       	std	Y+1, r10	; 0x01
    6458:	3a 83       	std	Y+2, r19	; 0x02
    645a:	4b 83       	std	Y+3, r20	; 0x03
    645c:	5c 83       	std	Y+4, r21	; 0x04
    645e:	6d 83       	std	Y+5, r22	; 0x05
    6460:	7e 83       	std	Y+6, r23	; 0x06
    6462:	8f 83       	std	Y+7, r24	; 0x07
    6464:	98 87       	std	Y+8, r25	; 0x08

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    6466:	61 14       	cp	r6, r1
    6468:	71 04       	cpc	r7, r1
    646a:	81 04       	cpc	r8, r1
    646c:	91 04       	cpc	r9, r1
    646e:	09 f0       	breq	.+2      	; 0x6472 <mv_queue_move_buffer+0xd2>
    6470:	4f c0       	rjmp	.+158    	; 0x6510 <mv_queue_move_buffer+0x170>
    6472:	4c 85       	ldd	r20, Y+12	; 0x0c
    6474:	5d 85       	ldd	r21, Y+13	; 0x0d
    6476:	6e 85       	ldd	r22, Y+14	; 0x0e
    6478:	7f 85       	ldd	r23, Y+15	; 0x0f
    647a:	41 15       	cp	r20, r1
    647c:	51 05       	cpc	r21, r1
    647e:	61 05       	cpc	r22, r1
    6480:	71 05       	cpc	r23, r1
    6482:	09 f0       	breq	.+2      	; 0x6486 <mv_queue_move_buffer+0xe6>
    6484:	45 c0       	rjmp	.+138    	; 0x6510 <mv_queue_move_buffer+0x170>
    6486:	e1 14       	cp	r14, r1
    6488:	f1 04       	cpc	r15, r1
    648a:	01 05       	cpc	r16, r1
    648c:	11 05       	cpc	r17, r1
    648e:	09 f0       	breq	.+2      	; 0x6492 <mv_queue_move_buffer+0xf2>
    6490:	3f c0       	rjmp	.+126    	; 0x6510 <mv_queue_move_buffer+0x170>
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    6492:	81 e0       	ldi	r24, 0x01	; 1
    6494:	90 e0       	ldi	r25, 0x00	; 0
    6496:	a0 e0       	ldi	r26, 0x00	; 0
    6498:	b0 e0       	ldi	r27, 0x00	; 0
    649a:	80 83       	st	Z, r24
    649c:	91 83       	std	Z+1, r25	; 0x01
    649e:	a2 83       	std	Z+2, r26	; 0x02
    64a0:	b3 83       	std	Z+3, r27	; 0x03
		mv.p->a[X].postscale = 1;
    64a2:	81 e0       	ldi	r24, 0x01	; 1
    64a4:	90 e0       	ldi	r25, 0x00	; 0
    64a6:	86 83       	std	Z+6, r24	; 0x06
    64a8:	97 83       	std	Z+7, r25	; 0x07
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
    64aa:	4b 81       	ldd	r20, Y+3	; 0x03
    64ac:	5c 81       	ldd	r21, Y+4	; 0x04
    64ae:	60 e0       	ldi	r22, 0x00	; 0
    64b0:	70 e0       	ldi	r23, 0x00	; 0
    64b2:	80 e0       	ldi	r24, 0x00	; 0
    64b4:	90 e0       	ldi	r25, 0x00	; 0
    64b6:	aa 24       	eor	r10, r10
    64b8:	a3 94       	inc	r10
    64ba:	bb 24       	eor	r11, r11
    64bc:	cc 24       	eor	r12, r12
    64be:	dd 24       	eor	r13, r13
    64c0:	ee 24       	eor	r14, r14
    64c2:	ff 24       	eor	r15, r15
    64c4:	00 e0       	ldi	r16, 0x00	; 0
    64c6:	10 e0       	ldi	r17, 0x00	; 0
    64c8:	0e 94 20 39 	call	0x7240	; 0x7240 <__udivdi3>
    64cc:	c9 01       	movw	r24, r18
    64ce:	da 01       	movw	r26, r20
    64d0:	9c 01       	movw	r18, r24
    64d2:	ad 01       	movw	r20, r26
    64d4:	0f c0       	rjmp	.+30     	; 0x64f4 <mv_queue_move_buffer+0x154>
		while (ticks_per_step & 0xFFFF0000) {
			ticks_per_step >>= 1;
    64d6:	56 95       	lsr	r21
    64d8:	47 95       	ror	r20
    64da:	37 95       	ror	r19
    64dc:	27 95       	ror	r18
			mv.p->a[X].postscale <<= 1;
    64de:	d2 01       	movw	r26, r4
    64e0:	16 96       	adiw	r26, 0x06	; 6
    64e2:	8d 91       	ld	r24, X+
    64e4:	9c 91       	ld	r25, X
    64e6:	17 97       	sbiw	r26, 0x07	; 7
    64e8:	88 0f       	add	r24, r24
    64ea:	99 1f       	adc	r25, r25
    64ec:	16 96       	adiw	r26, 0x06	; 6
    64ee:	8d 93       	st	X+, r24
    64f0:	9c 93       	st	X, r25
    64f2:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
		while (ticks_per_step & 0xFFFF0000) {
    64f4:	da 01       	movw	r26, r20
    64f6:	c9 01       	movw	r24, r18
    64f8:	80 70       	andi	r24, 0x00	; 0
    64fa:	90 70       	andi	r25, 0x00	; 0
    64fc:	00 97       	sbiw	r24, 0x00	; 0
    64fe:	a1 05       	cpc	r26, r1
    6500:	b1 05       	cpc	r27, r1
    6502:	49 f7       	brne	.-46     	; 0x64d6 <mv_queue_move_buffer+0x136>
			ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    6504:	f2 01       	movw	r30, r4
    6506:	24 83       	std	Z+4, r18	; 0x04
    6508:	35 83       	std	Z+5, r19	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    650a:	81 e0       	ldi	r24, 0x01	; 1
    650c:	81 87       	std	Z+9, r24	; 0x09
    650e:	04 c1       	rjmp	.+520    	; 0x6718 <mv_queue_move_buffer+0x378>
	mv.p->a[Y].steps = steps_y;
	mv.p->a[Z].steps = steps_z;
	ticks = microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    6510:	44 24       	eor	r4, r4
    6512:	55 24       	eor	r5, r5
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    6514:	40 91 a8 23 	lds	r20, 0x23A8
    6518:	50 91 a9 23 	lds	r21, 0x23A9
    651c:	34 2c       	mov	r3, r4
    651e:	25 2c       	mov	r2, r5
    6520:	c2 01       	movw	r24, r4
    6522:	fc 01       	movw	r30, r24
    6524:	73 e0       	ldi	r23, 0x03	; 3
    6526:	ee 0f       	add	r30, r30
    6528:	ff 1f       	adc	r31, r31
    652a:	7a 95       	dec	r23
    652c:	e1 f7       	brne	.-8      	; 0x6526 <mv_queue_move_buffer+0x186>
    652e:	88 0f       	add	r24, r24
    6530:	99 1f       	adc	r25, r25
    6532:	e8 0f       	add	r30, r24
    6534:	f9 1f       	adc	r31, r25
    6536:	e4 0f       	add	r30, r20
    6538:	f5 1f       	adc	r31, r21
    653a:	80 81       	ld	r24, Z
    653c:	91 81       	ldd	r25, Z+1	; 0x01
    653e:	a2 81       	ldd	r26, Z+2	; 0x02
    6540:	b3 81       	ldd	r27, Z+3	; 0x03
    6542:	00 97       	sbiw	r24, 0x00	; 0
    6544:	a1 05       	cpc	r26, r1
    6546:	b1 05       	cpc	r27, r1
    6548:	09 f4       	brne	.+2      	; 0x654c <mv_queue_move_buffer+0x1ac>
    654a:	de c0       	rjmp	.+444    	; 0x6708 <mv_queue_move_buffer+0x368>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    654c:	b7 ff       	sbrs	r27, 7
    654e:	10 c0       	rjmp	.+32     	; 0x6570 <mv_queue_move_buffer+0x1d0>
    6550:	c2 01       	movw	r24, r4
    6552:	fc 01       	movw	r30, r24
    6554:	33 e0       	ldi	r19, 0x03	; 3
    6556:	ee 0f       	add	r30, r30
    6558:	ff 1f       	adc	r31, r31
    655a:	3a 95       	dec	r19
    655c:	e1 f7       	brne	.-8      	; 0x6556 <mv_queue_move_buffer+0x1b6>
    655e:	88 0f       	add	r24, r24
    6560:	99 1f       	adc	r25, r25
    6562:	e8 0f       	add	r30, r24
    6564:	f9 1f       	adc	r31, r25
    6566:	e4 0f       	add	r30, r20
    6568:	f5 1f       	adc	r31, r21
    656a:	21 e0       	ldi	r18, 0x01	; 1
    656c:	20 87       	std	Z+8, r18	; 0x08
    656e:	0e c0       	rjmp	.+28     	; 0x658c <mv_queue_move_buffer+0x1ec>
    6570:	c2 01       	movw	r24, r4
    6572:	fc 01       	movw	r30, r24
    6574:	03 e0       	ldi	r16, 0x03	; 3
    6576:	ee 0f       	add	r30, r30
    6578:	ff 1f       	adc	r31, r31
    657a:	0a 95       	dec	r16
    657c:	e1 f7       	brne	.-8      	; 0x6576 <mv_queue_move_buffer+0x1d6>
    657e:	88 0f       	add	r24, r24
    6580:	99 1f       	adc	r25, r25
    6582:	e8 0f       	add	r30, r24
    6584:	f9 1f       	adc	r31, r25
    6586:	e4 0f       	add	r30, r20
    6588:	f5 1f       	adc	r31, r21
    658a:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    658c:	83 2d       	mov	r24, r3
    658e:	92 2d       	mov	r25, r2
    6590:	fc 01       	movw	r30, r24
    6592:	b3 e0       	ldi	r27, 0x03	; 3
    6594:	ee 0f       	add	r30, r30
    6596:	ff 1f       	adc	r31, r31
    6598:	ba 95       	dec	r27
    659a:	e1 f7       	brne	.-8      	; 0x6594 <mv_queue_move_buffer+0x1f4>
    659c:	88 0f       	add	r24, r24
    659e:	99 1f       	adc	r25, r25
    65a0:	e8 0f       	add	r30, r24
    65a2:	f9 1f       	adc	r31, r25
    65a4:	e4 0f       	add	r30, r20
    65a6:	f5 1f       	adc	r31, r21
    65a8:	83 2d       	mov	r24, r3
    65aa:	92 2d       	mov	r25, r2
    65ac:	9c 01       	movw	r18, r24
    65ae:	73 e0       	ldi	r23, 0x03	; 3
    65b0:	22 0f       	add	r18, r18
    65b2:	33 1f       	adc	r19, r19
    65b4:	7a 95       	dec	r23
    65b6:	e1 f7       	brne	.-8      	; 0x65b0 <mv_queue_move_buffer+0x210>
    65b8:	88 0f       	add	r24, r24
    65ba:	99 1f       	adc	r25, r25
    65bc:	28 0f       	add	r18, r24
    65be:	39 1f       	adc	r19, r25
    65c0:	42 0f       	add	r20, r18
    65c2:	53 1f       	adc	r21, r19
    65c4:	da 01       	movw	r26, r20
    65c6:	2d 91       	ld	r18, X+
    65c8:	3d 91       	ld	r19, X+
    65ca:	4d 91       	ld	r20, X+
    65cc:	5c 91       	ld	r21, X
    65ce:	57 ff       	sbrs	r21, 7
    65d0:	07 c0       	rjmp	.+14     	; 0x65e0 <mv_queue_move_buffer+0x240>
    65d2:	50 95       	com	r21
    65d4:	40 95       	com	r20
    65d6:	30 95       	com	r19
    65d8:	21 95       	neg	r18
    65da:	3f 4f       	sbci	r19, 0xFF	; 255
    65dc:	4f 4f       	sbci	r20, 0xFF	; 255
    65de:	5f 4f       	sbci	r21, 0xFF	; 255
    65e0:	20 83       	st	Z, r18
    65e2:	31 83       	std	Z+1, r19	; 0x01
    65e4:	42 83       	std	Z+2, r20	; 0x02
    65e6:	53 83       	std	Z+3, r21	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    65e8:	e0 91 a8 23 	lds	r30, 0x23A8
    65ec:	f0 91 a9 23 	lds	r31, 0x23A9
    65f0:	ea 87       	std	Y+10, r30	; 0x0a
    65f2:	fb 87       	std	Y+11, r31	; 0x0b
    65f4:	83 2d       	mov	r24, r3
    65f6:	92 2d       	mov	r25, r2
    65f8:	fc 01       	movw	r30, r24
    65fa:	03 e0       	ldi	r16, 0x03	; 3
    65fc:	ee 0f       	add	r30, r30
    65fe:	ff 1f       	adc	r31, r31
    6600:	0a 95       	dec	r16
    6602:	e1 f7       	brne	.-8      	; 0x65fc <mv_queue_move_buffer+0x25c>
    6604:	88 0f       	add	r24, r24
    6606:	99 1f       	adc	r25, r25
    6608:	e8 0f       	add	r30, r24
    660a:	f9 1f       	adc	r31, r25
    660c:	2a 85       	ldd	r18, Y+10	; 0x0a
    660e:	3b 85       	ldd	r19, Y+11	; 0x0b
    6610:	e2 0f       	add	r30, r18
    6612:	f3 1f       	adc	r31, r19
    6614:	41 e0       	ldi	r20, 0x01	; 1
    6616:	50 e0       	ldi	r21, 0x00	; 0
    6618:	46 83       	std	Z+6, r20	; 0x06
    661a:	57 83       	std	Z+7, r21	; 0x07
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    661c:	83 2d       	mov	r24, r3
    661e:	92 2d       	mov	r25, r2
    6620:	fc 01       	movw	r30, r24
    6622:	b3 e0       	ldi	r27, 0x03	; 3
    6624:	ee 0f       	add	r30, r30
    6626:	ff 1f       	adc	r31, r31
    6628:	ba 95       	dec	r27
    662a:	e1 f7       	brne	.-8      	; 0x6624 <mv_queue_move_buffer+0x284>
    662c:	88 0f       	add	r24, r24
    662e:	99 1f       	adc	r25, r25
    6630:	e8 0f       	add	r30, r24
    6632:	f9 1f       	adc	r31, r25
    6634:	e2 0f       	add	r30, r18
    6636:	f3 1f       	adc	r31, r19
    6638:	e0 80       	ld	r14, Z
    663a:	f1 80       	ldd	r15, Z+1	; 0x01
    663c:	02 81       	ldd	r16, Z+2	; 0x02
    663e:	13 81       	ldd	r17, Z+3	; 0x03
    6640:	37 01       	movw	r6, r14
    6642:	48 01       	movw	r8, r16
    6644:	99 0c       	add	r9, r9
    6646:	66 08       	sbc	r6, r6
    6648:	76 2c       	mov	r7, r6
    664a:	43 01       	movw	r8, r6
    664c:	29 81       	ldd	r18, Y+1	; 0x01
    664e:	3a 81       	ldd	r19, Y+2	; 0x02
    6650:	4b 81       	ldd	r20, Y+3	; 0x03
    6652:	5c 81       	ldd	r21, Y+4	; 0x04
    6654:	6d 81       	ldd	r22, Y+5	; 0x05
    6656:	7e 81       	ldd	r23, Y+6	; 0x06
    6658:	8f 81       	ldd	r24, Y+7	; 0x07
    665a:	98 85       	ldd	r25, Y+8	; 0x08
    665c:	57 01       	movw	r10, r14
    665e:	68 01       	movw	r12, r16
    6660:	e6 2c       	mov	r14, r6
    6662:	f6 2c       	mov	r15, r6
    6664:	06 2d       	mov	r16, r6
    6666:	16 2d       	mov	r17, r6
    6668:	0e 94 20 39 	call	0x7240	; 0x7240 <__udivdi3>
    666c:	c9 01       	movw	r24, r18
    666e:	da 01       	movw	r26, r20
    6670:	ac 01       	movw	r20, r24
    6672:	bd 01       	movw	r22, r26
    6674:	2c c0       	rjmp	.+88     	; 0x66ce <mv_queue_move_buffer+0x32e>
				while (ticks_per_step & 0xFFFF0000) {
					ticks_per_step >>= 1;
    6676:	76 95       	lsr	r23
    6678:	67 95       	ror	r22
    667a:	57 95       	ror	r21
    667c:	47 95       	ror	r20
					mv.p->a[i].postscale <<= 1;
    667e:	83 2d       	mov	r24, r3
    6680:	92 2d       	mov	r25, r2
    6682:	dc 01       	movw	r26, r24
    6684:	33 e0       	ldi	r19, 0x03	; 3
    6686:	aa 0f       	add	r26, r26
    6688:	bb 1f       	adc	r27, r27
    668a:	3a 95       	dec	r19
    668c:	e1 f7       	brne	.-8      	; 0x6686 <mv_queue_move_buffer+0x2e6>
    668e:	88 0f       	add	r24, r24
    6690:	99 1f       	adc	r25, r25
    6692:	a8 0f       	add	r26, r24
    6694:	b9 1f       	adc	r27, r25
    6696:	8a 85       	ldd	r24, Y+10	; 0x0a
    6698:	9b 85       	ldd	r25, Y+11	; 0x0b
    669a:	a8 0f       	add	r26, r24
    669c:	b9 1f       	adc	r27, r25
    669e:	83 2d       	mov	r24, r3
    66a0:	92 2d       	mov	r25, r2
    66a2:	fc 01       	movw	r30, r24
    66a4:	03 e0       	ldi	r16, 0x03	; 3
    66a6:	ee 0f       	add	r30, r30
    66a8:	ff 1f       	adc	r31, r31
    66aa:	0a 95       	dec	r16
    66ac:	e1 f7       	brne	.-8      	; 0x66a6 <mv_queue_move_buffer+0x306>
    66ae:	88 0f       	add	r24, r24
    66b0:	99 1f       	adc	r25, r25
    66b2:	e8 0f       	add	r30, r24
    66b4:	f9 1f       	adc	r31, r25
    66b6:	2a 85       	ldd	r18, Y+10	; 0x0a
    66b8:	3b 85       	ldd	r19, Y+11	; 0x0b
    66ba:	e2 0f       	add	r30, r18
    66bc:	f3 1f       	adc	r31, r19
    66be:	86 81       	ldd	r24, Z+6	; 0x06
    66c0:	97 81       	ldd	r25, Z+7	; 0x07
    66c2:	88 0f       	add	r24, r24
    66c4:	99 1f       	adc	r25, r25
    66c6:	16 96       	adiw	r26, 0x06	; 6
    66c8:	8d 93       	st	X+, r24
    66ca:	9c 93       	st	X, r25
    66cc:	17 97       	sbiw	r26, 0x07	; 7

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
				while (ticks_per_step & 0xFFFF0000) {
    66ce:	db 01       	movw	r26, r22
    66d0:	ca 01       	movw	r24, r20
    66d2:	80 70       	andi	r24, 0x00	; 0
    66d4:	90 70       	andi	r25, 0x00	; 0
    66d6:	00 97       	sbiw	r24, 0x00	; 0
    66d8:	a1 05       	cpc	r26, r1
    66da:	b1 05       	cpc	r27, r1
    66dc:	61 f6       	brne	.-104    	; 0x6676 <mv_queue_move_buffer+0x2d6>
					ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    66de:	83 2d       	mov	r24, r3
    66e0:	92 2d       	mov	r25, r2
    66e2:	9c 01       	movw	r18, r24
    66e4:	73 e0       	ldi	r23, 0x03	; 3
    66e6:	22 0f       	add	r18, r18
    66e8:	33 1f       	adc	r19, r19
    66ea:	7a 95       	dec	r23
    66ec:	e1 f7       	brne	.-8      	; 0x66e6 <mv_queue_move_buffer+0x346>
    66ee:	88 0f       	add	r24, r24
    66f0:	99 1f       	adc	r25, r25
    66f2:	28 0f       	add	r18, r24
    66f4:	39 1f       	adc	r19, r25
    66f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    66f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    66fa:	82 0f       	add	r24, r18
    66fc:	93 1f       	adc	r25, r19
    66fe:	dc 01       	movw	r26, r24
    6700:	14 96       	adiw	r26, 0x04	; 4
    6702:	4d 93       	st	X+, r20
    6704:	5c 93       	st	X, r21
    6706:	15 97       	sbiw	r26, 0x05	; 5
    6708:	08 94       	sec
    670a:	41 1c       	adc	r4, r1
    670c:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    670e:	b3 e0       	ldi	r27, 0x03	; 3
    6710:	4b 16       	cp	r4, r27
    6712:	51 04       	cpc	r5, r1
    6714:	09 f0       	breq	.+2      	; 0x6718 <mv_queue_move_buffer+0x378>
    6716:	fe ce       	rjmp	.-516    	; 0x6514 <mv_queue_move_buffer+0x174>
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    6718:	e9 85       	ldd	r30, Y+9	; 0x09
    671a:	e0 93 a6 23 	sts	0x23A6, r30
	st_execute_move();
    671e:	0e 94 96 24 	call	0x492c	; 0x492c <st_execute_move>
    6722:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    6724:	2f 96       	adiw	r28, 0x0f	; 15
    6726:	cd bf       	out	0x3d, r28	; 61
    6728:	de bf       	out	0x3e, r29	; 62
    672a:	cf 91       	pop	r28
    672c:	df 91       	pop	r29
    672e:	1f 91       	pop	r17
    6730:	0f 91       	pop	r16
    6732:	ff 90       	pop	r15
    6734:	ef 90       	pop	r14
    6736:	df 90       	pop	r13
    6738:	cf 90       	pop	r12
    673a:	bf 90       	pop	r11
    673c:	af 90       	pop	r10
    673e:	9f 90       	pop	r9
    6740:	8f 90       	pop	r8
    6742:	7f 90       	pop	r7
    6744:	6f 90       	pop	r6
    6746:	5f 90       	pop	r5
    6748:	4f 90       	pop	r4
    674a:	3f 90       	pop	r3
    674c:	2f 90       	pop	r2
    674e:	08 95       	ret

00006750 <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    6750:	ab e6       	ldi	r26, 0x6B	; 107
    6752:	b4 e2       	ldi	r27, 0x24	; 36
	for (uint8_t i=0; i <= A_AXIS; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    6754:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    6756:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    6758:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    675a:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=0; i <= A_AXIS; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    675c:	ed 91       	ld	r30, X+
    675e:	fc 91       	ld	r31, X
    6760:	11 97       	sbiw	r26, 0x01	; 1
    6762:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    6764:	ed 91       	ld	r30, X+
    6766:	fc 91       	ld	r31, X
    6768:	11 97       	sbiw	r26, 0x01	; 1
    676a:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    676c:	ed 91       	ld	r30, X+
    676e:	fc 91       	ld	r31, X
    6770:	11 97       	sbiw	r26, 0x01	; 1
    6772:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    6774:	ed 91       	ld	r30, X+
    6776:	fc 91       	ld	r31, X
    6778:	11 97       	sbiw	r26, 0x01	; 1
    677a:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    677c:	ed 91       	ld	r30, X+
    677e:	fc 91       	ld	r31, X
    6780:	11 97       	sbiw	r26, 0x01	; 1
    6782:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    6784:	ed 91       	ld	r30, X+
    6786:	fc 91       	ld	r31, X
    6788:	11 97       	sbiw	r26, 0x01	; 1
    678a:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    678c:	ed 91       	ld	r30, X+
    678e:	fc 91       	ld	r31, X
    6790:	11 97       	sbiw	r26, 0x01	; 1
    6792:	31 87       	std	Z+9, r19	; 0x09
    6794:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=0; i <= A_AXIS; i++) {
    6796:	44 e2       	ldi	r20, 0x24	; 36
    6798:	ab 3a       	cpi	r26, 0xAB	; 171
    679a:	b4 07       	cpc	r27, r20
    679c:	f9 f6       	brne	.-66     	; 0x675c <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    679e:	08 95       	ret

000067a0 <__vector_65>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    67a0:	1f 92       	push	r1
    67a2:	0f 92       	push	r0
    67a4:	0f b6       	in	r0, 0x3f	; 63
    67a6:	0f 92       	push	r0
    67a8:	0b b6       	in	r0, 0x3b	; 59
    67aa:	0f 92       	push	r0
    67ac:	11 24       	eor	r1, r1
    67ae:	2f 93       	push	r18
    67b0:	3f 93       	push	r19
    67b2:	4f 93       	push	r20
    67b4:	5f 93       	push	r21
    67b6:	6f 93       	push	r22
    67b8:	7f 93       	push	r23
    67ba:	8f 93       	push	r24
    67bc:	9f 93       	push	r25
    67be:	af 93       	push	r26
    67c0:	bf 93       	push	r27
    67c2:	ef 93       	push	r30
    67c4:	ff 93       	push	r31

void _ls_handler() {
	tg_kill();
    67c6:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <tg_kill>
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    67ca:	ff 91       	pop	r31
    67cc:	ef 91       	pop	r30
    67ce:	bf 91       	pop	r27
    67d0:	af 91       	pop	r26
    67d2:	9f 91       	pop	r25
    67d4:	8f 91       	pop	r24
    67d6:	7f 91       	pop	r23
    67d8:	6f 91       	pop	r22
    67da:	5f 91       	pop	r21
    67dc:	4f 91       	pop	r20
    67de:	3f 91       	pop	r19
    67e0:	2f 91       	pop	r18
    67e2:	0f 90       	pop	r0
    67e4:	0b be       	out	0x3b, r0	; 59
    67e6:	0f 90       	pop	r0
    67e8:	0f be       	out	0x3f, r0	; 63
    67ea:	0f 90       	pop	r0
    67ec:	1f 90       	pop	r1
    67ee:	18 95       	reti

000067f0 <__vector_64>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    67f0:	1f 92       	push	r1
    67f2:	0f 92       	push	r0
    67f4:	0f b6       	in	r0, 0x3f	; 63
    67f6:	0f 92       	push	r0
    67f8:	0b b6       	in	r0, 0x3b	; 59
    67fa:	0f 92       	push	r0
    67fc:	11 24       	eor	r1, r1
    67fe:	2f 93       	push	r18
    6800:	3f 93       	push	r19
    6802:	4f 93       	push	r20
    6804:	5f 93       	push	r21
    6806:	6f 93       	push	r22
    6808:	7f 93       	push	r23
    680a:	8f 93       	push	r24
    680c:	9f 93       	push	r25
    680e:	af 93       	push	r26
    6810:	bf 93       	push	r27
    6812:	ef 93       	push	r30
    6814:	ff 93       	push	r31
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    6816:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <tg_kill>
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    681a:	ff 91       	pop	r31
    681c:	ef 91       	pop	r30
    681e:	bf 91       	pop	r27
    6820:	af 91       	pop	r26
    6822:	9f 91       	pop	r25
    6824:	8f 91       	pop	r24
    6826:	7f 91       	pop	r23
    6828:	6f 91       	pop	r22
    682a:	5f 91       	pop	r21
    682c:	4f 91       	pop	r20
    682e:	3f 91       	pop	r19
    6830:	2f 91       	pop	r18
    6832:	0f 90       	pop	r0
    6834:	0b be       	out	0x3b, r0	; 59
    6836:	0f 90       	pop	r0
    6838:	0f be       	out	0x3f, r0	; 63
    683a:	0f 90       	pop	r0
    683c:	1f 90       	pop	r1
    683e:	18 95       	reti

00006840 <__vector_44>:
ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    6840:	1f 92       	push	r1
    6842:	0f 92       	push	r0
    6844:	0f b6       	in	r0, 0x3f	; 63
    6846:	0f 92       	push	r0
    6848:	0b b6       	in	r0, 0x3b	; 59
    684a:	0f 92       	push	r0
    684c:	11 24       	eor	r1, r1
    684e:	2f 93       	push	r18
    6850:	3f 93       	push	r19
    6852:	4f 93       	push	r20
    6854:	5f 93       	push	r21
    6856:	6f 93       	push	r22
    6858:	7f 93       	push	r23
    685a:	8f 93       	push	r24
    685c:	9f 93       	push	r25
    685e:	af 93       	push	r26
    6860:	bf 93       	push	r27
    6862:	ef 93       	push	r30
    6864:	ff 93       	push	r31
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    6866:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <tg_kill>
ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    686a:	ff 91       	pop	r31
    686c:	ef 91       	pop	r30
    686e:	bf 91       	pop	r27
    6870:	af 91       	pop	r26
    6872:	9f 91       	pop	r25
    6874:	8f 91       	pop	r24
    6876:	7f 91       	pop	r23
    6878:	6f 91       	pop	r22
    687a:	5f 91       	pop	r21
    687c:	4f 91       	pop	r20
    687e:	3f 91       	pop	r19
    6880:	2f 91       	pop	r18
    6882:	0f 90       	pop	r0
    6884:	0b be       	out	0x3b, r0	; 59
    6886:	0f 90       	pop	r0
    6888:	0f be       	out	0x3f, r0	; 63
    688a:	0f 90       	pop	r0
    688c:	1f 90       	pop	r1
    688e:	18 95       	reti

00006890 <__vector_43>:

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    6890:	1f 92       	push	r1
    6892:	0f 92       	push	r0
    6894:	0f b6       	in	r0, 0x3f	; 63
    6896:	0f 92       	push	r0
    6898:	0b b6       	in	r0, 0x3b	; 59
    689a:	0f 92       	push	r0
    689c:	11 24       	eor	r1, r1
    689e:	2f 93       	push	r18
    68a0:	3f 93       	push	r19
    68a2:	4f 93       	push	r20
    68a4:	5f 93       	push	r21
    68a6:	6f 93       	push	r22
    68a8:	7f 93       	push	r23
    68aa:	8f 93       	push	r24
    68ac:	9f 93       	push	r25
    68ae:	af 93       	push	r26
    68b0:	bf 93       	push	r27
    68b2:	ef 93       	push	r30
    68b4:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    68b6:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <tg_kill>

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    68ba:	ff 91       	pop	r31
    68bc:	ef 91       	pop	r30
    68be:	bf 91       	pop	r27
    68c0:	af 91       	pop	r26
    68c2:	9f 91       	pop	r25
    68c4:	8f 91       	pop	r24
    68c6:	7f 91       	pop	r23
    68c8:	6f 91       	pop	r22
    68ca:	5f 91       	pop	r21
    68cc:	4f 91       	pop	r20
    68ce:	3f 91       	pop	r19
    68d0:	2f 91       	pop	r18
    68d2:	0f 90       	pop	r0
    68d4:	0b be       	out	0x3b, r0	; 59
    68d6:	0f 90       	pop	r0
    68d8:	0f be       	out	0x3f, r0	; 63
    68da:	0f 90       	pop	r0
    68dc:	1f 90       	pop	r1
    68de:	18 95       	reti

000068e0 <__vector_105>:
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    68e0:	1f 92       	push	r1
    68e2:	0f 92       	push	r0
    68e4:	0f b6       	in	r0, 0x3f	; 63
    68e6:	0f 92       	push	r0
    68e8:	0b b6       	in	r0, 0x3b	; 59
    68ea:	0f 92       	push	r0
    68ec:	11 24       	eor	r1, r1
    68ee:	2f 93       	push	r18
    68f0:	3f 93       	push	r19
    68f2:	4f 93       	push	r20
    68f4:	5f 93       	push	r21
    68f6:	6f 93       	push	r22
    68f8:	7f 93       	push	r23
    68fa:	8f 93       	push	r24
    68fc:	9f 93       	push	r25
    68fe:	af 93       	push	r26
    6900:	bf 93       	push	r27
    6902:	ef 93       	push	r30
    6904:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    6906:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <tg_kill>
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    690a:	ff 91       	pop	r31
    690c:	ef 91       	pop	r30
    690e:	bf 91       	pop	r27
    6910:	af 91       	pop	r26
    6912:	9f 91       	pop	r25
    6914:	8f 91       	pop	r24
    6916:	7f 91       	pop	r23
    6918:	6f 91       	pop	r22
    691a:	5f 91       	pop	r21
    691c:	4f 91       	pop	r20
    691e:	3f 91       	pop	r19
    6920:	2f 91       	pop	r18
    6922:	0f 90       	pop	r0
    6924:	0b be       	out	0x3b, r0	; 59
    6926:	0f 90       	pop	r0
    6928:	0f be       	out	0x3f, r0	; 63
    692a:	0f 90       	pop	r0
    692c:	1f 90       	pop	r1
    692e:	18 95       	reti

00006930 <__vector_104>:
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    6930:	1f 92       	push	r1
    6932:	0f 92       	push	r0
    6934:	0f b6       	in	r0, 0x3f	; 63
    6936:	0f 92       	push	r0
    6938:	0b b6       	in	r0, 0x3b	; 59
    693a:	0f 92       	push	r0
    693c:	11 24       	eor	r1, r1
    693e:	2f 93       	push	r18
    6940:	3f 93       	push	r19
    6942:	4f 93       	push	r20
    6944:	5f 93       	push	r21
    6946:	6f 93       	push	r22
    6948:	7f 93       	push	r23
    694a:	8f 93       	push	r24
    694c:	9f 93       	push	r25
    694e:	af 93       	push	r26
    6950:	bf 93       	push	r27
    6952:	ef 93       	push	r30
    6954:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    6956:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <tg_kill>
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    695a:	ff 91       	pop	r31
    695c:	ef 91       	pop	r30
    695e:	bf 91       	pop	r27
    6960:	af 91       	pop	r26
    6962:	9f 91       	pop	r25
    6964:	8f 91       	pop	r24
    6966:	7f 91       	pop	r23
    6968:	6f 91       	pop	r22
    696a:	5f 91       	pop	r21
    696c:	4f 91       	pop	r20
    696e:	3f 91       	pop	r19
    6970:	2f 91       	pop	r18
    6972:	0f 90       	pop	r0
    6974:	0b be       	out	0x3b, r0	; 59
    6976:	0f 90       	pop	r0
    6978:	0f be       	out	0x3f, r0	; 63
    697a:	0f 90       	pop	r0
    697c:	1f 90       	pop	r1
    697e:	18 95       	reti

00006980 <__vector_67>:
/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    6980:	1f 92       	push	r1
    6982:	0f 92       	push	r0
    6984:	0f b6       	in	r0, 0x3f	; 63
    6986:	0f 92       	push	r0
    6988:	0b b6       	in	r0, 0x3b	; 59
    698a:	0f 92       	push	r0
    698c:	11 24       	eor	r1, r1
    698e:	2f 93       	push	r18
    6990:	3f 93       	push	r19
    6992:	4f 93       	push	r20
    6994:	5f 93       	push	r21
    6996:	6f 93       	push	r22
    6998:	7f 93       	push	r23
    699a:	8f 93       	push	r24
    699c:	9f 93       	push	r25
    699e:	af 93       	push	r26
    69a0:	bf 93       	push	r27
    69a2:	ef 93       	push	r30
    69a4:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    69a6:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <tg_kill>
/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    69aa:	ff 91       	pop	r31
    69ac:	ef 91       	pop	r30
    69ae:	bf 91       	pop	r27
    69b0:	af 91       	pop	r26
    69b2:	9f 91       	pop	r25
    69b4:	8f 91       	pop	r24
    69b6:	7f 91       	pop	r23
    69b8:	6f 91       	pop	r22
    69ba:	5f 91       	pop	r21
    69bc:	4f 91       	pop	r20
    69be:	3f 91       	pop	r19
    69c0:	2f 91       	pop	r18
    69c2:	0f 90       	pop	r0
    69c4:	0b be       	out	0x3b, r0	; 59
    69c6:	0f 90       	pop	r0
    69c8:	0f be       	out	0x3f, r0	; 63
    69ca:	0f 90       	pop	r0
    69cc:	1f 90       	pop	r1
    69ce:	18 95       	reti

000069d0 <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    69d0:	1f 92       	push	r1
    69d2:	0f 92       	push	r0
    69d4:	0f b6       	in	r0, 0x3f	; 63
    69d6:	0f 92       	push	r0
    69d8:	0b b6       	in	r0, 0x3b	; 59
    69da:	0f 92       	push	r0
    69dc:	11 24       	eor	r1, r1
    69de:	2f 93       	push	r18
    69e0:	3f 93       	push	r19
    69e2:	4f 93       	push	r20
    69e4:	5f 93       	push	r21
    69e6:	6f 93       	push	r22
    69e8:	7f 93       	push	r23
    69ea:	8f 93       	push	r24
    69ec:	9f 93       	push	r25
    69ee:	af 93       	push	r26
    69f0:	bf 93       	push	r27
    69f2:	ef 93       	push	r30
    69f4:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    69f6:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <tg_kill>

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    69fa:	ff 91       	pop	r31
    69fc:	ef 91       	pop	r30
    69fe:	bf 91       	pop	r27
    6a00:	af 91       	pop	r26
    6a02:	9f 91       	pop	r25
    6a04:	8f 91       	pop	r24
    6a06:	7f 91       	pop	r23
    6a08:	6f 91       	pop	r22
    6a0a:	5f 91       	pop	r21
    6a0c:	4f 91       	pop	r20
    6a0e:	3f 91       	pop	r19
    6a10:	2f 91       	pop	r18
    6a12:	0f 90       	pop	r0
    6a14:	0b be       	out	0x3b, r0	; 59
    6a16:	0f 90       	pop	r0
    6a18:	0f be       	out	0x3f, r0	; 63
    6a1a:	0f 90       	pop	r0
    6a1c:	1f 90       	pop	r1
    6a1e:	18 95       	reti

00006a20 <xio_rs485_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_rs485_init(const uint16_t control)
{
    6a20:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    6a22:	e8 2f       	mov	r30, r24
    6a24:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	fr.flags = XIO_FLAG_RS485_DEFS_gm;		// set flags to defaults & initial state
    6a26:	87 e3       	ldi	r24, 0x37	; 55
    6a28:	90 e0       	ldi	r25, 0x00	; 0
    6a2a:	80 93 22 24 	sts	0x2422, r24
    6a2e:	90 93 23 24 	sts	0x2423, r25
		fr.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		fr.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    6a32:	26 ff       	sbrs	r18, 6
    6a34:	06 c0       	rjmp	.+12     	; 0x6a42 <xio_rs485_init+0x22>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    6a36:	87 e3       	ldi	r24, 0x37	; 55
    6a38:	90 e0       	ldi	r25, 0x00	; 0
    6a3a:	80 93 22 24 	sts	0x2422, r24
    6a3e:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOBLOCK) {
    6a42:	27 ff       	sbrs	r18, 7
    6a44:	06 c0       	rjmp	.+12     	; 0x6a52 <xio_rs485_init+0x32>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    6a46:	83 e3       	ldi	r24, 0x33	; 51
    6a48:	90 e0       	ldi	r25, 0x00	; 0
    6a4a:	80 93 22 24 	sts	0x2422, r24
    6a4e:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_ECHO) {
    6a52:	30 ff       	sbrs	r19, 0
    6a54:	09 c0       	rjmp	.+18     	; 0x6a68 <xio_rs485_init+0x48>
		fr.flags |= XIO_FLAG_ECHO_bm;
    6a56:	80 91 22 24 	lds	r24, 0x2422
    6a5a:	90 91 23 24 	lds	r25, 0x2423
    6a5e:	80 61       	ori	r24, 0x10	; 16
    6a60:	80 93 22 24 	sts	0x2422, r24
    6a64:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOECHO) {
    6a68:	31 ff       	sbrs	r19, 1
    6a6a:	09 c0       	rjmp	.+18     	; 0x6a7e <xio_rs485_init+0x5e>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    6a6c:	80 91 22 24 	lds	r24, 0x2422
    6a70:	90 91 23 24 	lds	r25, 0x2423
    6a74:	8f 7e       	andi	r24, 0xEF	; 239
    6a76:	80 93 22 24 	sts	0x2422, r24
    6a7a:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_CRLF) {
    6a7e:	32 ff       	sbrs	r19, 2
    6a80:	09 c0       	rjmp	.+18     	; 0x6a94 <xio_rs485_init+0x74>
		fr.flags |= XIO_FLAG_CRLF_bm;
    6a82:	80 91 22 24 	lds	r24, 0x2422
    6a86:	90 91 23 24 	lds	r25, 0x2423
    6a8a:	80 62       	ori	r24, 0x20	; 32
    6a8c:	80 93 22 24 	sts	0x2422, r24
    6a90:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOCRLF) {
    6a94:	33 ff       	sbrs	r19, 3
    6a96:	09 c0       	rjmp	.+18     	; 0x6aaa <xio_rs485_init+0x8a>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    6a98:	80 91 22 24 	lds	r24, 0x2422
    6a9c:	90 91 23 24 	lds	r25, 0x2423
    6aa0:	8f 7d       	andi	r24, 0xDF	; 223
    6aa2:	80 93 22 24 	sts	0x2422, r24
    6aa6:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_LINEMODE) {
    6aaa:	34 ff       	sbrs	r19, 4
    6aac:	09 c0       	rjmp	.+18     	; 0x6ac0 <xio_rs485_init+0xa0>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    6aae:	80 91 22 24 	lds	r24, 0x2422
    6ab2:	90 91 23 24 	lds	r25, 0x2423
    6ab6:	80 64       	ori	r24, 0x40	; 64
    6ab8:	80 93 22 24 	sts	0x2422, r24
    6abc:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOLINEMODE) {
    6ac0:	35 ff       	sbrs	r19, 5
    6ac2:	09 c0       	rjmp	.+18     	; 0x6ad6 <xio_rs485_init+0xb6>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    6ac4:	80 91 22 24 	lds	r24, 0x2422
    6ac8:	90 91 23 24 	lds	r25, 0x2423
    6acc:	8f 7b       	andi	r24, 0xBF	; 191
    6ace:	80 93 22 24 	sts	0x2422, r24
    6ad2:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_SEMICOLONS) {
    6ad6:	36 ff       	sbrs	r19, 6
    6ad8:	09 c0       	rjmp	.+18     	; 0x6aec <xio_rs485_init+0xcc>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    6ada:	80 91 22 24 	lds	r24, 0x2422
    6ade:	90 91 23 24 	lds	r25, 0x2423
    6ae2:	80 68       	ori	r24, 0x80	; 128
    6ae4:	80 93 22 24 	sts	0x2422, r24
    6ae8:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    6aec:	37 ff       	sbrs	r19, 7
    6aee:	09 c0       	rjmp	.+18     	; 0x6b02 <xio_rs485_init+0xe2>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    6af0:	80 91 22 24 	lds	r24, 0x2422
    6af4:	90 91 23 24 	lds	r25, 0x2423
    6af8:	8f 77       	andi	r24, 0x7F	; 127
    6afa:	80 93 22 24 	sts	0x2422, r24
    6afe:	90 93 23 24 	sts	0x2423, r25
	}

	// character signals and error returns
	fr.sig = 0;
    6b02:	10 92 24 24 	sts	0x2424, r1
	dev_rs485.udata = &(fr.sig);				// bind sig register to FILE struct
    6b06:	84 e2       	ldi	r24, 0x24	; 36
    6b08:	94 e2       	ldi	r25, 0x24	; 36
    6b0a:	80 93 2b 20 	sts	0x202B, r24
    6b0e:	90 93 2c 20 	sts	0x202C, r25

	// setup internal RX/TX buffers
	fr.rx_buf_head = 1;						// can't use location 0
    6b12:	81 e0       	ldi	r24, 0x01	; 1
    6b14:	80 93 2f 24 	sts	0x242F, r24
	fr.rx_buf_tail = 1;
    6b18:	80 93 2e 24 	sts	0x242E, r24
	fr.tx_buf_head = 1;
    6b1c:	80 93 31 24 	sts	0x2431, r24
	fr.tx_buf_tail = 1;
    6b20:	80 93 30 24 	sts	0x2430, r24
	fr.len = sizeof(fr.buf);					// offset to zero
    6b24:	82 e0       	ldi	r24, 0x02	; 2
    6b26:	80 93 27 24 	sts	0x2427, r24

	// bindings
	fr.sig_func = &xio_null_signal;			// bind null signal handler
    6b2a:	8d e8       	ldi	r24, 0x8D	; 141
    6b2c:	97 e2       	ldi	r25, 0x27	; 39
    6b2e:	80 93 2a 24 	sts	0x242A, r24
    6b32:	90 93 2b 24 	sts	0x242B, r25
	fr.line_func = &xio_null_line;			// bind null line handler
    6b36:	80 e9       	ldi	r24, 0x90	; 144
    6b38:	97 e2       	ldi	r25, 0x27	; 39
    6b3a:	80 93 2c 24 	sts	0x242C, r24
    6b3e:	90 93 2d 24 	sts	0x242D, r25

	fr.usart = &RS485_USART;				// bind USART structure
    6b42:	80 eb       	ldi	r24, 0xB0	; 176
    6b44:	98 e0       	ldi	r25, 0x08	; 8
    6b46:	80 93 57 24 	sts	0x2457, r24
    6b4a:	90 93 58 24 	sts	0x2458, r25
	fr.port = &RS485_PORT;					// bind PORT structure
    6b4e:	80 e4       	ldi	r24, 0x40	; 64
    6b50:	96 e0       	ldi	r25, 0x06	; 6
    6b52:	80 93 59 24 	sts	0x2459, r24
    6b56:	90 93 5a 24 	sts	0x245A, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    6b5a:	ee 23       	and	r30, r30
    6b5c:	09 f4       	brne	.+2      	; 0x6b60 <xio_rs485_init+0x140>
    6b5e:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    6b60:	8e 2f       	mov	r24, r30
    6b62:	90 e0       	ldi	r25, 0x00	; 0
    6b64:	fc 01       	movw	r30, r24
    6b66:	ec 5d       	subi	r30, 0xDC	; 220
    6b68:	f8 4f       	sbci	r31, 0xF8	; 248
    6b6a:	e4 91       	lpm	r30, Z+
    6b6c:	a0 eb       	ldi	r26, 0xB0	; 176
    6b6e:	b8 e0       	ldi	r27, 0x08	; 8
    6b70:	16 96       	adiw	r26, 0x06	; 6
    6b72:	ec 93       	st	X, r30
    6b74:	16 97       	sbiw	r26, 0x06	; 6
	fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    6b76:	81 5d       	subi	r24, 0xD1	; 209
    6b78:	98 4f       	sbci	r25, 0xF8	; 248
    6b7a:	fc 01       	movw	r30, r24
    6b7c:	84 91       	lpm	r24, Z+
    6b7e:	17 96       	adiw	r26, 0x07	; 7
    6b80:	8c 93       	st	X, r24
    6b82:	17 97       	sbiw	r26, 0x07	; 7
	fr.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx on USART
    6b84:	88 e1       	ldi	r24, 0x18	; 24
    6b86:	14 96       	adiw	r26, 0x04	; 4
    6b88:	8c 93       	st	X, r24
    6b8a:	14 97       	sbiw	r26, 0x04	; 4
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    6b8c:	81 e2       	ldi	r24, 0x21	; 33
    6b8e:	13 96       	adiw	r26, 0x03	; 3
    6b90:	8c 93       	st	X, r24

	fr.port->DIRCLR = RS485_RX_bm;	// clr RX pin as input
    6b92:	e0 e4       	ldi	r30, 0x40	; 64
    6b94:	f6 e0       	ldi	r31, 0x06	; 6
    6b96:	80 e4       	ldi	r24, 0x40	; 64
    6b98:	82 83       	std	Z+2, r24	; 0x02
	fr.port->DIRSET = RS485_TX_bm; 	// set TX pin as output
    6b9a:	80 e8       	ldi	r24, 0x80	; 128
    6b9c:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTSET = RS485_TX_bm;	// set TX HI as initial state
    6b9e:	85 83       	std	Z+5, r24	; 0x05
	fr.port->DIRSET = RS485_DE_bm; 	// Data Enable (TX) to output (TX enabled hi)
    6ba0:	90 e2       	ldi	r25, 0x20	; 32
    6ba2:	91 83       	std	Z+1, r25	; 0x01
	fr.port->DIRSET = RS485_RE_bm; 	// Recv Enable (RX) to output (RX enabled lo)
    6ba4:	80 e1       	ldi	r24, 0x10	; 16
    6ba6:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTCLR = RS485_DE_bm;	// DE lo initially (TX disabled)
    6ba8:	96 83       	std	Z+6, r25	; 0x06
	fr.port->OUTCLR = RS485_RE_bm; 	// RE lo initially (RX enabled)
    6baa:	86 83       	std	Z+6, r24	; 0x06
}
    6bac:	08 95       	ret

00006bae <xio_rs485_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_rs485_control(const uint16_t control, const int16_t arg)
{
    6bae:	ac 01       	movw	r20, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    6bb0:	84 ff       	sbrs	r24, 4
    6bb2:	05 c0       	rjmp	.+10     	; 0x6bbe <xio_rs485_control+0x10>
		fr.sig_func = (fptr_int_uint8)arg;
    6bb4:	60 93 2a 24 	sts	0x242A, r22
    6bb8:	70 93 2b 24 	sts	0x242B, r23
    6bbc:	8b c0       	rjmp	.+278    	; 0x6cd4 <xio_rs485_control+0x126>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    6bbe:	85 ff       	sbrs	r24, 5
    6bc0:	05 c0       	rjmp	.+10     	; 0x6bcc <xio_rs485_control+0x1e>
		fr.line_func = (fptr_int_char_p)arg;
    6bc2:	60 93 2c 24 	sts	0x242C, r22
    6bc6:	70 93 2d 24 	sts	0x242D, r23
    6bca:	84 c0       	rjmp	.+264    	; 0x6cd4 <xio_rs485_control+0x126>
		return (0);
	}
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    6bcc:	8f 70       	andi	r24, 0x0F	; 15
    6bce:	90 70       	andi	r25, 0x00	; 0
    6bd0:	00 97       	sbiw	r24, 0x00	; 0
    6bd2:	91 f0       	breq	.+36     	; 0x6bf8 <xio_rs485_control+0x4a>
		fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    6bd4:	a0 91 57 24 	lds	r26, 0x2457
    6bd8:	b0 91 58 24 	lds	r27, 0x2458
    6bdc:	9c 01       	movw	r18, r24
    6bde:	2c 5d       	subi	r18, 0xDC	; 220
    6be0:	38 4f       	sbci	r19, 0xF8	; 248
    6be2:	f9 01       	movw	r30, r18
    6be4:	24 91       	lpm	r18, Z+
    6be6:	16 96       	adiw	r26, 0x06	; 6
    6be8:	2c 93       	st	X, r18
    6bea:	16 97       	sbiw	r26, 0x06	; 6
		fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    6bec:	81 5d       	subi	r24, 0xD1	; 209
    6bee:	98 4f       	sbci	r25, 0xF8	; 248
    6bf0:	fc 01       	movw	r30, r24
    6bf2:	84 91       	lpm	r24, Z+
    6bf4:	17 96       	adiw	r26, 0x07	; 7
    6bf6:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    6bf8:	46 ff       	sbrs	r20, 6
    6bfa:	09 c0       	rjmp	.+18     	; 0x6c0e <xio_rs485_control+0x60>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    6bfc:	80 91 22 24 	lds	r24, 0x2422
    6c00:	90 91 23 24 	lds	r25, 0x2423
    6c04:	84 60       	ori	r24, 0x04	; 4
    6c06:	80 93 22 24 	sts	0x2422, r24
    6c0a:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOBLOCK) {
    6c0e:	47 ff       	sbrs	r20, 7
    6c10:	09 c0       	rjmp	.+18     	; 0x6c24 <xio_rs485_control+0x76>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    6c12:	80 91 22 24 	lds	r24, 0x2422
    6c16:	90 91 23 24 	lds	r25, 0x2423
    6c1a:	8b 7f       	andi	r24, 0xFB	; 251
    6c1c:	80 93 22 24 	sts	0x2422, r24
    6c20:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_ECHO) {
    6c24:	50 ff       	sbrs	r21, 0
    6c26:	09 c0       	rjmp	.+18     	; 0x6c3a <xio_rs485_control+0x8c>
		fr.flags |= XIO_FLAG_ECHO_bm;
    6c28:	80 91 22 24 	lds	r24, 0x2422
    6c2c:	90 91 23 24 	lds	r25, 0x2423
    6c30:	80 61       	ori	r24, 0x10	; 16
    6c32:	80 93 22 24 	sts	0x2422, r24
    6c36:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOECHO) {
    6c3a:	51 ff       	sbrs	r21, 1
    6c3c:	09 c0       	rjmp	.+18     	; 0x6c50 <xio_rs485_control+0xa2>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    6c3e:	80 91 22 24 	lds	r24, 0x2422
    6c42:	90 91 23 24 	lds	r25, 0x2423
    6c46:	8f 7e       	andi	r24, 0xEF	; 239
    6c48:	80 93 22 24 	sts	0x2422, r24
    6c4c:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_CRLF) {
    6c50:	52 ff       	sbrs	r21, 2
    6c52:	09 c0       	rjmp	.+18     	; 0x6c66 <xio_rs485_control+0xb8>
		fr.flags |= XIO_FLAG_CRLF_bm;
    6c54:	80 91 22 24 	lds	r24, 0x2422
    6c58:	90 91 23 24 	lds	r25, 0x2423
    6c5c:	80 62       	ori	r24, 0x20	; 32
    6c5e:	80 93 22 24 	sts	0x2422, r24
    6c62:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOCRLF) {
    6c66:	53 ff       	sbrs	r21, 3
    6c68:	09 c0       	rjmp	.+18     	; 0x6c7c <xio_rs485_control+0xce>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    6c6a:	80 91 22 24 	lds	r24, 0x2422
    6c6e:	90 91 23 24 	lds	r25, 0x2423
    6c72:	8f 7d       	andi	r24, 0xDF	; 223
    6c74:	80 93 22 24 	sts	0x2422, r24
    6c78:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_LINEMODE) {
    6c7c:	54 ff       	sbrs	r21, 4
    6c7e:	09 c0       	rjmp	.+18     	; 0x6c92 <xio_rs485_control+0xe4>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    6c80:	80 91 22 24 	lds	r24, 0x2422
    6c84:	90 91 23 24 	lds	r25, 0x2423
    6c88:	80 64       	ori	r24, 0x40	; 64
    6c8a:	80 93 22 24 	sts	0x2422, r24
    6c8e:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOLINEMODE) {
    6c92:	55 ff       	sbrs	r21, 5
    6c94:	09 c0       	rjmp	.+18     	; 0x6ca8 <xio_rs485_control+0xfa>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    6c96:	80 91 22 24 	lds	r24, 0x2422
    6c9a:	90 91 23 24 	lds	r25, 0x2423
    6c9e:	8f 7b       	andi	r24, 0xBF	; 191
    6ca0:	80 93 22 24 	sts	0x2422, r24
    6ca4:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_SEMICOLONS) {
    6ca8:	56 ff       	sbrs	r21, 6
    6caa:	09 c0       	rjmp	.+18     	; 0x6cbe <xio_rs485_control+0x110>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    6cac:	80 91 22 24 	lds	r24, 0x2422
    6cb0:	90 91 23 24 	lds	r25, 0x2423
    6cb4:	80 68       	ori	r24, 0x80	; 128
    6cb6:	80 93 22 24 	sts	0x2422, r24
    6cba:	90 93 23 24 	sts	0x2423, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    6cbe:	57 ff       	sbrs	r21, 7
    6cc0:	09 c0       	rjmp	.+18     	; 0x6cd4 <xio_rs485_control+0x126>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    6cc2:	80 91 22 24 	lds	r24, 0x2422
    6cc6:	90 91 23 24 	lds	r25, 0x2423
    6cca:	8f 77       	andi	r24, 0x7F	; 127
    6ccc:	80 93 22 24 	sts	0x2422, r24
    6cd0:	90 93 23 24 	sts	0x2423, r25
	}
	return (0);
}
    6cd4:	80 e0       	ldi	r24, 0x00	; 0
    6cd6:	08 95       	ret

00006cd8 <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)		//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    6cd8:	1f 92       	push	r1
    6cda:	0f 92       	push	r0
    6cdc:	0f b6       	in	r0, 0x3f	; 63
    6cde:	0f 92       	push	r0
    6ce0:	0b b6       	in	r0, 0x3b	; 59
    6ce2:	0f 92       	push	r0
    6ce4:	11 24       	eor	r1, r1
    6ce6:	8f 93       	push	r24
    6ce8:	9f 93       	push	r25
    6cea:	af 93       	push	r26
    6cec:	bf 93       	push	r27
    6cee:	ef 93       	push	r30
    6cf0:	ff 93       	push	r31
	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// advance buffer head with wrap
    6cf2:	80 91 2f 24 	lds	r24, 0x242F
    6cf6:	81 50       	subi	r24, 0x01	; 1
    6cf8:	80 93 2f 24 	sts	0x242F, r24
    6cfc:	80 91 2f 24 	lds	r24, 0x242F
    6d00:	88 23       	and	r24, r24
    6d02:	19 f4       	brne	.+6      	; 0x6d0a <__vector_28+0x32>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6d04:	81 e1       	ldi	r24, 0x11	; 17
    6d06:	80 93 2f 24 	sts	0x242F, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    6d0a:	90 91 2f 24 	lds	r25, 0x242F
    6d0e:	80 91 2e 24 	lds	r24, 0x242E
    6d12:	98 17       	cp	r25, r24
    6d14:	61 f0       	breq	.+24     	; 0x6d2e <__vector_28+0x56>
		fr.rx_buf[fr.rx_buf_head] = fr.usart->DATA;// (= USARTC0.DATA;)
    6d16:	e0 91 2f 24 	lds	r30, 0x242F
    6d1a:	f0 e0       	ldi	r31, 0x00	; 0
    6d1c:	a0 91 57 24 	lds	r26, 0x2457
    6d20:	b0 91 58 24 	lds	r27, 0x2458
    6d24:	8c 91       	ld	r24, X
    6d26:	ee 5d       	subi	r30, 0xDE	; 222
    6d28:	fb 4d       	sbci	r31, 0xDB	; 219
    6d2a:	81 8b       	std	Z+17, r24	; 0x11
    6d2c:	0c c0       	rjmp	.+24     	; 0x6d46 <__vector_28+0x6e>
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6d2e:	80 91 2f 24 	lds	r24, 0x242F
    6d32:	8f 5f       	subi	r24, 0xFF	; 255
    6d34:	80 93 2f 24 	sts	0x242F, r24
    6d38:	80 91 2f 24 	lds	r24, 0x242F
    6d3c:	82 31       	cpi	r24, 0x12	; 18
    6d3e:	18 f0       	brcs	.+6      	; 0x6d46 <__vector_28+0x6e>
		fr.rx_buf_head = 1;
    6d40:	81 e0       	ldi	r24, 0x01	; 1
    6d42:	80 93 2f 24 	sts	0x242F, r24
	}
	// activate flow control here or before it gets to this level
}
    6d46:	ff 91       	pop	r31
    6d48:	ef 91       	pop	r30
    6d4a:	bf 91       	pop	r27
    6d4c:	af 91       	pop	r26
    6d4e:	9f 91       	pop	r25
    6d50:	8f 91       	pop	r24
    6d52:	0f 90       	pop	r0
    6d54:	0b be       	out	0x3b, r0	; 59
    6d56:	0f 90       	pop	r0
    6d58:	0f be       	out	0x3f, r0	; 63
    6d5a:	0f 90       	pop	r0
    6d5c:	1f 90       	pop	r1
    6d5e:	18 95       	reti

00006d60 <xio_rs485_queue_RX_char>:
/*
 * xio_rs485_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_rs485_queue_RX_char(const char c)
{
    6d60:	28 2f       	mov	r18, r24
	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// wrap condition
    6d62:	80 91 2f 24 	lds	r24, 0x242F
    6d66:	81 50       	subi	r24, 0x01	; 1
    6d68:	80 93 2f 24 	sts	0x242F, r24
    6d6c:	80 91 2f 24 	lds	r24, 0x242F
    6d70:	88 23       	and	r24, r24
    6d72:	19 f4       	brne	.+6      	; 0x6d7a <xio_rs485_queue_RX_char+0x1a>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6d74:	81 e1       	ldi	r24, 0x11	; 17
    6d76:	80 93 2f 24 	sts	0x242F, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    6d7a:	90 91 2f 24 	lds	r25, 0x242F
    6d7e:	80 91 2e 24 	lds	r24, 0x242E
    6d82:	98 17       	cp	r25, r24
    6d84:	39 f0       	breq	.+14     	; 0x6d94 <xio_rs485_queue_RX_char+0x34>
		fr.rx_buf[fr.rx_buf_head] = c;			// FAKE INPUT DATA
    6d86:	e0 91 2f 24 	lds	r30, 0x242F
    6d8a:	f0 e0       	ldi	r31, 0x00	; 0
    6d8c:	ee 5d       	subi	r30, 0xDE	; 222
    6d8e:	fb 4d       	sbci	r31, 0xDB	; 219
    6d90:	21 8b       	std	Z+17, r18	; 0x11
    6d92:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6d94:	80 91 2f 24 	lds	r24, 0x242F
    6d98:	8f 5f       	subi	r24, 0xFF	; 255
    6d9a:	80 93 2f 24 	sts	0x242F, r24
    6d9e:	80 91 2f 24 	lds	r24, 0x242F
    6da2:	82 31       	cpi	r24, 0x12	; 18
    6da4:	18 f0       	brcs	.+6      	; 0x6dac <xio_rs485_queue_RX_char+0x4c>
		fr.rx_buf_head = 1;
    6da6:	81 e0       	ldi	r24, 0x01	; 1
    6da8:	80 93 2f 24 	sts	0x242F, r24
    6dac:	08 95       	ret

00006dae <xio_rs485_queue_RX_string>:
/*
 * xio_rs485_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_rs485_queue_RX_string(char *buf)
{
    6dae:	1f 93       	push	r17
    6db0:	cf 93       	push	r28
    6db2:	df 93       	push	r29
    6db4:	ec 01       	movw	r28, r24
    6db6:	10 e0       	ldi	r17, 0x00	; 0
    6db8:	02 c0       	rjmp	.+4      	; 0x6dbe <xio_rs485_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_rs485_queue_RX_char(c);
    6dba:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <xio_rs485_queue_RX_char>
void xio_rs485_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    6dbe:	fe 01       	movw	r30, r28
    6dc0:	e1 0f       	add	r30, r17
    6dc2:	f1 1d       	adc	r31, r1
    6dc4:	80 81       	ld	r24, Z
    6dc6:	1f 5f       	subi	r17, 0xFF	; 255
    6dc8:	88 23       	and	r24, r24
    6dca:	b9 f7       	brne	.-18     	; 0x6dba <xio_rs485_queue_RX_string+0xc>
		xio_rs485_queue_RX_char(c);
	}
}
    6dcc:	df 91       	pop	r29
    6dce:	cf 91       	pop	r28
    6dd0:	1f 91       	pop	r17
    6dd2:	08 95       	ret

00006dd4 <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC0 data register empty
{
    6dd4:	1f 92       	push	r1
    6dd6:	0f 92       	push	r0
    6dd8:	0f b6       	in	r0, 0x3f	; 63
    6dda:	0f 92       	push	r0
    6ddc:	0b b6       	in	r0, 0x3b	; 59
    6dde:	0f 92       	push	r0
    6de0:	11 24       	eor	r1, r1
    6de2:	8f 93       	push	r24
    6de4:	9f 93       	push	r25
    6de6:	af 93       	push	r26
    6de8:	bf 93       	push	r27
    6dea:	ef 93       	push	r30
    6dec:	ff 93       	push	r31
	if (fr.tx_buf_head == fr.tx_buf_tail) {			// buffer empty - disable ints
    6dee:	90 91 31 24 	lds	r25, 0x2431
    6df2:	80 91 30 24 	lds	r24, 0x2430
    6df6:	98 17       	cp	r25, r24
    6df8:	39 f4       	brne	.+14     	; 0x6e08 <__vector_29+0x34>
		fr.usart->CTRLA = USART_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    6dfa:	e0 91 57 24 	lds	r30, 0x2457
    6dfe:	f0 91 58 24 	lds	r31, 0x2458
    6e02:	80 e2       	ldi	r24, 0x20	; 32
    6e04:	83 83       	std	Z+3, r24	; 0x03
    6e06:	1e c0       	rjmp	.+60     	; 0x6e44 <__vector_29+0x70>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(fr.flags)) {
    6e08:	80 91 22 24 	lds	r24, 0x2422
    6e0c:	90 91 23 24 	lds	r25, 0x2423
    6e10:	93 fd       	sbrc	r25, 3
    6e12:	18 c0       	rjmp	.+48     	; 0x6e44 <__vector_29+0x70>
		if (--(fr.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    6e14:	80 91 30 24 	lds	r24, 0x2430
    6e18:	81 50       	subi	r24, 0x01	; 1
    6e1a:	80 93 30 24 	sts	0x2430, r24
    6e1e:	80 91 30 24 	lds	r24, 0x2430
    6e22:	88 23       	and	r24, r24
    6e24:	19 f4       	brne	.+6      	; 0x6e2c <__vector_29+0x58>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6e26:	81 e1       	ldi	r24, 0x11	; 17
    6e28:	80 93 30 24 	sts	0x2430, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];	// write char to TX DATA register
    6e2c:	e0 91 57 24 	lds	r30, 0x2457
    6e30:	f0 91 58 24 	lds	r31, 0x2458
    6e34:	a0 91 30 24 	lds	r26, 0x2430
    6e38:	b0 e0       	ldi	r27, 0x00	; 0
    6e3a:	ae 5d       	subi	r26, 0xDE	; 222
    6e3c:	bb 4d       	sbci	r27, 0xDB	; 219
    6e3e:	93 96       	adiw	r26, 0x23	; 35
    6e40:	8c 91       	ld	r24, X
    6e42:	80 83       	st	Z, r24
	}
}
    6e44:	ff 91       	pop	r31
    6e46:	ef 91       	pop	r30
    6e48:	bf 91       	pop	r27
    6e4a:	af 91       	pop	r26
    6e4c:	9f 91       	pop	r25
    6e4e:	8f 91       	pop	r24
    6e50:	0f 90       	pop	r0
    6e52:	0b be       	out	0x3b, r0	; 59
    6e54:	0f 90       	pop	r0
    6e56:	0f be       	out	0x3f, r0	; 63
    6e58:	0f 90       	pop	r0
    6e5a:	1f 90       	pop	r1
    6e5c:	18 95       	reti

00006e5e <xio_rs485_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_rs485_putc(const char c, FILE *stream)
{
    6e5e:	48 2f       	mov	r20, r24
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(fr.flags)) {
    6e60:	20 91 22 24 	lds	r18, 0x2422
    6e64:	30 91 23 24 	lds	r19, 0x2423
    6e68:	d9 01       	movw	r26, r18
    6e6a:	a4 70       	andi	r26, 0x04	; 4
    6e6c:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	fr.tx_buf_head = fr.next_tx_buf_head;			// accept the next buffer head value
	fr.tx_buf[fr.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(fr.flags) && (c == '\n')) {			// detect LF and add a CR
    6e6e:	b9 01       	movw	r22, r18
    6e70:	60 72       	andi	r22, 0x20	; 32
    6e72:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_rs485_putc(const char c, FILE *stream)
{
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
    6e74:	90 91 31 24 	lds	r25, 0x2431
    6e78:	91 50       	subi	r25, 0x01	; 1
    6e7a:	c1 f4       	brne	.+48     	; 0x6eac <xio_rs485_putc+0x4e>
    6e7c:	91 e1       	ldi	r25, 0x11	; 17
    6e7e:	16 c0       	rjmp	.+44     	; 0x6eac <xio_rs485_putc+0x4e>
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(fr.flags)) {
    6e80:	10 97       	sbiw	r26, 0x00	; 0
    6e82:	61 f0       	breq	.+24     	; 0x6e9c <xio_rs485_putc+0x3e>
			sleep_mode();
    6e84:	80 91 48 00 	lds	r24, 0x0048
    6e88:	81 60       	ori	r24, 0x01	; 1
    6e8a:	80 93 48 00 	sts	0x0048, r24
    6e8e:	88 95       	sleep
    6e90:	80 91 48 00 	lds	r24, 0x0048
    6e94:	8e 7f       	andi	r24, 0xFE	; 254
    6e96:	80 93 48 00 	sts	0x0048, r24
    6e9a:	08 c0       	rjmp	.+16     	; 0x6eac <xio_rs485_putc+0x4e>
    6e9c:	90 93 32 24 	sts	0x2432, r25
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
    6ea0:	83 e0       	ldi	r24, 0x03	; 3
    6ea2:	80 93 24 24 	sts	0x2424, r24
    6ea6:	2f ef       	ldi	r18, 0xFF	; 255
    6ea8:	3f ef       	ldi	r19, 0xFF	; 255
    6eaa:	54 c0       	rjmp	.+168    	; 0x6f54 <xio_rs485_putc+0xf6>
int xio_rs485_putc(const char c, FILE *stream)
{
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
    6eac:	80 91 30 24 	lds	r24, 0x2430
    6eb0:	98 17       	cp	r25, r24
    6eb2:	31 f3       	breq	.-52     	; 0x6e80 <xio_rs485_putc+0x22>
			fr.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	fr.tx_buf_head = fr.next_tx_buf_head;			// accept the next buffer head value
    6eb4:	90 93 31 24 	sts	0x2431, r25
	fr.tx_buf[fr.tx_buf_head] = c;				// ...and write char to buffer
    6eb8:	e0 91 31 24 	lds	r30, 0x2431
    6ebc:	f0 e0       	ldi	r31, 0x00	; 0
    6ebe:	ee 5d       	subi	r30, 0xDE	; 222
    6ec0:	fb 4d       	sbci	r31, 0xDB	; 219
    6ec2:	43 a3       	std	Z+35, r20	; 0x23

	if (CRLF(fr.flags) && (c == '\n')) {			// detect LF and add a CR
    6ec4:	61 15       	cp	r22, r1
    6ec6:	71 05       	cpc	r23, r1
    6ec8:	21 f0       	breq	.+8      	; 0x6ed2 <xio_rs485_putc+0x74>
    6eca:	4a 30       	cpi	r20, 0x0A	; 10
    6ecc:	11 f4       	brne	.+4      	; 0x6ed2 <xio_rs485_putc+0x74>
    6ece:	4d e0       	ldi	r20, 0x0D	; 13
    6ed0:	d1 cf       	rjmp	.-94     	; 0x6e74 <xio_rs485_putc+0x16>
    6ed2:	90 93 32 24 	sts	0x2432, r25
		return xio_rs485_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (fr.usart->STATUS & 0x20) {
    6ed6:	a0 91 57 24 	lds	r26, 0x2457
    6eda:	b0 91 58 24 	lds	r27, 0x2458
    6ede:	11 96       	adiw	r26, 0x01	; 1
    6ee0:	8c 91       	ld	r24, X
    6ee2:	11 97       	sbiw	r26, 0x01	; 1
    6ee4:	85 ff       	sbrs	r24, 5
    6ee6:	27 c0       	rjmp	.+78     	; 0x6f36 <xio_rs485_putc+0xd8>
		if (fr.tx_buf_head == fr.tx_buf_tail) {	// buf might be empty if IRQ got it
    6ee8:	90 91 31 24 	lds	r25, 0x2431
    6eec:	80 91 30 24 	lds	r24, 0x2430
    6ef0:	98 17       	cp	r25, r24
    6ef2:	71 f1       	breq	.+92     	; 0x6f50 <xio_rs485_putc+0xf2>
			return (0);
		}
		fr.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    6ef4:	38 60       	ori	r19, 0x08	; 8
    6ef6:	20 93 22 24 	sts	0x2422, r18
    6efa:	30 93 23 24 	sts	0x2423, r19
		if (--(fr.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    6efe:	80 91 30 24 	lds	r24, 0x2430
    6f02:	81 50       	subi	r24, 0x01	; 1
    6f04:	80 93 30 24 	sts	0x2430, r24
    6f08:	80 91 30 24 	lds	r24, 0x2430
    6f0c:	88 23       	and	r24, r24
    6f0e:	19 f4       	brne	.+6      	; 0x6f16 <xio_rs485_putc+0xb8>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6f10:	81 e1       	ldi	r24, 0x11	; 17
    6f12:	80 93 30 24 	sts	0x2430, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];// write char to TX DATA register
    6f16:	e0 91 30 24 	lds	r30, 0x2430
    6f1a:	f0 e0       	ldi	r31, 0x00	; 0
    6f1c:	ee 5d       	subi	r30, 0xDE	; 222
    6f1e:	fb 4d       	sbci	r31, 0xDB	; 219
    6f20:	83 a1       	ldd	r24, Z+35	; 0x23
    6f22:	8c 93       	st	X, r24
		fr.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    6f24:	80 91 22 24 	lds	r24, 0x2422
    6f28:	90 91 23 24 	lds	r25, 0x2423
    6f2c:	97 7f       	andi	r25, 0xF7	; 247
    6f2e:	80 93 22 24 	sts	0x2422, r24
    6f32:	90 93 23 24 	sts	0x2423, r25
	}
	// enable interrupts regardless
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    6f36:	e0 91 57 24 	lds	r30, 0x2457
    6f3a:	f0 91 58 24 	lds	r31, 0x2458
    6f3e:	81 e2       	ldi	r24, 0x21	; 33
    6f40:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    6f42:	80 91 a2 00 	lds	r24, 0x00A2
    6f46:	81 60       	ori	r24, 0x01	; 1
    6f48:	e0 ea       	ldi	r30, 0xA0	; 160
    6f4a:	f0 e0       	ldi	r31, 0x00	; 0
    6f4c:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    6f4e:	78 94       	sei
    6f50:	20 e0       	ldi	r18, 0x00	; 0
    6f52:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    6f54:	c9 01       	movw	r24, r18
    6f56:	08 95       	ret

00006f58 <xio_rs485_getc>:
 */

int xio_rs485_getc(FILE *stream)
{
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(fr.flags)) {
    6f58:	20 91 22 24 	lds	r18, 0x2422
    6f5c:	30 91 23 24 	lds	r19, 0x2423
    6f60:	24 70       	andi	r18, 0x04	; 4
    6f62:	30 70       	andi	r19, 0x00	; 0
    6f64:	15 c0       	rjmp	.+42     	; 0x6f90 <xio_rs485_getc+0x38>
    6f66:	21 15       	cp	r18, r1
    6f68:	31 05       	cpc	r19, r1
    6f6a:	61 f0       	breq	.+24     	; 0x6f84 <xio_rs485_getc+0x2c>
			sleep_mode();
    6f6c:	80 91 48 00 	lds	r24, 0x0048
    6f70:	81 60       	ori	r24, 0x01	; 1
    6f72:	80 93 48 00 	sts	0x0048, r24
    6f76:	88 95       	sleep
    6f78:	80 91 48 00 	lds	r24, 0x0048
    6f7c:	8e 7f       	andi	r24, 0xFE	; 254
    6f7e:	80 93 48 00 	sts	0x0048, r24
    6f82:	06 c0       	rjmp	.+12     	; 0x6f90 <xio_rs485_getc+0x38>
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
    6f84:	83 e0       	ldi	r24, 0x03	; 3
    6f86:	80 93 24 24 	sts	0x2424, r24
    6f8a:	2f ef       	ldi	r18, 0xFF	; 255
    6f8c:	3f ef       	ldi	r19, 0xFF	; 255
    6f8e:	26 c0       	rjmp	.+76     	; 0x6fdc <xio_rs485_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_rs485_getc(FILE *stream)
{
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
    6f90:	90 91 2f 24 	lds	r25, 0x242F
    6f94:	80 91 2e 24 	lds	r24, 0x242E
    6f98:	98 17       	cp	r25, r24
    6f9a:	29 f3       	breq	.-54     	; 0x6f66 <xio_rs485_getc+0xe>
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    6f9c:	80 91 2e 24 	lds	r24, 0x242E
    6fa0:	81 50       	subi	r24, 0x01	; 1
    6fa2:	80 93 2e 24 	sts	0x242E, r24
    6fa6:	80 91 2e 24 	lds	r24, 0x242E
    6faa:	88 23       	and	r24, r24
    6fac:	19 f4       	brne	.+6      	; 0x6fb4 <xio_rs485_getc+0x5c>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6fae:	81 e1       	ldi	r24, 0x11	; 17
    6fb0:	80 93 2e 24 	sts	0x242E, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    6fb4:	e0 91 2e 24 	lds	r30, 0x242E
    6fb8:	f0 e0       	ldi	r31, 0x00	; 0
    6fba:	ee 5d       	subi	r30, 0xDE	; 222
    6fbc:	fb 4d       	sbci	r31, 0xDB	; 219
    6fbe:	81 89       	ldd	r24, Z+17	; 0x11
    6fc0:	8f 77       	andi	r24, 0x7F	; 127
    6fc2:	80 93 25 24 	sts	0x2425, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[fr.c])))());
    6fc6:	90 e0       	ldi	r25, 0x00	; 0
    6fc8:	88 0f       	add	r24, r24
    6fca:	99 1f       	adc	r25, r25
    6fcc:	81 5f       	subi	r24, 0xF1	; 241
    6fce:	93 4e       	sbci	r25, 0xE3	; 227
    6fd0:	fc 01       	movw	r30, r24
    6fd2:	25 91       	lpm	r18, Z+
    6fd4:	34 91       	lpm	r19, Z+
    6fd6:	f9 01       	movw	r30, r18
    6fd8:	19 95       	eicall
    6fda:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    6fdc:	c9 01       	movw	r24, r18
    6fde:	08 95       	ret

00006fe0 <_getc_char>:

/* xio_rs485_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    6fe0:	80 91 22 24 	lds	r24, 0x2422
    6fe4:	84 ff       	sbrs	r24, 4
    6fe6:	08 c0       	rjmp	.+16     	; 0x6ff8 <_getc_char+0x18>
    6fe8:	60 91 69 25 	lds	r22, 0x2569
    6fec:	70 91 6a 25 	lds	r23, 0x256A
    6ff0:	80 91 25 24 	lds	r24, 0x2425
    6ff4:	0e 94 2f 37 	call	0x6e5e	; 0x6e5e <xio_rs485_putc>
	return(fr.c);
}
    6ff8:	80 91 25 24 	lds	r24, 0x2425
    6ffc:	90 e0       	ldi	r25, 0x00	; 0
    6ffe:	08 95       	ret

00007000 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(fr.flags)) fr.c = '\n';
    7000:	90 91 22 24 	lds	r25, 0x2422
    7004:	96 ff       	sbrs	r25, 6
    7006:	03 c0       	rjmp	.+6      	; 0x700e <_getc_NEWLINE+0xe>
    7008:	8a e0       	ldi	r24, 0x0A	; 10
    700a:	80 93 25 24 	sts	0x2425, r24
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    700e:	94 ff       	sbrs	r25, 4
    7010:	08 c0       	rjmp	.+16     	; 0x7022 <_getc_NEWLINE+0x22>
    7012:	60 91 69 25 	lds	r22, 0x2569
    7016:	70 91 6a 25 	lds	r23, 0x256A
    701a:	80 91 25 24 	lds	r24, 0x2425
    701e:	0e 94 2f 37 	call	0x6e5e	; 0x6e5e <xio_rs485_putc>
	return(fr.c);
}
    7022:	80 91 25 24 	lds	r24, 0x2425
    7026:	90 e0       	ldi	r25, 0x00	; 0
    7028:	08 95       	ret

0000702a <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(fr.flags)) {
    702a:	80 91 22 24 	lds	r24, 0x2422
    702e:	87 ff       	sbrs	r24, 7
    7030:	03 c0       	rjmp	.+6      	; 0x7038 <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    7032:	0e 94 00 38 	call	0x7000	; 0x7000 <_getc_NEWLINE>
    7036:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    7038:	0e 94 f0 37 	call	0x6fe0	; 0x6fe0 <_getc_char>
}
    703c:	08 95       	ret

0000703e <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	fr.sig = XIO_SIG_DELETE;
    703e:	8a e0       	ldi	r24, 0x0A	; 10
    7040:	80 93 24 24 	sts	0x2424, r24
	return(_FDEV_ERR);
}
    7044:	8f ef       	ldi	r24, 0xFF	; 255
    7046:	9f ef       	ldi	r25, 0xFF	; 255
    7048:	08 95       	ret

0000704a <_getc_KILL>:

static int _getc_KILL(void)
{
	fr.sig = XIO_SIG_KILL;
    704a:	84 e0       	ldi	r24, 0x04	; 4
    704c:	80 93 24 24 	sts	0x2424, r24
	return(_FDEV_ERR);
}
    7050:	8f ef       	ldi	r24, 0xFF	; 255
    7052:	9f ef       	ldi	r25, 0xFF	; 255
    7054:	08 95       	ret

00007056 <_getc_PAUSE>:

static int _getc_PAUSE(void)
{
	fr.sig = XIO_SIG_PAUSE;
    7056:	86 e0       	ldi	r24, 0x06	; 6
    7058:	80 93 24 24 	sts	0x2424, r24
	return(_FDEV_ERR);
}
    705c:	8f ef       	ldi	r24, 0xFF	; 255
    705e:	9f ef       	ldi	r25, 0xFF	; 255
    7060:	08 95       	ret

00007062 <_getc_RESUME>:

static int _getc_RESUME(void)
{
	fr.sig = XIO_SIG_RESUME;
    7062:	87 e0       	ldi	r24, 0x07	; 7
    7064:	80 93 24 24 	sts	0x2424, r24
	return(_FDEV_ERR);
}
    7068:	8f ef       	ldi	r24, 0xFF	; 255
    706a:	9f ef       	ldi	r25, 0xFF	; 255
    706c:	08 95       	ret

0000706e <_getc_SHIFTOUT>:

static int _getc_SHIFTOUT(void)
{
	fr.sig = XIO_SIG_SHIFTOUT;
    706e:	88 e0       	ldi	r24, 0x08	; 8
    7070:	80 93 24 24 	sts	0x2424, r24
	return(_FDEV_ERR);
}
    7074:	8f ef       	ldi	r24, 0xFF	; 255
    7076:	9f ef       	ldi	r25, 0xFF	; 255
    7078:	08 95       	ret

0000707a <_getc_SHIFTIN>:

static int _getc_SHIFTIN(void)
{
	fr.sig = XIO_SIG_SHIFTIN;
    707a:	89 e0       	ldi	r24, 0x09	; 9
    707c:	80 93 24 24 	sts	0x2424, r24
	return(_FDEV_ERR);
}
    7080:	8f ef       	ldi	r24, 0xFF	; 255
    7082:	9f ef       	ldi	r25, 0xFF	; 255
    7084:	08 95       	ret

00007086 <xio_rs485_readln>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_rs485_readln(char *buf, uint8_t len)
{
	if (!IN_LINE(fr.flags)) {					// first time thru initializations
    7086:	20 91 22 24 	lds	r18, 0x2422
    708a:	30 91 23 24 	lds	r19, 0x2423
    708e:	36 fd       	sbrc	r19, 6
    7090:	0d c0       	rjmp	.+26     	; 0x70ac <xio_rs485_readln+0x26>
		fr.i = 0;								// zero buffer
    7092:	10 92 26 24 	sts	0x2426, r1
		fr.len = len;							// save arg into struct 
    7096:	60 93 27 24 	sts	0x2427, r22
		fr.buf = buf;							// save arg into struct 
    709a:	80 93 28 24 	sts	0x2428, r24
    709e:	90 93 29 24 	sts	0x2429, r25
//		fr.sig = XIO_SIG_OK;					// no signal action
		fr.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    70a2:	30 64       	ori	r19, 0x40	; 64
    70a4:	20 93 22 24 	sts	0x2422, r18
    70a8:	30 93 23 24 	sts	0x2423, r19
	}
	if (fr.rx_buf_head == fr.rx_buf_tail) {		// RX ISR buffer empty
    70ac:	90 91 2f 24 	lds	r25, 0x242F
    70b0:	80 91 2e 24 	lds	r24, 0x242E
    70b4:	98 17       	cp	r25, r24
    70b6:	19 f4       	brne	.+6      	; 0x70be <xio_rs485_readln+0x38>
    70b8:	22 e0       	ldi	r18, 0x02	; 2
    70ba:	30 e0       	ldi	r19, 0x00	; 0
    70bc:	20 c0       	rjmp	.+64     	; 0x70fe <xio_rs485_readln+0x78>
//		fr.sig = XIO_SIG_WOULDBLOCK;
		return(TG_CONTINUE);
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    70be:	80 91 2e 24 	lds	r24, 0x242E
    70c2:	81 50       	subi	r24, 0x01	; 1
    70c4:	80 93 2e 24 	sts	0x242E, r24
    70c8:	80 91 2e 24 	lds	r24, 0x242E
    70cc:	88 23       	and	r24, r24
    70ce:	19 f4       	brne	.+6      	; 0x70d6 <xio_rs485_readln+0x50>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    70d0:	81 e1       	ldi	r24, 0x11	; 17
    70d2:	80 93 2e 24 	sts	0x242E, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    70d6:	e0 91 2e 24 	lds	r30, 0x242E
    70da:	f0 e0       	ldi	r31, 0x00	; 0
    70dc:	ee 5d       	subi	r30, 0xDE	; 222
    70de:	fb 4d       	sbci	r31, 0xDB	; 219
    70e0:	81 89       	ldd	r24, Z+17	; 0x11
    70e2:	8f 77       	andi	r24, 0x7F	; 127
    70e4:	80 93 25 24 	sts	0x2425, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[fr.c])))()); // dispatch on character
    70e8:	90 e0       	ldi	r25, 0x00	; 0
    70ea:	88 0f       	add	r24, r24
    70ec:	99 1f       	adc	r25, r25
    70ee:	81 5f       	subi	r24, 0xF1	; 241
    70f0:	94 4e       	sbci	r25, 0xE4	; 228
    70f2:	fc 01       	movw	r30, r24
    70f4:	25 91       	lpm	r18, Z+
    70f6:	34 91       	lpm	r19, Z+
    70f8:	f9 01       	movw	r30, r18
    70fa:	19 95       	eicall
    70fc:	9c 01       	movw	r18, r24
}
    70fe:	c9 01       	movw	r24, r18
    7100:	08 95       	ret

00007102 <_readln_char>:

/* xio_rs485_readln helper routines */

static int _readln_char(void)
{
	if (fr.i > fr.len) {						// trap buffer overflow
    7102:	90 91 26 24 	lds	r25, 0x2426
    7106:	20 91 27 24 	lds	r18, 0x2427
    710a:	e0 91 28 24 	lds	r30, 0x2428
    710e:	f0 91 29 24 	lds	r31, 0x2429
    7112:	29 17       	cp	r18, r25
    7114:	48 f4       	brcc	.+18     	; 0x7128 <_readln_char+0x26>
		fr.sig = XIO_SIG_EOL;
    7116:	81 e0       	ldi	r24, 0x01	; 1
    7118:	80 93 24 24 	sts	0x2424, r24
		fr.buf[fr.len] = NUL;					// fr.len is zero based
    711c:	e2 0f       	add	r30, r18
    711e:	f1 1d       	adc	r31, r1
    7120:	10 82       	st	Z, r1
    7122:	26 e0       	ldi	r18, 0x06	; 6
    7124:	30 e0       	ldi	r19, 0x00	; 0
    7126:	16 c0       	rjmp	.+44     	; 0x7154 <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	fr.buf[fr.i++] = fr.c;
    7128:	e9 0f       	add	r30, r25
    712a:	f1 1d       	adc	r31, r1
    712c:	80 91 25 24 	lds	r24, 0x2425
    7130:	80 83       	st	Z, r24
    7132:	9f 5f       	subi	r25, 0xFF	; 255
    7134:	90 93 26 24 	sts	0x2426, r25
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);// conditional echo
    7138:	80 91 22 24 	lds	r24, 0x2422
    713c:	84 ff       	sbrs	r24, 4
    713e:	08 c0       	rjmp	.+16     	; 0x7150 <_readln_char+0x4e>
    7140:	60 91 69 25 	lds	r22, 0x2569
    7144:	70 91 6a 25 	lds	r23, 0x256A
    7148:	80 91 25 24 	lds	r24, 0x2425
    714c:	0e 94 2f 37 	call	0x6e5e	; 0x6e5e <xio_rs485_putc>
    7150:	22 e0       	ldi	r18, 0x02	; 2
    7152:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_CONTINUE);						// line is still in process
}
    7154:	c9 01       	movw	r24, r18
    7156:	08 95       	ret

00007158 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	fr.sig = XIO_SIG_EOL;
    7158:	81 e0       	ldi	r24, 0x01	; 1
    715a:	80 93 24 24 	sts	0x2424, r24
	fr.buf[fr.i] = NUL;
    715e:	80 91 26 24 	lds	r24, 0x2426
    7162:	e0 91 28 24 	lds	r30, 0x2428
    7166:	f0 91 29 24 	lds	r31, 0x2429
    716a:	e8 0f       	add	r30, r24
    716c:	f1 1d       	adc	r31, r1
    716e:	10 82       	st	Z, r1
	fr.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    7170:	20 91 22 24 	lds	r18, 0x2422
    7174:	30 91 23 24 	lds	r19, 0x2423
    7178:	c9 01       	movw	r24, r18
    717a:	9f 7b       	andi	r25, 0xBF	; 191
    717c:	80 93 22 24 	sts	0x2422, r24
    7180:	90 93 23 24 	sts	0x2423, r25
	if (ECHO(fr.flags)) xio_rs485_putc('\n',stdout);// echo a newline
    7184:	24 ff       	sbrs	r18, 4
    7186:	07 c0       	rjmp	.+14     	; 0x7196 <_readln_NEWLINE+0x3e>
    7188:	60 91 69 25 	lds	r22, 0x2569
    718c:	70 91 6a 25 	lds	r23, 0x256A
    7190:	8a e0       	ldi	r24, 0x0A	; 10
    7192:	0e 94 2f 37 	call	0x6e5e	; 0x6e5e <xio_rs485_putc>
	return ((int)fr.line_func(fr.buf));			// call line handler function
    7196:	e0 91 2c 24 	lds	r30, 0x242C
    719a:	f0 91 2d 24 	lds	r31, 0x242D
    719e:	80 91 28 24 	lds	r24, 0x2428
    71a2:	90 91 29 24 	lds	r25, 0x2429
    71a6:	19 95       	eicall
}
    71a8:	08 95       	ret

000071aa <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(fr.flags)) {
    71aa:	80 91 22 24 	lds	r24, 0x2422
    71ae:	87 ff       	sbrs	r24, 7
    71b0:	03 c0       	rjmp	.+6      	; 0x71b8 <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    71b2:	0e 94 ac 38 	call	0x7158	; 0x7158 <_readln_NEWLINE>
    71b6:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    71b8:	0e 94 81 38 	call	0x7102	; 0x7102 <_readln_char>
	}
}
    71bc:	08 95       	ret

000071be <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--fr.i >= 0) {
    71be:	80 91 26 24 	lds	r24, 0x2426
    71c2:	81 50       	subi	r24, 0x01	; 1
    71c4:	80 93 26 24 	sts	0x2426, r24
		if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    71c8:	80 91 22 24 	lds	r24, 0x2422
    71cc:	84 ff       	sbrs	r24, 4
    71ce:	08 c0       	rjmp	.+16     	; 0x71e0 <_readln_DELETE+0x22>
    71d0:	60 91 69 25 	lds	r22, 0x2569
    71d4:	70 91 6a 25 	lds	r23, 0x256A
    71d8:	80 91 25 24 	lds	r24, 0x2425
    71dc:	0e 94 2f 37 	call	0x6e5e	; 0x6e5e <xio_rs485_putc>
	} else {
		fr.i = 0;
	}
	return (TG_CONTINUE);						// line is still in process
}
    71e0:	82 e0       	ldi	r24, 0x02	; 2
    71e2:	90 e0       	ldi	r25, 0x00	; 0
    71e4:	08 95       	ret

000071e6 <_readln_KILL>:

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    71e6:	84 e0       	ldi	r24, 0x04	; 4
    71e8:	80 93 24 24 	sts	0x2424, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    71ec:	e0 91 2a 24 	lds	r30, 0x242A
    71f0:	f0 91 2b 24 	lds	r31, 0x242B
    71f4:	19 95       	eicall
}

static int _readln_KILL(void)
{
	return _readln_SIG(XIO_SIG_KILL);
}
    71f6:	08 95       	ret

000071f8 <_readln_PAUSE>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    71f8:	86 e0       	ldi	r24, 0x06	; 6
    71fa:	80 93 24 24 	sts	0x2424, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    71fe:	e0 91 2a 24 	lds	r30, 0x242A
    7202:	f0 91 2b 24 	lds	r31, 0x242B
    7206:	19 95       	eicall
}

static int _readln_PAUSE(void)
{
	return _readln_SIG(XIO_SIG_PAUSE);
}
    7208:	08 95       	ret

0000720a <_readln_RESUME>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    720a:	87 e0       	ldi	r24, 0x07	; 7
    720c:	80 93 24 24 	sts	0x2424, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    7210:	e0 91 2a 24 	lds	r30, 0x242A
    7214:	f0 91 2b 24 	lds	r31, 0x242B
    7218:	19 95       	eicall
}

static int _readln_RESUME(void)
{
	return _readln_SIG(XIO_SIG_RESUME);
}
    721a:	08 95       	ret

0000721c <_readln_SHIFTOUT>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    721c:	88 e0       	ldi	r24, 0x08	; 8
    721e:	80 93 24 24 	sts	0x2424, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    7222:	e0 91 2a 24 	lds	r30, 0x242A
    7226:	f0 91 2b 24 	lds	r31, 0x242B
    722a:	19 95       	eicall
}

static int _readln_SHIFTOUT(void)
{
	return _readln_SIG(XIO_SIG_SHIFTOUT);
}
    722c:	08 95       	ret

0000722e <_readln_SHIFTIN>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    722e:	89 e0       	ldi	r24, 0x09	; 9
    7230:	80 93 24 24 	sts	0x2424, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    7234:	e0 91 2a 24 	lds	r30, 0x242A
    7238:	f0 91 2b 24 	lds	r31, 0x242B
    723c:	19 95       	eicall
}

static int _readln_SHIFTIN(void)
{
	return _readln_SIG(XIO_SIG_SHIFTIN);
}
    723e:	08 95       	ret

00007240 <__udivdi3>:
    7240:	ae e5       	ldi	r26, 0x5E	; 94
    7242:	b0 e0       	ldi	r27, 0x00	; 0
    7244:	e6 e2       	ldi	r30, 0x26	; 38
    7246:	f9 e3       	ldi	r31, 0x39	; 57
    7248:	0c 94 b3 47 	jmp	0x8f66	; 0x8f66 <__prologue_saves__>
    724c:	a8 e0       	ldi	r26, 0x08	; 8
    724e:	4e 01       	movw	r8, r28
    7250:	08 94       	sec
    7252:	81 1c       	adc	r8, r1
    7254:	91 1c       	adc	r9, r1
    7256:	f4 01       	movw	r30, r8
    7258:	6a 2e       	mov	r6, r26
    725a:	11 92       	st	Z+, r1
    725c:	6a 94       	dec	r6
    725e:	e9 f7       	brne	.-6      	; 0x725a <__udivdi3+0x1a>
    7260:	29 83       	std	Y+1, r18	; 0x01
    7262:	3a 83       	std	Y+2, r19	; 0x02
    7264:	4b 83       	std	Y+3, r20	; 0x03
    7266:	5c 83       	std	Y+4, r21	; 0x04
    7268:	6d 83       	std	Y+5, r22	; 0x05
    726a:	7e 83       	std	Y+6, r23	; 0x06
    726c:	8f 83       	std	Y+7, r24	; 0x07
    726e:	98 87       	std	Y+8, r25	; 0x08
    7270:	ce 01       	movw	r24, r28
    7272:	09 96       	adiw	r24, 0x09	; 9
    7274:	fc 01       	movw	r30, r24
    7276:	11 92       	st	Z+, r1
    7278:	aa 95       	dec	r26
    727a:	e9 f7       	brne	.-6      	; 0x7276 <__udivdi3+0x36>
    727c:	a9 86       	std	Y+9, r10	; 0x09
    727e:	ba 86       	std	Y+10, r11	; 0x0a
    7280:	cb 86       	std	Y+11, r12	; 0x0b
    7282:	dc 86       	std	Y+12, r13	; 0x0c
    7284:	ed 86       	std	Y+13, r14	; 0x0d
    7286:	fe 86       	std	Y+14, r15	; 0x0e
    7288:	0f 87       	std	Y+15, r16	; 0x0f
    728a:	18 8b       	std	Y+16, r17	; 0x10
    728c:	29 84       	ldd	r2, Y+9	; 0x09
    728e:	3a 84       	ldd	r3, Y+10	; 0x0a
    7290:	4b 84       	ldd	r4, Y+11	; 0x0b
    7292:	5c 84       	ldd	r5, Y+12	; 0x0c
    7294:	ed 84       	ldd	r14, Y+13	; 0x0d
    7296:	fe 84       	ldd	r15, Y+14	; 0x0e
    7298:	0f 85       	ldd	r16, Y+15	; 0x0f
    729a:	18 89       	ldd	r17, Y+16	; 0x10
    729c:	69 80       	ldd	r6, Y+1	; 0x01
    729e:	7a 80       	ldd	r7, Y+2	; 0x02
    72a0:	8b 80       	ldd	r8, Y+3	; 0x03
    72a2:	9c 80       	ldd	r9, Y+4	; 0x04
    72a4:	6d a6       	std	Y+45, r6	; 0x2d
    72a6:	7e a6       	std	Y+46, r7	; 0x2e
    72a8:	8f a6       	std	Y+47, r8	; 0x2f
    72aa:	98 aa       	std	Y+48, r9	; 0x30
    72ac:	6d 80       	ldd	r6, Y+5	; 0x05
    72ae:	7e 80       	ldd	r7, Y+6	; 0x06
    72b0:	8f 80       	ldd	r8, Y+7	; 0x07
    72b2:	98 84       	ldd	r9, Y+8	; 0x08
    72b4:	e1 14       	cp	r14, r1
    72b6:	f1 04       	cpc	r15, r1
    72b8:	01 05       	cpc	r16, r1
    72ba:	11 05       	cpc	r17, r1
    72bc:	09 f0       	breq	.+2      	; 0x72c0 <__udivdi3+0x80>
    72be:	b3 c3       	rjmp	.+1894   	; 0x7a26 <__udivdi3+0x7e6>
    72c0:	62 14       	cp	r6, r2
    72c2:	73 04       	cpc	r7, r3
    72c4:	84 04       	cpc	r8, r4
    72c6:	95 04       	cpc	r9, r5
    72c8:	08 f0       	brcs	.+2      	; 0x72cc <__udivdi3+0x8c>
    72ca:	3d c1       	rjmp	.+634    	; 0x7546 <__udivdi3+0x306>
    72cc:	00 e0       	ldi	r16, 0x00	; 0
    72ce:	20 16       	cp	r2, r16
    72d0:	00 e0       	ldi	r16, 0x00	; 0
    72d2:	30 06       	cpc	r3, r16
    72d4:	01 e0       	ldi	r16, 0x01	; 1
    72d6:	40 06       	cpc	r4, r16
    72d8:	00 e0       	ldi	r16, 0x00	; 0
    72da:	50 06       	cpc	r5, r16
    72dc:	88 f4       	brcc	.+34     	; 0x7300 <__udivdi3+0xc0>
    72de:	1f ef       	ldi	r17, 0xFF	; 255
    72e0:	21 16       	cp	r2, r17
    72e2:	31 04       	cpc	r3, r1
    72e4:	41 04       	cpc	r4, r1
    72e6:	51 04       	cpc	r5, r1
    72e8:	39 f0       	breq	.+14     	; 0x72f8 <__udivdi3+0xb8>
    72ea:	30 f0       	brcs	.+12     	; 0x72f8 <__udivdi3+0xb8>
    72ec:	48 e0       	ldi	r20, 0x08	; 8
    72ee:	e4 2e       	mov	r14, r20
    72f0:	f1 2c       	mov	r15, r1
    72f2:	01 2d       	mov	r16, r1
    72f4:	11 2d       	mov	r17, r1
    72f6:	18 c0       	rjmp	.+48     	; 0x7328 <__udivdi3+0xe8>
    72f8:	ee 24       	eor	r14, r14
    72fa:	ff 24       	eor	r15, r15
    72fc:	87 01       	movw	r16, r14
    72fe:	14 c0       	rjmp	.+40     	; 0x7328 <__udivdi3+0xe8>
    7300:	20 e0       	ldi	r18, 0x00	; 0
    7302:	22 16       	cp	r2, r18
    7304:	20 e0       	ldi	r18, 0x00	; 0
    7306:	32 06       	cpc	r3, r18
    7308:	20 e0       	ldi	r18, 0x00	; 0
    730a:	42 06       	cpc	r4, r18
    730c:	21 e0       	ldi	r18, 0x01	; 1
    730e:	52 06       	cpc	r5, r18
    7310:	30 f0       	brcs	.+12     	; 0x731e <__udivdi3+0xde>
    7312:	38 e1       	ldi	r19, 0x18	; 24
    7314:	e3 2e       	mov	r14, r19
    7316:	f1 2c       	mov	r15, r1
    7318:	01 2d       	mov	r16, r1
    731a:	11 2d       	mov	r17, r1
    731c:	05 c0       	rjmp	.+10     	; 0x7328 <__udivdi3+0xe8>
    731e:	20 e1       	ldi	r18, 0x10	; 16
    7320:	e2 2e       	mov	r14, r18
    7322:	f1 2c       	mov	r15, r1
    7324:	01 2d       	mov	r16, r1
    7326:	11 2d       	mov	r17, r1
    7328:	d2 01       	movw	r26, r4
    732a:	c1 01       	movw	r24, r2
    732c:	0e 2c       	mov	r0, r14
    732e:	04 c0       	rjmp	.+8      	; 0x7338 <__udivdi3+0xf8>
    7330:	b6 95       	lsr	r27
    7332:	a7 95       	ror	r26
    7334:	97 95       	ror	r25
    7336:	87 95       	ror	r24
    7338:	0a 94       	dec	r0
    733a:	d2 f7       	brpl	.-12     	; 0x7330 <__udivdi3+0xf0>
    733c:	83 5d       	subi	r24, 0xD3	; 211
    733e:	9f 4d       	sbci	r25, 0xDF	; 223
    7340:	dc 01       	movw	r26, r24
    7342:	2c 91       	ld	r18, X
    7344:	80 e2       	ldi	r24, 0x20	; 32
    7346:	90 e0       	ldi	r25, 0x00	; 0
    7348:	a0 e0       	ldi	r26, 0x00	; 0
    734a:	b0 e0       	ldi	r27, 0x00	; 0
    734c:	8e 19       	sub	r24, r14
    734e:	9f 09       	sbc	r25, r15
    7350:	a0 0b       	sbc	r26, r16
    7352:	b1 0b       	sbc	r27, r17
    7354:	7c 01       	movw	r14, r24
    7356:	8d 01       	movw	r16, r26
    7358:	e2 1a       	sub	r14, r18
    735a:	f1 08       	sbc	r15, r1
    735c:	01 09       	sbc	r16, r1
    735e:	11 09       	sbc	r17, r1
    7360:	e1 14       	cp	r14, r1
    7362:	f1 04       	cpc	r15, r1
    7364:	01 05       	cpc	r16, r1
    7366:	11 05       	cpc	r17, r1
    7368:	a1 f1       	breq	.+104    	; 0x73d2 <__udivdi3+0x192>
    736a:	0e 2c       	mov	r0, r14
    736c:	04 c0       	rjmp	.+8      	; 0x7376 <__udivdi3+0x136>
    736e:	22 0c       	add	r2, r2
    7370:	33 1c       	adc	r3, r3
    7372:	44 1c       	adc	r4, r4
    7374:	55 1c       	adc	r5, r5
    7376:	0a 94       	dec	r0
    7378:	d2 f7       	brpl	.-12     	; 0x736e <__udivdi3+0x12e>
    737a:	a4 01       	movw	r20, r8
    737c:	93 01       	movw	r18, r6
    737e:	0e 2c       	mov	r0, r14
    7380:	04 c0       	rjmp	.+8      	; 0x738a <__udivdi3+0x14a>
    7382:	22 0f       	add	r18, r18
    7384:	33 1f       	adc	r19, r19
    7386:	44 1f       	adc	r20, r20
    7388:	55 1f       	adc	r21, r21
    738a:	0a 94       	dec	r0
    738c:	d2 f7       	brpl	.-12     	; 0x7382 <__udivdi3+0x142>
    738e:	80 e2       	ldi	r24, 0x20	; 32
    7390:	90 e0       	ldi	r25, 0x00	; 0
    7392:	8e 19       	sub	r24, r14
    7394:	9f 09       	sbc	r25, r15
    7396:	6d a4       	ldd	r6, Y+45	; 0x2d
    7398:	7e a4       	ldd	r7, Y+46	; 0x2e
    739a:	8f a4       	ldd	r8, Y+47	; 0x2f
    739c:	98 a8       	ldd	r9, Y+48	; 0x30
    739e:	04 c0       	rjmp	.+8      	; 0x73a8 <__udivdi3+0x168>
    73a0:	96 94       	lsr	r9
    73a2:	87 94       	ror	r8
    73a4:	77 94       	ror	r7
    73a6:	67 94       	ror	r6
    73a8:	8a 95       	dec	r24
    73aa:	d2 f7       	brpl	.-12     	; 0x73a0 <__udivdi3+0x160>
    73ac:	62 2a       	or	r6, r18
    73ae:	73 2a       	or	r7, r19
    73b0:	84 2a       	or	r8, r20
    73b2:	95 2a       	or	r9, r21
    73b4:	ad a4       	ldd	r10, Y+45	; 0x2d
    73b6:	be a4       	ldd	r11, Y+46	; 0x2e
    73b8:	cf a4       	ldd	r12, Y+47	; 0x2f
    73ba:	d8 a8       	ldd	r13, Y+48	; 0x30
    73bc:	04 c0       	rjmp	.+8      	; 0x73c6 <__udivdi3+0x186>
    73be:	aa 0c       	add	r10, r10
    73c0:	bb 1c       	adc	r11, r11
    73c2:	cc 1c       	adc	r12, r12
    73c4:	dd 1c       	adc	r13, r13
    73c6:	ea 94       	dec	r14
    73c8:	d2 f7       	brpl	.-12     	; 0x73be <__udivdi3+0x17e>
    73ca:	ad a6       	std	Y+45, r10	; 0x2d
    73cc:	be a6       	std	Y+46, r11	; 0x2e
    73ce:	cf a6       	std	Y+47, r12	; 0x2f
    73d0:	d8 aa       	std	Y+48, r13	; 0x30
    73d2:	62 01       	movw	r12, r4
    73d4:	ee 24       	eor	r14, r14
    73d6:	ff 24       	eor	r15, r15
    73d8:	cd aa       	std	Y+53, r12	; 0x35
    73da:	de aa       	std	Y+54, r13	; 0x36
    73dc:	ef aa       	std	Y+55, r14	; 0x37
    73de:	f8 ae       	std	Y+56, r15	; 0x38
    73e0:	92 01       	movw	r18, r4
    73e2:	81 01       	movw	r16, r2
    73e4:	20 70       	andi	r18, 0x00	; 0
    73e6:	30 70       	andi	r19, 0x00	; 0
    73e8:	09 af       	std	Y+57, r16	; 0x39
    73ea:	1a af       	std	Y+58, r17	; 0x3a
    73ec:	2b af       	std	Y+59, r18	; 0x3b
    73ee:	3c af       	std	Y+60, r19	; 0x3c
    73f0:	c4 01       	movw	r24, r8
    73f2:	b3 01       	movw	r22, r6
    73f4:	a7 01       	movw	r20, r14
    73f6:	96 01       	movw	r18, r12
    73f8:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    73fc:	7b 01       	movw	r14, r22
    73fe:	8c 01       	movw	r16, r24
    7400:	c4 01       	movw	r24, r8
    7402:	b3 01       	movw	r22, r6
    7404:	2d a9       	ldd	r18, Y+53	; 0x35
    7406:	3e a9       	ldd	r19, Y+54	; 0x36
    7408:	4f a9       	ldd	r20, Y+55	; 0x37
    740a:	58 ad       	ldd	r21, Y+56	; 0x38
    740c:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    7410:	c9 01       	movw	r24, r18
    7412:	da 01       	movw	r26, r20
    7414:	3c 01       	movw	r6, r24
    7416:	4d 01       	movw	r8, r26
    7418:	c4 01       	movw	r24, r8
    741a:	b3 01       	movw	r22, r6
    741c:	29 ad       	ldd	r18, Y+57	; 0x39
    741e:	3a ad       	ldd	r19, Y+58	; 0x3a
    7420:	4b ad       	ldd	r20, Y+59	; 0x3b
    7422:	5c ad       	ldd	r21, Y+60	; 0x3c
    7424:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <__mulsi3>
    7428:	9b 01       	movw	r18, r22
    742a:	ac 01       	movw	r20, r24
    742c:	87 01       	movw	r16, r14
    742e:	ff 24       	eor	r15, r15
    7430:	ee 24       	eor	r14, r14
    7432:	ad a4       	ldd	r10, Y+45	; 0x2d
    7434:	be a4       	ldd	r11, Y+46	; 0x2e
    7436:	cf a4       	ldd	r12, Y+47	; 0x2f
    7438:	d8 a8       	ldd	r13, Y+48	; 0x30
    743a:	c6 01       	movw	r24, r12
    743c:	aa 27       	eor	r26, r26
    743e:	bb 27       	eor	r27, r27
    7440:	57 01       	movw	r10, r14
    7442:	68 01       	movw	r12, r16
    7444:	a8 2a       	or	r10, r24
    7446:	b9 2a       	or	r11, r25
    7448:	ca 2a       	or	r12, r26
    744a:	db 2a       	or	r13, r27
    744c:	a2 16       	cp	r10, r18
    744e:	b3 06       	cpc	r11, r19
    7450:	c4 06       	cpc	r12, r20
    7452:	d5 06       	cpc	r13, r21
    7454:	e0 f4       	brcc	.+56     	; 0x748e <__udivdi3+0x24e>
    7456:	08 94       	sec
    7458:	61 08       	sbc	r6, r1
    745a:	71 08       	sbc	r7, r1
    745c:	81 08       	sbc	r8, r1
    745e:	91 08       	sbc	r9, r1
    7460:	a2 0c       	add	r10, r2
    7462:	b3 1c       	adc	r11, r3
    7464:	c4 1c       	adc	r12, r4
    7466:	d5 1c       	adc	r13, r5
    7468:	a2 14       	cp	r10, r2
    746a:	b3 04       	cpc	r11, r3
    746c:	c4 04       	cpc	r12, r4
    746e:	d5 04       	cpc	r13, r5
    7470:	70 f0       	brcs	.+28     	; 0x748e <__udivdi3+0x24e>
    7472:	a2 16       	cp	r10, r18
    7474:	b3 06       	cpc	r11, r19
    7476:	c4 06       	cpc	r12, r20
    7478:	d5 06       	cpc	r13, r21
    747a:	48 f4       	brcc	.+18     	; 0x748e <__udivdi3+0x24e>
    747c:	08 94       	sec
    747e:	61 08       	sbc	r6, r1
    7480:	71 08       	sbc	r7, r1
    7482:	81 08       	sbc	r8, r1
    7484:	91 08       	sbc	r9, r1
    7486:	a2 0c       	add	r10, r2
    7488:	b3 1c       	adc	r11, r3
    748a:	c4 1c       	adc	r12, r4
    748c:	d5 1c       	adc	r13, r5
    748e:	a2 1a       	sub	r10, r18
    7490:	b3 0a       	sbc	r11, r19
    7492:	c4 0a       	sbc	r12, r20
    7494:	d5 0a       	sbc	r13, r21
    7496:	c6 01       	movw	r24, r12
    7498:	b5 01       	movw	r22, r10
    749a:	2d a9       	ldd	r18, Y+53	; 0x35
    749c:	3e a9       	ldd	r19, Y+54	; 0x36
    749e:	4f a9       	ldd	r20, Y+55	; 0x37
    74a0:	58 ad       	ldd	r21, Y+56	; 0x38
    74a2:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    74a6:	7b 01       	movw	r14, r22
    74a8:	8c 01       	movw	r16, r24
    74aa:	c6 01       	movw	r24, r12
    74ac:	b5 01       	movw	r22, r10
    74ae:	2d a9       	ldd	r18, Y+53	; 0x35
    74b0:	3e a9       	ldd	r19, Y+54	; 0x36
    74b2:	4f a9       	ldd	r20, Y+55	; 0x37
    74b4:	58 ad       	ldd	r21, Y+56	; 0x38
    74b6:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    74ba:	c9 01       	movw	r24, r18
    74bc:	da 01       	movw	r26, r20
    74be:	5c 01       	movw	r10, r24
    74c0:	6d 01       	movw	r12, r26
    74c2:	c6 01       	movw	r24, r12
    74c4:	b5 01       	movw	r22, r10
    74c6:	29 ad       	ldd	r18, Y+57	; 0x39
    74c8:	3a ad       	ldd	r19, Y+58	; 0x3a
    74ca:	4b ad       	ldd	r20, Y+59	; 0x3b
    74cc:	5c ad       	ldd	r21, Y+60	; 0x3c
    74ce:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <__mulsi3>
    74d2:	9b 01       	movw	r18, r22
    74d4:	ac 01       	movw	r20, r24
    74d6:	87 01       	movw	r16, r14
    74d8:	ff 24       	eor	r15, r15
    74da:	ee 24       	eor	r14, r14
    74dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    74de:	9e a5       	ldd	r25, Y+46	; 0x2e
    74e0:	af a5       	ldd	r26, Y+47	; 0x2f
    74e2:	b8 a9       	ldd	r27, Y+48	; 0x30
    74e4:	a0 70       	andi	r26, 0x00	; 0
    74e6:	b0 70       	andi	r27, 0x00	; 0
    74e8:	e8 2a       	or	r14, r24
    74ea:	f9 2a       	or	r15, r25
    74ec:	0a 2b       	or	r16, r26
    74ee:	1b 2b       	or	r17, r27
    74f0:	e2 16       	cp	r14, r18
    74f2:	f3 06       	cpc	r15, r19
    74f4:	04 07       	cpc	r16, r20
    74f6:	15 07       	cpc	r17, r21
    74f8:	c0 f4       	brcc	.+48     	; 0x752a <__udivdi3+0x2ea>
    74fa:	08 94       	sec
    74fc:	a1 08       	sbc	r10, r1
    74fe:	b1 08       	sbc	r11, r1
    7500:	c1 08       	sbc	r12, r1
    7502:	d1 08       	sbc	r13, r1
    7504:	e2 0c       	add	r14, r2
    7506:	f3 1c       	adc	r15, r3
    7508:	04 1d       	adc	r16, r4
    750a:	15 1d       	adc	r17, r5
    750c:	e2 14       	cp	r14, r2
    750e:	f3 04       	cpc	r15, r3
    7510:	04 05       	cpc	r16, r4
    7512:	15 05       	cpc	r17, r5
    7514:	50 f0       	brcs	.+20     	; 0x752a <__udivdi3+0x2ea>
    7516:	e2 16       	cp	r14, r18
    7518:	f3 06       	cpc	r15, r19
    751a:	04 07       	cpc	r16, r20
    751c:	15 07       	cpc	r17, r21
    751e:	28 f4       	brcc	.+10     	; 0x752a <__udivdi3+0x2ea>
    7520:	08 94       	sec
    7522:	a1 08       	sbc	r10, r1
    7524:	b1 08       	sbc	r11, r1
    7526:	c1 08       	sbc	r12, r1
    7528:	d1 08       	sbc	r13, r1
    752a:	d3 01       	movw	r26, r6
    752c:	99 27       	eor	r25, r25
    752e:	88 27       	eor	r24, r24
    7530:	86 01       	movw	r16, r12
    7532:	75 01       	movw	r14, r10
    7534:	e8 2a       	or	r14, r24
    7536:	f9 2a       	or	r15, r25
    7538:	0a 2b       	or	r16, r26
    753a:	1b 2b       	or	r17, r27
    753c:	e9 aa       	std	Y+49, r14	; 0x31
    753e:	fa aa       	std	Y+50, r15	; 0x32
    7540:	0b ab       	std	Y+51, r16	; 0x33
    7542:	1c ab       	std	Y+52, r17	; 0x34
    7544:	cf c4       	rjmp	.+2462   	; 0x7ee4 <__udivdi3+0xca4>
    7546:	21 14       	cp	r2, r1
    7548:	31 04       	cpc	r3, r1
    754a:	41 04       	cpc	r4, r1
    754c:	51 04       	cpc	r5, r1
    754e:	71 f4       	brne	.+28     	; 0x756c <__udivdi3+0x32c>
    7550:	61 e0       	ldi	r22, 0x01	; 1
    7552:	70 e0       	ldi	r23, 0x00	; 0
    7554:	80 e0       	ldi	r24, 0x00	; 0
    7556:	90 e0       	ldi	r25, 0x00	; 0
    7558:	20 e0       	ldi	r18, 0x00	; 0
    755a:	30 e0       	ldi	r19, 0x00	; 0
    755c:	40 e0       	ldi	r20, 0x00	; 0
    755e:	50 e0       	ldi	r21, 0x00	; 0
    7560:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    7564:	c9 01       	movw	r24, r18
    7566:	da 01       	movw	r26, r20
    7568:	1c 01       	movw	r2, r24
    756a:	2d 01       	movw	r4, r26
    756c:	00 e0       	ldi	r16, 0x00	; 0
    756e:	20 16       	cp	r2, r16
    7570:	00 e0       	ldi	r16, 0x00	; 0
    7572:	30 06       	cpc	r3, r16
    7574:	01 e0       	ldi	r16, 0x01	; 1
    7576:	40 06       	cpc	r4, r16
    7578:	00 e0       	ldi	r16, 0x00	; 0
    757a:	50 06       	cpc	r5, r16
    757c:	88 f4       	brcc	.+34     	; 0x75a0 <__udivdi3+0x360>
    757e:	1f ef       	ldi	r17, 0xFF	; 255
    7580:	21 16       	cp	r2, r17
    7582:	31 04       	cpc	r3, r1
    7584:	41 04       	cpc	r4, r1
    7586:	51 04       	cpc	r5, r1
    7588:	31 f0       	breq	.+12     	; 0x7596 <__udivdi3+0x356>
    758a:	28 f0       	brcs	.+10     	; 0x7596 <__udivdi3+0x356>
    758c:	48 e0       	ldi	r20, 0x08	; 8
    758e:	50 e0       	ldi	r21, 0x00	; 0
    7590:	60 e0       	ldi	r22, 0x00	; 0
    7592:	70 e0       	ldi	r23, 0x00	; 0
    7594:	17 c0       	rjmp	.+46     	; 0x75c4 <__udivdi3+0x384>
    7596:	40 e0       	ldi	r20, 0x00	; 0
    7598:	50 e0       	ldi	r21, 0x00	; 0
    759a:	60 e0       	ldi	r22, 0x00	; 0
    759c:	70 e0       	ldi	r23, 0x00	; 0
    759e:	12 c0       	rjmp	.+36     	; 0x75c4 <__udivdi3+0x384>
    75a0:	20 e0       	ldi	r18, 0x00	; 0
    75a2:	22 16       	cp	r2, r18
    75a4:	20 e0       	ldi	r18, 0x00	; 0
    75a6:	32 06       	cpc	r3, r18
    75a8:	20 e0       	ldi	r18, 0x00	; 0
    75aa:	42 06       	cpc	r4, r18
    75ac:	21 e0       	ldi	r18, 0x01	; 1
    75ae:	52 06       	cpc	r5, r18
    75b0:	28 f0       	brcs	.+10     	; 0x75bc <__udivdi3+0x37c>
    75b2:	48 e1       	ldi	r20, 0x18	; 24
    75b4:	50 e0       	ldi	r21, 0x00	; 0
    75b6:	60 e0       	ldi	r22, 0x00	; 0
    75b8:	70 e0       	ldi	r23, 0x00	; 0
    75ba:	04 c0       	rjmp	.+8      	; 0x75c4 <__udivdi3+0x384>
    75bc:	40 e1       	ldi	r20, 0x10	; 16
    75be:	50 e0       	ldi	r21, 0x00	; 0
    75c0:	60 e0       	ldi	r22, 0x00	; 0
    75c2:	70 e0       	ldi	r23, 0x00	; 0
    75c4:	d2 01       	movw	r26, r4
    75c6:	c1 01       	movw	r24, r2
    75c8:	04 2e       	mov	r0, r20
    75ca:	04 c0       	rjmp	.+8      	; 0x75d4 <__udivdi3+0x394>
    75cc:	b6 95       	lsr	r27
    75ce:	a7 95       	ror	r26
    75d0:	97 95       	ror	r25
    75d2:	87 95       	ror	r24
    75d4:	0a 94       	dec	r0
    75d6:	d2 f7       	brpl	.-12     	; 0x75cc <__udivdi3+0x38c>
    75d8:	83 5d       	subi	r24, 0xD3	; 211
    75da:	9f 4d       	sbci	r25, 0xDF	; 223
    75dc:	dc 01       	movw	r26, r24
    75de:	2c 91       	ld	r18, X
    75e0:	e0 e2       	ldi	r30, 0x20	; 32
    75e2:	ee 2e       	mov	r14, r30
    75e4:	f1 2c       	mov	r15, r1
    75e6:	01 2d       	mov	r16, r1
    75e8:	11 2d       	mov	r17, r1
    75ea:	d8 01       	movw	r26, r16
    75ec:	c7 01       	movw	r24, r14
    75ee:	84 1b       	sub	r24, r20
    75f0:	95 0b       	sbc	r25, r21
    75f2:	a6 0b       	sbc	r26, r22
    75f4:	b7 0b       	sbc	r27, r23
    75f6:	82 1b       	sub	r24, r18
    75f8:	91 09       	sbc	r25, r1
    75fa:	a1 09       	sbc	r26, r1
    75fc:	b1 09       	sbc	r27, r1
    75fe:	00 97       	sbiw	r24, 0x00	; 0
    7600:	a1 05       	cpc	r26, r1
    7602:	b1 05       	cpc	r27, r1
    7604:	61 f4       	brne	.+24     	; 0x761e <__udivdi3+0x3de>
    7606:	64 01       	movw	r12, r8
    7608:	53 01       	movw	r10, r6
    760a:	a2 18       	sub	r10, r2
    760c:	b3 08       	sbc	r11, r3
    760e:	c4 08       	sbc	r12, r4
    7610:	d5 08       	sbc	r13, r5
    7612:	31 e0       	ldi	r19, 0x01	; 1
    7614:	63 2e       	mov	r6, r19
    7616:	71 2c       	mov	r7, r1
    7618:	81 2c       	mov	r8, r1
    761a:	91 2c       	mov	r9, r1
    761c:	1e c1       	rjmp	.+572    	; 0x785a <__udivdi3+0x61a>
    761e:	6f 96       	adiw	r28, 0x1f	; 31
    7620:	8f af       	std	Y+63, r24	; 0x3f
    7622:	6f 97       	sbiw	r28, 0x1f	; 31
    7624:	08 2e       	mov	r0, r24
    7626:	04 c0       	rjmp	.+8      	; 0x7630 <__udivdi3+0x3f0>
    7628:	22 0c       	add	r2, r2
    762a:	33 1c       	adc	r3, r3
    762c:	44 1c       	adc	r4, r4
    762e:	55 1c       	adc	r5, r5
    7630:	0a 94       	dec	r0
    7632:	d2 f7       	brpl	.-12     	; 0x7628 <__udivdi3+0x3e8>
    7634:	ee 2d       	mov	r30, r14
    7636:	e8 1b       	sub	r30, r24
    7638:	64 01       	movw	r12, r8
    763a:	53 01       	movw	r10, r6
    763c:	0e 2e       	mov	r0, r30
    763e:	04 c0       	rjmp	.+8      	; 0x7648 <__udivdi3+0x408>
    7640:	d6 94       	lsr	r13
    7642:	c7 94       	ror	r12
    7644:	b7 94       	ror	r11
    7646:	a7 94       	ror	r10
    7648:	0a 94       	dec	r0
    764a:	d2 f7       	brpl	.-12     	; 0x7640 <__udivdi3+0x400>
    764c:	a4 01       	movw	r20, r8
    764e:	93 01       	movw	r18, r6
    7650:	6f 96       	adiw	r28, 0x1f	; 31
    7652:	0f ac       	ldd	r0, Y+63	; 0x3f
    7654:	6f 97       	sbiw	r28, 0x1f	; 31
    7656:	04 c0       	rjmp	.+8      	; 0x7660 <__udivdi3+0x420>
    7658:	22 0f       	add	r18, r18
    765a:	33 1f       	adc	r19, r19
    765c:	44 1f       	adc	r20, r20
    765e:	55 1f       	adc	r21, r21
    7660:	0a 94       	dec	r0
    7662:	d2 f7       	brpl	.-12     	; 0x7658 <__udivdi3+0x418>
    7664:	6d a4       	ldd	r6, Y+45	; 0x2d
    7666:	7e a4       	ldd	r7, Y+46	; 0x2e
    7668:	8f a4       	ldd	r8, Y+47	; 0x2f
    766a:	98 a8       	ldd	r9, Y+48	; 0x30
    766c:	0e 2e       	mov	r0, r30
    766e:	04 c0       	rjmp	.+8      	; 0x7678 <__udivdi3+0x438>
    7670:	96 94       	lsr	r9
    7672:	87 94       	ror	r8
    7674:	77 94       	ror	r7
    7676:	67 94       	ror	r6
    7678:	0a 94       	dec	r0
    767a:	d2 f7       	brpl	.-12     	; 0x7670 <__udivdi3+0x430>
    767c:	84 01       	movw	r16, r8
    767e:	73 01       	movw	r14, r6
    7680:	e2 2a       	or	r14, r18
    7682:	f3 2a       	or	r15, r19
    7684:	04 2b       	or	r16, r20
    7686:	15 2b       	or	r17, r21
    7688:	e9 a6       	std	Y+41, r14	; 0x29
    768a:	fa a6       	std	Y+42, r15	; 0x2a
    768c:	0b a7       	std	Y+43, r16	; 0x2b
    768e:	1c a7       	std	Y+44, r17	; 0x2c
    7690:	32 01       	movw	r6, r4
    7692:	88 24       	eor	r8, r8
    7694:	99 24       	eor	r9, r9
    7696:	92 01       	movw	r18, r4
    7698:	81 01       	movw	r16, r2
    769a:	20 70       	andi	r18, 0x00	; 0
    769c:	30 70       	andi	r19, 0x00	; 0
    769e:	21 96       	adiw	r28, 0x01	; 1
    76a0:	0c af       	std	Y+60, r16	; 0x3c
    76a2:	1d af       	std	Y+61, r17	; 0x3d
    76a4:	2e af       	std	Y+62, r18	; 0x3e
    76a6:	3f af       	std	Y+63, r19	; 0x3f
    76a8:	21 97       	sbiw	r28, 0x01	; 1
    76aa:	c6 01       	movw	r24, r12
    76ac:	b5 01       	movw	r22, r10
    76ae:	a4 01       	movw	r20, r8
    76b0:	93 01       	movw	r18, r6
    76b2:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    76b6:	7b 01       	movw	r14, r22
    76b8:	8c 01       	movw	r16, r24
    76ba:	c6 01       	movw	r24, r12
    76bc:	b5 01       	movw	r22, r10
    76be:	a4 01       	movw	r20, r8
    76c0:	93 01       	movw	r18, r6
    76c2:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    76c6:	c9 01       	movw	r24, r18
    76c8:	da 01       	movw	r26, r20
    76ca:	25 96       	adiw	r28, 0x05	; 5
    76cc:	8c af       	std	Y+60, r24	; 0x3c
    76ce:	9d af       	std	Y+61, r25	; 0x3d
    76d0:	ae af       	std	Y+62, r26	; 0x3e
    76d2:	bf af       	std	Y+63, r27	; 0x3f
    76d4:	25 97       	sbiw	r28, 0x05	; 5
    76d6:	bc 01       	movw	r22, r24
    76d8:	cd 01       	movw	r24, r26
    76da:	21 96       	adiw	r28, 0x01	; 1
    76dc:	2c ad       	ldd	r18, Y+60	; 0x3c
    76de:	3d ad       	ldd	r19, Y+61	; 0x3d
    76e0:	4e ad       	ldd	r20, Y+62	; 0x3e
    76e2:	5f ad       	ldd	r21, Y+63	; 0x3f
    76e4:	21 97       	sbiw	r28, 0x01	; 1
    76e6:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <__mulsi3>
    76ea:	9b 01       	movw	r18, r22
    76ec:	ac 01       	movw	r20, r24
    76ee:	87 01       	movw	r16, r14
    76f0:	ff 24       	eor	r15, r15
    76f2:	ee 24       	eor	r14, r14
    76f4:	a9 a4       	ldd	r10, Y+41	; 0x29
    76f6:	ba a4       	ldd	r11, Y+42	; 0x2a
    76f8:	cb a4       	ldd	r12, Y+43	; 0x2b
    76fa:	dc a4       	ldd	r13, Y+44	; 0x2c
    76fc:	c6 01       	movw	r24, r12
    76fe:	aa 27       	eor	r26, r26
    7700:	bb 27       	eor	r27, r27
    7702:	5c 01       	movw	r10, r24
    7704:	6d 01       	movw	r12, r26
    7706:	ae 28       	or	r10, r14
    7708:	bf 28       	or	r11, r15
    770a:	c0 2a       	or	r12, r16
    770c:	d1 2a       	or	r13, r17
    770e:	a2 16       	cp	r10, r18
    7710:	b3 06       	cpc	r11, r19
    7712:	c4 06       	cpc	r12, r20
    7714:	d5 06       	cpc	r13, r21
    7716:	60 f5       	brcc	.+88     	; 0x7770 <__udivdi3+0x530>
    7718:	25 96       	adiw	r28, 0x05	; 5
    771a:	6c ad       	ldd	r22, Y+60	; 0x3c
    771c:	7d ad       	ldd	r23, Y+61	; 0x3d
    771e:	8e ad       	ldd	r24, Y+62	; 0x3e
    7720:	9f ad       	ldd	r25, Y+63	; 0x3f
    7722:	25 97       	sbiw	r28, 0x05	; 5
    7724:	61 50       	subi	r22, 0x01	; 1
    7726:	70 40       	sbci	r23, 0x00	; 0
    7728:	80 40       	sbci	r24, 0x00	; 0
    772a:	90 40       	sbci	r25, 0x00	; 0
    772c:	25 96       	adiw	r28, 0x05	; 5
    772e:	6c af       	std	Y+60, r22	; 0x3c
    7730:	7d af       	std	Y+61, r23	; 0x3d
    7732:	8e af       	std	Y+62, r24	; 0x3e
    7734:	9f af       	std	Y+63, r25	; 0x3f
    7736:	25 97       	sbiw	r28, 0x05	; 5
    7738:	a2 0c       	add	r10, r2
    773a:	b3 1c       	adc	r11, r3
    773c:	c4 1c       	adc	r12, r4
    773e:	d5 1c       	adc	r13, r5
    7740:	a2 14       	cp	r10, r2
    7742:	b3 04       	cpc	r11, r3
    7744:	c4 04       	cpc	r12, r4
    7746:	d5 04       	cpc	r13, r5
    7748:	98 f0       	brcs	.+38     	; 0x7770 <__udivdi3+0x530>
    774a:	a2 16       	cp	r10, r18
    774c:	b3 06       	cpc	r11, r19
    774e:	c4 06       	cpc	r12, r20
    7750:	d5 06       	cpc	r13, r21
    7752:	70 f4       	brcc	.+28     	; 0x7770 <__udivdi3+0x530>
    7754:	61 50       	subi	r22, 0x01	; 1
    7756:	70 40       	sbci	r23, 0x00	; 0
    7758:	80 40       	sbci	r24, 0x00	; 0
    775a:	90 40       	sbci	r25, 0x00	; 0
    775c:	25 96       	adiw	r28, 0x05	; 5
    775e:	6c af       	std	Y+60, r22	; 0x3c
    7760:	7d af       	std	Y+61, r23	; 0x3d
    7762:	8e af       	std	Y+62, r24	; 0x3e
    7764:	9f af       	std	Y+63, r25	; 0x3f
    7766:	25 97       	sbiw	r28, 0x05	; 5
    7768:	a2 0c       	add	r10, r2
    776a:	b3 1c       	adc	r11, r3
    776c:	c4 1c       	adc	r12, r4
    776e:	d5 1c       	adc	r13, r5
    7770:	a2 1a       	sub	r10, r18
    7772:	b3 0a       	sbc	r11, r19
    7774:	c4 0a       	sbc	r12, r20
    7776:	d5 0a       	sbc	r13, r21
    7778:	c6 01       	movw	r24, r12
    777a:	b5 01       	movw	r22, r10
    777c:	a4 01       	movw	r20, r8
    777e:	93 01       	movw	r18, r6
    7780:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    7784:	7b 01       	movw	r14, r22
    7786:	8c 01       	movw	r16, r24
    7788:	c6 01       	movw	r24, r12
    778a:	b5 01       	movw	r22, r10
    778c:	a4 01       	movw	r20, r8
    778e:	93 01       	movw	r18, r6
    7790:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    7794:	c9 01       	movw	r24, r18
    7796:	da 01       	movw	r26, r20
    7798:	3c 01       	movw	r6, r24
    779a:	4d 01       	movw	r8, r26
    779c:	c4 01       	movw	r24, r8
    779e:	b3 01       	movw	r22, r6
    77a0:	21 96       	adiw	r28, 0x01	; 1
    77a2:	2c ad       	ldd	r18, Y+60	; 0x3c
    77a4:	3d ad       	ldd	r19, Y+61	; 0x3d
    77a6:	4e ad       	ldd	r20, Y+62	; 0x3e
    77a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    77aa:	21 97       	sbiw	r28, 0x01	; 1
    77ac:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <__mulsi3>
    77b0:	9b 01       	movw	r18, r22
    77b2:	ac 01       	movw	r20, r24
    77b4:	87 01       	movw	r16, r14
    77b6:	ff 24       	eor	r15, r15
    77b8:	ee 24       	eor	r14, r14
    77ba:	89 a5       	ldd	r24, Y+41	; 0x29
    77bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    77be:	ab a5       	ldd	r26, Y+43	; 0x2b
    77c0:	bc a5       	ldd	r27, Y+44	; 0x2c
    77c2:	a0 70       	andi	r26, 0x00	; 0
    77c4:	b0 70       	andi	r27, 0x00	; 0
    77c6:	57 01       	movw	r10, r14
    77c8:	68 01       	movw	r12, r16
    77ca:	a8 2a       	or	r10, r24
    77cc:	b9 2a       	or	r11, r25
    77ce:	ca 2a       	or	r12, r26
    77d0:	db 2a       	or	r13, r27
    77d2:	a2 16       	cp	r10, r18
    77d4:	b3 06       	cpc	r11, r19
    77d6:	c4 06       	cpc	r12, r20
    77d8:	d5 06       	cpc	r13, r21
    77da:	e0 f4       	brcc	.+56     	; 0x7814 <__udivdi3+0x5d4>
    77dc:	08 94       	sec
    77de:	61 08       	sbc	r6, r1
    77e0:	71 08       	sbc	r7, r1
    77e2:	81 08       	sbc	r8, r1
    77e4:	91 08       	sbc	r9, r1
    77e6:	a2 0c       	add	r10, r2
    77e8:	b3 1c       	adc	r11, r3
    77ea:	c4 1c       	adc	r12, r4
    77ec:	d5 1c       	adc	r13, r5
    77ee:	a2 14       	cp	r10, r2
    77f0:	b3 04       	cpc	r11, r3
    77f2:	c4 04       	cpc	r12, r4
    77f4:	d5 04       	cpc	r13, r5
    77f6:	70 f0       	brcs	.+28     	; 0x7814 <__udivdi3+0x5d4>
    77f8:	a2 16       	cp	r10, r18
    77fa:	b3 06       	cpc	r11, r19
    77fc:	c4 06       	cpc	r12, r20
    77fe:	d5 06       	cpc	r13, r21
    7800:	48 f4       	brcc	.+18     	; 0x7814 <__udivdi3+0x5d4>
    7802:	08 94       	sec
    7804:	61 08       	sbc	r6, r1
    7806:	71 08       	sbc	r7, r1
    7808:	81 08       	sbc	r8, r1
    780a:	91 08       	sbc	r9, r1
    780c:	a2 0c       	add	r10, r2
    780e:	b3 1c       	adc	r11, r3
    7810:	c4 1c       	adc	r12, r4
    7812:	d5 1c       	adc	r13, r5
    7814:	8d a5       	ldd	r24, Y+45	; 0x2d
    7816:	9e a5       	ldd	r25, Y+46	; 0x2e
    7818:	af a5       	ldd	r26, Y+47	; 0x2f
    781a:	b8 a9       	ldd	r27, Y+48	; 0x30
    781c:	6f 96       	adiw	r28, 0x1f	; 31
    781e:	0f ac       	ldd	r0, Y+63	; 0x3f
    7820:	6f 97       	sbiw	r28, 0x1f	; 31
    7822:	04 c0       	rjmp	.+8      	; 0x782c <__udivdi3+0x5ec>
    7824:	88 0f       	add	r24, r24
    7826:	99 1f       	adc	r25, r25
    7828:	aa 1f       	adc	r26, r26
    782a:	bb 1f       	adc	r27, r27
    782c:	0a 94       	dec	r0
    782e:	d2 f7       	brpl	.-12     	; 0x7824 <__udivdi3+0x5e4>
    7830:	8d a7       	std	Y+45, r24	; 0x2d
    7832:	9e a7       	std	Y+46, r25	; 0x2e
    7834:	af a7       	std	Y+47, r26	; 0x2f
    7836:	b8 ab       	std	Y+48, r27	; 0x30
    7838:	a2 1a       	sub	r10, r18
    783a:	b3 0a       	sbc	r11, r19
    783c:	c4 0a       	sbc	r12, r20
    783e:	d5 0a       	sbc	r13, r21
    7840:	25 96       	adiw	r28, 0x05	; 5
    7842:	ec ac       	ldd	r14, Y+60	; 0x3c
    7844:	fd ac       	ldd	r15, Y+61	; 0x3d
    7846:	0e ad       	ldd	r16, Y+62	; 0x3e
    7848:	1f ad       	ldd	r17, Y+63	; 0x3f
    784a:	25 97       	sbiw	r28, 0x05	; 5
    784c:	d7 01       	movw	r26, r14
    784e:	99 27       	eor	r25, r25
    7850:	88 27       	eor	r24, r24
    7852:	68 2a       	or	r6, r24
    7854:	79 2a       	or	r7, r25
    7856:	8a 2a       	or	r8, r26
    7858:	9b 2a       	or	r9, r27
    785a:	82 01       	movw	r16, r4
    785c:	22 27       	eor	r18, r18
    785e:	33 27       	eor	r19, r19
    7860:	29 96       	adiw	r28, 0x09	; 9
    7862:	0c af       	std	Y+60, r16	; 0x3c
    7864:	1d af       	std	Y+61, r17	; 0x3d
    7866:	2e af       	std	Y+62, r18	; 0x3e
    7868:	3f af       	std	Y+63, r19	; 0x3f
    786a:	29 97       	sbiw	r28, 0x09	; 9
    786c:	a2 01       	movw	r20, r4
    786e:	91 01       	movw	r18, r2
    7870:	40 70       	andi	r20, 0x00	; 0
    7872:	50 70       	andi	r21, 0x00	; 0
    7874:	2d 96       	adiw	r28, 0x0d	; 13
    7876:	2c af       	std	Y+60, r18	; 0x3c
    7878:	3d af       	std	Y+61, r19	; 0x3d
    787a:	4e af       	std	Y+62, r20	; 0x3e
    787c:	5f af       	std	Y+63, r21	; 0x3f
    787e:	2d 97       	sbiw	r28, 0x0d	; 13
    7880:	c6 01       	movw	r24, r12
    7882:	b5 01       	movw	r22, r10
    7884:	29 96       	adiw	r28, 0x09	; 9
    7886:	2c ad       	ldd	r18, Y+60	; 0x3c
    7888:	3d ad       	ldd	r19, Y+61	; 0x3d
    788a:	4e ad       	ldd	r20, Y+62	; 0x3e
    788c:	5f ad       	ldd	r21, Y+63	; 0x3f
    788e:	29 97       	sbiw	r28, 0x09	; 9
    7890:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    7894:	7b 01       	movw	r14, r22
    7896:	8c 01       	movw	r16, r24
    7898:	c6 01       	movw	r24, r12
    789a:	b5 01       	movw	r22, r10
    789c:	29 96       	adiw	r28, 0x09	; 9
    789e:	2c ad       	ldd	r18, Y+60	; 0x3c
    78a0:	3d ad       	ldd	r19, Y+61	; 0x3d
    78a2:	4e ad       	ldd	r20, Y+62	; 0x3e
    78a4:	5f ad       	ldd	r21, Y+63	; 0x3f
    78a6:	29 97       	sbiw	r28, 0x09	; 9
    78a8:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    78ac:	c9 01       	movw	r24, r18
    78ae:	da 01       	movw	r26, r20
    78b0:	61 96       	adiw	r28, 0x11	; 17
    78b2:	8c af       	std	Y+60, r24	; 0x3c
    78b4:	9d af       	std	Y+61, r25	; 0x3d
    78b6:	ae af       	std	Y+62, r26	; 0x3e
    78b8:	bf af       	std	Y+63, r27	; 0x3f
    78ba:	61 97       	sbiw	r28, 0x11	; 17
    78bc:	bc 01       	movw	r22, r24
    78be:	cd 01       	movw	r24, r26
    78c0:	2d 96       	adiw	r28, 0x0d	; 13
    78c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    78c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    78c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    78c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    78ca:	2d 97       	sbiw	r28, 0x0d	; 13
    78cc:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <__mulsi3>
    78d0:	9b 01       	movw	r18, r22
    78d2:	ac 01       	movw	r20, r24
    78d4:	87 01       	movw	r16, r14
    78d6:	ff 24       	eor	r15, r15
    78d8:	ee 24       	eor	r14, r14
    78da:	ad a4       	ldd	r10, Y+45	; 0x2d
    78dc:	be a4       	ldd	r11, Y+46	; 0x2e
    78de:	cf a4       	ldd	r12, Y+47	; 0x2f
    78e0:	d8 a8       	ldd	r13, Y+48	; 0x30
    78e2:	c6 01       	movw	r24, r12
    78e4:	aa 27       	eor	r26, r26
    78e6:	bb 27       	eor	r27, r27
    78e8:	57 01       	movw	r10, r14
    78ea:	68 01       	movw	r12, r16
    78ec:	a8 2a       	or	r10, r24
    78ee:	b9 2a       	or	r11, r25
    78f0:	ca 2a       	or	r12, r26
    78f2:	db 2a       	or	r13, r27
    78f4:	a2 16       	cp	r10, r18
    78f6:	b3 06       	cpc	r11, r19
    78f8:	c4 06       	cpc	r12, r20
    78fa:	d5 06       	cpc	r13, r21
    78fc:	60 f5       	brcc	.+88     	; 0x7956 <__udivdi3+0x716>
    78fe:	61 96       	adiw	r28, 0x11	; 17
    7900:	6c ad       	ldd	r22, Y+60	; 0x3c
    7902:	7d ad       	ldd	r23, Y+61	; 0x3d
    7904:	8e ad       	ldd	r24, Y+62	; 0x3e
    7906:	9f ad       	ldd	r25, Y+63	; 0x3f
    7908:	61 97       	sbiw	r28, 0x11	; 17
    790a:	61 50       	subi	r22, 0x01	; 1
    790c:	70 40       	sbci	r23, 0x00	; 0
    790e:	80 40       	sbci	r24, 0x00	; 0
    7910:	90 40       	sbci	r25, 0x00	; 0
    7912:	61 96       	adiw	r28, 0x11	; 17
    7914:	6c af       	std	Y+60, r22	; 0x3c
    7916:	7d af       	std	Y+61, r23	; 0x3d
    7918:	8e af       	std	Y+62, r24	; 0x3e
    791a:	9f af       	std	Y+63, r25	; 0x3f
    791c:	61 97       	sbiw	r28, 0x11	; 17
    791e:	a2 0c       	add	r10, r2
    7920:	b3 1c       	adc	r11, r3
    7922:	c4 1c       	adc	r12, r4
    7924:	d5 1c       	adc	r13, r5
    7926:	a2 14       	cp	r10, r2
    7928:	b3 04       	cpc	r11, r3
    792a:	c4 04       	cpc	r12, r4
    792c:	d5 04       	cpc	r13, r5
    792e:	98 f0       	brcs	.+38     	; 0x7956 <__udivdi3+0x716>
    7930:	a2 16       	cp	r10, r18
    7932:	b3 06       	cpc	r11, r19
    7934:	c4 06       	cpc	r12, r20
    7936:	d5 06       	cpc	r13, r21
    7938:	70 f4       	brcc	.+28     	; 0x7956 <__udivdi3+0x716>
    793a:	61 50       	subi	r22, 0x01	; 1
    793c:	70 40       	sbci	r23, 0x00	; 0
    793e:	80 40       	sbci	r24, 0x00	; 0
    7940:	90 40       	sbci	r25, 0x00	; 0
    7942:	61 96       	adiw	r28, 0x11	; 17
    7944:	6c af       	std	Y+60, r22	; 0x3c
    7946:	7d af       	std	Y+61, r23	; 0x3d
    7948:	8e af       	std	Y+62, r24	; 0x3e
    794a:	9f af       	std	Y+63, r25	; 0x3f
    794c:	61 97       	sbiw	r28, 0x11	; 17
    794e:	a2 0c       	add	r10, r2
    7950:	b3 1c       	adc	r11, r3
    7952:	c4 1c       	adc	r12, r4
    7954:	d5 1c       	adc	r13, r5
    7956:	a2 1a       	sub	r10, r18
    7958:	b3 0a       	sbc	r11, r19
    795a:	c4 0a       	sbc	r12, r20
    795c:	d5 0a       	sbc	r13, r21
    795e:	c6 01       	movw	r24, r12
    7960:	b5 01       	movw	r22, r10
    7962:	29 96       	adiw	r28, 0x09	; 9
    7964:	2c ad       	ldd	r18, Y+60	; 0x3c
    7966:	3d ad       	ldd	r19, Y+61	; 0x3d
    7968:	4e ad       	ldd	r20, Y+62	; 0x3e
    796a:	5f ad       	ldd	r21, Y+63	; 0x3f
    796c:	29 97       	sbiw	r28, 0x09	; 9
    796e:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    7972:	7b 01       	movw	r14, r22
    7974:	8c 01       	movw	r16, r24
    7976:	c6 01       	movw	r24, r12
    7978:	b5 01       	movw	r22, r10
    797a:	29 96       	adiw	r28, 0x09	; 9
    797c:	2c ad       	ldd	r18, Y+60	; 0x3c
    797e:	3d ad       	ldd	r19, Y+61	; 0x3d
    7980:	4e ad       	ldd	r20, Y+62	; 0x3e
    7982:	5f ad       	ldd	r21, Y+63	; 0x3f
    7984:	29 97       	sbiw	r28, 0x09	; 9
    7986:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    798a:	c9 01       	movw	r24, r18
    798c:	da 01       	movw	r26, r20
    798e:	5c 01       	movw	r10, r24
    7990:	6d 01       	movw	r12, r26
    7992:	c6 01       	movw	r24, r12
    7994:	b5 01       	movw	r22, r10
    7996:	2d 96       	adiw	r28, 0x0d	; 13
    7998:	2c ad       	ldd	r18, Y+60	; 0x3c
    799a:	3d ad       	ldd	r19, Y+61	; 0x3d
    799c:	4e ad       	ldd	r20, Y+62	; 0x3e
    799e:	5f ad       	ldd	r21, Y+63	; 0x3f
    79a0:	2d 97       	sbiw	r28, 0x0d	; 13
    79a2:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <__mulsi3>
    79a6:	9b 01       	movw	r18, r22
    79a8:	ac 01       	movw	r20, r24
    79aa:	87 01       	movw	r16, r14
    79ac:	ff 24       	eor	r15, r15
    79ae:	ee 24       	eor	r14, r14
    79b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    79b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    79b4:	af a5       	ldd	r26, Y+47	; 0x2f
    79b6:	b8 a9       	ldd	r27, Y+48	; 0x30
    79b8:	a0 70       	andi	r26, 0x00	; 0
    79ba:	b0 70       	andi	r27, 0x00	; 0
    79bc:	e8 2a       	or	r14, r24
    79be:	f9 2a       	or	r15, r25
    79c0:	0a 2b       	or	r16, r26
    79c2:	1b 2b       	or	r17, r27
    79c4:	e2 16       	cp	r14, r18
    79c6:	f3 06       	cpc	r15, r19
    79c8:	04 07       	cpc	r16, r20
    79ca:	15 07       	cpc	r17, r21
    79cc:	c0 f4       	brcc	.+48     	; 0x79fe <__udivdi3+0x7be>
    79ce:	08 94       	sec
    79d0:	a1 08       	sbc	r10, r1
    79d2:	b1 08       	sbc	r11, r1
    79d4:	c1 08       	sbc	r12, r1
    79d6:	d1 08       	sbc	r13, r1
    79d8:	e2 0c       	add	r14, r2
    79da:	f3 1c       	adc	r15, r3
    79dc:	04 1d       	adc	r16, r4
    79de:	15 1d       	adc	r17, r5
    79e0:	e2 14       	cp	r14, r2
    79e2:	f3 04       	cpc	r15, r3
    79e4:	04 05       	cpc	r16, r4
    79e6:	15 05       	cpc	r17, r5
    79e8:	50 f0       	brcs	.+20     	; 0x79fe <__udivdi3+0x7be>
    79ea:	e2 16       	cp	r14, r18
    79ec:	f3 06       	cpc	r15, r19
    79ee:	04 07       	cpc	r16, r20
    79f0:	15 07       	cpc	r17, r21
    79f2:	28 f4       	brcc	.+10     	; 0x79fe <__udivdi3+0x7be>
    79f4:	08 94       	sec
    79f6:	a1 08       	sbc	r10, r1
    79f8:	b1 08       	sbc	r11, r1
    79fa:	c1 08       	sbc	r12, r1
    79fc:	d1 08       	sbc	r13, r1
    79fe:	61 96       	adiw	r28, 0x11	; 17
    7a00:	ec ac       	ldd	r14, Y+60	; 0x3c
    7a02:	fd ac       	ldd	r15, Y+61	; 0x3d
    7a04:	0e ad       	ldd	r16, Y+62	; 0x3e
    7a06:	1f ad       	ldd	r17, Y+63	; 0x3f
    7a08:	61 97       	sbiw	r28, 0x11	; 17
    7a0a:	d7 01       	movw	r26, r14
    7a0c:	99 27       	eor	r25, r25
    7a0e:	88 27       	eor	r24, r24
    7a10:	96 01       	movw	r18, r12
    7a12:	85 01       	movw	r16, r10
    7a14:	08 2b       	or	r16, r24
    7a16:	19 2b       	or	r17, r25
    7a18:	2a 2b       	or	r18, r26
    7a1a:	3b 2b       	or	r19, r27
    7a1c:	09 ab       	std	Y+49, r16	; 0x31
    7a1e:	1a ab       	std	Y+50, r17	; 0x32
    7a20:	2b ab       	std	Y+51, r18	; 0x33
    7a22:	3c ab       	std	Y+52, r19	; 0x34
    7a24:	62 c2       	rjmp	.+1220   	; 0x7eea <__udivdi3+0xcaa>
    7a26:	6e 14       	cp	r6, r14
    7a28:	7f 04       	cpc	r7, r15
    7a2a:	80 06       	cpc	r8, r16
    7a2c:	91 06       	cpc	r9, r17
    7a2e:	08 f4       	brcc	.+2      	; 0x7a32 <__udivdi3+0x7f2>
    7a30:	51 c2       	rjmp	.+1186   	; 0x7ed4 <__udivdi3+0xc94>
    7a32:	20 e0       	ldi	r18, 0x00	; 0
    7a34:	e2 16       	cp	r14, r18
    7a36:	20 e0       	ldi	r18, 0x00	; 0
    7a38:	f2 06       	cpc	r15, r18
    7a3a:	21 e0       	ldi	r18, 0x01	; 1
    7a3c:	02 07       	cpc	r16, r18
    7a3e:	20 e0       	ldi	r18, 0x00	; 0
    7a40:	12 07       	cpc	r17, r18
    7a42:	88 f4       	brcc	.+34     	; 0x7a66 <__udivdi3+0x826>
    7a44:	3f ef       	ldi	r19, 0xFF	; 255
    7a46:	e3 16       	cp	r14, r19
    7a48:	f1 04       	cpc	r15, r1
    7a4a:	01 05       	cpc	r16, r1
    7a4c:	11 05       	cpc	r17, r1
    7a4e:	31 f0       	breq	.+12     	; 0x7a5c <__udivdi3+0x81c>
    7a50:	28 f0       	brcs	.+10     	; 0x7a5c <__udivdi3+0x81c>
    7a52:	48 e0       	ldi	r20, 0x08	; 8
    7a54:	50 e0       	ldi	r21, 0x00	; 0
    7a56:	60 e0       	ldi	r22, 0x00	; 0
    7a58:	70 e0       	ldi	r23, 0x00	; 0
    7a5a:	17 c0       	rjmp	.+46     	; 0x7a8a <__udivdi3+0x84a>
    7a5c:	40 e0       	ldi	r20, 0x00	; 0
    7a5e:	50 e0       	ldi	r21, 0x00	; 0
    7a60:	60 e0       	ldi	r22, 0x00	; 0
    7a62:	70 e0       	ldi	r23, 0x00	; 0
    7a64:	12 c0       	rjmp	.+36     	; 0x7a8a <__udivdi3+0x84a>
    7a66:	40 e0       	ldi	r20, 0x00	; 0
    7a68:	e4 16       	cp	r14, r20
    7a6a:	40 e0       	ldi	r20, 0x00	; 0
    7a6c:	f4 06       	cpc	r15, r20
    7a6e:	40 e0       	ldi	r20, 0x00	; 0
    7a70:	04 07       	cpc	r16, r20
    7a72:	41 e0       	ldi	r20, 0x01	; 1
    7a74:	14 07       	cpc	r17, r20
    7a76:	28 f0       	brcs	.+10     	; 0x7a82 <__udivdi3+0x842>
    7a78:	48 e1       	ldi	r20, 0x18	; 24
    7a7a:	50 e0       	ldi	r21, 0x00	; 0
    7a7c:	60 e0       	ldi	r22, 0x00	; 0
    7a7e:	70 e0       	ldi	r23, 0x00	; 0
    7a80:	04 c0       	rjmp	.+8      	; 0x7a8a <__udivdi3+0x84a>
    7a82:	40 e1       	ldi	r20, 0x10	; 16
    7a84:	50 e0       	ldi	r21, 0x00	; 0
    7a86:	60 e0       	ldi	r22, 0x00	; 0
    7a88:	70 e0       	ldi	r23, 0x00	; 0
    7a8a:	d8 01       	movw	r26, r16
    7a8c:	c7 01       	movw	r24, r14
    7a8e:	04 2e       	mov	r0, r20
    7a90:	04 c0       	rjmp	.+8      	; 0x7a9a <__udivdi3+0x85a>
    7a92:	b6 95       	lsr	r27
    7a94:	a7 95       	ror	r26
    7a96:	97 95       	ror	r25
    7a98:	87 95       	ror	r24
    7a9a:	0a 94       	dec	r0
    7a9c:	d2 f7       	brpl	.-12     	; 0x7a92 <__udivdi3+0x852>
    7a9e:	83 5d       	subi	r24, 0xD3	; 211
    7aa0:	9f 4d       	sbci	r25, 0xDF	; 223
    7aa2:	dc 01       	movw	r26, r24
    7aa4:	2c 91       	ld	r18, X
    7aa6:	30 e2       	ldi	r19, 0x20	; 32
    7aa8:	a3 2e       	mov	r10, r19
    7aaa:	b1 2c       	mov	r11, r1
    7aac:	c1 2c       	mov	r12, r1
    7aae:	d1 2c       	mov	r13, r1
    7ab0:	d6 01       	movw	r26, r12
    7ab2:	c5 01       	movw	r24, r10
    7ab4:	84 1b       	sub	r24, r20
    7ab6:	95 0b       	sbc	r25, r21
    7ab8:	a6 0b       	sbc	r26, r22
    7aba:	b7 0b       	sbc	r27, r23
    7abc:	82 1b       	sub	r24, r18
    7abe:	91 09       	sbc	r25, r1
    7ac0:	a1 09       	sbc	r26, r1
    7ac2:	b1 09       	sbc	r27, r1
    7ac4:	00 97       	sbiw	r24, 0x00	; 0
    7ac6:	a1 05       	cpc	r26, r1
    7ac8:	b1 05       	cpc	r27, r1
    7aca:	89 f4       	brne	.+34     	; 0x7aee <__udivdi3+0x8ae>
    7acc:	e6 14       	cp	r14, r6
    7ace:	f7 04       	cpc	r15, r7
    7ad0:	08 05       	cpc	r16, r8
    7ad2:	19 05       	cpc	r17, r9
    7ad4:	08 f4       	brcc	.+2      	; 0x7ad8 <__udivdi3+0x898>
    7ad6:	f2 c1       	rjmp	.+996    	; 0x7ebc <__udivdi3+0xc7c>
    7ad8:	6d a4       	ldd	r6, Y+45	; 0x2d
    7ada:	7e a4       	ldd	r7, Y+46	; 0x2e
    7adc:	8f a4       	ldd	r8, Y+47	; 0x2f
    7ade:	98 a8       	ldd	r9, Y+48	; 0x30
    7ae0:	62 14       	cp	r6, r2
    7ae2:	73 04       	cpc	r7, r3
    7ae4:	84 04       	cpc	r8, r4
    7ae6:	95 04       	cpc	r9, r5
    7ae8:	08 f0       	brcs	.+2      	; 0x7aec <__udivdi3+0x8ac>
    7aea:	e8 c1       	rjmp	.+976    	; 0x7ebc <__udivdi3+0xc7c>
    7aec:	f3 c1       	rjmp	.+998    	; 0x7ed4 <__udivdi3+0xc94>
    7aee:	6e 96       	adiw	r28, 0x1e	; 30
    7af0:	8f af       	std	Y+63, r24	; 0x3f
    7af2:	6e 97       	sbiw	r28, 0x1e	; 30
    7af4:	08 2e       	mov	r0, r24
    7af6:	04 c0       	rjmp	.+8      	; 0x7b00 <__udivdi3+0x8c0>
    7af8:	ee 0c       	add	r14, r14
    7afa:	ff 1c       	adc	r15, r15
    7afc:	00 1f       	adc	r16, r16
    7afe:	11 1f       	adc	r17, r17
    7b00:	0a 94       	dec	r0
    7b02:	d2 f7       	brpl	.-12     	; 0x7af8 <__udivdi3+0x8b8>
    7b04:	6a 2d       	mov	r22, r10
    7b06:	68 1b       	sub	r22, r24
    7b08:	d2 01       	movw	r26, r4
    7b0a:	c1 01       	movw	r24, r2
    7b0c:	06 2e       	mov	r0, r22
    7b0e:	04 c0       	rjmp	.+8      	; 0x7b18 <__udivdi3+0x8d8>
    7b10:	b6 95       	lsr	r27
    7b12:	a7 95       	ror	r26
    7b14:	97 95       	ror	r25
    7b16:	87 95       	ror	r24
    7b18:	0a 94       	dec	r0
    7b1a:	d2 f7       	brpl	.-12     	; 0x7b10 <__udivdi3+0x8d0>
    7b1c:	5c 01       	movw	r10, r24
    7b1e:	6d 01       	movw	r12, r26
    7b20:	ae 28       	or	r10, r14
    7b22:	bf 28       	or	r11, r15
    7b24:	c0 2a       	or	r12, r16
    7b26:	d1 2a       	or	r13, r17
    7b28:	ad a2       	std	Y+37, r10	; 0x25
    7b2a:	be a2       	std	Y+38, r11	; 0x26
    7b2c:	cf a2       	std	Y+39, r12	; 0x27
    7b2e:	d8 a6       	std	Y+40, r13	; 0x28
    7b30:	72 01       	movw	r14, r4
    7b32:	61 01       	movw	r12, r2
    7b34:	6e 96       	adiw	r28, 0x1e	; 30
    7b36:	0f ac       	ldd	r0, Y+63	; 0x3f
    7b38:	6e 97       	sbiw	r28, 0x1e	; 30
    7b3a:	04 c0       	rjmp	.+8      	; 0x7b44 <__udivdi3+0x904>
    7b3c:	cc 0c       	add	r12, r12
    7b3e:	dd 1c       	adc	r13, r13
    7b40:	ee 1c       	adc	r14, r14
    7b42:	ff 1c       	adc	r15, r15
    7b44:	0a 94       	dec	r0
    7b46:	d2 f7       	brpl	.-12     	; 0x7b3c <__udivdi3+0x8fc>
    7b48:	c9 a2       	std	Y+33, r12	; 0x21
    7b4a:	da a2       	std	Y+34, r13	; 0x22
    7b4c:	eb a2       	std	Y+35, r14	; 0x23
    7b4e:	fc a2       	std	Y+36, r15	; 0x24
    7b50:	64 01       	movw	r12, r8
    7b52:	53 01       	movw	r10, r6
    7b54:	06 2e       	mov	r0, r22
    7b56:	04 c0       	rjmp	.+8      	; 0x7b60 <__udivdi3+0x920>
    7b58:	d6 94       	lsr	r13
    7b5a:	c7 94       	ror	r12
    7b5c:	b7 94       	ror	r11
    7b5e:	a7 94       	ror	r10
    7b60:	0a 94       	dec	r0
    7b62:	d2 f7       	brpl	.-12     	; 0x7b58 <__udivdi3+0x918>
    7b64:	d4 01       	movw	r26, r8
    7b66:	c3 01       	movw	r24, r6
    7b68:	6e 96       	adiw	r28, 0x1e	; 30
    7b6a:	0f ac       	ldd	r0, Y+63	; 0x3f
    7b6c:	6e 97       	sbiw	r28, 0x1e	; 30
    7b6e:	04 c0       	rjmp	.+8      	; 0x7b78 <__udivdi3+0x938>
    7b70:	88 0f       	add	r24, r24
    7b72:	99 1f       	adc	r25, r25
    7b74:	aa 1f       	adc	r26, r26
    7b76:	bb 1f       	adc	r27, r27
    7b78:	0a 94       	dec	r0
    7b7a:	d2 f7       	brpl	.-12     	; 0x7b70 <__udivdi3+0x930>
    7b7c:	ed a4       	ldd	r14, Y+45	; 0x2d
    7b7e:	fe a4       	ldd	r15, Y+46	; 0x2e
    7b80:	0f a5       	ldd	r16, Y+47	; 0x2f
    7b82:	18 a9       	ldd	r17, Y+48	; 0x30
    7b84:	04 c0       	rjmp	.+8      	; 0x7b8e <__udivdi3+0x94e>
    7b86:	16 95       	lsr	r17
    7b88:	07 95       	ror	r16
    7b8a:	f7 94       	ror	r15
    7b8c:	e7 94       	ror	r14
    7b8e:	6a 95       	dec	r22
    7b90:	d2 f7       	brpl	.-12     	; 0x7b86 <__udivdi3+0x946>
    7b92:	37 01       	movw	r6, r14
    7b94:	48 01       	movw	r8, r16
    7b96:	68 2a       	or	r6, r24
    7b98:	79 2a       	or	r7, r25
    7b9a:	8a 2a       	or	r8, r26
    7b9c:	9b 2a       	or	r9, r27
    7b9e:	6d 8e       	std	Y+29, r6	; 0x1d
    7ba0:	7e 8e       	std	Y+30, r7	; 0x1e
    7ba2:	8f 8e       	std	Y+31, r8	; 0x1f
    7ba4:	98 a2       	std	Y+32, r9	; 0x20
    7ba6:	ed a0       	ldd	r14, Y+37	; 0x25
    7ba8:	fe a0       	ldd	r15, Y+38	; 0x26
    7baa:	0f a1       	ldd	r16, Y+39	; 0x27
    7bac:	18 a5       	ldd	r17, Y+40	; 0x28
    7bae:	38 01       	movw	r6, r16
    7bb0:	88 24       	eor	r8, r8
    7bb2:	99 24       	eor	r9, r9
    7bb4:	98 01       	movw	r18, r16
    7bb6:	87 01       	movw	r16, r14
    7bb8:	20 70       	andi	r18, 0x00	; 0
    7bba:	30 70       	andi	r19, 0x00	; 0
    7bbc:	65 96       	adiw	r28, 0x15	; 21
    7bbe:	0c af       	std	Y+60, r16	; 0x3c
    7bc0:	1d af       	std	Y+61, r17	; 0x3d
    7bc2:	2e af       	std	Y+62, r18	; 0x3e
    7bc4:	3f af       	std	Y+63, r19	; 0x3f
    7bc6:	65 97       	sbiw	r28, 0x15	; 21
    7bc8:	c6 01       	movw	r24, r12
    7bca:	b5 01       	movw	r22, r10
    7bcc:	a4 01       	movw	r20, r8
    7bce:	93 01       	movw	r18, r6
    7bd0:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    7bd4:	7b 01       	movw	r14, r22
    7bd6:	8c 01       	movw	r16, r24
    7bd8:	c6 01       	movw	r24, r12
    7bda:	b5 01       	movw	r22, r10
    7bdc:	a4 01       	movw	r20, r8
    7bde:	93 01       	movw	r18, r6
    7be0:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    7be4:	c9 01       	movw	r24, r18
    7be6:	da 01       	movw	r26, r20
    7be8:	1c 01       	movw	r2, r24
    7bea:	2d 01       	movw	r4, r26
    7bec:	c2 01       	movw	r24, r4
    7bee:	b1 01       	movw	r22, r2
    7bf0:	65 96       	adiw	r28, 0x15	; 21
    7bf2:	2c ad       	ldd	r18, Y+60	; 0x3c
    7bf4:	3d ad       	ldd	r19, Y+61	; 0x3d
    7bf6:	4e ad       	ldd	r20, Y+62	; 0x3e
    7bf8:	5f ad       	ldd	r21, Y+63	; 0x3f
    7bfa:	65 97       	sbiw	r28, 0x15	; 21
    7bfc:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <__mulsi3>
    7c00:	9b 01       	movw	r18, r22
    7c02:	ac 01       	movw	r20, r24
    7c04:	87 01       	movw	r16, r14
    7c06:	ff 24       	eor	r15, r15
    7c08:	ee 24       	eor	r14, r14
    7c0a:	ad 8c       	ldd	r10, Y+29	; 0x1d
    7c0c:	be 8c       	ldd	r11, Y+30	; 0x1e
    7c0e:	cf 8c       	ldd	r12, Y+31	; 0x1f
    7c10:	d8 a0       	ldd	r13, Y+32	; 0x20
    7c12:	c6 01       	movw	r24, r12
    7c14:	aa 27       	eor	r26, r26
    7c16:	bb 27       	eor	r27, r27
    7c18:	57 01       	movw	r10, r14
    7c1a:	68 01       	movw	r12, r16
    7c1c:	a8 2a       	or	r10, r24
    7c1e:	b9 2a       	or	r11, r25
    7c20:	ca 2a       	or	r12, r26
    7c22:	db 2a       	or	r13, r27
    7c24:	a2 16       	cp	r10, r18
    7c26:	b3 06       	cpc	r11, r19
    7c28:	c4 06       	cpc	r12, r20
    7c2a:	d5 06       	cpc	r13, r21
    7c2c:	00 f5       	brcc	.+64     	; 0x7c6e <__udivdi3+0xa2e>
    7c2e:	08 94       	sec
    7c30:	21 08       	sbc	r2, r1
    7c32:	31 08       	sbc	r3, r1
    7c34:	41 08       	sbc	r4, r1
    7c36:	51 08       	sbc	r5, r1
    7c38:	ed a0       	ldd	r14, Y+37	; 0x25
    7c3a:	fe a0       	ldd	r15, Y+38	; 0x26
    7c3c:	0f a1       	ldd	r16, Y+39	; 0x27
    7c3e:	18 a5       	ldd	r17, Y+40	; 0x28
    7c40:	ae 0c       	add	r10, r14
    7c42:	bf 1c       	adc	r11, r15
    7c44:	c0 1e       	adc	r12, r16
    7c46:	d1 1e       	adc	r13, r17
    7c48:	ae 14       	cp	r10, r14
    7c4a:	bf 04       	cpc	r11, r15
    7c4c:	c0 06       	cpc	r12, r16
    7c4e:	d1 06       	cpc	r13, r17
    7c50:	70 f0       	brcs	.+28     	; 0x7c6e <__udivdi3+0xa2e>
    7c52:	a2 16       	cp	r10, r18
    7c54:	b3 06       	cpc	r11, r19
    7c56:	c4 06       	cpc	r12, r20
    7c58:	d5 06       	cpc	r13, r21
    7c5a:	48 f4       	brcc	.+18     	; 0x7c6e <__udivdi3+0xa2e>
    7c5c:	08 94       	sec
    7c5e:	21 08       	sbc	r2, r1
    7c60:	31 08       	sbc	r3, r1
    7c62:	41 08       	sbc	r4, r1
    7c64:	51 08       	sbc	r5, r1
    7c66:	ae 0c       	add	r10, r14
    7c68:	bf 1c       	adc	r11, r15
    7c6a:	c0 1e       	adc	r12, r16
    7c6c:	d1 1e       	adc	r13, r17
    7c6e:	a2 1a       	sub	r10, r18
    7c70:	b3 0a       	sbc	r11, r19
    7c72:	c4 0a       	sbc	r12, r20
    7c74:	d5 0a       	sbc	r13, r21
    7c76:	c6 01       	movw	r24, r12
    7c78:	b5 01       	movw	r22, r10
    7c7a:	a4 01       	movw	r20, r8
    7c7c:	93 01       	movw	r18, r6
    7c7e:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    7c82:	7b 01       	movw	r14, r22
    7c84:	8c 01       	movw	r16, r24
    7c86:	c6 01       	movw	r24, r12
    7c88:	b5 01       	movw	r22, r10
    7c8a:	a4 01       	movw	r20, r8
    7c8c:	93 01       	movw	r18, r6
    7c8e:	0e 94 91 47 	call	0x8f22	; 0x8f22 <__udivmodsi4>
    7c92:	c9 01       	movw	r24, r18
    7c94:	da 01       	movw	r26, r20
    7c96:	3c 01       	movw	r6, r24
    7c98:	4d 01       	movw	r8, r26
    7c9a:	c4 01       	movw	r24, r8
    7c9c:	b3 01       	movw	r22, r6
    7c9e:	65 96       	adiw	r28, 0x15	; 21
    7ca0:	2c ad       	ldd	r18, Y+60	; 0x3c
    7ca2:	3d ad       	ldd	r19, Y+61	; 0x3d
    7ca4:	4e ad       	ldd	r20, Y+62	; 0x3e
    7ca6:	5f ad       	ldd	r21, Y+63	; 0x3f
    7ca8:	65 97       	sbiw	r28, 0x15	; 21
    7caa:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <__mulsi3>
    7cae:	9b 01       	movw	r18, r22
    7cb0:	ac 01       	movw	r20, r24
    7cb2:	87 01       	movw	r16, r14
    7cb4:	ff 24       	eor	r15, r15
    7cb6:	ee 24       	eor	r14, r14
    7cb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7cba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7cbc:	af 8d       	ldd	r26, Y+31	; 0x1f
    7cbe:	b8 a1       	ldd	r27, Y+32	; 0x20
    7cc0:	a0 70       	andi	r26, 0x00	; 0
    7cc2:	b0 70       	andi	r27, 0x00	; 0
    7cc4:	57 01       	movw	r10, r14
    7cc6:	68 01       	movw	r12, r16
    7cc8:	a8 2a       	or	r10, r24
    7cca:	b9 2a       	or	r11, r25
    7ccc:	ca 2a       	or	r12, r26
    7cce:	db 2a       	or	r13, r27
    7cd0:	a2 16       	cp	r10, r18
    7cd2:	b3 06       	cpc	r11, r19
    7cd4:	c4 06       	cpc	r12, r20
    7cd6:	d5 06       	cpc	r13, r21
    7cd8:	00 f5       	brcc	.+64     	; 0x7d1a <__udivdi3+0xada>
    7cda:	08 94       	sec
    7cdc:	61 08       	sbc	r6, r1
    7cde:	71 08       	sbc	r7, r1
    7ce0:	81 08       	sbc	r8, r1
    7ce2:	91 08       	sbc	r9, r1
    7ce4:	6d a1       	ldd	r22, Y+37	; 0x25
    7ce6:	7e a1       	ldd	r23, Y+38	; 0x26
    7ce8:	8f a1       	ldd	r24, Y+39	; 0x27
    7cea:	98 a5       	ldd	r25, Y+40	; 0x28
    7cec:	a6 0e       	add	r10, r22
    7cee:	b7 1e       	adc	r11, r23
    7cf0:	c8 1e       	adc	r12, r24
    7cf2:	d9 1e       	adc	r13, r25
    7cf4:	a6 16       	cp	r10, r22
    7cf6:	b7 06       	cpc	r11, r23
    7cf8:	c8 06       	cpc	r12, r24
    7cfa:	d9 06       	cpc	r13, r25
    7cfc:	70 f0       	brcs	.+28     	; 0x7d1a <__udivdi3+0xada>
    7cfe:	a2 16       	cp	r10, r18
    7d00:	b3 06       	cpc	r11, r19
    7d02:	c4 06       	cpc	r12, r20
    7d04:	d5 06       	cpc	r13, r21
    7d06:	48 f4       	brcc	.+18     	; 0x7d1a <__udivdi3+0xada>
    7d08:	08 94       	sec
    7d0a:	61 08       	sbc	r6, r1
    7d0c:	71 08       	sbc	r7, r1
    7d0e:	81 08       	sbc	r8, r1
    7d10:	91 08       	sbc	r9, r1
    7d12:	a6 0e       	add	r10, r22
    7d14:	b7 1e       	adc	r11, r23
    7d16:	c8 1e       	adc	r12, r24
    7d18:	d9 1e       	adc	r13, r25
    7d1a:	d6 01       	movw	r26, r12
    7d1c:	c5 01       	movw	r24, r10
    7d1e:	82 1b       	sub	r24, r18
    7d20:	93 0b       	sbc	r25, r19
    7d22:	a4 0b       	sbc	r26, r20
    7d24:	b5 0b       	sbc	r27, r21
    7d26:	89 8f       	std	Y+25, r24	; 0x19
    7d28:	9a 8f       	std	Y+26, r25	; 0x1a
    7d2a:	ab 8f       	std	Y+27, r26	; 0x1b
    7d2c:	bc 8f       	std	Y+28, r27	; 0x1c
    7d2e:	d1 01       	movw	r26, r2
    7d30:	99 27       	eor	r25, r25
    7d32:	88 27       	eor	r24, r24
    7d34:	64 01       	movw	r12, r8
    7d36:	53 01       	movw	r10, r6
    7d38:	a8 2a       	or	r10, r24
    7d3a:	b9 2a       	or	r11, r25
    7d3c:	ca 2a       	or	r12, r26
    7d3e:	db 2a       	or	r13, r27
    7d40:	a9 aa       	std	Y+49, r10	; 0x31
    7d42:	ba aa       	std	Y+50, r11	; 0x32
    7d44:	cb aa       	std	Y+51, r12	; 0x33
    7d46:	dc aa       	std	Y+52, r13	; 0x34
    7d48:	86 01       	movw	r16, r12
    7d4a:	75 01       	movw	r14, r10
    7d4c:	2f ef       	ldi	r18, 0xFF	; 255
    7d4e:	3f ef       	ldi	r19, 0xFF	; 255
    7d50:	40 e0       	ldi	r20, 0x00	; 0
    7d52:	50 e0       	ldi	r21, 0x00	; 0
    7d54:	e2 22       	and	r14, r18
    7d56:	f3 22       	and	r15, r19
    7d58:	04 23       	and	r16, r20
    7d5a:	15 23       	and	r17, r21
    7d5c:	a6 01       	movw	r20, r12
    7d5e:	66 27       	eor	r22, r22
    7d60:	77 27       	eor	r23, r23
    7d62:	6d 96       	adiw	r28, 0x1d	; 29
    7d64:	4c af       	std	Y+60, r20	; 0x3c
    7d66:	5d af       	std	Y+61, r21	; 0x3d
    7d68:	6e af       	std	Y+62, r22	; 0x3e
    7d6a:	7f af       	std	Y+63, r23	; 0x3f
    7d6c:	6d 97       	sbiw	r28, 0x1d	; 29
    7d6e:	a9 a0       	ldd	r10, Y+33	; 0x21
    7d70:	ba a0       	ldd	r11, Y+34	; 0x22
    7d72:	cb a0       	ldd	r12, Y+35	; 0x23
    7d74:	dc a0       	ldd	r13, Y+36	; 0x24
    7d76:	6f ef       	ldi	r22, 0xFF	; 255
    7d78:	7f ef       	ldi	r23, 0xFF	; 255
    7d7a:	80 e0       	ldi	r24, 0x00	; 0
    7d7c:	90 e0       	ldi	r25, 0x00	; 0
    7d7e:	a6 22       	and	r10, r22
    7d80:	b7 22       	and	r11, r23
    7d82:	c8 22       	and	r12, r24
    7d84:	d9 22       	and	r13, r25
    7d86:	89 a1       	ldd	r24, Y+33	; 0x21
    7d88:	9a a1       	ldd	r25, Y+34	; 0x22
    7d8a:	ab a1       	ldd	r26, Y+35	; 0x23
    7d8c:	bc a1       	ldd	r27, Y+36	; 0x24
    7d8e:	1d 01       	movw	r2, r26
    7d90:	44 24       	eor	r4, r4
    7d92:	55 24       	eor	r5, r5
    7d94:	c8 01       	movw	r24, r16
    7d96:	b7 01       	movw	r22, r14
    7d98:	a6 01       	movw	r20, r12
    7d9a:	95 01       	movw	r18, r10
    7d9c:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <__mulsi3>
    7da0:	69 96       	adiw	r28, 0x19	; 25
    7da2:	6c af       	std	Y+60, r22	; 0x3c
    7da4:	7d af       	std	Y+61, r23	; 0x3d
    7da6:	8e af       	std	Y+62, r24	; 0x3e
    7da8:	9f af       	std	Y+63, r25	; 0x3f
    7daa:	69 97       	sbiw	r28, 0x19	; 25
    7dac:	c8 01       	movw	r24, r16
    7dae:	b7 01       	movw	r22, r14
    7db0:	a2 01       	movw	r20, r4
    7db2:	91 01       	movw	r18, r2
    7db4:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <__mulsi3>
    7db8:	3b 01       	movw	r6, r22
    7dba:	4c 01       	movw	r8, r24
    7dbc:	6d 96       	adiw	r28, 0x1d	; 29
    7dbe:	6c ad       	ldd	r22, Y+60	; 0x3c
    7dc0:	7d ad       	ldd	r23, Y+61	; 0x3d
    7dc2:	8e ad       	ldd	r24, Y+62	; 0x3e
    7dc4:	9f ad       	ldd	r25, Y+63	; 0x3f
    7dc6:	6d 97       	sbiw	r28, 0x1d	; 29
    7dc8:	a6 01       	movw	r20, r12
    7dca:	95 01       	movw	r18, r10
    7dcc:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <__mulsi3>
    7dd0:	7b 01       	movw	r14, r22
    7dd2:	8c 01       	movw	r16, r24
    7dd4:	6d 96       	adiw	r28, 0x1d	; 29
    7dd6:	6c ad       	ldd	r22, Y+60	; 0x3c
    7dd8:	7d ad       	ldd	r23, Y+61	; 0x3d
    7dda:	8e ad       	ldd	r24, Y+62	; 0x3e
    7ddc:	9f ad       	ldd	r25, Y+63	; 0x3f
    7dde:	6d 97       	sbiw	r28, 0x1d	; 29
    7de0:	a2 01       	movw	r20, r4
    7de2:	91 01       	movw	r18, r2
    7de4:	0e 94 72 47 	call	0x8ee4	; 0x8ee4 <__mulsi3>
    7de8:	5b 01       	movw	r10, r22
    7dea:	6c 01       	movw	r12, r24
    7dec:	a8 01       	movw	r20, r16
    7dee:	97 01       	movw	r18, r14
    7df0:	26 0d       	add	r18, r6
    7df2:	37 1d       	adc	r19, r7
    7df4:	48 1d       	adc	r20, r8
    7df6:	59 1d       	adc	r21, r9
    7df8:	69 96       	adiw	r28, 0x19	; 25
    7dfa:	6c ac       	ldd	r6, Y+60	; 0x3c
    7dfc:	7d ac       	ldd	r7, Y+61	; 0x3d
    7dfe:	8e ac       	ldd	r8, Y+62	; 0x3e
    7e00:	9f ac       	ldd	r9, Y+63	; 0x3f
    7e02:	69 97       	sbiw	r28, 0x19	; 25
    7e04:	c4 01       	movw	r24, r8
    7e06:	aa 27       	eor	r26, r26
    7e08:	bb 27       	eor	r27, r27
    7e0a:	28 0f       	add	r18, r24
    7e0c:	39 1f       	adc	r19, r25
    7e0e:	4a 1f       	adc	r20, r26
    7e10:	5b 1f       	adc	r21, r27
    7e12:	2e 15       	cp	r18, r14
    7e14:	3f 05       	cpc	r19, r15
    7e16:	40 07       	cpc	r20, r16
    7e18:	51 07       	cpc	r21, r17
    7e1a:	48 f4       	brcc	.+18     	; 0x7e2e <__udivdi3+0xbee>
    7e1c:	e1 2c       	mov	r14, r1
    7e1e:	f1 2c       	mov	r15, r1
    7e20:	61 e0       	ldi	r22, 0x01	; 1
    7e22:	06 2f       	mov	r16, r22
    7e24:	11 2d       	mov	r17, r1
    7e26:	ae 0c       	add	r10, r14
    7e28:	bf 1c       	adc	r11, r15
    7e2a:	c0 1e       	adc	r12, r16
    7e2c:	d1 1e       	adc	r13, r17
    7e2e:	ca 01       	movw	r24, r20
    7e30:	aa 27       	eor	r26, r26
    7e32:	bb 27       	eor	r27, r27
    7e34:	bc 01       	movw	r22, r24
    7e36:	cd 01       	movw	r24, r26
    7e38:	6a 0d       	add	r22, r10
    7e3a:	7b 1d       	adc	r23, r11
    7e3c:	8c 1d       	adc	r24, r12
    7e3e:	9d 1d       	adc	r25, r13
    7e40:	69 8c       	ldd	r6, Y+25	; 0x19
    7e42:	7a 8c       	ldd	r7, Y+26	; 0x1a
    7e44:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7e46:	9c 8c       	ldd	r9, Y+28	; 0x1c
    7e48:	66 16       	cp	r6, r22
    7e4a:	77 06       	cpc	r7, r23
    7e4c:	88 06       	cpc	r8, r24
    7e4e:	99 06       	cpc	r9, r25
    7e50:	40 f1       	brcs	.+80     	; 0x7ea2 <__udivdi3+0xc62>
    7e52:	66 15       	cp	r22, r6
    7e54:	77 05       	cpc	r23, r7
    7e56:	88 05       	cpc	r24, r8
    7e58:	99 05       	cpc	r25, r9
    7e5a:	09 f0       	breq	.+2      	; 0x7e5e <__udivdi3+0xc1e>
    7e5c:	43 c0       	rjmp	.+134    	; 0x7ee4 <__udivdi3+0xca4>
    7e5e:	d9 01       	movw	r26, r18
    7e60:	99 27       	eor	r25, r25
    7e62:	88 27       	eor	r24, r24
    7e64:	69 96       	adiw	r28, 0x19	; 25
    7e66:	2c ad       	ldd	r18, Y+60	; 0x3c
    7e68:	3d ad       	ldd	r19, Y+61	; 0x3d
    7e6a:	4e ad       	ldd	r20, Y+62	; 0x3e
    7e6c:	5f ad       	ldd	r21, Y+63	; 0x3f
    7e6e:	69 97       	sbiw	r28, 0x19	; 25
    7e70:	40 70       	andi	r20, 0x00	; 0
    7e72:	50 70       	andi	r21, 0x00	; 0
    7e74:	82 0f       	add	r24, r18
    7e76:	93 1f       	adc	r25, r19
    7e78:	a4 1f       	adc	r26, r20
    7e7a:	b5 1f       	adc	r27, r21
    7e7c:	2d a5       	ldd	r18, Y+45	; 0x2d
    7e7e:	3e a5       	ldd	r19, Y+46	; 0x2e
    7e80:	4f a5       	ldd	r20, Y+47	; 0x2f
    7e82:	58 a9       	ldd	r21, Y+48	; 0x30
    7e84:	6e 96       	adiw	r28, 0x1e	; 30
    7e86:	0f ac       	ldd	r0, Y+63	; 0x3f
    7e88:	6e 97       	sbiw	r28, 0x1e	; 30
    7e8a:	04 c0       	rjmp	.+8      	; 0x7e94 <__udivdi3+0xc54>
    7e8c:	22 0f       	add	r18, r18
    7e8e:	33 1f       	adc	r19, r19
    7e90:	44 1f       	adc	r20, r20
    7e92:	55 1f       	adc	r21, r21
    7e94:	0a 94       	dec	r0
    7e96:	d2 f7       	brpl	.-12     	; 0x7e8c <__udivdi3+0xc4c>
    7e98:	28 17       	cp	r18, r24
    7e9a:	39 07       	cpc	r19, r25
    7e9c:	4a 07       	cpc	r20, r26
    7e9e:	5b 07       	cpc	r21, r27
    7ea0:	08 f5       	brcc	.+66     	; 0x7ee4 <__udivdi3+0xca4>
    7ea2:	09 a9       	ldd	r16, Y+49	; 0x31
    7ea4:	1a a9       	ldd	r17, Y+50	; 0x32
    7ea6:	2b a9       	ldd	r18, Y+51	; 0x33
    7ea8:	3c a9       	ldd	r19, Y+52	; 0x34
    7eaa:	01 50       	subi	r16, 0x01	; 1
    7eac:	10 40       	sbci	r17, 0x00	; 0
    7eae:	20 40       	sbci	r18, 0x00	; 0
    7eb0:	30 40       	sbci	r19, 0x00	; 0
    7eb2:	09 ab       	std	Y+49, r16	; 0x31
    7eb4:	1a ab       	std	Y+50, r17	; 0x32
    7eb6:	2b ab       	std	Y+51, r18	; 0x33
    7eb8:	3c ab       	std	Y+52, r19	; 0x34
    7eba:	14 c0       	rjmp	.+40     	; 0x7ee4 <__udivdi3+0xca4>
    7ebc:	66 24       	eor	r6, r6
    7ebe:	77 24       	eor	r7, r7
    7ec0:	43 01       	movw	r8, r6
    7ec2:	21 e0       	ldi	r18, 0x01	; 1
    7ec4:	30 e0       	ldi	r19, 0x00	; 0
    7ec6:	40 e0       	ldi	r20, 0x00	; 0
    7ec8:	50 e0       	ldi	r21, 0x00	; 0
    7eca:	29 ab       	std	Y+49, r18	; 0x31
    7ecc:	3a ab       	std	Y+50, r19	; 0x32
    7ece:	4b ab       	std	Y+51, r20	; 0x33
    7ed0:	5c ab       	std	Y+52, r21	; 0x34
    7ed2:	0b c0       	rjmp	.+22     	; 0x7eea <__udivdi3+0xcaa>
    7ed4:	66 24       	eor	r6, r6
    7ed6:	77 24       	eor	r7, r7
    7ed8:	43 01       	movw	r8, r6
    7eda:	19 aa       	std	Y+49, r1	; 0x31
    7edc:	1a aa       	std	Y+50, r1	; 0x32
    7ede:	1b aa       	std	Y+51, r1	; 0x33
    7ee0:	1c aa       	std	Y+52, r1	; 0x34
    7ee2:	03 c0       	rjmp	.+6      	; 0x7eea <__udivdi3+0xcaa>
    7ee4:	66 24       	eor	r6, r6
    7ee6:	77 24       	eor	r7, r7
    7ee8:	43 01       	movw	r8, r6
    7eea:	fe 01       	movw	r30, r28
    7eec:	71 96       	adiw	r30, 0x11	; 17
    7eee:	88 e0       	ldi	r24, 0x08	; 8
    7ef0:	df 01       	movw	r26, r30
    7ef2:	1d 92       	st	X+, r1
    7ef4:	8a 95       	dec	r24
    7ef6:	e9 f7       	brne	.-6      	; 0x7ef2 <__udivdi3+0xcb2>
    7ef8:	a9 a8       	ldd	r10, Y+49	; 0x31
    7efa:	ba a8       	ldd	r11, Y+50	; 0x32
    7efc:	cb a8       	ldd	r12, Y+51	; 0x33
    7efe:	dc a8       	ldd	r13, Y+52	; 0x34
    7f00:	a9 8a       	std	Y+17, r10	; 0x11
    7f02:	ba 8a       	std	Y+18, r11	; 0x12
    7f04:	cb 8a       	std	Y+19, r12	; 0x13
    7f06:	dc 8a       	std	Y+20, r13	; 0x14
    7f08:	6d 8a       	std	Y+21, r6	; 0x15
    7f0a:	7e 8a       	std	Y+22, r7	; 0x16
    7f0c:	8f 8a       	std	Y+23, r8	; 0x17
    7f0e:	98 8e       	std	Y+24, r9	; 0x18
    7f10:	29 a9       	ldd	r18, Y+49	; 0x31
    7f12:	3a 89       	ldd	r19, Y+18	; 0x12
    7f14:	4b 89       	ldd	r20, Y+19	; 0x13
    7f16:	5c 89       	ldd	r21, Y+20	; 0x14
    7f18:	66 2d       	mov	r22, r6
    7f1a:	7e 89       	ldd	r23, Y+22	; 0x16
    7f1c:	8f 89       	ldd	r24, Y+23	; 0x17
    7f1e:	98 8d       	ldd	r25, Y+24	; 0x18
    7f20:	c2 5a       	subi	r28, 0xA2	; 162
    7f22:	df 4f       	sbci	r29, 0xFF	; 255
    7f24:	e2 e1       	ldi	r30, 0x12	; 18
    7f26:	0c 94 cf 47 	jmp	0x8f9e	; 0x8f9e <__epilogue_restores__>

00007f2a <vfprintf>:
    7f2a:	2f 92       	push	r2
    7f2c:	3f 92       	push	r3
    7f2e:	4f 92       	push	r4
    7f30:	5f 92       	push	r5
    7f32:	6f 92       	push	r6
    7f34:	7f 92       	push	r7
    7f36:	8f 92       	push	r8
    7f38:	9f 92       	push	r9
    7f3a:	af 92       	push	r10
    7f3c:	bf 92       	push	r11
    7f3e:	cf 92       	push	r12
    7f40:	df 92       	push	r13
    7f42:	ef 92       	push	r14
    7f44:	ff 92       	push	r15
    7f46:	0f 93       	push	r16
    7f48:	1f 93       	push	r17
    7f4a:	df 93       	push	r29
    7f4c:	cf 93       	push	r28
    7f4e:	cd b7       	in	r28, 0x3d	; 61
    7f50:	de b7       	in	r29, 0x3e	; 62
    7f52:	61 97       	sbiw	r28, 0x11	; 17
    7f54:	cd bf       	out	0x3d, r28	; 61
    7f56:	de bf       	out	0x3e, r29	; 62
    7f58:	3c 01       	movw	r6, r24
    7f5a:	6e 87       	std	Y+14, r22	; 0x0e
    7f5c:	7f 87       	std	Y+15, r23	; 0x0f
    7f5e:	6a 01       	movw	r12, r20
    7f60:	fc 01       	movw	r30, r24
    7f62:	16 82       	std	Z+6, r1	; 0x06
    7f64:	17 82       	std	Z+7, r1	; 0x07
    7f66:	83 81       	ldd	r24, Z+3	; 0x03
    7f68:	81 fd       	sbrc	r24, 1
    7f6a:	03 c0       	rjmp	.+6      	; 0x7f72 <vfprintf+0x48>
    7f6c:	6f ef       	ldi	r22, 0xFF	; 255
    7f6e:	7f ef       	ldi	r23, 0xFF	; 255
    7f70:	6f c3       	rjmp	.+1758   	; 0x8650 <vfprintf+0x726>
    7f72:	9e 01       	movw	r18, r28
    7f74:	2f 5f       	subi	r18, 0xFF	; 255
    7f76:	3f 4f       	sbci	r19, 0xFF	; 255
    7f78:	28 8b       	std	Y+16, r18	; 0x10
    7f7a:	39 8b       	std	Y+17, r19	; 0x11
    7f7c:	f3 01       	movw	r30, r6
    7f7e:	23 81       	ldd	r18, Z+3	; 0x03
    7f80:	ee 85       	ldd	r30, Y+14	; 0x0e
    7f82:	ff 85       	ldd	r31, Y+15	; 0x0f
    7f84:	23 fd       	sbrc	r18, 3
    7f86:	85 91       	lpm	r24, Z+
    7f88:	23 ff       	sbrs	r18, 3
    7f8a:	81 91       	ld	r24, Z+
    7f8c:	ee 87       	std	Y+14, r30	; 0x0e
    7f8e:	ff 87       	std	Y+15, r31	; 0x0f
    7f90:	88 23       	and	r24, r24
    7f92:	09 f4       	brne	.+2      	; 0x7f96 <vfprintf+0x6c>
    7f94:	5a c3       	rjmp	.+1716   	; 0x864a <vfprintf+0x720>
    7f96:	85 32       	cpi	r24, 0x25	; 37
    7f98:	51 f4       	brne	.+20     	; 0x7fae <vfprintf+0x84>
    7f9a:	ee 85       	ldd	r30, Y+14	; 0x0e
    7f9c:	ff 85       	ldd	r31, Y+15	; 0x0f
    7f9e:	23 fd       	sbrc	r18, 3
    7fa0:	85 91       	lpm	r24, Z+
    7fa2:	23 ff       	sbrs	r18, 3
    7fa4:	81 91       	ld	r24, Z+
    7fa6:	ee 87       	std	Y+14, r30	; 0x0e
    7fa8:	ff 87       	std	Y+15, r31	; 0x0f
    7faa:	85 32       	cpi	r24, 0x25	; 37
    7fac:	29 f4       	brne	.+10     	; 0x7fb8 <vfprintf+0x8e>
    7fae:	90 e0       	ldi	r25, 0x00	; 0
    7fb0:	b3 01       	movw	r22, r6
    7fb2:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    7fb6:	e2 cf       	rjmp	.-60     	; 0x7f7c <vfprintf+0x52>
    7fb8:	98 2f       	mov	r25, r24
    7fba:	10 e0       	ldi	r17, 0x00	; 0
    7fbc:	88 24       	eor	r8, r8
    7fbe:	99 24       	eor	r9, r9
    7fc0:	10 32       	cpi	r17, 0x20	; 32
    7fc2:	b0 f4       	brcc	.+44     	; 0x7ff0 <vfprintf+0xc6>
    7fc4:	9b 32       	cpi	r25, 0x2B	; 43
    7fc6:	69 f0       	breq	.+26     	; 0x7fe2 <vfprintf+0xb8>
    7fc8:	9c 32       	cpi	r25, 0x2C	; 44
    7fca:	28 f4       	brcc	.+10     	; 0x7fd6 <vfprintf+0xac>
    7fcc:	90 32       	cpi	r25, 0x20	; 32
    7fce:	51 f0       	breq	.+20     	; 0x7fe4 <vfprintf+0xba>
    7fd0:	93 32       	cpi	r25, 0x23	; 35
    7fd2:	71 f4       	brne	.+28     	; 0x7ff0 <vfprintf+0xc6>
    7fd4:	0b c0       	rjmp	.+22     	; 0x7fec <vfprintf+0xc2>
    7fd6:	9d 32       	cpi	r25, 0x2D	; 45
    7fd8:	39 f0       	breq	.+14     	; 0x7fe8 <vfprintf+0xbe>
    7fda:	90 33       	cpi	r25, 0x30	; 48
    7fdc:	49 f4       	brne	.+18     	; 0x7ff0 <vfprintf+0xc6>
    7fde:	11 60       	ori	r17, 0x01	; 1
    7fe0:	28 c0       	rjmp	.+80     	; 0x8032 <vfprintf+0x108>
    7fe2:	12 60       	ori	r17, 0x02	; 2
    7fe4:	14 60       	ori	r17, 0x04	; 4
    7fe6:	25 c0       	rjmp	.+74     	; 0x8032 <vfprintf+0x108>
    7fe8:	18 60       	ori	r17, 0x08	; 8
    7fea:	23 c0       	rjmp	.+70     	; 0x8032 <vfprintf+0x108>
    7fec:	10 61       	ori	r17, 0x10	; 16
    7fee:	21 c0       	rjmp	.+66     	; 0x8032 <vfprintf+0x108>
    7ff0:	17 fd       	sbrc	r17, 7
    7ff2:	2a c0       	rjmp	.+84     	; 0x8048 <vfprintf+0x11e>
    7ff4:	89 2f       	mov	r24, r25
    7ff6:	80 53       	subi	r24, 0x30	; 48
    7ff8:	8a 30       	cpi	r24, 0x0A	; 10
    7ffa:	78 f4       	brcc	.+30     	; 0x801a <vfprintf+0xf0>
    7ffc:	16 ff       	sbrs	r17, 6
    7ffe:	06 c0       	rjmp	.+12     	; 0x800c <vfprintf+0xe2>
    8000:	fa e0       	ldi	r31, 0x0A	; 10
    8002:	9f 9e       	mul	r9, r31
    8004:	90 2c       	mov	r9, r0
    8006:	11 24       	eor	r1, r1
    8008:	98 0e       	add	r9, r24
    800a:	13 c0       	rjmp	.+38     	; 0x8032 <vfprintf+0x108>
    800c:	3a e0       	ldi	r19, 0x0A	; 10
    800e:	83 9e       	mul	r8, r19
    8010:	80 2c       	mov	r8, r0
    8012:	11 24       	eor	r1, r1
    8014:	88 0e       	add	r8, r24
    8016:	10 62       	ori	r17, 0x20	; 32
    8018:	0c c0       	rjmp	.+24     	; 0x8032 <vfprintf+0x108>
    801a:	9e 32       	cpi	r25, 0x2E	; 46
    801c:	21 f4       	brne	.+8      	; 0x8026 <vfprintf+0xfc>
    801e:	16 fd       	sbrc	r17, 6
    8020:	14 c3       	rjmp	.+1576   	; 0x864a <vfprintf+0x720>
    8022:	10 64       	ori	r17, 0x40	; 64
    8024:	06 c0       	rjmp	.+12     	; 0x8032 <vfprintf+0x108>
    8026:	9c 36       	cpi	r25, 0x6C	; 108
    8028:	11 f4       	brne	.+4      	; 0x802e <vfprintf+0x104>
    802a:	10 68       	ori	r17, 0x80	; 128
    802c:	02 c0       	rjmp	.+4      	; 0x8032 <vfprintf+0x108>
    802e:	98 36       	cpi	r25, 0x68	; 104
    8030:	59 f4       	brne	.+22     	; 0x8048 <vfprintf+0x11e>
    8032:	ee 85       	ldd	r30, Y+14	; 0x0e
    8034:	ff 85       	ldd	r31, Y+15	; 0x0f
    8036:	23 fd       	sbrc	r18, 3
    8038:	95 91       	lpm	r25, Z+
    803a:	23 ff       	sbrs	r18, 3
    803c:	91 91       	ld	r25, Z+
    803e:	ee 87       	std	Y+14, r30	; 0x0e
    8040:	ff 87       	std	Y+15, r31	; 0x0f
    8042:	99 23       	and	r25, r25
    8044:	09 f0       	breq	.+2      	; 0x8048 <vfprintf+0x11e>
    8046:	bc cf       	rjmp	.-136    	; 0x7fc0 <vfprintf+0x96>
    8048:	89 2f       	mov	r24, r25
    804a:	85 54       	subi	r24, 0x45	; 69
    804c:	83 30       	cpi	r24, 0x03	; 3
    804e:	20 f4       	brcc	.+8      	; 0x8058 <vfprintf+0x12e>
    8050:	81 2f       	mov	r24, r17
    8052:	80 61       	ori	r24, 0x10	; 16
    8054:	90 5e       	subi	r25, 0xE0	; 224
    8056:	07 c0       	rjmp	.+14     	; 0x8066 <vfprintf+0x13c>
    8058:	89 2f       	mov	r24, r25
    805a:	85 56       	subi	r24, 0x65	; 101
    805c:	83 30       	cpi	r24, 0x03	; 3
    805e:	08 f0       	brcs	.+2      	; 0x8062 <vfprintf+0x138>
    8060:	9f c1       	rjmp	.+830    	; 0x83a0 <vfprintf+0x476>
    8062:	81 2f       	mov	r24, r17
    8064:	8f 7e       	andi	r24, 0xEF	; 239
    8066:	86 fd       	sbrc	r24, 6
    8068:	02 c0       	rjmp	.+4      	; 0x806e <vfprintf+0x144>
    806a:	76 e0       	ldi	r23, 0x06	; 6
    806c:	97 2e       	mov	r9, r23
    806e:	6f e3       	ldi	r22, 0x3F	; 63
    8070:	f6 2e       	mov	r15, r22
    8072:	f8 22       	and	r15, r24
    8074:	95 36       	cpi	r25, 0x65	; 101
    8076:	19 f4       	brne	.+6      	; 0x807e <vfprintf+0x154>
    8078:	f0 e4       	ldi	r31, 0x40	; 64
    807a:	ff 2a       	or	r15, r31
    807c:	07 c0       	rjmp	.+14     	; 0x808c <vfprintf+0x162>
    807e:	96 36       	cpi	r25, 0x66	; 102
    8080:	19 f4       	brne	.+6      	; 0x8088 <vfprintf+0x15e>
    8082:	20 e8       	ldi	r18, 0x80	; 128
    8084:	f2 2a       	or	r15, r18
    8086:	02 c0       	rjmp	.+4      	; 0x808c <vfprintf+0x162>
    8088:	91 10       	cpse	r9, r1
    808a:	9a 94       	dec	r9
    808c:	f7 fe       	sbrs	r15, 7
    808e:	0a c0       	rjmp	.+20     	; 0x80a4 <vfprintf+0x17a>
    8090:	3b e3       	ldi	r19, 0x3B	; 59
    8092:	39 15       	cp	r19, r9
    8094:	18 f4       	brcc	.+6      	; 0x809c <vfprintf+0x172>
    8096:	5c e3       	ldi	r21, 0x3C	; 60
    8098:	b5 2e       	mov	r11, r21
    809a:	02 c0       	rjmp	.+4      	; 0x80a0 <vfprintf+0x176>
    809c:	b9 2c       	mov	r11, r9
    809e:	b3 94       	inc	r11
    80a0:	27 e0       	ldi	r18, 0x07	; 7
    80a2:	09 c0       	rjmp	.+18     	; 0x80b6 <vfprintf+0x18c>
    80a4:	47 e0       	ldi	r20, 0x07	; 7
    80a6:	49 15       	cp	r20, r9
    80a8:	20 f4       	brcc	.+8      	; 0x80b2 <vfprintf+0x188>
    80aa:	bb 24       	eor	r11, r11
    80ac:	47 e0       	ldi	r20, 0x07	; 7
    80ae:	94 2e       	mov	r9, r20
    80b0:	f7 cf       	rjmp	.-18     	; 0x80a0 <vfprintf+0x176>
    80b2:	29 2d       	mov	r18, r9
    80b4:	bb 24       	eor	r11, r11
    80b6:	c6 01       	movw	r24, r12
    80b8:	04 96       	adiw	r24, 0x04	; 4
    80ba:	8c 87       	std	Y+12, r24	; 0x0c
    80bc:	9d 87       	std	Y+13, r25	; 0x0d
    80be:	f6 01       	movw	r30, r12
    80c0:	60 81       	ld	r22, Z
    80c2:	71 81       	ldd	r23, Z+1	; 0x01
    80c4:	82 81       	ldd	r24, Z+2	; 0x02
    80c6:	93 81       	ldd	r25, Z+3	; 0x03
    80c8:	ae 01       	movw	r20, r28
    80ca:	4f 5f       	subi	r20, 0xFF	; 255
    80cc:	5f 4f       	sbci	r21, 0xFF	; 255
    80ce:	0b 2d       	mov	r16, r11
    80d0:	0e 94 76 49 	call	0x92ec	; 0x92ec <__ftoa_engine>
    80d4:	6c 01       	movw	r12, r24
    80d6:	09 81       	ldd	r16, Y+1	; 0x01
    80d8:	20 2e       	mov	r2, r16
    80da:	33 24       	eor	r3, r3
    80dc:	00 ff       	sbrs	r16, 0
    80de:	04 c0       	rjmp	.+8      	; 0x80e8 <vfprintf+0x1be>
    80e0:	03 fd       	sbrc	r16, 3
    80e2:	02 c0       	rjmp	.+4      	; 0x80e8 <vfprintf+0x1be>
    80e4:	1d e2       	ldi	r17, 0x2D	; 45
    80e6:	09 c0       	rjmp	.+18     	; 0x80fa <vfprintf+0x1d0>
    80e8:	f1 fe       	sbrs	r15, 1
    80ea:	02 c0       	rjmp	.+4      	; 0x80f0 <vfprintf+0x1c6>
    80ec:	1b e2       	ldi	r17, 0x2B	; 43
    80ee:	05 c0       	rjmp	.+10     	; 0x80fa <vfprintf+0x1d0>
    80f0:	f2 fc       	sbrc	r15, 2
    80f2:	02 c0       	rjmp	.+4      	; 0x80f8 <vfprintf+0x1ce>
    80f4:	10 e0       	ldi	r17, 0x00	; 0
    80f6:	01 c0       	rjmp	.+2      	; 0x80fa <vfprintf+0x1d0>
    80f8:	10 e2       	ldi	r17, 0x20	; 32
    80fa:	c1 01       	movw	r24, r2
    80fc:	8c 70       	andi	r24, 0x0C	; 12
    80fe:	90 70       	andi	r25, 0x00	; 0
    8100:	89 2b       	or	r24, r25
    8102:	b9 f1       	breq	.+110    	; 0x8172 <vfprintf+0x248>
    8104:	11 23       	and	r17, r17
    8106:	11 f4       	brne	.+4      	; 0x810c <vfprintf+0x1e2>
    8108:	83 e0       	ldi	r24, 0x03	; 3
    810a:	01 c0       	rjmp	.+2      	; 0x810e <vfprintf+0x1e4>
    810c:	84 e0       	ldi	r24, 0x04	; 4
    810e:	88 15       	cp	r24, r8
    8110:	10 f0       	brcs	.+4      	; 0x8116 <vfprintf+0x1ec>
    8112:	88 24       	eor	r8, r8
    8114:	0a c0       	rjmp	.+20     	; 0x812a <vfprintf+0x200>
    8116:	88 1a       	sub	r8, r24
    8118:	f3 fc       	sbrc	r15, 3
    811a:	07 c0       	rjmp	.+14     	; 0x812a <vfprintf+0x200>
    811c:	80 e2       	ldi	r24, 0x20	; 32
    811e:	90 e0       	ldi	r25, 0x00	; 0
    8120:	b3 01       	movw	r22, r6
    8122:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    8126:	8a 94       	dec	r8
    8128:	c9 f7       	brne	.-14     	; 0x811c <vfprintf+0x1f2>
    812a:	11 23       	and	r17, r17
    812c:	29 f0       	breq	.+10     	; 0x8138 <vfprintf+0x20e>
    812e:	81 2f       	mov	r24, r17
    8130:	90 e0       	ldi	r25, 0x00	; 0
    8132:	b3 01       	movw	r22, r6
    8134:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    8138:	23 fe       	sbrs	r2, 3
    813a:	03 c0       	rjmp	.+6      	; 0x8142 <vfprintf+0x218>
    813c:	03 e3       	ldi	r16, 0x33	; 51
    813e:	12 e0       	ldi	r17, 0x02	; 2
    8140:	0e c0       	rjmp	.+28     	; 0x815e <vfprintf+0x234>
    8142:	07 e3       	ldi	r16, 0x37	; 55
    8144:	12 e0       	ldi	r17, 0x02	; 2
    8146:	0b c0       	rjmp	.+22     	; 0x815e <vfprintf+0x234>
    8148:	e1 14       	cp	r14, r1
    814a:	f1 04       	cpc	r15, r1
    814c:	09 f0       	breq	.+2      	; 0x8150 <vfprintf+0x226>
    814e:	80 52       	subi	r24, 0x20	; 32
    8150:	90 e0       	ldi	r25, 0x00	; 0
    8152:	b3 01       	movw	r22, r6
    8154:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    8158:	0f 5f       	subi	r16, 0xFF	; 255
    815a:	1f 4f       	sbci	r17, 0xFF	; 255
    815c:	05 c0       	rjmp	.+10     	; 0x8168 <vfprintf+0x23e>
    815e:	ef 2c       	mov	r14, r15
    8160:	ff 24       	eor	r15, r15
    8162:	f0 e1       	ldi	r31, 0x10	; 16
    8164:	ef 22       	and	r14, r31
    8166:	ff 24       	eor	r15, r15
    8168:	f8 01       	movw	r30, r16
    816a:	84 91       	lpm	r24, Z+
    816c:	88 23       	and	r24, r24
    816e:	61 f7       	brne	.-40     	; 0x8148 <vfprintf+0x21e>
    8170:	14 c1       	rjmp	.+552    	; 0x839a <vfprintf+0x470>
    8172:	f7 fe       	sbrs	r15, 7
    8174:	12 c0       	rjmp	.+36     	; 0x819a <vfprintf+0x270>
    8176:	bc 0c       	add	r11, r12
    8178:	24 fe       	sbrs	r2, 4
    817a:	04 c0       	rjmp	.+8      	; 0x8184 <vfprintf+0x25a>
    817c:	8a 81       	ldd	r24, Y+2	; 0x02
    817e:	81 33       	cpi	r24, 0x31	; 49
    8180:	09 f4       	brne	.+2      	; 0x8184 <vfprintf+0x25a>
    8182:	ba 94       	dec	r11
    8184:	1b 14       	cp	r1, r11
    8186:	1c f0       	brlt	.+6      	; 0x818e <vfprintf+0x264>
    8188:	bb 24       	eor	r11, r11
    818a:	b3 94       	inc	r11
    818c:	2d c0       	rjmp	.+90     	; 0x81e8 <vfprintf+0x2be>
    818e:	f8 e0       	ldi	r31, 0x08	; 8
    8190:	fb 15       	cp	r31, r11
    8192:	50 f5       	brcc	.+84     	; 0x81e8 <vfprintf+0x2be>
    8194:	38 e0       	ldi	r19, 0x08	; 8
    8196:	b3 2e       	mov	r11, r19
    8198:	27 c0       	rjmp	.+78     	; 0x81e8 <vfprintf+0x2be>
    819a:	f6 fc       	sbrc	r15, 6
    819c:	25 c0       	rjmp	.+74     	; 0x81e8 <vfprintf+0x2be>
    819e:	89 2d       	mov	r24, r9
    81a0:	90 e0       	ldi	r25, 0x00	; 0
    81a2:	8c 15       	cp	r24, r12
    81a4:	9d 05       	cpc	r25, r13
    81a6:	4c f0       	brlt	.+18     	; 0x81ba <vfprintf+0x290>
    81a8:	2c ef       	ldi	r18, 0xFC	; 252
    81aa:	c2 16       	cp	r12, r18
    81ac:	2f ef       	ldi	r18, 0xFF	; 255
    81ae:	d2 06       	cpc	r13, r18
    81b0:	24 f0       	brlt	.+8      	; 0x81ba <vfprintf+0x290>
    81b2:	30 e8       	ldi	r19, 0x80	; 128
    81b4:	f3 2a       	or	r15, r19
    81b6:	01 c0       	rjmp	.+2      	; 0x81ba <vfprintf+0x290>
    81b8:	9a 94       	dec	r9
    81ba:	99 20       	and	r9, r9
    81bc:	49 f0       	breq	.+18     	; 0x81d0 <vfprintf+0x2a6>
    81be:	e2 e0       	ldi	r30, 0x02	; 2
    81c0:	f0 e0       	ldi	r31, 0x00	; 0
    81c2:	ec 0f       	add	r30, r28
    81c4:	fd 1f       	adc	r31, r29
    81c6:	e9 0d       	add	r30, r9
    81c8:	f1 1d       	adc	r31, r1
    81ca:	80 81       	ld	r24, Z
    81cc:	80 33       	cpi	r24, 0x30	; 48
    81ce:	a1 f3       	breq	.-24     	; 0x81b8 <vfprintf+0x28e>
    81d0:	f7 fe       	sbrs	r15, 7
    81d2:	0a c0       	rjmp	.+20     	; 0x81e8 <vfprintf+0x2be>
    81d4:	b9 2c       	mov	r11, r9
    81d6:	b3 94       	inc	r11
    81d8:	89 2d       	mov	r24, r9
    81da:	90 e0       	ldi	r25, 0x00	; 0
    81dc:	c8 16       	cp	r12, r24
    81de:	d9 06       	cpc	r13, r25
    81e0:	14 f0       	brlt	.+4      	; 0x81e6 <vfprintf+0x2bc>
    81e2:	99 24       	eor	r9, r9
    81e4:	01 c0       	rjmp	.+2      	; 0x81e8 <vfprintf+0x2be>
    81e6:	9c 18       	sub	r9, r12
    81e8:	f7 fc       	sbrc	r15, 7
    81ea:	03 c0       	rjmp	.+6      	; 0x81f2 <vfprintf+0x2c8>
    81ec:	25 e0       	ldi	r18, 0x05	; 5
    81ee:	30 e0       	ldi	r19, 0x00	; 0
    81f0:	09 c0       	rjmp	.+18     	; 0x8204 <vfprintf+0x2da>
    81f2:	1c 14       	cp	r1, r12
    81f4:	1d 04       	cpc	r1, r13
    81f6:	1c f0       	brlt	.+6      	; 0x81fe <vfprintf+0x2d4>
    81f8:	21 e0       	ldi	r18, 0x01	; 1
    81fa:	30 e0       	ldi	r19, 0x00	; 0
    81fc:	03 c0       	rjmp	.+6      	; 0x8204 <vfprintf+0x2da>
    81fe:	96 01       	movw	r18, r12
    8200:	2f 5f       	subi	r18, 0xFF	; 255
    8202:	3f 4f       	sbci	r19, 0xFF	; 255
    8204:	11 23       	and	r17, r17
    8206:	11 f0       	breq	.+4      	; 0x820c <vfprintf+0x2e2>
    8208:	2f 5f       	subi	r18, 0xFF	; 255
    820a:	3f 4f       	sbci	r19, 0xFF	; 255
    820c:	99 20       	and	r9, r9
    820e:	29 f0       	breq	.+10     	; 0x821a <vfprintf+0x2f0>
    8210:	89 2d       	mov	r24, r9
    8212:	90 e0       	ldi	r25, 0x00	; 0
    8214:	01 96       	adiw	r24, 0x01	; 1
    8216:	28 0f       	add	r18, r24
    8218:	39 1f       	adc	r19, r25
    821a:	88 2d       	mov	r24, r8
    821c:	90 e0       	ldi	r25, 0x00	; 0
    821e:	28 17       	cp	r18, r24
    8220:	39 07       	cpc	r19, r25
    8222:	14 f0       	brlt	.+4      	; 0x8228 <vfprintf+0x2fe>
    8224:	88 24       	eor	r8, r8
    8226:	01 c0       	rjmp	.+2      	; 0x822a <vfprintf+0x300>
    8228:	82 1a       	sub	r8, r18
    822a:	4f 2c       	mov	r4, r15
    822c:	55 24       	eor	r5, r5
    822e:	c2 01       	movw	r24, r4
    8230:	89 70       	andi	r24, 0x09	; 9
    8232:	90 70       	andi	r25, 0x00	; 0
    8234:	89 2b       	or	r24, r25
    8236:	39 f0       	breq	.+14     	; 0x8246 <vfprintf+0x31c>
    8238:	08 c0       	rjmp	.+16     	; 0x824a <vfprintf+0x320>
    823a:	80 e2       	ldi	r24, 0x20	; 32
    823c:	90 e0       	ldi	r25, 0x00	; 0
    823e:	b3 01       	movw	r22, r6
    8240:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    8244:	8a 94       	dec	r8
    8246:	88 20       	and	r8, r8
    8248:	c1 f7       	brne	.-16     	; 0x823a <vfprintf+0x310>
    824a:	11 23       	and	r17, r17
    824c:	29 f0       	breq	.+10     	; 0x8258 <vfprintf+0x32e>
    824e:	81 2f       	mov	r24, r17
    8250:	90 e0       	ldi	r25, 0x00	; 0
    8252:	b3 01       	movw	r22, r6
    8254:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    8258:	43 fe       	sbrs	r4, 3
    825a:	07 c0       	rjmp	.+14     	; 0x826a <vfprintf+0x340>
    825c:	08 c0       	rjmp	.+16     	; 0x826e <vfprintf+0x344>
    825e:	80 e3       	ldi	r24, 0x30	; 48
    8260:	90 e0       	ldi	r25, 0x00	; 0
    8262:	b3 01       	movw	r22, r6
    8264:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    8268:	8a 94       	dec	r8
    826a:	88 20       	and	r8, r8
    826c:	c1 f7       	brne	.-16     	; 0x825e <vfprintf+0x334>
    826e:	f7 fe       	sbrs	r15, 7
    8270:	46 c0       	rjmp	.+140    	; 0x82fe <vfprintf+0x3d4>
    8272:	86 01       	movw	r16, r12
    8274:	d7 fe       	sbrs	r13, 7
    8276:	02 c0       	rjmp	.+4      	; 0x827c <vfprintf+0x352>
    8278:	00 e0       	ldi	r16, 0x00	; 0
    827a:	10 e0       	ldi	r17, 0x00	; 0
    827c:	76 01       	movw	r14, r12
    827e:	08 94       	sec
    8280:	e1 1c       	adc	r14, r1
    8282:	f1 1c       	adc	r15, r1
    8284:	e0 1a       	sub	r14, r16
    8286:	f1 0a       	sbc	r15, r17
    8288:	41 e0       	ldi	r20, 0x01	; 1
    828a:	50 e0       	ldi	r21, 0x00	; 0
    828c:	4c 0f       	add	r20, r28
    828e:	5d 1f       	adc	r21, r29
    8290:	e4 0e       	add	r14, r20
    8292:	f5 1e       	adc	r15, r21
    8294:	26 01       	movw	r4, r12
    8296:	4b 18       	sub	r4, r11
    8298:	51 08       	sbc	r5, r1
    829a:	89 2d       	mov	r24, r9
    829c:	90 e0       	ldi	r25, 0x00	; 0
    829e:	aa 24       	eor	r10, r10
    82a0:	bb 24       	eor	r11, r11
    82a2:	a8 1a       	sub	r10, r24
    82a4:	b9 0a       	sbc	r11, r25
    82a6:	5f ef       	ldi	r21, 0xFF	; 255
    82a8:	0f 3f       	cpi	r16, 0xFF	; 255
    82aa:	15 07       	cpc	r17, r21
    82ac:	29 f4       	brne	.+10     	; 0x82b8 <vfprintf+0x38e>
    82ae:	8e e2       	ldi	r24, 0x2E	; 46
    82b0:	90 e0       	ldi	r25, 0x00	; 0
    82b2:	b3 01       	movw	r22, r6
    82b4:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    82b8:	c0 16       	cp	r12, r16
    82ba:	d1 06       	cpc	r13, r17
    82bc:	34 f0       	brlt	.+12     	; 0x82ca <vfprintf+0x3a0>
    82be:	40 16       	cp	r4, r16
    82c0:	51 06       	cpc	r5, r17
    82c2:	1c f4       	brge	.+6      	; 0x82ca <vfprintf+0x3a0>
    82c4:	f7 01       	movw	r30, r14
    82c6:	80 81       	ld	r24, Z
    82c8:	01 c0       	rjmp	.+2      	; 0x82cc <vfprintf+0x3a2>
    82ca:	80 e3       	ldi	r24, 0x30	; 48
    82cc:	01 50       	subi	r16, 0x01	; 1
    82ce:	10 40       	sbci	r17, 0x00	; 0
    82d0:	08 94       	sec
    82d2:	e1 1c       	adc	r14, r1
    82d4:	f1 1c       	adc	r15, r1
    82d6:	0a 15       	cp	r16, r10
    82d8:	1b 05       	cpc	r17, r11
    82da:	2c f0       	brlt	.+10     	; 0x82e6 <vfprintf+0x3bc>
    82dc:	90 e0       	ldi	r25, 0x00	; 0
    82de:	b3 01       	movw	r22, r6
    82e0:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    82e4:	e0 cf       	rjmp	.-64     	; 0x82a6 <vfprintf+0x37c>
    82e6:	0c 15       	cp	r16, r12
    82e8:	1d 05       	cpc	r17, r13
    82ea:	39 f4       	brne	.+14     	; 0x82fa <vfprintf+0x3d0>
    82ec:	9a 81       	ldd	r25, Y+2	; 0x02
    82ee:	96 33       	cpi	r25, 0x36	; 54
    82f0:	18 f4       	brcc	.+6      	; 0x82f8 <vfprintf+0x3ce>
    82f2:	95 33       	cpi	r25, 0x35	; 53
    82f4:	11 f4       	brne	.+4      	; 0x82fa <vfprintf+0x3d0>
    82f6:	24 fe       	sbrs	r2, 4
    82f8:	81 e3       	ldi	r24, 0x31	; 49
    82fa:	90 e0       	ldi	r25, 0x00	; 0
    82fc:	4b c0       	rjmp	.+150    	; 0x8394 <vfprintf+0x46a>
    82fe:	8a 81       	ldd	r24, Y+2	; 0x02
    8300:	81 33       	cpi	r24, 0x31	; 49
    8302:	09 f0       	breq	.+2      	; 0x8306 <vfprintf+0x3dc>
    8304:	0f 7e       	andi	r16, 0xEF	; 239
    8306:	90 e0       	ldi	r25, 0x00	; 0
    8308:	b3 01       	movw	r22, r6
    830a:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    830e:	99 20       	and	r9, r9
    8310:	a1 f0       	breq	.+40     	; 0x833a <vfprintf+0x410>
    8312:	8e e2       	ldi	r24, 0x2E	; 46
    8314:	90 e0       	ldi	r25, 0x00	; 0
    8316:	b3 01       	movw	r22, r6
    8318:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    831c:	12 e0       	ldi	r17, 0x02	; 2
    831e:	e1 e0       	ldi	r30, 0x01	; 1
    8320:	f0 e0       	ldi	r31, 0x00	; 0
    8322:	ec 0f       	add	r30, r28
    8324:	fd 1f       	adc	r31, r29
    8326:	e1 0f       	add	r30, r17
    8328:	f1 1d       	adc	r31, r1
    832a:	1f 5f       	subi	r17, 0xFF	; 255
    832c:	80 81       	ld	r24, Z
    832e:	90 e0       	ldi	r25, 0x00	; 0
    8330:	b3 01       	movw	r22, r6
    8332:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    8336:	9a 94       	dec	r9
    8338:	91 f7       	brne	.-28     	; 0x831e <vfprintf+0x3f4>
    833a:	44 fc       	sbrc	r4, 4
    833c:	03 c0       	rjmp	.+6      	; 0x8344 <vfprintf+0x41a>
    833e:	85 e6       	ldi	r24, 0x65	; 101
    8340:	90 e0       	ldi	r25, 0x00	; 0
    8342:	02 c0       	rjmp	.+4      	; 0x8348 <vfprintf+0x41e>
    8344:	85 e4       	ldi	r24, 0x45	; 69
    8346:	90 e0       	ldi	r25, 0x00	; 0
    8348:	b3 01       	movw	r22, r6
    834a:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    834e:	d7 fc       	sbrc	r13, 7
    8350:	05 c0       	rjmp	.+10     	; 0x835c <vfprintf+0x432>
    8352:	c1 14       	cp	r12, r1
    8354:	d1 04       	cpc	r13, r1
    8356:	41 f4       	brne	.+16     	; 0x8368 <vfprintf+0x43e>
    8358:	04 ff       	sbrs	r16, 4
    835a:	06 c0       	rjmp	.+12     	; 0x8368 <vfprintf+0x43e>
    835c:	d0 94       	com	r13
    835e:	c1 94       	neg	r12
    8360:	d1 08       	sbc	r13, r1
    8362:	d3 94       	inc	r13
    8364:	8d e2       	ldi	r24, 0x2D	; 45
    8366:	01 c0       	rjmp	.+2      	; 0x836a <vfprintf+0x440>
    8368:	8b e2       	ldi	r24, 0x2B	; 43
    836a:	90 e0       	ldi	r25, 0x00	; 0
    836c:	b3 01       	movw	r22, r6
    836e:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    8372:	80 e3       	ldi	r24, 0x30	; 48
    8374:	05 c0       	rjmp	.+10     	; 0x8380 <vfprintf+0x456>
    8376:	8f 5f       	subi	r24, 0xFF	; 255
    8378:	26 ef       	ldi	r18, 0xF6	; 246
    837a:	3f ef       	ldi	r19, 0xFF	; 255
    837c:	c2 0e       	add	r12, r18
    837e:	d3 1e       	adc	r13, r19
    8380:	3a e0       	ldi	r19, 0x0A	; 10
    8382:	c3 16       	cp	r12, r19
    8384:	d1 04       	cpc	r13, r1
    8386:	bc f7       	brge	.-18     	; 0x8376 <vfprintf+0x44c>
    8388:	90 e0       	ldi	r25, 0x00	; 0
    838a:	b3 01       	movw	r22, r6
    838c:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    8390:	c6 01       	movw	r24, r12
    8392:	c0 96       	adiw	r24, 0x30	; 48
    8394:	b3 01       	movw	r22, r6
    8396:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    839a:	cc 84       	ldd	r12, Y+12	; 0x0c
    839c:	dd 84       	ldd	r13, Y+13	; 0x0d
    839e:	52 c1       	rjmp	.+676    	; 0x8644 <vfprintf+0x71a>
    83a0:	93 36       	cpi	r25, 0x63	; 99
    83a2:	31 f0       	breq	.+12     	; 0x83b0 <vfprintf+0x486>
    83a4:	93 37       	cpi	r25, 0x73	; 115
    83a6:	99 f0       	breq	.+38     	; 0x83ce <vfprintf+0x4a4>
    83a8:	93 35       	cpi	r25, 0x53	; 83
    83aa:	09 f0       	breq	.+2      	; 0x83ae <vfprintf+0x484>
    83ac:	59 c0       	rjmp	.+178    	; 0x8460 <vfprintf+0x536>
    83ae:	23 c0       	rjmp	.+70     	; 0x83f6 <vfprintf+0x4cc>
    83b0:	f6 01       	movw	r30, r12
    83b2:	80 81       	ld	r24, Z
    83b4:	89 83       	std	Y+1, r24	; 0x01
    83b6:	5e 01       	movw	r10, r28
    83b8:	08 94       	sec
    83ba:	a1 1c       	adc	r10, r1
    83bc:	b1 1c       	adc	r11, r1
    83be:	22 e0       	ldi	r18, 0x02	; 2
    83c0:	30 e0       	ldi	r19, 0x00	; 0
    83c2:	c2 0e       	add	r12, r18
    83c4:	d3 1e       	adc	r13, r19
    83c6:	21 e0       	ldi	r18, 0x01	; 1
    83c8:	e2 2e       	mov	r14, r18
    83ca:	f1 2c       	mov	r15, r1
    83cc:	12 c0       	rjmp	.+36     	; 0x83f2 <vfprintf+0x4c8>
    83ce:	f6 01       	movw	r30, r12
    83d0:	a0 80       	ld	r10, Z
    83d2:	b1 80       	ldd	r11, Z+1	; 0x01
    83d4:	16 fd       	sbrc	r17, 6
    83d6:	03 c0       	rjmp	.+6      	; 0x83de <vfprintf+0x4b4>
    83d8:	6f ef       	ldi	r22, 0xFF	; 255
    83da:	7f ef       	ldi	r23, 0xFF	; 255
    83dc:	02 c0       	rjmp	.+4      	; 0x83e2 <vfprintf+0x4b8>
    83de:	69 2d       	mov	r22, r9
    83e0:	70 e0       	ldi	r23, 0x00	; 0
    83e2:	22 e0       	ldi	r18, 0x02	; 2
    83e4:	30 e0       	ldi	r19, 0x00	; 0
    83e6:	c2 0e       	add	r12, r18
    83e8:	d3 1e       	adc	r13, r19
    83ea:	c5 01       	movw	r24, r10
    83ec:	0e 94 79 4a 	call	0x94f2	; 0x94f2 <strnlen>
    83f0:	7c 01       	movw	r14, r24
    83f2:	1f 77       	andi	r17, 0x7F	; 127
    83f4:	13 c0       	rjmp	.+38     	; 0x841c <vfprintf+0x4f2>
    83f6:	f6 01       	movw	r30, r12
    83f8:	a0 80       	ld	r10, Z
    83fa:	b1 80       	ldd	r11, Z+1	; 0x01
    83fc:	16 fd       	sbrc	r17, 6
    83fe:	03 c0       	rjmp	.+6      	; 0x8406 <vfprintf+0x4dc>
    8400:	6f ef       	ldi	r22, 0xFF	; 255
    8402:	7f ef       	ldi	r23, 0xFF	; 255
    8404:	02 c0       	rjmp	.+4      	; 0x840a <vfprintf+0x4e0>
    8406:	69 2d       	mov	r22, r9
    8408:	70 e0       	ldi	r23, 0x00	; 0
    840a:	22 e0       	ldi	r18, 0x02	; 2
    840c:	30 e0       	ldi	r19, 0x00	; 0
    840e:	c2 0e       	add	r12, r18
    8410:	d3 1e       	adc	r13, r19
    8412:	c5 01       	movw	r24, r10
    8414:	0e 94 6e 4a 	call	0x94dc	; 0x94dc <strnlen_P>
    8418:	7c 01       	movw	r14, r24
    841a:	10 68       	ori	r17, 0x80	; 128
    841c:	13 ff       	sbrs	r17, 3
    841e:	07 c0       	rjmp	.+14     	; 0x842e <vfprintf+0x504>
    8420:	1b c0       	rjmp	.+54     	; 0x8458 <vfprintf+0x52e>
    8422:	80 e2       	ldi	r24, 0x20	; 32
    8424:	90 e0       	ldi	r25, 0x00	; 0
    8426:	b3 01       	movw	r22, r6
    8428:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    842c:	8a 94       	dec	r8
    842e:	88 2d       	mov	r24, r8
    8430:	90 e0       	ldi	r25, 0x00	; 0
    8432:	e8 16       	cp	r14, r24
    8434:	f9 06       	cpc	r15, r25
    8436:	a8 f3       	brcs	.-22     	; 0x8422 <vfprintf+0x4f8>
    8438:	0f c0       	rjmp	.+30     	; 0x8458 <vfprintf+0x52e>
    843a:	f5 01       	movw	r30, r10
    843c:	17 fd       	sbrc	r17, 7
    843e:	85 91       	lpm	r24, Z+
    8440:	17 ff       	sbrs	r17, 7
    8442:	81 91       	ld	r24, Z+
    8444:	5f 01       	movw	r10, r30
    8446:	90 e0       	ldi	r25, 0x00	; 0
    8448:	b3 01       	movw	r22, r6
    844a:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    844e:	81 10       	cpse	r8, r1
    8450:	8a 94       	dec	r8
    8452:	08 94       	sec
    8454:	e1 08       	sbc	r14, r1
    8456:	f1 08       	sbc	r15, r1
    8458:	e1 14       	cp	r14, r1
    845a:	f1 04       	cpc	r15, r1
    845c:	71 f7       	brne	.-36     	; 0x843a <vfprintf+0x510>
    845e:	f2 c0       	rjmp	.+484    	; 0x8644 <vfprintf+0x71a>
    8460:	94 36       	cpi	r25, 0x64	; 100
    8462:	11 f0       	breq	.+4      	; 0x8468 <vfprintf+0x53e>
    8464:	99 36       	cpi	r25, 0x69	; 105
    8466:	89 f5       	brne	.+98     	; 0x84ca <vfprintf+0x5a0>
    8468:	17 ff       	sbrs	r17, 7
    846a:	08 c0       	rjmp	.+16     	; 0x847c <vfprintf+0x552>
    846c:	f6 01       	movw	r30, r12
    846e:	20 81       	ld	r18, Z
    8470:	31 81       	ldd	r19, Z+1	; 0x01
    8472:	42 81       	ldd	r20, Z+2	; 0x02
    8474:	53 81       	ldd	r21, Z+3	; 0x03
    8476:	84 e0       	ldi	r24, 0x04	; 4
    8478:	90 e0       	ldi	r25, 0x00	; 0
    847a:	0a c0       	rjmp	.+20     	; 0x8490 <vfprintf+0x566>
    847c:	f6 01       	movw	r30, r12
    847e:	80 81       	ld	r24, Z
    8480:	91 81       	ldd	r25, Z+1	; 0x01
    8482:	9c 01       	movw	r18, r24
    8484:	44 27       	eor	r20, r20
    8486:	37 fd       	sbrc	r19, 7
    8488:	40 95       	com	r20
    848a:	54 2f       	mov	r21, r20
    848c:	82 e0       	ldi	r24, 0x02	; 2
    848e:	90 e0       	ldi	r25, 0x00	; 0
    8490:	c8 0e       	add	r12, r24
    8492:	d9 1e       	adc	r13, r25
    8494:	9f e6       	ldi	r25, 0x6F	; 111
    8496:	f9 2e       	mov	r15, r25
    8498:	f1 22       	and	r15, r17
    849a:	57 ff       	sbrs	r21, 7
    849c:	09 c0       	rjmp	.+18     	; 0x84b0 <vfprintf+0x586>
    849e:	50 95       	com	r21
    84a0:	40 95       	com	r20
    84a2:	30 95       	com	r19
    84a4:	21 95       	neg	r18
    84a6:	3f 4f       	sbci	r19, 0xFF	; 255
    84a8:	4f 4f       	sbci	r20, 0xFF	; 255
    84aa:	5f 4f       	sbci	r21, 0xFF	; 255
    84ac:	90 e8       	ldi	r25, 0x80	; 128
    84ae:	f9 2a       	or	r15, r25
    84b0:	ca 01       	movw	r24, r20
    84b2:	b9 01       	movw	r22, r18
    84b4:	ae 01       	movw	r20, r28
    84b6:	4f 5f       	subi	r20, 0xFF	; 255
    84b8:	5f 4f       	sbci	r21, 0xFF	; 255
    84ba:	2a e0       	ldi	r18, 0x0A	; 10
    84bc:	30 e0       	ldi	r19, 0x00	; 0
    84be:	0e 94 13 4b 	call	0x9626	; 0x9626 <__ultoa_invert>
    84c2:	e8 2e       	mov	r14, r24
    84c4:	e8 89       	ldd	r30, Y+16	; 0x10
    84c6:	ee 1a       	sub	r14, r30
    84c8:	41 c0       	rjmp	.+130    	; 0x854c <vfprintf+0x622>
    84ca:	95 37       	cpi	r25, 0x75	; 117
    84cc:	21 f4       	brne	.+8      	; 0x84d6 <vfprintf+0x5ac>
    84ce:	1f 7e       	andi	r17, 0xEF	; 239
    84d0:	2a e0       	ldi	r18, 0x0A	; 10
    84d2:	30 e0       	ldi	r19, 0x00	; 0
    84d4:	1c c0       	rjmp	.+56     	; 0x850e <vfprintf+0x5e4>
    84d6:	19 7f       	andi	r17, 0xF9	; 249
    84d8:	9f 36       	cpi	r25, 0x6F	; 111
    84da:	61 f0       	breq	.+24     	; 0x84f4 <vfprintf+0x5ca>
    84dc:	90 37       	cpi	r25, 0x70	; 112
    84de:	20 f4       	brcc	.+8      	; 0x84e8 <vfprintf+0x5be>
    84e0:	98 35       	cpi	r25, 0x58	; 88
    84e2:	09 f0       	breq	.+2      	; 0x84e6 <vfprintf+0x5bc>
    84e4:	b2 c0       	rjmp	.+356    	; 0x864a <vfprintf+0x720>
    84e6:	0f c0       	rjmp	.+30     	; 0x8506 <vfprintf+0x5dc>
    84e8:	90 37       	cpi	r25, 0x70	; 112
    84ea:	39 f0       	breq	.+14     	; 0x84fa <vfprintf+0x5d0>
    84ec:	98 37       	cpi	r25, 0x78	; 120
    84ee:	09 f0       	breq	.+2      	; 0x84f2 <vfprintf+0x5c8>
    84f0:	ac c0       	rjmp	.+344    	; 0x864a <vfprintf+0x720>
    84f2:	04 c0       	rjmp	.+8      	; 0x84fc <vfprintf+0x5d2>
    84f4:	28 e0       	ldi	r18, 0x08	; 8
    84f6:	30 e0       	ldi	r19, 0x00	; 0
    84f8:	0a c0       	rjmp	.+20     	; 0x850e <vfprintf+0x5e4>
    84fa:	10 61       	ori	r17, 0x10	; 16
    84fc:	14 fd       	sbrc	r17, 4
    84fe:	14 60       	ori	r17, 0x04	; 4
    8500:	20 e1       	ldi	r18, 0x10	; 16
    8502:	30 e0       	ldi	r19, 0x00	; 0
    8504:	04 c0       	rjmp	.+8      	; 0x850e <vfprintf+0x5e4>
    8506:	14 fd       	sbrc	r17, 4
    8508:	16 60       	ori	r17, 0x06	; 6
    850a:	20 e1       	ldi	r18, 0x10	; 16
    850c:	32 e0       	ldi	r19, 0x02	; 2
    850e:	17 ff       	sbrs	r17, 7
    8510:	08 c0       	rjmp	.+16     	; 0x8522 <vfprintf+0x5f8>
    8512:	f6 01       	movw	r30, r12
    8514:	60 81       	ld	r22, Z
    8516:	71 81       	ldd	r23, Z+1	; 0x01
    8518:	82 81       	ldd	r24, Z+2	; 0x02
    851a:	93 81       	ldd	r25, Z+3	; 0x03
    851c:	44 e0       	ldi	r20, 0x04	; 4
    851e:	50 e0       	ldi	r21, 0x00	; 0
    8520:	08 c0       	rjmp	.+16     	; 0x8532 <vfprintf+0x608>
    8522:	f6 01       	movw	r30, r12
    8524:	80 81       	ld	r24, Z
    8526:	91 81       	ldd	r25, Z+1	; 0x01
    8528:	bc 01       	movw	r22, r24
    852a:	80 e0       	ldi	r24, 0x00	; 0
    852c:	90 e0       	ldi	r25, 0x00	; 0
    852e:	42 e0       	ldi	r20, 0x02	; 2
    8530:	50 e0       	ldi	r21, 0x00	; 0
    8532:	c4 0e       	add	r12, r20
    8534:	d5 1e       	adc	r13, r21
    8536:	ae 01       	movw	r20, r28
    8538:	4f 5f       	subi	r20, 0xFF	; 255
    853a:	5f 4f       	sbci	r21, 0xFF	; 255
    853c:	0e 94 13 4b 	call	0x9626	; 0x9626 <__ultoa_invert>
    8540:	e8 2e       	mov	r14, r24
    8542:	58 89       	ldd	r21, Y+16	; 0x10
    8544:	e5 1a       	sub	r14, r21
    8546:	8f e7       	ldi	r24, 0x7F	; 127
    8548:	f8 2e       	mov	r15, r24
    854a:	f1 22       	and	r15, r17
    854c:	f6 fe       	sbrs	r15, 6
    854e:	0b c0       	rjmp	.+22     	; 0x8566 <vfprintf+0x63c>
    8550:	8e ef       	ldi	r24, 0xFE	; 254
    8552:	f8 22       	and	r15, r24
    8554:	e9 14       	cp	r14, r9
    8556:	38 f4       	brcc	.+14     	; 0x8566 <vfprintf+0x63c>
    8558:	f4 fe       	sbrs	r15, 4
    855a:	07 c0       	rjmp	.+14     	; 0x856a <vfprintf+0x640>
    855c:	f2 fc       	sbrc	r15, 2
    855e:	05 c0       	rjmp	.+10     	; 0x856a <vfprintf+0x640>
    8560:	9f ee       	ldi	r25, 0xEF	; 239
    8562:	f9 22       	and	r15, r25
    8564:	02 c0       	rjmp	.+4      	; 0x856a <vfprintf+0x640>
    8566:	1e 2d       	mov	r17, r14
    8568:	01 c0       	rjmp	.+2      	; 0x856c <vfprintf+0x642>
    856a:	19 2d       	mov	r17, r9
    856c:	f4 fe       	sbrs	r15, 4
    856e:	0d c0       	rjmp	.+26     	; 0x858a <vfprintf+0x660>
    8570:	fe 01       	movw	r30, r28
    8572:	ee 0d       	add	r30, r14
    8574:	f1 1d       	adc	r31, r1
    8576:	80 81       	ld	r24, Z
    8578:	80 33       	cpi	r24, 0x30	; 48
    857a:	19 f4       	brne	.+6      	; 0x8582 <vfprintf+0x658>
    857c:	e9 ee       	ldi	r30, 0xE9	; 233
    857e:	fe 22       	and	r15, r30
    8580:	08 c0       	rjmp	.+16     	; 0x8592 <vfprintf+0x668>
    8582:	1f 5f       	subi	r17, 0xFF	; 255
    8584:	f2 fe       	sbrs	r15, 2
    8586:	05 c0       	rjmp	.+10     	; 0x8592 <vfprintf+0x668>
    8588:	03 c0       	rjmp	.+6      	; 0x8590 <vfprintf+0x666>
    858a:	8f 2d       	mov	r24, r15
    858c:	86 78       	andi	r24, 0x86	; 134
    858e:	09 f0       	breq	.+2      	; 0x8592 <vfprintf+0x668>
    8590:	1f 5f       	subi	r17, 0xFF	; 255
    8592:	0f 2d       	mov	r16, r15
    8594:	f3 fc       	sbrc	r15, 3
    8596:	14 c0       	rjmp	.+40     	; 0x85c0 <vfprintf+0x696>
    8598:	f0 fe       	sbrs	r15, 0
    859a:	0f c0       	rjmp	.+30     	; 0x85ba <vfprintf+0x690>
    859c:	18 15       	cp	r17, r8
    859e:	10 f0       	brcs	.+4      	; 0x85a4 <vfprintf+0x67a>
    85a0:	9e 2c       	mov	r9, r14
    85a2:	0b c0       	rjmp	.+22     	; 0x85ba <vfprintf+0x690>
    85a4:	9e 2c       	mov	r9, r14
    85a6:	98 0c       	add	r9, r8
    85a8:	91 1a       	sub	r9, r17
    85aa:	18 2d       	mov	r17, r8
    85ac:	06 c0       	rjmp	.+12     	; 0x85ba <vfprintf+0x690>
    85ae:	80 e2       	ldi	r24, 0x20	; 32
    85b0:	90 e0       	ldi	r25, 0x00	; 0
    85b2:	b3 01       	movw	r22, r6
    85b4:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    85b8:	1f 5f       	subi	r17, 0xFF	; 255
    85ba:	18 15       	cp	r17, r8
    85bc:	c0 f3       	brcs	.-16     	; 0x85ae <vfprintf+0x684>
    85be:	04 c0       	rjmp	.+8      	; 0x85c8 <vfprintf+0x69e>
    85c0:	18 15       	cp	r17, r8
    85c2:	10 f4       	brcc	.+4      	; 0x85c8 <vfprintf+0x69e>
    85c4:	81 1a       	sub	r8, r17
    85c6:	01 c0       	rjmp	.+2      	; 0x85ca <vfprintf+0x6a0>
    85c8:	88 24       	eor	r8, r8
    85ca:	04 ff       	sbrs	r16, 4
    85cc:	0f c0       	rjmp	.+30     	; 0x85ec <vfprintf+0x6c2>
    85ce:	80 e3       	ldi	r24, 0x30	; 48
    85d0:	90 e0       	ldi	r25, 0x00	; 0
    85d2:	b3 01       	movw	r22, r6
    85d4:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    85d8:	02 ff       	sbrs	r16, 2
    85da:	1d c0       	rjmp	.+58     	; 0x8616 <vfprintf+0x6ec>
    85dc:	01 fd       	sbrc	r16, 1
    85de:	03 c0       	rjmp	.+6      	; 0x85e6 <vfprintf+0x6bc>
    85e0:	88 e7       	ldi	r24, 0x78	; 120
    85e2:	90 e0       	ldi	r25, 0x00	; 0
    85e4:	0e c0       	rjmp	.+28     	; 0x8602 <vfprintf+0x6d8>
    85e6:	88 e5       	ldi	r24, 0x58	; 88
    85e8:	90 e0       	ldi	r25, 0x00	; 0
    85ea:	0b c0       	rjmp	.+22     	; 0x8602 <vfprintf+0x6d8>
    85ec:	80 2f       	mov	r24, r16
    85ee:	86 78       	andi	r24, 0x86	; 134
    85f0:	91 f0       	breq	.+36     	; 0x8616 <vfprintf+0x6ec>
    85f2:	01 ff       	sbrs	r16, 1
    85f4:	02 c0       	rjmp	.+4      	; 0x85fa <vfprintf+0x6d0>
    85f6:	8b e2       	ldi	r24, 0x2B	; 43
    85f8:	01 c0       	rjmp	.+2      	; 0x85fc <vfprintf+0x6d2>
    85fa:	80 e2       	ldi	r24, 0x20	; 32
    85fc:	f7 fc       	sbrc	r15, 7
    85fe:	8d e2       	ldi	r24, 0x2D	; 45
    8600:	90 e0       	ldi	r25, 0x00	; 0
    8602:	b3 01       	movw	r22, r6
    8604:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    8608:	06 c0       	rjmp	.+12     	; 0x8616 <vfprintf+0x6ec>
    860a:	80 e3       	ldi	r24, 0x30	; 48
    860c:	90 e0       	ldi	r25, 0x00	; 0
    860e:	b3 01       	movw	r22, r6
    8610:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    8614:	9a 94       	dec	r9
    8616:	e9 14       	cp	r14, r9
    8618:	c0 f3       	brcs	.-16     	; 0x860a <vfprintf+0x6e0>
    861a:	ea 94       	dec	r14
    861c:	e1 e0       	ldi	r30, 0x01	; 1
    861e:	f0 e0       	ldi	r31, 0x00	; 0
    8620:	ec 0f       	add	r30, r28
    8622:	fd 1f       	adc	r31, r29
    8624:	ee 0d       	add	r30, r14
    8626:	f1 1d       	adc	r31, r1
    8628:	80 81       	ld	r24, Z
    862a:	90 e0       	ldi	r25, 0x00	; 0
    862c:	b3 01       	movw	r22, r6
    862e:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    8632:	ee 20       	and	r14, r14
    8634:	91 f7       	brne	.-28     	; 0x861a <vfprintf+0x6f0>
    8636:	06 c0       	rjmp	.+12     	; 0x8644 <vfprintf+0x71a>
    8638:	80 e2       	ldi	r24, 0x20	; 32
    863a:	90 e0       	ldi	r25, 0x00	; 0
    863c:	b3 01       	movw	r22, r6
    863e:	0e 94 c4 4a 	call	0x9588	; 0x9588 <fputc>
    8642:	8a 94       	dec	r8
    8644:	88 20       	and	r8, r8
    8646:	c1 f7       	brne	.-16     	; 0x8638 <vfprintf+0x70e>
    8648:	99 cc       	rjmp	.-1742   	; 0x7f7c <vfprintf+0x52>
    864a:	f3 01       	movw	r30, r6
    864c:	66 81       	ldd	r22, Z+6	; 0x06
    864e:	77 81       	ldd	r23, Z+7	; 0x07
    8650:	cb 01       	movw	r24, r22
    8652:	61 96       	adiw	r28, 0x11	; 17
    8654:	cd bf       	out	0x3d, r28	; 61
    8656:	de bf       	out	0x3e, r29	; 62
    8658:	cf 91       	pop	r28
    865a:	df 91       	pop	r29
    865c:	1f 91       	pop	r17
    865e:	0f 91       	pop	r16
    8660:	ff 90       	pop	r15
    8662:	ef 90       	pop	r14
    8664:	df 90       	pop	r13
    8666:	cf 90       	pop	r12
    8668:	bf 90       	pop	r11
    866a:	af 90       	pop	r10
    866c:	9f 90       	pop	r9
    866e:	8f 90       	pop	r8
    8670:	7f 90       	pop	r7
    8672:	6f 90       	pop	r6
    8674:	5f 90       	pop	r5
    8676:	4f 90       	pop	r4
    8678:	3f 90       	pop	r3
    867a:	2f 90       	pop	r2
    867c:	08 95       	ret

0000867e <__subsf3>:
    867e:	50 58       	subi	r21, 0x80	; 128

00008680 <__addsf3>:
    8680:	bb 27       	eor	r27, r27
    8682:	aa 27       	eor	r26, r26
    8684:	0e d0       	rcall	.+28     	; 0x86a2 <__addsf3x>
    8686:	29 c2       	rjmp	.+1106   	; 0x8ada <__fp_round>
    8688:	f2 d1       	rcall	.+996    	; 0x8a6e <__fp_pscA>
    868a:	30 f0       	brcs	.+12     	; 0x8698 <__addsf3+0x18>
    868c:	f7 d1       	rcall	.+1006   	; 0x8a7c <__fp_pscB>
    868e:	20 f0       	brcs	.+8      	; 0x8698 <__addsf3+0x18>
    8690:	31 f4       	brne	.+12     	; 0x869e <__addsf3+0x1e>
    8692:	9f 3f       	cpi	r25, 0xFF	; 255
    8694:	11 f4       	brne	.+4      	; 0x869a <__addsf3+0x1a>
    8696:	1e f4       	brtc	.+6      	; 0x869e <__addsf3+0x1e>
    8698:	c2 c1       	rjmp	.+900    	; 0x8a1e <__fp_nan>
    869a:	0e f4       	brtc	.+2      	; 0x869e <__addsf3+0x1e>
    869c:	e0 95       	com	r30
    869e:	e7 fb       	bst	r30, 7
    86a0:	8f c1       	rjmp	.+798    	; 0x89c0 <__fp_inf>

000086a2 <__addsf3x>:
    86a2:	e9 2f       	mov	r30, r25
    86a4:	3c d2       	rcall	.+1144   	; 0x8b1e <__fp_split3>
    86a6:	80 f3       	brcs	.-32     	; 0x8688 <__addsf3+0x8>
    86a8:	ba 17       	cp	r27, r26
    86aa:	62 07       	cpc	r22, r18
    86ac:	73 07       	cpc	r23, r19
    86ae:	84 07       	cpc	r24, r20
    86b0:	95 07       	cpc	r25, r21
    86b2:	18 f0       	brcs	.+6      	; 0x86ba <__addsf3x+0x18>
    86b4:	71 f4       	brne	.+28     	; 0x86d2 <__addsf3x+0x30>
    86b6:	9e f5       	brtc	.+102    	; 0x871e <__addsf3x+0x7c>
    86b8:	6b c2       	rjmp	.+1238   	; 0x8b90 <__fp_zero>
    86ba:	0e f4       	brtc	.+2      	; 0x86be <__addsf3x+0x1c>
    86bc:	e0 95       	com	r30
    86be:	0b 2e       	mov	r0, r27
    86c0:	ba 2f       	mov	r27, r26
    86c2:	a0 2d       	mov	r26, r0
    86c4:	0b 01       	movw	r0, r22
    86c6:	b9 01       	movw	r22, r18
    86c8:	90 01       	movw	r18, r0
    86ca:	0c 01       	movw	r0, r24
    86cc:	ca 01       	movw	r24, r20
    86ce:	a0 01       	movw	r20, r0
    86d0:	11 24       	eor	r1, r1
    86d2:	ff 27       	eor	r31, r31
    86d4:	59 1b       	sub	r21, r25
    86d6:	99 f0       	breq	.+38     	; 0x86fe <__addsf3x+0x5c>
    86d8:	59 3f       	cpi	r21, 0xF9	; 249
    86da:	50 f4       	brcc	.+20     	; 0x86f0 <__addsf3x+0x4e>
    86dc:	50 3e       	cpi	r21, 0xE0	; 224
    86de:	68 f1       	brcs	.+90     	; 0x873a <__addsf3x+0x98>
    86e0:	1a 16       	cp	r1, r26
    86e2:	f0 40       	sbci	r31, 0x00	; 0
    86e4:	a2 2f       	mov	r26, r18
    86e6:	23 2f       	mov	r18, r19
    86e8:	34 2f       	mov	r19, r20
    86ea:	44 27       	eor	r20, r20
    86ec:	58 5f       	subi	r21, 0xF8	; 248
    86ee:	f3 cf       	rjmp	.-26     	; 0x86d6 <__addsf3x+0x34>
    86f0:	46 95       	lsr	r20
    86f2:	37 95       	ror	r19
    86f4:	27 95       	ror	r18
    86f6:	a7 95       	ror	r26
    86f8:	f0 40       	sbci	r31, 0x00	; 0
    86fa:	53 95       	inc	r21
    86fc:	c9 f7       	brne	.-14     	; 0x86f0 <__addsf3x+0x4e>
    86fe:	7e f4       	brtc	.+30     	; 0x871e <__addsf3x+0x7c>
    8700:	1f 16       	cp	r1, r31
    8702:	ba 0b       	sbc	r27, r26
    8704:	62 0b       	sbc	r22, r18
    8706:	73 0b       	sbc	r23, r19
    8708:	84 0b       	sbc	r24, r20
    870a:	ba f0       	brmi	.+46     	; 0x873a <__addsf3x+0x98>
    870c:	91 50       	subi	r25, 0x01	; 1
    870e:	a1 f0       	breq	.+40     	; 0x8738 <__addsf3x+0x96>
    8710:	ff 0f       	add	r31, r31
    8712:	bb 1f       	adc	r27, r27
    8714:	66 1f       	adc	r22, r22
    8716:	77 1f       	adc	r23, r23
    8718:	88 1f       	adc	r24, r24
    871a:	c2 f7       	brpl	.-16     	; 0x870c <__addsf3x+0x6a>
    871c:	0e c0       	rjmp	.+28     	; 0x873a <__addsf3x+0x98>
    871e:	ba 0f       	add	r27, r26
    8720:	62 1f       	adc	r22, r18
    8722:	73 1f       	adc	r23, r19
    8724:	84 1f       	adc	r24, r20
    8726:	48 f4       	brcc	.+18     	; 0x873a <__addsf3x+0x98>
    8728:	87 95       	ror	r24
    872a:	77 95       	ror	r23
    872c:	67 95       	ror	r22
    872e:	b7 95       	ror	r27
    8730:	f7 95       	ror	r31
    8732:	9e 3f       	cpi	r25, 0xFE	; 254
    8734:	08 f0       	brcs	.+2      	; 0x8738 <__addsf3x+0x96>
    8736:	b3 cf       	rjmp	.-154    	; 0x869e <__addsf3+0x1e>
    8738:	93 95       	inc	r25
    873a:	88 0f       	add	r24, r24
    873c:	08 f0       	brcs	.+2      	; 0x8740 <__addsf3x+0x9e>
    873e:	99 27       	eor	r25, r25
    8740:	ee 0f       	add	r30, r30
    8742:	97 95       	ror	r25
    8744:	87 95       	ror	r24
    8746:	08 95       	ret

00008748 <atan>:
    8748:	df 93       	push	r29
    874a:	dd 27       	eor	r29, r29
    874c:	b9 2f       	mov	r27, r25
    874e:	bf 77       	andi	r27, 0x7F	; 127
    8750:	40 e8       	ldi	r20, 0x80	; 128
    8752:	5f e3       	ldi	r21, 0x3F	; 63
    8754:	16 16       	cp	r1, r22
    8756:	17 06       	cpc	r1, r23
    8758:	48 07       	cpc	r20, r24
    875a:	5b 07       	cpc	r21, r27
    875c:	10 f4       	brcc	.+4      	; 0x8762 <atan+0x1a>
    875e:	d9 2f       	mov	r29, r25
    8760:	83 d2       	rcall	.+1286   	; 0x8c68 <inverse>
    8762:	9f 93       	push	r25
    8764:	8f 93       	push	r24
    8766:	7f 93       	push	r23
    8768:	6f 93       	push	r22
    876a:	96 d3       	rcall	.+1836   	; 0x8e98 <square>
    876c:	e8 ee       	ldi	r30, 0xE8	; 232
    876e:	f1 e0       	ldi	r31, 0x01	; 1
    8770:	59 d1       	rcall	.+690    	; 0x8a24 <__fp_powser>
    8772:	b3 d1       	rcall	.+870    	; 0x8ada <__fp_round>
    8774:	2f 91       	pop	r18
    8776:	3f 91       	pop	r19
    8778:	4f 91       	pop	r20
    877a:	5f 91       	pop	r21
    877c:	ee d2       	rcall	.+1500   	; 0x8d5a <__mulsf3x>
    877e:	dd 23       	and	r29, r29
    8780:	49 f0       	breq	.+18     	; 0x8794 <atan+0x4c>
    8782:	90 58       	subi	r25, 0x80	; 128
    8784:	a2 ea       	ldi	r26, 0xA2	; 162
    8786:	2a ed       	ldi	r18, 0xDA	; 218
    8788:	3f e0       	ldi	r19, 0x0F	; 15
    878a:	49 ec       	ldi	r20, 0xC9	; 201
    878c:	5f e3       	ldi	r21, 0x3F	; 63
    878e:	d0 78       	andi	r29, 0x80	; 128
    8790:	5d 27       	eor	r21, r29
    8792:	87 df       	rcall	.-242    	; 0x86a2 <__addsf3x>
    8794:	df 91       	pop	r29
    8796:	a1 c1       	rjmp	.+834    	; 0x8ada <__fp_round>

00008798 <ceil>:
    8798:	e4 d1       	rcall	.+968    	; 0x8b62 <__fp_trunc>
    879a:	80 f0       	brcs	.+32     	; 0x87bc <ceil+0x24>
    879c:	9f 37       	cpi	r25, 0x7F	; 127
    879e:	40 f4       	brcc	.+16     	; 0x87b0 <ceil+0x18>
    87a0:	91 11       	cpse	r25, r1
    87a2:	0e f4       	brtc	.+2      	; 0x87a6 <ceil+0xe>
    87a4:	f6 c1       	rjmp	.+1004   	; 0x8b92 <__fp_szero>
    87a6:	60 e0       	ldi	r22, 0x00	; 0
    87a8:	70 e0       	ldi	r23, 0x00	; 0
    87aa:	80 e8       	ldi	r24, 0x80	; 128
    87ac:	9f e3       	ldi	r25, 0x3F	; 63
    87ae:	08 95       	ret
    87b0:	26 f0       	brts	.+8      	; 0x87ba <ceil+0x22>
    87b2:	1b 16       	cp	r1, r27
    87b4:	61 1d       	adc	r22, r1
    87b6:	71 1d       	adc	r23, r1
    87b8:	81 1d       	adc	r24, r1
    87ba:	08 c1       	rjmp	.+528    	; 0x89cc <__fp_mintl>
    87bc:	22 c1       	rjmp	.+580    	; 0x8a02 <__fp_mpack>

000087be <__cmpsf2>:
    87be:	dc d0       	rcall	.+440    	; 0x8978 <__fp_cmp>
    87c0:	08 f4       	brcc	.+2      	; 0x87c4 <__cmpsf2+0x6>
    87c2:	81 e0       	ldi	r24, 0x01	; 1
    87c4:	08 95       	ret

000087c6 <cos>:
    87c6:	62 d1       	rcall	.+708    	; 0x8a8c <__fp_rempio2>
    87c8:	e3 95       	inc	r30
    87ca:	98 c1       	rjmp	.+816    	; 0x8afc <__fp_sinus>

000087cc <__divsf3>:
    87cc:	0c d0       	rcall	.+24     	; 0x87e6 <__divsf3x>
    87ce:	85 c1       	rjmp	.+778    	; 0x8ada <__fp_round>
    87d0:	55 d1       	rcall	.+682    	; 0x8a7c <__fp_pscB>
    87d2:	40 f0       	brcs	.+16     	; 0x87e4 <__divsf3+0x18>
    87d4:	4c d1       	rcall	.+664    	; 0x8a6e <__fp_pscA>
    87d6:	30 f0       	brcs	.+12     	; 0x87e4 <__divsf3+0x18>
    87d8:	21 f4       	brne	.+8      	; 0x87e2 <__divsf3+0x16>
    87da:	5f 3f       	cpi	r21, 0xFF	; 255
    87dc:	19 f0       	breq	.+6      	; 0x87e4 <__divsf3+0x18>
    87de:	f0 c0       	rjmp	.+480    	; 0x89c0 <__fp_inf>
    87e0:	51 11       	cpse	r21, r1
    87e2:	d7 c1       	rjmp	.+942    	; 0x8b92 <__fp_szero>
    87e4:	1c c1       	rjmp	.+568    	; 0x8a1e <__fp_nan>

000087e6 <__divsf3x>:
    87e6:	9b d1       	rcall	.+822    	; 0x8b1e <__fp_split3>
    87e8:	98 f3       	brcs	.-26     	; 0x87d0 <__divsf3+0x4>

000087ea <__divsf3_pse>:
    87ea:	99 23       	and	r25, r25
    87ec:	c9 f3       	breq	.-14     	; 0x87e0 <__divsf3+0x14>
    87ee:	55 23       	and	r21, r21
    87f0:	b1 f3       	breq	.-20     	; 0x87de <__divsf3+0x12>
    87f2:	95 1b       	sub	r25, r21
    87f4:	55 0b       	sbc	r21, r21
    87f6:	bb 27       	eor	r27, r27
    87f8:	aa 27       	eor	r26, r26
    87fa:	62 17       	cp	r22, r18
    87fc:	73 07       	cpc	r23, r19
    87fe:	84 07       	cpc	r24, r20
    8800:	38 f0       	brcs	.+14     	; 0x8810 <__divsf3_pse+0x26>
    8802:	9f 5f       	subi	r25, 0xFF	; 255
    8804:	5f 4f       	sbci	r21, 0xFF	; 255
    8806:	22 0f       	add	r18, r18
    8808:	33 1f       	adc	r19, r19
    880a:	44 1f       	adc	r20, r20
    880c:	aa 1f       	adc	r26, r26
    880e:	a9 f3       	breq	.-22     	; 0x87fa <__divsf3_pse+0x10>
    8810:	33 d0       	rcall	.+102    	; 0x8878 <__divsf3_pse+0x8e>
    8812:	0e 2e       	mov	r0, r30
    8814:	3a f0       	brmi	.+14     	; 0x8824 <__divsf3_pse+0x3a>
    8816:	e0 e8       	ldi	r30, 0x80	; 128
    8818:	30 d0       	rcall	.+96     	; 0x887a <__divsf3_pse+0x90>
    881a:	91 50       	subi	r25, 0x01	; 1
    881c:	50 40       	sbci	r21, 0x00	; 0
    881e:	e6 95       	lsr	r30
    8820:	00 1c       	adc	r0, r0
    8822:	ca f7       	brpl	.-14     	; 0x8816 <__divsf3_pse+0x2c>
    8824:	29 d0       	rcall	.+82     	; 0x8878 <__divsf3_pse+0x8e>
    8826:	fe 2f       	mov	r31, r30
    8828:	27 d0       	rcall	.+78     	; 0x8878 <__divsf3_pse+0x8e>
    882a:	66 0f       	add	r22, r22
    882c:	77 1f       	adc	r23, r23
    882e:	88 1f       	adc	r24, r24
    8830:	bb 1f       	adc	r27, r27
    8832:	26 17       	cp	r18, r22
    8834:	37 07       	cpc	r19, r23
    8836:	48 07       	cpc	r20, r24
    8838:	ab 07       	cpc	r26, r27
    883a:	b0 e8       	ldi	r27, 0x80	; 128
    883c:	09 f0       	breq	.+2      	; 0x8840 <__divsf3_pse+0x56>
    883e:	bb 0b       	sbc	r27, r27
    8840:	80 2d       	mov	r24, r0
    8842:	bf 01       	movw	r22, r30
    8844:	ff 27       	eor	r31, r31
    8846:	93 58       	subi	r25, 0x83	; 131
    8848:	5f 4f       	sbci	r21, 0xFF	; 255
    884a:	2a f0       	brmi	.+10     	; 0x8856 <__divsf3_pse+0x6c>
    884c:	9e 3f       	cpi	r25, 0xFE	; 254
    884e:	51 05       	cpc	r21, r1
    8850:	68 f0       	brcs	.+26     	; 0x886c <__divsf3_pse+0x82>
    8852:	b6 c0       	rjmp	.+364    	; 0x89c0 <__fp_inf>
    8854:	9e c1       	rjmp	.+828    	; 0x8b92 <__fp_szero>
    8856:	5f 3f       	cpi	r21, 0xFF	; 255
    8858:	ec f3       	brlt	.-6      	; 0x8854 <__divsf3_pse+0x6a>
    885a:	98 3e       	cpi	r25, 0xE8	; 232
    885c:	dc f3       	brlt	.-10     	; 0x8854 <__divsf3_pse+0x6a>
    885e:	86 95       	lsr	r24
    8860:	77 95       	ror	r23
    8862:	67 95       	ror	r22
    8864:	b7 95       	ror	r27
    8866:	f7 95       	ror	r31
    8868:	9f 5f       	subi	r25, 0xFF	; 255
    886a:	c9 f7       	brne	.-14     	; 0x885e <__divsf3_pse+0x74>
    886c:	88 0f       	add	r24, r24
    886e:	91 1d       	adc	r25, r1
    8870:	96 95       	lsr	r25
    8872:	87 95       	ror	r24
    8874:	97 f9       	bld	r25, 7
    8876:	08 95       	ret
    8878:	e1 e0       	ldi	r30, 0x01	; 1
    887a:	66 0f       	add	r22, r22
    887c:	77 1f       	adc	r23, r23
    887e:	88 1f       	adc	r24, r24
    8880:	bb 1f       	adc	r27, r27
    8882:	62 17       	cp	r22, r18
    8884:	73 07       	cpc	r23, r19
    8886:	84 07       	cpc	r24, r20
    8888:	ba 07       	cpc	r27, r26
    888a:	20 f0       	brcs	.+8      	; 0x8894 <__divsf3_pse+0xaa>
    888c:	62 1b       	sub	r22, r18
    888e:	73 0b       	sbc	r23, r19
    8890:	84 0b       	sbc	r24, r20
    8892:	ba 0b       	sbc	r27, r26
    8894:	ee 1f       	adc	r30, r30
    8896:	88 f7       	brcc	.-30     	; 0x887a <__divsf3_pse+0x90>
    8898:	e0 95       	com	r30
    889a:	08 95       	ret

0000889c <__fixsfsi>:
    889c:	04 d0       	rcall	.+8      	; 0x88a6 <__fixunssfsi>
    889e:	68 94       	set
    88a0:	b1 11       	cpse	r27, r1
    88a2:	77 c1       	rjmp	.+750    	; 0x8b92 <__fp_szero>
    88a4:	08 95       	ret

000088a6 <__fixunssfsi>:
    88a6:	43 d1       	rcall	.+646    	; 0x8b2e <__fp_splitA>
    88a8:	88 f0       	brcs	.+34     	; 0x88cc <__fixunssfsi+0x26>
    88aa:	9f 57       	subi	r25, 0x7F	; 127
    88ac:	90 f0       	brcs	.+36     	; 0x88d2 <__fixunssfsi+0x2c>
    88ae:	b9 2f       	mov	r27, r25
    88b0:	99 27       	eor	r25, r25
    88b2:	b7 51       	subi	r27, 0x17	; 23
    88b4:	a0 f0       	brcs	.+40     	; 0x88de <__fixunssfsi+0x38>
    88b6:	d1 f0       	breq	.+52     	; 0x88ec <__fixunssfsi+0x46>
    88b8:	66 0f       	add	r22, r22
    88ba:	77 1f       	adc	r23, r23
    88bc:	88 1f       	adc	r24, r24
    88be:	99 1f       	adc	r25, r25
    88c0:	1a f0       	brmi	.+6      	; 0x88c8 <__fixunssfsi+0x22>
    88c2:	ba 95       	dec	r27
    88c4:	c9 f7       	brne	.-14     	; 0x88b8 <__fixunssfsi+0x12>
    88c6:	12 c0       	rjmp	.+36     	; 0x88ec <__fixunssfsi+0x46>
    88c8:	b1 30       	cpi	r27, 0x01	; 1
    88ca:	81 f0       	breq	.+32     	; 0x88ec <__fixunssfsi+0x46>
    88cc:	61 d1       	rcall	.+706    	; 0x8b90 <__fp_zero>
    88ce:	b1 e0       	ldi	r27, 0x01	; 1
    88d0:	08 95       	ret
    88d2:	5e c1       	rjmp	.+700    	; 0x8b90 <__fp_zero>
    88d4:	67 2f       	mov	r22, r23
    88d6:	78 2f       	mov	r23, r24
    88d8:	88 27       	eor	r24, r24
    88da:	b8 5f       	subi	r27, 0xF8	; 248
    88dc:	39 f0       	breq	.+14     	; 0x88ec <__fixunssfsi+0x46>
    88de:	b9 3f       	cpi	r27, 0xF9	; 249
    88e0:	cc f3       	brlt	.-14     	; 0x88d4 <__fixunssfsi+0x2e>
    88e2:	86 95       	lsr	r24
    88e4:	77 95       	ror	r23
    88e6:	67 95       	ror	r22
    88e8:	b3 95       	inc	r27
    88ea:	d9 f7       	brne	.-10     	; 0x88e2 <__fixunssfsi+0x3c>
    88ec:	3e f4       	brtc	.+14     	; 0x88fc <__fixunssfsi+0x56>
    88ee:	90 95       	com	r25
    88f0:	80 95       	com	r24
    88f2:	70 95       	com	r23
    88f4:	61 95       	neg	r22
    88f6:	7f 4f       	sbci	r23, 0xFF	; 255
    88f8:	8f 4f       	sbci	r24, 0xFF	; 255
    88fa:	9f 4f       	sbci	r25, 0xFF	; 255
    88fc:	08 95       	ret

000088fe <__floatunsisf>:
    88fe:	e8 94       	clt
    8900:	09 c0       	rjmp	.+18     	; 0x8914 <__floatsisf+0x12>

00008902 <__floatsisf>:
    8902:	97 fb       	bst	r25, 7
    8904:	3e f4       	brtc	.+14     	; 0x8914 <__floatsisf+0x12>
    8906:	90 95       	com	r25
    8908:	80 95       	com	r24
    890a:	70 95       	com	r23
    890c:	61 95       	neg	r22
    890e:	7f 4f       	sbci	r23, 0xFF	; 255
    8910:	8f 4f       	sbci	r24, 0xFF	; 255
    8912:	9f 4f       	sbci	r25, 0xFF	; 255
    8914:	99 23       	and	r25, r25
    8916:	a9 f0       	breq	.+42     	; 0x8942 <__floatsisf+0x40>
    8918:	f9 2f       	mov	r31, r25
    891a:	96 e9       	ldi	r25, 0x96	; 150
    891c:	bb 27       	eor	r27, r27
    891e:	93 95       	inc	r25
    8920:	f6 95       	lsr	r31
    8922:	87 95       	ror	r24
    8924:	77 95       	ror	r23
    8926:	67 95       	ror	r22
    8928:	b7 95       	ror	r27
    892a:	f1 11       	cpse	r31, r1
    892c:	f8 cf       	rjmp	.-16     	; 0x891e <__floatsisf+0x1c>
    892e:	fa f4       	brpl	.+62     	; 0x896e <__floatsisf+0x6c>
    8930:	bb 0f       	add	r27, r27
    8932:	11 f4       	brne	.+4      	; 0x8938 <__floatsisf+0x36>
    8934:	60 ff       	sbrs	r22, 0
    8936:	1b c0       	rjmp	.+54     	; 0x896e <__floatsisf+0x6c>
    8938:	6f 5f       	subi	r22, 0xFF	; 255
    893a:	7f 4f       	sbci	r23, 0xFF	; 255
    893c:	8f 4f       	sbci	r24, 0xFF	; 255
    893e:	9f 4f       	sbci	r25, 0xFF	; 255
    8940:	16 c0       	rjmp	.+44     	; 0x896e <__floatsisf+0x6c>
    8942:	88 23       	and	r24, r24
    8944:	11 f0       	breq	.+4      	; 0x894a <__floatsisf+0x48>
    8946:	96 e9       	ldi	r25, 0x96	; 150
    8948:	11 c0       	rjmp	.+34     	; 0x896c <__floatsisf+0x6a>
    894a:	77 23       	and	r23, r23
    894c:	21 f0       	breq	.+8      	; 0x8956 <__floatsisf+0x54>
    894e:	9e e8       	ldi	r25, 0x8E	; 142
    8950:	87 2f       	mov	r24, r23
    8952:	76 2f       	mov	r23, r22
    8954:	05 c0       	rjmp	.+10     	; 0x8960 <__floatsisf+0x5e>
    8956:	66 23       	and	r22, r22
    8958:	71 f0       	breq	.+28     	; 0x8976 <__floatsisf+0x74>
    895a:	96 e8       	ldi	r25, 0x86	; 134
    895c:	86 2f       	mov	r24, r22
    895e:	70 e0       	ldi	r23, 0x00	; 0
    8960:	60 e0       	ldi	r22, 0x00	; 0
    8962:	2a f0       	brmi	.+10     	; 0x896e <__floatsisf+0x6c>
    8964:	9a 95       	dec	r25
    8966:	66 0f       	add	r22, r22
    8968:	77 1f       	adc	r23, r23
    896a:	88 1f       	adc	r24, r24
    896c:	da f7       	brpl	.-10     	; 0x8964 <__floatsisf+0x62>
    896e:	88 0f       	add	r24, r24
    8970:	96 95       	lsr	r25
    8972:	87 95       	ror	r24
    8974:	97 f9       	bld	r25, 7
    8976:	08 95       	ret

00008978 <__fp_cmp>:
    8978:	99 0f       	add	r25, r25
    897a:	00 08       	sbc	r0, r0
    897c:	55 0f       	add	r21, r21
    897e:	aa 0b       	sbc	r26, r26
    8980:	e0 e8       	ldi	r30, 0x80	; 128
    8982:	fe ef       	ldi	r31, 0xFE	; 254
    8984:	16 16       	cp	r1, r22
    8986:	17 06       	cpc	r1, r23
    8988:	e8 07       	cpc	r30, r24
    898a:	f9 07       	cpc	r31, r25
    898c:	c0 f0       	brcs	.+48     	; 0x89be <__fp_cmp+0x46>
    898e:	12 16       	cp	r1, r18
    8990:	13 06       	cpc	r1, r19
    8992:	e4 07       	cpc	r30, r20
    8994:	f5 07       	cpc	r31, r21
    8996:	98 f0       	brcs	.+38     	; 0x89be <__fp_cmp+0x46>
    8998:	62 1b       	sub	r22, r18
    899a:	73 0b       	sbc	r23, r19
    899c:	84 0b       	sbc	r24, r20
    899e:	95 0b       	sbc	r25, r21
    89a0:	39 f4       	brne	.+14     	; 0x89b0 <__fp_cmp+0x38>
    89a2:	0a 26       	eor	r0, r26
    89a4:	61 f0       	breq	.+24     	; 0x89be <__fp_cmp+0x46>
    89a6:	23 2b       	or	r18, r19
    89a8:	24 2b       	or	r18, r20
    89aa:	25 2b       	or	r18, r21
    89ac:	21 f4       	brne	.+8      	; 0x89b6 <__fp_cmp+0x3e>
    89ae:	08 95       	ret
    89b0:	0a 26       	eor	r0, r26
    89b2:	09 f4       	brne	.+2      	; 0x89b6 <__fp_cmp+0x3e>
    89b4:	a1 40       	sbci	r26, 0x01	; 1
    89b6:	a6 95       	lsr	r26
    89b8:	8f ef       	ldi	r24, 0xFF	; 255
    89ba:	81 1d       	adc	r24, r1
    89bc:	81 1d       	adc	r24, r1
    89be:	08 95       	ret

000089c0 <__fp_inf>:
    89c0:	97 f9       	bld	r25, 7
    89c2:	9f 67       	ori	r25, 0x7F	; 127
    89c4:	80 e8       	ldi	r24, 0x80	; 128
    89c6:	70 e0       	ldi	r23, 0x00	; 0
    89c8:	60 e0       	ldi	r22, 0x00	; 0
    89ca:	08 95       	ret

000089cc <__fp_mintl>:
    89cc:	88 23       	and	r24, r24
    89ce:	71 f4       	brne	.+28     	; 0x89ec <__fp_mintl+0x20>
    89d0:	77 23       	and	r23, r23
    89d2:	21 f0       	breq	.+8      	; 0x89dc <__fp_mintl+0x10>
    89d4:	98 50       	subi	r25, 0x08	; 8
    89d6:	87 2b       	or	r24, r23
    89d8:	76 2f       	mov	r23, r22
    89da:	07 c0       	rjmp	.+14     	; 0x89ea <__fp_mintl+0x1e>
    89dc:	66 23       	and	r22, r22
    89de:	11 f4       	brne	.+4      	; 0x89e4 <__fp_mintl+0x18>
    89e0:	99 27       	eor	r25, r25
    89e2:	0d c0       	rjmp	.+26     	; 0x89fe <__fp_mintl+0x32>
    89e4:	90 51       	subi	r25, 0x10	; 16
    89e6:	86 2b       	or	r24, r22
    89e8:	70 e0       	ldi	r23, 0x00	; 0
    89ea:	60 e0       	ldi	r22, 0x00	; 0
    89ec:	2a f0       	brmi	.+10     	; 0x89f8 <__fp_mintl+0x2c>
    89ee:	9a 95       	dec	r25
    89f0:	66 0f       	add	r22, r22
    89f2:	77 1f       	adc	r23, r23
    89f4:	88 1f       	adc	r24, r24
    89f6:	da f7       	brpl	.-10     	; 0x89ee <__fp_mintl+0x22>
    89f8:	88 0f       	add	r24, r24
    89fa:	96 95       	lsr	r25
    89fc:	87 95       	ror	r24
    89fe:	97 f9       	bld	r25, 7
    8a00:	08 95       	ret

00008a02 <__fp_mpack>:
    8a02:	9f 3f       	cpi	r25, 0xFF	; 255
    8a04:	31 f0       	breq	.+12     	; 0x8a12 <__fp_mpack_finite+0xc>

00008a06 <__fp_mpack_finite>:
    8a06:	91 50       	subi	r25, 0x01	; 1
    8a08:	20 f4       	brcc	.+8      	; 0x8a12 <__fp_mpack_finite+0xc>
    8a0a:	87 95       	ror	r24
    8a0c:	77 95       	ror	r23
    8a0e:	67 95       	ror	r22
    8a10:	b7 95       	ror	r27
    8a12:	88 0f       	add	r24, r24
    8a14:	91 1d       	adc	r25, r1
    8a16:	96 95       	lsr	r25
    8a18:	87 95       	ror	r24
    8a1a:	97 f9       	bld	r25, 7
    8a1c:	08 95       	ret

00008a1e <__fp_nan>:
    8a1e:	9f ef       	ldi	r25, 0xFF	; 255
    8a20:	80 ec       	ldi	r24, 0xC0	; 192
    8a22:	08 95       	ret

00008a24 <__fp_powser>:
    8a24:	df 93       	push	r29
    8a26:	cf 93       	push	r28
    8a28:	1f 93       	push	r17
    8a2a:	0f 93       	push	r16
    8a2c:	ff 92       	push	r15
    8a2e:	ef 92       	push	r14
    8a30:	df 92       	push	r13
    8a32:	7b 01       	movw	r14, r22
    8a34:	8c 01       	movw	r16, r24
    8a36:	68 94       	set
    8a38:	05 c0       	rjmp	.+10     	; 0x8a44 <__fp_powser+0x20>
    8a3a:	da 2e       	mov	r13, r26
    8a3c:	ef 01       	movw	r28, r30
    8a3e:	8d d1       	rcall	.+794    	; 0x8d5a <__mulsf3x>
    8a40:	fe 01       	movw	r30, r28
    8a42:	e8 94       	clt
    8a44:	a5 91       	lpm	r26, Z+
    8a46:	25 91       	lpm	r18, Z+
    8a48:	35 91       	lpm	r19, Z+
    8a4a:	45 91       	lpm	r20, Z+
    8a4c:	55 91       	lpm	r21, Z+
    8a4e:	ae f3       	brts	.-22     	; 0x8a3a <__fp_powser+0x16>
    8a50:	ef 01       	movw	r28, r30
    8a52:	27 de       	rcall	.-946    	; 0x86a2 <__addsf3x>
    8a54:	fe 01       	movw	r30, r28
    8a56:	97 01       	movw	r18, r14
    8a58:	a8 01       	movw	r20, r16
    8a5a:	da 94       	dec	r13
    8a5c:	79 f7       	brne	.-34     	; 0x8a3c <__fp_powser+0x18>
    8a5e:	df 90       	pop	r13
    8a60:	ef 90       	pop	r14
    8a62:	ff 90       	pop	r15
    8a64:	0f 91       	pop	r16
    8a66:	1f 91       	pop	r17
    8a68:	cf 91       	pop	r28
    8a6a:	df 91       	pop	r29
    8a6c:	08 95       	ret

00008a6e <__fp_pscA>:
    8a6e:	00 24       	eor	r0, r0
    8a70:	0a 94       	dec	r0
    8a72:	16 16       	cp	r1, r22
    8a74:	17 06       	cpc	r1, r23
    8a76:	18 06       	cpc	r1, r24
    8a78:	09 06       	cpc	r0, r25
    8a7a:	08 95       	ret

00008a7c <__fp_pscB>:
    8a7c:	00 24       	eor	r0, r0
    8a7e:	0a 94       	dec	r0
    8a80:	12 16       	cp	r1, r18
    8a82:	13 06       	cpc	r1, r19
    8a84:	14 06       	cpc	r1, r20
    8a86:	05 06       	cpc	r0, r21
    8a88:	08 95       	ret
    8a8a:	c9 cf       	rjmp	.-110    	; 0x8a1e <__fp_nan>

00008a8c <__fp_rempio2>:
    8a8c:	50 d0       	rcall	.+160    	; 0x8b2e <__fp_splitA>
    8a8e:	e8 f3       	brcs	.-6      	; 0x8a8a <__fp_pscB+0xe>
    8a90:	e8 94       	clt
    8a92:	e0 e0       	ldi	r30, 0x00	; 0
    8a94:	bb 27       	eor	r27, r27
    8a96:	9f 57       	subi	r25, 0x7F	; 127
    8a98:	f0 f0       	brcs	.+60     	; 0x8ad6 <__fp_rempio2+0x4a>
    8a9a:	2a ed       	ldi	r18, 0xDA	; 218
    8a9c:	3f e0       	ldi	r19, 0x0F	; 15
    8a9e:	49 ec       	ldi	r20, 0xC9	; 201
    8aa0:	06 c0       	rjmp	.+12     	; 0x8aae <__fp_rempio2+0x22>
    8aa2:	ee 0f       	add	r30, r30
    8aa4:	bb 0f       	add	r27, r27
    8aa6:	66 1f       	adc	r22, r22
    8aa8:	77 1f       	adc	r23, r23
    8aaa:	88 1f       	adc	r24, r24
    8aac:	28 f0       	brcs	.+10     	; 0x8ab8 <__fp_rempio2+0x2c>
    8aae:	b2 3a       	cpi	r27, 0xA2	; 162
    8ab0:	62 07       	cpc	r22, r18
    8ab2:	73 07       	cpc	r23, r19
    8ab4:	84 07       	cpc	r24, r20
    8ab6:	28 f0       	brcs	.+10     	; 0x8ac2 <__fp_rempio2+0x36>
    8ab8:	b2 5a       	subi	r27, 0xA2	; 162
    8aba:	62 0b       	sbc	r22, r18
    8abc:	73 0b       	sbc	r23, r19
    8abe:	84 0b       	sbc	r24, r20
    8ac0:	e3 95       	inc	r30
    8ac2:	9a 95       	dec	r25
    8ac4:	72 f7       	brpl	.-36     	; 0x8aa2 <__fp_rempio2+0x16>
    8ac6:	80 38       	cpi	r24, 0x80	; 128
    8ac8:	30 f4       	brcc	.+12     	; 0x8ad6 <__fp_rempio2+0x4a>
    8aca:	9a 95       	dec	r25
    8acc:	bb 0f       	add	r27, r27
    8ace:	66 1f       	adc	r22, r22
    8ad0:	77 1f       	adc	r23, r23
    8ad2:	88 1f       	adc	r24, r24
    8ad4:	d2 f7       	brpl	.-12     	; 0x8aca <__fp_rempio2+0x3e>
    8ad6:	90 48       	sbci	r25, 0x80	; 128
    8ad8:	96 cf       	rjmp	.-212    	; 0x8a06 <__fp_mpack_finite>

00008ada <__fp_round>:
    8ada:	09 2e       	mov	r0, r25
    8adc:	03 94       	inc	r0
    8ade:	00 0c       	add	r0, r0
    8ae0:	11 f4       	brne	.+4      	; 0x8ae6 <__fp_round+0xc>
    8ae2:	88 23       	and	r24, r24
    8ae4:	52 f0       	brmi	.+20     	; 0x8afa <__fp_round+0x20>
    8ae6:	bb 0f       	add	r27, r27
    8ae8:	40 f4       	brcc	.+16     	; 0x8afa <__fp_round+0x20>
    8aea:	bf 2b       	or	r27, r31
    8aec:	11 f4       	brne	.+4      	; 0x8af2 <__fp_round+0x18>
    8aee:	60 ff       	sbrs	r22, 0
    8af0:	04 c0       	rjmp	.+8      	; 0x8afa <__fp_round+0x20>
    8af2:	6f 5f       	subi	r22, 0xFF	; 255
    8af4:	7f 4f       	sbci	r23, 0xFF	; 255
    8af6:	8f 4f       	sbci	r24, 0xFF	; 255
    8af8:	9f 4f       	sbci	r25, 0xFF	; 255
    8afa:	08 95       	ret

00008afc <__fp_sinus>:
    8afc:	ef 93       	push	r30
    8afe:	e0 ff       	sbrs	r30, 0
    8b00:	06 c0       	rjmp	.+12     	; 0x8b0e <__fp_sinus+0x12>
    8b02:	a2 ea       	ldi	r26, 0xA2	; 162
    8b04:	2a ed       	ldi	r18, 0xDA	; 218
    8b06:	3f e0       	ldi	r19, 0x0F	; 15
    8b08:	49 ec       	ldi	r20, 0xC9	; 201
    8b0a:	5f eb       	ldi	r21, 0xBF	; 191
    8b0c:	ca dd       	rcall	.-1132   	; 0x86a2 <__addsf3x>
    8b0e:	e5 df       	rcall	.-54     	; 0x8ada <__fp_round>
    8b10:	0f 90       	pop	r0
    8b12:	03 94       	inc	r0
    8b14:	01 fc       	sbrc	r0, 1
    8b16:	90 58       	subi	r25, 0x80	; 128
    8b18:	e5 e1       	ldi	r30, 0x15	; 21
    8b1a:	f2 e0       	ldi	r31, 0x02	; 2
    8b1c:	d2 c1       	rjmp	.+932    	; 0x8ec2 <__fp_powsodd>

00008b1e <__fp_split3>:
    8b1e:	57 fd       	sbrc	r21, 7
    8b20:	90 58       	subi	r25, 0x80	; 128
    8b22:	44 0f       	add	r20, r20
    8b24:	55 1f       	adc	r21, r21
    8b26:	59 f0       	breq	.+22     	; 0x8b3e <__fp_splitA+0x10>
    8b28:	5f 3f       	cpi	r21, 0xFF	; 255
    8b2a:	71 f0       	breq	.+28     	; 0x8b48 <__fp_splitA+0x1a>
    8b2c:	47 95       	ror	r20

00008b2e <__fp_splitA>:
    8b2e:	88 0f       	add	r24, r24
    8b30:	97 fb       	bst	r25, 7
    8b32:	99 1f       	adc	r25, r25
    8b34:	61 f0       	breq	.+24     	; 0x8b4e <__fp_splitA+0x20>
    8b36:	9f 3f       	cpi	r25, 0xFF	; 255
    8b38:	79 f0       	breq	.+30     	; 0x8b58 <__fp_splitA+0x2a>
    8b3a:	87 95       	ror	r24
    8b3c:	08 95       	ret
    8b3e:	12 16       	cp	r1, r18
    8b40:	13 06       	cpc	r1, r19
    8b42:	14 06       	cpc	r1, r20
    8b44:	55 1f       	adc	r21, r21
    8b46:	f2 cf       	rjmp	.-28     	; 0x8b2c <__fp_split3+0xe>
    8b48:	46 95       	lsr	r20
    8b4a:	f1 df       	rcall	.-30     	; 0x8b2e <__fp_splitA>
    8b4c:	08 c0       	rjmp	.+16     	; 0x8b5e <__fp_splitA+0x30>
    8b4e:	16 16       	cp	r1, r22
    8b50:	17 06       	cpc	r1, r23
    8b52:	18 06       	cpc	r1, r24
    8b54:	99 1f       	adc	r25, r25
    8b56:	f1 cf       	rjmp	.-30     	; 0x8b3a <__fp_splitA+0xc>
    8b58:	86 95       	lsr	r24
    8b5a:	71 05       	cpc	r23, r1
    8b5c:	61 05       	cpc	r22, r1
    8b5e:	08 94       	sec
    8b60:	08 95       	ret

00008b62 <__fp_trunc>:
    8b62:	e5 df       	rcall	.-54     	; 0x8b2e <__fp_splitA>
    8b64:	a0 f0       	brcs	.+40     	; 0x8b8e <__fp_trunc+0x2c>
    8b66:	be e7       	ldi	r27, 0x7E	; 126
    8b68:	b9 17       	cp	r27, r25
    8b6a:	88 f4       	brcc	.+34     	; 0x8b8e <__fp_trunc+0x2c>
    8b6c:	bb 27       	eor	r27, r27
    8b6e:	9f 38       	cpi	r25, 0x8F	; 143
    8b70:	60 f4       	brcc	.+24     	; 0x8b8a <__fp_trunc+0x28>
    8b72:	16 16       	cp	r1, r22
    8b74:	b1 1d       	adc	r27, r1
    8b76:	67 2f       	mov	r22, r23
    8b78:	78 2f       	mov	r23, r24
    8b7a:	88 27       	eor	r24, r24
    8b7c:	98 5f       	subi	r25, 0xF8	; 248
    8b7e:	f7 cf       	rjmp	.-18     	; 0x8b6e <__fp_trunc+0xc>
    8b80:	86 95       	lsr	r24
    8b82:	77 95       	ror	r23
    8b84:	67 95       	ror	r22
    8b86:	b1 1d       	adc	r27, r1
    8b88:	93 95       	inc	r25
    8b8a:	96 39       	cpi	r25, 0x96	; 150
    8b8c:	c8 f3       	brcs	.-14     	; 0x8b80 <__fp_trunc+0x1e>
    8b8e:	08 95       	ret

00008b90 <__fp_zero>:
    8b90:	e8 94       	clt

00008b92 <__fp_szero>:
    8b92:	bb 27       	eor	r27, r27
    8b94:	66 27       	eor	r22, r22
    8b96:	77 27       	eor	r23, r23
    8b98:	cb 01       	movw	r24, r22
    8b9a:	97 f9       	bld	r25, 7
    8b9c:	08 95       	ret

00008b9e <__gesf2>:
    8b9e:	ec de       	rcall	.-552    	; 0x8978 <__fp_cmp>
    8ba0:	08 f4       	brcc	.+2      	; 0x8ba4 <__gesf2+0x6>
    8ba2:	8f ef       	ldi	r24, 0xFF	; 255
    8ba4:	08 95       	ret
    8ba6:	63 df       	rcall	.-314    	; 0x8a6e <__fp_pscA>
    8ba8:	19 f0       	breq	.+6      	; 0x8bb0 <__gesf2+0x12>
    8baa:	68 df       	rcall	.-304    	; 0x8a7c <__fp_pscB>
    8bac:	09 f0       	breq	.+2      	; 0x8bb0 <__gesf2+0x12>
    8bae:	37 cf       	rjmp	.-402    	; 0x8a1e <__fp_nan>
    8bb0:	07 cf       	rjmp	.-498    	; 0x89c0 <__fp_inf>
    8bb2:	b9 01       	movw	r22, r18
    8bb4:	ca 01       	movw	r24, r20
    8bb6:	25 cf       	rjmp	.-438    	; 0x8a02 <__fp_mpack>

00008bb8 <hypot>:
    8bb8:	9f 77       	andi	r25, 0x7F	; 127
    8bba:	5f 77       	andi	r21, 0x7F	; 127
    8bbc:	b0 df       	rcall	.-160    	; 0x8b1e <__fp_split3>
    8bbe:	98 f3       	brcs	.-26     	; 0x8ba6 <__gesf2+0x8>
    8bc0:	99 23       	and	r25, r25
    8bc2:	b9 f3       	breq	.-18     	; 0x8bb2 <__gesf2+0x14>
    8bc4:	55 23       	and	r21, r21
    8bc6:	b9 f3       	breq	.-18     	; 0x8bb6 <__gesf2+0x18>
    8bc8:	ff 27       	eor	r31, r31
    8bca:	95 17       	cp	r25, r21
    8bcc:	58 f4       	brcc	.+22     	; 0x8be4 <hypot+0x2c>
    8bce:	e5 2f       	mov	r30, r21
    8bd0:	e9 1b       	sub	r30, r25
    8bd2:	ed 30       	cpi	r30, 0x0D	; 13
    8bd4:	70 f7       	brcc	.-36     	; 0x8bb2 <__gesf2+0x14>
    8bd6:	5e 3b       	cpi	r21, 0xBE	; 190
    8bd8:	10 f0       	brcs	.+4      	; 0x8bde <hypot+0x26>
    8bda:	f1 e4       	ldi	r31, 0x41	; 65
    8bdc:	1c c0       	rjmp	.+56     	; 0x8c16 <hypot+0x5e>
    8bde:	90 34       	cpi	r25, 0x40	; 64
    8be0:	e0 f4       	brcc	.+56     	; 0x8c1a <hypot+0x62>
    8be2:	0a c0       	rjmp	.+20     	; 0x8bf8 <hypot+0x40>
    8be4:	e9 2f       	mov	r30, r25
    8be6:	e5 1b       	sub	r30, r21
    8be8:	ed 30       	cpi	r30, 0x0D	; 13
    8bea:	28 f7       	brcc	.-54     	; 0x8bb6 <__gesf2+0x18>
    8bec:	9e 3b       	cpi	r25, 0xBE	; 190
    8bee:	10 f0       	brcs	.+4      	; 0x8bf4 <hypot+0x3c>
    8bf0:	f1 e4       	ldi	r31, 0x41	; 65
    8bf2:	11 c0       	rjmp	.+34     	; 0x8c16 <hypot+0x5e>
    8bf4:	50 34       	cpi	r21, 0x40	; 64
    8bf6:	88 f4       	brcc	.+34     	; 0x8c1a <hypot+0x62>
    8bf8:	f9 ea       	ldi	r31, 0xA9	; 169
    8bfa:	88 23       	and	r24, r24
    8bfc:	2a f0       	brmi	.+10     	; 0x8c08 <hypot+0x50>
    8bfe:	9a 95       	dec	r25
    8c00:	66 0f       	add	r22, r22
    8c02:	77 1f       	adc	r23, r23
    8c04:	88 1f       	adc	r24, r24
    8c06:	da f7       	brpl	.-10     	; 0x8bfe <hypot+0x46>
    8c08:	44 23       	and	r20, r20
    8c0a:	2a f0       	brmi	.+10     	; 0x8c16 <hypot+0x5e>
    8c0c:	5a 95       	dec	r21
    8c0e:	22 0f       	add	r18, r18
    8c10:	33 1f       	adc	r19, r19
    8c12:	44 1f       	adc	r20, r20
    8c14:	da f7       	brpl	.-10     	; 0x8c0c <hypot+0x54>
    8c16:	9f 1b       	sub	r25, r31
    8c18:	5f 1b       	sub	r21, r31
    8c1a:	ff 93       	push	r31
    8c1c:	1f 93       	push	r17
    8c1e:	0f 93       	push	r16
    8c20:	ff 92       	push	r15
    8c22:	ef 92       	push	r14
    8c24:	79 01       	movw	r14, r18
    8c26:	8a 01       	movw	r16, r20
    8c28:	bb 27       	eor	r27, r27
    8c2a:	ab 2f       	mov	r26, r27
    8c2c:	9b 01       	movw	r18, r22
    8c2e:	ac 01       	movw	r20, r24
    8c30:	96 d0       	rcall	.+300    	; 0x8d5e <__mulsf3_pse>
    8c32:	97 01       	movw	r18, r14
    8c34:	a8 01       	movw	r20, r16
    8c36:	bf 93       	push	r27
    8c38:	7b 01       	movw	r14, r22
    8c3a:	8c 01       	movw	r16, r24
    8c3c:	aa 27       	eor	r26, r26
    8c3e:	ba 2f       	mov	r27, r26
    8c40:	b9 01       	movw	r22, r18
    8c42:	ca 01       	movw	r24, r20
    8c44:	8c d0       	rcall	.+280    	; 0x8d5e <__mulsf3_pse>
    8c46:	af 91       	pop	r26
    8c48:	97 01       	movw	r18, r14
    8c4a:	a8 01       	movw	r20, r16
    8c4c:	ef 90       	pop	r14
    8c4e:	ff 90       	pop	r15
    8c50:	0f 91       	pop	r16
    8c52:	1f 91       	pop	r17
    8c54:	26 dd       	rcall	.-1460   	; 0x86a2 <__addsf3x>
    8c56:	41 df       	rcall	.-382    	; 0x8ada <__fp_round>
    8c58:	e1 d0       	rcall	.+450    	; 0x8e1c <sqrt>
    8c5a:	4f 91       	pop	r20
    8c5c:	40 ff       	sbrs	r20, 0
    8c5e:	08 95       	ret
    8c60:	55 27       	eor	r21, r21
    8c62:	47 fd       	sbrc	r20, 7
    8c64:	50 95       	com	r21
    8c66:	09 c0       	rjmp	.+18     	; 0x8c7a <ldexp>

00008c68 <inverse>:
    8c68:	9b 01       	movw	r18, r22
    8c6a:	ac 01       	movw	r20, r24
    8c6c:	60 e0       	ldi	r22, 0x00	; 0
    8c6e:	70 e0       	ldi	r23, 0x00	; 0
    8c70:	80 e8       	ldi	r24, 0x80	; 128
    8c72:	9f e3       	ldi	r25, 0x3F	; 63
    8c74:	ab cd       	rjmp	.-1194   	; 0x87cc <__divsf3>
    8c76:	a4 ce       	rjmp	.-696    	; 0x89c0 <__fp_inf>
    8c78:	c4 ce       	rjmp	.-632    	; 0x8a02 <__fp_mpack>

00008c7a <ldexp>:
    8c7a:	59 df       	rcall	.-334    	; 0x8b2e <__fp_splitA>
    8c7c:	e8 f3       	brcs	.-6      	; 0x8c78 <inverse+0x10>
    8c7e:	99 23       	and	r25, r25
    8c80:	d9 f3       	breq	.-10     	; 0x8c78 <inverse+0x10>
    8c82:	94 0f       	add	r25, r20
    8c84:	51 1d       	adc	r21, r1
    8c86:	bb f3       	brvs	.-18     	; 0x8c76 <inverse+0xe>
    8c88:	91 50       	subi	r25, 0x01	; 1
    8c8a:	50 40       	sbci	r21, 0x00	; 0
    8c8c:	94 f0       	brlt	.+36     	; 0x8cb2 <ldexp+0x38>
    8c8e:	59 f0       	breq	.+22     	; 0x8ca6 <ldexp+0x2c>
    8c90:	88 23       	and	r24, r24
    8c92:	32 f0       	brmi	.+12     	; 0x8ca0 <ldexp+0x26>
    8c94:	66 0f       	add	r22, r22
    8c96:	77 1f       	adc	r23, r23
    8c98:	88 1f       	adc	r24, r24
    8c9a:	91 50       	subi	r25, 0x01	; 1
    8c9c:	50 40       	sbci	r21, 0x00	; 0
    8c9e:	c1 f7       	brne	.-16     	; 0x8c90 <ldexp+0x16>
    8ca0:	9e 3f       	cpi	r25, 0xFE	; 254
    8ca2:	51 05       	cpc	r21, r1
    8ca4:	44 f7       	brge	.-48     	; 0x8c76 <inverse+0xe>
    8ca6:	88 0f       	add	r24, r24
    8ca8:	91 1d       	adc	r25, r1
    8caa:	96 95       	lsr	r25
    8cac:	87 95       	ror	r24
    8cae:	97 f9       	bld	r25, 7
    8cb0:	08 95       	ret
    8cb2:	5f 3f       	cpi	r21, 0xFF	; 255
    8cb4:	ac f0       	brlt	.+42     	; 0x8ce0 <ldexp+0x66>
    8cb6:	98 3e       	cpi	r25, 0xE8	; 232
    8cb8:	9c f0       	brlt	.+38     	; 0x8ce0 <ldexp+0x66>
    8cba:	bb 27       	eor	r27, r27
    8cbc:	86 95       	lsr	r24
    8cbe:	77 95       	ror	r23
    8cc0:	67 95       	ror	r22
    8cc2:	b7 95       	ror	r27
    8cc4:	08 f4       	brcc	.+2      	; 0x8cc8 <ldexp+0x4e>
    8cc6:	b1 60       	ori	r27, 0x01	; 1
    8cc8:	93 95       	inc	r25
    8cca:	c1 f7       	brne	.-16     	; 0x8cbc <ldexp+0x42>
    8ccc:	bb 0f       	add	r27, r27
    8cce:	58 f7       	brcc	.-42     	; 0x8ca6 <ldexp+0x2c>
    8cd0:	11 f4       	brne	.+4      	; 0x8cd6 <ldexp+0x5c>
    8cd2:	60 ff       	sbrs	r22, 0
    8cd4:	e8 cf       	rjmp	.-48     	; 0x8ca6 <ldexp+0x2c>
    8cd6:	6f 5f       	subi	r22, 0xFF	; 255
    8cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    8cda:	8f 4f       	sbci	r24, 0xFF	; 255
    8cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    8cde:	e3 cf       	rjmp	.-58     	; 0x8ca6 <ldexp+0x2c>
    8ce0:	58 cf       	rjmp	.-336    	; 0x8b92 <__fp_szero>

00008ce2 <lround>:
    8ce2:	25 df       	rcall	.-438    	; 0x8b2e <__fp_splitA>
    8ce4:	58 f1       	brcs	.+86     	; 0x8d3c <lround+0x5a>
    8ce6:	9e 57       	subi	r25, 0x7E	; 126
    8ce8:	58 f1       	brcs	.+86     	; 0x8d40 <lround+0x5e>
    8cea:	98 51       	subi	r25, 0x18	; 24
    8cec:	a0 f0       	brcs	.+40     	; 0x8d16 <lround+0x34>
    8cee:	e9 f0       	breq	.+58     	; 0x8d2a <lround+0x48>
    8cf0:	98 30       	cpi	r25, 0x08	; 8
    8cf2:	20 f5       	brcc	.+72     	; 0x8d3c <lround+0x5a>
    8cf4:	09 2e       	mov	r0, r25
    8cf6:	99 27       	eor	r25, r25
    8cf8:	66 0f       	add	r22, r22
    8cfa:	77 1f       	adc	r23, r23
    8cfc:	88 1f       	adc	r24, r24
    8cfe:	99 1f       	adc	r25, r25
    8d00:	0a 94       	dec	r0
    8d02:	d1 f7       	brne	.-12     	; 0x8cf8 <lround+0x16>
    8d04:	12 c0       	rjmp	.+36     	; 0x8d2a <lround+0x48>
    8d06:	06 2e       	mov	r0, r22
    8d08:	67 2f       	mov	r22, r23
    8d0a:	78 2f       	mov	r23, r24
    8d0c:	88 27       	eor	r24, r24
    8d0e:	98 5f       	subi	r25, 0xF8	; 248
    8d10:	11 f4       	brne	.+4      	; 0x8d16 <lround+0x34>
    8d12:	00 0c       	add	r0, r0
    8d14:	07 c0       	rjmp	.+14     	; 0x8d24 <lround+0x42>
    8d16:	99 3f       	cpi	r25, 0xF9	; 249
    8d18:	b4 f3       	brlt	.-20     	; 0x8d06 <lround+0x24>
    8d1a:	86 95       	lsr	r24
    8d1c:	77 95       	ror	r23
    8d1e:	67 95       	ror	r22
    8d20:	93 95       	inc	r25
    8d22:	d9 f7       	brne	.-10     	; 0x8d1a <lround+0x38>
    8d24:	61 1d       	adc	r22, r1
    8d26:	71 1d       	adc	r23, r1
    8d28:	81 1d       	adc	r24, r1
    8d2a:	3e f4       	brtc	.+14     	; 0x8d3a <lround+0x58>
    8d2c:	90 95       	com	r25
    8d2e:	80 95       	com	r24
    8d30:	70 95       	com	r23
    8d32:	61 95       	neg	r22
    8d34:	7f 4f       	sbci	r23, 0xFF	; 255
    8d36:	8f 4f       	sbci	r24, 0xFF	; 255
    8d38:	9f 4f       	sbci	r25, 0xFF	; 255
    8d3a:	08 95       	ret
    8d3c:	68 94       	set
    8d3e:	29 cf       	rjmp	.-430    	; 0x8b92 <__fp_szero>
    8d40:	27 cf       	rjmp	.-434    	; 0x8b90 <__fp_zero>

00008d42 <__mulsf3>:
    8d42:	0b d0       	rcall	.+22     	; 0x8d5a <__mulsf3x>
    8d44:	ca ce       	rjmp	.-620    	; 0x8ada <__fp_round>
    8d46:	93 de       	rcall	.-730    	; 0x8a6e <__fp_pscA>
    8d48:	28 f0       	brcs	.+10     	; 0x8d54 <__mulsf3+0x12>
    8d4a:	98 de       	rcall	.-720    	; 0x8a7c <__fp_pscB>
    8d4c:	18 f0       	brcs	.+6      	; 0x8d54 <__mulsf3+0x12>
    8d4e:	95 23       	and	r25, r21
    8d50:	09 f0       	breq	.+2      	; 0x8d54 <__mulsf3+0x12>
    8d52:	36 ce       	rjmp	.-916    	; 0x89c0 <__fp_inf>
    8d54:	64 ce       	rjmp	.-824    	; 0x8a1e <__fp_nan>
    8d56:	11 24       	eor	r1, r1
    8d58:	1c cf       	rjmp	.-456    	; 0x8b92 <__fp_szero>

00008d5a <__mulsf3x>:
    8d5a:	e1 de       	rcall	.-574    	; 0x8b1e <__fp_split3>
    8d5c:	a0 f3       	brcs	.-24     	; 0x8d46 <__mulsf3+0x4>

00008d5e <__mulsf3_pse>:
    8d5e:	95 9f       	mul	r25, r21
    8d60:	d1 f3       	breq	.-12     	; 0x8d56 <__mulsf3+0x14>
    8d62:	95 0f       	add	r25, r21
    8d64:	50 e0       	ldi	r21, 0x00	; 0
    8d66:	55 1f       	adc	r21, r21
    8d68:	62 9f       	mul	r22, r18
    8d6a:	f0 01       	movw	r30, r0
    8d6c:	72 9f       	mul	r23, r18
    8d6e:	bb 27       	eor	r27, r27
    8d70:	f0 0d       	add	r31, r0
    8d72:	b1 1d       	adc	r27, r1
    8d74:	63 9f       	mul	r22, r19
    8d76:	aa 27       	eor	r26, r26
    8d78:	f0 0d       	add	r31, r0
    8d7a:	b1 1d       	adc	r27, r1
    8d7c:	aa 1f       	adc	r26, r26
    8d7e:	64 9f       	mul	r22, r20
    8d80:	66 27       	eor	r22, r22
    8d82:	b0 0d       	add	r27, r0
    8d84:	a1 1d       	adc	r26, r1
    8d86:	66 1f       	adc	r22, r22
    8d88:	82 9f       	mul	r24, r18
    8d8a:	22 27       	eor	r18, r18
    8d8c:	b0 0d       	add	r27, r0
    8d8e:	a1 1d       	adc	r26, r1
    8d90:	62 1f       	adc	r22, r18
    8d92:	73 9f       	mul	r23, r19
    8d94:	b0 0d       	add	r27, r0
    8d96:	a1 1d       	adc	r26, r1
    8d98:	62 1f       	adc	r22, r18
    8d9a:	83 9f       	mul	r24, r19
    8d9c:	a0 0d       	add	r26, r0
    8d9e:	61 1d       	adc	r22, r1
    8da0:	22 1f       	adc	r18, r18
    8da2:	74 9f       	mul	r23, r20
    8da4:	33 27       	eor	r19, r19
    8da6:	a0 0d       	add	r26, r0
    8da8:	61 1d       	adc	r22, r1
    8daa:	23 1f       	adc	r18, r19
    8dac:	84 9f       	mul	r24, r20
    8dae:	60 0d       	add	r22, r0
    8db0:	21 1d       	adc	r18, r1
    8db2:	82 2f       	mov	r24, r18
    8db4:	76 2f       	mov	r23, r22
    8db6:	6a 2f       	mov	r22, r26
    8db8:	11 24       	eor	r1, r1
    8dba:	9f 57       	subi	r25, 0x7F	; 127
    8dbc:	50 40       	sbci	r21, 0x00	; 0
    8dbe:	8a f0       	brmi	.+34     	; 0x8de2 <__mulsf3_pse+0x84>
    8dc0:	e1 f0       	breq	.+56     	; 0x8dfa <__mulsf3_pse+0x9c>
    8dc2:	88 23       	and	r24, r24
    8dc4:	4a f0       	brmi	.+18     	; 0x8dd8 <__mulsf3_pse+0x7a>
    8dc6:	ee 0f       	add	r30, r30
    8dc8:	ff 1f       	adc	r31, r31
    8dca:	bb 1f       	adc	r27, r27
    8dcc:	66 1f       	adc	r22, r22
    8dce:	77 1f       	adc	r23, r23
    8dd0:	88 1f       	adc	r24, r24
    8dd2:	91 50       	subi	r25, 0x01	; 1
    8dd4:	50 40       	sbci	r21, 0x00	; 0
    8dd6:	a9 f7       	brne	.-22     	; 0x8dc2 <__mulsf3_pse+0x64>
    8dd8:	9e 3f       	cpi	r25, 0xFE	; 254
    8dda:	51 05       	cpc	r21, r1
    8ddc:	70 f0       	brcs	.+28     	; 0x8dfa <__mulsf3_pse+0x9c>
    8dde:	f0 cd       	rjmp	.-1056   	; 0x89c0 <__fp_inf>
    8de0:	d8 ce       	rjmp	.-592    	; 0x8b92 <__fp_szero>
    8de2:	5f 3f       	cpi	r21, 0xFF	; 255
    8de4:	ec f3       	brlt	.-6      	; 0x8de0 <__mulsf3_pse+0x82>
    8de6:	98 3e       	cpi	r25, 0xE8	; 232
    8de8:	dc f3       	brlt	.-10     	; 0x8de0 <__mulsf3_pse+0x82>
    8dea:	86 95       	lsr	r24
    8dec:	77 95       	ror	r23
    8dee:	67 95       	ror	r22
    8df0:	b7 95       	ror	r27
    8df2:	f7 95       	ror	r31
    8df4:	e7 95       	ror	r30
    8df6:	9f 5f       	subi	r25, 0xFF	; 255
    8df8:	c1 f7       	brne	.-16     	; 0x8dea <__mulsf3_pse+0x8c>
    8dfa:	fe 2b       	or	r31, r30
    8dfc:	88 0f       	add	r24, r24
    8dfe:	91 1d       	adc	r25, r1
    8e00:	96 95       	lsr	r25
    8e02:	87 95       	ror	r24
    8e04:	97 f9       	bld	r25, 7
    8e06:	08 95       	ret

00008e08 <sin>:
    8e08:	9f 93       	push	r25
    8e0a:	40 de       	rcall	.-896    	; 0x8a8c <__fp_rempio2>
    8e0c:	0f 90       	pop	r0
    8e0e:	07 fc       	sbrc	r0, 7
    8e10:	ee 5f       	subi	r30, 0xFE	; 254
    8e12:	74 ce       	rjmp	.-792    	; 0x8afc <__fp_sinus>
    8e14:	11 f4       	brne	.+4      	; 0x8e1a <sin+0x12>
    8e16:	0e f4       	brtc	.+2      	; 0x8e1a <sin+0x12>
    8e18:	02 ce       	rjmp	.-1020   	; 0x8a1e <__fp_nan>
    8e1a:	f3 cd       	rjmp	.-1050   	; 0x8a02 <__fp_mpack>

00008e1c <sqrt>:
    8e1c:	88 de       	rcall	.-752    	; 0x8b2e <__fp_splitA>
    8e1e:	d0 f3       	brcs	.-12     	; 0x8e14 <sin+0xc>
    8e20:	99 23       	and	r25, r25
    8e22:	d9 f3       	breq	.-10     	; 0x8e1a <sin+0x12>
    8e24:	ce f3       	brts	.-14     	; 0x8e18 <sin+0x10>
    8e26:	9f 57       	subi	r25, 0x7F	; 127
    8e28:	55 0b       	sbc	r21, r21
    8e2a:	87 ff       	sbrs	r24, 7
    8e2c:	43 d0       	rcall	.+134    	; 0x8eb4 <__fp_norm2>
    8e2e:	00 24       	eor	r0, r0
    8e30:	a0 e6       	ldi	r26, 0x60	; 96
    8e32:	40 ea       	ldi	r20, 0xA0	; 160
    8e34:	90 01       	movw	r18, r0
    8e36:	80 58       	subi	r24, 0x80	; 128
    8e38:	56 95       	lsr	r21
    8e3a:	97 95       	ror	r25
    8e3c:	28 f4       	brcc	.+10     	; 0x8e48 <sqrt+0x2c>
    8e3e:	80 5c       	subi	r24, 0xC0	; 192
    8e40:	66 0f       	add	r22, r22
    8e42:	77 1f       	adc	r23, r23
    8e44:	88 1f       	adc	r24, r24
    8e46:	20 f0       	brcs	.+8      	; 0x8e50 <sqrt+0x34>
    8e48:	26 17       	cp	r18, r22
    8e4a:	37 07       	cpc	r19, r23
    8e4c:	48 07       	cpc	r20, r24
    8e4e:	30 f4       	brcc	.+12     	; 0x8e5c <sqrt+0x40>
    8e50:	62 1b       	sub	r22, r18
    8e52:	73 0b       	sbc	r23, r19
    8e54:	84 0b       	sbc	r24, r20
    8e56:	20 29       	or	r18, r0
    8e58:	31 29       	or	r19, r1
    8e5a:	4a 2b       	or	r20, r26
    8e5c:	a6 95       	lsr	r26
    8e5e:	17 94       	ror	r1
    8e60:	07 94       	ror	r0
    8e62:	20 25       	eor	r18, r0
    8e64:	31 25       	eor	r19, r1
    8e66:	4a 27       	eor	r20, r26
    8e68:	58 f7       	brcc	.-42     	; 0x8e40 <sqrt+0x24>
    8e6a:	66 0f       	add	r22, r22
    8e6c:	77 1f       	adc	r23, r23
    8e6e:	88 1f       	adc	r24, r24
    8e70:	20 f0       	brcs	.+8      	; 0x8e7a <sqrt+0x5e>
    8e72:	26 17       	cp	r18, r22
    8e74:	37 07       	cpc	r19, r23
    8e76:	48 07       	cpc	r20, r24
    8e78:	30 f4       	brcc	.+12     	; 0x8e86 <sqrt+0x6a>
    8e7a:	62 0b       	sbc	r22, r18
    8e7c:	73 0b       	sbc	r23, r19
    8e7e:	84 0b       	sbc	r24, r20
    8e80:	20 0d       	add	r18, r0
    8e82:	31 1d       	adc	r19, r1
    8e84:	41 1d       	adc	r20, r1
    8e86:	a0 95       	com	r26
    8e88:	81 f7       	brne	.-32     	; 0x8e6a <sqrt+0x4e>
    8e8a:	b9 01       	movw	r22, r18
    8e8c:	84 2f       	mov	r24, r20
    8e8e:	91 58       	subi	r25, 0x81	; 129
    8e90:	88 0f       	add	r24, r24
    8e92:	96 95       	lsr	r25
    8e94:	87 95       	ror	r24
    8e96:	08 95       	ret

00008e98 <square>:
    8e98:	9b 01       	movw	r18, r22
    8e9a:	ac 01       	movw	r20, r24
    8e9c:	52 cf       	rjmp	.-348    	; 0x8d42 <__mulsf3>

00008e9e <trunc>:
    8e9e:	61 de       	rcall	.-830    	; 0x8b62 <__fp_trunc>
    8ea0:	20 f0       	brcs	.+8      	; 0x8eaa <trunc+0xc>
    8ea2:	9f 37       	cpi	r25, 0x7F	; 127
    8ea4:	08 f4       	brcc	.+2      	; 0x8ea8 <trunc+0xa>
    8ea6:	75 ce       	rjmp	.-790    	; 0x8b92 <__fp_szero>
    8ea8:	91 cd       	rjmp	.-1246   	; 0x89cc <__fp_mintl>
    8eaa:	ab cd       	rjmp	.-1194   	; 0x8a02 <__fp_mpack>

00008eac <__unordsf2>:
    8eac:	65 dd       	rcall	.-1334   	; 0x8978 <__fp_cmp>
    8eae:	88 0b       	sbc	r24, r24
    8eb0:	99 0b       	sbc	r25, r25
    8eb2:	08 95       	ret

00008eb4 <__fp_norm2>:
    8eb4:	91 50       	subi	r25, 0x01	; 1
    8eb6:	50 40       	sbci	r21, 0x00	; 0
    8eb8:	66 0f       	add	r22, r22
    8eba:	77 1f       	adc	r23, r23
    8ebc:	88 1f       	adc	r24, r24
    8ebe:	d2 f7       	brpl	.-12     	; 0x8eb4 <__fp_norm2>
    8ec0:	08 95       	ret

00008ec2 <__fp_powsodd>:
    8ec2:	9f 93       	push	r25
    8ec4:	8f 93       	push	r24
    8ec6:	7f 93       	push	r23
    8ec8:	6f 93       	push	r22
    8eca:	ff 93       	push	r31
    8ecc:	ef 93       	push	r30
    8ece:	9b 01       	movw	r18, r22
    8ed0:	ac 01       	movw	r20, r24
    8ed2:	37 df       	rcall	.-402    	; 0x8d42 <__mulsf3>
    8ed4:	ef 91       	pop	r30
    8ed6:	ff 91       	pop	r31
    8ed8:	a5 dd       	rcall	.-1206   	; 0x8a24 <__fp_powser>
    8eda:	2f 91       	pop	r18
    8edc:	3f 91       	pop	r19
    8ede:	4f 91       	pop	r20
    8ee0:	5f 91       	pop	r21
    8ee2:	2f cf       	rjmp	.-418    	; 0x8d42 <__mulsf3>

00008ee4 <__mulsi3>:
    8ee4:	62 9f       	mul	r22, r18
    8ee6:	d0 01       	movw	r26, r0
    8ee8:	73 9f       	mul	r23, r19
    8eea:	f0 01       	movw	r30, r0
    8eec:	82 9f       	mul	r24, r18
    8eee:	e0 0d       	add	r30, r0
    8ef0:	f1 1d       	adc	r31, r1
    8ef2:	64 9f       	mul	r22, r20
    8ef4:	e0 0d       	add	r30, r0
    8ef6:	f1 1d       	adc	r31, r1
    8ef8:	92 9f       	mul	r25, r18
    8efa:	f0 0d       	add	r31, r0
    8efc:	83 9f       	mul	r24, r19
    8efe:	f0 0d       	add	r31, r0
    8f00:	74 9f       	mul	r23, r20
    8f02:	f0 0d       	add	r31, r0
    8f04:	65 9f       	mul	r22, r21
    8f06:	f0 0d       	add	r31, r0
    8f08:	99 27       	eor	r25, r25
    8f0a:	72 9f       	mul	r23, r18
    8f0c:	b0 0d       	add	r27, r0
    8f0e:	e1 1d       	adc	r30, r1
    8f10:	f9 1f       	adc	r31, r25
    8f12:	63 9f       	mul	r22, r19
    8f14:	b0 0d       	add	r27, r0
    8f16:	e1 1d       	adc	r30, r1
    8f18:	f9 1f       	adc	r31, r25
    8f1a:	bd 01       	movw	r22, r26
    8f1c:	cf 01       	movw	r24, r30
    8f1e:	11 24       	eor	r1, r1
    8f20:	08 95       	ret

00008f22 <__udivmodsi4>:
    8f22:	a1 e2       	ldi	r26, 0x21	; 33
    8f24:	1a 2e       	mov	r1, r26
    8f26:	aa 1b       	sub	r26, r26
    8f28:	bb 1b       	sub	r27, r27
    8f2a:	fd 01       	movw	r30, r26
    8f2c:	0d c0       	rjmp	.+26     	; 0x8f48 <__udivmodsi4_ep>

00008f2e <__udivmodsi4_loop>:
    8f2e:	aa 1f       	adc	r26, r26
    8f30:	bb 1f       	adc	r27, r27
    8f32:	ee 1f       	adc	r30, r30
    8f34:	ff 1f       	adc	r31, r31
    8f36:	a2 17       	cp	r26, r18
    8f38:	b3 07       	cpc	r27, r19
    8f3a:	e4 07       	cpc	r30, r20
    8f3c:	f5 07       	cpc	r31, r21
    8f3e:	20 f0       	brcs	.+8      	; 0x8f48 <__udivmodsi4_ep>
    8f40:	a2 1b       	sub	r26, r18
    8f42:	b3 0b       	sbc	r27, r19
    8f44:	e4 0b       	sbc	r30, r20
    8f46:	f5 0b       	sbc	r31, r21

00008f48 <__udivmodsi4_ep>:
    8f48:	66 1f       	adc	r22, r22
    8f4a:	77 1f       	adc	r23, r23
    8f4c:	88 1f       	adc	r24, r24
    8f4e:	99 1f       	adc	r25, r25
    8f50:	1a 94       	dec	r1
    8f52:	69 f7       	brne	.-38     	; 0x8f2e <__udivmodsi4_loop>
    8f54:	60 95       	com	r22
    8f56:	70 95       	com	r23
    8f58:	80 95       	com	r24
    8f5a:	90 95       	com	r25
    8f5c:	9b 01       	movw	r18, r22
    8f5e:	ac 01       	movw	r20, r24
    8f60:	bd 01       	movw	r22, r26
    8f62:	cf 01       	movw	r24, r30
    8f64:	08 95       	ret

00008f66 <__prologue_saves__>:
    8f66:	2f 92       	push	r2
    8f68:	3f 92       	push	r3
    8f6a:	4f 92       	push	r4
    8f6c:	5f 92       	push	r5
    8f6e:	6f 92       	push	r6
    8f70:	7f 92       	push	r7
    8f72:	8f 92       	push	r8
    8f74:	9f 92       	push	r9
    8f76:	af 92       	push	r10
    8f78:	bf 92       	push	r11
    8f7a:	cf 92       	push	r12
    8f7c:	df 92       	push	r13
    8f7e:	ef 92       	push	r14
    8f80:	ff 92       	push	r15
    8f82:	0f 93       	push	r16
    8f84:	1f 93       	push	r17
    8f86:	cf 93       	push	r28
    8f88:	df 93       	push	r29
    8f8a:	cd b7       	in	r28, 0x3d	; 61
    8f8c:	de b7       	in	r29, 0x3e	; 62
    8f8e:	ca 1b       	sub	r28, r26
    8f90:	db 0b       	sbc	r29, r27
    8f92:	0f b6       	in	r0, 0x3f	; 63
    8f94:	f8 94       	cli
    8f96:	de bf       	out	0x3e, r29	; 62
    8f98:	0f be       	out	0x3f, r0	; 63
    8f9a:	cd bf       	out	0x3d, r28	; 61
    8f9c:	19 94       	eijmp

00008f9e <__epilogue_restores__>:
    8f9e:	2a 88       	ldd	r2, Y+18	; 0x12
    8fa0:	39 88       	ldd	r3, Y+17	; 0x11
    8fa2:	48 88       	ldd	r4, Y+16	; 0x10
    8fa4:	5f 84       	ldd	r5, Y+15	; 0x0f
    8fa6:	6e 84       	ldd	r6, Y+14	; 0x0e
    8fa8:	7d 84       	ldd	r7, Y+13	; 0x0d
    8faa:	8c 84       	ldd	r8, Y+12	; 0x0c
    8fac:	9b 84       	ldd	r9, Y+11	; 0x0b
    8fae:	aa 84       	ldd	r10, Y+10	; 0x0a
    8fb0:	b9 84       	ldd	r11, Y+9	; 0x09
    8fb2:	c8 84       	ldd	r12, Y+8	; 0x08
    8fb4:	df 80       	ldd	r13, Y+7	; 0x07
    8fb6:	ee 80       	ldd	r14, Y+6	; 0x06
    8fb8:	fd 80       	ldd	r15, Y+5	; 0x05
    8fba:	0c 81       	ldd	r16, Y+4	; 0x04
    8fbc:	1b 81       	ldd	r17, Y+3	; 0x03
    8fbe:	aa 81       	ldd	r26, Y+2	; 0x02
    8fc0:	b9 81       	ldd	r27, Y+1	; 0x01
    8fc2:	ce 0f       	add	r28, r30
    8fc4:	d1 1d       	adc	r29, r1
    8fc6:	0f b6       	in	r0, 0x3f	; 63
    8fc8:	f8 94       	cli
    8fca:	de bf       	out	0x3e, r29	; 62
    8fcc:	0f be       	out	0x3f, r0	; 63
    8fce:	cd bf       	out	0x3d, r28	; 61
    8fd0:	ed 01       	movw	r28, r26
    8fd2:	08 95       	ret

00008fd4 <strtod>:
    8fd4:	8f 92       	push	r8
    8fd6:	9f 92       	push	r9
    8fd8:	af 92       	push	r10
    8fda:	bf 92       	push	r11
    8fdc:	cf 92       	push	r12
    8fde:	df 92       	push	r13
    8fe0:	ef 92       	push	r14
    8fe2:	ff 92       	push	r15
    8fe4:	0f 93       	push	r16
    8fe6:	1f 93       	push	r17
    8fe8:	cf 93       	push	r28
    8fea:	df 93       	push	r29
    8fec:	ec 01       	movw	r28, r24
    8fee:	5b 01       	movw	r10, r22
    8ff0:	61 15       	cp	r22, r1
    8ff2:	71 05       	cpc	r23, r1
    8ff4:	19 f0       	breq	.+6      	; 0x8ffc <strtod+0x28>
    8ff6:	fb 01       	movw	r30, r22
    8ff8:	80 83       	st	Z, r24
    8ffa:	91 83       	std	Z+1, r25	; 0x01
    8ffc:	f9 90       	ld	r15, Y+
    8ffe:	8f 2d       	mov	r24, r15
    9000:	90 e0       	ldi	r25, 0x00	; 0
    9002:	0e 94 4e 4a 	call	0x949c	; 0x949c <isspace>
    9006:	89 2b       	or	r24, r25
    9008:	c9 f7       	brne	.-14     	; 0x8ffc <strtod+0x28>
    900a:	fd e2       	ldi	r31, 0x2D	; 45
    900c:	ff 16       	cp	r15, r31
    900e:	21 f4       	brne	.+8      	; 0x9018 <strtod+0x44>
    9010:	f9 90       	ld	r15, Y+
    9012:	ee 24       	eor	r14, r14
    9014:	e3 94       	inc	r14
    9016:	05 c0       	rjmp	.+10     	; 0x9022 <strtod+0x4e>
    9018:	2b e2       	ldi	r18, 0x2B	; 43
    901a:	f2 16       	cp	r15, r18
    901c:	09 f4       	brne	.+2      	; 0x9020 <strtod+0x4c>
    901e:	f9 90       	ld	r15, Y+
    9020:	ee 24       	eor	r14, r14
    9022:	8e 01       	movw	r16, r28
    9024:	01 50       	subi	r16, 0x01	; 1
    9026:	10 40       	sbci	r17, 0x00	; 0
    9028:	c8 01       	movw	r24, r16
    902a:	6f e0       	ldi	r22, 0x0F	; 15
    902c:	7d e1       	ldi	r23, 0x1D	; 29
    902e:	43 e0       	ldi	r20, 0x03	; 3
    9030:	50 e0       	ldi	r21, 0x00	; 0
    9032:	0e 94 56 4a 	call	0x94ac	; 0x94ac <strncasecmp_P>
    9036:	89 2b       	or	r24, r25
    9038:	01 f5       	brne	.+64     	; 0x907a <strtod+0xa6>
    903a:	8e 01       	movw	r16, r28
    903c:	0e 5f       	subi	r16, 0xFE	; 254
    903e:	1f 4f       	sbci	r17, 0xFF	; 255
    9040:	c8 01       	movw	r24, r16
    9042:	62 e1       	ldi	r22, 0x12	; 18
    9044:	7d e1       	ldi	r23, 0x1D	; 29
    9046:	45 e0       	ldi	r20, 0x05	; 5
    9048:	50 e0       	ldi	r21, 0x00	; 0
    904a:	0e 94 56 4a 	call	0x94ac	; 0x94ac <strncasecmp_P>
    904e:	89 2b       	or	r24, r25
    9050:	19 f4       	brne	.+6      	; 0x9058 <strtod+0x84>
    9052:	8e 01       	movw	r16, r28
    9054:	09 5f       	subi	r16, 0xF9	; 249
    9056:	1f 4f       	sbci	r17, 0xFF	; 255
    9058:	a1 14       	cp	r10, r1
    905a:	b1 04       	cpc	r11, r1
    905c:	19 f0       	breq	.+6      	; 0x9064 <strtod+0x90>
    905e:	f5 01       	movw	r30, r10
    9060:	00 83       	st	Z, r16
    9062:	11 83       	std	Z+1, r17	; 0x01
    9064:	e0 fc       	sbrc	r14, 0
    9066:	04 c0       	rjmp	.+8      	; 0x9070 <strtod+0x9c>
    9068:	70 e0       	ldi	r23, 0x00	; 0
    906a:	90 e0       	ldi	r25, 0x00	; 0
    906c:	80 e8       	ldi	r24, 0x80	; 128
    906e:	14 c0       	rjmp	.+40     	; 0x9098 <strtod+0xc4>
    9070:	70 e0       	ldi	r23, 0x00	; 0
    9072:	90 e0       	ldi	r25, 0x00	; 0
    9074:	80 e8       	ldi	r24, 0x80	; 128
    9076:	6f ef       	ldi	r22, 0xFF	; 255
    9078:	08 c1       	rjmp	.+528    	; 0x928a <strtod+0x2b6>
    907a:	c8 01       	movw	r24, r16
    907c:	67 e1       	ldi	r22, 0x17	; 23
    907e:	7d e1       	ldi	r23, 0x1D	; 29
    9080:	43 e0       	ldi	r20, 0x03	; 3
    9082:	50 e0       	ldi	r21, 0x00	; 0
    9084:	0e 94 56 4a 	call	0x94ac	; 0x94ac <strncasecmp_P>
    9088:	89 2b       	or	r24, r25
    908a:	69 f4       	brne	.+26     	; 0x90a6 <strtod+0xd2>
    908c:	a1 14       	cp	r10, r1
    908e:	b1 04       	cpc	r11, r1
    9090:	29 f4       	brne	.+10     	; 0x909c <strtod+0xc8>
    9092:	70 e0       	ldi	r23, 0x00	; 0
    9094:	90 e0       	ldi	r25, 0x00	; 0
    9096:	80 ec       	ldi	r24, 0xC0	; 192
    9098:	6f e7       	ldi	r22, 0x7F	; 127
    909a:	f7 c0       	rjmp	.+494    	; 0x928a <strtod+0x2b6>
    909c:	22 96       	adiw	r28, 0x02	; 2
    909e:	f5 01       	movw	r30, r10
    90a0:	c0 83       	st	Z, r28
    90a2:	d1 83       	std	Z+1, r29	; 0x01
    90a4:	f6 cf       	rjmp	.-20     	; 0x9092 <strtod+0xbe>
    90a6:	88 24       	eor	r8, r8
    90a8:	99 24       	eor	r9, r9
    90aa:	40 e0       	ldi	r20, 0x00	; 0
    90ac:	50 e0       	ldi	r21, 0x00	; 0
    90ae:	60 e0       	ldi	r22, 0x00	; 0
    90b0:	70 e0       	ldi	r23, 0x00	; 0
    90b2:	ef 2d       	mov	r30, r15
    90b4:	e0 53       	subi	r30, 0x30	; 48
    90b6:	ea 30       	cpi	r30, 0x0A	; 10
    90b8:	a0 f5       	brcc	.+104    	; 0x9122 <strtod+0x14e>
    90ba:	f2 e0       	ldi	r31, 0x02	; 2
    90bc:	ef 2a       	or	r14, r31
    90be:	8e 2d       	mov	r24, r14
    90c0:	90 e0       	ldi	r25, 0x00	; 0
    90c2:	9c 01       	movw	r18, r24
    90c4:	28 70       	andi	r18, 0x08	; 8
    90c6:	30 70       	andi	r19, 0x00	; 0
    90c8:	e2 fe       	sbrs	r14, 2
    90ca:	06 c0       	rjmp	.+12     	; 0x90d8 <strtod+0x104>
    90cc:	23 2b       	or	r18, r19
    90ce:	79 f5       	brne	.+94     	; 0x912e <strtod+0x15a>
    90d0:	08 94       	sec
    90d2:	81 1c       	adc	r8, r1
    90d4:	91 1c       	adc	r9, r1
    90d6:	2b c0       	rjmp	.+86     	; 0x912e <strtod+0x15a>
    90d8:	23 2b       	or	r18, r19
    90da:	19 f0       	breq	.+6      	; 0x90e2 <strtod+0x10e>
    90dc:	08 94       	sec
    90de:	81 08       	sbc	r8, r1
    90e0:	91 08       	sbc	r9, r1
    90e2:	db 01       	movw	r26, r22
    90e4:	ca 01       	movw	r24, r20
    90e6:	12 e0       	ldi	r17, 0x02	; 2
    90e8:	88 0f       	add	r24, r24
    90ea:	99 1f       	adc	r25, r25
    90ec:	aa 1f       	adc	r26, r26
    90ee:	bb 1f       	adc	r27, r27
    90f0:	1a 95       	dec	r17
    90f2:	d1 f7       	brne	.-12     	; 0x90e8 <strtod+0x114>
    90f4:	48 0f       	add	r20, r24
    90f6:	59 1f       	adc	r21, r25
    90f8:	6a 1f       	adc	r22, r26
    90fa:	7b 1f       	adc	r23, r27
    90fc:	44 0f       	add	r20, r20
    90fe:	55 1f       	adc	r21, r21
    9100:	66 1f       	adc	r22, r22
    9102:	77 1f       	adc	r23, r23
    9104:	4e 0f       	add	r20, r30
    9106:	51 1d       	adc	r21, r1
    9108:	61 1d       	adc	r22, r1
    910a:	71 1d       	adc	r23, r1
    910c:	48 39       	cpi	r20, 0x98	; 152
    910e:	29 e9       	ldi	r18, 0x99	; 153
    9110:	52 07       	cpc	r21, r18
    9112:	29 e9       	ldi	r18, 0x99	; 153
    9114:	62 07       	cpc	r22, r18
    9116:	29 e1       	ldi	r18, 0x19	; 25
    9118:	72 07       	cpc	r23, r18
    911a:	48 f0       	brcs	.+18     	; 0x912e <strtod+0x15a>
    911c:	84 e0       	ldi	r24, 0x04	; 4
    911e:	e8 2a       	or	r14, r24
    9120:	06 c0       	rjmp	.+12     	; 0x912e <strtod+0x15a>
    9122:	ee 3f       	cpi	r30, 0xFE	; 254
    9124:	31 f4       	brne	.+12     	; 0x9132 <strtod+0x15e>
    9126:	e3 fc       	sbrc	r14, 3
    9128:	39 c0       	rjmp	.+114    	; 0x919c <strtod+0x1c8>
    912a:	98 e0       	ldi	r25, 0x08	; 8
    912c:	e9 2a       	or	r14, r25
    912e:	f9 90       	ld	r15, Y+
    9130:	c0 cf       	rjmp	.-128    	; 0x90b2 <strtod+0xde>
    9132:	e5 33       	cpi	r30, 0x35	; 53
    9134:	11 f0       	breq	.+4      	; 0x913a <strtod+0x166>
    9136:	e5 31       	cpi	r30, 0x15	; 21
    9138:	89 f5       	brne	.+98     	; 0x919c <strtod+0x1c8>
    913a:	29 91       	ld	r18, Y+
    913c:	2d 32       	cpi	r18, 0x2D	; 45
    913e:	19 f4       	brne	.+6      	; 0x9146 <strtod+0x172>
    9140:	e0 e1       	ldi	r30, 0x10	; 16
    9142:	ee 2a       	or	r14, r30
    9144:	05 c0       	rjmp	.+10     	; 0x9150 <strtod+0x17c>
    9146:	2b 32       	cpi	r18, 0x2B	; 43
    9148:	19 f0       	breq	.+6      	; 0x9150 <strtod+0x17c>
    914a:	81 e0       	ldi	r24, 0x01	; 1
    914c:	90 e0       	ldi	r25, 0x00	; 0
    914e:	03 c0       	rjmp	.+6      	; 0x9156 <strtod+0x182>
    9150:	29 91       	ld	r18, Y+
    9152:	82 e0       	ldi	r24, 0x02	; 2
    9154:	90 e0       	ldi	r25, 0x00	; 0
    9156:	e2 2f       	mov	r30, r18
    9158:	e0 53       	subi	r30, 0x30	; 48
    915a:	ea 30       	cpi	r30, 0x0A	; 10
    915c:	18 f0       	brcs	.+6      	; 0x9164 <strtod+0x190>
    915e:	c8 1b       	sub	r28, r24
    9160:	d9 0b       	sbc	r29, r25
    9162:	1c c0       	rjmp	.+56     	; 0x919c <strtod+0x1c8>
    9164:	20 e0       	ldi	r18, 0x00	; 0
    9166:	30 e0       	ldi	r19, 0x00	; 0
    9168:	fc e0       	ldi	r31, 0x0C	; 12
    916a:	20 38       	cpi	r18, 0x80	; 128
    916c:	3f 07       	cpc	r19, r31
    916e:	5c f4       	brge	.+22     	; 0x9186 <strtod+0x1b2>
    9170:	c9 01       	movw	r24, r18
    9172:	88 0f       	add	r24, r24
    9174:	99 1f       	adc	r25, r25
    9176:	88 0f       	add	r24, r24
    9178:	99 1f       	adc	r25, r25
    917a:	28 0f       	add	r18, r24
    917c:	39 1f       	adc	r19, r25
    917e:	22 0f       	add	r18, r18
    9180:	33 1f       	adc	r19, r19
    9182:	2e 0f       	add	r18, r30
    9184:	31 1d       	adc	r19, r1
    9186:	e9 91       	ld	r30, Y+
    9188:	e0 53       	subi	r30, 0x30	; 48
    918a:	ea 30       	cpi	r30, 0x0A	; 10
    918c:	68 f3       	brcs	.-38     	; 0x9168 <strtod+0x194>
    918e:	e4 fe       	sbrs	r14, 4
    9190:	03 c0       	rjmp	.+6      	; 0x9198 <strtod+0x1c4>
    9192:	30 95       	com	r19
    9194:	21 95       	neg	r18
    9196:	3f 4f       	sbci	r19, 0xFF	; 255
    9198:	82 0e       	add	r8, r18
    919a:	93 1e       	adc	r9, r19
    919c:	ce 2c       	mov	r12, r14
    919e:	dd 24       	eor	r13, r13
    91a0:	e1 fe       	sbrs	r14, 1
    91a2:	07 c0       	rjmp	.+14     	; 0x91b2 <strtod+0x1de>
    91a4:	a1 14       	cp	r10, r1
    91a6:	b1 04       	cpc	r11, r1
    91a8:	21 f0       	breq	.+8      	; 0x91b2 <strtod+0x1de>
    91aa:	21 97       	sbiw	r28, 0x01	; 1
    91ac:	f5 01       	movw	r30, r10
    91ae:	c0 83       	st	Z, r28
    91b0:	d1 83       	std	Z+1, r29	; 0x01
    91b2:	cb 01       	movw	r24, r22
    91b4:	ba 01       	movw	r22, r20
    91b6:	0e 94 7f 44 	call	0x88fe	; 0x88fe <__floatunsisf>
    91ba:	7b 01       	movw	r14, r22
    91bc:	8c 01       	movw	r16, r24
    91be:	f3 e0       	ldi	r31, 0x03	; 3
    91c0:	cf 22       	and	r12, r31
    91c2:	dd 24       	eor	r13, r13
    91c4:	23 e0       	ldi	r18, 0x03	; 3
    91c6:	c2 16       	cp	r12, r18
    91c8:	d1 04       	cpc	r13, r1
    91ca:	21 f4       	brne	.+8      	; 0x91d4 <strtod+0x200>
    91cc:	17 fb       	bst	r17, 7
    91ce:	10 95       	com	r17
    91d0:	17 f9       	bld	r17, 7
    91d2:	10 95       	com	r17
    91d4:	57 01       	movw	r10, r14
    91d6:	68 01       	movw	r12, r16
    91d8:	c8 01       	movw	r24, r16
    91da:	b7 01       	movw	r22, r14
    91dc:	20 e0       	ldi	r18, 0x00	; 0
    91de:	30 e0       	ldi	r19, 0x00	; 0
    91e0:	40 e0       	ldi	r20, 0x00	; 0
    91e2:	50 e0       	ldi	r21, 0x00	; 0
    91e4:	0e 94 df 43 	call	0x87be	; 0x87be <__cmpsf2>
    91e8:	88 23       	and	r24, r24
    91ea:	09 f4       	brne	.+2      	; 0x91ee <strtod+0x21a>
    91ec:	4a c0       	rjmp	.+148    	; 0x9282 <strtod+0x2ae>
    91ee:	97 fe       	sbrs	r9, 7
    91f0:	0d c0       	rjmp	.+26     	; 0x920c <strtod+0x238>
    91f2:	2e e2       	ldi	r18, 0x2E	; 46
    91f4:	e2 2e       	mov	r14, r18
    91f6:	2d e1       	ldi	r18, 0x1D	; 29
    91f8:	f2 2e       	mov	r15, r18
    91fa:	90 94       	com	r9
    91fc:	81 94       	neg	r8
    91fe:	91 08       	sbc	r9, r1
    9200:	93 94       	inc	r9
    9202:	c0 e2       	ldi	r28, 0x20	; 32
    9204:	d0 e0       	ldi	r29, 0x00	; 0
    9206:	00 e0       	ldi	r16, 0x00	; 0
    9208:	10 e0       	ldi	r17, 0x00	; 0
    920a:	12 c0       	rjmp	.+36     	; 0x9230 <strtod+0x25c>
    920c:	96 e4       	ldi	r25, 0x46	; 70
    920e:	e9 2e       	mov	r14, r25
    9210:	9d e1       	ldi	r25, 0x1D	; 29
    9212:	f9 2e       	mov	r15, r25
    9214:	f6 cf       	rjmp	.-20     	; 0x9202 <strtod+0x22e>
    9216:	f7 01       	movw	r30, r14
    9218:	25 91       	lpm	r18, Z+
    921a:	35 91       	lpm	r19, Z+
    921c:	45 91       	lpm	r20, Z+
    921e:	54 91       	lpm	r21, Z+
    9220:	c6 01       	movw	r24, r12
    9222:	b5 01       	movw	r22, r10
    9224:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <__mulsf3>
    9228:	5b 01       	movw	r10, r22
    922a:	6c 01       	movw	r12, r24
    922c:	8c 1a       	sub	r8, r28
    922e:	9d 0a       	sbc	r9, r29
    9230:	8c 16       	cp	r8, r28
    9232:	9d 06       	cpc	r9, r29
    9234:	84 f7       	brge	.-32     	; 0x9216 <strtod+0x242>
    9236:	d5 95       	asr	r29
    9238:	c7 95       	ror	r28
    923a:	0f 5f       	subi	r16, 0xFF	; 255
    923c:	1f 4f       	sbci	r17, 0xFF	; 255
    923e:	06 30       	cpi	r16, 0x06	; 6
    9240:	11 05       	cpc	r17, r1
    9242:	29 f0       	breq	.+10     	; 0x924e <strtod+0x27a>
    9244:	8c ef       	ldi	r24, 0xFC	; 252
    9246:	9f ef       	ldi	r25, 0xFF	; 255
    9248:	e8 0e       	add	r14, r24
    924a:	f9 1e       	adc	r15, r25
    924c:	f1 cf       	rjmp	.-30     	; 0x9230 <strtod+0x25c>
    924e:	c5 01       	movw	r24, r10
    9250:	d6 01       	movw	r26, r12
    9252:	7c 01       	movw	r14, r24
    9254:	8d 01       	movw	r16, r26
    9256:	8c 2d       	mov	r24, r12
    9258:	88 0f       	add	r24, r24
    925a:	8d 2d       	mov	r24, r13
    925c:	88 1f       	adc	r24, r24
    925e:	8f 3f       	cpi	r24, 0xFF	; 255
    9260:	51 f0       	breq	.+20     	; 0x9276 <strtod+0x2a2>
    9262:	c6 01       	movw	r24, r12
    9264:	b5 01       	movw	r22, r10
    9266:	20 e0       	ldi	r18, 0x00	; 0
    9268:	30 e0       	ldi	r19, 0x00	; 0
    926a:	40 e0       	ldi	r20, 0x00	; 0
    926c:	50 e0       	ldi	r21, 0x00	; 0
    926e:	0e 94 df 43 	call	0x87be	; 0x87be <__cmpsf2>
    9272:	88 23       	and	r24, r24
    9274:	31 f4       	brne	.+12     	; 0x9282 <strtod+0x2ae>
    9276:	82 e2       	ldi	r24, 0x22	; 34
    9278:	90 e0       	ldi	r25, 0x00	; 0
    927a:	80 93 6d 25 	sts	0x256D, r24
    927e:	90 93 6e 25 	sts	0x256E, r25
    9282:	7e 2d       	mov	r23, r14
    9284:	9f 2d       	mov	r25, r15
    9286:	80 2f       	mov	r24, r16
    9288:	61 2f       	mov	r22, r17
    928a:	27 2f       	mov	r18, r23
    928c:	39 2f       	mov	r19, r25
    928e:	48 2f       	mov	r20, r24
    9290:	56 2f       	mov	r21, r22
    9292:	b9 01       	movw	r22, r18
    9294:	ca 01       	movw	r24, r20
    9296:	df 91       	pop	r29
    9298:	cf 91       	pop	r28
    929a:	1f 91       	pop	r17
    929c:	0f 91       	pop	r16
    929e:	ff 90       	pop	r15
    92a0:	ef 90       	pop	r14
    92a2:	df 90       	pop	r13
    92a4:	cf 90       	pop	r12
    92a6:	bf 90       	pop	r11
    92a8:	af 90       	pop	r10
    92aa:	9f 90       	pop	r9
    92ac:	8f 90       	pop	r8
    92ae:	08 95       	ret

000092b0 <atoi>:
    92b0:	fc 01       	movw	r30, r24
    92b2:	88 27       	eor	r24, r24
    92b4:	99 27       	eor	r25, r25
    92b6:	e8 94       	clt
    92b8:	21 91       	ld	r18, Z+
    92ba:	20 32       	cpi	r18, 0x20	; 32
    92bc:	e9 f3       	breq	.-6      	; 0x92b8 <atoi+0x8>
    92be:	29 30       	cpi	r18, 0x09	; 9
    92c0:	10 f0       	brcs	.+4      	; 0x92c6 <atoi+0x16>
    92c2:	2e 30       	cpi	r18, 0x0E	; 14
    92c4:	c8 f3       	brcs	.-14     	; 0x92b8 <atoi+0x8>
    92c6:	2b 32       	cpi	r18, 0x2B	; 43
    92c8:	41 f0       	breq	.+16     	; 0x92da <atoi+0x2a>
    92ca:	2d 32       	cpi	r18, 0x2D	; 45
    92cc:	39 f4       	brne	.+14     	; 0x92dc <atoi+0x2c>
    92ce:	68 94       	set
    92d0:	04 c0       	rjmp	.+8      	; 0x92da <atoi+0x2a>
    92d2:	0e 94 84 4a 	call	0x9508	; 0x9508 <__mulhi_const_10>
    92d6:	82 0f       	add	r24, r18
    92d8:	91 1d       	adc	r25, r1
    92da:	21 91       	ld	r18, Z+
    92dc:	20 53       	subi	r18, 0x30	; 48
    92de:	2a 30       	cpi	r18, 0x0A	; 10
    92e0:	c0 f3       	brcs	.-16     	; 0x92d2 <atoi+0x22>
    92e2:	1e f4       	brtc	.+6      	; 0x92ea <atoi+0x3a>
    92e4:	90 95       	com	r25
    92e6:	81 95       	neg	r24
    92e8:	9f 4f       	sbci	r25, 0xFF	; 255
    92ea:	08 95       	ret

000092ec <__ftoa_engine>:
    92ec:	28 30       	cpi	r18, 0x08	; 8
    92ee:	08 f0       	brcs	.+2      	; 0x92f2 <__ftoa_engine+0x6>
    92f0:	27 e0       	ldi	r18, 0x07	; 7
    92f2:	33 27       	eor	r19, r19
    92f4:	da 01       	movw	r26, r20
    92f6:	99 0f       	add	r25, r25
    92f8:	31 1d       	adc	r19, r1
    92fa:	87 fd       	sbrc	r24, 7
    92fc:	91 60       	ori	r25, 0x01	; 1
    92fe:	00 96       	adiw	r24, 0x00	; 0
    9300:	61 05       	cpc	r22, r1
    9302:	71 05       	cpc	r23, r1
    9304:	39 f4       	brne	.+14     	; 0x9314 <__ftoa_engine+0x28>
    9306:	32 60       	ori	r19, 0x02	; 2
    9308:	2e 5f       	subi	r18, 0xFE	; 254
    930a:	3d 93       	st	X+, r19
    930c:	30 e3       	ldi	r19, 0x30	; 48
    930e:	2a 95       	dec	r18
    9310:	e1 f7       	brne	.-8      	; 0x930a <__ftoa_engine+0x1e>
    9312:	08 95       	ret
    9314:	9f 3f       	cpi	r25, 0xFF	; 255
    9316:	30 f0       	brcs	.+12     	; 0x9324 <__ftoa_engine+0x38>
    9318:	80 38       	cpi	r24, 0x80	; 128
    931a:	71 05       	cpc	r23, r1
    931c:	61 05       	cpc	r22, r1
    931e:	09 f0       	breq	.+2      	; 0x9322 <__ftoa_engine+0x36>
    9320:	3c 5f       	subi	r19, 0xFC	; 252
    9322:	3c 5f       	subi	r19, 0xFC	; 252
    9324:	3d 93       	st	X+, r19
    9326:	91 30       	cpi	r25, 0x01	; 1
    9328:	08 f0       	brcs	.+2      	; 0x932c <__ftoa_engine+0x40>
    932a:	80 68       	ori	r24, 0x80	; 128
    932c:	91 1d       	adc	r25, r1
    932e:	df 93       	push	r29
    9330:	cf 93       	push	r28
    9332:	1f 93       	push	r17
    9334:	0f 93       	push	r16
    9336:	ff 92       	push	r15
    9338:	ef 92       	push	r14
    933a:	19 2f       	mov	r17, r25
    933c:	98 7f       	andi	r25, 0xF8	; 248
    933e:	96 95       	lsr	r25
    9340:	e9 2f       	mov	r30, r25
    9342:	96 95       	lsr	r25
    9344:	96 95       	lsr	r25
    9346:	e9 0f       	add	r30, r25
    9348:	ff 27       	eor	r31, r31
    934a:	ec 55       	subi	r30, 0x5C	; 92
    934c:	f2 4e       	sbci	r31, 0xE2	; 226
    934e:	99 27       	eor	r25, r25
    9350:	33 27       	eor	r19, r19
    9352:	ee 24       	eor	r14, r14
    9354:	ff 24       	eor	r15, r15
    9356:	a7 01       	movw	r20, r14
    9358:	e7 01       	movw	r28, r14
    935a:	05 90       	lpm	r0, Z+
    935c:	08 94       	sec
    935e:	07 94       	ror	r0
    9360:	28 f4       	brcc	.+10     	; 0x936c <__ftoa_engine+0x80>
    9362:	36 0f       	add	r19, r22
    9364:	e7 1e       	adc	r14, r23
    9366:	f8 1e       	adc	r15, r24
    9368:	49 1f       	adc	r20, r25
    936a:	51 1d       	adc	r21, r1
    936c:	66 0f       	add	r22, r22
    936e:	77 1f       	adc	r23, r23
    9370:	88 1f       	adc	r24, r24
    9372:	99 1f       	adc	r25, r25
    9374:	06 94       	lsr	r0
    9376:	a1 f7       	brne	.-24     	; 0x9360 <__ftoa_engine+0x74>
    9378:	05 90       	lpm	r0, Z+
    937a:	07 94       	ror	r0
    937c:	28 f4       	brcc	.+10     	; 0x9388 <__ftoa_engine+0x9c>
    937e:	e7 0e       	add	r14, r23
    9380:	f8 1e       	adc	r15, r24
    9382:	49 1f       	adc	r20, r25
    9384:	56 1f       	adc	r21, r22
    9386:	c1 1d       	adc	r28, r1
    9388:	77 0f       	add	r23, r23
    938a:	88 1f       	adc	r24, r24
    938c:	99 1f       	adc	r25, r25
    938e:	66 1f       	adc	r22, r22
    9390:	06 94       	lsr	r0
    9392:	a1 f7       	brne	.-24     	; 0x937c <__ftoa_engine+0x90>
    9394:	05 90       	lpm	r0, Z+
    9396:	07 94       	ror	r0
    9398:	28 f4       	brcc	.+10     	; 0x93a4 <__ftoa_engine+0xb8>
    939a:	f8 0e       	add	r15, r24
    939c:	49 1f       	adc	r20, r25
    939e:	56 1f       	adc	r21, r22
    93a0:	c7 1f       	adc	r28, r23
    93a2:	d1 1d       	adc	r29, r1
    93a4:	88 0f       	add	r24, r24
    93a6:	99 1f       	adc	r25, r25
    93a8:	66 1f       	adc	r22, r22
    93aa:	77 1f       	adc	r23, r23
    93ac:	06 94       	lsr	r0
    93ae:	a1 f7       	brne	.-24     	; 0x9398 <__ftoa_engine+0xac>
    93b0:	05 90       	lpm	r0, Z+
    93b2:	07 94       	ror	r0
    93b4:	20 f4       	brcc	.+8      	; 0x93be <__ftoa_engine+0xd2>
    93b6:	49 0f       	add	r20, r25
    93b8:	56 1f       	adc	r21, r22
    93ba:	c7 1f       	adc	r28, r23
    93bc:	d8 1f       	adc	r29, r24
    93be:	99 0f       	add	r25, r25
    93c0:	66 1f       	adc	r22, r22
    93c2:	77 1f       	adc	r23, r23
    93c4:	88 1f       	adc	r24, r24
    93c6:	06 94       	lsr	r0
    93c8:	a9 f7       	brne	.-22     	; 0x93b4 <__ftoa_engine+0xc8>
    93ca:	84 91       	lpm	r24, Z+
    93cc:	10 95       	com	r17
    93ce:	17 70       	andi	r17, 0x07	; 7
    93d0:	41 f0       	breq	.+16     	; 0x93e2 <__ftoa_engine+0xf6>
    93d2:	d6 95       	lsr	r29
    93d4:	c7 95       	ror	r28
    93d6:	57 95       	ror	r21
    93d8:	47 95       	ror	r20
    93da:	f7 94       	ror	r15
    93dc:	e7 94       	ror	r14
    93de:	1a 95       	dec	r17
    93e0:	c1 f7       	brne	.-16     	; 0x93d2 <__ftoa_engine+0xe6>
    93e2:	ea e4       	ldi	r30, 0x4A	; 74
    93e4:	fd e1       	ldi	r31, 0x1D	; 29
    93e6:	68 94       	set
    93e8:	15 90       	lpm	r1, Z+
    93ea:	15 91       	lpm	r17, Z+
    93ec:	35 91       	lpm	r19, Z+
    93ee:	65 91       	lpm	r22, Z+
    93f0:	95 91       	lpm	r25, Z+
    93f2:	05 90       	lpm	r0, Z+
    93f4:	7f e2       	ldi	r23, 0x2F	; 47
    93f6:	73 95       	inc	r23
    93f8:	e1 18       	sub	r14, r1
    93fa:	f1 0a       	sbc	r15, r17
    93fc:	43 0b       	sbc	r20, r19
    93fe:	56 0b       	sbc	r21, r22
    9400:	c9 0b       	sbc	r28, r25
    9402:	d0 09       	sbc	r29, r0
    9404:	c0 f7       	brcc	.-16     	; 0x93f6 <__ftoa_engine+0x10a>
    9406:	e1 0c       	add	r14, r1
    9408:	f1 1e       	adc	r15, r17
    940a:	43 1f       	adc	r20, r19
    940c:	56 1f       	adc	r21, r22
    940e:	c9 1f       	adc	r28, r25
    9410:	d0 1d       	adc	r29, r0
    9412:	7e f4       	brtc	.+30     	; 0x9432 <__ftoa_engine+0x146>
    9414:	70 33       	cpi	r23, 0x30	; 48
    9416:	11 f4       	brne	.+4      	; 0x941c <__ftoa_engine+0x130>
    9418:	8a 95       	dec	r24
    941a:	e6 cf       	rjmp	.-52     	; 0x93e8 <__ftoa_engine+0xfc>
    941c:	e8 94       	clt
    941e:	01 50       	subi	r16, 0x01	; 1
    9420:	30 f0       	brcs	.+12     	; 0x942e <__ftoa_engine+0x142>
    9422:	08 0f       	add	r16, r24
    9424:	0a f4       	brpl	.+2      	; 0x9428 <__ftoa_engine+0x13c>
    9426:	00 27       	eor	r16, r16
    9428:	02 17       	cp	r16, r18
    942a:	08 f4       	brcc	.+2      	; 0x942e <__ftoa_engine+0x142>
    942c:	20 2f       	mov	r18, r16
    942e:	23 95       	inc	r18
    9430:	02 2f       	mov	r16, r18
    9432:	7a 33       	cpi	r23, 0x3A	; 58
    9434:	28 f0       	brcs	.+10     	; 0x9440 <__ftoa_engine+0x154>
    9436:	79 e3       	ldi	r23, 0x39	; 57
    9438:	7d 93       	st	X+, r23
    943a:	2a 95       	dec	r18
    943c:	e9 f7       	brne	.-6      	; 0x9438 <__ftoa_engine+0x14c>
    943e:	10 c0       	rjmp	.+32     	; 0x9460 <__ftoa_engine+0x174>
    9440:	7d 93       	st	X+, r23
    9442:	2a 95       	dec	r18
    9444:	89 f6       	brne	.-94     	; 0x93e8 <__ftoa_engine+0xfc>
    9446:	06 94       	lsr	r0
    9448:	97 95       	ror	r25
    944a:	67 95       	ror	r22
    944c:	37 95       	ror	r19
    944e:	17 95       	ror	r17
    9450:	17 94       	ror	r1
    9452:	e1 18       	sub	r14, r1
    9454:	f1 0a       	sbc	r15, r17
    9456:	43 0b       	sbc	r20, r19
    9458:	56 0b       	sbc	r21, r22
    945a:	c9 0b       	sbc	r28, r25
    945c:	d0 09       	sbc	r29, r0
    945e:	98 f0       	brcs	.+38     	; 0x9486 <__ftoa_engine+0x19a>
    9460:	23 95       	inc	r18
    9462:	7e 91       	ld	r23, -X
    9464:	73 95       	inc	r23
    9466:	7a 33       	cpi	r23, 0x3A	; 58
    9468:	08 f0       	brcs	.+2      	; 0x946c <__ftoa_engine+0x180>
    946a:	70 e3       	ldi	r23, 0x30	; 48
    946c:	7c 93       	st	X, r23
    946e:	20 13       	cpse	r18, r16
    9470:	b8 f7       	brcc	.-18     	; 0x9460 <__ftoa_engine+0x174>
    9472:	7e 91       	ld	r23, -X
    9474:	70 61       	ori	r23, 0x10	; 16
    9476:	7d 93       	st	X+, r23
    9478:	30 f0       	brcs	.+12     	; 0x9486 <__ftoa_engine+0x19a>
    947a:	83 95       	inc	r24
    947c:	71 e3       	ldi	r23, 0x31	; 49
    947e:	7d 93       	st	X+, r23
    9480:	70 e3       	ldi	r23, 0x30	; 48
    9482:	2a 95       	dec	r18
    9484:	e1 f7       	brne	.-8      	; 0x947e <__ftoa_engine+0x192>
    9486:	11 24       	eor	r1, r1
    9488:	ef 90       	pop	r14
    948a:	ff 90       	pop	r15
    948c:	0f 91       	pop	r16
    948e:	1f 91       	pop	r17
    9490:	cf 91       	pop	r28
    9492:	df 91       	pop	r29
    9494:	99 27       	eor	r25, r25
    9496:	87 fd       	sbrc	r24, 7
    9498:	90 95       	com	r25
    949a:	08 95       	ret

0000949c <isspace>:
    949c:	91 11       	cpse	r25, r1
    949e:	21 c1       	rjmp	.+578    	; 0x96e2 <__ctype_isfalse>
    94a0:	80 32       	cpi	r24, 0x20	; 32
    94a2:	19 f0       	breq	.+6      	; 0x94aa <isspace+0xe>
    94a4:	89 50       	subi	r24, 0x09	; 9
    94a6:	85 50       	subi	r24, 0x05	; 5
    94a8:	d0 f7       	brcc	.-12     	; 0x949e <isspace+0x2>
    94aa:	08 95       	ret

000094ac <strncasecmp_P>:
    94ac:	fb 01       	movw	r30, r22
    94ae:	dc 01       	movw	r26, r24
    94b0:	41 50       	subi	r20, 0x01	; 1
    94b2:	50 40       	sbci	r21, 0x00	; 0
    94b4:	88 f0       	brcs	.+34     	; 0x94d8 <strncasecmp_P+0x2c>
    94b6:	8d 91       	ld	r24, X+
    94b8:	81 34       	cpi	r24, 0x41	; 65
    94ba:	1c f0       	brlt	.+6      	; 0x94c2 <strncasecmp_P+0x16>
    94bc:	8b 35       	cpi	r24, 0x5B	; 91
    94be:	0c f4       	brge	.+2      	; 0x94c2 <strncasecmp_P+0x16>
    94c0:	80 5e       	subi	r24, 0xE0	; 224
    94c2:	65 91       	lpm	r22, Z+
    94c4:	61 34       	cpi	r22, 0x41	; 65
    94c6:	1c f0       	brlt	.+6      	; 0x94ce <strncasecmp_P+0x22>
    94c8:	6b 35       	cpi	r22, 0x5B	; 91
    94ca:	0c f4       	brge	.+2      	; 0x94ce <strncasecmp_P+0x22>
    94cc:	60 5e       	subi	r22, 0xE0	; 224
    94ce:	86 1b       	sub	r24, r22
    94d0:	61 11       	cpse	r22, r1
    94d2:	71 f3       	breq	.-36     	; 0x94b0 <strncasecmp_P+0x4>
    94d4:	99 0b       	sbc	r25, r25
    94d6:	08 95       	ret
    94d8:	88 1b       	sub	r24, r24
    94da:	fc cf       	rjmp	.-8      	; 0x94d4 <strncasecmp_P+0x28>

000094dc <strnlen_P>:
    94dc:	fc 01       	movw	r30, r24
    94de:	05 90       	lpm	r0, Z+
    94e0:	61 50       	subi	r22, 0x01	; 1
    94e2:	70 40       	sbci	r23, 0x00	; 0
    94e4:	01 10       	cpse	r0, r1
    94e6:	d8 f7       	brcc	.-10     	; 0x94de <strnlen_P+0x2>
    94e8:	80 95       	com	r24
    94ea:	90 95       	com	r25
    94ec:	8e 0f       	add	r24, r30
    94ee:	9f 1f       	adc	r25, r31
    94f0:	08 95       	ret

000094f2 <strnlen>:
    94f2:	fc 01       	movw	r30, r24
    94f4:	61 50       	subi	r22, 0x01	; 1
    94f6:	70 40       	sbci	r23, 0x00	; 0
    94f8:	01 90       	ld	r0, Z+
    94fa:	01 10       	cpse	r0, r1
    94fc:	d8 f7       	brcc	.-10     	; 0x94f4 <strnlen+0x2>
    94fe:	80 95       	com	r24
    9500:	90 95       	com	r25
    9502:	8e 0f       	add	r24, r30
    9504:	9f 1f       	adc	r25, r31
    9506:	08 95       	ret

00009508 <__mulhi_const_10>:
    9508:	7a e0       	ldi	r23, 0x0A	; 10
    950a:	97 9f       	mul	r25, r23
    950c:	90 2d       	mov	r25, r0
    950e:	87 9f       	mul	r24, r23
    9510:	80 2d       	mov	r24, r0
    9512:	91 0d       	add	r25, r1
    9514:	11 24       	eor	r1, r1
    9516:	08 95       	ret

00009518 <clearerr>:
    9518:	fc 01       	movw	r30, r24
    951a:	83 81       	ldd	r24, Z+3	; 0x03
    951c:	8f 7c       	andi	r24, 0xCF	; 207
    951e:	83 83       	std	Z+3, r24	; 0x03
    9520:	08 95       	ret

00009522 <fgets>:
    9522:	cf 92       	push	r12
    9524:	df 92       	push	r13
    9526:	ef 92       	push	r14
    9528:	ff 92       	push	r15
    952a:	0f 93       	push	r16
    952c:	1f 93       	push	r17
    952e:	cf 93       	push	r28
    9530:	df 93       	push	r29
    9532:	7c 01       	movw	r14, r24
    9534:	6a 01       	movw	r12, r20
    9536:	fa 01       	movw	r30, r20
    9538:	83 81       	ldd	r24, Z+3	; 0x03
    953a:	80 ff       	sbrs	r24, 0
    953c:	19 c0       	rjmp	.+50     	; 0x9570 <fgets+0x4e>
    953e:	16 16       	cp	r1, r22
    9540:	17 06       	cpc	r1, r23
    9542:	b4 f4       	brge	.+44     	; 0x9570 <fgets+0x4e>
    9544:	eb 01       	movw	r28, r22
    9546:	21 97       	sbiw	r28, 0x01	; 1
    9548:	87 01       	movw	r16, r14
    954a:	0d c0       	rjmp	.+26     	; 0x9566 <fgets+0x44>
    954c:	c6 01       	movw	r24, r12
    954e:	0e 94 74 4b 	call	0x96e8	; 0x96e8 <fgetc>
    9552:	ff ef       	ldi	r31, 0xFF	; 255
    9554:	8f 3f       	cpi	r24, 0xFF	; 255
    9556:	9f 07       	cpc	r25, r31
    9558:	59 f0       	breq	.+22     	; 0x9570 <fgets+0x4e>
    955a:	f8 01       	movw	r30, r16
    955c:	81 93       	st	Z+, r24
    955e:	8f 01       	movw	r16, r30
    9560:	0a 97       	sbiw	r24, 0x0a	; 10
    9562:	19 f0       	breq	.+6      	; 0x956a <fgets+0x48>
    9564:	21 97       	sbiw	r28, 0x01	; 1
    9566:	20 97       	sbiw	r28, 0x00	; 0
    9568:	89 f7       	brne	.-30     	; 0x954c <fgets+0x2a>
    956a:	f8 01       	movw	r30, r16
    956c:	10 82       	st	Z, r1
    956e:	02 c0       	rjmp	.+4      	; 0x9574 <fgets+0x52>
    9570:	ee 24       	eor	r14, r14
    9572:	ff 24       	eor	r15, r15
    9574:	c7 01       	movw	r24, r14
    9576:	df 91       	pop	r29
    9578:	cf 91       	pop	r28
    957a:	1f 91       	pop	r17
    957c:	0f 91       	pop	r16
    957e:	ff 90       	pop	r15
    9580:	ef 90       	pop	r14
    9582:	df 90       	pop	r13
    9584:	cf 90       	pop	r12
    9586:	08 95       	ret

00009588 <fputc>:
    9588:	0f 93       	push	r16
    958a:	1f 93       	push	r17
    958c:	cf 93       	push	r28
    958e:	df 93       	push	r29
    9590:	8c 01       	movw	r16, r24
    9592:	eb 01       	movw	r28, r22
    9594:	8b 81       	ldd	r24, Y+3	; 0x03
    9596:	81 ff       	sbrs	r24, 1
    9598:	1b c0       	rjmp	.+54     	; 0x95d0 <fputc+0x48>
    959a:	82 ff       	sbrs	r24, 2
    959c:	0d c0       	rjmp	.+26     	; 0x95b8 <fputc+0x30>
    959e:	2e 81       	ldd	r18, Y+6	; 0x06
    95a0:	3f 81       	ldd	r19, Y+7	; 0x07
    95a2:	8c 81       	ldd	r24, Y+4	; 0x04
    95a4:	9d 81       	ldd	r25, Y+5	; 0x05
    95a6:	28 17       	cp	r18, r24
    95a8:	39 07       	cpc	r19, r25
    95aa:	64 f4       	brge	.+24     	; 0x95c4 <fputc+0x3c>
    95ac:	e8 81       	ld	r30, Y
    95ae:	f9 81       	ldd	r31, Y+1	; 0x01
    95b0:	01 93       	st	Z+, r16
    95b2:	e8 83       	st	Y, r30
    95b4:	f9 83       	std	Y+1, r31	; 0x01
    95b6:	06 c0       	rjmp	.+12     	; 0x95c4 <fputc+0x3c>
    95b8:	e8 85       	ldd	r30, Y+8	; 0x08
    95ba:	f9 85       	ldd	r31, Y+9	; 0x09
    95bc:	80 2f       	mov	r24, r16
    95be:	19 95       	eicall
    95c0:	89 2b       	or	r24, r25
    95c2:	31 f4       	brne	.+12     	; 0x95d0 <fputc+0x48>
    95c4:	8e 81       	ldd	r24, Y+6	; 0x06
    95c6:	9f 81       	ldd	r25, Y+7	; 0x07
    95c8:	01 96       	adiw	r24, 0x01	; 1
    95ca:	8e 83       	std	Y+6, r24	; 0x06
    95cc:	9f 83       	std	Y+7, r25	; 0x07
    95ce:	02 c0       	rjmp	.+4      	; 0x95d4 <fputc+0x4c>
    95d0:	0f ef       	ldi	r16, 0xFF	; 255
    95d2:	1f ef       	ldi	r17, 0xFF	; 255
    95d4:	c8 01       	movw	r24, r16
    95d6:	df 91       	pop	r29
    95d8:	cf 91       	pop	r28
    95da:	1f 91       	pop	r17
    95dc:	0f 91       	pop	r16
    95de:	08 95       	ret

000095e0 <printf_P>:
    95e0:	df 93       	push	r29
    95e2:	cf 93       	push	r28
    95e4:	cd b7       	in	r28, 0x3d	; 61
    95e6:	de b7       	in	r29, 0x3e	; 62
    95e8:	fe 01       	movw	r30, r28
    95ea:	36 96       	adiw	r30, 0x06	; 6
    95ec:	61 91       	ld	r22, Z+
    95ee:	71 91       	ld	r23, Z+
    95f0:	a0 91 69 25 	lds	r26, 0x2569
    95f4:	b0 91 6a 25 	lds	r27, 0x256A
    95f8:	13 96       	adiw	r26, 0x03	; 3
    95fa:	8c 91       	ld	r24, X
    95fc:	13 97       	sbiw	r26, 0x03	; 3
    95fe:	88 60       	ori	r24, 0x08	; 8
    9600:	13 96       	adiw	r26, 0x03	; 3
    9602:	8c 93       	st	X, r24
    9604:	80 91 69 25 	lds	r24, 0x2569
    9608:	90 91 6a 25 	lds	r25, 0x256A
    960c:	af 01       	movw	r20, r30
    960e:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <vfprintf>
    9612:	e0 91 69 25 	lds	r30, 0x2569
    9616:	f0 91 6a 25 	lds	r31, 0x256A
    961a:	23 81       	ldd	r18, Z+3	; 0x03
    961c:	27 7f       	andi	r18, 0xF7	; 247
    961e:	23 83       	std	Z+3, r18	; 0x03
    9620:	cf 91       	pop	r28
    9622:	df 91       	pop	r29
    9624:	08 95       	ret

00009626 <__ultoa_invert>:
    9626:	fa 01       	movw	r30, r20
    9628:	aa 27       	eor	r26, r26
    962a:	28 30       	cpi	r18, 0x08	; 8
    962c:	51 f1       	breq	.+84     	; 0x9682 <__ultoa_invert+0x5c>
    962e:	20 31       	cpi	r18, 0x10	; 16
    9630:	81 f1       	breq	.+96     	; 0x9692 <__ultoa_invert+0x6c>
    9632:	e8 94       	clt
    9634:	6f 93       	push	r22
    9636:	6e 7f       	andi	r22, 0xFE	; 254
    9638:	6e 5f       	subi	r22, 0xFE	; 254
    963a:	7f 4f       	sbci	r23, 0xFF	; 255
    963c:	8f 4f       	sbci	r24, 0xFF	; 255
    963e:	9f 4f       	sbci	r25, 0xFF	; 255
    9640:	af 4f       	sbci	r26, 0xFF	; 255
    9642:	b1 e0       	ldi	r27, 0x01	; 1
    9644:	3e d0       	rcall	.+124    	; 0x96c2 <__ultoa_invert+0x9c>
    9646:	b4 e0       	ldi	r27, 0x04	; 4
    9648:	3c d0       	rcall	.+120    	; 0x96c2 <__ultoa_invert+0x9c>
    964a:	67 0f       	add	r22, r23
    964c:	78 1f       	adc	r23, r24
    964e:	89 1f       	adc	r24, r25
    9650:	9a 1f       	adc	r25, r26
    9652:	a1 1d       	adc	r26, r1
    9654:	68 0f       	add	r22, r24
    9656:	79 1f       	adc	r23, r25
    9658:	8a 1f       	adc	r24, r26
    965a:	91 1d       	adc	r25, r1
    965c:	a1 1d       	adc	r26, r1
    965e:	6a 0f       	add	r22, r26
    9660:	71 1d       	adc	r23, r1
    9662:	81 1d       	adc	r24, r1
    9664:	91 1d       	adc	r25, r1
    9666:	a1 1d       	adc	r26, r1
    9668:	20 d0       	rcall	.+64     	; 0x96aa <__ultoa_invert+0x84>
    966a:	09 f4       	brne	.+2      	; 0x966e <__ultoa_invert+0x48>
    966c:	68 94       	set
    966e:	3f 91       	pop	r19
    9670:	2a e0       	ldi	r18, 0x0A	; 10
    9672:	26 9f       	mul	r18, r22
    9674:	11 24       	eor	r1, r1
    9676:	30 19       	sub	r19, r0
    9678:	30 5d       	subi	r19, 0xD0	; 208
    967a:	31 93       	st	Z+, r19
    967c:	de f6       	brtc	.-74     	; 0x9634 <__ultoa_invert+0xe>
    967e:	cf 01       	movw	r24, r30
    9680:	08 95       	ret
    9682:	46 2f       	mov	r20, r22
    9684:	47 70       	andi	r20, 0x07	; 7
    9686:	40 5d       	subi	r20, 0xD0	; 208
    9688:	41 93       	st	Z+, r20
    968a:	b3 e0       	ldi	r27, 0x03	; 3
    968c:	0f d0       	rcall	.+30     	; 0x96ac <__ultoa_invert+0x86>
    968e:	c9 f7       	brne	.-14     	; 0x9682 <__ultoa_invert+0x5c>
    9690:	f6 cf       	rjmp	.-20     	; 0x967e <__ultoa_invert+0x58>
    9692:	46 2f       	mov	r20, r22
    9694:	4f 70       	andi	r20, 0x0F	; 15
    9696:	40 5d       	subi	r20, 0xD0	; 208
    9698:	4a 33       	cpi	r20, 0x3A	; 58
    969a:	18 f0       	brcs	.+6      	; 0x96a2 <__ultoa_invert+0x7c>
    969c:	49 5d       	subi	r20, 0xD9	; 217
    969e:	31 fd       	sbrc	r19, 1
    96a0:	40 52       	subi	r20, 0x20	; 32
    96a2:	41 93       	st	Z+, r20
    96a4:	02 d0       	rcall	.+4      	; 0x96aa <__ultoa_invert+0x84>
    96a6:	a9 f7       	brne	.-22     	; 0x9692 <__ultoa_invert+0x6c>
    96a8:	ea cf       	rjmp	.-44     	; 0x967e <__ultoa_invert+0x58>
    96aa:	b4 e0       	ldi	r27, 0x04	; 4
    96ac:	a6 95       	lsr	r26
    96ae:	97 95       	ror	r25
    96b0:	87 95       	ror	r24
    96b2:	77 95       	ror	r23
    96b4:	67 95       	ror	r22
    96b6:	ba 95       	dec	r27
    96b8:	c9 f7       	brne	.-14     	; 0x96ac <__ultoa_invert+0x86>
    96ba:	00 97       	sbiw	r24, 0x00	; 0
    96bc:	61 05       	cpc	r22, r1
    96be:	71 05       	cpc	r23, r1
    96c0:	08 95       	ret
    96c2:	9b 01       	movw	r18, r22
    96c4:	ac 01       	movw	r20, r24
    96c6:	0a 2e       	mov	r0, r26
    96c8:	06 94       	lsr	r0
    96ca:	57 95       	ror	r21
    96cc:	47 95       	ror	r20
    96ce:	37 95       	ror	r19
    96d0:	27 95       	ror	r18
    96d2:	ba 95       	dec	r27
    96d4:	c9 f7       	brne	.-14     	; 0x96c8 <__ultoa_invert+0xa2>
    96d6:	62 0f       	add	r22, r18
    96d8:	73 1f       	adc	r23, r19
    96da:	84 1f       	adc	r24, r20
    96dc:	95 1f       	adc	r25, r21
    96de:	a0 1d       	adc	r26, r0
    96e0:	08 95       	ret

000096e2 <__ctype_isfalse>:
    96e2:	99 27       	eor	r25, r25
    96e4:	88 27       	eor	r24, r24

000096e6 <__ctype_istrue>:
    96e6:	08 95       	ret

000096e8 <fgetc>:
    96e8:	cf 93       	push	r28
    96ea:	df 93       	push	r29
    96ec:	ec 01       	movw	r28, r24
    96ee:	4b 81       	ldd	r20, Y+3	; 0x03
    96f0:	40 ff       	sbrs	r20, 0
    96f2:	1a c0       	rjmp	.+52     	; 0x9728 <fgetc+0x40>
    96f4:	46 ff       	sbrs	r20, 6
    96f6:	0a c0       	rjmp	.+20     	; 0x970c <fgetc+0x24>
    96f8:	4f 7b       	andi	r20, 0xBF	; 191
    96fa:	4b 83       	std	Y+3, r20	; 0x03
    96fc:	8e 81       	ldd	r24, Y+6	; 0x06
    96fe:	9f 81       	ldd	r25, Y+7	; 0x07
    9700:	01 96       	adiw	r24, 0x01	; 1
    9702:	8e 83       	std	Y+6, r24	; 0x06
    9704:	9f 83       	std	Y+7, r25	; 0x07
    9706:	8a 81       	ldd	r24, Y+2	; 0x02
    9708:	28 2f       	mov	r18, r24
    970a:	2b c0       	rjmp	.+86     	; 0x9762 <fgetc+0x7a>
    970c:	42 ff       	sbrs	r20, 2
    970e:	13 c0       	rjmp	.+38     	; 0x9736 <fgetc+0x4e>
    9710:	e8 81       	ld	r30, Y
    9712:	f9 81       	ldd	r31, Y+1	; 0x01
    9714:	80 81       	ld	r24, Z
    9716:	28 2f       	mov	r18, r24
    9718:	33 27       	eor	r19, r19
    971a:	27 fd       	sbrc	r18, 7
    971c:	30 95       	com	r19
    971e:	21 15       	cp	r18, r1
    9720:	31 05       	cpc	r19, r1
    9722:	29 f4       	brne	.+10     	; 0x972e <fgetc+0x46>
    9724:	40 62       	ori	r20, 0x20	; 32
    9726:	4b 83       	std	Y+3, r20	; 0x03
    9728:	2f ef       	ldi	r18, 0xFF	; 255
    972a:	3f ef       	ldi	r19, 0xFF	; 255
    972c:	1b c0       	rjmp	.+54     	; 0x9764 <fgetc+0x7c>
    972e:	31 96       	adiw	r30, 0x01	; 1
    9730:	e8 83       	st	Y, r30
    9732:	f9 83       	std	Y+1, r31	; 0x01
    9734:	11 c0       	rjmp	.+34     	; 0x9758 <fgetc+0x70>
    9736:	ea 85       	ldd	r30, Y+10	; 0x0a
    9738:	fb 85       	ldd	r31, Y+11	; 0x0b
    973a:	ce 01       	movw	r24, r28
    973c:	19 95       	eicall
    973e:	9c 01       	movw	r18, r24
    9740:	97 ff       	sbrs	r25, 7
    9742:	0a c0       	rjmp	.+20     	; 0x9758 <fgetc+0x70>
    9744:	9b 81       	ldd	r25, Y+3	; 0x03
    9746:	2f 5f       	subi	r18, 0xFF	; 255
    9748:	3f 4f       	sbci	r19, 0xFF	; 255
    974a:	11 f0       	breq	.+4      	; 0x9750 <fgetc+0x68>
    974c:	80 e2       	ldi	r24, 0x20	; 32
    974e:	01 c0       	rjmp	.+2      	; 0x9752 <fgetc+0x6a>
    9750:	80 e1       	ldi	r24, 0x10	; 16
    9752:	89 2b       	or	r24, r25
    9754:	8b 83       	std	Y+3, r24	; 0x03
    9756:	e8 cf       	rjmp	.-48     	; 0x9728 <fgetc+0x40>
    9758:	8e 81       	ldd	r24, Y+6	; 0x06
    975a:	9f 81       	ldd	r25, Y+7	; 0x07
    975c:	01 96       	adiw	r24, 0x01	; 1
    975e:	8e 83       	std	Y+6, r24	; 0x06
    9760:	9f 83       	std	Y+7, r25	; 0x07
    9762:	30 e0       	ldi	r19, 0x00	; 0
    9764:	c9 01       	movw	r24, r18
    9766:	df 91       	pop	r29
    9768:	cf 91       	pop	r28
    976a:	08 95       	ret

0000976c <_exit>:
    976c:	f8 94       	cli

0000976e <__stop_program>:
    976e:	ff cf       	rjmp	.-2      	; 0x976e <__stop_program>
